
Final_Project_Code.elf:     file format elf32-littlenios2
Final_Project_Code.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0000022c

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00013268 memsz 0x00013268 flags r-x
    LOAD off    0x00014288 vaddr 0x00013288 paddr 0x00014de4 align 2**12
         filesz 0x00001b5c memsz 0x00001b5c flags rw-
    LOAD off    0x00016940 vaddr 0x00016940 paddr 0x00016940 align 2**12
         filesz 0x00000000 memsz 0x0000017c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000020c  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00012604  0000022c  0000022c  0000122c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000a58  00012830  00012830  00013830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b5c  00013288  00014de4  00014288  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000017c  00016940  00016940  00016940  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00016abc  00016abc  00015de4  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00015de4  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000dd0  00000000  00000000  00015e08  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00025470  00000000  00000000  00016bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000096bb  00000000  00000000  0003c048  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000b8cc  00000000  00000000  00045703  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000027d0  00000000  00000000  00050fd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003aa8  00000000  00000000  000537a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00016f01  00000000  00000000  00057248  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  0006e14c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000013c0  00000000  00000000  0006e190  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00072da4  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00072da7  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00072db3  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00072db4  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00072db5  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00072db9  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00072dbd  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  00072dc1  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  00072dcc  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  00072dd7  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  00072de2  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000003b  00000000  00000000  00072ded  2**0
                  CONTENTS, READONLY
 29 .jdi          000056ce  00000000  00000000  00072e28  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00083150  00000000  00000000  000784f6  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
0000022c l    d  .text	00000000 .text
00012830 l    d  .rodata	00000000 .rodata
00013288 l    d  .rwdata	00000000 .rwdata
00016940 l    d  .bss	00000000 .bss
00016abc l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Final_Project_Code_bsp//obj/HAL/src/crt0.o
00000264 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 io_handler.c
00000000 l    df *ABS*	00000000 keyboard_functions.c
00016940 l     O .bss	00000002 ctl_reg
00016942 l     O .bss	00000002 no_device
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 play_game.c
00000000 l    df *ABS*	00000000 usb.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0000343c l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00012fce l     O .rodata	00000010 zeroes.4181
00012fde l     O .rodata	00000010 blanks.4180
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00006224 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00007dcc l     F .text	00000008 __fp_lock
00007dd4 l     F .text	00000008 __fp_unlock
00007de8 l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00013700 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
00013b44 l     O .rwdata	00000020 lc_ctype_charset
00013b24 l     O .rwdata	00000020 lc_message_charset
00013b64 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00013010 l     O .rodata	0000000c p05.2678
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0000ab1c l     F .text	000000fc __sprint_r.part.0
00013144 l     O .rodata	00000010 blanks.4125
00013134 l     O .rodata	00000010 zeroes.4126
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0000ff50 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00010078 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
000100a4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
000101ac l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
000102a8 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0001038c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00010570 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00014dd4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00010824 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00010974 l     F .text	00000038 alt_dev_reg
00013d44 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00010c50 l     F .text	00000204 altera_avalon_jtag_uart_irq
00010e54 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00011728 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00011bc0 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00011d18 l     F .text	00000050 alt_get_errno
00011d68 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00016990 g     O .bss	00000004 alt_instruction_exception_handler
0000a1b0 g     F .text	00000074 _mprec_log10
0000a29c g     F .text	0000008c __any_on
0000c548 g     F .text	00000054 _isatty_r
0001301c g     O .rodata	00000028 __mprec_tinytens
000104b8 g     F .text	00000078 alt_main
00003da0 g     F .text	000000b8 _puts_r
000169bc g     O .bss	00000100 alt_irq
0000c59c g     F .text	0000005c _lseek_r
00014de4 g       *ABS*	00000000 __flash_rwdata_start
0000e970 g     F .text	00000084 .hidden __eqdf2
00016abc g       *ABS*	00000000 __alt_heap_start
00003d64 g     F .text	0000003c printf
0000c7c4 g     F .text	0000009c _wcrtomb_r
00016950 g     O .bss	00000002 usb_ctl_val
0000aa14 g     F .text	0000005c __sseek
00008130 g     F .text	00000010 __sinit
00016948 g     O .bss	00000004 keycode
0000c654 g     F .text	00000154 __swbuf_r
00008ba8 g     F .text	0000007c _setlocale_r
00007f88 g     F .text	00000078 __sfmoreglue
00010550 g     F .text	00000020 __malloc_unlock
00003340 g     F .text	00000080 UsbGetRetryCnt
00009060 g     F .text	0000015c memmove
00000268 g     F .text	00000060 IO_init
00008118 g     F .text	00000018 _cleanup
000092e0 g     F .text	000000a8 _Balloc
0000e9f4 g     F .text	000000e0 .hidden __gtdf2
00012158 g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
0000c4f0 g     F .text	00000058 _fstat_r
00016968 g     O .bss	00000004 errno
0000a990 g     F .text	00000008 __seofread
00000394 g     F .text	0000030c get_keycode
0001697c g     O .bss	00000004 alt_argv
0001cda4 g       *ABS*	00000000 _gp
000107f4 g     F .text	00000030 usleep
00001570 g     F .text	000000dc delete_enemy
00013bc4 g     O .rwdata	00000180 alt_fd_list
00012178 g     F .text	00000090 alt_find_dev
00008f28 g     F .text	00000138 memcpy
00001e44 g     F .text	000000bc fire_projectile
000019e0 g     F .text	0000008c render_shadow
00007ddc g     F .text	0000000c _cleanup_r
0000fd78 g     F .text	000000d0 .hidden __floatsidf
00011ca0 g     F .text	00000078 alt_io_redirect
00016952 g     O .bss	00000001 data_size
0000ead4 g     F .text	000000e0 .hidden __ltdf2
00012830 g       *ABS*	00000000 __DTOR_END__
00003e58 g     F .text	00000014 puts
000123f0 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00001774 g     F .text	000000b0 render_enemy
0000a8c8 g     F .text	00000074 __fpclassifyd
0000a10c g     F .text	000000a4 __ratio
0000c054 g     F .text	00000024 __vfiprintf_internal
00011050 g     F .text	0000020c altera_avalon_jtag_uart_read
00003568 g     F .text	00000014 malloc
00003d38 g     F .text	0000002c _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00003558 g     F .text	00000008 .hidden __udivsi3
000101fc g     F .text	000000ac isatty
0001306c g     O .rodata	000000c8 __mprec_tens
00008c24 g     F .text	0000000c __locale_charset
00001724 g     F .text	00000050 render_enemies
00016964 g     O .bss	00000004 __malloc_top_pad
000029e0 g     F .text	00000264 UsbGetConfigDesc2
00014db4 g     O .rwdata	00000004 __mb_cur_max
00008c54 g     F .text	0000000c _localeconv_r
00013288 g     O .rwdata	00000070 sizes
00009708 g     F .text	0000003c __i2b
00008594 g     F .text	000004a4 __sfvwrite_r
00016954 g     O .bss	00000002 intStat
00003ee8 g     F .text	00000054 _sbrk_r
0000c5f8 g     F .text	0000005c _read_r
00014dcc g     O .rwdata	00000004 alt_max_fd
0000c200 g     F .text	00000100 _fclose_r
00007d9c g     F .text	00000030 fflush
00016960 g     O .bss	00000004 __malloc_max_sbrked_mem
00001484 g     F .text	000000ec make_enemy
00001940 g     F .text	000000a0 render_shadows
000021dc g     F .text	0000011c move_enemy
0000d754 g     F .text	0000089c .hidden __adddf3
00009eb4 g     F .text	0000011c __b2d
0000d110 g     F .text	0000061c .hidden __umoddi3
000103dc g     F .text	000000dc lseek
00014dac g     O .rwdata	00000004 _global_impure_ptr
0000a328 g     F .text	000005a0 _realloc_r
00016abc g       *ABS*	00000000 __bss_end
00011ad0 g     F .text	000000f0 alt_iic_isr_register
00012054 g     F .text	00000104 alt_tick
0000cad0 g     F .text	00000640 .hidden __udivdi3
0000c314 g     F .text	00000184 _fputwc_r
00013044 g     O .rodata	00000028 __mprec_bigtens
000094ec g     F .text	00000104 __s2b
0000fe48 g     F .text	000000a4 .hidden __floatunsidf
00009c5c g     F .text	00000060 __mcmp
00002440 g     F .text	000000fc UsbSetAddress
00008150 g     F .text	00000018 __fp_lock_all
00011a84 g     F .text	0000004c alt_ic_irq_enabled
00011fbc g     F .text	00000098 alt_alarm_stop
00016984 g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	000000d0 alt_irq_handler
00013b9c g     O .rwdata	00000028 alt_dev_null
00001218 g     F .text	000000dc init_players
0001170c g     F .text	0000001c alt_dcache_flush_all
000095f0 g     F .text	00000068 __hi0bits
00000330 g     F .text	00000064 IO_read
0000fcf0 g     F .text	00000088 .hidden __fixdfsi
00014de4 g       *ABS*	00000000 __ram_rwdata_end
00014dc4 g     O .rwdata	00000008 alt_dev_list
00010874 g     F .text	00000100 write
00013288 g       *ABS*	00000000 __ram_rodata_end
000100f4 g     F .text	000000b8 fstat
0000ead4 g     F .text	000000e0 .hidden __ledf2
000033c0 g     F .text	0000007c UsbPrintMem
000099d4 g     F .text	00000140 __pow5mult
0000ac30 g     F .text	00001424 ___vfiprintf_internal_r
00016974 g     O .bss	00000004 __nlocale_changed
00003560 g     F .text	00000008 .hidden __umodsi3
00001b30 g     F .text	00000058 render_player_check
00016abc g       *ABS*	00000000 end
00010b8c g     F .text	000000c4 altera_avalon_jtag_uart_init
000001cc g     F .exceptions	00000060 alt_instruction_exception_entry
00012830 g       *ABS*	00000000 __CTOR_LIST__
00055730 g       *ABS*	00000000 __alt_stack_pointer
000013dc g     F .text	000000a8 render_projectile
0000feec g     F .text	00000064 .hidden __clzsi2
0001125c g     F .text	00000218 altera_avalon_jtag_uart_write
00008140 g     F .text	00000004 __sfp_lock_acquire
00008e40 g     F .text	000000e8 memchr
00003fd4 g     F .text	000020fc ___vfprintf_internal_r
00002d40 g     F .text	000000fc UsbClassRequest
000082a4 g     F .text	000002f0 _free_r
00008c30 g     F .text	00000010 __locale_mb_cur_max
00012668 g     F .text	00000194 __call_exitprocs
00016970 g     O .bss	00000004 __mlocale_changed
00014da4 g     O .rwdata	00000004 __malloc_sbrk_base
0000022c g     F .text	0000003c _start
00016988 g     O .bss	00000004 _alt_tick_rate
00003e84 g     F .text	00000064 rand
00009b14 g     F .text	00000148 __lshift
0001698c g     O .bss	00000004 _alt_nticks
000105c0 g     F .text	00000104 read
000109e0 g     F .text	00000048 alt_sys_init
00012554 g     F .text	00000114 __register_exitproc
00009744 g     F .text	00000290 __multiply
00010efc g     F .text	00000068 altera_avalon_jtag_uart_close
00001824 g     F .text	0000011c renderer
0000d72c g     F .text	00000028 .hidden __mulsi3
00013288 g       *ABS*	00000000 __ram_rwdata_start
00012830 g       *ABS*	00000000 __ram_rodata_start
00016994 g     O .bss	00000028 __malloc_current_mallinfo
000006a0 g     F .text	00000a0c setup_keyboard
00009fd0 g     F .text	0000013c __d2b
0000253c g     F .text	00000144 UsbGetDeviceDesc1
00010a28 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0000138c g     F .text	00000050 render_projectiles
0001231c g     F .text	000000d4 alt_get_fd
000115b4 g     F .text	00000158 alt_busy_sleep
0000c0d4 g     F .text	00000054 _close_r
000020c0 g     F .text	0000011c move_player
000124d8 g     F .text	0000007c memcmp
00010ae8 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00016abc g       *ABS*	00000000 __alt_stack_base
00010b38 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00001fd4 g     F .text	000000ec hits_enemy
000060f4 g     F .text	00000130 __swsetup_r
0000dff0 g     F .text	00000980 .hidden __divdf3
00008000 g     F .text	00000118 __sfp
0000a224 g     F .text	00000078 __copybits
000132f8 g     O .rwdata	00000408 __malloc_av_
0000814c g     F .text	00000004 __sinit_lock_release
0000ebb4 g     F .text	0000086c .hidden __muldf3
0000a93c g     F .text	00000054 __sread
000032bc g     F .text	00000084 UsbWaitTDListDone
00012208 g     F .text	00000114 alt_find_file
00011778 g     F .text	000000a4 alt_dev_llist_insert
00010530 g     F .text	00000020 __malloc_lock
00010744 g     F .text	000000b0 sbrk
00007b74 g     F .text	00000228 _fflush_r
0000c128 g     F .text	000000d8 _calloc_r
00016956 g     O .bss	00000001 hot_plug_count
00016940 g       *ABS*	00000000 __bss_start
000091bc g     F .text	00000124 memset
000010ac g     F .text	0000016c main
00016980 g     O .bss	00000004 alt_envp
0001695c g     O .bss	00000004 __malloc_max_total_mem
00010a88 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00002c44 g     F .text	000000fc UsbSetConfig
0000c7a8 g     F .text	0000001c __swbuf
00003e6c g     F .text	00000018 srand
0000aa70 g     F .text	00000008 __sclose
00055730 g       *ABS*	00000000 __alt_heap_limit
0000c300 g     F .text	00000014 fclose
0000644c g     F .text	00001728 _dtoa_r
00003590 g     F .text	000007a8 _malloc_r
0000c938 g     F .text	00000030 __ascii_wctomb
00014dd0 g     O .rwdata	00000004 alt_errno
00008a38 g     F .text	000000b8 _fwalk
000034a8 g     F .text	00000054 .hidden __divsi3
00008180 g     F .text	00000124 _malloc_trim_r
00002e3c g     F .text	00000144 UsbGetHidDesc
00012830 g       *ABS*	00000000 __CTOR_END__
0000aa78 g     F .text	000000a4 strcmp
00012830 g       *ABS*	00000000 __flash_rodata_start
00012830 g       *ABS*	00000000 __DTOR_LIST__
0000e970 g     F .text	00000084 .hidden __nedf2
0000234c g     F .text	00000044 UsbRead
00001dd0 g     F .text	00000074 parse_keycode
00001344 g     F .text	00000048 move_projectiles
000109ac g     F .text	00000034 alt_irq_init
000106c4 g     F .text	00000080 alt_release_fd
00013154 g     O .rodata	00000100 .hidden __clz_tab
0001696c g     O .bss	00000004 _PathLocale
0001248c g     F .text	00000014 atexit
0000c078 g     F .text	0000005c _write_r
00008c60 g     F .text	0000001c setlocale
00014db0 g     O .rwdata	00000004 _impure_ptr
00016978 g     O .bss	00000004 alt_argc
00011878 g     F .text	0000005c _do_dtors
00008c4c g     F .text	00000008 __locale_cjk_lang
00001f00 g     F .text	000000d4 check_projectiles
00000020 g       .exceptions	00000000 alt_irq_entry
00009e54 g     F .text	00000060 __ulp
00008168 g     F .text	00000018 __fp_unlock_all
0001694c g     O .bss	00000001 toggle
00001a6c g     F .text	000000c4 render_players
000016a0 g     F .text	00000084 move_enemies
00014dbc g     O .rwdata	00000008 alt_fs_list
00002f80 g     F .text	0000033c UsbGetReportDesc
00000020 g       *ABS*	00000000 __ram_exceptions_start
00008c7c g     F .text	0000000c localeconv
000118f0 g     F .text	00000050 alt_ic_isr_register
000012f4 g     F .text	00000050 move_projectile
00014de4 g       *ABS*	00000000 _edata
00016abc g       *ABS*	00000000 _end
000022f8 g     F .text	00000054 UsbWrite
0000164c g     F .text	00000054 count_enemies
0000022c g       *ABS*	00000000 __ram_exceptions_end
00010f64 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
00016958 g     O .bss	00000002 code
000119e0 g     F .text	000000a4 alt_ic_irq_disable
0000a998 g     F .text	0000007c __swrite
00014da8 g     O .rwdata	00000004 __malloc_trim_threshold
00008c40 g     F .text	0000000c __locale_msgcharset
00016944 g     O .bss	00000002 fs_device
000124a0 g     F .text	00000038 exit
00008af0 g     F .text	000000b8 _fwalk_reent
00009cbc g     F .text	00000198 __mdiff
000034fc g     F .text	0000005c .hidden __modsi3
00055730 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00008144 g     F .text	00000004 __sfp_lock_release
000002c8 g     F .text	00000068 IO_write
000127fc g     F .text	00000034 _exit
00011474 g     F .text	00000140 alt_alarm_start
0000c9c4 g     F .text	0000010c .hidden __muldi3
00008c88 g     F .text	000001b8 __smakebuf_r
00003f3c g     F .text	00000098 strlen
00011e5c g     F .text	00000160 open
0000e9f4 g     F .text	000000e0 .hidden __gedf2
00014db8 g     O .rwdata	00000004 __wctomb
0000ac18 g     F .text	00000018 __sprint_r
000118d4 g     F .text	0000001c alt_icache_flush_all
00014dd8 g     O .rwdata	00000004 alt_priority_mask
00011940 g     F .text	000000a0 alt_ic_irq_enable
000060d0 g     F .text	00000024 __vfprintf_internal
0000c968 g     F .text	0000005c _wctomb_r
0000f420 g     F .text	000008d0 .hidden __subdf3
00001b88 g     F .text	00000248 keycode_effect
00009658 g     F .text	000000b0 __lo0bits
00002854 g     F .text	0000018c UsbGetConfigDesc1
00014ddc g     O .rwdata	00000008 alt_alarm_list
0001181c g     F .text	0000005c _do_ctors
00002390 g     F .text	000000b0 UsbSoftReset
0000c860 g     F .text	000000d8 wcrtomb
0000ffa0 g     F .text	000000d8 close
00002680 g     F .text	000001d4 UsbGetDeviceDesc2
0001030c g     F .text	00000080 alt_load
0000c498 g     F .text	00000058 fputwc
0000357c g     F .text	00000014 free
00008148 g     F .text	00000004 __sinit_lock_acquire
000093b0 g     F .text	0000013c __multadd
00009388 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08408b14 	ori	at,at,556
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001cc0 	call	1cc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	00800074 	movhi	r2,1
 140:	109a6f04 	addi	r2,r2,27068
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	00800074 	movhi	r2,1
 158:	109a6f04 	addi	r2,r2,27068
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <__alt_data_end+0xfffaa9fc>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <__alt_data_end+0xfffaa9f0>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0001883a 	nop
}
 1b8:	e037883a 	mov	sp,fp
 1bc:	dfc00117 	ldw	ra,4(sp)
 1c0:	df000017 	ldw	fp,0(sp)
 1c4:	dec00204 	addi	sp,sp,8
 1c8:	f800283a 	ret

000001cc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1cc:	defffb04 	addi	sp,sp,-20
 1d0:	dfc00415 	stw	ra,16(sp)
 1d4:	df000315 	stw	fp,12(sp)
 1d8:	df000304 	addi	fp,sp,12
 1dc:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 1e0:	00bfffc4 	movi	r2,-1
 1e4:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 1e8:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1ec:	d0a6fb17 	ldw	r2,-25620(gp)
 1f0:	10000726 	beq	r2,zero,210 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 1f4:	d0a6fb17 	ldw	r2,-25620(gp)
 1f8:	e0fffd17 	ldw	r3,-12(fp)
 1fc:	1809883a 	mov	r4,r3
 200:	e17fff17 	ldw	r5,-4(fp)
 204:	e1bffe17 	ldw	r6,-8(fp)
 208:	103ee83a 	callr	r2
 20c:	00000206 	br	218 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 210:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 214:	0005883a 	mov	r2,zero
}
 218:	e037883a 	mov	sp,fp
 21c:	dfc00117 	ldw	ra,4(sp)
 220:	df000017 	ldw	fp,0(sp)
 224:	dec00204 	addi	sp,sp,8
 228:	f800283a 	ret

Disassembly of section .text:

0000022c <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     22c:	06c00174 	movhi	sp,5
    ori sp, sp, %lo(__alt_stack_pointer)
     230:	ded5cc14 	ori	sp,sp,22320
    movhi gp, %hi(_gp)
     234:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     238:	d6b36914 	ori	gp,gp,52644
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     23c:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     240:	109a5014 	ori	r2,r2,26944

    movhi r3, %hi(__bss_end)
     244:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     248:	18daaf14 	ori	r3,r3,27324

    beq r2, r3, 1f
     24c:	10c00326 	beq	r2,r3,25c <_start+0x30>

0:
    stw zero, (r2)
     250:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     254:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     258:	10fffd36 	bltu	r2,r3,250 <__alt_data_end+0xfffaab20>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     25c:	001030c0 	call	1030c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     260:	00104b80 	call	104b8 <alt_main>

00000264 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     264:	003fff06 	br	264 <__alt_data_end+0xfffaab34>

00000268 <IO_init>:
#define otg_hpi_cs			(volatile char*)	OTG_HPI_CS_BASE //FOR SOME REASON CS BASE BEHAVES WEIRDLY MIGHT HAVE TO SET MANUALLY
#define otg_hpi_w			(volatile char*)	OTG_HPI_W_BASE


void IO_init(void)
{
     268:	deffff04 	addi	sp,sp,-4
     26c:	df000015 	stw	fp,0(sp)
     270:	d839883a 	mov	fp,sp
	*otg_hpi_cs = 0;
     274:	00800234 	movhi	r2,8
     278:	10841404 	addi	r2,r2,4176
     27c:	10000005 	stb	zero,0(r2)
	*otg_hpi_r = 1;
     280:	00800234 	movhi	r2,8
     284:	10840804 	addi	r2,r2,4128
     288:	00c00044 	movi	r3,1
     28c:	10c00005 	stb	r3,0(r2)
	*otg_hpi_w = 1;
     290:	00800234 	movhi	r2,8
     294:	10840404 	addi	r2,r2,4112
     298:	00c00044 	movi	r3,1
     29c:	10c00005 	stb	r3,0(r2)
	*otg_hpi_address = 0;
     2a0:	00800234 	movhi	r2,8
     2a4:	10841004 	addi	r2,r2,4160
     2a8:	10000015 	stw	zero,0(r2)
	*otg_hpi_data = 0;
     2ac:	00800234 	movhi	r2,8
     2b0:	10840c04 	addi	r2,r2,4144
     2b4:	10000015 	stw	zero,0(r2)
}
     2b8:	e037883a 	mov	sp,fp
     2bc:	df000017 	ldw	fp,0(sp)
     2c0:	dec00104 	addi	sp,sp,4
     2c4:	f800283a 	ret

000002c8 <IO_write>:

void IO_write(alt_u8 Address, alt_u16 Data)
{
     2c8:	defffd04 	addi	sp,sp,-12
     2cc:	df000215 	stw	fp,8(sp)
     2d0:	df000204 	addi	fp,sp,8
     2d4:	2007883a 	mov	r3,r4
     2d8:	2805883a 	mov	r2,r5
     2dc:	e0fffe05 	stb	r3,-8(fp)
     2e0:	e0bfff0d 	sth	r2,-4(fp)
	*otg_hpi_address = Address;
     2e4:	00800234 	movhi	r2,8
     2e8:	10841004 	addi	r2,r2,4160
     2ec:	e0fffe03 	ldbu	r3,-8(fp)
     2f0:	10c00015 	stw	r3,0(r2)
	*otg_hpi_data = Data;
     2f4:	00800234 	movhi	r2,8
     2f8:	10840c04 	addi	r2,r2,4144
     2fc:	e0ffff0b 	ldhu	r3,-4(fp)
     300:	10c00015 	stw	r3,0(r2)
	*otg_hpi_w = 0;
     304:	00800234 	movhi	r2,8
     308:	10840404 	addi	r2,r2,4112
     30c:	10000005 	stb	zero,0(r2)
	*otg_hpi_w = 1;
     310:	00800234 	movhi	r2,8
     314:	10840404 	addi	r2,r2,4112
     318:	00c00044 	movi	r3,1
     31c:	10c00005 	stb	r3,0(r2)
}
     320:	e037883a 	mov	sp,fp
     324:	df000017 	ldw	fp,0(sp)
     328:	dec00104 	addi	sp,sp,4
     32c:	f800283a 	ret

00000330 <IO_read>:

alt_u16 IO_read(alt_u8 Address)
{
     330:	defffd04 	addi	sp,sp,-12
     334:	df000215 	stw	fp,8(sp)
     338:	df000204 	addi	fp,sp,8
     33c:	2005883a 	mov	r2,r4
     340:	e0bfff05 	stb	r2,-4(fp)
	alt_u16 temp;
	*otg_hpi_address = Address;
     344:	00800234 	movhi	r2,8
     348:	10841004 	addi	r2,r2,4160
     34c:	e0ffff03 	ldbu	r3,-4(fp)
     350:	10c00015 	stw	r3,0(r2)
	*otg_hpi_r = 0;
     354:	00800234 	movhi	r2,8
     358:	10840804 	addi	r2,r2,4128
     35c:	10000005 	stb	zero,0(r2)
	temp = *otg_hpi_data;
     360:	00800234 	movhi	r2,8
     364:	10840c04 	addi	r2,r2,4144
     368:	10800017 	ldw	r2,0(r2)
     36c:	e0bffe0d 	sth	r2,-8(fp)
	*otg_hpi_r = 1;
     370:	00800234 	movhi	r2,8
     374:	10840804 	addi	r2,r2,4128
     378:	00c00044 	movi	r3,1
     37c:	10c00005 	stb	r3,0(r2)

	return temp;
     380:	e0bffe0b 	ldhu	r2,-8(fp)
}
     384:	e037883a 	mov	sp,fp
     388:	df000017 	ldw	fp,0(sp)
     38c:	dec00104 	addi	sp,sp,4
     390:	f800283a 	ret

00000394 <get_keycode>:
alt_u16 code;




int get_keycode(unsigned int *keycode1,unsigned int *keycode2){
     394:	defffc04 	addi	sp,sp,-16
     398:	dfc00315 	stw	ra,12(sp)
     39c:	df000215 	stw	fp,8(sp)
     3a0:	df000204 	addi	fp,sp,8
     3a4:	e13ffe15 	stw	r4,-8(fp)
     3a8:	e17fff15 	stw	r5,-4(fp)
				toggle++;
     3ac:	d0a6ea03 	ldbu	r2,-25688(gp)
     3b0:	10800044 	addi	r2,r2,1
     3b4:	d0a6ea05 	stb	r2,-25688(gp)
				IO_write(HPI_ADDR,0x0500); //the start address
     3b8:	01000084 	movi	r4,2
     3bc:	01414004 	movi	r5,1280
     3c0:	00002c80 	call	2c8 <IO_write>
				//data phase IN-1
				IO_write(HPI_DATA,0x051c); //500
     3c4:	0009883a 	mov	r4,zero
     3c8:	01414704 	movi	r5,1308
     3cc:	00002c80 	call	2c8 <IO_write>

				IO_write(HPI_DATA,0x000f & data_size);//2 data length
     3d0:	d0a6eb83 	ldbu	r2,-25682(gp)
     3d4:	10803fcc 	andi	r2,r2,255
     3d8:	108003cc 	andi	r2,r2,15
     3dc:	0009883a 	mov	r4,zero
     3e0:	100b883a 	mov	r5,r2
     3e4:	00002c80 	call	2c8 <IO_write>

				IO_write(HPI_DATA,0x0291);//4 //endpoint 1
     3e8:	0009883a 	mov	r4,zero
     3ec:	0140a444 	movi	r5,657
     3f0:	00002c80 	call	2c8 <IO_write>
				if(toggle%2)
     3f4:	d0a6ea03 	ldbu	r2,-25688(gp)
     3f8:	1080004c 	andi	r2,r2,1
     3fc:	10803fcc 	andi	r2,r2,255
     400:	10000426 	beq	r2,zero,414 <get_keycode+0x80>
				{
					IO_write(HPI_DATA,0x0001);//6 //data 1
     404:	0009883a 	mov	r4,zero
     408:	01400044 	movi	r5,1
     40c:	00002c80 	call	2c8 <IO_write>
     410:	00000306 	br	420 <get_keycode+0x8c>
				}
				else
				{
					IO_write(HPI_DATA,0x0041);//6 //data 1
     414:	0009883a 	mov	r4,zero
     418:	01401044 	movi	r5,65
     41c:	00002c80 	call	2c8 <IO_write>
				}
				IO_write(HPI_DATA,0x0013);//8
     420:	0009883a 	mov	r4,zero
     424:	014004c4 	movi	r5,19
     428:	00002c80 	call	2c8 <IO_write>
				IO_write(HPI_DATA,0x0000);//a
     42c:	0009883a 	mov	r4,zero
     430:	000b883a 	mov	r5,zero
     434:	00002c80 	call	2c8 <IO_write>
				UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
     438:	01006c04 	movi	r4,432
     43c:	01414004 	movi	r5,1280
     440:	00022f80 	call	22f8 <UsbWrite>

				while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     444:	00002506 	br	4dc <get_keycode+0x148>
				{
					IO_write(HPI_ADDR,0x0500); //the start address
     448:	01000084 	movi	r4,2
     44c:	01414004 	movi	r5,1280
     450:	00002c80 	call	2c8 <IO_write>
					//data phase IN-1
					IO_write(HPI_DATA,0x051c); //500
     454:	0009883a 	mov	r4,zero
     458:	01414704 	movi	r5,1308
     45c:	00002c80 	call	2c8 <IO_write>

					IO_write(HPI_DATA,0x000f & data_size);//2 data length
     460:	d0a6eb83 	ldbu	r2,-25682(gp)
     464:	10803fcc 	andi	r2,r2,255
     468:	108003cc 	andi	r2,r2,15
     46c:	0009883a 	mov	r4,zero
     470:	100b883a 	mov	r5,r2
     474:	00002c80 	call	2c8 <IO_write>

					IO_write(HPI_DATA,0x0291);//4 //endpoint 1
     478:	0009883a 	mov	r4,zero
     47c:	0140a444 	movi	r5,657
     480:	00002c80 	call	2c8 <IO_write>
					if(toggle%2)
     484:	d0a6ea03 	ldbu	r2,-25688(gp)
     488:	1080004c 	andi	r2,r2,1
     48c:	10803fcc 	andi	r2,r2,255
     490:	10000426 	beq	r2,zero,4a4 <get_keycode+0x110>
					{
						IO_write(HPI_DATA,0x0001);//6 //data 1
     494:	0009883a 	mov	r4,zero
     498:	01400044 	movi	r5,1
     49c:	00002c80 	call	2c8 <IO_write>
     4a0:	00000306 	br	4b0 <get_keycode+0x11c>
					}
					else
					{
						IO_write(HPI_DATA,0x0041);//6 //data 1
     4a4:	0009883a 	mov	r4,zero
     4a8:	01401044 	movi	r5,65
     4ac:	00002c80 	call	2c8 <IO_write>
					}
					IO_write(HPI_DATA,0x0013);//8
     4b0:	0009883a 	mov	r4,zero
     4b4:	014004c4 	movi	r5,19
     4b8:	00002c80 	call	2c8 <IO_write>
					IO_write(HPI_DATA,0x0000);//
     4bc:	0009883a 	mov	r4,zero
     4c0:	000b883a 	mov	r5,zero
     4c4:	00002c80 	call	2c8 <IO_write>
					UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
     4c8:	01006c04 	movi	r4,432
     4cc:	01414004 	movi	r5,1280
     4d0:	00022f80 	call	22f8 <UsbWrite>
					usleep(10*1000);
     4d4:	0109c404 	movi	r4,10000
     4d8:	00107f40 	call	107f4 <usleep>
				}
				IO_write(HPI_DATA,0x0013);//8
				IO_write(HPI_DATA,0x0000);//a
				UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr

				while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     4dc:	010000c4 	movi	r4,3
     4e0:	00003300 	call	330 <IO_read>
     4e4:	10bfffcc 	andi	r2,r2,65535
     4e8:	1080040c 	andi	r2,r2,16
     4ec:	103fd626 	beq	r2,zero,448 <__alt_data_end+0xfffaad18>
					usleep(10*1000);
				}//end while



				usb_ctl_val = UsbWaitTDListDone();
     4f0:	00032bc0 	call	32bc <UsbWaitTDListDone>
     4f4:	d0a6eb0d 	sth	r2,-25684(gp)

				// packet starts from 0x051c, reading third byte
				// TASK: Write the address to read from the memory for byte 3 of the report descriptor to HPI_ADDR.
				IO_write(HPI_ADDR,0x051e); //the start address
     4f8:	01000084 	movi	r4,2
     4fc:	01414784 	movi	r5,1310
     500:	00002c80 	call	2c8 <IO_write>
				*keycode1 = IO_read(HPI_DATA);
     504:	0009883a 	mov	r4,zero
     508:	00003300 	call	330 <IO_read>
     50c:	10ffffcc 	andi	r3,r2,65535
     510:	e0bffe17 	ldw	r2,-8(fp)
     514:	10c00015 	stw	r3,0(r2)
				keycode=*keycode1;
     518:	e0bffe17 	ldw	r2,-8(fp)
     51c:	10800017 	ldw	r2,0(r2)
     520:	d0a6e915 	stw	r2,-25692(gp)


				*keycode2 = IO_read(HPI_DATA);
     524:	0009883a 	mov	r4,zero
     528:	00003300 	call	330 <IO_read>
     52c:	10ffffcc 	andi	r3,r2,65535
     530:	e0bfff17 	ldw	r2,-4(fp)
     534:	10c00015 	stw	r3,0(r2)


				IOWR(KEYCODE_BASE, 0, keycode & 0xff);
     538:	d0a6e917 	ldw	r2,-25692(gp)
     53c:	10c03fcc 	andi	r3,r2,255
     540:	00800234 	movhi	r2,8
     544:	10841804 	addi	r2,r2,4192
     548:	10c00035 	stwio	r3,0(r2)



				usb_ctl_val = UsbRead(ctl_reg);
     54c:	d0a6e70b 	ldhu	r2,-25700(gp)
     550:	10bfffcc 	andi	r2,r2,65535
     554:	1009883a 	mov	r4,r2
     558:	000234c0 	call	234c <UsbRead>
     55c:	d0a6eb0d 	sth	r2,-25684(gp)

				if(!(usb_ctl_val & no_device))
     560:	d0e6eb0b 	ldhu	r3,-25684(gp)
     564:	d0a6e78b 	ldhu	r2,-25698(gp)
     568:	1884703a 	and	r2,r3,r2
     56c:	10bfffcc 	andi	r2,r2,65535
     570:	1000211e 	bne	r2,zero,5f8 <get_keycode+0x264>
				{
					//USB hot plug routine
					for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
     574:	d026ec85 	stb	zero,-25678(gp)
     578:	00001006 	br	5bc <get_keycode+0x228>
					{
						usleep(5*1000);
     57c:	0104e204 	movi	r4,5000
     580:	00107f40 	call	107f4 <usleep>
						usb_ctl_val = UsbRead(ctl_reg);
     584:	d0a6e70b 	ldhu	r2,-25700(gp)
     588:	10bfffcc 	andi	r2,r2,65535
     58c:	1009883a 	mov	r4,r2
     590:	000234c0 	call	234c <UsbRead>
     594:	d0a6eb0d 	sth	r2,-25684(gp)
						if(usb_ctl_val & no_device) break;
     598:	d0e6eb0b 	ldhu	r3,-25684(gp)
     59c:	d0a6e78b 	ldhu	r2,-25698(gp)
     5a0:	1884703a 	and	r2,r3,r2
     5a4:	10bfffcc 	andi	r2,r2,65535
     5a8:	10000126 	beq	r2,zero,5b0 <get_keycode+0x21c>
     5ac:	00000706 	br	5cc <get_keycode+0x238>
				usb_ctl_val = UsbRead(ctl_reg);

				if(!(usb_ctl_val & no_device))
				{
					//USB hot plug routine
					for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
     5b0:	d0a6ec83 	ldbu	r2,-25678(gp)
     5b4:	10800044 	addi	r2,r2,1
     5b8:	d0a6ec85 	stb	r2,-25678(gp)
     5bc:	d0a6ec83 	ldbu	r2,-25678(gp)
     5c0:	10803fcc 	andi	r2,r2,255
     5c4:	108001f0 	cmpltui	r2,r2,7
     5c8:	103fec1e 	bne	r2,zero,57c <__alt_data_end+0xfffaae4c>
					{
						usleep(5*1000);
						usb_ctl_val = UsbRead(ctl_reg);
						if(usb_ctl_val & no_device) break;
					}
					if(!(usb_ctl_val & no_device))
     5cc:	d0e6eb0b 	ldhu	r3,-25684(gp)
     5d0:	d0a6e78b 	ldhu	r2,-25698(gp)
     5d4:	1884703a 	and	r2,r3,r2
     5d8:	10bfffcc 	andi	r2,r2,65535
     5dc:	1000061e 	bne	r2,zero,5f8 <get_keycode+0x264>
					{
						printf("\n[INFO]: the keyboard has been removed!!! \n");
     5e0:	01000074 	movhi	r4,1
     5e4:	210a0c04 	addi	r4,r4,10288
     5e8:	0003e580 	call	3e58 <puts>
						printf("[INFO]: please insert again!!! \n");
     5ec:	01000074 	movhi	r4,1
     5f0:	210a1704 	addi	r4,r4,10332
     5f4:	0003e580 	call	3e58 <puts>
					}
				}

				while (!(usb_ctl_val & no_device))
     5f8:	00001e06 	br	674 <get_keycode+0x2e0>
				{

					usb_ctl_val = UsbRead(ctl_reg);
     5fc:	d0a6e70b 	ldhu	r2,-25700(gp)
     600:	10bfffcc 	andi	r2,r2,65535
     604:	1009883a 	mov	r4,r2
     608:	000234c0 	call	234c <UsbRead>
     60c:	d0a6eb0d 	sth	r2,-25684(gp)
					usleep(5*1000);
     610:	0104e204 	movi	r4,5000
     614:	00107f40 	call	107f4 <usleep>
					usb_ctl_val = UsbRead(ctl_reg);
     618:	d0a6e70b 	ldhu	r2,-25700(gp)
     61c:	10bfffcc 	andi	r2,r2,65535
     620:	1009883a 	mov	r4,r2
     624:	000234c0 	call	234c <UsbRead>
     628:	d0a6eb0d 	sth	r2,-25684(gp)
					usleep(5*1000);
     62c:	0104e204 	movi	r4,5000
     630:	00107f40 	call	107f4 <usleep>
					usb_ctl_val = UsbRead(ctl_reg);
     634:	d0a6e70b 	ldhu	r2,-25700(gp)
     638:	10bfffcc 	andi	r2,r2,65535
     63c:	1009883a 	mov	r4,r2
     640:	000234c0 	call	234c <UsbRead>
     644:	d0a6eb0d 	sth	r2,-25684(gp)
					usleep(5*1000);
     648:	0104e204 	movi	r4,5000
     64c:	00107f40 	call	107f4 <usleep>

					if(usb_ctl_val & no_device)
     650:	d0e6eb0b 	ldhu	r3,-25684(gp)
     654:	d0a6e78b 	ldhu	r2,-25698(gp)
     658:	1884703a 	and	r2,r3,r2
     65c:	10bfffcc 	andi	r2,r2,65535
     660:	10000226 	beq	r2,zero,66c <get_keycode+0x2d8>
						return -1;
     664:	00bfffc4 	movi	r2,-1
     668:	00000806 	br	68c <get_keycode+0x2f8>

					usleep(200);
     66c:	01003204 	movi	r4,200
     670:	00107f40 	call	107f4 <usleep>
						printf("\n[INFO]: the keyboard has been removed!!! \n");
						printf("[INFO]: please insert again!!! \n");
					}
				}

				while (!(usb_ctl_val & no_device))
     674:	d0e6eb0b 	ldhu	r3,-25684(gp)
     678:	d0a6e78b 	ldhu	r2,-25698(gp)
     67c:	1884703a 	and	r2,r3,r2
     680:	10bfffcc 	andi	r2,r2,65535
     684:	103fdd26 	beq	r2,zero,5fc <__alt_data_end+0xfffaaecc>
					if(usb_ctl_val & no_device)
						return -1;

					usleep(200);
				}
				return 0;
     688:	0005883a 	mov	r2,zero
}
     68c:	e037883a 	mov	sp,fp
     690:	dfc00117 	ldw	ra,4(sp)
     694:	df000017 	ldw	fp,0(sp)
     698:	dec00204 	addi	sp,sp,8
     69c:	f800283a 	ret

000006a0 <setup_keyboard>:


void setup_keyboard()
{
     6a0:	defffe04 	addi	sp,sp,-8
     6a4:	dfc00115 	stw	ra,4(sp)
     6a8:	df000015 	stw	fp,0(sp)
     6ac:	d839883a 	mov	fp,sp
	IO_init();
     6b0:	00002680 	call	268 <IO_init>
		usleep(10*10000);
	}*/



	printf("USB keyboard setup...\n\n");
     6b4:	01000074 	movhi	r4,1
     6b8:	210a1f04 	addi	r4,r4,10364
     6bc:	0003e580 	call	3e58 <puts>

	//----------------------------------------SIE1 initial---------------------------------------------------//
	USB_HOT_PLUG:
	UsbSoftReset();
     6c0:	00023900 	call	2390 <UsbSoftReset>

	// STEP 1a:
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
     6c4:	01005104 	movi	r4,324
     6c8:	000b883a 	mov	r5,zero
     6cc:	00022f80 	call	22f8 <UsbWrite>
	UsbWrite (HOST1_STAT_REG, 0xFFFF);
     6d0:	01302414 	movui	r4,49296
     6d4:	017fffd4 	movui	r5,65535
     6d8:	00022f80 	call	22f8 <UsbWrite>

	/* Set HUSB_pEOT time */
	UsbWrite(HUSB_pEOT, 600); // adjust the according to your USB device speed
     6dc:	01006d04 	movi	r4,436
     6e0:	01409604 	movi	r5,600
     6e4:	00022f80 	call	22f8 <UsbWrite>

	usb_ctl_val = SOFEOP1_TO_CPU_EN | RESUME1_TO_HPI_EN;// | SOFEOP1_TO_HPI_EN;
     6e8:	00811004 	movi	r2,1088
     6ec:	d0a6eb0d 	sth	r2,-25684(gp)
	UsbWrite(HPI_IRQ_ROUTING_REG, usb_ctl_val);
     6f0:	d0a6eb0b 	ldhu	r2,-25684(gp)
     6f4:	10bfffcc 	andi	r2,r2,65535
     6f8:	01005084 	movi	r4,322
     6fc:	100b883a 	mov	r5,r2
     700:	00022f80 	call	22f8 <UsbWrite>

	intStat = A_CHG_IRQ_EN | SOF_EOP_IRQ_EN ;
     704:	00808404 	movi	r2,528
     708:	d0a6ec0d 	sth	r2,-25680(gp)
	UsbWrite(HOST1_IRQ_EN_REG, intStat);
     70c:	d0a6ec0b 	ldhu	r2,-25680(gp)
     710:	10bfffcc 	andi	r2,r2,65535
     714:	01302314 	movui	r4,49292
     718:	100b883a 	mov	r5,r2
     71c:	00022f80 	call	22f8 <UsbWrite>
	// STEP 1a end

	// STEP 1b begin
	UsbWrite(COMM_R0,0x0000);//reset time
     720:	01007104 	movi	r4,452
     724:	000b883a 	mov	r5,zero
     728:	00022f80 	call	22f8 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
     72c:	01007184 	movi	r4,454
     730:	000b883a 	mov	r5,zero
     734:	00022f80 	call	22f8 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
     738:	01007204 	movi	r4,456
     73c:	000b883a 	mov	r5,zero
     740:	00022f80 	call	22f8 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
     744:	01007284 	movi	r4,458
     748:	000b883a 	mov	r5,zero
     74c:	00022f80 	call	22f8 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
     750:	01007304 	movi	r4,460
     754:	000b883a 	mov	r5,zero
     758:	00022f80 	call	22f8 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
     75c:	01007384 	movi	r4,462
     760:	000b883a 	mov	r5,zero
     764:	00022f80 	call	22f8 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
     768:	01007404 	movi	r4,464
     76c:	000b883a 	mov	r5,zero
     770:	00022f80 	call	22f8 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
     774:	01007484 	movi	r4,466
     778:	000b883a 	mov	r5,zero
     77c:	00022f80 	call	22f8 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
     780:	01007504 	movi	r4,468
     784:	000b883a 	mov	r5,zero
     788:	00022f80 	call	22f8 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
     78c:	01007584 	movi	r4,470
     790:	000b883a 	mov	r5,zero
     794:	00022f80 	call	22f8 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
     798:	01007604 	movi	r4,472
     79c:	000b883a 	mov	r5,zero
     7a0:	00022f80 	call	22f8 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
     7a4:	01007684 	movi	r4,474
     7a8:	000b883a 	mov	r5,zero
     7ac:	00022f80 	call	22f8 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
     7b0:	01007704 	movi	r4,476
     7b4:	000b883a 	mov	r5,zero
     7b8:	00022f80 	call	22f8 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
     7bc:	01007784 	movi	r4,478
     7c0:	000b883a 	mov	r5,zero
     7c4:	00022f80 	call	22f8 <UsbWrite>
	UsbWrite(COMM_INT_NUM,HUSB_SIE1_INIT_INT); //HUSB_SIE1_INIT_INT
     7c8:	01007084 	movi	r4,450
     7cc:	01401c84 	movi	r5,114
     7d0:	00022f80 	call	22f8 <UsbWrite>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
     7d4:	01000044 	movi	r4,1
     7d8:	01738054 	movui	r5,52737
     7dc:	00002c80 	call	2c8 <IO_write>

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
     7e0:	0001883a 	nop
     7e4:	010000c4 	movi	r4,3
     7e8:	00003300 	call	330 <IO_read>
     7ec:	10bfffcc 	andi	r2,r2,65535
     7f0:	103ffc26 	beq	r2,zero,7e4 <__alt_data_end+0xfffab0b4>
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
     7f4:	0001883a 	nop
     7f8:	01000044 	movi	r4,1
     7fc:	00003300 	call	330 <IO_read>
     800:	10bfffcc 	andi	r2,r2,65535
     804:	1083fb58 	cmpnei	r2,r2,4077
     808:	10000826 	beq	r2,zero,82c <setup_keyboard+0x18c>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
     80c:	01000044 	movi	r4,1
     810:	00003300 	call	330 <IO_read>
     814:	10bfffcc 	andi	r2,r2,65535
     818:	01000074 	movhi	r4,1
     81c:	210a2504 	addi	r4,r4,10388
     820:	100b883a 	mov	r5,r2
     824:	0003d640 	call	3d64 <printf>
		goto USB_HOT_PLUG;
     828:	003fa506 	br	6c0 <__alt_data_end+0xfffaaf90>
	}
	// STEP 1b end

	printf("STEP 1 Complete");
     82c:	01000074 	movhi	r4,1
     830:	210a2e04 	addi	r4,r4,10424
     834:	0003d640 	call	3d64 <printf>
	// STEP 2 begin
	UsbWrite(COMM_INT_NUM,HUSB_RESET_INT); //husb reset
     838:	01007084 	movi	r4,450
     83c:	01401d04 	movi	r5,116
     840:	00022f80 	call	22f8 <UsbWrite>
	UsbWrite(COMM_R0,0x003c);//reset time
     844:	01007104 	movi	r4,452
     848:	01400f04 	movi	r5,60
     84c:	00022f80 	call	22f8 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
     850:	01007184 	movi	r4,454
     854:	000b883a 	mov	r5,zero
     858:	00022f80 	call	22f8 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
     85c:	01007204 	movi	r4,456
     860:	000b883a 	mov	r5,zero
     864:	00022f80 	call	22f8 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
     868:	01007284 	movi	r4,458
     86c:	000b883a 	mov	r5,zero
     870:	00022f80 	call	22f8 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
     874:	01007304 	movi	r4,460
     878:	000b883a 	mov	r5,zero
     87c:	00022f80 	call	22f8 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
     880:	01007384 	movi	r4,462
     884:	000b883a 	mov	r5,zero
     888:	00022f80 	call	22f8 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
     88c:	01007404 	movi	r4,464
     890:	000b883a 	mov	r5,zero
     894:	00022f80 	call	22f8 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
     898:	01007484 	movi	r4,466
     89c:	000b883a 	mov	r5,zero
     8a0:	00022f80 	call	22f8 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
     8a4:	01007504 	movi	r4,468
     8a8:	000b883a 	mov	r5,zero
     8ac:	00022f80 	call	22f8 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
     8b0:	01007584 	movi	r4,470
     8b4:	000b883a 	mov	r5,zero
     8b8:	00022f80 	call	22f8 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
     8bc:	01007604 	movi	r4,472
     8c0:	000b883a 	mov	r5,zero
     8c4:	00022f80 	call	22f8 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
     8c8:	01007684 	movi	r4,474
     8cc:	000b883a 	mov	r5,zero
     8d0:	00022f80 	call	22f8 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
     8d4:	01007704 	movi	r4,476
     8d8:	000b883a 	mov	r5,zero
     8dc:	00022f80 	call	22f8 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
     8e0:	01007784 	movi	r4,478
     8e4:	000b883a 	mov	r5,zero
     8e8:	00022f80 	call	22f8 <UsbWrite>

	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
     8ec:	01000044 	movi	r4,1
     8f0:	01738054 	movui	r5,52737
     8f4:	00002c80 	call	2c8 <IO_write>

	while (IO_read(HPI_MAILBOX) != COMM_ACK)
     8f8:	0001883a 	nop
     8fc:	01000044 	movi	r4,1
     900:	00003300 	call	330 <IO_read>
     904:	10bfffcc 	andi	r2,r2,65535
     908:	1083fb58 	cmpnei	r2,r2,4077
     90c:	10000826 	beq	r2,zero,930 <setup_keyboard+0x290>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
     910:	01000044 	movi	r4,1
     914:	00003300 	call	330 <IO_read>
     918:	10bfffcc 	andi	r2,r2,65535
     91c:	01000074 	movhi	r4,1
     920:	210a2504 	addi	r4,r4,10388
     924:	100b883a 	mov	r5,r2
     928:	0003d640 	call	3d64 <printf>
		goto USB_HOT_PLUG;
     92c:	003f6406 	br	6c0 <__alt_data_end+0xfffaaf90>
	}
	// STEP 2 end

	ctl_reg = USB1_CTL_REG;
     930:	00b02284 	movi	r2,-16246
     934:	d0a6e70d 	sth	r2,-25700(gp)
	no_device = (A_DP_STAT | A_DM_STAT);
     938:	008c0004 	movi	r2,12288
     93c:	d0a6e78d 	sth	r2,-25698(gp)
	fs_device = A_DP_STAT;
     940:	00880004 	movi	r2,8192
     944:	d0a6e80d 	sth	r2,-25696(gp)
	usb_ctl_val = UsbRead(ctl_reg);
     948:	d0a6e70b 	ldhu	r2,-25700(gp)
     94c:	10bfffcc 	andi	r2,r2,65535
     950:	1009883a 	mov	r4,r2
     954:	000234c0 	call	234c <UsbRead>
     958:	d0a6eb0d 	sth	r2,-25684(gp)
		}
	}
	else
	{
		 check for low speed or full speed by reading D+ and D- lines */
		if (usb_ctl_val & fs_device)
     95c:	d0e6eb0b 	ldhu	r3,-25684(gp)
     960:	d0a6e80b 	ldhu	r2,-25696(gp)
     964:	1884703a 	and	r2,r3,r2
     968:	10bfffcc 	andi	r2,r2,65535
     96c:	10000426 	beq	r2,zero,980 <setup_keyboard+0x2e0>
		{
			printf("[INFO]: full speed device\n");
     970:	01000074 	movhi	r4,1
     974:	210a3204 	addi	r4,r4,10440
     978:	0003e580 	call	3e58 <puts>
     97c:	00000306 	br	98c <setup_keyboard+0x2ec>
		}
		else
		{
			printf("[INFO]: low speed device\n");
     980:	01000074 	movhi	r4,1
     984:	210a3904 	addi	r4,r4,10468
     988:	0003e580 	call	3e58 <puts>



	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();
     98c:	00024400 	call	2440 <UsbSetAddress>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     990:	00000306 	br	9a0 <setup_keyboard+0x300>
	{
		UsbSetAddress();
     994:	00024400 	call	2440 <UsbSetAddress>
		usleep(10*1000);
     998:	0109c404 	movi	r4,10000
     99c:	00107f40 	call	107f4 <usleep>

	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     9a0:	010000c4 	movi	r4,3
     9a4:	00003300 	call	330 <IO_read>
     9a8:	10bfffcc 	andi	r2,r2,65535
     9ac:	1080040c 	andi	r2,r2,16
     9b0:	103ff826 	beq	r2,zero,994 <__alt_data_end+0xfffab264>
	{
		UsbSetAddress();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     9b4:	00032bc0 	call	32bc <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506); // i
     9b8:	01000084 	movi	r4,2
     9bc:	01414184 	movi	r5,1286
     9c0:	00002c80 	call	2c8 <IO_write>
	printf("[ENUM PROCESS]:step 3 TD Status Byte is %x\n",IO_read(HPI_DATA));
     9c4:	0009883a 	mov	r4,zero
     9c8:	00003300 	call	330 <IO_read>
     9cc:	10bfffcc 	andi	r2,r2,65535
     9d0:	01000074 	movhi	r4,1
     9d4:	210a4004 	addi	r4,r4,10496
     9d8:	100b883a 	mov	r5,r2
     9dc:	0003d640 	call	3d64 <printf>

	IO_write(HPI_ADDR,0x0508); // n
     9e0:	01000084 	movi	r4,2
     9e4:	01414204 	movi	r5,1288
     9e8:	00002c80 	call	2c8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     9ec:	0009883a 	mov	r4,zero
     9f0:	00003300 	call	330 <IO_read>
     9f4:	d0a6eb0d 	sth	r2,-25684(gp)
	printf("[ENUM PROCESS]:step 3 TD Control Byte is %x\n",usb_ctl_val);
     9f8:	d0a6eb0b 	ldhu	r2,-25684(gp)
     9fc:	10bfffcc 	andi	r2,r2,65535
     a00:	01000074 	movhi	r4,1
     a04:	210a4b04 	addi	r4,r4,10540
     a08:	100b883a 	mov	r5,r2
     a0c:	0003d640 	call	3d64 <printf>
	while (usb_ctl_val != 0x03) // retries occurred
     a10:	0001883a 	nop
     a14:	d0a6eb0b 	ldhu	r2,-25684(gp)
     a18:	10bfffcc 	andi	r2,r2,65535
     a1c:	108000d8 	cmpnei	r2,r2,3
     a20:	10000326 	beq	r2,zero,a30 <setup_keyboard+0x390>
	{
		usb_ctl_val = UsbGetRetryCnt();
     a24:	00033400 	call	3340 <UsbGetRetryCnt>
     a28:	d0a6eb0d 	sth	r2,-25684(gp)

		goto USB_HOT_PLUG;
     a2c:	003f2406 	br	6c0 <__alt_data_end+0xfffaaf90>
	}

	printf("------------[ENUM PROCESS]:set address done!---------------\n");
     a30:	01000074 	movhi	r4,1
     a34:	210a5704 	addi	r4,r4,10588
     a38:	0003e580 	call	3e58 <puts>

	// STEP 4 begin
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1
     a3c:	000253c0 	call	253c <UsbGetDeviceDesc1>

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     a40:	00000306 	br	a50 <setup_keyboard+0x3b0>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
     a44:	000253c0 	call	253c <UsbGetDeviceDesc1>
		usleep(10*1000);
     a48:	0109c404 	movi	r4,10000
     a4c:	00107f40 	call	107f4 <usleep>
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     a50:	010000c4 	movi	r4,3
     a54:	00003300 	call	330 <IO_read>
     a58:	10bfffcc 	andi	r2,r2,65535
     a5c:	1080040c 	andi	r2,r2,16
     a60:	103ff826 	beq	r2,zero,a44 <__alt_data_end+0xfffab314>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     a64:	00032bc0 	call	32bc <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     a68:	01000084 	movi	r4,2
     a6c:	01414184 	movi	r5,1286
     a70:	00002c80 	call	2c8 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
     a74:	0009883a 	mov	r4,zero
     a78:	00003300 	call	330 <IO_read>
     a7c:	10bfffcc 	andi	r2,r2,65535
     a80:	01000074 	movhi	r4,1
     a84:	210a6604 	addi	r4,r4,10648
     a88:	100b883a 	mov	r5,r2
     a8c:	0003d640 	call	3d64 <printf>

	IO_write(HPI_ADDR,0x0508);
     a90:	01000084 	movi	r4,2
     a94:	01414204 	movi	r5,1288
     a98:	00002c80 	call	2c8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     a9c:	0009883a 	mov	r4,zero
     aa0:	00003300 	call	330 <IO_read>
     aa4:	d0a6eb0d 	sth	r2,-25684(gp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
     aa8:	d0a6eb0b 	ldhu	r2,-25684(gp)
     aac:	10bfffcc 	andi	r2,r2,65535
     ab0:	01000074 	movhi	r4,1
     ab4:	210a7104 	addi	r4,r4,10692
     ab8:	100b883a 	mov	r5,r2
     abc:	0003d640 	call	3d64 <printf>
	while (usb_ctl_val != 0x03)
     ac0:	00000206 	br	acc <setup_keyboard+0x42c>
	{
		usb_ctl_val = UsbGetRetryCnt();
     ac4:	00033400 	call	3340 <UsbGetRetryCnt>
     ac8:	d0a6eb0d 	sth	r2,-25684(gp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
     acc:	d0a6eb0b 	ldhu	r2,-25684(gp)
     ad0:	10bfffcc 	andi	r2,r2,65535
     ad4:	108000d8 	cmpnei	r2,r2,3
     ad8:	103ffa1e 	bne	r2,zero,ac4 <__alt_data_end+0xfffab394>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get device descriptor-1 done!-----------------\n");
     adc:	01000074 	movhi	r4,1
     ae0:	210a7d04 	addi	r4,r4,10740
     ae4:	0003e580 	call	3e58 <puts>


	//--------------------------------get device descriptor-2---------------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2
     ae8:	00026800 	call	2680 <UsbGetDeviceDesc2>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     aec:	00000306 	br	afc <setup_keyboard+0x45c>
	{
		//resend the get device descriptor
		//get device descriptor
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
     af0:	00026800 	call	2680 <UsbGetDeviceDesc2>
		usleep(10*1000);
     af4:	0109c404 	movi	r4,10000
     af8:	00107f40 	call	107f4 <usleep>
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     afc:	010000c4 	movi	r4,3
     b00:	00003300 	call	330 <IO_read>
     b04:	10bfffcc 	andi	r2,r2,65535
     b08:	1080040c 	andi	r2,r2,16
     b0c:	103ff826 	beq	r2,zero,af0 <__alt_data_end+0xfffab3c0>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     b10:	00032bc0 	call	32bc <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     b14:	01000084 	movi	r4,2
     b18:	01414184 	movi	r5,1286
     b1c:	00002c80 	call	2c8 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
     b20:	0009883a 	mov	r4,zero
     b24:	00003300 	call	330 <IO_read>
     b28:	10bfffcc 	andi	r2,r2,65535
     b2c:	01000074 	movhi	r4,1
     b30:	210a6604 	addi	r4,r4,10648
     b34:	100b883a 	mov	r5,r2
     b38:	0003d640 	call	3d64 <printf>

	IO_write(HPI_ADDR,0x0508);
     b3c:	01000084 	movi	r4,2
     b40:	01414204 	movi	r5,1288
     b44:	00002c80 	call	2c8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     b48:	0009883a 	mov	r4,zero
     b4c:	00003300 	call	330 <IO_read>
     b50:	d0a6eb0d 	sth	r2,-25684(gp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
     b54:	d0a6eb0b 	ldhu	r2,-25684(gp)
     b58:	10bfffcc 	andi	r2,r2,65535
     b5c:	01000074 	movhi	r4,1
     b60:	210a7104 	addi	r4,r4,10692
     b64:	100b883a 	mov	r5,r2
     b68:	0003d640 	call	3d64 <printf>
	while (usb_ctl_val != 0x03)
     b6c:	00000206 	br	b78 <setup_keyboard+0x4d8>
	{
		usb_ctl_val = UsbGetRetryCnt();
     b70:	00033400 	call	3340 <UsbGetRetryCnt>
     b74:	d0a6eb0d 	sth	r2,-25684(gp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
     b78:	d0a6eb0b 	ldhu	r2,-25684(gp)
     b7c:	10bfffcc 	andi	r2,r2,65535
     b80:	108000d8 	cmpnei	r2,r2,3
     b84:	103ffa1e 	bne	r2,zero,b70 <__alt_data_end+0xfffab440>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get device descriptor-2 done!--------------\n");
     b88:	01000074 	movhi	r4,1
     b8c:	210a9104 	addi	r4,r4,10820
     b90:	0003e580 	call	3e58 <puts>


	// STEP 5 begin
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1
     b94:	00028540 	call	2854 <UsbGetConfigDesc1>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     b98:	00000306 	br	ba8 <setup_keyboard+0x508>
	{
		//resend the get device descriptor
		//get device descriptor

		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
     b9c:	00028540 	call	2854 <UsbGetConfigDesc1>
		usleep(10*1000);
     ba0:	0109c404 	movi	r4,10000
     ba4:	00107f40 	call	107f4 <usleep>
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     ba8:	010000c4 	movi	r4,3
     bac:	00003300 	call	330 <IO_read>
     bb0:	10bfffcc 	andi	r2,r2,65535
     bb4:	1080040c 	andi	r2,r2,16
     bb8:	103ff826 	beq	r2,zero,b9c <__alt_data_end+0xfffab46c>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     bbc:	00032bc0 	call	32bc <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     bc0:	01000084 	movi	r4,2
     bc4:	01414184 	movi	r5,1286
     bc8:	00002c80 	call	2c8 <IO_write>
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));
     bcc:	0009883a 	mov	r4,zero
     bd0:	00003300 	call	330 <IO_read>
     bd4:	10bfffcc 	andi	r2,r2,65535
     bd8:	01000074 	movhi	r4,1
     bdc:	210aa304 	addi	r4,r4,10892
     be0:	100b883a 	mov	r5,r2
     be4:	0003d640 	call	3d64 <printf>

	IO_write(HPI_ADDR,0x0508);
     be8:	01000084 	movi	r4,2
     bec:	01414204 	movi	r5,1288
     bf0:	00002c80 	call	2c8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     bf4:	0009883a 	mov	r4,zero
     bf8:	00003300 	call	330 <IO_read>
     bfc:	d0a6eb0d 	sth	r2,-25684(gp)
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
     c00:	d0a6eb0b 	ldhu	r2,-25684(gp)
     c04:	10bfffcc 	andi	r2,r2,65535
     c08:	01000074 	movhi	r4,1
     c0c:	210aae04 	addi	r4,r4,10936
     c10:	100b883a 	mov	r5,r2
     c14:	0003d640 	call	3d64 <printf>
	while (usb_ctl_val != 0x03)
     c18:	00000206 	br	c24 <setup_keyboard+0x584>
	{
		usb_ctl_val = UsbGetRetryCnt();
     c1c:	00033400 	call	3340 <UsbGetRetryCnt>
     c20:	d0a6eb0d 	sth	r2,-25684(gp)
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
     c24:	d0a6eb0b 	ldhu	r2,-25684(gp)
     c28:	10bfffcc 	andi	r2,r2,65535
     c2c:	108000d8 	cmpnei	r2,r2,3
     c30:	103ffa1e 	bne	r2,zero,c1c <__alt_data_end+0xfffab4ec>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}
	printf("------------[ENUM PROCESS]:get configuration descriptor-1 pass------------\n");
     c34:	01000074 	movhi	r4,1
     c38:	210aba04 	addi	r4,r4,10984
     c3c:	0003e580 	call	3e58 <puts>

	// STEP 6 begin
	//-----------------------------------get configuration descriptor-2------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2
     c40:	00029e00 	call	29e0 <UsbGetConfigDesc2>

	usleep(100*1000);
     c44:	010000b4 	movhi	r4,2
     c48:	2121a804 	addi	r4,r4,-31072
     c4c:	00107f40 	call	107f4 <usleep>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     c50:	00000306 	br	c60 <setup_keyboard+0x5c0>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
     c54:	00029e00 	call	29e0 <UsbGetConfigDesc2>
		usleep(10*1000);
     c58:	0109c404 	movi	r4,10000
     c5c:	00107f40 	call	107f4 <usleep>
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2

	usleep(100*1000);
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     c60:	010000c4 	movi	r4,3
     c64:	00003300 	call	330 <IO_read>
     c68:	10bfffcc 	andi	r2,r2,65535
     c6c:	1080040c 	andi	r2,r2,16
     c70:	103ff826 	beq	r2,zero,c54 <__alt_data_end+0xfffab524>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     c74:	00032bc0 	call	32bc <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     c78:	01000084 	movi	r4,2
     c7c:	01414184 	movi	r5,1286
     c80:	00002c80 	call	2c8 <IO_write>
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));
     c84:	0009883a 	mov	r4,zero
     c88:	00003300 	call	330 <IO_read>
     c8c:	10bfffcc 	andi	r2,r2,65535
     c90:	01000074 	movhi	r4,1
     c94:	210acd04 	addi	r4,r4,11060
     c98:	100b883a 	mov	r5,r2
     c9c:	0003d640 	call	3d64 <printf>

	IO_write(HPI_ADDR,0x0508);
     ca0:	01000084 	movi	r4,2
     ca4:	01414204 	movi	r5,1288
     ca8:	00002c80 	call	2c8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     cac:	0009883a 	mov	r4,zero
     cb0:	00003300 	call	330 <IO_read>
     cb4:	d0a6eb0d 	sth	r2,-25684(gp)
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
     cb8:	d0a6eb0b 	ldhu	r2,-25684(gp)
     cbc:	10bfffcc 	andi	r2,r2,65535
     cc0:	01000074 	movhi	r4,1
     cc4:	210ad804 	addi	r4,r4,11104
     cc8:	100b883a 	mov	r5,r2
     ccc:	0003d640 	call	3d64 <printf>
	while (usb_ctl_val != 0x03)
     cd0:	00000206 	br	cdc <setup_keyboard+0x63c>
	{
		usb_ctl_val = UsbGetRetryCnt();
     cd4:	00033400 	call	3340 <UsbGetRetryCnt>
     cd8:	d0a6eb0d 	sth	r2,-25684(gp)
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
     cdc:	d0a6eb0b 	ldhu	r2,-25684(gp)
     ce0:	10bfffcc 	andi	r2,r2,65535
     ce4:	108000d8 	cmpnei	r2,r2,3
     ce8:	103ffa1e 	bne	r2,zero,cd4 <__alt_data_end+0xfffab5a4>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("-----------[ENUM PROCESS]:get configuration descriptor-2 done!------------\n");
     cec:	01000074 	movhi	r4,1
     cf0:	210ae404 	addi	r4,r4,11152
     cf4:	0003e580 	call	3e58 <puts>


	// ---------------------------------get device info---------------------------------------------//

	// TASK: Write the address to read from the memory for byte 7 of the interface descriptor to HPI_ADDR.
	IO_write(HPI_ADDR,0x056c);
     cf8:	01000084 	movi	r4,2
     cfc:	01415b04 	movi	r5,1388
     d00:	00002c80 	call	2c8 <IO_write>
	code = IO_read(HPI_DATA);
     d04:	0009883a 	mov	r4,zero
     d08:	00003300 	call	330 <IO_read>
     d0c:	d0a6ed0d 	sth	r2,-25676(gp)
	code = code & 0x003;
     d10:	d0a6ed0b 	ldhu	r2,-25676(gp)
     d14:	108000cc 	andi	r2,r2,3
     d18:	d0a6ed0d 	sth	r2,-25676(gp)
	printf("\ncode = %x\n", code);
     d1c:	d0a6ed0b 	ldhu	r2,-25676(gp)
     d20:	10bfffcc 	andi	r2,r2,65535
     d24:	01000074 	movhi	r4,1
     d28:	210af704 	addi	r4,r4,11228
     d2c:	100b883a 	mov	r5,r2
     d30:	0003d640 	call	3d64 <printf>

	if (code == 0x01)
     d34:	d0a6ed0b 	ldhu	r2,-25676(gp)
     d38:	10bfffcc 	andi	r2,r2,65535
     d3c:	10800058 	cmpnei	r2,r2,1
     d40:	1000041e 	bne	r2,zero,d54 <setup_keyboard+0x6b4>
	{
		printf("\n[INFO]:check TD rec data7 \n[INFO]:Keyboard Detected!!!\n\n");
     d44:	01000074 	movhi	r4,1
     d48:	210afa04 	addi	r4,r4,11240
     d4c:	0003e580 	call	3e58 <puts>
     d50:	00000306 	br	d60 <setup_keyboard+0x6c0>
	}
	else
	{
		printf("\n[INFO]:Keyboard Not Detected!!! \n\n");
     d54:	01000074 	movhi	r4,1
     d58:	210b0904 	addi	r4,r4,11300
     d5c:	0003e580 	call	3e58 <puts>
	}

	// TASK: Write the address to read from the memory for the endpoint descriptor to HPI_ADDR.

	IO_write(HPI_ADDR,0x0576);
     d60:	01000084 	movi	r4,2
     d64:	01415d84 	movi	r5,1398
     d68:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x073F);
     d6c:	0009883a 	mov	r4,zero
     d70:	0141cfc4 	movi	r5,1855
     d74:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x8105);
     d78:	0009883a 	mov	r4,zero
     d7c:	01604154 	movui	r5,33029
     d80:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0003);
     d84:	0009883a 	mov	r4,zero
     d88:	014000c4 	movi	r5,3
     d8c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);
     d90:	0009883a 	mov	r4,zero
     d94:	01400204 	movi	r5,8
     d98:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0xAC0A);
     d9c:	0009883a 	mov	r4,zero
     da0:	016b0294 	movui	r5,44042
     da4:	00002c80 	call	2c8 <IO_write>
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0576); //HUSB_SIE1_pCurrentTDPtr
     da8:	01006c04 	movi	r4,432
     dac:	01415d84 	movi	r5,1398
     db0:	00022f80 	call	22f8 <UsbWrite>

	//data_size = (IO_read(HPI_DATA)>>8)&0x0ff;
	//data_size = 0x08;//(IO_read(HPI_DATA))&0x0ff;
	//UsbPrintMem();
	IO_write(HPI_ADDR,0x057c);
     db4:	01000084 	movi	r4,2
     db8:	01415f04 	movi	r5,1404
     dbc:	00002c80 	call	2c8 <IO_write>
	data_size = (IO_read(HPI_DATA))&0x0ff;
     dc0:	0009883a 	mov	r4,zero
     dc4:	00003300 	call	330 <IO_read>
     dc8:	d0a6eb85 	stb	r2,-25682(gp)
	printf("[ENUM PROCESS]:data packet size is %d\n",data_size);
     dcc:	d0a6eb83 	ldbu	r2,-25682(gp)
     dd0:	10803fcc 	andi	r2,r2,255
     dd4:	01000074 	movhi	r4,1
     dd8:	210b1204 	addi	r4,r4,11336
     ddc:	100b883a 	mov	r5,r2
     de0:	0003d640 	call	3d64 <printf>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration
     de4:	0002c440 	call	2c44 <UsbSetConfig>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     de8:	00000306 	br	df8 <setup_keyboard+0x758>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
     dec:	0002c440 	call	2c44 <UsbSetConfig>
		usleep(10*1000);
     df0:	0109c404 	movi	r4,10000
     df4:	00107f40 	call	107f4 <usleep>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     df8:	010000c4 	movi	r4,3
     dfc:	00003300 	call	330 <IO_read>
     e00:	10bfffcc 	andi	r2,r2,65535
     e04:	1080040c 	andi	r2,r2,16
     e08:	103ff826 	beq	r2,zero,dec <__alt_data_end+0xfffab6bc>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     e0c:	00032bc0 	call	32bc <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     e10:	01000084 	movi	r4,2
     e14:	01414184 	movi	r5,1286
     e18:	00002c80 	call	2c8 <IO_write>
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));
     e1c:	0009883a 	mov	r4,zero
     e20:	00003300 	call	330 <IO_read>
     e24:	10bfffcc 	andi	r2,r2,65535
     e28:	01000074 	movhi	r4,1
     e2c:	210b1c04 	addi	r4,r4,11376
     e30:	100b883a 	mov	r5,r2
     e34:	0003d640 	call	3d64 <printf>

	IO_write(HPI_ADDR,0x0508);
     e38:	01000084 	movi	r4,2
     e3c:	01414204 	movi	r5,1288
     e40:	00002c80 	call	2c8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     e44:	0009883a 	mov	r4,zero
     e48:	00003300 	call	330 <IO_read>
     e4c:	d0a6eb0d 	sth	r2,-25684(gp)
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
     e50:	d0a6eb0b 	ldhu	r2,-25684(gp)
     e54:	10bfffcc 	andi	r2,r2,65535
     e58:	01000074 	movhi	r4,1
     e5c:	210b2704 	addi	r4,r4,11420
     e60:	100b883a 	mov	r5,r2
     e64:	0003d640 	call	3d64 <printf>
	while (usb_ctl_val != 0x03)
     e68:	00000206 	br	e74 <setup_keyboard+0x7d4>
	{
		usb_ctl_val = UsbGetRetryCnt();
     e6c:	00033400 	call	3340 <UsbGetRetryCnt>
     e70:	d0a6eb0d 	sth	r2,-25684(gp)
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
     e74:	d0a6eb0b 	ldhu	r2,-25684(gp)
     e78:	10bfffcc 	andi	r2,r2,65535
     e7c:	108000d8 	cmpnei	r2,r2,3
     e80:	103ffa1e 	bne	r2,zero,e6c <__alt_data_end+0xfffab73c>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:set configuration done!-------------------\n");
     e84:	01000074 	movhi	r4,1
     e88:	210b3304 	addi	r4,r4,11468
     e8c:	0003e580 	call	3e58 <puts>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();
     e90:	0002d400 	call	2d40 <UsbClassRequest>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     e94:	00000306 	br	ea4 <setup_keyboard+0x804>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
     e98:	0002d400 	call	2d40 <UsbClassRequest>
		usleep(10*1000);
     e9c:	0109c404 	movi	r4,10000
     ea0:	00107f40 	call	107f4 <usleep>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     ea4:	010000c4 	movi	r4,3
     ea8:	00003300 	call	330 <IO_read>
     eac:	10bfffcc 	andi	r2,r2,65535
     eb0:	1080040c 	andi	r2,r2,16
     eb4:	103ff826 	beq	r2,zero,e98 <__alt_data_end+0xfffab768>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     eb8:	00032bc0 	call	32bc <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     ebc:	01000084 	movi	r4,2
     ec0:	01414184 	movi	r5,1286
     ec4:	00002c80 	call	2c8 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
     ec8:	0009883a 	mov	r4,zero
     ecc:	00003300 	call	330 <IO_read>
     ed0:	10bfffcc 	andi	r2,r2,65535
     ed4:	01000074 	movhi	r4,1
     ed8:	210b4504 	addi	r4,r4,11540
     edc:	100b883a 	mov	r5,r2
     ee0:	0003d640 	call	3d64 <printf>

	IO_write(HPI_ADDR,0x0508);
     ee4:	01000084 	movi	r4,2
     ee8:	01414204 	movi	r5,1288
     eec:	00002c80 	call	2c8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     ef0:	0009883a 	mov	r4,zero
     ef4:	00003300 	call	330 <IO_read>
     ef8:	d0a6eb0d 	sth	r2,-25684(gp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
     efc:	d0a6eb0b 	ldhu	r2,-25684(gp)
     f00:	10bfffcc 	andi	r2,r2,65535
     f04:	01000074 	movhi	r4,1
     f08:	210b5004 	addi	r4,r4,11584
     f0c:	100b883a 	mov	r5,r2
     f10:	0003d640 	call	3d64 <printf>
	while (usb_ctl_val != 0x03)
     f14:	00000206 	br	f20 <setup_keyboard+0x880>
	{
		usb_ctl_val = UsbGetRetryCnt();
     f18:	00033400 	call	3340 <UsbGetRetryCnt>
     f1c:	d0a6eb0d 	sth	r2,-25684(gp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
     f20:	d0a6eb0b 	ldhu	r2,-25684(gp)
     f24:	10bfffcc 	andi	r2,r2,65535
     f28:	108000d8 	cmpnei	r2,r2,3
     f2c:	103ffa1e 	bne	r2,zero,f18 <__alt_data_end+0xfffab7e8>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("------------[ENUM PROCESS]:class request out done!-------------------\n");
     f30:	01000074 	movhi	r4,1
     f34:	210b5c04 	addi	r4,r4,11632
     f38:	0003e580 	call	3e58 <puts>

	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();
     f3c:	0002e3c0 	call	2e3c <UsbGetHidDesc>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     f40:	00000306 	br	f50 <setup_keyboard+0x8b0>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
     f44:	0002e3c0 	call	2e3c <UsbGetHidDesc>
		usleep(10*1000);
     f48:	0109c404 	movi	r4,10000
     f4c:	00107f40 	call	107f4 <usleep>
	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     f50:	010000c4 	movi	r4,3
     f54:	00003300 	call	330 <IO_read>
     f58:	10bfffcc 	andi	r2,r2,65535
     f5c:	1080040c 	andi	r2,r2,16
     f60:	103ff826 	beq	r2,zero,f44 <__alt_data_end+0xfffab814>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     f64:	00032bc0 	call	32bc <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     f68:	01000084 	movi	r4,2
     f6c:	01414184 	movi	r5,1286
     f70:	00002c80 	call	2c8 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
     f74:	0009883a 	mov	r4,zero
     f78:	00003300 	call	330 <IO_read>
     f7c:	10bfffcc 	andi	r2,r2,65535
     f80:	01000074 	movhi	r4,1
     f84:	210b4504 	addi	r4,r4,11540
     f88:	100b883a 	mov	r5,r2
     f8c:	0003d640 	call	3d64 <printf>

	IO_write(HPI_ADDR,0x0508);
     f90:	01000084 	movi	r4,2
     f94:	01414204 	movi	r5,1288
     f98:	00002c80 	call	2c8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     f9c:	0009883a 	mov	r4,zero
     fa0:	00003300 	call	330 <IO_read>
     fa4:	d0a6eb0d 	sth	r2,-25684(gp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
     fa8:	d0a6eb0b 	ldhu	r2,-25684(gp)
     fac:	10bfffcc 	andi	r2,r2,65535
     fb0:	01000074 	movhi	r4,1
     fb4:	210b5004 	addi	r4,r4,11584
     fb8:	100b883a 	mov	r5,r2
     fbc:	0003d640 	call	3d64 <printf>
	while (usb_ctl_val != 0x03)
     fc0:	00000206 	br	fcc <setup_keyboard+0x92c>
	{
		usb_ctl_val = UsbGetRetryCnt();
     fc4:	00033400 	call	3340 <UsbGetRetryCnt>
     fc8:	d0a6eb0d 	sth	r2,-25684(gp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
     fcc:	d0a6eb0b 	ldhu	r2,-25684(gp)
     fd0:	10bfffcc 	andi	r2,r2,65535
     fd4:	108000d8 	cmpnei	r2,r2,3
     fd8:	103ffa1e 	bne	r2,zero,fc4 <__alt_data_end+0xfffab894>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get descriptor (class 0x21) done!-------------------\n");
     fdc:	01000074 	movhi	r4,1
     fe0:	210b6e04 	addi	r4,r4,11704
     fe4:	0003e580 	call	3e58 <puts>

	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
     fe8:	0002f800 	call	2f80 <UsbGetReportDesc>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     fec:	00000306 	br	ffc <setup_keyboard+0x95c>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
     ff0:	0002f800 	call	2f80 <UsbGetReportDesc>
		usleep(10*1000);
     ff4:	0109c404 	movi	r4,10000
     ff8:	00107f40 	call	107f4 <usleep>
	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     ffc:	010000c4 	movi	r4,3
    1000:	00003300 	call	330 <IO_read>
    1004:	10bfffcc 	andi	r2,r2,65535
    1008:	1080040c 	andi	r2,r2,16
    100c:	103ff826 	beq	r2,zero,ff0 <__alt_data_end+0xfffab8c0>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
    1010:	00032bc0 	call	32bc <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
    1014:	01000084 	movi	r4,2
    1018:	01414184 	movi	r5,1286
    101c:	00002c80 	call	2c8 <IO_write>
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));
    1020:	0009883a 	mov	r4,zero
    1024:	00003300 	call	330 <IO_read>
    1028:	10bfffcc 	andi	r2,r2,65535
    102c:	01000074 	movhi	r4,1
    1030:	210b8204 	addi	r4,r4,11784
    1034:	100b883a 	mov	r5,r2
    1038:	0003d640 	call	3d64 <printf>

	IO_write(HPI_ADDR,0x0508);
    103c:	01000084 	movi	r4,2
    1040:	01414204 	movi	r5,1288
    1044:	00002c80 	call	2c8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
    1048:	0009883a 	mov	r4,zero
    104c:	00003300 	call	330 <IO_read>
    1050:	d0a6eb0d 	sth	r2,-25684(gp)
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
    1054:	d0a6eb0b 	ldhu	r2,-25684(gp)
    1058:	10bfffcc 	andi	r2,r2,65535
    105c:	01000074 	movhi	r4,1
    1060:	210b8e04 	addi	r4,r4,11832
    1064:	100b883a 	mov	r5,r2
    1068:	0003d640 	call	3d64 <printf>
	while (usb_ctl_val != 0x03)
    106c:	00000206 	br	1078 <setup_keyboard+0x9d8>
	{
		usb_ctl_val = UsbGetRetryCnt();
    1070:	00033400 	call	3340 <UsbGetRetryCnt>
    1074:	d0a6eb0d 	sth	r2,-25684(gp)
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
    1078:	d0a6eb0b 	ldhu	r2,-25684(gp)
    107c:	10bfffcc 	andi	r2,r2,65535
    1080:	108000d8 	cmpnei	r2,r2,3
    1084:	103ffa1e 	bne	r2,zero,1070 <__alt_data_end+0xfffab940>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get descriptor (class 0x22) done!----------------\n");
    1088:	01000074 	movhi	r4,1
    108c:	210b9a04 	addi	r4,r4,11880
    1090:	0003e580 	call	3e58 <puts>


	//-----------------------------------get keycode value------------------------------------------------//


	return;
    1094:	0001883a 	nop
}
    1098:	e037883a 	mov	sp,fp
    109c:	dfc00117 	ldw	ra,4(sp)
    10a0:	df000017 	ldw	fp,0(sp)
    10a4:	dec00204 	addi	sp,sp,8
    10a8:	f800283a 	ret

000010ac <main>:
//Hits
player_projectile* check_projectiles(player_projectile *curr, enemy *em);
int hits_enemy(int x, int y, enemy *em);


int main(void){
    10ac:	defff104 	addi	sp,sp,-60
    10b0:	dfc00e15 	stw	ra,56(sp)
    10b4:	df000d15 	stw	fp,52(sp)
    10b8:	df000d04 	addi	fp,sp,52
	setup_keyboard();
    10bc:	00006a00 	call	6a0 <setup_keyboard>
	unsigned int keycode1,keycode2;
	player *first=(player *)malloc(sizeof(player));
    10c0:	01000604 	movi	r4,24
    10c4:	00035680 	call	3568 <malloc>
    10c8:	e0bff615 	stw	r2,-40(fp)
	player *second=(player *)malloc(sizeof(player));
    10cc:	01000604 	movi	r4,24
    10d0:	00035680 	call	3568 <malloc>
    10d4:	e0bff715 	stw	r2,-36(fp)
	int i=0;
    10d8:	e03ff415 	stw	zero,-48(fp)
	int num_of_enemies=0;
    10dc:	e03ff515 	stw	zero,-44(fp)
	enemy *head_enemies=NULL;
    10e0:	e03ffa15 	stw	zero,-24(fp)
	player_projectile *head_bullets=NULL;
    10e4:	e03ffb15 	stw	zero,-20(fp)
	init_players(first,second);
    10e8:	e13ff617 	ldw	r4,-40(fp)
    10ec:	e17ff717 	ldw	r5,-36(fp)
    10f0:	00012180 	call	1218 <init_players>
	render_players(first,second);
    10f4:	e13ff617 	ldw	r4,-40(fp)
    10f8:	e17ff717 	ldw	r5,-36(fp)
    10fc:	0001a6c0 	call	1a6c <render_players>
	unsigned int arr[4]={0,0,0,0};
    1100:	e03ffc15 	stw	zero,-16(fp)
    1104:	e03ffd15 	stw	zero,-12(fp)
    1108:	e03ffe15 	stw	zero,-8(fp)
    110c:	e03fff15 	stw	zero,-4(fp)
	while(1)
		{
			move_projectiles(head_bullets);
    1110:	e0bffb17 	ldw	r2,-20(fp)
    1114:	1009883a 	mov	r4,r2
    1118:	00013440 	call	1344 <move_projectiles>
			render_projectiles(head_bullets);
    111c:	e0bffb17 	ldw	r2,-20(fp)
    1120:	1009883a 	mov	r4,r2
    1124:	000138c0 	call	138c <render_projectiles>
			if(get_keycode(&keycode1,&keycode2)==0){
    1128:	e0fff804 	addi	r3,fp,-32
    112c:	e0bff904 	addi	r2,fp,-28
    1130:	1809883a 	mov	r4,r3
    1134:	100b883a 	mov	r5,r2
    1138:	00003940 	call	394 <get_keycode>
    113c:	1000181e 	bne	r2,zero,11a0 <main+0xf4>
				parse_keycode(arr,keycode1,keycode2);
    1140:	e0fff817 	ldw	r3,-32(fp)
    1144:	e0bff917 	ldw	r2,-28(fp)
    1148:	e13ffc04 	addi	r4,fp,-16
    114c:	180b883a 	mov	r5,r3
    1150:	100d883a 	mov	r6,r2
    1154:	0001dd00 	call	1dd0 <parse_keycode>
				if(keycode_effect(first,second,arr,&head_bullets,i%5)==1){
    1158:	e0bff417 	ldw	r2,-48(fp)
    115c:	1009883a 	mov	r4,r2
    1160:	01400144 	movi	r5,5
    1164:	00034fc0 	call	34fc <__modsi3>
    1168:	1009883a 	mov	r4,r2
    116c:	e0fffc04 	addi	r3,fp,-16
    1170:	e0bffb04 	addi	r2,fp,-20
    1174:	d9000015 	stw	r4,0(sp)
    1178:	e13ff617 	ldw	r4,-40(fp)
    117c:	e17ff717 	ldw	r5,-36(fp)
    1180:	180d883a 	mov	r6,r3
    1184:	100f883a 	mov	r7,r2
    1188:	0001b880 	call	1b88 <keycode_effect>
    118c:	10800058 	cmpnei	r2,r2,1
    1190:	1000031e 	bne	r2,zero,11a0 <main+0xf4>
				render_players(first,second);
    1194:	e13ff617 	ldw	r4,-40(fp)
    1198:	e17ff717 	ldw	r5,-36(fp)
    119c:	0001a6c0 	call	1a6c <render_players>
				}
			}
			if(num_of_enemies<3){
    11a0:	e0bff517 	ldw	r2,-44(fp)
    11a4:	108000c8 	cmpgei	r2,r2,3
    11a8:	1000031e 	bne	r2,zero,11b8 <main+0x10c>
				make_enemy(&head_enemies);
    11ac:	e0bffa04 	addi	r2,fp,-24
    11b0:	1009883a 	mov	r4,r2
    11b4:	00014840 	call	1484 <make_enemy>
			}
			render_enemies(head_enemies);
    11b8:	e0bffa17 	ldw	r2,-24(fp)
    11bc:	1009883a 	mov	r4,r2
    11c0:	00017240 	call	1724 <render_enemies>
			move_enemies(head_enemies);
    11c4:	e0bffa17 	ldw	r2,-24(fp)
    11c8:	1009883a 	mov	r4,r2
    11cc:	00016a00 	call	16a0 <move_enemies>
			head_enemies=(enemy *)delete_enemy(head_enemies);
    11d0:	e0bffa17 	ldw	r2,-24(fp)
    11d4:	1009883a 	mov	r4,r2
    11d8:	00015700 	call	1570 <delete_enemy>
    11dc:	e0bffa15 	stw	r2,-24(fp)
			num_of_enemies=count_enemies(head_enemies);
    11e0:	e0bffa17 	ldw	r2,-24(fp)
    11e4:	1009883a 	mov	r4,r2
    11e8:	000164c0 	call	164c <count_enemies>
    11ec:	e0bff515 	stw	r2,-44(fp)
			head_bullets = check_projectiles(head_bullets, head_enemies);
    11f0:	e0fffb17 	ldw	r3,-20(fp)
    11f4:	e0bffa17 	ldw	r2,-24(fp)
    11f8:	1809883a 	mov	r4,r3
    11fc:	100b883a 	mov	r5,r2
    1200:	0001f000 	call	1f00 <check_projectiles>
    1204:	e0bffb15 	stw	r2,-20(fp)
			i++;
    1208:	e0bff417 	ldw	r2,-48(fp)
    120c:	10800044 	addi	r2,r2,1
    1210:	e0bff415 	stw	r2,-48(fp)
		}
    1214:	003fbe06 	br	1110 <__alt_data_end+0xfffab9e0>

00001218 <init_players>:
				 {116,137},
				 {105,63},
				 {89,75},
				 {23,32}};			//bullets

void init_players(player *first,player *second){
    1218:	defffc04 	addi	sp,sp,-16
    121c:	dfc00315 	stw	ra,12(sp)
    1220:	df000215 	stw	fp,8(sp)
    1224:	df000204 	addi	fp,sp,8
    1228:	e13ffe15 	stw	r4,-8(fp)
    122c:	e17fff15 	stw	r5,-4(fp)
	if(first==NULL || second ==NULL)
    1230:	e0bffe17 	ldw	r2,-8(fp)
    1234:	10000226 	beq	r2,zero,1240 <init_players+0x28>
    1238:	e0bfff17 	ldw	r2,-4(fp)
    123c:	1000041e 	bne	r2,zero,1250 <init_players+0x38>
	{
		printf("players not instantiated");
    1240:	01000074 	movhi	r4,1
    1244:	210bae04 	addi	r4,r4,11960
    1248:	0003d640 	call	3d64 <printf>
    124c:	00002406 	br	12e0 <init_players+0xc8>
	}
	else{
		first->x_pos = 300,
    1250:	e0bffe17 	ldw	r2,-8(fp)
    1254:	00c04b04 	movi	r3,300
    1258:	10c00015 	stw	r3,0(r2)
		first->y_pos = y_bounds - sizes[player2_sprite][1];
    125c:	00800074 	movhi	r2,1
    1260:	108ca204 	addi	r2,r2,12936
    1264:	10800317 	ldw	r2,12(r2)
    1268:	00c077c4 	movi	r3,479
    126c:	1887c83a 	sub	r3,r3,r2
    1270:	e0bffe17 	ldw	r2,-8(fp)
    1274:	10c00115 	stw	r3,4(r2)
		first->health = 3;
    1278:	e0bffe17 	ldw	r2,-8(fp)
    127c:	00c000c4 	movi	r3,3
    1280:	10c00215 	stw	r3,8(r2)
		first->id=player2_sprite;
    1284:	e0bffe17 	ldw	r2,-8(fp)
    1288:	00c00044 	movi	r3,1
    128c:	10c00315 	stw	r3,12(r2)
		first->old_x =first->x_pos;
    1290:	e0bffe17 	ldw	r2,-8(fp)
    1294:	10c00017 	ldw	r3,0(r2)
    1298:	e0bffe17 	ldw	r2,-8(fp)
    129c:	10c00415 	stw	r3,16(r2)
		second->x_pos= 200;
    12a0:	e0bfff17 	ldw	r2,-4(fp)
    12a4:	00c03204 	movi	r3,200
    12a8:	10c00015 	stw	r3,0(r2)
		second->y_pos= y_bounds - sizes[player2_sprite][1];
    12ac:	00800074 	movhi	r2,1
    12b0:	108ca204 	addi	r2,r2,12936
    12b4:	10800317 	ldw	r2,12(r2)
    12b8:	00c077c4 	movi	r3,479
    12bc:	1887c83a 	sub	r3,r3,r2
    12c0:	e0bfff17 	ldw	r2,-4(fp)
    12c4:	10c00115 	stw	r3,4(r2)
		second->health=3;
    12c8:	e0bfff17 	ldw	r2,-4(fp)
    12cc:	00c000c4 	movi	r3,3
    12d0:	10c00215 	stw	r3,8(r2)
		second->id = player2_sprite;
    12d4:	e0bfff17 	ldw	r2,-4(fp)
    12d8:	00c00044 	movi	r3,1
    12dc:	10c00315 	stw	r3,12(r2)
	}
}
    12e0:	e037883a 	mov	sp,fp
    12e4:	dfc00117 	ldw	ra,4(sp)
    12e8:	df000017 	ldw	fp,0(sp)
    12ec:	dec00204 	addi	sp,sp,8
    12f0:	f800283a 	ret

000012f4 <move_projectile>:

void move_projectile(player_projectile *head)
{
    12f4:	defffe04 	addi	sp,sp,-8
    12f8:	df000115 	stw	fp,4(sp)
    12fc:	df000104 	addi	fp,sp,4
    1300:	e13fff15 	stw	r4,-4(fp)
	if(head->y_pos<8)
    1304:	e0bfff17 	ldw	r2,-4(fp)
    1308:	10800117 	ldw	r2,4(r2)
    130c:	10800208 	cmpgei	r2,r2,8
    1310:	1000031e 	bne	r2,zero,1320 <move_projectile+0x2c>
		head->y_pos=0;
    1314:	e0bfff17 	ldw	r2,-4(fp)
    1318:	10000115 	stw	zero,4(r2)
    131c:	00000506 	br	1334 <move_projectile+0x40>
	else
		head->y_pos-=8;
    1320:	e0bfff17 	ldw	r2,-4(fp)
    1324:	10800117 	ldw	r2,4(r2)
    1328:	10fffe04 	addi	r3,r2,-8
    132c:	e0bfff17 	ldw	r2,-4(fp)
    1330:	10c00115 	stw	r3,4(r2)
}
    1334:	e037883a 	mov	sp,fp
    1338:	df000017 	ldw	fp,0(sp)
    133c:	dec00104 	addi	sp,sp,4
    1340:	f800283a 	ret

00001344 <move_projectiles>:

void move_projectiles(player_projectile *head)
{
    1344:	defffd04 	addi	sp,sp,-12
    1348:	dfc00215 	stw	ra,8(sp)
    134c:	df000115 	stw	fp,4(sp)
    1350:	df000104 	addi	fp,sp,4
    1354:	e13fff15 	stw	r4,-4(fp)
	while(head!=NULL)
    1358:	00000506 	br	1370 <move_projectiles+0x2c>
	{
		move_projectile(head);
    135c:	e13fff17 	ldw	r4,-4(fp)
    1360:	00012f40 	call	12f4 <move_projectile>
		head=head->next;
    1364:	e0bfff17 	ldw	r2,-4(fp)
    1368:	10800417 	ldw	r2,16(r2)
    136c:	e0bfff15 	stw	r2,-4(fp)
		head->y_pos-=8;
}

void move_projectiles(player_projectile *head)
{
	while(head!=NULL)
    1370:	e0bfff17 	ldw	r2,-4(fp)
    1374:	103ff91e 	bne	r2,zero,135c <__alt_data_end+0xfffabc2c>
	{
		move_projectile(head);
		head=head->next;
	}
}
    1378:	e037883a 	mov	sp,fp
    137c:	dfc00117 	ldw	ra,4(sp)
    1380:	df000017 	ldw	fp,0(sp)
    1384:	dec00204 	addi	sp,sp,8
    1388:	f800283a 	ret

0000138c <render_projectiles>:

void render_projectiles(player_projectile *head)
{
    138c:	defffc04 	addi	sp,sp,-16
    1390:	dfc00315 	stw	ra,12(sp)
    1394:	df000215 	stw	fp,8(sp)
    1398:	df000204 	addi	fp,sp,8
    139c:	e13fff15 	stw	r4,-4(fp)
	player_projectile *pr=head;
    13a0:	e0bfff17 	ldw	r2,-4(fp)
    13a4:	e0bffe15 	stw	r2,-8(fp)
		while(pr!=NULL){
    13a8:	00000506 	br	13c0 <render_projectiles+0x34>
			render_projectile(pr);
    13ac:	e13ffe17 	ldw	r4,-8(fp)
    13b0:	00013dc0 	call	13dc <render_projectile>
			pr=pr->next;
    13b4:	e0bffe17 	ldw	r2,-8(fp)
    13b8:	10800417 	ldw	r2,16(r2)
    13bc:	e0bffe15 	stw	r2,-8(fp)
}

void render_projectiles(player_projectile *head)
{
	player_projectile *pr=head;
		while(pr!=NULL){
    13c0:	e0bffe17 	ldw	r2,-8(fp)
    13c4:	103ff91e 	bne	r2,zero,13ac <__alt_data_end+0xfffabc7c>
			render_projectile(pr);
			pr=pr->next;
		}
}
    13c8:	e037883a 	mov	sp,fp
    13cc:	dfc00117 	ldw	ra,4(sp)
    13d0:	df000017 	ldw	fp,0(sp)
    13d4:	dec00204 	addi	sp,sp,8
    13d8:	f800283a 	ret

000013dc <render_projectile>:

void render_projectile(player_projectile *pr){
    13dc:	defffd04 	addi	sp,sp,-12
    13e0:	dfc00215 	stw	ra,8(sp)
    13e4:	df000115 	stw	fp,4(sp)
    13e8:	df000104 	addi	fp,sp,4
    13ec:	e13fff15 	stw	r4,-4(fp)
	if(pr==NULL){
    13f0:	e0bfff17 	ldw	r2,-4(fp)
    13f4:	1000041e 	bne	r2,zero,1408 <render_projectile+0x2c>
		printf("bullet not found");
    13f8:	01000074 	movhi	r4,1
    13fc:	210bb504 	addi	r4,r4,11988
    1400:	0003d640 	call	3d64 <printf>
    1404:	00001a06 	br	1470 <render_projectile+0x94>
		}
	else{
		renderer(pr->old_x,pr->old_y,13,1);//Shadow First
    1408:	e0bfff17 	ldw	r2,-4(fp)
    140c:	10c00217 	ldw	r3,8(r2)
    1410:	e0bfff17 	ldw	r2,-4(fp)
    1414:	10800317 	ldw	r2,12(r2)
    1418:	1809883a 	mov	r4,r3
    141c:	100b883a 	mov	r5,r2
    1420:	01800344 	movi	r6,13
    1424:	01c00044 	movi	r7,1
    1428:	00018240 	call	1824 <renderer>
		renderer(pr->x_pos,pr->y_pos,13,0);
    142c:	e0bfff17 	ldw	r2,-4(fp)
    1430:	10c00017 	ldw	r3,0(r2)
    1434:	e0bfff17 	ldw	r2,-4(fp)
    1438:	10800117 	ldw	r2,4(r2)
    143c:	1809883a 	mov	r4,r3
    1440:	100b883a 	mov	r5,r2
    1444:	01800344 	movi	r6,13
    1448:	000f883a 	mov	r7,zero
    144c:	00018240 	call	1824 <renderer>
		pr->old_x=pr->x_pos;
    1450:	e0bfff17 	ldw	r2,-4(fp)
    1454:	10c00017 	ldw	r3,0(r2)
    1458:	e0bfff17 	ldw	r2,-4(fp)
    145c:	10c00215 	stw	r3,8(r2)
		pr->old_y=pr->y_pos;
    1460:	e0bfff17 	ldw	r2,-4(fp)
    1464:	10c00117 	ldw	r3,4(r2)
    1468:	e0bfff17 	ldw	r2,-4(fp)
    146c:	10c00315 	stw	r3,12(r2)
		}
}
    1470:	e037883a 	mov	sp,fp
    1474:	dfc00117 	ldw	ra,4(sp)
    1478:	df000017 	ldw	fp,0(sp)
    147c:	dec00204 	addi	sp,sp,8
    1480:	f800283a 	ret

00001484 <make_enemy>:


void make_enemy(enemy **em){
    1484:	defffc04 	addi	sp,sp,-16
    1488:	dfc00315 	stw	ra,12(sp)
    148c:	df000215 	stw	fp,8(sp)
    1490:	df000204 	addi	fp,sp,8
    1494:	e13fff15 	stw	r4,-4(fp)
	enemy *generated=(enemy *)malloc(sizeof(enemy));
    1498:	01000704 	movi	r4,28
    149c:	00035680 	call	3568 <malloc>
    14a0:	e0bffe15 	stw	r2,-8(fp)
	generated->x_pos=rand()%500;
    14a4:	0003e840 	call	3e84 <rand>
    14a8:	1009883a 	mov	r4,r2
    14ac:	01407d04 	movi	r5,500
    14b0:	00034fc0 	call	34fc <__modsi3>
    14b4:	1007883a 	mov	r3,r2
    14b8:	e0bffe17 	ldw	r2,-8(fp)
    14bc:	10c00015 	stw	r3,0(r2)
	generated->y_pos=rand()%30;
    14c0:	0003e840 	call	3e84 <rand>
    14c4:	1009883a 	mov	r4,r2
    14c8:	01400784 	movi	r5,30
    14cc:	00034fc0 	call	34fc <__modsi3>
    14d0:	1007883a 	mov	r3,r2
    14d4:	e0bffe17 	ldw	r2,-8(fp)
    14d8:	10c00115 	stw	r3,4(r2)
	generated->old_x=generated->x_pos;
    14dc:	e0bffe17 	ldw	r2,-8(fp)
    14e0:	10c00017 	ldw	r3,0(r2)
    14e4:	e0bffe17 	ldw	r2,-8(fp)
    14e8:	10c00415 	stw	r3,16(r2)
	generated->old_y=generated->y_pos;
    14ec:	e0bffe17 	ldw	r2,-8(fp)
    14f0:	10c00117 	ldw	r3,4(r2)
    14f4:	e0bffe17 	ldw	r2,-8(fp)
    14f8:	10c00515 	stw	r3,20(r2)
	generated->health = 2;
    14fc:	e0bffe17 	ldw	r2,-8(fp)
    1500:	00c00084 	movi	r3,2
    1504:	10c00215 	stw	r3,8(r2)
	generated->id=rand()%10+3;
    1508:	0003e840 	call	3e84 <rand>
    150c:	1009883a 	mov	r4,r2
    1510:	01400284 	movi	r5,10
    1514:	00034fc0 	call	34fc <__modsi3>
    1518:	10c000c4 	addi	r3,r2,3
    151c:	e0bffe17 	ldw	r2,-8(fp)
    1520:	10c00315 	stw	r3,12(r2)
	if(generated->id==4){
    1524:	e0bffe17 	ldw	r2,-8(fp)
    1528:	10800317 	ldw	r2,12(r2)
    152c:	10800118 	cmpnei	r2,r2,4
    1530:	1000031e 	bne	r2,zero,1540 <make_enemy+0xbc>
		generated->id=5;
    1534:	e0bffe17 	ldw	r2,-8(fp)
    1538:	00c00144 	movi	r3,5
    153c:	10c00315 	stw	r3,12(r2)
	}
	generated->next = *em;
    1540:	e0bfff17 	ldw	r2,-4(fp)
    1544:	10c00017 	ldw	r3,0(r2)
    1548:	e0bffe17 	ldw	r2,-8(fp)
    154c:	10c00615 	stw	r3,24(r2)
	*em = generated;
    1550:	e0bfff17 	ldw	r2,-4(fp)
    1554:	e0fffe17 	ldw	r3,-8(fp)
    1558:	10c00015 	stw	r3,0(r2)
}
    155c:	e037883a 	mov	sp,fp
    1560:	dfc00117 	ldw	ra,4(sp)
    1564:	df000017 	ldw	fp,0(sp)
    1568:	dec00204 	addi	sp,sp,8
    156c:	f800283a 	ret

00001570 <delete_enemy>:

enemy * delete_enemy(enemy *curr)
{
    1570:	defffc04 	addi	sp,sp,-16
    1574:	dfc00315 	stw	ra,12(sp)
    1578:	df000215 	stw	fp,8(sp)
    157c:	df000204 	addi	fp,sp,8
    1580:	e13fff15 	stw	r4,-4(fp)
  if (curr == NULL)
    1584:	e0bfff17 	ldw	r2,-4(fp)
    1588:	1000021e 	bne	r2,zero,1594 <delete_enemy+0x24>
    return NULL;
    158c:	0005883a 	mov	r2,zero
    1590:	00002906 	br	1638 <delete_enemy+0xc8>

  if (curr->y_pos + sizes[curr->id][1]>=475 || curr->health==0) {
    1594:	e0bfff17 	ldw	r2,-4(fp)
    1598:	10c00117 	ldw	r3,4(r2)
    159c:	e0bfff17 	ldw	r2,-4(fp)
    15a0:	11000317 	ldw	r4,12(r2)
    15a4:	00800074 	movhi	r2,1
    15a8:	108ca204 	addi	r2,r2,12936
    15ac:	200890fa 	slli	r4,r4,3
    15b0:	1105883a 	add	r2,r2,r4
    15b4:	10800104 	addi	r2,r2,4
    15b8:	10800017 	ldw	r2,0(r2)
    15bc:	1885883a 	add	r2,r3,r2
    15c0:	108076c8 	cmpgei	r2,r2,475
    15c4:	1000031e 	bne	r2,zero,15d4 <delete_enemy+0x64>
    15c8:	e0bfff17 	ldw	r2,-4(fp)
    15cc:	10800217 	ldw	r2,8(r2)
    15d0:	1000111e 	bne	r2,zero,1618 <delete_enemy+0xa8>
    enemy *tempNext;
    tempNext = curr->next;
    15d4:	e0bfff17 	ldw	r2,-4(fp)
    15d8:	10800617 	ldw	r2,24(r2)
    15dc:	e0bffe15 	stw	r2,-8(fp)
    renderer(curr->x_pos,curr->y_pos,curr->id,1);//Render shadow
    15e0:	e0bfff17 	ldw	r2,-4(fp)
    15e4:	11000017 	ldw	r4,0(r2)
    15e8:	e0bfff17 	ldw	r2,-4(fp)
    15ec:	10c00117 	ldw	r3,4(r2)
    15f0:	e0bfff17 	ldw	r2,-4(fp)
    15f4:	10800317 	ldw	r2,12(r2)
    15f8:	180b883a 	mov	r5,r3
    15fc:	100d883a 	mov	r6,r2
    1600:	01c00044 	movi	r7,1
    1604:	00018240 	call	1824 <renderer>
    free(curr);
    1608:	e13fff17 	ldw	r4,-4(fp)
    160c:	000357c0 	call	357c <free>
    return tempNext;
    1610:	e0bffe17 	ldw	r2,-8(fp)
    1614:	00000806 	br	1638 <delete_enemy+0xc8>
  }
  curr->next = delete_enemy(curr->next);
    1618:	e0bfff17 	ldw	r2,-4(fp)
    161c:	10800617 	ldw	r2,24(r2)
    1620:	1009883a 	mov	r4,r2
    1624:	00015700 	call	1570 <delete_enemy>
    1628:	1007883a 	mov	r3,r2
    162c:	e0bfff17 	ldw	r2,-4(fp)
    1630:	10c00615 	stw	r3,24(r2)
  return curr;
    1634:	e0bfff17 	ldw	r2,-4(fp)
}
    1638:	e037883a 	mov	sp,fp
    163c:	dfc00117 	ldw	ra,4(sp)
    1640:	df000017 	ldw	fp,0(sp)
    1644:	dec00204 	addi	sp,sp,8
    1648:	f800283a 	ret

0000164c <count_enemies>:

int count_enemies(enemy *em){
    164c:	defffc04 	addi	sp,sp,-16
    1650:	df000315 	stw	fp,12(sp)
    1654:	df000304 	addi	fp,sp,12
    1658:	e13fff15 	stw	r4,-4(fp)
	int i=0;
    165c:	e03ffd15 	stw	zero,-12(fp)
	enemy *start=em;
    1660:	e0bfff17 	ldw	r2,-4(fp)
    1664:	e0bffe15 	stw	r2,-8(fp)
	while(start!=NULL){
    1668:	00000606 	br	1684 <count_enemies+0x38>
		start=start->next;
    166c:	e0bffe17 	ldw	r2,-8(fp)
    1670:	10800617 	ldw	r2,24(r2)
    1674:	e0bffe15 	stw	r2,-8(fp)
		i++;
    1678:	e0bffd17 	ldw	r2,-12(fp)
    167c:	10800044 	addi	r2,r2,1
    1680:	e0bffd15 	stw	r2,-12(fp)
}

int count_enemies(enemy *em){
	int i=0;
	enemy *start=em;
	while(start!=NULL){
    1684:	e0bffe17 	ldw	r2,-8(fp)
    1688:	103ff81e 	bne	r2,zero,166c <__alt_data_end+0xfffabf3c>
		start=start->next;
		i++;
	}
	return i;
    168c:	e0bffd17 	ldw	r2,-12(fp)
}
    1690:	e037883a 	mov	sp,fp
    1694:	df000017 	ldw	fp,0(sp)
    1698:	dec00104 	addi	sp,sp,4
    169c:	f800283a 	ret

000016a0 <move_enemies>:

void move_enemies(enemy *start){
    16a0:	defffc04 	addi	sp,sp,-16
    16a4:	dfc00315 	stw	ra,12(sp)
    16a8:	df000215 	stw	fp,8(sp)
    16ac:	df000204 	addi	fp,sp,8
    16b0:	e13fff15 	stw	r4,-4(fp)
	if(start==NULL){
    16b4:	e0bfff17 	ldw	r2,-4(fp)
    16b8:	1000041e 	bne	r2,zero,16cc <move_enemies+0x2c>
		printf("You piece of shit\n");
    16bc:	01000074 	movhi	r4,1
    16c0:	210bba04 	addi	r4,r4,12008
    16c4:	0003e580 	call	3e58 <puts>
    16c8:	00001106 	br	1710 <move_enemies+0x70>
	}
	else{
	enemy *em=start;
    16cc:	e0bfff17 	ldw	r2,-4(fp)
    16d0:	e0bffe15 	stw	r2,-8(fp)
	while(em!=NULL){
    16d4:	00000c06 	br	1708 <move_enemies+0x68>
		move_enemy(em,em->x_pos,em->y_pos+3);
    16d8:	e0bffe17 	ldw	r2,-8(fp)
    16dc:	10c00017 	ldw	r3,0(r2)
    16e0:	e0bffe17 	ldw	r2,-8(fp)
    16e4:	10800117 	ldw	r2,4(r2)
    16e8:	108000c4 	addi	r2,r2,3
    16ec:	e13ffe17 	ldw	r4,-8(fp)
    16f0:	180b883a 	mov	r5,r3
    16f4:	100d883a 	mov	r6,r2
    16f8:	00021dc0 	call	21dc <move_enemy>
		em=em->next;
    16fc:	e0bffe17 	ldw	r2,-8(fp)
    1700:	10800617 	ldw	r2,24(r2)
    1704:	e0bffe15 	stw	r2,-8(fp)
	if(start==NULL){
		printf("You piece of shit\n");
	}
	else{
	enemy *em=start;
	while(em!=NULL){
    1708:	e0bffe17 	ldw	r2,-8(fp)
    170c:	103ff21e 	bne	r2,zero,16d8 <__alt_data_end+0xfffabfa8>
		move_enemy(em,em->x_pos,em->y_pos+3);
		em=em->next;
		}
	}
}
    1710:	e037883a 	mov	sp,fp
    1714:	dfc00117 	ldw	ra,4(sp)
    1718:	df000017 	ldw	fp,0(sp)
    171c:	dec00204 	addi	sp,sp,8
    1720:	f800283a 	ret

00001724 <render_enemies>:

void render_enemies(enemy *start){
    1724:	defffc04 	addi	sp,sp,-16
    1728:	dfc00315 	stw	ra,12(sp)
    172c:	df000215 	stw	fp,8(sp)
    1730:	df000204 	addi	fp,sp,8
    1734:	e13fff15 	stw	r4,-4(fp)
	enemy *em=start;
    1738:	e0bfff17 	ldw	r2,-4(fp)
    173c:	e0bffe15 	stw	r2,-8(fp)
	while(em!=NULL){
    1740:	00000506 	br	1758 <render_enemies+0x34>
		render_enemy(em);
    1744:	e13ffe17 	ldw	r4,-8(fp)
    1748:	00017740 	call	1774 <render_enemy>
		em=em->next;
    174c:	e0bffe17 	ldw	r2,-8(fp)
    1750:	10800617 	ldw	r2,24(r2)
    1754:	e0bffe15 	stw	r2,-8(fp)
	}
}

void render_enemies(enemy *start){
	enemy *em=start;
	while(em!=NULL){
    1758:	e0bffe17 	ldw	r2,-8(fp)
    175c:	103ff91e 	bne	r2,zero,1744 <__alt_data_end+0xfffac014>
		render_enemy(em);
		em=em->next;
	}
}
    1760:	e037883a 	mov	sp,fp
    1764:	dfc00117 	ldw	ra,4(sp)
    1768:	df000017 	ldw	fp,0(sp)
    176c:	dec00204 	addi	sp,sp,8
    1770:	f800283a 	ret

00001774 <render_enemy>:

void render_enemy(enemy *em){
    1774:	defffd04 	addi	sp,sp,-12
    1778:	dfc00215 	stw	ra,8(sp)
    177c:	df000115 	stw	fp,4(sp)
    1780:	df000104 	addi	fp,sp,4
    1784:	e13fff15 	stw	r4,-4(fp)
	if(em==NULL){
    1788:	e0bfff17 	ldw	r2,-4(fp)
    178c:	1000041e 	bne	r2,zero,17a0 <render_enemy+0x2c>
		printf("enemy not initialized");
    1790:	01000074 	movhi	r4,1
    1794:	210bbf04 	addi	r4,r4,12028
    1798:	0003d640 	call	3d64 <printf>
    179c:	00001c06 	br	1810 <render_enemy+0x9c>
		}
	else{
		renderer(em->old_x,em->old_y,em->id,1);//Shadow First
    17a0:	e0bfff17 	ldw	r2,-4(fp)
    17a4:	11000417 	ldw	r4,16(r2)
    17a8:	e0bfff17 	ldw	r2,-4(fp)
    17ac:	10c00517 	ldw	r3,20(r2)
    17b0:	e0bfff17 	ldw	r2,-4(fp)
    17b4:	10800317 	ldw	r2,12(r2)
    17b8:	180b883a 	mov	r5,r3
    17bc:	100d883a 	mov	r6,r2
    17c0:	01c00044 	movi	r7,1
    17c4:	00018240 	call	1824 <renderer>
		renderer(em->x_pos,em->y_pos,em->id,0);
    17c8:	e0bfff17 	ldw	r2,-4(fp)
    17cc:	11000017 	ldw	r4,0(r2)
    17d0:	e0bfff17 	ldw	r2,-4(fp)
    17d4:	10c00117 	ldw	r3,4(r2)
    17d8:	e0bfff17 	ldw	r2,-4(fp)
    17dc:	10800317 	ldw	r2,12(r2)
    17e0:	180b883a 	mov	r5,r3
    17e4:	100d883a 	mov	r6,r2
    17e8:	000f883a 	mov	r7,zero
    17ec:	00018240 	call	1824 <renderer>
		em->old_x=em->x_pos;
    17f0:	e0bfff17 	ldw	r2,-4(fp)
    17f4:	10c00017 	ldw	r3,0(r2)
    17f8:	e0bfff17 	ldw	r2,-4(fp)
    17fc:	10c00415 	stw	r3,16(r2)
		em->old_y=em->y_pos;
    1800:	e0bfff17 	ldw	r2,-4(fp)
    1804:	10c00117 	ldw	r3,4(r2)
    1808:	e0bfff17 	ldw	r2,-4(fp)
    180c:	10c00515 	stw	r3,20(r2)
		}
}
    1810:	e037883a 	mov	sp,fp
    1814:	dfc00117 	ldw	ra,4(sp)
    1818:	df000017 	ldw	fp,0(sp)
    181c:	dec00204 	addi	sp,sp,8
    1820:	f800283a 	ret

00001824 <renderer>:


void renderer(int x, int y, int sprite_num, int is_shadow)
{
    1824:	defffb04 	addi	sp,sp,-20
    1828:	df000415 	stw	fp,16(sp)
    182c:	df000404 	addi	fp,sp,16
    1830:	e13ffc15 	stw	r4,-16(fp)
    1834:	e17ffd15 	stw	r5,-12(fp)
    1838:	e1bffe15 	stw	r6,-8(fp)
    183c:	e1ffff15 	stw	r7,-4(fp)
	if(is_shadow==1)
    1840:	e0bfff17 	ldw	r2,-4(fp)
    1844:	10800058 	cmpnei	r2,r2,1
    1848:	1000051e 	bne	r2,zero,1860 <renderer+0x3c>
		*sw_to_hw = 4;
    184c:	00800234 	movhi	r2,8
    1850:	10842004 	addi	r2,r2,4224
    1854:	00c00104 	movi	r3,4
    1858:	10c00015 	stw	r3,0(r2)
    185c:	00000606 	br	1878 <renderer+0x54>
	else
		*sw_to_hw &= 0;
    1860:	00800234 	movhi	r2,8
    1864:	10842004 	addi	r2,r2,4224
    1868:	10800017 	ldw	r2,0(r2)
    186c:	00800234 	movhi	r2,8
    1870:	10842004 	addi	r2,r2,4224
    1874:	10000015 	stw	zero,0(r2)
	*sprite_number = sprite_num;
    1878:	00800234 	movhi	r2,8
    187c:	10842804 	addi	r2,r2,4256
    1880:	e0fffe17 	ldw	r3,-8(fp)
    1884:	10c00015 	stw	r3,0(r2)
	*sprite_xy = 1024*x + y;
    1888:	00800234 	movhi	r2,8
    188c:	10842404 	addi	r2,r2,4240
    1890:	e0fffc17 	ldw	r3,-16(fp)
    1894:	180892ba 	slli	r4,r3,10
    1898:	e0fffd17 	ldw	r3,-12(fp)
    189c:	20c7883a 	add	r3,r4,r3
    18a0:	10c00015 	stw	r3,0(r2)
	*sw_to_hw |= 2;
    18a4:	00800234 	movhi	r2,8
    18a8:	10842004 	addi	r2,r2,4224
    18ac:	00c00234 	movhi	r3,8
    18b0:	18c42004 	addi	r3,r3,4224
    18b4:	18c00017 	ldw	r3,0(r3)
    18b8:	18c00094 	ori	r3,r3,2
    18bc:	10c00015 	stw	r3,0(r2)
	while(*hw_to_sw%2 != 0)
    18c0:	0001883a 	nop
    18c4:	00800234 	movhi	r2,8
    18c8:	10841c04 	addi	r2,r2,4208
    18cc:	10800017 	ldw	r2,0(r2)
    18d0:	1080004c 	andi	r2,r2,1
    18d4:	103ffb1e 	bne	r2,zero,18c4 <__alt_data_end+0xfffac194>
	{}
	*sw_to_hw &= ~2;
    18d8:	00800234 	movhi	r2,8
    18dc:	10842004 	addi	r2,r2,4224
    18e0:	00c00234 	movhi	r3,8
    18e4:	18c42004 	addi	r3,r3,4224
    18e8:	19000017 	ldw	r4,0(r3)
    18ec:	00ffff44 	movi	r3,-3
    18f0:	20c6703a 	and	r3,r4,r3
    18f4:	10c00015 	stw	r3,0(r2)
	while(*hw_to_sw != 1)
    18f8:	0001883a 	nop
    18fc:	00800234 	movhi	r2,8
    1900:	10841c04 	addi	r2,r2,4208
    1904:	10800017 	ldw	r2,0(r2)
    1908:	10800058 	cmpnei	r2,r2,1
    190c:	103ffb1e 	bne	r2,zero,18fc <__alt_data_end+0xfffac1cc>
	{}
	*sw_to_hw |= 1;
    1910:	00800234 	movhi	r2,8
    1914:	10842004 	addi	r2,r2,4224
    1918:	00c00234 	movhi	r3,8
    191c:	18c42004 	addi	r3,r3,4224
    1920:	18c00017 	ldw	r3,0(r3)
    1924:	18c00054 	ori	r3,r3,1
    1928:	10c00015 	stw	r3,0(r2)
	return;
    192c:	0001883a 	nop
}
    1930:	e037883a 	mov	sp,fp
    1934:	df000017 	ldw	fp,0(sp)
    1938:	dec00104 	addi	sp,sp,4
    193c:	f800283a 	ret

00001940 <render_shadows>:

void render_shadows(player *first,player *second){
    1940:	defffc04 	addi	sp,sp,-16
    1944:	dfc00315 	stw	ra,12(sp)
    1948:	df000215 	stw	fp,8(sp)
    194c:	df000204 	addi	fp,sp,8
    1950:	e13ffe15 	stw	r4,-8(fp)
    1954:	e17fff15 	stw	r5,-4(fp)
	if(first==NULL || second ==NULL){
    1958:	e0bffe17 	ldw	r2,-8(fp)
    195c:	10000226 	beq	r2,zero,1968 <render_shadows+0x28>
    1960:	e0bfff17 	ldw	r2,-4(fp)
    1964:	1000041e 	bne	r2,zero,1978 <render_shadows+0x38>
			printf("players not instantiated");
    1968:	01000074 	movhi	r4,1
    196c:	210bae04 	addi	r4,r4,11960
    1970:	0003d640 	call	3d64 <printf>
    1974:	00001406 	br	19c8 <render_shadows+0x88>
	}
	else{
		renderer(first->old_x,first->old_y,first->id,1);
    1978:	e0bffe17 	ldw	r2,-8(fp)
    197c:	11000417 	ldw	r4,16(r2)
    1980:	e0bffe17 	ldw	r2,-8(fp)
    1984:	10c00517 	ldw	r3,20(r2)
    1988:	e0bffe17 	ldw	r2,-8(fp)
    198c:	10800317 	ldw	r2,12(r2)
    1990:	180b883a 	mov	r5,r3
    1994:	100d883a 	mov	r6,r2
    1998:	01c00044 	movi	r7,1
    199c:	00018240 	call	1824 <renderer>
		renderer(second->old_x,second->old_y,second->id,1);
    19a0:	e0bfff17 	ldw	r2,-4(fp)
    19a4:	11000417 	ldw	r4,16(r2)
    19a8:	e0bfff17 	ldw	r2,-4(fp)
    19ac:	10c00517 	ldw	r3,20(r2)
    19b0:	e0bfff17 	ldw	r2,-4(fp)
    19b4:	10800317 	ldw	r2,12(r2)
    19b8:	180b883a 	mov	r5,r3
    19bc:	100d883a 	mov	r6,r2
    19c0:	01c00044 	movi	r7,1
    19c4:	00018240 	call	1824 <renderer>
	}
	return;
    19c8:	0001883a 	nop
}
    19cc:	e037883a 	mov	sp,fp
    19d0:	dfc00117 	ldw	ra,4(sp)
    19d4:	df000017 	ldw	fp,0(sp)
    19d8:	dec00204 	addi	sp,sp,8
    19dc:	f800283a 	ret

000019e0 <render_shadow>:
void render_shadow(player *current){
    19e0:	defffd04 	addi	sp,sp,-12
    19e4:	dfc00215 	stw	ra,8(sp)
    19e8:	df000115 	stw	fp,4(sp)
    19ec:	df000104 	addi	fp,sp,4
    19f0:	e13fff15 	stw	r4,-4(fp)
	if(current==NULL){
    19f4:	e0bfff17 	ldw	r2,-4(fp)
    19f8:	1000041e 	bne	r2,zero,1a0c <render_shadow+0x2c>
			printf("players not instantiated");
    19fc:	01000074 	movhi	r4,1
    1a00:	210bae04 	addi	r4,r4,11960
    1a04:	0003d640 	call	3d64 <printf>
    1a08:	00001206 	br	1a54 <render_shadow+0x74>
	}
	else{
		renderer(current->old_x,current->old_y,current->id,1);
    1a0c:	e0bfff17 	ldw	r2,-4(fp)
    1a10:	11000417 	ldw	r4,16(r2)
    1a14:	e0bfff17 	ldw	r2,-4(fp)
    1a18:	10c00517 	ldw	r3,20(r2)
    1a1c:	e0bfff17 	ldw	r2,-4(fp)
    1a20:	10800317 	ldw	r2,12(r2)
    1a24:	180b883a 	mov	r5,r3
    1a28:	100d883a 	mov	r6,r2
    1a2c:	01c00044 	movi	r7,1
    1a30:	00018240 	call	1824 <renderer>
		current->old_x=current->x_pos;
    1a34:	e0bfff17 	ldw	r2,-4(fp)
    1a38:	10c00017 	ldw	r3,0(r2)
    1a3c:	e0bfff17 	ldw	r2,-4(fp)
    1a40:	10c00415 	stw	r3,16(r2)
		current->old_y=current->y_pos;
    1a44:	e0bfff17 	ldw	r2,-4(fp)
    1a48:	10c00117 	ldw	r3,4(r2)
    1a4c:	e0bfff17 	ldw	r2,-4(fp)
    1a50:	10c00515 	stw	r3,20(r2)
	}
	return;
    1a54:	0001883a 	nop
}
    1a58:	e037883a 	mov	sp,fp
    1a5c:	dfc00117 	ldw	ra,4(sp)
    1a60:	df000017 	ldw	fp,0(sp)
    1a64:	dec00204 	addi	sp,sp,8
    1a68:	f800283a 	ret

00001a6c <render_players>:

void render_players(player *first,player *second){
    1a6c:	defffc04 	addi	sp,sp,-16
    1a70:	dfc00315 	stw	ra,12(sp)
    1a74:	df000215 	stw	fp,8(sp)
    1a78:	df000204 	addi	fp,sp,8
    1a7c:	e13ffe15 	stw	r4,-8(fp)
    1a80:	e17fff15 	stw	r5,-4(fp)
	if(first==NULL || second ==NULL){
    1a84:	e0bffe17 	ldw	r2,-8(fp)
    1a88:	10000226 	beq	r2,zero,1a94 <render_players+0x28>
    1a8c:	e0bfff17 	ldw	r2,-4(fp)
    1a90:	1000041e 	bne	r2,zero,1aa4 <render_players+0x38>
		printf("players not instantiated");
    1a94:	01000074 	movhi	r4,1
    1a98:	210bae04 	addi	r4,r4,11960
    1a9c:	0003d640 	call	3d64 <printf>
    1aa0:	00001e06 	br	1b1c <render_players+0xb0>
	}
	else{
		if(render_player_check(first)==0){
    1aa4:	e13ffe17 	ldw	r4,-8(fp)
    1aa8:	0001b300 	call	1b30 <render_player_check>
    1aac:	10000c1e 	bne	r2,zero,1ae0 <render_players+0x74>
			render_shadow(first);
    1ab0:	e13ffe17 	ldw	r4,-8(fp)
    1ab4:	00019e00 	call	19e0 <render_shadow>
			renderer(first->x_pos,first->y_pos,first->id,0);
    1ab8:	e0bffe17 	ldw	r2,-8(fp)
    1abc:	11000017 	ldw	r4,0(r2)
    1ac0:	e0bffe17 	ldw	r2,-8(fp)
    1ac4:	10c00117 	ldw	r3,4(r2)
    1ac8:	e0bffe17 	ldw	r2,-8(fp)
    1acc:	10800317 	ldw	r2,12(r2)
    1ad0:	180b883a 	mov	r5,r3
    1ad4:	100d883a 	mov	r6,r2
    1ad8:	000f883a 	mov	r7,zero
    1adc:	00018240 	call	1824 <renderer>

		}
		if(render_player_check(second)==0){
    1ae0:	e13fff17 	ldw	r4,-4(fp)
    1ae4:	0001b300 	call	1b30 <render_player_check>
    1ae8:	10000c1e 	bne	r2,zero,1b1c <render_players+0xb0>
			render_shadow(second);
    1aec:	e13fff17 	ldw	r4,-4(fp)
    1af0:	00019e00 	call	19e0 <render_shadow>
			renderer(second->x_pos,second->y_pos,second->id,0);
    1af4:	e0bfff17 	ldw	r2,-4(fp)
    1af8:	11000017 	ldw	r4,0(r2)
    1afc:	e0bfff17 	ldw	r2,-4(fp)
    1b00:	10c00117 	ldw	r3,4(r2)
    1b04:	e0bfff17 	ldw	r2,-4(fp)
    1b08:	10800317 	ldw	r2,12(r2)
    1b0c:	180b883a 	mov	r5,r3
    1b10:	100d883a 	mov	r6,r2
    1b14:	000f883a 	mov	r7,zero
    1b18:	00018240 	call	1824 <renderer>

		}
	}
}
    1b1c:	e037883a 	mov	sp,fp
    1b20:	dfc00117 	ldw	ra,4(sp)
    1b24:	df000017 	ldw	fp,0(sp)
    1b28:	dec00204 	addi	sp,sp,8
    1b2c:	f800283a 	ret

00001b30 <render_player_check>:
int render_player_check(player *current){
    1b30:	defffd04 	addi	sp,sp,-12
    1b34:	df000215 	stw	fp,8(sp)
    1b38:	df000204 	addi	fp,sp,8
    1b3c:	e13fff15 	stw	r4,-4(fp)
	int i=0;
    1b40:	e03ffe15 	stw	zero,-8(fp)
	if(current->x_pos==current->old_x && current->y_pos==current->old_y){
    1b44:	e0bfff17 	ldw	r2,-4(fp)
    1b48:	10c00017 	ldw	r3,0(r2)
    1b4c:	e0bfff17 	ldw	r2,-4(fp)
    1b50:	10800417 	ldw	r2,16(r2)
    1b54:	1880071e 	bne	r3,r2,1b74 <render_player_check+0x44>
    1b58:	e0bfff17 	ldw	r2,-4(fp)
    1b5c:	10c00117 	ldw	r3,4(r2)
    1b60:	e0bfff17 	ldw	r2,-4(fp)
    1b64:	10800517 	ldw	r2,20(r2)
    1b68:	1880021e 	bne	r3,r2,1b74 <render_player_check+0x44>
		i=1;
    1b6c:	00800044 	movi	r2,1
    1b70:	e0bffe15 	stw	r2,-8(fp)
	}
	return i;
    1b74:	e0bffe17 	ldw	r2,-8(fp)
}
    1b78:	e037883a 	mov	sp,fp
    1b7c:	df000017 	ldw	fp,0(sp)
    1b80:	dec00104 	addi	sp,sp,4
    1b84:	f800283a 	ret

00001b88 <keycode_effect>:
//	if(current->x_pos==current->old_x && current->y_pos==current->old_y){
//		i=1;
//	}
//	return i;
//}
int keycode_effect(player *first,player *second,unsigned int *arr, player_projectile **bullets, int can_fire_n){
    1b88:	defff804 	addi	sp,sp,-32
    1b8c:	dfc00715 	stw	ra,28(sp)
    1b90:	df000615 	stw	fp,24(sp)
    1b94:	df000604 	addi	fp,sp,24
    1b98:	e13ffc15 	stw	r4,-16(fp)
    1b9c:	e17ffd15 	stw	r5,-12(fp)
    1ba0:	e1bffe15 	stw	r6,-8(fp)
    1ba4:	e1ffff15 	stw	r7,-4(fp)
	int i=0;
    1ba8:	e03ffa15 	stw	zero,-24(fp)
	int j=0;
    1bac:	e03ffb15 	stw	zero,-20(fp)
	for(i=0;i<4;i++){
    1bb0:	e03ffa15 	stw	zero,-24(fp)
    1bb4:	00007d06 	br	1dac <keycode_effect+0x224>
		if(arr[i]==0x04){
    1bb8:	e0bffa17 	ldw	r2,-24(fp)
    1bbc:	1085883a 	add	r2,r2,r2
    1bc0:	1085883a 	add	r2,r2,r2
    1bc4:	1007883a 	mov	r3,r2
    1bc8:	e0bffe17 	ldw	r2,-8(fp)
    1bcc:	10c5883a 	add	r2,r2,r3
    1bd0:	10800017 	ldw	r2,0(r2)
    1bd4:	10800118 	cmpnei	r2,r2,4
    1bd8:	10000b1e 	bne	r2,zero,1c08 <keycode_effect+0x80>
			j=1;
    1bdc:	00800044 	movi	r2,1
    1be0:	e0bffb15 	stw	r2,-20(fp)
			move_player(first,first->x_pos-10,first->y_pos);
    1be4:	e0bffc17 	ldw	r2,-16(fp)
    1be8:	10800017 	ldw	r2,0(r2)
    1bec:	10fffd84 	addi	r3,r2,-10
    1bf0:	e0bffc17 	ldw	r2,-16(fp)
    1bf4:	10800117 	ldw	r2,4(r2)
    1bf8:	e13ffc17 	ldw	r4,-16(fp)
    1bfc:	180b883a 	mov	r5,r3
    1c00:	100d883a 	mov	r6,r2
    1c04:	00020c00 	call	20c0 <move_player>
		}
		if(arr[i]==0x07){
    1c08:	e0bffa17 	ldw	r2,-24(fp)
    1c0c:	1085883a 	add	r2,r2,r2
    1c10:	1085883a 	add	r2,r2,r2
    1c14:	1007883a 	mov	r3,r2
    1c18:	e0bffe17 	ldw	r2,-8(fp)
    1c1c:	10c5883a 	add	r2,r2,r3
    1c20:	10800017 	ldw	r2,0(r2)
    1c24:	108001d8 	cmpnei	r2,r2,7
    1c28:	10000b1e 	bne	r2,zero,1c58 <keycode_effect+0xd0>
			j=1;
    1c2c:	00800044 	movi	r2,1
    1c30:	e0bffb15 	stw	r2,-20(fp)
			move_player(first,first->x_pos+10,first->y_pos);
    1c34:	e0bffc17 	ldw	r2,-16(fp)
    1c38:	10800017 	ldw	r2,0(r2)
    1c3c:	10c00284 	addi	r3,r2,10
    1c40:	e0bffc17 	ldw	r2,-16(fp)
    1c44:	10800117 	ldw	r2,4(r2)
    1c48:	e13ffc17 	ldw	r4,-16(fp)
    1c4c:	180b883a 	mov	r5,r3
    1c50:	100d883a 	mov	r6,r2
    1c54:	00020c00 	call	20c0 <move_player>
		}
		if(arr[i]==0x1a){
    1c58:	e0bffa17 	ldw	r2,-24(fp)
    1c5c:	1085883a 	add	r2,r2,r2
    1c60:	1085883a 	add	r2,r2,r2
    1c64:	1007883a 	mov	r3,r2
    1c68:	e0bffe17 	ldw	r2,-8(fp)
    1c6c:	10c5883a 	add	r2,r2,r3
    1c70:	10800017 	ldw	r2,0(r2)
    1c74:	10800698 	cmpnei	r2,r2,26
    1c78:	10000c1e 	bne	r2,zero,1cac <keycode_effect+0x124>
			if(can_fire_n == 0)
    1c7c:	e0800217 	ldw	r2,8(fp)
    1c80:	10000a1e 	bne	r2,zero,1cac <keycode_effect+0x124>
			{
				j=1;
    1c84:	00800044 	movi	r2,1
    1c88:	e0bffb15 	stw	r2,-20(fp)
				*bullets = fire_projectile(first, *bullets);
    1c8c:	e0bfff17 	ldw	r2,-4(fp)
    1c90:	10800017 	ldw	r2,0(r2)
    1c94:	e13ffc17 	ldw	r4,-16(fp)
    1c98:	100b883a 	mov	r5,r2
    1c9c:	0001e440 	call	1e44 <fire_projectile>
    1ca0:	1007883a 	mov	r3,r2
    1ca4:	e0bfff17 	ldw	r2,-4(fp)
    1ca8:	10c00015 	stw	r3,0(r2)
			}
		}
		if(arr[i]==0x50){
    1cac:	e0bffa17 	ldw	r2,-24(fp)
    1cb0:	1085883a 	add	r2,r2,r2
    1cb4:	1085883a 	add	r2,r2,r2
    1cb8:	1007883a 	mov	r3,r2
    1cbc:	e0bffe17 	ldw	r2,-8(fp)
    1cc0:	10c5883a 	add	r2,r2,r3
    1cc4:	10800017 	ldw	r2,0(r2)
    1cc8:	10801418 	cmpnei	r2,r2,80
    1ccc:	10000b1e 	bne	r2,zero,1cfc <keycode_effect+0x174>
			j=1;
    1cd0:	00800044 	movi	r2,1
    1cd4:	e0bffb15 	stw	r2,-20(fp)
			move_player(second,second->x_pos-10,second->y_pos);
    1cd8:	e0bffd17 	ldw	r2,-12(fp)
    1cdc:	10800017 	ldw	r2,0(r2)
    1ce0:	10fffd84 	addi	r3,r2,-10
    1ce4:	e0bffd17 	ldw	r2,-12(fp)
    1ce8:	10800117 	ldw	r2,4(r2)
    1cec:	e13ffd17 	ldw	r4,-12(fp)
    1cf0:	180b883a 	mov	r5,r3
    1cf4:	100d883a 	mov	r6,r2
    1cf8:	00020c00 	call	20c0 <move_player>
		}
		if(arr[i]==0x4f){
    1cfc:	e0bffa17 	ldw	r2,-24(fp)
    1d00:	1085883a 	add	r2,r2,r2
    1d04:	1085883a 	add	r2,r2,r2
    1d08:	1007883a 	mov	r3,r2
    1d0c:	e0bffe17 	ldw	r2,-8(fp)
    1d10:	10c5883a 	add	r2,r2,r3
    1d14:	10800017 	ldw	r2,0(r2)
    1d18:	108013d8 	cmpnei	r2,r2,79
    1d1c:	10000b1e 	bne	r2,zero,1d4c <keycode_effect+0x1c4>
			j=1;
    1d20:	00800044 	movi	r2,1
    1d24:	e0bffb15 	stw	r2,-20(fp)
			move_player(second,second->x_pos+10,second->y_pos);
    1d28:	e0bffd17 	ldw	r2,-12(fp)
    1d2c:	10800017 	ldw	r2,0(r2)
    1d30:	10c00284 	addi	r3,r2,10
    1d34:	e0bffd17 	ldw	r2,-12(fp)
    1d38:	10800117 	ldw	r2,4(r2)
    1d3c:	e13ffd17 	ldw	r4,-12(fp)
    1d40:	180b883a 	mov	r5,r3
    1d44:	100d883a 	mov	r6,r2
    1d48:	00020c00 	call	20c0 <move_player>
		}
		if(arr[i]==0x52){
    1d4c:	e0bffa17 	ldw	r2,-24(fp)
    1d50:	1085883a 	add	r2,r2,r2
    1d54:	1085883a 	add	r2,r2,r2
    1d58:	1007883a 	mov	r3,r2
    1d5c:	e0bffe17 	ldw	r2,-8(fp)
    1d60:	10c5883a 	add	r2,r2,r3
    1d64:	10800017 	ldw	r2,0(r2)
    1d68:	10801498 	cmpnei	r2,r2,82
    1d6c:	10000c1e 	bne	r2,zero,1da0 <keycode_effect+0x218>
			if(can_fire_n == 0)
    1d70:	e0800217 	ldw	r2,8(fp)
    1d74:	10000a1e 	bne	r2,zero,1da0 <keycode_effect+0x218>
			{
				j=1;
    1d78:	00800044 	movi	r2,1
    1d7c:	e0bffb15 	stw	r2,-20(fp)
				*bullets = fire_projectile(second, *bullets);
    1d80:	e0bfff17 	ldw	r2,-4(fp)
    1d84:	10800017 	ldw	r2,0(r2)
    1d88:	e13ffd17 	ldw	r4,-12(fp)
    1d8c:	100b883a 	mov	r5,r2
    1d90:	0001e440 	call	1e44 <fire_projectile>
    1d94:	1007883a 	mov	r3,r2
    1d98:	e0bfff17 	ldw	r2,-4(fp)
    1d9c:	10c00015 	stw	r3,0(r2)
//	return i;
//}
int keycode_effect(player *first,player *second,unsigned int *arr, player_projectile **bullets, int can_fire_n){
	int i=0;
	int j=0;
	for(i=0;i<4;i++){
    1da0:	e0bffa17 	ldw	r2,-24(fp)
    1da4:	10800044 	addi	r2,r2,1
    1da8:	e0bffa15 	stw	r2,-24(fp)
    1dac:	e0bffa17 	ldw	r2,-24(fp)
    1db0:	10800110 	cmplti	r2,r2,4
    1db4:	103f801e 	bne	r2,zero,1bb8 <__alt_data_end+0xfffac488>
				j=1;
				*bullets = fire_projectile(second, *bullets);
			}
		}
	}
	return j;
    1db8:	e0bffb17 	ldw	r2,-20(fp)
}
    1dbc:	e037883a 	mov	sp,fp
    1dc0:	dfc00117 	ldw	ra,4(sp)
    1dc4:	df000017 	ldw	fp,0(sp)
    1dc8:	dec00204 	addi	sp,sp,8
    1dcc:	f800283a 	ret

00001dd0 <parse_keycode>:
void parse_keycode(unsigned int *arr,unsigned int keycode1,unsigned int keycode2){
    1dd0:	defffc04 	addi	sp,sp,-16
    1dd4:	df000315 	stw	fp,12(sp)
    1dd8:	df000304 	addi	fp,sp,12
    1ddc:	e13ffd15 	stw	r4,-12(fp)
    1de0:	e17ffe15 	stw	r5,-8(fp)
    1de4:	e1bfff15 	stw	r6,-4(fp)
	arr[0]=keycode1%256;
    1de8:	e0bffe17 	ldw	r2,-8(fp)
    1dec:	10c03fcc 	andi	r3,r2,255
    1df0:	e0bffd17 	ldw	r2,-12(fp)
    1df4:	10c00015 	stw	r3,0(r2)
	arr[1]=keycode1/256;
    1df8:	e0bffd17 	ldw	r2,-12(fp)
    1dfc:	10800104 	addi	r2,r2,4
    1e00:	e0fffe17 	ldw	r3,-8(fp)
    1e04:	1806d23a 	srli	r3,r3,8
    1e08:	10c00015 	stw	r3,0(r2)
	arr[2]=keycode2%256;
    1e0c:	e0bffd17 	ldw	r2,-12(fp)
    1e10:	10800204 	addi	r2,r2,8
    1e14:	e0ffff17 	ldw	r3,-4(fp)
    1e18:	18c03fcc 	andi	r3,r3,255
    1e1c:	10c00015 	stw	r3,0(r2)
	arr[3]=keycode2/256;
    1e20:	e0bffd17 	ldw	r2,-12(fp)
    1e24:	10800304 	addi	r2,r2,12
    1e28:	e0ffff17 	ldw	r3,-4(fp)
    1e2c:	1806d23a 	srli	r3,r3,8
    1e30:	10c00015 	stw	r3,0(r2)
}
    1e34:	e037883a 	mov	sp,fp
    1e38:	df000017 	ldw	fp,0(sp)
    1e3c:	dec00104 	addi	sp,sp,4
    1e40:	f800283a 	ret

00001e44 <fire_projectile>:


player_projectile* fire_projectile(player *current, player_projectile *head)
{
    1e44:	defffb04 	addi	sp,sp,-20
    1e48:	dfc00415 	stw	ra,16(sp)
    1e4c:	df000315 	stw	fp,12(sp)
    1e50:	df000304 	addi	fp,sp,12
    1e54:	e13ffe15 	stw	r4,-8(fp)
    1e58:	e17fff15 	stw	r5,-4(fp)
	player_projectile *new=(player_projectile*)malloc(sizeof(player_projectile));
    1e5c:	01000504 	movi	r4,20
    1e60:	00035680 	call	3568 <malloc>
    1e64:	e0bffd15 	stw	r2,-12(fp)
	new->x_pos=current->x_pos + ((sizes[current->id][0])/2)-11;
    1e68:	e0bffe17 	ldw	r2,-8(fp)
    1e6c:	10c00017 	ldw	r3,0(r2)
    1e70:	e0bffe17 	ldw	r2,-8(fp)
    1e74:	11000317 	ldw	r4,12(r2)
    1e78:	00800074 	movhi	r2,1
    1e7c:	108ca204 	addi	r2,r2,12936
    1e80:	200890fa 	slli	r4,r4,3
    1e84:	1105883a 	add	r2,r2,r4
    1e88:	10800017 	ldw	r2,0(r2)
    1e8c:	1008d7fa 	srli	r4,r2,31
    1e90:	2085883a 	add	r2,r4,r2
    1e94:	1005d07a 	srai	r2,r2,1
    1e98:	1885883a 	add	r2,r3,r2
    1e9c:	10fffd44 	addi	r3,r2,-11
    1ea0:	e0bffd17 	ldw	r2,-12(fp)
    1ea4:	10c00015 	stw	r3,0(r2)
	new->y_pos=current->y_pos + 1;
    1ea8:	e0bffe17 	ldw	r2,-8(fp)
    1eac:	10800117 	ldw	r2,4(r2)
    1eb0:	10c00044 	addi	r3,r2,1
    1eb4:	e0bffd17 	ldw	r2,-12(fp)
    1eb8:	10c00115 	stw	r3,4(r2)
	new->old_x = new->x_pos;
    1ebc:	e0bffd17 	ldw	r2,-12(fp)
    1ec0:	10c00017 	ldw	r3,0(r2)
    1ec4:	e0bffd17 	ldw	r2,-12(fp)
    1ec8:	10c00215 	stw	r3,8(r2)
	new->old_y = new->y_pos;
    1ecc:	e0bffd17 	ldw	r2,-12(fp)
    1ed0:	10c00117 	ldw	r3,4(r2)
    1ed4:	e0bffd17 	ldw	r2,-12(fp)
    1ed8:	10c00315 	stw	r3,12(r2)
	new->next = head;
    1edc:	e0bffd17 	ldw	r2,-12(fp)
    1ee0:	e0ffff17 	ldw	r3,-4(fp)
    1ee4:	10c00415 	stw	r3,16(r2)
	return new;
    1ee8:	e0bffd17 	ldw	r2,-12(fp)
}
    1eec:	e037883a 	mov	sp,fp
    1ef0:	dfc00117 	ldw	ra,4(sp)
    1ef4:	df000017 	ldw	fp,0(sp)
    1ef8:	dec00204 	addi	sp,sp,8
    1efc:	f800283a 	ret

00001f00 <check_projectiles>:

player_projectile * check_projectiles(player_projectile *curr, enemy *em)
{
    1f00:	defffb04 	addi	sp,sp,-20
    1f04:	dfc00415 	stw	ra,16(sp)
    1f08:	df000315 	stw	fp,12(sp)
    1f0c:	df000304 	addi	fp,sp,12
    1f10:	e13ffe15 	stw	r4,-8(fp)
    1f14:	e17fff15 	stw	r5,-4(fp)
	if (curr == NULL)
    1f18:	e0bffe17 	ldw	r2,-8(fp)
    1f1c:	1000021e 	bne	r2,zero,1f28 <check_projectiles+0x28>
	    return NULL;
    1f20:	0005883a 	mov	r2,zero
    1f24:	00002606 	br	1fc0 <check_projectiles+0xc0>

	  if (curr->y_pos==0 || hits_enemy(curr->x_pos,curr->y_pos,em)==1) {
    1f28:	e0bffe17 	ldw	r2,-8(fp)
    1f2c:	10800117 	ldw	r2,4(r2)
    1f30:	10000a26 	beq	r2,zero,1f5c <check_projectiles+0x5c>
    1f34:	e0bffe17 	ldw	r2,-8(fp)
    1f38:	10c00017 	ldw	r3,0(r2)
    1f3c:	e0bffe17 	ldw	r2,-8(fp)
    1f40:	10800117 	ldw	r2,4(r2)
    1f44:	1809883a 	mov	r4,r3
    1f48:	100b883a 	mov	r5,r2
    1f4c:	e1bfff17 	ldw	r6,-4(fp)
    1f50:	0001fd40 	call	1fd4 <hits_enemy>
    1f54:	10800058 	cmpnei	r2,r2,1
    1f58:	1000101e 	bne	r2,zero,1f9c <check_projectiles+0x9c>
	    player_projectile *tempNext;
	    tempNext = curr->next;
    1f5c:	e0bffe17 	ldw	r2,-8(fp)
    1f60:	10800417 	ldw	r2,16(r2)
    1f64:	e0bffd15 	stw	r2,-12(fp)
	    renderer(curr->x_pos,curr->y_pos,13,1);//Render shadow
    1f68:	e0bffe17 	ldw	r2,-8(fp)
    1f6c:	10c00017 	ldw	r3,0(r2)
    1f70:	e0bffe17 	ldw	r2,-8(fp)
    1f74:	10800117 	ldw	r2,4(r2)
    1f78:	1809883a 	mov	r4,r3
    1f7c:	100b883a 	mov	r5,r2
    1f80:	01800344 	movi	r6,13
    1f84:	01c00044 	movi	r7,1
    1f88:	00018240 	call	1824 <renderer>
	    free(curr);
    1f8c:	e13ffe17 	ldw	r4,-8(fp)
    1f90:	000357c0 	call	357c <free>
	    return tempNext;
    1f94:	e0bffd17 	ldw	r2,-12(fp)
    1f98:	00000906 	br	1fc0 <check_projectiles+0xc0>
	  }
	  curr->next = check_projectiles(curr->next, em);
    1f9c:	e0bffe17 	ldw	r2,-8(fp)
    1fa0:	10800417 	ldw	r2,16(r2)
    1fa4:	1009883a 	mov	r4,r2
    1fa8:	e17fff17 	ldw	r5,-4(fp)
    1fac:	0001f000 	call	1f00 <check_projectiles>
    1fb0:	1007883a 	mov	r3,r2
    1fb4:	e0bffe17 	ldw	r2,-8(fp)
    1fb8:	10c00415 	stw	r3,16(r2)
	  return curr;
    1fbc:	e0bffe17 	ldw	r2,-8(fp)
}
    1fc0:	e037883a 	mov	sp,fp
    1fc4:	dfc00117 	ldw	ra,4(sp)
    1fc8:	df000017 	ldw	fp,0(sp)
    1fcc:	dec00204 	addi	sp,sp,8
    1fd0:	f800283a 	ret

00001fd4 <hits_enemy>:

int hits_enemy(int x, int y, enemy *em)
{
    1fd4:	defffc04 	addi	sp,sp,-16
    1fd8:	df000315 	stw	fp,12(sp)
    1fdc:	df000304 	addi	fp,sp,12
    1fe0:	e13ffd15 	stw	r4,-12(fp)
    1fe4:	e17ffe15 	stw	r5,-8(fp)
    1fe8:	e1bfff15 	stw	r6,-4(fp)
	while(em!=NULL)
    1fec:	00002d06 	br	20a4 <hits_enemy+0xd0>
	{
		if(x>(em->x_pos-23)&&x<(em->x_pos+sizes[em->id][0])&&y>(em->y_pos-32)&&y<(em->y_pos+sizes[em->id][1]))
    1ff0:	e0bfff17 	ldw	r2,-4(fp)
    1ff4:	10800017 	ldw	r2,0(r2)
    1ff8:	10fffa44 	addi	r3,r2,-23
    1ffc:	e0bffd17 	ldw	r2,-12(fp)
    2000:	1880250e 	bge	r3,r2,2098 <hits_enemy+0xc4>
    2004:	e0bfff17 	ldw	r2,-4(fp)
    2008:	10c00017 	ldw	r3,0(r2)
    200c:	e0bfff17 	ldw	r2,-4(fp)
    2010:	11000317 	ldw	r4,12(r2)
    2014:	00800074 	movhi	r2,1
    2018:	108ca204 	addi	r2,r2,12936
    201c:	200890fa 	slli	r4,r4,3
    2020:	1105883a 	add	r2,r2,r4
    2024:	10800017 	ldw	r2,0(r2)
    2028:	1885883a 	add	r2,r3,r2
    202c:	e0fffd17 	ldw	r3,-12(fp)
    2030:	1880190e 	bge	r3,r2,2098 <hits_enemy+0xc4>
    2034:	e0bfff17 	ldw	r2,-4(fp)
    2038:	10800117 	ldw	r2,4(r2)
    203c:	10fff804 	addi	r3,r2,-32
    2040:	e0bffe17 	ldw	r2,-8(fp)
    2044:	1880140e 	bge	r3,r2,2098 <hits_enemy+0xc4>
    2048:	e0bfff17 	ldw	r2,-4(fp)
    204c:	10c00117 	ldw	r3,4(r2)
    2050:	e0bfff17 	ldw	r2,-4(fp)
    2054:	11000317 	ldw	r4,12(r2)
    2058:	00800074 	movhi	r2,1
    205c:	108ca204 	addi	r2,r2,12936
    2060:	200890fa 	slli	r4,r4,3
    2064:	1105883a 	add	r2,r2,r4
    2068:	10800104 	addi	r2,r2,4
    206c:	10800017 	ldw	r2,0(r2)
    2070:	1885883a 	add	r2,r3,r2
    2074:	e0fffe17 	ldw	r3,-8(fp)
    2078:	1880070e 	bge	r3,r2,2098 <hits_enemy+0xc4>
		{
			em->health--;
    207c:	e0bfff17 	ldw	r2,-4(fp)
    2080:	10800217 	ldw	r2,8(r2)
    2084:	10ffffc4 	addi	r3,r2,-1
    2088:	e0bfff17 	ldw	r2,-4(fp)
    208c:	10c00215 	stw	r3,8(r2)
			return 1;
    2090:	00800044 	movi	r2,1
    2094:	00000606 	br	20b0 <hits_enemy+0xdc>
		}
		else
		{
			em=em->next;
    2098:	e0bfff17 	ldw	r2,-4(fp)
    209c:	10800617 	ldw	r2,24(r2)
    20a0:	e0bfff15 	stw	r2,-4(fp)
	  return curr;
}

int hits_enemy(int x, int y, enemy *em)
{
	while(em!=NULL)
    20a4:	e0bfff17 	ldw	r2,-4(fp)
    20a8:	103fd11e 	bne	r2,zero,1ff0 <__alt_data_end+0xfffac8c0>
		else
		{
			em=em->next;
		}
	}
	return 0;
    20ac:	0005883a 	mov	r2,zero
}
    20b0:	e037883a 	mov	sp,fp
    20b4:	df000017 	ldw	fp,0(sp)
    20b8:	dec00104 	addi	sp,sp,4
    20bc:	f800283a 	ret

000020c0 <move_player>:

void move_player(player *current, int x_pos, int y_pos){
    20c0:	defff904 	addi	sp,sp,-28
    20c4:	dfc00615 	stw	ra,24(sp)
    20c8:	df000515 	stw	fp,20(sp)
    20cc:	df000504 	addi	fp,sp,20
    20d0:	e13ffd15 	stw	r4,-12(fp)
    20d4:	e17ffe15 	stw	r5,-8(fp)
    20d8:	e1bfff15 	stw	r6,-4(fp)
	if(current==NULL)
    20dc:	e0bffd17 	ldw	r2,-12(fp)
    20e0:	1000041e 	bne	r2,zero,20f4 <move_player+0x34>
		{
			printf("players not instantiated");
    20e4:	01000074 	movhi	r4,1
    20e8:	210bae04 	addi	r4,r4,11960
    20ec:	0003d640 	call	3d64 <printf>
    20f0:	00003506 	br	21c8 <move_player+0x108>
		}
	else{
		int width = sizes[current->id][0];
    20f4:	e0bffd17 	ldw	r2,-12(fp)
    20f8:	10c00317 	ldw	r3,12(r2)
    20fc:	00800074 	movhi	r2,1
    2100:	108ca204 	addi	r2,r2,12936
    2104:	180690fa 	slli	r3,r3,3
    2108:	10c5883a 	add	r2,r2,r3
    210c:	10800017 	ldw	r2,0(r2)
    2110:	e0bffb15 	stw	r2,-20(fp)
		int height = sizes[current->id][1];
    2114:	e0bffd17 	ldw	r2,-12(fp)
    2118:	10c00317 	ldw	r3,12(r2)
    211c:	00800074 	movhi	r2,1
    2120:	108ca204 	addi	r2,r2,12936
    2124:	180690fa 	slli	r3,r3,3
    2128:	10c5883a 	add	r2,r2,r3
    212c:	10800104 	addi	r2,r2,4
    2130:	10800017 	ldw	r2,0(r2)
    2134:	e0bffc15 	stw	r2,-16(fp)
		current->x_pos = x_pos;
    2138:	e0bffd17 	ldw	r2,-12(fp)
    213c:	e0fffe17 	ldw	r3,-8(fp)
    2140:	10c00015 	stw	r3,0(r2)
		current->y_pos = y_pos;
    2144:	e0bffd17 	ldw	r2,-12(fp)
    2148:	e0ffff17 	ldw	r3,-4(fp)
    214c:	10c00115 	stw	r3,4(r2)
		if((x_pos + width)> x_bounds)
    2150:	e0fffe17 	ldw	r3,-8(fp)
    2154:	e0bffb17 	ldw	r2,-20(fp)
    2158:	1885883a 	add	r2,r3,r2
    215c:	1080a010 	cmplti	r2,r2,640
    2160:	1000061e 	bne	r2,zero,217c <move_player+0xbc>
			current->x_pos = x_bounds - width;
    2164:	00c09fc4 	movi	r3,639
    2168:	e0bffb17 	ldw	r2,-20(fp)
    216c:	1887c83a 	sub	r3,r3,r2
    2170:	e0bffd17 	ldw	r2,-12(fp)
    2174:	10c00015 	stw	r3,0(r2)
    2178:	00000406 	br	218c <move_player+0xcc>
		else if(x_pos < 0)
    217c:	e0bffe17 	ldw	r2,-8(fp)
    2180:	1000020e 	bge	r2,zero,218c <move_player+0xcc>
		{
			current->x_pos = 0;
    2184:	e0bffd17 	ldw	r2,-12(fp)
    2188:	10000015 	stw	zero,0(r2)
		}
		if((y_pos + height) > y_bounds)
    218c:	e0ffff17 	ldw	r3,-4(fp)
    2190:	e0bffc17 	ldw	r2,-16(fp)
    2194:	1885883a 	add	r2,r3,r2
    2198:	10807810 	cmplti	r2,r2,480
    219c:	1000061e 	bne	r2,zero,21b8 <move_player+0xf8>
			current->y_pos = y_bounds - height;
    21a0:	00c077c4 	movi	r3,479
    21a4:	e0bffc17 	ldw	r2,-16(fp)
    21a8:	1887c83a 	sub	r3,r3,r2
    21ac:	e0bffd17 	ldw	r2,-12(fp)
    21b0:	10c00115 	stw	r3,4(r2)
    21b4:	00000406 	br	21c8 <move_player+0x108>
		else if(y_pos < 0)
    21b8:	e0bfff17 	ldw	r2,-4(fp)
    21bc:	1000020e 	bge	r2,zero,21c8 <move_player+0x108>
		{
			current->y_pos = 0;
    21c0:	e0bffd17 	ldw	r2,-12(fp)
    21c4:	10000115 	stw	zero,4(r2)
		}
	}
}
    21c8:	e037883a 	mov	sp,fp
    21cc:	dfc00117 	ldw	ra,4(sp)
    21d0:	df000017 	ldw	fp,0(sp)
    21d4:	dec00204 	addi	sp,sp,8
    21d8:	f800283a 	ret

000021dc <move_enemy>:

void move_enemy(enemy *current, int x_pos, int y_pos){
    21dc:	defff904 	addi	sp,sp,-28
    21e0:	dfc00615 	stw	ra,24(sp)
    21e4:	df000515 	stw	fp,20(sp)
    21e8:	df000504 	addi	fp,sp,20
    21ec:	e13ffd15 	stw	r4,-12(fp)
    21f0:	e17ffe15 	stw	r5,-8(fp)
    21f4:	e1bfff15 	stw	r6,-4(fp)
	if(current==NULL)
    21f8:	e0bffd17 	ldw	r2,-12(fp)
    21fc:	1000041e 	bne	r2,zero,2210 <move_enemy+0x34>
		{
			printf("players not instantiated");
    2200:	01000074 	movhi	r4,1
    2204:	210bae04 	addi	r4,r4,11960
    2208:	0003d640 	call	3d64 <printf>
    220c:	00003506 	br	22e4 <move_enemy+0x108>
		}
	else{
		int width = sizes[current->id][0];
    2210:	e0bffd17 	ldw	r2,-12(fp)
    2214:	10c00317 	ldw	r3,12(r2)
    2218:	00800074 	movhi	r2,1
    221c:	108ca204 	addi	r2,r2,12936
    2220:	180690fa 	slli	r3,r3,3
    2224:	10c5883a 	add	r2,r2,r3
    2228:	10800017 	ldw	r2,0(r2)
    222c:	e0bffb15 	stw	r2,-20(fp)
		int height = sizes[current->id][1];
    2230:	e0bffd17 	ldw	r2,-12(fp)
    2234:	10c00317 	ldw	r3,12(r2)
    2238:	00800074 	movhi	r2,1
    223c:	108ca204 	addi	r2,r2,12936
    2240:	180690fa 	slli	r3,r3,3
    2244:	10c5883a 	add	r2,r2,r3
    2248:	10800104 	addi	r2,r2,4
    224c:	10800017 	ldw	r2,0(r2)
    2250:	e0bffc15 	stw	r2,-16(fp)
		current->x_pos = x_pos;
    2254:	e0bffd17 	ldw	r2,-12(fp)
    2258:	e0fffe17 	ldw	r3,-8(fp)
    225c:	10c00015 	stw	r3,0(r2)
		current->y_pos = y_pos;
    2260:	e0bffd17 	ldw	r2,-12(fp)
    2264:	e0ffff17 	ldw	r3,-4(fp)
    2268:	10c00115 	stw	r3,4(r2)
		if((x_pos + width)> x_bounds)
    226c:	e0fffe17 	ldw	r3,-8(fp)
    2270:	e0bffb17 	ldw	r2,-20(fp)
    2274:	1885883a 	add	r2,r3,r2
    2278:	1080a010 	cmplti	r2,r2,640
    227c:	1000061e 	bne	r2,zero,2298 <move_enemy+0xbc>
			current->x_pos = x_bounds - width;
    2280:	00c09fc4 	movi	r3,639
    2284:	e0bffb17 	ldw	r2,-20(fp)
    2288:	1887c83a 	sub	r3,r3,r2
    228c:	e0bffd17 	ldw	r2,-12(fp)
    2290:	10c00015 	stw	r3,0(r2)
    2294:	00000406 	br	22a8 <move_enemy+0xcc>
		else if(x_pos < 0)
    2298:	e0bffe17 	ldw	r2,-8(fp)
    229c:	1000020e 	bge	r2,zero,22a8 <move_enemy+0xcc>
		{
			current->x_pos = 0;
    22a0:	e0bffd17 	ldw	r2,-12(fp)
    22a4:	10000015 	stw	zero,0(r2)
		}
		if((y_pos + height) > y_bounds)
    22a8:	e0ffff17 	ldw	r3,-4(fp)
    22ac:	e0bffc17 	ldw	r2,-16(fp)
    22b0:	1885883a 	add	r2,r3,r2
    22b4:	10807810 	cmplti	r2,r2,480
    22b8:	1000061e 	bne	r2,zero,22d4 <move_enemy+0xf8>
			current->y_pos = y_bounds - height;
    22bc:	00c077c4 	movi	r3,479
    22c0:	e0bffc17 	ldw	r2,-16(fp)
    22c4:	1887c83a 	sub	r3,r3,r2
    22c8:	e0bffd17 	ldw	r2,-12(fp)
    22cc:	10c00115 	stw	r3,4(r2)
    22d0:	00000406 	br	22e4 <move_enemy+0x108>
		else if(y_pos < 0)
    22d4:	e0bfff17 	ldw	r2,-4(fp)
    22d8:	1000020e 	bge	r2,zero,22e4 <move_enemy+0x108>
		{
			current->y_pos = 0;
    22dc:	e0bffd17 	ldw	r2,-12(fp)
    22e0:	10000115 	stw	zero,4(r2)
		}
	}
}
    22e4:	e037883a 	mov	sp,fp
    22e8:	dfc00117 	ldw	ra,4(sp)
    22ec:	df000017 	ldw	fp,0(sp)
    22f0:	dec00204 	addi	sp,sp,8
    22f4:	f800283a 	ret

000022f8 <UsbWrite>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbWrite(alt_u16 Address, alt_u16 Data)
{
    22f8:	defffc04 	addi	sp,sp,-16
    22fc:	dfc00315 	stw	ra,12(sp)
    2300:	df000215 	stw	fp,8(sp)
    2304:	df000204 	addi	fp,sp,8
    2308:	2007883a 	mov	r3,r4
    230c:	2805883a 	mov	r2,r5
    2310:	e0fffe0d 	sth	r3,-8(fp)
    2314:	e0bfff0d 	sth	r2,-4(fp)
	IO_write(HPI_ADDR_PORT, Address);
    2318:	e0bffe0b 	ldhu	r2,-8(fp)
    231c:	01000084 	movi	r4,2
    2320:	100b883a 	mov	r5,r2
    2324:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA_PORT, Data);
    2328:	e0bfff0b 	ldhu	r2,-4(fp)
    232c:	0009883a 	mov	r4,zero
    2330:	100b883a 	mov	r5,r2
    2334:	00002c80 	call	2c8 <IO_write>
}
    2338:	e037883a 	mov	sp,fp
    233c:	dfc00117 	ldw	ra,4(sp)
    2340:	df000017 	ldw	fp,0(sp)
    2344:	dec00204 	addi	sp,sp,8
    2348:	f800283a 	ret

0000234c <UsbRead>:
 *
 * @note     None
 *
 ******************************************************************************/
alt_u16 UsbRead(alt_u16 Address)
{
    234c:	defffd04 	addi	sp,sp,-12
    2350:	dfc00215 	stw	ra,8(sp)
    2354:	df000115 	stw	fp,4(sp)
    2358:	df000104 	addi	fp,sp,4
    235c:	2005883a 	mov	r2,r4
    2360:	e0bfff0d 	sth	r2,-4(fp)
	IO_write(HPI_ADDR_PORT, Address);
    2364:	e0bfff0b 	ldhu	r2,-4(fp)
    2368:	01000084 	movi	r4,2
    236c:	100b883a 	mov	r5,r2
    2370:	00002c80 	call	2c8 <IO_write>
	return IO_read(HPI_DATA_PORT);
    2374:	0009883a 	mov	r4,zero
    2378:	00003300 	call	330 <IO_read>
}
    237c:	e037883a 	mov	sp,fp
    2380:	dfc00117 	ldw	ra,4(sp)
    2384:	df000017 	ldw	fp,0(sp)
    2388:	dec00204 	addi	sp,sp,8
    238c:	f800283a 	ret

00002390 <UsbSoftReset>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbSoftReset()
{
    2390:	defffe04 	addi	sp,sp,-8
    2394:	dfc00115 	stw	ra,4(sp)
    2398:	df000015 	stw	fp,0(sp)
    239c:	d839883a 	mov	fp,sp
	//XIo_Out16(USB_MAILBOX, COMM_RESET);
	IO_write(HPI_MAILBOX,COMM_RESET); //COMM_JUMP2CODE
    23a0:	01000044 	movi	r4,1
    23a4:	017e9414 	movui	r5,64080
    23a8:	00002c80 	call	2c8 <IO_write>
	usleep(100000);
    23ac:	010000b4 	movhi	r4,2
    23b0:	2121a804 	addi	r4,r4,-31072
    23b4:	00107f40 	call	107f4 <usleep>
	printf("[USB INIT]:reset finished!\n");
    23b8:	01000074 	movhi	r4,1
    23bc:	210bc504 	addi	r4,r4,12052
    23c0:	0003e580 	call	3e58 <puts>

	usleep(500000);
    23c4:	01000234 	movhi	r4,8
    23c8:	21284804 	addi	r4,r4,-24288
    23cc:	00107f40 	call	107f4 <usleep>
	printf("[USB INIT]:Clear up the interrupt\r\n");
    23d0:	01000074 	movhi	r4,1
    23d4:	210bcc04 	addi	r4,r4,12080
    23d8:	0003e580 	call	3e58 <puts>
	IO_read(HPI_MAILBOX);
    23dc:	01000044 	movi	r4,1
    23e0:	00003300 	call	330 <IO_read>
	IO_read(HPI_STATUS);
    23e4:	010000c4 	movi	r4,3
    23e8:	00003300 	call	330 <IO_read>

	// Had to add the write due to a bug in BIOS where they overwrite
	// the mailbox after initialization with garbage.  The read clears
	// any pending interrupts.
	UsbRead (HPI_SIE1_MSG_ADR);
    23ec:	01005104 	movi	r4,324
    23f0:	000234c0 	call	234c <UsbRead>
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
    23f4:	01005104 	movi	r4,324
    23f8:	000b883a 	mov	r5,zero
    23fc:	00022f80 	call	22f8 <UsbWrite>
	UsbRead (HPI_SIE2_MSG_ADR);
    2400:	01005204 	movi	r4,328
    2404:	000234c0 	call	234c <UsbRead>
	UsbWrite (HPI_SIE2_MSG_ADR, 0);
    2408:	01005204 	movi	r4,328
    240c:	000b883a 	mov	r5,zero
    2410:	00022f80 	call	22f8 <UsbWrite>


	UsbWrite (HOST1_STAT_REG, 0xFFFF);
    2414:	01302414 	movui	r4,49296
    2418:	017fffd4 	movui	r5,65535
    241c:	00022f80 	call	22f8 <UsbWrite>
	UsbWrite (HOST2_STAT_REG, 0xFFFF);
    2420:	01302c14 	movui	r4,49328
    2424:	017fffd4 	movui	r5,65535
    2428:	00022f80 	call	22f8 <UsbWrite>
}
    242c:	e037883a 	mov	sp,fp
    2430:	dfc00117 	ldw	ra,4(sp)
    2434:	df000017 	ldw	fp,0(sp)
    2438:	dec00204 	addi	sp,sp,8
    243c:	f800283a 	ret

00002440 <UsbSetAddress>:


void UsbSetAddress()
{
    2440:	defffe04 	addi	sp,sp,-8
    2444:	dfc00115 	stw	ra,4(sp)
    2448:	df000015 	stw	fp,0(sp)
    244c:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    2450:	01000084 	movi	r4,2
    2454:	01414004 	movi	r5,1280
    2458:	00002c80 	call	2c8 <IO_write>
	// TD #1: 6 writes
	IO_write(HPI_DATA,0x050C);
    245c:	0009883a 	mov	r4,zero
    2460:	01414304 	movi	r5,1292
    2464:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    2468:	0009883a 	mov	r4,zero
    246c:	01400204 	movi	r5,8
    2470:	00002c80 	call	2c8 <IO_write>
	// TASK: Complete with 4 more IOWR functions
	IO_write(HPI_DATA,0x00D0);
    2474:	0009883a 	mov	r4,zero
    2478:	01403404 	movi	r5,208
    247c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);
    2480:	0009883a 	mov	r4,zero
    2484:	01400044 	movi	r5,1
    2488:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    248c:	0009883a 	mov	r4,zero
    2490:	014004c4 	movi	r5,19
    2494:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0514);
    2498:	0009883a 	mov	r4,zero
    249c:	01414504 	movi	r5,1300
    24a0:	00002c80 	call	2c8 <IO_write>
	// TD #2: 4 writes
	// TASK: Complete with 4 IOWR functions
	IO_write(HPI_DATA,0x0500);
    24a4:	0009883a 	mov	r4,zero
    24a8:	01414004 	movi	r5,1280
    24ac:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0002);
    24b0:	0009883a 	mov	r4,zero
    24b4:	01400084 	movi	r5,2
    24b8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    24bc:	0009883a 	mov	r4,zero
    24c0:	000b883a 	mov	r5,zero
    24c4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    24c8:	0009883a 	mov	r4,zero
    24cc:	000b883a 	mov	r5,zero
    24d0:	00002c80 	call	2c8 <IO_write>
	// TD #3: 6 writes
	// TASK: Complete with 6 IOWR functions
	IO_write(HPI_DATA,0x0000); //
    24d4:	0009883a 	mov	r4,zero
    24d8:	000b883a 	mov	r5,zero
    24dc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//
    24e0:	0009883a 	mov	r4,zero
    24e4:	000b883a 	mov	r5,zero
    24e8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0090);//
    24ec:	0009883a 	mov	r4,zero
    24f0:	01402404 	movi	r5,144
    24f4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);
    24f8:	0009883a 	mov	r4,zero
    24fc:	01401044 	movi	r5,65
    2500:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    2504:	0009883a 	mov	r4,zero
    2508:	014004c4 	movi	r5,19
    250c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    2510:	0009883a 	mov	r4,zero
    2514:	000b883a 	mov	r5,zero
    2518:	00002c80 	call	2c8 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    251c:	01006c04 	movi	r4,432
    2520:	01414004 	movi	r5,1280
    2524:	00022f80 	call	22f8 <UsbWrite>
}
    2528:	e037883a 	mov	sp,fp
    252c:	dfc00117 	ldw	ra,4(sp)
    2530:	df000017 	ldw	fp,0(sp)
    2534:	dec00204 	addi	sp,sp,8
    2538:	f800283a 	ret

0000253c <UsbGetDeviceDesc1>:


void UsbGetDeviceDesc1()
{
    253c:	defffe04 	addi	sp,sp,-8
    2540:	dfc00115 	stw	ra,4(sp)
    2544:	df000015 	stw	fp,0(sp)
    2548:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    254c:	01000084 	movi	r4,2
    2550:	01414004 	movi	r5,1280
    2554:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x050C);
    2558:	0009883a 	mov	r4,zero
    255c:	01414304 	movi	r5,1292
    2560:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    2564:	0009883a 	mov	r4,zero
    2568:	01400204 	movi	r5,8
    256c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    2570:	0009883a 	mov	r4,zero
    2574:	0140b404 	movi	r5,720
    2578:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);
    257c:	0009883a 	mov	r4,zero
    2580:	01400044 	movi	r5,1
    2584:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    2588:	0009883a 	mov	r4,zero
    258c:	014004c4 	movi	r5,19
    2590:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0514);
    2594:	0009883a 	mov	r4,zero
    2598:	01414504 	movi	r5,1300
    259c:	00002c80 	call	2c8 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
    25a0:	0009883a 	mov	r4,zero
    25a4:	0141a004 	movi	r5,1664
    25a8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0100); //device 0x01
    25ac:	0009883a 	mov	r4,zero
    25b0:	01404004 	movi	r5,256
    25b4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    25b8:	0009883a 	mov	r4,zero
    25bc:	000b883a 	mov	r5,zero
    25c0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);
    25c4:	0009883a 	mov	r4,zero
    25c8:	01400204 	movi	r5,8
    25cc:	00002c80 	call	2c8 <IO_write>

	//data phase IN
	IO_write(HPI_DATA,0x052C); //
    25d0:	0009883a 	mov	r4,zero
    25d4:	01414b04 	movi	r5,1324
    25d8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//
    25dc:	0009883a 	mov	r4,zero
    25e0:	01400204 	movi	r5,8
    25e4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//
    25e8:	0009883a 	mov	r4,zero
    25ec:	0140a404 	movi	r5,656
    25f0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);
    25f4:	0009883a 	mov	r4,zero
    25f8:	01401044 	movi	r5,65
    25fc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    2600:	0009883a 	mov	r4,zero
    2604:	014004c4 	movi	r5,19
    2608:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0520);
    260c:	0009883a 	mov	r4,zero
    2610:	01414804 	movi	r5,1312
    2614:	00002c80 	call	2c8 <IO_write>

	//    //status phase
	IO_write(HPI_DATA,0x0000); //don't care
    2618:	0009883a 	mov	r4,zero
    261c:	000b883a 	mov	r5,zero
    2620:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
    2624:	0009883a 	mov	r4,zero
    2628:	000b883a 	mov	r5,zero
    262c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0210);//device address
    2630:	0009883a 	mov	r4,zero
    2634:	01408404 	movi	r5,528
    2638:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);
    263c:	0009883a 	mov	r4,zero
    2640:	01401044 	movi	r5,65
    2644:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    2648:	0009883a 	mov	r4,zero
    264c:	014004c4 	movi	r5,19
    2650:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    2654:	0009883a 	mov	r4,zero
    2658:	000b883a 	mov	r5,zero
    265c:	00002c80 	call	2c8 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    2660:	01006c04 	movi	r4,432
    2664:	01414004 	movi	r5,1280
    2668:	00022f80 	call	22f8 <UsbWrite>
}
    266c:	e037883a 	mov	sp,fp
    2670:	dfc00117 	ldw	ra,4(sp)
    2674:	df000017 	ldw	fp,0(sp)
    2678:	dec00204 	addi	sp,sp,8
    267c:	f800283a 	ret

00002680 <UsbGetDeviceDesc2>:

void UsbGetDeviceDesc2()
{
    2680:	defffe04 	addi	sp,sp,-8
    2684:	dfc00115 	stw	ra,4(sp)
    2688:	df000015 	stw	fp,0(sp)
    268c:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    2690:	01000084 	movi	r4,2
    2694:	01414004 	movi	r5,1280
    2698:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x050C);
    269c:	0009883a 	mov	r4,zero
    26a0:	01414304 	movi	r5,1292
    26a4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    26a8:	0009883a 	mov	r4,zero
    26ac:	01400204 	movi	r5,8
    26b0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    26b4:	0009883a 	mov	r4,zero
    26b8:	0140b404 	movi	r5,720
    26bc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);
    26c0:	0009883a 	mov	r4,zero
    26c4:	01400044 	movi	r5,1
    26c8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    26cc:	0009883a 	mov	r4,zero
    26d0:	014004c4 	movi	r5,19
    26d4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0514);
    26d8:	0009883a 	mov	r4,zero
    26dc:	01414504 	movi	r5,1300
    26e0:	00002c80 	call	2c8 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
    26e4:	0009883a 	mov	r4,zero
    26e8:	0141a004 	movi	r5,1664
    26ec:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0100);//e //device 0x01
    26f0:	0009883a 	mov	r4,zero
    26f4:	01404004 	movi	r5,256
    26f8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    26fc:	0009883a 	mov	r4,zero
    2700:	000b883a 	mov	r5,zero
    2704:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0012);//2
    2708:	0009883a 	mov	r4,zero
    270c:	01400484 	movi	r5,18
    2710:	00002c80 	call	2c8 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
    2714:	0009883a 	mov	r4,zero
    2718:	01415104 	movi	r5,1348
    271c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    2720:	0009883a 	mov	r4,zero
    2724:	01400204 	movi	r5,8
    2728:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    272c:	0009883a 	mov	r4,zero
    2730:	0140a404 	movi	r5,656
    2734:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    2738:	0009883a 	mov	r4,zero
    273c:	01401044 	movi	r5,65
    2740:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    2744:	0009883a 	mov	r4,zero
    2748:	014004c4 	movi	r5,19
    274c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    2750:	0009883a 	mov	r4,zero
    2754:	01414804 	movi	r5,1312
    2758:	00002c80 	call	2c8 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
    275c:	0009883a 	mov	r4,zero
    2760:	01415304 	movi	r5,1356
    2764:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
    2768:	0009883a 	mov	r4,zero
    276c:	01400204 	movi	r5,8
    2770:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    2774:	0009883a 	mov	r4,zero
    2778:	0140a404 	movi	r5,656
    277c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);//6
    2780:	0009883a 	mov	r4,zero
    2784:	01400044 	movi	r5,1
    2788:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    278c:	0009883a 	mov	r4,zero
    2790:	014004c4 	movi	r5,19
    2794:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
    2798:	0009883a 	mov	r4,zero
    279c:	01414b04 	movi	r5,1324
    27a0:	00002c80 	call	2c8 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0554); //c
    27a4:	0009883a 	mov	r4,zero
    27a8:	01415504 	movi	r5,1364
    27ac:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0002);//e
    27b0:	0009883a 	mov	r4,zero
    27b4:	01400084 	movi	r5,2
    27b8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
    27bc:	0009883a 	mov	r4,zero
    27c0:	0140a404 	movi	r5,656
    27c4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    27c8:	0009883a 	mov	r4,zero
    27cc:	01401044 	movi	r5,65
    27d0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    27d4:	0009883a 	mov	r4,zero
    27d8:	014004c4 	movi	r5,19
    27dc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
    27e0:	0009883a 	mov	r4,zero
    27e4:	01414e04 	movi	r5,1336
    27e8:	00002c80 	call	2c8 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //538
    27ec:	0009883a 	mov	r4,zero
    27f0:	000b883a 	mov	r5,zero
    27f4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
    27f8:	0009883a 	mov	r4,zero
    27fc:	000b883a 	mov	r5,zero
    2800:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0210);//c
    2804:	0009883a 	mov	r4,zero
    2808:	01408404 	movi	r5,528
    280c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//e
    2810:	0009883a 	mov	r4,zero
    2814:	01401044 	movi	r5,65
    2818:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
    281c:	0009883a 	mov	r4,zero
    2820:	014004c4 	movi	r5,19
    2824:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
    2828:	0009883a 	mov	r4,zero
    282c:	000b883a 	mov	r5,zero
    2830:	00002c80 	call	2c8 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    2834:	01006c04 	movi	r4,432
    2838:	01414004 	movi	r5,1280
    283c:	00022f80 	call	22f8 <UsbWrite>
}
    2840:	e037883a 	mov	sp,fp
    2844:	dfc00117 	ldw	ra,4(sp)
    2848:	df000017 	ldw	fp,0(sp)
    284c:	dec00204 	addi	sp,sp,8
    2850:	f800283a 	ret

00002854 <UsbGetConfigDesc1>:


void UsbGetConfigDesc1()
{
    2854:	defffe04 	addi	sp,sp,-8
    2858:	dfc00115 	stw	ra,4(sp)
    285c:	df000015 	stw	fp,0(sp)
    2860:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    2864:	01000084 	movi	r4,2
    2868:	01414004 	movi	r5,1280
    286c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x050C);
    2870:	0009883a 	mov	r4,zero
    2874:	01414304 	movi	r5,1292
    2878:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    287c:	0009883a 	mov	r4,zero
    2880:	01400204 	movi	r5,8
    2884:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    2888:	0009883a 	mov	r4,zero
    288c:	0140b404 	movi	r5,720
    2890:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);
    2894:	0009883a 	mov	r4,zero
    2898:	01400044 	movi	r5,1
    289c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    28a0:	0009883a 	mov	r4,zero
    28a4:	014004c4 	movi	r5,19
    28a8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0514);
    28ac:	0009883a 	mov	r4,zero
    28b0:	01414504 	movi	r5,1300
    28b4:	00002c80 	call	2c8 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
    28b8:	0009883a 	mov	r4,zero
    28bc:	0141a004 	movi	r5,1664
    28c0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
    28c4:	0009883a 	mov	r4,zero
    28c8:	01408004 	movi	r5,512
    28cc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    28d0:	0009883a 	mov	r4,zero
    28d4:	000b883a 	mov	r5,zero
    28d8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0009);//2
    28dc:	0009883a 	mov	r4,zero
    28e0:	01400244 	movi	r5,9
    28e4:	00002c80 	call	2c8 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
    28e8:	0009883a 	mov	r4,zero
    28ec:	01415104 	movi	r5,1348
    28f0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    28f4:	0009883a 	mov	r4,zero
    28f8:	01400204 	movi	r5,8
    28fc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    2900:	0009883a 	mov	r4,zero
    2904:	0140a404 	movi	r5,656
    2908:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    290c:	0009883a 	mov	r4,zero
    2910:	01401044 	movi	r5,65
    2914:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    2918:	0009883a 	mov	r4,zero
    291c:	014004c4 	movi	r5,19
    2920:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    2924:	0009883a 	mov	r4,zero
    2928:	01414804 	movi	r5,1312
    292c:	00002c80 	call	2c8 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
    2930:	0009883a 	mov	r4,zero
    2934:	01415304 	movi	r5,1356
    2938:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);//2
    293c:	0009883a 	mov	r4,zero
    2940:	01400044 	movi	r5,1
    2944:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    2948:	0009883a 	mov	r4,zero
    294c:	0140a404 	movi	r5,656
    2950:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
    2954:	0009883a 	mov	r4,zero
    2958:	01400044 	movi	r5,1
    295c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    2960:	0009883a 	mov	r4,zero
    2964:	014004c4 	movi	r5,19
    2968:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
    296c:	0009883a 	mov	r4,zero
    2970:	01414b04 	movi	r5,1324
    2974:	00002c80 	call	2c8 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
    2978:	0009883a 	mov	r4,zero
    297c:	000b883a 	mov	r5,zero
    2980:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
    2984:	0009883a 	mov	r4,zero
    2988:	000b883a 	mov	r5,zero
    298c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
    2990:	0009883a 	mov	r4,zero
    2994:	01408404 	movi	r5,528
    2998:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    299c:	0009883a 	mov	r4,zero
    29a0:	01401044 	movi	r5,65
    29a4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    29a8:	0009883a 	mov	r4,zero
    29ac:	014004c4 	movi	r5,19
    29b0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
    29b4:	0009883a 	mov	r4,zero
    29b8:	000b883a 	mov	r5,zero
    29bc:	00002c80 	call	2c8 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    29c0:	01006c04 	movi	r4,432
    29c4:	01414004 	movi	r5,1280
    29c8:	00022f80 	call	22f8 <UsbWrite>
}
    29cc:	e037883a 	mov	sp,fp
    29d0:	dfc00117 	ldw	ra,4(sp)
    29d4:	df000017 	ldw	fp,0(sp)
    29d8:	dec00204 	addi	sp,sp,8
    29dc:	f800283a 	ret

000029e0 <UsbGetConfigDesc2>:


void UsbGetConfigDesc2()
{
    29e0:	defffe04 	addi	sp,sp,-8
    29e4:	dfc00115 	stw	ra,4(sp)
    29e8:	df000015 	stw	fp,0(sp)
    29ec:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    29f0:	01000084 	movi	r4,2
    29f4:	01414004 	movi	r5,1280
    29f8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x050C);
    29fc:	0009883a 	mov	r4,zero
    2a00:	01414304 	movi	r5,1292
    2a04:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    2a08:	0009883a 	mov	r4,zero
    2a0c:	01400204 	movi	r5,8
    2a10:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    2a14:	0009883a 	mov	r4,zero
    2a18:	0140b404 	movi	r5,720
    2a1c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);
    2a20:	0009883a 	mov	r4,zero
    2a24:	01400044 	movi	r5,1
    2a28:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    2a2c:	0009883a 	mov	r4,zero
    2a30:	014004c4 	movi	r5,19
    2a34:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0514);
    2a38:	0009883a 	mov	r4,zero
    2a3c:	01414504 	movi	r5,1300
    2a40:	00002c80 	call	2c8 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
    2a44:	0009883a 	mov	r4,zero
    2a48:	0141a004 	movi	r5,1664
    2a4c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
    2a50:	0009883a 	mov	r4,zero
    2a54:	01408004 	movi	r5,512
    2a58:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    2a5c:	0009883a 	mov	r4,zero
    2a60:	000b883a 	mov	r5,zero
    2a64:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x00FF);//2
    2a68:	0009883a 	mov	r4,zero
    2a6c:	01403fc4 	movi	r5,255
    2a70:	00002c80 	call	2c8 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x055c); //514
    2a74:	0009883a 	mov	r4,zero
    2a78:	01415704 	movi	r5,1372
    2a7c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    2a80:	0009883a 	mov	r4,zero
    2a84:	01400204 	movi	r5,8
    2a88:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    2a8c:	0009883a 	mov	r4,zero
    2a90:	0140a404 	movi	r5,656
    2a94:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    2a98:	0009883a 	mov	r4,zero
    2a9c:	01401044 	movi	r5,65
    2aa0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    2aa4:	0009883a 	mov	r4,zero
    2aa8:	014004c4 	movi	r5,19
    2aac:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    2ab0:	0009883a 	mov	r4,zero
    2ab4:	01414804 	movi	r5,1312
    2ab8:	00002c80 	call	2c8 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0564); //520
    2abc:	0009883a 	mov	r4,zero
    2ac0:	01415904 	movi	r5,1380
    2ac4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
    2ac8:	0009883a 	mov	r4,zero
    2acc:	01400204 	movi	r5,8
    2ad0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    2ad4:	0009883a 	mov	r4,zero
    2ad8:	0140a404 	movi	r5,656
    2adc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
    2ae0:	0009883a 	mov	r4,zero
    2ae4:	01400044 	movi	r5,1
    2ae8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    2aec:	0009883a 	mov	r4,zero
    2af0:	014004c4 	movi	r5,19
    2af4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
    2af8:	0009883a 	mov	r4,zero
    2afc:	01414b04 	movi	r5,1324
    2b00:	00002c80 	call	2c8 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x056c); //52c
    2b04:	0009883a 	mov	r4,zero
    2b08:	01415b04 	movi	r5,1388
    2b0c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
    2b10:	0009883a 	mov	r4,zero
    2b14:	01400204 	movi	r5,8
    2b18:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
    2b1c:	0009883a 	mov	r4,zero
    2b20:	0140a404 	movi	r5,656
    2b24:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    2b28:	0009883a 	mov	r4,zero
    2b2c:	01401044 	movi	r5,65
    2b30:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    2b34:	0009883a 	mov	r4,zero
    2b38:	014004c4 	movi	r5,19
    2b3c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
    2b40:	0009883a 	mov	r4,zero
    2b44:	01414e04 	movi	r5,1336
    2b48:	00002c80 	call	2c8 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0574); //538
    2b4c:	0009883a 	mov	r4,zero
    2b50:	01415d04 	movi	r5,1396
    2b54:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
    2b58:	0009883a 	mov	r4,zero
    2b5c:	01400204 	movi	r5,8
    2b60:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
    2b64:	0009883a 	mov	r4,zero
    2b68:	0140a404 	movi	r5,656
    2b6c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
    2b70:	0009883a 	mov	r4,zero
    2b74:	01400044 	movi	r5,1
    2b78:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
    2b7c:	0009883a 	mov	r4,zero
    2b80:	014004c4 	movi	r5,19
    2b84:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
    2b88:	0009883a 	mov	r4,zero
    2b8c:	01415104 	movi	r5,1348
    2b90:	00002c80 	call	2c8 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x057c); //544
    2b94:	0009883a 	mov	r4,zero
    2b98:	01415f04 	movi	r5,1404
    2b9c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0002);//6
    2ba0:	0009883a 	mov	r4,zero
    2ba4:	01400084 	movi	r5,2
    2ba8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    2bac:	0009883a 	mov	r4,zero
    2bb0:	0140a404 	movi	r5,656
    2bb4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
    2bb8:	0009883a 	mov	r4,zero
    2bbc:	01401044 	movi	r5,65
    2bc0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    2bc4:	0009883a 	mov	r4,zero
    2bc8:	014004c4 	movi	r5,19
    2bcc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
    2bd0:	0009883a 	mov	r4,zero
    2bd4:	01415404 	movi	r5,1360
    2bd8:	00002c80 	call	2c8 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //550
    2bdc:	0009883a 	mov	r4,zero
    2be0:	000b883a 	mov	r5,zero
    2be4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
    2be8:	0009883a 	mov	r4,zero
    2bec:	000b883a 	mov	r5,zero
    2bf0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0210);//4
    2bf4:	0009883a 	mov	r4,zero
    2bf8:	01408404 	movi	r5,528
    2bfc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//6
    2c00:	0009883a 	mov	r4,zero
    2c04:	01401044 	movi	r5,65
    2c08:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    2c0c:	0009883a 	mov	r4,zero
    2c10:	014004c4 	movi	r5,19
    2c14:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
    2c18:	0009883a 	mov	r4,zero
    2c1c:	000b883a 	mov	r5,zero
    2c20:	00002c80 	call	2c8 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    2c24:	01006c04 	movi	r4,432
    2c28:	01414004 	movi	r5,1280
    2c2c:	00022f80 	call	22f8 <UsbWrite>
}
    2c30:	e037883a 	mov	sp,fp
    2c34:	dfc00117 	ldw	ra,4(sp)
    2c38:	df000017 	ldw	fp,0(sp)
    2c3c:	dec00204 	addi	sp,sp,8
    2c40:	f800283a 	ret

00002c44 <UsbSetConfig>:

void UsbSetConfig()
{
    2c44:	defffe04 	addi	sp,sp,-8
    2c48:	dfc00115 	stw	ra,4(sp)
    2c4c:	df000015 	stw	fp,0(sp)
    2c50:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    2c54:	01000084 	movi	r4,2
    2c58:	01414004 	movi	r5,1280
    2c5c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x050C);
    2c60:	0009883a 	mov	r4,zero
    2c64:	01414304 	movi	r5,1292
    2c68:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    2c6c:	0009883a 	mov	r4,zero
    2c70:	01400204 	movi	r5,8
    2c74:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
    2c78:	0009883a 	mov	r4,zero
    2c7c:	0140b404 	movi	r5,720
    2c80:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);
    2c84:	0009883a 	mov	r4,zero
    2c88:	01400044 	movi	r5,1
    2c8c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    2c90:	0009883a 	mov	r4,zero
    2c94:	014004c4 	movi	r5,19
    2c98:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0514);
    2c9c:	0009883a 	mov	r4,zero
    2ca0:	01414504 	movi	r5,1300
    2ca4:	00002c80 	call	2c8 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0900);
    2ca8:	0009883a 	mov	r4,zero
    2cac:	01424004 	movi	r5,2304
    2cb0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);//device address
    2cb4:	0009883a 	mov	r4,zero
    2cb8:	01400044 	movi	r5,1
    2cbc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    2cc0:	0009883a 	mov	r4,zero
    2cc4:	000b883a 	mov	r5,zero
    2cc8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    2ccc:	0009883a 	mov	r4,zero
    2cd0:	000b883a 	mov	r5,zero
    2cd4:	00002c80 	call	2c8 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
    2cd8:	0009883a 	mov	r4,zero
    2cdc:	000b883a 	mov	r5,zero
    2ce0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
    2ce4:	0009883a 	mov	r4,zero
    2ce8:	000b883a 	mov	r5,zero
    2cec:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
    2cf0:	0009883a 	mov	r4,zero
    2cf4:	0140a404 	movi	r5,656
    2cf8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
    2cfc:	0009883a 	mov	r4,zero
    2d00:	01401044 	movi	r5,65
    2d04:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    2d08:	0009883a 	mov	r4,zero
    2d0c:	014004c4 	movi	r5,19
    2d10:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    2d14:	0009883a 	mov	r4,zero
    2d18:	000b883a 	mov	r5,zero
    2d1c:	00002c80 	call	2c8 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    2d20:	01006c04 	movi	r4,432
    2d24:	01414004 	movi	r5,1280
    2d28:	00022f80 	call	22f8 <UsbWrite>

}
    2d2c:	e037883a 	mov	sp,fp
    2d30:	dfc00117 	ldw	ra,4(sp)
    2d34:	df000017 	ldw	fp,0(sp)
    2d38:	dec00204 	addi	sp,sp,8
    2d3c:	f800283a 	ret

00002d40 <UsbClassRequest>:

void UsbClassRequest()
{
    2d40:	defffe04 	addi	sp,sp,-8
    2d44:	dfc00115 	stw	ra,4(sp)
    2d48:	df000015 	stw	fp,0(sp)
    2d4c:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    2d50:	01000084 	movi	r4,2
    2d54:	01414004 	movi	r5,1280
    2d58:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x050C);
    2d5c:	0009883a 	mov	r4,zero
    2d60:	01414304 	movi	r5,1292
    2d64:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    2d68:	0009883a 	mov	r4,zero
    2d6c:	01400204 	movi	r5,8
    2d70:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
    2d74:	0009883a 	mov	r4,zero
    2d78:	0140b404 	movi	r5,720
    2d7c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);
    2d80:	0009883a 	mov	r4,zero
    2d84:	01400044 	movi	r5,1
    2d88:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    2d8c:	0009883a 	mov	r4,zero
    2d90:	014004c4 	movi	r5,19
    2d94:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0514);
    2d98:	0009883a 	mov	r4,zero
    2d9c:	01414504 	movi	r5,1300
    2da0:	00002c80 	call	2c8 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0A21);
    2da4:	0009883a 	mov	r4,zero
    2da8:	01428844 	movi	r5,2593
    2dac:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//device address
    2db0:	0009883a 	mov	r4,zero
    2db4:	000b883a 	mov	r5,zero
    2db8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    2dbc:	0009883a 	mov	r4,zero
    2dc0:	000b883a 	mov	r5,zero
    2dc4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    2dc8:	0009883a 	mov	r4,zero
    2dcc:	000b883a 	mov	r5,zero
    2dd0:	00002c80 	call	2c8 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
    2dd4:	0009883a 	mov	r4,zero
    2dd8:	000b883a 	mov	r5,zero
    2ddc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number /data length
    2de0:	0009883a 	mov	r4,zero
    2de4:	000b883a 	mov	r5,zero
    2de8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
    2dec:	0009883a 	mov	r4,zero
    2df0:	0140a404 	movi	r5,656
    2df4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
    2df8:	0009883a 	mov	r4,zero
    2dfc:	01401044 	movi	r5,65
    2e00:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    2e04:	0009883a 	mov	r4,zero
    2e08:	014004c4 	movi	r5,19
    2e0c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    2e10:	0009883a 	mov	r4,zero
    2e14:	000b883a 	mov	r5,zero
    2e18:	00002c80 	call	2c8 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    2e1c:	01006c04 	movi	r4,432
    2e20:	01414004 	movi	r5,1280
    2e24:	00022f80 	call	22f8 <UsbWrite>
}
    2e28:	e037883a 	mov	sp,fp
    2e2c:	dfc00117 	ldw	ra,4(sp)
    2e30:	df000017 	ldw	fp,0(sp)
    2e34:	dec00204 	addi	sp,sp,8
    2e38:	f800283a 	ret

00002e3c <UsbGetHidDesc>:


void UsbGetHidDesc()
{
    2e3c:	defffe04 	addi	sp,sp,-8
    2e40:	dfc00115 	stw	ra,4(sp)
    2e44:	df000015 	stw	fp,0(sp)
    2e48:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    2e4c:	01000084 	movi	r4,2
    2e50:	01414004 	movi	r5,1280
    2e54:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x050C);
    2e58:	0009883a 	mov	r4,zero
    2e5c:	01414304 	movi	r5,1292
    2e60:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    2e64:	0009883a 	mov	r4,zero
    2e68:	01400204 	movi	r5,8
    2e6c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
    2e70:	0009883a 	mov	r4,zero
    2e74:	0140b404 	movi	r5,720
    2e78:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);
    2e7c:	0009883a 	mov	r4,zero
    2e80:	01400044 	movi	r5,1
    2e84:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    2e88:	0009883a 	mov	r4,zero
    2e8c:	014004c4 	movi	r5,19
    2e90:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0514);
    2e94:	0009883a 	mov	r4,zero
    2e98:	01414504 	movi	r5,1300
    2e9c:	00002c80 	call	2c8 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
    2ea0:	0009883a 	mov	r4,zero
    2ea4:	0141a044 	movi	r5,1665
    2ea8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x2100);//e //HID 0x21
    2eac:	0009883a 	mov	r4,zero
    2eb0:	01484004 	movi	r5,8448
    2eb4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    2eb8:	0009883a 	mov	r4,zero
    2ebc:	000b883a 	mov	r5,zero
    2ec0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
    2ec4:	0009883a 	mov	r4,zero
    2ec8:	01401ec4 	movi	r5,123
    2ecc:	00002c80 	call	2c8 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
    2ed0:	0009883a 	mov	r4,zero
    2ed4:	01415104 	movi	r5,1348
    2ed8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    2edc:	0009883a 	mov	r4,zero
    2ee0:	01400204 	movi	r5,8
    2ee4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    2ee8:	0009883a 	mov	r4,zero
    2eec:	0140a404 	movi	r5,656
    2ef0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    2ef4:	0009883a 	mov	r4,zero
    2ef8:	01401044 	movi	r5,65
    2efc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    2f00:	0009883a 	mov	r4,zero
    2f04:	014004c4 	movi	r5,19
    2f08:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    2f0c:	0009883a 	mov	r4,zero
    2f10:	01414804 	movi	r5,1312
    2f14:	00002c80 	call	2c8 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
    2f18:	0009883a 	mov	r4,zero
    2f1c:	000b883a 	mov	r5,zero
    2f20:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
    2f24:	0009883a 	mov	r4,zero
    2f28:	000b883a 	mov	r5,zero
    2f2c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
    2f30:	0009883a 	mov	r4,zero
    2f34:	01408404 	movi	r5,528
    2f38:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    2f3c:	0009883a 	mov	r4,zero
    2f40:	01401044 	movi	r5,65
    2f44:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    2f48:	0009883a 	mov	r4,zero
    2f4c:	014004c4 	movi	r5,19
    2f50:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
    2f54:	0009883a 	mov	r4,zero
    2f58:	000b883a 	mov	r5,zero
    2f5c:	00002c80 	call	2c8 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    2f60:	01006c04 	movi	r4,432
    2f64:	01414004 	movi	r5,1280
    2f68:	00022f80 	call	22f8 <UsbWrite>

}
    2f6c:	e037883a 	mov	sp,fp
    2f70:	dfc00117 	ldw	ra,4(sp)
    2f74:	df000017 	ldw	fp,0(sp)
    2f78:	dec00204 	addi	sp,sp,8
    2f7c:	f800283a 	ret

00002f80 <UsbGetReportDesc>:


void UsbGetReportDesc()
{
    2f80:	defffe04 	addi	sp,sp,-8
    2f84:	dfc00115 	stw	ra,4(sp)
    2f88:	df000015 	stw	fp,0(sp)
    2f8c:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    2f90:	01000084 	movi	r4,2
    2f94:	01414004 	movi	r5,1280
    2f98:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x050C);
    2f9c:	0009883a 	mov	r4,zero
    2fa0:	01414304 	movi	r5,1292
    2fa4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    2fa8:	0009883a 	mov	r4,zero
    2fac:	01400204 	movi	r5,8
    2fb0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    2fb4:	0009883a 	mov	r4,zero
    2fb8:	0140b404 	movi	r5,720
    2fbc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);
    2fc0:	0009883a 	mov	r4,zero
    2fc4:	01400044 	movi	r5,1
    2fc8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    2fcc:	0009883a 	mov	r4,zero
    2fd0:	014004c4 	movi	r5,19
    2fd4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0514);
    2fd8:	0009883a 	mov	r4,zero
    2fdc:	01414504 	movi	r5,1300
    2fe0:	00002c80 	call	2c8 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
    2fe4:	0009883a 	mov	r4,zero
    2fe8:	0141a044 	movi	r5,1665
    2fec:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x2200);//e //report 0x22
    2ff0:	0009883a 	mov	r4,zero
    2ff4:	01488004 	movi	r5,8704
    2ff8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    2ffc:	0009883a 	mov	r4,zero
    3000:	000b883a 	mov	r5,zero
    3004:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
    3008:	0009883a 	mov	r4,zero
    300c:	01401ec4 	movi	r5,123
    3010:	00002c80 	call	2c8 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0580); //514
    3014:	0009883a 	mov	r4,zero
    3018:	01416004 	movi	r5,1408
    301c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    3020:	0009883a 	mov	r4,zero
    3024:	01400204 	movi	r5,8
    3028:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    302c:	0009883a 	mov	r4,zero
    3030:	0140a404 	movi	r5,656
    3034:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    3038:	0009883a 	mov	r4,zero
    303c:	01401044 	movi	r5,65
    3040:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    3044:	0009883a 	mov	r4,zero
    3048:	014004c4 	movi	r5,19
    304c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    3050:	0009883a 	mov	r4,zero
    3054:	01414804 	movi	r5,1312
    3058:	00002c80 	call	2c8 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0588); //520
    305c:	0009883a 	mov	r4,zero
    3060:	01416204 	movi	r5,1416
    3064:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
    3068:	0009883a 	mov	r4,zero
    306c:	01400204 	movi	r5,8
    3070:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    3074:	0009883a 	mov	r4,zero
    3078:	0140a404 	movi	r5,656
    307c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
    3080:	0009883a 	mov	r4,zero
    3084:	01400044 	movi	r5,1
    3088:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    308c:	0009883a 	mov	r4,zero
    3090:	014004c4 	movi	r5,19
    3094:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
    3098:	0009883a 	mov	r4,zero
    309c:	01414b04 	movi	r5,1324
    30a0:	00002c80 	call	2c8 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0590); //52c
    30a4:	0009883a 	mov	r4,zero
    30a8:	01416404 	movi	r5,1424
    30ac:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
    30b0:	0009883a 	mov	r4,zero
    30b4:	01400204 	movi	r5,8
    30b8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
    30bc:	0009883a 	mov	r4,zero
    30c0:	0140a404 	movi	r5,656
    30c4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    30c8:	0009883a 	mov	r4,zero
    30cc:	01401044 	movi	r5,65
    30d0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    30d4:	0009883a 	mov	r4,zero
    30d8:	014004c4 	movi	r5,19
    30dc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
    30e0:	0009883a 	mov	r4,zero
    30e4:	01414e04 	movi	r5,1336
    30e8:	00002c80 	call	2c8 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0598); //538
    30ec:	0009883a 	mov	r4,zero
    30f0:	01416604 	movi	r5,1432
    30f4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
    30f8:	0009883a 	mov	r4,zero
    30fc:	01400204 	movi	r5,8
    3100:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
    3104:	0009883a 	mov	r4,zero
    3108:	0140a404 	movi	r5,656
    310c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
    3110:	0009883a 	mov	r4,zero
    3114:	01400044 	movi	r5,1
    3118:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
    311c:	0009883a 	mov	r4,zero
    3120:	014004c4 	movi	r5,19
    3124:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
    3128:	0009883a 	mov	r4,zero
    312c:	01415104 	movi	r5,1348
    3130:	00002c80 	call	2c8 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x05a0); //544
    3134:	0009883a 	mov	r4,zero
    3138:	01416804 	movi	r5,1440
    313c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    3140:	0009883a 	mov	r4,zero
    3144:	01400204 	movi	r5,8
    3148:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    314c:	0009883a 	mov	r4,zero
    3150:	0140a404 	movi	r5,656
    3154:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
    3158:	0009883a 	mov	r4,zero
    315c:	01401044 	movi	r5,65
    3160:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    3164:	0009883a 	mov	r4,zero
    3168:	014004c4 	movi	r5,19
    316c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
    3170:	0009883a 	mov	r4,zero
    3174:	01415404 	movi	r5,1360
    3178:	00002c80 	call	2c8 <IO_write>

	//data phase IN-6
	IO_write(HPI_DATA,0x05a8); //550
    317c:	0009883a 	mov	r4,zero
    3180:	01416a04 	movi	r5,1448
    3184:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
    3188:	0009883a 	mov	r4,zero
    318c:	01400204 	movi	r5,8
    3190:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    3194:	0009883a 	mov	r4,zero
    3198:	0140a404 	movi	r5,656
    319c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
    31a0:	0009883a 	mov	r4,zero
    31a4:	01400044 	movi	r5,1
    31a8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    31ac:	0009883a 	mov	r4,zero
    31b0:	014004c4 	movi	r5,19
    31b4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x055c);//a
    31b8:	0009883a 	mov	r4,zero
    31bc:	01415704 	movi	r5,1372
    31c0:	00002c80 	call	2c8 <IO_write>

	//data phase IN-7
	IO_write(HPI_DATA,0x05b0); //c
    31c4:	0009883a 	mov	r4,zero
    31c8:	01416c04 	movi	r5,1456
    31cc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
    31d0:	0009883a 	mov	r4,zero
    31d4:	01400204 	movi	r5,8
    31d8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//560
    31dc:	0009883a 	mov	r4,zero
    31e0:	0140a404 	movi	r5,656
    31e4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//2 //data1
    31e8:	0009883a 	mov	r4,zero
    31ec:	01401044 	movi	r5,65
    31f0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    31f4:	0009883a 	mov	r4,zero
    31f8:	014004c4 	movi	r5,19
    31fc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0568);//6
    3200:	0009883a 	mov	r4,zero
    3204:	01415a04 	movi	r5,1384
    3208:	00002c80 	call	2c8 <IO_write>

	//data phase IN-8
	IO_write(HPI_DATA,0x05b8); //8
    320c:	0009883a 	mov	r4,zero
    3210:	01416e04 	movi	r5,1464
    3214:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0003);//a
    3218:	0009883a 	mov	r4,zero
    321c:	014000c4 	movi	r5,3
    3220:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
    3224:	0009883a 	mov	r4,zero
    3228:	0140a404 	movi	r5,656
    322c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
    3230:	0009883a 	mov	r4,zero
    3234:	01400044 	movi	r5,1
    3238:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//570
    323c:	0009883a 	mov	r4,zero
    3240:	014004c4 	movi	r5,19
    3244:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0574);//2
    3248:	0009883a 	mov	r4,zero
    324c:	01415d04 	movi	r5,1396
    3250:	00002c80 	call	2c8 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //574
    3254:	0009883a 	mov	r4,zero
    3258:	000b883a 	mov	r5,zero
    325c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
    3260:	0009883a 	mov	r4,zero
    3264:	000b883a 	mov	r5,zero
    3268:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0210);//8
    326c:	0009883a 	mov	r4,zero
    3270:	01408404 	movi	r5,528
    3274:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    3278:	0009883a 	mov	r4,zero
    327c:	01401044 	movi	r5,65
    3280:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    3284:	0009883a 	mov	r4,zero
    3288:	014004c4 	movi	r5,19
    328c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
    3290:	0009883a 	mov	r4,zero
    3294:	000b883a 	mov	r5,zero
    3298:	00002c80 	call	2c8 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    329c:	01006c04 	movi	r4,432
    32a0:	01414004 	movi	r5,1280
    32a4:	00022f80 	call	22f8 <UsbWrite>

}
    32a8:	e037883a 	mov	sp,fp
    32ac:	dfc00117 	ldw	ra,4(sp)
    32b0:	df000017 	ldw	fp,0(sp)
    32b4:	dec00204 	addi	sp,sp,8
    32b8:	f800283a 	ret

000032bc <UsbWaitTDListDone>:


alt_u16 UsbWaitTDListDone()
{
    32bc:	defffd04 	addi	sp,sp,-12
    32c0:	dfc00215 	stw	ra,8(sp)
    32c4:	df000115 	stw	fp,4(sp)
    32c8:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
    32cc:	01005104 	movi	r4,324
    32d0:	000234c0 	call	234c <UsbRead>
    32d4:	e0bfff0d 	sth	r2,-4(fp)
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
    32d8:	01005104 	movi	r4,324
    32dc:	000b883a 	mov	r5,zero
    32e0:	00022f80 	call	22f8 <UsbWrite>
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
    32e4:	00000d06 	br	331c <UsbWaitTDListDone+0x60>
	{
		if(usb_ctl_val == 0x0000)
    32e8:	e0bfff0b 	ldhu	r2,-4(fp)
    32ec:	10000526 	beq	r2,zero,3304 <UsbWaitTDListDone+0x48>
		{
		}
		else
		{
			printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
    32f0:	e0bfff0b 	ldhu	r2,-4(fp)
    32f4:	01000074 	movhi	r4,1
    32f8:	210bd504 	addi	r4,r4,12116
    32fc:	100b883a 	mov	r5,r2
    3300:	0003d640 	call	3d64 <printf>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    3304:	01005104 	movi	r4,324
    3308:	000234c0 	call	234c <UsbRead>
    330c:	e0bfff0d 	sth	r2,-4(fp)
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
    3310:	01005104 	movi	r4,324
    3314:	000b883a 	mov	r5,zero
    3318:	00022f80 	call	22f8 <UsbWrite>
{
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
    331c:	e0bfff0b 	ldhu	r2,-4(fp)
    3320:	10840018 	cmpnei	r2,r2,4096
    3324:	103ff01e 	bne	r2,zero,32e8 <__alt_data_end+0xfffadbb8>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
	}

	return usb_ctl_val;
    3328:	e0bfff0b 	ldhu	r2,-4(fp)
}
    332c:	e037883a 	mov	sp,fp
    3330:	dfc00117 	ldw	ra,4(sp)
    3334:	df000017 	ldw	fp,0(sp)
    3338:	dec00204 	addi	sp,sp,8
    333c:	f800283a 	ret

00003340 <UsbGetRetryCnt>:


alt_u16 UsbGetRetryCnt()
{
    3340:	defffd04 	addi	sp,sp,-12
    3344:	dfc00215 	stw	ra,8(sp)
    3348:	df000115 	stw	fp,4(sp)
    334c:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	IO_read(HPI_STATUS);
    3350:	010000c4 	movi	r4,3
    3354:	00003300 	call	330 <IO_read>
	if(UsbRead(HPI_SIE1_MSG_ADR) == HUSB_TDListDone)
    3358:	01005104 	movi	r4,324
    335c:	000234c0 	call	234c <UsbRead>
    3360:	10bfffcc 	andi	r2,r2,65535
    3364:	10840018 	cmpnei	r2,r2,4096
    3368:	1000091e 	bne	r2,zero,3390 <UsbGetRetryCnt+0x50>
	{
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
    336c:	01005104 	movi	r4,324
    3370:	000b883a 	mov	r5,zero
    3374:	00022f80 	call	22f8 <UsbWrite>

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    3378:	0001883a 	nop
    337c:	010000c4 	movi	r4,3
    3380:	00003300 	call	330 <IO_read>
    3384:	10bfffcc 	andi	r2,r2,65535
    3388:	1080040c 	andi	r2,r2,16
    338c:	103ffb26 	beq	r2,zero,337c <__alt_data_end+0xfffadc4c>
		{
		}
	}
	//usleep(1000);
	IO_write(HPI_ADDR,0x0508);
    3390:	01000084 	movi	r4,2
    3394:	01414204 	movi	r5,1288
    3398:	00002c80 	call	2c8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
    339c:	0009883a 	mov	r4,zero
    33a0:	00003300 	call	330 <IO_read>
    33a4:	e0bfff0d 	sth	r2,-4(fp)

	return usb_ctl_val;
    33a8:	e0bfff0b 	ldhu	r2,-4(fp)
}
    33ac:	e037883a 	mov	sp,fp
    33b0:	dfc00117 	ldw	ra,4(sp)
    33b4:	df000017 	ldw	fp,0(sp)
    33b8:	dec00204 	addi	sp,sp,8
    33bc:	f800283a 	ret

000033c0 <UsbPrintMem>:


void UsbPrintMem()
{
    33c0:	defffc04 	addi	sp,sp,-16
    33c4:	dfc00315 	stw	ra,12(sp)
    33c8:	df000215 	stw	fp,8(sp)
    33cc:	df000204 	addi	fp,sp,8
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
    33d0:	01000084 	movi	r4,2
    33d4:	01414004 	movi	r5,1280
    33d8:	00002c80 	call	2c8 <IO_write>
	for (i = 0; i <= 200; i += 2)
    33dc:	e03ffe15 	stw	zero,-8(fp)
    33e0:	00000e06 	br	341c <UsbPrintMem+0x5c>
	{
		code = IO_read(HPI_DATA);
    33e4:	0009883a 	mov	r4,zero
    33e8:	00003300 	call	330 <IO_read>
    33ec:	10bfffcc 	andi	r2,r2,65535
    33f0:	e0bfff15 	stw	r2,-4(fp)
		printf("\naddr %x = %04x\n", 0x0500+i, code);
    33f4:	e0bffe17 	ldw	r2,-8(fp)
    33f8:	10814004 	addi	r2,r2,1280
    33fc:	01000074 	movhi	r4,1
    3400:	210bdd04 	addi	r4,r4,12148
    3404:	100b883a 	mov	r5,r2
    3408:	e1bfff17 	ldw	r6,-4(fp)
    340c:	0003d640 	call	3d64 <printf>

void UsbPrintMem()
{
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
	for (i = 0; i <= 200; i += 2)
    3410:	e0bffe17 	ldw	r2,-8(fp)
    3414:	10800084 	addi	r2,r2,2
    3418:	e0bffe15 	stw	r2,-8(fp)
    341c:	e0bffe17 	ldw	r2,-8(fp)
    3420:	10803250 	cmplti	r2,r2,201
    3424:	103fef1e 	bne	r2,zero,33e4 <__alt_data_end+0xfffadcb4>
	{
		code = IO_read(HPI_DATA);
		printf("\naddr %x = %04x\n", 0x0500+i, code);
	}
}
    3428:	e037883a 	mov	sp,fp
    342c:	dfc00117 	ldw	ra,4(sp)
    3430:	df000017 	ldw	fp,0(sp)
    3434:	dec00204 	addi	sp,sp,8
    3438:	f800283a 	ret

0000343c <udivmodsi4>:
    343c:	2900182e 	bgeu	r5,r4,34a0 <udivmodsi4+0x64>
    3440:	28001716 	blt	r5,zero,34a0 <udivmodsi4+0x64>
    3444:	00800804 	movi	r2,32
    3448:	00c00044 	movi	r3,1
    344c:	00000206 	br	3458 <udivmodsi4+0x1c>
    3450:	10001126 	beq	r2,zero,3498 <udivmodsi4+0x5c>
    3454:	28000516 	blt	r5,zero,346c <udivmodsi4+0x30>
    3458:	294b883a 	add	r5,r5,r5
    345c:	10bfffc4 	addi	r2,r2,-1
    3460:	18c7883a 	add	r3,r3,r3
    3464:	293ffa36 	bltu	r5,r4,3450 <__alt_data_end+0xfffadd20>
    3468:	18000b26 	beq	r3,zero,3498 <udivmodsi4+0x5c>
    346c:	0005883a 	mov	r2,zero
    3470:	21400236 	bltu	r4,r5,347c <udivmodsi4+0x40>
    3474:	2149c83a 	sub	r4,r4,r5
    3478:	10c4b03a 	or	r2,r2,r3
    347c:	1806d07a 	srli	r3,r3,1
    3480:	280ad07a 	srli	r5,r5,1
    3484:	183ffa1e 	bne	r3,zero,3470 <__alt_data_end+0xfffadd40>
    3488:	3000011e 	bne	r6,zero,3490 <udivmodsi4+0x54>
    348c:	f800283a 	ret
    3490:	2005883a 	mov	r2,r4
    3494:	f800283a 	ret
    3498:	0005883a 	mov	r2,zero
    349c:	003ffa06 	br	3488 <__alt_data_end+0xfffadd58>
    34a0:	00c00044 	movi	r3,1
    34a4:	003ff106 	br	346c <__alt_data_end+0xfffadd3c>

000034a8 <__divsi3>:
    34a8:	defffe04 	addi	sp,sp,-8
    34ac:	dfc00115 	stw	ra,4(sp)
    34b0:	dc000015 	stw	r16,0(sp)
    34b4:	20000b16 	blt	r4,zero,34e4 <__divsi3+0x3c>
    34b8:	0021883a 	mov	r16,zero
    34bc:	28000c16 	blt	r5,zero,34f0 <__divsi3+0x48>
    34c0:	000d883a 	mov	r6,zero
    34c4:	000343c0 	call	343c <udivmodsi4>
    34c8:	0407c83a 	sub	r3,zero,r16
    34cc:	1884f03a 	xor	r2,r3,r2
    34d0:	1405883a 	add	r2,r2,r16
    34d4:	dfc00117 	ldw	ra,4(sp)
    34d8:	dc000017 	ldw	r16,0(sp)
    34dc:	dec00204 	addi	sp,sp,8
    34e0:	f800283a 	ret
    34e4:	0109c83a 	sub	r4,zero,r4
    34e8:	04000044 	movi	r16,1
    34ec:	283ff40e 	bge	r5,zero,34c0 <__alt_data_end+0xfffadd90>
    34f0:	014bc83a 	sub	r5,zero,r5
    34f4:	8400005c 	xori	r16,r16,1
    34f8:	003ff106 	br	34c0 <__alt_data_end+0xfffadd90>

000034fc <__modsi3>:
    34fc:	defffd04 	addi	sp,sp,-12
    3500:	dfc00215 	stw	ra,8(sp)
    3504:	dc400115 	stw	r17,4(sp)
    3508:	dc000015 	stw	r16,0(sp)
    350c:	20000c16 	blt	r4,zero,3540 <__modsi3+0x44>
    3510:	0023883a 	mov	r17,zero
    3514:	0021883a 	mov	r16,zero
    3518:	28000d16 	blt	r5,zero,3550 <__modsi3+0x54>
    351c:	01800044 	movi	r6,1
    3520:	000343c0 	call	343c <udivmodsi4>
    3524:	1404f03a 	xor	r2,r2,r16
    3528:	8885883a 	add	r2,r17,r2
    352c:	dfc00217 	ldw	ra,8(sp)
    3530:	dc400117 	ldw	r17,4(sp)
    3534:	dc000017 	ldw	r16,0(sp)
    3538:	dec00304 	addi	sp,sp,12
    353c:	f800283a 	ret
    3540:	0109c83a 	sub	r4,zero,r4
    3544:	04400044 	movi	r17,1
    3548:	043fffc4 	movi	r16,-1
    354c:	283ff30e 	bge	r5,zero,351c <__alt_data_end+0xfffaddec>
    3550:	014bc83a 	sub	r5,zero,r5
    3554:	003ff106 	br	351c <__alt_data_end+0xfffaddec>

00003558 <__udivsi3>:
    3558:	000d883a 	mov	r6,zero
    355c:	000343c1 	jmpi	343c <udivmodsi4>

00003560 <__umodsi3>:
    3560:	01800044 	movi	r6,1
    3564:	000343c1 	jmpi	343c <udivmodsi4>

00003568 <malloc>:
    3568:	00800074 	movhi	r2,1
    356c:	10936c04 	addi	r2,r2,19888
    3570:	200b883a 	mov	r5,r4
    3574:	11000017 	ldw	r4,0(r2)
    3578:	00035901 	jmpi	3590 <_malloc_r>

0000357c <free>:
    357c:	00800074 	movhi	r2,1
    3580:	10936c04 	addi	r2,r2,19888
    3584:	200b883a 	mov	r5,r4
    3588:	11000017 	ldw	r4,0(r2)
    358c:	00082a41 	jmpi	82a4 <_free_r>

00003590 <_malloc_r>:
    3590:	defff504 	addi	sp,sp,-44
    3594:	dc800315 	stw	r18,12(sp)
    3598:	dfc00a15 	stw	ra,40(sp)
    359c:	df000915 	stw	fp,36(sp)
    35a0:	ddc00815 	stw	r23,32(sp)
    35a4:	dd800715 	stw	r22,28(sp)
    35a8:	dd400615 	stw	r21,24(sp)
    35ac:	dd000515 	stw	r20,20(sp)
    35b0:	dcc00415 	stw	r19,16(sp)
    35b4:	dc400215 	stw	r17,8(sp)
    35b8:	dc000115 	stw	r16,4(sp)
    35bc:	288002c4 	addi	r2,r5,11
    35c0:	00c00584 	movi	r3,22
    35c4:	2025883a 	mov	r18,r4
    35c8:	18802a2e 	bgeu	r3,r2,3674 <_malloc_r+0xe4>
    35cc:	047ffe04 	movi	r17,-8
    35d0:	1462703a 	and	r17,r2,r17
    35d4:	88009e16 	blt	r17,zero,3850 <_malloc_r+0x2c0>
    35d8:	89409d36 	bltu	r17,r5,3850 <_malloc_r+0x2c0>
    35dc:	00105300 	call	10530 <__malloc_lock>
    35e0:	00807dc4 	movi	r2,503
    35e4:	14402736 	bltu	r2,r17,3684 <_malloc_r+0xf4>
    35e8:	8806d0fa 	srli	r3,r17,3
    35ec:	04c00074 	movhi	r19,1
    35f0:	9cccbe04 	addi	r19,r19,13048
    35f4:	18c5883a 	add	r2,r3,r3
    35f8:	1085883a 	add	r2,r2,r2
    35fc:	1085883a 	add	r2,r2,r2
    3600:	9885883a 	add	r2,r19,r2
    3604:	14000317 	ldw	r16,12(r2)
    3608:	80814a26 	beq	r16,r2,3b34 <_malloc_r+0x5a4>
    360c:	80c00117 	ldw	r3,4(r16)
    3610:	81000317 	ldw	r4,12(r16)
    3614:	00bfff04 	movi	r2,-4
    3618:	1884703a 	and	r2,r3,r2
    361c:	81400217 	ldw	r5,8(r16)
    3620:	8085883a 	add	r2,r16,r2
    3624:	10c00117 	ldw	r3,4(r2)
    3628:	29000315 	stw	r4,12(r5)
    362c:	21400215 	stw	r5,8(r4)
    3630:	18c00054 	ori	r3,r3,1
    3634:	10c00115 	stw	r3,4(r2)
    3638:	9009883a 	mov	r4,r18
    363c:	00105500 	call	10550 <__malloc_unlock>
    3640:	80800204 	addi	r2,r16,8
    3644:	dfc00a17 	ldw	ra,40(sp)
    3648:	df000917 	ldw	fp,36(sp)
    364c:	ddc00817 	ldw	r23,32(sp)
    3650:	dd800717 	ldw	r22,28(sp)
    3654:	dd400617 	ldw	r21,24(sp)
    3658:	dd000517 	ldw	r20,20(sp)
    365c:	dcc00417 	ldw	r19,16(sp)
    3660:	dc800317 	ldw	r18,12(sp)
    3664:	dc400217 	ldw	r17,8(sp)
    3668:	dc000117 	ldw	r16,4(sp)
    366c:	dec00b04 	addi	sp,sp,44
    3670:	f800283a 	ret
    3674:	04400404 	movi	r17,16
    3678:	89407536 	bltu	r17,r5,3850 <_malloc_r+0x2c0>
    367c:	00105300 	call	10530 <__malloc_lock>
    3680:	003fd906 	br	35e8 <__alt_data_end+0xfffadeb8>
    3684:	8806d27a 	srli	r3,r17,9
    3688:	18007526 	beq	r3,zero,3860 <_malloc_r+0x2d0>
    368c:	00800104 	movi	r2,4
    3690:	10c0ef36 	bltu	r2,r3,3a50 <_malloc_r+0x4c0>
    3694:	8806d1ba 	srli	r3,r17,6
    3698:	19c00e04 	addi	r7,r3,56
    369c:	39cb883a 	add	r5,r7,r7
    36a0:	04c00074 	movhi	r19,1
    36a4:	294b883a 	add	r5,r5,r5
    36a8:	9cccbe04 	addi	r19,r19,13048
    36ac:	294b883a 	add	r5,r5,r5
    36b0:	994b883a 	add	r5,r19,r5
    36b4:	2c000317 	ldw	r16,12(r5)
    36b8:	2c000e26 	beq	r5,r16,36f4 <_malloc_r+0x164>
    36bc:	80800117 	ldw	r2,4(r16)
    36c0:	01bfff04 	movi	r6,-4
    36c4:	010003c4 	movi	r4,15
    36c8:	1184703a 	and	r2,r2,r6
    36cc:	1447c83a 	sub	r3,r2,r17
    36d0:	20c00716 	blt	r4,r3,36f0 <_malloc_r+0x160>
    36d4:	1800650e 	bge	r3,zero,386c <_malloc_r+0x2dc>
    36d8:	84000317 	ldw	r16,12(r16)
    36dc:	2c000526 	beq	r5,r16,36f4 <_malloc_r+0x164>
    36e0:	80800117 	ldw	r2,4(r16)
    36e4:	1184703a 	and	r2,r2,r6
    36e8:	1447c83a 	sub	r3,r2,r17
    36ec:	20fff90e 	bge	r4,r3,36d4 <__alt_data_end+0xfffadfa4>
    36f0:	39ffffc4 	addi	r7,r7,-1
    36f4:	38c00044 	addi	r3,r7,1
    36f8:	01800074 	movhi	r6,1
    36fc:	9c000417 	ldw	r16,16(r19)
    3700:	318cbe04 	addi	r6,r6,13048
    3704:	32400204 	addi	r9,r6,8
    3708:	82410326 	beq	r16,r9,3b18 <_malloc_r+0x588>
    370c:	81000117 	ldw	r4,4(r16)
    3710:	00bfff04 	movi	r2,-4
    3714:	208e703a 	and	r7,r4,r2
    3718:	3c45c83a 	sub	r2,r7,r17
    371c:	010003c4 	movi	r4,15
    3720:	2080ee16 	blt	r4,r2,3adc <_malloc_r+0x54c>
    3724:	32400515 	stw	r9,20(r6)
    3728:	32400415 	stw	r9,16(r6)
    372c:	1000510e 	bge	r2,zero,3874 <_malloc_r+0x2e4>
    3730:	00807fc4 	movi	r2,511
    3734:	11c0ce36 	bltu	r2,r7,3a70 <_malloc_r+0x4e0>
    3738:	3808d0fa 	srli	r4,r7,3
    373c:	01c00044 	movi	r7,1
    3740:	30800117 	ldw	r2,4(r6)
    3744:	210b883a 	add	r5,r4,r4
    3748:	294b883a 	add	r5,r5,r5
    374c:	2009d0ba 	srai	r4,r4,2
    3750:	294b883a 	add	r5,r5,r5
    3754:	298b883a 	add	r5,r5,r6
    3758:	2a000217 	ldw	r8,8(r5)
    375c:	3908983a 	sll	r4,r7,r4
    3760:	81400315 	stw	r5,12(r16)
    3764:	82000215 	stw	r8,8(r16)
    3768:	2088b03a 	or	r4,r4,r2
    376c:	2c000215 	stw	r16,8(r5)
    3770:	31000115 	stw	r4,4(r6)
    3774:	44000315 	stw	r16,12(r8)
    3778:	1805d0ba 	srai	r2,r3,2
    377c:	01400044 	movi	r5,1
    3780:	288a983a 	sll	r5,r5,r2
    3784:	21404336 	bltu	r4,r5,3894 <_malloc_r+0x304>
    3788:	2144703a 	and	r2,r4,r5
    378c:	10000a1e 	bne	r2,zero,37b8 <_malloc_r+0x228>
    3790:	00bfff04 	movi	r2,-4
    3794:	294b883a 	add	r5,r5,r5
    3798:	1886703a 	and	r3,r3,r2
    379c:	2144703a 	and	r2,r4,r5
    37a0:	18c00104 	addi	r3,r3,4
    37a4:	1000041e 	bne	r2,zero,37b8 <_malloc_r+0x228>
    37a8:	294b883a 	add	r5,r5,r5
    37ac:	2144703a 	and	r2,r4,r5
    37b0:	18c00104 	addi	r3,r3,4
    37b4:	103ffc26 	beq	r2,zero,37a8 <__alt_data_end+0xfffae078>
    37b8:	023fff04 	movi	r8,-4
    37bc:	01c003c4 	movi	r7,15
    37c0:	18c5883a 	add	r2,r3,r3
    37c4:	1085883a 	add	r2,r2,r2
    37c8:	1085883a 	add	r2,r2,r2
    37cc:	9895883a 	add	r10,r19,r2
    37d0:	52c00304 	addi	r11,r10,12
    37d4:	1819883a 	mov	r12,r3
    37d8:	5c000017 	ldw	r16,0(r11)
    37dc:	59bffd04 	addi	r6,r11,-12
    37e0:	8180041e 	bne	r16,r6,37f4 <_malloc_r+0x264>
    37e4:	0000ce06 	br	3b20 <_malloc_r+0x590>
    37e8:	2000d70e 	bge	r4,zero,3b48 <_malloc_r+0x5b8>
    37ec:	84000317 	ldw	r16,12(r16)
    37f0:	8180cb26 	beq	r16,r6,3b20 <_malloc_r+0x590>
    37f4:	80800117 	ldw	r2,4(r16)
    37f8:	1204703a 	and	r2,r2,r8
    37fc:	1449c83a 	sub	r4,r2,r17
    3800:	393ff90e 	bge	r7,r4,37e8 <__alt_data_end+0xfffae0b8>
    3804:	80800317 	ldw	r2,12(r16)
    3808:	80c00217 	ldw	r3,8(r16)
    380c:	89400054 	ori	r5,r17,1
    3810:	81400115 	stw	r5,4(r16)
    3814:	18800315 	stw	r2,12(r3)
    3818:	10c00215 	stw	r3,8(r2)
    381c:	8463883a 	add	r17,r16,r17
    3820:	9c400515 	stw	r17,20(r19)
    3824:	9c400415 	stw	r17,16(r19)
    3828:	20800054 	ori	r2,r4,1
    382c:	88800115 	stw	r2,4(r17)
    3830:	8a400315 	stw	r9,12(r17)
    3834:	8a400215 	stw	r9,8(r17)
    3838:	8923883a 	add	r17,r17,r4
    383c:	89000015 	stw	r4,0(r17)
    3840:	9009883a 	mov	r4,r18
    3844:	00105500 	call	10550 <__malloc_unlock>
    3848:	80800204 	addi	r2,r16,8
    384c:	003f7d06 	br	3644 <__alt_data_end+0xfffadf14>
    3850:	00800304 	movi	r2,12
    3854:	90800015 	stw	r2,0(r18)
    3858:	0005883a 	mov	r2,zero
    385c:	003f7906 	br	3644 <__alt_data_end+0xfffadf14>
    3860:	01401f84 	movi	r5,126
    3864:	01c00fc4 	movi	r7,63
    3868:	003f8d06 	br	36a0 <__alt_data_end+0xfffadf70>
    386c:	81000317 	ldw	r4,12(r16)
    3870:	003f6a06 	br	361c <__alt_data_end+0xfffadeec>
    3874:	81c5883a 	add	r2,r16,r7
    3878:	10c00117 	ldw	r3,4(r2)
    387c:	9009883a 	mov	r4,r18
    3880:	18c00054 	ori	r3,r3,1
    3884:	10c00115 	stw	r3,4(r2)
    3888:	00105500 	call	10550 <__malloc_unlock>
    388c:	80800204 	addi	r2,r16,8
    3890:	003f6c06 	br	3644 <__alt_data_end+0xfffadf14>
    3894:	9c000217 	ldw	r16,8(r19)
    3898:	00bfff04 	movi	r2,-4
    389c:	85800117 	ldw	r22,4(r16)
    38a0:	b0ac703a 	and	r22,r22,r2
    38a4:	b4400336 	bltu	r22,r17,38b4 <_malloc_r+0x324>
    38a8:	b445c83a 	sub	r2,r22,r17
    38ac:	00c003c4 	movi	r3,15
    38b0:	18805d16 	blt	r3,r2,3a28 <_malloc_r+0x498>
    38b4:	05c00074 	movhi	r23,1
    38b8:	00800074 	movhi	r2,1
    38bc:	bdd36904 	addi	r23,r23,19876
    38c0:	109a5904 	addi	r2,r2,26980
    38c4:	15400017 	ldw	r21,0(r2)
    38c8:	b9000017 	ldw	r4,0(r23)
    38cc:	00ffffc4 	movi	r3,-1
    38d0:	858d883a 	add	r6,r16,r22
    38d4:	8d6b883a 	add	r21,r17,r21
    38d8:	20c0e426 	beq	r4,r3,3c6c <_malloc_r+0x6dc>
    38dc:	ad4403c4 	addi	r21,r21,4111
    38e0:	00fc0004 	movi	r3,-4096
    38e4:	a8ea703a 	and	r21,r21,r3
    38e8:	9009883a 	mov	r4,r18
    38ec:	a80b883a 	mov	r5,r21
    38f0:	d9800015 	stw	r6,0(sp)
    38f4:	0003ee80 	call	3ee8 <_sbrk_r>
    38f8:	00ffffc4 	movi	r3,-1
    38fc:	1029883a 	mov	r20,r2
    3900:	d9800017 	ldw	r6,0(sp)
    3904:	10c0a426 	beq	r2,r3,3b98 <_malloc_r+0x608>
    3908:	1180a236 	bltu	r2,r6,3b94 <_malloc_r+0x604>
    390c:	07000074 	movhi	fp,1
    3910:	e71a6504 	addi	fp,fp,27028
    3914:	e0c00017 	ldw	r3,0(fp)
    3918:	a8c7883a 	add	r3,r21,r3
    391c:	e0c00015 	stw	r3,0(fp)
    3920:	3500da26 	beq	r6,r20,3c8c <_malloc_r+0x6fc>
    3924:	b9000017 	ldw	r4,0(r23)
    3928:	00bfffc4 	movi	r2,-1
    392c:	2080e426 	beq	r4,r2,3cc0 <_malloc_r+0x730>
    3930:	a185c83a 	sub	r2,r20,r6
    3934:	1885883a 	add	r2,r3,r2
    3938:	e0800015 	stw	r2,0(fp)
    393c:	a0c001cc 	andi	r3,r20,7
    3940:	1800b526 	beq	r3,zero,3c18 <_malloc_r+0x688>
    3944:	a0e9c83a 	sub	r20,r20,r3
    3948:	00840204 	movi	r2,4104
    394c:	a5000204 	addi	r20,r20,8
    3950:	10c7c83a 	sub	r3,r2,r3
    3954:	a545883a 	add	r2,r20,r21
    3958:	1083ffcc 	andi	r2,r2,4095
    395c:	18abc83a 	sub	r21,r3,r2
    3960:	9009883a 	mov	r4,r18
    3964:	a80b883a 	mov	r5,r21
    3968:	0003ee80 	call	3ee8 <_sbrk_r>
    396c:	00ffffc4 	movi	r3,-1
    3970:	10c0d026 	beq	r2,r3,3cb4 <_malloc_r+0x724>
    3974:	1507c83a 	sub	r3,r2,r20
    3978:	a8c7883a 	add	r3,r21,r3
    397c:	18c00054 	ori	r3,r3,1
    3980:	e0800017 	ldw	r2,0(fp)
    3984:	9d000215 	stw	r20,8(r19)
    3988:	a0c00115 	stw	r3,4(r20)
    398c:	a887883a 	add	r3,r21,r2
    3990:	e0c00015 	stw	r3,0(fp)
    3994:	84c00e26 	beq	r16,r19,39d0 <_malloc_r+0x440>
    3998:	018003c4 	movi	r6,15
    399c:	3580a02e 	bgeu	r6,r22,3c20 <_malloc_r+0x690>
    39a0:	81400117 	ldw	r5,4(r16)
    39a4:	013ffe04 	movi	r4,-8
    39a8:	b0bffd04 	addi	r2,r22,-12
    39ac:	1104703a 	and	r2,r2,r4
    39b0:	2900004c 	andi	r4,r5,1
    39b4:	1108b03a 	or	r4,r2,r4
    39b8:	81000115 	stw	r4,4(r16)
    39bc:	01400144 	movi	r5,5
    39c0:	8089883a 	add	r4,r16,r2
    39c4:	21400115 	stw	r5,4(r4)
    39c8:	21400215 	stw	r5,8(r4)
    39cc:	3080c036 	bltu	r6,r2,3cd0 <_malloc_r+0x740>
    39d0:	00800074 	movhi	r2,1
    39d4:	109a5804 	addi	r2,r2,26976
    39d8:	11000017 	ldw	r4,0(r2)
    39dc:	20c0012e 	bgeu	r4,r3,39e4 <_malloc_r+0x454>
    39e0:	10c00015 	stw	r3,0(r2)
    39e4:	00800074 	movhi	r2,1
    39e8:	109a5704 	addi	r2,r2,26972
    39ec:	11000017 	ldw	r4,0(r2)
    39f0:	9c000217 	ldw	r16,8(r19)
    39f4:	20c0012e 	bgeu	r4,r3,39fc <_malloc_r+0x46c>
    39f8:	10c00015 	stw	r3,0(r2)
    39fc:	80c00117 	ldw	r3,4(r16)
    3a00:	00bfff04 	movi	r2,-4
    3a04:	1886703a 	and	r3,r3,r2
    3a08:	1c45c83a 	sub	r2,r3,r17
    3a0c:	1c400236 	bltu	r3,r17,3a18 <_malloc_r+0x488>
    3a10:	00c003c4 	movi	r3,15
    3a14:	18800416 	blt	r3,r2,3a28 <_malloc_r+0x498>
    3a18:	9009883a 	mov	r4,r18
    3a1c:	00105500 	call	10550 <__malloc_unlock>
    3a20:	0005883a 	mov	r2,zero
    3a24:	003f0706 	br	3644 <__alt_data_end+0xfffadf14>
    3a28:	88c00054 	ori	r3,r17,1
    3a2c:	80c00115 	stw	r3,4(r16)
    3a30:	8463883a 	add	r17,r16,r17
    3a34:	10800054 	ori	r2,r2,1
    3a38:	9c400215 	stw	r17,8(r19)
    3a3c:	88800115 	stw	r2,4(r17)
    3a40:	9009883a 	mov	r4,r18
    3a44:	00105500 	call	10550 <__malloc_unlock>
    3a48:	80800204 	addi	r2,r16,8
    3a4c:	003efd06 	br	3644 <__alt_data_end+0xfffadf14>
    3a50:	00800504 	movi	r2,20
    3a54:	10c0482e 	bgeu	r2,r3,3b78 <_malloc_r+0x5e8>
    3a58:	00801504 	movi	r2,84
    3a5c:	10c06836 	bltu	r2,r3,3c00 <_malloc_r+0x670>
    3a60:	8806d33a 	srli	r3,r17,12
    3a64:	19c01b84 	addi	r7,r3,110
    3a68:	39cb883a 	add	r5,r7,r7
    3a6c:	003f0c06 	br	36a0 <__alt_data_end+0xfffadf70>
    3a70:	3804d27a 	srli	r2,r7,9
    3a74:	01000104 	movi	r4,4
    3a78:	2080422e 	bgeu	r4,r2,3b84 <_malloc_r+0x5f4>
    3a7c:	01000504 	movi	r4,20
    3a80:	20807c36 	bltu	r4,r2,3c74 <_malloc_r+0x6e4>
    3a84:	110016c4 	addi	r4,r2,91
    3a88:	210b883a 	add	r5,r4,r4
    3a8c:	294b883a 	add	r5,r5,r5
    3a90:	294b883a 	add	r5,r5,r5
    3a94:	994b883a 	add	r5,r19,r5
    3a98:	28800217 	ldw	r2,8(r5)
    3a9c:	02000074 	movhi	r8,1
    3aa0:	420cbe04 	addi	r8,r8,13048
    3aa4:	11406326 	beq	r2,r5,3c34 <_malloc_r+0x6a4>
    3aa8:	01bfff04 	movi	r6,-4
    3aac:	11000117 	ldw	r4,4(r2)
    3ab0:	2188703a 	and	r4,r4,r6
    3ab4:	3900022e 	bgeu	r7,r4,3ac0 <_malloc_r+0x530>
    3ab8:	10800217 	ldw	r2,8(r2)
    3abc:	28bffb1e 	bne	r5,r2,3aac <__alt_data_end+0xfffae37c>
    3ac0:	11800317 	ldw	r6,12(r2)
    3ac4:	99000117 	ldw	r4,4(r19)
    3ac8:	81800315 	stw	r6,12(r16)
    3acc:	80800215 	stw	r2,8(r16)
    3ad0:	34000215 	stw	r16,8(r6)
    3ad4:	14000315 	stw	r16,12(r2)
    3ad8:	003f2706 	br	3778 <__alt_data_end+0xfffae048>
    3adc:	88c00054 	ori	r3,r17,1
    3ae0:	80c00115 	stw	r3,4(r16)
    3ae4:	8463883a 	add	r17,r16,r17
    3ae8:	34400515 	stw	r17,20(r6)
    3aec:	34400415 	stw	r17,16(r6)
    3af0:	10c00054 	ori	r3,r2,1
    3af4:	8a400315 	stw	r9,12(r17)
    3af8:	8a400215 	stw	r9,8(r17)
    3afc:	88c00115 	stw	r3,4(r17)
    3b00:	88a3883a 	add	r17,r17,r2
    3b04:	88800015 	stw	r2,0(r17)
    3b08:	9009883a 	mov	r4,r18
    3b0c:	00105500 	call	10550 <__malloc_unlock>
    3b10:	80800204 	addi	r2,r16,8
    3b14:	003ecb06 	br	3644 <__alt_data_end+0xfffadf14>
    3b18:	31000117 	ldw	r4,4(r6)
    3b1c:	003f1606 	br	3778 <__alt_data_end+0xfffae048>
    3b20:	63000044 	addi	r12,r12,1
    3b24:	608000cc 	andi	r2,r12,3
    3b28:	5ac00204 	addi	r11,r11,8
    3b2c:	103f2a1e 	bne	r2,zero,37d8 <__alt_data_end+0xfffae0a8>
    3b30:	00002106 	br	3bb8 <_malloc_r+0x628>
    3b34:	80800204 	addi	r2,r16,8
    3b38:	84000517 	ldw	r16,20(r16)
    3b3c:	143eb31e 	bne	r2,r16,360c <__alt_data_end+0xfffadedc>
    3b40:	18c00084 	addi	r3,r3,2
    3b44:	003eec06 	br	36f8 <__alt_data_end+0xfffadfc8>
    3b48:	8085883a 	add	r2,r16,r2
    3b4c:	10c00117 	ldw	r3,4(r2)
    3b50:	81000317 	ldw	r4,12(r16)
    3b54:	81400217 	ldw	r5,8(r16)
    3b58:	18c00054 	ori	r3,r3,1
    3b5c:	10c00115 	stw	r3,4(r2)
    3b60:	29000315 	stw	r4,12(r5)
    3b64:	21400215 	stw	r5,8(r4)
    3b68:	9009883a 	mov	r4,r18
    3b6c:	00105500 	call	10550 <__malloc_unlock>
    3b70:	80800204 	addi	r2,r16,8
    3b74:	003eb306 	br	3644 <__alt_data_end+0xfffadf14>
    3b78:	19c016c4 	addi	r7,r3,91
    3b7c:	39cb883a 	add	r5,r7,r7
    3b80:	003ec706 	br	36a0 <__alt_data_end+0xfffadf70>
    3b84:	3804d1ba 	srli	r2,r7,6
    3b88:	11000e04 	addi	r4,r2,56
    3b8c:	210b883a 	add	r5,r4,r4
    3b90:	003fbe06 	br	3a8c <__alt_data_end+0xfffae35c>
    3b94:	84ff5d26 	beq	r16,r19,390c <__alt_data_end+0xfffae1dc>
    3b98:	9c000217 	ldw	r16,8(r19)
    3b9c:	00bfff04 	movi	r2,-4
    3ba0:	80c00117 	ldw	r3,4(r16)
    3ba4:	1886703a 	and	r3,r3,r2
    3ba8:	003f9706 	br	3a08 <__alt_data_end+0xfffae2d8>
    3bac:	52800017 	ldw	r10,0(r10)
    3bb0:	18ffffc4 	addi	r3,r3,-1
    3bb4:	50805c1e 	bne	r10,r2,3d28 <_malloc_r+0x798>
    3bb8:	190000cc 	andi	r4,r3,3
    3bbc:	50bffe04 	addi	r2,r10,-8
    3bc0:	203ffa1e 	bne	r4,zero,3bac <__alt_data_end+0xfffae47c>
    3bc4:	98800117 	ldw	r2,4(r19)
    3bc8:	0146303a 	nor	r3,zero,r5
    3bcc:	1884703a 	and	r2,r3,r2
    3bd0:	98800115 	stw	r2,4(r19)
    3bd4:	294b883a 	add	r5,r5,r5
    3bd8:	117f2e36 	bltu	r2,r5,3894 <__alt_data_end+0xfffae164>
    3bdc:	283f2d26 	beq	r5,zero,3894 <__alt_data_end+0xfffae164>
    3be0:	1146703a 	and	r3,r2,r5
    3be4:	1800521e 	bne	r3,zero,3d30 <_malloc_r+0x7a0>
    3be8:	6007883a 	mov	r3,r12
    3bec:	294b883a 	add	r5,r5,r5
    3bf0:	1148703a 	and	r4,r2,r5
    3bf4:	18c00104 	addi	r3,r3,4
    3bf8:	203ffc26 	beq	r4,zero,3bec <__alt_data_end+0xfffae4bc>
    3bfc:	003ef006 	br	37c0 <__alt_data_end+0xfffae090>
    3c00:	00805504 	movi	r2,340
    3c04:	10c01336 	bltu	r2,r3,3c54 <_malloc_r+0x6c4>
    3c08:	8806d3fa 	srli	r3,r17,15
    3c0c:	19c01dc4 	addi	r7,r3,119
    3c10:	39cb883a 	add	r5,r7,r7
    3c14:	003ea206 	br	36a0 <__alt_data_end+0xfffadf70>
    3c18:	00c40004 	movi	r3,4096
    3c1c:	003f4d06 	br	3954 <__alt_data_end+0xfffae224>
    3c20:	00800044 	movi	r2,1
    3c24:	a0800115 	stw	r2,4(r20)
    3c28:	a021883a 	mov	r16,r20
    3c2c:	0007883a 	mov	r3,zero
    3c30:	003f7506 	br	3a08 <__alt_data_end+0xfffae2d8>
    3c34:	200bd0ba 	srai	r5,r4,2
    3c38:	01800044 	movi	r6,1
    3c3c:	41000117 	ldw	r4,4(r8)
    3c40:	314a983a 	sll	r5,r6,r5
    3c44:	100d883a 	mov	r6,r2
    3c48:	2908b03a 	or	r4,r5,r4
    3c4c:	41000115 	stw	r4,4(r8)
    3c50:	003f9d06 	br	3ac8 <__alt_data_end+0xfffae398>
    3c54:	00815504 	movi	r2,1364
    3c58:	10c01336 	bltu	r2,r3,3ca8 <_malloc_r+0x718>
    3c5c:	8806d4ba 	srli	r3,r17,18
    3c60:	19c01f04 	addi	r7,r3,124
    3c64:	39cb883a 	add	r5,r7,r7
    3c68:	003e8d06 	br	36a0 <__alt_data_end+0xfffadf70>
    3c6c:	ad400404 	addi	r21,r21,16
    3c70:	003f1d06 	br	38e8 <__alt_data_end+0xfffae1b8>
    3c74:	01001504 	movi	r4,84
    3c78:	20801c36 	bltu	r4,r2,3cec <_malloc_r+0x75c>
    3c7c:	3804d33a 	srli	r2,r7,12
    3c80:	11001b84 	addi	r4,r2,110
    3c84:	210b883a 	add	r5,r4,r4
    3c88:	003f8006 	br	3a8c <__alt_data_end+0xfffae35c>
    3c8c:	3083ffcc 	andi	r2,r6,4095
    3c90:	103f241e 	bne	r2,zero,3924 <__alt_data_end+0xfffae1f4>
    3c94:	99000217 	ldw	r4,8(r19)
    3c98:	ad85883a 	add	r2,r21,r22
    3c9c:	10800054 	ori	r2,r2,1
    3ca0:	20800115 	stw	r2,4(r4)
    3ca4:	003f4a06 	br	39d0 <__alt_data_end+0xfffae2a0>
    3ca8:	01403f04 	movi	r5,252
    3cac:	01c01f84 	movi	r7,126
    3cb0:	003e7b06 	br	36a0 <__alt_data_end+0xfffadf70>
    3cb4:	00c00044 	movi	r3,1
    3cb8:	002b883a 	mov	r21,zero
    3cbc:	003f3006 	br	3980 <__alt_data_end+0xfffae250>
    3cc0:	00800074 	movhi	r2,1
    3cc4:	10936904 	addi	r2,r2,19876
    3cc8:	15000015 	stw	r20,0(r2)
    3ccc:	003f1b06 	br	393c <__alt_data_end+0xfffae20c>
    3cd0:	9009883a 	mov	r4,r18
    3cd4:	81400204 	addi	r5,r16,8
    3cd8:	00082a40 	call	82a4 <_free_r>
    3cdc:	00800074 	movhi	r2,1
    3ce0:	109a6504 	addi	r2,r2,27028
    3ce4:	10c00017 	ldw	r3,0(r2)
    3ce8:	003f3906 	br	39d0 <__alt_data_end+0xfffae2a0>
    3cec:	01005504 	movi	r4,340
    3cf0:	20800436 	bltu	r4,r2,3d04 <_malloc_r+0x774>
    3cf4:	3804d3fa 	srli	r2,r7,15
    3cf8:	11001dc4 	addi	r4,r2,119
    3cfc:	210b883a 	add	r5,r4,r4
    3d00:	003f6206 	br	3a8c <__alt_data_end+0xfffae35c>
    3d04:	01015504 	movi	r4,1364
    3d08:	20800436 	bltu	r4,r2,3d1c <_malloc_r+0x78c>
    3d0c:	3804d4ba 	srli	r2,r7,18
    3d10:	11001f04 	addi	r4,r2,124
    3d14:	210b883a 	add	r5,r4,r4
    3d18:	003f5c06 	br	3a8c <__alt_data_end+0xfffae35c>
    3d1c:	01403f04 	movi	r5,252
    3d20:	01001f84 	movi	r4,126
    3d24:	003f5906 	br	3a8c <__alt_data_end+0xfffae35c>
    3d28:	98800117 	ldw	r2,4(r19)
    3d2c:	003fa906 	br	3bd4 <__alt_data_end+0xfffae4a4>
    3d30:	6007883a 	mov	r3,r12
    3d34:	003ea206 	br	37c0 <__alt_data_end+0xfffae090>

00003d38 <_printf_r>:
    3d38:	defffd04 	addi	sp,sp,-12
    3d3c:	dfc00015 	stw	ra,0(sp)
    3d40:	d9800115 	stw	r6,4(sp)
    3d44:	d9c00215 	stw	r7,8(sp)
    3d48:	280d883a 	mov	r6,r5
    3d4c:	21400217 	ldw	r5,8(r4)
    3d50:	d9c00104 	addi	r7,sp,4
    3d54:	0003fd40 	call	3fd4 <___vfprintf_internal_r>
    3d58:	dfc00017 	ldw	ra,0(sp)
    3d5c:	dec00304 	addi	sp,sp,12
    3d60:	f800283a 	ret

00003d64 <printf>:
    3d64:	defffc04 	addi	sp,sp,-16
    3d68:	dfc00015 	stw	ra,0(sp)
    3d6c:	d9400115 	stw	r5,4(sp)
    3d70:	d9800215 	stw	r6,8(sp)
    3d74:	d9c00315 	stw	r7,12(sp)
    3d78:	00800074 	movhi	r2,1
    3d7c:	10936c04 	addi	r2,r2,19888
    3d80:	10800017 	ldw	r2,0(r2)
    3d84:	200b883a 	mov	r5,r4
    3d88:	d9800104 	addi	r6,sp,4
    3d8c:	11000217 	ldw	r4,8(r2)
    3d90:	00060d00 	call	60d0 <__vfprintf_internal>
    3d94:	dfc00017 	ldw	ra,0(sp)
    3d98:	dec00404 	addi	sp,sp,16
    3d9c:	f800283a 	ret

00003da0 <_puts_r>:
    3da0:	defff604 	addi	sp,sp,-40
    3da4:	dc000715 	stw	r16,28(sp)
    3da8:	2021883a 	mov	r16,r4
    3dac:	2809883a 	mov	r4,r5
    3db0:	dc400815 	stw	r17,32(sp)
    3db4:	dfc00915 	stw	ra,36(sp)
    3db8:	2823883a 	mov	r17,r5
    3dbc:	0003f3c0 	call	3f3c <strlen>
    3dc0:	00c00074 	movhi	r3,1
    3dc4:	18d36c04 	addi	r3,r3,19888
    3dc8:	18c00017 	ldw	r3,0(r3)
    3dcc:	11000044 	addi	r4,r2,1
    3dd0:	d8800115 	stw	r2,4(sp)
    3dd4:	18c00217 	ldw	r3,8(r3)
    3dd8:	01400074 	movhi	r5,1
    3ddc:	294be204 	addi	r5,r5,12168
    3de0:	1880030b 	ldhu	r2,12(r3)
    3de4:	d9400215 	stw	r5,8(sp)
    3de8:	d9000615 	stw	r4,24(sp)
    3dec:	01400044 	movi	r5,1
    3df0:	01000084 	movi	r4,2
    3df4:	d9000515 	stw	r4,20(sp)
    3df8:	dc400015 	stw	r17,0(sp)
    3dfc:	d9400315 	stw	r5,12(sp)
    3e00:	dec00415 	stw	sp,16(sp)
    3e04:	1108000c 	andi	r4,r2,8192
    3e08:	2000061e 	bne	r4,zero,3e24 <_puts_r+0x84>
    3e0c:	19401917 	ldw	r5,100(r3)
    3e10:	0137ffc4 	movi	r4,-8193
    3e14:	10880014 	ori	r2,r2,8192
    3e18:	2908703a 	and	r4,r5,r4
    3e1c:	1880030d 	sth	r2,12(r3)
    3e20:	19001915 	stw	r4,100(r3)
    3e24:	81400217 	ldw	r5,8(r16)
    3e28:	8009883a 	mov	r4,r16
    3e2c:	d9800404 	addi	r6,sp,16
    3e30:	00085940 	call	8594 <__sfvwrite_r>
    3e34:	1000061e 	bne	r2,zero,3e50 <_puts_r+0xb0>
    3e38:	00800284 	movi	r2,10
    3e3c:	dfc00917 	ldw	ra,36(sp)
    3e40:	dc400817 	ldw	r17,32(sp)
    3e44:	dc000717 	ldw	r16,28(sp)
    3e48:	dec00a04 	addi	sp,sp,40
    3e4c:	f800283a 	ret
    3e50:	00bfffc4 	movi	r2,-1
    3e54:	003ff906 	br	3e3c <__alt_data_end+0xfffae70c>

00003e58 <puts>:
    3e58:	00800074 	movhi	r2,1
    3e5c:	10936c04 	addi	r2,r2,19888
    3e60:	200b883a 	mov	r5,r4
    3e64:	11000017 	ldw	r4,0(r2)
    3e68:	0003da01 	jmpi	3da0 <_puts_r>

00003e6c <srand>:
    3e6c:	00800074 	movhi	r2,1
    3e70:	10936c04 	addi	r2,r2,19888
    3e74:	10800017 	ldw	r2,0(r2)
    3e78:	11002915 	stw	r4,164(r2)
    3e7c:	10002a15 	stw	zero,168(r2)
    3e80:	f800283a 	ret

00003e84 <rand>:
    3e84:	00800074 	movhi	r2,1
    3e88:	defffe04 	addi	sp,sp,-8
    3e8c:	10936c04 	addi	r2,r2,19888
    3e90:	dc000015 	stw	r16,0(sp)
    3e94:	14000017 	ldw	r16,0(r2)
    3e98:	dfc00115 	stw	ra,4(sp)
    3e9c:	01932574 	movhi	r6,19605
    3ea0:	81002917 	ldw	r4,164(r16)
    3ea4:	81402a17 	ldw	r5,168(r16)
    3ea8:	01d614b4 	movhi	r7,22610
    3eac:	319fcb44 	addi	r6,r6,32557
    3eb0:	39fd0b44 	addi	r7,r7,-3027
    3eb4:	000c9c40 	call	c9c4 <__muldi3>
    3eb8:	11000044 	addi	r4,r2,1
    3ebc:	2085803a 	cmpltu	r2,r4,r2
    3ec0:	10c7883a 	add	r3,r2,r3
    3ec4:	00a00034 	movhi	r2,32768
    3ec8:	10bfffc4 	addi	r2,r2,-1
    3ecc:	1884703a 	and	r2,r3,r2
    3ed0:	81002915 	stw	r4,164(r16)
    3ed4:	80c02a15 	stw	r3,168(r16)
    3ed8:	dfc00117 	ldw	ra,4(sp)
    3edc:	dc000017 	ldw	r16,0(sp)
    3ee0:	dec00204 	addi	sp,sp,8
    3ee4:	f800283a 	ret

00003ee8 <_sbrk_r>:
    3ee8:	defffd04 	addi	sp,sp,-12
    3eec:	dc000015 	stw	r16,0(sp)
    3ef0:	04000074 	movhi	r16,1
    3ef4:	dc400115 	stw	r17,4(sp)
    3ef8:	841a5a04 	addi	r16,r16,26984
    3efc:	2023883a 	mov	r17,r4
    3f00:	2809883a 	mov	r4,r5
    3f04:	dfc00215 	stw	ra,8(sp)
    3f08:	80000015 	stw	zero,0(r16)
    3f0c:	00107440 	call	10744 <sbrk>
    3f10:	00ffffc4 	movi	r3,-1
    3f14:	10c00526 	beq	r2,r3,3f2c <_sbrk_r+0x44>
    3f18:	dfc00217 	ldw	ra,8(sp)
    3f1c:	dc400117 	ldw	r17,4(sp)
    3f20:	dc000017 	ldw	r16,0(sp)
    3f24:	dec00304 	addi	sp,sp,12
    3f28:	f800283a 	ret
    3f2c:	80c00017 	ldw	r3,0(r16)
    3f30:	183ff926 	beq	r3,zero,3f18 <__alt_data_end+0xfffae7e8>
    3f34:	88c00015 	stw	r3,0(r17)
    3f38:	003ff706 	br	3f18 <__alt_data_end+0xfffae7e8>

00003f3c <strlen>:
    3f3c:	208000cc 	andi	r2,r4,3
    3f40:	10002026 	beq	r2,zero,3fc4 <strlen+0x88>
    3f44:	20800007 	ldb	r2,0(r4)
    3f48:	10002026 	beq	r2,zero,3fcc <strlen+0x90>
    3f4c:	2005883a 	mov	r2,r4
    3f50:	00000206 	br	3f5c <strlen+0x20>
    3f54:	10c00007 	ldb	r3,0(r2)
    3f58:	18001826 	beq	r3,zero,3fbc <strlen+0x80>
    3f5c:	10800044 	addi	r2,r2,1
    3f60:	10c000cc 	andi	r3,r2,3
    3f64:	183ffb1e 	bne	r3,zero,3f54 <__alt_data_end+0xfffae824>
    3f68:	10c00017 	ldw	r3,0(r2)
    3f6c:	01ffbff4 	movhi	r7,65279
    3f70:	39ffbfc4 	addi	r7,r7,-257
    3f74:	00ca303a 	nor	r5,zero,r3
    3f78:	01a02074 	movhi	r6,32897
    3f7c:	19c7883a 	add	r3,r3,r7
    3f80:	31a02004 	addi	r6,r6,-32640
    3f84:	1946703a 	and	r3,r3,r5
    3f88:	1986703a 	and	r3,r3,r6
    3f8c:	1800091e 	bne	r3,zero,3fb4 <strlen+0x78>
    3f90:	10800104 	addi	r2,r2,4
    3f94:	10c00017 	ldw	r3,0(r2)
    3f98:	19cb883a 	add	r5,r3,r7
    3f9c:	00c6303a 	nor	r3,zero,r3
    3fa0:	28c6703a 	and	r3,r5,r3
    3fa4:	1986703a 	and	r3,r3,r6
    3fa8:	183ff926 	beq	r3,zero,3f90 <__alt_data_end+0xfffae860>
    3fac:	00000106 	br	3fb4 <strlen+0x78>
    3fb0:	10800044 	addi	r2,r2,1
    3fb4:	10c00007 	ldb	r3,0(r2)
    3fb8:	183ffd1e 	bne	r3,zero,3fb0 <__alt_data_end+0xfffae880>
    3fbc:	1105c83a 	sub	r2,r2,r4
    3fc0:	f800283a 	ret
    3fc4:	2005883a 	mov	r2,r4
    3fc8:	003fe706 	br	3f68 <__alt_data_end+0xfffae838>
    3fcc:	0005883a 	mov	r2,zero
    3fd0:	f800283a 	ret

00003fd4 <___vfprintf_internal_r>:
    3fd4:	defeb604 	addi	sp,sp,-1320
    3fd8:	dfc14915 	stw	ra,1316(sp)
    3fdc:	ddc14715 	stw	r23,1308(sp)
    3fe0:	dd814615 	stw	r22,1304(sp)
    3fe4:	202f883a 	mov	r23,r4
    3fe8:	282d883a 	mov	r22,r5
    3fec:	d9812a15 	stw	r6,1192(sp)
    3ff0:	d9c12d15 	stw	r7,1204(sp)
    3ff4:	df014815 	stw	fp,1312(sp)
    3ff8:	dd414515 	stw	r21,1300(sp)
    3ffc:	dd014415 	stw	r20,1296(sp)
    4000:	dcc14315 	stw	r19,1292(sp)
    4004:	dc814215 	stw	r18,1288(sp)
    4008:	dc414115 	stw	r17,1284(sp)
    400c:	dc014015 	stw	r16,1280(sp)
    4010:	0008c540 	call	8c54 <_localeconv_r>
    4014:	10800017 	ldw	r2,0(r2)
    4018:	1009883a 	mov	r4,r2
    401c:	d8813515 	stw	r2,1236(sp)
    4020:	0003f3c0 	call	3f3c <strlen>
    4024:	d8813815 	stw	r2,1248(sp)
    4028:	b8000226 	beq	r23,zero,4034 <___vfprintf_internal_r+0x60>
    402c:	b8800e17 	ldw	r2,56(r23)
    4030:	10010526 	beq	r2,zero,4448 <___vfprintf_internal_r+0x474>
    4034:	b0c0030b 	ldhu	r3,12(r22)
    4038:	1908000c 	andi	r4,r3,8192
    403c:	1805883a 	mov	r2,r3
    4040:	2000071e 	bne	r4,zero,4060 <___vfprintf_internal_r+0x8c>
    4044:	b1001917 	ldw	r4,100(r22)
    4048:	18880014 	ori	r2,r3,8192
    404c:	00f7ffc4 	movi	r3,-8193
    4050:	20c8703a 	and	r4,r4,r3
    4054:	b080030d 	sth	r2,12(r22)
    4058:	1007883a 	mov	r3,r2
    405c:	b1001915 	stw	r4,100(r22)
    4060:	1100020c 	andi	r4,r2,8
    4064:	2000a826 	beq	r4,zero,4308 <___vfprintf_internal_r+0x334>
    4068:	b1000417 	ldw	r4,16(r22)
    406c:	2000a626 	beq	r4,zero,4308 <___vfprintf_internal_r+0x334>
    4070:	1080068c 	andi	r2,r2,26
    4074:	01000284 	movi	r4,10
    4078:	1100ac26 	beq	r2,r4,432c <___vfprintf_internal_r+0x358>
    407c:	d8c10e04 	addi	r3,sp,1080
    4080:	d9010dc4 	addi	r4,sp,1079
    4084:	d9400404 	addi	r5,sp,16
    4088:	05000074 	movhi	r20,1
    408c:	1905c83a 	sub	r2,r3,r4
    4090:	a50bf384 	addi	r20,r20,12238
    4094:	d8c12815 	stw	r3,1184(sp)
    4098:	d9012915 	stw	r4,1188(sp)
    409c:	d9411e15 	stw	r5,1144(sp)
    40a0:	d8012015 	stw	zero,1152(sp)
    40a4:	d8011f15 	stw	zero,1148(sp)
    40a8:	d8013315 	stw	zero,1228(sp)
    40ac:	d8013715 	stw	zero,1244(sp)
    40b0:	d8013915 	stw	zero,1252(sp)
    40b4:	d8013b15 	stw	zero,1260(sp)
    40b8:	d8013a15 	stw	zero,1256(sp)
    40bc:	d8012f15 	stw	zero,1212(sp)
    40c0:	2811883a 	mov	r8,r5
    40c4:	d8813c15 	stw	r2,1264(sp)
    40c8:	d8c12a17 	ldw	r3,1192(sp)
    40cc:	18800007 	ldb	r2,0(r3)
    40d0:	10021326 	beq	r2,zero,4920 <___vfprintf_internal_r+0x94c>
    40d4:	00c00944 	movi	r3,37
    40d8:	dc012a17 	ldw	r16,1192(sp)
    40dc:	10c0021e 	bne	r2,r3,40e8 <___vfprintf_internal_r+0x114>
    40e0:	00001606 	br	413c <___vfprintf_internal_r+0x168>
    40e4:	10c08526 	beq	r2,r3,42fc <___vfprintf_internal_r+0x328>
    40e8:	84000044 	addi	r16,r16,1
    40ec:	80800007 	ldb	r2,0(r16)
    40f0:	103ffc1e 	bne	r2,zero,40e4 <__alt_data_end+0xfffae9b4>
    40f4:	d9012a17 	ldw	r4,1192(sp)
    40f8:	8123c83a 	sub	r17,r16,r4
    40fc:	88000f26 	beq	r17,zero,413c <___vfprintf_internal_r+0x168>
    4100:	d8812a17 	ldw	r2,1192(sp)
    4104:	d8c12017 	ldw	r3,1152(sp)
    4108:	44400115 	stw	r17,4(r8)
    410c:	40800015 	stw	r2,0(r8)
    4110:	d8811f17 	ldw	r2,1148(sp)
    4114:	1c47883a 	add	r3,r3,r17
    4118:	d8c12015 	stw	r3,1152(sp)
    411c:	10800044 	addi	r2,r2,1
    4120:	d8811f15 	stw	r2,1148(sp)
    4124:	00c001c4 	movi	r3,7
    4128:	1880b516 	blt	r3,r2,4400 <___vfprintf_internal_r+0x42c>
    412c:	42000204 	addi	r8,r8,8
    4130:	d8c12f17 	ldw	r3,1212(sp)
    4134:	1c47883a 	add	r3,r3,r17
    4138:	d8c12f15 	stw	r3,1212(sp)
    413c:	80800007 	ldb	r2,0(r16)
    4140:	1000b626 	beq	r2,zero,441c <___vfprintf_internal_r+0x448>
    4144:	80800044 	addi	r2,r16,1
    4148:	84000047 	ldb	r16,1(r16)
    414c:	0027883a 	mov	r19,zero
    4150:	0039883a 	mov	fp,zero
    4154:	dcc12b05 	stb	r19,1196(sp)
    4158:	d8012785 	stb	zero,1182(sp)
    415c:	027fffc4 	movi	r9,-1
    4160:	d8012e15 	stw	zero,1208(sp)
    4164:	04401604 	movi	r17,88
    4168:	04800244 	movi	r18,9
    416c:	da012a15 	stw	r8,1192(sp)
    4170:	e027883a 	mov	r19,fp
    4174:	17000044 	addi	fp,r2,1
    4178:	80bff804 	addi	r2,r16,-32
    417c:	88831236 	bltu	r17,r2,4dc8 <___vfprintf_internal_r+0xdf4>
    4180:	100490ba 	slli	r2,r2,2
    4184:	01000034 	movhi	r4,0
    4188:	21106604 	addi	r4,r4,16792
    418c:	1105883a 	add	r2,r2,r4
    4190:	10800017 	ldw	r2,0(r2)
    4194:	1000683a 	jmp	r2
    4198:	00004ce4 	muli	zero,zero,307
    419c:	00004dc8 	cmpgei	zero,zero,311
    41a0:	00004dc8 	cmpgei	zero,zero,311
    41a4:	00004d00 	call	4d0 <get_keycode+0x13c>
    41a8:	00004dc8 	cmpgei	zero,zero,311
    41ac:	00004dc8 	cmpgei	zero,zero,311
    41b0:	00004dc8 	cmpgei	zero,zero,311
    41b4:	00004dc8 	cmpgei	zero,zero,311
    41b8:	00004dc8 	cmpgei	zero,zero,311
    41bc:	00004dc8 	cmpgei	zero,zero,311
    41c0:	00004d10 	cmplti	zero,zero,308
    41c4:	00004d38 	rdprs	zero,zero,308
    41c8:	00004dc8 	cmpgei	zero,zero,311
    41cc:	00004454 	movui	zero,273
    41d0:	00004464 	muli	zero,zero,273
    41d4:	00004dc8 	cmpgei	zero,zero,311
    41d8:	000044b4 	movhi	zero,274
    41dc:	000044c4 	movi	zero,275
    41e0:	000044c4 	movi	zero,275
    41e4:	000044c4 	movi	zero,275
    41e8:	000044c4 	movi	zero,275
    41ec:	000044c4 	movi	zero,275
    41f0:	000044c4 	movi	zero,275
    41f4:	000044c4 	movi	zero,275
    41f8:	000044c4 	movi	zero,275
    41fc:	000044c4 	movi	zero,275
    4200:	00004dc8 	cmpgei	zero,zero,311
    4204:	00004dc8 	cmpgei	zero,zero,311
    4208:	00004dc8 	cmpgei	zero,zero,311
    420c:	00004dc8 	cmpgei	zero,zero,311
    4210:	00004dc8 	cmpgei	zero,zero,311
    4214:	00004dc8 	cmpgei	zero,zero,311
    4218:	00004dc8 	cmpgei	zero,zero,311
    421c:	00004dc8 	cmpgei	zero,zero,311
    4220:	00004dc8 	cmpgei	zero,zero,311
    4224:	00004dc8 	cmpgei	zero,zero,311
    4228:	00004508 	cmpgei	zero,zero,276
    422c:	00004928 	cmpgeui	zero,zero,292
    4230:	00004dc8 	cmpgei	zero,zero,311
    4234:	00004928 	cmpgeui	zero,zero,292
    4238:	00004dc8 	cmpgei	zero,zero,311
    423c:	00004dc8 	cmpgei	zero,zero,311
    4240:	00004dc8 	cmpgei	zero,zero,311
    4244:	00004dc8 	cmpgei	zero,zero,311
    4248:	000049d0 	cmplti	zero,zero,295
    424c:	00004dc8 	cmpgei	zero,zero,311
    4250:	00004dc8 	cmpgei	zero,zero,311
    4254:	000049e0 	cmpeqi	zero,zero,295
    4258:	00004dc8 	cmpgei	zero,zero,311
    425c:	00004dc8 	cmpgei	zero,zero,311
    4260:	00004dc8 	cmpgei	zero,zero,311
    4264:	00004dc8 	cmpgei	zero,zero,311
    4268:	00004dc8 	cmpgei	zero,zero,311
    426c:	00004a24 	muli	zero,zero,296
    4270:	00004dc8 	cmpgei	zero,zero,311
    4274:	00004dc8 	cmpgei	zero,zero,311
    4278:	00004a5c 	xori	zero,zero,297
    427c:	00004dc8 	cmpgei	zero,zero,311
    4280:	00004dc8 	cmpgei	zero,zero,311
    4284:	00004dc8 	cmpgei	zero,zero,311
    4288:	00004dc8 	cmpgei	zero,zero,311
    428c:	00004dc8 	cmpgei	zero,zero,311
    4290:	00004dc8 	cmpgei	zero,zero,311
    4294:	00004dc8 	cmpgei	zero,zero,311
    4298:	00004dc8 	cmpgei	zero,zero,311
    429c:	00004dc8 	cmpgei	zero,zero,311
    42a0:	00004dc8 	cmpgei	zero,zero,311
    42a4:	00004c98 	cmpnei	zero,zero,306
    42a8:	00004c44 	movi	zero,305
    42ac:	00004928 	cmpgeui	zero,zero,292
    42b0:	00004928 	cmpgeui	zero,zero,292
    42b4:	00004928 	cmpgeui	zero,zero,292
    42b8:	00004c88 	cmpgei	zero,zero,306
    42bc:	00004c44 	movi	zero,305
    42c0:	00004dc8 	cmpgei	zero,zero,311
    42c4:	00004dc8 	cmpgei	zero,zero,311
    42c8:	00004b60 	cmpeqi	zero,zero,301
    42cc:	00004dc8 	cmpgei	zero,zero,311
    42d0:	00004b78 	rdprs	zero,zero,301
    42d4:	00004bb8 	rdprs	zero,zero,302
    42d8:	00004bf8 	rdprs	zero,zero,303
    42dc:	00004ac4 	movi	zero,299
    42e0:	00004dc8 	cmpgei	zero,zero,311
    42e4:	00004d4c 	andi	zero,zero,309
    42e8:	00004dc8 	cmpgei	zero,zero,311
    42ec:	00004ad4 	movui	zero,299
    42f0:	00004dc8 	cmpgei	zero,zero,311
    42f4:	00004dc8 	cmpgei	zero,zero,311
    42f8:	00004b14 	movui	zero,300
    42fc:	d9412a17 	ldw	r5,1192(sp)
    4300:	8163c83a 	sub	r17,r16,r5
    4304:	003f7d06 	br	40fc <__alt_data_end+0xfffae9cc>
    4308:	b809883a 	mov	r4,r23
    430c:	b00b883a 	mov	r5,r22
    4310:	00060f40 	call	60f4 <__swsetup_r>
    4314:	10002d1e 	bne	r2,zero,43cc <___vfprintf_internal_r+0x3f8>
    4318:	b0c0030b 	ldhu	r3,12(r22)
    431c:	01000284 	movi	r4,10
    4320:	1805883a 	mov	r2,r3
    4324:	1080068c 	andi	r2,r2,26
    4328:	113f541e 	bne	r2,r4,407c <__alt_data_end+0xfffae94c>
    432c:	b080038b 	ldhu	r2,14(r22)
    4330:	113fffcc 	andi	r4,r2,65535
    4334:	2120001c 	xori	r4,r4,32768
    4338:	21200004 	addi	r4,r4,-32768
    433c:	203f4f16 	blt	r4,zero,407c <__alt_data_end+0xfffae94c>
    4340:	b2c01917 	ldw	r11,100(r22)
    4344:	b2800717 	ldw	r10,28(r22)
    4348:	b2400917 	ldw	r9,36(r22)
    434c:	d9812a17 	ldw	r6,1192(sp)
    4350:	d9c12d17 	ldw	r7,1204(sp)
    4354:	02010004 	movi	r8,1024
    4358:	18ffff4c 	andi	r3,r3,65533
    435c:	d881078d 	sth	r2,1054(sp)
    4360:	b809883a 	mov	r4,r23
    4364:	d8800404 	addi	r2,sp,16
    4368:	d9410404 	addi	r5,sp,1040
    436c:	d8c1070d 	sth	r3,1052(sp)
    4370:	dac11d15 	stw	r11,1140(sp)
    4374:	da810b15 	stw	r10,1068(sp)
    4378:	da410d15 	stw	r9,1076(sp)
    437c:	d8810415 	stw	r2,1040(sp)
    4380:	d8810815 	stw	r2,1056(sp)
    4384:	da010615 	stw	r8,1048(sp)
    4388:	da010915 	stw	r8,1060(sp)
    438c:	d8010a15 	stw	zero,1064(sp)
    4390:	0003fd40 	call	3fd4 <___vfprintf_internal_r>
    4394:	1021883a 	mov	r16,r2
    4398:	10000416 	blt	r2,zero,43ac <___vfprintf_internal_r+0x3d8>
    439c:	b809883a 	mov	r4,r23
    43a0:	d9410404 	addi	r5,sp,1040
    43a4:	0007b740 	call	7b74 <_fflush_r>
    43a8:	1007301e 	bne	r2,zero,606c <___vfprintf_internal_r+0x2098>
    43ac:	d881070b 	ldhu	r2,1052(sp)
    43b0:	1080100c 	andi	r2,r2,64
    43b4:	10000326 	beq	r2,zero,43c4 <___vfprintf_internal_r+0x3f0>
    43b8:	b080030b 	ldhu	r2,12(r22)
    43bc:	10801014 	ori	r2,r2,64
    43c0:	b080030d 	sth	r2,12(r22)
    43c4:	8005883a 	mov	r2,r16
    43c8:	00000106 	br	43d0 <___vfprintf_internal_r+0x3fc>
    43cc:	00bfffc4 	movi	r2,-1
    43d0:	dfc14917 	ldw	ra,1316(sp)
    43d4:	df014817 	ldw	fp,1312(sp)
    43d8:	ddc14717 	ldw	r23,1308(sp)
    43dc:	dd814617 	ldw	r22,1304(sp)
    43e0:	dd414517 	ldw	r21,1300(sp)
    43e4:	dd014417 	ldw	r20,1296(sp)
    43e8:	dcc14317 	ldw	r19,1292(sp)
    43ec:	dc814217 	ldw	r18,1288(sp)
    43f0:	dc414117 	ldw	r17,1284(sp)
    43f4:	dc014017 	ldw	r16,1280(sp)
    43f8:	dec14a04 	addi	sp,sp,1320
    43fc:	f800283a 	ret
    4400:	b809883a 	mov	r4,r23
    4404:	b00b883a 	mov	r5,r22
    4408:	d9811e04 	addi	r6,sp,1144
    440c:	000ac180 	call	ac18 <__sprint_r>
    4410:	1000081e 	bne	r2,zero,4434 <___vfprintf_internal_r+0x460>
    4414:	da000404 	addi	r8,sp,16
    4418:	003f4506 	br	4130 <__alt_data_end+0xfffaea00>
    441c:	d8812017 	ldw	r2,1152(sp)
    4420:	10000426 	beq	r2,zero,4434 <___vfprintf_internal_r+0x460>
    4424:	b809883a 	mov	r4,r23
    4428:	b00b883a 	mov	r5,r22
    442c:	d9811e04 	addi	r6,sp,1144
    4430:	000ac180 	call	ac18 <__sprint_r>
    4434:	b080030b 	ldhu	r2,12(r22)
    4438:	1080100c 	andi	r2,r2,64
    443c:	103fe31e 	bne	r2,zero,43cc <__alt_data_end+0xfffaec9c>
    4440:	d8812f17 	ldw	r2,1212(sp)
    4444:	003fe206 	br	43d0 <__alt_data_end+0xfffaeca0>
    4448:	b809883a 	mov	r4,r23
    444c:	00081300 	call	8130 <__sinit>
    4450:	003ef806 	br	4034 <__alt_data_end+0xfffae904>
    4454:	e005883a 	mov	r2,fp
    4458:	9cc00114 	ori	r19,r19,4
    445c:	e4000007 	ldb	r16,0(fp)
    4460:	003f4406 	br	4174 <__alt_data_end+0xfffaea44>
    4464:	e4000007 	ldb	r16,0(fp)
    4468:	01000a84 	movi	r4,42
    446c:	e0800044 	addi	r2,fp,1
    4470:	8106f626 	beq	r16,r4,604c <___vfprintf_internal_r+0x2078>
    4474:	857ff404 	addi	r21,r16,-48
    4478:	1039883a 	mov	fp,r2
    447c:	0013883a 	mov	r9,zero
    4480:	957f3d36 	bltu	r18,r21,4178 <__alt_data_end+0xfffaea48>
    4484:	0009883a 	mov	r4,zero
    4488:	01400284 	movi	r5,10
    448c:	000d72c0 	call	d72c <__mulsi3>
    4490:	e4000007 	ldb	r16,0(fp)
    4494:	a889883a 	add	r4,r21,r2
    4498:	e7000044 	addi	fp,fp,1
    449c:	857ff404 	addi	r21,r16,-48
    44a0:	957ff92e 	bgeu	r18,r21,4488 <__alt_data_end+0xfffaed58>
    44a4:	2013883a 	mov	r9,r4
    44a8:	203f330e 	bge	r4,zero,4178 <__alt_data_end+0xfffaea48>
    44ac:	027fffc4 	movi	r9,-1
    44b0:	003f3106 	br	4178 <__alt_data_end+0xfffaea48>
    44b4:	9cc02014 	ori	r19,r19,128
    44b8:	e005883a 	mov	r2,fp
    44bc:	e4000007 	ldb	r16,0(fp)
    44c0:	003f2c06 	br	4174 <__alt_data_end+0xfffaea44>
    44c4:	857ff404 	addi	r21,r16,-48
    44c8:	d8012e15 	stw	zero,1208(sp)
    44cc:	e021883a 	mov	r16,fp
    44d0:	0009883a 	mov	r4,zero
    44d4:	da412c15 	stw	r9,1200(sp)
    44d8:	01400284 	movi	r5,10
    44dc:	000d72c0 	call	d72c <__mulsi3>
    44e0:	81400007 	ldb	r5,0(r16)
    44e4:	1549883a 	add	r4,r2,r21
    44e8:	e7000044 	addi	fp,fp,1
    44ec:	2d7ff404 	addi	r21,r5,-48
    44f0:	e021883a 	mov	r16,fp
    44f4:	957ff82e 	bgeu	r18,r21,44d8 <__alt_data_end+0xfffaeda8>
    44f8:	2821883a 	mov	r16,r5
    44fc:	d9012e15 	stw	r4,1208(sp)
    4500:	da412c17 	ldw	r9,1200(sp)
    4504:	003f1c06 	br	4178 <__alt_data_end+0xfffaea48>
    4508:	da012a17 	ldw	r8,1192(sp)
    450c:	df012a15 	stw	fp,1192(sp)
    4510:	9839883a 	mov	fp,r19
    4514:	dcc12b03 	ldbu	r19,1196(sp)
    4518:	e7000414 	ori	fp,fp,16
    451c:	e080080c 	andi	r2,fp,32
    4520:	dcc12785 	stb	r19,1182(sp)
    4524:	d8c12d17 	ldw	r3,1204(sp)
    4528:	1001ce26 	beq	r2,zero,4c64 <___vfprintf_internal_r+0xc90>
    452c:	d9012d17 	ldw	r4,1204(sp)
    4530:	18800117 	ldw	r2,4(r3)
    4534:	1c800017 	ldw	r18,0(r3)
    4538:	21000204 	addi	r4,r4,8
    453c:	d9012d15 	stw	r4,1204(sp)
    4540:	102b883a 	mov	r21,r2
    4544:	10044916 	blt	r2,zero,566c <___vfprintf_internal_r+0x1698>
    4548:	dcc12783 	ldbu	r19,1182(sp)
    454c:	da413215 	stw	r9,1224(sp)
    4550:	00800044 	movi	r2,1
    4554:	9546b03a 	or	r3,r18,r21
    4558:	48000216 	blt	r9,zero,4564 <___vfprintf_internal_r+0x590>
    455c:	013fdfc4 	movi	r4,-129
    4560:	e138703a 	and	fp,fp,r4
    4564:	1802251e 	bne	r3,zero,4dfc <___vfprintf_internal_r+0xe28>
    4568:	48031726 	beq	r9,zero,51c8 <___vfprintf_internal_r+0x11f4>
    456c:	10803fcc 	andi	r2,r2,255
    4570:	00c00044 	movi	r3,1
    4574:	10c24526 	beq	r2,r3,4e8c <___vfprintf_internal_r+0xeb8>
    4578:	00c00084 	movi	r3,2
    457c:	10c33426 	beq	r2,r3,5250 <___vfprintf_internal_r+0x127c>
    4580:	d8c10e04 	addi	r3,sp,1080
    4584:	9008d0fa 	srli	r4,r18,3
    4588:	a80a977a 	slli	r5,r21,29
    458c:	a82ad0fa 	srli	r21,r21,3
    4590:	948001cc 	andi	r18,r18,7
    4594:	90800c04 	addi	r2,r18,48
    4598:	18ffffc4 	addi	r3,r3,-1
    459c:	2924b03a 	or	r18,r5,r4
    45a0:	18800005 	stb	r2,0(r3)
    45a4:	9548b03a 	or	r4,r18,r21
    45a8:	203ff61e 	bne	r4,zero,4584 <__alt_data_end+0xfffaee54>
    45ac:	e100004c 	andi	r4,fp,1
    45b0:	d8c13115 	stw	r3,1220(sp)
    45b4:	20039a1e 	bne	r4,zero,5420 <___vfprintf_internal_r+0x144c>
    45b8:	d8812817 	ldw	r2,1184(sp)
    45bc:	10e3c83a 	sub	r17,r2,r3
    45c0:	8805883a 	mov	r2,r17
    45c4:	8a40010e 	bge	r17,r9,45cc <___vfprintf_internal_r+0x5f8>
    45c8:	4805883a 	mov	r2,r9
    45cc:	d8812b15 	stw	r2,1196(sp)
    45d0:	d8013415 	stw	zero,1232(sp)
    45d4:	98803fcc 	andi	r2,r19,255
    45d8:	1080201c 	xori	r2,r2,128
    45dc:	10bfe004 	addi	r2,r2,-128
    45e0:	10000326 	beq	r2,zero,45f0 <___vfprintf_internal_r+0x61c>
    45e4:	d8c12b17 	ldw	r3,1196(sp)
    45e8:	18c00044 	addi	r3,r3,1
    45ec:	d8c12b15 	stw	r3,1196(sp)
    45f0:	e0c0008c 	andi	r3,fp,2
    45f4:	d8c12c15 	stw	r3,1200(sp)
    45f8:	18000326 	beq	r3,zero,4608 <___vfprintf_internal_r+0x634>
    45fc:	d8c12b17 	ldw	r3,1196(sp)
    4600:	18c00084 	addi	r3,r3,2
    4604:	d8c12b15 	stw	r3,1196(sp)
    4608:	e0c0210c 	andi	r3,fp,132
    460c:	d8c13015 	stw	r3,1216(sp)
    4610:	1801f81e 	bne	r3,zero,4df4 <___vfprintf_internal_r+0xe20>
    4614:	d9012e17 	ldw	r4,1208(sp)
    4618:	d8c12b17 	ldw	r3,1196(sp)
    461c:	20ebc83a 	sub	r21,r4,r3
    4620:	0541f40e 	bge	zero,r21,4df4 <___vfprintf_internal_r+0xe20>
    4624:	02400404 	movi	r9,16
    4628:	d8c12017 	ldw	r3,1152(sp)
    462c:	d8811f17 	ldw	r2,1148(sp)
    4630:	4d45750e 	bge	r9,r21,5c08 <___vfprintf_internal_r+0x1c34>
    4634:	01400074 	movhi	r5,1
    4638:	294bf784 	addi	r5,r5,12254
    463c:	d9413615 	stw	r5,1240(sp)
    4640:	4827883a 	mov	r19,r9
    4644:	048001c4 	movi	r18,7
    4648:	00000306 	br	4658 <___vfprintf_internal_r+0x684>
    464c:	ad7ffc04 	addi	r21,r21,-16
    4650:	42000204 	addi	r8,r8,8
    4654:	9d40130e 	bge	r19,r21,46a4 <___vfprintf_internal_r+0x6d0>
    4658:	01000074 	movhi	r4,1
    465c:	18c00404 	addi	r3,r3,16
    4660:	10800044 	addi	r2,r2,1
    4664:	210bf784 	addi	r4,r4,12254
    4668:	41000015 	stw	r4,0(r8)
    466c:	44c00115 	stw	r19,4(r8)
    4670:	d8c12015 	stw	r3,1152(sp)
    4674:	d8811f15 	stw	r2,1148(sp)
    4678:	90bff40e 	bge	r18,r2,464c <__alt_data_end+0xfffaef1c>
    467c:	b809883a 	mov	r4,r23
    4680:	b00b883a 	mov	r5,r22
    4684:	d9811e04 	addi	r6,sp,1144
    4688:	000ac180 	call	ac18 <__sprint_r>
    468c:	103f691e 	bne	r2,zero,4434 <__alt_data_end+0xfffaed04>
    4690:	ad7ffc04 	addi	r21,r21,-16
    4694:	d8c12017 	ldw	r3,1152(sp)
    4698:	d8811f17 	ldw	r2,1148(sp)
    469c:	da000404 	addi	r8,sp,16
    46a0:	9d7fed16 	blt	r19,r21,4658 <__alt_data_end+0xfffaef28>
    46a4:	d9413617 	ldw	r5,1240(sp)
    46a8:	a8c7883a 	add	r3,r21,r3
    46ac:	10800044 	addi	r2,r2,1
    46b0:	41400015 	stw	r5,0(r8)
    46b4:	45400115 	stw	r21,4(r8)
    46b8:	d8c12015 	stw	r3,1152(sp)
    46bc:	d8811f15 	stw	r2,1148(sp)
    46c0:	010001c4 	movi	r4,7
    46c4:	20832b16 	blt	r4,r2,5374 <___vfprintf_internal_r+0x13a0>
    46c8:	d8812787 	ldb	r2,1182(sp)
    46cc:	42000204 	addi	r8,r8,8
    46d0:	10000c26 	beq	r2,zero,4704 <___vfprintf_internal_r+0x730>
    46d4:	d8811f17 	ldw	r2,1148(sp)
    46d8:	d9012784 	addi	r4,sp,1182
    46dc:	18c00044 	addi	r3,r3,1
    46e0:	10800044 	addi	r2,r2,1
    46e4:	41000015 	stw	r4,0(r8)
    46e8:	01000044 	movi	r4,1
    46ec:	41000115 	stw	r4,4(r8)
    46f0:	d8c12015 	stw	r3,1152(sp)
    46f4:	d8811f15 	stw	r2,1148(sp)
    46f8:	010001c4 	movi	r4,7
    46fc:	2082c416 	blt	r4,r2,5210 <___vfprintf_internal_r+0x123c>
    4700:	42000204 	addi	r8,r8,8
    4704:	d8812c17 	ldw	r2,1200(sp)
    4708:	10000c26 	beq	r2,zero,473c <___vfprintf_internal_r+0x768>
    470c:	d8811f17 	ldw	r2,1148(sp)
    4710:	d9012704 	addi	r4,sp,1180
    4714:	18c00084 	addi	r3,r3,2
    4718:	10800044 	addi	r2,r2,1
    471c:	41000015 	stw	r4,0(r8)
    4720:	01000084 	movi	r4,2
    4724:	41000115 	stw	r4,4(r8)
    4728:	d8c12015 	stw	r3,1152(sp)
    472c:	d8811f15 	stw	r2,1148(sp)
    4730:	010001c4 	movi	r4,7
    4734:	2082be16 	blt	r4,r2,5230 <___vfprintf_internal_r+0x125c>
    4738:	42000204 	addi	r8,r8,8
    473c:	d9013017 	ldw	r4,1216(sp)
    4740:	00802004 	movi	r2,128
    4744:	20822026 	beq	r4,r2,4fc8 <___vfprintf_internal_r+0xff4>
    4748:	d9413217 	ldw	r5,1224(sp)
    474c:	2c67c83a 	sub	r19,r5,r17
    4750:	04c0260e 	bge	zero,r19,47ec <___vfprintf_internal_r+0x818>
    4754:	05400404 	movi	r21,16
    4758:	d8811f17 	ldw	r2,1148(sp)
    475c:	acc4720e 	bge	r21,r19,5928 <___vfprintf_internal_r+0x1954>
    4760:	01400074 	movhi	r5,1
    4764:	294bf384 	addi	r5,r5,12238
    4768:	d9412c15 	stw	r5,1200(sp)
    476c:	048001c4 	movi	r18,7
    4770:	00000306 	br	4780 <___vfprintf_internal_r+0x7ac>
    4774:	9cfffc04 	addi	r19,r19,-16
    4778:	42000204 	addi	r8,r8,8
    477c:	acc0110e 	bge	r21,r19,47c4 <___vfprintf_internal_r+0x7f0>
    4780:	18c00404 	addi	r3,r3,16
    4784:	10800044 	addi	r2,r2,1
    4788:	45000015 	stw	r20,0(r8)
    478c:	45400115 	stw	r21,4(r8)
    4790:	d8c12015 	stw	r3,1152(sp)
    4794:	d8811f15 	stw	r2,1148(sp)
    4798:	90bff60e 	bge	r18,r2,4774 <__alt_data_end+0xfffaf044>
    479c:	b809883a 	mov	r4,r23
    47a0:	b00b883a 	mov	r5,r22
    47a4:	d9811e04 	addi	r6,sp,1144
    47a8:	000ac180 	call	ac18 <__sprint_r>
    47ac:	103f211e 	bne	r2,zero,4434 <__alt_data_end+0xfffaed04>
    47b0:	9cfffc04 	addi	r19,r19,-16
    47b4:	d8c12017 	ldw	r3,1152(sp)
    47b8:	d8811f17 	ldw	r2,1148(sp)
    47bc:	da000404 	addi	r8,sp,16
    47c0:	acffef16 	blt	r21,r19,4780 <__alt_data_end+0xfffaf050>
    47c4:	d9012c17 	ldw	r4,1200(sp)
    47c8:	1cc7883a 	add	r3,r3,r19
    47cc:	10800044 	addi	r2,r2,1
    47d0:	41000015 	stw	r4,0(r8)
    47d4:	44c00115 	stw	r19,4(r8)
    47d8:	d8c12015 	stw	r3,1152(sp)
    47dc:	d8811f15 	stw	r2,1148(sp)
    47e0:	010001c4 	movi	r4,7
    47e4:	20828216 	blt	r4,r2,51f0 <___vfprintf_internal_r+0x121c>
    47e8:	42000204 	addi	r8,r8,8
    47ec:	e080400c 	andi	r2,fp,256
    47f0:	1001ac1e 	bne	r2,zero,4ea4 <___vfprintf_internal_r+0xed0>
    47f4:	d8811f17 	ldw	r2,1148(sp)
    47f8:	d9413117 	ldw	r5,1220(sp)
    47fc:	1c47883a 	add	r3,r3,r17
    4800:	10800044 	addi	r2,r2,1
    4804:	41400015 	stw	r5,0(r8)
    4808:	44400115 	stw	r17,4(r8)
    480c:	d8c12015 	stw	r3,1152(sp)
    4810:	d8811f15 	stw	r2,1148(sp)
    4814:	010001c4 	movi	r4,7
    4818:	20825d16 	blt	r4,r2,5190 <___vfprintf_internal_r+0x11bc>
    481c:	42000204 	addi	r8,r8,8
    4820:	e080010c 	andi	r2,fp,4
    4824:	10003126 	beq	r2,zero,48ec <___vfprintf_internal_r+0x918>
    4828:	d8812e17 	ldw	r2,1208(sp)
    482c:	d9012b17 	ldw	r4,1196(sp)
    4830:	1121c83a 	sub	r16,r2,r4
    4834:	04002d0e 	bge	zero,r16,48ec <___vfprintf_internal_r+0x918>
    4838:	04400404 	movi	r17,16
    483c:	d8811f17 	ldw	r2,1148(sp)
    4840:	8c05340e 	bge	r17,r16,5d14 <___vfprintf_internal_r+0x1d40>
    4844:	01000074 	movhi	r4,1
    4848:	210bf784 	addi	r4,r4,12254
    484c:	d9013615 	stw	r4,1240(sp)
    4850:	048001c4 	movi	r18,7
    4854:	00000306 	br	4864 <___vfprintf_internal_r+0x890>
    4858:	843ffc04 	addi	r16,r16,-16
    485c:	42000204 	addi	r8,r8,8
    4860:	8c00130e 	bge	r17,r16,48b0 <___vfprintf_internal_r+0x8dc>
    4864:	01400074 	movhi	r5,1
    4868:	18c00404 	addi	r3,r3,16
    486c:	10800044 	addi	r2,r2,1
    4870:	294bf784 	addi	r5,r5,12254
    4874:	41400015 	stw	r5,0(r8)
    4878:	44400115 	stw	r17,4(r8)
    487c:	d8c12015 	stw	r3,1152(sp)
    4880:	d8811f15 	stw	r2,1148(sp)
    4884:	90bff40e 	bge	r18,r2,4858 <__alt_data_end+0xfffaf128>
    4888:	b809883a 	mov	r4,r23
    488c:	b00b883a 	mov	r5,r22
    4890:	d9811e04 	addi	r6,sp,1144
    4894:	000ac180 	call	ac18 <__sprint_r>
    4898:	103ee61e 	bne	r2,zero,4434 <__alt_data_end+0xfffaed04>
    489c:	843ffc04 	addi	r16,r16,-16
    48a0:	d8c12017 	ldw	r3,1152(sp)
    48a4:	d8811f17 	ldw	r2,1148(sp)
    48a8:	da000404 	addi	r8,sp,16
    48ac:	8c3fed16 	blt	r17,r16,4864 <__alt_data_end+0xfffaf134>
    48b0:	d9013617 	ldw	r4,1240(sp)
    48b4:	1c07883a 	add	r3,r3,r16
    48b8:	10800044 	addi	r2,r2,1
    48bc:	41000015 	stw	r4,0(r8)
    48c0:	44000115 	stw	r16,4(r8)
    48c4:	d8c12015 	stw	r3,1152(sp)
    48c8:	d8811f15 	stw	r2,1148(sp)
    48cc:	010001c4 	movi	r4,7
    48d0:	2080060e 	bge	r4,r2,48ec <___vfprintf_internal_r+0x918>
    48d4:	b809883a 	mov	r4,r23
    48d8:	b00b883a 	mov	r5,r22
    48dc:	d9811e04 	addi	r6,sp,1144
    48e0:	000ac180 	call	ac18 <__sprint_r>
    48e4:	103ed31e 	bne	r2,zero,4434 <__alt_data_end+0xfffaed04>
    48e8:	d8c12017 	ldw	r3,1152(sp)
    48ec:	df012b17 	ldw	fp,1196(sp)
    48f0:	d9412e17 	ldw	r5,1208(sp)
    48f4:	e140010e 	bge	fp,r5,48fc <___vfprintf_internal_r+0x928>
    48f8:	2839883a 	mov	fp,r5
    48fc:	d8812f17 	ldw	r2,1212(sp)
    4900:	1705883a 	add	r2,r2,fp
    4904:	d8812f15 	stw	r2,1212(sp)
    4908:	1802291e 	bne	r3,zero,51b0 <___vfprintf_internal_r+0x11dc>
    490c:	d8c12a17 	ldw	r3,1192(sp)
    4910:	d8011f15 	stw	zero,1148(sp)
    4914:	da000404 	addi	r8,sp,16
    4918:	18800007 	ldb	r2,0(r3)
    491c:	103ded1e 	bne	r2,zero,40d4 <__alt_data_end+0xfffae9a4>
    4920:	dc012a17 	ldw	r16,1192(sp)
    4924:	003e0506 	br	413c <__alt_data_end+0xfffaea0c>
    4928:	d9012d17 	ldw	r4,1204(sp)
    492c:	d9412d17 	ldw	r5,1204(sp)
    4930:	da012a17 	ldw	r8,1192(sp)
    4934:	21000017 	ldw	r4,0(r4)
    4938:	29400117 	ldw	r5,4(r5)
    493c:	df012a15 	stw	fp,1192(sp)
    4940:	9839883a 	mov	fp,r19
    4944:	dcc12b03 	ldbu	r19,1196(sp)
    4948:	d9013715 	stw	r4,1244(sp)
    494c:	d9413915 	stw	r5,1252(sp)
    4950:	da013f15 	stw	r8,1276(sp)
    4954:	da413e15 	stw	r9,1272(sp)
    4958:	dcc12785 	stb	r19,1182(sp)
    495c:	000a8c80 	call	a8c8 <__fpclassifyd>
    4960:	d8c12d17 	ldw	r3,1204(sp)
    4964:	04400044 	movi	r17,1
    4968:	da013f17 	ldw	r8,1276(sp)
    496c:	1c800204 	addi	r18,r3,8
    4970:	da413e17 	ldw	r9,1272(sp)
    4974:	d9013717 	ldw	r4,1244(sp)
    4978:	d9413917 	ldw	r5,1252(sp)
    497c:	1443451e 	bne	r2,r17,5694 <___vfprintf_internal_r+0x16c0>
    4980:	000d883a 	mov	r6,zero
    4984:	000f883a 	mov	r7,zero
    4988:	000ead40 	call	ead4 <__ledf2>
    498c:	da013f17 	ldw	r8,1276(sp)
    4990:	1004fe16 	blt	r2,zero,5d8c <___vfprintf_internal_r+0x1db8>
    4994:	dcc12783 	ldbu	r19,1182(sp)
    4998:	008011c4 	movi	r2,71
    499c:	14045d0e 	bge	r2,r16,5b14 <___vfprintf_internal_r+0x1b40>
    49a0:	01400074 	movhi	r5,1
    49a4:	294be404 	addi	r5,r5,12176
    49a8:	d9413115 	stw	r5,1220(sp)
    49ac:	00c000c4 	movi	r3,3
    49b0:	00bfdfc4 	movi	r2,-129
    49b4:	d8c12b15 	stw	r3,1196(sp)
    49b8:	e0b8703a 	and	fp,fp,r2
    49bc:	dc812d15 	stw	r18,1204(sp)
    49c0:	1823883a 	mov	r17,r3
    49c4:	d8013215 	stw	zero,1224(sp)
    49c8:	d8013415 	stw	zero,1232(sp)
    49cc:	003f0106 	br	45d4 <__alt_data_end+0xfffaeea4>
    49d0:	9cc00214 	ori	r19,r19,8
    49d4:	e005883a 	mov	r2,fp
    49d8:	e4000007 	ldb	r16,0(fp)
    49dc:	003de506 	br	4174 <__alt_data_end+0xfffaea44>
    49e0:	da012a17 	ldw	r8,1192(sp)
    49e4:	df012a15 	stw	fp,1192(sp)
    49e8:	9f000414 	ori	fp,r19,16
    49ec:	e0c0080c 	andi	r3,fp,32
    49f0:	d8812d17 	ldw	r2,1204(sp)
    49f4:	18007626 	beq	r3,zero,4bd0 <___vfprintf_internal_r+0xbfc>
    49f8:	d9412d17 	ldw	r5,1204(sp)
    49fc:	14800017 	ldw	r18,0(r2)
    4a00:	15400117 	ldw	r21,4(r2)
    4a04:	29400204 	addi	r5,r5,8
    4a08:	d9412d15 	stw	r5,1204(sp)
    4a0c:	0005883a 	mov	r2,zero
    4a10:	9546b03a 	or	r3,r18,r21
    4a14:	d8012785 	stb	zero,1182(sp)
    4a18:	da413215 	stw	r9,1224(sp)
    4a1c:	0027883a 	mov	r19,zero
    4a20:	003ecd06 	br	4558 <__alt_data_end+0xfffaee28>
    4a24:	da012a17 	ldw	r8,1192(sp)
    4a28:	df012a15 	stw	fp,1192(sp)
    4a2c:	9f000414 	ori	fp,r19,16
    4a30:	e0c0080c 	andi	r3,fp,32
    4a34:	d8812d17 	ldw	r2,1204(sp)
    4a38:	18002c26 	beq	r3,zero,4aec <___vfprintf_internal_r+0xb18>
    4a3c:	d9012d17 	ldw	r4,1204(sp)
    4a40:	14800017 	ldw	r18,0(r2)
    4a44:	15400117 	ldw	r21,4(r2)
    4a48:	21000204 	addi	r4,r4,8
    4a4c:	d9012d15 	stw	r4,1204(sp)
    4a50:	00800044 	movi	r2,1
    4a54:	9546b03a 	or	r3,r18,r21
    4a58:	003fee06 	br	4a14 <__alt_data_end+0xfffaf2e4>
    4a5c:	da012a17 	ldw	r8,1192(sp)
    4a60:	df012a15 	stw	fp,1192(sp)
    4a64:	9839883a 	mov	fp,r19
    4a68:	dcc12b03 	ldbu	r19,1196(sp)
    4a6c:	01400074 	movhi	r5,1
    4a70:	294be704 	addi	r5,r5,12188
    4a74:	dcc12785 	stb	r19,1182(sp)
    4a78:	d9413b15 	stw	r5,1260(sp)
    4a7c:	e0c0080c 	andi	r3,fp,32
    4a80:	d8812d17 	ldw	r2,1204(sp)
    4a84:	18002e26 	beq	r3,zero,4b40 <___vfprintf_internal_r+0xb6c>
    4a88:	d9412d17 	ldw	r5,1204(sp)
    4a8c:	14800017 	ldw	r18,0(r2)
    4a90:	15400117 	ldw	r21,4(r2)
    4a94:	29400204 	addi	r5,r5,8
    4a98:	d9412d15 	stw	r5,1204(sp)
    4a9c:	e080004c 	andi	r2,fp,1
    4aa0:	10025c26 	beq	r2,zero,5414 <___vfprintf_internal_r+0x1440>
    4aa4:	9546b03a 	or	r3,r18,r21
    4aa8:	18038f26 	beq	r3,zero,58e8 <___vfprintf_internal_r+0x1914>
    4aac:	00800c04 	movi	r2,48
    4ab0:	d8812705 	stb	r2,1180(sp)
    4ab4:	dc012745 	stb	r16,1181(sp)
    4ab8:	e7000094 	ori	fp,fp,2
    4abc:	00800084 	movi	r2,2
    4ac0:	003fd406 	br	4a14 <__alt_data_end+0xfffaf2e4>
    4ac4:	9cc00814 	ori	r19,r19,32
    4ac8:	e005883a 	mov	r2,fp
    4acc:	e4000007 	ldb	r16,0(fp)
    4ad0:	003da806 	br	4174 <__alt_data_end+0xfffaea44>
    4ad4:	da012a17 	ldw	r8,1192(sp)
    4ad8:	df012a15 	stw	fp,1192(sp)
    4adc:	9839883a 	mov	fp,r19
    4ae0:	e0c0080c 	andi	r3,fp,32
    4ae4:	d8812d17 	ldw	r2,1204(sp)
    4ae8:	183fd41e 	bne	r3,zero,4a3c <__alt_data_end+0xfffaf30c>
    4aec:	e0c0040c 	andi	r3,fp,16
    4af0:	18035f26 	beq	r3,zero,5870 <___vfprintf_internal_r+0x189c>
    4af4:	d9412d17 	ldw	r5,1204(sp)
    4af8:	14800017 	ldw	r18,0(r2)
    4afc:	002b883a 	mov	r21,zero
    4b00:	29400104 	addi	r5,r5,4
    4b04:	d9412d15 	stw	r5,1204(sp)
    4b08:	00800044 	movi	r2,1
    4b0c:	9007883a 	mov	r3,r18
    4b10:	003fc006 	br	4a14 <__alt_data_end+0xfffaf2e4>
    4b14:	da012a17 	ldw	r8,1192(sp)
    4b18:	df012a15 	stw	fp,1192(sp)
    4b1c:	9839883a 	mov	fp,r19
    4b20:	dcc12b03 	ldbu	r19,1196(sp)
    4b24:	01000074 	movhi	r4,1
    4b28:	210bec04 	addi	r4,r4,12208
    4b2c:	d9013b15 	stw	r4,1260(sp)
    4b30:	dcc12785 	stb	r19,1182(sp)
    4b34:	e0c0080c 	andi	r3,fp,32
    4b38:	d8812d17 	ldw	r2,1204(sp)
    4b3c:	183fd21e 	bne	r3,zero,4a88 <__alt_data_end+0xfffaf358>
    4b40:	e0c0040c 	andi	r3,fp,16
    4b44:	18035426 	beq	r3,zero,5898 <___vfprintf_internal_r+0x18c4>
    4b48:	d8c12d17 	ldw	r3,1204(sp)
    4b4c:	14800017 	ldw	r18,0(r2)
    4b50:	002b883a 	mov	r21,zero
    4b54:	18c00104 	addi	r3,r3,4
    4b58:	d8c12d15 	stw	r3,1204(sp)
    4b5c:	003fcf06 	br	4a9c <__alt_data_end+0xfffaf36c>
    4b60:	e4000007 	ldb	r16,0(fp)
    4b64:	00801b04 	movi	r2,108
    4b68:	8083f726 	beq	r16,r2,5b48 <___vfprintf_internal_r+0x1b74>
    4b6c:	9cc00414 	ori	r19,r19,16
    4b70:	e005883a 	mov	r2,fp
    4b74:	003d7f06 	br	4174 <__alt_data_end+0xfffaea44>
    4b78:	da012a17 	ldw	r8,1192(sp)
    4b7c:	df012a15 	stw	fp,1192(sp)
    4b80:	9839883a 	mov	fp,r19
    4b84:	dcc12b03 	ldbu	r19,1196(sp)
    4b88:	e080080c 	andi	r2,fp,32
    4b8c:	dcc12785 	stb	r19,1182(sp)
    4b90:	10032226 	beq	r2,zero,581c <___vfprintf_internal_r+0x1848>
    4b94:	d9412d17 	ldw	r5,1204(sp)
    4b98:	d9012f17 	ldw	r4,1212(sp)
    4b9c:	28800017 	ldw	r2,0(r5)
    4ba0:	2007d7fa 	srai	r3,r4,31
    4ba4:	29400104 	addi	r5,r5,4
    4ba8:	d9412d15 	stw	r5,1204(sp)
    4bac:	11000015 	stw	r4,0(r2)
    4bb0:	10c00115 	stw	r3,4(r2)
    4bb4:	003d4406 	br	40c8 <__alt_data_end+0xfffae998>
    4bb8:	da012a17 	ldw	r8,1192(sp)
    4bbc:	df012a15 	stw	fp,1192(sp)
    4bc0:	9839883a 	mov	fp,r19
    4bc4:	e0c0080c 	andi	r3,fp,32
    4bc8:	d8812d17 	ldw	r2,1204(sp)
    4bcc:	183f8a1e 	bne	r3,zero,49f8 <__alt_data_end+0xfffaf2c8>
    4bd0:	e0c0040c 	andi	r3,fp,16
    4bd4:	18031c26 	beq	r3,zero,5848 <___vfprintf_internal_r+0x1874>
    4bd8:	14800017 	ldw	r18,0(r2)
    4bdc:	d8812d17 	ldw	r2,1204(sp)
    4be0:	002b883a 	mov	r21,zero
    4be4:	9007883a 	mov	r3,r18
    4be8:	10800104 	addi	r2,r2,4
    4bec:	d8812d15 	stw	r2,1204(sp)
    4bf0:	0005883a 	mov	r2,zero
    4bf4:	003f8706 	br	4a14 <__alt_data_end+0xfffaf2e4>
    4bf8:	d9412d17 	ldw	r5,1204(sp)
    4bfc:	00800c04 	movi	r2,48
    4c00:	d8812705 	stb	r2,1180(sp)
    4c04:	2c800017 	ldw	r18,0(r5)
    4c08:	00801e04 	movi	r2,120
    4c0c:	d8812745 	stb	r2,1181(sp)
    4c10:	00800074 	movhi	r2,1
    4c14:	108bec04 	addi	r2,r2,12208
    4c18:	29400104 	addi	r5,r5,4
    4c1c:	da012a17 	ldw	r8,1192(sp)
    4c20:	d8813b15 	stw	r2,1260(sp)
    4c24:	df012a15 	stw	fp,1192(sp)
    4c28:	002b883a 	mov	r21,zero
    4c2c:	9f000094 	ori	fp,r19,2
    4c30:	d9412d15 	stw	r5,1204(sp)
    4c34:	00800084 	movi	r2,2
    4c38:	04001e04 	movi	r16,120
    4c3c:	9007883a 	mov	r3,r18
    4c40:	003f7406 	br	4a14 <__alt_data_end+0xfffaf2e4>
    4c44:	da012a17 	ldw	r8,1192(sp)
    4c48:	df012a15 	stw	fp,1192(sp)
    4c4c:	9839883a 	mov	fp,r19
    4c50:	dcc12b03 	ldbu	r19,1196(sp)
    4c54:	e080080c 	andi	r2,fp,32
    4c58:	d8c12d17 	ldw	r3,1204(sp)
    4c5c:	dcc12785 	stb	r19,1182(sp)
    4c60:	103e321e 	bne	r2,zero,452c <__alt_data_end+0xfffaedfc>
    4c64:	e080040c 	andi	r2,fp,16
    4c68:	10031326 	beq	r2,zero,58b8 <___vfprintf_internal_r+0x18e4>
    4c6c:	1c800017 	ldw	r18,0(r3)
    4c70:	d9412d17 	ldw	r5,1204(sp)
    4c74:	902bd7fa 	srai	r21,r18,31
    4c78:	29400104 	addi	r5,r5,4
    4c7c:	d9412d15 	stw	r5,1204(sp)
    4c80:	a805883a 	mov	r2,r21
    4c84:	003e2f06 	br	4544 <__alt_data_end+0xfffaee14>
    4c88:	9cc01014 	ori	r19,r19,64
    4c8c:	e005883a 	mov	r2,fp
    4c90:	e4000007 	ldb	r16,0(fp)
    4c94:	003d3706 	br	4174 <__alt_data_end+0xfffaea44>
    4c98:	d8c12d17 	ldw	r3,1204(sp)
    4c9c:	d9012d17 	ldw	r4,1204(sp)
    4ca0:	da012a17 	ldw	r8,1192(sp)
    4ca4:	18800017 	ldw	r2,0(r3)
    4ca8:	21000104 	addi	r4,r4,4
    4cac:	00c00044 	movi	r3,1
    4cb0:	df012a15 	stw	fp,1192(sp)
    4cb4:	d8c12b15 	stw	r3,1196(sp)
    4cb8:	9839883a 	mov	fp,r19
    4cbc:	d8012785 	stb	zero,1182(sp)
    4cc0:	d8810405 	stb	r2,1040(sp)
    4cc4:	d9012d15 	stw	r4,1204(sp)
    4cc8:	1823883a 	mov	r17,r3
    4ccc:	d8c10404 	addi	r3,sp,1040
    4cd0:	d8013215 	stw	zero,1224(sp)
    4cd4:	d8013415 	stw	zero,1232(sp)
    4cd8:	d8c13115 	stw	r3,1220(sp)
    4cdc:	0005883a 	mov	r2,zero
    4ce0:	003e4306 	br	45f0 <__alt_data_end+0xfffaeec0>
    4ce4:	d8812b07 	ldb	r2,1196(sp)
    4ce8:	1002fc1e 	bne	r2,zero,58dc <___vfprintf_internal_r+0x1908>
    4cec:	00c00804 	movi	r3,32
    4cf0:	d8c12b05 	stb	r3,1196(sp)
    4cf4:	e005883a 	mov	r2,fp
    4cf8:	e4000007 	ldb	r16,0(fp)
    4cfc:	003d1d06 	br	4174 <__alt_data_end+0xfffaea44>
    4d00:	9cc00054 	ori	r19,r19,1
    4d04:	e005883a 	mov	r2,fp
    4d08:	e4000007 	ldb	r16,0(fp)
    4d0c:	003d1906 	br	4174 <__alt_data_end+0xfffaea44>
    4d10:	d9012d17 	ldw	r4,1204(sp)
    4d14:	d9412d17 	ldw	r5,1204(sp)
    4d18:	21000017 	ldw	r4,0(r4)
    4d1c:	28c00104 	addi	r3,r5,4
    4d20:	d9012e15 	stw	r4,1208(sp)
    4d24:	20038c16 	blt	r4,zero,5b58 <___vfprintf_internal_r+0x1b84>
    4d28:	d8c12d15 	stw	r3,1204(sp)
    4d2c:	e005883a 	mov	r2,fp
    4d30:	e4000007 	ldb	r16,0(fp)
    4d34:	003d0f06 	br	4174 <__alt_data_end+0xfffaea44>
    4d38:	00c00ac4 	movi	r3,43
    4d3c:	d8c12b05 	stb	r3,1196(sp)
    4d40:	e005883a 	mov	r2,fp
    4d44:	e4000007 	ldb	r16,0(fp)
    4d48:	003d0a06 	br	4174 <__alt_data_end+0xfffaea44>
    4d4c:	d8c12d17 	ldw	r3,1204(sp)
    4d50:	d9012d17 	ldw	r4,1204(sp)
    4d54:	da012a17 	ldw	r8,1192(sp)
    4d58:	18c00017 	ldw	r3,0(r3)
    4d5c:	df012a15 	stw	fp,1192(sp)
    4d60:	d8012785 	stb	zero,1182(sp)
    4d64:	d8c13115 	stw	r3,1220(sp)
    4d68:	9839883a 	mov	fp,r19
    4d6c:	24800104 	addi	r18,r4,4
    4d70:	1803f726 	beq	r3,zero,5d50 <___vfprintf_internal_r+0x1d7c>
    4d74:	d9013117 	ldw	r4,1220(sp)
    4d78:	48038916 	blt	r9,zero,5ba0 <___vfprintf_internal_r+0x1bcc>
    4d7c:	480d883a 	mov	r6,r9
    4d80:	000b883a 	mov	r5,zero
    4d84:	da013f15 	stw	r8,1276(sp)
    4d88:	da413e15 	stw	r9,1272(sp)
    4d8c:	0008e400 	call	8e40 <memchr>
    4d90:	da013f17 	ldw	r8,1276(sp)
    4d94:	da413e17 	ldw	r9,1272(sp)
    4d98:	10045926 	beq	r2,zero,5f00 <___vfprintf_internal_r+0x1f2c>
    4d9c:	d8c13117 	ldw	r3,1220(sp)
    4da0:	10e3c83a 	sub	r17,r2,r3
    4da4:	4c433516 	blt	r9,r17,5a7c <___vfprintf_internal_r+0x1aa8>
    4da8:	8805883a 	mov	r2,r17
    4dac:	88038116 	blt	r17,zero,5bb4 <___vfprintf_internal_r+0x1be0>
    4db0:	dcc12783 	ldbu	r19,1182(sp)
    4db4:	d8812b15 	stw	r2,1196(sp)
    4db8:	dc812d15 	stw	r18,1204(sp)
    4dbc:	d8013215 	stw	zero,1224(sp)
    4dc0:	d8013415 	stw	zero,1232(sp)
    4dc4:	003e0306 	br	45d4 <__alt_data_end+0xfffaeea4>
    4dc8:	da012a17 	ldw	r8,1192(sp)
    4dcc:	df012a15 	stw	fp,1192(sp)
    4dd0:	9839883a 	mov	fp,r19
    4dd4:	dcc12b03 	ldbu	r19,1196(sp)
    4dd8:	dcc12785 	stb	r19,1182(sp)
    4ddc:	803d8f26 	beq	r16,zero,441c <__alt_data_end+0xfffaecec>
    4de0:	00c00044 	movi	r3,1
    4de4:	d8c12b15 	stw	r3,1196(sp)
    4de8:	dc010405 	stb	r16,1040(sp)
    4dec:	d8012785 	stb	zero,1182(sp)
    4df0:	003fb506 	br	4cc8 <__alt_data_end+0xfffaf598>
    4df4:	d8c12017 	ldw	r3,1152(sp)
    4df8:	003e3506 	br	46d0 <__alt_data_end+0xfffaefa0>
    4dfc:	10803fcc 	andi	r2,r2,255
    4e00:	00c00044 	movi	r3,1
    4e04:	10fddc1e 	bne	r2,r3,4578 <__alt_data_end+0xfffaee48>
    4e08:	a800021e 	bne	r21,zero,4e14 <___vfprintf_internal_r+0xe40>
    4e0c:	00800244 	movi	r2,9
    4e10:	14801e2e 	bgeu	r2,r18,4e8c <___vfprintf_internal_r+0xeb8>
    4e14:	dc012b15 	stw	r16,1196(sp)
    4e18:	dc410e04 	addi	r17,sp,1080
    4e1c:	9021883a 	mov	r16,r18
    4e20:	da012c15 	stw	r8,1200(sp)
    4e24:	a825883a 	mov	r18,r21
    4e28:	482b883a 	mov	r21,r9
    4e2c:	8009883a 	mov	r4,r16
    4e30:	900b883a 	mov	r5,r18
    4e34:	01800284 	movi	r6,10
    4e38:	000f883a 	mov	r7,zero
    4e3c:	000d1100 	call	d110 <__umoddi3>
    4e40:	10800c04 	addi	r2,r2,48
    4e44:	8c7fffc4 	addi	r17,r17,-1
    4e48:	8009883a 	mov	r4,r16
    4e4c:	900b883a 	mov	r5,r18
    4e50:	01800284 	movi	r6,10
    4e54:	000f883a 	mov	r7,zero
    4e58:	88800005 	stb	r2,0(r17)
    4e5c:	000cad00 	call	cad0 <__udivdi3>
    4e60:	1021883a 	mov	r16,r2
    4e64:	10c4b03a 	or	r2,r2,r3
    4e68:	1825883a 	mov	r18,r3
    4e6c:	103fef1e 	bne	r2,zero,4e2c <__alt_data_end+0xfffaf6fc>
    4e70:	d9012817 	ldw	r4,1184(sp)
    4e74:	dc413115 	stw	r17,1220(sp)
    4e78:	dc012b17 	ldw	r16,1196(sp)
    4e7c:	da012c17 	ldw	r8,1200(sp)
    4e80:	a813883a 	mov	r9,r21
    4e84:	2463c83a 	sub	r17,r4,r17
    4e88:	003dcd06 	br	45c0 <__alt_data_end+0xfffaee90>
    4e8c:	94800c04 	addi	r18,r18,48
    4e90:	d8c10dc4 	addi	r3,sp,1079
    4e94:	dc810dc5 	stb	r18,1079(sp)
    4e98:	dc413c17 	ldw	r17,1264(sp)
    4e9c:	d8c13115 	stw	r3,1220(sp)
    4ea0:	003dc706 	br	45c0 <__alt_data_end+0xfffaee90>
    4ea4:	00801944 	movi	r2,101
    4ea8:	1400720e 	bge	r2,r16,5074 <___vfprintf_internal_r+0x10a0>
    4eac:	d9013717 	ldw	r4,1244(sp)
    4eb0:	d9413917 	ldw	r5,1252(sp)
    4eb4:	000d883a 	mov	r6,zero
    4eb8:	000f883a 	mov	r7,zero
    4ebc:	d8c13d15 	stw	r3,1268(sp)
    4ec0:	da013f15 	stw	r8,1276(sp)
    4ec4:	000e9700 	call	e970 <__eqdf2>
    4ec8:	d8c13d17 	ldw	r3,1268(sp)
    4ecc:	da013f17 	ldw	r8,1276(sp)
    4ed0:	1000f41e 	bne	r2,zero,52a4 <___vfprintf_internal_r+0x12d0>
    4ed4:	d8811f17 	ldw	r2,1148(sp)
    4ed8:	01000074 	movhi	r4,1
    4edc:	210bf304 	addi	r4,r4,12236
    4ee0:	18c00044 	addi	r3,r3,1
    4ee4:	10800044 	addi	r2,r2,1
    4ee8:	41000015 	stw	r4,0(r8)
    4eec:	01000044 	movi	r4,1
    4ef0:	41000115 	stw	r4,4(r8)
    4ef4:	d8c12015 	stw	r3,1152(sp)
    4ef8:	d8811f15 	stw	r2,1148(sp)
    4efc:	010001c4 	movi	r4,7
    4f00:	20828d16 	blt	r4,r2,5938 <___vfprintf_internal_r+0x1964>
    4f04:	42000204 	addi	r8,r8,8
    4f08:	d8812617 	ldw	r2,1176(sp)
    4f0c:	d9413317 	ldw	r5,1228(sp)
    4f10:	11400216 	blt	r2,r5,4f1c <___vfprintf_internal_r+0xf48>
    4f14:	e080004c 	andi	r2,fp,1
    4f18:	103e4126 	beq	r2,zero,4820 <__alt_data_end+0xfffaf0f0>
    4f1c:	d8813817 	ldw	r2,1248(sp)
    4f20:	d9013517 	ldw	r4,1236(sp)
    4f24:	d9413817 	ldw	r5,1248(sp)
    4f28:	1887883a 	add	r3,r3,r2
    4f2c:	d8811f17 	ldw	r2,1148(sp)
    4f30:	41000015 	stw	r4,0(r8)
    4f34:	41400115 	stw	r5,4(r8)
    4f38:	10800044 	addi	r2,r2,1
    4f3c:	d8c12015 	stw	r3,1152(sp)
    4f40:	d8811f15 	stw	r2,1148(sp)
    4f44:	010001c4 	movi	r4,7
    4f48:	20830916 	blt	r4,r2,5b70 <___vfprintf_internal_r+0x1b9c>
    4f4c:	42000204 	addi	r8,r8,8
    4f50:	d8813317 	ldw	r2,1228(sp)
    4f54:	143fffc4 	addi	r16,r2,-1
    4f58:	043e310e 	bge	zero,r16,4820 <__alt_data_end+0xfffaf0f0>
    4f5c:	04400404 	movi	r17,16
    4f60:	d8811f17 	ldw	r2,1148(sp)
    4f64:	8c007e0e 	bge	r17,r16,5160 <___vfprintf_internal_r+0x118c>
    4f68:	01400074 	movhi	r5,1
    4f6c:	294bf384 	addi	r5,r5,12238
    4f70:	d9412c15 	stw	r5,1200(sp)
    4f74:	04c001c4 	movi	r19,7
    4f78:	00000306 	br	4f88 <___vfprintf_internal_r+0xfb4>
    4f7c:	42000204 	addi	r8,r8,8
    4f80:	843ffc04 	addi	r16,r16,-16
    4f84:	8c00790e 	bge	r17,r16,516c <___vfprintf_internal_r+0x1198>
    4f88:	18c00404 	addi	r3,r3,16
    4f8c:	10800044 	addi	r2,r2,1
    4f90:	45000015 	stw	r20,0(r8)
    4f94:	44400115 	stw	r17,4(r8)
    4f98:	d8c12015 	stw	r3,1152(sp)
    4f9c:	d8811f15 	stw	r2,1148(sp)
    4fa0:	98bff60e 	bge	r19,r2,4f7c <__alt_data_end+0xfffaf84c>
    4fa4:	b809883a 	mov	r4,r23
    4fa8:	b00b883a 	mov	r5,r22
    4fac:	d9811e04 	addi	r6,sp,1144
    4fb0:	000ac180 	call	ac18 <__sprint_r>
    4fb4:	103d1f1e 	bne	r2,zero,4434 <__alt_data_end+0xfffaed04>
    4fb8:	d8c12017 	ldw	r3,1152(sp)
    4fbc:	d8811f17 	ldw	r2,1148(sp)
    4fc0:	da000404 	addi	r8,sp,16
    4fc4:	003fee06 	br	4f80 <__alt_data_end+0xfffaf850>
    4fc8:	d9412e17 	ldw	r5,1208(sp)
    4fcc:	d8812b17 	ldw	r2,1196(sp)
    4fd0:	28a7c83a 	sub	r19,r5,r2
    4fd4:	04fddc0e 	bge	zero,r19,4748 <__alt_data_end+0xfffaf018>
    4fd8:	05400404 	movi	r21,16
    4fdc:	d8811f17 	ldw	r2,1148(sp)
    4fe0:	acc3870e 	bge	r21,r19,5e00 <___vfprintf_internal_r+0x1e2c>
    4fe4:	01400074 	movhi	r5,1
    4fe8:	294bf384 	addi	r5,r5,12238
    4fec:	d9412c15 	stw	r5,1200(sp)
    4ff0:	048001c4 	movi	r18,7
    4ff4:	00000306 	br	5004 <___vfprintf_internal_r+0x1030>
    4ff8:	9cfffc04 	addi	r19,r19,-16
    4ffc:	42000204 	addi	r8,r8,8
    5000:	acc0110e 	bge	r21,r19,5048 <___vfprintf_internal_r+0x1074>
    5004:	18c00404 	addi	r3,r3,16
    5008:	10800044 	addi	r2,r2,1
    500c:	45000015 	stw	r20,0(r8)
    5010:	45400115 	stw	r21,4(r8)
    5014:	d8c12015 	stw	r3,1152(sp)
    5018:	d8811f15 	stw	r2,1148(sp)
    501c:	90bff60e 	bge	r18,r2,4ff8 <__alt_data_end+0xfffaf8c8>
    5020:	b809883a 	mov	r4,r23
    5024:	b00b883a 	mov	r5,r22
    5028:	d9811e04 	addi	r6,sp,1144
    502c:	000ac180 	call	ac18 <__sprint_r>
    5030:	103d001e 	bne	r2,zero,4434 <__alt_data_end+0xfffaed04>
    5034:	9cfffc04 	addi	r19,r19,-16
    5038:	d8c12017 	ldw	r3,1152(sp)
    503c:	d8811f17 	ldw	r2,1148(sp)
    5040:	da000404 	addi	r8,sp,16
    5044:	acffef16 	blt	r21,r19,5004 <__alt_data_end+0xfffaf8d4>
    5048:	d9012c17 	ldw	r4,1200(sp)
    504c:	1cc7883a 	add	r3,r3,r19
    5050:	10800044 	addi	r2,r2,1
    5054:	41000015 	stw	r4,0(r8)
    5058:	44c00115 	stw	r19,4(r8)
    505c:	d8c12015 	stw	r3,1152(sp)
    5060:	d8811f15 	stw	r2,1148(sp)
    5064:	010001c4 	movi	r4,7
    5068:	20817816 	blt	r4,r2,564c <___vfprintf_internal_r+0x1678>
    506c:	42000204 	addi	r8,r8,8
    5070:	003db506 	br	4748 <__alt_data_end+0xfffaf018>
    5074:	d9413317 	ldw	r5,1228(sp)
    5078:	00800044 	movi	r2,1
    507c:	18c00044 	addi	r3,r3,1
    5080:	11413e0e 	bge	r2,r5,557c <___vfprintf_internal_r+0x15a8>
    5084:	dc011f17 	ldw	r16,1148(sp)
    5088:	d8813117 	ldw	r2,1220(sp)
    508c:	d8c12015 	stw	r3,1152(sp)
    5090:	84000044 	addi	r16,r16,1
    5094:	40800015 	stw	r2,0(r8)
    5098:	00800044 	movi	r2,1
    509c:	40800115 	stw	r2,4(r8)
    50a0:	dc011f15 	stw	r16,1148(sp)
    50a4:	008001c4 	movi	r2,7
    50a8:	14015616 	blt	r2,r16,5604 <___vfprintf_internal_r+0x1630>
    50ac:	42000204 	addi	r8,r8,8
    50b0:	d9013817 	ldw	r4,1248(sp)
    50b4:	d9413517 	ldw	r5,1236(sp)
    50b8:	84000044 	addi	r16,r16,1
    50bc:	1907883a 	add	r3,r3,r4
    50c0:	41400015 	stw	r5,0(r8)
    50c4:	41000115 	stw	r4,4(r8)
    50c8:	d8c12015 	stw	r3,1152(sp)
    50cc:	dc011f15 	stw	r16,1148(sp)
    50d0:	008001c4 	movi	r2,7
    50d4:	14015416 	blt	r2,r16,5628 <___vfprintf_internal_r+0x1654>
    50d8:	44400204 	addi	r17,r8,8
    50dc:	d9013717 	ldw	r4,1244(sp)
    50e0:	d9413917 	ldw	r5,1252(sp)
    50e4:	000d883a 	mov	r6,zero
    50e8:	000f883a 	mov	r7,zero
    50ec:	d8c13d15 	stw	r3,1268(sp)
    50f0:	000e9700 	call	e970 <__eqdf2>
    50f4:	d8c13d17 	ldw	r3,1268(sp)
    50f8:	1000a726 	beq	r2,zero,5398 <___vfprintf_internal_r+0x13c4>
    50fc:	d9013317 	ldw	r4,1228(sp)
    5100:	d9413117 	ldw	r5,1220(sp)
    5104:	84000044 	addi	r16,r16,1
    5108:	20bfffc4 	addi	r2,r4,-1
    510c:	1887883a 	add	r3,r3,r2
    5110:	29000044 	addi	r4,r5,1
    5114:	88800115 	stw	r2,4(r17)
    5118:	89000015 	stw	r4,0(r17)
    511c:	d8c12015 	stw	r3,1152(sp)
    5120:	dc011f15 	stw	r16,1148(sp)
    5124:	008001c4 	movi	r2,7
    5128:	14012d16 	blt	r2,r16,55e0 <___vfprintf_internal_r+0x160c>
    512c:	8c400204 	addi	r17,r17,8
    5130:	d9413a17 	ldw	r5,1256(sp)
    5134:	dcc122c4 	addi	r19,sp,1163
    5138:	84000044 	addi	r16,r16,1
    513c:	28c7883a 	add	r3,r5,r3
    5140:	8cc00015 	stw	r19,0(r17)
    5144:	89400115 	stw	r5,4(r17)
    5148:	d8c12015 	stw	r3,1152(sp)
    514c:	dc011f15 	stw	r16,1148(sp)
    5150:	008001c4 	movi	r2,7
    5154:	14000e16 	blt	r2,r16,5190 <___vfprintf_internal_r+0x11bc>
    5158:	8a000204 	addi	r8,r17,8
    515c:	003db006 	br	4820 <__alt_data_end+0xfffaf0f0>
    5160:	01000074 	movhi	r4,1
    5164:	210bf384 	addi	r4,r4,12238
    5168:	d9012c15 	stw	r4,1200(sp)
    516c:	d9012c17 	ldw	r4,1200(sp)
    5170:	1c07883a 	add	r3,r3,r16
    5174:	44000115 	stw	r16,4(r8)
    5178:	41000015 	stw	r4,0(r8)
    517c:	10800044 	addi	r2,r2,1
    5180:	d8c12015 	stw	r3,1152(sp)
    5184:	d8811f15 	stw	r2,1148(sp)
    5188:	010001c4 	movi	r4,7
    518c:	20bda30e 	bge	r4,r2,481c <__alt_data_end+0xfffaf0ec>
    5190:	b809883a 	mov	r4,r23
    5194:	b00b883a 	mov	r5,r22
    5198:	d9811e04 	addi	r6,sp,1144
    519c:	000ac180 	call	ac18 <__sprint_r>
    51a0:	103ca41e 	bne	r2,zero,4434 <__alt_data_end+0xfffaed04>
    51a4:	d8c12017 	ldw	r3,1152(sp)
    51a8:	da000404 	addi	r8,sp,16
    51ac:	003d9c06 	br	4820 <__alt_data_end+0xfffaf0f0>
    51b0:	b809883a 	mov	r4,r23
    51b4:	b00b883a 	mov	r5,r22
    51b8:	d9811e04 	addi	r6,sp,1144
    51bc:	000ac180 	call	ac18 <__sprint_r>
    51c0:	103dd226 	beq	r2,zero,490c <__alt_data_end+0xfffaf1dc>
    51c4:	003c9b06 	br	4434 <__alt_data_end+0xfffaed04>
    51c8:	10803fcc 	andi	r2,r2,255
    51cc:	1000311e 	bne	r2,zero,5294 <___vfprintf_internal_r+0x12c0>
    51d0:	e080004c 	andi	r2,fp,1
    51d4:	10002f26 	beq	r2,zero,5294 <___vfprintf_internal_r+0x12c0>
    51d8:	00800c04 	movi	r2,48
    51dc:	d8c10dc4 	addi	r3,sp,1079
    51e0:	d8810dc5 	stb	r2,1079(sp)
    51e4:	dc413c17 	ldw	r17,1264(sp)
    51e8:	d8c13115 	stw	r3,1220(sp)
    51ec:	003cf406 	br	45c0 <__alt_data_end+0xfffaee90>
    51f0:	b809883a 	mov	r4,r23
    51f4:	b00b883a 	mov	r5,r22
    51f8:	d9811e04 	addi	r6,sp,1144
    51fc:	000ac180 	call	ac18 <__sprint_r>
    5200:	103c8c1e 	bne	r2,zero,4434 <__alt_data_end+0xfffaed04>
    5204:	d8c12017 	ldw	r3,1152(sp)
    5208:	da000404 	addi	r8,sp,16
    520c:	003d7706 	br	47ec <__alt_data_end+0xfffaf0bc>
    5210:	b809883a 	mov	r4,r23
    5214:	b00b883a 	mov	r5,r22
    5218:	d9811e04 	addi	r6,sp,1144
    521c:	000ac180 	call	ac18 <__sprint_r>
    5220:	103c841e 	bne	r2,zero,4434 <__alt_data_end+0xfffaed04>
    5224:	d8c12017 	ldw	r3,1152(sp)
    5228:	da000404 	addi	r8,sp,16
    522c:	003d3506 	br	4704 <__alt_data_end+0xfffaefd4>
    5230:	b809883a 	mov	r4,r23
    5234:	b00b883a 	mov	r5,r22
    5238:	d9811e04 	addi	r6,sp,1144
    523c:	000ac180 	call	ac18 <__sprint_r>
    5240:	103c7c1e 	bne	r2,zero,4434 <__alt_data_end+0xfffaed04>
    5244:	d8c12017 	ldw	r3,1152(sp)
    5248:	da000404 	addi	r8,sp,16
    524c:	003d3b06 	br	473c <__alt_data_end+0xfffaf00c>
    5250:	d9413b17 	ldw	r5,1260(sp)
    5254:	d8c10e04 	addi	r3,sp,1080
    5258:	908003cc 	andi	r2,r18,15
    525c:	a808973a 	slli	r4,r21,28
    5260:	2885883a 	add	r2,r5,r2
    5264:	9024d13a 	srli	r18,r18,4
    5268:	10800003 	ldbu	r2,0(r2)
    526c:	a82ad13a 	srli	r21,r21,4
    5270:	18ffffc4 	addi	r3,r3,-1
    5274:	24a4b03a 	or	r18,r4,r18
    5278:	18800005 	stb	r2,0(r3)
    527c:	9544b03a 	or	r2,r18,r21
    5280:	103ff51e 	bne	r2,zero,5258 <__alt_data_end+0xfffafb28>
    5284:	d9412817 	ldw	r5,1184(sp)
    5288:	d8c13115 	stw	r3,1220(sp)
    528c:	28e3c83a 	sub	r17,r5,r3
    5290:	003ccb06 	br	45c0 <__alt_data_end+0xfffaee90>
    5294:	d8c10e04 	addi	r3,sp,1080
    5298:	0023883a 	mov	r17,zero
    529c:	d8c13115 	stw	r3,1220(sp)
    52a0:	003cc706 	br	45c0 <__alt_data_end+0xfffaee90>
    52a4:	dc012617 	ldw	r16,1176(sp)
    52a8:	0401ab0e 	bge	zero,r16,5958 <___vfprintf_internal_r+0x1984>
    52ac:	d8813317 	ldw	r2,1228(sp)
    52b0:	d9413117 	ldw	r5,1220(sp)
    52b4:	d9013417 	ldw	r4,1232(sp)
    52b8:	1023883a 	mov	r17,r2
    52bc:	28a1883a 	add	r16,r5,r2
    52c0:	2080010e 	bge	r4,r2,52c8 <___vfprintf_internal_r+0x12f4>
    52c4:	2023883a 	mov	r17,r4
    52c8:	04400b0e 	bge	zero,r17,52f8 <___vfprintf_internal_r+0x1324>
    52cc:	d8811f17 	ldw	r2,1148(sp)
    52d0:	d9413117 	ldw	r5,1220(sp)
    52d4:	1c47883a 	add	r3,r3,r17
    52d8:	10800044 	addi	r2,r2,1
    52dc:	41400015 	stw	r5,0(r8)
    52e0:	44400115 	stw	r17,4(r8)
    52e4:	d8c12015 	stw	r3,1152(sp)
    52e8:	d8811f15 	stw	r2,1148(sp)
    52ec:	010001c4 	movi	r4,7
    52f0:	20826716 	blt	r4,r2,5c90 <___vfprintf_internal_r+0x1cbc>
    52f4:	42000204 	addi	r8,r8,8
    52f8:	88026316 	blt	r17,zero,5c88 <___vfprintf_internal_r+0x1cb4>
    52fc:	d8813417 	ldw	r2,1232(sp)
    5300:	1463c83a 	sub	r17,r2,r17
    5304:	0440590e 	bge	zero,r17,546c <___vfprintf_internal_r+0x1498>
    5308:	04c00404 	movi	r19,16
    530c:	d8811f17 	ldw	r2,1148(sp)
    5310:	9c41770e 	bge	r19,r17,58f0 <___vfprintf_internal_r+0x191c>
    5314:	01400074 	movhi	r5,1
    5318:	294bf384 	addi	r5,r5,12238
    531c:	d9412c15 	stw	r5,1200(sp)
    5320:	054001c4 	movi	r21,7
    5324:	00000306 	br	5334 <___vfprintf_internal_r+0x1360>
    5328:	42000204 	addi	r8,r8,8
    532c:	8c7ffc04 	addi	r17,r17,-16
    5330:	9c41720e 	bge	r19,r17,58fc <___vfprintf_internal_r+0x1928>
    5334:	18c00404 	addi	r3,r3,16
    5338:	10800044 	addi	r2,r2,1
    533c:	45000015 	stw	r20,0(r8)
    5340:	44c00115 	stw	r19,4(r8)
    5344:	d8c12015 	stw	r3,1152(sp)
    5348:	d8811f15 	stw	r2,1148(sp)
    534c:	a8bff60e 	bge	r21,r2,5328 <__alt_data_end+0xfffafbf8>
    5350:	b809883a 	mov	r4,r23
    5354:	b00b883a 	mov	r5,r22
    5358:	d9811e04 	addi	r6,sp,1144
    535c:	000ac180 	call	ac18 <__sprint_r>
    5360:	103c341e 	bne	r2,zero,4434 <__alt_data_end+0xfffaed04>
    5364:	d8c12017 	ldw	r3,1152(sp)
    5368:	d8811f17 	ldw	r2,1148(sp)
    536c:	da000404 	addi	r8,sp,16
    5370:	003fee06 	br	532c <__alt_data_end+0xfffafbfc>
    5374:	b809883a 	mov	r4,r23
    5378:	b00b883a 	mov	r5,r22
    537c:	d9811e04 	addi	r6,sp,1144
    5380:	000ac180 	call	ac18 <__sprint_r>
    5384:	103c2b1e 	bne	r2,zero,4434 <__alt_data_end+0xfffaed04>
    5388:	d8c12017 	ldw	r3,1152(sp)
    538c:	d8812787 	ldb	r2,1182(sp)
    5390:	da000404 	addi	r8,sp,16
    5394:	003cce06 	br	46d0 <__alt_data_end+0xfffaefa0>
    5398:	d8813317 	ldw	r2,1228(sp)
    539c:	14ffffc4 	addi	r19,r2,-1
    53a0:	04ff630e 	bge	zero,r19,5130 <__alt_data_end+0xfffafa00>
    53a4:	05400404 	movi	r21,16
    53a8:	acc0810e 	bge	r21,r19,55b0 <___vfprintf_internal_r+0x15dc>
    53ac:	01400074 	movhi	r5,1
    53b0:	294bf384 	addi	r5,r5,12238
    53b4:	d9412c15 	stw	r5,1200(sp)
    53b8:	01c001c4 	movi	r7,7
    53bc:	00000306 	br	53cc <___vfprintf_internal_r+0x13f8>
    53c0:	8c400204 	addi	r17,r17,8
    53c4:	9cfffc04 	addi	r19,r19,-16
    53c8:	acc07c0e 	bge	r21,r19,55bc <___vfprintf_internal_r+0x15e8>
    53cc:	18c00404 	addi	r3,r3,16
    53d0:	84000044 	addi	r16,r16,1
    53d4:	8d000015 	stw	r20,0(r17)
    53d8:	8d400115 	stw	r21,4(r17)
    53dc:	d8c12015 	stw	r3,1152(sp)
    53e0:	dc011f15 	stw	r16,1148(sp)
    53e4:	3c3ff60e 	bge	r7,r16,53c0 <__alt_data_end+0xfffafc90>
    53e8:	b809883a 	mov	r4,r23
    53ec:	b00b883a 	mov	r5,r22
    53f0:	d9811e04 	addi	r6,sp,1144
    53f4:	d9c13d15 	stw	r7,1268(sp)
    53f8:	000ac180 	call	ac18 <__sprint_r>
    53fc:	d9c13d17 	ldw	r7,1268(sp)
    5400:	103c0c1e 	bne	r2,zero,4434 <__alt_data_end+0xfffaed04>
    5404:	d8c12017 	ldw	r3,1152(sp)
    5408:	dc011f17 	ldw	r16,1148(sp)
    540c:	dc400404 	addi	r17,sp,16
    5410:	003fec06 	br	53c4 <__alt_data_end+0xfffafc94>
    5414:	00800084 	movi	r2,2
    5418:	9546b03a 	or	r3,r18,r21
    541c:	003d7d06 	br	4a14 <__alt_data_end+0xfffaf2e4>
    5420:	10803fcc 	andi	r2,r2,255
    5424:	1080201c 	xori	r2,r2,128
    5428:	10bfe004 	addi	r2,r2,-128
    542c:	01000c04 	movi	r4,48
    5430:	1101d726 	beq	r2,r4,5b90 <___vfprintf_internal_r+0x1bbc>
    5434:	d9413117 	ldw	r5,1220(sp)
    5438:	d8812817 	ldw	r2,1184(sp)
    543c:	193fffc5 	stb	r4,-1(r3)
    5440:	297fffc4 	addi	r5,r5,-1
    5444:	d9413115 	stw	r5,1220(sp)
    5448:	1163c83a 	sub	r17,r2,r5
    544c:	003c5c06 	br	45c0 <__alt_data_end+0xfffaee90>
    5450:	b809883a 	mov	r4,r23
    5454:	b00b883a 	mov	r5,r22
    5458:	d9811e04 	addi	r6,sp,1144
    545c:	000ac180 	call	ac18 <__sprint_r>
    5460:	103bf41e 	bne	r2,zero,4434 <__alt_data_end+0xfffaed04>
    5464:	d8c12017 	ldw	r3,1152(sp)
    5468:	da000404 	addi	r8,sp,16
    546c:	d9413117 	ldw	r5,1220(sp)
    5470:	d9013417 	ldw	r4,1232(sp)
    5474:	d8812617 	ldw	r2,1176(sp)
    5478:	2923883a 	add	r17,r5,r4
    547c:	d9413317 	ldw	r5,1228(sp)
    5480:	11400216 	blt	r2,r5,548c <___vfprintf_internal_r+0x14b8>
    5484:	e100004c 	andi	r4,fp,1
    5488:	20000d26 	beq	r4,zero,54c0 <___vfprintf_internal_r+0x14ec>
    548c:	d9013817 	ldw	r4,1248(sp)
    5490:	d9413517 	ldw	r5,1236(sp)
    5494:	1907883a 	add	r3,r3,r4
    5498:	d9011f17 	ldw	r4,1148(sp)
    549c:	41400015 	stw	r5,0(r8)
    54a0:	d9413817 	ldw	r5,1248(sp)
    54a4:	21000044 	addi	r4,r4,1
    54a8:	d8c12015 	stw	r3,1152(sp)
    54ac:	41400115 	stw	r5,4(r8)
    54b0:	d9011f15 	stw	r4,1148(sp)
    54b4:	014001c4 	movi	r5,7
    54b8:	2901fd16 	blt	r5,r4,5cb0 <___vfprintf_internal_r+0x1cdc>
    54bc:	42000204 	addi	r8,r8,8
    54c0:	d9013317 	ldw	r4,1228(sp)
    54c4:	2085c83a 	sub	r2,r4,r2
    54c8:	8449c83a 	sub	r4,r16,r17
    54cc:	1021883a 	mov	r16,r2
    54d0:	2080010e 	bge	r4,r2,54d8 <___vfprintf_internal_r+0x1504>
    54d4:	2021883a 	mov	r16,r4
    54d8:	04000a0e 	bge	zero,r16,5504 <___vfprintf_internal_r+0x1530>
    54dc:	d9011f17 	ldw	r4,1148(sp)
    54e0:	1c07883a 	add	r3,r3,r16
    54e4:	44400015 	stw	r17,0(r8)
    54e8:	21000044 	addi	r4,r4,1
    54ec:	44000115 	stw	r16,4(r8)
    54f0:	d8c12015 	stw	r3,1152(sp)
    54f4:	d9011f15 	stw	r4,1148(sp)
    54f8:	014001c4 	movi	r5,7
    54fc:	29020916 	blt	r5,r4,5d24 <___vfprintf_internal_r+0x1d50>
    5500:	42000204 	addi	r8,r8,8
    5504:	80020116 	blt	r16,zero,5d0c <___vfprintf_internal_r+0x1d38>
    5508:	1421c83a 	sub	r16,r2,r16
    550c:	043cc40e 	bge	zero,r16,4820 <__alt_data_end+0xfffaf0f0>
    5510:	04400404 	movi	r17,16
    5514:	d8811f17 	ldw	r2,1148(sp)
    5518:	8c3f110e 	bge	r17,r16,5160 <__alt_data_end+0xfffafa30>
    551c:	01400074 	movhi	r5,1
    5520:	294bf384 	addi	r5,r5,12238
    5524:	d9412c15 	stw	r5,1200(sp)
    5528:	04c001c4 	movi	r19,7
    552c:	00000306 	br	553c <___vfprintf_internal_r+0x1568>
    5530:	42000204 	addi	r8,r8,8
    5534:	843ffc04 	addi	r16,r16,-16
    5538:	8c3f0c0e 	bge	r17,r16,516c <__alt_data_end+0xfffafa3c>
    553c:	18c00404 	addi	r3,r3,16
    5540:	10800044 	addi	r2,r2,1
    5544:	45000015 	stw	r20,0(r8)
    5548:	44400115 	stw	r17,4(r8)
    554c:	d8c12015 	stw	r3,1152(sp)
    5550:	d8811f15 	stw	r2,1148(sp)
    5554:	98bff60e 	bge	r19,r2,5530 <__alt_data_end+0xfffafe00>
    5558:	b809883a 	mov	r4,r23
    555c:	b00b883a 	mov	r5,r22
    5560:	d9811e04 	addi	r6,sp,1144
    5564:	000ac180 	call	ac18 <__sprint_r>
    5568:	103bb21e 	bne	r2,zero,4434 <__alt_data_end+0xfffaed04>
    556c:	d8c12017 	ldw	r3,1152(sp)
    5570:	d8811f17 	ldw	r2,1148(sp)
    5574:	da000404 	addi	r8,sp,16
    5578:	003fee06 	br	5534 <__alt_data_end+0xfffafe04>
    557c:	e088703a 	and	r4,fp,r2
    5580:	203ec01e 	bne	r4,zero,5084 <__alt_data_end+0xfffaf954>
    5584:	dc011f17 	ldw	r16,1148(sp)
    5588:	d9013117 	ldw	r4,1220(sp)
    558c:	40800115 	stw	r2,4(r8)
    5590:	84000044 	addi	r16,r16,1
    5594:	41000015 	stw	r4,0(r8)
    5598:	d8c12015 	stw	r3,1152(sp)
    559c:	dc011f15 	stw	r16,1148(sp)
    55a0:	008001c4 	movi	r2,7
    55a4:	14000e16 	blt	r2,r16,55e0 <___vfprintf_internal_r+0x160c>
    55a8:	44400204 	addi	r17,r8,8
    55ac:	003ee006 	br	5130 <__alt_data_end+0xfffafa00>
    55b0:	01000074 	movhi	r4,1
    55b4:	210bf384 	addi	r4,r4,12238
    55b8:	d9012c15 	stw	r4,1200(sp)
    55bc:	d8812c17 	ldw	r2,1200(sp)
    55c0:	1cc7883a 	add	r3,r3,r19
    55c4:	84000044 	addi	r16,r16,1
    55c8:	88800015 	stw	r2,0(r17)
    55cc:	8cc00115 	stw	r19,4(r17)
    55d0:	d8c12015 	stw	r3,1152(sp)
    55d4:	dc011f15 	stw	r16,1148(sp)
    55d8:	008001c4 	movi	r2,7
    55dc:	143ed30e 	bge	r2,r16,512c <__alt_data_end+0xfffaf9fc>
    55e0:	b809883a 	mov	r4,r23
    55e4:	b00b883a 	mov	r5,r22
    55e8:	d9811e04 	addi	r6,sp,1144
    55ec:	000ac180 	call	ac18 <__sprint_r>
    55f0:	103b901e 	bne	r2,zero,4434 <__alt_data_end+0xfffaed04>
    55f4:	d8c12017 	ldw	r3,1152(sp)
    55f8:	dc011f17 	ldw	r16,1148(sp)
    55fc:	dc400404 	addi	r17,sp,16
    5600:	003ecb06 	br	5130 <__alt_data_end+0xfffafa00>
    5604:	b809883a 	mov	r4,r23
    5608:	b00b883a 	mov	r5,r22
    560c:	d9811e04 	addi	r6,sp,1144
    5610:	000ac180 	call	ac18 <__sprint_r>
    5614:	103b871e 	bne	r2,zero,4434 <__alt_data_end+0xfffaed04>
    5618:	d8c12017 	ldw	r3,1152(sp)
    561c:	dc011f17 	ldw	r16,1148(sp)
    5620:	da000404 	addi	r8,sp,16
    5624:	003ea206 	br	50b0 <__alt_data_end+0xfffaf980>
    5628:	b809883a 	mov	r4,r23
    562c:	b00b883a 	mov	r5,r22
    5630:	d9811e04 	addi	r6,sp,1144
    5634:	000ac180 	call	ac18 <__sprint_r>
    5638:	103b7e1e 	bne	r2,zero,4434 <__alt_data_end+0xfffaed04>
    563c:	d8c12017 	ldw	r3,1152(sp)
    5640:	dc011f17 	ldw	r16,1148(sp)
    5644:	dc400404 	addi	r17,sp,16
    5648:	003ea406 	br	50dc <__alt_data_end+0xfffaf9ac>
    564c:	b809883a 	mov	r4,r23
    5650:	b00b883a 	mov	r5,r22
    5654:	d9811e04 	addi	r6,sp,1144
    5658:	000ac180 	call	ac18 <__sprint_r>
    565c:	103b751e 	bne	r2,zero,4434 <__alt_data_end+0xfffaed04>
    5660:	d8c12017 	ldw	r3,1152(sp)
    5664:	da000404 	addi	r8,sp,16
    5668:	003c3706 	br	4748 <__alt_data_end+0xfffaf018>
    566c:	04a5c83a 	sub	r18,zero,r18
    5670:	9004c03a 	cmpne	r2,r18,zero
    5674:	056bc83a 	sub	r21,zero,r21
    5678:	a8abc83a 	sub	r21,r21,r2
    567c:	04c00b44 	movi	r19,45
    5680:	dcc12785 	stb	r19,1182(sp)
    5684:	da413215 	stw	r9,1224(sp)
    5688:	00800044 	movi	r2,1
    568c:	9546b03a 	or	r3,r18,r21
    5690:	003bb106 	br	4558 <__alt_data_end+0xfffaee28>
    5694:	da013f15 	stw	r8,1276(sp)
    5698:	da413e15 	stw	r9,1272(sp)
    569c:	000a8c80 	call	a8c8 <__fpclassifyd>
    56a0:	da013f17 	ldw	r8,1276(sp)
    56a4:	da413e17 	ldw	r9,1272(sp)
    56a8:	1000e526 	beq	r2,zero,5a40 <___vfprintf_internal_r+0x1a6c>
    56ac:	04fff7c4 	movi	r19,-33
    56b0:	00bfffc4 	movi	r2,-1
    56b4:	84e6703a 	and	r19,r16,r19
    56b8:	48822926 	beq	r9,r2,5f60 <___vfprintf_internal_r+0x1f8c>
    56bc:	008011c4 	movi	r2,71
    56c0:	98821626 	beq	r19,r2,5f1c <___vfprintf_internal_r+0x1f48>
    56c4:	d9013917 	ldw	r4,1252(sp)
    56c8:	e0c04014 	ori	r3,fp,256
    56cc:	d8c12d15 	stw	r3,1204(sp)
    56d0:	20021f16 	blt	r4,zero,5f50 <___vfprintf_internal_r+0x1f7c>
    56d4:	dc413917 	ldw	r17,1252(sp)
    56d8:	d8012b05 	stb	zero,1196(sp)
    56dc:	00801984 	movi	r2,102
    56e0:	80814d26 	beq	r16,r2,5c18 <___vfprintf_internal_r+0x1c44>
    56e4:	00801184 	movi	r2,70
    56e8:	80814b26 	beq	r16,r2,5c18 <___vfprintf_internal_r+0x1c44>
    56ec:	00801144 	movi	r2,69
    56f0:	98821d26 	beq	r19,r2,5f68 <___vfprintf_internal_r+0x1f94>
    56f4:	482b883a 	mov	r21,r9
    56f8:	d8812604 	addi	r2,sp,1176
    56fc:	d8800115 	stw	r2,4(sp)
    5700:	d9413717 	ldw	r5,1244(sp)
    5704:	d8812504 	addi	r2,sp,1172
    5708:	d8800215 	stw	r2,8(sp)
    570c:	d8812104 	addi	r2,sp,1156
    5710:	dd400015 	stw	r21,0(sp)
    5714:	d8800315 	stw	r2,12(sp)
    5718:	b809883a 	mov	r4,r23
    571c:	880d883a 	mov	r6,r17
    5720:	01c00084 	movi	r7,2
    5724:	da013f15 	stw	r8,1276(sp)
    5728:	da413e15 	stw	r9,1272(sp)
    572c:	000644c0 	call	644c <_dtoa_r>
    5730:	d8813115 	stw	r2,1220(sp)
    5734:	008019c4 	movi	r2,103
    5738:	da013f17 	ldw	r8,1276(sp)
    573c:	da413e17 	ldw	r9,1272(sp)
    5740:	80800226 	beq	r16,r2,574c <___vfprintf_internal_r+0x1778>
    5744:	008011c4 	movi	r2,71
    5748:	8081451e 	bne	r16,r2,5c60 <___vfprintf_internal_r+0x1c8c>
    574c:	e080004c 	andi	r2,fp,1
    5750:	10021e26 	beq	r2,zero,5fcc <___vfprintf_internal_r+0x1ff8>
    5754:	d8c13117 	ldw	r3,1220(sp)
    5758:	1d55883a 	add	r10,r3,r21
    575c:	d9013717 	ldw	r4,1244(sp)
    5760:	880b883a 	mov	r5,r17
    5764:	000d883a 	mov	r6,zero
    5768:	000f883a 	mov	r7,zero
    576c:	da013f15 	stw	r8,1276(sp)
    5770:	da413e15 	stw	r9,1272(sp)
    5774:	da813d15 	stw	r10,1268(sp)
    5778:	000e9700 	call	e970 <__eqdf2>
    577c:	da013f17 	ldw	r8,1276(sp)
    5780:	da413e17 	ldw	r9,1272(sp)
    5784:	da813d17 	ldw	r10,1268(sp)
    5788:	1001a126 	beq	r2,zero,5e10 <___vfprintf_internal_r+0x1e3c>
    578c:	d8812117 	ldw	r2,1156(sp)
    5790:	1280062e 	bgeu	r2,r10,57ac <___vfprintf_internal_r+0x17d8>
    5794:	01000c04 	movi	r4,48
    5798:	10c00044 	addi	r3,r2,1
    579c:	d8c12115 	stw	r3,1156(sp)
    57a0:	11000005 	stb	r4,0(r2)
    57a4:	d8812117 	ldw	r2,1156(sp)
    57a8:	12bffb36 	bltu	r2,r10,5798 <__alt_data_end+0xfffb0068>
    57ac:	d8c13117 	ldw	r3,1220(sp)
    57b0:	10c5c83a 	sub	r2,r2,r3
    57b4:	d8813315 	stw	r2,1228(sp)
    57b8:	008011c4 	movi	r2,71
    57bc:	98818926 	beq	r19,r2,5de4 <___vfprintf_internal_r+0x1e10>
    57c0:	00801944 	movi	r2,101
    57c4:	14023c0e 	bge	r2,r16,60b8 <___vfprintf_internal_r+0x20e4>
    57c8:	d8c12617 	ldw	r3,1176(sp)
    57cc:	00801984 	movi	r2,102
    57d0:	d8c13415 	stw	r3,1232(sp)
    57d4:	8081ef26 	beq	r16,r2,5f94 <___vfprintf_internal_r+0x1fc0>
    57d8:	d8c13417 	ldw	r3,1232(sp)
    57dc:	d9013317 	ldw	r4,1228(sp)
    57e0:	1901e316 	blt	r3,r4,5f70 <___vfprintf_internal_r+0x1f9c>
    57e4:	e080004c 	andi	r2,fp,1
    57e8:	1001f426 	beq	r2,zero,5fbc <___vfprintf_internal_r+0x1fe8>
    57ec:	d8c13417 	ldw	r3,1232(sp)
    57f0:	1c400044 	addi	r17,r3,1
    57f4:	8839883a 	mov	fp,r17
    57f8:	8801e416 	blt	r17,zero,5f8c <___vfprintf_internal_r+0x1fb8>
    57fc:	dd412b07 	ldb	r21,1196(sp)
    5800:	a801701e 	bne	r21,zero,5dc4 <___vfprintf_internal_r+0x1df0>
    5804:	df012b15 	stw	fp,1196(sp)
    5808:	dcc12783 	ldbu	r19,1182(sp)
    580c:	df012d17 	ldw	fp,1204(sp)
    5810:	d8013215 	stw	zero,1224(sp)
    5814:	dc812d15 	stw	r18,1204(sp)
    5818:	003b6e06 	br	45d4 <__alt_data_end+0xfffaeea4>
    581c:	e080040c 	andi	r2,fp,16
    5820:	1000b51e 	bne	r2,zero,5af8 <___vfprintf_internal_r+0x1b24>
    5824:	e080100c 	andi	r2,fp,64
    5828:	10015b26 	beq	r2,zero,5d98 <___vfprintf_internal_r+0x1dc4>
    582c:	d9012d17 	ldw	r4,1204(sp)
    5830:	d9412f17 	ldw	r5,1212(sp)
    5834:	20800017 	ldw	r2,0(r4)
    5838:	21000104 	addi	r4,r4,4
    583c:	d9012d15 	stw	r4,1204(sp)
    5840:	1140000d 	sth	r5,0(r2)
    5844:	003a2006 	br	40c8 <__alt_data_end+0xfffae998>
    5848:	e0c0100c 	andi	r3,fp,64
    584c:	1800a226 	beq	r3,zero,5ad8 <___vfprintf_internal_r+0x1b04>
    5850:	d8c12d17 	ldw	r3,1204(sp)
    5854:	1480000b 	ldhu	r18,0(r2)
    5858:	002b883a 	mov	r21,zero
    585c:	18c00104 	addi	r3,r3,4
    5860:	d8c12d15 	stw	r3,1204(sp)
    5864:	0005883a 	mov	r2,zero
    5868:	9007883a 	mov	r3,r18
    586c:	003c6906 	br	4a14 <__alt_data_end+0xfffaf2e4>
    5870:	e0c0100c 	andi	r3,fp,64
    5874:	18009026 	beq	r3,zero,5ab8 <___vfprintf_internal_r+0x1ae4>
    5878:	1480000b 	ldhu	r18,0(r2)
    587c:	d8812d17 	ldw	r2,1204(sp)
    5880:	002b883a 	mov	r21,zero
    5884:	9007883a 	mov	r3,r18
    5888:	10800104 	addi	r2,r2,4
    588c:	d8812d15 	stw	r2,1204(sp)
    5890:	00800044 	movi	r2,1
    5894:	003c5f06 	br	4a14 <__alt_data_end+0xfffaf2e4>
    5898:	e0c0100c 	andi	r3,fp,64
    589c:	18008026 	beq	r3,zero,5aa0 <___vfprintf_internal_r+0x1acc>
    58a0:	d9012d17 	ldw	r4,1204(sp)
    58a4:	1480000b 	ldhu	r18,0(r2)
    58a8:	002b883a 	mov	r21,zero
    58ac:	21000104 	addi	r4,r4,4
    58b0:	d9012d15 	stw	r4,1204(sp)
    58b4:	003c7906 	br	4a9c <__alt_data_end+0xfffaf36c>
    58b8:	e080100c 	andi	r2,fp,64
    58bc:	10007126 	beq	r2,zero,5a84 <___vfprintf_internal_r+0x1ab0>
    58c0:	1c80000f 	ldh	r18,0(r3)
    58c4:	d8812d17 	ldw	r2,1204(sp)
    58c8:	902bd7fa 	srai	r21,r18,31
    58cc:	10800104 	addi	r2,r2,4
    58d0:	d8812d15 	stw	r2,1204(sp)
    58d4:	a805883a 	mov	r2,r21
    58d8:	003b1a06 	br	4544 <__alt_data_end+0xfffaee14>
    58dc:	e4000007 	ldb	r16,0(fp)
    58e0:	e005883a 	mov	r2,fp
    58e4:	003a2306 	br	4174 <__alt_data_end+0xfffaea44>
    58e8:	00800084 	movi	r2,2
    58ec:	003c4906 	br	4a14 <__alt_data_end+0xfffaf2e4>
    58f0:	01000074 	movhi	r4,1
    58f4:	210bf384 	addi	r4,r4,12238
    58f8:	d9012c15 	stw	r4,1200(sp)
    58fc:	d9012c17 	ldw	r4,1200(sp)
    5900:	1c47883a 	add	r3,r3,r17
    5904:	10800044 	addi	r2,r2,1
    5908:	41000015 	stw	r4,0(r8)
    590c:	44400115 	stw	r17,4(r8)
    5910:	d8c12015 	stw	r3,1152(sp)
    5914:	d8811f15 	stw	r2,1148(sp)
    5918:	010001c4 	movi	r4,7
    591c:	20becc16 	blt	r4,r2,5450 <__alt_data_end+0xfffafd20>
    5920:	42000204 	addi	r8,r8,8
    5924:	003ed106 	br	546c <__alt_data_end+0xfffafd3c>
    5928:	01000074 	movhi	r4,1
    592c:	210bf384 	addi	r4,r4,12238
    5930:	d9012c15 	stw	r4,1200(sp)
    5934:	003ba306 	br	47c4 <__alt_data_end+0xfffaf094>
    5938:	b809883a 	mov	r4,r23
    593c:	b00b883a 	mov	r5,r22
    5940:	d9811e04 	addi	r6,sp,1144
    5944:	000ac180 	call	ac18 <__sprint_r>
    5948:	103aba1e 	bne	r2,zero,4434 <__alt_data_end+0xfffaed04>
    594c:	d8c12017 	ldw	r3,1152(sp)
    5950:	da000404 	addi	r8,sp,16
    5954:	003d6c06 	br	4f08 <__alt_data_end+0xfffaf7d8>
    5958:	d8811f17 	ldw	r2,1148(sp)
    595c:	01400074 	movhi	r5,1
    5960:	01000044 	movi	r4,1
    5964:	18c00044 	addi	r3,r3,1
    5968:	10800044 	addi	r2,r2,1
    596c:	294bf304 	addi	r5,r5,12236
    5970:	41000115 	stw	r4,4(r8)
    5974:	41400015 	stw	r5,0(r8)
    5978:	d8c12015 	stw	r3,1152(sp)
    597c:	d8811f15 	stw	r2,1148(sp)
    5980:	010001c4 	movi	r4,7
    5984:	20806716 	blt	r4,r2,5b24 <___vfprintf_internal_r+0x1b50>
    5988:	42000204 	addi	r8,r8,8
    598c:	8000041e 	bne	r16,zero,59a0 <___vfprintf_internal_r+0x19cc>
    5990:	d8813317 	ldw	r2,1228(sp)
    5994:	1000021e 	bne	r2,zero,59a0 <___vfprintf_internal_r+0x19cc>
    5998:	e080004c 	andi	r2,fp,1
    599c:	103ba026 	beq	r2,zero,4820 <__alt_data_end+0xfffaf0f0>
    59a0:	d9013817 	ldw	r4,1248(sp)
    59a4:	d8811f17 	ldw	r2,1148(sp)
    59a8:	d9413517 	ldw	r5,1236(sp)
    59ac:	1907883a 	add	r3,r3,r4
    59b0:	10800044 	addi	r2,r2,1
    59b4:	41000115 	stw	r4,4(r8)
    59b8:	41400015 	stw	r5,0(r8)
    59bc:	d8c12015 	stw	r3,1152(sp)
    59c0:	d8811f15 	stw	r2,1148(sp)
    59c4:	010001c4 	movi	r4,7
    59c8:	20815716 	blt	r4,r2,5f28 <___vfprintf_internal_r+0x1f54>
    59cc:	42000204 	addi	r8,r8,8
    59d0:	0421c83a 	sub	r16,zero,r16
    59d4:	0400810e 	bge	zero,r16,5bdc <___vfprintf_internal_r+0x1c08>
    59d8:	04400404 	movi	r17,16
    59dc:	8c00bd0e 	bge	r17,r16,5cd4 <___vfprintf_internal_r+0x1d00>
    59e0:	01400074 	movhi	r5,1
    59e4:	294bf384 	addi	r5,r5,12238
    59e8:	d9412c15 	stw	r5,1200(sp)
    59ec:	04c001c4 	movi	r19,7
    59f0:	00000306 	br	5a00 <___vfprintf_internal_r+0x1a2c>
    59f4:	42000204 	addi	r8,r8,8
    59f8:	843ffc04 	addi	r16,r16,-16
    59fc:	8c00b80e 	bge	r17,r16,5ce0 <___vfprintf_internal_r+0x1d0c>
    5a00:	18c00404 	addi	r3,r3,16
    5a04:	10800044 	addi	r2,r2,1
    5a08:	45000015 	stw	r20,0(r8)
    5a0c:	44400115 	stw	r17,4(r8)
    5a10:	d8c12015 	stw	r3,1152(sp)
    5a14:	d8811f15 	stw	r2,1148(sp)
    5a18:	98bff60e 	bge	r19,r2,59f4 <__alt_data_end+0xfffb02c4>
    5a1c:	b809883a 	mov	r4,r23
    5a20:	b00b883a 	mov	r5,r22
    5a24:	d9811e04 	addi	r6,sp,1144
    5a28:	000ac180 	call	ac18 <__sprint_r>
    5a2c:	103a811e 	bne	r2,zero,4434 <__alt_data_end+0xfffaed04>
    5a30:	d8c12017 	ldw	r3,1152(sp)
    5a34:	d8811f17 	ldw	r2,1148(sp)
    5a38:	da000404 	addi	r8,sp,16
    5a3c:	003fee06 	br	59f8 <__alt_data_end+0xfffb02c8>
    5a40:	008011c4 	movi	r2,71
    5a44:	1400db16 	blt	r2,r16,5db4 <___vfprintf_internal_r+0x1de0>
    5a48:	01000074 	movhi	r4,1
    5a4c:	210be504 	addi	r4,r4,12180
    5a50:	d9013115 	stw	r4,1220(sp)
    5a54:	00c000c4 	movi	r3,3
    5a58:	00bfdfc4 	movi	r2,-129
    5a5c:	d8c12b15 	stw	r3,1196(sp)
    5a60:	e0b8703a 	and	fp,fp,r2
    5a64:	dcc12783 	ldbu	r19,1182(sp)
    5a68:	dc812d15 	stw	r18,1204(sp)
    5a6c:	1823883a 	mov	r17,r3
    5a70:	d8013215 	stw	zero,1224(sp)
    5a74:	d8013415 	stw	zero,1232(sp)
    5a78:	003ad606 	br	45d4 <__alt_data_end+0xfffaeea4>
    5a7c:	4823883a 	mov	r17,r9
    5a80:	003cc906 	br	4da8 <__alt_data_end+0xfffaf678>
    5a84:	1c800017 	ldw	r18,0(r3)
    5a88:	d8c12d17 	ldw	r3,1204(sp)
    5a8c:	902bd7fa 	srai	r21,r18,31
    5a90:	18c00104 	addi	r3,r3,4
    5a94:	d8c12d15 	stw	r3,1204(sp)
    5a98:	a805883a 	mov	r2,r21
    5a9c:	003aa906 	br	4544 <__alt_data_end+0xfffaee14>
    5aa0:	d9412d17 	ldw	r5,1204(sp)
    5aa4:	14800017 	ldw	r18,0(r2)
    5aa8:	002b883a 	mov	r21,zero
    5aac:	29400104 	addi	r5,r5,4
    5ab0:	d9412d15 	stw	r5,1204(sp)
    5ab4:	003bf906 	br	4a9c <__alt_data_end+0xfffaf36c>
    5ab8:	d8c12d17 	ldw	r3,1204(sp)
    5abc:	14800017 	ldw	r18,0(r2)
    5ac0:	002b883a 	mov	r21,zero
    5ac4:	18c00104 	addi	r3,r3,4
    5ac8:	d8c12d15 	stw	r3,1204(sp)
    5acc:	00800044 	movi	r2,1
    5ad0:	9007883a 	mov	r3,r18
    5ad4:	003bcf06 	br	4a14 <__alt_data_end+0xfffaf2e4>
    5ad8:	d9012d17 	ldw	r4,1204(sp)
    5adc:	14800017 	ldw	r18,0(r2)
    5ae0:	002b883a 	mov	r21,zero
    5ae4:	21000104 	addi	r4,r4,4
    5ae8:	d9012d15 	stw	r4,1204(sp)
    5aec:	0005883a 	mov	r2,zero
    5af0:	9007883a 	mov	r3,r18
    5af4:	003bc706 	br	4a14 <__alt_data_end+0xfffaf2e4>
    5af8:	d9412d17 	ldw	r5,1204(sp)
    5afc:	d8c12f17 	ldw	r3,1212(sp)
    5b00:	28800017 	ldw	r2,0(r5)
    5b04:	29400104 	addi	r5,r5,4
    5b08:	d9412d15 	stw	r5,1204(sp)
    5b0c:	10c00015 	stw	r3,0(r2)
    5b10:	00396d06 	br	40c8 <__alt_data_end+0xfffae998>
    5b14:	01000074 	movhi	r4,1
    5b18:	210be304 	addi	r4,r4,12172
    5b1c:	d9013115 	stw	r4,1220(sp)
    5b20:	003ba206 	br	49ac <__alt_data_end+0xfffaf27c>
    5b24:	b809883a 	mov	r4,r23
    5b28:	b00b883a 	mov	r5,r22
    5b2c:	d9811e04 	addi	r6,sp,1144
    5b30:	000ac180 	call	ac18 <__sprint_r>
    5b34:	103a3f1e 	bne	r2,zero,4434 <__alt_data_end+0xfffaed04>
    5b38:	dc012617 	ldw	r16,1176(sp)
    5b3c:	d8c12017 	ldw	r3,1152(sp)
    5b40:	da000404 	addi	r8,sp,16
    5b44:	003f9106 	br	598c <__alt_data_end+0xfffb025c>
    5b48:	e0800044 	addi	r2,fp,1
    5b4c:	9cc00814 	ori	r19,r19,32
    5b50:	e4000047 	ldb	r16,1(fp)
    5b54:	00398706 	br	4174 <__alt_data_end+0xfffaea44>
    5b58:	d8812e17 	ldw	r2,1208(sp)
    5b5c:	d8c12d15 	stw	r3,1204(sp)
    5b60:	0085c83a 	sub	r2,zero,r2
    5b64:	d8812e15 	stw	r2,1208(sp)
    5b68:	e005883a 	mov	r2,fp
    5b6c:	003a3a06 	br	4458 <__alt_data_end+0xfffaed28>
    5b70:	b809883a 	mov	r4,r23
    5b74:	b00b883a 	mov	r5,r22
    5b78:	d9811e04 	addi	r6,sp,1144
    5b7c:	000ac180 	call	ac18 <__sprint_r>
    5b80:	103a2c1e 	bne	r2,zero,4434 <__alt_data_end+0xfffaed04>
    5b84:	d8c12017 	ldw	r3,1152(sp)
    5b88:	da000404 	addi	r8,sp,16
    5b8c:	003cf006 	br	4f50 <__alt_data_end+0xfffaf820>
    5b90:	d8c12817 	ldw	r3,1184(sp)
    5b94:	d9013117 	ldw	r4,1220(sp)
    5b98:	1923c83a 	sub	r17,r3,r4
    5b9c:	003a8806 	br	45c0 <__alt_data_end+0xfffaee90>
    5ba0:	da013f15 	stw	r8,1276(sp)
    5ba4:	0003f3c0 	call	3f3c <strlen>
    5ba8:	1023883a 	mov	r17,r2
    5bac:	da013f17 	ldw	r8,1276(sp)
    5bb0:	883c7f0e 	bge	r17,zero,4db0 <__alt_data_end+0xfffaf680>
    5bb4:	0005883a 	mov	r2,zero
    5bb8:	003c7d06 	br	4db0 <__alt_data_end+0xfffaf680>
    5bbc:	b809883a 	mov	r4,r23
    5bc0:	b00b883a 	mov	r5,r22
    5bc4:	d9811e04 	addi	r6,sp,1144
    5bc8:	000ac180 	call	ac18 <__sprint_r>
    5bcc:	103a191e 	bne	r2,zero,4434 <__alt_data_end+0xfffaed04>
    5bd0:	d8c12017 	ldw	r3,1152(sp)
    5bd4:	d8811f17 	ldw	r2,1148(sp)
    5bd8:	da000404 	addi	r8,sp,16
    5bdc:	d9413317 	ldw	r5,1228(sp)
    5be0:	d9013117 	ldw	r4,1220(sp)
    5be4:	10800044 	addi	r2,r2,1
    5be8:	28c7883a 	add	r3,r5,r3
    5bec:	41000015 	stw	r4,0(r8)
    5bf0:	41400115 	stw	r5,4(r8)
    5bf4:	d8c12015 	stw	r3,1152(sp)
    5bf8:	d8811f15 	stw	r2,1148(sp)
    5bfc:	010001c4 	movi	r4,7
    5c00:	20bb060e 	bge	r4,r2,481c <__alt_data_end+0xfffaf0ec>
    5c04:	003d6206 	br	5190 <__alt_data_end+0xfffafa60>
    5c08:	01000074 	movhi	r4,1
    5c0c:	210bf784 	addi	r4,r4,12254
    5c10:	d9013615 	stw	r4,1240(sp)
    5c14:	003aa306 	br	46a4 <__alt_data_end+0xfffaef74>
    5c18:	d8812604 	addi	r2,sp,1176
    5c1c:	d8800115 	stw	r2,4(sp)
    5c20:	d9413717 	ldw	r5,1244(sp)
    5c24:	d8812504 	addi	r2,sp,1172
    5c28:	d8800215 	stw	r2,8(sp)
    5c2c:	d8812104 	addi	r2,sp,1156
    5c30:	da400015 	stw	r9,0(sp)
    5c34:	d8800315 	stw	r2,12(sp)
    5c38:	b809883a 	mov	r4,r23
    5c3c:	880d883a 	mov	r6,r17
    5c40:	01c000c4 	movi	r7,3
    5c44:	da013f15 	stw	r8,1276(sp)
    5c48:	da413e15 	stw	r9,1272(sp)
    5c4c:	000644c0 	call	644c <_dtoa_r>
    5c50:	da413e17 	ldw	r9,1272(sp)
    5c54:	da013f17 	ldw	r8,1276(sp)
    5c58:	d8813115 	stw	r2,1220(sp)
    5c5c:	482b883a 	mov	r21,r9
    5c60:	d8c13117 	ldw	r3,1220(sp)
    5c64:	00801184 	movi	r2,70
    5c68:	1d55883a 	add	r10,r3,r21
    5c6c:	98bebb1e 	bne	r19,r2,575c <__alt_data_end+0xfffb002c>
    5c70:	19000007 	ldb	r4,0(r3)
    5c74:	00800c04 	movi	r2,48
    5c78:	2080dd26 	beq	r4,r2,5ff0 <___vfprintf_internal_r+0x201c>
    5c7c:	d8c12617 	ldw	r3,1176(sp)
    5c80:	50d5883a 	add	r10,r10,r3
    5c84:	003eb506 	br	575c <__alt_data_end+0xfffb002c>
    5c88:	0023883a 	mov	r17,zero
    5c8c:	003d9b06 	br	52fc <__alt_data_end+0xfffafbcc>
    5c90:	b809883a 	mov	r4,r23
    5c94:	b00b883a 	mov	r5,r22
    5c98:	d9811e04 	addi	r6,sp,1144
    5c9c:	000ac180 	call	ac18 <__sprint_r>
    5ca0:	1039e41e 	bne	r2,zero,4434 <__alt_data_end+0xfffaed04>
    5ca4:	d8c12017 	ldw	r3,1152(sp)
    5ca8:	da000404 	addi	r8,sp,16
    5cac:	003d9206 	br	52f8 <__alt_data_end+0xfffafbc8>
    5cb0:	b809883a 	mov	r4,r23
    5cb4:	b00b883a 	mov	r5,r22
    5cb8:	d9811e04 	addi	r6,sp,1144
    5cbc:	000ac180 	call	ac18 <__sprint_r>
    5cc0:	1039dc1e 	bne	r2,zero,4434 <__alt_data_end+0xfffaed04>
    5cc4:	d8812617 	ldw	r2,1176(sp)
    5cc8:	d8c12017 	ldw	r3,1152(sp)
    5ccc:	da000404 	addi	r8,sp,16
    5cd0:	003dfb06 	br	54c0 <__alt_data_end+0xfffafd90>
    5cd4:	01000074 	movhi	r4,1
    5cd8:	210bf384 	addi	r4,r4,12238
    5cdc:	d9012c15 	stw	r4,1200(sp)
    5ce0:	d9012c17 	ldw	r4,1200(sp)
    5ce4:	1c07883a 	add	r3,r3,r16
    5ce8:	10800044 	addi	r2,r2,1
    5cec:	41000015 	stw	r4,0(r8)
    5cf0:	44000115 	stw	r16,4(r8)
    5cf4:	d8c12015 	stw	r3,1152(sp)
    5cf8:	d8811f15 	stw	r2,1148(sp)
    5cfc:	010001c4 	movi	r4,7
    5d00:	20bfae16 	blt	r4,r2,5bbc <__alt_data_end+0xfffb048c>
    5d04:	42000204 	addi	r8,r8,8
    5d08:	003fb406 	br	5bdc <__alt_data_end+0xfffb04ac>
    5d0c:	0021883a 	mov	r16,zero
    5d10:	003dfd06 	br	5508 <__alt_data_end+0xfffafdd8>
    5d14:	01400074 	movhi	r5,1
    5d18:	294bf784 	addi	r5,r5,12254
    5d1c:	d9413615 	stw	r5,1240(sp)
    5d20:	003ae306 	br	48b0 <__alt_data_end+0xfffaf180>
    5d24:	b809883a 	mov	r4,r23
    5d28:	b00b883a 	mov	r5,r22
    5d2c:	d9811e04 	addi	r6,sp,1144
    5d30:	000ac180 	call	ac18 <__sprint_r>
    5d34:	1039bf1e 	bne	r2,zero,4434 <__alt_data_end+0xfffaed04>
    5d38:	d8812617 	ldw	r2,1176(sp)
    5d3c:	d9413317 	ldw	r5,1228(sp)
    5d40:	d8c12017 	ldw	r3,1152(sp)
    5d44:	da000404 	addi	r8,sp,16
    5d48:	2885c83a 	sub	r2,r5,r2
    5d4c:	003ded06 	br	5504 <__alt_data_end+0xfffafdd4>
    5d50:	00800184 	movi	r2,6
    5d54:	1240012e 	bgeu	r2,r9,5d5c <___vfprintf_internal_r+0x1d88>
    5d58:	1013883a 	mov	r9,r2
    5d5c:	4823883a 	mov	r17,r9
    5d60:	4805883a 	mov	r2,r9
    5d64:	4800b216 	blt	r9,zero,6030 <___vfprintf_internal_r+0x205c>
    5d68:	01400074 	movhi	r5,1
    5d6c:	294bf104 	addi	r5,r5,12228
    5d70:	d8812b15 	stw	r2,1196(sp)
    5d74:	dc812d15 	stw	r18,1204(sp)
    5d78:	d8013215 	stw	zero,1224(sp)
    5d7c:	d8013415 	stw	zero,1232(sp)
    5d80:	d9413115 	stw	r5,1220(sp)
    5d84:	0005883a 	mov	r2,zero
    5d88:	003a1906 	br	45f0 <__alt_data_end+0xfffaeec0>
    5d8c:	04c00b44 	movi	r19,45
    5d90:	dcc12785 	stb	r19,1182(sp)
    5d94:	003b0006 	br	4998 <__alt_data_end+0xfffaf268>
    5d98:	d8c12d17 	ldw	r3,1204(sp)
    5d9c:	d9012f17 	ldw	r4,1212(sp)
    5da0:	18800017 	ldw	r2,0(r3)
    5da4:	18c00104 	addi	r3,r3,4
    5da8:	d8c12d15 	stw	r3,1204(sp)
    5dac:	11000015 	stw	r4,0(r2)
    5db0:	0038c506 	br	40c8 <__alt_data_end+0xfffae998>
    5db4:	01400074 	movhi	r5,1
    5db8:	294be604 	addi	r5,r5,12184
    5dbc:	d9413115 	stw	r5,1220(sp)
    5dc0:	003f2406 	br	5a54 <__alt_data_end+0xfffb0324>
    5dc4:	00800b44 	movi	r2,45
    5dc8:	d8812785 	stb	r2,1182(sp)
    5dcc:	df012b15 	stw	fp,1196(sp)
    5dd0:	d8013215 	stw	zero,1224(sp)
    5dd4:	df012d17 	ldw	fp,1204(sp)
    5dd8:	00800b44 	movi	r2,45
    5ddc:	dc812d15 	stw	r18,1204(sp)
    5de0:	003a0006 	br	45e4 <__alt_data_end+0xfffaeeb4>
    5de4:	d8c12617 	ldw	r3,1176(sp)
    5de8:	00bfff44 	movi	r2,-3
    5dec:	18800a16 	blt	r3,r2,5e18 <___vfprintf_internal_r+0x1e44>
    5df0:	48c00916 	blt	r9,r3,5e18 <___vfprintf_internal_r+0x1e44>
    5df4:	d8c13415 	stw	r3,1232(sp)
    5df8:	040019c4 	movi	r16,103
    5dfc:	003e7606 	br	57d8 <__alt_data_end+0xfffb00a8>
    5e00:	01000074 	movhi	r4,1
    5e04:	210bf384 	addi	r4,r4,12238
    5e08:	d9012c15 	stw	r4,1200(sp)
    5e0c:	003c8e06 	br	5048 <__alt_data_end+0xfffaf918>
    5e10:	5005883a 	mov	r2,r10
    5e14:	003e6506 	br	57ac <__alt_data_end+0xfffb007c>
    5e18:	843fff84 	addi	r16,r16,-2
    5e1c:	1d7fffc4 	addi	r21,r3,-1
    5e20:	dd412615 	stw	r21,1176(sp)
    5e24:	dc0122c5 	stb	r16,1163(sp)
    5e28:	a8009216 	blt	r21,zero,6074 <___vfprintf_internal_r+0x20a0>
    5e2c:	00800ac4 	movi	r2,43
    5e30:	d8812305 	stb	r2,1164(sp)
    5e34:	00800244 	movi	r2,9
    5e38:	1540660e 	bge	r2,r21,5fd4 <___vfprintf_internal_r+0x2000>
    5e3c:	dcc122c4 	addi	r19,sp,1163
    5e40:	dc012c15 	stw	r16,1200(sp)
    5e44:	4023883a 	mov	r17,r8
    5e48:	9821883a 	mov	r16,r19
    5e4c:	a809883a 	mov	r4,r21
    5e50:	01400284 	movi	r5,10
    5e54:	00034fc0 	call	34fc <__modsi3>
    5e58:	10800c04 	addi	r2,r2,48
    5e5c:	843fffc4 	addi	r16,r16,-1
    5e60:	a809883a 	mov	r4,r21
    5e64:	01400284 	movi	r5,10
    5e68:	80800005 	stb	r2,0(r16)
    5e6c:	00034a80 	call	34a8 <__divsi3>
    5e70:	01000244 	movi	r4,9
    5e74:	102b883a 	mov	r21,r2
    5e78:	20bff416 	blt	r4,r2,5e4c <__alt_data_end+0xfffb071c>
    5e7c:	8811883a 	mov	r8,r17
    5e80:	10800c04 	addi	r2,r2,48
    5e84:	8023883a 	mov	r17,r16
    5e88:	897fffc4 	addi	r5,r17,-1
    5e8c:	88bfffc5 	stb	r2,-1(r17)
    5e90:	dc012c17 	ldw	r16,1200(sp)
    5e94:	2cc08a2e 	bgeu	r5,r19,60c0 <___vfprintf_internal_r+0x20ec>
    5e98:	d9812384 	addi	r6,sp,1166
    5e9c:	344dc83a 	sub	r6,r6,r17
    5ea0:	d9012344 	addi	r4,sp,1165
    5ea4:	998d883a 	add	r6,r19,r6
    5ea8:	00000106 	br	5eb0 <___vfprintf_internal_r+0x1edc>
    5eac:	28800003 	ldbu	r2,0(r5)
    5eb0:	20800005 	stb	r2,0(r4)
    5eb4:	21000044 	addi	r4,r4,1
    5eb8:	29400044 	addi	r5,r5,1
    5ebc:	21bffb1e 	bne	r4,r6,5eac <__alt_data_end+0xfffb077c>
    5ec0:	d8812304 	addi	r2,sp,1164
    5ec4:	1445c83a 	sub	r2,r2,r17
    5ec8:	d9412344 	addi	r5,sp,1165
    5ecc:	2885883a 	add	r2,r5,r2
    5ed0:	14e7c83a 	sub	r19,r2,r19
    5ed4:	d8813317 	ldw	r2,1228(sp)
    5ed8:	d8c13317 	ldw	r3,1228(sp)
    5edc:	dcc13a15 	stw	r19,1256(sp)
    5ee0:	14e3883a 	add	r17,r2,r19
    5ee4:	00800044 	movi	r2,1
    5ee8:	10c0550e 	bge	r2,r3,6040 <___vfprintf_internal_r+0x206c>
    5eec:	8c400044 	addi	r17,r17,1
    5ef0:	8839883a 	mov	fp,r17
    5ef4:	88005016 	blt	r17,zero,6038 <___vfprintf_internal_r+0x2064>
    5ef8:	d8013415 	stw	zero,1232(sp)
    5efc:	003e3f06 	br	57fc <__alt_data_end+0xfffb00cc>
    5f00:	da412b15 	stw	r9,1196(sp)
    5f04:	dcc12783 	ldbu	r19,1182(sp)
    5f08:	4823883a 	mov	r17,r9
    5f0c:	dc812d15 	stw	r18,1204(sp)
    5f10:	d8013215 	stw	zero,1224(sp)
    5f14:	d8013415 	stw	zero,1232(sp)
    5f18:	0039ae06 	br	45d4 <__alt_data_end+0xfffaeea4>
    5f1c:	483de91e 	bne	r9,zero,56c4 <__alt_data_end+0xfffaff94>
    5f20:	8813883a 	mov	r9,r17
    5f24:	003de706 	br	56c4 <__alt_data_end+0xfffaff94>
    5f28:	b809883a 	mov	r4,r23
    5f2c:	b00b883a 	mov	r5,r22
    5f30:	d9811e04 	addi	r6,sp,1144
    5f34:	000ac180 	call	ac18 <__sprint_r>
    5f38:	10393e1e 	bne	r2,zero,4434 <__alt_data_end+0xfffaed04>
    5f3c:	dc012617 	ldw	r16,1176(sp)
    5f40:	d8c12017 	ldw	r3,1152(sp)
    5f44:	d8811f17 	ldw	r2,1148(sp)
    5f48:	da000404 	addi	r8,sp,16
    5f4c:	003ea006 	br	59d0 <__alt_data_end+0xfffb02a0>
    5f50:	00c00b44 	movi	r3,45
    5f54:	2460003c 	xorhi	r17,r4,32768
    5f58:	d8c12b05 	stb	r3,1196(sp)
    5f5c:	003ddf06 	br	56dc <__alt_data_end+0xfffaffac>
    5f60:	02400184 	movi	r9,6
    5f64:	003dd706 	br	56c4 <__alt_data_end+0xfffaff94>
    5f68:	4d400044 	addi	r21,r9,1
    5f6c:	003de206 	br	56f8 <__alt_data_end+0xfffaffc8>
    5f70:	d8c13417 	ldw	r3,1232(sp)
    5f74:	00c0490e 	bge	zero,r3,609c <___vfprintf_internal_r+0x20c8>
    5f78:	04400044 	movi	r17,1
    5f7c:	d9013317 	ldw	r4,1228(sp)
    5f80:	8923883a 	add	r17,r17,r4
    5f84:	8839883a 	mov	fp,r17
    5f88:	883e1c0e 	bge	r17,zero,57fc <__alt_data_end+0xfffb00cc>
    5f8c:	0039883a 	mov	fp,zero
    5f90:	003e1a06 	br	57fc <__alt_data_end+0xfffb00cc>
    5f94:	00c03b0e 	bge	zero,r3,6084 <___vfprintf_internal_r+0x20b0>
    5f98:	4800021e 	bne	r9,zero,5fa4 <___vfprintf_internal_r+0x1fd0>
    5f9c:	e080004c 	andi	r2,fp,1
    5fa0:	10000626 	beq	r2,zero,5fbc <___vfprintf_internal_r+0x1fe8>
    5fa4:	d8c13417 	ldw	r3,1232(sp)
    5fa8:	4a400044 	addi	r9,r9,1
    5fac:	1a63883a 	add	r17,r3,r9
    5fb0:	8839883a 	mov	fp,r17
    5fb4:	883e110e 	bge	r17,zero,57fc <__alt_data_end+0xfffb00cc>
    5fb8:	003ff406 	br	5f8c <__alt_data_end+0xfffb085c>
    5fbc:	1839883a 	mov	fp,r3
    5fc0:	18004116 	blt	r3,zero,60c8 <___vfprintf_internal_r+0x20f4>
    5fc4:	dc413417 	ldw	r17,1232(sp)
    5fc8:	003e0c06 	br	57fc <__alt_data_end+0xfffb00cc>
    5fcc:	d8812117 	ldw	r2,1156(sp)
    5fd0:	003df606 	br	57ac <__alt_data_end+0xfffb007c>
    5fd4:	00800c04 	movi	r2,48
    5fd8:	a8c00c04 	addi	r3,r21,48
    5fdc:	d8812345 	stb	r2,1165(sp)
    5fe0:	d8c12385 	stb	r3,1166(sp)
    5fe4:	d88123c4 	addi	r2,sp,1167
    5fe8:	dcc122c4 	addi	r19,sp,1163
    5fec:	003fb806 	br	5ed0 <__alt_data_end+0xfffb07a0>
    5ff0:	d9013717 	ldw	r4,1244(sp)
    5ff4:	880b883a 	mov	r5,r17
    5ff8:	000d883a 	mov	r6,zero
    5ffc:	000f883a 	mov	r7,zero
    6000:	da013f15 	stw	r8,1276(sp)
    6004:	da413e15 	stw	r9,1272(sp)
    6008:	da813d15 	stw	r10,1268(sp)
    600c:	000e9700 	call	e970 <__eqdf2>
    6010:	da013f17 	ldw	r8,1276(sp)
    6014:	da413e17 	ldw	r9,1272(sp)
    6018:	da813d17 	ldw	r10,1268(sp)
    601c:	103f1726 	beq	r2,zero,5c7c <__alt_data_end+0xfffb054c>
    6020:	00800044 	movi	r2,1
    6024:	1547c83a 	sub	r3,r2,r21
    6028:	d8c12615 	stw	r3,1176(sp)
    602c:	003f1406 	br	5c80 <__alt_data_end+0xfffb0550>
    6030:	0005883a 	mov	r2,zero
    6034:	003f4c06 	br	5d68 <__alt_data_end+0xfffb0638>
    6038:	0039883a 	mov	fp,zero
    603c:	003fae06 	br	5ef8 <__alt_data_end+0xfffb07c8>
    6040:	e084703a 	and	r2,fp,r2
    6044:	103faa26 	beq	r2,zero,5ef0 <__alt_data_end+0xfffb07c0>
    6048:	003fa806 	br	5eec <__alt_data_end+0xfffb07bc>
    604c:	d9412d17 	ldw	r5,1204(sp)
    6050:	2a400017 	ldw	r9,0(r5)
    6054:	28c00104 	addi	r3,r5,4
    6058:	d8c12d15 	stw	r3,1204(sp)
    605c:	483ebc0e 	bge	r9,zero,5b50 <__alt_data_end+0xfffb0420>
    6060:	027fffc4 	movi	r9,-1
    6064:	e4000047 	ldb	r16,1(fp)
    6068:	00384206 	br	4174 <__alt_data_end+0xfffaea44>
    606c:	043fffc4 	movi	r16,-1
    6070:	0038ce06 	br	43ac <__alt_data_end+0xfffaec7c>
    6074:	00800b44 	movi	r2,45
    6078:	056bc83a 	sub	r21,zero,r21
    607c:	d8812305 	stb	r2,1164(sp)
    6080:	003f6c06 	br	5e34 <__alt_data_end+0xfffb0704>
    6084:	4800081e 	bne	r9,zero,60a8 <___vfprintf_internal_r+0x20d4>
    6088:	e080004c 	andi	r2,fp,1
    608c:	1000061e 	bne	r2,zero,60a8 <___vfprintf_internal_r+0x20d4>
    6090:	07000044 	movi	fp,1
    6094:	e023883a 	mov	r17,fp
    6098:	003dd806 	br	57fc <__alt_data_end+0xfffb00cc>
    609c:	04400084 	movi	r17,2
    60a0:	88e3c83a 	sub	r17,r17,r3
    60a4:	003fb506 	br	5f7c <__alt_data_end+0xfffb084c>
    60a8:	4c400084 	addi	r17,r9,2
    60ac:	8839883a 	mov	fp,r17
    60b0:	883dd20e 	bge	r17,zero,57fc <__alt_data_end+0xfffb00cc>
    60b4:	003fb506 	br	5f8c <__alt_data_end+0xfffb085c>
    60b8:	d8c12617 	ldw	r3,1176(sp)
    60bc:	003f5706 	br	5e1c <__alt_data_end+0xfffb06ec>
    60c0:	d8812344 	addi	r2,sp,1165
    60c4:	003f8206 	br	5ed0 <__alt_data_end+0xfffb07a0>
    60c8:	0039883a 	mov	fp,zero
    60cc:	003fbd06 	br	5fc4 <__alt_data_end+0xfffb0894>

000060d0 <__vfprintf_internal>:
    60d0:	2007883a 	mov	r3,r4
    60d4:	01000074 	movhi	r4,1
    60d8:	21136c04 	addi	r4,r4,19888
    60dc:	21000017 	ldw	r4,0(r4)
    60e0:	2805883a 	mov	r2,r5
    60e4:	300f883a 	mov	r7,r6
    60e8:	180b883a 	mov	r5,r3
    60ec:	100d883a 	mov	r6,r2
    60f0:	0003fd41 	jmpi	3fd4 <___vfprintf_internal_r>

000060f4 <__swsetup_r>:
    60f4:	00800074 	movhi	r2,1
    60f8:	defffd04 	addi	sp,sp,-12
    60fc:	10936c04 	addi	r2,r2,19888
    6100:	dc400115 	stw	r17,4(sp)
    6104:	2023883a 	mov	r17,r4
    6108:	11000017 	ldw	r4,0(r2)
    610c:	dc000015 	stw	r16,0(sp)
    6110:	dfc00215 	stw	ra,8(sp)
    6114:	2821883a 	mov	r16,r5
    6118:	20000226 	beq	r4,zero,6124 <__swsetup_r+0x30>
    611c:	20c00e17 	ldw	r3,56(r4)
    6120:	18002e26 	beq	r3,zero,61dc <__swsetup_r+0xe8>
    6124:	8080030b 	ldhu	r2,12(r16)
    6128:	10c0020c 	andi	r3,r2,8
    612c:	100d883a 	mov	r6,r2
    6130:	18000f26 	beq	r3,zero,6170 <__swsetup_r+0x7c>
    6134:	80c00417 	ldw	r3,16(r16)
    6138:	18001526 	beq	r3,zero,6190 <__swsetup_r+0x9c>
    613c:	1100004c 	andi	r4,r2,1
    6140:	20001c1e 	bne	r4,zero,61b4 <__swsetup_r+0xc0>
    6144:	1080008c 	andi	r2,r2,2
    6148:	1000261e 	bne	r2,zero,61e4 <__swsetup_r+0xf0>
    614c:	80800517 	ldw	r2,20(r16)
    6150:	80800215 	stw	r2,8(r16)
    6154:	18001c26 	beq	r3,zero,61c8 <__swsetup_r+0xd4>
    6158:	0005883a 	mov	r2,zero
    615c:	dfc00217 	ldw	ra,8(sp)
    6160:	dc400117 	ldw	r17,4(sp)
    6164:	dc000017 	ldw	r16,0(sp)
    6168:	dec00304 	addi	sp,sp,12
    616c:	f800283a 	ret
    6170:	3080040c 	andi	r2,r6,16
    6174:	10001726 	beq	r2,zero,61d4 <__swsetup_r+0xe0>
    6178:	3080010c 	andi	r2,r6,4
    617c:	10001b1e 	bne	r2,zero,61ec <__swsetup_r+0xf8>
    6180:	80c00417 	ldw	r3,16(r16)
    6184:	30800214 	ori	r2,r6,8
    6188:	8080030d 	sth	r2,12(r16)
    618c:	183feb1e 	bne	r3,zero,613c <__alt_data_end+0xfffb0a0c>
    6190:	1140a00c 	andi	r5,r2,640
    6194:	01008004 	movi	r4,512
    6198:	293fe826 	beq	r5,r4,613c <__alt_data_end+0xfffb0a0c>
    619c:	8809883a 	mov	r4,r17
    61a0:	800b883a 	mov	r5,r16
    61a4:	0008c880 	call	8c88 <__smakebuf_r>
    61a8:	8080030b 	ldhu	r2,12(r16)
    61ac:	80c00417 	ldw	r3,16(r16)
    61b0:	003fe206 	br	613c <__alt_data_end+0xfffb0a0c>
    61b4:	80800517 	ldw	r2,20(r16)
    61b8:	80000215 	stw	zero,8(r16)
    61bc:	0085c83a 	sub	r2,zero,r2
    61c0:	80800615 	stw	r2,24(r16)
    61c4:	183fe41e 	bne	r3,zero,6158 <__alt_data_end+0xfffb0a28>
    61c8:	8080030b 	ldhu	r2,12(r16)
    61cc:	1080200c 	andi	r2,r2,128
    61d0:	103fe226 	beq	r2,zero,615c <__alt_data_end+0xfffb0a2c>
    61d4:	00bfffc4 	movi	r2,-1
    61d8:	003fe006 	br	615c <__alt_data_end+0xfffb0a2c>
    61dc:	00081300 	call	8130 <__sinit>
    61e0:	003fd006 	br	6124 <__alt_data_end+0xfffb09f4>
    61e4:	0005883a 	mov	r2,zero
    61e8:	003fd906 	br	6150 <__alt_data_end+0xfffb0a20>
    61ec:	81400c17 	ldw	r5,48(r16)
    61f0:	28000626 	beq	r5,zero,620c <__swsetup_r+0x118>
    61f4:	80801004 	addi	r2,r16,64
    61f8:	28800326 	beq	r5,r2,6208 <__swsetup_r+0x114>
    61fc:	8809883a 	mov	r4,r17
    6200:	00082a40 	call	82a4 <_free_r>
    6204:	8180030b 	ldhu	r6,12(r16)
    6208:	80000c15 	stw	zero,48(r16)
    620c:	80c00417 	ldw	r3,16(r16)
    6210:	00bff6c4 	movi	r2,-37
    6214:	118c703a 	and	r6,r2,r6
    6218:	80000115 	stw	zero,4(r16)
    621c:	80c00015 	stw	r3,0(r16)
    6220:	003fd806 	br	6184 <__alt_data_end+0xfffb0a54>

00006224 <quorem>:
    6224:	defff204 	addi	sp,sp,-56
    6228:	ddc00b15 	stw	r23,44(sp)
    622c:	20800417 	ldw	r2,16(r4)
    6230:	2dc00417 	ldw	r23,16(r5)
    6234:	dfc00d15 	stw	ra,52(sp)
    6238:	df000c15 	stw	fp,48(sp)
    623c:	dd800a15 	stw	r22,40(sp)
    6240:	dd400915 	stw	r21,36(sp)
    6244:	dd000815 	stw	r20,32(sp)
    6248:	dcc00715 	stw	r19,28(sp)
    624c:	dc800615 	stw	r18,24(sp)
    6250:	dc400515 	stw	r17,20(sp)
    6254:	dc000415 	stw	r16,16(sp)
    6258:	15c07a16 	blt	r2,r23,6444 <quorem+0x220>
    625c:	bdffffc4 	addi	r23,r23,-1
    6260:	bde9883a 	add	r20,r23,r23
    6264:	28c00504 	addi	r3,r5,20
    6268:	a529883a 	add	r20,r20,r20
    626c:	1d39883a 	add	fp,r3,r20
    6270:	24c00504 	addi	r19,r4,20
    6274:	d9400215 	stw	r5,8(sp)
    6278:	9d29883a 	add	r20,r19,r20
    627c:	e1400017 	ldw	r5,0(fp)
    6280:	d9000015 	stw	r4,0(sp)
    6284:	a1000017 	ldw	r4,0(r20)
    6288:	29400044 	addi	r5,r5,1
    628c:	d8c00115 	stw	r3,4(sp)
    6290:	dd000315 	stw	r20,12(sp)
    6294:	00035580 	call	3558 <__udivsi3>
    6298:	1025883a 	mov	r18,r2
    629c:	10003026 	beq	r2,zero,6360 <quorem+0x13c>
    62a0:	dc400117 	ldw	r17,4(sp)
    62a4:	9829883a 	mov	r20,r19
    62a8:	002d883a 	mov	r22,zero
    62ac:	0021883a 	mov	r16,zero
    62b0:	8d400017 	ldw	r21,0(r17)
    62b4:	900b883a 	mov	r5,r18
    62b8:	8c400104 	addi	r17,r17,4
    62bc:	a93fffcc 	andi	r4,r21,65535
    62c0:	000d72c0 	call	d72c <__mulsi3>
    62c4:	a808d43a 	srli	r4,r21,16
    62c8:	900b883a 	mov	r5,r18
    62cc:	b0ad883a 	add	r22,r22,r2
    62d0:	000d72c0 	call	d72c <__mulsi3>
    62d4:	a1000017 	ldw	r4,0(r20)
    62d8:	b00cd43a 	srli	r6,r22,16
    62dc:	b0ffffcc 	andi	r3,r22,65535
    62e0:	217fffcc 	andi	r5,r4,65535
    62e4:	2c21883a 	add	r16,r5,r16
    62e8:	80c7c83a 	sub	r3,r16,r3
    62ec:	2008d43a 	srli	r4,r4,16
    62f0:	3085883a 	add	r2,r6,r2
    62f4:	1821d43a 	srai	r16,r3,16
    62f8:	117fffcc 	andi	r5,r2,65535
    62fc:	2149c83a 	sub	r4,r4,r5
    6300:	2421883a 	add	r16,r4,r16
    6304:	8008943a 	slli	r4,r16,16
    6308:	18ffffcc 	andi	r3,r3,65535
    630c:	102cd43a 	srli	r22,r2,16
    6310:	20c8b03a 	or	r4,r4,r3
    6314:	a1000015 	stw	r4,0(r20)
    6318:	8021d43a 	srai	r16,r16,16
    631c:	a5000104 	addi	r20,r20,4
    6320:	e47fe32e 	bgeu	fp,r17,62b0 <__alt_data_end+0xfffb0b80>
    6324:	d8c00317 	ldw	r3,12(sp)
    6328:	18800017 	ldw	r2,0(r3)
    632c:	10000c1e 	bne	r2,zero,6360 <quorem+0x13c>
    6330:	18bfff04 	addi	r2,r3,-4
    6334:	9880082e 	bgeu	r19,r2,6358 <quorem+0x134>
    6338:	18ffff17 	ldw	r3,-4(r3)
    633c:	18000326 	beq	r3,zero,634c <quorem+0x128>
    6340:	00000506 	br	6358 <quorem+0x134>
    6344:	10c00017 	ldw	r3,0(r2)
    6348:	1800031e 	bne	r3,zero,6358 <quorem+0x134>
    634c:	10bfff04 	addi	r2,r2,-4
    6350:	bdffffc4 	addi	r23,r23,-1
    6354:	98bffb36 	bltu	r19,r2,6344 <__alt_data_end+0xfffb0c14>
    6358:	d8c00017 	ldw	r3,0(sp)
    635c:	1dc00415 	stw	r23,16(r3)
    6360:	d9000017 	ldw	r4,0(sp)
    6364:	d9400217 	ldw	r5,8(sp)
    6368:	0009c5c0 	call	9c5c <__mcmp>
    636c:	10002816 	blt	r2,zero,6410 <quorem+0x1ec>
    6370:	dc400117 	ldw	r17,4(sp)
    6374:	94800044 	addi	r18,r18,1
    6378:	980d883a 	mov	r6,r19
    637c:	0007883a 	mov	r3,zero
    6380:	31000017 	ldw	r4,0(r6)
    6384:	89400017 	ldw	r5,0(r17)
    6388:	31800104 	addi	r6,r6,4
    638c:	20bfffcc 	andi	r2,r4,65535
    6390:	10c7883a 	add	r3,r2,r3
    6394:	28bfffcc 	andi	r2,r5,65535
    6398:	1885c83a 	sub	r2,r3,r2
    639c:	280ad43a 	srli	r5,r5,16
    63a0:	2008d43a 	srli	r4,r4,16
    63a4:	1007d43a 	srai	r3,r2,16
    63a8:	10bfffcc 	andi	r2,r2,65535
    63ac:	2149c83a 	sub	r4,r4,r5
    63b0:	20c9883a 	add	r4,r4,r3
    63b4:	200a943a 	slli	r5,r4,16
    63b8:	8c400104 	addi	r17,r17,4
    63bc:	2007d43a 	srai	r3,r4,16
    63c0:	2884b03a 	or	r2,r5,r2
    63c4:	30bfff15 	stw	r2,-4(r6)
    63c8:	e47fed2e 	bgeu	fp,r17,6380 <__alt_data_end+0xfffb0c50>
    63cc:	bdc5883a 	add	r2,r23,r23
    63d0:	1085883a 	add	r2,r2,r2
    63d4:	9887883a 	add	r3,r19,r2
    63d8:	18800017 	ldw	r2,0(r3)
    63dc:	10000c1e 	bne	r2,zero,6410 <quorem+0x1ec>
    63e0:	18bfff04 	addi	r2,r3,-4
    63e4:	9880082e 	bgeu	r19,r2,6408 <quorem+0x1e4>
    63e8:	18ffff17 	ldw	r3,-4(r3)
    63ec:	18000326 	beq	r3,zero,63fc <quorem+0x1d8>
    63f0:	00000506 	br	6408 <quorem+0x1e4>
    63f4:	10c00017 	ldw	r3,0(r2)
    63f8:	1800031e 	bne	r3,zero,6408 <quorem+0x1e4>
    63fc:	10bfff04 	addi	r2,r2,-4
    6400:	bdffffc4 	addi	r23,r23,-1
    6404:	98bffb36 	bltu	r19,r2,63f4 <__alt_data_end+0xfffb0cc4>
    6408:	d8c00017 	ldw	r3,0(sp)
    640c:	1dc00415 	stw	r23,16(r3)
    6410:	9005883a 	mov	r2,r18
    6414:	dfc00d17 	ldw	ra,52(sp)
    6418:	df000c17 	ldw	fp,48(sp)
    641c:	ddc00b17 	ldw	r23,44(sp)
    6420:	dd800a17 	ldw	r22,40(sp)
    6424:	dd400917 	ldw	r21,36(sp)
    6428:	dd000817 	ldw	r20,32(sp)
    642c:	dcc00717 	ldw	r19,28(sp)
    6430:	dc800617 	ldw	r18,24(sp)
    6434:	dc400517 	ldw	r17,20(sp)
    6438:	dc000417 	ldw	r16,16(sp)
    643c:	dec00e04 	addi	sp,sp,56
    6440:	f800283a 	ret
    6444:	0005883a 	mov	r2,zero
    6448:	003ff206 	br	6414 <__alt_data_end+0xfffb0ce4>

0000644c <_dtoa_r>:
    644c:	20801017 	ldw	r2,64(r4)
    6450:	deffde04 	addi	sp,sp,-136
    6454:	dd401d15 	stw	r21,116(sp)
    6458:	dcc01b15 	stw	r19,108(sp)
    645c:	dc801a15 	stw	r18,104(sp)
    6460:	dc401915 	stw	r17,100(sp)
    6464:	dc001815 	stw	r16,96(sp)
    6468:	dfc02115 	stw	ra,132(sp)
    646c:	df002015 	stw	fp,128(sp)
    6470:	ddc01f15 	stw	r23,124(sp)
    6474:	dd801e15 	stw	r22,120(sp)
    6478:	dd001c15 	stw	r20,112(sp)
    647c:	d9c00315 	stw	r7,12(sp)
    6480:	2021883a 	mov	r16,r4
    6484:	302b883a 	mov	r21,r6
    6488:	2825883a 	mov	r18,r5
    648c:	dc402417 	ldw	r17,144(sp)
    6490:	3027883a 	mov	r19,r6
    6494:	10000826 	beq	r2,zero,64b8 <_dtoa_r+0x6c>
    6498:	21801117 	ldw	r6,68(r4)
    649c:	00c00044 	movi	r3,1
    64a0:	100b883a 	mov	r5,r2
    64a4:	1986983a 	sll	r3,r3,r6
    64a8:	11800115 	stw	r6,4(r2)
    64ac:	10c00215 	stw	r3,8(r2)
    64b0:	00093880 	call	9388 <_Bfree>
    64b4:	80001015 	stw	zero,64(r16)
    64b8:	a8002d16 	blt	r21,zero,6570 <_dtoa_r+0x124>
    64bc:	88000015 	stw	zero,0(r17)
    64c0:	a8dffc2c 	andhi	r3,r21,32752
    64c4:	009ffc34 	movhi	r2,32752
    64c8:	18801b26 	beq	r3,r2,6538 <_dtoa_r+0xec>
    64cc:	9009883a 	mov	r4,r18
    64d0:	980b883a 	mov	r5,r19
    64d4:	000d883a 	mov	r6,zero
    64d8:	000f883a 	mov	r7,zero
    64dc:	000e9700 	call	e970 <__eqdf2>
    64e0:	10002a1e 	bne	r2,zero,658c <_dtoa_r+0x140>
    64e4:	d8c02317 	ldw	r3,140(sp)
    64e8:	d9002517 	ldw	r4,148(sp)
    64ec:	00800044 	movi	r2,1
    64f0:	18800015 	stw	r2,0(r3)
    64f4:	2001a226 	beq	r4,zero,6b80 <_dtoa_r+0x734>
    64f8:	00800074 	movhi	r2,1
    64fc:	108bf344 	addi	r2,r2,12237
    6500:	20800015 	stw	r2,0(r4)
    6504:	10bfffc4 	addi	r2,r2,-1
    6508:	dfc02117 	ldw	ra,132(sp)
    650c:	df002017 	ldw	fp,128(sp)
    6510:	ddc01f17 	ldw	r23,124(sp)
    6514:	dd801e17 	ldw	r22,120(sp)
    6518:	dd401d17 	ldw	r21,116(sp)
    651c:	dd001c17 	ldw	r20,112(sp)
    6520:	dcc01b17 	ldw	r19,108(sp)
    6524:	dc801a17 	ldw	r18,104(sp)
    6528:	dc401917 	ldw	r17,100(sp)
    652c:	dc001817 	ldw	r16,96(sp)
    6530:	dec02204 	addi	sp,sp,136
    6534:	f800283a 	ret
    6538:	d8c02317 	ldw	r3,140(sp)
    653c:	0089c3c4 	movi	r2,9999
    6540:	18800015 	stw	r2,0(r3)
    6544:	90017c26 	beq	r18,zero,6b38 <_dtoa_r+0x6ec>
    6548:	00800074 	movhi	r2,1
    654c:	108bff04 	addi	r2,r2,12284
    6550:	d9002517 	ldw	r4,148(sp)
    6554:	203fec26 	beq	r4,zero,6508 <__alt_data_end+0xfffb0dd8>
    6558:	10c000c7 	ldb	r3,3(r2)
    655c:	18017d1e 	bne	r3,zero,6b54 <_dtoa_r+0x708>
    6560:	10c000c4 	addi	r3,r2,3
    6564:	d9802517 	ldw	r6,148(sp)
    6568:	30c00015 	stw	r3,0(r6)
    656c:	003fe606 	br	6508 <__alt_data_end+0xfffb0dd8>
    6570:	04e00034 	movhi	r19,32768
    6574:	9cffffc4 	addi	r19,r19,-1
    6578:	00800044 	movi	r2,1
    657c:	ace6703a 	and	r19,r21,r19
    6580:	88800015 	stw	r2,0(r17)
    6584:	982b883a 	mov	r21,r19
    6588:	003fcd06 	br	64c0 <__alt_data_end+0xfffb0d90>
    658c:	d8800204 	addi	r2,sp,8
    6590:	a822d53a 	srli	r17,r21,20
    6594:	d8800015 	stw	r2,0(sp)
    6598:	8009883a 	mov	r4,r16
    659c:	900b883a 	mov	r5,r18
    65a0:	980d883a 	mov	r6,r19
    65a4:	d9c00104 	addi	r7,sp,4
    65a8:	0009fd00 	call	9fd0 <__d2b>
    65ac:	1039883a 	mov	fp,r2
    65b0:	88016a1e 	bne	r17,zero,6b5c <_dtoa_r+0x710>
    65b4:	dd000217 	ldw	r20,8(sp)
    65b8:	dc400117 	ldw	r17,4(sp)
    65bc:	00befbc4 	movi	r2,-1041
    65c0:	a463883a 	add	r17,r20,r17
    65c4:	8882ea16 	blt	r17,r2,7170 <_dtoa_r+0xd24>
    65c8:	00bf0384 	movi	r2,-1010
    65cc:	1445c83a 	sub	r2,r2,r17
    65d0:	89010484 	addi	r4,r17,1042
    65d4:	a8aa983a 	sll	r21,r21,r2
    65d8:	9108d83a 	srl	r4,r18,r4
    65dc:	a908b03a 	or	r4,r21,r4
    65e0:	000fe480 	call	fe48 <__floatunsidf>
    65e4:	017f8434 	movhi	r5,65040
    65e8:	01800044 	movi	r6,1
    65ec:	1009883a 	mov	r4,r2
    65f0:	194b883a 	add	r5,r3,r5
    65f4:	8c7fffc4 	addi	r17,r17,-1
    65f8:	d9800f15 	stw	r6,60(sp)
    65fc:	000d883a 	mov	r6,zero
    6600:	01cffe34 	movhi	r7,16376
    6604:	000f4200 	call	f420 <__subdf3>
    6608:	0198dbf4 	movhi	r6,25455
    660c:	01cff4f4 	movhi	r7,16339
    6610:	1009883a 	mov	r4,r2
    6614:	180b883a 	mov	r5,r3
    6618:	3190d844 	addi	r6,r6,17249
    661c:	39e1e9c4 	addi	r7,r7,-30809
    6620:	000ebb40 	call	ebb4 <__muldf3>
    6624:	01a2d874 	movhi	r6,35681
    6628:	01cff1f4 	movhi	r7,16327
    662c:	180b883a 	mov	r5,r3
    6630:	31b22cc4 	addi	r6,r6,-14157
    6634:	39e28a04 	addi	r7,r7,-30168
    6638:	1009883a 	mov	r4,r2
    663c:	000d7540 	call	d754 <__adddf3>
    6640:	8809883a 	mov	r4,r17
    6644:	102d883a 	mov	r22,r2
    6648:	182b883a 	mov	r21,r3
    664c:	000fd780 	call	fd78 <__floatsidf>
    6650:	019427f4 	movhi	r6,20639
    6654:	01cff4f4 	movhi	r7,16339
    6658:	1009883a 	mov	r4,r2
    665c:	180b883a 	mov	r5,r3
    6660:	319e7ec4 	addi	r6,r6,31227
    6664:	39d104c4 	addi	r7,r7,17427
    6668:	000ebb40 	call	ebb4 <__muldf3>
    666c:	b009883a 	mov	r4,r22
    6670:	a80b883a 	mov	r5,r21
    6674:	100d883a 	mov	r6,r2
    6678:	180f883a 	mov	r7,r3
    667c:	000d7540 	call	d754 <__adddf3>
    6680:	1009883a 	mov	r4,r2
    6684:	180b883a 	mov	r5,r3
    6688:	102d883a 	mov	r22,r2
    668c:	182b883a 	mov	r21,r3
    6690:	000fcf00 	call	fcf0 <__fixdfsi>
    6694:	b009883a 	mov	r4,r22
    6698:	a80b883a 	mov	r5,r21
    669c:	000d883a 	mov	r6,zero
    66a0:	000f883a 	mov	r7,zero
    66a4:	d8800515 	stw	r2,20(sp)
    66a8:	000ead40 	call	ead4 <__ledf2>
    66ac:	10023116 	blt	r2,zero,6f74 <_dtoa_r+0xb28>
    66b0:	d8c00517 	ldw	r3,20(sp)
    66b4:	00800584 	movi	r2,22
    66b8:	10c21f36 	bltu	r2,r3,6f38 <_dtoa_r+0xaec>
    66bc:	180490fa 	slli	r2,r3,3
    66c0:	00c00074 	movhi	r3,1
    66c4:	18cc1b04 	addi	r3,r3,12396
    66c8:	1885883a 	add	r2,r3,r2
    66cc:	11000017 	ldw	r4,0(r2)
    66d0:	11400117 	ldw	r5,4(r2)
    66d4:	900d883a 	mov	r6,r18
    66d8:	980f883a 	mov	r7,r19
    66dc:	000e9f40 	call	e9f4 <__gedf2>
    66e0:	0082a70e 	bge	zero,r2,7180 <_dtoa_r+0xd34>
    66e4:	d9000517 	ldw	r4,20(sp)
    66e8:	d8000c15 	stw	zero,48(sp)
    66ec:	213fffc4 	addi	r4,r4,-1
    66f0:	d9000515 	stw	r4,20(sp)
    66f4:	a463c83a 	sub	r17,r20,r17
    66f8:	8dbfffc4 	addi	r22,r17,-1
    66fc:	b0021916 	blt	r22,zero,6f64 <_dtoa_r+0xb18>
    6700:	d8000815 	stw	zero,32(sp)
    6704:	d8800517 	ldw	r2,20(sp)
    6708:	10020e16 	blt	r2,zero,6f44 <_dtoa_r+0xaf8>
    670c:	b0ad883a 	add	r22,r22,r2
    6710:	d8800a15 	stw	r2,40(sp)
    6714:	d8000915 	stw	zero,36(sp)
    6718:	d8c00317 	ldw	r3,12(sp)
    671c:	00800244 	movi	r2,9
    6720:	10c11a36 	bltu	r2,r3,6b8c <_dtoa_r+0x740>
    6724:	00800144 	movi	r2,5
    6728:	10c4fc0e 	bge	r2,r3,7b1c <_dtoa_r+0x16d0>
    672c:	18ffff04 	addi	r3,r3,-4
    6730:	d8c00315 	stw	r3,12(sp)
    6734:	0029883a 	mov	r20,zero
    6738:	d9800317 	ldw	r6,12(sp)
    673c:	008000c4 	movi	r2,3
    6740:	3083bd26 	beq	r6,r2,7638 <_dtoa_r+0x11ec>
    6744:	1183670e 	bge	r2,r6,74e4 <_dtoa_r+0x1098>
    6748:	d8c00317 	ldw	r3,12(sp)
    674c:	00800104 	movi	r2,4
    6750:	1882e726 	beq	r3,r2,72f0 <_dtoa_r+0xea4>
    6754:	00800144 	movi	r2,5
    6758:	1884f21e 	bne	r3,r2,7b24 <_dtoa_r+0x16d8>
    675c:	00800044 	movi	r2,1
    6760:	d8800b15 	stw	r2,44(sp)
    6764:	d8c02217 	ldw	r3,136(sp)
    6768:	d9000517 	ldw	r4,20(sp)
    676c:	1907883a 	add	r3,r3,r4
    6770:	19800044 	addi	r6,r3,1
    6774:	d8c00d15 	stw	r3,52(sp)
    6778:	d9800615 	stw	r6,24(sp)
    677c:	0183c30e 	bge	zero,r6,768c <_dtoa_r+0x1240>
    6780:	d9800617 	ldw	r6,24(sp)
    6784:	3023883a 	mov	r17,r6
    6788:	80001115 	stw	zero,68(r16)
    678c:	008005c4 	movi	r2,23
    6790:	1184f62e 	bgeu	r2,r6,7b6c <_dtoa_r+0x1720>
    6794:	00c00044 	movi	r3,1
    6798:	00800104 	movi	r2,4
    679c:	1085883a 	add	r2,r2,r2
    67a0:	11000504 	addi	r4,r2,20
    67a4:	180b883a 	mov	r5,r3
    67a8:	18c00044 	addi	r3,r3,1
    67ac:	313ffb2e 	bgeu	r6,r4,679c <__alt_data_end+0xfffb106c>
    67b0:	81401115 	stw	r5,68(r16)
    67b4:	8009883a 	mov	r4,r16
    67b8:	00092e00 	call	92e0 <_Balloc>
    67bc:	d8800715 	stw	r2,28(sp)
    67c0:	80801015 	stw	r2,64(r16)
    67c4:	00800384 	movi	r2,14
    67c8:	1440fd36 	bltu	r2,r17,6bc0 <_dtoa_r+0x774>
    67cc:	a000fc26 	beq	r20,zero,6bc0 <_dtoa_r+0x774>
    67d0:	d8800517 	ldw	r2,20(sp)
    67d4:	0083b90e 	bge	zero,r2,76bc <_dtoa_r+0x1270>
    67d8:	d8c00517 	ldw	r3,20(sp)
    67dc:	108003cc 	andi	r2,r2,15
    67e0:	100490fa 	slli	r2,r2,3
    67e4:	182fd13a 	srai	r23,r3,4
    67e8:	00c00074 	movhi	r3,1
    67ec:	18cc1b04 	addi	r3,r3,12396
    67f0:	1885883a 	add	r2,r3,r2
    67f4:	b8c0040c 	andi	r3,r23,16
    67f8:	12c00017 	ldw	r11,0(r2)
    67fc:	12800117 	ldw	r10,4(r2)
    6800:	18039726 	beq	r3,zero,7660 <_dtoa_r+0x1214>
    6804:	00800074 	movhi	r2,1
    6808:	108c1104 	addi	r2,r2,12356
    680c:	11800817 	ldw	r6,32(r2)
    6810:	11c00917 	ldw	r7,36(r2)
    6814:	9009883a 	mov	r4,r18
    6818:	980b883a 	mov	r5,r19
    681c:	da801615 	stw	r10,88(sp)
    6820:	dac01515 	stw	r11,84(sp)
    6824:	000dff00 	call	dff0 <__divdf3>
    6828:	da801617 	ldw	r10,88(sp)
    682c:	dac01517 	ldw	r11,84(sp)
    6830:	bdc003cc 	andi	r23,r23,15
    6834:	044000c4 	movi	r17,3
    6838:	d8800e15 	stw	r2,56(sp)
    683c:	182b883a 	mov	r21,r3
    6840:	b8001126 	beq	r23,zero,6888 <_dtoa_r+0x43c>
    6844:	05000074 	movhi	r20,1
    6848:	a50c1104 	addi	r20,r20,12356
    684c:	5805883a 	mov	r2,r11
    6850:	5007883a 	mov	r3,r10
    6854:	b980004c 	andi	r6,r23,1
    6858:	1009883a 	mov	r4,r2
    685c:	b82fd07a 	srai	r23,r23,1
    6860:	180b883a 	mov	r5,r3
    6864:	30000426 	beq	r6,zero,6878 <_dtoa_r+0x42c>
    6868:	a1800017 	ldw	r6,0(r20)
    686c:	a1c00117 	ldw	r7,4(r20)
    6870:	8c400044 	addi	r17,r17,1
    6874:	000ebb40 	call	ebb4 <__muldf3>
    6878:	a5000204 	addi	r20,r20,8
    687c:	b83ff51e 	bne	r23,zero,6854 <__alt_data_end+0xfffb1124>
    6880:	1017883a 	mov	r11,r2
    6884:	1815883a 	mov	r10,r3
    6888:	d9000e17 	ldw	r4,56(sp)
    688c:	a80b883a 	mov	r5,r21
    6890:	580d883a 	mov	r6,r11
    6894:	500f883a 	mov	r7,r10
    6898:	000dff00 	call	dff0 <__divdf3>
    689c:	1029883a 	mov	r20,r2
    68a0:	182b883a 	mov	r21,r3
    68a4:	d9800c17 	ldw	r6,48(sp)
    68a8:	30000626 	beq	r6,zero,68c4 <_dtoa_r+0x478>
    68ac:	a009883a 	mov	r4,r20
    68b0:	a80b883a 	mov	r5,r21
    68b4:	000d883a 	mov	r6,zero
    68b8:	01cffc34 	movhi	r7,16368
    68bc:	000ead40 	call	ead4 <__ledf2>
    68c0:	10043216 	blt	r2,zero,798c <_dtoa_r+0x1540>
    68c4:	8809883a 	mov	r4,r17
    68c8:	000fd780 	call	fd78 <__floatsidf>
    68cc:	1009883a 	mov	r4,r2
    68d0:	180b883a 	mov	r5,r3
    68d4:	a00d883a 	mov	r6,r20
    68d8:	a80f883a 	mov	r7,r21
    68dc:	000ebb40 	call	ebb4 <__muldf3>
    68e0:	000d883a 	mov	r6,zero
    68e4:	1009883a 	mov	r4,r2
    68e8:	180b883a 	mov	r5,r3
    68ec:	01d00734 	movhi	r7,16412
    68f0:	000d7540 	call	d754 <__adddf3>
    68f4:	1023883a 	mov	r17,r2
    68f8:	d9800617 	ldw	r6,24(sp)
    68fc:	00bf3034 	movhi	r2,64704
    6900:	1885883a 	add	r2,r3,r2
    6904:	d8800e15 	stw	r2,56(sp)
    6908:	30032e26 	beq	r6,zero,75c4 <_dtoa_r+0x1178>
    690c:	d8c00517 	ldw	r3,20(sp)
    6910:	da800617 	ldw	r10,24(sp)
    6914:	d8c01215 	stw	r3,72(sp)
    6918:	d9000b17 	ldw	r4,44(sp)
    691c:	2003b026 	beq	r4,zero,77e0 <_dtoa_r+0x1394>
    6920:	50bfffc4 	addi	r2,r10,-1
    6924:	100490fa 	slli	r2,r2,3
    6928:	00c00074 	movhi	r3,1
    692c:	18cc1b04 	addi	r3,r3,12396
    6930:	1885883a 	add	r2,r3,r2
    6934:	11800017 	ldw	r6,0(r2)
    6938:	11c00117 	ldw	r7,4(r2)
    693c:	d8800717 	ldw	r2,28(sp)
    6940:	0009883a 	mov	r4,zero
    6944:	014ff834 	movhi	r5,16352
    6948:	da801615 	stw	r10,88(sp)
    694c:	15c00044 	addi	r23,r2,1
    6950:	000dff00 	call	dff0 <__divdf3>
    6954:	d9c00e17 	ldw	r7,56(sp)
    6958:	880d883a 	mov	r6,r17
    695c:	1009883a 	mov	r4,r2
    6960:	180b883a 	mov	r5,r3
    6964:	000f4200 	call	f420 <__subdf3>
    6968:	a80b883a 	mov	r5,r21
    696c:	a009883a 	mov	r4,r20
    6970:	d8c01015 	stw	r3,64(sp)
    6974:	d8800e15 	stw	r2,56(sp)
    6978:	000fcf00 	call	fcf0 <__fixdfsi>
    697c:	1009883a 	mov	r4,r2
    6980:	d8801715 	stw	r2,92(sp)
    6984:	000fd780 	call	fd78 <__floatsidf>
    6988:	a009883a 	mov	r4,r20
    698c:	a80b883a 	mov	r5,r21
    6990:	100d883a 	mov	r6,r2
    6994:	180f883a 	mov	r7,r3
    6998:	000f4200 	call	f420 <__subdf3>
    699c:	da001717 	ldw	r8,92(sp)
    69a0:	1829883a 	mov	r20,r3
    69a4:	d8c00717 	ldw	r3,28(sp)
    69a8:	d9000e17 	ldw	r4,56(sp)
    69ac:	d9401017 	ldw	r5,64(sp)
    69b0:	42000c04 	addi	r8,r8,48
    69b4:	1023883a 	mov	r17,r2
    69b8:	1a000005 	stb	r8,0(r3)
    69bc:	880d883a 	mov	r6,r17
    69c0:	a00f883a 	mov	r7,r20
    69c4:	402b883a 	mov	r21,r8
    69c8:	000e9f40 	call	e9f4 <__gedf2>
    69cc:	00844516 	blt	zero,r2,7ae4 <_dtoa_r+0x1698>
    69d0:	0009883a 	mov	r4,zero
    69d4:	014ffc34 	movhi	r5,16368
    69d8:	880d883a 	mov	r6,r17
    69dc:	a00f883a 	mov	r7,r20
    69e0:	000f4200 	call	f420 <__subdf3>
    69e4:	d9000e17 	ldw	r4,56(sp)
    69e8:	d9401017 	ldw	r5,64(sp)
    69ec:	100d883a 	mov	r6,r2
    69f0:	180f883a 	mov	r7,r3
    69f4:	000e9f40 	call	e9f4 <__gedf2>
    69f8:	da801617 	ldw	r10,88(sp)
    69fc:	00843616 	blt	zero,r2,7ad8 <_dtoa_r+0x168c>
    6a00:	00800044 	movi	r2,1
    6a04:	12806e0e 	bge	r2,r10,6bc0 <_dtoa_r+0x774>
    6a08:	d9000717 	ldw	r4,28(sp)
    6a0c:	dd801315 	stw	r22,76(sp)
    6a10:	dc001115 	stw	r16,68(sp)
    6a14:	2295883a 	add	r10,r4,r10
    6a18:	dcc01415 	stw	r19,80(sp)
    6a1c:	502d883a 	mov	r22,r10
    6a20:	dcc01017 	ldw	r19,64(sp)
    6a24:	b821883a 	mov	r16,r23
    6a28:	dc801015 	stw	r18,64(sp)
    6a2c:	dc800e17 	ldw	r18,56(sp)
    6a30:	00000906 	br	6a58 <_dtoa_r+0x60c>
    6a34:	000f4200 	call	f420 <__subdf3>
    6a38:	1009883a 	mov	r4,r2
    6a3c:	180b883a 	mov	r5,r3
    6a40:	900d883a 	mov	r6,r18
    6a44:	980f883a 	mov	r7,r19
    6a48:	000ead40 	call	ead4 <__ledf2>
    6a4c:	10040e16 	blt	r2,zero,7a88 <_dtoa_r+0x163c>
    6a50:	b821883a 	mov	r16,r23
    6a54:	bd841026 	beq	r23,r22,7a98 <_dtoa_r+0x164c>
    6a58:	9009883a 	mov	r4,r18
    6a5c:	980b883a 	mov	r5,r19
    6a60:	000d883a 	mov	r6,zero
    6a64:	01d00934 	movhi	r7,16420
    6a68:	000ebb40 	call	ebb4 <__muldf3>
    6a6c:	000d883a 	mov	r6,zero
    6a70:	01d00934 	movhi	r7,16420
    6a74:	8809883a 	mov	r4,r17
    6a78:	a00b883a 	mov	r5,r20
    6a7c:	1025883a 	mov	r18,r2
    6a80:	1827883a 	mov	r19,r3
    6a84:	000ebb40 	call	ebb4 <__muldf3>
    6a88:	180b883a 	mov	r5,r3
    6a8c:	1009883a 	mov	r4,r2
    6a90:	1823883a 	mov	r17,r3
    6a94:	1029883a 	mov	r20,r2
    6a98:	000fcf00 	call	fcf0 <__fixdfsi>
    6a9c:	1009883a 	mov	r4,r2
    6aa0:	102b883a 	mov	r21,r2
    6aa4:	000fd780 	call	fd78 <__floatsidf>
    6aa8:	a009883a 	mov	r4,r20
    6aac:	880b883a 	mov	r5,r17
    6ab0:	100d883a 	mov	r6,r2
    6ab4:	180f883a 	mov	r7,r3
    6ab8:	000f4200 	call	f420 <__subdf3>
    6abc:	ad400c04 	addi	r21,r21,48
    6ac0:	1009883a 	mov	r4,r2
    6ac4:	180b883a 	mov	r5,r3
    6ac8:	900d883a 	mov	r6,r18
    6acc:	980f883a 	mov	r7,r19
    6ad0:	85400005 	stb	r21,0(r16)
    6ad4:	1023883a 	mov	r17,r2
    6ad8:	1829883a 	mov	r20,r3
    6adc:	000ead40 	call	ead4 <__ledf2>
    6ae0:	bdc00044 	addi	r23,r23,1
    6ae4:	0009883a 	mov	r4,zero
    6ae8:	014ffc34 	movhi	r5,16368
    6aec:	880d883a 	mov	r6,r17
    6af0:	a00f883a 	mov	r7,r20
    6af4:	103fcf0e 	bge	r2,zero,6a34 <__alt_data_end+0xfffb1304>
    6af8:	d9801217 	ldw	r6,72(sp)
    6afc:	dc001117 	ldw	r16,68(sp)
    6b00:	d9800515 	stw	r6,20(sp)
    6b04:	8009883a 	mov	r4,r16
    6b08:	e00b883a 	mov	r5,fp
    6b0c:	00093880 	call	9388 <_Bfree>
    6b10:	d8c00517 	ldw	r3,20(sp)
    6b14:	d9002317 	ldw	r4,140(sp)
    6b18:	d9802517 	ldw	r6,148(sp)
    6b1c:	b8000005 	stb	zero,0(r23)
    6b20:	18800044 	addi	r2,r3,1
    6b24:	20800015 	stw	r2,0(r4)
    6b28:	30027226 	beq	r6,zero,74f4 <_dtoa_r+0x10a8>
    6b2c:	35c00015 	stw	r23,0(r6)
    6b30:	d8800717 	ldw	r2,28(sp)
    6b34:	003e7406 	br	6508 <__alt_data_end+0xfffb0dd8>
    6b38:	00800434 	movhi	r2,16
    6b3c:	10bfffc4 	addi	r2,r2,-1
    6b40:	a8aa703a 	and	r21,r21,r2
    6b44:	a83e801e 	bne	r21,zero,6548 <__alt_data_end+0xfffb0e18>
    6b48:	00800074 	movhi	r2,1
    6b4c:	108bfc04 	addi	r2,r2,12272
    6b50:	003e7f06 	br	6550 <__alt_data_end+0xfffb0e20>
    6b54:	10c00204 	addi	r3,r2,8
    6b58:	003e8206 	br	6564 <__alt_data_end+0xfffb0e34>
    6b5c:	01400434 	movhi	r5,16
    6b60:	297fffc4 	addi	r5,r5,-1
    6b64:	994a703a 	and	r5,r19,r5
    6b68:	9009883a 	mov	r4,r18
    6b6c:	8c7f0044 	addi	r17,r17,-1023
    6b70:	294ffc34 	orhi	r5,r5,16368
    6b74:	dd000217 	ldw	r20,8(sp)
    6b78:	d8000f15 	stw	zero,60(sp)
    6b7c:	003e9f06 	br	65fc <__alt_data_end+0xfffb0ecc>
    6b80:	00800074 	movhi	r2,1
    6b84:	108bf304 	addi	r2,r2,12236
    6b88:	003e5f06 	br	6508 <__alt_data_end+0xfffb0dd8>
    6b8c:	80001115 	stw	zero,68(r16)
    6b90:	8009883a 	mov	r4,r16
    6b94:	000b883a 	mov	r5,zero
    6b98:	00092e00 	call	92e0 <_Balloc>
    6b9c:	01bfffc4 	movi	r6,-1
    6ba0:	d8800715 	stw	r2,28(sp)
    6ba4:	80801015 	stw	r2,64(r16)
    6ba8:	00800044 	movi	r2,1
    6bac:	d9800615 	stw	r6,24(sp)
    6bb0:	d8800b15 	stw	r2,44(sp)
    6bb4:	d8002215 	stw	zero,136(sp)
    6bb8:	d9800d15 	stw	r6,52(sp)
    6bbc:	d8000315 	stw	zero,12(sp)
    6bc0:	d8800117 	ldw	r2,4(sp)
    6bc4:	10008e16 	blt	r2,zero,6e00 <_dtoa_r+0x9b4>
    6bc8:	d9000517 	ldw	r4,20(sp)
    6bcc:	00c00384 	movi	r3,14
    6bd0:	19008b16 	blt	r3,r4,6e00 <_dtoa_r+0x9b4>
    6bd4:	200490fa 	slli	r2,r4,3
    6bd8:	00c00074 	movhi	r3,1
    6bdc:	d9802217 	ldw	r6,136(sp)
    6be0:	18cc1b04 	addi	r3,r3,12396
    6be4:	1885883a 	add	r2,r3,r2
    6be8:	14400017 	ldw	r17,0(r2)
    6bec:	15000117 	ldw	r20,4(r2)
    6bf0:	3001c716 	blt	r6,zero,7310 <_dtoa_r+0xec4>
    6bf4:	880d883a 	mov	r6,r17
    6bf8:	a00f883a 	mov	r7,r20
    6bfc:	9009883a 	mov	r4,r18
    6c00:	980b883a 	mov	r5,r19
    6c04:	000dff00 	call	dff0 <__divdf3>
    6c08:	180b883a 	mov	r5,r3
    6c0c:	1009883a 	mov	r4,r2
    6c10:	000fcf00 	call	fcf0 <__fixdfsi>
    6c14:	1009883a 	mov	r4,r2
    6c18:	102d883a 	mov	r22,r2
    6c1c:	000fd780 	call	fd78 <__floatsidf>
    6c20:	1009883a 	mov	r4,r2
    6c24:	180b883a 	mov	r5,r3
    6c28:	880d883a 	mov	r6,r17
    6c2c:	a00f883a 	mov	r7,r20
    6c30:	000ebb40 	call	ebb4 <__muldf3>
    6c34:	9009883a 	mov	r4,r18
    6c38:	980b883a 	mov	r5,r19
    6c3c:	100d883a 	mov	r6,r2
    6c40:	180f883a 	mov	r7,r3
    6c44:	000f4200 	call	f420 <__subdf3>
    6c48:	d9000717 	ldw	r4,28(sp)
    6c4c:	d9800617 	ldw	r6,24(sp)
    6c50:	180b883a 	mov	r5,r3
    6c54:	b0c00c04 	addi	r3,r22,48
    6c58:	20c00005 	stb	r3,0(r4)
    6c5c:	25c00044 	addi	r23,r4,1
    6c60:	01000044 	movi	r4,1
    6c64:	1011883a 	mov	r8,r2
    6c68:	2807883a 	mov	r3,r5
    6c6c:	31003d26 	beq	r6,r4,6d64 <_dtoa_r+0x918>
    6c70:	000d883a 	mov	r6,zero
    6c74:	01d00934 	movhi	r7,16420
    6c78:	1009883a 	mov	r4,r2
    6c7c:	000ebb40 	call	ebb4 <__muldf3>
    6c80:	1009883a 	mov	r4,r2
    6c84:	180b883a 	mov	r5,r3
    6c88:	000d883a 	mov	r6,zero
    6c8c:	000f883a 	mov	r7,zero
    6c90:	1027883a 	mov	r19,r2
    6c94:	182b883a 	mov	r21,r3
    6c98:	000e9700 	call	e970 <__eqdf2>
    6c9c:	103f9926 	beq	r2,zero,6b04 <__alt_data_end+0xfffb13d4>
    6ca0:	d8c00617 	ldw	r3,24(sp)
    6ca4:	d9000717 	ldw	r4,28(sp)
    6ca8:	b825883a 	mov	r18,r23
    6cac:	18bfffc4 	addi	r2,r3,-1
    6cb0:	20ad883a 	add	r22,r4,r2
    6cb4:	dc000315 	stw	r16,12(sp)
    6cb8:	00000a06 	br	6ce4 <_dtoa_r+0x898>
    6cbc:	000ebb40 	call	ebb4 <__muldf3>
    6cc0:	1009883a 	mov	r4,r2
    6cc4:	180b883a 	mov	r5,r3
    6cc8:	000d883a 	mov	r6,zero
    6ccc:	000f883a 	mov	r7,zero
    6cd0:	1027883a 	mov	r19,r2
    6cd4:	182b883a 	mov	r21,r3
    6cd8:	b825883a 	mov	r18,r23
    6cdc:	000e9700 	call	e970 <__eqdf2>
    6ce0:	10022626 	beq	r2,zero,757c <_dtoa_r+0x1130>
    6ce4:	880d883a 	mov	r6,r17
    6ce8:	a00f883a 	mov	r7,r20
    6cec:	9809883a 	mov	r4,r19
    6cf0:	a80b883a 	mov	r5,r21
    6cf4:	000dff00 	call	dff0 <__divdf3>
    6cf8:	180b883a 	mov	r5,r3
    6cfc:	1009883a 	mov	r4,r2
    6d00:	000fcf00 	call	fcf0 <__fixdfsi>
    6d04:	1009883a 	mov	r4,r2
    6d08:	1021883a 	mov	r16,r2
    6d0c:	000fd780 	call	fd78 <__floatsidf>
    6d10:	1009883a 	mov	r4,r2
    6d14:	180b883a 	mov	r5,r3
    6d18:	880d883a 	mov	r6,r17
    6d1c:	a00f883a 	mov	r7,r20
    6d20:	000ebb40 	call	ebb4 <__muldf3>
    6d24:	9809883a 	mov	r4,r19
    6d28:	a80b883a 	mov	r5,r21
    6d2c:	100d883a 	mov	r6,r2
    6d30:	180f883a 	mov	r7,r3
    6d34:	000f4200 	call	f420 <__subdf3>
    6d38:	82000c04 	addi	r8,r16,48
    6d3c:	92000005 	stb	r8,0(r18)
    6d40:	1009883a 	mov	r4,r2
    6d44:	180b883a 	mov	r5,r3
    6d48:	000d883a 	mov	r6,zero
    6d4c:	01d00934 	movhi	r7,16420
    6d50:	1011883a 	mov	r8,r2
    6d54:	bdc00044 	addi	r23,r23,1
    6d58:	95bfd81e 	bne	r18,r22,6cbc <__alt_data_end+0xfffb158c>
    6d5c:	802d883a 	mov	r22,r16
    6d60:	dc000317 	ldw	r16,12(sp)
    6d64:	4009883a 	mov	r4,r8
    6d68:	180b883a 	mov	r5,r3
    6d6c:	400d883a 	mov	r6,r8
    6d70:	180f883a 	mov	r7,r3
    6d74:	000d7540 	call	d754 <__adddf3>
    6d78:	8809883a 	mov	r4,r17
    6d7c:	a00b883a 	mov	r5,r20
    6d80:	100d883a 	mov	r6,r2
    6d84:	180f883a 	mov	r7,r3
    6d88:	1027883a 	mov	r19,r2
    6d8c:	1825883a 	mov	r18,r3
    6d90:	000ead40 	call	ead4 <__ledf2>
    6d94:	10000816 	blt	r2,zero,6db8 <_dtoa_r+0x96c>
    6d98:	8809883a 	mov	r4,r17
    6d9c:	a00b883a 	mov	r5,r20
    6da0:	980d883a 	mov	r6,r19
    6da4:	900f883a 	mov	r7,r18
    6da8:	000e9700 	call	e970 <__eqdf2>
    6dac:	103f551e 	bne	r2,zero,6b04 <__alt_data_end+0xfffb13d4>
    6db0:	b580004c 	andi	r22,r22,1
    6db4:	b03f5326 	beq	r22,zero,6b04 <__alt_data_end+0xfffb13d4>
    6db8:	bd7fffc3 	ldbu	r21,-1(r23)
    6dbc:	b8bfffc4 	addi	r2,r23,-1
    6dc0:	1007883a 	mov	r3,r2
    6dc4:	01400e44 	movi	r5,57
    6dc8:	d9800717 	ldw	r6,28(sp)
    6dcc:	00000506 	br	6de4 <_dtoa_r+0x998>
    6dd0:	18ffffc4 	addi	r3,r3,-1
    6dd4:	30825e26 	beq	r6,r2,7750 <_dtoa_r+0x1304>
    6dd8:	1d400003 	ldbu	r21,0(r3)
    6ddc:	102f883a 	mov	r23,r2
    6de0:	10bfffc4 	addi	r2,r2,-1
    6de4:	a9003fcc 	andi	r4,r21,255
    6de8:	2100201c 	xori	r4,r4,128
    6dec:	213fe004 	addi	r4,r4,-128
    6df0:	217ff726 	beq	r4,r5,6dd0 <__alt_data_end+0xfffb16a0>
    6df4:	aa000044 	addi	r8,r21,1
    6df8:	12000005 	stb	r8,0(r2)
    6dfc:	003f4106 	br	6b04 <__alt_data_end+0xfffb13d4>
    6e00:	d8c00b17 	ldw	r3,44(sp)
    6e04:	18006726 	beq	r3,zero,6fa4 <_dtoa_r+0xb58>
    6e08:	d9000317 	ldw	r4,12(sp)
    6e0c:	00c00044 	movi	r3,1
    6e10:	19016a0e 	bge	r3,r4,73bc <_dtoa_r+0xf70>
    6e14:	d8800617 	ldw	r2,24(sp)
    6e18:	d8c00917 	ldw	r3,36(sp)
    6e1c:	157fffc4 	addi	r21,r2,-1
    6e20:	1d420716 	blt	r3,r21,7640 <_dtoa_r+0x11f4>
    6e24:	1d6bc83a 	sub	r21,r3,r21
    6e28:	d8800617 	ldw	r2,24(sp)
    6e2c:	1002c716 	blt	r2,zero,794c <_dtoa_r+0x1500>
    6e30:	dd000817 	ldw	r20,32(sp)
    6e34:	d8800617 	ldw	r2,24(sp)
    6e38:	d9800817 	ldw	r6,32(sp)
    6e3c:	8009883a 	mov	r4,r16
    6e40:	01400044 	movi	r5,1
    6e44:	308d883a 	add	r6,r6,r2
    6e48:	d9800815 	stw	r6,32(sp)
    6e4c:	b0ad883a 	add	r22,r22,r2
    6e50:	00097080 	call	9708 <__i2b>
    6e54:	1023883a 	mov	r17,r2
    6e58:	a0000826 	beq	r20,zero,6e7c <_dtoa_r+0xa30>
    6e5c:	0580070e 	bge	zero,r22,6e7c <_dtoa_r+0xa30>
    6e60:	b005883a 	mov	r2,r22
    6e64:	a5812016 	blt	r20,r22,72e8 <_dtoa_r+0xe9c>
    6e68:	d8c00817 	ldw	r3,32(sp)
    6e6c:	a0a9c83a 	sub	r20,r20,r2
    6e70:	b0adc83a 	sub	r22,r22,r2
    6e74:	1887c83a 	sub	r3,r3,r2
    6e78:	d8c00815 	stw	r3,32(sp)
    6e7c:	d9000917 	ldw	r4,36(sp)
    6e80:	0100140e 	bge	zero,r4,6ed4 <_dtoa_r+0xa88>
    6e84:	d9800b17 	ldw	r6,44(sp)
    6e88:	3001e526 	beq	r6,zero,7620 <_dtoa_r+0x11d4>
    6e8c:	05400e0e 	bge	zero,r21,6ec8 <_dtoa_r+0xa7c>
    6e90:	880b883a 	mov	r5,r17
    6e94:	8009883a 	mov	r4,r16
    6e98:	a80d883a 	mov	r6,r21
    6e9c:	00099d40 	call	99d4 <__pow5mult>
    6ea0:	e00d883a 	mov	r6,fp
    6ea4:	8009883a 	mov	r4,r16
    6ea8:	100b883a 	mov	r5,r2
    6eac:	1023883a 	mov	r17,r2
    6eb0:	00097440 	call	9744 <__multiply>
    6eb4:	102f883a 	mov	r23,r2
    6eb8:	e00b883a 	mov	r5,fp
    6ebc:	8009883a 	mov	r4,r16
    6ec0:	00093880 	call	9388 <_Bfree>
    6ec4:	b839883a 	mov	fp,r23
    6ec8:	d8800917 	ldw	r2,36(sp)
    6ecc:	154dc83a 	sub	r6,r2,r21
    6ed0:	3001281e 	bne	r6,zero,7374 <_dtoa_r+0xf28>
    6ed4:	05c00044 	movi	r23,1
    6ed8:	8009883a 	mov	r4,r16
    6edc:	b80b883a 	mov	r5,r23
    6ee0:	00097080 	call	9708 <__i2b>
    6ee4:	d8c00a17 	ldw	r3,40(sp)
    6ee8:	102b883a 	mov	r21,r2
    6eec:	00c0310e 	bge	zero,r3,6fb4 <_dtoa_r+0xb68>
    6ef0:	8009883a 	mov	r4,r16
    6ef4:	100b883a 	mov	r5,r2
    6ef8:	180d883a 	mov	r6,r3
    6efc:	00099d40 	call	99d4 <__pow5mult>
    6f00:	d9000317 	ldw	r4,12(sp)
    6f04:	102b883a 	mov	r21,r2
    6f08:	b9011f0e 	bge	r23,r4,7388 <_dtoa_r+0xf3c>
    6f0c:	0027883a 	mov	r19,zero
    6f10:	a8800417 	ldw	r2,16(r21)
    6f14:	10800104 	addi	r2,r2,4
    6f18:	1085883a 	add	r2,r2,r2
    6f1c:	1085883a 	add	r2,r2,r2
    6f20:	a885883a 	add	r2,r21,r2
    6f24:	11000017 	ldw	r4,0(r2)
    6f28:	00095f00 	call	95f0 <__hi0bits>
    6f2c:	00c00804 	movi	r3,32
    6f30:	1885c83a 	sub	r2,r3,r2
    6f34:	00002506 	br	6fcc <_dtoa_r+0xb80>
    6f38:	01800044 	movi	r6,1
    6f3c:	d9800c15 	stw	r6,48(sp)
    6f40:	003dec06 	br	66f4 <__alt_data_end+0xfffb0fc4>
    6f44:	d8c00817 	ldw	r3,32(sp)
    6f48:	d9000517 	ldw	r4,20(sp)
    6f4c:	d8000a15 	stw	zero,40(sp)
    6f50:	1907c83a 	sub	r3,r3,r4
    6f54:	010dc83a 	sub	r6,zero,r4
    6f58:	d8c00815 	stw	r3,32(sp)
    6f5c:	d9800915 	stw	r6,36(sp)
    6f60:	003ded06 	br	6718 <__alt_data_end+0xfffb0fe8>
    6f64:	05adc83a 	sub	r22,zero,r22
    6f68:	dd800815 	stw	r22,32(sp)
    6f6c:	002d883a 	mov	r22,zero
    6f70:	003de406 	br	6704 <__alt_data_end+0xfffb0fd4>
    6f74:	d9000517 	ldw	r4,20(sp)
    6f78:	000fd780 	call	fd78 <__floatsidf>
    6f7c:	1009883a 	mov	r4,r2
    6f80:	180b883a 	mov	r5,r3
    6f84:	b00d883a 	mov	r6,r22
    6f88:	a80f883a 	mov	r7,r21
    6f8c:	000e9700 	call	e970 <__eqdf2>
    6f90:	103dc726 	beq	r2,zero,66b0 <__alt_data_end+0xfffb0f80>
    6f94:	d8800517 	ldw	r2,20(sp)
    6f98:	10bfffc4 	addi	r2,r2,-1
    6f9c:	d8800515 	stw	r2,20(sp)
    6fa0:	003dc306 	br	66b0 <__alt_data_end+0xfffb0f80>
    6fa4:	dd400917 	ldw	r21,36(sp)
    6fa8:	dd000817 	ldw	r20,32(sp)
    6fac:	0023883a 	mov	r17,zero
    6fb0:	003fa906 	br	6e58 <__alt_data_end+0xfffb1728>
    6fb4:	d9800317 	ldw	r6,12(sp)
    6fb8:	b981670e 	bge	r23,r6,7558 <_dtoa_r+0x110c>
    6fbc:	0027883a 	mov	r19,zero
    6fc0:	d8c00a17 	ldw	r3,40(sp)
    6fc4:	183fd21e 	bne	r3,zero,6f10 <__alt_data_end+0xfffb17e0>
    6fc8:	00800044 	movi	r2,1
    6fcc:	1585883a 	add	r2,r2,r22
    6fd0:	108007cc 	andi	r2,r2,31
    6fd4:	10005f26 	beq	r2,zero,7154 <_dtoa_r+0xd08>
    6fd8:	00c00804 	movi	r3,32
    6fdc:	1887c83a 	sub	r3,r3,r2
    6fe0:	01000104 	movi	r4,4
    6fe4:	20c2dd0e 	bge	r4,r3,7b5c <_dtoa_r+0x1710>
    6fe8:	d9000817 	ldw	r4,32(sp)
    6fec:	00c00704 	movi	r3,28
    6ff0:	1885c83a 	sub	r2,r3,r2
    6ff4:	2089883a 	add	r4,r4,r2
    6ff8:	d9000815 	stw	r4,32(sp)
    6ffc:	a0a9883a 	add	r20,r20,r2
    7000:	b0ad883a 	add	r22,r22,r2
    7004:	d8800817 	ldw	r2,32(sp)
    7008:	0080050e 	bge	zero,r2,7020 <_dtoa_r+0xbd4>
    700c:	e00b883a 	mov	r5,fp
    7010:	8009883a 	mov	r4,r16
    7014:	100d883a 	mov	r6,r2
    7018:	0009b140 	call	9b14 <__lshift>
    701c:	1039883a 	mov	fp,r2
    7020:	0580050e 	bge	zero,r22,7038 <_dtoa_r+0xbec>
    7024:	a80b883a 	mov	r5,r21
    7028:	8009883a 	mov	r4,r16
    702c:	b00d883a 	mov	r6,r22
    7030:	0009b140 	call	9b14 <__lshift>
    7034:	102b883a 	mov	r21,r2
    7038:	d8c00c17 	ldw	r3,48(sp)
    703c:	1801161e 	bne	r3,zero,7498 <_dtoa_r+0x104c>
    7040:	d8c00617 	ldw	r3,24(sp)
    7044:	00c12d0e 	bge	zero,r3,74fc <_dtoa_r+0x10b0>
    7048:	d8c00b17 	ldw	r3,44(sp)
    704c:	1800571e 	bne	r3,zero,71ac <_dtoa_r+0xd60>
    7050:	dc800717 	ldw	r18,28(sp)
    7054:	dcc00617 	ldw	r19,24(sp)
    7058:	9029883a 	mov	r20,r18
    705c:	00000206 	br	7068 <_dtoa_r+0xc1c>
    7060:	00093b00 	call	93b0 <__multadd>
    7064:	1039883a 	mov	fp,r2
    7068:	e009883a 	mov	r4,fp
    706c:	a80b883a 	mov	r5,r21
    7070:	00062240 	call	6224 <quorem>
    7074:	10800c04 	addi	r2,r2,48
    7078:	90800005 	stb	r2,0(r18)
    707c:	94800044 	addi	r18,r18,1
    7080:	9507c83a 	sub	r3,r18,r20
    7084:	8009883a 	mov	r4,r16
    7088:	e00b883a 	mov	r5,fp
    708c:	01800284 	movi	r6,10
    7090:	000f883a 	mov	r7,zero
    7094:	1cfff216 	blt	r3,r19,7060 <__alt_data_end+0xfffb1930>
    7098:	1011883a 	mov	r8,r2
    709c:	d8800617 	ldw	r2,24(sp)
    70a0:	00822e0e 	bge	zero,r2,795c <_dtoa_r+0x1510>
    70a4:	d9000717 	ldw	r4,28(sp)
    70a8:	0025883a 	mov	r18,zero
    70ac:	20af883a 	add	r23,r4,r2
    70b0:	e00b883a 	mov	r5,fp
    70b4:	01800044 	movi	r6,1
    70b8:	8009883a 	mov	r4,r16
    70bc:	da001715 	stw	r8,92(sp)
    70c0:	0009b140 	call	9b14 <__lshift>
    70c4:	1009883a 	mov	r4,r2
    70c8:	a80b883a 	mov	r5,r21
    70cc:	1039883a 	mov	fp,r2
    70d0:	0009c5c0 	call	9c5c <__mcmp>
    70d4:	da001717 	ldw	r8,92(sp)
    70d8:	00816e0e 	bge	zero,r2,7694 <_dtoa_r+0x1248>
    70dc:	b93fffc3 	ldbu	r4,-1(r23)
    70e0:	b8bfffc4 	addi	r2,r23,-1
    70e4:	1007883a 	mov	r3,r2
    70e8:	01800e44 	movi	r6,57
    70ec:	d9c00717 	ldw	r7,28(sp)
    70f0:	00000506 	br	7108 <_dtoa_r+0xcbc>
    70f4:	18ffffc4 	addi	r3,r3,-1
    70f8:	38811926 	beq	r7,r2,7560 <_dtoa_r+0x1114>
    70fc:	19000003 	ldbu	r4,0(r3)
    7100:	102f883a 	mov	r23,r2
    7104:	10bfffc4 	addi	r2,r2,-1
    7108:	21403fcc 	andi	r5,r4,255
    710c:	2940201c 	xori	r5,r5,128
    7110:	297fe004 	addi	r5,r5,-128
    7114:	29bff726 	beq	r5,r6,70f4 <__alt_data_end+0xfffb19c4>
    7118:	21000044 	addi	r4,r4,1
    711c:	11000005 	stb	r4,0(r2)
    7120:	8009883a 	mov	r4,r16
    7124:	a80b883a 	mov	r5,r21
    7128:	00093880 	call	9388 <_Bfree>
    712c:	883e7526 	beq	r17,zero,6b04 <__alt_data_end+0xfffb13d4>
    7130:	90000426 	beq	r18,zero,7144 <_dtoa_r+0xcf8>
    7134:	94400326 	beq	r18,r17,7144 <_dtoa_r+0xcf8>
    7138:	8009883a 	mov	r4,r16
    713c:	900b883a 	mov	r5,r18
    7140:	00093880 	call	9388 <_Bfree>
    7144:	8009883a 	mov	r4,r16
    7148:	880b883a 	mov	r5,r17
    714c:	00093880 	call	9388 <_Bfree>
    7150:	003e6c06 	br	6b04 <__alt_data_end+0xfffb13d4>
    7154:	00800704 	movi	r2,28
    7158:	d9800817 	ldw	r6,32(sp)
    715c:	a0a9883a 	add	r20,r20,r2
    7160:	b0ad883a 	add	r22,r22,r2
    7164:	308d883a 	add	r6,r6,r2
    7168:	d9800815 	stw	r6,32(sp)
    716c:	003fa506 	br	7004 <__alt_data_end+0xfffb18d4>
    7170:	013efb84 	movi	r4,-1042
    7174:	246bc83a 	sub	r21,r4,r17
    7178:	9548983a 	sll	r4,r18,r21
    717c:	003d1806 	br	65e0 <__alt_data_end+0xfffb0eb0>
    7180:	d8000c15 	stw	zero,48(sp)
    7184:	003d5b06 	br	66f4 <__alt_data_end+0xfffb0fc4>
    7188:	880b883a 	mov	r5,r17
    718c:	8009883a 	mov	r4,r16
    7190:	01800284 	movi	r6,10
    7194:	000f883a 	mov	r7,zero
    7198:	00093b00 	call	93b0 <__multadd>
    719c:	1023883a 	mov	r17,r2
    71a0:	d8800d17 	ldw	r2,52(sp)
    71a4:	0082550e 	bge	zero,r2,7afc <_dtoa_r+0x16b0>
    71a8:	d8800615 	stw	r2,24(sp)
    71ac:	0500050e 	bge	zero,r20,71c4 <_dtoa_r+0xd78>
    71b0:	880b883a 	mov	r5,r17
    71b4:	8009883a 	mov	r4,r16
    71b8:	a00d883a 	mov	r6,r20
    71bc:	0009b140 	call	9b14 <__lshift>
    71c0:	1023883a 	mov	r17,r2
    71c4:	98016a1e 	bne	r19,zero,7770 <_dtoa_r+0x1324>
    71c8:	8829883a 	mov	r20,r17
    71cc:	d9000617 	ldw	r4,24(sp)
    71d0:	dcc00717 	ldw	r19,28(sp)
    71d4:	9480004c 	andi	r18,r18,1
    71d8:	20bfffc4 	addi	r2,r4,-1
    71dc:	9885883a 	add	r2,r19,r2
    71e0:	d8800415 	stw	r2,16(sp)
    71e4:	dc800615 	stw	r18,24(sp)
    71e8:	e009883a 	mov	r4,fp
    71ec:	a80b883a 	mov	r5,r21
    71f0:	00062240 	call	6224 <quorem>
    71f4:	e009883a 	mov	r4,fp
    71f8:	880b883a 	mov	r5,r17
    71fc:	102f883a 	mov	r23,r2
    7200:	0009c5c0 	call	9c5c <__mcmp>
    7204:	8009883a 	mov	r4,r16
    7208:	a80b883a 	mov	r5,r21
    720c:	a00d883a 	mov	r6,r20
    7210:	102d883a 	mov	r22,r2
    7214:	0009cbc0 	call	9cbc <__mdiff>
    7218:	1007883a 	mov	r3,r2
    721c:	10800317 	ldw	r2,12(r2)
    7220:	bc800c04 	addi	r18,r23,48
    7224:	1000971e 	bne	r2,zero,7484 <_dtoa_r+0x1038>
    7228:	180b883a 	mov	r5,r3
    722c:	e009883a 	mov	r4,fp
    7230:	d8c01515 	stw	r3,84(sp)
    7234:	0009c5c0 	call	9c5c <__mcmp>
    7238:	d8c01517 	ldw	r3,84(sp)
    723c:	8009883a 	mov	r4,r16
    7240:	d8801515 	stw	r2,84(sp)
    7244:	180b883a 	mov	r5,r3
    7248:	00093880 	call	9388 <_Bfree>
    724c:	d8801517 	ldw	r2,84(sp)
    7250:	1000041e 	bne	r2,zero,7264 <_dtoa_r+0xe18>
    7254:	d9800317 	ldw	r6,12(sp)
    7258:	3000021e 	bne	r6,zero,7264 <_dtoa_r+0xe18>
    725c:	d8c00617 	ldw	r3,24(sp)
    7260:	18007626 	beq	r3,zero,743c <_dtoa_r+0xff0>
    7264:	b0005b16 	blt	r22,zero,73d4 <_dtoa_r+0xf88>
    7268:	b000041e 	bne	r22,zero,727c <_dtoa_r+0xe30>
    726c:	d9000317 	ldw	r4,12(sp)
    7270:	2000021e 	bne	r4,zero,727c <_dtoa_r+0xe30>
    7274:	d8c00617 	ldw	r3,24(sp)
    7278:	18005626 	beq	r3,zero,73d4 <_dtoa_r+0xf88>
    727c:	00814d16 	blt	zero,r2,77b4 <_dtoa_r+0x1368>
    7280:	d8c00417 	ldw	r3,16(sp)
    7284:	9d800044 	addi	r22,r19,1
    7288:	9c800005 	stb	r18,0(r19)
    728c:	b02f883a 	mov	r23,r22
    7290:	98c14c26 	beq	r19,r3,77c4 <_dtoa_r+0x1378>
    7294:	e00b883a 	mov	r5,fp
    7298:	8009883a 	mov	r4,r16
    729c:	01800284 	movi	r6,10
    72a0:	000f883a 	mov	r7,zero
    72a4:	00093b00 	call	93b0 <__multadd>
    72a8:	1039883a 	mov	fp,r2
    72ac:	8d006d26 	beq	r17,r20,7464 <_dtoa_r+0x1018>
    72b0:	880b883a 	mov	r5,r17
    72b4:	01800284 	movi	r6,10
    72b8:	000f883a 	mov	r7,zero
    72bc:	8009883a 	mov	r4,r16
    72c0:	00093b00 	call	93b0 <__multadd>
    72c4:	a00b883a 	mov	r5,r20
    72c8:	8009883a 	mov	r4,r16
    72cc:	01800284 	movi	r6,10
    72d0:	000f883a 	mov	r7,zero
    72d4:	1023883a 	mov	r17,r2
    72d8:	00093b00 	call	93b0 <__multadd>
    72dc:	1029883a 	mov	r20,r2
    72e0:	b027883a 	mov	r19,r22
    72e4:	003fc006 	br	71e8 <__alt_data_end+0xfffb1ab8>
    72e8:	a005883a 	mov	r2,r20
    72ec:	003ede06 	br	6e68 <__alt_data_end+0xfffb1738>
    72f0:	01000044 	movi	r4,1
    72f4:	d9000b15 	stw	r4,44(sp)
    72f8:	d9802217 	ldw	r6,136(sp)
    72fc:	0180dc0e 	bge	zero,r6,7670 <_dtoa_r+0x1224>
    7300:	3023883a 	mov	r17,r6
    7304:	d9800d15 	stw	r6,52(sp)
    7308:	d9800615 	stw	r6,24(sp)
    730c:	003d1e06 	br	6788 <__alt_data_end+0xfffb1058>
    7310:	d8800617 	ldw	r2,24(sp)
    7314:	00be3716 	blt	zero,r2,6bf4 <__alt_data_end+0xfffb14c4>
    7318:	1000be1e 	bne	r2,zero,7614 <_dtoa_r+0x11c8>
    731c:	8809883a 	mov	r4,r17
    7320:	a00b883a 	mov	r5,r20
    7324:	000d883a 	mov	r6,zero
    7328:	01d00534 	movhi	r7,16404
    732c:	000ebb40 	call	ebb4 <__muldf3>
    7330:	1009883a 	mov	r4,r2
    7334:	180b883a 	mov	r5,r3
    7338:	900d883a 	mov	r6,r18
    733c:	980f883a 	mov	r7,r19
    7340:	000e9f40 	call	e9f4 <__gedf2>
    7344:	002b883a 	mov	r21,zero
    7348:	0023883a 	mov	r17,zero
    734c:	10007a16 	blt	r2,zero,7538 <_dtoa_r+0x10ec>
    7350:	d9002217 	ldw	r4,136(sp)
    7354:	ddc00717 	ldw	r23,28(sp)
    7358:	0108303a 	nor	r4,zero,r4
    735c:	d9000515 	stw	r4,20(sp)
    7360:	8009883a 	mov	r4,r16
    7364:	a80b883a 	mov	r5,r21
    7368:	00093880 	call	9388 <_Bfree>
    736c:	883f751e 	bne	r17,zero,7144 <__alt_data_end+0xfffb1a14>
    7370:	003de406 	br	6b04 <__alt_data_end+0xfffb13d4>
    7374:	e00b883a 	mov	r5,fp
    7378:	8009883a 	mov	r4,r16
    737c:	00099d40 	call	99d4 <__pow5mult>
    7380:	1039883a 	mov	fp,r2
    7384:	003ed306 	br	6ed4 <__alt_data_end+0xfffb17a4>
    7388:	903ee01e 	bne	r18,zero,6f0c <__alt_data_end+0xfffb17dc>
    738c:	00800434 	movhi	r2,16
    7390:	10bfffc4 	addi	r2,r2,-1
    7394:	9884703a 	and	r2,r19,r2
    7398:	103f081e 	bne	r2,zero,6fbc <__alt_data_end+0xfffb188c>
    739c:	9cdffc2c 	andhi	r19,r19,32752
    73a0:	983f0626 	beq	r19,zero,6fbc <__alt_data_end+0xfffb188c>
    73a4:	d8800817 	ldw	r2,32(sp)
    73a8:	b5800044 	addi	r22,r22,1
    73ac:	04c00044 	movi	r19,1
    73b0:	10800044 	addi	r2,r2,1
    73b4:	d8800815 	stw	r2,32(sp)
    73b8:	003f0106 	br	6fc0 <__alt_data_end+0xfffb1890>
    73bc:	d9800f17 	ldw	r6,60(sp)
    73c0:	30016826 	beq	r6,zero,7964 <_dtoa_r+0x1518>
    73c4:	10810cc4 	addi	r2,r2,1075
    73c8:	dd400917 	ldw	r21,36(sp)
    73cc:	dd000817 	ldw	r20,32(sp)
    73d0:	003e9906 	br	6e38 <__alt_data_end+0xfffb1708>
    73d4:	9011883a 	mov	r8,r18
    73d8:	4007883a 	mov	r3,r8
    73dc:	e02d883a 	mov	r22,fp
    73e0:	0080100e 	bge	zero,r2,7424 <_dtoa_r+0xfd8>
    73e4:	01800044 	movi	r6,1
    73e8:	8009883a 	mov	r4,r16
    73ec:	e00b883a 	mov	r5,fp
    73f0:	da001515 	stw	r8,84(sp)
    73f4:	da001715 	stw	r8,92(sp)
    73f8:	0009b140 	call	9b14 <__lshift>
    73fc:	1009883a 	mov	r4,r2
    7400:	a80b883a 	mov	r5,r21
    7404:	102d883a 	mov	r22,r2
    7408:	0009c5c0 	call	9c5c <__mcmp>
    740c:	d8c01517 	ldw	r3,84(sp)
    7410:	da001717 	ldw	r8,92(sp)
    7414:	0081a50e 	bge	zero,r2,7aac <_dtoa_r+0x1660>
    7418:	00800e44 	movi	r2,57
    741c:	40817b26 	beq	r8,r2,7a0c <_dtoa_r+0x15c0>
    7420:	40c00044 	addi	r3,r8,1
    7424:	8825883a 	mov	r18,r17
    7428:	9dc00044 	addi	r23,r19,1
    742c:	98c00005 	stb	r3,0(r19)
    7430:	a023883a 	mov	r17,r20
    7434:	b039883a 	mov	fp,r22
    7438:	003f3906 	br	7120 <__alt_data_end+0xfffb19f0>
    743c:	00800e44 	movi	r2,57
    7440:	9011883a 	mov	r8,r18
    7444:	90817226 	beq	r18,r2,7a10 <_dtoa_r+0x15c4>
    7448:	0580010e 	bge	zero,r22,7450 <_dtoa_r+0x1004>
    744c:	ba000c44 	addi	r8,r23,49
    7450:	8825883a 	mov	r18,r17
    7454:	9dc00044 	addi	r23,r19,1
    7458:	9a000005 	stb	r8,0(r19)
    745c:	a023883a 	mov	r17,r20
    7460:	003f2f06 	br	7120 <__alt_data_end+0xfffb19f0>
    7464:	880b883a 	mov	r5,r17
    7468:	8009883a 	mov	r4,r16
    746c:	01800284 	movi	r6,10
    7470:	000f883a 	mov	r7,zero
    7474:	00093b00 	call	93b0 <__multadd>
    7478:	1023883a 	mov	r17,r2
    747c:	1029883a 	mov	r20,r2
    7480:	003f9706 	br	72e0 <__alt_data_end+0xfffb1bb0>
    7484:	8009883a 	mov	r4,r16
    7488:	180b883a 	mov	r5,r3
    748c:	00093880 	call	9388 <_Bfree>
    7490:	00800044 	movi	r2,1
    7494:	003f7306 	br	7264 <__alt_data_end+0xfffb1b34>
    7498:	e009883a 	mov	r4,fp
    749c:	a80b883a 	mov	r5,r21
    74a0:	0009c5c0 	call	9c5c <__mcmp>
    74a4:	103ee60e 	bge	r2,zero,7040 <__alt_data_end+0xfffb1910>
    74a8:	8009883a 	mov	r4,r16
    74ac:	e00b883a 	mov	r5,fp
    74b0:	01800284 	movi	r6,10
    74b4:	000f883a 	mov	r7,zero
    74b8:	00093b00 	call	93b0 <__multadd>
    74bc:	d9000517 	ldw	r4,20(sp)
    74c0:	d9800b17 	ldw	r6,44(sp)
    74c4:	1039883a 	mov	fp,r2
    74c8:	213fffc4 	addi	r4,r4,-1
    74cc:	d9000515 	stw	r4,20(sp)
    74d0:	303f2d1e 	bne	r6,zero,7188 <__alt_data_end+0xfffb1a58>
    74d4:	d9000d17 	ldw	r4,52(sp)
    74d8:	0101780e 	bge	zero,r4,7abc <_dtoa_r+0x1670>
    74dc:	d9000615 	stw	r4,24(sp)
    74e0:	003edb06 	br	7050 <__alt_data_end+0xfffb1920>
    74e4:	00800084 	movi	r2,2
    74e8:	30818e1e 	bne	r6,r2,7b24 <_dtoa_r+0x16d8>
    74ec:	d8000b15 	stw	zero,44(sp)
    74f0:	003f8106 	br	72f8 <__alt_data_end+0xfffb1bc8>
    74f4:	d8800717 	ldw	r2,28(sp)
    74f8:	003c0306 	br	6508 <__alt_data_end+0xfffb0dd8>
    74fc:	d9000317 	ldw	r4,12(sp)
    7500:	00800084 	movi	r2,2
    7504:	113ed00e 	bge	r2,r4,7048 <__alt_data_end+0xfffb1918>
    7508:	d8c00617 	ldw	r3,24(sp)
    750c:	183f901e 	bne	r3,zero,7350 <__alt_data_end+0xfffb1c20>
    7510:	a80b883a 	mov	r5,r21
    7514:	8009883a 	mov	r4,r16
    7518:	01800144 	movi	r6,5
    751c:	000f883a 	mov	r7,zero
    7520:	00093b00 	call	93b0 <__multadd>
    7524:	e009883a 	mov	r4,fp
    7528:	100b883a 	mov	r5,r2
    752c:	102b883a 	mov	r21,r2
    7530:	0009c5c0 	call	9c5c <__mcmp>
    7534:	00bf860e 	bge	zero,r2,7350 <__alt_data_end+0xfffb1c20>
    7538:	d9800717 	ldw	r6,28(sp)
    753c:	00800c44 	movi	r2,49
    7540:	30800005 	stb	r2,0(r6)
    7544:	d8800517 	ldw	r2,20(sp)
    7548:	35c00044 	addi	r23,r6,1
    754c:	10800044 	addi	r2,r2,1
    7550:	d8800515 	stw	r2,20(sp)
    7554:	003f8206 	br	7360 <__alt_data_end+0xfffb1c30>
    7558:	903e981e 	bne	r18,zero,6fbc <__alt_data_end+0xfffb188c>
    755c:	003f8b06 	br	738c <__alt_data_end+0xfffb1c5c>
    7560:	d9800517 	ldw	r6,20(sp)
    7564:	d8c00717 	ldw	r3,28(sp)
    7568:	00800c44 	movi	r2,49
    756c:	31800044 	addi	r6,r6,1
    7570:	d9800515 	stw	r6,20(sp)
    7574:	18800005 	stb	r2,0(r3)
    7578:	003ee906 	br	7120 <__alt_data_end+0xfffb19f0>
    757c:	dc000317 	ldw	r16,12(sp)
    7580:	003d6006 	br	6b04 <__alt_data_end+0xfffb13d4>
    7584:	8809883a 	mov	r4,r17
    7588:	000fd780 	call	fd78 <__floatsidf>
    758c:	a009883a 	mov	r4,r20
    7590:	a80b883a 	mov	r5,r21
    7594:	100d883a 	mov	r6,r2
    7598:	180f883a 	mov	r7,r3
    759c:	000ebb40 	call	ebb4 <__muldf3>
    75a0:	1009883a 	mov	r4,r2
    75a4:	180b883a 	mov	r5,r3
    75a8:	000d883a 	mov	r6,zero
    75ac:	01d00734 	movhi	r7,16412
    75b0:	000d7540 	call	d754 <__adddf3>
    75b4:	1023883a 	mov	r17,r2
    75b8:	00bf3034 	movhi	r2,64704
    75bc:	1885883a 	add	r2,r3,r2
    75c0:	d8800e15 	stw	r2,56(sp)
    75c4:	a009883a 	mov	r4,r20
    75c8:	a80b883a 	mov	r5,r21
    75cc:	000d883a 	mov	r6,zero
    75d0:	01d00534 	movhi	r7,16404
    75d4:	000f4200 	call	f420 <__subdf3>
    75d8:	d9c00e17 	ldw	r7,56(sp)
    75dc:	1009883a 	mov	r4,r2
    75e0:	180b883a 	mov	r5,r3
    75e4:	880d883a 	mov	r6,r17
    75e8:	102b883a 	mov	r21,r2
    75ec:	1829883a 	mov	r20,r3
    75f0:	000e9f40 	call	e9f4 <__gedf2>
    75f4:	00807716 	blt	zero,r2,77d4 <_dtoa_r+0x1388>
    75f8:	d8800e17 	ldw	r2,56(sp)
    75fc:	a809883a 	mov	r4,r21
    7600:	a00b883a 	mov	r5,r20
    7604:	11e0003c 	xorhi	r7,r2,32768
    7608:	880d883a 	mov	r6,r17
    760c:	000ead40 	call	ead4 <__ledf2>
    7610:	103d6b0e 	bge	r2,zero,6bc0 <__alt_data_end+0xfffb1490>
    7614:	002b883a 	mov	r21,zero
    7618:	0023883a 	mov	r17,zero
    761c:	003f4c06 	br	7350 <__alt_data_end+0xfffb1c20>
    7620:	d9800917 	ldw	r6,36(sp)
    7624:	e00b883a 	mov	r5,fp
    7628:	8009883a 	mov	r4,r16
    762c:	00099d40 	call	99d4 <__pow5mult>
    7630:	1039883a 	mov	fp,r2
    7634:	003e2706 	br	6ed4 <__alt_data_end+0xfffb17a4>
    7638:	d8000b15 	stw	zero,44(sp)
    763c:	003c4906 	br	6764 <__alt_data_end+0xfffb1034>
    7640:	d9000917 	ldw	r4,36(sp)
    7644:	d9800a17 	ldw	r6,40(sp)
    7648:	dd400915 	stw	r21,36(sp)
    764c:	a905c83a 	sub	r2,r21,r4
    7650:	308d883a 	add	r6,r6,r2
    7654:	d9800a15 	stw	r6,40(sp)
    7658:	002b883a 	mov	r21,zero
    765c:	003df206 	br	6e28 <__alt_data_end+0xfffb16f8>
    7660:	dc800e15 	stw	r18,56(sp)
    7664:	982b883a 	mov	r21,r19
    7668:	04400084 	movi	r17,2
    766c:	003c7406 	br	6840 <__alt_data_end+0xfffb1110>
    7670:	04400044 	movi	r17,1
    7674:	dc400d15 	stw	r17,52(sp)
    7678:	dc400615 	stw	r17,24(sp)
    767c:	dc402215 	stw	r17,136(sp)
    7680:	80001115 	stw	zero,68(r16)
    7684:	000b883a 	mov	r5,zero
    7688:	003c4a06 	br	67b4 <__alt_data_end+0xfffb1084>
    768c:	3023883a 	mov	r17,r6
    7690:	003ffb06 	br	7680 <__alt_data_end+0xfffb1f50>
    7694:	1000021e 	bne	r2,zero,76a0 <_dtoa_r+0x1254>
    7698:	4200004c 	andi	r8,r8,1
    769c:	403e8f1e 	bne	r8,zero,70dc <__alt_data_end+0xfffb19ac>
    76a0:	01000c04 	movi	r4,48
    76a4:	00000106 	br	76ac <_dtoa_r+0x1260>
    76a8:	102f883a 	mov	r23,r2
    76ac:	b8bfffc4 	addi	r2,r23,-1
    76b0:	10c00007 	ldb	r3,0(r2)
    76b4:	193ffc26 	beq	r3,r4,76a8 <__alt_data_end+0xfffb1f78>
    76b8:	003e9906 	br	7120 <__alt_data_end+0xfffb19f0>
    76bc:	d9000517 	ldw	r4,20(sp)
    76c0:	012fc83a 	sub	r23,zero,r4
    76c4:	b800ad26 	beq	r23,zero,797c <_dtoa_r+0x1530>
    76c8:	b88003cc 	andi	r2,r23,15
    76cc:	100490fa 	slli	r2,r2,3
    76d0:	00c00074 	movhi	r3,1
    76d4:	18cc1b04 	addi	r3,r3,12396
    76d8:	1885883a 	add	r2,r3,r2
    76dc:	11800017 	ldw	r6,0(r2)
    76e0:	11c00117 	ldw	r7,4(r2)
    76e4:	b82fd13a 	srai	r23,r23,4
    76e8:	9009883a 	mov	r4,r18
    76ec:	980b883a 	mov	r5,r19
    76f0:	000ebb40 	call	ebb4 <__muldf3>
    76f4:	1029883a 	mov	r20,r2
    76f8:	182b883a 	mov	r21,r3
    76fc:	b800f426 	beq	r23,zero,7ad0 <_dtoa_r+0x1684>
    7700:	02000074 	movhi	r8,1
    7704:	420c1104 	addi	r8,r8,12356
    7708:	8029883a 	mov	r20,r16
    770c:	04400084 	movi	r17,2
    7710:	4021883a 	mov	r16,r8
    7714:	b980004c 	andi	r6,r23,1
    7718:	1009883a 	mov	r4,r2
    771c:	b82fd07a 	srai	r23,r23,1
    7720:	180b883a 	mov	r5,r3
    7724:	30000426 	beq	r6,zero,7738 <_dtoa_r+0x12ec>
    7728:	81800017 	ldw	r6,0(r16)
    772c:	81c00117 	ldw	r7,4(r16)
    7730:	8c400044 	addi	r17,r17,1
    7734:	000ebb40 	call	ebb4 <__muldf3>
    7738:	84000204 	addi	r16,r16,8
    773c:	b83ff51e 	bne	r23,zero,7714 <__alt_data_end+0xfffb1fe4>
    7740:	a021883a 	mov	r16,r20
    7744:	182b883a 	mov	r21,r3
    7748:	1029883a 	mov	r20,r2
    774c:	003c5506 	br	68a4 <__alt_data_end+0xfffb1174>
    7750:	d9800517 	ldw	r6,20(sp)
    7754:	d9000717 	ldw	r4,28(sp)
    7758:	00c00c04 	movi	r3,48
    775c:	31800044 	addi	r6,r6,1
    7760:	d9800515 	stw	r6,20(sp)
    7764:	20c00005 	stb	r3,0(r4)
    7768:	02000c44 	movi	r8,49
    776c:	003da206 	br	6df8 <__alt_data_end+0xfffb16c8>
    7770:	89400117 	ldw	r5,4(r17)
    7774:	8009883a 	mov	r4,r16
    7778:	00092e00 	call	92e0 <_Balloc>
    777c:	89800417 	ldw	r6,16(r17)
    7780:	11000304 	addi	r4,r2,12
    7784:	89400304 	addi	r5,r17,12
    7788:	31800084 	addi	r6,r6,2
    778c:	318d883a 	add	r6,r6,r6
    7790:	318d883a 	add	r6,r6,r6
    7794:	1027883a 	mov	r19,r2
    7798:	0008f280 	call	8f28 <memcpy>
    779c:	8009883a 	mov	r4,r16
    77a0:	980b883a 	mov	r5,r19
    77a4:	01800044 	movi	r6,1
    77a8:	0009b140 	call	9b14 <__lshift>
    77ac:	1029883a 	mov	r20,r2
    77b0:	003e8606 	br	71cc <__alt_data_end+0xfffb1a9c>
    77b4:	00800e44 	movi	r2,57
    77b8:	90809526 	beq	r18,r2,7a10 <_dtoa_r+0x15c4>
    77bc:	92000044 	addi	r8,r18,1
    77c0:	003f2306 	br	7450 <__alt_data_end+0xfffb1d20>
    77c4:	9011883a 	mov	r8,r18
    77c8:	8825883a 	mov	r18,r17
    77cc:	a023883a 	mov	r17,r20
    77d0:	003e3706 	br	70b0 <__alt_data_end+0xfffb1980>
    77d4:	002b883a 	mov	r21,zero
    77d8:	0023883a 	mov	r17,zero
    77dc:	003f5606 	br	7538 <__alt_data_end+0xfffb1e08>
    77e0:	51bfffc4 	addi	r6,r10,-1
    77e4:	300490fa 	slli	r2,r6,3
    77e8:	00c00074 	movhi	r3,1
    77ec:	18cc1b04 	addi	r3,r3,12396
    77f0:	1885883a 	add	r2,r3,r2
    77f4:	d9c00e17 	ldw	r7,56(sp)
    77f8:	11000017 	ldw	r4,0(r2)
    77fc:	11400117 	ldw	r5,4(r2)
    7800:	d8800717 	ldw	r2,28(sp)
    7804:	d9801015 	stw	r6,64(sp)
    7808:	880d883a 	mov	r6,r17
    780c:	da801615 	stw	r10,88(sp)
    7810:	15c00044 	addi	r23,r2,1
    7814:	000ebb40 	call	ebb4 <__muldf3>
    7818:	a80b883a 	mov	r5,r21
    781c:	a009883a 	mov	r4,r20
    7820:	d8c01115 	stw	r3,68(sp)
    7824:	d8800e15 	stw	r2,56(sp)
    7828:	000fcf00 	call	fcf0 <__fixdfsi>
    782c:	1009883a 	mov	r4,r2
    7830:	1023883a 	mov	r17,r2
    7834:	000fd780 	call	fd78 <__floatsidf>
    7838:	a009883a 	mov	r4,r20
    783c:	a80b883a 	mov	r5,r21
    7840:	100d883a 	mov	r6,r2
    7844:	180f883a 	mov	r7,r3
    7848:	000f4200 	call	f420 <__subdf3>
    784c:	1813883a 	mov	r9,r3
    7850:	d8c00717 	ldw	r3,28(sp)
    7854:	8c400c04 	addi	r17,r17,48
    7858:	1011883a 	mov	r8,r2
    785c:	1c400005 	stb	r17,0(r3)
    7860:	da801617 	ldw	r10,88(sp)
    7864:	00800044 	movi	r2,1
    7868:	50802326 	beq	r10,r2,78f8 <_dtoa_r+0x14ac>
    786c:	d8800717 	ldw	r2,28(sp)
    7870:	b82b883a 	mov	r21,r23
    7874:	dc001315 	stw	r16,76(sp)
    7878:	12a9883a 	add	r20,r2,r10
    787c:	4807883a 	mov	r3,r9
    7880:	4005883a 	mov	r2,r8
    7884:	dc801415 	stw	r18,80(sp)
    7888:	000d883a 	mov	r6,zero
    788c:	01d00934 	movhi	r7,16420
    7890:	1009883a 	mov	r4,r2
    7894:	180b883a 	mov	r5,r3
    7898:	000ebb40 	call	ebb4 <__muldf3>
    789c:	180b883a 	mov	r5,r3
    78a0:	1009883a 	mov	r4,r2
    78a4:	1821883a 	mov	r16,r3
    78a8:	1025883a 	mov	r18,r2
    78ac:	000fcf00 	call	fcf0 <__fixdfsi>
    78b0:	1009883a 	mov	r4,r2
    78b4:	1023883a 	mov	r17,r2
    78b8:	000fd780 	call	fd78 <__floatsidf>
    78bc:	9009883a 	mov	r4,r18
    78c0:	800b883a 	mov	r5,r16
    78c4:	100d883a 	mov	r6,r2
    78c8:	180f883a 	mov	r7,r3
    78cc:	8c400c04 	addi	r17,r17,48
    78d0:	000f4200 	call	f420 <__subdf3>
    78d4:	ad400044 	addi	r21,r21,1
    78d8:	ac7fffc5 	stb	r17,-1(r21)
    78dc:	ad3fea1e 	bne	r21,r20,7888 <__alt_data_end+0xfffb2158>
    78e0:	1813883a 	mov	r9,r3
    78e4:	d8c01017 	ldw	r3,64(sp)
    78e8:	dc001317 	ldw	r16,76(sp)
    78ec:	dc801417 	ldw	r18,80(sp)
    78f0:	1011883a 	mov	r8,r2
    78f4:	b8ef883a 	add	r23,r23,r3
    78f8:	d9000e17 	ldw	r4,56(sp)
    78fc:	d9401117 	ldw	r5,68(sp)
    7900:	000d883a 	mov	r6,zero
    7904:	01cff834 	movhi	r7,16352
    7908:	da001715 	stw	r8,92(sp)
    790c:	da401515 	stw	r9,84(sp)
    7910:	000d7540 	call	d754 <__adddf3>
    7914:	da001717 	ldw	r8,92(sp)
    7918:	da401517 	ldw	r9,84(sp)
    791c:	1009883a 	mov	r4,r2
    7920:	400d883a 	mov	r6,r8
    7924:	480f883a 	mov	r7,r9
    7928:	180b883a 	mov	r5,r3
    792c:	000ead40 	call	ead4 <__ledf2>
    7930:	da001717 	ldw	r8,92(sp)
    7934:	da401517 	ldw	r9,84(sp)
    7938:	10003b0e 	bge	r2,zero,7a28 <_dtoa_r+0x15dc>
    793c:	d9001217 	ldw	r4,72(sp)
    7940:	bd7fffc3 	ldbu	r21,-1(r23)
    7944:	d9000515 	stw	r4,20(sp)
    7948:	003d1c06 	br	6dbc <__alt_data_end+0xfffb168c>
    794c:	d8c00817 	ldw	r3,32(sp)
    7950:	18a9c83a 	sub	r20,r3,r2
    7954:	0005883a 	mov	r2,zero
    7958:	003d3706 	br	6e38 <__alt_data_end+0xfffb1708>
    795c:	00800044 	movi	r2,1
    7960:	003dd006 	br	70a4 <__alt_data_end+0xfffb1974>
    7964:	d8c00217 	ldw	r3,8(sp)
    7968:	00800d84 	movi	r2,54
    796c:	dd400917 	ldw	r21,36(sp)
    7970:	10c5c83a 	sub	r2,r2,r3
    7974:	dd000817 	ldw	r20,32(sp)
    7978:	003d2f06 	br	6e38 <__alt_data_end+0xfffb1708>
    797c:	9029883a 	mov	r20,r18
    7980:	982b883a 	mov	r21,r19
    7984:	04400084 	movi	r17,2
    7988:	003bc606 	br	68a4 <__alt_data_end+0xfffb1174>
    798c:	d8800617 	ldw	r2,24(sp)
    7990:	103efc26 	beq	r2,zero,7584 <__alt_data_end+0xfffb1e54>
    7994:	d8c00d17 	ldw	r3,52(sp)
    7998:	00fc890e 	bge	zero,r3,6bc0 <__alt_data_end+0xfffb1490>
    799c:	a80b883a 	mov	r5,r21
    79a0:	a009883a 	mov	r4,r20
    79a4:	000d883a 	mov	r6,zero
    79a8:	01d00934 	movhi	r7,16420
    79ac:	000ebb40 	call	ebb4 <__muldf3>
    79b0:	89000044 	addi	r4,r17,1
    79b4:	1029883a 	mov	r20,r2
    79b8:	182b883a 	mov	r21,r3
    79bc:	000fd780 	call	fd78 <__floatsidf>
    79c0:	a009883a 	mov	r4,r20
    79c4:	a80b883a 	mov	r5,r21
    79c8:	100d883a 	mov	r6,r2
    79cc:	180f883a 	mov	r7,r3
    79d0:	000ebb40 	call	ebb4 <__muldf3>
    79d4:	1009883a 	mov	r4,r2
    79d8:	180b883a 	mov	r5,r3
    79dc:	000d883a 	mov	r6,zero
    79e0:	01d00734 	movhi	r7,16412
    79e4:	000d7540 	call	d754 <__adddf3>
    79e8:	d9000517 	ldw	r4,20(sp)
    79ec:	1023883a 	mov	r17,r2
    79f0:	00bf3034 	movhi	r2,64704
    79f4:	213fffc4 	addi	r4,r4,-1
    79f8:	1885883a 	add	r2,r3,r2
    79fc:	d9001215 	stw	r4,72(sp)
    7a00:	d8800e15 	stw	r2,56(sp)
    7a04:	da800d17 	ldw	r10,52(sp)
    7a08:	003bc306 	br	6918 <__alt_data_end+0xfffb11e8>
    7a0c:	b039883a 	mov	fp,r22
    7a10:	01000e44 	movi	r4,57
    7a14:	8825883a 	mov	r18,r17
    7a18:	9dc00044 	addi	r23,r19,1
    7a1c:	99000005 	stb	r4,0(r19)
    7a20:	a023883a 	mov	r17,r20
    7a24:	003dae06 	br	70e0 <__alt_data_end+0xfffb19b0>
    7a28:	d9800e17 	ldw	r6,56(sp)
    7a2c:	d9c01117 	ldw	r7,68(sp)
    7a30:	0009883a 	mov	r4,zero
    7a34:	014ff834 	movhi	r5,16352
    7a38:	da001715 	stw	r8,92(sp)
    7a3c:	da401515 	stw	r9,84(sp)
    7a40:	000f4200 	call	f420 <__subdf3>
    7a44:	da001717 	ldw	r8,92(sp)
    7a48:	da401517 	ldw	r9,84(sp)
    7a4c:	1009883a 	mov	r4,r2
    7a50:	180b883a 	mov	r5,r3
    7a54:	400d883a 	mov	r6,r8
    7a58:	480f883a 	mov	r7,r9
    7a5c:	000e9f40 	call	e9f4 <__gedf2>
    7a60:	00bc570e 	bge	zero,r2,6bc0 <__alt_data_end+0xfffb1490>
    7a64:	01000c04 	movi	r4,48
    7a68:	00000106 	br	7a70 <_dtoa_r+0x1624>
    7a6c:	102f883a 	mov	r23,r2
    7a70:	b8bfffc4 	addi	r2,r23,-1
    7a74:	10c00007 	ldb	r3,0(r2)
    7a78:	193ffc26 	beq	r3,r4,7a6c <__alt_data_end+0xfffb233c>
    7a7c:	d9801217 	ldw	r6,72(sp)
    7a80:	d9800515 	stw	r6,20(sp)
    7a84:	003c1f06 	br	6b04 <__alt_data_end+0xfffb13d4>
    7a88:	d8801217 	ldw	r2,72(sp)
    7a8c:	dc001117 	ldw	r16,68(sp)
    7a90:	d8800515 	stw	r2,20(sp)
    7a94:	003cc906 	br	6dbc <__alt_data_end+0xfffb168c>
    7a98:	dd801317 	ldw	r22,76(sp)
    7a9c:	dc001117 	ldw	r16,68(sp)
    7aa0:	dcc01417 	ldw	r19,80(sp)
    7aa4:	dc801017 	ldw	r18,64(sp)
    7aa8:	003c4506 	br	6bc0 <__alt_data_end+0xfffb1490>
    7aac:	103e5d1e 	bne	r2,zero,7424 <__alt_data_end+0xfffb1cf4>
    7ab0:	4080004c 	andi	r2,r8,1
    7ab4:	103e5b26 	beq	r2,zero,7424 <__alt_data_end+0xfffb1cf4>
    7ab8:	003e5706 	br	7418 <__alt_data_end+0xfffb1ce8>
    7abc:	d8c00317 	ldw	r3,12(sp)
    7ac0:	00800084 	movi	r2,2
    7ac4:	10c00a16 	blt	r2,r3,7af0 <_dtoa_r+0x16a4>
    7ac8:	d9000d17 	ldw	r4,52(sp)
    7acc:	003e8306 	br	74dc <__alt_data_end+0xfffb1dac>
    7ad0:	04400084 	movi	r17,2
    7ad4:	003b7306 	br	68a4 <__alt_data_end+0xfffb1174>
    7ad8:	d9801217 	ldw	r6,72(sp)
    7adc:	d9800515 	stw	r6,20(sp)
    7ae0:	003cb606 	br	6dbc <__alt_data_end+0xfffb168c>
    7ae4:	d9001217 	ldw	r4,72(sp)
    7ae8:	d9000515 	stw	r4,20(sp)
    7aec:	003c0506 	br	6b04 <__alt_data_end+0xfffb13d4>
    7af0:	d9800d17 	ldw	r6,52(sp)
    7af4:	d9800615 	stw	r6,24(sp)
    7af8:	003e8306 	br	7508 <__alt_data_end+0xfffb1dd8>
    7afc:	d9800317 	ldw	r6,12(sp)
    7b00:	00800084 	movi	r2,2
    7b04:	11800216 	blt	r2,r6,7b10 <_dtoa_r+0x16c4>
    7b08:	d8800d17 	ldw	r2,52(sp)
    7b0c:	003da606 	br	71a8 <__alt_data_end+0xfffb1a78>
    7b10:	d8800d17 	ldw	r2,52(sp)
    7b14:	d8800615 	stw	r2,24(sp)
    7b18:	003e7b06 	br	7508 <__alt_data_end+0xfffb1dd8>
    7b1c:	05000044 	movi	r20,1
    7b20:	003b0506 	br	6738 <__alt_data_end+0xfffb1008>
    7b24:	8009883a 	mov	r4,r16
    7b28:	80001115 	stw	zero,68(r16)
    7b2c:	000b883a 	mov	r5,zero
    7b30:	00092e00 	call	92e0 <_Balloc>
    7b34:	d8800715 	stw	r2,28(sp)
    7b38:	d8c00717 	ldw	r3,28(sp)
    7b3c:	00bfffc4 	movi	r2,-1
    7b40:	01000044 	movi	r4,1
    7b44:	d8800615 	stw	r2,24(sp)
    7b48:	80c01015 	stw	r3,64(r16)
    7b4c:	d9000b15 	stw	r4,44(sp)
    7b50:	d8002215 	stw	zero,136(sp)
    7b54:	d8800d15 	stw	r2,52(sp)
    7b58:	003c1906 	br	6bc0 <__alt_data_end+0xfffb1490>
    7b5c:	193d2926 	beq	r3,r4,7004 <__alt_data_end+0xfffb18d4>
    7b60:	00c00f04 	movi	r3,60
    7b64:	1885c83a 	sub	r2,r3,r2
    7b68:	003d7b06 	br	7158 <__alt_data_end+0xfffb1a28>
    7b6c:	000b883a 	mov	r5,zero
    7b70:	003b1006 	br	67b4 <__alt_data_end+0xfffb1084>

00007b74 <_fflush_r>:
    7b74:	defffb04 	addi	sp,sp,-20
    7b78:	dcc00315 	stw	r19,12(sp)
    7b7c:	dc000015 	stw	r16,0(sp)
    7b80:	dfc00415 	stw	ra,16(sp)
    7b84:	dc800215 	stw	r18,8(sp)
    7b88:	dc400115 	stw	r17,4(sp)
    7b8c:	2027883a 	mov	r19,r4
    7b90:	2821883a 	mov	r16,r5
    7b94:	20000226 	beq	r4,zero,7ba0 <_fflush_r+0x2c>
    7b98:	20800e17 	ldw	r2,56(r4)
    7b9c:	10005326 	beq	r2,zero,7cec <_fflush_r+0x178>
    7ba0:	8080030b 	ldhu	r2,12(r16)
    7ba4:	10ffffcc 	andi	r3,r2,65535
    7ba8:	18e0001c 	xori	r3,r3,32768
    7bac:	18e00004 	addi	r3,r3,-32768
    7bb0:	18002c26 	beq	r3,zero,7c64 <_fflush_r+0xf0>
    7bb4:	10c0020c 	andi	r3,r2,8
    7bb8:	1800321e 	bne	r3,zero,7c84 <_fflush_r+0x110>
    7bbc:	80c00117 	ldw	r3,4(r16)
    7bc0:	10820014 	ori	r2,r2,2048
    7bc4:	8080030d 	sth	r2,12(r16)
    7bc8:	00c0570e 	bge	zero,r3,7d28 <_fflush_r+0x1b4>
    7bcc:	82000a17 	ldw	r8,40(r16)
    7bd0:	40002426 	beq	r8,zero,7c64 <_fflush_r+0xf0>
    7bd4:	9c400017 	ldw	r17,0(r19)
    7bd8:	10c4000c 	andi	r3,r2,4096
    7bdc:	98000015 	stw	zero,0(r19)
    7be0:	18004626 	beq	r3,zero,7cfc <_fflush_r+0x188>
    7be4:	81801417 	ldw	r6,80(r16)
    7be8:	10c0010c 	andi	r3,r2,4
    7bec:	18000626 	beq	r3,zero,7c08 <_fflush_r+0x94>
    7bf0:	80c00117 	ldw	r3,4(r16)
    7bf4:	80800c17 	ldw	r2,48(r16)
    7bf8:	30cdc83a 	sub	r6,r6,r3
    7bfc:	10000226 	beq	r2,zero,7c08 <_fflush_r+0x94>
    7c00:	80800f17 	ldw	r2,60(r16)
    7c04:	308dc83a 	sub	r6,r6,r2
    7c08:	81400717 	ldw	r5,28(r16)
    7c0c:	9809883a 	mov	r4,r19
    7c10:	000f883a 	mov	r7,zero
    7c14:	403ee83a 	callr	r8
    7c18:	00ffffc4 	movi	r3,-1
    7c1c:	10c04526 	beq	r2,r3,7d34 <_fflush_r+0x1c0>
    7c20:	80c0030b 	ldhu	r3,12(r16)
    7c24:	81000417 	ldw	r4,16(r16)
    7c28:	80000115 	stw	zero,4(r16)
    7c2c:	197dffcc 	andi	r5,r3,63487
    7c30:	8140030d 	sth	r5,12(r16)
    7c34:	81000015 	stw	r4,0(r16)
    7c38:	18c4000c 	andi	r3,r3,4096
    7c3c:	18000126 	beq	r3,zero,7c44 <_fflush_r+0xd0>
    7c40:	80801415 	stw	r2,80(r16)
    7c44:	81400c17 	ldw	r5,48(r16)
    7c48:	9c400015 	stw	r17,0(r19)
    7c4c:	28000526 	beq	r5,zero,7c64 <_fflush_r+0xf0>
    7c50:	80801004 	addi	r2,r16,64
    7c54:	28800226 	beq	r5,r2,7c60 <_fflush_r+0xec>
    7c58:	9809883a 	mov	r4,r19
    7c5c:	00082a40 	call	82a4 <_free_r>
    7c60:	80000c15 	stw	zero,48(r16)
    7c64:	0005883a 	mov	r2,zero
    7c68:	dfc00417 	ldw	ra,16(sp)
    7c6c:	dcc00317 	ldw	r19,12(sp)
    7c70:	dc800217 	ldw	r18,8(sp)
    7c74:	dc400117 	ldw	r17,4(sp)
    7c78:	dc000017 	ldw	r16,0(sp)
    7c7c:	dec00504 	addi	sp,sp,20
    7c80:	f800283a 	ret
    7c84:	84800417 	ldw	r18,16(r16)
    7c88:	903ff626 	beq	r18,zero,7c64 <__alt_data_end+0xfffb2534>
    7c8c:	84400017 	ldw	r17,0(r16)
    7c90:	108000cc 	andi	r2,r2,3
    7c94:	84800015 	stw	r18,0(r16)
    7c98:	8ca3c83a 	sub	r17,r17,r18
    7c9c:	10001526 	beq	r2,zero,7cf4 <_fflush_r+0x180>
    7ca0:	0005883a 	mov	r2,zero
    7ca4:	80800215 	stw	r2,8(r16)
    7ca8:	04400316 	blt	zero,r17,7cb8 <_fflush_r+0x144>
    7cac:	003fed06 	br	7c64 <__alt_data_end+0xfffb2534>
    7cb0:	90a5883a 	add	r18,r18,r2
    7cb4:	047feb0e 	bge	zero,r17,7c64 <__alt_data_end+0xfffb2534>
    7cb8:	80800917 	ldw	r2,36(r16)
    7cbc:	81400717 	ldw	r5,28(r16)
    7cc0:	880f883a 	mov	r7,r17
    7cc4:	900d883a 	mov	r6,r18
    7cc8:	9809883a 	mov	r4,r19
    7ccc:	103ee83a 	callr	r2
    7cd0:	88a3c83a 	sub	r17,r17,r2
    7cd4:	00bff616 	blt	zero,r2,7cb0 <__alt_data_end+0xfffb2580>
    7cd8:	80c0030b 	ldhu	r3,12(r16)
    7cdc:	00bfffc4 	movi	r2,-1
    7ce0:	18c01014 	ori	r3,r3,64
    7ce4:	80c0030d 	sth	r3,12(r16)
    7ce8:	003fdf06 	br	7c68 <__alt_data_end+0xfffb2538>
    7cec:	00081300 	call	8130 <__sinit>
    7cf0:	003fab06 	br	7ba0 <__alt_data_end+0xfffb2470>
    7cf4:	80800517 	ldw	r2,20(r16)
    7cf8:	003fea06 	br	7ca4 <__alt_data_end+0xfffb2574>
    7cfc:	81400717 	ldw	r5,28(r16)
    7d00:	000d883a 	mov	r6,zero
    7d04:	9809883a 	mov	r4,r19
    7d08:	01c00044 	movi	r7,1
    7d0c:	403ee83a 	callr	r8
    7d10:	100d883a 	mov	r6,r2
    7d14:	00bfffc4 	movi	r2,-1
    7d18:	30801326 	beq	r6,r2,7d68 <_fflush_r+0x1f4>
    7d1c:	8080030b 	ldhu	r2,12(r16)
    7d20:	82000a17 	ldw	r8,40(r16)
    7d24:	003fb006 	br	7be8 <__alt_data_end+0xfffb24b8>
    7d28:	80c00f17 	ldw	r3,60(r16)
    7d2c:	00ffa716 	blt	zero,r3,7bcc <__alt_data_end+0xfffb249c>
    7d30:	003fcc06 	br	7c64 <__alt_data_end+0xfffb2534>
    7d34:	98c00017 	ldw	r3,0(r19)
    7d38:	183fb926 	beq	r3,zero,7c20 <__alt_data_end+0xfffb24f0>
    7d3c:	01000744 	movi	r4,29
    7d40:	19000226 	beq	r3,r4,7d4c <_fflush_r+0x1d8>
    7d44:	01000584 	movi	r4,22
    7d48:	1900101e 	bne	r3,r4,7d8c <_fflush_r+0x218>
    7d4c:	8080030b 	ldhu	r2,12(r16)
    7d50:	80c00417 	ldw	r3,16(r16)
    7d54:	80000115 	stw	zero,4(r16)
    7d58:	10bdffcc 	andi	r2,r2,63487
    7d5c:	8080030d 	sth	r2,12(r16)
    7d60:	80c00015 	stw	r3,0(r16)
    7d64:	003fb706 	br	7c44 <__alt_data_end+0xfffb2514>
    7d68:	98800017 	ldw	r2,0(r19)
    7d6c:	103feb26 	beq	r2,zero,7d1c <__alt_data_end+0xfffb25ec>
    7d70:	00c00744 	movi	r3,29
    7d74:	10c00226 	beq	r2,r3,7d80 <_fflush_r+0x20c>
    7d78:	00c00584 	movi	r3,22
    7d7c:	10ffd61e 	bne	r2,r3,7cd8 <__alt_data_end+0xfffb25a8>
    7d80:	9c400015 	stw	r17,0(r19)
    7d84:	0005883a 	mov	r2,zero
    7d88:	003fb706 	br	7c68 <__alt_data_end+0xfffb2538>
    7d8c:	80c0030b 	ldhu	r3,12(r16)
    7d90:	18c01014 	ori	r3,r3,64
    7d94:	80c0030d 	sth	r3,12(r16)
    7d98:	003fb306 	br	7c68 <__alt_data_end+0xfffb2538>

00007d9c <fflush>:
    7d9c:	20000526 	beq	r4,zero,7db4 <fflush+0x18>
    7da0:	00800074 	movhi	r2,1
    7da4:	10936c04 	addi	r2,r2,19888
    7da8:	200b883a 	mov	r5,r4
    7dac:	11000017 	ldw	r4,0(r2)
    7db0:	0007b741 	jmpi	7b74 <_fflush_r>
    7db4:	00800074 	movhi	r2,1
    7db8:	10936b04 	addi	r2,r2,19884
    7dbc:	11000017 	ldw	r4,0(r2)
    7dc0:	01400034 	movhi	r5,0
    7dc4:	295edd04 	addi	r5,r5,31604
    7dc8:	0008af01 	jmpi	8af0 <_fwalk_reent>

00007dcc <__fp_lock>:
    7dcc:	0005883a 	mov	r2,zero
    7dd0:	f800283a 	ret

00007dd4 <__fp_unlock>:
    7dd4:	0005883a 	mov	r2,zero
    7dd8:	f800283a 	ret

00007ddc <_cleanup_r>:
    7ddc:	01400074 	movhi	r5,1
    7de0:	2970c004 	addi	r5,r5,-15616
    7de4:	0008a381 	jmpi	8a38 <_fwalk>

00007de8 <__sinit.part.1>:
    7de8:	defff604 	addi	sp,sp,-40
    7dec:	00c00034 	movhi	r3,0
    7df0:	dfc00915 	stw	ra,36(sp)
    7df4:	df000815 	stw	fp,32(sp)
    7df8:	ddc00715 	stw	r23,28(sp)
    7dfc:	dd800615 	stw	r22,24(sp)
    7e00:	dd400515 	stw	r21,20(sp)
    7e04:	dd000415 	stw	r20,16(sp)
    7e08:	dcc00315 	stw	r19,12(sp)
    7e0c:	dc800215 	stw	r18,8(sp)
    7e10:	dc400115 	stw	r17,4(sp)
    7e14:	dc000015 	stw	r16,0(sp)
    7e18:	18df7704 	addi	r3,r3,32220
    7e1c:	24000117 	ldw	r16,4(r4)
    7e20:	20c00f15 	stw	r3,60(r4)
    7e24:	07000044 	movi	fp,1
    7e28:	00c000c4 	movi	r3,3
    7e2c:	2080bb04 	addi	r2,r4,748
    7e30:	20c0b915 	stw	r3,740(r4)
    7e34:	27000e15 	stw	fp,56(r4)
    7e38:	2080ba15 	stw	r2,744(r4)
    7e3c:	2000b815 	stw	zero,736(r4)
    7e40:	05c00204 	movi	r23,8
    7e44:	00800104 	movi	r2,4
    7e48:	2025883a 	mov	r18,r4
    7e4c:	b80d883a 	mov	r6,r23
    7e50:	81001704 	addi	r4,r16,92
    7e54:	000b883a 	mov	r5,zero
    7e58:	80000015 	stw	zero,0(r16)
    7e5c:	80000115 	stw	zero,4(r16)
    7e60:	80000215 	stw	zero,8(r16)
    7e64:	8080030d 	sth	r2,12(r16)
    7e68:	80001915 	stw	zero,100(r16)
    7e6c:	8000038d 	sth	zero,14(r16)
    7e70:	80000415 	stw	zero,16(r16)
    7e74:	80000515 	stw	zero,20(r16)
    7e78:	80000615 	stw	zero,24(r16)
    7e7c:	00091bc0 	call	91bc <memset>
    7e80:	05800074 	movhi	r22,1
    7e84:	94400217 	ldw	r17,8(r18)
    7e88:	05400074 	movhi	r21,1
    7e8c:	05000074 	movhi	r20,1
    7e90:	04c00074 	movhi	r19,1
    7e94:	b5aa4f04 	addi	r22,r22,-22212
    7e98:	ad6a6604 	addi	r21,r21,-22120
    7e9c:	a52a8504 	addi	r20,r20,-21996
    7ea0:	9cea9c04 	addi	r19,r19,-21904
    7ea4:	85800815 	stw	r22,32(r16)
    7ea8:	85400915 	stw	r21,36(r16)
    7eac:	85000a15 	stw	r20,40(r16)
    7eb0:	84c00b15 	stw	r19,44(r16)
    7eb4:	84000715 	stw	r16,28(r16)
    7eb8:	00800284 	movi	r2,10
    7ebc:	89001704 	addi	r4,r17,92
    7ec0:	b80d883a 	mov	r6,r23
    7ec4:	000b883a 	mov	r5,zero
    7ec8:	88000015 	stw	zero,0(r17)
    7ecc:	88000115 	stw	zero,4(r17)
    7ed0:	88000215 	stw	zero,8(r17)
    7ed4:	8880030d 	sth	r2,12(r17)
    7ed8:	88001915 	stw	zero,100(r17)
    7edc:	8f00038d 	sth	fp,14(r17)
    7ee0:	88000415 	stw	zero,16(r17)
    7ee4:	88000515 	stw	zero,20(r17)
    7ee8:	88000615 	stw	zero,24(r17)
    7eec:	00091bc0 	call	91bc <memset>
    7ef0:	94000317 	ldw	r16,12(r18)
    7ef4:	00800484 	movi	r2,18
    7ef8:	8c400715 	stw	r17,28(r17)
    7efc:	8d800815 	stw	r22,32(r17)
    7f00:	8d400915 	stw	r21,36(r17)
    7f04:	8d000a15 	stw	r20,40(r17)
    7f08:	8cc00b15 	stw	r19,44(r17)
    7f0c:	8080030d 	sth	r2,12(r16)
    7f10:	00800084 	movi	r2,2
    7f14:	80000015 	stw	zero,0(r16)
    7f18:	80000115 	stw	zero,4(r16)
    7f1c:	80000215 	stw	zero,8(r16)
    7f20:	80001915 	stw	zero,100(r16)
    7f24:	8080038d 	sth	r2,14(r16)
    7f28:	80000415 	stw	zero,16(r16)
    7f2c:	80000515 	stw	zero,20(r16)
    7f30:	80000615 	stw	zero,24(r16)
    7f34:	81001704 	addi	r4,r16,92
    7f38:	000b883a 	mov	r5,zero
    7f3c:	b80d883a 	mov	r6,r23
    7f40:	00091bc0 	call	91bc <memset>
    7f44:	84000715 	stw	r16,28(r16)
    7f48:	85800815 	stw	r22,32(r16)
    7f4c:	85400915 	stw	r21,36(r16)
    7f50:	85000a15 	stw	r20,40(r16)
    7f54:	84c00b15 	stw	r19,44(r16)
    7f58:	dfc00917 	ldw	ra,36(sp)
    7f5c:	df000817 	ldw	fp,32(sp)
    7f60:	ddc00717 	ldw	r23,28(sp)
    7f64:	dd800617 	ldw	r22,24(sp)
    7f68:	dd400517 	ldw	r21,20(sp)
    7f6c:	dd000417 	ldw	r20,16(sp)
    7f70:	dcc00317 	ldw	r19,12(sp)
    7f74:	dc800217 	ldw	r18,8(sp)
    7f78:	dc400117 	ldw	r17,4(sp)
    7f7c:	dc000017 	ldw	r16,0(sp)
    7f80:	dec00a04 	addi	sp,sp,40
    7f84:	f800283a 	ret

00007f88 <__sfmoreglue>:
    7f88:	defffc04 	addi	sp,sp,-16
    7f8c:	dc800215 	stw	r18,8(sp)
    7f90:	2825883a 	mov	r18,r5
    7f94:	dc000015 	stw	r16,0(sp)
    7f98:	01401a04 	movi	r5,104
    7f9c:	2021883a 	mov	r16,r4
    7fa0:	9009883a 	mov	r4,r18
    7fa4:	dfc00315 	stw	ra,12(sp)
    7fa8:	dc400115 	stw	r17,4(sp)
    7fac:	000d72c0 	call	d72c <__mulsi3>
    7fb0:	8009883a 	mov	r4,r16
    7fb4:	11400304 	addi	r5,r2,12
    7fb8:	1023883a 	mov	r17,r2
    7fbc:	00035900 	call	3590 <_malloc_r>
    7fc0:	1021883a 	mov	r16,r2
    7fc4:	10000726 	beq	r2,zero,7fe4 <__sfmoreglue+0x5c>
    7fc8:	11000304 	addi	r4,r2,12
    7fcc:	10000015 	stw	zero,0(r2)
    7fd0:	14800115 	stw	r18,4(r2)
    7fd4:	11000215 	stw	r4,8(r2)
    7fd8:	000b883a 	mov	r5,zero
    7fdc:	880d883a 	mov	r6,r17
    7fe0:	00091bc0 	call	91bc <memset>
    7fe4:	8005883a 	mov	r2,r16
    7fe8:	dfc00317 	ldw	ra,12(sp)
    7fec:	dc800217 	ldw	r18,8(sp)
    7ff0:	dc400117 	ldw	r17,4(sp)
    7ff4:	dc000017 	ldw	r16,0(sp)
    7ff8:	dec00404 	addi	sp,sp,16
    7ffc:	f800283a 	ret

00008000 <__sfp>:
    8000:	00800074 	movhi	r2,1
    8004:	defffb04 	addi	sp,sp,-20
    8008:	10936b04 	addi	r2,r2,19884
    800c:	dc800215 	stw	r18,8(sp)
    8010:	14800017 	ldw	r18,0(r2)
    8014:	dcc00315 	stw	r19,12(sp)
    8018:	dfc00415 	stw	ra,16(sp)
    801c:	90800e17 	ldw	r2,56(r18)
    8020:	dc400115 	stw	r17,4(sp)
    8024:	dc000015 	stw	r16,0(sp)
    8028:	2027883a 	mov	r19,r4
    802c:	1000021e 	bne	r2,zero,8038 <__sfp+0x38>
    8030:	9009883a 	mov	r4,r18
    8034:	0007de80 	call	7de8 <__sinit.part.1>
    8038:	9480b804 	addi	r18,r18,736
    803c:	047fffc4 	movi	r17,-1
    8040:	91400117 	ldw	r5,4(r18)
    8044:	94000217 	ldw	r16,8(r18)
    8048:	297fffc4 	addi	r5,r5,-1
    804c:	28000a16 	blt	r5,zero,8078 <__sfp+0x78>
    8050:	8080030f 	ldh	r2,12(r16)
    8054:	10000c26 	beq	r2,zero,8088 <__sfp+0x88>
    8058:	80c01d04 	addi	r3,r16,116
    805c:	00000206 	br	8068 <__sfp+0x68>
    8060:	18bfe60f 	ldh	r2,-104(r3)
    8064:	10000826 	beq	r2,zero,8088 <__sfp+0x88>
    8068:	297fffc4 	addi	r5,r5,-1
    806c:	1c3ffd04 	addi	r16,r3,-12
    8070:	18c01a04 	addi	r3,r3,104
    8074:	2c7ffa1e 	bne	r5,r17,8060 <__alt_data_end+0xfffb2930>
    8078:	90800017 	ldw	r2,0(r18)
    807c:	10001d26 	beq	r2,zero,80f4 <__sfp+0xf4>
    8080:	1025883a 	mov	r18,r2
    8084:	003fee06 	br	8040 <__alt_data_end+0xfffb2910>
    8088:	00bfffc4 	movi	r2,-1
    808c:	8080038d 	sth	r2,14(r16)
    8090:	00800044 	movi	r2,1
    8094:	8080030d 	sth	r2,12(r16)
    8098:	80001915 	stw	zero,100(r16)
    809c:	80000015 	stw	zero,0(r16)
    80a0:	80000215 	stw	zero,8(r16)
    80a4:	80000115 	stw	zero,4(r16)
    80a8:	80000415 	stw	zero,16(r16)
    80ac:	80000515 	stw	zero,20(r16)
    80b0:	80000615 	stw	zero,24(r16)
    80b4:	81001704 	addi	r4,r16,92
    80b8:	000b883a 	mov	r5,zero
    80bc:	01800204 	movi	r6,8
    80c0:	00091bc0 	call	91bc <memset>
    80c4:	8005883a 	mov	r2,r16
    80c8:	80000c15 	stw	zero,48(r16)
    80cc:	80000d15 	stw	zero,52(r16)
    80d0:	80001115 	stw	zero,68(r16)
    80d4:	80001215 	stw	zero,72(r16)
    80d8:	dfc00417 	ldw	ra,16(sp)
    80dc:	dcc00317 	ldw	r19,12(sp)
    80e0:	dc800217 	ldw	r18,8(sp)
    80e4:	dc400117 	ldw	r17,4(sp)
    80e8:	dc000017 	ldw	r16,0(sp)
    80ec:	dec00504 	addi	sp,sp,20
    80f0:	f800283a 	ret
    80f4:	9809883a 	mov	r4,r19
    80f8:	01400104 	movi	r5,4
    80fc:	0007f880 	call	7f88 <__sfmoreglue>
    8100:	90800015 	stw	r2,0(r18)
    8104:	103fde1e 	bne	r2,zero,8080 <__alt_data_end+0xfffb2950>
    8108:	00800304 	movi	r2,12
    810c:	98800015 	stw	r2,0(r19)
    8110:	0005883a 	mov	r2,zero
    8114:	003ff006 	br	80d8 <__alt_data_end+0xfffb29a8>

00008118 <_cleanup>:
    8118:	00800074 	movhi	r2,1
    811c:	10936b04 	addi	r2,r2,19884
    8120:	11000017 	ldw	r4,0(r2)
    8124:	01400074 	movhi	r5,1
    8128:	2970c004 	addi	r5,r5,-15616
    812c:	0008a381 	jmpi	8a38 <_fwalk>

00008130 <__sinit>:
    8130:	20800e17 	ldw	r2,56(r4)
    8134:	10000126 	beq	r2,zero,813c <__sinit+0xc>
    8138:	f800283a 	ret
    813c:	0007de81 	jmpi	7de8 <__sinit.part.1>

00008140 <__sfp_lock_acquire>:
    8140:	f800283a 	ret

00008144 <__sfp_lock_release>:
    8144:	f800283a 	ret

00008148 <__sinit_lock_acquire>:
    8148:	f800283a 	ret

0000814c <__sinit_lock_release>:
    814c:	f800283a 	ret

00008150 <__fp_lock_all>:
    8150:	00800074 	movhi	r2,1
    8154:	10936c04 	addi	r2,r2,19888
    8158:	11000017 	ldw	r4,0(r2)
    815c:	01400034 	movhi	r5,0
    8160:	295f7304 	addi	r5,r5,32204
    8164:	0008a381 	jmpi	8a38 <_fwalk>

00008168 <__fp_unlock_all>:
    8168:	00800074 	movhi	r2,1
    816c:	10936c04 	addi	r2,r2,19888
    8170:	11000017 	ldw	r4,0(r2)
    8174:	01400034 	movhi	r5,0
    8178:	295f7504 	addi	r5,r5,32212
    817c:	0008a381 	jmpi	8a38 <_fwalk>

00008180 <_malloc_trim_r>:
    8180:	defffb04 	addi	sp,sp,-20
    8184:	dcc00315 	stw	r19,12(sp)
    8188:	04c00074 	movhi	r19,1
    818c:	dc800215 	stw	r18,8(sp)
    8190:	dc400115 	stw	r17,4(sp)
    8194:	dc000015 	stw	r16,0(sp)
    8198:	dfc00415 	stw	ra,16(sp)
    819c:	2821883a 	mov	r16,r5
    81a0:	9cccbe04 	addi	r19,r19,13048
    81a4:	2025883a 	mov	r18,r4
    81a8:	00105300 	call	10530 <__malloc_lock>
    81ac:	98800217 	ldw	r2,8(r19)
    81b0:	14400117 	ldw	r17,4(r2)
    81b4:	00bfff04 	movi	r2,-4
    81b8:	88a2703a 	and	r17,r17,r2
    81bc:	8c21c83a 	sub	r16,r17,r16
    81c0:	8403fbc4 	addi	r16,r16,4079
    81c4:	8020d33a 	srli	r16,r16,12
    81c8:	0083ffc4 	movi	r2,4095
    81cc:	843fffc4 	addi	r16,r16,-1
    81d0:	8020933a 	slli	r16,r16,12
    81d4:	1400060e 	bge	r2,r16,81f0 <_malloc_trim_r+0x70>
    81d8:	9009883a 	mov	r4,r18
    81dc:	000b883a 	mov	r5,zero
    81e0:	0003ee80 	call	3ee8 <_sbrk_r>
    81e4:	98c00217 	ldw	r3,8(r19)
    81e8:	1c47883a 	add	r3,r3,r17
    81ec:	10c00a26 	beq	r2,r3,8218 <_malloc_trim_r+0x98>
    81f0:	9009883a 	mov	r4,r18
    81f4:	00105500 	call	10550 <__malloc_unlock>
    81f8:	0005883a 	mov	r2,zero
    81fc:	dfc00417 	ldw	ra,16(sp)
    8200:	dcc00317 	ldw	r19,12(sp)
    8204:	dc800217 	ldw	r18,8(sp)
    8208:	dc400117 	ldw	r17,4(sp)
    820c:	dc000017 	ldw	r16,0(sp)
    8210:	dec00504 	addi	sp,sp,20
    8214:	f800283a 	ret
    8218:	9009883a 	mov	r4,r18
    821c:	040bc83a 	sub	r5,zero,r16
    8220:	0003ee80 	call	3ee8 <_sbrk_r>
    8224:	00ffffc4 	movi	r3,-1
    8228:	10c00d26 	beq	r2,r3,8260 <_malloc_trim_r+0xe0>
    822c:	00c00074 	movhi	r3,1
    8230:	18da6504 	addi	r3,r3,27028
    8234:	18800017 	ldw	r2,0(r3)
    8238:	99000217 	ldw	r4,8(r19)
    823c:	8c23c83a 	sub	r17,r17,r16
    8240:	8c400054 	ori	r17,r17,1
    8244:	1421c83a 	sub	r16,r2,r16
    8248:	24400115 	stw	r17,4(r4)
    824c:	9009883a 	mov	r4,r18
    8250:	1c000015 	stw	r16,0(r3)
    8254:	00105500 	call	10550 <__malloc_unlock>
    8258:	00800044 	movi	r2,1
    825c:	003fe706 	br	81fc <__alt_data_end+0xfffb2acc>
    8260:	9009883a 	mov	r4,r18
    8264:	000b883a 	mov	r5,zero
    8268:	0003ee80 	call	3ee8 <_sbrk_r>
    826c:	99000217 	ldw	r4,8(r19)
    8270:	014003c4 	movi	r5,15
    8274:	1107c83a 	sub	r3,r2,r4
    8278:	28ffdd0e 	bge	r5,r3,81f0 <__alt_data_end+0xfffb2ac0>
    827c:	01400074 	movhi	r5,1
    8280:	29536904 	addi	r5,r5,19876
    8284:	29400017 	ldw	r5,0(r5)
    8288:	18c00054 	ori	r3,r3,1
    828c:	20c00115 	stw	r3,4(r4)
    8290:	00c00074 	movhi	r3,1
    8294:	1145c83a 	sub	r2,r2,r5
    8298:	18da6504 	addi	r3,r3,27028
    829c:	18800015 	stw	r2,0(r3)
    82a0:	003fd306 	br	81f0 <__alt_data_end+0xfffb2ac0>

000082a4 <_free_r>:
    82a4:	28004c26 	beq	r5,zero,83d8 <_free_r+0x134>
    82a8:	defffd04 	addi	sp,sp,-12
    82ac:	dc400115 	stw	r17,4(sp)
    82b0:	dc000015 	stw	r16,0(sp)
    82b4:	2023883a 	mov	r17,r4
    82b8:	2821883a 	mov	r16,r5
    82bc:	dfc00215 	stw	ra,8(sp)
    82c0:	00105300 	call	10530 <__malloc_lock>
    82c4:	813fff17 	ldw	r4,-4(r16)
    82c8:	00bfff84 	movi	r2,-2
    82cc:	02400074 	movhi	r9,1
    82d0:	81bffe04 	addi	r6,r16,-8
    82d4:	2084703a 	and	r2,r4,r2
    82d8:	4a4cbe04 	addi	r9,r9,13048
    82dc:	308b883a 	add	r5,r6,r2
    82e0:	2a000117 	ldw	r8,4(r5)
    82e4:	49c00217 	ldw	r7,8(r9)
    82e8:	00ffff04 	movi	r3,-4
    82ec:	40c6703a 	and	r3,r8,r3
    82f0:	39405326 	beq	r7,r5,8440 <_free_r+0x19c>
    82f4:	28c00115 	stw	r3,4(r5)
    82f8:	2100004c 	andi	r4,r4,1
    82fc:	2000091e 	bne	r4,zero,8324 <_free_r+0x80>
    8300:	81fffe17 	ldw	r7,-8(r16)
    8304:	4a000204 	addi	r8,r9,8
    8308:	31cdc83a 	sub	r6,r6,r7
    830c:	31000217 	ldw	r4,8(r6)
    8310:	11c5883a 	add	r2,r2,r7
    8314:	22006126 	beq	r4,r8,849c <_free_r+0x1f8>
    8318:	31c00317 	ldw	r7,12(r6)
    831c:	21c00315 	stw	r7,12(r4)
    8320:	39000215 	stw	r4,8(r7)
    8324:	28c9883a 	add	r4,r5,r3
    8328:	21c00117 	ldw	r7,4(r4)
    832c:	39c0004c 	andi	r7,r7,1
    8330:	38000d1e 	bne	r7,zero,8368 <_free_r+0xc4>
    8334:	29000217 	ldw	r4,8(r5)
    8338:	10c5883a 	add	r2,r2,r3
    833c:	00c00074 	movhi	r3,1
    8340:	18ccc004 	addi	r3,r3,13056
    8344:	20c07526 	beq	r4,r3,851c <_free_r+0x278>
    8348:	29c00317 	ldw	r7,12(r5)
    834c:	11400054 	ori	r5,r2,1
    8350:	3087883a 	add	r3,r6,r2
    8354:	21c00315 	stw	r7,12(r4)
    8358:	39000215 	stw	r4,8(r7)
    835c:	31400115 	stw	r5,4(r6)
    8360:	18800015 	stw	r2,0(r3)
    8364:	00000406 	br	8378 <_free_r+0xd4>
    8368:	10c00054 	ori	r3,r2,1
    836c:	30c00115 	stw	r3,4(r6)
    8370:	3087883a 	add	r3,r6,r2
    8374:	18800015 	stw	r2,0(r3)
    8378:	00c07fc4 	movi	r3,511
    837c:	18801736 	bltu	r3,r2,83dc <_free_r+0x138>
    8380:	1004d0fa 	srli	r2,r2,3
    8384:	01400044 	movi	r5,1
    8388:	49000117 	ldw	r4,4(r9)
    838c:	1087883a 	add	r3,r2,r2
    8390:	18c7883a 	add	r3,r3,r3
    8394:	1005d0ba 	srai	r2,r2,2
    8398:	18c7883a 	add	r3,r3,r3
    839c:	1a47883a 	add	r3,r3,r9
    83a0:	19c00217 	ldw	r7,8(r3)
    83a4:	2884983a 	sll	r2,r5,r2
    83a8:	30c00315 	stw	r3,12(r6)
    83ac:	31c00215 	stw	r7,8(r6)
    83b0:	1104b03a 	or	r2,r2,r4
    83b4:	19800215 	stw	r6,8(r3)
    83b8:	48800115 	stw	r2,4(r9)
    83bc:	39800315 	stw	r6,12(r7)
    83c0:	8809883a 	mov	r4,r17
    83c4:	dfc00217 	ldw	ra,8(sp)
    83c8:	dc400117 	ldw	r17,4(sp)
    83cc:	dc000017 	ldw	r16,0(sp)
    83d0:	dec00304 	addi	sp,sp,12
    83d4:	00105501 	jmpi	10550 <__malloc_unlock>
    83d8:	f800283a 	ret
    83dc:	1006d27a 	srli	r3,r2,9
    83e0:	01000104 	movi	r4,4
    83e4:	20c04036 	bltu	r4,r3,84e8 <_free_r+0x244>
    83e8:	1006d1ba 	srli	r3,r2,6
    83ec:	19400e04 	addi	r5,r3,56
    83f0:	2947883a 	add	r3,r5,r5
    83f4:	18c7883a 	add	r3,r3,r3
    83f8:	18c7883a 	add	r3,r3,r3
    83fc:	1a49883a 	add	r4,r3,r9
    8400:	20c00217 	ldw	r3,8(r4)
    8404:	01c00074 	movhi	r7,1
    8408:	39ccbe04 	addi	r7,r7,13048
    840c:	19003b26 	beq	r3,r4,84fc <_free_r+0x258>
    8410:	01ffff04 	movi	r7,-4
    8414:	19400117 	ldw	r5,4(r3)
    8418:	29ca703a 	and	r5,r5,r7
    841c:	1140022e 	bgeu	r2,r5,8428 <_free_r+0x184>
    8420:	18c00217 	ldw	r3,8(r3)
    8424:	20fffb1e 	bne	r4,r3,8414 <__alt_data_end+0xfffb2ce4>
    8428:	18800317 	ldw	r2,12(r3)
    842c:	30800315 	stw	r2,12(r6)
    8430:	30c00215 	stw	r3,8(r6)
    8434:	11800215 	stw	r6,8(r2)
    8438:	19800315 	stw	r6,12(r3)
    843c:	003fe006 	br	83c0 <__alt_data_end+0xfffb2c90>
    8440:	2100004c 	andi	r4,r4,1
    8444:	1885883a 	add	r2,r3,r2
    8448:	2000071e 	bne	r4,zero,8468 <_free_r+0x1c4>
    844c:	817ffe17 	ldw	r5,-8(r16)
    8450:	314dc83a 	sub	r6,r6,r5
    8454:	30c00317 	ldw	r3,12(r6)
    8458:	31000217 	ldw	r4,8(r6)
    845c:	1145883a 	add	r2,r2,r5
    8460:	20c00315 	stw	r3,12(r4)
    8464:	19000215 	stw	r4,8(r3)
    8468:	10c00054 	ori	r3,r2,1
    846c:	30c00115 	stw	r3,4(r6)
    8470:	00c00074 	movhi	r3,1
    8474:	18d36a04 	addi	r3,r3,19880
    8478:	18c00017 	ldw	r3,0(r3)
    847c:	49800215 	stw	r6,8(r9)
    8480:	10ffcf36 	bltu	r2,r3,83c0 <__alt_data_end+0xfffb2c90>
    8484:	00800074 	movhi	r2,1
    8488:	109a5904 	addi	r2,r2,26980
    848c:	11400017 	ldw	r5,0(r2)
    8490:	8809883a 	mov	r4,r17
    8494:	00081800 	call	8180 <_malloc_trim_r>
    8498:	003fc906 	br	83c0 <__alt_data_end+0xfffb2c90>
    849c:	28c9883a 	add	r4,r5,r3
    84a0:	21000117 	ldw	r4,4(r4)
    84a4:	2100004c 	andi	r4,r4,1
    84a8:	20000a1e 	bne	r4,zero,84d4 <_free_r+0x230>
    84ac:	29000317 	ldw	r4,12(r5)
    84b0:	29400217 	ldw	r5,8(r5)
    84b4:	10c5883a 	add	r2,r2,r3
    84b8:	10c00054 	ori	r3,r2,1
    84bc:	29000315 	stw	r4,12(r5)
    84c0:	21400215 	stw	r5,8(r4)
    84c4:	30c00115 	stw	r3,4(r6)
    84c8:	308d883a 	add	r6,r6,r2
    84cc:	30800015 	stw	r2,0(r6)
    84d0:	003fbb06 	br	83c0 <__alt_data_end+0xfffb2c90>
    84d4:	10c00054 	ori	r3,r2,1
    84d8:	30c00115 	stw	r3,4(r6)
    84dc:	308d883a 	add	r6,r6,r2
    84e0:	30800015 	stw	r2,0(r6)
    84e4:	003fb606 	br	83c0 <__alt_data_end+0xfffb2c90>
    84e8:	01000504 	movi	r4,20
    84ec:	20c01436 	bltu	r4,r3,8540 <_free_r+0x29c>
    84f0:	194016c4 	addi	r5,r3,91
    84f4:	2947883a 	add	r3,r5,r5
    84f8:	003fbe06 	br	83f4 <__alt_data_end+0xfffb2cc4>
    84fc:	280bd0ba 	srai	r5,r5,2
    8500:	00800044 	movi	r2,1
    8504:	39000117 	ldw	r4,4(r7)
    8508:	114a983a 	sll	r5,r2,r5
    850c:	1805883a 	mov	r2,r3
    8510:	2908b03a 	or	r4,r5,r4
    8514:	39000115 	stw	r4,4(r7)
    8518:	003fc406 	br	842c <__alt_data_end+0xfffb2cfc>
    851c:	49800515 	stw	r6,20(r9)
    8520:	49800415 	stw	r6,16(r9)
    8524:	10c00054 	ori	r3,r2,1
    8528:	31000315 	stw	r4,12(r6)
    852c:	31000215 	stw	r4,8(r6)
    8530:	30c00115 	stw	r3,4(r6)
    8534:	308d883a 	add	r6,r6,r2
    8538:	30800015 	stw	r2,0(r6)
    853c:	003fa006 	br	83c0 <__alt_data_end+0xfffb2c90>
    8540:	01001504 	movi	r4,84
    8544:	20c00436 	bltu	r4,r3,8558 <_free_r+0x2b4>
    8548:	1006d33a 	srli	r3,r2,12
    854c:	19401b84 	addi	r5,r3,110
    8550:	2947883a 	add	r3,r5,r5
    8554:	003fa706 	br	83f4 <__alt_data_end+0xfffb2cc4>
    8558:	01005504 	movi	r4,340
    855c:	20c00436 	bltu	r4,r3,8570 <_free_r+0x2cc>
    8560:	1006d3fa 	srli	r3,r2,15
    8564:	19401dc4 	addi	r5,r3,119
    8568:	2947883a 	add	r3,r5,r5
    856c:	003fa106 	br	83f4 <__alt_data_end+0xfffb2cc4>
    8570:	01015504 	movi	r4,1364
    8574:	20c00436 	bltu	r4,r3,8588 <_free_r+0x2e4>
    8578:	1006d4ba 	srli	r3,r2,18
    857c:	19401f04 	addi	r5,r3,124
    8580:	2947883a 	add	r3,r5,r5
    8584:	003f9b06 	br	83f4 <__alt_data_end+0xfffb2cc4>
    8588:	00c03f04 	movi	r3,252
    858c:	01401f84 	movi	r5,126
    8590:	003f9806 	br	83f4 <__alt_data_end+0xfffb2cc4>

00008594 <__sfvwrite_r>:
    8594:	30800217 	ldw	r2,8(r6)
    8598:	10004526 	beq	r2,zero,86b0 <__sfvwrite_r+0x11c>
    859c:	28c0030b 	ldhu	r3,12(r5)
    85a0:	defff404 	addi	sp,sp,-48
    85a4:	dd400715 	stw	r21,28(sp)
    85a8:	dcc00515 	stw	r19,20(sp)
    85ac:	dc000215 	stw	r16,8(sp)
    85b0:	dfc00b15 	stw	ra,44(sp)
    85b4:	df000a15 	stw	fp,40(sp)
    85b8:	ddc00915 	stw	r23,36(sp)
    85bc:	dd800815 	stw	r22,32(sp)
    85c0:	dd000615 	stw	r20,24(sp)
    85c4:	dc800415 	stw	r18,16(sp)
    85c8:	dc400315 	stw	r17,12(sp)
    85cc:	1880020c 	andi	r2,r3,8
    85d0:	2821883a 	mov	r16,r5
    85d4:	202b883a 	mov	r21,r4
    85d8:	3027883a 	mov	r19,r6
    85dc:	10002526 	beq	r2,zero,8674 <__sfvwrite_r+0xe0>
    85e0:	28800417 	ldw	r2,16(r5)
    85e4:	10002326 	beq	r2,zero,8674 <__sfvwrite_r+0xe0>
    85e8:	1880008c 	andi	r2,r3,2
    85ec:	9c400017 	ldw	r17,0(r19)
    85f0:	10003126 	beq	r2,zero,86b8 <__sfvwrite_r+0x124>
    85f4:	0029883a 	mov	r20,zero
    85f8:	0025883a 	mov	r18,zero
    85fc:	05810004 	movi	r22,1024
    8600:	a00d883a 	mov	r6,r20
    8604:	a809883a 	mov	r4,r21
    8608:	90002526 	beq	r18,zero,86a0 <__sfvwrite_r+0x10c>
    860c:	900f883a 	mov	r7,r18
    8610:	81400717 	ldw	r5,28(r16)
    8614:	b480012e 	bgeu	r22,r18,861c <__sfvwrite_r+0x88>
    8618:	01c10004 	movi	r7,1024
    861c:	80800917 	ldw	r2,36(r16)
    8620:	103ee83a 	callr	r2
    8624:	0080510e 	bge	zero,r2,876c <__sfvwrite_r+0x1d8>
    8628:	98c00217 	ldw	r3,8(r19)
    862c:	a0a9883a 	add	r20,r20,r2
    8630:	90a5c83a 	sub	r18,r18,r2
    8634:	1885c83a 	sub	r2,r3,r2
    8638:	98800215 	stw	r2,8(r19)
    863c:	103ff01e 	bne	r2,zero,8600 <__alt_data_end+0xfffb2ed0>
    8640:	0005883a 	mov	r2,zero
    8644:	dfc00b17 	ldw	ra,44(sp)
    8648:	df000a17 	ldw	fp,40(sp)
    864c:	ddc00917 	ldw	r23,36(sp)
    8650:	dd800817 	ldw	r22,32(sp)
    8654:	dd400717 	ldw	r21,28(sp)
    8658:	dd000617 	ldw	r20,24(sp)
    865c:	dcc00517 	ldw	r19,20(sp)
    8660:	dc800417 	ldw	r18,16(sp)
    8664:	dc400317 	ldw	r17,12(sp)
    8668:	dc000217 	ldw	r16,8(sp)
    866c:	dec00c04 	addi	sp,sp,48
    8670:	f800283a 	ret
    8674:	a809883a 	mov	r4,r21
    8678:	800b883a 	mov	r5,r16
    867c:	00060f40 	call	60f4 <__swsetup_r>
    8680:	80c0030b 	ldhu	r3,12(r16)
    8684:	103fd826 	beq	r2,zero,85e8 <__alt_data_end+0xfffb2eb8>
    8688:	18c01014 	ori	r3,r3,64
    868c:	80c0030d 	sth	r3,12(r16)
    8690:	00c00244 	movi	r3,9
    8694:	00bfffc4 	movi	r2,-1
    8698:	a8c00015 	stw	r3,0(r21)
    869c:	003fe906 	br	8644 <__alt_data_end+0xfffb2f14>
    86a0:	8d000017 	ldw	r20,0(r17)
    86a4:	8c800117 	ldw	r18,4(r17)
    86a8:	8c400204 	addi	r17,r17,8
    86ac:	003fd406 	br	8600 <__alt_data_end+0xfffb2ed0>
    86b0:	0005883a 	mov	r2,zero
    86b4:	f800283a 	ret
    86b8:	1880004c 	andi	r2,r3,1
    86bc:	1000301e 	bne	r2,zero,8780 <__sfvwrite_r+0x1ec>
    86c0:	002f883a 	mov	r23,zero
    86c4:	0025883a 	mov	r18,zero
    86c8:	90001c26 	beq	r18,zero,873c <__sfvwrite_r+0x1a8>
    86cc:	1880800c 	andi	r2,r3,512
    86d0:	85000217 	ldw	r20,8(r16)
    86d4:	10006c26 	beq	r2,zero,8888 <__sfvwrite_r+0x2f4>
    86d8:	a02d883a 	mov	r22,r20
    86dc:	95008536 	bltu	r18,r20,88f4 <__sfvwrite_r+0x360>
    86e0:	1881200c 	andi	r2,r3,1152
    86e4:	10009d1e 	bne	r2,zero,895c <__sfvwrite_r+0x3c8>
    86e8:	81000017 	ldw	r4,0(r16)
    86ec:	a039883a 	mov	fp,r20
    86f0:	9029883a 	mov	r20,r18
    86f4:	b80b883a 	mov	r5,r23
    86f8:	b00d883a 	mov	r6,r22
    86fc:	00090600 	call	9060 <memmove>
    8700:	80c00217 	ldw	r3,8(r16)
    8704:	81000017 	ldw	r4,0(r16)
    8708:	9005883a 	mov	r2,r18
    870c:	1f39c83a 	sub	fp,r3,fp
    8710:	258f883a 	add	r7,r4,r22
    8714:	87000215 	stw	fp,8(r16)
    8718:	81c00015 	stw	r7,0(r16)
    871c:	98c00217 	ldw	r3,8(r19)
    8720:	b8af883a 	add	r23,r23,r2
    8724:	90a5c83a 	sub	r18,r18,r2
    8728:	1d05c83a 	sub	r2,r3,r20
    872c:	98800215 	stw	r2,8(r19)
    8730:	103fc326 	beq	r2,zero,8640 <__alt_data_end+0xfffb2f10>
    8734:	80c0030b 	ldhu	r3,12(r16)
    8738:	903fe41e 	bne	r18,zero,86cc <__alt_data_end+0xfffb2f9c>
    873c:	8dc00017 	ldw	r23,0(r17)
    8740:	8c800117 	ldw	r18,4(r17)
    8744:	8c400204 	addi	r17,r17,8
    8748:	003fdf06 	br	86c8 <__alt_data_end+0xfffb2f98>
    874c:	000a3280 	call	a328 <_realloc_r>
    8750:	102d883a 	mov	r22,r2
    8754:	1000a01e 	bne	r2,zero,89d8 <__sfvwrite_r+0x444>
    8758:	81400417 	ldw	r5,16(r16)
    875c:	a809883a 	mov	r4,r21
    8760:	00082a40 	call	82a4 <_free_r>
    8764:	00800304 	movi	r2,12
    8768:	a8800015 	stw	r2,0(r21)
    876c:	80c0030b 	ldhu	r3,12(r16)
    8770:	00bfffc4 	movi	r2,-1
    8774:	18c01014 	ori	r3,r3,64
    8778:	80c0030d 	sth	r3,12(r16)
    877c:	003fb106 	br	8644 <__alt_data_end+0xfffb2f14>
    8780:	0029883a 	mov	r20,zero
    8784:	0011883a 	mov	r8,zero
    8788:	0039883a 	mov	fp,zero
    878c:	0025883a 	mov	r18,zero
    8790:	90001f26 	beq	r18,zero,8810 <__sfvwrite_r+0x27c>
    8794:	40006826 	beq	r8,zero,8938 <__sfvwrite_r+0x3a4>
    8798:	a02f883a 	mov	r23,r20
    879c:	9500012e 	bgeu	r18,r20,87a4 <__sfvwrite_r+0x210>
    87a0:	902f883a 	mov	r23,r18
    87a4:	81000017 	ldw	r4,0(r16)
    87a8:	80800417 	ldw	r2,16(r16)
    87ac:	b82d883a 	mov	r22,r23
    87b0:	81800217 	ldw	r6,8(r16)
    87b4:	81c00517 	ldw	r7,20(r16)
    87b8:	1100022e 	bgeu	r2,r4,87c4 <__sfvwrite_r+0x230>
    87bc:	31c7883a 	add	r3,r6,r7
    87c0:	1dc01816 	blt	r3,r23,8824 <__sfvwrite_r+0x290>
    87c4:	b9c03f16 	blt	r23,r7,88c4 <__sfvwrite_r+0x330>
    87c8:	80800917 	ldw	r2,36(r16)
    87cc:	81400717 	ldw	r5,28(r16)
    87d0:	a809883a 	mov	r4,r21
    87d4:	da000115 	stw	r8,4(sp)
    87d8:	e00d883a 	mov	r6,fp
    87dc:	103ee83a 	callr	r2
    87e0:	102d883a 	mov	r22,r2
    87e4:	da000117 	ldw	r8,4(sp)
    87e8:	00bfe00e 	bge	zero,r2,876c <__alt_data_end+0xfffb303c>
    87ec:	a5a9c83a 	sub	r20,r20,r22
    87f0:	a0001f26 	beq	r20,zero,8870 <__sfvwrite_r+0x2dc>
    87f4:	98800217 	ldw	r2,8(r19)
    87f8:	e5b9883a 	add	fp,fp,r22
    87fc:	95a5c83a 	sub	r18,r18,r22
    8800:	15adc83a 	sub	r22,r2,r22
    8804:	9d800215 	stw	r22,8(r19)
    8808:	b03f8d26 	beq	r22,zero,8640 <__alt_data_end+0xfffb2f10>
    880c:	903fe11e 	bne	r18,zero,8794 <__alt_data_end+0xfffb3064>
    8810:	8f000017 	ldw	fp,0(r17)
    8814:	8c800117 	ldw	r18,4(r17)
    8818:	0011883a 	mov	r8,zero
    881c:	8c400204 	addi	r17,r17,8
    8820:	003fdb06 	br	8790 <__alt_data_end+0xfffb3060>
    8824:	180d883a 	mov	r6,r3
    8828:	e00b883a 	mov	r5,fp
    882c:	da000115 	stw	r8,4(sp)
    8830:	d8c00015 	stw	r3,0(sp)
    8834:	00090600 	call	9060 <memmove>
    8838:	d8c00017 	ldw	r3,0(sp)
    883c:	80800017 	ldw	r2,0(r16)
    8840:	a809883a 	mov	r4,r21
    8844:	800b883a 	mov	r5,r16
    8848:	10c5883a 	add	r2,r2,r3
    884c:	80800015 	stw	r2,0(r16)
    8850:	d8c00015 	stw	r3,0(sp)
    8854:	0007b740 	call	7b74 <_fflush_r>
    8858:	d8c00017 	ldw	r3,0(sp)
    885c:	da000117 	ldw	r8,4(sp)
    8860:	103fc21e 	bne	r2,zero,876c <__alt_data_end+0xfffb303c>
    8864:	182d883a 	mov	r22,r3
    8868:	a5a9c83a 	sub	r20,r20,r22
    886c:	a03fe11e 	bne	r20,zero,87f4 <__alt_data_end+0xfffb30c4>
    8870:	a809883a 	mov	r4,r21
    8874:	800b883a 	mov	r5,r16
    8878:	0007b740 	call	7b74 <_fflush_r>
    887c:	103fbb1e 	bne	r2,zero,876c <__alt_data_end+0xfffb303c>
    8880:	0011883a 	mov	r8,zero
    8884:	003fdb06 	br	87f4 <__alt_data_end+0xfffb30c4>
    8888:	81000017 	ldw	r4,0(r16)
    888c:	80800417 	ldw	r2,16(r16)
    8890:	1100012e 	bgeu	r2,r4,8898 <__sfvwrite_r+0x304>
    8894:	a4805a36 	bltu	r20,r18,8a00 <__sfvwrite_r+0x46c>
    8898:	81c00517 	ldw	r7,20(r16)
    889c:	91c01a36 	bltu	r18,r7,8908 <__sfvwrite_r+0x374>
    88a0:	80800917 	ldw	r2,36(r16)
    88a4:	81400717 	ldw	r5,28(r16)
    88a8:	a809883a 	mov	r4,r21
    88ac:	b80d883a 	mov	r6,r23
    88b0:	103ee83a 	callr	r2
    88b4:	1029883a 	mov	r20,r2
    88b8:	00bfac0e 	bge	zero,r2,876c <__alt_data_end+0xfffb303c>
    88bc:	a005883a 	mov	r2,r20
    88c0:	003f9606 	br	871c <__alt_data_end+0xfffb2fec>
    88c4:	b80d883a 	mov	r6,r23
    88c8:	e00b883a 	mov	r5,fp
    88cc:	da000115 	stw	r8,4(sp)
    88d0:	00090600 	call	9060 <memmove>
    88d4:	80800217 	ldw	r2,8(r16)
    88d8:	80c00017 	ldw	r3,0(r16)
    88dc:	da000117 	ldw	r8,4(sp)
    88e0:	15c5c83a 	sub	r2,r2,r23
    88e4:	1def883a 	add	r23,r3,r23
    88e8:	80800215 	stw	r2,8(r16)
    88ec:	85c00015 	stw	r23,0(r16)
    88f0:	003fbe06 	br	87ec <__alt_data_end+0xfffb30bc>
    88f4:	81000017 	ldw	r4,0(r16)
    88f8:	9039883a 	mov	fp,r18
    88fc:	9029883a 	mov	r20,r18
    8900:	902d883a 	mov	r22,r18
    8904:	003f7b06 	br	86f4 <__alt_data_end+0xfffb2fc4>
    8908:	b80b883a 	mov	r5,r23
    890c:	900d883a 	mov	r6,r18
    8910:	00090600 	call	9060 <memmove>
    8914:	80c00217 	ldw	r3,8(r16)
    8918:	80800017 	ldw	r2,0(r16)
    891c:	9029883a 	mov	r20,r18
    8920:	1c87c83a 	sub	r3,r3,r18
    8924:	1485883a 	add	r2,r2,r18
    8928:	80800015 	stw	r2,0(r16)
    892c:	80c00215 	stw	r3,8(r16)
    8930:	9005883a 	mov	r2,r18
    8934:	003f7906 	br	871c <__alt_data_end+0xfffb2fec>
    8938:	e009883a 	mov	r4,fp
    893c:	01400284 	movi	r5,10
    8940:	900d883a 	mov	r6,r18
    8944:	0008e400 	call	8e40 <memchr>
    8948:	10003826 	beq	r2,zero,8a2c <__sfvwrite_r+0x498>
    894c:	10800044 	addi	r2,r2,1
    8950:	1729c83a 	sub	r20,r2,fp
    8954:	02000044 	movi	r8,1
    8958:	003f8f06 	br	8798 <__alt_data_end+0xfffb3068>
    895c:	80800517 	ldw	r2,20(r16)
    8960:	81400417 	ldw	r5,16(r16)
    8964:	87000017 	ldw	fp,0(r16)
    8968:	10a9883a 	add	r20,r2,r2
    896c:	a085883a 	add	r2,r20,r2
    8970:	1028d7fa 	srli	r20,r2,31
    8974:	e179c83a 	sub	fp,fp,r5
    8978:	e1000044 	addi	r4,fp,1
    897c:	a085883a 	add	r2,r20,r2
    8980:	1029d07a 	srai	r20,r2,1
    8984:	2485883a 	add	r2,r4,r18
    8988:	a00d883a 	mov	r6,r20
    898c:	a080022e 	bgeu	r20,r2,8998 <__sfvwrite_r+0x404>
    8990:	1029883a 	mov	r20,r2
    8994:	100d883a 	mov	r6,r2
    8998:	18c1000c 	andi	r3,r3,1024
    899c:	a809883a 	mov	r4,r21
    89a0:	183f6a26 	beq	r3,zero,874c <__alt_data_end+0xfffb301c>
    89a4:	300b883a 	mov	r5,r6
    89a8:	00035900 	call	3590 <_malloc_r>
    89ac:	102d883a 	mov	r22,r2
    89b0:	103f6c26 	beq	r2,zero,8764 <__alt_data_end+0xfffb3034>
    89b4:	81400417 	ldw	r5,16(r16)
    89b8:	1009883a 	mov	r4,r2
    89bc:	e00d883a 	mov	r6,fp
    89c0:	0008f280 	call	8f28 <memcpy>
    89c4:	8080030b 	ldhu	r2,12(r16)
    89c8:	00fedfc4 	movi	r3,-1153
    89cc:	10c4703a 	and	r2,r2,r3
    89d0:	10802014 	ori	r2,r2,128
    89d4:	8080030d 	sth	r2,12(r16)
    89d8:	b709883a 	add	r4,r22,fp
    89dc:	a707c83a 	sub	r3,r20,fp
    89e0:	85800415 	stw	r22,16(r16)
    89e4:	85000515 	stw	r20,20(r16)
    89e8:	81000015 	stw	r4,0(r16)
    89ec:	9039883a 	mov	fp,r18
    89f0:	80c00215 	stw	r3,8(r16)
    89f4:	9029883a 	mov	r20,r18
    89f8:	902d883a 	mov	r22,r18
    89fc:	003f3d06 	br	86f4 <__alt_data_end+0xfffb2fc4>
    8a00:	b80b883a 	mov	r5,r23
    8a04:	a00d883a 	mov	r6,r20
    8a08:	00090600 	call	9060 <memmove>
    8a0c:	80800017 	ldw	r2,0(r16)
    8a10:	a809883a 	mov	r4,r21
    8a14:	800b883a 	mov	r5,r16
    8a18:	1505883a 	add	r2,r2,r20
    8a1c:	80800015 	stw	r2,0(r16)
    8a20:	0007b740 	call	7b74 <_fflush_r>
    8a24:	103fa526 	beq	r2,zero,88bc <__alt_data_end+0xfffb318c>
    8a28:	003f5006 	br	876c <__alt_data_end+0xfffb303c>
    8a2c:	95000044 	addi	r20,r18,1
    8a30:	02000044 	movi	r8,1
    8a34:	003f5806 	br	8798 <__alt_data_end+0xfffb3068>

00008a38 <_fwalk>:
    8a38:	defff804 	addi	sp,sp,-32
    8a3c:	dd400515 	stw	r21,20(sp)
    8a40:	2540b804 	addi	r21,r4,736
    8a44:	dd800615 	stw	r22,24(sp)
    8a48:	dd000415 	stw	r20,16(sp)
    8a4c:	dfc00715 	stw	ra,28(sp)
    8a50:	dcc00315 	stw	r19,12(sp)
    8a54:	dc800215 	stw	r18,8(sp)
    8a58:	dc400115 	stw	r17,4(sp)
    8a5c:	dc000015 	stw	r16,0(sp)
    8a60:	2829883a 	mov	r20,r5
    8a64:	002d883a 	mov	r22,zero
    8a68:	00081400 	call	8140 <__sfp_lock_acquire>
    8a6c:	a8001426 	beq	r21,zero,8ac0 <_fwalk+0x88>
    8a70:	04ffffc4 	movi	r19,-1
    8a74:	ac400117 	ldw	r17,4(r21)
    8a78:	ac800217 	ldw	r18,8(r21)
    8a7c:	8c7fffc4 	addi	r17,r17,-1
    8a80:	88000d16 	blt	r17,zero,8ab8 <_fwalk+0x80>
    8a84:	94000304 	addi	r16,r18,12
    8a88:	94800384 	addi	r18,r18,14
    8a8c:	80c0000f 	ldh	r3,0(r16)
    8a90:	8c7fffc4 	addi	r17,r17,-1
    8a94:	813ffd04 	addi	r4,r16,-12
    8a98:	18000426 	beq	r3,zero,8aac <_fwalk+0x74>
    8a9c:	90c0000f 	ldh	r3,0(r18)
    8aa0:	1cc00226 	beq	r3,r19,8aac <_fwalk+0x74>
    8aa4:	a03ee83a 	callr	r20
    8aa8:	b0acb03a 	or	r22,r22,r2
    8aac:	84001a04 	addi	r16,r16,104
    8ab0:	94801a04 	addi	r18,r18,104
    8ab4:	8cfff51e 	bne	r17,r19,8a8c <__alt_data_end+0xfffb335c>
    8ab8:	ad400017 	ldw	r21,0(r21)
    8abc:	a83fed1e 	bne	r21,zero,8a74 <__alt_data_end+0xfffb3344>
    8ac0:	00081440 	call	8144 <__sfp_lock_release>
    8ac4:	b005883a 	mov	r2,r22
    8ac8:	dfc00717 	ldw	ra,28(sp)
    8acc:	dd800617 	ldw	r22,24(sp)
    8ad0:	dd400517 	ldw	r21,20(sp)
    8ad4:	dd000417 	ldw	r20,16(sp)
    8ad8:	dcc00317 	ldw	r19,12(sp)
    8adc:	dc800217 	ldw	r18,8(sp)
    8ae0:	dc400117 	ldw	r17,4(sp)
    8ae4:	dc000017 	ldw	r16,0(sp)
    8ae8:	dec00804 	addi	sp,sp,32
    8aec:	f800283a 	ret

00008af0 <_fwalk_reent>:
    8af0:	defff804 	addi	sp,sp,-32
    8af4:	dd400515 	stw	r21,20(sp)
    8af8:	2540b804 	addi	r21,r4,736
    8afc:	dd800615 	stw	r22,24(sp)
    8b00:	dd000415 	stw	r20,16(sp)
    8b04:	dcc00315 	stw	r19,12(sp)
    8b08:	dfc00715 	stw	ra,28(sp)
    8b0c:	dc800215 	stw	r18,8(sp)
    8b10:	dc400115 	stw	r17,4(sp)
    8b14:	dc000015 	stw	r16,0(sp)
    8b18:	2027883a 	mov	r19,r4
    8b1c:	2829883a 	mov	r20,r5
    8b20:	002d883a 	mov	r22,zero
    8b24:	00081400 	call	8140 <__sfp_lock_acquire>
    8b28:	a8001326 	beq	r21,zero,8b78 <_fwalk_reent+0x88>
    8b2c:	04bfffc4 	movi	r18,-1
    8b30:	ac400117 	ldw	r17,4(r21)
    8b34:	ac000217 	ldw	r16,8(r21)
    8b38:	8c7fffc4 	addi	r17,r17,-1
    8b3c:	88000c16 	blt	r17,zero,8b70 <_fwalk_reent+0x80>
    8b40:	84000304 	addi	r16,r16,12
    8b44:	80c0000f 	ldh	r3,0(r16)
    8b48:	8c7fffc4 	addi	r17,r17,-1
    8b4c:	817ffd04 	addi	r5,r16,-12
    8b50:	18000526 	beq	r3,zero,8b68 <_fwalk_reent+0x78>
    8b54:	80c0008f 	ldh	r3,2(r16)
    8b58:	9809883a 	mov	r4,r19
    8b5c:	1c800226 	beq	r3,r18,8b68 <_fwalk_reent+0x78>
    8b60:	a03ee83a 	callr	r20
    8b64:	b0acb03a 	or	r22,r22,r2
    8b68:	84001a04 	addi	r16,r16,104
    8b6c:	8cbff51e 	bne	r17,r18,8b44 <__alt_data_end+0xfffb3414>
    8b70:	ad400017 	ldw	r21,0(r21)
    8b74:	a83fee1e 	bne	r21,zero,8b30 <__alt_data_end+0xfffb3400>
    8b78:	00081440 	call	8144 <__sfp_lock_release>
    8b7c:	b005883a 	mov	r2,r22
    8b80:	dfc00717 	ldw	ra,28(sp)
    8b84:	dd800617 	ldw	r22,24(sp)
    8b88:	dd400517 	ldw	r21,20(sp)
    8b8c:	dd000417 	ldw	r20,16(sp)
    8b90:	dcc00317 	ldw	r19,12(sp)
    8b94:	dc800217 	ldw	r18,8(sp)
    8b98:	dc400117 	ldw	r17,4(sp)
    8b9c:	dc000017 	ldw	r16,0(sp)
    8ba0:	dec00804 	addi	sp,sp,32
    8ba4:	f800283a 	ret

00008ba8 <_setlocale_r>:
    8ba8:	30001b26 	beq	r6,zero,8c18 <_setlocale_r+0x70>
    8bac:	01400074 	movhi	r5,1
    8bb0:	defffe04 	addi	sp,sp,-8
    8bb4:	294c0104 	addi	r5,r5,12292
    8bb8:	3009883a 	mov	r4,r6
    8bbc:	dc000015 	stw	r16,0(sp)
    8bc0:	dfc00115 	stw	ra,4(sp)
    8bc4:	3021883a 	mov	r16,r6
    8bc8:	000aa780 	call	aa78 <strcmp>
    8bcc:	1000061e 	bne	r2,zero,8be8 <_setlocale_r+0x40>
    8bd0:	00800074 	movhi	r2,1
    8bd4:	108c0004 	addi	r2,r2,12288
    8bd8:	dfc00117 	ldw	ra,4(sp)
    8bdc:	dc000017 	ldw	r16,0(sp)
    8be0:	dec00204 	addi	sp,sp,8
    8be4:	f800283a 	ret
    8be8:	01400074 	movhi	r5,1
    8bec:	294c0004 	addi	r5,r5,12288
    8bf0:	8009883a 	mov	r4,r16
    8bf4:	000aa780 	call	aa78 <strcmp>
    8bf8:	103ff526 	beq	r2,zero,8bd0 <__alt_data_end+0xfffb34a0>
    8bfc:	01400074 	movhi	r5,1
    8c00:	294beb04 	addi	r5,r5,12204
    8c04:	8009883a 	mov	r4,r16
    8c08:	000aa780 	call	aa78 <strcmp>
    8c0c:	103ff026 	beq	r2,zero,8bd0 <__alt_data_end+0xfffb34a0>
    8c10:	0005883a 	mov	r2,zero
    8c14:	003ff006 	br	8bd8 <__alt_data_end+0xfffb34a8>
    8c18:	00800074 	movhi	r2,1
    8c1c:	108c0004 	addi	r2,r2,12288
    8c20:	f800283a 	ret

00008c24 <__locale_charset>:
    8c24:	00800074 	movhi	r2,1
    8c28:	108ed104 	addi	r2,r2,15172
    8c2c:	f800283a 	ret

00008c30 <__locale_mb_cur_max>:
    8c30:	00800074 	movhi	r2,1
    8c34:	10936d04 	addi	r2,r2,19892
    8c38:	10800017 	ldw	r2,0(r2)
    8c3c:	f800283a 	ret

00008c40 <__locale_msgcharset>:
    8c40:	00800074 	movhi	r2,1
    8c44:	108ec904 	addi	r2,r2,15140
    8c48:	f800283a 	ret

00008c4c <__locale_cjk_lang>:
    8c4c:	0005883a 	mov	r2,zero
    8c50:	f800283a 	ret

00008c54 <_localeconv_r>:
    8c54:	00800074 	movhi	r2,1
    8c58:	108ed904 	addi	r2,r2,15204
    8c5c:	f800283a 	ret

00008c60 <setlocale>:
    8c60:	00c00074 	movhi	r3,1
    8c64:	18d36c04 	addi	r3,r3,19888
    8c68:	2005883a 	mov	r2,r4
    8c6c:	19000017 	ldw	r4,0(r3)
    8c70:	280d883a 	mov	r6,r5
    8c74:	100b883a 	mov	r5,r2
    8c78:	0008ba81 	jmpi	8ba8 <_setlocale_r>

00008c7c <localeconv>:
    8c7c:	00800074 	movhi	r2,1
    8c80:	108ed904 	addi	r2,r2,15204
    8c84:	f800283a 	ret

00008c88 <__smakebuf_r>:
    8c88:	2880030b 	ldhu	r2,12(r5)
    8c8c:	10c0008c 	andi	r3,r2,2
    8c90:	1800401e 	bne	r3,zero,8d94 <__smakebuf_r+0x10c>
    8c94:	deffec04 	addi	sp,sp,-80
    8c98:	dc000f15 	stw	r16,60(sp)
    8c9c:	2821883a 	mov	r16,r5
    8ca0:	2940038f 	ldh	r5,14(r5)
    8ca4:	dc401015 	stw	r17,64(sp)
    8ca8:	dfc01315 	stw	ra,76(sp)
    8cac:	dcc01215 	stw	r19,72(sp)
    8cb0:	dc801115 	stw	r18,68(sp)
    8cb4:	2023883a 	mov	r17,r4
    8cb8:	28001b16 	blt	r5,zero,8d28 <__smakebuf_r+0xa0>
    8cbc:	d80d883a 	mov	r6,sp
    8cc0:	000c4f00 	call	c4f0 <_fstat_r>
    8cc4:	10001716 	blt	r2,zero,8d24 <__smakebuf_r+0x9c>
    8cc8:	d8800117 	ldw	r2,4(sp)
    8ccc:	00e00014 	movui	r3,32768
    8cd0:	10bc000c 	andi	r2,r2,61440
    8cd4:	10c03726 	beq	r2,r3,8db4 <__smakebuf_r+0x12c>
    8cd8:	80c0030b 	ldhu	r3,12(r16)
    8cdc:	18c20014 	ori	r3,r3,2048
    8ce0:	80c0030d 	sth	r3,12(r16)
    8ce4:	00c80004 	movi	r3,8192
    8ce8:	10c03c1e 	bne	r2,r3,8ddc <__smakebuf_r+0x154>
    8cec:	8140038f 	ldh	r5,14(r16)
    8cf0:	8809883a 	mov	r4,r17
    8cf4:	000c5480 	call	c548 <_isatty_r>
    8cf8:	10004e26 	beq	r2,zero,8e34 <__smakebuf_r+0x1ac>
    8cfc:	8080030b 	ldhu	r2,12(r16)
    8d00:	04c00044 	movi	r19,1
    8d04:	80c010c4 	addi	r3,r16,67
    8d08:	14c4b03a 	or	r2,r2,r19
    8d0c:	8080030d 	sth	r2,12(r16)
    8d10:	80c00015 	stw	r3,0(r16)
    8d14:	80c00415 	stw	r3,16(r16)
    8d18:	84c00515 	stw	r19,20(r16)
    8d1c:	04810004 	movi	r18,1024
    8d20:	00000706 	br	8d40 <__smakebuf_r+0xb8>
    8d24:	8080030b 	ldhu	r2,12(r16)
    8d28:	10c0200c 	andi	r3,r2,128
    8d2c:	18001f1e 	bne	r3,zero,8dac <__smakebuf_r+0x124>
    8d30:	04810004 	movi	r18,1024
    8d34:	10820014 	ori	r2,r2,2048
    8d38:	8080030d 	sth	r2,12(r16)
    8d3c:	0027883a 	mov	r19,zero
    8d40:	8809883a 	mov	r4,r17
    8d44:	900b883a 	mov	r5,r18
    8d48:	00035900 	call	3590 <_malloc_r>
    8d4c:	10002e26 	beq	r2,zero,8e08 <__smakebuf_r+0x180>
    8d50:	80c0030b 	ldhu	r3,12(r16)
    8d54:	01000034 	movhi	r4,0
    8d58:	211f7704 	addi	r4,r4,32220
    8d5c:	89000f15 	stw	r4,60(r17)
    8d60:	18c02014 	ori	r3,r3,128
    8d64:	80c0030d 	sth	r3,12(r16)
    8d68:	80800015 	stw	r2,0(r16)
    8d6c:	80800415 	stw	r2,16(r16)
    8d70:	84800515 	stw	r18,20(r16)
    8d74:	98001c1e 	bne	r19,zero,8de8 <__smakebuf_r+0x160>
    8d78:	dfc01317 	ldw	ra,76(sp)
    8d7c:	dcc01217 	ldw	r19,72(sp)
    8d80:	dc801117 	ldw	r18,68(sp)
    8d84:	dc401017 	ldw	r17,64(sp)
    8d88:	dc000f17 	ldw	r16,60(sp)
    8d8c:	dec01404 	addi	sp,sp,80
    8d90:	f800283a 	ret
    8d94:	288010c4 	addi	r2,r5,67
    8d98:	28800015 	stw	r2,0(r5)
    8d9c:	28800415 	stw	r2,16(r5)
    8da0:	00800044 	movi	r2,1
    8da4:	28800515 	stw	r2,20(r5)
    8da8:	f800283a 	ret
    8dac:	04801004 	movi	r18,64
    8db0:	003fe006 	br	8d34 <__alt_data_end+0xfffb3604>
    8db4:	81000a17 	ldw	r4,40(r16)
    8db8:	00c00074 	movhi	r3,1
    8dbc:	18ea8504 	addi	r3,r3,-21996
    8dc0:	20ffc51e 	bne	r4,r3,8cd8 <__alt_data_end+0xfffb35a8>
    8dc4:	80c0030b 	ldhu	r3,12(r16)
    8dc8:	01010004 	movi	r4,1024
    8dcc:	81001315 	stw	r4,76(r16)
    8dd0:	1906b03a 	or	r3,r3,r4
    8dd4:	80c0030d 	sth	r3,12(r16)
    8dd8:	003fc206 	br	8ce4 <__alt_data_end+0xfffb35b4>
    8ddc:	0027883a 	mov	r19,zero
    8de0:	04810004 	movi	r18,1024
    8de4:	003fd606 	br	8d40 <__alt_data_end+0xfffb3610>
    8de8:	8140038f 	ldh	r5,14(r16)
    8dec:	8809883a 	mov	r4,r17
    8df0:	000c5480 	call	c548 <_isatty_r>
    8df4:	103fe026 	beq	r2,zero,8d78 <__alt_data_end+0xfffb3648>
    8df8:	8080030b 	ldhu	r2,12(r16)
    8dfc:	10800054 	ori	r2,r2,1
    8e00:	8080030d 	sth	r2,12(r16)
    8e04:	003fdc06 	br	8d78 <__alt_data_end+0xfffb3648>
    8e08:	8080030b 	ldhu	r2,12(r16)
    8e0c:	10c0800c 	andi	r3,r2,512
    8e10:	183fd91e 	bne	r3,zero,8d78 <__alt_data_end+0xfffb3648>
    8e14:	10800094 	ori	r2,r2,2
    8e18:	80c010c4 	addi	r3,r16,67
    8e1c:	8080030d 	sth	r2,12(r16)
    8e20:	00800044 	movi	r2,1
    8e24:	80c00015 	stw	r3,0(r16)
    8e28:	80c00415 	stw	r3,16(r16)
    8e2c:	80800515 	stw	r2,20(r16)
    8e30:	003fd106 	br	8d78 <__alt_data_end+0xfffb3648>
    8e34:	04c00044 	movi	r19,1
    8e38:	04810004 	movi	r18,1024
    8e3c:	003fc006 	br	8d40 <__alt_data_end+0xfffb3610>

00008e40 <memchr>:
    8e40:	208000cc 	andi	r2,r4,3
    8e44:	280f883a 	mov	r7,r5
    8e48:	10003526 	beq	r2,zero,8f20 <memchr+0xe0>
    8e4c:	30bfffc4 	addi	r2,r6,-1
    8e50:	30001b26 	beq	r6,zero,8ec0 <memchr+0x80>
    8e54:	21800003 	ldbu	r6,0(r4)
    8e58:	28c03fcc 	andi	r3,r5,255
    8e5c:	30c01a26 	beq	r6,r3,8ec8 <memchr+0x88>
    8e60:	180d883a 	mov	r6,r3
    8e64:	00000406 	br	8e78 <memchr+0x38>
    8e68:	10001526 	beq	r2,zero,8ec0 <memchr+0x80>
    8e6c:	20c00003 	ldbu	r3,0(r4)
    8e70:	10bfffc4 	addi	r2,r2,-1
    8e74:	19801426 	beq	r3,r6,8ec8 <memchr+0x88>
    8e78:	21000044 	addi	r4,r4,1
    8e7c:	20c000cc 	andi	r3,r4,3
    8e80:	183ff91e 	bne	r3,zero,8e68 <__alt_data_end+0xfffb3738>
    8e84:	024000c4 	movi	r9,3
    8e88:	48801136 	bltu	r9,r2,8ed0 <memchr+0x90>
    8e8c:	10000c26 	beq	r2,zero,8ec0 <memchr+0x80>
    8e90:	20c00003 	ldbu	r3,0(r4)
    8e94:	29403fcc 	andi	r5,r5,255
    8e98:	19400b26 	beq	r3,r5,8ec8 <memchr+0x88>
    8e9c:	20c00044 	addi	r3,r4,1
    8ea0:	2085883a 	add	r2,r4,r2
    8ea4:	39803fcc 	andi	r6,r7,255
    8ea8:	00000306 	br	8eb8 <memchr+0x78>
    8eac:	18c00044 	addi	r3,r3,1
    8eb0:	197fffc3 	ldbu	r5,-1(r3)
    8eb4:	29800426 	beq	r5,r6,8ec8 <memchr+0x88>
    8eb8:	1809883a 	mov	r4,r3
    8ebc:	18bffb1e 	bne	r3,r2,8eac <__alt_data_end+0xfffb377c>
    8ec0:	0005883a 	mov	r2,zero
    8ec4:	f800283a 	ret
    8ec8:	2005883a 	mov	r2,r4
    8ecc:	f800283a 	ret
    8ed0:	28c03fcc 	andi	r3,r5,255
    8ed4:	1810923a 	slli	r8,r3,8
    8ed8:	02ffbff4 	movhi	r11,65279
    8edc:	02a02074 	movhi	r10,32897
    8ee0:	40c6b03a 	or	r3,r8,r3
    8ee4:	1810943a 	slli	r8,r3,16
    8ee8:	5affbfc4 	addi	r11,r11,-257
    8eec:	52a02004 	addi	r10,r10,-32640
    8ef0:	40d0b03a 	or	r8,r8,r3
    8ef4:	20c00017 	ldw	r3,0(r4)
    8ef8:	40c6f03a 	xor	r3,r8,r3
    8efc:	1acd883a 	add	r6,r3,r11
    8f00:	00c6303a 	nor	r3,zero,r3
    8f04:	30c6703a 	and	r3,r6,r3
    8f08:	1a86703a 	and	r3,r3,r10
    8f0c:	183fdf1e 	bne	r3,zero,8e8c <__alt_data_end+0xfffb375c>
    8f10:	10bfff04 	addi	r2,r2,-4
    8f14:	21000104 	addi	r4,r4,4
    8f18:	48bff636 	bltu	r9,r2,8ef4 <__alt_data_end+0xfffb37c4>
    8f1c:	003fdb06 	br	8e8c <__alt_data_end+0xfffb375c>
    8f20:	3005883a 	mov	r2,r6
    8f24:	003fd706 	br	8e84 <__alt_data_end+0xfffb3754>

00008f28 <memcpy>:
    8f28:	deffff04 	addi	sp,sp,-4
    8f2c:	dc000015 	stw	r16,0(sp)
    8f30:	00c003c4 	movi	r3,15
    8f34:	2005883a 	mov	r2,r4
    8f38:	1980432e 	bgeu	r3,r6,9048 <memcpy+0x120>
    8f3c:	2146b03a 	or	r3,r4,r5
    8f40:	18c000cc 	andi	r3,r3,3
    8f44:	1800421e 	bne	r3,zero,9050 <memcpy+0x128>
    8f48:	343ffc04 	addi	r16,r6,-16
    8f4c:	8020d13a 	srli	r16,r16,4
    8f50:	28c00104 	addi	r3,r5,4
    8f54:	23400104 	addi	r13,r4,4
    8f58:	801e913a 	slli	r15,r16,4
    8f5c:	2b000204 	addi	r12,r5,8
    8f60:	22c00204 	addi	r11,r4,8
    8f64:	7bc00504 	addi	r15,r15,20
    8f68:	2a800304 	addi	r10,r5,12
    8f6c:	22400304 	addi	r9,r4,12
    8f70:	2bdf883a 	add	r15,r5,r15
    8f74:	2811883a 	mov	r8,r5
    8f78:	200f883a 	mov	r7,r4
    8f7c:	41000017 	ldw	r4,0(r8)
    8f80:	39c00404 	addi	r7,r7,16
    8f84:	18c00404 	addi	r3,r3,16
    8f88:	393ffc15 	stw	r4,-16(r7)
    8f8c:	1bbffc17 	ldw	r14,-16(r3)
    8f90:	6b400404 	addi	r13,r13,16
    8f94:	5ac00404 	addi	r11,r11,16
    8f98:	6bbffc15 	stw	r14,-16(r13)
    8f9c:	63800017 	ldw	r14,0(r12)
    8fa0:	4a400404 	addi	r9,r9,16
    8fa4:	42000404 	addi	r8,r8,16
    8fa8:	5bbffc15 	stw	r14,-16(r11)
    8fac:	53800017 	ldw	r14,0(r10)
    8fb0:	63000404 	addi	r12,r12,16
    8fb4:	52800404 	addi	r10,r10,16
    8fb8:	4bbffc15 	stw	r14,-16(r9)
    8fbc:	1bffef1e 	bne	r3,r15,8f7c <__alt_data_end+0xfffb384c>
    8fc0:	81c00044 	addi	r7,r16,1
    8fc4:	380e913a 	slli	r7,r7,4
    8fc8:	310003cc 	andi	r4,r6,15
    8fcc:	02c000c4 	movi	r11,3
    8fd0:	11c7883a 	add	r3,r2,r7
    8fd4:	29cb883a 	add	r5,r5,r7
    8fd8:	59001f2e 	bgeu	r11,r4,9058 <memcpy+0x130>
    8fdc:	1813883a 	mov	r9,r3
    8fe0:	2811883a 	mov	r8,r5
    8fe4:	200f883a 	mov	r7,r4
    8fe8:	42800017 	ldw	r10,0(r8)
    8fec:	4a400104 	addi	r9,r9,4
    8ff0:	39ffff04 	addi	r7,r7,-4
    8ff4:	4abfff15 	stw	r10,-4(r9)
    8ff8:	42000104 	addi	r8,r8,4
    8ffc:	59fffa36 	bltu	r11,r7,8fe8 <__alt_data_end+0xfffb38b8>
    9000:	213fff04 	addi	r4,r4,-4
    9004:	2008d0ba 	srli	r4,r4,2
    9008:	318000cc 	andi	r6,r6,3
    900c:	21000044 	addi	r4,r4,1
    9010:	2109883a 	add	r4,r4,r4
    9014:	2109883a 	add	r4,r4,r4
    9018:	1907883a 	add	r3,r3,r4
    901c:	290b883a 	add	r5,r5,r4
    9020:	30000626 	beq	r6,zero,903c <memcpy+0x114>
    9024:	198d883a 	add	r6,r3,r6
    9028:	29c00003 	ldbu	r7,0(r5)
    902c:	18c00044 	addi	r3,r3,1
    9030:	29400044 	addi	r5,r5,1
    9034:	19ffffc5 	stb	r7,-1(r3)
    9038:	19bffb1e 	bne	r3,r6,9028 <__alt_data_end+0xfffb38f8>
    903c:	dc000017 	ldw	r16,0(sp)
    9040:	dec00104 	addi	sp,sp,4
    9044:	f800283a 	ret
    9048:	2007883a 	mov	r3,r4
    904c:	003ff406 	br	9020 <__alt_data_end+0xfffb38f0>
    9050:	2007883a 	mov	r3,r4
    9054:	003ff306 	br	9024 <__alt_data_end+0xfffb38f4>
    9058:	200d883a 	mov	r6,r4
    905c:	003ff006 	br	9020 <__alt_data_end+0xfffb38f0>

00009060 <memmove>:
    9060:	2005883a 	mov	r2,r4
    9064:	29000b2e 	bgeu	r5,r4,9094 <memmove+0x34>
    9068:	298f883a 	add	r7,r5,r6
    906c:	21c0092e 	bgeu	r4,r7,9094 <memmove+0x34>
    9070:	2187883a 	add	r3,r4,r6
    9074:	198bc83a 	sub	r5,r3,r6
    9078:	30004b26 	beq	r6,zero,91a8 <memmove+0x148>
    907c:	39ffffc4 	addi	r7,r7,-1
    9080:	39000003 	ldbu	r4,0(r7)
    9084:	18ffffc4 	addi	r3,r3,-1
    9088:	19000005 	stb	r4,0(r3)
    908c:	197ffb1e 	bne	r3,r5,907c <__alt_data_end+0xfffb394c>
    9090:	f800283a 	ret
    9094:	00c003c4 	movi	r3,15
    9098:	1980412e 	bgeu	r3,r6,91a0 <memmove+0x140>
    909c:	1146b03a 	or	r3,r2,r5
    90a0:	18c000cc 	andi	r3,r3,3
    90a4:	1800411e 	bne	r3,zero,91ac <memmove+0x14c>
    90a8:	33fffc04 	addi	r15,r6,-16
    90ac:	781ed13a 	srli	r15,r15,4
    90b0:	28c00104 	addi	r3,r5,4
    90b4:	13400104 	addi	r13,r2,4
    90b8:	781c913a 	slli	r14,r15,4
    90bc:	2b000204 	addi	r12,r5,8
    90c0:	12c00204 	addi	r11,r2,8
    90c4:	73800504 	addi	r14,r14,20
    90c8:	2a800304 	addi	r10,r5,12
    90cc:	12400304 	addi	r9,r2,12
    90d0:	2b9d883a 	add	r14,r5,r14
    90d4:	2811883a 	mov	r8,r5
    90d8:	100f883a 	mov	r7,r2
    90dc:	41000017 	ldw	r4,0(r8)
    90e0:	39c00404 	addi	r7,r7,16
    90e4:	18c00404 	addi	r3,r3,16
    90e8:	393ffc15 	stw	r4,-16(r7)
    90ec:	193ffc17 	ldw	r4,-16(r3)
    90f0:	6b400404 	addi	r13,r13,16
    90f4:	5ac00404 	addi	r11,r11,16
    90f8:	693ffc15 	stw	r4,-16(r13)
    90fc:	61000017 	ldw	r4,0(r12)
    9100:	4a400404 	addi	r9,r9,16
    9104:	42000404 	addi	r8,r8,16
    9108:	593ffc15 	stw	r4,-16(r11)
    910c:	51000017 	ldw	r4,0(r10)
    9110:	63000404 	addi	r12,r12,16
    9114:	52800404 	addi	r10,r10,16
    9118:	493ffc15 	stw	r4,-16(r9)
    911c:	1bbfef1e 	bne	r3,r14,90dc <__alt_data_end+0xfffb39ac>
    9120:	79000044 	addi	r4,r15,1
    9124:	2008913a 	slli	r4,r4,4
    9128:	328003cc 	andi	r10,r6,15
    912c:	02c000c4 	movi	r11,3
    9130:	1107883a 	add	r3,r2,r4
    9134:	290b883a 	add	r5,r5,r4
    9138:	5a801e2e 	bgeu	r11,r10,91b4 <memmove+0x154>
    913c:	1813883a 	mov	r9,r3
    9140:	2811883a 	mov	r8,r5
    9144:	500f883a 	mov	r7,r10
    9148:	41000017 	ldw	r4,0(r8)
    914c:	4a400104 	addi	r9,r9,4
    9150:	39ffff04 	addi	r7,r7,-4
    9154:	493fff15 	stw	r4,-4(r9)
    9158:	42000104 	addi	r8,r8,4
    915c:	59fffa36 	bltu	r11,r7,9148 <__alt_data_end+0xfffb3a18>
    9160:	513fff04 	addi	r4,r10,-4
    9164:	2008d0ba 	srli	r4,r4,2
    9168:	318000cc 	andi	r6,r6,3
    916c:	21000044 	addi	r4,r4,1
    9170:	2109883a 	add	r4,r4,r4
    9174:	2109883a 	add	r4,r4,r4
    9178:	1907883a 	add	r3,r3,r4
    917c:	290b883a 	add	r5,r5,r4
    9180:	30000926 	beq	r6,zero,91a8 <memmove+0x148>
    9184:	198d883a 	add	r6,r3,r6
    9188:	29c00003 	ldbu	r7,0(r5)
    918c:	18c00044 	addi	r3,r3,1
    9190:	29400044 	addi	r5,r5,1
    9194:	19ffffc5 	stb	r7,-1(r3)
    9198:	19bffb1e 	bne	r3,r6,9188 <__alt_data_end+0xfffb3a58>
    919c:	f800283a 	ret
    91a0:	1007883a 	mov	r3,r2
    91a4:	003ff606 	br	9180 <__alt_data_end+0xfffb3a50>
    91a8:	f800283a 	ret
    91ac:	1007883a 	mov	r3,r2
    91b0:	003ff406 	br	9184 <__alt_data_end+0xfffb3a54>
    91b4:	500d883a 	mov	r6,r10
    91b8:	003ff106 	br	9180 <__alt_data_end+0xfffb3a50>

000091bc <memset>:
    91bc:	20c000cc 	andi	r3,r4,3
    91c0:	2005883a 	mov	r2,r4
    91c4:	18004326 	beq	r3,zero,92d4 <memset+0x118>
    91c8:	31ffffc4 	addi	r7,r6,-1
    91cc:	30004026 	beq	r6,zero,92d0 <memset+0x114>
    91d0:	2813883a 	mov	r9,r5
    91d4:	200d883a 	mov	r6,r4
    91d8:	2007883a 	mov	r3,r4
    91dc:	00000406 	br	91f0 <memset+0x34>
    91e0:	3a3fffc4 	addi	r8,r7,-1
    91e4:	31800044 	addi	r6,r6,1
    91e8:	38003926 	beq	r7,zero,92d0 <memset+0x114>
    91ec:	400f883a 	mov	r7,r8
    91f0:	18c00044 	addi	r3,r3,1
    91f4:	32400005 	stb	r9,0(r6)
    91f8:	1a0000cc 	andi	r8,r3,3
    91fc:	403ff81e 	bne	r8,zero,91e0 <__alt_data_end+0xfffb3ab0>
    9200:	010000c4 	movi	r4,3
    9204:	21c02d2e 	bgeu	r4,r7,92bc <memset+0x100>
    9208:	29803fcc 	andi	r6,r5,255
    920c:	3008923a 	slli	r4,r6,8
    9210:	218cb03a 	or	r6,r4,r6
    9214:	3008943a 	slli	r4,r6,16
    9218:	218cb03a 	or	r6,r4,r6
    921c:	010003c4 	movi	r4,15
    9220:	21c0182e 	bgeu	r4,r7,9284 <memset+0xc8>
    9224:	3b3ffc04 	addi	r12,r7,-16
    9228:	6018d13a 	srli	r12,r12,4
    922c:	1a000104 	addi	r8,r3,4
    9230:	1ac00204 	addi	r11,r3,8
    9234:	6008913a 	slli	r4,r12,4
    9238:	1a800304 	addi	r10,r3,12
    923c:	1813883a 	mov	r9,r3
    9240:	21000504 	addi	r4,r4,20
    9244:	1909883a 	add	r4,r3,r4
    9248:	49800015 	stw	r6,0(r9)
    924c:	41800015 	stw	r6,0(r8)
    9250:	59800015 	stw	r6,0(r11)
    9254:	51800015 	stw	r6,0(r10)
    9258:	42000404 	addi	r8,r8,16
    925c:	4a400404 	addi	r9,r9,16
    9260:	5ac00404 	addi	r11,r11,16
    9264:	52800404 	addi	r10,r10,16
    9268:	413ff71e 	bne	r8,r4,9248 <__alt_data_end+0xfffb3b18>
    926c:	63000044 	addi	r12,r12,1
    9270:	6018913a 	slli	r12,r12,4
    9274:	39c003cc 	andi	r7,r7,15
    9278:	010000c4 	movi	r4,3
    927c:	1b07883a 	add	r3,r3,r12
    9280:	21c00e2e 	bgeu	r4,r7,92bc <memset+0x100>
    9284:	1813883a 	mov	r9,r3
    9288:	3811883a 	mov	r8,r7
    928c:	010000c4 	movi	r4,3
    9290:	49800015 	stw	r6,0(r9)
    9294:	423fff04 	addi	r8,r8,-4
    9298:	4a400104 	addi	r9,r9,4
    929c:	223ffc36 	bltu	r4,r8,9290 <__alt_data_end+0xfffb3b60>
    92a0:	393fff04 	addi	r4,r7,-4
    92a4:	2008d0ba 	srli	r4,r4,2
    92a8:	39c000cc 	andi	r7,r7,3
    92ac:	21000044 	addi	r4,r4,1
    92b0:	2109883a 	add	r4,r4,r4
    92b4:	2109883a 	add	r4,r4,r4
    92b8:	1907883a 	add	r3,r3,r4
    92bc:	38000426 	beq	r7,zero,92d0 <memset+0x114>
    92c0:	19cf883a 	add	r7,r3,r7
    92c4:	19400005 	stb	r5,0(r3)
    92c8:	18c00044 	addi	r3,r3,1
    92cc:	19fffd1e 	bne	r3,r7,92c4 <__alt_data_end+0xfffb3b94>
    92d0:	f800283a 	ret
    92d4:	2007883a 	mov	r3,r4
    92d8:	300f883a 	mov	r7,r6
    92dc:	003fc806 	br	9200 <__alt_data_end+0xfffb3ad0>

000092e0 <_Balloc>:
    92e0:	20801317 	ldw	r2,76(r4)
    92e4:	defffc04 	addi	sp,sp,-16
    92e8:	dc400115 	stw	r17,4(sp)
    92ec:	dc000015 	stw	r16,0(sp)
    92f0:	dfc00315 	stw	ra,12(sp)
    92f4:	dc800215 	stw	r18,8(sp)
    92f8:	2023883a 	mov	r17,r4
    92fc:	2821883a 	mov	r16,r5
    9300:	10000f26 	beq	r2,zero,9340 <_Balloc+0x60>
    9304:	8407883a 	add	r3,r16,r16
    9308:	18c7883a 	add	r3,r3,r3
    930c:	10c7883a 	add	r3,r2,r3
    9310:	18800017 	ldw	r2,0(r3)
    9314:	10001126 	beq	r2,zero,935c <_Balloc+0x7c>
    9318:	11000017 	ldw	r4,0(r2)
    931c:	19000015 	stw	r4,0(r3)
    9320:	10000415 	stw	zero,16(r2)
    9324:	10000315 	stw	zero,12(r2)
    9328:	dfc00317 	ldw	ra,12(sp)
    932c:	dc800217 	ldw	r18,8(sp)
    9330:	dc400117 	ldw	r17,4(sp)
    9334:	dc000017 	ldw	r16,0(sp)
    9338:	dec00404 	addi	sp,sp,16
    933c:	f800283a 	ret
    9340:	01400104 	movi	r5,4
    9344:	01800844 	movi	r6,33
    9348:	000c1280 	call	c128 <_calloc_r>
    934c:	88801315 	stw	r2,76(r17)
    9350:	103fec1e 	bne	r2,zero,9304 <__alt_data_end+0xfffb3bd4>
    9354:	0005883a 	mov	r2,zero
    9358:	003ff306 	br	9328 <__alt_data_end+0xfffb3bf8>
    935c:	01400044 	movi	r5,1
    9360:	2c24983a 	sll	r18,r5,r16
    9364:	8809883a 	mov	r4,r17
    9368:	91800144 	addi	r6,r18,5
    936c:	318d883a 	add	r6,r6,r6
    9370:	318d883a 	add	r6,r6,r6
    9374:	000c1280 	call	c128 <_calloc_r>
    9378:	103ff626 	beq	r2,zero,9354 <__alt_data_end+0xfffb3c24>
    937c:	14000115 	stw	r16,4(r2)
    9380:	14800215 	stw	r18,8(r2)
    9384:	003fe606 	br	9320 <__alt_data_end+0xfffb3bf0>

00009388 <_Bfree>:
    9388:	28000826 	beq	r5,zero,93ac <_Bfree+0x24>
    938c:	28c00117 	ldw	r3,4(r5)
    9390:	20801317 	ldw	r2,76(r4)
    9394:	18c7883a 	add	r3,r3,r3
    9398:	18c7883a 	add	r3,r3,r3
    939c:	10c5883a 	add	r2,r2,r3
    93a0:	10c00017 	ldw	r3,0(r2)
    93a4:	28c00015 	stw	r3,0(r5)
    93a8:	11400015 	stw	r5,0(r2)
    93ac:	f800283a 	ret

000093b0 <__multadd>:
    93b0:	defff704 	addi	sp,sp,-36
    93b4:	dc800215 	stw	r18,8(sp)
    93b8:	2c800417 	ldw	r18,16(r5)
    93bc:	ddc00715 	stw	r23,28(sp)
    93c0:	dd800615 	stw	r22,24(sp)
    93c4:	dd000415 	stw	r20,16(sp)
    93c8:	dcc00315 	stw	r19,12(sp)
    93cc:	dc400115 	stw	r17,4(sp)
    93d0:	dc000015 	stw	r16,0(sp)
    93d4:	dfc00815 	stw	ra,32(sp)
    93d8:	dd400515 	stw	r21,20(sp)
    93dc:	2827883a 	mov	r19,r5
    93e0:	2029883a 	mov	r20,r4
    93e4:	3023883a 	mov	r17,r6
    93e8:	3821883a 	mov	r16,r7
    93ec:	2d800504 	addi	r22,r5,20
    93f0:	002f883a 	mov	r23,zero
    93f4:	b5400017 	ldw	r21,0(r22)
    93f8:	880b883a 	mov	r5,r17
    93fc:	bdc00044 	addi	r23,r23,1
    9400:	a93fffcc 	andi	r4,r21,65535
    9404:	000d72c0 	call	d72c <__mulsi3>
    9408:	1421883a 	add	r16,r2,r16
    940c:	a808d43a 	srli	r4,r21,16
    9410:	802ad43a 	srli	r21,r16,16
    9414:	880b883a 	mov	r5,r17
    9418:	000d72c0 	call	d72c <__mulsi3>
    941c:	a88f883a 	add	r7,r21,r2
    9420:	3804943a 	slli	r2,r7,16
    9424:	80ffffcc 	andi	r3,r16,65535
    9428:	b5800104 	addi	r22,r22,4
    942c:	10c7883a 	add	r3,r2,r3
    9430:	b0ffff15 	stw	r3,-4(r22)
    9434:	3820d43a 	srli	r16,r7,16
    9438:	bcbfee16 	blt	r23,r18,93f4 <__alt_data_end+0xfffb3cc4>
    943c:	80000926 	beq	r16,zero,9464 <__multadd+0xb4>
    9440:	98800217 	ldw	r2,8(r19)
    9444:	9080130e 	bge	r18,r2,9494 <__multadd+0xe4>
    9448:	90800144 	addi	r2,r18,5
    944c:	1085883a 	add	r2,r2,r2
    9450:	1085883a 	add	r2,r2,r2
    9454:	9885883a 	add	r2,r19,r2
    9458:	14000015 	stw	r16,0(r2)
    945c:	94800044 	addi	r18,r18,1
    9460:	9c800415 	stw	r18,16(r19)
    9464:	9805883a 	mov	r2,r19
    9468:	dfc00817 	ldw	ra,32(sp)
    946c:	ddc00717 	ldw	r23,28(sp)
    9470:	dd800617 	ldw	r22,24(sp)
    9474:	dd400517 	ldw	r21,20(sp)
    9478:	dd000417 	ldw	r20,16(sp)
    947c:	dcc00317 	ldw	r19,12(sp)
    9480:	dc800217 	ldw	r18,8(sp)
    9484:	dc400117 	ldw	r17,4(sp)
    9488:	dc000017 	ldw	r16,0(sp)
    948c:	dec00904 	addi	sp,sp,36
    9490:	f800283a 	ret
    9494:	99400117 	ldw	r5,4(r19)
    9498:	a009883a 	mov	r4,r20
    949c:	29400044 	addi	r5,r5,1
    94a0:	00092e00 	call	92e0 <_Balloc>
    94a4:	99800417 	ldw	r6,16(r19)
    94a8:	99400304 	addi	r5,r19,12
    94ac:	11000304 	addi	r4,r2,12
    94b0:	31800084 	addi	r6,r6,2
    94b4:	318d883a 	add	r6,r6,r6
    94b8:	318d883a 	add	r6,r6,r6
    94bc:	1023883a 	mov	r17,r2
    94c0:	0008f280 	call	8f28 <memcpy>
    94c4:	99000117 	ldw	r4,4(r19)
    94c8:	a0c01317 	ldw	r3,76(r20)
    94cc:	2109883a 	add	r4,r4,r4
    94d0:	2109883a 	add	r4,r4,r4
    94d4:	1907883a 	add	r3,r3,r4
    94d8:	18800017 	ldw	r2,0(r3)
    94dc:	98800015 	stw	r2,0(r19)
    94e0:	1cc00015 	stw	r19,0(r3)
    94e4:	8827883a 	mov	r19,r17
    94e8:	003fd706 	br	9448 <__alt_data_end+0xfffb3d18>

000094ec <__s2b>:
    94ec:	defff904 	addi	sp,sp,-28
    94f0:	dc400115 	stw	r17,4(sp)
    94f4:	dc000015 	stw	r16,0(sp)
    94f8:	2023883a 	mov	r17,r4
    94fc:	2821883a 	mov	r16,r5
    9500:	39000204 	addi	r4,r7,8
    9504:	01400244 	movi	r5,9
    9508:	dcc00315 	stw	r19,12(sp)
    950c:	dc800215 	stw	r18,8(sp)
    9510:	dfc00615 	stw	ra,24(sp)
    9514:	dd400515 	stw	r21,20(sp)
    9518:	dd000415 	stw	r20,16(sp)
    951c:	3825883a 	mov	r18,r7
    9520:	3027883a 	mov	r19,r6
    9524:	00034a80 	call	34a8 <__divsi3>
    9528:	00c00044 	movi	r3,1
    952c:	000b883a 	mov	r5,zero
    9530:	1880030e 	bge	r3,r2,9540 <__s2b+0x54>
    9534:	18c7883a 	add	r3,r3,r3
    9538:	29400044 	addi	r5,r5,1
    953c:	18bffd16 	blt	r3,r2,9534 <__alt_data_end+0xfffb3e04>
    9540:	8809883a 	mov	r4,r17
    9544:	00092e00 	call	92e0 <_Balloc>
    9548:	d8c00717 	ldw	r3,28(sp)
    954c:	10c00515 	stw	r3,20(r2)
    9550:	00c00044 	movi	r3,1
    9554:	10c00415 	stw	r3,16(r2)
    9558:	00c00244 	movi	r3,9
    955c:	1cc0210e 	bge	r3,r19,95e4 <__s2b+0xf8>
    9560:	80eb883a 	add	r21,r16,r3
    9564:	a829883a 	mov	r20,r21
    9568:	84e1883a 	add	r16,r16,r19
    956c:	a1c00007 	ldb	r7,0(r20)
    9570:	8809883a 	mov	r4,r17
    9574:	a5000044 	addi	r20,r20,1
    9578:	100b883a 	mov	r5,r2
    957c:	01800284 	movi	r6,10
    9580:	39fff404 	addi	r7,r7,-48
    9584:	00093b00 	call	93b0 <__multadd>
    9588:	a43ff81e 	bne	r20,r16,956c <__alt_data_end+0xfffb3e3c>
    958c:	ace1883a 	add	r16,r21,r19
    9590:	843ffe04 	addi	r16,r16,-8
    9594:	9c800a0e 	bge	r19,r18,95c0 <__s2b+0xd4>
    9598:	94e5c83a 	sub	r18,r18,r19
    959c:	84a5883a 	add	r18,r16,r18
    95a0:	81c00007 	ldb	r7,0(r16)
    95a4:	8809883a 	mov	r4,r17
    95a8:	84000044 	addi	r16,r16,1
    95ac:	100b883a 	mov	r5,r2
    95b0:	01800284 	movi	r6,10
    95b4:	39fff404 	addi	r7,r7,-48
    95b8:	00093b00 	call	93b0 <__multadd>
    95bc:	84bff81e 	bne	r16,r18,95a0 <__alt_data_end+0xfffb3e70>
    95c0:	dfc00617 	ldw	ra,24(sp)
    95c4:	dd400517 	ldw	r21,20(sp)
    95c8:	dd000417 	ldw	r20,16(sp)
    95cc:	dcc00317 	ldw	r19,12(sp)
    95d0:	dc800217 	ldw	r18,8(sp)
    95d4:	dc400117 	ldw	r17,4(sp)
    95d8:	dc000017 	ldw	r16,0(sp)
    95dc:	dec00704 	addi	sp,sp,28
    95e0:	f800283a 	ret
    95e4:	84000284 	addi	r16,r16,10
    95e8:	1827883a 	mov	r19,r3
    95ec:	003fe906 	br	9594 <__alt_data_end+0xfffb3e64>

000095f0 <__hi0bits>:
    95f0:	20bfffec 	andhi	r2,r4,65535
    95f4:	1000141e 	bne	r2,zero,9648 <__hi0bits+0x58>
    95f8:	2008943a 	slli	r4,r4,16
    95fc:	00800404 	movi	r2,16
    9600:	20ffc02c 	andhi	r3,r4,65280
    9604:	1800021e 	bne	r3,zero,9610 <__hi0bits+0x20>
    9608:	2008923a 	slli	r4,r4,8
    960c:	10800204 	addi	r2,r2,8
    9610:	20fc002c 	andhi	r3,r4,61440
    9614:	1800021e 	bne	r3,zero,9620 <__hi0bits+0x30>
    9618:	2008913a 	slli	r4,r4,4
    961c:	10800104 	addi	r2,r2,4
    9620:	20f0002c 	andhi	r3,r4,49152
    9624:	1800031e 	bne	r3,zero,9634 <__hi0bits+0x44>
    9628:	2109883a 	add	r4,r4,r4
    962c:	10800084 	addi	r2,r2,2
    9630:	2109883a 	add	r4,r4,r4
    9634:	20000316 	blt	r4,zero,9644 <__hi0bits+0x54>
    9638:	2110002c 	andhi	r4,r4,16384
    963c:	2000041e 	bne	r4,zero,9650 <__hi0bits+0x60>
    9640:	00800804 	movi	r2,32
    9644:	f800283a 	ret
    9648:	0005883a 	mov	r2,zero
    964c:	003fec06 	br	9600 <__alt_data_end+0xfffb3ed0>
    9650:	10800044 	addi	r2,r2,1
    9654:	f800283a 	ret

00009658 <__lo0bits>:
    9658:	20c00017 	ldw	r3,0(r4)
    965c:	188001cc 	andi	r2,r3,7
    9660:	10000826 	beq	r2,zero,9684 <__lo0bits+0x2c>
    9664:	1880004c 	andi	r2,r3,1
    9668:	1000211e 	bne	r2,zero,96f0 <__lo0bits+0x98>
    966c:	1880008c 	andi	r2,r3,2
    9670:	1000211e 	bne	r2,zero,96f8 <__lo0bits+0xa0>
    9674:	1806d0ba 	srli	r3,r3,2
    9678:	00800084 	movi	r2,2
    967c:	20c00015 	stw	r3,0(r4)
    9680:	f800283a 	ret
    9684:	18bfffcc 	andi	r2,r3,65535
    9688:	10001326 	beq	r2,zero,96d8 <__lo0bits+0x80>
    968c:	0005883a 	mov	r2,zero
    9690:	19403fcc 	andi	r5,r3,255
    9694:	2800021e 	bne	r5,zero,96a0 <__lo0bits+0x48>
    9698:	1806d23a 	srli	r3,r3,8
    969c:	10800204 	addi	r2,r2,8
    96a0:	194003cc 	andi	r5,r3,15
    96a4:	2800021e 	bne	r5,zero,96b0 <__lo0bits+0x58>
    96a8:	1806d13a 	srli	r3,r3,4
    96ac:	10800104 	addi	r2,r2,4
    96b0:	194000cc 	andi	r5,r3,3
    96b4:	2800021e 	bne	r5,zero,96c0 <__lo0bits+0x68>
    96b8:	1806d0ba 	srli	r3,r3,2
    96bc:	10800084 	addi	r2,r2,2
    96c0:	1940004c 	andi	r5,r3,1
    96c4:	2800081e 	bne	r5,zero,96e8 <__lo0bits+0x90>
    96c8:	1806d07a 	srli	r3,r3,1
    96cc:	1800051e 	bne	r3,zero,96e4 <__lo0bits+0x8c>
    96d0:	00800804 	movi	r2,32
    96d4:	f800283a 	ret
    96d8:	1806d43a 	srli	r3,r3,16
    96dc:	00800404 	movi	r2,16
    96e0:	003feb06 	br	9690 <__alt_data_end+0xfffb3f60>
    96e4:	10800044 	addi	r2,r2,1
    96e8:	20c00015 	stw	r3,0(r4)
    96ec:	f800283a 	ret
    96f0:	0005883a 	mov	r2,zero
    96f4:	f800283a 	ret
    96f8:	1806d07a 	srli	r3,r3,1
    96fc:	00800044 	movi	r2,1
    9700:	20c00015 	stw	r3,0(r4)
    9704:	f800283a 	ret

00009708 <__i2b>:
    9708:	defffd04 	addi	sp,sp,-12
    970c:	dc000015 	stw	r16,0(sp)
    9710:	04000044 	movi	r16,1
    9714:	dc400115 	stw	r17,4(sp)
    9718:	2823883a 	mov	r17,r5
    971c:	800b883a 	mov	r5,r16
    9720:	dfc00215 	stw	ra,8(sp)
    9724:	00092e00 	call	92e0 <_Balloc>
    9728:	14400515 	stw	r17,20(r2)
    972c:	14000415 	stw	r16,16(r2)
    9730:	dfc00217 	ldw	ra,8(sp)
    9734:	dc400117 	ldw	r17,4(sp)
    9738:	dc000017 	ldw	r16,0(sp)
    973c:	dec00304 	addi	sp,sp,12
    9740:	f800283a 	ret

00009744 <__multiply>:
    9744:	deffef04 	addi	sp,sp,-68
    9748:	dc400815 	stw	r17,32(sp)
    974c:	dc000715 	stw	r16,28(sp)
    9750:	2c400417 	ldw	r17,16(r5)
    9754:	34000417 	ldw	r16,16(r6)
    9758:	dd800d15 	stw	r22,52(sp)
    975c:	dc800915 	stw	r18,36(sp)
    9760:	dfc01015 	stw	ra,64(sp)
    9764:	df000f15 	stw	fp,60(sp)
    9768:	ddc00e15 	stw	r23,56(sp)
    976c:	dd400c15 	stw	r21,48(sp)
    9770:	dd000b15 	stw	r20,44(sp)
    9774:	dcc00a15 	stw	r19,40(sp)
    9778:	2825883a 	mov	r18,r5
    977c:	302d883a 	mov	r22,r6
    9780:	8c009116 	blt	r17,r16,99c8 <__multiply+0x284>
    9784:	8005883a 	mov	r2,r16
    9788:	8821883a 	mov	r16,r17
    978c:	1023883a 	mov	r17,r2
    9790:	90800217 	ldw	r2,8(r18)
    9794:	8447883a 	add	r3,r16,r17
    9798:	d8c00215 	stw	r3,8(sp)
    979c:	91400117 	ldw	r5,4(r18)
    97a0:	10c0010e 	bge	r2,r3,97a8 <__multiply+0x64>
    97a4:	29400044 	addi	r5,r5,1
    97a8:	00092e00 	call	92e0 <_Balloc>
    97ac:	d8c00217 	ldw	r3,8(sp)
    97b0:	d8800615 	stw	r2,24(sp)
    97b4:	18eb883a 	add	r21,r3,r3
    97b8:	ad6b883a 	add	r21,r21,r21
    97bc:	10c00504 	addi	r3,r2,20
    97c0:	1d6b883a 	add	r21,r3,r21
    97c4:	d8c00115 	stw	r3,4(sp)
    97c8:	dd400315 	stw	r21,12(sp)
    97cc:	1805883a 	mov	r2,r3
    97d0:	1d40042e 	bgeu	r3,r21,97e4 <__multiply+0xa0>
    97d4:	d8c00317 	ldw	r3,12(sp)
    97d8:	10000015 	stw	zero,0(r2)
    97dc:	10800104 	addi	r2,r2,4
    97e0:	10fffc36 	bltu	r2,r3,97d4 <__alt_data_end+0xfffb40a4>
    97e4:	8c63883a 	add	r17,r17,r17
    97e8:	b5800504 	addi	r22,r22,20
    97ec:	8c63883a 	add	r17,r17,r17
    97f0:	94800504 	addi	r18,r18,20
    97f4:	8421883a 	add	r16,r16,r16
    97f8:	b463883a 	add	r17,r22,r17
    97fc:	8421883a 	add	r16,r16,r16
    9800:	dd800015 	stw	r22,0(sp)
    9804:	dc800415 	stw	r18,16(sp)
    9808:	dc400515 	stw	r17,20(sp)
    980c:	9429883a 	add	r20,r18,r16
    9810:	b4404f2e 	bgeu	r22,r17,9950 <__multiply+0x20c>
    9814:	d8c00017 	ldw	r3,0(sp)
    9818:	1c800017 	ldw	r18,0(r3)
    981c:	943fffcc 	andi	r16,r18,65535
    9820:	80001e26 	beq	r16,zero,989c <__multiply+0x158>
    9824:	dd800117 	ldw	r22,4(sp)
    9828:	dd400417 	ldw	r21,16(sp)
    982c:	0025883a 	mov	r18,zero
    9830:	adc00017 	ldw	r23,0(r21)
    9834:	b4c00017 	ldw	r19,0(r22)
    9838:	800b883a 	mov	r5,r16
    983c:	b93fffcc 	andi	r4,r23,65535
    9840:	000d72c0 	call	d72c <__mulsi3>
    9844:	9c7fffcc 	andi	r17,r19,65535
    9848:	8885883a 	add	r2,r17,r2
    984c:	b808d43a 	srli	r4,r23,16
    9850:	14a3883a 	add	r17,r2,r18
    9854:	9826d43a 	srli	r19,r19,16
    9858:	8824d43a 	srli	r18,r17,16
    985c:	800b883a 	mov	r5,r16
    9860:	000d72c0 	call	d72c <__mulsi3>
    9864:	9885883a 	add	r2,r19,r2
    9868:	14a7883a 	add	r19,r2,r18
    986c:	88ffffcc 	andi	r3,r17,65535
    9870:	9822943a 	slli	r17,r19,16
    9874:	ad400104 	addi	r21,r21,4
    9878:	b005883a 	mov	r2,r22
    987c:	88c6b03a 	or	r3,r17,r3
    9880:	b0c00015 	stw	r3,0(r22)
    9884:	9824d43a 	srli	r18,r19,16
    9888:	b5800104 	addi	r22,r22,4
    988c:	ad3fe836 	bltu	r21,r20,9830 <__alt_data_end+0xfffb4100>
    9890:	d8c00017 	ldw	r3,0(sp)
    9894:	14800115 	stw	r18,4(r2)
    9898:	1c800017 	ldw	r18,0(r3)
    989c:	9024d43a 	srli	r18,r18,16
    98a0:	90002226 	beq	r18,zero,992c <__multiply+0x1e8>
    98a4:	d8c00117 	ldw	r3,4(sp)
    98a8:	dd800417 	ldw	r22,16(sp)
    98ac:	002f883a 	mov	r23,zero
    98b0:	1f000017 	ldw	fp,0(r3)
    98b4:	1823883a 	mov	r17,r3
    98b8:	182b883a 	mov	r21,r3
    98bc:	e021883a 	mov	r16,fp
    98c0:	00000106 	br	98c8 <__multiply+0x184>
    98c4:	982b883a 	mov	r21,r19
    98c8:	b100000b 	ldhu	r4,0(r22)
    98cc:	8020d43a 	srli	r16,r16,16
    98d0:	900b883a 	mov	r5,r18
    98d4:	000d72c0 	call	d72c <__mulsi3>
    98d8:	1405883a 	add	r2,r2,r16
    98dc:	15ef883a 	add	r23,r2,r23
    98e0:	b804943a 	slli	r2,r23,16
    98e4:	e0ffffcc 	andi	r3,fp,65535
    98e8:	8c400104 	addi	r17,r17,4
    98ec:	10c6b03a 	or	r3,r2,r3
    98f0:	88ffff15 	stw	r3,-4(r17)
    98f4:	b5800104 	addi	r22,r22,4
    98f8:	b13fff17 	ldw	r4,-4(r22)
    98fc:	acc00104 	addi	r19,r21,4
    9900:	900b883a 	mov	r5,r18
    9904:	2008d43a 	srli	r4,r4,16
    9908:	9c000017 	ldw	r16,0(r19)
    990c:	000d72c0 	call	d72c <__mulsi3>
    9910:	b806d43a 	srli	r3,r23,16
    9914:	813fffcc 	andi	r4,r16,65535
    9918:	1105883a 	add	r2,r2,r4
    991c:	10f9883a 	add	fp,r2,r3
    9920:	e02ed43a 	srli	r23,fp,16
    9924:	b53fe736 	bltu	r22,r20,98c4 <__alt_data_end+0xfffb4194>
    9928:	af000115 	stw	fp,4(r21)
    992c:	d8c00017 	ldw	r3,0(sp)
    9930:	d9000517 	ldw	r4,20(sp)
    9934:	18c00104 	addi	r3,r3,4
    9938:	d8c00015 	stw	r3,0(sp)
    993c:	d8c00117 	ldw	r3,4(sp)
    9940:	18c00104 	addi	r3,r3,4
    9944:	d8c00115 	stw	r3,4(sp)
    9948:	d8c00017 	ldw	r3,0(sp)
    994c:	193fb136 	bltu	r3,r4,9814 <__alt_data_end+0xfffb40e4>
    9950:	d8c00217 	ldw	r3,8(sp)
    9954:	00c00c0e 	bge	zero,r3,9988 <__multiply+0x244>
    9958:	d8c00317 	ldw	r3,12(sp)
    995c:	18bfff17 	ldw	r2,-4(r3)
    9960:	1d7fff04 	addi	r21,r3,-4
    9964:	10000326 	beq	r2,zero,9974 <__multiply+0x230>
    9968:	00000706 	br	9988 <__multiply+0x244>
    996c:	a8800017 	ldw	r2,0(r21)
    9970:	1000051e 	bne	r2,zero,9988 <__multiply+0x244>
    9974:	d8c00217 	ldw	r3,8(sp)
    9978:	ad7fff04 	addi	r21,r21,-4
    997c:	18ffffc4 	addi	r3,r3,-1
    9980:	d8c00215 	stw	r3,8(sp)
    9984:	183ff91e 	bne	r3,zero,996c <__alt_data_end+0xfffb423c>
    9988:	d8c00617 	ldw	r3,24(sp)
    998c:	d9000217 	ldw	r4,8(sp)
    9990:	1805883a 	mov	r2,r3
    9994:	19000415 	stw	r4,16(r3)
    9998:	dfc01017 	ldw	ra,64(sp)
    999c:	df000f17 	ldw	fp,60(sp)
    99a0:	ddc00e17 	ldw	r23,56(sp)
    99a4:	dd800d17 	ldw	r22,52(sp)
    99a8:	dd400c17 	ldw	r21,48(sp)
    99ac:	dd000b17 	ldw	r20,44(sp)
    99b0:	dcc00a17 	ldw	r19,40(sp)
    99b4:	dc800917 	ldw	r18,36(sp)
    99b8:	dc400817 	ldw	r17,32(sp)
    99bc:	dc000717 	ldw	r16,28(sp)
    99c0:	dec01104 	addi	sp,sp,68
    99c4:	f800283a 	ret
    99c8:	3025883a 	mov	r18,r6
    99cc:	282d883a 	mov	r22,r5
    99d0:	003f6f06 	br	9790 <__alt_data_end+0xfffb4060>

000099d4 <__pow5mult>:
    99d4:	defffa04 	addi	sp,sp,-24
    99d8:	dcc00315 	stw	r19,12(sp)
    99dc:	dc800215 	stw	r18,8(sp)
    99e0:	dc000015 	stw	r16,0(sp)
    99e4:	dfc00515 	stw	ra,20(sp)
    99e8:	dd000415 	stw	r20,16(sp)
    99ec:	dc400115 	stw	r17,4(sp)
    99f0:	308000cc 	andi	r2,r6,3
    99f4:	3021883a 	mov	r16,r6
    99f8:	2027883a 	mov	r19,r4
    99fc:	2825883a 	mov	r18,r5
    9a00:	10002e1e 	bne	r2,zero,9abc <__pow5mult+0xe8>
    9a04:	8021d0ba 	srai	r16,r16,2
    9a08:	80001a26 	beq	r16,zero,9a74 <__pow5mult+0xa0>
    9a0c:	9c401217 	ldw	r17,72(r19)
    9a10:	8800061e 	bne	r17,zero,9a2c <__pow5mult+0x58>
    9a14:	00003406 	br	9ae8 <__pow5mult+0x114>
    9a18:	8021d07a 	srai	r16,r16,1
    9a1c:	80001526 	beq	r16,zero,9a74 <__pow5mult+0xa0>
    9a20:	88800017 	ldw	r2,0(r17)
    9a24:	10001c26 	beq	r2,zero,9a98 <__pow5mult+0xc4>
    9a28:	1023883a 	mov	r17,r2
    9a2c:	80c0004c 	andi	r3,r16,1
    9a30:	183ff926 	beq	r3,zero,9a18 <__alt_data_end+0xfffb42e8>
    9a34:	900b883a 	mov	r5,r18
    9a38:	880d883a 	mov	r6,r17
    9a3c:	9809883a 	mov	r4,r19
    9a40:	00097440 	call	9744 <__multiply>
    9a44:	90001b26 	beq	r18,zero,9ab4 <__pow5mult+0xe0>
    9a48:	91c00117 	ldw	r7,4(r18)
    9a4c:	98c01317 	ldw	r3,76(r19)
    9a50:	8021d07a 	srai	r16,r16,1
    9a54:	39cf883a 	add	r7,r7,r7
    9a58:	39cf883a 	add	r7,r7,r7
    9a5c:	19c7883a 	add	r3,r3,r7
    9a60:	19000017 	ldw	r4,0(r3)
    9a64:	91000015 	stw	r4,0(r18)
    9a68:	1c800015 	stw	r18,0(r3)
    9a6c:	1025883a 	mov	r18,r2
    9a70:	803feb1e 	bne	r16,zero,9a20 <__alt_data_end+0xfffb42f0>
    9a74:	9005883a 	mov	r2,r18
    9a78:	dfc00517 	ldw	ra,20(sp)
    9a7c:	dd000417 	ldw	r20,16(sp)
    9a80:	dcc00317 	ldw	r19,12(sp)
    9a84:	dc800217 	ldw	r18,8(sp)
    9a88:	dc400117 	ldw	r17,4(sp)
    9a8c:	dc000017 	ldw	r16,0(sp)
    9a90:	dec00604 	addi	sp,sp,24
    9a94:	f800283a 	ret
    9a98:	9809883a 	mov	r4,r19
    9a9c:	880b883a 	mov	r5,r17
    9aa0:	880d883a 	mov	r6,r17
    9aa4:	00097440 	call	9744 <__multiply>
    9aa8:	88800015 	stw	r2,0(r17)
    9aac:	10000015 	stw	zero,0(r2)
    9ab0:	003fdd06 	br	9a28 <__alt_data_end+0xfffb42f8>
    9ab4:	1025883a 	mov	r18,r2
    9ab8:	003fd706 	br	9a18 <__alt_data_end+0xfffb42e8>
    9abc:	10bfffc4 	addi	r2,r2,-1
    9ac0:	1085883a 	add	r2,r2,r2
    9ac4:	00c00074 	movhi	r3,1
    9ac8:	18cc0404 	addi	r3,r3,12304
    9acc:	1085883a 	add	r2,r2,r2
    9ad0:	1885883a 	add	r2,r3,r2
    9ad4:	11800017 	ldw	r6,0(r2)
    9ad8:	000f883a 	mov	r7,zero
    9adc:	00093b00 	call	93b0 <__multadd>
    9ae0:	1025883a 	mov	r18,r2
    9ae4:	003fc706 	br	9a04 <__alt_data_end+0xfffb42d4>
    9ae8:	05000044 	movi	r20,1
    9aec:	9809883a 	mov	r4,r19
    9af0:	a00b883a 	mov	r5,r20
    9af4:	00092e00 	call	92e0 <_Balloc>
    9af8:	1023883a 	mov	r17,r2
    9afc:	00809c44 	movi	r2,625
    9b00:	88800515 	stw	r2,20(r17)
    9b04:	8d000415 	stw	r20,16(r17)
    9b08:	9c401215 	stw	r17,72(r19)
    9b0c:	88000015 	stw	zero,0(r17)
    9b10:	003fc606 	br	9a2c <__alt_data_end+0xfffb42fc>

00009b14 <__lshift>:
    9b14:	defff904 	addi	sp,sp,-28
    9b18:	dd000415 	stw	r20,16(sp)
    9b1c:	dcc00315 	stw	r19,12(sp)
    9b20:	3029d17a 	srai	r20,r6,5
    9b24:	2cc00417 	ldw	r19,16(r5)
    9b28:	28800217 	ldw	r2,8(r5)
    9b2c:	dd400515 	stw	r21,20(sp)
    9b30:	a4e7883a 	add	r19,r20,r19
    9b34:	dc800215 	stw	r18,8(sp)
    9b38:	dc400115 	stw	r17,4(sp)
    9b3c:	dc000015 	stw	r16,0(sp)
    9b40:	dfc00615 	stw	ra,24(sp)
    9b44:	9c000044 	addi	r16,r19,1
    9b48:	2823883a 	mov	r17,r5
    9b4c:	302b883a 	mov	r21,r6
    9b50:	2025883a 	mov	r18,r4
    9b54:	29400117 	ldw	r5,4(r5)
    9b58:	1400030e 	bge	r2,r16,9b68 <__lshift+0x54>
    9b5c:	1085883a 	add	r2,r2,r2
    9b60:	29400044 	addi	r5,r5,1
    9b64:	143ffd16 	blt	r2,r16,9b5c <__alt_data_end+0xfffb442c>
    9b68:	9009883a 	mov	r4,r18
    9b6c:	00092e00 	call	92e0 <_Balloc>
    9b70:	11c00504 	addi	r7,r2,20
    9b74:	0500090e 	bge	zero,r20,9b9c <__lshift+0x88>
    9b78:	3811883a 	mov	r8,r7
    9b7c:	0007883a 	mov	r3,zero
    9b80:	40000015 	stw	zero,0(r8)
    9b84:	18c00044 	addi	r3,r3,1
    9b88:	42000104 	addi	r8,r8,4
    9b8c:	1d3ffc1e 	bne	r3,r20,9b80 <__alt_data_end+0xfffb4450>
    9b90:	18c7883a 	add	r3,r3,r3
    9b94:	18c7883a 	add	r3,r3,r3
    9b98:	38cf883a 	add	r7,r7,r3
    9b9c:	89000417 	ldw	r4,16(r17)
    9ba0:	88c00504 	addi	r3,r17,20
    9ba4:	a98007cc 	andi	r6,r21,31
    9ba8:	2109883a 	add	r4,r4,r4
    9bac:	2109883a 	add	r4,r4,r4
    9bb0:	1909883a 	add	r4,r3,r4
    9bb4:	30002326 	beq	r6,zero,9c44 <__lshift+0x130>
    9bb8:	01400804 	movi	r5,32
    9bbc:	298bc83a 	sub	r5,r5,r6
    9bc0:	0013883a 	mov	r9,zero
    9bc4:	1a000017 	ldw	r8,0(r3)
    9bc8:	3815883a 	mov	r10,r7
    9bcc:	39c00104 	addi	r7,r7,4
    9bd0:	4190983a 	sll	r8,r8,r6
    9bd4:	18c00104 	addi	r3,r3,4
    9bd8:	4a10b03a 	or	r8,r9,r8
    9bdc:	3a3fff15 	stw	r8,-4(r7)
    9be0:	1a3fff17 	ldw	r8,-4(r3)
    9be4:	4152d83a 	srl	r9,r8,r5
    9be8:	193ff636 	bltu	r3,r4,9bc4 <__alt_data_end+0xfffb4494>
    9bec:	52400115 	stw	r9,4(r10)
    9bf0:	48000126 	beq	r9,zero,9bf8 <__lshift+0xe4>
    9bf4:	9c000084 	addi	r16,r19,2
    9bf8:	89000117 	ldw	r4,4(r17)
    9bfc:	90c01317 	ldw	r3,76(r18)
    9c00:	843fffc4 	addi	r16,r16,-1
    9c04:	2109883a 	add	r4,r4,r4
    9c08:	2109883a 	add	r4,r4,r4
    9c0c:	1907883a 	add	r3,r3,r4
    9c10:	19000017 	ldw	r4,0(r3)
    9c14:	14000415 	stw	r16,16(r2)
    9c18:	89000015 	stw	r4,0(r17)
    9c1c:	1c400015 	stw	r17,0(r3)
    9c20:	dfc00617 	ldw	ra,24(sp)
    9c24:	dd400517 	ldw	r21,20(sp)
    9c28:	dd000417 	ldw	r20,16(sp)
    9c2c:	dcc00317 	ldw	r19,12(sp)
    9c30:	dc800217 	ldw	r18,8(sp)
    9c34:	dc400117 	ldw	r17,4(sp)
    9c38:	dc000017 	ldw	r16,0(sp)
    9c3c:	dec00704 	addi	sp,sp,28
    9c40:	f800283a 	ret
    9c44:	19400017 	ldw	r5,0(r3)
    9c48:	39c00104 	addi	r7,r7,4
    9c4c:	18c00104 	addi	r3,r3,4
    9c50:	397fff15 	stw	r5,-4(r7)
    9c54:	193ffb36 	bltu	r3,r4,9c44 <__alt_data_end+0xfffb4514>
    9c58:	003fe706 	br	9bf8 <__alt_data_end+0xfffb44c8>

00009c5c <__mcmp>:
    9c5c:	20800417 	ldw	r2,16(r4)
    9c60:	28c00417 	ldw	r3,16(r5)
    9c64:	10c5c83a 	sub	r2,r2,r3
    9c68:	1000111e 	bne	r2,zero,9cb0 <__mcmp+0x54>
    9c6c:	18c7883a 	add	r3,r3,r3
    9c70:	18c7883a 	add	r3,r3,r3
    9c74:	21000504 	addi	r4,r4,20
    9c78:	29400504 	addi	r5,r5,20
    9c7c:	20c5883a 	add	r2,r4,r3
    9c80:	28cb883a 	add	r5,r5,r3
    9c84:	00000106 	br	9c8c <__mcmp+0x30>
    9c88:	20800a2e 	bgeu	r4,r2,9cb4 <__mcmp+0x58>
    9c8c:	10bfff04 	addi	r2,r2,-4
    9c90:	297fff04 	addi	r5,r5,-4
    9c94:	11800017 	ldw	r6,0(r2)
    9c98:	28c00017 	ldw	r3,0(r5)
    9c9c:	30fffa26 	beq	r6,r3,9c88 <__alt_data_end+0xfffb4558>
    9ca0:	30c00236 	bltu	r6,r3,9cac <__mcmp+0x50>
    9ca4:	00800044 	movi	r2,1
    9ca8:	f800283a 	ret
    9cac:	00bfffc4 	movi	r2,-1
    9cb0:	f800283a 	ret
    9cb4:	0005883a 	mov	r2,zero
    9cb8:	f800283a 	ret

00009cbc <__mdiff>:
    9cbc:	defffb04 	addi	sp,sp,-20
    9cc0:	dc000015 	stw	r16,0(sp)
    9cc4:	2821883a 	mov	r16,r5
    9cc8:	dcc00315 	stw	r19,12(sp)
    9ccc:	300b883a 	mov	r5,r6
    9cd0:	2027883a 	mov	r19,r4
    9cd4:	8009883a 	mov	r4,r16
    9cd8:	dc800215 	stw	r18,8(sp)
    9cdc:	dfc00415 	stw	ra,16(sp)
    9ce0:	dc400115 	stw	r17,4(sp)
    9ce4:	3025883a 	mov	r18,r6
    9ce8:	0009c5c0 	call	9c5c <__mcmp>
    9cec:	10005226 	beq	r2,zero,9e38 <__mdiff+0x17c>
    9cf0:	10004c16 	blt	r2,zero,9e24 <__mdiff+0x168>
    9cf4:	0023883a 	mov	r17,zero
    9cf8:	81400117 	ldw	r5,4(r16)
    9cfc:	9809883a 	mov	r4,r19
    9d00:	00092e00 	call	92e0 <_Balloc>
    9d04:	83400417 	ldw	r13,16(r16)
    9d08:	93800417 	ldw	r14,16(r18)
    9d0c:	81000504 	addi	r4,r16,20
    9d10:	6b59883a 	add	r12,r13,r13
    9d14:	739d883a 	add	r14,r14,r14
    9d18:	6319883a 	add	r12,r12,r12
    9d1c:	91800504 	addi	r6,r18,20
    9d20:	739d883a 	add	r14,r14,r14
    9d24:	14400315 	stw	r17,12(r2)
    9d28:	2319883a 	add	r12,r4,r12
    9d2c:	339d883a 	add	r14,r6,r14
    9d30:	12400504 	addi	r9,r2,20
    9d34:	0007883a 	mov	r3,zero
    9d38:	22000017 	ldw	r8,0(r4)
    9d3c:	32800017 	ldw	r10,0(r6)
    9d40:	4ac00104 	addi	r11,r9,4
    9d44:	41ffffcc 	andi	r7,r8,65535
    9d48:	38c7883a 	add	r3,r7,r3
    9d4c:	51ffffcc 	andi	r7,r10,65535
    9d50:	19cfc83a 	sub	r7,r3,r7
    9d54:	4010d43a 	srli	r8,r8,16
    9d58:	5014d43a 	srli	r10,r10,16
    9d5c:	3807d43a 	srai	r3,r7,16
    9d60:	39ffffcc 	andi	r7,r7,65535
    9d64:	4291c83a 	sub	r8,r8,r10
    9d68:	40c7883a 	add	r3,r8,r3
    9d6c:	1810943a 	slli	r8,r3,16
    9d70:	31800104 	addi	r6,r6,4
    9d74:	21000104 	addi	r4,r4,4
    9d78:	41ceb03a 	or	r7,r8,r7
    9d7c:	49c00015 	stw	r7,0(r9)
    9d80:	1807d43a 	srai	r3,r3,16
    9d84:	580b883a 	mov	r5,r11
    9d88:	5813883a 	mov	r9,r11
    9d8c:	33bfea36 	bltu	r6,r14,9d38 <__alt_data_end+0xfffb4608>
    9d90:	2011883a 	mov	r8,r4
    9d94:	2300152e 	bgeu	r4,r12,9dec <__mdiff+0x130>
    9d98:	21400017 	ldw	r5,0(r4)
    9d9c:	4a400104 	addi	r9,r9,4
    9da0:	21000104 	addi	r4,r4,4
    9da4:	29ffffcc 	andi	r7,r5,65535
    9da8:	38c7883a 	add	r3,r7,r3
    9dac:	280ad43a 	srli	r5,r5,16
    9db0:	180dd43a 	srai	r6,r3,16
    9db4:	19ffffcc 	andi	r7,r3,65535
    9db8:	3147883a 	add	r3,r6,r5
    9dbc:	180a943a 	slli	r5,r3,16
    9dc0:	1807d43a 	srai	r3,r3,16
    9dc4:	29ceb03a 	or	r7,r5,r7
    9dc8:	49ffff15 	stw	r7,-4(r9)
    9dcc:	233ff236 	bltu	r4,r12,9d98 <__alt_data_end+0xfffb4668>
    9dd0:	0206303a 	nor	r3,zero,r8
    9dd4:	1b07883a 	add	r3,r3,r12
    9dd8:	1806d0ba 	srli	r3,r3,2
    9ddc:	18c00044 	addi	r3,r3,1
    9de0:	18c7883a 	add	r3,r3,r3
    9de4:	18c7883a 	add	r3,r3,r3
    9de8:	58cb883a 	add	r5,r11,r3
    9dec:	28ffff04 	addi	r3,r5,-4
    9df0:	3800041e 	bne	r7,zero,9e04 <__mdiff+0x148>
    9df4:	18ffff04 	addi	r3,r3,-4
    9df8:	19000017 	ldw	r4,0(r3)
    9dfc:	6b7fffc4 	addi	r13,r13,-1
    9e00:	203ffc26 	beq	r4,zero,9df4 <__alt_data_end+0xfffb46c4>
    9e04:	13400415 	stw	r13,16(r2)
    9e08:	dfc00417 	ldw	ra,16(sp)
    9e0c:	dcc00317 	ldw	r19,12(sp)
    9e10:	dc800217 	ldw	r18,8(sp)
    9e14:	dc400117 	ldw	r17,4(sp)
    9e18:	dc000017 	ldw	r16,0(sp)
    9e1c:	dec00504 	addi	sp,sp,20
    9e20:	f800283a 	ret
    9e24:	8005883a 	mov	r2,r16
    9e28:	04400044 	movi	r17,1
    9e2c:	9021883a 	mov	r16,r18
    9e30:	1025883a 	mov	r18,r2
    9e34:	003fb006 	br	9cf8 <__alt_data_end+0xfffb45c8>
    9e38:	9809883a 	mov	r4,r19
    9e3c:	000b883a 	mov	r5,zero
    9e40:	00092e00 	call	92e0 <_Balloc>
    9e44:	00c00044 	movi	r3,1
    9e48:	10c00415 	stw	r3,16(r2)
    9e4c:	10000515 	stw	zero,20(r2)
    9e50:	003fed06 	br	9e08 <__alt_data_end+0xfffb46d8>

00009e54 <__ulp>:
    9e54:	295ffc2c 	andhi	r5,r5,32752
    9e58:	00bf3034 	movhi	r2,64704
    9e5c:	2887883a 	add	r3,r5,r2
    9e60:	00c0020e 	bge	zero,r3,9e6c <__ulp+0x18>
    9e64:	0005883a 	mov	r2,zero
    9e68:	f800283a 	ret
    9e6c:	00c7c83a 	sub	r3,zero,r3
    9e70:	180bd53a 	srai	r5,r3,20
    9e74:	008004c4 	movi	r2,19
    9e78:	11400a0e 	bge	r2,r5,9ea4 <__ulp+0x50>
    9e7c:	00800c84 	movi	r2,50
    9e80:	0007883a 	mov	r3,zero
    9e84:	11400516 	blt	r2,r5,9e9c <__ulp+0x48>
    9e88:	00800cc4 	movi	r2,51
    9e8c:	114bc83a 	sub	r5,r2,r5
    9e90:	00800044 	movi	r2,1
    9e94:	1144983a 	sll	r2,r2,r5
    9e98:	f800283a 	ret
    9e9c:	00800044 	movi	r2,1
    9ea0:	f800283a 	ret
    9ea4:	00800234 	movhi	r2,8
    9ea8:	1147d83a 	sra	r3,r2,r5
    9eac:	0005883a 	mov	r2,zero
    9eb0:	f800283a 	ret

00009eb4 <__b2d>:
    9eb4:	defffa04 	addi	sp,sp,-24
    9eb8:	dc000015 	stw	r16,0(sp)
    9ebc:	24000417 	ldw	r16,16(r4)
    9ec0:	dc400115 	stw	r17,4(sp)
    9ec4:	24400504 	addi	r17,r4,20
    9ec8:	8421883a 	add	r16,r16,r16
    9ecc:	8421883a 	add	r16,r16,r16
    9ed0:	8c21883a 	add	r16,r17,r16
    9ed4:	dc800215 	stw	r18,8(sp)
    9ed8:	84bfff17 	ldw	r18,-4(r16)
    9edc:	dd000415 	stw	r20,16(sp)
    9ee0:	dcc00315 	stw	r19,12(sp)
    9ee4:	9009883a 	mov	r4,r18
    9ee8:	2829883a 	mov	r20,r5
    9eec:	dfc00515 	stw	ra,20(sp)
    9ef0:	00095f00 	call	95f0 <__hi0bits>
    9ef4:	00c00804 	movi	r3,32
    9ef8:	1887c83a 	sub	r3,r3,r2
    9efc:	a0c00015 	stw	r3,0(r20)
    9f00:	00c00284 	movi	r3,10
    9f04:	84ffff04 	addi	r19,r16,-4
    9f08:	18801216 	blt	r3,r2,9f54 <__b2d+0xa0>
    9f0c:	014002c4 	movi	r5,11
    9f10:	2889c83a 	sub	r4,r5,r2
    9f14:	9106d83a 	srl	r3,r18,r4
    9f18:	18cffc34 	orhi	r3,r3,16368
    9f1c:	8cc0282e 	bgeu	r17,r19,9fc0 <__b2d+0x10c>
    9f20:	817ffe17 	ldw	r5,-8(r16)
    9f24:	290ad83a 	srl	r5,r5,r4
    9f28:	10800544 	addi	r2,r2,21
    9f2c:	9084983a 	sll	r2,r18,r2
    9f30:	2884b03a 	or	r2,r5,r2
    9f34:	dfc00517 	ldw	ra,20(sp)
    9f38:	dd000417 	ldw	r20,16(sp)
    9f3c:	dcc00317 	ldw	r19,12(sp)
    9f40:	dc800217 	ldw	r18,8(sp)
    9f44:	dc400117 	ldw	r17,4(sp)
    9f48:	dc000017 	ldw	r16,0(sp)
    9f4c:	dec00604 	addi	sp,sp,24
    9f50:	f800283a 	ret
    9f54:	113ffd44 	addi	r4,r2,-11
    9f58:	8cc00f2e 	bgeu	r17,r19,9f98 <__b2d+0xe4>
    9f5c:	81bffe04 	addi	r6,r16,-8
    9f60:	817ffe17 	ldw	r5,-8(r16)
    9f64:	20001326 	beq	r4,zero,9fb4 <__b2d+0x100>
    9f68:	00c00ac4 	movi	r3,43
    9f6c:	1885c83a 	sub	r2,r3,r2
    9f70:	2886d83a 	srl	r3,r5,r2
    9f74:	9124983a 	sll	r18,r18,r4
    9f78:	90e4b03a 	or	r18,r18,r3
    9f7c:	90cffc34 	orhi	r3,r18,16368
    9f80:	8980112e 	bgeu	r17,r6,9fc8 <__b2d+0x114>
    9f84:	81bffd17 	ldw	r6,-12(r16)
    9f88:	308cd83a 	srl	r6,r6,r2
    9f8c:	2904983a 	sll	r2,r5,r4
    9f90:	1184b03a 	or	r2,r2,r6
    9f94:	003fe706 	br	9f34 <__alt_data_end+0xfffb4804>
    9f98:	20000526 	beq	r4,zero,9fb0 <__b2d+0xfc>
    9f9c:	9124983a 	sll	r18,r18,r4
    9fa0:	000d883a 	mov	r6,zero
    9fa4:	000b883a 	mov	r5,zero
    9fa8:	90cffc34 	orhi	r3,r18,16368
    9fac:	003ff706 	br	9f8c <__alt_data_end+0xfffb485c>
    9fb0:	000b883a 	mov	r5,zero
    9fb4:	90cffc34 	orhi	r3,r18,16368
    9fb8:	2805883a 	mov	r2,r5
    9fbc:	003fdd06 	br	9f34 <__alt_data_end+0xfffb4804>
    9fc0:	000b883a 	mov	r5,zero
    9fc4:	003fd806 	br	9f28 <__alt_data_end+0xfffb47f8>
    9fc8:	000d883a 	mov	r6,zero
    9fcc:	003fef06 	br	9f8c <__alt_data_end+0xfffb485c>

00009fd0 <__d2b>:
    9fd0:	defff704 	addi	sp,sp,-36
    9fd4:	dc000215 	stw	r16,8(sp)
    9fd8:	3021883a 	mov	r16,r6
    9fdc:	dc400315 	stw	r17,12(sp)
    9fe0:	8022907a 	slli	r17,r16,1
    9fe4:	dd400715 	stw	r21,28(sp)
    9fe8:	282b883a 	mov	r21,r5
    9fec:	01400044 	movi	r5,1
    9ff0:	dd000615 	stw	r20,24(sp)
    9ff4:	dcc00515 	stw	r19,20(sp)
    9ff8:	dc800415 	stw	r18,16(sp)
    9ffc:	dfc00815 	stw	ra,32(sp)
    a000:	3829883a 	mov	r20,r7
    a004:	dc800917 	ldw	r18,36(sp)
    a008:	8822d57a 	srli	r17,r17,21
    a00c:	00092e00 	call	92e0 <_Balloc>
    a010:	1027883a 	mov	r19,r2
    a014:	00800434 	movhi	r2,16
    a018:	10bfffc4 	addi	r2,r2,-1
    a01c:	808c703a 	and	r6,r16,r2
    a020:	88000126 	beq	r17,zero,a028 <__d2b+0x58>
    a024:	31800434 	orhi	r6,r6,16
    a028:	d9800015 	stw	r6,0(sp)
    a02c:	a8001f26 	beq	r21,zero,a0ac <__d2b+0xdc>
    a030:	d9000104 	addi	r4,sp,4
    a034:	dd400115 	stw	r21,4(sp)
    a038:	00096580 	call	9658 <__lo0bits>
    a03c:	d8c00017 	ldw	r3,0(sp)
    a040:	1000291e 	bne	r2,zero,a0e8 <__d2b+0x118>
    a044:	d9000117 	ldw	r4,4(sp)
    a048:	99000515 	stw	r4,20(r19)
    a04c:	1820c03a 	cmpne	r16,r3,zero
    a050:	84000044 	addi	r16,r16,1
    a054:	98c00615 	stw	r3,24(r19)
    a058:	9c000415 	stw	r16,16(r19)
    a05c:	88001b1e 	bne	r17,zero,a0cc <__d2b+0xfc>
    a060:	800690ba 	slli	r3,r16,2
    a064:	10bef384 	addi	r2,r2,-1074
    a068:	a0800015 	stw	r2,0(r20)
    a06c:	98c5883a 	add	r2,r19,r3
    a070:	11000417 	ldw	r4,16(r2)
    a074:	8020917a 	slli	r16,r16,5
    a078:	00095f00 	call	95f0 <__hi0bits>
    a07c:	8085c83a 	sub	r2,r16,r2
    a080:	90800015 	stw	r2,0(r18)
    a084:	9805883a 	mov	r2,r19
    a088:	dfc00817 	ldw	ra,32(sp)
    a08c:	dd400717 	ldw	r21,28(sp)
    a090:	dd000617 	ldw	r20,24(sp)
    a094:	dcc00517 	ldw	r19,20(sp)
    a098:	dc800417 	ldw	r18,16(sp)
    a09c:	dc400317 	ldw	r17,12(sp)
    a0a0:	dc000217 	ldw	r16,8(sp)
    a0a4:	dec00904 	addi	sp,sp,36
    a0a8:	f800283a 	ret
    a0ac:	d809883a 	mov	r4,sp
    a0b0:	00096580 	call	9658 <__lo0bits>
    a0b4:	d8c00017 	ldw	r3,0(sp)
    a0b8:	04000044 	movi	r16,1
    a0bc:	9c000415 	stw	r16,16(r19)
    a0c0:	98c00515 	stw	r3,20(r19)
    a0c4:	10800804 	addi	r2,r2,32
    a0c8:	883fe526 	beq	r17,zero,a060 <__alt_data_end+0xfffb4930>
    a0cc:	8c7ef344 	addi	r17,r17,-1075
    a0d0:	88a3883a 	add	r17,r17,r2
    a0d4:	00c00d44 	movi	r3,53
    a0d8:	a4400015 	stw	r17,0(r20)
    a0dc:	1885c83a 	sub	r2,r3,r2
    a0e0:	90800015 	stw	r2,0(r18)
    a0e4:	003fe706 	br	a084 <__alt_data_end+0xfffb4954>
    a0e8:	01000804 	movi	r4,32
    a0ec:	2089c83a 	sub	r4,r4,r2
    a0f0:	1908983a 	sll	r4,r3,r4
    a0f4:	d9400117 	ldw	r5,4(sp)
    a0f8:	1886d83a 	srl	r3,r3,r2
    a0fc:	2148b03a 	or	r4,r4,r5
    a100:	99000515 	stw	r4,20(r19)
    a104:	d8c00015 	stw	r3,0(sp)
    a108:	003fd006 	br	a04c <__alt_data_end+0xfffb491c>

0000a10c <__ratio>:
    a10c:	defff904 	addi	sp,sp,-28
    a110:	dc400315 	stw	r17,12(sp)
    a114:	2823883a 	mov	r17,r5
    a118:	d9400104 	addi	r5,sp,4
    a11c:	dfc00615 	stw	ra,24(sp)
    a120:	dcc00515 	stw	r19,20(sp)
    a124:	dc800415 	stw	r18,16(sp)
    a128:	2027883a 	mov	r19,r4
    a12c:	dc000215 	stw	r16,8(sp)
    a130:	0009eb40 	call	9eb4 <__b2d>
    a134:	8809883a 	mov	r4,r17
    a138:	d80b883a 	mov	r5,sp
    a13c:	1025883a 	mov	r18,r2
    a140:	1821883a 	mov	r16,r3
    a144:	0009eb40 	call	9eb4 <__b2d>
    a148:	8a400417 	ldw	r9,16(r17)
    a14c:	9a000417 	ldw	r8,16(r19)
    a150:	100d883a 	mov	r6,r2
    a154:	d8800017 	ldw	r2,0(sp)
    a158:	4251c83a 	sub	r8,r8,r9
    a15c:	4012917a 	slli	r9,r8,5
    a160:	da000117 	ldw	r8,4(sp)
    a164:	4091c83a 	sub	r8,r8,r2
    a168:	4251883a 	add	r8,r8,r9
    a16c:	02000d0e 	bge	zero,r8,a1a4 <__ratio+0x98>
    a170:	4010953a 	slli	r8,r8,20
    a174:	4421883a 	add	r16,r8,r16
    a178:	9009883a 	mov	r4,r18
    a17c:	800b883a 	mov	r5,r16
    a180:	180f883a 	mov	r7,r3
    a184:	000dff00 	call	dff0 <__divdf3>
    a188:	dfc00617 	ldw	ra,24(sp)
    a18c:	dcc00517 	ldw	r19,20(sp)
    a190:	dc800417 	ldw	r18,16(sp)
    a194:	dc400317 	ldw	r17,12(sp)
    a198:	dc000217 	ldw	r16,8(sp)
    a19c:	dec00704 	addi	sp,sp,28
    a1a0:	f800283a 	ret
    a1a4:	4010953a 	slli	r8,r8,20
    a1a8:	1a07c83a 	sub	r3,r3,r8
    a1ac:	003ff206 	br	a178 <__alt_data_end+0xfffb4a48>

0000a1b0 <_mprec_log10>:
    a1b0:	defffe04 	addi	sp,sp,-8
    a1b4:	dc000015 	stw	r16,0(sp)
    a1b8:	dfc00115 	stw	ra,4(sp)
    a1bc:	008005c4 	movi	r2,23
    a1c0:	2021883a 	mov	r16,r4
    a1c4:	11000d0e 	bge	r2,r4,a1fc <_mprec_log10+0x4c>
    a1c8:	0005883a 	mov	r2,zero
    a1cc:	00cffc34 	movhi	r3,16368
    a1d0:	843fffc4 	addi	r16,r16,-1
    a1d4:	1009883a 	mov	r4,r2
    a1d8:	180b883a 	mov	r5,r3
    a1dc:	000d883a 	mov	r6,zero
    a1e0:	01d00934 	movhi	r7,16420
    a1e4:	000ebb40 	call	ebb4 <__muldf3>
    a1e8:	803ff91e 	bne	r16,zero,a1d0 <__alt_data_end+0xfffb4aa0>
    a1ec:	dfc00117 	ldw	ra,4(sp)
    a1f0:	dc000017 	ldw	r16,0(sp)
    a1f4:	dec00204 	addi	sp,sp,8
    a1f8:	f800283a 	ret
    a1fc:	202090fa 	slli	r16,r4,3
    a200:	00800074 	movhi	r2,1
    a204:	108c1b04 	addi	r2,r2,12396
    a208:	1421883a 	add	r16,r2,r16
    a20c:	80800017 	ldw	r2,0(r16)
    a210:	80c00117 	ldw	r3,4(r16)
    a214:	dfc00117 	ldw	ra,4(sp)
    a218:	dc000017 	ldw	r16,0(sp)
    a21c:	dec00204 	addi	sp,sp,8
    a220:	f800283a 	ret

0000a224 <__copybits>:
    a224:	297fffc4 	addi	r5,r5,-1
    a228:	280fd17a 	srai	r7,r5,5
    a22c:	30c00417 	ldw	r3,16(r6)
    a230:	30800504 	addi	r2,r6,20
    a234:	39c00044 	addi	r7,r7,1
    a238:	18c7883a 	add	r3,r3,r3
    a23c:	39cf883a 	add	r7,r7,r7
    a240:	18c7883a 	add	r3,r3,r3
    a244:	39cf883a 	add	r7,r7,r7
    a248:	10c7883a 	add	r3,r2,r3
    a24c:	21cf883a 	add	r7,r4,r7
    a250:	10c00d2e 	bgeu	r2,r3,a288 <__copybits+0x64>
    a254:	200b883a 	mov	r5,r4
    a258:	12000017 	ldw	r8,0(r2)
    a25c:	29400104 	addi	r5,r5,4
    a260:	10800104 	addi	r2,r2,4
    a264:	2a3fff15 	stw	r8,-4(r5)
    a268:	10fffb36 	bltu	r2,r3,a258 <__alt_data_end+0xfffb4b28>
    a26c:	1985c83a 	sub	r2,r3,r6
    a270:	10bffac4 	addi	r2,r2,-21
    a274:	1004d0ba 	srli	r2,r2,2
    a278:	10800044 	addi	r2,r2,1
    a27c:	1085883a 	add	r2,r2,r2
    a280:	1085883a 	add	r2,r2,r2
    a284:	2089883a 	add	r4,r4,r2
    a288:	21c0032e 	bgeu	r4,r7,a298 <__copybits+0x74>
    a28c:	20000015 	stw	zero,0(r4)
    a290:	21000104 	addi	r4,r4,4
    a294:	21fffd36 	bltu	r4,r7,a28c <__alt_data_end+0xfffb4b5c>
    a298:	f800283a 	ret

0000a29c <__any_on>:
    a29c:	20c00417 	ldw	r3,16(r4)
    a2a0:	2805d17a 	srai	r2,r5,5
    a2a4:	21000504 	addi	r4,r4,20
    a2a8:	18800d0e 	bge	r3,r2,a2e0 <__any_on+0x44>
    a2ac:	18c7883a 	add	r3,r3,r3
    a2b0:	18c7883a 	add	r3,r3,r3
    a2b4:	20c7883a 	add	r3,r4,r3
    a2b8:	20c0192e 	bgeu	r4,r3,a320 <__any_on+0x84>
    a2bc:	18bfff17 	ldw	r2,-4(r3)
    a2c0:	18ffff04 	addi	r3,r3,-4
    a2c4:	1000041e 	bne	r2,zero,a2d8 <__any_on+0x3c>
    a2c8:	20c0142e 	bgeu	r4,r3,a31c <__any_on+0x80>
    a2cc:	18ffff04 	addi	r3,r3,-4
    a2d0:	19400017 	ldw	r5,0(r3)
    a2d4:	283ffc26 	beq	r5,zero,a2c8 <__alt_data_end+0xfffb4b98>
    a2d8:	00800044 	movi	r2,1
    a2dc:	f800283a 	ret
    a2e0:	10c00a0e 	bge	r2,r3,a30c <__any_on+0x70>
    a2e4:	1085883a 	add	r2,r2,r2
    a2e8:	1085883a 	add	r2,r2,r2
    a2ec:	294007cc 	andi	r5,r5,31
    a2f0:	2087883a 	add	r3,r4,r2
    a2f4:	283ff026 	beq	r5,zero,a2b8 <__alt_data_end+0xfffb4b88>
    a2f8:	19800017 	ldw	r6,0(r3)
    a2fc:	3144d83a 	srl	r2,r6,r5
    a300:	114a983a 	sll	r5,r2,r5
    a304:	29bff41e 	bne	r5,r6,a2d8 <__alt_data_end+0xfffb4ba8>
    a308:	003feb06 	br	a2b8 <__alt_data_end+0xfffb4b88>
    a30c:	1085883a 	add	r2,r2,r2
    a310:	1085883a 	add	r2,r2,r2
    a314:	2087883a 	add	r3,r4,r2
    a318:	003fe706 	br	a2b8 <__alt_data_end+0xfffb4b88>
    a31c:	f800283a 	ret
    a320:	0005883a 	mov	r2,zero
    a324:	f800283a 	ret

0000a328 <_realloc_r>:
    a328:	defff604 	addi	sp,sp,-40
    a32c:	dcc00315 	stw	r19,12(sp)
    a330:	dc400115 	stw	r17,4(sp)
    a334:	dfc00915 	stw	ra,36(sp)
    a338:	df000815 	stw	fp,32(sp)
    a33c:	ddc00715 	stw	r23,28(sp)
    a340:	dd800615 	stw	r22,24(sp)
    a344:	dd400515 	stw	r21,20(sp)
    a348:	dd000415 	stw	r20,16(sp)
    a34c:	dc800215 	stw	r18,8(sp)
    a350:	dc000015 	stw	r16,0(sp)
    a354:	2827883a 	mov	r19,r5
    a358:	3023883a 	mov	r17,r6
    a35c:	2800bf26 	beq	r5,zero,a65c <_realloc_r+0x334>
    a360:	2025883a 	mov	r18,r4
    a364:	00105300 	call	10530 <__malloc_lock>
    a368:	98ffff17 	ldw	r3,-4(r19)
    a36c:	01bfff04 	movi	r6,-4
    a370:	890002c4 	addi	r4,r17,11
    a374:	01c00584 	movi	r7,22
    a378:	9d7ffe04 	addi	r21,r19,-8
    a37c:	19a0703a 	and	r16,r3,r6
    a380:	39003f2e 	bgeu	r7,r4,a480 <_realloc_r+0x158>
    a384:	053ffe04 	movi	r20,-8
    a388:	2528703a 	and	r20,r4,r20
    a38c:	a00f883a 	mov	r7,r20
    a390:	a0008216 	blt	r20,zero,a59c <_realloc_r+0x274>
    a394:	a4408136 	bltu	r20,r17,a59c <_realloc_r+0x274>
    a398:	81c03c0e 	bge	r16,r7,a48c <_realloc_r+0x164>
    a39c:	07000074 	movhi	fp,1
    a3a0:	e70cbe04 	addi	fp,fp,13048
    a3a4:	e1000217 	ldw	r4,8(fp)
    a3a8:	ac05883a 	add	r2,r21,r16
    a3ac:	2080bf26 	beq	r4,r2,a6ac <_realloc_r+0x384>
    a3b0:	11000117 	ldw	r4,4(r2)
    a3b4:	023fff84 	movi	r8,-2
    a3b8:	2210703a 	and	r8,r4,r8
    a3bc:	1211883a 	add	r8,r2,r8
    a3c0:	41400117 	ldw	r5,4(r8)
    a3c4:	2940004c 	andi	r5,r5,1
    a3c8:	28004a1e 	bne	r5,zero,a4f4 <_realloc_r+0x1cc>
    a3cc:	017fff04 	movi	r5,-4
    a3d0:	2148703a 	and	r4,r4,r5
    a3d4:	2409883a 	add	r4,r4,r16
    a3d8:	21c0ad0e 	bge	r4,r7,a690 <_realloc_r+0x368>
    a3dc:	18c0004c 	andi	r3,r3,1
    a3e0:	18007f1e 	bne	r3,zero,a5e0 <_realloc_r+0x2b8>
    a3e4:	9dfffe17 	ldw	r23,-8(r19)
    a3e8:	adefc83a 	sub	r23,r21,r23
    a3ec:	bd800117 	ldw	r22,4(r23)
    a3f0:	b14a703a 	and	r5,r22,r5
    a3f4:	216d883a 	add	r22,r4,r5
    a3f8:	b1c04516 	blt	r22,r7,a510 <_realloc_r+0x1e8>
    a3fc:	10c00317 	ldw	r3,12(r2)
    a400:	10800217 	ldw	r2,8(r2)
    a404:	81bfff04 	addi	r6,r16,-4
    a408:	bc400204 	addi	r17,r23,8
    a40c:	10c00315 	stw	r3,12(r2)
    a410:	18800215 	stw	r2,8(r3)
    a414:	b9400217 	ldw	r5,8(r23)
    a418:	b8c00317 	ldw	r3,12(r23)
    a41c:	00800904 	movi	r2,36
    a420:	28c00315 	stw	r3,12(r5)
    a424:	19400215 	stw	r5,8(r3)
    a428:	1180ef36 	bltu	r2,r6,a7e8 <_realloc_r+0x4c0>
    a42c:	008004c4 	movi	r2,19
    a430:	1180da2e 	bgeu	r2,r6,a79c <_realloc_r+0x474>
    a434:	98800017 	ldw	r2,0(r19)
    a438:	b8800215 	stw	r2,8(r23)
    a43c:	98800117 	ldw	r2,4(r19)
    a440:	b8800315 	stw	r2,12(r23)
    a444:	008006c4 	movi	r2,27
    a448:	1180fc2e 	bgeu	r2,r6,a83c <_realloc_r+0x514>
    a44c:	98800217 	ldw	r2,8(r19)
    a450:	b8800415 	stw	r2,16(r23)
    a454:	98800317 	ldw	r2,12(r19)
    a458:	b8800515 	stw	r2,20(r23)
    a45c:	00800904 	movi	r2,36
    a460:	3080421e 	bne	r6,r2,a56c <_realloc_r+0x244>
    a464:	98800417 	ldw	r2,16(r19)
    a468:	9cc00604 	addi	r19,r19,24
    a46c:	b8c00804 	addi	r3,r23,32
    a470:	b8800615 	stw	r2,24(r23)
    a474:	98bfff17 	ldw	r2,-4(r19)
    a478:	b8800715 	stw	r2,28(r23)
    a47c:	00003d06 	br	a574 <_realloc_r+0x24c>
    a480:	01c00404 	movi	r7,16
    a484:	3829883a 	mov	r20,r7
    a488:	003fc206 	br	a394 <__alt_data_end+0xfffb4c64>
    a48c:	9823883a 	mov	r17,r19
    a490:	850fc83a 	sub	r7,r16,r20
    a494:	008003c4 	movi	r2,15
    a498:	18c0004c 	andi	r3,r3,1
    a49c:	11c04336 	bltu	r2,r7,a5ac <_realloc_r+0x284>
    a4a0:	1c06b03a 	or	r3,r3,r16
    a4a4:	a8c00115 	stw	r3,4(r21)
    a4a8:	ac21883a 	add	r16,r21,r16
    a4ac:	80c00117 	ldw	r3,4(r16)
    a4b0:	18c00054 	ori	r3,r3,1
    a4b4:	80c00115 	stw	r3,4(r16)
    a4b8:	9009883a 	mov	r4,r18
    a4bc:	00105500 	call	10550 <__malloc_unlock>
    a4c0:	8805883a 	mov	r2,r17
    a4c4:	dfc00917 	ldw	ra,36(sp)
    a4c8:	df000817 	ldw	fp,32(sp)
    a4cc:	ddc00717 	ldw	r23,28(sp)
    a4d0:	dd800617 	ldw	r22,24(sp)
    a4d4:	dd400517 	ldw	r21,20(sp)
    a4d8:	dd000417 	ldw	r20,16(sp)
    a4dc:	dcc00317 	ldw	r19,12(sp)
    a4e0:	dc800217 	ldw	r18,8(sp)
    a4e4:	dc400117 	ldw	r17,4(sp)
    a4e8:	dc000017 	ldw	r16,0(sp)
    a4ec:	dec00a04 	addi	sp,sp,40
    a4f0:	f800283a 	ret
    a4f4:	18c0004c 	andi	r3,r3,1
    a4f8:	1800391e 	bne	r3,zero,a5e0 <_realloc_r+0x2b8>
    a4fc:	9dfffe17 	ldw	r23,-8(r19)
    a500:	00bfff04 	movi	r2,-4
    a504:	adefc83a 	sub	r23,r21,r23
    a508:	b9400117 	ldw	r5,4(r23)
    a50c:	288a703a 	and	r5,r5,r2
    a510:	2c2d883a 	add	r22,r5,r16
    a514:	b1c03216 	blt	r22,r7,a5e0 <_realloc_r+0x2b8>
    a518:	b8800317 	ldw	r2,12(r23)
    a51c:	b8c00217 	ldw	r3,8(r23)
    a520:	81bfff04 	addi	r6,r16,-4
    a524:	01000904 	movi	r4,36
    a528:	18800315 	stw	r2,12(r3)
    a52c:	10c00215 	stw	r3,8(r2)
    a530:	bc400204 	addi	r17,r23,8
    a534:	2180ac36 	bltu	r4,r6,a7e8 <_realloc_r+0x4c0>
    a538:	008004c4 	movi	r2,19
    a53c:	1180972e 	bgeu	r2,r6,a79c <_realloc_r+0x474>
    a540:	98800017 	ldw	r2,0(r19)
    a544:	b8800215 	stw	r2,8(r23)
    a548:	98800117 	ldw	r2,4(r19)
    a54c:	b8800315 	stw	r2,12(r23)
    a550:	008006c4 	movi	r2,27
    a554:	1180b92e 	bgeu	r2,r6,a83c <_realloc_r+0x514>
    a558:	98800217 	ldw	r2,8(r19)
    a55c:	b8800415 	stw	r2,16(r23)
    a560:	98800317 	ldw	r2,12(r19)
    a564:	b8800515 	stw	r2,20(r23)
    a568:	313fbe26 	beq	r6,r4,a464 <__alt_data_end+0xfffb4d34>
    a56c:	b8c00604 	addi	r3,r23,24
    a570:	9cc00404 	addi	r19,r19,16
    a574:	98800017 	ldw	r2,0(r19)
    a578:	b021883a 	mov	r16,r22
    a57c:	b82b883a 	mov	r21,r23
    a580:	18800015 	stw	r2,0(r3)
    a584:	98800117 	ldw	r2,4(r19)
    a588:	18800115 	stw	r2,4(r3)
    a58c:	98800217 	ldw	r2,8(r19)
    a590:	18800215 	stw	r2,8(r3)
    a594:	b8c00117 	ldw	r3,4(r23)
    a598:	003fbd06 	br	a490 <__alt_data_end+0xfffb4d60>
    a59c:	00800304 	movi	r2,12
    a5a0:	90800015 	stw	r2,0(r18)
    a5a4:	0005883a 	mov	r2,zero
    a5a8:	003fc606 	br	a4c4 <__alt_data_end+0xfffb4d94>
    a5ac:	1d06b03a 	or	r3,r3,r20
    a5b0:	ad0b883a 	add	r5,r21,r20
    a5b4:	a8c00115 	stw	r3,4(r21)
    a5b8:	38800054 	ori	r2,r7,1
    a5bc:	28800115 	stw	r2,4(r5)
    a5c0:	29cf883a 	add	r7,r5,r7
    a5c4:	38800117 	ldw	r2,4(r7)
    a5c8:	9009883a 	mov	r4,r18
    a5cc:	29400204 	addi	r5,r5,8
    a5d0:	10800054 	ori	r2,r2,1
    a5d4:	38800115 	stw	r2,4(r7)
    a5d8:	00082a40 	call	82a4 <_free_r>
    a5dc:	003fb606 	br	a4b8 <__alt_data_end+0xfffb4d88>
    a5e0:	880b883a 	mov	r5,r17
    a5e4:	9009883a 	mov	r4,r18
    a5e8:	00035900 	call	3590 <_malloc_r>
    a5ec:	1023883a 	mov	r17,r2
    a5f0:	1000aa26 	beq	r2,zero,a89c <_realloc_r+0x574>
    a5f4:	98ffff17 	ldw	r3,-4(r19)
    a5f8:	113ffe04 	addi	r4,r2,-8
    a5fc:	00bfff84 	movi	r2,-2
    a600:	1884703a 	and	r2,r3,r2
    a604:	a885883a 	add	r2,r21,r2
    a608:	20808626 	beq	r4,r2,a824 <_realloc_r+0x4fc>
    a60c:	81bfff04 	addi	r6,r16,-4
    a610:	00800904 	movi	r2,36
    a614:	11807036 	bltu	r2,r6,a7d8 <_realloc_r+0x4b0>
    a618:	00c004c4 	movi	r3,19
    a61c:	19805636 	bltu	r3,r6,a778 <_realloc_r+0x450>
    a620:	8805883a 	mov	r2,r17
    a624:	9807883a 	mov	r3,r19
    a628:	19000017 	ldw	r4,0(r3)
    a62c:	11000015 	stw	r4,0(r2)
    a630:	19000117 	ldw	r4,4(r3)
    a634:	11000115 	stw	r4,4(r2)
    a638:	18c00217 	ldw	r3,8(r3)
    a63c:	10c00215 	stw	r3,8(r2)
    a640:	980b883a 	mov	r5,r19
    a644:	9009883a 	mov	r4,r18
    a648:	00082a40 	call	82a4 <_free_r>
    a64c:	9009883a 	mov	r4,r18
    a650:	00105500 	call	10550 <__malloc_unlock>
    a654:	8805883a 	mov	r2,r17
    a658:	003f9a06 	br	a4c4 <__alt_data_end+0xfffb4d94>
    a65c:	300b883a 	mov	r5,r6
    a660:	dfc00917 	ldw	ra,36(sp)
    a664:	df000817 	ldw	fp,32(sp)
    a668:	ddc00717 	ldw	r23,28(sp)
    a66c:	dd800617 	ldw	r22,24(sp)
    a670:	dd400517 	ldw	r21,20(sp)
    a674:	dd000417 	ldw	r20,16(sp)
    a678:	dcc00317 	ldw	r19,12(sp)
    a67c:	dc800217 	ldw	r18,8(sp)
    a680:	dc400117 	ldw	r17,4(sp)
    a684:	dc000017 	ldw	r16,0(sp)
    a688:	dec00a04 	addi	sp,sp,40
    a68c:	00035901 	jmpi	3590 <_malloc_r>
    a690:	11400317 	ldw	r5,12(r2)
    a694:	10800217 	ldw	r2,8(r2)
    a698:	9823883a 	mov	r17,r19
    a69c:	2021883a 	mov	r16,r4
    a6a0:	11400315 	stw	r5,12(r2)
    a6a4:	28800215 	stw	r2,8(r5)
    a6a8:	003f7906 	br	a490 <__alt_data_end+0xfffb4d60>
    a6ac:	21000117 	ldw	r4,4(r4)
    a6b0:	00bfff04 	movi	r2,-4
    a6b4:	a1800404 	addi	r6,r20,16
    a6b8:	2088703a 	and	r4,r4,r2
    a6bc:	2409883a 	add	r4,r4,r16
    a6c0:	2180380e 	bge	r4,r6,a7a4 <_realloc_r+0x47c>
    a6c4:	18c0004c 	andi	r3,r3,1
    a6c8:	183fc51e 	bne	r3,zero,a5e0 <__alt_data_end+0xfffb4eb0>
    a6cc:	9dfffe17 	ldw	r23,-8(r19)
    a6d0:	adefc83a 	sub	r23,r21,r23
    a6d4:	b9400117 	ldw	r5,4(r23)
    a6d8:	288a703a 	and	r5,r5,r2
    a6dc:	216d883a 	add	r22,r4,r5
    a6e0:	b1bf8b16 	blt	r22,r6,a510 <__alt_data_end+0xfffb4de0>
    a6e4:	b8800317 	ldw	r2,12(r23)
    a6e8:	b8c00217 	ldw	r3,8(r23)
    a6ec:	81bfff04 	addi	r6,r16,-4
    a6f0:	01000904 	movi	r4,36
    a6f4:	18800315 	stw	r2,12(r3)
    a6f8:	10c00215 	stw	r3,8(r2)
    a6fc:	bc400204 	addi	r17,r23,8
    a700:	21805a36 	bltu	r4,r6,a86c <_realloc_r+0x544>
    a704:	008004c4 	movi	r2,19
    a708:	1180562e 	bgeu	r2,r6,a864 <_realloc_r+0x53c>
    a70c:	98800017 	ldw	r2,0(r19)
    a710:	b8800215 	stw	r2,8(r23)
    a714:	98800117 	ldw	r2,4(r19)
    a718:	b8800315 	stw	r2,12(r23)
    a71c:	008006c4 	movi	r2,27
    a720:	11805636 	bltu	r2,r6,a87c <_realloc_r+0x554>
    a724:	b8800404 	addi	r2,r23,16
    a728:	9cc00204 	addi	r19,r19,8
    a72c:	98c00017 	ldw	r3,0(r19)
    a730:	10c00015 	stw	r3,0(r2)
    a734:	98c00117 	ldw	r3,4(r19)
    a738:	10c00115 	stw	r3,4(r2)
    a73c:	98c00217 	ldw	r3,8(r19)
    a740:	10c00215 	stw	r3,8(r2)
    a744:	bd07883a 	add	r3,r23,r20
    a748:	b505c83a 	sub	r2,r22,r20
    a74c:	e0c00215 	stw	r3,8(fp)
    a750:	10800054 	ori	r2,r2,1
    a754:	18800115 	stw	r2,4(r3)
    a758:	b8800117 	ldw	r2,4(r23)
    a75c:	9009883a 	mov	r4,r18
    a760:	1080004c 	andi	r2,r2,1
    a764:	a0a8b03a 	or	r20,r20,r2
    a768:	bd000115 	stw	r20,4(r23)
    a76c:	00105500 	call	10550 <__malloc_unlock>
    a770:	8805883a 	mov	r2,r17
    a774:	003f5306 	br	a4c4 <__alt_data_end+0xfffb4d94>
    a778:	98c00017 	ldw	r3,0(r19)
    a77c:	88c00015 	stw	r3,0(r17)
    a780:	98c00117 	ldw	r3,4(r19)
    a784:	88c00115 	stw	r3,4(r17)
    a788:	00c006c4 	movi	r3,27
    a78c:	19801d36 	bltu	r3,r6,a804 <_realloc_r+0x4dc>
    a790:	88800204 	addi	r2,r17,8
    a794:	98c00204 	addi	r3,r19,8
    a798:	003fa306 	br	a628 <__alt_data_end+0xfffb4ef8>
    a79c:	8807883a 	mov	r3,r17
    a7a0:	003f7406 	br	a574 <__alt_data_end+0xfffb4e44>
    a7a4:	ad2b883a 	add	r21,r21,r20
    a7a8:	2505c83a 	sub	r2,r4,r20
    a7ac:	e5400215 	stw	r21,8(fp)
    a7b0:	10800054 	ori	r2,r2,1
    a7b4:	a8800115 	stw	r2,4(r21)
    a7b8:	98bfff17 	ldw	r2,-4(r19)
    a7bc:	9009883a 	mov	r4,r18
    a7c0:	1080004c 	andi	r2,r2,1
    a7c4:	a0a8b03a 	or	r20,r20,r2
    a7c8:	9d3fff15 	stw	r20,-4(r19)
    a7cc:	00105500 	call	10550 <__malloc_unlock>
    a7d0:	9805883a 	mov	r2,r19
    a7d4:	003f3b06 	br	a4c4 <__alt_data_end+0xfffb4d94>
    a7d8:	8809883a 	mov	r4,r17
    a7dc:	980b883a 	mov	r5,r19
    a7e0:	00090600 	call	9060 <memmove>
    a7e4:	003f9606 	br	a640 <__alt_data_end+0xfffb4f10>
    a7e8:	8809883a 	mov	r4,r17
    a7ec:	980b883a 	mov	r5,r19
    a7f0:	00090600 	call	9060 <memmove>
    a7f4:	b8c00117 	ldw	r3,4(r23)
    a7f8:	b021883a 	mov	r16,r22
    a7fc:	b82b883a 	mov	r21,r23
    a800:	003f2306 	br	a490 <__alt_data_end+0xfffb4d60>
    a804:	98c00217 	ldw	r3,8(r19)
    a808:	88c00215 	stw	r3,8(r17)
    a80c:	98c00317 	ldw	r3,12(r19)
    a810:	88c00315 	stw	r3,12(r17)
    a814:	30800c26 	beq	r6,r2,a848 <_realloc_r+0x520>
    a818:	88800404 	addi	r2,r17,16
    a81c:	98c00404 	addi	r3,r19,16
    a820:	003f8106 	br	a628 <__alt_data_end+0xfffb4ef8>
    a824:	893fff17 	ldw	r4,-4(r17)
    a828:	00bfff04 	movi	r2,-4
    a82c:	9823883a 	mov	r17,r19
    a830:	2084703a 	and	r2,r4,r2
    a834:	80a1883a 	add	r16,r16,r2
    a838:	003f1506 	br	a490 <__alt_data_end+0xfffb4d60>
    a83c:	b8c00404 	addi	r3,r23,16
    a840:	9cc00204 	addi	r19,r19,8
    a844:	003f4b06 	br	a574 <__alt_data_end+0xfffb4e44>
    a848:	99000417 	ldw	r4,16(r19)
    a84c:	88800604 	addi	r2,r17,24
    a850:	98c00604 	addi	r3,r19,24
    a854:	89000415 	stw	r4,16(r17)
    a858:	99000517 	ldw	r4,20(r19)
    a85c:	89000515 	stw	r4,20(r17)
    a860:	003f7106 	br	a628 <__alt_data_end+0xfffb4ef8>
    a864:	8805883a 	mov	r2,r17
    a868:	003fb006 	br	a72c <__alt_data_end+0xfffb4ffc>
    a86c:	8809883a 	mov	r4,r17
    a870:	980b883a 	mov	r5,r19
    a874:	00090600 	call	9060 <memmove>
    a878:	003fb206 	br	a744 <__alt_data_end+0xfffb5014>
    a87c:	98800217 	ldw	r2,8(r19)
    a880:	b8800415 	stw	r2,16(r23)
    a884:	98800317 	ldw	r2,12(r19)
    a888:	b8800515 	stw	r2,20(r23)
    a88c:	31000726 	beq	r6,r4,a8ac <_realloc_r+0x584>
    a890:	b8800604 	addi	r2,r23,24
    a894:	9cc00404 	addi	r19,r19,16
    a898:	003fa406 	br	a72c <__alt_data_end+0xfffb4ffc>
    a89c:	9009883a 	mov	r4,r18
    a8a0:	00105500 	call	10550 <__malloc_unlock>
    a8a4:	0005883a 	mov	r2,zero
    a8a8:	003f0606 	br	a4c4 <__alt_data_end+0xfffb4d94>
    a8ac:	98c00417 	ldw	r3,16(r19)
    a8b0:	9cc00604 	addi	r19,r19,24
    a8b4:	b8800804 	addi	r2,r23,32
    a8b8:	b8c00615 	stw	r3,24(r23)
    a8bc:	98ffff17 	ldw	r3,-4(r19)
    a8c0:	b8c00715 	stw	r3,28(r23)
    a8c4:	003f9906 	br	a72c <__alt_data_end+0xfffb4ffc>

0000a8c8 <__fpclassifyd>:
    a8c8:	00a00034 	movhi	r2,32768
    a8cc:	10bfffc4 	addi	r2,r2,-1
    a8d0:	2884703a 	and	r2,r5,r2
    a8d4:	10000726 	beq	r2,zero,a8f4 <__fpclassifyd+0x2c>
    a8d8:	00fffc34 	movhi	r3,65520
    a8dc:	019ff834 	movhi	r6,32736
    a8e0:	28c7883a 	add	r3,r5,r3
    a8e4:	31bfffc4 	addi	r6,r6,-1
    a8e8:	30c00536 	bltu	r6,r3,a900 <__fpclassifyd+0x38>
    a8ec:	00800104 	movi	r2,4
    a8f0:	f800283a 	ret
    a8f4:	2000021e 	bne	r4,zero,a900 <__fpclassifyd+0x38>
    a8f8:	00800084 	movi	r2,2
    a8fc:	f800283a 	ret
    a900:	00dffc34 	movhi	r3,32752
    a904:	019ff834 	movhi	r6,32736
    a908:	28cb883a 	add	r5,r5,r3
    a90c:	31bfffc4 	addi	r6,r6,-1
    a910:	317ff62e 	bgeu	r6,r5,a8ec <__alt_data_end+0xfffb51bc>
    a914:	01400434 	movhi	r5,16
    a918:	297fffc4 	addi	r5,r5,-1
    a91c:	28800236 	bltu	r5,r2,a928 <__fpclassifyd+0x60>
    a920:	008000c4 	movi	r2,3
    a924:	f800283a 	ret
    a928:	10c00226 	beq	r2,r3,a934 <__fpclassifyd+0x6c>
    a92c:	0005883a 	mov	r2,zero
    a930:	f800283a 	ret
    a934:	2005003a 	cmpeq	r2,r4,zero
    a938:	f800283a 	ret

0000a93c <__sread>:
    a93c:	defffe04 	addi	sp,sp,-8
    a940:	dc000015 	stw	r16,0(sp)
    a944:	2821883a 	mov	r16,r5
    a948:	2940038f 	ldh	r5,14(r5)
    a94c:	dfc00115 	stw	ra,4(sp)
    a950:	000c5f80 	call	c5f8 <_read_r>
    a954:	10000716 	blt	r2,zero,a974 <__sread+0x38>
    a958:	80c01417 	ldw	r3,80(r16)
    a95c:	1887883a 	add	r3,r3,r2
    a960:	80c01415 	stw	r3,80(r16)
    a964:	dfc00117 	ldw	ra,4(sp)
    a968:	dc000017 	ldw	r16,0(sp)
    a96c:	dec00204 	addi	sp,sp,8
    a970:	f800283a 	ret
    a974:	80c0030b 	ldhu	r3,12(r16)
    a978:	18fbffcc 	andi	r3,r3,61439
    a97c:	80c0030d 	sth	r3,12(r16)
    a980:	dfc00117 	ldw	ra,4(sp)
    a984:	dc000017 	ldw	r16,0(sp)
    a988:	dec00204 	addi	sp,sp,8
    a98c:	f800283a 	ret

0000a990 <__seofread>:
    a990:	0005883a 	mov	r2,zero
    a994:	f800283a 	ret

0000a998 <__swrite>:
    a998:	2880030b 	ldhu	r2,12(r5)
    a99c:	defffb04 	addi	sp,sp,-20
    a9a0:	dcc00315 	stw	r19,12(sp)
    a9a4:	dc800215 	stw	r18,8(sp)
    a9a8:	dc400115 	stw	r17,4(sp)
    a9ac:	dc000015 	stw	r16,0(sp)
    a9b0:	dfc00415 	stw	ra,16(sp)
    a9b4:	10c0400c 	andi	r3,r2,256
    a9b8:	2821883a 	mov	r16,r5
    a9bc:	2027883a 	mov	r19,r4
    a9c0:	3025883a 	mov	r18,r6
    a9c4:	3823883a 	mov	r17,r7
    a9c8:	18000526 	beq	r3,zero,a9e0 <__swrite+0x48>
    a9cc:	2940038f 	ldh	r5,14(r5)
    a9d0:	000d883a 	mov	r6,zero
    a9d4:	01c00084 	movi	r7,2
    a9d8:	000c59c0 	call	c59c <_lseek_r>
    a9dc:	8080030b 	ldhu	r2,12(r16)
    a9e0:	8140038f 	ldh	r5,14(r16)
    a9e4:	10bbffcc 	andi	r2,r2,61439
    a9e8:	9809883a 	mov	r4,r19
    a9ec:	900d883a 	mov	r6,r18
    a9f0:	880f883a 	mov	r7,r17
    a9f4:	8080030d 	sth	r2,12(r16)
    a9f8:	dfc00417 	ldw	ra,16(sp)
    a9fc:	dcc00317 	ldw	r19,12(sp)
    aa00:	dc800217 	ldw	r18,8(sp)
    aa04:	dc400117 	ldw	r17,4(sp)
    aa08:	dc000017 	ldw	r16,0(sp)
    aa0c:	dec00504 	addi	sp,sp,20
    aa10:	000c0781 	jmpi	c078 <_write_r>

0000aa14 <__sseek>:
    aa14:	defffe04 	addi	sp,sp,-8
    aa18:	dc000015 	stw	r16,0(sp)
    aa1c:	2821883a 	mov	r16,r5
    aa20:	2940038f 	ldh	r5,14(r5)
    aa24:	dfc00115 	stw	ra,4(sp)
    aa28:	000c59c0 	call	c59c <_lseek_r>
    aa2c:	00ffffc4 	movi	r3,-1
    aa30:	10c00826 	beq	r2,r3,aa54 <__sseek+0x40>
    aa34:	80c0030b 	ldhu	r3,12(r16)
    aa38:	80801415 	stw	r2,80(r16)
    aa3c:	18c40014 	ori	r3,r3,4096
    aa40:	80c0030d 	sth	r3,12(r16)
    aa44:	dfc00117 	ldw	ra,4(sp)
    aa48:	dc000017 	ldw	r16,0(sp)
    aa4c:	dec00204 	addi	sp,sp,8
    aa50:	f800283a 	ret
    aa54:	80c0030b 	ldhu	r3,12(r16)
    aa58:	18fbffcc 	andi	r3,r3,61439
    aa5c:	80c0030d 	sth	r3,12(r16)
    aa60:	dfc00117 	ldw	ra,4(sp)
    aa64:	dc000017 	ldw	r16,0(sp)
    aa68:	dec00204 	addi	sp,sp,8
    aa6c:	f800283a 	ret

0000aa70 <__sclose>:
    aa70:	2940038f 	ldh	r5,14(r5)
    aa74:	000c0d41 	jmpi	c0d4 <_close_r>

0000aa78 <strcmp>:
    aa78:	2144b03a 	or	r2,r4,r5
    aa7c:	108000cc 	andi	r2,r2,3
    aa80:	1000171e 	bne	r2,zero,aae0 <strcmp+0x68>
    aa84:	20800017 	ldw	r2,0(r4)
    aa88:	28c00017 	ldw	r3,0(r5)
    aa8c:	10c0141e 	bne	r2,r3,aae0 <strcmp+0x68>
    aa90:	027fbff4 	movhi	r9,65279
    aa94:	4a7fbfc4 	addi	r9,r9,-257
    aa98:	0086303a 	nor	r3,zero,r2
    aa9c:	02202074 	movhi	r8,32897
    aaa0:	1245883a 	add	r2,r2,r9
    aaa4:	42202004 	addi	r8,r8,-32640
    aaa8:	10c4703a 	and	r2,r2,r3
    aaac:	1204703a 	and	r2,r2,r8
    aab0:	10000226 	beq	r2,zero,aabc <strcmp+0x44>
    aab4:	00001706 	br	ab14 <strcmp+0x9c>
    aab8:	1000161e 	bne	r2,zero,ab14 <strcmp+0x9c>
    aabc:	21000104 	addi	r4,r4,4
    aac0:	20c00017 	ldw	r3,0(r4)
    aac4:	29400104 	addi	r5,r5,4
    aac8:	29800017 	ldw	r6,0(r5)
    aacc:	1a4f883a 	add	r7,r3,r9
    aad0:	00c4303a 	nor	r2,zero,r3
    aad4:	3884703a 	and	r2,r7,r2
    aad8:	1204703a 	and	r2,r2,r8
    aadc:	19bff626 	beq	r3,r6,aab8 <__alt_data_end+0xfffb5388>
    aae0:	20800007 	ldb	r2,0(r4)
    aae4:	1000051e 	bne	r2,zero,aafc <strcmp+0x84>
    aae8:	00000606 	br	ab04 <strcmp+0x8c>
    aaec:	21000044 	addi	r4,r4,1
    aaf0:	20800007 	ldb	r2,0(r4)
    aaf4:	29400044 	addi	r5,r5,1
    aaf8:	10000226 	beq	r2,zero,ab04 <strcmp+0x8c>
    aafc:	28c00007 	ldb	r3,0(r5)
    ab00:	10fffa26 	beq	r2,r3,aaec <__alt_data_end+0xfffb53bc>
    ab04:	20800003 	ldbu	r2,0(r4)
    ab08:	28c00003 	ldbu	r3,0(r5)
    ab0c:	10c5c83a 	sub	r2,r2,r3
    ab10:	f800283a 	ret
    ab14:	0005883a 	mov	r2,zero
    ab18:	f800283a 	ret

0000ab1c <__sprint_r.part.0>:
    ab1c:	28801917 	ldw	r2,100(r5)
    ab20:	defff604 	addi	sp,sp,-40
    ab24:	dd400515 	stw	r21,20(sp)
    ab28:	dcc00315 	stw	r19,12(sp)
    ab2c:	dfc00915 	stw	ra,36(sp)
    ab30:	df000815 	stw	fp,32(sp)
    ab34:	ddc00715 	stw	r23,28(sp)
    ab38:	dd800615 	stw	r22,24(sp)
    ab3c:	dd000415 	stw	r20,16(sp)
    ab40:	dc800215 	stw	r18,8(sp)
    ab44:	dc400115 	stw	r17,4(sp)
    ab48:	dc000015 	stw	r16,0(sp)
    ab4c:	1088000c 	andi	r2,r2,8192
    ab50:	2827883a 	mov	r19,r5
    ab54:	302b883a 	mov	r21,r6
    ab58:	10002d26 	beq	r2,zero,ac10 <__sprint_r.part.0+0xf4>
    ab5c:	30800217 	ldw	r2,8(r6)
    ab60:	35800017 	ldw	r22,0(r6)
    ab64:	10002826 	beq	r2,zero,ac08 <__sprint_r.part.0+0xec>
    ab68:	2029883a 	mov	r20,r4
    ab6c:	b5c00104 	addi	r23,r22,4
    ab70:	04bfffc4 	movi	r18,-1
    ab74:	bc400017 	ldw	r17,0(r23)
    ab78:	b4000017 	ldw	r16,0(r22)
    ab7c:	0039883a 	mov	fp,zero
    ab80:	8822d0ba 	srli	r17,r17,2
    ab84:	04400316 	blt	zero,r17,ab94 <__sprint_r.part.0+0x78>
    ab88:	00001706 	br	abe8 <__sprint_r.part.0+0xcc>
    ab8c:	84000104 	addi	r16,r16,4
    ab90:	8f001526 	beq	r17,fp,abe8 <__sprint_r.part.0+0xcc>
    ab94:	81400017 	ldw	r5,0(r16)
    ab98:	a009883a 	mov	r4,r20
    ab9c:	980d883a 	mov	r6,r19
    aba0:	000c3140 	call	c314 <_fputwc_r>
    aba4:	e7000044 	addi	fp,fp,1
    aba8:	14bff81e 	bne	r2,r18,ab8c <__alt_data_end+0xfffb545c>
    abac:	9005883a 	mov	r2,r18
    abb0:	a8000215 	stw	zero,8(r21)
    abb4:	a8000115 	stw	zero,4(r21)
    abb8:	dfc00917 	ldw	ra,36(sp)
    abbc:	df000817 	ldw	fp,32(sp)
    abc0:	ddc00717 	ldw	r23,28(sp)
    abc4:	dd800617 	ldw	r22,24(sp)
    abc8:	dd400517 	ldw	r21,20(sp)
    abcc:	dd000417 	ldw	r20,16(sp)
    abd0:	dcc00317 	ldw	r19,12(sp)
    abd4:	dc800217 	ldw	r18,8(sp)
    abd8:	dc400117 	ldw	r17,4(sp)
    abdc:	dc000017 	ldw	r16,0(sp)
    abe0:	dec00a04 	addi	sp,sp,40
    abe4:	f800283a 	ret
    abe8:	a8c00217 	ldw	r3,8(r21)
    abec:	8c63883a 	add	r17,r17,r17
    abf0:	8c63883a 	add	r17,r17,r17
    abf4:	1c45c83a 	sub	r2,r3,r17
    abf8:	a8800215 	stw	r2,8(r21)
    abfc:	b5800204 	addi	r22,r22,8
    ac00:	bdc00204 	addi	r23,r23,8
    ac04:	103fdb1e 	bne	r2,zero,ab74 <__alt_data_end+0xfffb5444>
    ac08:	0005883a 	mov	r2,zero
    ac0c:	003fe806 	br	abb0 <__alt_data_end+0xfffb5480>
    ac10:	00085940 	call	8594 <__sfvwrite_r>
    ac14:	003fe606 	br	abb0 <__alt_data_end+0xfffb5480>

0000ac18 <__sprint_r>:
    ac18:	30c00217 	ldw	r3,8(r6)
    ac1c:	18000126 	beq	r3,zero,ac24 <__sprint_r+0xc>
    ac20:	000ab1c1 	jmpi	ab1c <__sprint_r.part.0>
    ac24:	30000115 	stw	zero,4(r6)
    ac28:	0005883a 	mov	r2,zero
    ac2c:	f800283a 	ret

0000ac30 <___vfiprintf_internal_r>:
    ac30:	defeca04 	addi	sp,sp,-1240
    ac34:	dcc12f15 	stw	r19,1212(sp)
    ac38:	dfc13515 	stw	ra,1236(sp)
    ac3c:	df013415 	stw	fp,1232(sp)
    ac40:	ddc13315 	stw	r23,1228(sp)
    ac44:	dd813215 	stw	r22,1224(sp)
    ac48:	dd413115 	stw	r21,1220(sp)
    ac4c:	dd013015 	stw	r20,1216(sp)
    ac50:	dc812e15 	stw	r18,1208(sp)
    ac54:	dc412d15 	stw	r17,1204(sp)
    ac58:	dc012c15 	stw	r16,1200(sp)
    ac5c:	d9012115 	stw	r4,1156(sp)
    ac60:	d9412015 	stw	r5,1152(sp)
    ac64:	d9c12315 	stw	r7,1164(sp)
    ac68:	3027883a 	mov	r19,r6
    ac6c:	20000226 	beq	r4,zero,ac78 <___vfiprintf_internal_r+0x48>
    ac70:	20800e17 	ldw	r2,56(r4)
    ac74:	1000f726 	beq	r2,zero,b054 <___vfiprintf_internal_r+0x424>
    ac78:	d8812017 	ldw	r2,1152(sp)
    ac7c:	10c0030b 	ldhu	r3,12(r2)
    ac80:	1908000c 	andi	r4,r3,8192
    ac84:	1805883a 	mov	r2,r3
    ac88:	2000081e 	bne	r4,zero,acac <___vfiprintf_internal_r+0x7c>
    ac8c:	d9412017 	ldw	r5,1152(sp)
    ac90:	18880014 	ori	r2,r3,8192
    ac94:	00f7ffc4 	movi	r3,-8193
    ac98:	29001917 	ldw	r4,100(r5)
    ac9c:	2880030d 	sth	r2,12(r5)
    aca0:	20c8703a 	and	r4,r4,r3
    aca4:	29001915 	stw	r4,100(r5)
    aca8:	1007883a 	mov	r3,r2
    acac:	1100020c 	andi	r4,r2,8
    acb0:	2000a726 	beq	r4,zero,af50 <___vfiprintf_internal_r+0x320>
    acb4:	d9412017 	ldw	r5,1152(sp)
    acb8:	29000417 	ldw	r4,16(r5)
    acbc:	2000a426 	beq	r4,zero,af50 <___vfiprintf_internal_r+0x320>
    acc0:	1080068c 	andi	r2,r2,26
    acc4:	01000284 	movi	r4,10
    acc8:	1100ab26 	beq	r2,r4,af78 <___vfiprintf_internal_r+0x348>
    accc:	d9010a04 	addi	r4,sp,1064
    acd0:	d94109c4 	addi	r5,sp,1063
    acd4:	07000074 	movhi	fp,1
    acd8:	04400074 	movhi	r17,1
    acdc:	2145c83a 	sub	r2,r4,r5
    ace0:	e70c5104 	addi	fp,fp,12612
    ace4:	8c4c4d04 	addi	r17,r17,12596
    ace8:	d9011e15 	stw	r4,1144(sp)
    acec:	d9411f15 	stw	r5,1148(sp)
    acf0:	dec11a15 	stw	sp,1128(sp)
    acf4:	d8011c15 	stw	zero,1136(sp)
    acf8:	d8011b15 	stw	zero,1132(sp)
    acfc:	d8012715 	stw	zero,1180(sp)
    ad00:	d8012515 	stw	zero,1172(sp)
    ad04:	d811883a 	mov	r8,sp
    ad08:	d8812815 	stw	r2,1184(sp)
    ad0c:	982f883a 	mov	r23,r19
    ad10:	b8800007 	ldb	r2,0(r23)
    ad14:	1003b026 	beq	r2,zero,bbd8 <___vfiprintf_internal_r+0xfa8>
    ad18:	01000944 	movi	r4,37
    ad1c:	1103ae26 	beq	r2,r4,bbd8 <___vfiprintf_internal_r+0xfa8>
    ad20:	b805883a 	mov	r2,r23
    ad24:	00000106 	br	ad2c <___vfiprintf_internal_r+0xfc>
    ad28:	19000326 	beq	r3,r4,ad38 <___vfiprintf_internal_r+0x108>
    ad2c:	10800044 	addi	r2,r2,1
    ad30:	10c00007 	ldb	r3,0(r2)
    ad34:	183ffc1e 	bne	r3,zero,ad28 <__alt_data_end+0xfffb55f8>
    ad38:	15e1c83a 	sub	r16,r2,r23
    ad3c:	1029883a 	mov	r20,r2
    ad40:	80001026 	beq	r16,zero,ad84 <___vfiprintf_internal_r+0x154>
    ad44:	d8c11c17 	ldw	r3,1136(sp)
    ad48:	d8811b17 	ldw	r2,1132(sp)
    ad4c:	45c00015 	stw	r23,0(r8)
    ad50:	80c7883a 	add	r3,r16,r3
    ad54:	10800044 	addi	r2,r2,1
    ad58:	44000115 	stw	r16,4(r8)
    ad5c:	d8c11c15 	stw	r3,1136(sp)
    ad60:	d8811b15 	stw	r2,1132(sp)
    ad64:	010001c4 	movi	r4,7
    ad68:	2080740e 	bge	r4,r2,af3c <___vfiprintf_internal_r+0x30c>
    ad6c:	1803a71e 	bne	r3,zero,bc0c <___vfiprintf_internal_r+0xfdc>
    ad70:	d8c12517 	ldw	r3,1172(sp)
    ad74:	d8011b15 	stw	zero,1132(sp)
    ad78:	d811883a 	mov	r8,sp
    ad7c:	1c07883a 	add	r3,r3,r16
    ad80:	d8c12515 	stw	r3,1172(sp)
    ad84:	a0800007 	ldb	r2,0(r20)
    ad88:	1002bf26 	beq	r2,zero,b888 <___vfiprintf_internal_r+0xc58>
    ad8c:	a5c00044 	addi	r23,r20,1
    ad90:	a1800047 	ldb	r6,1(r20)
    ad94:	d8011d85 	stb	zero,1142(sp)
    ad98:	d8012205 	stb	zero,1160(sp)
    ad9c:	043fffc4 	movi	r16,-1
    ada0:	d8012415 	stw	zero,1168(sp)
    ada4:	0025883a 	mov	r18,zero
    ada8:	05001604 	movi	r20,88
    adac:	05400244 	movi	r21,9
    adb0:	4027883a 	mov	r19,r8
    adb4:	bdc00044 	addi	r23,r23,1
    adb8:	30bff804 	addi	r2,r6,-32
    adbc:	a0825636 	bltu	r20,r2,b718 <___vfiprintf_internal_r+0xae8>
    adc0:	100490ba 	slli	r2,r2,2
    adc4:	01000074 	movhi	r4,1
    adc8:	212b7604 	addi	r4,r4,-21032
    adcc:	1105883a 	add	r2,r2,r4
    add0:	10800017 	ldw	r2,0(r2)
    add4:	1000683a 	jmp	r2
    add8:	0000b6a8 	cmpgeui	zero,zero,730
    addc:	0000b718 	cmpnei	zero,zero,732
    ade0:	0000b718 	cmpnei	zero,zero,732
    ade4:	0000b70c 	andi	zero,zero,732
    ade8:	0000b718 	cmpnei	zero,zero,732
    adec:	0000b718 	cmpnei	zero,zero,732
    adf0:	0000b718 	cmpnei	zero,zero,732
    adf4:	0000b718 	cmpnei	zero,zero,732
    adf8:	0000b718 	cmpnei	zero,zero,732
    adfc:	0000b718 	cmpnei	zero,zero,732
    ae00:	0000b498 	cmpnei	zero,zero,722
    ae04:	0000b6c0 	call	b6c <setup_keyboard+0x4cc>
    ae08:	0000b718 	cmpnei	zero,zero,732
    ae0c:	0000b06c 	andhi	zero,zero,705
    ae10:	0000b4bc 	xorhi	zero,zero,722
    ae14:	0000b718 	cmpnei	zero,zero,732
    ae18:	0000b078 	rdprs	zero,zero,705
    ae1c:	0000b084 	movi	zero,706
    ae20:	0000b084 	movi	zero,706
    ae24:	0000b084 	movi	zero,706
    ae28:	0000b084 	movi	zero,706
    ae2c:	0000b084 	movi	zero,706
    ae30:	0000b084 	movi	zero,706
    ae34:	0000b084 	movi	zero,706
    ae38:	0000b084 	movi	zero,706
    ae3c:	0000b084 	movi	zero,706
    ae40:	0000b718 	cmpnei	zero,zero,732
    ae44:	0000b718 	cmpnei	zero,zero,732
    ae48:	0000b718 	cmpnei	zero,zero,732
    ae4c:	0000b718 	cmpnei	zero,zero,732
    ae50:	0000b718 	cmpnei	zero,zero,732
    ae54:	0000b718 	cmpnei	zero,zero,732
    ae58:	0000b718 	cmpnei	zero,zero,732
    ae5c:	0000b718 	cmpnei	zero,zero,732
    ae60:	0000b718 	cmpnei	zero,zero,732
    ae64:	0000b718 	cmpnei	zero,zero,732
    ae68:	0000b0c4 	movi	zero,707
    ae6c:	0000b718 	cmpnei	zero,zero,732
    ae70:	0000b718 	cmpnei	zero,zero,732
    ae74:	0000b718 	cmpnei	zero,zero,732
    ae78:	0000b718 	cmpnei	zero,zero,732
    ae7c:	0000b718 	cmpnei	zero,zero,732
    ae80:	0000b718 	cmpnei	zero,zero,732
    ae84:	0000b718 	cmpnei	zero,zero,732
    ae88:	0000b718 	cmpnei	zero,zero,732
    ae8c:	0000b718 	cmpnei	zero,zero,732
    ae90:	0000b718 	cmpnei	zero,zero,732
    ae94:	0000b3b4 	movhi	zero,718
    ae98:	0000b718 	cmpnei	zero,zero,732
    ae9c:	0000b718 	cmpnei	zero,zero,732
    aea0:	0000b718 	cmpnei	zero,zero,732
    aea4:	0000b718 	cmpnei	zero,zero,732
    aea8:	0000b718 	cmpnei	zero,zero,732
    aeac:	0000b3f4 	movhi	zero,719
    aeb0:	0000b718 	cmpnei	zero,zero,732
    aeb4:	0000b718 	cmpnei	zero,zero,732
    aeb8:	0000b438 	rdprs	zero,zero,720
    aebc:	0000b718 	cmpnei	zero,zero,732
    aec0:	0000b718 	cmpnei	zero,zero,732
    aec4:	0000b718 	cmpnei	zero,zero,732
    aec8:	0000b718 	cmpnei	zero,zero,732
    aecc:	0000b718 	cmpnei	zero,zero,732
    aed0:	0000b718 	cmpnei	zero,zero,732
    aed4:	0000b718 	cmpnei	zero,zero,732
    aed8:	0000b718 	cmpnei	zero,zero,732
    aedc:	0000b718 	cmpnei	zero,zero,732
    aee0:	0000b718 	cmpnei	zero,zero,732
    aee4:	0000b380 	call	b38 <setup_keyboard+0x498>
    aee8:	0000b6d0 	cmplti	zero,zero,731
    aeec:	0000b718 	cmpnei	zero,zero,732
    aef0:	0000b718 	cmpnei	zero,zero,732
    aef4:	0000b718 	cmpnei	zero,zero,732
    aef8:	0000b50c 	andi	zero,zero,724
    aefc:	0000b6d0 	cmplti	zero,zero,731
    af00:	0000b718 	cmpnei	zero,zero,732
    af04:	0000b718 	cmpnei	zero,zero,732
    af08:	0000b424 	muli	zero,zero,720
    af0c:	0000b718 	cmpnei	zero,zero,732
    af10:	0000b670 	cmpltui	zero,zero,729
    af14:	0000b5f8 	rdprs	zero,zero,727
    af18:	0000b62c 	andhi	zero,zero,728
    af1c:	0000b518 	cmpnei	zero,zero,724
    af20:	0000b718 	cmpnei	zero,zero,732
    af24:	0000b524 	muli	zero,zero,724
    af28:	0000b718 	cmpnei	zero,zero,732
    af2c:	0000b580 	call	b58 <setup_keyboard+0x4b8>
    af30:	0000b718 	cmpnei	zero,zero,732
    af34:	0000b718 	cmpnei	zero,zero,732
    af38:	0000b5b4 	movhi	zero,726
    af3c:	42000204 	addi	r8,r8,8
    af40:	d8c12517 	ldw	r3,1172(sp)
    af44:	1c07883a 	add	r3,r3,r16
    af48:	d8c12515 	stw	r3,1172(sp)
    af4c:	003f8d06 	br	ad84 <__alt_data_end+0xfffb5654>
    af50:	d9012117 	ldw	r4,1156(sp)
    af54:	d9412017 	ldw	r5,1152(sp)
    af58:	00060f40 	call	60f4 <__swsetup_r>
    af5c:	1000301e 	bne	r2,zero,b020 <___vfiprintf_internal_r+0x3f0>
    af60:	d8812017 	ldw	r2,1152(sp)
    af64:	01000284 	movi	r4,10
    af68:	10c0030b 	ldhu	r3,12(r2)
    af6c:	1805883a 	mov	r2,r3
    af70:	1080068c 	andi	r2,r2,26
    af74:	113f551e 	bne	r2,r4,accc <__alt_data_end+0xfffb559c>
    af78:	d9012017 	ldw	r4,1152(sp)
    af7c:	2080038b 	ldhu	r2,14(r4)
    af80:	113fffcc 	andi	r4,r2,65535
    af84:	2120001c 	xori	r4,r4,32768
    af88:	21200004 	addi	r4,r4,-32768
    af8c:	203f4f16 	blt	r4,zero,accc <__alt_data_end+0xfffb559c>
    af90:	d9412017 	ldw	r5,1152(sp)
    af94:	d9012117 	ldw	r4,1156(sp)
    af98:	d9c12317 	ldw	r7,1164(sp)
    af9c:	2b001917 	ldw	r12,100(r5)
    afa0:	2ac00717 	ldw	r11,28(r5)
    afa4:	2a800917 	ldw	r10,36(r5)
    afa8:	02010004 	movi	r8,1024
    afac:	18ffff4c 	andi	r3,r3,65533
    afb0:	da0b883a 	add	r5,sp,r8
    afb4:	980d883a 	mov	r6,r19
    afb8:	d8c1030d 	sth	r3,1036(sp)
    afbc:	db011915 	stw	r12,1124(sp)
    afc0:	d881038d 	sth	r2,1038(sp)
    afc4:	dac10715 	stw	r11,1052(sp)
    afc8:	da810915 	stw	r10,1060(sp)
    afcc:	dec10015 	stw	sp,1024(sp)
    afd0:	dec10415 	stw	sp,1040(sp)
    afd4:	da010215 	stw	r8,1032(sp)
    afd8:	da010515 	stw	r8,1044(sp)
    afdc:	d8010615 	stw	zero,1048(sp)
    afe0:	000ac300 	call	ac30 <___vfiprintf_internal_r>
    afe4:	1021883a 	mov	r16,r2
    afe8:	10000416 	blt	r2,zero,affc <___vfiprintf_internal_r+0x3cc>
    afec:	d9012117 	ldw	r4,1156(sp)
    aff0:	d9410004 	addi	r5,sp,1024
    aff4:	0007b740 	call	7b74 <_fflush_r>
    aff8:	10040f1e 	bne	r2,zero,c038 <___vfiprintf_internal_r+0x1408>
    affc:	d881030b 	ldhu	r2,1036(sp)
    b000:	1080100c 	andi	r2,r2,64
    b004:	10000426 	beq	r2,zero,b018 <___vfiprintf_internal_r+0x3e8>
    b008:	d8c12017 	ldw	r3,1152(sp)
    b00c:	1880030b 	ldhu	r2,12(r3)
    b010:	10801014 	ori	r2,r2,64
    b014:	1880030d 	sth	r2,12(r3)
    b018:	8005883a 	mov	r2,r16
    b01c:	00000106 	br	b024 <___vfiprintf_internal_r+0x3f4>
    b020:	00bfffc4 	movi	r2,-1
    b024:	dfc13517 	ldw	ra,1236(sp)
    b028:	df013417 	ldw	fp,1232(sp)
    b02c:	ddc13317 	ldw	r23,1228(sp)
    b030:	dd813217 	ldw	r22,1224(sp)
    b034:	dd413117 	ldw	r21,1220(sp)
    b038:	dd013017 	ldw	r20,1216(sp)
    b03c:	dcc12f17 	ldw	r19,1212(sp)
    b040:	dc812e17 	ldw	r18,1208(sp)
    b044:	dc412d17 	ldw	r17,1204(sp)
    b048:	dc012c17 	ldw	r16,1200(sp)
    b04c:	dec13604 	addi	sp,sp,1240
    b050:	f800283a 	ret
    b054:	00081300 	call	8130 <__sinit>
    b058:	003f0706 	br	ac78 <__alt_data_end+0xfffb5548>
    b05c:	d8c12417 	ldw	r3,1168(sp)
    b060:	d8812315 	stw	r2,1164(sp)
    b064:	00c7c83a 	sub	r3,zero,r3
    b068:	d8c12415 	stw	r3,1168(sp)
    b06c:	94800114 	ori	r18,r18,4
    b070:	b9800007 	ldb	r6,0(r23)
    b074:	003f4f06 	br	adb4 <__alt_data_end+0xfffb5684>
    b078:	94802014 	ori	r18,r18,128
    b07c:	b9800007 	ldb	r6,0(r23)
    b080:	003f4c06 	br	adb4 <__alt_data_end+0xfffb5684>
    b084:	dc012615 	stw	r16,1176(sp)
    b088:	d8012415 	stw	zero,1168(sp)
    b08c:	35bff404 	addi	r22,r6,-48
    b090:	0009883a 	mov	r4,zero
    b094:	b821883a 	mov	r16,r23
    b098:	01400284 	movi	r5,10
    b09c:	000d72c0 	call	d72c <__mulsi3>
    b0a0:	81800007 	ldb	r6,0(r16)
    b0a4:	1589883a 	add	r4,r2,r22
    b0a8:	bdc00044 	addi	r23,r23,1
    b0ac:	35bff404 	addi	r22,r6,-48
    b0b0:	b821883a 	mov	r16,r23
    b0b4:	adbff82e 	bgeu	r21,r22,b098 <__alt_data_end+0xfffb5968>
    b0b8:	d9012415 	stw	r4,1168(sp)
    b0bc:	dc012617 	ldw	r16,1176(sp)
    b0c0:	003f3d06 	br	adb8 <__alt_data_end+0xfffb5688>
    b0c4:	d8c12203 	ldbu	r3,1160(sp)
    b0c8:	94800414 	ori	r18,r18,16
    b0cc:	9080080c 	andi	r2,r18,32
    b0d0:	d8c11d85 	stb	r3,1142(sp)
    b0d4:	9811883a 	mov	r8,r19
    b0d8:	d8c12317 	ldw	r3,1164(sp)
    b0dc:	10018226 	beq	r2,zero,b6e8 <___vfiprintf_internal_r+0xab8>
    b0e0:	d9012317 	ldw	r4,1164(sp)
    b0e4:	18800117 	ldw	r2,4(r3)
    b0e8:	1cc00017 	ldw	r19,0(r3)
    b0ec:	21000204 	addi	r4,r4,8
    b0f0:	d9012315 	stw	r4,1164(sp)
    b0f4:	102b883a 	mov	r21,r2
    b0f8:	10030016 	blt	r2,zero,bcfc <___vfiprintf_internal_r+0x10cc>
    b0fc:	dd811d83 	ldbu	r22,1142(sp)
    b100:	8029883a 	mov	r20,r16
    b104:	00800044 	movi	r2,1
    b108:	9d46b03a 	or	r3,r19,r21
    b10c:	80000216 	blt	r16,zero,b118 <___vfiprintf_internal_r+0x4e8>
    b110:	013fdfc4 	movi	r4,-129
    b114:	9124703a 	and	r18,r18,r4
    b118:	1801b41e 	bne	r3,zero,b7ec <___vfiprintf_internal_r+0xbbc>
    b11c:	80028126 	beq	r16,zero,bb24 <___vfiprintf_internal_r+0xef4>
    b120:	10803fcc 	andi	r2,r2,255
    b124:	00c00044 	movi	r3,1
    b128:	10c1d126 	beq	r2,r3,b870 <___vfiprintf_internal_r+0xc40>
    b12c:	00c00084 	movi	r3,2
    b130:	10c28626 	beq	r2,r3,bb4c <___vfiprintf_internal_r+0xf1c>
    b134:	d8c10a04 	addi	r3,sp,1064
    b138:	9808d0fa 	srli	r4,r19,3
    b13c:	a80a977a 	slli	r5,r21,29
    b140:	a82ad0fa 	srli	r21,r21,3
    b144:	9cc001cc 	andi	r19,r19,7
    b148:	98800c04 	addi	r2,r19,48
    b14c:	18ffffc4 	addi	r3,r3,-1
    b150:	2926b03a 	or	r19,r5,r4
    b154:	18800005 	stb	r2,0(r3)
    b158:	9d48b03a 	or	r4,r19,r21
    b15c:	203ff61e 	bne	r4,zero,b138 <__alt_data_end+0xfffb5a08>
    b160:	9100004c 	andi	r4,r18,1
    b164:	d8c12215 	stw	r3,1160(sp)
    b168:	2002b31e 	bne	r4,zero,bc38 <___vfiprintf_internal_r+0x1008>
    b16c:	d9411e17 	ldw	r5,1144(sp)
    b170:	28e9c83a 	sub	r20,r5,r3
    b174:	a02b883a 	mov	r21,r20
    b178:	a400010e 	bge	r20,r16,b180 <___vfiprintf_internal_r+0x550>
    b17c:	802b883a 	mov	r21,r16
    b180:	b5803fcc 	andi	r22,r22,255
    b184:	b580201c 	xori	r22,r22,128
    b188:	b5bfe004 	addi	r22,r22,-128
    b18c:	b0000126 	beq	r22,zero,b194 <___vfiprintf_internal_r+0x564>
    b190:	ad400044 	addi	r21,r21,1
    b194:	9280008c 	andi	r10,r18,2
    b198:	50000126 	beq	r10,zero,b1a0 <___vfiprintf_internal_r+0x570>
    b19c:	ad400084 	addi	r21,r21,2
    b1a0:	9580210c 	andi	r22,r18,132
    b1a4:	b001751e 	bne	r22,zero,b77c <___vfiprintf_internal_r+0xb4c>
    b1a8:	d9012417 	ldw	r4,1168(sp)
    b1ac:	2567c83a 	sub	r19,r4,r21
    b1b0:	04c1720e 	bge	zero,r19,b77c <___vfiprintf_internal_r+0xb4c>
    b1b4:	01c00404 	movi	r7,16
    b1b8:	d8c11c17 	ldw	r3,1136(sp)
    b1bc:	3cc36b0e 	bge	r7,r19,bf6c <___vfiprintf_internal_r+0x133c>
    b1c0:	00800074 	movhi	r2,1
    b1c4:	108c5104 	addi	r2,r2,12612
    b1c8:	dc012915 	stw	r16,1188(sp)
    b1cc:	d9011b17 	ldw	r4,1132(sp)
    b1d0:	9821883a 	mov	r16,r19
    b1d4:	d8812615 	stw	r2,1176(sp)
    b1d8:	030001c4 	movi	r12,7
    b1dc:	5027883a 	mov	r19,r10
    b1e0:	00000506 	br	b1f8 <___vfiprintf_internal_r+0x5c8>
    b1e4:	21400084 	addi	r5,r4,2
    b1e8:	42000204 	addi	r8,r8,8
    b1ec:	1009883a 	mov	r4,r2
    b1f0:	843ffc04 	addi	r16,r16,-16
    b1f4:	3c000d0e 	bge	r7,r16,b22c <___vfiprintf_internal_r+0x5fc>
    b1f8:	18c00404 	addi	r3,r3,16
    b1fc:	20800044 	addi	r2,r4,1
    b200:	47000015 	stw	fp,0(r8)
    b204:	41c00115 	stw	r7,4(r8)
    b208:	d8c11c15 	stw	r3,1136(sp)
    b20c:	d8811b15 	stw	r2,1132(sp)
    b210:	60bff40e 	bge	r12,r2,b1e4 <__alt_data_end+0xfffb5ab4>
    b214:	18014b1e 	bne	r3,zero,b744 <___vfiprintf_internal_r+0xb14>
    b218:	843ffc04 	addi	r16,r16,-16
    b21c:	0009883a 	mov	r4,zero
    b220:	01400044 	movi	r5,1
    b224:	d811883a 	mov	r8,sp
    b228:	3c3ff316 	blt	r7,r16,b1f8 <__alt_data_end+0xfffb5ac8>
    b22c:	9815883a 	mov	r10,r19
    b230:	8027883a 	mov	r19,r16
    b234:	dc012917 	ldw	r16,1188(sp)
    b238:	d9012617 	ldw	r4,1176(sp)
    b23c:	98c7883a 	add	r3,r19,r3
    b240:	44c00115 	stw	r19,4(r8)
    b244:	41000015 	stw	r4,0(r8)
    b248:	d8c11c15 	stw	r3,1136(sp)
    b24c:	d9411b15 	stw	r5,1132(sp)
    b250:	008001c4 	movi	r2,7
    b254:	11425116 	blt	r2,r5,bb9c <___vfiprintf_internal_r+0xf6c>
    b258:	d9011d87 	ldb	r4,1142(sp)
    b25c:	42000204 	addi	r8,r8,8
    b260:	28800044 	addi	r2,r5,1
    b264:	20014a1e 	bne	r4,zero,b790 <___vfiprintf_internal_r+0xb60>
    b268:	50000c26 	beq	r10,zero,b29c <___vfiprintf_internal_r+0x66c>
    b26c:	d9011d04 	addi	r4,sp,1140
    b270:	18c00084 	addi	r3,r3,2
    b274:	41000015 	stw	r4,0(r8)
    b278:	01000084 	movi	r4,2
    b27c:	41000115 	stw	r4,4(r8)
    b280:	d8c11c15 	stw	r3,1136(sp)
    b284:	d8811b15 	stw	r2,1132(sp)
    b288:	010001c4 	movi	r4,7
    b28c:	20822016 	blt	r4,r2,bb10 <___vfiprintf_internal_r+0xee0>
    b290:	100b883a 	mov	r5,r2
    b294:	42000204 	addi	r8,r8,8
    b298:	10800044 	addi	r2,r2,1
    b29c:	01002004 	movi	r4,128
    b2a0:	b101de26 	beq	r22,r4,ba1c <___vfiprintf_internal_r+0xdec>
    b2a4:	8521c83a 	sub	r16,r16,r20
    b2a8:	0400230e 	bge	zero,r16,b338 <___vfiprintf_internal_r+0x708>
    b2ac:	04c00404 	movi	r19,16
    b2b0:	9c030d0e 	bge	r19,r16,bee8 <___vfiprintf_internal_r+0x12b8>
    b2b4:	00800074 	movhi	r2,1
    b2b8:	108c4d04 	addi	r2,r2,12596
    b2bc:	d8812615 	stw	r2,1176(sp)
    b2c0:	058001c4 	movi	r22,7
    b2c4:	00000506 	br	b2dc <___vfiprintf_internal_r+0x6ac>
    b2c8:	28800084 	addi	r2,r5,2
    b2cc:	42000204 	addi	r8,r8,8
    b2d0:	200b883a 	mov	r5,r4
    b2d4:	843ffc04 	addi	r16,r16,-16
    b2d8:	9c000d0e 	bge	r19,r16,b310 <___vfiprintf_internal_r+0x6e0>
    b2dc:	18c00404 	addi	r3,r3,16
    b2e0:	29000044 	addi	r4,r5,1
    b2e4:	44400015 	stw	r17,0(r8)
    b2e8:	44c00115 	stw	r19,4(r8)
    b2ec:	d8c11c15 	stw	r3,1136(sp)
    b2f0:	d9011b15 	stw	r4,1132(sp)
    b2f4:	b13ff40e 	bge	r22,r4,b2c8 <__alt_data_end+0xfffb5b98>
    b2f8:	1801321e 	bne	r3,zero,b7c4 <___vfiprintf_internal_r+0xb94>
    b2fc:	843ffc04 	addi	r16,r16,-16
    b300:	000b883a 	mov	r5,zero
    b304:	00800044 	movi	r2,1
    b308:	d811883a 	mov	r8,sp
    b30c:	9c3ff316 	blt	r19,r16,b2dc <__alt_data_end+0xfffb5bac>
    b310:	d9012617 	ldw	r4,1176(sp)
    b314:	1c07883a 	add	r3,r3,r16
    b318:	44000115 	stw	r16,4(r8)
    b31c:	41000015 	stw	r4,0(r8)
    b320:	d8c11c15 	stw	r3,1136(sp)
    b324:	d8811b15 	stw	r2,1132(sp)
    b328:	010001c4 	movi	r4,7
    b32c:	20816216 	blt	r4,r2,b8b8 <___vfiprintf_internal_r+0xc88>
    b330:	42000204 	addi	r8,r8,8
    b334:	10800044 	addi	r2,r2,1
    b338:	d9012217 	ldw	r4,1160(sp)
    b33c:	1d07883a 	add	r3,r3,r20
    b340:	45000115 	stw	r20,4(r8)
    b344:	41000015 	stw	r4,0(r8)
    b348:	d8c11c15 	stw	r3,1136(sp)
    b34c:	d8811b15 	stw	r2,1132(sp)
    b350:	010001c4 	movi	r4,7
    b354:	2081610e 	bge	r4,r2,b8dc <___vfiprintf_internal_r+0xcac>
    b358:	1802211e 	bne	r3,zero,bbe0 <___vfiprintf_internal_r+0xfb0>
    b35c:	d8011b15 	stw	zero,1132(sp)
    b360:	9480010c 	andi	r18,r18,4
    b364:	9002171e 	bne	r18,zero,bbc4 <___vfiprintf_internal_r+0xf94>
    b368:	d9412417 	ldw	r5,1168(sp)
    b36c:	a9433716 	blt	r21,r5,c04c <___vfiprintf_internal_r+0x141c>
    b370:	d8812517 	ldw	r2,1172(sp)
    b374:	1545883a 	add	r2,r2,r21
    b378:	d8812515 	stw	r2,1172(sp)
    b37c:	00019a06 	br	b9e8 <___vfiprintf_internal_r+0xdb8>
    b380:	d8c12317 	ldw	r3,1164(sp)
    b384:	05400044 	movi	r21,1
    b388:	9811883a 	mov	r8,r19
    b38c:	18800017 	ldw	r2,0(r3)
    b390:	18c00104 	addi	r3,r3,4
    b394:	d8c12315 	stw	r3,1164(sp)
    b398:	d8c10004 	addi	r3,sp,1024
    b39c:	d8011d85 	stb	zero,1142(sp)
    b3a0:	d8810005 	stb	r2,1024(sp)
    b3a4:	a829883a 	mov	r20,r21
    b3a8:	d8c12215 	stw	r3,1160(sp)
    b3ac:	0021883a 	mov	r16,zero
    b3b0:	003f7806 	br	b194 <__alt_data_end+0xfffb5a64>
    b3b4:	94800414 	ori	r18,r18,16
    b3b8:	9080080c 	andi	r2,r18,32
    b3bc:	9811883a 	mov	r8,r19
    b3c0:	10009026 	beq	r2,zero,b604 <___vfiprintf_internal_r+0x9d4>
    b3c4:	d8812317 	ldw	r2,1164(sp)
    b3c8:	d8c12317 	ldw	r3,1164(sp)
    b3cc:	14c00017 	ldw	r19,0(r2)
    b3d0:	15400117 	ldw	r21,4(r2)
    b3d4:	18c00204 	addi	r3,r3,8
    b3d8:	d8c12315 	stw	r3,1164(sp)
    b3dc:	0005883a 	mov	r2,zero
    b3e0:	9d46b03a 	or	r3,r19,r21
    b3e4:	d8011d85 	stb	zero,1142(sp)
    b3e8:	8029883a 	mov	r20,r16
    b3ec:	002d883a 	mov	r22,zero
    b3f0:	003f4606 	br	b10c <__alt_data_end+0xfffb59dc>
    b3f4:	94800414 	ori	r18,r18,16
    b3f8:	9080080c 	andi	r2,r18,32
    b3fc:	9811883a 	mov	r8,r19
    b400:	10006226 	beq	r2,zero,b58c <___vfiprintf_internal_r+0x95c>
    b404:	d9012317 	ldw	r4,1164(sp)
    b408:	00800044 	movi	r2,1
    b40c:	24c00017 	ldw	r19,0(r4)
    b410:	25400117 	ldw	r21,4(r4)
    b414:	21000204 	addi	r4,r4,8
    b418:	d9012315 	stw	r4,1164(sp)
    b41c:	9d46b03a 	or	r3,r19,r21
    b420:	003ff006 	br	b3e4 <__alt_data_end+0xfffb5cb4>
    b424:	b9800007 	ldb	r6,0(r23)
    b428:	00801b04 	movi	r2,108
    b42c:	3082b226 	beq	r6,r2,bef8 <___vfiprintf_internal_r+0x12c8>
    b430:	94800414 	ori	r18,r18,16
    b434:	003e5f06 	br	adb4 <__alt_data_end+0xfffb5684>
    b438:	d8c12203 	ldbu	r3,1160(sp)
    b43c:	01000074 	movhi	r4,1
    b440:	210be704 	addi	r4,r4,12188
    b444:	d8c11d85 	stb	r3,1142(sp)
    b448:	d9012715 	stw	r4,1180(sp)
    b44c:	90c0080c 	andi	r3,r18,32
    b450:	9811883a 	mov	r8,r19
    b454:	d8812317 	ldw	r2,1164(sp)
    b458:	18005f26 	beq	r3,zero,b5d8 <___vfiprintf_internal_r+0x9a8>
    b45c:	d9012317 	ldw	r4,1164(sp)
    b460:	14c00017 	ldw	r19,0(r2)
    b464:	15400117 	ldw	r21,4(r2)
    b468:	21000204 	addi	r4,r4,8
    b46c:	d9012315 	stw	r4,1164(sp)
    b470:	9080004c 	andi	r2,r18,1
    b474:	1001e226 	beq	r2,zero,bc00 <___vfiprintf_internal_r+0xfd0>
    b478:	9d46b03a 	or	r3,r19,r21
    b47c:	18024e26 	beq	r3,zero,bdb8 <___vfiprintf_internal_r+0x1188>
    b480:	00800c04 	movi	r2,48
    b484:	d8811d05 	stb	r2,1140(sp)
    b488:	d9811d45 	stb	r6,1141(sp)
    b48c:	94800094 	ori	r18,r18,2
    b490:	00800084 	movi	r2,2
    b494:	003fd306 	br	b3e4 <__alt_data_end+0xfffb5cb4>
    b498:	d9012317 	ldw	r4,1164(sp)
    b49c:	d9412317 	ldw	r5,1164(sp)
    b4a0:	21000017 	ldw	r4,0(r4)
    b4a4:	28800104 	addi	r2,r5,4
    b4a8:	d9012415 	stw	r4,1168(sp)
    b4ac:	203eeb16 	blt	r4,zero,b05c <__alt_data_end+0xfffb592c>
    b4b0:	d8812315 	stw	r2,1164(sp)
    b4b4:	b9800007 	ldb	r6,0(r23)
    b4b8:	003e3e06 	br	adb4 <__alt_data_end+0xfffb5684>
    b4bc:	b9800007 	ldb	r6,0(r23)
    b4c0:	01000a84 	movi	r4,42
    b4c4:	b8800044 	addi	r2,r23,1
    b4c8:	3102d226 	beq	r6,r4,c014 <___vfiprintf_internal_r+0x13e4>
    b4cc:	35bff404 	addi	r22,r6,-48
    b4d0:	102f883a 	mov	r23,r2
    b4d4:	0021883a 	mov	r16,zero
    b4d8:	adbe3736 	bltu	r21,r22,adb8 <__alt_data_end+0xfffb5688>
    b4dc:	0009883a 	mov	r4,zero
    b4e0:	01400284 	movi	r5,10
    b4e4:	000d72c0 	call	d72c <__mulsi3>
    b4e8:	b9800007 	ldb	r6,0(r23)
    b4ec:	b089883a 	add	r4,r22,r2
    b4f0:	bdc00044 	addi	r23,r23,1
    b4f4:	35bff404 	addi	r22,r6,-48
    b4f8:	adbff92e 	bgeu	r21,r22,b4e0 <__alt_data_end+0xfffb5db0>
    b4fc:	2021883a 	mov	r16,r4
    b500:	203e2d0e 	bge	r4,zero,adb8 <__alt_data_end+0xfffb5688>
    b504:	043fffc4 	movi	r16,-1
    b508:	003e2b06 	br	adb8 <__alt_data_end+0xfffb5688>
    b50c:	94801014 	ori	r18,r18,64
    b510:	b9800007 	ldb	r6,0(r23)
    b514:	003e2706 	br	adb4 <__alt_data_end+0xfffb5684>
    b518:	94800814 	ori	r18,r18,32
    b51c:	b9800007 	ldb	r6,0(r23)
    b520:	003e2406 	br	adb4 <__alt_data_end+0xfffb5684>
    b524:	d9412317 	ldw	r5,1164(sp)
    b528:	d8812317 	ldw	r2,1164(sp)
    b52c:	d8011d85 	stb	zero,1142(sp)
    b530:	29400017 	ldw	r5,0(r5)
    b534:	9811883a 	mov	r8,r19
    b538:	14c00104 	addi	r19,r2,4
    b53c:	d9412215 	stw	r5,1160(sp)
    b540:	28029026 	beq	r5,zero,bf84 <___vfiprintf_internal_r+0x1354>
    b544:	d9012217 	ldw	r4,1160(sp)
    b548:	80027616 	blt	r16,zero,bf24 <___vfiprintf_internal_r+0x12f4>
    b54c:	000b883a 	mov	r5,zero
    b550:	800d883a 	mov	r6,r16
    b554:	da012a15 	stw	r8,1192(sp)
    b558:	0008e400 	call	8e40 <memchr>
    b55c:	da012a17 	ldw	r8,1192(sp)
    b560:	1002a026 	beq	r2,zero,bfe4 <___vfiprintf_internal_r+0x13b4>
    b564:	d8c12217 	ldw	r3,1160(sp)
    b568:	10e9c83a 	sub	r20,r2,r3
    b56c:	85023816 	blt	r16,r20,be50 <___vfiprintf_internal_r+0x1220>
    b570:	dd811d83 	ldbu	r22,1142(sp)
    b574:	dcc12315 	stw	r19,1164(sp)
    b578:	0021883a 	mov	r16,zero
    b57c:	003efd06 	br	b174 <__alt_data_end+0xfffb5a44>
    b580:	9080080c 	andi	r2,r18,32
    b584:	9811883a 	mov	r8,r19
    b588:	103f9e1e 	bne	r2,zero,b404 <__alt_data_end+0xfffb5cd4>
    b58c:	9080040c 	andi	r2,r18,16
    b590:	10021726 	beq	r2,zero,bdf0 <___vfiprintf_internal_r+0x11c0>
    b594:	d9412317 	ldw	r5,1164(sp)
    b598:	002b883a 	mov	r21,zero
    b59c:	00800044 	movi	r2,1
    b5a0:	2cc00017 	ldw	r19,0(r5)
    b5a4:	29400104 	addi	r5,r5,4
    b5a8:	d9412315 	stw	r5,1164(sp)
    b5ac:	9807883a 	mov	r3,r19
    b5b0:	003f8c06 	br	b3e4 <__alt_data_end+0xfffb5cb4>
    b5b4:	d8c12203 	ldbu	r3,1160(sp)
    b5b8:	01000074 	movhi	r4,1
    b5bc:	210bec04 	addi	r4,r4,12208
    b5c0:	d8c11d85 	stb	r3,1142(sp)
    b5c4:	d9012715 	stw	r4,1180(sp)
    b5c8:	90c0080c 	andi	r3,r18,32
    b5cc:	9811883a 	mov	r8,r19
    b5d0:	d8812317 	ldw	r2,1164(sp)
    b5d4:	183fa11e 	bne	r3,zero,b45c <__alt_data_end+0xfffb5d2c>
    b5d8:	90c0040c 	andi	r3,r18,16
    b5dc:	1801e526 	beq	r3,zero,bd74 <___vfiprintf_internal_r+0x1144>
    b5e0:	d9412317 	ldw	r5,1164(sp)
    b5e4:	14c00017 	ldw	r19,0(r2)
    b5e8:	002b883a 	mov	r21,zero
    b5ec:	29400104 	addi	r5,r5,4
    b5f0:	d9412315 	stw	r5,1164(sp)
    b5f4:	003f9e06 	br	b470 <__alt_data_end+0xfffb5d40>
    b5f8:	9080080c 	andi	r2,r18,32
    b5fc:	9811883a 	mov	r8,r19
    b600:	103f701e 	bne	r2,zero,b3c4 <__alt_data_end+0xfffb5c94>
    b604:	9080040c 	andi	r2,r18,16
    b608:	1001ef26 	beq	r2,zero,bdc8 <___vfiprintf_internal_r+0x1198>
    b60c:	d9012317 	ldw	r4,1164(sp)
    b610:	002b883a 	mov	r21,zero
    b614:	0005883a 	mov	r2,zero
    b618:	24c00017 	ldw	r19,0(r4)
    b61c:	21000104 	addi	r4,r4,4
    b620:	d9012315 	stw	r4,1164(sp)
    b624:	9807883a 	mov	r3,r19
    b628:	003f6e06 	br	b3e4 <__alt_data_end+0xfffb5cb4>
    b62c:	d8c12317 	ldw	r3,1164(sp)
    b630:	9811883a 	mov	r8,r19
    b634:	00800c04 	movi	r2,48
    b638:	1cc00017 	ldw	r19,0(r3)
    b63c:	01000074 	movhi	r4,1
    b640:	18c00104 	addi	r3,r3,4
    b644:	d8811d05 	stb	r2,1140(sp)
    b648:	210bec04 	addi	r4,r4,12208
    b64c:	00801e04 	movi	r2,120
    b650:	d8811d45 	stb	r2,1141(sp)
    b654:	d8c12315 	stw	r3,1164(sp)
    b658:	002b883a 	mov	r21,zero
    b65c:	94800094 	ori	r18,r18,2
    b660:	d9012715 	stw	r4,1180(sp)
    b664:	00800084 	movi	r2,2
    b668:	9807883a 	mov	r3,r19
    b66c:	003f5d06 	br	b3e4 <__alt_data_end+0xfffb5cb4>
    b670:	d8c12203 	ldbu	r3,1160(sp)
    b674:	9080080c 	andi	r2,r18,32
    b678:	9811883a 	mov	r8,r19
    b67c:	d8c11d85 	stb	r3,1142(sp)
    b680:	1001b126 	beq	r2,zero,bd48 <___vfiprintf_internal_r+0x1118>
    b684:	d9012317 	ldw	r4,1164(sp)
    b688:	d9412517 	ldw	r5,1172(sp)
    b68c:	20800017 	ldw	r2,0(r4)
    b690:	2807d7fa 	srai	r3,r5,31
    b694:	21000104 	addi	r4,r4,4
    b698:	d9012315 	stw	r4,1164(sp)
    b69c:	11400015 	stw	r5,0(r2)
    b6a0:	10c00115 	stw	r3,4(r2)
    b6a4:	003d9a06 	br	ad10 <__alt_data_end+0xfffb55e0>
    b6a8:	d8812207 	ldb	r2,1160(sp)
    b6ac:	1001c41e 	bne	r2,zero,bdc0 <___vfiprintf_internal_r+0x1190>
    b6b0:	00c00804 	movi	r3,32
    b6b4:	d8c12205 	stb	r3,1160(sp)
    b6b8:	b9800007 	ldb	r6,0(r23)
    b6bc:	003dbd06 	br	adb4 <__alt_data_end+0xfffb5684>
    b6c0:	00c00ac4 	movi	r3,43
    b6c4:	d8c12205 	stb	r3,1160(sp)
    b6c8:	b9800007 	ldb	r6,0(r23)
    b6cc:	003db906 	br	adb4 <__alt_data_end+0xfffb5684>
    b6d0:	d8c12203 	ldbu	r3,1160(sp)
    b6d4:	9080080c 	andi	r2,r18,32
    b6d8:	9811883a 	mov	r8,r19
    b6dc:	d8c11d85 	stb	r3,1142(sp)
    b6e0:	d8c12317 	ldw	r3,1164(sp)
    b6e4:	103e7e1e 	bne	r2,zero,b0e0 <__alt_data_end+0xfffb59b0>
    b6e8:	9080040c 	andi	r2,r18,16
    b6ec:	1001a926 	beq	r2,zero,bd94 <___vfiprintf_internal_r+0x1164>
    b6f0:	1cc00017 	ldw	r19,0(r3)
    b6f4:	d9412317 	ldw	r5,1164(sp)
    b6f8:	982bd7fa 	srai	r21,r19,31
    b6fc:	29400104 	addi	r5,r5,4
    b700:	d9412315 	stw	r5,1164(sp)
    b704:	a805883a 	mov	r2,r21
    b708:	003e7b06 	br	b0f8 <__alt_data_end+0xfffb59c8>
    b70c:	94800054 	ori	r18,r18,1
    b710:	b9800007 	ldb	r6,0(r23)
    b714:	003da706 	br	adb4 <__alt_data_end+0xfffb5684>
    b718:	d8c12203 	ldbu	r3,1160(sp)
    b71c:	9811883a 	mov	r8,r19
    b720:	d8c11d85 	stb	r3,1142(sp)
    b724:	30005826 	beq	r6,zero,b888 <___vfiprintf_internal_r+0xc58>
    b728:	05400044 	movi	r21,1
    b72c:	d8c10004 	addi	r3,sp,1024
    b730:	d9810005 	stb	r6,1024(sp)
    b734:	d8011d85 	stb	zero,1142(sp)
    b738:	a829883a 	mov	r20,r21
    b73c:	d8c12215 	stw	r3,1160(sp)
    b740:	003f1a06 	br	b3ac <__alt_data_end+0xfffb5c7c>
    b744:	d9012117 	ldw	r4,1156(sp)
    b748:	d9412017 	ldw	r5,1152(sp)
    b74c:	d9811a04 	addi	r6,sp,1128
    b750:	d9c12a15 	stw	r7,1192(sp)
    b754:	db012b15 	stw	r12,1196(sp)
    b758:	000ab1c0 	call	ab1c <__sprint_r.part.0>
    b75c:	d9c12a17 	ldw	r7,1192(sp)
    b760:	db012b17 	ldw	r12,1196(sp)
    b764:	10004e1e 	bne	r2,zero,b8a0 <___vfiprintf_internal_r+0xc70>
    b768:	d9011b17 	ldw	r4,1132(sp)
    b76c:	d8c11c17 	ldw	r3,1136(sp)
    b770:	d811883a 	mov	r8,sp
    b774:	21400044 	addi	r5,r4,1
    b778:	003e9d06 	br	b1f0 <__alt_data_end+0xfffb5ac0>
    b77c:	d9411b17 	ldw	r5,1132(sp)
    b780:	d8c11c17 	ldw	r3,1136(sp)
    b784:	28800044 	addi	r2,r5,1
    b788:	d9011d87 	ldb	r4,1142(sp)
    b78c:	203eb626 	beq	r4,zero,b268 <__alt_data_end+0xfffb5b38>
    b790:	01000044 	movi	r4,1
    b794:	d9411d84 	addi	r5,sp,1142
    b798:	1907883a 	add	r3,r3,r4
    b79c:	41400015 	stw	r5,0(r8)
    b7a0:	41000115 	stw	r4,4(r8)
    b7a4:	d8c11c15 	stw	r3,1136(sp)
    b7a8:	d8811b15 	stw	r2,1132(sp)
    b7ac:	014001c4 	movi	r5,7
    b7b0:	2880ce16 	blt	r5,r2,baec <___vfiprintf_internal_r+0xebc>
    b7b4:	100b883a 	mov	r5,r2
    b7b8:	42000204 	addi	r8,r8,8
    b7bc:	10800044 	addi	r2,r2,1
    b7c0:	003ea906 	br	b268 <__alt_data_end+0xfffb5b38>
    b7c4:	d9012117 	ldw	r4,1156(sp)
    b7c8:	d9412017 	ldw	r5,1152(sp)
    b7cc:	d9811a04 	addi	r6,sp,1128
    b7d0:	000ab1c0 	call	ab1c <__sprint_r.part.0>
    b7d4:	1000321e 	bne	r2,zero,b8a0 <___vfiprintf_internal_r+0xc70>
    b7d8:	d9411b17 	ldw	r5,1132(sp)
    b7dc:	d8c11c17 	ldw	r3,1136(sp)
    b7e0:	d811883a 	mov	r8,sp
    b7e4:	28800044 	addi	r2,r5,1
    b7e8:	003eba06 	br	b2d4 <__alt_data_end+0xfffb5ba4>
    b7ec:	10803fcc 	andi	r2,r2,255
    b7f0:	00c00044 	movi	r3,1
    b7f4:	10fe4d1e 	bne	r2,r3,b12c <__alt_data_end+0xfffb59fc>
    b7f8:	a800021e 	bne	r21,zero,b804 <___vfiprintf_internal_r+0xbd4>
    b7fc:	00800244 	movi	r2,9
    b800:	14c01b2e 	bgeu	r2,r19,b870 <___vfiprintf_internal_r+0xc40>
    b804:	dc012215 	stw	r16,1160(sp)
    b808:	dd010a04 	addi	r20,sp,1064
    b80c:	a821883a 	mov	r16,r21
    b810:	402b883a 	mov	r21,r8
    b814:	9809883a 	mov	r4,r19
    b818:	800b883a 	mov	r5,r16
    b81c:	01800284 	movi	r6,10
    b820:	000f883a 	mov	r7,zero
    b824:	000d1100 	call	d110 <__umoddi3>
    b828:	10800c04 	addi	r2,r2,48
    b82c:	a53fffc4 	addi	r20,r20,-1
    b830:	9809883a 	mov	r4,r19
    b834:	800b883a 	mov	r5,r16
    b838:	01800284 	movi	r6,10
    b83c:	000f883a 	mov	r7,zero
    b840:	a0800005 	stb	r2,0(r20)
    b844:	000cad00 	call	cad0 <__udivdi3>
    b848:	1027883a 	mov	r19,r2
    b84c:	10c4b03a 	or	r2,r2,r3
    b850:	1821883a 	mov	r16,r3
    b854:	103fef1e 	bne	r2,zero,b814 <__alt_data_end+0xfffb60e4>
    b858:	d9011e17 	ldw	r4,1144(sp)
    b85c:	dc012217 	ldw	r16,1160(sp)
    b860:	a811883a 	mov	r8,r21
    b864:	dd012215 	stw	r20,1160(sp)
    b868:	2529c83a 	sub	r20,r4,r20
    b86c:	003e4106 	br	b174 <__alt_data_end+0xfffb5a44>
    b870:	9cc00c04 	addi	r19,r19,48
    b874:	d8c109c4 	addi	r3,sp,1063
    b878:	dcc109c5 	stb	r19,1063(sp)
    b87c:	dd012817 	ldw	r20,1184(sp)
    b880:	d8c12215 	stw	r3,1160(sp)
    b884:	003e3b06 	br	b174 <__alt_data_end+0xfffb5a44>
    b888:	d8811c17 	ldw	r2,1136(sp)
    b88c:	10000426 	beq	r2,zero,b8a0 <___vfiprintf_internal_r+0xc70>
    b890:	d9012117 	ldw	r4,1156(sp)
    b894:	d9412017 	ldw	r5,1152(sp)
    b898:	d9811a04 	addi	r6,sp,1128
    b89c:	000ab1c0 	call	ab1c <__sprint_r.part.0>
    b8a0:	d9412017 	ldw	r5,1152(sp)
    b8a4:	2880030b 	ldhu	r2,12(r5)
    b8a8:	1080100c 	andi	r2,r2,64
    b8ac:	103ddc1e 	bne	r2,zero,b020 <__alt_data_end+0xfffb58f0>
    b8b0:	d8812517 	ldw	r2,1172(sp)
    b8b4:	003ddb06 	br	b024 <__alt_data_end+0xfffb58f4>
    b8b8:	1801061e 	bne	r3,zero,bcd4 <___vfiprintf_internal_r+0x10a4>
    b8bc:	d8c12217 	ldw	r3,1160(sp)
    b8c0:	00800044 	movi	r2,1
    b8c4:	dd000115 	stw	r20,4(sp)
    b8c8:	d8c00015 	stw	r3,0(sp)
    b8cc:	dd011c15 	stw	r20,1136(sp)
    b8d0:	d8811b15 	stw	r2,1132(sp)
    b8d4:	a007883a 	mov	r3,r20
    b8d8:	d811883a 	mov	r8,sp
    b8dc:	42000204 	addi	r8,r8,8
    b8e0:	9480010c 	andi	r18,r18,4
    b8e4:	90003426 	beq	r18,zero,b9b8 <___vfiprintf_internal_r+0xd88>
    b8e8:	d9412417 	ldw	r5,1168(sp)
    b8ec:	2d65c83a 	sub	r18,r5,r21
    b8f0:	0480310e 	bge	zero,r18,b9b8 <___vfiprintf_internal_r+0xd88>
    b8f4:	04000404 	movi	r16,16
    b8f8:	8481ad0e 	bge	r16,r18,bfb0 <___vfiprintf_internal_r+0x1380>
    b8fc:	01400074 	movhi	r5,1
    b900:	294c5104 	addi	r5,r5,12612
    b904:	d9011b17 	ldw	r4,1132(sp)
    b908:	d9412615 	stw	r5,1176(sp)
    b90c:	04c001c4 	movi	r19,7
    b910:	dd012117 	ldw	r20,1156(sp)
    b914:	dd812017 	ldw	r22,1152(sp)
    b918:	00000506 	br	b930 <___vfiprintf_internal_r+0xd00>
    b91c:	21400084 	addi	r5,r4,2
    b920:	42000204 	addi	r8,r8,8
    b924:	1009883a 	mov	r4,r2
    b928:	94bffc04 	addi	r18,r18,-16
    b92c:	84800d0e 	bge	r16,r18,b964 <___vfiprintf_internal_r+0xd34>
    b930:	18c00404 	addi	r3,r3,16
    b934:	20800044 	addi	r2,r4,1
    b938:	47000015 	stw	fp,0(r8)
    b93c:	44000115 	stw	r16,4(r8)
    b940:	d8c11c15 	stw	r3,1136(sp)
    b944:	d8811b15 	stw	r2,1132(sp)
    b948:	98bff40e 	bge	r19,r2,b91c <__alt_data_end+0xfffb61ec>
    b94c:	1800291e 	bne	r3,zero,b9f4 <___vfiprintf_internal_r+0xdc4>
    b950:	94bffc04 	addi	r18,r18,-16
    b954:	0009883a 	mov	r4,zero
    b958:	01400044 	movi	r5,1
    b95c:	d811883a 	mov	r8,sp
    b960:	84bff316 	blt	r16,r18,b930 <__alt_data_end+0xfffb6200>
    b964:	d8812617 	ldw	r2,1176(sp)
    b968:	1c87883a 	add	r3,r3,r18
    b96c:	44800115 	stw	r18,4(r8)
    b970:	40800015 	stw	r2,0(r8)
    b974:	d8c11c15 	stw	r3,1136(sp)
    b978:	d9411b15 	stw	r5,1132(sp)
    b97c:	008001c4 	movi	r2,7
    b980:	11400d0e 	bge	r2,r5,b9b8 <___vfiprintf_internal_r+0xd88>
    b984:	1800061e 	bne	r3,zero,b9a0 <___vfiprintf_internal_r+0xd70>
    b988:	d8c12417 	ldw	r3,1168(sp)
    b98c:	a8c12e16 	blt	r21,r3,be48 <___vfiprintf_internal_r+0x1218>
    b990:	d9012517 	ldw	r4,1172(sp)
    b994:	2549883a 	add	r4,r4,r21
    b998:	d9012515 	stw	r4,1172(sp)
    b99c:	00001206 	br	b9e8 <___vfiprintf_internal_r+0xdb8>
    b9a0:	d9012117 	ldw	r4,1156(sp)
    b9a4:	d9412017 	ldw	r5,1152(sp)
    b9a8:	d9811a04 	addi	r6,sp,1128
    b9ac:	000ab1c0 	call	ab1c <__sprint_r.part.0>
    b9b0:	103fbb1e 	bne	r2,zero,b8a0 <__alt_data_end+0xfffb6170>
    b9b4:	d8c11c17 	ldw	r3,1136(sp)
    b9b8:	d8812417 	ldw	r2,1168(sp)
    b9bc:	a880010e 	bge	r21,r2,b9c4 <___vfiprintf_internal_r+0xd94>
    b9c0:	102b883a 	mov	r21,r2
    b9c4:	d9012517 	ldw	r4,1172(sp)
    b9c8:	2549883a 	add	r4,r4,r21
    b9cc:	d9012515 	stw	r4,1172(sp)
    b9d0:	18000526 	beq	r3,zero,b9e8 <___vfiprintf_internal_r+0xdb8>
    b9d4:	d9012117 	ldw	r4,1156(sp)
    b9d8:	d9412017 	ldw	r5,1152(sp)
    b9dc:	d9811a04 	addi	r6,sp,1128
    b9e0:	000ab1c0 	call	ab1c <__sprint_r.part.0>
    b9e4:	103fae1e 	bne	r2,zero,b8a0 <__alt_data_end+0xfffb6170>
    b9e8:	d8011b15 	stw	zero,1132(sp)
    b9ec:	d811883a 	mov	r8,sp
    b9f0:	003cc706 	br	ad10 <__alt_data_end+0xfffb55e0>
    b9f4:	a009883a 	mov	r4,r20
    b9f8:	b00b883a 	mov	r5,r22
    b9fc:	d9811a04 	addi	r6,sp,1128
    ba00:	000ab1c0 	call	ab1c <__sprint_r.part.0>
    ba04:	103fa61e 	bne	r2,zero,b8a0 <__alt_data_end+0xfffb6170>
    ba08:	d9011b17 	ldw	r4,1132(sp)
    ba0c:	d8c11c17 	ldw	r3,1136(sp)
    ba10:	d811883a 	mov	r8,sp
    ba14:	21400044 	addi	r5,r4,1
    ba18:	003fc306 	br	b928 <__alt_data_end+0xfffb61f8>
    ba1c:	d9012417 	ldw	r4,1168(sp)
    ba20:	256dc83a 	sub	r22,r4,r21
    ba24:	05be1f0e 	bge	zero,r22,b2a4 <__alt_data_end+0xfffb5b74>
    ba28:	04c00404 	movi	r19,16
    ba2c:	9d81720e 	bge	r19,r22,bff8 <___vfiprintf_internal_r+0x13c8>
    ba30:	00800074 	movhi	r2,1
    ba34:	108c4d04 	addi	r2,r2,12596
    ba38:	d8812615 	stw	r2,1176(sp)
    ba3c:	028001c4 	movi	r10,7
    ba40:	00000506 	br	ba58 <___vfiprintf_internal_r+0xe28>
    ba44:	29000084 	addi	r4,r5,2
    ba48:	42000204 	addi	r8,r8,8
    ba4c:	100b883a 	mov	r5,r2
    ba50:	b5bffc04 	addi	r22,r22,-16
    ba54:	9d800d0e 	bge	r19,r22,ba8c <___vfiprintf_internal_r+0xe5c>
    ba58:	18c00404 	addi	r3,r3,16
    ba5c:	28800044 	addi	r2,r5,1
    ba60:	44400015 	stw	r17,0(r8)
    ba64:	44c00115 	stw	r19,4(r8)
    ba68:	d8c11c15 	stw	r3,1136(sp)
    ba6c:	d8811b15 	stw	r2,1132(sp)
    ba70:	50bff40e 	bge	r10,r2,ba44 <__alt_data_end+0xfffb6314>
    ba74:	1800111e 	bne	r3,zero,babc <___vfiprintf_internal_r+0xe8c>
    ba78:	b5bffc04 	addi	r22,r22,-16
    ba7c:	000b883a 	mov	r5,zero
    ba80:	01000044 	movi	r4,1
    ba84:	d811883a 	mov	r8,sp
    ba88:	9dbff316 	blt	r19,r22,ba58 <__alt_data_end+0xfffb6328>
    ba8c:	d9412617 	ldw	r5,1176(sp)
    ba90:	1d87883a 	add	r3,r3,r22
    ba94:	45800115 	stw	r22,4(r8)
    ba98:	41400015 	stw	r5,0(r8)
    ba9c:	d8c11c15 	stw	r3,1136(sp)
    baa0:	d9011b15 	stw	r4,1132(sp)
    baa4:	008001c4 	movi	r2,7
    baa8:	11008516 	blt	r2,r4,bcc0 <___vfiprintf_internal_r+0x1090>
    baac:	42000204 	addi	r8,r8,8
    bab0:	20800044 	addi	r2,r4,1
    bab4:	200b883a 	mov	r5,r4
    bab8:	003dfa06 	br	b2a4 <__alt_data_end+0xfffb5b74>
    babc:	d9012117 	ldw	r4,1156(sp)
    bac0:	d9412017 	ldw	r5,1152(sp)
    bac4:	d9811a04 	addi	r6,sp,1128
    bac8:	da812a15 	stw	r10,1192(sp)
    bacc:	000ab1c0 	call	ab1c <__sprint_r.part.0>
    bad0:	da812a17 	ldw	r10,1192(sp)
    bad4:	103f721e 	bne	r2,zero,b8a0 <__alt_data_end+0xfffb6170>
    bad8:	d9411b17 	ldw	r5,1132(sp)
    badc:	d8c11c17 	ldw	r3,1136(sp)
    bae0:	d811883a 	mov	r8,sp
    bae4:	29000044 	addi	r4,r5,1
    bae8:	003fd906 	br	ba50 <__alt_data_end+0xfffb6320>
    baec:	1800681e 	bne	r3,zero,bc90 <___vfiprintf_internal_r+0x1060>
    baf0:	50004d26 	beq	r10,zero,bc28 <___vfiprintf_internal_r+0xff8>
    baf4:	d8811d04 	addi	r2,sp,1140
    baf8:	00c00084 	movi	r3,2
    bafc:	d8800015 	stw	r2,0(sp)
    bb00:	d8c00115 	stw	r3,4(sp)
    bb04:	2005883a 	mov	r2,r4
    bb08:	d811883a 	mov	r8,sp
    bb0c:	003de006 	br	b290 <__alt_data_end+0xfffb5b60>
    bb10:	1800551e 	bne	r3,zero,bc68 <___vfiprintf_internal_r+0x1038>
    bb14:	000b883a 	mov	r5,zero
    bb18:	00800044 	movi	r2,1
    bb1c:	d811883a 	mov	r8,sp
    bb20:	003dde06 	br	b29c <__alt_data_end+0xfffb5b6c>
    bb24:	10803fcc 	andi	r2,r2,255
    bb28:	1000191e 	bne	r2,zero,bb90 <___vfiprintf_internal_r+0xf60>
    bb2c:	9080004c 	andi	r2,r18,1
    bb30:	10001726 	beq	r2,zero,bb90 <___vfiprintf_internal_r+0xf60>
    bb34:	00800c04 	movi	r2,48
    bb38:	d8c109c4 	addi	r3,sp,1063
    bb3c:	d88109c5 	stb	r2,1063(sp)
    bb40:	dd012817 	ldw	r20,1184(sp)
    bb44:	d8c12215 	stw	r3,1160(sp)
    bb48:	003d8a06 	br	b174 <__alt_data_end+0xfffb5a44>
    bb4c:	d9012717 	ldw	r4,1180(sp)
    bb50:	dd010a04 	addi	r20,sp,1064
    bb54:	988003cc 	andi	r2,r19,15
    bb58:	a806973a 	slli	r3,r21,28
    bb5c:	2085883a 	add	r2,r4,r2
    bb60:	9826d13a 	srli	r19,r19,4
    bb64:	10800003 	ldbu	r2,0(r2)
    bb68:	a82ad13a 	srli	r21,r21,4
    bb6c:	a53fffc4 	addi	r20,r20,-1
    bb70:	1ce6b03a 	or	r19,r3,r19
    bb74:	a0800005 	stb	r2,0(r20)
    bb78:	9d44b03a 	or	r2,r19,r21
    bb7c:	103ff51e 	bne	r2,zero,bb54 <__alt_data_end+0xfffb6424>
    bb80:	d9411e17 	ldw	r5,1144(sp)
    bb84:	dd012215 	stw	r20,1160(sp)
    bb88:	2d29c83a 	sub	r20,r5,r20
    bb8c:	003d7906 	br	b174 <__alt_data_end+0xfffb5a44>
    bb90:	d8c10a04 	addi	r3,sp,1064
    bb94:	d8c12215 	stw	r3,1160(sp)
    bb98:	003d7606 	br	b174 <__alt_data_end+0xfffb5a44>
    bb9c:	18009e1e 	bne	r3,zero,be18 <___vfiprintf_internal_r+0x11e8>
    bba0:	d8811d87 	ldb	r2,1142(sp)
    bba4:	10005f26 	beq	r2,zero,bd24 <___vfiprintf_internal_r+0x10f4>
    bba8:	00c00044 	movi	r3,1
    bbac:	d9011d84 	addi	r4,sp,1142
    bbb0:	1805883a 	mov	r2,r3
    bbb4:	d9000015 	stw	r4,0(sp)
    bbb8:	d8c00115 	stw	r3,4(sp)
    bbbc:	d811883a 	mov	r8,sp
    bbc0:	003efc06 	br	b7b4 <__alt_data_end+0xfffb6084>
    bbc4:	d9412417 	ldw	r5,1168(sp)
    bbc8:	d811883a 	mov	r8,sp
    bbcc:	2d65c83a 	sub	r18,r5,r21
    bbd0:	04bf4816 	blt	zero,r18,b8f4 <__alt_data_end+0xfffb61c4>
    bbd4:	003f6c06 	br	b988 <__alt_data_end+0xfffb6258>
    bbd8:	b829883a 	mov	r20,r23
    bbdc:	003c6906 	br	ad84 <__alt_data_end+0xfffb5654>
    bbe0:	d9012117 	ldw	r4,1156(sp)
    bbe4:	d9412017 	ldw	r5,1152(sp)
    bbe8:	d9811a04 	addi	r6,sp,1128
    bbec:	000ab1c0 	call	ab1c <__sprint_r.part.0>
    bbf0:	103f2b1e 	bne	r2,zero,b8a0 <__alt_data_end+0xfffb6170>
    bbf4:	d8c11c17 	ldw	r3,1136(sp)
    bbf8:	d811883a 	mov	r8,sp
    bbfc:	003f3806 	br	b8e0 <__alt_data_end+0xfffb61b0>
    bc00:	00800084 	movi	r2,2
    bc04:	9d46b03a 	or	r3,r19,r21
    bc08:	003df606 	br	b3e4 <__alt_data_end+0xfffb5cb4>
    bc0c:	d9012117 	ldw	r4,1156(sp)
    bc10:	d9412017 	ldw	r5,1152(sp)
    bc14:	d9811a04 	addi	r6,sp,1128
    bc18:	000ab1c0 	call	ab1c <__sprint_r.part.0>
    bc1c:	103f201e 	bne	r2,zero,b8a0 <__alt_data_end+0xfffb6170>
    bc20:	d811883a 	mov	r8,sp
    bc24:	003cc606 	br	af40 <__alt_data_end+0xfffb5810>
    bc28:	000b883a 	mov	r5,zero
    bc2c:	2005883a 	mov	r2,r4
    bc30:	d811883a 	mov	r8,sp
    bc34:	003d9906 	br	b29c <__alt_data_end+0xfffb5b6c>
    bc38:	10803fcc 	andi	r2,r2,255
    bc3c:	1080201c 	xori	r2,r2,128
    bc40:	10bfe004 	addi	r2,r2,-128
    bc44:	01000c04 	movi	r4,48
    bc48:	1100b226 	beq	r2,r4,bf14 <___vfiprintf_internal_r+0x12e4>
    bc4c:	d9412217 	ldw	r5,1160(sp)
    bc50:	d8811e17 	ldw	r2,1144(sp)
    bc54:	193fffc5 	stb	r4,-1(r3)
    bc58:	297fffc4 	addi	r5,r5,-1
    bc5c:	d9412215 	stw	r5,1160(sp)
    bc60:	1169c83a 	sub	r20,r2,r5
    bc64:	003d4306 	br	b174 <__alt_data_end+0xfffb5a44>
    bc68:	d9012117 	ldw	r4,1156(sp)
    bc6c:	d9412017 	ldw	r5,1152(sp)
    bc70:	d9811a04 	addi	r6,sp,1128
    bc74:	000ab1c0 	call	ab1c <__sprint_r.part.0>
    bc78:	103f091e 	bne	r2,zero,b8a0 <__alt_data_end+0xfffb6170>
    bc7c:	d9411b17 	ldw	r5,1132(sp)
    bc80:	d8c11c17 	ldw	r3,1136(sp)
    bc84:	d811883a 	mov	r8,sp
    bc88:	28800044 	addi	r2,r5,1
    bc8c:	003d8306 	br	b29c <__alt_data_end+0xfffb5b6c>
    bc90:	d9012117 	ldw	r4,1156(sp)
    bc94:	d9412017 	ldw	r5,1152(sp)
    bc98:	d9811a04 	addi	r6,sp,1128
    bc9c:	da812a15 	stw	r10,1192(sp)
    bca0:	000ab1c0 	call	ab1c <__sprint_r.part.0>
    bca4:	da812a17 	ldw	r10,1192(sp)
    bca8:	103efd1e 	bne	r2,zero,b8a0 <__alt_data_end+0xfffb6170>
    bcac:	d9411b17 	ldw	r5,1132(sp)
    bcb0:	d8c11c17 	ldw	r3,1136(sp)
    bcb4:	d811883a 	mov	r8,sp
    bcb8:	28800044 	addi	r2,r5,1
    bcbc:	003d6a06 	br	b268 <__alt_data_end+0xfffb5b38>
    bcc0:	1800a01e 	bne	r3,zero,bf44 <___vfiprintf_internal_r+0x1314>
    bcc4:	000b883a 	mov	r5,zero
    bcc8:	00800044 	movi	r2,1
    bccc:	d811883a 	mov	r8,sp
    bcd0:	003d7406 	br	b2a4 <__alt_data_end+0xfffb5b74>
    bcd4:	d9012117 	ldw	r4,1156(sp)
    bcd8:	d9412017 	ldw	r5,1152(sp)
    bcdc:	d9811a04 	addi	r6,sp,1128
    bce0:	000ab1c0 	call	ab1c <__sprint_r.part.0>
    bce4:	103eee1e 	bne	r2,zero,b8a0 <__alt_data_end+0xfffb6170>
    bce8:	d8811b17 	ldw	r2,1132(sp)
    bcec:	d8c11c17 	ldw	r3,1136(sp)
    bcf0:	d811883a 	mov	r8,sp
    bcf4:	10800044 	addi	r2,r2,1
    bcf8:	003d8f06 	br	b338 <__alt_data_end+0xfffb5c08>
    bcfc:	04e7c83a 	sub	r19,zero,r19
    bd00:	9804c03a 	cmpne	r2,r19,zero
    bd04:	056bc83a 	sub	r21,zero,r21
    bd08:	a8abc83a 	sub	r21,r21,r2
    bd0c:	05800b44 	movi	r22,45
    bd10:	dd811d85 	stb	r22,1142(sp)
    bd14:	8029883a 	mov	r20,r16
    bd18:	00800044 	movi	r2,1
    bd1c:	9d46b03a 	or	r3,r19,r21
    bd20:	003cfa06 	br	b10c <__alt_data_end+0xfffb59dc>
    bd24:	000b883a 	mov	r5,zero
    bd28:	00800044 	movi	r2,1
    bd2c:	d811883a 	mov	r8,sp
    bd30:	503d5a26 	beq	r10,zero,b29c <__alt_data_end+0xfffb5b6c>
    bd34:	00c00084 	movi	r3,2
    bd38:	d9011d04 	addi	r4,sp,1140
    bd3c:	d9000015 	stw	r4,0(sp)
    bd40:	d8c00115 	stw	r3,4(sp)
    bd44:	003d5206 	br	b290 <__alt_data_end+0xfffb5b60>
    bd48:	9080040c 	andi	r2,r18,16
    bd4c:	1000421e 	bne	r2,zero,be58 <___vfiprintf_internal_r+0x1228>
    bd50:	9480100c 	andi	r18,r18,64
    bd54:	90009c26 	beq	r18,zero,bfc8 <___vfiprintf_internal_r+0x1398>
    bd58:	d9412317 	ldw	r5,1164(sp)
    bd5c:	d8c12517 	ldw	r3,1172(sp)
    bd60:	28800017 	ldw	r2,0(r5)
    bd64:	29400104 	addi	r5,r5,4
    bd68:	d9412315 	stw	r5,1164(sp)
    bd6c:	10c0000d 	sth	r3,0(r2)
    bd70:	003be706 	br	ad10 <__alt_data_end+0xfffb55e0>
    bd74:	90c0100c 	andi	r3,r18,64
    bd78:	18003e26 	beq	r3,zero,be74 <___vfiprintf_internal_r+0x1244>
    bd7c:	d8c12317 	ldw	r3,1164(sp)
    bd80:	14c0000b 	ldhu	r19,0(r2)
    bd84:	002b883a 	mov	r21,zero
    bd88:	18c00104 	addi	r3,r3,4
    bd8c:	d8c12315 	stw	r3,1164(sp)
    bd90:	003db706 	br	b470 <__alt_data_end+0xfffb5d40>
    bd94:	9080100c 	andi	r2,r18,64
    bd98:	10004c26 	beq	r2,zero,becc <___vfiprintf_internal_r+0x129c>
    bd9c:	1cc0000f 	ldh	r19,0(r3)
    bda0:	d8812317 	ldw	r2,1164(sp)
    bda4:	982bd7fa 	srai	r21,r19,31
    bda8:	10800104 	addi	r2,r2,4
    bdac:	d8812315 	stw	r2,1164(sp)
    bdb0:	a805883a 	mov	r2,r21
    bdb4:	003cd006 	br	b0f8 <__alt_data_end+0xfffb59c8>
    bdb8:	00800084 	movi	r2,2
    bdbc:	003d8906 	br	b3e4 <__alt_data_end+0xfffb5cb4>
    bdc0:	b9800007 	ldb	r6,0(r23)
    bdc4:	003bfb06 	br	adb4 <__alt_data_end+0xfffb5684>
    bdc8:	9080100c 	andi	r2,r18,64
    bdcc:	10003726 	beq	r2,zero,beac <___vfiprintf_internal_r+0x127c>
    bdd0:	d9412317 	ldw	r5,1164(sp)
    bdd4:	002b883a 	mov	r21,zero
    bdd8:	0005883a 	mov	r2,zero
    bddc:	2cc0000b 	ldhu	r19,0(r5)
    bde0:	29400104 	addi	r5,r5,4
    bde4:	d9412315 	stw	r5,1164(sp)
    bde8:	9807883a 	mov	r3,r19
    bdec:	003d7d06 	br	b3e4 <__alt_data_end+0xfffb5cb4>
    bdf0:	9080100c 	andi	r2,r18,64
    bdf4:	10002526 	beq	r2,zero,be8c <___vfiprintf_internal_r+0x125c>
    bdf8:	d8812317 	ldw	r2,1164(sp)
    bdfc:	002b883a 	mov	r21,zero
    be00:	14c0000b 	ldhu	r19,0(r2)
    be04:	10800104 	addi	r2,r2,4
    be08:	d8812315 	stw	r2,1164(sp)
    be0c:	9807883a 	mov	r3,r19
    be10:	00800044 	movi	r2,1
    be14:	003d7306 	br	b3e4 <__alt_data_end+0xfffb5cb4>
    be18:	d9012117 	ldw	r4,1156(sp)
    be1c:	d9412017 	ldw	r5,1152(sp)
    be20:	d9811a04 	addi	r6,sp,1128
    be24:	da812a15 	stw	r10,1192(sp)
    be28:	000ab1c0 	call	ab1c <__sprint_r.part.0>
    be2c:	da812a17 	ldw	r10,1192(sp)
    be30:	103e9b1e 	bne	r2,zero,b8a0 <__alt_data_end+0xfffb6170>
    be34:	d9411b17 	ldw	r5,1132(sp)
    be38:	d8c11c17 	ldw	r3,1136(sp)
    be3c:	d811883a 	mov	r8,sp
    be40:	28800044 	addi	r2,r5,1
    be44:	003e5006 	br	b788 <__alt_data_end+0xfffb6058>
    be48:	182b883a 	mov	r21,r3
    be4c:	003ed006 	br	b990 <__alt_data_end+0xfffb6260>
    be50:	8029883a 	mov	r20,r16
    be54:	003dc606 	br	b570 <__alt_data_end+0xfffb5e40>
    be58:	d8c12317 	ldw	r3,1164(sp)
    be5c:	d9012517 	ldw	r4,1172(sp)
    be60:	18800017 	ldw	r2,0(r3)
    be64:	18c00104 	addi	r3,r3,4
    be68:	d8c12315 	stw	r3,1164(sp)
    be6c:	11000015 	stw	r4,0(r2)
    be70:	003ba706 	br	ad10 <__alt_data_end+0xfffb55e0>
    be74:	d9012317 	ldw	r4,1164(sp)
    be78:	14c00017 	ldw	r19,0(r2)
    be7c:	002b883a 	mov	r21,zero
    be80:	21000104 	addi	r4,r4,4
    be84:	d9012315 	stw	r4,1164(sp)
    be88:	003d7906 	br	b470 <__alt_data_end+0xfffb5d40>
    be8c:	d8c12317 	ldw	r3,1164(sp)
    be90:	002b883a 	mov	r21,zero
    be94:	00800044 	movi	r2,1
    be98:	1cc00017 	ldw	r19,0(r3)
    be9c:	18c00104 	addi	r3,r3,4
    bea0:	d8c12315 	stw	r3,1164(sp)
    bea4:	9807883a 	mov	r3,r19
    bea8:	003d4e06 	br	b3e4 <__alt_data_end+0xfffb5cb4>
    beac:	d8812317 	ldw	r2,1164(sp)
    beb0:	002b883a 	mov	r21,zero
    beb4:	14c00017 	ldw	r19,0(r2)
    beb8:	10800104 	addi	r2,r2,4
    bebc:	d8812315 	stw	r2,1164(sp)
    bec0:	9807883a 	mov	r3,r19
    bec4:	0005883a 	mov	r2,zero
    bec8:	003d4606 	br	b3e4 <__alt_data_end+0xfffb5cb4>
    becc:	1cc00017 	ldw	r19,0(r3)
    bed0:	d8c12317 	ldw	r3,1164(sp)
    bed4:	982bd7fa 	srai	r21,r19,31
    bed8:	18c00104 	addi	r3,r3,4
    bedc:	d8c12315 	stw	r3,1164(sp)
    bee0:	a805883a 	mov	r2,r21
    bee4:	003c8406 	br	b0f8 <__alt_data_end+0xfffb59c8>
    bee8:	01000074 	movhi	r4,1
    beec:	210c4d04 	addi	r4,r4,12596
    bef0:	d9012615 	stw	r4,1176(sp)
    bef4:	003d0606 	br	b310 <__alt_data_end+0xfffb5be0>
    bef8:	b9800043 	ldbu	r6,1(r23)
    befc:	94800814 	ori	r18,r18,32
    bf00:	bdc00044 	addi	r23,r23,1
    bf04:	31803fcc 	andi	r6,r6,255
    bf08:	3180201c 	xori	r6,r6,128
    bf0c:	31bfe004 	addi	r6,r6,-128
    bf10:	003ba806 	br	adb4 <__alt_data_end+0xfffb5684>
    bf14:	d8811e17 	ldw	r2,1144(sp)
    bf18:	d8c12217 	ldw	r3,1160(sp)
    bf1c:	10e9c83a 	sub	r20,r2,r3
    bf20:	003c9406 	br	b174 <__alt_data_end+0xfffb5a44>
    bf24:	da012a15 	stw	r8,1192(sp)
    bf28:	0003f3c0 	call	3f3c <strlen>
    bf2c:	1029883a 	mov	r20,r2
    bf30:	dd811d83 	ldbu	r22,1142(sp)
    bf34:	dcc12315 	stw	r19,1164(sp)
    bf38:	0021883a 	mov	r16,zero
    bf3c:	da012a17 	ldw	r8,1192(sp)
    bf40:	003c8c06 	br	b174 <__alt_data_end+0xfffb5a44>
    bf44:	d9012117 	ldw	r4,1156(sp)
    bf48:	d9412017 	ldw	r5,1152(sp)
    bf4c:	d9811a04 	addi	r6,sp,1128
    bf50:	000ab1c0 	call	ab1c <__sprint_r.part.0>
    bf54:	103e521e 	bne	r2,zero,b8a0 <__alt_data_end+0xfffb6170>
    bf58:	d9411b17 	ldw	r5,1132(sp)
    bf5c:	d8c11c17 	ldw	r3,1136(sp)
    bf60:	d811883a 	mov	r8,sp
    bf64:	28800044 	addi	r2,r5,1
    bf68:	003cce06 	br	b2a4 <__alt_data_end+0xfffb5b74>
    bf6c:	01400074 	movhi	r5,1
    bf70:	294c5104 	addi	r5,r5,12612
    bf74:	d9412615 	stw	r5,1176(sp)
    bf78:	d9411b17 	ldw	r5,1132(sp)
    bf7c:	29400044 	addi	r5,r5,1
    bf80:	003cad06 	br	b238 <__alt_data_end+0xfffb5b08>
    bf84:	00800184 	movi	r2,6
    bf88:	1400012e 	bgeu	r2,r16,bf90 <___vfiprintf_internal_r+0x1360>
    bf8c:	1021883a 	mov	r16,r2
    bf90:	8029883a 	mov	r20,r16
    bf94:	802b883a 	mov	r21,r16
    bf98:	80001c16 	blt	r16,zero,c00c <___vfiprintf_internal_r+0x13dc>
    bf9c:	00c00074 	movhi	r3,1
    bfa0:	18cbf104 	addi	r3,r3,12228
    bfa4:	dcc12315 	stw	r19,1164(sp)
    bfa8:	d8c12215 	stw	r3,1160(sp)
    bfac:	003cff06 	br	b3ac <__alt_data_end+0xfffb5c7c>
    bfb0:	d9411b17 	ldw	r5,1132(sp)
    bfb4:	00800074 	movhi	r2,1
    bfb8:	108c5104 	addi	r2,r2,12612
    bfbc:	d8812615 	stw	r2,1176(sp)
    bfc0:	29400044 	addi	r5,r5,1
    bfc4:	003e6706 	br	b964 <__alt_data_end+0xfffb6234>
    bfc8:	d9012317 	ldw	r4,1164(sp)
    bfcc:	d9412517 	ldw	r5,1172(sp)
    bfd0:	20800017 	ldw	r2,0(r4)
    bfd4:	21000104 	addi	r4,r4,4
    bfd8:	d9012315 	stw	r4,1164(sp)
    bfdc:	11400015 	stw	r5,0(r2)
    bfe0:	003b4b06 	br	ad10 <__alt_data_end+0xfffb55e0>
    bfe4:	8029883a 	mov	r20,r16
    bfe8:	dd811d83 	ldbu	r22,1142(sp)
    bfec:	dcc12315 	stw	r19,1164(sp)
    bff0:	0021883a 	mov	r16,zero
    bff4:	003c5f06 	br	b174 <__alt_data_end+0xfffb5a44>
    bff8:	01000074 	movhi	r4,1
    bffc:	210c4d04 	addi	r4,r4,12596
    c000:	d9012615 	stw	r4,1176(sp)
    c004:	1009883a 	mov	r4,r2
    c008:	003ea006 	br	ba8c <__alt_data_end+0xfffb635c>
    c00c:	002b883a 	mov	r21,zero
    c010:	003fe206 	br	bf9c <__alt_data_end+0xfffb686c>
    c014:	d9412317 	ldw	r5,1164(sp)
    c018:	b807883a 	mov	r3,r23
    c01c:	102f883a 	mov	r23,r2
    c020:	2c000017 	ldw	r16,0(r5)
    c024:	29000104 	addi	r4,r5,4
    c028:	d9012315 	stw	r4,1164(sp)
    c02c:	80000416 	blt	r16,zero,c040 <___vfiprintf_internal_r+0x1410>
    c030:	19800047 	ldb	r6,1(r3)
    c034:	003b5f06 	br	adb4 <__alt_data_end+0xfffb5684>
    c038:	043fffc4 	movi	r16,-1
    c03c:	003bef06 	br	affc <__alt_data_end+0xfffb58cc>
    c040:	043fffc4 	movi	r16,-1
    c044:	19800047 	ldb	r6,1(r3)
    c048:	003b5a06 	br	adb4 <__alt_data_end+0xfffb5684>
    c04c:	282b883a 	mov	r21,r5
    c050:	003cc706 	br	b370 <__alt_data_end+0xfffb5c40>

0000c054 <__vfiprintf_internal>:
    c054:	2007883a 	mov	r3,r4
    c058:	01000074 	movhi	r4,1
    c05c:	21136c04 	addi	r4,r4,19888
    c060:	21000017 	ldw	r4,0(r4)
    c064:	2805883a 	mov	r2,r5
    c068:	300f883a 	mov	r7,r6
    c06c:	180b883a 	mov	r5,r3
    c070:	100d883a 	mov	r6,r2
    c074:	000ac301 	jmpi	ac30 <___vfiprintf_internal_r>

0000c078 <_write_r>:
    c078:	defffd04 	addi	sp,sp,-12
    c07c:	dc000015 	stw	r16,0(sp)
    c080:	04000074 	movhi	r16,1
    c084:	dc400115 	stw	r17,4(sp)
    c088:	841a5a04 	addi	r16,r16,26984
    c08c:	2023883a 	mov	r17,r4
    c090:	2809883a 	mov	r4,r5
    c094:	300b883a 	mov	r5,r6
    c098:	380d883a 	mov	r6,r7
    c09c:	dfc00215 	stw	ra,8(sp)
    c0a0:	80000015 	stw	zero,0(r16)
    c0a4:	00108740 	call	10874 <write>
    c0a8:	00ffffc4 	movi	r3,-1
    c0ac:	10c00526 	beq	r2,r3,c0c4 <_write_r+0x4c>
    c0b0:	dfc00217 	ldw	ra,8(sp)
    c0b4:	dc400117 	ldw	r17,4(sp)
    c0b8:	dc000017 	ldw	r16,0(sp)
    c0bc:	dec00304 	addi	sp,sp,12
    c0c0:	f800283a 	ret
    c0c4:	80c00017 	ldw	r3,0(r16)
    c0c8:	183ff926 	beq	r3,zero,c0b0 <__alt_data_end+0xfffb6980>
    c0cc:	88c00015 	stw	r3,0(r17)
    c0d0:	003ff706 	br	c0b0 <__alt_data_end+0xfffb6980>

0000c0d4 <_close_r>:
    c0d4:	defffd04 	addi	sp,sp,-12
    c0d8:	dc000015 	stw	r16,0(sp)
    c0dc:	04000074 	movhi	r16,1
    c0e0:	dc400115 	stw	r17,4(sp)
    c0e4:	841a5a04 	addi	r16,r16,26984
    c0e8:	2023883a 	mov	r17,r4
    c0ec:	2809883a 	mov	r4,r5
    c0f0:	dfc00215 	stw	ra,8(sp)
    c0f4:	80000015 	stw	zero,0(r16)
    c0f8:	000ffa00 	call	ffa0 <close>
    c0fc:	00ffffc4 	movi	r3,-1
    c100:	10c00526 	beq	r2,r3,c118 <_close_r+0x44>
    c104:	dfc00217 	ldw	ra,8(sp)
    c108:	dc400117 	ldw	r17,4(sp)
    c10c:	dc000017 	ldw	r16,0(sp)
    c110:	dec00304 	addi	sp,sp,12
    c114:	f800283a 	ret
    c118:	80c00017 	ldw	r3,0(r16)
    c11c:	183ff926 	beq	r3,zero,c104 <__alt_data_end+0xfffb69d4>
    c120:	88c00015 	stw	r3,0(r17)
    c124:	003ff706 	br	c104 <__alt_data_end+0xfffb69d4>

0000c128 <_calloc_r>:
    c128:	defffe04 	addi	sp,sp,-8
    c12c:	dc000015 	stw	r16,0(sp)
    c130:	2021883a 	mov	r16,r4
    c134:	2809883a 	mov	r4,r5
    c138:	300b883a 	mov	r5,r6
    c13c:	dfc00115 	stw	ra,4(sp)
    c140:	000d72c0 	call	d72c <__mulsi3>
    c144:	8009883a 	mov	r4,r16
    c148:	100b883a 	mov	r5,r2
    c14c:	00035900 	call	3590 <_malloc_r>
    c150:	1021883a 	mov	r16,r2
    c154:	10002826 	beq	r2,zero,c1f8 <_calloc_r+0xd0>
    c158:	11bfff17 	ldw	r6,-4(r2)
    c15c:	00bfff04 	movi	r2,-4
    c160:	00c00904 	movi	r3,36
    c164:	308c703a 	and	r6,r6,r2
    c168:	308d883a 	add	r6,r6,r2
    c16c:	19801436 	bltu	r3,r6,c1c0 <_calloc_r+0x98>
    c170:	008004c4 	movi	r2,19
    c174:	11800936 	bltu	r2,r6,c19c <_calloc_r+0x74>
    c178:	8005883a 	mov	r2,r16
    c17c:	10000015 	stw	zero,0(r2)
    c180:	10000115 	stw	zero,4(r2)
    c184:	10000215 	stw	zero,8(r2)
    c188:	8005883a 	mov	r2,r16
    c18c:	dfc00117 	ldw	ra,4(sp)
    c190:	dc000017 	ldw	r16,0(sp)
    c194:	dec00204 	addi	sp,sp,8
    c198:	f800283a 	ret
    c19c:	80000015 	stw	zero,0(r16)
    c1a0:	80000115 	stw	zero,4(r16)
    c1a4:	008006c4 	movi	r2,27
    c1a8:	11800d2e 	bgeu	r2,r6,c1e0 <_calloc_r+0xb8>
    c1ac:	80000215 	stw	zero,8(r16)
    c1b0:	80000315 	stw	zero,12(r16)
    c1b4:	30c00c26 	beq	r6,r3,c1e8 <_calloc_r+0xc0>
    c1b8:	80800404 	addi	r2,r16,16
    c1bc:	003fef06 	br	c17c <__alt_data_end+0xfffb6a4c>
    c1c0:	8009883a 	mov	r4,r16
    c1c4:	000b883a 	mov	r5,zero
    c1c8:	00091bc0 	call	91bc <memset>
    c1cc:	8005883a 	mov	r2,r16
    c1d0:	dfc00117 	ldw	ra,4(sp)
    c1d4:	dc000017 	ldw	r16,0(sp)
    c1d8:	dec00204 	addi	sp,sp,8
    c1dc:	f800283a 	ret
    c1e0:	80800204 	addi	r2,r16,8
    c1e4:	003fe506 	br	c17c <__alt_data_end+0xfffb6a4c>
    c1e8:	80000415 	stw	zero,16(r16)
    c1ec:	80800604 	addi	r2,r16,24
    c1f0:	80000515 	stw	zero,20(r16)
    c1f4:	003fe106 	br	c17c <__alt_data_end+0xfffb6a4c>
    c1f8:	0005883a 	mov	r2,zero
    c1fc:	003fe306 	br	c18c <__alt_data_end+0xfffb6a5c>

0000c200 <_fclose_r>:
    c200:	28003226 	beq	r5,zero,c2cc <_fclose_r+0xcc>
    c204:	defffc04 	addi	sp,sp,-16
    c208:	dc400115 	stw	r17,4(sp)
    c20c:	2023883a 	mov	r17,r4
    c210:	dc000015 	stw	r16,0(sp)
    c214:	dfc00315 	stw	ra,12(sp)
    c218:	dc800215 	stw	r18,8(sp)
    c21c:	2821883a 	mov	r16,r5
    c220:	00081400 	call	8140 <__sfp_lock_acquire>
    c224:	88000226 	beq	r17,zero,c230 <_fclose_r+0x30>
    c228:	88800e17 	ldw	r2,56(r17)
    c22c:	10002926 	beq	r2,zero,c2d4 <_fclose_r+0xd4>
    c230:	8080030f 	ldh	r2,12(r16)
    c234:	10002226 	beq	r2,zero,c2c0 <_fclose_r+0xc0>
    c238:	8809883a 	mov	r4,r17
    c23c:	800b883a 	mov	r5,r16
    c240:	0007b740 	call	7b74 <_fflush_r>
    c244:	1025883a 	mov	r18,r2
    c248:	80800b17 	ldw	r2,44(r16)
    c24c:	10000426 	beq	r2,zero,c260 <_fclose_r+0x60>
    c250:	81400717 	ldw	r5,28(r16)
    c254:	8809883a 	mov	r4,r17
    c258:	103ee83a 	callr	r2
    c25c:	10002616 	blt	r2,zero,c2f8 <_fclose_r+0xf8>
    c260:	8080030b 	ldhu	r2,12(r16)
    c264:	1080200c 	andi	r2,r2,128
    c268:	10001f1e 	bne	r2,zero,c2e8 <_fclose_r+0xe8>
    c26c:	81400c17 	ldw	r5,48(r16)
    c270:	28000526 	beq	r5,zero,c288 <_fclose_r+0x88>
    c274:	80801004 	addi	r2,r16,64
    c278:	28800226 	beq	r5,r2,c284 <_fclose_r+0x84>
    c27c:	8809883a 	mov	r4,r17
    c280:	00082a40 	call	82a4 <_free_r>
    c284:	80000c15 	stw	zero,48(r16)
    c288:	81401117 	ldw	r5,68(r16)
    c28c:	28000326 	beq	r5,zero,c29c <_fclose_r+0x9c>
    c290:	8809883a 	mov	r4,r17
    c294:	00082a40 	call	82a4 <_free_r>
    c298:	80001115 	stw	zero,68(r16)
    c29c:	8000030d 	sth	zero,12(r16)
    c2a0:	00081440 	call	8144 <__sfp_lock_release>
    c2a4:	9005883a 	mov	r2,r18
    c2a8:	dfc00317 	ldw	ra,12(sp)
    c2ac:	dc800217 	ldw	r18,8(sp)
    c2b0:	dc400117 	ldw	r17,4(sp)
    c2b4:	dc000017 	ldw	r16,0(sp)
    c2b8:	dec00404 	addi	sp,sp,16
    c2bc:	f800283a 	ret
    c2c0:	00081440 	call	8144 <__sfp_lock_release>
    c2c4:	0005883a 	mov	r2,zero
    c2c8:	003ff706 	br	c2a8 <__alt_data_end+0xfffb6b78>
    c2cc:	0005883a 	mov	r2,zero
    c2d0:	f800283a 	ret
    c2d4:	8809883a 	mov	r4,r17
    c2d8:	00081300 	call	8130 <__sinit>
    c2dc:	8080030f 	ldh	r2,12(r16)
    c2e0:	103fd51e 	bne	r2,zero,c238 <__alt_data_end+0xfffb6b08>
    c2e4:	003ff606 	br	c2c0 <__alt_data_end+0xfffb6b90>
    c2e8:	81400417 	ldw	r5,16(r16)
    c2ec:	8809883a 	mov	r4,r17
    c2f0:	00082a40 	call	82a4 <_free_r>
    c2f4:	003fdd06 	br	c26c <__alt_data_end+0xfffb6b3c>
    c2f8:	04bfffc4 	movi	r18,-1
    c2fc:	003fd806 	br	c260 <__alt_data_end+0xfffb6b30>

0000c300 <fclose>:
    c300:	00800074 	movhi	r2,1
    c304:	10936c04 	addi	r2,r2,19888
    c308:	200b883a 	mov	r5,r4
    c30c:	11000017 	ldw	r4,0(r2)
    c310:	000c2001 	jmpi	c200 <_fclose_r>

0000c314 <_fputwc_r>:
    c314:	3080030b 	ldhu	r2,12(r6)
    c318:	defff804 	addi	sp,sp,-32
    c31c:	dcc00415 	stw	r19,16(sp)
    c320:	dc800315 	stw	r18,12(sp)
    c324:	dc000115 	stw	r16,4(sp)
    c328:	dfc00715 	stw	ra,28(sp)
    c32c:	dd400615 	stw	r21,24(sp)
    c330:	dd000515 	stw	r20,20(sp)
    c334:	dc400215 	stw	r17,8(sp)
    c338:	10c8000c 	andi	r3,r2,8192
    c33c:	3021883a 	mov	r16,r6
    c340:	2027883a 	mov	r19,r4
    c344:	2825883a 	mov	r18,r5
    c348:	1800051e 	bne	r3,zero,c360 <_fputwc_r+0x4c>
    c34c:	30c01917 	ldw	r3,100(r6)
    c350:	10880014 	ori	r2,r2,8192
    c354:	3080030d 	sth	r2,12(r6)
    c358:	18880014 	ori	r2,r3,8192
    c35c:	30801915 	stw	r2,100(r6)
    c360:	0008c300 	call	8c30 <__locale_mb_cur_max>
    c364:	00c00044 	movi	r3,1
    c368:	10c03e26 	beq	r2,r3,c464 <_fputwc_r+0x150>
    c36c:	9809883a 	mov	r4,r19
    c370:	d80b883a 	mov	r5,sp
    c374:	900d883a 	mov	r6,r18
    c378:	81c01704 	addi	r7,r16,92
    c37c:	000c7c40 	call	c7c4 <_wcrtomb_r>
    c380:	1029883a 	mov	r20,r2
    c384:	00bfffc4 	movi	r2,-1
    c388:	a0802026 	beq	r20,r2,c40c <_fputwc_r+0xf8>
    c38c:	d9400003 	ldbu	r5,0(sp)
    c390:	a0001c26 	beq	r20,zero,c404 <_fputwc_r+0xf0>
    c394:	0023883a 	mov	r17,zero
    c398:	05400284 	movi	r21,10
    c39c:	00000906 	br	c3c4 <_fputwc_r+0xb0>
    c3a0:	80800017 	ldw	r2,0(r16)
    c3a4:	11400005 	stb	r5,0(r2)
    c3a8:	80c00017 	ldw	r3,0(r16)
    c3ac:	18c00044 	addi	r3,r3,1
    c3b0:	80c00015 	stw	r3,0(r16)
    c3b4:	8c400044 	addi	r17,r17,1
    c3b8:	dc45883a 	add	r2,sp,r17
    c3bc:	8d00112e 	bgeu	r17,r20,c404 <_fputwc_r+0xf0>
    c3c0:	11400003 	ldbu	r5,0(r2)
    c3c4:	80c00217 	ldw	r3,8(r16)
    c3c8:	18ffffc4 	addi	r3,r3,-1
    c3cc:	80c00215 	stw	r3,8(r16)
    c3d0:	183ff30e 	bge	r3,zero,c3a0 <__alt_data_end+0xfffb6c70>
    c3d4:	80800617 	ldw	r2,24(r16)
    c3d8:	18801916 	blt	r3,r2,c440 <_fputwc_r+0x12c>
    c3dc:	80800017 	ldw	r2,0(r16)
    c3e0:	11400005 	stb	r5,0(r2)
    c3e4:	80800017 	ldw	r2,0(r16)
    c3e8:	10c00003 	ldbu	r3,0(r2)
    c3ec:	10800044 	addi	r2,r2,1
    c3f0:	1d402326 	beq	r3,r21,c480 <_fputwc_r+0x16c>
    c3f4:	80800015 	stw	r2,0(r16)
    c3f8:	8c400044 	addi	r17,r17,1
    c3fc:	dc45883a 	add	r2,sp,r17
    c400:	8d3fef36 	bltu	r17,r20,c3c0 <__alt_data_end+0xfffb6c90>
    c404:	9005883a 	mov	r2,r18
    c408:	00000406 	br	c41c <_fputwc_r+0x108>
    c40c:	80c0030b 	ldhu	r3,12(r16)
    c410:	a005883a 	mov	r2,r20
    c414:	18c01014 	ori	r3,r3,64
    c418:	80c0030d 	sth	r3,12(r16)
    c41c:	dfc00717 	ldw	ra,28(sp)
    c420:	dd400617 	ldw	r21,24(sp)
    c424:	dd000517 	ldw	r20,20(sp)
    c428:	dcc00417 	ldw	r19,16(sp)
    c42c:	dc800317 	ldw	r18,12(sp)
    c430:	dc400217 	ldw	r17,8(sp)
    c434:	dc000117 	ldw	r16,4(sp)
    c438:	dec00804 	addi	sp,sp,32
    c43c:	f800283a 	ret
    c440:	9809883a 	mov	r4,r19
    c444:	29403fcc 	andi	r5,r5,255
    c448:	800d883a 	mov	r6,r16
    c44c:	000c6540 	call	c654 <__swbuf_r>
    c450:	10bfffe0 	cmpeqi	r2,r2,-1
    c454:	10803fcc 	andi	r2,r2,255
    c458:	103fd626 	beq	r2,zero,c3b4 <__alt_data_end+0xfffb6c84>
    c45c:	00bfffc4 	movi	r2,-1
    c460:	003fee06 	br	c41c <__alt_data_end+0xfffb6cec>
    c464:	90ffffc4 	addi	r3,r18,-1
    c468:	01003f84 	movi	r4,254
    c46c:	20ffbf36 	bltu	r4,r3,c36c <__alt_data_end+0xfffb6c3c>
    c470:	900b883a 	mov	r5,r18
    c474:	dc800005 	stb	r18,0(sp)
    c478:	1029883a 	mov	r20,r2
    c47c:	003fc506 	br	c394 <__alt_data_end+0xfffb6c64>
    c480:	9809883a 	mov	r4,r19
    c484:	a80b883a 	mov	r5,r21
    c488:	800d883a 	mov	r6,r16
    c48c:	000c6540 	call	c654 <__swbuf_r>
    c490:	10bfffe0 	cmpeqi	r2,r2,-1
    c494:	003fef06 	br	c454 <__alt_data_end+0xfffb6d24>

0000c498 <fputwc>:
    c498:	defffc04 	addi	sp,sp,-16
    c49c:	dc000115 	stw	r16,4(sp)
    c4a0:	04000074 	movhi	r16,1
    c4a4:	84136c04 	addi	r16,r16,19888
    c4a8:	dc400215 	stw	r17,8(sp)
    c4ac:	2023883a 	mov	r17,r4
    c4b0:	81000017 	ldw	r4,0(r16)
    c4b4:	dfc00315 	stw	ra,12(sp)
    c4b8:	280d883a 	mov	r6,r5
    c4bc:	20000626 	beq	r4,zero,c4d8 <fputwc+0x40>
    c4c0:	20800e17 	ldw	r2,56(r4)
    c4c4:	1000041e 	bne	r2,zero,c4d8 <fputwc+0x40>
    c4c8:	d9400015 	stw	r5,0(sp)
    c4cc:	00081300 	call	8130 <__sinit>
    c4d0:	81000017 	ldw	r4,0(r16)
    c4d4:	d9800017 	ldw	r6,0(sp)
    c4d8:	880b883a 	mov	r5,r17
    c4dc:	dfc00317 	ldw	ra,12(sp)
    c4e0:	dc400217 	ldw	r17,8(sp)
    c4e4:	dc000117 	ldw	r16,4(sp)
    c4e8:	dec00404 	addi	sp,sp,16
    c4ec:	000c3141 	jmpi	c314 <_fputwc_r>

0000c4f0 <_fstat_r>:
    c4f0:	defffd04 	addi	sp,sp,-12
    c4f4:	dc000015 	stw	r16,0(sp)
    c4f8:	04000074 	movhi	r16,1
    c4fc:	dc400115 	stw	r17,4(sp)
    c500:	841a5a04 	addi	r16,r16,26984
    c504:	2023883a 	mov	r17,r4
    c508:	2809883a 	mov	r4,r5
    c50c:	300b883a 	mov	r5,r6
    c510:	dfc00215 	stw	ra,8(sp)
    c514:	80000015 	stw	zero,0(r16)
    c518:	00100f40 	call	100f4 <fstat>
    c51c:	00ffffc4 	movi	r3,-1
    c520:	10c00526 	beq	r2,r3,c538 <_fstat_r+0x48>
    c524:	dfc00217 	ldw	ra,8(sp)
    c528:	dc400117 	ldw	r17,4(sp)
    c52c:	dc000017 	ldw	r16,0(sp)
    c530:	dec00304 	addi	sp,sp,12
    c534:	f800283a 	ret
    c538:	80c00017 	ldw	r3,0(r16)
    c53c:	183ff926 	beq	r3,zero,c524 <__alt_data_end+0xfffb6df4>
    c540:	88c00015 	stw	r3,0(r17)
    c544:	003ff706 	br	c524 <__alt_data_end+0xfffb6df4>

0000c548 <_isatty_r>:
    c548:	defffd04 	addi	sp,sp,-12
    c54c:	dc000015 	stw	r16,0(sp)
    c550:	04000074 	movhi	r16,1
    c554:	dc400115 	stw	r17,4(sp)
    c558:	841a5a04 	addi	r16,r16,26984
    c55c:	2023883a 	mov	r17,r4
    c560:	2809883a 	mov	r4,r5
    c564:	dfc00215 	stw	ra,8(sp)
    c568:	80000015 	stw	zero,0(r16)
    c56c:	00101fc0 	call	101fc <isatty>
    c570:	00ffffc4 	movi	r3,-1
    c574:	10c00526 	beq	r2,r3,c58c <_isatty_r+0x44>
    c578:	dfc00217 	ldw	ra,8(sp)
    c57c:	dc400117 	ldw	r17,4(sp)
    c580:	dc000017 	ldw	r16,0(sp)
    c584:	dec00304 	addi	sp,sp,12
    c588:	f800283a 	ret
    c58c:	80c00017 	ldw	r3,0(r16)
    c590:	183ff926 	beq	r3,zero,c578 <__alt_data_end+0xfffb6e48>
    c594:	88c00015 	stw	r3,0(r17)
    c598:	003ff706 	br	c578 <__alt_data_end+0xfffb6e48>

0000c59c <_lseek_r>:
    c59c:	defffd04 	addi	sp,sp,-12
    c5a0:	dc000015 	stw	r16,0(sp)
    c5a4:	04000074 	movhi	r16,1
    c5a8:	dc400115 	stw	r17,4(sp)
    c5ac:	841a5a04 	addi	r16,r16,26984
    c5b0:	2023883a 	mov	r17,r4
    c5b4:	2809883a 	mov	r4,r5
    c5b8:	300b883a 	mov	r5,r6
    c5bc:	380d883a 	mov	r6,r7
    c5c0:	dfc00215 	stw	ra,8(sp)
    c5c4:	80000015 	stw	zero,0(r16)
    c5c8:	00103dc0 	call	103dc <lseek>
    c5cc:	00ffffc4 	movi	r3,-1
    c5d0:	10c00526 	beq	r2,r3,c5e8 <_lseek_r+0x4c>
    c5d4:	dfc00217 	ldw	ra,8(sp)
    c5d8:	dc400117 	ldw	r17,4(sp)
    c5dc:	dc000017 	ldw	r16,0(sp)
    c5e0:	dec00304 	addi	sp,sp,12
    c5e4:	f800283a 	ret
    c5e8:	80c00017 	ldw	r3,0(r16)
    c5ec:	183ff926 	beq	r3,zero,c5d4 <__alt_data_end+0xfffb6ea4>
    c5f0:	88c00015 	stw	r3,0(r17)
    c5f4:	003ff706 	br	c5d4 <__alt_data_end+0xfffb6ea4>

0000c5f8 <_read_r>:
    c5f8:	defffd04 	addi	sp,sp,-12
    c5fc:	dc000015 	stw	r16,0(sp)
    c600:	04000074 	movhi	r16,1
    c604:	dc400115 	stw	r17,4(sp)
    c608:	841a5a04 	addi	r16,r16,26984
    c60c:	2023883a 	mov	r17,r4
    c610:	2809883a 	mov	r4,r5
    c614:	300b883a 	mov	r5,r6
    c618:	380d883a 	mov	r6,r7
    c61c:	dfc00215 	stw	ra,8(sp)
    c620:	80000015 	stw	zero,0(r16)
    c624:	00105c00 	call	105c0 <read>
    c628:	00ffffc4 	movi	r3,-1
    c62c:	10c00526 	beq	r2,r3,c644 <_read_r+0x4c>
    c630:	dfc00217 	ldw	ra,8(sp)
    c634:	dc400117 	ldw	r17,4(sp)
    c638:	dc000017 	ldw	r16,0(sp)
    c63c:	dec00304 	addi	sp,sp,12
    c640:	f800283a 	ret
    c644:	80c00017 	ldw	r3,0(r16)
    c648:	183ff926 	beq	r3,zero,c630 <__alt_data_end+0xfffb6f00>
    c64c:	88c00015 	stw	r3,0(r17)
    c650:	003ff706 	br	c630 <__alt_data_end+0xfffb6f00>

0000c654 <__swbuf_r>:
    c654:	defffc04 	addi	sp,sp,-16
    c658:	dc800215 	stw	r18,8(sp)
    c65c:	dc400115 	stw	r17,4(sp)
    c660:	dc000015 	stw	r16,0(sp)
    c664:	dfc00315 	stw	ra,12(sp)
    c668:	2025883a 	mov	r18,r4
    c66c:	2823883a 	mov	r17,r5
    c670:	3021883a 	mov	r16,r6
    c674:	20000226 	beq	r4,zero,c680 <__swbuf_r+0x2c>
    c678:	20800e17 	ldw	r2,56(r4)
    c67c:	10004126 	beq	r2,zero,c784 <__swbuf_r+0x130>
    c680:	80c00617 	ldw	r3,24(r16)
    c684:	8180030b 	ldhu	r6,12(r16)
    c688:	80c00215 	stw	r3,8(r16)
    c68c:	30c0020c 	andi	r3,r6,8
    c690:	18003526 	beq	r3,zero,c768 <__swbuf_r+0x114>
    c694:	80c00417 	ldw	r3,16(r16)
    c698:	18003326 	beq	r3,zero,c768 <__swbuf_r+0x114>
    c69c:	3088000c 	andi	r2,r6,8192
    c6a0:	8c403fcc 	andi	r17,r17,255
    c6a4:	10001726 	beq	r2,zero,c704 <__swbuf_r+0xb0>
    c6a8:	80800017 	ldw	r2,0(r16)
    c6ac:	81000517 	ldw	r4,20(r16)
    c6b0:	10c7c83a 	sub	r3,r2,r3
    c6b4:	19001d0e 	bge	r3,r4,c72c <__swbuf_r+0xd8>
    c6b8:	18c00044 	addi	r3,r3,1
    c6bc:	81400217 	ldw	r5,8(r16)
    c6c0:	11000044 	addi	r4,r2,1
    c6c4:	81000015 	stw	r4,0(r16)
    c6c8:	297fffc4 	addi	r5,r5,-1
    c6cc:	81400215 	stw	r5,8(r16)
    c6d0:	14400005 	stb	r17,0(r2)
    c6d4:	80800517 	ldw	r2,20(r16)
    c6d8:	10c01d26 	beq	r2,r3,c750 <__swbuf_r+0xfc>
    c6dc:	8080030b 	ldhu	r2,12(r16)
    c6e0:	1080004c 	andi	r2,r2,1
    c6e4:	1000181e 	bne	r2,zero,c748 <__swbuf_r+0xf4>
    c6e8:	8805883a 	mov	r2,r17
    c6ec:	dfc00317 	ldw	ra,12(sp)
    c6f0:	dc800217 	ldw	r18,8(sp)
    c6f4:	dc400117 	ldw	r17,4(sp)
    c6f8:	dc000017 	ldw	r16,0(sp)
    c6fc:	dec00404 	addi	sp,sp,16
    c700:	f800283a 	ret
    c704:	81001917 	ldw	r4,100(r16)
    c708:	00b7ffc4 	movi	r2,-8193
    c70c:	31880014 	ori	r6,r6,8192
    c710:	2084703a 	and	r2,r4,r2
    c714:	80801915 	stw	r2,100(r16)
    c718:	80800017 	ldw	r2,0(r16)
    c71c:	81000517 	ldw	r4,20(r16)
    c720:	8180030d 	sth	r6,12(r16)
    c724:	10c7c83a 	sub	r3,r2,r3
    c728:	193fe316 	blt	r3,r4,c6b8 <__alt_data_end+0xfffb6f88>
    c72c:	9009883a 	mov	r4,r18
    c730:	800b883a 	mov	r5,r16
    c734:	0007b740 	call	7b74 <_fflush_r>
    c738:	1000091e 	bne	r2,zero,c760 <__swbuf_r+0x10c>
    c73c:	80800017 	ldw	r2,0(r16)
    c740:	00c00044 	movi	r3,1
    c744:	003fdd06 	br	c6bc <__alt_data_end+0xfffb6f8c>
    c748:	00800284 	movi	r2,10
    c74c:	88bfe61e 	bne	r17,r2,c6e8 <__alt_data_end+0xfffb6fb8>
    c750:	9009883a 	mov	r4,r18
    c754:	800b883a 	mov	r5,r16
    c758:	0007b740 	call	7b74 <_fflush_r>
    c75c:	103fe226 	beq	r2,zero,c6e8 <__alt_data_end+0xfffb6fb8>
    c760:	00bfffc4 	movi	r2,-1
    c764:	003fe106 	br	c6ec <__alt_data_end+0xfffb6fbc>
    c768:	9009883a 	mov	r4,r18
    c76c:	800b883a 	mov	r5,r16
    c770:	00060f40 	call	60f4 <__swsetup_r>
    c774:	1000051e 	bne	r2,zero,c78c <__swbuf_r+0x138>
    c778:	8180030b 	ldhu	r6,12(r16)
    c77c:	80c00417 	ldw	r3,16(r16)
    c780:	003fc606 	br	c69c <__alt_data_end+0xfffb6f6c>
    c784:	00081300 	call	8130 <__sinit>
    c788:	003fbd06 	br	c680 <__alt_data_end+0xfffb6f50>
    c78c:	80c0030b 	ldhu	r3,12(r16)
    c790:	00bfffc4 	movi	r2,-1
    c794:	18c01014 	ori	r3,r3,64
    c798:	80c0030d 	sth	r3,12(r16)
    c79c:	00c00244 	movi	r3,9
    c7a0:	90c00015 	stw	r3,0(r18)
    c7a4:	003fd106 	br	c6ec <__alt_data_end+0xfffb6fbc>

0000c7a8 <__swbuf>:
    c7a8:	00c00074 	movhi	r3,1
    c7ac:	18d36c04 	addi	r3,r3,19888
    c7b0:	2005883a 	mov	r2,r4
    c7b4:	19000017 	ldw	r4,0(r3)
    c7b8:	280d883a 	mov	r6,r5
    c7bc:	100b883a 	mov	r5,r2
    c7c0:	000c6541 	jmpi	c654 <__swbuf_r>

0000c7c4 <_wcrtomb_r>:
    c7c4:	defff604 	addi	sp,sp,-40
    c7c8:	00800074 	movhi	r2,1
    c7cc:	dc800815 	stw	r18,32(sp)
    c7d0:	dc400715 	stw	r17,28(sp)
    c7d4:	dc000615 	stw	r16,24(sp)
    c7d8:	10936e04 	addi	r2,r2,19896
    c7dc:	dfc00915 	stw	ra,36(sp)
    c7e0:	2021883a 	mov	r16,r4
    c7e4:	3823883a 	mov	r17,r7
    c7e8:	14800017 	ldw	r18,0(r2)
    c7ec:	28001426 	beq	r5,zero,c840 <_wcrtomb_r+0x7c>
    c7f0:	d9400415 	stw	r5,16(sp)
    c7f4:	d9800515 	stw	r6,20(sp)
    c7f8:	0008c240 	call	8c24 <__locale_charset>
    c7fc:	d9400417 	ldw	r5,16(sp)
    c800:	d9800517 	ldw	r6,20(sp)
    c804:	8009883a 	mov	r4,r16
    c808:	dc400015 	stw	r17,0(sp)
    c80c:	100f883a 	mov	r7,r2
    c810:	903ee83a 	callr	r18
    c814:	00ffffc4 	movi	r3,-1
    c818:	10c0031e 	bne	r2,r3,c828 <_wcrtomb_r+0x64>
    c81c:	88000015 	stw	zero,0(r17)
    c820:	00c02284 	movi	r3,138
    c824:	80c00015 	stw	r3,0(r16)
    c828:	dfc00917 	ldw	ra,36(sp)
    c82c:	dc800817 	ldw	r18,32(sp)
    c830:	dc400717 	ldw	r17,28(sp)
    c834:	dc000617 	ldw	r16,24(sp)
    c838:	dec00a04 	addi	sp,sp,40
    c83c:	f800283a 	ret
    c840:	0008c240 	call	8c24 <__locale_charset>
    c844:	8009883a 	mov	r4,r16
    c848:	dc400015 	stw	r17,0(sp)
    c84c:	d9400104 	addi	r5,sp,4
    c850:	000d883a 	mov	r6,zero
    c854:	100f883a 	mov	r7,r2
    c858:	903ee83a 	callr	r18
    c85c:	003fed06 	br	c814 <__alt_data_end+0xfffb70e4>

0000c860 <wcrtomb>:
    c860:	defff504 	addi	sp,sp,-44
    c864:	dc400515 	stw	r17,20(sp)
    c868:	dc000415 	stw	r16,16(sp)
    c86c:	dfc00a15 	stw	ra,40(sp)
    c870:	dd400915 	stw	r21,36(sp)
    c874:	dd000815 	stw	r20,32(sp)
    c878:	dcc00715 	stw	r19,28(sp)
    c87c:	dc800615 	stw	r18,24(sp)
    c880:	2021883a 	mov	r16,r4
    c884:	3023883a 	mov	r17,r6
    c888:	20001d26 	beq	r4,zero,c900 <wcrtomb+0xa0>
    c88c:	04800074 	movhi	r18,1
    c890:	94936c04 	addi	r18,r18,19888
    c894:	00800074 	movhi	r2,1
    c898:	95400017 	ldw	r21,0(r18)
    c89c:	10936e04 	addi	r2,r2,19896
    c8a0:	15000017 	ldw	r20,0(r2)
    c8a4:	2827883a 	mov	r19,r5
    c8a8:	0008c240 	call	8c24 <__locale_charset>
    c8ac:	a809883a 	mov	r4,r21
    c8b0:	dc400015 	stw	r17,0(sp)
    c8b4:	800b883a 	mov	r5,r16
    c8b8:	980d883a 	mov	r6,r19
    c8bc:	100f883a 	mov	r7,r2
    c8c0:	a03ee83a 	callr	r20
    c8c4:	00ffffc4 	movi	r3,-1
    c8c8:	10c0041e 	bne	r2,r3,c8dc <wcrtomb+0x7c>
    c8cc:	90c00017 	ldw	r3,0(r18)
    c8d0:	01002284 	movi	r4,138
    c8d4:	88000015 	stw	zero,0(r17)
    c8d8:	19000015 	stw	r4,0(r3)
    c8dc:	dfc00a17 	ldw	ra,40(sp)
    c8e0:	dd400917 	ldw	r21,36(sp)
    c8e4:	dd000817 	ldw	r20,32(sp)
    c8e8:	dcc00717 	ldw	r19,28(sp)
    c8ec:	dc800617 	ldw	r18,24(sp)
    c8f0:	dc400517 	ldw	r17,20(sp)
    c8f4:	dc000417 	ldw	r16,16(sp)
    c8f8:	dec00b04 	addi	sp,sp,44
    c8fc:	f800283a 	ret
    c900:	04800074 	movhi	r18,1
    c904:	94936c04 	addi	r18,r18,19888
    c908:	00800074 	movhi	r2,1
    c90c:	94c00017 	ldw	r19,0(r18)
    c910:	10936e04 	addi	r2,r2,19896
    c914:	14000017 	ldw	r16,0(r2)
    c918:	0008c240 	call	8c24 <__locale_charset>
    c91c:	9809883a 	mov	r4,r19
    c920:	dc400015 	stw	r17,0(sp)
    c924:	d9400104 	addi	r5,sp,4
    c928:	000d883a 	mov	r6,zero
    c92c:	100f883a 	mov	r7,r2
    c930:	803ee83a 	callr	r16
    c934:	003fe306 	br	c8c4 <__alt_data_end+0xfffb7194>

0000c938 <__ascii_wctomb>:
    c938:	28000526 	beq	r5,zero,c950 <__ascii_wctomb+0x18>
    c93c:	00803fc4 	movi	r2,255
    c940:	11800536 	bltu	r2,r6,c958 <__ascii_wctomb+0x20>
    c944:	29800005 	stb	r6,0(r5)
    c948:	00800044 	movi	r2,1
    c94c:	f800283a 	ret
    c950:	0005883a 	mov	r2,zero
    c954:	f800283a 	ret
    c958:	00802284 	movi	r2,138
    c95c:	20800015 	stw	r2,0(r4)
    c960:	00bfffc4 	movi	r2,-1
    c964:	f800283a 	ret

0000c968 <_wctomb_r>:
    c968:	00800074 	movhi	r2,1
    c96c:	defff904 	addi	sp,sp,-28
    c970:	10936e04 	addi	r2,r2,19896
    c974:	dfc00615 	stw	ra,24(sp)
    c978:	dc400515 	stw	r17,20(sp)
    c97c:	dc000415 	stw	r16,16(sp)
    c980:	3823883a 	mov	r17,r7
    c984:	14000017 	ldw	r16,0(r2)
    c988:	d9000115 	stw	r4,4(sp)
    c98c:	d9400215 	stw	r5,8(sp)
    c990:	d9800315 	stw	r6,12(sp)
    c994:	0008c240 	call	8c24 <__locale_charset>
    c998:	d9000117 	ldw	r4,4(sp)
    c99c:	d9400217 	ldw	r5,8(sp)
    c9a0:	d9800317 	ldw	r6,12(sp)
    c9a4:	dc400015 	stw	r17,0(sp)
    c9a8:	100f883a 	mov	r7,r2
    c9ac:	803ee83a 	callr	r16
    c9b0:	dfc00617 	ldw	ra,24(sp)
    c9b4:	dc400517 	ldw	r17,20(sp)
    c9b8:	dc000417 	ldw	r16,16(sp)
    c9bc:	dec00704 	addi	sp,sp,28
    c9c0:	f800283a 	ret

0000c9c4 <__muldi3>:
    c9c4:	defff604 	addi	sp,sp,-40
    c9c8:	dd800615 	stw	r22,24(sp)
    c9cc:	dd400515 	stw	r21,20(sp)
    c9d0:	25bfffcc 	andi	r22,r4,65535
    c9d4:	357fffcc 	andi	r21,r6,65535
    c9d8:	dc400115 	stw	r17,4(sp)
    c9dc:	2022d43a 	srli	r17,r4,16
    c9e0:	dcc00315 	stw	r19,12(sp)
    c9e4:	dc800215 	stw	r18,8(sp)
    c9e8:	2027883a 	mov	r19,r4
    c9ec:	2825883a 	mov	r18,r5
    c9f0:	a809883a 	mov	r4,r21
    c9f4:	b00b883a 	mov	r5,r22
    c9f8:	dfc00915 	stw	ra,36(sp)
    c9fc:	df000815 	stw	fp,32(sp)
    ca00:	ddc00715 	stw	r23,28(sp)
    ca04:	3839883a 	mov	fp,r7
    ca08:	302ed43a 	srli	r23,r6,16
    ca0c:	dd000415 	stw	r20,16(sp)
    ca10:	dc000015 	stw	r16,0(sp)
    ca14:	3029883a 	mov	r20,r6
    ca18:	000d72c0 	call	d72c <__mulsi3>
    ca1c:	a809883a 	mov	r4,r21
    ca20:	880b883a 	mov	r5,r17
    ca24:	1021883a 	mov	r16,r2
    ca28:	000d72c0 	call	d72c <__mulsi3>
    ca2c:	880b883a 	mov	r5,r17
    ca30:	b809883a 	mov	r4,r23
    ca34:	102b883a 	mov	r21,r2
    ca38:	000d72c0 	call	d72c <__mulsi3>
    ca3c:	b809883a 	mov	r4,r23
    ca40:	b00b883a 	mov	r5,r22
    ca44:	1023883a 	mov	r17,r2
    ca48:	000d72c0 	call	d72c <__mulsi3>
    ca4c:	8012d43a 	srli	r9,r16,16
    ca50:	a885883a 	add	r2,r21,r2
    ca54:	1251883a 	add	r8,r2,r9
    ca58:	4540022e 	bgeu	r8,r21,ca64 <__muldi3+0xa0>
    ca5c:	00800074 	movhi	r2,1
    ca60:	88a3883a 	add	r17,r17,r2
    ca64:	4006d43a 	srli	r3,r8,16
    ca68:	4010943a 	slli	r8,r8,16
    ca6c:	9809883a 	mov	r4,r19
    ca70:	e00b883a 	mov	r5,fp
    ca74:	843fffcc 	andi	r16,r16,65535
    ca78:	88e3883a 	add	r17,r17,r3
    ca7c:	4421883a 	add	r16,r8,r16
    ca80:	000d72c0 	call	d72c <__mulsi3>
    ca84:	a009883a 	mov	r4,r20
    ca88:	900b883a 	mov	r5,r18
    ca8c:	1027883a 	mov	r19,r2
    ca90:	000d72c0 	call	d72c <__mulsi3>
    ca94:	9885883a 	add	r2,r19,r2
    ca98:	1447883a 	add	r3,r2,r17
    ca9c:	8005883a 	mov	r2,r16
    caa0:	dfc00917 	ldw	ra,36(sp)
    caa4:	df000817 	ldw	fp,32(sp)
    caa8:	ddc00717 	ldw	r23,28(sp)
    caac:	dd800617 	ldw	r22,24(sp)
    cab0:	dd400517 	ldw	r21,20(sp)
    cab4:	dd000417 	ldw	r20,16(sp)
    cab8:	dcc00317 	ldw	r19,12(sp)
    cabc:	dc800217 	ldw	r18,8(sp)
    cac0:	dc400117 	ldw	r17,4(sp)
    cac4:	dc000017 	ldw	r16,0(sp)
    cac8:	dec00a04 	addi	sp,sp,40
    cacc:	f800283a 	ret

0000cad0 <__udivdi3>:
    cad0:	defff504 	addi	sp,sp,-44
    cad4:	dcc00415 	stw	r19,16(sp)
    cad8:	dc000115 	stw	r16,4(sp)
    cadc:	dfc00a15 	stw	ra,40(sp)
    cae0:	df000915 	stw	fp,36(sp)
    cae4:	ddc00815 	stw	r23,32(sp)
    cae8:	dd800715 	stw	r22,28(sp)
    caec:	dd400615 	stw	r21,24(sp)
    caf0:	dd000515 	stw	r20,20(sp)
    caf4:	dc800315 	stw	r18,12(sp)
    caf8:	dc400215 	stw	r17,8(sp)
    cafc:	2027883a 	mov	r19,r4
    cb00:	2821883a 	mov	r16,r5
    cb04:	3800471e 	bne	r7,zero,cc24 <__udivdi3+0x154>
    cb08:	3025883a 	mov	r18,r6
    cb0c:	2023883a 	mov	r17,r4
    cb10:	2980592e 	bgeu	r5,r6,cc78 <__udivdi3+0x1a8>
    cb14:	00bfffd4 	movui	r2,65535
    cb18:	2829883a 	mov	r20,r5
    cb1c:	1180b236 	bltu	r2,r6,cde8 <__udivdi3+0x318>
    cb20:	00803fc4 	movi	r2,255
    cb24:	1181622e 	bgeu	r2,r6,d0b0 <__udivdi3+0x5e0>
    cb28:	00800204 	movi	r2,8
    cb2c:	1007883a 	mov	r3,r2
    cb30:	3084d83a 	srl	r2,r6,r2
    cb34:	01000074 	movhi	r4,1
    cb38:	210c5504 	addi	r4,r4,12628
    cb3c:	2085883a 	add	r2,r4,r2
    cb40:	11000003 	ldbu	r4,0(r2)
    cb44:	20c9883a 	add	r4,r4,r3
    cb48:	00c00804 	movi	r3,32
    cb4c:	1907c83a 	sub	r3,r3,r4
    cb50:	18000526 	beq	r3,zero,cb68 <__udivdi3+0x98>
    cb54:	80e0983a 	sll	r16,r16,r3
    cb58:	9908d83a 	srl	r4,r19,r4
    cb5c:	30e4983a 	sll	r18,r6,r3
    cb60:	98e2983a 	sll	r17,r19,r3
    cb64:	8128b03a 	or	r20,r16,r4
    cb68:	902ad43a 	srli	r21,r18,16
    cb6c:	a009883a 	mov	r4,r20
    cb70:	95bfffcc 	andi	r22,r18,65535
    cb74:	a80b883a 	mov	r5,r21
    cb78:	00035600 	call	3560 <__umodsi3>
    cb7c:	a009883a 	mov	r4,r20
    cb80:	a80b883a 	mov	r5,r21
    cb84:	102f883a 	mov	r23,r2
    cb88:	00035580 	call	3558 <__udivsi3>
    cb8c:	1009883a 	mov	r4,r2
    cb90:	b00b883a 	mov	r5,r22
    cb94:	1021883a 	mov	r16,r2
    cb98:	000d72c0 	call	d72c <__mulsi3>
    cb9c:	b82e943a 	slli	r23,r23,16
    cba0:	8808d43a 	srli	r4,r17,16
    cba4:	b906b03a 	or	r3,r23,r4
    cba8:	1880052e 	bgeu	r3,r2,cbc0 <__udivdi3+0xf0>
    cbac:	1c87883a 	add	r3,r3,r18
    cbb0:	813fffc4 	addi	r4,r16,-1
    cbb4:	1c800136 	bltu	r3,r18,cbbc <__udivdi3+0xec>
    cbb8:	18815236 	bltu	r3,r2,d104 <__udivdi3+0x634>
    cbbc:	2021883a 	mov	r16,r4
    cbc0:	18a7c83a 	sub	r19,r3,r2
    cbc4:	9809883a 	mov	r4,r19
    cbc8:	a80b883a 	mov	r5,r21
    cbcc:	00035600 	call	3560 <__umodsi3>
    cbd0:	1029883a 	mov	r20,r2
    cbd4:	9809883a 	mov	r4,r19
    cbd8:	a80b883a 	mov	r5,r21
    cbdc:	a028943a 	slli	r20,r20,16
    cbe0:	00035580 	call	3558 <__udivsi3>
    cbe4:	1009883a 	mov	r4,r2
    cbe8:	b00b883a 	mov	r5,r22
    cbec:	8c7fffcc 	andi	r17,r17,65535
    cbf0:	1027883a 	mov	r19,r2
    cbf4:	a462b03a 	or	r17,r20,r17
    cbf8:	000d72c0 	call	d72c <__mulsi3>
    cbfc:	8880052e 	bgeu	r17,r2,cc14 <__udivdi3+0x144>
    cc00:	8ca3883a 	add	r17,r17,r18
    cc04:	98ffffc4 	addi	r3,r19,-1
    cc08:	8c811036 	bltu	r17,r18,d04c <__udivdi3+0x57c>
    cc0c:	88810f2e 	bgeu	r17,r2,d04c <__udivdi3+0x57c>
    cc10:	9cffff84 	addi	r19,r19,-2
    cc14:	8020943a 	slli	r16,r16,16
    cc18:	0007883a 	mov	r3,zero
    cc1c:	9c04b03a 	or	r2,r19,r16
    cc20:	00006006 	br	cda4 <__udivdi3+0x2d4>
    cc24:	29c05d36 	bltu	r5,r7,cd9c <__udivdi3+0x2cc>
    cc28:	00bfffd4 	movui	r2,65535
    cc2c:	11c0692e 	bgeu	r2,r7,cdd4 <__udivdi3+0x304>
    cc30:	00804034 	movhi	r2,256
    cc34:	10bfffc4 	addi	r2,r2,-1
    cc38:	11c10e2e 	bgeu	r2,r7,d074 <__udivdi3+0x5a4>
    cc3c:	01400604 	movi	r5,24
    cc40:	2811883a 	mov	r8,r5
    cc44:	394ad83a 	srl	r5,r7,r5
    cc48:	00800074 	movhi	r2,1
    cc4c:	108c5504 	addi	r2,r2,12628
    cc50:	114b883a 	add	r5,r2,r5
    cc54:	29400003 	ldbu	r5,0(r5)
    cc58:	00c00804 	movi	r3,32
    cc5c:	2a0b883a 	add	r5,r5,r8
    cc60:	196fc83a 	sub	r23,r3,r5
    cc64:	b8006b1e 	bne	r23,zero,ce14 <__udivdi3+0x344>
    cc68:	3c011436 	bltu	r7,r16,d0bc <__udivdi3+0x5ec>
    cc6c:	9985403a 	cmpgeu	r2,r19,r6
    cc70:	0007883a 	mov	r3,zero
    cc74:	00004b06 	br	cda4 <__udivdi3+0x2d4>
    cc78:	3000041e 	bne	r6,zero,cc8c <__udivdi3+0x1bc>
    cc7c:	01000044 	movi	r4,1
    cc80:	000b883a 	mov	r5,zero
    cc84:	00035580 	call	3558 <__udivsi3>
    cc88:	1025883a 	mov	r18,r2
    cc8c:	00bfffd4 	movui	r2,65535
    cc90:	14805b2e 	bgeu	r2,r18,ce00 <__udivdi3+0x330>
    cc94:	00804034 	movhi	r2,256
    cc98:	10bfffc4 	addi	r2,r2,-1
    cc9c:	1480fe2e 	bgeu	r2,r18,d098 <__udivdi3+0x5c8>
    cca0:	00800604 	movi	r2,24
    cca4:	1007883a 	mov	r3,r2
    cca8:	9084d83a 	srl	r2,r18,r2
    ccac:	01000074 	movhi	r4,1
    ccb0:	210c5504 	addi	r4,r4,12628
    ccb4:	2085883a 	add	r2,r4,r2
    ccb8:	11800003 	ldbu	r6,0(r2)
    ccbc:	01c00804 	movi	r7,32
    ccc0:	30c7883a 	add	r3,r6,r3
    ccc4:	38cfc83a 	sub	r7,r7,r3
    ccc8:	3800a71e 	bne	r7,zero,cf68 <__udivdi3+0x498>
    cccc:	9028d43a 	srli	r20,r18,16
    ccd0:	84a1c83a 	sub	r16,r16,r18
    ccd4:	957fffcc 	andi	r21,r18,65535
    ccd8:	00c00044 	movi	r3,1
    ccdc:	8009883a 	mov	r4,r16
    cce0:	a00b883a 	mov	r5,r20
    cce4:	d8c00015 	stw	r3,0(sp)
    cce8:	00035600 	call	3560 <__umodsi3>
    ccec:	8009883a 	mov	r4,r16
    ccf0:	a00b883a 	mov	r5,r20
    ccf4:	102d883a 	mov	r22,r2
    ccf8:	00035580 	call	3558 <__udivsi3>
    ccfc:	1009883a 	mov	r4,r2
    cd00:	a80b883a 	mov	r5,r21
    cd04:	1021883a 	mov	r16,r2
    cd08:	000d72c0 	call	d72c <__mulsi3>
    cd0c:	b02c943a 	slli	r22,r22,16
    cd10:	880ed43a 	srli	r7,r17,16
    cd14:	d8c00017 	ldw	r3,0(sp)
    cd18:	b1ccb03a 	or	r6,r22,r7
    cd1c:	3080052e 	bgeu	r6,r2,cd34 <__udivdi3+0x264>
    cd20:	348d883a 	add	r6,r6,r18
    cd24:	813fffc4 	addi	r4,r16,-1
    cd28:	34800136 	bltu	r6,r18,cd30 <__udivdi3+0x260>
    cd2c:	3080f236 	bltu	r6,r2,d0f8 <__udivdi3+0x628>
    cd30:	2021883a 	mov	r16,r4
    cd34:	30a7c83a 	sub	r19,r6,r2
    cd38:	9809883a 	mov	r4,r19
    cd3c:	a00b883a 	mov	r5,r20
    cd40:	d8c00015 	stw	r3,0(sp)
    cd44:	00035600 	call	3560 <__umodsi3>
    cd48:	102d883a 	mov	r22,r2
    cd4c:	9809883a 	mov	r4,r19
    cd50:	a00b883a 	mov	r5,r20
    cd54:	b02c943a 	slli	r22,r22,16
    cd58:	00035580 	call	3558 <__udivsi3>
    cd5c:	1009883a 	mov	r4,r2
    cd60:	a80b883a 	mov	r5,r21
    cd64:	8c7fffcc 	andi	r17,r17,65535
    cd68:	1027883a 	mov	r19,r2
    cd6c:	b462b03a 	or	r17,r22,r17
    cd70:	000d72c0 	call	d72c <__mulsi3>
    cd74:	d8c00017 	ldw	r3,0(sp)
    cd78:	8880052e 	bgeu	r17,r2,cd90 <__udivdi3+0x2c0>
    cd7c:	8ca3883a 	add	r17,r17,r18
    cd80:	993fffc4 	addi	r4,r19,-1
    cd84:	8c80af36 	bltu	r17,r18,d044 <__udivdi3+0x574>
    cd88:	8880ae2e 	bgeu	r17,r2,d044 <__udivdi3+0x574>
    cd8c:	9cffff84 	addi	r19,r19,-2
    cd90:	8020943a 	slli	r16,r16,16
    cd94:	9c04b03a 	or	r2,r19,r16
    cd98:	00000206 	br	cda4 <__udivdi3+0x2d4>
    cd9c:	0007883a 	mov	r3,zero
    cda0:	0005883a 	mov	r2,zero
    cda4:	dfc00a17 	ldw	ra,40(sp)
    cda8:	df000917 	ldw	fp,36(sp)
    cdac:	ddc00817 	ldw	r23,32(sp)
    cdb0:	dd800717 	ldw	r22,28(sp)
    cdb4:	dd400617 	ldw	r21,24(sp)
    cdb8:	dd000517 	ldw	r20,20(sp)
    cdbc:	dcc00417 	ldw	r19,16(sp)
    cdc0:	dc800317 	ldw	r18,12(sp)
    cdc4:	dc400217 	ldw	r17,8(sp)
    cdc8:	dc000117 	ldw	r16,4(sp)
    cdcc:	dec00b04 	addi	sp,sp,44
    cdd0:	f800283a 	ret
    cdd4:	00803fc4 	movi	r2,255
    cdd8:	11c0a92e 	bgeu	r2,r7,d080 <__udivdi3+0x5b0>
    cddc:	01400204 	movi	r5,8
    cde0:	2811883a 	mov	r8,r5
    cde4:	003f9706 	br	cc44 <__alt_data_end+0xfffb7514>
    cde8:	00804034 	movhi	r2,256
    cdec:	10bfffc4 	addi	r2,r2,-1
    cdf0:	1180a62e 	bgeu	r2,r6,d08c <__udivdi3+0x5bc>
    cdf4:	00800604 	movi	r2,24
    cdf8:	1007883a 	mov	r3,r2
    cdfc:	003f4c06 	br	cb30 <__alt_data_end+0xfffb7400>
    ce00:	00803fc4 	movi	r2,255
    ce04:	1480a72e 	bgeu	r2,r18,d0a4 <__udivdi3+0x5d4>
    ce08:	00800204 	movi	r2,8
    ce0c:	1007883a 	mov	r3,r2
    ce10:	003fa506 	br	cca8 <__alt_data_end+0xfffb7578>
    ce14:	3178d83a 	srl	fp,r6,r5
    ce18:	3dce983a 	sll	r7,r7,r23
    ce1c:	8168d83a 	srl	r20,r16,r5
    ce20:	9950d83a 	srl	r8,r19,r5
    ce24:	3f38b03a 	or	fp,r7,fp
    ce28:	e024d43a 	srli	r18,fp,16
    ce2c:	85e0983a 	sll	r16,r16,r23
    ce30:	a009883a 	mov	r4,r20
    ce34:	900b883a 	mov	r5,r18
    ce38:	8220b03a 	or	r16,r16,r8
    ce3c:	35ea983a 	sll	r21,r6,r23
    ce40:	00035600 	call	3560 <__umodsi3>
    ce44:	a009883a 	mov	r4,r20
    ce48:	900b883a 	mov	r5,r18
    ce4c:	1023883a 	mov	r17,r2
    ce50:	e5bfffcc 	andi	r22,fp,65535
    ce54:	00035580 	call	3558 <__udivsi3>
    ce58:	1009883a 	mov	r4,r2
    ce5c:	b00b883a 	mov	r5,r22
    ce60:	1029883a 	mov	r20,r2
    ce64:	000d72c0 	call	d72c <__mulsi3>
    ce68:	8806943a 	slli	r3,r17,16
    ce6c:	8014d43a 	srli	r10,r16,16
    ce70:	1a92b03a 	or	r9,r3,r10
    ce74:	4880042e 	bgeu	r9,r2,ce88 <__udivdi3+0x3b8>
    ce78:	4f13883a 	add	r9,r9,fp
    ce7c:	a0ffffc4 	addi	r3,r20,-1
    ce80:	4f00952e 	bgeu	r9,fp,d0d8 <__udivdi3+0x608>
    ce84:	1829883a 	mov	r20,r3
    ce88:	48a3c83a 	sub	r17,r9,r2
    ce8c:	8809883a 	mov	r4,r17
    ce90:	900b883a 	mov	r5,r18
    ce94:	00035600 	call	3560 <__umodsi3>
    ce98:	8809883a 	mov	r4,r17
    ce9c:	900b883a 	mov	r5,r18
    cea0:	d8800015 	stw	r2,0(sp)
    cea4:	00035580 	call	3558 <__udivsi3>
    cea8:	1009883a 	mov	r4,r2
    ceac:	b00b883a 	mov	r5,r22
    ceb0:	1023883a 	mov	r17,r2
    ceb4:	000d72c0 	call	d72c <__mulsi3>
    ceb8:	d8c00017 	ldw	r3,0(sp)
    cebc:	823fffcc 	andi	r8,r16,65535
    cec0:	1806943a 	slli	r3,r3,16
    cec4:	1a20b03a 	or	r16,r3,r8
    cec8:	8080042e 	bgeu	r16,r2,cedc <__udivdi3+0x40c>
    cecc:	8721883a 	add	r16,r16,fp
    ced0:	88ffffc4 	addi	r3,r17,-1
    ced4:	87007c2e 	bgeu	r16,fp,d0c8 <__udivdi3+0x5f8>
    ced8:	1823883a 	mov	r17,r3
    cedc:	a028943a 	slli	r20,r20,16
    cee0:	acbfffcc 	andi	r18,r21,65535
    cee4:	900b883a 	mov	r5,r18
    cee8:	8d28b03a 	or	r20,r17,r20
    ceec:	a022d43a 	srli	r17,r20,16
    cef0:	a5bfffcc 	andi	r22,r20,65535
    cef4:	b009883a 	mov	r4,r22
    cef8:	a82ad43a 	srli	r21,r21,16
    cefc:	80a1c83a 	sub	r16,r16,r2
    cf00:	000d72c0 	call	d72c <__mulsi3>
    cf04:	8809883a 	mov	r4,r17
    cf08:	900b883a 	mov	r5,r18
    cf0c:	1039883a 	mov	fp,r2
    cf10:	000d72c0 	call	d72c <__mulsi3>
    cf14:	8809883a 	mov	r4,r17
    cf18:	a80b883a 	mov	r5,r21
    cf1c:	1025883a 	mov	r18,r2
    cf20:	000d72c0 	call	d72c <__mulsi3>
    cf24:	b009883a 	mov	r4,r22
    cf28:	a80b883a 	mov	r5,r21
    cf2c:	1023883a 	mov	r17,r2
    cf30:	000d72c0 	call	d72c <__mulsi3>
    cf34:	e006d43a 	srli	r3,fp,16
    cf38:	9085883a 	add	r2,r18,r2
    cf3c:	10c7883a 	add	r3,r2,r3
    cf40:	1c80022e 	bgeu	r3,r18,cf4c <__udivdi3+0x47c>
    cf44:	00800074 	movhi	r2,1
    cf48:	88a3883a 	add	r17,r17,r2
    cf4c:	1808d43a 	srli	r4,r3,16
    cf50:	8909883a 	add	r4,r17,r4
    cf54:	81004436 	bltu	r16,r4,d068 <__udivdi3+0x598>
    cf58:	81003e26 	beq	r16,r4,d054 <__udivdi3+0x584>
    cf5c:	a005883a 	mov	r2,r20
    cf60:	0007883a 	mov	r3,zero
    cf64:	003f8f06 	br	cda4 <__alt_data_end+0xfffb7674>
    cf68:	91e4983a 	sll	r18,r18,r7
    cf6c:	80eed83a 	srl	r23,r16,r3
    cf70:	81cc983a 	sll	r6,r16,r7
    cf74:	9028d43a 	srli	r20,r18,16
    cf78:	98c6d83a 	srl	r3,r19,r3
    cf7c:	b809883a 	mov	r4,r23
    cf80:	a00b883a 	mov	r5,r20
    cf84:	30ecb03a 	or	r22,r6,r3
    cf88:	99e2983a 	sll	r17,r19,r7
    cf8c:	00035600 	call	3560 <__umodsi3>
    cf90:	b809883a 	mov	r4,r23
    cf94:	a00b883a 	mov	r5,r20
    cf98:	1021883a 	mov	r16,r2
    cf9c:	957fffcc 	andi	r21,r18,65535
    cfa0:	00035580 	call	3558 <__udivsi3>
    cfa4:	a80b883a 	mov	r5,r21
    cfa8:	1009883a 	mov	r4,r2
    cfac:	102f883a 	mov	r23,r2
    cfb0:	000d72c0 	call	d72c <__mulsi3>
    cfb4:	8020943a 	slli	r16,r16,16
    cfb8:	b00ad43a 	srli	r5,r22,16
    cfbc:	814cb03a 	or	r6,r16,r5
    cfc0:	3080062e 	bgeu	r6,r2,cfdc <__udivdi3+0x50c>
    cfc4:	348d883a 	add	r6,r6,r18
    cfc8:	b8ffffc4 	addi	r3,r23,-1
    cfcc:	34804836 	bltu	r6,r18,d0f0 <__udivdi3+0x620>
    cfd0:	3080472e 	bgeu	r6,r2,d0f0 <__udivdi3+0x620>
    cfd4:	bdffff84 	addi	r23,r23,-2
    cfd8:	348d883a 	add	r6,r6,r18
    cfdc:	30a7c83a 	sub	r19,r6,r2
    cfe0:	9809883a 	mov	r4,r19
    cfe4:	a00b883a 	mov	r5,r20
    cfe8:	00035600 	call	3560 <__umodsi3>
    cfec:	9809883a 	mov	r4,r19
    cff0:	a00b883a 	mov	r5,r20
    cff4:	1039883a 	mov	fp,r2
    cff8:	00035580 	call	3558 <__udivsi3>
    cffc:	1009883a 	mov	r4,r2
    d000:	a80b883a 	mov	r5,r21
    d004:	e038943a 	slli	fp,fp,16
    d008:	1027883a 	mov	r19,r2
    d00c:	000d72c0 	call	d72c <__mulsi3>
    d010:	b1bfffcc 	andi	r6,r22,65535
    d014:	e18cb03a 	or	r6,fp,r6
    d018:	3080062e 	bgeu	r6,r2,d034 <__udivdi3+0x564>
    d01c:	348d883a 	add	r6,r6,r18
    d020:	98ffffc4 	addi	r3,r19,-1
    d024:	34803036 	bltu	r6,r18,d0e8 <__udivdi3+0x618>
    d028:	30802f2e 	bgeu	r6,r2,d0e8 <__udivdi3+0x618>
    d02c:	9cffff84 	addi	r19,r19,-2
    d030:	348d883a 	add	r6,r6,r18
    d034:	b82e943a 	slli	r23,r23,16
    d038:	30a1c83a 	sub	r16,r6,r2
    d03c:	9dc6b03a 	or	r3,r19,r23
    d040:	003f2606 	br	ccdc <__alt_data_end+0xfffb75ac>
    d044:	2027883a 	mov	r19,r4
    d048:	003f5106 	br	cd90 <__alt_data_end+0xfffb7660>
    d04c:	1827883a 	mov	r19,r3
    d050:	003ef006 	br	cc14 <__alt_data_end+0xfffb74e4>
    d054:	1808943a 	slli	r4,r3,16
    d058:	9dc6983a 	sll	r3,r19,r23
    d05c:	e73fffcc 	andi	fp,fp,65535
    d060:	2709883a 	add	r4,r4,fp
    d064:	193fbd2e 	bgeu	r3,r4,cf5c <__alt_data_end+0xfffb782c>
    d068:	a0bfffc4 	addi	r2,r20,-1
    d06c:	0007883a 	mov	r3,zero
    d070:	003f4c06 	br	cda4 <__alt_data_end+0xfffb7674>
    d074:	01400404 	movi	r5,16
    d078:	2811883a 	mov	r8,r5
    d07c:	003ef106 	br	cc44 <__alt_data_end+0xfffb7514>
    d080:	000b883a 	mov	r5,zero
    d084:	0011883a 	mov	r8,zero
    d088:	003eee06 	br	cc44 <__alt_data_end+0xfffb7514>
    d08c:	00800404 	movi	r2,16
    d090:	1007883a 	mov	r3,r2
    d094:	003ea606 	br	cb30 <__alt_data_end+0xfffb7400>
    d098:	00800404 	movi	r2,16
    d09c:	1007883a 	mov	r3,r2
    d0a0:	003f0106 	br	cca8 <__alt_data_end+0xfffb7578>
    d0a4:	0005883a 	mov	r2,zero
    d0a8:	0007883a 	mov	r3,zero
    d0ac:	003efe06 	br	cca8 <__alt_data_end+0xfffb7578>
    d0b0:	0005883a 	mov	r2,zero
    d0b4:	0007883a 	mov	r3,zero
    d0b8:	003e9d06 	br	cb30 <__alt_data_end+0xfffb7400>
    d0bc:	0007883a 	mov	r3,zero
    d0c0:	00800044 	movi	r2,1
    d0c4:	003f3706 	br	cda4 <__alt_data_end+0xfffb7674>
    d0c8:	80bf832e 	bgeu	r16,r2,ced8 <__alt_data_end+0xfffb77a8>
    d0cc:	8c7fff84 	addi	r17,r17,-2
    d0d0:	8721883a 	add	r16,r16,fp
    d0d4:	003f8106 	br	cedc <__alt_data_end+0xfffb77ac>
    d0d8:	48bf6a2e 	bgeu	r9,r2,ce84 <__alt_data_end+0xfffb7754>
    d0dc:	a53fff84 	addi	r20,r20,-2
    d0e0:	4f13883a 	add	r9,r9,fp
    d0e4:	003f6806 	br	ce88 <__alt_data_end+0xfffb7758>
    d0e8:	1827883a 	mov	r19,r3
    d0ec:	003fd106 	br	d034 <__alt_data_end+0xfffb7904>
    d0f0:	182f883a 	mov	r23,r3
    d0f4:	003fb906 	br	cfdc <__alt_data_end+0xfffb78ac>
    d0f8:	843fff84 	addi	r16,r16,-2
    d0fc:	348d883a 	add	r6,r6,r18
    d100:	003f0c06 	br	cd34 <__alt_data_end+0xfffb7604>
    d104:	843fff84 	addi	r16,r16,-2
    d108:	1c87883a 	add	r3,r3,r18
    d10c:	003eac06 	br	cbc0 <__alt_data_end+0xfffb7490>

0000d110 <__umoddi3>:
    d110:	defff404 	addi	sp,sp,-48
    d114:	dd800815 	stw	r22,32(sp)
    d118:	dc400315 	stw	r17,12(sp)
    d11c:	dc000215 	stw	r16,8(sp)
    d120:	dfc00b15 	stw	ra,44(sp)
    d124:	df000a15 	stw	fp,40(sp)
    d128:	ddc00915 	stw	r23,36(sp)
    d12c:	dd400715 	stw	r21,28(sp)
    d130:	dd000615 	stw	r20,24(sp)
    d134:	dcc00515 	stw	r19,20(sp)
    d138:	dc800415 	stw	r18,16(sp)
    d13c:	2021883a 	mov	r16,r4
    d140:	2823883a 	mov	r17,r5
    d144:	282d883a 	mov	r22,r5
    d148:	38003c1e 	bne	r7,zero,d23c <__umoddi3+0x12c>
    d14c:	3027883a 	mov	r19,r6
    d150:	2029883a 	mov	r20,r4
    d154:	2980522e 	bgeu	r5,r6,d2a0 <__umoddi3+0x190>
    d158:	00bfffd4 	movui	r2,65535
    d15c:	1180a436 	bltu	r2,r6,d3f0 <__umoddi3+0x2e0>
    d160:	00803fc4 	movi	r2,255
    d164:	11815e2e 	bgeu	r2,r6,d6e0 <__umoddi3+0x5d0>
    d168:	01400204 	movi	r5,8
    d16c:	2805883a 	mov	r2,r5
    d170:	314ad83a 	srl	r5,r6,r5
    d174:	00c00074 	movhi	r3,1
    d178:	18cc5504 	addi	r3,r3,12628
    d17c:	194b883a 	add	r5,r3,r5
    d180:	29000003 	ldbu	r4,0(r5)
    d184:	2089883a 	add	r4,r4,r2
    d188:	00800804 	movi	r2,32
    d18c:	1105c83a 	sub	r2,r2,r4
    d190:	10010c26 	beq	r2,zero,d5c4 <__umoddi3+0x4b4>
    d194:	88a2983a 	sll	r17,r17,r2
    d198:	8108d83a 	srl	r4,r16,r4
    d19c:	30a6983a 	sll	r19,r6,r2
    d1a0:	80a8983a 	sll	r20,r16,r2
    d1a4:	1025883a 	mov	r18,r2
    d1a8:	892cb03a 	or	r22,r17,r4
    d1ac:	9822d43a 	srli	r17,r19,16
    d1b0:	b009883a 	mov	r4,r22
    d1b4:	9d7fffcc 	andi	r21,r19,65535
    d1b8:	880b883a 	mov	r5,r17
    d1bc:	00035600 	call	3560 <__umodsi3>
    d1c0:	b009883a 	mov	r4,r22
    d1c4:	880b883a 	mov	r5,r17
    d1c8:	102f883a 	mov	r23,r2
    d1cc:	00035580 	call	3558 <__udivsi3>
    d1d0:	1009883a 	mov	r4,r2
    d1d4:	a80b883a 	mov	r5,r21
    d1d8:	000d72c0 	call	d72c <__mulsi3>
    d1dc:	b82e943a 	slli	r23,r23,16
    d1e0:	a008d43a 	srli	r4,r20,16
    d1e4:	b906b03a 	or	r3,r23,r4
    d1e8:	1880042e 	bgeu	r3,r2,d1fc <__umoddi3+0xec>
    d1ec:	1cc7883a 	add	r3,r3,r19
    d1f0:	1cc00236 	bltu	r3,r19,d1fc <__umoddi3+0xec>
    d1f4:	1880012e 	bgeu	r3,r2,d1fc <__umoddi3+0xec>
    d1f8:	1cc7883a 	add	r3,r3,r19
    d1fc:	18a1c83a 	sub	r16,r3,r2
    d200:	8009883a 	mov	r4,r16
    d204:	880b883a 	mov	r5,r17
    d208:	00035600 	call	3560 <__umodsi3>
    d20c:	8009883a 	mov	r4,r16
    d210:	880b883a 	mov	r5,r17
    d214:	102d883a 	mov	r22,r2
    d218:	00035580 	call	3558 <__udivsi3>
    d21c:	1009883a 	mov	r4,r2
    d220:	a80b883a 	mov	r5,r21
    d224:	b02c943a 	slli	r22,r22,16
    d228:	000d72c0 	call	d72c <__mulsi3>
    d22c:	a13fffcc 	andi	r4,r20,65535
    d230:	b106b03a 	or	r3,r22,r4
    d234:	1880572e 	bgeu	r3,r2,d394 <__umoddi3+0x284>
    d238:	00005206 	br	d384 <__umoddi3+0x274>
    d23c:	29c05936 	bltu	r5,r7,d3a4 <__umoddi3+0x294>
    d240:	00bfffd4 	movui	r2,65535
    d244:	11c0652e 	bgeu	r2,r7,d3dc <__umoddi3+0x2cc>
    d248:	00804034 	movhi	r2,256
    d24c:	10bfffc4 	addi	r2,r2,-1
    d250:	11c1172e 	bgeu	r2,r7,d6b0 <__umoddi3+0x5a0>
    d254:	01400604 	movi	r5,24
    d258:	282b883a 	mov	r21,r5
    d25c:	394ad83a 	srl	r5,r7,r5
    d260:	00c00074 	movhi	r3,1
    d264:	18cc5504 	addi	r3,r3,12628
    d268:	194b883a 	add	r5,r3,r5
    d26c:	28800003 	ldbu	r2,0(r5)
    d270:	00c00804 	movi	r3,32
    d274:	156b883a 	add	r21,r2,r21
    d278:	1d69c83a 	sub	r20,r3,r21
    d27c:	a000671e 	bne	r20,zero,d41c <__umoddi3+0x30c>
    d280:	3c400136 	bltu	r7,r17,d288 <__umoddi3+0x178>
    d284:	81812336 	bltu	r16,r6,d714 <__umoddi3+0x604>
    d288:	8185c83a 	sub	r2,r16,r6
    d28c:	89e3c83a 	sub	r17,r17,r7
    d290:	8087803a 	cmpltu	r3,r16,r2
    d294:	88edc83a 	sub	r22,r17,r3
    d298:	b007883a 	mov	r3,r22
    d29c:	00004306 	br	d3ac <__umoddi3+0x29c>
    d2a0:	3000041e 	bne	r6,zero,d2b4 <__umoddi3+0x1a4>
    d2a4:	01000044 	movi	r4,1
    d2a8:	000b883a 	mov	r5,zero
    d2ac:	00035580 	call	3558 <__udivsi3>
    d2b0:	1027883a 	mov	r19,r2
    d2b4:	00bfffd4 	movui	r2,65535
    d2b8:	14c0532e 	bgeu	r2,r19,d408 <__umoddi3+0x2f8>
    d2bc:	00804034 	movhi	r2,256
    d2c0:	10bfffc4 	addi	r2,r2,-1
    d2c4:	14c1032e 	bgeu	r2,r19,d6d4 <__umoddi3+0x5c4>
    d2c8:	00800604 	movi	r2,24
    d2cc:	1007883a 	mov	r3,r2
    d2d0:	9884d83a 	srl	r2,r19,r2
    d2d4:	01000074 	movhi	r4,1
    d2d8:	210c5504 	addi	r4,r4,12628
    d2dc:	2085883a 	add	r2,r4,r2
    d2e0:	11000003 	ldbu	r4,0(r2)
    d2e4:	00800804 	movi	r2,32
    d2e8:	20c7883a 	add	r3,r4,r3
    d2ec:	10c5c83a 	sub	r2,r2,r3
    d2f0:	1000b61e 	bne	r2,zero,d5cc <__umoddi3+0x4bc>
    d2f4:	982ad43a 	srli	r21,r19,16
    d2f8:	8ce3c83a 	sub	r17,r17,r19
    d2fc:	9dbfffcc 	andi	r22,r19,65535
    d300:	0025883a 	mov	r18,zero
    d304:	8809883a 	mov	r4,r17
    d308:	a80b883a 	mov	r5,r21
    d30c:	00035600 	call	3560 <__umodsi3>
    d310:	8809883a 	mov	r4,r17
    d314:	a80b883a 	mov	r5,r21
    d318:	102f883a 	mov	r23,r2
    d31c:	00035580 	call	3558 <__udivsi3>
    d320:	1009883a 	mov	r4,r2
    d324:	b00b883a 	mov	r5,r22
    d328:	000d72c0 	call	d72c <__mulsi3>
    d32c:	b82e943a 	slli	r23,r23,16
    d330:	a008d43a 	srli	r4,r20,16
    d334:	b906b03a 	or	r3,r23,r4
    d338:	1880032e 	bgeu	r3,r2,d348 <__umoddi3+0x238>
    d33c:	1cc7883a 	add	r3,r3,r19
    d340:	1cc00136 	bltu	r3,r19,d348 <__umoddi3+0x238>
    d344:	1880f136 	bltu	r3,r2,d70c <__umoddi3+0x5fc>
    d348:	18a1c83a 	sub	r16,r3,r2
    d34c:	8009883a 	mov	r4,r16
    d350:	a80b883a 	mov	r5,r21
    d354:	00035600 	call	3560 <__umodsi3>
    d358:	8009883a 	mov	r4,r16
    d35c:	a80b883a 	mov	r5,r21
    d360:	1023883a 	mov	r17,r2
    d364:	00035580 	call	3558 <__udivsi3>
    d368:	1009883a 	mov	r4,r2
    d36c:	b00b883a 	mov	r5,r22
    d370:	8822943a 	slli	r17,r17,16
    d374:	000d72c0 	call	d72c <__mulsi3>
    d378:	a13fffcc 	andi	r4,r20,65535
    d37c:	8906b03a 	or	r3,r17,r4
    d380:	1880042e 	bgeu	r3,r2,d394 <__umoddi3+0x284>
    d384:	1cc7883a 	add	r3,r3,r19
    d388:	1cc00236 	bltu	r3,r19,d394 <__umoddi3+0x284>
    d38c:	1880012e 	bgeu	r3,r2,d394 <__umoddi3+0x284>
    d390:	1cc7883a 	add	r3,r3,r19
    d394:	1887c83a 	sub	r3,r3,r2
    d398:	1c84d83a 	srl	r2,r3,r18
    d39c:	0007883a 	mov	r3,zero
    d3a0:	00000206 	br	d3ac <__umoddi3+0x29c>
    d3a4:	2005883a 	mov	r2,r4
    d3a8:	2807883a 	mov	r3,r5
    d3ac:	dfc00b17 	ldw	ra,44(sp)
    d3b0:	df000a17 	ldw	fp,40(sp)
    d3b4:	ddc00917 	ldw	r23,36(sp)
    d3b8:	dd800817 	ldw	r22,32(sp)
    d3bc:	dd400717 	ldw	r21,28(sp)
    d3c0:	dd000617 	ldw	r20,24(sp)
    d3c4:	dcc00517 	ldw	r19,20(sp)
    d3c8:	dc800417 	ldw	r18,16(sp)
    d3cc:	dc400317 	ldw	r17,12(sp)
    d3d0:	dc000217 	ldw	r16,8(sp)
    d3d4:	dec00c04 	addi	sp,sp,48
    d3d8:	f800283a 	ret
    d3dc:	00803fc4 	movi	r2,255
    d3e0:	11c0b02e 	bgeu	r2,r7,d6a4 <__umoddi3+0x594>
    d3e4:	01400204 	movi	r5,8
    d3e8:	282b883a 	mov	r21,r5
    d3ec:	003f9b06 	br	d25c <__alt_data_end+0xfffb7b2c>
    d3f0:	00804034 	movhi	r2,256
    d3f4:	10bfffc4 	addi	r2,r2,-1
    d3f8:	1180b02e 	bgeu	r2,r6,d6bc <__umoddi3+0x5ac>
    d3fc:	01400604 	movi	r5,24
    d400:	2805883a 	mov	r2,r5
    d404:	003f5a06 	br	d170 <__alt_data_end+0xfffb7a40>
    d408:	00803fc4 	movi	r2,255
    d40c:	14c0ae2e 	bgeu	r2,r19,d6c8 <__umoddi3+0x5b8>
    d410:	00800204 	movi	r2,8
    d414:	1007883a 	mov	r3,r2
    d418:	003fad06 	br	d2d0 <__alt_data_end+0xfffb7ba0>
    d41c:	3d0a983a 	sll	r5,r7,r20
    d420:	356cd83a 	srl	r22,r6,r21
    d424:	8d78d83a 	srl	fp,r17,r21
    d428:	8d10983a 	sll	r8,r17,r20
    d42c:	2dacb03a 	or	r22,r5,r22
    d430:	b02ed43a 	srli	r23,r22,16
    d434:	8564d83a 	srl	r18,r16,r21
    d438:	e009883a 	mov	r4,fp
    d43c:	b80b883a 	mov	r5,r23
    d440:	44a4b03a 	or	r18,r8,r18
    d444:	3526983a 	sll	r19,r6,r20
    d448:	00035600 	call	3560 <__umodsi3>
    d44c:	e009883a 	mov	r4,fp
    d450:	b80b883a 	mov	r5,r23
    d454:	b47fffcc 	andi	r17,r22,65535
    d458:	d8800015 	stw	r2,0(sp)
    d45c:	00035580 	call	3558 <__udivsi3>
    d460:	1009883a 	mov	r4,r2
    d464:	880b883a 	mov	r5,r17
    d468:	1039883a 	mov	fp,r2
    d46c:	000d72c0 	call	d72c <__mulsi3>
    d470:	d9800017 	ldw	r6,0(sp)
    d474:	9008d43a 	srli	r4,r18,16
    d478:	8520983a 	sll	r16,r16,r20
    d47c:	300c943a 	slli	r6,r6,16
    d480:	3106b03a 	or	r3,r6,r4
    d484:	1880042e 	bgeu	r3,r2,d498 <__umoddi3+0x388>
    d488:	1d87883a 	add	r3,r3,r22
    d48c:	e13fffc4 	addi	r4,fp,-1
    d490:	1d809a2e 	bgeu	r3,r22,d6fc <__umoddi3+0x5ec>
    d494:	2039883a 	mov	fp,r4
    d498:	1887c83a 	sub	r3,r3,r2
    d49c:	1809883a 	mov	r4,r3
    d4a0:	b80b883a 	mov	r5,r23
    d4a4:	d8c00115 	stw	r3,4(sp)
    d4a8:	00035600 	call	3560 <__umodsi3>
    d4ac:	d8c00117 	ldw	r3,4(sp)
    d4b0:	b80b883a 	mov	r5,r23
    d4b4:	d8800015 	stw	r2,0(sp)
    d4b8:	1809883a 	mov	r4,r3
    d4bc:	00035580 	call	3558 <__udivsi3>
    d4c0:	880b883a 	mov	r5,r17
    d4c4:	1009883a 	mov	r4,r2
    d4c8:	102f883a 	mov	r23,r2
    d4cc:	000d72c0 	call	d72c <__mulsi3>
    d4d0:	d9800017 	ldw	r6,0(sp)
    d4d4:	947fffcc 	andi	r17,r18,65535
    d4d8:	300c943a 	slli	r6,r6,16
    d4dc:	3464b03a 	or	r18,r6,r17
    d4e0:	9080042e 	bgeu	r18,r2,d4f4 <__umoddi3+0x3e4>
    d4e4:	95a5883a 	add	r18,r18,r22
    d4e8:	b8ffffc4 	addi	r3,r23,-1
    d4ec:	95807f2e 	bgeu	r18,r22,d6ec <__umoddi3+0x5dc>
    d4f0:	182f883a 	mov	r23,r3
    d4f4:	e038943a 	slli	fp,fp,16
    d4f8:	980cd43a 	srli	r6,r19,16
    d4fc:	98ffffcc 	andi	r3,r19,65535
    d500:	bf38b03a 	or	fp,r23,fp
    d504:	e02ed43a 	srli	r23,fp,16
    d508:	e73fffcc 	andi	fp,fp,65535
    d50c:	180b883a 	mov	r5,r3
    d510:	e009883a 	mov	r4,fp
    d514:	d9800015 	stw	r6,0(sp)
    d518:	d8c00115 	stw	r3,4(sp)
    d51c:	90a5c83a 	sub	r18,r18,r2
    d520:	000d72c0 	call	d72c <__mulsi3>
    d524:	d8c00117 	ldw	r3,4(sp)
    d528:	b809883a 	mov	r4,r23
    d52c:	1023883a 	mov	r17,r2
    d530:	180b883a 	mov	r5,r3
    d534:	000d72c0 	call	d72c <__mulsi3>
    d538:	d9800017 	ldw	r6,0(sp)
    d53c:	b809883a 	mov	r4,r23
    d540:	d8800115 	stw	r2,4(sp)
    d544:	300b883a 	mov	r5,r6
    d548:	302f883a 	mov	r23,r6
    d54c:	000d72c0 	call	d72c <__mulsi3>
    d550:	e009883a 	mov	r4,fp
    d554:	b80b883a 	mov	r5,r23
    d558:	d8800015 	stw	r2,0(sp)
    d55c:	000d72c0 	call	d72c <__mulsi3>
    d560:	d8c00117 	ldw	r3,4(sp)
    d564:	880cd43a 	srli	r6,r17,16
    d568:	d9c00017 	ldw	r7,0(sp)
    d56c:	1885883a 	add	r2,r3,r2
    d570:	118d883a 	add	r6,r2,r6
    d574:	30c0022e 	bgeu	r6,r3,d580 <__umoddi3+0x470>
    d578:	00800074 	movhi	r2,1
    d57c:	388f883a 	add	r7,r7,r2
    d580:	3006d43a 	srli	r3,r6,16
    d584:	300c943a 	slli	r6,r6,16
    d588:	8c7fffcc 	andi	r17,r17,65535
    d58c:	38c7883a 	add	r3,r7,r3
    d590:	3463883a 	add	r17,r6,r17
    d594:	90c03d36 	bltu	r18,r3,d68c <__umoddi3+0x57c>
    d598:	90c06026 	beq	r18,r3,d71c <__umoddi3+0x60c>
    d59c:	90c9c83a 	sub	r4,r18,r3
    d5a0:	880f883a 	mov	r7,r17
    d5a4:	81cfc83a 	sub	r7,r16,r7
    d5a8:	81c7803a 	cmpltu	r3,r16,r7
    d5ac:	20c7c83a 	sub	r3,r4,r3
    d5b0:	1d44983a 	sll	r2,r3,r21
    d5b4:	3d0ed83a 	srl	r7,r7,r20
    d5b8:	1d06d83a 	srl	r3,r3,r20
    d5bc:	11c4b03a 	or	r2,r2,r7
    d5c0:	003f7a06 	br	d3ac <__alt_data_end+0xfffb7c7c>
    d5c4:	0025883a 	mov	r18,zero
    d5c8:	003ef806 	br	d1ac <__alt_data_end+0xfffb7a7c>
    d5cc:	98a6983a 	sll	r19,r19,r2
    d5d0:	88e8d83a 	srl	r20,r17,r3
    d5d4:	80c6d83a 	srl	r3,r16,r3
    d5d8:	982ad43a 	srli	r21,r19,16
    d5dc:	88a2983a 	sll	r17,r17,r2
    d5e0:	a009883a 	mov	r4,r20
    d5e4:	a80b883a 	mov	r5,r21
    d5e8:	88eeb03a 	or	r23,r17,r3
    d5ec:	1025883a 	mov	r18,r2
    d5f0:	00035600 	call	3560 <__umodsi3>
    d5f4:	a009883a 	mov	r4,r20
    d5f8:	a80b883a 	mov	r5,r21
    d5fc:	1023883a 	mov	r17,r2
    d600:	9dbfffcc 	andi	r22,r19,65535
    d604:	00035580 	call	3558 <__udivsi3>
    d608:	1009883a 	mov	r4,r2
    d60c:	b00b883a 	mov	r5,r22
    d610:	000d72c0 	call	d72c <__mulsi3>
    d614:	8822943a 	slli	r17,r17,16
    d618:	b808d43a 	srli	r4,r23,16
    d61c:	84a8983a 	sll	r20,r16,r18
    d620:	8906b03a 	or	r3,r17,r4
    d624:	1880042e 	bgeu	r3,r2,d638 <__umoddi3+0x528>
    d628:	1cc7883a 	add	r3,r3,r19
    d62c:	1cc00236 	bltu	r3,r19,d638 <__umoddi3+0x528>
    d630:	1880012e 	bgeu	r3,r2,d638 <__umoddi3+0x528>
    d634:	1cc7883a 	add	r3,r3,r19
    d638:	18a1c83a 	sub	r16,r3,r2
    d63c:	8009883a 	mov	r4,r16
    d640:	a80b883a 	mov	r5,r21
    d644:	00035600 	call	3560 <__umodsi3>
    d648:	8009883a 	mov	r4,r16
    d64c:	a80b883a 	mov	r5,r21
    d650:	1039883a 	mov	fp,r2
    d654:	00035580 	call	3558 <__udivsi3>
    d658:	1009883a 	mov	r4,r2
    d65c:	b00b883a 	mov	r5,r22
    d660:	000d72c0 	call	d72c <__mulsi3>
    d664:	e006943a 	slli	r3,fp,16
    d668:	b93fffcc 	andi	r4,r23,65535
    d66c:	1906b03a 	or	r3,r3,r4
    d670:	1880042e 	bgeu	r3,r2,d684 <__umoddi3+0x574>
    d674:	1cc7883a 	add	r3,r3,r19
    d678:	1cc00236 	bltu	r3,r19,d684 <__umoddi3+0x574>
    d67c:	1880012e 	bgeu	r3,r2,d684 <__umoddi3+0x574>
    d680:	1cc7883a 	add	r3,r3,r19
    d684:	18a3c83a 	sub	r17,r3,r2
    d688:	003f1e06 	br	d304 <__alt_data_end+0xfffb7bd4>
    d68c:	8ccfc83a 	sub	r7,r17,r19
    d690:	1d89c83a 	sub	r4,r3,r22
    d694:	89e3803a 	cmpltu	r17,r17,r7
    d698:	2463c83a 	sub	r17,r4,r17
    d69c:	9449c83a 	sub	r4,r18,r17
    d6a0:	003fc006 	br	d5a4 <__alt_data_end+0xfffb7e74>
    d6a4:	000b883a 	mov	r5,zero
    d6a8:	002b883a 	mov	r21,zero
    d6ac:	003eeb06 	br	d25c <__alt_data_end+0xfffb7b2c>
    d6b0:	01400404 	movi	r5,16
    d6b4:	282b883a 	mov	r21,r5
    d6b8:	003ee806 	br	d25c <__alt_data_end+0xfffb7b2c>
    d6bc:	01400404 	movi	r5,16
    d6c0:	2805883a 	mov	r2,r5
    d6c4:	003eaa06 	br	d170 <__alt_data_end+0xfffb7a40>
    d6c8:	0005883a 	mov	r2,zero
    d6cc:	0007883a 	mov	r3,zero
    d6d0:	003eff06 	br	d2d0 <__alt_data_end+0xfffb7ba0>
    d6d4:	00800404 	movi	r2,16
    d6d8:	1007883a 	mov	r3,r2
    d6dc:	003efc06 	br	d2d0 <__alt_data_end+0xfffb7ba0>
    d6e0:	000b883a 	mov	r5,zero
    d6e4:	0005883a 	mov	r2,zero
    d6e8:	003ea106 	br	d170 <__alt_data_end+0xfffb7a40>
    d6ec:	90bf802e 	bgeu	r18,r2,d4f0 <__alt_data_end+0xfffb7dc0>
    d6f0:	bdffff84 	addi	r23,r23,-2
    d6f4:	95a5883a 	add	r18,r18,r22
    d6f8:	003f7e06 	br	d4f4 <__alt_data_end+0xfffb7dc4>
    d6fc:	18bf652e 	bgeu	r3,r2,d494 <__alt_data_end+0xfffb7d64>
    d700:	e73fff84 	addi	fp,fp,-2
    d704:	1d87883a 	add	r3,r3,r22
    d708:	003f6306 	br	d498 <__alt_data_end+0xfffb7d68>
    d70c:	1cc7883a 	add	r3,r3,r19
    d710:	003f0d06 	br	d348 <__alt_data_end+0xfffb7c18>
    d714:	8005883a 	mov	r2,r16
    d718:	003edf06 	br	d298 <__alt_data_end+0xfffb7b68>
    d71c:	847fdb36 	bltu	r16,r17,d68c <__alt_data_end+0xfffb7f5c>
    d720:	880f883a 	mov	r7,r17
    d724:	0009883a 	mov	r4,zero
    d728:	003f9e06 	br	d5a4 <__alt_data_end+0xfffb7e74>

0000d72c <__mulsi3>:
    d72c:	0005883a 	mov	r2,zero
    d730:	20000726 	beq	r4,zero,d750 <__mulsi3+0x24>
    d734:	20c0004c 	andi	r3,r4,1
    d738:	2008d07a 	srli	r4,r4,1
    d73c:	18000126 	beq	r3,zero,d744 <__mulsi3+0x18>
    d740:	1145883a 	add	r2,r2,r5
    d744:	294b883a 	add	r5,r5,r5
    d748:	203ffa1e 	bne	r4,zero,d734 <__alt_data_end+0xfffb8004>
    d74c:	f800283a 	ret
    d750:	f800283a 	ret

0000d754 <__adddf3>:
    d754:	02000434 	movhi	r8,16
    d758:	423fffc4 	addi	r8,r8,-1
    d75c:	defffb04 	addi	sp,sp,-20
    d760:	2a12703a 	and	r9,r5,r8
    d764:	2806d7fa 	srli	r3,r5,31
    d768:	3a10703a 	and	r8,r7,r8
    d76c:	3804d53a 	srli	r2,r7,20
    d770:	3014d77a 	srli	r10,r6,29
    d774:	dc000015 	stw	r16,0(sp)
    d778:	481290fa 	slli	r9,r9,3
    d77c:	2820d53a 	srli	r16,r5,20
    d780:	401090fa 	slli	r8,r8,3
    d784:	200ad77a 	srli	r5,r4,29
    d788:	380ed7fa 	srli	r7,r7,31
    d78c:	dc800215 	stw	r18,8(sp)
    d790:	dc400115 	stw	r17,4(sp)
    d794:	dfc00415 	stw	ra,16(sp)
    d798:	dcc00315 	stw	r19,12(sp)
    d79c:	1c803fcc 	andi	r18,r3,255
    d7a0:	8401ffcc 	andi	r16,r16,2047
    d7a4:	494ab03a 	or	r5,r9,r5
    d7a8:	202290fa 	slli	r17,r4,3
    d7ac:	1081ffcc 	andi	r2,r2,2047
    d7b0:	4290b03a 	or	r8,r8,r10
    d7b4:	300c90fa 	slli	r6,r6,3
    d7b8:	91c07026 	beq	r18,r7,d97c <__adddf3+0x228>
    d7bc:	8087c83a 	sub	r3,r16,r2
    d7c0:	00c0b30e 	bge	zero,r3,da90 <__adddf3+0x33c>
    d7c4:	10002a1e 	bne	r2,zero,d870 <__adddf3+0x11c>
    d7c8:	4184b03a 	or	r2,r8,r6
    d7cc:	1000991e 	bne	r2,zero,da34 <__adddf3+0x2e0>
    d7d0:	888001cc 	andi	r2,r17,7
    d7d4:	10005b26 	beq	r2,zero,d944 <__adddf3+0x1f0>
    d7d8:	88c003cc 	andi	r3,r17,15
    d7dc:	00800104 	movi	r2,4
    d7e0:	18805826 	beq	r3,r2,d944 <__adddf3+0x1f0>
    d7e4:	89800104 	addi	r6,r17,4
    d7e8:	3463803a 	cmpltu	r17,r6,r17
    d7ec:	2c4b883a 	add	r5,r5,r17
    d7f0:	2880202c 	andhi	r2,r5,128
    d7f4:	9007883a 	mov	r3,r18
    d7f8:	3023883a 	mov	r17,r6
    d7fc:	10005426 	beq	r2,zero,d950 <__adddf3+0x1fc>
    d800:	84000044 	addi	r16,r16,1
    d804:	0081ffc4 	movi	r2,2047
    d808:	8080c126 	beq	r16,r2,db10 <__adddf3+0x3bc>
    d80c:	013fe034 	movhi	r4,65408
    d810:	213fffc4 	addi	r4,r4,-1
    d814:	290a703a 	and	r5,r5,r4
    d818:	2804977a 	slli	r2,r5,29
    d81c:	280a927a 	slli	r5,r5,9
    d820:	8822d0fa 	srli	r17,r17,3
    d824:	8401ffcc 	andi	r16,r16,2047
    d828:	2808d33a 	srli	r4,r5,12
    d82c:	1444b03a 	or	r2,r2,r17
    d830:	8401ffcc 	andi	r16,r16,2047
    d834:	800a953a 	slli	r5,r16,20
    d838:	18c03fcc 	andi	r3,r3,255
    d83c:	04000434 	movhi	r16,16
    d840:	180697fa 	slli	r3,r3,31
    d844:	843fffc4 	addi	r16,r16,-1
    d848:	2420703a 	and	r16,r4,r16
    d84c:	8160b03a 	or	r16,r16,r5
    d850:	80c6b03a 	or	r3,r16,r3
    d854:	dfc00417 	ldw	ra,16(sp)
    d858:	dcc00317 	ldw	r19,12(sp)
    d85c:	dc800217 	ldw	r18,8(sp)
    d860:	dc400117 	ldw	r17,4(sp)
    d864:	dc000017 	ldw	r16,0(sp)
    d868:	dec00504 	addi	sp,sp,20
    d86c:	f800283a 	ret
    d870:	0081ffc4 	movi	r2,2047
    d874:	80bfd626 	beq	r16,r2,d7d0 <__alt_data_end+0xfffb80a0>
    d878:	42002034 	orhi	r8,r8,128
    d87c:	00800e04 	movi	r2,56
    d880:	10c0a616 	blt	r2,r3,db1c <__adddf3+0x3c8>
    d884:	008007c4 	movi	r2,31
    d888:	10c0c916 	blt	r2,r3,dbb0 <__adddf3+0x45c>
    d88c:	00800804 	movi	r2,32
    d890:	10c5c83a 	sub	r2,r2,r3
    d894:	408e983a 	sll	r7,r8,r2
    d898:	30c8d83a 	srl	r4,r6,r3
    d89c:	3084983a 	sll	r2,r6,r2
    d8a0:	40c6d83a 	srl	r3,r8,r3
    d8a4:	390cb03a 	or	r6,r7,r4
    d8a8:	1004c03a 	cmpne	r2,r2,zero
    d8ac:	308cb03a 	or	r6,r6,r2
    d8b0:	898dc83a 	sub	r6,r17,r6
    d8b4:	89a3803a 	cmpltu	r17,r17,r6
    d8b8:	28cbc83a 	sub	r5,r5,r3
    d8bc:	2c4bc83a 	sub	r5,r5,r17
    d8c0:	3023883a 	mov	r17,r6
    d8c4:	2880202c 	andhi	r2,r5,128
    d8c8:	10006d26 	beq	r2,zero,da80 <__adddf3+0x32c>
    d8cc:	04c02034 	movhi	r19,128
    d8d0:	9cffffc4 	addi	r19,r19,-1
    d8d4:	2ce6703a 	and	r19,r5,r19
    d8d8:	98007e26 	beq	r19,zero,dad4 <__adddf3+0x380>
    d8dc:	9809883a 	mov	r4,r19
    d8e0:	000feec0 	call	feec <__clzsi2>
    d8e4:	10fffe04 	addi	r3,r2,-8
    d8e8:	010007c4 	movi	r4,31
    d8ec:	20c07f16 	blt	r4,r3,daec <__adddf3+0x398>
    d8f0:	01400a04 	movi	r5,40
    d8f4:	2885c83a 	sub	r2,r5,r2
    d8f8:	888ad83a 	srl	r5,r17,r2
    d8fc:	98e6983a 	sll	r19,r19,r3
    d900:	88e2983a 	sll	r17,r17,r3
    d904:	2ce6b03a 	or	r19,r5,r19
    d908:	1c007c16 	blt	r3,r16,dafc <__adddf3+0x3a8>
    d90c:	1c21c83a 	sub	r16,r3,r16
    d910:	81400044 	addi	r5,r16,1
    d914:	00c007c4 	movi	r3,31
    d918:	19409816 	blt	r3,r5,db7c <__adddf3+0x428>
    d91c:	1c21c83a 	sub	r16,r3,r16
    d920:	8c08983a 	sll	r4,r17,r16
    d924:	8946d83a 	srl	r3,r17,r5
    d928:	9c20983a 	sll	r16,r19,r16
    d92c:	2008c03a 	cmpne	r4,r4,zero
    d930:	994ad83a 	srl	r5,r19,r5
    d934:	1c06b03a 	or	r3,r3,r16
    d938:	1922b03a 	or	r17,r3,r4
    d93c:	0021883a 	mov	r16,zero
    d940:	003fa306 	br	d7d0 <__alt_data_end+0xfffb80a0>
    d944:	2880202c 	andhi	r2,r5,128
    d948:	9007883a 	mov	r3,r18
    d94c:	103fac1e 	bne	r2,zero,d800 <__alt_data_end+0xfffb80d0>
    d950:	2804977a 	slli	r2,r5,29
    d954:	8822d0fa 	srli	r17,r17,3
    d958:	0101ffc4 	movi	r4,2047
    d95c:	280ad0fa 	srli	r5,r5,3
    d960:	1444b03a 	or	r2,r2,r17
    d964:	81002c26 	beq	r16,r4,da18 <__adddf3+0x2c4>
    d968:	8120703a 	and	r16,r16,r4
    d96c:	01000434 	movhi	r4,16
    d970:	213fffc4 	addi	r4,r4,-1
    d974:	2908703a 	and	r4,r5,r4
    d978:	003fad06 	br	d830 <__alt_data_end+0xfffb8100>
    d97c:	8089c83a 	sub	r4,r16,r2
    d980:	01006a0e 	bge	zero,r4,db2c <__adddf3+0x3d8>
    d984:	10003326 	beq	r2,zero,da54 <__adddf3+0x300>
    d988:	0081ffc4 	movi	r2,2047
    d98c:	80bf9026 	beq	r16,r2,d7d0 <__alt_data_end+0xfffb80a0>
    d990:	42002034 	orhi	r8,r8,128
    d994:	00800e04 	movi	r2,56
    d998:	1100b116 	blt	r2,r4,dc60 <__adddf3+0x50c>
    d99c:	008007c4 	movi	r2,31
    d9a0:	1100e216 	blt	r2,r4,dd2c <__adddf3+0x5d8>
    d9a4:	00800804 	movi	r2,32
    d9a8:	1105c83a 	sub	r2,r2,r4
    d9ac:	4092983a 	sll	r9,r8,r2
    d9b0:	310ed83a 	srl	r7,r6,r4
    d9b4:	3084983a 	sll	r2,r6,r2
    d9b8:	4110d83a 	srl	r8,r8,r4
    d9bc:	49ccb03a 	or	r6,r9,r7
    d9c0:	1004c03a 	cmpne	r2,r2,zero
    d9c4:	308cb03a 	or	r6,r6,r2
    d9c8:	344d883a 	add	r6,r6,r17
    d9cc:	3463803a 	cmpltu	r17,r6,r17
    d9d0:	414b883a 	add	r5,r8,r5
    d9d4:	2c4b883a 	add	r5,r5,r17
    d9d8:	3023883a 	mov	r17,r6
    d9dc:	2880202c 	andhi	r2,r5,128
    d9e0:	10002726 	beq	r2,zero,da80 <__adddf3+0x32c>
    d9e4:	84000044 	addi	r16,r16,1
    d9e8:	0081ffc4 	movi	r2,2047
    d9ec:	8080ae26 	beq	r16,r2,dca8 <__adddf3+0x554>
    d9f0:	00bfe034 	movhi	r2,65408
    d9f4:	10bfffc4 	addi	r2,r2,-1
    d9f8:	288a703a 	and	r5,r5,r2
    d9fc:	880cd07a 	srli	r6,r17,1
    da00:	280897fa 	slli	r4,r5,31
    da04:	88c0004c 	andi	r3,r17,1
    da08:	30e2b03a 	or	r17,r6,r3
    da0c:	280ad07a 	srli	r5,r5,1
    da10:	8922b03a 	or	r17,r17,r4
    da14:	003f6e06 	br	d7d0 <__alt_data_end+0xfffb80a0>
    da18:	1148b03a 	or	r4,r2,r5
    da1c:	20003c26 	beq	r4,zero,db10 <__adddf3+0x3bc>
    da20:	29000234 	orhi	r4,r5,8
    da24:	01400434 	movhi	r5,16
    da28:	297fffc4 	addi	r5,r5,-1
    da2c:	2148703a 	and	r4,r4,r5
    da30:	003f7f06 	br	d830 <__alt_data_end+0xfffb8100>
    da34:	18ffffc4 	addi	r3,r3,-1
    da38:	18004d1e 	bne	r3,zero,db70 <__adddf3+0x41c>
    da3c:	898dc83a 	sub	r6,r17,r6
    da40:	89a3803a 	cmpltu	r17,r17,r6
    da44:	2a0bc83a 	sub	r5,r5,r8
    da48:	2c4bc83a 	sub	r5,r5,r17
    da4c:	3023883a 	mov	r17,r6
    da50:	003f9c06 	br	d8c4 <__alt_data_end+0xfffb8194>
    da54:	4184b03a 	or	r2,r8,r6
    da58:	103f5d26 	beq	r2,zero,d7d0 <__alt_data_end+0xfffb80a0>
    da5c:	213fffc4 	addi	r4,r4,-1
    da60:	203fd926 	beq	r4,zero,d9c8 <__alt_data_end+0xfffb8298>
    da64:	0081ffc4 	movi	r2,2047
    da68:	80bfca1e 	bne	r16,r2,d994 <__alt_data_end+0xfffb8264>
    da6c:	003f5806 	br	d7d0 <__alt_data_end+0xfffb80a0>
    da70:	10c8b03a 	or	r4,r2,r3
    da74:	20008b26 	beq	r4,zero,dca4 <__adddf3+0x550>
    da78:	100b883a 	mov	r5,r2
    da7c:	1823883a 	mov	r17,r3
    da80:	888001cc 	andi	r2,r17,7
    da84:	103f541e 	bne	r2,zero,d7d8 <__alt_data_end+0xfffb80a8>
    da88:	9007883a 	mov	r3,r18
    da8c:	003fb006 	br	d950 <__alt_data_end+0xfffb8220>
    da90:	1800531e 	bne	r3,zero,dbe0 <__adddf3+0x48c>
    da94:	80800044 	addi	r2,r16,1
    da98:	1081ffcc 	andi	r2,r2,2047
    da9c:	00c00044 	movi	r3,1
    daa0:	1880990e 	bge	r3,r2,dd08 <__adddf3+0x5b4>
    daa4:	8985c83a 	sub	r2,r17,r6
    daa8:	8887803a 	cmpltu	r3,r17,r2
    daac:	2a27c83a 	sub	r19,r5,r8
    dab0:	98e7c83a 	sub	r19,r19,r3
    dab4:	98c0202c 	andhi	r3,r19,128
    dab8:	18006226 	beq	r3,zero,dc44 <__adddf3+0x4f0>
    dabc:	3463c83a 	sub	r17,r6,r17
    dac0:	4151c83a 	sub	r8,r8,r5
    dac4:	344d803a 	cmpltu	r6,r6,r17
    dac8:	41a7c83a 	sub	r19,r8,r6
    dacc:	3825883a 	mov	r18,r7
    dad0:	983f821e 	bne	r19,zero,d8dc <__alt_data_end+0xfffb81ac>
    dad4:	8809883a 	mov	r4,r17
    dad8:	000feec0 	call	feec <__clzsi2>
    dadc:	10800804 	addi	r2,r2,32
    dae0:	10fffe04 	addi	r3,r2,-8
    dae4:	010007c4 	movi	r4,31
    dae8:	20ff810e 	bge	r4,r3,d8f0 <__alt_data_end+0xfffb81c0>
    daec:	14fff604 	addi	r19,r2,-40
    daf0:	8ce6983a 	sll	r19,r17,r19
    daf4:	0023883a 	mov	r17,zero
    daf8:	1c3f840e 	bge	r3,r16,d90c <__alt_data_end+0xfffb81dc>
    dafc:	017fe034 	movhi	r5,65408
    db00:	297fffc4 	addi	r5,r5,-1
    db04:	80e1c83a 	sub	r16,r16,r3
    db08:	994a703a 	and	r5,r19,r5
    db0c:	003f3006 	br	d7d0 <__alt_data_end+0xfffb80a0>
    db10:	0009883a 	mov	r4,zero
    db14:	0005883a 	mov	r2,zero
    db18:	003f4506 	br	d830 <__alt_data_end+0xfffb8100>
    db1c:	418cb03a 	or	r6,r8,r6
    db20:	300cc03a 	cmpne	r6,r6,zero
    db24:	0007883a 	mov	r3,zero
    db28:	003f6106 	br	d8b0 <__alt_data_end+0xfffb8180>
    db2c:	2000921e 	bne	r4,zero,dd78 <__adddf3+0x624>
    db30:	80800044 	addi	r2,r16,1
    db34:	11c1ffcc 	andi	r7,r2,2047
    db38:	01000044 	movi	r4,1
    db3c:	21c0610e 	bge	r4,r7,dcc4 <__adddf3+0x570>
    db40:	0101ffc4 	movi	r4,2047
    db44:	1100a326 	beq	r2,r4,ddd4 <__adddf3+0x680>
    db48:	344d883a 	add	r6,r6,r17
    db4c:	3463803a 	cmpltu	r17,r6,r17
    db50:	414b883a 	add	r5,r8,r5
    db54:	2c4b883a 	add	r5,r5,r17
    db58:	282297fa 	slli	r17,r5,31
    db5c:	300cd07a 	srli	r6,r6,1
    db60:	280ad07a 	srli	r5,r5,1
    db64:	1021883a 	mov	r16,r2
    db68:	89a2b03a 	or	r17,r17,r6
    db6c:	003f1806 	br	d7d0 <__alt_data_end+0xfffb80a0>
    db70:	0081ffc4 	movi	r2,2047
    db74:	80bf411e 	bne	r16,r2,d87c <__alt_data_end+0xfffb814c>
    db78:	003f1506 	br	d7d0 <__alt_data_end+0xfffb80a0>
    db7c:	80bff844 	addi	r2,r16,-31
    db80:	00c00804 	movi	r3,32
    db84:	9884d83a 	srl	r2,r19,r2
    db88:	28c04a26 	beq	r5,r3,dcb4 <__adddf3+0x560>
    db8c:	00c00fc4 	movi	r3,63
    db90:	1c21c83a 	sub	r16,r3,r16
    db94:	9c26983a 	sll	r19,r19,r16
    db98:	9c62b03a 	or	r17,r19,r17
    db9c:	8822c03a 	cmpne	r17,r17,zero
    dba0:	88a2b03a 	or	r17,r17,r2
    dba4:	000b883a 	mov	r5,zero
    dba8:	0021883a 	mov	r16,zero
    dbac:	003fb406 	br	da80 <__alt_data_end+0xfffb8350>
    dbb0:	18bff804 	addi	r2,r3,-32
    dbb4:	01000804 	movi	r4,32
    dbb8:	4084d83a 	srl	r2,r8,r2
    dbbc:	19003f26 	beq	r3,r4,dcbc <__adddf3+0x568>
    dbc0:	01001004 	movi	r4,64
    dbc4:	20c7c83a 	sub	r3,r4,r3
    dbc8:	40d0983a 	sll	r8,r8,r3
    dbcc:	418cb03a 	or	r6,r8,r6
    dbd0:	300cc03a 	cmpne	r6,r6,zero
    dbd4:	308cb03a 	or	r6,r6,r2
    dbd8:	0007883a 	mov	r3,zero
    dbdc:	003f3406 	br	d8b0 <__alt_data_end+0xfffb8180>
    dbe0:	80002326 	beq	r16,zero,dc70 <__adddf3+0x51c>
    dbe4:	0101ffc4 	movi	r4,2047
    dbe8:	11005e26 	beq	r2,r4,dd64 <__adddf3+0x610>
    dbec:	00c7c83a 	sub	r3,zero,r3
    dbf0:	29402034 	orhi	r5,r5,128
    dbf4:	01000e04 	movi	r4,56
    dbf8:	20c07216 	blt	r4,r3,ddc4 <__adddf3+0x670>
    dbfc:	010007c4 	movi	r4,31
    dc00:	20c0ce16 	blt	r4,r3,df3c <__adddf3+0x7e8>
    dc04:	01000804 	movi	r4,32
    dc08:	20c9c83a 	sub	r4,r4,r3
    dc0c:	2914983a 	sll	r10,r5,r4
    dc10:	88d2d83a 	srl	r9,r17,r3
    dc14:	8908983a 	sll	r4,r17,r4
    dc18:	28c6d83a 	srl	r3,r5,r3
    dc1c:	5262b03a 	or	r17,r10,r9
    dc20:	2008c03a 	cmpne	r4,r4,zero
    dc24:	8922b03a 	or	r17,r17,r4
    dc28:	3463c83a 	sub	r17,r6,r17
    dc2c:	40c7c83a 	sub	r3,r8,r3
    dc30:	344d803a 	cmpltu	r6,r6,r17
    dc34:	198bc83a 	sub	r5,r3,r6
    dc38:	1021883a 	mov	r16,r2
    dc3c:	3825883a 	mov	r18,r7
    dc40:	003f2006 	br	d8c4 <__alt_data_end+0xfffb8194>
    dc44:	9886b03a 	or	r3,r19,r2
    dc48:	1800141e 	bne	r3,zero,dc9c <__adddf3+0x548>
    dc4c:	0007883a 	mov	r3,zero
    dc50:	000b883a 	mov	r5,zero
    dc54:	0023883a 	mov	r17,zero
    dc58:	0021883a 	mov	r16,zero
    dc5c:	003f3c06 	br	d950 <__alt_data_end+0xfffb8220>
    dc60:	418cb03a 	or	r6,r8,r6
    dc64:	300cc03a 	cmpne	r6,r6,zero
    dc68:	0011883a 	mov	r8,zero
    dc6c:	003f5606 	br	d9c8 <__alt_data_end+0xfffb8298>
    dc70:	2c48b03a 	or	r4,r5,r17
    dc74:	20003b26 	beq	r4,zero,dd64 <__adddf3+0x610>
    dc78:	00c6303a 	nor	r3,zero,r3
    dc7c:	1800371e 	bne	r3,zero,dd5c <__adddf3+0x608>
    dc80:	3463c83a 	sub	r17,r6,r17
    dc84:	414bc83a 	sub	r5,r8,r5
    dc88:	344d803a 	cmpltu	r6,r6,r17
    dc8c:	298bc83a 	sub	r5,r5,r6
    dc90:	1021883a 	mov	r16,r2
    dc94:	3825883a 	mov	r18,r7
    dc98:	003f0a06 	br	d8c4 <__alt_data_end+0xfffb8194>
    dc9c:	1023883a 	mov	r17,r2
    dca0:	003f0d06 	br	d8d8 <__alt_data_end+0xfffb81a8>
    dca4:	0007883a 	mov	r3,zero
    dca8:	000b883a 	mov	r5,zero
    dcac:	0023883a 	mov	r17,zero
    dcb0:	003f2706 	br	d950 <__alt_data_end+0xfffb8220>
    dcb4:	0027883a 	mov	r19,zero
    dcb8:	003fb706 	br	db98 <__alt_data_end+0xfffb8468>
    dcbc:	0011883a 	mov	r8,zero
    dcc0:	003fc206 	br	dbcc <__alt_data_end+0xfffb849c>
    dcc4:	2c44b03a 	or	r2,r5,r17
    dcc8:	8000871e 	bne	r16,zero,dee8 <__adddf3+0x794>
    dccc:	1000b126 	beq	r2,zero,df94 <__adddf3+0x840>
    dcd0:	4184b03a 	or	r2,r8,r6
    dcd4:	103ebe26 	beq	r2,zero,d7d0 <__alt_data_end+0xfffb80a0>
    dcd8:	3445883a 	add	r2,r6,r17
    dcdc:	1463803a 	cmpltu	r17,r2,r17
    dce0:	414b883a 	add	r5,r8,r5
    dce4:	2c4b883a 	add	r5,r5,r17
    dce8:	28c0202c 	andhi	r3,r5,128
    dcec:	1023883a 	mov	r17,r2
    dcf0:	183f6326 	beq	r3,zero,da80 <__alt_data_end+0xfffb8350>
    dcf4:	00bfe034 	movhi	r2,65408
    dcf8:	10bfffc4 	addi	r2,r2,-1
    dcfc:	2021883a 	mov	r16,r4
    dd00:	288a703a 	and	r5,r5,r2
    dd04:	003eb206 	br	d7d0 <__alt_data_end+0xfffb80a0>
    dd08:	2c44b03a 	or	r2,r5,r17
    dd0c:	8000251e 	bne	r16,zero,dda4 <__adddf3+0x650>
    dd10:	10004b1e 	bne	r2,zero,de40 <__adddf3+0x6ec>
    dd14:	4184b03a 	or	r2,r8,r6
    dd18:	103fe226 	beq	r2,zero,dca4 <__alt_data_end+0xfffb8574>
    dd1c:	400b883a 	mov	r5,r8
    dd20:	3023883a 	mov	r17,r6
    dd24:	3825883a 	mov	r18,r7
    dd28:	003ea906 	br	d7d0 <__alt_data_end+0xfffb80a0>
    dd2c:	20bff804 	addi	r2,r4,-32
    dd30:	01c00804 	movi	r7,32
    dd34:	4084d83a 	srl	r2,r8,r2
    dd38:	21c07e26 	beq	r4,r7,df34 <__adddf3+0x7e0>
    dd3c:	01c01004 	movi	r7,64
    dd40:	3909c83a 	sub	r4,r7,r4
    dd44:	4110983a 	sll	r8,r8,r4
    dd48:	418cb03a 	or	r6,r8,r6
    dd4c:	300cc03a 	cmpne	r6,r6,zero
    dd50:	308cb03a 	or	r6,r6,r2
    dd54:	0011883a 	mov	r8,zero
    dd58:	003f1b06 	br	d9c8 <__alt_data_end+0xfffb8298>
    dd5c:	0101ffc4 	movi	r4,2047
    dd60:	113fa41e 	bne	r2,r4,dbf4 <__alt_data_end+0xfffb84c4>
    dd64:	400b883a 	mov	r5,r8
    dd68:	3023883a 	mov	r17,r6
    dd6c:	1021883a 	mov	r16,r2
    dd70:	3825883a 	mov	r18,r7
    dd74:	003e9606 	br	d7d0 <__alt_data_end+0xfffb80a0>
    dd78:	80001a1e 	bne	r16,zero,dde4 <__adddf3+0x690>
    dd7c:	2c4eb03a 	or	r7,r5,r17
    dd80:	38005526 	beq	r7,zero,ded8 <__adddf3+0x784>
    dd84:	0108303a 	nor	r4,zero,r4
    dd88:	2000511e 	bne	r4,zero,ded0 <__adddf3+0x77c>
    dd8c:	89a3883a 	add	r17,r17,r6
    dd90:	414b883a 	add	r5,r8,r5
    dd94:	898d803a 	cmpltu	r6,r17,r6
    dd98:	298b883a 	add	r5,r5,r6
    dd9c:	1021883a 	mov	r16,r2
    dda0:	003f0e06 	br	d9dc <__alt_data_end+0xfffb82ac>
    dda4:	1000341e 	bne	r2,zero,de78 <__adddf3+0x724>
    dda8:	4184b03a 	or	r2,r8,r6
    ddac:	10006f26 	beq	r2,zero,df6c <__adddf3+0x818>
    ddb0:	400b883a 	mov	r5,r8
    ddb4:	3023883a 	mov	r17,r6
    ddb8:	3825883a 	mov	r18,r7
    ddbc:	0401ffc4 	movi	r16,2047
    ddc0:	003e8306 	br	d7d0 <__alt_data_end+0xfffb80a0>
    ddc4:	2c62b03a 	or	r17,r5,r17
    ddc8:	8822c03a 	cmpne	r17,r17,zero
    ddcc:	0007883a 	mov	r3,zero
    ddd0:	003f9506 	br	dc28 <__alt_data_end+0xfffb84f8>
    ddd4:	1021883a 	mov	r16,r2
    ddd8:	000b883a 	mov	r5,zero
    dddc:	0023883a 	mov	r17,zero
    dde0:	003edb06 	br	d950 <__alt_data_end+0xfffb8220>
    dde4:	01c1ffc4 	movi	r7,2047
    dde8:	11c03b26 	beq	r2,r7,ded8 <__adddf3+0x784>
    ddec:	0109c83a 	sub	r4,zero,r4
    ddf0:	29402034 	orhi	r5,r5,128
    ddf4:	01c00e04 	movi	r7,56
    ddf8:	39006216 	blt	r7,r4,df84 <__adddf3+0x830>
    ddfc:	01c007c4 	movi	r7,31
    de00:	39006b16 	blt	r7,r4,dfb0 <__adddf3+0x85c>
    de04:	01c00804 	movi	r7,32
    de08:	390fc83a 	sub	r7,r7,r4
    de0c:	29d4983a 	sll	r10,r5,r7
    de10:	8912d83a 	srl	r9,r17,r4
    de14:	89ce983a 	sll	r7,r17,r7
    de18:	2908d83a 	srl	r4,r5,r4
    de1c:	5262b03a 	or	r17,r10,r9
    de20:	380ac03a 	cmpne	r5,r7,zero
    de24:	8962b03a 	or	r17,r17,r5
    de28:	89a3883a 	add	r17,r17,r6
    de2c:	2211883a 	add	r8,r4,r8
    de30:	898d803a 	cmpltu	r6,r17,r6
    de34:	418b883a 	add	r5,r8,r6
    de38:	1021883a 	mov	r16,r2
    de3c:	003ee706 	br	d9dc <__alt_data_end+0xfffb82ac>
    de40:	4184b03a 	or	r2,r8,r6
    de44:	103e6226 	beq	r2,zero,d7d0 <__alt_data_end+0xfffb80a0>
    de48:	8987c83a 	sub	r3,r17,r6
    de4c:	88c9803a 	cmpltu	r4,r17,r3
    de50:	2a05c83a 	sub	r2,r5,r8
    de54:	1105c83a 	sub	r2,r2,r4
    de58:	1100202c 	andhi	r4,r2,128
    de5c:	203f0426 	beq	r4,zero,da70 <__alt_data_end+0xfffb8340>
    de60:	3463c83a 	sub	r17,r6,r17
    de64:	414bc83a 	sub	r5,r8,r5
    de68:	344d803a 	cmpltu	r6,r6,r17
    de6c:	298bc83a 	sub	r5,r5,r6
    de70:	3825883a 	mov	r18,r7
    de74:	003e5606 	br	d7d0 <__alt_data_end+0xfffb80a0>
    de78:	4184b03a 	or	r2,r8,r6
    de7c:	10002b26 	beq	r2,zero,df2c <__adddf3+0x7d8>
    de80:	2804d0fa 	srli	r2,r5,3
    de84:	8822d0fa 	srli	r17,r17,3
    de88:	280a977a 	slli	r5,r5,29
    de8c:	10c0022c 	andhi	r3,r2,8
    de90:	2c62b03a 	or	r17,r5,r17
    de94:	18000826 	beq	r3,zero,deb8 <__adddf3+0x764>
    de98:	4008d0fa 	srli	r4,r8,3
    de9c:	20c0022c 	andhi	r3,r4,8
    dea0:	1800051e 	bne	r3,zero,deb8 <__adddf3+0x764>
    dea4:	300cd0fa 	srli	r6,r6,3
    dea8:	4010977a 	slli	r8,r8,29
    deac:	2005883a 	mov	r2,r4
    deb0:	3825883a 	mov	r18,r7
    deb4:	41a2b03a 	or	r17,r8,r6
    deb8:	880ad77a 	srli	r5,r17,29
    debc:	100490fa 	slli	r2,r2,3
    dec0:	882290fa 	slli	r17,r17,3
    dec4:	0401ffc4 	movi	r16,2047
    dec8:	288ab03a 	or	r5,r5,r2
    decc:	003e4006 	br	d7d0 <__alt_data_end+0xfffb80a0>
    ded0:	01c1ffc4 	movi	r7,2047
    ded4:	11ffc71e 	bne	r2,r7,ddf4 <__alt_data_end+0xfffb86c4>
    ded8:	400b883a 	mov	r5,r8
    dedc:	3023883a 	mov	r17,r6
    dee0:	1021883a 	mov	r16,r2
    dee4:	003e3a06 	br	d7d0 <__alt_data_end+0xfffb80a0>
    dee8:	10002d26 	beq	r2,zero,dfa0 <__adddf3+0x84c>
    deec:	4184b03a 	or	r2,r8,r6
    def0:	10000e26 	beq	r2,zero,df2c <__adddf3+0x7d8>
    def4:	2804d0fa 	srli	r2,r5,3
    def8:	8822d0fa 	srli	r17,r17,3
    defc:	280a977a 	slli	r5,r5,29
    df00:	10c0022c 	andhi	r3,r2,8
    df04:	2c62b03a 	or	r17,r5,r17
    df08:	183feb26 	beq	r3,zero,deb8 <__alt_data_end+0xfffb8788>
    df0c:	4008d0fa 	srli	r4,r8,3
    df10:	20c0022c 	andhi	r3,r4,8
    df14:	183fe81e 	bne	r3,zero,deb8 <__alt_data_end+0xfffb8788>
    df18:	300cd0fa 	srli	r6,r6,3
    df1c:	4010977a 	slli	r8,r8,29
    df20:	2005883a 	mov	r2,r4
    df24:	41a2b03a 	or	r17,r8,r6
    df28:	003fe306 	br	deb8 <__alt_data_end+0xfffb8788>
    df2c:	0401ffc4 	movi	r16,2047
    df30:	003e2706 	br	d7d0 <__alt_data_end+0xfffb80a0>
    df34:	0011883a 	mov	r8,zero
    df38:	003f8306 	br	dd48 <__alt_data_end+0xfffb8618>
    df3c:	193ff804 	addi	r4,r3,-32
    df40:	02400804 	movi	r9,32
    df44:	2908d83a 	srl	r4,r5,r4
    df48:	1a402526 	beq	r3,r9,dfe0 <__adddf3+0x88c>
    df4c:	02401004 	movi	r9,64
    df50:	48c7c83a 	sub	r3,r9,r3
    df54:	28ca983a 	sll	r5,r5,r3
    df58:	2c62b03a 	or	r17,r5,r17
    df5c:	8822c03a 	cmpne	r17,r17,zero
    df60:	8922b03a 	or	r17,r17,r4
    df64:	0007883a 	mov	r3,zero
    df68:	003f2f06 	br	dc28 <__alt_data_end+0xfffb84f8>
    df6c:	01402034 	movhi	r5,128
    df70:	0007883a 	mov	r3,zero
    df74:	297fffc4 	addi	r5,r5,-1
    df78:	047ffe04 	movi	r17,-8
    df7c:	0401ffc4 	movi	r16,2047
    df80:	003e7306 	br	d950 <__alt_data_end+0xfffb8220>
    df84:	2c62b03a 	or	r17,r5,r17
    df88:	8822c03a 	cmpne	r17,r17,zero
    df8c:	0009883a 	mov	r4,zero
    df90:	003fa506 	br	de28 <__alt_data_end+0xfffb86f8>
    df94:	400b883a 	mov	r5,r8
    df98:	3023883a 	mov	r17,r6
    df9c:	003e0c06 	br	d7d0 <__alt_data_end+0xfffb80a0>
    dfa0:	400b883a 	mov	r5,r8
    dfa4:	3023883a 	mov	r17,r6
    dfa8:	0401ffc4 	movi	r16,2047
    dfac:	003e0806 	br	d7d0 <__alt_data_end+0xfffb80a0>
    dfb0:	21fff804 	addi	r7,r4,-32
    dfb4:	02400804 	movi	r9,32
    dfb8:	29ced83a 	srl	r7,r5,r7
    dfbc:	22400a26 	beq	r4,r9,dfe8 <__adddf3+0x894>
    dfc0:	02401004 	movi	r9,64
    dfc4:	4909c83a 	sub	r4,r9,r4
    dfc8:	290a983a 	sll	r5,r5,r4
    dfcc:	2c62b03a 	or	r17,r5,r17
    dfd0:	8822c03a 	cmpne	r17,r17,zero
    dfd4:	89e2b03a 	or	r17,r17,r7
    dfd8:	0009883a 	mov	r4,zero
    dfdc:	003f9206 	br	de28 <__alt_data_end+0xfffb86f8>
    dfe0:	000b883a 	mov	r5,zero
    dfe4:	003fdc06 	br	df58 <__alt_data_end+0xfffb8828>
    dfe8:	000b883a 	mov	r5,zero
    dfec:	003ff706 	br	dfcc <__alt_data_end+0xfffb889c>

0000dff0 <__divdf3>:
    dff0:	defff004 	addi	sp,sp,-64
    dff4:	dc800815 	stw	r18,32(sp)
    dff8:	2824d53a 	srli	r18,r5,20
    dffc:	dd800c15 	stw	r22,48(sp)
    e000:	282cd7fa 	srli	r22,r5,31
    e004:	dc000615 	stw	r16,24(sp)
    e008:	04000434 	movhi	r16,16
    e00c:	df000e15 	stw	fp,56(sp)
    e010:	dd000a15 	stw	r20,40(sp)
    e014:	dcc00915 	stw	r19,36(sp)
    e018:	dc400715 	stw	r17,28(sp)
    e01c:	843fffc4 	addi	r16,r16,-1
    e020:	dfc00f15 	stw	ra,60(sp)
    e024:	ddc00d15 	stw	r23,52(sp)
    e028:	dd400b15 	stw	r21,44(sp)
    e02c:	9481ffcc 	andi	r18,r18,2047
    e030:	2029883a 	mov	r20,r4
    e034:	2027883a 	mov	r19,r4
    e038:	2c22703a 	and	r17,r5,r16
    e03c:	b7003fcc 	andi	fp,r22,255
    e040:	90005e26 	beq	r18,zero,e1bc <__divdf3+0x1cc>
    e044:	0081ffc4 	movi	r2,2047
    e048:	90803526 	beq	r18,r2,e120 <__divdf3+0x130>
    e04c:	8c000434 	orhi	r16,r17,16
    e050:	2004d77a 	srli	r2,r4,29
    e054:	802090fa 	slli	r16,r16,3
    e058:	202690fa 	slli	r19,r4,3
    e05c:	94bf0044 	addi	r18,r18,-1023
    e060:	80a2b03a 	or	r17,r16,r2
    e064:	0029883a 	mov	r20,zero
    e068:	0011883a 	mov	r8,zero
    e06c:	380ad53a 	srli	r5,r7,20
    e070:	382ed7fa 	srli	r23,r7,31
    e074:	04000434 	movhi	r16,16
    e078:	843fffc4 	addi	r16,r16,-1
    e07c:	2941ffcc 	andi	r5,r5,2047
    e080:	302b883a 	mov	r21,r6
    e084:	3c20703a 	and	r16,r7,r16
    e088:	ba403fcc 	andi	r9,r23,255
    e08c:	28006726 	beq	r5,zero,e22c <__divdf3+0x23c>
    e090:	0081ffc4 	movi	r2,2047
    e094:	28805f26 	beq	r5,r2,e214 <__divdf3+0x224>
    e098:	84000434 	orhi	r16,r16,16
    e09c:	3004d77a 	srli	r2,r6,29
    e0a0:	802090fa 	slli	r16,r16,3
    e0a4:	302a90fa 	slli	r21,r6,3
    e0a8:	297f0044 	addi	r5,r5,-1023
    e0ac:	80a0b03a 	or	r16,r16,r2
    e0b0:	000f883a 	mov	r7,zero
    e0b4:	3d06b03a 	or	r3,r7,r20
    e0b8:	180690ba 	slli	r3,r3,2
    e0bc:	00800074 	movhi	r2,1
    e0c0:	10b83804 	addi	r2,r2,-7968
    e0c4:	1885883a 	add	r2,r3,r2
    e0c8:	10800017 	ldw	r2,0(r2)
    e0cc:	b5c8f03a 	xor	r4,r22,r23
    e0d0:	200d883a 	mov	r6,r4
    e0d4:	25003fcc 	andi	r20,r4,255
    e0d8:	9165c83a 	sub	r18,r18,r5
    e0dc:	1000683a 	jmp	r2
    e0e0:	0000e328 	cmpgeui	zero,zero,908
    e0e4:	0000e158 	cmpnei	zero,zero,901
    e0e8:	0000e2ec 	andhi	zero,zero,907
    e0ec:	0000e13c 	xorhi	zero,zero,900
    e0f0:	0000e2ec 	andhi	zero,zero,907
    e0f4:	0000e2c0 	call	e2c <setup_keyboard+0x78c>
    e0f8:	0000e2ec 	andhi	zero,zero,907
    e0fc:	0000e13c 	xorhi	zero,zero,900
    e100:	0000e158 	cmpnei	zero,zero,901
    e104:	0000e158 	cmpnei	zero,zero,901
    e108:	0000e2c0 	call	e2c <setup_keyboard+0x78c>
    e10c:	0000e13c 	xorhi	zero,zero,900
    e110:	0000e14c 	andi	zero,zero,901
    e114:	0000e14c 	andi	zero,zero,901
    e118:	0000e14c 	andi	zero,zero,901
    e11c:	0000e2fc 	xorhi	zero,zero,907
    e120:	8904b03a 	or	r2,r17,r4
    e124:	1000631e 	bne	r2,zero,e2b4 <__divdf3+0x2c4>
    e128:	05000204 	movi	r20,8
    e12c:	0023883a 	mov	r17,zero
    e130:	0027883a 	mov	r19,zero
    e134:	02000084 	movi	r8,2
    e138:	003fcc06 	br	e06c <__alt_data_end+0xfffb893c>
    e13c:	8023883a 	mov	r17,r16
    e140:	a827883a 	mov	r19,r21
    e144:	4839883a 	mov	fp,r9
    e148:	3811883a 	mov	r8,r7
    e14c:	00800084 	movi	r2,2
    e150:	4081531e 	bne	r8,r2,e6a0 <__divdf3+0x6b0>
    e154:	e029883a 	mov	r20,fp
    e158:	a180004c 	andi	r6,r20,1
    e15c:	0201ffc4 	movi	r8,2047
    e160:	000b883a 	mov	r5,zero
    e164:	0027883a 	mov	r19,zero
    e168:	4010953a 	slli	r8,r8,20
    e16c:	30c03fcc 	andi	r3,r6,255
    e170:	04000434 	movhi	r16,16
    e174:	180697fa 	slli	r3,r3,31
    e178:	843fffc4 	addi	r16,r16,-1
    e17c:	2c20703a 	and	r16,r5,r16
    e180:	8220b03a 	or	r16,r16,r8
    e184:	80c6b03a 	or	r3,r16,r3
    e188:	9805883a 	mov	r2,r19
    e18c:	dfc00f17 	ldw	ra,60(sp)
    e190:	df000e17 	ldw	fp,56(sp)
    e194:	ddc00d17 	ldw	r23,52(sp)
    e198:	dd800c17 	ldw	r22,48(sp)
    e19c:	dd400b17 	ldw	r21,44(sp)
    e1a0:	dd000a17 	ldw	r20,40(sp)
    e1a4:	dcc00917 	ldw	r19,36(sp)
    e1a8:	dc800817 	ldw	r18,32(sp)
    e1ac:	dc400717 	ldw	r17,28(sp)
    e1b0:	dc000617 	ldw	r16,24(sp)
    e1b4:	dec01004 	addi	sp,sp,64
    e1b8:	f800283a 	ret
    e1bc:	8904b03a 	or	r2,r17,r4
    e1c0:	10003726 	beq	r2,zero,e2a0 <__divdf3+0x2b0>
    e1c4:	88014d26 	beq	r17,zero,e6fc <__divdf3+0x70c>
    e1c8:	8809883a 	mov	r4,r17
    e1cc:	d9800215 	stw	r6,8(sp)
    e1d0:	d9c00515 	stw	r7,20(sp)
    e1d4:	000feec0 	call	feec <__clzsi2>
    e1d8:	d9800217 	ldw	r6,8(sp)
    e1dc:	d9c00517 	ldw	r7,20(sp)
    e1e0:	1007883a 	mov	r3,r2
    e1e4:	01000a04 	movi	r4,40
    e1e8:	1cfffe04 	addi	r19,r3,-8
    e1ec:	20c9c83a 	sub	r4,r4,r3
    e1f0:	8cca983a 	sll	r5,r17,r19
    e1f4:	a108d83a 	srl	r4,r20,r4
    e1f8:	a4e6983a 	sll	r19,r20,r19
    e1fc:	2162b03a 	or	r17,r4,r5
    e200:	04bf0344 	movi	r18,-1011
    e204:	90e5c83a 	sub	r18,r18,r3
    e208:	0029883a 	mov	r20,zero
    e20c:	0011883a 	mov	r8,zero
    e210:	003f9606 	br	e06c <__alt_data_end+0xfffb893c>
    e214:	8184b03a 	or	r2,r16,r6
    e218:	10001f1e 	bne	r2,zero,e298 <__divdf3+0x2a8>
    e21c:	0021883a 	mov	r16,zero
    e220:	002b883a 	mov	r21,zero
    e224:	01c00084 	movi	r7,2
    e228:	003fa206 	br	e0b4 <__alt_data_end+0xfffb8984>
    e22c:	8184b03a 	or	r2,r16,r6
    e230:	10001526 	beq	r2,zero,e288 <__divdf3+0x298>
    e234:	80013d26 	beq	r16,zero,e72c <__divdf3+0x73c>
    e238:	8009883a 	mov	r4,r16
    e23c:	d9800215 	stw	r6,8(sp)
    e240:	da000315 	stw	r8,12(sp)
    e244:	da400415 	stw	r9,16(sp)
    e248:	000feec0 	call	feec <__clzsi2>
    e24c:	d9800217 	ldw	r6,8(sp)
    e250:	da000317 	ldw	r8,12(sp)
    e254:	da400417 	ldw	r9,16(sp)
    e258:	1007883a 	mov	r3,r2
    e25c:	01000a04 	movi	r4,40
    e260:	1d7ffe04 	addi	r21,r3,-8
    e264:	20c9c83a 	sub	r4,r4,r3
    e268:	8560983a 	sll	r16,r16,r21
    e26c:	3108d83a 	srl	r4,r6,r4
    e270:	356a983a 	sll	r21,r6,r21
    e274:	2420b03a 	or	r16,r4,r16
    e278:	017f0344 	movi	r5,-1011
    e27c:	28cbc83a 	sub	r5,r5,r3
    e280:	000f883a 	mov	r7,zero
    e284:	003f8b06 	br	e0b4 <__alt_data_end+0xfffb8984>
    e288:	0021883a 	mov	r16,zero
    e28c:	002b883a 	mov	r21,zero
    e290:	01c00044 	movi	r7,1
    e294:	003f8706 	br	e0b4 <__alt_data_end+0xfffb8984>
    e298:	01c000c4 	movi	r7,3
    e29c:	003f8506 	br	e0b4 <__alt_data_end+0xfffb8984>
    e2a0:	05000104 	movi	r20,4
    e2a4:	0023883a 	mov	r17,zero
    e2a8:	0027883a 	mov	r19,zero
    e2ac:	02000044 	movi	r8,1
    e2b0:	003f6e06 	br	e06c <__alt_data_end+0xfffb893c>
    e2b4:	05000304 	movi	r20,12
    e2b8:	020000c4 	movi	r8,3
    e2bc:	003f6b06 	br	e06c <__alt_data_end+0xfffb893c>
    e2c0:	01400434 	movhi	r5,16
    e2c4:	000d883a 	mov	r6,zero
    e2c8:	297fffc4 	addi	r5,r5,-1
    e2cc:	04ffffc4 	movi	r19,-1
    e2d0:	0201ffc4 	movi	r8,2047
    e2d4:	003fa406 	br	e168 <__alt_data_end+0xfffb8a38>
    e2d8:	043f0084 	movi	r16,-1022
    e2dc:	84a1c83a 	sub	r16,r16,r18
    e2e0:	00800e04 	movi	r2,56
    e2e4:	14014d0e 	bge	r2,r16,e81c <__divdf3+0x82c>
    e2e8:	a180004c 	andi	r6,r20,1
    e2ec:	0011883a 	mov	r8,zero
    e2f0:	000b883a 	mov	r5,zero
    e2f4:	0027883a 	mov	r19,zero
    e2f8:	003f9b06 	br	e168 <__alt_data_end+0xfffb8a38>
    e2fc:	8880022c 	andhi	r2,r17,8
    e300:	1000f026 	beq	r2,zero,e6c4 <__divdf3+0x6d4>
    e304:	8080022c 	andhi	r2,r16,8
    e308:	1000ee1e 	bne	r2,zero,e6c4 <__divdf3+0x6d4>
    e30c:	00800434 	movhi	r2,16
    e310:	81400234 	orhi	r5,r16,8
    e314:	10bfffc4 	addi	r2,r2,-1
    e318:	b80d883a 	mov	r6,r23
    e31c:	288a703a 	and	r5,r5,r2
    e320:	a827883a 	mov	r19,r21
    e324:	003fea06 	br	e2d0 <__alt_data_end+0xfffb8ba0>
    e328:	84411c36 	bltu	r16,r17,e79c <__divdf3+0x7ac>
    e32c:	8c011a26 	beq	r17,r16,e798 <__divdf3+0x7a8>
    e330:	94bfffc4 	addi	r18,r18,-1
    e334:	dcc00015 	stw	r19,0(sp)
    e338:	8811883a 	mov	r8,r17
    e33c:	002d883a 	mov	r22,zero
    e340:	a80cd63a 	srli	r6,r21,24
    e344:	8020923a 	slli	r16,r16,8
    e348:	a82a923a 	slli	r21,r21,8
    e34c:	4009883a 	mov	r4,r8
    e350:	342eb03a 	or	r23,r6,r16
    e354:	dd400115 	stw	r21,4(sp)
    e358:	b82ad43a 	srli	r21,r23,16
    e35c:	da000315 	stw	r8,12(sp)
    e360:	bcffffcc 	andi	r19,r23,65535
    e364:	a80b883a 	mov	r5,r21
    e368:	00035580 	call	3558 <__udivsi3>
    e36c:	1009883a 	mov	r4,r2
    e370:	980b883a 	mov	r5,r19
    e374:	1023883a 	mov	r17,r2
    e378:	000d72c0 	call	d72c <__mulsi3>
    e37c:	da000317 	ldw	r8,12(sp)
    e380:	a80b883a 	mov	r5,r21
    e384:	1039883a 	mov	fp,r2
    e388:	4009883a 	mov	r4,r8
    e38c:	00035600 	call	3560 <__umodsi3>
    e390:	d8c00017 	ldw	r3,0(sp)
    e394:	1004943a 	slli	r2,r2,16
    e398:	1810d43a 	srli	r8,r3,16
    e39c:	120eb03a 	or	r7,r2,r8
    e3a0:	3f00062e 	bgeu	r7,fp,e3bc <__divdf3+0x3cc>
    e3a4:	3dcf883a 	add	r7,r7,r23
    e3a8:	88bfffc4 	addi	r2,r17,-1
    e3ac:	3dc10a36 	bltu	r7,r23,e7d8 <__divdf3+0x7e8>
    e3b0:	3f01092e 	bgeu	r7,fp,e7d8 <__divdf3+0x7e8>
    e3b4:	8c7fff84 	addi	r17,r17,-2
    e3b8:	3dcf883a 	add	r7,r7,r23
    e3bc:	3f39c83a 	sub	fp,r7,fp
    e3c0:	e009883a 	mov	r4,fp
    e3c4:	a80b883a 	mov	r5,r21
    e3c8:	00035580 	call	3558 <__udivsi3>
    e3cc:	1009883a 	mov	r4,r2
    e3d0:	980b883a 	mov	r5,r19
    e3d4:	1021883a 	mov	r16,r2
    e3d8:	000d72c0 	call	d72c <__mulsi3>
    e3dc:	e009883a 	mov	r4,fp
    e3e0:	a80b883a 	mov	r5,r21
    e3e4:	d8800315 	stw	r2,12(sp)
    e3e8:	00035600 	call	3560 <__umodsi3>
    e3ec:	d9000017 	ldw	r4,0(sp)
    e3f0:	1004943a 	slli	r2,r2,16
    e3f4:	da000317 	ldw	r8,12(sp)
    e3f8:	20ffffcc 	andi	r3,r4,65535
    e3fc:	10ceb03a 	or	r7,r2,r3
    e400:	3a00062e 	bgeu	r7,r8,e41c <__divdf3+0x42c>
    e404:	3dcf883a 	add	r7,r7,r23
    e408:	80bfffc4 	addi	r2,r16,-1
    e40c:	3dc0f036 	bltu	r7,r23,e7d0 <__divdf3+0x7e0>
    e410:	3a00ef2e 	bgeu	r7,r8,e7d0 <__divdf3+0x7e0>
    e414:	843fff84 	addi	r16,r16,-2
    e418:	3dcf883a 	add	r7,r7,r23
    e41c:	d8c00117 	ldw	r3,4(sp)
    e420:	8822943a 	slli	r17,r17,16
    e424:	3a0fc83a 	sub	r7,r7,r8
    e428:	1806d43a 	srli	r3,r3,16
    e42c:	8462b03a 	or	r17,r16,r17
    e430:	8affffcc 	andi	r11,r17,65535
    e434:	d8c00015 	stw	r3,0(sp)
    e438:	d8c00117 	ldw	r3,4(sp)
    e43c:	8820d43a 	srli	r16,r17,16
    e440:	5809883a 	mov	r4,r11
    e444:	1f3fffcc 	andi	fp,r3,65535
    e448:	e00b883a 	mov	r5,fp
    e44c:	d9c00515 	stw	r7,20(sp)
    e450:	dac00215 	stw	r11,8(sp)
    e454:	000d72c0 	call	d72c <__mulsi3>
    e458:	8009883a 	mov	r4,r16
    e45c:	e00b883a 	mov	r5,fp
    e460:	d8800415 	stw	r2,16(sp)
    e464:	000d72c0 	call	d72c <__mulsi3>
    e468:	d9400017 	ldw	r5,0(sp)
    e46c:	8009883a 	mov	r4,r16
    e470:	d8800315 	stw	r2,12(sp)
    e474:	000d72c0 	call	d72c <__mulsi3>
    e478:	dac00217 	ldw	r11,8(sp)
    e47c:	d9400017 	ldw	r5,0(sp)
    e480:	d8800215 	stw	r2,8(sp)
    e484:	5809883a 	mov	r4,r11
    e488:	000d72c0 	call	d72c <__mulsi3>
    e48c:	da400417 	ldw	r9,16(sp)
    e490:	da800317 	ldw	r10,12(sp)
    e494:	d9c00517 	ldw	r7,20(sp)
    e498:	480ad43a 	srli	r5,r9,16
    e49c:	5085883a 	add	r2,r10,r2
    e4a0:	db000217 	ldw	r12,8(sp)
    e4a4:	1151883a 	add	r8,r2,r5
    e4a8:	4280022e 	bgeu	r8,r10,e4b4 <__divdf3+0x4c4>
    e4ac:	00800074 	movhi	r2,1
    e4b0:	6099883a 	add	r12,r12,r2
    e4b4:	400ad43a 	srli	r5,r8,16
    e4b8:	4010943a 	slli	r8,r8,16
    e4bc:	4c3fffcc 	andi	r16,r9,65535
    e4c0:	6149883a 	add	r4,r12,r5
    e4c4:	4411883a 	add	r8,r8,r16
    e4c8:	3900a736 	bltu	r7,r4,e768 <__divdf3+0x778>
    e4cc:	3900c426 	beq	r7,r4,e7e0 <__divdf3+0x7f0>
    e4d0:	3909c83a 	sub	r4,r7,r4
    e4d4:	b221c83a 	sub	r16,r22,r8
    e4d8:	b42d803a 	cmpltu	r22,r22,r16
    e4dc:	25adc83a 	sub	r22,r4,r22
    e4e0:	b5c0c626 	beq	r22,r23,e7fc <__divdf3+0x80c>
    e4e4:	b009883a 	mov	r4,r22
    e4e8:	a80b883a 	mov	r5,r21
    e4ec:	00035580 	call	3558 <__udivsi3>
    e4f0:	1009883a 	mov	r4,r2
    e4f4:	980b883a 	mov	r5,r19
    e4f8:	d8800315 	stw	r2,12(sp)
    e4fc:	000d72c0 	call	d72c <__mulsi3>
    e500:	a80b883a 	mov	r5,r21
    e504:	b009883a 	mov	r4,r22
    e508:	d8800415 	stw	r2,16(sp)
    e50c:	00035600 	call	3560 <__umodsi3>
    e510:	1004943a 	slli	r2,r2,16
    e514:	800ed43a 	srli	r7,r16,16
    e518:	da400417 	ldw	r9,16(sp)
    e51c:	da000317 	ldw	r8,12(sp)
    e520:	11cab03a 	or	r5,r2,r7
    e524:	2a40062e 	bgeu	r5,r9,e540 <__divdf3+0x550>
    e528:	2dcb883a 	add	r5,r5,r23
    e52c:	40bfffc4 	addi	r2,r8,-1
    e530:	2dc0b436 	bltu	r5,r23,e804 <__divdf3+0x814>
    e534:	2a40b32e 	bgeu	r5,r9,e804 <__divdf3+0x814>
    e538:	423fff84 	addi	r8,r8,-2
    e53c:	2dcb883a 	add	r5,r5,r23
    e540:	2a6dc83a 	sub	r22,r5,r9
    e544:	b009883a 	mov	r4,r22
    e548:	a80b883a 	mov	r5,r21
    e54c:	da000315 	stw	r8,12(sp)
    e550:	00035580 	call	3558 <__udivsi3>
    e554:	980b883a 	mov	r5,r19
    e558:	1009883a 	mov	r4,r2
    e55c:	d8800415 	stw	r2,16(sp)
    e560:	000d72c0 	call	d72c <__mulsi3>
    e564:	b009883a 	mov	r4,r22
    e568:	a80b883a 	mov	r5,r21
    e56c:	1027883a 	mov	r19,r2
    e570:	00035600 	call	3560 <__umodsi3>
    e574:	1004943a 	slli	r2,r2,16
    e578:	843fffcc 	andi	r16,r16,65535
    e57c:	da000317 	ldw	r8,12(sp)
    e580:	140eb03a 	or	r7,r2,r16
    e584:	da400417 	ldw	r9,16(sp)
    e588:	3cc0062e 	bgeu	r7,r19,e5a4 <__divdf3+0x5b4>
    e58c:	3dcf883a 	add	r7,r7,r23
    e590:	48bfffc4 	addi	r2,r9,-1
    e594:	3dc09d36 	bltu	r7,r23,e80c <__divdf3+0x81c>
    e598:	3cc09c2e 	bgeu	r7,r19,e80c <__divdf3+0x81c>
    e59c:	4a7fff84 	addi	r9,r9,-2
    e5a0:	3dcf883a 	add	r7,r7,r23
    e5a4:	4010943a 	slli	r8,r8,16
    e5a8:	3cebc83a 	sub	r21,r7,r19
    e5ac:	e00b883a 	mov	r5,fp
    e5b0:	4a26b03a 	or	r19,r9,r8
    e5b4:	99ffffcc 	andi	r7,r19,65535
    e5b8:	9820d43a 	srli	r16,r19,16
    e5bc:	3809883a 	mov	r4,r7
    e5c0:	d9c00515 	stw	r7,20(sp)
    e5c4:	000d72c0 	call	d72c <__mulsi3>
    e5c8:	8009883a 	mov	r4,r16
    e5cc:	e00b883a 	mov	r5,fp
    e5d0:	102d883a 	mov	r22,r2
    e5d4:	000d72c0 	call	d72c <__mulsi3>
    e5d8:	d9400017 	ldw	r5,0(sp)
    e5dc:	8009883a 	mov	r4,r16
    e5e0:	1039883a 	mov	fp,r2
    e5e4:	000d72c0 	call	d72c <__mulsi3>
    e5e8:	d9c00517 	ldw	r7,20(sp)
    e5ec:	d9400017 	ldw	r5,0(sp)
    e5f0:	1021883a 	mov	r16,r2
    e5f4:	3809883a 	mov	r4,r7
    e5f8:	000d72c0 	call	d72c <__mulsi3>
    e5fc:	b008d43a 	srli	r4,r22,16
    e600:	e085883a 	add	r2,fp,r2
    e604:	1109883a 	add	r4,r2,r4
    e608:	2700022e 	bgeu	r4,fp,e614 <__divdf3+0x624>
    e60c:	00800074 	movhi	r2,1
    e610:	80a1883a 	add	r16,r16,r2
    e614:	200ad43a 	srli	r5,r4,16
    e618:	2008943a 	slli	r4,r4,16
    e61c:	b5bfffcc 	andi	r22,r22,65535
    e620:	8145883a 	add	r2,r16,r5
    e624:	2589883a 	add	r4,r4,r22
    e628:	a8802c36 	bltu	r21,r2,e6dc <__divdf3+0x6ec>
    e62c:	a880a426 	beq	r21,r2,e8c0 <__divdf3+0x8d0>
    e630:	9cc00054 	ori	r19,r19,1
    e634:	9200ffc4 	addi	r8,r18,1023
    e638:	023f270e 	bge	zero,r8,e2d8 <__alt_data_end+0xfffb8ba8>
    e63c:	988001cc 	andi	r2,r19,7
    e640:	10000726 	beq	r2,zero,e660 <__divdf3+0x670>
    e644:	990003cc 	andi	r4,r19,15
    e648:	00800104 	movi	r2,4
    e64c:	20800426 	beq	r4,r2,e660 <__divdf3+0x670>
    e650:	9885883a 	add	r2,r19,r2
    e654:	14e7803a 	cmpltu	r19,r2,r19
    e658:	8ce3883a 	add	r17,r17,r19
    e65c:	1027883a 	mov	r19,r2
    e660:	8880402c 	andhi	r2,r17,256
    e664:	10000426 	beq	r2,zero,e678 <__divdf3+0x688>
    e668:	00bfc034 	movhi	r2,65280
    e66c:	10bfffc4 	addi	r2,r2,-1
    e670:	92010004 	addi	r8,r18,1024
    e674:	88a2703a 	and	r17,r17,r2
    e678:	0081ff84 	movi	r2,2046
    e67c:	123eb616 	blt	r2,r8,e158 <__alt_data_end+0xfffb8a28>
    e680:	9826d0fa 	srli	r19,r19,3
    e684:	8804977a 	slli	r2,r17,29
    e688:	8820927a 	slli	r16,r17,9
    e68c:	4201ffcc 	andi	r8,r8,2047
    e690:	14e6b03a 	or	r19,r2,r19
    e694:	800ad33a 	srli	r5,r16,12
    e698:	a180004c 	andi	r6,r20,1
    e69c:	003eb206 	br	e168 <__alt_data_end+0xfffb8a38>
    e6a0:	008000c4 	movi	r2,3
    e6a4:	4080ac26 	beq	r8,r2,e958 <__divdf3+0x968>
    e6a8:	00800044 	movi	r2,1
    e6ac:	4080591e 	bne	r8,r2,e814 <__divdf3+0x824>
    e6b0:	e00d883a 	mov	r6,fp
    e6b4:	0011883a 	mov	r8,zero
    e6b8:	000b883a 	mov	r5,zero
    e6bc:	0027883a 	mov	r19,zero
    e6c0:	003ea906 	br	e168 <__alt_data_end+0xfffb8a38>
    e6c4:	00800434 	movhi	r2,16
    e6c8:	89400234 	orhi	r5,r17,8
    e6cc:	10bfffc4 	addi	r2,r2,-1
    e6d0:	b00d883a 	mov	r6,r22
    e6d4:	288a703a 	and	r5,r5,r2
    e6d8:	003efd06 	br	e2d0 <__alt_data_end+0xfffb8ba0>
    e6dc:	adcf883a 	add	r7,r21,r23
    e6e0:	997fffc4 	addi	r5,r19,-1
    e6e4:	3dc0412e 	bgeu	r7,r23,e7ec <__divdf3+0x7fc>
    e6e8:	2827883a 	mov	r19,r5
    e6ec:	38bfd01e 	bne	r7,r2,e630 <__alt_data_end+0xfffb8f00>
    e6f0:	d8c00117 	ldw	r3,4(sp)
    e6f4:	193fce1e 	bne	r3,r4,e630 <__alt_data_end+0xfffb8f00>
    e6f8:	003fce06 	br	e634 <__alt_data_end+0xfffb8f04>
    e6fc:	d9800215 	stw	r6,8(sp)
    e700:	d9c00515 	stw	r7,20(sp)
    e704:	000feec0 	call	feec <__clzsi2>
    e708:	10c00804 	addi	r3,r2,32
    e70c:	010009c4 	movi	r4,39
    e710:	d9800217 	ldw	r6,8(sp)
    e714:	d9c00517 	ldw	r7,20(sp)
    e718:	20feb20e 	bge	r4,r3,e1e4 <__alt_data_end+0xfffb8ab4>
    e71c:	117ffe04 	addi	r5,r2,-8
    e720:	a162983a 	sll	r17,r20,r5
    e724:	0027883a 	mov	r19,zero
    e728:	003eb506 	br	e200 <__alt_data_end+0xfffb8ad0>
    e72c:	3009883a 	mov	r4,r6
    e730:	d9800215 	stw	r6,8(sp)
    e734:	da000315 	stw	r8,12(sp)
    e738:	da400415 	stw	r9,16(sp)
    e73c:	000feec0 	call	feec <__clzsi2>
    e740:	10c00804 	addi	r3,r2,32
    e744:	010009c4 	movi	r4,39
    e748:	d9800217 	ldw	r6,8(sp)
    e74c:	da000317 	ldw	r8,12(sp)
    e750:	da400417 	ldw	r9,16(sp)
    e754:	20fec10e 	bge	r4,r3,e25c <__alt_data_end+0xfffb8b2c>
    e758:	10bffe04 	addi	r2,r2,-8
    e75c:	a8a0983a 	sll	r16,r21,r2
    e760:	002b883a 	mov	r21,zero
    e764:	003ec406 	br	e278 <__alt_data_end+0xfffb8b48>
    e768:	d8c00117 	ldw	r3,4(sp)
    e76c:	b0ed883a 	add	r22,r22,r3
    e770:	b0c5803a 	cmpltu	r2,r22,r3
    e774:	15c5883a 	add	r2,r2,r23
    e778:	11cf883a 	add	r7,r2,r7
    e77c:	88bfffc4 	addi	r2,r17,-1
    e780:	b9c00d2e 	bgeu	r23,r7,e7b8 <__divdf3+0x7c8>
    e784:	39003f36 	bltu	r7,r4,e884 <__divdf3+0x894>
    e788:	21c06a26 	beq	r4,r7,e934 <__divdf3+0x944>
    e78c:	3909c83a 	sub	r4,r7,r4
    e790:	1023883a 	mov	r17,r2
    e794:	003f4f06 	br	e4d4 <__alt_data_end+0xfffb8da4>
    e798:	9d7ee536 	bltu	r19,r21,e330 <__alt_data_end+0xfffb8c00>
    e79c:	982ed07a 	srli	r23,r19,1
    e7a0:	880497fa 	slli	r2,r17,31
    e7a4:	8810d07a 	srli	r8,r17,1
    e7a8:	982c97fa 	slli	r22,r19,31
    e7ac:	b884b03a 	or	r2,r23,r2
    e7b0:	d8800015 	stw	r2,0(sp)
    e7b4:	003ee206 	br	e340 <__alt_data_end+0xfffb8c10>
    e7b8:	3dfff41e 	bne	r7,r23,e78c <__alt_data_end+0xfffb905c>
    e7bc:	d8c00117 	ldw	r3,4(sp)
    e7c0:	b0fff02e 	bgeu	r22,r3,e784 <__alt_data_end+0xfffb9054>
    e7c4:	b909c83a 	sub	r4,r23,r4
    e7c8:	1023883a 	mov	r17,r2
    e7cc:	003f4106 	br	e4d4 <__alt_data_end+0xfffb8da4>
    e7d0:	1021883a 	mov	r16,r2
    e7d4:	003f1106 	br	e41c <__alt_data_end+0xfffb8cec>
    e7d8:	1023883a 	mov	r17,r2
    e7dc:	003ef706 	br	e3bc <__alt_data_end+0xfffb8c8c>
    e7e0:	b23fe136 	bltu	r22,r8,e768 <__alt_data_end+0xfffb9038>
    e7e4:	0009883a 	mov	r4,zero
    e7e8:	003f3a06 	br	e4d4 <__alt_data_end+0xfffb8da4>
    e7ec:	38802c36 	bltu	r7,r2,e8a0 <__divdf3+0x8b0>
    e7f0:	11c05326 	beq	r2,r7,e940 <__divdf3+0x950>
    e7f4:	2827883a 	mov	r19,r5
    e7f8:	003f8d06 	br	e630 <__alt_data_end+0xfffb8f00>
    e7fc:	04ffffc4 	movi	r19,-1
    e800:	003f8c06 	br	e634 <__alt_data_end+0xfffb8f04>
    e804:	1011883a 	mov	r8,r2
    e808:	003f4d06 	br	e540 <__alt_data_end+0xfffb8e10>
    e80c:	1013883a 	mov	r9,r2
    e810:	003f6406 	br	e5a4 <__alt_data_end+0xfffb8e74>
    e814:	e029883a 	mov	r20,fp
    e818:	003f8606 	br	e634 <__alt_data_end+0xfffb8f04>
    e81c:	008007c4 	movi	r2,31
    e820:	14002a16 	blt	r2,r16,e8cc <__divdf3+0x8dc>
    e824:	91410784 	addi	r5,r18,1054
    e828:	9c0cd83a 	srl	r6,r19,r16
    e82c:	8948983a 	sll	r4,r17,r5
    e830:	9944983a 	sll	r2,r19,r5
    e834:	8c20d83a 	srl	r16,r17,r16
    e838:	3108b03a 	or	r4,r6,r4
    e83c:	1004c03a 	cmpne	r2,r2,zero
    e840:	2084b03a 	or	r2,r4,r2
    e844:	110001cc 	andi	r4,r2,7
    e848:	20000726 	beq	r4,zero,e868 <__divdf3+0x878>
    e84c:	114003cc 	andi	r5,r2,15
    e850:	01000104 	movi	r4,4
    e854:	29000426 	beq	r5,r4,e868 <__divdf3+0x878>
    e858:	11000104 	addi	r4,r2,4
    e85c:	2085803a 	cmpltu	r2,r4,r2
    e860:	80a1883a 	add	r16,r16,r2
    e864:	2005883a 	mov	r2,r4
    e868:	8100202c 	andhi	r4,r16,128
    e86c:	20002d26 	beq	r4,zero,e924 <__divdf3+0x934>
    e870:	a180004c 	andi	r6,r20,1
    e874:	02000044 	movi	r8,1
    e878:	000b883a 	mov	r5,zero
    e87c:	0027883a 	mov	r19,zero
    e880:	003e3906 	br	e168 <__alt_data_end+0xfffb8a38>
    e884:	d8c00117 	ldw	r3,4(sp)
    e888:	8c7fff84 	addi	r17,r17,-2
    e88c:	b0ed883a 	add	r22,r22,r3
    e890:	b0c5803a 	cmpltu	r2,r22,r3
    e894:	15c5883a 	add	r2,r2,r23
    e898:	11cf883a 	add	r7,r2,r7
    e89c:	003f0c06 	br	e4d0 <__alt_data_end+0xfffb8da0>
    e8a0:	d8c00117 	ldw	r3,4(sp)
    e8a4:	997fff84 	addi	r5,r19,-2
    e8a8:	18d1883a 	add	r8,r3,r3
    e8ac:	40c7803a 	cmpltu	r3,r8,r3
    e8b0:	1dcd883a 	add	r6,r3,r23
    e8b4:	398f883a 	add	r7,r7,r6
    e8b8:	da000115 	stw	r8,4(sp)
    e8bc:	003f8a06 	br	e6e8 <__alt_data_end+0xfffb8fb8>
    e8c0:	203f861e 	bne	r4,zero,e6dc <__alt_data_end+0xfffb8fac>
    e8c4:	d8000115 	stw	zero,4(sp)
    e8c8:	003f8906 	br	e6f0 <__alt_data_end+0xfffb8fc0>
    e8cc:	00bef884 	movi	r2,-1054
    e8d0:	1485c83a 	sub	r2,r2,r18
    e8d4:	01000804 	movi	r4,32
    e8d8:	8884d83a 	srl	r2,r17,r2
    e8dc:	81001c26 	beq	r16,r4,e950 <__divdf3+0x960>
    e8e0:	91010f84 	addi	r4,r18,1086
    e8e4:	8908983a 	sll	r4,r17,r4
    e8e8:	24c8b03a 	or	r4,r4,r19
    e8ec:	2008c03a 	cmpne	r4,r4,zero
    e8f0:	2084b03a 	or	r2,r4,r2
    e8f4:	140001cc 	andi	r16,r2,7
    e8f8:	8000061e 	bne	r16,zero,e914 <__divdf3+0x924>
    e8fc:	000b883a 	mov	r5,zero
    e900:	1004d0fa 	srli	r2,r2,3
    e904:	a180004c 	andi	r6,r20,1
    e908:	0011883a 	mov	r8,zero
    e90c:	1426b03a 	or	r19,r2,r16
    e910:	003e1506 	br	e168 <__alt_data_end+0xfffb8a38>
    e914:	114003cc 	andi	r5,r2,15
    e918:	01000104 	movi	r4,4
    e91c:	0021883a 	mov	r16,zero
    e920:	293fcd1e 	bne	r5,r4,e858 <__alt_data_end+0xfffb9128>
    e924:	800a927a 	slli	r5,r16,9
    e928:	8020977a 	slli	r16,r16,29
    e92c:	280ad33a 	srli	r5,r5,12
    e930:	003ff306 	br	e900 <__alt_data_end+0xfffb91d0>
    e934:	b23fd336 	bltu	r22,r8,e884 <__alt_data_end+0xfffb9154>
    e938:	1023883a 	mov	r17,r2
    e93c:	003fa906 	br	e7e4 <__alt_data_end+0xfffb90b4>
    e940:	d8c00117 	ldw	r3,4(sp)
    e944:	193fd636 	bltu	r3,r4,e8a0 <__alt_data_end+0xfffb9170>
    e948:	2827883a 	mov	r19,r5
    e94c:	003f6806 	br	e6f0 <__alt_data_end+0xfffb8fc0>
    e950:	0009883a 	mov	r4,zero
    e954:	003fe406 	br	e8e8 <__alt_data_end+0xfffb91b8>
    e958:	00800434 	movhi	r2,16
    e95c:	89400234 	orhi	r5,r17,8
    e960:	10bfffc4 	addi	r2,r2,-1
    e964:	e00d883a 	mov	r6,fp
    e968:	288a703a 	and	r5,r5,r2
    e96c:	003e5806 	br	e2d0 <__alt_data_end+0xfffb8ba0>

0000e970 <__eqdf2>:
    e970:	2804d53a 	srli	r2,r5,20
    e974:	3806d53a 	srli	r3,r7,20
    e978:	02000434 	movhi	r8,16
    e97c:	423fffc4 	addi	r8,r8,-1
    e980:	1081ffcc 	andi	r2,r2,2047
    e984:	0241ffc4 	movi	r9,2047
    e988:	2a14703a 	and	r10,r5,r8
    e98c:	18c1ffcc 	andi	r3,r3,2047
    e990:	3a10703a 	and	r8,r7,r8
    e994:	280ad7fa 	srli	r5,r5,31
    e998:	380ed7fa 	srli	r7,r7,31
    e99c:	12400f26 	beq	r2,r9,e9dc <__eqdf2+0x6c>
    e9a0:	0241ffc4 	movi	r9,2047
    e9a4:	1a400326 	beq	r3,r9,e9b4 <__eqdf2+0x44>
    e9a8:	10c00526 	beq	r2,r3,e9c0 <__eqdf2+0x50>
    e9ac:	00800044 	movi	r2,1
    e9b0:	f800283a 	ret
    e9b4:	4192b03a 	or	r9,r8,r6
    e9b8:	483ffc1e 	bne	r9,zero,e9ac <__alt_data_end+0xfffb927c>
    e9bc:	10fffb1e 	bne	r2,r3,e9ac <__alt_data_end+0xfffb927c>
    e9c0:	523ffa1e 	bne	r10,r8,e9ac <__alt_data_end+0xfffb927c>
    e9c4:	21bff91e 	bne	r4,r6,e9ac <__alt_data_end+0xfffb927c>
    e9c8:	29c00826 	beq	r5,r7,e9ec <__eqdf2+0x7c>
    e9cc:	103ff71e 	bne	r2,zero,e9ac <__alt_data_end+0xfffb927c>
    e9d0:	5104b03a 	or	r2,r10,r4
    e9d4:	1004c03a 	cmpne	r2,r2,zero
    e9d8:	f800283a 	ret
    e9dc:	5112b03a 	or	r9,r10,r4
    e9e0:	483fef26 	beq	r9,zero,e9a0 <__alt_data_end+0xfffb9270>
    e9e4:	00800044 	movi	r2,1
    e9e8:	f800283a 	ret
    e9ec:	0005883a 	mov	r2,zero
    e9f0:	f800283a 	ret

0000e9f4 <__gedf2>:
    e9f4:	2804d53a 	srli	r2,r5,20
    e9f8:	3806d53a 	srli	r3,r7,20
    e9fc:	02000434 	movhi	r8,16
    ea00:	423fffc4 	addi	r8,r8,-1
    ea04:	0241ffc4 	movi	r9,2047
    ea08:	1081ffcc 	andi	r2,r2,2047
    ea0c:	2a14703a 	and	r10,r5,r8
    ea10:	1a46703a 	and	r3,r3,r9
    ea14:	3a10703a 	and	r8,r7,r8
    ea18:	280ad7fa 	srli	r5,r5,31
    ea1c:	380ed7fa 	srli	r7,r7,31
    ea20:	12400b26 	beq	r2,r9,ea50 <__gedf2+0x5c>
    ea24:	1a401626 	beq	r3,r9,ea80 <__gedf2+0x8c>
    ea28:	10000c1e 	bne	r2,zero,ea5c <__gedf2+0x68>
    ea2c:	5112b03a 	or	r9,r10,r4
    ea30:	4813003a 	cmpeq	r9,r9,zero
    ea34:	4817883a 	mov	r11,r9
    ea38:	18000c1e 	bne	r3,zero,ea6c <__gedf2+0x78>
    ea3c:	4198b03a 	or	r12,r8,r6
    ea40:	60000a1e 	bne	r12,zero,ea6c <__gedf2+0x78>
    ea44:	48001326 	beq	r9,zero,ea94 <__gedf2+0xa0>
    ea48:	0005883a 	mov	r2,zero
    ea4c:	f800283a 	ret
    ea50:	5112b03a 	or	r9,r10,r4
    ea54:	4800191e 	bne	r9,zero,eabc <__gedf2+0xc8>
    ea58:	18800926 	beq	r3,r2,ea80 <__gedf2+0x8c>
    ea5c:	18000b1e 	bne	r3,zero,ea8c <__gedf2+0x98>
    ea60:	4192b03a 	or	r9,r8,r6
    ea64:	0017883a 	mov	r11,zero
    ea68:	48000a26 	beq	r9,zero,ea94 <__gedf2+0xa0>
    ea6c:	39c03fcc 	andi	r7,r7,255
    ea70:	58000726 	beq	r11,zero,ea90 <__gedf2+0x9c>
    ea74:	3800081e 	bne	r7,zero,ea98 <__gedf2+0xa4>
    ea78:	00bfffc4 	movi	r2,-1
    ea7c:	f800283a 	ret
    ea80:	4192b03a 	or	r9,r8,r6
    ea84:	48000d1e 	bne	r9,zero,eabc <__gedf2+0xc8>
    ea88:	103fe826 	beq	r2,zero,ea2c <__alt_data_end+0xfffb92fc>
    ea8c:	39c03fcc 	andi	r7,r7,255
    ea90:	29c00326 	beq	r5,r7,eaa0 <__gedf2+0xac>
    ea94:	283ff81e 	bne	r5,zero,ea78 <__alt_data_end+0xfffb9348>
    ea98:	00800044 	movi	r2,1
    ea9c:	f800283a 	ret
    eaa0:	18bffc16 	blt	r3,r2,ea94 <__alt_data_end+0xfffb9364>
    eaa4:	10c00316 	blt	r2,r3,eab4 <__gedf2+0xc0>
    eaa8:	42bffa36 	bltu	r8,r10,ea94 <__alt_data_end+0xfffb9364>
    eaac:	52000526 	beq	r10,r8,eac4 <__gedf2+0xd0>
    eab0:	523fe52e 	bgeu	r10,r8,ea48 <__alt_data_end+0xfffb9318>
    eab4:	283ff026 	beq	r5,zero,ea78 <__alt_data_end+0xfffb9348>
    eab8:	003ff706 	br	ea98 <__alt_data_end+0xfffb9368>
    eabc:	00bfff84 	movi	r2,-2
    eac0:	f800283a 	ret
    eac4:	313ff336 	bltu	r6,r4,ea94 <__alt_data_end+0xfffb9364>
    eac8:	21bfdf2e 	bgeu	r4,r6,ea48 <__alt_data_end+0xfffb9318>
    eacc:	283fea26 	beq	r5,zero,ea78 <__alt_data_end+0xfffb9348>
    ead0:	003ff106 	br	ea98 <__alt_data_end+0xfffb9368>

0000ead4 <__ledf2>:
    ead4:	2804d53a 	srli	r2,r5,20
    ead8:	3810d53a 	srli	r8,r7,20
    eadc:	00c00434 	movhi	r3,16
    eae0:	18ffffc4 	addi	r3,r3,-1
    eae4:	0241ffc4 	movi	r9,2047
    eae8:	1081ffcc 	andi	r2,r2,2047
    eaec:	28d4703a 	and	r10,r5,r3
    eaf0:	4250703a 	and	r8,r8,r9
    eaf4:	38c6703a 	and	r3,r7,r3
    eaf8:	280ad7fa 	srli	r5,r5,31
    eafc:	380ed7fa 	srli	r7,r7,31
    eb00:	12400b26 	beq	r2,r9,eb30 <__ledf2+0x5c>
    eb04:	42401926 	beq	r8,r9,eb6c <__ledf2+0x98>
    eb08:	10000c1e 	bne	r2,zero,eb3c <__ledf2+0x68>
    eb0c:	5112b03a 	or	r9,r10,r4
    eb10:	4813003a 	cmpeq	r9,r9,zero
    eb14:	4817883a 	mov	r11,r9
    eb18:	40000f26 	beq	r8,zero,eb58 <__ledf2+0x84>
    eb1c:	39c03fcc 	andi	r7,r7,255
    eb20:	58001826 	beq	r11,zero,eb84 <__ledf2+0xb0>
    eb24:	38000a1e 	bne	r7,zero,eb50 <__ledf2+0x7c>
    eb28:	00bfffc4 	movi	r2,-1
    eb2c:	f800283a 	ret
    eb30:	5112b03a 	or	r9,r10,r4
    eb34:	48000f1e 	bne	r9,zero,eb74 <__ledf2+0xa0>
    eb38:	40800c26 	beq	r8,r2,eb6c <__ledf2+0x98>
    eb3c:	4000101e 	bne	r8,zero,eb80 <__ledf2+0xac>
    eb40:	1992b03a 	or	r9,r3,r6
    eb44:	0017883a 	mov	r11,zero
    eb48:	483ff41e 	bne	r9,zero,eb1c <__alt_data_end+0xfffb93ec>
    eb4c:	283ff61e 	bne	r5,zero,eb28 <__alt_data_end+0xfffb93f8>
    eb50:	00800044 	movi	r2,1
    eb54:	f800283a 	ret
    eb58:	1998b03a 	or	r12,r3,r6
    eb5c:	603fef1e 	bne	r12,zero,eb1c <__alt_data_end+0xfffb93ec>
    eb60:	483ffa26 	beq	r9,zero,eb4c <__alt_data_end+0xfffb941c>
    eb64:	0005883a 	mov	r2,zero
    eb68:	f800283a 	ret
    eb6c:	1992b03a 	or	r9,r3,r6
    eb70:	48000226 	beq	r9,zero,eb7c <__ledf2+0xa8>
    eb74:	00800084 	movi	r2,2
    eb78:	f800283a 	ret
    eb7c:	103fe326 	beq	r2,zero,eb0c <__alt_data_end+0xfffb93dc>
    eb80:	39c03fcc 	andi	r7,r7,255
    eb84:	29fff11e 	bne	r5,r7,eb4c <__alt_data_end+0xfffb941c>
    eb88:	40bff016 	blt	r8,r2,eb4c <__alt_data_end+0xfffb941c>
    eb8c:	12000316 	blt	r2,r8,eb9c <__ledf2+0xc8>
    eb90:	1abfee36 	bltu	r3,r10,eb4c <__alt_data_end+0xfffb941c>
    eb94:	50c00326 	beq	r10,r3,eba4 <__ledf2+0xd0>
    eb98:	50fff22e 	bgeu	r10,r3,eb64 <__alt_data_end+0xfffb9434>
    eb9c:	283fe226 	beq	r5,zero,eb28 <__alt_data_end+0xfffb93f8>
    eba0:	003feb06 	br	eb50 <__alt_data_end+0xfffb9420>
    eba4:	313fe936 	bltu	r6,r4,eb4c <__alt_data_end+0xfffb941c>
    eba8:	21bfee2e 	bgeu	r4,r6,eb64 <__alt_data_end+0xfffb9434>
    ebac:	283fde26 	beq	r5,zero,eb28 <__alt_data_end+0xfffb93f8>
    ebb0:	003fe706 	br	eb50 <__alt_data_end+0xfffb9420>

0000ebb4 <__muldf3>:
    ebb4:	deffee04 	addi	sp,sp,-72
    ebb8:	dd000c15 	stw	r20,48(sp)
    ebbc:	2828d53a 	srli	r20,r5,20
    ebc0:	dd400d15 	stw	r21,52(sp)
    ebc4:	282ad7fa 	srli	r21,r5,31
    ebc8:	dc000815 	stw	r16,32(sp)
    ebcc:	04000434 	movhi	r16,16
    ebd0:	ddc00f15 	stw	r23,60(sp)
    ebd4:	dcc00b15 	stw	r19,44(sp)
    ebd8:	dc800a15 	stw	r18,40(sp)
    ebdc:	843fffc4 	addi	r16,r16,-1
    ebe0:	dfc01115 	stw	ra,68(sp)
    ebe4:	df001015 	stw	fp,64(sp)
    ebe8:	dd800e15 	stw	r22,56(sp)
    ebec:	dc400915 	stw	r17,36(sp)
    ebf0:	a501ffcc 	andi	r20,r20,2047
    ebf4:	2025883a 	mov	r18,r4
    ebf8:	202f883a 	mov	r23,r4
    ebfc:	2c20703a 	and	r16,r5,r16
    ec00:	a827883a 	mov	r19,r21
    ec04:	aa403fcc 	andi	r9,r21,255
    ec08:	a0005926 	beq	r20,zero,ed70 <__muldf3+0x1bc>
    ec0c:	0081ffc4 	movi	r2,2047
    ec10:	a0803426 	beq	r20,r2,ece4 <__muldf3+0x130>
    ec14:	84000434 	orhi	r16,r16,16
    ec18:	2004d77a 	srli	r2,r4,29
    ec1c:	802090fa 	slli	r16,r16,3
    ec20:	202e90fa 	slli	r23,r4,3
    ec24:	a53f0044 	addi	r20,r20,-1023
    ec28:	80a0b03a 	or	r16,r16,r2
    ec2c:	000b883a 	mov	r5,zero
    ec30:	0039883a 	mov	fp,zero
    ec34:	3806d53a 	srli	r3,r7,20
    ec38:	382cd7fa 	srli	r22,r7,31
    ec3c:	00800434 	movhi	r2,16
    ec40:	10bfffc4 	addi	r2,r2,-1
    ec44:	18c1ffcc 	andi	r3,r3,2047
    ec48:	3025883a 	mov	r18,r6
    ec4c:	38a2703a 	and	r17,r7,r2
    ec50:	b2803fcc 	andi	r10,r22,255
    ec54:	18006426 	beq	r3,zero,ede8 <__muldf3+0x234>
    ec58:	0081ffc4 	movi	r2,2047
    ec5c:	18805c26 	beq	r3,r2,edd0 <__muldf3+0x21c>
    ec60:	8c400434 	orhi	r17,r17,16
    ec64:	3004d77a 	srli	r2,r6,29
    ec68:	882290fa 	slli	r17,r17,3
    ec6c:	302490fa 	slli	r18,r6,3
    ec70:	18ff0044 	addi	r3,r3,-1023
    ec74:	88a2b03a 	or	r17,r17,r2
    ec78:	000f883a 	mov	r7,zero
    ec7c:	394ab03a 	or	r5,r7,r5
    ec80:	280a90ba 	slli	r5,r5,2
    ec84:	00800074 	movhi	r2,1
    ec88:	10bb2904 	addi	r2,r2,-4956
    ec8c:	288b883a 	add	r5,r5,r2
    ec90:	28800017 	ldw	r2,0(r5)
    ec94:	a0c7883a 	add	r3,r20,r3
    ec98:	b54cf03a 	xor	r6,r22,r21
    ec9c:	1a000044 	addi	r8,r3,1
    eca0:	1000683a 	jmp	r2
    eca4:	0000eee8 	cmpgeui	zero,zero,955
    eca8:	0000eed4 	movui	zero,955
    ecac:	0000eed4 	movui	zero,955
    ecb0:	0000eec0 	call	eec <setup_keyboard+0x84c>
    ecb4:	0000ed00 	call	ed0 <setup_keyboard+0x830>
    ecb8:	0000ed00 	call	ed0 <setup_keyboard+0x830>
    ecbc:	0000eea8 	cmpgeui	zero,zero,954
    ecc0:	0000eec0 	call	eec <setup_keyboard+0x84c>
    ecc4:	0000ed00 	call	ed0 <setup_keyboard+0x830>
    ecc8:	0000eea8 	cmpgeui	zero,zero,954
    eccc:	0000ed00 	call	ed0 <setup_keyboard+0x830>
    ecd0:	0000eec0 	call	eec <setup_keyboard+0x84c>
    ecd4:	0000ed04 	movi	zero,948
    ecd8:	0000ed04 	movi	zero,948
    ecdc:	0000ed04 	movi	zero,948
    ece0:	0000f224 	muli	zero,zero,968
    ece4:	8104b03a 	or	r2,r16,r4
    ece8:	10006c1e 	bne	r2,zero,ee9c <__muldf3+0x2e8>
    ecec:	01400204 	movi	r5,8
    ecf0:	0021883a 	mov	r16,zero
    ecf4:	002f883a 	mov	r23,zero
    ecf8:	07000084 	movi	fp,2
    ecfc:	003fcd06 	br	ec34 <__alt_data_end+0xfffb9504>
    ed00:	3013883a 	mov	r9,r6
    ed04:	00800084 	movi	r2,2
    ed08:	e080501e 	bne	fp,r2,ee4c <__muldf3+0x298>
    ed0c:	4cc0004c 	andi	r19,r9,1
    ed10:	0101ffc4 	movi	r4,2047
    ed14:	0021883a 	mov	r16,zero
    ed18:	002f883a 	mov	r23,zero
    ed1c:	2008953a 	slli	r4,r4,20
    ed20:	98c03fcc 	andi	r3,r19,255
    ed24:	04400434 	movhi	r17,16
    ed28:	8c7fffc4 	addi	r17,r17,-1
    ed2c:	180697fa 	slli	r3,r3,31
    ed30:	8460703a 	and	r16,r16,r17
    ed34:	8120b03a 	or	r16,r16,r4
    ed38:	80c6b03a 	or	r3,r16,r3
    ed3c:	b805883a 	mov	r2,r23
    ed40:	dfc01117 	ldw	ra,68(sp)
    ed44:	df001017 	ldw	fp,64(sp)
    ed48:	ddc00f17 	ldw	r23,60(sp)
    ed4c:	dd800e17 	ldw	r22,56(sp)
    ed50:	dd400d17 	ldw	r21,52(sp)
    ed54:	dd000c17 	ldw	r20,48(sp)
    ed58:	dcc00b17 	ldw	r19,44(sp)
    ed5c:	dc800a17 	ldw	r18,40(sp)
    ed60:	dc400917 	ldw	r17,36(sp)
    ed64:	dc000817 	ldw	r16,32(sp)
    ed68:	dec01204 	addi	sp,sp,72
    ed6c:	f800283a 	ret
    ed70:	8104b03a 	or	r2,r16,r4
    ed74:	10004426 	beq	r2,zero,ee88 <__muldf3+0x2d4>
    ed78:	80014b26 	beq	r16,zero,f2a8 <__muldf3+0x6f4>
    ed7c:	8009883a 	mov	r4,r16
    ed80:	d9800715 	stw	r6,28(sp)
    ed84:	d9c00215 	stw	r7,8(sp)
    ed88:	da400415 	stw	r9,16(sp)
    ed8c:	000feec0 	call	feec <__clzsi2>
    ed90:	d9800717 	ldw	r6,28(sp)
    ed94:	d9c00217 	ldw	r7,8(sp)
    ed98:	da400417 	ldw	r9,16(sp)
    ed9c:	1007883a 	mov	r3,r2
    eda0:	01000a04 	movi	r4,40
    eda4:	1dfffe04 	addi	r23,r3,-8
    eda8:	20c9c83a 	sub	r4,r4,r3
    edac:	85e0983a 	sll	r16,r16,r23
    edb0:	9108d83a 	srl	r4,r18,r4
    edb4:	95ee983a 	sll	r23,r18,r23
    edb8:	2420b03a 	or	r16,r4,r16
    edbc:	053f0344 	movi	r20,-1011
    edc0:	a0e9c83a 	sub	r20,r20,r3
    edc4:	000b883a 	mov	r5,zero
    edc8:	0039883a 	mov	fp,zero
    edcc:	003f9906 	br	ec34 <__alt_data_end+0xfffb9504>
    edd0:	8984b03a 	or	r2,r17,r6
    edd4:	10002a1e 	bne	r2,zero,ee80 <__muldf3+0x2cc>
    edd8:	0023883a 	mov	r17,zero
    eddc:	0025883a 	mov	r18,zero
    ede0:	01c00084 	movi	r7,2
    ede4:	003fa506 	br	ec7c <__alt_data_end+0xfffb954c>
    ede8:	8984b03a 	or	r2,r17,r6
    edec:	10002026 	beq	r2,zero,ee70 <__muldf3+0x2bc>
    edf0:	88011c26 	beq	r17,zero,f264 <__muldf3+0x6b0>
    edf4:	8809883a 	mov	r4,r17
    edf8:	d9400215 	stw	r5,8(sp)
    edfc:	d9800715 	stw	r6,28(sp)
    ee00:	da400415 	stw	r9,16(sp)
    ee04:	da800315 	stw	r10,12(sp)
    ee08:	000feec0 	call	feec <__clzsi2>
    ee0c:	d9400217 	ldw	r5,8(sp)
    ee10:	d9800717 	ldw	r6,28(sp)
    ee14:	da400417 	ldw	r9,16(sp)
    ee18:	da800317 	ldw	r10,12(sp)
    ee1c:	1007883a 	mov	r3,r2
    ee20:	01000a04 	movi	r4,40
    ee24:	1cbffe04 	addi	r18,r3,-8
    ee28:	20c9c83a 	sub	r4,r4,r3
    ee2c:	8ca2983a 	sll	r17,r17,r18
    ee30:	3108d83a 	srl	r4,r6,r4
    ee34:	34a4983a 	sll	r18,r6,r18
    ee38:	2462b03a 	or	r17,r4,r17
    ee3c:	00bf0344 	movi	r2,-1011
    ee40:	10c7c83a 	sub	r3,r2,r3
    ee44:	000f883a 	mov	r7,zero
    ee48:	003f8c06 	br	ec7c <__alt_data_end+0xfffb954c>
    ee4c:	008000c4 	movi	r2,3
    ee50:	e0816d26 	beq	fp,r2,f408 <__muldf3+0x854>
    ee54:	00800044 	movi	r2,1
    ee58:	e081321e 	bne	fp,r2,f324 <__muldf3+0x770>
    ee5c:	48a6703a 	and	r19,r9,r2
    ee60:	0009883a 	mov	r4,zero
    ee64:	0021883a 	mov	r16,zero
    ee68:	002f883a 	mov	r23,zero
    ee6c:	003fab06 	br	ed1c <__alt_data_end+0xfffb95ec>
    ee70:	0023883a 	mov	r17,zero
    ee74:	0025883a 	mov	r18,zero
    ee78:	01c00044 	movi	r7,1
    ee7c:	003f7f06 	br	ec7c <__alt_data_end+0xfffb954c>
    ee80:	01c000c4 	movi	r7,3
    ee84:	003f7d06 	br	ec7c <__alt_data_end+0xfffb954c>
    ee88:	01400104 	movi	r5,4
    ee8c:	0021883a 	mov	r16,zero
    ee90:	002f883a 	mov	r23,zero
    ee94:	07000044 	movi	fp,1
    ee98:	003f6606 	br	ec34 <__alt_data_end+0xfffb9504>
    ee9c:	01400304 	movi	r5,12
    eea0:	070000c4 	movi	fp,3
    eea4:	003f6306 	br	ec34 <__alt_data_end+0xfffb9504>
    eea8:	04000434 	movhi	r16,16
    eeac:	0027883a 	mov	r19,zero
    eeb0:	843fffc4 	addi	r16,r16,-1
    eeb4:	05ffffc4 	movi	r23,-1
    eeb8:	0101ffc4 	movi	r4,2047
    eebc:	003f9706 	br	ed1c <__alt_data_end+0xfffb95ec>
    eec0:	8821883a 	mov	r16,r17
    eec4:	902f883a 	mov	r23,r18
    eec8:	5013883a 	mov	r9,r10
    eecc:	3839883a 	mov	fp,r7
    eed0:	003f8c06 	br	ed04 <__alt_data_end+0xfffb95d4>
    eed4:	8821883a 	mov	r16,r17
    eed8:	902f883a 	mov	r23,r18
    eedc:	3013883a 	mov	r9,r6
    eee0:	3839883a 	mov	fp,r7
    eee4:	003f8706 	br	ed04 <__alt_data_end+0xfffb95d4>
    eee8:	b82ad43a 	srli	r21,r23,16
    eeec:	9038d43a 	srli	fp,r18,16
    eef0:	bdffffcc 	andi	r23,r23,65535
    eef4:	94bfffcc 	andi	r18,r18,65535
    eef8:	9009883a 	mov	r4,r18
    eefc:	b80b883a 	mov	r5,r23
    ef00:	d8c00515 	stw	r3,20(sp)
    ef04:	d9800715 	stw	r6,28(sp)
    ef08:	da000615 	stw	r8,24(sp)
    ef0c:	000d72c0 	call	d72c <__mulsi3>
    ef10:	9009883a 	mov	r4,r18
    ef14:	a80b883a 	mov	r5,r21
    ef18:	1029883a 	mov	r20,r2
    ef1c:	000d72c0 	call	d72c <__mulsi3>
    ef20:	e009883a 	mov	r4,fp
    ef24:	a80b883a 	mov	r5,r21
    ef28:	102d883a 	mov	r22,r2
    ef2c:	000d72c0 	call	d72c <__mulsi3>
    ef30:	e009883a 	mov	r4,fp
    ef34:	b80b883a 	mov	r5,r23
    ef38:	1027883a 	mov	r19,r2
    ef3c:	000d72c0 	call	d72c <__mulsi3>
    ef40:	a008d43a 	srli	r4,r20,16
    ef44:	b085883a 	add	r2,r22,r2
    ef48:	d8c00517 	ldw	r3,20(sp)
    ef4c:	110f883a 	add	r7,r2,r4
    ef50:	d9800717 	ldw	r6,28(sp)
    ef54:	da000617 	ldw	r8,24(sp)
    ef58:	3d80022e 	bgeu	r7,r22,ef64 <__muldf3+0x3b0>
    ef5c:	00800074 	movhi	r2,1
    ef60:	98a7883a 	add	r19,r19,r2
    ef64:	3804943a 	slli	r2,r7,16
    ef68:	380ed43a 	srli	r7,r7,16
    ef6c:	882cd43a 	srli	r22,r17,16
    ef70:	a53fffcc 	andi	r20,r20,65535
    ef74:	8c7fffcc 	andi	r17,r17,65535
    ef78:	1529883a 	add	r20,r2,r20
    ef7c:	8809883a 	mov	r4,r17
    ef80:	b80b883a 	mov	r5,r23
    ef84:	d8c00515 	stw	r3,20(sp)
    ef88:	d9800715 	stw	r6,28(sp)
    ef8c:	da000615 	stw	r8,24(sp)
    ef90:	d9c00015 	stw	r7,0(sp)
    ef94:	dd000115 	stw	r20,4(sp)
    ef98:	000d72c0 	call	d72c <__mulsi3>
    ef9c:	a80b883a 	mov	r5,r21
    efa0:	8809883a 	mov	r4,r17
    efa4:	d8800415 	stw	r2,16(sp)
    efa8:	000d72c0 	call	d72c <__mulsi3>
    efac:	a80b883a 	mov	r5,r21
    efb0:	b009883a 	mov	r4,r22
    efb4:	1029883a 	mov	r20,r2
    efb8:	000d72c0 	call	d72c <__mulsi3>
    efbc:	b009883a 	mov	r4,r22
    efc0:	b80b883a 	mov	r5,r23
    efc4:	102b883a 	mov	r21,r2
    efc8:	000d72c0 	call	d72c <__mulsi3>
    efcc:	da400417 	ldw	r9,16(sp)
    efd0:	a085883a 	add	r2,r20,r2
    efd4:	d8c00517 	ldw	r3,20(sp)
    efd8:	4808d43a 	srli	r4,r9,16
    efdc:	d9800717 	ldw	r6,28(sp)
    efe0:	da000617 	ldw	r8,24(sp)
    efe4:	1109883a 	add	r4,r2,r4
    efe8:	2500022e 	bgeu	r4,r20,eff4 <__muldf3+0x440>
    efec:	00800074 	movhi	r2,1
    eff0:	a8ab883a 	add	r21,r21,r2
    eff4:	200e943a 	slli	r7,r4,16
    eff8:	2004d43a 	srli	r2,r4,16
    effc:	802ed43a 	srli	r23,r16,16
    f000:	843fffcc 	andi	r16,r16,65535
    f004:	4d3fffcc 	andi	r20,r9,65535
    f008:	9009883a 	mov	r4,r18
    f00c:	800b883a 	mov	r5,r16
    f010:	3d29883a 	add	r20,r7,r20
    f014:	d8c00515 	stw	r3,20(sp)
    f018:	d9800715 	stw	r6,28(sp)
    f01c:	da000615 	stw	r8,24(sp)
    f020:	a8ab883a 	add	r21,r21,r2
    f024:	000d72c0 	call	d72c <__mulsi3>
    f028:	9009883a 	mov	r4,r18
    f02c:	b80b883a 	mov	r5,r23
    f030:	d8800315 	stw	r2,12(sp)
    f034:	000d72c0 	call	d72c <__mulsi3>
    f038:	e009883a 	mov	r4,fp
    f03c:	b80b883a 	mov	r5,r23
    f040:	1025883a 	mov	r18,r2
    f044:	000d72c0 	call	d72c <__mulsi3>
    f048:	e009883a 	mov	r4,fp
    f04c:	800b883a 	mov	r5,r16
    f050:	d8800215 	stw	r2,8(sp)
    f054:	000d72c0 	call	d72c <__mulsi3>
    f058:	da800317 	ldw	r10,12(sp)
    f05c:	d9400017 	ldw	r5,0(sp)
    f060:	9085883a 	add	r2,r18,r2
    f064:	5008d43a 	srli	r4,r10,16
    f068:	a153883a 	add	r9,r20,r5
    f06c:	d8c00517 	ldw	r3,20(sp)
    f070:	1109883a 	add	r4,r2,r4
    f074:	d9800717 	ldw	r6,28(sp)
    f078:	da000617 	ldw	r8,24(sp)
    f07c:	dac00217 	ldw	r11,8(sp)
    f080:	2480022e 	bgeu	r4,r18,f08c <__muldf3+0x4d8>
    f084:	00800074 	movhi	r2,1
    f088:	5897883a 	add	r11,r11,r2
    f08c:	200e943a 	slli	r7,r4,16
    f090:	2038d43a 	srli	fp,r4,16
    f094:	52bfffcc 	andi	r10,r10,65535
    f098:	3a8f883a 	add	r7,r7,r10
    f09c:	8809883a 	mov	r4,r17
    f0a0:	800b883a 	mov	r5,r16
    f0a4:	d8c00515 	stw	r3,20(sp)
    f0a8:	d9800715 	stw	r6,28(sp)
    f0ac:	d9c00215 	stw	r7,8(sp)
    f0b0:	da000615 	stw	r8,24(sp)
    f0b4:	da400415 	stw	r9,16(sp)
    f0b8:	5f39883a 	add	fp,r11,fp
    f0bc:	000d72c0 	call	d72c <__mulsi3>
    f0c0:	8809883a 	mov	r4,r17
    f0c4:	b80b883a 	mov	r5,r23
    f0c8:	1025883a 	mov	r18,r2
    f0cc:	000d72c0 	call	d72c <__mulsi3>
    f0d0:	b009883a 	mov	r4,r22
    f0d4:	b80b883a 	mov	r5,r23
    f0d8:	d8800315 	stw	r2,12(sp)
    f0dc:	000d72c0 	call	d72c <__mulsi3>
    f0e0:	b009883a 	mov	r4,r22
    f0e4:	800b883a 	mov	r5,r16
    f0e8:	1023883a 	mov	r17,r2
    f0ec:	000d72c0 	call	d72c <__mulsi3>
    f0f0:	da800317 	ldw	r10,12(sp)
    f0f4:	9008d43a 	srli	r4,r18,16
    f0f8:	d8c00517 	ldw	r3,20(sp)
    f0fc:	5085883a 	add	r2,r10,r2
    f100:	1109883a 	add	r4,r2,r4
    f104:	d9800717 	ldw	r6,28(sp)
    f108:	d9c00217 	ldw	r7,8(sp)
    f10c:	da000617 	ldw	r8,24(sp)
    f110:	da400417 	ldw	r9,16(sp)
    f114:	2280022e 	bgeu	r4,r10,f120 <__muldf3+0x56c>
    f118:	00800074 	movhi	r2,1
    f11c:	88a3883a 	add	r17,r17,r2
    f120:	2004943a 	slli	r2,r4,16
    f124:	94bfffcc 	andi	r18,r18,65535
    f128:	4ce7883a 	add	r19,r9,r19
    f12c:	14a5883a 	add	r18,r2,r18
    f130:	9d29803a 	cmpltu	r20,r19,r20
    f134:	9565883a 	add	r18,r18,r21
    f138:	9505883a 	add	r2,r18,r20
    f13c:	99e7883a 	add	r19,r19,r7
    f140:	99cf803a 	cmpltu	r7,r19,r7
    f144:	e08b883a 	add	r5,fp,r2
    f148:	2008d43a 	srli	r4,r4,16
    f14c:	29ef883a 	add	r23,r5,r7
    f150:	1529803a 	cmpltu	r20,r2,r20
    f154:	956b803a 	cmpltu	r21,r18,r21
    f158:	b9cf803a 	cmpltu	r7,r23,r7
    f15c:	a564b03a 	or	r18,r20,r21
    f160:	2f39803a 	cmpltu	fp,r5,fp
    f164:	9125883a 	add	r18,r18,r4
    f168:	3f38b03a 	or	fp,r7,fp
    f16c:	9725883a 	add	r18,r18,fp
    f170:	9804927a 	slli	r2,r19,9
    f174:	9463883a 	add	r17,r18,r17
    f178:	d9000117 	ldw	r4,4(sp)
    f17c:	b820d5fa 	srli	r16,r23,23
    f180:	8822927a 	slli	r17,r17,9
    f184:	9826d5fa 	srli	r19,r19,23
    f188:	1104b03a 	or	r2,r2,r4
    f18c:	b82e927a 	slli	r23,r23,9
    f190:	1004c03a 	cmpne	r2,r2,zero
    f194:	8c20b03a 	or	r16,r17,r16
    f198:	14e6b03a 	or	r19,r2,r19
    f19c:	8080402c 	andhi	r2,r16,256
    f1a0:	9deeb03a 	or	r23,r19,r23
    f1a4:	10000726 	beq	r2,zero,f1c4 <__muldf3+0x610>
    f1a8:	b804d07a 	srli	r2,r23,1
    f1ac:	800697fa 	slli	r3,r16,31
    f1b0:	bdc0004c 	andi	r23,r23,1
    f1b4:	8020d07a 	srli	r16,r16,1
    f1b8:	b8aeb03a 	or	r23,r23,r2
    f1bc:	b8eeb03a 	or	r23,r23,r3
    f1c0:	4007883a 	mov	r3,r8
    f1c4:	1900ffc4 	addi	r4,r3,1023
    f1c8:	01004d0e 	bge	zero,r4,f300 <__muldf3+0x74c>
    f1cc:	b88001cc 	andi	r2,r23,7
    f1d0:	10000726 	beq	r2,zero,f1f0 <__muldf3+0x63c>
    f1d4:	b94003cc 	andi	r5,r23,15
    f1d8:	00800104 	movi	r2,4
    f1dc:	28800426 	beq	r5,r2,f1f0 <__muldf3+0x63c>
    f1e0:	b885883a 	add	r2,r23,r2
    f1e4:	15ef803a 	cmpltu	r23,r2,r23
    f1e8:	85e1883a 	add	r16,r16,r23
    f1ec:	102f883a 	mov	r23,r2
    f1f0:	8080402c 	andhi	r2,r16,256
    f1f4:	10000426 	beq	r2,zero,f208 <__muldf3+0x654>
    f1f8:	00bfc034 	movhi	r2,65280
    f1fc:	10bfffc4 	addi	r2,r2,-1
    f200:	19010004 	addi	r4,r3,1024
    f204:	80a0703a 	and	r16,r16,r2
    f208:	0081ff84 	movi	r2,2046
    f20c:	1100340e 	bge	r2,r4,f2e0 <__muldf3+0x72c>
    f210:	34c0004c 	andi	r19,r6,1
    f214:	0101ffc4 	movi	r4,2047
    f218:	0021883a 	mov	r16,zero
    f21c:	002f883a 	mov	r23,zero
    f220:	003ebe06 	br	ed1c <__alt_data_end+0xfffb95ec>
    f224:	8080022c 	andhi	r2,r16,8
    f228:	10000926 	beq	r2,zero,f250 <__muldf3+0x69c>
    f22c:	8880022c 	andhi	r2,r17,8
    f230:	1000071e 	bne	r2,zero,f250 <__muldf3+0x69c>
    f234:	00800434 	movhi	r2,16
    f238:	8c000234 	orhi	r16,r17,8
    f23c:	10bfffc4 	addi	r2,r2,-1
    f240:	b027883a 	mov	r19,r22
    f244:	80a0703a 	and	r16,r16,r2
    f248:	902f883a 	mov	r23,r18
    f24c:	003f1a06 	br	eeb8 <__alt_data_end+0xfffb9788>
    f250:	00800434 	movhi	r2,16
    f254:	84000234 	orhi	r16,r16,8
    f258:	10bfffc4 	addi	r2,r2,-1
    f25c:	80a0703a 	and	r16,r16,r2
    f260:	003f1506 	br	eeb8 <__alt_data_end+0xfffb9788>
    f264:	3009883a 	mov	r4,r6
    f268:	d9400215 	stw	r5,8(sp)
    f26c:	d9800715 	stw	r6,28(sp)
    f270:	da400415 	stw	r9,16(sp)
    f274:	da800315 	stw	r10,12(sp)
    f278:	000feec0 	call	feec <__clzsi2>
    f27c:	10c00804 	addi	r3,r2,32
    f280:	010009c4 	movi	r4,39
    f284:	d9400217 	ldw	r5,8(sp)
    f288:	d9800717 	ldw	r6,28(sp)
    f28c:	da400417 	ldw	r9,16(sp)
    f290:	da800317 	ldw	r10,12(sp)
    f294:	20fee20e 	bge	r4,r3,ee20 <__alt_data_end+0xfffb96f0>
    f298:	147ffe04 	addi	r17,r2,-8
    f29c:	9462983a 	sll	r17,r18,r17
    f2a0:	0025883a 	mov	r18,zero
    f2a4:	003ee506 	br	ee3c <__alt_data_end+0xfffb970c>
    f2a8:	d9800715 	stw	r6,28(sp)
    f2ac:	d9c00215 	stw	r7,8(sp)
    f2b0:	da400415 	stw	r9,16(sp)
    f2b4:	000feec0 	call	feec <__clzsi2>
    f2b8:	10c00804 	addi	r3,r2,32
    f2bc:	010009c4 	movi	r4,39
    f2c0:	d9800717 	ldw	r6,28(sp)
    f2c4:	d9c00217 	ldw	r7,8(sp)
    f2c8:	da400417 	ldw	r9,16(sp)
    f2cc:	20feb40e 	bge	r4,r3,eda0 <__alt_data_end+0xfffb9670>
    f2d0:	143ffe04 	addi	r16,r2,-8
    f2d4:	9420983a 	sll	r16,r18,r16
    f2d8:	002f883a 	mov	r23,zero
    f2dc:	003eb706 	br	edbc <__alt_data_end+0xfffb968c>
    f2e0:	8004977a 	slli	r2,r16,29
    f2e4:	b82ed0fa 	srli	r23,r23,3
    f2e8:	8020927a 	slli	r16,r16,9
    f2ec:	2101ffcc 	andi	r4,r4,2047
    f2f0:	15eeb03a 	or	r23,r2,r23
    f2f4:	8020d33a 	srli	r16,r16,12
    f2f8:	34c0004c 	andi	r19,r6,1
    f2fc:	003e8706 	br	ed1c <__alt_data_end+0xfffb95ec>
    f300:	00bf0084 	movi	r2,-1022
    f304:	10c5c83a 	sub	r2,r2,r3
    f308:	01000e04 	movi	r4,56
    f30c:	2080080e 	bge	r4,r2,f330 <__muldf3+0x77c>
    f310:	34c0004c 	andi	r19,r6,1
    f314:	0009883a 	mov	r4,zero
    f318:	0021883a 	mov	r16,zero
    f31c:	002f883a 	mov	r23,zero
    f320:	003e7e06 	br	ed1c <__alt_data_end+0xfffb95ec>
    f324:	4007883a 	mov	r3,r8
    f328:	480d883a 	mov	r6,r9
    f32c:	003fa506 	br	f1c4 <__alt_data_end+0xfffb9a94>
    f330:	010007c4 	movi	r4,31
    f334:	20801816 	blt	r4,r2,f398 <__muldf3+0x7e4>
    f338:	18c10784 	addi	r3,r3,1054
    f33c:	80c8983a 	sll	r4,r16,r3
    f340:	b88ad83a 	srl	r5,r23,r2
    f344:	b8c6983a 	sll	r3,r23,r3
    f348:	80a0d83a 	srl	r16,r16,r2
    f34c:	2908b03a 	or	r4,r5,r4
    f350:	1804c03a 	cmpne	r2,r3,zero
    f354:	2088b03a 	or	r4,r4,r2
    f358:	208001cc 	andi	r2,r4,7
    f35c:	10000726 	beq	r2,zero,f37c <__muldf3+0x7c8>
    f360:	20c003cc 	andi	r3,r4,15
    f364:	00800104 	movi	r2,4
    f368:	18800426 	beq	r3,r2,f37c <__muldf3+0x7c8>
    f36c:	20c00104 	addi	r3,r4,4
    f370:	1905803a 	cmpltu	r2,r3,r4
    f374:	80a1883a 	add	r16,r16,r2
    f378:	1809883a 	mov	r4,r3
    f37c:	8080202c 	andhi	r2,r16,128
    f380:	10001b26 	beq	r2,zero,f3f0 <__muldf3+0x83c>
    f384:	34c0004c 	andi	r19,r6,1
    f388:	01000044 	movi	r4,1
    f38c:	0021883a 	mov	r16,zero
    f390:	002f883a 	mov	r23,zero
    f394:	003e6106 	br	ed1c <__alt_data_end+0xfffb95ec>
    f398:	013ef884 	movi	r4,-1054
    f39c:	20c9c83a 	sub	r4,r4,r3
    f3a0:	01400804 	movi	r5,32
    f3a4:	8108d83a 	srl	r4,r16,r4
    f3a8:	11401526 	beq	r2,r5,f400 <__muldf3+0x84c>
    f3ac:	18c10f84 	addi	r3,r3,1086
    f3b0:	80e0983a 	sll	r16,r16,r3
    f3b4:	85eeb03a 	or	r23,r16,r23
    f3b8:	b804c03a 	cmpne	r2,r23,zero
    f3bc:	1108b03a 	or	r4,r2,r4
    f3c0:	20c001cc 	andi	r3,r4,7
    f3c4:	1800061e 	bne	r3,zero,f3e0 <__muldf3+0x82c>
    f3c8:	0021883a 	mov	r16,zero
    f3cc:	202ed0fa 	srli	r23,r4,3
    f3d0:	34c0004c 	andi	r19,r6,1
    f3d4:	0009883a 	mov	r4,zero
    f3d8:	b8eeb03a 	or	r23,r23,r3
    f3dc:	003e4f06 	br	ed1c <__alt_data_end+0xfffb95ec>
    f3e0:	20c003cc 	andi	r3,r4,15
    f3e4:	00800104 	movi	r2,4
    f3e8:	0021883a 	mov	r16,zero
    f3ec:	18bfdf1e 	bne	r3,r2,f36c <__alt_data_end+0xfffb9c3c>
    f3f0:	8004927a 	slli	r2,r16,9
    f3f4:	8006977a 	slli	r3,r16,29
    f3f8:	1020d33a 	srli	r16,r2,12
    f3fc:	003ff306 	br	f3cc <__alt_data_end+0xfffb9c9c>
    f400:	0021883a 	mov	r16,zero
    f404:	003feb06 	br	f3b4 <__alt_data_end+0xfffb9c84>
    f408:	00800434 	movhi	r2,16
    f40c:	84000234 	orhi	r16,r16,8
    f410:	10bfffc4 	addi	r2,r2,-1
    f414:	4cc0004c 	andi	r19,r9,1
    f418:	80a0703a 	and	r16,r16,r2
    f41c:	003ea606 	br	eeb8 <__alt_data_end+0xfffb9788>

0000f420 <__subdf3>:
    f420:	00c00434 	movhi	r3,16
    f424:	18ffffc4 	addi	r3,r3,-1
    f428:	defffb04 	addi	sp,sp,-20
    f42c:	28d2703a 	and	r9,r5,r3
    f430:	3814d53a 	srli	r10,r7,20
    f434:	38c6703a 	and	r3,r7,r3
    f438:	3004d77a 	srli	r2,r6,29
    f43c:	dc800215 	stw	r18,8(sp)
    f440:	dc000015 	stw	r16,0(sp)
    f444:	2824d7fa 	srli	r18,r5,31
    f448:	2820d53a 	srli	r16,r5,20
    f44c:	481290fa 	slli	r9,r9,3
    f450:	200ad77a 	srli	r5,r4,29
    f454:	180690fa 	slli	r3,r3,3
    f458:	dc400115 	stw	r17,4(sp)
    f45c:	dfc00415 	stw	ra,16(sp)
    f460:	202290fa 	slli	r17,r4,3
    f464:	dcc00315 	stw	r19,12(sp)
    f468:	5281ffcc 	andi	r10,r10,2047
    f46c:	0101ffc4 	movi	r4,2047
    f470:	9011883a 	mov	r8,r18
    f474:	8401ffcc 	andi	r16,r16,2047
    f478:	94803fcc 	andi	r18,r18,255
    f47c:	494ab03a 	or	r5,r9,r5
    f480:	380ed7fa 	srli	r7,r7,31
    f484:	1886b03a 	or	r3,r3,r2
    f488:	300c90fa 	slli	r6,r6,3
    f48c:	51009026 	beq	r10,r4,f6d0 <__subdf3+0x2b0>
    f490:	39c0005c 	xori	r7,r7,1
    f494:	8285c83a 	sub	r2,r16,r10
    f498:	91c06f26 	beq	r18,r7,f658 <__subdf3+0x238>
    f49c:	0080b10e 	bge	zero,r2,f764 <__subdf3+0x344>
    f4a0:	50002a1e 	bne	r10,zero,f54c <__subdf3+0x12c>
    f4a4:	1988b03a 	or	r4,r3,r6
    f4a8:	2000941e 	bne	r4,zero,f6fc <__subdf3+0x2dc>
    f4ac:	888001cc 	andi	r2,r17,7
    f4b0:	10005b26 	beq	r2,zero,f620 <__subdf3+0x200>
    f4b4:	88c003cc 	andi	r3,r17,15
    f4b8:	00800104 	movi	r2,4
    f4bc:	18805826 	beq	r3,r2,f620 <__subdf3+0x200>
    f4c0:	88c00104 	addi	r3,r17,4
    f4c4:	1c63803a 	cmpltu	r17,r3,r17
    f4c8:	2c4b883a 	add	r5,r5,r17
    f4cc:	2880202c 	andhi	r2,r5,128
    f4d0:	9200004c 	andi	r8,r18,1
    f4d4:	1823883a 	mov	r17,r3
    f4d8:	10005426 	beq	r2,zero,f62c <__subdf3+0x20c>
    f4dc:	84000044 	addi	r16,r16,1
    f4e0:	0081ffc4 	movi	r2,2047
    f4e4:	8080bf26 	beq	r16,r2,f7e4 <__subdf3+0x3c4>
    f4e8:	013fe034 	movhi	r4,65408
    f4ec:	213fffc4 	addi	r4,r4,-1
    f4f0:	290a703a 	and	r5,r5,r4
    f4f4:	2804977a 	slli	r2,r5,29
    f4f8:	280a927a 	slli	r5,r5,9
    f4fc:	8822d0fa 	srli	r17,r17,3
    f500:	8401ffcc 	andi	r16,r16,2047
    f504:	2808d33a 	srli	r4,r5,12
    f508:	1444b03a 	or	r2,r2,r17
    f50c:	8401ffcc 	andi	r16,r16,2047
    f510:	800a953a 	slli	r5,r16,20
    f514:	40c03fcc 	andi	r3,r8,255
    f518:	04000434 	movhi	r16,16
    f51c:	180697fa 	slli	r3,r3,31
    f520:	843fffc4 	addi	r16,r16,-1
    f524:	2420703a 	and	r16,r4,r16
    f528:	8160b03a 	or	r16,r16,r5
    f52c:	80c6b03a 	or	r3,r16,r3
    f530:	dfc00417 	ldw	ra,16(sp)
    f534:	dcc00317 	ldw	r19,12(sp)
    f538:	dc800217 	ldw	r18,8(sp)
    f53c:	dc400117 	ldw	r17,4(sp)
    f540:	dc000017 	ldw	r16,0(sp)
    f544:	dec00504 	addi	sp,sp,20
    f548:	f800283a 	ret
    f54c:	0101ffc4 	movi	r4,2047
    f550:	813fd626 	beq	r16,r4,f4ac <__alt_data_end+0xfffb9d7c>
    f554:	18c02034 	orhi	r3,r3,128
    f558:	01000e04 	movi	r4,56
    f55c:	2080a416 	blt	r4,r2,f7f0 <__subdf3+0x3d0>
    f560:	010007c4 	movi	r4,31
    f564:	2080c716 	blt	r4,r2,f884 <__subdf3+0x464>
    f568:	01000804 	movi	r4,32
    f56c:	2089c83a 	sub	r4,r4,r2
    f570:	1910983a 	sll	r8,r3,r4
    f574:	308ed83a 	srl	r7,r6,r2
    f578:	3108983a 	sll	r4,r6,r4
    f57c:	1884d83a 	srl	r2,r3,r2
    f580:	41ccb03a 	or	r6,r8,r7
    f584:	2008c03a 	cmpne	r4,r4,zero
    f588:	310cb03a 	or	r6,r6,r4
    f58c:	898dc83a 	sub	r6,r17,r6
    f590:	89a3803a 	cmpltu	r17,r17,r6
    f594:	288bc83a 	sub	r5,r5,r2
    f598:	2c4bc83a 	sub	r5,r5,r17
    f59c:	3023883a 	mov	r17,r6
    f5a0:	2880202c 	andhi	r2,r5,128
    f5a4:	10006b26 	beq	r2,zero,f754 <__subdf3+0x334>
    f5a8:	04c02034 	movhi	r19,128
    f5ac:	9cffffc4 	addi	r19,r19,-1
    f5b0:	2ce6703a 	and	r19,r5,r19
    f5b4:	98007c26 	beq	r19,zero,f7a8 <__subdf3+0x388>
    f5b8:	9809883a 	mov	r4,r19
    f5bc:	000feec0 	call	feec <__clzsi2>
    f5c0:	10fffe04 	addi	r3,r2,-8
    f5c4:	010007c4 	movi	r4,31
    f5c8:	20c07d16 	blt	r4,r3,f7c0 <__subdf3+0x3a0>
    f5cc:	01400a04 	movi	r5,40
    f5d0:	2885c83a 	sub	r2,r5,r2
    f5d4:	888ad83a 	srl	r5,r17,r2
    f5d8:	98e6983a 	sll	r19,r19,r3
    f5dc:	88e2983a 	sll	r17,r17,r3
    f5e0:	2ce6b03a 	or	r19,r5,r19
    f5e4:	1c007a16 	blt	r3,r16,f7d0 <__subdf3+0x3b0>
    f5e8:	1c21c83a 	sub	r16,r3,r16
    f5ec:	81400044 	addi	r5,r16,1
    f5f0:	00c007c4 	movi	r3,31
    f5f4:	19409616 	blt	r3,r5,f850 <__subdf3+0x430>
    f5f8:	1c21c83a 	sub	r16,r3,r16
    f5fc:	8c08983a 	sll	r4,r17,r16
    f600:	8946d83a 	srl	r3,r17,r5
    f604:	9c20983a 	sll	r16,r19,r16
    f608:	2008c03a 	cmpne	r4,r4,zero
    f60c:	994ad83a 	srl	r5,r19,r5
    f610:	1c06b03a 	or	r3,r3,r16
    f614:	1922b03a 	or	r17,r3,r4
    f618:	0021883a 	mov	r16,zero
    f61c:	003fa306 	br	f4ac <__alt_data_end+0xfffb9d7c>
    f620:	2880202c 	andhi	r2,r5,128
    f624:	9200004c 	andi	r8,r18,1
    f628:	103fac1e 	bne	r2,zero,f4dc <__alt_data_end+0xfffb9dac>
    f62c:	2804977a 	slli	r2,r5,29
    f630:	8822d0fa 	srli	r17,r17,3
    f634:	00c1ffc4 	movi	r3,2047
    f638:	280ad0fa 	srli	r5,r5,3
    f63c:	1444b03a 	or	r2,r2,r17
    f640:	80c02726 	beq	r16,r3,f6e0 <__subdf3+0x2c0>
    f644:	01000434 	movhi	r4,16
    f648:	213fffc4 	addi	r4,r4,-1
    f64c:	80e0703a 	and	r16,r16,r3
    f650:	2908703a 	and	r4,r5,r4
    f654:	003fad06 	br	f50c <__alt_data_end+0xfffb9ddc>
    f658:	0080690e 	bge	zero,r2,f800 <__subdf3+0x3e0>
    f65c:	50002f26 	beq	r10,zero,f71c <__subdf3+0x2fc>
    f660:	0101ffc4 	movi	r4,2047
    f664:	813f9126 	beq	r16,r4,f4ac <__alt_data_end+0xfffb9d7c>
    f668:	18c02034 	orhi	r3,r3,128
    f66c:	01000e04 	movi	r4,56
    f670:	2080b00e 	bge	r4,r2,f934 <__subdf3+0x514>
    f674:	198cb03a 	or	r6,r3,r6
    f678:	300ec03a 	cmpne	r7,r6,zero
    f67c:	0005883a 	mov	r2,zero
    f680:	3c4f883a 	add	r7,r7,r17
    f684:	3c63803a 	cmpltu	r17,r7,r17
    f688:	114b883a 	add	r5,r2,r5
    f68c:	2c4b883a 	add	r5,r5,r17
    f690:	3823883a 	mov	r17,r7
    f694:	2880202c 	andhi	r2,r5,128
    f698:	10002e26 	beq	r2,zero,f754 <__subdf3+0x334>
    f69c:	84000044 	addi	r16,r16,1
    f6a0:	0081ffc4 	movi	r2,2047
    f6a4:	8080de26 	beq	r16,r2,fa20 <__subdf3+0x600>
    f6a8:	00bfe034 	movhi	r2,65408
    f6ac:	10bfffc4 	addi	r2,r2,-1
    f6b0:	288a703a 	and	r5,r5,r2
    f6b4:	880cd07a 	srli	r6,r17,1
    f6b8:	280897fa 	slli	r4,r5,31
    f6bc:	88c0004c 	andi	r3,r17,1
    f6c0:	30e2b03a 	or	r17,r6,r3
    f6c4:	280ad07a 	srli	r5,r5,1
    f6c8:	8922b03a 	or	r17,r17,r4
    f6cc:	003f7706 	br	f4ac <__alt_data_end+0xfffb9d7c>
    f6d0:	1984b03a 	or	r2,r3,r6
    f6d4:	103f6e26 	beq	r2,zero,f490 <__alt_data_end+0xfffb9d60>
    f6d8:	39c03fcc 	andi	r7,r7,255
    f6dc:	003f6d06 	br	f494 <__alt_data_end+0xfffb9d64>
    f6e0:	1146b03a 	or	r3,r2,r5
    f6e4:	18003f26 	beq	r3,zero,f7e4 <__subdf3+0x3c4>
    f6e8:	00c00434 	movhi	r3,16
    f6ec:	29000234 	orhi	r4,r5,8
    f6f0:	18ffffc4 	addi	r3,r3,-1
    f6f4:	20c8703a 	and	r4,r4,r3
    f6f8:	003f8406 	br	f50c <__alt_data_end+0xfffb9ddc>
    f6fc:	10bfffc4 	addi	r2,r2,-1
    f700:	1000501e 	bne	r2,zero,f844 <__subdf3+0x424>
    f704:	898fc83a 	sub	r7,r17,r6
    f708:	89e3803a 	cmpltu	r17,r17,r7
    f70c:	28cbc83a 	sub	r5,r5,r3
    f710:	2c4bc83a 	sub	r5,r5,r17
    f714:	3823883a 	mov	r17,r7
    f718:	003fa106 	br	f5a0 <__alt_data_end+0xfffb9e70>
    f71c:	1988b03a 	or	r4,r3,r6
    f720:	203f6226 	beq	r4,zero,f4ac <__alt_data_end+0xfffb9d7c>
    f724:	10bfffc4 	addi	r2,r2,-1
    f728:	10009b1e 	bne	r2,zero,f998 <__subdf3+0x578>
    f72c:	344d883a 	add	r6,r6,r17
    f730:	3463803a 	cmpltu	r17,r6,r17
    f734:	194b883a 	add	r5,r3,r5
    f738:	2c4b883a 	add	r5,r5,r17
    f73c:	3023883a 	mov	r17,r6
    f740:	003fd406 	br	f694 <__alt_data_end+0xfffb9f64>
    f744:	1106b03a 	or	r3,r2,r4
    f748:	1800b426 	beq	r3,zero,fa1c <__subdf3+0x5fc>
    f74c:	100b883a 	mov	r5,r2
    f750:	2023883a 	mov	r17,r4
    f754:	888001cc 	andi	r2,r17,7
    f758:	103f561e 	bne	r2,zero,f4b4 <__alt_data_end+0xfffb9d84>
    f75c:	9200004c 	andi	r8,r18,1
    f760:	003fb206 	br	f62c <__alt_data_end+0xfffb9efc>
    f764:	1000531e 	bne	r2,zero,f8b4 <__subdf3+0x494>
    f768:	80800044 	addi	r2,r16,1
    f76c:	1081ffcc 	andi	r2,r2,2047
    f770:	01000044 	movi	r4,1
    f774:	2080a00e 	bge	r4,r2,f9f8 <__subdf3+0x5d8>
    f778:	8985c83a 	sub	r2,r17,r6
    f77c:	8889803a 	cmpltu	r4,r17,r2
    f780:	28e7c83a 	sub	r19,r5,r3
    f784:	9927c83a 	sub	r19,r19,r4
    f788:	9900202c 	andhi	r4,r19,128
    f78c:	20006226 	beq	r4,zero,f918 <__subdf3+0x4f8>
    f790:	3463c83a 	sub	r17,r6,r17
    f794:	194bc83a 	sub	r5,r3,r5
    f798:	344d803a 	cmpltu	r6,r6,r17
    f79c:	29a7c83a 	sub	r19,r5,r6
    f7a0:	3825883a 	mov	r18,r7
    f7a4:	983f841e 	bne	r19,zero,f5b8 <__alt_data_end+0xfffb9e88>
    f7a8:	8809883a 	mov	r4,r17
    f7ac:	000feec0 	call	feec <__clzsi2>
    f7b0:	10800804 	addi	r2,r2,32
    f7b4:	10fffe04 	addi	r3,r2,-8
    f7b8:	010007c4 	movi	r4,31
    f7bc:	20ff830e 	bge	r4,r3,f5cc <__alt_data_end+0xfffb9e9c>
    f7c0:	14fff604 	addi	r19,r2,-40
    f7c4:	8ce6983a 	sll	r19,r17,r19
    f7c8:	0023883a 	mov	r17,zero
    f7cc:	1c3f860e 	bge	r3,r16,f5e8 <__alt_data_end+0xfffb9eb8>
    f7d0:	017fe034 	movhi	r5,65408
    f7d4:	297fffc4 	addi	r5,r5,-1
    f7d8:	80e1c83a 	sub	r16,r16,r3
    f7dc:	994a703a 	and	r5,r19,r5
    f7e0:	003f3206 	br	f4ac <__alt_data_end+0xfffb9d7c>
    f7e4:	0009883a 	mov	r4,zero
    f7e8:	0005883a 	mov	r2,zero
    f7ec:	003f4706 	br	f50c <__alt_data_end+0xfffb9ddc>
    f7f0:	198cb03a 	or	r6,r3,r6
    f7f4:	300cc03a 	cmpne	r6,r6,zero
    f7f8:	0005883a 	mov	r2,zero
    f7fc:	003f6306 	br	f58c <__alt_data_end+0xfffb9e5c>
    f800:	10009d1e 	bne	r2,zero,fa78 <__subdf3+0x658>
    f804:	81c00044 	addi	r7,r16,1
    f808:	3881ffcc 	andi	r2,r7,2047
    f80c:	02400044 	movi	r9,1
    f810:	4880680e 	bge	r9,r2,f9b4 <__subdf3+0x594>
    f814:	0081ffc4 	movi	r2,2047
    f818:	3880ae26 	beq	r7,r2,fad4 <__subdf3+0x6b4>
    f81c:	344d883a 	add	r6,r6,r17
    f820:	3463803a 	cmpltu	r17,r6,r17
    f824:	194b883a 	add	r5,r3,r5
    f828:	2c4b883a 	add	r5,r5,r17
    f82c:	282297fa 	slli	r17,r5,31
    f830:	300cd07a 	srli	r6,r6,1
    f834:	280ad07a 	srli	r5,r5,1
    f838:	3821883a 	mov	r16,r7
    f83c:	89a2b03a 	or	r17,r17,r6
    f840:	003f1a06 	br	f4ac <__alt_data_end+0xfffb9d7c>
    f844:	0101ffc4 	movi	r4,2047
    f848:	813f431e 	bne	r16,r4,f558 <__alt_data_end+0xfffb9e28>
    f84c:	003f1706 	br	f4ac <__alt_data_end+0xfffb9d7c>
    f850:	80bff844 	addi	r2,r16,-31
    f854:	00c00804 	movi	r3,32
    f858:	9884d83a 	srl	r2,r19,r2
    f85c:	28c05126 	beq	r5,r3,f9a4 <__subdf3+0x584>
    f860:	00c00fc4 	movi	r3,63
    f864:	1c21c83a 	sub	r16,r3,r16
    f868:	9c26983a 	sll	r19,r19,r16
    f86c:	9c62b03a 	or	r17,r19,r17
    f870:	8822c03a 	cmpne	r17,r17,zero
    f874:	88a2b03a 	or	r17,r17,r2
    f878:	000b883a 	mov	r5,zero
    f87c:	0021883a 	mov	r16,zero
    f880:	003fb406 	br	f754 <__alt_data_end+0xfffba024>
    f884:	113ff804 	addi	r4,r2,-32
    f888:	01c00804 	movi	r7,32
    f88c:	1908d83a 	srl	r4,r3,r4
    f890:	11c04626 	beq	r2,r7,f9ac <__subdf3+0x58c>
    f894:	01c01004 	movi	r7,64
    f898:	3885c83a 	sub	r2,r7,r2
    f89c:	1884983a 	sll	r2,r3,r2
    f8a0:	118cb03a 	or	r6,r2,r6
    f8a4:	300cc03a 	cmpne	r6,r6,zero
    f8a8:	310cb03a 	or	r6,r6,r4
    f8ac:	0005883a 	mov	r2,zero
    f8b0:	003f3606 	br	f58c <__alt_data_end+0xfffb9e5c>
    f8b4:	80002b26 	beq	r16,zero,f964 <__subdf3+0x544>
    f8b8:	0101ffc4 	movi	r4,2047
    f8bc:	51006926 	beq	r10,r4,fa64 <__subdf3+0x644>
    f8c0:	0085c83a 	sub	r2,zero,r2
    f8c4:	29402034 	orhi	r5,r5,128
    f8c8:	01000e04 	movi	r4,56
    f8cc:	20807d16 	blt	r4,r2,fac4 <__subdf3+0x6a4>
    f8d0:	010007c4 	movi	r4,31
    f8d4:	2080d916 	blt	r4,r2,fc3c <__subdf3+0x81c>
    f8d8:	01000804 	movi	r4,32
    f8dc:	2089c83a 	sub	r4,r4,r2
    f8e0:	2912983a 	sll	r9,r5,r4
    f8e4:	8890d83a 	srl	r8,r17,r2
    f8e8:	8908983a 	sll	r4,r17,r4
    f8ec:	2884d83a 	srl	r2,r5,r2
    f8f0:	4a22b03a 	or	r17,r9,r8
    f8f4:	2008c03a 	cmpne	r4,r4,zero
    f8f8:	8922b03a 	or	r17,r17,r4
    f8fc:	3463c83a 	sub	r17,r6,r17
    f900:	1885c83a 	sub	r2,r3,r2
    f904:	344d803a 	cmpltu	r6,r6,r17
    f908:	118bc83a 	sub	r5,r2,r6
    f90c:	5021883a 	mov	r16,r10
    f910:	3825883a 	mov	r18,r7
    f914:	003f2206 	br	f5a0 <__alt_data_end+0xfffb9e70>
    f918:	9886b03a 	or	r3,r19,r2
    f91c:	18001c1e 	bne	r3,zero,f990 <__subdf3+0x570>
    f920:	0011883a 	mov	r8,zero
    f924:	000b883a 	mov	r5,zero
    f928:	0023883a 	mov	r17,zero
    f92c:	0021883a 	mov	r16,zero
    f930:	003f3e06 	br	f62c <__alt_data_end+0xfffb9efc>
    f934:	010007c4 	movi	r4,31
    f938:	20803c16 	blt	r4,r2,fa2c <__subdf3+0x60c>
    f93c:	01000804 	movi	r4,32
    f940:	2089c83a 	sub	r4,r4,r2
    f944:	1912983a 	sll	r9,r3,r4
    f948:	308ed83a 	srl	r7,r6,r2
    f94c:	3108983a 	sll	r4,r6,r4
    f950:	1884d83a 	srl	r2,r3,r2
    f954:	49ceb03a 	or	r7,r9,r7
    f958:	2008c03a 	cmpne	r4,r4,zero
    f95c:	390eb03a 	or	r7,r7,r4
    f960:	003f4706 	br	f680 <__alt_data_end+0xfffb9f50>
    f964:	2c48b03a 	or	r4,r5,r17
    f968:	20003e26 	beq	r4,zero,fa64 <__subdf3+0x644>
    f96c:	0084303a 	nor	r2,zero,r2
    f970:	10003a1e 	bne	r2,zero,fa5c <__subdf3+0x63c>
    f974:	3463c83a 	sub	r17,r6,r17
    f978:	194bc83a 	sub	r5,r3,r5
    f97c:	344d803a 	cmpltu	r6,r6,r17
    f980:	298bc83a 	sub	r5,r5,r6
    f984:	5021883a 	mov	r16,r10
    f988:	3825883a 	mov	r18,r7
    f98c:	003f0406 	br	f5a0 <__alt_data_end+0xfffb9e70>
    f990:	1023883a 	mov	r17,r2
    f994:	003f0706 	br	f5b4 <__alt_data_end+0xfffb9e84>
    f998:	0101ffc4 	movi	r4,2047
    f99c:	813f331e 	bne	r16,r4,f66c <__alt_data_end+0xfffb9f3c>
    f9a0:	003ec206 	br	f4ac <__alt_data_end+0xfffb9d7c>
    f9a4:	0027883a 	mov	r19,zero
    f9a8:	003fb006 	br	f86c <__alt_data_end+0xfffba13c>
    f9ac:	0005883a 	mov	r2,zero
    f9b0:	003fbb06 	br	f8a0 <__alt_data_end+0xfffba170>
    f9b4:	2c44b03a 	or	r2,r5,r17
    f9b8:	80008b1e 	bne	r16,zero,fbe8 <__subdf3+0x7c8>
    f9bc:	1000b526 	beq	r2,zero,fc94 <__subdf3+0x874>
    f9c0:	1984b03a 	or	r2,r3,r6
    f9c4:	103eb926 	beq	r2,zero,f4ac <__alt_data_end+0xfffb9d7c>
    f9c8:	3449883a 	add	r4,r6,r17
    f9cc:	2463803a 	cmpltu	r17,r4,r17
    f9d0:	194b883a 	add	r5,r3,r5
    f9d4:	2c4b883a 	add	r5,r5,r17
    f9d8:	2880202c 	andhi	r2,r5,128
    f9dc:	2023883a 	mov	r17,r4
    f9e0:	103f5c26 	beq	r2,zero,f754 <__alt_data_end+0xfffba024>
    f9e4:	00bfe034 	movhi	r2,65408
    f9e8:	10bfffc4 	addi	r2,r2,-1
    f9ec:	4821883a 	mov	r16,r9
    f9f0:	288a703a 	and	r5,r5,r2
    f9f4:	003ead06 	br	f4ac <__alt_data_end+0xfffb9d7c>
    f9f8:	2c44b03a 	or	r2,r5,r17
    f9fc:	8000291e 	bne	r16,zero,faa4 <__subdf3+0x684>
    fa00:	10004f1e 	bne	r2,zero,fb40 <__subdf3+0x720>
    fa04:	1984b03a 	or	r2,r3,r6
    fa08:	10000426 	beq	r2,zero,fa1c <__subdf3+0x5fc>
    fa0c:	180b883a 	mov	r5,r3
    fa10:	3023883a 	mov	r17,r6
    fa14:	3825883a 	mov	r18,r7
    fa18:	003ea406 	br	f4ac <__alt_data_end+0xfffb9d7c>
    fa1c:	0011883a 	mov	r8,zero
    fa20:	000b883a 	mov	r5,zero
    fa24:	0023883a 	mov	r17,zero
    fa28:	003f0006 	br	f62c <__alt_data_end+0xfffb9efc>
    fa2c:	11fff804 	addi	r7,r2,-32
    fa30:	19c8d83a 	srl	r4,r3,r7
    fa34:	01c00804 	movi	r7,32
    fa38:	11c07e26 	beq	r2,r7,fc34 <__subdf3+0x814>
    fa3c:	01c01004 	movi	r7,64
    fa40:	3885c83a 	sub	r2,r7,r2
    fa44:	1884983a 	sll	r2,r3,r2
    fa48:	118cb03a 	or	r6,r2,r6
    fa4c:	300ec03a 	cmpne	r7,r6,zero
    fa50:	390eb03a 	or	r7,r7,r4
    fa54:	0005883a 	mov	r2,zero
    fa58:	003f0906 	br	f680 <__alt_data_end+0xfffb9f50>
    fa5c:	0101ffc4 	movi	r4,2047
    fa60:	513f991e 	bne	r10,r4,f8c8 <__alt_data_end+0xfffba198>
    fa64:	180b883a 	mov	r5,r3
    fa68:	3023883a 	mov	r17,r6
    fa6c:	5021883a 	mov	r16,r10
    fa70:	3825883a 	mov	r18,r7
    fa74:	003e8d06 	br	f4ac <__alt_data_end+0xfffb9d7c>
    fa78:	80001a1e 	bne	r16,zero,fae4 <__subdf3+0x6c4>
    fa7c:	2c48b03a 	or	r4,r5,r17
    fa80:	20005526 	beq	r4,zero,fbd8 <__subdf3+0x7b8>
    fa84:	0084303a 	nor	r2,zero,r2
    fa88:	1000511e 	bne	r2,zero,fbd0 <__subdf3+0x7b0>
    fa8c:	89a3883a 	add	r17,r17,r6
    fa90:	194b883a 	add	r5,r3,r5
    fa94:	898d803a 	cmpltu	r6,r17,r6
    fa98:	298b883a 	add	r5,r5,r6
    fa9c:	5021883a 	mov	r16,r10
    faa0:	003efc06 	br	f694 <__alt_data_end+0xfffb9f64>
    faa4:	1000341e 	bne	r2,zero,fb78 <__subdf3+0x758>
    faa8:	1984b03a 	or	r2,r3,r6
    faac:	10006f26 	beq	r2,zero,fc6c <__subdf3+0x84c>
    fab0:	180b883a 	mov	r5,r3
    fab4:	3023883a 	mov	r17,r6
    fab8:	3825883a 	mov	r18,r7
    fabc:	0401ffc4 	movi	r16,2047
    fac0:	003e7a06 	br	f4ac <__alt_data_end+0xfffb9d7c>
    fac4:	2c62b03a 	or	r17,r5,r17
    fac8:	8822c03a 	cmpne	r17,r17,zero
    facc:	0005883a 	mov	r2,zero
    fad0:	003f8a06 	br	f8fc <__alt_data_end+0xfffba1cc>
    fad4:	3821883a 	mov	r16,r7
    fad8:	000b883a 	mov	r5,zero
    fadc:	0023883a 	mov	r17,zero
    fae0:	003ed206 	br	f62c <__alt_data_end+0xfffb9efc>
    fae4:	0101ffc4 	movi	r4,2047
    fae8:	51003b26 	beq	r10,r4,fbd8 <__subdf3+0x7b8>
    faec:	0085c83a 	sub	r2,zero,r2
    faf0:	29402034 	orhi	r5,r5,128
    faf4:	01000e04 	movi	r4,56
    faf8:	20806216 	blt	r4,r2,fc84 <__subdf3+0x864>
    fafc:	010007c4 	movi	r4,31
    fb00:	20806b16 	blt	r4,r2,fcb0 <__subdf3+0x890>
    fb04:	01000804 	movi	r4,32
    fb08:	2089c83a 	sub	r4,r4,r2
    fb0c:	2912983a 	sll	r9,r5,r4
    fb10:	888ed83a 	srl	r7,r17,r2
    fb14:	8908983a 	sll	r4,r17,r4
    fb18:	2884d83a 	srl	r2,r5,r2
    fb1c:	49e2b03a 	or	r17,r9,r7
    fb20:	2008c03a 	cmpne	r4,r4,zero
    fb24:	8922b03a 	or	r17,r17,r4
    fb28:	89a3883a 	add	r17,r17,r6
    fb2c:	10c5883a 	add	r2,r2,r3
    fb30:	898d803a 	cmpltu	r6,r17,r6
    fb34:	118b883a 	add	r5,r2,r6
    fb38:	5021883a 	mov	r16,r10
    fb3c:	003ed506 	br	f694 <__alt_data_end+0xfffb9f64>
    fb40:	1984b03a 	or	r2,r3,r6
    fb44:	103e5926 	beq	r2,zero,f4ac <__alt_data_end+0xfffb9d7c>
    fb48:	8989c83a 	sub	r4,r17,r6
    fb4c:	8911803a 	cmpltu	r8,r17,r4
    fb50:	28c5c83a 	sub	r2,r5,r3
    fb54:	1205c83a 	sub	r2,r2,r8
    fb58:	1200202c 	andhi	r8,r2,128
    fb5c:	403ef926 	beq	r8,zero,f744 <__alt_data_end+0xfffba014>
    fb60:	3463c83a 	sub	r17,r6,r17
    fb64:	194bc83a 	sub	r5,r3,r5
    fb68:	344d803a 	cmpltu	r6,r6,r17
    fb6c:	298bc83a 	sub	r5,r5,r6
    fb70:	3825883a 	mov	r18,r7
    fb74:	003e4d06 	br	f4ac <__alt_data_end+0xfffb9d7c>
    fb78:	1984b03a 	or	r2,r3,r6
    fb7c:	10002b26 	beq	r2,zero,fc2c <__subdf3+0x80c>
    fb80:	2808d0fa 	srli	r4,r5,3
    fb84:	8822d0fa 	srli	r17,r17,3
    fb88:	280a977a 	slli	r5,r5,29
    fb8c:	2080022c 	andhi	r2,r4,8
    fb90:	2c62b03a 	or	r17,r5,r17
    fb94:	10000826 	beq	r2,zero,fbb8 <__subdf3+0x798>
    fb98:	1810d0fa 	srli	r8,r3,3
    fb9c:	4080022c 	andhi	r2,r8,8
    fba0:	1000051e 	bne	r2,zero,fbb8 <__subdf3+0x798>
    fba4:	300cd0fa 	srli	r6,r6,3
    fba8:	1804977a 	slli	r2,r3,29
    fbac:	4009883a 	mov	r4,r8
    fbb0:	3825883a 	mov	r18,r7
    fbb4:	11a2b03a 	or	r17,r2,r6
    fbb8:	880ad77a 	srli	r5,r17,29
    fbbc:	200890fa 	slli	r4,r4,3
    fbc0:	882290fa 	slli	r17,r17,3
    fbc4:	0401ffc4 	movi	r16,2047
    fbc8:	290ab03a 	or	r5,r5,r4
    fbcc:	003e3706 	br	f4ac <__alt_data_end+0xfffb9d7c>
    fbd0:	0101ffc4 	movi	r4,2047
    fbd4:	513fc71e 	bne	r10,r4,faf4 <__alt_data_end+0xfffba3c4>
    fbd8:	180b883a 	mov	r5,r3
    fbdc:	3023883a 	mov	r17,r6
    fbe0:	5021883a 	mov	r16,r10
    fbe4:	003e3106 	br	f4ac <__alt_data_end+0xfffb9d7c>
    fbe8:	10002d26 	beq	r2,zero,fca0 <__subdf3+0x880>
    fbec:	1984b03a 	or	r2,r3,r6
    fbf0:	10000e26 	beq	r2,zero,fc2c <__subdf3+0x80c>
    fbf4:	2808d0fa 	srli	r4,r5,3
    fbf8:	8822d0fa 	srli	r17,r17,3
    fbfc:	280a977a 	slli	r5,r5,29
    fc00:	2080022c 	andhi	r2,r4,8
    fc04:	2c62b03a 	or	r17,r5,r17
    fc08:	103feb26 	beq	r2,zero,fbb8 <__alt_data_end+0xfffba488>
    fc0c:	180ed0fa 	srli	r7,r3,3
    fc10:	3880022c 	andhi	r2,r7,8
    fc14:	103fe81e 	bne	r2,zero,fbb8 <__alt_data_end+0xfffba488>
    fc18:	300cd0fa 	srli	r6,r6,3
    fc1c:	1804977a 	slli	r2,r3,29
    fc20:	3809883a 	mov	r4,r7
    fc24:	11a2b03a 	or	r17,r2,r6
    fc28:	003fe306 	br	fbb8 <__alt_data_end+0xfffba488>
    fc2c:	0401ffc4 	movi	r16,2047
    fc30:	003e1e06 	br	f4ac <__alt_data_end+0xfffb9d7c>
    fc34:	0005883a 	mov	r2,zero
    fc38:	003f8306 	br	fa48 <__alt_data_end+0xfffba318>
    fc3c:	113ff804 	addi	r4,r2,-32
    fc40:	02000804 	movi	r8,32
    fc44:	2908d83a 	srl	r4,r5,r4
    fc48:	12002526 	beq	r2,r8,fce0 <__subdf3+0x8c0>
    fc4c:	02001004 	movi	r8,64
    fc50:	4085c83a 	sub	r2,r8,r2
    fc54:	288a983a 	sll	r5,r5,r2
    fc58:	2c62b03a 	or	r17,r5,r17
    fc5c:	8822c03a 	cmpne	r17,r17,zero
    fc60:	8922b03a 	or	r17,r17,r4
    fc64:	0005883a 	mov	r2,zero
    fc68:	003f2406 	br	f8fc <__alt_data_end+0xfffba1cc>
    fc6c:	01402034 	movhi	r5,128
    fc70:	0011883a 	mov	r8,zero
    fc74:	297fffc4 	addi	r5,r5,-1
    fc78:	047ffe04 	movi	r17,-8
    fc7c:	0401ffc4 	movi	r16,2047
    fc80:	003e6a06 	br	f62c <__alt_data_end+0xfffb9efc>
    fc84:	2c62b03a 	or	r17,r5,r17
    fc88:	8822c03a 	cmpne	r17,r17,zero
    fc8c:	0005883a 	mov	r2,zero
    fc90:	003fa506 	br	fb28 <__alt_data_end+0xfffba3f8>
    fc94:	180b883a 	mov	r5,r3
    fc98:	3023883a 	mov	r17,r6
    fc9c:	003e0306 	br	f4ac <__alt_data_end+0xfffb9d7c>
    fca0:	180b883a 	mov	r5,r3
    fca4:	3023883a 	mov	r17,r6
    fca8:	0401ffc4 	movi	r16,2047
    fcac:	003dff06 	br	f4ac <__alt_data_end+0xfffb9d7c>
    fcb0:	113ff804 	addi	r4,r2,-32
    fcb4:	01c00804 	movi	r7,32
    fcb8:	2908d83a 	srl	r4,r5,r4
    fcbc:	11c00a26 	beq	r2,r7,fce8 <__subdf3+0x8c8>
    fcc0:	01c01004 	movi	r7,64
    fcc4:	3885c83a 	sub	r2,r7,r2
    fcc8:	288a983a 	sll	r5,r5,r2
    fccc:	2c62b03a 	or	r17,r5,r17
    fcd0:	8822c03a 	cmpne	r17,r17,zero
    fcd4:	8922b03a 	or	r17,r17,r4
    fcd8:	0005883a 	mov	r2,zero
    fcdc:	003f9206 	br	fb28 <__alt_data_end+0xfffba3f8>
    fce0:	000b883a 	mov	r5,zero
    fce4:	003fdc06 	br	fc58 <__alt_data_end+0xfffba528>
    fce8:	000b883a 	mov	r5,zero
    fcec:	003ff706 	br	fccc <__alt_data_end+0xfffba59c>

0000fcf0 <__fixdfsi>:
    fcf0:	2806d53a 	srli	r3,r5,20
    fcf4:	00800434 	movhi	r2,16
    fcf8:	10bfffc4 	addi	r2,r2,-1
    fcfc:	18c1ffcc 	andi	r3,r3,2047
    fd00:	0180ff84 	movi	r6,1022
    fd04:	2884703a 	and	r2,r5,r2
    fd08:	280ad7fa 	srli	r5,r5,31
    fd0c:	30c0130e 	bge	r6,r3,fd5c <__fixdfsi+0x6c>
    fd10:	01810744 	movi	r6,1053
    fd14:	30c00d16 	blt	r6,r3,fd4c <__fixdfsi+0x5c>
    fd18:	01810cc4 	movi	r6,1075
    fd1c:	30cdc83a 	sub	r6,r6,r3
    fd20:	01c007c4 	movi	r7,31
    fd24:	10800434 	orhi	r2,r2,16
    fd28:	39800e0e 	bge	r7,r6,fd64 <__fixdfsi+0x74>
    fd2c:	010104c4 	movi	r4,1043
    fd30:	20c7c83a 	sub	r3,r4,r3
    fd34:	10c6d83a 	srl	r3,r2,r3
    fd38:	29403fcc 	andi	r5,r5,255
    fd3c:	0145c83a 	sub	r2,zero,r5
    fd40:	1884f03a 	xor	r2,r3,r2
    fd44:	1145883a 	add	r2,r2,r5
    fd48:	f800283a 	ret
    fd4c:	00a00034 	movhi	r2,32768
    fd50:	10bfffc4 	addi	r2,r2,-1
    fd54:	2885883a 	add	r2,r5,r2
    fd58:	f800283a 	ret
    fd5c:	0005883a 	mov	r2,zero
    fd60:	f800283a 	ret
    fd64:	18fefb44 	addi	r3,r3,-1043
    fd68:	2188d83a 	srl	r4,r4,r6
    fd6c:	10c6983a 	sll	r3,r2,r3
    fd70:	20c6b03a 	or	r3,r4,r3
    fd74:	003ff006 	br	fd38 <__alt_data_end+0xfffba608>

0000fd78 <__floatsidf>:
    fd78:	defffd04 	addi	sp,sp,-12
    fd7c:	dc400115 	stw	r17,4(sp)
    fd80:	dfc00215 	stw	ra,8(sp)
    fd84:	dc000015 	stw	r16,0(sp)
    fd88:	2023883a 	mov	r17,r4
    fd8c:	20001426 	beq	r4,zero,fde0 <__floatsidf+0x68>
    fd90:	2020d7fa 	srli	r16,r4,31
    fd94:	80000126 	beq	r16,zero,fd9c <__floatsidf+0x24>
    fd98:	0123c83a 	sub	r17,zero,r4
    fd9c:	8809883a 	mov	r4,r17
    fda0:	000feec0 	call	feec <__clzsi2>
    fda4:	01410784 	movi	r5,1054
    fda8:	00c00284 	movi	r3,10
    fdac:	288bc83a 	sub	r5,r5,r2
    fdb0:	18801c16 	blt	r3,r2,fe24 <__floatsidf+0xac>
    fdb4:	00c002c4 	movi	r3,11
    fdb8:	1887c83a 	sub	r3,r3,r2
    fdbc:	88c8d83a 	srl	r4,r17,r3
    fdc0:	00c00434 	movhi	r3,16
    fdc4:	18ffffc4 	addi	r3,r3,-1
    fdc8:	10800544 	addi	r2,r2,21
    fdcc:	20c8703a 	and	r4,r4,r3
    fdd0:	8884983a 	sll	r2,r17,r2
    fdd4:	28c1ffcc 	andi	r3,r5,2047
    fdd8:	800d883a 	mov	r6,r16
    fddc:	00000406 	br	fdf0 <__floatsidf+0x78>
    fde0:	000d883a 	mov	r6,zero
    fde4:	0007883a 	mov	r3,zero
    fde8:	0009883a 	mov	r4,zero
    fdec:	0005883a 	mov	r2,zero
    fdf0:	180a953a 	slli	r5,r3,20
    fdf4:	31803fcc 	andi	r6,r6,255
    fdf8:	00c00434 	movhi	r3,16
    fdfc:	300c97fa 	slli	r6,r6,31
    fe00:	18ffffc4 	addi	r3,r3,-1
    fe04:	20c6703a 	and	r3,r4,r3
    fe08:	1946b03a 	or	r3,r3,r5
    fe0c:	1986b03a 	or	r3,r3,r6
    fe10:	dfc00217 	ldw	ra,8(sp)
    fe14:	dc400117 	ldw	r17,4(sp)
    fe18:	dc000017 	ldw	r16,0(sp)
    fe1c:	dec00304 	addi	sp,sp,12
    fe20:	f800283a 	ret
    fe24:	10fffd44 	addi	r3,r2,-11
    fe28:	88c8983a 	sll	r4,r17,r3
    fe2c:	00800434 	movhi	r2,16
    fe30:	10bfffc4 	addi	r2,r2,-1
    fe34:	2088703a 	and	r4,r4,r2
    fe38:	28c1ffcc 	andi	r3,r5,2047
    fe3c:	800d883a 	mov	r6,r16
    fe40:	0005883a 	mov	r2,zero
    fe44:	003fea06 	br	fdf0 <__alt_data_end+0xfffba6c0>

0000fe48 <__floatunsidf>:
    fe48:	defffe04 	addi	sp,sp,-8
    fe4c:	dc000015 	stw	r16,0(sp)
    fe50:	dfc00115 	stw	ra,4(sp)
    fe54:	2021883a 	mov	r16,r4
    fe58:	20001026 	beq	r4,zero,fe9c <__floatunsidf+0x54>
    fe5c:	000feec0 	call	feec <__clzsi2>
    fe60:	01410784 	movi	r5,1054
    fe64:	100d883a 	mov	r6,r2
    fe68:	288bc83a 	sub	r5,r5,r2
    fe6c:	00800284 	movi	r2,10
    fe70:	11801616 	blt	r2,r6,fecc <__floatunsidf+0x84>
    fe74:	008002c4 	movi	r2,11
    fe78:	1185c83a 	sub	r2,r2,r6
    fe7c:	8084d83a 	srl	r2,r16,r2
    fe80:	00c00434 	movhi	r3,16
    fe84:	31c00544 	addi	r7,r6,21
    fe88:	18ffffc4 	addi	r3,r3,-1
    fe8c:	81e0983a 	sll	r16,r16,r7
    fe90:	10cc703a 	and	r6,r2,r3
    fe94:	2941ffcc 	andi	r5,r5,2047
    fe98:	00000206 	br	fea4 <__floatunsidf+0x5c>
    fe9c:	000b883a 	mov	r5,zero
    fea0:	000d883a 	mov	r6,zero
    fea4:	280a953a 	slli	r5,r5,20
    fea8:	00c00434 	movhi	r3,16
    feac:	18ffffc4 	addi	r3,r3,-1
    feb0:	30c6703a 	and	r3,r6,r3
    feb4:	8005883a 	mov	r2,r16
    feb8:	1946b03a 	or	r3,r3,r5
    febc:	dfc00117 	ldw	ra,4(sp)
    fec0:	dc000017 	ldw	r16,0(sp)
    fec4:	dec00204 	addi	sp,sp,8
    fec8:	f800283a 	ret
    fecc:	31bffd44 	addi	r6,r6,-11
    fed0:	818c983a 	sll	r6,r16,r6
    fed4:	00800434 	movhi	r2,16
    fed8:	10bfffc4 	addi	r2,r2,-1
    fedc:	2941ffcc 	andi	r5,r5,2047
    fee0:	0021883a 	mov	r16,zero
    fee4:	308c703a 	and	r6,r6,r2
    fee8:	003fee06 	br	fea4 <__alt_data_end+0xfffba774>

0000feec <__clzsi2>:
    feec:	00bfffd4 	movui	r2,65535
    fef0:	11000b36 	bltu	r2,r4,ff20 <__clzsi2+0x34>
    fef4:	00803fc4 	movi	r2,255
    fef8:	1100122e 	bgeu	r2,r4,ff44 <__clzsi2+0x58>
    fefc:	00c00204 	movi	r3,8
    ff00:	01400604 	movi	r5,24
    ff04:	20c8d83a 	srl	r4,r4,r3
    ff08:	00800074 	movhi	r2,1
    ff0c:	108c5504 	addi	r2,r2,12628
    ff10:	1109883a 	add	r4,r2,r4
    ff14:	20800003 	ldbu	r2,0(r4)
    ff18:	2885c83a 	sub	r2,r5,r2
    ff1c:	f800283a 	ret
    ff20:	00804034 	movhi	r2,256
    ff24:	10bfffc4 	addi	r2,r2,-1
    ff28:	11000336 	bltu	r2,r4,ff38 <__clzsi2+0x4c>
    ff2c:	00c00404 	movi	r3,16
    ff30:	180b883a 	mov	r5,r3
    ff34:	003ff306 	br	ff04 <__alt_data_end+0xfffba7d4>
    ff38:	00c00604 	movi	r3,24
    ff3c:	01400204 	movi	r5,8
    ff40:	003ff006 	br	ff04 <__alt_data_end+0xfffba7d4>
    ff44:	0007883a 	mov	r3,zero
    ff48:	01400804 	movi	r5,32
    ff4c:	003fed06 	br	ff04 <__alt_data_end+0xfffba7d4>

0000ff50 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ff50:	defffe04 	addi	sp,sp,-8
    ff54:	dfc00115 	stw	ra,4(sp)
    ff58:	df000015 	stw	fp,0(sp)
    ff5c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ff60:	00800074 	movhi	r2,1
    ff64:	10937404 	addi	r2,r2,19920
    ff68:	10800017 	ldw	r2,0(r2)
    ff6c:	10000526 	beq	r2,zero,ff84 <alt_get_errno+0x34>
    ff70:	00800074 	movhi	r2,1
    ff74:	10937404 	addi	r2,r2,19920
    ff78:	10800017 	ldw	r2,0(r2)
    ff7c:	103ee83a 	callr	r2
    ff80:	00000206 	br	ff8c <alt_get_errno+0x3c>
    ff84:	00800074 	movhi	r2,1
    ff88:	109a5a04 	addi	r2,r2,26984
}
    ff8c:	e037883a 	mov	sp,fp
    ff90:	dfc00117 	ldw	ra,4(sp)
    ff94:	df000017 	ldw	fp,0(sp)
    ff98:	dec00204 	addi	sp,sp,8
    ff9c:	f800283a 	ret

0000ffa0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    ffa0:	defffb04 	addi	sp,sp,-20
    ffa4:	dfc00415 	stw	ra,16(sp)
    ffa8:	df000315 	stw	fp,12(sp)
    ffac:	df000304 	addi	fp,sp,12
    ffb0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    ffb4:	e0bfff17 	ldw	r2,-4(fp)
    ffb8:	10000816 	blt	r2,zero,ffdc <close+0x3c>
    ffbc:	e13fff17 	ldw	r4,-4(fp)
    ffc0:	01400304 	movi	r5,12
    ffc4:	000d72c0 	call	d72c <__mulsi3>
    ffc8:	1007883a 	mov	r3,r2
    ffcc:	00800074 	movhi	r2,1
    ffd0:	108ef104 	addi	r2,r2,15300
    ffd4:	1885883a 	add	r2,r3,r2
    ffd8:	00000106 	br	ffe0 <close+0x40>
    ffdc:	0005883a 	mov	r2,zero
    ffe0:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    ffe4:	e0bffd17 	ldw	r2,-12(fp)
    ffe8:	10001926 	beq	r2,zero,10050 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    ffec:	e0bffd17 	ldw	r2,-12(fp)
    fff0:	10800017 	ldw	r2,0(r2)
    fff4:	10800417 	ldw	r2,16(r2)
    fff8:	10000626 	beq	r2,zero,10014 <close+0x74>
    fffc:	e0bffd17 	ldw	r2,-12(fp)
   10000:	10800017 	ldw	r2,0(r2)
   10004:	10800417 	ldw	r2,16(r2)
   10008:	e13ffd17 	ldw	r4,-12(fp)
   1000c:	103ee83a 	callr	r2
   10010:	00000106 	br	10018 <close+0x78>
   10014:	0005883a 	mov	r2,zero
   10018:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   1001c:	e13fff17 	ldw	r4,-4(fp)
   10020:	00106c40 	call	106c4 <alt_release_fd>
    if (rval < 0)
   10024:	e0bffe17 	ldw	r2,-8(fp)
   10028:	1000070e 	bge	r2,zero,10048 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   1002c:	000ff500 	call	ff50 <alt_get_errno>
   10030:	1007883a 	mov	r3,r2
   10034:	e0bffe17 	ldw	r2,-8(fp)
   10038:	0085c83a 	sub	r2,zero,r2
   1003c:	18800015 	stw	r2,0(r3)
      return -1;
   10040:	00bfffc4 	movi	r2,-1
   10044:	00000706 	br	10064 <close+0xc4>
    }
    return 0;
   10048:	0005883a 	mov	r2,zero
   1004c:	00000506 	br	10064 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   10050:	000ff500 	call	ff50 <alt_get_errno>
   10054:	1007883a 	mov	r3,r2
   10058:	00801444 	movi	r2,81
   1005c:	18800015 	stw	r2,0(r3)
    return -1;
   10060:	00bfffc4 	movi	r2,-1
  }
}
   10064:	e037883a 	mov	sp,fp
   10068:	dfc00117 	ldw	ra,4(sp)
   1006c:	df000017 	ldw	fp,0(sp)
   10070:	dec00204 	addi	sp,sp,8
   10074:	f800283a 	ret

00010078 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   10078:	defffc04 	addi	sp,sp,-16
   1007c:	df000315 	stw	fp,12(sp)
   10080:	df000304 	addi	fp,sp,12
   10084:	e13ffd15 	stw	r4,-12(fp)
   10088:	e17ffe15 	stw	r5,-8(fp)
   1008c:	e1bfff15 	stw	r6,-4(fp)
  return len;
   10090:	e0bfff17 	ldw	r2,-4(fp)
}
   10094:	e037883a 	mov	sp,fp
   10098:	df000017 	ldw	fp,0(sp)
   1009c:	dec00104 	addi	sp,sp,4
   100a0:	f800283a 	ret

000100a4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   100a4:	defffe04 	addi	sp,sp,-8
   100a8:	dfc00115 	stw	ra,4(sp)
   100ac:	df000015 	stw	fp,0(sp)
   100b0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   100b4:	00800074 	movhi	r2,1
   100b8:	10937404 	addi	r2,r2,19920
   100bc:	10800017 	ldw	r2,0(r2)
   100c0:	10000526 	beq	r2,zero,100d8 <alt_get_errno+0x34>
   100c4:	00800074 	movhi	r2,1
   100c8:	10937404 	addi	r2,r2,19920
   100cc:	10800017 	ldw	r2,0(r2)
   100d0:	103ee83a 	callr	r2
   100d4:	00000206 	br	100e0 <alt_get_errno+0x3c>
   100d8:	00800074 	movhi	r2,1
   100dc:	109a5a04 	addi	r2,r2,26984
}
   100e0:	e037883a 	mov	sp,fp
   100e4:	dfc00117 	ldw	ra,4(sp)
   100e8:	df000017 	ldw	fp,0(sp)
   100ec:	dec00204 	addi	sp,sp,8
   100f0:	f800283a 	ret

000100f4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   100f4:	defffb04 	addi	sp,sp,-20
   100f8:	dfc00415 	stw	ra,16(sp)
   100fc:	df000315 	stw	fp,12(sp)
   10100:	df000304 	addi	fp,sp,12
   10104:	e13ffe15 	stw	r4,-8(fp)
   10108:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1010c:	e0bffe17 	ldw	r2,-8(fp)
   10110:	10000816 	blt	r2,zero,10134 <fstat+0x40>
   10114:	e13ffe17 	ldw	r4,-8(fp)
   10118:	01400304 	movi	r5,12
   1011c:	000d72c0 	call	d72c <__mulsi3>
   10120:	1007883a 	mov	r3,r2
   10124:	00800074 	movhi	r2,1
   10128:	108ef104 	addi	r2,r2,15300
   1012c:	1885883a 	add	r2,r3,r2
   10130:	00000106 	br	10138 <fstat+0x44>
   10134:	0005883a 	mov	r2,zero
   10138:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   1013c:	e0bffd17 	ldw	r2,-12(fp)
   10140:	10001026 	beq	r2,zero,10184 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   10144:	e0bffd17 	ldw	r2,-12(fp)
   10148:	10800017 	ldw	r2,0(r2)
   1014c:	10800817 	ldw	r2,32(r2)
   10150:	10000726 	beq	r2,zero,10170 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   10154:	e0bffd17 	ldw	r2,-12(fp)
   10158:	10800017 	ldw	r2,0(r2)
   1015c:	10800817 	ldw	r2,32(r2)
   10160:	e13ffd17 	ldw	r4,-12(fp)
   10164:	e17fff17 	ldw	r5,-4(fp)
   10168:	103ee83a 	callr	r2
   1016c:	00000a06 	br	10198 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   10170:	e0bfff17 	ldw	r2,-4(fp)
   10174:	00c80004 	movi	r3,8192
   10178:	10c00115 	stw	r3,4(r2)
      return 0;
   1017c:	0005883a 	mov	r2,zero
   10180:	00000506 	br	10198 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   10184:	00100a40 	call	100a4 <alt_get_errno>
   10188:	1007883a 	mov	r3,r2
   1018c:	00801444 	movi	r2,81
   10190:	18800015 	stw	r2,0(r3)
    return -1;
   10194:	00bfffc4 	movi	r2,-1
  }
}
   10198:	e037883a 	mov	sp,fp
   1019c:	dfc00117 	ldw	ra,4(sp)
   101a0:	df000017 	ldw	fp,0(sp)
   101a4:	dec00204 	addi	sp,sp,8
   101a8:	f800283a 	ret

000101ac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   101ac:	defffe04 	addi	sp,sp,-8
   101b0:	dfc00115 	stw	ra,4(sp)
   101b4:	df000015 	stw	fp,0(sp)
   101b8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   101bc:	00800074 	movhi	r2,1
   101c0:	10937404 	addi	r2,r2,19920
   101c4:	10800017 	ldw	r2,0(r2)
   101c8:	10000526 	beq	r2,zero,101e0 <alt_get_errno+0x34>
   101cc:	00800074 	movhi	r2,1
   101d0:	10937404 	addi	r2,r2,19920
   101d4:	10800017 	ldw	r2,0(r2)
   101d8:	103ee83a 	callr	r2
   101dc:	00000206 	br	101e8 <alt_get_errno+0x3c>
   101e0:	00800074 	movhi	r2,1
   101e4:	109a5a04 	addi	r2,r2,26984
}
   101e8:	e037883a 	mov	sp,fp
   101ec:	dfc00117 	ldw	ra,4(sp)
   101f0:	df000017 	ldw	fp,0(sp)
   101f4:	dec00204 	addi	sp,sp,8
   101f8:	f800283a 	ret

000101fc <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   101fc:	deffed04 	addi	sp,sp,-76
   10200:	dfc01215 	stw	ra,72(sp)
   10204:	df001115 	stw	fp,68(sp)
   10208:	df001104 	addi	fp,sp,68
   1020c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   10210:	e0bfff17 	ldw	r2,-4(fp)
   10214:	10000816 	blt	r2,zero,10238 <isatty+0x3c>
   10218:	e13fff17 	ldw	r4,-4(fp)
   1021c:	01400304 	movi	r5,12
   10220:	000d72c0 	call	d72c <__mulsi3>
   10224:	1007883a 	mov	r3,r2
   10228:	00800074 	movhi	r2,1
   1022c:	108ef104 	addi	r2,r2,15300
   10230:	1885883a 	add	r2,r3,r2
   10234:	00000106 	br	1023c <isatty+0x40>
   10238:	0005883a 	mov	r2,zero
   1023c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   10240:	e0bfef17 	ldw	r2,-68(fp)
   10244:	10000e26 	beq	r2,zero,10280 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   10248:	e0bfef17 	ldw	r2,-68(fp)
   1024c:	10800017 	ldw	r2,0(r2)
   10250:	10800817 	ldw	r2,32(r2)
   10254:	1000021e 	bne	r2,zero,10260 <isatty+0x64>
    {
      return 1;
   10258:	00800044 	movi	r2,1
   1025c:	00000d06 	br	10294 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   10260:	e0bff004 	addi	r2,fp,-64
   10264:	e13fff17 	ldw	r4,-4(fp)
   10268:	100b883a 	mov	r5,r2
   1026c:	00100f40 	call	100f4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   10270:	e0bff117 	ldw	r2,-60(fp)
   10274:	10880020 	cmpeqi	r2,r2,8192
   10278:	10803fcc 	andi	r2,r2,255
   1027c:	00000506 	br	10294 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   10280:	00101ac0 	call	101ac <alt_get_errno>
   10284:	1007883a 	mov	r3,r2
   10288:	00801444 	movi	r2,81
   1028c:	18800015 	stw	r2,0(r3)
    return 0;
   10290:	0005883a 	mov	r2,zero
  }
}
   10294:	e037883a 	mov	sp,fp
   10298:	dfc00117 	ldw	ra,4(sp)
   1029c:	df000017 	ldw	fp,0(sp)
   102a0:	dec00204 	addi	sp,sp,8
   102a4:	f800283a 	ret

000102a8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   102a8:	defffc04 	addi	sp,sp,-16
   102ac:	df000315 	stw	fp,12(sp)
   102b0:	df000304 	addi	fp,sp,12
   102b4:	e13ffd15 	stw	r4,-12(fp)
   102b8:	e17ffe15 	stw	r5,-8(fp)
   102bc:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   102c0:	e0fffe17 	ldw	r3,-8(fp)
   102c4:	e0bffd17 	ldw	r2,-12(fp)
   102c8:	18800c26 	beq	r3,r2,102fc <alt_load_section+0x54>
  {
    while( to != end )
   102cc:	00000806 	br	102f0 <alt_load_section+0x48>
    {
      *to++ = *from++;
   102d0:	e0bffe17 	ldw	r2,-8(fp)
   102d4:	10c00104 	addi	r3,r2,4
   102d8:	e0fffe15 	stw	r3,-8(fp)
   102dc:	e0fffd17 	ldw	r3,-12(fp)
   102e0:	19000104 	addi	r4,r3,4
   102e4:	e13ffd15 	stw	r4,-12(fp)
   102e8:	18c00017 	ldw	r3,0(r3)
   102ec:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   102f0:	e0fffe17 	ldw	r3,-8(fp)
   102f4:	e0bfff17 	ldw	r2,-4(fp)
   102f8:	18bff51e 	bne	r3,r2,102d0 <__alt_data_end+0xfffbaba0>
    {
      *to++ = *from++;
    }
  }
}
   102fc:	e037883a 	mov	sp,fp
   10300:	df000017 	ldw	fp,0(sp)
   10304:	dec00104 	addi	sp,sp,4
   10308:	f800283a 	ret

0001030c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   1030c:	defffe04 	addi	sp,sp,-8
   10310:	dfc00115 	stw	ra,4(sp)
   10314:	df000015 	stw	fp,0(sp)
   10318:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   1031c:	01000074 	movhi	r4,1
   10320:	21137904 	addi	r4,r4,19940
   10324:	01400074 	movhi	r5,1
   10328:	294ca204 	addi	r5,r5,12936
   1032c:	01800074 	movhi	r6,1
   10330:	31937904 	addi	r6,r6,19940
   10334:	00102a80 	call	102a8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   10338:	01000034 	movhi	r4,0
   1033c:	21000804 	addi	r4,r4,32
   10340:	01400034 	movhi	r5,0
   10344:	29400804 	addi	r5,r5,32
   10348:	01800034 	movhi	r6,0
   1034c:	31808b04 	addi	r6,r6,556
   10350:	00102a80 	call	102a8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   10354:	01000074 	movhi	r4,1
   10358:	210a0c04 	addi	r4,r4,10288
   1035c:	01400074 	movhi	r5,1
   10360:	294a0c04 	addi	r5,r5,10288
   10364:	01800074 	movhi	r6,1
   10368:	318ca204 	addi	r6,r6,12936
   1036c:	00102a80 	call	102a8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   10370:	001170c0 	call	1170c <alt_dcache_flush_all>
  alt_icache_flush_all();
   10374:	00118d40 	call	118d4 <alt_icache_flush_all>
}
   10378:	e037883a 	mov	sp,fp
   1037c:	dfc00117 	ldw	ra,4(sp)
   10380:	df000017 	ldw	fp,0(sp)
   10384:	dec00204 	addi	sp,sp,8
   10388:	f800283a 	ret

0001038c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1038c:	defffe04 	addi	sp,sp,-8
   10390:	dfc00115 	stw	ra,4(sp)
   10394:	df000015 	stw	fp,0(sp)
   10398:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1039c:	00800074 	movhi	r2,1
   103a0:	10937404 	addi	r2,r2,19920
   103a4:	10800017 	ldw	r2,0(r2)
   103a8:	10000526 	beq	r2,zero,103c0 <alt_get_errno+0x34>
   103ac:	00800074 	movhi	r2,1
   103b0:	10937404 	addi	r2,r2,19920
   103b4:	10800017 	ldw	r2,0(r2)
   103b8:	103ee83a 	callr	r2
   103bc:	00000206 	br	103c8 <alt_get_errno+0x3c>
   103c0:	00800074 	movhi	r2,1
   103c4:	109a5a04 	addi	r2,r2,26984
}
   103c8:	e037883a 	mov	sp,fp
   103cc:	dfc00117 	ldw	ra,4(sp)
   103d0:	df000017 	ldw	fp,0(sp)
   103d4:	dec00204 	addi	sp,sp,8
   103d8:	f800283a 	ret

000103dc <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   103dc:	defff904 	addi	sp,sp,-28
   103e0:	dfc00615 	stw	ra,24(sp)
   103e4:	df000515 	stw	fp,20(sp)
   103e8:	df000504 	addi	fp,sp,20
   103ec:	e13ffd15 	stw	r4,-12(fp)
   103f0:	e17ffe15 	stw	r5,-8(fp)
   103f4:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   103f8:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   103fc:	e0bffd17 	ldw	r2,-12(fp)
   10400:	10000816 	blt	r2,zero,10424 <lseek+0x48>
   10404:	e13ffd17 	ldw	r4,-12(fp)
   10408:	01400304 	movi	r5,12
   1040c:	000d72c0 	call	d72c <__mulsi3>
   10410:	1007883a 	mov	r3,r2
   10414:	00800074 	movhi	r2,1
   10418:	108ef104 	addi	r2,r2,15300
   1041c:	1885883a 	add	r2,r3,r2
   10420:	00000106 	br	10428 <lseek+0x4c>
   10424:	0005883a 	mov	r2,zero
   10428:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   1042c:	e0bffc17 	ldw	r2,-16(fp)
   10430:	10001026 	beq	r2,zero,10474 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   10434:	e0bffc17 	ldw	r2,-16(fp)
   10438:	10800017 	ldw	r2,0(r2)
   1043c:	10800717 	ldw	r2,28(r2)
   10440:	10000926 	beq	r2,zero,10468 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   10444:	e0bffc17 	ldw	r2,-16(fp)
   10448:	10800017 	ldw	r2,0(r2)
   1044c:	10800717 	ldw	r2,28(r2)
   10450:	e13ffc17 	ldw	r4,-16(fp)
   10454:	e17ffe17 	ldw	r5,-8(fp)
   10458:	e1bfff17 	ldw	r6,-4(fp)
   1045c:	103ee83a 	callr	r2
   10460:	e0bffb15 	stw	r2,-20(fp)
   10464:	00000506 	br	1047c <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   10468:	00bfde84 	movi	r2,-134
   1046c:	e0bffb15 	stw	r2,-20(fp)
   10470:	00000206 	br	1047c <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   10474:	00bfebc4 	movi	r2,-81
   10478:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   1047c:	e0bffb17 	ldw	r2,-20(fp)
   10480:	1000070e 	bge	r2,zero,104a0 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   10484:	001038c0 	call	1038c <alt_get_errno>
   10488:	1007883a 	mov	r3,r2
   1048c:	e0bffb17 	ldw	r2,-20(fp)
   10490:	0085c83a 	sub	r2,zero,r2
   10494:	18800015 	stw	r2,0(r3)
    rc = -1;
   10498:	00bfffc4 	movi	r2,-1
   1049c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   104a0:	e0bffb17 	ldw	r2,-20(fp)
}
   104a4:	e037883a 	mov	sp,fp
   104a8:	dfc00117 	ldw	ra,4(sp)
   104ac:	df000017 	ldw	fp,0(sp)
   104b0:	dec00204 	addi	sp,sp,8
   104b4:	f800283a 	ret

000104b8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   104b8:	defffd04 	addi	sp,sp,-12
   104bc:	dfc00215 	stw	ra,8(sp)
   104c0:	df000115 	stw	fp,4(sp)
   104c4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   104c8:	0009883a 	mov	r4,zero
   104cc:	00109ac0 	call	109ac <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   104d0:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   104d4:	00109e00 	call	109e0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   104d8:	01000074 	movhi	r4,1
   104dc:	210c9804 	addi	r4,r4,12896
   104e0:	01400074 	movhi	r5,1
   104e4:	294c9804 	addi	r5,r5,12896
   104e8:	01800074 	movhi	r6,1
   104ec:	318c9804 	addi	r6,r6,12896
   104f0:	0011ca00 	call	11ca0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   104f4:	001181c0 	call	1181c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   104f8:	01000074 	movhi	r4,1
   104fc:	21061e04 	addi	r4,r4,6264
   10500:	001248c0 	call	1248c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   10504:	d126f517 	ldw	r4,-25644(gp)
   10508:	d0e6f617 	ldw	r3,-25640(gp)
   1050c:	d0a6f717 	ldw	r2,-25636(gp)
   10510:	180b883a 	mov	r5,r3
   10514:	100d883a 	mov	r6,r2
   10518:	00010ac0 	call	10ac <main>
   1051c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   10520:	01000044 	movi	r4,1
   10524:	000ffa00 	call	ffa0 <close>
  exit (result);
   10528:	e13fff17 	ldw	r4,-4(fp)
   1052c:	00124a00 	call	124a0 <exit>

00010530 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   10530:	defffe04 	addi	sp,sp,-8
   10534:	df000115 	stw	fp,4(sp)
   10538:	df000104 	addi	fp,sp,4
   1053c:	e13fff15 	stw	r4,-4(fp)
}
   10540:	e037883a 	mov	sp,fp
   10544:	df000017 	ldw	fp,0(sp)
   10548:	dec00104 	addi	sp,sp,4
   1054c:	f800283a 	ret

00010550 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   10550:	defffe04 	addi	sp,sp,-8
   10554:	df000115 	stw	fp,4(sp)
   10558:	df000104 	addi	fp,sp,4
   1055c:	e13fff15 	stw	r4,-4(fp)
}
   10560:	e037883a 	mov	sp,fp
   10564:	df000017 	ldw	fp,0(sp)
   10568:	dec00104 	addi	sp,sp,4
   1056c:	f800283a 	ret

00010570 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10570:	defffe04 	addi	sp,sp,-8
   10574:	dfc00115 	stw	ra,4(sp)
   10578:	df000015 	stw	fp,0(sp)
   1057c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10580:	00800074 	movhi	r2,1
   10584:	10937404 	addi	r2,r2,19920
   10588:	10800017 	ldw	r2,0(r2)
   1058c:	10000526 	beq	r2,zero,105a4 <alt_get_errno+0x34>
   10590:	00800074 	movhi	r2,1
   10594:	10937404 	addi	r2,r2,19920
   10598:	10800017 	ldw	r2,0(r2)
   1059c:	103ee83a 	callr	r2
   105a0:	00000206 	br	105ac <alt_get_errno+0x3c>
   105a4:	00800074 	movhi	r2,1
   105a8:	109a5a04 	addi	r2,r2,26984
}
   105ac:	e037883a 	mov	sp,fp
   105b0:	dfc00117 	ldw	ra,4(sp)
   105b4:	df000017 	ldw	fp,0(sp)
   105b8:	dec00204 	addi	sp,sp,8
   105bc:	f800283a 	ret

000105c0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   105c0:	defff904 	addi	sp,sp,-28
   105c4:	dfc00615 	stw	ra,24(sp)
   105c8:	df000515 	stw	fp,20(sp)
   105cc:	df000504 	addi	fp,sp,20
   105d0:	e13ffd15 	stw	r4,-12(fp)
   105d4:	e17ffe15 	stw	r5,-8(fp)
   105d8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   105dc:	e0bffd17 	ldw	r2,-12(fp)
   105e0:	10000816 	blt	r2,zero,10604 <read+0x44>
   105e4:	e13ffd17 	ldw	r4,-12(fp)
   105e8:	01400304 	movi	r5,12
   105ec:	000d72c0 	call	d72c <__mulsi3>
   105f0:	1007883a 	mov	r3,r2
   105f4:	00800074 	movhi	r2,1
   105f8:	108ef104 	addi	r2,r2,15300
   105fc:	1885883a 	add	r2,r3,r2
   10600:	00000106 	br	10608 <read+0x48>
   10604:	0005883a 	mov	r2,zero
   10608:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   1060c:	e0bffb17 	ldw	r2,-20(fp)
   10610:	10002226 	beq	r2,zero,1069c <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   10614:	e0bffb17 	ldw	r2,-20(fp)
   10618:	10800217 	ldw	r2,8(r2)
   1061c:	108000cc 	andi	r2,r2,3
   10620:	10800060 	cmpeqi	r2,r2,1
   10624:	1000181e 	bne	r2,zero,10688 <read+0xc8>
        (fd->dev->read))
   10628:	e0bffb17 	ldw	r2,-20(fp)
   1062c:	10800017 	ldw	r2,0(r2)
   10630:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   10634:	10001426 	beq	r2,zero,10688 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   10638:	e0bffb17 	ldw	r2,-20(fp)
   1063c:	10800017 	ldw	r2,0(r2)
   10640:	10800517 	ldw	r2,20(r2)
   10644:	e0ffff17 	ldw	r3,-4(fp)
   10648:	e13ffb17 	ldw	r4,-20(fp)
   1064c:	e17ffe17 	ldw	r5,-8(fp)
   10650:	180d883a 	mov	r6,r3
   10654:	103ee83a 	callr	r2
   10658:	e0bffc15 	stw	r2,-16(fp)
   1065c:	e0bffc17 	ldw	r2,-16(fp)
   10660:	1000070e 	bge	r2,zero,10680 <read+0xc0>
        {
          ALT_ERRNO = -rval;
   10664:	00105700 	call	10570 <alt_get_errno>
   10668:	1007883a 	mov	r3,r2
   1066c:	e0bffc17 	ldw	r2,-16(fp)
   10670:	0085c83a 	sub	r2,zero,r2
   10674:	18800015 	stw	r2,0(r3)
          return -1;
   10678:	00bfffc4 	movi	r2,-1
   1067c:	00000c06 	br	106b0 <read+0xf0>
        }
        return rval;
   10680:	e0bffc17 	ldw	r2,-16(fp)
   10684:	00000a06 	br	106b0 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   10688:	00105700 	call	10570 <alt_get_errno>
   1068c:	1007883a 	mov	r3,r2
   10690:	00800344 	movi	r2,13
   10694:	18800015 	stw	r2,0(r3)
   10698:	00000406 	br	106ac <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   1069c:	00105700 	call	10570 <alt_get_errno>
   106a0:	1007883a 	mov	r3,r2
   106a4:	00801444 	movi	r2,81
   106a8:	18800015 	stw	r2,0(r3)
  }
  return -1;
   106ac:	00bfffc4 	movi	r2,-1
}
   106b0:	e037883a 	mov	sp,fp
   106b4:	dfc00117 	ldw	ra,4(sp)
   106b8:	df000017 	ldw	fp,0(sp)
   106bc:	dec00204 	addi	sp,sp,8
   106c0:	f800283a 	ret

000106c4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   106c4:	defffc04 	addi	sp,sp,-16
   106c8:	dfc00315 	stw	ra,12(sp)
   106cc:	df000215 	stw	fp,8(sp)
   106d0:	dc000115 	stw	r16,4(sp)
   106d4:	df000204 	addi	fp,sp,8
   106d8:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   106dc:	e0bffe17 	ldw	r2,-8(fp)
   106e0:	108000d0 	cmplti	r2,r2,3
   106e4:	1000111e 	bne	r2,zero,1072c <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   106e8:	04000074 	movhi	r16,1
   106ec:	840ef104 	addi	r16,r16,15300
   106f0:	e0bffe17 	ldw	r2,-8(fp)
   106f4:	1009883a 	mov	r4,r2
   106f8:	01400304 	movi	r5,12
   106fc:	000d72c0 	call	d72c <__mulsi3>
   10700:	8085883a 	add	r2,r16,r2
   10704:	10800204 	addi	r2,r2,8
   10708:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   1070c:	04000074 	movhi	r16,1
   10710:	840ef104 	addi	r16,r16,15300
   10714:	e0bffe17 	ldw	r2,-8(fp)
   10718:	1009883a 	mov	r4,r2
   1071c:	01400304 	movi	r5,12
   10720:	000d72c0 	call	d72c <__mulsi3>
   10724:	8085883a 	add	r2,r16,r2
   10728:	10000015 	stw	zero,0(r2)
  }
}
   1072c:	e6ffff04 	addi	sp,fp,-4
   10730:	dfc00217 	ldw	ra,8(sp)
   10734:	df000117 	ldw	fp,4(sp)
   10738:	dc000017 	ldw	r16,0(sp)
   1073c:	dec00304 	addi	sp,sp,12
   10740:	f800283a 	ret

00010744 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   10744:	defff904 	addi	sp,sp,-28
   10748:	df000615 	stw	fp,24(sp)
   1074c:	df000604 	addi	fp,sp,24
   10750:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10754:	0005303a 	rdctl	r2,status
   10758:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1075c:	e0fffc17 	ldw	r3,-16(fp)
   10760:	00bfff84 	movi	r2,-2
   10764:	1884703a 	and	r2,r3,r2
   10768:	1001703a 	wrctl	status,r2
  
  return context;
   1076c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   10770:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   10774:	d0a00c17 	ldw	r2,-32720(gp)
   10778:	10c000c4 	addi	r3,r2,3
   1077c:	00bfff04 	movi	r2,-4
   10780:	1884703a 	and	r2,r3,r2
   10784:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   10788:	d0e00c17 	ldw	r3,-32720(gp)
   1078c:	e0bfff17 	ldw	r2,-4(fp)
   10790:	1887883a 	add	r3,r3,r2
   10794:	00800174 	movhi	r2,5
   10798:	1095cc04 	addi	r2,r2,22320
   1079c:	10c0062e 	bgeu	r2,r3,107b8 <sbrk+0x74>
   107a0:	e0bffa17 	ldw	r2,-24(fp)
   107a4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   107a8:	e0bffd17 	ldw	r2,-12(fp)
   107ac:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   107b0:	00bfffc4 	movi	r2,-1
   107b4:	00000b06 	br	107e4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   107b8:	d0a00c17 	ldw	r2,-32720(gp)
   107bc:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   107c0:	d0e00c17 	ldw	r3,-32720(gp)
   107c4:	e0bfff17 	ldw	r2,-4(fp)
   107c8:	1885883a 	add	r2,r3,r2
   107cc:	d0a00c15 	stw	r2,-32720(gp)
   107d0:	e0bffa17 	ldw	r2,-24(fp)
   107d4:	e0bffe15 	stw	r2,-8(fp)
   107d8:	e0bffe17 	ldw	r2,-8(fp)
   107dc:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   107e0:	e0bffb17 	ldw	r2,-20(fp)
} 
   107e4:	e037883a 	mov	sp,fp
   107e8:	df000017 	ldw	fp,0(sp)
   107ec:	dec00104 	addi	sp,sp,4
   107f0:	f800283a 	ret

000107f4 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   107f4:	defffd04 	addi	sp,sp,-12
   107f8:	dfc00215 	stw	ra,8(sp)
   107fc:	df000115 	stw	fp,4(sp)
   10800:	df000104 	addi	fp,sp,4
   10804:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   10808:	e13fff17 	ldw	r4,-4(fp)
   1080c:	00115b40 	call	115b4 <alt_busy_sleep>
}
   10810:	e037883a 	mov	sp,fp
   10814:	dfc00117 	ldw	ra,4(sp)
   10818:	df000017 	ldw	fp,0(sp)
   1081c:	dec00204 	addi	sp,sp,8
   10820:	f800283a 	ret

00010824 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10824:	defffe04 	addi	sp,sp,-8
   10828:	dfc00115 	stw	ra,4(sp)
   1082c:	df000015 	stw	fp,0(sp)
   10830:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10834:	00800074 	movhi	r2,1
   10838:	10937404 	addi	r2,r2,19920
   1083c:	10800017 	ldw	r2,0(r2)
   10840:	10000526 	beq	r2,zero,10858 <alt_get_errno+0x34>
   10844:	00800074 	movhi	r2,1
   10848:	10937404 	addi	r2,r2,19920
   1084c:	10800017 	ldw	r2,0(r2)
   10850:	103ee83a 	callr	r2
   10854:	00000206 	br	10860 <alt_get_errno+0x3c>
   10858:	00800074 	movhi	r2,1
   1085c:	109a5a04 	addi	r2,r2,26984
}
   10860:	e037883a 	mov	sp,fp
   10864:	dfc00117 	ldw	ra,4(sp)
   10868:	df000017 	ldw	fp,0(sp)
   1086c:	dec00204 	addi	sp,sp,8
   10870:	f800283a 	ret

00010874 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   10874:	defff904 	addi	sp,sp,-28
   10878:	dfc00615 	stw	ra,24(sp)
   1087c:	df000515 	stw	fp,20(sp)
   10880:	df000504 	addi	fp,sp,20
   10884:	e13ffd15 	stw	r4,-12(fp)
   10888:	e17ffe15 	stw	r5,-8(fp)
   1088c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   10890:	e0bffd17 	ldw	r2,-12(fp)
   10894:	10000816 	blt	r2,zero,108b8 <write+0x44>
   10898:	e13ffd17 	ldw	r4,-12(fp)
   1089c:	01400304 	movi	r5,12
   108a0:	000d72c0 	call	d72c <__mulsi3>
   108a4:	1007883a 	mov	r3,r2
   108a8:	00800074 	movhi	r2,1
   108ac:	108ef104 	addi	r2,r2,15300
   108b0:	1885883a 	add	r2,r3,r2
   108b4:	00000106 	br	108bc <write+0x48>
   108b8:	0005883a 	mov	r2,zero
   108bc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   108c0:	e0bffb17 	ldw	r2,-20(fp)
   108c4:	10002126 	beq	r2,zero,1094c <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   108c8:	e0bffb17 	ldw	r2,-20(fp)
   108cc:	10800217 	ldw	r2,8(r2)
   108d0:	108000cc 	andi	r2,r2,3
   108d4:	10001826 	beq	r2,zero,10938 <write+0xc4>
   108d8:	e0bffb17 	ldw	r2,-20(fp)
   108dc:	10800017 	ldw	r2,0(r2)
   108e0:	10800617 	ldw	r2,24(r2)
   108e4:	10001426 	beq	r2,zero,10938 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   108e8:	e0bffb17 	ldw	r2,-20(fp)
   108ec:	10800017 	ldw	r2,0(r2)
   108f0:	10800617 	ldw	r2,24(r2)
   108f4:	e0ffff17 	ldw	r3,-4(fp)
   108f8:	e13ffb17 	ldw	r4,-20(fp)
   108fc:	e17ffe17 	ldw	r5,-8(fp)
   10900:	180d883a 	mov	r6,r3
   10904:	103ee83a 	callr	r2
   10908:	e0bffc15 	stw	r2,-16(fp)
   1090c:	e0bffc17 	ldw	r2,-16(fp)
   10910:	1000070e 	bge	r2,zero,10930 <write+0xbc>
      {
        ALT_ERRNO = -rval;
   10914:	00108240 	call	10824 <alt_get_errno>
   10918:	1007883a 	mov	r3,r2
   1091c:	e0bffc17 	ldw	r2,-16(fp)
   10920:	0085c83a 	sub	r2,zero,r2
   10924:	18800015 	stw	r2,0(r3)
        return -1;
   10928:	00bfffc4 	movi	r2,-1
   1092c:	00000c06 	br	10960 <write+0xec>
      }
      return rval;
   10930:	e0bffc17 	ldw	r2,-16(fp)
   10934:	00000a06 	br	10960 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   10938:	00108240 	call	10824 <alt_get_errno>
   1093c:	1007883a 	mov	r3,r2
   10940:	00800344 	movi	r2,13
   10944:	18800015 	stw	r2,0(r3)
   10948:	00000406 	br	1095c <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   1094c:	00108240 	call	10824 <alt_get_errno>
   10950:	1007883a 	mov	r3,r2
   10954:	00801444 	movi	r2,81
   10958:	18800015 	stw	r2,0(r3)
  }
  return -1;
   1095c:	00bfffc4 	movi	r2,-1
}
   10960:	e037883a 	mov	sp,fp
   10964:	dfc00117 	ldw	ra,4(sp)
   10968:	df000017 	ldw	fp,0(sp)
   1096c:	dec00204 	addi	sp,sp,8
   10970:	f800283a 	ret

00010974 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   10974:	defffd04 	addi	sp,sp,-12
   10978:	dfc00215 	stw	ra,8(sp)
   1097c:	df000115 	stw	fp,4(sp)
   10980:	df000104 	addi	fp,sp,4
   10984:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   10988:	e13fff17 	ldw	r4,-4(fp)
   1098c:	01400074 	movhi	r5,1
   10990:	29537104 	addi	r5,r5,19908
   10994:	00117780 	call	11778 <alt_dev_llist_insert>
}
   10998:	e037883a 	mov	sp,fp
   1099c:	dfc00117 	ldw	ra,4(sp)
   109a0:	df000017 	ldw	fp,0(sp)
   109a4:	dec00204 	addi	sp,sp,8
   109a8:	f800283a 	ret

000109ac <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   109ac:	defffd04 	addi	sp,sp,-12
   109b0:	dfc00215 	stw	ra,8(sp)
   109b4:	df000115 	stw	fp,4(sp)
   109b8:	df000104 	addi	fp,sp,4
   109bc:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
   109c0:	00121580 	call	12158 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   109c4:	00800044 	movi	r2,1
   109c8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   109cc:	e037883a 	mov	sp,fp
   109d0:	dfc00117 	ldw	ra,4(sp)
   109d4:	df000017 	ldw	fp,0(sp)
   109d8:	dec00204 	addi	sp,sp,8
   109dc:	f800283a 	ret

000109e0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   109e0:	defffe04 	addi	sp,sp,-8
   109e4:	dfc00115 	stw	ra,4(sp)
   109e8:	df000015 	stw	fp,0(sp)
   109ec:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   109f0:	01000074 	movhi	r4,1
   109f4:	210f5b04 	addi	r4,r4,15724
   109f8:	000b883a 	mov	r5,zero
   109fc:	01800144 	movi	r6,5
   10a00:	0010b8c0 	call	10b8c <altera_avalon_jtag_uart_init>
   10a04:	01000074 	movhi	r4,1
   10a08:	210f5104 	addi	r4,r4,15684
   10a0c:	00109740 	call	10974 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
   10a10:	0001883a 	nop
}
   10a14:	e037883a 	mov	sp,fp
   10a18:	dfc00117 	ldw	ra,4(sp)
   10a1c:	df000017 	ldw	fp,0(sp)
   10a20:	dec00204 	addi	sp,sp,8
   10a24:	f800283a 	ret

00010a28 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   10a28:	defffa04 	addi	sp,sp,-24
   10a2c:	dfc00515 	stw	ra,20(sp)
   10a30:	df000415 	stw	fp,16(sp)
   10a34:	df000404 	addi	fp,sp,16
   10a38:	e13ffd15 	stw	r4,-12(fp)
   10a3c:	e17ffe15 	stw	r5,-8(fp)
   10a40:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   10a44:	e0bffd17 	ldw	r2,-12(fp)
   10a48:	10800017 	ldw	r2,0(r2)
   10a4c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   10a50:	e0bffc17 	ldw	r2,-16(fp)
   10a54:	10c00a04 	addi	r3,r2,40
   10a58:	e0bffd17 	ldw	r2,-12(fp)
   10a5c:	10800217 	ldw	r2,8(r2)
   10a60:	1809883a 	mov	r4,r3
   10a64:	e17ffe17 	ldw	r5,-8(fp)
   10a68:	e1bfff17 	ldw	r6,-4(fp)
   10a6c:	100f883a 	mov	r7,r2
   10a70:	00110500 	call	11050 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   10a74:	e037883a 	mov	sp,fp
   10a78:	dfc00117 	ldw	ra,4(sp)
   10a7c:	df000017 	ldw	fp,0(sp)
   10a80:	dec00204 	addi	sp,sp,8
   10a84:	f800283a 	ret

00010a88 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   10a88:	defffa04 	addi	sp,sp,-24
   10a8c:	dfc00515 	stw	ra,20(sp)
   10a90:	df000415 	stw	fp,16(sp)
   10a94:	df000404 	addi	fp,sp,16
   10a98:	e13ffd15 	stw	r4,-12(fp)
   10a9c:	e17ffe15 	stw	r5,-8(fp)
   10aa0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   10aa4:	e0bffd17 	ldw	r2,-12(fp)
   10aa8:	10800017 	ldw	r2,0(r2)
   10aac:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   10ab0:	e0bffc17 	ldw	r2,-16(fp)
   10ab4:	10c00a04 	addi	r3,r2,40
   10ab8:	e0bffd17 	ldw	r2,-12(fp)
   10abc:	10800217 	ldw	r2,8(r2)
   10ac0:	1809883a 	mov	r4,r3
   10ac4:	e17ffe17 	ldw	r5,-8(fp)
   10ac8:	e1bfff17 	ldw	r6,-4(fp)
   10acc:	100f883a 	mov	r7,r2
   10ad0:	001125c0 	call	1125c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   10ad4:	e037883a 	mov	sp,fp
   10ad8:	dfc00117 	ldw	ra,4(sp)
   10adc:	df000017 	ldw	fp,0(sp)
   10ae0:	dec00204 	addi	sp,sp,8
   10ae4:	f800283a 	ret

00010ae8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   10ae8:	defffc04 	addi	sp,sp,-16
   10aec:	dfc00315 	stw	ra,12(sp)
   10af0:	df000215 	stw	fp,8(sp)
   10af4:	df000204 	addi	fp,sp,8
   10af8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   10afc:	e0bfff17 	ldw	r2,-4(fp)
   10b00:	10800017 	ldw	r2,0(r2)
   10b04:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   10b08:	e0bffe17 	ldw	r2,-8(fp)
   10b0c:	10c00a04 	addi	r3,r2,40
   10b10:	e0bfff17 	ldw	r2,-4(fp)
   10b14:	10800217 	ldw	r2,8(r2)
   10b18:	1809883a 	mov	r4,r3
   10b1c:	100b883a 	mov	r5,r2
   10b20:	0010efc0 	call	10efc <altera_avalon_jtag_uart_close>
}
   10b24:	e037883a 	mov	sp,fp
   10b28:	dfc00117 	ldw	ra,4(sp)
   10b2c:	df000017 	ldw	fp,0(sp)
   10b30:	dec00204 	addi	sp,sp,8
   10b34:	f800283a 	ret

00010b38 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   10b38:	defffa04 	addi	sp,sp,-24
   10b3c:	dfc00515 	stw	ra,20(sp)
   10b40:	df000415 	stw	fp,16(sp)
   10b44:	df000404 	addi	fp,sp,16
   10b48:	e13ffd15 	stw	r4,-12(fp)
   10b4c:	e17ffe15 	stw	r5,-8(fp)
   10b50:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   10b54:	e0bffd17 	ldw	r2,-12(fp)
   10b58:	10800017 	ldw	r2,0(r2)
   10b5c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   10b60:	e0bffc17 	ldw	r2,-16(fp)
   10b64:	10800a04 	addi	r2,r2,40
   10b68:	1009883a 	mov	r4,r2
   10b6c:	e17ffe17 	ldw	r5,-8(fp)
   10b70:	e1bfff17 	ldw	r6,-4(fp)
   10b74:	0010f640 	call	10f64 <altera_avalon_jtag_uart_ioctl>
}
   10b78:	e037883a 	mov	sp,fp
   10b7c:	dfc00117 	ldw	ra,4(sp)
   10b80:	df000017 	ldw	fp,0(sp)
   10b84:	dec00204 	addi	sp,sp,8
   10b88:	f800283a 	ret

00010b8c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   10b8c:	defffa04 	addi	sp,sp,-24
   10b90:	dfc00515 	stw	ra,20(sp)
   10b94:	df000415 	stw	fp,16(sp)
   10b98:	df000404 	addi	fp,sp,16
   10b9c:	e13ffd15 	stw	r4,-12(fp)
   10ba0:	e17ffe15 	stw	r5,-8(fp)
   10ba4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   10ba8:	e0bffd17 	ldw	r2,-12(fp)
   10bac:	00c00044 	movi	r3,1
   10bb0:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   10bb4:	e0bffd17 	ldw	r2,-12(fp)
   10bb8:	10800017 	ldw	r2,0(r2)
   10bbc:	10800104 	addi	r2,r2,4
   10bc0:	1007883a 	mov	r3,r2
   10bc4:	e0bffd17 	ldw	r2,-12(fp)
   10bc8:	10800817 	ldw	r2,32(r2)
   10bcc:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   10bd0:	e0fffe17 	ldw	r3,-8(fp)
   10bd4:	e0bfff17 	ldw	r2,-4(fp)
   10bd8:	d8000015 	stw	zero,0(sp)
   10bdc:	1809883a 	mov	r4,r3
   10be0:	100b883a 	mov	r5,r2
   10be4:	01800074 	movhi	r6,1
   10be8:	31831404 	addi	r6,r6,3152
   10bec:	e1fffd17 	ldw	r7,-12(fp)
   10bf0:	00118f00 	call	118f0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   10bf4:	e0bffd17 	ldw	r2,-12(fp)
   10bf8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   10bfc:	e0bffd17 	ldw	r2,-12(fp)
   10c00:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   10c04:	00800074 	movhi	r2,1
   10c08:	109a6204 	addi	r2,r2,27016
   10c0c:	10800017 	ldw	r2,0(r2)
   10c10:	1809883a 	mov	r4,r3
   10c14:	100b883a 	mov	r5,r2
   10c18:	01800074 	movhi	r6,1
   10c1c:	31839504 	addi	r6,r6,3668
   10c20:	e1fffd17 	ldw	r7,-12(fp)
   10c24:	00114740 	call	11474 <alt_alarm_start>
   10c28:	1000040e 	bge	r2,zero,10c3c <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   10c2c:	e0fffd17 	ldw	r3,-12(fp)
   10c30:	00a00034 	movhi	r2,32768
   10c34:	10bfffc4 	addi	r2,r2,-1
   10c38:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   10c3c:	e037883a 	mov	sp,fp
   10c40:	dfc00117 	ldw	ra,4(sp)
   10c44:	df000017 	ldw	fp,0(sp)
   10c48:	dec00204 	addi	sp,sp,8
   10c4c:	f800283a 	ret

00010c50 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   10c50:	defff804 	addi	sp,sp,-32
   10c54:	df000715 	stw	fp,28(sp)
   10c58:	df000704 	addi	fp,sp,28
   10c5c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   10c60:	e0bfff17 	ldw	r2,-4(fp)
   10c64:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   10c68:	e0bffb17 	ldw	r2,-20(fp)
   10c6c:	10800017 	ldw	r2,0(r2)
   10c70:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   10c74:	e0bffc17 	ldw	r2,-16(fp)
   10c78:	10800104 	addi	r2,r2,4
   10c7c:	10800037 	ldwio	r2,0(r2)
   10c80:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   10c84:	e0bffd17 	ldw	r2,-12(fp)
   10c88:	1080c00c 	andi	r2,r2,768
   10c8c:	1000011e 	bne	r2,zero,10c94 <altera_avalon_jtag_uart_irq+0x44>
      break;
   10c90:	00006c06 	br	10e44 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   10c94:	e0bffd17 	ldw	r2,-12(fp)
   10c98:	1080400c 	andi	r2,r2,256
   10c9c:	10003426 	beq	r2,zero,10d70 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   10ca0:	00800074 	movhi	r2,1
   10ca4:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   10ca8:	e0bffb17 	ldw	r2,-20(fp)
   10cac:	10800a17 	ldw	r2,40(r2)
   10cb0:	10800044 	addi	r2,r2,1
   10cb4:	1081ffcc 	andi	r2,r2,2047
   10cb8:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   10cbc:	e0bffb17 	ldw	r2,-20(fp)
   10cc0:	10c00b17 	ldw	r3,44(r2)
   10cc4:	e0bffe17 	ldw	r2,-8(fp)
   10cc8:	1880011e 	bne	r3,r2,10cd0 <altera_avalon_jtag_uart_irq+0x80>
          break;
   10ccc:	00001606 	br	10d28 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   10cd0:	e0bffc17 	ldw	r2,-16(fp)
   10cd4:	10800037 	ldwio	r2,0(r2)
   10cd8:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   10cdc:	e0bff917 	ldw	r2,-28(fp)
   10ce0:	10a0000c 	andi	r2,r2,32768
   10ce4:	1000011e 	bne	r2,zero,10cec <altera_avalon_jtag_uart_irq+0x9c>
          break;
   10ce8:	00000f06 	br	10d28 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   10cec:	e0bffb17 	ldw	r2,-20(fp)
   10cf0:	10800a17 	ldw	r2,40(r2)
   10cf4:	e0fff917 	ldw	r3,-28(fp)
   10cf8:	1809883a 	mov	r4,r3
   10cfc:	e0fffb17 	ldw	r3,-20(fp)
   10d00:	1885883a 	add	r2,r3,r2
   10d04:	10800e04 	addi	r2,r2,56
   10d08:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   10d0c:	e0bffb17 	ldw	r2,-20(fp)
   10d10:	10800a17 	ldw	r2,40(r2)
   10d14:	10800044 	addi	r2,r2,1
   10d18:	10c1ffcc 	andi	r3,r2,2047
   10d1c:	e0bffb17 	ldw	r2,-20(fp)
   10d20:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   10d24:	003fe006 	br	10ca8 <__alt_data_end+0xfffbb578>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   10d28:	e0bff917 	ldw	r2,-28(fp)
   10d2c:	10bfffec 	andhi	r2,r2,65535
   10d30:	10000f26 	beq	r2,zero,10d70 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   10d34:	e0bffb17 	ldw	r2,-20(fp)
   10d38:	10c00817 	ldw	r3,32(r2)
   10d3c:	00bfff84 	movi	r2,-2
   10d40:	1886703a 	and	r3,r3,r2
   10d44:	e0bffb17 	ldw	r2,-20(fp)
   10d48:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   10d4c:	e0bffc17 	ldw	r2,-16(fp)
   10d50:	10800104 	addi	r2,r2,4
   10d54:	1007883a 	mov	r3,r2
   10d58:	e0bffb17 	ldw	r2,-20(fp)
   10d5c:	10800817 	ldw	r2,32(r2)
   10d60:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   10d64:	e0bffc17 	ldw	r2,-16(fp)
   10d68:	10800104 	addi	r2,r2,4
   10d6c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   10d70:	e0bffd17 	ldw	r2,-12(fp)
   10d74:	1080800c 	andi	r2,r2,512
   10d78:	10003126 	beq	r2,zero,10e40 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   10d7c:	e0bffd17 	ldw	r2,-12(fp)
   10d80:	1004d43a 	srli	r2,r2,16
   10d84:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   10d88:	00001406 	br	10ddc <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   10d8c:	e0bffc17 	ldw	r2,-16(fp)
   10d90:	e0fffb17 	ldw	r3,-20(fp)
   10d94:	18c00d17 	ldw	r3,52(r3)
   10d98:	e13ffb17 	ldw	r4,-20(fp)
   10d9c:	20c7883a 	add	r3,r4,r3
   10da0:	18c20e04 	addi	r3,r3,2104
   10da4:	18c00003 	ldbu	r3,0(r3)
   10da8:	18c03fcc 	andi	r3,r3,255
   10dac:	18c0201c 	xori	r3,r3,128
   10db0:	18ffe004 	addi	r3,r3,-128
   10db4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   10db8:	e0bffb17 	ldw	r2,-20(fp)
   10dbc:	10800d17 	ldw	r2,52(r2)
   10dc0:	10800044 	addi	r2,r2,1
   10dc4:	10c1ffcc 	andi	r3,r2,2047
   10dc8:	e0bffb17 	ldw	r2,-20(fp)
   10dcc:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   10dd0:	e0bffa17 	ldw	r2,-24(fp)
   10dd4:	10bfffc4 	addi	r2,r2,-1
   10dd8:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   10ddc:	e0bffa17 	ldw	r2,-24(fp)
   10de0:	10000526 	beq	r2,zero,10df8 <altera_avalon_jtag_uart_irq+0x1a8>
   10de4:	e0bffb17 	ldw	r2,-20(fp)
   10de8:	10c00d17 	ldw	r3,52(r2)
   10dec:	e0bffb17 	ldw	r2,-20(fp)
   10df0:	10800c17 	ldw	r2,48(r2)
   10df4:	18bfe51e 	bne	r3,r2,10d8c <__alt_data_end+0xfffbb65c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   10df8:	e0bffa17 	ldw	r2,-24(fp)
   10dfc:	10001026 	beq	r2,zero,10e40 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   10e00:	e0bffb17 	ldw	r2,-20(fp)
   10e04:	10c00817 	ldw	r3,32(r2)
   10e08:	00bfff44 	movi	r2,-3
   10e0c:	1886703a 	and	r3,r3,r2
   10e10:	e0bffb17 	ldw	r2,-20(fp)
   10e14:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   10e18:	e0bffb17 	ldw	r2,-20(fp)
   10e1c:	10800017 	ldw	r2,0(r2)
   10e20:	10800104 	addi	r2,r2,4
   10e24:	1007883a 	mov	r3,r2
   10e28:	e0bffb17 	ldw	r2,-20(fp)
   10e2c:	10800817 	ldw	r2,32(r2)
   10e30:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   10e34:	e0bffc17 	ldw	r2,-16(fp)
   10e38:	10800104 	addi	r2,r2,4
   10e3c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   10e40:	003f8c06 	br	10c74 <__alt_data_end+0xfffbb544>
}
   10e44:	e037883a 	mov	sp,fp
   10e48:	df000017 	ldw	fp,0(sp)
   10e4c:	dec00104 	addi	sp,sp,4
   10e50:	f800283a 	ret

00010e54 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   10e54:	defff804 	addi	sp,sp,-32
   10e58:	df000715 	stw	fp,28(sp)
   10e5c:	df000704 	addi	fp,sp,28
   10e60:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   10e64:	e0bffb17 	ldw	r2,-20(fp)
   10e68:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   10e6c:	e0bff917 	ldw	r2,-28(fp)
   10e70:	10800017 	ldw	r2,0(r2)
   10e74:	10800104 	addi	r2,r2,4
   10e78:	10800037 	ldwio	r2,0(r2)
   10e7c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   10e80:	e0bffa17 	ldw	r2,-24(fp)
   10e84:	1081000c 	andi	r2,r2,1024
   10e88:	10000b26 	beq	r2,zero,10eb8 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   10e8c:	e0bff917 	ldw	r2,-28(fp)
   10e90:	10800017 	ldw	r2,0(r2)
   10e94:	10800104 	addi	r2,r2,4
   10e98:	1007883a 	mov	r3,r2
   10e9c:	e0bff917 	ldw	r2,-28(fp)
   10ea0:	10800817 	ldw	r2,32(r2)
   10ea4:	10810014 	ori	r2,r2,1024
   10ea8:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   10eac:	e0bff917 	ldw	r2,-28(fp)
   10eb0:	10000915 	stw	zero,36(r2)
   10eb4:	00000a06 	br	10ee0 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   10eb8:	e0bff917 	ldw	r2,-28(fp)
   10ebc:	10c00917 	ldw	r3,36(r2)
   10ec0:	00a00034 	movhi	r2,32768
   10ec4:	10bfff04 	addi	r2,r2,-4
   10ec8:	10c00536 	bltu	r2,r3,10ee0 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   10ecc:	e0bff917 	ldw	r2,-28(fp)
   10ed0:	10800917 	ldw	r2,36(r2)
   10ed4:	10c00044 	addi	r3,r2,1
   10ed8:	e0bff917 	ldw	r2,-28(fp)
   10edc:	10c00915 	stw	r3,36(r2)
   10ee0:	00800074 	movhi	r2,1
   10ee4:	109a6204 	addi	r2,r2,27016
   10ee8:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   10eec:	e037883a 	mov	sp,fp
   10ef0:	df000017 	ldw	fp,0(sp)
   10ef4:	dec00104 	addi	sp,sp,4
   10ef8:	f800283a 	ret

00010efc <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   10efc:	defffd04 	addi	sp,sp,-12
   10f00:	df000215 	stw	fp,8(sp)
   10f04:	df000204 	addi	fp,sp,8
   10f08:	e13ffe15 	stw	r4,-8(fp)
   10f0c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   10f10:	00000506 	br	10f28 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   10f14:	e0bfff17 	ldw	r2,-4(fp)
   10f18:	1090000c 	andi	r2,r2,16384
   10f1c:	10000226 	beq	r2,zero,10f28 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   10f20:	00bffd44 	movi	r2,-11
   10f24:	00000b06 	br	10f54 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   10f28:	e0bffe17 	ldw	r2,-8(fp)
   10f2c:	10c00d17 	ldw	r3,52(r2)
   10f30:	e0bffe17 	ldw	r2,-8(fp)
   10f34:	10800c17 	ldw	r2,48(r2)
   10f38:	18800526 	beq	r3,r2,10f50 <altera_avalon_jtag_uart_close+0x54>
   10f3c:	e0bffe17 	ldw	r2,-8(fp)
   10f40:	10c00917 	ldw	r3,36(r2)
   10f44:	e0bffe17 	ldw	r2,-8(fp)
   10f48:	10800117 	ldw	r2,4(r2)
   10f4c:	18bff136 	bltu	r3,r2,10f14 <__alt_data_end+0xfffbb7e4>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   10f50:	0005883a 	mov	r2,zero
}
   10f54:	e037883a 	mov	sp,fp
   10f58:	df000017 	ldw	fp,0(sp)
   10f5c:	dec00104 	addi	sp,sp,4
   10f60:	f800283a 	ret

00010f64 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   10f64:	defffa04 	addi	sp,sp,-24
   10f68:	df000515 	stw	fp,20(sp)
   10f6c:	df000504 	addi	fp,sp,20
   10f70:	e13ffd15 	stw	r4,-12(fp)
   10f74:	e17ffe15 	stw	r5,-8(fp)
   10f78:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   10f7c:	00bff9c4 	movi	r2,-25
   10f80:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   10f84:	e0bffe17 	ldw	r2,-8(fp)
   10f88:	10da8060 	cmpeqi	r3,r2,27137
   10f8c:	1800031e 	bne	r3,zero,10f9c <altera_avalon_jtag_uart_ioctl+0x38>
   10f90:	109a80a0 	cmpeqi	r2,r2,27138
   10f94:	1000191e 	bne	r2,zero,10ffc <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
   10f98:	00002806 	br	1103c <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   10f9c:	e0bffd17 	ldw	r2,-12(fp)
   10fa0:	10c00117 	ldw	r3,4(r2)
   10fa4:	00a00034 	movhi	r2,32768
   10fa8:	10bfffc4 	addi	r2,r2,-1
   10fac:	18801226 	beq	r3,r2,10ff8 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
   10fb0:	e0bfff17 	ldw	r2,-4(fp)
   10fb4:	10800017 	ldw	r2,0(r2)
   10fb8:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   10fbc:	e0bffc17 	ldw	r2,-16(fp)
   10fc0:	10800090 	cmplti	r2,r2,2
   10fc4:	1000061e 	bne	r2,zero,10fe0 <altera_avalon_jtag_uart_ioctl+0x7c>
   10fc8:	e0fffc17 	ldw	r3,-16(fp)
   10fcc:	00a00034 	movhi	r2,32768
   10fd0:	10bfffc4 	addi	r2,r2,-1
   10fd4:	18800226 	beq	r3,r2,10fe0 <altera_avalon_jtag_uart_ioctl+0x7c>
   10fd8:	e0bffc17 	ldw	r2,-16(fp)
   10fdc:	00000206 	br	10fe8 <altera_avalon_jtag_uart_ioctl+0x84>
   10fe0:	00a00034 	movhi	r2,32768
   10fe4:	10bfff84 	addi	r2,r2,-2
   10fe8:	e0fffd17 	ldw	r3,-12(fp)
   10fec:	18800115 	stw	r2,4(r3)
      rc = 0;
   10ff0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   10ff4:	00001106 	br	1103c <altera_avalon_jtag_uart_ioctl+0xd8>
   10ff8:	00001006 	br	1103c <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   10ffc:	e0bffd17 	ldw	r2,-12(fp)
   11000:	10c00117 	ldw	r3,4(r2)
   11004:	00a00034 	movhi	r2,32768
   11008:	10bfffc4 	addi	r2,r2,-1
   1100c:	18800a26 	beq	r3,r2,11038 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   11010:	e0bffd17 	ldw	r2,-12(fp)
   11014:	10c00917 	ldw	r3,36(r2)
   11018:	e0bffd17 	ldw	r2,-12(fp)
   1101c:	10800117 	ldw	r2,4(r2)
   11020:	1885803a 	cmpltu	r2,r3,r2
   11024:	10c03fcc 	andi	r3,r2,255
   11028:	e0bfff17 	ldw	r2,-4(fp)
   1102c:	10c00015 	stw	r3,0(r2)
      rc = 0;
   11030:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   11034:	00000006 	br	11038 <altera_avalon_jtag_uart_ioctl+0xd4>
   11038:	0001883a 	nop

  default:
    break;
  }

  return rc;
   1103c:	e0bffb17 	ldw	r2,-20(fp)
}
   11040:	e037883a 	mov	sp,fp
   11044:	df000017 	ldw	fp,0(sp)
   11048:	dec00104 	addi	sp,sp,4
   1104c:	f800283a 	ret

00011050 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   11050:	defff304 	addi	sp,sp,-52
   11054:	dfc00c15 	stw	ra,48(sp)
   11058:	df000b15 	stw	fp,44(sp)
   1105c:	df000b04 	addi	fp,sp,44
   11060:	e13ffc15 	stw	r4,-16(fp)
   11064:	e17ffd15 	stw	r5,-12(fp)
   11068:	e1bffe15 	stw	r6,-8(fp)
   1106c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   11070:	e0bffd17 	ldw	r2,-12(fp)
   11074:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   11078:	00004906 	br	111a0 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   1107c:	e0bffc17 	ldw	r2,-16(fp)
   11080:	10800a17 	ldw	r2,40(r2)
   11084:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   11088:	e0bffc17 	ldw	r2,-16(fp)
   1108c:	10800b17 	ldw	r2,44(r2)
   11090:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   11094:	e0fff717 	ldw	r3,-36(fp)
   11098:	e0bff817 	ldw	r2,-32(fp)
   1109c:	18800536 	bltu	r3,r2,110b4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   110a0:	e0fff717 	ldw	r3,-36(fp)
   110a4:	e0bff817 	ldw	r2,-32(fp)
   110a8:	1885c83a 	sub	r2,r3,r2
   110ac:	e0bff615 	stw	r2,-40(fp)
   110b0:	00000406 	br	110c4 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   110b4:	00c20004 	movi	r3,2048
   110b8:	e0bff817 	ldw	r2,-32(fp)
   110bc:	1885c83a 	sub	r2,r3,r2
   110c0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   110c4:	e0bff617 	ldw	r2,-40(fp)
   110c8:	1000011e 	bne	r2,zero,110d0 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
   110cc:	00001d06 	br	11144 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
   110d0:	e0fffe17 	ldw	r3,-8(fp)
   110d4:	e0bff617 	ldw	r2,-40(fp)
   110d8:	1880022e 	bgeu	r3,r2,110e4 <altera_avalon_jtag_uart_read+0x94>
        n = space;
   110dc:	e0bffe17 	ldw	r2,-8(fp)
   110e0:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   110e4:	e0bff817 	ldw	r2,-32(fp)
   110e8:	10800e04 	addi	r2,r2,56
   110ec:	e0fffc17 	ldw	r3,-16(fp)
   110f0:	1885883a 	add	r2,r3,r2
   110f4:	e13ff517 	ldw	r4,-44(fp)
   110f8:	100b883a 	mov	r5,r2
   110fc:	e1bff617 	ldw	r6,-40(fp)
   11100:	0008f280 	call	8f28 <memcpy>
      ptr   += n;
   11104:	e0fff517 	ldw	r3,-44(fp)
   11108:	e0bff617 	ldw	r2,-40(fp)
   1110c:	1885883a 	add	r2,r3,r2
   11110:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   11114:	e0fffe17 	ldw	r3,-8(fp)
   11118:	e0bff617 	ldw	r2,-40(fp)
   1111c:	1885c83a 	sub	r2,r3,r2
   11120:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   11124:	e0fff817 	ldw	r3,-32(fp)
   11128:	e0bff617 	ldw	r2,-40(fp)
   1112c:	1885883a 	add	r2,r3,r2
   11130:	10c1ffcc 	andi	r3,r2,2047
   11134:	e0bffc17 	ldw	r2,-16(fp)
   11138:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   1113c:	e0bffe17 	ldw	r2,-8(fp)
   11140:	00bfce16 	blt	zero,r2,1107c <__alt_data_end+0xfffbb94c>

    /* If we read any data then return it */
    if (ptr != buffer)
   11144:	e0fff517 	ldw	r3,-44(fp)
   11148:	e0bffd17 	ldw	r2,-12(fp)
   1114c:	18800126 	beq	r3,r2,11154 <altera_avalon_jtag_uart_read+0x104>
      break;
   11150:	00001506 	br	111a8 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   11154:	e0bfff17 	ldw	r2,-4(fp)
   11158:	1090000c 	andi	r2,r2,16384
   1115c:	10000126 	beq	r2,zero,11164 <altera_avalon_jtag_uart_read+0x114>
      break;
   11160:	00001106 	br	111a8 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   11164:	0001883a 	nop
   11168:	e0bffc17 	ldw	r2,-16(fp)
   1116c:	10c00a17 	ldw	r3,40(r2)
   11170:	e0bff717 	ldw	r2,-36(fp)
   11174:	1880051e 	bne	r3,r2,1118c <altera_avalon_jtag_uart_read+0x13c>
   11178:	e0bffc17 	ldw	r2,-16(fp)
   1117c:	10c00917 	ldw	r3,36(r2)
   11180:	e0bffc17 	ldw	r2,-16(fp)
   11184:	10800117 	ldw	r2,4(r2)
   11188:	18bff736 	bltu	r3,r2,11168 <__alt_data_end+0xfffbba38>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   1118c:	e0bffc17 	ldw	r2,-16(fp)
   11190:	10c00a17 	ldw	r3,40(r2)
   11194:	e0bff717 	ldw	r2,-36(fp)
   11198:	1880011e 	bne	r3,r2,111a0 <altera_avalon_jtag_uart_read+0x150>
      break;
   1119c:	00000206 	br	111a8 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   111a0:	e0bffe17 	ldw	r2,-8(fp)
   111a4:	00bfb516 	blt	zero,r2,1107c <__alt_data_end+0xfffbb94c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   111a8:	e0fff517 	ldw	r3,-44(fp)
   111ac:	e0bffd17 	ldw	r2,-12(fp)
   111b0:	18801826 	beq	r3,r2,11214 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   111b4:	0005303a 	rdctl	r2,status
   111b8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   111bc:	e0fffa17 	ldw	r3,-24(fp)
   111c0:	00bfff84 	movi	r2,-2
   111c4:	1884703a 	and	r2,r3,r2
   111c8:	1001703a 	wrctl	status,r2
  
  return context;
   111cc:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   111d0:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   111d4:	e0bffc17 	ldw	r2,-16(fp)
   111d8:	10800817 	ldw	r2,32(r2)
   111dc:	10c00054 	ori	r3,r2,1
   111e0:	e0bffc17 	ldw	r2,-16(fp)
   111e4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   111e8:	e0bffc17 	ldw	r2,-16(fp)
   111ec:	10800017 	ldw	r2,0(r2)
   111f0:	10800104 	addi	r2,r2,4
   111f4:	1007883a 	mov	r3,r2
   111f8:	e0bffc17 	ldw	r2,-16(fp)
   111fc:	10800817 	ldw	r2,32(r2)
   11200:	18800035 	stwio	r2,0(r3)
   11204:	e0bff917 	ldw	r2,-28(fp)
   11208:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1120c:	e0bffb17 	ldw	r2,-20(fp)
   11210:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   11214:	e0fff517 	ldw	r3,-44(fp)
   11218:	e0bffd17 	ldw	r2,-12(fp)
   1121c:	18800426 	beq	r3,r2,11230 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
   11220:	e0fff517 	ldw	r3,-44(fp)
   11224:	e0bffd17 	ldw	r2,-12(fp)
   11228:	1885c83a 	sub	r2,r3,r2
   1122c:	00000606 	br	11248 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
   11230:	e0bfff17 	ldw	r2,-4(fp)
   11234:	1090000c 	andi	r2,r2,16384
   11238:	10000226 	beq	r2,zero,11244 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
   1123c:	00bffd44 	movi	r2,-11
   11240:	00000106 	br	11248 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
   11244:	00bffec4 	movi	r2,-5
}
   11248:	e037883a 	mov	sp,fp
   1124c:	dfc00117 	ldw	ra,4(sp)
   11250:	df000017 	ldw	fp,0(sp)
   11254:	dec00204 	addi	sp,sp,8
   11258:	f800283a 	ret

0001125c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   1125c:	defff304 	addi	sp,sp,-52
   11260:	dfc00c15 	stw	ra,48(sp)
   11264:	df000b15 	stw	fp,44(sp)
   11268:	df000b04 	addi	fp,sp,44
   1126c:	e13ffc15 	stw	r4,-16(fp)
   11270:	e17ffd15 	stw	r5,-12(fp)
   11274:	e1bffe15 	stw	r6,-8(fp)
   11278:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   1127c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   11280:	e0bffd17 	ldw	r2,-12(fp)
   11284:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   11288:	00003806 	br	1136c <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   1128c:	e0bffc17 	ldw	r2,-16(fp)
   11290:	10800c17 	ldw	r2,48(r2)
   11294:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
   11298:	e0bffc17 	ldw	r2,-16(fp)
   1129c:	10800d17 	ldw	r2,52(r2)
   112a0:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   112a4:	e0fff817 	ldw	r3,-32(fp)
   112a8:	e0bff517 	ldw	r2,-44(fp)
   112ac:	1880062e 	bgeu	r3,r2,112c8 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   112b0:	e0fff517 	ldw	r3,-44(fp)
   112b4:	e0bff817 	ldw	r2,-32(fp)
   112b8:	1885c83a 	sub	r2,r3,r2
   112bc:	10bfffc4 	addi	r2,r2,-1
   112c0:	e0bff615 	stw	r2,-40(fp)
   112c4:	00000b06 	br	112f4 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   112c8:	e0bff517 	ldw	r2,-44(fp)
   112cc:	10000526 	beq	r2,zero,112e4 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   112d0:	00c20004 	movi	r3,2048
   112d4:	e0bff817 	ldw	r2,-32(fp)
   112d8:	1885c83a 	sub	r2,r3,r2
   112dc:	e0bff615 	stw	r2,-40(fp)
   112e0:	00000406 	br	112f4 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   112e4:	00c1ffc4 	movi	r3,2047
   112e8:	e0bff817 	ldw	r2,-32(fp)
   112ec:	1885c83a 	sub	r2,r3,r2
   112f0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   112f4:	e0bff617 	ldw	r2,-40(fp)
   112f8:	1000011e 	bne	r2,zero,11300 <altera_avalon_jtag_uart_write+0xa4>
        break;
   112fc:	00001d06 	br	11374 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
   11300:	e0fffe17 	ldw	r3,-8(fp)
   11304:	e0bff617 	ldw	r2,-40(fp)
   11308:	1880022e 	bgeu	r3,r2,11314 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
   1130c:	e0bffe17 	ldw	r2,-8(fp)
   11310:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   11314:	e0bff817 	ldw	r2,-32(fp)
   11318:	10820e04 	addi	r2,r2,2104
   1131c:	e0fffc17 	ldw	r3,-16(fp)
   11320:	1885883a 	add	r2,r3,r2
   11324:	1009883a 	mov	r4,r2
   11328:	e17ffd17 	ldw	r5,-12(fp)
   1132c:	e1bff617 	ldw	r6,-40(fp)
   11330:	0008f280 	call	8f28 <memcpy>
      ptr   += n;
   11334:	e0fffd17 	ldw	r3,-12(fp)
   11338:	e0bff617 	ldw	r2,-40(fp)
   1133c:	1885883a 	add	r2,r3,r2
   11340:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   11344:	e0fffe17 	ldw	r3,-8(fp)
   11348:	e0bff617 	ldw	r2,-40(fp)
   1134c:	1885c83a 	sub	r2,r3,r2
   11350:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   11354:	e0fff817 	ldw	r3,-32(fp)
   11358:	e0bff617 	ldw	r2,-40(fp)
   1135c:	1885883a 	add	r2,r3,r2
   11360:	10c1ffcc 	andi	r3,r2,2047
   11364:	e0bffc17 	ldw	r2,-16(fp)
   11368:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   1136c:	e0bffe17 	ldw	r2,-8(fp)
   11370:	00bfc616 	blt	zero,r2,1128c <__alt_data_end+0xfffbbb5c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11374:	0005303a 	rdctl	r2,status
   11378:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1137c:	e0fffa17 	ldw	r3,-24(fp)
   11380:	00bfff84 	movi	r2,-2
   11384:	1884703a 	and	r2,r3,r2
   11388:	1001703a 	wrctl	status,r2
  
  return context;
   1138c:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   11390:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   11394:	e0bffc17 	ldw	r2,-16(fp)
   11398:	10800817 	ldw	r2,32(r2)
   1139c:	10c00094 	ori	r3,r2,2
   113a0:	e0bffc17 	ldw	r2,-16(fp)
   113a4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   113a8:	e0bffc17 	ldw	r2,-16(fp)
   113ac:	10800017 	ldw	r2,0(r2)
   113b0:	10800104 	addi	r2,r2,4
   113b4:	1007883a 	mov	r3,r2
   113b8:	e0bffc17 	ldw	r2,-16(fp)
   113bc:	10800817 	ldw	r2,32(r2)
   113c0:	18800035 	stwio	r2,0(r3)
   113c4:	e0bff917 	ldw	r2,-28(fp)
   113c8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   113cc:	e0bffb17 	ldw	r2,-20(fp)
   113d0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   113d4:	e0bffe17 	ldw	r2,-8(fp)
   113d8:	0080120e 	bge	zero,r2,11424 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
   113dc:	e0bfff17 	ldw	r2,-4(fp)
   113e0:	1090000c 	andi	r2,r2,16384
   113e4:	10000126 	beq	r2,zero,113ec <altera_avalon_jtag_uart_write+0x190>
        break;
   113e8:	00001006 	br	1142c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   113ec:	0001883a 	nop
   113f0:	e0bffc17 	ldw	r2,-16(fp)
   113f4:	10c00d17 	ldw	r3,52(r2)
   113f8:	e0bff517 	ldw	r2,-44(fp)
   113fc:	1880051e 	bne	r3,r2,11414 <altera_avalon_jtag_uart_write+0x1b8>
   11400:	e0bffc17 	ldw	r2,-16(fp)
   11404:	10c00917 	ldw	r3,36(r2)
   11408:	e0bffc17 	ldw	r2,-16(fp)
   1140c:	10800117 	ldw	r2,4(r2)
   11410:	18bff736 	bltu	r3,r2,113f0 <__alt_data_end+0xfffbbcc0>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   11414:	e0bffc17 	ldw	r2,-16(fp)
   11418:	10800917 	ldw	r2,36(r2)
   1141c:	10000126 	beq	r2,zero,11424 <altera_avalon_jtag_uart_write+0x1c8>
         break;
   11420:	00000206 	br	1142c <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
   11424:	e0bffe17 	ldw	r2,-8(fp)
   11428:	00bf9716 	blt	zero,r2,11288 <__alt_data_end+0xfffbbb58>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   1142c:	e0fffd17 	ldw	r3,-12(fp)
   11430:	e0bff717 	ldw	r2,-36(fp)
   11434:	18800426 	beq	r3,r2,11448 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
   11438:	e0fffd17 	ldw	r3,-12(fp)
   1143c:	e0bff717 	ldw	r2,-36(fp)
   11440:	1885c83a 	sub	r2,r3,r2
   11444:	00000606 	br	11460 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
   11448:	e0bfff17 	ldw	r2,-4(fp)
   1144c:	1090000c 	andi	r2,r2,16384
   11450:	10000226 	beq	r2,zero,1145c <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
   11454:	00bffd44 	movi	r2,-11
   11458:	00000106 	br	11460 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   1145c:	00bffec4 	movi	r2,-5
}
   11460:	e037883a 	mov	sp,fp
   11464:	dfc00117 	ldw	ra,4(sp)
   11468:	df000017 	ldw	fp,0(sp)
   1146c:	dec00204 	addi	sp,sp,8
   11470:	f800283a 	ret

00011474 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   11474:	defff504 	addi	sp,sp,-44
   11478:	df000a15 	stw	fp,40(sp)
   1147c:	df000a04 	addi	fp,sp,40
   11480:	e13ffc15 	stw	r4,-16(fp)
   11484:	e17ffd15 	stw	r5,-12(fp)
   11488:	e1bffe15 	stw	r6,-8(fp)
   1148c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   11490:	e03ff615 	stw	zero,-40(fp)
   11494:	00800074 	movhi	r2,1
   11498:	109a6204 	addi	r2,r2,27016
   1149c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   114a0:	10003f26 	beq	r2,zero,115a0 <alt_alarm_start+0x12c>
  {
    if (alarm)
   114a4:	e0bffc17 	ldw	r2,-16(fp)
   114a8:	10003b26 	beq	r2,zero,11598 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   114ac:	e0bffc17 	ldw	r2,-16(fp)
   114b0:	e0fffe17 	ldw	r3,-8(fp)
   114b4:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   114b8:	e0bffc17 	ldw	r2,-16(fp)
   114bc:	e0ffff17 	ldw	r3,-4(fp)
   114c0:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   114c4:	0005303a 	rdctl	r2,status
   114c8:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   114cc:	e0fff817 	ldw	r3,-32(fp)
   114d0:	00bfff84 	movi	r2,-2
   114d4:	1884703a 	and	r2,r3,r2
   114d8:	1001703a 	wrctl	status,r2
  
  return context;
   114dc:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   114e0:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   114e4:	00800074 	movhi	r2,1
   114e8:	109a6304 	addi	r2,r2,27020
   114ec:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   114f0:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   114f4:	e0fffd17 	ldw	r3,-12(fp)
   114f8:	e0bff617 	ldw	r2,-40(fp)
   114fc:	1885883a 	add	r2,r3,r2
   11500:	10c00044 	addi	r3,r2,1
   11504:	e0bffc17 	ldw	r2,-16(fp)
   11508:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   1150c:	e0bffc17 	ldw	r2,-16(fp)
   11510:	10c00217 	ldw	r3,8(r2)
   11514:	e0bff617 	ldw	r2,-40(fp)
   11518:	1880042e 	bgeu	r3,r2,1152c <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   1151c:	e0bffc17 	ldw	r2,-16(fp)
   11520:	00c00044 	movi	r3,1
   11524:	10c00405 	stb	r3,16(r2)
   11528:	00000206 	br	11534 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   1152c:	e0bffc17 	ldw	r2,-16(fp)
   11530:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   11534:	e0fffc17 	ldw	r3,-16(fp)
   11538:	00800074 	movhi	r2,1
   1153c:	10937704 	addi	r2,r2,19932
   11540:	e0bff915 	stw	r2,-28(fp)
   11544:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   11548:	e0bffa17 	ldw	r2,-24(fp)
   1154c:	e0fff917 	ldw	r3,-28(fp)
   11550:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   11554:	e0bff917 	ldw	r2,-28(fp)
   11558:	10c00017 	ldw	r3,0(r2)
   1155c:	e0bffa17 	ldw	r2,-24(fp)
   11560:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   11564:	e0bff917 	ldw	r2,-28(fp)
   11568:	10800017 	ldw	r2,0(r2)
   1156c:	e0fffa17 	ldw	r3,-24(fp)
   11570:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   11574:	e0bff917 	ldw	r2,-28(fp)
   11578:	e0fffa17 	ldw	r3,-24(fp)
   1157c:	10c00015 	stw	r3,0(r2)
   11580:	e0bff717 	ldw	r2,-36(fp)
   11584:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11588:	e0bffb17 	ldw	r2,-20(fp)
   1158c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   11590:	0005883a 	mov	r2,zero
   11594:	00000306 	br	115a4 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   11598:	00bffa84 	movi	r2,-22
   1159c:	00000106 	br	115a4 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   115a0:	00bfde84 	movi	r2,-134
  }
}
   115a4:	e037883a 	mov	sp,fp
   115a8:	df000017 	ldw	fp,0(sp)
   115ac:	dec00104 	addi	sp,sp,4
   115b0:	f800283a 	ret

000115b4 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   115b4:	defffa04 	addi	sp,sp,-24
   115b8:	dfc00515 	stw	ra,20(sp)
   115bc:	df000415 	stw	fp,16(sp)
   115c0:	df000404 	addi	fp,sp,16
   115c4:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   115c8:	00800244 	movi	r2,9
   115cc:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   115d0:	e13ffd17 	ldw	r4,-12(fp)
   115d4:	014003f4 	movhi	r5,15
   115d8:	29509004 	addi	r5,r5,16960
   115dc:	000d72c0 	call	d72c <__mulsi3>
   115e0:	0100bef4 	movhi	r4,763
   115e4:	213c2004 	addi	r4,r4,-3968
   115e8:	100b883a 	mov	r5,r2
   115ec:	00035580 	call	3558 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   115f0:	01200034 	movhi	r4,32768
   115f4:	213fffc4 	addi	r4,r4,-1
   115f8:	100b883a 	mov	r5,r2
   115fc:	00035580 	call	3558 <__udivsi3>
   11600:	e13fff17 	ldw	r4,-4(fp)
   11604:	100b883a 	mov	r5,r2
   11608:	00035580 	call	3558 <__udivsi3>
   1160c:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   11610:	e0bffe17 	ldw	r2,-8(fp)
   11614:	10002a26 	beq	r2,zero,116c0 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   11618:	e03ffc15 	stw	zero,-16(fp)
   1161c:	00001706 	br	1167c <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   11620:	00a00034 	movhi	r2,32768
   11624:	10bfffc4 	addi	r2,r2,-1
   11628:	10bfffc4 	addi	r2,r2,-1
   1162c:	103ffe1e 	bne	r2,zero,11628 <__alt_data_end+0xfffbbef8>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   11630:	e13ffd17 	ldw	r4,-12(fp)
   11634:	014003f4 	movhi	r5,15
   11638:	29509004 	addi	r5,r5,16960
   1163c:	000d72c0 	call	d72c <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   11640:	0100bef4 	movhi	r4,763
   11644:	213c2004 	addi	r4,r4,-3968
   11648:	100b883a 	mov	r5,r2
   1164c:	00035580 	call	3558 <__udivsi3>
   11650:	01200034 	movhi	r4,32768
   11654:	213fffc4 	addi	r4,r4,-1
   11658:	100b883a 	mov	r5,r2
   1165c:	00035580 	call	3558 <__udivsi3>
   11660:	1007883a 	mov	r3,r2
   11664:	e0bfff17 	ldw	r2,-4(fp)
   11668:	10c5c83a 	sub	r2,r2,r3
   1166c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   11670:	e0bffc17 	ldw	r2,-16(fp)
   11674:	10800044 	addi	r2,r2,1
   11678:	e0bffc15 	stw	r2,-16(fp)
   1167c:	e0fffc17 	ldw	r3,-16(fp)
   11680:	e0bffe17 	ldw	r2,-8(fp)
   11684:	18bfe616 	blt	r3,r2,11620 <__alt_data_end+0xfffbbef0>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   11688:	e13ffd17 	ldw	r4,-12(fp)
   1168c:	014003f4 	movhi	r5,15
   11690:	29509004 	addi	r5,r5,16960
   11694:	000d72c0 	call	d72c <__mulsi3>
   11698:	0100bef4 	movhi	r4,763
   1169c:	213c2004 	addi	r4,r4,-3968
   116a0:	100b883a 	mov	r5,r2
   116a4:	00035580 	call	3558 <__udivsi3>
   116a8:	1009883a 	mov	r4,r2
   116ac:	e17fff17 	ldw	r5,-4(fp)
   116b0:	000d72c0 	call	d72c <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   116b4:	10bfffc4 	addi	r2,r2,-1
   116b8:	103ffe1e 	bne	r2,zero,116b4 <__alt_data_end+0xfffbbf84>
   116bc:	00000d06 	br	116f4 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   116c0:	e13ffd17 	ldw	r4,-12(fp)
   116c4:	014003f4 	movhi	r5,15
   116c8:	29509004 	addi	r5,r5,16960
   116cc:	000d72c0 	call	d72c <__mulsi3>
   116d0:	0100bef4 	movhi	r4,763
   116d4:	213c2004 	addi	r4,r4,-3968
   116d8:	100b883a 	mov	r5,r2
   116dc:	00035580 	call	3558 <__udivsi3>
   116e0:	1009883a 	mov	r4,r2
   116e4:	e17fff17 	ldw	r5,-4(fp)
   116e8:	000d72c0 	call	d72c <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   116ec:	10bfffc4 	addi	r2,r2,-1
   116f0:	00bffe16 	blt	zero,r2,116ec <__alt_data_end+0xfffbbfbc>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   116f4:	0005883a 	mov	r2,zero
}
   116f8:	e037883a 	mov	sp,fp
   116fc:	dfc00117 	ldw	ra,4(sp)
   11700:	df000017 	ldw	fp,0(sp)
   11704:	dec00204 	addi	sp,sp,8
   11708:	f800283a 	ret

0001170c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   1170c:	deffff04 	addi	sp,sp,-4
   11710:	df000015 	stw	fp,0(sp)
   11714:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   11718:	e037883a 	mov	sp,fp
   1171c:	df000017 	ldw	fp,0(sp)
   11720:	dec00104 	addi	sp,sp,4
   11724:	f800283a 	ret

00011728 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11728:	defffe04 	addi	sp,sp,-8
   1172c:	dfc00115 	stw	ra,4(sp)
   11730:	df000015 	stw	fp,0(sp)
   11734:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   11738:	00800074 	movhi	r2,1
   1173c:	10937404 	addi	r2,r2,19920
   11740:	10800017 	ldw	r2,0(r2)
   11744:	10000526 	beq	r2,zero,1175c <alt_get_errno+0x34>
   11748:	00800074 	movhi	r2,1
   1174c:	10937404 	addi	r2,r2,19920
   11750:	10800017 	ldw	r2,0(r2)
   11754:	103ee83a 	callr	r2
   11758:	00000206 	br	11764 <alt_get_errno+0x3c>
   1175c:	00800074 	movhi	r2,1
   11760:	109a5a04 	addi	r2,r2,26984
}
   11764:	e037883a 	mov	sp,fp
   11768:	dfc00117 	ldw	ra,4(sp)
   1176c:	df000017 	ldw	fp,0(sp)
   11770:	dec00204 	addi	sp,sp,8
   11774:	f800283a 	ret

00011778 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   11778:	defffa04 	addi	sp,sp,-24
   1177c:	dfc00515 	stw	ra,20(sp)
   11780:	df000415 	stw	fp,16(sp)
   11784:	df000404 	addi	fp,sp,16
   11788:	e13ffe15 	stw	r4,-8(fp)
   1178c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   11790:	e0bffe17 	ldw	r2,-8(fp)
   11794:	10000326 	beq	r2,zero,117a4 <alt_dev_llist_insert+0x2c>
   11798:	e0bffe17 	ldw	r2,-8(fp)
   1179c:	10800217 	ldw	r2,8(r2)
   117a0:	1000061e 	bne	r2,zero,117bc <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   117a4:	00117280 	call	11728 <alt_get_errno>
   117a8:	1007883a 	mov	r3,r2
   117ac:	00800584 	movi	r2,22
   117b0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   117b4:	00bffa84 	movi	r2,-22
   117b8:	00001306 	br	11808 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   117bc:	e0bffe17 	ldw	r2,-8(fp)
   117c0:	e0ffff17 	ldw	r3,-4(fp)
   117c4:	e0fffc15 	stw	r3,-16(fp)
   117c8:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   117cc:	e0bffd17 	ldw	r2,-12(fp)
   117d0:	e0fffc17 	ldw	r3,-16(fp)
   117d4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   117d8:	e0bffc17 	ldw	r2,-16(fp)
   117dc:	10c00017 	ldw	r3,0(r2)
   117e0:	e0bffd17 	ldw	r2,-12(fp)
   117e4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   117e8:	e0bffc17 	ldw	r2,-16(fp)
   117ec:	10800017 	ldw	r2,0(r2)
   117f0:	e0fffd17 	ldw	r3,-12(fp)
   117f4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   117f8:	e0bffc17 	ldw	r2,-16(fp)
   117fc:	e0fffd17 	ldw	r3,-12(fp)
   11800:	10c00015 	stw	r3,0(r2)

  return 0;  
   11804:	0005883a 	mov	r2,zero
}
   11808:	e037883a 	mov	sp,fp
   1180c:	dfc00117 	ldw	ra,4(sp)
   11810:	df000017 	ldw	fp,0(sp)
   11814:	dec00204 	addi	sp,sp,8
   11818:	f800283a 	ret

0001181c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   1181c:	defffd04 	addi	sp,sp,-12
   11820:	dfc00215 	stw	ra,8(sp)
   11824:	df000115 	stw	fp,4(sp)
   11828:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   1182c:	00800074 	movhi	r2,1
   11830:	108a0b04 	addi	r2,r2,10284
   11834:	e0bfff15 	stw	r2,-4(fp)
   11838:	00000606 	br	11854 <_do_ctors+0x38>
        (*ctor) (); 
   1183c:	e0bfff17 	ldw	r2,-4(fp)
   11840:	10800017 	ldw	r2,0(r2)
   11844:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   11848:	e0bfff17 	ldw	r2,-4(fp)
   1184c:	10bfff04 	addi	r2,r2,-4
   11850:	e0bfff15 	stw	r2,-4(fp)
   11854:	e0ffff17 	ldw	r3,-4(fp)
   11858:	00800074 	movhi	r2,1
   1185c:	108a0c04 	addi	r2,r2,10288
   11860:	18bff62e 	bgeu	r3,r2,1183c <__alt_data_end+0xfffbc10c>
        (*ctor) (); 
}
   11864:	e037883a 	mov	sp,fp
   11868:	dfc00117 	ldw	ra,4(sp)
   1186c:	df000017 	ldw	fp,0(sp)
   11870:	dec00204 	addi	sp,sp,8
   11874:	f800283a 	ret

00011878 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   11878:	defffd04 	addi	sp,sp,-12
   1187c:	dfc00215 	stw	ra,8(sp)
   11880:	df000115 	stw	fp,4(sp)
   11884:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   11888:	00800074 	movhi	r2,1
   1188c:	108a0b04 	addi	r2,r2,10284
   11890:	e0bfff15 	stw	r2,-4(fp)
   11894:	00000606 	br	118b0 <_do_dtors+0x38>
        (*dtor) (); 
   11898:	e0bfff17 	ldw	r2,-4(fp)
   1189c:	10800017 	ldw	r2,0(r2)
   118a0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   118a4:	e0bfff17 	ldw	r2,-4(fp)
   118a8:	10bfff04 	addi	r2,r2,-4
   118ac:	e0bfff15 	stw	r2,-4(fp)
   118b0:	e0ffff17 	ldw	r3,-4(fp)
   118b4:	00800074 	movhi	r2,1
   118b8:	108a0c04 	addi	r2,r2,10288
   118bc:	18bff62e 	bgeu	r3,r2,11898 <__alt_data_end+0xfffbc168>
        (*dtor) (); 
}
   118c0:	e037883a 	mov	sp,fp
   118c4:	dfc00117 	ldw	ra,4(sp)
   118c8:	df000017 	ldw	fp,0(sp)
   118cc:	dec00204 	addi	sp,sp,8
   118d0:	f800283a 	ret

000118d4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   118d4:	deffff04 	addi	sp,sp,-4
   118d8:	df000015 	stw	fp,0(sp)
   118dc:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   118e0:	e037883a 	mov	sp,fp
   118e4:	df000017 	ldw	fp,0(sp)
   118e8:	dec00104 	addi	sp,sp,4
   118ec:	f800283a 	ret

000118f0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   118f0:	defff904 	addi	sp,sp,-28
   118f4:	dfc00615 	stw	ra,24(sp)
   118f8:	df000515 	stw	fp,20(sp)
   118fc:	df000504 	addi	fp,sp,20
   11900:	e13ffc15 	stw	r4,-16(fp)
   11904:	e17ffd15 	stw	r5,-12(fp)
   11908:	e1bffe15 	stw	r6,-8(fp)
   1190c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   11910:	e0800217 	ldw	r2,8(fp)
   11914:	d8800015 	stw	r2,0(sp)
   11918:	e13ffc17 	ldw	r4,-16(fp)
   1191c:	e17ffd17 	ldw	r5,-12(fp)
   11920:	e1bffe17 	ldw	r6,-8(fp)
   11924:	e1ffff17 	ldw	r7,-4(fp)
   11928:	0011ad00 	call	11ad0 <alt_iic_isr_register>
}  
   1192c:	e037883a 	mov	sp,fp
   11930:	dfc00117 	ldw	ra,4(sp)
   11934:	df000017 	ldw	fp,0(sp)
   11938:	dec00204 	addi	sp,sp,8
   1193c:	f800283a 	ret

00011940 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   11940:	defff904 	addi	sp,sp,-28
   11944:	df000615 	stw	fp,24(sp)
   11948:	df000604 	addi	fp,sp,24
   1194c:	e13ffe15 	stw	r4,-8(fp)
   11950:	e17fff15 	stw	r5,-4(fp)
   11954:	e0bfff17 	ldw	r2,-4(fp)
   11958:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1195c:	0005303a 	rdctl	r2,status
   11960:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11964:	e0fffb17 	ldw	r3,-20(fp)
   11968:	00bfff84 	movi	r2,-2
   1196c:	1884703a 	and	r2,r3,r2
   11970:	1001703a 	wrctl	status,r2
  
  return context;
   11974:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   11978:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   1197c:	e0bffa17 	ldw	r2,-24(fp)
   11980:	00c00044 	movi	r3,1
   11984:	1884983a 	sll	r2,r3,r2
   11988:	1007883a 	mov	r3,r2
   1198c:	00800074 	movhi	r2,1
   11990:	109a6104 	addi	r2,r2,27012
   11994:	10800017 	ldw	r2,0(r2)
   11998:	1886b03a 	or	r3,r3,r2
   1199c:	00800074 	movhi	r2,1
   119a0:	109a6104 	addi	r2,r2,27012
   119a4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   119a8:	00800074 	movhi	r2,1
   119ac:	109a6104 	addi	r2,r2,27012
   119b0:	10800017 	ldw	r2,0(r2)
   119b4:	100170fa 	wrctl	ienable,r2
   119b8:	e0bffc17 	ldw	r2,-16(fp)
   119bc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   119c0:	e0bffd17 	ldw	r2,-12(fp)
   119c4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   119c8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   119cc:	0001883a 	nop
}
   119d0:	e037883a 	mov	sp,fp
   119d4:	df000017 	ldw	fp,0(sp)
   119d8:	dec00104 	addi	sp,sp,4
   119dc:	f800283a 	ret

000119e0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   119e0:	defff904 	addi	sp,sp,-28
   119e4:	df000615 	stw	fp,24(sp)
   119e8:	df000604 	addi	fp,sp,24
   119ec:	e13ffe15 	stw	r4,-8(fp)
   119f0:	e17fff15 	stw	r5,-4(fp)
   119f4:	e0bfff17 	ldw	r2,-4(fp)
   119f8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   119fc:	0005303a 	rdctl	r2,status
   11a00:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11a04:	e0fffb17 	ldw	r3,-20(fp)
   11a08:	00bfff84 	movi	r2,-2
   11a0c:	1884703a 	and	r2,r3,r2
   11a10:	1001703a 	wrctl	status,r2
  
  return context;
   11a14:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   11a18:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   11a1c:	e0bffa17 	ldw	r2,-24(fp)
   11a20:	00c00044 	movi	r3,1
   11a24:	1884983a 	sll	r2,r3,r2
   11a28:	0084303a 	nor	r2,zero,r2
   11a2c:	1007883a 	mov	r3,r2
   11a30:	00800074 	movhi	r2,1
   11a34:	109a6104 	addi	r2,r2,27012
   11a38:	10800017 	ldw	r2,0(r2)
   11a3c:	1886703a 	and	r3,r3,r2
   11a40:	00800074 	movhi	r2,1
   11a44:	109a6104 	addi	r2,r2,27012
   11a48:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   11a4c:	00800074 	movhi	r2,1
   11a50:	109a6104 	addi	r2,r2,27012
   11a54:	10800017 	ldw	r2,0(r2)
   11a58:	100170fa 	wrctl	ienable,r2
   11a5c:	e0bffc17 	ldw	r2,-16(fp)
   11a60:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11a64:	e0bffd17 	ldw	r2,-12(fp)
   11a68:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   11a6c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   11a70:	0001883a 	nop
}
   11a74:	e037883a 	mov	sp,fp
   11a78:	df000017 	ldw	fp,0(sp)
   11a7c:	dec00104 	addi	sp,sp,4
   11a80:	f800283a 	ret

00011a84 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   11a84:	defffc04 	addi	sp,sp,-16
   11a88:	df000315 	stw	fp,12(sp)
   11a8c:	df000304 	addi	fp,sp,12
   11a90:	e13ffe15 	stw	r4,-8(fp)
   11a94:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   11a98:	000530fa 	rdctl	r2,ienable
   11a9c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   11aa0:	e0bfff17 	ldw	r2,-4(fp)
   11aa4:	00c00044 	movi	r3,1
   11aa8:	1884983a 	sll	r2,r3,r2
   11aac:	1007883a 	mov	r3,r2
   11ab0:	e0bffd17 	ldw	r2,-12(fp)
   11ab4:	1884703a 	and	r2,r3,r2
   11ab8:	1004c03a 	cmpne	r2,r2,zero
   11abc:	10803fcc 	andi	r2,r2,255
}
   11ac0:	e037883a 	mov	sp,fp
   11ac4:	df000017 	ldw	fp,0(sp)
   11ac8:	dec00104 	addi	sp,sp,4
   11acc:	f800283a 	ret

00011ad0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   11ad0:	defff504 	addi	sp,sp,-44
   11ad4:	dfc00a15 	stw	ra,40(sp)
   11ad8:	df000915 	stw	fp,36(sp)
   11adc:	df000904 	addi	fp,sp,36
   11ae0:	e13ffc15 	stw	r4,-16(fp)
   11ae4:	e17ffd15 	stw	r5,-12(fp)
   11ae8:	e1bffe15 	stw	r6,-8(fp)
   11aec:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   11af0:	00bffa84 	movi	r2,-22
   11af4:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   11af8:	e0bffd17 	ldw	r2,-12(fp)
   11afc:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   11b00:	e0bff817 	ldw	r2,-32(fp)
   11b04:	10800808 	cmpgei	r2,r2,32
   11b08:	1000271e 	bne	r2,zero,11ba8 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11b0c:	0005303a 	rdctl	r2,status
   11b10:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11b14:	e0fffa17 	ldw	r3,-24(fp)
   11b18:	00bfff84 	movi	r2,-2
   11b1c:	1884703a 	and	r2,r3,r2
   11b20:	1001703a 	wrctl	status,r2
  
  return context;
   11b24:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   11b28:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   11b2c:	00800074 	movhi	r2,1
   11b30:	109a6f04 	addi	r2,r2,27068
   11b34:	e0fff817 	ldw	r3,-32(fp)
   11b38:	180690fa 	slli	r3,r3,3
   11b3c:	10c5883a 	add	r2,r2,r3
   11b40:	e0fffe17 	ldw	r3,-8(fp)
   11b44:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   11b48:	00800074 	movhi	r2,1
   11b4c:	109a6f04 	addi	r2,r2,27068
   11b50:	e0fff817 	ldw	r3,-32(fp)
   11b54:	180690fa 	slli	r3,r3,3
   11b58:	10c5883a 	add	r2,r2,r3
   11b5c:	10800104 	addi	r2,r2,4
   11b60:	e0ffff17 	ldw	r3,-4(fp)
   11b64:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   11b68:	e0bffe17 	ldw	r2,-8(fp)
   11b6c:	10000526 	beq	r2,zero,11b84 <alt_iic_isr_register+0xb4>
   11b70:	e0bff817 	ldw	r2,-32(fp)
   11b74:	e13ffc17 	ldw	r4,-16(fp)
   11b78:	100b883a 	mov	r5,r2
   11b7c:	00119400 	call	11940 <alt_ic_irq_enable>
   11b80:	00000406 	br	11b94 <alt_iic_isr_register+0xc4>
   11b84:	e0bff817 	ldw	r2,-32(fp)
   11b88:	e13ffc17 	ldw	r4,-16(fp)
   11b8c:	100b883a 	mov	r5,r2
   11b90:	00119e00 	call	119e0 <alt_ic_irq_disable>
   11b94:	e0bff715 	stw	r2,-36(fp)
   11b98:	e0bff917 	ldw	r2,-28(fp)
   11b9c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11ba0:	e0bffb17 	ldw	r2,-20(fp)
   11ba4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   11ba8:	e0bff717 	ldw	r2,-36(fp)
}
   11bac:	e037883a 	mov	sp,fp
   11bb0:	dfc00117 	ldw	ra,4(sp)
   11bb4:	df000017 	ldw	fp,0(sp)
   11bb8:	dec00204 	addi	sp,sp,8
   11bbc:	f800283a 	ret

00011bc0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   11bc0:	defff804 	addi	sp,sp,-32
   11bc4:	dfc00715 	stw	ra,28(sp)
   11bc8:	df000615 	stw	fp,24(sp)
   11bcc:	dc000515 	stw	r16,20(sp)
   11bd0:	df000604 	addi	fp,sp,24
   11bd4:	e13ffb15 	stw	r4,-20(fp)
   11bd8:	e17ffc15 	stw	r5,-16(fp)
   11bdc:	e1bffd15 	stw	r6,-12(fp)
   11be0:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   11be4:	e13ffc17 	ldw	r4,-16(fp)
   11be8:	e17ffd17 	ldw	r5,-12(fp)
   11bec:	e1bffe17 	ldw	r6,-8(fp)
   11bf0:	0011e5c0 	call	11e5c <open>
   11bf4:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   11bf8:	e0bffa17 	ldw	r2,-24(fp)
   11bfc:	10002216 	blt	r2,zero,11c88 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   11c00:	04000074 	movhi	r16,1
   11c04:	840ef104 	addi	r16,r16,15300
   11c08:	e0bffa17 	ldw	r2,-24(fp)
   11c0c:	1009883a 	mov	r4,r2
   11c10:	01400304 	movi	r5,12
   11c14:	000d72c0 	call	d72c <__mulsi3>
   11c18:	8085883a 	add	r2,r16,r2
   11c1c:	10c00017 	ldw	r3,0(r2)
   11c20:	e0bffb17 	ldw	r2,-20(fp)
   11c24:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   11c28:	04000074 	movhi	r16,1
   11c2c:	840ef104 	addi	r16,r16,15300
   11c30:	e0bffa17 	ldw	r2,-24(fp)
   11c34:	1009883a 	mov	r4,r2
   11c38:	01400304 	movi	r5,12
   11c3c:	000d72c0 	call	d72c <__mulsi3>
   11c40:	8085883a 	add	r2,r16,r2
   11c44:	10800104 	addi	r2,r2,4
   11c48:	10c00017 	ldw	r3,0(r2)
   11c4c:	e0bffb17 	ldw	r2,-20(fp)
   11c50:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   11c54:	04000074 	movhi	r16,1
   11c58:	840ef104 	addi	r16,r16,15300
   11c5c:	e0bffa17 	ldw	r2,-24(fp)
   11c60:	1009883a 	mov	r4,r2
   11c64:	01400304 	movi	r5,12
   11c68:	000d72c0 	call	d72c <__mulsi3>
   11c6c:	8085883a 	add	r2,r16,r2
   11c70:	10800204 	addi	r2,r2,8
   11c74:	10c00017 	ldw	r3,0(r2)
   11c78:	e0bffb17 	ldw	r2,-20(fp)
   11c7c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   11c80:	e13ffa17 	ldw	r4,-24(fp)
   11c84:	00106c40 	call	106c4 <alt_release_fd>
  }
} 
   11c88:	e6ffff04 	addi	sp,fp,-4
   11c8c:	dfc00217 	ldw	ra,8(sp)
   11c90:	df000117 	ldw	fp,4(sp)
   11c94:	dc000017 	ldw	r16,0(sp)
   11c98:	dec00304 	addi	sp,sp,12
   11c9c:	f800283a 	ret

00011ca0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   11ca0:	defffb04 	addi	sp,sp,-20
   11ca4:	dfc00415 	stw	ra,16(sp)
   11ca8:	df000315 	stw	fp,12(sp)
   11cac:	df000304 	addi	fp,sp,12
   11cb0:	e13ffd15 	stw	r4,-12(fp)
   11cb4:	e17ffe15 	stw	r5,-8(fp)
   11cb8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   11cbc:	01000074 	movhi	r4,1
   11cc0:	210ef404 	addi	r4,r4,15312
   11cc4:	e17ffd17 	ldw	r5,-12(fp)
   11cc8:	01800044 	movi	r6,1
   11ccc:	01c07fc4 	movi	r7,511
   11cd0:	0011bc00 	call	11bc0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   11cd4:	01000074 	movhi	r4,1
   11cd8:	210ef104 	addi	r4,r4,15300
   11cdc:	e17ffe17 	ldw	r5,-8(fp)
   11ce0:	000d883a 	mov	r6,zero
   11ce4:	01c07fc4 	movi	r7,511
   11ce8:	0011bc00 	call	11bc0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   11cec:	01000074 	movhi	r4,1
   11cf0:	210ef704 	addi	r4,r4,15324
   11cf4:	e17fff17 	ldw	r5,-4(fp)
   11cf8:	01800044 	movi	r6,1
   11cfc:	01c07fc4 	movi	r7,511
   11d00:	0011bc00 	call	11bc0 <alt_open_fd>
}  
   11d04:	e037883a 	mov	sp,fp
   11d08:	dfc00117 	ldw	ra,4(sp)
   11d0c:	df000017 	ldw	fp,0(sp)
   11d10:	dec00204 	addi	sp,sp,8
   11d14:	f800283a 	ret

00011d18 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11d18:	defffe04 	addi	sp,sp,-8
   11d1c:	dfc00115 	stw	ra,4(sp)
   11d20:	df000015 	stw	fp,0(sp)
   11d24:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   11d28:	00800074 	movhi	r2,1
   11d2c:	10937404 	addi	r2,r2,19920
   11d30:	10800017 	ldw	r2,0(r2)
   11d34:	10000526 	beq	r2,zero,11d4c <alt_get_errno+0x34>
   11d38:	00800074 	movhi	r2,1
   11d3c:	10937404 	addi	r2,r2,19920
   11d40:	10800017 	ldw	r2,0(r2)
   11d44:	103ee83a 	callr	r2
   11d48:	00000206 	br	11d54 <alt_get_errno+0x3c>
   11d4c:	00800074 	movhi	r2,1
   11d50:	109a5a04 	addi	r2,r2,26984
}
   11d54:	e037883a 	mov	sp,fp
   11d58:	dfc00117 	ldw	ra,4(sp)
   11d5c:	df000017 	ldw	fp,0(sp)
   11d60:	dec00204 	addi	sp,sp,8
   11d64:	f800283a 	ret

00011d68 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   11d68:	defffb04 	addi	sp,sp,-20
   11d6c:	dfc00415 	stw	ra,16(sp)
   11d70:	df000315 	stw	fp,12(sp)
   11d74:	dc000215 	stw	r16,8(sp)
   11d78:	df000304 	addi	fp,sp,12
   11d7c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   11d80:	e0bffe17 	ldw	r2,-8(fp)
   11d84:	10800217 	ldw	r2,8(r2)
   11d88:	10d00034 	orhi	r3,r2,16384
   11d8c:	e0bffe17 	ldw	r2,-8(fp)
   11d90:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   11d94:	e03ffd15 	stw	zero,-12(fp)
   11d98:	00002306 	br	11e28 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   11d9c:	04000074 	movhi	r16,1
   11da0:	840ef104 	addi	r16,r16,15300
   11da4:	e0bffd17 	ldw	r2,-12(fp)
   11da8:	1009883a 	mov	r4,r2
   11dac:	01400304 	movi	r5,12
   11db0:	000d72c0 	call	d72c <__mulsi3>
   11db4:	8085883a 	add	r2,r16,r2
   11db8:	10c00017 	ldw	r3,0(r2)
   11dbc:	e0bffe17 	ldw	r2,-8(fp)
   11dc0:	10800017 	ldw	r2,0(r2)
   11dc4:	1880151e 	bne	r3,r2,11e1c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   11dc8:	04000074 	movhi	r16,1
   11dcc:	840ef104 	addi	r16,r16,15300
   11dd0:	e0bffd17 	ldw	r2,-12(fp)
   11dd4:	1009883a 	mov	r4,r2
   11dd8:	01400304 	movi	r5,12
   11ddc:	000d72c0 	call	d72c <__mulsi3>
   11de0:	8085883a 	add	r2,r16,r2
   11de4:	10800204 	addi	r2,r2,8
   11de8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   11dec:	10000b0e 	bge	r2,zero,11e1c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   11df0:	e13ffd17 	ldw	r4,-12(fp)
   11df4:	01400304 	movi	r5,12
   11df8:	000d72c0 	call	d72c <__mulsi3>
   11dfc:	1007883a 	mov	r3,r2
   11e00:	00800074 	movhi	r2,1
   11e04:	108ef104 	addi	r2,r2,15300
   11e08:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   11e0c:	e0bffe17 	ldw	r2,-8(fp)
   11e10:	18800226 	beq	r3,r2,11e1c <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   11e14:	00bffcc4 	movi	r2,-13
   11e18:	00000a06 	br	11e44 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   11e1c:	e0bffd17 	ldw	r2,-12(fp)
   11e20:	10800044 	addi	r2,r2,1
   11e24:	e0bffd15 	stw	r2,-12(fp)
   11e28:	00800074 	movhi	r2,1
   11e2c:	10937304 	addi	r2,r2,19916
   11e30:	10800017 	ldw	r2,0(r2)
   11e34:	1007883a 	mov	r3,r2
   11e38:	e0bffd17 	ldw	r2,-12(fp)
   11e3c:	18bfd72e 	bgeu	r3,r2,11d9c <__alt_data_end+0xfffbc66c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   11e40:	0005883a 	mov	r2,zero
}
   11e44:	e6ffff04 	addi	sp,fp,-4
   11e48:	dfc00217 	ldw	ra,8(sp)
   11e4c:	df000117 	ldw	fp,4(sp)
   11e50:	dc000017 	ldw	r16,0(sp)
   11e54:	dec00304 	addi	sp,sp,12
   11e58:	f800283a 	ret

00011e5c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   11e5c:	defff604 	addi	sp,sp,-40
   11e60:	dfc00915 	stw	ra,36(sp)
   11e64:	df000815 	stw	fp,32(sp)
   11e68:	df000804 	addi	fp,sp,32
   11e6c:	e13ffd15 	stw	r4,-12(fp)
   11e70:	e17ffe15 	stw	r5,-8(fp)
   11e74:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   11e78:	00bfffc4 	movi	r2,-1
   11e7c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   11e80:	00bffb44 	movi	r2,-19
   11e84:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   11e88:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   11e8c:	e13ffd17 	ldw	r4,-12(fp)
   11e90:	01400074 	movhi	r5,1
   11e94:	29537104 	addi	r5,r5,19908
   11e98:	00121780 	call	12178 <alt_find_dev>
   11e9c:	e0bff815 	stw	r2,-32(fp)
   11ea0:	e0bff817 	ldw	r2,-32(fp)
   11ea4:	1000051e 	bne	r2,zero,11ebc <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   11ea8:	e13ffd17 	ldw	r4,-12(fp)
   11eac:	00122080 	call	12208 <alt_find_file>
   11eb0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   11eb4:	00800044 	movi	r2,1
   11eb8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   11ebc:	e0bff817 	ldw	r2,-32(fp)
   11ec0:	10002b26 	beq	r2,zero,11f70 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
   11ec4:	e13ff817 	ldw	r4,-32(fp)
   11ec8:	001231c0 	call	1231c <alt_get_fd>
   11ecc:	e0bff915 	stw	r2,-28(fp)
   11ed0:	e0bff917 	ldw	r2,-28(fp)
   11ed4:	1000030e 	bge	r2,zero,11ee4 <open+0x88>
    {
      status = index;
   11ed8:	e0bff917 	ldw	r2,-28(fp)
   11edc:	e0bffa15 	stw	r2,-24(fp)
   11ee0:	00002506 	br	11f78 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
   11ee4:	e13ff917 	ldw	r4,-28(fp)
   11ee8:	01400304 	movi	r5,12
   11eec:	000d72c0 	call	d72c <__mulsi3>
   11ef0:	1007883a 	mov	r3,r2
   11ef4:	00800074 	movhi	r2,1
   11ef8:	108ef104 	addi	r2,r2,15300
   11efc:	1885883a 	add	r2,r3,r2
   11f00:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   11f04:	e0fffe17 	ldw	r3,-8(fp)
   11f08:	00900034 	movhi	r2,16384
   11f0c:	10bfffc4 	addi	r2,r2,-1
   11f10:	1886703a 	and	r3,r3,r2
   11f14:	e0bffc17 	ldw	r2,-16(fp)
   11f18:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   11f1c:	e0bffb17 	ldw	r2,-20(fp)
   11f20:	1000051e 	bne	r2,zero,11f38 <open+0xdc>
   11f24:	e13ffc17 	ldw	r4,-16(fp)
   11f28:	0011d680 	call	11d68 <alt_file_locked>
   11f2c:	e0bffa15 	stw	r2,-24(fp)
   11f30:	e0bffa17 	ldw	r2,-24(fp)
   11f34:	10001016 	blt	r2,zero,11f78 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   11f38:	e0bff817 	ldw	r2,-32(fp)
   11f3c:	10800317 	ldw	r2,12(r2)
   11f40:	10000826 	beq	r2,zero,11f64 <open+0x108>
   11f44:	e0bff817 	ldw	r2,-32(fp)
   11f48:	10800317 	ldw	r2,12(r2)
   11f4c:	e13ffc17 	ldw	r4,-16(fp)
   11f50:	e17ffd17 	ldw	r5,-12(fp)
   11f54:	e1bffe17 	ldw	r6,-8(fp)
   11f58:	e1ffff17 	ldw	r7,-4(fp)
   11f5c:	103ee83a 	callr	r2
   11f60:	00000106 	br	11f68 <open+0x10c>
   11f64:	0005883a 	mov	r2,zero
   11f68:	e0bffa15 	stw	r2,-24(fp)
   11f6c:	00000206 	br	11f78 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   11f70:	00bffb44 	movi	r2,-19
   11f74:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   11f78:	e0bffa17 	ldw	r2,-24(fp)
   11f7c:	1000090e 	bge	r2,zero,11fa4 <open+0x148>
  {
    alt_release_fd (index);  
   11f80:	e13ff917 	ldw	r4,-28(fp)
   11f84:	00106c40 	call	106c4 <alt_release_fd>
    ALT_ERRNO = -status;
   11f88:	0011d180 	call	11d18 <alt_get_errno>
   11f8c:	1007883a 	mov	r3,r2
   11f90:	e0bffa17 	ldw	r2,-24(fp)
   11f94:	0085c83a 	sub	r2,zero,r2
   11f98:	18800015 	stw	r2,0(r3)
    return -1;
   11f9c:	00bfffc4 	movi	r2,-1
   11fa0:	00000106 	br	11fa8 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
   11fa4:	e0bff917 	ldw	r2,-28(fp)
}
   11fa8:	e037883a 	mov	sp,fp
   11fac:	dfc00117 	ldw	ra,4(sp)
   11fb0:	df000017 	ldw	fp,0(sp)
   11fb4:	dec00204 	addi	sp,sp,8
   11fb8:	f800283a 	ret

00011fbc <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   11fbc:	defffa04 	addi	sp,sp,-24
   11fc0:	df000515 	stw	fp,20(sp)
   11fc4:	df000504 	addi	fp,sp,20
   11fc8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11fcc:	0005303a 	rdctl	r2,status
   11fd0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11fd4:	e0fffc17 	ldw	r3,-16(fp)
   11fd8:	00bfff84 	movi	r2,-2
   11fdc:	1884703a 	and	r2,r3,r2
   11fe0:	1001703a 	wrctl	status,r2
  
  return context;
   11fe4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   11fe8:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   11fec:	e0bfff17 	ldw	r2,-4(fp)
   11ff0:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   11ff4:	e0bffd17 	ldw	r2,-12(fp)
   11ff8:	10800017 	ldw	r2,0(r2)
   11ffc:	e0fffd17 	ldw	r3,-12(fp)
   12000:	18c00117 	ldw	r3,4(r3)
   12004:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   12008:	e0bffd17 	ldw	r2,-12(fp)
   1200c:	10800117 	ldw	r2,4(r2)
   12010:	e0fffd17 	ldw	r3,-12(fp)
   12014:	18c00017 	ldw	r3,0(r3)
   12018:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   1201c:	e0bffd17 	ldw	r2,-12(fp)
   12020:	e0fffd17 	ldw	r3,-12(fp)
   12024:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   12028:	e0bffd17 	ldw	r2,-12(fp)
   1202c:	e0fffd17 	ldw	r3,-12(fp)
   12030:	10c00015 	stw	r3,0(r2)
   12034:	e0bffb17 	ldw	r2,-20(fp)
   12038:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1203c:	e0bffe17 	ldw	r2,-8(fp)
   12040:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   12044:	e037883a 	mov	sp,fp
   12048:	df000017 	ldw	fp,0(sp)
   1204c:	dec00104 	addi	sp,sp,4
   12050:	f800283a 	ret

00012054 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   12054:	defffb04 	addi	sp,sp,-20
   12058:	dfc00415 	stw	ra,16(sp)
   1205c:	df000315 	stw	fp,12(sp)
   12060:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   12064:	d0a00e17 	ldw	r2,-32712(gp)
   12068:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   1206c:	d0a6fa17 	ldw	r2,-25624(gp)
   12070:	10800044 	addi	r2,r2,1
   12074:	d0a6fa15 	stw	r2,-25624(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   12078:	00002e06 	br	12134 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   1207c:	e0bffd17 	ldw	r2,-12(fp)
   12080:	10800017 	ldw	r2,0(r2)
   12084:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   12088:	e0bffd17 	ldw	r2,-12(fp)
   1208c:	10800403 	ldbu	r2,16(r2)
   12090:	10803fcc 	andi	r2,r2,255
   12094:	10000426 	beq	r2,zero,120a8 <alt_tick+0x54>
   12098:	d0a6fa17 	ldw	r2,-25624(gp)
   1209c:	1000021e 	bne	r2,zero,120a8 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   120a0:	e0bffd17 	ldw	r2,-12(fp)
   120a4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   120a8:	e0bffd17 	ldw	r2,-12(fp)
   120ac:	10800217 	ldw	r2,8(r2)
   120b0:	d0e6fa17 	ldw	r3,-25624(gp)
   120b4:	18801d36 	bltu	r3,r2,1212c <alt_tick+0xd8>
   120b8:	e0bffd17 	ldw	r2,-12(fp)
   120bc:	10800403 	ldbu	r2,16(r2)
   120c0:	10803fcc 	andi	r2,r2,255
   120c4:	1000191e 	bne	r2,zero,1212c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   120c8:	e0bffd17 	ldw	r2,-12(fp)
   120cc:	10800317 	ldw	r2,12(r2)
   120d0:	e0fffd17 	ldw	r3,-12(fp)
   120d4:	18c00517 	ldw	r3,20(r3)
   120d8:	1809883a 	mov	r4,r3
   120dc:	103ee83a 	callr	r2
   120e0:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   120e4:	e0bfff17 	ldw	r2,-4(fp)
   120e8:	1000031e 	bne	r2,zero,120f8 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   120ec:	e13ffd17 	ldw	r4,-12(fp)
   120f0:	0011fbc0 	call	11fbc <alt_alarm_stop>
   120f4:	00000d06 	br	1212c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   120f8:	e0bffd17 	ldw	r2,-12(fp)
   120fc:	10c00217 	ldw	r3,8(r2)
   12100:	e0bfff17 	ldw	r2,-4(fp)
   12104:	1887883a 	add	r3,r3,r2
   12108:	e0bffd17 	ldw	r2,-12(fp)
   1210c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   12110:	e0bffd17 	ldw	r2,-12(fp)
   12114:	10c00217 	ldw	r3,8(r2)
   12118:	d0a6fa17 	ldw	r2,-25624(gp)
   1211c:	1880032e 	bgeu	r3,r2,1212c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   12120:	e0bffd17 	ldw	r2,-12(fp)
   12124:	00c00044 	movi	r3,1
   12128:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   1212c:	e0bffe17 	ldw	r2,-8(fp)
   12130:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   12134:	e0fffd17 	ldw	r3,-12(fp)
   12138:	d0a00e04 	addi	r2,gp,-32712
   1213c:	18bfcf1e 	bne	r3,r2,1207c <__alt_data_end+0xfffbc94c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   12140:	0001883a 	nop
}
   12144:	e037883a 	mov	sp,fp
   12148:	dfc00117 	ldw	ra,4(sp)
   1214c:	df000017 	ldw	fp,0(sp)
   12150:	dec00204 	addi	sp,sp,8
   12154:	f800283a 	ret

00012158 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   12158:	deffff04 	addi	sp,sp,-4
   1215c:	df000015 	stw	fp,0(sp)
   12160:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   12164:	000170fa 	wrctl	ienable,zero
}
   12168:	e037883a 	mov	sp,fp
   1216c:	df000017 	ldw	fp,0(sp)
   12170:	dec00104 	addi	sp,sp,4
   12174:	f800283a 	ret

00012178 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   12178:	defffa04 	addi	sp,sp,-24
   1217c:	dfc00515 	stw	ra,20(sp)
   12180:	df000415 	stw	fp,16(sp)
   12184:	df000404 	addi	fp,sp,16
   12188:	e13ffe15 	stw	r4,-8(fp)
   1218c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   12190:	e0bfff17 	ldw	r2,-4(fp)
   12194:	10800017 	ldw	r2,0(r2)
   12198:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   1219c:	e13ffe17 	ldw	r4,-8(fp)
   121a0:	0003f3c0 	call	3f3c <strlen>
   121a4:	10800044 	addi	r2,r2,1
   121a8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   121ac:	00000d06 	br	121e4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   121b0:	e0bffc17 	ldw	r2,-16(fp)
   121b4:	10c00217 	ldw	r3,8(r2)
   121b8:	e0bffd17 	ldw	r2,-12(fp)
   121bc:	1809883a 	mov	r4,r3
   121c0:	e17ffe17 	ldw	r5,-8(fp)
   121c4:	100d883a 	mov	r6,r2
   121c8:	00124d80 	call	124d8 <memcmp>
   121cc:	1000021e 	bne	r2,zero,121d8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   121d0:	e0bffc17 	ldw	r2,-16(fp)
   121d4:	00000706 	br	121f4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   121d8:	e0bffc17 	ldw	r2,-16(fp)
   121dc:	10800017 	ldw	r2,0(r2)
   121e0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   121e4:	e0fffc17 	ldw	r3,-16(fp)
   121e8:	e0bfff17 	ldw	r2,-4(fp)
   121ec:	18bff01e 	bne	r3,r2,121b0 <__alt_data_end+0xfffbca80>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   121f0:	0005883a 	mov	r2,zero
}
   121f4:	e037883a 	mov	sp,fp
   121f8:	dfc00117 	ldw	ra,4(sp)
   121fc:	df000017 	ldw	fp,0(sp)
   12200:	dec00204 	addi	sp,sp,8
   12204:	f800283a 	ret

00012208 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   12208:	defffb04 	addi	sp,sp,-20
   1220c:	dfc00415 	stw	ra,16(sp)
   12210:	df000315 	stw	fp,12(sp)
   12214:	df000304 	addi	fp,sp,12
   12218:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   1221c:	00800074 	movhi	r2,1
   12220:	10936f04 	addi	r2,r2,19900
   12224:	10800017 	ldw	r2,0(r2)
   12228:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1222c:	00003106 	br	122f4 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   12230:	e0bffd17 	ldw	r2,-12(fp)
   12234:	10800217 	ldw	r2,8(r2)
   12238:	1009883a 	mov	r4,r2
   1223c:	0003f3c0 	call	3f3c <strlen>
   12240:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   12244:	e0bffd17 	ldw	r2,-12(fp)
   12248:	10c00217 	ldw	r3,8(r2)
   1224c:	e0bffe17 	ldw	r2,-8(fp)
   12250:	10bfffc4 	addi	r2,r2,-1
   12254:	1885883a 	add	r2,r3,r2
   12258:	10800003 	ldbu	r2,0(r2)
   1225c:	10803fcc 	andi	r2,r2,255
   12260:	1080201c 	xori	r2,r2,128
   12264:	10bfe004 	addi	r2,r2,-128
   12268:	10800bd8 	cmpnei	r2,r2,47
   1226c:	1000031e 	bne	r2,zero,1227c <alt_find_file+0x74>
    {
      len -= 1;
   12270:	e0bffe17 	ldw	r2,-8(fp)
   12274:	10bfffc4 	addi	r2,r2,-1
   12278:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   1227c:	e0bffe17 	ldw	r2,-8(fp)
   12280:	e0ffff17 	ldw	r3,-4(fp)
   12284:	1885883a 	add	r2,r3,r2
   12288:	10800003 	ldbu	r2,0(r2)
   1228c:	10803fcc 	andi	r2,r2,255
   12290:	1080201c 	xori	r2,r2,128
   12294:	10bfe004 	addi	r2,r2,-128
   12298:	10800be0 	cmpeqi	r2,r2,47
   1229c:	1000081e 	bne	r2,zero,122c0 <alt_find_file+0xb8>
   122a0:	e0bffe17 	ldw	r2,-8(fp)
   122a4:	e0ffff17 	ldw	r3,-4(fp)
   122a8:	1885883a 	add	r2,r3,r2
   122ac:	10800003 	ldbu	r2,0(r2)
   122b0:	10803fcc 	andi	r2,r2,255
   122b4:	1080201c 	xori	r2,r2,128
   122b8:	10bfe004 	addi	r2,r2,-128
   122bc:	10000a1e 	bne	r2,zero,122e8 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   122c0:	e0bffd17 	ldw	r2,-12(fp)
   122c4:	10c00217 	ldw	r3,8(r2)
   122c8:	e0bffe17 	ldw	r2,-8(fp)
   122cc:	1809883a 	mov	r4,r3
   122d0:	e17fff17 	ldw	r5,-4(fp)
   122d4:	100d883a 	mov	r6,r2
   122d8:	00124d80 	call	124d8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   122dc:	1000021e 	bne	r2,zero,122e8 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   122e0:	e0bffd17 	ldw	r2,-12(fp)
   122e4:	00000806 	br	12308 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   122e8:	e0bffd17 	ldw	r2,-12(fp)
   122ec:	10800017 	ldw	r2,0(r2)
   122f0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   122f4:	e0fffd17 	ldw	r3,-12(fp)
   122f8:	00800074 	movhi	r2,1
   122fc:	10936f04 	addi	r2,r2,19900
   12300:	18bfcb1e 	bne	r3,r2,12230 <__alt_data_end+0xfffbcb00>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   12304:	0005883a 	mov	r2,zero
}
   12308:	e037883a 	mov	sp,fp
   1230c:	dfc00117 	ldw	ra,4(sp)
   12310:	df000017 	ldw	fp,0(sp)
   12314:	dec00204 	addi	sp,sp,8
   12318:	f800283a 	ret

0001231c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   1231c:	defffa04 	addi	sp,sp,-24
   12320:	dfc00515 	stw	ra,20(sp)
   12324:	df000415 	stw	fp,16(sp)
   12328:	dc000315 	stw	r16,12(sp)
   1232c:	df000404 	addi	fp,sp,16
   12330:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   12334:	00bffa04 	movi	r2,-24
   12338:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1233c:	e03ffc15 	stw	zero,-16(fp)
   12340:	00002106 	br	123c8 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   12344:	04000074 	movhi	r16,1
   12348:	840ef104 	addi	r16,r16,15300
   1234c:	e0bffc17 	ldw	r2,-16(fp)
   12350:	1009883a 	mov	r4,r2
   12354:	01400304 	movi	r5,12
   12358:	000d72c0 	call	d72c <__mulsi3>
   1235c:	8085883a 	add	r2,r16,r2
   12360:	10800017 	ldw	r2,0(r2)
   12364:	1000151e 	bne	r2,zero,123bc <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   12368:	04000074 	movhi	r16,1
   1236c:	840ef104 	addi	r16,r16,15300
   12370:	e0bffc17 	ldw	r2,-16(fp)
   12374:	1009883a 	mov	r4,r2
   12378:	01400304 	movi	r5,12
   1237c:	000d72c0 	call	d72c <__mulsi3>
   12380:	8085883a 	add	r2,r16,r2
   12384:	e0fffe17 	ldw	r3,-8(fp)
   12388:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   1238c:	00800074 	movhi	r2,1
   12390:	10937304 	addi	r2,r2,19916
   12394:	10c00017 	ldw	r3,0(r2)
   12398:	e0bffc17 	ldw	r2,-16(fp)
   1239c:	1880040e 	bge	r3,r2,123b0 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   123a0:	00800074 	movhi	r2,1
   123a4:	10937304 	addi	r2,r2,19916
   123a8:	e0fffc17 	ldw	r3,-16(fp)
   123ac:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   123b0:	e0bffc17 	ldw	r2,-16(fp)
   123b4:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   123b8:	00000606 	br	123d4 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   123bc:	e0bffc17 	ldw	r2,-16(fp)
   123c0:	10800044 	addi	r2,r2,1
   123c4:	e0bffc15 	stw	r2,-16(fp)
   123c8:	e0bffc17 	ldw	r2,-16(fp)
   123cc:	10800810 	cmplti	r2,r2,32
   123d0:	103fdc1e 	bne	r2,zero,12344 <__alt_data_end+0xfffbcc14>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   123d4:	e0bffd17 	ldw	r2,-12(fp)
}
   123d8:	e6ffff04 	addi	sp,fp,-4
   123dc:	dfc00217 	ldw	ra,8(sp)
   123e0:	df000117 	ldw	fp,4(sp)
   123e4:	dc000017 	ldw	r16,0(sp)
   123e8:	dec00304 	addi	sp,sp,12
   123ec:	f800283a 	ret

000123f0 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   123f0:	defffe04 	addi	sp,sp,-8
   123f4:	df000115 	stw	fp,4(sp)
   123f8:	df000104 	addi	fp,sp,4
   123fc:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   12400:	e0bfff17 	ldw	r2,-4(fp)
   12404:	10bffe84 	addi	r2,r2,-6
   12408:	10c00428 	cmpgeui	r3,r2,16
   1240c:	18001a1e 	bne	r3,zero,12478 <alt_exception_cause_generated_bad_addr+0x88>
   12410:	100690ba 	slli	r3,r2,2
   12414:	00800074 	movhi	r2,1
   12418:	10890a04 	addi	r2,r2,9256
   1241c:	1885883a 	add	r2,r3,r2
   12420:	10800017 	ldw	r2,0(r2)
   12424:	1000683a 	jmp	r2
   12428:	00012468 	cmpgeui	zero,zero,1169
   1242c:	00012468 	cmpgeui	zero,zero,1169
   12430:	00012478 	rdprs	zero,zero,1169
   12434:	00012478 	rdprs	zero,zero,1169
   12438:	00012478 	rdprs	zero,zero,1169
   1243c:	00012468 	cmpgeui	zero,zero,1169
   12440:	00012470 	cmpltui	zero,zero,1169
   12444:	00012478 	rdprs	zero,zero,1169
   12448:	00012468 	cmpgeui	zero,zero,1169
   1244c:	00012468 	cmpgeui	zero,zero,1169
   12450:	00012478 	rdprs	zero,zero,1169
   12454:	00012468 	cmpgeui	zero,zero,1169
   12458:	00012470 	cmpltui	zero,zero,1169
   1245c:	00012478 	rdprs	zero,zero,1169
   12460:	00012478 	rdprs	zero,zero,1169
   12464:	00012468 	cmpgeui	zero,zero,1169
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   12468:	00800044 	movi	r2,1
   1246c:	00000306 	br	1247c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   12470:	0005883a 	mov	r2,zero
   12474:	00000106 	br	1247c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   12478:	0005883a 	mov	r2,zero
  }
}
   1247c:	e037883a 	mov	sp,fp
   12480:	df000017 	ldw	fp,0(sp)
   12484:	dec00104 	addi	sp,sp,4
   12488:	f800283a 	ret

0001248c <atexit>:
   1248c:	200b883a 	mov	r5,r4
   12490:	000d883a 	mov	r6,zero
   12494:	0009883a 	mov	r4,zero
   12498:	000f883a 	mov	r7,zero
   1249c:	00125541 	jmpi	12554 <__register_exitproc>

000124a0 <exit>:
   124a0:	defffe04 	addi	sp,sp,-8
   124a4:	000b883a 	mov	r5,zero
   124a8:	dc000015 	stw	r16,0(sp)
   124ac:	dfc00115 	stw	ra,4(sp)
   124b0:	2021883a 	mov	r16,r4
   124b4:	00126680 	call	12668 <__call_exitprocs>
   124b8:	00800074 	movhi	r2,1
   124bc:	10936b04 	addi	r2,r2,19884
   124c0:	11000017 	ldw	r4,0(r2)
   124c4:	20800f17 	ldw	r2,60(r4)
   124c8:	10000126 	beq	r2,zero,124d0 <exit+0x30>
   124cc:	103ee83a 	callr	r2
   124d0:	8009883a 	mov	r4,r16
   124d4:	00127fc0 	call	127fc <_exit>

000124d8 <memcmp>:
   124d8:	01c000c4 	movi	r7,3
   124dc:	3980192e 	bgeu	r7,r6,12544 <memcmp+0x6c>
   124e0:	2144b03a 	or	r2,r4,r5
   124e4:	11c4703a 	and	r2,r2,r7
   124e8:	10000f26 	beq	r2,zero,12528 <memcmp+0x50>
   124ec:	20800003 	ldbu	r2,0(r4)
   124f0:	28c00003 	ldbu	r3,0(r5)
   124f4:	10c0151e 	bne	r2,r3,1254c <memcmp+0x74>
   124f8:	31bfff84 	addi	r6,r6,-2
   124fc:	01ffffc4 	movi	r7,-1
   12500:	00000406 	br	12514 <memcmp+0x3c>
   12504:	20800003 	ldbu	r2,0(r4)
   12508:	28c00003 	ldbu	r3,0(r5)
   1250c:	31bfffc4 	addi	r6,r6,-1
   12510:	10c00e1e 	bne	r2,r3,1254c <memcmp+0x74>
   12514:	21000044 	addi	r4,r4,1
   12518:	29400044 	addi	r5,r5,1
   1251c:	31fff91e 	bne	r6,r7,12504 <__alt_data_end+0xfffbcdd4>
   12520:	0005883a 	mov	r2,zero
   12524:	f800283a 	ret
   12528:	20c00017 	ldw	r3,0(r4)
   1252c:	28800017 	ldw	r2,0(r5)
   12530:	1880041e 	bne	r3,r2,12544 <memcmp+0x6c>
   12534:	31bfff04 	addi	r6,r6,-4
   12538:	21000104 	addi	r4,r4,4
   1253c:	29400104 	addi	r5,r5,4
   12540:	39bff936 	bltu	r7,r6,12528 <__alt_data_end+0xfffbcdf8>
   12544:	303fe91e 	bne	r6,zero,124ec <__alt_data_end+0xfffbcdbc>
   12548:	003ff506 	br	12520 <__alt_data_end+0xfffbcdf0>
   1254c:	10c5c83a 	sub	r2,r2,r3
   12550:	f800283a 	ret

00012554 <__register_exitproc>:
   12554:	00800074 	movhi	r2,1
   12558:	defffa04 	addi	sp,sp,-24
   1255c:	10936b04 	addi	r2,r2,19884
   12560:	dc000315 	stw	r16,12(sp)
   12564:	14000017 	ldw	r16,0(r2)
   12568:	dc400415 	stw	r17,16(sp)
   1256c:	dfc00515 	stw	ra,20(sp)
   12570:	80805217 	ldw	r2,328(r16)
   12574:	2023883a 	mov	r17,r4
   12578:	10003626 	beq	r2,zero,12654 <__register_exitproc+0x100>
   1257c:	10c00117 	ldw	r3,4(r2)
   12580:	010007c4 	movi	r4,31
   12584:	20c00e16 	blt	r4,r3,125c0 <__register_exitproc+0x6c>
   12588:	1a400044 	addi	r9,r3,1
   1258c:	8800211e 	bne	r17,zero,12614 <__register_exitproc+0xc0>
   12590:	18c00084 	addi	r3,r3,2
   12594:	18c7883a 	add	r3,r3,r3
   12598:	18c7883a 	add	r3,r3,r3
   1259c:	12400115 	stw	r9,4(r2)
   125a0:	10c7883a 	add	r3,r2,r3
   125a4:	19400015 	stw	r5,0(r3)
   125a8:	0005883a 	mov	r2,zero
   125ac:	dfc00517 	ldw	ra,20(sp)
   125b0:	dc400417 	ldw	r17,16(sp)
   125b4:	dc000317 	ldw	r16,12(sp)
   125b8:	dec00604 	addi	sp,sp,24
   125bc:	f800283a 	ret
   125c0:	00800034 	movhi	r2,0
   125c4:	108d5a04 	addi	r2,r2,13672
   125c8:	10002526 	beq	r2,zero,12660 <__register_exitproc+0x10c>
   125cc:	01006404 	movi	r4,400
   125d0:	d9400015 	stw	r5,0(sp)
   125d4:	d9800115 	stw	r6,4(sp)
   125d8:	d9c00215 	stw	r7,8(sp)
   125dc:	00035680 	call	3568 <malloc>
   125e0:	d9400017 	ldw	r5,0(sp)
   125e4:	d9800117 	ldw	r6,4(sp)
   125e8:	d9c00217 	ldw	r7,8(sp)
   125ec:	10001c26 	beq	r2,zero,12660 <__register_exitproc+0x10c>
   125f0:	80c05217 	ldw	r3,328(r16)
   125f4:	10000115 	stw	zero,4(r2)
   125f8:	02400044 	movi	r9,1
   125fc:	10c00015 	stw	r3,0(r2)
   12600:	80805215 	stw	r2,328(r16)
   12604:	10006215 	stw	zero,392(r2)
   12608:	10006315 	stw	zero,396(r2)
   1260c:	0007883a 	mov	r3,zero
   12610:	883fdf26 	beq	r17,zero,12590 <__alt_data_end+0xfffbce60>
   12614:	18d1883a 	add	r8,r3,r3
   12618:	4211883a 	add	r8,r8,r8
   1261c:	1211883a 	add	r8,r2,r8
   12620:	41802215 	stw	r6,136(r8)
   12624:	01000044 	movi	r4,1
   12628:	11806217 	ldw	r6,392(r2)
   1262c:	20c8983a 	sll	r4,r4,r3
   12630:	310cb03a 	or	r6,r6,r4
   12634:	11806215 	stw	r6,392(r2)
   12638:	41c04215 	stw	r7,264(r8)
   1263c:	01800084 	movi	r6,2
   12640:	89bfd31e 	bne	r17,r6,12590 <__alt_data_end+0xfffbce60>
   12644:	11806317 	ldw	r6,396(r2)
   12648:	3108b03a 	or	r4,r6,r4
   1264c:	11006315 	stw	r4,396(r2)
   12650:	003fcf06 	br	12590 <__alt_data_end+0xfffbce60>
   12654:	80805304 	addi	r2,r16,332
   12658:	80805215 	stw	r2,328(r16)
   1265c:	003fc706 	br	1257c <__alt_data_end+0xfffbce4c>
   12660:	00bfffc4 	movi	r2,-1
   12664:	003fd106 	br	125ac <__alt_data_end+0xfffbce7c>

00012668 <__call_exitprocs>:
   12668:	00800074 	movhi	r2,1
   1266c:	10936b04 	addi	r2,r2,19884
   12670:	10800017 	ldw	r2,0(r2)
   12674:	defff404 	addi	sp,sp,-48
   12678:	dd800815 	stw	r22,32(sp)
   1267c:	d8800015 	stw	r2,0(sp)
   12680:	10805204 	addi	r2,r2,328
   12684:	dd000615 	stw	r20,24(sp)
   12688:	dc800415 	stw	r18,16(sp)
   1268c:	dfc00b15 	stw	ra,44(sp)
   12690:	df000a15 	stw	fp,40(sp)
   12694:	ddc00915 	stw	r23,36(sp)
   12698:	dd400715 	stw	r21,28(sp)
   1269c:	dcc00515 	stw	r19,20(sp)
   126a0:	dc400315 	stw	r17,12(sp)
   126a4:	dc000215 	stw	r16,8(sp)
   126a8:	2025883a 	mov	r18,r4
   126ac:	2829883a 	mov	r20,r5
   126b0:	d8800115 	stw	r2,4(sp)
   126b4:	05bfffc4 	movi	r22,-1
   126b8:	d8800017 	ldw	r2,0(sp)
   126bc:	14c05217 	ldw	r19,328(r2)
   126c0:	98001d26 	beq	r19,zero,12738 <__call_exitprocs+0xd0>
   126c4:	dd400117 	ldw	r21,4(sp)
   126c8:	98800117 	ldw	r2,4(r19)
   126cc:	173fffc4 	addi	fp,r2,-1
   126d0:	e0000d16 	blt	fp,zero,12708 <__call_exitprocs+0xa0>
   126d4:	14000044 	addi	r16,r2,1
   126d8:	8421883a 	add	r16,r16,r16
   126dc:	8421883a 	add	r16,r16,r16
   126e0:	84402004 	addi	r17,r16,128
   126e4:	9c63883a 	add	r17,r19,r17
   126e8:	9c21883a 	add	r16,r19,r16
   126ec:	a0001e26 	beq	r20,zero,12768 <__call_exitprocs+0x100>
   126f0:	80804017 	ldw	r2,256(r16)
   126f4:	15001c26 	beq	r2,r20,12768 <__call_exitprocs+0x100>
   126f8:	e73fffc4 	addi	fp,fp,-1
   126fc:	843fff04 	addi	r16,r16,-4
   12700:	8c7fff04 	addi	r17,r17,-4
   12704:	e5bff91e 	bne	fp,r22,126ec <__alt_data_end+0xfffbcfbc>
   12708:	00800034 	movhi	r2,0
   1270c:	108d5f04 	addi	r2,r2,13692
   12710:	10000926 	beq	r2,zero,12738 <__call_exitprocs+0xd0>
   12714:	98800117 	ldw	r2,4(r19)
   12718:	1000311e 	bne	r2,zero,127e0 <__call_exitprocs+0x178>
   1271c:	98800017 	ldw	r2,0(r19)
   12720:	10003426 	beq	r2,zero,127f4 <__call_exitprocs+0x18c>
   12724:	9809883a 	mov	r4,r19
   12728:	a8800015 	stw	r2,0(r21)
   1272c:	000357c0 	call	357c <free>
   12730:	acc00017 	ldw	r19,0(r21)
   12734:	983fe41e 	bne	r19,zero,126c8 <__alt_data_end+0xfffbcf98>
   12738:	dfc00b17 	ldw	ra,44(sp)
   1273c:	df000a17 	ldw	fp,40(sp)
   12740:	ddc00917 	ldw	r23,36(sp)
   12744:	dd800817 	ldw	r22,32(sp)
   12748:	dd400717 	ldw	r21,28(sp)
   1274c:	dd000617 	ldw	r20,24(sp)
   12750:	dcc00517 	ldw	r19,20(sp)
   12754:	dc800417 	ldw	r18,16(sp)
   12758:	dc400317 	ldw	r17,12(sp)
   1275c:	dc000217 	ldw	r16,8(sp)
   12760:	dec00c04 	addi	sp,sp,48
   12764:	f800283a 	ret
   12768:	98800117 	ldw	r2,4(r19)
   1276c:	80c00017 	ldw	r3,0(r16)
   12770:	10bfffc4 	addi	r2,r2,-1
   12774:	17001526 	beq	r2,fp,127cc <__call_exitprocs+0x164>
   12778:	80000015 	stw	zero,0(r16)
   1277c:	183fde26 	beq	r3,zero,126f8 <__alt_data_end+0xfffbcfc8>
   12780:	00800044 	movi	r2,1
   12784:	1708983a 	sll	r4,r2,fp
   12788:	98806217 	ldw	r2,392(r19)
   1278c:	9dc00117 	ldw	r23,4(r19)
   12790:	2084703a 	and	r2,r4,r2
   12794:	1000061e 	bne	r2,zero,127b0 <__call_exitprocs+0x148>
   12798:	183ee83a 	callr	r3
   1279c:	98800117 	ldw	r2,4(r19)
   127a0:	15ffc51e 	bne	r2,r23,126b8 <__alt_data_end+0xfffbcf88>
   127a4:	a8800017 	ldw	r2,0(r21)
   127a8:	14ffd326 	beq	r2,r19,126f8 <__alt_data_end+0xfffbcfc8>
   127ac:	003fc206 	br	126b8 <__alt_data_end+0xfffbcf88>
   127b0:	98806317 	ldw	r2,396(r19)
   127b4:	2084703a 	and	r2,r4,r2
   127b8:	1000061e 	bne	r2,zero,127d4 <__call_exitprocs+0x16c>
   127bc:	89400017 	ldw	r5,0(r17)
   127c0:	9009883a 	mov	r4,r18
   127c4:	183ee83a 	callr	r3
   127c8:	003ff406 	br	1279c <__alt_data_end+0xfffbd06c>
   127cc:	9f000115 	stw	fp,4(r19)
   127d0:	003fea06 	br	1277c <__alt_data_end+0xfffbd04c>
   127d4:	89000017 	ldw	r4,0(r17)
   127d8:	183ee83a 	callr	r3
   127dc:	003fef06 	br	1279c <__alt_data_end+0xfffbd06c>
   127e0:	98800017 	ldw	r2,0(r19)
   127e4:	982b883a 	mov	r21,r19
   127e8:	1027883a 	mov	r19,r2
   127ec:	983fb61e 	bne	r19,zero,126c8 <__alt_data_end+0xfffbcf98>
   127f0:	003fd106 	br	12738 <__alt_data_end+0xfffbd008>
   127f4:	0005883a 	mov	r2,zero
   127f8:	003ffa06 	br	127e4 <__alt_data_end+0xfffbd0b4>

000127fc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   127fc:	defffd04 	addi	sp,sp,-12
   12800:	df000215 	stw	fp,8(sp)
   12804:	df000204 	addi	fp,sp,8
   12808:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   1280c:	0001883a 	nop
   12810:	e0bfff17 	ldw	r2,-4(fp)
   12814:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   12818:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   1281c:	10000226 	beq	r2,zero,12828 <_exit+0x2c>
    ALT_SIM_FAIL();
   12820:	002af070 	cmpltui	zero,zero,43969
   12824:	00000106 	br	1282c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   12828:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   1282c:	003fff06 	br	1282c <__alt_data_end+0xfffbd0fc>
