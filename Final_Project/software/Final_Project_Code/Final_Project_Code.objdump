
Final_Project_Code.elf:     file format elf32-littlenios2
Final_Project_Code.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0000022c

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00012620 memsz 0x00012620 flags r-x
    LOAD off    0x00013640 vaddr 0x00012640 paddr 0x0001412c align 2**12
         filesz 0x00001aec memsz 0x00001aec flags rw-
    LOAD off    0x00015c18 vaddr 0x00015c18 paddr 0x00015c18 align 2**12
         filesz 0x00000000 memsz 0x00000180 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000020c  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000119e0  0000022c  0000022c  0000122c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000a34  00011c0c  00011c0c  00012c0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aec  00012640  0001412c  00013640  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000180  00015c18  00015c18  00015c18  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00015d98  00015d98  0001512c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0001512c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000d90  00000000  00000000  00015150  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002457b  00000000  00000000  00015ee0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000935b  00000000  00000000  0003a45b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000b52c  00000000  00000000  000437b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002518  00000000  00000000  0004ece4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003932  00000000  00000000  000511fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00016da4  00000000  00000000  00054b2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  0006b8d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001388  00000000  00000000  0006b918  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000702e2  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  000702e5  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000702f1  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000702f2  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000702f3  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000702f7  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000702fb  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  000702ff  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  0007030a  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  00070315  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  00070320  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000003b  00000000  00000000  0007032b  2**0
                  CONTENTS, READONLY
 29 .jdi          000056ce  00000000  00000000  00070366  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00087aca  00000000  00000000  00075a34  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
0000022c l    d  .text	00000000 .text
00011c0c l    d  .rodata	00000000 .rodata
00012640 l    d  .rwdata	00000000 .rwdata
00015c18 l    d  .bss	00000000 .bss
00015d98 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Final_Project_Code_bsp//obj/HAL/src/crt0.o
00000264 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 io_handler.c
00000000 l    df *ABS*	00000000 keyboard_functions.c
00015c18 l     O .bss	00000002 ctl_reg
00015c1a l     O .bss	00000002 no_device
00000000 l    df *ABS*	00000000 main.c
00015c34 l     O .bss	00000004 projectiles
00000000 l    df *ABS*	00000000 play_game.c
00000000 l    df *ABS*	00000000 usb.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00012386 l     O .rodata	00000010 zeroes.4181
00012396 l     O .rodata	00000010 blanks.4180
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
000055e0 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00007188 l     F .text	00000008 __fp_lock
00007190 l     F .text	00000008 __fp_unlock
000071a4 l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00012a48 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
00012e8c l     O .rwdata	00000020 lc_ctype_charset
00012e6c l     O .rwdata	00000020 lc_message_charset
00012eac l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
000123c8 l     O .rodata	0000000c p05.2678
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00009ed8 l     F .text	000000fc __sprint_r.part.0
000124fc l     O .rodata	00000010 blanks.4125
000124ec l     O .rodata	00000010 zeroes.4126
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0000c9dc l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0000f32c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000f454 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000f480 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000f588 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000f684 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000f768 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000f94c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0001411c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0000fc00 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000fd50 l     F .text	00000038 alt_dev_reg
0001308c l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0001002c l     F .text	00000204 altera_avalon_jtag_uart_irq
00010230 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00010b04 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00010f9c l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
000110f4 l     F .text	00000050 alt_get_errno
00011144 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00015c6c g     O .bss	00000004 alt_instruction_exception_handler
0000956c g     F .text	00000074 _mprec_log10
00009658 g     F .text	0000008c __any_on
0000b904 g     F .text	00000054 _isatty_r
000123d4 g     O .rodata	00000028 __mprec_tinytens
0000f894 g     F .text	00000078 alt_main
000031d8 g     F .text	000000b8 _puts_r
00015c98 g     O .bss	00000100 alt_irq
0000b958 g     F .text	0000005c _lseek_r
0001412c g       *ABS*	00000000 __flash_rwdata_start
0000dd4c g     F .text	00000084 .hidden __eqdf2
00015d98 g       *ABS*	00000000 __alt_heap_start
0000319c g     F .text	0000003c printf
0000bb80 g     F .text	0000009c _wcrtomb_r
00015c28 g     O .bss	00000002 usb_ctl_val
00009dd0 g     F .text	0000005c __sseek
000074ec g     F .text	00000010 __sinit
00015c20 g     O .bss	00000004 keycode
0000ba10 g     F .text	00000154 __swbuf_r
00007f64 g     F .text	0000007c _setlocale_r
00007344 g     F .text	00000078 __sfmoreglue
0000f92c g     F .text	00000020 __malloc_unlock
000028a4 g     F .text	00000080 UsbGetRetryCnt
0000841c g     F .text	0000015c memmove
00000268 g     F .text	00000060 IO_init
000074d4 g     F .text	00000018 _cleanup
0000869c g     F .text	000000a8 _Balloc
0000ddd0 g     F .text	000000e0 .hidden __gtdf2
00011534 g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
0000b8ac g     F .text	00000058 _fstat_r
00015c44 g     O .bss	00000004 errno
00009d4c g     F .text	00000008 __seofread
00000394 g     F .text	0000030c get_keycode
00015c58 g     O .bss	00000004 alt_argv
0001c0ec g       *ABS*	00000000 _gp
0000fbd0 g     F .text	00000030 usleep
00012f0c g     O .rwdata	00000180 alt_fd_list
00011554 g     F .text	00000090 alt_find_dev
000082e4 g     F .text	00000138 memcpy
000015c0 g     F .text	00000080 fire_projectile
00007198 g     F .text	0000000c _cleanup_r
0000f154 g     F .text	000000d0 .hidden __floatsidf
0001107c g     F .text	00000078 alt_io_redirect
00015c2a g     O .bss	00000001 data_size
0000deb0 g     F .text	000000e0 .hidden __ltdf2
00011c0c g       *ABS*	00000000 __DTOR_END__
00003290 g     F .text	00000014 puts
000117cc g     F .text	0000009c alt_exception_cause_generated_bad_addr
00009c84 g     F .text	00000074 __fpclassifyd
000094c8 g     F .text	000000a4 __ratio
0000b410 g     F .text	00000024 __vfiprintf_internal
0001042c g     F .text	0000020c altera_avalon_jtag_uart_read
000029a0 g     F .text	00000014 malloc
00003170 g     F .text	0000002c _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0000caf8 g     F .text	00000008 .hidden __udivsi3
0000f5d8 g     F .text	000000ac isatty
00012424 g     O .rodata	000000c8 __mprec_tens
00007fe0 g     F .text	0000000c __locale_charset
00015c40 g     O .bss	00000004 __malloc_top_pad
00001f44 g     F .text	00000264 UsbGetConfigDesc2
000140fc g     O .rwdata	00000004 __mb_cur_max
00008010 g     F .text	0000000c _localeconv_r
00008ac4 g     F .text	0000003c __i2b
00007950 g     F .text	000004a4 __sfvwrite_r
00015c2c g     O .bss	00000002 intStat
000032a4 g     F .text	00000054 _sbrk_r
0000b9b4 g     F .text	0000005c _read_r
00014114 g     O .rwdata	00000004 alt_max_fd
0000b5bc g     F .text	00000100 _fclose_r
00007158 g     F .text	00000030 fflush
00015c3c g     O .bss	00000004 __malloc_max_sbrked_mem
000011dc g     F .text	000000a0 render_shadows
0000cb30 g     F .text	0000089c .hidden __adddf3
00009270 g     F .text	0000011c __b2d
0000c3c0 g     F .text	0000061c .hidden __umoddi3
0000f7b8 g     F .text	000000dc lseek
000140f4 g     O .rwdata	00000004 _global_impure_ptr
000096e4 g     F .text	000005a0 _realloc_r
00015d98 g       *ABS*	00000000 __bss_end
00010eac g     F .text	000000f0 alt_iic_isr_register
00011430 g     F .text	00000104 alt_tick
0000bd80 g     F .text	00000640 .hidden __udivdi3
0000b6d0 g     F .text	00000184 _fputwc_r
000123fc g     O .rodata	00000028 __mprec_bigtens
000088a8 g     F .text	00000104 __s2b
0000f224 g     F .text	000000a4 .hidden __floatunsidf
00009018 g     F .text	00000060 __mcmp
000019a4 g     F .text	000000fc UsbSetAddress
0000750c g     F .text	00000018 __fp_lock_all
00010e60 g     F .text	0000004c alt_ic_irq_enabled
00011398 g     F .text	00000098 alt_alarm_stop
00015c60 g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	000000d0 alt_irq_handler
00012ee4 g     O .rwdata	00000028 alt_dev_null
0000165c g     F .text	000000ac init_players
00010ae8 g     F .text	0000001c alt_dcache_flush_all
000089ac g     F .text	00000068 __hi0bits
00000330 g     F .text	00000064 IO_read
0000f0cc g     F .text	00000088 .hidden __fixdfsi
0001412c g       *ABS*	00000000 __ram_rwdata_end
0001410c g     O .rwdata	00000008 alt_dev_list
0000fc50 g     F .text	00000100 write
00012640 g       *ABS*	00000000 __ram_rodata_end
0000f4d0 g     F .text	000000b8 fstat
0000deb0 g     F .text	000000e0 .hidden __ledf2
00002924 g     F .text	0000007c UsbPrintMem
00008d90 g     F .text	00000140 __pow5mult
00009fec g     F .text	00001424 ___vfiprintf_internal_r
00015c50 g     O .bss	00000004 __nlocale_changed
0000cb00 g     F .text	00000008 .hidden __umodsi3
00015d98 g       *ABS*	00000000 end
0000ff68 g     F .text	000000c4 altera_avalon_jtag_uart_init
000001cc g     F .exceptions	00000060 alt_instruction_exception_entry
00011c0c g       *ABS*	00000000 __CTOR_LIST__
00055730 g       *ABS*	00000000 __alt_stack_pointer
0000f2c8 g     F .text	00000064 .hidden __clzsi2
00010638 g     F .text	00000218 altera_avalon_jtag_uart_write
000074fc g     F .text	00000004 __sfp_lock_acquire
000081fc g     F .text	000000e8 memchr
00003390 g     F .text	000020fc ___vfprintf_internal_r
000022a4 g     F .text	000000fc UsbClassRequest
00007660 g     F .text	000002f0 _free_r
00007fec g     F .text	00000010 __locale_mb_cur_max
00011a44 g     F .text	00000194 __call_exitprocs
00015c4c g     O .bss	00000004 __mlocale_changed
000140ec g     O .rwdata	00000004 __malloc_sbrk_base
0000022c g     F .text	0000003c _start
00015c64 g     O .bss	00000004 _alt_tick_rate
00008ed0 g     F .text	00000148 __lshift
00015c68 g     O .bss	00000004 _alt_nticks
0000f99c g     F .text	00000104 read
0000fdbc g     F .text	00000048 alt_sys_init
00011930 g     F .text	00000114 __register_exitproc
00008b00 g     F .text	00000290 __multiply
000102d8 g     F .text	00000068 altera_avalon_jtag_uart_close
000010ac g     F .text	00000130 renderer
0000cb08 g     F .text	00000028 .hidden __mulsi3
00012640 g       *ABS*	00000000 __ram_rwdata_start
00011c0c g       *ABS*	00000000 __ram_rodata_start
00015c70 g     O .bss	00000028 __malloc_current_mallinfo
000006a0 g     F .text	00000a0c setup_keyboard
0000938c g     F .text	0000013c __d2b
00001aa0 g     F .text	00000144 UsbGetDeviceDesc1
0000fe04 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000116f8 g     F .text	000000d4 alt_get_fd
00010990 g     F .text	00000158 alt_busy_sleep
0000b490 g     F .text	00000054 _close_r
00001708 g     F .text	000000b0 move_player
000118b4 g     F .text	0000007c memcmp
0000fec4 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00015d98 g       *ABS*	00000000 __alt_stack_base
0000ff14 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
000054b0 g     F .text	00000130 __swsetup_r
0000d3cc g     F .text	00000980 .hidden __divdf3
000073bc g     F .text	00000118 __sfp
000095e0 g     F .text	00000078 __copybits
00012640 g     O .rwdata	00000408 __malloc_av_
00007508 g     F .text	00000004 __sinit_lock_release
0000df90 g     F .text	0000086c .hidden __muldf3
00009cf8 g     F .text	00000054 __sread
00002820 g     F .text	00000084 UsbWaitTDListDone
000115e4 g     F .text	00000114 alt_find_file
00010b54 g     F .text	000000a4 alt_dev_llist_insert
0000f90c g     F .text	00000020 __malloc_lock
0000fb20 g     F .text	000000b0 sbrk
00006f30 g     F .text	00000228 _fflush_r
0000b4e4 g     F .text	000000d8 _calloc_r
00015c2e g     O .bss	00000001 hot_plug_count
00015c18 g       *ABS*	00000000 __bss_start
00008578 g     F .text	00000124 memset
000017b8 g     F .text	000000a4 main
00015c5c g     O .bss	00000004 alt_envp
00015c38 g     O .bss	00000004 __malloc_max_total_mem
0000fe64 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
000021a8 g     F .text	000000fc UsbSetConfig
0000bb64 g     F .text	0000001c __swbuf
00009e2c g     F .text	00000008 __sclose
00055730 g       *ABS*	00000000 __alt_heap_limit
0000b6bc g     F .text	00000014 fclose
00005808 g     F .text	00001728 _dtoa_r
000029c8 g     F .text	000007a8 _malloc_r
0000bcf4 g     F .text	00000030 __ascii_wctomb
00014118 g     O .rwdata	00000004 alt_errno
00007df4 g     F .text	000000b8 _fwalk
0000ca48 g     F .text	00000054 .hidden __divsi3
0000753c g     F .text	00000124 _malloc_trim_r
000023a0 g     F .text	00000144 UsbGetHidDesc
00011c0c g       *ABS*	00000000 __CTOR_END__
00009e34 g     F .text	000000a4 strcmp
00011c0c g       *ABS*	00000000 __flash_rodata_start
00011c0c g       *ABS*	00000000 __DTOR_LIST__
0000dd4c g     F .text	00000084 .hidden __nedf2
000018b0 g     F .text	00000044 UsbRead
0000154c g     F .text	00000074 parse_keycode
0000fd88 g     F .text	00000034 alt_irq_init
0000faa0 g     F .text	00000080 alt_release_fd
0001250c g     O .rodata	00000100 .hidden __clz_tab
00015c48 g     O .bss	00000004 _PathLocale
00011868 g     F .text	00000014 atexit
0000b434 g     F .text	0000005c _write_r
0000801c g     F .text	0000001c setlocale
000140f8 g     O .rwdata	00000004 _impure_ptr
00015c54 g     O .bss	00000004 alt_argc
00010c54 g     F .text	0000005c _do_dtors
00008008 g     F .text	00000008 __locale_cjk_lang
00001640 g     F .text	0000001c check_projectiles
00000020 g       .exceptions	00000000 alt_irq_entry
00009210 g     F .text	00000060 __ulp
00007524 g     F .text	00000018 __fp_unlock_all
00015c24 g     O .bss	00000001 toggle
0000127c g     F .text	0000009c render_players
00014104 g     O .rwdata	00000008 alt_fs_list
000024e4 g     F .text	0000033c UsbGetReportDesc
00000020 g       *ABS*	00000000 __ram_exceptions_start
00008038 g     F .text	0000000c localeconv
00010ccc g     F .text	00000050 alt_ic_isr_register
0001412c g       *ABS*	00000000 _edata
00015d98 g       *ABS*	00000000 _end
0000185c g     F .text	00000054 UsbWrite
0000022c g       *ABS*	00000000 __ram_exceptions_end
00010340 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
00015c30 g     O .bss	00000002 code
00010dbc g     F .text	000000a4 alt_ic_irq_disable
00009d54 g     F .text	0000007c __swrite
000140f0 g     O .rwdata	00000004 __malloc_trim_threshold
00007ffc g     F .text	0000000c __locale_msgcharset
00015c1c g     O .bss	00000002 fs_device
0001187c g     F .text	00000038 exit
00007eac g     F .text	000000b8 _fwalk_reent
00009078 g     F .text	00000198 __mdiff
0000ca9c g     F .text	0000005c .hidden __modsi3
00055730 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00007500 g     F .text	00000004 __sfp_lock_release
000002c8 g     F .text	00000068 IO_write
00011bd8 g     F .text	00000034 _exit
00010850 g     F .text	00000140 alt_alarm_start
00008044 g     F .text	000001b8 __smakebuf_r
000032f8 g     F .text	00000098 strlen
00011238 g     F .text	00000160 open
0000ddd0 g     F .text	000000e0 .hidden __gedf2
00014100 g     O .rwdata	00000004 __wctomb
00009fd4 g     F .text	00000018 __sprint_r
00010cb0 g     F .text	0000001c alt_icache_flush_all
00014120 g     O .rwdata	00000004 alt_priority_mask
00010d1c g     F .text	000000a0 alt_ic_irq_enable
0000548c g     F .text	00000024 __vfprintf_internal
0000bd24 g     F .text	0000005c _wctomb_r
0000e7fc g     F .text	000008d0 .hidden __subdf3
00001318 g     F .text	00000234 keycode_effect
00008a14 g     F .text	000000b0 __lo0bits
00001db8 g     F .text	0000018c UsbGetConfigDesc1
00014124 g     O .rwdata	00000008 alt_alarm_list
00010bf8 g     F .text	0000005c _do_ctors
000018f4 g     F .text	000000b0 UsbSoftReset
0000bc1c g     F .text	000000d8 wcrtomb
0000f37c g     F .text	000000d8 close
00001be4 g     F .text	000001d4 UsbGetDeviceDesc2
0000f6e8 g     F .text	00000080 alt_load
0000b854 g     F .text	00000058 fputwc
000029b4 g     F .text	00000014 free
00007504 g     F .text	00000004 __sinit_lock_acquire
0000876c g     F .text	0000013c __multadd
00008744 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08408b14 	ori	at,at,556
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001cc0 	call	1cc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	00800074 	movhi	r2,1
 140:	10972604 	addi	r2,r2,23704
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	00800074 	movhi	r2,1
 158:	10972604 	addi	r2,r2,23704
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <__alt_data_end+0xfffaa9fc>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <__alt_data_end+0xfffaa9f0>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0001883a 	nop
}
 1b8:	e037883a 	mov	sp,fp
 1bc:	dfc00117 	ldw	ra,4(sp)
 1c0:	df000017 	ldw	fp,0(sp)
 1c4:	dec00204 	addi	sp,sp,8
 1c8:	f800283a 	ret

000001cc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1cc:	defffb04 	addi	sp,sp,-20
 1d0:	dfc00415 	stw	ra,16(sp)
 1d4:	df000315 	stw	fp,12(sp)
 1d8:	df000304 	addi	fp,sp,12
 1dc:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 1e0:	00bfffc4 	movi	r2,-1
 1e4:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 1e8:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1ec:	d0a6e017 	ldw	r2,-25728(gp)
 1f0:	10000726 	beq	r2,zero,210 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 1f4:	d0a6e017 	ldw	r2,-25728(gp)
 1f8:	e0fffd17 	ldw	r3,-12(fp)
 1fc:	1809883a 	mov	r4,r3
 200:	e17fff17 	ldw	r5,-4(fp)
 204:	e1bffe17 	ldw	r6,-8(fp)
 208:	103ee83a 	callr	r2
 20c:	00000206 	br	218 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 210:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 214:	0005883a 	mov	r2,zero
}
 218:	e037883a 	mov	sp,fp
 21c:	dfc00117 	ldw	ra,4(sp)
 220:	df000017 	ldw	fp,0(sp)
 224:	dec00204 	addi	sp,sp,8
 228:	f800283a 	ret

Disassembly of section .text:

0000022c <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     22c:	06c00174 	movhi	sp,5
    ori sp, sp, %lo(__alt_stack_pointer)
     230:	ded5cc14 	ori	sp,sp,22320
    movhi gp, %hi(_gp)
     234:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     238:	d6b03b14 	ori	gp,gp,49388
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     23c:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     240:	10970614 	ori	r2,r2,23576

    movhi r3, %hi(__bss_end)
     244:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     248:	18d76614 	ori	r3,r3,23960

    beq r2, r3, 1f
     24c:	10c00326 	beq	r2,r3,25c <_start+0x30>

0:
    stw zero, (r2)
     250:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     254:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     258:	10fffd36 	bltu	r2,r3,250 <__alt_data_end+0xfffaab20>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     25c:	000f6e80 	call	f6e8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     260:	000f8940 	call	f894 <alt_main>

00000264 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     264:	003fff06 	br	264 <__alt_data_end+0xfffaab34>

00000268 <IO_init>:
#define otg_hpi_cs			(volatile char*)	OTG_HPI_CS_BASE //FOR SOME REASON CS BASE BEHAVES WEIRDLY MIGHT HAVE TO SET MANUALLY
#define otg_hpi_w			(volatile char*)	OTG_HPI_W_BASE


void IO_init(void)
{
     268:	deffff04 	addi	sp,sp,-4
     26c:	df000015 	stw	fp,0(sp)
     270:	d839883a 	mov	fp,sp
	*otg_hpi_cs = 0;
     274:	00800234 	movhi	r2,8
     278:	10841404 	addi	r2,r2,4176
     27c:	10000005 	stb	zero,0(r2)
	*otg_hpi_r = 1;
     280:	00800234 	movhi	r2,8
     284:	10840804 	addi	r2,r2,4128
     288:	00c00044 	movi	r3,1
     28c:	10c00005 	stb	r3,0(r2)
	*otg_hpi_w = 1;
     290:	00800234 	movhi	r2,8
     294:	10840404 	addi	r2,r2,4112
     298:	00c00044 	movi	r3,1
     29c:	10c00005 	stb	r3,0(r2)
	*otg_hpi_address = 0;
     2a0:	00800234 	movhi	r2,8
     2a4:	10841004 	addi	r2,r2,4160
     2a8:	10000015 	stw	zero,0(r2)
	*otg_hpi_data = 0;
     2ac:	00800234 	movhi	r2,8
     2b0:	10840c04 	addi	r2,r2,4144
     2b4:	10000015 	stw	zero,0(r2)
}
     2b8:	e037883a 	mov	sp,fp
     2bc:	df000017 	ldw	fp,0(sp)
     2c0:	dec00104 	addi	sp,sp,4
     2c4:	f800283a 	ret

000002c8 <IO_write>:

void IO_write(alt_u8 Address, alt_u16 Data)
{
     2c8:	defffd04 	addi	sp,sp,-12
     2cc:	df000215 	stw	fp,8(sp)
     2d0:	df000204 	addi	fp,sp,8
     2d4:	2007883a 	mov	r3,r4
     2d8:	2805883a 	mov	r2,r5
     2dc:	e0fffe05 	stb	r3,-8(fp)
     2e0:	e0bfff0d 	sth	r2,-4(fp)
	*otg_hpi_address = Address;
     2e4:	00800234 	movhi	r2,8
     2e8:	10841004 	addi	r2,r2,4160
     2ec:	e0fffe03 	ldbu	r3,-8(fp)
     2f0:	10c00015 	stw	r3,0(r2)
	*otg_hpi_data = Data;
     2f4:	00800234 	movhi	r2,8
     2f8:	10840c04 	addi	r2,r2,4144
     2fc:	e0ffff0b 	ldhu	r3,-4(fp)
     300:	10c00015 	stw	r3,0(r2)
	*otg_hpi_w = 0;
     304:	00800234 	movhi	r2,8
     308:	10840404 	addi	r2,r2,4112
     30c:	10000005 	stb	zero,0(r2)
	*otg_hpi_w = 1;
     310:	00800234 	movhi	r2,8
     314:	10840404 	addi	r2,r2,4112
     318:	00c00044 	movi	r3,1
     31c:	10c00005 	stb	r3,0(r2)
}
     320:	e037883a 	mov	sp,fp
     324:	df000017 	ldw	fp,0(sp)
     328:	dec00104 	addi	sp,sp,4
     32c:	f800283a 	ret

00000330 <IO_read>:

alt_u16 IO_read(alt_u8 Address)
{
     330:	defffd04 	addi	sp,sp,-12
     334:	df000215 	stw	fp,8(sp)
     338:	df000204 	addi	fp,sp,8
     33c:	2005883a 	mov	r2,r4
     340:	e0bfff05 	stb	r2,-4(fp)
	alt_u16 temp;
	*otg_hpi_address = Address;
     344:	00800234 	movhi	r2,8
     348:	10841004 	addi	r2,r2,4160
     34c:	e0ffff03 	ldbu	r3,-4(fp)
     350:	10c00015 	stw	r3,0(r2)
	*otg_hpi_r = 0;
     354:	00800234 	movhi	r2,8
     358:	10840804 	addi	r2,r2,4128
     35c:	10000005 	stb	zero,0(r2)
	temp = *otg_hpi_data;
     360:	00800234 	movhi	r2,8
     364:	10840c04 	addi	r2,r2,4144
     368:	10800017 	ldw	r2,0(r2)
     36c:	e0bffe0d 	sth	r2,-8(fp)
	*otg_hpi_r = 1;
     370:	00800234 	movhi	r2,8
     374:	10840804 	addi	r2,r2,4128
     378:	00c00044 	movi	r3,1
     37c:	10c00005 	stb	r3,0(r2)

	return temp;
     380:	e0bffe0b 	ldhu	r2,-8(fp)
}
     384:	e037883a 	mov	sp,fp
     388:	df000017 	ldw	fp,0(sp)
     38c:	dec00104 	addi	sp,sp,4
     390:	f800283a 	ret

00000394 <get_keycode>:
alt_u16 code;




int get_keycode(unsigned int *keycode1,unsigned int *keycode2){
     394:	defffc04 	addi	sp,sp,-16
     398:	dfc00315 	stw	ra,12(sp)
     39c:	df000215 	stw	fp,8(sp)
     3a0:	df000204 	addi	fp,sp,8
     3a4:	e13ffe15 	stw	r4,-8(fp)
     3a8:	e17fff15 	stw	r5,-4(fp)
				toggle++;
     3ac:	d0a6ce03 	ldbu	r2,-25800(gp)
     3b0:	10800044 	addi	r2,r2,1
     3b4:	d0a6ce05 	stb	r2,-25800(gp)
				IO_write(HPI_ADDR,0x0500); //the start address
     3b8:	01000084 	movi	r4,2
     3bc:	01414004 	movi	r5,1280
     3c0:	00002c80 	call	2c8 <IO_write>
				//data phase IN-1
				IO_write(HPI_DATA,0x051c); //500
     3c4:	0009883a 	mov	r4,zero
     3c8:	01414704 	movi	r5,1308
     3cc:	00002c80 	call	2c8 <IO_write>

				IO_write(HPI_DATA,0x000f & data_size);//2 data length
     3d0:	d0a6cf83 	ldbu	r2,-25794(gp)
     3d4:	10803fcc 	andi	r2,r2,255
     3d8:	108003cc 	andi	r2,r2,15
     3dc:	0009883a 	mov	r4,zero
     3e0:	100b883a 	mov	r5,r2
     3e4:	00002c80 	call	2c8 <IO_write>

				IO_write(HPI_DATA,0x0291);//4 //endpoint 1
     3e8:	0009883a 	mov	r4,zero
     3ec:	0140a444 	movi	r5,657
     3f0:	00002c80 	call	2c8 <IO_write>
				if(toggle%2)
     3f4:	d0a6ce03 	ldbu	r2,-25800(gp)
     3f8:	1080004c 	andi	r2,r2,1
     3fc:	10803fcc 	andi	r2,r2,255
     400:	10000426 	beq	r2,zero,414 <get_keycode+0x80>
				{
					IO_write(HPI_DATA,0x0001);//6 //data 1
     404:	0009883a 	mov	r4,zero
     408:	01400044 	movi	r5,1
     40c:	00002c80 	call	2c8 <IO_write>
     410:	00000306 	br	420 <get_keycode+0x8c>
				}
				else
				{
					IO_write(HPI_DATA,0x0041);//6 //data 1
     414:	0009883a 	mov	r4,zero
     418:	01401044 	movi	r5,65
     41c:	00002c80 	call	2c8 <IO_write>
				}
				IO_write(HPI_DATA,0x0013);//8
     420:	0009883a 	mov	r4,zero
     424:	014004c4 	movi	r5,19
     428:	00002c80 	call	2c8 <IO_write>
				IO_write(HPI_DATA,0x0000);//a
     42c:	0009883a 	mov	r4,zero
     430:	000b883a 	mov	r5,zero
     434:	00002c80 	call	2c8 <IO_write>
				UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
     438:	01006c04 	movi	r4,432
     43c:	01414004 	movi	r5,1280
     440:	000185c0 	call	185c <UsbWrite>

				while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     444:	00002506 	br	4dc <get_keycode+0x148>
				{
					IO_write(HPI_ADDR,0x0500); //the start address
     448:	01000084 	movi	r4,2
     44c:	01414004 	movi	r5,1280
     450:	00002c80 	call	2c8 <IO_write>
					//data phase IN-1
					IO_write(HPI_DATA,0x051c); //500
     454:	0009883a 	mov	r4,zero
     458:	01414704 	movi	r5,1308
     45c:	00002c80 	call	2c8 <IO_write>

					IO_write(HPI_DATA,0x000f & data_size);//2 data length
     460:	d0a6cf83 	ldbu	r2,-25794(gp)
     464:	10803fcc 	andi	r2,r2,255
     468:	108003cc 	andi	r2,r2,15
     46c:	0009883a 	mov	r4,zero
     470:	100b883a 	mov	r5,r2
     474:	00002c80 	call	2c8 <IO_write>

					IO_write(HPI_DATA,0x0291);//4 //endpoint 1
     478:	0009883a 	mov	r4,zero
     47c:	0140a444 	movi	r5,657
     480:	00002c80 	call	2c8 <IO_write>
					if(toggle%2)
     484:	d0a6ce03 	ldbu	r2,-25800(gp)
     488:	1080004c 	andi	r2,r2,1
     48c:	10803fcc 	andi	r2,r2,255
     490:	10000426 	beq	r2,zero,4a4 <get_keycode+0x110>
					{
						IO_write(HPI_DATA,0x0001);//6 //data 1
     494:	0009883a 	mov	r4,zero
     498:	01400044 	movi	r5,1
     49c:	00002c80 	call	2c8 <IO_write>
     4a0:	00000306 	br	4b0 <get_keycode+0x11c>
					}
					else
					{
						IO_write(HPI_DATA,0x0041);//6 //data 1
     4a4:	0009883a 	mov	r4,zero
     4a8:	01401044 	movi	r5,65
     4ac:	00002c80 	call	2c8 <IO_write>
					}
					IO_write(HPI_DATA,0x0013);//8
     4b0:	0009883a 	mov	r4,zero
     4b4:	014004c4 	movi	r5,19
     4b8:	00002c80 	call	2c8 <IO_write>
					IO_write(HPI_DATA,0x0000);//
     4bc:	0009883a 	mov	r4,zero
     4c0:	000b883a 	mov	r5,zero
     4c4:	00002c80 	call	2c8 <IO_write>
					UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
     4c8:	01006c04 	movi	r4,432
     4cc:	01414004 	movi	r5,1280
     4d0:	000185c0 	call	185c <UsbWrite>
					usleep(10*1000);
     4d4:	0109c404 	movi	r4,10000
     4d8:	000fbd00 	call	fbd0 <usleep>
				}
				IO_write(HPI_DATA,0x0013);//8
				IO_write(HPI_DATA,0x0000);//a
				UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr

				while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     4dc:	010000c4 	movi	r4,3
     4e0:	00003300 	call	330 <IO_read>
     4e4:	10bfffcc 	andi	r2,r2,65535
     4e8:	1080040c 	andi	r2,r2,16
     4ec:	103fd626 	beq	r2,zero,448 <__alt_data_end+0xfffaad18>
					usleep(10*1000);
				}//end while



				usb_ctl_val = UsbWaitTDListDone();
     4f0:	00028200 	call	2820 <UsbWaitTDListDone>
     4f4:	d0a6cf0d 	sth	r2,-25796(gp)

				// packet starts from 0x051c, reading third byte
				// TASK: Write the address to read from the memory for byte 3 of the report descriptor to HPI_ADDR.
				IO_write(HPI_ADDR,0x051e); //the start address
     4f8:	01000084 	movi	r4,2
     4fc:	01414784 	movi	r5,1310
     500:	00002c80 	call	2c8 <IO_write>
				*keycode1 = IO_read(HPI_DATA);
     504:	0009883a 	mov	r4,zero
     508:	00003300 	call	330 <IO_read>
     50c:	10ffffcc 	andi	r3,r2,65535
     510:	e0bffe17 	ldw	r2,-8(fp)
     514:	10c00015 	stw	r3,0(r2)
				keycode=*keycode1;
     518:	e0bffe17 	ldw	r2,-8(fp)
     51c:	10800017 	ldw	r2,0(r2)
     520:	d0a6cd15 	stw	r2,-25804(gp)


				*keycode2 = IO_read(HPI_DATA);
     524:	0009883a 	mov	r4,zero
     528:	00003300 	call	330 <IO_read>
     52c:	10ffffcc 	andi	r3,r2,65535
     530:	e0bfff17 	ldw	r2,-4(fp)
     534:	10c00015 	stw	r3,0(r2)


				IOWR(KEYCODE_BASE, 0, keycode & 0xff);
     538:	d0a6cd17 	ldw	r2,-25804(gp)
     53c:	10c03fcc 	andi	r3,r2,255
     540:	00800234 	movhi	r2,8
     544:	10841804 	addi	r2,r2,4192
     548:	10c00035 	stwio	r3,0(r2)



				usb_ctl_val = UsbRead(ctl_reg);
     54c:	d0a6cb0b 	ldhu	r2,-25812(gp)
     550:	10bfffcc 	andi	r2,r2,65535
     554:	1009883a 	mov	r4,r2
     558:	00018b00 	call	18b0 <UsbRead>
     55c:	d0a6cf0d 	sth	r2,-25796(gp)

				if(!(usb_ctl_val & no_device))
     560:	d0e6cf0b 	ldhu	r3,-25796(gp)
     564:	d0a6cb8b 	ldhu	r2,-25810(gp)
     568:	1884703a 	and	r2,r3,r2
     56c:	10bfffcc 	andi	r2,r2,65535
     570:	1000211e 	bne	r2,zero,5f8 <get_keycode+0x264>
				{
					//USB hot plug routine
					for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
     574:	d026d085 	stb	zero,-25790(gp)
     578:	00001006 	br	5bc <get_keycode+0x228>
					{
						usleep(5*1000);
     57c:	0104e204 	movi	r4,5000
     580:	000fbd00 	call	fbd0 <usleep>
						usb_ctl_val = UsbRead(ctl_reg);
     584:	d0a6cb0b 	ldhu	r2,-25812(gp)
     588:	10bfffcc 	andi	r2,r2,65535
     58c:	1009883a 	mov	r4,r2
     590:	00018b00 	call	18b0 <UsbRead>
     594:	d0a6cf0d 	sth	r2,-25796(gp)
						if(usb_ctl_val & no_device) break;
     598:	d0e6cf0b 	ldhu	r3,-25796(gp)
     59c:	d0a6cb8b 	ldhu	r2,-25810(gp)
     5a0:	1884703a 	and	r2,r3,r2
     5a4:	10bfffcc 	andi	r2,r2,65535
     5a8:	10000126 	beq	r2,zero,5b0 <get_keycode+0x21c>
     5ac:	00000706 	br	5cc <get_keycode+0x238>
				usb_ctl_val = UsbRead(ctl_reg);

				if(!(usb_ctl_val & no_device))
				{
					//USB hot plug routine
					for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
     5b0:	d0a6d083 	ldbu	r2,-25790(gp)
     5b4:	10800044 	addi	r2,r2,1
     5b8:	d0a6d085 	stb	r2,-25790(gp)
     5bc:	d0a6d083 	ldbu	r2,-25790(gp)
     5c0:	10803fcc 	andi	r2,r2,255
     5c4:	108001f0 	cmpltui	r2,r2,7
     5c8:	103fec1e 	bne	r2,zero,57c <__alt_data_end+0xfffaae4c>
					{
						usleep(5*1000);
						usb_ctl_val = UsbRead(ctl_reg);
						if(usb_ctl_val & no_device) break;
					}
					if(!(usb_ctl_val & no_device))
     5cc:	d0e6cf0b 	ldhu	r3,-25796(gp)
     5d0:	d0a6cb8b 	ldhu	r2,-25810(gp)
     5d4:	1884703a 	and	r2,r3,r2
     5d8:	10bfffcc 	andi	r2,r2,65535
     5dc:	1000061e 	bne	r2,zero,5f8 <get_keycode+0x264>
					{
						printf("\n[INFO]: the keyboard has been removed!!! \n");
     5e0:	01000074 	movhi	r4,1
     5e4:	21070304 	addi	r4,r4,7180
     5e8:	00032900 	call	3290 <puts>
						printf("[INFO]: please insert again!!! \n");
     5ec:	01000074 	movhi	r4,1
     5f0:	21070e04 	addi	r4,r4,7224
     5f4:	00032900 	call	3290 <puts>
					}
				}

				while (!(usb_ctl_val & no_device))
     5f8:	00001e06 	br	674 <get_keycode+0x2e0>
				{

					usb_ctl_val = UsbRead(ctl_reg);
     5fc:	d0a6cb0b 	ldhu	r2,-25812(gp)
     600:	10bfffcc 	andi	r2,r2,65535
     604:	1009883a 	mov	r4,r2
     608:	00018b00 	call	18b0 <UsbRead>
     60c:	d0a6cf0d 	sth	r2,-25796(gp)
					usleep(5*1000);
     610:	0104e204 	movi	r4,5000
     614:	000fbd00 	call	fbd0 <usleep>
					usb_ctl_val = UsbRead(ctl_reg);
     618:	d0a6cb0b 	ldhu	r2,-25812(gp)
     61c:	10bfffcc 	andi	r2,r2,65535
     620:	1009883a 	mov	r4,r2
     624:	00018b00 	call	18b0 <UsbRead>
     628:	d0a6cf0d 	sth	r2,-25796(gp)
					usleep(5*1000);
     62c:	0104e204 	movi	r4,5000
     630:	000fbd00 	call	fbd0 <usleep>
					usb_ctl_val = UsbRead(ctl_reg);
     634:	d0a6cb0b 	ldhu	r2,-25812(gp)
     638:	10bfffcc 	andi	r2,r2,65535
     63c:	1009883a 	mov	r4,r2
     640:	00018b00 	call	18b0 <UsbRead>
     644:	d0a6cf0d 	sth	r2,-25796(gp)
					usleep(5*1000);
     648:	0104e204 	movi	r4,5000
     64c:	000fbd00 	call	fbd0 <usleep>

					if(usb_ctl_val & no_device)
     650:	d0e6cf0b 	ldhu	r3,-25796(gp)
     654:	d0a6cb8b 	ldhu	r2,-25810(gp)
     658:	1884703a 	and	r2,r3,r2
     65c:	10bfffcc 	andi	r2,r2,65535
     660:	10000226 	beq	r2,zero,66c <get_keycode+0x2d8>
						return -1;
     664:	00bfffc4 	movi	r2,-1
     668:	00000806 	br	68c <get_keycode+0x2f8>

					usleep(200);
     66c:	01003204 	movi	r4,200
     670:	000fbd00 	call	fbd0 <usleep>
						printf("\n[INFO]: the keyboard has been removed!!! \n");
						printf("[INFO]: please insert again!!! \n");
					}
				}

				while (!(usb_ctl_val & no_device))
     674:	d0e6cf0b 	ldhu	r3,-25796(gp)
     678:	d0a6cb8b 	ldhu	r2,-25810(gp)
     67c:	1884703a 	and	r2,r3,r2
     680:	10bfffcc 	andi	r2,r2,65535
     684:	103fdd26 	beq	r2,zero,5fc <__alt_data_end+0xfffaaecc>
					if(usb_ctl_val & no_device)
						return -1;

					usleep(200);
				}
				return 0;
     688:	0005883a 	mov	r2,zero
}
     68c:	e037883a 	mov	sp,fp
     690:	dfc00117 	ldw	ra,4(sp)
     694:	df000017 	ldw	fp,0(sp)
     698:	dec00204 	addi	sp,sp,8
     69c:	f800283a 	ret

000006a0 <setup_keyboard>:


void setup_keyboard()
{
     6a0:	defffe04 	addi	sp,sp,-8
     6a4:	dfc00115 	stw	ra,4(sp)
     6a8:	df000015 	stw	fp,0(sp)
     6ac:	d839883a 	mov	fp,sp
	IO_init();
     6b0:	00002680 	call	268 <IO_init>
		usleep(10*10000);
	}*/



	printf("USB keyboard setup...\n\n");
     6b4:	01000074 	movhi	r4,1
     6b8:	21071604 	addi	r4,r4,7256
     6bc:	00032900 	call	3290 <puts>

	//----------------------------------------SIE1 initial---------------------------------------------------//
	USB_HOT_PLUG:
	UsbSoftReset();
     6c0:	00018f40 	call	18f4 <UsbSoftReset>

	// STEP 1a:
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
     6c4:	01005104 	movi	r4,324
     6c8:	000b883a 	mov	r5,zero
     6cc:	000185c0 	call	185c <UsbWrite>
	UsbWrite (HOST1_STAT_REG, 0xFFFF);
     6d0:	01302414 	movui	r4,49296
     6d4:	017fffd4 	movui	r5,65535
     6d8:	000185c0 	call	185c <UsbWrite>

	/* Set HUSB_pEOT time */
	UsbWrite(HUSB_pEOT, 600); // adjust the according to your USB device speed
     6dc:	01006d04 	movi	r4,436
     6e0:	01409604 	movi	r5,600
     6e4:	000185c0 	call	185c <UsbWrite>

	usb_ctl_val = SOFEOP1_TO_CPU_EN | RESUME1_TO_HPI_EN;// | SOFEOP1_TO_HPI_EN;
     6e8:	00811004 	movi	r2,1088
     6ec:	d0a6cf0d 	sth	r2,-25796(gp)
	UsbWrite(HPI_IRQ_ROUTING_REG, usb_ctl_val);
     6f0:	d0a6cf0b 	ldhu	r2,-25796(gp)
     6f4:	10bfffcc 	andi	r2,r2,65535
     6f8:	01005084 	movi	r4,322
     6fc:	100b883a 	mov	r5,r2
     700:	000185c0 	call	185c <UsbWrite>

	intStat = A_CHG_IRQ_EN | SOF_EOP_IRQ_EN ;
     704:	00808404 	movi	r2,528
     708:	d0a6d00d 	sth	r2,-25792(gp)
	UsbWrite(HOST1_IRQ_EN_REG, intStat);
     70c:	d0a6d00b 	ldhu	r2,-25792(gp)
     710:	10bfffcc 	andi	r2,r2,65535
     714:	01302314 	movui	r4,49292
     718:	100b883a 	mov	r5,r2
     71c:	000185c0 	call	185c <UsbWrite>
	// STEP 1a end

	// STEP 1b begin
	UsbWrite(COMM_R0,0x0000);//reset time
     720:	01007104 	movi	r4,452
     724:	000b883a 	mov	r5,zero
     728:	000185c0 	call	185c <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
     72c:	01007184 	movi	r4,454
     730:	000b883a 	mov	r5,zero
     734:	000185c0 	call	185c <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
     738:	01007204 	movi	r4,456
     73c:	000b883a 	mov	r5,zero
     740:	000185c0 	call	185c <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
     744:	01007284 	movi	r4,458
     748:	000b883a 	mov	r5,zero
     74c:	000185c0 	call	185c <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
     750:	01007304 	movi	r4,460
     754:	000b883a 	mov	r5,zero
     758:	000185c0 	call	185c <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
     75c:	01007384 	movi	r4,462
     760:	000b883a 	mov	r5,zero
     764:	000185c0 	call	185c <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
     768:	01007404 	movi	r4,464
     76c:	000b883a 	mov	r5,zero
     770:	000185c0 	call	185c <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
     774:	01007484 	movi	r4,466
     778:	000b883a 	mov	r5,zero
     77c:	000185c0 	call	185c <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
     780:	01007504 	movi	r4,468
     784:	000b883a 	mov	r5,zero
     788:	000185c0 	call	185c <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
     78c:	01007584 	movi	r4,470
     790:	000b883a 	mov	r5,zero
     794:	000185c0 	call	185c <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
     798:	01007604 	movi	r4,472
     79c:	000b883a 	mov	r5,zero
     7a0:	000185c0 	call	185c <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
     7a4:	01007684 	movi	r4,474
     7a8:	000b883a 	mov	r5,zero
     7ac:	000185c0 	call	185c <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
     7b0:	01007704 	movi	r4,476
     7b4:	000b883a 	mov	r5,zero
     7b8:	000185c0 	call	185c <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
     7bc:	01007784 	movi	r4,478
     7c0:	000b883a 	mov	r5,zero
     7c4:	000185c0 	call	185c <UsbWrite>
	UsbWrite(COMM_INT_NUM,HUSB_SIE1_INIT_INT); //HUSB_SIE1_INIT_INT
     7c8:	01007084 	movi	r4,450
     7cc:	01401c84 	movi	r5,114
     7d0:	000185c0 	call	185c <UsbWrite>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
     7d4:	01000044 	movi	r4,1
     7d8:	01738054 	movui	r5,52737
     7dc:	00002c80 	call	2c8 <IO_write>

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
     7e0:	0001883a 	nop
     7e4:	010000c4 	movi	r4,3
     7e8:	00003300 	call	330 <IO_read>
     7ec:	10bfffcc 	andi	r2,r2,65535
     7f0:	103ffc26 	beq	r2,zero,7e4 <__alt_data_end+0xfffab0b4>
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
     7f4:	0001883a 	nop
     7f8:	01000044 	movi	r4,1
     7fc:	00003300 	call	330 <IO_read>
     800:	10bfffcc 	andi	r2,r2,65535
     804:	1083fb58 	cmpnei	r2,r2,4077
     808:	10000826 	beq	r2,zero,82c <setup_keyboard+0x18c>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
     80c:	01000044 	movi	r4,1
     810:	00003300 	call	330 <IO_read>
     814:	10bfffcc 	andi	r2,r2,65535
     818:	01000074 	movhi	r4,1
     81c:	21071c04 	addi	r4,r4,7280
     820:	100b883a 	mov	r5,r2
     824:	000319c0 	call	319c <printf>
		goto USB_HOT_PLUG;
     828:	003fa506 	br	6c0 <__alt_data_end+0xfffaaf90>
	}
	// STEP 1b end

	printf("STEP 1 Complete");
     82c:	01000074 	movhi	r4,1
     830:	21072504 	addi	r4,r4,7316
     834:	000319c0 	call	319c <printf>
	// STEP 2 begin
	UsbWrite(COMM_INT_NUM,HUSB_RESET_INT); //husb reset
     838:	01007084 	movi	r4,450
     83c:	01401d04 	movi	r5,116
     840:	000185c0 	call	185c <UsbWrite>
	UsbWrite(COMM_R0,0x003c);//reset time
     844:	01007104 	movi	r4,452
     848:	01400f04 	movi	r5,60
     84c:	000185c0 	call	185c <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
     850:	01007184 	movi	r4,454
     854:	000b883a 	mov	r5,zero
     858:	000185c0 	call	185c <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
     85c:	01007204 	movi	r4,456
     860:	000b883a 	mov	r5,zero
     864:	000185c0 	call	185c <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
     868:	01007284 	movi	r4,458
     86c:	000b883a 	mov	r5,zero
     870:	000185c0 	call	185c <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
     874:	01007304 	movi	r4,460
     878:	000b883a 	mov	r5,zero
     87c:	000185c0 	call	185c <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
     880:	01007384 	movi	r4,462
     884:	000b883a 	mov	r5,zero
     888:	000185c0 	call	185c <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
     88c:	01007404 	movi	r4,464
     890:	000b883a 	mov	r5,zero
     894:	000185c0 	call	185c <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
     898:	01007484 	movi	r4,466
     89c:	000b883a 	mov	r5,zero
     8a0:	000185c0 	call	185c <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
     8a4:	01007504 	movi	r4,468
     8a8:	000b883a 	mov	r5,zero
     8ac:	000185c0 	call	185c <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
     8b0:	01007584 	movi	r4,470
     8b4:	000b883a 	mov	r5,zero
     8b8:	000185c0 	call	185c <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
     8bc:	01007604 	movi	r4,472
     8c0:	000b883a 	mov	r5,zero
     8c4:	000185c0 	call	185c <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
     8c8:	01007684 	movi	r4,474
     8cc:	000b883a 	mov	r5,zero
     8d0:	000185c0 	call	185c <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
     8d4:	01007704 	movi	r4,476
     8d8:	000b883a 	mov	r5,zero
     8dc:	000185c0 	call	185c <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
     8e0:	01007784 	movi	r4,478
     8e4:	000b883a 	mov	r5,zero
     8e8:	000185c0 	call	185c <UsbWrite>

	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
     8ec:	01000044 	movi	r4,1
     8f0:	01738054 	movui	r5,52737
     8f4:	00002c80 	call	2c8 <IO_write>

	while (IO_read(HPI_MAILBOX) != COMM_ACK)
     8f8:	0001883a 	nop
     8fc:	01000044 	movi	r4,1
     900:	00003300 	call	330 <IO_read>
     904:	10bfffcc 	andi	r2,r2,65535
     908:	1083fb58 	cmpnei	r2,r2,4077
     90c:	10000826 	beq	r2,zero,930 <setup_keyboard+0x290>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
     910:	01000044 	movi	r4,1
     914:	00003300 	call	330 <IO_read>
     918:	10bfffcc 	andi	r2,r2,65535
     91c:	01000074 	movhi	r4,1
     920:	21071c04 	addi	r4,r4,7280
     924:	100b883a 	mov	r5,r2
     928:	000319c0 	call	319c <printf>
		goto USB_HOT_PLUG;
     92c:	003f6406 	br	6c0 <__alt_data_end+0xfffaaf90>
	}
	// STEP 2 end

	ctl_reg = USB1_CTL_REG;
     930:	00b02284 	movi	r2,-16246
     934:	d0a6cb0d 	sth	r2,-25812(gp)
	no_device = (A_DP_STAT | A_DM_STAT);
     938:	008c0004 	movi	r2,12288
     93c:	d0a6cb8d 	sth	r2,-25810(gp)
	fs_device = A_DP_STAT;
     940:	00880004 	movi	r2,8192
     944:	d0a6cc0d 	sth	r2,-25808(gp)
	usb_ctl_val = UsbRead(ctl_reg);
     948:	d0a6cb0b 	ldhu	r2,-25812(gp)
     94c:	10bfffcc 	andi	r2,r2,65535
     950:	1009883a 	mov	r4,r2
     954:	00018b00 	call	18b0 <UsbRead>
     958:	d0a6cf0d 	sth	r2,-25796(gp)
		}
	}
	else
	{
		 check for low speed or full speed by reading D+ and D- lines */
		if (usb_ctl_val & fs_device)
     95c:	d0e6cf0b 	ldhu	r3,-25796(gp)
     960:	d0a6cc0b 	ldhu	r2,-25808(gp)
     964:	1884703a 	and	r2,r3,r2
     968:	10bfffcc 	andi	r2,r2,65535
     96c:	10000426 	beq	r2,zero,980 <setup_keyboard+0x2e0>
		{
			printf("[INFO]: full speed device\n");
     970:	01000074 	movhi	r4,1
     974:	21072904 	addi	r4,r4,7332
     978:	00032900 	call	3290 <puts>
     97c:	00000306 	br	98c <setup_keyboard+0x2ec>
		}
		else
		{
			printf("[INFO]: low speed device\n");
     980:	01000074 	movhi	r4,1
     984:	21073004 	addi	r4,r4,7360
     988:	00032900 	call	3290 <puts>



	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();
     98c:	00019a40 	call	19a4 <UsbSetAddress>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     990:	00000306 	br	9a0 <setup_keyboard+0x300>
	{
		UsbSetAddress();
     994:	00019a40 	call	19a4 <UsbSetAddress>
		usleep(10*1000);
     998:	0109c404 	movi	r4,10000
     99c:	000fbd00 	call	fbd0 <usleep>

	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     9a0:	010000c4 	movi	r4,3
     9a4:	00003300 	call	330 <IO_read>
     9a8:	10bfffcc 	andi	r2,r2,65535
     9ac:	1080040c 	andi	r2,r2,16
     9b0:	103ff826 	beq	r2,zero,994 <__alt_data_end+0xfffab264>
	{
		UsbSetAddress();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     9b4:	00028200 	call	2820 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506); // i
     9b8:	01000084 	movi	r4,2
     9bc:	01414184 	movi	r5,1286
     9c0:	00002c80 	call	2c8 <IO_write>
	printf("[ENUM PROCESS]:step 3 TD Status Byte is %x\n",IO_read(HPI_DATA));
     9c4:	0009883a 	mov	r4,zero
     9c8:	00003300 	call	330 <IO_read>
     9cc:	10bfffcc 	andi	r2,r2,65535
     9d0:	01000074 	movhi	r4,1
     9d4:	21073704 	addi	r4,r4,7388
     9d8:	100b883a 	mov	r5,r2
     9dc:	000319c0 	call	319c <printf>

	IO_write(HPI_ADDR,0x0508); // n
     9e0:	01000084 	movi	r4,2
     9e4:	01414204 	movi	r5,1288
     9e8:	00002c80 	call	2c8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     9ec:	0009883a 	mov	r4,zero
     9f0:	00003300 	call	330 <IO_read>
     9f4:	d0a6cf0d 	sth	r2,-25796(gp)
	printf("[ENUM PROCESS]:step 3 TD Control Byte is %x\n",usb_ctl_val);
     9f8:	d0a6cf0b 	ldhu	r2,-25796(gp)
     9fc:	10bfffcc 	andi	r2,r2,65535
     a00:	01000074 	movhi	r4,1
     a04:	21074204 	addi	r4,r4,7432
     a08:	100b883a 	mov	r5,r2
     a0c:	000319c0 	call	319c <printf>
	while (usb_ctl_val != 0x03) // retries occurred
     a10:	0001883a 	nop
     a14:	d0a6cf0b 	ldhu	r2,-25796(gp)
     a18:	10bfffcc 	andi	r2,r2,65535
     a1c:	108000d8 	cmpnei	r2,r2,3
     a20:	10000326 	beq	r2,zero,a30 <setup_keyboard+0x390>
	{
		usb_ctl_val = UsbGetRetryCnt();
     a24:	00028a40 	call	28a4 <UsbGetRetryCnt>
     a28:	d0a6cf0d 	sth	r2,-25796(gp)

		goto USB_HOT_PLUG;
     a2c:	003f2406 	br	6c0 <__alt_data_end+0xfffaaf90>
	}

	printf("------------[ENUM PROCESS]:set address done!---------------\n");
     a30:	01000074 	movhi	r4,1
     a34:	21074e04 	addi	r4,r4,7480
     a38:	00032900 	call	3290 <puts>

	// STEP 4 begin
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1
     a3c:	0001aa00 	call	1aa0 <UsbGetDeviceDesc1>

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     a40:	00000306 	br	a50 <setup_keyboard+0x3b0>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
     a44:	0001aa00 	call	1aa0 <UsbGetDeviceDesc1>
		usleep(10*1000);
     a48:	0109c404 	movi	r4,10000
     a4c:	000fbd00 	call	fbd0 <usleep>
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     a50:	010000c4 	movi	r4,3
     a54:	00003300 	call	330 <IO_read>
     a58:	10bfffcc 	andi	r2,r2,65535
     a5c:	1080040c 	andi	r2,r2,16
     a60:	103ff826 	beq	r2,zero,a44 <__alt_data_end+0xfffab314>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     a64:	00028200 	call	2820 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     a68:	01000084 	movi	r4,2
     a6c:	01414184 	movi	r5,1286
     a70:	00002c80 	call	2c8 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
     a74:	0009883a 	mov	r4,zero
     a78:	00003300 	call	330 <IO_read>
     a7c:	10bfffcc 	andi	r2,r2,65535
     a80:	01000074 	movhi	r4,1
     a84:	21075d04 	addi	r4,r4,7540
     a88:	100b883a 	mov	r5,r2
     a8c:	000319c0 	call	319c <printf>

	IO_write(HPI_ADDR,0x0508);
     a90:	01000084 	movi	r4,2
     a94:	01414204 	movi	r5,1288
     a98:	00002c80 	call	2c8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     a9c:	0009883a 	mov	r4,zero
     aa0:	00003300 	call	330 <IO_read>
     aa4:	d0a6cf0d 	sth	r2,-25796(gp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
     aa8:	d0a6cf0b 	ldhu	r2,-25796(gp)
     aac:	10bfffcc 	andi	r2,r2,65535
     ab0:	01000074 	movhi	r4,1
     ab4:	21076804 	addi	r4,r4,7584
     ab8:	100b883a 	mov	r5,r2
     abc:	000319c0 	call	319c <printf>
	while (usb_ctl_val != 0x03)
     ac0:	00000206 	br	acc <setup_keyboard+0x42c>
	{
		usb_ctl_val = UsbGetRetryCnt();
     ac4:	00028a40 	call	28a4 <UsbGetRetryCnt>
     ac8:	d0a6cf0d 	sth	r2,-25796(gp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
     acc:	d0a6cf0b 	ldhu	r2,-25796(gp)
     ad0:	10bfffcc 	andi	r2,r2,65535
     ad4:	108000d8 	cmpnei	r2,r2,3
     ad8:	103ffa1e 	bne	r2,zero,ac4 <__alt_data_end+0xfffab394>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get device descriptor-1 done!-----------------\n");
     adc:	01000074 	movhi	r4,1
     ae0:	21077404 	addi	r4,r4,7632
     ae4:	00032900 	call	3290 <puts>


	//--------------------------------get device descriptor-2---------------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2
     ae8:	0001be40 	call	1be4 <UsbGetDeviceDesc2>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     aec:	00000306 	br	afc <setup_keyboard+0x45c>
	{
		//resend the get device descriptor
		//get device descriptor
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
     af0:	0001be40 	call	1be4 <UsbGetDeviceDesc2>
		usleep(10*1000);
     af4:	0109c404 	movi	r4,10000
     af8:	000fbd00 	call	fbd0 <usleep>
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     afc:	010000c4 	movi	r4,3
     b00:	00003300 	call	330 <IO_read>
     b04:	10bfffcc 	andi	r2,r2,65535
     b08:	1080040c 	andi	r2,r2,16
     b0c:	103ff826 	beq	r2,zero,af0 <__alt_data_end+0xfffab3c0>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     b10:	00028200 	call	2820 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     b14:	01000084 	movi	r4,2
     b18:	01414184 	movi	r5,1286
     b1c:	00002c80 	call	2c8 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
     b20:	0009883a 	mov	r4,zero
     b24:	00003300 	call	330 <IO_read>
     b28:	10bfffcc 	andi	r2,r2,65535
     b2c:	01000074 	movhi	r4,1
     b30:	21075d04 	addi	r4,r4,7540
     b34:	100b883a 	mov	r5,r2
     b38:	000319c0 	call	319c <printf>

	IO_write(HPI_ADDR,0x0508);
     b3c:	01000084 	movi	r4,2
     b40:	01414204 	movi	r5,1288
     b44:	00002c80 	call	2c8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     b48:	0009883a 	mov	r4,zero
     b4c:	00003300 	call	330 <IO_read>
     b50:	d0a6cf0d 	sth	r2,-25796(gp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
     b54:	d0a6cf0b 	ldhu	r2,-25796(gp)
     b58:	10bfffcc 	andi	r2,r2,65535
     b5c:	01000074 	movhi	r4,1
     b60:	21076804 	addi	r4,r4,7584
     b64:	100b883a 	mov	r5,r2
     b68:	000319c0 	call	319c <printf>
	while (usb_ctl_val != 0x03)
     b6c:	00000206 	br	b78 <setup_keyboard+0x4d8>
	{
		usb_ctl_val = UsbGetRetryCnt();
     b70:	00028a40 	call	28a4 <UsbGetRetryCnt>
     b74:	d0a6cf0d 	sth	r2,-25796(gp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
     b78:	d0a6cf0b 	ldhu	r2,-25796(gp)
     b7c:	10bfffcc 	andi	r2,r2,65535
     b80:	108000d8 	cmpnei	r2,r2,3
     b84:	103ffa1e 	bne	r2,zero,b70 <__alt_data_end+0xfffab440>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get device descriptor-2 done!--------------\n");
     b88:	01000074 	movhi	r4,1
     b8c:	21078804 	addi	r4,r4,7712
     b90:	00032900 	call	3290 <puts>


	// STEP 5 begin
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1
     b94:	0001db80 	call	1db8 <UsbGetConfigDesc1>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     b98:	00000306 	br	ba8 <setup_keyboard+0x508>
	{
		//resend the get device descriptor
		//get device descriptor

		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
     b9c:	0001db80 	call	1db8 <UsbGetConfigDesc1>
		usleep(10*1000);
     ba0:	0109c404 	movi	r4,10000
     ba4:	000fbd00 	call	fbd0 <usleep>
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     ba8:	010000c4 	movi	r4,3
     bac:	00003300 	call	330 <IO_read>
     bb0:	10bfffcc 	andi	r2,r2,65535
     bb4:	1080040c 	andi	r2,r2,16
     bb8:	103ff826 	beq	r2,zero,b9c <__alt_data_end+0xfffab46c>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     bbc:	00028200 	call	2820 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     bc0:	01000084 	movi	r4,2
     bc4:	01414184 	movi	r5,1286
     bc8:	00002c80 	call	2c8 <IO_write>
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));
     bcc:	0009883a 	mov	r4,zero
     bd0:	00003300 	call	330 <IO_read>
     bd4:	10bfffcc 	andi	r2,r2,65535
     bd8:	01000074 	movhi	r4,1
     bdc:	21079a04 	addi	r4,r4,7784
     be0:	100b883a 	mov	r5,r2
     be4:	000319c0 	call	319c <printf>

	IO_write(HPI_ADDR,0x0508);
     be8:	01000084 	movi	r4,2
     bec:	01414204 	movi	r5,1288
     bf0:	00002c80 	call	2c8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     bf4:	0009883a 	mov	r4,zero
     bf8:	00003300 	call	330 <IO_read>
     bfc:	d0a6cf0d 	sth	r2,-25796(gp)
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
     c00:	d0a6cf0b 	ldhu	r2,-25796(gp)
     c04:	10bfffcc 	andi	r2,r2,65535
     c08:	01000074 	movhi	r4,1
     c0c:	2107a504 	addi	r4,r4,7828
     c10:	100b883a 	mov	r5,r2
     c14:	000319c0 	call	319c <printf>
	while (usb_ctl_val != 0x03)
     c18:	00000206 	br	c24 <setup_keyboard+0x584>
	{
		usb_ctl_val = UsbGetRetryCnt();
     c1c:	00028a40 	call	28a4 <UsbGetRetryCnt>
     c20:	d0a6cf0d 	sth	r2,-25796(gp)
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
     c24:	d0a6cf0b 	ldhu	r2,-25796(gp)
     c28:	10bfffcc 	andi	r2,r2,65535
     c2c:	108000d8 	cmpnei	r2,r2,3
     c30:	103ffa1e 	bne	r2,zero,c1c <__alt_data_end+0xfffab4ec>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}
	printf("------------[ENUM PROCESS]:get configuration descriptor-1 pass------------\n");
     c34:	01000074 	movhi	r4,1
     c38:	2107b104 	addi	r4,r4,7876
     c3c:	00032900 	call	3290 <puts>

	// STEP 6 begin
	//-----------------------------------get configuration descriptor-2------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2
     c40:	0001f440 	call	1f44 <UsbGetConfigDesc2>

	usleep(100*1000);
     c44:	010000b4 	movhi	r4,2
     c48:	2121a804 	addi	r4,r4,-31072
     c4c:	000fbd00 	call	fbd0 <usleep>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     c50:	00000306 	br	c60 <setup_keyboard+0x5c0>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
     c54:	0001f440 	call	1f44 <UsbGetConfigDesc2>
		usleep(10*1000);
     c58:	0109c404 	movi	r4,10000
     c5c:	000fbd00 	call	fbd0 <usleep>
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2

	usleep(100*1000);
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     c60:	010000c4 	movi	r4,3
     c64:	00003300 	call	330 <IO_read>
     c68:	10bfffcc 	andi	r2,r2,65535
     c6c:	1080040c 	andi	r2,r2,16
     c70:	103ff826 	beq	r2,zero,c54 <__alt_data_end+0xfffab524>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     c74:	00028200 	call	2820 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     c78:	01000084 	movi	r4,2
     c7c:	01414184 	movi	r5,1286
     c80:	00002c80 	call	2c8 <IO_write>
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));
     c84:	0009883a 	mov	r4,zero
     c88:	00003300 	call	330 <IO_read>
     c8c:	10bfffcc 	andi	r2,r2,65535
     c90:	01000074 	movhi	r4,1
     c94:	2107c404 	addi	r4,r4,7952
     c98:	100b883a 	mov	r5,r2
     c9c:	000319c0 	call	319c <printf>

	IO_write(HPI_ADDR,0x0508);
     ca0:	01000084 	movi	r4,2
     ca4:	01414204 	movi	r5,1288
     ca8:	00002c80 	call	2c8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     cac:	0009883a 	mov	r4,zero
     cb0:	00003300 	call	330 <IO_read>
     cb4:	d0a6cf0d 	sth	r2,-25796(gp)
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
     cb8:	d0a6cf0b 	ldhu	r2,-25796(gp)
     cbc:	10bfffcc 	andi	r2,r2,65535
     cc0:	01000074 	movhi	r4,1
     cc4:	2107cf04 	addi	r4,r4,7996
     cc8:	100b883a 	mov	r5,r2
     ccc:	000319c0 	call	319c <printf>
	while (usb_ctl_val != 0x03)
     cd0:	00000206 	br	cdc <setup_keyboard+0x63c>
	{
		usb_ctl_val = UsbGetRetryCnt();
     cd4:	00028a40 	call	28a4 <UsbGetRetryCnt>
     cd8:	d0a6cf0d 	sth	r2,-25796(gp)
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
     cdc:	d0a6cf0b 	ldhu	r2,-25796(gp)
     ce0:	10bfffcc 	andi	r2,r2,65535
     ce4:	108000d8 	cmpnei	r2,r2,3
     ce8:	103ffa1e 	bne	r2,zero,cd4 <__alt_data_end+0xfffab5a4>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("-----------[ENUM PROCESS]:get configuration descriptor-2 done!------------\n");
     cec:	01000074 	movhi	r4,1
     cf0:	2107db04 	addi	r4,r4,8044
     cf4:	00032900 	call	3290 <puts>


	// ---------------------------------get device info---------------------------------------------//

	// TASK: Write the address to read from the memory for byte 7 of the interface descriptor to HPI_ADDR.
	IO_write(HPI_ADDR,0x056c);
     cf8:	01000084 	movi	r4,2
     cfc:	01415b04 	movi	r5,1388
     d00:	00002c80 	call	2c8 <IO_write>
	code = IO_read(HPI_DATA);
     d04:	0009883a 	mov	r4,zero
     d08:	00003300 	call	330 <IO_read>
     d0c:	d0a6d10d 	sth	r2,-25788(gp)
	code = code & 0x003;
     d10:	d0a6d10b 	ldhu	r2,-25788(gp)
     d14:	108000cc 	andi	r2,r2,3
     d18:	d0a6d10d 	sth	r2,-25788(gp)
	printf("\ncode = %x\n", code);
     d1c:	d0a6d10b 	ldhu	r2,-25788(gp)
     d20:	10bfffcc 	andi	r2,r2,65535
     d24:	01000074 	movhi	r4,1
     d28:	2107ee04 	addi	r4,r4,8120
     d2c:	100b883a 	mov	r5,r2
     d30:	000319c0 	call	319c <printf>

	if (code == 0x01)
     d34:	d0a6d10b 	ldhu	r2,-25788(gp)
     d38:	10bfffcc 	andi	r2,r2,65535
     d3c:	10800058 	cmpnei	r2,r2,1
     d40:	1000041e 	bne	r2,zero,d54 <setup_keyboard+0x6b4>
	{
		printf("\n[INFO]:check TD rec data7 \n[INFO]:Keyboard Detected!!!\n\n");
     d44:	01000074 	movhi	r4,1
     d48:	2107f104 	addi	r4,r4,8132
     d4c:	00032900 	call	3290 <puts>
     d50:	00000306 	br	d60 <setup_keyboard+0x6c0>
	}
	else
	{
		printf("\n[INFO]:Keyboard Not Detected!!! \n\n");
     d54:	01000074 	movhi	r4,1
     d58:	21080004 	addi	r4,r4,8192
     d5c:	00032900 	call	3290 <puts>
	}

	// TASK: Write the address to read from the memory for the endpoint descriptor to HPI_ADDR.

	IO_write(HPI_ADDR,0x0576);
     d60:	01000084 	movi	r4,2
     d64:	01415d84 	movi	r5,1398
     d68:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x073F);
     d6c:	0009883a 	mov	r4,zero
     d70:	0141cfc4 	movi	r5,1855
     d74:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x8105);
     d78:	0009883a 	mov	r4,zero
     d7c:	01604154 	movui	r5,33029
     d80:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0003);
     d84:	0009883a 	mov	r4,zero
     d88:	014000c4 	movi	r5,3
     d8c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);
     d90:	0009883a 	mov	r4,zero
     d94:	01400204 	movi	r5,8
     d98:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0xAC0A);
     d9c:	0009883a 	mov	r4,zero
     da0:	016b0294 	movui	r5,44042
     da4:	00002c80 	call	2c8 <IO_write>
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0576); //HUSB_SIE1_pCurrentTDPtr
     da8:	01006c04 	movi	r4,432
     dac:	01415d84 	movi	r5,1398
     db0:	000185c0 	call	185c <UsbWrite>

	//data_size = (IO_read(HPI_DATA)>>8)&0x0ff;
	//data_size = 0x08;//(IO_read(HPI_DATA))&0x0ff;
	//UsbPrintMem();
	IO_write(HPI_ADDR,0x057c);
     db4:	01000084 	movi	r4,2
     db8:	01415f04 	movi	r5,1404
     dbc:	00002c80 	call	2c8 <IO_write>
	data_size = (IO_read(HPI_DATA))&0x0ff;
     dc0:	0009883a 	mov	r4,zero
     dc4:	00003300 	call	330 <IO_read>
     dc8:	d0a6cf85 	stb	r2,-25794(gp)
	printf("[ENUM PROCESS]:data packet size is %d\n",data_size);
     dcc:	d0a6cf83 	ldbu	r2,-25794(gp)
     dd0:	10803fcc 	andi	r2,r2,255
     dd4:	01000074 	movhi	r4,1
     dd8:	21080904 	addi	r4,r4,8228
     ddc:	100b883a 	mov	r5,r2
     de0:	000319c0 	call	319c <printf>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration
     de4:	00021a80 	call	21a8 <UsbSetConfig>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     de8:	00000306 	br	df8 <setup_keyboard+0x758>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
     dec:	00021a80 	call	21a8 <UsbSetConfig>
		usleep(10*1000);
     df0:	0109c404 	movi	r4,10000
     df4:	000fbd00 	call	fbd0 <usleep>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     df8:	010000c4 	movi	r4,3
     dfc:	00003300 	call	330 <IO_read>
     e00:	10bfffcc 	andi	r2,r2,65535
     e04:	1080040c 	andi	r2,r2,16
     e08:	103ff826 	beq	r2,zero,dec <__alt_data_end+0xfffab6bc>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     e0c:	00028200 	call	2820 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     e10:	01000084 	movi	r4,2
     e14:	01414184 	movi	r5,1286
     e18:	00002c80 	call	2c8 <IO_write>
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));
     e1c:	0009883a 	mov	r4,zero
     e20:	00003300 	call	330 <IO_read>
     e24:	10bfffcc 	andi	r2,r2,65535
     e28:	01000074 	movhi	r4,1
     e2c:	21081304 	addi	r4,r4,8268
     e30:	100b883a 	mov	r5,r2
     e34:	000319c0 	call	319c <printf>

	IO_write(HPI_ADDR,0x0508);
     e38:	01000084 	movi	r4,2
     e3c:	01414204 	movi	r5,1288
     e40:	00002c80 	call	2c8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     e44:	0009883a 	mov	r4,zero
     e48:	00003300 	call	330 <IO_read>
     e4c:	d0a6cf0d 	sth	r2,-25796(gp)
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
     e50:	d0a6cf0b 	ldhu	r2,-25796(gp)
     e54:	10bfffcc 	andi	r2,r2,65535
     e58:	01000074 	movhi	r4,1
     e5c:	21081e04 	addi	r4,r4,8312
     e60:	100b883a 	mov	r5,r2
     e64:	000319c0 	call	319c <printf>
	while (usb_ctl_val != 0x03)
     e68:	00000206 	br	e74 <setup_keyboard+0x7d4>
	{
		usb_ctl_val = UsbGetRetryCnt();
     e6c:	00028a40 	call	28a4 <UsbGetRetryCnt>
     e70:	d0a6cf0d 	sth	r2,-25796(gp)
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
     e74:	d0a6cf0b 	ldhu	r2,-25796(gp)
     e78:	10bfffcc 	andi	r2,r2,65535
     e7c:	108000d8 	cmpnei	r2,r2,3
     e80:	103ffa1e 	bne	r2,zero,e6c <__alt_data_end+0xfffab73c>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:set configuration done!-------------------\n");
     e84:	01000074 	movhi	r4,1
     e88:	21082a04 	addi	r4,r4,8360
     e8c:	00032900 	call	3290 <puts>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();
     e90:	00022a40 	call	22a4 <UsbClassRequest>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     e94:	00000306 	br	ea4 <setup_keyboard+0x804>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
     e98:	00022a40 	call	22a4 <UsbClassRequest>
		usleep(10*1000);
     e9c:	0109c404 	movi	r4,10000
     ea0:	000fbd00 	call	fbd0 <usleep>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     ea4:	010000c4 	movi	r4,3
     ea8:	00003300 	call	330 <IO_read>
     eac:	10bfffcc 	andi	r2,r2,65535
     eb0:	1080040c 	andi	r2,r2,16
     eb4:	103ff826 	beq	r2,zero,e98 <__alt_data_end+0xfffab768>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     eb8:	00028200 	call	2820 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     ebc:	01000084 	movi	r4,2
     ec0:	01414184 	movi	r5,1286
     ec4:	00002c80 	call	2c8 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
     ec8:	0009883a 	mov	r4,zero
     ecc:	00003300 	call	330 <IO_read>
     ed0:	10bfffcc 	andi	r2,r2,65535
     ed4:	01000074 	movhi	r4,1
     ed8:	21083c04 	addi	r4,r4,8432
     edc:	100b883a 	mov	r5,r2
     ee0:	000319c0 	call	319c <printf>

	IO_write(HPI_ADDR,0x0508);
     ee4:	01000084 	movi	r4,2
     ee8:	01414204 	movi	r5,1288
     eec:	00002c80 	call	2c8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     ef0:	0009883a 	mov	r4,zero
     ef4:	00003300 	call	330 <IO_read>
     ef8:	d0a6cf0d 	sth	r2,-25796(gp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
     efc:	d0a6cf0b 	ldhu	r2,-25796(gp)
     f00:	10bfffcc 	andi	r2,r2,65535
     f04:	01000074 	movhi	r4,1
     f08:	21084704 	addi	r4,r4,8476
     f0c:	100b883a 	mov	r5,r2
     f10:	000319c0 	call	319c <printf>
	while (usb_ctl_val != 0x03)
     f14:	00000206 	br	f20 <setup_keyboard+0x880>
	{
		usb_ctl_val = UsbGetRetryCnt();
     f18:	00028a40 	call	28a4 <UsbGetRetryCnt>
     f1c:	d0a6cf0d 	sth	r2,-25796(gp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
     f20:	d0a6cf0b 	ldhu	r2,-25796(gp)
     f24:	10bfffcc 	andi	r2,r2,65535
     f28:	108000d8 	cmpnei	r2,r2,3
     f2c:	103ffa1e 	bne	r2,zero,f18 <__alt_data_end+0xfffab7e8>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("------------[ENUM PROCESS]:class request out done!-------------------\n");
     f30:	01000074 	movhi	r4,1
     f34:	21085304 	addi	r4,r4,8524
     f38:	00032900 	call	3290 <puts>

	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();
     f3c:	00023a00 	call	23a0 <UsbGetHidDesc>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     f40:	00000306 	br	f50 <setup_keyboard+0x8b0>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
     f44:	00023a00 	call	23a0 <UsbGetHidDesc>
		usleep(10*1000);
     f48:	0109c404 	movi	r4,10000
     f4c:	000fbd00 	call	fbd0 <usleep>
	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     f50:	010000c4 	movi	r4,3
     f54:	00003300 	call	330 <IO_read>
     f58:	10bfffcc 	andi	r2,r2,65535
     f5c:	1080040c 	andi	r2,r2,16
     f60:	103ff826 	beq	r2,zero,f44 <__alt_data_end+0xfffab814>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     f64:	00028200 	call	2820 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     f68:	01000084 	movi	r4,2
     f6c:	01414184 	movi	r5,1286
     f70:	00002c80 	call	2c8 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
     f74:	0009883a 	mov	r4,zero
     f78:	00003300 	call	330 <IO_read>
     f7c:	10bfffcc 	andi	r2,r2,65535
     f80:	01000074 	movhi	r4,1
     f84:	21083c04 	addi	r4,r4,8432
     f88:	100b883a 	mov	r5,r2
     f8c:	000319c0 	call	319c <printf>

	IO_write(HPI_ADDR,0x0508);
     f90:	01000084 	movi	r4,2
     f94:	01414204 	movi	r5,1288
     f98:	00002c80 	call	2c8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     f9c:	0009883a 	mov	r4,zero
     fa0:	00003300 	call	330 <IO_read>
     fa4:	d0a6cf0d 	sth	r2,-25796(gp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
     fa8:	d0a6cf0b 	ldhu	r2,-25796(gp)
     fac:	10bfffcc 	andi	r2,r2,65535
     fb0:	01000074 	movhi	r4,1
     fb4:	21084704 	addi	r4,r4,8476
     fb8:	100b883a 	mov	r5,r2
     fbc:	000319c0 	call	319c <printf>
	while (usb_ctl_val != 0x03)
     fc0:	00000206 	br	fcc <setup_keyboard+0x92c>
	{
		usb_ctl_val = UsbGetRetryCnt();
     fc4:	00028a40 	call	28a4 <UsbGetRetryCnt>
     fc8:	d0a6cf0d 	sth	r2,-25796(gp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
     fcc:	d0a6cf0b 	ldhu	r2,-25796(gp)
     fd0:	10bfffcc 	andi	r2,r2,65535
     fd4:	108000d8 	cmpnei	r2,r2,3
     fd8:	103ffa1e 	bne	r2,zero,fc4 <__alt_data_end+0xfffab894>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get descriptor (class 0x21) done!-------------------\n");
     fdc:	01000074 	movhi	r4,1
     fe0:	21086504 	addi	r4,r4,8596
     fe4:	00032900 	call	3290 <puts>

	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
     fe8:	00024e40 	call	24e4 <UsbGetReportDesc>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     fec:	00000306 	br	ffc <setup_keyboard+0x95c>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
     ff0:	00024e40 	call	24e4 <UsbGetReportDesc>
		usleep(10*1000);
     ff4:	0109c404 	movi	r4,10000
     ff8:	000fbd00 	call	fbd0 <usleep>
	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     ffc:	010000c4 	movi	r4,3
    1000:	00003300 	call	330 <IO_read>
    1004:	10bfffcc 	andi	r2,r2,65535
    1008:	1080040c 	andi	r2,r2,16
    100c:	103ff826 	beq	r2,zero,ff0 <__alt_data_end+0xfffab8c0>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
    1010:	00028200 	call	2820 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
    1014:	01000084 	movi	r4,2
    1018:	01414184 	movi	r5,1286
    101c:	00002c80 	call	2c8 <IO_write>
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));
    1020:	0009883a 	mov	r4,zero
    1024:	00003300 	call	330 <IO_read>
    1028:	10bfffcc 	andi	r2,r2,65535
    102c:	01000074 	movhi	r4,1
    1030:	21087904 	addi	r4,r4,8676
    1034:	100b883a 	mov	r5,r2
    1038:	000319c0 	call	319c <printf>

	IO_write(HPI_ADDR,0x0508);
    103c:	01000084 	movi	r4,2
    1040:	01414204 	movi	r5,1288
    1044:	00002c80 	call	2c8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
    1048:	0009883a 	mov	r4,zero
    104c:	00003300 	call	330 <IO_read>
    1050:	d0a6cf0d 	sth	r2,-25796(gp)
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
    1054:	d0a6cf0b 	ldhu	r2,-25796(gp)
    1058:	10bfffcc 	andi	r2,r2,65535
    105c:	01000074 	movhi	r4,1
    1060:	21088504 	addi	r4,r4,8724
    1064:	100b883a 	mov	r5,r2
    1068:	000319c0 	call	319c <printf>
	while (usb_ctl_val != 0x03)
    106c:	00000206 	br	1078 <setup_keyboard+0x9d8>
	{
		usb_ctl_val = UsbGetRetryCnt();
    1070:	00028a40 	call	28a4 <UsbGetRetryCnt>
    1074:	d0a6cf0d 	sth	r2,-25796(gp)
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
    1078:	d0a6cf0b 	ldhu	r2,-25796(gp)
    107c:	10bfffcc 	andi	r2,r2,65535
    1080:	108000d8 	cmpnei	r2,r2,3
    1084:	103ffa1e 	bne	r2,zero,1070 <__alt_data_end+0xfffab940>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get descriptor (class 0x22) done!----------------\n");
    1088:	01000074 	movhi	r4,1
    108c:	21089104 	addi	r4,r4,8772
    1090:	00032900 	call	3290 <puts>


	//-----------------------------------get keycode value------------------------------------------------//


	return;
    1094:	0001883a 	nop
}
    1098:	e037883a 	mov	sp,fp
    109c:	dfc00117 	ldw	ra,4(sp)
    10a0:	df000017 	ldw	fp,0(sp)
    10a4:	dec00204 	addi	sp,sp,8
    10a8:	f800283a 	ret

000010ac <renderer>:

void move_player(player *current, int x_pos, int y_pos);
void fire_projectile(player *current);

void renderer(int x, int y, int sprite_num, int is_shadow)
{
    10ac:	defffa04 	addi	sp,sp,-24
    10b0:	dfc00515 	stw	ra,20(sp)
    10b4:	df000415 	stw	fp,16(sp)
    10b8:	df000404 	addi	fp,sp,16
    10bc:	e13ffc15 	stw	r4,-16(fp)
    10c0:	e17ffd15 	stw	r5,-12(fp)
    10c4:	e1bffe15 	stw	r6,-8(fp)
    10c8:	e1ffff15 	stw	r7,-4(fp)
	if(is_shadow==1)
    10cc:	e0bfff17 	ldw	r2,-4(fp)
    10d0:	10800058 	cmpnei	r2,r2,1
    10d4:	1000051e 	bne	r2,zero,10ec <renderer+0x40>
		*sw_to_hw = 4;
    10d8:	00800234 	movhi	r2,8
    10dc:	10842004 	addi	r2,r2,4224
    10e0:	00c00104 	movi	r3,4
    10e4:	10c00015 	stw	r3,0(r2)
    10e8:	00000606 	br	1104 <renderer+0x58>
	else
		*sw_to_hw &= 0;
    10ec:	00800234 	movhi	r2,8
    10f0:	10842004 	addi	r2,r2,4224
    10f4:	10800017 	ldw	r2,0(r2)
    10f8:	00800234 	movhi	r2,8
    10fc:	10842004 	addi	r2,r2,4224
    1100:	10000015 	stw	zero,0(r2)
	*sprite_number = sprite_num;
    1104:	00800234 	movhi	r2,8
    1108:	10842804 	addi	r2,r2,4256
    110c:	e0fffe17 	ldw	r3,-8(fp)
    1110:	10c00015 	stw	r3,0(r2)
	*sprite_xy = 1024*x + y;
    1114:	00800234 	movhi	r2,8
    1118:	10842404 	addi	r2,r2,4240
    111c:	e0fffc17 	ldw	r3,-16(fp)
    1120:	180892ba 	slli	r4,r3,10
    1124:	e0fffd17 	ldw	r3,-12(fp)
    1128:	20c7883a 	add	r3,r4,r3
    112c:	10c00015 	stw	r3,0(r2)
	*sw_to_hw |= 2;
    1130:	00800234 	movhi	r2,8
    1134:	10842004 	addi	r2,r2,4224
    1138:	00c00234 	movhi	r3,8
    113c:	18c42004 	addi	r3,r3,4224
    1140:	18c00017 	ldw	r3,0(r3)
    1144:	18c00094 	ori	r3,r3,2
    1148:	10c00015 	stw	r3,0(r2)
	while(*hw_to_sw%2 != 0)
    114c:	0001883a 	nop
    1150:	00800234 	movhi	r2,8
    1154:	10841c04 	addi	r2,r2,4208
    1158:	10800017 	ldw	r2,0(r2)
    115c:	1080004c 	andi	r2,r2,1
    1160:	103ffb1e 	bne	r2,zero,1150 <__alt_data_end+0xfffaba20>
	{}
	*sw_to_hw &= ~2;
    1164:	00800234 	movhi	r2,8
    1168:	10842004 	addi	r2,r2,4224
    116c:	00c00234 	movhi	r3,8
    1170:	18c42004 	addi	r3,r3,4224
    1174:	19000017 	ldw	r4,0(r3)
    1178:	00ffff44 	movi	r3,-3
    117c:	20c6703a 	and	r3,r4,r3
    1180:	10c00015 	stw	r3,0(r2)
	while(*hw_to_sw != 1)
    1184:	00000306 	br	1194 <renderer+0xe8>
	{printf("crap");}
    1188:	01000074 	movhi	r4,1
    118c:	2108a504 	addi	r4,r4,8852
    1190:	000319c0 	call	319c <printf>
	*sprite_xy = 1024*x + y;
	*sw_to_hw |= 2;
	while(*hw_to_sw%2 != 0)
	{}
	*sw_to_hw &= ~2;
	while(*hw_to_sw != 1)
    1194:	00800234 	movhi	r2,8
    1198:	10841c04 	addi	r2,r2,4208
    119c:	10800017 	ldw	r2,0(r2)
    11a0:	10800058 	cmpnei	r2,r2,1
    11a4:	103ff81e 	bne	r2,zero,1188 <__alt_data_end+0xfffaba58>
	{printf("crap");}
	*sw_to_hw |= 1;
    11a8:	00800234 	movhi	r2,8
    11ac:	10842004 	addi	r2,r2,4224
    11b0:	00c00234 	movhi	r3,8
    11b4:	18c42004 	addi	r3,r3,4224
    11b8:	18c00017 	ldw	r3,0(r3)
    11bc:	18c00054 	ori	r3,r3,1
    11c0:	10c00015 	stw	r3,0(r2)
	return;
    11c4:	0001883a 	nop
}
    11c8:	e037883a 	mov	sp,fp
    11cc:	dfc00117 	ldw	ra,4(sp)
    11d0:	df000017 	ldw	fp,0(sp)
    11d4:	dec00204 	addi	sp,sp,8
    11d8:	f800283a 	ret

000011dc <render_shadows>:

void render_shadows(player *first,player *second){
    11dc:	defffc04 	addi	sp,sp,-16
    11e0:	dfc00315 	stw	ra,12(sp)
    11e4:	df000215 	stw	fp,8(sp)
    11e8:	df000204 	addi	fp,sp,8
    11ec:	e13ffe15 	stw	r4,-8(fp)
    11f0:	e17fff15 	stw	r5,-4(fp)
	if(first==NULL || second ==NULL){
    11f4:	e0bffe17 	ldw	r2,-8(fp)
    11f8:	10000226 	beq	r2,zero,1204 <render_shadows+0x28>
    11fc:	e0bfff17 	ldw	r2,-4(fp)
    1200:	1000041e 	bne	r2,zero,1214 <render_shadows+0x38>
			printf("players not instantiated");
    1204:	01000074 	movhi	r4,1
    1208:	2108a704 	addi	r4,r4,8860
    120c:	000319c0 	call	319c <printf>
    1210:	00001406 	br	1264 <render_shadows+0x88>
	}
	else{
		renderer(first->old_x,first->old_y,first->id,1);
    1214:	e0bffe17 	ldw	r2,-8(fp)
    1218:	11000417 	ldw	r4,16(r2)
    121c:	e0bffe17 	ldw	r2,-8(fp)
    1220:	10c00517 	ldw	r3,20(r2)
    1224:	e0bffe17 	ldw	r2,-8(fp)
    1228:	10800317 	ldw	r2,12(r2)
    122c:	180b883a 	mov	r5,r3
    1230:	100d883a 	mov	r6,r2
    1234:	01c00044 	movi	r7,1
    1238:	00010ac0 	call	10ac <renderer>
		renderer(second->old_x,second->old_y,second->id,1);
    123c:	e0bfff17 	ldw	r2,-4(fp)
    1240:	11000417 	ldw	r4,16(r2)
    1244:	e0bfff17 	ldw	r2,-4(fp)
    1248:	10c00517 	ldw	r3,20(r2)
    124c:	e0bfff17 	ldw	r2,-4(fp)
    1250:	10800317 	ldw	r2,12(r2)
    1254:	180b883a 	mov	r5,r3
    1258:	100d883a 	mov	r6,r2
    125c:	01c00044 	movi	r7,1
    1260:	00010ac0 	call	10ac <renderer>
	}
	return;
    1264:	0001883a 	nop
}
    1268:	e037883a 	mov	sp,fp
    126c:	dfc00117 	ldw	ra,4(sp)
    1270:	df000017 	ldw	fp,0(sp)
    1274:	dec00204 	addi	sp,sp,8
    1278:	f800283a 	ret

0000127c <render_players>:

void render_players(player *first,player *second){
    127c:	defffc04 	addi	sp,sp,-16
    1280:	dfc00315 	stw	ra,12(sp)
    1284:	df000215 	stw	fp,8(sp)
    1288:	df000204 	addi	fp,sp,8
    128c:	e13ffe15 	stw	r4,-8(fp)
    1290:	e17fff15 	stw	r5,-4(fp)
	if(first==NULL || second ==NULL){
    1294:	e0bffe17 	ldw	r2,-8(fp)
    1298:	10000226 	beq	r2,zero,12a4 <render_players+0x28>
    129c:	e0bfff17 	ldw	r2,-4(fp)
    12a0:	1000041e 	bne	r2,zero,12b4 <render_players+0x38>
		printf("players not instantiated");
    12a4:	01000074 	movhi	r4,1
    12a8:	2108a704 	addi	r4,r4,8860
    12ac:	000319c0 	call	319c <printf>
    12b0:	00001406 	br	1304 <render_players+0x88>
	}
	else{
//		render_shadows(first,second);
		renderer(first->x_pos,first->y_pos,first->id,0);
    12b4:	e0bffe17 	ldw	r2,-8(fp)
    12b8:	11000017 	ldw	r4,0(r2)
    12bc:	e0bffe17 	ldw	r2,-8(fp)
    12c0:	10c00117 	ldw	r3,4(r2)
    12c4:	e0bffe17 	ldw	r2,-8(fp)
    12c8:	10800317 	ldw	r2,12(r2)
    12cc:	180b883a 	mov	r5,r3
    12d0:	100d883a 	mov	r6,r2
    12d4:	000f883a 	mov	r7,zero
    12d8:	00010ac0 	call	10ac <renderer>
		renderer(second->x_pos,second->y_pos,second->id,0);
    12dc:	e0bfff17 	ldw	r2,-4(fp)
    12e0:	11000017 	ldw	r4,0(r2)
    12e4:	e0bfff17 	ldw	r2,-4(fp)
    12e8:	10c00117 	ldw	r3,4(r2)
    12ec:	e0bfff17 	ldw	r2,-4(fp)
    12f0:	10800317 	ldw	r2,12(r2)
    12f4:	180b883a 	mov	r5,r3
    12f8:	100d883a 	mov	r6,r2
    12fc:	000f883a 	mov	r7,zero
    1300:	00010ac0 	call	10ac <renderer>
	}
}
    1304:	e037883a 	mov	sp,fp
    1308:	dfc00117 	ldw	ra,4(sp)
    130c:	df000017 	ldw	fp,0(sp)
    1310:	dec00204 	addi	sp,sp,8
    1314:	f800283a 	ret

00001318 <keycode_effect>:
int keycode_effect(player *first,player *second,unsigned int *arr){
    1318:	defff904 	addi	sp,sp,-28
    131c:	dfc00615 	stw	ra,24(sp)
    1320:	df000515 	stw	fp,20(sp)
    1324:	df000504 	addi	fp,sp,20
    1328:	e13ffd15 	stw	r4,-12(fp)
    132c:	e17ffe15 	stw	r5,-8(fp)
    1330:	e1bfff15 	stw	r6,-4(fp)
	int i=0;
    1334:	e03ffb15 	stw	zero,-20(fp)
	int j=0;
    1338:	e03ffc15 	stw	zero,-16(fp)
	for(i=0;i<4;i++){
    133c:	e03ffb15 	stw	zero,-20(fp)
    1340:	00007906 	br	1528 <keycode_effect+0x210>
		printf("keycode %d : %x\n", i, arr[i]);
    1344:	e0bffb17 	ldw	r2,-20(fp)
    1348:	1085883a 	add	r2,r2,r2
    134c:	1085883a 	add	r2,r2,r2
    1350:	1007883a 	mov	r3,r2
    1354:	e0bfff17 	ldw	r2,-4(fp)
    1358:	10c5883a 	add	r2,r2,r3
    135c:	10800017 	ldw	r2,0(r2)
    1360:	01000074 	movhi	r4,1
    1364:	2108ae04 	addi	r4,r4,8888
    1368:	e17ffb17 	ldw	r5,-20(fp)
    136c:	100d883a 	mov	r6,r2
    1370:	000319c0 	call	319c <printf>
		if(arr[i]==0x04){
    1374:	e0bffb17 	ldw	r2,-20(fp)
    1378:	1085883a 	add	r2,r2,r2
    137c:	1085883a 	add	r2,r2,r2
    1380:	1007883a 	mov	r3,r2
    1384:	e0bfff17 	ldw	r2,-4(fp)
    1388:	10c5883a 	add	r2,r2,r3
    138c:	10800017 	ldw	r2,0(r2)
    1390:	10800118 	cmpnei	r2,r2,4
    1394:	10000b1e 	bne	r2,zero,13c4 <keycode_effect+0xac>
			j=1;
    1398:	00800044 	movi	r2,1
    139c:	e0bffc15 	stw	r2,-16(fp)
			move_player(first,first->x_pos-5,first->y_pos);
    13a0:	e0bffd17 	ldw	r2,-12(fp)
    13a4:	10800017 	ldw	r2,0(r2)
    13a8:	10fffec4 	addi	r3,r2,-5
    13ac:	e0bffd17 	ldw	r2,-12(fp)
    13b0:	10800117 	ldw	r2,4(r2)
    13b4:	e13ffd17 	ldw	r4,-12(fp)
    13b8:	180b883a 	mov	r5,r3
    13bc:	100d883a 	mov	r6,r2
    13c0:	00017080 	call	1708 <move_player>
		}
		if(arr[i]==0x07){
    13c4:	e0bffb17 	ldw	r2,-20(fp)
    13c8:	1085883a 	add	r2,r2,r2
    13cc:	1085883a 	add	r2,r2,r2
    13d0:	1007883a 	mov	r3,r2
    13d4:	e0bfff17 	ldw	r2,-4(fp)
    13d8:	10c5883a 	add	r2,r2,r3
    13dc:	10800017 	ldw	r2,0(r2)
    13e0:	108001d8 	cmpnei	r2,r2,7
    13e4:	10000b1e 	bne	r2,zero,1414 <keycode_effect+0xfc>
			j=1;
    13e8:	00800044 	movi	r2,1
    13ec:	e0bffc15 	stw	r2,-16(fp)
			move_player(first,first->x_pos+5,first->y_pos);
    13f0:	e0bffd17 	ldw	r2,-12(fp)
    13f4:	10800017 	ldw	r2,0(r2)
    13f8:	10c00144 	addi	r3,r2,5
    13fc:	e0bffd17 	ldw	r2,-12(fp)
    1400:	10800117 	ldw	r2,4(r2)
    1404:	e13ffd17 	ldw	r4,-12(fp)
    1408:	180b883a 	mov	r5,r3
    140c:	100d883a 	mov	r6,r2
    1410:	00017080 	call	1708 <move_player>
		}
		if(arr[i]==0x1a){
    1414:	e0bffb17 	ldw	r2,-20(fp)
    1418:	1085883a 	add	r2,r2,r2
    141c:	1085883a 	add	r2,r2,r2
    1420:	1007883a 	mov	r3,r2
    1424:	e0bfff17 	ldw	r2,-4(fp)
    1428:	10c5883a 	add	r2,r2,r3
    142c:	10800017 	ldw	r2,0(r2)
    1430:	10800698 	cmpnei	r2,r2,26
    1434:	1000041e 	bne	r2,zero,1448 <keycode_effect+0x130>
			j=1;
    1438:	00800044 	movi	r2,1
    143c:	e0bffc15 	stw	r2,-16(fp)
			fire_projectile(first);
    1440:	e13ffd17 	ldw	r4,-12(fp)
    1444:	00015c00 	call	15c0 <fire_projectile>
		}
		if(arr[i]==0x50){
    1448:	e0bffb17 	ldw	r2,-20(fp)
    144c:	1085883a 	add	r2,r2,r2
    1450:	1085883a 	add	r2,r2,r2
    1454:	1007883a 	mov	r3,r2
    1458:	e0bfff17 	ldw	r2,-4(fp)
    145c:	10c5883a 	add	r2,r2,r3
    1460:	10800017 	ldw	r2,0(r2)
    1464:	10801418 	cmpnei	r2,r2,80
    1468:	10000b1e 	bne	r2,zero,1498 <keycode_effect+0x180>
			j=1;
    146c:	00800044 	movi	r2,1
    1470:	e0bffc15 	stw	r2,-16(fp)
			move_player(second,second->x_pos-5,second->y_pos);
    1474:	e0bffe17 	ldw	r2,-8(fp)
    1478:	10800017 	ldw	r2,0(r2)
    147c:	10fffec4 	addi	r3,r2,-5
    1480:	e0bffe17 	ldw	r2,-8(fp)
    1484:	10800117 	ldw	r2,4(r2)
    1488:	e13ffe17 	ldw	r4,-8(fp)
    148c:	180b883a 	mov	r5,r3
    1490:	100d883a 	mov	r6,r2
    1494:	00017080 	call	1708 <move_player>
		}
		if(arr[i]==0x4f){
    1498:	e0bffb17 	ldw	r2,-20(fp)
    149c:	1085883a 	add	r2,r2,r2
    14a0:	1085883a 	add	r2,r2,r2
    14a4:	1007883a 	mov	r3,r2
    14a8:	e0bfff17 	ldw	r2,-4(fp)
    14ac:	10c5883a 	add	r2,r2,r3
    14b0:	10800017 	ldw	r2,0(r2)
    14b4:	108013d8 	cmpnei	r2,r2,79
    14b8:	10000b1e 	bne	r2,zero,14e8 <keycode_effect+0x1d0>
			j=1;
    14bc:	00800044 	movi	r2,1
    14c0:	e0bffc15 	stw	r2,-16(fp)
			move_player(second,second->x_pos+5,second->y_pos);
    14c4:	e0bffe17 	ldw	r2,-8(fp)
    14c8:	10800017 	ldw	r2,0(r2)
    14cc:	10c00144 	addi	r3,r2,5
    14d0:	e0bffe17 	ldw	r2,-8(fp)
    14d4:	10800117 	ldw	r2,4(r2)
    14d8:	e13ffe17 	ldw	r4,-8(fp)
    14dc:	180b883a 	mov	r5,r3
    14e0:	100d883a 	mov	r6,r2
    14e4:	00017080 	call	1708 <move_player>
		}
		if(arr[i]==0x52){
    14e8:	e0bffb17 	ldw	r2,-20(fp)
    14ec:	1085883a 	add	r2,r2,r2
    14f0:	1085883a 	add	r2,r2,r2
    14f4:	1007883a 	mov	r3,r2
    14f8:	e0bfff17 	ldw	r2,-4(fp)
    14fc:	10c5883a 	add	r2,r2,r3
    1500:	10800017 	ldw	r2,0(r2)
    1504:	10801498 	cmpnei	r2,r2,82
    1508:	1000041e 	bne	r2,zero,151c <keycode_effect+0x204>
			j=1;
    150c:	00800044 	movi	r2,1
    1510:	e0bffc15 	stw	r2,-16(fp)
			fire_projectile(second);
    1514:	e13ffe17 	ldw	r4,-8(fp)
    1518:	00015c00 	call	15c0 <fire_projectile>
	}
}
int keycode_effect(player *first,player *second,unsigned int *arr){
	int i=0;
	int j=0;
	for(i=0;i<4;i++){
    151c:	e0bffb17 	ldw	r2,-20(fp)
    1520:	10800044 	addi	r2,r2,1
    1524:	e0bffb15 	stw	r2,-20(fp)
    1528:	e0bffb17 	ldw	r2,-20(fp)
    152c:	10800110 	cmplti	r2,r2,4
    1530:	103f841e 	bne	r2,zero,1344 <__alt_data_end+0xfffabc14>
		if(arr[i]==0x52){
			j=1;
			fire_projectile(second);
		}
	}
	return j;
    1534:	e0bffc17 	ldw	r2,-16(fp)
}
    1538:	e037883a 	mov	sp,fp
    153c:	dfc00117 	ldw	ra,4(sp)
    1540:	df000017 	ldw	fp,0(sp)
    1544:	dec00204 	addi	sp,sp,8
    1548:	f800283a 	ret

0000154c <parse_keycode>:
void parse_keycode(unsigned int *arr,unsigned int keycode1,unsigned int keycode2){
    154c:	defffc04 	addi	sp,sp,-16
    1550:	df000315 	stw	fp,12(sp)
    1554:	df000304 	addi	fp,sp,12
    1558:	e13ffd15 	stw	r4,-12(fp)
    155c:	e17ffe15 	stw	r5,-8(fp)
    1560:	e1bfff15 	stw	r6,-4(fp)
	arr[0]=keycode1%256;
    1564:	e0bffe17 	ldw	r2,-8(fp)
    1568:	10c03fcc 	andi	r3,r2,255
    156c:	e0bffd17 	ldw	r2,-12(fp)
    1570:	10c00015 	stw	r3,0(r2)
	arr[1]=keycode1/256;
    1574:	e0bffd17 	ldw	r2,-12(fp)
    1578:	10800104 	addi	r2,r2,4
    157c:	e0fffe17 	ldw	r3,-8(fp)
    1580:	1806d23a 	srli	r3,r3,8
    1584:	10c00015 	stw	r3,0(r2)
	arr[2]=keycode2%256;
    1588:	e0bffd17 	ldw	r2,-12(fp)
    158c:	10800204 	addi	r2,r2,8
    1590:	e0ffff17 	ldw	r3,-4(fp)
    1594:	18c03fcc 	andi	r3,r3,255
    1598:	10c00015 	stw	r3,0(r2)
	arr[3]=keycode2/256;
    159c:	e0bffd17 	ldw	r2,-12(fp)
    15a0:	10800304 	addi	r2,r2,12
    15a4:	e0ffff17 	ldw	r3,-4(fp)
    15a8:	1806d23a 	srli	r3,r3,8
    15ac:	10c00015 	stw	r3,0(r2)
}
    15b0:	e037883a 	mov	sp,fp
    15b4:	df000017 	ldw	fp,0(sp)
    15b8:	dec00104 	addi	sp,sp,4
    15bc:	f800283a 	ret

000015c0 <fire_projectile>:


void fire_projectile(player *current)
{
    15c0:	defffc04 	addi	sp,sp,-16
    15c4:	dfc00315 	stw	ra,12(sp)
    15c8:	df000215 	stw	fp,8(sp)
    15cc:	df000204 	addi	fp,sp,8
    15d0:	e13fff15 	stw	r4,-4(fp)
	player_projectile *new=(player_projectile*)malloc(sizeof(player_projectile));
    15d4:	01000504 	movi	r4,20
    15d8:	00029a00 	call	29a0 <malloc>
    15dc:	e0bffe15 	stw	r2,-8(fp)
	new->x_pos=current->x_pos;//TODO: Refine start point
    15e0:	e0bfff17 	ldw	r2,-4(fp)
    15e4:	10c00017 	ldw	r3,0(r2)
    15e8:	e0bffe17 	ldw	r2,-8(fp)
    15ec:	10c00015 	stw	r3,0(r2)
	new->y_pos=current->y_pos -20;
    15f0:	e0bfff17 	ldw	r2,-4(fp)
    15f4:	10800117 	ldw	r2,4(r2)
    15f8:	10fffb04 	addi	r3,r2,-20
    15fc:	e0bffe17 	ldw	r2,-8(fp)
    1600:	10c00115 	stw	r3,4(r2)
	if(projectiles==NULL){
    1604:	d0a6d217 	ldw	r2,-25784(gp)
    1608:	1000031e 	bne	r2,zero,1618 <fire_projectile+0x58>
		projectiles=new;
    160c:	e0bffe17 	ldw	r2,-8(fp)
    1610:	d0a6d215 	stw	r2,-25784(gp)
    1614:	00000506 	br	162c <fire_projectile+0x6c>
	}
	else{
		new->next=projectiles;
    1618:	d0e6d217 	ldw	r3,-25784(gp)
    161c:	e0bffe17 	ldw	r2,-8(fp)
    1620:	10c00415 	stw	r3,16(r2)
		projectiles=new;
    1624:	e0bffe17 	ldw	r2,-8(fp)
    1628:	d0a6d215 	stw	r2,-25784(gp)
	}
}
    162c:	e037883a 	mov	sp,fp
    1630:	dfc00117 	ldw	ra,4(sp)
    1634:	df000017 	ldw	fp,0(sp)
    1638:	dec00204 	addi	sp,sp,8
    163c:	f800283a 	ret

00001640 <check_projectiles>:

void check_projectiles()
{
    1640:	deffff04 	addi	sp,sp,-4
    1644:	df000015 	stw	fp,0(sp)
    1648:	d839883a 	mov	fp,sp

}
    164c:	e037883a 	mov	sp,fp
    1650:	df000017 	ldw	fp,0(sp)
    1654:	dec00104 	addi	sp,sp,4
    1658:	f800283a 	ret

0000165c <init_players>:



void init_players(player *first,player *second){
    165c:	defffc04 	addi	sp,sp,-16
    1660:	dfc00315 	stw	ra,12(sp)
    1664:	df000215 	stw	fp,8(sp)
    1668:	df000204 	addi	fp,sp,8
    166c:	e13ffe15 	stw	r4,-8(fp)
    1670:	e17fff15 	stw	r5,-4(fp)
	if(first==NULL || second ==NULL)
    1674:	e0bffe17 	ldw	r2,-8(fp)
    1678:	10000226 	beq	r2,zero,1684 <init_players+0x28>
    167c:	e0bfff17 	ldw	r2,-4(fp)
    1680:	1000041e 	bne	r2,zero,1694 <init_players+0x38>
	{
		printf("players not instantiated");
    1684:	01000074 	movhi	r4,1
    1688:	2108a704 	addi	r4,r4,8860
    168c:	000319c0 	call	319c <printf>
    1690:	00001806 	br	16f4 <init_players+0x98>
	}
	else{
		first->x_pos = 300,
    1694:	e0bffe17 	ldw	r2,-8(fp)
    1698:	00c04b04 	movi	r3,300
    169c:	10c00015 	stw	r3,0(r2)
		first->y_pos = 400;
    16a0:	e0bffe17 	ldw	r2,-8(fp)
    16a4:	00c06404 	movi	r3,400
    16a8:	10c00115 	stw	r3,4(r2)
		first->health = 3;
    16ac:	e0bffe17 	ldw	r2,-8(fp)
    16b0:	00c000c4 	movi	r3,3
    16b4:	10c00215 	stw	r3,8(r2)
		first->id=player_sprite1;
    16b8:	e0bffe17 	ldw	r2,-8(fp)
    16bc:	00c00084 	movi	r3,2
    16c0:	10c00315 	stw	r3,12(r2)
		second->x_pos= 200;
    16c4:	e0bfff17 	ldw	r2,-4(fp)
    16c8:	00c03204 	movi	r3,200
    16cc:	10c00015 	stw	r3,0(r2)
		second->y_pos= 200;
    16d0:	e0bfff17 	ldw	r2,-4(fp)
    16d4:	00c03204 	movi	r3,200
    16d8:	10c00115 	stw	r3,4(r2)
		second->health=3;
    16dc:	e0bfff17 	ldw	r2,-4(fp)
    16e0:	00c000c4 	movi	r3,3
    16e4:	10c00215 	stw	r3,8(r2)
		second->id = player_sprite1;
    16e8:	e0bfff17 	ldw	r2,-4(fp)
    16ec:	00c00084 	movi	r3,2
    16f0:	10c00315 	stw	r3,12(r2)
	}
}
    16f4:	e037883a 	mov	sp,fp
    16f8:	dfc00117 	ldw	ra,4(sp)
    16fc:	df000017 	ldw	fp,0(sp)
    1700:	dec00204 	addi	sp,sp,8
    1704:	f800283a 	ret

00001708 <move_player>:



void move_player(player *current, int x_pos, int y_pos){
    1708:	defffb04 	addi	sp,sp,-20
    170c:	dfc00415 	stw	ra,16(sp)
    1710:	df000315 	stw	fp,12(sp)
    1714:	df000304 	addi	fp,sp,12
    1718:	e13ffd15 	stw	r4,-12(fp)
    171c:	e17ffe15 	stw	r5,-8(fp)
    1720:	e1bfff15 	stw	r6,-4(fp)
	if(current==NULL)
    1724:	e0bffd17 	ldw	r2,-12(fp)
    1728:	1000041e 	bne	r2,zero,173c <move_player+0x34>
		{
			printf("players not instantiated");
    172c:	01000074 	movhi	r4,1
    1730:	2108a704 	addi	r4,r4,8860
    1734:	000319c0 	call	319c <printf>
    1738:	00001a06 	br	17a4 <move_player+0x9c>
		}
	else{
		current->old_x=current->x_pos;
    173c:	e0bffd17 	ldw	r2,-12(fp)
    1740:	10c00017 	ldw	r3,0(r2)
    1744:	e0bffd17 	ldw	r2,-12(fp)
    1748:	10c00415 	stw	r3,16(r2)
		current->old_y=current->y_pos;
    174c:	e0bffd17 	ldw	r2,-12(fp)
    1750:	10c00117 	ldw	r3,4(r2)
    1754:	e0bffd17 	ldw	r2,-12(fp)
    1758:	10c00515 	stw	r3,20(r2)
		if((x_pos+64) < x_bounds && x_pos > 0 && y_pos > 0 && (y_pos+64)<y_bounds){
    175c:	e0bffe17 	ldw	r2,-8(fp)
    1760:	10801004 	addi	r2,r2,64
    1764:	1080a008 	cmpgei	r2,r2,640
    1768:	10000e1e 	bne	r2,zero,17a4 <move_player+0x9c>
    176c:	e0bffe17 	ldw	r2,-8(fp)
    1770:	00800c0e 	bge	zero,r2,17a4 <move_player+0x9c>
    1774:	e0bfff17 	ldw	r2,-4(fp)
    1778:	00800a0e 	bge	zero,r2,17a4 <move_player+0x9c>
    177c:	e0bfff17 	ldw	r2,-4(fp)
    1780:	10801004 	addi	r2,r2,64
    1784:	10807808 	cmpgei	r2,r2,480
    1788:	1000061e 	bne	r2,zero,17a4 <move_player+0x9c>
			current->x_pos = x_pos;
    178c:	e0bffd17 	ldw	r2,-12(fp)
    1790:	e0fffe17 	ldw	r3,-8(fp)
    1794:	10c00015 	stw	r3,0(r2)
			current->y_pos = y_pos;
    1798:	e0bffd17 	ldw	r2,-12(fp)
    179c:	e0ffff17 	ldw	r3,-4(fp)
    17a0:	10c00115 	stw	r3,4(r2)
		}
	}
}
    17a4:	e037883a 	mov	sp,fp
    17a8:	dfc00117 	ldw	ra,4(sp)
    17ac:	df000017 	ldw	fp,0(sp)
    17b0:	dec00204 	addi	sp,sp,8
    17b4:	f800283a 	ret

000017b8 <main>:



int main(void){
    17b8:	defff604 	addi	sp,sp,-40
    17bc:	dfc00915 	stw	ra,36(sp)
    17c0:	df000815 	stw	fp,32(sp)
    17c4:	df000804 	addi	fp,sp,32
	setup_keyboard();
    17c8:	00006a00 	call	6a0 <setup_keyboard>
	unsigned int keycode1,keycode2;
	player *first=(player *)malloc(sizeof(player));
    17cc:	01000604 	movi	r4,24
    17d0:	00029a00 	call	29a0 <malloc>
    17d4:	e0bff815 	stw	r2,-32(fp)
	player *second=(player *)malloc(sizeof(player));
    17d8:	01000604 	movi	r4,24
    17dc:	00029a00 	call	29a0 <malloc>
    17e0:	e0bff915 	stw	r2,-28(fp)
	init_players(first,second);
    17e4:	e13ff817 	ldw	r4,-32(fp)
    17e8:	e17ff917 	ldw	r5,-28(fp)
    17ec:	000165c0 	call	165c <init_players>
	unsigned int arr[4]={0,0,0,0};
    17f0:	e03ffc15 	stw	zero,-16(fp)
    17f4:	e03ffd15 	stw	zero,-12(fp)
    17f8:	e03ffe15 	stw	zero,-8(fp)
    17fc:	e03fff15 	stw	zero,-4(fp)
	while(1)
		{
			if(get_keycode(&keycode1,&keycode2)==0){
    1800:	e0fffa04 	addi	r3,fp,-24
    1804:	e0bffb04 	addi	r2,fp,-20
    1808:	1809883a 	mov	r4,r3
    180c:	100b883a 	mov	r5,r2
    1810:	00003940 	call	394 <get_keycode>
    1814:	1000101e 	bne	r2,zero,1858 <main+0xa0>
				parse_keycode(arr,keycode1,keycode2);
    1818:	e0fffa17 	ldw	r3,-24(fp)
    181c:	e0bffb17 	ldw	r2,-20(fp)
    1820:	e13ffc04 	addi	r4,fp,-16
    1824:	180b883a 	mov	r5,r3
    1828:	100d883a 	mov	r6,r2
    182c:	000154c0 	call	154c <parse_keycode>
				if(keycode_effect(first,second,arr)==1){
    1830:	e0bffc04 	addi	r2,fp,-16
    1834:	e13ff817 	ldw	r4,-32(fp)
    1838:	e17ff917 	ldw	r5,-28(fp)
    183c:	100d883a 	mov	r6,r2
    1840:	00013180 	call	1318 <keycode_effect>
    1844:	10800058 	cmpnei	r2,r2,1
    1848:	1000031e 	bne	r2,zero,1858 <main+0xa0>
				render_players(first,second);
    184c:	e13ff817 	ldw	r4,-32(fp)
    1850:	e17ff917 	ldw	r5,-28(fp)
    1854:	000127c0 	call	127c <render_players>
				}
			}

		}
    1858:	003fe906 	br	1800 <__alt_data_end+0xfffac0d0>

0000185c <UsbWrite>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbWrite(alt_u16 Address, alt_u16 Data)
{
    185c:	defffc04 	addi	sp,sp,-16
    1860:	dfc00315 	stw	ra,12(sp)
    1864:	df000215 	stw	fp,8(sp)
    1868:	df000204 	addi	fp,sp,8
    186c:	2007883a 	mov	r3,r4
    1870:	2805883a 	mov	r2,r5
    1874:	e0fffe0d 	sth	r3,-8(fp)
    1878:	e0bfff0d 	sth	r2,-4(fp)
	IO_write(HPI_ADDR_PORT, Address);
    187c:	e0bffe0b 	ldhu	r2,-8(fp)
    1880:	01000084 	movi	r4,2
    1884:	100b883a 	mov	r5,r2
    1888:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA_PORT, Data);
    188c:	e0bfff0b 	ldhu	r2,-4(fp)
    1890:	0009883a 	mov	r4,zero
    1894:	100b883a 	mov	r5,r2
    1898:	00002c80 	call	2c8 <IO_write>
}
    189c:	e037883a 	mov	sp,fp
    18a0:	dfc00117 	ldw	ra,4(sp)
    18a4:	df000017 	ldw	fp,0(sp)
    18a8:	dec00204 	addi	sp,sp,8
    18ac:	f800283a 	ret

000018b0 <UsbRead>:
 *
 * @note     None
 *
 ******************************************************************************/
alt_u16 UsbRead(alt_u16 Address)
{
    18b0:	defffd04 	addi	sp,sp,-12
    18b4:	dfc00215 	stw	ra,8(sp)
    18b8:	df000115 	stw	fp,4(sp)
    18bc:	df000104 	addi	fp,sp,4
    18c0:	2005883a 	mov	r2,r4
    18c4:	e0bfff0d 	sth	r2,-4(fp)
	IO_write(HPI_ADDR_PORT, Address);
    18c8:	e0bfff0b 	ldhu	r2,-4(fp)
    18cc:	01000084 	movi	r4,2
    18d0:	100b883a 	mov	r5,r2
    18d4:	00002c80 	call	2c8 <IO_write>
	return IO_read(HPI_DATA_PORT);
    18d8:	0009883a 	mov	r4,zero
    18dc:	00003300 	call	330 <IO_read>
}
    18e0:	e037883a 	mov	sp,fp
    18e4:	dfc00117 	ldw	ra,4(sp)
    18e8:	df000017 	ldw	fp,0(sp)
    18ec:	dec00204 	addi	sp,sp,8
    18f0:	f800283a 	ret

000018f4 <UsbSoftReset>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbSoftReset()
{
    18f4:	defffe04 	addi	sp,sp,-8
    18f8:	dfc00115 	stw	ra,4(sp)
    18fc:	df000015 	stw	fp,0(sp)
    1900:	d839883a 	mov	fp,sp
	//XIo_Out16(USB_MAILBOX, COMM_RESET);
	IO_write(HPI_MAILBOX,COMM_RESET); //COMM_JUMP2CODE
    1904:	01000044 	movi	r4,1
    1908:	017e9414 	movui	r5,64080
    190c:	00002c80 	call	2c8 <IO_write>
	usleep(100000);
    1910:	010000b4 	movhi	r4,2
    1914:	2121a804 	addi	r4,r4,-31072
    1918:	000fbd00 	call	fbd0 <usleep>
	printf("[USB INIT]:reset finished!\n");
    191c:	01000074 	movhi	r4,1
    1920:	2108b304 	addi	r4,r4,8908
    1924:	00032900 	call	3290 <puts>

	usleep(500000);
    1928:	01000234 	movhi	r4,8
    192c:	21284804 	addi	r4,r4,-24288
    1930:	000fbd00 	call	fbd0 <usleep>
	printf("[USB INIT]:Clear up the interrupt\r\n");
    1934:	01000074 	movhi	r4,1
    1938:	2108ba04 	addi	r4,r4,8936
    193c:	00032900 	call	3290 <puts>
	IO_read(HPI_MAILBOX);
    1940:	01000044 	movi	r4,1
    1944:	00003300 	call	330 <IO_read>
	IO_read(HPI_STATUS);
    1948:	010000c4 	movi	r4,3
    194c:	00003300 	call	330 <IO_read>

	// Had to add the write due to a bug in BIOS where they overwrite
	// the mailbox after initialization with garbage.  The read clears
	// any pending interrupts.
	UsbRead (HPI_SIE1_MSG_ADR);
    1950:	01005104 	movi	r4,324
    1954:	00018b00 	call	18b0 <UsbRead>
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
    1958:	01005104 	movi	r4,324
    195c:	000b883a 	mov	r5,zero
    1960:	000185c0 	call	185c <UsbWrite>
	UsbRead (HPI_SIE2_MSG_ADR);
    1964:	01005204 	movi	r4,328
    1968:	00018b00 	call	18b0 <UsbRead>
	UsbWrite (HPI_SIE2_MSG_ADR, 0);
    196c:	01005204 	movi	r4,328
    1970:	000b883a 	mov	r5,zero
    1974:	000185c0 	call	185c <UsbWrite>


	UsbWrite (HOST1_STAT_REG, 0xFFFF);
    1978:	01302414 	movui	r4,49296
    197c:	017fffd4 	movui	r5,65535
    1980:	000185c0 	call	185c <UsbWrite>
	UsbWrite (HOST2_STAT_REG, 0xFFFF);
    1984:	01302c14 	movui	r4,49328
    1988:	017fffd4 	movui	r5,65535
    198c:	000185c0 	call	185c <UsbWrite>
}
    1990:	e037883a 	mov	sp,fp
    1994:	dfc00117 	ldw	ra,4(sp)
    1998:	df000017 	ldw	fp,0(sp)
    199c:	dec00204 	addi	sp,sp,8
    19a0:	f800283a 	ret

000019a4 <UsbSetAddress>:


void UsbSetAddress()
{
    19a4:	defffe04 	addi	sp,sp,-8
    19a8:	dfc00115 	stw	ra,4(sp)
    19ac:	df000015 	stw	fp,0(sp)
    19b0:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    19b4:	01000084 	movi	r4,2
    19b8:	01414004 	movi	r5,1280
    19bc:	00002c80 	call	2c8 <IO_write>
	// TD #1: 6 writes
	IO_write(HPI_DATA,0x050C);
    19c0:	0009883a 	mov	r4,zero
    19c4:	01414304 	movi	r5,1292
    19c8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    19cc:	0009883a 	mov	r4,zero
    19d0:	01400204 	movi	r5,8
    19d4:	00002c80 	call	2c8 <IO_write>
	// TASK: Complete with 4 more IOWR functions
	IO_write(HPI_DATA,0x00D0);
    19d8:	0009883a 	mov	r4,zero
    19dc:	01403404 	movi	r5,208
    19e0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);
    19e4:	0009883a 	mov	r4,zero
    19e8:	01400044 	movi	r5,1
    19ec:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    19f0:	0009883a 	mov	r4,zero
    19f4:	014004c4 	movi	r5,19
    19f8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0514);
    19fc:	0009883a 	mov	r4,zero
    1a00:	01414504 	movi	r5,1300
    1a04:	00002c80 	call	2c8 <IO_write>
	// TD #2: 4 writes
	// TASK: Complete with 4 IOWR functions
	IO_write(HPI_DATA,0x0500);
    1a08:	0009883a 	mov	r4,zero
    1a0c:	01414004 	movi	r5,1280
    1a10:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0002);
    1a14:	0009883a 	mov	r4,zero
    1a18:	01400084 	movi	r5,2
    1a1c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    1a20:	0009883a 	mov	r4,zero
    1a24:	000b883a 	mov	r5,zero
    1a28:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    1a2c:	0009883a 	mov	r4,zero
    1a30:	000b883a 	mov	r5,zero
    1a34:	00002c80 	call	2c8 <IO_write>
	// TD #3: 6 writes
	// TASK: Complete with 6 IOWR functions
	IO_write(HPI_DATA,0x0000); //
    1a38:	0009883a 	mov	r4,zero
    1a3c:	000b883a 	mov	r5,zero
    1a40:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//
    1a44:	0009883a 	mov	r4,zero
    1a48:	000b883a 	mov	r5,zero
    1a4c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0090);//
    1a50:	0009883a 	mov	r4,zero
    1a54:	01402404 	movi	r5,144
    1a58:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);
    1a5c:	0009883a 	mov	r4,zero
    1a60:	01401044 	movi	r5,65
    1a64:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    1a68:	0009883a 	mov	r4,zero
    1a6c:	014004c4 	movi	r5,19
    1a70:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    1a74:	0009883a 	mov	r4,zero
    1a78:	000b883a 	mov	r5,zero
    1a7c:	00002c80 	call	2c8 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    1a80:	01006c04 	movi	r4,432
    1a84:	01414004 	movi	r5,1280
    1a88:	000185c0 	call	185c <UsbWrite>
}
    1a8c:	e037883a 	mov	sp,fp
    1a90:	dfc00117 	ldw	ra,4(sp)
    1a94:	df000017 	ldw	fp,0(sp)
    1a98:	dec00204 	addi	sp,sp,8
    1a9c:	f800283a 	ret

00001aa0 <UsbGetDeviceDesc1>:


void UsbGetDeviceDesc1()
{
    1aa0:	defffe04 	addi	sp,sp,-8
    1aa4:	dfc00115 	stw	ra,4(sp)
    1aa8:	df000015 	stw	fp,0(sp)
    1aac:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    1ab0:	01000084 	movi	r4,2
    1ab4:	01414004 	movi	r5,1280
    1ab8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x050C);
    1abc:	0009883a 	mov	r4,zero
    1ac0:	01414304 	movi	r5,1292
    1ac4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    1ac8:	0009883a 	mov	r4,zero
    1acc:	01400204 	movi	r5,8
    1ad0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    1ad4:	0009883a 	mov	r4,zero
    1ad8:	0140b404 	movi	r5,720
    1adc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);
    1ae0:	0009883a 	mov	r4,zero
    1ae4:	01400044 	movi	r5,1
    1ae8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    1aec:	0009883a 	mov	r4,zero
    1af0:	014004c4 	movi	r5,19
    1af4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0514);
    1af8:	0009883a 	mov	r4,zero
    1afc:	01414504 	movi	r5,1300
    1b00:	00002c80 	call	2c8 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
    1b04:	0009883a 	mov	r4,zero
    1b08:	0141a004 	movi	r5,1664
    1b0c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0100); //device 0x01
    1b10:	0009883a 	mov	r4,zero
    1b14:	01404004 	movi	r5,256
    1b18:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    1b1c:	0009883a 	mov	r4,zero
    1b20:	000b883a 	mov	r5,zero
    1b24:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);
    1b28:	0009883a 	mov	r4,zero
    1b2c:	01400204 	movi	r5,8
    1b30:	00002c80 	call	2c8 <IO_write>

	//data phase IN
	IO_write(HPI_DATA,0x052C); //
    1b34:	0009883a 	mov	r4,zero
    1b38:	01414b04 	movi	r5,1324
    1b3c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//
    1b40:	0009883a 	mov	r4,zero
    1b44:	01400204 	movi	r5,8
    1b48:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//
    1b4c:	0009883a 	mov	r4,zero
    1b50:	0140a404 	movi	r5,656
    1b54:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);
    1b58:	0009883a 	mov	r4,zero
    1b5c:	01401044 	movi	r5,65
    1b60:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    1b64:	0009883a 	mov	r4,zero
    1b68:	014004c4 	movi	r5,19
    1b6c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0520);
    1b70:	0009883a 	mov	r4,zero
    1b74:	01414804 	movi	r5,1312
    1b78:	00002c80 	call	2c8 <IO_write>

	//    //status phase
	IO_write(HPI_DATA,0x0000); //don't care
    1b7c:	0009883a 	mov	r4,zero
    1b80:	000b883a 	mov	r5,zero
    1b84:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
    1b88:	0009883a 	mov	r4,zero
    1b8c:	000b883a 	mov	r5,zero
    1b90:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0210);//device address
    1b94:	0009883a 	mov	r4,zero
    1b98:	01408404 	movi	r5,528
    1b9c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);
    1ba0:	0009883a 	mov	r4,zero
    1ba4:	01401044 	movi	r5,65
    1ba8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    1bac:	0009883a 	mov	r4,zero
    1bb0:	014004c4 	movi	r5,19
    1bb4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    1bb8:	0009883a 	mov	r4,zero
    1bbc:	000b883a 	mov	r5,zero
    1bc0:	00002c80 	call	2c8 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    1bc4:	01006c04 	movi	r4,432
    1bc8:	01414004 	movi	r5,1280
    1bcc:	000185c0 	call	185c <UsbWrite>
}
    1bd0:	e037883a 	mov	sp,fp
    1bd4:	dfc00117 	ldw	ra,4(sp)
    1bd8:	df000017 	ldw	fp,0(sp)
    1bdc:	dec00204 	addi	sp,sp,8
    1be0:	f800283a 	ret

00001be4 <UsbGetDeviceDesc2>:

void UsbGetDeviceDesc2()
{
    1be4:	defffe04 	addi	sp,sp,-8
    1be8:	dfc00115 	stw	ra,4(sp)
    1bec:	df000015 	stw	fp,0(sp)
    1bf0:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    1bf4:	01000084 	movi	r4,2
    1bf8:	01414004 	movi	r5,1280
    1bfc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x050C);
    1c00:	0009883a 	mov	r4,zero
    1c04:	01414304 	movi	r5,1292
    1c08:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    1c0c:	0009883a 	mov	r4,zero
    1c10:	01400204 	movi	r5,8
    1c14:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    1c18:	0009883a 	mov	r4,zero
    1c1c:	0140b404 	movi	r5,720
    1c20:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);
    1c24:	0009883a 	mov	r4,zero
    1c28:	01400044 	movi	r5,1
    1c2c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    1c30:	0009883a 	mov	r4,zero
    1c34:	014004c4 	movi	r5,19
    1c38:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0514);
    1c3c:	0009883a 	mov	r4,zero
    1c40:	01414504 	movi	r5,1300
    1c44:	00002c80 	call	2c8 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
    1c48:	0009883a 	mov	r4,zero
    1c4c:	0141a004 	movi	r5,1664
    1c50:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0100);//e //device 0x01
    1c54:	0009883a 	mov	r4,zero
    1c58:	01404004 	movi	r5,256
    1c5c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    1c60:	0009883a 	mov	r4,zero
    1c64:	000b883a 	mov	r5,zero
    1c68:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0012);//2
    1c6c:	0009883a 	mov	r4,zero
    1c70:	01400484 	movi	r5,18
    1c74:	00002c80 	call	2c8 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
    1c78:	0009883a 	mov	r4,zero
    1c7c:	01415104 	movi	r5,1348
    1c80:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    1c84:	0009883a 	mov	r4,zero
    1c88:	01400204 	movi	r5,8
    1c8c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    1c90:	0009883a 	mov	r4,zero
    1c94:	0140a404 	movi	r5,656
    1c98:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    1c9c:	0009883a 	mov	r4,zero
    1ca0:	01401044 	movi	r5,65
    1ca4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    1ca8:	0009883a 	mov	r4,zero
    1cac:	014004c4 	movi	r5,19
    1cb0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    1cb4:	0009883a 	mov	r4,zero
    1cb8:	01414804 	movi	r5,1312
    1cbc:	00002c80 	call	2c8 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
    1cc0:	0009883a 	mov	r4,zero
    1cc4:	01415304 	movi	r5,1356
    1cc8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
    1ccc:	0009883a 	mov	r4,zero
    1cd0:	01400204 	movi	r5,8
    1cd4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    1cd8:	0009883a 	mov	r4,zero
    1cdc:	0140a404 	movi	r5,656
    1ce0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);//6
    1ce4:	0009883a 	mov	r4,zero
    1ce8:	01400044 	movi	r5,1
    1cec:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    1cf0:	0009883a 	mov	r4,zero
    1cf4:	014004c4 	movi	r5,19
    1cf8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
    1cfc:	0009883a 	mov	r4,zero
    1d00:	01414b04 	movi	r5,1324
    1d04:	00002c80 	call	2c8 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0554); //c
    1d08:	0009883a 	mov	r4,zero
    1d0c:	01415504 	movi	r5,1364
    1d10:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0002);//e
    1d14:	0009883a 	mov	r4,zero
    1d18:	01400084 	movi	r5,2
    1d1c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
    1d20:	0009883a 	mov	r4,zero
    1d24:	0140a404 	movi	r5,656
    1d28:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    1d2c:	0009883a 	mov	r4,zero
    1d30:	01401044 	movi	r5,65
    1d34:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    1d38:	0009883a 	mov	r4,zero
    1d3c:	014004c4 	movi	r5,19
    1d40:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
    1d44:	0009883a 	mov	r4,zero
    1d48:	01414e04 	movi	r5,1336
    1d4c:	00002c80 	call	2c8 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //538
    1d50:	0009883a 	mov	r4,zero
    1d54:	000b883a 	mov	r5,zero
    1d58:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
    1d5c:	0009883a 	mov	r4,zero
    1d60:	000b883a 	mov	r5,zero
    1d64:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0210);//c
    1d68:	0009883a 	mov	r4,zero
    1d6c:	01408404 	movi	r5,528
    1d70:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//e
    1d74:	0009883a 	mov	r4,zero
    1d78:	01401044 	movi	r5,65
    1d7c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
    1d80:	0009883a 	mov	r4,zero
    1d84:	014004c4 	movi	r5,19
    1d88:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
    1d8c:	0009883a 	mov	r4,zero
    1d90:	000b883a 	mov	r5,zero
    1d94:	00002c80 	call	2c8 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    1d98:	01006c04 	movi	r4,432
    1d9c:	01414004 	movi	r5,1280
    1da0:	000185c0 	call	185c <UsbWrite>
}
    1da4:	e037883a 	mov	sp,fp
    1da8:	dfc00117 	ldw	ra,4(sp)
    1dac:	df000017 	ldw	fp,0(sp)
    1db0:	dec00204 	addi	sp,sp,8
    1db4:	f800283a 	ret

00001db8 <UsbGetConfigDesc1>:


void UsbGetConfigDesc1()
{
    1db8:	defffe04 	addi	sp,sp,-8
    1dbc:	dfc00115 	stw	ra,4(sp)
    1dc0:	df000015 	stw	fp,0(sp)
    1dc4:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    1dc8:	01000084 	movi	r4,2
    1dcc:	01414004 	movi	r5,1280
    1dd0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x050C);
    1dd4:	0009883a 	mov	r4,zero
    1dd8:	01414304 	movi	r5,1292
    1ddc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    1de0:	0009883a 	mov	r4,zero
    1de4:	01400204 	movi	r5,8
    1de8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    1dec:	0009883a 	mov	r4,zero
    1df0:	0140b404 	movi	r5,720
    1df4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);
    1df8:	0009883a 	mov	r4,zero
    1dfc:	01400044 	movi	r5,1
    1e00:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    1e04:	0009883a 	mov	r4,zero
    1e08:	014004c4 	movi	r5,19
    1e0c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0514);
    1e10:	0009883a 	mov	r4,zero
    1e14:	01414504 	movi	r5,1300
    1e18:	00002c80 	call	2c8 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
    1e1c:	0009883a 	mov	r4,zero
    1e20:	0141a004 	movi	r5,1664
    1e24:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
    1e28:	0009883a 	mov	r4,zero
    1e2c:	01408004 	movi	r5,512
    1e30:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    1e34:	0009883a 	mov	r4,zero
    1e38:	000b883a 	mov	r5,zero
    1e3c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0009);//2
    1e40:	0009883a 	mov	r4,zero
    1e44:	01400244 	movi	r5,9
    1e48:	00002c80 	call	2c8 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
    1e4c:	0009883a 	mov	r4,zero
    1e50:	01415104 	movi	r5,1348
    1e54:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    1e58:	0009883a 	mov	r4,zero
    1e5c:	01400204 	movi	r5,8
    1e60:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    1e64:	0009883a 	mov	r4,zero
    1e68:	0140a404 	movi	r5,656
    1e6c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    1e70:	0009883a 	mov	r4,zero
    1e74:	01401044 	movi	r5,65
    1e78:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    1e7c:	0009883a 	mov	r4,zero
    1e80:	014004c4 	movi	r5,19
    1e84:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    1e88:	0009883a 	mov	r4,zero
    1e8c:	01414804 	movi	r5,1312
    1e90:	00002c80 	call	2c8 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
    1e94:	0009883a 	mov	r4,zero
    1e98:	01415304 	movi	r5,1356
    1e9c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);//2
    1ea0:	0009883a 	mov	r4,zero
    1ea4:	01400044 	movi	r5,1
    1ea8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    1eac:	0009883a 	mov	r4,zero
    1eb0:	0140a404 	movi	r5,656
    1eb4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
    1eb8:	0009883a 	mov	r4,zero
    1ebc:	01400044 	movi	r5,1
    1ec0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    1ec4:	0009883a 	mov	r4,zero
    1ec8:	014004c4 	movi	r5,19
    1ecc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
    1ed0:	0009883a 	mov	r4,zero
    1ed4:	01414b04 	movi	r5,1324
    1ed8:	00002c80 	call	2c8 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
    1edc:	0009883a 	mov	r4,zero
    1ee0:	000b883a 	mov	r5,zero
    1ee4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
    1ee8:	0009883a 	mov	r4,zero
    1eec:	000b883a 	mov	r5,zero
    1ef0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
    1ef4:	0009883a 	mov	r4,zero
    1ef8:	01408404 	movi	r5,528
    1efc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    1f00:	0009883a 	mov	r4,zero
    1f04:	01401044 	movi	r5,65
    1f08:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    1f0c:	0009883a 	mov	r4,zero
    1f10:	014004c4 	movi	r5,19
    1f14:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
    1f18:	0009883a 	mov	r4,zero
    1f1c:	000b883a 	mov	r5,zero
    1f20:	00002c80 	call	2c8 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    1f24:	01006c04 	movi	r4,432
    1f28:	01414004 	movi	r5,1280
    1f2c:	000185c0 	call	185c <UsbWrite>
}
    1f30:	e037883a 	mov	sp,fp
    1f34:	dfc00117 	ldw	ra,4(sp)
    1f38:	df000017 	ldw	fp,0(sp)
    1f3c:	dec00204 	addi	sp,sp,8
    1f40:	f800283a 	ret

00001f44 <UsbGetConfigDesc2>:


void UsbGetConfigDesc2()
{
    1f44:	defffe04 	addi	sp,sp,-8
    1f48:	dfc00115 	stw	ra,4(sp)
    1f4c:	df000015 	stw	fp,0(sp)
    1f50:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    1f54:	01000084 	movi	r4,2
    1f58:	01414004 	movi	r5,1280
    1f5c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x050C);
    1f60:	0009883a 	mov	r4,zero
    1f64:	01414304 	movi	r5,1292
    1f68:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    1f6c:	0009883a 	mov	r4,zero
    1f70:	01400204 	movi	r5,8
    1f74:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    1f78:	0009883a 	mov	r4,zero
    1f7c:	0140b404 	movi	r5,720
    1f80:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);
    1f84:	0009883a 	mov	r4,zero
    1f88:	01400044 	movi	r5,1
    1f8c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    1f90:	0009883a 	mov	r4,zero
    1f94:	014004c4 	movi	r5,19
    1f98:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0514);
    1f9c:	0009883a 	mov	r4,zero
    1fa0:	01414504 	movi	r5,1300
    1fa4:	00002c80 	call	2c8 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
    1fa8:	0009883a 	mov	r4,zero
    1fac:	0141a004 	movi	r5,1664
    1fb0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
    1fb4:	0009883a 	mov	r4,zero
    1fb8:	01408004 	movi	r5,512
    1fbc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    1fc0:	0009883a 	mov	r4,zero
    1fc4:	000b883a 	mov	r5,zero
    1fc8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x00FF);//2
    1fcc:	0009883a 	mov	r4,zero
    1fd0:	01403fc4 	movi	r5,255
    1fd4:	00002c80 	call	2c8 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x055c); //514
    1fd8:	0009883a 	mov	r4,zero
    1fdc:	01415704 	movi	r5,1372
    1fe0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    1fe4:	0009883a 	mov	r4,zero
    1fe8:	01400204 	movi	r5,8
    1fec:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    1ff0:	0009883a 	mov	r4,zero
    1ff4:	0140a404 	movi	r5,656
    1ff8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    1ffc:	0009883a 	mov	r4,zero
    2000:	01401044 	movi	r5,65
    2004:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    2008:	0009883a 	mov	r4,zero
    200c:	014004c4 	movi	r5,19
    2010:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    2014:	0009883a 	mov	r4,zero
    2018:	01414804 	movi	r5,1312
    201c:	00002c80 	call	2c8 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0564); //520
    2020:	0009883a 	mov	r4,zero
    2024:	01415904 	movi	r5,1380
    2028:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
    202c:	0009883a 	mov	r4,zero
    2030:	01400204 	movi	r5,8
    2034:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    2038:	0009883a 	mov	r4,zero
    203c:	0140a404 	movi	r5,656
    2040:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
    2044:	0009883a 	mov	r4,zero
    2048:	01400044 	movi	r5,1
    204c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    2050:	0009883a 	mov	r4,zero
    2054:	014004c4 	movi	r5,19
    2058:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
    205c:	0009883a 	mov	r4,zero
    2060:	01414b04 	movi	r5,1324
    2064:	00002c80 	call	2c8 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x056c); //52c
    2068:	0009883a 	mov	r4,zero
    206c:	01415b04 	movi	r5,1388
    2070:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
    2074:	0009883a 	mov	r4,zero
    2078:	01400204 	movi	r5,8
    207c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
    2080:	0009883a 	mov	r4,zero
    2084:	0140a404 	movi	r5,656
    2088:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    208c:	0009883a 	mov	r4,zero
    2090:	01401044 	movi	r5,65
    2094:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    2098:	0009883a 	mov	r4,zero
    209c:	014004c4 	movi	r5,19
    20a0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
    20a4:	0009883a 	mov	r4,zero
    20a8:	01414e04 	movi	r5,1336
    20ac:	00002c80 	call	2c8 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0574); //538
    20b0:	0009883a 	mov	r4,zero
    20b4:	01415d04 	movi	r5,1396
    20b8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
    20bc:	0009883a 	mov	r4,zero
    20c0:	01400204 	movi	r5,8
    20c4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
    20c8:	0009883a 	mov	r4,zero
    20cc:	0140a404 	movi	r5,656
    20d0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
    20d4:	0009883a 	mov	r4,zero
    20d8:	01400044 	movi	r5,1
    20dc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
    20e0:	0009883a 	mov	r4,zero
    20e4:	014004c4 	movi	r5,19
    20e8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
    20ec:	0009883a 	mov	r4,zero
    20f0:	01415104 	movi	r5,1348
    20f4:	00002c80 	call	2c8 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x057c); //544
    20f8:	0009883a 	mov	r4,zero
    20fc:	01415f04 	movi	r5,1404
    2100:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0002);//6
    2104:	0009883a 	mov	r4,zero
    2108:	01400084 	movi	r5,2
    210c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    2110:	0009883a 	mov	r4,zero
    2114:	0140a404 	movi	r5,656
    2118:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
    211c:	0009883a 	mov	r4,zero
    2120:	01401044 	movi	r5,65
    2124:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    2128:	0009883a 	mov	r4,zero
    212c:	014004c4 	movi	r5,19
    2130:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
    2134:	0009883a 	mov	r4,zero
    2138:	01415404 	movi	r5,1360
    213c:	00002c80 	call	2c8 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //550
    2140:	0009883a 	mov	r4,zero
    2144:	000b883a 	mov	r5,zero
    2148:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
    214c:	0009883a 	mov	r4,zero
    2150:	000b883a 	mov	r5,zero
    2154:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0210);//4
    2158:	0009883a 	mov	r4,zero
    215c:	01408404 	movi	r5,528
    2160:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//6
    2164:	0009883a 	mov	r4,zero
    2168:	01401044 	movi	r5,65
    216c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    2170:	0009883a 	mov	r4,zero
    2174:	014004c4 	movi	r5,19
    2178:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
    217c:	0009883a 	mov	r4,zero
    2180:	000b883a 	mov	r5,zero
    2184:	00002c80 	call	2c8 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    2188:	01006c04 	movi	r4,432
    218c:	01414004 	movi	r5,1280
    2190:	000185c0 	call	185c <UsbWrite>
}
    2194:	e037883a 	mov	sp,fp
    2198:	dfc00117 	ldw	ra,4(sp)
    219c:	df000017 	ldw	fp,0(sp)
    21a0:	dec00204 	addi	sp,sp,8
    21a4:	f800283a 	ret

000021a8 <UsbSetConfig>:

void UsbSetConfig()
{
    21a8:	defffe04 	addi	sp,sp,-8
    21ac:	dfc00115 	stw	ra,4(sp)
    21b0:	df000015 	stw	fp,0(sp)
    21b4:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    21b8:	01000084 	movi	r4,2
    21bc:	01414004 	movi	r5,1280
    21c0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x050C);
    21c4:	0009883a 	mov	r4,zero
    21c8:	01414304 	movi	r5,1292
    21cc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    21d0:	0009883a 	mov	r4,zero
    21d4:	01400204 	movi	r5,8
    21d8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
    21dc:	0009883a 	mov	r4,zero
    21e0:	0140b404 	movi	r5,720
    21e4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);
    21e8:	0009883a 	mov	r4,zero
    21ec:	01400044 	movi	r5,1
    21f0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    21f4:	0009883a 	mov	r4,zero
    21f8:	014004c4 	movi	r5,19
    21fc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0514);
    2200:	0009883a 	mov	r4,zero
    2204:	01414504 	movi	r5,1300
    2208:	00002c80 	call	2c8 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0900);
    220c:	0009883a 	mov	r4,zero
    2210:	01424004 	movi	r5,2304
    2214:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);//device address
    2218:	0009883a 	mov	r4,zero
    221c:	01400044 	movi	r5,1
    2220:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    2224:	0009883a 	mov	r4,zero
    2228:	000b883a 	mov	r5,zero
    222c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    2230:	0009883a 	mov	r4,zero
    2234:	000b883a 	mov	r5,zero
    2238:	00002c80 	call	2c8 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
    223c:	0009883a 	mov	r4,zero
    2240:	000b883a 	mov	r5,zero
    2244:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
    2248:	0009883a 	mov	r4,zero
    224c:	000b883a 	mov	r5,zero
    2250:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
    2254:	0009883a 	mov	r4,zero
    2258:	0140a404 	movi	r5,656
    225c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
    2260:	0009883a 	mov	r4,zero
    2264:	01401044 	movi	r5,65
    2268:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    226c:	0009883a 	mov	r4,zero
    2270:	014004c4 	movi	r5,19
    2274:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    2278:	0009883a 	mov	r4,zero
    227c:	000b883a 	mov	r5,zero
    2280:	00002c80 	call	2c8 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    2284:	01006c04 	movi	r4,432
    2288:	01414004 	movi	r5,1280
    228c:	000185c0 	call	185c <UsbWrite>

}
    2290:	e037883a 	mov	sp,fp
    2294:	dfc00117 	ldw	ra,4(sp)
    2298:	df000017 	ldw	fp,0(sp)
    229c:	dec00204 	addi	sp,sp,8
    22a0:	f800283a 	ret

000022a4 <UsbClassRequest>:

void UsbClassRequest()
{
    22a4:	defffe04 	addi	sp,sp,-8
    22a8:	dfc00115 	stw	ra,4(sp)
    22ac:	df000015 	stw	fp,0(sp)
    22b0:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    22b4:	01000084 	movi	r4,2
    22b8:	01414004 	movi	r5,1280
    22bc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x050C);
    22c0:	0009883a 	mov	r4,zero
    22c4:	01414304 	movi	r5,1292
    22c8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    22cc:	0009883a 	mov	r4,zero
    22d0:	01400204 	movi	r5,8
    22d4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
    22d8:	0009883a 	mov	r4,zero
    22dc:	0140b404 	movi	r5,720
    22e0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);
    22e4:	0009883a 	mov	r4,zero
    22e8:	01400044 	movi	r5,1
    22ec:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    22f0:	0009883a 	mov	r4,zero
    22f4:	014004c4 	movi	r5,19
    22f8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0514);
    22fc:	0009883a 	mov	r4,zero
    2300:	01414504 	movi	r5,1300
    2304:	00002c80 	call	2c8 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0A21);
    2308:	0009883a 	mov	r4,zero
    230c:	01428844 	movi	r5,2593
    2310:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//device address
    2314:	0009883a 	mov	r4,zero
    2318:	000b883a 	mov	r5,zero
    231c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    2320:	0009883a 	mov	r4,zero
    2324:	000b883a 	mov	r5,zero
    2328:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    232c:	0009883a 	mov	r4,zero
    2330:	000b883a 	mov	r5,zero
    2334:	00002c80 	call	2c8 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
    2338:	0009883a 	mov	r4,zero
    233c:	000b883a 	mov	r5,zero
    2340:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number /data length
    2344:	0009883a 	mov	r4,zero
    2348:	000b883a 	mov	r5,zero
    234c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
    2350:	0009883a 	mov	r4,zero
    2354:	0140a404 	movi	r5,656
    2358:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
    235c:	0009883a 	mov	r4,zero
    2360:	01401044 	movi	r5,65
    2364:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    2368:	0009883a 	mov	r4,zero
    236c:	014004c4 	movi	r5,19
    2370:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    2374:	0009883a 	mov	r4,zero
    2378:	000b883a 	mov	r5,zero
    237c:	00002c80 	call	2c8 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    2380:	01006c04 	movi	r4,432
    2384:	01414004 	movi	r5,1280
    2388:	000185c0 	call	185c <UsbWrite>
}
    238c:	e037883a 	mov	sp,fp
    2390:	dfc00117 	ldw	ra,4(sp)
    2394:	df000017 	ldw	fp,0(sp)
    2398:	dec00204 	addi	sp,sp,8
    239c:	f800283a 	ret

000023a0 <UsbGetHidDesc>:


void UsbGetHidDesc()
{
    23a0:	defffe04 	addi	sp,sp,-8
    23a4:	dfc00115 	stw	ra,4(sp)
    23a8:	df000015 	stw	fp,0(sp)
    23ac:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    23b0:	01000084 	movi	r4,2
    23b4:	01414004 	movi	r5,1280
    23b8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x050C);
    23bc:	0009883a 	mov	r4,zero
    23c0:	01414304 	movi	r5,1292
    23c4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    23c8:	0009883a 	mov	r4,zero
    23cc:	01400204 	movi	r5,8
    23d0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
    23d4:	0009883a 	mov	r4,zero
    23d8:	0140b404 	movi	r5,720
    23dc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);
    23e0:	0009883a 	mov	r4,zero
    23e4:	01400044 	movi	r5,1
    23e8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    23ec:	0009883a 	mov	r4,zero
    23f0:	014004c4 	movi	r5,19
    23f4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0514);
    23f8:	0009883a 	mov	r4,zero
    23fc:	01414504 	movi	r5,1300
    2400:	00002c80 	call	2c8 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
    2404:	0009883a 	mov	r4,zero
    2408:	0141a044 	movi	r5,1665
    240c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x2100);//e //HID 0x21
    2410:	0009883a 	mov	r4,zero
    2414:	01484004 	movi	r5,8448
    2418:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    241c:	0009883a 	mov	r4,zero
    2420:	000b883a 	mov	r5,zero
    2424:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
    2428:	0009883a 	mov	r4,zero
    242c:	01401ec4 	movi	r5,123
    2430:	00002c80 	call	2c8 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
    2434:	0009883a 	mov	r4,zero
    2438:	01415104 	movi	r5,1348
    243c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    2440:	0009883a 	mov	r4,zero
    2444:	01400204 	movi	r5,8
    2448:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    244c:	0009883a 	mov	r4,zero
    2450:	0140a404 	movi	r5,656
    2454:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    2458:	0009883a 	mov	r4,zero
    245c:	01401044 	movi	r5,65
    2460:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    2464:	0009883a 	mov	r4,zero
    2468:	014004c4 	movi	r5,19
    246c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    2470:	0009883a 	mov	r4,zero
    2474:	01414804 	movi	r5,1312
    2478:	00002c80 	call	2c8 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
    247c:	0009883a 	mov	r4,zero
    2480:	000b883a 	mov	r5,zero
    2484:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
    2488:	0009883a 	mov	r4,zero
    248c:	000b883a 	mov	r5,zero
    2490:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
    2494:	0009883a 	mov	r4,zero
    2498:	01408404 	movi	r5,528
    249c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    24a0:	0009883a 	mov	r4,zero
    24a4:	01401044 	movi	r5,65
    24a8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    24ac:	0009883a 	mov	r4,zero
    24b0:	014004c4 	movi	r5,19
    24b4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
    24b8:	0009883a 	mov	r4,zero
    24bc:	000b883a 	mov	r5,zero
    24c0:	00002c80 	call	2c8 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    24c4:	01006c04 	movi	r4,432
    24c8:	01414004 	movi	r5,1280
    24cc:	000185c0 	call	185c <UsbWrite>

}
    24d0:	e037883a 	mov	sp,fp
    24d4:	dfc00117 	ldw	ra,4(sp)
    24d8:	df000017 	ldw	fp,0(sp)
    24dc:	dec00204 	addi	sp,sp,8
    24e0:	f800283a 	ret

000024e4 <UsbGetReportDesc>:


void UsbGetReportDesc()
{
    24e4:	defffe04 	addi	sp,sp,-8
    24e8:	dfc00115 	stw	ra,4(sp)
    24ec:	df000015 	stw	fp,0(sp)
    24f0:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    24f4:	01000084 	movi	r4,2
    24f8:	01414004 	movi	r5,1280
    24fc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x050C);
    2500:	0009883a 	mov	r4,zero
    2504:	01414304 	movi	r5,1292
    2508:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    250c:	0009883a 	mov	r4,zero
    2510:	01400204 	movi	r5,8
    2514:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    2518:	0009883a 	mov	r4,zero
    251c:	0140b404 	movi	r5,720
    2520:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);
    2524:	0009883a 	mov	r4,zero
    2528:	01400044 	movi	r5,1
    252c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    2530:	0009883a 	mov	r4,zero
    2534:	014004c4 	movi	r5,19
    2538:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0514);
    253c:	0009883a 	mov	r4,zero
    2540:	01414504 	movi	r5,1300
    2544:	00002c80 	call	2c8 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
    2548:	0009883a 	mov	r4,zero
    254c:	0141a044 	movi	r5,1665
    2550:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x2200);//e //report 0x22
    2554:	0009883a 	mov	r4,zero
    2558:	01488004 	movi	r5,8704
    255c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    2560:	0009883a 	mov	r4,zero
    2564:	000b883a 	mov	r5,zero
    2568:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
    256c:	0009883a 	mov	r4,zero
    2570:	01401ec4 	movi	r5,123
    2574:	00002c80 	call	2c8 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0580); //514
    2578:	0009883a 	mov	r4,zero
    257c:	01416004 	movi	r5,1408
    2580:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    2584:	0009883a 	mov	r4,zero
    2588:	01400204 	movi	r5,8
    258c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    2590:	0009883a 	mov	r4,zero
    2594:	0140a404 	movi	r5,656
    2598:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    259c:	0009883a 	mov	r4,zero
    25a0:	01401044 	movi	r5,65
    25a4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    25a8:	0009883a 	mov	r4,zero
    25ac:	014004c4 	movi	r5,19
    25b0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    25b4:	0009883a 	mov	r4,zero
    25b8:	01414804 	movi	r5,1312
    25bc:	00002c80 	call	2c8 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0588); //520
    25c0:	0009883a 	mov	r4,zero
    25c4:	01416204 	movi	r5,1416
    25c8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
    25cc:	0009883a 	mov	r4,zero
    25d0:	01400204 	movi	r5,8
    25d4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    25d8:	0009883a 	mov	r4,zero
    25dc:	0140a404 	movi	r5,656
    25e0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
    25e4:	0009883a 	mov	r4,zero
    25e8:	01400044 	movi	r5,1
    25ec:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    25f0:	0009883a 	mov	r4,zero
    25f4:	014004c4 	movi	r5,19
    25f8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
    25fc:	0009883a 	mov	r4,zero
    2600:	01414b04 	movi	r5,1324
    2604:	00002c80 	call	2c8 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0590); //52c
    2608:	0009883a 	mov	r4,zero
    260c:	01416404 	movi	r5,1424
    2610:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
    2614:	0009883a 	mov	r4,zero
    2618:	01400204 	movi	r5,8
    261c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
    2620:	0009883a 	mov	r4,zero
    2624:	0140a404 	movi	r5,656
    2628:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    262c:	0009883a 	mov	r4,zero
    2630:	01401044 	movi	r5,65
    2634:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    2638:	0009883a 	mov	r4,zero
    263c:	014004c4 	movi	r5,19
    2640:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
    2644:	0009883a 	mov	r4,zero
    2648:	01414e04 	movi	r5,1336
    264c:	00002c80 	call	2c8 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0598); //538
    2650:	0009883a 	mov	r4,zero
    2654:	01416604 	movi	r5,1432
    2658:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
    265c:	0009883a 	mov	r4,zero
    2660:	01400204 	movi	r5,8
    2664:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
    2668:	0009883a 	mov	r4,zero
    266c:	0140a404 	movi	r5,656
    2670:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
    2674:	0009883a 	mov	r4,zero
    2678:	01400044 	movi	r5,1
    267c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
    2680:	0009883a 	mov	r4,zero
    2684:	014004c4 	movi	r5,19
    2688:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
    268c:	0009883a 	mov	r4,zero
    2690:	01415104 	movi	r5,1348
    2694:	00002c80 	call	2c8 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x05a0); //544
    2698:	0009883a 	mov	r4,zero
    269c:	01416804 	movi	r5,1440
    26a0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    26a4:	0009883a 	mov	r4,zero
    26a8:	01400204 	movi	r5,8
    26ac:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    26b0:	0009883a 	mov	r4,zero
    26b4:	0140a404 	movi	r5,656
    26b8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
    26bc:	0009883a 	mov	r4,zero
    26c0:	01401044 	movi	r5,65
    26c4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    26c8:	0009883a 	mov	r4,zero
    26cc:	014004c4 	movi	r5,19
    26d0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
    26d4:	0009883a 	mov	r4,zero
    26d8:	01415404 	movi	r5,1360
    26dc:	00002c80 	call	2c8 <IO_write>

	//data phase IN-6
	IO_write(HPI_DATA,0x05a8); //550
    26e0:	0009883a 	mov	r4,zero
    26e4:	01416a04 	movi	r5,1448
    26e8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
    26ec:	0009883a 	mov	r4,zero
    26f0:	01400204 	movi	r5,8
    26f4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    26f8:	0009883a 	mov	r4,zero
    26fc:	0140a404 	movi	r5,656
    2700:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
    2704:	0009883a 	mov	r4,zero
    2708:	01400044 	movi	r5,1
    270c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    2710:	0009883a 	mov	r4,zero
    2714:	014004c4 	movi	r5,19
    2718:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x055c);//a
    271c:	0009883a 	mov	r4,zero
    2720:	01415704 	movi	r5,1372
    2724:	00002c80 	call	2c8 <IO_write>

	//data phase IN-7
	IO_write(HPI_DATA,0x05b0); //c
    2728:	0009883a 	mov	r4,zero
    272c:	01416c04 	movi	r5,1456
    2730:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
    2734:	0009883a 	mov	r4,zero
    2738:	01400204 	movi	r5,8
    273c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//560
    2740:	0009883a 	mov	r4,zero
    2744:	0140a404 	movi	r5,656
    2748:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//2 //data1
    274c:	0009883a 	mov	r4,zero
    2750:	01401044 	movi	r5,65
    2754:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    2758:	0009883a 	mov	r4,zero
    275c:	014004c4 	movi	r5,19
    2760:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0568);//6
    2764:	0009883a 	mov	r4,zero
    2768:	01415a04 	movi	r5,1384
    276c:	00002c80 	call	2c8 <IO_write>

	//data phase IN-8
	IO_write(HPI_DATA,0x05b8); //8
    2770:	0009883a 	mov	r4,zero
    2774:	01416e04 	movi	r5,1464
    2778:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0003);//a
    277c:	0009883a 	mov	r4,zero
    2780:	014000c4 	movi	r5,3
    2784:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
    2788:	0009883a 	mov	r4,zero
    278c:	0140a404 	movi	r5,656
    2790:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
    2794:	0009883a 	mov	r4,zero
    2798:	01400044 	movi	r5,1
    279c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//570
    27a0:	0009883a 	mov	r4,zero
    27a4:	014004c4 	movi	r5,19
    27a8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0574);//2
    27ac:	0009883a 	mov	r4,zero
    27b0:	01415d04 	movi	r5,1396
    27b4:	00002c80 	call	2c8 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //574
    27b8:	0009883a 	mov	r4,zero
    27bc:	000b883a 	mov	r5,zero
    27c0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
    27c4:	0009883a 	mov	r4,zero
    27c8:	000b883a 	mov	r5,zero
    27cc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0210);//8
    27d0:	0009883a 	mov	r4,zero
    27d4:	01408404 	movi	r5,528
    27d8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    27dc:	0009883a 	mov	r4,zero
    27e0:	01401044 	movi	r5,65
    27e4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    27e8:	0009883a 	mov	r4,zero
    27ec:	014004c4 	movi	r5,19
    27f0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
    27f4:	0009883a 	mov	r4,zero
    27f8:	000b883a 	mov	r5,zero
    27fc:	00002c80 	call	2c8 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    2800:	01006c04 	movi	r4,432
    2804:	01414004 	movi	r5,1280
    2808:	000185c0 	call	185c <UsbWrite>

}
    280c:	e037883a 	mov	sp,fp
    2810:	dfc00117 	ldw	ra,4(sp)
    2814:	df000017 	ldw	fp,0(sp)
    2818:	dec00204 	addi	sp,sp,8
    281c:	f800283a 	ret

00002820 <UsbWaitTDListDone>:


alt_u16 UsbWaitTDListDone()
{
    2820:	defffd04 	addi	sp,sp,-12
    2824:	dfc00215 	stw	ra,8(sp)
    2828:	df000115 	stw	fp,4(sp)
    282c:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
    2830:	01005104 	movi	r4,324
    2834:	00018b00 	call	18b0 <UsbRead>
    2838:	e0bfff0d 	sth	r2,-4(fp)
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
    283c:	01005104 	movi	r4,324
    2840:	000b883a 	mov	r5,zero
    2844:	000185c0 	call	185c <UsbWrite>
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
    2848:	00000d06 	br	2880 <UsbWaitTDListDone+0x60>
	{
		if(usb_ctl_val == 0x0000)
    284c:	e0bfff0b 	ldhu	r2,-4(fp)
    2850:	10000526 	beq	r2,zero,2868 <UsbWaitTDListDone+0x48>
		{
		}
		else
		{
			printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
    2854:	e0bfff0b 	ldhu	r2,-4(fp)
    2858:	01000074 	movhi	r4,1
    285c:	2108c304 	addi	r4,r4,8972
    2860:	100b883a 	mov	r5,r2
    2864:	000319c0 	call	319c <printf>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    2868:	01005104 	movi	r4,324
    286c:	00018b00 	call	18b0 <UsbRead>
    2870:	e0bfff0d 	sth	r2,-4(fp)
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
    2874:	01005104 	movi	r4,324
    2878:	000b883a 	mov	r5,zero
    287c:	000185c0 	call	185c <UsbWrite>
{
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
    2880:	e0bfff0b 	ldhu	r2,-4(fp)
    2884:	10840018 	cmpnei	r2,r2,4096
    2888:	103ff01e 	bne	r2,zero,284c <__alt_data_end+0xfffad11c>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
	}

	return usb_ctl_val;
    288c:	e0bfff0b 	ldhu	r2,-4(fp)
}
    2890:	e037883a 	mov	sp,fp
    2894:	dfc00117 	ldw	ra,4(sp)
    2898:	df000017 	ldw	fp,0(sp)
    289c:	dec00204 	addi	sp,sp,8
    28a0:	f800283a 	ret

000028a4 <UsbGetRetryCnt>:


alt_u16 UsbGetRetryCnt()
{
    28a4:	defffd04 	addi	sp,sp,-12
    28a8:	dfc00215 	stw	ra,8(sp)
    28ac:	df000115 	stw	fp,4(sp)
    28b0:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	IO_read(HPI_STATUS);
    28b4:	010000c4 	movi	r4,3
    28b8:	00003300 	call	330 <IO_read>
	if(UsbRead(HPI_SIE1_MSG_ADR) == HUSB_TDListDone)
    28bc:	01005104 	movi	r4,324
    28c0:	00018b00 	call	18b0 <UsbRead>
    28c4:	10bfffcc 	andi	r2,r2,65535
    28c8:	10840018 	cmpnei	r2,r2,4096
    28cc:	1000091e 	bne	r2,zero,28f4 <UsbGetRetryCnt+0x50>
	{
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
    28d0:	01005104 	movi	r4,324
    28d4:	000b883a 	mov	r5,zero
    28d8:	000185c0 	call	185c <UsbWrite>

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    28dc:	0001883a 	nop
    28e0:	010000c4 	movi	r4,3
    28e4:	00003300 	call	330 <IO_read>
    28e8:	10bfffcc 	andi	r2,r2,65535
    28ec:	1080040c 	andi	r2,r2,16
    28f0:	103ffb26 	beq	r2,zero,28e0 <__alt_data_end+0xfffad1b0>
		{
		}
	}
	//usleep(1000);
	IO_write(HPI_ADDR,0x0508);
    28f4:	01000084 	movi	r4,2
    28f8:	01414204 	movi	r5,1288
    28fc:	00002c80 	call	2c8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
    2900:	0009883a 	mov	r4,zero
    2904:	00003300 	call	330 <IO_read>
    2908:	e0bfff0d 	sth	r2,-4(fp)

	return usb_ctl_val;
    290c:	e0bfff0b 	ldhu	r2,-4(fp)
}
    2910:	e037883a 	mov	sp,fp
    2914:	dfc00117 	ldw	ra,4(sp)
    2918:	df000017 	ldw	fp,0(sp)
    291c:	dec00204 	addi	sp,sp,8
    2920:	f800283a 	ret

00002924 <UsbPrintMem>:


void UsbPrintMem()
{
    2924:	defffc04 	addi	sp,sp,-16
    2928:	dfc00315 	stw	ra,12(sp)
    292c:	df000215 	stw	fp,8(sp)
    2930:	df000204 	addi	fp,sp,8
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
    2934:	01000084 	movi	r4,2
    2938:	01414004 	movi	r5,1280
    293c:	00002c80 	call	2c8 <IO_write>
	for (i = 0; i <= 200; i += 2)
    2940:	e03ffe15 	stw	zero,-8(fp)
    2944:	00000e06 	br	2980 <UsbPrintMem+0x5c>
	{
		code = IO_read(HPI_DATA);
    2948:	0009883a 	mov	r4,zero
    294c:	00003300 	call	330 <IO_read>
    2950:	10bfffcc 	andi	r2,r2,65535
    2954:	e0bfff15 	stw	r2,-4(fp)
		printf("\naddr %x = %04x\n", 0x0500+i, code);
    2958:	e0bffe17 	ldw	r2,-8(fp)
    295c:	10814004 	addi	r2,r2,1280
    2960:	01000074 	movhi	r4,1
    2964:	2108cb04 	addi	r4,r4,9004
    2968:	100b883a 	mov	r5,r2
    296c:	e1bfff17 	ldw	r6,-4(fp)
    2970:	000319c0 	call	319c <printf>

void UsbPrintMem()
{
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
	for (i = 0; i <= 200; i += 2)
    2974:	e0bffe17 	ldw	r2,-8(fp)
    2978:	10800084 	addi	r2,r2,2
    297c:	e0bffe15 	stw	r2,-8(fp)
    2980:	e0bffe17 	ldw	r2,-8(fp)
    2984:	10803250 	cmplti	r2,r2,201
    2988:	103fef1e 	bne	r2,zero,2948 <__alt_data_end+0xfffad218>
	{
		code = IO_read(HPI_DATA);
		printf("\naddr %x = %04x\n", 0x0500+i, code);
	}
}
    298c:	e037883a 	mov	sp,fp
    2990:	dfc00117 	ldw	ra,4(sp)
    2994:	df000017 	ldw	fp,0(sp)
    2998:	dec00204 	addi	sp,sp,8
    299c:	f800283a 	ret

000029a0 <malloc>:
    29a0:	00800074 	movhi	r2,1
    29a4:	10903e04 	addi	r2,r2,16632
    29a8:	200b883a 	mov	r5,r4
    29ac:	11000017 	ldw	r4,0(r2)
    29b0:	00029c81 	jmpi	29c8 <_malloc_r>

000029b4 <free>:
    29b4:	00800074 	movhi	r2,1
    29b8:	10903e04 	addi	r2,r2,16632
    29bc:	200b883a 	mov	r5,r4
    29c0:	11000017 	ldw	r4,0(r2)
    29c4:	00076601 	jmpi	7660 <_free_r>

000029c8 <_malloc_r>:
    29c8:	defff504 	addi	sp,sp,-44
    29cc:	dc800315 	stw	r18,12(sp)
    29d0:	dfc00a15 	stw	ra,40(sp)
    29d4:	df000915 	stw	fp,36(sp)
    29d8:	ddc00815 	stw	r23,32(sp)
    29dc:	dd800715 	stw	r22,28(sp)
    29e0:	dd400615 	stw	r21,24(sp)
    29e4:	dd000515 	stw	r20,20(sp)
    29e8:	dcc00415 	stw	r19,16(sp)
    29ec:	dc400215 	stw	r17,8(sp)
    29f0:	dc000115 	stw	r16,4(sp)
    29f4:	288002c4 	addi	r2,r5,11
    29f8:	00c00584 	movi	r3,22
    29fc:	2025883a 	mov	r18,r4
    2a00:	18802a2e 	bgeu	r3,r2,2aac <_malloc_r+0xe4>
    2a04:	047ffe04 	movi	r17,-8
    2a08:	1462703a 	and	r17,r2,r17
    2a0c:	88009e16 	blt	r17,zero,2c88 <_malloc_r+0x2c0>
    2a10:	89409d36 	bltu	r17,r5,2c88 <_malloc_r+0x2c0>
    2a14:	000f90c0 	call	f90c <__malloc_lock>
    2a18:	00807dc4 	movi	r2,503
    2a1c:	14402736 	bltu	r2,r17,2abc <_malloc_r+0xf4>
    2a20:	8806d0fa 	srli	r3,r17,3
    2a24:	04c00074 	movhi	r19,1
    2a28:	9cc99004 	addi	r19,r19,9792
    2a2c:	18c5883a 	add	r2,r3,r3
    2a30:	1085883a 	add	r2,r2,r2
    2a34:	1085883a 	add	r2,r2,r2
    2a38:	9885883a 	add	r2,r19,r2
    2a3c:	14000317 	ldw	r16,12(r2)
    2a40:	80814a26 	beq	r16,r2,2f6c <_malloc_r+0x5a4>
    2a44:	80c00117 	ldw	r3,4(r16)
    2a48:	81000317 	ldw	r4,12(r16)
    2a4c:	00bfff04 	movi	r2,-4
    2a50:	1884703a 	and	r2,r3,r2
    2a54:	81400217 	ldw	r5,8(r16)
    2a58:	8085883a 	add	r2,r16,r2
    2a5c:	10c00117 	ldw	r3,4(r2)
    2a60:	29000315 	stw	r4,12(r5)
    2a64:	21400215 	stw	r5,8(r4)
    2a68:	18c00054 	ori	r3,r3,1
    2a6c:	10c00115 	stw	r3,4(r2)
    2a70:	9009883a 	mov	r4,r18
    2a74:	000f92c0 	call	f92c <__malloc_unlock>
    2a78:	80800204 	addi	r2,r16,8
    2a7c:	dfc00a17 	ldw	ra,40(sp)
    2a80:	df000917 	ldw	fp,36(sp)
    2a84:	ddc00817 	ldw	r23,32(sp)
    2a88:	dd800717 	ldw	r22,28(sp)
    2a8c:	dd400617 	ldw	r21,24(sp)
    2a90:	dd000517 	ldw	r20,20(sp)
    2a94:	dcc00417 	ldw	r19,16(sp)
    2a98:	dc800317 	ldw	r18,12(sp)
    2a9c:	dc400217 	ldw	r17,8(sp)
    2aa0:	dc000117 	ldw	r16,4(sp)
    2aa4:	dec00b04 	addi	sp,sp,44
    2aa8:	f800283a 	ret
    2aac:	04400404 	movi	r17,16
    2ab0:	89407536 	bltu	r17,r5,2c88 <_malloc_r+0x2c0>
    2ab4:	000f90c0 	call	f90c <__malloc_lock>
    2ab8:	003fd906 	br	2a20 <__alt_data_end+0xfffad2f0>
    2abc:	8806d27a 	srli	r3,r17,9
    2ac0:	18007526 	beq	r3,zero,2c98 <_malloc_r+0x2d0>
    2ac4:	00800104 	movi	r2,4
    2ac8:	10c0ef36 	bltu	r2,r3,2e88 <_malloc_r+0x4c0>
    2acc:	8806d1ba 	srli	r3,r17,6
    2ad0:	19c00e04 	addi	r7,r3,56
    2ad4:	39cb883a 	add	r5,r7,r7
    2ad8:	04c00074 	movhi	r19,1
    2adc:	294b883a 	add	r5,r5,r5
    2ae0:	9cc99004 	addi	r19,r19,9792
    2ae4:	294b883a 	add	r5,r5,r5
    2ae8:	994b883a 	add	r5,r19,r5
    2aec:	2c000317 	ldw	r16,12(r5)
    2af0:	2c000e26 	beq	r5,r16,2b2c <_malloc_r+0x164>
    2af4:	80800117 	ldw	r2,4(r16)
    2af8:	01bfff04 	movi	r6,-4
    2afc:	010003c4 	movi	r4,15
    2b00:	1184703a 	and	r2,r2,r6
    2b04:	1447c83a 	sub	r3,r2,r17
    2b08:	20c00716 	blt	r4,r3,2b28 <_malloc_r+0x160>
    2b0c:	1800650e 	bge	r3,zero,2ca4 <_malloc_r+0x2dc>
    2b10:	84000317 	ldw	r16,12(r16)
    2b14:	2c000526 	beq	r5,r16,2b2c <_malloc_r+0x164>
    2b18:	80800117 	ldw	r2,4(r16)
    2b1c:	1184703a 	and	r2,r2,r6
    2b20:	1447c83a 	sub	r3,r2,r17
    2b24:	20fff90e 	bge	r4,r3,2b0c <__alt_data_end+0xfffad3dc>
    2b28:	39ffffc4 	addi	r7,r7,-1
    2b2c:	38c00044 	addi	r3,r7,1
    2b30:	01800074 	movhi	r6,1
    2b34:	9c000417 	ldw	r16,16(r19)
    2b38:	31899004 	addi	r6,r6,9792
    2b3c:	32400204 	addi	r9,r6,8
    2b40:	82410326 	beq	r16,r9,2f50 <_malloc_r+0x588>
    2b44:	81000117 	ldw	r4,4(r16)
    2b48:	00bfff04 	movi	r2,-4
    2b4c:	208e703a 	and	r7,r4,r2
    2b50:	3c45c83a 	sub	r2,r7,r17
    2b54:	010003c4 	movi	r4,15
    2b58:	2080ee16 	blt	r4,r2,2f14 <_malloc_r+0x54c>
    2b5c:	32400515 	stw	r9,20(r6)
    2b60:	32400415 	stw	r9,16(r6)
    2b64:	1000510e 	bge	r2,zero,2cac <_malloc_r+0x2e4>
    2b68:	00807fc4 	movi	r2,511
    2b6c:	11c0ce36 	bltu	r2,r7,2ea8 <_malloc_r+0x4e0>
    2b70:	3808d0fa 	srli	r4,r7,3
    2b74:	01c00044 	movi	r7,1
    2b78:	30800117 	ldw	r2,4(r6)
    2b7c:	210b883a 	add	r5,r4,r4
    2b80:	294b883a 	add	r5,r5,r5
    2b84:	2009d0ba 	srai	r4,r4,2
    2b88:	294b883a 	add	r5,r5,r5
    2b8c:	298b883a 	add	r5,r5,r6
    2b90:	2a000217 	ldw	r8,8(r5)
    2b94:	3908983a 	sll	r4,r7,r4
    2b98:	81400315 	stw	r5,12(r16)
    2b9c:	82000215 	stw	r8,8(r16)
    2ba0:	2088b03a 	or	r4,r4,r2
    2ba4:	2c000215 	stw	r16,8(r5)
    2ba8:	31000115 	stw	r4,4(r6)
    2bac:	44000315 	stw	r16,12(r8)
    2bb0:	1805d0ba 	srai	r2,r3,2
    2bb4:	01400044 	movi	r5,1
    2bb8:	288a983a 	sll	r5,r5,r2
    2bbc:	21404336 	bltu	r4,r5,2ccc <_malloc_r+0x304>
    2bc0:	2144703a 	and	r2,r4,r5
    2bc4:	10000a1e 	bne	r2,zero,2bf0 <_malloc_r+0x228>
    2bc8:	00bfff04 	movi	r2,-4
    2bcc:	294b883a 	add	r5,r5,r5
    2bd0:	1886703a 	and	r3,r3,r2
    2bd4:	2144703a 	and	r2,r4,r5
    2bd8:	18c00104 	addi	r3,r3,4
    2bdc:	1000041e 	bne	r2,zero,2bf0 <_malloc_r+0x228>
    2be0:	294b883a 	add	r5,r5,r5
    2be4:	2144703a 	and	r2,r4,r5
    2be8:	18c00104 	addi	r3,r3,4
    2bec:	103ffc26 	beq	r2,zero,2be0 <__alt_data_end+0xfffad4b0>
    2bf0:	023fff04 	movi	r8,-4
    2bf4:	01c003c4 	movi	r7,15
    2bf8:	18c5883a 	add	r2,r3,r3
    2bfc:	1085883a 	add	r2,r2,r2
    2c00:	1085883a 	add	r2,r2,r2
    2c04:	9895883a 	add	r10,r19,r2
    2c08:	52c00304 	addi	r11,r10,12
    2c0c:	1819883a 	mov	r12,r3
    2c10:	5c000017 	ldw	r16,0(r11)
    2c14:	59bffd04 	addi	r6,r11,-12
    2c18:	8180041e 	bne	r16,r6,2c2c <_malloc_r+0x264>
    2c1c:	0000ce06 	br	2f58 <_malloc_r+0x590>
    2c20:	2000d70e 	bge	r4,zero,2f80 <_malloc_r+0x5b8>
    2c24:	84000317 	ldw	r16,12(r16)
    2c28:	8180cb26 	beq	r16,r6,2f58 <_malloc_r+0x590>
    2c2c:	80800117 	ldw	r2,4(r16)
    2c30:	1204703a 	and	r2,r2,r8
    2c34:	1449c83a 	sub	r4,r2,r17
    2c38:	393ff90e 	bge	r7,r4,2c20 <__alt_data_end+0xfffad4f0>
    2c3c:	80800317 	ldw	r2,12(r16)
    2c40:	80c00217 	ldw	r3,8(r16)
    2c44:	89400054 	ori	r5,r17,1
    2c48:	81400115 	stw	r5,4(r16)
    2c4c:	18800315 	stw	r2,12(r3)
    2c50:	10c00215 	stw	r3,8(r2)
    2c54:	8463883a 	add	r17,r16,r17
    2c58:	9c400515 	stw	r17,20(r19)
    2c5c:	9c400415 	stw	r17,16(r19)
    2c60:	20800054 	ori	r2,r4,1
    2c64:	88800115 	stw	r2,4(r17)
    2c68:	8a400315 	stw	r9,12(r17)
    2c6c:	8a400215 	stw	r9,8(r17)
    2c70:	8923883a 	add	r17,r17,r4
    2c74:	89000015 	stw	r4,0(r17)
    2c78:	9009883a 	mov	r4,r18
    2c7c:	000f92c0 	call	f92c <__malloc_unlock>
    2c80:	80800204 	addi	r2,r16,8
    2c84:	003f7d06 	br	2a7c <__alt_data_end+0xfffad34c>
    2c88:	00800304 	movi	r2,12
    2c8c:	90800015 	stw	r2,0(r18)
    2c90:	0005883a 	mov	r2,zero
    2c94:	003f7906 	br	2a7c <__alt_data_end+0xfffad34c>
    2c98:	01401f84 	movi	r5,126
    2c9c:	01c00fc4 	movi	r7,63
    2ca0:	003f8d06 	br	2ad8 <__alt_data_end+0xfffad3a8>
    2ca4:	81000317 	ldw	r4,12(r16)
    2ca8:	003f6a06 	br	2a54 <__alt_data_end+0xfffad324>
    2cac:	81c5883a 	add	r2,r16,r7
    2cb0:	10c00117 	ldw	r3,4(r2)
    2cb4:	9009883a 	mov	r4,r18
    2cb8:	18c00054 	ori	r3,r3,1
    2cbc:	10c00115 	stw	r3,4(r2)
    2cc0:	000f92c0 	call	f92c <__malloc_unlock>
    2cc4:	80800204 	addi	r2,r16,8
    2cc8:	003f6c06 	br	2a7c <__alt_data_end+0xfffad34c>
    2ccc:	9c000217 	ldw	r16,8(r19)
    2cd0:	00bfff04 	movi	r2,-4
    2cd4:	85800117 	ldw	r22,4(r16)
    2cd8:	b0ac703a 	and	r22,r22,r2
    2cdc:	b4400336 	bltu	r22,r17,2cec <_malloc_r+0x324>
    2ce0:	b445c83a 	sub	r2,r22,r17
    2ce4:	00c003c4 	movi	r3,15
    2ce8:	18805d16 	blt	r3,r2,2e60 <_malloc_r+0x498>
    2cec:	05c00074 	movhi	r23,1
    2cf0:	00800074 	movhi	r2,1
    2cf4:	bdd03b04 	addi	r23,r23,16620
    2cf8:	10971004 	addi	r2,r2,23616
    2cfc:	15400017 	ldw	r21,0(r2)
    2d00:	b9000017 	ldw	r4,0(r23)
    2d04:	00ffffc4 	movi	r3,-1
    2d08:	858d883a 	add	r6,r16,r22
    2d0c:	8d6b883a 	add	r21,r17,r21
    2d10:	20c0e426 	beq	r4,r3,30a4 <_malloc_r+0x6dc>
    2d14:	ad4403c4 	addi	r21,r21,4111
    2d18:	00fc0004 	movi	r3,-4096
    2d1c:	a8ea703a 	and	r21,r21,r3
    2d20:	9009883a 	mov	r4,r18
    2d24:	a80b883a 	mov	r5,r21
    2d28:	d9800015 	stw	r6,0(sp)
    2d2c:	00032a40 	call	32a4 <_sbrk_r>
    2d30:	00ffffc4 	movi	r3,-1
    2d34:	1029883a 	mov	r20,r2
    2d38:	d9800017 	ldw	r6,0(sp)
    2d3c:	10c0a426 	beq	r2,r3,2fd0 <_malloc_r+0x608>
    2d40:	1180a236 	bltu	r2,r6,2fcc <_malloc_r+0x604>
    2d44:	07000074 	movhi	fp,1
    2d48:	e7171c04 	addi	fp,fp,23664
    2d4c:	e0c00017 	ldw	r3,0(fp)
    2d50:	a8c7883a 	add	r3,r21,r3
    2d54:	e0c00015 	stw	r3,0(fp)
    2d58:	3500da26 	beq	r6,r20,30c4 <_malloc_r+0x6fc>
    2d5c:	b9000017 	ldw	r4,0(r23)
    2d60:	00bfffc4 	movi	r2,-1
    2d64:	2080e426 	beq	r4,r2,30f8 <_malloc_r+0x730>
    2d68:	a185c83a 	sub	r2,r20,r6
    2d6c:	1885883a 	add	r2,r3,r2
    2d70:	e0800015 	stw	r2,0(fp)
    2d74:	a0c001cc 	andi	r3,r20,7
    2d78:	1800b526 	beq	r3,zero,3050 <_malloc_r+0x688>
    2d7c:	a0e9c83a 	sub	r20,r20,r3
    2d80:	00840204 	movi	r2,4104
    2d84:	a5000204 	addi	r20,r20,8
    2d88:	10c7c83a 	sub	r3,r2,r3
    2d8c:	a545883a 	add	r2,r20,r21
    2d90:	1083ffcc 	andi	r2,r2,4095
    2d94:	18abc83a 	sub	r21,r3,r2
    2d98:	9009883a 	mov	r4,r18
    2d9c:	a80b883a 	mov	r5,r21
    2da0:	00032a40 	call	32a4 <_sbrk_r>
    2da4:	00ffffc4 	movi	r3,-1
    2da8:	10c0d026 	beq	r2,r3,30ec <_malloc_r+0x724>
    2dac:	1507c83a 	sub	r3,r2,r20
    2db0:	a8c7883a 	add	r3,r21,r3
    2db4:	18c00054 	ori	r3,r3,1
    2db8:	e0800017 	ldw	r2,0(fp)
    2dbc:	9d000215 	stw	r20,8(r19)
    2dc0:	a0c00115 	stw	r3,4(r20)
    2dc4:	a887883a 	add	r3,r21,r2
    2dc8:	e0c00015 	stw	r3,0(fp)
    2dcc:	84c00e26 	beq	r16,r19,2e08 <_malloc_r+0x440>
    2dd0:	018003c4 	movi	r6,15
    2dd4:	3580a02e 	bgeu	r6,r22,3058 <_malloc_r+0x690>
    2dd8:	81400117 	ldw	r5,4(r16)
    2ddc:	013ffe04 	movi	r4,-8
    2de0:	b0bffd04 	addi	r2,r22,-12
    2de4:	1104703a 	and	r2,r2,r4
    2de8:	2900004c 	andi	r4,r5,1
    2dec:	1108b03a 	or	r4,r2,r4
    2df0:	81000115 	stw	r4,4(r16)
    2df4:	01400144 	movi	r5,5
    2df8:	8089883a 	add	r4,r16,r2
    2dfc:	21400115 	stw	r5,4(r4)
    2e00:	21400215 	stw	r5,8(r4)
    2e04:	3080c036 	bltu	r6,r2,3108 <_malloc_r+0x740>
    2e08:	00800074 	movhi	r2,1
    2e0c:	10970f04 	addi	r2,r2,23612
    2e10:	11000017 	ldw	r4,0(r2)
    2e14:	20c0012e 	bgeu	r4,r3,2e1c <_malloc_r+0x454>
    2e18:	10c00015 	stw	r3,0(r2)
    2e1c:	00800074 	movhi	r2,1
    2e20:	10970e04 	addi	r2,r2,23608
    2e24:	11000017 	ldw	r4,0(r2)
    2e28:	9c000217 	ldw	r16,8(r19)
    2e2c:	20c0012e 	bgeu	r4,r3,2e34 <_malloc_r+0x46c>
    2e30:	10c00015 	stw	r3,0(r2)
    2e34:	80c00117 	ldw	r3,4(r16)
    2e38:	00bfff04 	movi	r2,-4
    2e3c:	1886703a 	and	r3,r3,r2
    2e40:	1c45c83a 	sub	r2,r3,r17
    2e44:	1c400236 	bltu	r3,r17,2e50 <_malloc_r+0x488>
    2e48:	00c003c4 	movi	r3,15
    2e4c:	18800416 	blt	r3,r2,2e60 <_malloc_r+0x498>
    2e50:	9009883a 	mov	r4,r18
    2e54:	000f92c0 	call	f92c <__malloc_unlock>
    2e58:	0005883a 	mov	r2,zero
    2e5c:	003f0706 	br	2a7c <__alt_data_end+0xfffad34c>
    2e60:	88c00054 	ori	r3,r17,1
    2e64:	80c00115 	stw	r3,4(r16)
    2e68:	8463883a 	add	r17,r16,r17
    2e6c:	10800054 	ori	r2,r2,1
    2e70:	9c400215 	stw	r17,8(r19)
    2e74:	88800115 	stw	r2,4(r17)
    2e78:	9009883a 	mov	r4,r18
    2e7c:	000f92c0 	call	f92c <__malloc_unlock>
    2e80:	80800204 	addi	r2,r16,8
    2e84:	003efd06 	br	2a7c <__alt_data_end+0xfffad34c>
    2e88:	00800504 	movi	r2,20
    2e8c:	10c0482e 	bgeu	r2,r3,2fb0 <_malloc_r+0x5e8>
    2e90:	00801504 	movi	r2,84
    2e94:	10c06836 	bltu	r2,r3,3038 <_malloc_r+0x670>
    2e98:	8806d33a 	srli	r3,r17,12
    2e9c:	19c01b84 	addi	r7,r3,110
    2ea0:	39cb883a 	add	r5,r7,r7
    2ea4:	003f0c06 	br	2ad8 <__alt_data_end+0xfffad3a8>
    2ea8:	3804d27a 	srli	r2,r7,9
    2eac:	01000104 	movi	r4,4
    2eb0:	2080422e 	bgeu	r4,r2,2fbc <_malloc_r+0x5f4>
    2eb4:	01000504 	movi	r4,20
    2eb8:	20807c36 	bltu	r4,r2,30ac <_malloc_r+0x6e4>
    2ebc:	110016c4 	addi	r4,r2,91
    2ec0:	210b883a 	add	r5,r4,r4
    2ec4:	294b883a 	add	r5,r5,r5
    2ec8:	294b883a 	add	r5,r5,r5
    2ecc:	994b883a 	add	r5,r19,r5
    2ed0:	28800217 	ldw	r2,8(r5)
    2ed4:	02000074 	movhi	r8,1
    2ed8:	42099004 	addi	r8,r8,9792
    2edc:	11406326 	beq	r2,r5,306c <_malloc_r+0x6a4>
    2ee0:	01bfff04 	movi	r6,-4
    2ee4:	11000117 	ldw	r4,4(r2)
    2ee8:	2188703a 	and	r4,r4,r6
    2eec:	3900022e 	bgeu	r7,r4,2ef8 <_malloc_r+0x530>
    2ef0:	10800217 	ldw	r2,8(r2)
    2ef4:	28bffb1e 	bne	r5,r2,2ee4 <__alt_data_end+0xfffad7b4>
    2ef8:	11800317 	ldw	r6,12(r2)
    2efc:	99000117 	ldw	r4,4(r19)
    2f00:	81800315 	stw	r6,12(r16)
    2f04:	80800215 	stw	r2,8(r16)
    2f08:	34000215 	stw	r16,8(r6)
    2f0c:	14000315 	stw	r16,12(r2)
    2f10:	003f2706 	br	2bb0 <__alt_data_end+0xfffad480>
    2f14:	88c00054 	ori	r3,r17,1
    2f18:	80c00115 	stw	r3,4(r16)
    2f1c:	8463883a 	add	r17,r16,r17
    2f20:	34400515 	stw	r17,20(r6)
    2f24:	34400415 	stw	r17,16(r6)
    2f28:	10c00054 	ori	r3,r2,1
    2f2c:	8a400315 	stw	r9,12(r17)
    2f30:	8a400215 	stw	r9,8(r17)
    2f34:	88c00115 	stw	r3,4(r17)
    2f38:	88a3883a 	add	r17,r17,r2
    2f3c:	88800015 	stw	r2,0(r17)
    2f40:	9009883a 	mov	r4,r18
    2f44:	000f92c0 	call	f92c <__malloc_unlock>
    2f48:	80800204 	addi	r2,r16,8
    2f4c:	003ecb06 	br	2a7c <__alt_data_end+0xfffad34c>
    2f50:	31000117 	ldw	r4,4(r6)
    2f54:	003f1606 	br	2bb0 <__alt_data_end+0xfffad480>
    2f58:	63000044 	addi	r12,r12,1
    2f5c:	608000cc 	andi	r2,r12,3
    2f60:	5ac00204 	addi	r11,r11,8
    2f64:	103f2a1e 	bne	r2,zero,2c10 <__alt_data_end+0xfffad4e0>
    2f68:	00002106 	br	2ff0 <_malloc_r+0x628>
    2f6c:	80800204 	addi	r2,r16,8
    2f70:	84000517 	ldw	r16,20(r16)
    2f74:	143eb31e 	bne	r2,r16,2a44 <__alt_data_end+0xfffad314>
    2f78:	18c00084 	addi	r3,r3,2
    2f7c:	003eec06 	br	2b30 <__alt_data_end+0xfffad400>
    2f80:	8085883a 	add	r2,r16,r2
    2f84:	10c00117 	ldw	r3,4(r2)
    2f88:	81000317 	ldw	r4,12(r16)
    2f8c:	81400217 	ldw	r5,8(r16)
    2f90:	18c00054 	ori	r3,r3,1
    2f94:	10c00115 	stw	r3,4(r2)
    2f98:	29000315 	stw	r4,12(r5)
    2f9c:	21400215 	stw	r5,8(r4)
    2fa0:	9009883a 	mov	r4,r18
    2fa4:	000f92c0 	call	f92c <__malloc_unlock>
    2fa8:	80800204 	addi	r2,r16,8
    2fac:	003eb306 	br	2a7c <__alt_data_end+0xfffad34c>
    2fb0:	19c016c4 	addi	r7,r3,91
    2fb4:	39cb883a 	add	r5,r7,r7
    2fb8:	003ec706 	br	2ad8 <__alt_data_end+0xfffad3a8>
    2fbc:	3804d1ba 	srli	r2,r7,6
    2fc0:	11000e04 	addi	r4,r2,56
    2fc4:	210b883a 	add	r5,r4,r4
    2fc8:	003fbe06 	br	2ec4 <__alt_data_end+0xfffad794>
    2fcc:	84ff5d26 	beq	r16,r19,2d44 <__alt_data_end+0xfffad614>
    2fd0:	9c000217 	ldw	r16,8(r19)
    2fd4:	00bfff04 	movi	r2,-4
    2fd8:	80c00117 	ldw	r3,4(r16)
    2fdc:	1886703a 	and	r3,r3,r2
    2fe0:	003f9706 	br	2e40 <__alt_data_end+0xfffad710>
    2fe4:	52800017 	ldw	r10,0(r10)
    2fe8:	18ffffc4 	addi	r3,r3,-1
    2fec:	50805c1e 	bne	r10,r2,3160 <_malloc_r+0x798>
    2ff0:	190000cc 	andi	r4,r3,3
    2ff4:	50bffe04 	addi	r2,r10,-8
    2ff8:	203ffa1e 	bne	r4,zero,2fe4 <__alt_data_end+0xfffad8b4>
    2ffc:	98800117 	ldw	r2,4(r19)
    3000:	0146303a 	nor	r3,zero,r5
    3004:	1884703a 	and	r2,r3,r2
    3008:	98800115 	stw	r2,4(r19)
    300c:	294b883a 	add	r5,r5,r5
    3010:	117f2e36 	bltu	r2,r5,2ccc <__alt_data_end+0xfffad59c>
    3014:	283f2d26 	beq	r5,zero,2ccc <__alt_data_end+0xfffad59c>
    3018:	1146703a 	and	r3,r2,r5
    301c:	1800521e 	bne	r3,zero,3168 <_malloc_r+0x7a0>
    3020:	6007883a 	mov	r3,r12
    3024:	294b883a 	add	r5,r5,r5
    3028:	1148703a 	and	r4,r2,r5
    302c:	18c00104 	addi	r3,r3,4
    3030:	203ffc26 	beq	r4,zero,3024 <__alt_data_end+0xfffad8f4>
    3034:	003ef006 	br	2bf8 <__alt_data_end+0xfffad4c8>
    3038:	00805504 	movi	r2,340
    303c:	10c01336 	bltu	r2,r3,308c <_malloc_r+0x6c4>
    3040:	8806d3fa 	srli	r3,r17,15
    3044:	19c01dc4 	addi	r7,r3,119
    3048:	39cb883a 	add	r5,r7,r7
    304c:	003ea206 	br	2ad8 <__alt_data_end+0xfffad3a8>
    3050:	00c40004 	movi	r3,4096
    3054:	003f4d06 	br	2d8c <__alt_data_end+0xfffad65c>
    3058:	00800044 	movi	r2,1
    305c:	a0800115 	stw	r2,4(r20)
    3060:	a021883a 	mov	r16,r20
    3064:	0007883a 	mov	r3,zero
    3068:	003f7506 	br	2e40 <__alt_data_end+0xfffad710>
    306c:	200bd0ba 	srai	r5,r4,2
    3070:	01800044 	movi	r6,1
    3074:	41000117 	ldw	r4,4(r8)
    3078:	314a983a 	sll	r5,r6,r5
    307c:	100d883a 	mov	r6,r2
    3080:	2908b03a 	or	r4,r5,r4
    3084:	41000115 	stw	r4,4(r8)
    3088:	003f9d06 	br	2f00 <__alt_data_end+0xfffad7d0>
    308c:	00815504 	movi	r2,1364
    3090:	10c01336 	bltu	r2,r3,30e0 <_malloc_r+0x718>
    3094:	8806d4ba 	srli	r3,r17,18
    3098:	19c01f04 	addi	r7,r3,124
    309c:	39cb883a 	add	r5,r7,r7
    30a0:	003e8d06 	br	2ad8 <__alt_data_end+0xfffad3a8>
    30a4:	ad400404 	addi	r21,r21,16
    30a8:	003f1d06 	br	2d20 <__alt_data_end+0xfffad5f0>
    30ac:	01001504 	movi	r4,84
    30b0:	20801c36 	bltu	r4,r2,3124 <_malloc_r+0x75c>
    30b4:	3804d33a 	srli	r2,r7,12
    30b8:	11001b84 	addi	r4,r2,110
    30bc:	210b883a 	add	r5,r4,r4
    30c0:	003f8006 	br	2ec4 <__alt_data_end+0xfffad794>
    30c4:	3083ffcc 	andi	r2,r6,4095
    30c8:	103f241e 	bne	r2,zero,2d5c <__alt_data_end+0xfffad62c>
    30cc:	99000217 	ldw	r4,8(r19)
    30d0:	ad85883a 	add	r2,r21,r22
    30d4:	10800054 	ori	r2,r2,1
    30d8:	20800115 	stw	r2,4(r4)
    30dc:	003f4a06 	br	2e08 <__alt_data_end+0xfffad6d8>
    30e0:	01403f04 	movi	r5,252
    30e4:	01c01f84 	movi	r7,126
    30e8:	003e7b06 	br	2ad8 <__alt_data_end+0xfffad3a8>
    30ec:	00c00044 	movi	r3,1
    30f0:	002b883a 	mov	r21,zero
    30f4:	003f3006 	br	2db8 <__alt_data_end+0xfffad688>
    30f8:	00800074 	movhi	r2,1
    30fc:	10903b04 	addi	r2,r2,16620
    3100:	15000015 	stw	r20,0(r2)
    3104:	003f1b06 	br	2d74 <__alt_data_end+0xfffad644>
    3108:	9009883a 	mov	r4,r18
    310c:	81400204 	addi	r5,r16,8
    3110:	00076600 	call	7660 <_free_r>
    3114:	00800074 	movhi	r2,1
    3118:	10971c04 	addi	r2,r2,23664
    311c:	10c00017 	ldw	r3,0(r2)
    3120:	003f3906 	br	2e08 <__alt_data_end+0xfffad6d8>
    3124:	01005504 	movi	r4,340
    3128:	20800436 	bltu	r4,r2,313c <_malloc_r+0x774>
    312c:	3804d3fa 	srli	r2,r7,15
    3130:	11001dc4 	addi	r4,r2,119
    3134:	210b883a 	add	r5,r4,r4
    3138:	003f6206 	br	2ec4 <__alt_data_end+0xfffad794>
    313c:	01015504 	movi	r4,1364
    3140:	20800436 	bltu	r4,r2,3154 <_malloc_r+0x78c>
    3144:	3804d4ba 	srli	r2,r7,18
    3148:	11001f04 	addi	r4,r2,124
    314c:	210b883a 	add	r5,r4,r4
    3150:	003f5c06 	br	2ec4 <__alt_data_end+0xfffad794>
    3154:	01403f04 	movi	r5,252
    3158:	01001f84 	movi	r4,126
    315c:	003f5906 	br	2ec4 <__alt_data_end+0xfffad794>
    3160:	98800117 	ldw	r2,4(r19)
    3164:	003fa906 	br	300c <__alt_data_end+0xfffad8dc>
    3168:	6007883a 	mov	r3,r12
    316c:	003ea206 	br	2bf8 <__alt_data_end+0xfffad4c8>

00003170 <_printf_r>:
    3170:	defffd04 	addi	sp,sp,-12
    3174:	dfc00015 	stw	ra,0(sp)
    3178:	d9800115 	stw	r6,4(sp)
    317c:	d9c00215 	stw	r7,8(sp)
    3180:	280d883a 	mov	r6,r5
    3184:	21400217 	ldw	r5,8(r4)
    3188:	d9c00104 	addi	r7,sp,4
    318c:	00033900 	call	3390 <___vfprintf_internal_r>
    3190:	dfc00017 	ldw	ra,0(sp)
    3194:	dec00304 	addi	sp,sp,12
    3198:	f800283a 	ret

0000319c <printf>:
    319c:	defffc04 	addi	sp,sp,-16
    31a0:	dfc00015 	stw	ra,0(sp)
    31a4:	d9400115 	stw	r5,4(sp)
    31a8:	d9800215 	stw	r6,8(sp)
    31ac:	d9c00315 	stw	r7,12(sp)
    31b0:	00800074 	movhi	r2,1
    31b4:	10903e04 	addi	r2,r2,16632
    31b8:	10800017 	ldw	r2,0(r2)
    31bc:	200b883a 	mov	r5,r4
    31c0:	d9800104 	addi	r6,sp,4
    31c4:	11000217 	ldw	r4,8(r2)
    31c8:	000548c0 	call	548c <__vfprintf_internal>
    31cc:	dfc00017 	ldw	ra,0(sp)
    31d0:	dec00404 	addi	sp,sp,16
    31d4:	f800283a 	ret

000031d8 <_puts_r>:
    31d8:	defff604 	addi	sp,sp,-40
    31dc:	dc000715 	stw	r16,28(sp)
    31e0:	2021883a 	mov	r16,r4
    31e4:	2809883a 	mov	r4,r5
    31e8:	dc400815 	stw	r17,32(sp)
    31ec:	dfc00915 	stw	ra,36(sp)
    31f0:	2823883a 	mov	r17,r5
    31f4:	00032f80 	call	32f8 <strlen>
    31f8:	00c00074 	movhi	r3,1
    31fc:	18d03e04 	addi	r3,r3,16632
    3200:	18c00017 	ldw	r3,0(r3)
    3204:	11000044 	addi	r4,r2,1
    3208:	d8800115 	stw	r2,4(sp)
    320c:	18c00217 	ldw	r3,8(r3)
    3210:	01400074 	movhi	r5,1
    3214:	2948d004 	addi	r5,r5,9024
    3218:	1880030b 	ldhu	r2,12(r3)
    321c:	d9400215 	stw	r5,8(sp)
    3220:	d9000615 	stw	r4,24(sp)
    3224:	01400044 	movi	r5,1
    3228:	01000084 	movi	r4,2
    322c:	d9000515 	stw	r4,20(sp)
    3230:	dc400015 	stw	r17,0(sp)
    3234:	d9400315 	stw	r5,12(sp)
    3238:	dec00415 	stw	sp,16(sp)
    323c:	1108000c 	andi	r4,r2,8192
    3240:	2000061e 	bne	r4,zero,325c <_puts_r+0x84>
    3244:	19401917 	ldw	r5,100(r3)
    3248:	0137ffc4 	movi	r4,-8193
    324c:	10880014 	ori	r2,r2,8192
    3250:	2908703a 	and	r4,r5,r4
    3254:	1880030d 	sth	r2,12(r3)
    3258:	19001915 	stw	r4,100(r3)
    325c:	81400217 	ldw	r5,8(r16)
    3260:	8009883a 	mov	r4,r16
    3264:	d9800404 	addi	r6,sp,16
    3268:	00079500 	call	7950 <__sfvwrite_r>
    326c:	1000061e 	bne	r2,zero,3288 <_puts_r+0xb0>
    3270:	00800284 	movi	r2,10
    3274:	dfc00917 	ldw	ra,36(sp)
    3278:	dc400817 	ldw	r17,32(sp)
    327c:	dc000717 	ldw	r16,28(sp)
    3280:	dec00a04 	addi	sp,sp,40
    3284:	f800283a 	ret
    3288:	00bfffc4 	movi	r2,-1
    328c:	003ff906 	br	3274 <__alt_data_end+0xfffadb44>

00003290 <puts>:
    3290:	00800074 	movhi	r2,1
    3294:	10903e04 	addi	r2,r2,16632
    3298:	200b883a 	mov	r5,r4
    329c:	11000017 	ldw	r4,0(r2)
    32a0:	00031d81 	jmpi	31d8 <_puts_r>

000032a4 <_sbrk_r>:
    32a4:	defffd04 	addi	sp,sp,-12
    32a8:	dc000015 	stw	r16,0(sp)
    32ac:	04000074 	movhi	r16,1
    32b0:	dc400115 	stw	r17,4(sp)
    32b4:	84171104 	addi	r16,r16,23620
    32b8:	2023883a 	mov	r17,r4
    32bc:	2809883a 	mov	r4,r5
    32c0:	dfc00215 	stw	ra,8(sp)
    32c4:	80000015 	stw	zero,0(r16)
    32c8:	000fb200 	call	fb20 <sbrk>
    32cc:	00ffffc4 	movi	r3,-1
    32d0:	10c00526 	beq	r2,r3,32e8 <_sbrk_r+0x44>
    32d4:	dfc00217 	ldw	ra,8(sp)
    32d8:	dc400117 	ldw	r17,4(sp)
    32dc:	dc000017 	ldw	r16,0(sp)
    32e0:	dec00304 	addi	sp,sp,12
    32e4:	f800283a 	ret
    32e8:	80c00017 	ldw	r3,0(r16)
    32ec:	183ff926 	beq	r3,zero,32d4 <__alt_data_end+0xfffadba4>
    32f0:	88c00015 	stw	r3,0(r17)
    32f4:	003ff706 	br	32d4 <__alt_data_end+0xfffadba4>

000032f8 <strlen>:
    32f8:	208000cc 	andi	r2,r4,3
    32fc:	10002026 	beq	r2,zero,3380 <strlen+0x88>
    3300:	20800007 	ldb	r2,0(r4)
    3304:	10002026 	beq	r2,zero,3388 <strlen+0x90>
    3308:	2005883a 	mov	r2,r4
    330c:	00000206 	br	3318 <strlen+0x20>
    3310:	10c00007 	ldb	r3,0(r2)
    3314:	18001826 	beq	r3,zero,3378 <strlen+0x80>
    3318:	10800044 	addi	r2,r2,1
    331c:	10c000cc 	andi	r3,r2,3
    3320:	183ffb1e 	bne	r3,zero,3310 <__alt_data_end+0xfffadbe0>
    3324:	10c00017 	ldw	r3,0(r2)
    3328:	01ffbff4 	movhi	r7,65279
    332c:	39ffbfc4 	addi	r7,r7,-257
    3330:	00ca303a 	nor	r5,zero,r3
    3334:	01a02074 	movhi	r6,32897
    3338:	19c7883a 	add	r3,r3,r7
    333c:	31a02004 	addi	r6,r6,-32640
    3340:	1946703a 	and	r3,r3,r5
    3344:	1986703a 	and	r3,r3,r6
    3348:	1800091e 	bne	r3,zero,3370 <strlen+0x78>
    334c:	10800104 	addi	r2,r2,4
    3350:	10c00017 	ldw	r3,0(r2)
    3354:	19cb883a 	add	r5,r3,r7
    3358:	00c6303a 	nor	r3,zero,r3
    335c:	28c6703a 	and	r3,r5,r3
    3360:	1986703a 	and	r3,r3,r6
    3364:	183ff926 	beq	r3,zero,334c <__alt_data_end+0xfffadc1c>
    3368:	00000106 	br	3370 <strlen+0x78>
    336c:	10800044 	addi	r2,r2,1
    3370:	10c00007 	ldb	r3,0(r2)
    3374:	183ffd1e 	bne	r3,zero,336c <__alt_data_end+0xfffadc3c>
    3378:	1105c83a 	sub	r2,r2,r4
    337c:	f800283a 	ret
    3380:	2005883a 	mov	r2,r4
    3384:	003fe706 	br	3324 <__alt_data_end+0xfffadbf4>
    3388:	0005883a 	mov	r2,zero
    338c:	f800283a 	ret

00003390 <___vfprintf_internal_r>:
    3390:	defeb604 	addi	sp,sp,-1320
    3394:	dfc14915 	stw	ra,1316(sp)
    3398:	ddc14715 	stw	r23,1308(sp)
    339c:	dd814615 	stw	r22,1304(sp)
    33a0:	202f883a 	mov	r23,r4
    33a4:	282d883a 	mov	r22,r5
    33a8:	d9812a15 	stw	r6,1192(sp)
    33ac:	d9c12d15 	stw	r7,1204(sp)
    33b0:	df014815 	stw	fp,1312(sp)
    33b4:	dd414515 	stw	r21,1300(sp)
    33b8:	dd014415 	stw	r20,1296(sp)
    33bc:	dcc14315 	stw	r19,1292(sp)
    33c0:	dc814215 	stw	r18,1288(sp)
    33c4:	dc414115 	stw	r17,1284(sp)
    33c8:	dc014015 	stw	r16,1280(sp)
    33cc:	00080100 	call	8010 <_localeconv_r>
    33d0:	10800017 	ldw	r2,0(r2)
    33d4:	1009883a 	mov	r4,r2
    33d8:	d8813515 	stw	r2,1236(sp)
    33dc:	00032f80 	call	32f8 <strlen>
    33e0:	d8813815 	stw	r2,1248(sp)
    33e4:	b8000226 	beq	r23,zero,33f0 <___vfprintf_internal_r+0x60>
    33e8:	b8800e17 	ldw	r2,56(r23)
    33ec:	10010526 	beq	r2,zero,3804 <___vfprintf_internal_r+0x474>
    33f0:	b0c0030b 	ldhu	r3,12(r22)
    33f4:	1908000c 	andi	r4,r3,8192
    33f8:	1805883a 	mov	r2,r3
    33fc:	2000071e 	bne	r4,zero,341c <___vfprintf_internal_r+0x8c>
    3400:	b1001917 	ldw	r4,100(r22)
    3404:	18880014 	ori	r2,r3,8192
    3408:	00f7ffc4 	movi	r3,-8193
    340c:	20c8703a 	and	r4,r4,r3
    3410:	b080030d 	sth	r2,12(r22)
    3414:	1007883a 	mov	r3,r2
    3418:	b1001915 	stw	r4,100(r22)
    341c:	1100020c 	andi	r4,r2,8
    3420:	2000a826 	beq	r4,zero,36c4 <___vfprintf_internal_r+0x334>
    3424:	b1000417 	ldw	r4,16(r22)
    3428:	2000a626 	beq	r4,zero,36c4 <___vfprintf_internal_r+0x334>
    342c:	1080068c 	andi	r2,r2,26
    3430:	01000284 	movi	r4,10
    3434:	1100ac26 	beq	r2,r4,36e8 <___vfprintf_internal_r+0x358>
    3438:	d8c10e04 	addi	r3,sp,1080
    343c:	d9010dc4 	addi	r4,sp,1079
    3440:	d9400404 	addi	r5,sp,16
    3444:	05000074 	movhi	r20,1
    3448:	1905c83a 	sub	r2,r3,r4
    344c:	a508e184 	addi	r20,r20,9094
    3450:	d8c12815 	stw	r3,1184(sp)
    3454:	d9012915 	stw	r4,1188(sp)
    3458:	d9411e15 	stw	r5,1144(sp)
    345c:	d8012015 	stw	zero,1152(sp)
    3460:	d8011f15 	stw	zero,1148(sp)
    3464:	d8013315 	stw	zero,1228(sp)
    3468:	d8013715 	stw	zero,1244(sp)
    346c:	d8013915 	stw	zero,1252(sp)
    3470:	d8013b15 	stw	zero,1260(sp)
    3474:	d8013a15 	stw	zero,1256(sp)
    3478:	d8012f15 	stw	zero,1212(sp)
    347c:	2811883a 	mov	r8,r5
    3480:	d8813c15 	stw	r2,1264(sp)
    3484:	d8c12a17 	ldw	r3,1192(sp)
    3488:	18800007 	ldb	r2,0(r3)
    348c:	10021326 	beq	r2,zero,3cdc <___vfprintf_internal_r+0x94c>
    3490:	00c00944 	movi	r3,37
    3494:	dc012a17 	ldw	r16,1192(sp)
    3498:	10c0021e 	bne	r2,r3,34a4 <___vfprintf_internal_r+0x114>
    349c:	00001606 	br	34f8 <___vfprintf_internal_r+0x168>
    34a0:	10c08526 	beq	r2,r3,36b8 <___vfprintf_internal_r+0x328>
    34a4:	84000044 	addi	r16,r16,1
    34a8:	80800007 	ldb	r2,0(r16)
    34ac:	103ffc1e 	bne	r2,zero,34a0 <__alt_data_end+0xfffadd70>
    34b0:	d9012a17 	ldw	r4,1192(sp)
    34b4:	8123c83a 	sub	r17,r16,r4
    34b8:	88000f26 	beq	r17,zero,34f8 <___vfprintf_internal_r+0x168>
    34bc:	d8812a17 	ldw	r2,1192(sp)
    34c0:	d8c12017 	ldw	r3,1152(sp)
    34c4:	44400115 	stw	r17,4(r8)
    34c8:	40800015 	stw	r2,0(r8)
    34cc:	d8811f17 	ldw	r2,1148(sp)
    34d0:	1c47883a 	add	r3,r3,r17
    34d4:	d8c12015 	stw	r3,1152(sp)
    34d8:	10800044 	addi	r2,r2,1
    34dc:	d8811f15 	stw	r2,1148(sp)
    34e0:	00c001c4 	movi	r3,7
    34e4:	1880b516 	blt	r3,r2,37bc <___vfprintf_internal_r+0x42c>
    34e8:	42000204 	addi	r8,r8,8
    34ec:	d8c12f17 	ldw	r3,1212(sp)
    34f0:	1c47883a 	add	r3,r3,r17
    34f4:	d8c12f15 	stw	r3,1212(sp)
    34f8:	80800007 	ldb	r2,0(r16)
    34fc:	1000b626 	beq	r2,zero,37d8 <___vfprintf_internal_r+0x448>
    3500:	80800044 	addi	r2,r16,1
    3504:	84000047 	ldb	r16,1(r16)
    3508:	0027883a 	mov	r19,zero
    350c:	0039883a 	mov	fp,zero
    3510:	dcc12b05 	stb	r19,1196(sp)
    3514:	d8012785 	stb	zero,1182(sp)
    3518:	027fffc4 	movi	r9,-1
    351c:	d8012e15 	stw	zero,1208(sp)
    3520:	04401604 	movi	r17,88
    3524:	04800244 	movi	r18,9
    3528:	da012a15 	stw	r8,1192(sp)
    352c:	e027883a 	mov	r19,fp
    3530:	17000044 	addi	fp,r2,1
    3534:	80bff804 	addi	r2,r16,-32
    3538:	88831236 	bltu	r17,r2,4184 <___vfprintf_internal_r+0xdf4>
    353c:	100490ba 	slli	r2,r2,2
    3540:	01000034 	movhi	r4,0
    3544:	210d5504 	addi	r4,r4,13652
    3548:	1105883a 	add	r2,r2,r4
    354c:	10800017 	ldw	r2,0(r2)
    3550:	1000683a 	jmp	r2
    3554:	000040a0 	cmpeqi	zero,zero,258
    3558:	00004184 	movi	zero,262
    355c:	00004184 	movi	zero,262
    3560:	000040bc 	xorhi	zero,zero,258
    3564:	00004184 	movi	zero,262
    3568:	00004184 	movi	zero,262
    356c:	00004184 	movi	zero,262
    3570:	00004184 	movi	zero,262
    3574:	00004184 	movi	zero,262
    3578:	00004184 	movi	zero,262
    357c:	000040cc 	andi	zero,zero,259
    3580:	000040f4 	movhi	zero,259
    3584:	00004184 	movi	zero,262
    3588:	00003810 	cmplti	zero,zero,224
    358c:	00003820 	cmpeqi	zero,zero,224
    3590:	00004184 	movi	zero,262
    3594:	00003870 	cmpltui	zero,zero,225
    3598:	00003880 	call	388 <IO_read+0x58>
    359c:	00003880 	call	388 <IO_read+0x58>
    35a0:	00003880 	call	388 <IO_read+0x58>
    35a4:	00003880 	call	388 <IO_read+0x58>
    35a8:	00003880 	call	388 <IO_read+0x58>
    35ac:	00003880 	call	388 <IO_read+0x58>
    35b0:	00003880 	call	388 <IO_read+0x58>
    35b4:	00003880 	call	388 <IO_read+0x58>
    35b8:	00003880 	call	388 <IO_read+0x58>
    35bc:	00004184 	movi	zero,262
    35c0:	00004184 	movi	zero,262
    35c4:	00004184 	movi	zero,262
    35c8:	00004184 	movi	zero,262
    35cc:	00004184 	movi	zero,262
    35d0:	00004184 	movi	zero,262
    35d4:	00004184 	movi	zero,262
    35d8:	00004184 	movi	zero,262
    35dc:	00004184 	movi	zero,262
    35e0:	00004184 	movi	zero,262
    35e4:	000038c4 	movi	zero,227
    35e8:	00003ce4 	muli	zero,zero,243
    35ec:	00004184 	movi	zero,262
    35f0:	00003ce4 	muli	zero,zero,243
    35f4:	00004184 	movi	zero,262
    35f8:	00004184 	movi	zero,262
    35fc:	00004184 	movi	zero,262
    3600:	00004184 	movi	zero,262
    3604:	00003d8c 	andi	zero,zero,246
    3608:	00004184 	movi	zero,262
    360c:	00004184 	movi	zero,262
    3610:	00003d9c 	xori	zero,zero,246
    3614:	00004184 	movi	zero,262
    3618:	00004184 	movi	zero,262
    361c:	00004184 	movi	zero,262
    3620:	00004184 	movi	zero,262
    3624:	00004184 	movi	zero,262
    3628:	00003de0 	cmpeqi	zero,zero,247
    362c:	00004184 	movi	zero,262
    3630:	00004184 	movi	zero,262
    3634:	00003e18 	cmpnei	zero,zero,248
    3638:	00004184 	movi	zero,262
    363c:	00004184 	movi	zero,262
    3640:	00004184 	movi	zero,262
    3644:	00004184 	movi	zero,262
    3648:	00004184 	movi	zero,262
    364c:	00004184 	movi	zero,262
    3650:	00004184 	movi	zero,262
    3654:	00004184 	movi	zero,262
    3658:	00004184 	movi	zero,262
    365c:	00004184 	movi	zero,262
    3660:	00004054 	movui	zero,257
    3664:	00004000 	call	400 <get_keycode+0x6c>
    3668:	00003ce4 	muli	zero,zero,243
    366c:	00003ce4 	muli	zero,zero,243
    3670:	00003ce4 	muli	zero,zero,243
    3674:	00004044 	movi	zero,257
    3678:	00004000 	call	400 <get_keycode+0x6c>
    367c:	00004184 	movi	zero,262
    3680:	00004184 	movi	zero,262
    3684:	00003f1c 	xori	zero,zero,252
    3688:	00004184 	movi	zero,262
    368c:	00003f34 	movhi	zero,252
    3690:	00003f74 	movhi	zero,253
    3694:	00003fb4 	movhi	zero,254
    3698:	00003e80 	call	3e8 <get_keycode+0x54>
    369c:	00004184 	movi	zero,262
    36a0:	00004108 	cmpgei	zero,zero,260
    36a4:	00004184 	movi	zero,262
    36a8:	00003e90 	cmplti	zero,zero,250
    36ac:	00004184 	movi	zero,262
    36b0:	00004184 	movi	zero,262
    36b4:	00003ed0 	cmplti	zero,zero,251
    36b8:	d9412a17 	ldw	r5,1192(sp)
    36bc:	8163c83a 	sub	r17,r16,r5
    36c0:	003f7d06 	br	34b8 <__alt_data_end+0xfffadd88>
    36c4:	b809883a 	mov	r4,r23
    36c8:	b00b883a 	mov	r5,r22
    36cc:	00054b00 	call	54b0 <__swsetup_r>
    36d0:	10002d1e 	bne	r2,zero,3788 <___vfprintf_internal_r+0x3f8>
    36d4:	b0c0030b 	ldhu	r3,12(r22)
    36d8:	01000284 	movi	r4,10
    36dc:	1805883a 	mov	r2,r3
    36e0:	1080068c 	andi	r2,r2,26
    36e4:	113f541e 	bne	r2,r4,3438 <__alt_data_end+0xfffadd08>
    36e8:	b080038b 	ldhu	r2,14(r22)
    36ec:	113fffcc 	andi	r4,r2,65535
    36f0:	2120001c 	xori	r4,r4,32768
    36f4:	21200004 	addi	r4,r4,-32768
    36f8:	203f4f16 	blt	r4,zero,3438 <__alt_data_end+0xfffadd08>
    36fc:	b2c01917 	ldw	r11,100(r22)
    3700:	b2800717 	ldw	r10,28(r22)
    3704:	b2400917 	ldw	r9,36(r22)
    3708:	d9812a17 	ldw	r6,1192(sp)
    370c:	d9c12d17 	ldw	r7,1204(sp)
    3710:	02010004 	movi	r8,1024
    3714:	18ffff4c 	andi	r3,r3,65533
    3718:	d881078d 	sth	r2,1054(sp)
    371c:	b809883a 	mov	r4,r23
    3720:	d8800404 	addi	r2,sp,16
    3724:	d9410404 	addi	r5,sp,1040
    3728:	d8c1070d 	sth	r3,1052(sp)
    372c:	dac11d15 	stw	r11,1140(sp)
    3730:	da810b15 	stw	r10,1068(sp)
    3734:	da410d15 	stw	r9,1076(sp)
    3738:	d8810415 	stw	r2,1040(sp)
    373c:	d8810815 	stw	r2,1056(sp)
    3740:	da010615 	stw	r8,1048(sp)
    3744:	da010915 	stw	r8,1060(sp)
    3748:	d8010a15 	stw	zero,1064(sp)
    374c:	00033900 	call	3390 <___vfprintf_internal_r>
    3750:	1021883a 	mov	r16,r2
    3754:	10000416 	blt	r2,zero,3768 <___vfprintf_internal_r+0x3d8>
    3758:	b809883a 	mov	r4,r23
    375c:	d9410404 	addi	r5,sp,1040
    3760:	0006f300 	call	6f30 <_fflush_r>
    3764:	1007301e 	bne	r2,zero,5428 <___vfprintf_internal_r+0x2098>
    3768:	d881070b 	ldhu	r2,1052(sp)
    376c:	1080100c 	andi	r2,r2,64
    3770:	10000326 	beq	r2,zero,3780 <___vfprintf_internal_r+0x3f0>
    3774:	b080030b 	ldhu	r2,12(r22)
    3778:	10801014 	ori	r2,r2,64
    377c:	b080030d 	sth	r2,12(r22)
    3780:	8005883a 	mov	r2,r16
    3784:	00000106 	br	378c <___vfprintf_internal_r+0x3fc>
    3788:	00bfffc4 	movi	r2,-1
    378c:	dfc14917 	ldw	ra,1316(sp)
    3790:	df014817 	ldw	fp,1312(sp)
    3794:	ddc14717 	ldw	r23,1308(sp)
    3798:	dd814617 	ldw	r22,1304(sp)
    379c:	dd414517 	ldw	r21,1300(sp)
    37a0:	dd014417 	ldw	r20,1296(sp)
    37a4:	dcc14317 	ldw	r19,1292(sp)
    37a8:	dc814217 	ldw	r18,1288(sp)
    37ac:	dc414117 	ldw	r17,1284(sp)
    37b0:	dc014017 	ldw	r16,1280(sp)
    37b4:	dec14a04 	addi	sp,sp,1320
    37b8:	f800283a 	ret
    37bc:	b809883a 	mov	r4,r23
    37c0:	b00b883a 	mov	r5,r22
    37c4:	d9811e04 	addi	r6,sp,1144
    37c8:	0009fd40 	call	9fd4 <__sprint_r>
    37cc:	1000081e 	bne	r2,zero,37f0 <___vfprintf_internal_r+0x460>
    37d0:	da000404 	addi	r8,sp,16
    37d4:	003f4506 	br	34ec <__alt_data_end+0xfffaddbc>
    37d8:	d8812017 	ldw	r2,1152(sp)
    37dc:	10000426 	beq	r2,zero,37f0 <___vfprintf_internal_r+0x460>
    37e0:	b809883a 	mov	r4,r23
    37e4:	b00b883a 	mov	r5,r22
    37e8:	d9811e04 	addi	r6,sp,1144
    37ec:	0009fd40 	call	9fd4 <__sprint_r>
    37f0:	b080030b 	ldhu	r2,12(r22)
    37f4:	1080100c 	andi	r2,r2,64
    37f8:	103fe31e 	bne	r2,zero,3788 <__alt_data_end+0xfffae058>
    37fc:	d8812f17 	ldw	r2,1212(sp)
    3800:	003fe206 	br	378c <__alt_data_end+0xfffae05c>
    3804:	b809883a 	mov	r4,r23
    3808:	00074ec0 	call	74ec <__sinit>
    380c:	003ef806 	br	33f0 <__alt_data_end+0xfffadcc0>
    3810:	e005883a 	mov	r2,fp
    3814:	9cc00114 	ori	r19,r19,4
    3818:	e4000007 	ldb	r16,0(fp)
    381c:	003f4406 	br	3530 <__alt_data_end+0xfffade00>
    3820:	e4000007 	ldb	r16,0(fp)
    3824:	01000a84 	movi	r4,42
    3828:	e0800044 	addi	r2,fp,1
    382c:	8106f626 	beq	r16,r4,5408 <___vfprintf_internal_r+0x2078>
    3830:	857ff404 	addi	r21,r16,-48
    3834:	1039883a 	mov	fp,r2
    3838:	0013883a 	mov	r9,zero
    383c:	957f3d36 	bltu	r18,r21,3534 <__alt_data_end+0xfffade04>
    3840:	0009883a 	mov	r4,zero
    3844:	01400284 	movi	r5,10
    3848:	000cb080 	call	cb08 <__mulsi3>
    384c:	e4000007 	ldb	r16,0(fp)
    3850:	a889883a 	add	r4,r21,r2
    3854:	e7000044 	addi	fp,fp,1
    3858:	857ff404 	addi	r21,r16,-48
    385c:	957ff92e 	bgeu	r18,r21,3844 <__alt_data_end+0xfffae114>
    3860:	2013883a 	mov	r9,r4
    3864:	203f330e 	bge	r4,zero,3534 <__alt_data_end+0xfffade04>
    3868:	027fffc4 	movi	r9,-1
    386c:	003f3106 	br	3534 <__alt_data_end+0xfffade04>
    3870:	9cc02014 	ori	r19,r19,128
    3874:	e005883a 	mov	r2,fp
    3878:	e4000007 	ldb	r16,0(fp)
    387c:	003f2c06 	br	3530 <__alt_data_end+0xfffade00>
    3880:	857ff404 	addi	r21,r16,-48
    3884:	d8012e15 	stw	zero,1208(sp)
    3888:	e021883a 	mov	r16,fp
    388c:	0009883a 	mov	r4,zero
    3890:	da412c15 	stw	r9,1200(sp)
    3894:	01400284 	movi	r5,10
    3898:	000cb080 	call	cb08 <__mulsi3>
    389c:	81400007 	ldb	r5,0(r16)
    38a0:	1549883a 	add	r4,r2,r21
    38a4:	e7000044 	addi	fp,fp,1
    38a8:	2d7ff404 	addi	r21,r5,-48
    38ac:	e021883a 	mov	r16,fp
    38b0:	957ff82e 	bgeu	r18,r21,3894 <__alt_data_end+0xfffae164>
    38b4:	2821883a 	mov	r16,r5
    38b8:	d9012e15 	stw	r4,1208(sp)
    38bc:	da412c17 	ldw	r9,1200(sp)
    38c0:	003f1c06 	br	3534 <__alt_data_end+0xfffade04>
    38c4:	da012a17 	ldw	r8,1192(sp)
    38c8:	df012a15 	stw	fp,1192(sp)
    38cc:	9839883a 	mov	fp,r19
    38d0:	dcc12b03 	ldbu	r19,1196(sp)
    38d4:	e7000414 	ori	fp,fp,16
    38d8:	e080080c 	andi	r2,fp,32
    38dc:	dcc12785 	stb	r19,1182(sp)
    38e0:	d8c12d17 	ldw	r3,1204(sp)
    38e4:	1001ce26 	beq	r2,zero,4020 <___vfprintf_internal_r+0xc90>
    38e8:	d9012d17 	ldw	r4,1204(sp)
    38ec:	18800117 	ldw	r2,4(r3)
    38f0:	1c800017 	ldw	r18,0(r3)
    38f4:	21000204 	addi	r4,r4,8
    38f8:	d9012d15 	stw	r4,1204(sp)
    38fc:	102b883a 	mov	r21,r2
    3900:	10044916 	blt	r2,zero,4a28 <___vfprintf_internal_r+0x1698>
    3904:	dcc12783 	ldbu	r19,1182(sp)
    3908:	da413215 	stw	r9,1224(sp)
    390c:	00800044 	movi	r2,1
    3910:	9546b03a 	or	r3,r18,r21
    3914:	48000216 	blt	r9,zero,3920 <___vfprintf_internal_r+0x590>
    3918:	013fdfc4 	movi	r4,-129
    391c:	e138703a 	and	fp,fp,r4
    3920:	1802251e 	bne	r3,zero,41b8 <___vfprintf_internal_r+0xe28>
    3924:	48031726 	beq	r9,zero,4584 <___vfprintf_internal_r+0x11f4>
    3928:	10803fcc 	andi	r2,r2,255
    392c:	00c00044 	movi	r3,1
    3930:	10c24526 	beq	r2,r3,4248 <___vfprintf_internal_r+0xeb8>
    3934:	00c00084 	movi	r3,2
    3938:	10c33426 	beq	r2,r3,460c <___vfprintf_internal_r+0x127c>
    393c:	d8c10e04 	addi	r3,sp,1080
    3940:	9008d0fa 	srli	r4,r18,3
    3944:	a80a977a 	slli	r5,r21,29
    3948:	a82ad0fa 	srli	r21,r21,3
    394c:	948001cc 	andi	r18,r18,7
    3950:	90800c04 	addi	r2,r18,48
    3954:	18ffffc4 	addi	r3,r3,-1
    3958:	2924b03a 	or	r18,r5,r4
    395c:	18800005 	stb	r2,0(r3)
    3960:	9548b03a 	or	r4,r18,r21
    3964:	203ff61e 	bne	r4,zero,3940 <__alt_data_end+0xfffae210>
    3968:	e100004c 	andi	r4,fp,1
    396c:	d8c13115 	stw	r3,1220(sp)
    3970:	20039a1e 	bne	r4,zero,47dc <___vfprintf_internal_r+0x144c>
    3974:	d8812817 	ldw	r2,1184(sp)
    3978:	10e3c83a 	sub	r17,r2,r3
    397c:	8805883a 	mov	r2,r17
    3980:	8a40010e 	bge	r17,r9,3988 <___vfprintf_internal_r+0x5f8>
    3984:	4805883a 	mov	r2,r9
    3988:	d8812b15 	stw	r2,1196(sp)
    398c:	d8013415 	stw	zero,1232(sp)
    3990:	98803fcc 	andi	r2,r19,255
    3994:	1080201c 	xori	r2,r2,128
    3998:	10bfe004 	addi	r2,r2,-128
    399c:	10000326 	beq	r2,zero,39ac <___vfprintf_internal_r+0x61c>
    39a0:	d8c12b17 	ldw	r3,1196(sp)
    39a4:	18c00044 	addi	r3,r3,1
    39a8:	d8c12b15 	stw	r3,1196(sp)
    39ac:	e0c0008c 	andi	r3,fp,2
    39b0:	d8c12c15 	stw	r3,1200(sp)
    39b4:	18000326 	beq	r3,zero,39c4 <___vfprintf_internal_r+0x634>
    39b8:	d8c12b17 	ldw	r3,1196(sp)
    39bc:	18c00084 	addi	r3,r3,2
    39c0:	d8c12b15 	stw	r3,1196(sp)
    39c4:	e0c0210c 	andi	r3,fp,132
    39c8:	d8c13015 	stw	r3,1216(sp)
    39cc:	1801f81e 	bne	r3,zero,41b0 <___vfprintf_internal_r+0xe20>
    39d0:	d9012e17 	ldw	r4,1208(sp)
    39d4:	d8c12b17 	ldw	r3,1196(sp)
    39d8:	20ebc83a 	sub	r21,r4,r3
    39dc:	0541f40e 	bge	zero,r21,41b0 <___vfprintf_internal_r+0xe20>
    39e0:	02400404 	movi	r9,16
    39e4:	d8c12017 	ldw	r3,1152(sp)
    39e8:	d8811f17 	ldw	r2,1148(sp)
    39ec:	4d45750e 	bge	r9,r21,4fc4 <___vfprintf_internal_r+0x1c34>
    39f0:	01400074 	movhi	r5,1
    39f4:	2948e584 	addi	r5,r5,9110
    39f8:	d9413615 	stw	r5,1240(sp)
    39fc:	4827883a 	mov	r19,r9
    3a00:	048001c4 	movi	r18,7
    3a04:	00000306 	br	3a14 <___vfprintf_internal_r+0x684>
    3a08:	ad7ffc04 	addi	r21,r21,-16
    3a0c:	42000204 	addi	r8,r8,8
    3a10:	9d40130e 	bge	r19,r21,3a60 <___vfprintf_internal_r+0x6d0>
    3a14:	01000074 	movhi	r4,1
    3a18:	18c00404 	addi	r3,r3,16
    3a1c:	10800044 	addi	r2,r2,1
    3a20:	2108e584 	addi	r4,r4,9110
    3a24:	41000015 	stw	r4,0(r8)
    3a28:	44c00115 	stw	r19,4(r8)
    3a2c:	d8c12015 	stw	r3,1152(sp)
    3a30:	d8811f15 	stw	r2,1148(sp)
    3a34:	90bff40e 	bge	r18,r2,3a08 <__alt_data_end+0xfffae2d8>
    3a38:	b809883a 	mov	r4,r23
    3a3c:	b00b883a 	mov	r5,r22
    3a40:	d9811e04 	addi	r6,sp,1144
    3a44:	0009fd40 	call	9fd4 <__sprint_r>
    3a48:	103f691e 	bne	r2,zero,37f0 <__alt_data_end+0xfffae0c0>
    3a4c:	ad7ffc04 	addi	r21,r21,-16
    3a50:	d8c12017 	ldw	r3,1152(sp)
    3a54:	d8811f17 	ldw	r2,1148(sp)
    3a58:	da000404 	addi	r8,sp,16
    3a5c:	9d7fed16 	blt	r19,r21,3a14 <__alt_data_end+0xfffae2e4>
    3a60:	d9413617 	ldw	r5,1240(sp)
    3a64:	a8c7883a 	add	r3,r21,r3
    3a68:	10800044 	addi	r2,r2,1
    3a6c:	41400015 	stw	r5,0(r8)
    3a70:	45400115 	stw	r21,4(r8)
    3a74:	d8c12015 	stw	r3,1152(sp)
    3a78:	d8811f15 	stw	r2,1148(sp)
    3a7c:	010001c4 	movi	r4,7
    3a80:	20832b16 	blt	r4,r2,4730 <___vfprintf_internal_r+0x13a0>
    3a84:	d8812787 	ldb	r2,1182(sp)
    3a88:	42000204 	addi	r8,r8,8
    3a8c:	10000c26 	beq	r2,zero,3ac0 <___vfprintf_internal_r+0x730>
    3a90:	d8811f17 	ldw	r2,1148(sp)
    3a94:	d9012784 	addi	r4,sp,1182
    3a98:	18c00044 	addi	r3,r3,1
    3a9c:	10800044 	addi	r2,r2,1
    3aa0:	41000015 	stw	r4,0(r8)
    3aa4:	01000044 	movi	r4,1
    3aa8:	41000115 	stw	r4,4(r8)
    3aac:	d8c12015 	stw	r3,1152(sp)
    3ab0:	d8811f15 	stw	r2,1148(sp)
    3ab4:	010001c4 	movi	r4,7
    3ab8:	2082c416 	blt	r4,r2,45cc <___vfprintf_internal_r+0x123c>
    3abc:	42000204 	addi	r8,r8,8
    3ac0:	d8812c17 	ldw	r2,1200(sp)
    3ac4:	10000c26 	beq	r2,zero,3af8 <___vfprintf_internal_r+0x768>
    3ac8:	d8811f17 	ldw	r2,1148(sp)
    3acc:	d9012704 	addi	r4,sp,1180
    3ad0:	18c00084 	addi	r3,r3,2
    3ad4:	10800044 	addi	r2,r2,1
    3ad8:	41000015 	stw	r4,0(r8)
    3adc:	01000084 	movi	r4,2
    3ae0:	41000115 	stw	r4,4(r8)
    3ae4:	d8c12015 	stw	r3,1152(sp)
    3ae8:	d8811f15 	stw	r2,1148(sp)
    3aec:	010001c4 	movi	r4,7
    3af0:	2082be16 	blt	r4,r2,45ec <___vfprintf_internal_r+0x125c>
    3af4:	42000204 	addi	r8,r8,8
    3af8:	d9013017 	ldw	r4,1216(sp)
    3afc:	00802004 	movi	r2,128
    3b00:	20822026 	beq	r4,r2,4384 <___vfprintf_internal_r+0xff4>
    3b04:	d9413217 	ldw	r5,1224(sp)
    3b08:	2c67c83a 	sub	r19,r5,r17
    3b0c:	04c0260e 	bge	zero,r19,3ba8 <___vfprintf_internal_r+0x818>
    3b10:	05400404 	movi	r21,16
    3b14:	d8811f17 	ldw	r2,1148(sp)
    3b18:	acc4720e 	bge	r21,r19,4ce4 <___vfprintf_internal_r+0x1954>
    3b1c:	01400074 	movhi	r5,1
    3b20:	2948e184 	addi	r5,r5,9094
    3b24:	d9412c15 	stw	r5,1200(sp)
    3b28:	048001c4 	movi	r18,7
    3b2c:	00000306 	br	3b3c <___vfprintf_internal_r+0x7ac>
    3b30:	9cfffc04 	addi	r19,r19,-16
    3b34:	42000204 	addi	r8,r8,8
    3b38:	acc0110e 	bge	r21,r19,3b80 <___vfprintf_internal_r+0x7f0>
    3b3c:	18c00404 	addi	r3,r3,16
    3b40:	10800044 	addi	r2,r2,1
    3b44:	45000015 	stw	r20,0(r8)
    3b48:	45400115 	stw	r21,4(r8)
    3b4c:	d8c12015 	stw	r3,1152(sp)
    3b50:	d8811f15 	stw	r2,1148(sp)
    3b54:	90bff60e 	bge	r18,r2,3b30 <__alt_data_end+0xfffae400>
    3b58:	b809883a 	mov	r4,r23
    3b5c:	b00b883a 	mov	r5,r22
    3b60:	d9811e04 	addi	r6,sp,1144
    3b64:	0009fd40 	call	9fd4 <__sprint_r>
    3b68:	103f211e 	bne	r2,zero,37f0 <__alt_data_end+0xfffae0c0>
    3b6c:	9cfffc04 	addi	r19,r19,-16
    3b70:	d8c12017 	ldw	r3,1152(sp)
    3b74:	d8811f17 	ldw	r2,1148(sp)
    3b78:	da000404 	addi	r8,sp,16
    3b7c:	acffef16 	blt	r21,r19,3b3c <__alt_data_end+0xfffae40c>
    3b80:	d9012c17 	ldw	r4,1200(sp)
    3b84:	1cc7883a 	add	r3,r3,r19
    3b88:	10800044 	addi	r2,r2,1
    3b8c:	41000015 	stw	r4,0(r8)
    3b90:	44c00115 	stw	r19,4(r8)
    3b94:	d8c12015 	stw	r3,1152(sp)
    3b98:	d8811f15 	stw	r2,1148(sp)
    3b9c:	010001c4 	movi	r4,7
    3ba0:	20828216 	blt	r4,r2,45ac <___vfprintf_internal_r+0x121c>
    3ba4:	42000204 	addi	r8,r8,8
    3ba8:	e080400c 	andi	r2,fp,256
    3bac:	1001ac1e 	bne	r2,zero,4260 <___vfprintf_internal_r+0xed0>
    3bb0:	d8811f17 	ldw	r2,1148(sp)
    3bb4:	d9413117 	ldw	r5,1220(sp)
    3bb8:	1c47883a 	add	r3,r3,r17
    3bbc:	10800044 	addi	r2,r2,1
    3bc0:	41400015 	stw	r5,0(r8)
    3bc4:	44400115 	stw	r17,4(r8)
    3bc8:	d8c12015 	stw	r3,1152(sp)
    3bcc:	d8811f15 	stw	r2,1148(sp)
    3bd0:	010001c4 	movi	r4,7
    3bd4:	20825d16 	blt	r4,r2,454c <___vfprintf_internal_r+0x11bc>
    3bd8:	42000204 	addi	r8,r8,8
    3bdc:	e080010c 	andi	r2,fp,4
    3be0:	10003126 	beq	r2,zero,3ca8 <___vfprintf_internal_r+0x918>
    3be4:	d8812e17 	ldw	r2,1208(sp)
    3be8:	d9012b17 	ldw	r4,1196(sp)
    3bec:	1121c83a 	sub	r16,r2,r4
    3bf0:	04002d0e 	bge	zero,r16,3ca8 <___vfprintf_internal_r+0x918>
    3bf4:	04400404 	movi	r17,16
    3bf8:	d8811f17 	ldw	r2,1148(sp)
    3bfc:	8c05340e 	bge	r17,r16,50d0 <___vfprintf_internal_r+0x1d40>
    3c00:	01000074 	movhi	r4,1
    3c04:	2108e584 	addi	r4,r4,9110
    3c08:	d9013615 	stw	r4,1240(sp)
    3c0c:	048001c4 	movi	r18,7
    3c10:	00000306 	br	3c20 <___vfprintf_internal_r+0x890>
    3c14:	843ffc04 	addi	r16,r16,-16
    3c18:	42000204 	addi	r8,r8,8
    3c1c:	8c00130e 	bge	r17,r16,3c6c <___vfprintf_internal_r+0x8dc>
    3c20:	01400074 	movhi	r5,1
    3c24:	18c00404 	addi	r3,r3,16
    3c28:	10800044 	addi	r2,r2,1
    3c2c:	2948e584 	addi	r5,r5,9110
    3c30:	41400015 	stw	r5,0(r8)
    3c34:	44400115 	stw	r17,4(r8)
    3c38:	d8c12015 	stw	r3,1152(sp)
    3c3c:	d8811f15 	stw	r2,1148(sp)
    3c40:	90bff40e 	bge	r18,r2,3c14 <__alt_data_end+0xfffae4e4>
    3c44:	b809883a 	mov	r4,r23
    3c48:	b00b883a 	mov	r5,r22
    3c4c:	d9811e04 	addi	r6,sp,1144
    3c50:	0009fd40 	call	9fd4 <__sprint_r>
    3c54:	103ee61e 	bne	r2,zero,37f0 <__alt_data_end+0xfffae0c0>
    3c58:	843ffc04 	addi	r16,r16,-16
    3c5c:	d8c12017 	ldw	r3,1152(sp)
    3c60:	d8811f17 	ldw	r2,1148(sp)
    3c64:	da000404 	addi	r8,sp,16
    3c68:	8c3fed16 	blt	r17,r16,3c20 <__alt_data_end+0xfffae4f0>
    3c6c:	d9013617 	ldw	r4,1240(sp)
    3c70:	1c07883a 	add	r3,r3,r16
    3c74:	10800044 	addi	r2,r2,1
    3c78:	41000015 	stw	r4,0(r8)
    3c7c:	44000115 	stw	r16,4(r8)
    3c80:	d8c12015 	stw	r3,1152(sp)
    3c84:	d8811f15 	stw	r2,1148(sp)
    3c88:	010001c4 	movi	r4,7
    3c8c:	2080060e 	bge	r4,r2,3ca8 <___vfprintf_internal_r+0x918>
    3c90:	b809883a 	mov	r4,r23
    3c94:	b00b883a 	mov	r5,r22
    3c98:	d9811e04 	addi	r6,sp,1144
    3c9c:	0009fd40 	call	9fd4 <__sprint_r>
    3ca0:	103ed31e 	bne	r2,zero,37f0 <__alt_data_end+0xfffae0c0>
    3ca4:	d8c12017 	ldw	r3,1152(sp)
    3ca8:	df012b17 	ldw	fp,1196(sp)
    3cac:	d9412e17 	ldw	r5,1208(sp)
    3cb0:	e140010e 	bge	fp,r5,3cb8 <___vfprintf_internal_r+0x928>
    3cb4:	2839883a 	mov	fp,r5
    3cb8:	d8812f17 	ldw	r2,1212(sp)
    3cbc:	1705883a 	add	r2,r2,fp
    3cc0:	d8812f15 	stw	r2,1212(sp)
    3cc4:	1802291e 	bne	r3,zero,456c <___vfprintf_internal_r+0x11dc>
    3cc8:	d8c12a17 	ldw	r3,1192(sp)
    3ccc:	d8011f15 	stw	zero,1148(sp)
    3cd0:	da000404 	addi	r8,sp,16
    3cd4:	18800007 	ldb	r2,0(r3)
    3cd8:	103ded1e 	bne	r2,zero,3490 <__alt_data_end+0xfffadd60>
    3cdc:	dc012a17 	ldw	r16,1192(sp)
    3ce0:	003e0506 	br	34f8 <__alt_data_end+0xfffaddc8>
    3ce4:	d9012d17 	ldw	r4,1204(sp)
    3ce8:	d9412d17 	ldw	r5,1204(sp)
    3cec:	da012a17 	ldw	r8,1192(sp)
    3cf0:	21000017 	ldw	r4,0(r4)
    3cf4:	29400117 	ldw	r5,4(r5)
    3cf8:	df012a15 	stw	fp,1192(sp)
    3cfc:	9839883a 	mov	fp,r19
    3d00:	dcc12b03 	ldbu	r19,1196(sp)
    3d04:	d9013715 	stw	r4,1244(sp)
    3d08:	d9413915 	stw	r5,1252(sp)
    3d0c:	da013f15 	stw	r8,1276(sp)
    3d10:	da413e15 	stw	r9,1272(sp)
    3d14:	dcc12785 	stb	r19,1182(sp)
    3d18:	0009c840 	call	9c84 <__fpclassifyd>
    3d1c:	d8c12d17 	ldw	r3,1204(sp)
    3d20:	04400044 	movi	r17,1
    3d24:	da013f17 	ldw	r8,1276(sp)
    3d28:	1c800204 	addi	r18,r3,8
    3d2c:	da413e17 	ldw	r9,1272(sp)
    3d30:	d9013717 	ldw	r4,1244(sp)
    3d34:	d9413917 	ldw	r5,1252(sp)
    3d38:	1443451e 	bne	r2,r17,4a50 <___vfprintf_internal_r+0x16c0>
    3d3c:	000d883a 	mov	r6,zero
    3d40:	000f883a 	mov	r7,zero
    3d44:	000deb00 	call	deb0 <__ledf2>
    3d48:	da013f17 	ldw	r8,1276(sp)
    3d4c:	1004fe16 	blt	r2,zero,5148 <___vfprintf_internal_r+0x1db8>
    3d50:	dcc12783 	ldbu	r19,1182(sp)
    3d54:	008011c4 	movi	r2,71
    3d58:	14045d0e 	bge	r2,r16,4ed0 <___vfprintf_internal_r+0x1b40>
    3d5c:	01400074 	movhi	r5,1
    3d60:	2948d204 	addi	r5,r5,9032
    3d64:	d9413115 	stw	r5,1220(sp)
    3d68:	00c000c4 	movi	r3,3
    3d6c:	00bfdfc4 	movi	r2,-129
    3d70:	d8c12b15 	stw	r3,1196(sp)
    3d74:	e0b8703a 	and	fp,fp,r2
    3d78:	dc812d15 	stw	r18,1204(sp)
    3d7c:	1823883a 	mov	r17,r3
    3d80:	d8013215 	stw	zero,1224(sp)
    3d84:	d8013415 	stw	zero,1232(sp)
    3d88:	003f0106 	br	3990 <__alt_data_end+0xfffae260>
    3d8c:	9cc00214 	ori	r19,r19,8
    3d90:	e005883a 	mov	r2,fp
    3d94:	e4000007 	ldb	r16,0(fp)
    3d98:	003de506 	br	3530 <__alt_data_end+0xfffade00>
    3d9c:	da012a17 	ldw	r8,1192(sp)
    3da0:	df012a15 	stw	fp,1192(sp)
    3da4:	9f000414 	ori	fp,r19,16
    3da8:	e0c0080c 	andi	r3,fp,32
    3dac:	d8812d17 	ldw	r2,1204(sp)
    3db0:	18007626 	beq	r3,zero,3f8c <___vfprintf_internal_r+0xbfc>
    3db4:	d9412d17 	ldw	r5,1204(sp)
    3db8:	14800017 	ldw	r18,0(r2)
    3dbc:	15400117 	ldw	r21,4(r2)
    3dc0:	29400204 	addi	r5,r5,8
    3dc4:	d9412d15 	stw	r5,1204(sp)
    3dc8:	0005883a 	mov	r2,zero
    3dcc:	9546b03a 	or	r3,r18,r21
    3dd0:	d8012785 	stb	zero,1182(sp)
    3dd4:	da413215 	stw	r9,1224(sp)
    3dd8:	0027883a 	mov	r19,zero
    3ddc:	003ecd06 	br	3914 <__alt_data_end+0xfffae1e4>
    3de0:	da012a17 	ldw	r8,1192(sp)
    3de4:	df012a15 	stw	fp,1192(sp)
    3de8:	9f000414 	ori	fp,r19,16
    3dec:	e0c0080c 	andi	r3,fp,32
    3df0:	d8812d17 	ldw	r2,1204(sp)
    3df4:	18002c26 	beq	r3,zero,3ea8 <___vfprintf_internal_r+0xb18>
    3df8:	d9012d17 	ldw	r4,1204(sp)
    3dfc:	14800017 	ldw	r18,0(r2)
    3e00:	15400117 	ldw	r21,4(r2)
    3e04:	21000204 	addi	r4,r4,8
    3e08:	d9012d15 	stw	r4,1204(sp)
    3e0c:	00800044 	movi	r2,1
    3e10:	9546b03a 	or	r3,r18,r21
    3e14:	003fee06 	br	3dd0 <__alt_data_end+0xfffae6a0>
    3e18:	da012a17 	ldw	r8,1192(sp)
    3e1c:	df012a15 	stw	fp,1192(sp)
    3e20:	9839883a 	mov	fp,r19
    3e24:	dcc12b03 	ldbu	r19,1196(sp)
    3e28:	01400074 	movhi	r5,1
    3e2c:	2948d504 	addi	r5,r5,9044
    3e30:	dcc12785 	stb	r19,1182(sp)
    3e34:	d9413b15 	stw	r5,1260(sp)
    3e38:	e0c0080c 	andi	r3,fp,32
    3e3c:	d8812d17 	ldw	r2,1204(sp)
    3e40:	18002e26 	beq	r3,zero,3efc <___vfprintf_internal_r+0xb6c>
    3e44:	d9412d17 	ldw	r5,1204(sp)
    3e48:	14800017 	ldw	r18,0(r2)
    3e4c:	15400117 	ldw	r21,4(r2)
    3e50:	29400204 	addi	r5,r5,8
    3e54:	d9412d15 	stw	r5,1204(sp)
    3e58:	e080004c 	andi	r2,fp,1
    3e5c:	10025c26 	beq	r2,zero,47d0 <___vfprintf_internal_r+0x1440>
    3e60:	9546b03a 	or	r3,r18,r21
    3e64:	18038f26 	beq	r3,zero,4ca4 <___vfprintf_internal_r+0x1914>
    3e68:	00800c04 	movi	r2,48
    3e6c:	d8812705 	stb	r2,1180(sp)
    3e70:	dc012745 	stb	r16,1181(sp)
    3e74:	e7000094 	ori	fp,fp,2
    3e78:	00800084 	movi	r2,2
    3e7c:	003fd406 	br	3dd0 <__alt_data_end+0xfffae6a0>
    3e80:	9cc00814 	ori	r19,r19,32
    3e84:	e005883a 	mov	r2,fp
    3e88:	e4000007 	ldb	r16,0(fp)
    3e8c:	003da806 	br	3530 <__alt_data_end+0xfffade00>
    3e90:	da012a17 	ldw	r8,1192(sp)
    3e94:	df012a15 	stw	fp,1192(sp)
    3e98:	9839883a 	mov	fp,r19
    3e9c:	e0c0080c 	andi	r3,fp,32
    3ea0:	d8812d17 	ldw	r2,1204(sp)
    3ea4:	183fd41e 	bne	r3,zero,3df8 <__alt_data_end+0xfffae6c8>
    3ea8:	e0c0040c 	andi	r3,fp,16
    3eac:	18035f26 	beq	r3,zero,4c2c <___vfprintf_internal_r+0x189c>
    3eb0:	d9412d17 	ldw	r5,1204(sp)
    3eb4:	14800017 	ldw	r18,0(r2)
    3eb8:	002b883a 	mov	r21,zero
    3ebc:	29400104 	addi	r5,r5,4
    3ec0:	d9412d15 	stw	r5,1204(sp)
    3ec4:	00800044 	movi	r2,1
    3ec8:	9007883a 	mov	r3,r18
    3ecc:	003fc006 	br	3dd0 <__alt_data_end+0xfffae6a0>
    3ed0:	da012a17 	ldw	r8,1192(sp)
    3ed4:	df012a15 	stw	fp,1192(sp)
    3ed8:	9839883a 	mov	fp,r19
    3edc:	dcc12b03 	ldbu	r19,1196(sp)
    3ee0:	01000074 	movhi	r4,1
    3ee4:	2108da04 	addi	r4,r4,9064
    3ee8:	d9013b15 	stw	r4,1260(sp)
    3eec:	dcc12785 	stb	r19,1182(sp)
    3ef0:	e0c0080c 	andi	r3,fp,32
    3ef4:	d8812d17 	ldw	r2,1204(sp)
    3ef8:	183fd21e 	bne	r3,zero,3e44 <__alt_data_end+0xfffae714>
    3efc:	e0c0040c 	andi	r3,fp,16
    3f00:	18035426 	beq	r3,zero,4c54 <___vfprintf_internal_r+0x18c4>
    3f04:	d8c12d17 	ldw	r3,1204(sp)
    3f08:	14800017 	ldw	r18,0(r2)
    3f0c:	002b883a 	mov	r21,zero
    3f10:	18c00104 	addi	r3,r3,4
    3f14:	d8c12d15 	stw	r3,1204(sp)
    3f18:	003fcf06 	br	3e58 <__alt_data_end+0xfffae728>
    3f1c:	e4000007 	ldb	r16,0(fp)
    3f20:	00801b04 	movi	r2,108
    3f24:	8083f726 	beq	r16,r2,4f04 <___vfprintf_internal_r+0x1b74>
    3f28:	9cc00414 	ori	r19,r19,16
    3f2c:	e005883a 	mov	r2,fp
    3f30:	003d7f06 	br	3530 <__alt_data_end+0xfffade00>
    3f34:	da012a17 	ldw	r8,1192(sp)
    3f38:	df012a15 	stw	fp,1192(sp)
    3f3c:	9839883a 	mov	fp,r19
    3f40:	dcc12b03 	ldbu	r19,1196(sp)
    3f44:	e080080c 	andi	r2,fp,32
    3f48:	dcc12785 	stb	r19,1182(sp)
    3f4c:	10032226 	beq	r2,zero,4bd8 <___vfprintf_internal_r+0x1848>
    3f50:	d9412d17 	ldw	r5,1204(sp)
    3f54:	d9012f17 	ldw	r4,1212(sp)
    3f58:	28800017 	ldw	r2,0(r5)
    3f5c:	2007d7fa 	srai	r3,r4,31
    3f60:	29400104 	addi	r5,r5,4
    3f64:	d9412d15 	stw	r5,1204(sp)
    3f68:	11000015 	stw	r4,0(r2)
    3f6c:	10c00115 	stw	r3,4(r2)
    3f70:	003d4406 	br	3484 <__alt_data_end+0xfffadd54>
    3f74:	da012a17 	ldw	r8,1192(sp)
    3f78:	df012a15 	stw	fp,1192(sp)
    3f7c:	9839883a 	mov	fp,r19
    3f80:	e0c0080c 	andi	r3,fp,32
    3f84:	d8812d17 	ldw	r2,1204(sp)
    3f88:	183f8a1e 	bne	r3,zero,3db4 <__alt_data_end+0xfffae684>
    3f8c:	e0c0040c 	andi	r3,fp,16
    3f90:	18031c26 	beq	r3,zero,4c04 <___vfprintf_internal_r+0x1874>
    3f94:	14800017 	ldw	r18,0(r2)
    3f98:	d8812d17 	ldw	r2,1204(sp)
    3f9c:	002b883a 	mov	r21,zero
    3fa0:	9007883a 	mov	r3,r18
    3fa4:	10800104 	addi	r2,r2,4
    3fa8:	d8812d15 	stw	r2,1204(sp)
    3fac:	0005883a 	mov	r2,zero
    3fb0:	003f8706 	br	3dd0 <__alt_data_end+0xfffae6a0>
    3fb4:	d9412d17 	ldw	r5,1204(sp)
    3fb8:	00800c04 	movi	r2,48
    3fbc:	d8812705 	stb	r2,1180(sp)
    3fc0:	2c800017 	ldw	r18,0(r5)
    3fc4:	00801e04 	movi	r2,120
    3fc8:	d8812745 	stb	r2,1181(sp)
    3fcc:	00800074 	movhi	r2,1
    3fd0:	1088da04 	addi	r2,r2,9064
    3fd4:	29400104 	addi	r5,r5,4
    3fd8:	da012a17 	ldw	r8,1192(sp)
    3fdc:	d8813b15 	stw	r2,1260(sp)
    3fe0:	df012a15 	stw	fp,1192(sp)
    3fe4:	002b883a 	mov	r21,zero
    3fe8:	9f000094 	ori	fp,r19,2
    3fec:	d9412d15 	stw	r5,1204(sp)
    3ff0:	00800084 	movi	r2,2
    3ff4:	04001e04 	movi	r16,120
    3ff8:	9007883a 	mov	r3,r18
    3ffc:	003f7406 	br	3dd0 <__alt_data_end+0xfffae6a0>
    4000:	da012a17 	ldw	r8,1192(sp)
    4004:	df012a15 	stw	fp,1192(sp)
    4008:	9839883a 	mov	fp,r19
    400c:	dcc12b03 	ldbu	r19,1196(sp)
    4010:	e080080c 	andi	r2,fp,32
    4014:	d8c12d17 	ldw	r3,1204(sp)
    4018:	dcc12785 	stb	r19,1182(sp)
    401c:	103e321e 	bne	r2,zero,38e8 <__alt_data_end+0xfffae1b8>
    4020:	e080040c 	andi	r2,fp,16
    4024:	10031326 	beq	r2,zero,4c74 <___vfprintf_internal_r+0x18e4>
    4028:	1c800017 	ldw	r18,0(r3)
    402c:	d9412d17 	ldw	r5,1204(sp)
    4030:	902bd7fa 	srai	r21,r18,31
    4034:	29400104 	addi	r5,r5,4
    4038:	d9412d15 	stw	r5,1204(sp)
    403c:	a805883a 	mov	r2,r21
    4040:	003e2f06 	br	3900 <__alt_data_end+0xfffae1d0>
    4044:	9cc01014 	ori	r19,r19,64
    4048:	e005883a 	mov	r2,fp
    404c:	e4000007 	ldb	r16,0(fp)
    4050:	003d3706 	br	3530 <__alt_data_end+0xfffade00>
    4054:	d8c12d17 	ldw	r3,1204(sp)
    4058:	d9012d17 	ldw	r4,1204(sp)
    405c:	da012a17 	ldw	r8,1192(sp)
    4060:	18800017 	ldw	r2,0(r3)
    4064:	21000104 	addi	r4,r4,4
    4068:	00c00044 	movi	r3,1
    406c:	df012a15 	stw	fp,1192(sp)
    4070:	d8c12b15 	stw	r3,1196(sp)
    4074:	9839883a 	mov	fp,r19
    4078:	d8012785 	stb	zero,1182(sp)
    407c:	d8810405 	stb	r2,1040(sp)
    4080:	d9012d15 	stw	r4,1204(sp)
    4084:	1823883a 	mov	r17,r3
    4088:	d8c10404 	addi	r3,sp,1040
    408c:	d8013215 	stw	zero,1224(sp)
    4090:	d8013415 	stw	zero,1232(sp)
    4094:	d8c13115 	stw	r3,1220(sp)
    4098:	0005883a 	mov	r2,zero
    409c:	003e4306 	br	39ac <__alt_data_end+0xfffae27c>
    40a0:	d8812b07 	ldb	r2,1196(sp)
    40a4:	1002fc1e 	bne	r2,zero,4c98 <___vfprintf_internal_r+0x1908>
    40a8:	00c00804 	movi	r3,32
    40ac:	d8c12b05 	stb	r3,1196(sp)
    40b0:	e005883a 	mov	r2,fp
    40b4:	e4000007 	ldb	r16,0(fp)
    40b8:	003d1d06 	br	3530 <__alt_data_end+0xfffade00>
    40bc:	9cc00054 	ori	r19,r19,1
    40c0:	e005883a 	mov	r2,fp
    40c4:	e4000007 	ldb	r16,0(fp)
    40c8:	003d1906 	br	3530 <__alt_data_end+0xfffade00>
    40cc:	d9012d17 	ldw	r4,1204(sp)
    40d0:	d9412d17 	ldw	r5,1204(sp)
    40d4:	21000017 	ldw	r4,0(r4)
    40d8:	28c00104 	addi	r3,r5,4
    40dc:	d9012e15 	stw	r4,1208(sp)
    40e0:	20038c16 	blt	r4,zero,4f14 <___vfprintf_internal_r+0x1b84>
    40e4:	d8c12d15 	stw	r3,1204(sp)
    40e8:	e005883a 	mov	r2,fp
    40ec:	e4000007 	ldb	r16,0(fp)
    40f0:	003d0f06 	br	3530 <__alt_data_end+0xfffade00>
    40f4:	00c00ac4 	movi	r3,43
    40f8:	d8c12b05 	stb	r3,1196(sp)
    40fc:	e005883a 	mov	r2,fp
    4100:	e4000007 	ldb	r16,0(fp)
    4104:	003d0a06 	br	3530 <__alt_data_end+0xfffade00>
    4108:	d8c12d17 	ldw	r3,1204(sp)
    410c:	d9012d17 	ldw	r4,1204(sp)
    4110:	da012a17 	ldw	r8,1192(sp)
    4114:	18c00017 	ldw	r3,0(r3)
    4118:	df012a15 	stw	fp,1192(sp)
    411c:	d8012785 	stb	zero,1182(sp)
    4120:	d8c13115 	stw	r3,1220(sp)
    4124:	9839883a 	mov	fp,r19
    4128:	24800104 	addi	r18,r4,4
    412c:	1803f726 	beq	r3,zero,510c <___vfprintf_internal_r+0x1d7c>
    4130:	d9013117 	ldw	r4,1220(sp)
    4134:	48038916 	blt	r9,zero,4f5c <___vfprintf_internal_r+0x1bcc>
    4138:	480d883a 	mov	r6,r9
    413c:	000b883a 	mov	r5,zero
    4140:	da013f15 	stw	r8,1276(sp)
    4144:	da413e15 	stw	r9,1272(sp)
    4148:	00081fc0 	call	81fc <memchr>
    414c:	da013f17 	ldw	r8,1276(sp)
    4150:	da413e17 	ldw	r9,1272(sp)
    4154:	10045926 	beq	r2,zero,52bc <___vfprintf_internal_r+0x1f2c>
    4158:	d8c13117 	ldw	r3,1220(sp)
    415c:	10e3c83a 	sub	r17,r2,r3
    4160:	4c433516 	blt	r9,r17,4e38 <___vfprintf_internal_r+0x1aa8>
    4164:	8805883a 	mov	r2,r17
    4168:	88038116 	blt	r17,zero,4f70 <___vfprintf_internal_r+0x1be0>
    416c:	dcc12783 	ldbu	r19,1182(sp)
    4170:	d8812b15 	stw	r2,1196(sp)
    4174:	dc812d15 	stw	r18,1204(sp)
    4178:	d8013215 	stw	zero,1224(sp)
    417c:	d8013415 	stw	zero,1232(sp)
    4180:	003e0306 	br	3990 <__alt_data_end+0xfffae260>
    4184:	da012a17 	ldw	r8,1192(sp)
    4188:	df012a15 	stw	fp,1192(sp)
    418c:	9839883a 	mov	fp,r19
    4190:	dcc12b03 	ldbu	r19,1196(sp)
    4194:	dcc12785 	stb	r19,1182(sp)
    4198:	803d8f26 	beq	r16,zero,37d8 <__alt_data_end+0xfffae0a8>
    419c:	00c00044 	movi	r3,1
    41a0:	d8c12b15 	stw	r3,1196(sp)
    41a4:	dc010405 	stb	r16,1040(sp)
    41a8:	d8012785 	stb	zero,1182(sp)
    41ac:	003fb506 	br	4084 <__alt_data_end+0xfffae954>
    41b0:	d8c12017 	ldw	r3,1152(sp)
    41b4:	003e3506 	br	3a8c <__alt_data_end+0xfffae35c>
    41b8:	10803fcc 	andi	r2,r2,255
    41bc:	00c00044 	movi	r3,1
    41c0:	10fddc1e 	bne	r2,r3,3934 <__alt_data_end+0xfffae204>
    41c4:	a800021e 	bne	r21,zero,41d0 <___vfprintf_internal_r+0xe40>
    41c8:	00800244 	movi	r2,9
    41cc:	14801e2e 	bgeu	r2,r18,4248 <___vfprintf_internal_r+0xeb8>
    41d0:	dc012b15 	stw	r16,1196(sp)
    41d4:	dc410e04 	addi	r17,sp,1080
    41d8:	9021883a 	mov	r16,r18
    41dc:	da012c15 	stw	r8,1200(sp)
    41e0:	a825883a 	mov	r18,r21
    41e4:	482b883a 	mov	r21,r9
    41e8:	8009883a 	mov	r4,r16
    41ec:	900b883a 	mov	r5,r18
    41f0:	01800284 	movi	r6,10
    41f4:	000f883a 	mov	r7,zero
    41f8:	000c3c00 	call	c3c0 <__umoddi3>
    41fc:	10800c04 	addi	r2,r2,48
    4200:	8c7fffc4 	addi	r17,r17,-1
    4204:	8009883a 	mov	r4,r16
    4208:	900b883a 	mov	r5,r18
    420c:	01800284 	movi	r6,10
    4210:	000f883a 	mov	r7,zero
    4214:	88800005 	stb	r2,0(r17)
    4218:	000bd800 	call	bd80 <__udivdi3>
    421c:	1021883a 	mov	r16,r2
    4220:	10c4b03a 	or	r2,r2,r3
    4224:	1825883a 	mov	r18,r3
    4228:	103fef1e 	bne	r2,zero,41e8 <__alt_data_end+0xfffaeab8>
    422c:	d9012817 	ldw	r4,1184(sp)
    4230:	dc413115 	stw	r17,1220(sp)
    4234:	dc012b17 	ldw	r16,1196(sp)
    4238:	da012c17 	ldw	r8,1200(sp)
    423c:	a813883a 	mov	r9,r21
    4240:	2463c83a 	sub	r17,r4,r17
    4244:	003dcd06 	br	397c <__alt_data_end+0xfffae24c>
    4248:	94800c04 	addi	r18,r18,48
    424c:	d8c10dc4 	addi	r3,sp,1079
    4250:	dc810dc5 	stb	r18,1079(sp)
    4254:	dc413c17 	ldw	r17,1264(sp)
    4258:	d8c13115 	stw	r3,1220(sp)
    425c:	003dc706 	br	397c <__alt_data_end+0xfffae24c>
    4260:	00801944 	movi	r2,101
    4264:	1400720e 	bge	r2,r16,4430 <___vfprintf_internal_r+0x10a0>
    4268:	d9013717 	ldw	r4,1244(sp)
    426c:	d9413917 	ldw	r5,1252(sp)
    4270:	000d883a 	mov	r6,zero
    4274:	000f883a 	mov	r7,zero
    4278:	d8c13d15 	stw	r3,1268(sp)
    427c:	da013f15 	stw	r8,1276(sp)
    4280:	000dd4c0 	call	dd4c <__eqdf2>
    4284:	d8c13d17 	ldw	r3,1268(sp)
    4288:	da013f17 	ldw	r8,1276(sp)
    428c:	1000f41e 	bne	r2,zero,4660 <___vfprintf_internal_r+0x12d0>
    4290:	d8811f17 	ldw	r2,1148(sp)
    4294:	01000074 	movhi	r4,1
    4298:	2108e104 	addi	r4,r4,9092
    429c:	18c00044 	addi	r3,r3,1
    42a0:	10800044 	addi	r2,r2,1
    42a4:	41000015 	stw	r4,0(r8)
    42a8:	01000044 	movi	r4,1
    42ac:	41000115 	stw	r4,4(r8)
    42b0:	d8c12015 	stw	r3,1152(sp)
    42b4:	d8811f15 	stw	r2,1148(sp)
    42b8:	010001c4 	movi	r4,7
    42bc:	20828d16 	blt	r4,r2,4cf4 <___vfprintf_internal_r+0x1964>
    42c0:	42000204 	addi	r8,r8,8
    42c4:	d8812617 	ldw	r2,1176(sp)
    42c8:	d9413317 	ldw	r5,1228(sp)
    42cc:	11400216 	blt	r2,r5,42d8 <___vfprintf_internal_r+0xf48>
    42d0:	e080004c 	andi	r2,fp,1
    42d4:	103e4126 	beq	r2,zero,3bdc <__alt_data_end+0xfffae4ac>
    42d8:	d8813817 	ldw	r2,1248(sp)
    42dc:	d9013517 	ldw	r4,1236(sp)
    42e0:	d9413817 	ldw	r5,1248(sp)
    42e4:	1887883a 	add	r3,r3,r2
    42e8:	d8811f17 	ldw	r2,1148(sp)
    42ec:	41000015 	stw	r4,0(r8)
    42f0:	41400115 	stw	r5,4(r8)
    42f4:	10800044 	addi	r2,r2,1
    42f8:	d8c12015 	stw	r3,1152(sp)
    42fc:	d8811f15 	stw	r2,1148(sp)
    4300:	010001c4 	movi	r4,7
    4304:	20830916 	blt	r4,r2,4f2c <___vfprintf_internal_r+0x1b9c>
    4308:	42000204 	addi	r8,r8,8
    430c:	d8813317 	ldw	r2,1228(sp)
    4310:	143fffc4 	addi	r16,r2,-1
    4314:	043e310e 	bge	zero,r16,3bdc <__alt_data_end+0xfffae4ac>
    4318:	04400404 	movi	r17,16
    431c:	d8811f17 	ldw	r2,1148(sp)
    4320:	8c007e0e 	bge	r17,r16,451c <___vfprintf_internal_r+0x118c>
    4324:	01400074 	movhi	r5,1
    4328:	2948e184 	addi	r5,r5,9094
    432c:	d9412c15 	stw	r5,1200(sp)
    4330:	04c001c4 	movi	r19,7
    4334:	00000306 	br	4344 <___vfprintf_internal_r+0xfb4>
    4338:	42000204 	addi	r8,r8,8
    433c:	843ffc04 	addi	r16,r16,-16
    4340:	8c00790e 	bge	r17,r16,4528 <___vfprintf_internal_r+0x1198>
    4344:	18c00404 	addi	r3,r3,16
    4348:	10800044 	addi	r2,r2,1
    434c:	45000015 	stw	r20,0(r8)
    4350:	44400115 	stw	r17,4(r8)
    4354:	d8c12015 	stw	r3,1152(sp)
    4358:	d8811f15 	stw	r2,1148(sp)
    435c:	98bff60e 	bge	r19,r2,4338 <__alt_data_end+0xfffaec08>
    4360:	b809883a 	mov	r4,r23
    4364:	b00b883a 	mov	r5,r22
    4368:	d9811e04 	addi	r6,sp,1144
    436c:	0009fd40 	call	9fd4 <__sprint_r>
    4370:	103d1f1e 	bne	r2,zero,37f0 <__alt_data_end+0xfffae0c0>
    4374:	d8c12017 	ldw	r3,1152(sp)
    4378:	d8811f17 	ldw	r2,1148(sp)
    437c:	da000404 	addi	r8,sp,16
    4380:	003fee06 	br	433c <__alt_data_end+0xfffaec0c>
    4384:	d9412e17 	ldw	r5,1208(sp)
    4388:	d8812b17 	ldw	r2,1196(sp)
    438c:	28a7c83a 	sub	r19,r5,r2
    4390:	04fddc0e 	bge	zero,r19,3b04 <__alt_data_end+0xfffae3d4>
    4394:	05400404 	movi	r21,16
    4398:	d8811f17 	ldw	r2,1148(sp)
    439c:	acc3870e 	bge	r21,r19,51bc <___vfprintf_internal_r+0x1e2c>
    43a0:	01400074 	movhi	r5,1
    43a4:	2948e184 	addi	r5,r5,9094
    43a8:	d9412c15 	stw	r5,1200(sp)
    43ac:	048001c4 	movi	r18,7
    43b0:	00000306 	br	43c0 <___vfprintf_internal_r+0x1030>
    43b4:	9cfffc04 	addi	r19,r19,-16
    43b8:	42000204 	addi	r8,r8,8
    43bc:	acc0110e 	bge	r21,r19,4404 <___vfprintf_internal_r+0x1074>
    43c0:	18c00404 	addi	r3,r3,16
    43c4:	10800044 	addi	r2,r2,1
    43c8:	45000015 	stw	r20,0(r8)
    43cc:	45400115 	stw	r21,4(r8)
    43d0:	d8c12015 	stw	r3,1152(sp)
    43d4:	d8811f15 	stw	r2,1148(sp)
    43d8:	90bff60e 	bge	r18,r2,43b4 <__alt_data_end+0xfffaec84>
    43dc:	b809883a 	mov	r4,r23
    43e0:	b00b883a 	mov	r5,r22
    43e4:	d9811e04 	addi	r6,sp,1144
    43e8:	0009fd40 	call	9fd4 <__sprint_r>
    43ec:	103d001e 	bne	r2,zero,37f0 <__alt_data_end+0xfffae0c0>
    43f0:	9cfffc04 	addi	r19,r19,-16
    43f4:	d8c12017 	ldw	r3,1152(sp)
    43f8:	d8811f17 	ldw	r2,1148(sp)
    43fc:	da000404 	addi	r8,sp,16
    4400:	acffef16 	blt	r21,r19,43c0 <__alt_data_end+0xfffaec90>
    4404:	d9012c17 	ldw	r4,1200(sp)
    4408:	1cc7883a 	add	r3,r3,r19
    440c:	10800044 	addi	r2,r2,1
    4410:	41000015 	stw	r4,0(r8)
    4414:	44c00115 	stw	r19,4(r8)
    4418:	d8c12015 	stw	r3,1152(sp)
    441c:	d8811f15 	stw	r2,1148(sp)
    4420:	010001c4 	movi	r4,7
    4424:	20817816 	blt	r4,r2,4a08 <___vfprintf_internal_r+0x1678>
    4428:	42000204 	addi	r8,r8,8
    442c:	003db506 	br	3b04 <__alt_data_end+0xfffae3d4>
    4430:	d9413317 	ldw	r5,1228(sp)
    4434:	00800044 	movi	r2,1
    4438:	18c00044 	addi	r3,r3,1
    443c:	11413e0e 	bge	r2,r5,4938 <___vfprintf_internal_r+0x15a8>
    4440:	dc011f17 	ldw	r16,1148(sp)
    4444:	d8813117 	ldw	r2,1220(sp)
    4448:	d8c12015 	stw	r3,1152(sp)
    444c:	84000044 	addi	r16,r16,1
    4450:	40800015 	stw	r2,0(r8)
    4454:	00800044 	movi	r2,1
    4458:	40800115 	stw	r2,4(r8)
    445c:	dc011f15 	stw	r16,1148(sp)
    4460:	008001c4 	movi	r2,7
    4464:	14015616 	blt	r2,r16,49c0 <___vfprintf_internal_r+0x1630>
    4468:	42000204 	addi	r8,r8,8
    446c:	d9013817 	ldw	r4,1248(sp)
    4470:	d9413517 	ldw	r5,1236(sp)
    4474:	84000044 	addi	r16,r16,1
    4478:	1907883a 	add	r3,r3,r4
    447c:	41400015 	stw	r5,0(r8)
    4480:	41000115 	stw	r4,4(r8)
    4484:	d8c12015 	stw	r3,1152(sp)
    4488:	dc011f15 	stw	r16,1148(sp)
    448c:	008001c4 	movi	r2,7
    4490:	14015416 	blt	r2,r16,49e4 <___vfprintf_internal_r+0x1654>
    4494:	44400204 	addi	r17,r8,8
    4498:	d9013717 	ldw	r4,1244(sp)
    449c:	d9413917 	ldw	r5,1252(sp)
    44a0:	000d883a 	mov	r6,zero
    44a4:	000f883a 	mov	r7,zero
    44a8:	d8c13d15 	stw	r3,1268(sp)
    44ac:	000dd4c0 	call	dd4c <__eqdf2>
    44b0:	d8c13d17 	ldw	r3,1268(sp)
    44b4:	1000a726 	beq	r2,zero,4754 <___vfprintf_internal_r+0x13c4>
    44b8:	d9013317 	ldw	r4,1228(sp)
    44bc:	d9413117 	ldw	r5,1220(sp)
    44c0:	84000044 	addi	r16,r16,1
    44c4:	20bfffc4 	addi	r2,r4,-1
    44c8:	1887883a 	add	r3,r3,r2
    44cc:	29000044 	addi	r4,r5,1
    44d0:	88800115 	stw	r2,4(r17)
    44d4:	89000015 	stw	r4,0(r17)
    44d8:	d8c12015 	stw	r3,1152(sp)
    44dc:	dc011f15 	stw	r16,1148(sp)
    44e0:	008001c4 	movi	r2,7
    44e4:	14012d16 	blt	r2,r16,499c <___vfprintf_internal_r+0x160c>
    44e8:	8c400204 	addi	r17,r17,8
    44ec:	d9413a17 	ldw	r5,1256(sp)
    44f0:	dcc122c4 	addi	r19,sp,1163
    44f4:	84000044 	addi	r16,r16,1
    44f8:	28c7883a 	add	r3,r5,r3
    44fc:	8cc00015 	stw	r19,0(r17)
    4500:	89400115 	stw	r5,4(r17)
    4504:	d8c12015 	stw	r3,1152(sp)
    4508:	dc011f15 	stw	r16,1148(sp)
    450c:	008001c4 	movi	r2,7
    4510:	14000e16 	blt	r2,r16,454c <___vfprintf_internal_r+0x11bc>
    4514:	8a000204 	addi	r8,r17,8
    4518:	003db006 	br	3bdc <__alt_data_end+0xfffae4ac>
    451c:	01000074 	movhi	r4,1
    4520:	2108e184 	addi	r4,r4,9094
    4524:	d9012c15 	stw	r4,1200(sp)
    4528:	d9012c17 	ldw	r4,1200(sp)
    452c:	1c07883a 	add	r3,r3,r16
    4530:	44000115 	stw	r16,4(r8)
    4534:	41000015 	stw	r4,0(r8)
    4538:	10800044 	addi	r2,r2,1
    453c:	d8c12015 	stw	r3,1152(sp)
    4540:	d8811f15 	stw	r2,1148(sp)
    4544:	010001c4 	movi	r4,7
    4548:	20bda30e 	bge	r4,r2,3bd8 <__alt_data_end+0xfffae4a8>
    454c:	b809883a 	mov	r4,r23
    4550:	b00b883a 	mov	r5,r22
    4554:	d9811e04 	addi	r6,sp,1144
    4558:	0009fd40 	call	9fd4 <__sprint_r>
    455c:	103ca41e 	bne	r2,zero,37f0 <__alt_data_end+0xfffae0c0>
    4560:	d8c12017 	ldw	r3,1152(sp)
    4564:	da000404 	addi	r8,sp,16
    4568:	003d9c06 	br	3bdc <__alt_data_end+0xfffae4ac>
    456c:	b809883a 	mov	r4,r23
    4570:	b00b883a 	mov	r5,r22
    4574:	d9811e04 	addi	r6,sp,1144
    4578:	0009fd40 	call	9fd4 <__sprint_r>
    457c:	103dd226 	beq	r2,zero,3cc8 <__alt_data_end+0xfffae598>
    4580:	003c9b06 	br	37f0 <__alt_data_end+0xfffae0c0>
    4584:	10803fcc 	andi	r2,r2,255
    4588:	1000311e 	bne	r2,zero,4650 <___vfprintf_internal_r+0x12c0>
    458c:	e080004c 	andi	r2,fp,1
    4590:	10002f26 	beq	r2,zero,4650 <___vfprintf_internal_r+0x12c0>
    4594:	00800c04 	movi	r2,48
    4598:	d8c10dc4 	addi	r3,sp,1079
    459c:	d8810dc5 	stb	r2,1079(sp)
    45a0:	dc413c17 	ldw	r17,1264(sp)
    45a4:	d8c13115 	stw	r3,1220(sp)
    45a8:	003cf406 	br	397c <__alt_data_end+0xfffae24c>
    45ac:	b809883a 	mov	r4,r23
    45b0:	b00b883a 	mov	r5,r22
    45b4:	d9811e04 	addi	r6,sp,1144
    45b8:	0009fd40 	call	9fd4 <__sprint_r>
    45bc:	103c8c1e 	bne	r2,zero,37f0 <__alt_data_end+0xfffae0c0>
    45c0:	d8c12017 	ldw	r3,1152(sp)
    45c4:	da000404 	addi	r8,sp,16
    45c8:	003d7706 	br	3ba8 <__alt_data_end+0xfffae478>
    45cc:	b809883a 	mov	r4,r23
    45d0:	b00b883a 	mov	r5,r22
    45d4:	d9811e04 	addi	r6,sp,1144
    45d8:	0009fd40 	call	9fd4 <__sprint_r>
    45dc:	103c841e 	bne	r2,zero,37f0 <__alt_data_end+0xfffae0c0>
    45e0:	d8c12017 	ldw	r3,1152(sp)
    45e4:	da000404 	addi	r8,sp,16
    45e8:	003d3506 	br	3ac0 <__alt_data_end+0xfffae390>
    45ec:	b809883a 	mov	r4,r23
    45f0:	b00b883a 	mov	r5,r22
    45f4:	d9811e04 	addi	r6,sp,1144
    45f8:	0009fd40 	call	9fd4 <__sprint_r>
    45fc:	103c7c1e 	bne	r2,zero,37f0 <__alt_data_end+0xfffae0c0>
    4600:	d8c12017 	ldw	r3,1152(sp)
    4604:	da000404 	addi	r8,sp,16
    4608:	003d3b06 	br	3af8 <__alt_data_end+0xfffae3c8>
    460c:	d9413b17 	ldw	r5,1260(sp)
    4610:	d8c10e04 	addi	r3,sp,1080
    4614:	908003cc 	andi	r2,r18,15
    4618:	a808973a 	slli	r4,r21,28
    461c:	2885883a 	add	r2,r5,r2
    4620:	9024d13a 	srli	r18,r18,4
    4624:	10800003 	ldbu	r2,0(r2)
    4628:	a82ad13a 	srli	r21,r21,4
    462c:	18ffffc4 	addi	r3,r3,-1
    4630:	24a4b03a 	or	r18,r4,r18
    4634:	18800005 	stb	r2,0(r3)
    4638:	9544b03a 	or	r2,r18,r21
    463c:	103ff51e 	bne	r2,zero,4614 <__alt_data_end+0xfffaeee4>
    4640:	d9412817 	ldw	r5,1184(sp)
    4644:	d8c13115 	stw	r3,1220(sp)
    4648:	28e3c83a 	sub	r17,r5,r3
    464c:	003ccb06 	br	397c <__alt_data_end+0xfffae24c>
    4650:	d8c10e04 	addi	r3,sp,1080
    4654:	0023883a 	mov	r17,zero
    4658:	d8c13115 	stw	r3,1220(sp)
    465c:	003cc706 	br	397c <__alt_data_end+0xfffae24c>
    4660:	dc012617 	ldw	r16,1176(sp)
    4664:	0401ab0e 	bge	zero,r16,4d14 <___vfprintf_internal_r+0x1984>
    4668:	d8813317 	ldw	r2,1228(sp)
    466c:	d9413117 	ldw	r5,1220(sp)
    4670:	d9013417 	ldw	r4,1232(sp)
    4674:	1023883a 	mov	r17,r2
    4678:	28a1883a 	add	r16,r5,r2
    467c:	2080010e 	bge	r4,r2,4684 <___vfprintf_internal_r+0x12f4>
    4680:	2023883a 	mov	r17,r4
    4684:	04400b0e 	bge	zero,r17,46b4 <___vfprintf_internal_r+0x1324>
    4688:	d8811f17 	ldw	r2,1148(sp)
    468c:	d9413117 	ldw	r5,1220(sp)
    4690:	1c47883a 	add	r3,r3,r17
    4694:	10800044 	addi	r2,r2,1
    4698:	41400015 	stw	r5,0(r8)
    469c:	44400115 	stw	r17,4(r8)
    46a0:	d8c12015 	stw	r3,1152(sp)
    46a4:	d8811f15 	stw	r2,1148(sp)
    46a8:	010001c4 	movi	r4,7
    46ac:	20826716 	blt	r4,r2,504c <___vfprintf_internal_r+0x1cbc>
    46b0:	42000204 	addi	r8,r8,8
    46b4:	88026316 	blt	r17,zero,5044 <___vfprintf_internal_r+0x1cb4>
    46b8:	d8813417 	ldw	r2,1232(sp)
    46bc:	1463c83a 	sub	r17,r2,r17
    46c0:	0440590e 	bge	zero,r17,4828 <___vfprintf_internal_r+0x1498>
    46c4:	04c00404 	movi	r19,16
    46c8:	d8811f17 	ldw	r2,1148(sp)
    46cc:	9c41770e 	bge	r19,r17,4cac <___vfprintf_internal_r+0x191c>
    46d0:	01400074 	movhi	r5,1
    46d4:	2948e184 	addi	r5,r5,9094
    46d8:	d9412c15 	stw	r5,1200(sp)
    46dc:	054001c4 	movi	r21,7
    46e0:	00000306 	br	46f0 <___vfprintf_internal_r+0x1360>
    46e4:	42000204 	addi	r8,r8,8
    46e8:	8c7ffc04 	addi	r17,r17,-16
    46ec:	9c41720e 	bge	r19,r17,4cb8 <___vfprintf_internal_r+0x1928>
    46f0:	18c00404 	addi	r3,r3,16
    46f4:	10800044 	addi	r2,r2,1
    46f8:	45000015 	stw	r20,0(r8)
    46fc:	44c00115 	stw	r19,4(r8)
    4700:	d8c12015 	stw	r3,1152(sp)
    4704:	d8811f15 	stw	r2,1148(sp)
    4708:	a8bff60e 	bge	r21,r2,46e4 <__alt_data_end+0xfffaefb4>
    470c:	b809883a 	mov	r4,r23
    4710:	b00b883a 	mov	r5,r22
    4714:	d9811e04 	addi	r6,sp,1144
    4718:	0009fd40 	call	9fd4 <__sprint_r>
    471c:	103c341e 	bne	r2,zero,37f0 <__alt_data_end+0xfffae0c0>
    4720:	d8c12017 	ldw	r3,1152(sp)
    4724:	d8811f17 	ldw	r2,1148(sp)
    4728:	da000404 	addi	r8,sp,16
    472c:	003fee06 	br	46e8 <__alt_data_end+0xfffaefb8>
    4730:	b809883a 	mov	r4,r23
    4734:	b00b883a 	mov	r5,r22
    4738:	d9811e04 	addi	r6,sp,1144
    473c:	0009fd40 	call	9fd4 <__sprint_r>
    4740:	103c2b1e 	bne	r2,zero,37f0 <__alt_data_end+0xfffae0c0>
    4744:	d8c12017 	ldw	r3,1152(sp)
    4748:	d8812787 	ldb	r2,1182(sp)
    474c:	da000404 	addi	r8,sp,16
    4750:	003cce06 	br	3a8c <__alt_data_end+0xfffae35c>
    4754:	d8813317 	ldw	r2,1228(sp)
    4758:	14ffffc4 	addi	r19,r2,-1
    475c:	04ff630e 	bge	zero,r19,44ec <__alt_data_end+0xfffaedbc>
    4760:	05400404 	movi	r21,16
    4764:	acc0810e 	bge	r21,r19,496c <___vfprintf_internal_r+0x15dc>
    4768:	01400074 	movhi	r5,1
    476c:	2948e184 	addi	r5,r5,9094
    4770:	d9412c15 	stw	r5,1200(sp)
    4774:	01c001c4 	movi	r7,7
    4778:	00000306 	br	4788 <___vfprintf_internal_r+0x13f8>
    477c:	8c400204 	addi	r17,r17,8
    4780:	9cfffc04 	addi	r19,r19,-16
    4784:	acc07c0e 	bge	r21,r19,4978 <___vfprintf_internal_r+0x15e8>
    4788:	18c00404 	addi	r3,r3,16
    478c:	84000044 	addi	r16,r16,1
    4790:	8d000015 	stw	r20,0(r17)
    4794:	8d400115 	stw	r21,4(r17)
    4798:	d8c12015 	stw	r3,1152(sp)
    479c:	dc011f15 	stw	r16,1148(sp)
    47a0:	3c3ff60e 	bge	r7,r16,477c <__alt_data_end+0xfffaf04c>
    47a4:	b809883a 	mov	r4,r23
    47a8:	b00b883a 	mov	r5,r22
    47ac:	d9811e04 	addi	r6,sp,1144
    47b0:	d9c13d15 	stw	r7,1268(sp)
    47b4:	0009fd40 	call	9fd4 <__sprint_r>
    47b8:	d9c13d17 	ldw	r7,1268(sp)
    47bc:	103c0c1e 	bne	r2,zero,37f0 <__alt_data_end+0xfffae0c0>
    47c0:	d8c12017 	ldw	r3,1152(sp)
    47c4:	dc011f17 	ldw	r16,1148(sp)
    47c8:	dc400404 	addi	r17,sp,16
    47cc:	003fec06 	br	4780 <__alt_data_end+0xfffaf050>
    47d0:	00800084 	movi	r2,2
    47d4:	9546b03a 	or	r3,r18,r21
    47d8:	003d7d06 	br	3dd0 <__alt_data_end+0xfffae6a0>
    47dc:	10803fcc 	andi	r2,r2,255
    47e0:	1080201c 	xori	r2,r2,128
    47e4:	10bfe004 	addi	r2,r2,-128
    47e8:	01000c04 	movi	r4,48
    47ec:	1101d726 	beq	r2,r4,4f4c <___vfprintf_internal_r+0x1bbc>
    47f0:	d9413117 	ldw	r5,1220(sp)
    47f4:	d8812817 	ldw	r2,1184(sp)
    47f8:	193fffc5 	stb	r4,-1(r3)
    47fc:	297fffc4 	addi	r5,r5,-1
    4800:	d9413115 	stw	r5,1220(sp)
    4804:	1163c83a 	sub	r17,r2,r5
    4808:	003c5c06 	br	397c <__alt_data_end+0xfffae24c>
    480c:	b809883a 	mov	r4,r23
    4810:	b00b883a 	mov	r5,r22
    4814:	d9811e04 	addi	r6,sp,1144
    4818:	0009fd40 	call	9fd4 <__sprint_r>
    481c:	103bf41e 	bne	r2,zero,37f0 <__alt_data_end+0xfffae0c0>
    4820:	d8c12017 	ldw	r3,1152(sp)
    4824:	da000404 	addi	r8,sp,16
    4828:	d9413117 	ldw	r5,1220(sp)
    482c:	d9013417 	ldw	r4,1232(sp)
    4830:	d8812617 	ldw	r2,1176(sp)
    4834:	2923883a 	add	r17,r5,r4
    4838:	d9413317 	ldw	r5,1228(sp)
    483c:	11400216 	blt	r2,r5,4848 <___vfprintf_internal_r+0x14b8>
    4840:	e100004c 	andi	r4,fp,1
    4844:	20000d26 	beq	r4,zero,487c <___vfprintf_internal_r+0x14ec>
    4848:	d9013817 	ldw	r4,1248(sp)
    484c:	d9413517 	ldw	r5,1236(sp)
    4850:	1907883a 	add	r3,r3,r4
    4854:	d9011f17 	ldw	r4,1148(sp)
    4858:	41400015 	stw	r5,0(r8)
    485c:	d9413817 	ldw	r5,1248(sp)
    4860:	21000044 	addi	r4,r4,1
    4864:	d8c12015 	stw	r3,1152(sp)
    4868:	41400115 	stw	r5,4(r8)
    486c:	d9011f15 	stw	r4,1148(sp)
    4870:	014001c4 	movi	r5,7
    4874:	2901fd16 	blt	r5,r4,506c <___vfprintf_internal_r+0x1cdc>
    4878:	42000204 	addi	r8,r8,8
    487c:	d9013317 	ldw	r4,1228(sp)
    4880:	2085c83a 	sub	r2,r4,r2
    4884:	8449c83a 	sub	r4,r16,r17
    4888:	1021883a 	mov	r16,r2
    488c:	2080010e 	bge	r4,r2,4894 <___vfprintf_internal_r+0x1504>
    4890:	2021883a 	mov	r16,r4
    4894:	04000a0e 	bge	zero,r16,48c0 <___vfprintf_internal_r+0x1530>
    4898:	d9011f17 	ldw	r4,1148(sp)
    489c:	1c07883a 	add	r3,r3,r16
    48a0:	44400015 	stw	r17,0(r8)
    48a4:	21000044 	addi	r4,r4,1
    48a8:	44000115 	stw	r16,4(r8)
    48ac:	d8c12015 	stw	r3,1152(sp)
    48b0:	d9011f15 	stw	r4,1148(sp)
    48b4:	014001c4 	movi	r5,7
    48b8:	29020916 	blt	r5,r4,50e0 <___vfprintf_internal_r+0x1d50>
    48bc:	42000204 	addi	r8,r8,8
    48c0:	80020116 	blt	r16,zero,50c8 <___vfprintf_internal_r+0x1d38>
    48c4:	1421c83a 	sub	r16,r2,r16
    48c8:	043cc40e 	bge	zero,r16,3bdc <__alt_data_end+0xfffae4ac>
    48cc:	04400404 	movi	r17,16
    48d0:	d8811f17 	ldw	r2,1148(sp)
    48d4:	8c3f110e 	bge	r17,r16,451c <__alt_data_end+0xfffaedec>
    48d8:	01400074 	movhi	r5,1
    48dc:	2948e184 	addi	r5,r5,9094
    48e0:	d9412c15 	stw	r5,1200(sp)
    48e4:	04c001c4 	movi	r19,7
    48e8:	00000306 	br	48f8 <___vfprintf_internal_r+0x1568>
    48ec:	42000204 	addi	r8,r8,8
    48f0:	843ffc04 	addi	r16,r16,-16
    48f4:	8c3f0c0e 	bge	r17,r16,4528 <__alt_data_end+0xfffaedf8>
    48f8:	18c00404 	addi	r3,r3,16
    48fc:	10800044 	addi	r2,r2,1
    4900:	45000015 	stw	r20,0(r8)
    4904:	44400115 	stw	r17,4(r8)
    4908:	d8c12015 	stw	r3,1152(sp)
    490c:	d8811f15 	stw	r2,1148(sp)
    4910:	98bff60e 	bge	r19,r2,48ec <__alt_data_end+0xfffaf1bc>
    4914:	b809883a 	mov	r4,r23
    4918:	b00b883a 	mov	r5,r22
    491c:	d9811e04 	addi	r6,sp,1144
    4920:	0009fd40 	call	9fd4 <__sprint_r>
    4924:	103bb21e 	bne	r2,zero,37f0 <__alt_data_end+0xfffae0c0>
    4928:	d8c12017 	ldw	r3,1152(sp)
    492c:	d8811f17 	ldw	r2,1148(sp)
    4930:	da000404 	addi	r8,sp,16
    4934:	003fee06 	br	48f0 <__alt_data_end+0xfffaf1c0>
    4938:	e088703a 	and	r4,fp,r2
    493c:	203ec01e 	bne	r4,zero,4440 <__alt_data_end+0xfffaed10>
    4940:	dc011f17 	ldw	r16,1148(sp)
    4944:	d9013117 	ldw	r4,1220(sp)
    4948:	40800115 	stw	r2,4(r8)
    494c:	84000044 	addi	r16,r16,1
    4950:	41000015 	stw	r4,0(r8)
    4954:	d8c12015 	stw	r3,1152(sp)
    4958:	dc011f15 	stw	r16,1148(sp)
    495c:	008001c4 	movi	r2,7
    4960:	14000e16 	blt	r2,r16,499c <___vfprintf_internal_r+0x160c>
    4964:	44400204 	addi	r17,r8,8
    4968:	003ee006 	br	44ec <__alt_data_end+0xfffaedbc>
    496c:	01000074 	movhi	r4,1
    4970:	2108e184 	addi	r4,r4,9094
    4974:	d9012c15 	stw	r4,1200(sp)
    4978:	d8812c17 	ldw	r2,1200(sp)
    497c:	1cc7883a 	add	r3,r3,r19
    4980:	84000044 	addi	r16,r16,1
    4984:	88800015 	stw	r2,0(r17)
    4988:	8cc00115 	stw	r19,4(r17)
    498c:	d8c12015 	stw	r3,1152(sp)
    4990:	dc011f15 	stw	r16,1148(sp)
    4994:	008001c4 	movi	r2,7
    4998:	143ed30e 	bge	r2,r16,44e8 <__alt_data_end+0xfffaedb8>
    499c:	b809883a 	mov	r4,r23
    49a0:	b00b883a 	mov	r5,r22
    49a4:	d9811e04 	addi	r6,sp,1144
    49a8:	0009fd40 	call	9fd4 <__sprint_r>
    49ac:	103b901e 	bne	r2,zero,37f0 <__alt_data_end+0xfffae0c0>
    49b0:	d8c12017 	ldw	r3,1152(sp)
    49b4:	dc011f17 	ldw	r16,1148(sp)
    49b8:	dc400404 	addi	r17,sp,16
    49bc:	003ecb06 	br	44ec <__alt_data_end+0xfffaedbc>
    49c0:	b809883a 	mov	r4,r23
    49c4:	b00b883a 	mov	r5,r22
    49c8:	d9811e04 	addi	r6,sp,1144
    49cc:	0009fd40 	call	9fd4 <__sprint_r>
    49d0:	103b871e 	bne	r2,zero,37f0 <__alt_data_end+0xfffae0c0>
    49d4:	d8c12017 	ldw	r3,1152(sp)
    49d8:	dc011f17 	ldw	r16,1148(sp)
    49dc:	da000404 	addi	r8,sp,16
    49e0:	003ea206 	br	446c <__alt_data_end+0xfffaed3c>
    49e4:	b809883a 	mov	r4,r23
    49e8:	b00b883a 	mov	r5,r22
    49ec:	d9811e04 	addi	r6,sp,1144
    49f0:	0009fd40 	call	9fd4 <__sprint_r>
    49f4:	103b7e1e 	bne	r2,zero,37f0 <__alt_data_end+0xfffae0c0>
    49f8:	d8c12017 	ldw	r3,1152(sp)
    49fc:	dc011f17 	ldw	r16,1148(sp)
    4a00:	dc400404 	addi	r17,sp,16
    4a04:	003ea406 	br	4498 <__alt_data_end+0xfffaed68>
    4a08:	b809883a 	mov	r4,r23
    4a0c:	b00b883a 	mov	r5,r22
    4a10:	d9811e04 	addi	r6,sp,1144
    4a14:	0009fd40 	call	9fd4 <__sprint_r>
    4a18:	103b751e 	bne	r2,zero,37f0 <__alt_data_end+0xfffae0c0>
    4a1c:	d8c12017 	ldw	r3,1152(sp)
    4a20:	da000404 	addi	r8,sp,16
    4a24:	003c3706 	br	3b04 <__alt_data_end+0xfffae3d4>
    4a28:	04a5c83a 	sub	r18,zero,r18
    4a2c:	9004c03a 	cmpne	r2,r18,zero
    4a30:	056bc83a 	sub	r21,zero,r21
    4a34:	a8abc83a 	sub	r21,r21,r2
    4a38:	04c00b44 	movi	r19,45
    4a3c:	dcc12785 	stb	r19,1182(sp)
    4a40:	da413215 	stw	r9,1224(sp)
    4a44:	00800044 	movi	r2,1
    4a48:	9546b03a 	or	r3,r18,r21
    4a4c:	003bb106 	br	3914 <__alt_data_end+0xfffae1e4>
    4a50:	da013f15 	stw	r8,1276(sp)
    4a54:	da413e15 	stw	r9,1272(sp)
    4a58:	0009c840 	call	9c84 <__fpclassifyd>
    4a5c:	da013f17 	ldw	r8,1276(sp)
    4a60:	da413e17 	ldw	r9,1272(sp)
    4a64:	1000e526 	beq	r2,zero,4dfc <___vfprintf_internal_r+0x1a6c>
    4a68:	04fff7c4 	movi	r19,-33
    4a6c:	00bfffc4 	movi	r2,-1
    4a70:	84e6703a 	and	r19,r16,r19
    4a74:	48822926 	beq	r9,r2,531c <___vfprintf_internal_r+0x1f8c>
    4a78:	008011c4 	movi	r2,71
    4a7c:	98821626 	beq	r19,r2,52d8 <___vfprintf_internal_r+0x1f48>
    4a80:	d9013917 	ldw	r4,1252(sp)
    4a84:	e0c04014 	ori	r3,fp,256
    4a88:	d8c12d15 	stw	r3,1204(sp)
    4a8c:	20021f16 	blt	r4,zero,530c <___vfprintf_internal_r+0x1f7c>
    4a90:	dc413917 	ldw	r17,1252(sp)
    4a94:	d8012b05 	stb	zero,1196(sp)
    4a98:	00801984 	movi	r2,102
    4a9c:	80814d26 	beq	r16,r2,4fd4 <___vfprintf_internal_r+0x1c44>
    4aa0:	00801184 	movi	r2,70
    4aa4:	80814b26 	beq	r16,r2,4fd4 <___vfprintf_internal_r+0x1c44>
    4aa8:	00801144 	movi	r2,69
    4aac:	98821d26 	beq	r19,r2,5324 <___vfprintf_internal_r+0x1f94>
    4ab0:	482b883a 	mov	r21,r9
    4ab4:	d8812604 	addi	r2,sp,1176
    4ab8:	d8800115 	stw	r2,4(sp)
    4abc:	d9413717 	ldw	r5,1244(sp)
    4ac0:	d8812504 	addi	r2,sp,1172
    4ac4:	d8800215 	stw	r2,8(sp)
    4ac8:	d8812104 	addi	r2,sp,1156
    4acc:	dd400015 	stw	r21,0(sp)
    4ad0:	d8800315 	stw	r2,12(sp)
    4ad4:	b809883a 	mov	r4,r23
    4ad8:	880d883a 	mov	r6,r17
    4adc:	01c00084 	movi	r7,2
    4ae0:	da013f15 	stw	r8,1276(sp)
    4ae4:	da413e15 	stw	r9,1272(sp)
    4ae8:	00058080 	call	5808 <_dtoa_r>
    4aec:	d8813115 	stw	r2,1220(sp)
    4af0:	008019c4 	movi	r2,103
    4af4:	da013f17 	ldw	r8,1276(sp)
    4af8:	da413e17 	ldw	r9,1272(sp)
    4afc:	80800226 	beq	r16,r2,4b08 <___vfprintf_internal_r+0x1778>
    4b00:	008011c4 	movi	r2,71
    4b04:	8081451e 	bne	r16,r2,501c <___vfprintf_internal_r+0x1c8c>
    4b08:	e080004c 	andi	r2,fp,1
    4b0c:	10021e26 	beq	r2,zero,5388 <___vfprintf_internal_r+0x1ff8>
    4b10:	d8c13117 	ldw	r3,1220(sp)
    4b14:	1d55883a 	add	r10,r3,r21
    4b18:	d9013717 	ldw	r4,1244(sp)
    4b1c:	880b883a 	mov	r5,r17
    4b20:	000d883a 	mov	r6,zero
    4b24:	000f883a 	mov	r7,zero
    4b28:	da013f15 	stw	r8,1276(sp)
    4b2c:	da413e15 	stw	r9,1272(sp)
    4b30:	da813d15 	stw	r10,1268(sp)
    4b34:	000dd4c0 	call	dd4c <__eqdf2>
    4b38:	da013f17 	ldw	r8,1276(sp)
    4b3c:	da413e17 	ldw	r9,1272(sp)
    4b40:	da813d17 	ldw	r10,1268(sp)
    4b44:	1001a126 	beq	r2,zero,51cc <___vfprintf_internal_r+0x1e3c>
    4b48:	d8812117 	ldw	r2,1156(sp)
    4b4c:	1280062e 	bgeu	r2,r10,4b68 <___vfprintf_internal_r+0x17d8>
    4b50:	01000c04 	movi	r4,48
    4b54:	10c00044 	addi	r3,r2,1
    4b58:	d8c12115 	stw	r3,1156(sp)
    4b5c:	11000005 	stb	r4,0(r2)
    4b60:	d8812117 	ldw	r2,1156(sp)
    4b64:	12bffb36 	bltu	r2,r10,4b54 <__alt_data_end+0xfffaf424>
    4b68:	d8c13117 	ldw	r3,1220(sp)
    4b6c:	10c5c83a 	sub	r2,r2,r3
    4b70:	d8813315 	stw	r2,1228(sp)
    4b74:	008011c4 	movi	r2,71
    4b78:	98818926 	beq	r19,r2,51a0 <___vfprintf_internal_r+0x1e10>
    4b7c:	00801944 	movi	r2,101
    4b80:	14023c0e 	bge	r2,r16,5474 <___vfprintf_internal_r+0x20e4>
    4b84:	d8c12617 	ldw	r3,1176(sp)
    4b88:	00801984 	movi	r2,102
    4b8c:	d8c13415 	stw	r3,1232(sp)
    4b90:	8081ef26 	beq	r16,r2,5350 <___vfprintf_internal_r+0x1fc0>
    4b94:	d8c13417 	ldw	r3,1232(sp)
    4b98:	d9013317 	ldw	r4,1228(sp)
    4b9c:	1901e316 	blt	r3,r4,532c <___vfprintf_internal_r+0x1f9c>
    4ba0:	e080004c 	andi	r2,fp,1
    4ba4:	1001f426 	beq	r2,zero,5378 <___vfprintf_internal_r+0x1fe8>
    4ba8:	d8c13417 	ldw	r3,1232(sp)
    4bac:	1c400044 	addi	r17,r3,1
    4bb0:	8839883a 	mov	fp,r17
    4bb4:	8801e416 	blt	r17,zero,5348 <___vfprintf_internal_r+0x1fb8>
    4bb8:	dd412b07 	ldb	r21,1196(sp)
    4bbc:	a801701e 	bne	r21,zero,5180 <___vfprintf_internal_r+0x1df0>
    4bc0:	df012b15 	stw	fp,1196(sp)
    4bc4:	dcc12783 	ldbu	r19,1182(sp)
    4bc8:	df012d17 	ldw	fp,1204(sp)
    4bcc:	d8013215 	stw	zero,1224(sp)
    4bd0:	dc812d15 	stw	r18,1204(sp)
    4bd4:	003b6e06 	br	3990 <__alt_data_end+0xfffae260>
    4bd8:	e080040c 	andi	r2,fp,16
    4bdc:	1000b51e 	bne	r2,zero,4eb4 <___vfprintf_internal_r+0x1b24>
    4be0:	e080100c 	andi	r2,fp,64
    4be4:	10015b26 	beq	r2,zero,5154 <___vfprintf_internal_r+0x1dc4>
    4be8:	d9012d17 	ldw	r4,1204(sp)
    4bec:	d9412f17 	ldw	r5,1212(sp)
    4bf0:	20800017 	ldw	r2,0(r4)
    4bf4:	21000104 	addi	r4,r4,4
    4bf8:	d9012d15 	stw	r4,1204(sp)
    4bfc:	1140000d 	sth	r5,0(r2)
    4c00:	003a2006 	br	3484 <__alt_data_end+0xfffadd54>
    4c04:	e0c0100c 	andi	r3,fp,64
    4c08:	1800a226 	beq	r3,zero,4e94 <___vfprintf_internal_r+0x1b04>
    4c0c:	d8c12d17 	ldw	r3,1204(sp)
    4c10:	1480000b 	ldhu	r18,0(r2)
    4c14:	002b883a 	mov	r21,zero
    4c18:	18c00104 	addi	r3,r3,4
    4c1c:	d8c12d15 	stw	r3,1204(sp)
    4c20:	0005883a 	mov	r2,zero
    4c24:	9007883a 	mov	r3,r18
    4c28:	003c6906 	br	3dd0 <__alt_data_end+0xfffae6a0>
    4c2c:	e0c0100c 	andi	r3,fp,64
    4c30:	18009026 	beq	r3,zero,4e74 <___vfprintf_internal_r+0x1ae4>
    4c34:	1480000b 	ldhu	r18,0(r2)
    4c38:	d8812d17 	ldw	r2,1204(sp)
    4c3c:	002b883a 	mov	r21,zero
    4c40:	9007883a 	mov	r3,r18
    4c44:	10800104 	addi	r2,r2,4
    4c48:	d8812d15 	stw	r2,1204(sp)
    4c4c:	00800044 	movi	r2,1
    4c50:	003c5f06 	br	3dd0 <__alt_data_end+0xfffae6a0>
    4c54:	e0c0100c 	andi	r3,fp,64
    4c58:	18008026 	beq	r3,zero,4e5c <___vfprintf_internal_r+0x1acc>
    4c5c:	d9012d17 	ldw	r4,1204(sp)
    4c60:	1480000b 	ldhu	r18,0(r2)
    4c64:	002b883a 	mov	r21,zero
    4c68:	21000104 	addi	r4,r4,4
    4c6c:	d9012d15 	stw	r4,1204(sp)
    4c70:	003c7906 	br	3e58 <__alt_data_end+0xfffae728>
    4c74:	e080100c 	andi	r2,fp,64
    4c78:	10007126 	beq	r2,zero,4e40 <___vfprintf_internal_r+0x1ab0>
    4c7c:	1c80000f 	ldh	r18,0(r3)
    4c80:	d8812d17 	ldw	r2,1204(sp)
    4c84:	902bd7fa 	srai	r21,r18,31
    4c88:	10800104 	addi	r2,r2,4
    4c8c:	d8812d15 	stw	r2,1204(sp)
    4c90:	a805883a 	mov	r2,r21
    4c94:	003b1a06 	br	3900 <__alt_data_end+0xfffae1d0>
    4c98:	e4000007 	ldb	r16,0(fp)
    4c9c:	e005883a 	mov	r2,fp
    4ca0:	003a2306 	br	3530 <__alt_data_end+0xfffade00>
    4ca4:	00800084 	movi	r2,2
    4ca8:	003c4906 	br	3dd0 <__alt_data_end+0xfffae6a0>
    4cac:	01000074 	movhi	r4,1
    4cb0:	2108e184 	addi	r4,r4,9094
    4cb4:	d9012c15 	stw	r4,1200(sp)
    4cb8:	d9012c17 	ldw	r4,1200(sp)
    4cbc:	1c47883a 	add	r3,r3,r17
    4cc0:	10800044 	addi	r2,r2,1
    4cc4:	41000015 	stw	r4,0(r8)
    4cc8:	44400115 	stw	r17,4(r8)
    4ccc:	d8c12015 	stw	r3,1152(sp)
    4cd0:	d8811f15 	stw	r2,1148(sp)
    4cd4:	010001c4 	movi	r4,7
    4cd8:	20becc16 	blt	r4,r2,480c <__alt_data_end+0xfffaf0dc>
    4cdc:	42000204 	addi	r8,r8,8
    4ce0:	003ed106 	br	4828 <__alt_data_end+0xfffaf0f8>
    4ce4:	01000074 	movhi	r4,1
    4ce8:	2108e184 	addi	r4,r4,9094
    4cec:	d9012c15 	stw	r4,1200(sp)
    4cf0:	003ba306 	br	3b80 <__alt_data_end+0xfffae450>
    4cf4:	b809883a 	mov	r4,r23
    4cf8:	b00b883a 	mov	r5,r22
    4cfc:	d9811e04 	addi	r6,sp,1144
    4d00:	0009fd40 	call	9fd4 <__sprint_r>
    4d04:	103aba1e 	bne	r2,zero,37f0 <__alt_data_end+0xfffae0c0>
    4d08:	d8c12017 	ldw	r3,1152(sp)
    4d0c:	da000404 	addi	r8,sp,16
    4d10:	003d6c06 	br	42c4 <__alt_data_end+0xfffaeb94>
    4d14:	d8811f17 	ldw	r2,1148(sp)
    4d18:	01400074 	movhi	r5,1
    4d1c:	01000044 	movi	r4,1
    4d20:	18c00044 	addi	r3,r3,1
    4d24:	10800044 	addi	r2,r2,1
    4d28:	2948e104 	addi	r5,r5,9092
    4d2c:	41000115 	stw	r4,4(r8)
    4d30:	41400015 	stw	r5,0(r8)
    4d34:	d8c12015 	stw	r3,1152(sp)
    4d38:	d8811f15 	stw	r2,1148(sp)
    4d3c:	010001c4 	movi	r4,7
    4d40:	20806716 	blt	r4,r2,4ee0 <___vfprintf_internal_r+0x1b50>
    4d44:	42000204 	addi	r8,r8,8
    4d48:	8000041e 	bne	r16,zero,4d5c <___vfprintf_internal_r+0x19cc>
    4d4c:	d8813317 	ldw	r2,1228(sp)
    4d50:	1000021e 	bne	r2,zero,4d5c <___vfprintf_internal_r+0x19cc>
    4d54:	e080004c 	andi	r2,fp,1
    4d58:	103ba026 	beq	r2,zero,3bdc <__alt_data_end+0xfffae4ac>
    4d5c:	d9013817 	ldw	r4,1248(sp)
    4d60:	d8811f17 	ldw	r2,1148(sp)
    4d64:	d9413517 	ldw	r5,1236(sp)
    4d68:	1907883a 	add	r3,r3,r4
    4d6c:	10800044 	addi	r2,r2,1
    4d70:	41000115 	stw	r4,4(r8)
    4d74:	41400015 	stw	r5,0(r8)
    4d78:	d8c12015 	stw	r3,1152(sp)
    4d7c:	d8811f15 	stw	r2,1148(sp)
    4d80:	010001c4 	movi	r4,7
    4d84:	20815716 	blt	r4,r2,52e4 <___vfprintf_internal_r+0x1f54>
    4d88:	42000204 	addi	r8,r8,8
    4d8c:	0421c83a 	sub	r16,zero,r16
    4d90:	0400810e 	bge	zero,r16,4f98 <___vfprintf_internal_r+0x1c08>
    4d94:	04400404 	movi	r17,16
    4d98:	8c00bd0e 	bge	r17,r16,5090 <___vfprintf_internal_r+0x1d00>
    4d9c:	01400074 	movhi	r5,1
    4da0:	2948e184 	addi	r5,r5,9094
    4da4:	d9412c15 	stw	r5,1200(sp)
    4da8:	04c001c4 	movi	r19,7
    4dac:	00000306 	br	4dbc <___vfprintf_internal_r+0x1a2c>
    4db0:	42000204 	addi	r8,r8,8
    4db4:	843ffc04 	addi	r16,r16,-16
    4db8:	8c00b80e 	bge	r17,r16,509c <___vfprintf_internal_r+0x1d0c>
    4dbc:	18c00404 	addi	r3,r3,16
    4dc0:	10800044 	addi	r2,r2,1
    4dc4:	45000015 	stw	r20,0(r8)
    4dc8:	44400115 	stw	r17,4(r8)
    4dcc:	d8c12015 	stw	r3,1152(sp)
    4dd0:	d8811f15 	stw	r2,1148(sp)
    4dd4:	98bff60e 	bge	r19,r2,4db0 <__alt_data_end+0xfffaf680>
    4dd8:	b809883a 	mov	r4,r23
    4ddc:	b00b883a 	mov	r5,r22
    4de0:	d9811e04 	addi	r6,sp,1144
    4de4:	0009fd40 	call	9fd4 <__sprint_r>
    4de8:	103a811e 	bne	r2,zero,37f0 <__alt_data_end+0xfffae0c0>
    4dec:	d8c12017 	ldw	r3,1152(sp)
    4df0:	d8811f17 	ldw	r2,1148(sp)
    4df4:	da000404 	addi	r8,sp,16
    4df8:	003fee06 	br	4db4 <__alt_data_end+0xfffaf684>
    4dfc:	008011c4 	movi	r2,71
    4e00:	1400db16 	blt	r2,r16,5170 <___vfprintf_internal_r+0x1de0>
    4e04:	01000074 	movhi	r4,1
    4e08:	2108d304 	addi	r4,r4,9036
    4e0c:	d9013115 	stw	r4,1220(sp)
    4e10:	00c000c4 	movi	r3,3
    4e14:	00bfdfc4 	movi	r2,-129
    4e18:	d8c12b15 	stw	r3,1196(sp)
    4e1c:	e0b8703a 	and	fp,fp,r2
    4e20:	dcc12783 	ldbu	r19,1182(sp)
    4e24:	dc812d15 	stw	r18,1204(sp)
    4e28:	1823883a 	mov	r17,r3
    4e2c:	d8013215 	stw	zero,1224(sp)
    4e30:	d8013415 	stw	zero,1232(sp)
    4e34:	003ad606 	br	3990 <__alt_data_end+0xfffae260>
    4e38:	4823883a 	mov	r17,r9
    4e3c:	003cc906 	br	4164 <__alt_data_end+0xfffaea34>
    4e40:	1c800017 	ldw	r18,0(r3)
    4e44:	d8c12d17 	ldw	r3,1204(sp)
    4e48:	902bd7fa 	srai	r21,r18,31
    4e4c:	18c00104 	addi	r3,r3,4
    4e50:	d8c12d15 	stw	r3,1204(sp)
    4e54:	a805883a 	mov	r2,r21
    4e58:	003aa906 	br	3900 <__alt_data_end+0xfffae1d0>
    4e5c:	d9412d17 	ldw	r5,1204(sp)
    4e60:	14800017 	ldw	r18,0(r2)
    4e64:	002b883a 	mov	r21,zero
    4e68:	29400104 	addi	r5,r5,4
    4e6c:	d9412d15 	stw	r5,1204(sp)
    4e70:	003bf906 	br	3e58 <__alt_data_end+0xfffae728>
    4e74:	d8c12d17 	ldw	r3,1204(sp)
    4e78:	14800017 	ldw	r18,0(r2)
    4e7c:	002b883a 	mov	r21,zero
    4e80:	18c00104 	addi	r3,r3,4
    4e84:	d8c12d15 	stw	r3,1204(sp)
    4e88:	00800044 	movi	r2,1
    4e8c:	9007883a 	mov	r3,r18
    4e90:	003bcf06 	br	3dd0 <__alt_data_end+0xfffae6a0>
    4e94:	d9012d17 	ldw	r4,1204(sp)
    4e98:	14800017 	ldw	r18,0(r2)
    4e9c:	002b883a 	mov	r21,zero
    4ea0:	21000104 	addi	r4,r4,4
    4ea4:	d9012d15 	stw	r4,1204(sp)
    4ea8:	0005883a 	mov	r2,zero
    4eac:	9007883a 	mov	r3,r18
    4eb0:	003bc706 	br	3dd0 <__alt_data_end+0xfffae6a0>
    4eb4:	d9412d17 	ldw	r5,1204(sp)
    4eb8:	d8c12f17 	ldw	r3,1212(sp)
    4ebc:	28800017 	ldw	r2,0(r5)
    4ec0:	29400104 	addi	r5,r5,4
    4ec4:	d9412d15 	stw	r5,1204(sp)
    4ec8:	10c00015 	stw	r3,0(r2)
    4ecc:	00396d06 	br	3484 <__alt_data_end+0xfffadd54>
    4ed0:	01000074 	movhi	r4,1
    4ed4:	2108d104 	addi	r4,r4,9028
    4ed8:	d9013115 	stw	r4,1220(sp)
    4edc:	003ba206 	br	3d68 <__alt_data_end+0xfffae638>
    4ee0:	b809883a 	mov	r4,r23
    4ee4:	b00b883a 	mov	r5,r22
    4ee8:	d9811e04 	addi	r6,sp,1144
    4eec:	0009fd40 	call	9fd4 <__sprint_r>
    4ef0:	103a3f1e 	bne	r2,zero,37f0 <__alt_data_end+0xfffae0c0>
    4ef4:	dc012617 	ldw	r16,1176(sp)
    4ef8:	d8c12017 	ldw	r3,1152(sp)
    4efc:	da000404 	addi	r8,sp,16
    4f00:	003f9106 	br	4d48 <__alt_data_end+0xfffaf618>
    4f04:	e0800044 	addi	r2,fp,1
    4f08:	9cc00814 	ori	r19,r19,32
    4f0c:	e4000047 	ldb	r16,1(fp)
    4f10:	00398706 	br	3530 <__alt_data_end+0xfffade00>
    4f14:	d8812e17 	ldw	r2,1208(sp)
    4f18:	d8c12d15 	stw	r3,1204(sp)
    4f1c:	0085c83a 	sub	r2,zero,r2
    4f20:	d8812e15 	stw	r2,1208(sp)
    4f24:	e005883a 	mov	r2,fp
    4f28:	003a3a06 	br	3814 <__alt_data_end+0xfffae0e4>
    4f2c:	b809883a 	mov	r4,r23
    4f30:	b00b883a 	mov	r5,r22
    4f34:	d9811e04 	addi	r6,sp,1144
    4f38:	0009fd40 	call	9fd4 <__sprint_r>
    4f3c:	103a2c1e 	bne	r2,zero,37f0 <__alt_data_end+0xfffae0c0>
    4f40:	d8c12017 	ldw	r3,1152(sp)
    4f44:	da000404 	addi	r8,sp,16
    4f48:	003cf006 	br	430c <__alt_data_end+0xfffaebdc>
    4f4c:	d8c12817 	ldw	r3,1184(sp)
    4f50:	d9013117 	ldw	r4,1220(sp)
    4f54:	1923c83a 	sub	r17,r3,r4
    4f58:	003a8806 	br	397c <__alt_data_end+0xfffae24c>
    4f5c:	da013f15 	stw	r8,1276(sp)
    4f60:	00032f80 	call	32f8 <strlen>
    4f64:	1023883a 	mov	r17,r2
    4f68:	da013f17 	ldw	r8,1276(sp)
    4f6c:	883c7f0e 	bge	r17,zero,416c <__alt_data_end+0xfffaea3c>
    4f70:	0005883a 	mov	r2,zero
    4f74:	003c7d06 	br	416c <__alt_data_end+0xfffaea3c>
    4f78:	b809883a 	mov	r4,r23
    4f7c:	b00b883a 	mov	r5,r22
    4f80:	d9811e04 	addi	r6,sp,1144
    4f84:	0009fd40 	call	9fd4 <__sprint_r>
    4f88:	103a191e 	bne	r2,zero,37f0 <__alt_data_end+0xfffae0c0>
    4f8c:	d8c12017 	ldw	r3,1152(sp)
    4f90:	d8811f17 	ldw	r2,1148(sp)
    4f94:	da000404 	addi	r8,sp,16
    4f98:	d9413317 	ldw	r5,1228(sp)
    4f9c:	d9013117 	ldw	r4,1220(sp)
    4fa0:	10800044 	addi	r2,r2,1
    4fa4:	28c7883a 	add	r3,r5,r3
    4fa8:	41000015 	stw	r4,0(r8)
    4fac:	41400115 	stw	r5,4(r8)
    4fb0:	d8c12015 	stw	r3,1152(sp)
    4fb4:	d8811f15 	stw	r2,1148(sp)
    4fb8:	010001c4 	movi	r4,7
    4fbc:	20bb060e 	bge	r4,r2,3bd8 <__alt_data_end+0xfffae4a8>
    4fc0:	003d6206 	br	454c <__alt_data_end+0xfffaee1c>
    4fc4:	01000074 	movhi	r4,1
    4fc8:	2108e584 	addi	r4,r4,9110
    4fcc:	d9013615 	stw	r4,1240(sp)
    4fd0:	003aa306 	br	3a60 <__alt_data_end+0xfffae330>
    4fd4:	d8812604 	addi	r2,sp,1176
    4fd8:	d8800115 	stw	r2,4(sp)
    4fdc:	d9413717 	ldw	r5,1244(sp)
    4fe0:	d8812504 	addi	r2,sp,1172
    4fe4:	d8800215 	stw	r2,8(sp)
    4fe8:	d8812104 	addi	r2,sp,1156
    4fec:	da400015 	stw	r9,0(sp)
    4ff0:	d8800315 	stw	r2,12(sp)
    4ff4:	b809883a 	mov	r4,r23
    4ff8:	880d883a 	mov	r6,r17
    4ffc:	01c000c4 	movi	r7,3
    5000:	da013f15 	stw	r8,1276(sp)
    5004:	da413e15 	stw	r9,1272(sp)
    5008:	00058080 	call	5808 <_dtoa_r>
    500c:	da413e17 	ldw	r9,1272(sp)
    5010:	da013f17 	ldw	r8,1276(sp)
    5014:	d8813115 	stw	r2,1220(sp)
    5018:	482b883a 	mov	r21,r9
    501c:	d8c13117 	ldw	r3,1220(sp)
    5020:	00801184 	movi	r2,70
    5024:	1d55883a 	add	r10,r3,r21
    5028:	98bebb1e 	bne	r19,r2,4b18 <__alt_data_end+0xfffaf3e8>
    502c:	19000007 	ldb	r4,0(r3)
    5030:	00800c04 	movi	r2,48
    5034:	2080dd26 	beq	r4,r2,53ac <___vfprintf_internal_r+0x201c>
    5038:	d8c12617 	ldw	r3,1176(sp)
    503c:	50d5883a 	add	r10,r10,r3
    5040:	003eb506 	br	4b18 <__alt_data_end+0xfffaf3e8>
    5044:	0023883a 	mov	r17,zero
    5048:	003d9b06 	br	46b8 <__alt_data_end+0xfffaef88>
    504c:	b809883a 	mov	r4,r23
    5050:	b00b883a 	mov	r5,r22
    5054:	d9811e04 	addi	r6,sp,1144
    5058:	0009fd40 	call	9fd4 <__sprint_r>
    505c:	1039e41e 	bne	r2,zero,37f0 <__alt_data_end+0xfffae0c0>
    5060:	d8c12017 	ldw	r3,1152(sp)
    5064:	da000404 	addi	r8,sp,16
    5068:	003d9206 	br	46b4 <__alt_data_end+0xfffaef84>
    506c:	b809883a 	mov	r4,r23
    5070:	b00b883a 	mov	r5,r22
    5074:	d9811e04 	addi	r6,sp,1144
    5078:	0009fd40 	call	9fd4 <__sprint_r>
    507c:	1039dc1e 	bne	r2,zero,37f0 <__alt_data_end+0xfffae0c0>
    5080:	d8812617 	ldw	r2,1176(sp)
    5084:	d8c12017 	ldw	r3,1152(sp)
    5088:	da000404 	addi	r8,sp,16
    508c:	003dfb06 	br	487c <__alt_data_end+0xfffaf14c>
    5090:	01000074 	movhi	r4,1
    5094:	2108e184 	addi	r4,r4,9094
    5098:	d9012c15 	stw	r4,1200(sp)
    509c:	d9012c17 	ldw	r4,1200(sp)
    50a0:	1c07883a 	add	r3,r3,r16
    50a4:	10800044 	addi	r2,r2,1
    50a8:	41000015 	stw	r4,0(r8)
    50ac:	44000115 	stw	r16,4(r8)
    50b0:	d8c12015 	stw	r3,1152(sp)
    50b4:	d8811f15 	stw	r2,1148(sp)
    50b8:	010001c4 	movi	r4,7
    50bc:	20bfae16 	blt	r4,r2,4f78 <__alt_data_end+0xfffaf848>
    50c0:	42000204 	addi	r8,r8,8
    50c4:	003fb406 	br	4f98 <__alt_data_end+0xfffaf868>
    50c8:	0021883a 	mov	r16,zero
    50cc:	003dfd06 	br	48c4 <__alt_data_end+0xfffaf194>
    50d0:	01400074 	movhi	r5,1
    50d4:	2948e584 	addi	r5,r5,9110
    50d8:	d9413615 	stw	r5,1240(sp)
    50dc:	003ae306 	br	3c6c <__alt_data_end+0xfffae53c>
    50e0:	b809883a 	mov	r4,r23
    50e4:	b00b883a 	mov	r5,r22
    50e8:	d9811e04 	addi	r6,sp,1144
    50ec:	0009fd40 	call	9fd4 <__sprint_r>
    50f0:	1039bf1e 	bne	r2,zero,37f0 <__alt_data_end+0xfffae0c0>
    50f4:	d8812617 	ldw	r2,1176(sp)
    50f8:	d9413317 	ldw	r5,1228(sp)
    50fc:	d8c12017 	ldw	r3,1152(sp)
    5100:	da000404 	addi	r8,sp,16
    5104:	2885c83a 	sub	r2,r5,r2
    5108:	003ded06 	br	48c0 <__alt_data_end+0xfffaf190>
    510c:	00800184 	movi	r2,6
    5110:	1240012e 	bgeu	r2,r9,5118 <___vfprintf_internal_r+0x1d88>
    5114:	1013883a 	mov	r9,r2
    5118:	4823883a 	mov	r17,r9
    511c:	4805883a 	mov	r2,r9
    5120:	4800b216 	blt	r9,zero,53ec <___vfprintf_internal_r+0x205c>
    5124:	01400074 	movhi	r5,1
    5128:	2948df04 	addi	r5,r5,9084
    512c:	d8812b15 	stw	r2,1196(sp)
    5130:	dc812d15 	stw	r18,1204(sp)
    5134:	d8013215 	stw	zero,1224(sp)
    5138:	d8013415 	stw	zero,1232(sp)
    513c:	d9413115 	stw	r5,1220(sp)
    5140:	0005883a 	mov	r2,zero
    5144:	003a1906 	br	39ac <__alt_data_end+0xfffae27c>
    5148:	04c00b44 	movi	r19,45
    514c:	dcc12785 	stb	r19,1182(sp)
    5150:	003b0006 	br	3d54 <__alt_data_end+0xfffae624>
    5154:	d8c12d17 	ldw	r3,1204(sp)
    5158:	d9012f17 	ldw	r4,1212(sp)
    515c:	18800017 	ldw	r2,0(r3)
    5160:	18c00104 	addi	r3,r3,4
    5164:	d8c12d15 	stw	r3,1204(sp)
    5168:	11000015 	stw	r4,0(r2)
    516c:	0038c506 	br	3484 <__alt_data_end+0xfffadd54>
    5170:	01400074 	movhi	r5,1
    5174:	2948d404 	addi	r5,r5,9040
    5178:	d9413115 	stw	r5,1220(sp)
    517c:	003f2406 	br	4e10 <__alt_data_end+0xfffaf6e0>
    5180:	00800b44 	movi	r2,45
    5184:	d8812785 	stb	r2,1182(sp)
    5188:	df012b15 	stw	fp,1196(sp)
    518c:	d8013215 	stw	zero,1224(sp)
    5190:	df012d17 	ldw	fp,1204(sp)
    5194:	00800b44 	movi	r2,45
    5198:	dc812d15 	stw	r18,1204(sp)
    519c:	003a0006 	br	39a0 <__alt_data_end+0xfffae270>
    51a0:	d8c12617 	ldw	r3,1176(sp)
    51a4:	00bfff44 	movi	r2,-3
    51a8:	18800a16 	blt	r3,r2,51d4 <___vfprintf_internal_r+0x1e44>
    51ac:	48c00916 	blt	r9,r3,51d4 <___vfprintf_internal_r+0x1e44>
    51b0:	d8c13415 	stw	r3,1232(sp)
    51b4:	040019c4 	movi	r16,103
    51b8:	003e7606 	br	4b94 <__alt_data_end+0xfffaf464>
    51bc:	01000074 	movhi	r4,1
    51c0:	2108e184 	addi	r4,r4,9094
    51c4:	d9012c15 	stw	r4,1200(sp)
    51c8:	003c8e06 	br	4404 <__alt_data_end+0xfffaecd4>
    51cc:	5005883a 	mov	r2,r10
    51d0:	003e6506 	br	4b68 <__alt_data_end+0xfffaf438>
    51d4:	843fff84 	addi	r16,r16,-2
    51d8:	1d7fffc4 	addi	r21,r3,-1
    51dc:	dd412615 	stw	r21,1176(sp)
    51e0:	dc0122c5 	stb	r16,1163(sp)
    51e4:	a8009216 	blt	r21,zero,5430 <___vfprintf_internal_r+0x20a0>
    51e8:	00800ac4 	movi	r2,43
    51ec:	d8812305 	stb	r2,1164(sp)
    51f0:	00800244 	movi	r2,9
    51f4:	1540660e 	bge	r2,r21,5390 <___vfprintf_internal_r+0x2000>
    51f8:	dcc122c4 	addi	r19,sp,1163
    51fc:	dc012c15 	stw	r16,1200(sp)
    5200:	4023883a 	mov	r17,r8
    5204:	9821883a 	mov	r16,r19
    5208:	a809883a 	mov	r4,r21
    520c:	01400284 	movi	r5,10
    5210:	000ca9c0 	call	ca9c <__modsi3>
    5214:	10800c04 	addi	r2,r2,48
    5218:	843fffc4 	addi	r16,r16,-1
    521c:	a809883a 	mov	r4,r21
    5220:	01400284 	movi	r5,10
    5224:	80800005 	stb	r2,0(r16)
    5228:	000ca480 	call	ca48 <__divsi3>
    522c:	01000244 	movi	r4,9
    5230:	102b883a 	mov	r21,r2
    5234:	20bff416 	blt	r4,r2,5208 <__alt_data_end+0xfffafad8>
    5238:	8811883a 	mov	r8,r17
    523c:	10800c04 	addi	r2,r2,48
    5240:	8023883a 	mov	r17,r16
    5244:	897fffc4 	addi	r5,r17,-1
    5248:	88bfffc5 	stb	r2,-1(r17)
    524c:	dc012c17 	ldw	r16,1200(sp)
    5250:	2cc08a2e 	bgeu	r5,r19,547c <___vfprintf_internal_r+0x20ec>
    5254:	d9812384 	addi	r6,sp,1166
    5258:	344dc83a 	sub	r6,r6,r17
    525c:	d9012344 	addi	r4,sp,1165
    5260:	998d883a 	add	r6,r19,r6
    5264:	00000106 	br	526c <___vfprintf_internal_r+0x1edc>
    5268:	28800003 	ldbu	r2,0(r5)
    526c:	20800005 	stb	r2,0(r4)
    5270:	21000044 	addi	r4,r4,1
    5274:	29400044 	addi	r5,r5,1
    5278:	21bffb1e 	bne	r4,r6,5268 <__alt_data_end+0xfffafb38>
    527c:	d8812304 	addi	r2,sp,1164
    5280:	1445c83a 	sub	r2,r2,r17
    5284:	d9412344 	addi	r5,sp,1165
    5288:	2885883a 	add	r2,r5,r2
    528c:	14e7c83a 	sub	r19,r2,r19
    5290:	d8813317 	ldw	r2,1228(sp)
    5294:	d8c13317 	ldw	r3,1228(sp)
    5298:	dcc13a15 	stw	r19,1256(sp)
    529c:	14e3883a 	add	r17,r2,r19
    52a0:	00800044 	movi	r2,1
    52a4:	10c0550e 	bge	r2,r3,53fc <___vfprintf_internal_r+0x206c>
    52a8:	8c400044 	addi	r17,r17,1
    52ac:	8839883a 	mov	fp,r17
    52b0:	88005016 	blt	r17,zero,53f4 <___vfprintf_internal_r+0x2064>
    52b4:	d8013415 	stw	zero,1232(sp)
    52b8:	003e3f06 	br	4bb8 <__alt_data_end+0xfffaf488>
    52bc:	da412b15 	stw	r9,1196(sp)
    52c0:	dcc12783 	ldbu	r19,1182(sp)
    52c4:	4823883a 	mov	r17,r9
    52c8:	dc812d15 	stw	r18,1204(sp)
    52cc:	d8013215 	stw	zero,1224(sp)
    52d0:	d8013415 	stw	zero,1232(sp)
    52d4:	0039ae06 	br	3990 <__alt_data_end+0xfffae260>
    52d8:	483de91e 	bne	r9,zero,4a80 <__alt_data_end+0xfffaf350>
    52dc:	8813883a 	mov	r9,r17
    52e0:	003de706 	br	4a80 <__alt_data_end+0xfffaf350>
    52e4:	b809883a 	mov	r4,r23
    52e8:	b00b883a 	mov	r5,r22
    52ec:	d9811e04 	addi	r6,sp,1144
    52f0:	0009fd40 	call	9fd4 <__sprint_r>
    52f4:	10393e1e 	bne	r2,zero,37f0 <__alt_data_end+0xfffae0c0>
    52f8:	dc012617 	ldw	r16,1176(sp)
    52fc:	d8c12017 	ldw	r3,1152(sp)
    5300:	d8811f17 	ldw	r2,1148(sp)
    5304:	da000404 	addi	r8,sp,16
    5308:	003ea006 	br	4d8c <__alt_data_end+0xfffaf65c>
    530c:	00c00b44 	movi	r3,45
    5310:	2460003c 	xorhi	r17,r4,32768
    5314:	d8c12b05 	stb	r3,1196(sp)
    5318:	003ddf06 	br	4a98 <__alt_data_end+0xfffaf368>
    531c:	02400184 	movi	r9,6
    5320:	003dd706 	br	4a80 <__alt_data_end+0xfffaf350>
    5324:	4d400044 	addi	r21,r9,1
    5328:	003de206 	br	4ab4 <__alt_data_end+0xfffaf384>
    532c:	d8c13417 	ldw	r3,1232(sp)
    5330:	00c0490e 	bge	zero,r3,5458 <___vfprintf_internal_r+0x20c8>
    5334:	04400044 	movi	r17,1
    5338:	d9013317 	ldw	r4,1228(sp)
    533c:	8923883a 	add	r17,r17,r4
    5340:	8839883a 	mov	fp,r17
    5344:	883e1c0e 	bge	r17,zero,4bb8 <__alt_data_end+0xfffaf488>
    5348:	0039883a 	mov	fp,zero
    534c:	003e1a06 	br	4bb8 <__alt_data_end+0xfffaf488>
    5350:	00c03b0e 	bge	zero,r3,5440 <___vfprintf_internal_r+0x20b0>
    5354:	4800021e 	bne	r9,zero,5360 <___vfprintf_internal_r+0x1fd0>
    5358:	e080004c 	andi	r2,fp,1
    535c:	10000626 	beq	r2,zero,5378 <___vfprintf_internal_r+0x1fe8>
    5360:	d8c13417 	ldw	r3,1232(sp)
    5364:	4a400044 	addi	r9,r9,1
    5368:	1a63883a 	add	r17,r3,r9
    536c:	8839883a 	mov	fp,r17
    5370:	883e110e 	bge	r17,zero,4bb8 <__alt_data_end+0xfffaf488>
    5374:	003ff406 	br	5348 <__alt_data_end+0xfffafc18>
    5378:	1839883a 	mov	fp,r3
    537c:	18004116 	blt	r3,zero,5484 <___vfprintf_internal_r+0x20f4>
    5380:	dc413417 	ldw	r17,1232(sp)
    5384:	003e0c06 	br	4bb8 <__alt_data_end+0xfffaf488>
    5388:	d8812117 	ldw	r2,1156(sp)
    538c:	003df606 	br	4b68 <__alt_data_end+0xfffaf438>
    5390:	00800c04 	movi	r2,48
    5394:	a8c00c04 	addi	r3,r21,48
    5398:	d8812345 	stb	r2,1165(sp)
    539c:	d8c12385 	stb	r3,1166(sp)
    53a0:	d88123c4 	addi	r2,sp,1167
    53a4:	dcc122c4 	addi	r19,sp,1163
    53a8:	003fb806 	br	528c <__alt_data_end+0xfffafb5c>
    53ac:	d9013717 	ldw	r4,1244(sp)
    53b0:	880b883a 	mov	r5,r17
    53b4:	000d883a 	mov	r6,zero
    53b8:	000f883a 	mov	r7,zero
    53bc:	da013f15 	stw	r8,1276(sp)
    53c0:	da413e15 	stw	r9,1272(sp)
    53c4:	da813d15 	stw	r10,1268(sp)
    53c8:	000dd4c0 	call	dd4c <__eqdf2>
    53cc:	da013f17 	ldw	r8,1276(sp)
    53d0:	da413e17 	ldw	r9,1272(sp)
    53d4:	da813d17 	ldw	r10,1268(sp)
    53d8:	103f1726 	beq	r2,zero,5038 <__alt_data_end+0xfffaf908>
    53dc:	00800044 	movi	r2,1
    53e0:	1547c83a 	sub	r3,r2,r21
    53e4:	d8c12615 	stw	r3,1176(sp)
    53e8:	003f1406 	br	503c <__alt_data_end+0xfffaf90c>
    53ec:	0005883a 	mov	r2,zero
    53f0:	003f4c06 	br	5124 <__alt_data_end+0xfffaf9f4>
    53f4:	0039883a 	mov	fp,zero
    53f8:	003fae06 	br	52b4 <__alt_data_end+0xfffafb84>
    53fc:	e084703a 	and	r2,fp,r2
    5400:	103faa26 	beq	r2,zero,52ac <__alt_data_end+0xfffafb7c>
    5404:	003fa806 	br	52a8 <__alt_data_end+0xfffafb78>
    5408:	d9412d17 	ldw	r5,1204(sp)
    540c:	2a400017 	ldw	r9,0(r5)
    5410:	28c00104 	addi	r3,r5,4
    5414:	d8c12d15 	stw	r3,1204(sp)
    5418:	483ebc0e 	bge	r9,zero,4f0c <__alt_data_end+0xfffaf7dc>
    541c:	027fffc4 	movi	r9,-1
    5420:	e4000047 	ldb	r16,1(fp)
    5424:	00384206 	br	3530 <__alt_data_end+0xfffade00>
    5428:	043fffc4 	movi	r16,-1
    542c:	0038ce06 	br	3768 <__alt_data_end+0xfffae038>
    5430:	00800b44 	movi	r2,45
    5434:	056bc83a 	sub	r21,zero,r21
    5438:	d8812305 	stb	r2,1164(sp)
    543c:	003f6c06 	br	51f0 <__alt_data_end+0xfffafac0>
    5440:	4800081e 	bne	r9,zero,5464 <___vfprintf_internal_r+0x20d4>
    5444:	e080004c 	andi	r2,fp,1
    5448:	1000061e 	bne	r2,zero,5464 <___vfprintf_internal_r+0x20d4>
    544c:	07000044 	movi	fp,1
    5450:	e023883a 	mov	r17,fp
    5454:	003dd806 	br	4bb8 <__alt_data_end+0xfffaf488>
    5458:	04400084 	movi	r17,2
    545c:	88e3c83a 	sub	r17,r17,r3
    5460:	003fb506 	br	5338 <__alt_data_end+0xfffafc08>
    5464:	4c400084 	addi	r17,r9,2
    5468:	8839883a 	mov	fp,r17
    546c:	883dd20e 	bge	r17,zero,4bb8 <__alt_data_end+0xfffaf488>
    5470:	003fb506 	br	5348 <__alt_data_end+0xfffafc18>
    5474:	d8c12617 	ldw	r3,1176(sp)
    5478:	003f5706 	br	51d8 <__alt_data_end+0xfffafaa8>
    547c:	d8812344 	addi	r2,sp,1165
    5480:	003f8206 	br	528c <__alt_data_end+0xfffafb5c>
    5484:	0039883a 	mov	fp,zero
    5488:	003fbd06 	br	5380 <__alt_data_end+0xfffafc50>

0000548c <__vfprintf_internal>:
    548c:	2007883a 	mov	r3,r4
    5490:	01000074 	movhi	r4,1
    5494:	21103e04 	addi	r4,r4,16632
    5498:	21000017 	ldw	r4,0(r4)
    549c:	2805883a 	mov	r2,r5
    54a0:	300f883a 	mov	r7,r6
    54a4:	180b883a 	mov	r5,r3
    54a8:	100d883a 	mov	r6,r2
    54ac:	00033901 	jmpi	3390 <___vfprintf_internal_r>

000054b0 <__swsetup_r>:
    54b0:	00800074 	movhi	r2,1
    54b4:	defffd04 	addi	sp,sp,-12
    54b8:	10903e04 	addi	r2,r2,16632
    54bc:	dc400115 	stw	r17,4(sp)
    54c0:	2023883a 	mov	r17,r4
    54c4:	11000017 	ldw	r4,0(r2)
    54c8:	dc000015 	stw	r16,0(sp)
    54cc:	dfc00215 	stw	ra,8(sp)
    54d0:	2821883a 	mov	r16,r5
    54d4:	20000226 	beq	r4,zero,54e0 <__swsetup_r+0x30>
    54d8:	20c00e17 	ldw	r3,56(r4)
    54dc:	18002e26 	beq	r3,zero,5598 <__swsetup_r+0xe8>
    54e0:	8080030b 	ldhu	r2,12(r16)
    54e4:	10c0020c 	andi	r3,r2,8
    54e8:	100d883a 	mov	r6,r2
    54ec:	18000f26 	beq	r3,zero,552c <__swsetup_r+0x7c>
    54f0:	80c00417 	ldw	r3,16(r16)
    54f4:	18001526 	beq	r3,zero,554c <__swsetup_r+0x9c>
    54f8:	1100004c 	andi	r4,r2,1
    54fc:	20001c1e 	bne	r4,zero,5570 <__swsetup_r+0xc0>
    5500:	1080008c 	andi	r2,r2,2
    5504:	1000261e 	bne	r2,zero,55a0 <__swsetup_r+0xf0>
    5508:	80800517 	ldw	r2,20(r16)
    550c:	80800215 	stw	r2,8(r16)
    5510:	18001c26 	beq	r3,zero,5584 <__swsetup_r+0xd4>
    5514:	0005883a 	mov	r2,zero
    5518:	dfc00217 	ldw	ra,8(sp)
    551c:	dc400117 	ldw	r17,4(sp)
    5520:	dc000017 	ldw	r16,0(sp)
    5524:	dec00304 	addi	sp,sp,12
    5528:	f800283a 	ret
    552c:	3080040c 	andi	r2,r6,16
    5530:	10001726 	beq	r2,zero,5590 <__swsetup_r+0xe0>
    5534:	3080010c 	andi	r2,r6,4
    5538:	10001b1e 	bne	r2,zero,55a8 <__swsetup_r+0xf8>
    553c:	80c00417 	ldw	r3,16(r16)
    5540:	30800214 	ori	r2,r6,8
    5544:	8080030d 	sth	r2,12(r16)
    5548:	183feb1e 	bne	r3,zero,54f8 <__alt_data_end+0xfffafdc8>
    554c:	1140a00c 	andi	r5,r2,640
    5550:	01008004 	movi	r4,512
    5554:	293fe826 	beq	r5,r4,54f8 <__alt_data_end+0xfffafdc8>
    5558:	8809883a 	mov	r4,r17
    555c:	800b883a 	mov	r5,r16
    5560:	00080440 	call	8044 <__smakebuf_r>
    5564:	8080030b 	ldhu	r2,12(r16)
    5568:	80c00417 	ldw	r3,16(r16)
    556c:	003fe206 	br	54f8 <__alt_data_end+0xfffafdc8>
    5570:	80800517 	ldw	r2,20(r16)
    5574:	80000215 	stw	zero,8(r16)
    5578:	0085c83a 	sub	r2,zero,r2
    557c:	80800615 	stw	r2,24(r16)
    5580:	183fe41e 	bne	r3,zero,5514 <__alt_data_end+0xfffafde4>
    5584:	8080030b 	ldhu	r2,12(r16)
    5588:	1080200c 	andi	r2,r2,128
    558c:	103fe226 	beq	r2,zero,5518 <__alt_data_end+0xfffafde8>
    5590:	00bfffc4 	movi	r2,-1
    5594:	003fe006 	br	5518 <__alt_data_end+0xfffafde8>
    5598:	00074ec0 	call	74ec <__sinit>
    559c:	003fd006 	br	54e0 <__alt_data_end+0xfffafdb0>
    55a0:	0005883a 	mov	r2,zero
    55a4:	003fd906 	br	550c <__alt_data_end+0xfffafddc>
    55a8:	81400c17 	ldw	r5,48(r16)
    55ac:	28000626 	beq	r5,zero,55c8 <__swsetup_r+0x118>
    55b0:	80801004 	addi	r2,r16,64
    55b4:	28800326 	beq	r5,r2,55c4 <__swsetup_r+0x114>
    55b8:	8809883a 	mov	r4,r17
    55bc:	00076600 	call	7660 <_free_r>
    55c0:	8180030b 	ldhu	r6,12(r16)
    55c4:	80000c15 	stw	zero,48(r16)
    55c8:	80c00417 	ldw	r3,16(r16)
    55cc:	00bff6c4 	movi	r2,-37
    55d0:	118c703a 	and	r6,r2,r6
    55d4:	80000115 	stw	zero,4(r16)
    55d8:	80c00015 	stw	r3,0(r16)
    55dc:	003fd806 	br	5540 <__alt_data_end+0xfffafe10>

000055e0 <quorem>:
    55e0:	defff204 	addi	sp,sp,-56
    55e4:	ddc00b15 	stw	r23,44(sp)
    55e8:	20800417 	ldw	r2,16(r4)
    55ec:	2dc00417 	ldw	r23,16(r5)
    55f0:	dfc00d15 	stw	ra,52(sp)
    55f4:	df000c15 	stw	fp,48(sp)
    55f8:	dd800a15 	stw	r22,40(sp)
    55fc:	dd400915 	stw	r21,36(sp)
    5600:	dd000815 	stw	r20,32(sp)
    5604:	dcc00715 	stw	r19,28(sp)
    5608:	dc800615 	stw	r18,24(sp)
    560c:	dc400515 	stw	r17,20(sp)
    5610:	dc000415 	stw	r16,16(sp)
    5614:	15c07a16 	blt	r2,r23,5800 <quorem+0x220>
    5618:	bdffffc4 	addi	r23,r23,-1
    561c:	bde9883a 	add	r20,r23,r23
    5620:	28c00504 	addi	r3,r5,20
    5624:	a529883a 	add	r20,r20,r20
    5628:	1d39883a 	add	fp,r3,r20
    562c:	24c00504 	addi	r19,r4,20
    5630:	d9400215 	stw	r5,8(sp)
    5634:	9d29883a 	add	r20,r19,r20
    5638:	e1400017 	ldw	r5,0(fp)
    563c:	d9000015 	stw	r4,0(sp)
    5640:	a1000017 	ldw	r4,0(r20)
    5644:	29400044 	addi	r5,r5,1
    5648:	d8c00115 	stw	r3,4(sp)
    564c:	dd000315 	stw	r20,12(sp)
    5650:	000caf80 	call	caf8 <__udivsi3>
    5654:	1025883a 	mov	r18,r2
    5658:	10003026 	beq	r2,zero,571c <quorem+0x13c>
    565c:	dc400117 	ldw	r17,4(sp)
    5660:	9829883a 	mov	r20,r19
    5664:	002d883a 	mov	r22,zero
    5668:	0021883a 	mov	r16,zero
    566c:	8d400017 	ldw	r21,0(r17)
    5670:	900b883a 	mov	r5,r18
    5674:	8c400104 	addi	r17,r17,4
    5678:	a93fffcc 	andi	r4,r21,65535
    567c:	000cb080 	call	cb08 <__mulsi3>
    5680:	a808d43a 	srli	r4,r21,16
    5684:	900b883a 	mov	r5,r18
    5688:	b0ad883a 	add	r22,r22,r2
    568c:	000cb080 	call	cb08 <__mulsi3>
    5690:	a1000017 	ldw	r4,0(r20)
    5694:	b00cd43a 	srli	r6,r22,16
    5698:	b0ffffcc 	andi	r3,r22,65535
    569c:	217fffcc 	andi	r5,r4,65535
    56a0:	2c21883a 	add	r16,r5,r16
    56a4:	80c7c83a 	sub	r3,r16,r3
    56a8:	2008d43a 	srli	r4,r4,16
    56ac:	3085883a 	add	r2,r6,r2
    56b0:	1821d43a 	srai	r16,r3,16
    56b4:	117fffcc 	andi	r5,r2,65535
    56b8:	2149c83a 	sub	r4,r4,r5
    56bc:	2421883a 	add	r16,r4,r16
    56c0:	8008943a 	slli	r4,r16,16
    56c4:	18ffffcc 	andi	r3,r3,65535
    56c8:	102cd43a 	srli	r22,r2,16
    56cc:	20c8b03a 	or	r4,r4,r3
    56d0:	a1000015 	stw	r4,0(r20)
    56d4:	8021d43a 	srai	r16,r16,16
    56d8:	a5000104 	addi	r20,r20,4
    56dc:	e47fe32e 	bgeu	fp,r17,566c <__alt_data_end+0xfffaff3c>
    56e0:	d8c00317 	ldw	r3,12(sp)
    56e4:	18800017 	ldw	r2,0(r3)
    56e8:	10000c1e 	bne	r2,zero,571c <quorem+0x13c>
    56ec:	18bfff04 	addi	r2,r3,-4
    56f0:	9880082e 	bgeu	r19,r2,5714 <quorem+0x134>
    56f4:	18ffff17 	ldw	r3,-4(r3)
    56f8:	18000326 	beq	r3,zero,5708 <quorem+0x128>
    56fc:	00000506 	br	5714 <quorem+0x134>
    5700:	10c00017 	ldw	r3,0(r2)
    5704:	1800031e 	bne	r3,zero,5714 <quorem+0x134>
    5708:	10bfff04 	addi	r2,r2,-4
    570c:	bdffffc4 	addi	r23,r23,-1
    5710:	98bffb36 	bltu	r19,r2,5700 <__alt_data_end+0xfffaffd0>
    5714:	d8c00017 	ldw	r3,0(sp)
    5718:	1dc00415 	stw	r23,16(r3)
    571c:	d9000017 	ldw	r4,0(sp)
    5720:	d9400217 	ldw	r5,8(sp)
    5724:	00090180 	call	9018 <__mcmp>
    5728:	10002816 	blt	r2,zero,57cc <quorem+0x1ec>
    572c:	dc400117 	ldw	r17,4(sp)
    5730:	94800044 	addi	r18,r18,1
    5734:	980d883a 	mov	r6,r19
    5738:	0007883a 	mov	r3,zero
    573c:	31000017 	ldw	r4,0(r6)
    5740:	89400017 	ldw	r5,0(r17)
    5744:	31800104 	addi	r6,r6,4
    5748:	20bfffcc 	andi	r2,r4,65535
    574c:	10c7883a 	add	r3,r2,r3
    5750:	28bfffcc 	andi	r2,r5,65535
    5754:	1885c83a 	sub	r2,r3,r2
    5758:	280ad43a 	srli	r5,r5,16
    575c:	2008d43a 	srli	r4,r4,16
    5760:	1007d43a 	srai	r3,r2,16
    5764:	10bfffcc 	andi	r2,r2,65535
    5768:	2149c83a 	sub	r4,r4,r5
    576c:	20c9883a 	add	r4,r4,r3
    5770:	200a943a 	slli	r5,r4,16
    5774:	8c400104 	addi	r17,r17,4
    5778:	2007d43a 	srai	r3,r4,16
    577c:	2884b03a 	or	r2,r5,r2
    5780:	30bfff15 	stw	r2,-4(r6)
    5784:	e47fed2e 	bgeu	fp,r17,573c <__alt_data_end+0xfffb000c>
    5788:	bdc5883a 	add	r2,r23,r23
    578c:	1085883a 	add	r2,r2,r2
    5790:	9887883a 	add	r3,r19,r2
    5794:	18800017 	ldw	r2,0(r3)
    5798:	10000c1e 	bne	r2,zero,57cc <quorem+0x1ec>
    579c:	18bfff04 	addi	r2,r3,-4
    57a0:	9880082e 	bgeu	r19,r2,57c4 <quorem+0x1e4>
    57a4:	18ffff17 	ldw	r3,-4(r3)
    57a8:	18000326 	beq	r3,zero,57b8 <quorem+0x1d8>
    57ac:	00000506 	br	57c4 <quorem+0x1e4>
    57b0:	10c00017 	ldw	r3,0(r2)
    57b4:	1800031e 	bne	r3,zero,57c4 <quorem+0x1e4>
    57b8:	10bfff04 	addi	r2,r2,-4
    57bc:	bdffffc4 	addi	r23,r23,-1
    57c0:	98bffb36 	bltu	r19,r2,57b0 <__alt_data_end+0xfffb0080>
    57c4:	d8c00017 	ldw	r3,0(sp)
    57c8:	1dc00415 	stw	r23,16(r3)
    57cc:	9005883a 	mov	r2,r18
    57d0:	dfc00d17 	ldw	ra,52(sp)
    57d4:	df000c17 	ldw	fp,48(sp)
    57d8:	ddc00b17 	ldw	r23,44(sp)
    57dc:	dd800a17 	ldw	r22,40(sp)
    57e0:	dd400917 	ldw	r21,36(sp)
    57e4:	dd000817 	ldw	r20,32(sp)
    57e8:	dcc00717 	ldw	r19,28(sp)
    57ec:	dc800617 	ldw	r18,24(sp)
    57f0:	dc400517 	ldw	r17,20(sp)
    57f4:	dc000417 	ldw	r16,16(sp)
    57f8:	dec00e04 	addi	sp,sp,56
    57fc:	f800283a 	ret
    5800:	0005883a 	mov	r2,zero
    5804:	003ff206 	br	57d0 <__alt_data_end+0xfffb00a0>

00005808 <_dtoa_r>:
    5808:	20801017 	ldw	r2,64(r4)
    580c:	deffde04 	addi	sp,sp,-136
    5810:	dd401d15 	stw	r21,116(sp)
    5814:	dcc01b15 	stw	r19,108(sp)
    5818:	dc801a15 	stw	r18,104(sp)
    581c:	dc401915 	stw	r17,100(sp)
    5820:	dc001815 	stw	r16,96(sp)
    5824:	dfc02115 	stw	ra,132(sp)
    5828:	df002015 	stw	fp,128(sp)
    582c:	ddc01f15 	stw	r23,124(sp)
    5830:	dd801e15 	stw	r22,120(sp)
    5834:	dd001c15 	stw	r20,112(sp)
    5838:	d9c00315 	stw	r7,12(sp)
    583c:	2021883a 	mov	r16,r4
    5840:	302b883a 	mov	r21,r6
    5844:	2825883a 	mov	r18,r5
    5848:	dc402417 	ldw	r17,144(sp)
    584c:	3027883a 	mov	r19,r6
    5850:	10000826 	beq	r2,zero,5874 <_dtoa_r+0x6c>
    5854:	21801117 	ldw	r6,68(r4)
    5858:	00c00044 	movi	r3,1
    585c:	100b883a 	mov	r5,r2
    5860:	1986983a 	sll	r3,r3,r6
    5864:	11800115 	stw	r6,4(r2)
    5868:	10c00215 	stw	r3,8(r2)
    586c:	00087440 	call	8744 <_Bfree>
    5870:	80001015 	stw	zero,64(r16)
    5874:	a8002d16 	blt	r21,zero,592c <_dtoa_r+0x124>
    5878:	88000015 	stw	zero,0(r17)
    587c:	a8dffc2c 	andhi	r3,r21,32752
    5880:	009ffc34 	movhi	r2,32752
    5884:	18801b26 	beq	r3,r2,58f4 <_dtoa_r+0xec>
    5888:	9009883a 	mov	r4,r18
    588c:	980b883a 	mov	r5,r19
    5890:	000d883a 	mov	r6,zero
    5894:	000f883a 	mov	r7,zero
    5898:	000dd4c0 	call	dd4c <__eqdf2>
    589c:	10002a1e 	bne	r2,zero,5948 <_dtoa_r+0x140>
    58a0:	d8c02317 	ldw	r3,140(sp)
    58a4:	d9002517 	ldw	r4,148(sp)
    58a8:	00800044 	movi	r2,1
    58ac:	18800015 	stw	r2,0(r3)
    58b0:	2001a226 	beq	r4,zero,5f3c <_dtoa_r+0x734>
    58b4:	00800074 	movhi	r2,1
    58b8:	1088e144 	addi	r2,r2,9093
    58bc:	20800015 	stw	r2,0(r4)
    58c0:	10bfffc4 	addi	r2,r2,-1
    58c4:	dfc02117 	ldw	ra,132(sp)
    58c8:	df002017 	ldw	fp,128(sp)
    58cc:	ddc01f17 	ldw	r23,124(sp)
    58d0:	dd801e17 	ldw	r22,120(sp)
    58d4:	dd401d17 	ldw	r21,116(sp)
    58d8:	dd001c17 	ldw	r20,112(sp)
    58dc:	dcc01b17 	ldw	r19,108(sp)
    58e0:	dc801a17 	ldw	r18,104(sp)
    58e4:	dc401917 	ldw	r17,100(sp)
    58e8:	dc001817 	ldw	r16,96(sp)
    58ec:	dec02204 	addi	sp,sp,136
    58f0:	f800283a 	ret
    58f4:	d8c02317 	ldw	r3,140(sp)
    58f8:	0089c3c4 	movi	r2,9999
    58fc:	18800015 	stw	r2,0(r3)
    5900:	90017c26 	beq	r18,zero,5ef4 <_dtoa_r+0x6ec>
    5904:	00800074 	movhi	r2,1
    5908:	1088ed04 	addi	r2,r2,9140
    590c:	d9002517 	ldw	r4,148(sp)
    5910:	203fec26 	beq	r4,zero,58c4 <__alt_data_end+0xfffb0194>
    5914:	10c000c7 	ldb	r3,3(r2)
    5918:	18017d1e 	bne	r3,zero,5f10 <_dtoa_r+0x708>
    591c:	10c000c4 	addi	r3,r2,3
    5920:	d9802517 	ldw	r6,148(sp)
    5924:	30c00015 	stw	r3,0(r6)
    5928:	003fe606 	br	58c4 <__alt_data_end+0xfffb0194>
    592c:	04e00034 	movhi	r19,32768
    5930:	9cffffc4 	addi	r19,r19,-1
    5934:	00800044 	movi	r2,1
    5938:	ace6703a 	and	r19,r21,r19
    593c:	88800015 	stw	r2,0(r17)
    5940:	982b883a 	mov	r21,r19
    5944:	003fcd06 	br	587c <__alt_data_end+0xfffb014c>
    5948:	d8800204 	addi	r2,sp,8
    594c:	a822d53a 	srli	r17,r21,20
    5950:	d8800015 	stw	r2,0(sp)
    5954:	8009883a 	mov	r4,r16
    5958:	900b883a 	mov	r5,r18
    595c:	980d883a 	mov	r6,r19
    5960:	d9c00104 	addi	r7,sp,4
    5964:	000938c0 	call	938c <__d2b>
    5968:	1039883a 	mov	fp,r2
    596c:	88016a1e 	bne	r17,zero,5f18 <_dtoa_r+0x710>
    5970:	dd000217 	ldw	r20,8(sp)
    5974:	dc400117 	ldw	r17,4(sp)
    5978:	00befbc4 	movi	r2,-1041
    597c:	a463883a 	add	r17,r20,r17
    5980:	8882ea16 	blt	r17,r2,652c <_dtoa_r+0xd24>
    5984:	00bf0384 	movi	r2,-1010
    5988:	1445c83a 	sub	r2,r2,r17
    598c:	89010484 	addi	r4,r17,1042
    5990:	a8aa983a 	sll	r21,r21,r2
    5994:	9108d83a 	srl	r4,r18,r4
    5998:	a908b03a 	or	r4,r21,r4
    599c:	000f2240 	call	f224 <__floatunsidf>
    59a0:	017f8434 	movhi	r5,65040
    59a4:	01800044 	movi	r6,1
    59a8:	1009883a 	mov	r4,r2
    59ac:	194b883a 	add	r5,r3,r5
    59b0:	8c7fffc4 	addi	r17,r17,-1
    59b4:	d9800f15 	stw	r6,60(sp)
    59b8:	000d883a 	mov	r6,zero
    59bc:	01cffe34 	movhi	r7,16376
    59c0:	000e7fc0 	call	e7fc <__subdf3>
    59c4:	0198dbf4 	movhi	r6,25455
    59c8:	01cff4f4 	movhi	r7,16339
    59cc:	1009883a 	mov	r4,r2
    59d0:	180b883a 	mov	r5,r3
    59d4:	3190d844 	addi	r6,r6,17249
    59d8:	39e1e9c4 	addi	r7,r7,-30809
    59dc:	000df900 	call	df90 <__muldf3>
    59e0:	01a2d874 	movhi	r6,35681
    59e4:	01cff1f4 	movhi	r7,16327
    59e8:	180b883a 	mov	r5,r3
    59ec:	31b22cc4 	addi	r6,r6,-14157
    59f0:	39e28a04 	addi	r7,r7,-30168
    59f4:	1009883a 	mov	r4,r2
    59f8:	000cb300 	call	cb30 <__adddf3>
    59fc:	8809883a 	mov	r4,r17
    5a00:	102d883a 	mov	r22,r2
    5a04:	182b883a 	mov	r21,r3
    5a08:	000f1540 	call	f154 <__floatsidf>
    5a0c:	019427f4 	movhi	r6,20639
    5a10:	01cff4f4 	movhi	r7,16339
    5a14:	1009883a 	mov	r4,r2
    5a18:	180b883a 	mov	r5,r3
    5a1c:	319e7ec4 	addi	r6,r6,31227
    5a20:	39d104c4 	addi	r7,r7,17427
    5a24:	000df900 	call	df90 <__muldf3>
    5a28:	b009883a 	mov	r4,r22
    5a2c:	a80b883a 	mov	r5,r21
    5a30:	100d883a 	mov	r6,r2
    5a34:	180f883a 	mov	r7,r3
    5a38:	000cb300 	call	cb30 <__adddf3>
    5a3c:	1009883a 	mov	r4,r2
    5a40:	180b883a 	mov	r5,r3
    5a44:	102d883a 	mov	r22,r2
    5a48:	182b883a 	mov	r21,r3
    5a4c:	000f0cc0 	call	f0cc <__fixdfsi>
    5a50:	b009883a 	mov	r4,r22
    5a54:	a80b883a 	mov	r5,r21
    5a58:	000d883a 	mov	r6,zero
    5a5c:	000f883a 	mov	r7,zero
    5a60:	d8800515 	stw	r2,20(sp)
    5a64:	000deb00 	call	deb0 <__ledf2>
    5a68:	10023116 	blt	r2,zero,6330 <_dtoa_r+0xb28>
    5a6c:	d8c00517 	ldw	r3,20(sp)
    5a70:	00800584 	movi	r2,22
    5a74:	10c21f36 	bltu	r2,r3,62f4 <_dtoa_r+0xaec>
    5a78:	180490fa 	slli	r2,r3,3
    5a7c:	00c00074 	movhi	r3,1
    5a80:	18c90904 	addi	r3,r3,9252
    5a84:	1885883a 	add	r2,r3,r2
    5a88:	11000017 	ldw	r4,0(r2)
    5a8c:	11400117 	ldw	r5,4(r2)
    5a90:	900d883a 	mov	r6,r18
    5a94:	980f883a 	mov	r7,r19
    5a98:	000ddd00 	call	ddd0 <__gedf2>
    5a9c:	0082a70e 	bge	zero,r2,653c <_dtoa_r+0xd34>
    5aa0:	d9000517 	ldw	r4,20(sp)
    5aa4:	d8000c15 	stw	zero,48(sp)
    5aa8:	213fffc4 	addi	r4,r4,-1
    5aac:	d9000515 	stw	r4,20(sp)
    5ab0:	a463c83a 	sub	r17,r20,r17
    5ab4:	8dbfffc4 	addi	r22,r17,-1
    5ab8:	b0021916 	blt	r22,zero,6320 <_dtoa_r+0xb18>
    5abc:	d8000815 	stw	zero,32(sp)
    5ac0:	d8800517 	ldw	r2,20(sp)
    5ac4:	10020e16 	blt	r2,zero,6300 <_dtoa_r+0xaf8>
    5ac8:	b0ad883a 	add	r22,r22,r2
    5acc:	d8800a15 	stw	r2,40(sp)
    5ad0:	d8000915 	stw	zero,36(sp)
    5ad4:	d8c00317 	ldw	r3,12(sp)
    5ad8:	00800244 	movi	r2,9
    5adc:	10c11a36 	bltu	r2,r3,5f48 <_dtoa_r+0x740>
    5ae0:	00800144 	movi	r2,5
    5ae4:	10c4fc0e 	bge	r2,r3,6ed8 <_dtoa_r+0x16d0>
    5ae8:	18ffff04 	addi	r3,r3,-4
    5aec:	d8c00315 	stw	r3,12(sp)
    5af0:	0029883a 	mov	r20,zero
    5af4:	d9800317 	ldw	r6,12(sp)
    5af8:	008000c4 	movi	r2,3
    5afc:	3083bd26 	beq	r6,r2,69f4 <_dtoa_r+0x11ec>
    5b00:	1183670e 	bge	r2,r6,68a0 <_dtoa_r+0x1098>
    5b04:	d8c00317 	ldw	r3,12(sp)
    5b08:	00800104 	movi	r2,4
    5b0c:	1882e726 	beq	r3,r2,66ac <_dtoa_r+0xea4>
    5b10:	00800144 	movi	r2,5
    5b14:	1884f21e 	bne	r3,r2,6ee0 <_dtoa_r+0x16d8>
    5b18:	00800044 	movi	r2,1
    5b1c:	d8800b15 	stw	r2,44(sp)
    5b20:	d8c02217 	ldw	r3,136(sp)
    5b24:	d9000517 	ldw	r4,20(sp)
    5b28:	1907883a 	add	r3,r3,r4
    5b2c:	19800044 	addi	r6,r3,1
    5b30:	d8c00d15 	stw	r3,52(sp)
    5b34:	d9800615 	stw	r6,24(sp)
    5b38:	0183c30e 	bge	zero,r6,6a48 <_dtoa_r+0x1240>
    5b3c:	d9800617 	ldw	r6,24(sp)
    5b40:	3023883a 	mov	r17,r6
    5b44:	80001115 	stw	zero,68(r16)
    5b48:	008005c4 	movi	r2,23
    5b4c:	1184f62e 	bgeu	r2,r6,6f28 <_dtoa_r+0x1720>
    5b50:	00c00044 	movi	r3,1
    5b54:	00800104 	movi	r2,4
    5b58:	1085883a 	add	r2,r2,r2
    5b5c:	11000504 	addi	r4,r2,20
    5b60:	180b883a 	mov	r5,r3
    5b64:	18c00044 	addi	r3,r3,1
    5b68:	313ffb2e 	bgeu	r6,r4,5b58 <__alt_data_end+0xfffb0428>
    5b6c:	81401115 	stw	r5,68(r16)
    5b70:	8009883a 	mov	r4,r16
    5b74:	000869c0 	call	869c <_Balloc>
    5b78:	d8800715 	stw	r2,28(sp)
    5b7c:	80801015 	stw	r2,64(r16)
    5b80:	00800384 	movi	r2,14
    5b84:	1440fd36 	bltu	r2,r17,5f7c <_dtoa_r+0x774>
    5b88:	a000fc26 	beq	r20,zero,5f7c <_dtoa_r+0x774>
    5b8c:	d8800517 	ldw	r2,20(sp)
    5b90:	0083b90e 	bge	zero,r2,6a78 <_dtoa_r+0x1270>
    5b94:	d8c00517 	ldw	r3,20(sp)
    5b98:	108003cc 	andi	r2,r2,15
    5b9c:	100490fa 	slli	r2,r2,3
    5ba0:	182fd13a 	srai	r23,r3,4
    5ba4:	00c00074 	movhi	r3,1
    5ba8:	18c90904 	addi	r3,r3,9252
    5bac:	1885883a 	add	r2,r3,r2
    5bb0:	b8c0040c 	andi	r3,r23,16
    5bb4:	12c00017 	ldw	r11,0(r2)
    5bb8:	12800117 	ldw	r10,4(r2)
    5bbc:	18039726 	beq	r3,zero,6a1c <_dtoa_r+0x1214>
    5bc0:	00800074 	movhi	r2,1
    5bc4:	1088ff04 	addi	r2,r2,9212
    5bc8:	11800817 	ldw	r6,32(r2)
    5bcc:	11c00917 	ldw	r7,36(r2)
    5bd0:	9009883a 	mov	r4,r18
    5bd4:	980b883a 	mov	r5,r19
    5bd8:	da801615 	stw	r10,88(sp)
    5bdc:	dac01515 	stw	r11,84(sp)
    5be0:	000d3cc0 	call	d3cc <__divdf3>
    5be4:	da801617 	ldw	r10,88(sp)
    5be8:	dac01517 	ldw	r11,84(sp)
    5bec:	bdc003cc 	andi	r23,r23,15
    5bf0:	044000c4 	movi	r17,3
    5bf4:	d8800e15 	stw	r2,56(sp)
    5bf8:	182b883a 	mov	r21,r3
    5bfc:	b8001126 	beq	r23,zero,5c44 <_dtoa_r+0x43c>
    5c00:	05000074 	movhi	r20,1
    5c04:	a508ff04 	addi	r20,r20,9212
    5c08:	5805883a 	mov	r2,r11
    5c0c:	5007883a 	mov	r3,r10
    5c10:	b980004c 	andi	r6,r23,1
    5c14:	1009883a 	mov	r4,r2
    5c18:	b82fd07a 	srai	r23,r23,1
    5c1c:	180b883a 	mov	r5,r3
    5c20:	30000426 	beq	r6,zero,5c34 <_dtoa_r+0x42c>
    5c24:	a1800017 	ldw	r6,0(r20)
    5c28:	a1c00117 	ldw	r7,4(r20)
    5c2c:	8c400044 	addi	r17,r17,1
    5c30:	000df900 	call	df90 <__muldf3>
    5c34:	a5000204 	addi	r20,r20,8
    5c38:	b83ff51e 	bne	r23,zero,5c10 <__alt_data_end+0xfffb04e0>
    5c3c:	1017883a 	mov	r11,r2
    5c40:	1815883a 	mov	r10,r3
    5c44:	d9000e17 	ldw	r4,56(sp)
    5c48:	a80b883a 	mov	r5,r21
    5c4c:	580d883a 	mov	r6,r11
    5c50:	500f883a 	mov	r7,r10
    5c54:	000d3cc0 	call	d3cc <__divdf3>
    5c58:	1029883a 	mov	r20,r2
    5c5c:	182b883a 	mov	r21,r3
    5c60:	d9800c17 	ldw	r6,48(sp)
    5c64:	30000626 	beq	r6,zero,5c80 <_dtoa_r+0x478>
    5c68:	a009883a 	mov	r4,r20
    5c6c:	a80b883a 	mov	r5,r21
    5c70:	000d883a 	mov	r6,zero
    5c74:	01cffc34 	movhi	r7,16368
    5c78:	000deb00 	call	deb0 <__ledf2>
    5c7c:	10043216 	blt	r2,zero,6d48 <_dtoa_r+0x1540>
    5c80:	8809883a 	mov	r4,r17
    5c84:	000f1540 	call	f154 <__floatsidf>
    5c88:	1009883a 	mov	r4,r2
    5c8c:	180b883a 	mov	r5,r3
    5c90:	a00d883a 	mov	r6,r20
    5c94:	a80f883a 	mov	r7,r21
    5c98:	000df900 	call	df90 <__muldf3>
    5c9c:	000d883a 	mov	r6,zero
    5ca0:	1009883a 	mov	r4,r2
    5ca4:	180b883a 	mov	r5,r3
    5ca8:	01d00734 	movhi	r7,16412
    5cac:	000cb300 	call	cb30 <__adddf3>
    5cb0:	1023883a 	mov	r17,r2
    5cb4:	d9800617 	ldw	r6,24(sp)
    5cb8:	00bf3034 	movhi	r2,64704
    5cbc:	1885883a 	add	r2,r3,r2
    5cc0:	d8800e15 	stw	r2,56(sp)
    5cc4:	30032e26 	beq	r6,zero,6980 <_dtoa_r+0x1178>
    5cc8:	d8c00517 	ldw	r3,20(sp)
    5ccc:	da800617 	ldw	r10,24(sp)
    5cd0:	d8c01215 	stw	r3,72(sp)
    5cd4:	d9000b17 	ldw	r4,44(sp)
    5cd8:	2003b026 	beq	r4,zero,6b9c <_dtoa_r+0x1394>
    5cdc:	50bfffc4 	addi	r2,r10,-1
    5ce0:	100490fa 	slli	r2,r2,3
    5ce4:	00c00074 	movhi	r3,1
    5ce8:	18c90904 	addi	r3,r3,9252
    5cec:	1885883a 	add	r2,r3,r2
    5cf0:	11800017 	ldw	r6,0(r2)
    5cf4:	11c00117 	ldw	r7,4(r2)
    5cf8:	d8800717 	ldw	r2,28(sp)
    5cfc:	0009883a 	mov	r4,zero
    5d00:	014ff834 	movhi	r5,16352
    5d04:	da801615 	stw	r10,88(sp)
    5d08:	15c00044 	addi	r23,r2,1
    5d0c:	000d3cc0 	call	d3cc <__divdf3>
    5d10:	d9c00e17 	ldw	r7,56(sp)
    5d14:	880d883a 	mov	r6,r17
    5d18:	1009883a 	mov	r4,r2
    5d1c:	180b883a 	mov	r5,r3
    5d20:	000e7fc0 	call	e7fc <__subdf3>
    5d24:	a80b883a 	mov	r5,r21
    5d28:	a009883a 	mov	r4,r20
    5d2c:	d8c01015 	stw	r3,64(sp)
    5d30:	d8800e15 	stw	r2,56(sp)
    5d34:	000f0cc0 	call	f0cc <__fixdfsi>
    5d38:	1009883a 	mov	r4,r2
    5d3c:	d8801715 	stw	r2,92(sp)
    5d40:	000f1540 	call	f154 <__floatsidf>
    5d44:	a009883a 	mov	r4,r20
    5d48:	a80b883a 	mov	r5,r21
    5d4c:	100d883a 	mov	r6,r2
    5d50:	180f883a 	mov	r7,r3
    5d54:	000e7fc0 	call	e7fc <__subdf3>
    5d58:	da001717 	ldw	r8,92(sp)
    5d5c:	1829883a 	mov	r20,r3
    5d60:	d8c00717 	ldw	r3,28(sp)
    5d64:	d9000e17 	ldw	r4,56(sp)
    5d68:	d9401017 	ldw	r5,64(sp)
    5d6c:	42000c04 	addi	r8,r8,48
    5d70:	1023883a 	mov	r17,r2
    5d74:	1a000005 	stb	r8,0(r3)
    5d78:	880d883a 	mov	r6,r17
    5d7c:	a00f883a 	mov	r7,r20
    5d80:	402b883a 	mov	r21,r8
    5d84:	000ddd00 	call	ddd0 <__gedf2>
    5d88:	00844516 	blt	zero,r2,6ea0 <_dtoa_r+0x1698>
    5d8c:	0009883a 	mov	r4,zero
    5d90:	014ffc34 	movhi	r5,16368
    5d94:	880d883a 	mov	r6,r17
    5d98:	a00f883a 	mov	r7,r20
    5d9c:	000e7fc0 	call	e7fc <__subdf3>
    5da0:	d9000e17 	ldw	r4,56(sp)
    5da4:	d9401017 	ldw	r5,64(sp)
    5da8:	100d883a 	mov	r6,r2
    5dac:	180f883a 	mov	r7,r3
    5db0:	000ddd00 	call	ddd0 <__gedf2>
    5db4:	da801617 	ldw	r10,88(sp)
    5db8:	00843616 	blt	zero,r2,6e94 <_dtoa_r+0x168c>
    5dbc:	00800044 	movi	r2,1
    5dc0:	12806e0e 	bge	r2,r10,5f7c <_dtoa_r+0x774>
    5dc4:	d9000717 	ldw	r4,28(sp)
    5dc8:	dd801315 	stw	r22,76(sp)
    5dcc:	dc001115 	stw	r16,68(sp)
    5dd0:	2295883a 	add	r10,r4,r10
    5dd4:	dcc01415 	stw	r19,80(sp)
    5dd8:	502d883a 	mov	r22,r10
    5ddc:	dcc01017 	ldw	r19,64(sp)
    5de0:	b821883a 	mov	r16,r23
    5de4:	dc801015 	stw	r18,64(sp)
    5de8:	dc800e17 	ldw	r18,56(sp)
    5dec:	00000906 	br	5e14 <_dtoa_r+0x60c>
    5df0:	000e7fc0 	call	e7fc <__subdf3>
    5df4:	1009883a 	mov	r4,r2
    5df8:	180b883a 	mov	r5,r3
    5dfc:	900d883a 	mov	r6,r18
    5e00:	980f883a 	mov	r7,r19
    5e04:	000deb00 	call	deb0 <__ledf2>
    5e08:	10040e16 	blt	r2,zero,6e44 <_dtoa_r+0x163c>
    5e0c:	b821883a 	mov	r16,r23
    5e10:	bd841026 	beq	r23,r22,6e54 <_dtoa_r+0x164c>
    5e14:	9009883a 	mov	r4,r18
    5e18:	980b883a 	mov	r5,r19
    5e1c:	000d883a 	mov	r6,zero
    5e20:	01d00934 	movhi	r7,16420
    5e24:	000df900 	call	df90 <__muldf3>
    5e28:	000d883a 	mov	r6,zero
    5e2c:	01d00934 	movhi	r7,16420
    5e30:	8809883a 	mov	r4,r17
    5e34:	a00b883a 	mov	r5,r20
    5e38:	1025883a 	mov	r18,r2
    5e3c:	1827883a 	mov	r19,r3
    5e40:	000df900 	call	df90 <__muldf3>
    5e44:	180b883a 	mov	r5,r3
    5e48:	1009883a 	mov	r4,r2
    5e4c:	1823883a 	mov	r17,r3
    5e50:	1029883a 	mov	r20,r2
    5e54:	000f0cc0 	call	f0cc <__fixdfsi>
    5e58:	1009883a 	mov	r4,r2
    5e5c:	102b883a 	mov	r21,r2
    5e60:	000f1540 	call	f154 <__floatsidf>
    5e64:	a009883a 	mov	r4,r20
    5e68:	880b883a 	mov	r5,r17
    5e6c:	100d883a 	mov	r6,r2
    5e70:	180f883a 	mov	r7,r3
    5e74:	000e7fc0 	call	e7fc <__subdf3>
    5e78:	ad400c04 	addi	r21,r21,48
    5e7c:	1009883a 	mov	r4,r2
    5e80:	180b883a 	mov	r5,r3
    5e84:	900d883a 	mov	r6,r18
    5e88:	980f883a 	mov	r7,r19
    5e8c:	85400005 	stb	r21,0(r16)
    5e90:	1023883a 	mov	r17,r2
    5e94:	1829883a 	mov	r20,r3
    5e98:	000deb00 	call	deb0 <__ledf2>
    5e9c:	bdc00044 	addi	r23,r23,1
    5ea0:	0009883a 	mov	r4,zero
    5ea4:	014ffc34 	movhi	r5,16368
    5ea8:	880d883a 	mov	r6,r17
    5eac:	a00f883a 	mov	r7,r20
    5eb0:	103fcf0e 	bge	r2,zero,5df0 <__alt_data_end+0xfffb06c0>
    5eb4:	d9801217 	ldw	r6,72(sp)
    5eb8:	dc001117 	ldw	r16,68(sp)
    5ebc:	d9800515 	stw	r6,20(sp)
    5ec0:	8009883a 	mov	r4,r16
    5ec4:	e00b883a 	mov	r5,fp
    5ec8:	00087440 	call	8744 <_Bfree>
    5ecc:	d8c00517 	ldw	r3,20(sp)
    5ed0:	d9002317 	ldw	r4,140(sp)
    5ed4:	d9802517 	ldw	r6,148(sp)
    5ed8:	b8000005 	stb	zero,0(r23)
    5edc:	18800044 	addi	r2,r3,1
    5ee0:	20800015 	stw	r2,0(r4)
    5ee4:	30027226 	beq	r6,zero,68b0 <_dtoa_r+0x10a8>
    5ee8:	35c00015 	stw	r23,0(r6)
    5eec:	d8800717 	ldw	r2,28(sp)
    5ef0:	003e7406 	br	58c4 <__alt_data_end+0xfffb0194>
    5ef4:	00800434 	movhi	r2,16
    5ef8:	10bfffc4 	addi	r2,r2,-1
    5efc:	a8aa703a 	and	r21,r21,r2
    5f00:	a83e801e 	bne	r21,zero,5904 <__alt_data_end+0xfffb01d4>
    5f04:	00800074 	movhi	r2,1
    5f08:	1088ea04 	addi	r2,r2,9128
    5f0c:	003e7f06 	br	590c <__alt_data_end+0xfffb01dc>
    5f10:	10c00204 	addi	r3,r2,8
    5f14:	003e8206 	br	5920 <__alt_data_end+0xfffb01f0>
    5f18:	01400434 	movhi	r5,16
    5f1c:	297fffc4 	addi	r5,r5,-1
    5f20:	994a703a 	and	r5,r19,r5
    5f24:	9009883a 	mov	r4,r18
    5f28:	8c7f0044 	addi	r17,r17,-1023
    5f2c:	294ffc34 	orhi	r5,r5,16368
    5f30:	dd000217 	ldw	r20,8(sp)
    5f34:	d8000f15 	stw	zero,60(sp)
    5f38:	003e9f06 	br	59b8 <__alt_data_end+0xfffb0288>
    5f3c:	00800074 	movhi	r2,1
    5f40:	1088e104 	addi	r2,r2,9092
    5f44:	003e5f06 	br	58c4 <__alt_data_end+0xfffb0194>
    5f48:	80001115 	stw	zero,68(r16)
    5f4c:	8009883a 	mov	r4,r16
    5f50:	000b883a 	mov	r5,zero
    5f54:	000869c0 	call	869c <_Balloc>
    5f58:	01bfffc4 	movi	r6,-1
    5f5c:	d8800715 	stw	r2,28(sp)
    5f60:	80801015 	stw	r2,64(r16)
    5f64:	00800044 	movi	r2,1
    5f68:	d9800615 	stw	r6,24(sp)
    5f6c:	d8800b15 	stw	r2,44(sp)
    5f70:	d8002215 	stw	zero,136(sp)
    5f74:	d9800d15 	stw	r6,52(sp)
    5f78:	d8000315 	stw	zero,12(sp)
    5f7c:	d8800117 	ldw	r2,4(sp)
    5f80:	10008e16 	blt	r2,zero,61bc <_dtoa_r+0x9b4>
    5f84:	d9000517 	ldw	r4,20(sp)
    5f88:	00c00384 	movi	r3,14
    5f8c:	19008b16 	blt	r3,r4,61bc <_dtoa_r+0x9b4>
    5f90:	200490fa 	slli	r2,r4,3
    5f94:	00c00074 	movhi	r3,1
    5f98:	d9802217 	ldw	r6,136(sp)
    5f9c:	18c90904 	addi	r3,r3,9252
    5fa0:	1885883a 	add	r2,r3,r2
    5fa4:	14400017 	ldw	r17,0(r2)
    5fa8:	15000117 	ldw	r20,4(r2)
    5fac:	3001c716 	blt	r6,zero,66cc <_dtoa_r+0xec4>
    5fb0:	880d883a 	mov	r6,r17
    5fb4:	a00f883a 	mov	r7,r20
    5fb8:	9009883a 	mov	r4,r18
    5fbc:	980b883a 	mov	r5,r19
    5fc0:	000d3cc0 	call	d3cc <__divdf3>
    5fc4:	180b883a 	mov	r5,r3
    5fc8:	1009883a 	mov	r4,r2
    5fcc:	000f0cc0 	call	f0cc <__fixdfsi>
    5fd0:	1009883a 	mov	r4,r2
    5fd4:	102d883a 	mov	r22,r2
    5fd8:	000f1540 	call	f154 <__floatsidf>
    5fdc:	1009883a 	mov	r4,r2
    5fe0:	180b883a 	mov	r5,r3
    5fe4:	880d883a 	mov	r6,r17
    5fe8:	a00f883a 	mov	r7,r20
    5fec:	000df900 	call	df90 <__muldf3>
    5ff0:	9009883a 	mov	r4,r18
    5ff4:	980b883a 	mov	r5,r19
    5ff8:	100d883a 	mov	r6,r2
    5ffc:	180f883a 	mov	r7,r3
    6000:	000e7fc0 	call	e7fc <__subdf3>
    6004:	d9000717 	ldw	r4,28(sp)
    6008:	d9800617 	ldw	r6,24(sp)
    600c:	180b883a 	mov	r5,r3
    6010:	b0c00c04 	addi	r3,r22,48
    6014:	20c00005 	stb	r3,0(r4)
    6018:	25c00044 	addi	r23,r4,1
    601c:	01000044 	movi	r4,1
    6020:	1011883a 	mov	r8,r2
    6024:	2807883a 	mov	r3,r5
    6028:	31003d26 	beq	r6,r4,6120 <_dtoa_r+0x918>
    602c:	000d883a 	mov	r6,zero
    6030:	01d00934 	movhi	r7,16420
    6034:	1009883a 	mov	r4,r2
    6038:	000df900 	call	df90 <__muldf3>
    603c:	1009883a 	mov	r4,r2
    6040:	180b883a 	mov	r5,r3
    6044:	000d883a 	mov	r6,zero
    6048:	000f883a 	mov	r7,zero
    604c:	1027883a 	mov	r19,r2
    6050:	182b883a 	mov	r21,r3
    6054:	000dd4c0 	call	dd4c <__eqdf2>
    6058:	103f9926 	beq	r2,zero,5ec0 <__alt_data_end+0xfffb0790>
    605c:	d8c00617 	ldw	r3,24(sp)
    6060:	d9000717 	ldw	r4,28(sp)
    6064:	b825883a 	mov	r18,r23
    6068:	18bfffc4 	addi	r2,r3,-1
    606c:	20ad883a 	add	r22,r4,r2
    6070:	dc000315 	stw	r16,12(sp)
    6074:	00000a06 	br	60a0 <_dtoa_r+0x898>
    6078:	000df900 	call	df90 <__muldf3>
    607c:	1009883a 	mov	r4,r2
    6080:	180b883a 	mov	r5,r3
    6084:	000d883a 	mov	r6,zero
    6088:	000f883a 	mov	r7,zero
    608c:	1027883a 	mov	r19,r2
    6090:	182b883a 	mov	r21,r3
    6094:	b825883a 	mov	r18,r23
    6098:	000dd4c0 	call	dd4c <__eqdf2>
    609c:	10022626 	beq	r2,zero,6938 <_dtoa_r+0x1130>
    60a0:	880d883a 	mov	r6,r17
    60a4:	a00f883a 	mov	r7,r20
    60a8:	9809883a 	mov	r4,r19
    60ac:	a80b883a 	mov	r5,r21
    60b0:	000d3cc0 	call	d3cc <__divdf3>
    60b4:	180b883a 	mov	r5,r3
    60b8:	1009883a 	mov	r4,r2
    60bc:	000f0cc0 	call	f0cc <__fixdfsi>
    60c0:	1009883a 	mov	r4,r2
    60c4:	1021883a 	mov	r16,r2
    60c8:	000f1540 	call	f154 <__floatsidf>
    60cc:	1009883a 	mov	r4,r2
    60d0:	180b883a 	mov	r5,r3
    60d4:	880d883a 	mov	r6,r17
    60d8:	a00f883a 	mov	r7,r20
    60dc:	000df900 	call	df90 <__muldf3>
    60e0:	9809883a 	mov	r4,r19
    60e4:	a80b883a 	mov	r5,r21
    60e8:	100d883a 	mov	r6,r2
    60ec:	180f883a 	mov	r7,r3
    60f0:	000e7fc0 	call	e7fc <__subdf3>
    60f4:	82000c04 	addi	r8,r16,48
    60f8:	92000005 	stb	r8,0(r18)
    60fc:	1009883a 	mov	r4,r2
    6100:	180b883a 	mov	r5,r3
    6104:	000d883a 	mov	r6,zero
    6108:	01d00934 	movhi	r7,16420
    610c:	1011883a 	mov	r8,r2
    6110:	bdc00044 	addi	r23,r23,1
    6114:	95bfd81e 	bne	r18,r22,6078 <__alt_data_end+0xfffb0948>
    6118:	802d883a 	mov	r22,r16
    611c:	dc000317 	ldw	r16,12(sp)
    6120:	4009883a 	mov	r4,r8
    6124:	180b883a 	mov	r5,r3
    6128:	400d883a 	mov	r6,r8
    612c:	180f883a 	mov	r7,r3
    6130:	000cb300 	call	cb30 <__adddf3>
    6134:	8809883a 	mov	r4,r17
    6138:	a00b883a 	mov	r5,r20
    613c:	100d883a 	mov	r6,r2
    6140:	180f883a 	mov	r7,r3
    6144:	1027883a 	mov	r19,r2
    6148:	1825883a 	mov	r18,r3
    614c:	000deb00 	call	deb0 <__ledf2>
    6150:	10000816 	blt	r2,zero,6174 <_dtoa_r+0x96c>
    6154:	8809883a 	mov	r4,r17
    6158:	a00b883a 	mov	r5,r20
    615c:	980d883a 	mov	r6,r19
    6160:	900f883a 	mov	r7,r18
    6164:	000dd4c0 	call	dd4c <__eqdf2>
    6168:	103f551e 	bne	r2,zero,5ec0 <__alt_data_end+0xfffb0790>
    616c:	b580004c 	andi	r22,r22,1
    6170:	b03f5326 	beq	r22,zero,5ec0 <__alt_data_end+0xfffb0790>
    6174:	bd7fffc3 	ldbu	r21,-1(r23)
    6178:	b8bfffc4 	addi	r2,r23,-1
    617c:	1007883a 	mov	r3,r2
    6180:	01400e44 	movi	r5,57
    6184:	d9800717 	ldw	r6,28(sp)
    6188:	00000506 	br	61a0 <_dtoa_r+0x998>
    618c:	18ffffc4 	addi	r3,r3,-1
    6190:	30825e26 	beq	r6,r2,6b0c <_dtoa_r+0x1304>
    6194:	1d400003 	ldbu	r21,0(r3)
    6198:	102f883a 	mov	r23,r2
    619c:	10bfffc4 	addi	r2,r2,-1
    61a0:	a9003fcc 	andi	r4,r21,255
    61a4:	2100201c 	xori	r4,r4,128
    61a8:	213fe004 	addi	r4,r4,-128
    61ac:	217ff726 	beq	r4,r5,618c <__alt_data_end+0xfffb0a5c>
    61b0:	aa000044 	addi	r8,r21,1
    61b4:	12000005 	stb	r8,0(r2)
    61b8:	003f4106 	br	5ec0 <__alt_data_end+0xfffb0790>
    61bc:	d8c00b17 	ldw	r3,44(sp)
    61c0:	18006726 	beq	r3,zero,6360 <_dtoa_r+0xb58>
    61c4:	d9000317 	ldw	r4,12(sp)
    61c8:	00c00044 	movi	r3,1
    61cc:	19016a0e 	bge	r3,r4,6778 <_dtoa_r+0xf70>
    61d0:	d8800617 	ldw	r2,24(sp)
    61d4:	d8c00917 	ldw	r3,36(sp)
    61d8:	157fffc4 	addi	r21,r2,-1
    61dc:	1d420716 	blt	r3,r21,69fc <_dtoa_r+0x11f4>
    61e0:	1d6bc83a 	sub	r21,r3,r21
    61e4:	d8800617 	ldw	r2,24(sp)
    61e8:	1002c716 	blt	r2,zero,6d08 <_dtoa_r+0x1500>
    61ec:	dd000817 	ldw	r20,32(sp)
    61f0:	d8800617 	ldw	r2,24(sp)
    61f4:	d9800817 	ldw	r6,32(sp)
    61f8:	8009883a 	mov	r4,r16
    61fc:	01400044 	movi	r5,1
    6200:	308d883a 	add	r6,r6,r2
    6204:	d9800815 	stw	r6,32(sp)
    6208:	b0ad883a 	add	r22,r22,r2
    620c:	0008ac40 	call	8ac4 <__i2b>
    6210:	1023883a 	mov	r17,r2
    6214:	a0000826 	beq	r20,zero,6238 <_dtoa_r+0xa30>
    6218:	0580070e 	bge	zero,r22,6238 <_dtoa_r+0xa30>
    621c:	b005883a 	mov	r2,r22
    6220:	a5812016 	blt	r20,r22,66a4 <_dtoa_r+0xe9c>
    6224:	d8c00817 	ldw	r3,32(sp)
    6228:	a0a9c83a 	sub	r20,r20,r2
    622c:	b0adc83a 	sub	r22,r22,r2
    6230:	1887c83a 	sub	r3,r3,r2
    6234:	d8c00815 	stw	r3,32(sp)
    6238:	d9000917 	ldw	r4,36(sp)
    623c:	0100140e 	bge	zero,r4,6290 <_dtoa_r+0xa88>
    6240:	d9800b17 	ldw	r6,44(sp)
    6244:	3001e526 	beq	r6,zero,69dc <_dtoa_r+0x11d4>
    6248:	05400e0e 	bge	zero,r21,6284 <_dtoa_r+0xa7c>
    624c:	880b883a 	mov	r5,r17
    6250:	8009883a 	mov	r4,r16
    6254:	a80d883a 	mov	r6,r21
    6258:	0008d900 	call	8d90 <__pow5mult>
    625c:	e00d883a 	mov	r6,fp
    6260:	8009883a 	mov	r4,r16
    6264:	100b883a 	mov	r5,r2
    6268:	1023883a 	mov	r17,r2
    626c:	0008b000 	call	8b00 <__multiply>
    6270:	102f883a 	mov	r23,r2
    6274:	e00b883a 	mov	r5,fp
    6278:	8009883a 	mov	r4,r16
    627c:	00087440 	call	8744 <_Bfree>
    6280:	b839883a 	mov	fp,r23
    6284:	d8800917 	ldw	r2,36(sp)
    6288:	154dc83a 	sub	r6,r2,r21
    628c:	3001281e 	bne	r6,zero,6730 <_dtoa_r+0xf28>
    6290:	05c00044 	movi	r23,1
    6294:	8009883a 	mov	r4,r16
    6298:	b80b883a 	mov	r5,r23
    629c:	0008ac40 	call	8ac4 <__i2b>
    62a0:	d8c00a17 	ldw	r3,40(sp)
    62a4:	102b883a 	mov	r21,r2
    62a8:	00c0310e 	bge	zero,r3,6370 <_dtoa_r+0xb68>
    62ac:	8009883a 	mov	r4,r16
    62b0:	100b883a 	mov	r5,r2
    62b4:	180d883a 	mov	r6,r3
    62b8:	0008d900 	call	8d90 <__pow5mult>
    62bc:	d9000317 	ldw	r4,12(sp)
    62c0:	102b883a 	mov	r21,r2
    62c4:	b9011f0e 	bge	r23,r4,6744 <_dtoa_r+0xf3c>
    62c8:	0027883a 	mov	r19,zero
    62cc:	a8800417 	ldw	r2,16(r21)
    62d0:	10800104 	addi	r2,r2,4
    62d4:	1085883a 	add	r2,r2,r2
    62d8:	1085883a 	add	r2,r2,r2
    62dc:	a885883a 	add	r2,r21,r2
    62e0:	11000017 	ldw	r4,0(r2)
    62e4:	00089ac0 	call	89ac <__hi0bits>
    62e8:	00c00804 	movi	r3,32
    62ec:	1885c83a 	sub	r2,r3,r2
    62f0:	00002506 	br	6388 <_dtoa_r+0xb80>
    62f4:	01800044 	movi	r6,1
    62f8:	d9800c15 	stw	r6,48(sp)
    62fc:	003dec06 	br	5ab0 <__alt_data_end+0xfffb0380>
    6300:	d8c00817 	ldw	r3,32(sp)
    6304:	d9000517 	ldw	r4,20(sp)
    6308:	d8000a15 	stw	zero,40(sp)
    630c:	1907c83a 	sub	r3,r3,r4
    6310:	010dc83a 	sub	r6,zero,r4
    6314:	d8c00815 	stw	r3,32(sp)
    6318:	d9800915 	stw	r6,36(sp)
    631c:	003ded06 	br	5ad4 <__alt_data_end+0xfffb03a4>
    6320:	05adc83a 	sub	r22,zero,r22
    6324:	dd800815 	stw	r22,32(sp)
    6328:	002d883a 	mov	r22,zero
    632c:	003de406 	br	5ac0 <__alt_data_end+0xfffb0390>
    6330:	d9000517 	ldw	r4,20(sp)
    6334:	000f1540 	call	f154 <__floatsidf>
    6338:	1009883a 	mov	r4,r2
    633c:	180b883a 	mov	r5,r3
    6340:	b00d883a 	mov	r6,r22
    6344:	a80f883a 	mov	r7,r21
    6348:	000dd4c0 	call	dd4c <__eqdf2>
    634c:	103dc726 	beq	r2,zero,5a6c <__alt_data_end+0xfffb033c>
    6350:	d8800517 	ldw	r2,20(sp)
    6354:	10bfffc4 	addi	r2,r2,-1
    6358:	d8800515 	stw	r2,20(sp)
    635c:	003dc306 	br	5a6c <__alt_data_end+0xfffb033c>
    6360:	dd400917 	ldw	r21,36(sp)
    6364:	dd000817 	ldw	r20,32(sp)
    6368:	0023883a 	mov	r17,zero
    636c:	003fa906 	br	6214 <__alt_data_end+0xfffb0ae4>
    6370:	d9800317 	ldw	r6,12(sp)
    6374:	b981670e 	bge	r23,r6,6914 <_dtoa_r+0x110c>
    6378:	0027883a 	mov	r19,zero
    637c:	d8c00a17 	ldw	r3,40(sp)
    6380:	183fd21e 	bne	r3,zero,62cc <__alt_data_end+0xfffb0b9c>
    6384:	00800044 	movi	r2,1
    6388:	1585883a 	add	r2,r2,r22
    638c:	108007cc 	andi	r2,r2,31
    6390:	10005f26 	beq	r2,zero,6510 <_dtoa_r+0xd08>
    6394:	00c00804 	movi	r3,32
    6398:	1887c83a 	sub	r3,r3,r2
    639c:	01000104 	movi	r4,4
    63a0:	20c2dd0e 	bge	r4,r3,6f18 <_dtoa_r+0x1710>
    63a4:	d9000817 	ldw	r4,32(sp)
    63a8:	00c00704 	movi	r3,28
    63ac:	1885c83a 	sub	r2,r3,r2
    63b0:	2089883a 	add	r4,r4,r2
    63b4:	d9000815 	stw	r4,32(sp)
    63b8:	a0a9883a 	add	r20,r20,r2
    63bc:	b0ad883a 	add	r22,r22,r2
    63c0:	d8800817 	ldw	r2,32(sp)
    63c4:	0080050e 	bge	zero,r2,63dc <_dtoa_r+0xbd4>
    63c8:	e00b883a 	mov	r5,fp
    63cc:	8009883a 	mov	r4,r16
    63d0:	100d883a 	mov	r6,r2
    63d4:	0008ed00 	call	8ed0 <__lshift>
    63d8:	1039883a 	mov	fp,r2
    63dc:	0580050e 	bge	zero,r22,63f4 <_dtoa_r+0xbec>
    63e0:	a80b883a 	mov	r5,r21
    63e4:	8009883a 	mov	r4,r16
    63e8:	b00d883a 	mov	r6,r22
    63ec:	0008ed00 	call	8ed0 <__lshift>
    63f0:	102b883a 	mov	r21,r2
    63f4:	d8c00c17 	ldw	r3,48(sp)
    63f8:	1801161e 	bne	r3,zero,6854 <_dtoa_r+0x104c>
    63fc:	d8c00617 	ldw	r3,24(sp)
    6400:	00c12d0e 	bge	zero,r3,68b8 <_dtoa_r+0x10b0>
    6404:	d8c00b17 	ldw	r3,44(sp)
    6408:	1800571e 	bne	r3,zero,6568 <_dtoa_r+0xd60>
    640c:	dc800717 	ldw	r18,28(sp)
    6410:	dcc00617 	ldw	r19,24(sp)
    6414:	9029883a 	mov	r20,r18
    6418:	00000206 	br	6424 <_dtoa_r+0xc1c>
    641c:	000876c0 	call	876c <__multadd>
    6420:	1039883a 	mov	fp,r2
    6424:	e009883a 	mov	r4,fp
    6428:	a80b883a 	mov	r5,r21
    642c:	00055e00 	call	55e0 <quorem>
    6430:	10800c04 	addi	r2,r2,48
    6434:	90800005 	stb	r2,0(r18)
    6438:	94800044 	addi	r18,r18,1
    643c:	9507c83a 	sub	r3,r18,r20
    6440:	8009883a 	mov	r4,r16
    6444:	e00b883a 	mov	r5,fp
    6448:	01800284 	movi	r6,10
    644c:	000f883a 	mov	r7,zero
    6450:	1cfff216 	blt	r3,r19,641c <__alt_data_end+0xfffb0cec>
    6454:	1011883a 	mov	r8,r2
    6458:	d8800617 	ldw	r2,24(sp)
    645c:	00822e0e 	bge	zero,r2,6d18 <_dtoa_r+0x1510>
    6460:	d9000717 	ldw	r4,28(sp)
    6464:	0025883a 	mov	r18,zero
    6468:	20af883a 	add	r23,r4,r2
    646c:	e00b883a 	mov	r5,fp
    6470:	01800044 	movi	r6,1
    6474:	8009883a 	mov	r4,r16
    6478:	da001715 	stw	r8,92(sp)
    647c:	0008ed00 	call	8ed0 <__lshift>
    6480:	1009883a 	mov	r4,r2
    6484:	a80b883a 	mov	r5,r21
    6488:	1039883a 	mov	fp,r2
    648c:	00090180 	call	9018 <__mcmp>
    6490:	da001717 	ldw	r8,92(sp)
    6494:	00816e0e 	bge	zero,r2,6a50 <_dtoa_r+0x1248>
    6498:	b93fffc3 	ldbu	r4,-1(r23)
    649c:	b8bfffc4 	addi	r2,r23,-1
    64a0:	1007883a 	mov	r3,r2
    64a4:	01800e44 	movi	r6,57
    64a8:	d9c00717 	ldw	r7,28(sp)
    64ac:	00000506 	br	64c4 <_dtoa_r+0xcbc>
    64b0:	18ffffc4 	addi	r3,r3,-1
    64b4:	38811926 	beq	r7,r2,691c <_dtoa_r+0x1114>
    64b8:	19000003 	ldbu	r4,0(r3)
    64bc:	102f883a 	mov	r23,r2
    64c0:	10bfffc4 	addi	r2,r2,-1
    64c4:	21403fcc 	andi	r5,r4,255
    64c8:	2940201c 	xori	r5,r5,128
    64cc:	297fe004 	addi	r5,r5,-128
    64d0:	29bff726 	beq	r5,r6,64b0 <__alt_data_end+0xfffb0d80>
    64d4:	21000044 	addi	r4,r4,1
    64d8:	11000005 	stb	r4,0(r2)
    64dc:	8009883a 	mov	r4,r16
    64e0:	a80b883a 	mov	r5,r21
    64e4:	00087440 	call	8744 <_Bfree>
    64e8:	883e7526 	beq	r17,zero,5ec0 <__alt_data_end+0xfffb0790>
    64ec:	90000426 	beq	r18,zero,6500 <_dtoa_r+0xcf8>
    64f0:	94400326 	beq	r18,r17,6500 <_dtoa_r+0xcf8>
    64f4:	8009883a 	mov	r4,r16
    64f8:	900b883a 	mov	r5,r18
    64fc:	00087440 	call	8744 <_Bfree>
    6500:	8009883a 	mov	r4,r16
    6504:	880b883a 	mov	r5,r17
    6508:	00087440 	call	8744 <_Bfree>
    650c:	003e6c06 	br	5ec0 <__alt_data_end+0xfffb0790>
    6510:	00800704 	movi	r2,28
    6514:	d9800817 	ldw	r6,32(sp)
    6518:	a0a9883a 	add	r20,r20,r2
    651c:	b0ad883a 	add	r22,r22,r2
    6520:	308d883a 	add	r6,r6,r2
    6524:	d9800815 	stw	r6,32(sp)
    6528:	003fa506 	br	63c0 <__alt_data_end+0xfffb0c90>
    652c:	013efb84 	movi	r4,-1042
    6530:	246bc83a 	sub	r21,r4,r17
    6534:	9548983a 	sll	r4,r18,r21
    6538:	003d1806 	br	599c <__alt_data_end+0xfffb026c>
    653c:	d8000c15 	stw	zero,48(sp)
    6540:	003d5b06 	br	5ab0 <__alt_data_end+0xfffb0380>
    6544:	880b883a 	mov	r5,r17
    6548:	8009883a 	mov	r4,r16
    654c:	01800284 	movi	r6,10
    6550:	000f883a 	mov	r7,zero
    6554:	000876c0 	call	876c <__multadd>
    6558:	1023883a 	mov	r17,r2
    655c:	d8800d17 	ldw	r2,52(sp)
    6560:	0082550e 	bge	zero,r2,6eb8 <_dtoa_r+0x16b0>
    6564:	d8800615 	stw	r2,24(sp)
    6568:	0500050e 	bge	zero,r20,6580 <_dtoa_r+0xd78>
    656c:	880b883a 	mov	r5,r17
    6570:	8009883a 	mov	r4,r16
    6574:	a00d883a 	mov	r6,r20
    6578:	0008ed00 	call	8ed0 <__lshift>
    657c:	1023883a 	mov	r17,r2
    6580:	98016a1e 	bne	r19,zero,6b2c <_dtoa_r+0x1324>
    6584:	8829883a 	mov	r20,r17
    6588:	d9000617 	ldw	r4,24(sp)
    658c:	dcc00717 	ldw	r19,28(sp)
    6590:	9480004c 	andi	r18,r18,1
    6594:	20bfffc4 	addi	r2,r4,-1
    6598:	9885883a 	add	r2,r19,r2
    659c:	d8800415 	stw	r2,16(sp)
    65a0:	dc800615 	stw	r18,24(sp)
    65a4:	e009883a 	mov	r4,fp
    65a8:	a80b883a 	mov	r5,r21
    65ac:	00055e00 	call	55e0 <quorem>
    65b0:	e009883a 	mov	r4,fp
    65b4:	880b883a 	mov	r5,r17
    65b8:	102f883a 	mov	r23,r2
    65bc:	00090180 	call	9018 <__mcmp>
    65c0:	8009883a 	mov	r4,r16
    65c4:	a80b883a 	mov	r5,r21
    65c8:	a00d883a 	mov	r6,r20
    65cc:	102d883a 	mov	r22,r2
    65d0:	00090780 	call	9078 <__mdiff>
    65d4:	1007883a 	mov	r3,r2
    65d8:	10800317 	ldw	r2,12(r2)
    65dc:	bc800c04 	addi	r18,r23,48
    65e0:	1000971e 	bne	r2,zero,6840 <_dtoa_r+0x1038>
    65e4:	180b883a 	mov	r5,r3
    65e8:	e009883a 	mov	r4,fp
    65ec:	d8c01515 	stw	r3,84(sp)
    65f0:	00090180 	call	9018 <__mcmp>
    65f4:	d8c01517 	ldw	r3,84(sp)
    65f8:	8009883a 	mov	r4,r16
    65fc:	d8801515 	stw	r2,84(sp)
    6600:	180b883a 	mov	r5,r3
    6604:	00087440 	call	8744 <_Bfree>
    6608:	d8801517 	ldw	r2,84(sp)
    660c:	1000041e 	bne	r2,zero,6620 <_dtoa_r+0xe18>
    6610:	d9800317 	ldw	r6,12(sp)
    6614:	3000021e 	bne	r6,zero,6620 <_dtoa_r+0xe18>
    6618:	d8c00617 	ldw	r3,24(sp)
    661c:	18007626 	beq	r3,zero,67f8 <_dtoa_r+0xff0>
    6620:	b0005b16 	blt	r22,zero,6790 <_dtoa_r+0xf88>
    6624:	b000041e 	bne	r22,zero,6638 <_dtoa_r+0xe30>
    6628:	d9000317 	ldw	r4,12(sp)
    662c:	2000021e 	bne	r4,zero,6638 <_dtoa_r+0xe30>
    6630:	d8c00617 	ldw	r3,24(sp)
    6634:	18005626 	beq	r3,zero,6790 <_dtoa_r+0xf88>
    6638:	00814d16 	blt	zero,r2,6b70 <_dtoa_r+0x1368>
    663c:	d8c00417 	ldw	r3,16(sp)
    6640:	9d800044 	addi	r22,r19,1
    6644:	9c800005 	stb	r18,0(r19)
    6648:	b02f883a 	mov	r23,r22
    664c:	98c14c26 	beq	r19,r3,6b80 <_dtoa_r+0x1378>
    6650:	e00b883a 	mov	r5,fp
    6654:	8009883a 	mov	r4,r16
    6658:	01800284 	movi	r6,10
    665c:	000f883a 	mov	r7,zero
    6660:	000876c0 	call	876c <__multadd>
    6664:	1039883a 	mov	fp,r2
    6668:	8d006d26 	beq	r17,r20,6820 <_dtoa_r+0x1018>
    666c:	880b883a 	mov	r5,r17
    6670:	01800284 	movi	r6,10
    6674:	000f883a 	mov	r7,zero
    6678:	8009883a 	mov	r4,r16
    667c:	000876c0 	call	876c <__multadd>
    6680:	a00b883a 	mov	r5,r20
    6684:	8009883a 	mov	r4,r16
    6688:	01800284 	movi	r6,10
    668c:	000f883a 	mov	r7,zero
    6690:	1023883a 	mov	r17,r2
    6694:	000876c0 	call	876c <__multadd>
    6698:	1029883a 	mov	r20,r2
    669c:	b027883a 	mov	r19,r22
    66a0:	003fc006 	br	65a4 <__alt_data_end+0xfffb0e74>
    66a4:	a005883a 	mov	r2,r20
    66a8:	003ede06 	br	6224 <__alt_data_end+0xfffb0af4>
    66ac:	01000044 	movi	r4,1
    66b0:	d9000b15 	stw	r4,44(sp)
    66b4:	d9802217 	ldw	r6,136(sp)
    66b8:	0180dc0e 	bge	zero,r6,6a2c <_dtoa_r+0x1224>
    66bc:	3023883a 	mov	r17,r6
    66c0:	d9800d15 	stw	r6,52(sp)
    66c4:	d9800615 	stw	r6,24(sp)
    66c8:	003d1e06 	br	5b44 <__alt_data_end+0xfffb0414>
    66cc:	d8800617 	ldw	r2,24(sp)
    66d0:	00be3716 	blt	zero,r2,5fb0 <__alt_data_end+0xfffb0880>
    66d4:	1000be1e 	bne	r2,zero,69d0 <_dtoa_r+0x11c8>
    66d8:	8809883a 	mov	r4,r17
    66dc:	a00b883a 	mov	r5,r20
    66e0:	000d883a 	mov	r6,zero
    66e4:	01d00534 	movhi	r7,16404
    66e8:	000df900 	call	df90 <__muldf3>
    66ec:	1009883a 	mov	r4,r2
    66f0:	180b883a 	mov	r5,r3
    66f4:	900d883a 	mov	r6,r18
    66f8:	980f883a 	mov	r7,r19
    66fc:	000ddd00 	call	ddd0 <__gedf2>
    6700:	002b883a 	mov	r21,zero
    6704:	0023883a 	mov	r17,zero
    6708:	10007a16 	blt	r2,zero,68f4 <_dtoa_r+0x10ec>
    670c:	d9002217 	ldw	r4,136(sp)
    6710:	ddc00717 	ldw	r23,28(sp)
    6714:	0108303a 	nor	r4,zero,r4
    6718:	d9000515 	stw	r4,20(sp)
    671c:	8009883a 	mov	r4,r16
    6720:	a80b883a 	mov	r5,r21
    6724:	00087440 	call	8744 <_Bfree>
    6728:	883f751e 	bne	r17,zero,6500 <__alt_data_end+0xfffb0dd0>
    672c:	003de406 	br	5ec0 <__alt_data_end+0xfffb0790>
    6730:	e00b883a 	mov	r5,fp
    6734:	8009883a 	mov	r4,r16
    6738:	0008d900 	call	8d90 <__pow5mult>
    673c:	1039883a 	mov	fp,r2
    6740:	003ed306 	br	6290 <__alt_data_end+0xfffb0b60>
    6744:	903ee01e 	bne	r18,zero,62c8 <__alt_data_end+0xfffb0b98>
    6748:	00800434 	movhi	r2,16
    674c:	10bfffc4 	addi	r2,r2,-1
    6750:	9884703a 	and	r2,r19,r2
    6754:	103f081e 	bne	r2,zero,6378 <__alt_data_end+0xfffb0c48>
    6758:	9cdffc2c 	andhi	r19,r19,32752
    675c:	983f0626 	beq	r19,zero,6378 <__alt_data_end+0xfffb0c48>
    6760:	d8800817 	ldw	r2,32(sp)
    6764:	b5800044 	addi	r22,r22,1
    6768:	04c00044 	movi	r19,1
    676c:	10800044 	addi	r2,r2,1
    6770:	d8800815 	stw	r2,32(sp)
    6774:	003f0106 	br	637c <__alt_data_end+0xfffb0c4c>
    6778:	d9800f17 	ldw	r6,60(sp)
    677c:	30016826 	beq	r6,zero,6d20 <_dtoa_r+0x1518>
    6780:	10810cc4 	addi	r2,r2,1075
    6784:	dd400917 	ldw	r21,36(sp)
    6788:	dd000817 	ldw	r20,32(sp)
    678c:	003e9906 	br	61f4 <__alt_data_end+0xfffb0ac4>
    6790:	9011883a 	mov	r8,r18
    6794:	4007883a 	mov	r3,r8
    6798:	e02d883a 	mov	r22,fp
    679c:	0080100e 	bge	zero,r2,67e0 <_dtoa_r+0xfd8>
    67a0:	01800044 	movi	r6,1
    67a4:	8009883a 	mov	r4,r16
    67a8:	e00b883a 	mov	r5,fp
    67ac:	da001515 	stw	r8,84(sp)
    67b0:	da001715 	stw	r8,92(sp)
    67b4:	0008ed00 	call	8ed0 <__lshift>
    67b8:	1009883a 	mov	r4,r2
    67bc:	a80b883a 	mov	r5,r21
    67c0:	102d883a 	mov	r22,r2
    67c4:	00090180 	call	9018 <__mcmp>
    67c8:	d8c01517 	ldw	r3,84(sp)
    67cc:	da001717 	ldw	r8,92(sp)
    67d0:	0081a50e 	bge	zero,r2,6e68 <_dtoa_r+0x1660>
    67d4:	00800e44 	movi	r2,57
    67d8:	40817b26 	beq	r8,r2,6dc8 <_dtoa_r+0x15c0>
    67dc:	40c00044 	addi	r3,r8,1
    67e0:	8825883a 	mov	r18,r17
    67e4:	9dc00044 	addi	r23,r19,1
    67e8:	98c00005 	stb	r3,0(r19)
    67ec:	a023883a 	mov	r17,r20
    67f0:	b039883a 	mov	fp,r22
    67f4:	003f3906 	br	64dc <__alt_data_end+0xfffb0dac>
    67f8:	00800e44 	movi	r2,57
    67fc:	9011883a 	mov	r8,r18
    6800:	90817226 	beq	r18,r2,6dcc <_dtoa_r+0x15c4>
    6804:	0580010e 	bge	zero,r22,680c <_dtoa_r+0x1004>
    6808:	ba000c44 	addi	r8,r23,49
    680c:	8825883a 	mov	r18,r17
    6810:	9dc00044 	addi	r23,r19,1
    6814:	9a000005 	stb	r8,0(r19)
    6818:	a023883a 	mov	r17,r20
    681c:	003f2f06 	br	64dc <__alt_data_end+0xfffb0dac>
    6820:	880b883a 	mov	r5,r17
    6824:	8009883a 	mov	r4,r16
    6828:	01800284 	movi	r6,10
    682c:	000f883a 	mov	r7,zero
    6830:	000876c0 	call	876c <__multadd>
    6834:	1023883a 	mov	r17,r2
    6838:	1029883a 	mov	r20,r2
    683c:	003f9706 	br	669c <__alt_data_end+0xfffb0f6c>
    6840:	8009883a 	mov	r4,r16
    6844:	180b883a 	mov	r5,r3
    6848:	00087440 	call	8744 <_Bfree>
    684c:	00800044 	movi	r2,1
    6850:	003f7306 	br	6620 <__alt_data_end+0xfffb0ef0>
    6854:	e009883a 	mov	r4,fp
    6858:	a80b883a 	mov	r5,r21
    685c:	00090180 	call	9018 <__mcmp>
    6860:	103ee60e 	bge	r2,zero,63fc <__alt_data_end+0xfffb0ccc>
    6864:	8009883a 	mov	r4,r16
    6868:	e00b883a 	mov	r5,fp
    686c:	01800284 	movi	r6,10
    6870:	000f883a 	mov	r7,zero
    6874:	000876c0 	call	876c <__multadd>
    6878:	d9000517 	ldw	r4,20(sp)
    687c:	d9800b17 	ldw	r6,44(sp)
    6880:	1039883a 	mov	fp,r2
    6884:	213fffc4 	addi	r4,r4,-1
    6888:	d9000515 	stw	r4,20(sp)
    688c:	303f2d1e 	bne	r6,zero,6544 <__alt_data_end+0xfffb0e14>
    6890:	d9000d17 	ldw	r4,52(sp)
    6894:	0101780e 	bge	zero,r4,6e78 <_dtoa_r+0x1670>
    6898:	d9000615 	stw	r4,24(sp)
    689c:	003edb06 	br	640c <__alt_data_end+0xfffb0cdc>
    68a0:	00800084 	movi	r2,2
    68a4:	30818e1e 	bne	r6,r2,6ee0 <_dtoa_r+0x16d8>
    68a8:	d8000b15 	stw	zero,44(sp)
    68ac:	003f8106 	br	66b4 <__alt_data_end+0xfffb0f84>
    68b0:	d8800717 	ldw	r2,28(sp)
    68b4:	003c0306 	br	58c4 <__alt_data_end+0xfffb0194>
    68b8:	d9000317 	ldw	r4,12(sp)
    68bc:	00800084 	movi	r2,2
    68c0:	113ed00e 	bge	r2,r4,6404 <__alt_data_end+0xfffb0cd4>
    68c4:	d8c00617 	ldw	r3,24(sp)
    68c8:	183f901e 	bne	r3,zero,670c <__alt_data_end+0xfffb0fdc>
    68cc:	a80b883a 	mov	r5,r21
    68d0:	8009883a 	mov	r4,r16
    68d4:	01800144 	movi	r6,5
    68d8:	000f883a 	mov	r7,zero
    68dc:	000876c0 	call	876c <__multadd>
    68e0:	e009883a 	mov	r4,fp
    68e4:	100b883a 	mov	r5,r2
    68e8:	102b883a 	mov	r21,r2
    68ec:	00090180 	call	9018 <__mcmp>
    68f0:	00bf860e 	bge	zero,r2,670c <__alt_data_end+0xfffb0fdc>
    68f4:	d9800717 	ldw	r6,28(sp)
    68f8:	00800c44 	movi	r2,49
    68fc:	30800005 	stb	r2,0(r6)
    6900:	d8800517 	ldw	r2,20(sp)
    6904:	35c00044 	addi	r23,r6,1
    6908:	10800044 	addi	r2,r2,1
    690c:	d8800515 	stw	r2,20(sp)
    6910:	003f8206 	br	671c <__alt_data_end+0xfffb0fec>
    6914:	903e981e 	bne	r18,zero,6378 <__alt_data_end+0xfffb0c48>
    6918:	003f8b06 	br	6748 <__alt_data_end+0xfffb1018>
    691c:	d9800517 	ldw	r6,20(sp)
    6920:	d8c00717 	ldw	r3,28(sp)
    6924:	00800c44 	movi	r2,49
    6928:	31800044 	addi	r6,r6,1
    692c:	d9800515 	stw	r6,20(sp)
    6930:	18800005 	stb	r2,0(r3)
    6934:	003ee906 	br	64dc <__alt_data_end+0xfffb0dac>
    6938:	dc000317 	ldw	r16,12(sp)
    693c:	003d6006 	br	5ec0 <__alt_data_end+0xfffb0790>
    6940:	8809883a 	mov	r4,r17
    6944:	000f1540 	call	f154 <__floatsidf>
    6948:	a009883a 	mov	r4,r20
    694c:	a80b883a 	mov	r5,r21
    6950:	100d883a 	mov	r6,r2
    6954:	180f883a 	mov	r7,r3
    6958:	000df900 	call	df90 <__muldf3>
    695c:	1009883a 	mov	r4,r2
    6960:	180b883a 	mov	r5,r3
    6964:	000d883a 	mov	r6,zero
    6968:	01d00734 	movhi	r7,16412
    696c:	000cb300 	call	cb30 <__adddf3>
    6970:	1023883a 	mov	r17,r2
    6974:	00bf3034 	movhi	r2,64704
    6978:	1885883a 	add	r2,r3,r2
    697c:	d8800e15 	stw	r2,56(sp)
    6980:	a009883a 	mov	r4,r20
    6984:	a80b883a 	mov	r5,r21
    6988:	000d883a 	mov	r6,zero
    698c:	01d00534 	movhi	r7,16404
    6990:	000e7fc0 	call	e7fc <__subdf3>
    6994:	d9c00e17 	ldw	r7,56(sp)
    6998:	1009883a 	mov	r4,r2
    699c:	180b883a 	mov	r5,r3
    69a0:	880d883a 	mov	r6,r17
    69a4:	102b883a 	mov	r21,r2
    69a8:	1829883a 	mov	r20,r3
    69ac:	000ddd00 	call	ddd0 <__gedf2>
    69b0:	00807716 	blt	zero,r2,6b90 <_dtoa_r+0x1388>
    69b4:	d8800e17 	ldw	r2,56(sp)
    69b8:	a809883a 	mov	r4,r21
    69bc:	a00b883a 	mov	r5,r20
    69c0:	11e0003c 	xorhi	r7,r2,32768
    69c4:	880d883a 	mov	r6,r17
    69c8:	000deb00 	call	deb0 <__ledf2>
    69cc:	103d6b0e 	bge	r2,zero,5f7c <__alt_data_end+0xfffb084c>
    69d0:	002b883a 	mov	r21,zero
    69d4:	0023883a 	mov	r17,zero
    69d8:	003f4c06 	br	670c <__alt_data_end+0xfffb0fdc>
    69dc:	d9800917 	ldw	r6,36(sp)
    69e0:	e00b883a 	mov	r5,fp
    69e4:	8009883a 	mov	r4,r16
    69e8:	0008d900 	call	8d90 <__pow5mult>
    69ec:	1039883a 	mov	fp,r2
    69f0:	003e2706 	br	6290 <__alt_data_end+0xfffb0b60>
    69f4:	d8000b15 	stw	zero,44(sp)
    69f8:	003c4906 	br	5b20 <__alt_data_end+0xfffb03f0>
    69fc:	d9000917 	ldw	r4,36(sp)
    6a00:	d9800a17 	ldw	r6,40(sp)
    6a04:	dd400915 	stw	r21,36(sp)
    6a08:	a905c83a 	sub	r2,r21,r4
    6a0c:	308d883a 	add	r6,r6,r2
    6a10:	d9800a15 	stw	r6,40(sp)
    6a14:	002b883a 	mov	r21,zero
    6a18:	003df206 	br	61e4 <__alt_data_end+0xfffb0ab4>
    6a1c:	dc800e15 	stw	r18,56(sp)
    6a20:	982b883a 	mov	r21,r19
    6a24:	04400084 	movi	r17,2
    6a28:	003c7406 	br	5bfc <__alt_data_end+0xfffb04cc>
    6a2c:	04400044 	movi	r17,1
    6a30:	dc400d15 	stw	r17,52(sp)
    6a34:	dc400615 	stw	r17,24(sp)
    6a38:	dc402215 	stw	r17,136(sp)
    6a3c:	80001115 	stw	zero,68(r16)
    6a40:	000b883a 	mov	r5,zero
    6a44:	003c4a06 	br	5b70 <__alt_data_end+0xfffb0440>
    6a48:	3023883a 	mov	r17,r6
    6a4c:	003ffb06 	br	6a3c <__alt_data_end+0xfffb130c>
    6a50:	1000021e 	bne	r2,zero,6a5c <_dtoa_r+0x1254>
    6a54:	4200004c 	andi	r8,r8,1
    6a58:	403e8f1e 	bne	r8,zero,6498 <__alt_data_end+0xfffb0d68>
    6a5c:	01000c04 	movi	r4,48
    6a60:	00000106 	br	6a68 <_dtoa_r+0x1260>
    6a64:	102f883a 	mov	r23,r2
    6a68:	b8bfffc4 	addi	r2,r23,-1
    6a6c:	10c00007 	ldb	r3,0(r2)
    6a70:	193ffc26 	beq	r3,r4,6a64 <__alt_data_end+0xfffb1334>
    6a74:	003e9906 	br	64dc <__alt_data_end+0xfffb0dac>
    6a78:	d9000517 	ldw	r4,20(sp)
    6a7c:	012fc83a 	sub	r23,zero,r4
    6a80:	b800ad26 	beq	r23,zero,6d38 <_dtoa_r+0x1530>
    6a84:	b88003cc 	andi	r2,r23,15
    6a88:	100490fa 	slli	r2,r2,3
    6a8c:	00c00074 	movhi	r3,1
    6a90:	18c90904 	addi	r3,r3,9252
    6a94:	1885883a 	add	r2,r3,r2
    6a98:	11800017 	ldw	r6,0(r2)
    6a9c:	11c00117 	ldw	r7,4(r2)
    6aa0:	b82fd13a 	srai	r23,r23,4
    6aa4:	9009883a 	mov	r4,r18
    6aa8:	980b883a 	mov	r5,r19
    6aac:	000df900 	call	df90 <__muldf3>
    6ab0:	1029883a 	mov	r20,r2
    6ab4:	182b883a 	mov	r21,r3
    6ab8:	b800f426 	beq	r23,zero,6e8c <_dtoa_r+0x1684>
    6abc:	02000074 	movhi	r8,1
    6ac0:	4208ff04 	addi	r8,r8,9212
    6ac4:	8029883a 	mov	r20,r16
    6ac8:	04400084 	movi	r17,2
    6acc:	4021883a 	mov	r16,r8
    6ad0:	b980004c 	andi	r6,r23,1
    6ad4:	1009883a 	mov	r4,r2
    6ad8:	b82fd07a 	srai	r23,r23,1
    6adc:	180b883a 	mov	r5,r3
    6ae0:	30000426 	beq	r6,zero,6af4 <_dtoa_r+0x12ec>
    6ae4:	81800017 	ldw	r6,0(r16)
    6ae8:	81c00117 	ldw	r7,4(r16)
    6aec:	8c400044 	addi	r17,r17,1
    6af0:	000df900 	call	df90 <__muldf3>
    6af4:	84000204 	addi	r16,r16,8
    6af8:	b83ff51e 	bne	r23,zero,6ad0 <__alt_data_end+0xfffb13a0>
    6afc:	a021883a 	mov	r16,r20
    6b00:	182b883a 	mov	r21,r3
    6b04:	1029883a 	mov	r20,r2
    6b08:	003c5506 	br	5c60 <__alt_data_end+0xfffb0530>
    6b0c:	d9800517 	ldw	r6,20(sp)
    6b10:	d9000717 	ldw	r4,28(sp)
    6b14:	00c00c04 	movi	r3,48
    6b18:	31800044 	addi	r6,r6,1
    6b1c:	d9800515 	stw	r6,20(sp)
    6b20:	20c00005 	stb	r3,0(r4)
    6b24:	02000c44 	movi	r8,49
    6b28:	003da206 	br	61b4 <__alt_data_end+0xfffb0a84>
    6b2c:	89400117 	ldw	r5,4(r17)
    6b30:	8009883a 	mov	r4,r16
    6b34:	000869c0 	call	869c <_Balloc>
    6b38:	89800417 	ldw	r6,16(r17)
    6b3c:	11000304 	addi	r4,r2,12
    6b40:	89400304 	addi	r5,r17,12
    6b44:	31800084 	addi	r6,r6,2
    6b48:	318d883a 	add	r6,r6,r6
    6b4c:	318d883a 	add	r6,r6,r6
    6b50:	1027883a 	mov	r19,r2
    6b54:	00082e40 	call	82e4 <memcpy>
    6b58:	8009883a 	mov	r4,r16
    6b5c:	980b883a 	mov	r5,r19
    6b60:	01800044 	movi	r6,1
    6b64:	0008ed00 	call	8ed0 <__lshift>
    6b68:	1029883a 	mov	r20,r2
    6b6c:	003e8606 	br	6588 <__alt_data_end+0xfffb0e58>
    6b70:	00800e44 	movi	r2,57
    6b74:	90809526 	beq	r18,r2,6dcc <_dtoa_r+0x15c4>
    6b78:	92000044 	addi	r8,r18,1
    6b7c:	003f2306 	br	680c <__alt_data_end+0xfffb10dc>
    6b80:	9011883a 	mov	r8,r18
    6b84:	8825883a 	mov	r18,r17
    6b88:	a023883a 	mov	r17,r20
    6b8c:	003e3706 	br	646c <__alt_data_end+0xfffb0d3c>
    6b90:	002b883a 	mov	r21,zero
    6b94:	0023883a 	mov	r17,zero
    6b98:	003f5606 	br	68f4 <__alt_data_end+0xfffb11c4>
    6b9c:	51bfffc4 	addi	r6,r10,-1
    6ba0:	300490fa 	slli	r2,r6,3
    6ba4:	00c00074 	movhi	r3,1
    6ba8:	18c90904 	addi	r3,r3,9252
    6bac:	1885883a 	add	r2,r3,r2
    6bb0:	d9c00e17 	ldw	r7,56(sp)
    6bb4:	11000017 	ldw	r4,0(r2)
    6bb8:	11400117 	ldw	r5,4(r2)
    6bbc:	d8800717 	ldw	r2,28(sp)
    6bc0:	d9801015 	stw	r6,64(sp)
    6bc4:	880d883a 	mov	r6,r17
    6bc8:	da801615 	stw	r10,88(sp)
    6bcc:	15c00044 	addi	r23,r2,1
    6bd0:	000df900 	call	df90 <__muldf3>
    6bd4:	a80b883a 	mov	r5,r21
    6bd8:	a009883a 	mov	r4,r20
    6bdc:	d8c01115 	stw	r3,68(sp)
    6be0:	d8800e15 	stw	r2,56(sp)
    6be4:	000f0cc0 	call	f0cc <__fixdfsi>
    6be8:	1009883a 	mov	r4,r2
    6bec:	1023883a 	mov	r17,r2
    6bf0:	000f1540 	call	f154 <__floatsidf>
    6bf4:	a009883a 	mov	r4,r20
    6bf8:	a80b883a 	mov	r5,r21
    6bfc:	100d883a 	mov	r6,r2
    6c00:	180f883a 	mov	r7,r3
    6c04:	000e7fc0 	call	e7fc <__subdf3>
    6c08:	1813883a 	mov	r9,r3
    6c0c:	d8c00717 	ldw	r3,28(sp)
    6c10:	8c400c04 	addi	r17,r17,48
    6c14:	1011883a 	mov	r8,r2
    6c18:	1c400005 	stb	r17,0(r3)
    6c1c:	da801617 	ldw	r10,88(sp)
    6c20:	00800044 	movi	r2,1
    6c24:	50802326 	beq	r10,r2,6cb4 <_dtoa_r+0x14ac>
    6c28:	d8800717 	ldw	r2,28(sp)
    6c2c:	b82b883a 	mov	r21,r23
    6c30:	dc001315 	stw	r16,76(sp)
    6c34:	12a9883a 	add	r20,r2,r10
    6c38:	4807883a 	mov	r3,r9
    6c3c:	4005883a 	mov	r2,r8
    6c40:	dc801415 	stw	r18,80(sp)
    6c44:	000d883a 	mov	r6,zero
    6c48:	01d00934 	movhi	r7,16420
    6c4c:	1009883a 	mov	r4,r2
    6c50:	180b883a 	mov	r5,r3
    6c54:	000df900 	call	df90 <__muldf3>
    6c58:	180b883a 	mov	r5,r3
    6c5c:	1009883a 	mov	r4,r2
    6c60:	1821883a 	mov	r16,r3
    6c64:	1025883a 	mov	r18,r2
    6c68:	000f0cc0 	call	f0cc <__fixdfsi>
    6c6c:	1009883a 	mov	r4,r2
    6c70:	1023883a 	mov	r17,r2
    6c74:	000f1540 	call	f154 <__floatsidf>
    6c78:	9009883a 	mov	r4,r18
    6c7c:	800b883a 	mov	r5,r16
    6c80:	100d883a 	mov	r6,r2
    6c84:	180f883a 	mov	r7,r3
    6c88:	8c400c04 	addi	r17,r17,48
    6c8c:	000e7fc0 	call	e7fc <__subdf3>
    6c90:	ad400044 	addi	r21,r21,1
    6c94:	ac7fffc5 	stb	r17,-1(r21)
    6c98:	ad3fea1e 	bne	r21,r20,6c44 <__alt_data_end+0xfffb1514>
    6c9c:	1813883a 	mov	r9,r3
    6ca0:	d8c01017 	ldw	r3,64(sp)
    6ca4:	dc001317 	ldw	r16,76(sp)
    6ca8:	dc801417 	ldw	r18,80(sp)
    6cac:	1011883a 	mov	r8,r2
    6cb0:	b8ef883a 	add	r23,r23,r3
    6cb4:	d9000e17 	ldw	r4,56(sp)
    6cb8:	d9401117 	ldw	r5,68(sp)
    6cbc:	000d883a 	mov	r6,zero
    6cc0:	01cff834 	movhi	r7,16352
    6cc4:	da001715 	stw	r8,92(sp)
    6cc8:	da401515 	stw	r9,84(sp)
    6ccc:	000cb300 	call	cb30 <__adddf3>
    6cd0:	da001717 	ldw	r8,92(sp)
    6cd4:	da401517 	ldw	r9,84(sp)
    6cd8:	1009883a 	mov	r4,r2
    6cdc:	400d883a 	mov	r6,r8
    6ce0:	480f883a 	mov	r7,r9
    6ce4:	180b883a 	mov	r5,r3
    6ce8:	000deb00 	call	deb0 <__ledf2>
    6cec:	da001717 	ldw	r8,92(sp)
    6cf0:	da401517 	ldw	r9,84(sp)
    6cf4:	10003b0e 	bge	r2,zero,6de4 <_dtoa_r+0x15dc>
    6cf8:	d9001217 	ldw	r4,72(sp)
    6cfc:	bd7fffc3 	ldbu	r21,-1(r23)
    6d00:	d9000515 	stw	r4,20(sp)
    6d04:	003d1c06 	br	6178 <__alt_data_end+0xfffb0a48>
    6d08:	d8c00817 	ldw	r3,32(sp)
    6d0c:	18a9c83a 	sub	r20,r3,r2
    6d10:	0005883a 	mov	r2,zero
    6d14:	003d3706 	br	61f4 <__alt_data_end+0xfffb0ac4>
    6d18:	00800044 	movi	r2,1
    6d1c:	003dd006 	br	6460 <__alt_data_end+0xfffb0d30>
    6d20:	d8c00217 	ldw	r3,8(sp)
    6d24:	00800d84 	movi	r2,54
    6d28:	dd400917 	ldw	r21,36(sp)
    6d2c:	10c5c83a 	sub	r2,r2,r3
    6d30:	dd000817 	ldw	r20,32(sp)
    6d34:	003d2f06 	br	61f4 <__alt_data_end+0xfffb0ac4>
    6d38:	9029883a 	mov	r20,r18
    6d3c:	982b883a 	mov	r21,r19
    6d40:	04400084 	movi	r17,2
    6d44:	003bc606 	br	5c60 <__alt_data_end+0xfffb0530>
    6d48:	d8800617 	ldw	r2,24(sp)
    6d4c:	103efc26 	beq	r2,zero,6940 <__alt_data_end+0xfffb1210>
    6d50:	d8c00d17 	ldw	r3,52(sp)
    6d54:	00fc890e 	bge	zero,r3,5f7c <__alt_data_end+0xfffb084c>
    6d58:	a80b883a 	mov	r5,r21
    6d5c:	a009883a 	mov	r4,r20
    6d60:	000d883a 	mov	r6,zero
    6d64:	01d00934 	movhi	r7,16420
    6d68:	000df900 	call	df90 <__muldf3>
    6d6c:	89000044 	addi	r4,r17,1
    6d70:	1029883a 	mov	r20,r2
    6d74:	182b883a 	mov	r21,r3
    6d78:	000f1540 	call	f154 <__floatsidf>
    6d7c:	a009883a 	mov	r4,r20
    6d80:	a80b883a 	mov	r5,r21
    6d84:	100d883a 	mov	r6,r2
    6d88:	180f883a 	mov	r7,r3
    6d8c:	000df900 	call	df90 <__muldf3>
    6d90:	1009883a 	mov	r4,r2
    6d94:	180b883a 	mov	r5,r3
    6d98:	000d883a 	mov	r6,zero
    6d9c:	01d00734 	movhi	r7,16412
    6da0:	000cb300 	call	cb30 <__adddf3>
    6da4:	d9000517 	ldw	r4,20(sp)
    6da8:	1023883a 	mov	r17,r2
    6dac:	00bf3034 	movhi	r2,64704
    6db0:	213fffc4 	addi	r4,r4,-1
    6db4:	1885883a 	add	r2,r3,r2
    6db8:	d9001215 	stw	r4,72(sp)
    6dbc:	d8800e15 	stw	r2,56(sp)
    6dc0:	da800d17 	ldw	r10,52(sp)
    6dc4:	003bc306 	br	5cd4 <__alt_data_end+0xfffb05a4>
    6dc8:	b039883a 	mov	fp,r22
    6dcc:	01000e44 	movi	r4,57
    6dd0:	8825883a 	mov	r18,r17
    6dd4:	9dc00044 	addi	r23,r19,1
    6dd8:	99000005 	stb	r4,0(r19)
    6ddc:	a023883a 	mov	r17,r20
    6de0:	003dae06 	br	649c <__alt_data_end+0xfffb0d6c>
    6de4:	d9800e17 	ldw	r6,56(sp)
    6de8:	d9c01117 	ldw	r7,68(sp)
    6dec:	0009883a 	mov	r4,zero
    6df0:	014ff834 	movhi	r5,16352
    6df4:	da001715 	stw	r8,92(sp)
    6df8:	da401515 	stw	r9,84(sp)
    6dfc:	000e7fc0 	call	e7fc <__subdf3>
    6e00:	da001717 	ldw	r8,92(sp)
    6e04:	da401517 	ldw	r9,84(sp)
    6e08:	1009883a 	mov	r4,r2
    6e0c:	180b883a 	mov	r5,r3
    6e10:	400d883a 	mov	r6,r8
    6e14:	480f883a 	mov	r7,r9
    6e18:	000ddd00 	call	ddd0 <__gedf2>
    6e1c:	00bc570e 	bge	zero,r2,5f7c <__alt_data_end+0xfffb084c>
    6e20:	01000c04 	movi	r4,48
    6e24:	00000106 	br	6e2c <_dtoa_r+0x1624>
    6e28:	102f883a 	mov	r23,r2
    6e2c:	b8bfffc4 	addi	r2,r23,-1
    6e30:	10c00007 	ldb	r3,0(r2)
    6e34:	193ffc26 	beq	r3,r4,6e28 <__alt_data_end+0xfffb16f8>
    6e38:	d9801217 	ldw	r6,72(sp)
    6e3c:	d9800515 	stw	r6,20(sp)
    6e40:	003c1f06 	br	5ec0 <__alt_data_end+0xfffb0790>
    6e44:	d8801217 	ldw	r2,72(sp)
    6e48:	dc001117 	ldw	r16,68(sp)
    6e4c:	d8800515 	stw	r2,20(sp)
    6e50:	003cc906 	br	6178 <__alt_data_end+0xfffb0a48>
    6e54:	dd801317 	ldw	r22,76(sp)
    6e58:	dc001117 	ldw	r16,68(sp)
    6e5c:	dcc01417 	ldw	r19,80(sp)
    6e60:	dc801017 	ldw	r18,64(sp)
    6e64:	003c4506 	br	5f7c <__alt_data_end+0xfffb084c>
    6e68:	103e5d1e 	bne	r2,zero,67e0 <__alt_data_end+0xfffb10b0>
    6e6c:	4080004c 	andi	r2,r8,1
    6e70:	103e5b26 	beq	r2,zero,67e0 <__alt_data_end+0xfffb10b0>
    6e74:	003e5706 	br	67d4 <__alt_data_end+0xfffb10a4>
    6e78:	d8c00317 	ldw	r3,12(sp)
    6e7c:	00800084 	movi	r2,2
    6e80:	10c00a16 	blt	r2,r3,6eac <_dtoa_r+0x16a4>
    6e84:	d9000d17 	ldw	r4,52(sp)
    6e88:	003e8306 	br	6898 <__alt_data_end+0xfffb1168>
    6e8c:	04400084 	movi	r17,2
    6e90:	003b7306 	br	5c60 <__alt_data_end+0xfffb0530>
    6e94:	d9801217 	ldw	r6,72(sp)
    6e98:	d9800515 	stw	r6,20(sp)
    6e9c:	003cb606 	br	6178 <__alt_data_end+0xfffb0a48>
    6ea0:	d9001217 	ldw	r4,72(sp)
    6ea4:	d9000515 	stw	r4,20(sp)
    6ea8:	003c0506 	br	5ec0 <__alt_data_end+0xfffb0790>
    6eac:	d9800d17 	ldw	r6,52(sp)
    6eb0:	d9800615 	stw	r6,24(sp)
    6eb4:	003e8306 	br	68c4 <__alt_data_end+0xfffb1194>
    6eb8:	d9800317 	ldw	r6,12(sp)
    6ebc:	00800084 	movi	r2,2
    6ec0:	11800216 	blt	r2,r6,6ecc <_dtoa_r+0x16c4>
    6ec4:	d8800d17 	ldw	r2,52(sp)
    6ec8:	003da606 	br	6564 <__alt_data_end+0xfffb0e34>
    6ecc:	d8800d17 	ldw	r2,52(sp)
    6ed0:	d8800615 	stw	r2,24(sp)
    6ed4:	003e7b06 	br	68c4 <__alt_data_end+0xfffb1194>
    6ed8:	05000044 	movi	r20,1
    6edc:	003b0506 	br	5af4 <__alt_data_end+0xfffb03c4>
    6ee0:	8009883a 	mov	r4,r16
    6ee4:	80001115 	stw	zero,68(r16)
    6ee8:	000b883a 	mov	r5,zero
    6eec:	000869c0 	call	869c <_Balloc>
    6ef0:	d8800715 	stw	r2,28(sp)
    6ef4:	d8c00717 	ldw	r3,28(sp)
    6ef8:	00bfffc4 	movi	r2,-1
    6efc:	01000044 	movi	r4,1
    6f00:	d8800615 	stw	r2,24(sp)
    6f04:	80c01015 	stw	r3,64(r16)
    6f08:	d9000b15 	stw	r4,44(sp)
    6f0c:	d8002215 	stw	zero,136(sp)
    6f10:	d8800d15 	stw	r2,52(sp)
    6f14:	003c1906 	br	5f7c <__alt_data_end+0xfffb084c>
    6f18:	193d2926 	beq	r3,r4,63c0 <__alt_data_end+0xfffb0c90>
    6f1c:	00c00f04 	movi	r3,60
    6f20:	1885c83a 	sub	r2,r3,r2
    6f24:	003d7b06 	br	6514 <__alt_data_end+0xfffb0de4>
    6f28:	000b883a 	mov	r5,zero
    6f2c:	003b1006 	br	5b70 <__alt_data_end+0xfffb0440>

00006f30 <_fflush_r>:
    6f30:	defffb04 	addi	sp,sp,-20
    6f34:	dcc00315 	stw	r19,12(sp)
    6f38:	dc000015 	stw	r16,0(sp)
    6f3c:	dfc00415 	stw	ra,16(sp)
    6f40:	dc800215 	stw	r18,8(sp)
    6f44:	dc400115 	stw	r17,4(sp)
    6f48:	2027883a 	mov	r19,r4
    6f4c:	2821883a 	mov	r16,r5
    6f50:	20000226 	beq	r4,zero,6f5c <_fflush_r+0x2c>
    6f54:	20800e17 	ldw	r2,56(r4)
    6f58:	10005326 	beq	r2,zero,70a8 <_fflush_r+0x178>
    6f5c:	8080030b 	ldhu	r2,12(r16)
    6f60:	10ffffcc 	andi	r3,r2,65535
    6f64:	18e0001c 	xori	r3,r3,32768
    6f68:	18e00004 	addi	r3,r3,-32768
    6f6c:	18002c26 	beq	r3,zero,7020 <_fflush_r+0xf0>
    6f70:	10c0020c 	andi	r3,r2,8
    6f74:	1800321e 	bne	r3,zero,7040 <_fflush_r+0x110>
    6f78:	80c00117 	ldw	r3,4(r16)
    6f7c:	10820014 	ori	r2,r2,2048
    6f80:	8080030d 	sth	r2,12(r16)
    6f84:	00c0570e 	bge	zero,r3,70e4 <_fflush_r+0x1b4>
    6f88:	82000a17 	ldw	r8,40(r16)
    6f8c:	40002426 	beq	r8,zero,7020 <_fflush_r+0xf0>
    6f90:	9c400017 	ldw	r17,0(r19)
    6f94:	10c4000c 	andi	r3,r2,4096
    6f98:	98000015 	stw	zero,0(r19)
    6f9c:	18004626 	beq	r3,zero,70b8 <_fflush_r+0x188>
    6fa0:	81801417 	ldw	r6,80(r16)
    6fa4:	10c0010c 	andi	r3,r2,4
    6fa8:	18000626 	beq	r3,zero,6fc4 <_fflush_r+0x94>
    6fac:	80c00117 	ldw	r3,4(r16)
    6fb0:	80800c17 	ldw	r2,48(r16)
    6fb4:	30cdc83a 	sub	r6,r6,r3
    6fb8:	10000226 	beq	r2,zero,6fc4 <_fflush_r+0x94>
    6fbc:	80800f17 	ldw	r2,60(r16)
    6fc0:	308dc83a 	sub	r6,r6,r2
    6fc4:	81400717 	ldw	r5,28(r16)
    6fc8:	9809883a 	mov	r4,r19
    6fcc:	000f883a 	mov	r7,zero
    6fd0:	403ee83a 	callr	r8
    6fd4:	00ffffc4 	movi	r3,-1
    6fd8:	10c04526 	beq	r2,r3,70f0 <_fflush_r+0x1c0>
    6fdc:	80c0030b 	ldhu	r3,12(r16)
    6fe0:	81000417 	ldw	r4,16(r16)
    6fe4:	80000115 	stw	zero,4(r16)
    6fe8:	197dffcc 	andi	r5,r3,63487
    6fec:	8140030d 	sth	r5,12(r16)
    6ff0:	81000015 	stw	r4,0(r16)
    6ff4:	18c4000c 	andi	r3,r3,4096
    6ff8:	18000126 	beq	r3,zero,7000 <_fflush_r+0xd0>
    6ffc:	80801415 	stw	r2,80(r16)
    7000:	81400c17 	ldw	r5,48(r16)
    7004:	9c400015 	stw	r17,0(r19)
    7008:	28000526 	beq	r5,zero,7020 <_fflush_r+0xf0>
    700c:	80801004 	addi	r2,r16,64
    7010:	28800226 	beq	r5,r2,701c <_fflush_r+0xec>
    7014:	9809883a 	mov	r4,r19
    7018:	00076600 	call	7660 <_free_r>
    701c:	80000c15 	stw	zero,48(r16)
    7020:	0005883a 	mov	r2,zero
    7024:	dfc00417 	ldw	ra,16(sp)
    7028:	dcc00317 	ldw	r19,12(sp)
    702c:	dc800217 	ldw	r18,8(sp)
    7030:	dc400117 	ldw	r17,4(sp)
    7034:	dc000017 	ldw	r16,0(sp)
    7038:	dec00504 	addi	sp,sp,20
    703c:	f800283a 	ret
    7040:	84800417 	ldw	r18,16(r16)
    7044:	903ff626 	beq	r18,zero,7020 <__alt_data_end+0xfffb18f0>
    7048:	84400017 	ldw	r17,0(r16)
    704c:	108000cc 	andi	r2,r2,3
    7050:	84800015 	stw	r18,0(r16)
    7054:	8ca3c83a 	sub	r17,r17,r18
    7058:	10001526 	beq	r2,zero,70b0 <_fflush_r+0x180>
    705c:	0005883a 	mov	r2,zero
    7060:	80800215 	stw	r2,8(r16)
    7064:	04400316 	blt	zero,r17,7074 <_fflush_r+0x144>
    7068:	003fed06 	br	7020 <__alt_data_end+0xfffb18f0>
    706c:	90a5883a 	add	r18,r18,r2
    7070:	047feb0e 	bge	zero,r17,7020 <__alt_data_end+0xfffb18f0>
    7074:	80800917 	ldw	r2,36(r16)
    7078:	81400717 	ldw	r5,28(r16)
    707c:	880f883a 	mov	r7,r17
    7080:	900d883a 	mov	r6,r18
    7084:	9809883a 	mov	r4,r19
    7088:	103ee83a 	callr	r2
    708c:	88a3c83a 	sub	r17,r17,r2
    7090:	00bff616 	blt	zero,r2,706c <__alt_data_end+0xfffb193c>
    7094:	80c0030b 	ldhu	r3,12(r16)
    7098:	00bfffc4 	movi	r2,-1
    709c:	18c01014 	ori	r3,r3,64
    70a0:	80c0030d 	sth	r3,12(r16)
    70a4:	003fdf06 	br	7024 <__alt_data_end+0xfffb18f4>
    70a8:	00074ec0 	call	74ec <__sinit>
    70ac:	003fab06 	br	6f5c <__alt_data_end+0xfffb182c>
    70b0:	80800517 	ldw	r2,20(r16)
    70b4:	003fea06 	br	7060 <__alt_data_end+0xfffb1930>
    70b8:	81400717 	ldw	r5,28(r16)
    70bc:	000d883a 	mov	r6,zero
    70c0:	9809883a 	mov	r4,r19
    70c4:	01c00044 	movi	r7,1
    70c8:	403ee83a 	callr	r8
    70cc:	100d883a 	mov	r6,r2
    70d0:	00bfffc4 	movi	r2,-1
    70d4:	30801326 	beq	r6,r2,7124 <_fflush_r+0x1f4>
    70d8:	8080030b 	ldhu	r2,12(r16)
    70dc:	82000a17 	ldw	r8,40(r16)
    70e0:	003fb006 	br	6fa4 <__alt_data_end+0xfffb1874>
    70e4:	80c00f17 	ldw	r3,60(r16)
    70e8:	00ffa716 	blt	zero,r3,6f88 <__alt_data_end+0xfffb1858>
    70ec:	003fcc06 	br	7020 <__alt_data_end+0xfffb18f0>
    70f0:	98c00017 	ldw	r3,0(r19)
    70f4:	183fb926 	beq	r3,zero,6fdc <__alt_data_end+0xfffb18ac>
    70f8:	01000744 	movi	r4,29
    70fc:	19000226 	beq	r3,r4,7108 <_fflush_r+0x1d8>
    7100:	01000584 	movi	r4,22
    7104:	1900101e 	bne	r3,r4,7148 <_fflush_r+0x218>
    7108:	8080030b 	ldhu	r2,12(r16)
    710c:	80c00417 	ldw	r3,16(r16)
    7110:	80000115 	stw	zero,4(r16)
    7114:	10bdffcc 	andi	r2,r2,63487
    7118:	8080030d 	sth	r2,12(r16)
    711c:	80c00015 	stw	r3,0(r16)
    7120:	003fb706 	br	7000 <__alt_data_end+0xfffb18d0>
    7124:	98800017 	ldw	r2,0(r19)
    7128:	103feb26 	beq	r2,zero,70d8 <__alt_data_end+0xfffb19a8>
    712c:	00c00744 	movi	r3,29
    7130:	10c00226 	beq	r2,r3,713c <_fflush_r+0x20c>
    7134:	00c00584 	movi	r3,22
    7138:	10ffd61e 	bne	r2,r3,7094 <__alt_data_end+0xfffb1964>
    713c:	9c400015 	stw	r17,0(r19)
    7140:	0005883a 	mov	r2,zero
    7144:	003fb706 	br	7024 <__alt_data_end+0xfffb18f4>
    7148:	80c0030b 	ldhu	r3,12(r16)
    714c:	18c01014 	ori	r3,r3,64
    7150:	80c0030d 	sth	r3,12(r16)
    7154:	003fb306 	br	7024 <__alt_data_end+0xfffb18f4>

00007158 <fflush>:
    7158:	20000526 	beq	r4,zero,7170 <fflush+0x18>
    715c:	00800074 	movhi	r2,1
    7160:	10903e04 	addi	r2,r2,16632
    7164:	200b883a 	mov	r5,r4
    7168:	11000017 	ldw	r4,0(r2)
    716c:	0006f301 	jmpi	6f30 <_fflush_r>
    7170:	00800074 	movhi	r2,1
    7174:	10903d04 	addi	r2,r2,16628
    7178:	11000017 	ldw	r4,0(r2)
    717c:	01400034 	movhi	r5,0
    7180:	295bcc04 	addi	r5,r5,28464
    7184:	0007eac1 	jmpi	7eac <_fwalk_reent>

00007188 <__fp_lock>:
    7188:	0005883a 	mov	r2,zero
    718c:	f800283a 	ret

00007190 <__fp_unlock>:
    7190:	0005883a 	mov	r2,zero
    7194:	f800283a 	ret

00007198 <_cleanup_r>:
    7198:	01400074 	movhi	r5,1
    719c:	296daf04 	addi	r5,r5,-18756
    71a0:	0007df41 	jmpi	7df4 <_fwalk>

000071a4 <__sinit.part.1>:
    71a4:	defff604 	addi	sp,sp,-40
    71a8:	00c00034 	movhi	r3,0
    71ac:	dfc00915 	stw	ra,36(sp)
    71b0:	df000815 	stw	fp,32(sp)
    71b4:	ddc00715 	stw	r23,28(sp)
    71b8:	dd800615 	stw	r22,24(sp)
    71bc:	dd400515 	stw	r21,20(sp)
    71c0:	dd000415 	stw	r20,16(sp)
    71c4:	dcc00315 	stw	r19,12(sp)
    71c8:	dc800215 	stw	r18,8(sp)
    71cc:	dc400115 	stw	r17,4(sp)
    71d0:	dc000015 	stw	r16,0(sp)
    71d4:	18dc6604 	addi	r3,r3,29080
    71d8:	24000117 	ldw	r16,4(r4)
    71dc:	20c00f15 	stw	r3,60(r4)
    71e0:	07000044 	movi	fp,1
    71e4:	00c000c4 	movi	r3,3
    71e8:	2080bb04 	addi	r2,r4,748
    71ec:	20c0b915 	stw	r3,740(r4)
    71f0:	27000e15 	stw	fp,56(r4)
    71f4:	2080ba15 	stw	r2,744(r4)
    71f8:	2000b815 	stw	zero,736(r4)
    71fc:	05c00204 	movi	r23,8
    7200:	00800104 	movi	r2,4
    7204:	2025883a 	mov	r18,r4
    7208:	b80d883a 	mov	r6,r23
    720c:	81001704 	addi	r4,r16,92
    7210:	000b883a 	mov	r5,zero
    7214:	80000015 	stw	zero,0(r16)
    7218:	80000115 	stw	zero,4(r16)
    721c:	80000215 	stw	zero,8(r16)
    7220:	8080030d 	sth	r2,12(r16)
    7224:	80001915 	stw	zero,100(r16)
    7228:	8000038d 	sth	zero,14(r16)
    722c:	80000415 	stw	zero,16(r16)
    7230:	80000515 	stw	zero,20(r16)
    7234:	80000615 	stw	zero,24(r16)
    7238:	00085780 	call	8578 <memset>
    723c:	05800074 	movhi	r22,1
    7240:	94400217 	ldw	r17,8(r18)
    7244:	05400074 	movhi	r21,1
    7248:	05000074 	movhi	r20,1
    724c:	04c00074 	movhi	r19,1
    7250:	b5a73e04 	addi	r22,r22,-25352
    7254:	ad675504 	addi	r21,r21,-25260
    7258:	a5277404 	addi	r20,r20,-25136
    725c:	9ce78b04 	addi	r19,r19,-25044
    7260:	85800815 	stw	r22,32(r16)
    7264:	85400915 	stw	r21,36(r16)
    7268:	85000a15 	stw	r20,40(r16)
    726c:	84c00b15 	stw	r19,44(r16)
    7270:	84000715 	stw	r16,28(r16)
    7274:	00800284 	movi	r2,10
    7278:	89001704 	addi	r4,r17,92
    727c:	b80d883a 	mov	r6,r23
    7280:	000b883a 	mov	r5,zero
    7284:	88000015 	stw	zero,0(r17)
    7288:	88000115 	stw	zero,4(r17)
    728c:	88000215 	stw	zero,8(r17)
    7290:	8880030d 	sth	r2,12(r17)
    7294:	88001915 	stw	zero,100(r17)
    7298:	8f00038d 	sth	fp,14(r17)
    729c:	88000415 	stw	zero,16(r17)
    72a0:	88000515 	stw	zero,20(r17)
    72a4:	88000615 	stw	zero,24(r17)
    72a8:	00085780 	call	8578 <memset>
    72ac:	94000317 	ldw	r16,12(r18)
    72b0:	00800484 	movi	r2,18
    72b4:	8c400715 	stw	r17,28(r17)
    72b8:	8d800815 	stw	r22,32(r17)
    72bc:	8d400915 	stw	r21,36(r17)
    72c0:	8d000a15 	stw	r20,40(r17)
    72c4:	8cc00b15 	stw	r19,44(r17)
    72c8:	8080030d 	sth	r2,12(r16)
    72cc:	00800084 	movi	r2,2
    72d0:	80000015 	stw	zero,0(r16)
    72d4:	80000115 	stw	zero,4(r16)
    72d8:	80000215 	stw	zero,8(r16)
    72dc:	80001915 	stw	zero,100(r16)
    72e0:	8080038d 	sth	r2,14(r16)
    72e4:	80000415 	stw	zero,16(r16)
    72e8:	80000515 	stw	zero,20(r16)
    72ec:	80000615 	stw	zero,24(r16)
    72f0:	81001704 	addi	r4,r16,92
    72f4:	000b883a 	mov	r5,zero
    72f8:	b80d883a 	mov	r6,r23
    72fc:	00085780 	call	8578 <memset>
    7300:	84000715 	stw	r16,28(r16)
    7304:	85800815 	stw	r22,32(r16)
    7308:	85400915 	stw	r21,36(r16)
    730c:	85000a15 	stw	r20,40(r16)
    7310:	84c00b15 	stw	r19,44(r16)
    7314:	dfc00917 	ldw	ra,36(sp)
    7318:	df000817 	ldw	fp,32(sp)
    731c:	ddc00717 	ldw	r23,28(sp)
    7320:	dd800617 	ldw	r22,24(sp)
    7324:	dd400517 	ldw	r21,20(sp)
    7328:	dd000417 	ldw	r20,16(sp)
    732c:	dcc00317 	ldw	r19,12(sp)
    7330:	dc800217 	ldw	r18,8(sp)
    7334:	dc400117 	ldw	r17,4(sp)
    7338:	dc000017 	ldw	r16,0(sp)
    733c:	dec00a04 	addi	sp,sp,40
    7340:	f800283a 	ret

00007344 <__sfmoreglue>:
    7344:	defffc04 	addi	sp,sp,-16
    7348:	dc800215 	stw	r18,8(sp)
    734c:	2825883a 	mov	r18,r5
    7350:	dc000015 	stw	r16,0(sp)
    7354:	01401a04 	movi	r5,104
    7358:	2021883a 	mov	r16,r4
    735c:	9009883a 	mov	r4,r18
    7360:	dfc00315 	stw	ra,12(sp)
    7364:	dc400115 	stw	r17,4(sp)
    7368:	000cb080 	call	cb08 <__mulsi3>
    736c:	8009883a 	mov	r4,r16
    7370:	11400304 	addi	r5,r2,12
    7374:	1023883a 	mov	r17,r2
    7378:	00029c80 	call	29c8 <_malloc_r>
    737c:	1021883a 	mov	r16,r2
    7380:	10000726 	beq	r2,zero,73a0 <__sfmoreglue+0x5c>
    7384:	11000304 	addi	r4,r2,12
    7388:	10000015 	stw	zero,0(r2)
    738c:	14800115 	stw	r18,4(r2)
    7390:	11000215 	stw	r4,8(r2)
    7394:	000b883a 	mov	r5,zero
    7398:	880d883a 	mov	r6,r17
    739c:	00085780 	call	8578 <memset>
    73a0:	8005883a 	mov	r2,r16
    73a4:	dfc00317 	ldw	ra,12(sp)
    73a8:	dc800217 	ldw	r18,8(sp)
    73ac:	dc400117 	ldw	r17,4(sp)
    73b0:	dc000017 	ldw	r16,0(sp)
    73b4:	dec00404 	addi	sp,sp,16
    73b8:	f800283a 	ret

000073bc <__sfp>:
    73bc:	00800074 	movhi	r2,1
    73c0:	defffb04 	addi	sp,sp,-20
    73c4:	10903d04 	addi	r2,r2,16628
    73c8:	dc800215 	stw	r18,8(sp)
    73cc:	14800017 	ldw	r18,0(r2)
    73d0:	dcc00315 	stw	r19,12(sp)
    73d4:	dfc00415 	stw	ra,16(sp)
    73d8:	90800e17 	ldw	r2,56(r18)
    73dc:	dc400115 	stw	r17,4(sp)
    73e0:	dc000015 	stw	r16,0(sp)
    73e4:	2027883a 	mov	r19,r4
    73e8:	1000021e 	bne	r2,zero,73f4 <__sfp+0x38>
    73ec:	9009883a 	mov	r4,r18
    73f0:	00071a40 	call	71a4 <__sinit.part.1>
    73f4:	9480b804 	addi	r18,r18,736
    73f8:	047fffc4 	movi	r17,-1
    73fc:	91400117 	ldw	r5,4(r18)
    7400:	94000217 	ldw	r16,8(r18)
    7404:	297fffc4 	addi	r5,r5,-1
    7408:	28000a16 	blt	r5,zero,7434 <__sfp+0x78>
    740c:	8080030f 	ldh	r2,12(r16)
    7410:	10000c26 	beq	r2,zero,7444 <__sfp+0x88>
    7414:	80c01d04 	addi	r3,r16,116
    7418:	00000206 	br	7424 <__sfp+0x68>
    741c:	18bfe60f 	ldh	r2,-104(r3)
    7420:	10000826 	beq	r2,zero,7444 <__sfp+0x88>
    7424:	297fffc4 	addi	r5,r5,-1
    7428:	1c3ffd04 	addi	r16,r3,-12
    742c:	18c01a04 	addi	r3,r3,104
    7430:	2c7ffa1e 	bne	r5,r17,741c <__alt_data_end+0xfffb1cec>
    7434:	90800017 	ldw	r2,0(r18)
    7438:	10001d26 	beq	r2,zero,74b0 <__sfp+0xf4>
    743c:	1025883a 	mov	r18,r2
    7440:	003fee06 	br	73fc <__alt_data_end+0xfffb1ccc>
    7444:	00bfffc4 	movi	r2,-1
    7448:	8080038d 	sth	r2,14(r16)
    744c:	00800044 	movi	r2,1
    7450:	8080030d 	sth	r2,12(r16)
    7454:	80001915 	stw	zero,100(r16)
    7458:	80000015 	stw	zero,0(r16)
    745c:	80000215 	stw	zero,8(r16)
    7460:	80000115 	stw	zero,4(r16)
    7464:	80000415 	stw	zero,16(r16)
    7468:	80000515 	stw	zero,20(r16)
    746c:	80000615 	stw	zero,24(r16)
    7470:	81001704 	addi	r4,r16,92
    7474:	000b883a 	mov	r5,zero
    7478:	01800204 	movi	r6,8
    747c:	00085780 	call	8578 <memset>
    7480:	8005883a 	mov	r2,r16
    7484:	80000c15 	stw	zero,48(r16)
    7488:	80000d15 	stw	zero,52(r16)
    748c:	80001115 	stw	zero,68(r16)
    7490:	80001215 	stw	zero,72(r16)
    7494:	dfc00417 	ldw	ra,16(sp)
    7498:	dcc00317 	ldw	r19,12(sp)
    749c:	dc800217 	ldw	r18,8(sp)
    74a0:	dc400117 	ldw	r17,4(sp)
    74a4:	dc000017 	ldw	r16,0(sp)
    74a8:	dec00504 	addi	sp,sp,20
    74ac:	f800283a 	ret
    74b0:	9809883a 	mov	r4,r19
    74b4:	01400104 	movi	r5,4
    74b8:	00073440 	call	7344 <__sfmoreglue>
    74bc:	90800015 	stw	r2,0(r18)
    74c0:	103fde1e 	bne	r2,zero,743c <__alt_data_end+0xfffb1d0c>
    74c4:	00800304 	movi	r2,12
    74c8:	98800015 	stw	r2,0(r19)
    74cc:	0005883a 	mov	r2,zero
    74d0:	003ff006 	br	7494 <__alt_data_end+0xfffb1d64>

000074d4 <_cleanup>:
    74d4:	00800074 	movhi	r2,1
    74d8:	10903d04 	addi	r2,r2,16628
    74dc:	11000017 	ldw	r4,0(r2)
    74e0:	01400074 	movhi	r5,1
    74e4:	296daf04 	addi	r5,r5,-18756
    74e8:	0007df41 	jmpi	7df4 <_fwalk>

000074ec <__sinit>:
    74ec:	20800e17 	ldw	r2,56(r4)
    74f0:	10000126 	beq	r2,zero,74f8 <__sinit+0xc>
    74f4:	f800283a 	ret
    74f8:	00071a41 	jmpi	71a4 <__sinit.part.1>

000074fc <__sfp_lock_acquire>:
    74fc:	f800283a 	ret

00007500 <__sfp_lock_release>:
    7500:	f800283a 	ret

00007504 <__sinit_lock_acquire>:
    7504:	f800283a 	ret

00007508 <__sinit_lock_release>:
    7508:	f800283a 	ret

0000750c <__fp_lock_all>:
    750c:	00800074 	movhi	r2,1
    7510:	10903e04 	addi	r2,r2,16632
    7514:	11000017 	ldw	r4,0(r2)
    7518:	01400034 	movhi	r5,0
    751c:	295c6204 	addi	r5,r5,29064
    7520:	0007df41 	jmpi	7df4 <_fwalk>

00007524 <__fp_unlock_all>:
    7524:	00800074 	movhi	r2,1
    7528:	10903e04 	addi	r2,r2,16632
    752c:	11000017 	ldw	r4,0(r2)
    7530:	01400034 	movhi	r5,0
    7534:	295c6404 	addi	r5,r5,29072
    7538:	0007df41 	jmpi	7df4 <_fwalk>

0000753c <_malloc_trim_r>:
    753c:	defffb04 	addi	sp,sp,-20
    7540:	dcc00315 	stw	r19,12(sp)
    7544:	04c00074 	movhi	r19,1
    7548:	dc800215 	stw	r18,8(sp)
    754c:	dc400115 	stw	r17,4(sp)
    7550:	dc000015 	stw	r16,0(sp)
    7554:	dfc00415 	stw	ra,16(sp)
    7558:	2821883a 	mov	r16,r5
    755c:	9cc99004 	addi	r19,r19,9792
    7560:	2025883a 	mov	r18,r4
    7564:	000f90c0 	call	f90c <__malloc_lock>
    7568:	98800217 	ldw	r2,8(r19)
    756c:	14400117 	ldw	r17,4(r2)
    7570:	00bfff04 	movi	r2,-4
    7574:	88a2703a 	and	r17,r17,r2
    7578:	8c21c83a 	sub	r16,r17,r16
    757c:	8403fbc4 	addi	r16,r16,4079
    7580:	8020d33a 	srli	r16,r16,12
    7584:	0083ffc4 	movi	r2,4095
    7588:	843fffc4 	addi	r16,r16,-1
    758c:	8020933a 	slli	r16,r16,12
    7590:	1400060e 	bge	r2,r16,75ac <_malloc_trim_r+0x70>
    7594:	9009883a 	mov	r4,r18
    7598:	000b883a 	mov	r5,zero
    759c:	00032a40 	call	32a4 <_sbrk_r>
    75a0:	98c00217 	ldw	r3,8(r19)
    75a4:	1c47883a 	add	r3,r3,r17
    75a8:	10c00a26 	beq	r2,r3,75d4 <_malloc_trim_r+0x98>
    75ac:	9009883a 	mov	r4,r18
    75b0:	000f92c0 	call	f92c <__malloc_unlock>
    75b4:	0005883a 	mov	r2,zero
    75b8:	dfc00417 	ldw	ra,16(sp)
    75bc:	dcc00317 	ldw	r19,12(sp)
    75c0:	dc800217 	ldw	r18,8(sp)
    75c4:	dc400117 	ldw	r17,4(sp)
    75c8:	dc000017 	ldw	r16,0(sp)
    75cc:	dec00504 	addi	sp,sp,20
    75d0:	f800283a 	ret
    75d4:	9009883a 	mov	r4,r18
    75d8:	040bc83a 	sub	r5,zero,r16
    75dc:	00032a40 	call	32a4 <_sbrk_r>
    75e0:	00ffffc4 	movi	r3,-1
    75e4:	10c00d26 	beq	r2,r3,761c <_malloc_trim_r+0xe0>
    75e8:	00c00074 	movhi	r3,1
    75ec:	18d71c04 	addi	r3,r3,23664
    75f0:	18800017 	ldw	r2,0(r3)
    75f4:	99000217 	ldw	r4,8(r19)
    75f8:	8c23c83a 	sub	r17,r17,r16
    75fc:	8c400054 	ori	r17,r17,1
    7600:	1421c83a 	sub	r16,r2,r16
    7604:	24400115 	stw	r17,4(r4)
    7608:	9009883a 	mov	r4,r18
    760c:	1c000015 	stw	r16,0(r3)
    7610:	000f92c0 	call	f92c <__malloc_unlock>
    7614:	00800044 	movi	r2,1
    7618:	003fe706 	br	75b8 <__alt_data_end+0xfffb1e88>
    761c:	9009883a 	mov	r4,r18
    7620:	000b883a 	mov	r5,zero
    7624:	00032a40 	call	32a4 <_sbrk_r>
    7628:	99000217 	ldw	r4,8(r19)
    762c:	014003c4 	movi	r5,15
    7630:	1107c83a 	sub	r3,r2,r4
    7634:	28ffdd0e 	bge	r5,r3,75ac <__alt_data_end+0xfffb1e7c>
    7638:	01400074 	movhi	r5,1
    763c:	29503b04 	addi	r5,r5,16620
    7640:	29400017 	ldw	r5,0(r5)
    7644:	18c00054 	ori	r3,r3,1
    7648:	20c00115 	stw	r3,4(r4)
    764c:	00c00074 	movhi	r3,1
    7650:	1145c83a 	sub	r2,r2,r5
    7654:	18d71c04 	addi	r3,r3,23664
    7658:	18800015 	stw	r2,0(r3)
    765c:	003fd306 	br	75ac <__alt_data_end+0xfffb1e7c>

00007660 <_free_r>:
    7660:	28004c26 	beq	r5,zero,7794 <_free_r+0x134>
    7664:	defffd04 	addi	sp,sp,-12
    7668:	dc400115 	stw	r17,4(sp)
    766c:	dc000015 	stw	r16,0(sp)
    7670:	2023883a 	mov	r17,r4
    7674:	2821883a 	mov	r16,r5
    7678:	dfc00215 	stw	ra,8(sp)
    767c:	000f90c0 	call	f90c <__malloc_lock>
    7680:	813fff17 	ldw	r4,-4(r16)
    7684:	00bfff84 	movi	r2,-2
    7688:	02400074 	movhi	r9,1
    768c:	81bffe04 	addi	r6,r16,-8
    7690:	2084703a 	and	r2,r4,r2
    7694:	4a499004 	addi	r9,r9,9792
    7698:	308b883a 	add	r5,r6,r2
    769c:	2a000117 	ldw	r8,4(r5)
    76a0:	49c00217 	ldw	r7,8(r9)
    76a4:	00ffff04 	movi	r3,-4
    76a8:	40c6703a 	and	r3,r8,r3
    76ac:	39405326 	beq	r7,r5,77fc <_free_r+0x19c>
    76b0:	28c00115 	stw	r3,4(r5)
    76b4:	2100004c 	andi	r4,r4,1
    76b8:	2000091e 	bne	r4,zero,76e0 <_free_r+0x80>
    76bc:	81fffe17 	ldw	r7,-8(r16)
    76c0:	4a000204 	addi	r8,r9,8
    76c4:	31cdc83a 	sub	r6,r6,r7
    76c8:	31000217 	ldw	r4,8(r6)
    76cc:	11c5883a 	add	r2,r2,r7
    76d0:	22006126 	beq	r4,r8,7858 <_free_r+0x1f8>
    76d4:	31c00317 	ldw	r7,12(r6)
    76d8:	21c00315 	stw	r7,12(r4)
    76dc:	39000215 	stw	r4,8(r7)
    76e0:	28c9883a 	add	r4,r5,r3
    76e4:	21c00117 	ldw	r7,4(r4)
    76e8:	39c0004c 	andi	r7,r7,1
    76ec:	38000d1e 	bne	r7,zero,7724 <_free_r+0xc4>
    76f0:	29000217 	ldw	r4,8(r5)
    76f4:	10c5883a 	add	r2,r2,r3
    76f8:	00c00074 	movhi	r3,1
    76fc:	18c99204 	addi	r3,r3,9800
    7700:	20c07526 	beq	r4,r3,78d8 <_free_r+0x278>
    7704:	29c00317 	ldw	r7,12(r5)
    7708:	11400054 	ori	r5,r2,1
    770c:	3087883a 	add	r3,r6,r2
    7710:	21c00315 	stw	r7,12(r4)
    7714:	39000215 	stw	r4,8(r7)
    7718:	31400115 	stw	r5,4(r6)
    771c:	18800015 	stw	r2,0(r3)
    7720:	00000406 	br	7734 <_free_r+0xd4>
    7724:	10c00054 	ori	r3,r2,1
    7728:	30c00115 	stw	r3,4(r6)
    772c:	3087883a 	add	r3,r6,r2
    7730:	18800015 	stw	r2,0(r3)
    7734:	00c07fc4 	movi	r3,511
    7738:	18801736 	bltu	r3,r2,7798 <_free_r+0x138>
    773c:	1004d0fa 	srli	r2,r2,3
    7740:	01400044 	movi	r5,1
    7744:	49000117 	ldw	r4,4(r9)
    7748:	1087883a 	add	r3,r2,r2
    774c:	18c7883a 	add	r3,r3,r3
    7750:	1005d0ba 	srai	r2,r2,2
    7754:	18c7883a 	add	r3,r3,r3
    7758:	1a47883a 	add	r3,r3,r9
    775c:	19c00217 	ldw	r7,8(r3)
    7760:	2884983a 	sll	r2,r5,r2
    7764:	30c00315 	stw	r3,12(r6)
    7768:	31c00215 	stw	r7,8(r6)
    776c:	1104b03a 	or	r2,r2,r4
    7770:	19800215 	stw	r6,8(r3)
    7774:	48800115 	stw	r2,4(r9)
    7778:	39800315 	stw	r6,12(r7)
    777c:	8809883a 	mov	r4,r17
    7780:	dfc00217 	ldw	ra,8(sp)
    7784:	dc400117 	ldw	r17,4(sp)
    7788:	dc000017 	ldw	r16,0(sp)
    778c:	dec00304 	addi	sp,sp,12
    7790:	000f92c1 	jmpi	f92c <__malloc_unlock>
    7794:	f800283a 	ret
    7798:	1006d27a 	srli	r3,r2,9
    779c:	01000104 	movi	r4,4
    77a0:	20c04036 	bltu	r4,r3,78a4 <_free_r+0x244>
    77a4:	1006d1ba 	srli	r3,r2,6
    77a8:	19400e04 	addi	r5,r3,56
    77ac:	2947883a 	add	r3,r5,r5
    77b0:	18c7883a 	add	r3,r3,r3
    77b4:	18c7883a 	add	r3,r3,r3
    77b8:	1a49883a 	add	r4,r3,r9
    77bc:	20c00217 	ldw	r3,8(r4)
    77c0:	01c00074 	movhi	r7,1
    77c4:	39c99004 	addi	r7,r7,9792
    77c8:	19003b26 	beq	r3,r4,78b8 <_free_r+0x258>
    77cc:	01ffff04 	movi	r7,-4
    77d0:	19400117 	ldw	r5,4(r3)
    77d4:	29ca703a 	and	r5,r5,r7
    77d8:	1140022e 	bgeu	r2,r5,77e4 <_free_r+0x184>
    77dc:	18c00217 	ldw	r3,8(r3)
    77e0:	20fffb1e 	bne	r4,r3,77d0 <__alt_data_end+0xfffb20a0>
    77e4:	18800317 	ldw	r2,12(r3)
    77e8:	30800315 	stw	r2,12(r6)
    77ec:	30c00215 	stw	r3,8(r6)
    77f0:	11800215 	stw	r6,8(r2)
    77f4:	19800315 	stw	r6,12(r3)
    77f8:	003fe006 	br	777c <__alt_data_end+0xfffb204c>
    77fc:	2100004c 	andi	r4,r4,1
    7800:	1885883a 	add	r2,r3,r2
    7804:	2000071e 	bne	r4,zero,7824 <_free_r+0x1c4>
    7808:	817ffe17 	ldw	r5,-8(r16)
    780c:	314dc83a 	sub	r6,r6,r5
    7810:	30c00317 	ldw	r3,12(r6)
    7814:	31000217 	ldw	r4,8(r6)
    7818:	1145883a 	add	r2,r2,r5
    781c:	20c00315 	stw	r3,12(r4)
    7820:	19000215 	stw	r4,8(r3)
    7824:	10c00054 	ori	r3,r2,1
    7828:	30c00115 	stw	r3,4(r6)
    782c:	00c00074 	movhi	r3,1
    7830:	18d03c04 	addi	r3,r3,16624
    7834:	18c00017 	ldw	r3,0(r3)
    7838:	49800215 	stw	r6,8(r9)
    783c:	10ffcf36 	bltu	r2,r3,777c <__alt_data_end+0xfffb204c>
    7840:	00800074 	movhi	r2,1
    7844:	10971004 	addi	r2,r2,23616
    7848:	11400017 	ldw	r5,0(r2)
    784c:	8809883a 	mov	r4,r17
    7850:	000753c0 	call	753c <_malloc_trim_r>
    7854:	003fc906 	br	777c <__alt_data_end+0xfffb204c>
    7858:	28c9883a 	add	r4,r5,r3
    785c:	21000117 	ldw	r4,4(r4)
    7860:	2100004c 	andi	r4,r4,1
    7864:	20000a1e 	bne	r4,zero,7890 <_free_r+0x230>
    7868:	29000317 	ldw	r4,12(r5)
    786c:	29400217 	ldw	r5,8(r5)
    7870:	10c5883a 	add	r2,r2,r3
    7874:	10c00054 	ori	r3,r2,1
    7878:	29000315 	stw	r4,12(r5)
    787c:	21400215 	stw	r5,8(r4)
    7880:	30c00115 	stw	r3,4(r6)
    7884:	308d883a 	add	r6,r6,r2
    7888:	30800015 	stw	r2,0(r6)
    788c:	003fbb06 	br	777c <__alt_data_end+0xfffb204c>
    7890:	10c00054 	ori	r3,r2,1
    7894:	30c00115 	stw	r3,4(r6)
    7898:	308d883a 	add	r6,r6,r2
    789c:	30800015 	stw	r2,0(r6)
    78a0:	003fb606 	br	777c <__alt_data_end+0xfffb204c>
    78a4:	01000504 	movi	r4,20
    78a8:	20c01436 	bltu	r4,r3,78fc <_free_r+0x29c>
    78ac:	194016c4 	addi	r5,r3,91
    78b0:	2947883a 	add	r3,r5,r5
    78b4:	003fbe06 	br	77b0 <__alt_data_end+0xfffb2080>
    78b8:	280bd0ba 	srai	r5,r5,2
    78bc:	00800044 	movi	r2,1
    78c0:	39000117 	ldw	r4,4(r7)
    78c4:	114a983a 	sll	r5,r2,r5
    78c8:	1805883a 	mov	r2,r3
    78cc:	2908b03a 	or	r4,r5,r4
    78d0:	39000115 	stw	r4,4(r7)
    78d4:	003fc406 	br	77e8 <__alt_data_end+0xfffb20b8>
    78d8:	49800515 	stw	r6,20(r9)
    78dc:	49800415 	stw	r6,16(r9)
    78e0:	10c00054 	ori	r3,r2,1
    78e4:	31000315 	stw	r4,12(r6)
    78e8:	31000215 	stw	r4,8(r6)
    78ec:	30c00115 	stw	r3,4(r6)
    78f0:	308d883a 	add	r6,r6,r2
    78f4:	30800015 	stw	r2,0(r6)
    78f8:	003fa006 	br	777c <__alt_data_end+0xfffb204c>
    78fc:	01001504 	movi	r4,84
    7900:	20c00436 	bltu	r4,r3,7914 <_free_r+0x2b4>
    7904:	1006d33a 	srli	r3,r2,12
    7908:	19401b84 	addi	r5,r3,110
    790c:	2947883a 	add	r3,r5,r5
    7910:	003fa706 	br	77b0 <__alt_data_end+0xfffb2080>
    7914:	01005504 	movi	r4,340
    7918:	20c00436 	bltu	r4,r3,792c <_free_r+0x2cc>
    791c:	1006d3fa 	srli	r3,r2,15
    7920:	19401dc4 	addi	r5,r3,119
    7924:	2947883a 	add	r3,r5,r5
    7928:	003fa106 	br	77b0 <__alt_data_end+0xfffb2080>
    792c:	01015504 	movi	r4,1364
    7930:	20c00436 	bltu	r4,r3,7944 <_free_r+0x2e4>
    7934:	1006d4ba 	srli	r3,r2,18
    7938:	19401f04 	addi	r5,r3,124
    793c:	2947883a 	add	r3,r5,r5
    7940:	003f9b06 	br	77b0 <__alt_data_end+0xfffb2080>
    7944:	00c03f04 	movi	r3,252
    7948:	01401f84 	movi	r5,126
    794c:	003f9806 	br	77b0 <__alt_data_end+0xfffb2080>

00007950 <__sfvwrite_r>:
    7950:	30800217 	ldw	r2,8(r6)
    7954:	10004526 	beq	r2,zero,7a6c <__sfvwrite_r+0x11c>
    7958:	28c0030b 	ldhu	r3,12(r5)
    795c:	defff404 	addi	sp,sp,-48
    7960:	dd400715 	stw	r21,28(sp)
    7964:	dcc00515 	stw	r19,20(sp)
    7968:	dc000215 	stw	r16,8(sp)
    796c:	dfc00b15 	stw	ra,44(sp)
    7970:	df000a15 	stw	fp,40(sp)
    7974:	ddc00915 	stw	r23,36(sp)
    7978:	dd800815 	stw	r22,32(sp)
    797c:	dd000615 	stw	r20,24(sp)
    7980:	dc800415 	stw	r18,16(sp)
    7984:	dc400315 	stw	r17,12(sp)
    7988:	1880020c 	andi	r2,r3,8
    798c:	2821883a 	mov	r16,r5
    7990:	202b883a 	mov	r21,r4
    7994:	3027883a 	mov	r19,r6
    7998:	10002526 	beq	r2,zero,7a30 <__sfvwrite_r+0xe0>
    799c:	28800417 	ldw	r2,16(r5)
    79a0:	10002326 	beq	r2,zero,7a30 <__sfvwrite_r+0xe0>
    79a4:	1880008c 	andi	r2,r3,2
    79a8:	9c400017 	ldw	r17,0(r19)
    79ac:	10003126 	beq	r2,zero,7a74 <__sfvwrite_r+0x124>
    79b0:	0029883a 	mov	r20,zero
    79b4:	0025883a 	mov	r18,zero
    79b8:	05810004 	movi	r22,1024
    79bc:	a00d883a 	mov	r6,r20
    79c0:	a809883a 	mov	r4,r21
    79c4:	90002526 	beq	r18,zero,7a5c <__sfvwrite_r+0x10c>
    79c8:	900f883a 	mov	r7,r18
    79cc:	81400717 	ldw	r5,28(r16)
    79d0:	b480012e 	bgeu	r22,r18,79d8 <__sfvwrite_r+0x88>
    79d4:	01c10004 	movi	r7,1024
    79d8:	80800917 	ldw	r2,36(r16)
    79dc:	103ee83a 	callr	r2
    79e0:	0080510e 	bge	zero,r2,7b28 <__sfvwrite_r+0x1d8>
    79e4:	98c00217 	ldw	r3,8(r19)
    79e8:	a0a9883a 	add	r20,r20,r2
    79ec:	90a5c83a 	sub	r18,r18,r2
    79f0:	1885c83a 	sub	r2,r3,r2
    79f4:	98800215 	stw	r2,8(r19)
    79f8:	103ff01e 	bne	r2,zero,79bc <__alt_data_end+0xfffb228c>
    79fc:	0005883a 	mov	r2,zero
    7a00:	dfc00b17 	ldw	ra,44(sp)
    7a04:	df000a17 	ldw	fp,40(sp)
    7a08:	ddc00917 	ldw	r23,36(sp)
    7a0c:	dd800817 	ldw	r22,32(sp)
    7a10:	dd400717 	ldw	r21,28(sp)
    7a14:	dd000617 	ldw	r20,24(sp)
    7a18:	dcc00517 	ldw	r19,20(sp)
    7a1c:	dc800417 	ldw	r18,16(sp)
    7a20:	dc400317 	ldw	r17,12(sp)
    7a24:	dc000217 	ldw	r16,8(sp)
    7a28:	dec00c04 	addi	sp,sp,48
    7a2c:	f800283a 	ret
    7a30:	a809883a 	mov	r4,r21
    7a34:	800b883a 	mov	r5,r16
    7a38:	00054b00 	call	54b0 <__swsetup_r>
    7a3c:	80c0030b 	ldhu	r3,12(r16)
    7a40:	103fd826 	beq	r2,zero,79a4 <__alt_data_end+0xfffb2274>
    7a44:	18c01014 	ori	r3,r3,64
    7a48:	80c0030d 	sth	r3,12(r16)
    7a4c:	00c00244 	movi	r3,9
    7a50:	00bfffc4 	movi	r2,-1
    7a54:	a8c00015 	stw	r3,0(r21)
    7a58:	003fe906 	br	7a00 <__alt_data_end+0xfffb22d0>
    7a5c:	8d000017 	ldw	r20,0(r17)
    7a60:	8c800117 	ldw	r18,4(r17)
    7a64:	8c400204 	addi	r17,r17,8
    7a68:	003fd406 	br	79bc <__alt_data_end+0xfffb228c>
    7a6c:	0005883a 	mov	r2,zero
    7a70:	f800283a 	ret
    7a74:	1880004c 	andi	r2,r3,1
    7a78:	1000301e 	bne	r2,zero,7b3c <__sfvwrite_r+0x1ec>
    7a7c:	002f883a 	mov	r23,zero
    7a80:	0025883a 	mov	r18,zero
    7a84:	90001c26 	beq	r18,zero,7af8 <__sfvwrite_r+0x1a8>
    7a88:	1880800c 	andi	r2,r3,512
    7a8c:	85000217 	ldw	r20,8(r16)
    7a90:	10006c26 	beq	r2,zero,7c44 <__sfvwrite_r+0x2f4>
    7a94:	a02d883a 	mov	r22,r20
    7a98:	95008536 	bltu	r18,r20,7cb0 <__sfvwrite_r+0x360>
    7a9c:	1881200c 	andi	r2,r3,1152
    7aa0:	10009d1e 	bne	r2,zero,7d18 <__sfvwrite_r+0x3c8>
    7aa4:	81000017 	ldw	r4,0(r16)
    7aa8:	a039883a 	mov	fp,r20
    7aac:	9029883a 	mov	r20,r18
    7ab0:	b80b883a 	mov	r5,r23
    7ab4:	b00d883a 	mov	r6,r22
    7ab8:	000841c0 	call	841c <memmove>
    7abc:	80c00217 	ldw	r3,8(r16)
    7ac0:	81000017 	ldw	r4,0(r16)
    7ac4:	9005883a 	mov	r2,r18
    7ac8:	1f39c83a 	sub	fp,r3,fp
    7acc:	258f883a 	add	r7,r4,r22
    7ad0:	87000215 	stw	fp,8(r16)
    7ad4:	81c00015 	stw	r7,0(r16)
    7ad8:	98c00217 	ldw	r3,8(r19)
    7adc:	b8af883a 	add	r23,r23,r2
    7ae0:	90a5c83a 	sub	r18,r18,r2
    7ae4:	1d05c83a 	sub	r2,r3,r20
    7ae8:	98800215 	stw	r2,8(r19)
    7aec:	103fc326 	beq	r2,zero,79fc <__alt_data_end+0xfffb22cc>
    7af0:	80c0030b 	ldhu	r3,12(r16)
    7af4:	903fe41e 	bne	r18,zero,7a88 <__alt_data_end+0xfffb2358>
    7af8:	8dc00017 	ldw	r23,0(r17)
    7afc:	8c800117 	ldw	r18,4(r17)
    7b00:	8c400204 	addi	r17,r17,8
    7b04:	003fdf06 	br	7a84 <__alt_data_end+0xfffb2354>
    7b08:	00096e40 	call	96e4 <_realloc_r>
    7b0c:	102d883a 	mov	r22,r2
    7b10:	1000a01e 	bne	r2,zero,7d94 <__sfvwrite_r+0x444>
    7b14:	81400417 	ldw	r5,16(r16)
    7b18:	a809883a 	mov	r4,r21
    7b1c:	00076600 	call	7660 <_free_r>
    7b20:	00800304 	movi	r2,12
    7b24:	a8800015 	stw	r2,0(r21)
    7b28:	80c0030b 	ldhu	r3,12(r16)
    7b2c:	00bfffc4 	movi	r2,-1
    7b30:	18c01014 	ori	r3,r3,64
    7b34:	80c0030d 	sth	r3,12(r16)
    7b38:	003fb106 	br	7a00 <__alt_data_end+0xfffb22d0>
    7b3c:	0029883a 	mov	r20,zero
    7b40:	0011883a 	mov	r8,zero
    7b44:	0039883a 	mov	fp,zero
    7b48:	0025883a 	mov	r18,zero
    7b4c:	90001f26 	beq	r18,zero,7bcc <__sfvwrite_r+0x27c>
    7b50:	40006826 	beq	r8,zero,7cf4 <__sfvwrite_r+0x3a4>
    7b54:	a02f883a 	mov	r23,r20
    7b58:	9500012e 	bgeu	r18,r20,7b60 <__sfvwrite_r+0x210>
    7b5c:	902f883a 	mov	r23,r18
    7b60:	81000017 	ldw	r4,0(r16)
    7b64:	80800417 	ldw	r2,16(r16)
    7b68:	b82d883a 	mov	r22,r23
    7b6c:	81800217 	ldw	r6,8(r16)
    7b70:	81c00517 	ldw	r7,20(r16)
    7b74:	1100022e 	bgeu	r2,r4,7b80 <__sfvwrite_r+0x230>
    7b78:	31c7883a 	add	r3,r6,r7
    7b7c:	1dc01816 	blt	r3,r23,7be0 <__sfvwrite_r+0x290>
    7b80:	b9c03f16 	blt	r23,r7,7c80 <__sfvwrite_r+0x330>
    7b84:	80800917 	ldw	r2,36(r16)
    7b88:	81400717 	ldw	r5,28(r16)
    7b8c:	a809883a 	mov	r4,r21
    7b90:	da000115 	stw	r8,4(sp)
    7b94:	e00d883a 	mov	r6,fp
    7b98:	103ee83a 	callr	r2
    7b9c:	102d883a 	mov	r22,r2
    7ba0:	da000117 	ldw	r8,4(sp)
    7ba4:	00bfe00e 	bge	zero,r2,7b28 <__alt_data_end+0xfffb23f8>
    7ba8:	a5a9c83a 	sub	r20,r20,r22
    7bac:	a0001f26 	beq	r20,zero,7c2c <__sfvwrite_r+0x2dc>
    7bb0:	98800217 	ldw	r2,8(r19)
    7bb4:	e5b9883a 	add	fp,fp,r22
    7bb8:	95a5c83a 	sub	r18,r18,r22
    7bbc:	15adc83a 	sub	r22,r2,r22
    7bc0:	9d800215 	stw	r22,8(r19)
    7bc4:	b03f8d26 	beq	r22,zero,79fc <__alt_data_end+0xfffb22cc>
    7bc8:	903fe11e 	bne	r18,zero,7b50 <__alt_data_end+0xfffb2420>
    7bcc:	8f000017 	ldw	fp,0(r17)
    7bd0:	8c800117 	ldw	r18,4(r17)
    7bd4:	0011883a 	mov	r8,zero
    7bd8:	8c400204 	addi	r17,r17,8
    7bdc:	003fdb06 	br	7b4c <__alt_data_end+0xfffb241c>
    7be0:	180d883a 	mov	r6,r3
    7be4:	e00b883a 	mov	r5,fp
    7be8:	da000115 	stw	r8,4(sp)
    7bec:	d8c00015 	stw	r3,0(sp)
    7bf0:	000841c0 	call	841c <memmove>
    7bf4:	d8c00017 	ldw	r3,0(sp)
    7bf8:	80800017 	ldw	r2,0(r16)
    7bfc:	a809883a 	mov	r4,r21
    7c00:	800b883a 	mov	r5,r16
    7c04:	10c5883a 	add	r2,r2,r3
    7c08:	80800015 	stw	r2,0(r16)
    7c0c:	d8c00015 	stw	r3,0(sp)
    7c10:	0006f300 	call	6f30 <_fflush_r>
    7c14:	d8c00017 	ldw	r3,0(sp)
    7c18:	da000117 	ldw	r8,4(sp)
    7c1c:	103fc21e 	bne	r2,zero,7b28 <__alt_data_end+0xfffb23f8>
    7c20:	182d883a 	mov	r22,r3
    7c24:	a5a9c83a 	sub	r20,r20,r22
    7c28:	a03fe11e 	bne	r20,zero,7bb0 <__alt_data_end+0xfffb2480>
    7c2c:	a809883a 	mov	r4,r21
    7c30:	800b883a 	mov	r5,r16
    7c34:	0006f300 	call	6f30 <_fflush_r>
    7c38:	103fbb1e 	bne	r2,zero,7b28 <__alt_data_end+0xfffb23f8>
    7c3c:	0011883a 	mov	r8,zero
    7c40:	003fdb06 	br	7bb0 <__alt_data_end+0xfffb2480>
    7c44:	81000017 	ldw	r4,0(r16)
    7c48:	80800417 	ldw	r2,16(r16)
    7c4c:	1100012e 	bgeu	r2,r4,7c54 <__sfvwrite_r+0x304>
    7c50:	a4805a36 	bltu	r20,r18,7dbc <__sfvwrite_r+0x46c>
    7c54:	81c00517 	ldw	r7,20(r16)
    7c58:	91c01a36 	bltu	r18,r7,7cc4 <__sfvwrite_r+0x374>
    7c5c:	80800917 	ldw	r2,36(r16)
    7c60:	81400717 	ldw	r5,28(r16)
    7c64:	a809883a 	mov	r4,r21
    7c68:	b80d883a 	mov	r6,r23
    7c6c:	103ee83a 	callr	r2
    7c70:	1029883a 	mov	r20,r2
    7c74:	00bfac0e 	bge	zero,r2,7b28 <__alt_data_end+0xfffb23f8>
    7c78:	a005883a 	mov	r2,r20
    7c7c:	003f9606 	br	7ad8 <__alt_data_end+0xfffb23a8>
    7c80:	b80d883a 	mov	r6,r23
    7c84:	e00b883a 	mov	r5,fp
    7c88:	da000115 	stw	r8,4(sp)
    7c8c:	000841c0 	call	841c <memmove>
    7c90:	80800217 	ldw	r2,8(r16)
    7c94:	80c00017 	ldw	r3,0(r16)
    7c98:	da000117 	ldw	r8,4(sp)
    7c9c:	15c5c83a 	sub	r2,r2,r23
    7ca0:	1def883a 	add	r23,r3,r23
    7ca4:	80800215 	stw	r2,8(r16)
    7ca8:	85c00015 	stw	r23,0(r16)
    7cac:	003fbe06 	br	7ba8 <__alt_data_end+0xfffb2478>
    7cb0:	81000017 	ldw	r4,0(r16)
    7cb4:	9039883a 	mov	fp,r18
    7cb8:	9029883a 	mov	r20,r18
    7cbc:	902d883a 	mov	r22,r18
    7cc0:	003f7b06 	br	7ab0 <__alt_data_end+0xfffb2380>
    7cc4:	b80b883a 	mov	r5,r23
    7cc8:	900d883a 	mov	r6,r18
    7ccc:	000841c0 	call	841c <memmove>
    7cd0:	80c00217 	ldw	r3,8(r16)
    7cd4:	80800017 	ldw	r2,0(r16)
    7cd8:	9029883a 	mov	r20,r18
    7cdc:	1c87c83a 	sub	r3,r3,r18
    7ce0:	1485883a 	add	r2,r2,r18
    7ce4:	80800015 	stw	r2,0(r16)
    7ce8:	80c00215 	stw	r3,8(r16)
    7cec:	9005883a 	mov	r2,r18
    7cf0:	003f7906 	br	7ad8 <__alt_data_end+0xfffb23a8>
    7cf4:	e009883a 	mov	r4,fp
    7cf8:	01400284 	movi	r5,10
    7cfc:	900d883a 	mov	r6,r18
    7d00:	00081fc0 	call	81fc <memchr>
    7d04:	10003826 	beq	r2,zero,7de8 <__sfvwrite_r+0x498>
    7d08:	10800044 	addi	r2,r2,1
    7d0c:	1729c83a 	sub	r20,r2,fp
    7d10:	02000044 	movi	r8,1
    7d14:	003f8f06 	br	7b54 <__alt_data_end+0xfffb2424>
    7d18:	80800517 	ldw	r2,20(r16)
    7d1c:	81400417 	ldw	r5,16(r16)
    7d20:	87000017 	ldw	fp,0(r16)
    7d24:	10a9883a 	add	r20,r2,r2
    7d28:	a085883a 	add	r2,r20,r2
    7d2c:	1028d7fa 	srli	r20,r2,31
    7d30:	e179c83a 	sub	fp,fp,r5
    7d34:	e1000044 	addi	r4,fp,1
    7d38:	a085883a 	add	r2,r20,r2
    7d3c:	1029d07a 	srai	r20,r2,1
    7d40:	2485883a 	add	r2,r4,r18
    7d44:	a00d883a 	mov	r6,r20
    7d48:	a080022e 	bgeu	r20,r2,7d54 <__sfvwrite_r+0x404>
    7d4c:	1029883a 	mov	r20,r2
    7d50:	100d883a 	mov	r6,r2
    7d54:	18c1000c 	andi	r3,r3,1024
    7d58:	a809883a 	mov	r4,r21
    7d5c:	183f6a26 	beq	r3,zero,7b08 <__alt_data_end+0xfffb23d8>
    7d60:	300b883a 	mov	r5,r6
    7d64:	00029c80 	call	29c8 <_malloc_r>
    7d68:	102d883a 	mov	r22,r2
    7d6c:	103f6c26 	beq	r2,zero,7b20 <__alt_data_end+0xfffb23f0>
    7d70:	81400417 	ldw	r5,16(r16)
    7d74:	1009883a 	mov	r4,r2
    7d78:	e00d883a 	mov	r6,fp
    7d7c:	00082e40 	call	82e4 <memcpy>
    7d80:	8080030b 	ldhu	r2,12(r16)
    7d84:	00fedfc4 	movi	r3,-1153
    7d88:	10c4703a 	and	r2,r2,r3
    7d8c:	10802014 	ori	r2,r2,128
    7d90:	8080030d 	sth	r2,12(r16)
    7d94:	b709883a 	add	r4,r22,fp
    7d98:	a707c83a 	sub	r3,r20,fp
    7d9c:	85800415 	stw	r22,16(r16)
    7da0:	85000515 	stw	r20,20(r16)
    7da4:	81000015 	stw	r4,0(r16)
    7da8:	9039883a 	mov	fp,r18
    7dac:	80c00215 	stw	r3,8(r16)
    7db0:	9029883a 	mov	r20,r18
    7db4:	902d883a 	mov	r22,r18
    7db8:	003f3d06 	br	7ab0 <__alt_data_end+0xfffb2380>
    7dbc:	b80b883a 	mov	r5,r23
    7dc0:	a00d883a 	mov	r6,r20
    7dc4:	000841c0 	call	841c <memmove>
    7dc8:	80800017 	ldw	r2,0(r16)
    7dcc:	a809883a 	mov	r4,r21
    7dd0:	800b883a 	mov	r5,r16
    7dd4:	1505883a 	add	r2,r2,r20
    7dd8:	80800015 	stw	r2,0(r16)
    7ddc:	0006f300 	call	6f30 <_fflush_r>
    7de0:	103fa526 	beq	r2,zero,7c78 <__alt_data_end+0xfffb2548>
    7de4:	003f5006 	br	7b28 <__alt_data_end+0xfffb23f8>
    7de8:	95000044 	addi	r20,r18,1
    7dec:	02000044 	movi	r8,1
    7df0:	003f5806 	br	7b54 <__alt_data_end+0xfffb2424>

00007df4 <_fwalk>:
    7df4:	defff804 	addi	sp,sp,-32
    7df8:	dd400515 	stw	r21,20(sp)
    7dfc:	2540b804 	addi	r21,r4,736
    7e00:	dd800615 	stw	r22,24(sp)
    7e04:	dd000415 	stw	r20,16(sp)
    7e08:	dfc00715 	stw	ra,28(sp)
    7e0c:	dcc00315 	stw	r19,12(sp)
    7e10:	dc800215 	stw	r18,8(sp)
    7e14:	dc400115 	stw	r17,4(sp)
    7e18:	dc000015 	stw	r16,0(sp)
    7e1c:	2829883a 	mov	r20,r5
    7e20:	002d883a 	mov	r22,zero
    7e24:	00074fc0 	call	74fc <__sfp_lock_acquire>
    7e28:	a8001426 	beq	r21,zero,7e7c <_fwalk+0x88>
    7e2c:	04ffffc4 	movi	r19,-1
    7e30:	ac400117 	ldw	r17,4(r21)
    7e34:	ac800217 	ldw	r18,8(r21)
    7e38:	8c7fffc4 	addi	r17,r17,-1
    7e3c:	88000d16 	blt	r17,zero,7e74 <_fwalk+0x80>
    7e40:	94000304 	addi	r16,r18,12
    7e44:	94800384 	addi	r18,r18,14
    7e48:	80c0000f 	ldh	r3,0(r16)
    7e4c:	8c7fffc4 	addi	r17,r17,-1
    7e50:	813ffd04 	addi	r4,r16,-12
    7e54:	18000426 	beq	r3,zero,7e68 <_fwalk+0x74>
    7e58:	90c0000f 	ldh	r3,0(r18)
    7e5c:	1cc00226 	beq	r3,r19,7e68 <_fwalk+0x74>
    7e60:	a03ee83a 	callr	r20
    7e64:	b0acb03a 	or	r22,r22,r2
    7e68:	84001a04 	addi	r16,r16,104
    7e6c:	94801a04 	addi	r18,r18,104
    7e70:	8cfff51e 	bne	r17,r19,7e48 <__alt_data_end+0xfffb2718>
    7e74:	ad400017 	ldw	r21,0(r21)
    7e78:	a83fed1e 	bne	r21,zero,7e30 <__alt_data_end+0xfffb2700>
    7e7c:	00075000 	call	7500 <__sfp_lock_release>
    7e80:	b005883a 	mov	r2,r22
    7e84:	dfc00717 	ldw	ra,28(sp)
    7e88:	dd800617 	ldw	r22,24(sp)
    7e8c:	dd400517 	ldw	r21,20(sp)
    7e90:	dd000417 	ldw	r20,16(sp)
    7e94:	dcc00317 	ldw	r19,12(sp)
    7e98:	dc800217 	ldw	r18,8(sp)
    7e9c:	dc400117 	ldw	r17,4(sp)
    7ea0:	dc000017 	ldw	r16,0(sp)
    7ea4:	dec00804 	addi	sp,sp,32
    7ea8:	f800283a 	ret

00007eac <_fwalk_reent>:
    7eac:	defff804 	addi	sp,sp,-32
    7eb0:	dd400515 	stw	r21,20(sp)
    7eb4:	2540b804 	addi	r21,r4,736
    7eb8:	dd800615 	stw	r22,24(sp)
    7ebc:	dd000415 	stw	r20,16(sp)
    7ec0:	dcc00315 	stw	r19,12(sp)
    7ec4:	dfc00715 	stw	ra,28(sp)
    7ec8:	dc800215 	stw	r18,8(sp)
    7ecc:	dc400115 	stw	r17,4(sp)
    7ed0:	dc000015 	stw	r16,0(sp)
    7ed4:	2027883a 	mov	r19,r4
    7ed8:	2829883a 	mov	r20,r5
    7edc:	002d883a 	mov	r22,zero
    7ee0:	00074fc0 	call	74fc <__sfp_lock_acquire>
    7ee4:	a8001326 	beq	r21,zero,7f34 <_fwalk_reent+0x88>
    7ee8:	04bfffc4 	movi	r18,-1
    7eec:	ac400117 	ldw	r17,4(r21)
    7ef0:	ac000217 	ldw	r16,8(r21)
    7ef4:	8c7fffc4 	addi	r17,r17,-1
    7ef8:	88000c16 	blt	r17,zero,7f2c <_fwalk_reent+0x80>
    7efc:	84000304 	addi	r16,r16,12
    7f00:	80c0000f 	ldh	r3,0(r16)
    7f04:	8c7fffc4 	addi	r17,r17,-1
    7f08:	817ffd04 	addi	r5,r16,-12
    7f0c:	18000526 	beq	r3,zero,7f24 <_fwalk_reent+0x78>
    7f10:	80c0008f 	ldh	r3,2(r16)
    7f14:	9809883a 	mov	r4,r19
    7f18:	1c800226 	beq	r3,r18,7f24 <_fwalk_reent+0x78>
    7f1c:	a03ee83a 	callr	r20
    7f20:	b0acb03a 	or	r22,r22,r2
    7f24:	84001a04 	addi	r16,r16,104
    7f28:	8cbff51e 	bne	r17,r18,7f00 <__alt_data_end+0xfffb27d0>
    7f2c:	ad400017 	ldw	r21,0(r21)
    7f30:	a83fee1e 	bne	r21,zero,7eec <__alt_data_end+0xfffb27bc>
    7f34:	00075000 	call	7500 <__sfp_lock_release>
    7f38:	b005883a 	mov	r2,r22
    7f3c:	dfc00717 	ldw	ra,28(sp)
    7f40:	dd800617 	ldw	r22,24(sp)
    7f44:	dd400517 	ldw	r21,20(sp)
    7f48:	dd000417 	ldw	r20,16(sp)
    7f4c:	dcc00317 	ldw	r19,12(sp)
    7f50:	dc800217 	ldw	r18,8(sp)
    7f54:	dc400117 	ldw	r17,4(sp)
    7f58:	dc000017 	ldw	r16,0(sp)
    7f5c:	dec00804 	addi	sp,sp,32
    7f60:	f800283a 	ret

00007f64 <_setlocale_r>:
    7f64:	30001b26 	beq	r6,zero,7fd4 <_setlocale_r+0x70>
    7f68:	01400074 	movhi	r5,1
    7f6c:	defffe04 	addi	sp,sp,-8
    7f70:	2948ef04 	addi	r5,r5,9148
    7f74:	3009883a 	mov	r4,r6
    7f78:	dc000015 	stw	r16,0(sp)
    7f7c:	dfc00115 	stw	ra,4(sp)
    7f80:	3021883a 	mov	r16,r6
    7f84:	0009e340 	call	9e34 <strcmp>
    7f88:	1000061e 	bne	r2,zero,7fa4 <_setlocale_r+0x40>
    7f8c:	00800074 	movhi	r2,1
    7f90:	1088ee04 	addi	r2,r2,9144
    7f94:	dfc00117 	ldw	ra,4(sp)
    7f98:	dc000017 	ldw	r16,0(sp)
    7f9c:	dec00204 	addi	sp,sp,8
    7fa0:	f800283a 	ret
    7fa4:	01400074 	movhi	r5,1
    7fa8:	2948ee04 	addi	r5,r5,9144
    7fac:	8009883a 	mov	r4,r16
    7fb0:	0009e340 	call	9e34 <strcmp>
    7fb4:	103ff526 	beq	r2,zero,7f8c <__alt_data_end+0xfffb285c>
    7fb8:	01400074 	movhi	r5,1
    7fbc:	2948d904 	addi	r5,r5,9060
    7fc0:	8009883a 	mov	r4,r16
    7fc4:	0009e340 	call	9e34 <strcmp>
    7fc8:	103ff026 	beq	r2,zero,7f8c <__alt_data_end+0xfffb285c>
    7fcc:	0005883a 	mov	r2,zero
    7fd0:	003ff006 	br	7f94 <__alt_data_end+0xfffb2864>
    7fd4:	00800074 	movhi	r2,1
    7fd8:	1088ee04 	addi	r2,r2,9144
    7fdc:	f800283a 	ret

00007fe0 <__locale_charset>:
    7fe0:	00800074 	movhi	r2,1
    7fe4:	108ba304 	addi	r2,r2,11916
    7fe8:	f800283a 	ret

00007fec <__locale_mb_cur_max>:
    7fec:	00800074 	movhi	r2,1
    7ff0:	10903f04 	addi	r2,r2,16636
    7ff4:	10800017 	ldw	r2,0(r2)
    7ff8:	f800283a 	ret

00007ffc <__locale_msgcharset>:
    7ffc:	00800074 	movhi	r2,1
    8000:	108b9b04 	addi	r2,r2,11884
    8004:	f800283a 	ret

00008008 <__locale_cjk_lang>:
    8008:	0005883a 	mov	r2,zero
    800c:	f800283a 	ret

00008010 <_localeconv_r>:
    8010:	00800074 	movhi	r2,1
    8014:	108bab04 	addi	r2,r2,11948
    8018:	f800283a 	ret

0000801c <setlocale>:
    801c:	00c00074 	movhi	r3,1
    8020:	18d03e04 	addi	r3,r3,16632
    8024:	2005883a 	mov	r2,r4
    8028:	19000017 	ldw	r4,0(r3)
    802c:	280d883a 	mov	r6,r5
    8030:	100b883a 	mov	r5,r2
    8034:	0007f641 	jmpi	7f64 <_setlocale_r>

00008038 <localeconv>:
    8038:	00800074 	movhi	r2,1
    803c:	108bab04 	addi	r2,r2,11948
    8040:	f800283a 	ret

00008044 <__smakebuf_r>:
    8044:	2880030b 	ldhu	r2,12(r5)
    8048:	10c0008c 	andi	r3,r2,2
    804c:	1800401e 	bne	r3,zero,8150 <__smakebuf_r+0x10c>
    8050:	deffec04 	addi	sp,sp,-80
    8054:	dc000f15 	stw	r16,60(sp)
    8058:	2821883a 	mov	r16,r5
    805c:	2940038f 	ldh	r5,14(r5)
    8060:	dc401015 	stw	r17,64(sp)
    8064:	dfc01315 	stw	ra,76(sp)
    8068:	dcc01215 	stw	r19,72(sp)
    806c:	dc801115 	stw	r18,68(sp)
    8070:	2023883a 	mov	r17,r4
    8074:	28001b16 	blt	r5,zero,80e4 <__smakebuf_r+0xa0>
    8078:	d80d883a 	mov	r6,sp
    807c:	000b8ac0 	call	b8ac <_fstat_r>
    8080:	10001716 	blt	r2,zero,80e0 <__smakebuf_r+0x9c>
    8084:	d8800117 	ldw	r2,4(sp)
    8088:	00e00014 	movui	r3,32768
    808c:	10bc000c 	andi	r2,r2,61440
    8090:	10c03726 	beq	r2,r3,8170 <__smakebuf_r+0x12c>
    8094:	80c0030b 	ldhu	r3,12(r16)
    8098:	18c20014 	ori	r3,r3,2048
    809c:	80c0030d 	sth	r3,12(r16)
    80a0:	00c80004 	movi	r3,8192
    80a4:	10c03c1e 	bne	r2,r3,8198 <__smakebuf_r+0x154>
    80a8:	8140038f 	ldh	r5,14(r16)
    80ac:	8809883a 	mov	r4,r17
    80b0:	000b9040 	call	b904 <_isatty_r>
    80b4:	10004e26 	beq	r2,zero,81f0 <__smakebuf_r+0x1ac>
    80b8:	8080030b 	ldhu	r2,12(r16)
    80bc:	04c00044 	movi	r19,1
    80c0:	80c010c4 	addi	r3,r16,67
    80c4:	14c4b03a 	or	r2,r2,r19
    80c8:	8080030d 	sth	r2,12(r16)
    80cc:	80c00015 	stw	r3,0(r16)
    80d0:	80c00415 	stw	r3,16(r16)
    80d4:	84c00515 	stw	r19,20(r16)
    80d8:	04810004 	movi	r18,1024
    80dc:	00000706 	br	80fc <__smakebuf_r+0xb8>
    80e0:	8080030b 	ldhu	r2,12(r16)
    80e4:	10c0200c 	andi	r3,r2,128
    80e8:	18001f1e 	bne	r3,zero,8168 <__smakebuf_r+0x124>
    80ec:	04810004 	movi	r18,1024
    80f0:	10820014 	ori	r2,r2,2048
    80f4:	8080030d 	sth	r2,12(r16)
    80f8:	0027883a 	mov	r19,zero
    80fc:	8809883a 	mov	r4,r17
    8100:	900b883a 	mov	r5,r18
    8104:	00029c80 	call	29c8 <_malloc_r>
    8108:	10002e26 	beq	r2,zero,81c4 <__smakebuf_r+0x180>
    810c:	80c0030b 	ldhu	r3,12(r16)
    8110:	01000034 	movhi	r4,0
    8114:	211c6604 	addi	r4,r4,29080
    8118:	89000f15 	stw	r4,60(r17)
    811c:	18c02014 	ori	r3,r3,128
    8120:	80c0030d 	sth	r3,12(r16)
    8124:	80800015 	stw	r2,0(r16)
    8128:	80800415 	stw	r2,16(r16)
    812c:	84800515 	stw	r18,20(r16)
    8130:	98001c1e 	bne	r19,zero,81a4 <__smakebuf_r+0x160>
    8134:	dfc01317 	ldw	ra,76(sp)
    8138:	dcc01217 	ldw	r19,72(sp)
    813c:	dc801117 	ldw	r18,68(sp)
    8140:	dc401017 	ldw	r17,64(sp)
    8144:	dc000f17 	ldw	r16,60(sp)
    8148:	dec01404 	addi	sp,sp,80
    814c:	f800283a 	ret
    8150:	288010c4 	addi	r2,r5,67
    8154:	28800015 	stw	r2,0(r5)
    8158:	28800415 	stw	r2,16(r5)
    815c:	00800044 	movi	r2,1
    8160:	28800515 	stw	r2,20(r5)
    8164:	f800283a 	ret
    8168:	04801004 	movi	r18,64
    816c:	003fe006 	br	80f0 <__alt_data_end+0xfffb29c0>
    8170:	81000a17 	ldw	r4,40(r16)
    8174:	00c00074 	movhi	r3,1
    8178:	18e77404 	addi	r3,r3,-25136
    817c:	20ffc51e 	bne	r4,r3,8094 <__alt_data_end+0xfffb2964>
    8180:	80c0030b 	ldhu	r3,12(r16)
    8184:	01010004 	movi	r4,1024
    8188:	81001315 	stw	r4,76(r16)
    818c:	1906b03a 	or	r3,r3,r4
    8190:	80c0030d 	sth	r3,12(r16)
    8194:	003fc206 	br	80a0 <__alt_data_end+0xfffb2970>
    8198:	0027883a 	mov	r19,zero
    819c:	04810004 	movi	r18,1024
    81a0:	003fd606 	br	80fc <__alt_data_end+0xfffb29cc>
    81a4:	8140038f 	ldh	r5,14(r16)
    81a8:	8809883a 	mov	r4,r17
    81ac:	000b9040 	call	b904 <_isatty_r>
    81b0:	103fe026 	beq	r2,zero,8134 <__alt_data_end+0xfffb2a04>
    81b4:	8080030b 	ldhu	r2,12(r16)
    81b8:	10800054 	ori	r2,r2,1
    81bc:	8080030d 	sth	r2,12(r16)
    81c0:	003fdc06 	br	8134 <__alt_data_end+0xfffb2a04>
    81c4:	8080030b 	ldhu	r2,12(r16)
    81c8:	10c0800c 	andi	r3,r2,512
    81cc:	183fd91e 	bne	r3,zero,8134 <__alt_data_end+0xfffb2a04>
    81d0:	10800094 	ori	r2,r2,2
    81d4:	80c010c4 	addi	r3,r16,67
    81d8:	8080030d 	sth	r2,12(r16)
    81dc:	00800044 	movi	r2,1
    81e0:	80c00015 	stw	r3,0(r16)
    81e4:	80c00415 	stw	r3,16(r16)
    81e8:	80800515 	stw	r2,20(r16)
    81ec:	003fd106 	br	8134 <__alt_data_end+0xfffb2a04>
    81f0:	04c00044 	movi	r19,1
    81f4:	04810004 	movi	r18,1024
    81f8:	003fc006 	br	80fc <__alt_data_end+0xfffb29cc>

000081fc <memchr>:
    81fc:	208000cc 	andi	r2,r4,3
    8200:	280f883a 	mov	r7,r5
    8204:	10003526 	beq	r2,zero,82dc <memchr+0xe0>
    8208:	30bfffc4 	addi	r2,r6,-1
    820c:	30001b26 	beq	r6,zero,827c <memchr+0x80>
    8210:	21800003 	ldbu	r6,0(r4)
    8214:	28c03fcc 	andi	r3,r5,255
    8218:	30c01a26 	beq	r6,r3,8284 <memchr+0x88>
    821c:	180d883a 	mov	r6,r3
    8220:	00000406 	br	8234 <memchr+0x38>
    8224:	10001526 	beq	r2,zero,827c <memchr+0x80>
    8228:	20c00003 	ldbu	r3,0(r4)
    822c:	10bfffc4 	addi	r2,r2,-1
    8230:	19801426 	beq	r3,r6,8284 <memchr+0x88>
    8234:	21000044 	addi	r4,r4,1
    8238:	20c000cc 	andi	r3,r4,3
    823c:	183ff91e 	bne	r3,zero,8224 <__alt_data_end+0xfffb2af4>
    8240:	024000c4 	movi	r9,3
    8244:	48801136 	bltu	r9,r2,828c <memchr+0x90>
    8248:	10000c26 	beq	r2,zero,827c <memchr+0x80>
    824c:	20c00003 	ldbu	r3,0(r4)
    8250:	29403fcc 	andi	r5,r5,255
    8254:	19400b26 	beq	r3,r5,8284 <memchr+0x88>
    8258:	20c00044 	addi	r3,r4,1
    825c:	2085883a 	add	r2,r4,r2
    8260:	39803fcc 	andi	r6,r7,255
    8264:	00000306 	br	8274 <memchr+0x78>
    8268:	18c00044 	addi	r3,r3,1
    826c:	197fffc3 	ldbu	r5,-1(r3)
    8270:	29800426 	beq	r5,r6,8284 <memchr+0x88>
    8274:	1809883a 	mov	r4,r3
    8278:	18bffb1e 	bne	r3,r2,8268 <__alt_data_end+0xfffb2b38>
    827c:	0005883a 	mov	r2,zero
    8280:	f800283a 	ret
    8284:	2005883a 	mov	r2,r4
    8288:	f800283a 	ret
    828c:	28c03fcc 	andi	r3,r5,255
    8290:	1810923a 	slli	r8,r3,8
    8294:	02ffbff4 	movhi	r11,65279
    8298:	02a02074 	movhi	r10,32897
    829c:	40c6b03a 	or	r3,r8,r3
    82a0:	1810943a 	slli	r8,r3,16
    82a4:	5affbfc4 	addi	r11,r11,-257
    82a8:	52a02004 	addi	r10,r10,-32640
    82ac:	40d0b03a 	or	r8,r8,r3
    82b0:	20c00017 	ldw	r3,0(r4)
    82b4:	40c6f03a 	xor	r3,r8,r3
    82b8:	1acd883a 	add	r6,r3,r11
    82bc:	00c6303a 	nor	r3,zero,r3
    82c0:	30c6703a 	and	r3,r6,r3
    82c4:	1a86703a 	and	r3,r3,r10
    82c8:	183fdf1e 	bne	r3,zero,8248 <__alt_data_end+0xfffb2b18>
    82cc:	10bfff04 	addi	r2,r2,-4
    82d0:	21000104 	addi	r4,r4,4
    82d4:	48bff636 	bltu	r9,r2,82b0 <__alt_data_end+0xfffb2b80>
    82d8:	003fdb06 	br	8248 <__alt_data_end+0xfffb2b18>
    82dc:	3005883a 	mov	r2,r6
    82e0:	003fd706 	br	8240 <__alt_data_end+0xfffb2b10>

000082e4 <memcpy>:
    82e4:	deffff04 	addi	sp,sp,-4
    82e8:	dc000015 	stw	r16,0(sp)
    82ec:	00c003c4 	movi	r3,15
    82f0:	2005883a 	mov	r2,r4
    82f4:	1980432e 	bgeu	r3,r6,8404 <memcpy+0x120>
    82f8:	2146b03a 	or	r3,r4,r5
    82fc:	18c000cc 	andi	r3,r3,3
    8300:	1800421e 	bne	r3,zero,840c <memcpy+0x128>
    8304:	343ffc04 	addi	r16,r6,-16
    8308:	8020d13a 	srli	r16,r16,4
    830c:	28c00104 	addi	r3,r5,4
    8310:	23400104 	addi	r13,r4,4
    8314:	801e913a 	slli	r15,r16,4
    8318:	2b000204 	addi	r12,r5,8
    831c:	22c00204 	addi	r11,r4,8
    8320:	7bc00504 	addi	r15,r15,20
    8324:	2a800304 	addi	r10,r5,12
    8328:	22400304 	addi	r9,r4,12
    832c:	2bdf883a 	add	r15,r5,r15
    8330:	2811883a 	mov	r8,r5
    8334:	200f883a 	mov	r7,r4
    8338:	41000017 	ldw	r4,0(r8)
    833c:	39c00404 	addi	r7,r7,16
    8340:	18c00404 	addi	r3,r3,16
    8344:	393ffc15 	stw	r4,-16(r7)
    8348:	1bbffc17 	ldw	r14,-16(r3)
    834c:	6b400404 	addi	r13,r13,16
    8350:	5ac00404 	addi	r11,r11,16
    8354:	6bbffc15 	stw	r14,-16(r13)
    8358:	63800017 	ldw	r14,0(r12)
    835c:	4a400404 	addi	r9,r9,16
    8360:	42000404 	addi	r8,r8,16
    8364:	5bbffc15 	stw	r14,-16(r11)
    8368:	53800017 	ldw	r14,0(r10)
    836c:	63000404 	addi	r12,r12,16
    8370:	52800404 	addi	r10,r10,16
    8374:	4bbffc15 	stw	r14,-16(r9)
    8378:	1bffef1e 	bne	r3,r15,8338 <__alt_data_end+0xfffb2c08>
    837c:	81c00044 	addi	r7,r16,1
    8380:	380e913a 	slli	r7,r7,4
    8384:	310003cc 	andi	r4,r6,15
    8388:	02c000c4 	movi	r11,3
    838c:	11c7883a 	add	r3,r2,r7
    8390:	29cb883a 	add	r5,r5,r7
    8394:	59001f2e 	bgeu	r11,r4,8414 <memcpy+0x130>
    8398:	1813883a 	mov	r9,r3
    839c:	2811883a 	mov	r8,r5
    83a0:	200f883a 	mov	r7,r4
    83a4:	42800017 	ldw	r10,0(r8)
    83a8:	4a400104 	addi	r9,r9,4
    83ac:	39ffff04 	addi	r7,r7,-4
    83b0:	4abfff15 	stw	r10,-4(r9)
    83b4:	42000104 	addi	r8,r8,4
    83b8:	59fffa36 	bltu	r11,r7,83a4 <__alt_data_end+0xfffb2c74>
    83bc:	213fff04 	addi	r4,r4,-4
    83c0:	2008d0ba 	srli	r4,r4,2
    83c4:	318000cc 	andi	r6,r6,3
    83c8:	21000044 	addi	r4,r4,1
    83cc:	2109883a 	add	r4,r4,r4
    83d0:	2109883a 	add	r4,r4,r4
    83d4:	1907883a 	add	r3,r3,r4
    83d8:	290b883a 	add	r5,r5,r4
    83dc:	30000626 	beq	r6,zero,83f8 <memcpy+0x114>
    83e0:	198d883a 	add	r6,r3,r6
    83e4:	29c00003 	ldbu	r7,0(r5)
    83e8:	18c00044 	addi	r3,r3,1
    83ec:	29400044 	addi	r5,r5,1
    83f0:	19ffffc5 	stb	r7,-1(r3)
    83f4:	19bffb1e 	bne	r3,r6,83e4 <__alt_data_end+0xfffb2cb4>
    83f8:	dc000017 	ldw	r16,0(sp)
    83fc:	dec00104 	addi	sp,sp,4
    8400:	f800283a 	ret
    8404:	2007883a 	mov	r3,r4
    8408:	003ff406 	br	83dc <__alt_data_end+0xfffb2cac>
    840c:	2007883a 	mov	r3,r4
    8410:	003ff306 	br	83e0 <__alt_data_end+0xfffb2cb0>
    8414:	200d883a 	mov	r6,r4
    8418:	003ff006 	br	83dc <__alt_data_end+0xfffb2cac>

0000841c <memmove>:
    841c:	2005883a 	mov	r2,r4
    8420:	29000b2e 	bgeu	r5,r4,8450 <memmove+0x34>
    8424:	298f883a 	add	r7,r5,r6
    8428:	21c0092e 	bgeu	r4,r7,8450 <memmove+0x34>
    842c:	2187883a 	add	r3,r4,r6
    8430:	198bc83a 	sub	r5,r3,r6
    8434:	30004b26 	beq	r6,zero,8564 <memmove+0x148>
    8438:	39ffffc4 	addi	r7,r7,-1
    843c:	39000003 	ldbu	r4,0(r7)
    8440:	18ffffc4 	addi	r3,r3,-1
    8444:	19000005 	stb	r4,0(r3)
    8448:	197ffb1e 	bne	r3,r5,8438 <__alt_data_end+0xfffb2d08>
    844c:	f800283a 	ret
    8450:	00c003c4 	movi	r3,15
    8454:	1980412e 	bgeu	r3,r6,855c <memmove+0x140>
    8458:	1146b03a 	or	r3,r2,r5
    845c:	18c000cc 	andi	r3,r3,3
    8460:	1800411e 	bne	r3,zero,8568 <memmove+0x14c>
    8464:	33fffc04 	addi	r15,r6,-16
    8468:	781ed13a 	srli	r15,r15,4
    846c:	28c00104 	addi	r3,r5,4
    8470:	13400104 	addi	r13,r2,4
    8474:	781c913a 	slli	r14,r15,4
    8478:	2b000204 	addi	r12,r5,8
    847c:	12c00204 	addi	r11,r2,8
    8480:	73800504 	addi	r14,r14,20
    8484:	2a800304 	addi	r10,r5,12
    8488:	12400304 	addi	r9,r2,12
    848c:	2b9d883a 	add	r14,r5,r14
    8490:	2811883a 	mov	r8,r5
    8494:	100f883a 	mov	r7,r2
    8498:	41000017 	ldw	r4,0(r8)
    849c:	39c00404 	addi	r7,r7,16
    84a0:	18c00404 	addi	r3,r3,16
    84a4:	393ffc15 	stw	r4,-16(r7)
    84a8:	193ffc17 	ldw	r4,-16(r3)
    84ac:	6b400404 	addi	r13,r13,16
    84b0:	5ac00404 	addi	r11,r11,16
    84b4:	693ffc15 	stw	r4,-16(r13)
    84b8:	61000017 	ldw	r4,0(r12)
    84bc:	4a400404 	addi	r9,r9,16
    84c0:	42000404 	addi	r8,r8,16
    84c4:	593ffc15 	stw	r4,-16(r11)
    84c8:	51000017 	ldw	r4,0(r10)
    84cc:	63000404 	addi	r12,r12,16
    84d0:	52800404 	addi	r10,r10,16
    84d4:	493ffc15 	stw	r4,-16(r9)
    84d8:	1bbfef1e 	bne	r3,r14,8498 <__alt_data_end+0xfffb2d68>
    84dc:	79000044 	addi	r4,r15,1
    84e0:	2008913a 	slli	r4,r4,4
    84e4:	328003cc 	andi	r10,r6,15
    84e8:	02c000c4 	movi	r11,3
    84ec:	1107883a 	add	r3,r2,r4
    84f0:	290b883a 	add	r5,r5,r4
    84f4:	5a801e2e 	bgeu	r11,r10,8570 <memmove+0x154>
    84f8:	1813883a 	mov	r9,r3
    84fc:	2811883a 	mov	r8,r5
    8500:	500f883a 	mov	r7,r10
    8504:	41000017 	ldw	r4,0(r8)
    8508:	4a400104 	addi	r9,r9,4
    850c:	39ffff04 	addi	r7,r7,-4
    8510:	493fff15 	stw	r4,-4(r9)
    8514:	42000104 	addi	r8,r8,4
    8518:	59fffa36 	bltu	r11,r7,8504 <__alt_data_end+0xfffb2dd4>
    851c:	513fff04 	addi	r4,r10,-4
    8520:	2008d0ba 	srli	r4,r4,2
    8524:	318000cc 	andi	r6,r6,3
    8528:	21000044 	addi	r4,r4,1
    852c:	2109883a 	add	r4,r4,r4
    8530:	2109883a 	add	r4,r4,r4
    8534:	1907883a 	add	r3,r3,r4
    8538:	290b883a 	add	r5,r5,r4
    853c:	30000926 	beq	r6,zero,8564 <memmove+0x148>
    8540:	198d883a 	add	r6,r3,r6
    8544:	29c00003 	ldbu	r7,0(r5)
    8548:	18c00044 	addi	r3,r3,1
    854c:	29400044 	addi	r5,r5,1
    8550:	19ffffc5 	stb	r7,-1(r3)
    8554:	19bffb1e 	bne	r3,r6,8544 <__alt_data_end+0xfffb2e14>
    8558:	f800283a 	ret
    855c:	1007883a 	mov	r3,r2
    8560:	003ff606 	br	853c <__alt_data_end+0xfffb2e0c>
    8564:	f800283a 	ret
    8568:	1007883a 	mov	r3,r2
    856c:	003ff406 	br	8540 <__alt_data_end+0xfffb2e10>
    8570:	500d883a 	mov	r6,r10
    8574:	003ff106 	br	853c <__alt_data_end+0xfffb2e0c>

00008578 <memset>:
    8578:	20c000cc 	andi	r3,r4,3
    857c:	2005883a 	mov	r2,r4
    8580:	18004326 	beq	r3,zero,8690 <memset+0x118>
    8584:	31ffffc4 	addi	r7,r6,-1
    8588:	30004026 	beq	r6,zero,868c <memset+0x114>
    858c:	2813883a 	mov	r9,r5
    8590:	200d883a 	mov	r6,r4
    8594:	2007883a 	mov	r3,r4
    8598:	00000406 	br	85ac <memset+0x34>
    859c:	3a3fffc4 	addi	r8,r7,-1
    85a0:	31800044 	addi	r6,r6,1
    85a4:	38003926 	beq	r7,zero,868c <memset+0x114>
    85a8:	400f883a 	mov	r7,r8
    85ac:	18c00044 	addi	r3,r3,1
    85b0:	32400005 	stb	r9,0(r6)
    85b4:	1a0000cc 	andi	r8,r3,3
    85b8:	403ff81e 	bne	r8,zero,859c <__alt_data_end+0xfffb2e6c>
    85bc:	010000c4 	movi	r4,3
    85c0:	21c02d2e 	bgeu	r4,r7,8678 <memset+0x100>
    85c4:	29803fcc 	andi	r6,r5,255
    85c8:	3008923a 	slli	r4,r6,8
    85cc:	218cb03a 	or	r6,r4,r6
    85d0:	3008943a 	slli	r4,r6,16
    85d4:	218cb03a 	or	r6,r4,r6
    85d8:	010003c4 	movi	r4,15
    85dc:	21c0182e 	bgeu	r4,r7,8640 <memset+0xc8>
    85e0:	3b3ffc04 	addi	r12,r7,-16
    85e4:	6018d13a 	srli	r12,r12,4
    85e8:	1a000104 	addi	r8,r3,4
    85ec:	1ac00204 	addi	r11,r3,8
    85f0:	6008913a 	slli	r4,r12,4
    85f4:	1a800304 	addi	r10,r3,12
    85f8:	1813883a 	mov	r9,r3
    85fc:	21000504 	addi	r4,r4,20
    8600:	1909883a 	add	r4,r3,r4
    8604:	49800015 	stw	r6,0(r9)
    8608:	41800015 	stw	r6,0(r8)
    860c:	59800015 	stw	r6,0(r11)
    8610:	51800015 	stw	r6,0(r10)
    8614:	42000404 	addi	r8,r8,16
    8618:	4a400404 	addi	r9,r9,16
    861c:	5ac00404 	addi	r11,r11,16
    8620:	52800404 	addi	r10,r10,16
    8624:	413ff71e 	bne	r8,r4,8604 <__alt_data_end+0xfffb2ed4>
    8628:	63000044 	addi	r12,r12,1
    862c:	6018913a 	slli	r12,r12,4
    8630:	39c003cc 	andi	r7,r7,15
    8634:	010000c4 	movi	r4,3
    8638:	1b07883a 	add	r3,r3,r12
    863c:	21c00e2e 	bgeu	r4,r7,8678 <memset+0x100>
    8640:	1813883a 	mov	r9,r3
    8644:	3811883a 	mov	r8,r7
    8648:	010000c4 	movi	r4,3
    864c:	49800015 	stw	r6,0(r9)
    8650:	423fff04 	addi	r8,r8,-4
    8654:	4a400104 	addi	r9,r9,4
    8658:	223ffc36 	bltu	r4,r8,864c <__alt_data_end+0xfffb2f1c>
    865c:	393fff04 	addi	r4,r7,-4
    8660:	2008d0ba 	srli	r4,r4,2
    8664:	39c000cc 	andi	r7,r7,3
    8668:	21000044 	addi	r4,r4,1
    866c:	2109883a 	add	r4,r4,r4
    8670:	2109883a 	add	r4,r4,r4
    8674:	1907883a 	add	r3,r3,r4
    8678:	38000426 	beq	r7,zero,868c <memset+0x114>
    867c:	19cf883a 	add	r7,r3,r7
    8680:	19400005 	stb	r5,0(r3)
    8684:	18c00044 	addi	r3,r3,1
    8688:	19fffd1e 	bne	r3,r7,8680 <__alt_data_end+0xfffb2f50>
    868c:	f800283a 	ret
    8690:	2007883a 	mov	r3,r4
    8694:	300f883a 	mov	r7,r6
    8698:	003fc806 	br	85bc <__alt_data_end+0xfffb2e8c>

0000869c <_Balloc>:
    869c:	20801317 	ldw	r2,76(r4)
    86a0:	defffc04 	addi	sp,sp,-16
    86a4:	dc400115 	stw	r17,4(sp)
    86a8:	dc000015 	stw	r16,0(sp)
    86ac:	dfc00315 	stw	ra,12(sp)
    86b0:	dc800215 	stw	r18,8(sp)
    86b4:	2023883a 	mov	r17,r4
    86b8:	2821883a 	mov	r16,r5
    86bc:	10000f26 	beq	r2,zero,86fc <_Balloc+0x60>
    86c0:	8407883a 	add	r3,r16,r16
    86c4:	18c7883a 	add	r3,r3,r3
    86c8:	10c7883a 	add	r3,r2,r3
    86cc:	18800017 	ldw	r2,0(r3)
    86d0:	10001126 	beq	r2,zero,8718 <_Balloc+0x7c>
    86d4:	11000017 	ldw	r4,0(r2)
    86d8:	19000015 	stw	r4,0(r3)
    86dc:	10000415 	stw	zero,16(r2)
    86e0:	10000315 	stw	zero,12(r2)
    86e4:	dfc00317 	ldw	ra,12(sp)
    86e8:	dc800217 	ldw	r18,8(sp)
    86ec:	dc400117 	ldw	r17,4(sp)
    86f0:	dc000017 	ldw	r16,0(sp)
    86f4:	dec00404 	addi	sp,sp,16
    86f8:	f800283a 	ret
    86fc:	01400104 	movi	r5,4
    8700:	01800844 	movi	r6,33
    8704:	000b4e40 	call	b4e4 <_calloc_r>
    8708:	88801315 	stw	r2,76(r17)
    870c:	103fec1e 	bne	r2,zero,86c0 <__alt_data_end+0xfffb2f90>
    8710:	0005883a 	mov	r2,zero
    8714:	003ff306 	br	86e4 <__alt_data_end+0xfffb2fb4>
    8718:	01400044 	movi	r5,1
    871c:	2c24983a 	sll	r18,r5,r16
    8720:	8809883a 	mov	r4,r17
    8724:	91800144 	addi	r6,r18,5
    8728:	318d883a 	add	r6,r6,r6
    872c:	318d883a 	add	r6,r6,r6
    8730:	000b4e40 	call	b4e4 <_calloc_r>
    8734:	103ff626 	beq	r2,zero,8710 <__alt_data_end+0xfffb2fe0>
    8738:	14000115 	stw	r16,4(r2)
    873c:	14800215 	stw	r18,8(r2)
    8740:	003fe606 	br	86dc <__alt_data_end+0xfffb2fac>

00008744 <_Bfree>:
    8744:	28000826 	beq	r5,zero,8768 <_Bfree+0x24>
    8748:	28c00117 	ldw	r3,4(r5)
    874c:	20801317 	ldw	r2,76(r4)
    8750:	18c7883a 	add	r3,r3,r3
    8754:	18c7883a 	add	r3,r3,r3
    8758:	10c5883a 	add	r2,r2,r3
    875c:	10c00017 	ldw	r3,0(r2)
    8760:	28c00015 	stw	r3,0(r5)
    8764:	11400015 	stw	r5,0(r2)
    8768:	f800283a 	ret

0000876c <__multadd>:
    876c:	defff704 	addi	sp,sp,-36
    8770:	dc800215 	stw	r18,8(sp)
    8774:	2c800417 	ldw	r18,16(r5)
    8778:	ddc00715 	stw	r23,28(sp)
    877c:	dd800615 	stw	r22,24(sp)
    8780:	dd000415 	stw	r20,16(sp)
    8784:	dcc00315 	stw	r19,12(sp)
    8788:	dc400115 	stw	r17,4(sp)
    878c:	dc000015 	stw	r16,0(sp)
    8790:	dfc00815 	stw	ra,32(sp)
    8794:	dd400515 	stw	r21,20(sp)
    8798:	2827883a 	mov	r19,r5
    879c:	2029883a 	mov	r20,r4
    87a0:	3023883a 	mov	r17,r6
    87a4:	3821883a 	mov	r16,r7
    87a8:	2d800504 	addi	r22,r5,20
    87ac:	002f883a 	mov	r23,zero
    87b0:	b5400017 	ldw	r21,0(r22)
    87b4:	880b883a 	mov	r5,r17
    87b8:	bdc00044 	addi	r23,r23,1
    87bc:	a93fffcc 	andi	r4,r21,65535
    87c0:	000cb080 	call	cb08 <__mulsi3>
    87c4:	1421883a 	add	r16,r2,r16
    87c8:	a808d43a 	srli	r4,r21,16
    87cc:	802ad43a 	srli	r21,r16,16
    87d0:	880b883a 	mov	r5,r17
    87d4:	000cb080 	call	cb08 <__mulsi3>
    87d8:	a88f883a 	add	r7,r21,r2
    87dc:	3804943a 	slli	r2,r7,16
    87e0:	80ffffcc 	andi	r3,r16,65535
    87e4:	b5800104 	addi	r22,r22,4
    87e8:	10c7883a 	add	r3,r2,r3
    87ec:	b0ffff15 	stw	r3,-4(r22)
    87f0:	3820d43a 	srli	r16,r7,16
    87f4:	bcbfee16 	blt	r23,r18,87b0 <__alt_data_end+0xfffb3080>
    87f8:	80000926 	beq	r16,zero,8820 <__multadd+0xb4>
    87fc:	98800217 	ldw	r2,8(r19)
    8800:	9080130e 	bge	r18,r2,8850 <__multadd+0xe4>
    8804:	90800144 	addi	r2,r18,5
    8808:	1085883a 	add	r2,r2,r2
    880c:	1085883a 	add	r2,r2,r2
    8810:	9885883a 	add	r2,r19,r2
    8814:	14000015 	stw	r16,0(r2)
    8818:	94800044 	addi	r18,r18,1
    881c:	9c800415 	stw	r18,16(r19)
    8820:	9805883a 	mov	r2,r19
    8824:	dfc00817 	ldw	ra,32(sp)
    8828:	ddc00717 	ldw	r23,28(sp)
    882c:	dd800617 	ldw	r22,24(sp)
    8830:	dd400517 	ldw	r21,20(sp)
    8834:	dd000417 	ldw	r20,16(sp)
    8838:	dcc00317 	ldw	r19,12(sp)
    883c:	dc800217 	ldw	r18,8(sp)
    8840:	dc400117 	ldw	r17,4(sp)
    8844:	dc000017 	ldw	r16,0(sp)
    8848:	dec00904 	addi	sp,sp,36
    884c:	f800283a 	ret
    8850:	99400117 	ldw	r5,4(r19)
    8854:	a009883a 	mov	r4,r20
    8858:	29400044 	addi	r5,r5,1
    885c:	000869c0 	call	869c <_Balloc>
    8860:	99800417 	ldw	r6,16(r19)
    8864:	99400304 	addi	r5,r19,12
    8868:	11000304 	addi	r4,r2,12
    886c:	31800084 	addi	r6,r6,2
    8870:	318d883a 	add	r6,r6,r6
    8874:	318d883a 	add	r6,r6,r6
    8878:	1023883a 	mov	r17,r2
    887c:	00082e40 	call	82e4 <memcpy>
    8880:	99000117 	ldw	r4,4(r19)
    8884:	a0c01317 	ldw	r3,76(r20)
    8888:	2109883a 	add	r4,r4,r4
    888c:	2109883a 	add	r4,r4,r4
    8890:	1907883a 	add	r3,r3,r4
    8894:	18800017 	ldw	r2,0(r3)
    8898:	98800015 	stw	r2,0(r19)
    889c:	1cc00015 	stw	r19,0(r3)
    88a0:	8827883a 	mov	r19,r17
    88a4:	003fd706 	br	8804 <__alt_data_end+0xfffb30d4>

000088a8 <__s2b>:
    88a8:	defff904 	addi	sp,sp,-28
    88ac:	dc400115 	stw	r17,4(sp)
    88b0:	dc000015 	stw	r16,0(sp)
    88b4:	2023883a 	mov	r17,r4
    88b8:	2821883a 	mov	r16,r5
    88bc:	39000204 	addi	r4,r7,8
    88c0:	01400244 	movi	r5,9
    88c4:	dcc00315 	stw	r19,12(sp)
    88c8:	dc800215 	stw	r18,8(sp)
    88cc:	dfc00615 	stw	ra,24(sp)
    88d0:	dd400515 	stw	r21,20(sp)
    88d4:	dd000415 	stw	r20,16(sp)
    88d8:	3825883a 	mov	r18,r7
    88dc:	3027883a 	mov	r19,r6
    88e0:	000ca480 	call	ca48 <__divsi3>
    88e4:	00c00044 	movi	r3,1
    88e8:	000b883a 	mov	r5,zero
    88ec:	1880030e 	bge	r3,r2,88fc <__s2b+0x54>
    88f0:	18c7883a 	add	r3,r3,r3
    88f4:	29400044 	addi	r5,r5,1
    88f8:	18bffd16 	blt	r3,r2,88f0 <__alt_data_end+0xfffb31c0>
    88fc:	8809883a 	mov	r4,r17
    8900:	000869c0 	call	869c <_Balloc>
    8904:	d8c00717 	ldw	r3,28(sp)
    8908:	10c00515 	stw	r3,20(r2)
    890c:	00c00044 	movi	r3,1
    8910:	10c00415 	stw	r3,16(r2)
    8914:	00c00244 	movi	r3,9
    8918:	1cc0210e 	bge	r3,r19,89a0 <__s2b+0xf8>
    891c:	80eb883a 	add	r21,r16,r3
    8920:	a829883a 	mov	r20,r21
    8924:	84e1883a 	add	r16,r16,r19
    8928:	a1c00007 	ldb	r7,0(r20)
    892c:	8809883a 	mov	r4,r17
    8930:	a5000044 	addi	r20,r20,1
    8934:	100b883a 	mov	r5,r2
    8938:	01800284 	movi	r6,10
    893c:	39fff404 	addi	r7,r7,-48
    8940:	000876c0 	call	876c <__multadd>
    8944:	a43ff81e 	bne	r20,r16,8928 <__alt_data_end+0xfffb31f8>
    8948:	ace1883a 	add	r16,r21,r19
    894c:	843ffe04 	addi	r16,r16,-8
    8950:	9c800a0e 	bge	r19,r18,897c <__s2b+0xd4>
    8954:	94e5c83a 	sub	r18,r18,r19
    8958:	84a5883a 	add	r18,r16,r18
    895c:	81c00007 	ldb	r7,0(r16)
    8960:	8809883a 	mov	r4,r17
    8964:	84000044 	addi	r16,r16,1
    8968:	100b883a 	mov	r5,r2
    896c:	01800284 	movi	r6,10
    8970:	39fff404 	addi	r7,r7,-48
    8974:	000876c0 	call	876c <__multadd>
    8978:	84bff81e 	bne	r16,r18,895c <__alt_data_end+0xfffb322c>
    897c:	dfc00617 	ldw	ra,24(sp)
    8980:	dd400517 	ldw	r21,20(sp)
    8984:	dd000417 	ldw	r20,16(sp)
    8988:	dcc00317 	ldw	r19,12(sp)
    898c:	dc800217 	ldw	r18,8(sp)
    8990:	dc400117 	ldw	r17,4(sp)
    8994:	dc000017 	ldw	r16,0(sp)
    8998:	dec00704 	addi	sp,sp,28
    899c:	f800283a 	ret
    89a0:	84000284 	addi	r16,r16,10
    89a4:	1827883a 	mov	r19,r3
    89a8:	003fe906 	br	8950 <__alt_data_end+0xfffb3220>

000089ac <__hi0bits>:
    89ac:	20bfffec 	andhi	r2,r4,65535
    89b0:	1000141e 	bne	r2,zero,8a04 <__hi0bits+0x58>
    89b4:	2008943a 	slli	r4,r4,16
    89b8:	00800404 	movi	r2,16
    89bc:	20ffc02c 	andhi	r3,r4,65280
    89c0:	1800021e 	bne	r3,zero,89cc <__hi0bits+0x20>
    89c4:	2008923a 	slli	r4,r4,8
    89c8:	10800204 	addi	r2,r2,8
    89cc:	20fc002c 	andhi	r3,r4,61440
    89d0:	1800021e 	bne	r3,zero,89dc <__hi0bits+0x30>
    89d4:	2008913a 	slli	r4,r4,4
    89d8:	10800104 	addi	r2,r2,4
    89dc:	20f0002c 	andhi	r3,r4,49152
    89e0:	1800031e 	bne	r3,zero,89f0 <__hi0bits+0x44>
    89e4:	2109883a 	add	r4,r4,r4
    89e8:	10800084 	addi	r2,r2,2
    89ec:	2109883a 	add	r4,r4,r4
    89f0:	20000316 	blt	r4,zero,8a00 <__hi0bits+0x54>
    89f4:	2110002c 	andhi	r4,r4,16384
    89f8:	2000041e 	bne	r4,zero,8a0c <__hi0bits+0x60>
    89fc:	00800804 	movi	r2,32
    8a00:	f800283a 	ret
    8a04:	0005883a 	mov	r2,zero
    8a08:	003fec06 	br	89bc <__alt_data_end+0xfffb328c>
    8a0c:	10800044 	addi	r2,r2,1
    8a10:	f800283a 	ret

00008a14 <__lo0bits>:
    8a14:	20c00017 	ldw	r3,0(r4)
    8a18:	188001cc 	andi	r2,r3,7
    8a1c:	10000826 	beq	r2,zero,8a40 <__lo0bits+0x2c>
    8a20:	1880004c 	andi	r2,r3,1
    8a24:	1000211e 	bne	r2,zero,8aac <__lo0bits+0x98>
    8a28:	1880008c 	andi	r2,r3,2
    8a2c:	1000211e 	bne	r2,zero,8ab4 <__lo0bits+0xa0>
    8a30:	1806d0ba 	srli	r3,r3,2
    8a34:	00800084 	movi	r2,2
    8a38:	20c00015 	stw	r3,0(r4)
    8a3c:	f800283a 	ret
    8a40:	18bfffcc 	andi	r2,r3,65535
    8a44:	10001326 	beq	r2,zero,8a94 <__lo0bits+0x80>
    8a48:	0005883a 	mov	r2,zero
    8a4c:	19403fcc 	andi	r5,r3,255
    8a50:	2800021e 	bne	r5,zero,8a5c <__lo0bits+0x48>
    8a54:	1806d23a 	srli	r3,r3,8
    8a58:	10800204 	addi	r2,r2,8
    8a5c:	194003cc 	andi	r5,r3,15
    8a60:	2800021e 	bne	r5,zero,8a6c <__lo0bits+0x58>
    8a64:	1806d13a 	srli	r3,r3,4
    8a68:	10800104 	addi	r2,r2,4
    8a6c:	194000cc 	andi	r5,r3,3
    8a70:	2800021e 	bne	r5,zero,8a7c <__lo0bits+0x68>
    8a74:	1806d0ba 	srli	r3,r3,2
    8a78:	10800084 	addi	r2,r2,2
    8a7c:	1940004c 	andi	r5,r3,1
    8a80:	2800081e 	bne	r5,zero,8aa4 <__lo0bits+0x90>
    8a84:	1806d07a 	srli	r3,r3,1
    8a88:	1800051e 	bne	r3,zero,8aa0 <__lo0bits+0x8c>
    8a8c:	00800804 	movi	r2,32
    8a90:	f800283a 	ret
    8a94:	1806d43a 	srli	r3,r3,16
    8a98:	00800404 	movi	r2,16
    8a9c:	003feb06 	br	8a4c <__alt_data_end+0xfffb331c>
    8aa0:	10800044 	addi	r2,r2,1
    8aa4:	20c00015 	stw	r3,0(r4)
    8aa8:	f800283a 	ret
    8aac:	0005883a 	mov	r2,zero
    8ab0:	f800283a 	ret
    8ab4:	1806d07a 	srli	r3,r3,1
    8ab8:	00800044 	movi	r2,1
    8abc:	20c00015 	stw	r3,0(r4)
    8ac0:	f800283a 	ret

00008ac4 <__i2b>:
    8ac4:	defffd04 	addi	sp,sp,-12
    8ac8:	dc000015 	stw	r16,0(sp)
    8acc:	04000044 	movi	r16,1
    8ad0:	dc400115 	stw	r17,4(sp)
    8ad4:	2823883a 	mov	r17,r5
    8ad8:	800b883a 	mov	r5,r16
    8adc:	dfc00215 	stw	ra,8(sp)
    8ae0:	000869c0 	call	869c <_Balloc>
    8ae4:	14400515 	stw	r17,20(r2)
    8ae8:	14000415 	stw	r16,16(r2)
    8aec:	dfc00217 	ldw	ra,8(sp)
    8af0:	dc400117 	ldw	r17,4(sp)
    8af4:	dc000017 	ldw	r16,0(sp)
    8af8:	dec00304 	addi	sp,sp,12
    8afc:	f800283a 	ret

00008b00 <__multiply>:
    8b00:	deffef04 	addi	sp,sp,-68
    8b04:	dc400815 	stw	r17,32(sp)
    8b08:	dc000715 	stw	r16,28(sp)
    8b0c:	2c400417 	ldw	r17,16(r5)
    8b10:	34000417 	ldw	r16,16(r6)
    8b14:	dd800d15 	stw	r22,52(sp)
    8b18:	dc800915 	stw	r18,36(sp)
    8b1c:	dfc01015 	stw	ra,64(sp)
    8b20:	df000f15 	stw	fp,60(sp)
    8b24:	ddc00e15 	stw	r23,56(sp)
    8b28:	dd400c15 	stw	r21,48(sp)
    8b2c:	dd000b15 	stw	r20,44(sp)
    8b30:	dcc00a15 	stw	r19,40(sp)
    8b34:	2825883a 	mov	r18,r5
    8b38:	302d883a 	mov	r22,r6
    8b3c:	8c009116 	blt	r17,r16,8d84 <__multiply+0x284>
    8b40:	8005883a 	mov	r2,r16
    8b44:	8821883a 	mov	r16,r17
    8b48:	1023883a 	mov	r17,r2
    8b4c:	90800217 	ldw	r2,8(r18)
    8b50:	8447883a 	add	r3,r16,r17
    8b54:	d8c00215 	stw	r3,8(sp)
    8b58:	91400117 	ldw	r5,4(r18)
    8b5c:	10c0010e 	bge	r2,r3,8b64 <__multiply+0x64>
    8b60:	29400044 	addi	r5,r5,1
    8b64:	000869c0 	call	869c <_Balloc>
    8b68:	d8c00217 	ldw	r3,8(sp)
    8b6c:	d8800615 	stw	r2,24(sp)
    8b70:	18eb883a 	add	r21,r3,r3
    8b74:	ad6b883a 	add	r21,r21,r21
    8b78:	10c00504 	addi	r3,r2,20
    8b7c:	1d6b883a 	add	r21,r3,r21
    8b80:	d8c00115 	stw	r3,4(sp)
    8b84:	dd400315 	stw	r21,12(sp)
    8b88:	1805883a 	mov	r2,r3
    8b8c:	1d40042e 	bgeu	r3,r21,8ba0 <__multiply+0xa0>
    8b90:	d8c00317 	ldw	r3,12(sp)
    8b94:	10000015 	stw	zero,0(r2)
    8b98:	10800104 	addi	r2,r2,4
    8b9c:	10fffc36 	bltu	r2,r3,8b90 <__alt_data_end+0xfffb3460>
    8ba0:	8c63883a 	add	r17,r17,r17
    8ba4:	b5800504 	addi	r22,r22,20
    8ba8:	8c63883a 	add	r17,r17,r17
    8bac:	94800504 	addi	r18,r18,20
    8bb0:	8421883a 	add	r16,r16,r16
    8bb4:	b463883a 	add	r17,r22,r17
    8bb8:	8421883a 	add	r16,r16,r16
    8bbc:	dd800015 	stw	r22,0(sp)
    8bc0:	dc800415 	stw	r18,16(sp)
    8bc4:	dc400515 	stw	r17,20(sp)
    8bc8:	9429883a 	add	r20,r18,r16
    8bcc:	b4404f2e 	bgeu	r22,r17,8d0c <__multiply+0x20c>
    8bd0:	d8c00017 	ldw	r3,0(sp)
    8bd4:	1c800017 	ldw	r18,0(r3)
    8bd8:	943fffcc 	andi	r16,r18,65535
    8bdc:	80001e26 	beq	r16,zero,8c58 <__multiply+0x158>
    8be0:	dd800117 	ldw	r22,4(sp)
    8be4:	dd400417 	ldw	r21,16(sp)
    8be8:	0025883a 	mov	r18,zero
    8bec:	adc00017 	ldw	r23,0(r21)
    8bf0:	b4c00017 	ldw	r19,0(r22)
    8bf4:	800b883a 	mov	r5,r16
    8bf8:	b93fffcc 	andi	r4,r23,65535
    8bfc:	000cb080 	call	cb08 <__mulsi3>
    8c00:	9c7fffcc 	andi	r17,r19,65535
    8c04:	8885883a 	add	r2,r17,r2
    8c08:	b808d43a 	srli	r4,r23,16
    8c0c:	14a3883a 	add	r17,r2,r18
    8c10:	9826d43a 	srli	r19,r19,16
    8c14:	8824d43a 	srli	r18,r17,16
    8c18:	800b883a 	mov	r5,r16
    8c1c:	000cb080 	call	cb08 <__mulsi3>
    8c20:	9885883a 	add	r2,r19,r2
    8c24:	14a7883a 	add	r19,r2,r18
    8c28:	88ffffcc 	andi	r3,r17,65535
    8c2c:	9822943a 	slli	r17,r19,16
    8c30:	ad400104 	addi	r21,r21,4
    8c34:	b005883a 	mov	r2,r22
    8c38:	88c6b03a 	or	r3,r17,r3
    8c3c:	b0c00015 	stw	r3,0(r22)
    8c40:	9824d43a 	srli	r18,r19,16
    8c44:	b5800104 	addi	r22,r22,4
    8c48:	ad3fe836 	bltu	r21,r20,8bec <__alt_data_end+0xfffb34bc>
    8c4c:	d8c00017 	ldw	r3,0(sp)
    8c50:	14800115 	stw	r18,4(r2)
    8c54:	1c800017 	ldw	r18,0(r3)
    8c58:	9024d43a 	srli	r18,r18,16
    8c5c:	90002226 	beq	r18,zero,8ce8 <__multiply+0x1e8>
    8c60:	d8c00117 	ldw	r3,4(sp)
    8c64:	dd800417 	ldw	r22,16(sp)
    8c68:	002f883a 	mov	r23,zero
    8c6c:	1f000017 	ldw	fp,0(r3)
    8c70:	1823883a 	mov	r17,r3
    8c74:	182b883a 	mov	r21,r3
    8c78:	e021883a 	mov	r16,fp
    8c7c:	00000106 	br	8c84 <__multiply+0x184>
    8c80:	982b883a 	mov	r21,r19
    8c84:	b100000b 	ldhu	r4,0(r22)
    8c88:	8020d43a 	srli	r16,r16,16
    8c8c:	900b883a 	mov	r5,r18
    8c90:	000cb080 	call	cb08 <__mulsi3>
    8c94:	1405883a 	add	r2,r2,r16
    8c98:	15ef883a 	add	r23,r2,r23
    8c9c:	b804943a 	slli	r2,r23,16
    8ca0:	e0ffffcc 	andi	r3,fp,65535
    8ca4:	8c400104 	addi	r17,r17,4
    8ca8:	10c6b03a 	or	r3,r2,r3
    8cac:	88ffff15 	stw	r3,-4(r17)
    8cb0:	b5800104 	addi	r22,r22,4
    8cb4:	b13fff17 	ldw	r4,-4(r22)
    8cb8:	acc00104 	addi	r19,r21,4
    8cbc:	900b883a 	mov	r5,r18
    8cc0:	2008d43a 	srli	r4,r4,16
    8cc4:	9c000017 	ldw	r16,0(r19)
    8cc8:	000cb080 	call	cb08 <__mulsi3>
    8ccc:	b806d43a 	srli	r3,r23,16
    8cd0:	813fffcc 	andi	r4,r16,65535
    8cd4:	1105883a 	add	r2,r2,r4
    8cd8:	10f9883a 	add	fp,r2,r3
    8cdc:	e02ed43a 	srli	r23,fp,16
    8ce0:	b53fe736 	bltu	r22,r20,8c80 <__alt_data_end+0xfffb3550>
    8ce4:	af000115 	stw	fp,4(r21)
    8ce8:	d8c00017 	ldw	r3,0(sp)
    8cec:	d9000517 	ldw	r4,20(sp)
    8cf0:	18c00104 	addi	r3,r3,4
    8cf4:	d8c00015 	stw	r3,0(sp)
    8cf8:	d8c00117 	ldw	r3,4(sp)
    8cfc:	18c00104 	addi	r3,r3,4
    8d00:	d8c00115 	stw	r3,4(sp)
    8d04:	d8c00017 	ldw	r3,0(sp)
    8d08:	193fb136 	bltu	r3,r4,8bd0 <__alt_data_end+0xfffb34a0>
    8d0c:	d8c00217 	ldw	r3,8(sp)
    8d10:	00c00c0e 	bge	zero,r3,8d44 <__multiply+0x244>
    8d14:	d8c00317 	ldw	r3,12(sp)
    8d18:	18bfff17 	ldw	r2,-4(r3)
    8d1c:	1d7fff04 	addi	r21,r3,-4
    8d20:	10000326 	beq	r2,zero,8d30 <__multiply+0x230>
    8d24:	00000706 	br	8d44 <__multiply+0x244>
    8d28:	a8800017 	ldw	r2,0(r21)
    8d2c:	1000051e 	bne	r2,zero,8d44 <__multiply+0x244>
    8d30:	d8c00217 	ldw	r3,8(sp)
    8d34:	ad7fff04 	addi	r21,r21,-4
    8d38:	18ffffc4 	addi	r3,r3,-1
    8d3c:	d8c00215 	stw	r3,8(sp)
    8d40:	183ff91e 	bne	r3,zero,8d28 <__alt_data_end+0xfffb35f8>
    8d44:	d8c00617 	ldw	r3,24(sp)
    8d48:	d9000217 	ldw	r4,8(sp)
    8d4c:	1805883a 	mov	r2,r3
    8d50:	19000415 	stw	r4,16(r3)
    8d54:	dfc01017 	ldw	ra,64(sp)
    8d58:	df000f17 	ldw	fp,60(sp)
    8d5c:	ddc00e17 	ldw	r23,56(sp)
    8d60:	dd800d17 	ldw	r22,52(sp)
    8d64:	dd400c17 	ldw	r21,48(sp)
    8d68:	dd000b17 	ldw	r20,44(sp)
    8d6c:	dcc00a17 	ldw	r19,40(sp)
    8d70:	dc800917 	ldw	r18,36(sp)
    8d74:	dc400817 	ldw	r17,32(sp)
    8d78:	dc000717 	ldw	r16,28(sp)
    8d7c:	dec01104 	addi	sp,sp,68
    8d80:	f800283a 	ret
    8d84:	3025883a 	mov	r18,r6
    8d88:	282d883a 	mov	r22,r5
    8d8c:	003f6f06 	br	8b4c <__alt_data_end+0xfffb341c>

00008d90 <__pow5mult>:
    8d90:	defffa04 	addi	sp,sp,-24
    8d94:	dcc00315 	stw	r19,12(sp)
    8d98:	dc800215 	stw	r18,8(sp)
    8d9c:	dc000015 	stw	r16,0(sp)
    8da0:	dfc00515 	stw	ra,20(sp)
    8da4:	dd000415 	stw	r20,16(sp)
    8da8:	dc400115 	stw	r17,4(sp)
    8dac:	308000cc 	andi	r2,r6,3
    8db0:	3021883a 	mov	r16,r6
    8db4:	2027883a 	mov	r19,r4
    8db8:	2825883a 	mov	r18,r5
    8dbc:	10002e1e 	bne	r2,zero,8e78 <__pow5mult+0xe8>
    8dc0:	8021d0ba 	srai	r16,r16,2
    8dc4:	80001a26 	beq	r16,zero,8e30 <__pow5mult+0xa0>
    8dc8:	9c401217 	ldw	r17,72(r19)
    8dcc:	8800061e 	bne	r17,zero,8de8 <__pow5mult+0x58>
    8dd0:	00003406 	br	8ea4 <__pow5mult+0x114>
    8dd4:	8021d07a 	srai	r16,r16,1
    8dd8:	80001526 	beq	r16,zero,8e30 <__pow5mult+0xa0>
    8ddc:	88800017 	ldw	r2,0(r17)
    8de0:	10001c26 	beq	r2,zero,8e54 <__pow5mult+0xc4>
    8de4:	1023883a 	mov	r17,r2
    8de8:	80c0004c 	andi	r3,r16,1
    8dec:	183ff926 	beq	r3,zero,8dd4 <__alt_data_end+0xfffb36a4>
    8df0:	900b883a 	mov	r5,r18
    8df4:	880d883a 	mov	r6,r17
    8df8:	9809883a 	mov	r4,r19
    8dfc:	0008b000 	call	8b00 <__multiply>
    8e00:	90001b26 	beq	r18,zero,8e70 <__pow5mult+0xe0>
    8e04:	91c00117 	ldw	r7,4(r18)
    8e08:	98c01317 	ldw	r3,76(r19)
    8e0c:	8021d07a 	srai	r16,r16,1
    8e10:	39cf883a 	add	r7,r7,r7
    8e14:	39cf883a 	add	r7,r7,r7
    8e18:	19c7883a 	add	r3,r3,r7
    8e1c:	19000017 	ldw	r4,0(r3)
    8e20:	91000015 	stw	r4,0(r18)
    8e24:	1c800015 	stw	r18,0(r3)
    8e28:	1025883a 	mov	r18,r2
    8e2c:	803feb1e 	bne	r16,zero,8ddc <__alt_data_end+0xfffb36ac>
    8e30:	9005883a 	mov	r2,r18
    8e34:	dfc00517 	ldw	ra,20(sp)
    8e38:	dd000417 	ldw	r20,16(sp)
    8e3c:	dcc00317 	ldw	r19,12(sp)
    8e40:	dc800217 	ldw	r18,8(sp)
    8e44:	dc400117 	ldw	r17,4(sp)
    8e48:	dc000017 	ldw	r16,0(sp)
    8e4c:	dec00604 	addi	sp,sp,24
    8e50:	f800283a 	ret
    8e54:	9809883a 	mov	r4,r19
    8e58:	880b883a 	mov	r5,r17
    8e5c:	880d883a 	mov	r6,r17
    8e60:	0008b000 	call	8b00 <__multiply>
    8e64:	88800015 	stw	r2,0(r17)
    8e68:	10000015 	stw	zero,0(r2)
    8e6c:	003fdd06 	br	8de4 <__alt_data_end+0xfffb36b4>
    8e70:	1025883a 	mov	r18,r2
    8e74:	003fd706 	br	8dd4 <__alt_data_end+0xfffb36a4>
    8e78:	10bfffc4 	addi	r2,r2,-1
    8e7c:	1085883a 	add	r2,r2,r2
    8e80:	00c00074 	movhi	r3,1
    8e84:	18c8f204 	addi	r3,r3,9160
    8e88:	1085883a 	add	r2,r2,r2
    8e8c:	1885883a 	add	r2,r3,r2
    8e90:	11800017 	ldw	r6,0(r2)
    8e94:	000f883a 	mov	r7,zero
    8e98:	000876c0 	call	876c <__multadd>
    8e9c:	1025883a 	mov	r18,r2
    8ea0:	003fc706 	br	8dc0 <__alt_data_end+0xfffb3690>
    8ea4:	05000044 	movi	r20,1
    8ea8:	9809883a 	mov	r4,r19
    8eac:	a00b883a 	mov	r5,r20
    8eb0:	000869c0 	call	869c <_Balloc>
    8eb4:	1023883a 	mov	r17,r2
    8eb8:	00809c44 	movi	r2,625
    8ebc:	88800515 	stw	r2,20(r17)
    8ec0:	8d000415 	stw	r20,16(r17)
    8ec4:	9c401215 	stw	r17,72(r19)
    8ec8:	88000015 	stw	zero,0(r17)
    8ecc:	003fc606 	br	8de8 <__alt_data_end+0xfffb36b8>

00008ed0 <__lshift>:
    8ed0:	defff904 	addi	sp,sp,-28
    8ed4:	dd000415 	stw	r20,16(sp)
    8ed8:	dcc00315 	stw	r19,12(sp)
    8edc:	3029d17a 	srai	r20,r6,5
    8ee0:	2cc00417 	ldw	r19,16(r5)
    8ee4:	28800217 	ldw	r2,8(r5)
    8ee8:	dd400515 	stw	r21,20(sp)
    8eec:	a4e7883a 	add	r19,r20,r19
    8ef0:	dc800215 	stw	r18,8(sp)
    8ef4:	dc400115 	stw	r17,4(sp)
    8ef8:	dc000015 	stw	r16,0(sp)
    8efc:	dfc00615 	stw	ra,24(sp)
    8f00:	9c000044 	addi	r16,r19,1
    8f04:	2823883a 	mov	r17,r5
    8f08:	302b883a 	mov	r21,r6
    8f0c:	2025883a 	mov	r18,r4
    8f10:	29400117 	ldw	r5,4(r5)
    8f14:	1400030e 	bge	r2,r16,8f24 <__lshift+0x54>
    8f18:	1085883a 	add	r2,r2,r2
    8f1c:	29400044 	addi	r5,r5,1
    8f20:	143ffd16 	blt	r2,r16,8f18 <__alt_data_end+0xfffb37e8>
    8f24:	9009883a 	mov	r4,r18
    8f28:	000869c0 	call	869c <_Balloc>
    8f2c:	11c00504 	addi	r7,r2,20
    8f30:	0500090e 	bge	zero,r20,8f58 <__lshift+0x88>
    8f34:	3811883a 	mov	r8,r7
    8f38:	0007883a 	mov	r3,zero
    8f3c:	40000015 	stw	zero,0(r8)
    8f40:	18c00044 	addi	r3,r3,1
    8f44:	42000104 	addi	r8,r8,4
    8f48:	1d3ffc1e 	bne	r3,r20,8f3c <__alt_data_end+0xfffb380c>
    8f4c:	18c7883a 	add	r3,r3,r3
    8f50:	18c7883a 	add	r3,r3,r3
    8f54:	38cf883a 	add	r7,r7,r3
    8f58:	89000417 	ldw	r4,16(r17)
    8f5c:	88c00504 	addi	r3,r17,20
    8f60:	a98007cc 	andi	r6,r21,31
    8f64:	2109883a 	add	r4,r4,r4
    8f68:	2109883a 	add	r4,r4,r4
    8f6c:	1909883a 	add	r4,r3,r4
    8f70:	30002326 	beq	r6,zero,9000 <__lshift+0x130>
    8f74:	01400804 	movi	r5,32
    8f78:	298bc83a 	sub	r5,r5,r6
    8f7c:	0013883a 	mov	r9,zero
    8f80:	1a000017 	ldw	r8,0(r3)
    8f84:	3815883a 	mov	r10,r7
    8f88:	39c00104 	addi	r7,r7,4
    8f8c:	4190983a 	sll	r8,r8,r6
    8f90:	18c00104 	addi	r3,r3,4
    8f94:	4a10b03a 	or	r8,r9,r8
    8f98:	3a3fff15 	stw	r8,-4(r7)
    8f9c:	1a3fff17 	ldw	r8,-4(r3)
    8fa0:	4152d83a 	srl	r9,r8,r5
    8fa4:	193ff636 	bltu	r3,r4,8f80 <__alt_data_end+0xfffb3850>
    8fa8:	52400115 	stw	r9,4(r10)
    8fac:	48000126 	beq	r9,zero,8fb4 <__lshift+0xe4>
    8fb0:	9c000084 	addi	r16,r19,2
    8fb4:	89000117 	ldw	r4,4(r17)
    8fb8:	90c01317 	ldw	r3,76(r18)
    8fbc:	843fffc4 	addi	r16,r16,-1
    8fc0:	2109883a 	add	r4,r4,r4
    8fc4:	2109883a 	add	r4,r4,r4
    8fc8:	1907883a 	add	r3,r3,r4
    8fcc:	19000017 	ldw	r4,0(r3)
    8fd0:	14000415 	stw	r16,16(r2)
    8fd4:	89000015 	stw	r4,0(r17)
    8fd8:	1c400015 	stw	r17,0(r3)
    8fdc:	dfc00617 	ldw	ra,24(sp)
    8fe0:	dd400517 	ldw	r21,20(sp)
    8fe4:	dd000417 	ldw	r20,16(sp)
    8fe8:	dcc00317 	ldw	r19,12(sp)
    8fec:	dc800217 	ldw	r18,8(sp)
    8ff0:	dc400117 	ldw	r17,4(sp)
    8ff4:	dc000017 	ldw	r16,0(sp)
    8ff8:	dec00704 	addi	sp,sp,28
    8ffc:	f800283a 	ret
    9000:	19400017 	ldw	r5,0(r3)
    9004:	39c00104 	addi	r7,r7,4
    9008:	18c00104 	addi	r3,r3,4
    900c:	397fff15 	stw	r5,-4(r7)
    9010:	193ffb36 	bltu	r3,r4,9000 <__alt_data_end+0xfffb38d0>
    9014:	003fe706 	br	8fb4 <__alt_data_end+0xfffb3884>

00009018 <__mcmp>:
    9018:	20800417 	ldw	r2,16(r4)
    901c:	28c00417 	ldw	r3,16(r5)
    9020:	10c5c83a 	sub	r2,r2,r3
    9024:	1000111e 	bne	r2,zero,906c <__mcmp+0x54>
    9028:	18c7883a 	add	r3,r3,r3
    902c:	18c7883a 	add	r3,r3,r3
    9030:	21000504 	addi	r4,r4,20
    9034:	29400504 	addi	r5,r5,20
    9038:	20c5883a 	add	r2,r4,r3
    903c:	28cb883a 	add	r5,r5,r3
    9040:	00000106 	br	9048 <__mcmp+0x30>
    9044:	20800a2e 	bgeu	r4,r2,9070 <__mcmp+0x58>
    9048:	10bfff04 	addi	r2,r2,-4
    904c:	297fff04 	addi	r5,r5,-4
    9050:	11800017 	ldw	r6,0(r2)
    9054:	28c00017 	ldw	r3,0(r5)
    9058:	30fffa26 	beq	r6,r3,9044 <__alt_data_end+0xfffb3914>
    905c:	30c00236 	bltu	r6,r3,9068 <__mcmp+0x50>
    9060:	00800044 	movi	r2,1
    9064:	f800283a 	ret
    9068:	00bfffc4 	movi	r2,-1
    906c:	f800283a 	ret
    9070:	0005883a 	mov	r2,zero
    9074:	f800283a 	ret

00009078 <__mdiff>:
    9078:	defffb04 	addi	sp,sp,-20
    907c:	dc000015 	stw	r16,0(sp)
    9080:	2821883a 	mov	r16,r5
    9084:	dcc00315 	stw	r19,12(sp)
    9088:	300b883a 	mov	r5,r6
    908c:	2027883a 	mov	r19,r4
    9090:	8009883a 	mov	r4,r16
    9094:	dc800215 	stw	r18,8(sp)
    9098:	dfc00415 	stw	ra,16(sp)
    909c:	dc400115 	stw	r17,4(sp)
    90a0:	3025883a 	mov	r18,r6
    90a4:	00090180 	call	9018 <__mcmp>
    90a8:	10005226 	beq	r2,zero,91f4 <__mdiff+0x17c>
    90ac:	10004c16 	blt	r2,zero,91e0 <__mdiff+0x168>
    90b0:	0023883a 	mov	r17,zero
    90b4:	81400117 	ldw	r5,4(r16)
    90b8:	9809883a 	mov	r4,r19
    90bc:	000869c0 	call	869c <_Balloc>
    90c0:	83400417 	ldw	r13,16(r16)
    90c4:	93800417 	ldw	r14,16(r18)
    90c8:	81000504 	addi	r4,r16,20
    90cc:	6b59883a 	add	r12,r13,r13
    90d0:	739d883a 	add	r14,r14,r14
    90d4:	6319883a 	add	r12,r12,r12
    90d8:	91800504 	addi	r6,r18,20
    90dc:	739d883a 	add	r14,r14,r14
    90e0:	14400315 	stw	r17,12(r2)
    90e4:	2319883a 	add	r12,r4,r12
    90e8:	339d883a 	add	r14,r6,r14
    90ec:	12400504 	addi	r9,r2,20
    90f0:	0007883a 	mov	r3,zero
    90f4:	22000017 	ldw	r8,0(r4)
    90f8:	32800017 	ldw	r10,0(r6)
    90fc:	4ac00104 	addi	r11,r9,4
    9100:	41ffffcc 	andi	r7,r8,65535
    9104:	38c7883a 	add	r3,r7,r3
    9108:	51ffffcc 	andi	r7,r10,65535
    910c:	19cfc83a 	sub	r7,r3,r7
    9110:	4010d43a 	srli	r8,r8,16
    9114:	5014d43a 	srli	r10,r10,16
    9118:	3807d43a 	srai	r3,r7,16
    911c:	39ffffcc 	andi	r7,r7,65535
    9120:	4291c83a 	sub	r8,r8,r10
    9124:	40c7883a 	add	r3,r8,r3
    9128:	1810943a 	slli	r8,r3,16
    912c:	31800104 	addi	r6,r6,4
    9130:	21000104 	addi	r4,r4,4
    9134:	41ceb03a 	or	r7,r8,r7
    9138:	49c00015 	stw	r7,0(r9)
    913c:	1807d43a 	srai	r3,r3,16
    9140:	580b883a 	mov	r5,r11
    9144:	5813883a 	mov	r9,r11
    9148:	33bfea36 	bltu	r6,r14,90f4 <__alt_data_end+0xfffb39c4>
    914c:	2011883a 	mov	r8,r4
    9150:	2300152e 	bgeu	r4,r12,91a8 <__mdiff+0x130>
    9154:	21400017 	ldw	r5,0(r4)
    9158:	4a400104 	addi	r9,r9,4
    915c:	21000104 	addi	r4,r4,4
    9160:	29ffffcc 	andi	r7,r5,65535
    9164:	38c7883a 	add	r3,r7,r3
    9168:	280ad43a 	srli	r5,r5,16
    916c:	180dd43a 	srai	r6,r3,16
    9170:	19ffffcc 	andi	r7,r3,65535
    9174:	3147883a 	add	r3,r6,r5
    9178:	180a943a 	slli	r5,r3,16
    917c:	1807d43a 	srai	r3,r3,16
    9180:	29ceb03a 	or	r7,r5,r7
    9184:	49ffff15 	stw	r7,-4(r9)
    9188:	233ff236 	bltu	r4,r12,9154 <__alt_data_end+0xfffb3a24>
    918c:	0206303a 	nor	r3,zero,r8
    9190:	1b07883a 	add	r3,r3,r12
    9194:	1806d0ba 	srli	r3,r3,2
    9198:	18c00044 	addi	r3,r3,1
    919c:	18c7883a 	add	r3,r3,r3
    91a0:	18c7883a 	add	r3,r3,r3
    91a4:	58cb883a 	add	r5,r11,r3
    91a8:	28ffff04 	addi	r3,r5,-4
    91ac:	3800041e 	bne	r7,zero,91c0 <__mdiff+0x148>
    91b0:	18ffff04 	addi	r3,r3,-4
    91b4:	19000017 	ldw	r4,0(r3)
    91b8:	6b7fffc4 	addi	r13,r13,-1
    91bc:	203ffc26 	beq	r4,zero,91b0 <__alt_data_end+0xfffb3a80>
    91c0:	13400415 	stw	r13,16(r2)
    91c4:	dfc00417 	ldw	ra,16(sp)
    91c8:	dcc00317 	ldw	r19,12(sp)
    91cc:	dc800217 	ldw	r18,8(sp)
    91d0:	dc400117 	ldw	r17,4(sp)
    91d4:	dc000017 	ldw	r16,0(sp)
    91d8:	dec00504 	addi	sp,sp,20
    91dc:	f800283a 	ret
    91e0:	8005883a 	mov	r2,r16
    91e4:	04400044 	movi	r17,1
    91e8:	9021883a 	mov	r16,r18
    91ec:	1025883a 	mov	r18,r2
    91f0:	003fb006 	br	90b4 <__alt_data_end+0xfffb3984>
    91f4:	9809883a 	mov	r4,r19
    91f8:	000b883a 	mov	r5,zero
    91fc:	000869c0 	call	869c <_Balloc>
    9200:	00c00044 	movi	r3,1
    9204:	10c00415 	stw	r3,16(r2)
    9208:	10000515 	stw	zero,20(r2)
    920c:	003fed06 	br	91c4 <__alt_data_end+0xfffb3a94>

00009210 <__ulp>:
    9210:	295ffc2c 	andhi	r5,r5,32752
    9214:	00bf3034 	movhi	r2,64704
    9218:	2887883a 	add	r3,r5,r2
    921c:	00c0020e 	bge	zero,r3,9228 <__ulp+0x18>
    9220:	0005883a 	mov	r2,zero
    9224:	f800283a 	ret
    9228:	00c7c83a 	sub	r3,zero,r3
    922c:	180bd53a 	srai	r5,r3,20
    9230:	008004c4 	movi	r2,19
    9234:	11400a0e 	bge	r2,r5,9260 <__ulp+0x50>
    9238:	00800c84 	movi	r2,50
    923c:	0007883a 	mov	r3,zero
    9240:	11400516 	blt	r2,r5,9258 <__ulp+0x48>
    9244:	00800cc4 	movi	r2,51
    9248:	114bc83a 	sub	r5,r2,r5
    924c:	00800044 	movi	r2,1
    9250:	1144983a 	sll	r2,r2,r5
    9254:	f800283a 	ret
    9258:	00800044 	movi	r2,1
    925c:	f800283a 	ret
    9260:	00800234 	movhi	r2,8
    9264:	1147d83a 	sra	r3,r2,r5
    9268:	0005883a 	mov	r2,zero
    926c:	f800283a 	ret

00009270 <__b2d>:
    9270:	defffa04 	addi	sp,sp,-24
    9274:	dc000015 	stw	r16,0(sp)
    9278:	24000417 	ldw	r16,16(r4)
    927c:	dc400115 	stw	r17,4(sp)
    9280:	24400504 	addi	r17,r4,20
    9284:	8421883a 	add	r16,r16,r16
    9288:	8421883a 	add	r16,r16,r16
    928c:	8c21883a 	add	r16,r17,r16
    9290:	dc800215 	stw	r18,8(sp)
    9294:	84bfff17 	ldw	r18,-4(r16)
    9298:	dd000415 	stw	r20,16(sp)
    929c:	dcc00315 	stw	r19,12(sp)
    92a0:	9009883a 	mov	r4,r18
    92a4:	2829883a 	mov	r20,r5
    92a8:	dfc00515 	stw	ra,20(sp)
    92ac:	00089ac0 	call	89ac <__hi0bits>
    92b0:	00c00804 	movi	r3,32
    92b4:	1887c83a 	sub	r3,r3,r2
    92b8:	a0c00015 	stw	r3,0(r20)
    92bc:	00c00284 	movi	r3,10
    92c0:	84ffff04 	addi	r19,r16,-4
    92c4:	18801216 	blt	r3,r2,9310 <__b2d+0xa0>
    92c8:	014002c4 	movi	r5,11
    92cc:	2889c83a 	sub	r4,r5,r2
    92d0:	9106d83a 	srl	r3,r18,r4
    92d4:	18cffc34 	orhi	r3,r3,16368
    92d8:	8cc0282e 	bgeu	r17,r19,937c <__b2d+0x10c>
    92dc:	817ffe17 	ldw	r5,-8(r16)
    92e0:	290ad83a 	srl	r5,r5,r4
    92e4:	10800544 	addi	r2,r2,21
    92e8:	9084983a 	sll	r2,r18,r2
    92ec:	2884b03a 	or	r2,r5,r2
    92f0:	dfc00517 	ldw	ra,20(sp)
    92f4:	dd000417 	ldw	r20,16(sp)
    92f8:	dcc00317 	ldw	r19,12(sp)
    92fc:	dc800217 	ldw	r18,8(sp)
    9300:	dc400117 	ldw	r17,4(sp)
    9304:	dc000017 	ldw	r16,0(sp)
    9308:	dec00604 	addi	sp,sp,24
    930c:	f800283a 	ret
    9310:	113ffd44 	addi	r4,r2,-11
    9314:	8cc00f2e 	bgeu	r17,r19,9354 <__b2d+0xe4>
    9318:	81bffe04 	addi	r6,r16,-8
    931c:	817ffe17 	ldw	r5,-8(r16)
    9320:	20001326 	beq	r4,zero,9370 <__b2d+0x100>
    9324:	00c00ac4 	movi	r3,43
    9328:	1885c83a 	sub	r2,r3,r2
    932c:	2886d83a 	srl	r3,r5,r2
    9330:	9124983a 	sll	r18,r18,r4
    9334:	90e4b03a 	or	r18,r18,r3
    9338:	90cffc34 	orhi	r3,r18,16368
    933c:	8980112e 	bgeu	r17,r6,9384 <__b2d+0x114>
    9340:	81bffd17 	ldw	r6,-12(r16)
    9344:	308cd83a 	srl	r6,r6,r2
    9348:	2904983a 	sll	r2,r5,r4
    934c:	1184b03a 	or	r2,r2,r6
    9350:	003fe706 	br	92f0 <__alt_data_end+0xfffb3bc0>
    9354:	20000526 	beq	r4,zero,936c <__b2d+0xfc>
    9358:	9124983a 	sll	r18,r18,r4
    935c:	000d883a 	mov	r6,zero
    9360:	000b883a 	mov	r5,zero
    9364:	90cffc34 	orhi	r3,r18,16368
    9368:	003ff706 	br	9348 <__alt_data_end+0xfffb3c18>
    936c:	000b883a 	mov	r5,zero
    9370:	90cffc34 	orhi	r3,r18,16368
    9374:	2805883a 	mov	r2,r5
    9378:	003fdd06 	br	92f0 <__alt_data_end+0xfffb3bc0>
    937c:	000b883a 	mov	r5,zero
    9380:	003fd806 	br	92e4 <__alt_data_end+0xfffb3bb4>
    9384:	000d883a 	mov	r6,zero
    9388:	003fef06 	br	9348 <__alt_data_end+0xfffb3c18>

0000938c <__d2b>:
    938c:	defff704 	addi	sp,sp,-36
    9390:	dc000215 	stw	r16,8(sp)
    9394:	3021883a 	mov	r16,r6
    9398:	dc400315 	stw	r17,12(sp)
    939c:	8022907a 	slli	r17,r16,1
    93a0:	dd400715 	stw	r21,28(sp)
    93a4:	282b883a 	mov	r21,r5
    93a8:	01400044 	movi	r5,1
    93ac:	dd000615 	stw	r20,24(sp)
    93b0:	dcc00515 	stw	r19,20(sp)
    93b4:	dc800415 	stw	r18,16(sp)
    93b8:	dfc00815 	stw	ra,32(sp)
    93bc:	3829883a 	mov	r20,r7
    93c0:	dc800917 	ldw	r18,36(sp)
    93c4:	8822d57a 	srli	r17,r17,21
    93c8:	000869c0 	call	869c <_Balloc>
    93cc:	1027883a 	mov	r19,r2
    93d0:	00800434 	movhi	r2,16
    93d4:	10bfffc4 	addi	r2,r2,-1
    93d8:	808c703a 	and	r6,r16,r2
    93dc:	88000126 	beq	r17,zero,93e4 <__d2b+0x58>
    93e0:	31800434 	orhi	r6,r6,16
    93e4:	d9800015 	stw	r6,0(sp)
    93e8:	a8001f26 	beq	r21,zero,9468 <__d2b+0xdc>
    93ec:	d9000104 	addi	r4,sp,4
    93f0:	dd400115 	stw	r21,4(sp)
    93f4:	0008a140 	call	8a14 <__lo0bits>
    93f8:	d8c00017 	ldw	r3,0(sp)
    93fc:	1000291e 	bne	r2,zero,94a4 <__d2b+0x118>
    9400:	d9000117 	ldw	r4,4(sp)
    9404:	99000515 	stw	r4,20(r19)
    9408:	1820c03a 	cmpne	r16,r3,zero
    940c:	84000044 	addi	r16,r16,1
    9410:	98c00615 	stw	r3,24(r19)
    9414:	9c000415 	stw	r16,16(r19)
    9418:	88001b1e 	bne	r17,zero,9488 <__d2b+0xfc>
    941c:	800690ba 	slli	r3,r16,2
    9420:	10bef384 	addi	r2,r2,-1074
    9424:	a0800015 	stw	r2,0(r20)
    9428:	98c5883a 	add	r2,r19,r3
    942c:	11000417 	ldw	r4,16(r2)
    9430:	8020917a 	slli	r16,r16,5
    9434:	00089ac0 	call	89ac <__hi0bits>
    9438:	8085c83a 	sub	r2,r16,r2
    943c:	90800015 	stw	r2,0(r18)
    9440:	9805883a 	mov	r2,r19
    9444:	dfc00817 	ldw	ra,32(sp)
    9448:	dd400717 	ldw	r21,28(sp)
    944c:	dd000617 	ldw	r20,24(sp)
    9450:	dcc00517 	ldw	r19,20(sp)
    9454:	dc800417 	ldw	r18,16(sp)
    9458:	dc400317 	ldw	r17,12(sp)
    945c:	dc000217 	ldw	r16,8(sp)
    9460:	dec00904 	addi	sp,sp,36
    9464:	f800283a 	ret
    9468:	d809883a 	mov	r4,sp
    946c:	0008a140 	call	8a14 <__lo0bits>
    9470:	d8c00017 	ldw	r3,0(sp)
    9474:	04000044 	movi	r16,1
    9478:	9c000415 	stw	r16,16(r19)
    947c:	98c00515 	stw	r3,20(r19)
    9480:	10800804 	addi	r2,r2,32
    9484:	883fe526 	beq	r17,zero,941c <__alt_data_end+0xfffb3cec>
    9488:	8c7ef344 	addi	r17,r17,-1075
    948c:	88a3883a 	add	r17,r17,r2
    9490:	00c00d44 	movi	r3,53
    9494:	a4400015 	stw	r17,0(r20)
    9498:	1885c83a 	sub	r2,r3,r2
    949c:	90800015 	stw	r2,0(r18)
    94a0:	003fe706 	br	9440 <__alt_data_end+0xfffb3d10>
    94a4:	01000804 	movi	r4,32
    94a8:	2089c83a 	sub	r4,r4,r2
    94ac:	1908983a 	sll	r4,r3,r4
    94b0:	d9400117 	ldw	r5,4(sp)
    94b4:	1886d83a 	srl	r3,r3,r2
    94b8:	2148b03a 	or	r4,r4,r5
    94bc:	99000515 	stw	r4,20(r19)
    94c0:	d8c00015 	stw	r3,0(sp)
    94c4:	003fd006 	br	9408 <__alt_data_end+0xfffb3cd8>

000094c8 <__ratio>:
    94c8:	defff904 	addi	sp,sp,-28
    94cc:	dc400315 	stw	r17,12(sp)
    94d0:	2823883a 	mov	r17,r5
    94d4:	d9400104 	addi	r5,sp,4
    94d8:	dfc00615 	stw	ra,24(sp)
    94dc:	dcc00515 	stw	r19,20(sp)
    94e0:	dc800415 	stw	r18,16(sp)
    94e4:	2027883a 	mov	r19,r4
    94e8:	dc000215 	stw	r16,8(sp)
    94ec:	00092700 	call	9270 <__b2d>
    94f0:	8809883a 	mov	r4,r17
    94f4:	d80b883a 	mov	r5,sp
    94f8:	1025883a 	mov	r18,r2
    94fc:	1821883a 	mov	r16,r3
    9500:	00092700 	call	9270 <__b2d>
    9504:	8a400417 	ldw	r9,16(r17)
    9508:	9a000417 	ldw	r8,16(r19)
    950c:	100d883a 	mov	r6,r2
    9510:	d8800017 	ldw	r2,0(sp)
    9514:	4251c83a 	sub	r8,r8,r9
    9518:	4012917a 	slli	r9,r8,5
    951c:	da000117 	ldw	r8,4(sp)
    9520:	4091c83a 	sub	r8,r8,r2
    9524:	4251883a 	add	r8,r8,r9
    9528:	02000d0e 	bge	zero,r8,9560 <__ratio+0x98>
    952c:	4010953a 	slli	r8,r8,20
    9530:	4421883a 	add	r16,r8,r16
    9534:	9009883a 	mov	r4,r18
    9538:	800b883a 	mov	r5,r16
    953c:	180f883a 	mov	r7,r3
    9540:	000d3cc0 	call	d3cc <__divdf3>
    9544:	dfc00617 	ldw	ra,24(sp)
    9548:	dcc00517 	ldw	r19,20(sp)
    954c:	dc800417 	ldw	r18,16(sp)
    9550:	dc400317 	ldw	r17,12(sp)
    9554:	dc000217 	ldw	r16,8(sp)
    9558:	dec00704 	addi	sp,sp,28
    955c:	f800283a 	ret
    9560:	4010953a 	slli	r8,r8,20
    9564:	1a07c83a 	sub	r3,r3,r8
    9568:	003ff206 	br	9534 <__alt_data_end+0xfffb3e04>

0000956c <_mprec_log10>:
    956c:	defffe04 	addi	sp,sp,-8
    9570:	dc000015 	stw	r16,0(sp)
    9574:	dfc00115 	stw	ra,4(sp)
    9578:	008005c4 	movi	r2,23
    957c:	2021883a 	mov	r16,r4
    9580:	11000d0e 	bge	r2,r4,95b8 <_mprec_log10+0x4c>
    9584:	0005883a 	mov	r2,zero
    9588:	00cffc34 	movhi	r3,16368
    958c:	843fffc4 	addi	r16,r16,-1
    9590:	1009883a 	mov	r4,r2
    9594:	180b883a 	mov	r5,r3
    9598:	000d883a 	mov	r6,zero
    959c:	01d00934 	movhi	r7,16420
    95a0:	000df900 	call	df90 <__muldf3>
    95a4:	803ff91e 	bne	r16,zero,958c <__alt_data_end+0xfffb3e5c>
    95a8:	dfc00117 	ldw	ra,4(sp)
    95ac:	dc000017 	ldw	r16,0(sp)
    95b0:	dec00204 	addi	sp,sp,8
    95b4:	f800283a 	ret
    95b8:	202090fa 	slli	r16,r4,3
    95bc:	00800074 	movhi	r2,1
    95c0:	10890904 	addi	r2,r2,9252
    95c4:	1421883a 	add	r16,r2,r16
    95c8:	80800017 	ldw	r2,0(r16)
    95cc:	80c00117 	ldw	r3,4(r16)
    95d0:	dfc00117 	ldw	ra,4(sp)
    95d4:	dc000017 	ldw	r16,0(sp)
    95d8:	dec00204 	addi	sp,sp,8
    95dc:	f800283a 	ret

000095e0 <__copybits>:
    95e0:	297fffc4 	addi	r5,r5,-1
    95e4:	280fd17a 	srai	r7,r5,5
    95e8:	30c00417 	ldw	r3,16(r6)
    95ec:	30800504 	addi	r2,r6,20
    95f0:	39c00044 	addi	r7,r7,1
    95f4:	18c7883a 	add	r3,r3,r3
    95f8:	39cf883a 	add	r7,r7,r7
    95fc:	18c7883a 	add	r3,r3,r3
    9600:	39cf883a 	add	r7,r7,r7
    9604:	10c7883a 	add	r3,r2,r3
    9608:	21cf883a 	add	r7,r4,r7
    960c:	10c00d2e 	bgeu	r2,r3,9644 <__copybits+0x64>
    9610:	200b883a 	mov	r5,r4
    9614:	12000017 	ldw	r8,0(r2)
    9618:	29400104 	addi	r5,r5,4
    961c:	10800104 	addi	r2,r2,4
    9620:	2a3fff15 	stw	r8,-4(r5)
    9624:	10fffb36 	bltu	r2,r3,9614 <__alt_data_end+0xfffb3ee4>
    9628:	1985c83a 	sub	r2,r3,r6
    962c:	10bffac4 	addi	r2,r2,-21
    9630:	1004d0ba 	srli	r2,r2,2
    9634:	10800044 	addi	r2,r2,1
    9638:	1085883a 	add	r2,r2,r2
    963c:	1085883a 	add	r2,r2,r2
    9640:	2089883a 	add	r4,r4,r2
    9644:	21c0032e 	bgeu	r4,r7,9654 <__copybits+0x74>
    9648:	20000015 	stw	zero,0(r4)
    964c:	21000104 	addi	r4,r4,4
    9650:	21fffd36 	bltu	r4,r7,9648 <__alt_data_end+0xfffb3f18>
    9654:	f800283a 	ret

00009658 <__any_on>:
    9658:	20c00417 	ldw	r3,16(r4)
    965c:	2805d17a 	srai	r2,r5,5
    9660:	21000504 	addi	r4,r4,20
    9664:	18800d0e 	bge	r3,r2,969c <__any_on+0x44>
    9668:	18c7883a 	add	r3,r3,r3
    966c:	18c7883a 	add	r3,r3,r3
    9670:	20c7883a 	add	r3,r4,r3
    9674:	20c0192e 	bgeu	r4,r3,96dc <__any_on+0x84>
    9678:	18bfff17 	ldw	r2,-4(r3)
    967c:	18ffff04 	addi	r3,r3,-4
    9680:	1000041e 	bne	r2,zero,9694 <__any_on+0x3c>
    9684:	20c0142e 	bgeu	r4,r3,96d8 <__any_on+0x80>
    9688:	18ffff04 	addi	r3,r3,-4
    968c:	19400017 	ldw	r5,0(r3)
    9690:	283ffc26 	beq	r5,zero,9684 <__alt_data_end+0xfffb3f54>
    9694:	00800044 	movi	r2,1
    9698:	f800283a 	ret
    969c:	10c00a0e 	bge	r2,r3,96c8 <__any_on+0x70>
    96a0:	1085883a 	add	r2,r2,r2
    96a4:	1085883a 	add	r2,r2,r2
    96a8:	294007cc 	andi	r5,r5,31
    96ac:	2087883a 	add	r3,r4,r2
    96b0:	283ff026 	beq	r5,zero,9674 <__alt_data_end+0xfffb3f44>
    96b4:	19800017 	ldw	r6,0(r3)
    96b8:	3144d83a 	srl	r2,r6,r5
    96bc:	114a983a 	sll	r5,r2,r5
    96c0:	29bff41e 	bne	r5,r6,9694 <__alt_data_end+0xfffb3f64>
    96c4:	003feb06 	br	9674 <__alt_data_end+0xfffb3f44>
    96c8:	1085883a 	add	r2,r2,r2
    96cc:	1085883a 	add	r2,r2,r2
    96d0:	2087883a 	add	r3,r4,r2
    96d4:	003fe706 	br	9674 <__alt_data_end+0xfffb3f44>
    96d8:	f800283a 	ret
    96dc:	0005883a 	mov	r2,zero
    96e0:	f800283a 	ret

000096e4 <_realloc_r>:
    96e4:	defff604 	addi	sp,sp,-40
    96e8:	dcc00315 	stw	r19,12(sp)
    96ec:	dc400115 	stw	r17,4(sp)
    96f0:	dfc00915 	stw	ra,36(sp)
    96f4:	df000815 	stw	fp,32(sp)
    96f8:	ddc00715 	stw	r23,28(sp)
    96fc:	dd800615 	stw	r22,24(sp)
    9700:	dd400515 	stw	r21,20(sp)
    9704:	dd000415 	stw	r20,16(sp)
    9708:	dc800215 	stw	r18,8(sp)
    970c:	dc000015 	stw	r16,0(sp)
    9710:	2827883a 	mov	r19,r5
    9714:	3023883a 	mov	r17,r6
    9718:	2800bf26 	beq	r5,zero,9a18 <_realloc_r+0x334>
    971c:	2025883a 	mov	r18,r4
    9720:	000f90c0 	call	f90c <__malloc_lock>
    9724:	98ffff17 	ldw	r3,-4(r19)
    9728:	01bfff04 	movi	r6,-4
    972c:	890002c4 	addi	r4,r17,11
    9730:	01c00584 	movi	r7,22
    9734:	9d7ffe04 	addi	r21,r19,-8
    9738:	19a0703a 	and	r16,r3,r6
    973c:	39003f2e 	bgeu	r7,r4,983c <_realloc_r+0x158>
    9740:	053ffe04 	movi	r20,-8
    9744:	2528703a 	and	r20,r4,r20
    9748:	a00f883a 	mov	r7,r20
    974c:	a0008216 	blt	r20,zero,9958 <_realloc_r+0x274>
    9750:	a4408136 	bltu	r20,r17,9958 <_realloc_r+0x274>
    9754:	81c03c0e 	bge	r16,r7,9848 <_realloc_r+0x164>
    9758:	07000074 	movhi	fp,1
    975c:	e7099004 	addi	fp,fp,9792
    9760:	e1000217 	ldw	r4,8(fp)
    9764:	ac05883a 	add	r2,r21,r16
    9768:	2080bf26 	beq	r4,r2,9a68 <_realloc_r+0x384>
    976c:	11000117 	ldw	r4,4(r2)
    9770:	023fff84 	movi	r8,-2
    9774:	2210703a 	and	r8,r4,r8
    9778:	1211883a 	add	r8,r2,r8
    977c:	41400117 	ldw	r5,4(r8)
    9780:	2940004c 	andi	r5,r5,1
    9784:	28004a1e 	bne	r5,zero,98b0 <_realloc_r+0x1cc>
    9788:	017fff04 	movi	r5,-4
    978c:	2148703a 	and	r4,r4,r5
    9790:	2409883a 	add	r4,r4,r16
    9794:	21c0ad0e 	bge	r4,r7,9a4c <_realloc_r+0x368>
    9798:	18c0004c 	andi	r3,r3,1
    979c:	18007f1e 	bne	r3,zero,999c <_realloc_r+0x2b8>
    97a0:	9dfffe17 	ldw	r23,-8(r19)
    97a4:	adefc83a 	sub	r23,r21,r23
    97a8:	bd800117 	ldw	r22,4(r23)
    97ac:	b14a703a 	and	r5,r22,r5
    97b0:	216d883a 	add	r22,r4,r5
    97b4:	b1c04516 	blt	r22,r7,98cc <_realloc_r+0x1e8>
    97b8:	10c00317 	ldw	r3,12(r2)
    97bc:	10800217 	ldw	r2,8(r2)
    97c0:	81bfff04 	addi	r6,r16,-4
    97c4:	bc400204 	addi	r17,r23,8
    97c8:	10c00315 	stw	r3,12(r2)
    97cc:	18800215 	stw	r2,8(r3)
    97d0:	b9400217 	ldw	r5,8(r23)
    97d4:	b8c00317 	ldw	r3,12(r23)
    97d8:	00800904 	movi	r2,36
    97dc:	28c00315 	stw	r3,12(r5)
    97e0:	19400215 	stw	r5,8(r3)
    97e4:	1180ef36 	bltu	r2,r6,9ba4 <_realloc_r+0x4c0>
    97e8:	008004c4 	movi	r2,19
    97ec:	1180da2e 	bgeu	r2,r6,9b58 <_realloc_r+0x474>
    97f0:	98800017 	ldw	r2,0(r19)
    97f4:	b8800215 	stw	r2,8(r23)
    97f8:	98800117 	ldw	r2,4(r19)
    97fc:	b8800315 	stw	r2,12(r23)
    9800:	008006c4 	movi	r2,27
    9804:	1180fc2e 	bgeu	r2,r6,9bf8 <_realloc_r+0x514>
    9808:	98800217 	ldw	r2,8(r19)
    980c:	b8800415 	stw	r2,16(r23)
    9810:	98800317 	ldw	r2,12(r19)
    9814:	b8800515 	stw	r2,20(r23)
    9818:	00800904 	movi	r2,36
    981c:	3080421e 	bne	r6,r2,9928 <_realloc_r+0x244>
    9820:	98800417 	ldw	r2,16(r19)
    9824:	9cc00604 	addi	r19,r19,24
    9828:	b8c00804 	addi	r3,r23,32
    982c:	b8800615 	stw	r2,24(r23)
    9830:	98bfff17 	ldw	r2,-4(r19)
    9834:	b8800715 	stw	r2,28(r23)
    9838:	00003d06 	br	9930 <_realloc_r+0x24c>
    983c:	01c00404 	movi	r7,16
    9840:	3829883a 	mov	r20,r7
    9844:	003fc206 	br	9750 <__alt_data_end+0xfffb4020>
    9848:	9823883a 	mov	r17,r19
    984c:	850fc83a 	sub	r7,r16,r20
    9850:	008003c4 	movi	r2,15
    9854:	18c0004c 	andi	r3,r3,1
    9858:	11c04336 	bltu	r2,r7,9968 <_realloc_r+0x284>
    985c:	1c06b03a 	or	r3,r3,r16
    9860:	a8c00115 	stw	r3,4(r21)
    9864:	ac21883a 	add	r16,r21,r16
    9868:	80c00117 	ldw	r3,4(r16)
    986c:	18c00054 	ori	r3,r3,1
    9870:	80c00115 	stw	r3,4(r16)
    9874:	9009883a 	mov	r4,r18
    9878:	000f92c0 	call	f92c <__malloc_unlock>
    987c:	8805883a 	mov	r2,r17
    9880:	dfc00917 	ldw	ra,36(sp)
    9884:	df000817 	ldw	fp,32(sp)
    9888:	ddc00717 	ldw	r23,28(sp)
    988c:	dd800617 	ldw	r22,24(sp)
    9890:	dd400517 	ldw	r21,20(sp)
    9894:	dd000417 	ldw	r20,16(sp)
    9898:	dcc00317 	ldw	r19,12(sp)
    989c:	dc800217 	ldw	r18,8(sp)
    98a0:	dc400117 	ldw	r17,4(sp)
    98a4:	dc000017 	ldw	r16,0(sp)
    98a8:	dec00a04 	addi	sp,sp,40
    98ac:	f800283a 	ret
    98b0:	18c0004c 	andi	r3,r3,1
    98b4:	1800391e 	bne	r3,zero,999c <_realloc_r+0x2b8>
    98b8:	9dfffe17 	ldw	r23,-8(r19)
    98bc:	00bfff04 	movi	r2,-4
    98c0:	adefc83a 	sub	r23,r21,r23
    98c4:	b9400117 	ldw	r5,4(r23)
    98c8:	288a703a 	and	r5,r5,r2
    98cc:	2c2d883a 	add	r22,r5,r16
    98d0:	b1c03216 	blt	r22,r7,999c <_realloc_r+0x2b8>
    98d4:	b8800317 	ldw	r2,12(r23)
    98d8:	b8c00217 	ldw	r3,8(r23)
    98dc:	81bfff04 	addi	r6,r16,-4
    98e0:	01000904 	movi	r4,36
    98e4:	18800315 	stw	r2,12(r3)
    98e8:	10c00215 	stw	r3,8(r2)
    98ec:	bc400204 	addi	r17,r23,8
    98f0:	2180ac36 	bltu	r4,r6,9ba4 <_realloc_r+0x4c0>
    98f4:	008004c4 	movi	r2,19
    98f8:	1180972e 	bgeu	r2,r6,9b58 <_realloc_r+0x474>
    98fc:	98800017 	ldw	r2,0(r19)
    9900:	b8800215 	stw	r2,8(r23)
    9904:	98800117 	ldw	r2,4(r19)
    9908:	b8800315 	stw	r2,12(r23)
    990c:	008006c4 	movi	r2,27
    9910:	1180b92e 	bgeu	r2,r6,9bf8 <_realloc_r+0x514>
    9914:	98800217 	ldw	r2,8(r19)
    9918:	b8800415 	stw	r2,16(r23)
    991c:	98800317 	ldw	r2,12(r19)
    9920:	b8800515 	stw	r2,20(r23)
    9924:	313fbe26 	beq	r6,r4,9820 <__alt_data_end+0xfffb40f0>
    9928:	b8c00604 	addi	r3,r23,24
    992c:	9cc00404 	addi	r19,r19,16
    9930:	98800017 	ldw	r2,0(r19)
    9934:	b021883a 	mov	r16,r22
    9938:	b82b883a 	mov	r21,r23
    993c:	18800015 	stw	r2,0(r3)
    9940:	98800117 	ldw	r2,4(r19)
    9944:	18800115 	stw	r2,4(r3)
    9948:	98800217 	ldw	r2,8(r19)
    994c:	18800215 	stw	r2,8(r3)
    9950:	b8c00117 	ldw	r3,4(r23)
    9954:	003fbd06 	br	984c <__alt_data_end+0xfffb411c>
    9958:	00800304 	movi	r2,12
    995c:	90800015 	stw	r2,0(r18)
    9960:	0005883a 	mov	r2,zero
    9964:	003fc606 	br	9880 <__alt_data_end+0xfffb4150>
    9968:	1d06b03a 	or	r3,r3,r20
    996c:	ad0b883a 	add	r5,r21,r20
    9970:	a8c00115 	stw	r3,4(r21)
    9974:	38800054 	ori	r2,r7,1
    9978:	28800115 	stw	r2,4(r5)
    997c:	29cf883a 	add	r7,r5,r7
    9980:	38800117 	ldw	r2,4(r7)
    9984:	9009883a 	mov	r4,r18
    9988:	29400204 	addi	r5,r5,8
    998c:	10800054 	ori	r2,r2,1
    9990:	38800115 	stw	r2,4(r7)
    9994:	00076600 	call	7660 <_free_r>
    9998:	003fb606 	br	9874 <__alt_data_end+0xfffb4144>
    999c:	880b883a 	mov	r5,r17
    99a0:	9009883a 	mov	r4,r18
    99a4:	00029c80 	call	29c8 <_malloc_r>
    99a8:	1023883a 	mov	r17,r2
    99ac:	1000aa26 	beq	r2,zero,9c58 <_realloc_r+0x574>
    99b0:	98ffff17 	ldw	r3,-4(r19)
    99b4:	113ffe04 	addi	r4,r2,-8
    99b8:	00bfff84 	movi	r2,-2
    99bc:	1884703a 	and	r2,r3,r2
    99c0:	a885883a 	add	r2,r21,r2
    99c4:	20808626 	beq	r4,r2,9be0 <_realloc_r+0x4fc>
    99c8:	81bfff04 	addi	r6,r16,-4
    99cc:	00800904 	movi	r2,36
    99d0:	11807036 	bltu	r2,r6,9b94 <_realloc_r+0x4b0>
    99d4:	00c004c4 	movi	r3,19
    99d8:	19805636 	bltu	r3,r6,9b34 <_realloc_r+0x450>
    99dc:	8805883a 	mov	r2,r17
    99e0:	9807883a 	mov	r3,r19
    99e4:	19000017 	ldw	r4,0(r3)
    99e8:	11000015 	stw	r4,0(r2)
    99ec:	19000117 	ldw	r4,4(r3)
    99f0:	11000115 	stw	r4,4(r2)
    99f4:	18c00217 	ldw	r3,8(r3)
    99f8:	10c00215 	stw	r3,8(r2)
    99fc:	980b883a 	mov	r5,r19
    9a00:	9009883a 	mov	r4,r18
    9a04:	00076600 	call	7660 <_free_r>
    9a08:	9009883a 	mov	r4,r18
    9a0c:	000f92c0 	call	f92c <__malloc_unlock>
    9a10:	8805883a 	mov	r2,r17
    9a14:	003f9a06 	br	9880 <__alt_data_end+0xfffb4150>
    9a18:	300b883a 	mov	r5,r6
    9a1c:	dfc00917 	ldw	ra,36(sp)
    9a20:	df000817 	ldw	fp,32(sp)
    9a24:	ddc00717 	ldw	r23,28(sp)
    9a28:	dd800617 	ldw	r22,24(sp)
    9a2c:	dd400517 	ldw	r21,20(sp)
    9a30:	dd000417 	ldw	r20,16(sp)
    9a34:	dcc00317 	ldw	r19,12(sp)
    9a38:	dc800217 	ldw	r18,8(sp)
    9a3c:	dc400117 	ldw	r17,4(sp)
    9a40:	dc000017 	ldw	r16,0(sp)
    9a44:	dec00a04 	addi	sp,sp,40
    9a48:	00029c81 	jmpi	29c8 <_malloc_r>
    9a4c:	11400317 	ldw	r5,12(r2)
    9a50:	10800217 	ldw	r2,8(r2)
    9a54:	9823883a 	mov	r17,r19
    9a58:	2021883a 	mov	r16,r4
    9a5c:	11400315 	stw	r5,12(r2)
    9a60:	28800215 	stw	r2,8(r5)
    9a64:	003f7906 	br	984c <__alt_data_end+0xfffb411c>
    9a68:	21000117 	ldw	r4,4(r4)
    9a6c:	00bfff04 	movi	r2,-4
    9a70:	a1800404 	addi	r6,r20,16
    9a74:	2088703a 	and	r4,r4,r2
    9a78:	2409883a 	add	r4,r4,r16
    9a7c:	2180380e 	bge	r4,r6,9b60 <_realloc_r+0x47c>
    9a80:	18c0004c 	andi	r3,r3,1
    9a84:	183fc51e 	bne	r3,zero,999c <__alt_data_end+0xfffb426c>
    9a88:	9dfffe17 	ldw	r23,-8(r19)
    9a8c:	adefc83a 	sub	r23,r21,r23
    9a90:	b9400117 	ldw	r5,4(r23)
    9a94:	288a703a 	and	r5,r5,r2
    9a98:	216d883a 	add	r22,r4,r5
    9a9c:	b1bf8b16 	blt	r22,r6,98cc <__alt_data_end+0xfffb419c>
    9aa0:	b8800317 	ldw	r2,12(r23)
    9aa4:	b8c00217 	ldw	r3,8(r23)
    9aa8:	81bfff04 	addi	r6,r16,-4
    9aac:	01000904 	movi	r4,36
    9ab0:	18800315 	stw	r2,12(r3)
    9ab4:	10c00215 	stw	r3,8(r2)
    9ab8:	bc400204 	addi	r17,r23,8
    9abc:	21805a36 	bltu	r4,r6,9c28 <_realloc_r+0x544>
    9ac0:	008004c4 	movi	r2,19
    9ac4:	1180562e 	bgeu	r2,r6,9c20 <_realloc_r+0x53c>
    9ac8:	98800017 	ldw	r2,0(r19)
    9acc:	b8800215 	stw	r2,8(r23)
    9ad0:	98800117 	ldw	r2,4(r19)
    9ad4:	b8800315 	stw	r2,12(r23)
    9ad8:	008006c4 	movi	r2,27
    9adc:	11805636 	bltu	r2,r6,9c38 <_realloc_r+0x554>
    9ae0:	b8800404 	addi	r2,r23,16
    9ae4:	9cc00204 	addi	r19,r19,8
    9ae8:	98c00017 	ldw	r3,0(r19)
    9aec:	10c00015 	stw	r3,0(r2)
    9af0:	98c00117 	ldw	r3,4(r19)
    9af4:	10c00115 	stw	r3,4(r2)
    9af8:	98c00217 	ldw	r3,8(r19)
    9afc:	10c00215 	stw	r3,8(r2)
    9b00:	bd07883a 	add	r3,r23,r20
    9b04:	b505c83a 	sub	r2,r22,r20
    9b08:	e0c00215 	stw	r3,8(fp)
    9b0c:	10800054 	ori	r2,r2,1
    9b10:	18800115 	stw	r2,4(r3)
    9b14:	b8800117 	ldw	r2,4(r23)
    9b18:	9009883a 	mov	r4,r18
    9b1c:	1080004c 	andi	r2,r2,1
    9b20:	a0a8b03a 	or	r20,r20,r2
    9b24:	bd000115 	stw	r20,4(r23)
    9b28:	000f92c0 	call	f92c <__malloc_unlock>
    9b2c:	8805883a 	mov	r2,r17
    9b30:	003f5306 	br	9880 <__alt_data_end+0xfffb4150>
    9b34:	98c00017 	ldw	r3,0(r19)
    9b38:	88c00015 	stw	r3,0(r17)
    9b3c:	98c00117 	ldw	r3,4(r19)
    9b40:	88c00115 	stw	r3,4(r17)
    9b44:	00c006c4 	movi	r3,27
    9b48:	19801d36 	bltu	r3,r6,9bc0 <_realloc_r+0x4dc>
    9b4c:	88800204 	addi	r2,r17,8
    9b50:	98c00204 	addi	r3,r19,8
    9b54:	003fa306 	br	99e4 <__alt_data_end+0xfffb42b4>
    9b58:	8807883a 	mov	r3,r17
    9b5c:	003f7406 	br	9930 <__alt_data_end+0xfffb4200>
    9b60:	ad2b883a 	add	r21,r21,r20
    9b64:	2505c83a 	sub	r2,r4,r20
    9b68:	e5400215 	stw	r21,8(fp)
    9b6c:	10800054 	ori	r2,r2,1
    9b70:	a8800115 	stw	r2,4(r21)
    9b74:	98bfff17 	ldw	r2,-4(r19)
    9b78:	9009883a 	mov	r4,r18
    9b7c:	1080004c 	andi	r2,r2,1
    9b80:	a0a8b03a 	or	r20,r20,r2
    9b84:	9d3fff15 	stw	r20,-4(r19)
    9b88:	000f92c0 	call	f92c <__malloc_unlock>
    9b8c:	9805883a 	mov	r2,r19
    9b90:	003f3b06 	br	9880 <__alt_data_end+0xfffb4150>
    9b94:	8809883a 	mov	r4,r17
    9b98:	980b883a 	mov	r5,r19
    9b9c:	000841c0 	call	841c <memmove>
    9ba0:	003f9606 	br	99fc <__alt_data_end+0xfffb42cc>
    9ba4:	8809883a 	mov	r4,r17
    9ba8:	980b883a 	mov	r5,r19
    9bac:	000841c0 	call	841c <memmove>
    9bb0:	b8c00117 	ldw	r3,4(r23)
    9bb4:	b021883a 	mov	r16,r22
    9bb8:	b82b883a 	mov	r21,r23
    9bbc:	003f2306 	br	984c <__alt_data_end+0xfffb411c>
    9bc0:	98c00217 	ldw	r3,8(r19)
    9bc4:	88c00215 	stw	r3,8(r17)
    9bc8:	98c00317 	ldw	r3,12(r19)
    9bcc:	88c00315 	stw	r3,12(r17)
    9bd0:	30800c26 	beq	r6,r2,9c04 <_realloc_r+0x520>
    9bd4:	88800404 	addi	r2,r17,16
    9bd8:	98c00404 	addi	r3,r19,16
    9bdc:	003f8106 	br	99e4 <__alt_data_end+0xfffb42b4>
    9be0:	893fff17 	ldw	r4,-4(r17)
    9be4:	00bfff04 	movi	r2,-4
    9be8:	9823883a 	mov	r17,r19
    9bec:	2084703a 	and	r2,r4,r2
    9bf0:	80a1883a 	add	r16,r16,r2
    9bf4:	003f1506 	br	984c <__alt_data_end+0xfffb411c>
    9bf8:	b8c00404 	addi	r3,r23,16
    9bfc:	9cc00204 	addi	r19,r19,8
    9c00:	003f4b06 	br	9930 <__alt_data_end+0xfffb4200>
    9c04:	99000417 	ldw	r4,16(r19)
    9c08:	88800604 	addi	r2,r17,24
    9c0c:	98c00604 	addi	r3,r19,24
    9c10:	89000415 	stw	r4,16(r17)
    9c14:	99000517 	ldw	r4,20(r19)
    9c18:	89000515 	stw	r4,20(r17)
    9c1c:	003f7106 	br	99e4 <__alt_data_end+0xfffb42b4>
    9c20:	8805883a 	mov	r2,r17
    9c24:	003fb006 	br	9ae8 <__alt_data_end+0xfffb43b8>
    9c28:	8809883a 	mov	r4,r17
    9c2c:	980b883a 	mov	r5,r19
    9c30:	000841c0 	call	841c <memmove>
    9c34:	003fb206 	br	9b00 <__alt_data_end+0xfffb43d0>
    9c38:	98800217 	ldw	r2,8(r19)
    9c3c:	b8800415 	stw	r2,16(r23)
    9c40:	98800317 	ldw	r2,12(r19)
    9c44:	b8800515 	stw	r2,20(r23)
    9c48:	31000726 	beq	r6,r4,9c68 <_realloc_r+0x584>
    9c4c:	b8800604 	addi	r2,r23,24
    9c50:	9cc00404 	addi	r19,r19,16
    9c54:	003fa406 	br	9ae8 <__alt_data_end+0xfffb43b8>
    9c58:	9009883a 	mov	r4,r18
    9c5c:	000f92c0 	call	f92c <__malloc_unlock>
    9c60:	0005883a 	mov	r2,zero
    9c64:	003f0606 	br	9880 <__alt_data_end+0xfffb4150>
    9c68:	98c00417 	ldw	r3,16(r19)
    9c6c:	9cc00604 	addi	r19,r19,24
    9c70:	b8800804 	addi	r2,r23,32
    9c74:	b8c00615 	stw	r3,24(r23)
    9c78:	98ffff17 	ldw	r3,-4(r19)
    9c7c:	b8c00715 	stw	r3,28(r23)
    9c80:	003f9906 	br	9ae8 <__alt_data_end+0xfffb43b8>

00009c84 <__fpclassifyd>:
    9c84:	00a00034 	movhi	r2,32768
    9c88:	10bfffc4 	addi	r2,r2,-1
    9c8c:	2884703a 	and	r2,r5,r2
    9c90:	10000726 	beq	r2,zero,9cb0 <__fpclassifyd+0x2c>
    9c94:	00fffc34 	movhi	r3,65520
    9c98:	019ff834 	movhi	r6,32736
    9c9c:	28c7883a 	add	r3,r5,r3
    9ca0:	31bfffc4 	addi	r6,r6,-1
    9ca4:	30c00536 	bltu	r6,r3,9cbc <__fpclassifyd+0x38>
    9ca8:	00800104 	movi	r2,4
    9cac:	f800283a 	ret
    9cb0:	2000021e 	bne	r4,zero,9cbc <__fpclassifyd+0x38>
    9cb4:	00800084 	movi	r2,2
    9cb8:	f800283a 	ret
    9cbc:	00dffc34 	movhi	r3,32752
    9cc0:	019ff834 	movhi	r6,32736
    9cc4:	28cb883a 	add	r5,r5,r3
    9cc8:	31bfffc4 	addi	r6,r6,-1
    9ccc:	317ff62e 	bgeu	r6,r5,9ca8 <__alt_data_end+0xfffb4578>
    9cd0:	01400434 	movhi	r5,16
    9cd4:	297fffc4 	addi	r5,r5,-1
    9cd8:	28800236 	bltu	r5,r2,9ce4 <__fpclassifyd+0x60>
    9cdc:	008000c4 	movi	r2,3
    9ce0:	f800283a 	ret
    9ce4:	10c00226 	beq	r2,r3,9cf0 <__fpclassifyd+0x6c>
    9ce8:	0005883a 	mov	r2,zero
    9cec:	f800283a 	ret
    9cf0:	2005003a 	cmpeq	r2,r4,zero
    9cf4:	f800283a 	ret

00009cf8 <__sread>:
    9cf8:	defffe04 	addi	sp,sp,-8
    9cfc:	dc000015 	stw	r16,0(sp)
    9d00:	2821883a 	mov	r16,r5
    9d04:	2940038f 	ldh	r5,14(r5)
    9d08:	dfc00115 	stw	ra,4(sp)
    9d0c:	000b9b40 	call	b9b4 <_read_r>
    9d10:	10000716 	blt	r2,zero,9d30 <__sread+0x38>
    9d14:	80c01417 	ldw	r3,80(r16)
    9d18:	1887883a 	add	r3,r3,r2
    9d1c:	80c01415 	stw	r3,80(r16)
    9d20:	dfc00117 	ldw	ra,4(sp)
    9d24:	dc000017 	ldw	r16,0(sp)
    9d28:	dec00204 	addi	sp,sp,8
    9d2c:	f800283a 	ret
    9d30:	80c0030b 	ldhu	r3,12(r16)
    9d34:	18fbffcc 	andi	r3,r3,61439
    9d38:	80c0030d 	sth	r3,12(r16)
    9d3c:	dfc00117 	ldw	ra,4(sp)
    9d40:	dc000017 	ldw	r16,0(sp)
    9d44:	dec00204 	addi	sp,sp,8
    9d48:	f800283a 	ret

00009d4c <__seofread>:
    9d4c:	0005883a 	mov	r2,zero
    9d50:	f800283a 	ret

00009d54 <__swrite>:
    9d54:	2880030b 	ldhu	r2,12(r5)
    9d58:	defffb04 	addi	sp,sp,-20
    9d5c:	dcc00315 	stw	r19,12(sp)
    9d60:	dc800215 	stw	r18,8(sp)
    9d64:	dc400115 	stw	r17,4(sp)
    9d68:	dc000015 	stw	r16,0(sp)
    9d6c:	dfc00415 	stw	ra,16(sp)
    9d70:	10c0400c 	andi	r3,r2,256
    9d74:	2821883a 	mov	r16,r5
    9d78:	2027883a 	mov	r19,r4
    9d7c:	3025883a 	mov	r18,r6
    9d80:	3823883a 	mov	r17,r7
    9d84:	18000526 	beq	r3,zero,9d9c <__swrite+0x48>
    9d88:	2940038f 	ldh	r5,14(r5)
    9d8c:	000d883a 	mov	r6,zero
    9d90:	01c00084 	movi	r7,2
    9d94:	000b9580 	call	b958 <_lseek_r>
    9d98:	8080030b 	ldhu	r2,12(r16)
    9d9c:	8140038f 	ldh	r5,14(r16)
    9da0:	10bbffcc 	andi	r2,r2,61439
    9da4:	9809883a 	mov	r4,r19
    9da8:	900d883a 	mov	r6,r18
    9dac:	880f883a 	mov	r7,r17
    9db0:	8080030d 	sth	r2,12(r16)
    9db4:	dfc00417 	ldw	ra,16(sp)
    9db8:	dcc00317 	ldw	r19,12(sp)
    9dbc:	dc800217 	ldw	r18,8(sp)
    9dc0:	dc400117 	ldw	r17,4(sp)
    9dc4:	dc000017 	ldw	r16,0(sp)
    9dc8:	dec00504 	addi	sp,sp,20
    9dcc:	000b4341 	jmpi	b434 <_write_r>

00009dd0 <__sseek>:
    9dd0:	defffe04 	addi	sp,sp,-8
    9dd4:	dc000015 	stw	r16,0(sp)
    9dd8:	2821883a 	mov	r16,r5
    9ddc:	2940038f 	ldh	r5,14(r5)
    9de0:	dfc00115 	stw	ra,4(sp)
    9de4:	000b9580 	call	b958 <_lseek_r>
    9de8:	00ffffc4 	movi	r3,-1
    9dec:	10c00826 	beq	r2,r3,9e10 <__sseek+0x40>
    9df0:	80c0030b 	ldhu	r3,12(r16)
    9df4:	80801415 	stw	r2,80(r16)
    9df8:	18c40014 	ori	r3,r3,4096
    9dfc:	80c0030d 	sth	r3,12(r16)
    9e00:	dfc00117 	ldw	ra,4(sp)
    9e04:	dc000017 	ldw	r16,0(sp)
    9e08:	dec00204 	addi	sp,sp,8
    9e0c:	f800283a 	ret
    9e10:	80c0030b 	ldhu	r3,12(r16)
    9e14:	18fbffcc 	andi	r3,r3,61439
    9e18:	80c0030d 	sth	r3,12(r16)
    9e1c:	dfc00117 	ldw	ra,4(sp)
    9e20:	dc000017 	ldw	r16,0(sp)
    9e24:	dec00204 	addi	sp,sp,8
    9e28:	f800283a 	ret

00009e2c <__sclose>:
    9e2c:	2940038f 	ldh	r5,14(r5)
    9e30:	000b4901 	jmpi	b490 <_close_r>

00009e34 <strcmp>:
    9e34:	2144b03a 	or	r2,r4,r5
    9e38:	108000cc 	andi	r2,r2,3
    9e3c:	1000171e 	bne	r2,zero,9e9c <strcmp+0x68>
    9e40:	20800017 	ldw	r2,0(r4)
    9e44:	28c00017 	ldw	r3,0(r5)
    9e48:	10c0141e 	bne	r2,r3,9e9c <strcmp+0x68>
    9e4c:	027fbff4 	movhi	r9,65279
    9e50:	4a7fbfc4 	addi	r9,r9,-257
    9e54:	0086303a 	nor	r3,zero,r2
    9e58:	02202074 	movhi	r8,32897
    9e5c:	1245883a 	add	r2,r2,r9
    9e60:	42202004 	addi	r8,r8,-32640
    9e64:	10c4703a 	and	r2,r2,r3
    9e68:	1204703a 	and	r2,r2,r8
    9e6c:	10000226 	beq	r2,zero,9e78 <strcmp+0x44>
    9e70:	00001706 	br	9ed0 <strcmp+0x9c>
    9e74:	1000161e 	bne	r2,zero,9ed0 <strcmp+0x9c>
    9e78:	21000104 	addi	r4,r4,4
    9e7c:	20c00017 	ldw	r3,0(r4)
    9e80:	29400104 	addi	r5,r5,4
    9e84:	29800017 	ldw	r6,0(r5)
    9e88:	1a4f883a 	add	r7,r3,r9
    9e8c:	00c4303a 	nor	r2,zero,r3
    9e90:	3884703a 	and	r2,r7,r2
    9e94:	1204703a 	and	r2,r2,r8
    9e98:	19bff626 	beq	r3,r6,9e74 <__alt_data_end+0xfffb4744>
    9e9c:	20800007 	ldb	r2,0(r4)
    9ea0:	1000051e 	bne	r2,zero,9eb8 <strcmp+0x84>
    9ea4:	00000606 	br	9ec0 <strcmp+0x8c>
    9ea8:	21000044 	addi	r4,r4,1
    9eac:	20800007 	ldb	r2,0(r4)
    9eb0:	29400044 	addi	r5,r5,1
    9eb4:	10000226 	beq	r2,zero,9ec0 <strcmp+0x8c>
    9eb8:	28c00007 	ldb	r3,0(r5)
    9ebc:	10fffa26 	beq	r2,r3,9ea8 <__alt_data_end+0xfffb4778>
    9ec0:	20800003 	ldbu	r2,0(r4)
    9ec4:	28c00003 	ldbu	r3,0(r5)
    9ec8:	10c5c83a 	sub	r2,r2,r3
    9ecc:	f800283a 	ret
    9ed0:	0005883a 	mov	r2,zero
    9ed4:	f800283a 	ret

00009ed8 <__sprint_r.part.0>:
    9ed8:	28801917 	ldw	r2,100(r5)
    9edc:	defff604 	addi	sp,sp,-40
    9ee0:	dd400515 	stw	r21,20(sp)
    9ee4:	dcc00315 	stw	r19,12(sp)
    9ee8:	dfc00915 	stw	ra,36(sp)
    9eec:	df000815 	stw	fp,32(sp)
    9ef0:	ddc00715 	stw	r23,28(sp)
    9ef4:	dd800615 	stw	r22,24(sp)
    9ef8:	dd000415 	stw	r20,16(sp)
    9efc:	dc800215 	stw	r18,8(sp)
    9f00:	dc400115 	stw	r17,4(sp)
    9f04:	dc000015 	stw	r16,0(sp)
    9f08:	1088000c 	andi	r2,r2,8192
    9f0c:	2827883a 	mov	r19,r5
    9f10:	302b883a 	mov	r21,r6
    9f14:	10002d26 	beq	r2,zero,9fcc <__sprint_r.part.0+0xf4>
    9f18:	30800217 	ldw	r2,8(r6)
    9f1c:	35800017 	ldw	r22,0(r6)
    9f20:	10002826 	beq	r2,zero,9fc4 <__sprint_r.part.0+0xec>
    9f24:	2029883a 	mov	r20,r4
    9f28:	b5c00104 	addi	r23,r22,4
    9f2c:	04bfffc4 	movi	r18,-1
    9f30:	bc400017 	ldw	r17,0(r23)
    9f34:	b4000017 	ldw	r16,0(r22)
    9f38:	0039883a 	mov	fp,zero
    9f3c:	8822d0ba 	srli	r17,r17,2
    9f40:	04400316 	blt	zero,r17,9f50 <__sprint_r.part.0+0x78>
    9f44:	00001706 	br	9fa4 <__sprint_r.part.0+0xcc>
    9f48:	84000104 	addi	r16,r16,4
    9f4c:	8f001526 	beq	r17,fp,9fa4 <__sprint_r.part.0+0xcc>
    9f50:	81400017 	ldw	r5,0(r16)
    9f54:	a009883a 	mov	r4,r20
    9f58:	980d883a 	mov	r6,r19
    9f5c:	000b6d00 	call	b6d0 <_fputwc_r>
    9f60:	e7000044 	addi	fp,fp,1
    9f64:	14bff81e 	bne	r2,r18,9f48 <__alt_data_end+0xfffb4818>
    9f68:	9005883a 	mov	r2,r18
    9f6c:	a8000215 	stw	zero,8(r21)
    9f70:	a8000115 	stw	zero,4(r21)
    9f74:	dfc00917 	ldw	ra,36(sp)
    9f78:	df000817 	ldw	fp,32(sp)
    9f7c:	ddc00717 	ldw	r23,28(sp)
    9f80:	dd800617 	ldw	r22,24(sp)
    9f84:	dd400517 	ldw	r21,20(sp)
    9f88:	dd000417 	ldw	r20,16(sp)
    9f8c:	dcc00317 	ldw	r19,12(sp)
    9f90:	dc800217 	ldw	r18,8(sp)
    9f94:	dc400117 	ldw	r17,4(sp)
    9f98:	dc000017 	ldw	r16,0(sp)
    9f9c:	dec00a04 	addi	sp,sp,40
    9fa0:	f800283a 	ret
    9fa4:	a8c00217 	ldw	r3,8(r21)
    9fa8:	8c63883a 	add	r17,r17,r17
    9fac:	8c63883a 	add	r17,r17,r17
    9fb0:	1c45c83a 	sub	r2,r3,r17
    9fb4:	a8800215 	stw	r2,8(r21)
    9fb8:	b5800204 	addi	r22,r22,8
    9fbc:	bdc00204 	addi	r23,r23,8
    9fc0:	103fdb1e 	bne	r2,zero,9f30 <__alt_data_end+0xfffb4800>
    9fc4:	0005883a 	mov	r2,zero
    9fc8:	003fe806 	br	9f6c <__alt_data_end+0xfffb483c>
    9fcc:	00079500 	call	7950 <__sfvwrite_r>
    9fd0:	003fe606 	br	9f6c <__alt_data_end+0xfffb483c>

00009fd4 <__sprint_r>:
    9fd4:	30c00217 	ldw	r3,8(r6)
    9fd8:	18000126 	beq	r3,zero,9fe0 <__sprint_r+0xc>
    9fdc:	0009ed81 	jmpi	9ed8 <__sprint_r.part.0>
    9fe0:	30000115 	stw	zero,4(r6)
    9fe4:	0005883a 	mov	r2,zero
    9fe8:	f800283a 	ret

00009fec <___vfiprintf_internal_r>:
    9fec:	defeca04 	addi	sp,sp,-1240
    9ff0:	dcc12f15 	stw	r19,1212(sp)
    9ff4:	dfc13515 	stw	ra,1236(sp)
    9ff8:	df013415 	stw	fp,1232(sp)
    9ffc:	ddc13315 	stw	r23,1228(sp)
    a000:	dd813215 	stw	r22,1224(sp)
    a004:	dd413115 	stw	r21,1220(sp)
    a008:	dd013015 	stw	r20,1216(sp)
    a00c:	dc812e15 	stw	r18,1208(sp)
    a010:	dc412d15 	stw	r17,1204(sp)
    a014:	dc012c15 	stw	r16,1200(sp)
    a018:	d9012115 	stw	r4,1156(sp)
    a01c:	d9412015 	stw	r5,1152(sp)
    a020:	d9c12315 	stw	r7,1164(sp)
    a024:	3027883a 	mov	r19,r6
    a028:	20000226 	beq	r4,zero,a034 <___vfiprintf_internal_r+0x48>
    a02c:	20800e17 	ldw	r2,56(r4)
    a030:	1000f726 	beq	r2,zero,a410 <___vfiprintf_internal_r+0x424>
    a034:	d8812017 	ldw	r2,1152(sp)
    a038:	10c0030b 	ldhu	r3,12(r2)
    a03c:	1908000c 	andi	r4,r3,8192
    a040:	1805883a 	mov	r2,r3
    a044:	2000081e 	bne	r4,zero,a068 <___vfiprintf_internal_r+0x7c>
    a048:	d9412017 	ldw	r5,1152(sp)
    a04c:	18880014 	ori	r2,r3,8192
    a050:	00f7ffc4 	movi	r3,-8193
    a054:	29001917 	ldw	r4,100(r5)
    a058:	2880030d 	sth	r2,12(r5)
    a05c:	20c8703a 	and	r4,r4,r3
    a060:	29001915 	stw	r4,100(r5)
    a064:	1007883a 	mov	r3,r2
    a068:	1100020c 	andi	r4,r2,8
    a06c:	2000a726 	beq	r4,zero,a30c <___vfiprintf_internal_r+0x320>
    a070:	d9412017 	ldw	r5,1152(sp)
    a074:	29000417 	ldw	r4,16(r5)
    a078:	2000a426 	beq	r4,zero,a30c <___vfiprintf_internal_r+0x320>
    a07c:	1080068c 	andi	r2,r2,26
    a080:	01000284 	movi	r4,10
    a084:	1100ab26 	beq	r2,r4,a334 <___vfiprintf_internal_r+0x348>
    a088:	d9010a04 	addi	r4,sp,1064
    a08c:	d94109c4 	addi	r5,sp,1063
    a090:	07000074 	movhi	fp,1
    a094:	04400074 	movhi	r17,1
    a098:	2145c83a 	sub	r2,r4,r5
    a09c:	e7093f04 	addi	fp,fp,9468
    a0a0:	8c493b04 	addi	r17,r17,9452
    a0a4:	d9011e15 	stw	r4,1144(sp)
    a0a8:	d9411f15 	stw	r5,1148(sp)
    a0ac:	dec11a15 	stw	sp,1128(sp)
    a0b0:	d8011c15 	stw	zero,1136(sp)
    a0b4:	d8011b15 	stw	zero,1132(sp)
    a0b8:	d8012715 	stw	zero,1180(sp)
    a0bc:	d8012515 	stw	zero,1172(sp)
    a0c0:	d811883a 	mov	r8,sp
    a0c4:	d8812815 	stw	r2,1184(sp)
    a0c8:	982f883a 	mov	r23,r19
    a0cc:	b8800007 	ldb	r2,0(r23)
    a0d0:	1003b026 	beq	r2,zero,af94 <___vfiprintf_internal_r+0xfa8>
    a0d4:	01000944 	movi	r4,37
    a0d8:	1103ae26 	beq	r2,r4,af94 <___vfiprintf_internal_r+0xfa8>
    a0dc:	b805883a 	mov	r2,r23
    a0e0:	00000106 	br	a0e8 <___vfiprintf_internal_r+0xfc>
    a0e4:	19000326 	beq	r3,r4,a0f4 <___vfiprintf_internal_r+0x108>
    a0e8:	10800044 	addi	r2,r2,1
    a0ec:	10c00007 	ldb	r3,0(r2)
    a0f0:	183ffc1e 	bne	r3,zero,a0e4 <__alt_data_end+0xfffb49b4>
    a0f4:	15e1c83a 	sub	r16,r2,r23
    a0f8:	1029883a 	mov	r20,r2
    a0fc:	80001026 	beq	r16,zero,a140 <___vfiprintf_internal_r+0x154>
    a100:	d8c11c17 	ldw	r3,1136(sp)
    a104:	d8811b17 	ldw	r2,1132(sp)
    a108:	45c00015 	stw	r23,0(r8)
    a10c:	80c7883a 	add	r3,r16,r3
    a110:	10800044 	addi	r2,r2,1
    a114:	44000115 	stw	r16,4(r8)
    a118:	d8c11c15 	stw	r3,1136(sp)
    a11c:	d8811b15 	stw	r2,1132(sp)
    a120:	010001c4 	movi	r4,7
    a124:	2080740e 	bge	r4,r2,a2f8 <___vfiprintf_internal_r+0x30c>
    a128:	1803a71e 	bne	r3,zero,afc8 <___vfiprintf_internal_r+0xfdc>
    a12c:	d8c12517 	ldw	r3,1172(sp)
    a130:	d8011b15 	stw	zero,1132(sp)
    a134:	d811883a 	mov	r8,sp
    a138:	1c07883a 	add	r3,r3,r16
    a13c:	d8c12515 	stw	r3,1172(sp)
    a140:	a0800007 	ldb	r2,0(r20)
    a144:	1002bf26 	beq	r2,zero,ac44 <___vfiprintf_internal_r+0xc58>
    a148:	a5c00044 	addi	r23,r20,1
    a14c:	a1800047 	ldb	r6,1(r20)
    a150:	d8011d85 	stb	zero,1142(sp)
    a154:	d8012205 	stb	zero,1160(sp)
    a158:	043fffc4 	movi	r16,-1
    a15c:	d8012415 	stw	zero,1168(sp)
    a160:	0025883a 	mov	r18,zero
    a164:	05001604 	movi	r20,88
    a168:	05400244 	movi	r21,9
    a16c:	4027883a 	mov	r19,r8
    a170:	bdc00044 	addi	r23,r23,1
    a174:	30bff804 	addi	r2,r6,-32
    a178:	a0825636 	bltu	r20,r2,aad4 <___vfiprintf_internal_r+0xae8>
    a17c:	100490ba 	slli	r2,r2,2
    a180:	01000074 	movhi	r4,1
    a184:	21286504 	addi	r4,r4,-24172
    a188:	1105883a 	add	r2,r2,r4
    a18c:	10800017 	ldw	r2,0(r2)
    a190:	1000683a 	jmp	r2
    a194:	0000aa64 	muli	zero,zero,681
    a198:	0000aad4 	movui	zero,683
    a19c:	0000aad4 	movui	zero,683
    a1a0:	0000aac8 	cmpgei	zero,zero,683
    a1a4:	0000aad4 	movui	zero,683
    a1a8:	0000aad4 	movui	zero,683
    a1ac:	0000aad4 	movui	zero,683
    a1b0:	0000aad4 	movui	zero,683
    a1b4:	0000aad4 	movui	zero,683
    a1b8:	0000aad4 	movui	zero,683
    a1bc:	0000a854 	movui	zero,673
    a1c0:	0000aa7c 	xorhi	zero,zero,681
    a1c4:	0000aad4 	movui	zero,683
    a1c8:	0000a428 	cmpgeui	zero,zero,656
    a1cc:	0000a878 	rdprs	zero,zero,673
    a1d0:	0000aad4 	movui	zero,683
    a1d4:	0000a434 	movhi	zero,656
    a1d8:	0000a440 	call	a44 <setup_keyboard+0x3a4>
    a1dc:	0000a440 	call	a44 <setup_keyboard+0x3a4>
    a1e0:	0000a440 	call	a44 <setup_keyboard+0x3a4>
    a1e4:	0000a440 	call	a44 <setup_keyboard+0x3a4>
    a1e8:	0000a440 	call	a44 <setup_keyboard+0x3a4>
    a1ec:	0000a440 	call	a44 <setup_keyboard+0x3a4>
    a1f0:	0000a440 	call	a44 <setup_keyboard+0x3a4>
    a1f4:	0000a440 	call	a44 <setup_keyboard+0x3a4>
    a1f8:	0000a440 	call	a44 <setup_keyboard+0x3a4>
    a1fc:	0000aad4 	movui	zero,683
    a200:	0000aad4 	movui	zero,683
    a204:	0000aad4 	movui	zero,683
    a208:	0000aad4 	movui	zero,683
    a20c:	0000aad4 	movui	zero,683
    a210:	0000aad4 	movui	zero,683
    a214:	0000aad4 	movui	zero,683
    a218:	0000aad4 	movui	zero,683
    a21c:	0000aad4 	movui	zero,683
    a220:	0000aad4 	movui	zero,683
    a224:	0000a480 	call	a48 <setup_keyboard+0x3a8>
    a228:	0000aad4 	movui	zero,683
    a22c:	0000aad4 	movui	zero,683
    a230:	0000aad4 	movui	zero,683
    a234:	0000aad4 	movui	zero,683
    a238:	0000aad4 	movui	zero,683
    a23c:	0000aad4 	movui	zero,683
    a240:	0000aad4 	movui	zero,683
    a244:	0000aad4 	movui	zero,683
    a248:	0000aad4 	movui	zero,683
    a24c:	0000aad4 	movui	zero,683
    a250:	0000a770 	cmpltui	zero,zero,669
    a254:	0000aad4 	movui	zero,683
    a258:	0000aad4 	movui	zero,683
    a25c:	0000aad4 	movui	zero,683
    a260:	0000aad4 	movui	zero,683
    a264:	0000aad4 	movui	zero,683
    a268:	0000a7b0 	cmpltui	zero,zero,670
    a26c:	0000aad4 	movui	zero,683
    a270:	0000aad4 	movui	zero,683
    a274:	0000a7f4 	movhi	zero,671
    a278:	0000aad4 	movui	zero,683
    a27c:	0000aad4 	movui	zero,683
    a280:	0000aad4 	movui	zero,683
    a284:	0000aad4 	movui	zero,683
    a288:	0000aad4 	movui	zero,683
    a28c:	0000aad4 	movui	zero,683
    a290:	0000aad4 	movui	zero,683
    a294:	0000aad4 	movui	zero,683
    a298:	0000aad4 	movui	zero,683
    a29c:	0000aad4 	movui	zero,683
    a2a0:	0000a73c 	xorhi	zero,zero,668
    a2a4:	0000aa8c 	andi	zero,zero,682
    a2a8:	0000aad4 	movui	zero,683
    a2ac:	0000aad4 	movui	zero,683
    a2b0:	0000aad4 	movui	zero,683
    a2b4:	0000a8c8 	cmpgei	zero,zero,675
    a2b8:	0000aa8c 	andi	zero,zero,682
    a2bc:	0000aad4 	movui	zero,683
    a2c0:	0000aad4 	movui	zero,683
    a2c4:	0000a7e0 	cmpeqi	zero,zero,671
    a2c8:	0000aad4 	movui	zero,683
    a2cc:	0000aa2c 	andhi	zero,zero,680
    a2d0:	0000a9b4 	movhi	zero,678
    a2d4:	0000a9e8 	cmpgeui	zero,zero,679
    a2d8:	0000a8d4 	movui	zero,675
    a2dc:	0000aad4 	movui	zero,683
    a2e0:	0000a8e0 	cmpeqi	zero,zero,675
    a2e4:	0000aad4 	movui	zero,683
    a2e8:	0000a93c 	xorhi	zero,zero,676
    a2ec:	0000aad4 	movui	zero,683
    a2f0:	0000aad4 	movui	zero,683
    a2f4:	0000a970 	cmpltui	zero,zero,677
    a2f8:	42000204 	addi	r8,r8,8
    a2fc:	d8c12517 	ldw	r3,1172(sp)
    a300:	1c07883a 	add	r3,r3,r16
    a304:	d8c12515 	stw	r3,1172(sp)
    a308:	003f8d06 	br	a140 <__alt_data_end+0xfffb4a10>
    a30c:	d9012117 	ldw	r4,1156(sp)
    a310:	d9412017 	ldw	r5,1152(sp)
    a314:	00054b00 	call	54b0 <__swsetup_r>
    a318:	1000301e 	bne	r2,zero,a3dc <___vfiprintf_internal_r+0x3f0>
    a31c:	d8812017 	ldw	r2,1152(sp)
    a320:	01000284 	movi	r4,10
    a324:	10c0030b 	ldhu	r3,12(r2)
    a328:	1805883a 	mov	r2,r3
    a32c:	1080068c 	andi	r2,r2,26
    a330:	113f551e 	bne	r2,r4,a088 <__alt_data_end+0xfffb4958>
    a334:	d9012017 	ldw	r4,1152(sp)
    a338:	2080038b 	ldhu	r2,14(r4)
    a33c:	113fffcc 	andi	r4,r2,65535
    a340:	2120001c 	xori	r4,r4,32768
    a344:	21200004 	addi	r4,r4,-32768
    a348:	203f4f16 	blt	r4,zero,a088 <__alt_data_end+0xfffb4958>
    a34c:	d9412017 	ldw	r5,1152(sp)
    a350:	d9012117 	ldw	r4,1156(sp)
    a354:	d9c12317 	ldw	r7,1164(sp)
    a358:	2b001917 	ldw	r12,100(r5)
    a35c:	2ac00717 	ldw	r11,28(r5)
    a360:	2a800917 	ldw	r10,36(r5)
    a364:	02010004 	movi	r8,1024
    a368:	18ffff4c 	andi	r3,r3,65533
    a36c:	da0b883a 	add	r5,sp,r8
    a370:	980d883a 	mov	r6,r19
    a374:	d8c1030d 	sth	r3,1036(sp)
    a378:	db011915 	stw	r12,1124(sp)
    a37c:	d881038d 	sth	r2,1038(sp)
    a380:	dac10715 	stw	r11,1052(sp)
    a384:	da810915 	stw	r10,1060(sp)
    a388:	dec10015 	stw	sp,1024(sp)
    a38c:	dec10415 	stw	sp,1040(sp)
    a390:	da010215 	stw	r8,1032(sp)
    a394:	da010515 	stw	r8,1044(sp)
    a398:	d8010615 	stw	zero,1048(sp)
    a39c:	0009fec0 	call	9fec <___vfiprintf_internal_r>
    a3a0:	1021883a 	mov	r16,r2
    a3a4:	10000416 	blt	r2,zero,a3b8 <___vfiprintf_internal_r+0x3cc>
    a3a8:	d9012117 	ldw	r4,1156(sp)
    a3ac:	d9410004 	addi	r5,sp,1024
    a3b0:	0006f300 	call	6f30 <_fflush_r>
    a3b4:	10040f1e 	bne	r2,zero,b3f4 <___vfiprintf_internal_r+0x1408>
    a3b8:	d881030b 	ldhu	r2,1036(sp)
    a3bc:	1080100c 	andi	r2,r2,64
    a3c0:	10000426 	beq	r2,zero,a3d4 <___vfiprintf_internal_r+0x3e8>
    a3c4:	d8c12017 	ldw	r3,1152(sp)
    a3c8:	1880030b 	ldhu	r2,12(r3)
    a3cc:	10801014 	ori	r2,r2,64
    a3d0:	1880030d 	sth	r2,12(r3)
    a3d4:	8005883a 	mov	r2,r16
    a3d8:	00000106 	br	a3e0 <___vfiprintf_internal_r+0x3f4>
    a3dc:	00bfffc4 	movi	r2,-1
    a3e0:	dfc13517 	ldw	ra,1236(sp)
    a3e4:	df013417 	ldw	fp,1232(sp)
    a3e8:	ddc13317 	ldw	r23,1228(sp)
    a3ec:	dd813217 	ldw	r22,1224(sp)
    a3f0:	dd413117 	ldw	r21,1220(sp)
    a3f4:	dd013017 	ldw	r20,1216(sp)
    a3f8:	dcc12f17 	ldw	r19,1212(sp)
    a3fc:	dc812e17 	ldw	r18,1208(sp)
    a400:	dc412d17 	ldw	r17,1204(sp)
    a404:	dc012c17 	ldw	r16,1200(sp)
    a408:	dec13604 	addi	sp,sp,1240
    a40c:	f800283a 	ret
    a410:	00074ec0 	call	74ec <__sinit>
    a414:	003f0706 	br	a034 <__alt_data_end+0xfffb4904>
    a418:	d8c12417 	ldw	r3,1168(sp)
    a41c:	d8812315 	stw	r2,1164(sp)
    a420:	00c7c83a 	sub	r3,zero,r3
    a424:	d8c12415 	stw	r3,1168(sp)
    a428:	94800114 	ori	r18,r18,4
    a42c:	b9800007 	ldb	r6,0(r23)
    a430:	003f4f06 	br	a170 <__alt_data_end+0xfffb4a40>
    a434:	94802014 	ori	r18,r18,128
    a438:	b9800007 	ldb	r6,0(r23)
    a43c:	003f4c06 	br	a170 <__alt_data_end+0xfffb4a40>
    a440:	dc012615 	stw	r16,1176(sp)
    a444:	d8012415 	stw	zero,1168(sp)
    a448:	35bff404 	addi	r22,r6,-48
    a44c:	0009883a 	mov	r4,zero
    a450:	b821883a 	mov	r16,r23
    a454:	01400284 	movi	r5,10
    a458:	000cb080 	call	cb08 <__mulsi3>
    a45c:	81800007 	ldb	r6,0(r16)
    a460:	1589883a 	add	r4,r2,r22
    a464:	bdc00044 	addi	r23,r23,1
    a468:	35bff404 	addi	r22,r6,-48
    a46c:	b821883a 	mov	r16,r23
    a470:	adbff82e 	bgeu	r21,r22,a454 <__alt_data_end+0xfffb4d24>
    a474:	d9012415 	stw	r4,1168(sp)
    a478:	dc012617 	ldw	r16,1176(sp)
    a47c:	003f3d06 	br	a174 <__alt_data_end+0xfffb4a44>
    a480:	d8c12203 	ldbu	r3,1160(sp)
    a484:	94800414 	ori	r18,r18,16
    a488:	9080080c 	andi	r2,r18,32
    a48c:	d8c11d85 	stb	r3,1142(sp)
    a490:	9811883a 	mov	r8,r19
    a494:	d8c12317 	ldw	r3,1164(sp)
    a498:	10018226 	beq	r2,zero,aaa4 <___vfiprintf_internal_r+0xab8>
    a49c:	d9012317 	ldw	r4,1164(sp)
    a4a0:	18800117 	ldw	r2,4(r3)
    a4a4:	1cc00017 	ldw	r19,0(r3)
    a4a8:	21000204 	addi	r4,r4,8
    a4ac:	d9012315 	stw	r4,1164(sp)
    a4b0:	102b883a 	mov	r21,r2
    a4b4:	10030016 	blt	r2,zero,b0b8 <___vfiprintf_internal_r+0x10cc>
    a4b8:	dd811d83 	ldbu	r22,1142(sp)
    a4bc:	8029883a 	mov	r20,r16
    a4c0:	00800044 	movi	r2,1
    a4c4:	9d46b03a 	or	r3,r19,r21
    a4c8:	80000216 	blt	r16,zero,a4d4 <___vfiprintf_internal_r+0x4e8>
    a4cc:	013fdfc4 	movi	r4,-129
    a4d0:	9124703a 	and	r18,r18,r4
    a4d4:	1801b41e 	bne	r3,zero,aba8 <___vfiprintf_internal_r+0xbbc>
    a4d8:	80028126 	beq	r16,zero,aee0 <___vfiprintf_internal_r+0xef4>
    a4dc:	10803fcc 	andi	r2,r2,255
    a4e0:	00c00044 	movi	r3,1
    a4e4:	10c1d126 	beq	r2,r3,ac2c <___vfiprintf_internal_r+0xc40>
    a4e8:	00c00084 	movi	r3,2
    a4ec:	10c28626 	beq	r2,r3,af08 <___vfiprintf_internal_r+0xf1c>
    a4f0:	d8c10a04 	addi	r3,sp,1064
    a4f4:	9808d0fa 	srli	r4,r19,3
    a4f8:	a80a977a 	slli	r5,r21,29
    a4fc:	a82ad0fa 	srli	r21,r21,3
    a500:	9cc001cc 	andi	r19,r19,7
    a504:	98800c04 	addi	r2,r19,48
    a508:	18ffffc4 	addi	r3,r3,-1
    a50c:	2926b03a 	or	r19,r5,r4
    a510:	18800005 	stb	r2,0(r3)
    a514:	9d48b03a 	or	r4,r19,r21
    a518:	203ff61e 	bne	r4,zero,a4f4 <__alt_data_end+0xfffb4dc4>
    a51c:	9100004c 	andi	r4,r18,1
    a520:	d8c12215 	stw	r3,1160(sp)
    a524:	2002b31e 	bne	r4,zero,aff4 <___vfiprintf_internal_r+0x1008>
    a528:	d9411e17 	ldw	r5,1144(sp)
    a52c:	28e9c83a 	sub	r20,r5,r3
    a530:	a02b883a 	mov	r21,r20
    a534:	a400010e 	bge	r20,r16,a53c <___vfiprintf_internal_r+0x550>
    a538:	802b883a 	mov	r21,r16
    a53c:	b5803fcc 	andi	r22,r22,255
    a540:	b580201c 	xori	r22,r22,128
    a544:	b5bfe004 	addi	r22,r22,-128
    a548:	b0000126 	beq	r22,zero,a550 <___vfiprintf_internal_r+0x564>
    a54c:	ad400044 	addi	r21,r21,1
    a550:	9280008c 	andi	r10,r18,2
    a554:	50000126 	beq	r10,zero,a55c <___vfiprintf_internal_r+0x570>
    a558:	ad400084 	addi	r21,r21,2
    a55c:	9580210c 	andi	r22,r18,132
    a560:	b001751e 	bne	r22,zero,ab38 <___vfiprintf_internal_r+0xb4c>
    a564:	d9012417 	ldw	r4,1168(sp)
    a568:	2567c83a 	sub	r19,r4,r21
    a56c:	04c1720e 	bge	zero,r19,ab38 <___vfiprintf_internal_r+0xb4c>
    a570:	01c00404 	movi	r7,16
    a574:	d8c11c17 	ldw	r3,1136(sp)
    a578:	3cc36b0e 	bge	r7,r19,b328 <___vfiprintf_internal_r+0x133c>
    a57c:	00800074 	movhi	r2,1
    a580:	10893f04 	addi	r2,r2,9468
    a584:	dc012915 	stw	r16,1188(sp)
    a588:	d9011b17 	ldw	r4,1132(sp)
    a58c:	9821883a 	mov	r16,r19
    a590:	d8812615 	stw	r2,1176(sp)
    a594:	030001c4 	movi	r12,7
    a598:	5027883a 	mov	r19,r10
    a59c:	00000506 	br	a5b4 <___vfiprintf_internal_r+0x5c8>
    a5a0:	21400084 	addi	r5,r4,2
    a5a4:	42000204 	addi	r8,r8,8
    a5a8:	1009883a 	mov	r4,r2
    a5ac:	843ffc04 	addi	r16,r16,-16
    a5b0:	3c000d0e 	bge	r7,r16,a5e8 <___vfiprintf_internal_r+0x5fc>
    a5b4:	18c00404 	addi	r3,r3,16
    a5b8:	20800044 	addi	r2,r4,1
    a5bc:	47000015 	stw	fp,0(r8)
    a5c0:	41c00115 	stw	r7,4(r8)
    a5c4:	d8c11c15 	stw	r3,1136(sp)
    a5c8:	d8811b15 	stw	r2,1132(sp)
    a5cc:	60bff40e 	bge	r12,r2,a5a0 <__alt_data_end+0xfffb4e70>
    a5d0:	18014b1e 	bne	r3,zero,ab00 <___vfiprintf_internal_r+0xb14>
    a5d4:	843ffc04 	addi	r16,r16,-16
    a5d8:	0009883a 	mov	r4,zero
    a5dc:	01400044 	movi	r5,1
    a5e0:	d811883a 	mov	r8,sp
    a5e4:	3c3ff316 	blt	r7,r16,a5b4 <__alt_data_end+0xfffb4e84>
    a5e8:	9815883a 	mov	r10,r19
    a5ec:	8027883a 	mov	r19,r16
    a5f0:	dc012917 	ldw	r16,1188(sp)
    a5f4:	d9012617 	ldw	r4,1176(sp)
    a5f8:	98c7883a 	add	r3,r19,r3
    a5fc:	44c00115 	stw	r19,4(r8)
    a600:	41000015 	stw	r4,0(r8)
    a604:	d8c11c15 	stw	r3,1136(sp)
    a608:	d9411b15 	stw	r5,1132(sp)
    a60c:	008001c4 	movi	r2,7
    a610:	11425116 	blt	r2,r5,af58 <___vfiprintf_internal_r+0xf6c>
    a614:	d9011d87 	ldb	r4,1142(sp)
    a618:	42000204 	addi	r8,r8,8
    a61c:	28800044 	addi	r2,r5,1
    a620:	20014a1e 	bne	r4,zero,ab4c <___vfiprintf_internal_r+0xb60>
    a624:	50000c26 	beq	r10,zero,a658 <___vfiprintf_internal_r+0x66c>
    a628:	d9011d04 	addi	r4,sp,1140
    a62c:	18c00084 	addi	r3,r3,2
    a630:	41000015 	stw	r4,0(r8)
    a634:	01000084 	movi	r4,2
    a638:	41000115 	stw	r4,4(r8)
    a63c:	d8c11c15 	stw	r3,1136(sp)
    a640:	d8811b15 	stw	r2,1132(sp)
    a644:	010001c4 	movi	r4,7
    a648:	20822016 	blt	r4,r2,aecc <___vfiprintf_internal_r+0xee0>
    a64c:	100b883a 	mov	r5,r2
    a650:	42000204 	addi	r8,r8,8
    a654:	10800044 	addi	r2,r2,1
    a658:	01002004 	movi	r4,128
    a65c:	b101de26 	beq	r22,r4,add8 <___vfiprintf_internal_r+0xdec>
    a660:	8521c83a 	sub	r16,r16,r20
    a664:	0400230e 	bge	zero,r16,a6f4 <___vfiprintf_internal_r+0x708>
    a668:	04c00404 	movi	r19,16
    a66c:	9c030d0e 	bge	r19,r16,b2a4 <___vfiprintf_internal_r+0x12b8>
    a670:	00800074 	movhi	r2,1
    a674:	10893b04 	addi	r2,r2,9452
    a678:	d8812615 	stw	r2,1176(sp)
    a67c:	058001c4 	movi	r22,7
    a680:	00000506 	br	a698 <___vfiprintf_internal_r+0x6ac>
    a684:	28800084 	addi	r2,r5,2
    a688:	42000204 	addi	r8,r8,8
    a68c:	200b883a 	mov	r5,r4
    a690:	843ffc04 	addi	r16,r16,-16
    a694:	9c000d0e 	bge	r19,r16,a6cc <___vfiprintf_internal_r+0x6e0>
    a698:	18c00404 	addi	r3,r3,16
    a69c:	29000044 	addi	r4,r5,1
    a6a0:	44400015 	stw	r17,0(r8)
    a6a4:	44c00115 	stw	r19,4(r8)
    a6a8:	d8c11c15 	stw	r3,1136(sp)
    a6ac:	d9011b15 	stw	r4,1132(sp)
    a6b0:	b13ff40e 	bge	r22,r4,a684 <__alt_data_end+0xfffb4f54>
    a6b4:	1801321e 	bne	r3,zero,ab80 <___vfiprintf_internal_r+0xb94>
    a6b8:	843ffc04 	addi	r16,r16,-16
    a6bc:	000b883a 	mov	r5,zero
    a6c0:	00800044 	movi	r2,1
    a6c4:	d811883a 	mov	r8,sp
    a6c8:	9c3ff316 	blt	r19,r16,a698 <__alt_data_end+0xfffb4f68>
    a6cc:	d9012617 	ldw	r4,1176(sp)
    a6d0:	1c07883a 	add	r3,r3,r16
    a6d4:	44000115 	stw	r16,4(r8)
    a6d8:	41000015 	stw	r4,0(r8)
    a6dc:	d8c11c15 	stw	r3,1136(sp)
    a6e0:	d8811b15 	stw	r2,1132(sp)
    a6e4:	010001c4 	movi	r4,7
    a6e8:	20816216 	blt	r4,r2,ac74 <___vfiprintf_internal_r+0xc88>
    a6ec:	42000204 	addi	r8,r8,8
    a6f0:	10800044 	addi	r2,r2,1
    a6f4:	d9012217 	ldw	r4,1160(sp)
    a6f8:	1d07883a 	add	r3,r3,r20
    a6fc:	45000115 	stw	r20,4(r8)
    a700:	41000015 	stw	r4,0(r8)
    a704:	d8c11c15 	stw	r3,1136(sp)
    a708:	d8811b15 	stw	r2,1132(sp)
    a70c:	010001c4 	movi	r4,7
    a710:	2081610e 	bge	r4,r2,ac98 <___vfiprintf_internal_r+0xcac>
    a714:	1802211e 	bne	r3,zero,af9c <___vfiprintf_internal_r+0xfb0>
    a718:	d8011b15 	stw	zero,1132(sp)
    a71c:	9480010c 	andi	r18,r18,4
    a720:	9002171e 	bne	r18,zero,af80 <___vfiprintf_internal_r+0xf94>
    a724:	d9412417 	ldw	r5,1168(sp)
    a728:	a9433716 	blt	r21,r5,b408 <___vfiprintf_internal_r+0x141c>
    a72c:	d8812517 	ldw	r2,1172(sp)
    a730:	1545883a 	add	r2,r2,r21
    a734:	d8812515 	stw	r2,1172(sp)
    a738:	00019a06 	br	ada4 <___vfiprintf_internal_r+0xdb8>
    a73c:	d8c12317 	ldw	r3,1164(sp)
    a740:	05400044 	movi	r21,1
    a744:	9811883a 	mov	r8,r19
    a748:	18800017 	ldw	r2,0(r3)
    a74c:	18c00104 	addi	r3,r3,4
    a750:	d8c12315 	stw	r3,1164(sp)
    a754:	d8c10004 	addi	r3,sp,1024
    a758:	d8011d85 	stb	zero,1142(sp)
    a75c:	d8810005 	stb	r2,1024(sp)
    a760:	a829883a 	mov	r20,r21
    a764:	d8c12215 	stw	r3,1160(sp)
    a768:	0021883a 	mov	r16,zero
    a76c:	003f7806 	br	a550 <__alt_data_end+0xfffb4e20>
    a770:	94800414 	ori	r18,r18,16
    a774:	9080080c 	andi	r2,r18,32
    a778:	9811883a 	mov	r8,r19
    a77c:	10009026 	beq	r2,zero,a9c0 <___vfiprintf_internal_r+0x9d4>
    a780:	d8812317 	ldw	r2,1164(sp)
    a784:	d8c12317 	ldw	r3,1164(sp)
    a788:	14c00017 	ldw	r19,0(r2)
    a78c:	15400117 	ldw	r21,4(r2)
    a790:	18c00204 	addi	r3,r3,8
    a794:	d8c12315 	stw	r3,1164(sp)
    a798:	0005883a 	mov	r2,zero
    a79c:	9d46b03a 	or	r3,r19,r21
    a7a0:	d8011d85 	stb	zero,1142(sp)
    a7a4:	8029883a 	mov	r20,r16
    a7a8:	002d883a 	mov	r22,zero
    a7ac:	003f4606 	br	a4c8 <__alt_data_end+0xfffb4d98>
    a7b0:	94800414 	ori	r18,r18,16
    a7b4:	9080080c 	andi	r2,r18,32
    a7b8:	9811883a 	mov	r8,r19
    a7bc:	10006226 	beq	r2,zero,a948 <___vfiprintf_internal_r+0x95c>
    a7c0:	d9012317 	ldw	r4,1164(sp)
    a7c4:	00800044 	movi	r2,1
    a7c8:	24c00017 	ldw	r19,0(r4)
    a7cc:	25400117 	ldw	r21,4(r4)
    a7d0:	21000204 	addi	r4,r4,8
    a7d4:	d9012315 	stw	r4,1164(sp)
    a7d8:	9d46b03a 	or	r3,r19,r21
    a7dc:	003ff006 	br	a7a0 <__alt_data_end+0xfffb5070>
    a7e0:	b9800007 	ldb	r6,0(r23)
    a7e4:	00801b04 	movi	r2,108
    a7e8:	3082b226 	beq	r6,r2,b2b4 <___vfiprintf_internal_r+0x12c8>
    a7ec:	94800414 	ori	r18,r18,16
    a7f0:	003e5f06 	br	a170 <__alt_data_end+0xfffb4a40>
    a7f4:	d8c12203 	ldbu	r3,1160(sp)
    a7f8:	01000074 	movhi	r4,1
    a7fc:	2108d504 	addi	r4,r4,9044
    a800:	d8c11d85 	stb	r3,1142(sp)
    a804:	d9012715 	stw	r4,1180(sp)
    a808:	90c0080c 	andi	r3,r18,32
    a80c:	9811883a 	mov	r8,r19
    a810:	d8812317 	ldw	r2,1164(sp)
    a814:	18005f26 	beq	r3,zero,a994 <___vfiprintf_internal_r+0x9a8>
    a818:	d9012317 	ldw	r4,1164(sp)
    a81c:	14c00017 	ldw	r19,0(r2)
    a820:	15400117 	ldw	r21,4(r2)
    a824:	21000204 	addi	r4,r4,8
    a828:	d9012315 	stw	r4,1164(sp)
    a82c:	9080004c 	andi	r2,r18,1
    a830:	1001e226 	beq	r2,zero,afbc <___vfiprintf_internal_r+0xfd0>
    a834:	9d46b03a 	or	r3,r19,r21
    a838:	18024e26 	beq	r3,zero,b174 <___vfiprintf_internal_r+0x1188>
    a83c:	00800c04 	movi	r2,48
    a840:	d8811d05 	stb	r2,1140(sp)
    a844:	d9811d45 	stb	r6,1141(sp)
    a848:	94800094 	ori	r18,r18,2
    a84c:	00800084 	movi	r2,2
    a850:	003fd306 	br	a7a0 <__alt_data_end+0xfffb5070>
    a854:	d9012317 	ldw	r4,1164(sp)
    a858:	d9412317 	ldw	r5,1164(sp)
    a85c:	21000017 	ldw	r4,0(r4)
    a860:	28800104 	addi	r2,r5,4
    a864:	d9012415 	stw	r4,1168(sp)
    a868:	203eeb16 	blt	r4,zero,a418 <__alt_data_end+0xfffb4ce8>
    a86c:	d8812315 	stw	r2,1164(sp)
    a870:	b9800007 	ldb	r6,0(r23)
    a874:	003e3e06 	br	a170 <__alt_data_end+0xfffb4a40>
    a878:	b9800007 	ldb	r6,0(r23)
    a87c:	01000a84 	movi	r4,42
    a880:	b8800044 	addi	r2,r23,1
    a884:	3102d226 	beq	r6,r4,b3d0 <___vfiprintf_internal_r+0x13e4>
    a888:	35bff404 	addi	r22,r6,-48
    a88c:	102f883a 	mov	r23,r2
    a890:	0021883a 	mov	r16,zero
    a894:	adbe3736 	bltu	r21,r22,a174 <__alt_data_end+0xfffb4a44>
    a898:	0009883a 	mov	r4,zero
    a89c:	01400284 	movi	r5,10
    a8a0:	000cb080 	call	cb08 <__mulsi3>
    a8a4:	b9800007 	ldb	r6,0(r23)
    a8a8:	b089883a 	add	r4,r22,r2
    a8ac:	bdc00044 	addi	r23,r23,1
    a8b0:	35bff404 	addi	r22,r6,-48
    a8b4:	adbff92e 	bgeu	r21,r22,a89c <__alt_data_end+0xfffb516c>
    a8b8:	2021883a 	mov	r16,r4
    a8bc:	203e2d0e 	bge	r4,zero,a174 <__alt_data_end+0xfffb4a44>
    a8c0:	043fffc4 	movi	r16,-1
    a8c4:	003e2b06 	br	a174 <__alt_data_end+0xfffb4a44>
    a8c8:	94801014 	ori	r18,r18,64
    a8cc:	b9800007 	ldb	r6,0(r23)
    a8d0:	003e2706 	br	a170 <__alt_data_end+0xfffb4a40>
    a8d4:	94800814 	ori	r18,r18,32
    a8d8:	b9800007 	ldb	r6,0(r23)
    a8dc:	003e2406 	br	a170 <__alt_data_end+0xfffb4a40>
    a8e0:	d9412317 	ldw	r5,1164(sp)
    a8e4:	d8812317 	ldw	r2,1164(sp)
    a8e8:	d8011d85 	stb	zero,1142(sp)
    a8ec:	29400017 	ldw	r5,0(r5)
    a8f0:	9811883a 	mov	r8,r19
    a8f4:	14c00104 	addi	r19,r2,4
    a8f8:	d9412215 	stw	r5,1160(sp)
    a8fc:	28029026 	beq	r5,zero,b340 <___vfiprintf_internal_r+0x1354>
    a900:	d9012217 	ldw	r4,1160(sp)
    a904:	80027616 	blt	r16,zero,b2e0 <___vfiprintf_internal_r+0x12f4>
    a908:	000b883a 	mov	r5,zero
    a90c:	800d883a 	mov	r6,r16
    a910:	da012a15 	stw	r8,1192(sp)
    a914:	00081fc0 	call	81fc <memchr>
    a918:	da012a17 	ldw	r8,1192(sp)
    a91c:	1002a026 	beq	r2,zero,b3a0 <___vfiprintf_internal_r+0x13b4>
    a920:	d8c12217 	ldw	r3,1160(sp)
    a924:	10e9c83a 	sub	r20,r2,r3
    a928:	85023816 	blt	r16,r20,b20c <___vfiprintf_internal_r+0x1220>
    a92c:	dd811d83 	ldbu	r22,1142(sp)
    a930:	dcc12315 	stw	r19,1164(sp)
    a934:	0021883a 	mov	r16,zero
    a938:	003efd06 	br	a530 <__alt_data_end+0xfffb4e00>
    a93c:	9080080c 	andi	r2,r18,32
    a940:	9811883a 	mov	r8,r19
    a944:	103f9e1e 	bne	r2,zero,a7c0 <__alt_data_end+0xfffb5090>
    a948:	9080040c 	andi	r2,r18,16
    a94c:	10021726 	beq	r2,zero,b1ac <___vfiprintf_internal_r+0x11c0>
    a950:	d9412317 	ldw	r5,1164(sp)
    a954:	002b883a 	mov	r21,zero
    a958:	00800044 	movi	r2,1
    a95c:	2cc00017 	ldw	r19,0(r5)
    a960:	29400104 	addi	r5,r5,4
    a964:	d9412315 	stw	r5,1164(sp)
    a968:	9807883a 	mov	r3,r19
    a96c:	003f8c06 	br	a7a0 <__alt_data_end+0xfffb5070>
    a970:	d8c12203 	ldbu	r3,1160(sp)
    a974:	01000074 	movhi	r4,1
    a978:	2108da04 	addi	r4,r4,9064
    a97c:	d8c11d85 	stb	r3,1142(sp)
    a980:	d9012715 	stw	r4,1180(sp)
    a984:	90c0080c 	andi	r3,r18,32
    a988:	9811883a 	mov	r8,r19
    a98c:	d8812317 	ldw	r2,1164(sp)
    a990:	183fa11e 	bne	r3,zero,a818 <__alt_data_end+0xfffb50e8>
    a994:	90c0040c 	andi	r3,r18,16
    a998:	1801e526 	beq	r3,zero,b130 <___vfiprintf_internal_r+0x1144>
    a99c:	d9412317 	ldw	r5,1164(sp)
    a9a0:	14c00017 	ldw	r19,0(r2)
    a9a4:	002b883a 	mov	r21,zero
    a9a8:	29400104 	addi	r5,r5,4
    a9ac:	d9412315 	stw	r5,1164(sp)
    a9b0:	003f9e06 	br	a82c <__alt_data_end+0xfffb50fc>
    a9b4:	9080080c 	andi	r2,r18,32
    a9b8:	9811883a 	mov	r8,r19
    a9bc:	103f701e 	bne	r2,zero,a780 <__alt_data_end+0xfffb5050>
    a9c0:	9080040c 	andi	r2,r18,16
    a9c4:	1001ef26 	beq	r2,zero,b184 <___vfiprintf_internal_r+0x1198>
    a9c8:	d9012317 	ldw	r4,1164(sp)
    a9cc:	002b883a 	mov	r21,zero
    a9d0:	0005883a 	mov	r2,zero
    a9d4:	24c00017 	ldw	r19,0(r4)
    a9d8:	21000104 	addi	r4,r4,4
    a9dc:	d9012315 	stw	r4,1164(sp)
    a9e0:	9807883a 	mov	r3,r19
    a9e4:	003f6e06 	br	a7a0 <__alt_data_end+0xfffb5070>
    a9e8:	d8c12317 	ldw	r3,1164(sp)
    a9ec:	9811883a 	mov	r8,r19
    a9f0:	00800c04 	movi	r2,48
    a9f4:	1cc00017 	ldw	r19,0(r3)
    a9f8:	01000074 	movhi	r4,1
    a9fc:	18c00104 	addi	r3,r3,4
    aa00:	d8811d05 	stb	r2,1140(sp)
    aa04:	2108da04 	addi	r4,r4,9064
    aa08:	00801e04 	movi	r2,120
    aa0c:	d8811d45 	stb	r2,1141(sp)
    aa10:	d8c12315 	stw	r3,1164(sp)
    aa14:	002b883a 	mov	r21,zero
    aa18:	94800094 	ori	r18,r18,2
    aa1c:	d9012715 	stw	r4,1180(sp)
    aa20:	00800084 	movi	r2,2
    aa24:	9807883a 	mov	r3,r19
    aa28:	003f5d06 	br	a7a0 <__alt_data_end+0xfffb5070>
    aa2c:	d8c12203 	ldbu	r3,1160(sp)
    aa30:	9080080c 	andi	r2,r18,32
    aa34:	9811883a 	mov	r8,r19
    aa38:	d8c11d85 	stb	r3,1142(sp)
    aa3c:	1001b126 	beq	r2,zero,b104 <___vfiprintf_internal_r+0x1118>
    aa40:	d9012317 	ldw	r4,1164(sp)
    aa44:	d9412517 	ldw	r5,1172(sp)
    aa48:	20800017 	ldw	r2,0(r4)
    aa4c:	2807d7fa 	srai	r3,r5,31
    aa50:	21000104 	addi	r4,r4,4
    aa54:	d9012315 	stw	r4,1164(sp)
    aa58:	11400015 	stw	r5,0(r2)
    aa5c:	10c00115 	stw	r3,4(r2)
    aa60:	003d9a06 	br	a0cc <__alt_data_end+0xfffb499c>
    aa64:	d8812207 	ldb	r2,1160(sp)
    aa68:	1001c41e 	bne	r2,zero,b17c <___vfiprintf_internal_r+0x1190>
    aa6c:	00c00804 	movi	r3,32
    aa70:	d8c12205 	stb	r3,1160(sp)
    aa74:	b9800007 	ldb	r6,0(r23)
    aa78:	003dbd06 	br	a170 <__alt_data_end+0xfffb4a40>
    aa7c:	00c00ac4 	movi	r3,43
    aa80:	d8c12205 	stb	r3,1160(sp)
    aa84:	b9800007 	ldb	r6,0(r23)
    aa88:	003db906 	br	a170 <__alt_data_end+0xfffb4a40>
    aa8c:	d8c12203 	ldbu	r3,1160(sp)
    aa90:	9080080c 	andi	r2,r18,32
    aa94:	9811883a 	mov	r8,r19
    aa98:	d8c11d85 	stb	r3,1142(sp)
    aa9c:	d8c12317 	ldw	r3,1164(sp)
    aaa0:	103e7e1e 	bne	r2,zero,a49c <__alt_data_end+0xfffb4d6c>
    aaa4:	9080040c 	andi	r2,r18,16
    aaa8:	1001a926 	beq	r2,zero,b150 <___vfiprintf_internal_r+0x1164>
    aaac:	1cc00017 	ldw	r19,0(r3)
    aab0:	d9412317 	ldw	r5,1164(sp)
    aab4:	982bd7fa 	srai	r21,r19,31
    aab8:	29400104 	addi	r5,r5,4
    aabc:	d9412315 	stw	r5,1164(sp)
    aac0:	a805883a 	mov	r2,r21
    aac4:	003e7b06 	br	a4b4 <__alt_data_end+0xfffb4d84>
    aac8:	94800054 	ori	r18,r18,1
    aacc:	b9800007 	ldb	r6,0(r23)
    aad0:	003da706 	br	a170 <__alt_data_end+0xfffb4a40>
    aad4:	d8c12203 	ldbu	r3,1160(sp)
    aad8:	9811883a 	mov	r8,r19
    aadc:	d8c11d85 	stb	r3,1142(sp)
    aae0:	30005826 	beq	r6,zero,ac44 <___vfiprintf_internal_r+0xc58>
    aae4:	05400044 	movi	r21,1
    aae8:	d8c10004 	addi	r3,sp,1024
    aaec:	d9810005 	stb	r6,1024(sp)
    aaf0:	d8011d85 	stb	zero,1142(sp)
    aaf4:	a829883a 	mov	r20,r21
    aaf8:	d8c12215 	stw	r3,1160(sp)
    aafc:	003f1a06 	br	a768 <__alt_data_end+0xfffb5038>
    ab00:	d9012117 	ldw	r4,1156(sp)
    ab04:	d9412017 	ldw	r5,1152(sp)
    ab08:	d9811a04 	addi	r6,sp,1128
    ab0c:	d9c12a15 	stw	r7,1192(sp)
    ab10:	db012b15 	stw	r12,1196(sp)
    ab14:	0009ed80 	call	9ed8 <__sprint_r.part.0>
    ab18:	d9c12a17 	ldw	r7,1192(sp)
    ab1c:	db012b17 	ldw	r12,1196(sp)
    ab20:	10004e1e 	bne	r2,zero,ac5c <___vfiprintf_internal_r+0xc70>
    ab24:	d9011b17 	ldw	r4,1132(sp)
    ab28:	d8c11c17 	ldw	r3,1136(sp)
    ab2c:	d811883a 	mov	r8,sp
    ab30:	21400044 	addi	r5,r4,1
    ab34:	003e9d06 	br	a5ac <__alt_data_end+0xfffb4e7c>
    ab38:	d9411b17 	ldw	r5,1132(sp)
    ab3c:	d8c11c17 	ldw	r3,1136(sp)
    ab40:	28800044 	addi	r2,r5,1
    ab44:	d9011d87 	ldb	r4,1142(sp)
    ab48:	203eb626 	beq	r4,zero,a624 <__alt_data_end+0xfffb4ef4>
    ab4c:	01000044 	movi	r4,1
    ab50:	d9411d84 	addi	r5,sp,1142
    ab54:	1907883a 	add	r3,r3,r4
    ab58:	41400015 	stw	r5,0(r8)
    ab5c:	41000115 	stw	r4,4(r8)
    ab60:	d8c11c15 	stw	r3,1136(sp)
    ab64:	d8811b15 	stw	r2,1132(sp)
    ab68:	014001c4 	movi	r5,7
    ab6c:	2880ce16 	blt	r5,r2,aea8 <___vfiprintf_internal_r+0xebc>
    ab70:	100b883a 	mov	r5,r2
    ab74:	42000204 	addi	r8,r8,8
    ab78:	10800044 	addi	r2,r2,1
    ab7c:	003ea906 	br	a624 <__alt_data_end+0xfffb4ef4>
    ab80:	d9012117 	ldw	r4,1156(sp)
    ab84:	d9412017 	ldw	r5,1152(sp)
    ab88:	d9811a04 	addi	r6,sp,1128
    ab8c:	0009ed80 	call	9ed8 <__sprint_r.part.0>
    ab90:	1000321e 	bne	r2,zero,ac5c <___vfiprintf_internal_r+0xc70>
    ab94:	d9411b17 	ldw	r5,1132(sp)
    ab98:	d8c11c17 	ldw	r3,1136(sp)
    ab9c:	d811883a 	mov	r8,sp
    aba0:	28800044 	addi	r2,r5,1
    aba4:	003eba06 	br	a690 <__alt_data_end+0xfffb4f60>
    aba8:	10803fcc 	andi	r2,r2,255
    abac:	00c00044 	movi	r3,1
    abb0:	10fe4d1e 	bne	r2,r3,a4e8 <__alt_data_end+0xfffb4db8>
    abb4:	a800021e 	bne	r21,zero,abc0 <___vfiprintf_internal_r+0xbd4>
    abb8:	00800244 	movi	r2,9
    abbc:	14c01b2e 	bgeu	r2,r19,ac2c <___vfiprintf_internal_r+0xc40>
    abc0:	dc012215 	stw	r16,1160(sp)
    abc4:	dd010a04 	addi	r20,sp,1064
    abc8:	a821883a 	mov	r16,r21
    abcc:	402b883a 	mov	r21,r8
    abd0:	9809883a 	mov	r4,r19
    abd4:	800b883a 	mov	r5,r16
    abd8:	01800284 	movi	r6,10
    abdc:	000f883a 	mov	r7,zero
    abe0:	000c3c00 	call	c3c0 <__umoddi3>
    abe4:	10800c04 	addi	r2,r2,48
    abe8:	a53fffc4 	addi	r20,r20,-1
    abec:	9809883a 	mov	r4,r19
    abf0:	800b883a 	mov	r5,r16
    abf4:	01800284 	movi	r6,10
    abf8:	000f883a 	mov	r7,zero
    abfc:	a0800005 	stb	r2,0(r20)
    ac00:	000bd800 	call	bd80 <__udivdi3>
    ac04:	1027883a 	mov	r19,r2
    ac08:	10c4b03a 	or	r2,r2,r3
    ac0c:	1821883a 	mov	r16,r3
    ac10:	103fef1e 	bne	r2,zero,abd0 <__alt_data_end+0xfffb54a0>
    ac14:	d9011e17 	ldw	r4,1144(sp)
    ac18:	dc012217 	ldw	r16,1160(sp)
    ac1c:	a811883a 	mov	r8,r21
    ac20:	dd012215 	stw	r20,1160(sp)
    ac24:	2529c83a 	sub	r20,r4,r20
    ac28:	003e4106 	br	a530 <__alt_data_end+0xfffb4e00>
    ac2c:	9cc00c04 	addi	r19,r19,48
    ac30:	d8c109c4 	addi	r3,sp,1063
    ac34:	dcc109c5 	stb	r19,1063(sp)
    ac38:	dd012817 	ldw	r20,1184(sp)
    ac3c:	d8c12215 	stw	r3,1160(sp)
    ac40:	003e3b06 	br	a530 <__alt_data_end+0xfffb4e00>
    ac44:	d8811c17 	ldw	r2,1136(sp)
    ac48:	10000426 	beq	r2,zero,ac5c <___vfiprintf_internal_r+0xc70>
    ac4c:	d9012117 	ldw	r4,1156(sp)
    ac50:	d9412017 	ldw	r5,1152(sp)
    ac54:	d9811a04 	addi	r6,sp,1128
    ac58:	0009ed80 	call	9ed8 <__sprint_r.part.0>
    ac5c:	d9412017 	ldw	r5,1152(sp)
    ac60:	2880030b 	ldhu	r2,12(r5)
    ac64:	1080100c 	andi	r2,r2,64
    ac68:	103ddc1e 	bne	r2,zero,a3dc <__alt_data_end+0xfffb4cac>
    ac6c:	d8812517 	ldw	r2,1172(sp)
    ac70:	003ddb06 	br	a3e0 <__alt_data_end+0xfffb4cb0>
    ac74:	1801061e 	bne	r3,zero,b090 <___vfiprintf_internal_r+0x10a4>
    ac78:	d8c12217 	ldw	r3,1160(sp)
    ac7c:	00800044 	movi	r2,1
    ac80:	dd000115 	stw	r20,4(sp)
    ac84:	d8c00015 	stw	r3,0(sp)
    ac88:	dd011c15 	stw	r20,1136(sp)
    ac8c:	d8811b15 	stw	r2,1132(sp)
    ac90:	a007883a 	mov	r3,r20
    ac94:	d811883a 	mov	r8,sp
    ac98:	42000204 	addi	r8,r8,8
    ac9c:	9480010c 	andi	r18,r18,4
    aca0:	90003426 	beq	r18,zero,ad74 <___vfiprintf_internal_r+0xd88>
    aca4:	d9412417 	ldw	r5,1168(sp)
    aca8:	2d65c83a 	sub	r18,r5,r21
    acac:	0480310e 	bge	zero,r18,ad74 <___vfiprintf_internal_r+0xd88>
    acb0:	04000404 	movi	r16,16
    acb4:	8481ad0e 	bge	r16,r18,b36c <___vfiprintf_internal_r+0x1380>
    acb8:	01400074 	movhi	r5,1
    acbc:	29493f04 	addi	r5,r5,9468
    acc0:	d9011b17 	ldw	r4,1132(sp)
    acc4:	d9412615 	stw	r5,1176(sp)
    acc8:	04c001c4 	movi	r19,7
    accc:	dd012117 	ldw	r20,1156(sp)
    acd0:	dd812017 	ldw	r22,1152(sp)
    acd4:	00000506 	br	acec <___vfiprintf_internal_r+0xd00>
    acd8:	21400084 	addi	r5,r4,2
    acdc:	42000204 	addi	r8,r8,8
    ace0:	1009883a 	mov	r4,r2
    ace4:	94bffc04 	addi	r18,r18,-16
    ace8:	84800d0e 	bge	r16,r18,ad20 <___vfiprintf_internal_r+0xd34>
    acec:	18c00404 	addi	r3,r3,16
    acf0:	20800044 	addi	r2,r4,1
    acf4:	47000015 	stw	fp,0(r8)
    acf8:	44000115 	stw	r16,4(r8)
    acfc:	d8c11c15 	stw	r3,1136(sp)
    ad00:	d8811b15 	stw	r2,1132(sp)
    ad04:	98bff40e 	bge	r19,r2,acd8 <__alt_data_end+0xfffb55a8>
    ad08:	1800291e 	bne	r3,zero,adb0 <___vfiprintf_internal_r+0xdc4>
    ad0c:	94bffc04 	addi	r18,r18,-16
    ad10:	0009883a 	mov	r4,zero
    ad14:	01400044 	movi	r5,1
    ad18:	d811883a 	mov	r8,sp
    ad1c:	84bff316 	blt	r16,r18,acec <__alt_data_end+0xfffb55bc>
    ad20:	d8812617 	ldw	r2,1176(sp)
    ad24:	1c87883a 	add	r3,r3,r18
    ad28:	44800115 	stw	r18,4(r8)
    ad2c:	40800015 	stw	r2,0(r8)
    ad30:	d8c11c15 	stw	r3,1136(sp)
    ad34:	d9411b15 	stw	r5,1132(sp)
    ad38:	008001c4 	movi	r2,7
    ad3c:	11400d0e 	bge	r2,r5,ad74 <___vfiprintf_internal_r+0xd88>
    ad40:	1800061e 	bne	r3,zero,ad5c <___vfiprintf_internal_r+0xd70>
    ad44:	d8c12417 	ldw	r3,1168(sp)
    ad48:	a8c12e16 	blt	r21,r3,b204 <___vfiprintf_internal_r+0x1218>
    ad4c:	d9012517 	ldw	r4,1172(sp)
    ad50:	2549883a 	add	r4,r4,r21
    ad54:	d9012515 	stw	r4,1172(sp)
    ad58:	00001206 	br	ada4 <___vfiprintf_internal_r+0xdb8>
    ad5c:	d9012117 	ldw	r4,1156(sp)
    ad60:	d9412017 	ldw	r5,1152(sp)
    ad64:	d9811a04 	addi	r6,sp,1128
    ad68:	0009ed80 	call	9ed8 <__sprint_r.part.0>
    ad6c:	103fbb1e 	bne	r2,zero,ac5c <__alt_data_end+0xfffb552c>
    ad70:	d8c11c17 	ldw	r3,1136(sp)
    ad74:	d8812417 	ldw	r2,1168(sp)
    ad78:	a880010e 	bge	r21,r2,ad80 <___vfiprintf_internal_r+0xd94>
    ad7c:	102b883a 	mov	r21,r2
    ad80:	d9012517 	ldw	r4,1172(sp)
    ad84:	2549883a 	add	r4,r4,r21
    ad88:	d9012515 	stw	r4,1172(sp)
    ad8c:	18000526 	beq	r3,zero,ada4 <___vfiprintf_internal_r+0xdb8>
    ad90:	d9012117 	ldw	r4,1156(sp)
    ad94:	d9412017 	ldw	r5,1152(sp)
    ad98:	d9811a04 	addi	r6,sp,1128
    ad9c:	0009ed80 	call	9ed8 <__sprint_r.part.0>
    ada0:	103fae1e 	bne	r2,zero,ac5c <__alt_data_end+0xfffb552c>
    ada4:	d8011b15 	stw	zero,1132(sp)
    ada8:	d811883a 	mov	r8,sp
    adac:	003cc706 	br	a0cc <__alt_data_end+0xfffb499c>
    adb0:	a009883a 	mov	r4,r20
    adb4:	b00b883a 	mov	r5,r22
    adb8:	d9811a04 	addi	r6,sp,1128
    adbc:	0009ed80 	call	9ed8 <__sprint_r.part.0>
    adc0:	103fa61e 	bne	r2,zero,ac5c <__alt_data_end+0xfffb552c>
    adc4:	d9011b17 	ldw	r4,1132(sp)
    adc8:	d8c11c17 	ldw	r3,1136(sp)
    adcc:	d811883a 	mov	r8,sp
    add0:	21400044 	addi	r5,r4,1
    add4:	003fc306 	br	ace4 <__alt_data_end+0xfffb55b4>
    add8:	d9012417 	ldw	r4,1168(sp)
    addc:	256dc83a 	sub	r22,r4,r21
    ade0:	05be1f0e 	bge	zero,r22,a660 <__alt_data_end+0xfffb4f30>
    ade4:	04c00404 	movi	r19,16
    ade8:	9d81720e 	bge	r19,r22,b3b4 <___vfiprintf_internal_r+0x13c8>
    adec:	00800074 	movhi	r2,1
    adf0:	10893b04 	addi	r2,r2,9452
    adf4:	d8812615 	stw	r2,1176(sp)
    adf8:	028001c4 	movi	r10,7
    adfc:	00000506 	br	ae14 <___vfiprintf_internal_r+0xe28>
    ae00:	29000084 	addi	r4,r5,2
    ae04:	42000204 	addi	r8,r8,8
    ae08:	100b883a 	mov	r5,r2
    ae0c:	b5bffc04 	addi	r22,r22,-16
    ae10:	9d800d0e 	bge	r19,r22,ae48 <___vfiprintf_internal_r+0xe5c>
    ae14:	18c00404 	addi	r3,r3,16
    ae18:	28800044 	addi	r2,r5,1
    ae1c:	44400015 	stw	r17,0(r8)
    ae20:	44c00115 	stw	r19,4(r8)
    ae24:	d8c11c15 	stw	r3,1136(sp)
    ae28:	d8811b15 	stw	r2,1132(sp)
    ae2c:	50bff40e 	bge	r10,r2,ae00 <__alt_data_end+0xfffb56d0>
    ae30:	1800111e 	bne	r3,zero,ae78 <___vfiprintf_internal_r+0xe8c>
    ae34:	b5bffc04 	addi	r22,r22,-16
    ae38:	000b883a 	mov	r5,zero
    ae3c:	01000044 	movi	r4,1
    ae40:	d811883a 	mov	r8,sp
    ae44:	9dbff316 	blt	r19,r22,ae14 <__alt_data_end+0xfffb56e4>
    ae48:	d9412617 	ldw	r5,1176(sp)
    ae4c:	1d87883a 	add	r3,r3,r22
    ae50:	45800115 	stw	r22,4(r8)
    ae54:	41400015 	stw	r5,0(r8)
    ae58:	d8c11c15 	stw	r3,1136(sp)
    ae5c:	d9011b15 	stw	r4,1132(sp)
    ae60:	008001c4 	movi	r2,7
    ae64:	11008516 	blt	r2,r4,b07c <___vfiprintf_internal_r+0x1090>
    ae68:	42000204 	addi	r8,r8,8
    ae6c:	20800044 	addi	r2,r4,1
    ae70:	200b883a 	mov	r5,r4
    ae74:	003dfa06 	br	a660 <__alt_data_end+0xfffb4f30>
    ae78:	d9012117 	ldw	r4,1156(sp)
    ae7c:	d9412017 	ldw	r5,1152(sp)
    ae80:	d9811a04 	addi	r6,sp,1128
    ae84:	da812a15 	stw	r10,1192(sp)
    ae88:	0009ed80 	call	9ed8 <__sprint_r.part.0>
    ae8c:	da812a17 	ldw	r10,1192(sp)
    ae90:	103f721e 	bne	r2,zero,ac5c <__alt_data_end+0xfffb552c>
    ae94:	d9411b17 	ldw	r5,1132(sp)
    ae98:	d8c11c17 	ldw	r3,1136(sp)
    ae9c:	d811883a 	mov	r8,sp
    aea0:	29000044 	addi	r4,r5,1
    aea4:	003fd906 	br	ae0c <__alt_data_end+0xfffb56dc>
    aea8:	1800681e 	bne	r3,zero,b04c <___vfiprintf_internal_r+0x1060>
    aeac:	50004d26 	beq	r10,zero,afe4 <___vfiprintf_internal_r+0xff8>
    aeb0:	d8811d04 	addi	r2,sp,1140
    aeb4:	00c00084 	movi	r3,2
    aeb8:	d8800015 	stw	r2,0(sp)
    aebc:	d8c00115 	stw	r3,4(sp)
    aec0:	2005883a 	mov	r2,r4
    aec4:	d811883a 	mov	r8,sp
    aec8:	003de006 	br	a64c <__alt_data_end+0xfffb4f1c>
    aecc:	1800551e 	bne	r3,zero,b024 <___vfiprintf_internal_r+0x1038>
    aed0:	000b883a 	mov	r5,zero
    aed4:	00800044 	movi	r2,1
    aed8:	d811883a 	mov	r8,sp
    aedc:	003dde06 	br	a658 <__alt_data_end+0xfffb4f28>
    aee0:	10803fcc 	andi	r2,r2,255
    aee4:	1000191e 	bne	r2,zero,af4c <___vfiprintf_internal_r+0xf60>
    aee8:	9080004c 	andi	r2,r18,1
    aeec:	10001726 	beq	r2,zero,af4c <___vfiprintf_internal_r+0xf60>
    aef0:	00800c04 	movi	r2,48
    aef4:	d8c109c4 	addi	r3,sp,1063
    aef8:	d88109c5 	stb	r2,1063(sp)
    aefc:	dd012817 	ldw	r20,1184(sp)
    af00:	d8c12215 	stw	r3,1160(sp)
    af04:	003d8a06 	br	a530 <__alt_data_end+0xfffb4e00>
    af08:	d9012717 	ldw	r4,1180(sp)
    af0c:	dd010a04 	addi	r20,sp,1064
    af10:	988003cc 	andi	r2,r19,15
    af14:	a806973a 	slli	r3,r21,28
    af18:	2085883a 	add	r2,r4,r2
    af1c:	9826d13a 	srli	r19,r19,4
    af20:	10800003 	ldbu	r2,0(r2)
    af24:	a82ad13a 	srli	r21,r21,4
    af28:	a53fffc4 	addi	r20,r20,-1
    af2c:	1ce6b03a 	or	r19,r3,r19
    af30:	a0800005 	stb	r2,0(r20)
    af34:	9d44b03a 	or	r2,r19,r21
    af38:	103ff51e 	bne	r2,zero,af10 <__alt_data_end+0xfffb57e0>
    af3c:	d9411e17 	ldw	r5,1144(sp)
    af40:	dd012215 	stw	r20,1160(sp)
    af44:	2d29c83a 	sub	r20,r5,r20
    af48:	003d7906 	br	a530 <__alt_data_end+0xfffb4e00>
    af4c:	d8c10a04 	addi	r3,sp,1064
    af50:	d8c12215 	stw	r3,1160(sp)
    af54:	003d7606 	br	a530 <__alt_data_end+0xfffb4e00>
    af58:	18009e1e 	bne	r3,zero,b1d4 <___vfiprintf_internal_r+0x11e8>
    af5c:	d8811d87 	ldb	r2,1142(sp)
    af60:	10005f26 	beq	r2,zero,b0e0 <___vfiprintf_internal_r+0x10f4>
    af64:	00c00044 	movi	r3,1
    af68:	d9011d84 	addi	r4,sp,1142
    af6c:	1805883a 	mov	r2,r3
    af70:	d9000015 	stw	r4,0(sp)
    af74:	d8c00115 	stw	r3,4(sp)
    af78:	d811883a 	mov	r8,sp
    af7c:	003efc06 	br	ab70 <__alt_data_end+0xfffb5440>
    af80:	d9412417 	ldw	r5,1168(sp)
    af84:	d811883a 	mov	r8,sp
    af88:	2d65c83a 	sub	r18,r5,r21
    af8c:	04bf4816 	blt	zero,r18,acb0 <__alt_data_end+0xfffb5580>
    af90:	003f6c06 	br	ad44 <__alt_data_end+0xfffb5614>
    af94:	b829883a 	mov	r20,r23
    af98:	003c6906 	br	a140 <__alt_data_end+0xfffb4a10>
    af9c:	d9012117 	ldw	r4,1156(sp)
    afa0:	d9412017 	ldw	r5,1152(sp)
    afa4:	d9811a04 	addi	r6,sp,1128
    afa8:	0009ed80 	call	9ed8 <__sprint_r.part.0>
    afac:	103f2b1e 	bne	r2,zero,ac5c <__alt_data_end+0xfffb552c>
    afb0:	d8c11c17 	ldw	r3,1136(sp)
    afb4:	d811883a 	mov	r8,sp
    afb8:	003f3806 	br	ac9c <__alt_data_end+0xfffb556c>
    afbc:	00800084 	movi	r2,2
    afc0:	9d46b03a 	or	r3,r19,r21
    afc4:	003df606 	br	a7a0 <__alt_data_end+0xfffb5070>
    afc8:	d9012117 	ldw	r4,1156(sp)
    afcc:	d9412017 	ldw	r5,1152(sp)
    afd0:	d9811a04 	addi	r6,sp,1128
    afd4:	0009ed80 	call	9ed8 <__sprint_r.part.0>
    afd8:	103f201e 	bne	r2,zero,ac5c <__alt_data_end+0xfffb552c>
    afdc:	d811883a 	mov	r8,sp
    afe0:	003cc606 	br	a2fc <__alt_data_end+0xfffb4bcc>
    afe4:	000b883a 	mov	r5,zero
    afe8:	2005883a 	mov	r2,r4
    afec:	d811883a 	mov	r8,sp
    aff0:	003d9906 	br	a658 <__alt_data_end+0xfffb4f28>
    aff4:	10803fcc 	andi	r2,r2,255
    aff8:	1080201c 	xori	r2,r2,128
    affc:	10bfe004 	addi	r2,r2,-128
    b000:	01000c04 	movi	r4,48
    b004:	1100b226 	beq	r2,r4,b2d0 <___vfiprintf_internal_r+0x12e4>
    b008:	d9412217 	ldw	r5,1160(sp)
    b00c:	d8811e17 	ldw	r2,1144(sp)
    b010:	193fffc5 	stb	r4,-1(r3)
    b014:	297fffc4 	addi	r5,r5,-1
    b018:	d9412215 	stw	r5,1160(sp)
    b01c:	1169c83a 	sub	r20,r2,r5
    b020:	003d4306 	br	a530 <__alt_data_end+0xfffb4e00>
    b024:	d9012117 	ldw	r4,1156(sp)
    b028:	d9412017 	ldw	r5,1152(sp)
    b02c:	d9811a04 	addi	r6,sp,1128
    b030:	0009ed80 	call	9ed8 <__sprint_r.part.0>
    b034:	103f091e 	bne	r2,zero,ac5c <__alt_data_end+0xfffb552c>
    b038:	d9411b17 	ldw	r5,1132(sp)
    b03c:	d8c11c17 	ldw	r3,1136(sp)
    b040:	d811883a 	mov	r8,sp
    b044:	28800044 	addi	r2,r5,1
    b048:	003d8306 	br	a658 <__alt_data_end+0xfffb4f28>
    b04c:	d9012117 	ldw	r4,1156(sp)
    b050:	d9412017 	ldw	r5,1152(sp)
    b054:	d9811a04 	addi	r6,sp,1128
    b058:	da812a15 	stw	r10,1192(sp)
    b05c:	0009ed80 	call	9ed8 <__sprint_r.part.0>
    b060:	da812a17 	ldw	r10,1192(sp)
    b064:	103efd1e 	bne	r2,zero,ac5c <__alt_data_end+0xfffb552c>
    b068:	d9411b17 	ldw	r5,1132(sp)
    b06c:	d8c11c17 	ldw	r3,1136(sp)
    b070:	d811883a 	mov	r8,sp
    b074:	28800044 	addi	r2,r5,1
    b078:	003d6a06 	br	a624 <__alt_data_end+0xfffb4ef4>
    b07c:	1800a01e 	bne	r3,zero,b300 <___vfiprintf_internal_r+0x1314>
    b080:	000b883a 	mov	r5,zero
    b084:	00800044 	movi	r2,1
    b088:	d811883a 	mov	r8,sp
    b08c:	003d7406 	br	a660 <__alt_data_end+0xfffb4f30>
    b090:	d9012117 	ldw	r4,1156(sp)
    b094:	d9412017 	ldw	r5,1152(sp)
    b098:	d9811a04 	addi	r6,sp,1128
    b09c:	0009ed80 	call	9ed8 <__sprint_r.part.0>
    b0a0:	103eee1e 	bne	r2,zero,ac5c <__alt_data_end+0xfffb552c>
    b0a4:	d8811b17 	ldw	r2,1132(sp)
    b0a8:	d8c11c17 	ldw	r3,1136(sp)
    b0ac:	d811883a 	mov	r8,sp
    b0b0:	10800044 	addi	r2,r2,1
    b0b4:	003d8f06 	br	a6f4 <__alt_data_end+0xfffb4fc4>
    b0b8:	04e7c83a 	sub	r19,zero,r19
    b0bc:	9804c03a 	cmpne	r2,r19,zero
    b0c0:	056bc83a 	sub	r21,zero,r21
    b0c4:	a8abc83a 	sub	r21,r21,r2
    b0c8:	05800b44 	movi	r22,45
    b0cc:	dd811d85 	stb	r22,1142(sp)
    b0d0:	8029883a 	mov	r20,r16
    b0d4:	00800044 	movi	r2,1
    b0d8:	9d46b03a 	or	r3,r19,r21
    b0dc:	003cfa06 	br	a4c8 <__alt_data_end+0xfffb4d98>
    b0e0:	000b883a 	mov	r5,zero
    b0e4:	00800044 	movi	r2,1
    b0e8:	d811883a 	mov	r8,sp
    b0ec:	503d5a26 	beq	r10,zero,a658 <__alt_data_end+0xfffb4f28>
    b0f0:	00c00084 	movi	r3,2
    b0f4:	d9011d04 	addi	r4,sp,1140
    b0f8:	d9000015 	stw	r4,0(sp)
    b0fc:	d8c00115 	stw	r3,4(sp)
    b100:	003d5206 	br	a64c <__alt_data_end+0xfffb4f1c>
    b104:	9080040c 	andi	r2,r18,16
    b108:	1000421e 	bne	r2,zero,b214 <___vfiprintf_internal_r+0x1228>
    b10c:	9480100c 	andi	r18,r18,64
    b110:	90009c26 	beq	r18,zero,b384 <___vfiprintf_internal_r+0x1398>
    b114:	d9412317 	ldw	r5,1164(sp)
    b118:	d8c12517 	ldw	r3,1172(sp)
    b11c:	28800017 	ldw	r2,0(r5)
    b120:	29400104 	addi	r5,r5,4
    b124:	d9412315 	stw	r5,1164(sp)
    b128:	10c0000d 	sth	r3,0(r2)
    b12c:	003be706 	br	a0cc <__alt_data_end+0xfffb499c>
    b130:	90c0100c 	andi	r3,r18,64
    b134:	18003e26 	beq	r3,zero,b230 <___vfiprintf_internal_r+0x1244>
    b138:	d8c12317 	ldw	r3,1164(sp)
    b13c:	14c0000b 	ldhu	r19,0(r2)
    b140:	002b883a 	mov	r21,zero
    b144:	18c00104 	addi	r3,r3,4
    b148:	d8c12315 	stw	r3,1164(sp)
    b14c:	003db706 	br	a82c <__alt_data_end+0xfffb50fc>
    b150:	9080100c 	andi	r2,r18,64
    b154:	10004c26 	beq	r2,zero,b288 <___vfiprintf_internal_r+0x129c>
    b158:	1cc0000f 	ldh	r19,0(r3)
    b15c:	d8812317 	ldw	r2,1164(sp)
    b160:	982bd7fa 	srai	r21,r19,31
    b164:	10800104 	addi	r2,r2,4
    b168:	d8812315 	stw	r2,1164(sp)
    b16c:	a805883a 	mov	r2,r21
    b170:	003cd006 	br	a4b4 <__alt_data_end+0xfffb4d84>
    b174:	00800084 	movi	r2,2
    b178:	003d8906 	br	a7a0 <__alt_data_end+0xfffb5070>
    b17c:	b9800007 	ldb	r6,0(r23)
    b180:	003bfb06 	br	a170 <__alt_data_end+0xfffb4a40>
    b184:	9080100c 	andi	r2,r18,64
    b188:	10003726 	beq	r2,zero,b268 <___vfiprintf_internal_r+0x127c>
    b18c:	d9412317 	ldw	r5,1164(sp)
    b190:	002b883a 	mov	r21,zero
    b194:	0005883a 	mov	r2,zero
    b198:	2cc0000b 	ldhu	r19,0(r5)
    b19c:	29400104 	addi	r5,r5,4
    b1a0:	d9412315 	stw	r5,1164(sp)
    b1a4:	9807883a 	mov	r3,r19
    b1a8:	003d7d06 	br	a7a0 <__alt_data_end+0xfffb5070>
    b1ac:	9080100c 	andi	r2,r18,64
    b1b0:	10002526 	beq	r2,zero,b248 <___vfiprintf_internal_r+0x125c>
    b1b4:	d8812317 	ldw	r2,1164(sp)
    b1b8:	002b883a 	mov	r21,zero
    b1bc:	14c0000b 	ldhu	r19,0(r2)
    b1c0:	10800104 	addi	r2,r2,4
    b1c4:	d8812315 	stw	r2,1164(sp)
    b1c8:	9807883a 	mov	r3,r19
    b1cc:	00800044 	movi	r2,1
    b1d0:	003d7306 	br	a7a0 <__alt_data_end+0xfffb5070>
    b1d4:	d9012117 	ldw	r4,1156(sp)
    b1d8:	d9412017 	ldw	r5,1152(sp)
    b1dc:	d9811a04 	addi	r6,sp,1128
    b1e0:	da812a15 	stw	r10,1192(sp)
    b1e4:	0009ed80 	call	9ed8 <__sprint_r.part.0>
    b1e8:	da812a17 	ldw	r10,1192(sp)
    b1ec:	103e9b1e 	bne	r2,zero,ac5c <__alt_data_end+0xfffb552c>
    b1f0:	d9411b17 	ldw	r5,1132(sp)
    b1f4:	d8c11c17 	ldw	r3,1136(sp)
    b1f8:	d811883a 	mov	r8,sp
    b1fc:	28800044 	addi	r2,r5,1
    b200:	003e5006 	br	ab44 <__alt_data_end+0xfffb5414>
    b204:	182b883a 	mov	r21,r3
    b208:	003ed006 	br	ad4c <__alt_data_end+0xfffb561c>
    b20c:	8029883a 	mov	r20,r16
    b210:	003dc606 	br	a92c <__alt_data_end+0xfffb51fc>
    b214:	d8c12317 	ldw	r3,1164(sp)
    b218:	d9012517 	ldw	r4,1172(sp)
    b21c:	18800017 	ldw	r2,0(r3)
    b220:	18c00104 	addi	r3,r3,4
    b224:	d8c12315 	stw	r3,1164(sp)
    b228:	11000015 	stw	r4,0(r2)
    b22c:	003ba706 	br	a0cc <__alt_data_end+0xfffb499c>
    b230:	d9012317 	ldw	r4,1164(sp)
    b234:	14c00017 	ldw	r19,0(r2)
    b238:	002b883a 	mov	r21,zero
    b23c:	21000104 	addi	r4,r4,4
    b240:	d9012315 	stw	r4,1164(sp)
    b244:	003d7906 	br	a82c <__alt_data_end+0xfffb50fc>
    b248:	d8c12317 	ldw	r3,1164(sp)
    b24c:	002b883a 	mov	r21,zero
    b250:	00800044 	movi	r2,1
    b254:	1cc00017 	ldw	r19,0(r3)
    b258:	18c00104 	addi	r3,r3,4
    b25c:	d8c12315 	stw	r3,1164(sp)
    b260:	9807883a 	mov	r3,r19
    b264:	003d4e06 	br	a7a0 <__alt_data_end+0xfffb5070>
    b268:	d8812317 	ldw	r2,1164(sp)
    b26c:	002b883a 	mov	r21,zero
    b270:	14c00017 	ldw	r19,0(r2)
    b274:	10800104 	addi	r2,r2,4
    b278:	d8812315 	stw	r2,1164(sp)
    b27c:	9807883a 	mov	r3,r19
    b280:	0005883a 	mov	r2,zero
    b284:	003d4606 	br	a7a0 <__alt_data_end+0xfffb5070>
    b288:	1cc00017 	ldw	r19,0(r3)
    b28c:	d8c12317 	ldw	r3,1164(sp)
    b290:	982bd7fa 	srai	r21,r19,31
    b294:	18c00104 	addi	r3,r3,4
    b298:	d8c12315 	stw	r3,1164(sp)
    b29c:	a805883a 	mov	r2,r21
    b2a0:	003c8406 	br	a4b4 <__alt_data_end+0xfffb4d84>
    b2a4:	01000074 	movhi	r4,1
    b2a8:	21093b04 	addi	r4,r4,9452
    b2ac:	d9012615 	stw	r4,1176(sp)
    b2b0:	003d0606 	br	a6cc <__alt_data_end+0xfffb4f9c>
    b2b4:	b9800043 	ldbu	r6,1(r23)
    b2b8:	94800814 	ori	r18,r18,32
    b2bc:	bdc00044 	addi	r23,r23,1
    b2c0:	31803fcc 	andi	r6,r6,255
    b2c4:	3180201c 	xori	r6,r6,128
    b2c8:	31bfe004 	addi	r6,r6,-128
    b2cc:	003ba806 	br	a170 <__alt_data_end+0xfffb4a40>
    b2d0:	d8811e17 	ldw	r2,1144(sp)
    b2d4:	d8c12217 	ldw	r3,1160(sp)
    b2d8:	10e9c83a 	sub	r20,r2,r3
    b2dc:	003c9406 	br	a530 <__alt_data_end+0xfffb4e00>
    b2e0:	da012a15 	stw	r8,1192(sp)
    b2e4:	00032f80 	call	32f8 <strlen>
    b2e8:	1029883a 	mov	r20,r2
    b2ec:	dd811d83 	ldbu	r22,1142(sp)
    b2f0:	dcc12315 	stw	r19,1164(sp)
    b2f4:	0021883a 	mov	r16,zero
    b2f8:	da012a17 	ldw	r8,1192(sp)
    b2fc:	003c8c06 	br	a530 <__alt_data_end+0xfffb4e00>
    b300:	d9012117 	ldw	r4,1156(sp)
    b304:	d9412017 	ldw	r5,1152(sp)
    b308:	d9811a04 	addi	r6,sp,1128
    b30c:	0009ed80 	call	9ed8 <__sprint_r.part.0>
    b310:	103e521e 	bne	r2,zero,ac5c <__alt_data_end+0xfffb552c>
    b314:	d9411b17 	ldw	r5,1132(sp)
    b318:	d8c11c17 	ldw	r3,1136(sp)
    b31c:	d811883a 	mov	r8,sp
    b320:	28800044 	addi	r2,r5,1
    b324:	003cce06 	br	a660 <__alt_data_end+0xfffb4f30>
    b328:	01400074 	movhi	r5,1
    b32c:	29493f04 	addi	r5,r5,9468
    b330:	d9412615 	stw	r5,1176(sp)
    b334:	d9411b17 	ldw	r5,1132(sp)
    b338:	29400044 	addi	r5,r5,1
    b33c:	003cad06 	br	a5f4 <__alt_data_end+0xfffb4ec4>
    b340:	00800184 	movi	r2,6
    b344:	1400012e 	bgeu	r2,r16,b34c <___vfiprintf_internal_r+0x1360>
    b348:	1021883a 	mov	r16,r2
    b34c:	8029883a 	mov	r20,r16
    b350:	802b883a 	mov	r21,r16
    b354:	80001c16 	blt	r16,zero,b3c8 <___vfiprintf_internal_r+0x13dc>
    b358:	00c00074 	movhi	r3,1
    b35c:	18c8df04 	addi	r3,r3,9084
    b360:	dcc12315 	stw	r19,1164(sp)
    b364:	d8c12215 	stw	r3,1160(sp)
    b368:	003cff06 	br	a768 <__alt_data_end+0xfffb5038>
    b36c:	d9411b17 	ldw	r5,1132(sp)
    b370:	00800074 	movhi	r2,1
    b374:	10893f04 	addi	r2,r2,9468
    b378:	d8812615 	stw	r2,1176(sp)
    b37c:	29400044 	addi	r5,r5,1
    b380:	003e6706 	br	ad20 <__alt_data_end+0xfffb55f0>
    b384:	d9012317 	ldw	r4,1164(sp)
    b388:	d9412517 	ldw	r5,1172(sp)
    b38c:	20800017 	ldw	r2,0(r4)
    b390:	21000104 	addi	r4,r4,4
    b394:	d9012315 	stw	r4,1164(sp)
    b398:	11400015 	stw	r5,0(r2)
    b39c:	003b4b06 	br	a0cc <__alt_data_end+0xfffb499c>
    b3a0:	8029883a 	mov	r20,r16
    b3a4:	dd811d83 	ldbu	r22,1142(sp)
    b3a8:	dcc12315 	stw	r19,1164(sp)
    b3ac:	0021883a 	mov	r16,zero
    b3b0:	003c5f06 	br	a530 <__alt_data_end+0xfffb4e00>
    b3b4:	01000074 	movhi	r4,1
    b3b8:	21093b04 	addi	r4,r4,9452
    b3bc:	d9012615 	stw	r4,1176(sp)
    b3c0:	1009883a 	mov	r4,r2
    b3c4:	003ea006 	br	ae48 <__alt_data_end+0xfffb5718>
    b3c8:	002b883a 	mov	r21,zero
    b3cc:	003fe206 	br	b358 <__alt_data_end+0xfffb5c28>
    b3d0:	d9412317 	ldw	r5,1164(sp)
    b3d4:	b807883a 	mov	r3,r23
    b3d8:	102f883a 	mov	r23,r2
    b3dc:	2c000017 	ldw	r16,0(r5)
    b3e0:	29000104 	addi	r4,r5,4
    b3e4:	d9012315 	stw	r4,1164(sp)
    b3e8:	80000416 	blt	r16,zero,b3fc <___vfiprintf_internal_r+0x1410>
    b3ec:	19800047 	ldb	r6,1(r3)
    b3f0:	003b5f06 	br	a170 <__alt_data_end+0xfffb4a40>
    b3f4:	043fffc4 	movi	r16,-1
    b3f8:	003bef06 	br	a3b8 <__alt_data_end+0xfffb4c88>
    b3fc:	043fffc4 	movi	r16,-1
    b400:	19800047 	ldb	r6,1(r3)
    b404:	003b5a06 	br	a170 <__alt_data_end+0xfffb4a40>
    b408:	282b883a 	mov	r21,r5
    b40c:	003cc706 	br	a72c <__alt_data_end+0xfffb4ffc>

0000b410 <__vfiprintf_internal>:
    b410:	2007883a 	mov	r3,r4
    b414:	01000074 	movhi	r4,1
    b418:	21103e04 	addi	r4,r4,16632
    b41c:	21000017 	ldw	r4,0(r4)
    b420:	2805883a 	mov	r2,r5
    b424:	300f883a 	mov	r7,r6
    b428:	180b883a 	mov	r5,r3
    b42c:	100d883a 	mov	r6,r2
    b430:	0009fec1 	jmpi	9fec <___vfiprintf_internal_r>

0000b434 <_write_r>:
    b434:	defffd04 	addi	sp,sp,-12
    b438:	dc000015 	stw	r16,0(sp)
    b43c:	04000074 	movhi	r16,1
    b440:	dc400115 	stw	r17,4(sp)
    b444:	84171104 	addi	r16,r16,23620
    b448:	2023883a 	mov	r17,r4
    b44c:	2809883a 	mov	r4,r5
    b450:	300b883a 	mov	r5,r6
    b454:	380d883a 	mov	r6,r7
    b458:	dfc00215 	stw	ra,8(sp)
    b45c:	80000015 	stw	zero,0(r16)
    b460:	000fc500 	call	fc50 <write>
    b464:	00ffffc4 	movi	r3,-1
    b468:	10c00526 	beq	r2,r3,b480 <_write_r+0x4c>
    b46c:	dfc00217 	ldw	ra,8(sp)
    b470:	dc400117 	ldw	r17,4(sp)
    b474:	dc000017 	ldw	r16,0(sp)
    b478:	dec00304 	addi	sp,sp,12
    b47c:	f800283a 	ret
    b480:	80c00017 	ldw	r3,0(r16)
    b484:	183ff926 	beq	r3,zero,b46c <__alt_data_end+0xfffb5d3c>
    b488:	88c00015 	stw	r3,0(r17)
    b48c:	003ff706 	br	b46c <__alt_data_end+0xfffb5d3c>

0000b490 <_close_r>:
    b490:	defffd04 	addi	sp,sp,-12
    b494:	dc000015 	stw	r16,0(sp)
    b498:	04000074 	movhi	r16,1
    b49c:	dc400115 	stw	r17,4(sp)
    b4a0:	84171104 	addi	r16,r16,23620
    b4a4:	2023883a 	mov	r17,r4
    b4a8:	2809883a 	mov	r4,r5
    b4ac:	dfc00215 	stw	ra,8(sp)
    b4b0:	80000015 	stw	zero,0(r16)
    b4b4:	000f37c0 	call	f37c <close>
    b4b8:	00ffffc4 	movi	r3,-1
    b4bc:	10c00526 	beq	r2,r3,b4d4 <_close_r+0x44>
    b4c0:	dfc00217 	ldw	ra,8(sp)
    b4c4:	dc400117 	ldw	r17,4(sp)
    b4c8:	dc000017 	ldw	r16,0(sp)
    b4cc:	dec00304 	addi	sp,sp,12
    b4d0:	f800283a 	ret
    b4d4:	80c00017 	ldw	r3,0(r16)
    b4d8:	183ff926 	beq	r3,zero,b4c0 <__alt_data_end+0xfffb5d90>
    b4dc:	88c00015 	stw	r3,0(r17)
    b4e0:	003ff706 	br	b4c0 <__alt_data_end+0xfffb5d90>

0000b4e4 <_calloc_r>:
    b4e4:	defffe04 	addi	sp,sp,-8
    b4e8:	dc000015 	stw	r16,0(sp)
    b4ec:	2021883a 	mov	r16,r4
    b4f0:	2809883a 	mov	r4,r5
    b4f4:	300b883a 	mov	r5,r6
    b4f8:	dfc00115 	stw	ra,4(sp)
    b4fc:	000cb080 	call	cb08 <__mulsi3>
    b500:	8009883a 	mov	r4,r16
    b504:	100b883a 	mov	r5,r2
    b508:	00029c80 	call	29c8 <_malloc_r>
    b50c:	1021883a 	mov	r16,r2
    b510:	10002826 	beq	r2,zero,b5b4 <_calloc_r+0xd0>
    b514:	11bfff17 	ldw	r6,-4(r2)
    b518:	00bfff04 	movi	r2,-4
    b51c:	00c00904 	movi	r3,36
    b520:	308c703a 	and	r6,r6,r2
    b524:	308d883a 	add	r6,r6,r2
    b528:	19801436 	bltu	r3,r6,b57c <_calloc_r+0x98>
    b52c:	008004c4 	movi	r2,19
    b530:	11800936 	bltu	r2,r6,b558 <_calloc_r+0x74>
    b534:	8005883a 	mov	r2,r16
    b538:	10000015 	stw	zero,0(r2)
    b53c:	10000115 	stw	zero,4(r2)
    b540:	10000215 	stw	zero,8(r2)
    b544:	8005883a 	mov	r2,r16
    b548:	dfc00117 	ldw	ra,4(sp)
    b54c:	dc000017 	ldw	r16,0(sp)
    b550:	dec00204 	addi	sp,sp,8
    b554:	f800283a 	ret
    b558:	80000015 	stw	zero,0(r16)
    b55c:	80000115 	stw	zero,4(r16)
    b560:	008006c4 	movi	r2,27
    b564:	11800d2e 	bgeu	r2,r6,b59c <_calloc_r+0xb8>
    b568:	80000215 	stw	zero,8(r16)
    b56c:	80000315 	stw	zero,12(r16)
    b570:	30c00c26 	beq	r6,r3,b5a4 <_calloc_r+0xc0>
    b574:	80800404 	addi	r2,r16,16
    b578:	003fef06 	br	b538 <__alt_data_end+0xfffb5e08>
    b57c:	8009883a 	mov	r4,r16
    b580:	000b883a 	mov	r5,zero
    b584:	00085780 	call	8578 <memset>
    b588:	8005883a 	mov	r2,r16
    b58c:	dfc00117 	ldw	ra,4(sp)
    b590:	dc000017 	ldw	r16,0(sp)
    b594:	dec00204 	addi	sp,sp,8
    b598:	f800283a 	ret
    b59c:	80800204 	addi	r2,r16,8
    b5a0:	003fe506 	br	b538 <__alt_data_end+0xfffb5e08>
    b5a4:	80000415 	stw	zero,16(r16)
    b5a8:	80800604 	addi	r2,r16,24
    b5ac:	80000515 	stw	zero,20(r16)
    b5b0:	003fe106 	br	b538 <__alt_data_end+0xfffb5e08>
    b5b4:	0005883a 	mov	r2,zero
    b5b8:	003fe306 	br	b548 <__alt_data_end+0xfffb5e18>

0000b5bc <_fclose_r>:
    b5bc:	28003226 	beq	r5,zero,b688 <_fclose_r+0xcc>
    b5c0:	defffc04 	addi	sp,sp,-16
    b5c4:	dc400115 	stw	r17,4(sp)
    b5c8:	2023883a 	mov	r17,r4
    b5cc:	dc000015 	stw	r16,0(sp)
    b5d0:	dfc00315 	stw	ra,12(sp)
    b5d4:	dc800215 	stw	r18,8(sp)
    b5d8:	2821883a 	mov	r16,r5
    b5dc:	00074fc0 	call	74fc <__sfp_lock_acquire>
    b5e0:	88000226 	beq	r17,zero,b5ec <_fclose_r+0x30>
    b5e4:	88800e17 	ldw	r2,56(r17)
    b5e8:	10002926 	beq	r2,zero,b690 <_fclose_r+0xd4>
    b5ec:	8080030f 	ldh	r2,12(r16)
    b5f0:	10002226 	beq	r2,zero,b67c <_fclose_r+0xc0>
    b5f4:	8809883a 	mov	r4,r17
    b5f8:	800b883a 	mov	r5,r16
    b5fc:	0006f300 	call	6f30 <_fflush_r>
    b600:	1025883a 	mov	r18,r2
    b604:	80800b17 	ldw	r2,44(r16)
    b608:	10000426 	beq	r2,zero,b61c <_fclose_r+0x60>
    b60c:	81400717 	ldw	r5,28(r16)
    b610:	8809883a 	mov	r4,r17
    b614:	103ee83a 	callr	r2
    b618:	10002616 	blt	r2,zero,b6b4 <_fclose_r+0xf8>
    b61c:	8080030b 	ldhu	r2,12(r16)
    b620:	1080200c 	andi	r2,r2,128
    b624:	10001f1e 	bne	r2,zero,b6a4 <_fclose_r+0xe8>
    b628:	81400c17 	ldw	r5,48(r16)
    b62c:	28000526 	beq	r5,zero,b644 <_fclose_r+0x88>
    b630:	80801004 	addi	r2,r16,64
    b634:	28800226 	beq	r5,r2,b640 <_fclose_r+0x84>
    b638:	8809883a 	mov	r4,r17
    b63c:	00076600 	call	7660 <_free_r>
    b640:	80000c15 	stw	zero,48(r16)
    b644:	81401117 	ldw	r5,68(r16)
    b648:	28000326 	beq	r5,zero,b658 <_fclose_r+0x9c>
    b64c:	8809883a 	mov	r4,r17
    b650:	00076600 	call	7660 <_free_r>
    b654:	80001115 	stw	zero,68(r16)
    b658:	8000030d 	sth	zero,12(r16)
    b65c:	00075000 	call	7500 <__sfp_lock_release>
    b660:	9005883a 	mov	r2,r18
    b664:	dfc00317 	ldw	ra,12(sp)
    b668:	dc800217 	ldw	r18,8(sp)
    b66c:	dc400117 	ldw	r17,4(sp)
    b670:	dc000017 	ldw	r16,0(sp)
    b674:	dec00404 	addi	sp,sp,16
    b678:	f800283a 	ret
    b67c:	00075000 	call	7500 <__sfp_lock_release>
    b680:	0005883a 	mov	r2,zero
    b684:	003ff706 	br	b664 <__alt_data_end+0xfffb5f34>
    b688:	0005883a 	mov	r2,zero
    b68c:	f800283a 	ret
    b690:	8809883a 	mov	r4,r17
    b694:	00074ec0 	call	74ec <__sinit>
    b698:	8080030f 	ldh	r2,12(r16)
    b69c:	103fd51e 	bne	r2,zero,b5f4 <__alt_data_end+0xfffb5ec4>
    b6a0:	003ff606 	br	b67c <__alt_data_end+0xfffb5f4c>
    b6a4:	81400417 	ldw	r5,16(r16)
    b6a8:	8809883a 	mov	r4,r17
    b6ac:	00076600 	call	7660 <_free_r>
    b6b0:	003fdd06 	br	b628 <__alt_data_end+0xfffb5ef8>
    b6b4:	04bfffc4 	movi	r18,-1
    b6b8:	003fd806 	br	b61c <__alt_data_end+0xfffb5eec>

0000b6bc <fclose>:
    b6bc:	00800074 	movhi	r2,1
    b6c0:	10903e04 	addi	r2,r2,16632
    b6c4:	200b883a 	mov	r5,r4
    b6c8:	11000017 	ldw	r4,0(r2)
    b6cc:	000b5bc1 	jmpi	b5bc <_fclose_r>

0000b6d0 <_fputwc_r>:
    b6d0:	3080030b 	ldhu	r2,12(r6)
    b6d4:	defff804 	addi	sp,sp,-32
    b6d8:	dcc00415 	stw	r19,16(sp)
    b6dc:	dc800315 	stw	r18,12(sp)
    b6e0:	dc000115 	stw	r16,4(sp)
    b6e4:	dfc00715 	stw	ra,28(sp)
    b6e8:	dd400615 	stw	r21,24(sp)
    b6ec:	dd000515 	stw	r20,20(sp)
    b6f0:	dc400215 	stw	r17,8(sp)
    b6f4:	10c8000c 	andi	r3,r2,8192
    b6f8:	3021883a 	mov	r16,r6
    b6fc:	2027883a 	mov	r19,r4
    b700:	2825883a 	mov	r18,r5
    b704:	1800051e 	bne	r3,zero,b71c <_fputwc_r+0x4c>
    b708:	30c01917 	ldw	r3,100(r6)
    b70c:	10880014 	ori	r2,r2,8192
    b710:	3080030d 	sth	r2,12(r6)
    b714:	18880014 	ori	r2,r3,8192
    b718:	30801915 	stw	r2,100(r6)
    b71c:	0007fec0 	call	7fec <__locale_mb_cur_max>
    b720:	00c00044 	movi	r3,1
    b724:	10c03e26 	beq	r2,r3,b820 <_fputwc_r+0x150>
    b728:	9809883a 	mov	r4,r19
    b72c:	d80b883a 	mov	r5,sp
    b730:	900d883a 	mov	r6,r18
    b734:	81c01704 	addi	r7,r16,92
    b738:	000bb800 	call	bb80 <_wcrtomb_r>
    b73c:	1029883a 	mov	r20,r2
    b740:	00bfffc4 	movi	r2,-1
    b744:	a0802026 	beq	r20,r2,b7c8 <_fputwc_r+0xf8>
    b748:	d9400003 	ldbu	r5,0(sp)
    b74c:	a0001c26 	beq	r20,zero,b7c0 <_fputwc_r+0xf0>
    b750:	0023883a 	mov	r17,zero
    b754:	05400284 	movi	r21,10
    b758:	00000906 	br	b780 <_fputwc_r+0xb0>
    b75c:	80800017 	ldw	r2,0(r16)
    b760:	11400005 	stb	r5,0(r2)
    b764:	80c00017 	ldw	r3,0(r16)
    b768:	18c00044 	addi	r3,r3,1
    b76c:	80c00015 	stw	r3,0(r16)
    b770:	8c400044 	addi	r17,r17,1
    b774:	dc45883a 	add	r2,sp,r17
    b778:	8d00112e 	bgeu	r17,r20,b7c0 <_fputwc_r+0xf0>
    b77c:	11400003 	ldbu	r5,0(r2)
    b780:	80c00217 	ldw	r3,8(r16)
    b784:	18ffffc4 	addi	r3,r3,-1
    b788:	80c00215 	stw	r3,8(r16)
    b78c:	183ff30e 	bge	r3,zero,b75c <__alt_data_end+0xfffb602c>
    b790:	80800617 	ldw	r2,24(r16)
    b794:	18801916 	blt	r3,r2,b7fc <_fputwc_r+0x12c>
    b798:	80800017 	ldw	r2,0(r16)
    b79c:	11400005 	stb	r5,0(r2)
    b7a0:	80800017 	ldw	r2,0(r16)
    b7a4:	10c00003 	ldbu	r3,0(r2)
    b7a8:	10800044 	addi	r2,r2,1
    b7ac:	1d402326 	beq	r3,r21,b83c <_fputwc_r+0x16c>
    b7b0:	80800015 	stw	r2,0(r16)
    b7b4:	8c400044 	addi	r17,r17,1
    b7b8:	dc45883a 	add	r2,sp,r17
    b7bc:	8d3fef36 	bltu	r17,r20,b77c <__alt_data_end+0xfffb604c>
    b7c0:	9005883a 	mov	r2,r18
    b7c4:	00000406 	br	b7d8 <_fputwc_r+0x108>
    b7c8:	80c0030b 	ldhu	r3,12(r16)
    b7cc:	a005883a 	mov	r2,r20
    b7d0:	18c01014 	ori	r3,r3,64
    b7d4:	80c0030d 	sth	r3,12(r16)
    b7d8:	dfc00717 	ldw	ra,28(sp)
    b7dc:	dd400617 	ldw	r21,24(sp)
    b7e0:	dd000517 	ldw	r20,20(sp)
    b7e4:	dcc00417 	ldw	r19,16(sp)
    b7e8:	dc800317 	ldw	r18,12(sp)
    b7ec:	dc400217 	ldw	r17,8(sp)
    b7f0:	dc000117 	ldw	r16,4(sp)
    b7f4:	dec00804 	addi	sp,sp,32
    b7f8:	f800283a 	ret
    b7fc:	9809883a 	mov	r4,r19
    b800:	29403fcc 	andi	r5,r5,255
    b804:	800d883a 	mov	r6,r16
    b808:	000ba100 	call	ba10 <__swbuf_r>
    b80c:	10bfffe0 	cmpeqi	r2,r2,-1
    b810:	10803fcc 	andi	r2,r2,255
    b814:	103fd626 	beq	r2,zero,b770 <__alt_data_end+0xfffb6040>
    b818:	00bfffc4 	movi	r2,-1
    b81c:	003fee06 	br	b7d8 <__alt_data_end+0xfffb60a8>
    b820:	90ffffc4 	addi	r3,r18,-1
    b824:	01003f84 	movi	r4,254
    b828:	20ffbf36 	bltu	r4,r3,b728 <__alt_data_end+0xfffb5ff8>
    b82c:	900b883a 	mov	r5,r18
    b830:	dc800005 	stb	r18,0(sp)
    b834:	1029883a 	mov	r20,r2
    b838:	003fc506 	br	b750 <__alt_data_end+0xfffb6020>
    b83c:	9809883a 	mov	r4,r19
    b840:	a80b883a 	mov	r5,r21
    b844:	800d883a 	mov	r6,r16
    b848:	000ba100 	call	ba10 <__swbuf_r>
    b84c:	10bfffe0 	cmpeqi	r2,r2,-1
    b850:	003fef06 	br	b810 <__alt_data_end+0xfffb60e0>

0000b854 <fputwc>:
    b854:	defffc04 	addi	sp,sp,-16
    b858:	dc000115 	stw	r16,4(sp)
    b85c:	04000074 	movhi	r16,1
    b860:	84103e04 	addi	r16,r16,16632
    b864:	dc400215 	stw	r17,8(sp)
    b868:	2023883a 	mov	r17,r4
    b86c:	81000017 	ldw	r4,0(r16)
    b870:	dfc00315 	stw	ra,12(sp)
    b874:	280d883a 	mov	r6,r5
    b878:	20000626 	beq	r4,zero,b894 <fputwc+0x40>
    b87c:	20800e17 	ldw	r2,56(r4)
    b880:	1000041e 	bne	r2,zero,b894 <fputwc+0x40>
    b884:	d9400015 	stw	r5,0(sp)
    b888:	00074ec0 	call	74ec <__sinit>
    b88c:	81000017 	ldw	r4,0(r16)
    b890:	d9800017 	ldw	r6,0(sp)
    b894:	880b883a 	mov	r5,r17
    b898:	dfc00317 	ldw	ra,12(sp)
    b89c:	dc400217 	ldw	r17,8(sp)
    b8a0:	dc000117 	ldw	r16,4(sp)
    b8a4:	dec00404 	addi	sp,sp,16
    b8a8:	000b6d01 	jmpi	b6d0 <_fputwc_r>

0000b8ac <_fstat_r>:
    b8ac:	defffd04 	addi	sp,sp,-12
    b8b0:	dc000015 	stw	r16,0(sp)
    b8b4:	04000074 	movhi	r16,1
    b8b8:	dc400115 	stw	r17,4(sp)
    b8bc:	84171104 	addi	r16,r16,23620
    b8c0:	2023883a 	mov	r17,r4
    b8c4:	2809883a 	mov	r4,r5
    b8c8:	300b883a 	mov	r5,r6
    b8cc:	dfc00215 	stw	ra,8(sp)
    b8d0:	80000015 	stw	zero,0(r16)
    b8d4:	000f4d00 	call	f4d0 <fstat>
    b8d8:	00ffffc4 	movi	r3,-1
    b8dc:	10c00526 	beq	r2,r3,b8f4 <_fstat_r+0x48>
    b8e0:	dfc00217 	ldw	ra,8(sp)
    b8e4:	dc400117 	ldw	r17,4(sp)
    b8e8:	dc000017 	ldw	r16,0(sp)
    b8ec:	dec00304 	addi	sp,sp,12
    b8f0:	f800283a 	ret
    b8f4:	80c00017 	ldw	r3,0(r16)
    b8f8:	183ff926 	beq	r3,zero,b8e0 <__alt_data_end+0xfffb61b0>
    b8fc:	88c00015 	stw	r3,0(r17)
    b900:	003ff706 	br	b8e0 <__alt_data_end+0xfffb61b0>

0000b904 <_isatty_r>:
    b904:	defffd04 	addi	sp,sp,-12
    b908:	dc000015 	stw	r16,0(sp)
    b90c:	04000074 	movhi	r16,1
    b910:	dc400115 	stw	r17,4(sp)
    b914:	84171104 	addi	r16,r16,23620
    b918:	2023883a 	mov	r17,r4
    b91c:	2809883a 	mov	r4,r5
    b920:	dfc00215 	stw	ra,8(sp)
    b924:	80000015 	stw	zero,0(r16)
    b928:	000f5d80 	call	f5d8 <isatty>
    b92c:	00ffffc4 	movi	r3,-1
    b930:	10c00526 	beq	r2,r3,b948 <_isatty_r+0x44>
    b934:	dfc00217 	ldw	ra,8(sp)
    b938:	dc400117 	ldw	r17,4(sp)
    b93c:	dc000017 	ldw	r16,0(sp)
    b940:	dec00304 	addi	sp,sp,12
    b944:	f800283a 	ret
    b948:	80c00017 	ldw	r3,0(r16)
    b94c:	183ff926 	beq	r3,zero,b934 <__alt_data_end+0xfffb6204>
    b950:	88c00015 	stw	r3,0(r17)
    b954:	003ff706 	br	b934 <__alt_data_end+0xfffb6204>

0000b958 <_lseek_r>:
    b958:	defffd04 	addi	sp,sp,-12
    b95c:	dc000015 	stw	r16,0(sp)
    b960:	04000074 	movhi	r16,1
    b964:	dc400115 	stw	r17,4(sp)
    b968:	84171104 	addi	r16,r16,23620
    b96c:	2023883a 	mov	r17,r4
    b970:	2809883a 	mov	r4,r5
    b974:	300b883a 	mov	r5,r6
    b978:	380d883a 	mov	r6,r7
    b97c:	dfc00215 	stw	ra,8(sp)
    b980:	80000015 	stw	zero,0(r16)
    b984:	000f7b80 	call	f7b8 <lseek>
    b988:	00ffffc4 	movi	r3,-1
    b98c:	10c00526 	beq	r2,r3,b9a4 <_lseek_r+0x4c>
    b990:	dfc00217 	ldw	ra,8(sp)
    b994:	dc400117 	ldw	r17,4(sp)
    b998:	dc000017 	ldw	r16,0(sp)
    b99c:	dec00304 	addi	sp,sp,12
    b9a0:	f800283a 	ret
    b9a4:	80c00017 	ldw	r3,0(r16)
    b9a8:	183ff926 	beq	r3,zero,b990 <__alt_data_end+0xfffb6260>
    b9ac:	88c00015 	stw	r3,0(r17)
    b9b0:	003ff706 	br	b990 <__alt_data_end+0xfffb6260>

0000b9b4 <_read_r>:
    b9b4:	defffd04 	addi	sp,sp,-12
    b9b8:	dc000015 	stw	r16,0(sp)
    b9bc:	04000074 	movhi	r16,1
    b9c0:	dc400115 	stw	r17,4(sp)
    b9c4:	84171104 	addi	r16,r16,23620
    b9c8:	2023883a 	mov	r17,r4
    b9cc:	2809883a 	mov	r4,r5
    b9d0:	300b883a 	mov	r5,r6
    b9d4:	380d883a 	mov	r6,r7
    b9d8:	dfc00215 	stw	ra,8(sp)
    b9dc:	80000015 	stw	zero,0(r16)
    b9e0:	000f99c0 	call	f99c <read>
    b9e4:	00ffffc4 	movi	r3,-1
    b9e8:	10c00526 	beq	r2,r3,ba00 <_read_r+0x4c>
    b9ec:	dfc00217 	ldw	ra,8(sp)
    b9f0:	dc400117 	ldw	r17,4(sp)
    b9f4:	dc000017 	ldw	r16,0(sp)
    b9f8:	dec00304 	addi	sp,sp,12
    b9fc:	f800283a 	ret
    ba00:	80c00017 	ldw	r3,0(r16)
    ba04:	183ff926 	beq	r3,zero,b9ec <__alt_data_end+0xfffb62bc>
    ba08:	88c00015 	stw	r3,0(r17)
    ba0c:	003ff706 	br	b9ec <__alt_data_end+0xfffb62bc>

0000ba10 <__swbuf_r>:
    ba10:	defffc04 	addi	sp,sp,-16
    ba14:	dc800215 	stw	r18,8(sp)
    ba18:	dc400115 	stw	r17,4(sp)
    ba1c:	dc000015 	stw	r16,0(sp)
    ba20:	dfc00315 	stw	ra,12(sp)
    ba24:	2025883a 	mov	r18,r4
    ba28:	2823883a 	mov	r17,r5
    ba2c:	3021883a 	mov	r16,r6
    ba30:	20000226 	beq	r4,zero,ba3c <__swbuf_r+0x2c>
    ba34:	20800e17 	ldw	r2,56(r4)
    ba38:	10004126 	beq	r2,zero,bb40 <__swbuf_r+0x130>
    ba3c:	80c00617 	ldw	r3,24(r16)
    ba40:	8180030b 	ldhu	r6,12(r16)
    ba44:	80c00215 	stw	r3,8(r16)
    ba48:	30c0020c 	andi	r3,r6,8
    ba4c:	18003526 	beq	r3,zero,bb24 <__swbuf_r+0x114>
    ba50:	80c00417 	ldw	r3,16(r16)
    ba54:	18003326 	beq	r3,zero,bb24 <__swbuf_r+0x114>
    ba58:	3088000c 	andi	r2,r6,8192
    ba5c:	8c403fcc 	andi	r17,r17,255
    ba60:	10001726 	beq	r2,zero,bac0 <__swbuf_r+0xb0>
    ba64:	80800017 	ldw	r2,0(r16)
    ba68:	81000517 	ldw	r4,20(r16)
    ba6c:	10c7c83a 	sub	r3,r2,r3
    ba70:	19001d0e 	bge	r3,r4,bae8 <__swbuf_r+0xd8>
    ba74:	18c00044 	addi	r3,r3,1
    ba78:	81400217 	ldw	r5,8(r16)
    ba7c:	11000044 	addi	r4,r2,1
    ba80:	81000015 	stw	r4,0(r16)
    ba84:	297fffc4 	addi	r5,r5,-1
    ba88:	81400215 	stw	r5,8(r16)
    ba8c:	14400005 	stb	r17,0(r2)
    ba90:	80800517 	ldw	r2,20(r16)
    ba94:	10c01d26 	beq	r2,r3,bb0c <__swbuf_r+0xfc>
    ba98:	8080030b 	ldhu	r2,12(r16)
    ba9c:	1080004c 	andi	r2,r2,1
    baa0:	1000181e 	bne	r2,zero,bb04 <__swbuf_r+0xf4>
    baa4:	8805883a 	mov	r2,r17
    baa8:	dfc00317 	ldw	ra,12(sp)
    baac:	dc800217 	ldw	r18,8(sp)
    bab0:	dc400117 	ldw	r17,4(sp)
    bab4:	dc000017 	ldw	r16,0(sp)
    bab8:	dec00404 	addi	sp,sp,16
    babc:	f800283a 	ret
    bac0:	81001917 	ldw	r4,100(r16)
    bac4:	00b7ffc4 	movi	r2,-8193
    bac8:	31880014 	ori	r6,r6,8192
    bacc:	2084703a 	and	r2,r4,r2
    bad0:	80801915 	stw	r2,100(r16)
    bad4:	80800017 	ldw	r2,0(r16)
    bad8:	81000517 	ldw	r4,20(r16)
    badc:	8180030d 	sth	r6,12(r16)
    bae0:	10c7c83a 	sub	r3,r2,r3
    bae4:	193fe316 	blt	r3,r4,ba74 <__alt_data_end+0xfffb6344>
    bae8:	9009883a 	mov	r4,r18
    baec:	800b883a 	mov	r5,r16
    baf0:	0006f300 	call	6f30 <_fflush_r>
    baf4:	1000091e 	bne	r2,zero,bb1c <__swbuf_r+0x10c>
    baf8:	80800017 	ldw	r2,0(r16)
    bafc:	00c00044 	movi	r3,1
    bb00:	003fdd06 	br	ba78 <__alt_data_end+0xfffb6348>
    bb04:	00800284 	movi	r2,10
    bb08:	88bfe61e 	bne	r17,r2,baa4 <__alt_data_end+0xfffb6374>
    bb0c:	9009883a 	mov	r4,r18
    bb10:	800b883a 	mov	r5,r16
    bb14:	0006f300 	call	6f30 <_fflush_r>
    bb18:	103fe226 	beq	r2,zero,baa4 <__alt_data_end+0xfffb6374>
    bb1c:	00bfffc4 	movi	r2,-1
    bb20:	003fe106 	br	baa8 <__alt_data_end+0xfffb6378>
    bb24:	9009883a 	mov	r4,r18
    bb28:	800b883a 	mov	r5,r16
    bb2c:	00054b00 	call	54b0 <__swsetup_r>
    bb30:	1000051e 	bne	r2,zero,bb48 <__swbuf_r+0x138>
    bb34:	8180030b 	ldhu	r6,12(r16)
    bb38:	80c00417 	ldw	r3,16(r16)
    bb3c:	003fc606 	br	ba58 <__alt_data_end+0xfffb6328>
    bb40:	00074ec0 	call	74ec <__sinit>
    bb44:	003fbd06 	br	ba3c <__alt_data_end+0xfffb630c>
    bb48:	80c0030b 	ldhu	r3,12(r16)
    bb4c:	00bfffc4 	movi	r2,-1
    bb50:	18c01014 	ori	r3,r3,64
    bb54:	80c0030d 	sth	r3,12(r16)
    bb58:	00c00244 	movi	r3,9
    bb5c:	90c00015 	stw	r3,0(r18)
    bb60:	003fd106 	br	baa8 <__alt_data_end+0xfffb6378>

0000bb64 <__swbuf>:
    bb64:	00c00074 	movhi	r3,1
    bb68:	18d03e04 	addi	r3,r3,16632
    bb6c:	2005883a 	mov	r2,r4
    bb70:	19000017 	ldw	r4,0(r3)
    bb74:	280d883a 	mov	r6,r5
    bb78:	100b883a 	mov	r5,r2
    bb7c:	000ba101 	jmpi	ba10 <__swbuf_r>

0000bb80 <_wcrtomb_r>:
    bb80:	defff604 	addi	sp,sp,-40
    bb84:	00800074 	movhi	r2,1
    bb88:	dc800815 	stw	r18,32(sp)
    bb8c:	dc400715 	stw	r17,28(sp)
    bb90:	dc000615 	stw	r16,24(sp)
    bb94:	10904004 	addi	r2,r2,16640
    bb98:	dfc00915 	stw	ra,36(sp)
    bb9c:	2021883a 	mov	r16,r4
    bba0:	3823883a 	mov	r17,r7
    bba4:	14800017 	ldw	r18,0(r2)
    bba8:	28001426 	beq	r5,zero,bbfc <_wcrtomb_r+0x7c>
    bbac:	d9400415 	stw	r5,16(sp)
    bbb0:	d9800515 	stw	r6,20(sp)
    bbb4:	0007fe00 	call	7fe0 <__locale_charset>
    bbb8:	d9400417 	ldw	r5,16(sp)
    bbbc:	d9800517 	ldw	r6,20(sp)
    bbc0:	8009883a 	mov	r4,r16
    bbc4:	dc400015 	stw	r17,0(sp)
    bbc8:	100f883a 	mov	r7,r2
    bbcc:	903ee83a 	callr	r18
    bbd0:	00ffffc4 	movi	r3,-1
    bbd4:	10c0031e 	bne	r2,r3,bbe4 <_wcrtomb_r+0x64>
    bbd8:	88000015 	stw	zero,0(r17)
    bbdc:	00c02284 	movi	r3,138
    bbe0:	80c00015 	stw	r3,0(r16)
    bbe4:	dfc00917 	ldw	ra,36(sp)
    bbe8:	dc800817 	ldw	r18,32(sp)
    bbec:	dc400717 	ldw	r17,28(sp)
    bbf0:	dc000617 	ldw	r16,24(sp)
    bbf4:	dec00a04 	addi	sp,sp,40
    bbf8:	f800283a 	ret
    bbfc:	0007fe00 	call	7fe0 <__locale_charset>
    bc00:	8009883a 	mov	r4,r16
    bc04:	dc400015 	stw	r17,0(sp)
    bc08:	d9400104 	addi	r5,sp,4
    bc0c:	000d883a 	mov	r6,zero
    bc10:	100f883a 	mov	r7,r2
    bc14:	903ee83a 	callr	r18
    bc18:	003fed06 	br	bbd0 <__alt_data_end+0xfffb64a0>

0000bc1c <wcrtomb>:
    bc1c:	defff504 	addi	sp,sp,-44
    bc20:	dc400515 	stw	r17,20(sp)
    bc24:	dc000415 	stw	r16,16(sp)
    bc28:	dfc00a15 	stw	ra,40(sp)
    bc2c:	dd400915 	stw	r21,36(sp)
    bc30:	dd000815 	stw	r20,32(sp)
    bc34:	dcc00715 	stw	r19,28(sp)
    bc38:	dc800615 	stw	r18,24(sp)
    bc3c:	2021883a 	mov	r16,r4
    bc40:	3023883a 	mov	r17,r6
    bc44:	20001d26 	beq	r4,zero,bcbc <wcrtomb+0xa0>
    bc48:	04800074 	movhi	r18,1
    bc4c:	94903e04 	addi	r18,r18,16632
    bc50:	00800074 	movhi	r2,1
    bc54:	95400017 	ldw	r21,0(r18)
    bc58:	10904004 	addi	r2,r2,16640
    bc5c:	15000017 	ldw	r20,0(r2)
    bc60:	2827883a 	mov	r19,r5
    bc64:	0007fe00 	call	7fe0 <__locale_charset>
    bc68:	a809883a 	mov	r4,r21
    bc6c:	dc400015 	stw	r17,0(sp)
    bc70:	800b883a 	mov	r5,r16
    bc74:	980d883a 	mov	r6,r19
    bc78:	100f883a 	mov	r7,r2
    bc7c:	a03ee83a 	callr	r20
    bc80:	00ffffc4 	movi	r3,-1
    bc84:	10c0041e 	bne	r2,r3,bc98 <wcrtomb+0x7c>
    bc88:	90c00017 	ldw	r3,0(r18)
    bc8c:	01002284 	movi	r4,138
    bc90:	88000015 	stw	zero,0(r17)
    bc94:	19000015 	stw	r4,0(r3)
    bc98:	dfc00a17 	ldw	ra,40(sp)
    bc9c:	dd400917 	ldw	r21,36(sp)
    bca0:	dd000817 	ldw	r20,32(sp)
    bca4:	dcc00717 	ldw	r19,28(sp)
    bca8:	dc800617 	ldw	r18,24(sp)
    bcac:	dc400517 	ldw	r17,20(sp)
    bcb0:	dc000417 	ldw	r16,16(sp)
    bcb4:	dec00b04 	addi	sp,sp,44
    bcb8:	f800283a 	ret
    bcbc:	04800074 	movhi	r18,1
    bcc0:	94903e04 	addi	r18,r18,16632
    bcc4:	00800074 	movhi	r2,1
    bcc8:	94c00017 	ldw	r19,0(r18)
    bccc:	10904004 	addi	r2,r2,16640
    bcd0:	14000017 	ldw	r16,0(r2)
    bcd4:	0007fe00 	call	7fe0 <__locale_charset>
    bcd8:	9809883a 	mov	r4,r19
    bcdc:	dc400015 	stw	r17,0(sp)
    bce0:	d9400104 	addi	r5,sp,4
    bce4:	000d883a 	mov	r6,zero
    bce8:	100f883a 	mov	r7,r2
    bcec:	803ee83a 	callr	r16
    bcf0:	003fe306 	br	bc80 <__alt_data_end+0xfffb6550>

0000bcf4 <__ascii_wctomb>:
    bcf4:	28000526 	beq	r5,zero,bd0c <__ascii_wctomb+0x18>
    bcf8:	00803fc4 	movi	r2,255
    bcfc:	11800536 	bltu	r2,r6,bd14 <__ascii_wctomb+0x20>
    bd00:	29800005 	stb	r6,0(r5)
    bd04:	00800044 	movi	r2,1
    bd08:	f800283a 	ret
    bd0c:	0005883a 	mov	r2,zero
    bd10:	f800283a 	ret
    bd14:	00802284 	movi	r2,138
    bd18:	20800015 	stw	r2,0(r4)
    bd1c:	00bfffc4 	movi	r2,-1
    bd20:	f800283a 	ret

0000bd24 <_wctomb_r>:
    bd24:	00800074 	movhi	r2,1
    bd28:	defff904 	addi	sp,sp,-28
    bd2c:	10904004 	addi	r2,r2,16640
    bd30:	dfc00615 	stw	ra,24(sp)
    bd34:	dc400515 	stw	r17,20(sp)
    bd38:	dc000415 	stw	r16,16(sp)
    bd3c:	3823883a 	mov	r17,r7
    bd40:	14000017 	ldw	r16,0(r2)
    bd44:	d9000115 	stw	r4,4(sp)
    bd48:	d9400215 	stw	r5,8(sp)
    bd4c:	d9800315 	stw	r6,12(sp)
    bd50:	0007fe00 	call	7fe0 <__locale_charset>
    bd54:	d9000117 	ldw	r4,4(sp)
    bd58:	d9400217 	ldw	r5,8(sp)
    bd5c:	d9800317 	ldw	r6,12(sp)
    bd60:	dc400015 	stw	r17,0(sp)
    bd64:	100f883a 	mov	r7,r2
    bd68:	803ee83a 	callr	r16
    bd6c:	dfc00617 	ldw	ra,24(sp)
    bd70:	dc400517 	ldw	r17,20(sp)
    bd74:	dc000417 	ldw	r16,16(sp)
    bd78:	dec00704 	addi	sp,sp,28
    bd7c:	f800283a 	ret

0000bd80 <__udivdi3>:
    bd80:	defff504 	addi	sp,sp,-44
    bd84:	dcc00415 	stw	r19,16(sp)
    bd88:	dc000115 	stw	r16,4(sp)
    bd8c:	dfc00a15 	stw	ra,40(sp)
    bd90:	df000915 	stw	fp,36(sp)
    bd94:	ddc00815 	stw	r23,32(sp)
    bd98:	dd800715 	stw	r22,28(sp)
    bd9c:	dd400615 	stw	r21,24(sp)
    bda0:	dd000515 	stw	r20,20(sp)
    bda4:	dc800315 	stw	r18,12(sp)
    bda8:	dc400215 	stw	r17,8(sp)
    bdac:	2027883a 	mov	r19,r4
    bdb0:	2821883a 	mov	r16,r5
    bdb4:	3800471e 	bne	r7,zero,bed4 <__udivdi3+0x154>
    bdb8:	3025883a 	mov	r18,r6
    bdbc:	2023883a 	mov	r17,r4
    bdc0:	2980592e 	bgeu	r5,r6,bf28 <__udivdi3+0x1a8>
    bdc4:	00bfffd4 	movui	r2,65535
    bdc8:	2829883a 	mov	r20,r5
    bdcc:	1180b236 	bltu	r2,r6,c098 <__udivdi3+0x318>
    bdd0:	00803fc4 	movi	r2,255
    bdd4:	1181622e 	bgeu	r2,r6,c360 <__udivdi3+0x5e0>
    bdd8:	00800204 	movi	r2,8
    bddc:	1007883a 	mov	r3,r2
    bde0:	3084d83a 	srl	r2,r6,r2
    bde4:	01000074 	movhi	r4,1
    bde8:	21094304 	addi	r4,r4,9484
    bdec:	2085883a 	add	r2,r4,r2
    bdf0:	11000003 	ldbu	r4,0(r2)
    bdf4:	20c9883a 	add	r4,r4,r3
    bdf8:	00c00804 	movi	r3,32
    bdfc:	1907c83a 	sub	r3,r3,r4
    be00:	18000526 	beq	r3,zero,be18 <__udivdi3+0x98>
    be04:	80e0983a 	sll	r16,r16,r3
    be08:	9908d83a 	srl	r4,r19,r4
    be0c:	30e4983a 	sll	r18,r6,r3
    be10:	98e2983a 	sll	r17,r19,r3
    be14:	8128b03a 	or	r20,r16,r4
    be18:	902ad43a 	srli	r21,r18,16
    be1c:	a009883a 	mov	r4,r20
    be20:	95bfffcc 	andi	r22,r18,65535
    be24:	a80b883a 	mov	r5,r21
    be28:	000cb000 	call	cb00 <__umodsi3>
    be2c:	a009883a 	mov	r4,r20
    be30:	a80b883a 	mov	r5,r21
    be34:	102f883a 	mov	r23,r2
    be38:	000caf80 	call	caf8 <__udivsi3>
    be3c:	1009883a 	mov	r4,r2
    be40:	b00b883a 	mov	r5,r22
    be44:	1021883a 	mov	r16,r2
    be48:	000cb080 	call	cb08 <__mulsi3>
    be4c:	b82e943a 	slli	r23,r23,16
    be50:	8808d43a 	srli	r4,r17,16
    be54:	b906b03a 	or	r3,r23,r4
    be58:	1880052e 	bgeu	r3,r2,be70 <__udivdi3+0xf0>
    be5c:	1c87883a 	add	r3,r3,r18
    be60:	813fffc4 	addi	r4,r16,-1
    be64:	1c800136 	bltu	r3,r18,be6c <__udivdi3+0xec>
    be68:	18815236 	bltu	r3,r2,c3b4 <__udivdi3+0x634>
    be6c:	2021883a 	mov	r16,r4
    be70:	18a7c83a 	sub	r19,r3,r2
    be74:	9809883a 	mov	r4,r19
    be78:	a80b883a 	mov	r5,r21
    be7c:	000cb000 	call	cb00 <__umodsi3>
    be80:	1029883a 	mov	r20,r2
    be84:	9809883a 	mov	r4,r19
    be88:	a80b883a 	mov	r5,r21
    be8c:	a028943a 	slli	r20,r20,16
    be90:	000caf80 	call	caf8 <__udivsi3>
    be94:	1009883a 	mov	r4,r2
    be98:	b00b883a 	mov	r5,r22
    be9c:	8c7fffcc 	andi	r17,r17,65535
    bea0:	1027883a 	mov	r19,r2
    bea4:	a462b03a 	or	r17,r20,r17
    bea8:	000cb080 	call	cb08 <__mulsi3>
    beac:	8880052e 	bgeu	r17,r2,bec4 <__udivdi3+0x144>
    beb0:	8ca3883a 	add	r17,r17,r18
    beb4:	98ffffc4 	addi	r3,r19,-1
    beb8:	8c811036 	bltu	r17,r18,c2fc <__udivdi3+0x57c>
    bebc:	88810f2e 	bgeu	r17,r2,c2fc <__udivdi3+0x57c>
    bec0:	9cffff84 	addi	r19,r19,-2
    bec4:	8020943a 	slli	r16,r16,16
    bec8:	0007883a 	mov	r3,zero
    becc:	9c04b03a 	or	r2,r19,r16
    bed0:	00006006 	br	c054 <__udivdi3+0x2d4>
    bed4:	29c05d36 	bltu	r5,r7,c04c <__udivdi3+0x2cc>
    bed8:	00bfffd4 	movui	r2,65535
    bedc:	11c0692e 	bgeu	r2,r7,c084 <__udivdi3+0x304>
    bee0:	00804034 	movhi	r2,256
    bee4:	10bfffc4 	addi	r2,r2,-1
    bee8:	11c10e2e 	bgeu	r2,r7,c324 <__udivdi3+0x5a4>
    beec:	01400604 	movi	r5,24
    bef0:	2811883a 	mov	r8,r5
    bef4:	394ad83a 	srl	r5,r7,r5
    bef8:	00800074 	movhi	r2,1
    befc:	10894304 	addi	r2,r2,9484
    bf00:	114b883a 	add	r5,r2,r5
    bf04:	29400003 	ldbu	r5,0(r5)
    bf08:	00c00804 	movi	r3,32
    bf0c:	2a0b883a 	add	r5,r5,r8
    bf10:	196fc83a 	sub	r23,r3,r5
    bf14:	b8006b1e 	bne	r23,zero,c0c4 <__udivdi3+0x344>
    bf18:	3c011436 	bltu	r7,r16,c36c <__udivdi3+0x5ec>
    bf1c:	9985403a 	cmpgeu	r2,r19,r6
    bf20:	0007883a 	mov	r3,zero
    bf24:	00004b06 	br	c054 <__udivdi3+0x2d4>
    bf28:	3000041e 	bne	r6,zero,bf3c <__udivdi3+0x1bc>
    bf2c:	01000044 	movi	r4,1
    bf30:	000b883a 	mov	r5,zero
    bf34:	000caf80 	call	caf8 <__udivsi3>
    bf38:	1025883a 	mov	r18,r2
    bf3c:	00bfffd4 	movui	r2,65535
    bf40:	14805b2e 	bgeu	r2,r18,c0b0 <__udivdi3+0x330>
    bf44:	00804034 	movhi	r2,256
    bf48:	10bfffc4 	addi	r2,r2,-1
    bf4c:	1480fe2e 	bgeu	r2,r18,c348 <__udivdi3+0x5c8>
    bf50:	00800604 	movi	r2,24
    bf54:	1007883a 	mov	r3,r2
    bf58:	9084d83a 	srl	r2,r18,r2
    bf5c:	01000074 	movhi	r4,1
    bf60:	21094304 	addi	r4,r4,9484
    bf64:	2085883a 	add	r2,r4,r2
    bf68:	11800003 	ldbu	r6,0(r2)
    bf6c:	01c00804 	movi	r7,32
    bf70:	30c7883a 	add	r3,r6,r3
    bf74:	38cfc83a 	sub	r7,r7,r3
    bf78:	3800a71e 	bne	r7,zero,c218 <__udivdi3+0x498>
    bf7c:	9028d43a 	srli	r20,r18,16
    bf80:	84a1c83a 	sub	r16,r16,r18
    bf84:	957fffcc 	andi	r21,r18,65535
    bf88:	00c00044 	movi	r3,1
    bf8c:	8009883a 	mov	r4,r16
    bf90:	a00b883a 	mov	r5,r20
    bf94:	d8c00015 	stw	r3,0(sp)
    bf98:	000cb000 	call	cb00 <__umodsi3>
    bf9c:	8009883a 	mov	r4,r16
    bfa0:	a00b883a 	mov	r5,r20
    bfa4:	102d883a 	mov	r22,r2
    bfa8:	000caf80 	call	caf8 <__udivsi3>
    bfac:	1009883a 	mov	r4,r2
    bfb0:	a80b883a 	mov	r5,r21
    bfb4:	1021883a 	mov	r16,r2
    bfb8:	000cb080 	call	cb08 <__mulsi3>
    bfbc:	b02c943a 	slli	r22,r22,16
    bfc0:	880ed43a 	srli	r7,r17,16
    bfc4:	d8c00017 	ldw	r3,0(sp)
    bfc8:	b1ccb03a 	or	r6,r22,r7
    bfcc:	3080052e 	bgeu	r6,r2,bfe4 <__udivdi3+0x264>
    bfd0:	348d883a 	add	r6,r6,r18
    bfd4:	813fffc4 	addi	r4,r16,-1
    bfd8:	34800136 	bltu	r6,r18,bfe0 <__udivdi3+0x260>
    bfdc:	3080f236 	bltu	r6,r2,c3a8 <__udivdi3+0x628>
    bfe0:	2021883a 	mov	r16,r4
    bfe4:	30a7c83a 	sub	r19,r6,r2
    bfe8:	9809883a 	mov	r4,r19
    bfec:	a00b883a 	mov	r5,r20
    bff0:	d8c00015 	stw	r3,0(sp)
    bff4:	000cb000 	call	cb00 <__umodsi3>
    bff8:	102d883a 	mov	r22,r2
    bffc:	9809883a 	mov	r4,r19
    c000:	a00b883a 	mov	r5,r20
    c004:	b02c943a 	slli	r22,r22,16
    c008:	000caf80 	call	caf8 <__udivsi3>
    c00c:	1009883a 	mov	r4,r2
    c010:	a80b883a 	mov	r5,r21
    c014:	8c7fffcc 	andi	r17,r17,65535
    c018:	1027883a 	mov	r19,r2
    c01c:	b462b03a 	or	r17,r22,r17
    c020:	000cb080 	call	cb08 <__mulsi3>
    c024:	d8c00017 	ldw	r3,0(sp)
    c028:	8880052e 	bgeu	r17,r2,c040 <__udivdi3+0x2c0>
    c02c:	8ca3883a 	add	r17,r17,r18
    c030:	993fffc4 	addi	r4,r19,-1
    c034:	8c80af36 	bltu	r17,r18,c2f4 <__udivdi3+0x574>
    c038:	8880ae2e 	bgeu	r17,r2,c2f4 <__udivdi3+0x574>
    c03c:	9cffff84 	addi	r19,r19,-2
    c040:	8020943a 	slli	r16,r16,16
    c044:	9c04b03a 	or	r2,r19,r16
    c048:	00000206 	br	c054 <__udivdi3+0x2d4>
    c04c:	0007883a 	mov	r3,zero
    c050:	0005883a 	mov	r2,zero
    c054:	dfc00a17 	ldw	ra,40(sp)
    c058:	df000917 	ldw	fp,36(sp)
    c05c:	ddc00817 	ldw	r23,32(sp)
    c060:	dd800717 	ldw	r22,28(sp)
    c064:	dd400617 	ldw	r21,24(sp)
    c068:	dd000517 	ldw	r20,20(sp)
    c06c:	dcc00417 	ldw	r19,16(sp)
    c070:	dc800317 	ldw	r18,12(sp)
    c074:	dc400217 	ldw	r17,8(sp)
    c078:	dc000117 	ldw	r16,4(sp)
    c07c:	dec00b04 	addi	sp,sp,44
    c080:	f800283a 	ret
    c084:	00803fc4 	movi	r2,255
    c088:	11c0a92e 	bgeu	r2,r7,c330 <__udivdi3+0x5b0>
    c08c:	01400204 	movi	r5,8
    c090:	2811883a 	mov	r8,r5
    c094:	003f9706 	br	bef4 <__alt_data_end+0xfffb67c4>
    c098:	00804034 	movhi	r2,256
    c09c:	10bfffc4 	addi	r2,r2,-1
    c0a0:	1180a62e 	bgeu	r2,r6,c33c <__udivdi3+0x5bc>
    c0a4:	00800604 	movi	r2,24
    c0a8:	1007883a 	mov	r3,r2
    c0ac:	003f4c06 	br	bde0 <__alt_data_end+0xfffb66b0>
    c0b0:	00803fc4 	movi	r2,255
    c0b4:	1480a72e 	bgeu	r2,r18,c354 <__udivdi3+0x5d4>
    c0b8:	00800204 	movi	r2,8
    c0bc:	1007883a 	mov	r3,r2
    c0c0:	003fa506 	br	bf58 <__alt_data_end+0xfffb6828>
    c0c4:	3178d83a 	srl	fp,r6,r5
    c0c8:	3dce983a 	sll	r7,r7,r23
    c0cc:	8168d83a 	srl	r20,r16,r5
    c0d0:	9950d83a 	srl	r8,r19,r5
    c0d4:	3f38b03a 	or	fp,r7,fp
    c0d8:	e024d43a 	srli	r18,fp,16
    c0dc:	85e0983a 	sll	r16,r16,r23
    c0e0:	a009883a 	mov	r4,r20
    c0e4:	900b883a 	mov	r5,r18
    c0e8:	8220b03a 	or	r16,r16,r8
    c0ec:	35ea983a 	sll	r21,r6,r23
    c0f0:	000cb000 	call	cb00 <__umodsi3>
    c0f4:	a009883a 	mov	r4,r20
    c0f8:	900b883a 	mov	r5,r18
    c0fc:	1023883a 	mov	r17,r2
    c100:	e5bfffcc 	andi	r22,fp,65535
    c104:	000caf80 	call	caf8 <__udivsi3>
    c108:	1009883a 	mov	r4,r2
    c10c:	b00b883a 	mov	r5,r22
    c110:	1029883a 	mov	r20,r2
    c114:	000cb080 	call	cb08 <__mulsi3>
    c118:	8806943a 	slli	r3,r17,16
    c11c:	8014d43a 	srli	r10,r16,16
    c120:	1a92b03a 	or	r9,r3,r10
    c124:	4880042e 	bgeu	r9,r2,c138 <__udivdi3+0x3b8>
    c128:	4f13883a 	add	r9,r9,fp
    c12c:	a0ffffc4 	addi	r3,r20,-1
    c130:	4f00952e 	bgeu	r9,fp,c388 <__udivdi3+0x608>
    c134:	1829883a 	mov	r20,r3
    c138:	48a3c83a 	sub	r17,r9,r2
    c13c:	8809883a 	mov	r4,r17
    c140:	900b883a 	mov	r5,r18
    c144:	000cb000 	call	cb00 <__umodsi3>
    c148:	8809883a 	mov	r4,r17
    c14c:	900b883a 	mov	r5,r18
    c150:	d8800015 	stw	r2,0(sp)
    c154:	000caf80 	call	caf8 <__udivsi3>
    c158:	1009883a 	mov	r4,r2
    c15c:	b00b883a 	mov	r5,r22
    c160:	1023883a 	mov	r17,r2
    c164:	000cb080 	call	cb08 <__mulsi3>
    c168:	d8c00017 	ldw	r3,0(sp)
    c16c:	823fffcc 	andi	r8,r16,65535
    c170:	1806943a 	slli	r3,r3,16
    c174:	1a20b03a 	or	r16,r3,r8
    c178:	8080042e 	bgeu	r16,r2,c18c <__udivdi3+0x40c>
    c17c:	8721883a 	add	r16,r16,fp
    c180:	88ffffc4 	addi	r3,r17,-1
    c184:	87007c2e 	bgeu	r16,fp,c378 <__udivdi3+0x5f8>
    c188:	1823883a 	mov	r17,r3
    c18c:	a028943a 	slli	r20,r20,16
    c190:	acbfffcc 	andi	r18,r21,65535
    c194:	900b883a 	mov	r5,r18
    c198:	8d28b03a 	or	r20,r17,r20
    c19c:	a022d43a 	srli	r17,r20,16
    c1a0:	a5bfffcc 	andi	r22,r20,65535
    c1a4:	b009883a 	mov	r4,r22
    c1a8:	a82ad43a 	srli	r21,r21,16
    c1ac:	80a1c83a 	sub	r16,r16,r2
    c1b0:	000cb080 	call	cb08 <__mulsi3>
    c1b4:	8809883a 	mov	r4,r17
    c1b8:	900b883a 	mov	r5,r18
    c1bc:	1039883a 	mov	fp,r2
    c1c0:	000cb080 	call	cb08 <__mulsi3>
    c1c4:	8809883a 	mov	r4,r17
    c1c8:	a80b883a 	mov	r5,r21
    c1cc:	1025883a 	mov	r18,r2
    c1d0:	000cb080 	call	cb08 <__mulsi3>
    c1d4:	b009883a 	mov	r4,r22
    c1d8:	a80b883a 	mov	r5,r21
    c1dc:	1023883a 	mov	r17,r2
    c1e0:	000cb080 	call	cb08 <__mulsi3>
    c1e4:	e006d43a 	srli	r3,fp,16
    c1e8:	9085883a 	add	r2,r18,r2
    c1ec:	10c7883a 	add	r3,r2,r3
    c1f0:	1c80022e 	bgeu	r3,r18,c1fc <__udivdi3+0x47c>
    c1f4:	00800074 	movhi	r2,1
    c1f8:	88a3883a 	add	r17,r17,r2
    c1fc:	1808d43a 	srli	r4,r3,16
    c200:	8909883a 	add	r4,r17,r4
    c204:	81004436 	bltu	r16,r4,c318 <__udivdi3+0x598>
    c208:	81003e26 	beq	r16,r4,c304 <__udivdi3+0x584>
    c20c:	a005883a 	mov	r2,r20
    c210:	0007883a 	mov	r3,zero
    c214:	003f8f06 	br	c054 <__alt_data_end+0xfffb6924>
    c218:	91e4983a 	sll	r18,r18,r7
    c21c:	80eed83a 	srl	r23,r16,r3
    c220:	81cc983a 	sll	r6,r16,r7
    c224:	9028d43a 	srli	r20,r18,16
    c228:	98c6d83a 	srl	r3,r19,r3
    c22c:	b809883a 	mov	r4,r23
    c230:	a00b883a 	mov	r5,r20
    c234:	30ecb03a 	or	r22,r6,r3
    c238:	99e2983a 	sll	r17,r19,r7
    c23c:	000cb000 	call	cb00 <__umodsi3>
    c240:	b809883a 	mov	r4,r23
    c244:	a00b883a 	mov	r5,r20
    c248:	1021883a 	mov	r16,r2
    c24c:	957fffcc 	andi	r21,r18,65535
    c250:	000caf80 	call	caf8 <__udivsi3>
    c254:	a80b883a 	mov	r5,r21
    c258:	1009883a 	mov	r4,r2
    c25c:	102f883a 	mov	r23,r2
    c260:	000cb080 	call	cb08 <__mulsi3>
    c264:	8020943a 	slli	r16,r16,16
    c268:	b00ad43a 	srli	r5,r22,16
    c26c:	814cb03a 	or	r6,r16,r5
    c270:	3080062e 	bgeu	r6,r2,c28c <__udivdi3+0x50c>
    c274:	348d883a 	add	r6,r6,r18
    c278:	b8ffffc4 	addi	r3,r23,-1
    c27c:	34804836 	bltu	r6,r18,c3a0 <__udivdi3+0x620>
    c280:	3080472e 	bgeu	r6,r2,c3a0 <__udivdi3+0x620>
    c284:	bdffff84 	addi	r23,r23,-2
    c288:	348d883a 	add	r6,r6,r18
    c28c:	30a7c83a 	sub	r19,r6,r2
    c290:	9809883a 	mov	r4,r19
    c294:	a00b883a 	mov	r5,r20
    c298:	000cb000 	call	cb00 <__umodsi3>
    c29c:	9809883a 	mov	r4,r19
    c2a0:	a00b883a 	mov	r5,r20
    c2a4:	1039883a 	mov	fp,r2
    c2a8:	000caf80 	call	caf8 <__udivsi3>
    c2ac:	1009883a 	mov	r4,r2
    c2b0:	a80b883a 	mov	r5,r21
    c2b4:	e038943a 	slli	fp,fp,16
    c2b8:	1027883a 	mov	r19,r2
    c2bc:	000cb080 	call	cb08 <__mulsi3>
    c2c0:	b1bfffcc 	andi	r6,r22,65535
    c2c4:	e18cb03a 	or	r6,fp,r6
    c2c8:	3080062e 	bgeu	r6,r2,c2e4 <__udivdi3+0x564>
    c2cc:	348d883a 	add	r6,r6,r18
    c2d0:	98ffffc4 	addi	r3,r19,-1
    c2d4:	34803036 	bltu	r6,r18,c398 <__udivdi3+0x618>
    c2d8:	30802f2e 	bgeu	r6,r2,c398 <__udivdi3+0x618>
    c2dc:	9cffff84 	addi	r19,r19,-2
    c2e0:	348d883a 	add	r6,r6,r18
    c2e4:	b82e943a 	slli	r23,r23,16
    c2e8:	30a1c83a 	sub	r16,r6,r2
    c2ec:	9dc6b03a 	or	r3,r19,r23
    c2f0:	003f2606 	br	bf8c <__alt_data_end+0xfffb685c>
    c2f4:	2027883a 	mov	r19,r4
    c2f8:	003f5106 	br	c040 <__alt_data_end+0xfffb6910>
    c2fc:	1827883a 	mov	r19,r3
    c300:	003ef006 	br	bec4 <__alt_data_end+0xfffb6794>
    c304:	1808943a 	slli	r4,r3,16
    c308:	9dc6983a 	sll	r3,r19,r23
    c30c:	e73fffcc 	andi	fp,fp,65535
    c310:	2709883a 	add	r4,r4,fp
    c314:	193fbd2e 	bgeu	r3,r4,c20c <__alt_data_end+0xfffb6adc>
    c318:	a0bfffc4 	addi	r2,r20,-1
    c31c:	0007883a 	mov	r3,zero
    c320:	003f4c06 	br	c054 <__alt_data_end+0xfffb6924>
    c324:	01400404 	movi	r5,16
    c328:	2811883a 	mov	r8,r5
    c32c:	003ef106 	br	bef4 <__alt_data_end+0xfffb67c4>
    c330:	000b883a 	mov	r5,zero
    c334:	0011883a 	mov	r8,zero
    c338:	003eee06 	br	bef4 <__alt_data_end+0xfffb67c4>
    c33c:	00800404 	movi	r2,16
    c340:	1007883a 	mov	r3,r2
    c344:	003ea606 	br	bde0 <__alt_data_end+0xfffb66b0>
    c348:	00800404 	movi	r2,16
    c34c:	1007883a 	mov	r3,r2
    c350:	003f0106 	br	bf58 <__alt_data_end+0xfffb6828>
    c354:	0005883a 	mov	r2,zero
    c358:	0007883a 	mov	r3,zero
    c35c:	003efe06 	br	bf58 <__alt_data_end+0xfffb6828>
    c360:	0005883a 	mov	r2,zero
    c364:	0007883a 	mov	r3,zero
    c368:	003e9d06 	br	bde0 <__alt_data_end+0xfffb66b0>
    c36c:	0007883a 	mov	r3,zero
    c370:	00800044 	movi	r2,1
    c374:	003f3706 	br	c054 <__alt_data_end+0xfffb6924>
    c378:	80bf832e 	bgeu	r16,r2,c188 <__alt_data_end+0xfffb6a58>
    c37c:	8c7fff84 	addi	r17,r17,-2
    c380:	8721883a 	add	r16,r16,fp
    c384:	003f8106 	br	c18c <__alt_data_end+0xfffb6a5c>
    c388:	48bf6a2e 	bgeu	r9,r2,c134 <__alt_data_end+0xfffb6a04>
    c38c:	a53fff84 	addi	r20,r20,-2
    c390:	4f13883a 	add	r9,r9,fp
    c394:	003f6806 	br	c138 <__alt_data_end+0xfffb6a08>
    c398:	1827883a 	mov	r19,r3
    c39c:	003fd106 	br	c2e4 <__alt_data_end+0xfffb6bb4>
    c3a0:	182f883a 	mov	r23,r3
    c3a4:	003fb906 	br	c28c <__alt_data_end+0xfffb6b5c>
    c3a8:	843fff84 	addi	r16,r16,-2
    c3ac:	348d883a 	add	r6,r6,r18
    c3b0:	003f0c06 	br	bfe4 <__alt_data_end+0xfffb68b4>
    c3b4:	843fff84 	addi	r16,r16,-2
    c3b8:	1c87883a 	add	r3,r3,r18
    c3bc:	003eac06 	br	be70 <__alt_data_end+0xfffb6740>

0000c3c0 <__umoddi3>:
    c3c0:	defff404 	addi	sp,sp,-48
    c3c4:	dd800815 	stw	r22,32(sp)
    c3c8:	dc400315 	stw	r17,12(sp)
    c3cc:	dc000215 	stw	r16,8(sp)
    c3d0:	dfc00b15 	stw	ra,44(sp)
    c3d4:	df000a15 	stw	fp,40(sp)
    c3d8:	ddc00915 	stw	r23,36(sp)
    c3dc:	dd400715 	stw	r21,28(sp)
    c3e0:	dd000615 	stw	r20,24(sp)
    c3e4:	dcc00515 	stw	r19,20(sp)
    c3e8:	dc800415 	stw	r18,16(sp)
    c3ec:	2021883a 	mov	r16,r4
    c3f0:	2823883a 	mov	r17,r5
    c3f4:	282d883a 	mov	r22,r5
    c3f8:	38003c1e 	bne	r7,zero,c4ec <__umoddi3+0x12c>
    c3fc:	3027883a 	mov	r19,r6
    c400:	2029883a 	mov	r20,r4
    c404:	2980522e 	bgeu	r5,r6,c550 <__umoddi3+0x190>
    c408:	00bfffd4 	movui	r2,65535
    c40c:	1180a436 	bltu	r2,r6,c6a0 <__umoddi3+0x2e0>
    c410:	00803fc4 	movi	r2,255
    c414:	11815e2e 	bgeu	r2,r6,c990 <__umoddi3+0x5d0>
    c418:	01400204 	movi	r5,8
    c41c:	2805883a 	mov	r2,r5
    c420:	314ad83a 	srl	r5,r6,r5
    c424:	00c00074 	movhi	r3,1
    c428:	18c94304 	addi	r3,r3,9484
    c42c:	194b883a 	add	r5,r3,r5
    c430:	29000003 	ldbu	r4,0(r5)
    c434:	2089883a 	add	r4,r4,r2
    c438:	00800804 	movi	r2,32
    c43c:	1105c83a 	sub	r2,r2,r4
    c440:	10010c26 	beq	r2,zero,c874 <__umoddi3+0x4b4>
    c444:	88a2983a 	sll	r17,r17,r2
    c448:	8108d83a 	srl	r4,r16,r4
    c44c:	30a6983a 	sll	r19,r6,r2
    c450:	80a8983a 	sll	r20,r16,r2
    c454:	1025883a 	mov	r18,r2
    c458:	892cb03a 	or	r22,r17,r4
    c45c:	9822d43a 	srli	r17,r19,16
    c460:	b009883a 	mov	r4,r22
    c464:	9d7fffcc 	andi	r21,r19,65535
    c468:	880b883a 	mov	r5,r17
    c46c:	000cb000 	call	cb00 <__umodsi3>
    c470:	b009883a 	mov	r4,r22
    c474:	880b883a 	mov	r5,r17
    c478:	102f883a 	mov	r23,r2
    c47c:	000caf80 	call	caf8 <__udivsi3>
    c480:	1009883a 	mov	r4,r2
    c484:	a80b883a 	mov	r5,r21
    c488:	000cb080 	call	cb08 <__mulsi3>
    c48c:	b82e943a 	slli	r23,r23,16
    c490:	a008d43a 	srli	r4,r20,16
    c494:	b906b03a 	or	r3,r23,r4
    c498:	1880042e 	bgeu	r3,r2,c4ac <__umoddi3+0xec>
    c49c:	1cc7883a 	add	r3,r3,r19
    c4a0:	1cc00236 	bltu	r3,r19,c4ac <__umoddi3+0xec>
    c4a4:	1880012e 	bgeu	r3,r2,c4ac <__umoddi3+0xec>
    c4a8:	1cc7883a 	add	r3,r3,r19
    c4ac:	18a1c83a 	sub	r16,r3,r2
    c4b0:	8009883a 	mov	r4,r16
    c4b4:	880b883a 	mov	r5,r17
    c4b8:	000cb000 	call	cb00 <__umodsi3>
    c4bc:	8009883a 	mov	r4,r16
    c4c0:	880b883a 	mov	r5,r17
    c4c4:	102d883a 	mov	r22,r2
    c4c8:	000caf80 	call	caf8 <__udivsi3>
    c4cc:	1009883a 	mov	r4,r2
    c4d0:	a80b883a 	mov	r5,r21
    c4d4:	b02c943a 	slli	r22,r22,16
    c4d8:	000cb080 	call	cb08 <__mulsi3>
    c4dc:	a13fffcc 	andi	r4,r20,65535
    c4e0:	b106b03a 	or	r3,r22,r4
    c4e4:	1880572e 	bgeu	r3,r2,c644 <__umoddi3+0x284>
    c4e8:	00005206 	br	c634 <__umoddi3+0x274>
    c4ec:	29c05936 	bltu	r5,r7,c654 <__umoddi3+0x294>
    c4f0:	00bfffd4 	movui	r2,65535
    c4f4:	11c0652e 	bgeu	r2,r7,c68c <__umoddi3+0x2cc>
    c4f8:	00804034 	movhi	r2,256
    c4fc:	10bfffc4 	addi	r2,r2,-1
    c500:	11c1172e 	bgeu	r2,r7,c960 <__umoddi3+0x5a0>
    c504:	01400604 	movi	r5,24
    c508:	282b883a 	mov	r21,r5
    c50c:	394ad83a 	srl	r5,r7,r5
    c510:	00c00074 	movhi	r3,1
    c514:	18c94304 	addi	r3,r3,9484
    c518:	194b883a 	add	r5,r3,r5
    c51c:	28800003 	ldbu	r2,0(r5)
    c520:	00c00804 	movi	r3,32
    c524:	156b883a 	add	r21,r2,r21
    c528:	1d69c83a 	sub	r20,r3,r21
    c52c:	a000671e 	bne	r20,zero,c6cc <__umoddi3+0x30c>
    c530:	3c400136 	bltu	r7,r17,c538 <__umoddi3+0x178>
    c534:	81812336 	bltu	r16,r6,c9c4 <__umoddi3+0x604>
    c538:	8185c83a 	sub	r2,r16,r6
    c53c:	89e3c83a 	sub	r17,r17,r7
    c540:	8087803a 	cmpltu	r3,r16,r2
    c544:	88edc83a 	sub	r22,r17,r3
    c548:	b007883a 	mov	r3,r22
    c54c:	00004306 	br	c65c <__umoddi3+0x29c>
    c550:	3000041e 	bne	r6,zero,c564 <__umoddi3+0x1a4>
    c554:	01000044 	movi	r4,1
    c558:	000b883a 	mov	r5,zero
    c55c:	000caf80 	call	caf8 <__udivsi3>
    c560:	1027883a 	mov	r19,r2
    c564:	00bfffd4 	movui	r2,65535
    c568:	14c0532e 	bgeu	r2,r19,c6b8 <__umoddi3+0x2f8>
    c56c:	00804034 	movhi	r2,256
    c570:	10bfffc4 	addi	r2,r2,-1
    c574:	14c1032e 	bgeu	r2,r19,c984 <__umoddi3+0x5c4>
    c578:	00800604 	movi	r2,24
    c57c:	1007883a 	mov	r3,r2
    c580:	9884d83a 	srl	r2,r19,r2
    c584:	01000074 	movhi	r4,1
    c588:	21094304 	addi	r4,r4,9484
    c58c:	2085883a 	add	r2,r4,r2
    c590:	11000003 	ldbu	r4,0(r2)
    c594:	00800804 	movi	r2,32
    c598:	20c7883a 	add	r3,r4,r3
    c59c:	10c5c83a 	sub	r2,r2,r3
    c5a0:	1000b61e 	bne	r2,zero,c87c <__umoddi3+0x4bc>
    c5a4:	982ad43a 	srli	r21,r19,16
    c5a8:	8ce3c83a 	sub	r17,r17,r19
    c5ac:	9dbfffcc 	andi	r22,r19,65535
    c5b0:	0025883a 	mov	r18,zero
    c5b4:	8809883a 	mov	r4,r17
    c5b8:	a80b883a 	mov	r5,r21
    c5bc:	000cb000 	call	cb00 <__umodsi3>
    c5c0:	8809883a 	mov	r4,r17
    c5c4:	a80b883a 	mov	r5,r21
    c5c8:	102f883a 	mov	r23,r2
    c5cc:	000caf80 	call	caf8 <__udivsi3>
    c5d0:	1009883a 	mov	r4,r2
    c5d4:	b00b883a 	mov	r5,r22
    c5d8:	000cb080 	call	cb08 <__mulsi3>
    c5dc:	b82e943a 	slli	r23,r23,16
    c5e0:	a008d43a 	srli	r4,r20,16
    c5e4:	b906b03a 	or	r3,r23,r4
    c5e8:	1880032e 	bgeu	r3,r2,c5f8 <__umoddi3+0x238>
    c5ec:	1cc7883a 	add	r3,r3,r19
    c5f0:	1cc00136 	bltu	r3,r19,c5f8 <__umoddi3+0x238>
    c5f4:	1880f136 	bltu	r3,r2,c9bc <__umoddi3+0x5fc>
    c5f8:	18a1c83a 	sub	r16,r3,r2
    c5fc:	8009883a 	mov	r4,r16
    c600:	a80b883a 	mov	r5,r21
    c604:	000cb000 	call	cb00 <__umodsi3>
    c608:	8009883a 	mov	r4,r16
    c60c:	a80b883a 	mov	r5,r21
    c610:	1023883a 	mov	r17,r2
    c614:	000caf80 	call	caf8 <__udivsi3>
    c618:	1009883a 	mov	r4,r2
    c61c:	b00b883a 	mov	r5,r22
    c620:	8822943a 	slli	r17,r17,16
    c624:	000cb080 	call	cb08 <__mulsi3>
    c628:	a13fffcc 	andi	r4,r20,65535
    c62c:	8906b03a 	or	r3,r17,r4
    c630:	1880042e 	bgeu	r3,r2,c644 <__umoddi3+0x284>
    c634:	1cc7883a 	add	r3,r3,r19
    c638:	1cc00236 	bltu	r3,r19,c644 <__umoddi3+0x284>
    c63c:	1880012e 	bgeu	r3,r2,c644 <__umoddi3+0x284>
    c640:	1cc7883a 	add	r3,r3,r19
    c644:	1887c83a 	sub	r3,r3,r2
    c648:	1c84d83a 	srl	r2,r3,r18
    c64c:	0007883a 	mov	r3,zero
    c650:	00000206 	br	c65c <__umoddi3+0x29c>
    c654:	2005883a 	mov	r2,r4
    c658:	2807883a 	mov	r3,r5
    c65c:	dfc00b17 	ldw	ra,44(sp)
    c660:	df000a17 	ldw	fp,40(sp)
    c664:	ddc00917 	ldw	r23,36(sp)
    c668:	dd800817 	ldw	r22,32(sp)
    c66c:	dd400717 	ldw	r21,28(sp)
    c670:	dd000617 	ldw	r20,24(sp)
    c674:	dcc00517 	ldw	r19,20(sp)
    c678:	dc800417 	ldw	r18,16(sp)
    c67c:	dc400317 	ldw	r17,12(sp)
    c680:	dc000217 	ldw	r16,8(sp)
    c684:	dec00c04 	addi	sp,sp,48
    c688:	f800283a 	ret
    c68c:	00803fc4 	movi	r2,255
    c690:	11c0b02e 	bgeu	r2,r7,c954 <__umoddi3+0x594>
    c694:	01400204 	movi	r5,8
    c698:	282b883a 	mov	r21,r5
    c69c:	003f9b06 	br	c50c <__alt_data_end+0xfffb6ddc>
    c6a0:	00804034 	movhi	r2,256
    c6a4:	10bfffc4 	addi	r2,r2,-1
    c6a8:	1180b02e 	bgeu	r2,r6,c96c <__umoddi3+0x5ac>
    c6ac:	01400604 	movi	r5,24
    c6b0:	2805883a 	mov	r2,r5
    c6b4:	003f5a06 	br	c420 <__alt_data_end+0xfffb6cf0>
    c6b8:	00803fc4 	movi	r2,255
    c6bc:	14c0ae2e 	bgeu	r2,r19,c978 <__umoddi3+0x5b8>
    c6c0:	00800204 	movi	r2,8
    c6c4:	1007883a 	mov	r3,r2
    c6c8:	003fad06 	br	c580 <__alt_data_end+0xfffb6e50>
    c6cc:	3d0a983a 	sll	r5,r7,r20
    c6d0:	356cd83a 	srl	r22,r6,r21
    c6d4:	8d78d83a 	srl	fp,r17,r21
    c6d8:	8d10983a 	sll	r8,r17,r20
    c6dc:	2dacb03a 	or	r22,r5,r22
    c6e0:	b02ed43a 	srli	r23,r22,16
    c6e4:	8564d83a 	srl	r18,r16,r21
    c6e8:	e009883a 	mov	r4,fp
    c6ec:	b80b883a 	mov	r5,r23
    c6f0:	44a4b03a 	or	r18,r8,r18
    c6f4:	3526983a 	sll	r19,r6,r20
    c6f8:	000cb000 	call	cb00 <__umodsi3>
    c6fc:	e009883a 	mov	r4,fp
    c700:	b80b883a 	mov	r5,r23
    c704:	b47fffcc 	andi	r17,r22,65535
    c708:	d8800015 	stw	r2,0(sp)
    c70c:	000caf80 	call	caf8 <__udivsi3>
    c710:	1009883a 	mov	r4,r2
    c714:	880b883a 	mov	r5,r17
    c718:	1039883a 	mov	fp,r2
    c71c:	000cb080 	call	cb08 <__mulsi3>
    c720:	d9800017 	ldw	r6,0(sp)
    c724:	9008d43a 	srli	r4,r18,16
    c728:	8520983a 	sll	r16,r16,r20
    c72c:	300c943a 	slli	r6,r6,16
    c730:	3106b03a 	or	r3,r6,r4
    c734:	1880042e 	bgeu	r3,r2,c748 <__umoddi3+0x388>
    c738:	1d87883a 	add	r3,r3,r22
    c73c:	e13fffc4 	addi	r4,fp,-1
    c740:	1d809a2e 	bgeu	r3,r22,c9ac <__umoddi3+0x5ec>
    c744:	2039883a 	mov	fp,r4
    c748:	1887c83a 	sub	r3,r3,r2
    c74c:	1809883a 	mov	r4,r3
    c750:	b80b883a 	mov	r5,r23
    c754:	d8c00115 	stw	r3,4(sp)
    c758:	000cb000 	call	cb00 <__umodsi3>
    c75c:	d8c00117 	ldw	r3,4(sp)
    c760:	b80b883a 	mov	r5,r23
    c764:	d8800015 	stw	r2,0(sp)
    c768:	1809883a 	mov	r4,r3
    c76c:	000caf80 	call	caf8 <__udivsi3>
    c770:	880b883a 	mov	r5,r17
    c774:	1009883a 	mov	r4,r2
    c778:	102f883a 	mov	r23,r2
    c77c:	000cb080 	call	cb08 <__mulsi3>
    c780:	d9800017 	ldw	r6,0(sp)
    c784:	947fffcc 	andi	r17,r18,65535
    c788:	300c943a 	slli	r6,r6,16
    c78c:	3464b03a 	or	r18,r6,r17
    c790:	9080042e 	bgeu	r18,r2,c7a4 <__umoddi3+0x3e4>
    c794:	95a5883a 	add	r18,r18,r22
    c798:	b8ffffc4 	addi	r3,r23,-1
    c79c:	95807f2e 	bgeu	r18,r22,c99c <__umoddi3+0x5dc>
    c7a0:	182f883a 	mov	r23,r3
    c7a4:	e038943a 	slli	fp,fp,16
    c7a8:	980cd43a 	srli	r6,r19,16
    c7ac:	98ffffcc 	andi	r3,r19,65535
    c7b0:	bf38b03a 	or	fp,r23,fp
    c7b4:	e02ed43a 	srli	r23,fp,16
    c7b8:	e73fffcc 	andi	fp,fp,65535
    c7bc:	180b883a 	mov	r5,r3
    c7c0:	e009883a 	mov	r4,fp
    c7c4:	d9800015 	stw	r6,0(sp)
    c7c8:	d8c00115 	stw	r3,4(sp)
    c7cc:	90a5c83a 	sub	r18,r18,r2
    c7d0:	000cb080 	call	cb08 <__mulsi3>
    c7d4:	d8c00117 	ldw	r3,4(sp)
    c7d8:	b809883a 	mov	r4,r23
    c7dc:	1023883a 	mov	r17,r2
    c7e0:	180b883a 	mov	r5,r3
    c7e4:	000cb080 	call	cb08 <__mulsi3>
    c7e8:	d9800017 	ldw	r6,0(sp)
    c7ec:	b809883a 	mov	r4,r23
    c7f0:	d8800115 	stw	r2,4(sp)
    c7f4:	300b883a 	mov	r5,r6
    c7f8:	302f883a 	mov	r23,r6
    c7fc:	000cb080 	call	cb08 <__mulsi3>
    c800:	e009883a 	mov	r4,fp
    c804:	b80b883a 	mov	r5,r23
    c808:	d8800015 	stw	r2,0(sp)
    c80c:	000cb080 	call	cb08 <__mulsi3>
    c810:	d8c00117 	ldw	r3,4(sp)
    c814:	880cd43a 	srli	r6,r17,16
    c818:	d9c00017 	ldw	r7,0(sp)
    c81c:	1885883a 	add	r2,r3,r2
    c820:	118d883a 	add	r6,r2,r6
    c824:	30c0022e 	bgeu	r6,r3,c830 <__umoddi3+0x470>
    c828:	00800074 	movhi	r2,1
    c82c:	388f883a 	add	r7,r7,r2
    c830:	3006d43a 	srli	r3,r6,16
    c834:	300c943a 	slli	r6,r6,16
    c838:	8c7fffcc 	andi	r17,r17,65535
    c83c:	38c7883a 	add	r3,r7,r3
    c840:	3463883a 	add	r17,r6,r17
    c844:	90c03d36 	bltu	r18,r3,c93c <__umoddi3+0x57c>
    c848:	90c06026 	beq	r18,r3,c9cc <__umoddi3+0x60c>
    c84c:	90c9c83a 	sub	r4,r18,r3
    c850:	880f883a 	mov	r7,r17
    c854:	81cfc83a 	sub	r7,r16,r7
    c858:	81c7803a 	cmpltu	r3,r16,r7
    c85c:	20c7c83a 	sub	r3,r4,r3
    c860:	1d44983a 	sll	r2,r3,r21
    c864:	3d0ed83a 	srl	r7,r7,r20
    c868:	1d06d83a 	srl	r3,r3,r20
    c86c:	11c4b03a 	or	r2,r2,r7
    c870:	003f7a06 	br	c65c <__alt_data_end+0xfffb6f2c>
    c874:	0025883a 	mov	r18,zero
    c878:	003ef806 	br	c45c <__alt_data_end+0xfffb6d2c>
    c87c:	98a6983a 	sll	r19,r19,r2
    c880:	88e8d83a 	srl	r20,r17,r3
    c884:	80c6d83a 	srl	r3,r16,r3
    c888:	982ad43a 	srli	r21,r19,16
    c88c:	88a2983a 	sll	r17,r17,r2
    c890:	a009883a 	mov	r4,r20
    c894:	a80b883a 	mov	r5,r21
    c898:	88eeb03a 	or	r23,r17,r3
    c89c:	1025883a 	mov	r18,r2
    c8a0:	000cb000 	call	cb00 <__umodsi3>
    c8a4:	a009883a 	mov	r4,r20
    c8a8:	a80b883a 	mov	r5,r21
    c8ac:	1023883a 	mov	r17,r2
    c8b0:	9dbfffcc 	andi	r22,r19,65535
    c8b4:	000caf80 	call	caf8 <__udivsi3>
    c8b8:	1009883a 	mov	r4,r2
    c8bc:	b00b883a 	mov	r5,r22
    c8c0:	000cb080 	call	cb08 <__mulsi3>
    c8c4:	8822943a 	slli	r17,r17,16
    c8c8:	b808d43a 	srli	r4,r23,16
    c8cc:	84a8983a 	sll	r20,r16,r18
    c8d0:	8906b03a 	or	r3,r17,r4
    c8d4:	1880042e 	bgeu	r3,r2,c8e8 <__umoddi3+0x528>
    c8d8:	1cc7883a 	add	r3,r3,r19
    c8dc:	1cc00236 	bltu	r3,r19,c8e8 <__umoddi3+0x528>
    c8e0:	1880012e 	bgeu	r3,r2,c8e8 <__umoddi3+0x528>
    c8e4:	1cc7883a 	add	r3,r3,r19
    c8e8:	18a1c83a 	sub	r16,r3,r2
    c8ec:	8009883a 	mov	r4,r16
    c8f0:	a80b883a 	mov	r5,r21
    c8f4:	000cb000 	call	cb00 <__umodsi3>
    c8f8:	8009883a 	mov	r4,r16
    c8fc:	a80b883a 	mov	r5,r21
    c900:	1039883a 	mov	fp,r2
    c904:	000caf80 	call	caf8 <__udivsi3>
    c908:	1009883a 	mov	r4,r2
    c90c:	b00b883a 	mov	r5,r22
    c910:	000cb080 	call	cb08 <__mulsi3>
    c914:	e006943a 	slli	r3,fp,16
    c918:	b93fffcc 	andi	r4,r23,65535
    c91c:	1906b03a 	or	r3,r3,r4
    c920:	1880042e 	bgeu	r3,r2,c934 <__umoddi3+0x574>
    c924:	1cc7883a 	add	r3,r3,r19
    c928:	1cc00236 	bltu	r3,r19,c934 <__umoddi3+0x574>
    c92c:	1880012e 	bgeu	r3,r2,c934 <__umoddi3+0x574>
    c930:	1cc7883a 	add	r3,r3,r19
    c934:	18a3c83a 	sub	r17,r3,r2
    c938:	003f1e06 	br	c5b4 <__alt_data_end+0xfffb6e84>
    c93c:	8ccfc83a 	sub	r7,r17,r19
    c940:	1d89c83a 	sub	r4,r3,r22
    c944:	89e3803a 	cmpltu	r17,r17,r7
    c948:	2463c83a 	sub	r17,r4,r17
    c94c:	9449c83a 	sub	r4,r18,r17
    c950:	003fc006 	br	c854 <__alt_data_end+0xfffb7124>
    c954:	000b883a 	mov	r5,zero
    c958:	002b883a 	mov	r21,zero
    c95c:	003eeb06 	br	c50c <__alt_data_end+0xfffb6ddc>
    c960:	01400404 	movi	r5,16
    c964:	282b883a 	mov	r21,r5
    c968:	003ee806 	br	c50c <__alt_data_end+0xfffb6ddc>
    c96c:	01400404 	movi	r5,16
    c970:	2805883a 	mov	r2,r5
    c974:	003eaa06 	br	c420 <__alt_data_end+0xfffb6cf0>
    c978:	0005883a 	mov	r2,zero
    c97c:	0007883a 	mov	r3,zero
    c980:	003eff06 	br	c580 <__alt_data_end+0xfffb6e50>
    c984:	00800404 	movi	r2,16
    c988:	1007883a 	mov	r3,r2
    c98c:	003efc06 	br	c580 <__alt_data_end+0xfffb6e50>
    c990:	000b883a 	mov	r5,zero
    c994:	0005883a 	mov	r2,zero
    c998:	003ea106 	br	c420 <__alt_data_end+0xfffb6cf0>
    c99c:	90bf802e 	bgeu	r18,r2,c7a0 <__alt_data_end+0xfffb7070>
    c9a0:	bdffff84 	addi	r23,r23,-2
    c9a4:	95a5883a 	add	r18,r18,r22
    c9a8:	003f7e06 	br	c7a4 <__alt_data_end+0xfffb7074>
    c9ac:	18bf652e 	bgeu	r3,r2,c744 <__alt_data_end+0xfffb7014>
    c9b0:	e73fff84 	addi	fp,fp,-2
    c9b4:	1d87883a 	add	r3,r3,r22
    c9b8:	003f6306 	br	c748 <__alt_data_end+0xfffb7018>
    c9bc:	1cc7883a 	add	r3,r3,r19
    c9c0:	003f0d06 	br	c5f8 <__alt_data_end+0xfffb6ec8>
    c9c4:	8005883a 	mov	r2,r16
    c9c8:	003edf06 	br	c548 <__alt_data_end+0xfffb6e18>
    c9cc:	847fdb36 	bltu	r16,r17,c93c <__alt_data_end+0xfffb720c>
    c9d0:	880f883a 	mov	r7,r17
    c9d4:	0009883a 	mov	r4,zero
    c9d8:	003f9e06 	br	c854 <__alt_data_end+0xfffb7124>

0000c9dc <udivmodsi4>:
    c9dc:	2900182e 	bgeu	r5,r4,ca40 <udivmodsi4+0x64>
    c9e0:	28001716 	blt	r5,zero,ca40 <udivmodsi4+0x64>
    c9e4:	00800804 	movi	r2,32
    c9e8:	00c00044 	movi	r3,1
    c9ec:	00000206 	br	c9f8 <udivmodsi4+0x1c>
    c9f0:	10001126 	beq	r2,zero,ca38 <udivmodsi4+0x5c>
    c9f4:	28000516 	blt	r5,zero,ca0c <udivmodsi4+0x30>
    c9f8:	294b883a 	add	r5,r5,r5
    c9fc:	10bfffc4 	addi	r2,r2,-1
    ca00:	18c7883a 	add	r3,r3,r3
    ca04:	293ffa36 	bltu	r5,r4,c9f0 <__alt_data_end+0xfffb72c0>
    ca08:	18000b26 	beq	r3,zero,ca38 <udivmodsi4+0x5c>
    ca0c:	0005883a 	mov	r2,zero
    ca10:	21400236 	bltu	r4,r5,ca1c <udivmodsi4+0x40>
    ca14:	2149c83a 	sub	r4,r4,r5
    ca18:	10c4b03a 	or	r2,r2,r3
    ca1c:	1806d07a 	srli	r3,r3,1
    ca20:	280ad07a 	srli	r5,r5,1
    ca24:	183ffa1e 	bne	r3,zero,ca10 <__alt_data_end+0xfffb72e0>
    ca28:	3000011e 	bne	r6,zero,ca30 <udivmodsi4+0x54>
    ca2c:	f800283a 	ret
    ca30:	2005883a 	mov	r2,r4
    ca34:	f800283a 	ret
    ca38:	0005883a 	mov	r2,zero
    ca3c:	003ffa06 	br	ca28 <__alt_data_end+0xfffb72f8>
    ca40:	00c00044 	movi	r3,1
    ca44:	003ff106 	br	ca0c <__alt_data_end+0xfffb72dc>

0000ca48 <__divsi3>:
    ca48:	defffe04 	addi	sp,sp,-8
    ca4c:	dfc00115 	stw	ra,4(sp)
    ca50:	dc000015 	stw	r16,0(sp)
    ca54:	20000b16 	blt	r4,zero,ca84 <__divsi3+0x3c>
    ca58:	0021883a 	mov	r16,zero
    ca5c:	28000c16 	blt	r5,zero,ca90 <__divsi3+0x48>
    ca60:	000d883a 	mov	r6,zero
    ca64:	000c9dc0 	call	c9dc <udivmodsi4>
    ca68:	0407c83a 	sub	r3,zero,r16
    ca6c:	1884f03a 	xor	r2,r3,r2
    ca70:	1405883a 	add	r2,r2,r16
    ca74:	dfc00117 	ldw	ra,4(sp)
    ca78:	dc000017 	ldw	r16,0(sp)
    ca7c:	dec00204 	addi	sp,sp,8
    ca80:	f800283a 	ret
    ca84:	0109c83a 	sub	r4,zero,r4
    ca88:	04000044 	movi	r16,1
    ca8c:	283ff40e 	bge	r5,zero,ca60 <__alt_data_end+0xfffb7330>
    ca90:	014bc83a 	sub	r5,zero,r5
    ca94:	8400005c 	xori	r16,r16,1
    ca98:	003ff106 	br	ca60 <__alt_data_end+0xfffb7330>

0000ca9c <__modsi3>:
    ca9c:	defffd04 	addi	sp,sp,-12
    caa0:	dfc00215 	stw	ra,8(sp)
    caa4:	dc400115 	stw	r17,4(sp)
    caa8:	dc000015 	stw	r16,0(sp)
    caac:	20000c16 	blt	r4,zero,cae0 <__modsi3+0x44>
    cab0:	0023883a 	mov	r17,zero
    cab4:	0021883a 	mov	r16,zero
    cab8:	28000d16 	blt	r5,zero,caf0 <__modsi3+0x54>
    cabc:	01800044 	movi	r6,1
    cac0:	000c9dc0 	call	c9dc <udivmodsi4>
    cac4:	1404f03a 	xor	r2,r2,r16
    cac8:	8885883a 	add	r2,r17,r2
    cacc:	dfc00217 	ldw	ra,8(sp)
    cad0:	dc400117 	ldw	r17,4(sp)
    cad4:	dc000017 	ldw	r16,0(sp)
    cad8:	dec00304 	addi	sp,sp,12
    cadc:	f800283a 	ret
    cae0:	0109c83a 	sub	r4,zero,r4
    cae4:	04400044 	movi	r17,1
    cae8:	043fffc4 	movi	r16,-1
    caec:	283ff30e 	bge	r5,zero,cabc <__alt_data_end+0xfffb738c>
    caf0:	014bc83a 	sub	r5,zero,r5
    caf4:	003ff106 	br	cabc <__alt_data_end+0xfffb738c>

0000caf8 <__udivsi3>:
    caf8:	000d883a 	mov	r6,zero
    cafc:	000c9dc1 	jmpi	c9dc <udivmodsi4>

0000cb00 <__umodsi3>:
    cb00:	01800044 	movi	r6,1
    cb04:	000c9dc1 	jmpi	c9dc <udivmodsi4>

0000cb08 <__mulsi3>:
    cb08:	0005883a 	mov	r2,zero
    cb0c:	20000726 	beq	r4,zero,cb2c <__mulsi3+0x24>
    cb10:	20c0004c 	andi	r3,r4,1
    cb14:	2008d07a 	srli	r4,r4,1
    cb18:	18000126 	beq	r3,zero,cb20 <__mulsi3+0x18>
    cb1c:	1145883a 	add	r2,r2,r5
    cb20:	294b883a 	add	r5,r5,r5
    cb24:	203ffa1e 	bne	r4,zero,cb10 <__alt_data_end+0xfffb73e0>
    cb28:	f800283a 	ret
    cb2c:	f800283a 	ret

0000cb30 <__adddf3>:
    cb30:	02000434 	movhi	r8,16
    cb34:	423fffc4 	addi	r8,r8,-1
    cb38:	defffb04 	addi	sp,sp,-20
    cb3c:	2a12703a 	and	r9,r5,r8
    cb40:	2806d7fa 	srli	r3,r5,31
    cb44:	3a10703a 	and	r8,r7,r8
    cb48:	3804d53a 	srli	r2,r7,20
    cb4c:	3014d77a 	srli	r10,r6,29
    cb50:	dc000015 	stw	r16,0(sp)
    cb54:	481290fa 	slli	r9,r9,3
    cb58:	2820d53a 	srli	r16,r5,20
    cb5c:	401090fa 	slli	r8,r8,3
    cb60:	200ad77a 	srli	r5,r4,29
    cb64:	380ed7fa 	srli	r7,r7,31
    cb68:	dc800215 	stw	r18,8(sp)
    cb6c:	dc400115 	stw	r17,4(sp)
    cb70:	dfc00415 	stw	ra,16(sp)
    cb74:	dcc00315 	stw	r19,12(sp)
    cb78:	1c803fcc 	andi	r18,r3,255
    cb7c:	8401ffcc 	andi	r16,r16,2047
    cb80:	494ab03a 	or	r5,r9,r5
    cb84:	202290fa 	slli	r17,r4,3
    cb88:	1081ffcc 	andi	r2,r2,2047
    cb8c:	4290b03a 	or	r8,r8,r10
    cb90:	300c90fa 	slli	r6,r6,3
    cb94:	91c07026 	beq	r18,r7,cd58 <__adddf3+0x228>
    cb98:	8087c83a 	sub	r3,r16,r2
    cb9c:	00c0b30e 	bge	zero,r3,ce6c <__adddf3+0x33c>
    cba0:	10002a1e 	bne	r2,zero,cc4c <__adddf3+0x11c>
    cba4:	4184b03a 	or	r2,r8,r6
    cba8:	1000991e 	bne	r2,zero,ce10 <__adddf3+0x2e0>
    cbac:	888001cc 	andi	r2,r17,7
    cbb0:	10005b26 	beq	r2,zero,cd20 <__adddf3+0x1f0>
    cbb4:	88c003cc 	andi	r3,r17,15
    cbb8:	00800104 	movi	r2,4
    cbbc:	18805826 	beq	r3,r2,cd20 <__adddf3+0x1f0>
    cbc0:	89800104 	addi	r6,r17,4
    cbc4:	3463803a 	cmpltu	r17,r6,r17
    cbc8:	2c4b883a 	add	r5,r5,r17
    cbcc:	2880202c 	andhi	r2,r5,128
    cbd0:	9007883a 	mov	r3,r18
    cbd4:	3023883a 	mov	r17,r6
    cbd8:	10005426 	beq	r2,zero,cd2c <__adddf3+0x1fc>
    cbdc:	84000044 	addi	r16,r16,1
    cbe0:	0081ffc4 	movi	r2,2047
    cbe4:	8080c126 	beq	r16,r2,ceec <__adddf3+0x3bc>
    cbe8:	013fe034 	movhi	r4,65408
    cbec:	213fffc4 	addi	r4,r4,-1
    cbf0:	290a703a 	and	r5,r5,r4
    cbf4:	2804977a 	slli	r2,r5,29
    cbf8:	280a927a 	slli	r5,r5,9
    cbfc:	8822d0fa 	srli	r17,r17,3
    cc00:	8401ffcc 	andi	r16,r16,2047
    cc04:	2808d33a 	srli	r4,r5,12
    cc08:	1444b03a 	or	r2,r2,r17
    cc0c:	8401ffcc 	andi	r16,r16,2047
    cc10:	800a953a 	slli	r5,r16,20
    cc14:	18c03fcc 	andi	r3,r3,255
    cc18:	04000434 	movhi	r16,16
    cc1c:	180697fa 	slli	r3,r3,31
    cc20:	843fffc4 	addi	r16,r16,-1
    cc24:	2420703a 	and	r16,r4,r16
    cc28:	8160b03a 	or	r16,r16,r5
    cc2c:	80c6b03a 	or	r3,r16,r3
    cc30:	dfc00417 	ldw	ra,16(sp)
    cc34:	dcc00317 	ldw	r19,12(sp)
    cc38:	dc800217 	ldw	r18,8(sp)
    cc3c:	dc400117 	ldw	r17,4(sp)
    cc40:	dc000017 	ldw	r16,0(sp)
    cc44:	dec00504 	addi	sp,sp,20
    cc48:	f800283a 	ret
    cc4c:	0081ffc4 	movi	r2,2047
    cc50:	80bfd626 	beq	r16,r2,cbac <__alt_data_end+0xfffb747c>
    cc54:	42002034 	orhi	r8,r8,128
    cc58:	00800e04 	movi	r2,56
    cc5c:	10c0a616 	blt	r2,r3,cef8 <__adddf3+0x3c8>
    cc60:	008007c4 	movi	r2,31
    cc64:	10c0c916 	blt	r2,r3,cf8c <__adddf3+0x45c>
    cc68:	00800804 	movi	r2,32
    cc6c:	10c5c83a 	sub	r2,r2,r3
    cc70:	408e983a 	sll	r7,r8,r2
    cc74:	30c8d83a 	srl	r4,r6,r3
    cc78:	3084983a 	sll	r2,r6,r2
    cc7c:	40c6d83a 	srl	r3,r8,r3
    cc80:	390cb03a 	or	r6,r7,r4
    cc84:	1004c03a 	cmpne	r2,r2,zero
    cc88:	308cb03a 	or	r6,r6,r2
    cc8c:	898dc83a 	sub	r6,r17,r6
    cc90:	89a3803a 	cmpltu	r17,r17,r6
    cc94:	28cbc83a 	sub	r5,r5,r3
    cc98:	2c4bc83a 	sub	r5,r5,r17
    cc9c:	3023883a 	mov	r17,r6
    cca0:	2880202c 	andhi	r2,r5,128
    cca4:	10006d26 	beq	r2,zero,ce5c <__adddf3+0x32c>
    cca8:	04c02034 	movhi	r19,128
    ccac:	9cffffc4 	addi	r19,r19,-1
    ccb0:	2ce6703a 	and	r19,r5,r19
    ccb4:	98007e26 	beq	r19,zero,ceb0 <__adddf3+0x380>
    ccb8:	9809883a 	mov	r4,r19
    ccbc:	000f2c80 	call	f2c8 <__clzsi2>
    ccc0:	10fffe04 	addi	r3,r2,-8
    ccc4:	010007c4 	movi	r4,31
    ccc8:	20c07f16 	blt	r4,r3,cec8 <__adddf3+0x398>
    cccc:	01400a04 	movi	r5,40
    ccd0:	2885c83a 	sub	r2,r5,r2
    ccd4:	888ad83a 	srl	r5,r17,r2
    ccd8:	98e6983a 	sll	r19,r19,r3
    ccdc:	88e2983a 	sll	r17,r17,r3
    cce0:	2ce6b03a 	or	r19,r5,r19
    cce4:	1c007c16 	blt	r3,r16,ced8 <__adddf3+0x3a8>
    cce8:	1c21c83a 	sub	r16,r3,r16
    ccec:	81400044 	addi	r5,r16,1
    ccf0:	00c007c4 	movi	r3,31
    ccf4:	19409816 	blt	r3,r5,cf58 <__adddf3+0x428>
    ccf8:	1c21c83a 	sub	r16,r3,r16
    ccfc:	8c08983a 	sll	r4,r17,r16
    cd00:	8946d83a 	srl	r3,r17,r5
    cd04:	9c20983a 	sll	r16,r19,r16
    cd08:	2008c03a 	cmpne	r4,r4,zero
    cd0c:	994ad83a 	srl	r5,r19,r5
    cd10:	1c06b03a 	or	r3,r3,r16
    cd14:	1922b03a 	or	r17,r3,r4
    cd18:	0021883a 	mov	r16,zero
    cd1c:	003fa306 	br	cbac <__alt_data_end+0xfffb747c>
    cd20:	2880202c 	andhi	r2,r5,128
    cd24:	9007883a 	mov	r3,r18
    cd28:	103fac1e 	bne	r2,zero,cbdc <__alt_data_end+0xfffb74ac>
    cd2c:	2804977a 	slli	r2,r5,29
    cd30:	8822d0fa 	srli	r17,r17,3
    cd34:	0101ffc4 	movi	r4,2047
    cd38:	280ad0fa 	srli	r5,r5,3
    cd3c:	1444b03a 	or	r2,r2,r17
    cd40:	81002c26 	beq	r16,r4,cdf4 <__adddf3+0x2c4>
    cd44:	8120703a 	and	r16,r16,r4
    cd48:	01000434 	movhi	r4,16
    cd4c:	213fffc4 	addi	r4,r4,-1
    cd50:	2908703a 	and	r4,r5,r4
    cd54:	003fad06 	br	cc0c <__alt_data_end+0xfffb74dc>
    cd58:	8089c83a 	sub	r4,r16,r2
    cd5c:	01006a0e 	bge	zero,r4,cf08 <__adddf3+0x3d8>
    cd60:	10003326 	beq	r2,zero,ce30 <__adddf3+0x300>
    cd64:	0081ffc4 	movi	r2,2047
    cd68:	80bf9026 	beq	r16,r2,cbac <__alt_data_end+0xfffb747c>
    cd6c:	42002034 	orhi	r8,r8,128
    cd70:	00800e04 	movi	r2,56
    cd74:	1100b116 	blt	r2,r4,d03c <__adddf3+0x50c>
    cd78:	008007c4 	movi	r2,31
    cd7c:	1100e216 	blt	r2,r4,d108 <__adddf3+0x5d8>
    cd80:	00800804 	movi	r2,32
    cd84:	1105c83a 	sub	r2,r2,r4
    cd88:	4092983a 	sll	r9,r8,r2
    cd8c:	310ed83a 	srl	r7,r6,r4
    cd90:	3084983a 	sll	r2,r6,r2
    cd94:	4110d83a 	srl	r8,r8,r4
    cd98:	49ccb03a 	or	r6,r9,r7
    cd9c:	1004c03a 	cmpne	r2,r2,zero
    cda0:	308cb03a 	or	r6,r6,r2
    cda4:	344d883a 	add	r6,r6,r17
    cda8:	3463803a 	cmpltu	r17,r6,r17
    cdac:	414b883a 	add	r5,r8,r5
    cdb0:	2c4b883a 	add	r5,r5,r17
    cdb4:	3023883a 	mov	r17,r6
    cdb8:	2880202c 	andhi	r2,r5,128
    cdbc:	10002726 	beq	r2,zero,ce5c <__adddf3+0x32c>
    cdc0:	84000044 	addi	r16,r16,1
    cdc4:	0081ffc4 	movi	r2,2047
    cdc8:	8080ae26 	beq	r16,r2,d084 <__adddf3+0x554>
    cdcc:	00bfe034 	movhi	r2,65408
    cdd0:	10bfffc4 	addi	r2,r2,-1
    cdd4:	288a703a 	and	r5,r5,r2
    cdd8:	880cd07a 	srli	r6,r17,1
    cddc:	280897fa 	slli	r4,r5,31
    cde0:	88c0004c 	andi	r3,r17,1
    cde4:	30e2b03a 	or	r17,r6,r3
    cde8:	280ad07a 	srli	r5,r5,1
    cdec:	8922b03a 	or	r17,r17,r4
    cdf0:	003f6e06 	br	cbac <__alt_data_end+0xfffb747c>
    cdf4:	1148b03a 	or	r4,r2,r5
    cdf8:	20003c26 	beq	r4,zero,ceec <__adddf3+0x3bc>
    cdfc:	29000234 	orhi	r4,r5,8
    ce00:	01400434 	movhi	r5,16
    ce04:	297fffc4 	addi	r5,r5,-1
    ce08:	2148703a 	and	r4,r4,r5
    ce0c:	003f7f06 	br	cc0c <__alt_data_end+0xfffb74dc>
    ce10:	18ffffc4 	addi	r3,r3,-1
    ce14:	18004d1e 	bne	r3,zero,cf4c <__adddf3+0x41c>
    ce18:	898dc83a 	sub	r6,r17,r6
    ce1c:	89a3803a 	cmpltu	r17,r17,r6
    ce20:	2a0bc83a 	sub	r5,r5,r8
    ce24:	2c4bc83a 	sub	r5,r5,r17
    ce28:	3023883a 	mov	r17,r6
    ce2c:	003f9c06 	br	cca0 <__alt_data_end+0xfffb7570>
    ce30:	4184b03a 	or	r2,r8,r6
    ce34:	103f5d26 	beq	r2,zero,cbac <__alt_data_end+0xfffb747c>
    ce38:	213fffc4 	addi	r4,r4,-1
    ce3c:	203fd926 	beq	r4,zero,cda4 <__alt_data_end+0xfffb7674>
    ce40:	0081ffc4 	movi	r2,2047
    ce44:	80bfca1e 	bne	r16,r2,cd70 <__alt_data_end+0xfffb7640>
    ce48:	003f5806 	br	cbac <__alt_data_end+0xfffb747c>
    ce4c:	10c8b03a 	or	r4,r2,r3
    ce50:	20008b26 	beq	r4,zero,d080 <__adddf3+0x550>
    ce54:	100b883a 	mov	r5,r2
    ce58:	1823883a 	mov	r17,r3
    ce5c:	888001cc 	andi	r2,r17,7
    ce60:	103f541e 	bne	r2,zero,cbb4 <__alt_data_end+0xfffb7484>
    ce64:	9007883a 	mov	r3,r18
    ce68:	003fb006 	br	cd2c <__alt_data_end+0xfffb75fc>
    ce6c:	1800531e 	bne	r3,zero,cfbc <__adddf3+0x48c>
    ce70:	80800044 	addi	r2,r16,1
    ce74:	1081ffcc 	andi	r2,r2,2047
    ce78:	00c00044 	movi	r3,1
    ce7c:	1880990e 	bge	r3,r2,d0e4 <__adddf3+0x5b4>
    ce80:	8985c83a 	sub	r2,r17,r6
    ce84:	8887803a 	cmpltu	r3,r17,r2
    ce88:	2a27c83a 	sub	r19,r5,r8
    ce8c:	98e7c83a 	sub	r19,r19,r3
    ce90:	98c0202c 	andhi	r3,r19,128
    ce94:	18006226 	beq	r3,zero,d020 <__adddf3+0x4f0>
    ce98:	3463c83a 	sub	r17,r6,r17
    ce9c:	4151c83a 	sub	r8,r8,r5
    cea0:	344d803a 	cmpltu	r6,r6,r17
    cea4:	41a7c83a 	sub	r19,r8,r6
    cea8:	3825883a 	mov	r18,r7
    ceac:	983f821e 	bne	r19,zero,ccb8 <__alt_data_end+0xfffb7588>
    ceb0:	8809883a 	mov	r4,r17
    ceb4:	000f2c80 	call	f2c8 <__clzsi2>
    ceb8:	10800804 	addi	r2,r2,32
    cebc:	10fffe04 	addi	r3,r2,-8
    cec0:	010007c4 	movi	r4,31
    cec4:	20ff810e 	bge	r4,r3,cccc <__alt_data_end+0xfffb759c>
    cec8:	14fff604 	addi	r19,r2,-40
    cecc:	8ce6983a 	sll	r19,r17,r19
    ced0:	0023883a 	mov	r17,zero
    ced4:	1c3f840e 	bge	r3,r16,cce8 <__alt_data_end+0xfffb75b8>
    ced8:	017fe034 	movhi	r5,65408
    cedc:	297fffc4 	addi	r5,r5,-1
    cee0:	80e1c83a 	sub	r16,r16,r3
    cee4:	994a703a 	and	r5,r19,r5
    cee8:	003f3006 	br	cbac <__alt_data_end+0xfffb747c>
    ceec:	0009883a 	mov	r4,zero
    cef0:	0005883a 	mov	r2,zero
    cef4:	003f4506 	br	cc0c <__alt_data_end+0xfffb74dc>
    cef8:	418cb03a 	or	r6,r8,r6
    cefc:	300cc03a 	cmpne	r6,r6,zero
    cf00:	0007883a 	mov	r3,zero
    cf04:	003f6106 	br	cc8c <__alt_data_end+0xfffb755c>
    cf08:	2000921e 	bne	r4,zero,d154 <__adddf3+0x624>
    cf0c:	80800044 	addi	r2,r16,1
    cf10:	11c1ffcc 	andi	r7,r2,2047
    cf14:	01000044 	movi	r4,1
    cf18:	21c0610e 	bge	r4,r7,d0a0 <__adddf3+0x570>
    cf1c:	0101ffc4 	movi	r4,2047
    cf20:	1100a326 	beq	r2,r4,d1b0 <__adddf3+0x680>
    cf24:	344d883a 	add	r6,r6,r17
    cf28:	3463803a 	cmpltu	r17,r6,r17
    cf2c:	414b883a 	add	r5,r8,r5
    cf30:	2c4b883a 	add	r5,r5,r17
    cf34:	282297fa 	slli	r17,r5,31
    cf38:	300cd07a 	srli	r6,r6,1
    cf3c:	280ad07a 	srli	r5,r5,1
    cf40:	1021883a 	mov	r16,r2
    cf44:	89a2b03a 	or	r17,r17,r6
    cf48:	003f1806 	br	cbac <__alt_data_end+0xfffb747c>
    cf4c:	0081ffc4 	movi	r2,2047
    cf50:	80bf411e 	bne	r16,r2,cc58 <__alt_data_end+0xfffb7528>
    cf54:	003f1506 	br	cbac <__alt_data_end+0xfffb747c>
    cf58:	80bff844 	addi	r2,r16,-31
    cf5c:	00c00804 	movi	r3,32
    cf60:	9884d83a 	srl	r2,r19,r2
    cf64:	28c04a26 	beq	r5,r3,d090 <__adddf3+0x560>
    cf68:	00c00fc4 	movi	r3,63
    cf6c:	1c21c83a 	sub	r16,r3,r16
    cf70:	9c26983a 	sll	r19,r19,r16
    cf74:	9c62b03a 	or	r17,r19,r17
    cf78:	8822c03a 	cmpne	r17,r17,zero
    cf7c:	88a2b03a 	or	r17,r17,r2
    cf80:	000b883a 	mov	r5,zero
    cf84:	0021883a 	mov	r16,zero
    cf88:	003fb406 	br	ce5c <__alt_data_end+0xfffb772c>
    cf8c:	18bff804 	addi	r2,r3,-32
    cf90:	01000804 	movi	r4,32
    cf94:	4084d83a 	srl	r2,r8,r2
    cf98:	19003f26 	beq	r3,r4,d098 <__adddf3+0x568>
    cf9c:	01001004 	movi	r4,64
    cfa0:	20c7c83a 	sub	r3,r4,r3
    cfa4:	40d0983a 	sll	r8,r8,r3
    cfa8:	418cb03a 	or	r6,r8,r6
    cfac:	300cc03a 	cmpne	r6,r6,zero
    cfb0:	308cb03a 	or	r6,r6,r2
    cfb4:	0007883a 	mov	r3,zero
    cfb8:	003f3406 	br	cc8c <__alt_data_end+0xfffb755c>
    cfbc:	80002326 	beq	r16,zero,d04c <__adddf3+0x51c>
    cfc0:	0101ffc4 	movi	r4,2047
    cfc4:	11005e26 	beq	r2,r4,d140 <__adddf3+0x610>
    cfc8:	00c7c83a 	sub	r3,zero,r3
    cfcc:	29402034 	orhi	r5,r5,128
    cfd0:	01000e04 	movi	r4,56
    cfd4:	20c07216 	blt	r4,r3,d1a0 <__adddf3+0x670>
    cfd8:	010007c4 	movi	r4,31
    cfdc:	20c0ce16 	blt	r4,r3,d318 <__adddf3+0x7e8>
    cfe0:	01000804 	movi	r4,32
    cfe4:	20c9c83a 	sub	r4,r4,r3
    cfe8:	2914983a 	sll	r10,r5,r4
    cfec:	88d2d83a 	srl	r9,r17,r3
    cff0:	8908983a 	sll	r4,r17,r4
    cff4:	28c6d83a 	srl	r3,r5,r3
    cff8:	5262b03a 	or	r17,r10,r9
    cffc:	2008c03a 	cmpne	r4,r4,zero
    d000:	8922b03a 	or	r17,r17,r4
    d004:	3463c83a 	sub	r17,r6,r17
    d008:	40c7c83a 	sub	r3,r8,r3
    d00c:	344d803a 	cmpltu	r6,r6,r17
    d010:	198bc83a 	sub	r5,r3,r6
    d014:	1021883a 	mov	r16,r2
    d018:	3825883a 	mov	r18,r7
    d01c:	003f2006 	br	cca0 <__alt_data_end+0xfffb7570>
    d020:	9886b03a 	or	r3,r19,r2
    d024:	1800141e 	bne	r3,zero,d078 <__adddf3+0x548>
    d028:	0007883a 	mov	r3,zero
    d02c:	000b883a 	mov	r5,zero
    d030:	0023883a 	mov	r17,zero
    d034:	0021883a 	mov	r16,zero
    d038:	003f3c06 	br	cd2c <__alt_data_end+0xfffb75fc>
    d03c:	418cb03a 	or	r6,r8,r6
    d040:	300cc03a 	cmpne	r6,r6,zero
    d044:	0011883a 	mov	r8,zero
    d048:	003f5606 	br	cda4 <__alt_data_end+0xfffb7674>
    d04c:	2c48b03a 	or	r4,r5,r17
    d050:	20003b26 	beq	r4,zero,d140 <__adddf3+0x610>
    d054:	00c6303a 	nor	r3,zero,r3
    d058:	1800371e 	bne	r3,zero,d138 <__adddf3+0x608>
    d05c:	3463c83a 	sub	r17,r6,r17
    d060:	414bc83a 	sub	r5,r8,r5
    d064:	344d803a 	cmpltu	r6,r6,r17
    d068:	298bc83a 	sub	r5,r5,r6
    d06c:	1021883a 	mov	r16,r2
    d070:	3825883a 	mov	r18,r7
    d074:	003f0a06 	br	cca0 <__alt_data_end+0xfffb7570>
    d078:	1023883a 	mov	r17,r2
    d07c:	003f0d06 	br	ccb4 <__alt_data_end+0xfffb7584>
    d080:	0007883a 	mov	r3,zero
    d084:	000b883a 	mov	r5,zero
    d088:	0023883a 	mov	r17,zero
    d08c:	003f2706 	br	cd2c <__alt_data_end+0xfffb75fc>
    d090:	0027883a 	mov	r19,zero
    d094:	003fb706 	br	cf74 <__alt_data_end+0xfffb7844>
    d098:	0011883a 	mov	r8,zero
    d09c:	003fc206 	br	cfa8 <__alt_data_end+0xfffb7878>
    d0a0:	2c44b03a 	or	r2,r5,r17
    d0a4:	8000871e 	bne	r16,zero,d2c4 <__adddf3+0x794>
    d0a8:	1000b126 	beq	r2,zero,d370 <__adddf3+0x840>
    d0ac:	4184b03a 	or	r2,r8,r6
    d0b0:	103ebe26 	beq	r2,zero,cbac <__alt_data_end+0xfffb747c>
    d0b4:	3445883a 	add	r2,r6,r17
    d0b8:	1463803a 	cmpltu	r17,r2,r17
    d0bc:	414b883a 	add	r5,r8,r5
    d0c0:	2c4b883a 	add	r5,r5,r17
    d0c4:	28c0202c 	andhi	r3,r5,128
    d0c8:	1023883a 	mov	r17,r2
    d0cc:	183f6326 	beq	r3,zero,ce5c <__alt_data_end+0xfffb772c>
    d0d0:	00bfe034 	movhi	r2,65408
    d0d4:	10bfffc4 	addi	r2,r2,-1
    d0d8:	2021883a 	mov	r16,r4
    d0dc:	288a703a 	and	r5,r5,r2
    d0e0:	003eb206 	br	cbac <__alt_data_end+0xfffb747c>
    d0e4:	2c44b03a 	or	r2,r5,r17
    d0e8:	8000251e 	bne	r16,zero,d180 <__adddf3+0x650>
    d0ec:	10004b1e 	bne	r2,zero,d21c <__adddf3+0x6ec>
    d0f0:	4184b03a 	or	r2,r8,r6
    d0f4:	103fe226 	beq	r2,zero,d080 <__alt_data_end+0xfffb7950>
    d0f8:	400b883a 	mov	r5,r8
    d0fc:	3023883a 	mov	r17,r6
    d100:	3825883a 	mov	r18,r7
    d104:	003ea906 	br	cbac <__alt_data_end+0xfffb747c>
    d108:	20bff804 	addi	r2,r4,-32
    d10c:	01c00804 	movi	r7,32
    d110:	4084d83a 	srl	r2,r8,r2
    d114:	21c07e26 	beq	r4,r7,d310 <__adddf3+0x7e0>
    d118:	01c01004 	movi	r7,64
    d11c:	3909c83a 	sub	r4,r7,r4
    d120:	4110983a 	sll	r8,r8,r4
    d124:	418cb03a 	or	r6,r8,r6
    d128:	300cc03a 	cmpne	r6,r6,zero
    d12c:	308cb03a 	or	r6,r6,r2
    d130:	0011883a 	mov	r8,zero
    d134:	003f1b06 	br	cda4 <__alt_data_end+0xfffb7674>
    d138:	0101ffc4 	movi	r4,2047
    d13c:	113fa41e 	bne	r2,r4,cfd0 <__alt_data_end+0xfffb78a0>
    d140:	400b883a 	mov	r5,r8
    d144:	3023883a 	mov	r17,r6
    d148:	1021883a 	mov	r16,r2
    d14c:	3825883a 	mov	r18,r7
    d150:	003e9606 	br	cbac <__alt_data_end+0xfffb747c>
    d154:	80001a1e 	bne	r16,zero,d1c0 <__adddf3+0x690>
    d158:	2c4eb03a 	or	r7,r5,r17
    d15c:	38005526 	beq	r7,zero,d2b4 <__adddf3+0x784>
    d160:	0108303a 	nor	r4,zero,r4
    d164:	2000511e 	bne	r4,zero,d2ac <__adddf3+0x77c>
    d168:	89a3883a 	add	r17,r17,r6
    d16c:	414b883a 	add	r5,r8,r5
    d170:	898d803a 	cmpltu	r6,r17,r6
    d174:	298b883a 	add	r5,r5,r6
    d178:	1021883a 	mov	r16,r2
    d17c:	003f0e06 	br	cdb8 <__alt_data_end+0xfffb7688>
    d180:	1000341e 	bne	r2,zero,d254 <__adddf3+0x724>
    d184:	4184b03a 	or	r2,r8,r6
    d188:	10006f26 	beq	r2,zero,d348 <__adddf3+0x818>
    d18c:	400b883a 	mov	r5,r8
    d190:	3023883a 	mov	r17,r6
    d194:	3825883a 	mov	r18,r7
    d198:	0401ffc4 	movi	r16,2047
    d19c:	003e8306 	br	cbac <__alt_data_end+0xfffb747c>
    d1a0:	2c62b03a 	or	r17,r5,r17
    d1a4:	8822c03a 	cmpne	r17,r17,zero
    d1a8:	0007883a 	mov	r3,zero
    d1ac:	003f9506 	br	d004 <__alt_data_end+0xfffb78d4>
    d1b0:	1021883a 	mov	r16,r2
    d1b4:	000b883a 	mov	r5,zero
    d1b8:	0023883a 	mov	r17,zero
    d1bc:	003edb06 	br	cd2c <__alt_data_end+0xfffb75fc>
    d1c0:	01c1ffc4 	movi	r7,2047
    d1c4:	11c03b26 	beq	r2,r7,d2b4 <__adddf3+0x784>
    d1c8:	0109c83a 	sub	r4,zero,r4
    d1cc:	29402034 	orhi	r5,r5,128
    d1d0:	01c00e04 	movi	r7,56
    d1d4:	39006216 	blt	r7,r4,d360 <__adddf3+0x830>
    d1d8:	01c007c4 	movi	r7,31
    d1dc:	39006b16 	blt	r7,r4,d38c <__adddf3+0x85c>
    d1e0:	01c00804 	movi	r7,32
    d1e4:	390fc83a 	sub	r7,r7,r4
    d1e8:	29d4983a 	sll	r10,r5,r7
    d1ec:	8912d83a 	srl	r9,r17,r4
    d1f0:	89ce983a 	sll	r7,r17,r7
    d1f4:	2908d83a 	srl	r4,r5,r4
    d1f8:	5262b03a 	or	r17,r10,r9
    d1fc:	380ac03a 	cmpne	r5,r7,zero
    d200:	8962b03a 	or	r17,r17,r5
    d204:	89a3883a 	add	r17,r17,r6
    d208:	2211883a 	add	r8,r4,r8
    d20c:	898d803a 	cmpltu	r6,r17,r6
    d210:	418b883a 	add	r5,r8,r6
    d214:	1021883a 	mov	r16,r2
    d218:	003ee706 	br	cdb8 <__alt_data_end+0xfffb7688>
    d21c:	4184b03a 	or	r2,r8,r6
    d220:	103e6226 	beq	r2,zero,cbac <__alt_data_end+0xfffb747c>
    d224:	8987c83a 	sub	r3,r17,r6
    d228:	88c9803a 	cmpltu	r4,r17,r3
    d22c:	2a05c83a 	sub	r2,r5,r8
    d230:	1105c83a 	sub	r2,r2,r4
    d234:	1100202c 	andhi	r4,r2,128
    d238:	203f0426 	beq	r4,zero,ce4c <__alt_data_end+0xfffb771c>
    d23c:	3463c83a 	sub	r17,r6,r17
    d240:	414bc83a 	sub	r5,r8,r5
    d244:	344d803a 	cmpltu	r6,r6,r17
    d248:	298bc83a 	sub	r5,r5,r6
    d24c:	3825883a 	mov	r18,r7
    d250:	003e5606 	br	cbac <__alt_data_end+0xfffb747c>
    d254:	4184b03a 	or	r2,r8,r6
    d258:	10002b26 	beq	r2,zero,d308 <__adddf3+0x7d8>
    d25c:	2804d0fa 	srli	r2,r5,3
    d260:	8822d0fa 	srli	r17,r17,3
    d264:	280a977a 	slli	r5,r5,29
    d268:	10c0022c 	andhi	r3,r2,8
    d26c:	2c62b03a 	or	r17,r5,r17
    d270:	18000826 	beq	r3,zero,d294 <__adddf3+0x764>
    d274:	4008d0fa 	srli	r4,r8,3
    d278:	20c0022c 	andhi	r3,r4,8
    d27c:	1800051e 	bne	r3,zero,d294 <__adddf3+0x764>
    d280:	300cd0fa 	srli	r6,r6,3
    d284:	4010977a 	slli	r8,r8,29
    d288:	2005883a 	mov	r2,r4
    d28c:	3825883a 	mov	r18,r7
    d290:	41a2b03a 	or	r17,r8,r6
    d294:	880ad77a 	srli	r5,r17,29
    d298:	100490fa 	slli	r2,r2,3
    d29c:	882290fa 	slli	r17,r17,3
    d2a0:	0401ffc4 	movi	r16,2047
    d2a4:	288ab03a 	or	r5,r5,r2
    d2a8:	003e4006 	br	cbac <__alt_data_end+0xfffb747c>
    d2ac:	01c1ffc4 	movi	r7,2047
    d2b0:	11ffc71e 	bne	r2,r7,d1d0 <__alt_data_end+0xfffb7aa0>
    d2b4:	400b883a 	mov	r5,r8
    d2b8:	3023883a 	mov	r17,r6
    d2bc:	1021883a 	mov	r16,r2
    d2c0:	003e3a06 	br	cbac <__alt_data_end+0xfffb747c>
    d2c4:	10002d26 	beq	r2,zero,d37c <__adddf3+0x84c>
    d2c8:	4184b03a 	or	r2,r8,r6
    d2cc:	10000e26 	beq	r2,zero,d308 <__adddf3+0x7d8>
    d2d0:	2804d0fa 	srli	r2,r5,3
    d2d4:	8822d0fa 	srli	r17,r17,3
    d2d8:	280a977a 	slli	r5,r5,29
    d2dc:	10c0022c 	andhi	r3,r2,8
    d2e0:	2c62b03a 	or	r17,r5,r17
    d2e4:	183feb26 	beq	r3,zero,d294 <__alt_data_end+0xfffb7b64>
    d2e8:	4008d0fa 	srli	r4,r8,3
    d2ec:	20c0022c 	andhi	r3,r4,8
    d2f0:	183fe81e 	bne	r3,zero,d294 <__alt_data_end+0xfffb7b64>
    d2f4:	300cd0fa 	srli	r6,r6,3
    d2f8:	4010977a 	slli	r8,r8,29
    d2fc:	2005883a 	mov	r2,r4
    d300:	41a2b03a 	or	r17,r8,r6
    d304:	003fe306 	br	d294 <__alt_data_end+0xfffb7b64>
    d308:	0401ffc4 	movi	r16,2047
    d30c:	003e2706 	br	cbac <__alt_data_end+0xfffb747c>
    d310:	0011883a 	mov	r8,zero
    d314:	003f8306 	br	d124 <__alt_data_end+0xfffb79f4>
    d318:	193ff804 	addi	r4,r3,-32
    d31c:	02400804 	movi	r9,32
    d320:	2908d83a 	srl	r4,r5,r4
    d324:	1a402526 	beq	r3,r9,d3bc <__adddf3+0x88c>
    d328:	02401004 	movi	r9,64
    d32c:	48c7c83a 	sub	r3,r9,r3
    d330:	28ca983a 	sll	r5,r5,r3
    d334:	2c62b03a 	or	r17,r5,r17
    d338:	8822c03a 	cmpne	r17,r17,zero
    d33c:	8922b03a 	or	r17,r17,r4
    d340:	0007883a 	mov	r3,zero
    d344:	003f2f06 	br	d004 <__alt_data_end+0xfffb78d4>
    d348:	01402034 	movhi	r5,128
    d34c:	0007883a 	mov	r3,zero
    d350:	297fffc4 	addi	r5,r5,-1
    d354:	047ffe04 	movi	r17,-8
    d358:	0401ffc4 	movi	r16,2047
    d35c:	003e7306 	br	cd2c <__alt_data_end+0xfffb75fc>
    d360:	2c62b03a 	or	r17,r5,r17
    d364:	8822c03a 	cmpne	r17,r17,zero
    d368:	0009883a 	mov	r4,zero
    d36c:	003fa506 	br	d204 <__alt_data_end+0xfffb7ad4>
    d370:	400b883a 	mov	r5,r8
    d374:	3023883a 	mov	r17,r6
    d378:	003e0c06 	br	cbac <__alt_data_end+0xfffb747c>
    d37c:	400b883a 	mov	r5,r8
    d380:	3023883a 	mov	r17,r6
    d384:	0401ffc4 	movi	r16,2047
    d388:	003e0806 	br	cbac <__alt_data_end+0xfffb747c>
    d38c:	21fff804 	addi	r7,r4,-32
    d390:	02400804 	movi	r9,32
    d394:	29ced83a 	srl	r7,r5,r7
    d398:	22400a26 	beq	r4,r9,d3c4 <__adddf3+0x894>
    d39c:	02401004 	movi	r9,64
    d3a0:	4909c83a 	sub	r4,r9,r4
    d3a4:	290a983a 	sll	r5,r5,r4
    d3a8:	2c62b03a 	or	r17,r5,r17
    d3ac:	8822c03a 	cmpne	r17,r17,zero
    d3b0:	89e2b03a 	or	r17,r17,r7
    d3b4:	0009883a 	mov	r4,zero
    d3b8:	003f9206 	br	d204 <__alt_data_end+0xfffb7ad4>
    d3bc:	000b883a 	mov	r5,zero
    d3c0:	003fdc06 	br	d334 <__alt_data_end+0xfffb7c04>
    d3c4:	000b883a 	mov	r5,zero
    d3c8:	003ff706 	br	d3a8 <__alt_data_end+0xfffb7c78>

0000d3cc <__divdf3>:
    d3cc:	defff004 	addi	sp,sp,-64
    d3d0:	dc800815 	stw	r18,32(sp)
    d3d4:	2824d53a 	srli	r18,r5,20
    d3d8:	dd800c15 	stw	r22,48(sp)
    d3dc:	282cd7fa 	srli	r22,r5,31
    d3e0:	dc000615 	stw	r16,24(sp)
    d3e4:	04000434 	movhi	r16,16
    d3e8:	df000e15 	stw	fp,56(sp)
    d3ec:	dd000a15 	stw	r20,40(sp)
    d3f0:	dcc00915 	stw	r19,36(sp)
    d3f4:	dc400715 	stw	r17,28(sp)
    d3f8:	843fffc4 	addi	r16,r16,-1
    d3fc:	dfc00f15 	stw	ra,60(sp)
    d400:	ddc00d15 	stw	r23,52(sp)
    d404:	dd400b15 	stw	r21,44(sp)
    d408:	9481ffcc 	andi	r18,r18,2047
    d40c:	2029883a 	mov	r20,r4
    d410:	2027883a 	mov	r19,r4
    d414:	2c22703a 	and	r17,r5,r16
    d418:	b7003fcc 	andi	fp,r22,255
    d41c:	90005e26 	beq	r18,zero,d598 <__divdf3+0x1cc>
    d420:	0081ffc4 	movi	r2,2047
    d424:	90803526 	beq	r18,r2,d4fc <__divdf3+0x130>
    d428:	8c000434 	orhi	r16,r17,16
    d42c:	2004d77a 	srli	r2,r4,29
    d430:	802090fa 	slli	r16,r16,3
    d434:	202690fa 	slli	r19,r4,3
    d438:	94bf0044 	addi	r18,r18,-1023
    d43c:	80a2b03a 	or	r17,r16,r2
    d440:	0029883a 	mov	r20,zero
    d444:	0011883a 	mov	r8,zero
    d448:	380ad53a 	srli	r5,r7,20
    d44c:	382ed7fa 	srli	r23,r7,31
    d450:	04000434 	movhi	r16,16
    d454:	843fffc4 	addi	r16,r16,-1
    d458:	2941ffcc 	andi	r5,r5,2047
    d45c:	302b883a 	mov	r21,r6
    d460:	3c20703a 	and	r16,r7,r16
    d464:	ba403fcc 	andi	r9,r23,255
    d468:	28006726 	beq	r5,zero,d608 <__divdf3+0x23c>
    d46c:	0081ffc4 	movi	r2,2047
    d470:	28805f26 	beq	r5,r2,d5f0 <__divdf3+0x224>
    d474:	84000434 	orhi	r16,r16,16
    d478:	3004d77a 	srli	r2,r6,29
    d47c:	802090fa 	slli	r16,r16,3
    d480:	302a90fa 	slli	r21,r6,3
    d484:	297f0044 	addi	r5,r5,-1023
    d488:	80a0b03a 	or	r16,r16,r2
    d48c:	000f883a 	mov	r7,zero
    d490:	3d06b03a 	or	r3,r7,r20
    d494:	180690ba 	slli	r3,r3,2
    d498:	00800074 	movhi	r2,1
    d49c:	10b52f04 	addi	r2,r2,-11076
    d4a0:	1885883a 	add	r2,r3,r2
    d4a4:	10800017 	ldw	r2,0(r2)
    d4a8:	b5c8f03a 	xor	r4,r22,r23
    d4ac:	200d883a 	mov	r6,r4
    d4b0:	25003fcc 	andi	r20,r4,255
    d4b4:	9165c83a 	sub	r18,r18,r5
    d4b8:	1000683a 	jmp	r2
    d4bc:	0000d704 	movi	zero,860
    d4c0:	0000d534 	movhi	zero,852
    d4c4:	0000d6c8 	cmpgei	zero,zero,859
    d4c8:	0000d518 	cmpnei	zero,zero,852
    d4cc:	0000d6c8 	cmpgei	zero,zero,859
    d4d0:	0000d69c 	xori	zero,zero,858
    d4d4:	0000d6c8 	cmpgei	zero,zero,859
    d4d8:	0000d518 	cmpnei	zero,zero,852
    d4dc:	0000d534 	movhi	zero,852
    d4e0:	0000d534 	movhi	zero,852
    d4e4:	0000d69c 	xori	zero,zero,858
    d4e8:	0000d518 	cmpnei	zero,zero,852
    d4ec:	0000d528 	cmpgeui	zero,zero,852
    d4f0:	0000d528 	cmpgeui	zero,zero,852
    d4f4:	0000d528 	cmpgeui	zero,zero,852
    d4f8:	0000d6d8 	cmpnei	zero,zero,859
    d4fc:	8904b03a 	or	r2,r17,r4
    d500:	1000631e 	bne	r2,zero,d690 <__divdf3+0x2c4>
    d504:	05000204 	movi	r20,8
    d508:	0023883a 	mov	r17,zero
    d50c:	0027883a 	mov	r19,zero
    d510:	02000084 	movi	r8,2
    d514:	003fcc06 	br	d448 <__alt_data_end+0xfffb7d18>
    d518:	8023883a 	mov	r17,r16
    d51c:	a827883a 	mov	r19,r21
    d520:	4839883a 	mov	fp,r9
    d524:	3811883a 	mov	r8,r7
    d528:	00800084 	movi	r2,2
    d52c:	4081531e 	bne	r8,r2,da7c <__divdf3+0x6b0>
    d530:	e029883a 	mov	r20,fp
    d534:	a180004c 	andi	r6,r20,1
    d538:	0201ffc4 	movi	r8,2047
    d53c:	000b883a 	mov	r5,zero
    d540:	0027883a 	mov	r19,zero
    d544:	4010953a 	slli	r8,r8,20
    d548:	30c03fcc 	andi	r3,r6,255
    d54c:	04000434 	movhi	r16,16
    d550:	180697fa 	slli	r3,r3,31
    d554:	843fffc4 	addi	r16,r16,-1
    d558:	2c20703a 	and	r16,r5,r16
    d55c:	8220b03a 	or	r16,r16,r8
    d560:	80c6b03a 	or	r3,r16,r3
    d564:	9805883a 	mov	r2,r19
    d568:	dfc00f17 	ldw	ra,60(sp)
    d56c:	df000e17 	ldw	fp,56(sp)
    d570:	ddc00d17 	ldw	r23,52(sp)
    d574:	dd800c17 	ldw	r22,48(sp)
    d578:	dd400b17 	ldw	r21,44(sp)
    d57c:	dd000a17 	ldw	r20,40(sp)
    d580:	dcc00917 	ldw	r19,36(sp)
    d584:	dc800817 	ldw	r18,32(sp)
    d588:	dc400717 	ldw	r17,28(sp)
    d58c:	dc000617 	ldw	r16,24(sp)
    d590:	dec01004 	addi	sp,sp,64
    d594:	f800283a 	ret
    d598:	8904b03a 	or	r2,r17,r4
    d59c:	10003726 	beq	r2,zero,d67c <__divdf3+0x2b0>
    d5a0:	88014d26 	beq	r17,zero,dad8 <__divdf3+0x70c>
    d5a4:	8809883a 	mov	r4,r17
    d5a8:	d9800215 	stw	r6,8(sp)
    d5ac:	d9c00515 	stw	r7,20(sp)
    d5b0:	000f2c80 	call	f2c8 <__clzsi2>
    d5b4:	d9800217 	ldw	r6,8(sp)
    d5b8:	d9c00517 	ldw	r7,20(sp)
    d5bc:	1007883a 	mov	r3,r2
    d5c0:	01000a04 	movi	r4,40
    d5c4:	1cfffe04 	addi	r19,r3,-8
    d5c8:	20c9c83a 	sub	r4,r4,r3
    d5cc:	8cca983a 	sll	r5,r17,r19
    d5d0:	a108d83a 	srl	r4,r20,r4
    d5d4:	a4e6983a 	sll	r19,r20,r19
    d5d8:	2162b03a 	or	r17,r4,r5
    d5dc:	04bf0344 	movi	r18,-1011
    d5e0:	90e5c83a 	sub	r18,r18,r3
    d5e4:	0029883a 	mov	r20,zero
    d5e8:	0011883a 	mov	r8,zero
    d5ec:	003f9606 	br	d448 <__alt_data_end+0xfffb7d18>
    d5f0:	8184b03a 	or	r2,r16,r6
    d5f4:	10001f1e 	bne	r2,zero,d674 <__divdf3+0x2a8>
    d5f8:	0021883a 	mov	r16,zero
    d5fc:	002b883a 	mov	r21,zero
    d600:	01c00084 	movi	r7,2
    d604:	003fa206 	br	d490 <__alt_data_end+0xfffb7d60>
    d608:	8184b03a 	or	r2,r16,r6
    d60c:	10001526 	beq	r2,zero,d664 <__divdf3+0x298>
    d610:	80013d26 	beq	r16,zero,db08 <__divdf3+0x73c>
    d614:	8009883a 	mov	r4,r16
    d618:	d9800215 	stw	r6,8(sp)
    d61c:	da000315 	stw	r8,12(sp)
    d620:	da400415 	stw	r9,16(sp)
    d624:	000f2c80 	call	f2c8 <__clzsi2>
    d628:	d9800217 	ldw	r6,8(sp)
    d62c:	da000317 	ldw	r8,12(sp)
    d630:	da400417 	ldw	r9,16(sp)
    d634:	1007883a 	mov	r3,r2
    d638:	01000a04 	movi	r4,40
    d63c:	1d7ffe04 	addi	r21,r3,-8
    d640:	20c9c83a 	sub	r4,r4,r3
    d644:	8560983a 	sll	r16,r16,r21
    d648:	3108d83a 	srl	r4,r6,r4
    d64c:	356a983a 	sll	r21,r6,r21
    d650:	2420b03a 	or	r16,r4,r16
    d654:	017f0344 	movi	r5,-1011
    d658:	28cbc83a 	sub	r5,r5,r3
    d65c:	000f883a 	mov	r7,zero
    d660:	003f8b06 	br	d490 <__alt_data_end+0xfffb7d60>
    d664:	0021883a 	mov	r16,zero
    d668:	002b883a 	mov	r21,zero
    d66c:	01c00044 	movi	r7,1
    d670:	003f8706 	br	d490 <__alt_data_end+0xfffb7d60>
    d674:	01c000c4 	movi	r7,3
    d678:	003f8506 	br	d490 <__alt_data_end+0xfffb7d60>
    d67c:	05000104 	movi	r20,4
    d680:	0023883a 	mov	r17,zero
    d684:	0027883a 	mov	r19,zero
    d688:	02000044 	movi	r8,1
    d68c:	003f6e06 	br	d448 <__alt_data_end+0xfffb7d18>
    d690:	05000304 	movi	r20,12
    d694:	020000c4 	movi	r8,3
    d698:	003f6b06 	br	d448 <__alt_data_end+0xfffb7d18>
    d69c:	01400434 	movhi	r5,16
    d6a0:	000d883a 	mov	r6,zero
    d6a4:	297fffc4 	addi	r5,r5,-1
    d6a8:	04ffffc4 	movi	r19,-1
    d6ac:	0201ffc4 	movi	r8,2047
    d6b0:	003fa406 	br	d544 <__alt_data_end+0xfffb7e14>
    d6b4:	043f0084 	movi	r16,-1022
    d6b8:	84a1c83a 	sub	r16,r16,r18
    d6bc:	00800e04 	movi	r2,56
    d6c0:	14014d0e 	bge	r2,r16,dbf8 <__divdf3+0x82c>
    d6c4:	a180004c 	andi	r6,r20,1
    d6c8:	0011883a 	mov	r8,zero
    d6cc:	000b883a 	mov	r5,zero
    d6d0:	0027883a 	mov	r19,zero
    d6d4:	003f9b06 	br	d544 <__alt_data_end+0xfffb7e14>
    d6d8:	8880022c 	andhi	r2,r17,8
    d6dc:	1000f026 	beq	r2,zero,daa0 <__divdf3+0x6d4>
    d6e0:	8080022c 	andhi	r2,r16,8
    d6e4:	1000ee1e 	bne	r2,zero,daa0 <__divdf3+0x6d4>
    d6e8:	00800434 	movhi	r2,16
    d6ec:	81400234 	orhi	r5,r16,8
    d6f0:	10bfffc4 	addi	r2,r2,-1
    d6f4:	b80d883a 	mov	r6,r23
    d6f8:	288a703a 	and	r5,r5,r2
    d6fc:	a827883a 	mov	r19,r21
    d700:	003fea06 	br	d6ac <__alt_data_end+0xfffb7f7c>
    d704:	84411c36 	bltu	r16,r17,db78 <__divdf3+0x7ac>
    d708:	8c011a26 	beq	r17,r16,db74 <__divdf3+0x7a8>
    d70c:	94bfffc4 	addi	r18,r18,-1
    d710:	dcc00015 	stw	r19,0(sp)
    d714:	8811883a 	mov	r8,r17
    d718:	002d883a 	mov	r22,zero
    d71c:	a80cd63a 	srli	r6,r21,24
    d720:	8020923a 	slli	r16,r16,8
    d724:	a82a923a 	slli	r21,r21,8
    d728:	4009883a 	mov	r4,r8
    d72c:	342eb03a 	or	r23,r6,r16
    d730:	dd400115 	stw	r21,4(sp)
    d734:	b82ad43a 	srli	r21,r23,16
    d738:	da000315 	stw	r8,12(sp)
    d73c:	bcffffcc 	andi	r19,r23,65535
    d740:	a80b883a 	mov	r5,r21
    d744:	000caf80 	call	caf8 <__udivsi3>
    d748:	1009883a 	mov	r4,r2
    d74c:	980b883a 	mov	r5,r19
    d750:	1023883a 	mov	r17,r2
    d754:	000cb080 	call	cb08 <__mulsi3>
    d758:	da000317 	ldw	r8,12(sp)
    d75c:	a80b883a 	mov	r5,r21
    d760:	1039883a 	mov	fp,r2
    d764:	4009883a 	mov	r4,r8
    d768:	000cb000 	call	cb00 <__umodsi3>
    d76c:	d8c00017 	ldw	r3,0(sp)
    d770:	1004943a 	slli	r2,r2,16
    d774:	1810d43a 	srli	r8,r3,16
    d778:	120eb03a 	or	r7,r2,r8
    d77c:	3f00062e 	bgeu	r7,fp,d798 <__divdf3+0x3cc>
    d780:	3dcf883a 	add	r7,r7,r23
    d784:	88bfffc4 	addi	r2,r17,-1
    d788:	3dc10a36 	bltu	r7,r23,dbb4 <__divdf3+0x7e8>
    d78c:	3f01092e 	bgeu	r7,fp,dbb4 <__divdf3+0x7e8>
    d790:	8c7fff84 	addi	r17,r17,-2
    d794:	3dcf883a 	add	r7,r7,r23
    d798:	3f39c83a 	sub	fp,r7,fp
    d79c:	e009883a 	mov	r4,fp
    d7a0:	a80b883a 	mov	r5,r21
    d7a4:	000caf80 	call	caf8 <__udivsi3>
    d7a8:	1009883a 	mov	r4,r2
    d7ac:	980b883a 	mov	r5,r19
    d7b0:	1021883a 	mov	r16,r2
    d7b4:	000cb080 	call	cb08 <__mulsi3>
    d7b8:	e009883a 	mov	r4,fp
    d7bc:	a80b883a 	mov	r5,r21
    d7c0:	d8800315 	stw	r2,12(sp)
    d7c4:	000cb000 	call	cb00 <__umodsi3>
    d7c8:	d9000017 	ldw	r4,0(sp)
    d7cc:	1004943a 	slli	r2,r2,16
    d7d0:	da000317 	ldw	r8,12(sp)
    d7d4:	20ffffcc 	andi	r3,r4,65535
    d7d8:	10ceb03a 	or	r7,r2,r3
    d7dc:	3a00062e 	bgeu	r7,r8,d7f8 <__divdf3+0x42c>
    d7e0:	3dcf883a 	add	r7,r7,r23
    d7e4:	80bfffc4 	addi	r2,r16,-1
    d7e8:	3dc0f036 	bltu	r7,r23,dbac <__divdf3+0x7e0>
    d7ec:	3a00ef2e 	bgeu	r7,r8,dbac <__divdf3+0x7e0>
    d7f0:	843fff84 	addi	r16,r16,-2
    d7f4:	3dcf883a 	add	r7,r7,r23
    d7f8:	d8c00117 	ldw	r3,4(sp)
    d7fc:	8822943a 	slli	r17,r17,16
    d800:	3a0fc83a 	sub	r7,r7,r8
    d804:	1806d43a 	srli	r3,r3,16
    d808:	8462b03a 	or	r17,r16,r17
    d80c:	8affffcc 	andi	r11,r17,65535
    d810:	d8c00015 	stw	r3,0(sp)
    d814:	d8c00117 	ldw	r3,4(sp)
    d818:	8820d43a 	srli	r16,r17,16
    d81c:	5809883a 	mov	r4,r11
    d820:	1f3fffcc 	andi	fp,r3,65535
    d824:	e00b883a 	mov	r5,fp
    d828:	d9c00515 	stw	r7,20(sp)
    d82c:	dac00215 	stw	r11,8(sp)
    d830:	000cb080 	call	cb08 <__mulsi3>
    d834:	8009883a 	mov	r4,r16
    d838:	e00b883a 	mov	r5,fp
    d83c:	d8800415 	stw	r2,16(sp)
    d840:	000cb080 	call	cb08 <__mulsi3>
    d844:	d9400017 	ldw	r5,0(sp)
    d848:	8009883a 	mov	r4,r16
    d84c:	d8800315 	stw	r2,12(sp)
    d850:	000cb080 	call	cb08 <__mulsi3>
    d854:	dac00217 	ldw	r11,8(sp)
    d858:	d9400017 	ldw	r5,0(sp)
    d85c:	d8800215 	stw	r2,8(sp)
    d860:	5809883a 	mov	r4,r11
    d864:	000cb080 	call	cb08 <__mulsi3>
    d868:	da400417 	ldw	r9,16(sp)
    d86c:	da800317 	ldw	r10,12(sp)
    d870:	d9c00517 	ldw	r7,20(sp)
    d874:	480ad43a 	srli	r5,r9,16
    d878:	5085883a 	add	r2,r10,r2
    d87c:	db000217 	ldw	r12,8(sp)
    d880:	1151883a 	add	r8,r2,r5
    d884:	4280022e 	bgeu	r8,r10,d890 <__divdf3+0x4c4>
    d888:	00800074 	movhi	r2,1
    d88c:	6099883a 	add	r12,r12,r2
    d890:	400ad43a 	srli	r5,r8,16
    d894:	4010943a 	slli	r8,r8,16
    d898:	4c3fffcc 	andi	r16,r9,65535
    d89c:	6149883a 	add	r4,r12,r5
    d8a0:	4411883a 	add	r8,r8,r16
    d8a4:	3900a736 	bltu	r7,r4,db44 <__divdf3+0x778>
    d8a8:	3900c426 	beq	r7,r4,dbbc <__divdf3+0x7f0>
    d8ac:	3909c83a 	sub	r4,r7,r4
    d8b0:	b221c83a 	sub	r16,r22,r8
    d8b4:	b42d803a 	cmpltu	r22,r22,r16
    d8b8:	25adc83a 	sub	r22,r4,r22
    d8bc:	b5c0c626 	beq	r22,r23,dbd8 <__divdf3+0x80c>
    d8c0:	b009883a 	mov	r4,r22
    d8c4:	a80b883a 	mov	r5,r21
    d8c8:	000caf80 	call	caf8 <__udivsi3>
    d8cc:	1009883a 	mov	r4,r2
    d8d0:	980b883a 	mov	r5,r19
    d8d4:	d8800315 	stw	r2,12(sp)
    d8d8:	000cb080 	call	cb08 <__mulsi3>
    d8dc:	a80b883a 	mov	r5,r21
    d8e0:	b009883a 	mov	r4,r22
    d8e4:	d8800415 	stw	r2,16(sp)
    d8e8:	000cb000 	call	cb00 <__umodsi3>
    d8ec:	1004943a 	slli	r2,r2,16
    d8f0:	800ed43a 	srli	r7,r16,16
    d8f4:	da400417 	ldw	r9,16(sp)
    d8f8:	da000317 	ldw	r8,12(sp)
    d8fc:	11cab03a 	or	r5,r2,r7
    d900:	2a40062e 	bgeu	r5,r9,d91c <__divdf3+0x550>
    d904:	2dcb883a 	add	r5,r5,r23
    d908:	40bfffc4 	addi	r2,r8,-1
    d90c:	2dc0b436 	bltu	r5,r23,dbe0 <__divdf3+0x814>
    d910:	2a40b32e 	bgeu	r5,r9,dbe0 <__divdf3+0x814>
    d914:	423fff84 	addi	r8,r8,-2
    d918:	2dcb883a 	add	r5,r5,r23
    d91c:	2a6dc83a 	sub	r22,r5,r9
    d920:	b009883a 	mov	r4,r22
    d924:	a80b883a 	mov	r5,r21
    d928:	da000315 	stw	r8,12(sp)
    d92c:	000caf80 	call	caf8 <__udivsi3>
    d930:	980b883a 	mov	r5,r19
    d934:	1009883a 	mov	r4,r2
    d938:	d8800415 	stw	r2,16(sp)
    d93c:	000cb080 	call	cb08 <__mulsi3>
    d940:	b009883a 	mov	r4,r22
    d944:	a80b883a 	mov	r5,r21
    d948:	1027883a 	mov	r19,r2
    d94c:	000cb000 	call	cb00 <__umodsi3>
    d950:	1004943a 	slli	r2,r2,16
    d954:	843fffcc 	andi	r16,r16,65535
    d958:	da000317 	ldw	r8,12(sp)
    d95c:	140eb03a 	or	r7,r2,r16
    d960:	da400417 	ldw	r9,16(sp)
    d964:	3cc0062e 	bgeu	r7,r19,d980 <__divdf3+0x5b4>
    d968:	3dcf883a 	add	r7,r7,r23
    d96c:	48bfffc4 	addi	r2,r9,-1
    d970:	3dc09d36 	bltu	r7,r23,dbe8 <__divdf3+0x81c>
    d974:	3cc09c2e 	bgeu	r7,r19,dbe8 <__divdf3+0x81c>
    d978:	4a7fff84 	addi	r9,r9,-2
    d97c:	3dcf883a 	add	r7,r7,r23
    d980:	4010943a 	slli	r8,r8,16
    d984:	3cebc83a 	sub	r21,r7,r19
    d988:	e00b883a 	mov	r5,fp
    d98c:	4a26b03a 	or	r19,r9,r8
    d990:	99ffffcc 	andi	r7,r19,65535
    d994:	9820d43a 	srli	r16,r19,16
    d998:	3809883a 	mov	r4,r7
    d99c:	d9c00515 	stw	r7,20(sp)
    d9a0:	000cb080 	call	cb08 <__mulsi3>
    d9a4:	8009883a 	mov	r4,r16
    d9a8:	e00b883a 	mov	r5,fp
    d9ac:	102d883a 	mov	r22,r2
    d9b0:	000cb080 	call	cb08 <__mulsi3>
    d9b4:	d9400017 	ldw	r5,0(sp)
    d9b8:	8009883a 	mov	r4,r16
    d9bc:	1039883a 	mov	fp,r2
    d9c0:	000cb080 	call	cb08 <__mulsi3>
    d9c4:	d9c00517 	ldw	r7,20(sp)
    d9c8:	d9400017 	ldw	r5,0(sp)
    d9cc:	1021883a 	mov	r16,r2
    d9d0:	3809883a 	mov	r4,r7
    d9d4:	000cb080 	call	cb08 <__mulsi3>
    d9d8:	b008d43a 	srli	r4,r22,16
    d9dc:	e085883a 	add	r2,fp,r2
    d9e0:	1109883a 	add	r4,r2,r4
    d9e4:	2700022e 	bgeu	r4,fp,d9f0 <__divdf3+0x624>
    d9e8:	00800074 	movhi	r2,1
    d9ec:	80a1883a 	add	r16,r16,r2
    d9f0:	200ad43a 	srli	r5,r4,16
    d9f4:	2008943a 	slli	r4,r4,16
    d9f8:	b5bfffcc 	andi	r22,r22,65535
    d9fc:	8145883a 	add	r2,r16,r5
    da00:	2589883a 	add	r4,r4,r22
    da04:	a8802c36 	bltu	r21,r2,dab8 <__divdf3+0x6ec>
    da08:	a880a426 	beq	r21,r2,dc9c <__divdf3+0x8d0>
    da0c:	9cc00054 	ori	r19,r19,1
    da10:	9200ffc4 	addi	r8,r18,1023
    da14:	023f270e 	bge	zero,r8,d6b4 <__alt_data_end+0xfffb7f84>
    da18:	988001cc 	andi	r2,r19,7
    da1c:	10000726 	beq	r2,zero,da3c <__divdf3+0x670>
    da20:	990003cc 	andi	r4,r19,15
    da24:	00800104 	movi	r2,4
    da28:	20800426 	beq	r4,r2,da3c <__divdf3+0x670>
    da2c:	9885883a 	add	r2,r19,r2
    da30:	14e7803a 	cmpltu	r19,r2,r19
    da34:	8ce3883a 	add	r17,r17,r19
    da38:	1027883a 	mov	r19,r2
    da3c:	8880402c 	andhi	r2,r17,256
    da40:	10000426 	beq	r2,zero,da54 <__divdf3+0x688>
    da44:	00bfc034 	movhi	r2,65280
    da48:	10bfffc4 	addi	r2,r2,-1
    da4c:	92010004 	addi	r8,r18,1024
    da50:	88a2703a 	and	r17,r17,r2
    da54:	0081ff84 	movi	r2,2046
    da58:	123eb616 	blt	r2,r8,d534 <__alt_data_end+0xfffb7e04>
    da5c:	9826d0fa 	srli	r19,r19,3
    da60:	8804977a 	slli	r2,r17,29
    da64:	8820927a 	slli	r16,r17,9
    da68:	4201ffcc 	andi	r8,r8,2047
    da6c:	14e6b03a 	or	r19,r2,r19
    da70:	800ad33a 	srli	r5,r16,12
    da74:	a180004c 	andi	r6,r20,1
    da78:	003eb206 	br	d544 <__alt_data_end+0xfffb7e14>
    da7c:	008000c4 	movi	r2,3
    da80:	4080ac26 	beq	r8,r2,dd34 <__divdf3+0x968>
    da84:	00800044 	movi	r2,1
    da88:	4080591e 	bne	r8,r2,dbf0 <__divdf3+0x824>
    da8c:	e00d883a 	mov	r6,fp
    da90:	0011883a 	mov	r8,zero
    da94:	000b883a 	mov	r5,zero
    da98:	0027883a 	mov	r19,zero
    da9c:	003ea906 	br	d544 <__alt_data_end+0xfffb7e14>
    daa0:	00800434 	movhi	r2,16
    daa4:	89400234 	orhi	r5,r17,8
    daa8:	10bfffc4 	addi	r2,r2,-1
    daac:	b00d883a 	mov	r6,r22
    dab0:	288a703a 	and	r5,r5,r2
    dab4:	003efd06 	br	d6ac <__alt_data_end+0xfffb7f7c>
    dab8:	adcf883a 	add	r7,r21,r23
    dabc:	997fffc4 	addi	r5,r19,-1
    dac0:	3dc0412e 	bgeu	r7,r23,dbc8 <__divdf3+0x7fc>
    dac4:	2827883a 	mov	r19,r5
    dac8:	38bfd01e 	bne	r7,r2,da0c <__alt_data_end+0xfffb82dc>
    dacc:	d8c00117 	ldw	r3,4(sp)
    dad0:	193fce1e 	bne	r3,r4,da0c <__alt_data_end+0xfffb82dc>
    dad4:	003fce06 	br	da10 <__alt_data_end+0xfffb82e0>
    dad8:	d9800215 	stw	r6,8(sp)
    dadc:	d9c00515 	stw	r7,20(sp)
    dae0:	000f2c80 	call	f2c8 <__clzsi2>
    dae4:	10c00804 	addi	r3,r2,32
    dae8:	010009c4 	movi	r4,39
    daec:	d9800217 	ldw	r6,8(sp)
    daf0:	d9c00517 	ldw	r7,20(sp)
    daf4:	20feb20e 	bge	r4,r3,d5c0 <__alt_data_end+0xfffb7e90>
    daf8:	117ffe04 	addi	r5,r2,-8
    dafc:	a162983a 	sll	r17,r20,r5
    db00:	0027883a 	mov	r19,zero
    db04:	003eb506 	br	d5dc <__alt_data_end+0xfffb7eac>
    db08:	3009883a 	mov	r4,r6
    db0c:	d9800215 	stw	r6,8(sp)
    db10:	da000315 	stw	r8,12(sp)
    db14:	da400415 	stw	r9,16(sp)
    db18:	000f2c80 	call	f2c8 <__clzsi2>
    db1c:	10c00804 	addi	r3,r2,32
    db20:	010009c4 	movi	r4,39
    db24:	d9800217 	ldw	r6,8(sp)
    db28:	da000317 	ldw	r8,12(sp)
    db2c:	da400417 	ldw	r9,16(sp)
    db30:	20fec10e 	bge	r4,r3,d638 <__alt_data_end+0xfffb7f08>
    db34:	10bffe04 	addi	r2,r2,-8
    db38:	a8a0983a 	sll	r16,r21,r2
    db3c:	002b883a 	mov	r21,zero
    db40:	003ec406 	br	d654 <__alt_data_end+0xfffb7f24>
    db44:	d8c00117 	ldw	r3,4(sp)
    db48:	b0ed883a 	add	r22,r22,r3
    db4c:	b0c5803a 	cmpltu	r2,r22,r3
    db50:	15c5883a 	add	r2,r2,r23
    db54:	11cf883a 	add	r7,r2,r7
    db58:	88bfffc4 	addi	r2,r17,-1
    db5c:	b9c00d2e 	bgeu	r23,r7,db94 <__divdf3+0x7c8>
    db60:	39003f36 	bltu	r7,r4,dc60 <__divdf3+0x894>
    db64:	21c06a26 	beq	r4,r7,dd10 <__divdf3+0x944>
    db68:	3909c83a 	sub	r4,r7,r4
    db6c:	1023883a 	mov	r17,r2
    db70:	003f4f06 	br	d8b0 <__alt_data_end+0xfffb8180>
    db74:	9d7ee536 	bltu	r19,r21,d70c <__alt_data_end+0xfffb7fdc>
    db78:	982ed07a 	srli	r23,r19,1
    db7c:	880497fa 	slli	r2,r17,31
    db80:	8810d07a 	srli	r8,r17,1
    db84:	982c97fa 	slli	r22,r19,31
    db88:	b884b03a 	or	r2,r23,r2
    db8c:	d8800015 	stw	r2,0(sp)
    db90:	003ee206 	br	d71c <__alt_data_end+0xfffb7fec>
    db94:	3dfff41e 	bne	r7,r23,db68 <__alt_data_end+0xfffb8438>
    db98:	d8c00117 	ldw	r3,4(sp)
    db9c:	b0fff02e 	bgeu	r22,r3,db60 <__alt_data_end+0xfffb8430>
    dba0:	b909c83a 	sub	r4,r23,r4
    dba4:	1023883a 	mov	r17,r2
    dba8:	003f4106 	br	d8b0 <__alt_data_end+0xfffb8180>
    dbac:	1021883a 	mov	r16,r2
    dbb0:	003f1106 	br	d7f8 <__alt_data_end+0xfffb80c8>
    dbb4:	1023883a 	mov	r17,r2
    dbb8:	003ef706 	br	d798 <__alt_data_end+0xfffb8068>
    dbbc:	b23fe136 	bltu	r22,r8,db44 <__alt_data_end+0xfffb8414>
    dbc0:	0009883a 	mov	r4,zero
    dbc4:	003f3a06 	br	d8b0 <__alt_data_end+0xfffb8180>
    dbc8:	38802c36 	bltu	r7,r2,dc7c <__divdf3+0x8b0>
    dbcc:	11c05326 	beq	r2,r7,dd1c <__divdf3+0x950>
    dbd0:	2827883a 	mov	r19,r5
    dbd4:	003f8d06 	br	da0c <__alt_data_end+0xfffb82dc>
    dbd8:	04ffffc4 	movi	r19,-1
    dbdc:	003f8c06 	br	da10 <__alt_data_end+0xfffb82e0>
    dbe0:	1011883a 	mov	r8,r2
    dbe4:	003f4d06 	br	d91c <__alt_data_end+0xfffb81ec>
    dbe8:	1013883a 	mov	r9,r2
    dbec:	003f6406 	br	d980 <__alt_data_end+0xfffb8250>
    dbf0:	e029883a 	mov	r20,fp
    dbf4:	003f8606 	br	da10 <__alt_data_end+0xfffb82e0>
    dbf8:	008007c4 	movi	r2,31
    dbfc:	14002a16 	blt	r2,r16,dca8 <__divdf3+0x8dc>
    dc00:	91410784 	addi	r5,r18,1054
    dc04:	9c0cd83a 	srl	r6,r19,r16
    dc08:	8948983a 	sll	r4,r17,r5
    dc0c:	9944983a 	sll	r2,r19,r5
    dc10:	8c20d83a 	srl	r16,r17,r16
    dc14:	3108b03a 	or	r4,r6,r4
    dc18:	1004c03a 	cmpne	r2,r2,zero
    dc1c:	2084b03a 	or	r2,r4,r2
    dc20:	110001cc 	andi	r4,r2,7
    dc24:	20000726 	beq	r4,zero,dc44 <__divdf3+0x878>
    dc28:	114003cc 	andi	r5,r2,15
    dc2c:	01000104 	movi	r4,4
    dc30:	29000426 	beq	r5,r4,dc44 <__divdf3+0x878>
    dc34:	11000104 	addi	r4,r2,4
    dc38:	2085803a 	cmpltu	r2,r4,r2
    dc3c:	80a1883a 	add	r16,r16,r2
    dc40:	2005883a 	mov	r2,r4
    dc44:	8100202c 	andhi	r4,r16,128
    dc48:	20002d26 	beq	r4,zero,dd00 <__divdf3+0x934>
    dc4c:	a180004c 	andi	r6,r20,1
    dc50:	02000044 	movi	r8,1
    dc54:	000b883a 	mov	r5,zero
    dc58:	0027883a 	mov	r19,zero
    dc5c:	003e3906 	br	d544 <__alt_data_end+0xfffb7e14>
    dc60:	d8c00117 	ldw	r3,4(sp)
    dc64:	8c7fff84 	addi	r17,r17,-2
    dc68:	b0ed883a 	add	r22,r22,r3
    dc6c:	b0c5803a 	cmpltu	r2,r22,r3
    dc70:	15c5883a 	add	r2,r2,r23
    dc74:	11cf883a 	add	r7,r2,r7
    dc78:	003f0c06 	br	d8ac <__alt_data_end+0xfffb817c>
    dc7c:	d8c00117 	ldw	r3,4(sp)
    dc80:	997fff84 	addi	r5,r19,-2
    dc84:	18d1883a 	add	r8,r3,r3
    dc88:	40c7803a 	cmpltu	r3,r8,r3
    dc8c:	1dcd883a 	add	r6,r3,r23
    dc90:	398f883a 	add	r7,r7,r6
    dc94:	da000115 	stw	r8,4(sp)
    dc98:	003f8a06 	br	dac4 <__alt_data_end+0xfffb8394>
    dc9c:	203f861e 	bne	r4,zero,dab8 <__alt_data_end+0xfffb8388>
    dca0:	d8000115 	stw	zero,4(sp)
    dca4:	003f8906 	br	dacc <__alt_data_end+0xfffb839c>
    dca8:	00bef884 	movi	r2,-1054
    dcac:	1485c83a 	sub	r2,r2,r18
    dcb0:	01000804 	movi	r4,32
    dcb4:	8884d83a 	srl	r2,r17,r2
    dcb8:	81001c26 	beq	r16,r4,dd2c <__divdf3+0x960>
    dcbc:	91010f84 	addi	r4,r18,1086
    dcc0:	8908983a 	sll	r4,r17,r4
    dcc4:	24c8b03a 	or	r4,r4,r19
    dcc8:	2008c03a 	cmpne	r4,r4,zero
    dccc:	2084b03a 	or	r2,r4,r2
    dcd0:	140001cc 	andi	r16,r2,7
    dcd4:	8000061e 	bne	r16,zero,dcf0 <__divdf3+0x924>
    dcd8:	000b883a 	mov	r5,zero
    dcdc:	1004d0fa 	srli	r2,r2,3
    dce0:	a180004c 	andi	r6,r20,1
    dce4:	0011883a 	mov	r8,zero
    dce8:	1426b03a 	or	r19,r2,r16
    dcec:	003e1506 	br	d544 <__alt_data_end+0xfffb7e14>
    dcf0:	114003cc 	andi	r5,r2,15
    dcf4:	01000104 	movi	r4,4
    dcf8:	0021883a 	mov	r16,zero
    dcfc:	293fcd1e 	bne	r5,r4,dc34 <__alt_data_end+0xfffb8504>
    dd00:	800a927a 	slli	r5,r16,9
    dd04:	8020977a 	slli	r16,r16,29
    dd08:	280ad33a 	srli	r5,r5,12
    dd0c:	003ff306 	br	dcdc <__alt_data_end+0xfffb85ac>
    dd10:	b23fd336 	bltu	r22,r8,dc60 <__alt_data_end+0xfffb8530>
    dd14:	1023883a 	mov	r17,r2
    dd18:	003fa906 	br	dbc0 <__alt_data_end+0xfffb8490>
    dd1c:	d8c00117 	ldw	r3,4(sp)
    dd20:	193fd636 	bltu	r3,r4,dc7c <__alt_data_end+0xfffb854c>
    dd24:	2827883a 	mov	r19,r5
    dd28:	003f6806 	br	dacc <__alt_data_end+0xfffb839c>
    dd2c:	0009883a 	mov	r4,zero
    dd30:	003fe406 	br	dcc4 <__alt_data_end+0xfffb8594>
    dd34:	00800434 	movhi	r2,16
    dd38:	89400234 	orhi	r5,r17,8
    dd3c:	10bfffc4 	addi	r2,r2,-1
    dd40:	e00d883a 	mov	r6,fp
    dd44:	288a703a 	and	r5,r5,r2
    dd48:	003e5806 	br	d6ac <__alt_data_end+0xfffb7f7c>

0000dd4c <__eqdf2>:
    dd4c:	2804d53a 	srli	r2,r5,20
    dd50:	3806d53a 	srli	r3,r7,20
    dd54:	02000434 	movhi	r8,16
    dd58:	423fffc4 	addi	r8,r8,-1
    dd5c:	1081ffcc 	andi	r2,r2,2047
    dd60:	0241ffc4 	movi	r9,2047
    dd64:	2a14703a 	and	r10,r5,r8
    dd68:	18c1ffcc 	andi	r3,r3,2047
    dd6c:	3a10703a 	and	r8,r7,r8
    dd70:	280ad7fa 	srli	r5,r5,31
    dd74:	380ed7fa 	srli	r7,r7,31
    dd78:	12400f26 	beq	r2,r9,ddb8 <__eqdf2+0x6c>
    dd7c:	0241ffc4 	movi	r9,2047
    dd80:	1a400326 	beq	r3,r9,dd90 <__eqdf2+0x44>
    dd84:	10c00526 	beq	r2,r3,dd9c <__eqdf2+0x50>
    dd88:	00800044 	movi	r2,1
    dd8c:	f800283a 	ret
    dd90:	4192b03a 	or	r9,r8,r6
    dd94:	483ffc1e 	bne	r9,zero,dd88 <__alt_data_end+0xfffb8658>
    dd98:	10fffb1e 	bne	r2,r3,dd88 <__alt_data_end+0xfffb8658>
    dd9c:	523ffa1e 	bne	r10,r8,dd88 <__alt_data_end+0xfffb8658>
    dda0:	21bff91e 	bne	r4,r6,dd88 <__alt_data_end+0xfffb8658>
    dda4:	29c00826 	beq	r5,r7,ddc8 <__eqdf2+0x7c>
    dda8:	103ff71e 	bne	r2,zero,dd88 <__alt_data_end+0xfffb8658>
    ddac:	5104b03a 	or	r2,r10,r4
    ddb0:	1004c03a 	cmpne	r2,r2,zero
    ddb4:	f800283a 	ret
    ddb8:	5112b03a 	or	r9,r10,r4
    ddbc:	483fef26 	beq	r9,zero,dd7c <__alt_data_end+0xfffb864c>
    ddc0:	00800044 	movi	r2,1
    ddc4:	f800283a 	ret
    ddc8:	0005883a 	mov	r2,zero
    ddcc:	f800283a 	ret

0000ddd0 <__gedf2>:
    ddd0:	2804d53a 	srli	r2,r5,20
    ddd4:	3806d53a 	srli	r3,r7,20
    ddd8:	02000434 	movhi	r8,16
    dddc:	423fffc4 	addi	r8,r8,-1
    dde0:	0241ffc4 	movi	r9,2047
    dde4:	1081ffcc 	andi	r2,r2,2047
    dde8:	2a14703a 	and	r10,r5,r8
    ddec:	1a46703a 	and	r3,r3,r9
    ddf0:	3a10703a 	and	r8,r7,r8
    ddf4:	280ad7fa 	srli	r5,r5,31
    ddf8:	380ed7fa 	srli	r7,r7,31
    ddfc:	12400b26 	beq	r2,r9,de2c <__gedf2+0x5c>
    de00:	1a401626 	beq	r3,r9,de5c <__gedf2+0x8c>
    de04:	10000c1e 	bne	r2,zero,de38 <__gedf2+0x68>
    de08:	5112b03a 	or	r9,r10,r4
    de0c:	4813003a 	cmpeq	r9,r9,zero
    de10:	4817883a 	mov	r11,r9
    de14:	18000c1e 	bne	r3,zero,de48 <__gedf2+0x78>
    de18:	4198b03a 	or	r12,r8,r6
    de1c:	60000a1e 	bne	r12,zero,de48 <__gedf2+0x78>
    de20:	48001326 	beq	r9,zero,de70 <__gedf2+0xa0>
    de24:	0005883a 	mov	r2,zero
    de28:	f800283a 	ret
    de2c:	5112b03a 	or	r9,r10,r4
    de30:	4800191e 	bne	r9,zero,de98 <__gedf2+0xc8>
    de34:	18800926 	beq	r3,r2,de5c <__gedf2+0x8c>
    de38:	18000b1e 	bne	r3,zero,de68 <__gedf2+0x98>
    de3c:	4192b03a 	or	r9,r8,r6
    de40:	0017883a 	mov	r11,zero
    de44:	48000a26 	beq	r9,zero,de70 <__gedf2+0xa0>
    de48:	39c03fcc 	andi	r7,r7,255
    de4c:	58000726 	beq	r11,zero,de6c <__gedf2+0x9c>
    de50:	3800081e 	bne	r7,zero,de74 <__gedf2+0xa4>
    de54:	00bfffc4 	movi	r2,-1
    de58:	f800283a 	ret
    de5c:	4192b03a 	or	r9,r8,r6
    de60:	48000d1e 	bne	r9,zero,de98 <__gedf2+0xc8>
    de64:	103fe826 	beq	r2,zero,de08 <__alt_data_end+0xfffb86d8>
    de68:	39c03fcc 	andi	r7,r7,255
    de6c:	29c00326 	beq	r5,r7,de7c <__gedf2+0xac>
    de70:	283ff81e 	bne	r5,zero,de54 <__alt_data_end+0xfffb8724>
    de74:	00800044 	movi	r2,1
    de78:	f800283a 	ret
    de7c:	18bffc16 	blt	r3,r2,de70 <__alt_data_end+0xfffb8740>
    de80:	10c00316 	blt	r2,r3,de90 <__gedf2+0xc0>
    de84:	42bffa36 	bltu	r8,r10,de70 <__alt_data_end+0xfffb8740>
    de88:	52000526 	beq	r10,r8,dea0 <__gedf2+0xd0>
    de8c:	523fe52e 	bgeu	r10,r8,de24 <__alt_data_end+0xfffb86f4>
    de90:	283ff026 	beq	r5,zero,de54 <__alt_data_end+0xfffb8724>
    de94:	003ff706 	br	de74 <__alt_data_end+0xfffb8744>
    de98:	00bfff84 	movi	r2,-2
    de9c:	f800283a 	ret
    dea0:	313ff336 	bltu	r6,r4,de70 <__alt_data_end+0xfffb8740>
    dea4:	21bfdf2e 	bgeu	r4,r6,de24 <__alt_data_end+0xfffb86f4>
    dea8:	283fea26 	beq	r5,zero,de54 <__alt_data_end+0xfffb8724>
    deac:	003ff106 	br	de74 <__alt_data_end+0xfffb8744>

0000deb0 <__ledf2>:
    deb0:	2804d53a 	srli	r2,r5,20
    deb4:	3810d53a 	srli	r8,r7,20
    deb8:	00c00434 	movhi	r3,16
    debc:	18ffffc4 	addi	r3,r3,-1
    dec0:	0241ffc4 	movi	r9,2047
    dec4:	1081ffcc 	andi	r2,r2,2047
    dec8:	28d4703a 	and	r10,r5,r3
    decc:	4250703a 	and	r8,r8,r9
    ded0:	38c6703a 	and	r3,r7,r3
    ded4:	280ad7fa 	srli	r5,r5,31
    ded8:	380ed7fa 	srli	r7,r7,31
    dedc:	12400b26 	beq	r2,r9,df0c <__ledf2+0x5c>
    dee0:	42401926 	beq	r8,r9,df48 <__ledf2+0x98>
    dee4:	10000c1e 	bne	r2,zero,df18 <__ledf2+0x68>
    dee8:	5112b03a 	or	r9,r10,r4
    deec:	4813003a 	cmpeq	r9,r9,zero
    def0:	4817883a 	mov	r11,r9
    def4:	40000f26 	beq	r8,zero,df34 <__ledf2+0x84>
    def8:	39c03fcc 	andi	r7,r7,255
    defc:	58001826 	beq	r11,zero,df60 <__ledf2+0xb0>
    df00:	38000a1e 	bne	r7,zero,df2c <__ledf2+0x7c>
    df04:	00bfffc4 	movi	r2,-1
    df08:	f800283a 	ret
    df0c:	5112b03a 	or	r9,r10,r4
    df10:	48000f1e 	bne	r9,zero,df50 <__ledf2+0xa0>
    df14:	40800c26 	beq	r8,r2,df48 <__ledf2+0x98>
    df18:	4000101e 	bne	r8,zero,df5c <__ledf2+0xac>
    df1c:	1992b03a 	or	r9,r3,r6
    df20:	0017883a 	mov	r11,zero
    df24:	483ff41e 	bne	r9,zero,def8 <__alt_data_end+0xfffb87c8>
    df28:	283ff61e 	bne	r5,zero,df04 <__alt_data_end+0xfffb87d4>
    df2c:	00800044 	movi	r2,1
    df30:	f800283a 	ret
    df34:	1998b03a 	or	r12,r3,r6
    df38:	603fef1e 	bne	r12,zero,def8 <__alt_data_end+0xfffb87c8>
    df3c:	483ffa26 	beq	r9,zero,df28 <__alt_data_end+0xfffb87f8>
    df40:	0005883a 	mov	r2,zero
    df44:	f800283a 	ret
    df48:	1992b03a 	or	r9,r3,r6
    df4c:	48000226 	beq	r9,zero,df58 <__ledf2+0xa8>
    df50:	00800084 	movi	r2,2
    df54:	f800283a 	ret
    df58:	103fe326 	beq	r2,zero,dee8 <__alt_data_end+0xfffb87b8>
    df5c:	39c03fcc 	andi	r7,r7,255
    df60:	29fff11e 	bne	r5,r7,df28 <__alt_data_end+0xfffb87f8>
    df64:	40bff016 	blt	r8,r2,df28 <__alt_data_end+0xfffb87f8>
    df68:	12000316 	blt	r2,r8,df78 <__ledf2+0xc8>
    df6c:	1abfee36 	bltu	r3,r10,df28 <__alt_data_end+0xfffb87f8>
    df70:	50c00326 	beq	r10,r3,df80 <__ledf2+0xd0>
    df74:	50fff22e 	bgeu	r10,r3,df40 <__alt_data_end+0xfffb8810>
    df78:	283fe226 	beq	r5,zero,df04 <__alt_data_end+0xfffb87d4>
    df7c:	003feb06 	br	df2c <__alt_data_end+0xfffb87fc>
    df80:	313fe936 	bltu	r6,r4,df28 <__alt_data_end+0xfffb87f8>
    df84:	21bfee2e 	bgeu	r4,r6,df40 <__alt_data_end+0xfffb8810>
    df88:	283fde26 	beq	r5,zero,df04 <__alt_data_end+0xfffb87d4>
    df8c:	003fe706 	br	df2c <__alt_data_end+0xfffb87fc>

0000df90 <__muldf3>:
    df90:	deffee04 	addi	sp,sp,-72
    df94:	dd000c15 	stw	r20,48(sp)
    df98:	2828d53a 	srli	r20,r5,20
    df9c:	dd400d15 	stw	r21,52(sp)
    dfa0:	282ad7fa 	srli	r21,r5,31
    dfa4:	dc000815 	stw	r16,32(sp)
    dfa8:	04000434 	movhi	r16,16
    dfac:	ddc00f15 	stw	r23,60(sp)
    dfb0:	dcc00b15 	stw	r19,44(sp)
    dfb4:	dc800a15 	stw	r18,40(sp)
    dfb8:	843fffc4 	addi	r16,r16,-1
    dfbc:	dfc01115 	stw	ra,68(sp)
    dfc0:	df001015 	stw	fp,64(sp)
    dfc4:	dd800e15 	stw	r22,56(sp)
    dfc8:	dc400915 	stw	r17,36(sp)
    dfcc:	a501ffcc 	andi	r20,r20,2047
    dfd0:	2025883a 	mov	r18,r4
    dfd4:	202f883a 	mov	r23,r4
    dfd8:	2c20703a 	and	r16,r5,r16
    dfdc:	a827883a 	mov	r19,r21
    dfe0:	aa403fcc 	andi	r9,r21,255
    dfe4:	a0005926 	beq	r20,zero,e14c <__muldf3+0x1bc>
    dfe8:	0081ffc4 	movi	r2,2047
    dfec:	a0803426 	beq	r20,r2,e0c0 <__muldf3+0x130>
    dff0:	84000434 	orhi	r16,r16,16
    dff4:	2004d77a 	srli	r2,r4,29
    dff8:	802090fa 	slli	r16,r16,3
    dffc:	202e90fa 	slli	r23,r4,3
    e000:	a53f0044 	addi	r20,r20,-1023
    e004:	80a0b03a 	or	r16,r16,r2
    e008:	000b883a 	mov	r5,zero
    e00c:	0039883a 	mov	fp,zero
    e010:	3806d53a 	srli	r3,r7,20
    e014:	382cd7fa 	srli	r22,r7,31
    e018:	00800434 	movhi	r2,16
    e01c:	10bfffc4 	addi	r2,r2,-1
    e020:	18c1ffcc 	andi	r3,r3,2047
    e024:	3025883a 	mov	r18,r6
    e028:	38a2703a 	and	r17,r7,r2
    e02c:	b2803fcc 	andi	r10,r22,255
    e030:	18006426 	beq	r3,zero,e1c4 <__muldf3+0x234>
    e034:	0081ffc4 	movi	r2,2047
    e038:	18805c26 	beq	r3,r2,e1ac <__muldf3+0x21c>
    e03c:	8c400434 	orhi	r17,r17,16
    e040:	3004d77a 	srli	r2,r6,29
    e044:	882290fa 	slli	r17,r17,3
    e048:	302490fa 	slli	r18,r6,3
    e04c:	18ff0044 	addi	r3,r3,-1023
    e050:	88a2b03a 	or	r17,r17,r2
    e054:	000f883a 	mov	r7,zero
    e058:	394ab03a 	or	r5,r7,r5
    e05c:	280a90ba 	slli	r5,r5,2
    e060:	00800074 	movhi	r2,1
    e064:	10b82004 	addi	r2,r2,-8064
    e068:	288b883a 	add	r5,r5,r2
    e06c:	28800017 	ldw	r2,0(r5)
    e070:	a0c7883a 	add	r3,r20,r3
    e074:	b54cf03a 	xor	r6,r22,r21
    e078:	1a000044 	addi	r8,r3,1
    e07c:	1000683a 	jmp	r2
    e080:	0000e2c4 	movi	zero,907
    e084:	0000e2b0 	cmpltui	zero,zero,906
    e088:	0000e2b0 	cmpltui	zero,zero,906
    e08c:	0000e29c 	xori	zero,zero,906
    e090:	0000e0dc 	xori	zero,zero,899
    e094:	0000e0dc 	xori	zero,zero,899
    e098:	0000e284 	movi	zero,906
    e09c:	0000e29c 	xori	zero,zero,906
    e0a0:	0000e0dc 	xori	zero,zero,899
    e0a4:	0000e284 	movi	zero,906
    e0a8:	0000e0dc 	xori	zero,zero,899
    e0ac:	0000e29c 	xori	zero,zero,906
    e0b0:	0000e0e0 	cmpeqi	zero,zero,899
    e0b4:	0000e0e0 	cmpeqi	zero,zero,899
    e0b8:	0000e0e0 	cmpeqi	zero,zero,899
    e0bc:	0000e600 	call	e60 <setup_keyboard+0x7c0>
    e0c0:	8104b03a 	or	r2,r16,r4
    e0c4:	10006c1e 	bne	r2,zero,e278 <__muldf3+0x2e8>
    e0c8:	01400204 	movi	r5,8
    e0cc:	0021883a 	mov	r16,zero
    e0d0:	002f883a 	mov	r23,zero
    e0d4:	07000084 	movi	fp,2
    e0d8:	003fcd06 	br	e010 <__alt_data_end+0xfffb88e0>
    e0dc:	3013883a 	mov	r9,r6
    e0e0:	00800084 	movi	r2,2
    e0e4:	e080501e 	bne	fp,r2,e228 <__muldf3+0x298>
    e0e8:	4cc0004c 	andi	r19,r9,1
    e0ec:	0101ffc4 	movi	r4,2047
    e0f0:	0021883a 	mov	r16,zero
    e0f4:	002f883a 	mov	r23,zero
    e0f8:	2008953a 	slli	r4,r4,20
    e0fc:	98c03fcc 	andi	r3,r19,255
    e100:	04400434 	movhi	r17,16
    e104:	8c7fffc4 	addi	r17,r17,-1
    e108:	180697fa 	slli	r3,r3,31
    e10c:	8460703a 	and	r16,r16,r17
    e110:	8120b03a 	or	r16,r16,r4
    e114:	80c6b03a 	or	r3,r16,r3
    e118:	b805883a 	mov	r2,r23
    e11c:	dfc01117 	ldw	ra,68(sp)
    e120:	df001017 	ldw	fp,64(sp)
    e124:	ddc00f17 	ldw	r23,60(sp)
    e128:	dd800e17 	ldw	r22,56(sp)
    e12c:	dd400d17 	ldw	r21,52(sp)
    e130:	dd000c17 	ldw	r20,48(sp)
    e134:	dcc00b17 	ldw	r19,44(sp)
    e138:	dc800a17 	ldw	r18,40(sp)
    e13c:	dc400917 	ldw	r17,36(sp)
    e140:	dc000817 	ldw	r16,32(sp)
    e144:	dec01204 	addi	sp,sp,72
    e148:	f800283a 	ret
    e14c:	8104b03a 	or	r2,r16,r4
    e150:	10004426 	beq	r2,zero,e264 <__muldf3+0x2d4>
    e154:	80014b26 	beq	r16,zero,e684 <__muldf3+0x6f4>
    e158:	8009883a 	mov	r4,r16
    e15c:	d9800715 	stw	r6,28(sp)
    e160:	d9c00215 	stw	r7,8(sp)
    e164:	da400415 	stw	r9,16(sp)
    e168:	000f2c80 	call	f2c8 <__clzsi2>
    e16c:	d9800717 	ldw	r6,28(sp)
    e170:	d9c00217 	ldw	r7,8(sp)
    e174:	da400417 	ldw	r9,16(sp)
    e178:	1007883a 	mov	r3,r2
    e17c:	01000a04 	movi	r4,40
    e180:	1dfffe04 	addi	r23,r3,-8
    e184:	20c9c83a 	sub	r4,r4,r3
    e188:	85e0983a 	sll	r16,r16,r23
    e18c:	9108d83a 	srl	r4,r18,r4
    e190:	95ee983a 	sll	r23,r18,r23
    e194:	2420b03a 	or	r16,r4,r16
    e198:	053f0344 	movi	r20,-1011
    e19c:	a0e9c83a 	sub	r20,r20,r3
    e1a0:	000b883a 	mov	r5,zero
    e1a4:	0039883a 	mov	fp,zero
    e1a8:	003f9906 	br	e010 <__alt_data_end+0xfffb88e0>
    e1ac:	8984b03a 	or	r2,r17,r6
    e1b0:	10002a1e 	bne	r2,zero,e25c <__muldf3+0x2cc>
    e1b4:	0023883a 	mov	r17,zero
    e1b8:	0025883a 	mov	r18,zero
    e1bc:	01c00084 	movi	r7,2
    e1c0:	003fa506 	br	e058 <__alt_data_end+0xfffb8928>
    e1c4:	8984b03a 	or	r2,r17,r6
    e1c8:	10002026 	beq	r2,zero,e24c <__muldf3+0x2bc>
    e1cc:	88011c26 	beq	r17,zero,e640 <__muldf3+0x6b0>
    e1d0:	8809883a 	mov	r4,r17
    e1d4:	d9400215 	stw	r5,8(sp)
    e1d8:	d9800715 	stw	r6,28(sp)
    e1dc:	da400415 	stw	r9,16(sp)
    e1e0:	da800315 	stw	r10,12(sp)
    e1e4:	000f2c80 	call	f2c8 <__clzsi2>
    e1e8:	d9400217 	ldw	r5,8(sp)
    e1ec:	d9800717 	ldw	r6,28(sp)
    e1f0:	da400417 	ldw	r9,16(sp)
    e1f4:	da800317 	ldw	r10,12(sp)
    e1f8:	1007883a 	mov	r3,r2
    e1fc:	01000a04 	movi	r4,40
    e200:	1cbffe04 	addi	r18,r3,-8
    e204:	20c9c83a 	sub	r4,r4,r3
    e208:	8ca2983a 	sll	r17,r17,r18
    e20c:	3108d83a 	srl	r4,r6,r4
    e210:	34a4983a 	sll	r18,r6,r18
    e214:	2462b03a 	or	r17,r4,r17
    e218:	00bf0344 	movi	r2,-1011
    e21c:	10c7c83a 	sub	r3,r2,r3
    e220:	000f883a 	mov	r7,zero
    e224:	003f8c06 	br	e058 <__alt_data_end+0xfffb8928>
    e228:	008000c4 	movi	r2,3
    e22c:	e0816d26 	beq	fp,r2,e7e4 <__muldf3+0x854>
    e230:	00800044 	movi	r2,1
    e234:	e081321e 	bne	fp,r2,e700 <__muldf3+0x770>
    e238:	48a6703a 	and	r19,r9,r2
    e23c:	0009883a 	mov	r4,zero
    e240:	0021883a 	mov	r16,zero
    e244:	002f883a 	mov	r23,zero
    e248:	003fab06 	br	e0f8 <__alt_data_end+0xfffb89c8>
    e24c:	0023883a 	mov	r17,zero
    e250:	0025883a 	mov	r18,zero
    e254:	01c00044 	movi	r7,1
    e258:	003f7f06 	br	e058 <__alt_data_end+0xfffb8928>
    e25c:	01c000c4 	movi	r7,3
    e260:	003f7d06 	br	e058 <__alt_data_end+0xfffb8928>
    e264:	01400104 	movi	r5,4
    e268:	0021883a 	mov	r16,zero
    e26c:	002f883a 	mov	r23,zero
    e270:	07000044 	movi	fp,1
    e274:	003f6606 	br	e010 <__alt_data_end+0xfffb88e0>
    e278:	01400304 	movi	r5,12
    e27c:	070000c4 	movi	fp,3
    e280:	003f6306 	br	e010 <__alt_data_end+0xfffb88e0>
    e284:	04000434 	movhi	r16,16
    e288:	0027883a 	mov	r19,zero
    e28c:	843fffc4 	addi	r16,r16,-1
    e290:	05ffffc4 	movi	r23,-1
    e294:	0101ffc4 	movi	r4,2047
    e298:	003f9706 	br	e0f8 <__alt_data_end+0xfffb89c8>
    e29c:	8821883a 	mov	r16,r17
    e2a0:	902f883a 	mov	r23,r18
    e2a4:	5013883a 	mov	r9,r10
    e2a8:	3839883a 	mov	fp,r7
    e2ac:	003f8c06 	br	e0e0 <__alt_data_end+0xfffb89b0>
    e2b0:	8821883a 	mov	r16,r17
    e2b4:	902f883a 	mov	r23,r18
    e2b8:	3013883a 	mov	r9,r6
    e2bc:	3839883a 	mov	fp,r7
    e2c0:	003f8706 	br	e0e0 <__alt_data_end+0xfffb89b0>
    e2c4:	b82ad43a 	srli	r21,r23,16
    e2c8:	9038d43a 	srli	fp,r18,16
    e2cc:	bdffffcc 	andi	r23,r23,65535
    e2d0:	94bfffcc 	andi	r18,r18,65535
    e2d4:	9009883a 	mov	r4,r18
    e2d8:	b80b883a 	mov	r5,r23
    e2dc:	d8c00515 	stw	r3,20(sp)
    e2e0:	d9800715 	stw	r6,28(sp)
    e2e4:	da000615 	stw	r8,24(sp)
    e2e8:	000cb080 	call	cb08 <__mulsi3>
    e2ec:	9009883a 	mov	r4,r18
    e2f0:	a80b883a 	mov	r5,r21
    e2f4:	1029883a 	mov	r20,r2
    e2f8:	000cb080 	call	cb08 <__mulsi3>
    e2fc:	e009883a 	mov	r4,fp
    e300:	a80b883a 	mov	r5,r21
    e304:	102d883a 	mov	r22,r2
    e308:	000cb080 	call	cb08 <__mulsi3>
    e30c:	e009883a 	mov	r4,fp
    e310:	b80b883a 	mov	r5,r23
    e314:	1027883a 	mov	r19,r2
    e318:	000cb080 	call	cb08 <__mulsi3>
    e31c:	a008d43a 	srli	r4,r20,16
    e320:	b085883a 	add	r2,r22,r2
    e324:	d8c00517 	ldw	r3,20(sp)
    e328:	110f883a 	add	r7,r2,r4
    e32c:	d9800717 	ldw	r6,28(sp)
    e330:	da000617 	ldw	r8,24(sp)
    e334:	3d80022e 	bgeu	r7,r22,e340 <__muldf3+0x3b0>
    e338:	00800074 	movhi	r2,1
    e33c:	98a7883a 	add	r19,r19,r2
    e340:	3804943a 	slli	r2,r7,16
    e344:	380ed43a 	srli	r7,r7,16
    e348:	882cd43a 	srli	r22,r17,16
    e34c:	a53fffcc 	andi	r20,r20,65535
    e350:	8c7fffcc 	andi	r17,r17,65535
    e354:	1529883a 	add	r20,r2,r20
    e358:	8809883a 	mov	r4,r17
    e35c:	b80b883a 	mov	r5,r23
    e360:	d8c00515 	stw	r3,20(sp)
    e364:	d9800715 	stw	r6,28(sp)
    e368:	da000615 	stw	r8,24(sp)
    e36c:	d9c00015 	stw	r7,0(sp)
    e370:	dd000115 	stw	r20,4(sp)
    e374:	000cb080 	call	cb08 <__mulsi3>
    e378:	a80b883a 	mov	r5,r21
    e37c:	8809883a 	mov	r4,r17
    e380:	d8800415 	stw	r2,16(sp)
    e384:	000cb080 	call	cb08 <__mulsi3>
    e388:	a80b883a 	mov	r5,r21
    e38c:	b009883a 	mov	r4,r22
    e390:	1029883a 	mov	r20,r2
    e394:	000cb080 	call	cb08 <__mulsi3>
    e398:	b009883a 	mov	r4,r22
    e39c:	b80b883a 	mov	r5,r23
    e3a0:	102b883a 	mov	r21,r2
    e3a4:	000cb080 	call	cb08 <__mulsi3>
    e3a8:	da400417 	ldw	r9,16(sp)
    e3ac:	a085883a 	add	r2,r20,r2
    e3b0:	d8c00517 	ldw	r3,20(sp)
    e3b4:	4808d43a 	srli	r4,r9,16
    e3b8:	d9800717 	ldw	r6,28(sp)
    e3bc:	da000617 	ldw	r8,24(sp)
    e3c0:	1109883a 	add	r4,r2,r4
    e3c4:	2500022e 	bgeu	r4,r20,e3d0 <__muldf3+0x440>
    e3c8:	00800074 	movhi	r2,1
    e3cc:	a8ab883a 	add	r21,r21,r2
    e3d0:	200e943a 	slli	r7,r4,16
    e3d4:	2004d43a 	srli	r2,r4,16
    e3d8:	802ed43a 	srli	r23,r16,16
    e3dc:	843fffcc 	andi	r16,r16,65535
    e3e0:	4d3fffcc 	andi	r20,r9,65535
    e3e4:	9009883a 	mov	r4,r18
    e3e8:	800b883a 	mov	r5,r16
    e3ec:	3d29883a 	add	r20,r7,r20
    e3f0:	d8c00515 	stw	r3,20(sp)
    e3f4:	d9800715 	stw	r6,28(sp)
    e3f8:	da000615 	stw	r8,24(sp)
    e3fc:	a8ab883a 	add	r21,r21,r2
    e400:	000cb080 	call	cb08 <__mulsi3>
    e404:	9009883a 	mov	r4,r18
    e408:	b80b883a 	mov	r5,r23
    e40c:	d8800315 	stw	r2,12(sp)
    e410:	000cb080 	call	cb08 <__mulsi3>
    e414:	e009883a 	mov	r4,fp
    e418:	b80b883a 	mov	r5,r23
    e41c:	1025883a 	mov	r18,r2
    e420:	000cb080 	call	cb08 <__mulsi3>
    e424:	e009883a 	mov	r4,fp
    e428:	800b883a 	mov	r5,r16
    e42c:	d8800215 	stw	r2,8(sp)
    e430:	000cb080 	call	cb08 <__mulsi3>
    e434:	da800317 	ldw	r10,12(sp)
    e438:	d9400017 	ldw	r5,0(sp)
    e43c:	9085883a 	add	r2,r18,r2
    e440:	5008d43a 	srli	r4,r10,16
    e444:	a153883a 	add	r9,r20,r5
    e448:	d8c00517 	ldw	r3,20(sp)
    e44c:	1109883a 	add	r4,r2,r4
    e450:	d9800717 	ldw	r6,28(sp)
    e454:	da000617 	ldw	r8,24(sp)
    e458:	dac00217 	ldw	r11,8(sp)
    e45c:	2480022e 	bgeu	r4,r18,e468 <__muldf3+0x4d8>
    e460:	00800074 	movhi	r2,1
    e464:	5897883a 	add	r11,r11,r2
    e468:	200e943a 	slli	r7,r4,16
    e46c:	2038d43a 	srli	fp,r4,16
    e470:	52bfffcc 	andi	r10,r10,65535
    e474:	3a8f883a 	add	r7,r7,r10
    e478:	8809883a 	mov	r4,r17
    e47c:	800b883a 	mov	r5,r16
    e480:	d8c00515 	stw	r3,20(sp)
    e484:	d9800715 	stw	r6,28(sp)
    e488:	d9c00215 	stw	r7,8(sp)
    e48c:	da000615 	stw	r8,24(sp)
    e490:	da400415 	stw	r9,16(sp)
    e494:	5f39883a 	add	fp,r11,fp
    e498:	000cb080 	call	cb08 <__mulsi3>
    e49c:	8809883a 	mov	r4,r17
    e4a0:	b80b883a 	mov	r5,r23
    e4a4:	1025883a 	mov	r18,r2
    e4a8:	000cb080 	call	cb08 <__mulsi3>
    e4ac:	b009883a 	mov	r4,r22
    e4b0:	b80b883a 	mov	r5,r23
    e4b4:	d8800315 	stw	r2,12(sp)
    e4b8:	000cb080 	call	cb08 <__mulsi3>
    e4bc:	b009883a 	mov	r4,r22
    e4c0:	800b883a 	mov	r5,r16
    e4c4:	1023883a 	mov	r17,r2
    e4c8:	000cb080 	call	cb08 <__mulsi3>
    e4cc:	da800317 	ldw	r10,12(sp)
    e4d0:	9008d43a 	srli	r4,r18,16
    e4d4:	d8c00517 	ldw	r3,20(sp)
    e4d8:	5085883a 	add	r2,r10,r2
    e4dc:	1109883a 	add	r4,r2,r4
    e4e0:	d9800717 	ldw	r6,28(sp)
    e4e4:	d9c00217 	ldw	r7,8(sp)
    e4e8:	da000617 	ldw	r8,24(sp)
    e4ec:	da400417 	ldw	r9,16(sp)
    e4f0:	2280022e 	bgeu	r4,r10,e4fc <__muldf3+0x56c>
    e4f4:	00800074 	movhi	r2,1
    e4f8:	88a3883a 	add	r17,r17,r2
    e4fc:	2004943a 	slli	r2,r4,16
    e500:	94bfffcc 	andi	r18,r18,65535
    e504:	4ce7883a 	add	r19,r9,r19
    e508:	14a5883a 	add	r18,r2,r18
    e50c:	9d29803a 	cmpltu	r20,r19,r20
    e510:	9565883a 	add	r18,r18,r21
    e514:	9505883a 	add	r2,r18,r20
    e518:	99e7883a 	add	r19,r19,r7
    e51c:	99cf803a 	cmpltu	r7,r19,r7
    e520:	e08b883a 	add	r5,fp,r2
    e524:	2008d43a 	srli	r4,r4,16
    e528:	29ef883a 	add	r23,r5,r7
    e52c:	1529803a 	cmpltu	r20,r2,r20
    e530:	956b803a 	cmpltu	r21,r18,r21
    e534:	b9cf803a 	cmpltu	r7,r23,r7
    e538:	a564b03a 	or	r18,r20,r21
    e53c:	2f39803a 	cmpltu	fp,r5,fp
    e540:	9125883a 	add	r18,r18,r4
    e544:	3f38b03a 	or	fp,r7,fp
    e548:	9725883a 	add	r18,r18,fp
    e54c:	9804927a 	slli	r2,r19,9
    e550:	9463883a 	add	r17,r18,r17
    e554:	d9000117 	ldw	r4,4(sp)
    e558:	b820d5fa 	srli	r16,r23,23
    e55c:	8822927a 	slli	r17,r17,9
    e560:	9826d5fa 	srli	r19,r19,23
    e564:	1104b03a 	or	r2,r2,r4
    e568:	b82e927a 	slli	r23,r23,9
    e56c:	1004c03a 	cmpne	r2,r2,zero
    e570:	8c20b03a 	or	r16,r17,r16
    e574:	14e6b03a 	or	r19,r2,r19
    e578:	8080402c 	andhi	r2,r16,256
    e57c:	9deeb03a 	or	r23,r19,r23
    e580:	10000726 	beq	r2,zero,e5a0 <__muldf3+0x610>
    e584:	b804d07a 	srli	r2,r23,1
    e588:	800697fa 	slli	r3,r16,31
    e58c:	bdc0004c 	andi	r23,r23,1
    e590:	8020d07a 	srli	r16,r16,1
    e594:	b8aeb03a 	or	r23,r23,r2
    e598:	b8eeb03a 	or	r23,r23,r3
    e59c:	4007883a 	mov	r3,r8
    e5a0:	1900ffc4 	addi	r4,r3,1023
    e5a4:	01004d0e 	bge	zero,r4,e6dc <__muldf3+0x74c>
    e5a8:	b88001cc 	andi	r2,r23,7
    e5ac:	10000726 	beq	r2,zero,e5cc <__muldf3+0x63c>
    e5b0:	b94003cc 	andi	r5,r23,15
    e5b4:	00800104 	movi	r2,4
    e5b8:	28800426 	beq	r5,r2,e5cc <__muldf3+0x63c>
    e5bc:	b885883a 	add	r2,r23,r2
    e5c0:	15ef803a 	cmpltu	r23,r2,r23
    e5c4:	85e1883a 	add	r16,r16,r23
    e5c8:	102f883a 	mov	r23,r2
    e5cc:	8080402c 	andhi	r2,r16,256
    e5d0:	10000426 	beq	r2,zero,e5e4 <__muldf3+0x654>
    e5d4:	00bfc034 	movhi	r2,65280
    e5d8:	10bfffc4 	addi	r2,r2,-1
    e5dc:	19010004 	addi	r4,r3,1024
    e5e0:	80a0703a 	and	r16,r16,r2
    e5e4:	0081ff84 	movi	r2,2046
    e5e8:	1100340e 	bge	r2,r4,e6bc <__muldf3+0x72c>
    e5ec:	34c0004c 	andi	r19,r6,1
    e5f0:	0101ffc4 	movi	r4,2047
    e5f4:	0021883a 	mov	r16,zero
    e5f8:	002f883a 	mov	r23,zero
    e5fc:	003ebe06 	br	e0f8 <__alt_data_end+0xfffb89c8>
    e600:	8080022c 	andhi	r2,r16,8
    e604:	10000926 	beq	r2,zero,e62c <__muldf3+0x69c>
    e608:	8880022c 	andhi	r2,r17,8
    e60c:	1000071e 	bne	r2,zero,e62c <__muldf3+0x69c>
    e610:	00800434 	movhi	r2,16
    e614:	8c000234 	orhi	r16,r17,8
    e618:	10bfffc4 	addi	r2,r2,-1
    e61c:	b027883a 	mov	r19,r22
    e620:	80a0703a 	and	r16,r16,r2
    e624:	902f883a 	mov	r23,r18
    e628:	003f1a06 	br	e294 <__alt_data_end+0xfffb8b64>
    e62c:	00800434 	movhi	r2,16
    e630:	84000234 	orhi	r16,r16,8
    e634:	10bfffc4 	addi	r2,r2,-1
    e638:	80a0703a 	and	r16,r16,r2
    e63c:	003f1506 	br	e294 <__alt_data_end+0xfffb8b64>
    e640:	3009883a 	mov	r4,r6
    e644:	d9400215 	stw	r5,8(sp)
    e648:	d9800715 	stw	r6,28(sp)
    e64c:	da400415 	stw	r9,16(sp)
    e650:	da800315 	stw	r10,12(sp)
    e654:	000f2c80 	call	f2c8 <__clzsi2>
    e658:	10c00804 	addi	r3,r2,32
    e65c:	010009c4 	movi	r4,39
    e660:	d9400217 	ldw	r5,8(sp)
    e664:	d9800717 	ldw	r6,28(sp)
    e668:	da400417 	ldw	r9,16(sp)
    e66c:	da800317 	ldw	r10,12(sp)
    e670:	20fee20e 	bge	r4,r3,e1fc <__alt_data_end+0xfffb8acc>
    e674:	147ffe04 	addi	r17,r2,-8
    e678:	9462983a 	sll	r17,r18,r17
    e67c:	0025883a 	mov	r18,zero
    e680:	003ee506 	br	e218 <__alt_data_end+0xfffb8ae8>
    e684:	d9800715 	stw	r6,28(sp)
    e688:	d9c00215 	stw	r7,8(sp)
    e68c:	da400415 	stw	r9,16(sp)
    e690:	000f2c80 	call	f2c8 <__clzsi2>
    e694:	10c00804 	addi	r3,r2,32
    e698:	010009c4 	movi	r4,39
    e69c:	d9800717 	ldw	r6,28(sp)
    e6a0:	d9c00217 	ldw	r7,8(sp)
    e6a4:	da400417 	ldw	r9,16(sp)
    e6a8:	20feb40e 	bge	r4,r3,e17c <__alt_data_end+0xfffb8a4c>
    e6ac:	143ffe04 	addi	r16,r2,-8
    e6b0:	9420983a 	sll	r16,r18,r16
    e6b4:	002f883a 	mov	r23,zero
    e6b8:	003eb706 	br	e198 <__alt_data_end+0xfffb8a68>
    e6bc:	8004977a 	slli	r2,r16,29
    e6c0:	b82ed0fa 	srli	r23,r23,3
    e6c4:	8020927a 	slli	r16,r16,9
    e6c8:	2101ffcc 	andi	r4,r4,2047
    e6cc:	15eeb03a 	or	r23,r2,r23
    e6d0:	8020d33a 	srli	r16,r16,12
    e6d4:	34c0004c 	andi	r19,r6,1
    e6d8:	003e8706 	br	e0f8 <__alt_data_end+0xfffb89c8>
    e6dc:	00bf0084 	movi	r2,-1022
    e6e0:	10c5c83a 	sub	r2,r2,r3
    e6e4:	01000e04 	movi	r4,56
    e6e8:	2080080e 	bge	r4,r2,e70c <__muldf3+0x77c>
    e6ec:	34c0004c 	andi	r19,r6,1
    e6f0:	0009883a 	mov	r4,zero
    e6f4:	0021883a 	mov	r16,zero
    e6f8:	002f883a 	mov	r23,zero
    e6fc:	003e7e06 	br	e0f8 <__alt_data_end+0xfffb89c8>
    e700:	4007883a 	mov	r3,r8
    e704:	480d883a 	mov	r6,r9
    e708:	003fa506 	br	e5a0 <__alt_data_end+0xfffb8e70>
    e70c:	010007c4 	movi	r4,31
    e710:	20801816 	blt	r4,r2,e774 <__muldf3+0x7e4>
    e714:	18c10784 	addi	r3,r3,1054
    e718:	80c8983a 	sll	r4,r16,r3
    e71c:	b88ad83a 	srl	r5,r23,r2
    e720:	b8c6983a 	sll	r3,r23,r3
    e724:	80a0d83a 	srl	r16,r16,r2
    e728:	2908b03a 	or	r4,r5,r4
    e72c:	1804c03a 	cmpne	r2,r3,zero
    e730:	2088b03a 	or	r4,r4,r2
    e734:	208001cc 	andi	r2,r4,7
    e738:	10000726 	beq	r2,zero,e758 <__muldf3+0x7c8>
    e73c:	20c003cc 	andi	r3,r4,15
    e740:	00800104 	movi	r2,4
    e744:	18800426 	beq	r3,r2,e758 <__muldf3+0x7c8>
    e748:	20c00104 	addi	r3,r4,4
    e74c:	1905803a 	cmpltu	r2,r3,r4
    e750:	80a1883a 	add	r16,r16,r2
    e754:	1809883a 	mov	r4,r3
    e758:	8080202c 	andhi	r2,r16,128
    e75c:	10001b26 	beq	r2,zero,e7cc <__muldf3+0x83c>
    e760:	34c0004c 	andi	r19,r6,1
    e764:	01000044 	movi	r4,1
    e768:	0021883a 	mov	r16,zero
    e76c:	002f883a 	mov	r23,zero
    e770:	003e6106 	br	e0f8 <__alt_data_end+0xfffb89c8>
    e774:	013ef884 	movi	r4,-1054
    e778:	20c9c83a 	sub	r4,r4,r3
    e77c:	01400804 	movi	r5,32
    e780:	8108d83a 	srl	r4,r16,r4
    e784:	11401526 	beq	r2,r5,e7dc <__muldf3+0x84c>
    e788:	18c10f84 	addi	r3,r3,1086
    e78c:	80e0983a 	sll	r16,r16,r3
    e790:	85eeb03a 	or	r23,r16,r23
    e794:	b804c03a 	cmpne	r2,r23,zero
    e798:	1108b03a 	or	r4,r2,r4
    e79c:	20c001cc 	andi	r3,r4,7
    e7a0:	1800061e 	bne	r3,zero,e7bc <__muldf3+0x82c>
    e7a4:	0021883a 	mov	r16,zero
    e7a8:	202ed0fa 	srli	r23,r4,3
    e7ac:	34c0004c 	andi	r19,r6,1
    e7b0:	0009883a 	mov	r4,zero
    e7b4:	b8eeb03a 	or	r23,r23,r3
    e7b8:	003e4f06 	br	e0f8 <__alt_data_end+0xfffb89c8>
    e7bc:	20c003cc 	andi	r3,r4,15
    e7c0:	00800104 	movi	r2,4
    e7c4:	0021883a 	mov	r16,zero
    e7c8:	18bfdf1e 	bne	r3,r2,e748 <__alt_data_end+0xfffb9018>
    e7cc:	8004927a 	slli	r2,r16,9
    e7d0:	8006977a 	slli	r3,r16,29
    e7d4:	1020d33a 	srli	r16,r2,12
    e7d8:	003ff306 	br	e7a8 <__alt_data_end+0xfffb9078>
    e7dc:	0021883a 	mov	r16,zero
    e7e0:	003feb06 	br	e790 <__alt_data_end+0xfffb9060>
    e7e4:	00800434 	movhi	r2,16
    e7e8:	84000234 	orhi	r16,r16,8
    e7ec:	10bfffc4 	addi	r2,r2,-1
    e7f0:	4cc0004c 	andi	r19,r9,1
    e7f4:	80a0703a 	and	r16,r16,r2
    e7f8:	003ea606 	br	e294 <__alt_data_end+0xfffb8b64>

0000e7fc <__subdf3>:
    e7fc:	00c00434 	movhi	r3,16
    e800:	18ffffc4 	addi	r3,r3,-1
    e804:	defffb04 	addi	sp,sp,-20
    e808:	28d2703a 	and	r9,r5,r3
    e80c:	3814d53a 	srli	r10,r7,20
    e810:	38c6703a 	and	r3,r7,r3
    e814:	3004d77a 	srli	r2,r6,29
    e818:	dc800215 	stw	r18,8(sp)
    e81c:	dc000015 	stw	r16,0(sp)
    e820:	2824d7fa 	srli	r18,r5,31
    e824:	2820d53a 	srli	r16,r5,20
    e828:	481290fa 	slli	r9,r9,3
    e82c:	200ad77a 	srli	r5,r4,29
    e830:	180690fa 	slli	r3,r3,3
    e834:	dc400115 	stw	r17,4(sp)
    e838:	dfc00415 	stw	ra,16(sp)
    e83c:	202290fa 	slli	r17,r4,3
    e840:	dcc00315 	stw	r19,12(sp)
    e844:	5281ffcc 	andi	r10,r10,2047
    e848:	0101ffc4 	movi	r4,2047
    e84c:	9011883a 	mov	r8,r18
    e850:	8401ffcc 	andi	r16,r16,2047
    e854:	94803fcc 	andi	r18,r18,255
    e858:	494ab03a 	or	r5,r9,r5
    e85c:	380ed7fa 	srli	r7,r7,31
    e860:	1886b03a 	or	r3,r3,r2
    e864:	300c90fa 	slli	r6,r6,3
    e868:	51009026 	beq	r10,r4,eaac <__subdf3+0x2b0>
    e86c:	39c0005c 	xori	r7,r7,1
    e870:	8285c83a 	sub	r2,r16,r10
    e874:	91c06f26 	beq	r18,r7,ea34 <__subdf3+0x238>
    e878:	0080b10e 	bge	zero,r2,eb40 <__subdf3+0x344>
    e87c:	50002a1e 	bne	r10,zero,e928 <__subdf3+0x12c>
    e880:	1988b03a 	or	r4,r3,r6
    e884:	2000941e 	bne	r4,zero,ead8 <__subdf3+0x2dc>
    e888:	888001cc 	andi	r2,r17,7
    e88c:	10005b26 	beq	r2,zero,e9fc <__subdf3+0x200>
    e890:	88c003cc 	andi	r3,r17,15
    e894:	00800104 	movi	r2,4
    e898:	18805826 	beq	r3,r2,e9fc <__subdf3+0x200>
    e89c:	88c00104 	addi	r3,r17,4
    e8a0:	1c63803a 	cmpltu	r17,r3,r17
    e8a4:	2c4b883a 	add	r5,r5,r17
    e8a8:	2880202c 	andhi	r2,r5,128
    e8ac:	9200004c 	andi	r8,r18,1
    e8b0:	1823883a 	mov	r17,r3
    e8b4:	10005426 	beq	r2,zero,ea08 <__subdf3+0x20c>
    e8b8:	84000044 	addi	r16,r16,1
    e8bc:	0081ffc4 	movi	r2,2047
    e8c0:	8080bf26 	beq	r16,r2,ebc0 <__subdf3+0x3c4>
    e8c4:	013fe034 	movhi	r4,65408
    e8c8:	213fffc4 	addi	r4,r4,-1
    e8cc:	290a703a 	and	r5,r5,r4
    e8d0:	2804977a 	slli	r2,r5,29
    e8d4:	280a927a 	slli	r5,r5,9
    e8d8:	8822d0fa 	srli	r17,r17,3
    e8dc:	8401ffcc 	andi	r16,r16,2047
    e8e0:	2808d33a 	srli	r4,r5,12
    e8e4:	1444b03a 	or	r2,r2,r17
    e8e8:	8401ffcc 	andi	r16,r16,2047
    e8ec:	800a953a 	slli	r5,r16,20
    e8f0:	40c03fcc 	andi	r3,r8,255
    e8f4:	04000434 	movhi	r16,16
    e8f8:	180697fa 	slli	r3,r3,31
    e8fc:	843fffc4 	addi	r16,r16,-1
    e900:	2420703a 	and	r16,r4,r16
    e904:	8160b03a 	or	r16,r16,r5
    e908:	80c6b03a 	or	r3,r16,r3
    e90c:	dfc00417 	ldw	ra,16(sp)
    e910:	dcc00317 	ldw	r19,12(sp)
    e914:	dc800217 	ldw	r18,8(sp)
    e918:	dc400117 	ldw	r17,4(sp)
    e91c:	dc000017 	ldw	r16,0(sp)
    e920:	dec00504 	addi	sp,sp,20
    e924:	f800283a 	ret
    e928:	0101ffc4 	movi	r4,2047
    e92c:	813fd626 	beq	r16,r4,e888 <__alt_data_end+0xfffb9158>
    e930:	18c02034 	orhi	r3,r3,128
    e934:	01000e04 	movi	r4,56
    e938:	2080a416 	blt	r4,r2,ebcc <__subdf3+0x3d0>
    e93c:	010007c4 	movi	r4,31
    e940:	2080c716 	blt	r4,r2,ec60 <__subdf3+0x464>
    e944:	01000804 	movi	r4,32
    e948:	2089c83a 	sub	r4,r4,r2
    e94c:	1910983a 	sll	r8,r3,r4
    e950:	308ed83a 	srl	r7,r6,r2
    e954:	3108983a 	sll	r4,r6,r4
    e958:	1884d83a 	srl	r2,r3,r2
    e95c:	41ccb03a 	or	r6,r8,r7
    e960:	2008c03a 	cmpne	r4,r4,zero
    e964:	310cb03a 	or	r6,r6,r4
    e968:	898dc83a 	sub	r6,r17,r6
    e96c:	89a3803a 	cmpltu	r17,r17,r6
    e970:	288bc83a 	sub	r5,r5,r2
    e974:	2c4bc83a 	sub	r5,r5,r17
    e978:	3023883a 	mov	r17,r6
    e97c:	2880202c 	andhi	r2,r5,128
    e980:	10006b26 	beq	r2,zero,eb30 <__subdf3+0x334>
    e984:	04c02034 	movhi	r19,128
    e988:	9cffffc4 	addi	r19,r19,-1
    e98c:	2ce6703a 	and	r19,r5,r19
    e990:	98007c26 	beq	r19,zero,eb84 <__subdf3+0x388>
    e994:	9809883a 	mov	r4,r19
    e998:	000f2c80 	call	f2c8 <__clzsi2>
    e99c:	10fffe04 	addi	r3,r2,-8
    e9a0:	010007c4 	movi	r4,31
    e9a4:	20c07d16 	blt	r4,r3,eb9c <__subdf3+0x3a0>
    e9a8:	01400a04 	movi	r5,40
    e9ac:	2885c83a 	sub	r2,r5,r2
    e9b0:	888ad83a 	srl	r5,r17,r2
    e9b4:	98e6983a 	sll	r19,r19,r3
    e9b8:	88e2983a 	sll	r17,r17,r3
    e9bc:	2ce6b03a 	or	r19,r5,r19
    e9c0:	1c007a16 	blt	r3,r16,ebac <__subdf3+0x3b0>
    e9c4:	1c21c83a 	sub	r16,r3,r16
    e9c8:	81400044 	addi	r5,r16,1
    e9cc:	00c007c4 	movi	r3,31
    e9d0:	19409616 	blt	r3,r5,ec2c <__subdf3+0x430>
    e9d4:	1c21c83a 	sub	r16,r3,r16
    e9d8:	8c08983a 	sll	r4,r17,r16
    e9dc:	8946d83a 	srl	r3,r17,r5
    e9e0:	9c20983a 	sll	r16,r19,r16
    e9e4:	2008c03a 	cmpne	r4,r4,zero
    e9e8:	994ad83a 	srl	r5,r19,r5
    e9ec:	1c06b03a 	or	r3,r3,r16
    e9f0:	1922b03a 	or	r17,r3,r4
    e9f4:	0021883a 	mov	r16,zero
    e9f8:	003fa306 	br	e888 <__alt_data_end+0xfffb9158>
    e9fc:	2880202c 	andhi	r2,r5,128
    ea00:	9200004c 	andi	r8,r18,1
    ea04:	103fac1e 	bne	r2,zero,e8b8 <__alt_data_end+0xfffb9188>
    ea08:	2804977a 	slli	r2,r5,29
    ea0c:	8822d0fa 	srli	r17,r17,3
    ea10:	00c1ffc4 	movi	r3,2047
    ea14:	280ad0fa 	srli	r5,r5,3
    ea18:	1444b03a 	or	r2,r2,r17
    ea1c:	80c02726 	beq	r16,r3,eabc <__subdf3+0x2c0>
    ea20:	01000434 	movhi	r4,16
    ea24:	213fffc4 	addi	r4,r4,-1
    ea28:	80e0703a 	and	r16,r16,r3
    ea2c:	2908703a 	and	r4,r5,r4
    ea30:	003fad06 	br	e8e8 <__alt_data_end+0xfffb91b8>
    ea34:	0080690e 	bge	zero,r2,ebdc <__subdf3+0x3e0>
    ea38:	50002f26 	beq	r10,zero,eaf8 <__subdf3+0x2fc>
    ea3c:	0101ffc4 	movi	r4,2047
    ea40:	813f9126 	beq	r16,r4,e888 <__alt_data_end+0xfffb9158>
    ea44:	18c02034 	orhi	r3,r3,128
    ea48:	01000e04 	movi	r4,56
    ea4c:	2080b00e 	bge	r4,r2,ed10 <__subdf3+0x514>
    ea50:	198cb03a 	or	r6,r3,r6
    ea54:	300ec03a 	cmpne	r7,r6,zero
    ea58:	0005883a 	mov	r2,zero
    ea5c:	3c4f883a 	add	r7,r7,r17
    ea60:	3c63803a 	cmpltu	r17,r7,r17
    ea64:	114b883a 	add	r5,r2,r5
    ea68:	2c4b883a 	add	r5,r5,r17
    ea6c:	3823883a 	mov	r17,r7
    ea70:	2880202c 	andhi	r2,r5,128
    ea74:	10002e26 	beq	r2,zero,eb30 <__subdf3+0x334>
    ea78:	84000044 	addi	r16,r16,1
    ea7c:	0081ffc4 	movi	r2,2047
    ea80:	8080de26 	beq	r16,r2,edfc <__subdf3+0x600>
    ea84:	00bfe034 	movhi	r2,65408
    ea88:	10bfffc4 	addi	r2,r2,-1
    ea8c:	288a703a 	and	r5,r5,r2
    ea90:	880cd07a 	srli	r6,r17,1
    ea94:	280897fa 	slli	r4,r5,31
    ea98:	88c0004c 	andi	r3,r17,1
    ea9c:	30e2b03a 	or	r17,r6,r3
    eaa0:	280ad07a 	srli	r5,r5,1
    eaa4:	8922b03a 	or	r17,r17,r4
    eaa8:	003f7706 	br	e888 <__alt_data_end+0xfffb9158>
    eaac:	1984b03a 	or	r2,r3,r6
    eab0:	103f6e26 	beq	r2,zero,e86c <__alt_data_end+0xfffb913c>
    eab4:	39c03fcc 	andi	r7,r7,255
    eab8:	003f6d06 	br	e870 <__alt_data_end+0xfffb9140>
    eabc:	1146b03a 	or	r3,r2,r5
    eac0:	18003f26 	beq	r3,zero,ebc0 <__subdf3+0x3c4>
    eac4:	00c00434 	movhi	r3,16
    eac8:	29000234 	orhi	r4,r5,8
    eacc:	18ffffc4 	addi	r3,r3,-1
    ead0:	20c8703a 	and	r4,r4,r3
    ead4:	003f8406 	br	e8e8 <__alt_data_end+0xfffb91b8>
    ead8:	10bfffc4 	addi	r2,r2,-1
    eadc:	1000501e 	bne	r2,zero,ec20 <__subdf3+0x424>
    eae0:	898fc83a 	sub	r7,r17,r6
    eae4:	89e3803a 	cmpltu	r17,r17,r7
    eae8:	28cbc83a 	sub	r5,r5,r3
    eaec:	2c4bc83a 	sub	r5,r5,r17
    eaf0:	3823883a 	mov	r17,r7
    eaf4:	003fa106 	br	e97c <__alt_data_end+0xfffb924c>
    eaf8:	1988b03a 	or	r4,r3,r6
    eafc:	203f6226 	beq	r4,zero,e888 <__alt_data_end+0xfffb9158>
    eb00:	10bfffc4 	addi	r2,r2,-1
    eb04:	10009b1e 	bne	r2,zero,ed74 <__subdf3+0x578>
    eb08:	344d883a 	add	r6,r6,r17
    eb0c:	3463803a 	cmpltu	r17,r6,r17
    eb10:	194b883a 	add	r5,r3,r5
    eb14:	2c4b883a 	add	r5,r5,r17
    eb18:	3023883a 	mov	r17,r6
    eb1c:	003fd406 	br	ea70 <__alt_data_end+0xfffb9340>
    eb20:	1106b03a 	or	r3,r2,r4
    eb24:	1800b426 	beq	r3,zero,edf8 <__subdf3+0x5fc>
    eb28:	100b883a 	mov	r5,r2
    eb2c:	2023883a 	mov	r17,r4
    eb30:	888001cc 	andi	r2,r17,7
    eb34:	103f561e 	bne	r2,zero,e890 <__alt_data_end+0xfffb9160>
    eb38:	9200004c 	andi	r8,r18,1
    eb3c:	003fb206 	br	ea08 <__alt_data_end+0xfffb92d8>
    eb40:	1000531e 	bne	r2,zero,ec90 <__subdf3+0x494>
    eb44:	80800044 	addi	r2,r16,1
    eb48:	1081ffcc 	andi	r2,r2,2047
    eb4c:	01000044 	movi	r4,1
    eb50:	2080a00e 	bge	r4,r2,edd4 <__subdf3+0x5d8>
    eb54:	8985c83a 	sub	r2,r17,r6
    eb58:	8889803a 	cmpltu	r4,r17,r2
    eb5c:	28e7c83a 	sub	r19,r5,r3
    eb60:	9927c83a 	sub	r19,r19,r4
    eb64:	9900202c 	andhi	r4,r19,128
    eb68:	20006226 	beq	r4,zero,ecf4 <__subdf3+0x4f8>
    eb6c:	3463c83a 	sub	r17,r6,r17
    eb70:	194bc83a 	sub	r5,r3,r5
    eb74:	344d803a 	cmpltu	r6,r6,r17
    eb78:	29a7c83a 	sub	r19,r5,r6
    eb7c:	3825883a 	mov	r18,r7
    eb80:	983f841e 	bne	r19,zero,e994 <__alt_data_end+0xfffb9264>
    eb84:	8809883a 	mov	r4,r17
    eb88:	000f2c80 	call	f2c8 <__clzsi2>
    eb8c:	10800804 	addi	r2,r2,32
    eb90:	10fffe04 	addi	r3,r2,-8
    eb94:	010007c4 	movi	r4,31
    eb98:	20ff830e 	bge	r4,r3,e9a8 <__alt_data_end+0xfffb9278>
    eb9c:	14fff604 	addi	r19,r2,-40
    eba0:	8ce6983a 	sll	r19,r17,r19
    eba4:	0023883a 	mov	r17,zero
    eba8:	1c3f860e 	bge	r3,r16,e9c4 <__alt_data_end+0xfffb9294>
    ebac:	017fe034 	movhi	r5,65408
    ebb0:	297fffc4 	addi	r5,r5,-1
    ebb4:	80e1c83a 	sub	r16,r16,r3
    ebb8:	994a703a 	and	r5,r19,r5
    ebbc:	003f3206 	br	e888 <__alt_data_end+0xfffb9158>
    ebc0:	0009883a 	mov	r4,zero
    ebc4:	0005883a 	mov	r2,zero
    ebc8:	003f4706 	br	e8e8 <__alt_data_end+0xfffb91b8>
    ebcc:	198cb03a 	or	r6,r3,r6
    ebd0:	300cc03a 	cmpne	r6,r6,zero
    ebd4:	0005883a 	mov	r2,zero
    ebd8:	003f6306 	br	e968 <__alt_data_end+0xfffb9238>
    ebdc:	10009d1e 	bne	r2,zero,ee54 <__subdf3+0x658>
    ebe0:	81c00044 	addi	r7,r16,1
    ebe4:	3881ffcc 	andi	r2,r7,2047
    ebe8:	02400044 	movi	r9,1
    ebec:	4880680e 	bge	r9,r2,ed90 <__subdf3+0x594>
    ebf0:	0081ffc4 	movi	r2,2047
    ebf4:	3880ae26 	beq	r7,r2,eeb0 <__subdf3+0x6b4>
    ebf8:	344d883a 	add	r6,r6,r17
    ebfc:	3463803a 	cmpltu	r17,r6,r17
    ec00:	194b883a 	add	r5,r3,r5
    ec04:	2c4b883a 	add	r5,r5,r17
    ec08:	282297fa 	slli	r17,r5,31
    ec0c:	300cd07a 	srli	r6,r6,1
    ec10:	280ad07a 	srli	r5,r5,1
    ec14:	3821883a 	mov	r16,r7
    ec18:	89a2b03a 	or	r17,r17,r6
    ec1c:	003f1a06 	br	e888 <__alt_data_end+0xfffb9158>
    ec20:	0101ffc4 	movi	r4,2047
    ec24:	813f431e 	bne	r16,r4,e934 <__alt_data_end+0xfffb9204>
    ec28:	003f1706 	br	e888 <__alt_data_end+0xfffb9158>
    ec2c:	80bff844 	addi	r2,r16,-31
    ec30:	00c00804 	movi	r3,32
    ec34:	9884d83a 	srl	r2,r19,r2
    ec38:	28c05126 	beq	r5,r3,ed80 <__subdf3+0x584>
    ec3c:	00c00fc4 	movi	r3,63
    ec40:	1c21c83a 	sub	r16,r3,r16
    ec44:	9c26983a 	sll	r19,r19,r16
    ec48:	9c62b03a 	or	r17,r19,r17
    ec4c:	8822c03a 	cmpne	r17,r17,zero
    ec50:	88a2b03a 	or	r17,r17,r2
    ec54:	000b883a 	mov	r5,zero
    ec58:	0021883a 	mov	r16,zero
    ec5c:	003fb406 	br	eb30 <__alt_data_end+0xfffb9400>
    ec60:	113ff804 	addi	r4,r2,-32
    ec64:	01c00804 	movi	r7,32
    ec68:	1908d83a 	srl	r4,r3,r4
    ec6c:	11c04626 	beq	r2,r7,ed88 <__subdf3+0x58c>
    ec70:	01c01004 	movi	r7,64
    ec74:	3885c83a 	sub	r2,r7,r2
    ec78:	1884983a 	sll	r2,r3,r2
    ec7c:	118cb03a 	or	r6,r2,r6
    ec80:	300cc03a 	cmpne	r6,r6,zero
    ec84:	310cb03a 	or	r6,r6,r4
    ec88:	0005883a 	mov	r2,zero
    ec8c:	003f3606 	br	e968 <__alt_data_end+0xfffb9238>
    ec90:	80002b26 	beq	r16,zero,ed40 <__subdf3+0x544>
    ec94:	0101ffc4 	movi	r4,2047
    ec98:	51006926 	beq	r10,r4,ee40 <__subdf3+0x644>
    ec9c:	0085c83a 	sub	r2,zero,r2
    eca0:	29402034 	orhi	r5,r5,128
    eca4:	01000e04 	movi	r4,56
    eca8:	20807d16 	blt	r4,r2,eea0 <__subdf3+0x6a4>
    ecac:	010007c4 	movi	r4,31
    ecb0:	2080d916 	blt	r4,r2,f018 <__subdf3+0x81c>
    ecb4:	01000804 	movi	r4,32
    ecb8:	2089c83a 	sub	r4,r4,r2
    ecbc:	2912983a 	sll	r9,r5,r4
    ecc0:	8890d83a 	srl	r8,r17,r2
    ecc4:	8908983a 	sll	r4,r17,r4
    ecc8:	2884d83a 	srl	r2,r5,r2
    eccc:	4a22b03a 	or	r17,r9,r8
    ecd0:	2008c03a 	cmpne	r4,r4,zero
    ecd4:	8922b03a 	or	r17,r17,r4
    ecd8:	3463c83a 	sub	r17,r6,r17
    ecdc:	1885c83a 	sub	r2,r3,r2
    ece0:	344d803a 	cmpltu	r6,r6,r17
    ece4:	118bc83a 	sub	r5,r2,r6
    ece8:	5021883a 	mov	r16,r10
    ecec:	3825883a 	mov	r18,r7
    ecf0:	003f2206 	br	e97c <__alt_data_end+0xfffb924c>
    ecf4:	9886b03a 	or	r3,r19,r2
    ecf8:	18001c1e 	bne	r3,zero,ed6c <__subdf3+0x570>
    ecfc:	0011883a 	mov	r8,zero
    ed00:	000b883a 	mov	r5,zero
    ed04:	0023883a 	mov	r17,zero
    ed08:	0021883a 	mov	r16,zero
    ed0c:	003f3e06 	br	ea08 <__alt_data_end+0xfffb92d8>
    ed10:	010007c4 	movi	r4,31
    ed14:	20803c16 	blt	r4,r2,ee08 <__subdf3+0x60c>
    ed18:	01000804 	movi	r4,32
    ed1c:	2089c83a 	sub	r4,r4,r2
    ed20:	1912983a 	sll	r9,r3,r4
    ed24:	308ed83a 	srl	r7,r6,r2
    ed28:	3108983a 	sll	r4,r6,r4
    ed2c:	1884d83a 	srl	r2,r3,r2
    ed30:	49ceb03a 	or	r7,r9,r7
    ed34:	2008c03a 	cmpne	r4,r4,zero
    ed38:	390eb03a 	or	r7,r7,r4
    ed3c:	003f4706 	br	ea5c <__alt_data_end+0xfffb932c>
    ed40:	2c48b03a 	or	r4,r5,r17
    ed44:	20003e26 	beq	r4,zero,ee40 <__subdf3+0x644>
    ed48:	0084303a 	nor	r2,zero,r2
    ed4c:	10003a1e 	bne	r2,zero,ee38 <__subdf3+0x63c>
    ed50:	3463c83a 	sub	r17,r6,r17
    ed54:	194bc83a 	sub	r5,r3,r5
    ed58:	344d803a 	cmpltu	r6,r6,r17
    ed5c:	298bc83a 	sub	r5,r5,r6
    ed60:	5021883a 	mov	r16,r10
    ed64:	3825883a 	mov	r18,r7
    ed68:	003f0406 	br	e97c <__alt_data_end+0xfffb924c>
    ed6c:	1023883a 	mov	r17,r2
    ed70:	003f0706 	br	e990 <__alt_data_end+0xfffb9260>
    ed74:	0101ffc4 	movi	r4,2047
    ed78:	813f331e 	bne	r16,r4,ea48 <__alt_data_end+0xfffb9318>
    ed7c:	003ec206 	br	e888 <__alt_data_end+0xfffb9158>
    ed80:	0027883a 	mov	r19,zero
    ed84:	003fb006 	br	ec48 <__alt_data_end+0xfffb9518>
    ed88:	0005883a 	mov	r2,zero
    ed8c:	003fbb06 	br	ec7c <__alt_data_end+0xfffb954c>
    ed90:	2c44b03a 	or	r2,r5,r17
    ed94:	80008b1e 	bne	r16,zero,efc4 <__subdf3+0x7c8>
    ed98:	1000b526 	beq	r2,zero,f070 <__subdf3+0x874>
    ed9c:	1984b03a 	or	r2,r3,r6
    eda0:	103eb926 	beq	r2,zero,e888 <__alt_data_end+0xfffb9158>
    eda4:	3449883a 	add	r4,r6,r17
    eda8:	2463803a 	cmpltu	r17,r4,r17
    edac:	194b883a 	add	r5,r3,r5
    edb0:	2c4b883a 	add	r5,r5,r17
    edb4:	2880202c 	andhi	r2,r5,128
    edb8:	2023883a 	mov	r17,r4
    edbc:	103f5c26 	beq	r2,zero,eb30 <__alt_data_end+0xfffb9400>
    edc0:	00bfe034 	movhi	r2,65408
    edc4:	10bfffc4 	addi	r2,r2,-1
    edc8:	4821883a 	mov	r16,r9
    edcc:	288a703a 	and	r5,r5,r2
    edd0:	003ead06 	br	e888 <__alt_data_end+0xfffb9158>
    edd4:	2c44b03a 	or	r2,r5,r17
    edd8:	8000291e 	bne	r16,zero,ee80 <__subdf3+0x684>
    eddc:	10004f1e 	bne	r2,zero,ef1c <__subdf3+0x720>
    ede0:	1984b03a 	or	r2,r3,r6
    ede4:	10000426 	beq	r2,zero,edf8 <__subdf3+0x5fc>
    ede8:	180b883a 	mov	r5,r3
    edec:	3023883a 	mov	r17,r6
    edf0:	3825883a 	mov	r18,r7
    edf4:	003ea406 	br	e888 <__alt_data_end+0xfffb9158>
    edf8:	0011883a 	mov	r8,zero
    edfc:	000b883a 	mov	r5,zero
    ee00:	0023883a 	mov	r17,zero
    ee04:	003f0006 	br	ea08 <__alt_data_end+0xfffb92d8>
    ee08:	11fff804 	addi	r7,r2,-32
    ee0c:	19c8d83a 	srl	r4,r3,r7
    ee10:	01c00804 	movi	r7,32
    ee14:	11c07e26 	beq	r2,r7,f010 <__subdf3+0x814>
    ee18:	01c01004 	movi	r7,64
    ee1c:	3885c83a 	sub	r2,r7,r2
    ee20:	1884983a 	sll	r2,r3,r2
    ee24:	118cb03a 	or	r6,r2,r6
    ee28:	300ec03a 	cmpne	r7,r6,zero
    ee2c:	390eb03a 	or	r7,r7,r4
    ee30:	0005883a 	mov	r2,zero
    ee34:	003f0906 	br	ea5c <__alt_data_end+0xfffb932c>
    ee38:	0101ffc4 	movi	r4,2047
    ee3c:	513f991e 	bne	r10,r4,eca4 <__alt_data_end+0xfffb9574>
    ee40:	180b883a 	mov	r5,r3
    ee44:	3023883a 	mov	r17,r6
    ee48:	5021883a 	mov	r16,r10
    ee4c:	3825883a 	mov	r18,r7
    ee50:	003e8d06 	br	e888 <__alt_data_end+0xfffb9158>
    ee54:	80001a1e 	bne	r16,zero,eec0 <__subdf3+0x6c4>
    ee58:	2c48b03a 	or	r4,r5,r17
    ee5c:	20005526 	beq	r4,zero,efb4 <__subdf3+0x7b8>
    ee60:	0084303a 	nor	r2,zero,r2
    ee64:	1000511e 	bne	r2,zero,efac <__subdf3+0x7b0>
    ee68:	89a3883a 	add	r17,r17,r6
    ee6c:	194b883a 	add	r5,r3,r5
    ee70:	898d803a 	cmpltu	r6,r17,r6
    ee74:	298b883a 	add	r5,r5,r6
    ee78:	5021883a 	mov	r16,r10
    ee7c:	003efc06 	br	ea70 <__alt_data_end+0xfffb9340>
    ee80:	1000341e 	bne	r2,zero,ef54 <__subdf3+0x758>
    ee84:	1984b03a 	or	r2,r3,r6
    ee88:	10006f26 	beq	r2,zero,f048 <__subdf3+0x84c>
    ee8c:	180b883a 	mov	r5,r3
    ee90:	3023883a 	mov	r17,r6
    ee94:	3825883a 	mov	r18,r7
    ee98:	0401ffc4 	movi	r16,2047
    ee9c:	003e7a06 	br	e888 <__alt_data_end+0xfffb9158>
    eea0:	2c62b03a 	or	r17,r5,r17
    eea4:	8822c03a 	cmpne	r17,r17,zero
    eea8:	0005883a 	mov	r2,zero
    eeac:	003f8a06 	br	ecd8 <__alt_data_end+0xfffb95a8>
    eeb0:	3821883a 	mov	r16,r7
    eeb4:	000b883a 	mov	r5,zero
    eeb8:	0023883a 	mov	r17,zero
    eebc:	003ed206 	br	ea08 <__alt_data_end+0xfffb92d8>
    eec0:	0101ffc4 	movi	r4,2047
    eec4:	51003b26 	beq	r10,r4,efb4 <__subdf3+0x7b8>
    eec8:	0085c83a 	sub	r2,zero,r2
    eecc:	29402034 	orhi	r5,r5,128
    eed0:	01000e04 	movi	r4,56
    eed4:	20806216 	blt	r4,r2,f060 <__subdf3+0x864>
    eed8:	010007c4 	movi	r4,31
    eedc:	20806b16 	blt	r4,r2,f08c <__subdf3+0x890>
    eee0:	01000804 	movi	r4,32
    eee4:	2089c83a 	sub	r4,r4,r2
    eee8:	2912983a 	sll	r9,r5,r4
    eeec:	888ed83a 	srl	r7,r17,r2
    eef0:	8908983a 	sll	r4,r17,r4
    eef4:	2884d83a 	srl	r2,r5,r2
    eef8:	49e2b03a 	or	r17,r9,r7
    eefc:	2008c03a 	cmpne	r4,r4,zero
    ef00:	8922b03a 	or	r17,r17,r4
    ef04:	89a3883a 	add	r17,r17,r6
    ef08:	10c5883a 	add	r2,r2,r3
    ef0c:	898d803a 	cmpltu	r6,r17,r6
    ef10:	118b883a 	add	r5,r2,r6
    ef14:	5021883a 	mov	r16,r10
    ef18:	003ed506 	br	ea70 <__alt_data_end+0xfffb9340>
    ef1c:	1984b03a 	or	r2,r3,r6
    ef20:	103e5926 	beq	r2,zero,e888 <__alt_data_end+0xfffb9158>
    ef24:	8989c83a 	sub	r4,r17,r6
    ef28:	8911803a 	cmpltu	r8,r17,r4
    ef2c:	28c5c83a 	sub	r2,r5,r3
    ef30:	1205c83a 	sub	r2,r2,r8
    ef34:	1200202c 	andhi	r8,r2,128
    ef38:	403ef926 	beq	r8,zero,eb20 <__alt_data_end+0xfffb93f0>
    ef3c:	3463c83a 	sub	r17,r6,r17
    ef40:	194bc83a 	sub	r5,r3,r5
    ef44:	344d803a 	cmpltu	r6,r6,r17
    ef48:	298bc83a 	sub	r5,r5,r6
    ef4c:	3825883a 	mov	r18,r7
    ef50:	003e4d06 	br	e888 <__alt_data_end+0xfffb9158>
    ef54:	1984b03a 	or	r2,r3,r6
    ef58:	10002b26 	beq	r2,zero,f008 <__subdf3+0x80c>
    ef5c:	2808d0fa 	srli	r4,r5,3
    ef60:	8822d0fa 	srli	r17,r17,3
    ef64:	280a977a 	slli	r5,r5,29
    ef68:	2080022c 	andhi	r2,r4,8
    ef6c:	2c62b03a 	or	r17,r5,r17
    ef70:	10000826 	beq	r2,zero,ef94 <__subdf3+0x798>
    ef74:	1810d0fa 	srli	r8,r3,3
    ef78:	4080022c 	andhi	r2,r8,8
    ef7c:	1000051e 	bne	r2,zero,ef94 <__subdf3+0x798>
    ef80:	300cd0fa 	srli	r6,r6,3
    ef84:	1804977a 	slli	r2,r3,29
    ef88:	4009883a 	mov	r4,r8
    ef8c:	3825883a 	mov	r18,r7
    ef90:	11a2b03a 	or	r17,r2,r6
    ef94:	880ad77a 	srli	r5,r17,29
    ef98:	200890fa 	slli	r4,r4,3
    ef9c:	882290fa 	slli	r17,r17,3
    efa0:	0401ffc4 	movi	r16,2047
    efa4:	290ab03a 	or	r5,r5,r4
    efa8:	003e3706 	br	e888 <__alt_data_end+0xfffb9158>
    efac:	0101ffc4 	movi	r4,2047
    efb0:	513fc71e 	bne	r10,r4,eed0 <__alt_data_end+0xfffb97a0>
    efb4:	180b883a 	mov	r5,r3
    efb8:	3023883a 	mov	r17,r6
    efbc:	5021883a 	mov	r16,r10
    efc0:	003e3106 	br	e888 <__alt_data_end+0xfffb9158>
    efc4:	10002d26 	beq	r2,zero,f07c <__subdf3+0x880>
    efc8:	1984b03a 	or	r2,r3,r6
    efcc:	10000e26 	beq	r2,zero,f008 <__subdf3+0x80c>
    efd0:	2808d0fa 	srli	r4,r5,3
    efd4:	8822d0fa 	srli	r17,r17,3
    efd8:	280a977a 	slli	r5,r5,29
    efdc:	2080022c 	andhi	r2,r4,8
    efe0:	2c62b03a 	or	r17,r5,r17
    efe4:	103feb26 	beq	r2,zero,ef94 <__alt_data_end+0xfffb9864>
    efe8:	180ed0fa 	srli	r7,r3,3
    efec:	3880022c 	andhi	r2,r7,8
    eff0:	103fe81e 	bne	r2,zero,ef94 <__alt_data_end+0xfffb9864>
    eff4:	300cd0fa 	srli	r6,r6,3
    eff8:	1804977a 	slli	r2,r3,29
    effc:	3809883a 	mov	r4,r7
    f000:	11a2b03a 	or	r17,r2,r6
    f004:	003fe306 	br	ef94 <__alt_data_end+0xfffb9864>
    f008:	0401ffc4 	movi	r16,2047
    f00c:	003e1e06 	br	e888 <__alt_data_end+0xfffb9158>
    f010:	0005883a 	mov	r2,zero
    f014:	003f8306 	br	ee24 <__alt_data_end+0xfffb96f4>
    f018:	113ff804 	addi	r4,r2,-32
    f01c:	02000804 	movi	r8,32
    f020:	2908d83a 	srl	r4,r5,r4
    f024:	12002526 	beq	r2,r8,f0bc <__subdf3+0x8c0>
    f028:	02001004 	movi	r8,64
    f02c:	4085c83a 	sub	r2,r8,r2
    f030:	288a983a 	sll	r5,r5,r2
    f034:	2c62b03a 	or	r17,r5,r17
    f038:	8822c03a 	cmpne	r17,r17,zero
    f03c:	8922b03a 	or	r17,r17,r4
    f040:	0005883a 	mov	r2,zero
    f044:	003f2406 	br	ecd8 <__alt_data_end+0xfffb95a8>
    f048:	01402034 	movhi	r5,128
    f04c:	0011883a 	mov	r8,zero
    f050:	297fffc4 	addi	r5,r5,-1
    f054:	047ffe04 	movi	r17,-8
    f058:	0401ffc4 	movi	r16,2047
    f05c:	003e6a06 	br	ea08 <__alt_data_end+0xfffb92d8>
    f060:	2c62b03a 	or	r17,r5,r17
    f064:	8822c03a 	cmpne	r17,r17,zero
    f068:	0005883a 	mov	r2,zero
    f06c:	003fa506 	br	ef04 <__alt_data_end+0xfffb97d4>
    f070:	180b883a 	mov	r5,r3
    f074:	3023883a 	mov	r17,r6
    f078:	003e0306 	br	e888 <__alt_data_end+0xfffb9158>
    f07c:	180b883a 	mov	r5,r3
    f080:	3023883a 	mov	r17,r6
    f084:	0401ffc4 	movi	r16,2047
    f088:	003dff06 	br	e888 <__alt_data_end+0xfffb9158>
    f08c:	113ff804 	addi	r4,r2,-32
    f090:	01c00804 	movi	r7,32
    f094:	2908d83a 	srl	r4,r5,r4
    f098:	11c00a26 	beq	r2,r7,f0c4 <__subdf3+0x8c8>
    f09c:	01c01004 	movi	r7,64
    f0a0:	3885c83a 	sub	r2,r7,r2
    f0a4:	288a983a 	sll	r5,r5,r2
    f0a8:	2c62b03a 	or	r17,r5,r17
    f0ac:	8822c03a 	cmpne	r17,r17,zero
    f0b0:	8922b03a 	or	r17,r17,r4
    f0b4:	0005883a 	mov	r2,zero
    f0b8:	003f9206 	br	ef04 <__alt_data_end+0xfffb97d4>
    f0bc:	000b883a 	mov	r5,zero
    f0c0:	003fdc06 	br	f034 <__alt_data_end+0xfffb9904>
    f0c4:	000b883a 	mov	r5,zero
    f0c8:	003ff706 	br	f0a8 <__alt_data_end+0xfffb9978>

0000f0cc <__fixdfsi>:
    f0cc:	2806d53a 	srli	r3,r5,20
    f0d0:	00800434 	movhi	r2,16
    f0d4:	10bfffc4 	addi	r2,r2,-1
    f0d8:	18c1ffcc 	andi	r3,r3,2047
    f0dc:	0180ff84 	movi	r6,1022
    f0e0:	2884703a 	and	r2,r5,r2
    f0e4:	280ad7fa 	srli	r5,r5,31
    f0e8:	30c0130e 	bge	r6,r3,f138 <__fixdfsi+0x6c>
    f0ec:	01810744 	movi	r6,1053
    f0f0:	30c00d16 	blt	r6,r3,f128 <__fixdfsi+0x5c>
    f0f4:	01810cc4 	movi	r6,1075
    f0f8:	30cdc83a 	sub	r6,r6,r3
    f0fc:	01c007c4 	movi	r7,31
    f100:	10800434 	orhi	r2,r2,16
    f104:	39800e0e 	bge	r7,r6,f140 <__fixdfsi+0x74>
    f108:	010104c4 	movi	r4,1043
    f10c:	20c7c83a 	sub	r3,r4,r3
    f110:	10c6d83a 	srl	r3,r2,r3
    f114:	29403fcc 	andi	r5,r5,255
    f118:	0145c83a 	sub	r2,zero,r5
    f11c:	1884f03a 	xor	r2,r3,r2
    f120:	1145883a 	add	r2,r2,r5
    f124:	f800283a 	ret
    f128:	00a00034 	movhi	r2,32768
    f12c:	10bfffc4 	addi	r2,r2,-1
    f130:	2885883a 	add	r2,r5,r2
    f134:	f800283a 	ret
    f138:	0005883a 	mov	r2,zero
    f13c:	f800283a 	ret
    f140:	18fefb44 	addi	r3,r3,-1043
    f144:	2188d83a 	srl	r4,r4,r6
    f148:	10c6983a 	sll	r3,r2,r3
    f14c:	20c6b03a 	or	r3,r4,r3
    f150:	003ff006 	br	f114 <__alt_data_end+0xfffb99e4>

0000f154 <__floatsidf>:
    f154:	defffd04 	addi	sp,sp,-12
    f158:	dc400115 	stw	r17,4(sp)
    f15c:	dfc00215 	stw	ra,8(sp)
    f160:	dc000015 	stw	r16,0(sp)
    f164:	2023883a 	mov	r17,r4
    f168:	20001426 	beq	r4,zero,f1bc <__floatsidf+0x68>
    f16c:	2020d7fa 	srli	r16,r4,31
    f170:	80000126 	beq	r16,zero,f178 <__floatsidf+0x24>
    f174:	0123c83a 	sub	r17,zero,r4
    f178:	8809883a 	mov	r4,r17
    f17c:	000f2c80 	call	f2c8 <__clzsi2>
    f180:	01410784 	movi	r5,1054
    f184:	00c00284 	movi	r3,10
    f188:	288bc83a 	sub	r5,r5,r2
    f18c:	18801c16 	blt	r3,r2,f200 <__floatsidf+0xac>
    f190:	00c002c4 	movi	r3,11
    f194:	1887c83a 	sub	r3,r3,r2
    f198:	88c8d83a 	srl	r4,r17,r3
    f19c:	00c00434 	movhi	r3,16
    f1a0:	18ffffc4 	addi	r3,r3,-1
    f1a4:	10800544 	addi	r2,r2,21
    f1a8:	20c8703a 	and	r4,r4,r3
    f1ac:	8884983a 	sll	r2,r17,r2
    f1b0:	28c1ffcc 	andi	r3,r5,2047
    f1b4:	800d883a 	mov	r6,r16
    f1b8:	00000406 	br	f1cc <__floatsidf+0x78>
    f1bc:	000d883a 	mov	r6,zero
    f1c0:	0007883a 	mov	r3,zero
    f1c4:	0009883a 	mov	r4,zero
    f1c8:	0005883a 	mov	r2,zero
    f1cc:	180a953a 	slli	r5,r3,20
    f1d0:	31803fcc 	andi	r6,r6,255
    f1d4:	00c00434 	movhi	r3,16
    f1d8:	300c97fa 	slli	r6,r6,31
    f1dc:	18ffffc4 	addi	r3,r3,-1
    f1e0:	20c6703a 	and	r3,r4,r3
    f1e4:	1946b03a 	or	r3,r3,r5
    f1e8:	1986b03a 	or	r3,r3,r6
    f1ec:	dfc00217 	ldw	ra,8(sp)
    f1f0:	dc400117 	ldw	r17,4(sp)
    f1f4:	dc000017 	ldw	r16,0(sp)
    f1f8:	dec00304 	addi	sp,sp,12
    f1fc:	f800283a 	ret
    f200:	10fffd44 	addi	r3,r2,-11
    f204:	88c8983a 	sll	r4,r17,r3
    f208:	00800434 	movhi	r2,16
    f20c:	10bfffc4 	addi	r2,r2,-1
    f210:	2088703a 	and	r4,r4,r2
    f214:	28c1ffcc 	andi	r3,r5,2047
    f218:	800d883a 	mov	r6,r16
    f21c:	0005883a 	mov	r2,zero
    f220:	003fea06 	br	f1cc <__alt_data_end+0xfffb9a9c>

0000f224 <__floatunsidf>:
    f224:	defffe04 	addi	sp,sp,-8
    f228:	dc000015 	stw	r16,0(sp)
    f22c:	dfc00115 	stw	ra,4(sp)
    f230:	2021883a 	mov	r16,r4
    f234:	20001026 	beq	r4,zero,f278 <__floatunsidf+0x54>
    f238:	000f2c80 	call	f2c8 <__clzsi2>
    f23c:	01410784 	movi	r5,1054
    f240:	100d883a 	mov	r6,r2
    f244:	288bc83a 	sub	r5,r5,r2
    f248:	00800284 	movi	r2,10
    f24c:	11801616 	blt	r2,r6,f2a8 <__floatunsidf+0x84>
    f250:	008002c4 	movi	r2,11
    f254:	1185c83a 	sub	r2,r2,r6
    f258:	8084d83a 	srl	r2,r16,r2
    f25c:	00c00434 	movhi	r3,16
    f260:	31c00544 	addi	r7,r6,21
    f264:	18ffffc4 	addi	r3,r3,-1
    f268:	81e0983a 	sll	r16,r16,r7
    f26c:	10cc703a 	and	r6,r2,r3
    f270:	2941ffcc 	andi	r5,r5,2047
    f274:	00000206 	br	f280 <__floatunsidf+0x5c>
    f278:	000b883a 	mov	r5,zero
    f27c:	000d883a 	mov	r6,zero
    f280:	280a953a 	slli	r5,r5,20
    f284:	00c00434 	movhi	r3,16
    f288:	18ffffc4 	addi	r3,r3,-1
    f28c:	30c6703a 	and	r3,r6,r3
    f290:	8005883a 	mov	r2,r16
    f294:	1946b03a 	or	r3,r3,r5
    f298:	dfc00117 	ldw	ra,4(sp)
    f29c:	dc000017 	ldw	r16,0(sp)
    f2a0:	dec00204 	addi	sp,sp,8
    f2a4:	f800283a 	ret
    f2a8:	31bffd44 	addi	r6,r6,-11
    f2ac:	818c983a 	sll	r6,r16,r6
    f2b0:	00800434 	movhi	r2,16
    f2b4:	10bfffc4 	addi	r2,r2,-1
    f2b8:	2941ffcc 	andi	r5,r5,2047
    f2bc:	0021883a 	mov	r16,zero
    f2c0:	308c703a 	and	r6,r6,r2
    f2c4:	003fee06 	br	f280 <__alt_data_end+0xfffb9b50>

0000f2c8 <__clzsi2>:
    f2c8:	00bfffd4 	movui	r2,65535
    f2cc:	11000b36 	bltu	r2,r4,f2fc <__clzsi2+0x34>
    f2d0:	00803fc4 	movi	r2,255
    f2d4:	1100122e 	bgeu	r2,r4,f320 <__clzsi2+0x58>
    f2d8:	00c00204 	movi	r3,8
    f2dc:	01400604 	movi	r5,24
    f2e0:	20c8d83a 	srl	r4,r4,r3
    f2e4:	00800074 	movhi	r2,1
    f2e8:	10894304 	addi	r2,r2,9484
    f2ec:	1109883a 	add	r4,r2,r4
    f2f0:	20800003 	ldbu	r2,0(r4)
    f2f4:	2885c83a 	sub	r2,r5,r2
    f2f8:	f800283a 	ret
    f2fc:	00804034 	movhi	r2,256
    f300:	10bfffc4 	addi	r2,r2,-1
    f304:	11000336 	bltu	r2,r4,f314 <__clzsi2+0x4c>
    f308:	00c00404 	movi	r3,16
    f30c:	180b883a 	mov	r5,r3
    f310:	003ff306 	br	f2e0 <__alt_data_end+0xfffb9bb0>
    f314:	00c00604 	movi	r3,24
    f318:	01400204 	movi	r5,8
    f31c:	003ff006 	br	f2e0 <__alt_data_end+0xfffb9bb0>
    f320:	0007883a 	mov	r3,zero
    f324:	01400804 	movi	r5,32
    f328:	003fed06 	br	f2e0 <__alt_data_end+0xfffb9bb0>

0000f32c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f32c:	defffe04 	addi	sp,sp,-8
    f330:	dfc00115 	stw	ra,4(sp)
    f334:	df000015 	stw	fp,0(sp)
    f338:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f33c:	00800074 	movhi	r2,1
    f340:	10904604 	addi	r2,r2,16664
    f344:	10800017 	ldw	r2,0(r2)
    f348:	10000526 	beq	r2,zero,f360 <alt_get_errno+0x34>
    f34c:	00800074 	movhi	r2,1
    f350:	10904604 	addi	r2,r2,16664
    f354:	10800017 	ldw	r2,0(r2)
    f358:	103ee83a 	callr	r2
    f35c:	00000206 	br	f368 <alt_get_errno+0x3c>
    f360:	00800074 	movhi	r2,1
    f364:	10971104 	addi	r2,r2,23620
}
    f368:	e037883a 	mov	sp,fp
    f36c:	dfc00117 	ldw	ra,4(sp)
    f370:	df000017 	ldw	fp,0(sp)
    f374:	dec00204 	addi	sp,sp,8
    f378:	f800283a 	ret

0000f37c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    f37c:	defffb04 	addi	sp,sp,-20
    f380:	dfc00415 	stw	ra,16(sp)
    f384:	df000315 	stw	fp,12(sp)
    f388:	df000304 	addi	fp,sp,12
    f38c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    f390:	e0bfff17 	ldw	r2,-4(fp)
    f394:	10000816 	blt	r2,zero,f3b8 <close+0x3c>
    f398:	e13fff17 	ldw	r4,-4(fp)
    f39c:	01400304 	movi	r5,12
    f3a0:	000cb080 	call	cb08 <__mulsi3>
    f3a4:	1007883a 	mov	r3,r2
    f3a8:	00800074 	movhi	r2,1
    f3ac:	108bc304 	addi	r2,r2,12044
    f3b0:	1885883a 	add	r2,r3,r2
    f3b4:	00000106 	br	f3bc <close+0x40>
    f3b8:	0005883a 	mov	r2,zero
    f3bc:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    f3c0:	e0bffd17 	ldw	r2,-12(fp)
    f3c4:	10001926 	beq	r2,zero,f42c <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    f3c8:	e0bffd17 	ldw	r2,-12(fp)
    f3cc:	10800017 	ldw	r2,0(r2)
    f3d0:	10800417 	ldw	r2,16(r2)
    f3d4:	10000626 	beq	r2,zero,f3f0 <close+0x74>
    f3d8:	e0bffd17 	ldw	r2,-12(fp)
    f3dc:	10800017 	ldw	r2,0(r2)
    f3e0:	10800417 	ldw	r2,16(r2)
    f3e4:	e13ffd17 	ldw	r4,-12(fp)
    f3e8:	103ee83a 	callr	r2
    f3ec:	00000106 	br	f3f4 <close+0x78>
    f3f0:	0005883a 	mov	r2,zero
    f3f4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    f3f8:	e13fff17 	ldw	r4,-4(fp)
    f3fc:	000faa00 	call	faa0 <alt_release_fd>
    if (rval < 0)
    f400:	e0bffe17 	ldw	r2,-8(fp)
    f404:	1000070e 	bge	r2,zero,f424 <close+0xa8>
    {
      ALT_ERRNO = -rval;
    f408:	000f32c0 	call	f32c <alt_get_errno>
    f40c:	1007883a 	mov	r3,r2
    f410:	e0bffe17 	ldw	r2,-8(fp)
    f414:	0085c83a 	sub	r2,zero,r2
    f418:	18800015 	stw	r2,0(r3)
      return -1;
    f41c:	00bfffc4 	movi	r2,-1
    f420:	00000706 	br	f440 <close+0xc4>
    }
    return 0;
    f424:	0005883a 	mov	r2,zero
    f428:	00000506 	br	f440 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    f42c:	000f32c0 	call	f32c <alt_get_errno>
    f430:	1007883a 	mov	r3,r2
    f434:	00801444 	movi	r2,81
    f438:	18800015 	stw	r2,0(r3)
    return -1;
    f43c:	00bfffc4 	movi	r2,-1
  }
}
    f440:	e037883a 	mov	sp,fp
    f444:	dfc00117 	ldw	ra,4(sp)
    f448:	df000017 	ldw	fp,0(sp)
    f44c:	dec00204 	addi	sp,sp,8
    f450:	f800283a 	ret

0000f454 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    f454:	defffc04 	addi	sp,sp,-16
    f458:	df000315 	stw	fp,12(sp)
    f45c:	df000304 	addi	fp,sp,12
    f460:	e13ffd15 	stw	r4,-12(fp)
    f464:	e17ffe15 	stw	r5,-8(fp)
    f468:	e1bfff15 	stw	r6,-4(fp)
  return len;
    f46c:	e0bfff17 	ldw	r2,-4(fp)
}
    f470:	e037883a 	mov	sp,fp
    f474:	df000017 	ldw	fp,0(sp)
    f478:	dec00104 	addi	sp,sp,4
    f47c:	f800283a 	ret

0000f480 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f480:	defffe04 	addi	sp,sp,-8
    f484:	dfc00115 	stw	ra,4(sp)
    f488:	df000015 	stw	fp,0(sp)
    f48c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f490:	00800074 	movhi	r2,1
    f494:	10904604 	addi	r2,r2,16664
    f498:	10800017 	ldw	r2,0(r2)
    f49c:	10000526 	beq	r2,zero,f4b4 <alt_get_errno+0x34>
    f4a0:	00800074 	movhi	r2,1
    f4a4:	10904604 	addi	r2,r2,16664
    f4a8:	10800017 	ldw	r2,0(r2)
    f4ac:	103ee83a 	callr	r2
    f4b0:	00000206 	br	f4bc <alt_get_errno+0x3c>
    f4b4:	00800074 	movhi	r2,1
    f4b8:	10971104 	addi	r2,r2,23620
}
    f4bc:	e037883a 	mov	sp,fp
    f4c0:	dfc00117 	ldw	ra,4(sp)
    f4c4:	df000017 	ldw	fp,0(sp)
    f4c8:	dec00204 	addi	sp,sp,8
    f4cc:	f800283a 	ret

0000f4d0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    f4d0:	defffb04 	addi	sp,sp,-20
    f4d4:	dfc00415 	stw	ra,16(sp)
    f4d8:	df000315 	stw	fp,12(sp)
    f4dc:	df000304 	addi	fp,sp,12
    f4e0:	e13ffe15 	stw	r4,-8(fp)
    f4e4:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f4e8:	e0bffe17 	ldw	r2,-8(fp)
    f4ec:	10000816 	blt	r2,zero,f510 <fstat+0x40>
    f4f0:	e13ffe17 	ldw	r4,-8(fp)
    f4f4:	01400304 	movi	r5,12
    f4f8:	000cb080 	call	cb08 <__mulsi3>
    f4fc:	1007883a 	mov	r3,r2
    f500:	00800074 	movhi	r2,1
    f504:	108bc304 	addi	r2,r2,12044
    f508:	1885883a 	add	r2,r3,r2
    f50c:	00000106 	br	f514 <fstat+0x44>
    f510:	0005883a 	mov	r2,zero
    f514:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    f518:	e0bffd17 	ldw	r2,-12(fp)
    f51c:	10001026 	beq	r2,zero,f560 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    f520:	e0bffd17 	ldw	r2,-12(fp)
    f524:	10800017 	ldw	r2,0(r2)
    f528:	10800817 	ldw	r2,32(r2)
    f52c:	10000726 	beq	r2,zero,f54c <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
    f530:	e0bffd17 	ldw	r2,-12(fp)
    f534:	10800017 	ldw	r2,0(r2)
    f538:	10800817 	ldw	r2,32(r2)
    f53c:	e13ffd17 	ldw	r4,-12(fp)
    f540:	e17fff17 	ldw	r5,-4(fp)
    f544:	103ee83a 	callr	r2
    f548:	00000a06 	br	f574 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    f54c:	e0bfff17 	ldw	r2,-4(fp)
    f550:	00c80004 	movi	r3,8192
    f554:	10c00115 	stw	r3,4(r2)
      return 0;
    f558:	0005883a 	mov	r2,zero
    f55c:	00000506 	br	f574 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    f560:	000f4800 	call	f480 <alt_get_errno>
    f564:	1007883a 	mov	r3,r2
    f568:	00801444 	movi	r2,81
    f56c:	18800015 	stw	r2,0(r3)
    return -1;
    f570:	00bfffc4 	movi	r2,-1
  }
}
    f574:	e037883a 	mov	sp,fp
    f578:	dfc00117 	ldw	ra,4(sp)
    f57c:	df000017 	ldw	fp,0(sp)
    f580:	dec00204 	addi	sp,sp,8
    f584:	f800283a 	ret

0000f588 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f588:	defffe04 	addi	sp,sp,-8
    f58c:	dfc00115 	stw	ra,4(sp)
    f590:	df000015 	stw	fp,0(sp)
    f594:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f598:	00800074 	movhi	r2,1
    f59c:	10904604 	addi	r2,r2,16664
    f5a0:	10800017 	ldw	r2,0(r2)
    f5a4:	10000526 	beq	r2,zero,f5bc <alt_get_errno+0x34>
    f5a8:	00800074 	movhi	r2,1
    f5ac:	10904604 	addi	r2,r2,16664
    f5b0:	10800017 	ldw	r2,0(r2)
    f5b4:	103ee83a 	callr	r2
    f5b8:	00000206 	br	f5c4 <alt_get_errno+0x3c>
    f5bc:	00800074 	movhi	r2,1
    f5c0:	10971104 	addi	r2,r2,23620
}
    f5c4:	e037883a 	mov	sp,fp
    f5c8:	dfc00117 	ldw	ra,4(sp)
    f5cc:	df000017 	ldw	fp,0(sp)
    f5d0:	dec00204 	addi	sp,sp,8
    f5d4:	f800283a 	ret

0000f5d8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    f5d8:	deffed04 	addi	sp,sp,-76
    f5dc:	dfc01215 	stw	ra,72(sp)
    f5e0:	df001115 	stw	fp,68(sp)
    f5e4:	df001104 	addi	fp,sp,68
    f5e8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f5ec:	e0bfff17 	ldw	r2,-4(fp)
    f5f0:	10000816 	blt	r2,zero,f614 <isatty+0x3c>
    f5f4:	e13fff17 	ldw	r4,-4(fp)
    f5f8:	01400304 	movi	r5,12
    f5fc:	000cb080 	call	cb08 <__mulsi3>
    f600:	1007883a 	mov	r3,r2
    f604:	00800074 	movhi	r2,1
    f608:	108bc304 	addi	r2,r2,12044
    f60c:	1885883a 	add	r2,r3,r2
    f610:	00000106 	br	f618 <isatty+0x40>
    f614:	0005883a 	mov	r2,zero
    f618:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    f61c:	e0bfef17 	ldw	r2,-68(fp)
    f620:	10000e26 	beq	r2,zero,f65c <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    f624:	e0bfef17 	ldw	r2,-68(fp)
    f628:	10800017 	ldw	r2,0(r2)
    f62c:	10800817 	ldw	r2,32(r2)
    f630:	1000021e 	bne	r2,zero,f63c <isatty+0x64>
    {
      return 1;
    f634:	00800044 	movi	r2,1
    f638:	00000d06 	br	f670 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    f63c:	e0bff004 	addi	r2,fp,-64
    f640:	e13fff17 	ldw	r4,-4(fp)
    f644:	100b883a 	mov	r5,r2
    f648:	000f4d00 	call	f4d0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    f64c:	e0bff117 	ldw	r2,-60(fp)
    f650:	10880020 	cmpeqi	r2,r2,8192
    f654:	10803fcc 	andi	r2,r2,255
    f658:	00000506 	br	f670 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    f65c:	000f5880 	call	f588 <alt_get_errno>
    f660:	1007883a 	mov	r3,r2
    f664:	00801444 	movi	r2,81
    f668:	18800015 	stw	r2,0(r3)
    return 0;
    f66c:	0005883a 	mov	r2,zero
  }
}
    f670:	e037883a 	mov	sp,fp
    f674:	dfc00117 	ldw	ra,4(sp)
    f678:	df000017 	ldw	fp,0(sp)
    f67c:	dec00204 	addi	sp,sp,8
    f680:	f800283a 	ret

0000f684 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    f684:	defffc04 	addi	sp,sp,-16
    f688:	df000315 	stw	fp,12(sp)
    f68c:	df000304 	addi	fp,sp,12
    f690:	e13ffd15 	stw	r4,-12(fp)
    f694:	e17ffe15 	stw	r5,-8(fp)
    f698:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    f69c:	e0fffe17 	ldw	r3,-8(fp)
    f6a0:	e0bffd17 	ldw	r2,-12(fp)
    f6a4:	18800c26 	beq	r3,r2,f6d8 <alt_load_section+0x54>
  {
    while( to != end )
    f6a8:	00000806 	br	f6cc <alt_load_section+0x48>
    {
      *to++ = *from++;
    f6ac:	e0bffe17 	ldw	r2,-8(fp)
    f6b0:	10c00104 	addi	r3,r2,4
    f6b4:	e0fffe15 	stw	r3,-8(fp)
    f6b8:	e0fffd17 	ldw	r3,-12(fp)
    f6bc:	19000104 	addi	r4,r3,4
    f6c0:	e13ffd15 	stw	r4,-12(fp)
    f6c4:	18c00017 	ldw	r3,0(r3)
    f6c8:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    f6cc:	e0fffe17 	ldw	r3,-8(fp)
    f6d0:	e0bfff17 	ldw	r2,-4(fp)
    f6d4:	18bff51e 	bne	r3,r2,f6ac <__alt_data_end+0xfffb9f7c>
    {
      *to++ = *from++;
    }
  }
}
    f6d8:	e037883a 	mov	sp,fp
    f6dc:	df000017 	ldw	fp,0(sp)
    f6e0:	dec00104 	addi	sp,sp,4
    f6e4:	f800283a 	ret

0000f6e8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    f6e8:	defffe04 	addi	sp,sp,-8
    f6ec:	dfc00115 	stw	ra,4(sp)
    f6f0:	df000015 	stw	fp,0(sp)
    f6f4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    f6f8:	01000074 	movhi	r4,1
    f6fc:	21104b04 	addi	r4,r4,16684
    f700:	01400074 	movhi	r5,1
    f704:	29499004 	addi	r5,r5,9792
    f708:	01800074 	movhi	r6,1
    f70c:	31904b04 	addi	r6,r6,16684
    f710:	000f6840 	call	f684 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    f714:	01000034 	movhi	r4,0
    f718:	21000804 	addi	r4,r4,32
    f71c:	01400034 	movhi	r5,0
    f720:	29400804 	addi	r5,r5,32
    f724:	01800034 	movhi	r6,0
    f728:	31808b04 	addi	r6,r6,556
    f72c:	000f6840 	call	f684 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    f730:	01000074 	movhi	r4,1
    f734:	21070304 	addi	r4,r4,7180
    f738:	01400074 	movhi	r5,1
    f73c:	29470304 	addi	r5,r5,7180
    f740:	01800074 	movhi	r6,1
    f744:	31899004 	addi	r6,r6,9792
    f748:	000f6840 	call	f684 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    f74c:	0010ae80 	call	10ae8 <alt_dcache_flush_all>
  alt_icache_flush_all();
    f750:	0010cb00 	call	10cb0 <alt_icache_flush_all>
}
    f754:	e037883a 	mov	sp,fp
    f758:	dfc00117 	ldw	ra,4(sp)
    f75c:	df000017 	ldw	fp,0(sp)
    f760:	dec00204 	addi	sp,sp,8
    f764:	f800283a 	ret

0000f768 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f768:	defffe04 	addi	sp,sp,-8
    f76c:	dfc00115 	stw	ra,4(sp)
    f770:	df000015 	stw	fp,0(sp)
    f774:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f778:	00800074 	movhi	r2,1
    f77c:	10904604 	addi	r2,r2,16664
    f780:	10800017 	ldw	r2,0(r2)
    f784:	10000526 	beq	r2,zero,f79c <alt_get_errno+0x34>
    f788:	00800074 	movhi	r2,1
    f78c:	10904604 	addi	r2,r2,16664
    f790:	10800017 	ldw	r2,0(r2)
    f794:	103ee83a 	callr	r2
    f798:	00000206 	br	f7a4 <alt_get_errno+0x3c>
    f79c:	00800074 	movhi	r2,1
    f7a0:	10971104 	addi	r2,r2,23620
}
    f7a4:	e037883a 	mov	sp,fp
    f7a8:	dfc00117 	ldw	ra,4(sp)
    f7ac:	df000017 	ldw	fp,0(sp)
    f7b0:	dec00204 	addi	sp,sp,8
    f7b4:	f800283a 	ret

0000f7b8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    f7b8:	defff904 	addi	sp,sp,-28
    f7bc:	dfc00615 	stw	ra,24(sp)
    f7c0:	df000515 	stw	fp,20(sp)
    f7c4:	df000504 	addi	fp,sp,20
    f7c8:	e13ffd15 	stw	r4,-12(fp)
    f7cc:	e17ffe15 	stw	r5,-8(fp)
    f7d0:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    f7d4:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f7d8:	e0bffd17 	ldw	r2,-12(fp)
    f7dc:	10000816 	blt	r2,zero,f800 <lseek+0x48>
    f7e0:	e13ffd17 	ldw	r4,-12(fp)
    f7e4:	01400304 	movi	r5,12
    f7e8:	000cb080 	call	cb08 <__mulsi3>
    f7ec:	1007883a 	mov	r3,r2
    f7f0:	00800074 	movhi	r2,1
    f7f4:	108bc304 	addi	r2,r2,12044
    f7f8:	1885883a 	add	r2,r3,r2
    f7fc:	00000106 	br	f804 <lseek+0x4c>
    f800:	0005883a 	mov	r2,zero
    f804:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    f808:	e0bffc17 	ldw	r2,-16(fp)
    f80c:	10001026 	beq	r2,zero,f850 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    f810:	e0bffc17 	ldw	r2,-16(fp)
    f814:	10800017 	ldw	r2,0(r2)
    f818:	10800717 	ldw	r2,28(r2)
    f81c:	10000926 	beq	r2,zero,f844 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    f820:	e0bffc17 	ldw	r2,-16(fp)
    f824:	10800017 	ldw	r2,0(r2)
    f828:	10800717 	ldw	r2,28(r2)
    f82c:	e13ffc17 	ldw	r4,-16(fp)
    f830:	e17ffe17 	ldw	r5,-8(fp)
    f834:	e1bfff17 	ldw	r6,-4(fp)
    f838:	103ee83a 	callr	r2
    f83c:	e0bffb15 	stw	r2,-20(fp)
    f840:	00000506 	br	f858 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    f844:	00bfde84 	movi	r2,-134
    f848:	e0bffb15 	stw	r2,-20(fp)
    f84c:	00000206 	br	f858 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
    f850:	00bfebc4 	movi	r2,-81
    f854:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    f858:	e0bffb17 	ldw	r2,-20(fp)
    f85c:	1000070e 	bge	r2,zero,f87c <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
    f860:	000f7680 	call	f768 <alt_get_errno>
    f864:	1007883a 	mov	r3,r2
    f868:	e0bffb17 	ldw	r2,-20(fp)
    f86c:	0085c83a 	sub	r2,zero,r2
    f870:	18800015 	stw	r2,0(r3)
    rc = -1;
    f874:	00bfffc4 	movi	r2,-1
    f878:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    f87c:	e0bffb17 	ldw	r2,-20(fp)
}
    f880:	e037883a 	mov	sp,fp
    f884:	dfc00117 	ldw	ra,4(sp)
    f888:	df000017 	ldw	fp,0(sp)
    f88c:	dec00204 	addi	sp,sp,8
    f890:	f800283a 	ret

0000f894 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    f894:	defffd04 	addi	sp,sp,-12
    f898:	dfc00215 	stw	ra,8(sp)
    f89c:	df000115 	stw	fp,4(sp)
    f8a0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    f8a4:	0009883a 	mov	r4,zero
    f8a8:	000fd880 	call	fd88 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    f8ac:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    f8b0:	000fdbc0 	call	fdbc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    f8b4:	01000074 	movhi	r4,1
    f8b8:	21098604 	addi	r4,r4,9752
    f8bc:	01400074 	movhi	r5,1
    f8c0:	29498604 	addi	r5,r5,9752
    f8c4:	01800074 	movhi	r6,1
    f8c8:	31898604 	addi	r6,r6,9752
    f8cc:	001107c0 	call	1107c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    f8d0:	0010bf80 	call	10bf8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    f8d4:	01000074 	movhi	r4,1
    f8d8:	21031504 	addi	r4,r4,3156
    f8dc:	00118680 	call	11868 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    f8e0:	d126da17 	ldw	r4,-25752(gp)
    f8e4:	d0e6db17 	ldw	r3,-25748(gp)
    f8e8:	d0a6dc17 	ldw	r2,-25744(gp)
    f8ec:	180b883a 	mov	r5,r3
    f8f0:	100d883a 	mov	r6,r2
    f8f4:	00017b80 	call	17b8 <main>
    f8f8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    f8fc:	01000044 	movi	r4,1
    f900:	000f37c0 	call	f37c <close>
  exit (result);
    f904:	e13fff17 	ldw	r4,-4(fp)
    f908:	001187c0 	call	1187c <exit>

0000f90c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    f90c:	defffe04 	addi	sp,sp,-8
    f910:	df000115 	stw	fp,4(sp)
    f914:	df000104 	addi	fp,sp,4
    f918:	e13fff15 	stw	r4,-4(fp)
}
    f91c:	e037883a 	mov	sp,fp
    f920:	df000017 	ldw	fp,0(sp)
    f924:	dec00104 	addi	sp,sp,4
    f928:	f800283a 	ret

0000f92c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    f92c:	defffe04 	addi	sp,sp,-8
    f930:	df000115 	stw	fp,4(sp)
    f934:	df000104 	addi	fp,sp,4
    f938:	e13fff15 	stw	r4,-4(fp)
}
    f93c:	e037883a 	mov	sp,fp
    f940:	df000017 	ldw	fp,0(sp)
    f944:	dec00104 	addi	sp,sp,4
    f948:	f800283a 	ret

0000f94c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f94c:	defffe04 	addi	sp,sp,-8
    f950:	dfc00115 	stw	ra,4(sp)
    f954:	df000015 	stw	fp,0(sp)
    f958:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f95c:	00800074 	movhi	r2,1
    f960:	10904604 	addi	r2,r2,16664
    f964:	10800017 	ldw	r2,0(r2)
    f968:	10000526 	beq	r2,zero,f980 <alt_get_errno+0x34>
    f96c:	00800074 	movhi	r2,1
    f970:	10904604 	addi	r2,r2,16664
    f974:	10800017 	ldw	r2,0(r2)
    f978:	103ee83a 	callr	r2
    f97c:	00000206 	br	f988 <alt_get_errno+0x3c>
    f980:	00800074 	movhi	r2,1
    f984:	10971104 	addi	r2,r2,23620
}
    f988:	e037883a 	mov	sp,fp
    f98c:	dfc00117 	ldw	ra,4(sp)
    f990:	df000017 	ldw	fp,0(sp)
    f994:	dec00204 	addi	sp,sp,8
    f998:	f800283a 	ret

0000f99c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    f99c:	defff904 	addi	sp,sp,-28
    f9a0:	dfc00615 	stw	ra,24(sp)
    f9a4:	df000515 	stw	fp,20(sp)
    f9a8:	df000504 	addi	fp,sp,20
    f9ac:	e13ffd15 	stw	r4,-12(fp)
    f9b0:	e17ffe15 	stw	r5,-8(fp)
    f9b4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f9b8:	e0bffd17 	ldw	r2,-12(fp)
    f9bc:	10000816 	blt	r2,zero,f9e0 <read+0x44>
    f9c0:	e13ffd17 	ldw	r4,-12(fp)
    f9c4:	01400304 	movi	r5,12
    f9c8:	000cb080 	call	cb08 <__mulsi3>
    f9cc:	1007883a 	mov	r3,r2
    f9d0:	00800074 	movhi	r2,1
    f9d4:	108bc304 	addi	r2,r2,12044
    f9d8:	1885883a 	add	r2,r3,r2
    f9dc:	00000106 	br	f9e4 <read+0x48>
    f9e0:	0005883a 	mov	r2,zero
    f9e4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    f9e8:	e0bffb17 	ldw	r2,-20(fp)
    f9ec:	10002226 	beq	r2,zero,fa78 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    f9f0:	e0bffb17 	ldw	r2,-20(fp)
    f9f4:	10800217 	ldw	r2,8(r2)
    f9f8:	108000cc 	andi	r2,r2,3
    f9fc:	10800060 	cmpeqi	r2,r2,1
    fa00:	1000181e 	bne	r2,zero,fa64 <read+0xc8>
        (fd->dev->read))
    fa04:	e0bffb17 	ldw	r2,-20(fp)
    fa08:	10800017 	ldw	r2,0(r2)
    fa0c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    fa10:	10001426 	beq	r2,zero,fa64 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    fa14:	e0bffb17 	ldw	r2,-20(fp)
    fa18:	10800017 	ldw	r2,0(r2)
    fa1c:	10800517 	ldw	r2,20(r2)
    fa20:	e0ffff17 	ldw	r3,-4(fp)
    fa24:	e13ffb17 	ldw	r4,-20(fp)
    fa28:	e17ffe17 	ldw	r5,-8(fp)
    fa2c:	180d883a 	mov	r6,r3
    fa30:	103ee83a 	callr	r2
    fa34:	e0bffc15 	stw	r2,-16(fp)
    fa38:	e0bffc17 	ldw	r2,-16(fp)
    fa3c:	1000070e 	bge	r2,zero,fa5c <read+0xc0>
        {
          ALT_ERRNO = -rval;
    fa40:	000f94c0 	call	f94c <alt_get_errno>
    fa44:	1007883a 	mov	r3,r2
    fa48:	e0bffc17 	ldw	r2,-16(fp)
    fa4c:	0085c83a 	sub	r2,zero,r2
    fa50:	18800015 	stw	r2,0(r3)
          return -1;
    fa54:	00bfffc4 	movi	r2,-1
    fa58:	00000c06 	br	fa8c <read+0xf0>
        }
        return rval;
    fa5c:	e0bffc17 	ldw	r2,-16(fp)
    fa60:	00000a06 	br	fa8c <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
    fa64:	000f94c0 	call	f94c <alt_get_errno>
    fa68:	1007883a 	mov	r3,r2
    fa6c:	00800344 	movi	r2,13
    fa70:	18800015 	stw	r2,0(r3)
    fa74:	00000406 	br	fa88 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    fa78:	000f94c0 	call	f94c <alt_get_errno>
    fa7c:	1007883a 	mov	r3,r2
    fa80:	00801444 	movi	r2,81
    fa84:	18800015 	stw	r2,0(r3)
  }
  return -1;
    fa88:	00bfffc4 	movi	r2,-1
}
    fa8c:	e037883a 	mov	sp,fp
    fa90:	dfc00117 	ldw	ra,4(sp)
    fa94:	df000017 	ldw	fp,0(sp)
    fa98:	dec00204 	addi	sp,sp,8
    fa9c:	f800283a 	ret

0000faa0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    faa0:	defffc04 	addi	sp,sp,-16
    faa4:	dfc00315 	stw	ra,12(sp)
    faa8:	df000215 	stw	fp,8(sp)
    faac:	dc000115 	stw	r16,4(sp)
    fab0:	df000204 	addi	fp,sp,8
    fab4:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
    fab8:	e0bffe17 	ldw	r2,-8(fp)
    fabc:	108000d0 	cmplti	r2,r2,3
    fac0:	1000111e 	bne	r2,zero,fb08 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    fac4:	04000074 	movhi	r16,1
    fac8:	840bc304 	addi	r16,r16,12044
    facc:	e0bffe17 	ldw	r2,-8(fp)
    fad0:	1009883a 	mov	r4,r2
    fad4:	01400304 	movi	r5,12
    fad8:	000cb080 	call	cb08 <__mulsi3>
    fadc:	8085883a 	add	r2,r16,r2
    fae0:	10800204 	addi	r2,r2,8
    fae4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    fae8:	04000074 	movhi	r16,1
    faec:	840bc304 	addi	r16,r16,12044
    faf0:	e0bffe17 	ldw	r2,-8(fp)
    faf4:	1009883a 	mov	r4,r2
    faf8:	01400304 	movi	r5,12
    fafc:	000cb080 	call	cb08 <__mulsi3>
    fb00:	8085883a 	add	r2,r16,r2
    fb04:	10000015 	stw	zero,0(r2)
  }
}
    fb08:	e6ffff04 	addi	sp,fp,-4
    fb0c:	dfc00217 	ldw	ra,8(sp)
    fb10:	df000117 	ldw	fp,4(sp)
    fb14:	dc000017 	ldw	r16,0(sp)
    fb18:	dec00304 	addi	sp,sp,12
    fb1c:	f800283a 	ret

0000fb20 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    fb20:	defff904 	addi	sp,sp,-28
    fb24:	df000615 	stw	fp,24(sp)
    fb28:	df000604 	addi	fp,sp,24
    fb2c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fb30:	0005303a 	rdctl	r2,status
    fb34:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fb38:	e0fffc17 	ldw	r3,-16(fp)
    fb3c:	00bfff84 	movi	r2,-2
    fb40:	1884703a 	and	r2,r3,r2
    fb44:	1001703a 	wrctl	status,r2
  
  return context;
    fb48:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    fb4c:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    fb50:	d0a00c17 	ldw	r2,-32720(gp)
    fb54:	10c000c4 	addi	r3,r2,3
    fb58:	00bfff04 	movi	r2,-4
    fb5c:	1884703a 	and	r2,r3,r2
    fb60:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    fb64:	d0e00c17 	ldw	r3,-32720(gp)
    fb68:	e0bfff17 	ldw	r2,-4(fp)
    fb6c:	1887883a 	add	r3,r3,r2
    fb70:	00800174 	movhi	r2,5
    fb74:	1095cc04 	addi	r2,r2,22320
    fb78:	10c0062e 	bgeu	r2,r3,fb94 <sbrk+0x74>
    fb7c:	e0bffa17 	ldw	r2,-24(fp)
    fb80:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fb84:	e0bffd17 	ldw	r2,-12(fp)
    fb88:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    fb8c:	00bfffc4 	movi	r2,-1
    fb90:	00000b06 	br	fbc0 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    fb94:	d0a00c17 	ldw	r2,-32720(gp)
    fb98:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
    fb9c:	d0e00c17 	ldw	r3,-32720(gp)
    fba0:	e0bfff17 	ldw	r2,-4(fp)
    fba4:	1885883a 	add	r2,r3,r2
    fba8:	d0a00c15 	stw	r2,-32720(gp)
    fbac:	e0bffa17 	ldw	r2,-24(fp)
    fbb0:	e0bffe15 	stw	r2,-8(fp)
    fbb4:	e0bffe17 	ldw	r2,-8(fp)
    fbb8:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    fbbc:	e0bffb17 	ldw	r2,-20(fp)
} 
    fbc0:	e037883a 	mov	sp,fp
    fbc4:	df000017 	ldw	fp,0(sp)
    fbc8:	dec00104 	addi	sp,sp,4
    fbcc:	f800283a 	ret

0000fbd0 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    fbd0:	defffd04 	addi	sp,sp,-12
    fbd4:	dfc00215 	stw	ra,8(sp)
    fbd8:	df000115 	stw	fp,4(sp)
    fbdc:	df000104 	addi	fp,sp,4
    fbe0:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    fbe4:	e13fff17 	ldw	r4,-4(fp)
    fbe8:	00109900 	call	10990 <alt_busy_sleep>
}
    fbec:	e037883a 	mov	sp,fp
    fbf0:	dfc00117 	ldw	ra,4(sp)
    fbf4:	df000017 	ldw	fp,0(sp)
    fbf8:	dec00204 	addi	sp,sp,8
    fbfc:	f800283a 	ret

0000fc00 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    fc00:	defffe04 	addi	sp,sp,-8
    fc04:	dfc00115 	stw	ra,4(sp)
    fc08:	df000015 	stw	fp,0(sp)
    fc0c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    fc10:	00800074 	movhi	r2,1
    fc14:	10904604 	addi	r2,r2,16664
    fc18:	10800017 	ldw	r2,0(r2)
    fc1c:	10000526 	beq	r2,zero,fc34 <alt_get_errno+0x34>
    fc20:	00800074 	movhi	r2,1
    fc24:	10904604 	addi	r2,r2,16664
    fc28:	10800017 	ldw	r2,0(r2)
    fc2c:	103ee83a 	callr	r2
    fc30:	00000206 	br	fc3c <alt_get_errno+0x3c>
    fc34:	00800074 	movhi	r2,1
    fc38:	10971104 	addi	r2,r2,23620
}
    fc3c:	e037883a 	mov	sp,fp
    fc40:	dfc00117 	ldw	ra,4(sp)
    fc44:	df000017 	ldw	fp,0(sp)
    fc48:	dec00204 	addi	sp,sp,8
    fc4c:	f800283a 	ret

0000fc50 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    fc50:	defff904 	addi	sp,sp,-28
    fc54:	dfc00615 	stw	ra,24(sp)
    fc58:	df000515 	stw	fp,20(sp)
    fc5c:	df000504 	addi	fp,sp,20
    fc60:	e13ffd15 	stw	r4,-12(fp)
    fc64:	e17ffe15 	stw	r5,-8(fp)
    fc68:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    fc6c:	e0bffd17 	ldw	r2,-12(fp)
    fc70:	10000816 	blt	r2,zero,fc94 <write+0x44>
    fc74:	e13ffd17 	ldw	r4,-12(fp)
    fc78:	01400304 	movi	r5,12
    fc7c:	000cb080 	call	cb08 <__mulsi3>
    fc80:	1007883a 	mov	r3,r2
    fc84:	00800074 	movhi	r2,1
    fc88:	108bc304 	addi	r2,r2,12044
    fc8c:	1885883a 	add	r2,r3,r2
    fc90:	00000106 	br	fc98 <write+0x48>
    fc94:	0005883a 	mov	r2,zero
    fc98:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    fc9c:	e0bffb17 	ldw	r2,-20(fp)
    fca0:	10002126 	beq	r2,zero,fd28 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    fca4:	e0bffb17 	ldw	r2,-20(fp)
    fca8:	10800217 	ldw	r2,8(r2)
    fcac:	108000cc 	andi	r2,r2,3
    fcb0:	10001826 	beq	r2,zero,fd14 <write+0xc4>
    fcb4:	e0bffb17 	ldw	r2,-20(fp)
    fcb8:	10800017 	ldw	r2,0(r2)
    fcbc:	10800617 	ldw	r2,24(r2)
    fcc0:	10001426 	beq	r2,zero,fd14 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    fcc4:	e0bffb17 	ldw	r2,-20(fp)
    fcc8:	10800017 	ldw	r2,0(r2)
    fccc:	10800617 	ldw	r2,24(r2)
    fcd0:	e0ffff17 	ldw	r3,-4(fp)
    fcd4:	e13ffb17 	ldw	r4,-20(fp)
    fcd8:	e17ffe17 	ldw	r5,-8(fp)
    fcdc:	180d883a 	mov	r6,r3
    fce0:	103ee83a 	callr	r2
    fce4:	e0bffc15 	stw	r2,-16(fp)
    fce8:	e0bffc17 	ldw	r2,-16(fp)
    fcec:	1000070e 	bge	r2,zero,fd0c <write+0xbc>
      {
        ALT_ERRNO = -rval;
    fcf0:	000fc000 	call	fc00 <alt_get_errno>
    fcf4:	1007883a 	mov	r3,r2
    fcf8:	e0bffc17 	ldw	r2,-16(fp)
    fcfc:	0085c83a 	sub	r2,zero,r2
    fd00:	18800015 	stw	r2,0(r3)
        return -1;
    fd04:	00bfffc4 	movi	r2,-1
    fd08:	00000c06 	br	fd3c <write+0xec>
      }
      return rval;
    fd0c:	e0bffc17 	ldw	r2,-16(fp)
    fd10:	00000a06 	br	fd3c <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
    fd14:	000fc000 	call	fc00 <alt_get_errno>
    fd18:	1007883a 	mov	r3,r2
    fd1c:	00800344 	movi	r2,13
    fd20:	18800015 	stw	r2,0(r3)
    fd24:	00000406 	br	fd38 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    fd28:	000fc000 	call	fc00 <alt_get_errno>
    fd2c:	1007883a 	mov	r3,r2
    fd30:	00801444 	movi	r2,81
    fd34:	18800015 	stw	r2,0(r3)
  }
  return -1;
    fd38:	00bfffc4 	movi	r2,-1
}
    fd3c:	e037883a 	mov	sp,fp
    fd40:	dfc00117 	ldw	ra,4(sp)
    fd44:	df000017 	ldw	fp,0(sp)
    fd48:	dec00204 	addi	sp,sp,8
    fd4c:	f800283a 	ret

0000fd50 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    fd50:	defffd04 	addi	sp,sp,-12
    fd54:	dfc00215 	stw	ra,8(sp)
    fd58:	df000115 	stw	fp,4(sp)
    fd5c:	df000104 	addi	fp,sp,4
    fd60:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    fd64:	e13fff17 	ldw	r4,-4(fp)
    fd68:	01400074 	movhi	r5,1
    fd6c:	29504304 	addi	r5,r5,16652
    fd70:	0010b540 	call	10b54 <alt_dev_llist_insert>
}
    fd74:	e037883a 	mov	sp,fp
    fd78:	dfc00117 	ldw	ra,4(sp)
    fd7c:	df000017 	ldw	fp,0(sp)
    fd80:	dec00204 	addi	sp,sp,8
    fd84:	f800283a 	ret

0000fd88 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    fd88:	defffd04 	addi	sp,sp,-12
    fd8c:	dfc00215 	stw	ra,8(sp)
    fd90:	df000115 	stw	fp,4(sp)
    fd94:	df000104 	addi	fp,sp,4
    fd98:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
    fd9c:	00115340 	call	11534 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    fda0:	00800044 	movi	r2,1
    fda4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    fda8:	e037883a 	mov	sp,fp
    fdac:	dfc00117 	ldw	ra,4(sp)
    fdb0:	df000017 	ldw	fp,0(sp)
    fdb4:	dec00204 	addi	sp,sp,8
    fdb8:	f800283a 	ret

0000fdbc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    fdbc:	defffe04 	addi	sp,sp,-8
    fdc0:	dfc00115 	stw	ra,4(sp)
    fdc4:	df000015 	stw	fp,0(sp)
    fdc8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    fdcc:	01000074 	movhi	r4,1
    fdd0:	210c2d04 	addi	r4,r4,12468
    fdd4:	000b883a 	mov	r5,zero
    fdd8:	01800144 	movi	r6,5
    fddc:	000ff680 	call	ff68 <altera_avalon_jtag_uart_init>
    fde0:	01000074 	movhi	r4,1
    fde4:	210c2304 	addi	r4,r4,12428
    fde8:	000fd500 	call	fd50 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
    fdec:	0001883a 	nop
}
    fdf0:	e037883a 	mov	sp,fp
    fdf4:	dfc00117 	ldw	ra,4(sp)
    fdf8:	df000017 	ldw	fp,0(sp)
    fdfc:	dec00204 	addi	sp,sp,8
    fe00:	f800283a 	ret

0000fe04 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    fe04:	defffa04 	addi	sp,sp,-24
    fe08:	dfc00515 	stw	ra,20(sp)
    fe0c:	df000415 	stw	fp,16(sp)
    fe10:	df000404 	addi	fp,sp,16
    fe14:	e13ffd15 	stw	r4,-12(fp)
    fe18:	e17ffe15 	stw	r5,-8(fp)
    fe1c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    fe20:	e0bffd17 	ldw	r2,-12(fp)
    fe24:	10800017 	ldw	r2,0(r2)
    fe28:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    fe2c:	e0bffc17 	ldw	r2,-16(fp)
    fe30:	10c00a04 	addi	r3,r2,40
    fe34:	e0bffd17 	ldw	r2,-12(fp)
    fe38:	10800217 	ldw	r2,8(r2)
    fe3c:	1809883a 	mov	r4,r3
    fe40:	e17ffe17 	ldw	r5,-8(fp)
    fe44:	e1bfff17 	ldw	r6,-4(fp)
    fe48:	100f883a 	mov	r7,r2
    fe4c:	001042c0 	call	1042c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    fe50:	e037883a 	mov	sp,fp
    fe54:	dfc00117 	ldw	ra,4(sp)
    fe58:	df000017 	ldw	fp,0(sp)
    fe5c:	dec00204 	addi	sp,sp,8
    fe60:	f800283a 	ret

0000fe64 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    fe64:	defffa04 	addi	sp,sp,-24
    fe68:	dfc00515 	stw	ra,20(sp)
    fe6c:	df000415 	stw	fp,16(sp)
    fe70:	df000404 	addi	fp,sp,16
    fe74:	e13ffd15 	stw	r4,-12(fp)
    fe78:	e17ffe15 	stw	r5,-8(fp)
    fe7c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    fe80:	e0bffd17 	ldw	r2,-12(fp)
    fe84:	10800017 	ldw	r2,0(r2)
    fe88:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    fe8c:	e0bffc17 	ldw	r2,-16(fp)
    fe90:	10c00a04 	addi	r3,r2,40
    fe94:	e0bffd17 	ldw	r2,-12(fp)
    fe98:	10800217 	ldw	r2,8(r2)
    fe9c:	1809883a 	mov	r4,r3
    fea0:	e17ffe17 	ldw	r5,-8(fp)
    fea4:	e1bfff17 	ldw	r6,-4(fp)
    fea8:	100f883a 	mov	r7,r2
    feac:	00106380 	call	10638 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    feb0:	e037883a 	mov	sp,fp
    feb4:	dfc00117 	ldw	ra,4(sp)
    feb8:	df000017 	ldw	fp,0(sp)
    febc:	dec00204 	addi	sp,sp,8
    fec0:	f800283a 	ret

0000fec4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    fec4:	defffc04 	addi	sp,sp,-16
    fec8:	dfc00315 	stw	ra,12(sp)
    fecc:	df000215 	stw	fp,8(sp)
    fed0:	df000204 	addi	fp,sp,8
    fed4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    fed8:	e0bfff17 	ldw	r2,-4(fp)
    fedc:	10800017 	ldw	r2,0(r2)
    fee0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    fee4:	e0bffe17 	ldw	r2,-8(fp)
    fee8:	10c00a04 	addi	r3,r2,40
    feec:	e0bfff17 	ldw	r2,-4(fp)
    fef0:	10800217 	ldw	r2,8(r2)
    fef4:	1809883a 	mov	r4,r3
    fef8:	100b883a 	mov	r5,r2
    fefc:	00102d80 	call	102d8 <altera_avalon_jtag_uart_close>
}
    ff00:	e037883a 	mov	sp,fp
    ff04:	dfc00117 	ldw	ra,4(sp)
    ff08:	df000017 	ldw	fp,0(sp)
    ff0c:	dec00204 	addi	sp,sp,8
    ff10:	f800283a 	ret

0000ff14 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    ff14:	defffa04 	addi	sp,sp,-24
    ff18:	dfc00515 	stw	ra,20(sp)
    ff1c:	df000415 	stw	fp,16(sp)
    ff20:	df000404 	addi	fp,sp,16
    ff24:	e13ffd15 	stw	r4,-12(fp)
    ff28:	e17ffe15 	stw	r5,-8(fp)
    ff2c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    ff30:	e0bffd17 	ldw	r2,-12(fp)
    ff34:	10800017 	ldw	r2,0(r2)
    ff38:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    ff3c:	e0bffc17 	ldw	r2,-16(fp)
    ff40:	10800a04 	addi	r2,r2,40
    ff44:	1009883a 	mov	r4,r2
    ff48:	e17ffe17 	ldw	r5,-8(fp)
    ff4c:	e1bfff17 	ldw	r6,-4(fp)
    ff50:	00103400 	call	10340 <altera_avalon_jtag_uart_ioctl>
}
    ff54:	e037883a 	mov	sp,fp
    ff58:	dfc00117 	ldw	ra,4(sp)
    ff5c:	df000017 	ldw	fp,0(sp)
    ff60:	dec00204 	addi	sp,sp,8
    ff64:	f800283a 	ret

0000ff68 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    ff68:	defffa04 	addi	sp,sp,-24
    ff6c:	dfc00515 	stw	ra,20(sp)
    ff70:	df000415 	stw	fp,16(sp)
    ff74:	df000404 	addi	fp,sp,16
    ff78:	e13ffd15 	stw	r4,-12(fp)
    ff7c:	e17ffe15 	stw	r5,-8(fp)
    ff80:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    ff84:	e0bffd17 	ldw	r2,-12(fp)
    ff88:	00c00044 	movi	r3,1
    ff8c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    ff90:	e0bffd17 	ldw	r2,-12(fp)
    ff94:	10800017 	ldw	r2,0(r2)
    ff98:	10800104 	addi	r2,r2,4
    ff9c:	1007883a 	mov	r3,r2
    ffa0:	e0bffd17 	ldw	r2,-12(fp)
    ffa4:	10800817 	ldw	r2,32(r2)
    ffa8:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    ffac:	e0fffe17 	ldw	r3,-8(fp)
    ffb0:	e0bfff17 	ldw	r2,-4(fp)
    ffb4:	d8000015 	stw	zero,0(sp)
    ffb8:	1809883a 	mov	r4,r3
    ffbc:	100b883a 	mov	r5,r2
    ffc0:	01800074 	movhi	r6,1
    ffc4:	31800b04 	addi	r6,r6,44
    ffc8:	e1fffd17 	ldw	r7,-12(fp)
    ffcc:	0010ccc0 	call	10ccc <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    ffd0:	e0bffd17 	ldw	r2,-12(fp)
    ffd4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    ffd8:	e0bffd17 	ldw	r2,-12(fp)
    ffdc:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    ffe0:	00800074 	movhi	r2,1
    ffe4:	10971904 	addi	r2,r2,23652
    ffe8:	10800017 	ldw	r2,0(r2)
    ffec:	1809883a 	mov	r4,r3
    fff0:	100b883a 	mov	r5,r2
    fff4:	01800074 	movhi	r6,1
    fff8:	31808c04 	addi	r6,r6,560
    fffc:	e1fffd17 	ldw	r7,-12(fp)
   10000:	00108500 	call	10850 <alt_alarm_start>
   10004:	1000040e 	bge	r2,zero,10018 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   10008:	e0fffd17 	ldw	r3,-12(fp)
   1000c:	00a00034 	movhi	r2,32768
   10010:	10bfffc4 	addi	r2,r2,-1
   10014:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   10018:	e037883a 	mov	sp,fp
   1001c:	dfc00117 	ldw	ra,4(sp)
   10020:	df000017 	ldw	fp,0(sp)
   10024:	dec00204 	addi	sp,sp,8
   10028:	f800283a 	ret

0001002c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   1002c:	defff804 	addi	sp,sp,-32
   10030:	df000715 	stw	fp,28(sp)
   10034:	df000704 	addi	fp,sp,28
   10038:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   1003c:	e0bfff17 	ldw	r2,-4(fp)
   10040:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   10044:	e0bffb17 	ldw	r2,-20(fp)
   10048:	10800017 	ldw	r2,0(r2)
   1004c:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   10050:	e0bffc17 	ldw	r2,-16(fp)
   10054:	10800104 	addi	r2,r2,4
   10058:	10800037 	ldwio	r2,0(r2)
   1005c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   10060:	e0bffd17 	ldw	r2,-12(fp)
   10064:	1080c00c 	andi	r2,r2,768
   10068:	1000011e 	bne	r2,zero,10070 <altera_avalon_jtag_uart_irq+0x44>
      break;
   1006c:	00006c06 	br	10220 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   10070:	e0bffd17 	ldw	r2,-12(fp)
   10074:	1080400c 	andi	r2,r2,256
   10078:	10003426 	beq	r2,zero,1014c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   1007c:	00800074 	movhi	r2,1
   10080:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   10084:	e0bffb17 	ldw	r2,-20(fp)
   10088:	10800a17 	ldw	r2,40(r2)
   1008c:	10800044 	addi	r2,r2,1
   10090:	1081ffcc 	andi	r2,r2,2047
   10094:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   10098:	e0bffb17 	ldw	r2,-20(fp)
   1009c:	10c00b17 	ldw	r3,44(r2)
   100a0:	e0bffe17 	ldw	r2,-8(fp)
   100a4:	1880011e 	bne	r3,r2,100ac <altera_avalon_jtag_uart_irq+0x80>
          break;
   100a8:	00001606 	br	10104 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   100ac:	e0bffc17 	ldw	r2,-16(fp)
   100b0:	10800037 	ldwio	r2,0(r2)
   100b4:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   100b8:	e0bff917 	ldw	r2,-28(fp)
   100bc:	10a0000c 	andi	r2,r2,32768
   100c0:	1000011e 	bne	r2,zero,100c8 <altera_avalon_jtag_uart_irq+0x9c>
          break;
   100c4:	00000f06 	br	10104 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   100c8:	e0bffb17 	ldw	r2,-20(fp)
   100cc:	10800a17 	ldw	r2,40(r2)
   100d0:	e0fff917 	ldw	r3,-28(fp)
   100d4:	1809883a 	mov	r4,r3
   100d8:	e0fffb17 	ldw	r3,-20(fp)
   100dc:	1885883a 	add	r2,r3,r2
   100e0:	10800e04 	addi	r2,r2,56
   100e4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   100e8:	e0bffb17 	ldw	r2,-20(fp)
   100ec:	10800a17 	ldw	r2,40(r2)
   100f0:	10800044 	addi	r2,r2,1
   100f4:	10c1ffcc 	andi	r3,r2,2047
   100f8:	e0bffb17 	ldw	r2,-20(fp)
   100fc:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   10100:	003fe006 	br	10084 <__alt_data_end+0xfffba954>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   10104:	e0bff917 	ldw	r2,-28(fp)
   10108:	10bfffec 	andhi	r2,r2,65535
   1010c:	10000f26 	beq	r2,zero,1014c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   10110:	e0bffb17 	ldw	r2,-20(fp)
   10114:	10c00817 	ldw	r3,32(r2)
   10118:	00bfff84 	movi	r2,-2
   1011c:	1886703a 	and	r3,r3,r2
   10120:	e0bffb17 	ldw	r2,-20(fp)
   10124:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   10128:	e0bffc17 	ldw	r2,-16(fp)
   1012c:	10800104 	addi	r2,r2,4
   10130:	1007883a 	mov	r3,r2
   10134:	e0bffb17 	ldw	r2,-20(fp)
   10138:	10800817 	ldw	r2,32(r2)
   1013c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   10140:	e0bffc17 	ldw	r2,-16(fp)
   10144:	10800104 	addi	r2,r2,4
   10148:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   1014c:	e0bffd17 	ldw	r2,-12(fp)
   10150:	1080800c 	andi	r2,r2,512
   10154:	10003126 	beq	r2,zero,1021c <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   10158:	e0bffd17 	ldw	r2,-12(fp)
   1015c:	1004d43a 	srli	r2,r2,16
   10160:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   10164:	00001406 	br	101b8 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   10168:	e0bffc17 	ldw	r2,-16(fp)
   1016c:	e0fffb17 	ldw	r3,-20(fp)
   10170:	18c00d17 	ldw	r3,52(r3)
   10174:	e13ffb17 	ldw	r4,-20(fp)
   10178:	20c7883a 	add	r3,r4,r3
   1017c:	18c20e04 	addi	r3,r3,2104
   10180:	18c00003 	ldbu	r3,0(r3)
   10184:	18c03fcc 	andi	r3,r3,255
   10188:	18c0201c 	xori	r3,r3,128
   1018c:	18ffe004 	addi	r3,r3,-128
   10190:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   10194:	e0bffb17 	ldw	r2,-20(fp)
   10198:	10800d17 	ldw	r2,52(r2)
   1019c:	10800044 	addi	r2,r2,1
   101a0:	10c1ffcc 	andi	r3,r2,2047
   101a4:	e0bffb17 	ldw	r2,-20(fp)
   101a8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   101ac:	e0bffa17 	ldw	r2,-24(fp)
   101b0:	10bfffc4 	addi	r2,r2,-1
   101b4:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   101b8:	e0bffa17 	ldw	r2,-24(fp)
   101bc:	10000526 	beq	r2,zero,101d4 <altera_avalon_jtag_uart_irq+0x1a8>
   101c0:	e0bffb17 	ldw	r2,-20(fp)
   101c4:	10c00d17 	ldw	r3,52(r2)
   101c8:	e0bffb17 	ldw	r2,-20(fp)
   101cc:	10800c17 	ldw	r2,48(r2)
   101d0:	18bfe51e 	bne	r3,r2,10168 <__alt_data_end+0xfffbaa38>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   101d4:	e0bffa17 	ldw	r2,-24(fp)
   101d8:	10001026 	beq	r2,zero,1021c <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   101dc:	e0bffb17 	ldw	r2,-20(fp)
   101e0:	10c00817 	ldw	r3,32(r2)
   101e4:	00bfff44 	movi	r2,-3
   101e8:	1886703a 	and	r3,r3,r2
   101ec:	e0bffb17 	ldw	r2,-20(fp)
   101f0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   101f4:	e0bffb17 	ldw	r2,-20(fp)
   101f8:	10800017 	ldw	r2,0(r2)
   101fc:	10800104 	addi	r2,r2,4
   10200:	1007883a 	mov	r3,r2
   10204:	e0bffb17 	ldw	r2,-20(fp)
   10208:	10800817 	ldw	r2,32(r2)
   1020c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   10210:	e0bffc17 	ldw	r2,-16(fp)
   10214:	10800104 	addi	r2,r2,4
   10218:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   1021c:	003f8c06 	br	10050 <__alt_data_end+0xfffba920>
}
   10220:	e037883a 	mov	sp,fp
   10224:	df000017 	ldw	fp,0(sp)
   10228:	dec00104 	addi	sp,sp,4
   1022c:	f800283a 	ret

00010230 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   10230:	defff804 	addi	sp,sp,-32
   10234:	df000715 	stw	fp,28(sp)
   10238:	df000704 	addi	fp,sp,28
   1023c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   10240:	e0bffb17 	ldw	r2,-20(fp)
   10244:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   10248:	e0bff917 	ldw	r2,-28(fp)
   1024c:	10800017 	ldw	r2,0(r2)
   10250:	10800104 	addi	r2,r2,4
   10254:	10800037 	ldwio	r2,0(r2)
   10258:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   1025c:	e0bffa17 	ldw	r2,-24(fp)
   10260:	1081000c 	andi	r2,r2,1024
   10264:	10000b26 	beq	r2,zero,10294 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   10268:	e0bff917 	ldw	r2,-28(fp)
   1026c:	10800017 	ldw	r2,0(r2)
   10270:	10800104 	addi	r2,r2,4
   10274:	1007883a 	mov	r3,r2
   10278:	e0bff917 	ldw	r2,-28(fp)
   1027c:	10800817 	ldw	r2,32(r2)
   10280:	10810014 	ori	r2,r2,1024
   10284:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   10288:	e0bff917 	ldw	r2,-28(fp)
   1028c:	10000915 	stw	zero,36(r2)
   10290:	00000a06 	br	102bc <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   10294:	e0bff917 	ldw	r2,-28(fp)
   10298:	10c00917 	ldw	r3,36(r2)
   1029c:	00a00034 	movhi	r2,32768
   102a0:	10bfff04 	addi	r2,r2,-4
   102a4:	10c00536 	bltu	r2,r3,102bc <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   102a8:	e0bff917 	ldw	r2,-28(fp)
   102ac:	10800917 	ldw	r2,36(r2)
   102b0:	10c00044 	addi	r3,r2,1
   102b4:	e0bff917 	ldw	r2,-28(fp)
   102b8:	10c00915 	stw	r3,36(r2)
   102bc:	00800074 	movhi	r2,1
   102c0:	10971904 	addi	r2,r2,23652
   102c4:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   102c8:	e037883a 	mov	sp,fp
   102cc:	df000017 	ldw	fp,0(sp)
   102d0:	dec00104 	addi	sp,sp,4
   102d4:	f800283a 	ret

000102d8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   102d8:	defffd04 	addi	sp,sp,-12
   102dc:	df000215 	stw	fp,8(sp)
   102e0:	df000204 	addi	fp,sp,8
   102e4:	e13ffe15 	stw	r4,-8(fp)
   102e8:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   102ec:	00000506 	br	10304 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   102f0:	e0bfff17 	ldw	r2,-4(fp)
   102f4:	1090000c 	andi	r2,r2,16384
   102f8:	10000226 	beq	r2,zero,10304 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   102fc:	00bffd44 	movi	r2,-11
   10300:	00000b06 	br	10330 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   10304:	e0bffe17 	ldw	r2,-8(fp)
   10308:	10c00d17 	ldw	r3,52(r2)
   1030c:	e0bffe17 	ldw	r2,-8(fp)
   10310:	10800c17 	ldw	r2,48(r2)
   10314:	18800526 	beq	r3,r2,1032c <altera_avalon_jtag_uart_close+0x54>
   10318:	e0bffe17 	ldw	r2,-8(fp)
   1031c:	10c00917 	ldw	r3,36(r2)
   10320:	e0bffe17 	ldw	r2,-8(fp)
   10324:	10800117 	ldw	r2,4(r2)
   10328:	18bff136 	bltu	r3,r2,102f0 <__alt_data_end+0xfffbabc0>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   1032c:	0005883a 	mov	r2,zero
}
   10330:	e037883a 	mov	sp,fp
   10334:	df000017 	ldw	fp,0(sp)
   10338:	dec00104 	addi	sp,sp,4
   1033c:	f800283a 	ret

00010340 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   10340:	defffa04 	addi	sp,sp,-24
   10344:	df000515 	stw	fp,20(sp)
   10348:	df000504 	addi	fp,sp,20
   1034c:	e13ffd15 	stw	r4,-12(fp)
   10350:	e17ffe15 	stw	r5,-8(fp)
   10354:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   10358:	00bff9c4 	movi	r2,-25
   1035c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   10360:	e0bffe17 	ldw	r2,-8(fp)
   10364:	10da8060 	cmpeqi	r3,r2,27137
   10368:	1800031e 	bne	r3,zero,10378 <altera_avalon_jtag_uart_ioctl+0x38>
   1036c:	109a80a0 	cmpeqi	r2,r2,27138
   10370:	1000191e 	bne	r2,zero,103d8 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
   10374:	00002806 	br	10418 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   10378:	e0bffd17 	ldw	r2,-12(fp)
   1037c:	10c00117 	ldw	r3,4(r2)
   10380:	00a00034 	movhi	r2,32768
   10384:	10bfffc4 	addi	r2,r2,-1
   10388:	18801226 	beq	r3,r2,103d4 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
   1038c:	e0bfff17 	ldw	r2,-4(fp)
   10390:	10800017 	ldw	r2,0(r2)
   10394:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   10398:	e0bffc17 	ldw	r2,-16(fp)
   1039c:	10800090 	cmplti	r2,r2,2
   103a0:	1000061e 	bne	r2,zero,103bc <altera_avalon_jtag_uart_ioctl+0x7c>
   103a4:	e0fffc17 	ldw	r3,-16(fp)
   103a8:	00a00034 	movhi	r2,32768
   103ac:	10bfffc4 	addi	r2,r2,-1
   103b0:	18800226 	beq	r3,r2,103bc <altera_avalon_jtag_uart_ioctl+0x7c>
   103b4:	e0bffc17 	ldw	r2,-16(fp)
   103b8:	00000206 	br	103c4 <altera_avalon_jtag_uart_ioctl+0x84>
   103bc:	00a00034 	movhi	r2,32768
   103c0:	10bfff84 	addi	r2,r2,-2
   103c4:	e0fffd17 	ldw	r3,-12(fp)
   103c8:	18800115 	stw	r2,4(r3)
      rc = 0;
   103cc:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   103d0:	00001106 	br	10418 <altera_avalon_jtag_uart_ioctl+0xd8>
   103d4:	00001006 	br	10418 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   103d8:	e0bffd17 	ldw	r2,-12(fp)
   103dc:	10c00117 	ldw	r3,4(r2)
   103e0:	00a00034 	movhi	r2,32768
   103e4:	10bfffc4 	addi	r2,r2,-1
   103e8:	18800a26 	beq	r3,r2,10414 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   103ec:	e0bffd17 	ldw	r2,-12(fp)
   103f0:	10c00917 	ldw	r3,36(r2)
   103f4:	e0bffd17 	ldw	r2,-12(fp)
   103f8:	10800117 	ldw	r2,4(r2)
   103fc:	1885803a 	cmpltu	r2,r3,r2
   10400:	10c03fcc 	andi	r3,r2,255
   10404:	e0bfff17 	ldw	r2,-4(fp)
   10408:	10c00015 	stw	r3,0(r2)
      rc = 0;
   1040c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   10410:	00000006 	br	10414 <altera_avalon_jtag_uart_ioctl+0xd4>
   10414:	0001883a 	nop

  default:
    break;
  }

  return rc;
   10418:	e0bffb17 	ldw	r2,-20(fp)
}
   1041c:	e037883a 	mov	sp,fp
   10420:	df000017 	ldw	fp,0(sp)
   10424:	dec00104 	addi	sp,sp,4
   10428:	f800283a 	ret

0001042c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   1042c:	defff304 	addi	sp,sp,-52
   10430:	dfc00c15 	stw	ra,48(sp)
   10434:	df000b15 	stw	fp,44(sp)
   10438:	df000b04 	addi	fp,sp,44
   1043c:	e13ffc15 	stw	r4,-16(fp)
   10440:	e17ffd15 	stw	r5,-12(fp)
   10444:	e1bffe15 	stw	r6,-8(fp)
   10448:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   1044c:	e0bffd17 	ldw	r2,-12(fp)
   10450:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   10454:	00004906 	br	1057c <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   10458:	e0bffc17 	ldw	r2,-16(fp)
   1045c:	10800a17 	ldw	r2,40(r2)
   10460:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   10464:	e0bffc17 	ldw	r2,-16(fp)
   10468:	10800b17 	ldw	r2,44(r2)
   1046c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   10470:	e0fff717 	ldw	r3,-36(fp)
   10474:	e0bff817 	ldw	r2,-32(fp)
   10478:	18800536 	bltu	r3,r2,10490 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   1047c:	e0fff717 	ldw	r3,-36(fp)
   10480:	e0bff817 	ldw	r2,-32(fp)
   10484:	1885c83a 	sub	r2,r3,r2
   10488:	e0bff615 	stw	r2,-40(fp)
   1048c:	00000406 	br	104a0 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   10490:	00c20004 	movi	r3,2048
   10494:	e0bff817 	ldw	r2,-32(fp)
   10498:	1885c83a 	sub	r2,r3,r2
   1049c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   104a0:	e0bff617 	ldw	r2,-40(fp)
   104a4:	1000011e 	bne	r2,zero,104ac <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
   104a8:	00001d06 	br	10520 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
   104ac:	e0fffe17 	ldw	r3,-8(fp)
   104b0:	e0bff617 	ldw	r2,-40(fp)
   104b4:	1880022e 	bgeu	r3,r2,104c0 <altera_avalon_jtag_uart_read+0x94>
        n = space;
   104b8:	e0bffe17 	ldw	r2,-8(fp)
   104bc:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   104c0:	e0bff817 	ldw	r2,-32(fp)
   104c4:	10800e04 	addi	r2,r2,56
   104c8:	e0fffc17 	ldw	r3,-16(fp)
   104cc:	1885883a 	add	r2,r3,r2
   104d0:	e13ff517 	ldw	r4,-44(fp)
   104d4:	100b883a 	mov	r5,r2
   104d8:	e1bff617 	ldw	r6,-40(fp)
   104dc:	00082e40 	call	82e4 <memcpy>
      ptr   += n;
   104e0:	e0fff517 	ldw	r3,-44(fp)
   104e4:	e0bff617 	ldw	r2,-40(fp)
   104e8:	1885883a 	add	r2,r3,r2
   104ec:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   104f0:	e0fffe17 	ldw	r3,-8(fp)
   104f4:	e0bff617 	ldw	r2,-40(fp)
   104f8:	1885c83a 	sub	r2,r3,r2
   104fc:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   10500:	e0fff817 	ldw	r3,-32(fp)
   10504:	e0bff617 	ldw	r2,-40(fp)
   10508:	1885883a 	add	r2,r3,r2
   1050c:	10c1ffcc 	andi	r3,r2,2047
   10510:	e0bffc17 	ldw	r2,-16(fp)
   10514:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   10518:	e0bffe17 	ldw	r2,-8(fp)
   1051c:	00bfce16 	blt	zero,r2,10458 <__alt_data_end+0xfffbad28>

    /* If we read any data then return it */
    if (ptr != buffer)
   10520:	e0fff517 	ldw	r3,-44(fp)
   10524:	e0bffd17 	ldw	r2,-12(fp)
   10528:	18800126 	beq	r3,r2,10530 <altera_avalon_jtag_uart_read+0x104>
      break;
   1052c:	00001506 	br	10584 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   10530:	e0bfff17 	ldw	r2,-4(fp)
   10534:	1090000c 	andi	r2,r2,16384
   10538:	10000126 	beq	r2,zero,10540 <altera_avalon_jtag_uart_read+0x114>
      break;
   1053c:	00001106 	br	10584 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   10540:	0001883a 	nop
   10544:	e0bffc17 	ldw	r2,-16(fp)
   10548:	10c00a17 	ldw	r3,40(r2)
   1054c:	e0bff717 	ldw	r2,-36(fp)
   10550:	1880051e 	bne	r3,r2,10568 <altera_avalon_jtag_uart_read+0x13c>
   10554:	e0bffc17 	ldw	r2,-16(fp)
   10558:	10c00917 	ldw	r3,36(r2)
   1055c:	e0bffc17 	ldw	r2,-16(fp)
   10560:	10800117 	ldw	r2,4(r2)
   10564:	18bff736 	bltu	r3,r2,10544 <__alt_data_end+0xfffbae14>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   10568:	e0bffc17 	ldw	r2,-16(fp)
   1056c:	10c00a17 	ldw	r3,40(r2)
   10570:	e0bff717 	ldw	r2,-36(fp)
   10574:	1880011e 	bne	r3,r2,1057c <altera_avalon_jtag_uart_read+0x150>
      break;
   10578:	00000206 	br	10584 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   1057c:	e0bffe17 	ldw	r2,-8(fp)
   10580:	00bfb516 	blt	zero,r2,10458 <__alt_data_end+0xfffbad28>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   10584:	e0fff517 	ldw	r3,-44(fp)
   10588:	e0bffd17 	ldw	r2,-12(fp)
   1058c:	18801826 	beq	r3,r2,105f0 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10590:	0005303a 	rdctl	r2,status
   10594:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10598:	e0fffa17 	ldw	r3,-24(fp)
   1059c:	00bfff84 	movi	r2,-2
   105a0:	1884703a 	and	r2,r3,r2
   105a4:	1001703a 	wrctl	status,r2
  
  return context;
   105a8:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   105ac:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   105b0:	e0bffc17 	ldw	r2,-16(fp)
   105b4:	10800817 	ldw	r2,32(r2)
   105b8:	10c00054 	ori	r3,r2,1
   105bc:	e0bffc17 	ldw	r2,-16(fp)
   105c0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   105c4:	e0bffc17 	ldw	r2,-16(fp)
   105c8:	10800017 	ldw	r2,0(r2)
   105cc:	10800104 	addi	r2,r2,4
   105d0:	1007883a 	mov	r3,r2
   105d4:	e0bffc17 	ldw	r2,-16(fp)
   105d8:	10800817 	ldw	r2,32(r2)
   105dc:	18800035 	stwio	r2,0(r3)
   105e0:	e0bff917 	ldw	r2,-28(fp)
   105e4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   105e8:	e0bffb17 	ldw	r2,-20(fp)
   105ec:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   105f0:	e0fff517 	ldw	r3,-44(fp)
   105f4:	e0bffd17 	ldw	r2,-12(fp)
   105f8:	18800426 	beq	r3,r2,1060c <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
   105fc:	e0fff517 	ldw	r3,-44(fp)
   10600:	e0bffd17 	ldw	r2,-12(fp)
   10604:	1885c83a 	sub	r2,r3,r2
   10608:	00000606 	br	10624 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
   1060c:	e0bfff17 	ldw	r2,-4(fp)
   10610:	1090000c 	andi	r2,r2,16384
   10614:	10000226 	beq	r2,zero,10620 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
   10618:	00bffd44 	movi	r2,-11
   1061c:	00000106 	br	10624 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
   10620:	00bffec4 	movi	r2,-5
}
   10624:	e037883a 	mov	sp,fp
   10628:	dfc00117 	ldw	ra,4(sp)
   1062c:	df000017 	ldw	fp,0(sp)
   10630:	dec00204 	addi	sp,sp,8
   10634:	f800283a 	ret

00010638 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   10638:	defff304 	addi	sp,sp,-52
   1063c:	dfc00c15 	stw	ra,48(sp)
   10640:	df000b15 	stw	fp,44(sp)
   10644:	df000b04 	addi	fp,sp,44
   10648:	e13ffc15 	stw	r4,-16(fp)
   1064c:	e17ffd15 	stw	r5,-12(fp)
   10650:	e1bffe15 	stw	r6,-8(fp)
   10654:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   10658:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   1065c:	e0bffd17 	ldw	r2,-12(fp)
   10660:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   10664:	00003806 	br	10748 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   10668:	e0bffc17 	ldw	r2,-16(fp)
   1066c:	10800c17 	ldw	r2,48(r2)
   10670:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
   10674:	e0bffc17 	ldw	r2,-16(fp)
   10678:	10800d17 	ldw	r2,52(r2)
   1067c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   10680:	e0fff817 	ldw	r3,-32(fp)
   10684:	e0bff517 	ldw	r2,-44(fp)
   10688:	1880062e 	bgeu	r3,r2,106a4 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   1068c:	e0fff517 	ldw	r3,-44(fp)
   10690:	e0bff817 	ldw	r2,-32(fp)
   10694:	1885c83a 	sub	r2,r3,r2
   10698:	10bfffc4 	addi	r2,r2,-1
   1069c:	e0bff615 	stw	r2,-40(fp)
   106a0:	00000b06 	br	106d0 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   106a4:	e0bff517 	ldw	r2,-44(fp)
   106a8:	10000526 	beq	r2,zero,106c0 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   106ac:	00c20004 	movi	r3,2048
   106b0:	e0bff817 	ldw	r2,-32(fp)
   106b4:	1885c83a 	sub	r2,r3,r2
   106b8:	e0bff615 	stw	r2,-40(fp)
   106bc:	00000406 	br	106d0 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   106c0:	00c1ffc4 	movi	r3,2047
   106c4:	e0bff817 	ldw	r2,-32(fp)
   106c8:	1885c83a 	sub	r2,r3,r2
   106cc:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   106d0:	e0bff617 	ldw	r2,-40(fp)
   106d4:	1000011e 	bne	r2,zero,106dc <altera_avalon_jtag_uart_write+0xa4>
        break;
   106d8:	00001d06 	br	10750 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
   106dc:	e0fffe17 	ldw	r3,-8(fp)
   106e0:	e0bff617 	ldw	r2,-40(fp)
   106e4:	1880022e 	bgeu	r3,r2,106f0 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
   106e8:	e0bffe17 	ldw	r2,-8(fp)
   106ec:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   106f0:	e0bff817 	ldw	r2,-32(fp)
   106f4:	10820e04 	addi	r2,r2,2104
   106f8:	e0fffc17 	ldw	r3,-16(fp)
   106fc:	1885883a 	add	r2,r3,r2
   10700:	1009883a 	mov	r4,r2
   10704:	e17ffd17 	ldw	r5,-12(fp)
   10708:	e1bff617 	ldw	r6,-40(fp)
   1070c:	00082e40 	call	82e4 <memcpy>
      ptr   += n;
   10710:	e0fffd17 	ldw	r3,-12(fp)
   10714:	e0bff617 	ldw	r2,-40(fp)
   10718:	1885883a 	add	r2,r3,r2
   1071c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   10720:	e0fffe17 	ldw	r3,-8(fp)
   10724:	e0bff617 	ldw	r2,-40(fp)
   10728:	1885c83a 	sub	r2,r3,r2
   1072c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   10730:	e0fff817 	ldw	r3,-32(fp)
   10734:	e0bff617 	ldw	r2,-40(fp)
   10738:	1885883a 	add	r2,r3,r2
   1073c:	10c1ffcc 	andi	r3,r2,2047
   10740:	e0bffc17 	ldw	r2,-16(fp)
   10744:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   10748:	e0bffe17 	ldw	r2,-8(fp)
   1074c:	00bfc616 	blt	zero,r2,10668 <__alt_data_end+0xfffbaf38>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10750:	0005303a 	rdctl	r2,status
   10754:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10758:	e0fffa17 	ldw	r3,-24(fp)
   1075c:	00bfff84 	movi	r2,-2
   10760:	1884703a 	and	r2,r3,r2
   10764:	1001703a 	wrctl	status,r2
  
  return context;
   10768:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   1076c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   10770:	e0bffc17 	ldw	r2,-16(fp)
   10774:	10800817 	ldw	r2,32(r2)
   10778:	10c00094 	ori	r3,r2,2
   1077c:	e0bffc17 	ldw	r2,-16(fp)
   10780:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   10784:	e0bffc17 	ldw	r2,-16(fp)
   10788:	10800017 	ldw	r2,0(r2)
   1078c:	10800104 	addi	r2,r2,4
   10790:	1007883a 	mov	r3,r2
   10794:	e0bffc17 	ldw	r2,-16(fp)
   10798:	10800817 	ldw	r2,32(r2)
   1079c:	18800035 	stwio	r2,0(r3)
   107a0:	e0bff917 	ldw	r2,-28(fp)
   107a4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   107a8:	e0bffb17 	ldw	r2,-20(fp)
   107ac:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   107b0:	e0bffe17 	ldw	r2,-8(fp)
   107b4:	0080120e 	bge	zero,r2,10800 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
   107b8:	e0bfff17 	ldw	r2,-4(fp)
   107bc:	1090000c 	andi	r2,r2,16384
   107c0:	10000126 	beq	r2,zero,107c8 <altera_avalon_jtag_uart_write+0x190>
        break;
   107c4:	00001006 	br	10808 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   107c8:	0001883a 	nop
   107cc:	e0bffc17 	ldw	r2,-16(fp)
   107d0:	10c00d17 	ldw	r3,52(r2)
   107d4:	e0bff517 	ldw	r2,-44(fp)
   107d8:	1880051e 	bne	r3,r2,107f0 <altera_avalon_jtag_uart_write+0x1b8>
   107dc:	e0bffc17 	ldw	r2,-16(fp)
   107e0:	10c00917 	ldw	r3,36(r2)
   107e4:	e0bffc17 	ldw	r2,-16(fp)
   107e8:	10800117 	ldw	r2,4(r2)
   107ec:	18bff736 	bltu	r3,r2,107cc <__alt_data_end+0xfffbb09c>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   107f0:	e0bffc17 	ldw	r2,-16(fp)
   107f4:	10800917 	ldw	r2,36(r2)
   107f8:	10000126 	beq	r2,zero,10800 <altera_avalon_jtag_uart_write+0x1c8>
         break;
   107fc:	00000206 	br	10808 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
   10800:	e0bffe17 	ldw	r2,-8(fp)
   10804:	00bf9716 	blt	zero,r2,10664 <__alt_data_end+0xfffbaf34>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   10808:	e0fffd17 	ldw	r3,-12(fp)
   1080c:	e0bff717 	ldw	r2,-36(fp)
   10810:	18800426 	beq	r3,r2,10824 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
   10814:	e0fffd17 	ldw	r3,-12(fp)
   10818:	e0bff717 	ldw	r2,-36(fp)
   1081c:	1885c83a 	sub	r2,r3,r2
   10820:	00000606 	br	1083c <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
   10824:	e0bfff17 	ldw	r2,-4(fp)
   10828:	1090000c 	andi	r2,r2,16384
   1082c:	10000226 	beq	r2,zero,10838 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
   10830:	00bffd44 	movi	r2,-11
   10834:	00000106 	br	1083c <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   10838:	00bffec4 	movi	r2,-5
}
   1083c:	e037883a 	mov	sp,fp
   10840:	dfc00117 	ldw	ra,4(sp)
   10844:	df000017 	ldw	fp,0(sp)
   10848:	dec00204 	addi	sp,sp,8
   1084c:	f800283a 	ret

00010850 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   10850:	defff504 	addi	sp,sp,-44
   10854:	df000a15 	stw	fp,40(sp)
   10858:	df000a04 	addi	fp,sp,40
   1085c:	e13ffc15 	stw	r4,-16(fp)
   10860:	e17ffd15 	stw	r5,-12(fp)
   10864:	e1bffe15 	stw	r6,-8(fp)
   10868:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   1086c:	e03ff615 	stw	zero,-40(fp)
   10870:	00800074 	movhi	r2,1
   10874:	10971904 	addi	r2,r2,23652
   10878:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   1087c:	10003f26 	beq	r2,zero,1097c <alt_alarm_start+0x12c>
  {
    if (alarm)
   10880:	e0bffc17 	ldw	r2,-16(fp)
   10884:	10003b26 	beq	r2,zero,10974 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   10888:	e0bffc17 	ldw	r2,-16(fp)
   1088c:	e0fffe17 	ldw	r3,-8(fp)
   10890:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   10894:	e0bffc17 	ldw	r2,-16(fp)
   10898:	e0ffff17 	ldw	r3,-4(fp)
   1089c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   108a0:	0005303a 	rdctl	r2,status
   108a4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   108a8:	e0fff817 	ldw	r3,-32(fp)
   108ac:	00bfff84 	movi	r2,-2
   108b0:	1884703a 	and	r2,r3,r2
   108b4:	1001703a 	wrctl	status,r2
  
  return context;
   108b8:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   108bc:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   108c0:	00800074 	movhi	r2,1
   108c4:	10971a04 	addi	r2,r2,23656
   108c8:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   108cc:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   108d0:	e0fffd17 	ldw	r3,-12(fp)
   108d4:	e0bff617 	ldw	r2,-40(fp)
   108d8:	1885883a 	add	r2,r3,r2
   108dc:	10c00044 	addi	r3,r2,1
   108e0:	e0bffc17 	ldw	r2,-16(fp)
   108e4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   108e8:	e0bffc17 	ldw	r2,-16(fp)
   108ec:	10c00217 	ldw	r3,8(r2)
   108f0:	e0bff617 	ldw	r2,-40(fp)
   108f4:	1880042e 	bgeu	r3,r2,10908 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   108f8:	e0bffc17 	ldw	r2,-16(fp)
   108fc:	00c00044 	movi	r3,1
   10900:	10c00405 	stb	r3,16(r2)
   10904:	00000206 	br	10910 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   10908:	e0bffc17 	ldw	r2,-16(fp)
   1090c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   10910:	e0fffc17 	ldw	r3,-16(fp)
   10914:	00800074 	movhi	r2,1
   10918:	10904904 	addi	r2,r2,16676
   1091c:	e0bff915 	stw	r2,-28(fp)
   10920:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   10924:	e0bffa17 	ldw	r2,-24(fp)
   10928:	e0fff917 	ldw	r3,-28(fp)
   1092c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   10930:	e0bff917 	ldw	r2,-28(fp)
   10934:	10c00017 	ldw	r3,0(r2)
   10938:	e0bffa17 	ldw	r2,-24(fp)
   1093c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   10940:	e0bff917 	ldw	r2,-28(fp)
   10944:	10800017 	ldw	r2,0(r2)
   10948:	e0fffa17 	ldw	r3,-24(fp)
   1094c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   10950:	e0bff917 	ldw	r2,-28(fp)
   10954:	e0fffa17 	ldw	r3,-24(fp)
   10958:	10c00015 	stw	r3,0(r2)
   1095c:	e0bff717 	ldw	r2,-36(fp)
   10960:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10964:	e0bffb17 	ldw	r2,-20(fp)
   10968:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   1096c:	0005883a 	mov	r2,zero
   10970:	00000306 	br	10980 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   10974:	00bffa84 	movi	r2,-22
   10978:	00000106 	br	10980 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   1097c:	00bfde84 	movi	r2,-134
  }
}
   10980:	e037883a 	mov	sp,fp
   10984:	df000017 	ldw	fp,0(sp)
   10988:	dec00104 	addi	sp,sp,4
   1098c:	f800283a 	ret

00010990 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   10990:	defffa04 	addi	sp,sp,-24
   10994:	dfc00515 	stw	ra,20(sp)
   10998:	df000415 	stw	fp,16(sp)
   1099c:	df000404 	addi	fp,sp,16
   109a0:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   109a4:	00800244 	movi	r2,9
   109a8:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   109ac:	e13ffd17 	ldw	r4,-12(fp)
   109b0:	014003f4 	movhi	r5,15
   109b4:	29509004 	addi	r5,r5,16960
   109b8:	000cb080 	call	cb08 <__mulsi3>
   109bc:	0100bef4 	movhi	r4,763
   109c0:	213c2004 	addi	r4,r4,-3968
   109c4:	100b883a 	mov	r5,r2
   109c8:	000caf80 	call	caf8 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   109cc:	01200034 	movhi	r4,32768
   109d0:	213fffc4 	addi	r4,r4,-1
   109d4:	100b883a 	mov	r5,r2
   109d8:	000caf80 	call	caf8 <__udivsi3>
   109dc:	e13fff17 	ldw	r4,-4(fp)
   109e0:	100b883a 	mov	r5,r2
   109e4:	000caf80 	call	caf8 <__udivsi3>
   109e8:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   109ec:	e0bffe17 	ldw	r2,-8(fp)
   109f0:	10002a26 	beq	r2,zero,10a9c <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   109f4:	e03ffc15 	stw	zero,-16(fp)
   109f8:	00001706 	br	10a58 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   109fc:	00a00034 	movhi	r2,32768
   10a00:	10bfffc4 	addi	r2,r2,-1
   10a04:	10bfffc4 	addi	r2,r2,-1
   10a08:	103ffe1e 	bne	r2,zero,10a04 <__alt_data_end+0xfffbb2d4>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   10a0c:	e13ffd17 	ldw	r4,-12(fp)
   10a10:	014003f4 	movhi	r5,15
   10a14:	29509004 	addi	r5,r5,16960
   10a18:	000cb080 	call	cb08 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   10a1c:	0100bef4 	movhi	r4,763
   10a20:	213c2004 	addi	r4,r4,-3968
   10a24:	100b883a 	mov	r5,r2
   10a28:	000caf80 	call	caf8 <__udivsi3>
   10a2c:	01200034 	movhi	r4,32768
   10a30:	213fffc4 	addi	r4,r4,-1
   10a34:	100b883a 	mov	r5,r2
   10a38:	000caf80 	call	caf8 <__udivsi3>
   10a3c:	1007883a 	mov	r3,r2
   10a40:	e0bfff17 	ldw	r2,-4(fp)
   10a44:	10c5c83a 	sub	r2,r2,r3
   10a48:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   10a4c:	e0bffc17 	ldw	r2,-16(fp)
   10a50:	10800044 	addi	r2,r2,1
   10a54:	e0bffc15 	stw	r2,-16(fp)
   10a58:	e0fffc17 	ldw	r3,-16(fp)
   10a5c:	e0bffe17 	ldw	r2,-8(fp)
   10a60:	18bfe616 	blt	r3,r2,109fc <__alt_data_end+0xfffbb2cc>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   10a64:	e13ffd17 	ldw	r4,-12(fp)
   10a68:	014003f4 	movhi	r5,15
   10a6c:	29509004 	addi	r5,r5,16960
   10a70:	000cb080 	call	cb08 <__mulsi3>
   10a74:	0100bef4 	movhi	r4,763
   10a78:	213c2004 	addi	r4,r4,-3968
   10a7c:	100b883a 	mov	r5,r2
   10a80:	000caf80 	call	caf8 <__udivsi3>
   10a84:	1009883a 	mov	r4,r2
   10a88:	e17fff17 	ldw	r5,-4(fp)
   10a8c:	000cb080 	call	cb08 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   10a90:	10bfffc4 	addi	r2,r2,-1
   10a94:	103ffe1e 	bne	r2,zero,10a90 <__alt_data_end+0xfffbb360>
   10a98:	00000d06 	br	10ad0 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   10a9c:	e13ffd17 	ldw	r4,-12(fp)
   10aa0:	014003f4 	movhi	r5,15
   10aa4:	29509004 	addi	r5,r5,16960
   10aa8:	000cb080 	call	cb08 <__mulsi3>
   10aac:	0100bef4 	movhi	r4,763
   10ab0:	213c2004 	addi	r4,r4,-3968
   10ab4:	100b883a 	mov	r5,r2
   10ab8:	000caf80 	call	caf8 <__udivsi3>
   10abc:	1009883a 	mov	r4,r2
   10ac0:	e17fff17 	ldw	r5,-4(fp)
   10ac4:	000cb080 	call	cb08 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   10ac8:	10bfffc4 	addi	r2,r2,-1
   10acc:	00bffe16 	blt	zero,r2,10ac8 <__alt_data_end+0xfffbb398>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   10ad0:	0005883a 	mov	r2,zero
}
   10ad4:	e037883a 	mov	sp,fp
   10ad8:	dfc00117 	ldw	ra,4(sp)
   10adc:	df000017 	ldw	fp,0(sp)
   10ae0:	dec00204 	addi	sp,sp,8
   10ae4:	f800283a 	ret

00010ae8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   10ae8:	deffff04 	addi	sp,sp,-4
   10aec:	df000015 	stw	fp,0(sp)
   10af0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   10af4:	e037883a 	mov	sp,fp
   10af8:	df000017 	ldw	fp,0(sp)
   10afc:	dec00104 	addi	sp,sp,4
   10b00:	f800283a 	ret

00010b04 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10b04:	defffe04 	addi	sp,sp,-8
   10b08:	dfc00115 	stw	ra,4(sp)
   10b0c:	df000015 	stw	fp,0(sp)
   10b10:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10b14:	00800074 	movhi	r2,1
   10b18:	10904604 	addi	r2,r2,16664
   10b1c:	10800017 	ldw	r2,0(r2)
   10b20:	10000526 	beq	r2,zero,10b38 <alt_get_errno+0x34>
   10b24:	00800074 	movhi	r2,1
   10b28:	10904604 	addi	r2,r2,16664
   10b2c:	10800017 	ldw	r2,0(r2)
   10b30:	103ee83a 	callr	r2
   10b34:	00000206 	br	10b40 <alt_get_errno+0x3c>
   10b38:	00800074 	movhi	r2,1
   10b3c:	10971104 	addi	r2,r2,23620
}
   10b40:	e037883a 	mov	sp,fp
   10b44:	dfc00117 	ldw	ra,4(sp)
   10b48:	df000017 	ldw	fp,0(sp)
   10b4c:	dec00204 	addi	sp,sp,8
   10b50:	f800283a 	ret

00010b54 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   10b54:	defffa04 	addi	sp,sp,-24
   10b58:	dfc00515 	stw	ra,20(sp)
   10b5c:	df000415 	stw	fp,16(sp)
   10b60:	df000404 	addi	fp,sp,16
   10b64:	e13ffe15 	stw	r4,-8(fp)
   10b68:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   10b6c:	e0bffe17 	ldw	r2,-8(fp)
   10b70:	10000326 	beq	r2,zero,10b80 <alt_dev_llist_insert+0x2c>
   10b74:	e0bffe17 	ldw	r2,-8(fp)
   10b78:	10800217 	ldw	r2,8(r2)
   10b7c:	1000061e 	bne	r2,zero,10b98 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   10b80:	0010b040 	call	10b04 <alt_get_errno>
   10b84:	1007883a 	mov	r3,r2
   10b88:	00800584 	movi	r2,22
   10b8c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   10b90:	00bffa84 	movi	r2,-22
   10b94:	00001306 	br	10be4 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   10b98:	e0bffe17 	ldw	r2,-8(fp)
   10b9c:	e0ffff17 	ldw	r3,-4(fp)
   10ba0:	e0fffc15 	stw	r3,-16(fp)
   10ba4:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   10ba8:	e0bffd17 	ldw	r2,-12(fp)
   10bac:	e0fffc17 	ldw	r3,-16(fp)
   10bb0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   10bb4:	e0bffc17 	ldw	r2,-16(fp)
   10bb8:	10c00017 	ldw	r3,0(r2)
   10bbc:	e0bffd17 	ldw	r2,-12(fp)
   10bc0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   10bc4:	e0bffc17 	ldw	r2,-16(fp)
   10bc8:	10800017 	ldw	r2,0(r2)
   10bcc:	e0fffd17 	ldw	r3,-12(fp)
   10bd0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   10bd4:	e0bffc17 	ldw	r2,-16(fp)
   10bd8:	e0fffd17 	ldw	r3,-12(fp)
   10bdc:	10c00015 	stw	r3,0(r2)

  return 0;  
   10be0:	0005883a 	mov	r2,zero
}
   10be4:	e037883a 	mov	sp,fp
   10be8:	dfc00117 	ldw	ra,4(sp)
   10bec:	df000017 	ldw	fp,0(sp)
   10bf0:	dec00204 	addi	sp,sp,8
   10bf4:	f800283a 	ret

00010bf8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   10bf8:	defffd04 	addi	sp,sp,-12
   10bfc:	dfc00215 	stw	ra,8(sp)
   10c00:	df000115 	stw	fp,4(sp)
   10c04:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   10c08:	00800074 	movhi	r2,1
   10c0c:	10870204 	addi	r2,r2,7176
   10c10:	e0bfff15 	stw	r2,-4(fp)
   10c14:	00000606 	br	10c30 <_do_ctors+0x38>
        (*ctor) (); 
   10c18:	e0bfff17 	ldw	r2,-4(fp)
   10c1c:	10800017 	ldw	r2,0(r2)
   10c20:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   10c24:	e0bfff17 	ldw	r2,-4(fp)
   10c28:	10bfff04 	addi	r2,r2,-4
   10c2c:	e0bfff15 	stw	r2,-4(fp)
   10c30:	e0ffff17 	ldw	r3,-4(fp)
   10c34:	00800074 	movhi	r2,1
   10c38:	10870304 	addi	r2,r2,7180
   10c3c:	18bff62e 	bgeu	r3,r2,10c18 <__alt_data_end+0xfffbb4e8>
        (*ctor) (); 
}
   10c40:	e037883a 	mov	sp,fp
   10c44:	dfc00117 	ldw	ra,4(sp)
   10c48:	df000017 	ldw	fp,0(sp)
   10c4c:	dec00204 	addi	sp,sp,8
   10c50:	f800283a 	ret

00010c54 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   10c54:	defffd04 	addi	sp,sp,-12
   10c58:	dfc00215 	stw	ra,8(sp)
   10c5c:	df000115 	stw	fp,4(sp)
   10c60:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   10c64:	00800074 	movhi	r2,1
   10c68:	10870204 	addi	r2,r2,7176
   10c6c:	e0bfff15 	stw	r2,-4(fp)
   10c70:	00000606 	br	10c8c <_do_dtors+0x38>
        (*dtor) (); 
   10c74:	e0bfff17 	ldw	r2,-4(fp)
   10c78:	10800017 	ldw	r2,0(r2)
   10c7c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   10c80:	e0bfff17 	ldw	r2,-4(fp)
   10c84:	10bfff04 	addi	r2,r2,-4
   10c88:	e0bfff15 	stw	r2,-4(fp)
   10c8c:	e0ffff17 	ldw	r3,-4(fp)
   10c90:	00800074 	movhi	r2,1
   10c94:	10870304 	addi	r2,r2,7180
   10c98:	18bff62e 	bgeu	r3,r2,10c74 <__alt_data_end+0xfffbb544>
        (*dtor) (); 
}
   10c9c:	e037883a 	mov	sp,fp
   10ca0:	dfc00117 	ldw	ra,4(sp)
   10ca4:	df000017 	ldw	fp,0(sp)
   10ca8:	dec00204 	addi	sp,sp,8
   10cac:	f800283a 	ret

00010cb0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   10cb0:	deffff04 	addi	sp,sp,-4
   10cb4:	df000015 	stw	fp,0(sp)
   10cb8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   10cbc:	e037883a 	mov	sp,fp
   10cc0:	df000017 	ldw	fp,0(sp)
   10cc4:	dec00104 	addi	sp,sp,4
   10cc8:	f800283a 	ret

00010ccc <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   10ccc:	defff904 	addi	sp,sp,-28
   10cd0:	dfc00615 	stw	ra,24(sp)
   10cd4:	df000515 	stw	fp,20(sp)
   10cd8:	df000504 	addi	fp,sp,20
   10cdc:	e13ffc15 	stw	r4,-16(fp)
   10ce0:	e17ffd15 	stw	r5,-12(fp)
   10ce4:	e1bffe15 	stw	r6,-8(fp)
   10ce8:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   10cec:	e0800217 	ldw	r2,8(fp)
   10cf0:	d8800015 	stw	r2,0(sp)
   10cf4:	e13ffc17 	ldw	r4,-16(fp)
   10cf8:	e17ffd17 	ldw	r5,-12(fp)
   10cfc:	e1bffe17 	ldw	r6,-8(fp)
   10d00:	e1ffff17 	ldw	r7,-4(fp)
   10d04:	0010eac0 	call	10eac <alt_iic_isr_register>
}  
   10d08:	e037883a 	mov	sp,fp
   10d0c:	dfc00117 	ldw	ra,4(sp)
   10d10:	df000017 	ldw	fp,0(sp)
   10d14:	dec00204 	addi	sp,sp,8
   10d18:	f800283a 	ret

00010d1c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   10d1c:	defff904 	addi	sp,sp,-28
   10d20:	df000615 	stw	fp,24(sp)
   10d24:	df000604 	addi	fp,sp,24
   10d28:	e13ffe15 	stw	r4,-8(fp)
   10d2c:	e17fff15 	stw	r5,-4(fp)
   10d30:	e0bfff17 	ldw	r2,-4(fp)
   10d34:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10d38:	0005303a 	rdctl	r2,status
   10d3c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10d40:	e0fffb17 	ldw	r3,-20(fp)
   10d44:	00bfff84 	movi	r2,-2
   10d48:	1884703a 	and	r2,r3,r2
   10d4c:	1001703a 	wrctl	status,r2
  
  return context;
   10d50:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   10d54:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   10d58:	e0bffa17 	ldw	r2,-24(fp)
   10d5c:	00c00044 	movi	r3,1
   10d60:	1884983a 	sll	r2,r3,r2
   10d64:	1007883a 	mov	r3,r2
   10d68:	00800074 	movhi	r2,1
   10d6c:	10971804 	addi	r2,r2,23648
   10d70:	10800017 	ldw	r2,0(r2)
   10d74:	1886b03a 	or	r3,r3,r2
   10d78:	00800074 	movhi	r2,1
   10d7c:	10971804 	addi	r2,r2,23648
   10d80:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   10d84:	00800074 	movhi	r2,1
   10d88:	10971804 	addi	r2,r2,23648
   10d8c:	10800017 	ldw	r2,0(r2)
   10d90:	100170fa 	wrctl	ienable,r2
   10d94:	e0bffc17 	ldw	r2,-16(fp)
   10d98:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10d9c:	e0bffd17 	ldw	r2,-12(fp)
   10da0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   10da4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   10da8:	0001883a 	nop
}
   10dac:	e037883a 	mov	sp,fp
   10db0:	df000017 	ldw	fp,0(sp)
   10db4:	dec00104 	addi	sp,sp,4
   10db8:	f800283a 	ret

00010dbc <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   10dbc:	defff904 	addi	sp,sp,-28
   10dc0:	df000615 	stw	fp,24(sp)
   10dc4:	df000604 	addi	fp,sp,24
   10dc8:	e13ffe15 	stw	r4,-8(fp)
   10dcc:	e17fff15 	stw	r5,-4(fp)
   10dd0:	e0bfff17 	ldw	r2,-4(fp)
   10dd4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10dd8:	0005303a 	rdctl	r2,status
   10ddc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10de0:	e0fffb17 	ldw	r3,-20(fp)
   10de4:	00bfff84 	movi	r2,-2
   10de8:	1884703a 	and	r2,r3,r2
   10dec:	1001703a 	wrctl	status,r2
  
  return context;
   10df0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   10df4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   10df8:	e0bffa17 	ldw	r2,-24(fp)
   10dfc:	00c00044 	movi	r3,1
   10e00:	1884983a 	sll	r2,r3,r2
   10e04:	0084303a 	nor	r2,zero,r2
   10e08:	1007883a 	mov	r3,r2
   10e0c:	00800074 	movhi	r2,1
   10e10:	10971804 	addi	r2,r2,23648
   10e14:	10800017 	ldw	r2,0(r2)
   10e18:	1886703a 	and	r3,r3,r2
   10e1c:	00800074 	movhi	r2,1
   10e20:	10971804 	addi	r2,r2,23648
   10e24:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   10e28:	00800074 	movhi	r2,1
   10e2c:	10971804 	addi	r2,r2,23648
   10e30:	10800017 	ldw	r2,0(r2)
   10e34:	100170fa 	wrctl	ienable,r2
   10e38:	e0bffc17 	ldw	r2,-16(fp)
   10e3c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10e40:	e0bffd17 	ldw	r2,-12(fp)
   10e44:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   10e48:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   10e4c:	0001883a 	nop
}
   10e50:	e037883a 	mov	sp,fp
   10e54:	df000017 	ldw	fp,0(sp)
   10e58:	dec00104 	addi	sp,sp,4
   10e5c:	f800283a 	ret

00010e60 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   10e60:	defffc04 	addi	sp,sp,-16
   10e64:	df000315 	stw	fp,12(sp)
   10e68:	df000304 	addi	fp,sp,12
   10e6c:	e13ffe15 	stw	r4,-8(fp)
   10e70:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   10e74:	000530fa 	rdctl	r2,ienable
   10e78:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   10e7c:	e0bfff17 	ldw	r2,-4(fp)
   10e80:	00c00044 	movi	r3,1
   10e84:	1884983a 	sll	r2,r3,r2
   10e88:	1007883a 	mov	r3,r2
   10e8c:	e0bffd17 	ldw	r2,-12(fp)
   10e90:	1884703a 	and	r2,r3,r2
   10e94:	1004c03a 	cmpne	r2,r2,zero
   10e98:	10803fcc 	andi	r2,r2,255
}
   10e9c:	e037883a 	mov	sp,fp
   10ea0:	df000017 	ldw	fp,0(sp)
   10ea4:	dec00104 	addi	sp,sp,4
   10ea8:	f800283a 	ret

00010eac <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   10eac:	defff504 	addi	sp,sp,-44
   10eb0:	dfc00a15 	stw	ra,40(sp)
   10eb4:	df000915 	stw	fp,36(sp)
   10eb8:	df000904 	addi	fp,sp,36
   10ebc:	e13ffc15 	stw	r4,-16(fp)
   10ec0:	e17ffd15 	stw	r5,-12(fp)
   10ec4:	e1bffe15 	stw	r6,-8(fp)
   10ec8:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   10ecc:	00bffa84 	movi	r2,-22
   10ed0:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   10ed4:	e0bffd17 	ldw	r2,-12(fp)
   10ed8:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   10edc:	e0bff817 	ldw	r2,-32(fp)
   10ee0:	10800808 	cmpgei	r2,r2,32
   10ee4:	1000271e 	bne	r2,zero,10f84 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10ee8:	0005303a 	rdctl	r2,status
   10eec:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10ef0:	e0fffa17 	ldw	r3,-24(fp)
   10ef4:	00bfff84 	movi	r2,-2
   10ef8:	1884703a 	and	r2,r3,r2
   10efc:	1001703a 	wrctl	status,r2
  
  return context;
   10f00:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   10f04:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   10f08:	00800074 	movhi	r2,1
   10f0c:	10972604 	addi	r2,r2,23704
   10f10:	e0fff817 	ldw	r3,-32(fp)
   10f14:	180690fa 	slli	r3,r3,3
   10f18:	10c5883a 	add	r2,r2,r3
   10f1c:	e0fffe17 	ldw	r3,-8(fp)
   10f20:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   10f24:	00800074 	movhi	r2,1
   10f28:	10972604 	addi	r2,r2,23704
   10f2c:	e0fff817 	ldw	r3,-32(fp)
   10f30:	180690fa 	slli	r3,r3,3
   10f34:	10c5883a 	add	r2,r2,r3
   10f38:	10800104 	addi	r2,r2,4
   10f3c:	e0ffff17 	ldw	r3,-4(fp)
   10f40:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   10f44:	e0bffe17 	ldw	r2,-8(fp)
   10f48:	10000526 	beq	r2,zero,10f60 <alt_iic_isr_register+0xb4>
   10f4c:	e0bff817 	ldw	r2,-32(fp)
   10f50:	e13ffc17 	ldw	r4,-16(fp)
   10f54:	100b883a 	mov	r5,r2
   10f58:	0010d1c0 	call	10d1c <alt_ic_irq_enable>
   10f5c:	00000406 	br	10f70 <alt_iic_isr_register+0xc4>
   10f60:	e0bff817 	ldw	r2,-32(fp)
   10f64:	e13ffc17 	ldw	r4,-16(fp)
   10f68:	100b883a 	mov	r5,r2
   10f6c:	0010dbc0 	call	10dbc <alt_ic_irq_disable>
   10f70:	e0bff715 	stw	r2,-36(fp)
   10f74:	e0bff917 	ldw	r2,-28(fp)
   10f78:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10f7c:	e0bffb17 	ldw	r2,-20(fp)
   10f80:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   10f84:	e0bff717 	ldw	r2,-36(fp)
}
   10f88:	e037883a 	mov	sp,fp
   10f8c:	dfc00117 	ldw	ra,4(sp)
   10f90:	df000017 	ldw	fp,0(sp)
   10f94:	dec00204 	addi	sp,sp,8
   10f98:	f800283a 	ret

00010f9c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   10f9c:	defff804 	addi	sp,sp,-32
   10fa0:	dfc00715 	stw	ra,28(sp)
   10fa4:	df000615 	stw	fp,24(sp)
   10fa8:	dc000515 	stw	r16,20(sp)
   10fac:	df000604 	addi	fp,sp,24
   10fb0:	e13ffb15 	stw	r4,-20(fp)
   10fb4:	e17ffc15 	stw	r5,-16(fp)
   10fb8:	e1bffd15 	stw	r6,-12(fp)
   10fbc:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   10fc0:	e13ffc17 	ldw	r4,-16(fp)
   10fc4:	e17ffd17 	ldw	r5,-12(fp)
   10fc8:	e1bffe17 	ldw	r6,-8(fp)
   10fcc:	00112380 	call	11238 <open>
   10fd0:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   10fd4:	e0bffa17 	ldw	r2,-24(fp)
   10fd8:	10002216 	blt	r2,zero,11064 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   10fdc:	04000074 	movhi	r16,1
   10fe0:	840bc304 	addi	r16,r16,12044
   10fe4:	e0bffa17 	ldw	r2,-24(fp)
   10fe8:	1009883a 	mov	r4,r2
   10fec:	01400304 	movi	r5,12
   10ff0:	000cb080 	call	cb08 <__mulsi3>
   10ff4:	8085883a 	add	r2,r16,r2
   10ff8:	10c00017 	ldw	r3,0(r2)
   10ffc:	e0bffb17 	ldw	r2,-20(fp)
   11000:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   11004:	04000074 	movhi	r16,1
   11008:	840bc304 	addi	r16,r16,12044
   1100c:	e0bffa17 	ldw	r2,-24(fp)
   11010:	1009883a 	mov	r4,r2
   11014:	01400304 	movi	r5,12
   11018:	000cb080 	call	cb08 <__mulsi3>
   1101c:	8085883a 	add	r2,r16,r2
   11020:	10800104 	addi	r2,r2,4
   11024:	10c00017 	ldw	r3,0(r2)
   11028:	e0bffb17 	ldw	r2,-20(fp)
   1102c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   11030:	04000074 	movhi	r16,1
   11034:	840bc304 	addi	r16,r16,12044
   11038:	e0bffa17 	ldw	r2,-24(fp)
   1103c:	1009883a 	mov	r4,r2
   11040:	01400304 	movi	r5,12
   11044:	000cb080 	call	cb08 <__mulsi3>
   11048:	8085883a 	add	r2,r16,r2
   1104c:	10800204 	addi	r2,r2,8
   11050:	10c00017 	ldw	r3,0(r2)
   11054:	e0bffb17 	ldw	r2,-20(fp)
   11058:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   1105c:	e13ffa17 	ldw	r4,-24(fp)
   11060:	000faa00 	call	faa0 <alt_release_fd>
  }
} 
   11064:	e6ffff04 	addi	sp,fp,-4
   11068:	dfc00217 	ldw	ra,8(sp)
   1106c:	df000117 	ldw	fp,4(sp)
   11070:	dc000017 	ldw	r16,0(sp)
   11074:	dec00304 	addi	sp,sp,12
   11078:	f800283a 	ret

0001107c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   1107c:	defffb04 	addi	sp,sp,-20
   11080:	dfc00415 	stw	ra,16(sp)
   11084:	df000315 	stw	fp,12(sp)
   11088:	df000304 	addi	fp,sp,12
   1108c:	e13ffd15 	stw	r4,-12(fp)
   11090:	e17ffe15 	stw	r5,-8(fp)
   11094:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   11098:	01000074 	movhi	r4,1
   1109c:	210bc604 	addi	r4,r4,12056
   110a0:	e17ffd17 	ldw	r5,-12(fp)
   110a4:	01800044 	movi	r6,1
   110a8:	01c07fc4 	movi	r7,511
   110ac:	0010f9c0 	call	10f9c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   110b0:	01000074 	movhi	r4,1
   110b4:	210bc304 	addi	r4,r4,12044
   110b8:	e17ffe17 	ldw	r5,-8(fp)
   110bc:	000d883a 	mov	r6,zero
   110c0:	01c07fc4 	movi	r7,511
   110c4:	0010f9c0 	call	10f9c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   110c8:	01000074 	movhi	r4,1
   110cc:	210bc904 	addi	r4,r4,12068
   110d0:	e17fff17 	ldw	r5,-4(fp)
   110d4:	01800044 	movi	r6,1
   110d8:	01c07fc4 	movi	r7,511
   110dc:	0010f9c0 	call	10f9c <alt_open_fd>
}  
   110e0:	e037883a 	mov	sp,fp
   110e4:	dfc00117 	ldw	ra,4(sp)
   110e8:	df000017 	ldw	fp,0(sp)
   110ec:	dec00204 	addi	sp,sp,8
   110f0:	f800283a 	ret

000110f4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   110f4:	defffe04 	addi	sp,sp,-8
   110f8:	dfc00115 	stw	ra,4(sp)
   110fc:	df000015 	stw	fp,0(sp)
   11100:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   11104:	00800074 	movhi	r2,1
   11108:	10904604 	addi	r2,r2,16664
   1110c:	10800017 	ldw	r2,0(r2)
   11110:	10000526 	beq	r2,zero,11128 <alt_get_errno+0x34>
   11114:	00800074 	movhi	r2,1
   11118:	10904604 	addi	r2,r2,16664
   1111c:	10800017 	ldw	r2,0(r2)
   11120:	103ee83a 	callr	r2
   11124:	00000206 	br	11130 <alt_get_errno+0x3c>
   11128:	00800074 	movhi	r2,1
   1112c:	10971104 	addi	r2,r2,23620
}
   11130:	e037883a 	mov	sp,fp
   11134:	dfc00117 	ldw	ra,4(sp)
   11138:	df000017 	ldw	fp,0(sp)
   1113c:	dec00204 	addi	sp,sp,8
   11140:	f800283a 	ret

00011144 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   11144:	defffb04 	addi	sp,sp,-20
   11148:	dfc00415 	stw	ra,16(sp)
   1114c:	df000315 	stw	fp,12(sp)
   11150:	dc000215 	stw	r16,8(sp)
   11154:	df000304 	addi	fp,sp,12
   11158:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   1115c:	e0bffe17 	ldw	r2,-8(fp)
   11160:	10800217 	ldw	r2,8(r2)
   11164:	10d00034 	orhi	r3,r2,16384
   11168:	e0bffe17 	ldw	r2,-8(fp)
   1116c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   11170:	e03ffd15 	stw	zero,-12(fp)
   11174:	00002306 	br	11204 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   11178:	04000074 	movhi	r16,1
   1117c:	840bc304 	addi	r16,r16,12044
   11180:	e0bffd17 	ldw	r2,-12(fp)
   11184:	1009883a 	mov	r4,r2
   11188:	01400304 	movi	r5,12
   1118c:	000cb080 	call	cb08 <__mulsi3>
   11190:	8085883a 	add	r2,r16,r2
   11194:	10c00017 	ldw	r3,0(r2)
   11198:	e0bffe17 	ldw	r2,-8(fp)
   1119c:	10800017 	ldw	r2,0(r2)
   111a0:	1880151e 	bne	r3,r2,111f8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   111a4:	04000074 	movhi	r16,1
   111a8:	840bc304 	addi	r16,r16,12044
   111ac:	e0bffd17 	ldw	r2,-12(fp)
   111b0:	1009883a 	mov	r4,r2
   111b4:	01400304 	movi	r5,12
   111b8:	000cb080 	call	cb08 <__mulsi3>
   111bc:	8085883a 	add	r2,r16,r2
   111c0:	10800204 	addi	r2,r2,8
   111c4:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   111c8:	10000b0e 	bge	r2,zero,111f8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   111cc:	e13ffd17 	ldw	r4,-12(fp)
   111d0:	01400304 	movi	r5,12
   111d4:	000cb080 	call	cb08 <__mulsi3>
   111d8:	1007883a 	mov	r3,r2
   111dc:	00800074 	movhi	r2,1
   111e0:	108bc304 	addi	r2,r2,12044
   111e4:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   111e8:	e0bffe17 	ldw	r2,-8(fp)
   111ec:	18800226 	beq	r3,r2,111f8 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   111f0:	00bffcc4 	movi	r2,-13
   111f4:	00000a06 	br	11220 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   111f8:	e0bffd17 	ldw	r2,-12(fp)
   111fc:	10800044 	addi	r2,r2,1
   11200:	e0bffd15 	stw	r2,-12(fp)
   11204:	00800074 	movhi	r2,1
   11208:	10904504 	addi	r2,r2,16660
   1120c:	10800017 	ldw	r2,0(r2)
   11210:	1007883a 	mov	r3,r2
   11214:	e0bffd17 	ldw	r2,-12(fp)
   11218:	18bfd72e 	bgeu	r3,r2,11178 <__alt_data_end+0xfffbba48>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   1121c:	0005883a 	mov	r2,zero
}
   11220:	e6ffff04 	addi	sp,fp,-4
   11224:	dfc00217 	ldw	ra,8(sp)
   11228:	df000117 	ldw	fp,4(sp)
   1122c:	dc000017 	ldw	r16,0(sp)
   11230:	dec00304 	addi	sp,sp,12
   11234:	f800283a 	ret

00011238 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   11238:	defff604 	addi	sp,sp,-40
   1123c:	dfc00915 	stw	ra,36(sp)
   11240:	df000815 	stw	fp,32(sp)
   11244:	df000804 	addi	fp,sp,32
   11248:	e13ffd15 	stw	r4,-12(fp)
   1124c:	e17ffe15 	stw	r5,-8(fp)
   11250:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   11254:	00bfffc4 	movi	r2,-1
   11258:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   1125c:	00bffb44 	movi	r2,-19
   11260:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   11264:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   11268:	e13ffd17 	ldw	r4,-12(fp)
   1126c:	01400074 	movhi	r5,1
   11270:	29504304 	addi	r5,r5,16652
   11274:	00115540 	call	11554 <alt_find_dev>
   11278:	e0bff815 	stw	r2,-32(fp)
   1127c:	e0bff817 	ldw	r2,-32(fp)
   11280:	1000051e 	bne	r2,zero,11298 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   11284:	e13ffd17 	ldw	r4,-12(fp)
   11288:	00115e40 	call	115e4 <alt_find_file>
   1128c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   11290:	00800044 	movi	r2,1
   11294:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   11298:	e0bff817 	ldw	r2,-32(fp)
   1129c:	10002b26 	beq	r2,zero,1134c <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
   112a0:	e13ff817 	ldw	r4,-32(fp)
   112a4:	00116f80 	call	116f8 <alt_get_fd>
   112a8:	e0bff915 	stw	r2,-28(fp)
   112ac:	e0bff917 	ldw	r2,-28(fp)
   112b0:	1000030e 	bge	r2,zero,112c0 <open+0x88>
    {
      status = index;
   112b4:	e0bff917 	ldw	r2,-28(fp)
   112b8:	e0bffa15 	stw	r2,-24(fp)
   112bc:	00002506 	br	11354 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
   112c0:	e13ff917 	ldw	r4,-28(fp)
   112c4:	01400304 	movi	r5,12
   112c8:	000cb080 	call	cb08 <__mulsi3>
   112cc:	1007883a 	mov	r3,r2
   112d0:	00800074 	movhi	r2,1
   112d4:	108bc304 	addi	r2,r2,12044
   112d8:	1885883a 	add	r2,r3,r2
   112dc:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   112e0:	e0fffe17 	ldw	r3,-8(fp)
   112e4:	00900034 	movhi	r2,16384
   112e8:	10bfffc4 	addi	r2,r2,-1
   112ec:	1886703a 	and	r3,r3,r2
   112f0:	e0bffc17 	ldw	r2,-16(fp)
   112f4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   112f8:	e0bffb17 	ldw	r2,-20(fp)
   112fc:	1000051e 	bne	r2,zero,11314 <open+0xdc>
   11300:	e13ffc17 	ldw	r4,-16(fp)
   11304:	00111440 	call	11144 <alt_file_locked>
   11308:	e0bffa15 	stw	r2,-24(fp)
   1130c:	e0bffa17 	ldw	r2,-24(fp)
   11310:	10001016 	blt	r2,zero,11354 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   11314:	e0bff817 	ldw	r2,-32(fp)
   11318:	10800317 	ldw	r2,12(r2)
   1131c:	10000826 	beq	r2,zero,11340 <open+0x108>
   11320:	e0bff817 	ldw	r2,-32(fp)
   11324:	10800317 	ldw	r2,12(r2)
   11328:	e13ffc17 	ldw	r4,-16(fp)
   1132c:	e17ffd17 	ldw	r5,-12(fp)
   11330:	e1bffe17 	ldw	r6,-8(fp)
   11334:	e1ffff17 	ldw	r7,-4(fp)
   11338:	103ee83a 	callr	r2
   1133c:	00000106 	br	11344 <open+0x10c>
   11340:	0005883a 	mov	r2,zero
   11344:	e0bffa15 	stw	r2,-24(fp)
   11348:	00000206 	br	11354 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   1134c:	00bffb44 	movi	r2,-19
   11350:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   11354:	e0bffa17 	ldw	r2,-24(fp)
   11358:	1000090e 	bge	r2,zero,11380 <open+0x148>
  {
    alt_release_fd (index);  
   1135c:	e13ff917 	ldw	r4,-28(fp)
   11360:	000faa00 	call	faa0 <alt_release_fd>
    ALT_ERRNO = -status;
   11364:	00110f40 	call	110f4 <alt_get_errno>
   11368:	1007883a 	mov	r3,r2
   1136c:	e0bffa17 	ldw	r2,-24(fp)
   11370:	0085c83a 	sub	r2,zero,r2
   11374:	18800015 	stw	r2,0(r3)
    return -1;
   11378:	00bfffc4 	movi	r2,-1
   1137c:	00000106 	br	11384 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
   11380:	e0bff917 	ldw	r2,-28(fp)
}
   11384:	e037883a 	mov	sp,fp
   11388:	dfc00117 	ldw	ra,4(sp)
   1138c:	df000017 	ldw	fp,0(sp)
   11390:	dec00204 	addi	sp,sp,8
   11394:	f800283a 	ret

00011398 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   11398:	defffa04 	addi	sp,sp,-24
   1139c:	df000515 	stw	fp,20(sp)
   113a0:	df000504 	addi	fp,sp,20
   113a4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   113a8:	0005303a 	rdctl	r2,status
   113ac:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   113b0:	e0fffc17 	ldw	r3,-16(fp)
   113b4:	00bfff84 	movi	r2,-2
   113b8:	1884703a 	and	r2,r3,r2
   113bc:	1001703a 	wrctl	status,r2
  
  return context;
   113c0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   113c4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   113c8:	e0bfff17 	ldw	r2,-4(fp)
   113cc:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   113d0:	e0bffd17 	ldw	r2,-12(fp)
   113d4:	10800017 	ldw	r2,0(r2)
   113d8:	e0fffd17 	ldw	r3,-12(fp)
   113dc:	18c00117 	ldw	r3,4(r3)
   113e0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   113e4:	e0bffd17 	ldw	r2,-12(fp)
   113e8:	10800117 	ldw	r2,4(r2)
   113ec:	e0fffd17 	ldw	r3,-12(fp)
   113f0:	18c00017 	ldw	r3,0(r3)
   113f4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   113f8:	e0bffd17 	ldw	r2,-12(fp)
   113fc:	e0fffd17 	ldw	r3,-12(fp)
   11400:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   11404:	e0bffd17 	ldw	r2,-12(fp)
   11408:	e0fffd17 	ldw	r3,-12(fp)
   1140c:	10c00015 	stw	r3,0(r2)
   11410:	e0bffb17 	ldw	r2,-20(fp)
   11414:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11418:	e0bffe17 	ldw	r2,-8(fp)
   1141c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   11420:	e037883a 	mov	sp,fp
   11424:	df000017 	ldw	fp,0(sp)
   11428:	dec00104 	addi	sp,sp,4
   1142c:	f800283a 	ret

00011430 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   11430:	defffb04 	addi	sp,sp,-20
   11434:	dfc00415 	stw	ra,16(sp)
   11438:	df000315 	stw	fp,12(sp)
   1143c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   11440:	d0a00e17 	ldw	r2,-32712(gp)
   11444:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   11448:	d0a6df17 	ldw	r2,-25732(gp)
   1144c:	10800044 	addi	r2,r2,1
   11450:	d0a6df15 	stw	r2,-25732(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   11454:	00002e06 	br	11510 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   11458:	e0bffd17 	ldw	r2,-12(fp)
   1145c:	10800017 	ldw	r2,0(r2)
   11460:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   11464:	e0bffd17 	ldw	r2,-12(fp)
   11468:	10800403 	ldbu	r2,16(r2)
   1146c:	10803fcc 	andi	r2,r2,255
   11470:	10000426 	beq	r2,zero,11484 <alt_tick+0x54>
   11474:	d0a6df17 	ldw	r2,-25732(gp)
   11478:	1000021e 	bne	r2,zero,11484 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   1147c:	e0bffd17 	ldw	r2,-12(fp)
   11480:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   11484:	e0bffd17 	ldw	r2,-12(fp)
   11488:	10800217 	ldw	r2,8(r2)
   1148c:	d0e6df17 	ldw	r3,-25732(gp)
   11490:	18801d36 	bltu	r3,r2,11508 <alt_tick+0xd8>
   11494:	e0bffd17 	ldw	r2,-12(fp)
   11498:	10800403 	ldbu	r2,16(r2)
   1149c:	10803fcc 	andi	r2,r2,255
   114a0:	1000191e 	bne	r2,zero,11508 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   114a4:	e0bffd17 	ldw	r2,-12(fp)
   114a8:	10800317 	ldw	r2,12(r2)
   114ac:	e0fffd17 	ldw	r3,-12(fp)
   114b0:	18c00517 	ldw	r3,20(r3)
   114b4:	1809883a 	mov	r4,r3
   114b8:	103ee83a 	callr	r2
   114bc:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   114c0:	e0bfff17 	ldw	r2,-4(fp)
   114c4:	1000031e 	bne	r2,zero,114d4 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   114c8:	e13ffd17 	ldw	r4,-12(fp)
   114cc:	00113980 	call	11398 <alt_alarm_stop>
   114d0:	00000d06 	br	11508 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   114d4:	e0bffd17 	ldw	r2,-12(fp)
   114d8:	10c00217 	ldw	r3,8(r2)
   114dc:	e0bfff17 	ldw	r2,-4(fp)
   114e0:	1887883a 	add	r3,r3,r2
   114e4:	e0bffd17 	ldw	r2,-12(fp)
   114e8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   114ec:	e0bffd17 	ldw	r2,-12(fp)
   114f0:	10c00217 	ldw	r3,8(r2)
   114f4:	d0a6df17 	ldw	r2,-25732(gp)
   114f8:	1880032e 	bgeu	r3,r2,11508 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   114fc:	e0bffd17 	ldw	r2,-12(fp)
   11500:	00c00044 	movi	r3,1
   11504:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   11508:	e0bffe17 	ldw	r2,-8(fp)
   1150c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   11510:	e0fffd17 	ldw	r3,-12(fp)
   11514:	d0a00e04 	addi	r2,gp,-32712
   11518:	18bfcf1e 	bne	r3,r2,11458 <__alt_data_end+0xfffbbd28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   1151c:	0001883a 	nop
}
   11520:	e037883a 	mov	sp,fp
   11524:	dfc00117 	ldw	ra,4(sp)
   11528:	df000017 	ldw	fp,0(sp)
   1152c:	dec00204 	addi	sp,sp,8
   11530:	f800283a 	ret

00011534 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   11534:	deffff04 	addi	sp,sp,-4
   11538:	df000015 	stw	fp,0(sp)
   1153c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   11540:	000170fa 	wrctl	ienable,zero
}
   11544:	e037883a 	mov	sp,fp
   11548:	df000017 	ldw	fp,0(sp)
   1154c:	dec00104 	addi	sp,sp,4
   11550:	f800283a 	ret

00011554 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   11554:	defffa04 	addi	sp,sp,-24
   11558:	dfc00515 	stw	ra,20(sp)
   1155c:	df000415 	stw	fp,16(sp)
   11560:	df000404 	addi	fp,sp,16
   11564:	e13ffe15 	stw	r4,-8(fp)
   11568:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   1156c:	e0bfff17 	ldw	r2,-4(fp)
   11570:	10800017 	ldw	r2,0(r2)
   11574:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   11578:	e13ffe17 	ldw	r4,-8(fp)
   1157c:	00032f80 	call	32f8 <strlen>
   11580:	10800044 	addi	r2,r2,1
   11584:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   11588:	00000d06 	br	115c0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   1158c:	e0bffc17 	ldw	r2,-16(fp)
   11590:	10c00217 	ldw	r3,8(r2)
   11594:	e0bffd17 	ldw	r2,-12(fp)
   11598:	1809883a 	mov	r4,r3
   1159c:	e17ffe17 	ldw	r5,-8(fp)
   115a0:	100d883a 	mov	r6,r2
   115a4:	00118b40 	call	118b4 <memcmp>
   115a8:	1000021e 	bne	r2,zero,115b4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   115ac:	e0bffc17 	ldw	r2,-16(fp)
   115b0:	00000706 	br	115d0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   115b4:	e0bffc17 	ldw	r2,-16(fp)
   115b8:	10800017 	ldw	r2,0(r2)
   115bc:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   115c0:	e0fffc17 	ldw	r3,-16(fp)
   115c4:	e0bfff17 	ldw	r2,-4(fp)
   115c8:	18bff01e 	bne	r3,r2,1158c <__alt_data_end+0xfffbbe5c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   115cc:	0005883a 	mov	r2,zero
}
   115d0:	e037883a 	mov	sp,fp
   115d4:	dfc00117 	ldw	ra,4(sp)
   115d8:	df000017 	ldw	fp,0(sp)
   115dc:	dec00204 	addi	sp,sp,8
   115e0:	f800283a 	ret

000115e4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   115e4:	defffb04 	addi	sp,sp,-20
   115e8:	dfc00415 	stw	ra,16(sp)
   115ec:	df000315 	stw	fp,12(sp)
   115f0:	df000304 	addi	fp,sp,12
   115f4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   115f8:	00800074 	movhi	r2,1
   115fc:	10904104 	addi	r2,r2,16644
   11600:	10800017 	ldw	r2,0(r2)
   11604:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   11608:	00003106 	br	116d0 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   1160c:	e0bffd17 	ldw	r2,-12(fp)
   11610:	10800217 	ldw	r2,8(r2)
   11614:	1009883a 	mov	r4,r2
   11618:	00032f80 	call	32f8 <strlen>
   1161c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   11620:	e0bffd17 	ldw	r2,-12(fp)
   11624:	10c00217 	ldw	r3,8(r2)
   11628:	e0bffe17 	ldw	r2,-8(fp)
   1162c:	10bfffc4 	addi	r2,r2,-1
   11630:	1885883a 	add	r2,r3,r2
   11634:	10800003 	ldbu	r2,0(r2)
   11638:	10803fcc 	andi	r2,r2,255
   1163c:	1080201c 	xori	r2,r2,128
   11640:	10bfe004 	addi	r2,r2,-128
   11644:	10800bd8 	cmpnei	r2,r2,47
   11648:	1000031e 	bne	r2,zero,11658 <alt_find_file+0x74>
    {
      len -= 1;
   1164c:	e0bffe17 	ldw	r2,-8(fp)
   11650:	10bfffc4 	addi	r2,r2,-1
   11654:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   11658:	e0bffe17 	ldw	r2,-8(fp)
   1165c:	e0ffff17 	ldw	r3,-4(fp)
   11660:	1885883a 	add	r2,r3,r2
   11664:	10800003 	ldbu	r2,0(r2)
   11668:	10803fcc 	andi	r2,r2,255
   1166c:	1080201c 	xori	r2,r2,128
   11670:	10bfe004 	addi	r2,r2,-128
   11674:	10800be0 	cmpeqi	r2,r2,47
   11678:	1000081e 	bne	r2,zero,1169c <alt_find_file+0xb8>
   1167c:	e0bffe17 	ldw	r2,-8(fp)
   11680:	e0ffff17 	ldw	r3,-4(fp)
   11684:	1885883a 	add	r2,r3,r2
   11688:	10800003 	ldbu	r2,0(r2)
   1168c:	10803fcc 	andi	r2,r2,255
   11690:	1080201c 	xori	r2,r2,128
   11694:	10bfe004 	addi	r2,r2,-128
   11698:	10000a1e 	bne	r2,zero,116c4 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   1169c:	e0bffd17 	ldw	r2,-12(fp)
   116a0:	10c00217 	ldw	r3,8(r2)
   116a4:	e0bffe17 	ldw	r2,-8(fp)
   116a8:	1809883a 	mov	r4,r3
   116ac:	e17fff17 	ldw	r5,-4(fp)
   116b0:	100d883a 	mov	r6,r2
   116b4:	00118b40 	call	118b4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   116b8:	1000021e 	bne	r2,zero,116c4 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   116bc:	e0bffd17 	ldw	r2,-12(fp)
   116c0:	00000806 	br	116e4 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   116c4:	e0bffd17 	ldw	r2,-12(fp)
   116c8:	10800017 	ldw	r2,0(r2)
   116cc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   116d0:	e0fffd17 	ldw	r3,-12(fp)
   116d4:	00800074 	movhi	r2,1
   116d8:	10904104 	addi	r2,r2,16644
   116dc:	18bfcb1e 	bne	r3,r2,1160c <__alt_data_end+0xfffbbedc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   116e0:	0005883a 	mov	r2,zero
}
   116e4:	e037883a 	mov	sp,fp
   116e8:	dfc00117 	ldw	ra,4(sp)
   116ec:	df000017 	ldw	fp,0(sp)
   116f0:	dec00204 	addi	sp,sp,8
   116f4:	f800283a 	ret

000116f8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   116f8:	defffa04 	addi	sp,sp,-24
   116fc:	dfc00515 	stw	ra,20(sp)
   11700:	df000415 	stw	fp,16(sp)
   11704:	dc000315 	stw	r16,12(sp)
   11708:	df000404 	addi	fp,sp,16
   1170c:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   11710:	00bffa04 	movi	r2,-24
   11714:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   11718:	e03ffc15 	stw	zero,-16(fp)
   1171c:	00002106 	br	117a4 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   11720:	04000074 	movhi	r16,1
   11724:	840bc304 	addi	r16,r16,12044
   11728:	e0bffc17 	ldw	r2,-16(fp)
   1172c:	1009883a 	mov	r4,r2
   11730:	01400304 	movi	r5,12
   11734:	000cb080 	call	cb08 <__mulsi3>
   11738:	8085883a 	add	r2,r16,r2
   1173c:	10800017 	ldw	r2,0(r2)
   11740:	1000151e 	bne	r2,zero,11798 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   11744:	04000074 	movhi	r16,1
   11748:	840bc304 	addi	r16,r16,12044
   1174c:	e0bffc17 	ldw	r2,-16(fp)
   11750:	1009883a 	mov	r4,r2
   11754:	01400304 	movi	r5,12
   11758:	000cb080 	call	cb08 <__mulsi3>
   1175c:	8085883a 	add	r2,r16,r2
   11760:	e0fffe17 	ldw	r3,-8(fp)
   11764:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   11768:	00800074 	movhi	r2,1
   1176c:	10904504 	addi	r2,r2,16660
   11770:	10c00017 	ldw	r3,0(r2)
   11774:	e0bffc17 	ldw	r2,-16(fp)
   11778:	1880040e 	bge	r3,r2,1178c <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   1177c:	00800074 	movhi	r2,1
   11780:	10904504 	addi	r2,r2,16660
   11784:	e0fffc17 	ldw	r3,-16(fp)
   11788:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   1178c:	e0bffc17 	ldw	r2,-16(fp)
   11790:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   11794:	00000606 	br	117b0 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   11798:	e0bffc17 	ldw	r2,-16(fp)
   1179c:	10800044 	addi	r2,r2,1
   117a0:	e0bffc15 	stw	r2,-16(fp)
   117a4:	e0bffc17 	ldw	r2,-16(fp)
   117a8:	10800810 	cmplti	r2,r2,32
   117ac:	103fdc1e 	bne	r2,zero,11720 <__alt_data_end+0xfffbbff0>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   117b0:	e0bffd17 	ldw	r2,-12(fp)
}
   117b4:	e6ffff04 	addi	sp,fp,-4
   117b8:	dfc00217 	ldw	ra,8(sp)
   117bc:	df000117 	ldw	fp,4(sp)
   117c0:	dc000017 	ldw	r16,0(sp)
   117c4:	dec00304 	addi	sp,sp,12
   117c8:	f800283a 	ret

000117cc <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   117cc:	defffe04 	addi	sp,sp,-8
   117d0:	df000115 	stw	fp,4(sp)
   117d4:	df000104 	addi	fp,sp,4
   117d8:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   117dc:	e0bfff17 	ldw	r2,-4(fp)
   117e0:	10bffe84 	addi	r2,r2,-6
   117e4:	10c00428 	cmpgeui	r3,r2,16
   117e8:	18001a1e 	bne	r3,zero,11854 <alt_exception_cause_generated_bad_addr+0x88>
   117ec:	100690ba 	slli	r3,r2,2
   117f0:	00800074 	movhi	r2,1
   117f4:	10860104 	addi	r2,r2,6148
   117f8:	1885883a 	add	r2,r3,r2
   117fc:	10800017 	ldw	r2,0(r2)
   11800:	1000683a 	jmp	r2
   11804:	00011844 	movi	zero,1121
   11808:	00011844 	movi	zero,1121
   1180c:	00011854 	movui	zero,1121
   11810:	00011854 	movui	zero,1121
   11814:	00011854 	movui	zero,1121
   11818:	00011844 	movi	zero,1121
   1181c:	0001184c 	andi	zero,zero,1121
   11820:	00011854 	movui	zero,1121
   11824:	00011844 	movi	zero,1121
   11828:	00011844 	movi	zero,1121
   1182c:	00011854 	movui	zero,1121
   11830:	00011844 	movi	zero,1121
   11834:	0001184c 	andi	zero,zero,1121
   11838:	00011854 	movui	zero,1121
   1183c:	00011854 	movui	zero,1121
   11840:	00011844 	movi	zero,1121
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   11844:	00800044 	movi	r2,1
   11848:	00000306 	br	11858 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   1184c:	0005883a 	mov	r2,zero
   11850:	00000106 	br	11858 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   11854:	0005883a 	mov	r2,zero
  }
}
   11858:	e037883a 	mov	sp,fp
   1185c:	df000017 	ldw	fp,0(sp)
   11860:	dec00104 	addi	sp,sp,4
   11864:	f800283a 	ret

00011868 <atexit>:
   11868:	200b883a 	mov	r5,r4
   1186c:	000d883a 	mov	r6,zero
   11870:	0009883a 	mov	r4,zero
   11874:	000f883a 	mov	r7,zero
   11878:	00119301 	jmpi	11930 <__register_exitproc>

0001187c <exit>:
   1187c:	defffe04 	addi	sp,sp,-8
   11880:	000b883a 	mov	r5,zero
   11884:	dc000015 	stw	r16,0(sp)
   11888:	dfc00115 	stw	ra,4(sp)
   1188c:	2021883a 	mov	r16,r4
   11890:	0011a440 	call	11a44 <__call_exitprocs>
   11894:	00800074 	movhi	r2,1
   11898:	10903d04 	addi	r2,r2,16628
   1189c:	11000017 	ldw	r4,0(r2)
   118a0:	20800f17 	ldw	r2,60(r4)
   118a4:	10000126 	beq	r2,zero,118ac <exit+0x30>
   118a8:	103ee83a 	callr	r2
   118ac:	8009883a 	mov	r4,r16
   118b0:	0011bd80 	call	11bd8 <_exit>

000118b4 <memcmp>:
   118b4:	01c000c4 	movi	r7,3
   118b8:	3980192e 	bgeu	r7,r6,11920 <memcmp+0x6c>
   118bc:	2144b03a 	or	r2,r4,r5
   118c0:	11c4703a 	and	r2,r2,r7
   118c4:	10000f26 	beq	r2,zero,11904 <memcmp+0x50>
   118c8:	20800003 	ldbu	r2,0(r4)
   118cc:	28c00003 	ldbu	r3,0(r5)
   118d0:	10c0151e 	bne	r2,r3,11928 <memcmp+0x74>
   118d4:	31bfff84 	addi	r6,r6,-2
   118d8:	01ffffc4 	movi	r7,-1
   118dc:	00000406 	br	118f0 <memcmp+0x3c>
   118e0:	20800003 	ldbu	r2,0(r4)
   118e4:	28c00003 	ldbu	r3,0(r5)
   118e8:	31bfffc4 	addi	r6,r6,-1
   118ec:	10c00e1e 	bne	r2,r3,11928 <memcmp+0x74>
   118f0:	21000044 	addi	r4,r4,1
   118f4:	29400044 	addi	r5,r5,1
   118f8:	31fff91e 	bne	r6,r7,118e0 <__alt_data_end+0xfffbc1b0>
   118fc:	0005883a 	mov	r2,zero
   11900:	f800283a 	ret
   11904:	20c00017 	ldw	r3,0(r4)
   11908:	28800017 	ldw	r2,0(r5)
   1190c:	1880041e 	bne	r3,r2,11920 <memcmp+0x6c>
   11910:	31bfff04 	addi	r6,r6,-4
   11914:	21000104 	addi	r4,r4,4
   11918:	29400104 	addi	r5,r5,4
   1191c:	39bff936 	bltu	r7,r6,11904 <__alt_data_end+0xfffbc1d4>
   11920:	303fe91e 	bne	r6,zero,118c8 <__alt_data_end+0xfffbc198>
   11924:	003ff506 	br	118fc <__alt_data_end+0xfffbc1cc>
   11928:	10c5c83a 	sub	r2,r2,r3
   1192c:	f800283a 	ret

00011930 <__register_exitproc>:
   11930:	00800074 	movhi	r2,1
   11934:	defffa04 	addi	sp,sp,-24
   11938:	10903d04 	addi	r2,r2,16628
   1193c:	dc000315 	stw	r16,12(sp)
   11940:	14000017 	ldw	r16,0(r2)
   11944:	dc400415 	stw	r17,16(sp)
   11948:	dfc00515 	stw	ra,20(sp)
   1194c:	80805217 	ldw	r2,328(r16)
   11950:	2023883a 	mov	r17,r4
   11954:	10003626 	beq	r2,zero,11a30 <__register_exitproc+0x100>
   11958:	10c00117 	ldw	r3,4(r2)
   1195c:	010007c4 	movi	r4,31
   11960:	20c00e16 	blt	r4,r3,1199c <__register_exitproc+0x6c>
   11964:	1a400044 	addi	r9,r3,1
   11968:	8800211e 	bne	r17,zero,119f0 <__register_exitproc+0xc0>
   1196c:	18c00084 	addi	r3,r3,2
   11970:	18c7883a 	add	r3,r3,r3
   11974:	18c7883a 	add	r3,r3,r3
   11978:	12400115 	stw	r9,4(r2)
   1197c:	10c7883a 	add	r3,r2,r3
   11980:	19400015 	stw	r5,0(r3)
   11984:	0005883a 	mov	r2,zero
   11988:	dfc00517 	ldw	ra,20(sp)
   1198c:	dc400417 	ldw	r17,16(sp)
   11990:	dc000317 	ldw	r16,12(sp)
   11994:	dec00604 	addi	sp,sp,24
   11998:	f800283a 	ret
   1199c:	00800034 	movhi	r2,0
   119a0:	108a6804 	addi	r2,r2,10656
   119a4:	10002526 	beq	r2,zero,11a3c <__register_exitproc+0x10c>
   119a8:	01006404 	movi	r4,400
   119ac:	d9400015 	stw	r5,0(sp)
   119b0:	d9800115 	stw	r6,4(sp)
   119b4:	d9c00215 	stw	r7,8(sp)
   119b8:	00029a00 	call	29a0 <malloc>
   119bc:	d9400017 	ldw	r5,0(sp)
   119c0:	d9800117 	ldw	r6,4(sp)
   119c4:	d9c00217 	ldw	r7,8(sp)
   119c8:	10001c26 	beq	r2,zero,11a3c <__register_exitproc+0x10c>
   119cc:	80c05217 	ldw	r3,328(r16)
   119d0:	10000115 	stw	zero,4(r2)
   119d4:	02400044 	movi	r9,1
   119d8:	10c00015 	stw	r3,0(r2)
   119dc:	80805215 	stw	r2,328(r16)
   119e0:	10006215 	stw	zero,392(r2)
   119e4:	10006315 	stw	zero,396(r2)
   119e8:	0007883a 	mov	r3,zero
   119ec:	883fdf26 	beq	r17,zero,1196c <__alt_data_end+0xfffbc23c>
   119f0:	18d1883a 	add	r8,r3,r3
   119f4:	4211883a 	add	r8,r8,r8
   119f8:	1211883a 	add	r8,r2,r8
   119fc:	41802215 	stw	r6,136(r8)
   11a00:	01000044 	movi	r4,1
   11a04:	11806217 	ldw	r6,392(r2)
   11a08:	20c8983a 	sll	r4,r4,r3
   11a0c:	310cb03a 	or	r6,r6,r4
   11a10:	11806215 	stw	r6,392(r2)
   11a14:	41c04215 	stw	r7,264(r8)
   11a18:	01800084 	movi	r6,2
   11a1c:	89bfd31e 	bne	r17,r6,1196c <__alt_data_end+0xfffbc23c>
   11a20:	11806317 	ldw	r6,396(r2)
   11a24:	3108b03a 	or	r4,r6,r4
   11a28:	11006315 	stw	r4,396(r2)
   11a2c:	003fcf06 	br	1196c <__alt_data_end+0xfffbc23c>
   11a30:	80805304 	addi	r2,r16,332
   11a34:	80805215 	stw	r2,328(r16)
   11a38:	003fc706 	br	11958 <__alt_data_end+0xfffbc228>
   11a3c:	00bfffc4 	movi	r2,-1
   11a40:	003fd106 	br	11988 <__alt_data_end+0xfffbc258>

00011a44 <__call_exitprocs>:
   11a44:	00800074 	movhi	r2,1
   11a48:	10903d04 	addi	r2,r2,16628
   11a4c:	10800017 	ldw	r2,0(r2)
   11a50:	defff404 	addi	sp,sp,-48
   11a54:	dd800815 	stw	r22,32(sp)
   11a58:	d8800015 	stw	r2,0(sp)
   11a5c:	10805204 	addi	r2,r2,328
   11a60:	dd000615 	stw	r20,24(sp)
   11a64:	dc800415 	stw	r18,16(sp)
   11a68:	dfc00b15 	stw	ra,44(sp)
   11a6c:	df000a15 	stw	fp,40(sp)
   11a70:	ddc00915 	stw	r23,36(sp)
   11a74:	dd400715 	stw	r21,28(sp)
   11a78:	dcc00515 	stw	r19,20(sp)
   11a7c:	dc400315 	stw	r17,12(sp)
   11a80:	dc000215 	stw	r16,8(sp)
   11a84:	2025883a 	mov	r18,r4
   11a88:	2829883a 	mov	r20,r5
   11a8c:	d8800115 	stw	r2,4(sp)
   11a90:	05bfffc4 	movi	r22,-1
   11a94:	d8800017 	ldw	r2,0(sp)
   11a98:	14c05217 	ldw	r19,328(r2)
   11a9c:	98001d26 	beq	r19,zero,11b14 <__call_exitprocs+0xd0>
   11aa0:	dd400117 	ldw	r21,4(sp)
   11aa4:	98800117 	ldw	r2,4(r19)
   11aa8:	173fffc4 	addi	fp,r2,-1
   11aac:	e0000d16 	blt	fp,zero,11ae4 <__call_exitprocs+0xa0>
   11ab0:	14000044 	addi	r16,r2,1
   11ab4:	8421883a 	add	r16,r16,r16
   11ab8:	8421883a 	add	r16,r16,r16
   11abc:	84402004 	addi	r17,r16,128
   11ac0:	9c63883a 	add	r17,r19,r17
   11ac4:	9c21883a 	add	r16,r19,r16
   11ac8:	a0001e26 	beq	r20,zero,11b44 <__call_exitprocs+0x100>
   11acc:	80804017 	ldw	r2,256(r16)
   11ad0:	15001c26 	beq	r2,r20,11b44 <__call_exitprocs+0x100>
   11ad4:	e73fffc4 	addi	fp,fp,-1
   11ad8:	843fff04 	addi	r16,r16,-4
   11adc:	8c7fff04 	addi	r17,r17,-4
   11ae0:	e5bff91e 	bne	fp,r22,11ac8 <__alt_data_end+0xfffbc398>
   11ae4:	00800034 	movhi	r2,0
   11ae8:	108a6d04 	addi	r2,r2,10676
   11aec:	10000926 	beq	r2,zero,11b14 <__call_exitprocs+0xd0>
   11af0:	98800117 	ldw	r2,4(r19)
   11af4:	1000311e 	bne	r2,zero,11bbc <__call_exitprocs+0x178>
   11af8:	98800017 	ldw	r2,0(r19)
   11afc:	10003426 	beq	r2,zero,11bd0 <__call_exitprocs+0x18c>
   11b00:	9809883a 	mov	r4,r19
   11b04:	a8800015 	stw	r2,0(r21)
   11b08:	00029b40 	call	29b4 <free>
   11b0c:	acc00017 	ldw	r19,0(r21)
   11b10:	983fe41e 	bne	r19,zero,11aa4 <__alt_data_end+0xfffbc374>
   11b14:	dfc00b17 	ldw	ra,44(sp)
   11b18:	df000a17 	ldw	fp,40(sp)
   11b1c:	ddc00917 	ldw	r23,36(sp)
   11b20:	dd800817 	ldw	r22,32(sp)
   11b24:	dd400717 	ldw	r21,28(sp)
   11b28:	dd000617 	ldw	r20,24(sp)
   11b2c:	dcc00517 	ldw	r19,20(sp)
   11b30:	dc800417 	ldw	r18,16(sp)
   11b34:	dc400317 	ldw	r17,12(sp)
   11b38:	dc000217 	ldw	r16,8(sp)
   11b3c:	dec00c04 	addi	sp,sp,48
   11b40:	f800283a 	ret
   11b44:	98800117 	ldw	r2,4(r19)
   11b48:	80c00017 	ldw	r3,0(r16)
   11b4c:	10bfffc4 	addi	r2,r2,-1
   11b50:	17001526 	beq	r2,fp,11ba8 <__call_exitprocs+0x164>
   11b54:	80000015 	stw	zero,0(r16)
   11b58:	183fde26 	beq	r3,zero,11ad4 <__alt_data_end+0xfffbc3a4>
   11b5c:	00800044 	movi	r2,1
   11b60:	1708983a 	sll	r4,r2,fp
   11b64:	98806217 	ldw	r2,392(r19)
   11b68:	9dc00117 	ldw	r23,4(r19)
   11b6c:	2084703a 	and	r2,r4,r2
   11b70:	1000061e 	bne	r2,zero,11b8c <__call_exitprocs+0x148>
   11b74:	183ee83a 	callr	r3
   11b78:	98800117 	ldw	r2,4(r19)
   11b7c:	15ffc51e 	bne	r2,r23,11a94 <__alt_data_end+0xfffbc364>
   11b80:	a8800017 	ldw	r2,0(r21)
   11b84:	14ffd326 	beq	r2,r19,11ad4 <__alt_data_end+0xfffbc3a4>
   11b88:	003fc206 	br	11a94 <__alt_data_end+0xfffbc364>
   11b8c:	98806317 	ldw	r2,396(r19)
   11b90:	2084703a 	and	r2,r4,r2
   11b94:	1000061e 	bne	r2,zero,11bb0 <__call_exitprocs+0x16c>
   11b98:	89400017 	ldw	r5,0(r17)
   11b9c:	9009883a 	mov	r4,r18
   11ba0:	183ee83a 	callr	r3
   11ba4:	003ff406 	br	11b78 <__alt_data_end+0xfffbc448>
   11ba8:	9f000115 	stw	fp,4(r19)
   11bac:	003fea06 	br	11b58 <__alt_data_end+0xfffbc428>
   11bb0:	89000017 	ldw	r4,0(r17)
   11bb4:	183ee83a 	callr	r3
   11bb8:	003fef06 	br	11b78 <__alt_data_end+0xfffbc448>
   11bbc:	98800017 	ldw	r2,0(r19)
   11bc0:	982b883a 	mov	r21,r19
   11bc4:	1027883a 	mov	r19,r2
   11bc8:	983fb61e 	bne	r19,zero,11aa4 <__alt_data_end+0xfffbc374>
   11bcc:	003fd106 	br	11b14 <__alt_data_end+0xfffbc3e4>
   11bd0:	0005883a 	mov	r2,zero
   11bd4:	003ffa06 	br	11bc0 <__alt_data_end+0xfffbc490>

00011bd8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   11bd8:	defffd04 	addi	sp,sp,-12
   11bdc:	df000215 	stw	fp,8(sp)
   11be0:	df000204 	addi	fp,sp,8
   11be4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   11be8:	0001883a 	nop
   11bec:	e0bfff17 	ldw	r2,-4(fp)
   11bf0:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   11bf4:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   11bf8:	10000226 	beq	r2,zero,11c04 <_exit+0x2c>
    ALT_SIM_FAIL();
   11bfc:	002af070 	cmpltui	zero,zero,43969
   11c00:	00000106 	br	11c08 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   11c04:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   11c08:	003fff06 	br	11c08 <__alt_data_end+0xfffbc4d8>
