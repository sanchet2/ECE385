
Final_Project_Code.elf:     file format elf32-littlenios2
Final_Project_Code.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0000022c

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x000125d0 memsz 0x000125d0 flags r-x
    LOAD off    0x000135f0 vaddr 0x000125f0 paddr 0x000140dc align 2**12
         filesz 0x00001aec memsz 0x00001aec flags rw-
    LOAD off    0x00015bc8 vaddr 0x00015bc8 paddr 0x00015bc8 align 2**12
         filesz 0x00000000 memsz 0x00000180 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000020c  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00011998  0000022c  0000022c  0000122c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000a2c  00011bc4  00011bc4  00012bc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aec  000125f0  000140dc  000135f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000180  00015bc8  00015bc8  00015bc8  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00015d48  00015d48  000150dc  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000150dc  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000d90  00000000  00000000  00015100  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002456b  00000000  00000000  00015e90  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000935b  00000000  00000000  0003a3fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000b529  00000000  00000000  00043756  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002514  00000000  00000000  0004ec80  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003932  00000000  00000000  00051194  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00016da4  00000000  00000000  00054ac6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  0006b86c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001388  00000000  00000000  0006b8b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0007027a  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0007027d  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00070289  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0007028a  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0007028b  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0007028f  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00070293  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  00070297  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  000702a2  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  000702ad  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  000702b8  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000003b  00000000  00000000  000702c3  2**0
                  CONTENTS, READONLY
 29 .jdi          0000444b  00000000  00000000  000702fe  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00083150  00000000  00000000  00074749  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
0000022c l    d  .text	00000000 .text
00011bc4 l    d  .rodata	00000000 .rodata
000125f0 l    d  .rwdata	00000000 .rwdata
00015bc8 l    d  .bss	00000000 .bss
00015d48 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Final_Project_Code_bsp//obj/HAL/src/crt0.o
00000264 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 io_handler.c
00000000 l    df *ABS*	00000000 keyboard_functions.c
00015bc8 l     O .bss	00000002 ctl_reg
00015bca l     O .bss	00000002 no_device
00000000 l    df *ABS*	00000000 main.c
00015be4 l     O .bss	00000004 projectiles
00000000 l    df *ABS*	00000000 play_game.c
00000000 l    df *ABS*	00000000 usb.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00012336 l     O .rodata	00000010 zeroes.4181
00012346 l     O .rodata	00000010 blanks.4180
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00005598 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00007140 l     F .text	00000008 __fp_lock
00007148 l     F .text	00000008 __fp_unlock
0000715c l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
000129f8 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
00012e3c l     O .rwdata	00000020 lc_ctype_charset
00012e1c l     O .rwdata	00000020 lc_message_charset
00012e5c l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00012378 l     O .rodata	0000000c p05.2678
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00009e90 l     F .text	000000fc __sprint_r.part.0
000124ac l     O .rodata	00000010 blanks.4125
0001249c l     O .rodata	00000010 zeroes.4126
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0000c994 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0000f2e4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000f40c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000f438 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000f540 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000f63c l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000f720 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000f904 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000140cc l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0000fbb8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000fd08 l     F .text	00000038 alt_dev_reg
0001303c l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000ffe4 l     F .text	00000204 altera_avalon_jtag_uart_irq
000101e8 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00010abc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00010f54 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
000110ac l     F .text	00000050 alt_get_errno
000110fc l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00015c1c g     O .bss	00000004 alt_instruction_exception_handler
00009524 g     F .text	00000074 _mprec_log10
00009610 g     F .text	0000008c __any_on
0000b8bc g     F .text	00000054 _isatty_r
00012384 g     O .rodata	00000028 __mprec_tinytens
0000f84c g     F .text	00000078 alt_main
00003190 g     F .text	000000b8 _puts_r
00015c48 g     O .bss	00000100 alt_irq
0000b910 g     F .text	0000005c _lseek_r
000140dc g       *ABS*	00000000 __flash_rwdata_start
0000dd04 g     F .text	00000084 .hidden __eqdf2
00015d48 g       *ABS*	00000000 __alt_heap_start
00003154 g     F .text	0000003c printf
0000bb38 g     F .text	0000009c _wcrtomb_r
00015bd8 g     O .bss	00000002 usb_ctl_val
00009d88 g     F .text	0000005c __sseek
000074a4 g     F .text	00000010 __sinit
00015bd0 g     O .bss	00000004 keycode
0000b9c8 g     F .text	00000154 __swbuf_r
00007f1c g     F .text	0000007c _setlocale_r
000072fc g     F .text	00000078 __sfmoreglue
0000f8e4 g     F .text	00000020 __malloc_unlock
0000285c g     F .text	00000080 UsbGetRetryCnt
000083d4 g     F .text	0000015c memmove
00000268 g     F .text	00000060 IO_init
0000748c g     F .text	00000018 _cleanup
00008654 g     F .text	000000a8 _Balloc
0000dd88 g     F .text	000000e0 .hidden __gtdf2
000114ec g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
0000b864 g     F .text	00000058 _fstat_r
00015bf4 g     O .bss	00000004 errno
00009d04 g     F .text	00000008 __seofread
00000394 g     F .text	0000030c get_keycode
00015c08 g     O .bss	00000004 alt_argv
0001c09c g       *ABS*	00000000 _gp
0000fb88 g     F .text	00000030 usleep
00012ebc g     O .rwdata	00000180 alt_fd_list
0001150c g     F .text	00000090 alt_find_dev
0000829c g     F .text	00000138 memcpy
00001580 g     F .text	00000080 fire_projectile
00007150 g     F .text	0000000c _cleanup_r
0000f10c g     F .text	000000d0 .hidden __floatsidf
00011034 g     F .text	00000078 alt_io_redirect
00015bda g     O .bss	00000001 data_size
0000de68 g     F .text	000000e0 .hidden __ltdf2
00011bc4 g       *ABS*	00000000 __DTOR_END__
00003248 g     F .text	00000014 puts
00011784 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00009c3c g     F .text	00000074 __fpclassifyd
00009480 g     F .text	000000a4 __ratio
0000b3c8 g     F .text	00000024 __vfiprintf_internal
000103e4 g     F .text	0000020c altera_avalon_jtag_uart_read
00002958 g     F .text	00000014 malloc
00003128 g     F .text	0000002c _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0000cab0 g     F .text	00000008 .hidden __udivsi3
0000f590 g     F .text	000000ac isatty
000123d4 g     O .rodata	000000c8 __mprec_tens
00007f98 g     F .text	0000000c __locale_charset
00015bf0 g     O .bss	00000004 __malloc_top_pad
00001efc g     F .text	00000264 UsbGetConfigDesc2
000140ac g     O .rwdata	00000004 __mb_cur_max
00007fc8 g     F .text	0000000c _localeconv_r
00008a7c g     F .text	0000003c __i2b
00007908 g     F .text	000004a4 __sfvwrite_r
00015bdc g     O .bss	00000002 intStat
0000325c g     F .text	00000054 _sbrk_r
0000b96c g     F .text	0000005c _read_r
000140c4 g     O .rwdata	00000004 alt_max_fd
0000b574 g     F .text	00000100 _fclose_r
00007110 g     F .text	00000030 fflush
00015bec g     O .bss	00000004 __malloc_max_sbrked_mem
000011c8 g     F .text	000000a0 render_shadows
0000cae8 g     F .text	0000089c .hidden __adddf3
00009228 g     F .text	0000011c __b2d
0000c378 g     F .text	0000061c .hidden __umoddi3
0000f770 g     F .text	000000dc lseek
000140a4 g     O .rwdata	00000004 _global_impure_ptr
0000969c g     F .text	000005a0 _realloc_r
00015d48 g       *ABS*	00000000 __bss_end
00010e64 g     F .text	000000f0 alt_iic_isr_register
000113e8 g     F .text	00000104 alt_tick
0000bd38 g     F .text	00000640 .hidden __udivdi3
0000b688 g     F .text	00000184 _fputwc_r
000123ac g     O .rodata	00000028 __mprec_bigtens
00008860 g     F .text	00000104 __s2b
0000f1dc g     F .text	000000a4 .hidden __floatunsidf
00008fd0 g     F .text	00000060 __mcmp
0000195c g     F .text	000000fc UsbSetAddress
000074c4 g     F .text	00000018 __fp_lock_all
00010e18 g     F .text	0000004c alt_ic_irq_enabled
00011350 g     F .text	00000098 alt_alarm_stop
00015c10 g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	000000d0 alt_irq_handler
00012e94 g     O .rwdata	00000028 alt_dev_null
0000161c g     F .text	000000ac init_players
00010aa0 g     F .text	0000001c alt_dcache_flush_all
00008964 g     F .text	00000068 __hi0bits
00000330 g     F .text	00000064 IO_read
0000f084 g     F .text	00000088 .hidden __fixdfsi
000140dc g       *ABS*	00000000 __ram_rwdata_end
000140bc g     O .rwdata	00000008 alt_dev_list
0000fc08 g     F .text	00000100 write
000125f0 g       *ABS*	00000000 __ram_rodata_end
0000f488 g     F .text	000000b8 fstat
0000de68 g     F .text	000000e0 .hidden __ledf2
000028dc g     F .text	0000007c UsbPrintMem
00008d48 g     F .text	00000140 __pow5mult
00009fa4 g     F .text	00001424 ___vfiprintf_internal_r
00015c00 g     O .bss	00000004 __nlocale_changed
0000cab8 g     F .text	00000008 .hidden __umodsi3
00015d48 g       *ABS*	00000000 end
0000ff20 g     F .text	000000c4 altera_avalon_jtag_uart_init
000001cc g     F .exceptions	00000060 alt_instruction_exception_entry
00011bc4 g       *ABS*	00000000 __CTOR_LIST__
00055730 g       *ABS*	00000000 __alt_stack_pointer
0000f280 g     F .text	00000064 .hidden __clzsi2
000105f0 g     F .text	00000218 altera_avalon_jtag_uart_write
000074b4 g     F .text	00000004 __sfp_lock_acquire
000081b4 g     F .text	000000e8 memchr
00003348 g     F .text	000020fc ___vfprintf_internal_r
0000225c g     F .text	000000fc UsbClassRequest
00007618 g     F .text	000002f0 _free_r
00007fa4 g     F .text	00000010 __locale_mb_cur_max
000119fc g     F .text	00000194 __call_exitprocs
00015bfc g     O .bss	00000004 __mlocale_changed
0001409c g     O .rwdata	00000004 __malloc_sbrk_base
0000022c g     F .text	0000003c _start
00015c14 g     O .bss	00000004 _alt_tick_rate
00008e88 g     F .text	00000148 __lshift
00015c18 g     O .bss	00000004 _alt_nticks
0000f954 g     F .text	00000104 read
0000fd74 g     F .text	00000048 alt_sys_init
000118e8 g     F .text	00000114 __register_exitproc
00008ab8 g     F .text	00000290 __multiply
00010290 g     F .text	00000068 altera_avalon_jtag_uart_close
000010ac g     F .text	0000011c renderer
0000cac0 g     F .text	00000028 .hidden __mulsi3
000125f0 g       *ABS*	00000000 __ram_rwdata_start
00011bc4 g       *ABS*	00000000 __ram_rodata_start
00015c20 g     O .bss	00000028 __malloc_current_mallinfo
000006a0 g     F .text	00000a0c setup_keyboard
00009344 g     F .text	0000013c __d2b
00001a58 g     F .text	00000144 UsbGetDeviceDesc1
0000fdbc g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000116b0 g     F .text	000000d4 alt_get_fd
00010948 g     F .text	00000158 alt_busy_sleep
0000b448 g     F .text	00000054 _close_r
000016c8 g     F .text	000000b0 move_player
0001186c g     F .text	0000007c memcmp
0000fe7c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00015d48 g       *ABS*	00000000 __alt_stack_base
0000fecc g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00005468 g     F .text	00000130 __swsetup_r
0000d384 g     F .text	00000980 .hidden __divdf3
00007374 g     F .text	00000118 __sfp
00009598 g     F .text	00000078 __copybits
000125f0 g     O .rwdata	00000408 __malloc_av_
000074c0 g     F .text	00000004 __sinit_lock_release
0000df48 g     F .text	0000086c .hidden __muldf3
00009cb0 g     F .text	00000054 __sread
000027d8 g     F .text	00000084 UsbWaitTDListDone
0001159c g     F .text	00000114 alt_find_file
00010b0c g     F .text	000000a4 alt_dev_llist_insert
0000f8c4 g     F .text	00000020 __malloc_lock
0000fad8 g     F .text	000000b0 sbrk
00006ee8 g     F .text	00000228 _fflush_r
0000b49c g     F .text	000000d8 _calloc_r
00015bde g     O .bss	00000001 hot_plug_count
00015bc8 g       *ABS*	00000000 __bss_start
00008530 g     F .text	00000124 memset
00001778 g     F .text	0000009c main
00015c0c g     O .bss	00000004 alt_envp
00015be8 g     O .bss	00000004 __malloc_max_total_mem
0000fe1c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00002160 g     F .text	000000fc UsbSetConfig
0000bb1c g     F .text	0000001c __swbuf
00009de4 g     F .text	00000008 __sclose
00055730 g       *ABS*	00000000 __alt_heap_limit
0000b674 g     F .text	00000014 fclose
000057c0 g     F .text	00001728 _dtoa_r
00002980 g     F .text	000007a8 _malloc_r
0000bcac g     F .text	00000030 __ascii_wctomb
000140c8 g     O .rwdata	00000004 alt_errno
00007dac g     F .text	000000b8 _fwalk
0000ca00 g     F .text	00000054 .hidden __divsi3
000074f4 g     F .text	00000124 _malloc_trim_r
00002358 g     F .text	00000144 UsbGetHidDesc
00011bc4 g       *ABS*	00000000 __CTOR_END__
00009dec g     F .text	000000a4 strcmp
00011bc4 g       *ABS*	00000000 __flash_rodata_start
00011bc4 g       *ABS*	00000000 __DTOR_LIST__
0000dd04 g     F .text	00000084 .hidden __nedf2
00001868 g     F .text	00000044 UsbRead
0000150c g     F .text	00000074 parse_keycode
0000fd40 g     F .text	00000034 alt_irq_init
0000fa58 g     F .text	00000080 alt_release_fd
000124bc g     O .rodata	00000100 .hidden __clz_tab
00015bf8 g     O .bss	00000004 _PathLocale
00011820 g     F .text	00000014 atexit
0000b3ec g     F .text	0000005c _write_r
00007fd4 g     F .text	0000001c setlocale
000140a8 g     O .rwdata	00000004 _impure_ptr
00015c04 g     O .bss	00000004 alt_argc
00010c0c g     F .text	0000005c _do_dtors
00007fc0 g     F .text	00000008 __locale_cjk_lang
00001600 g     F .text	0000001c check_projectiles
00000020 g       .exceptions	00000000 alt_irq_entry
000091c8 g     F .text	00000060 __ulp
000074dc g     F .text	00000018 __fp_unlock_all
00015bd4 g     O .bss	00000001 toggle
00001268 g     F .text	000000a8 render_players
000140b4 g     O .rwdata	00000008 alt_fs_list
0000249c g     F .text	0000033c UsbGetReportDesc
00000020 g       *ABS*	00000000 __ram_exceptions_start
00007ff0 g     F .text	0000000c localeconv
00010c84 g     F .text	00000050 alt_ic_isr_register
000140dc g       *ABS*	00000000 _edata
00015d48 g       *ABS*	00000000 _end
00001814 g     F .text	00000054 UsbWrite
0000022c g       *ABS*	00000000 __ram_exceptions_end
000102f8 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
00015be0 g     O .bss	00000002 code
00010d74 g     F .text	000000a4 alt_ic_irq_disable
00009d0c g     F .text	0000007c __swrite
000140a0 g     O .rwdata	00000004 __malloc_trim_threshold
00007fb4 g     F .text	0000000c __locale_msgcharset
00015bcc g     O .bss	00000002 fs_device
00011834 g     F .text	00000038 exit
00007e64 g     F .text	000000b8 _fwalk_reent
00009030 g     F .text	00000198 __mdiff
0000ca54 g     F .text	0000005c .hidden __modsi3
00055730 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
000074b8 g     F .text	00000004 __sfp_lock_release
000002c8 g     F .text	00000068 IO_write
00011b90 g     F .text	00000034 _exit
00010808 g     F .text	00000140 alt_alarm_start
00007ffc g     F .text	000001b8 __smakebuf_r
000032b0 g     F .text	00000098 strlen
000111f0 g     F .text	00000160 open
0000dd88 g     F .text	000000e0 .hidden __gedf2
000140b0 g     O .rwdata	00000004 __wctomb
00009f8c g     F .text	00000018 __sprint_r
00010c68 g     F .text	0000001c alt_icache_flush_all
000140d0 g     O .rwdata	00000004 alt_priority_mask
00010cd4 g     F .text	000000a0 alt_ic_irq_enable
00005444 g     F .text	00000024 __vfprintf_internal
0000bcdc g     F .text	0000005c _wctomb_r
0000e7b4 g     F .text	000008d0 .hidden __subdf3
00001310 g     F .text	000001fc keycode_effect
000089cc g     F .text	000000b0 __lo0bits
00001d70 g     F .text	0000018c UsbGetConfigDesc1
000140d4 g     O .rwdata	00000008 alt_alarm_list
00010bb0 g     F .text	0000005c _do_ctors
000018ac g     F .text	000000b0 UsbSoftReset
0000bbd4 g     F .text	000000d8 wcrtomb
0000f334 g     F .text	000000d8 close
00001b9c g     F .text	000001d4 UsbGetDeviceDesc2
0000f6a0 g     F .text	00000080 alt_load
0000b80c g     F .text	00000058 fputwc
0000296c g     F .text	00000014 free
000074bc g     F .text	00000004 __sinit_lock_acquire
00008724 g     F .text	0000013c __multadd
000086fc g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08408b14 	ori	at,at,556
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001cc0 	call	1cc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	00800074 	movhi	r2,1
 140:	10971204 	addi	r2,r2,23624
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	00800074 	movhi	r2,1
 158:	10971204 	addi	r2,r2,23624
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <__alt_data_end+0xfffaa9fc>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <__alt_data_end+0xfffaa9f0>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0001883a 	nop
}
 1b8:	e037883a 	mov	sp,fp
 1bc:	dfc00117 	ldw	ra,4(sp)
 1c0:	df000017 	ldw	fp,0(sp)
 1c4:	dec00204 	addi	sp,sp,8
 1c8:	f800283a 	ret

000001cc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1cc:	defffb04 	addi	sp,sp,-20
 1d0:	dfc00415 	stw	ra,16(sp)
 1d4:	df000315 	stw	fp,12(sp)
 1d8:	df000304 	addi	fp,sp,12
 1dc:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 1e0:	00bfffc4 	movi	r2,-1
 1e4:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 1e8:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1ec:	d0a6e017 	ldw	r2,-25728(gp)
 1f0:	10000726 	beq	r2,zero,210 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 1f4:	d0a6e017 	ldw	r2,-25728(gp)
 1f8:	e0fffd17 	ldw	r3,-12(fp)
 1fc:	1809883a 	mov	r4,r3
 200:	e17fff17 	ldw	r5,-4(fp)
 204:	e1bffe17 	ldw	r6,-8(fp)
 208:	103ee83a 	callr	r2
 20c:	00000206 	br	218 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 210:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 214:	0005883a 	mov	r2,zero
}
 218:	e037883a 	mov	sp,fp
 21c:	dfc00117 	ldw	ra,4(sp)
 220:	df000017 	ldw	fp,0(sp)
 224:	dec00204 	addi	sp,sp,8
 228:	f800283a 	ret

Disassembly of section .text:

0000022c <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     22c:	06c00174 	movhi	sp,5
    ori sp, sp, %lo(__alt_stack_pointer)
     230:	ded5cc14 	ori	sp,sp,22320
    movhi gp, %hi(_gp)
     234:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     238:	d6b02714 	ori	gp,gp,49308
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     23c:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     240:	1096f214 	ori	r2,r2,23496

    movhi r3, %hi(__bss_end)
     244:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     248:	18d75214 	ori	r3,r3,23880

    beq r2, r3, 1f
     24c:	10c00326 	beq	r2,r3,25c <_start+0x30>

0:
    stw zero, (r2)
     250:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     254:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     258:	10fffd36 	bltu	r2,r3,250 <__alt_data_end+0xfffaab20>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     25c:	000f6a00 	call	f6a0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     260:	000f84c0 	call	f84c <alt_main>

00000264 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     264:	003fff06 	br	264 <__alt_data_end+0xfffaab34>

00000268 <IO_init>:
#define otg_hpi_cs			(volatile char*)	OTG_HPI_CS_BASE //FOR SOME REASON CS BASE BEHAVES WEIRDLY MIGHT HAVE TO SET MANUALLY
#define otg_hpi_w			(volatile char*)	OTG_HPI_W_BASE


void IO_init(void)
{
     268:	deffff04 	addi	sp,sp,-4
     26c:	df000015 	stw	fp,0(sp)
     270:	d839883a 	mov	fp,sp
	*otg_hpi_cs = 0;
     274:	00800234 	movhi	r2,8
     278:	10841404 	addi	r2,r2,4176
     27c:	10000005 	stb	zero,0(r2)
	*otg_hpi_r = 1;
     280:	00800234 	movhi	r2,8
     284:	10840804 	addi	r2,r2,4128
     288:	00c00044 	movi	r3,1
     28c:	10c00005 	stb	r3,0(r2)
	*otg_hpi_w = 1;
     290:	00800234 	movhi	r2,8
     294:	10840404 	addi	r2,r2,4112
     298:	00c00044 	movi	r3,1
     29c:	10c00005 	stb	r3,0(r2)
	*otg_hpi_address = 0;
     2a0:	00800234 	movhi	r2,8
     2a4:	10841004 	addi	r2,r2,4160
     2a8:	10000015 	stw	zero,0(r2)
	*otg_hpi_data = 0;
     2ac:	00800234 	movhi	r2,8
     2b0:	10840c04 	addi	r2,r2,4144
     2b4:	10000015 	stw	zero,0(r2)
}
     2b8:	e037883a 	mov	sp,fp
     2bc:	df000017 	ldw	fp,0(sp)
     2c0:	dec00104 	addi	sp,sp,4
     2c4:	f800283a 	ret

000002c8 <IO_write>:

void IO_write(alt_u8 Address, alt_u16 Data)
{
     2c8:	defffd04 	addi	sp,sp,-12
     2cc:	df000215 	stw	fp,8(sp)
     2d0:	df000204 	addi	fp,sp,8
     2d4:	2007883a 	mov	r3,r4
     2d8:	2805883a 	mov	r2,r5
     2dc:	e0fffe05 	stb	r3,-8(fp)
     2e0:	e0bfff0d 	sth	r2,-4(fp)
	*otg_hpi_address = Address;
     2e4:	00800234 	movhi	r2,8
     2e8:	10841004 	addi	r2,r2,4160
     2ec:	e0fffe03 	ldbu	r3,-8(fp)
     2f0:	10c00015 	stw	r3,0(r2)
	*otg_hpi_data = Data;
     2f4:	00800234 	movhi	r2,8
     2f8:	10840c04 	addi	r2,r2,4144
     2fc:	e0ffff0b 	ldhu	r3,-4(fp)
     300:	10c00015 	stw	r3,0(r2)
	*otg_hpi_w = 0;
     304:	00800234 	movhi	r2,8
     308:	10840404 	addi	r2,r2,4112
     30c:	10000005 	stb	zero,0(r2)
	*otg_hpi_w = 1;
     310:	00800234 	movhi	r2,8
     314:	10840404 	addi	r2,r2,4112
     318:	00c00044 	movi	r3,1
     31c:	10c00005 	stb	r3,0(r2)
}
     320:	e037883a 	mov	sp,fp
     324:	df000017 	ldw	fp,0(sp)
     328:	dec00104 	addi	sp,sp,4
     32c:	f800283a 	ret

00000330 <IO_read>:

alt_u16 IO_read(alt_u8 Address)
{
     330:	defffd04 	addi	sp,sp,-12
     334:	df000215 	stw	fp,8(sp)
     338:	df000204 	addi	fp,sp,8
     33c:	2005883a 	mov	r2,r4
     340:	e0bfff05 	stb	r2,-4(fp)
	alt_u16 temp;
	*otg_hpi_address = Address;
     344:	00800234 	movhi	r2,8
     348:	10841004 	addi	r2,r2,4160
     34c:	e0ffff03 	ldbu	r3,-4(fp)
     350:	10c00015 	stw	r3,0(r2)
	*otg_hpi_r = 0;
     354:	00800234 	movhi	r2,8
     358:	10840804 	addi	r2,r2,4128
     35c:	10000005 	stb	zero,0(r2)
	temp = *otg_hpi_data;
     360:	00800234 	movhi	r2,8
     364:	10840c04 	addi	r2,r2,4144
     368:	10800017 	ldw	r2,0(r2)
     36c:	e0bffe0d 	sth	r2,-8(fp)
	*otg_hpi_r = 1;
     370:	00800234 	movhi	r2,8
     374:	10840804 	addi	r2,r2,4128
     378:	00c00044 	movi	r3,1
     37c:	10c00005 	stb	r3,0(r2)

	return temp;
     380:	e0bffe0b 	ldhu	r2,-8(fp)
}
     384:	e037883a 	mov	sp,fp
     388:	df000017 	ldw	fp,0(sp)
     38c:	dec00104 	addi	sp,sp,4
     390:	f800283a 	ret

00000394 <get_keycode>:
alt_u16 code;




int get_keycode(unsigned int *keycode1,unsigned int *keycode2){
     394:	defffc04 	addi	sp,sp,-16
     398:	dfc00315 	stw	ra,12(sp)
     39c:	df000215 	stw	fp,8(sp)
     3a0:	df000204 	addi	fp,sp,8
     3a4:	e13ffe15 	stw	r4,-8(fp)
     3a8:	e17fff15 	stw	r5,-4(fp)
				toggle++;
     3ac:	d0a6ce03 	ldbu	r2,-25800(gp)
     3b0:	10800044 	addi	r2,r2,1
     3b4:	d0a6ce05 	stb	r2,-25800(gp)
				IO_write(HPI_ADDR,0x0500); //the start address
     3b8:	01000084 	movi	r4,2
     3bc:	01414004 	movi	r5,1280
     3c0:	00002c80 	call	2c8 <IO_write>
				//data phase IN-1
				IO_write(HPI_DATA,0x051c); //500
     3c4:	0009883a 	mov	r4,zero
     3c8:	01414704 	movi	r5,1308
     3cc:	00002c80 	call	2c8 <IO_write>

				IO_write(HPI_DATA,0x000f & data_size);//2 data length
     3d0:	d0a6cf83 	ldbu	r2,-25794(gp)
     3d4:	10803fcc 	andi	r2,r2,255
     3d8:	108003cc 	andi	r2,r2,15
     3dc:	0009883a 	mov	r4,zero
     3e0:	100b883a 	mov	r5,r2
     3e4:	00002c80 	call	2c8 <IO_write>

				IO_write(HPI_DATA,0x0291);//4 //endpoint 1
     3e8:	0009883a 	mov	r4,zero
     3ec:	0140a444 	movi	r5,657
     3f0:	00002c80 	call	2c8 <IO_write>
				if(toggle%2)
     3f4:	d0a6ce03 	ldbu	r2,-25800(gp)
     3f8:	1080004c 	andi	r2,r2,1
     3fc:	10803fcc 	andi	r2,r2,255
     400:	10000426 	beq	r2,zero,414 <get_keycode+0x80>
				{
					IO_write(HPI_DATA,0x0001);//6 //data 1
     404:	0009883a 	mov	r4,zero
     408:	01400044 	movi	r5,1
     40c:	00002c80 	call	2c8 <IO_write>
     410:	00000306 	br	420 <get_keycode+0x8c>
				}
				else
				{
					IO_write(HPI_DATA,0x0041);//6 //data 1
     414:	0009883a 	mov	r4,zero
     418:	01401044 	movi	r5,65
     41c:	00002c80 	call	2c8 <IO_write>
				}
				IO_write(HPI_DATA,0x0013);//8
     420:	0009883a 	mov	r4,zero
     424:	014004c4 	movi	r5,19
     428:	00002c80 	call	2c8 <IO_write>
				IO_write(HPI_DATA,0x0000);//a
     42c:	0009883a 	mov	r4,zero
     430:	000b883a 	mov	r5,zero
     434:	00002c80 	call	2c8 <IO_write>
				UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
     438:	01006c04 	movi	r4,432
     43c:	01414004 	movi	r5,1280
     440:	00018140 	call	1814 <UsbWrite>

				while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     444:	00002506 	br	4dc <get_keycode+0x148>
				{
					IO_write(HPI_ADDR,0x0500); //the start address
     448:	01000084 	movi	r4,2
     44c:	01414004 	movi	r5,1280
     450:	00002c80 	call	2c8 <IO_write>
					//data phase IN-1
					IO_write(HPI_DATA,0x051c); //500
     454:	0009883a 	mov	r4,zero
     458:	01414704 	movi	r5,1308
     45c:	00002c80 	call	2c8 <IO_write>

					IO_write(HPI_DATA,0x000f & data_size);//2 data length
     460:	d0a6cf83 	ldbu	r2,-25794(gp)
     464:	10803fcc 	andi	r2,r2,255
     468:	108003cc 	andi	r2,r2,15
     46c:	0009883a 	mov	r4,zero
     470:	100b883a 	mov	r5,r2
     474:	00002c80 	call	2c8 <IO_write>

					IO_write(HPI_DATA,0x0291);//4 //endpoint 1
     478:	0009883a 	mov	r4,zero
     47c:	0140a444 	movi	r5,657
     480:	00002c80 	call	2c8 <IO_write>
					if(toggle%2)
     484:	d0a6ce03 	ldbu	r2,-25800(gp)
     488:	1080004c 	andi	r2,r2,1
     48c:	10803fcc 	andi	r2,r2,255
     490:	10000426 	beq	r2,zero,4a4 <get_keycode+0x110>
					{
						IO_write(HPI_DATA,0x0001);//6 //data 1
     494:	0009883a 	mov	r4,zero
     498:	01400044 	movi	r5,1
     49c:	00002c80 	call	2c8 <IO_write>
     4a0:	00000306 	br	4b0 <get_keycode+0x11c>
					}
					else
					{
						IO_write(HPI_DATA,0x0041);//6 //data 1
     4a4:	0009883a 	mov	r4,zero
     4a8:	01401044 	movi	r5,65
     4ac:	00002c80 	call	2c8 <IO_write>
					}
					IO_write(HPI_DATA,0x0013);//8
     4b0:	0009883a 	mov	r4,zero
     4b4:	014004c4 	movi	r5,19
     4b8:	00002c80 	call	2c8 <IO_write>
					IO_write(HPI_DATA,0x0000);//
     4bc:	0009883a 	mov	r4,zero
     4c0:	000b883a 	mov	r5,zero
     4c4:	00002c80 	call	2c8 <IO_write>
					UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
     4c8:	01006c04 	movi	r4,432
     4cc:	01414004 	movi	r5,1280
     4d0:	00018140 	call	1814 <UsbWrite>
					usleep(10*1000);
     4d4:	0109c404 	movi	r4,10000
     4d8:	000fb880 	call	fb88 <usleep>
				}
				IO_write(HPI_DATA,0x0013);//8
				IO_write(HPI_DATA,0x0000);//a
				UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr

				while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     4dc:	010000c4 	movi	r4,3
     4e0:	00003300 	call	330 <IO_read>
     4e4:	10bfffcc 	andi	r2,r2,65535
     4e8:	1080040c 	andi	r2,r2,16
     4ec:	103fd626 	beq	r2,zero,448 <__alt_data_end+0xfffaad18>
					usleep(10*1000);
				}//end while



				usb_ctl_val = UsbWaitTDListDone();
     4f0:	00027d80 	call	27d8 <UsbWaitTDListDone>
     4f4:	d0a6cf0d 	sth	r2,-25796(gp)

				// packet starts from 0x051c, reading third byte
				// TASK: Write the address to read from the memory for byte 3 of the report descriptor to HPI_ADDR.
				IO_write(HPI_ADDR,0x051e); //the start address
     4f8:	01000084 	movi	r4,2
     4fc:	01414784 	movi	r5,1310
     500:	00002c80 	call	2c8 <IO_write>
				*keycode1 = IO_read(HPI_DATA);
     504:	0009883a 	mov	r4,zero
     508:	00003300 	call	330 <IO_read>
     50c:	10ffffcc 	andi	r3,r2,65535
     510:	e0bffe17 	ldw	r2,-8(fp)
     514:	10c00015 	stw	r3,0(r2)
				keycode=*keycode1;
     518:	e0bffe17 	ldw	r2,-8(fp)
     51c:	10800017 	ldw	r2,0(r2)
     520:	d0a6cd15 	stw	r2,-25804(gp)


				*keycode2 = IO_read(HPI_DATA);
     524:	0009883a 	mov	r4,zero
     528:	00003300 	call	330 <IO_read>
     52c:	10ffffcc 	andi	r3,r2,65535
     530:	e0bfff17 	ldw	r2,-4(fp)
     534:	10c00015 	stw	r3,0(r2)


				IOWR(KEYCODE_BASE, 0, keycode & 0xff);
     538:	d0a6cd17 	ldw	r2,-25804(gp)
     53c:	10c03fcc 	andi	r3,r2,255
     540:	00800234 	movhi	r2,8
     544:	10841804 	addi	r2,r2,4192
     548:	10c00035 	stwio	r3,0(r2)



				usb_ctl_val = UsbRead(ctl_reg);
     54c:	d0a6cb0b 	ldhu	r2,-25812(gp)
     550:	10bfffcc 	andi	r2,r2,65535
     554:	1009883a 	mov	r4,r2
     558:	00018680 	call	1868 <UsbRead>
     55c:	d0a6cf0d 	sth	r2,-25796(gp)

				if(!(usb_ctl_val & no_device))
     560:	d0e6cf0b 	ldhu	r3,-25796(gp)
     564:	d0a6cb8b 	ldhu	r2,-25810(gp)
     568:	1884703a 	and	r2,r3,r2
     56c:	10bfffcc 	andi	r2,r2,65535
     570:	1000211e 	bne	r2,zero,5f8 <get_keycode+0x264>
				{
					//USB hot plug routine
					for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
     574:	d026d085 	stb	zero,-25790(gp)
     578:	00001006 	br	5bc <get_keycode+0x228>
					{
						usleep(5*1000);
     57c:	0104e204 	movi	r4,5000
     580:	000fb880 	call	fb88 <usleep>
						usb_ctl_val = UsbRead(ctl_reg);
     584:	d0a6cb0b 	ldhu	r2,-25812(gp)
     588:	10bfffcc 	andi	r2,r2,65535
     58c:	1009883a 	mov	r4,r2
     590:	00018680 	call	1868 <UsbRead>
     594:	d0a6cf0d 	sth	r2,-25796(gp)
						if(usb_ctl_val & no_device) break;
     598:	d0e6cf0b 	ldhu	r3,-25796(gp)
     59c:	d0a6cb8b 	ldhu	r2,-25810(gp)
     5a0:	1884703a 	and	r2,r3,r2
     5a4:	10bfffcc 	andi	r2,r2,65535
     5a8:	10000126 	beq	r2,zero,5b0 <get_keycode+0x21c>
     5ac:	00000706 	br	5cc <get_keycode+0x238>
				usb_ctl_val = UsbRead(ctl_reg);

				if(!(usb_ctl_val & no_device))
				{
					//USB hot plug routine
					for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
     5b0:	d0a6d083 	ldbu	r2,-25790(gp)
     5b4:	10800044 	addi	r2,r2,1
     5b8:	d0a6d085 	stb	r2,-25790(gp)
     5bc:	d0a6d083 	ldbu	r2,-25790(gp)
     5c0:	10803fcc 	andi	r2,r2,255
     5c4:	108001f0 	cmpltui	r2,r2,7
     5c8:	103fec1e 	bne	r2,zero,57c <__alt_data_end+0xfffaae4c>
					{
						usleep(5*1000);
						usb_ctl_val = UsbRead(ctl_reg);
						if(usb_ctl_val & no_device) break;
					}
					if(!(usb_ctl_val & no_device))
     5cc:	d0e6cf0b 	ldhu	r3,-25796(gp)
     5d0:	d0a6cb8b 	ldhu	r2,-25810(gp)
     5d4:	1884703a 	and	r2,r3,r2
     5d8:	10bfffcc 	andi	r2,r2,65535
     5dc:	1000061e 	bne	r2,zero,5f8 <get_keycode+0x264>
					{
						printf("\n[INFO]: the keyboard has been removed!!! \n");
     5e0:	01000074 	movhi	r4,1
     5e4:	2106f104 	addi	r4,r4,7108
     5e8:	00032480 	call	3248 <puts>
						printf("[INFO]: please insert again!!! \n");
     5ec:	01000074 	movhi	r4,1
     5f0:	2106fc04 	addi	r4,r4,7152
     5f4:	00032480 	call	3248 <puts>
					}
				}

				while (!(usb_ctl_val & no_device))
     5f8:	00001e06 	br	674 <get_keycode+0x2e0>
				{

					usb_ctl_val = UsbRead(ctl_reg);
     5fc:	d0a6cb0b 	ldhu	r2,-25812(gp)
     600:	10bfffcc 	andi	r2,r2,65535
     604:	1009883a 	mov	r4,r2
     608:	00018680 	call	1868 <UsbRead>
     60c:	d0a6cf0d 	sth	r2,-25796(gp)
					usleep(5*1000);
     610:	0104e204 	movi	r4,5000
     614:	000fb880 	call	fb88 <usleep>
					usb_ctl_val = UsbRead(ctl_reg);
     618:	d0a6cb0b 	ldhu	r2,-25812(gp)
     61c:	10bfffcc 	andi	r2,r2,65535
     620:	1009883a 	mov	r4,r2
     624:	00018680 	call	1868 <UsbRead>
     628:	d0a6cf0d 	sth	r2,-25796(gp)
					usleep(5*1000);
     62c:	0104e204 	movi	r4,5000
     630:	000fb880 	call	fb88 <usleep>
					usb_ctl_val = UsbRead(ctl_reg);
     634:	d0a6cb0b 	ldhu	r2,-25812(gp)
     638:	10bfffcc 	andi	r2,r2,65535
     63c:	1009883a 	mov	r4,r2
     640:	00018680 	call	1868 <UsbRead>
     644:	d0a6cf0d 	sth	r2,-25796(gp)
					usleep(5*1000);
     648:	0104e204 	movi	r4,5000
     64c:	000fb880 	call	fb88 <usleep>

					if(usb_ctl_val & no_device)
     650:	d0e6cf0b 	ldhu	r3,-25796(gp)
     654:	d0a6cb8b 	ldhu	r2,-25810(gp)
     658:	1884703a 	and	r2,r3,r2
     65c:	10bfffcc 	andi	r2,r2,65535
     660:	10000226 	beq	r2,zero,66c <get_keycode+0x2d8>
						return -1;
     664:	00bfffc4 	movi	r2,-1
     668:	00000806 	br	68c <get_keycode+0x2f8>

					usleep(200);
     66c:	01003204 	movi	r4,200
     670:	000fb880 	call	fb88 <usleep>
						printf("\n[INFO]: the keyboard has been removed!!! \n");
						printf("[INFO]: please insert again!!! \n");
					}
				}

				while (!(usb_ctl_val & no_device))
     674:	d0e6cf0b 	ldhu	r3,-25796(gp)
     678:	d0a6cb8b 	ldhu	r2,-25810(gp)
     67c:	1884703a 	and	r2,r3,r2
     680:	10bfffcc 	andi	r2,r2,65535
     684:	103fdd26 	beq	r2,zero,5fc <__alt_data_end+0xfffaaecc>
					if(usb_ctl_val & no_device)
						return -1;

					usleep(200);
				}
				return 0;
     688:	0005883a 	mov	r2,zero
}
     68c:	e037883a 	mov	sp,fp
     690:	dfc00117 	ldw	ra,4(sp)
     694:	df000017 	ldw	fp,0(sp)
     698:	dec00204 	addi	sp,sp,8
     69c:	f800283a 	ret

000006a0 <setup_keyboard>:


void setup_keyboard()
{
     6a0:	defffe04 	addi	sp,sp,-8
     6a4:	dfc00115 	stw	ra,4(sp)
     6a8:	df000015 	stw	fp,0(sp)
     6ac:	d839883a 	mov	fp,sp
	IO_init();
     6b0:	00002680 	call	268 <IO_init>
		usleep(10*10000);
	}*/



	printf("USB keyboard setup...\n\n");
     6b4:	01000074 	movhi	r4,1
     6b8:	21070404 	addi	r4,r4,7184
     6bc:	00032480 	call	3248 <puts>

	//----------------------------------------SIE1 initial---------------------------------------------------//
	USB_HOT_PLUG:
	UsbSoftReset();
     6c0:	00018ac0 	call	18ac <UsbSoftReset>

	// STEP 1a:
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
     6c4:	01005104 	movi	r4,324
     6c8:	000b883a 	mov	r5,zero
     6cc:	00018140 	call	1814 <UsbWrite>
	UsbWrite (HOST1_STAT_REG, 0xFFFF);
     6d0:	01302414 	movui	r4,49296
     6d4:	017fffd4 	movui	r5,65535
     6d8:	00018140 	call	1814 <UsbWrite>

	/* Set HUSB_pEOT time */
	UsbWrite(HUSB_pEOT, 600); // adjust the according to your USB device speed
     6dc:	01006d04 	movi	r4,436
     6e0:	01409604 	movi	r5,600
     6e4:	00018140 	call	1814 <UsbWrite>

	usb_ctl_val = SOFEOP1_TO_CPU_EN | RESUME1_TO_HPI_EN;// | SOFEOP1_TO_HPI_EN;
     6e8:	00811004 	movi	r2,1088
     6ec:	d0a6cf0d 	sth	r2,-25796(gp)
	UsbWrite(HPI_IRQ_ROUTING_REG, usb_ctl_val);
     6f0:	d0a6cf0b 	ldhu	r2,-25796(gp)
     6f4:	10bfffcc 	andi	r2,r2,65535
     6f8:	01005084 	movi	r4,322
     6fc:	100b883a 	mov	r5,r2
     700:	00018140 	call	1814 <UsbWrite>

	intStat = A_CHG_IRQ_EN | SOF_EOP_IRQ_EN ;
     704:	00808404 	movi	r2,528
     708:	d0a6d00d 	sth	r2,-25792(gp)
	UsbWrite(HOST1_IRQ_EN_REG, intStat);
     70c:	d0a6d00b 	ldhu	r2,-25792(gp)
     710:	10bfffcc 	andi	r2,r2,65535
     714:	01302314 	movui	r4,49292
     718:	100b883a 	mov	r5,r2
     71c:	00018140 	call	1814 <UsbWrite>
	// STEP 1a end

	// STEP 1b begin
	UsbWrite(COMM_R0,0x0000);//reset time
     720:	01007104 	movi	r4,452
     724:	000b883a 	mov	r5,zero
     728:	00018140 	call	1814 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
     72c:	01007184 	movi	r4,454
     730:	000b883a 	mov	r5,zero
     734:	00018140 	call	1814 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
     738:	01007204 	movi	r4,456
     73c:	000b883a 	mov	r5,zero
     740:	00018140 	call	1814 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
     744:	01007284 	movi	r4,458
     748:	000b883a 	mov	r5,zero
     74c:	00018140 	call	1814 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
     750:	01007304 	movi	r4,460
     754:	000b883a 	mov	r5,zero
     758:	00018140 	call	1814 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
     75c:	01007384 	movi	r4,462
     760:	000b883a 	mov	r5,zero
     764:	00018140 	call	1814 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
     768:	01007404 	movi	r4,464
     76c:	000b883a 	mov	r5,zero
     770:	00018140 	call	1814 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
     774:	01007484 	movi	r4,466
     778:	000b883a 	mov	r5,zero
     77c:	00018140 	call	1814 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
     780:	01007504 	movi	r4,468
     784:	000b883a 	mov	r5,zero
     788:	00018140 	call	1814 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
     78c:	01007584 	movi	r4,470
     790:	000b883a 	mov	r5,zero
     794:	00018140 	call	1814 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
     798:	01007604 	movi	r4,472
     79c:	000b883a 	mov	r5,zero
     7a0:	00018140 	call	1814 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
     7a4:	01007684 	movi	r4,474
     7a8:	000b883a 	mov	r5,zero
     7ac:	00018140 	call	1814 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
     7b0:	01007704 	movi	r4,476
     7b4:	000b883a 	mov	r5,zero
     7b8:	00018140 	call	1814 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
     7bc:	01007784 	movi	r4,478
     7c0:	000b883a 	mov	r5,zero
     7c4:	00018140 	call	1814 <UsbWrite>
	UsbWrite(COMM_INT_NUM,HUSB_SIE1_INIT_INT); //HUSB_SIE1_INIT_INT
     7c8:	01007084 	movi	r4,450
     7cc:	01401c84 	movi	r5,114
     7d0:	00018140 	call	1814 <UsbWrite>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
     7d4:	01000044 	movi	r4,1
     7d8:	01738054 	movui	r5,52737
     7dc:	00002c80 	call	2c8 <IO_write>

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
     7e0:	0001883a 	nop
     7e4:	010000c4 	movi	r4,3
     7e8:	00003300 	call	330 <IO_read>
     7ec:	10bfffcc 	andi	r2,r2,65535
     7f0:	103ffc26 	beq	r2,zero,7e4 <__alt_data_end+0xfffab0b4>
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
     7f4:	0001883a 	nop
     7f8:	01000044 	movi	r4,1
     7fc:	00003300 	call	330 <IO_read>
     800:	10bfffcc 	andi	r2,r2,65535
     804:	1083fb58 	cmpnei	r2,r2,4077
     808:	10000826 	beq	r2,zero,82c <setup_keyboard+0x18c>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
     80c:	01000044 	movi	r4,1
     810:	00003300 	call	330 <IO_read>
     814:	10bfffcc 	andi	r2,r2,65535
     818:	01000074 	movhi	r4,1
     81c:	21070a04 	addi	r4,r4,7208
     820:	100b883a 	mov	r5,r2
     824:	00031540 	call	3154 <printf>
		goto USB_HOT_PLUG;
     828:	003fa506 	br	6c0 <__alt_data_end+0xfffaaf90>
	}
	// STEP 1b end

	printf("STEP 1 Complete");
     82c:	01000074 	movhi	r4,1
     830:	21071304 	addi	r4,r4,7244
     834:	00031540 	call	3154 <printf>
	// STEP 2 begin
	UsbWrite(COMM_INT_NUM,HUSB_RESET_INT); //husb reset
     838:	01007084 	movi	r4,450
     83c:	01401d04 	movi	r5,116
     840:	00018140 	call	1814 <UsbWrite>
	UsbWrite(COMM_R0,0x003c);//reset time
     844:	01007104 	movi	r4,452
     848:	01400f04 	movi	r5,60
     84c:	00018140 	call	1814 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
     850:	01007184 	movi	r4,454
     854:	000b883a 	mov	r5,zero
     858:	00018140 	call	1814 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
     85c:	01007204 	movi	r4,456
     860:	000b883a 	mov	r5,zero
     864:	00018140 	call	1814 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
     868:	01007284 	movi	r4,458
     86c:	000b883a 	mov	r5,zero
     870:	00018140 	call	1814 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
     874:	01007304 	movi	r4,460
     878:	000b883a 	mov	r5,zero
     87c:	00018140 	call	1814 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
     880:	01007384 	movi	r4,462
     884:	000b883a 	mov	r5,zero
     888:	00018140 	call	1814 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
     88c:	01007404 	movi	r4,464
     890:	000b883a 	mov	r5,zero
     894:	00018140 	call	1814 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
     898:	01007484 	movi	r4,466
     89c:	000b883a 	mov	r5,zero
     8a0:	00018140 	call	1814 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
     8a4:	01007504 	movi	r4,468
     8a8:	000b883a 	mov	r5,zero
     8ac:	00018140 	call	1814 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
     8b0:	01007584 	movi	r4,470
     8b4:	000b883a 	mov	r5,zero
     8b8:	00018140 	call	1814 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
     8bc:	01007604 	movi	r4,472
     8c0:	000b883a 	mov	r5,zero
     8c4:	00018140 	call	1814 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
     8c8:	01007684 	movi	r4,474
     8cc:	000b883a 	mov	r5,zero
     8d0:	00018140 	call	1814 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
     8d4:	01007704 	movi	r4,476
     8d8:	000b883a 	mov	r5,zero
     8dc:	00018140 	call	1814 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
     8e0:	01007784 	movi	r4,478
     8e4:	000b883a 	mov	r5,zero
     8e8:	00018140 	call	1814 <UsbWrite>

	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
     8ec:	01000044 	movi	r4,1
     8f0:	01738054 	movui	r5,52737
     8f4:	00002c80 	call	2c8 <IO_write>

	while (IO_read(HPI_MAILBOX) != COMM_ACK)
     8f8:	0001883a 	nop
     8fc:	01000044 	movi	r4,1
     900:	00003300 	call	330 <IO_read>
     904:	10bfffcc 	andi	r2,r2,65535
     908:	1083fb58 	cmpnei	r2,r2,4077
     90c:	10000826 	beq	r2,zero,930 <setup_keyboard+0x290>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
     910:	01000044 	movi	r4,1
     914:	00003300 	call	330 <IO_read>
     918:	10bfffcc 	andi	r2,r2,65535
     91c:	01000074 	movhi	r4,1
     920:	21070a04 	addi	r4,r4,7208
     924:	100b883a 	mov	r5,r2
     928:	00031540 	call	3154 <printf>
		goto USB_HOT_PLUG;
     92c:	003f6406 	br	6c0 <__alt_data_end+0xfffaaf90>
	}
	// STEP 2 end

	ctl_reg = USB1_CTL_REG;
     930:	00b02284 	movi	r2,-16246
     934:	d0a6cb0d 	sth	r2,-25812(gp)
	no_device = (A_DP_STAT | A_DM_STAT);
     938:	008c0004 	movi	r2,12288
     93c:	d0a6cb8d 	sth	r2,-25810(gp)
	fs_device = A_DP_STAT;
     940:	00880004 	movi	r2,8192
     944:	d0a6cc0d 	sth	r2,-25808(gp)
	usb_ctl_val = UsbRead(ctl_reg);
     948:	d0a6cb0b 	ldhu	r2,-25812(gp)
     94c:	10bfffcc 	andi	r2,r2,65535
     950:	1009883a 	mov	r4,r2
     954:	00018680 	call	1868 <UsbRead>
     958:	d0a6cf0d 	sth	r2,-25796(gp)
		}
	}
	else
	{
		 check for low speed or full speed by reading D+ and D- lines */
		if (usb_ctl_val & fs_device)
     95c:	d0e6cf0b 	ldhu	r3,-25796(gp)
     960:	d0a6cc0b 	ldhu	r2,-25808(gp)
     964:	1884703a 	and	r2,r3,r2
     968:	10bfffcc 	andi	r2,r2,65535
     96c:	10000426 	beq	r2,zero,980 <setup_keyboard+0x2e0>
		{
			printf("[INFO]: full speed device\n");
     970:	01000074 	movhi	r4,1
     974:	21071704 	addi	r4,r4,7260
     978:	00032480 	call	3248 <puts>
     97c:	00000306 	br	98c <setup_keyboard+0x2ec>
		}
		else
		{
			printf("[INFO]: low speed device\n");
     980:	01000074 	movhi	r4,1
     984:	21071e04 	addi	r4,r4,7288
     988:	00032480 	call	3248 <puts>



	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();
     98c:	000195c0 	call	195c <UsbSetAddress>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     990:	00000306 	br	9a0 <setup_keyboard+0x300>
	{
		UsbSetAddress();
     994:	000195c0 	call	195c <UsbSetAddress>
		usleep(10*1000);
     998:	0109c404 	movi	r4,10000
     99c:	000fb880 	call	fb88 <usleep>

	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     9a0:	010000c4 	movi	r4,3
     9a4:	00003300 	call	330 <IO_read>
     9a8:	10bfffcc 	andi	r2,r2,65535
     9ac:	1080040c 	andi	r2,r2,16
     9b0:	103ff826 	beq	r2,zero,994 <__alt_data_end+0xfffab264>
	{
		UsbSetAddress();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     9b4:	00027d80 	call	27d8 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506); // i
     9b8:	01000084 	movi	r4,2
     9bc:	01414184 	movi	r5,1286
     9c0:	00002c80 	call	2c8 <IO_write>
	printf("[ENUM PROCESS]:step 3 TD Status Byte is %x\n",IO_read(HPI_DATA));
     9c4:	0009883a 	mov	r4,zero
     9c8:	00003300 	call	330 <IO_read>
     9cc:	10bfffcc 	andi	r2,r2,65535
     9d0:	01000074 	movhi	r4,1
     9d4:	21072504 	addi	r4,r4,7316
     9d8:	100b883a 	mov	r5,r2
     9dc:	00031540 	call	3154 <printf>

	IO_write(HPI_ADDR,0x0508); // n
     9e0:	01000084 	movi	r4,2
     9e4:	01414204 	movi	r5,1288
     9e8:	00002c80 	call	2c8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     9ec:	0009883a 	mov	r4,zero
     9f0:	00003300 	call	330 <IO_read>
     9f4:	d0a6cf0d 	sth	r2,-25796(gp)
	printf("[ENUM PROCESS]:step 3 TD Control Byte is %x\n",usb_ctl_val);
     9f8:	d0a6cf0b 	ldhu	r2,-25796(gp)
     9fc:	10bfffcc 	andi	r2,r2,65535
     a00:	01000074 	movhi	r4,1
     a04:	21073004 	addi	r4,r4,7360
     a08:	100b883a 	mov	r5,r2
     a0c:	00031540 	call	3154 <printf>
	while (usb_ctl_val != 0x03) // retries occurred
     a10:	0001883a 	nop
     a14:	d0a6cf0b 	ldhu	r2,-25796(gp)
     a18:	10bfffcc 	andi	r2,r2,65535
     a1c:	108000d8 	cmpnei	r2,r2,3
     a20:	10000326 	beq	r2,zero,a30 <setup_keyboard+0x390>
	{
		usb_ctl_val = UsbGetRetryCnt();
     a24:	000285c0 	call	285c <UsbGetRetryCnt>
     a28:	d0a6cf0d 	sth	r2,-25796(gp)

		goto USB_HOT_PLUG;
     a2c:	003f2406 	br	6c0 <__alt_data_end+0xfffaaf90>
	}

	printf("------------[ENUM PROCESS]:set address done!---------------\n");
     a30:	01000074 	movhi	r4,1
     a34:	21073c04 	addi	r4,r4,7408
     a38:	00032480 	call	3248 <puts>

	// STEP 4 begin
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1
     a3c:	0001a580 	call	1a58 <UsbGetDeviceDesc1>

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     a40:	00000306 	br	a50 <setup_keyboard+0x3b0>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
     a44:	0001a580 	call	1a58 <UsbGetDeviceDesc1>
		usleep(10*1000);
     a48:	0109c404 	movi	r4,10000
     a4c:	000fb880 	call	fb88 <usleep>
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     a50:	010000c4 	movi	r4,3
     a54:	00003300 	call	330 <IO_read>
     a58:	10bfffcc 	andi	r2,r2,65535
     a5c:	1080040c 	andi	r2,r2,16
     a60:	103ff826 	beq	r2,zero,a44 <__alt_data_end+0xfffab314>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     a64:	00027d80 	call	27d8 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     a68:	01000084 	movi	r4,2
     a6c:	01414184 	movi	r5,1286
     a70:	00002c80 	call	2c8 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
     a74:	0009883a 	mov	r4,zero
     a78:	00003300 	call	330 <IO_read>
     a7c:	10bfffcc 	andi	r2,r2,65535
     a80:	01000074 	movhi	r4,1
     a84:	21074b04 	addi	r4,r4,7468
     a88:	100b883a 	mov	r5,r2
     a8c:	00031540 	call	3154 <printf>

	IO_write(HPI_ADDR,0x0508);
     a90:	01000084 	movi	r4,2
     a94:	01414204 	movi	r5,1288
     a98:	00002c80 	call	2c8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     a9c:	0009883a 	mov	r4,zero
     aa0:	00003300 	call	330 <IO_read>
     aa4:	d0a6cf0d 	sth	r2,-25796(gp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
     aa8:	d0a6cf0b 	ldhu	r2,-25796(gp)
     aac:	10bfffcc 	andi	r2,r2,65535
     ab0:	01000074 	movhi	r4,1
     ab4:	21075604 	addi	r4,r4,7512
     ab8:	100b883a 	mov	r5,r2
     abc:	00031540 	call	3154 <printf>
	while (usb_ctl_val != 0x03)
     ac0:	00000206 	br	acc <setup_keyboard+0x42c>
	{
		usb_ctl_val = UsbGetRetryCnt();
     ac4:	000285c0 	call	285c <UsbGetRetryCnt>
     ac8:	d0a6cf0d 	sth	r2,-25796(gp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
     acc:	d0a6cf0b 	ldhu	r2,-25796(gp)
     ad0:	10bfffcc 	andi	r2,r2,65535
     ad4:	108000d8 	cmpnei	r2,r2,3
     ad8:	103ffa1e 	bne	r2,zero,ac4 <__alt_data_end+0xfffab394>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get device descriptor-1 done!-----------------\n");
     adc:	01000074 	movhi	r4,1
     ae0:	21076204 	addi	r4,r4,7560
     ae4:	00032480 	call	3248 <puts>


	//--------------------------------get device descriptor-2---------------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2
     ae8:	0001b9c0 	call	1b9c <UsbGetDeviceDesc2>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     aec:	00000306 	br	afc <setup_keyboard+0x45c>
	{
		//resend the get device descriptor
		//get device descriptor
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
     af0:	0001b9c0 	call	1b9c <UsbGetDeviceDesc2>
		usleep(10*1000);
     af4:	0109c404 	movi	r4,10000
     af8:	000fb880 	call	fb88 <usleep>
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     afc:	010000c4 	movi	r4,3
     b00:	00003300 	call	330 <IO_read>
     b04:	10bfffcc 	andi	r2,r2,65535
     b08:	1080040c 	andi	r2,r2,16
     b0c:	103ff826 	beq	r2,zero,af0 <__alt_data_end+0xfffab3c0>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     b10:	00027d80 	call	27d8 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     b14:	01000084 	movi	r4,2
     b18:	01414184 	movi	r5,1286
     b1c:	00002c80 	call	2c8 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
     b20:	0009883a 	mov	r4,zero
     b24:	00003300 	call	330 <IO_read>
     b28:	10bfffcc 	andi	r2,r2,65535
     b2c:	01000074 	movhi	r4,1
     b30:	21074b04 	addi	r4,r4,7468
     b34:	100b883a 	mov	r5,r2
     b38:	00031540 	call	3154 <printf>

	IO_write(HPI_ADDR,0x0508);
     b3c:	01000084 	movi	r4,2
     b40:	01414204 	movi	r5,1288
     b44:	00002c80 	call	2c8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     b48:	0009883a 	mov	r4,zero
     b4c:	00003300 	call	330 <IO_read>
     b50:	d0a6cf0d 	sth	r2,-25796(gp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
     b54:	d0a6cf0b 	ldhu	r2,-25796(gp)
     b58:	10bfffcc 	andi	r2,r2,65535
     b5c:	01000074 	movhi	r4,1
     b60:	21075604 	addi	r4,r4,7512
     b64:	100b883a 	mov	r5,r2
     b68:	00031540 	call	3154 <printf>
	while (usb_ctl_val != 0x03)
     b6c:	00000206 	br	b78 <setup_keyboard+0x4d8>
	{
		usb_ctl_val = UsbGetRetryCnt();
     b70:	000285c0 	call	285c <UsbGetRetryCnt>
     b74:	d0a6cf0d 	sth	r2,-25796(gp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
     b78:	d0a6cf0b 	ldhu	r2,-25796(gp)
     b7c:	10bfffcc 	andi	r2,r2,65535
     b80:	108000d8 	cmpnei	r2,r2,3
     b84:	103ffa1e 	bne	r2,zero,b70 <__alt_data_end+0xfffab440>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get device descriptor-2 done!--------------\n");
     b88:	01000074 	movhi	r4,1
     b8c:	21077604 	addi	r4,r4,7640
     b90:	00032480 	call	3248 <puts>


	// STEP 5 begin
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1
     b94:	0001d700 	call	1d70 <UsbGetConfigDesc1>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     b98:	00000306 	br	ba8 <setup_keyboard+0x508>
	{
		//resend the get device descriptor
		//get device descriptor

		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
     b9c:	0001d700 	call	1d70 <UsbGetConfigDesc1>
		usleep(10*1000);
     ba0:	0109c404 	movi	r4,10000
     ba4:	000fb880 	call	fb88 <usleep>
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     ba8:	010000c4 	movi	r4,3
     bac:	00003300 	call	330 <IO_read>
     bb0:	10bfffcc 	andi	r2,r2,65535
     bb4:	1080040c 	andi	r2,r2,16
     bb8:	103ff826 	beq	r2,zero,b9c <__alt_data_end+0xfffab46c>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     bbc:	00027d80 	call	27d8 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     bc0:	01000084 	movi	r4,2
     bc4:	01414184 	movi	r5,1286
     bc8:	00002c80 	call	2c8 <IO_write>
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));
     bcc:	0009883a 	mov	r4,zero
     bd0:	00003300 	call	330 <IO_read>
     bd4:	10bfffcc 	andi	r2,r2,65535
     bd8:	01000074 	movhi	r4,1
     bdc:	21078804 	addi	r4,r4,7712
     be0:	100b883a 	mov	r5,r2
     be4:	00031540 	call	3154 <printf>

	IO_write(HPI_ADDR,0x0508);
     be8:	01000084 	movi	r4,2
     bec:	01414204 	movi	r5,1288
     bf0:	00002c80 	call	2c8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     bf4:	0009883a 	mov	r4,zero
     bf8:	00003300 	call	330 <IO_read>
     bfc:	d0a6cf0d 	sth	r2,-25796(gp)
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
     c00:	d0a6cf0b 	ldhu	r2,-25796(gp)
     c04:	10bfffcc 	andi	r2,r2,65535
     c08:	01000074 	movhi	r4,1
     c0c:	21079304 	addi	r4,r4,7756
     c10:	100b883a 	mov	r5,r2
     c14:	00031540 	call	3154 <printf>
	while (usb_ctl_val != 0x03)
     c18:	00000206 	br	c24 <setup_keyboard+0x584>
	{
		usb_ctl_val = UsbGetRetryCnt();
     c1c:	000285c0 	call	285c <UsbGetRetryCnt>
     c20:	d0a6cf0d 	sth	r2,-25796(gp)
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
     c24:	d0a6cf0b 	ldhu	r2,-25796(gp)
     c28:	10bfffcc 	andi	r2,r2,65535
     c2c:	108000d8 	cmpnei	r2,r2,3
     c30:	103ffa1e 	bne	r2,zero,c1c <__alt_data_end+0xfffab4ec>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}
	printf("------------[ENUM PROCESS]:get configuration descriptor-1 pass------------\n");
     c34:	01000074 	movhi	r4,1
     c38:	21079f04 	addi	r4,r4,7804
     c3c:	00032480 	call	3248 <puts>

	// STEP 6 begin
	//-----------------------------------get configuration descriptor-2------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2
     c40:	0001efc0 	call	1efc <UsbGetConfigDesc2>

	usleep(100*1000);
     c44:	010000b4 	movhi	r4,2
     c48:	2121a804 	addi	r4,r4,-31072
     c4c:	000fb880 	call	fb88 <usleep>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     c50:	00000306 	br	c60 <setup_keyboard+0x5c0>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
     c54:	0001efc0 	call	1efc <UsbGetConfigDesc2>
		usleep(10*1000);
     c58:	0109c404 	movi	r4,10000
     c5c:	000fb880 	call	fb88 <usleep>
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2

	usleep(100*1000);
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     c60:	010000c4 	movi	r4,3
     c64:	00003300 	call	330 <IO_read>
     c68:	10bfffcc 	andi	r2,r2,65535
     c6c:	1080040c 	andi	r2,r2,16
     c70:	103ff826 	beq	r2,zero,c54 <__alt_data_end+0xfffab524>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     c74:	00027d80 	call	27d8 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     c78:	01000084 	movi	r4,2
     c7c:	01414184 	movi	r5,1286
     c80:	00002c80 	call	2c8 <IO_write>
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));
     c84:	0009883a 	mov	r4,zero
     c88:	00003300 	call	330 <IO_read>
     c8c:	10bfffcc 	andi	r2,r2,65535
     c90:	01000074 	movhi	r4,1
     c94:	2107b204 	addi	r4,r4,7880
     c98:	100b883a 	mov	r5,r2
     c9c:	00031540 	call	3154 <printf>

	IO_write(HPI_ADDR,0x0508);
     ca0:	01000084 	movi	r4,2
     ca4:	01414204 	movi	r5,1288
     ca8:	00002c80 	call	2c8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     cac:	0009883a 	mov	r4,zero
     cb0:	00003300 	call	330 <IO_read>
     cb4:	d0a6cf0d 	sth	r2,-25796(gp)
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
     cb8:	d0a6cf0b 	ldhu	r2,-25796(gp)
     cbc:	10bfffcc 	andi	r2,r2,65535
     cc0:	01000074 	movhi	r4,1
     cc4:	2107bd04 	addi	r4,r4,7924
     cc8:	100b883a 	mov	r5,r2
     ccc:	00031540 	call	3154 <printf>
	while (usb_ctl_val != 0x03)
     cd0:	00000206 	br	cdc <setup_keyboard+0x63c>
	{
		usb_ctl_val = UsbGetRetryCnt();
     cd4:	000285c0 	call	285c <UsbGetRetryCnt>
     cd8:	d0a6cf0d 	sth	r2,-25796(gp)
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
     cdc:	d0a6cf0b 	ldhu	r2,-25796(gp)
     ce0:	10bfffcc 	andi	r2,r2,65535
     ce4:	108000d8 	cmpnei	r2,r2,3
     ce8:	103ffa1e 	bne	r2,zero,cd4 <__alt_data_end+0xfffab5a4>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("-----------[ENUM PROCESS]:get configuration descriptor-2 done!------------\n");
     cec:	01000074 	movhi	r4,1
     cf0:	2107c904 	addi	r4,r4,7972
     cf4:	00032480 	call	3248 <puts>


	// ---------------------------------get device info---------------------------------------------//

	// TASK: Write the address to read from the memory for byte 7 of the interface descriptor to HPI_ADDR.
	IO_write(HPI_ADDR,0x056c);
     cf8:	01000084 	movi	r4,2
     cfc:	01415b04 	movi	r5,1388
     d00:	00002c80 	call	2c8 <IO_write>
	code = IO_read(HPI_DATA);
     d04:	0009883a 	mov	r4,zero
     d08:	00003300 	call	330 <IO_read>
     d0c:	d0a6d10d 	sth	r2,-25788(gp)
	code = code & 0x003;
     d10:	d0a6d10b 	ldhu	r2,-25788(gp)
     d14:	108000cc 	andi	r2,r2,3
     d18:	d0a6d10d 	sth	r2,-25788(gp)
	printf("\ncode = %x\n", code);
     d1c:	d0a6d10b 	ldhu	r2,-25788(gp)
     d20:	10bfffcc 	andi	r2,r2,65535
     d24:	01000074 	movhi	r4,1
     d28:	2107dc04 	addi	r4,r4,8048
     d2c:	100b883a 	mov	r5,r2
     d30:	00031540 	call	3154 <printf>

	if (code == 0x01)
     d34:	d0a6d10b 	ldhu	r2,-25788(gp)
     d38:	10bfffcc 	andi	r2,r2,65535
     d3c:	10800058 	cmpnei	r2,r2,1
     d40:	1000041e 	bne	r2,zero,d54 <setup_keyboard+0x6b4>
	{
		printf("\n[INFO]:check TD rec data7 \n[INFO]:Keyboard Detected!!!\n\n");
     d44:	01000074 	movhi	r4,1
     d48:	2107df04 	addi	r4,r4,8060
     d4c:	00032480 	call	3248 <puts>
     d50:	00000306 	br	d60 <setup_keyboard+0x6c0>
	}
	else
	{
		printf("\n[INFO]:Keyboard Not Detected!!! \n\n");
     d54:	01000074 	movhi	r4,1
     d58:	2107ee04 	addi	r4,r4,8120
     d5c:	00032480 	call	3248 <puts>
	}

	// TASK: Write the address to read from the memory for the endpoint descriptor to HPI_ADDR.

	IO_write(HPI_ADDR,0x0576);
     d60:	01000084 	movi	r4,2
     d64:	01415d84 	movi	r5,1398
     d68:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x073F);
     d6c:	0009883a 	mov	r4,zero
     d70:	0141cfc4 	movi	r5,1855
     d74:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x8105);
     d78:	0009883a 	mov	r4,zero
     d7c:	01604154 	movui	r5,33029
     d80:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0003);
     d84:	0009883a 	mov	r4,zero
     d88:	014000c4 	movi	r5,3
     d8c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);
     d90:	0009883a 	mov	r4,zero
     d94:	01400204 	movi	r5,8
     d98:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0xAC0A);
     d9c:	0009883a 	mov	r4,zero
     da0:	016b0294 	movui	r5,44042
     da4:	00002c80 	call	2c8 <IO_write>
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0576); //HUSB_SIE1_pCurrentTDPtr
     da8:	01006c04 	movi	r4,432
     dac:	01415d84 	movi	r5,1398
     db0:	00018140 	call	1814 <UsbWrite>

	//data_size = (IO_read(HPI_DATA)>>8)&0x0ff;
	//data_size = 0x08;//(IO_read(HPI_DATA))&0x0ff;
	//UsbPrintMem();
	IO_write(HPI_ADDR,0x057c);
     db4:	01000084 	movi	r4,2
     db8:	01415f04 	movi	r5,1404
     dbc:	00002c80 	call	2c8 <IO_write>
	data_size = (IO_read(HPI_DATA))&0x0ff;
     dc0:	0009883a 	mov	r4,zero
     dc4:	00003300 	call	330 <IO_read>
     dc8:	d0a6cf85 	stb	r2,-25794(gp)
	printf("[ENUM PROCESS]:data packet size is %d\n",data_size);
     dcc:	d0a6cf83 	ldbu	r2,-25794(gp)
     dd0:	10803fcc 	andi	r2,r2,255
     dd4:	01000074 	movhi	r4,1
     dd8:	2107f704 	addi	r4,r4,8156
     ddc:	100b883a 	mov	r5,r2
     de0:	00031540 	call	3154 <printf>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration
     de4:	00021600 	call	2160 <UsbSetConfig>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     de8:	00000306 	br	df8 <setup_keyboard+0x758>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
     dec:	00021600 	call	2160 <UsbSetConfig>
		usleep(10*1000);
     df0:	0109c404 	movi	r4,10000
     df4:	000fb880 	call	fb88 <usleep>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     df8:	010000c4 	movi	r4,3
     dfc:	00003300 	call	330 <IO_read>
     e00:	10bfffcc 	andi	r2,r2,65535
     e04:	1080040c 	andi	r2,r2,16
     e08:	103ff826 	beq	r2,zero,dec <__alt_data_end+0xfffab6bc>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     e0c:	00027d80 	call	27d8 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     e10:	01000084 	movi	r4,2
     e14:	01414184 	movi	r5,1286
     e18:	00002c80 	call	2c8 <IO_write>
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));
     e1c:	0009883a 	mov	r4,zero
     e20:	00003300 	call	330 <IO_read>
     e24:	10bfffcc 	andi	r2,r2,65535
     e28:	01000074 	movhi	r4,1
     e2c:	21080104 	addi	r4,r4,8196
     e30:	100b883a 	mov	r5,r2
     e34:	00031540 	call	3154 <printf>

	IO_write(HPI_ADDR,0x0508);
     e38:	01000084 	movi	r4,2
     e3c:	01414204 	movi	r5,1288
     e40:	00002c80 	call	2c8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     e44:	0009883a 	mov	r4,zero
     e48:	00003300 	call	330 <IO_read>
     e4c:	d0a6cf0d 	sth	r2,-25796(gp)
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
     e50:	d0a6cf0b 	ldhu	r2,-25796(gp)
     e54:	10bfffcc 	andi	r2,r2,65535
     e58:	01000074 	movhi	r4,1
     e5c:	21080c04 	addi	r4,r4,8240
     e60:	100b883a 	mov	r5,r2
     e64:	00031540 	call	3154 <printf>
	while (usb_ctl_val != 0x03)
     e68:	00000206 	br	e74 <setup_keyboard+0x7d4>
	{
		usb_ctl_val = UsbGetRetryCnt();
     e6c:	000285c0 	call	285c <UsbGetRetryCnt>
     e70:	d0a6cf0d 	sth	r2,-25796(gp)
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
     e74:	d0a6cf0b 	ldhu	r2,-25796(gp)
     e78:	10bfffcc 	andi	r2,r2,65535
     e7c:	108000d8 	cmpnei	r2,r2,3
     e80:	103ffa1e 	bne	r2,zero,e6c <__alt_data_end+0xfffab73c>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:set configuration done!-------------------\n");
     e84:	01000074 	movhi	r4,1
     e88:	21081804 	addi	r4,r4,8288
     e8c:	00032480 	call	3248 <puts>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();
     e90:	000225c0 	call	225c <UsbClassRequest>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     e94:	00000306 	br	ea4 <setup_keyboard+0x804>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
     e98:	000225c0 	call	225c <UsbClassRequest>
		usleep(10*1000);
     e9c:	0109c404 	movi	r4,10000
     ea0:	000fb880 	call	fb88 <usleep>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     ea4:	010000c4 	movi	r4,3
     ea8:	00003300 	call	330 <IO_read>
     eac:	10bfffcc 	andi	r2,r2,65535
     eb0:	1080040c 	andi	r2,r2,16
     eb4:	103ff826 	beq	r2,zero,e98 <__alt_data_end+0xfffab768>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     eb8:	00027d80 	call	27d8 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     ebc:	01000084 	movi	r4,2
     ec0:	01414184 	movi	r5,1286
     ec4:	00002c80 	call	2c8 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
     ec8:	0009883a 	mov	r4,zero
     ecc:	00003300 	call	330 <IO_read>
     ed0:	10bfffcc 	andi	r2,r2,65535
     ed4:	01000074 	movhi	r4,1
     ed8:	21082a04 	addi	r4,r4,8360
     edc:	100b883a 	mov	r5,r2
     ee0:	00031540 	call	3154 <printf>

	IO_write(HPI_ADDR,0x0508);
     ee4:	01000084 	movi	r4,2
     ee8:	01414204 	movi	r5,1288
     eec:	00002c80 	call	2c8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     ef0:	0009883a 	mov	r4,zero
     ef4:	00003300 	call	330 <IO_read>
     ef8:	d0a6cf0d 	sth	r2,-25796(gp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
     efc:	d0a6cf0b 	ldhu	r2,-25796(gp)
     f00:	10bfffcc 	andi	r2,r2,65535
     f04:	01000074 	movhi	r4,1
     f08:	21083504 	addi	r4,r4,8404
     f0c:	100b883a 	mov	r5,r2
     f10:	00031540 	call	3154 <printf>
	while (usb_ctl_val != 0x03)
     f14:	00000206 	br	f20 <setup_keyboard+0x880>
	{
		usb_ctl_val = UsbGetRetryCnt();
     f18:	000285c0 	call	285c <UsbGetRetryCnt>
     f1c:	d0a6cf0d 	sth	r2,-25796(gp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
     f20:	d0a6cf0b 	ldhu	r2,-25796(gp)
     f24:	10bfffcc 	andi	r2,r2,65535
     f28:	108000d8 	cmpnei	r2,r2,3
     f2c:	103ffa1e 	bne	r2,zero,f18 <__alt_data_end+0xfffab7e8>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("------------[ENUM PROCESS]:class request out done!-------------------\n");
     f30:	01000074 	movhi	r4,1
     f34:	21084104 	addi	r4,r4,8452
     f38:	00032480 	call	3248 <puts>

	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();
     f3c:	00023580 	call	2358 <UsbGetHidDesc>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     f40:	00000306 	br	f50 <setup_keyboard+0x8b0>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
     f44:	00023580 	call	2358 <UsbGetHidDesc>
		usleep(10*1000);
     f48:	0109c404 	movi	r4,10000
     f4c:	000fb880 	call	fb88 <usleep>
	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     f50:	010000c4 	movi	r4,3
     f54:	00003300 	call	330 <IO_read>
     f58:	10bfffcc 	andi	r2,r2,65535
     f5c:	1080040c 	andi	r2,r2,16
     f60:	103ff826 	beq	r2,zero,f44 <__alt_data_end+0xfffab814>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     f64:	00027d80 	call	27d8 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     f68:	01000084 	movi	r4,2
     f6c:	01414184 	movi	r5,1286
     f70:	00002c80 	call	2c8 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
     f74:	0009883a 	mov	r4,zero
     f78:	00003300 	call	330 <IO_read>
     f7c:	10bfffcc 	andi	r2,r2,65535
     f80:	01000074 	movhi	r4,1
     f84:	21082a04 	addi	r4,r4,8360
     f88:	100b883a 	mov	r5,r2
     f8c:	00031540 	call	3154 <printf>

	IO_write(HPI_ADDR,0x0508);
     f90:	01000084 	movi	r4,2
     f94:	01414204 	movi	r5,1288
     f98:	00002c80 	call	2c8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     f9c:	0009883a 	mov	r4,zero
     fa0:	00003300 	call	330 <IO_read>
     fa4:	d0a6cf0d 	sth	r2,-25796(gp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
     fa8:	d0a6cf0b 	ldhu	r2,-25796(gp)
     fac:	10bfffcc 	andi	r2,r2,65535
     fb0:	01000074 	movhi	r4,1
     fb4:	21083504 	addi	r4,r4,8404
     fb8:	100b883a 	mov	r5,r2
     fbc:	00031540 	call	3154 <printf>
	while (usb_ctl_val != 0x03)
     fc0:	00000206 	br	fcc <setup_keyboard+0x92c>
	{
		usb_ctl_val = UsbGetRetryCnt();
     fc4:	000285c0 	call	285c <UsbGetRetryCnt>
     fc8:	d0a6cf0d 	sth	r2,-25796(gp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
     fcc:	d0a6cf0b 	ldhu	r2,-25796(gp)
     fd0:	10bfffcc 	andi	r2,r2,65535
     fd4:	108000d8 	cmpnei	r2,r2,3
     fd8:	103ffa1e 	bne	r2,zero,fc4 <__alt_data_end+0xfffab894>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get descriptor (class 0x21) done!-------------------\n");
     fdc:	01000074 	movhi	r4,1
     fe0:	21085304 	addi	r4,r4,8524
     fe4:	00032480 	call	3248 <puts>

	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
     fe8:	000249c0 	call	249c <UsbGetReportDesc>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     fec:	00000306 	br	ffc <setup_keyboard+0x95c>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
     ff0:	000249c0 	call	249c <UsbGetReportDesc>
		usleep(10*1000);
     ff4:	0109c404 	movi	r4,10000
     ff8:	000fb880 	call	fb88 <usleep>
	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     ffc:	010000c4 	movi	r4,3
    1000:	00003300 	call	330 <IO_read>
    1004:	10bfffcc 	andi	r2,r2,65535
    1008:	1080040c 	andi	r2,r2,16
    100c:	103ff826 	beq	r2,zero,ff0 <__alt_data_end+0xfffab8c0>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
    1010:	00027d80 	call	27d8 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
    1014:	01000084 	movi	r4,2
    1018:	01414184 	movi	r5,1286
    101c:	00002c80 	call	2c8 <IO_write>
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));
    1020:	0009883a 	mov	r4,zero
    1024:	00003300 	call	330 <IO_read>
    1028:	10bfffcc 	andi	r2,r2,65535
    102c:	01000074 	movhi	r4,1
    1030:	21086704 	addi	r4,r4,8604
    1034:	100b883a 	mov	r5,r2
    1038:	00031540 	call	3154 <printf>

	IO_write(HPI_ADDR,0x0508);
    103c:	01000084 	movi	r4,2
    1040:	01414204 	movi	r5,1288
    1044:	00002c80 	call	2c8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
    1048:	0009883a 	mov	r4,zero
    104c:	00003300 	call	330 <IO_read>
    1050:	d0a6cf0d 	sth	r2,-25796(gp)
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
    1054:	d0a6cf0b 	ldhu	r2,-25796(gp)
    1058:	10bfffcc 	andi	r2,r2,65535
    105c:	01000074 	movhi	r4,1
    1060:	21087304 	addi	r4,r4,8652
    1064:	100b883a 	mov	r5,r2
    1068:	00031540 	call	3154 <printf>
	while (usb_ctl_val != 0x03)
    106c:	00000206 	br	1078 <setup_keyboard+0x9d8>
	{
		usb_ctl_val = UsbGetRetryCnt();
    1070:	000285c0 	call	285c <UsbGetRetryCnt>
    1074:	d0a6cf0d 	sth	r2,-25796(gp)
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
    1078:	d0a6cf0b 	ldhu	r2,-25796(gp)
    107c:	10bfffcc 	andi	r2,r2,65535
    1080:	108000d8 	cmpnei	r2,r2,3
    1084:	103ffa1e 	bne	r2,zero,1070 <__alt_data_end+0xfffab940>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get descriptor (class 0x22) done!----------------\n");
    1088:	01000074 	movhi	r4,1
    108c:	21087f04 	addi	r4,r4,8700
    1090:	00032480 	call	3248 <puts>


	//-----------------------------------get keycode value------------------------------------------------//


	return;
    1094:	0001883a 	nop
}
    1098:	e037883a 	mov	sp,fp
    109c:	dfc00117 	ldw	ra,4(sp)
    10a0:	df000017 	ldw	fp,0(sp)
    10a4:	dec00204 	addi	sp,sp,8
    10a8:	f800283a 	ret

000010ac <renderer>:

void move_player(player *current, int x_pos, int y_pos);
void fire_projectile(player *current);

void renderer(int x, int y, int sprite_num, int is_shadow)
{
    10ac:	defffb04 	addi	sp,sp,-20
    10b0:	df000415 	stw	fp,16(sp)
    10b4:	df000404 	addi	fp,sp,16
    10b8:	e13ffc15 	stw	r4,-16(fp)
    10bc:	e17ffd15 	stw	r5,-12(fp)
    10c0:	e1bffe15 	stw	r6,-8(fp)
    10c4:	e1ffff15 	stw	r7,-4(fp)
	if(is_shadow==1)
    10c8:	e0bfff17 	ldw	r2,-4(fp)
    10cc:	10800058 	cmpnei	r2,r2,1
    10d0:	1000051e 	bne	r2,zero,10e8 <renderer+0x3c>
		*sw_to_hw = 4;
    10d4:	00800234 	movhi	r2,8
    10d8:	10842004 	addi	r2,r2,4224
    10dc:	00c00104 	movi	r3,4
    10e0:	10c00015 	stw	r3,0(r2)
    10e4:	00000606 	br	1100 <renderer+0x54>
	else
		*sw_to_hw &= 0;
    10e8:	00800234 	movhi	r2,8
    10ec:	10842004 	addi	r2,r2,4224
    10f0:	10800017 	ldw	r2,0(r2)
    10f4:	00800234 	movhi	r2,8
    10f8:	10842004 	addi	r2,r2,4224
    10fc:	10000015 	stw	zero,0(r2)
	*sprite_number = sprite_num;
    1100:	00800234 	movhi	r2,8
    1104:	10842804 	addi	r2,r2,4256
    1108:	e0fffe17 	ldw	r3,-8(fp)
    110c:	10c00015 	stw	r3,0(r2)
	*sprite_xy = 1024*x + y;
    1110:	00800234 	movhi	r2,8
    1114:	10842404 	addi	r2,r2,4240
    1118:	e0fffc17 	ldw	r3,-16(fp)
    111c:	180892ba 	slli	r4,r3,10
    1120:	e0fffd17 	ldw	r3,-12(fp)
    1124:	20c7883a 	add	r3,r4,r3
    1128:	10c00015 	stw	r3,0(r2)
	*sw_to_hw |= 2;
    112c:	00800234 	movhi	r2,8
    1130:	10842004 	addi	r2,r2,4224
    1134:	00c00234 	movhi	r3,8
    1138:	18c42004 	addi	r3,r3,4224
    113c:	18c00017 	ldw	r3,0(r3)
    1140:	18c00094 	ori	r3,r3,2
    1144:	10c00015 	stw	r3,0(r2)
	while(*hw_to_sw%2 != 0)
    1148:	0001883a 	nop
    114c:	00800234 	movhi	r2,8
    1150:	10841c04 	addi	r2,r2,4208
    1154:	10800017 	ldw	r2,0(r2)
    1158:	1080004c 	andi	r2,r2,1
    115c:	103ffb1e 	bne	r2,zero,114c <__alt_data_end+0xfffaba1c>
	{}
	*sw_to_hw &= ~2;
    1160:	00800234 	movhi	r2,8
    1164:	10842004 	addi	r2,r2,4224
    1168:	00c00234 	movhi	r3,8
    116c:	18c42004 	addi	r3,r3,4224
    1170:	19000017 	ldw	r4,0(r3)
    1174:	00ffff44 	movi	r3,-3
    1178:	20c6703a 	and	r3,r4,r3
    117c:	10c00015 	stw	r3,0(r2)
	while(*hw_to_sw != 1)
    1180:	0001883a 	nop
    1184:	00800234 	movhi	r2,8
    1188:	10841c04 	addi	r2,r2,4208
    118c:	10800017 	ldw	r2,0(r2)
    1190:	10800058 	cmpnei	r2,r2,1
    1194:	103ffb1e 	bne	r2,zero,1184 <__alt_data_end+0xfffaba54>
	{}
	*sw_to_hw |= 1;
    1198:	00800234 	movhi	r2,8
    119c:	10842004 	addi	r2,r2,4224
    11a0:	00c00234 	movhi	r3,8
    11a4:	18c42004 	addi	r3,r3,4224
    11a8:	18c00017 	ldw	r3,0(r3)
    11ac:	18c00054 	ori	r3,r3,1
    11b0:	10c00015 	stw	r3,0(r2)
	return;
    11b4:	0001883a 	nop
}
    11b8:	e037883a 	mov	sp,fp
    11bc:	df000017 	ldw	fp,0(sp)
    11c0:	dec00104 	addi	sp,sp,4
    11c4:	f800283a 	ret

000011c8 <render_shadows>:

void render_shadows(player *first,player *second){
    11c8:	defffc04 	addi	sp,sp,-16
    11cc:	dfc00315 	stw	ra,12(sp)
    11d0:	df000215 	stw	fp,8(sp)
    11d4:	df000204 	addi	fp,sp,8
    11d8:	e13ffe15 	stw	r4,-8(fp)
    11dc:	e17fff15 	stw	r5,-4(fp)
	if(first==NULL || second ==NULL){
    11e0:	e0bffe17 	ldw	r2,-8(fp)
    11e4:	10000226 	beq	r2,zero,11f0 <render_shadows+0x28>
    11e8:	e0bfff17 	ldw	r2,-4(fp)
    11ec:	1000041e 	bne	r2,zero,1200 <render_shadows+0x38>
			printf("players not instantiated");
    11f0:	01000074 	movhi	r4,1
    11f4:	21089304 	addi	r4,r4,8780
    11f8:	00031540 	call	3154 <printf>
    11fc:	00001406 	br	1250 <render_shadows+0x88>
	}
	else{
		renderer(first->old_x,first->old_y,first->id,1);
    1200:	e0bffe17 	ldw	r2,-8(fp)
    1204:	11000417 	ldw	r4,16(r2)
    1208:	e0bffe17 	ldw	r2,-8(fp)
    120c:	10c00517 	ldw	r3,20(r2)
    1210:	e0bffe17 	ldw	r2,-8(fp)
    1214:	10800317 	ldw	r2,12(r2)
    1218:	180b883a 	mov	r5,r3
    121c:	100d883a 	mov	r6,r2
    1220:	01c00044 	movi	r7,1
    1224:	00010ac0 	call	10ac <renderer>
		renderer(second->old_x,second->old_y,second->id,1);
    1228:	e0bfff17 	ldw	r2,-4(fp)
    122c:	11000417 	ldw	r4,16(r2)
    1230:	e0bfff17 	ldw	r2,-4(fp)
    1234:	10c00517 	ldw	r3,20(r2)
    1238:	e0bfff17 	ldw	r2,-4(fp)
    123c:	10800317 	ldw	r2,12(r2)
    1240:	180b883a 	mov	r5,r3
    1244:	100d883a 	mov	r6,r2
    1248:	01c00044 	movi	r7,1
    124c:	00010ac0 	call	10ac <renderer>
	}
	return;
    1250:	0001883a 	nop
}
    1254:	e037883a 	mov	sp,fp
    1258:	dfc00117 	ldw	ra,4(sp)
    125c:	df000017 	ldw	fp,0(sp)
    1260:	dec00204 	addi	sp,sp,8
    1264:	f800283a 	ret

00001268 <render_players>:

void render_players(player *first,player *second){
    1268:	defffc04 	addi	sp,sp,-16
    126c:	dfc00315 	stw	ra,12(sp)
    1270:	df000215 	stw	fp,8(sp)
    1274:	df000204 	addi	fp,sp,8
    1278:	e13ffe15 	stw	r4,-8(fp)
    127c:	e17fff15 	stw	r5,-4(fp)
	if(first==NULL || second ==NULL){
    1280:	e0bffe17 	ldw	r2,-8(fp)
    1284:	10000226 	beq	r2,zero,1290 <render_players+0x28>
    1288:	e0bfff17 	ldw	r2,-4(fp)
    128c:	1000041e 	bne	r2,zero,12a0 <render_players+0x38>
		printf("players not instantiated");
    1290:	01000074 	movhi	r4,1
    1294:	21089304 	addi	r4,r4,8780
    1298:	00031540 	call	3154 <printf>
    129c:	00001706 	br	12fc <render_players+0x94>
	}
	else{
		render_shadows(first,second);
    12a0:	e13ffe17 	ldw	r4,-8(fp)
    12a4:	e17fff17 	ldw	r5,-4(fp)
    12a8:	00011c80 	call	11c8 <render_shadows>
		renderer(first->x_pos,first->y_pos,first->id,0);
    12ac:	e0bffe17 	ldw	r2,-8(fp)
    12b0:	11000017 	ldw	r4,0(r2)
    12b4:	e0bffe17 	ldw	r2,-8(fp)
    12b8:	10c00117 	ldw	r3,4(r2)
    12bc:	e0bffe17 	ldw	r2,-8(fp)
    12c0:	10800317 	ldw	r2,12(r2)
    12c4:	180b883a 	mov	r5,r3
    12c8:	100d883a 	mov	r6,r2
    12cc:	000f883a 	mov	r7,zero
    12d0:	00010ac0 	call	10ac <renderer>
		renderer(second->x_pos,second->y_pos,second->id,0);
    12d4:	e0bfff17 	ldw	r2,-4(fp)
    12d8:	11000017 	ldw	r4,0(r2)
    12dc:	e0bfff17 	ldw	r2,-4(fp)
    12e0:	10c00117 	ldw	r3,4(r2)
    12e4:	e0bfff17 	ldw	r2,-4(fp)
    12e8:	10800317 	ldw	r2,12(r2)
    12ec:	180b883a 	mov	r5,r3
    12f0:	100d883a 	mov	r6,r2
    12f4:	000f883a 	mov	r7,zero
    12f8:	00010ac0 	call	10ac <renderer>
	}
}
    12fc:	e037883a 	mov	sp,fp
    1300:	dfc00117 	ldw	ra,4(sp)
    1304:	df000017 	ldw	fp,0(sp)
    1308:	dec00204 	addi	sp,sp,8
    130c:	f800283a 	ret

00001310 <keycode_effect>:
void keycode_effect(player *first,player *second,unsigned int *arr){
    1310:	defffa04 	addi	sp,sp,-24
    1314:	dfc00515 	stw	ra,20(sp)
    1318:	df000415 	stw	fp,16(sp)
    131c:	df000404 	addi	fp,sp,16
    1320:	e13ffd15 	stw	r4,-12(fp)
    1324:	e17ffe15 	stw	r5,-8(fp)
    1328:	e1bfff15 	stw	r6,-4(fp)
	int i=0;
    132c:	e03ffc15 	stw	zero,-16(fp)
	for(i=0;i<4;i++){
    1330:	e03ffc15 	stw	zero,-16(fp)
    1334:	00006d06 	br	14ec <keycode_effect+0x1dc>
		printf("keycode %d : %x\n", i, arr[i]);
    1338:	e0bffc17 	ldw	r2,-16(fp)
    133c:	1085883a 	add	r2,r2,r2
    1340:	1085883a 	add	r2,r2,r2
    1344:	1007883a 	mov	r3,r2
    1348:	e0bfff17 	ldw	r2,-4(fp)
    134c:	10c5883a 	add	r2,r2,r3
    1350:	10800017 	ldw	r2,0(r2)
    1354:	01000074 	movhi	r4,1
    1358:	21089a04 	addi	r4,r4,8808
    135c:	e17ffc17 	ldw	r5,-16(fp)
    1360:	100d883a 	mov	r6,r2
    1364:	00031540 	call	3154 <printf>
		if(arr[i]==0x04){
    1368:	e0bffc17 	ldw	r2,-16(fp)
    136c:	1085883a 	add	r2,r2,r2
    1370:	1085883a 	add	r2,r2,r2
    1374:	1007883a 	mov	r3,r2
    1378:	e0bfff17 	ldw	r2,-4(fp)
    137c:	10c5883a 	add	r2,r2,r3
    1380:	10800017 	ldw	r2,0(r2)
    1384:	10800118 	cmpnei	r2,r2,4
    1388:	1000091e 	bne	r2,zero,13b0 <keycode_effect+0xa0>
			move_player(first,first->x_pos-5,first->y_pos);
    138c:	e0bffd17 	ldw	r2,-12(fp)
    1390:	10800017 	ldw	r2,0(r2)
    1394:	10fffec4 	addi	r3,r2,-5
    1398:	e0bffd17 	ldw	r2,-12(fp)
    139c:	10800117 	ldw	r2,4(r2)
    13a0:	e13ffd17 	ldw	r4,-12(fp)
    13a4:	180b883a 	mov	r5,r3
    13a8:	100d883a 	mov	r6,r2
    13ac:	00016c80 	call	16c8 <move_player>
		}
		if(arr[i]==0x07){
    13b0:	e0bffc17 	ldw	r2,-16(fp)
    13b4:	1085883a 	add	r2,r2,r2
    13b8:	1085883a 	add	r2,r2,r2
    13bc:	1007883a 	mov	r3,r2
    13c0:	e0bfff17 	ldw	r2,-4(fp)
    13c4:	10c5883a 	add	r2,r2,r3
    13c8:	10800017 	ldw	r2,0(r2)
    13cc:	108001d8 	cmpnei	r2,r2,7
    13d0:	1000091e 	bne	r2,zero,13f8 <keycode_effect+0xe8>
			move_player(first,first->x_pos+5,first->y_pos);
    13d4:	e0bffd17 	ldw	r2,-12(fp)
    13d8:	10800017 	ldw	r2,0(r2)
    13dc:	10c00144 	addi	r3,r2,5
    13e0:	e0bffd17 	ldw	r2,-12(fp)
    13e4:	10800117 	ldw	r2,4(r2)
    13e8:	e13ffd17 	ldw	r4,-12(fp)
    13ec:	180b883a 	mov	r5,r3
    13f0:	100d883a 	mov	r6,r2
    13f4:	00016c80 	call	16c8 <move_player>
		}
		if(arr[i]==0x1a){
    13f8:	e0bffc17 	ldw	r2,-16(fp)
    13fc:	1085883a 	add	r2,r2,r2
    1400:	1085883a 	add	r2,r2,r2
    1404:	1007883a 	mov	r3,r2
    1408:	e0bfff17 	ldw	r2,-4(fp)
    140c:	10c5883a 	add	r2,r2,r3
    1410:	10800017 	ldw	r2,0(r2)
    1414:	10800698 	cmpnei	r2,r2,26
    1418:	1000021e 	bne	r2,zero,1424 <keycode_effect+0x114>
			fire_projectile(first);
    141c:	e13ffd17 	ldw	r4,-12(fp)
    1420:	00015800 	call	1580 <fire_projectile>
		}
		if(arr[i]==0x50){
    1424:	e0bffc17 	ldw	r2,-16(fp)
    1428:	1085883a 	add	r2,r2,r2
    142c:	1085883a 	add	r2,r2,r2
    1430:	1007883a 	mov	r3,r2
    1434:	e0bfff17 	ldw	r2,-4(fp)
    1438:	10c5883a 	add	r2,r2,r3
    143c:	10800017 	ldw	r2,0(r2)
    1440:	10801418 	cmpnei	r2,r2,80
    1444:	1000091e 	bne	r2,zero,146c <keycode_effect+0x15c>
			move_player(second,second->x_pos-5,second->y_pos);
    1448:	e0bffe17 	ldw	r2,-8(fp)
    144c:	10800017 	ldw	r2,0(r2)
    1450:	10fffec4 	addi	r3,r2,-5
    1454:	e0bffe17 	ldw	r2,-8(fp)
    1458:	10800117 	ldw	r2,4(r2)
    145c:	e13ffe17 	ldw	r4,-8(fp)
    1460:	180b883a 	mov	r5,r3
    1464:	100d883a 	mov	r6,r2
    1468:	00016c80 	call	16c8 <move_player>
		}
		if(arr[i]==0x4f){
    146c:	e0bffc17 	ldw	r2,-16(fp)
    1470:	1085883a 	add	r2,r2,r2
    1474:	1085883a 	add	r2,r2,r2
    1478:	1007883a 	mov	r3,r2
    147c:	e0bfff17 	ldw	r2,-4(fp)
    1480:	10c5883a 	add	r2,r2,r3
    1484:	10800017 	ldw	r2,0(r2)
    1488:	108013d8 	cmpnei	r2,r2,79
    148c:	1000091e 	bne	r2,zero,14b4 <keycode_effect+0x1a4>
			move_player(second,second->x_pos+5,second->y_pos);
    1490:	e0bffe17 	ldw	r2,-8(fp)
    1494:	10800017 	ldw	r2,0(r2)
    1498:	10c00144 	addi	r3,r2,5
    149c:	e0bffe17 	ldw	r2,-8(fp)
    14a0:	10800117 	ldw	r2,4(r2)
    14a4:	e13ffe17 	ldw	r4,-8(fp)
    14a8:	180b883a 	mov	r5,r3
    14ac:	100d883a 	mov	r6,r2
    14b0:	00016c80 	call	16c8 <move_player>
		}
		if(arr[i]==0x52){
    14b4:	e0bffc17 	ldw	r2,-16(fp)
    14b8:	1085883a 	add	r2,r2,r2
    14bc:	1085883a 	add	r2,r2,r2
    14c0:	1007883a 	mov	r3,r2
    14c4:	e0bfff17 	ldw	r2,-4(fp)
    14c8:	10c5883a 	add	r2,r2,r3
    14cc:	10800017 	ldw	r2,0(r2)
    14d0:	10801498 	cmpnei	r2,r2,82
    14d4:	1000021e 	bne	r2,zero,14e0 <keycode_effect+0x1d0>
			fire_projectile(second);
    14d8:	e13ffe17 	ldw	r4,-8(fp)
    14dc:	00015800 	call	1580 <fire_projectile>
		renderer(second->x_pos,second->y_pos,second->id,0);
	}
}
void keycode_effect(player *first,player *second,unsigned int *arr){
	int i=0;
	for(i=0;i<4;i++){
    14e0:	e0bffc17 	ldw	r2,-16(fp)
    14e4:	10800044 	addi	r2,r2,1
    14e8:	e0bffc15 	stw	r2,-16(fp)
    14ec:	e0bffc17 	ldw	r2,-16(fp)
    14f0:	10800110 	cmplti	r2,r2,4
    14f4:	103f901e 	bne	r2,zero,1338 <__alt_data_end+0xfffabc08>
		if(arr[i]==0x52){
			fire_projectile(second);
		}
	}

}
    14f8:	e037883a 	mov	sp,fp
    14fc:	dfc00117 	ldw	ra,4(sp)
    1500:	df000017 	ldw	fp,0(sp)
    1504:	dec00204 	addi	sp,sp,8
    1508:	f800283a 	ret

0000150c <parse_keycode>:
void parse_keycode(unsigned int *arr,unsigned int keycode1,unsigned int keycode2){
    150c:	defffc04 	addi	sp,sp,-16
    1510:	df000315 	stw	fp,12(sp)
    1514:	df000304 	addi	fp,sp,12
    1518:	e13ffd15 	stw	r4,-12(fp)
    151c:	e17ffe15 	stw	r5,-8(fp)
    1520:	e1bfff15 	stw	r6,-4(fp)
	arr[0]=keycode1%256;
    1524:	e0bffe17 	ldw	r2,-8(fp)
    1528:	10c03fcc 	andi	r3,r2,255
    152c:	e0bffd17 	ldw	r2,-12(fp)
    1530:	10c00015 	stw	r3,0(r2)
	arr[1]=keycode1/256;
    1534:	e0bffd17 	ldw	r2,-12(fp)
    1538:	10800104 	addi	r2,r2,4
    153c:	e0fffe17 	ldw	r3,-8(fp)
    1540:	1806d23a 	srli	r3,r3,8
    1544:	10c00015 	stw	r3,0(r2)
	arr[2]=keycode2%256;
    1548:	e0bffd17 	ldw	r2,-12(fp)
    154c:	10800204 	addi	r2,r2,8
    1550:	e0ffff17 	ldw	r3,-4(fp)
    1554:	18c03fcc 	andi	r3,r3,255
    1558:	10c00015 	stw	r3,0(r2)
	arr[3]=keycode2/256;
    155c:	e0bffd17 	ldw	r2,-12(fp)
    1560:	10800304 	addi	r2,r2,12
    1564:	e0ffff17 	ldw	r3,-4(fp)
    1568:	1806d23a 	srli	r3,r3,8
    156c:	10c00015 	stw	r3,0(r2)
}
    1570:	e037883a 	mov	sp,fp
    1574:	df000017 	ldw	fp,0(sp)
    1578:	dec00104 	addi	sp,sp,4
    157c:	f800283a 	ret

00001580 <fire_projectile>:


void fire_projectile(player *current)
{
    1580:	defffc04 	addi	sp,sp,-16
    1584:	dfc00315 	stw	ra,12(sp)
    1588:	df000215 	stw	fp,8(sp)
    158c:	df000204 	addi	fp,sp,8
    1590:	e13fff15 	stw	r4,-4(fp)
	player_projectile *new=(player_projectile*)malloc(sizeof(player_projectile));
    1594:	01000504 	movi	r4,20
    1598:	00029580 	call	2958 <malloc>
    159c:	e0bffe15 	stw	r2,-8(fp)
	new->x_pos=current->x_pos;//TODO: Refine start point
    15a0:	e0bfff17 	ldw	r2,-4(fp)
    15a4:	10c00017 	ldw	r3,0(r2)
    15a8:	e0bffe17 	ldw	r2,-8(fp)
    15ac:	10c00015 	stw	r3,0(r2)
	new->y_pos=current->y_pos -20;
    15b0:	e0bfff17 	ldw	r2,-4(fp)
    15b4:	10800117 	ldw	r2,4(r2)
    15b8:	10fffb04 	addi	r3,r2,-20
    15bc:	e0bffe17 	ldw	r2,-8(fp)
    15c0:	10c00115 	stw	r3,4(r2)
	if(projectiles==NULL){
    15c4:	d0a6d217 	ldw	r2,-25784(gp)
    15c8:	1000031e 	bne	r2,zero,15d8 <fire_projectile+0x58>
		projectiles=new;
    15cc:	e0bffe17 	ldw	r2,-8(fp)
    15d0:	d0a6d215 	stw	r2,-25784(gp)
    15d4:	00000506 	br	15ec <fire_projectile+0x6c>
	}
	else{
		new->next=projectiles;
    15d8:	d0e6d217 	ldw	r3,-25784(gp)
    15dc:	e0bffe17 	ldw	r2,-8(fp)
    15e0:	10c00415 	stw	r3,16(r2)
		projectiles=new;
    15e4:	e0bffe17 	ldw	r2,-8(fp)
    15e8:	d0a6d215 	stw	r2,-25784(gp)
	}
}
    15ec:	e037883a 	mov	sp,fp
    15f0:	dfc00117 	ldw	ra,4(sp)
    15f4:	df000017 	ldw	fp,0(sp)
    15f8:	dec00204 	addi	sp,sp,8
    15fc:	f800283a 	ret

00001600 <check_projectiles>:

void check_projectiles()
{
    1600:	deffff04 	addi	sp,sp,-4
    1604:	df000015 	stw	fp,0(sp)
    1608:	d839883a 	mov	fp,sp

}
    160c:	e037883a 	mov	sp,fp
    1610:	df000017 	ldw	fp,0(sp)
    1614:	dec00104 	addi	sp,sp,4
    1618:	f800283a 	ret

0000161c <init_players>:



void init_players(player *first,player *second){
    161c:	defffc04 	addi	sp,sp,-16
    1620:	dfc00315 	stw	ra,12(sp)
    1624:	df000215 	stw	fp,8(sp)
    1628:	df000204 	addi	fp,sp,8
    162c:	e13ffe15 	stw	r4,-8(fp)
    1630:	e17fff15 	stw	r5,-4(fp)
	if(first==NULL || second ==NULL)
    1634:	e0bffe17 	ldw	r2,-8(fp)
    1638:	10000226 	beq	r2,zero,1644 <init_players+0x28>
    163c:	e0bfff17 	ldw	r2,-4(fp)
    1640:	1000041e 	bne	r2,zero,1654 <init_players+0x38>
	{
		printf("players not instantiated");
    1644:	01000074 	movhi	r4,1
    1648:	21089304 	addi	r4,r4,8780
    164c:	00031540 	call	3154 <printf>
    1650:	00001806 	br	16b4 <init_players+0x98>
	}
	else{
		first->x_pos = 300,
    1654:	e0bffe17 	ldw	r2,-8(fp)
    1658:	00c04b04 	movi	r3,300
    165c:	10c00015 	stw	r3,0(r2)
		first->y_pos = 400;
    1660:	e0bffe17 	ldw	r2,-8(fp)
    1664:	00c06404 	movi	r3,400
    1668:	10c00115 	stw	r3,4(r2)
		first->health = 3;
    166c:	e0bffe17 	ldw	r2,-8(fp)
    1670:	00c000c4 	movi	r3,3
    1674:	10c00215 	stw	r3,8(r2)
		first->id=player_sprite1;
    1678:	e0bffe17 	ldw	r2,-8(fp)
    167c:	00c00084 	movi	r3,2
    1680:	10c00315 	stw	r3,12(r2)
		second->x_pos= 200;
    1684:	e0bfff17 	ldw	r2,-4(fp)
    1688:	00c03204 	movi	r3,200
    168c:	10c00015 	stw	r3,0(r2)
		second->y_pos= 200;
    1690:	e0bfff17 	ldw	r2,-4(fp)
    1694:	00c03204 	movi	r3,200
    1698:	10c00115 	stw	r3,4(r2)
		second->health=3;
    169c:	e0bfff17 	ldw	r2,-4(fp)
    16a0:	00c000c4 	movi	r3,3
    16a4:	10c00215 	stw	r3,8(r2)
		second->id = player_sprite1;
    16a8:	e0bfff17 	ldw	r2,-4(fp)
    16ac:	00c00084 	movi	r3,2
    16b0:	10c00315 	stw	r3,12(r2)
	}
}
    16b4:	e037883a 	mov	sp,fp
    16b8:	dfc00117 	ldw	ra,4(sp)
    16bc:	df000017 	ldw	fp,0(sp)
    16c0:	dec00204 	addi	sp,sp,8
    16c4:	f800283a 	ret

000016c8 <move_player>:



void move_player(player *current, int x_pos, int y_pos){
    16c8:	defffb04 	addi	sp,sp,-20
    16cc:	dfc00415 	stw	ra,16(sp)
    16d0:	df000315 	stw	fp,12(sp)
    16d4:	df000304 	addi	fp,sp,12
    16d8:	e13ffd15 	stw	r4,-12(fp)
    16dc:	e17ffe15 	stw	r5,-8(fp)
    16e0:	e1bfff15 	stw	r6,-4(fp)
	if(current==NULL)
    16e4:	e0bffd17 	ldw	r2,-12(fp)
    16e8:	1000041e 	bne	r2,zero,16fc <move_player+0x34>
		{
			printf("players not instantiated");
    16ec:	01000074 	movhi	r4,1
    16f0:	21089304 	addi	r4,r4,8780
    16f4:	00031540 	call	3154 <printf>
    16f8:	00001a06 	br	1764 <move_player+0x9c>
		}
	else{
		current->old_x=current->x_pos;
    16fc:	e0bffd17 	ldw	r2,-12(fp)
    1700:	10c00017 	ldw	r3,0(r2)
    1704:	e0bffd17 	ldw	r2,-12(fp)
    1708:	10c00415 	stw	r3,16(r2)
		current->old_y=current->y_pos;
    170c:	e0bffd17 	ldw	r2,-12(fp)
    1710:	10c00117 	ldw	r3,4(r2)
    1714:	e0bffd17 	ldw	r2,-12(fp)
    1718:	10c00515 	stw	r3,20(r2)
		if((x_pos+64) < x_bounds && x_pos > 0 && y_pos > 0 && (y_pos+64)<y_bounds){
    171c:	e0bffe17 	ldw	r2,-8(fp)
    1720:	10801004 	addi	r2,r2,64
    1724:	1080a008 	cmpgei	r2,r2,640
    1728:	10000e1e 	bne	r2,zero,1764 <move_player+0x9c>
    172c:	e0bffe17 	ldw	r2,-8(fp)
    1730:	00800c0e 	bge	zero,r2,1764 <move_player+0x9c>
    1734:	e0bfff17 	ldw	r2,-4(fp)
    1738:	00800a0e 	bge	zero,r2,1764 <move_player+0x9c>
    173c:	e0bfff17 	ldw	r2,-4(fp)
    1740:	10801004 	addi	r2,r2,64
    1744:	10807808 	cmpgei	r2,r2,480
    1748:	1000061e 	bne	r2,zero,1764 <move_player+0x9c>
			current->x_pos = x_pos;
    174c:	e0bffd17 	ldw	r2,-12(fp)
    1750:	e0fffe17 	ldw	r3,-8(fp)
    1754:	10c00015 	stw	r3,0(r2)
			current->y_pos = y_pos;
    1758:	e0bffd17 	ldw	r2,-12(fp)
    175c:	e0ffff17 	ldw	r3,-4(fp)
    1760:	10c00115 	stw	r3,4(r2)
		}
	}
}
    1764:	e037883a 	mov	sp,fp
    1768:	dfc00117 	ldw	ra,4(sp)
    176c:	df000017 	ldw	fp,0(sp)
    1770:	dec00204 	addi	sp,sp,8
    1774:	f800283a 	ret

00001778 <main>:



int main(void){
    1778:	defff604 	addi	sp,sp,-40
    177c:	dfc00915 	stw	ra,36(sp)
    1780:	df000815 	stw	fp,32(sp)
    1784:	df000804 	addi	fp,sp,32
	setup_keyboard();
    1788:	00006a00 	call	6a0 <setup_keyboard>
	unsigned int keycode1,keycode2;
	player *first=(player *)malloc(sizeof(player));
    178c:	01000604 	movi	r4,24
    1790:	00029580 	call	2958 <malloc>
    1794:	e0bff815 	stw	r2,-32(fp)
	player *second=(player *)malloc(sizeof(player));
    1798:	01000604 	movi	r4,24
    179c:	00029580 	call	2958 <malloc>
    17a0:	e0bff915 	stw	r2,-28(fp)
	init_players(first,second);
    17a4:	e13ff817 	ldw	r4,-32(fp)
    17a8:	e17ff917 	ldw	r5,-28(fp)
    17ac:	000161c0 	call	161c <init_players>
	unsigned int arr[4]={0,0,0,0};
    17b0:	e03ffc15 	stw	zero,-16(fp)
    17b4:	e03ffd15 	stw	zero,-12(fp)
    17b8:	e03ffe15 	stw	zero,-8(fp)
    17bc:	e03fff15 	stw	zero,-4(fp)
	while(1)
		{
			if(get_keycode(&keycode1,&keycode2)==0){
    17c0:	e0fffa04 	addi	r3,fp,-24
    17c4:	e0bffb04 	addi	r2,fp,-20
    17c8:	1809883a 	mov	r4,r3
    17cc:	100b883a 	mov	r5,r2
    17d0:	00003940 	call	394 <get_keycode>
    17d4:	10000e1e 	bne	r2,zero,1810 <main+0x98>
				parse_keycode(arr,keycode1,keycode2);
    17d8:	e0fffa17 	ldw	r3,-24(fp)
    17dc:	e0bffb17 	ldw	r2,-20(fp)
    17e0:	e13ffc04 	addi	r4,fp,-16
    17e4:	180b883a 	mov	r5,r3
    17e8:	100d883a 	mov	r6,r2
    17ec:	000150c0 	call	150c <parse_keycode>
				keycode_effect(first,second,arr);
    17f0:	e0bffc04 	addi	r2,fp,-16
    17f4:	e13ff817 	ldw	r4,-32(fp)
    17f8:	e17ff917 	ldw	r5,-28(fp)
    17fc:	100d883a 	mov	r6,r2
    1800:	00013100 	call	1310 <keycode_effect>
				render_players(first,second);
    1804:	e13ff817 	ldw	r4,-32(fp)
    1808:	e17ff917 	ldw	r5,-28(fp)
    180c:	00012680 	call	1268 <render_players>
			}

		}
    1810:	003feb06 	br	17c0 <__alt_data_end+0xfffac090>

00001814 <UsbWrite>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbWrite(alt_u16 Address, alt_u16 Data)
{
    1814:	defffc04 	addi	sp,sp,-16
    1818:	dfc00315 	stw	ra,12(sp)
    181c:	df000215 	stw	fp,8(sp)
    1820:	df000204 	addi	fp,sp,8
    1824:	2007883a 	mov	r3,r4
    1828:	2805883a 	mov	r2,r5
    182c:	e0fffe0d 	sth	r3,-8(fp)
    1830:	e0bfff0d 	sth	r2,-4(fp)
	IO_write(HPI_ADDR_PORT, Address);
    1834:	e0bffe0b 	ldhu	r2,-8(fp)
    1838:	01000084 	movi	r4,2
    183c:	100b883a 	mov	r5,r2
    1840:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA_PORT, Data);
    1844:	e0bfff0b 	ldhu	r2,-4(fp)
    1848:	0009883a 	mov	r4,zero
    184c:	100b883a 	mov	r5,r2
    1850:	00002c80 	call	2c8 <IO_write>
}
    1854:	e037883a 	mov	sp,fp
    1858:	dfc00117 	ldw	ra,4(sp)
    185c:	df000017 	ldw	fp,0(sp)
    1860:	dec00204 	addi	sp,sp,8
    1864:	f800283a 	ret

00001868 <UsbRead>:
 *
 * @note     None
 *
 ******************************************************************************/
alt_u16 UsbRead(alt_u16 Address)
{
    1868:	defffd04 	addi	sp,sp,-12
    186c:	dfc00215 	stw	ra,8(sp)
    1870:	df000115 	stw	fp,4(sp)
    1874:	df000104 	addi	fp,sp,4
    1878:	2005883a 	mov	r2,r4
    187c:	e0bfff0d 	sth	r2,-4(fp)
	IO_write(HPI_ADDR_PORT, Address);
    1880:	e0bfff0b 	ldhu	r2,-4(fp)
    1884:	01000084 	movi	r4,2
    1888:	100b883a 	mov	r5,r2
    188c:	00002c80 	call	2c8 <IO_write>
	return IO_read(HPI_DATA_PORT);
    1890:	0009883a 	mov	r4,zero
    1894:	00003300 	call	330 <IO_read>
}
    1898:	e037883a 	mov	sp,fp
    189c:	dfc00117 	ldw	ra,4(sp)
    18a0:	df000017 	ldw	fp,0(sp)
    18a4:	dec00204 	addi	sp,sp,8
    18a8:	f800283a 	ret

000018ac <UsbSoftReset>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbSoftReset()
{
    18ac:	defffe04 	addi	sp,sp,-8
    18b0:	dfc00115 	stw	ra,4(sp)
    18b4:	df000015 	stw	fp,0(sp)
    18b8:	d839883a 	mov	fp,sp
	//XIo_Out16(USB_MAILBOX, COMM_RESET);
	IO_write(HPI_MAILBOX,COMM_RESET); //COMM_JUMP2CODE
    18bc:	01000044 	movi	r4,1
    18c0:	017e9414 	movui	r5,64080
    18c4:	00002c80 	call	2c8 <IO_write>
	usleep(100000);
    18c8:	010000b4 	movhi	r4,2
    18cc:	2121a804 	addi	r4,r4,-31072
    18d0:	000fb880 	call	fb88 <usleep>
	printf("[USB INIT]:reset finished!\n");
    18d4:	01000074 	movhi	r4,1
    18d8:	21089f04 	addi	r4,r4,8828
    18dc:	00032480 	call	3248 <puts>

	usleep(500000);
    18e0:	01000234 	movhi	r4,8
    18e4:	21284804 	addi	r4,r4,-24288
    18e8:	000fb880 	call	fb88 <usleep>
	printf("[USB INIT]:Clear up the interrupt\r\n");
    18ec:	01000074 	movhi	r4,1
    18f0:	2108a604 	addi	r4,r4,8856
    18f4:	00032480 	call	3248 <puts>
	IO_read(HPI_MAILBOX);
    18f8:	01000044 	movi	r4,1
    18fc:	00003300 	call	330 <IO_read>
	IO_read(HPI_STATUS);
    1900:	010000c4 	movi	r4,3
    1904:	00003300 	call	330 <IO_read>

	// Had to add the write due to a bug in BIOS where they overwrite
	// the mailbox after initialization with garbage.  The read clears
	// any pending interrupts.
	UsbRead (HPI_SIE1_MSG_ADR);
    1908:	01005104 	movi	r4,324
    190c:	00018680 	call	1868 <UsbRead>
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
    1910:	01005104 	movi	r4,324
    1914:	000b883a 	mov	r5,zero
    1918:	00018140 	call	1814 <UsbWrite>
	UsbRead (HPI_SIE2_MSG_ADR);
    191c:	01005204 	movi	r4,328
    1920:	00018680 	call	1868 <UsbRead>
	UsbWrite (HPI_SIE2_MSG_ADR, 0);
    1924:	01005204 	movi	r4,328
    1928:	000b883a 	mov	r5,zero
    192c:	00018140 	call	1814 <UsbWrite>


	UsbWrite (HOST1_STAT_REG, 0xFFFF);
    1930:	01302414 	movui	r4,49296
    1934:	017fffd4 	movui	r5,65535
    1938:	00018140 	call	1814 <UsbWrite>
	UsbWrite (HOST2_STAT_REG, 0xFFFF);
    193c:	01302c14 	movui	r4,49328
    1940:	017fffd4 	movui	r5,65535
    1944:	00018140 	call	1814 <UsbWrite>
}
    1948:	e037883a 	mov	sp,fp
    194c:	dfc00117 	ldw	ra,4(sp)
    1950:	df000017 	ldw	fp,0(sp)
    1954:	dec00204 	addi	sp,sp,8
    1958:	f800283a 	ret

0000195c <UsbSetAddress>:


void UsbSetAddress()
{
    195c:	defffe04 	addi	sp,sp,-8
    1960:	dfc00115 	stw	ra,4(sp)
    1964:	df000015 	stw	fp,0(sp)
    1968:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    196c:	01000084 	movi	r4,2
    1970:	01414004 	movi	r5,1280
    1974:	00002c80 	call	2c8 <IO_write>
	// TD #1: 6 writes
	IO_write(HPI_DATA,0x050C);
    1978:	0009883a 	mov	r4,zero
    197c:	01414304 	movi	r5,1292
    1980:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    1984:	0009883a 	mov	r4,zero
    1988:	01400204 	movi	r5,8
    198c:	00002c80 	call	2c8 <IO_write>
	// TASK: Complete with 4 more IOWR functions
	IO_write(HPI_DATA,0x00D0);
    1990:	0009883a 	mov	r4,zero
    1994:	01403404 	movi	r5,208
    1998:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);
    199c:	0009883a 	mov	r4,zero
    19a0:	01400044 	movi	r5,1
    19a4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    19a8:	0009883a 	mov	r4,zero
    19ac:	014004c4 	movi	r5,19
    19b0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0514);
    19b4:	0009883a 	mov	r4,zero
    19b8:	01414504 	movi	r5,1300
    19bc:	00002c80 	call	2c8 <IO_write>
	// TD #2: 4 writes
	// TASK: Complete with 4 IOWR functions
	IO_write(HPI_DATA,0x0500);
    19c0:	0009883a 	mov	r4,zero
    19c4:	01414004 	movi	r5,1280
    19c8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0002);
    19cc:	0009883a 	mov	r4,zero
    19d0:	01400084 	movi	r5,2
    19d4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    19d8:	0009883a 	mov	r4,zero
    19dc:	000b883a 	mov	r5,zero
    19e0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    19e4:	0009883a 	mov	r4,zero
    19e8:	000b883a 	mov	r5,zero
    19ec:	00002c80 	call	2c8 <IO_write>
	// TD #3: 6 writes
	// TASK: Complete with 6 IOWR functions
	IO_write(HPI_DATA,0x0000); //
    19f0:	0009883a 	mov	r4,zero
    19f4:	000b883a 	mov	r5,zero
    19f8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//
    19fc:	0009883a 	mov	r4,zero
    1a00:	000b883a 	mov	r5,zero
    1a04:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0090);//
    1a08:	0009883a 	mov	r4,zero
    1a0c:	01402404 	movi	r5,144
    1a10:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);
    1a14:	0009883a 	mov	r4,zero
    1a18:	01401044 	movi	r5,65
    1a1c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    1a20:	0009883a 	mov	r4,zero
    1a24:	014004c4 	movi	r5,19
    1a28:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    1a2c:	0009883a 	mov	r4,zero
    1a30:	000b883a 	mov	r5,zero
    1a34:	00002c80 	call	2c8 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    1a38:	01006c04 	movi	r4,432
    1a3c:	01414004 	movi	r5,1280
    1a40:	00018140 	call	1814 <UsbWrite>
}
    1a44:	e037883a 	mov	sp,fp
    1a48:	dfc00117 	ldw	ra,4(sp)
    1a4c:	df000017 	ldw	fp,0(sp)
    1a50:	dec00204 	addi	sp,sp,8
    1a54:	f800283a 	ret

00001a58 <UsbGetDeviceDesc1>:


void UsbGetDeviceDesc1()
{
    1a58:	defffe04 	addi	sp,sp,-8
    1a5c:	dfc00115 	stw	ra,4(sp)
    1a60:	df000015 	stw	fp,0(sp)
    1a64:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    1a68:	01000084 	movi	r4,2
    1a6c:	01414004 	movi	r5,1280
    1a70:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x050C);
    1a74:	0009883a 	mov	r4,zero
    1a78:	01414304 	movi	r5,1292
    1a7c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    1a80:	0009883a 	mov	r4,zero
    1a84:	01400204 	movi	r5,8
    1a88:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    1a8c:	0009883a 	mov	r4,zero
    1a90:	0140b404 	movi	r5,720
    1a94:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);
    1a98:	0009883a 	mov	r4,zero
    1a9c:	01400044 	movi	r5,1
    1aa0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    1aa4:	0009883a 	mov	r4,zero
    1aa8:	014004c4 	movi	r5,19
    1aac:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0514);
    1ab0:	0009883a 	mov	r4,zero
    1ab4:	01414504 	movi	r5,1300
    1ab8:	00002c80 	call	2c8 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
    1abc:	0009883a 	mov	r4,zero
    1ac0:	0141a004 	movi	r5,1664
    1ac4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0100); //device 0x01
    1ac8:	0009883a 	mov	r4,zero
    1acc:	01404004 	movi	r5,256
    1ad0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    1ad4:	0009883a 	mov	r4,zero
    1ad8:	000b883a 	mov	r5,zero
    1adc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);
    1ae0:	0009883a 	mov	r4,zero
    1ae4:	01400204 	movi	r5,8
    1ae8:	00002c80 	call	2c8 <IO_write>

	//data phase IN
	IO_write(HPI_DATA,0x052C); //
    1aec:	0009883a 	mov	r4,zero
    1af0:	01414b04 	movi	r5,1324
    1af4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//
    1af8:	0009883a 	mov	r4,zero
    1afc:	01400204 	movi	r5,8
    1b00:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//
    1b04:	0009883a 	mov	r4,zero
    1b08:	0140a404 	movi	r5,656
    1b0c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);
    1b10:	0009883a 	mov	r4,zero
    1b14:	01401044 	movi	r5,65
    1b18:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    1b1c:	0009883a 	mov	r4,zero
    1b20:	014004c4 	movi	r5,19
    1b24:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0520);
    1b28:	0009883a 	mov	r4,zero
    1b2c:	01414804 	movi	r5,1312
    1b30:	00002c80 	call	2c8 <IO_write>

	//    //status phase
	IO_write(HPI_DATA,0x0000); //don't care
    1b34:	0009883a 	mov	r4,zero
    1b38:	000b883a 	mov	r5,zero
    1b3c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
    1b40:	0009883a 	mov	r4,zero
    1b44:	000b883a 	mov	r5,zero
    1b48:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0210);//device address
    1b4c:	0009883a 	mov	r4,zero
    1b50:	01408404 	movi	r5,528
    1b54:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);
    1b58:	0009883a 	mov	r4,zero
    1b5c:	01401044 	movi	r5,65
    1b60:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    1b64:	0009883a 	mov	r4,zero
    1b68:	014004c4 	movi	r5,19
    1b6c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    1b70:	0009883a 	mov	r4,zero
    1b74:	000b883a 	mov	r5,zero
    1b78:	00002c80 	call	2c8 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    1b7c:	01006c04 	movi	r4,432
    1b80:	01414004 	movi	r5,1280
    1b84:	00018140 	call	1814 <UsbWrite>
}
    1b88:	e037883a 	mov	sp,fp
    1b8c:	dfc00117 	ldw	ra,4(sp)
    1b90:	df000017 	ldw	fp,0(sp)
    1b94:	dec00204 	addi	sp,sp,8
    1b98:	f800283a 	ret

00001b9c <UsbGetDeviceDesc2>:

void UsbGetDeviceDesc2()
{
    1b9c:	defffe04 	addi	sp,sp,-8
    1ba0:	dfc00115 	stw	ra,4(sp)
    1ba4:	df000015 	stw	fp,0(sp)
    1ba8:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    1bac:	01000084 	movi	r4,2
    1bb0:	01414004 	movi	r5,1280
    1bb4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x050C);
    1bb8:	0009883a 	mov	r4,zero
    1bbc:	01414304 	movi	r5,1292
    1bc0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    1bc4:	0009883a 	mov	r4,zero
    1bc8:	01400204 	movi	r5,8
    1bcc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    1bd0:	0009883a 	mov	r4,zero
    1bd4:	0140b404 	movi	r5,720
    1bd8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);
    1bdc:	0009883a 	mov	r4,zero
    1be0:	01400044 	movi	r5,1
    1be4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    1be8:	0009883a 	mov	r4,zero
    1bec:	014004c4 	movi	r5,19
    1bf0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0514);
    1bf4:	0009883a 	mov	r4,zero
    1bf8:	01414504 	movi	r5,1300
    1bfc:	00002c80 	call	2c8 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
    1c00:	0009883a 	mov	r4,zero
    1c04:	0141a004 	movi	r5,1664
    1c08:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0100);//e //device 0x01
    1c0c:	0009883a 	mov	r4,zero
    1c10:	01404004 	movi	r5,256
    1c14:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    1c18:	0009883a 	mov	r4,zero
    1c1c:	000b883a 	mov	r5,zero
    1c20:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0012);//2
    1c24:	0009883a 	mov	r4,zero
    1c28:	01400484 	movi	r5,18
    1c2c:	00002c80 	call	2c8 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
    1c30:	0009883a 	mov	r4,zero
    1c34:	01415104 	movi	r5,1348
    1c38:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    1c3c:	0009883a 	mov	r4,zero
    1c40:	01400204 	movi	r5,8
    1c44:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    1c48:	0009883a 	mov	r4,zero
    1c4c:	0140a404 	movi	r5,656
    1c50:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    1c54:	0009883a 	mov	r4,zero
    1c58:	01401044 	movi	r5,65
    1c5c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    1c60:	0009883a 	mov	r4,zero
    1c64:	014004c4 	movi	r5,19
    1c68:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    1c6c:	0009883a 	mov	r4,zero
    1c70:	01414804 	movi	r5,1312
    1c74:	00002c80 	call	2c8 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
    1c78:	0009883a 	mov	r4,zero
    1c7c:	01415304 	movi	r5,1356
    1c80:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
    1c84:	0009883a 	mov	r4,zero
    1c88:	01400204 	movi	r5,8
    1c8c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    1c90:	0009883a 	mov	r4,zero
    1c94:	0140a404 	movi	r5,656
    1c98:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);//6
    1c9c:	0009883a 	mov	r4,zero
    1ca0:	01400044 	movi	r5,1
    1ca4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    1ca8:	0009883a 	mov	r4,zero
    1cac:	014004c4 	movi	r5,19
    1cb0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
    1cb4:	0009883a 	mov	r4,zero
    1cb8:	01414b04 	movi	r5,1324
    1cbc:	00002c80 	call	2c8 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0554); //c
    1cc0:	0009883a 	mov	r4,zero
    1cc4:	01415504 	movi	r5,1364
    1cc8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0002);//e
    1ccc:	0009883a 	mov	r4,zero
    1cd0:	01400084 	movi	r5,2
    1cd4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
    1cd8:	0009883a 	mov	r4,zero
    1cdc:	0140a404 	movi	r5,656
    1ce0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    1ce4:	0009883a 	mov	r4,zero
    1ce8:	01401044 	movi	r5,65
    1cec:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    1cf0:	0009883a 	mov	r4,zero
    1cf4:	014004c4 	movi	r5,19
    1cf8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
    1cfc:	0009883a 	mov	r4,zero
    1d00:	01414e04 	movi	r5,1336
    1d04:	00002c80 	call	2c8 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //538
    1d08:	0009883a 	mov	r4,zero
    1d0c:	000b883a 	mov	r5,zero
    1d10:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
    1d14:	0009883a 	mov	r4,zero
    1d18:	000b883a 	mov	r5,zero
    1d1c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0210);//c
    1d20:	0009883a 	mov	r4,zero
    1d24:	01408404 	movi	r5,528
    1d28:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//e
    1d2c:	0009883a 	mov	r4,zero
    1d30:	01401044 	movi	r5,65
    1d34:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
    1d38:	0009883a 	mov	r4,zero
    1d3c:	014004c4 	movi	r5,19
    1d40:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
    1d44:	0009883a 	mov	r4,zero
    1d48:	000b883a 	mov	r5,zero
    1d4c:	00002c80 	call	2c8 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    1d50:	01006c04 	movi	r4,432
    1d54:	01414004 	movi	r5,1280
    1d58:	00018140 	call	1814 <UsbWrite>
}
    1d5c:	e037883a 	mov	sp,fp
    1d60:	dfc00117 	ldw	ra,4(sp)
    1d64:	df000017 	ldw	fp,0(sp)
    1d68:	dec00204 	addi	sp,sp,8
    1d6c:	f800283a 	ret

00001d70 <UsbGetConfigDesc1>:


void UsbGetConfigDesc1()
{
    1d70:	defffe04 	addi	sp,sp,-8
    1d74:	dfc00115 	stw	ra,4(sp)
    1d78:	df000015 	stw	fp,0(sp)
    1d7c:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    1d80:	01000084 	movi	r4,2
    1d84:	01414004 	movi	r5,1280
    1d88:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x050C);
    1d8c:	0009883a 	mov	r4,zero
    1d90:	01414304 	movi	r5,1292
    1d94:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    1d98:	0009883a 	mov	r4,zero
    1d9c:	01400204 	movi	r5,8
    1da0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    1da4:	0009883a 	mov	r4,zero
    1da8:	0140b404 	movi	r5,720
    1dac:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);
    1db0:	0009883a 	mov	r4,zero
    1db4:	01400044 	movi	r5,1
    1db8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    1dbc:	0009883a 	mov	r4,zero
    1dc0:	014004c4 	movi	r5,19
    1dc4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0514);
    1dc8:	0009883a 	mov	r4,zero
    1dcc:	01414504 	movi	r5,1300
    1dd0:	00002c80 	call	2c8 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
    1dd4:	0009883a 	mov	r4,zero
    1dd8:	0141a004 	movi	r5,1664
    1ddc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
    1de0:	0009883a 	mov	r4,zero
    1de4:	01408004 	movi	r5,512
    1de8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    1dec:	0009883a 	mov	r4,zero
    1df0:	000b883a 	mov	r5,zero
    1df4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0009);//2
    1df8:	0009883a 	mov	r4,zero
    1dfc:	01400244 	movi	r5,9
    1e00:	00002c80 	call	2c8 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
    1e04:	0009883a 	mov	r4,zero
    1e08:	01415104 	movi	r5,1348
    1e0c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    1e10:	0009883a 	mov	r4,zero
    1e14:	01400204 	movi	r5,8
    1e18:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    1e1c:	0009883a 	mov	r4,zero
    1e20:	0140a404 	movi	r5,656
    1e24:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    1e28:	0009883a 	mov	r4,zero
    1e2c:	01401044 	movi	r5,65
    1e30:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    1e34:	0009883a 	mov	r4,zero
    1e38:	014004c4 	movi	r5,19
    1e3c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    1e40:	0009883a 	mov	r4,zero
    1e44:	01414804 	movi	r5,1312
    1e48:	00002c80 	call	2c8 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
    1e4c:	0009883a 	mov	r4,zero
    1e50:	01415304 	movi	r5,1356
    1e54:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);//2
    1e58:	0009883a 	mov	r4,zero
    1e5c:	01400044 	movi	r5,1
    1e60:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    1e64:	0009883a 	mov	r4,zero
    1e68:	0140a404 	movi	r5,656
    1e6c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
    1e70:	0009883a 	mov	r4,zero
    1e74:	01400044 	movi	r5,1
    1e78:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    1e7c:	0009883a 	mov	r4,zero
    1e80:	014004c4 	movi	r5,19
    1e84:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
    1e88:	0009883a 	mov	r4,zero
    1e8c:	01414b04 	movi	r5,1324
    1e90:	00002c80 	call	2c8 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
    1e94:	0009883a 	mov	r4,zero
    1e98:	000b883a 	mov	r5,zero
    1e9c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
    1ea0:	0009883a 	mov	r4,zero
    1ea4:	000b883a 	mov	r5,zero
    1ea8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
    1eac:	0009883a 	mov	r4,zero
    1eb0:	01408404 	movi	r5,528
    1eb4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    1eb8:	0009883a 	mov	r4,zero
    1ebc:	01401044 	movi	r5,65
    1ec0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    1ec4:	0009883a 	mov	r4,zero
    1ec8:	014004c4 	movi	r5,19
    1ecc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
    1ed0:	0009883a 	mov	r4,zero
    1ed4:	000b883a 	mov	r5,zero
    1ed8:	00002c80 	call	2c8 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    1edc:	01006c04 	movi	r4,432
    1ee0:	01414004 	movi	r5,1280
    1ee4:	00018140 	call	1814 <UsbWrite>
}
    1ee8:	e037883a 	mov	sp,fp
    1eec:	dfc00117 	ldw	ra,4(sp)
    1ef0:	df000017 	ldw	fp,0(sp)
    1ef4:	dec00204 	addi	sp,sp,8
    1ef8:	f800283a 	ret

00001efc <UsbGetConfigDesc2>:


void UsbGetConfigDesc2()
{
    1efc:	defffe04 	addi	sp,sp,-8
    1f00:	dfc00115 	stw	ra,4(sp)
    1f04:	df000015 	stw	fp,0(sp)
    1f08:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    1f0c:	01000084 	movi	r4,2
    1f10:	01414004 	movi	r5,1280
    1f14:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x050C);
    1f18:	0009883a 	mov	r4,zero
    1f1c:	01414304 	movi	r5,1292
    1f20:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    1f24:	0009883a 	mov	r4,zero
    1f28:	01400204 	movi	r5,8
    1f2c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    1f30:	0009883a 	mov	r4,zero
    1f34:	0140b404 	movi	r5,720
    1f38:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);
    1f3c:	0009883a 	mov	r4,zero
    1f40:	01400044 	movi	r5,1
    1f44:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    1f48:	0009883a 	mov	r4,zero
    1f4c:	014004c4 	movi	r5,19
    1f50:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0514);
    1f54:	0009883a 	mov	r4,zero
    1f58:	01414504 	movi	r5,1300
    1f5c:	00002c80 	call	2c8 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
    1f60:	0009883a 	mov	r4,zero
    1f64:	0141a004 	movi	r5,1664
    1f68:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
    1f6c:	0009883a 	mov	r4,zero
    1f70:	01408004 	movi	r5,512
    1f74:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    1f78:	0009883a 	mov	r4,zero
    1f7c:	000b883a 	mov	r5,zero
    1f80:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x00FF);//2
    1f84:	0009883a 	mov	r4,zero
    1f88:	01403fc4 	movi	r5,255
    1f8c:	00002c80 	call	2c8 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x055c); //514
    1f90:	0009883a 	mov	r4,zero
    1f94:	01415704 	movi	r5,1372
    1f98:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    1f9c:	0009883a 	mov	r4,zero
    1fa0:	01400204 	movi	r5,8
    1fa4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    1fa8:	0009883a 	mov	r4,zero
    1fac:	0140a404 	movi	r5,656
    1fb0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    1fb4:	0009883a 	mov	r4,zero
    1fb8:	01401044 	movi	r5,65
    1fbc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    1fc0:	0009883a 	mov	r4,zero
    1fc4:	014004c4 	movi	r5,19
    1fc8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    1fcc:	0009883a 	mov	r4,zero
    1fd0:	01414804 	movi	r5,1312
    1fd4:	00002c80 	call	2c8 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0564); //520
    1fd8:	0009883a 	mov	r4,zero
    1fdc:	01415904 	movi	r5,1380
    1fe0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
    1fe4:	0009883a 	mov	r4,zero
    1fe8:	01400204 	movi	r5,8
    1fec:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    1ff0:	0009883a 	mov	r4,zero
    1ff4:	0140a404 	movi	r5,656
    1ff8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
    1ffc:	0009883a 	mov	r4,zero
    2000:	01400044 	movi	r5,1
    2004:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    2008:	0009883a 	mov	r4,zero
    200c:	014004c4 	movi	r5,19
    2010:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
    2014:	0009883a 	mov	r4,zero
    2018:	01414b04 	movi	r5,1324
    201c:	00002c80 	call	2c8 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x056c); //52c
    2020:	0009883a 	mov	r4,zero
    2024:	01415b04 	movi	r5,1388
    2028:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
    202c:	0009883a 	mov	r4,zero
    2030:	01400204 	movi	r5,8
    2034:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
    2038:	0009883a 	mov	r4,zero
    203c:	0140a404 	movi	r5,656
    2040:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    2044:	0009883a 	mov	r4,zero
    2048:	01401044 	movi	r5,65
    204c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    2050:	0009883a 	mov	r4,zero
    2054:	014004c4 	movi	r5,19
    2058:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
    205c:	0009883a 	mov	r4,zero
    2060:	01414e04 	movi	r5,1336
    2064:	00002c80 	call	2c8 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0574); //538
    2068:	0009883a 	mov	r4,zero
    206c:	01415d04 	movi	r5,1396
    2070:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
    2074:	0009883a 	mov	r4,zero
    2078:	01400204 	movi	r5,8
    207c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
    2080:	0009883a 	mov	r4,zero
    2084:	0140a404 	movi	r5,656
    2088:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
    208c:	0009883a 	mov	r4,zero
    2090:	01400044 	movi	r5,1
    2094:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
    2098:	0009883a 	mov	r4,zero
    209c:	014004c4 	movi	r5,19
    20a0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
    20a4:	0009883a 	mov	r4,zero
    20a8:	01415104 	movi	r5,1348
    20ac:	00002c80 	call	2c8 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x057c); //544
    20b0:	0009883a 	mov	r4,zero
    20b4:	01415f04 	movi	r5,1404
    20b8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0002);//6
    20bc:	0009883a 	mov	r4,zero
    20c0:	01400084 	movi	r5,2
    20c4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    20c8:	0009883a 	mov	r4,zero
    20cc:	0140a404 	movi	r5,656
    20d0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
    20d4:	0009883a 	mov	r4,zero
    20d8:	01401044 	movi	r5,65
    20dc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    20e0:	0009883a 	mov	r4,zero
    20e4:	014004c4 	movi	r5,19
    20e8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
    20ec:	0009883a 	mov	r4,zero
    20f0:	01415404 	movi	r5,1360
    20f4:	00002c80 	call	2c8 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //550
    20f8:	0009883a 	mov	r4,zero
    20fc:	000b883a 	mov	r5,zero
    2100:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
    2104:	0009883a 	mov	r4,zero
    2108:	000b883a 	mov	r5,zero
    210c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0210);//4
    2110:	0009883a 	mov	r4,zero
    2114:	01408404 	movi	r5,528
    2118:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//6
    211c:	0009883a 	mov	r4,zero
    2120:	01401044 	movi	r5,65
    2124:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    2128:	0009883a 	mov	r4,zero
    212c:	014004c4 	movi	r5,19
    2130:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
    2134:	0009883a 	mov	r4,zero
    2138:	000b883a 	mov	r5,zero
    213c:	00002c80 	call	2c8 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    2140:	01006c04 	movi	r4,432
    2144:	01414004 	movi	r5,1280
    2148:	00018140 	call	1814 <UsbWrite>
}
    214c:	e037883a 	mov	sp,fp
    2150:	dfc00117 	ldw	ra,4(sp)
    2154:	df000017 	ldw	fp,0(sp)
    2158:	dec00204 	addi	sp,sp,8
    215c:	f800283a 	ret

00002160 <UsbSetConfig>:

void UsbSetConfig()
{
    2160:	defffe04 	addi	sp,sp,-8
    2164:	dfc00115 	stw	ra,4(sp)
    2168:	df000015 	stw	fp,0(sp)
    216c:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    2170:	01000084 	movi	r4,2
    2174:	01414004 	movi	r5,1280
    2178:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x050C);
    217c:	0009883a 	mov	r4,zero
    2180:	01414304 	movi	r5,1292
    2184:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    2188:	0009883a 	mov	r4,zero
    218c:	01400204 	movi	r5,8
    2190:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
    2194:	0009883a 	mov	r4,zero
    2198:	0140b404 	movi	r5,720
    219c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);
    21a0:	0009883a 	mov	r4,zero
    21a4:	01400044 	movi	r5,1
    21a8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    21ac:	0009883a 	mov	r4,zero
    21b0:	014004c4 	movi	r5,19
    21b4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0514);
    21b8:	0009883a 	mov	r4,zero
    21bc:	01414504 	movi	r5,1300
    21c0:	00002c80 	call	2c8 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0900);
    21c4:	0009883a 	mov	r4,zero
    21c8:	01424004 	movi	r5,2304
    21cc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);//device address
    21d0:	0009883a 	mov	r4,zero
    21d4:	01400044 	movi	r5,1
    21d8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    21dc:	0009883a 	mov	r4,zero
    21e0:	000b883a 	mov	r5,zero
    21e4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    21e8:	0009883a 	mov	r4,zero
    21ec:	000b883a 	mov	r5,zero
    21f0:	00002c80 	call	2c8 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
    21f4:	0009883a 	mov	r4,zero
    21f8:	000b883a 	mov	r5,zero
    21fc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
    2200:	0009883a 	mov	r4,zero
    2204:	000b883a 	mov	r5,zero
    2208:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
    220c:	0009883a 	mov	r4,zero
    2210:	0140a404 	movi	r5,656
    2214:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
    2218:	0009883a 	mov	r4,zero
    221c:	01401044 	movi	r5,65
    2220:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    2224:	0009883a 	mov	r4,zero
    2228:	014004c4 	movi	r5,19
    222c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    2230:	0009883a 	mov	r4,zero
    2234:	000b883a 	mov	r5,zero
    2238:	00002c80 	call	2c8 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    223c:	01006c04 	movi	r4,432
    2240:	01414004 	movi	r5,1280
    2244:	00018140 	call	1814 <UsbWrite>

}
    2248:	e037883a 	mov	sp,fp
    224c:	dfc00117 	ldw	ra,4(sp)
    2250:	df000017 	ldw	fp,0(sp)
    2254:	dec00204 	addi	sp,sp,8
    2258:	f800283a 	ret

0000225c <UsbClassRequest>:

void UsbClassRequest()
{
    225c:	defffe04 	addi	sp,sp,-8
    2260:	dfc00115 	stw	ra,4(sp)
    2264:	df000015 	stw	fp,0(sp)
    2268:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    226c:	01000084 	movi	r4,2
    2270:	01414004 	movi	r5,1280
    2274:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x050C);
    2278:	0009883a 	mov	r4,zero
    227c:	01414304 	movi	r5,1292
    2280:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    2284:	0009883a 	mov	r4,zero
    2288:	01400204 	movi	r5,8
    228c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
    2290:	0009883a 	mov	r4,zero
    2294:	0140b404 	movi	r5,720
    2298:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);
    229c:	0009883a 	mov	r4,zero
    22a0:	01400044 	movi	r5,1
    22a4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    22a8:	0009883a 	mov	r4,zero
    22ac:	014004c4 	movi	r5,19
    22b0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0514);
    22b4:	0009883a 	mov	r4,zero
    22b8:	01414504 	movi	r5,1300
    22bc:	00002c80 	call	2c8 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0A21);
    22c0:	0009883a 	mov	r4,zero
    22c4:	01428844 	movi	r5,2593
    22c8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//device address
    22cc:	0009883a 	mov	r4,zero
    22d0:	000b883a 	mov	r5,zero
    22d4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    22d8:	0009883a 	mov	r4,zero
    22dc:	000b883a 	mov	r5,zero
    22e0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    22e4:	0009883a 	mov	r4,zero
    22e8:	000b883a 	mov	r5,zero
    22ec:	00002c80 	call	2c8 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
    22f0:	0009883a 	mov	r4,zero
    22f4:	000b883a 	mov	r5,zero
    22f8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number /data length
    22fc:	0009883a 	mov	r4,zero
    2300:	000b883a 	mov	r5,zero
    2304:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
    2308:	0009883a 	mov	r4,zero
    230c:	0140a404 	movi	r5,656
    2310:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
    2314:	0009883a 	mov	r4,zero
    2318:	01401044 	movi	r5,65
    231c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    2320:	0009883a 	mov	r4,zero
    2324:	014004c4 	movi	r5,19
    2328:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    232c:	0009883a 	mov	r4,zero
    2330:	000b883a 	mov	r5,zero
    2334:	00002c80 	call	2c8 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    2338:	01006c04 	movi	r4,432
    233c:	01414004 	movi	r5,1280
    2340:	00018140 	call	1814 <UsbWrite>
}
    2344:	e037883a 	mov	sp,fp
    2348:	dfc00117 	ldw	ra,4(sp)
    234c:	df000017 	ldw	fp,0(sp)
    2350:	dec00204 	addi	sp,sp,8
    2354:	f800283a 	ret

00002358 <UsbGetHidDesc>:


void UsbGetHidDesc()
{
    2358:	defffe04 	addi	sp,sp,-8
    235c:	dfc00115 	stw	ra,4(sp)
    2360:	df000015 	stw	fp,0(sp)
    2364:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    2368:	01000084 	movi	r4,2
    236c:	01414004 	movi	r5,1280
    2370:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x050C);
    2374:	0009883a 	mov	r4,zero
    2378:	01414304 	movi	r5,1292
    237c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    2380:	0009883a 	mov	r4,zero
    2384:	01400204 	movi	r5,8
    2388:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
    238c:	0009883a 	mov	r4,zero
    2390:	0140b404 	movi	r5,720
    2394:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);
    2398:	0009883a 	mov	r4,zero
    239c:	01400044 	movi	r5,1
    23a0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    23a4:	0009883a 	mov	r4,zero
    23a8:	014004c4 	movi	r5,19
    23ac:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0514);
    23b0:	0009883a 	mov	r4,zero
    23b4:	01414504 	movi	r5,1300
    23b8:	00002c80 	call	2c8 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
    23bc:	0009883a 	mov	r4,zero
    23c0:	0141a044 	movi	r5,1665
    23c4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x2100);//e //HID 0x21
    23c8:	0009883a 	mov	r4,zero
    23cc:	01484004 	movi	r5,8448
    23d0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    23d4:	0009883a 	mov	r4,zero
    23d8:	000b883a 	mov	r5,zero
    23dc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
    23e0:	0009883a 	mov	r4,zero
    23e4:	01401ec4 	movi	r5,123
    23e8:	00002c80 	call	2c8 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
    23ec:	0009883a 	mov	r4,zero
    23f0:	01415104 	movi	r5,1348
    23f4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    23f8:	0009883a 	mov	r4,zero
    23fc:	01400204 	movi	r5,8
    2400:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    2404:	0009883a 	mov	r4,zero
    2408:	0140a404 	movi	r5,656
    240c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    2410:	0009883a 	mov	r4,zero
    2414:	01401044 	movi	r5,65
    2418:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    241c:	0009883a 	mov	r4,zero
    2420:	014004c4 	movi	r5,19
    2424:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    2428:	0009883a 	mov	r4,zero
    242c:	01414804 	movi	r5,1312
    2430:	00002c80 	call	2c8 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
    2434:	0009883a 	mov	r4,zero
    2438:	000b883a 	mov	r5,zero
    243c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
    2440:	0009883a 	mov	r4,zero
    2444:	000b883a 	mov	r5,zero
    2448:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
    244c:	0009883a 	mov	r4,zero
    2450:	01408404 	movi	r5,528
    2454:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    2458:	0009883a 	mov	r4,zero
    245c:	01401044 	movi	r5,65
    2460:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    2464:	0009883a 	mov	r4,zero
    2468:	014004c4 	movi	r5,19
    246c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
    2470:	0009883a 	mov	r4,zero
    2474:	000b883a 	mov	r5,zero
    2478:	00002c80 	call	2c8 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    247c:	01006c04 	movi	r4,432
    2480:	01414004 	movi	r5,1280
    2484:	00018140 	call	1814 <UsbWrite>

}
    2488:	e037883a 	mov	sp,fp
    248c:	dfc00117 	ldw	ra,4(sp)
    2490:	df000017 	ldw	fp,0(sp)
    2494:	dec00204 	addi	sp,sp,8
    2498:	f800283a 	ret

0000249c <UsbGetReportDesc>:


void UsbGetReportDesc()
{
    249c:	defffe04 	addi	sp,sp,-8
    24a0:	dfc00115 	stw	ra,4(sp)
    24a4:	df000015 	stw	fp,0(sp)
    24a8:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    24ac:	01000084 	movi	r4,2
    24b0:	01414004 	movi	r5,1280
    24b4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x050C);
    24b8:	0009883a 	mov	r4,zero
    24bc:	01414304 	movi	r5,1292
    24c0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    24c4:	0009883a 	mov	r4,zero
    24c8:	01400204 	movi	r5,8
    24cc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    24d0:	0009883a 	mov	r4,zero
    24d4:	0140b404 	movi	r5,720
    24d8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);
    24dc:	0009883a 	mov	r4,zero
    24e0:	01400044 	movi	r5,1
    24e4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    24e8:	0009883a 	mov	r4,zero
    24ec:	014004c4 	movi	r5,19
    24f0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0514);
    24f4:	0009883a 	mov	r4,zero
    24f8:	01414504 	movi	r5,1300
    24fc:	00002c80 	call	2c8 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
    2500:	0009883a 	mov	r4,zero
    2504:	0141a044 	movi	r5,1665
    2508:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x2200);//e //report 0x22
    250c:	0009883a 	mov	r4,zero
    2510:	01488004 	movi	r5,8704
    2514:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    2518:	0009883a 	mov	r4,zero
    251c:	000b883a 	mov	r5,zero
    2520:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
    2524:	0009883a 	mov	r4,zero
    2528:	01401ec4 	movi	r5,123
    252c:	00002c80 	call	2c8 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0580); //514
    2530:	0009883a 	mov	r4,zero
    2534:	01416004 	movi	r5,1408
    2538:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    253c:	0009883a 	mov	r4,zero
    2540:	01400204 	movi	r5,8
    2544:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    2548:	0009883a 	mov	r4,zero
    254c:	0140a404 	movi	r5,656
    2550:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    2554:	0009883a 	mov	r4,zero
    2558:	01401044 	movi	r5,65
    255c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    2560:	0009883a 	mov	r4,zero
    2564:	014004c4 	movi	r5,19
    2568:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    256c:	0009883a 	mov	r4,zero
    2570:	01414804 	movi	r5,1312
    2574:	00002c80 	call	2c8 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0588); //520
    2578:	0009883a 	mov	r4,zero
    257c:	01416204 	movi	r5,1416
    2580:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
    2584:	0009883a 	mov	r4,zero
    2588:	01400204 	movi	r5,8
    258c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    2590:	0009883a 	mov	r4,zero
    2594:	0140a404 	movi	r5,656
    2598:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
    259c:	0009883a 	mov	r4,zero
    25a0:	01400044 	movi	r5,1
    25a4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    25a8:	0009883a 	mov	r4,zero
    25ac:	014004c4 	movi	r5,19
    25b0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
    25b4:	0009883a 	mov	r4,zero
    25b8:	01414b04 	movi	r5,1324
    25bc:	00002c80 	call	2c8 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0590); //52c
    25c0:	0009883a 	mov	r4,zero
    25c4:	01416404 	movi	r5,1424
    25c8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
    25cc:	0009883a 	mov	r4,zero
    25d0:	01400204 	movi	r5,8
    25d4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
    25d8:	0009883a 	mov	r4,zero
    25dc:	0140a404 	movi	r5,656
    25e0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    25e4:	0009883a 	mov	r4,zero
    25e8:	01401044 	movi	r5,65
    25ec:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    25f0:	0009883a 	mov	r4,zero
    25f4:	014004c4 	movi	r5,19
    25f8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
    25fc:	0009883a 	mov	r4,zero
    2600:	01414e04 	movi	r5,1336
    2604:	00002c80 	call	2c8 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0598); //538
    2608:	0009883a 	mov	r4,zero
    260c:	01416604 	movi	r5,1432
    2610:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
    2614:	0009883a 	mov	r4,zero
    2618:	01400204 	movi	r5,8
    261c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
    2620:	0009883a 	mov	r4,zero
    2624:	0140a404 	movi	r5,656
    2628:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
    262c:	0009883a 	mov	r4,zero
    2630:	01400044 	movi	r5,1
    2634:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
    2638:	0009883a 	mov	r4,zero
    263c:	014004c4 	movi	r5,19
    2640:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
    2644:	0009883a 	mov	r4,zero
    2648:	01415104 	movi	r5,1348
    264c:	00002c80 	call	2c8 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x05a0); //544
    2650:	0009883a 	mov	r4,zero
    2654:	01416804 	movi	r5,1440
    2658:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    265c:	0009883a 	mov	r4,zero
    2660:	01400204 	movi	r5,8
    2664:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    2668:	0009883a 	mov	r4,zero
    266c:	0140a404 	movi	r5,656
    2670:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
    2674:	0009883a 	mov	r4,zero
    2678:	01401044 	movi	r5,65
    267c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    2680:	0009883a 	mov	r4,zero
    2684:	014004c4 	movi	r5,19
    2688:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
    268c:	0009883a 	mov	r4,zero
    2690:	01415404 	movi	r5,1360
    2694:	00002c80 	call	2c8 <IO_write>

	//data phase IN-6
	IO_write(HPI_DATA,0x05a8); //550
    2698:	0009883a 	mov	r4,zero
    269c:	01416a04 	movi	r5,1448
    26a0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
    26a4:	0009883a 	mov	r4,zero
    26a8:	01400204 	movi	r5,8
    26ac:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    26b0:	0009883a 	mov	r4,zero
    26b4:	0140a404 	movi	r5,656
    26b8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
    26bc:	0009883a 	mov	r4,zero
    26c0:	01400044 	movi	r5,1
    26c4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    26c8:	0009883a 	mov	r4,zero
    26cc:	014004c4 	movi	r5,19
    26d0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x055c);//a
    26d4:	0009883a 	mov	r4,zero
    26d8:	01415704 	movi	r5,1372
    26dc:	00002c80 	call	2c8 <IO_write>

	//data phase IN-7
	IO_write(HPI_DATA,0x05b0); //c
    26e0:	0009883a 	mov	r4,zero
    26e4:	01416c04 	movi	r5,1456
    26e8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
    26ec:	0009883a 	mov	r4,zero
    26f0:	01400204 	movi	r5,8
    26f4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//560
    26f8:	0009883a 	mov	r4,zero
    26fc:	0140a404 	movi	r5,656
    2700:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//2 //data1
    2704:	0009883a 	mov	r4,zero
    2708:	01401044 	movi	r5,65
    270c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    2710:	0009883a 	mov	r4,zero
    2714:	014004c4 	movi	r5,19
    2718:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0568);//6
    271c:	0009883a 	mov	r4,zero
    2720:	01415a04 	movi	r5,1384
    2724:	00002c80 	call	2c8 <IO_write>

	//data phase IN-8
	IO_write(HPI_DATA,0x05b8); //8
    2728:	0009883a 	mov	r4,zero
    272c:	01416e04 	movi	r5,1464
    2730:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0003);//a
    2734:	0009883a 	mov	r4,zero
    2738:	014000c4 	movi	r5,3
    273c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
    2740:	0009883a 	mov	r4,zero
    2744:	0140a404 	movi	r5,656
    2748:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
    274c:	0009883a 	mov	r4,zero
    2750:	01400044 	movi	r5,1
    2754:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//570
    2758:	0009883a 	mov	r4,zero
    275c:	014004c4 	movi	r5,19
    2760:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0574);//2
    2764:	0009883a 	mov	r4,zero
    2768:	01415d04 	movi	r5,1396
    276c:	00002c80 	call	2c8 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //574
    2770:	0009883a 	mov	r4,zero
    2774:	000b883a 	mov	r5,zero
    2778:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
    277c:	0009883a 	mov	r4,zero
    2780:	000b883a 	mov	r5,zero
    2784:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0210);//8
    2788:	0009883a 	mov	r4,zero
    278c:	01408404 	movi	r5,528
    2790:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    2794:	0009883a 	mov	r4,zero
    2798:	01401044 	movi	r5,65
    279c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    27a0:	0009883a 	mov	r4,zero
    27a4:	014004c4 	movi	r5,19
    27a8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
    27ac:	0009883a 	mov	r4,zero
    27b0:	000b883a 	mov	r5,zero
    27b4:	00002c80 	call	2c8 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    27b8:	01006c04 	movi	r4,432
    27bc:	01414004 	movi	r5,1280
    27c0:	00018140 	call	1814 <UsbWrite>

}
    27c4:	e037883a 	mov	sp,fp
    27c8:	dfc00117 	ldw	ra,4(sp)
    27cc:	df000017 	ldw	fp,0(sp)
    27d0:	dec00204 	addi	sp,sp,8
    27d4:	f800283a 	ret

000027d8 <UsbWaitTDListDone>:


alt_u16 UsbWaitTDListDone()
{
    27d8:	defffd04 	addi	sp,sp,-12
    27dc:	dfc00215 	stw	ra,8(sp)
    27e0:	df000115 	stw	fp,4(sp)
    27e4:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
    27e8:	01005104 	movi	r4,324
    27ec:	00018680 	call	1868 <UsbRead>
    27f0:	e0bfff0d 	sth	r2,-4(fp)
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
    27f4:	01005104 	movi	r4,324
    27f8:	000b883a 	mov	r5,zero
    27fc:	00018140 	call	1814 <UsbWrite>
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
    2800:	00000d06 	br	2838 <UsbWaitTDListDone+0x60>
	{
		if(usb_ctl_val == 0x0000)
    2804:	e0bfff0b 	ldhu	r2,-4(fp)
    2808:	10000526 	beq	r2,zero,2820 <UsbWaitTDListDone+0x48>
		{
		}
		else
		{
			printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
    280c:	e0bfff0b 	ldhu	r2,-4(fp)
    2810:	01000074 	movhi	r4,1
    2814:	2108af04 	addi	r4,r4,8892
    2818:	100b883a 	mov	r5,r2
    281c:	00031540 	call	3154 <printf>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    2820:	01005104 	movi	r4,324
    2824:	00018680 	call	1868 <UsbRead>
    2828:	e0bfff0d 	sth	r2,-4(fp)
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
    282c:	01005104 	movi	r4,324
    2830:	000b883a 	mov	r5,zero
    2834:	00018140 	call	1814 <UsbWrite>
{
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
    2838:	e0bfff0b 	ldhu	r2,-4(fp)
    283c:	10840018 	cmpnei	r2,r2,4096
    2840:	103ff01e 	bne	r2,zero,2804 <__alt_data_end+0xfffad0d4>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
	}

	return usb_ctl_val;
    2844:	e0bfff0b 	ldhu	r2,-4(fp)
}
    2848:	e037883a 	mov	sp,fp
    284c:	dfc00117 	ldw	ra,4(sp)
    2850:	df000017 	ldw	fp,0(sp)
    2854:	dec00204 	addi	sp,sp,8
    2858:	f800283a 	ret

0000285c <UsbGetRetryCnt>:


alt_u16 UsbGetRetryCnt()
{
    285c:	defffd04 	addi	sp,sp,-12
    2860:	dfc00215 	stw	ra,8(sp)
    2864:	df000115 	stw	fp,4(sp)
    2868:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	IO_read(HPI_STATUS);
    286c:	010000c4 	movi	r4,3
    2870:	00003300 	call	330 <IO_read>
	if(UsbRead(HPI_SIE1_MSG_ADR) == HUSB_TDListDone)
    2874:	01005104 	movi	r4,324
    2878:	00018680 	call	1868 <UsbRead>
    287c:	10bfffcc 	andi	r2,r2,65535
    2880:	10840018 	cmpnei	r2,r2,4096
    2884:	1000091e 	bne	r2,zero,28ac <UsbGetRetryCnt+0x50>
	{
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
    2888:	01005104 	movi	r4,324
    288c:	000b883a 	mov	r5,zero
    2890:	00018140 	call	1814 <UsbWrite>

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    2894:	0001883a 	nop
    2898:	010000c4 	movi	r4,3
    289c:	00003300 	call	330 <IO_read>
    28a0:	10bfffcc 	andi	r2,r2,65535
    28a4:	1080040c 	andi	r2,r2,16
    28a8:	103ffb26 	beq	r2,zero,2898 <__alt_data_end+0xfffad168>
		{
		}
	}
	//usleep(1000);
	IO_write(HPI_ADDR,0x0508);
    28ac:	01000084 	movi	r4,2
    28b0:	01414204 	movi	r5,1288
    28b4:	00002c80 	call	2c8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
    28b8:	0009883a 	mov	r4,zero
    28bc:	00003300 	call	330 <IO_read>
    28c0:	e0bfff0d 	sth	r2,-4(fp)

	return usb_ctl_val;
    28c4:	e0bfff0b 	ldhu	r2,-4(fp)
}
    28c8:	e037883a 	mov	sp,fp
    28cc:	dfc00117 	ldw	ra,4(sp)
    28d0:	df000017 	ldw	fp,0(sp)
    28d4:	dec00204 	addi	sp,sp,8
    28d8:	f800283a 	ret

000028dc <UsbPrintMem>:


void UsbPrintMem()
{
    28dc:	defffc04 	addi	sp,sp,-16
    28e0:	dfc00315 	stw	ra,12(sp)
    28e4:	df000215 	stw	fp,8(sp)
    28e8:	df000204 	addi	fp,sp,8
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
    28ec:	01000084 	movi	r4,2
    28f0:	01414004 	movi	r5,1280
    28f4:	00002c80 	call	2c8 <IO_write>
	for (i = 0; i <= 200; i += 2)
    28f8:	e03ffe15 	stw	zero,-8(fp)
    28fc:	00000e06 	br	2938 <UsbPrintMem+0x5c>
	{
		code = IO_read(HPI_DATA);
    2900:	0009883a 	mov	r4,zero
    2904:	00003300 	call	330 <IO_read>
    2908:	10bfffcc 	andi	r2,r2,65535
    290c:	e0bfff15 	stw	r2,-4(fp)
		printf("\naddr %x = %04x\n", 0x0500+i, code);
    2910:	e0bffe17 	ldw	r2,-8(fp)
    2914:	10814004 	addi	r2,r2,1280
    2918:	01000074 	movhi	r4,1
    291c:	2108b704 	addi	r4,r4,8924
    2920:	100b883a 	mov	r5,r2
    2924:	e1bfff17 	ldw	r6,-4(fp)
    2928:	00031540 	call	3154 <printf>

void UsbPrintMem()
{
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
	for (i = 0; i <= 200; i += 2)
    292c:	e0bffe17 	ldw	r2,-8(fp)
    2930:	10800084 	addi	r2,r2,2
    2934:	e0bffe15 	stw	r2,-8(fp)
    2938:	e0bffe17 	ldw	r2,-8(fp)
    293c:	10803250 	cmplti	r2,r2,201
    2940:	103fef1e 	bne	r2,zero,2900 <__alt_data_end+0xfffad1d0>
	{
		code = IO_read(HPI_DATA);
		printf("\naddr %x = %04x\n", 0x0500+i, code);
	}
}
    2944:	e037883a 	mov	sp,fp
    2948:	dfc00117 	ldw	ra,4(sp)
    294c:	df000017 	ldw	fp,0(sp)
    2950:	dec00204 	addi	sp,sp,8
    2954:	f800283a 	ret

00002958 <malloc>:
    2958:	00800074 	movhi	r2,1
    295c:	10902a04 	addi	r2,r2,16552
    2960:	200b883a 	mov	r5,r4
    2964:	11000017 	ldw	r4,0(r2)
    2968:	00029801 	jmpi	2980 <_malloc_r>

0000296c <free>:
    296c:	00800074 	movhi	r2,1
    2970:	10902a04 	addi	r2,r2,16552
    2974:	200b883a 	mov	r5,r4
    2978:	11000017 	ldw	r4,0(r2)
    297c:	00076181 	jmpi	7618 <_free_r>

00002980 <_malloc_r>:
    2980:	defff504 	addi	sp,sp,-44
    2984:	dc800315 	stw	r18,12(sp)
    2988:	dfc00a15 	stw	ra,40(sp)
    298c:	df000915 	stw	fp,36(sp)
    2990:	ddc00815 	stw	r23,32(sp)
    2994:	dd800715 	stw	r22,28(sp)
    2998:	dd400615 	stw	r21,24(sp)
    299c:	dd000515 	stw	r20,20(sp)
    29a0:	dcc00415 	stw	r19,16(sp)
    29a4:	dc400215 	stw	r17,8(sp)
    29a8:	dc000115 	stw	r16,4(sp)
    29ac:	288002c4 	addi	r2,r5,11
    29b0:	00c00584 	movi	r3,22
    29b4:	2025883a 	mov	r18,r4
    29b8:	18802a2e 	bgeu	r3,r2,2a64 <_malloc_r+0xe4>
    29bc:	047ffe04 	movi	r17,-8
    29c0:	1462703a 	and	r17,r2,r17
    29c4:	88009e16 	blt	r17,zero,2c40 <_malloc_r+0x2c0>
    29c8:	89409d36 	bltu	r17,r5,2c40 <_malloc_r+0x2c0>
    29cc:	000f8c40 	call	f8c4 <__malloc_lock>
    29d0:	00807dc4 	movi	r2,503
    29d4:	14402736 	bltu	r2,r17,2a74 <_malloc_r+0xf4>
    29d8:	8806d0fa 	srli	r3,r17,3
    29dc:	04c00074 	movhi	r19,1
    29e0:	9cc97c04 	addi	r19,r19,9712
    29e4:	18c5883a 	add	r2,r3,r3
    29e8:	1085883a 	add	r2,r2,r2
    29ec:	1085883a 	add	r2,r2,r2
    29f0:	9885883a 	add	r2,r19,r2
    29f4:	14000317 	ldw	r16,12(r2)
    29f8:	80814a26 	beq	r16,r2,2f24 <_malloc_r+0x5a4>
    29fc:	80c00117 	ldw	r3,4(r16)
    2a00:	81000317 	ldw	r4,12(r16)
    2a04:	00bfff04 	movi	r2,-4
    2a08:	1884703a 	and	r2,r3,r2
    2a0c:	81400217 	ldw	r5,8(r16)
    2a10:	8085883a 	add	r2,r16,r2
    2a14:	10c00117 	ldw	r3,4(r2)
    2a18:	29000315 	stw	r4,12(r5)
    2a1c:	21400215 	stw	r5,8(r4)
    2a20:	18c00054 	ori	r3,r3,1
    2a24:	10c00115 	stw	r3,4(r2)
    2a28:	9009883a 	mov	r4,r18
    2a2c:	000f8e40 	call	f8e4 <__malloc_unlock>
    2a30:	80800204 	addi	r2,r16,8
    2a34:	dfc00a17 	ldw	ra,40(sp)
    2a38:	df000917 	ldw	fp,36(sp)
    2a3c:	ddc00817 	ldw	r23,32(sp)
    2a40:	dd800717 	ldw	r22,28(sp)
    2a44:	dd400617 	ldw	r21,24(sp)
    2a48:	dd000517 	ldw	r20,20(sp)
    2a4c:	dcc00417 	ldw	r19,16(sp)
    2a50:	dc800317 	ldw	r18,12(sp)
    2a54:	dc400217 	ldw	r17,8(sp)
    2a58:	dc000117 	ldw	r16,4(sp)
    2a5c:	dec00b04 	addi	sp,sp,44
    2a60:	f800283a 	ret
    2a64:	04400404 	movi	r17,16
    2a68:	89407536 	bltu	r17,r5,2c40 <_malloc_r+0x2c0>
    2a6c:	000f8c40 	call	f8c4 <__malloc_lock>
    2a70:	003fd906 	br	29d8 <__alt_data_end+0xfffad2a8>
    2a74:	8806d27a 	srli	r3,r17,9
    2a78:	18007526 	beq	r3,zero,2c50 <_malloc_r+0x2d0>
    2a7c:	00800104 	movi	r2,4
    2a80:	10c0ef36 	bltu	r2,r3,2e40 <_malloc_r+0x4c0>
    2a84:	8806d1ba 	srli	r3,r17,6
    2a88:	19c00e04 	addi	r7,r3,56
    2a8c:	39cb883a 	add	r5,r7,r7
    2a90:	04c00074 	movhi	r19,1
    2a94:	294b883a 	add	r5,r5,r5
    2a98:	9cc97c04 	addi	r19,r19,9712
    2a9c:	294b883a 	add	r5,r5,r5
    2aa0:	994b883a 	add	r5,r19,r5
    2aa4:	2c000317 	ldw	r16,12(r5)
    2aa8:	2c000e26 	beq	r5,r16,2ae4 <_malloc_r+0x164>
    2aac:	80800117 	ldw	r2,4(r16)
    2ab0:	01bfff04 	movi	r6,-4
    2ab4:	010003c4 	movi	r4,15
    2ab8:	1184703a 	and	r2,r2,r6
    2abc:	1447c83a 	sub	r3,r2,r17
    2ac0:	20c00716 	blt	r4,r3,2ae0 <_malloc_r+0x160>
    2ac4:	1800650e 	bge	r3,zero,2c5c <_malloc_r+0x2dc>
    2ac8:	84000317 	ldw	r16,12(r16)
    2acc:	2c000526 	beq	r5,r16,2ae4 <_malloc_r+0x164>
    2ad0:	80800117 	ldw	r2,4(r16)
    2ad4:	1184703a 	and	r2,r2,r6
    2ad8:	1447c83a 	sub	r3,r2,r17
    2adc:	20fff90e 	bge	r4,r3,2ac4 <__alt_data_end+0xfffad394>
    2ae0:	39ffffc4 	addi	r7,r7,-1
    2ae4:	38c00044 	addi	r3,r7,1
    2ae8:	01800074 	movhi	r6,1
    2aec:	9c000417 	ldw	r16,16(r19)
    2af0:	31897c04 	addi	r6,r6,9712
    2af4:	32400204 	addi	r9,r6,8
    2af8:	82410326 	beq	r16,r9,2f08 <_malloc_r+0x588>
    2afc:	81000117 	ldw	r4,4(r16)
    2b00:	00bfff04 	movi	r2,-4
    2b04:	208e703a 	and	r7,r4,r2
    2b08:	3c45c83a 	sub	r2,r7,r17
    2b0c:	010003c4 	movi	r4,15
    2b10:	2080ee16 	blt	r4,r2,2ecc <_malloc_r+0x54c>
    2b14:	32400515 	stw	r9,20(r6)
    2b18:	32400415 	stw	r9,16(r6)
    2b1c:	1000510e 	bge	r2,zero,2c64 <_malloc_r+0x2e4>
    2b20:	00807fc4 	movi	r2,511
    2b24:	11c0ce36 	bltu	r2,r7,2e60 <_malloc_r+0x4e0>
    2b28:	3808d0fa 	srli	r4,r7,3
    2b2c:	01c00044 	movi	r7,1
    2b30:	30800117 	ldw	r2,4(r6)
    2b34:	210b883a 	add	r5,r4,r4
    2b38:	294b883a 	add	r5,r5,r5
    2b3c:	2009d0ba 	srai	r4,r4,2
    2b40:	294b883a 	add	r5,r5,r5
    2b44:	298b883a 	add	r5,r5,r6
    2b48:	2a000217 	ldw	r8,8(r5)
    2b4c:	3908983a 	sll	r4,r7,r4
    2b50:	81400315 	stw	r5,12(r16)
    2b54:	82000215 	stw	r8,8(r16)
    2b58:	2088b03a 	or	r4,r4,r2
    2b5c:	2c000215 	stw	r16,8(r5)
    2b60:	31000115 	stw	r4,4(r6)
    2b64:	44000315 	stw	r16,12(r8)
    2b68:	1805d0ba 	srai	r2,r3,2
    2b6c:	01400044 	movi	r5,1
    2b70:	288a983a 	sll	r5,r5,r2
    2b74:	21404336 	bltu	r4,r5,2c84 <_malloc_r+0x304>
    2b78:	2144703a 	and	r2,r4,r5
    2b7c:	10000a1e 	bne	r2,zero,2ba8 <_malloc_r+0x228>
    2b80:	00bfff04 	movi	r2,-4
    2b84:	294b883a 	add	r5,r5,r5
    2b88:	1886703a 	and	r3,r3,r2
    2b8c:	2144703a 	and	r2,r4,r5
    2b90:	18c00104 	addi	r3,r3,4
    2b94:	1000041e 	bne	r2,zero,2ba8 <_malloc_r+0x228>
    2b98:	294b883a 	add	r5,r5,r5
    2b9c:	2144703a 	and	r2,r4,r5
    2ba0:	18c00104 	addi	r3,r3,4
    2ba4:	103ffc26 	beq	r2,zero,2b98 <__alt_data_end+0xfffad468>
    2ba8:	023fff04 	movi	r8,-4
    2bac:	01c003c4 	movi	r7,15
    2bb0:	18c5883a 	add	r2,r3,r3
    2bb4:	1085883a 	add	r2,r2,r2
    2bb8:	1085883a 	add	r2,r2,r2
    2bbc:	9895883a 	add	r10,r19,r2
    2bc0:	52c00304 	addi	r11,r10,12
    2bc4:	1819883a 	mov	r12,r3
    2bc8:	5c000017 	ldw	r16,0(r11)
    2bcc:	59bffd04 	addi	r6,r11,-12
    2bd0:	8180041e 	bne	r16,r6,2be4 <_malloc_r+0x264>
    2bd4:	0000ce06 	br	2f10 <_malloc_r+0x590>
    2bd8:	2000d70e 	bge	r4,zero,2f38 <_malloc_r+0x5b8>
    2bdc:	84000317 	ldw	r16,12(r16)
    2be0:	8180cb26 	beq	r16,r6,2f10 <_malloc_r+0x590>
    2be4:	80800117 	ldw	r2,4(r16)
    2be8:	1204703a 	and	r2,r2,r8
    2bec:	1449c83a 	sub	r4,r2,r17
    2bf0:	393ff90e 	bge	r7,r4,2bd8 <__alt_data_end+0xfffad4a8>
    2bf4:	80800317 	ldw	r2,12(r16)
    2bf8:	80c00217 	ldw	r3,8(r16)
    2bfc:	89400054 	ori	r5,r17,1
    2c00:	81400115 	stw	r5,4(r16)
    2c04:	18800315 	stw	r2,12(r3)
    2c08:	10c00215 	stw	r3,8(r2)
    2c0c:	8463883a 	add	r17,r16,r17
    2c10:	9c400515 	stw	r17,20(r19)
    2c14:	9c400415 	stw	r17,16(r19)
    2c18:	20800054 	ori	r2,r4,1
    2c1c:	88800115 	stw	r2,4(r17)
    2c20:	8a400315 	stw	r9,12(r17)
    2c24:	8a400215 	stw	r9,8(r17)
    2c28:	8923883a 	add	r17,r17,r4
    2c2c:	89000015 	stw	r4,0(r17)
    2c30:	9009883a 	mov	r4,r18
    2c34:	000f8e40 	call	f8e4 <__malloc_unlock>
    2c38:	80800204 	addi	r2,r16,8
    2c3c:	003f7d06 	br	2a34 <__alt_data_end+0xfffad304>
    2c40:	00800304 	movi	r2,12
    2c44:	90800015 	stw	r2,0(r18)
    2c48:	0005883a 	mov	r2,zero
    2c4c:	003f7906 	br	2a34 <__alt_data_end+0xfffad304>
    2c50:	01401f84 	movi	r5,126
    2c54:	01c00fc4 	movi	r7,63
    2c58:	003f8d06 	br	2a90 <__alt_data_end+0xfffad360>
    2c5c:	81000317 	ldw	r4,12(r16)
    2c60:	003f6a06 	br	2a0c <__alt_data_end+0xfffad2dc>
    2c64:	81c5883a 	add	r2,r16,r7
    2c68:	10c00117 	ldw	r3,4(r2)
    2c6c:	9009883a 	mov	r4,r18
    2c70:	18c00054 	ori	r3,r3,1
    2c74:	10c00115 	stw	r3,4(r2)
    2c78:	000f8e40 	call	f8e4 <__malloc_unlock>
    2c7c:	80800204 	addi	r2,r16,8
    2c80:	003f6c06 	br	2a34 <__alt_data_end+0xfffad304>
    2c84:	9c000217 	ldw	r16,8(r19)
    2c88:	00bfff04 	movi	r2,-4
    2c8c:	85800117 	ldw	r22,4(r16)
    2c90:	b0ac703a 	and	r22,r22,r2
    2c94:	b4400336 	bltu	r22,r17,2ca4 <_malloc_r+0x324>
    2c98:	b445c83a 	sub	r2,r22,r17
    2c9c:	00c003c4 	movi	r3,15
    2ca0:	18805d16 	blt	r3,r2,2e18 <_malloc_r+0x498>
    2ca4:	05c00074 	movhi	r23,1
    2ca8:	00800074 	movhi	r2,1
    2cac:	bdd02704 	addi	r23,r23,16540
    2cb0:	1096fc04 	addi	r2,r2,23536
    2cb4:	15400017 	ldw	r21,0(r2)
    2cb8:	b9000017 	ldw	r4,0(r23)
    2cbc:	00ffffc4 	movi	r3,-1
    2cc0:	858d883a 	add	r6,r16,r22
    2cc4:	8d6b883a 	add	r21,r17,r21
    2cc8:	20c0e426 	beq	r4,r3,305c <_malloc_r+0x6dc>
    2ccc:	ad4403c4 	addi	r21,r21,4111
    2cd0:	00fc0004 	movi	r3,-4096
    2cd4:	a8ea703a 	and	r21,r21,r3
    2cd8:	9009883a 	mov	r4,r18
    2cdc:	a80b883a 	mov	r5,r21
    2ce0:	d9800015 	stw	r6,0(sp)
    2ce4:	000325c0 	call	325c <_sbrk_r>
    2ce8:	00ffffc4 	movi	r3,-1
    2cec:	1029883a 	mov	r20,r2
    2cf0:	d9800017 	ldw	r6,0(sp)
    2cf4:	10c0a426 	beq	r2,r3,2f88 <_malloc_r+0x608>
    2cf8:	1180a236 	bltu	r2,r6,2f84 <_malloc_r+0x604>
    2cfc:	07000074 	movhi	fp,1
    2d00:	e7170804 	addi	fp,fp,23584
    2d04:	e0c00017 	ldw	r3,0(fp)
    2d08:	a8c7883a 	add	r3,r21,r3
    2d0c:	e0c00015 	stw	r3,0(fp)
    2d10:	3500da26 	beq	r6,r20,307c <_malloc_r+0x6fc>
    2d14:	b9000017 	ldw	r4,0(r23)
    2d18:	00bfffc4 	movi	r2,-1
    2d1c:	2080e426 	beq	r4,r2,30b0 <_malloc_r+0x730>
    2d20:	a185c83a 	sub	r2,r20,r6
    2d24:	1885883a 	add	r2,r3,r2
    2d28:	e0800015 	stw	r2,0(fp)
    2d2c:	a0c001cc 	andi	r3,r20,7
    2d30:	1800b526 	beq	r3,zero,3008 <_malloc_r+0x688>
    2d34:	a0e9c83a 	sub	r20,r20,r3
    2d38:	00840204 	movi	r2,4104
    2d3c:	a5000204 	addi	r20,r20,8
    2d40:	10c7c83a 	sub	r3,r2,r3
    2d44:	a545883a 	add	r2,r20,r21
    2d48:	1083ffcc 	andi	r2,r2,4095
    2d4c:	18abc83a 	sub	r21,r3,r2
    2d50:	9009883a 	mov	r4,r18
    2d54:	a80b883a 	mov	r5,r21
    2d58:	000325c0 	call	325c <_sbrk_r>
    2d5c:	00ffffc4 	movi	r3,-1
    2d60:	10c0d026 	beq	r2,r3,30a4 <_malloc_r+0x724>
    2d64:	1507c83a 	sub	r3,r2,r20
    2d68:	a8c7883a 	add	r3,r21,r3
    2d6c:	18c00054 	ori	r3,r3,1
    2d70:	e0800017 	ldw	r2,0(fp)
    2d74:	9d000215 	stw	r20,8(r19)
    2d78:	a0c00115 	stw	r3,4(r20)
    2d7c:	a887883a 	add	r3,r21,r2
    2d80:	e0c00015 	stw	r3,0(fp)
    2d84:	84c00e26 	beq	r16,r19,2dc0 <_malloc_r+0x440>
    2d88:	018003c4 	movi	r6,15
    2d8c:	3580a02e 	bgeu	r6,r22,3010 <_malloc_r+0x690>
    2d90:	81400117 	ldw	r5,4(r16)
    2d94:	013ffe04 	movi	r4,-8
    2d98:	b0bffd04 	addi	r2,r22,-12
    2d9c:	1104703a 	and	r2,r2,r4
    2da0:	2900004c 	andi	r4,r5,1
    2da4:	1108b03a 	or	r4,r2,r4
    2da8:	81000115 	stw	r4,4(r16)
    2dac:	01400144 	movi	r5,5
    2db0:	8089883a 	add	r4,r16,r2
    2db4:	21400115 	stw	r5,4(r4)
    2db8:	21400215 	stw	r5,8(r4)
    2dbc:	3080c036 	bltu	r6,r2,30c0 <_malloc_r+0x740>
    2dc0:	00800074 	movhi	r2,1
    2dc4:	1096fb04 	addi	r2,r2,23532
    2dc8:	11000017 	ldw	r4,0(r2)
    2dcc:	20c0012e 	bgeu	r4,r3,2dd4 <_malloc_r+0x454>
    2dd0:	10c00015 	stw	r3,0(r2)
    2dd4:	00800074 	movhi	r2,1
    2dd8:	1096fa04 	addi	r2,r2,23528
    2ddc:	11000017 	ldw	r4,0(r2)
    2de0:	9c000217 	ldw	r16,8(r19)
    2de4:	20c0012e 	bgeu	r4,r3,2dec <_malloc_r+0x46c>
    2de8:	10c00015 	stw	r3,0(r2)
    2dec:	80c00117 	ldw	r3,4(r16)
    2df0:	00bfff04 	movi	r2,-4
    2df4:	1886703a 	and	r3,r3,r2
    2df8:	1c45c83a 	sub	r2,r3,r17
    2dfc:	1c400236 	bltu	r3,r17,2e08 <_malloc_r+0x488>
    2e00:	00c003c4 	movi	r3,15
    2e04:	18800416 	blt	r3,r2,2e18 <_malloc_r+0x498>
    2e08:	9009883a 	mov	r4,r18
    2e0c:	000f8e40 	call	f8e4 <__malloc_unlock>
    2e10:	0005883a 	mov	r2,zero
    2e14:	003f0706 	br	2a34 <__alt_data_end+0xfffad304>
    2e18:	88c00054 	ori	r3,r17,1
    2e1c:	80c00115 	stw	r3,4(r16)
    2e20:	8463883a 	add	r17,r16,r17
    2e24:	10800054 	ori	r2,r2,1
    2e28:	9c400215 	stw	r17,8(r19)
    2e2c:	88800115 	stw	r2,4(r17)
    2e30:	9009883a 	mov	r4,r18
    2e34:	000f8e40 	call	f8e4 <__malloc_unlock>
    2e38:	80800204 	addi	r2,r16,8
    2e3c:	003efd06 	br	2a34 <__alt_data_end+0xfffad304>
    2e40:	00800504 	movi	r2,20
    2e44:	10c0482e 	bgeu	r2,r3,2f68 <_malloc_r+0x5e8>
    2e48:	00801504 	movi	r2,84
    2e4c:	10c06836 	bltu	r2,r3,2ff0 <_malloc_r+0x670>
    2e50:	8806d33a 	srli	r3,r17,12
    2e54:	19c01b84 	addi	r7,r3,110
    2e58:	39cb883a 	add	r5,r7,r7
    2e5c:	003f0c06 	br	2a90 <__alt_data_end+0xfffad360>
    2e60:	3804d27a 	srli	r2,r7,9
    2e64:	01000104 	movi	r4,4
    2e68:	2080422e 	bgeu	r4,r2,2f74 <_malloc_r+0x5f4>
    2e6c:	01000504 	movi	r4,20
    2e70:	20807c36 	bltu	r4,r2,3064 <_malloc_r+0x6e4>
    2e74:	110016c4 	addi	r4,r2,91
    2e78:	210b883a 	add	r5,r4,r4
    2e7c:	294b883a 	add	r5,r5,r5
    2e80:	294b883a 	add	r5,r5,r5
    2e84:	994b883a 	add	r5,r19,r5
    2e88:	28800217 	ldw	r2,8(r5)
    2e8c:	02000074 	movhi	r8,1
    2e90:	42097c04 	addi	r8,r8,9712
    2e94:	11406326 	beq	r2,r5,3024 <_malloc_r+0x6a4>
    2e98:	01bfff04 	movi	r6,-4
    2e9c:	11000117 	ldw	r4,4(r2)
    2ea0:	2188703a 	and	r4,r4,r6
    2ea4:	3900022e 	bgeu	r7,r4,2eb0 <_malloc_r+0x530>
    2ea8:	10800217 	ldw	r2,8(r2)
    2eac:	28bffb1e 	bne	r5,r2,2e9c <__alt_data_end+0xfffad76c>
    2eb0:	11800317 	ldw	r6,12(r2)
    2eb4:	99000117 	ldw	r4,4(r19)
    2eb8:	81800315 	stw	r6,12(r16)
    2ebc:	80800215 	stw	r2,8(r16)
    2ec0:	34000215 	stw	r16,8(r6)
    2ec4:	14000315 	stw	r16,12(r2)
    2ec8:	003f2706 	br	2b68 <__alt_data_end+0xfffad438>
    2ecc:	88c00054 	ori	r3,r17,1
    2ed0:	80c00115 	stw	r3,4(r16)
    2ed4:	8463883a 	add	r17,r16,r17
    2ed8:	34400515 	stw	r17,20(r6)
    2edc:	34400415 	stw	r17,16(r6)
    2ee0:	10c00054 	ori	r3,r2,1
    2ee4:	8a400315 	stw	r9,12(r17)
    2ee8:	8a400215 	stw	r9,8(r17)
    2eec:	88c00115 	stw	r3,4(r17)
    2ef0:	88a3883a 	add	r17,r17,r2
    2ef4:	88800015 	stw	r2,0(r17)
    2ef8:	9009883a 	mov	r4,r18
    2efc:	000f8e40 	call	f8e4 <__malloc_unlock>
    2f00:	80800204 	addi	r2,r16,8
    2f04:	003ecb06 	br	2a34 <__alt_data_end+0xfffad304>
    2f08:	31000117 	ldw	r4,4(r6)
    2f0c:	003f1606 	br	2b68 <__alt_data_end+0xfffad438>
    2f10:	63000044 	addi	r12,r12,1
    2f14:	608000cc 	andi	r2,r12,3
    2f18:	5ac00204 	addi	r11,r11,8
    2f1c:	103f2a1e 	bne	r2,zero,2bc8 <__alt_data_end+0xfffad498>
    2f20:	00002106 	br	2fa8 <_malloc_r+0x628>
    2f24:	80800204 	addi	r2,r16,8
    2f28:	84000517 	ldw	r16,20(r16)
    2f2c:	143eb31e 	bne	r2,r16,29fc <__alt_data_end+0xfffad2cc>
    2f30:	18c00084 	addi	r3,r3,2
    2f34:	003eec06 	br	2ae8 <__alt_data_end+0xfffad3b8>
    2f38:	8085883a 	add	r2,r16,r2
    2f3c:	10c00117 	ldw	r3,4(r2)
    2f40:	81000317 	ldw	r4,12(r16)
    2f44:	81400217 	ldw	r5,8(r16)
    2f48:	18c00054 	ori	r3,r3,1
    2f4c:	10c00115 	stw	r3,4(r2)
    2f50:	29000315 	stw	r4,12(r5)
    2f54:	21400215 	stw	r5,8(r4)
    2f58:	9009883a 	mov	r4,r18
    2f5c:	000f8e40 	call	f8e4 <__malloc_unlock>
    2f60:	80800204 	addi	r2,r16,8
    2f64:	003eb306 	br	2a34 <__alt_data_end+0xfffad304>
    2f68:	19c016c4 	addi	r7,r3,91
    2f6c:	39cb883a 	add	r5,r7,r7
    2f70:	003ec706 	br	2a90 <__alt_data_end+0xfffad360>
    2f74:	3804d1ba 	srli	r2,r7,6
    2f78:	11000e04 	addi	r4,r2,56
    2f7c:	210b883a 	add	r5,r4,r4
    2f80:	003fbe06 	br	2e7c <__alt_data_end+0xfffad74c>
    2f84:	84ff5d26 	beq	r16,r19,2cfc <__alt_data_end+0xfffad5cc>
    2f88:	9c000217 	ldw	r16,8(r19)
    2f8c:	00bfff04 	movi	r2,-4
    2f90:	80c00117 	ldw	r3,4(r16)
    2f94:	1886703a 	and	r3,r3,r2
    2f98:	003f9706 	br	2df8 <__alt_data_end+0xfffad6c8>
    2f9c:	52800017 	ldw	r10,0(r10)
    2fa0:	18ffffc4 	addi	r3,r3,-1
    2fa4:	50805c1e 	bne	r10,r2,3118 <_malloc_r+0x798>
    2fa8:	190000cc 	andi	r4,r3,3
    2fac:	50bffe04 	addi	r2,r10,-8
    2fb0:	203ffa1e 	bne	r4,zero,2f9c <__alt_data_end+0xfffad86c>
    2fb4:	98800117 	ldw	r2,4(r19)
    2fb8:	0146303a 	nor	r3,zero,r5
    2fbc:	1884703a 	and	r2,r3,r2
    2fc0:	98800115 	stw	r2,4(r19)
    2fc4:	294b883a 	add	r5,r5,r5
    2fc8:	117f2e36 	bltu	r2,r5,2c84 <__alt_data_end+0xfffad554>
    2fcc:	283f2d26 	beq	r5,zero,2c84 <__alt_data_end+0xfffad554>
    2fd0:	1146703a 	and	r3,r2,r5
    2fd4:	1800521e 	bne	r3,zero,3120 <_malloc_r+0x7a0>
    2fd8:	6007883a 	mov	r3,r12
    2fdc:	294b883a 	add	r5,r5,r5
    2fe0:	1148703a 	and	r4,r2,r5
    2fe4:	18c00104 	addi	r3,r3,4
    2fe8:	203ffc26 	beq	r4,zero,2fdc <__alt_data_end+0xfffad8ac>
    2fec:	003ef006 	br	2bb0 <__alt_data_end+0xfffad480>
    2ff0:	00805504 	movi	r2,340
    2ff4:	10c01336 	bltu	r2,r3,3044 <_malloc_r+0x6c4>
    2ff8:	8806d3fa 	srli	r3,r17,15
    2ffc:	19c01dc4 	addi	r7,r3,119
    3000:	39cb883a 	add	r5,r7,r7
    3004:	003ea206 	br	2a90 <__alt_data_end+0xfffad360>
    3008:	00c40004 	movi	r3,4096
    300c:	003f4d06 	br	2d44 <__alt_data_end+0xfffad614>
    3010:	00800044 	movi	r2,1
    3014:	a0800115 	stw	r2,4(r20)
    3018:	a021883a 	mov	r16,r20
    301c:	0007883a 	mov	r3,zero
    3020:	003f7506 	br	2df8 <__alt_data_end+0xfffad6c8>
    3024:	200bd0ba 	srai	r5,r4,2
    3028:	01800044 	movi	r6,1
    302c:	41000117 	ldw	r4,4(r8)
    3030:	314a983a 	sll	r5,r6,r5
    3034:	100d883a 	mov	r6,r2
    3038:	2908b03a 	or	r4,r5,r4
    303c:	41000115 	stw	r4,4(r8)
    3040:	003f9d06 	br	2eb8 <__alt_data_end+0xfffad788>
    3044:	00815504 	movi	r2,1364
    3048:	10c01336 	bltu	r2,r3,3098 <_malloc_r+0x718>
    304c:	8806d4ba 	srli	r3,r17,18
    3050:	19c01f04 	addi	r7,r3,124
    3054:	39cb883a 	add	r5,r7,r7
    3058:	003e8d06 	br	2a90 <__alt_data_end+0xfffad360>
    305c:	ad400404 	addi	r21,r21,16
    3060:	003f1d06 	br	2cd8 <__alt_data_end+0xfffad5a8>
    3064:	01001504 	movi	r4,84
    3068:	20801c36 	bltu	r4,r2,30dc <_malloc_r+0x75c>
    306c:	3804d33a 	srli	r2,r7,12
    3070:	11001b84 	addi	r4,r2,110
    3074:	210b883a 	add	r5,r4,r4
    3078:	003f8006 	br	2e7c <__alt_data_end+0xfffad74c>
    307c:	3083ffcc 	andi	r2,r6,4095
    3080:	103f241e 	bne	r2,zero,2d14 <__alt_data_end+0xfffad5e4>
    3084:	99000217 	ldw	r4,8(r19)
    3088:	ad85883a 	add	r2,r21,r22
    308c:	10800054 	ori	r2,r2,1
    3090:	20800115 	stw	r2,4(r4)
    3094:	003f4a06 	br	2dc0 <__alt_data_end+0xfffad690>
    3098:	01403f04 	movi	r5,252
    309c:	01c01f84 	movi	r7,126
    30a0:	003e7b06 	br	2a90 <__alt_data_end+0xfffad360>
    30a4:	00c00044 	movi	r3,1
    30a8:	002b883a 	mov	r21,zero
    30ac:	003f3006 	br	2d70 <__alt_data_end+0xfffad640>
    30b0:	00800074 	movhi	r2,1
    30b4:	10902704 	addi	r2,r2,16540
    30b8:	15000015 	stw	r20,0(r2)
    30bc:	003f1b06 	br	2d2c <__alt_data_end+0xfffad5fc>
    30c0:	9009883a 	mov	r4,r18
    30c4:	81400204 	addi	r5,r16,8
    30c8:	00076180 	call	7618 <_free_r>
    30cc:	00800074 	movhi	r2,1
    30d0:	10970804 	addi	r2,r2,23584
    30d4:	10c00017 	ldw	r3,0(r2)
    30d8:	003f3906 	br	2dc0 <__alt_data_end+0xfffad690>
    30dc:	01005504 	movi	r4,340
    30e0:	20800436 	bltu	r4,r2,30f4 <_malloc_r+0x774>
    30e4:	3804d3fa 	srli	r2,r7,15
    30e8:	11001dc4 	addi	r4,r2,119
    30ec:	210b883a 	add	r5,r4,r4
    30f0:	003f6206 	br	2e7c <__alt_data_end+0xfffad74c>
    30f4:	01015504 	movi	r4,1364
    30f8:	20800436 	bltu	r4,r2,310c <_malloc_r+0x78c>
    30fc:	3804d4ba 	srli	r2,r7,18
    3100:	11001f04 	addi	r4,r2,124
    3104:	210b883a 	add	r5,r4,r4
    3108:	003f5c06 	br	2e7c <__alt_data_end+0xfffad74c>
    310c:	01403f04 	movi	r5,252
    3110:	01001f84 	movi	r4,126
    3114:	003f5906 	br	2e7c <__alt_data_end+0xfffad74c>
    3118:	98800117 	ldw	r2,4(r19)
    311c:	003fa906 	br	2fc4 <__alt_data_end+0xfffad894>
    3120:	6007883a 	mov	r3,r12
    3124:	003ea206 	br	2bb0 <__alt_data_end+0xfffad480>

00003128 <_printf_r>:
    3128:	defffd04 	addi	sp,sp,-12
    312c:	dfc00015 	stw	ra,0(sp)
    3130:	d9800115 	stw	r6,4(sp)
    3134:	d9c00215 	stw	r7,8(sp)
    3138:	280d883a 	mov	r6,r5
    313c:	21400217 	ldw	r5,8(r4)
    3140:	d9c00104 	addi	r7,sp,4
    3144:	00033480 	call	3348 <___vfprintf_internal_r>
    3148:	dfc00017 	ldw	ra,0(sp)
    314c:	dec00304 	addi	sp,sp,12
    3150:	f800283a 	ret

00003154 <printf>:
    3154:	defffc04 	addi	sp,sp,-16
    3158:	dfc00015 	stw	ra,0(sp)
    315c:	d9400115 	stw	r5,4(sp)
    3160:	d9800215 	stw	r6,8(sp)
    3164:	d9c00315 	stw	r7,12(sp)
    3168:	00800074 	movhi	r2,1
    316c:	10902a04 	addi	r2,r2,16552
    3170:	10800017 	ldw	r2,0(r2)
    3174:	200b883a 	mov	r5,r4
    3178:	d9800104 	addi	r6,sp,4
    317c:	11000217 	ldw	r4,8(r2)
    3180:	00054440 	call	5444 <__vfprintf_internal>
    3184:	dfc00017 	ldw	ra,0(sp)
    3188:	dec00404 	addi	sp,sp,16
    318c:	f800283a 	ret

00003190 <_puts_r>:
    3190:	defff604 	addi	sp,sp,-40
    3194:	dc000715 	stw	r16,28(sp)
    3198:	2021883a 	mov	r16,r4
    319c:	2809883a 	mov	r4,r5
    31a0:	dc400815 	stw	r17,32(sp)
    31a4:	dfc00915 	stw	ra,36(sp)
    31a8:	2823883a 	mov	r17,r5
    31ac:	00032b00 	call	32b0 <strlen>
    31b0:	00c00074 	movhi	r3,1
    31b4:	18d02a04 	addi	r3,r3,16552
    31b8:	18c00017 	ldw	r3,0(r3)
    31bc:	11000044 	addi	r4,r2,1
    31c0:	d8800115 	stw	r2,4(sp)
    31c4:	18c00217 	ldw	r3,8(r3)
    31c8:	01400074 	movhi	r5,1
    31cc:	2948bc04 	addi	r5,r5,8944
    31d0:	1880030b 	ldhu	r2,12(r3)
    31d4:	d9400215 	stw	r5,8(sp)
    31d8:	d9000615 	stw	r4,24(sp)
    31dc:	01400044 	movi	r5,1
    31e0:	01000084 	movi	r4,2
    31e4:	d9000515 	stw	r4,20(sp)
    31e8:	dc400015 	stw	r17,0(sp)
    31ec:	d9400315 	stw	r5,12(sp)
    31f0:	dec00415 	stw	sp,16(sp)
    31f4:	1108000c 	andi	r4,r2,8192
    31f8:	2000061e 	bne	r4,zero,3214 <_puts_r+0x84>
    31fc:	19401917 	ldw	r5,100(r3)
    3200:	0137ffc4 	movi	r4,-8193
    3204:	10880014 	ori	r2,r2,8192
    3208:	2908703a 	and	r4,r5,r4
    320c:	1880030d 	sth	r2,12(r3)
    3210:	19001915 	stw	r4,100(r3)
    3214:	81400217 	ldw	r5,8(r16)
    3218:	8009883a 	mov	r4,r16
    321c:	d9800404 	addi	r6,sp,16
    3220:	00079080 	call	7908 <__sfvwrite_r>
    3224:	1000061e 	bne	r2,zero,3240 <_puts_r+0xb0>
    3228:	00800284 	movi	r2,10
    322c:	dfc00917 	ldw	ra,36(sp)
    3230:	dc400817 	ldw	r17,32(sp)
    3234:	dc000717 	ldw	r16,28(sp)
    3238:	dec00a04 	addi	sp,sp,40
    323c:	f800283a 	ret
    3240:	00bfffc4 	movi	r2,-1
    3244:	003ff906 	br	322c <__alt_data_end+0xfffadafc>

00003248 <puts>:
    3248:	00800074 	movhi	r2,1
    324c:	10902a04 	addi	r2,r2,16552
    3250:	200b883a 	mov	r5,r4
    3254:	11000017 	ldw	r4,0(r2)
    3258:	00031901 	jmpi	3190 <_puts_r>

0000325c <_sbrk_r>:
    325c:	defffd04 	addi	sp,sp,-12
    3260:	dc000015 	stw	r16,0(sp)
    3264:	04000074 	movhi	r16,1
    3268:	dc400115 	stw	r17,4(sp)
    326c:	8416fd04 	addi	r16,r16,23540
    3270:	2023883a 	mov	r17,r4
    3274:	2809883a 	mov	r4,r5
    3278:	dfc00215 	stw	ra,8(sp)
    327c:	80000015 	stw	zero,0(r16)
    3280:	000fad80 	call	fad8 <sbrk>
    3284:	00ffffc4 	movi	r3,-1
    3288:	10c00526 	beq	r2,r3,32a0 <_sbrk_r+0x44>
    328c:	dfc00217 	ldw	ra,8(sp)
    3290:	dc400117 	ldw	r17,4(sp)
    3294:	dc000017 	ldw	r16,0(sp)
    3298:	dec00304 	addi	sp,sp,12
    329c:	f800283a 	ret
    32a0:	80c00017 	ldw	r3,0(r16)
    32a4:	183ff926 	beq	r3,zero,328c <__alt_data_end+0xfffadb5c>
    32a8:	88c00015 	stw	r3,0(r17)
    32ac:	003ff706 	br	328c <__alt_data_end+0xfffadb5c>

000032b0 <strlen>:
    32b0:	208000cc 	andi	r2,r4,3
    32b4:	10002026 	beq	r2,zero,3338 <strlen+0x88>
    32b8:	20800007 	ldb	r2,0(r4)
    32bc:	10002026 	beq	r2,zero,3340 <strlen+0x90>
    32c0:	2005883a 	mov	r2,r4
    32c4:	00000206 	br	32d0 <strlen+0x20>
    32c8:	10c00007 	ldb	r3,0(r2)
    32cc:	18001826 	beq	r3,zero,3330 <strlen+0x80>
    32d0:	10800044 	addi	r2,r2,1
    32d4:	10c000cc 	andi	r3,r2,3
    32d8:	183ffb1e 	bne	r3,zero,32c8 <__alt_data_end+0xfffadb98>
    32dc:	10c00017 	ldw	r3,0(r2)
    32e0:	01ffbff4 	movhi	r7,65279
    32e4:	39ffbfc4 	addi	r7,r7,-257
    32e8:	00ca303a 	nor	r5,zero,r3
    32ec:	01a02074 	movhi	r6,32897
    32f0:	19c7883a 	add	r3,r3,r7
    32f4:	31a02004 	addi	r6,r6,-32640
    32f8:	1946703a 	and	r3,r3,r5
    32fc:	1986703a 	and	r3,r3,r6
    3300:	1800091e 	bne	r3,zero,3328 <strlen+0x78>
    3304:	10800104 	addi	r2,r2,4
    3308:	10c00017 	ldw	r3,0(r2)
    330c:	19cb883a 	add	r5,r3,r7
    3310:	00c6303a 	nor	r3,zero,r3
    3314:	28c6703a 	and	r3,r5,r3
    3318:	1986703a 	and	r3,r3,r6
    331c:	183ff926 	beq	r3,zero,3304 <__alt_data_end+0xfffadbd4>
    3320:	00000106 	br	3328 <strlen+0x78>
    3324:	10800044 	addi	r2,r2,1
    3328:	10c00007 	ldb	r3,0(r2)
    332c:	183ffd1e 	bne	r3,zero,3324 <__alt_data_end+0xfffadbf4>
    3330:	1105c83a 	sub	r2,r2,r4
    3334:	f800283a 	ret
    3338:	2005883a 	mov	r2,r4
    333c:	003fe706 	br	32dc <__alt_data_end+0xfffadbac>
    3340:	0005883a 	mov	r2,zero
    3344:	f800283a 	ret

00003348 <___vfprintf_internal_r>:
    3348:	defeb604 	addi	sp,sp,-1320
    334c:	dfc14915 	stw	ra,1316(sp)
    3350:	ddc14715 	stw	r23,1308(sp)
    3354:	dd814615 	stw	r22,1304(sp)
    3358:	202f883a 	mov	r23,r4
    335c:	282d883a 	mov	r22,r5
    3360:	d9812a15 	stw	r6,1192(sp)
    3364:	d9c12d15 	stw	r7,1204(sp)
    3368:	df014815 	stw	fp,1312(sp)
    336c:	dd414515 	stw	r21,1300(sp)
    3370:	dd014415 	stw	r20,1296(sp)
    3374:	dcc14315 	stw	r19,1292(sp)
    3378:	dc814215 	stw	r18,1288(sp)
    337c:	dc414115 	stw	r17,1284(sp)
    3380:	dc014015 	stw	r16,1280(sp)
    3384:	0007fc80 	call	7fc8 <_localeconv_r>
    3388:	10800017 	ldw	r2,0(r2)
    338c:	1009883a 	mov	r4,r2
    3390:	d8813515 	stw	r2,1236(sp)
    3394:	00032b00 	call	32b0 <strlen>
    3398:	d8813815 	stw	r2,1248(sp)
    339c:	b8000226 	beq	r23,zero,33a8 <___vfprintf_internal_r+0x60>
    33a0:	b8800e17 	ldw	r2,56(r23)
    33a4:	10010526 	beq	r2,zero,37bc <___vfprintf_internal_r+0x474>
    33a8:	b0c0030b 	ldhu	r3,12(r22)
    33ac:	1908000c 	andi	r4,r3,8192
    33b0:	1805883a 	mov	r2,r3
    33b4:	2000071e 	bne	r4,zero,33d4 <___vfprintf_internal_r+0x8c>
    33b8:	b1001917 	ldw	r4,100(r22)
    33bc:	18880014 	ori	r2,r3,8192
    33c0:	00f7ffc4 	movi	r3,-8193
    33c4:	20c8703a 	and	r4,r4,r3
    33c8:	b080030d 	sth	r2,12(r22)
    33cc:	1007883a 	mov	r3,r2
    33d0:	b1001915 	stw	r4,100(r22)
    33d4:	1100020c 	andi	r4,r2,8
    33d8:	2000a826 	beq	r4,zero,367c <___vfprintf_internal_r+0x334>
    33dc:	b1000417 	ldw	r4,16(r22)
    33e0:	2000a626 	beq	r4,zero,367c <___vfprintf_internal_r+0x334>
    33e4:	1080068c 	andi	r2,r2,26
    33e8:	01000284 	movi	r4,10
    33ec:	1100ac26 	beq	r2,r4,36a0 <___vfprintf_internal_r+0x358>
    33f0:	d8c10e04 	addi	r3,sp,1080
    33f4:	d9010dc4 	addi	r4,sp,1079
    33f8:	d9400404 	addi	r5,sp,16
    33fc:	05000074 	movhi	r20,1
    3400:	1905c83a 	sub	r2,r3,r4
    3404:	a508cd84 	addi	r20,r20,9014
    3408:	d8c12815 	stw	r3,1184(sp)
    340c:	d9012915 	stw	r4,1188(sp)
    3410:	d9411e15 	stw	r5,1144(sp)
    3414:	d8012015 	stw	zero,1152(sp)
    3418:	d8011f15 	stw	zero,1148(sp)
    341c:	d8013315 	stw	zero,1228(sp)
    3420:	d8013715 	stw	zero,1244(sp)
    3424:	d8013915 	stw	zero,1252(sp)
    3428:	d8013b15 	stw	zero,1260(sp)
    342c:	d8013a15 	stw	zero,1256(sp)
    3430:	d8012f15 	stw	zero,1212(sp)
    3434:	2811883a 	mov	r8,r5
    3438:	d8813c15 	stw	r2,1264(sp)
    343c:	d8c12a17 	ldw	r3,1192(sp)
    3440:	18800007 	ldb	r2,0(r3)
    3444:	10021326 	beq	r2,zero,3c94 <___vfprintf_internal_r+0x94c>
    3448:	00c00944 	movi	r3,37
    344c:	dc012a17 	ldw	r16,1192(sp)
    3450:	10c0021e 	bne	r2,r3,345c <___vfprintf_internal_r+0x114>
    3454:	00001606 	br	34b0 <___vfprintf_internal_r+0x168>
    3458:	10c08526 	beq	r2,r3,3670 <___vfprintf_internal_r+0x328>
    345c:	84000044 	addi	r16,r16,1
    3460:	80800007 	ldb	r2,0(r16)
    3464:	103ffc1e 	bne	r2,zero,3458 <__alt_data_end+0xfffadd28>
    3468:	d9012a17 	ldw	r4,1192(sp)
    346c:	8123c83a 	sub	r17,r16,r4
    3470:	88000f26 	beq	r17,zero,34b0 <___vfprintf_internal_r+0x168>
    3474:	d8812a17 	ldw	r2,1192(sp)
    3478:	d8c12017 	ldw	r3,1152(sp)
    347c:	44400115 	stw	r17,4(r8)
    3480:	40800015 	stw	r2,0(r8)
    3484:	d8811f17 	ldw	r2,1148(sp)
    3488:	1c47883a 	add	r3,r3,r17
    348c:	d8c12015 	stw	r3,1152(sp)
    3490:	10800044 	addi	r2,r2,1
    3494:	d8811f15 	stw	r2,1148(sp)
    3498:	00c001c4 	movi	r3,7
    349c:	1880b516 	blt	r3,r2,3774 <___vfprintf_internal_r+0x42c>
    34a0:	42000204 	addi	r8,r8,8
    34a4:	d8c12f17 	ldw	r3,1212(sp)
    34a8:	1c47883a 	add	r3,r3,r17
    34ac:	d8c12f15 	stw	r3,1212(sp)
    34b0:	80800007 	ldb	r2,0(r16)
    34b4:	1000b626 	beq	r2,zero,3790 <___vfprintf_internal_r+0x448>
    34b8:	80800044 	addi	r2,r16,1
    34bc:	84000047 	ldb	r16,1(r16)
    34c0:	0027883a 	mov	r19,zero
    34c4:	0039883a 	mov	fp,zero
    34c8:	dcc12b05 	stb	r19,1196(sp)
    34cc:	d8012785 	stb	zero,1182(sp)
    34d0:	027fffc4 	movi	r9,-1
    34d4:	d8012e15 	stw	zero,1208(sp)
    34d8:	04401604 	movi	r17,88
    34dc:	04800244 	movi	r18,9
    34e0:	da012a15 	stw	r8,1192(sp)
    34e4:	e027883a 	mov	r19,fp
    34e8:	17000044 	addi	fp,r2,1
    34ec:	80bff804 	addi	r2,r16,-32
    34f0:	88831236 	bltu	r17,r2,413c <___vfprintf_internal_r+0xdf4>
    34f4:	100490ba 	slli	r2,r2,2
    34f8:	01000034 	movhi	r4,0
    34fc:	210d4304 	addi	r4,r4,13580
    3500:	1105883a 	add	r2,r2,r4
    3504:	10800017 	ldw	r2,0(r2)
    3508:	1000683a 	jmp	r2
    350c:	00004058 	cmpnei	zero,zero,257
    3510:	0000413c 	xorhi	zero,zero,260
    3514:	0000413c 	xorhi	zero,zero,260
    3518:	00004074 	movhi	zero,257
    351c:	0000413c 	xorhi	zero,zero,260
    3520:	0000413c 	xorhi	zero,zero,260
    3524:	0000413c 	xorhi	zero,zero,260
    3528:	0000413c 	xorhi	zero,zero,260
    352c:	0000413c 	xorhi	zero,zero,260
    3530:	0000413c 	xorhi	zero,zero,260
    3534:	00004084 	movi	zero,258
    3538:	000040ac 	andhi	zero,zero,258
    353c:	0000413c 	xorhi	zero,zero,260
    3540:	000037c8 	cmpgei	zero,zero,223
    3544:	000037d8 	cmpnei	zero,zero,223
    3548:	0000413c 	xorhi	zero,zero,260
    354c:	00003828 	cmpgeui	zero,zero,224
    3550:	00003838 	rdprs	zero,zero,224
    3554:	00003838 	rdprs	zero,zero,224
    3558:	00003838 	rdprs	zero,zero,224
    355c:	00003838 	rdprs	zero,zero,224
    3560:	00003838 	rdprs	zero,zero,224
    3564:	00003838 	rdprs	zero,zero,224
    3568:	00003838 	rdprs	zero,zero,224
    356c:	00003838 	rdprs	zero,zero,224
    3570:	00003838 	rdprs	zero,zero,224
    3574:	0000413c 	xorhi	zero,zero,260
    3578:	0000413c 	xorhi	zero,zero,260
    357c:	0000413c 	xorhi	zero,zero,260
    3580:	0000413c 	xorhi	zero,zero,260
    3584:	0000413c 	xorhi	zero,zero,260
    3588:	0000413c 	xorhi	zero,zero,260
    358c:	0000413c 	xorhi	zero,zero,260
    3590:	0000413c 	xorhi	zero,zero,260
    3594:	0000413c 	xorhi	zero,zero,260
    3598:	0000413c 	xorhi	zero,zero,260
    359c:	0000387c 	xorhi	zero,zero,225
    35a0:	00003c9c 	xori	zero,zero,242
    35a4:	0000413c 	xorhi	zero,zero,260
    35a8:	00003c9c 	xori	zero,zero,242
    35ac:	0000413c 	xorhi	zero,zero,260
    35b0:	0000413c 	xorhi	zero,zero,260
    35b4:	0000413c 	xorhi	zero,zero,260
    35b8:	0000413c 	xorhi	zero,zero,260
    35bc:	00003d44 	movi	zero,245
    35c0:	0000413c 	xorhi	zero,zero,260
    35c4:	0000413c 	xorhi	zero,zero,260
    35c8:	00003d54 	movui	zero,245
    35cc:	0000413c 	xorhi	zero,zero,260
    35d0:	0000413c 	xorhi	zero,zero,260
    35d4:	0000413c 	xorhi	zero,zero,260
    35d8:	0000413c 	xorhi	zero,zero,260
    35dc:	0000413c 	xorhi	zero,zero,260
    35e0:	00003d98 	cmpnei	zero,zero,246
    35e4:	0000413c 	xorhi	zero,zero,260
    35e8:	0000413c 	xorhi	zero,zero,260
    35ec:	00003dd0 	cmplti	zero,zero,247
    35f0:	0000413c 	xorhi	zero,zero,260
    35f4:	0000413c 	xorhi	zero,zero,260
    35f8:	0000413c 	xorhi	zero,zero,260
    35fc:	0000413c 	xorhi	zero,zero,260
    3600:	0000413c 	xorhi	zero,zero,260
    3604:	0000413c 	xorhi	zero,zero,260
    3608:	0000413c 	xorhi	zero,zero,260
    360c:	0000413c 	xorhi	zero,zero,260
    3610:	0000413c 	xorhi	zero,zero,260
    3614:	0000413c 	xorhi	zero,zero,260
    3618:	0000400c 	andi	zero,zero,256
    361c:	00003fb8 	rdprs	zero,zero,254
    3620:	00003c9c 	xori	zero,zero,242
    3624:	00003c9c 	xori	zero,zero,242
    3628:	00003c9c 	xori	zero,zero,242
    362c:	00003ffc 	xorhi	zero,zero,255
    3630:	00003fb8 	rdprs	zero,zero,254
    3634:	0000413c 	xorhi	zero,zero,260
    3638:	0000413c 	xorhi	zero,zero,260
    363c:	00003ed4 	movui	zero,251
    3640:	0000413c 	xorhi	zero,zero,260
    3644:	00003eec 	andhi	zero,zero,251
    3648:	00003f2c 	andhi	zero,zero,252
    364c:	00003f6c 	andhi	zero,zero,253
    3650:	00003e38 	rdprs	zero,zero,248
    3654:	0000413c 	xorhi	zero,zero,260
    3658:	000040c0 	call	40c <get_keycode+0x78>
    365c:	0000413c 	xorhi	zero,zero,260
    3660:	00003e48 	cmpgei	zero,zero,249
    3664:	0000413c 	xorhi	zero,zero,260
    3668:	0000413c 	xorhi	zero,zero,260
    366c:	00003e88 	cmpgei	zero,zero,250
    3670:	d9412a17 	ldw	r5,1192(sp)
    3674:	8163c83a 	sub	r17,r16,r5
    3678:	003f7d06 	br	3470 <__alt_data_end+0xfffadd40>
    367c:	b809883a 	mov	r4,r23
    3680:	b00b883a 	mov	r5,r22
    3684:	00054680 	call	5468 <__swsetup_r>
    3688:	10002d1e 	bne	r2,zero,3740 <___vfprintf_internal_r+0x3f8>
    368c:	b0c0030b 	ldhu	r3,12(r22)
    3690:	01000284 	movi	r4,10
    3694:	1805883a 	mov	r2,r3
    3698:	1080068c 	andi	r2,r2,26
    369c:	113f541e 	bne	r2,r4,33f0 <__alt_data_end+0xfffadcc0>
    36a0:	b080038b 	ldhu	r2,14(r22)
    36a4:	113fffcc 	andi	r4,r2,65535
    36a8:	2120001c 	xori	r4,r4,32768
    36ac:	21200004 	addi	r4,r4,-32768
    36b0:	203f4f16 	blt	r4,zero,33f0 <__alt_data_end+0xfffadcc0>
    36b4:	b2c01917 	ldw	r11,100(r22)
    36b8:	b2800717 	ldw	r10,28(r22)
    36bc:	b2400917 	ldw	r9,36(r22)
    36c0:	d9812a17 	ldw	r6,1192(sp)
    36c4:	d9c12d17 	ldw	r7,1204(sp)
    36c8:	02010004 	movi	r8,1024
    36cc:	18ffff4c 	andi	r3,r3,65533
    36d0:	d881078d 	sth	r2,1054(sp)
    36d4:	b809883a 	mov	r4,r23
    36d8:	d8800404 	addi	r2,sp,16
    36dc:	d9410404 	addi	r5,sp,1040
    36e0:	d8c1070d 	sth	r3,1052(sp)
    36e4:	dac11d15 	stw	r11,1140(sp)
    36e8:	da810b15 	stw	r10,1068(sp)
    36ec:	da410d15 	stw	r9,1076(sp)
    36f0:	d8810415 	stw	r2,1040(sp)
    36f4:	d8810815 	stw	r2,1056(sp)
    36f8:	da010615 	stw	r8,1048(sp)
    36fc:	da010915 	stw	r8,1060(sp)
    3700:	d8010a15 	stw	zero,1064(sp)
    3704:	00033480 	call	3348 <___vfprintf_internal_r>
    3708:	1021883a 	mov	r16,r2
    370c:	10000416 	blt	r2,zero,3720 <___vfprintf_internal_r+0x3d8>
    3710:	b809883a 	mov	r4,r23
    3714:	d9410404 	addi	r5,sp,1040
    3718:	0006ee80 	call	6ee8 <_fflush_r>
    371c:	1007301e 	bne	r2,zero,53e0 <___vfprintf_internal_r+0x2098>
    3720:	d881070b 	ldhu	r2,1052(sp)
    3724:	1080100c 	andi	r2,r2,64
    3728:	10000326 	beq	r2,zero,3738 <___vfprintf_internal_r+0x3f0>
    372c:	b080030b 	ldhu	r2,12(r22)
    3730:	10801014 	ori	r2,r2,64
    3734:	b080030d 	sth	r2,12(r22)
    3738:	8005883a 	mov	r2,r16
    373c:	00000106 	br	3744 <___vfprintf_internal_r+0x3fc>
    3740:	00bfffc4 	movi	r2,-1
    3744:	dfc14917 	ldw	ra,1316(sp)
    3748:	df014817 	ldw	fp,1312(sp)
    374c:	ddc14717 	ldw	r23,1308(sp)
    3750:	dd814617 	ldw	r22,1304(sp)
    3754:	dd414517 	ldw	r21,1300(sp)
    3758:	dd014417 	ldw	r20,1296(sp)
    375c:	dcc14317 	ldw	r19,1292(sp)
    3760:	dc814217 	ldw	r18,1288(sp)
    3764:	dc414117 	ldw	r17,1284(sp)
    3768:	dc014017 	ldw	r16,1280(sp)
    376c:	dec14a04 	addi	sp,sp,1320
    3770:	f800283a 	ret
    3774:	b809883a 	mov	r4,r23
    3778:	b00b883a 	mov	r5,r22
    377c:	d9811e04 	addi	r6,sp,1144
    3780:	0009f8c0 	call	9f8c <__sprint_r>
    3784:	1000081e 	bne	r2,zero,37a8 <___vfprintf_internal_r+0x460>
    3788:	da000404 	addi	r8,sp,16
    378c:	003f4506 	br	34a4 <__alt_data_end+0xfffadd74>
    3790:	d8812017 	ldw	r2,1152(sp)
    3794:	10000426 	beq	r2,zero,37a8 <___vfprintf_internal_r+0x460>
    3798:	b809883a 	mov	r4,r23
    379c:	b00b883a 	mov	r5,r22
    37a0:	d9811e04 	addi	r6,sp,1144
    37a4:	0009f8c0 	call	9f8c <__sprint_r>
    37a8:	b080030b 	ldhu	r2,12(r22)
    37ac:	1080100c 	andi	r2,r2,64
    37b0:	103fe31e 	bne	r2,zero,3740 <__alt_data_end+0xfffae010>
    37b4:	d8812f17 	ldw	r2,1212(sp)
    37b8:	003fe206 	br	3744 <__alt_data_end+0xfffae014>
    37bc:	b809883a 	mov	r4,r23
    37c0:	00074a40 	call	74a4 <__sinit>
    37c4:	003ef806 	br	33a8 <__alt_data_end+0xfffadc78>
    37c8:	e005883a 	mov	r2,fp
    37cc:	9cc00114 	ori	r19,r19,4
    37d0:	e4000007 	ldb	r16,0(fp)
    37d4:	003f4406 	br	34e8 <__alt_data_end+0xfffaddb8>
    37d8:	e4000007 	ldb	r16,0(fp)
    37dc:	01000a84 	movi	r4,42
    37e0:	e0800044 	addi	r2,fp,1
    37e4:	8106f626 	beq	r16,r4,53c0 <___vfprintf_internal_r+0x2078>
    37e8:	857ff404 	addi	r21,r16,-48
    37ec:	1039883a 	mov	fp,r2
    37f0:	0013883a 	mov	r9,zero
    37f4:	957f3d36 	bltu	r18,r21,34ec <__alt_data_end+0xfffaddbc>
    37f8:	0009883a 	mov	r4,zero
    37fc:	01400284 	movi	r5,10
    3800:	000cac00 	call	cac0 <__mulsi3>
    3804:	e4000007 	ldb	r16,0(fp)
    3808:	a889883a 	add	r4,r21,r2
    380c:	e7000044 	addi	fp,fp,1
    3810:	857ff404 	addi	r21,r16,-48
    3814:	957ff92e 	bgeu	r18,r21,37fc <__alt_data_end+0xfffae0cc>
    3818:	2013883a 	mov	r9,r4
    381c:	203f330e 	bge	r4,zero,34ec <__alt_data_end+0xfffaddbc>
    3820:	027fffc4 	movi	r9,-1
    3824:	003f3106 	br	34ec <__alt_data_end+0xfffaddbc>
    3828:	9cc02014 	ori	r19,r19,128
    382c:	e005883a 	mov	r2,fp
    3830:	e4000007 	ldb	r16,0(fp)
    3834:	003f2c06 	br	34e8 <__alt_data_end+0xfffaddb8>
    3838:	857ff404 	addi	r21,r16,-48
    383c:	d8012e15 	stw	zero,1208(sp)
    3840:	e021883a 	mov	r16,fp
    3844:	0009883a 	mov	r4,zero
    3848:	da412c15 	stw	r9,1200(sp)
    384c:	01400284 	movi	r5,10
    3850:	000cac00 	call	cac0 <__mulsi3>
    3854:	81400007 	ldb	r5,0(r16)
    3858:	1549883a 	add	r4,r2,r21
    385c:	e7000044 	addi	fp,fp,1
    3860:	2d7ff404 	addi	r21,r5,-48
    3864:	e021883a 	mov	r16,fp
    3868:	957ff82e 	bgeu	r18,r21,384c <__alt_data_end+0xfffae11c>
    386c:	2821883a 	mov	r16,r5
    3870:	d9012e15 	stw	r4,1208(sp)
    3874:	da412c17 	ldw	r9,1200(sp)
    3878:	003f1c06 	br	34ec <__alt_data_end+0xfffaddbc>
    387c:	da012a17 	ldw	r8,1192(sp)
    3880:	df012a15 	stw	fp,1192(sp)
    3884:	9839883a 	mov	fp,r19
    3888:	dcc12b03 	ldbu	r19,1196(sp)
    388c:	e7000414 	ori	fp,fp,16
    3890:	e080080c 	andi	r2,fp,32
    3894:	dcc12785 	stb	r19,1182(sp)
    3898:	d8c12d17 	ldw	r3,1204(sp)
    389c:	1001ce26 	beq	r2,zero,3fd8 <___vfprintf_internal_r+0xc90>
    38a0:	d9012d17 	ldw	r4,1204(sp)
    38a4:	18800117 	ldw	r2,4(r3)
    38a8:	1c800017 	ldw	r18,0(r3)
    38ac:	21000204 	addi	r4,r4,8
    38b0:	d9012d15 	stw	r4,1204(sp)
    38b4:	102b883a 	mov	r21,r2
    38b8:	10044916 	blt	r2,zero,49e0 <___vfprintf_internal_r+0x1698>
    38bc:	dcc12783 	ldbu	r19,1182(sp)
    38c0:	da413215 	stw	r9,1224(sp)
    38c4:	00800044 	movi	r2,1
    38c8:	9546b03a 	or	r3,r18,r21
    38cc:	48000216 	blt	r9,zero,38d8 <___vfprintf_internal_r+0x590>
    38d0:	013fdfc4 	movi	r4,-129
    38d4:	e138703a 	and	fp,fp,r4
    38d8:	1802251e 	bne	r3,zero,4170 <___vfprintf_internal_r+0xe28>
    38dc:	48031726 	beq	r9,zero,453c <___vfprintf_internal_r+0x11f4>
    38e0:	10803fcc 	andi	r2,r2,255
    38e4:	00c00044 	movi	r3,1
    38e8:	10c24526 	beq	r2,r3,4200 <___vfprintf_internal_r+0xeb8>
    38ec:	00c00084 	movi	r3,2
    38f0:	10c33426 	beq	r2,r3,45c4 <___vfprintf_internal_r+0x127c>
    38f4:	d8c10e04 	addi	r3,sp,1080
    38f8:	9008d0fa 	srli	r4,r18,3
    38fc:	a80a977a 	slli	r5,r21,29
    3900:	a82ad0fa 	srli	r21,r21,3
    3904:	948001cc 	andi	r18,r18,7
    3908:	90800c04 	addi	r2,r18,48
    390c:	18ffffc4 	addi	r3,r3,-1
    3910:	2924b03a 	or	r18,r5,r4
    3914:	18800005 	stb	r2,0(r3)
    3918:	9548b03a 	or	r4,r18,r21
    391c:	203ff61e 	bne	r4,zero,38f8 <__alt_data_end+0xfffae1c8>
    3920:	e100004c 	andi	r4,fp,1
    3924:	d8c13115 	stw	r3,1220(sp)
    3928:	20039a1e 	bne	r4,zero,4794 <___vfprintf_internal_r+0x144c>
    392c:	d8812817 	ldw	r2,1184(sp)
    3930:	10e3c83a 	sub	r17,r2,r3
    3934:	8805883a 	mov	r2,r17
    3938:	8a40010e 	bge	r17,r9,3940 <___vfprintf_internal_r+0x5f8>
    393c:	4805883a 	mov	r2,r9
    3940:	d8812b15 	stw	r2,1196(sp)
    3944:	d8013415 	stw	zero,1232(sp)
    3948:	98803fcc 	andi	r2,r19,255
    394c:	1080201c 	xori	r2,r2,128
    3950:	10bfe004 	addi	r2,r2,-128
    3954:	10000326 	beq	r2,zero,3964 <___vfprintf_internal_r+0x61c>
    3958:	d8c12b17 	ldw	r3,1196(sp)
    395c:	18c00044 	addi	r3,r3,1
    3960:	d8c12b15 	stw	r3,1196(sp)
    3964:	e0c0008c 	andi	r3,fp,2
    3968:	d8c12c15 	stw	r3,1200(sp)
    396c:	18000326 	beq	r3,zero,397c <___vfprintf_internal_r+0x634>
    3970:	d8c12b17 	ldw	r3,1196(sp)
    3974:	18c00084 	addi	r3,r3,2
    3978:	d8c12b15 	stw	r3,1196(sp)
    397c:	e0c0210c 	andi	r3,fp,132
    3980:	d8c13015 	stw	r3,1216(sp)
    3984:	1801f81e 	bne	r3,zero,4168 <___vfprintf_internal_r+0xe20>
    3988:	d9012e17 	ldw	r4,1208(sp)
    398c:	d8c12b17 	ldw	r3,1196(sp)
    3990:	20ebc83a 	sub	r21,r4,r3
    3994:	0541f40e 	bge	zero,r21,4168 <___vfprintf_internal_r+0xe20>
    3998:	02400404 	movi	r9,16
    399c:	d8c12017 	ldw	r3,1152(sp)
    39a0:	d8811f17 	ldw	r2,1148(sp)
    39a4:	4d45750e 	bge	r9,r21,4f7c <___vfprintf_internal_r+0x1c34>
    39a8:	01400074 	movhi	r5,1
    39ac:	2948d184 	addi	r5,r5,9030
    39b0:	d9413615 	stw	r5,1240(sp)
    39b4:	4827883a 	mov	r19,r9
    39b8:	048001c4 	movi	r18,7
    39bc:	00000306 	br	39cc <___vfprintf_internal_r+0x684>
    39c0:	ad7ffc04 	addi	r21,r21,-16
    39c4:	42000204 	addi	r8,r8,8
    39c8:	9d40130e 	bge	r19,r21,3a18 <___vfprintf_internal_r+0x6d0>
    39cc:	01000074 	movhi	r4,1
    39d0:	18c00404 	addi	r3,r3,16
    39d4:	10800044 	addi	r2,r2,1
    39d8:	2108d184 	addi	r4,r4,9030
    39dc:	41000015 	stw	r4,0(r8)
    39e0:	44c00115 	stw	r19,4(r8)
    39e4:	d8c12015 	stw	r3,1152(sp)
    39e8:	d8811f15 	stw	r2,1148(sp)
    39ec:	90bff40e 	bge	r18,r2,39c0 <__alt_data_end+0xfffae290>
    39f0:	b809883a 	mov	r4,r23
    39f4:	b00b883a 	mov	r5,r22
    39f8:	d9811e04 	addi	r6,sp,1144
    39fc:	0009f8c0 	call	9f8c <__sprint_r>
    3a00:	103f691e 	bne	r2,zero,37a8 <__alt_data_end+0xfffae078>
    3a04:	ad7ffc04 	addi	r21,r21,-16
    3a08:	d8c12017 	ldw	r3,1152(sp)
    3a0c:	d8811f17 	ldw	r2,1148(sp)
    3a10:	da000404 	addi	r8,sp,16
    3a14:	9d7fed16 	blt	r19,r21,39cc <__alt_data_end+0xfffae29c>
    3a18:	d9413617 	ldw	r5,1240(sp)
    3a1c:	a8c7883a 	add	r3,r21,r3
    3a20:	10800044 	addi	r2,r2,1
    3a24:	41400015 	stw	r5,0(r8)
    3a28:	45400115 	stw	r21,4(r8)
    3a2c:	d8c12015 	stw	r3,1152(sp)
    3a30:	d8811f15 	stw	r2,1148(sp)
    3a34:	010001c4 	movi	r4,7
    3a38:	20832b16 	blt	r4,r2,46e8 <___vfprintf_internal_r+0x13a0>
    3a3c:	d8812787 	ldb	r2,1182(sp)
    3a40:	42000204 	addi	r8,r8,8
    3a44:	10000c26 	beq	r2,zero,3a78 <___vfprintf_internal_r+0x730>
    3a48:	d8811f17 	ldw	r2,1148(sp)
    3a4c:	d9012784 	addi	r4,sp,1182
    3a50:	18c00044 	addi	r3,r3,1
    3a54:	10800044 	addi	r2,r2,1
    3a58:	41000015 	stw	r4,0(r8)
    3a5c:	01000044 	movi	r4,1
    3a60:	41000115 	stw	r4,4(r8)
    3a64:	d8c12015 	stw	r3,1152(sp)
    3a68:	d8811f15 	stw	r2,1148(sp)
    3a6c:	010001c4 	movi	r4,7
    3a70:	2082c416 	blt	r4,r2,4584 <___vfprintf_internal_r+0x123c>
    3a74:	42000204 	addi	r8,r8,8
    3a78:	d8812c17 	ldw	r2,1200(sp)
    3a7c:	10000c26 	beq	r2,zero,3ab0 <___vfprintf_internal_r+0x768>
    3a80:	d8811f17 	ldw	r2,1148(sp)
    3a84:	d9012704 	addi	r4,sp,1180
    3a88:	18c00084 	addi	r3,r3,2
    3a8c:	10800044 	addi	r2,r2,1
    3a90:	41000015 	stw	r4,0(r8)
    3a94:	01000084 	movi	r4,2
    3a98:	41000115 	stw	r4,4(r8)
    3a9c:	d8c12015 	stw	r3,1152(sp)
    3aa0:	d8811f15 	stw	r2,1148(sp)
    3aa4:	010001c4 	movi	r4,7
    3aa8:	2082be16 	blt	r4,r2,45a4 <___vfprintf_internal_r+0x125c>
    3aac:	42000204 	addi	r8,r8,8
    3ab0:	d9013017 	ldw	r4,1216(sp)
    3ab4:	00802004 	movi	r2,128
    3ab8:	20822026 	beq	r4,r2,433c <___vfprintf_internal_r+0xff4>
    3abc:	d9413217 	ldw	r5,1224(sp)
    3ac0:	2c67c83a 	sub	r19,r5,r17
    3ac4:	04c0260e 	bge	zero,r19,3b60 <___vfprintf_internal_r+0x818>
    3ac8:	05400404 	movi	r21,16
    3acc:	d8811f17 	ldw	r2,1148(sp)
    3ad0:	acc4720e 	bge	r21,r19,4c9c <___vfprintf_internal_r+0x1954>
    3ad4:	01400074 	movhi	r5,1
    3ad8:	2948cd84 	addi	r5,r5,9014
    3adc:	d9412c15 	stw	r5,1200(sp)
    3ae0:	048001c4 	movi	r18,7
    3ae4:	00000306 	br	3af4 <___vfprintf_internal_r+0x7ac>
    3ae8:	9cfffc04 	addi	r19,r19,-16
    3aec:	42000204 	addi	r8,r8,8
    3af0:	acc0110e 	bge	r21,r19,3b38 <___vfprintf_internal_r+0x7f0>
    3af4:	18c00404 	addi	r3,r3,16
    3af8:	10800044 	addi	r2,r2,1
    3afc:	45000015 	stw	r20,0(r8)
    3b00:	45400115 	stw	r21,4(r8)
    3b04:	d8c12015 	stw	r3,1152(sp)
    3b08:	d8811f15 	stw	r2,1148(sp)
    3b0c:	90bff60e 	bge	r18,r2,3ae8 <__alt_data_end+0xfffae3b8>
    3b10:	b809883a 	mov	r4,r23
    3b14:	b00b883a 	mov	r5,r22
    3b18:	d9811e04 	addi	r6,sp,1144
    3b1c:	0009f8c0 	call	9f8c <__sprint_r>
    3b20:	103f211e 	bne	r2,zero,37a8 <__alt_data_end+0xfffae078>
    3b24:	9cfffc04 	addi	r19,r19,-16
    3b28:	d8c12017 	ldw	r3,1152(sp)
    3b2c:	d8811f17 	ldw	r2,1148(sp)
    3b30:	da000404 	addi	r8,sp,16
    3b34:	acffef16 	blt	r21,r19,3af4 <__alt_data_end+0xfffae3c4>
    3b38:	d9012c17 	ldw	r4,1200(sp)
    3b3c:	1cc7883a 	add	r3,r3,r19
    3b40:	10800044 	addi	r2,r2,1
    3b44:	41000015 	stw	r4,0(r8)
    3b48:	44c00115 	stw	r19,4(r8)
    3b4c:	d8c12015 	stw	r3,1152(sp)
    3b50:	d8811f15 	stw	r2,1148(sp)
    3b54:	010001c4 	movi	r4,7
    3b58:	20828216 	blt	r4,r2,4564 <___vfprintf_internal_r+0x121c>
    3b5c:	42000204 	addi	r8,r8,8
    3b60:	e080400c 	andi	r2,fp,256
    3b64:	1001ac1e 	bne	r2,zero,4218 <___vfprintf_internal_r+0xed0>
    3b68:	d8811f17 	ldw	r2,1148(sp)
    3b6c:	d9413117 	ldw	r5,1220(sp)
    3b70:	1c47883a 	add	r3,r3,r17
    3b74:	10800044 	addi	r2,r2,1
    3b78:	41400015 	stw	r5,0(r8)
    3b7c:	44400115 	stw	r17,4(r8)
    3b80:	d8c12015 	stw	r3,1152(sp)
    3b84:	d8811f15 	stw	r2,1148(sp)
    3b88:	010001c4 	movi	r4,7
    3b8c:	20825d16 	blt	r4,r2,4504 <___vfprintf_internal_r+0x11bc>
    3b90:	42000204 	addi	r8,r8,8
    3b94:	e080010c 	andi	r2,fp,4
    3b98:	10003126 	beq	r2,zero,3c60 <___vfprintf_internal_r+0x918>
    3b9c:	d8812e17 	ldw	r2,1208(sp)
    3ba0:	d9012b17 	ldw	r4,1196(sp)
    3ba4:	1121c83a 	sub	r16,r2,r4
    3ba8:	04002d0e 	bge	zero,r16,3c60 <___vfprintf_internal_r+0x918>
    3bac:	04400404 	movi	r17,16
    3bb0:	d8811f17 	ldw	r2,1148(sp)
    3bb4:	8c05340e 	bge	r17,r16,5088 <___vfprintf_internal_r+0x1d40>
    3bb8:	01000074 	movhi	r4,1
    3bbc:	2108d184 	addi	r4,r4,9030
    3bc0:	d9013615 	stw	r4,1240(sp)
    3bc4:	048001c4 	movi	r18,7
    3bc8:	00000306 	br	3bd8 <___vfprintf_internal_r+0x890>
    3bcc:	843ffc04 	addi	r16,r16,-16
    3bd0:	42000204 	addi	r8,r8,8
    3bd4:	8c00130e 	bge	r17,r16,3c24 <___vfprintf_internal_r+0x8dc>
    3bd8:	01400074 	movhi	r5,1
    3bdc:	18c00404 	addi	r3,r3,16
    3be0:	10800044 	addi	r2,r2,1
    3be4:	2948d184 	addi	r5,r5,9030
    3be8:	41400015 	stw	r5,0(r8)
    3bec:	44400115 	stw	r17,4(r8)
    3bf0:	d8c12015 	stw	r3,1152(sp)
    3bf4:	d8811f15 	stw	r2,1148(sp)
    3bf8:	90bff40e 	bge	r18,r2,3bcc <__alt_data_end+0xfffae49c>
    3bfc:	b809883a 	mov	r4,r23
    3c00:	b00b883a 	mov	r5,r22
    3c04:	d9811e04 	addi	r6,sp,1144
    3c08:	0009f8c0 	call	9f8c <__sprint_r>
    3c0c:	103ee61e 	bne	r2,zero,37a8 <__alt_data_end+0xfffae078>
    3c10:	843ffc04 	addi	r16,r16,-16
    3c14:	d8c12017 	ldw	r3,1152(sp)
    3c18:	d8811f17 	ldw	r2,1148(sp)
    3c1c:	da000404 	addi	r8,sp,16
    3c20:	8c3fed16 	blt	r17,r16,3bd8 <__alt_data_end+0xfffae4a8>
    3c24:	d9013617 	ldw	r4,1240(sp)
    3c28:	1c07883a 	add	r3,r3,r16
    3c2c:	10800044 	addi	r2,r2,1
    3c30:	41000015 	stw	r4,0(r8)
    3c34:	44000115 	stw	r16,4(r8)
    3c38:	d8c12015 	stw	r3,1152(sp)
    3c3c:	d8811f15 	stw	r2,1148(sp)
    3c40:	010001c4 	movi	r4,7
    3c44:	2080060e 	bge	r4,r2,3c60 <___vfprintf_internal_r+0x918>
    3c48:	b809883a 	mov	r4,r23
    3c4c:	b00b883a 	mov	r5,r22
    3c50:	d9811e04 	addi	r6,sp,1144
    3c54:	0009f8c0 	call	9f8c <__sprint_r>
    3c58:	103ed31e 	bne	r2,zero,37a8 <__alt_data_end+0xfffae078>
    3c5c:	d8c12017 	ldw	r3,1152(sp)
    3c60:	df012b17 	ldw	fp,1196(sp)
    3c64:	d9412e17 	ldw	r5,1208(sp)
    3c68:	e140010e 	bge	fp,r5,3c70 <___vfprintf_internal_r+0x928>
    3c6c:	2839883a 	mov	fp,r5
    3c70:	d8812f17 	ldw	r2,1212(sp)
    3c74:	1705883a 	add	r2,r2,fp
    3c78:	d8812f15 	stw	r2,1212(sp)
    3c7c:	1802291e 	bne	r3,zero,4524 <___vfprintf_internal_r+0x11dc>
    3c80:	d8c12a17 	ldw	r3,1192(sp)
    3c84:	d8011f15 	stw	zero,1148(sp)
    3c88:	da000404 	addi	r8,sp,16
    3c8c:	18800007 	ldb	r2,0(r3)
    3c90:	103ded1e 	bne	r2,zero,3448 <__alt_data_end+0xfffadd18>
    3c94:	dc012a17 	ldw	r16,1192(sp)
    3c98:	003e0506 	br	34b0 <__alt_data_end+0xfffadd80>
    3c9c:	d9012d17 	ldw	r4,1204(sp)
    3ca0:	d9412d17 	ldw	r5,1204(sp)
    3ca4:	da012a17 	ldw	r8,1192(sp)
    3ca8:	21000017 	ldw	r4,0(r4)
    3cac:	29400117 	ldw	r5,4(r5)
    3cb0:	df012a15 	stw	fp,1192(sp)
    3cb4:	9839883a 	mov	fp,r19
    3cb8:	dcc12b03 	ldbu	r19,1196(sp)
    3cbc:	d9013715 	stw	r4,1244(sp)
    3cc0:	d9413915 	stw	r5,1252(sp)
    3cc4:	da013f15 	stw	r8,1276(sp)
    3cc8:	da413e15 	stw	r9,1272(sp)
    3ccc:	dcc12785 	stb	r19,1182(sp)
    3cd0:	0009c3c0 	call	9c3c <__fpclassifyd>
    3cd4:	d8c12d17 	ldw	r3,1204(sp)
    3cd8:	04400044 	movi	r17,1
    3cdc:	da013f17 	ldw	r8,1276(sp)
    3ce0:	1c800204 	addi	r18,r3,8
    3ce4:	da413e17 	ldw	r9,1272(sp)
    3ce8:	d9013717 	ldw	r4,1244(sp)
    3cec:	d9413917 	ldw	r5,1252(sp)
    3cf0:	1443451e 	bne	r2,r17,4a08 <___vfprintf_internal_r+0x16c0>
    3cf4:	000d883a 	mov	r6,zero
    3cf8:	000f883a 	mov	r7,zero
    3cfc:	000de680 	call	de68 <__ledf2>
    3d00:	da013f17 	ldw	r8,1276(sp)
    3d04:	1004fe16 	blt	r2,zero,5100 <___vfprintf_internal_r+0x1db8>
    3d08:	dcc12783 	ldbu	r19,1182(sp)
    3d0c:	008011c4 	movi	r2,71
    3d10:	14045d0e 	bge	r2,r16,4e88 <___vfprintf_internal_r+0x1b40>
    3d14:	01400074 	movhi	r5,1
    3d18:	2948be04 	addi	r5,r5,8952
    3d1c:	d9413115 	stw	r5,1220(sp)
    3d20:	00c000c4 	movi	r3,3
    3d24:	00bfdfc4 	movi	r2,-129
    3d28:	d8c12b15 	stw	r3,1196(sp)
    3d2c:	e0b8703a 	and	fp,fp,r2
    3d30:	dc812d15 	stw	r18,1204(sp)
    3d34:	1823883a 	mov	r17,r3
    3d38:	d8013215 	stw	zero,1224(sp)
    3d3c:	d8013415 	stw	zero,1232(sp)
    3d40:	003f0106 	br	3948 <__alt_data_end+0xfffae218>
    3d44:	9cc00214 	ori	r19,r19,8
    3d48:	e005883a 	mov	r2,fp
    3d4c:	e4000007 	ldb	r16,0(fp)
    3d50:	003de506 	br	34e8 <__alt_data_end+0xfffaddb8>
    3d54:	da012a17 	ldw	r8,1192(sp)
    3d58:	df012a15 	stw	fp,1192(sp)
    3d5c:	9f000414 	ori	fp,r19,16
    3d60:	e0c0080c 	andi	r3,fp,32
    3d64:	d8812d17 	ldw	r2,1204(sp)
    3d68:	18007626 	beq	r3,zero,3f44 <___vfprintf_internal_r+0xbfc>
    3d6c:	d9412d17 	ldw	r5,1204(sp)
    3d70:	14800017 	ldw	r18,0(r2)
    3d74:	15400117 	ldw	r21,4(r2)
    3d78:	29400204 	addi	r5,r5,8
    3d7c:	d9412d15 	stw	r5,1204(sp)
    3d80:	0005883a 	mov	r2,zero
    3d84:	9546b03a 	or	r3,r18,r21
    3d88:	d8012785 	stb	zero,1182(sp)
    3d8c:	da413215 	stw	r9,1224(sp)
    3d90:	0027883a 	mov	r19,zero
    3d94:	003ecd06 	br	38cc <__alt_data_end+0xfffae19c>
    3d98:	da012a17 	ldw	r8,1192(sp)
    3d9c:	df012a15 	stw	fp,1192(sp)
    3da0:	9f000414 	ori	fp,r19,16
    3da4:	e0c0080c 	andi	r3,fp,32
    3da8:	d8812d17 	ldw	r2,1204(sp)
    3dac:	18002c26 	beq	r3,zero,3e60 <___vfprintf_internal_r+0xb18>
    3db0:	d9012d17 	ldw	r4,1204(sp)
    3db4:	14800017 	ldw	r18,0(r2)
    3db8:	15400117 	ldw	r21,4(r2)
    3dbc:	21000204 	addi	r4,r4,8
    3dc0:	d9012d15 	stw	r4,1204(sp)
    3dc4:	00800044 	movi	r2,1
    3dc8:	9546b03a 	or	r3,r18,r21
    3dcc:	003fee06 	br	3d88 <__alt_data_end+0xfffae658>
    3dd0:	da012a17 	ldw	r8,1192(sp)
    3dd4:	df012a15 	stw	fp,1192(sp)
    3dd8:	9839883a 	mov	fp,r19
    3ddc:	dcc12b03 	ldbu	r19,1196(sp)
    3de0:	01400074 	movhi	r5,1
    3de4:	2948c104 	addi	r5,r5,8964
    3de8:	dcc12785 	stb	r19,1182(sp)
    3dec:	d9413b15 	stw	r5,1260(sp)
    3df0:	e0c0080c 	andi	r3,fp,32
    3df4:	d8812d17 	ldw	r2,1204(sp)
    3df8:	18002e26 	beq	r3,zero,3eb4 <___vfprintf_internal_r+0xb6c>
    3dfc:	d9412d17 	ldw	r5,1204(sp)
    3e00:	14800017 	ldw	r18,0(r2)
    3e04:	15400117 	ldw	r21,4(r2)
    3e08:	29400204 	addi	r5,r5,8
    3e0c:	d9412d15 	stw	r5,1204(sp)
    3e10:	e080004c 	andi	r2,fp,1
    3e14:	10025c26 	beq	r2,zero,4788 <___vfprintf_internal_r+0x1440>
    3e18:	9546b03a 	or	r3,r18,r21
    3e1c:	18038f26 	beq	r3,zero,4c5c <___vfprintf_internal_r+0x1914>
    3e20:	00800c04 	movi	r2,48
    3e24:	d8812705 	stb	r2,1180(sp)
    3e28:	dc012745 	stb	r16,1181(sp)
    3e2c:	e7000094 	ori	fp,fp,2
    3e30:	00800084 	movi	r2,2
    3e34:	003fd406 	br	3d88 <__alt_data_end+0xfffae658>
    3e38:	9cc00814 	ori	r19,r19,32
    3e3c:	e005883a 	mov	r2,fp
    3e40:	e4000007 	ldb	r16,0(fp)
    3e44:	003da806 	br	34e8 <__alt_data_end+0xfffaddb8>
    3e48:	da012a17 	ldw	r8,1192(sp)
    3e4c:	df012a15 	stw	fp,1192(sp)
    3e50:	9839883a 	mov	fp,r19
    3e54:	e0c0080c 	andi	r3,fp,32
    3e58:	d8812d17 	ldw	r2,1204(sp)
    3e5c:	183fd41e 	bne	r3,zero,3db0 <__alt_data_end+0xfffae680>
    3e60:	e0c0040c 	andi	r3,fp,16
    3e64:	18035f26 	beq	r3,zero,4be4 <___vfprintf_internal_r+0x189c>
    3e68:	d9412d17 	ldw	r5,1204(sp)
    3e6c:	14800017 	ldw	r18,0(r2)
    3e70:	002b883a 	mov	r21,zero
    3e74:	29400104 	addi	r5,r5,4
    3e78:	d9412d15 	stw	r5,1204(sp)
    3e7c:	00800044 	movi	r2,1
    3e80:	9007883a 	mov	r3,r18
    3e84:	003fc006 	br	3d88 <__alt_data_end+0xfffae658>
    3e88:	da012a17 	ldw	r8,1192(sp)
    3e8c:	df012a15 	stw	fp,1192(sp)
    3e90:	9839883a 	mov	fp,r19
    3e94:	dcc12b03 	ldbu	r19,1196(sp)
    3e98:	01000074 	movhi	r4,1
    3e9c:	2108c604 	addi	r4,r4,8984
    3ea0:	d9013b15 	stw	r4,1260(sp)
    3ea4:	dcc12785 	stb	r19,1182(sp)
    3ea8:	e0c0080c 	andi	r3,fp,32
    3eac:	d8812d17 	ldw	r2,1204(sp)
    3eb0:	183fd21e 	bne	r3,zero,3dfc <__alt_data_end+0xfffae6cc>
    3eb4:	e0c0040c 	andi	r3,fp,16
    3eb8:	18035426 	beq	r3,zero,4c0c <___vfprintf_internal_r+0x18c4>
    3ebc:	d8c12d17 	ldw	r3,1204(sp)
    3ec0:	14800017 	ldw	r18,0(r2)
    3ec4:	002b883a 	mov	r21,zero
    3ec8:	18c00104 	addi	r3,r3,4
    3ecc:	d8c12d15 	stw	r3,1204(sp)
    3ed0:	003fcf06 	br	3e10 <__alt_data_end+0xfffae6e0>
    3ed4:	e4000007 	ldb	r16,0(fp)
    3ed8:	00801b04 	movi	r2,108
    3edc:	8083f726 	beq	r16,r2,4ebc <___vfprintf_internal_r+0x1b74>
    3ee0:	9cc00414 	ori	r19,r19,16
    3ee4:	e005883a 	mov	r2,fp
    3ee8:	003d7f06 	br	34e8 <__alt_data_end+0xfffaddb8>
    3eec:	da012a17 	ldw	r8,1192(sp)
    3ef0:	df012a15 	stw	fp,1192(sp)
    3ef4:	9839883a 	mov	fp,r19
    3ef8:	dcc12b03 	ldbu	r19,1196(sp)
    3efc:	e080080c 	andi	r2,fp,32
    3f00:	dcc12785 	stb	r19,1182(sp)
    3f04:	10032226 	beq	r2,zero,4b90 <___vfprintf_internal_r+0x1848>
    3f08:	d9412d17 	ldw	r5,1204(sp)
    3f0c:	d9012f17 	ldw	r4,1212(sp)
    3f10:	28800017 	ldw	r2,0(r5)
    3f14:	2007d7fa 	srai	r3,r4,31
    3f18:	29400104 	addi	r5,r5,4
    3f1c:	d9412d15 	stw	r5,1204(sp)
    3f20:	11000015 	stw	r4,0(r2)
    3f24:	10c00115 	stw	r3,4(r2)
    3f28:	003d4406 	br	343c <__alt_data_end+0xfffadd0c>
    3f2c:	da012a17 	ldw	r8,1192(sp)
    3f30:	df012a15 	stw	fp,1192(sp)
    3f34:	9839883a 	mov	fp,r19
    3f38:	e0c0080c 	andi	r3,fp,32
    3f3c:	d8812d17 	ldw	r2,1204(sp)
    3f40:	183f8a1e 	bne	r3,zero,3d6c <__alt_data_end+0xfffae63c>
    3f44:	e0c0040c 	andi	r3,fp,16
    3f48:	18031c26 	beq	r3,zero,4bbc <___vfprintf_internal_r+0x1874>
    3f4c:	14800017 	ldw	r18,0(r2)
    3f50:	d8812d17 	ldw	r2,1204(sp)
    3f54:	002b883a 	mov	r21,zero
    3f58:	9007883a 	mov	r3,r18
    3f5c:	10800104 	addi	r2,r2,4
    3f60:	d8812d15 	stw	r2,1204(sp)
    3f64:	0005883a 	mov	r2,zero
    3f68:	003f8706 	br	3d88 <__alt_data_end+0xfffae658>
    3f6c:	d9412d17 	ldw	r5,1204(sp)
    3f70:	00800c04 	movi	r2,48
    3f74:	d8812705 	stb	r2,1180(sp)
    3f78:	2c800017 	ldw	r18,0(r5)
    3f7c:	00801e04 	movi	r2,120
    3f80:	d8812745 	stb	r2,1181(sp)
    3f84:	00800074 	movhi	r2,1
    3f88:	1088c604 	addi	r2,r2,8984
    3f8c:	29400104 	addi	r5,r5,4
    3f90:	da012a17 	ldw	r8,1192(sp)
    3f94:	d8813b15 	stw	r2,1260(sp)
    3f98:	df012a15 	stw	fp,1192(sp)
    3f9c:	002b883a 	mov	r21,zero
    3fa0:	9f000094 	ori	fp,r19,2
    3fa4:	d9412d15 	stw	r5,1204(sp)
    3fa8:	00800084 	movi	r2,2
    3fac:	04001e04 	movi	r16,120
    3fb0:	9007883a 	mov	r3,r18
    3fb4:	003f7406 	br	3d88 <__alt_data_end+0xfffae658>
    3fb8:	da012a17 	ldw	r8,1192(sp)
    3fbc:	df012a15 	stw	fp,1192(sp)
    3fc0:	9839883a 	mov	fp,r19
    3fc4:	dcc12b03 	ldbu	r19,1196(sp)
    3fc8:	e080080c 	andi	r2,fp,32
    3fcc:	d8c12d17 	ldw	r3,1204(sp)
    3fd0:	dcc12785 	stb	r19,1182(sp)
    3fd4:	103e321e 	bne	r2,zero,38a0 <__alt_data_end+0xfffae170>
    3fd8:	e080040c 	andi	r2,fp,16
    3fdc:	10031326 	beq	r2,zero,4c2c <___vfprintf_internal_r+0x18e4>
    3fe0:	1c800017 	ldw	r18,0(r3)
    3fe4:	d9412d17 	ldw	r5,1204(sp)
    3fe8:	902bd7fa 	srai	r21,r18,31
    3fec:	29400104 	addi	r5,r5,4
    3ff0:	d9412d15 	stw	r5,1204(sp)
    3ff4:	a805883a 	mov	r2,r21
    3ff8:	003e2f06 	br	38b8 <__alt_data_end+0xfffae188>
    3ffc:	9cc01014 	ori	r19,r19,64
    4000:	e005883a 	mov	r2,fp
    4004:	e4000007 	ldb	r16,0(fp)
    4008:	003d3706 	br	34e8 <__alt_data_end+0xfffaddb8>
    400c:	d8c12d17 	ldw	r3,1204(sp)
    4010:	d9012d17 	ldw	r4,1204(sp)
    4014:	da012a17 	ldw	r8,1192(sp)
    4018:	18800017 	ldw	r2,0(r3)
    401c:	21000104 	addi	r4,r4,4
    4020:	00c00044 	movi	r3,1
    4024:	df012a15 	stw	fp,1192(sp)
    4028:	d8c12b15 	stw	r3,1196(sp)
    402c:	9839883a 	mov	fp,r19
    4030:	d8012785 	stb	zero,1182(sp)
    4034:	d8810405 	stb	r2,1040(sp)
    4038:	d9012d15 	stw	r4,1204(sp)
    403c:	1823883a 	mov	r17,r3
    4040:	d8c10404 	addi	r3,sp,1040
    4044:	d8013215 	stw	zero,1224(sp)
    4048:	d8013415 	stw	zero,1232(sp)
    404c:	d8c13115 	stw	r3,1220(sp)
    4050:	0005883a 	mov	r2,zero
    4054:	003e4306 	br	3964 <__alt_data_end+0xfffae234>
    4058:	d8812b07 	ldb	r2,1196(sp)
    405c:	1002fc1e 	bne	r2,zero,4c50 <___vfprintf_internal_r+0x1908>
    4060:	00c00804 	movi	r3,32
    4064:	d8c12b05 	stb	r3,1196(sp)
    4068:	e005883a 	mov	r2,fp
    406c:	e4000007 	ldb	r16,0(fp)
    4070:	003d1d06 	br	34e8 <__alt_data_end+0xfffaddb8>
    4074:	9cc00054 	ori	r19,r19,1
    4078:	e005883a 	mov	r2,fp
    407c:	e4000007 	ldb	r16,0(fp)
    4080:	003d1906 	br	34e8 <__alt_data_end+0xfffaddb8>
    4084:	d9012d17 	ldw	r4,1204(sp)
    4088:	d9412d17 	ldw	r5,1204(sp)
    408c:	21000017 	ldw	r4,0(r4)
    4090:	28c00104 	addi	r3,r5,4
    4094:	d9012e15 	stw	r4,1208(sp)
    4098:	20038c16 	blt	r4,zero,4ecc <___vfprintf_internal_r+0x1b84>
    409c:	d8c12d15 	stw	r3,1204(sp)
    40a0:	e005883a 	mov	r2,fp
    40a4:	e4000007 	ldb	r16,0(fp)
    40a8:	003d0f06 	br	34e8 <__alt_data_end+0xfffaddb8>
    40ac:	00c00ac4 	movi	r3,43
    40b0:	d8c12b05 	stb	r3,1196(sp)
    40b4:	e005883a 	mov	r2,fp
    40b8:	e4000007 	ldb	r16,0(fp)
    40bc:	003d0a06 	br	34e8 <__alt_data_end+0xfffaddb8>
    40c0:	d8c12d17 	ldw	r3,1204(sp)
    40c4:	d9012d17 	ldw	r4,1204(sp)
    40c8:	da012a17 	ldw	r8,1192(sp)
    40cc:	18c00017 	ldw	r3,0(r3)
    40d0:	df012a15 	stw	fp,1192(sp)
    40d4:	d8012785 	stb	zero,1182(sp)
    40d8:	d8c13115 	stw	r3,1220(sp)
    40dc:	9839883a 	mov	fp,r19
    40e0:	24800104 	addi	r18,r4,4
    40e4:	1803f726 	beq	r3,zero,50c4 <___vfprintf_internal_r+0x1d7c>
    40e8:	d9013117 	ldw	r4,1220(sp)
    40ec:	48038916 	blt	r9,zero,4f14 <___vfprintf_internal_r+0x1bcc>
    40f0:	480d883a 	mov	r6,r9
    40f4:	000b883a 	mov	r5,zero
    40f8:	da013f15 	stw	r8,1276(sp)
    40fc:	da413e15 	stw	r9,1272(sp)
    4100:	00081b40 	call	81b4 <memchr>
    4104:	da013f17 	ldw	r8,1276(sp)
    4108:	da413e17 	ldw	r9,1272(sp)
    410c:	10045926 	beq	r2,zero,5274 <___vfprintf_internal_r+0x1f2c>
    4110:	d8c13117 	ldw	r3,1220(sp)
    4114:	10e3c83a 	sub	r17,r2,r3
    4118:	4c433516 	blt	r9,r17,4df0 <___vfprintf_internal_r+0x1aa8>
    411c:	8805883a 	mov	r2,r17
    4120:	88038116 	blt	r17,zero,4f28 <___vfprintf_internal_r+0x1be0>
    4124:	dcc12783 	ldbu	r19,1182(sp)
    4128:	d8812b15 	stw	r2,1196(sp)
    412c:	dc812d15 	stw	r18,1204(sp)
    4130:	d8013215 	stw	zero,1224(sp)
    4134:	d8013415 	stw	zero,1232(sp)
    4138:	003e0306 	br	3948 <__alt_data_end+0xfffae218>
    413c:	da012a17 	ldw	r8,1192(sp)
    4140:	df012a15 	stw	fp,1192(sp)
    4144:	9839883a 	mov	fp,r19
    4148:	dcc12b03 	ldbu	r19,1196(sp)
    414c:	dcc12785 	stb	r19,1182(sp)
    4150:	803d8f26 	beq	r16,zero,3790 <__alt_data_end+0xfffae060>
    4154:	00c00044 	movi	r3,1
    4158:	d8c12b15 	stw	r3,1196(sp)
    415c:	dc010405 	stb	r16,1040(sp)
    4160:	d8012785 	stb	zero,1182(sp)
    4164:	003fb506 	br	403c <__alt_data_end+0xfffae90c>
    4168:	d8c12017 	ldw	r3,1152(sp)
    416c:	003e3506 	br	3a44 <__alt_data_end+0xfffae314>
    4170:	10803fcc 	andi	r2,r2,255
    4174:	00c00044 	movi	r3,1
    4178:	10fddc1e 	bne	r2,r3,38ec <__alt_data_end+0xfffae1bc>
    417c:	a800021e 	bne	r21,zero,4188 <___vfprintf_internal_r+0xe40>
    4180:	00800244 	movi	r2,9
    4184:	14801e2e 	bgeu	r2,r18,4200 <___vfprintf_internal_r+0xeb8>
    4188:	dc012b15 	stw	r16,1196(sp)
    418c:	dc410e04 	addi	r17,sp,1080
    4190:	9021883a 	mov	r16,r18
    4194:	da012c15 	stw	r8,1200(sp)
    4198:	a825883a 	mov	r18,r21
    419c:	482b883a 	mov	r21,r9
    41a0:	8009883a 	mov	r4,r16
    41a4:	900b883a 	mov	r5,r18
    41a8:	01800284 	movi	r6,10
    41ac:	000f883a 	mov	r7,zero
    41b0:	000c3780 	call	c378 <__umoddi3>
    41b4:	10800c04 	addi	r2,r2,48
    41b8:	8c7fffc4 	addi	r17,r17,-1
    41bc:	8009883a 	mov	r4,r16
    41c0:	900b883a 	mov	r5,r18
    41c4:	01800284 	movi	r6,10
    41c8:	000f883a 	mov	r7,zero
    41cc:	88800005 	stb	r2,0(r17)
    41d0:	000bd380 	call	bd38 <__udivdi3>
    41d4:	1021883a 	mov	r16,r2
    41d8:	10c4b03a 	or	r2,r2,r3
    41dc:	1825883a 	mov	r18,r3
    41e0:	103fef1e 	bne	r2,zero,41a0 <__alt_data_end+0xfffaea70>
    41e4:	d9012817 	ldw	r4,1184(sp)
    41e8:	dc413115 	stw	r17,1220(sp)
    41ec:	dc012b17 	ldw	r16,1196(sp)
    41f0:	da012c17 	ldw	r8,1200(sp)
    41f4:	a813883a 	mov	r9,r21
    41f8:	2463c83a 	sub	r17,r4,r17
    41fc:	003dcd06 	br	3934 <__alt_data_end+0xfffae204>
    4200:	94800c04 	addi	r18,r18,48
    4204:	d8c10dc4 	addi	r3,sp,1079
    4208:	dc810dc5 	stb	r18,1079(sp)
    420c:	dc413c17 	ldw	r17,1264(sp)
    4210:	d8c13115 	stw	r3,1220(sp)
    4214:	003dc706 	br	3934 <__alt_data_end+0xfffae204>
    4218:	00801944 	movi	r2,101
    421c:	1400720e 	bge	r2,r16,43e8 <___vfprintf_internal_r+0x10a0>
    4220:	d9013717 	ldw	r4,1244(sp)
    4224:	d9413917 	ldw	r5,1252(sp)
    4228:	000d883a 	mov	r6,zero
    422c:	000f883a 	mov	r7,zero
    4230:	d8c13d15 	stw	r3,1268(sp)
    4234:	da013f15 	stw	r8,1276(sp)
    4238:	000dd040 	call	dd04 <__eqdf2>
    423c:	d8c13d17 	ldw	r3,1268(sp)
    4240:	da013f17 	ldw	r8,1276(sp)
    4244:	1000f41e 	bne	r2,zero,4618 <___vfprintf_internal_r+0x12d0>
    4248:	d8811f17 	ldw	r2,1148(sp)
    424c:	01000074 	movhi	r4,1
    4250:	2108cd04 	addi	r4,r4,9012
    4254:	18c00044 	addi	r3,r3,1
    4258:	10800044 	addi	r2,r2,1
    425c:	41000015 	stw	r4,0(r8)
    4260:	01000044 	movi	r4,1
    4264:	41000115 	stw	r4,4(r8)
    4268:	d8c12015 	stw	r3,1152(sp)
    426c:	d8811f15 	stw	r2,1148(sp)
    4270:	010001c4 	movi	r4,7
    4274:	20828d16 	blt	r4,r2,4cac <___vfprintf_internal_r+0x1964>
    4278:	42000204 	addi	r8,r8,8
    427c:	d8812617 	ldw	r2,1176(sp)
    4280:	d9413317 	ldw	r5,1228(sp)
    4284:	11400216 	blt	r2,r5,4290 <___vfprintf_internal_r+0xf48>
    4288:	e080004c 	andi	r2,fp,1
    428c:	103e4126 	beq	r2,zero,3b94 <__alt_data_end+0xfffae464>
    4290:	d8813817 	ldw	r2,1248(sp)
    4294:	d9013517 	ldw	r4,1236(sp)
    4298:	d9413817 	ldw	r5,1248(sp)
    429c:	1887883a 	add	r3,r3,r2
    42a0:	d8811f17 	ldw	r2,1148(sp)
    42a4:	41000015 	stw	r4,0(r8)
    42a8:	41400115 	stw	r5,4(r8)
    42ac:	10800044 	addi	r2,r2,1
    42b0:	d8c12015 	stw	r3,1152(sp)
    42b4:	d8811f15 	stw	r2,1148(sp)
    42b8:	010001c4 	movi	r4,7
    42bc:	20830916 	blt	r4,r2,4ee4 <___vfprintf_internal_r+0x1b9c>
    42c0:	42000204 	addi	r8,r8,8
    42c4:	d8813317 	ldw	r2,1228(sp)
    42c8:	143fffc4 	addi	r16,r2,-1
    42cc:	043e310e 	bge	zero,r16,3b94 <__alt_data_end+0xfffae464>
    42d0:	04400404 	movi	r17,16
    42d4:	d8811f17 	ldw	r2,1148(sp)
    42d8:	8c007e0e 	bge	r17,r16,44d4 <___vfprintf_internal_r+0x118c>
    42dc:	01400074 	movhi	r5,1
    42e0:	2948cd84 	addi	r5,r5,9014
    42e4:	d9412c15 	stw	r5,1200(sp)
    42e8:	04c001c4 	movi	r19,7
    42ec:	00000306 	br	42fc <___vfprintf_internal_r+0xfb4>
    42f0:	42000204 	addi	r8,r8,8
    42f4:	843ffc04 	addi	r16,r16,-16
    42f8:	8c00790e 	bge	r17,r16,44e0 <___vfprintf_internal_r+0x1198>
    42fc:	18c00404 	addi	r3,r3,16
    4300:	10800044 	addi	r2,r2,1
    4304:	45000015 	stw	r20,0(r8)
    4308:	44400115 	stw	r17,4(r8)
    430c:	d8c12015 	stw	r3,1152(sp)
    4310:	d8811f15 	stw	r2,1148(sp)
    4314:	98bff60e 	bge	r19,r2,42f0 <__alt_data_end+0xfffaebc0>
    4318:	b809883a 	mov	r4,r23
    431c:	b00b883a 	mov	r5,r22
    4320:	d9811e04 	addi	r6,sp,1144
    4324:	0009f8c0 	call	9f8c <__sprint_r>
    4328:	103d1f1e 	bne	r2,zero,37a8 <__alt_data_end+0xfffae078>
    432c:	d8c12017 	ldw	r3,1152(sp)
    4330:	d8811f17 	ldw	r2,1148(sp)
    4334:	da000404 	addi	r8,sp,16
    4338:	003fee06 	br	42f4 <__alt_data_end+0xfffaebc4>
    433c:	d9412e17 	ldw	r5,1208(sp)
    4340:	d8812b17 	ldw	r2,1196(sp)
    4344:	28a7c83a 	sub	r19,r5,r2
    4348:	04fddc0e 	bge	zero,r19,3abc <__alt_data_end+0xfffae38c>
    434c:	05400404 	movi	r21,16
    4350:	d8811f17 	ldw	r2,1148(sp)
    4354:	acc3870e 	bge	r21,r19,5174 <___vfprintf_internal_r+0x1e2c>
    4358:	01400074 	movhi	r5,1
    435c:	2948cd84 	addi	r5,r5,9014
    4360:	d9412c15 	stw	r5,1200(sp)
    4364:	048001c4 	movi	r18,7
    4368:	00000306 	br	4378 <___vfprintf_internal_r+0x1030>
    436c:	9cfffc04 	addi	r19,r19,-16
    4370:	42000204 	addi	r8,r8,8
    4374:	acc0110e 	bge	r21,r19,43bc <___vfprintf_internal_r+0x1074>
    4378:	18c00404 	addi	r3,r3,16
    437c:	10800044 	addi	r2,r2,1
    4380:	45000015 	stw	r20,0(r8)
    4384:	45400115 	stw	r21,4(r8)
    4388:	d8c12015 	stw	r3,1152(sp)
    438c:	d8811f15 	stw	r2,1148(sp)
    4390:	90bff60e 	bge	r18,r2,436c <__alt_data_end+0xfffaec3c>
    4394:	b809883a 	mov	r4,r23
    4398:	b00b883a 	mov	r5,r22
    439c:	d9811e04 	addi	r6,sp,1144
    43a0:	0009f8c0 	call	9f8c <__sprint_r>
    43a4:	103d001e 	bne	r2,zero,37a8 <__alt_data_end+0xfffae078>
    43a8:	9cfffc04 	addi	r19,r19,-16
    43ac:	d8c12017 	ldw	r3,1152(sp)
    43b0:	d8811f17 	ldw	r2,1148(sp)
    43b4:	da000404 	addi	r8,sp,16
    43b8:	acffef16 	blt	r21,r19,4378 <__alt_data_end+0xfffaec48>
    43bc:	d9012c17 	ldw	r4,1200(sp)
    43c0:	1cc7883a 	add	r3,r3,r19
    43c4:	10800044 	addi	r2,r2,1
    43c8:	41000015 	stw	r4,0(r8)
    43cc:	44c00115 	stw	r19,4(r8)
    43d0:	d8c12015 	stw	r3,1152(sp)
    43d4:	d8811f15 	stw	r2,1148(sp)
    43d8:	010001c4 	movi	r4,7
    43dc:	20817816 	blt	r4,r2,49c0 <___vfprintf_internal_r+0x1678>
    43e0:	42000204 	addi	r8,r8,8
    43e4:	003db506 	br	3abc <__alt_data_end+0xfffae38c>
    43e8:	d9413317 	ldw	r5,1228(sp)
    43ec:	00800044 	movi	r2,1
    43f0:	18c00044 	addi	r3,r3,1
    43f4:	11413e0e 	bge	r2,r5,48f0 <___vfprintf_internal_r+0x15a8>
    43f8:	dc011f17 	ldw	r16,1148(sp)
    43fc:	d8813117 	ldw	r2,1220(sp)
    4400:	d8c12015 	stw	r3,1152(sp)
    4404:	84000044 	addi	r16,r16,1
    4408:	40800015 	stw	r2,0(r8)
    440c:	00800044 	movi	r2,1
    4410:	40800115 	stw	r2,4(r8)
    4414:	dc011f15 	stw	r16,1148(sp)
    4418:	008001c4 	movi	r2,7
    441c:	14015616 	blt	r2,r16,4978 <___vfprintf_internal_r+0x1630>
    4420:	42000204 	addi	r8,r8,8
    4424:	d9013817 	ldw	r4,1248(sp)
    4428:	d9413517 	ldw	r5,1236(sp)
    442c:	84000044 	addi	r16,r16,1
    4430:	1907883a 	add	r3,r3,r4
    4434:	41400015 	stw	r5,0(r8)
    4438:	41000115 	stw	r4,4(r8)
    443c:	d8c12015 	stw	r3,1152(sp)
    4440:	dc011f15 	stw	r16,1148(sp)
    4444:	008001c4 	movi	r2,7
    4448:	14015416 	blt	r2,r16,499c <___vfprintf_internal_r+0x1654>
    444c:	44400204 	addi	r17,r8,8
    4450:	d9013717 	ldw	r4,1244(sp)
    4454:	d9413917 	ldw	r5,1252(sp)
    4458:	000d883a 	mov	r6,zero
    445c:	000f883a 	mov	r7,zero
    4460:	d8c13d15 	stw	r3,1268(sp)
    4464:	000dd040 	call	dd04 <__eqdf2>
    4468:	d8c13d17 	ldw	r3,1268(sp)
    446c:	1000a726 	beq	r2,zero,470c <___vfprintf_internal_r+0x13c4>
    4470:	d9013317 	ldw	r4,1228(sp)
    4474:	d9413117 	ldw	r5,1220(sp)
    4478:	84000044 	addi	r16,r16,1
    447c:	20bfffc4 	addi	r2,r4,-1
    4480:	1887883a 	add	r3,r3,r2
    4484:	29000044 	addi	r4,r5,1
    4488:	88800115 	stw	r2,4(r17)
    448c:	89000015 	stw	r4,0(r17)
    4490:	d8c12015 	stw	r3,1152(sp)
    4494:	dc011f15 	stw	r16,1148(sp)
    4498:	008001c4 	movi	r2,7
    449c:	14012d16 	blt	r2,r16,4954 <___vfprintf_internal_r+0x160c>
    44a0:	8c400204 	addi	r17,r17,8
    44a4:	d9413a17 	ldw	r5,1256(sp)
    44a8:	dcc122c4 	addi	r19,sp,1163
    44ac:	84000044 	addi	r16,r16,1
    44b0:	28c7883a 	add	r3,r5,r3
    44b4:	8cc00015 	stw	r19,0(r17)
    44b8:	89400115 	stw	r5,4(r17)
    44bc:	d8c12015 	stw	r3,1152(sp)
    44c0:	dc011f15 	stw	r16,1148(sp)
    44c4:	008001c4 	movi	r2,7
    44c8:	14000e16 	blt	r2,r16,4504 <___vfprintf_internal_r+0x11bc>
    44cc:	8a000204 	addi	r8,r17,8
    44d0:	003db006 	br	3b94 <__alt_data_end+0xfffae464>
    44d4:	01000074 	movhi	r4,1
    44d8:	2108cd84 	addi	r4,r4,9014
    44dc:	d9012c15 	stw	r4,1200(sp)
    44e0:	d9012c17 	ldw	r4,1200(sp)
    44e4:	1c07883a 	add	r3,r3,r16
    44e8:	44000115 	stw	r16,4(r8)
    44ec:	41000015 	stw	r4,0(r8)
    44f0:	10800044 	addi	r2,r2,1
    44f4:	d8c12015 	stw	r3,1152(sp)
    44f8:	d8811f15 	stw	r2,1148(sp)
    44fc:	010001c4 	movi	r4,7
    4500:	20bda30e 	bge	r4,r2,3b90 <__alt_data_end+0xfffae460>
    4504:	b809883a 	mov	r4,r23
    4508:	b00b883a 	mov	r5,r22
    450c:	d9811e04 	addi	r6,sp,1144
    4510:	0009f8c0 	call	9f8c <__sprint_r>
    4514:	103ca41e 	bne	r2,zero,37a8 <__alt_data_end+0xfffae078>
    4518:	d8c12017 	ldw	r3,1152(sp)
    451c:	da000404 	addi	r8,sp,16
    4520:	003d9c06 	br	3b94 <__alt_data_end+0xfffae464>
    4524:	b809883a 	mov	r4,r23
    4528:	b00b883a 	mov	r5,r22
    452c:	d9811e04 	addi	r6,sp,1144
    4530:	0009f8c0 	call	9f8c <__sprint_r>
    4534:	103dd226 	beq	r2,zero,3c80 <__alt_data_end+0xfffae550>
    4538:	003c9b06 	br	37a8 <__alt_data_end+0xfffae078>
    453c:	10803fcc 	andi	r2,r2,255
    4540:	1000311e 	bne	r2,zero,4608 <___vfprintf_internal_r+0x12c0>
    4544:	e080004c 	andi	r2,fp,1
    4548:	10002f26 	beq	r2,zero,4608 <___vfprintf_internal_r+0x12c0>
    454c:	00800c04 	movi	r2,48
    4550:	d8c10dc4 	addi	r3,sp,1079
    4554:	d8810dc5 	stb	r2,1079(sp)
    4558:	dc413c17 	ldw	r17,1264(sp)
    455c:	d8c13115 	stw	r3,1220(sp)
    4560:	003cf406 	br	3934 <__alt_data_end+0xfffae204>
    4564:	b809883a 	mov	r4,r23
    4568:	b00b883a 	mov	r5,r22
    456c:	d9811e04 	addi	r6,sp,1144
    4570:	0009f8c0 	call	9f8c <__sprint_r>
    4574:	103c8c1e 	bne	r2,zero,37a8 <__alt_data_end+0xfffae078>
    4578:	d8c12017 	ldw	r3,1152(sp)
    457c:	da000404 	addi	r8,sp,16
    4580:	003d7706 	br	3b60 <__alt_data_end+0xfffae430>
    4584:	b809883a 	mov	r4,r23
    4588:	b00b883a 	mov	r5,r22
    458c:	d9811e04 	addi	r6,sp,1144
    4590:	0009f8c0 	call	9f8c <__sprint_r>
    4594:	103c841e 	bne	r2,zero,37a8 <__alt_data_end+0xfffae078>
    4598:	d8c12017 	ldw	r3,1152(sp)
    459c:	da000404 	addi	r8,sp,16
    45a0:	003d3506 	br	3a78 <__alt_data_end+0xfffae348>
    45a4:	b809883a 	mov	r4,r23
    45a8:	b00b883a 	mov	r5,r22
    45ac:	d9811e04 	addi	r6,sp,1144
    45b0:	0009f8c0 	call	9f8c <__sprint_r>
    45b4:	103c7c1e 	bne	r2,zero,37a8 <__alt_data_end+0xfffae078>
    45b8:	d8c12017 	ldw	r3,1152(sp)
    45bc:	da000404 	addi	r8,sp,16
    45c0:	003d3b06 	br	3ab0 <__alt_data_end+0xfffae380>
    45c4:	d9413b17 	ldw	r5,1260(sp)
    45c8:	d8c10e04 	addi	r3,sp,1080
    45cc:	908003cc 	andi	r2,r18,15
    45d0:	a808973a 	slli	r4,r21,28
    45d4:	2885883a 	add	r2,r5,r2
    45d8:	9024d13a 	srli	r18,r18,4
    45dc:	10800003 	ldbu	r2,0(r2)
    45e0:	a82ad13a 	srli	r21,r21,4
    45e4:	18ffffc4 	addi	r3,r3,-1
    45e8:	24a4b03a 	or	r18,r4,r18
    45ec:	18800005 	stb	r2,0(r3)
    45f0:	9544b03a 	or	r2,r18,r21
    45f4:	103ff51e 	bne	r2,zero,45cc <__alt_data_end+0xfffaee9c>
    45f8:	d9412817 	ldw	r5,1184(sp)
    45fc:	d8c13115 	stw	r3,1220(sp)
    4600:	28e3c83a 	sub	r17,r5,r3
    4604:	003ccb06 	br	3934 <__alt_data_end+0xfffae204>
    4608:	d8c10e04 	addi	r3,sp,1080
    460c:	0023883a 	mov	r17,zero
    4610:	d8c13115 	stw	r3,1220(sp)
    4614:	003cc706 	br	3934 <__alt_data_end+0xfffae204>
    4618:	dc012617 	ldw	r16,1176(sp)
    461c:	0401ab0e 	bge	zero,r16,4ccc <___vfprintf_internal_r+0x1984>
    4620:	d8813317 	ldw	r2,1228(sp)
    4624:	d9413117 	ldw	r5,1220(sp)
    4628:	d9013417 	ldw	r4,1232(sp)
    462c:	1023883a 	mov	r17,r2
    4630:	28a1883a 	add	r16,r5,r2
    4634:	2080010e 	bge	r4,r2,463c <___vfprintf_internal_r+0x12f4>
    4638:	2023883a 	mov	r17,r4
    463c:	04400b0e 	bge	zero,r17,466c <___vfprintf_internal_r+0x1324>
    4640:	d8811f17 	ldw	r2,1148(sp)
    4644:	d9413117 	ldw	r5,1220(sp)
    4648:	1c47883a 	add	r3,r3,r17
    464c:	10800044 	addi	r2,r2,1
    4650:	41400015 	stw	r5,0(r8)
    4654:	44400115 	stw	r17,4(r8)
    4658:	d8c12015 	stw	r3,1152(sp)
    465c:	d8811f15 	stw	r2,1148(sp)
    4660:	010001c4 	movi	r4,7
    4664:	20826716 	blt	r4,r2,5004 <___vfprintf_internal_r+0x1cbc>
    4668:	42000204 	addi	r8,r8,8
    466c:	88026316 	blt	r17,zero,4ffc <___vfprintf_internal_r+0x1cb4>
    4670:	d8813417 	ldw	r2,1232(sp)
    4674:	1463c83a 	sub	r17,r2,r17
    4678:	0440590e 	bge	zero,r17,47e0 <___vfprintf_internal_r+0x1498>
    467c:	04c00404 	movi	r19,16
    4680:	d8811f17 	ldw	r2,1148(sp)
    4684:	9c41770e 	bge	r19,r17,4c64 <___vfprintf_internal_r+0x191c>
    4688:	01400074 	movhi	r5,1
    468c:	2948cd84 	addi	r5,r5,9014
    4690:	d9412c15 	stw	r5,1200(sp)
    4694:	054001c4 	movi	r21,7
    4698:	00000306 	br	46a8 <___vfprintf_internal_r+0x1360>
    469c:	42000204 	addi	r8,r8,8
    46a0:	8c7ffc04 	addi	r17,r17,-16
    46a4:	9c41720e 	bge	r19,r17,4c70 <___vfprintf_internal_r+0x1928>
    46a8:	18c00404 	addi	r3,r3,16
    46ac:	10800044 	addi	r2,r2,1
    46b0:	45000015 	stw	r20,0(r8)
    46b4:	44c00115 	stw	r19,4(r8)
    46b8:	d8c12015 	stw	r3,1152(sp)
    46bc:	d8811f15 	stw	r2,1148(sp)
    46c0:	a8bff60e 	bge	r21,r2,469c <__alt_data_end+0xfffaef6c>
    46c4:	b809883a 	mov	r4,r23
    46c8:	b00b883a 	mov	r5,r22
    46cc:	d9811e04 	addi	r6,sp,1144
    46d0:	0009f8c0 	call	9f8c <__sprint_r>
    46d4:	103c341e 	bne	r2,zero,37a8 <__alt_data_end+0xfffae078>
    46d8:	d8c12017 	ldw	r3,1152(sp)
    46dc:	d8811f17 	ldw	r2,1148(sp)
    46e0:	da000404 	addi	r8,sp,16
    46e4:	003fee06 	br	46a0 <__alt_data_end+0xfffaef70>
    46e8:	b809883a 	mov	r4,r23
    46ec:	b00b883a 	mov	r5,r22
    46f0:	d9811e04 	addi	r6,sp,1144
    46f4:	0009f8c0 	call	9f8c <__sprint_r>
    46f8:	103c2b1e 	bne	r2,zero,37a8 <__alt_data_end+0xfffae078>
    46fc:	d8c12017 	ldw	r3,1152(sp)
    4700:	d8812787 	ldb	r2,1182(sp)
    4704:	da000404 	addi	r8,sp,16
    4708:	003cce06 	br	3a44 <__alt_data_end+0xfffae314>
    470c:	d8813317 	ldw	r2,1228(sp)
    4710:	14ffffc4 	addi	r19,r2,-1
    4714:	04ff630e 	bge	zero,r19,44a4 <__alt_data_end+0xfffaed74>
    4718:	05400404 	movi	r21,16
    471c:	acc0810e 	bge	r21,r19,4924 <___vfprintf_internal_r+0x15dc>
    4720:	01400074 	movhi	r5,1
    4724:	2948cd84 	addi	r5,r5,9014
    4728:	d9412c15 	stw	r5,1200(sp)
    472c:	01c001c4 	movi	r7,7
    4730:	00000306 	br	4740 <___vfprintf_internal_r+0x13f8>
    4734:	8c400204 	addi	r17,r17,8
    4738:	9cfffc04 	addi	r19,r19,-16
    473c:	acc07c0e 	bge	r21,r19,4930 <___vfprintf_internal_r+0x15e8>
    4740:	18c00404 	addi	r3,r3,16
    4744:	84000044 	addi	r16,r16,1
    4748:	8d000015 	stw	r20,0(r17)
    474c:	8d400115 	stw	r21,4(r17)
    4750:	d8c12015 	stw	r3,1152(sp)
    4754:	dc011f15 	stw	r16,1148(sp)
    4758:	3c3ff60e 	bge	r7,r16,4734 <__alt_data_end+0xfffaf004>
    475c:	b809883a 	mov	r4,r23
    4760:	b00b883a 	mov	r5,r22
    4764:	d9811e04 	addi	r6,sp,1144
    4768:	d9c13d15 	stw	r7,1268(sp)
    476c:	0009f8c0 	call	9f8c <__sprint_r>
    4770:	d9c13d17 	ldw	r7,1268(sp)
    4774:	103c0c1e 	bne	r2,zero,37a8 <__alt_data_end+0xfffae078>
    4778:	d8c12017 	ldw	r3,1152(sp)
    477c:	dc011f17 	ldw	r16,1148(sp)
    4780:	dc400404 	addi	r17,sp,16
    4784:	003fec06 	br	4738 <__alt_data_end+0xfffaf008>
    4788:	00800084 	movi	r2,2
    478c:	9546b03a 	or	r3,r18,r21
    4790:	003d7d06 	br	3d88 <__alt_data_end+0xfffae658>
    4794:	10803fcc 	andi	r2,r2,255
    4798:	1080201c 	xori	r2,r2,128
    479c:	10bfe004 	addi	r2,r2,-128
    47a0:	01000c04 	movi	r4,48
    47a4:	1101d726 	beq	r2,r4,4f04 <___vfprintf_internal_r+0x1bbc>
    47a8:	d9413117 	ldw	r5,1220(sp)
    47ac:	d8812817 	ldw	r2,1184(sp)
    47b0:	193fffc5 	stb	r4,-1(r3)
    47b4:	297fffc4 	addi	r5,r5,-1
    47b8:	d9413115 	stw	r5,1220(sp)
    47bc:	1163c83a 	sub	r17,r2,r5
    47c0:	003c5c06 	br	3934 <__alt_data_end+0xfffae204>
    47c4:	b809883a 	mov	r4,r23
    47c8:	b00b883a 	mov	r5,r22
    47cc:	d9811e04 	addi	r6,sp,1144
    47d0:	0009f8c0 	call	9f8c <__sprint_r>
    47d4:	103bf41e 	bne	r2,zero,37a8 <__alt_data_end+0xfffae078>
    47d8:	d8c12017 	ldw	r3,1152(sp)
    47dc:	da000404 	addi	r8,sp,16
    47e0:	d9413117 	ldw	r5,1220(sp)
    47e4:	d9013417 	ldw	r4,1232(sp)
    47e8:	d8812617 	ldw	r2,1176(sp)
    47ec:	2923883a 	add	r17,r5,r4
    47f0:	d9413317 	ldw	r5,1228(sp)
    47f4:	11400216 	blt	r2,r5,4800 <___vfprintf_internal_r+0x14b8>
    47f8:	e100004c 	andi	r4,fp,1
    47fc:	20000d26 	beq	r4,zero,4834 <___vfprintf_internal_r+0x14ec>
    4800:	d9013817 	ldw	r4,1248(sp)
    4804:	d9413517 	ldw	r5,1236(sp)
    4808:	1907883a 	add	r3,r3,r4
    480c:	d9011f17 	ldw	r4,1148(sp)
    4810:	41400015 	stw	r5,0(r8)
    4814:	d9413817 	ldw	r5,1248(sp)
    4818:	21000044 	addi	r4,r4,1
    481c:	d8c12015 	stw	r3,1152(sp)
    4820:	41400115 	stw	r5,4(r8)
    4824:	d9011f15 	stw	r4,1148(sp)
    4828:	014001c4 	movi	r5,7
    482c:	2901fd16 	blt	r5,r4,5024 <___vfprintf_internal_r+0x1cdc>
    4830:	42000204 	addi	r8,r8,8
    4834:	d9013317 	ldw	r4,1228(sp)
    4838:	2085c83a 	sub	r2,r4,r2
    483c:	8449c83a 	sub	r4,r16,r17
    4840:	1021883a 	mov	r16,r2
    4844:	2080010e 	bge	r4,r2,484c <___vfprintf_internal_r+0x1504>
    4848:	2021883a 	mov	r16,r4
    484c:	04000a0e 	bge	zero,r16,4878 <___vfprintf_internal_r+0x1530>
    4850:	d9011f17 	ldw	r4,1148(sp)
    4854:	1c07883a 	add	r3,r3,r16
    4858:	44400015 	stw	r17,0(r8)
    485c:	21000044 	addi	r4,r4,1
    4860:	44000115 	stw	r16,4(r8)
    4864:	d8c12015 	stw	r3,1152(sp)
    4868:	d9011f15 	stw	r4,1148(sp)
    486c:	014001c4 	movi	r5,7
    4870:	29020916 	blt	r5,r4,5098 <___vfprintf_internal_r+0x1d50>
    4874:	42000204 	addi	r8,r8,8
    4878:	80020116 	blt	r16,zero,5080 <___vfprintf_internal_r+0x1d38>
    487c:	1421c83a 	sub	r16,r2,r16
    4880:	043cc40e 	bge	zero,r16,3b94 <__alt_data_end+0xfffae464>
    4884:	04400404 	movi	r17,16
    4888:	d8811f17 	ldw	r2,1148(sp)
    488c:	8c3f110e 	bge	r17,r16,44d4 <__alt_data_end+0xfffaeda4>
    4890:	01400074 	movhi	r5,1
    4894:	2948cd84 	addi	r5,r5,9014
    4898:	d9412c15 	stw	r5,1200(sp)
    489c:	04c001c4 	movi	r19,7
    48a0:	00000306 	br	48b0 <___vfprintf_internal_r+0x1568>
    48a4:	42000204 	addi	r8,r8,8
    48a8:	843ffc04 	addi	r16,r16,-16
    48ac:	8c3f0c0e 	bge	r17,r16,44e0 <__alt_data_end+0xfffaedb0>
    48b0:	18c00404 	addi	r3,r3,16
    48b4:	10800044 	addi	r2,r2,1
    48b8:	45000015 	stw	r20,0(r8)
    48bc:	44400115 	stw	r17,4(r8)
    48c0:	d8c12015 	stw	r3,1152(sp)
    48c4:	d8811f15 	stw	r2,1148(sp)
    48c8:	98bff60e 	bge	r19,r2,48a4 <__alt_data_end+0xfffaf174>
    48cc:	b809883a 	mov	r4,r23
    48d0:	b00b883a 	mov	r5,r22
    48d4:	d9811e04 	addi	r6,sp,1144
    48d8:	0009f8c0 	call	9f8c <__sprint_r>
    48dc:	103bb21e 	bne	r2,zero,37a8 <__alt_data_end+0xfffae078>
    48e0:	d8c12017 	ldw	r3,1152(sp)
    48e4:	d8811f17 	ldw	r2,1148(sp)
    48e8:	da000404 	addi	r8,sp,16
    48ec:	003fee06 	br	48a8 <__alt_data_end+0xfffaf178>
    48f0:	e088703a 	and	r4,fp,r2
    48f4:	203ec01e 	bne	r4,zero,43f8 <__alt_data_end+0xfffaecc8>
    48f8:	dc011f17 	ldw	r16,1148(sp)
    48fc:	d9013117 	ldw	r4,1220(sp)
    4900:	40800115 	stw	r2,4(r8)
    4904:	84000044 	addi	r16,r16,1
    4908:	41000015 	stw	r4,0(r8)
    490c:	d8c12015 	stw	r3,1152(sp)
    4910:	dc011f15 	stw	r16,1148(sp)
    4914:	008001c4 	movi	r2,7
    4918:	14000e16 	blt	r2,r16,4954 <___vfprintf_internal_r+0x160c>
    491c:	44400204 	addi	r17,r8,8
    4920:	003ee006 	br	44a4 <__alt_data_end+0xfffaed74>
    4924:	01000074 	movhi	r4,1
    4928:	2108cd84 	addi	r4,r4,9014
    492c:	d9012c15 	stw	r4,1200(sp)
    4930:	d8812c17 	ldw	r2,1200(sp)
    4934:	1cc7883a 	add	r3,r3,r19
    4938:	84000044 	addi	r16,r16,1
    493c:	88800015 	stw	r2,0(r17)
    4940:	8cc00115 	stw	r19,4(r17)
    4944:	d8c12015 	stw	r3,1152(sp)
    4948:	dc011f15 	stw	r16,1148(sp)
    494c:	008001c4 	movi	r2,7
    4950:	143ed30e 	bge	r2,r16,44a0 <__alt_data_end+0xfffaed70>
    4954:	b809883a 	mov	r4,r23
    4958:	b00b883a 	mov	r5,r22
    495c:	d9811e04 	addi	r6,sp,1144
    4960:	0009f8c0 	call	9f8c <__sprint_r>
    4964:	103b901e 	bne	r2,zero,37a8 <__alt_data_end+0xfffae078>
    4968:	d8c12017 	ldw	r3,1152(sp)
    496c:	dc011f17 	ldw	r16,1148(sp)
    4970:	dc400404 	addi	r17,sp,16
    4974:	003ecb06 	br	44a4 <__alt_data_end+0xfffaed74>
    4978:	b809883a 	mov	r4,r23
    497c:	b00b883a 	mov	r5,r22
    4980:	d9811e04 	addi	r6,sp,1144
    4984:	0009f8c0 	call	9f8c <__sprint_r>
    4988:	103b871e 	bne	r2,zero,37a8 <__alt_data_end+0xfffae078>
    498c:	d8c12017 	ldw	r3,1152(sp)
    4990:	dc011f17 	ldw	r16,1148(sp)
    4994:	da000404 	addi	r8,sp,16
    4998:	003ea206 	br	4424 <__alt_data_end+0xfffaecf4>
    499c:	b809883a 	mov	r4,r23
    49a0:	b00b883a 	mov	r5,r22
    49a4:	d9811e04 	addi	r6,sp,1144
    49a8:	0009f8c0 	call	9f8c <__sprint_r>
    49ac:	103b7e1e 	bne	r2,zero,37a8 <__alt_data_end+0xfffae078>
    49b0:	d8c12017 	ldw	r3,1152(sp)
    49b4:	dc011f17 	ldw	r16,1148(sp)
    49b8:	dc400404 	addi	r17,sp,16
    49bc:	003ea406 	br	4450 <__alt_data_end+0xfffaed20>
    49c0:	b809883a 	mov	r4,r23
    49c4:	b00b883a 	mov	r5,r22
    49c8:	d9811e04 	addi	r6,sp,1144
    49cc:	0009f8c0 	call	9f8c <__sprint_r>
    49d0:	103b751e 	bne	r2,zero,37a8 <__alt_data_end+0xfffae078>
    49d4:	d8c12017 	ldw	r3,1152(sp)
    49d8:	da000404 	addi	r8,sp,16
    49dc:	003c3706 	br	3abc <__alt_data_end+0xfffae38c>
    49e0:	04a5c83a 	sub	r18,zero,r18
    49e4:	9004c03a 	cmpne	r2,r18,zero
    49e8:	056bc83a 	sub	r21,zero,r21
    49ec:	a8abc83a 	sub	r21,r21,r2
    49f0:	04c00b44 	movi	r19,45
    49f4:	dcc12785 	stb	r19,1182(sp)
    49f8:	da413215 	stw	r9,1224(sp)
    49fc:	00800044 	movi	r2,1
    4a00:	9546b03a 	or	r3,r18,r21
    4a04:	003bb106 	br	38cc <__alt_data_end+0xfffae19c>
    4a08:	da013f15 	stw	r8,1276(sp)
    4a0c:	da413e15 	stw	r9,1272(sp)
    4a10:	0009c3c0 	call	9c3c <__fpclassifyd>
    4a14:	da013f17 	ldw	r8,1276(sp)
    4a18:	da413e17 	ldw	r9,1272(sp)
    4a1c:	1000e526 	beq	r2,zero,4db4 <___vfprintf_internal_r+0x1a6c>
    4a20:	04fff7c4 	movi	r19,-33
    4a24:	00bfffc4 	movi	r2,-1
    4a28:	84e6703a 	and	r19,r16,r19
    4a2c:	48822926 	beq	r9,r2,52d4 <___vfprintf_internal_r+0x1f8c>
    4a30:	008011c4 	movi	r2,71
    4a34:	98821626 	beq	r19,r2,5290 <___vfprintf_internal_r+0x1f48>
    4a38:	d9013917 	ldw	r4,1252(sp)
    4a3c:	e0c04014 	ori	r3,fp,256
    4a40:	d8c12d15 	stw	r3,1204(sp)
    4a44:	20021f16 	blt	r4,zero,52c4 <___vfprintf_internal_r+0x1f7c>
    4a48:	dc413917 	ldw	r17,1252(sp)
    4a4c:	d8012b05 	stb	zero,1196(sp)
    4a50:	00801984 	movi	r2,102
    4a54:	80814d26 	beq	r16,r2,4f8c <___vfprintf_internal_r+0x1c44>
    4a58:	00801184 	movi	r2,70
    4a5c:	80814b26 	beq	r16,r2,4f8c <___vfprintf_internal_r+0x1c44>
    4a60:	00801144 	movi	r2,69
    4a64:	98821d26 	beq	r19,r2,52dc <___vfprintf_internal_r+0x1f94>
    4a68:	482b883a 	mov	r21,r9
    4a6c:	d8812604 	addi	r2,sp,1176
    4a70:	d8800115 	stw	r2,4(sp)
    4a74:	d9413717 	ldw	r5,1244(sp)
    4a78:	d8812504 	addi	r2,sp,1172
    4a7c:	d8800215 	stw	r2,8(sp)
    4a80:	d8812104 	addi	r2,sp,1156
    4a84:	dd400015 	stw	r21,0(sp)
    4a88:	d8800315 	stw	r2,12(sp)
    4a8c:	b809883a 	mov	r4,r23
    4a90:	880d883a 	mov	r6,r17
    4a94:	01c00084 	movi	r7,2
    4a98:	da013f15 	stw	r8,1276(sp)
    4a9c:	da413e15 	stw	r9,1272(sp)
    4aa0:	00057c00 	call	57c0 <_dtoa_r>
    4aa4:	d8813115 	stw	r2,1220(sp)
    4aa8:	008019c4 	movi	r2,103
    4aac:	da013f17 	ldw	r8,1276(sp)
    4ab0:	da413e17 	ldw	r9,1272(sp)
    4ab4:	80800226 	beq	r16,r2,4ac0 <___vfprintf_internal_r+0x1778>
    4ab8:	008011c4 	movi	r2,71
    4abc:	8081451e 	bne	r16,r2,4fd4 <___vfprintf_internal_r+0x1c8c>
    4ac0:	e080004c 	andi	r2,fp,1
    4ac4:	10021e26 	beq	r2,zero,5340 <___vfprintf_internal_r+0x1ff8>
    4ac8:	d8c13117 	ldw	r3,1220(sp)
    4acc:	1d55883a 	add	r10,r3,r21
    4ad0:	d9013717 	ldw	r4,1244(sp)
    4ad4:	880b883a 	mov	r5,r17
    4ad8:	000d883a 	mov	r6,zero
    4adc:	000f883a 	mov	r7,zero
    4ae0:	da013f15 	stw	r8,1276(sp)
    4ae4:	da413e15 	stw	r9,1272(sp)
    4ae8:	da813d15 	stw	r10,1268(sp)
    4aec:	000dd040 	call	dd04 <__eqdf2>
    4af0:	da013f17 	ldw	r8,1276(sp)
    4af4:	da413e17 	ldw	r9,1272(sp)
    4af8:	da813d17 	ldw	r10,1268(sp)
    4afc:	1001a126 	beq	r2,zero,5184 <___vfprintf_internal_r+0x1e3c>
    4b00:	d8812117 	ldw	r2,1156(sp)
    4b04:	1280062e 	bgeu	r2,r10,4b20 <___vfprintf_internal_r+0x17d8>
    4b08:	01000c04 	movi	r4,48
    4b0c:	10c00044 	addi	r3,r2,1
    4b10:	d8c12115 	stw	r3,1156(sp)
    4b14:	11000005 	stb	r4,0(r2)
    4b18:	d8812117 	ldw	r2,1156(sp)
    4b1c:	12bffb36 	bltu	r2,r10,4b0c <__alt_data_end+0xfffaf3dc>
    4b20:	d8c13117 	ldw	r3,1220(sp)
    4b24:	10c5c83a 	sub	r2,r2,r3
    4b28:	d8813315 	stw	r2,1228(sp)
    4b2c:	008011c4 	movi	r2,71
    4b30:	98818926 	beq	r19,r2,5158 <___vfprintf_internal_r+0x1e10>
    4b34:	00801944 	movi	r2,101
    4b38:	14023c0e 	bge	r2,r16,542c <___vfprintf_internal_r+0x20e4>
    4b3c:	d8c12617 	ldw	r3,1176(sp)
    4b40:	00801984 	movi	r2,102
    4b44:	d8c13415 	stw	r3,1232(sp)
    4b48:	8081ef26 	beq	r16,r2,5308 <___vfprintf_internal_r+0x1fc0>
    4b4c:	d8c13417 	ldw	r3,1232(sp)
    4b50:	d9013317 	ldw	r4,1228(sp)
    4b54:	1901e316 	blt	r3,r4,52e4 <___vfprintf_internal_r+0x1f9c>
    4b58:	e080004c 	andi	r2,fp,1
    4b5c:	1001f426 	beq	r2,zero,5330 <___vfprintf_internal_r+0x1fe8>
    4b60:	d8c13417 	ldw	r3,1232(sp)
    4b64:	1c400044 	addi	r17,r3,1
    4b68:	8839883a 	mov	fp,r17
    4b6c:	8801e416 	blt	r17,zero,5300 <___vfprintf_internal_r+0x1fb8>
    4b70:	dd412b07 	ldb	r21,1196(sp)
    4b74:	a801701e 	bne	r21,zero,5138 <___vfprintf_internal_r+0x1df0>
    4b78:	df012b15 	stw	fp,1196(sp)
    4b7c:	dcc12783 	ldbu	r19,1182(sp)
    4b80:	df012d17 	ldw	fp,1204(sp)
    4b84:	d8013215 	stw	zero,1224(sp)
    4b88:	dc812d15 	stw	r18,1204(sp)
    4b8c:	003b6e06 	br	3948 <__alt_data_end+0xfffae218>
    4b90:	e080040c 	andi	r2,fp,16
    4b94:	1000b51e 	bne	r2,zero,4e6c <___vfprintf_internal_r+0x1b24>
    4b98:	e080100c 	andi	r2,fp,64
    4b9c:	10015b26 	beq	r2,zero,510c <___vfprintf_internal_r+0x1dc4>
    4ba0:	d9012d17 	ldw	r4,1204(sp)
    4ba4:	d9412f17 	ldw	r5,1212(sp)
    4ba8:	20800017 	ldw	r2,0(r4)
    4bac:	21000104 	addi	r4,r4,4
    4bb0:	d9012d15 	stw	r4,1204(sp)
    4bb4:	1140000d 	sth	r5,0(r2)
    4bb8:	003a2006 	br	343c <__alt_data_end+0xfffadd0c>
    4bbc:	e0c0100c 	andi	r3,fp,64
    4bc0:	1800a226 	beq	r3,zero,4e4c <___vfprintf_internal_r+0x1b04>
    4bc4:	d8c12d17 	ldw	r3,1204(sp)
    4bc8:	1480000b 	ldhu	r18,0(r2)
    4bcc:	002b883a 	mov	r21,zero
    4bd0:	18c00104 	addi	r3,r3,4
    4bd4:	d8c12d15 	stw	r3,1204(sp)
    4bd8:	0005883a 	mov	r2,zero
    4bdc:	9007883a 	mov	r3,r18
    4be0:	003c6906 	br	3d88 <__alt_data_end+0xfffae658>
    4be4:	e0c0100c 	andi	r3,fp,64
    4be8:	18009026 	beq	r3,zero,4e2c <___vfprintf_internal_r+0x1ae4>
    4bec:	1480000b 	ldhu	r18,0(r2)
    4bf0:	d8812d17 	ldw	r2,1204(sp)
    4bf4:	002b883a 	mov	r21,zero
    4bf8:	9007883a 	mov	r3,r18
    4bfc:	10800104 	addi	r2,r2,4
    4c00:	d8812d15 	stw	r2,1204(sp)
    4c04:	00800044 	movi	r2,1
    4c08:	003c5f06 	br	3d88 <__alt_data_end+0xfffae658>
    4c0c:	e0c0100c 	andi	r3,fp,64
    4c10:	18008026 	beq	r3,zero,4e14 <___vfprintf_internal_r+0x1acc>
    4c14:	d9012d17 	ldw	r4,1204(sp)
    4c18:	1480000b 	ldhu	r18,0(r2)
    4c1c:	002b883a 	mov	r21,zero
    4c20:	21000104 	addi	r4,r4,4
    4c24:	d9012d15 	stw	r4,1204(sp)
    4c28:	003c7906 	br	3e10 <__alt_data_end+0xfffae6e0>
    4c2c:	e080100c 	andi	r2,fp,64
    4c30:	10007126 	beq	r2,zero,4df8 <___vfprintf_internal_r+0x1ab0>
    4c34:	1c80000f 	ldh	r18,0(r3)
    4c38:	d8812d17 	ldw	r2,1204(sp)
    4c3c:	902bd7fa 	srai	r21,r18,31
    4c40:	10800104 	addi	r2,r2,4
    4c44:	d8812d15 	stw	r2,1204(sp)
    4c48:	a805883a 	mov	r2,r21
    4c4c:	003b1a06 	br	38b8 <__alt_data_end+0xfffae188>
    4c50:	e4000007 	ldb	r16,0(fp)
    4c54:	e005883a 	mov	r2,fp
    4c58:	003a2306 	br	34e8 <__alt_data_end+0xfffaddb8>
    4c5c:	00800084 	movi	r2,2
    4c60:	003c4906 	br	3d88 <__alt_data_end+0xfffae658>
    4c64:	01000074 	movhi	r4,1
    4c68:	2108cd84 	addi	r4,r4,9014
    4c6c:	d9012c15 	stw	r4,1200(sp)
    4c70:	d9012c17 	ldw	r4,1200(sp)
    4c74:	1c47883a 	add	r3,r3,r17
    4c78:	10800044 	addi	r2,r2,1
    4c7c:	41000015 	stw	r4,0(r8)
    4c80:	44400115 	stw	r17,4(r8)
    4c84:	d8c12015 	stw	r3,1152(sp)
    4c88:	d8811f15 	stw	r2,1148(sp)
    4c8c:	010001c4 	movi	r4,7
    4c90:	20becc16 	blt	r4,r2,47c4 <__alt_data_end+0xfffaf094>
    4c94:	42000204 	addi	r8,r8,8
    4c98:	003ed106 	br	47e0 <__alt_data_end+0xfffaf0b0>
    4c9c:	01000074 	movhi	r4,1
    4ca0:	2108cd84 	addi	r4,r4,9014
    4ca4:	d9012c15 	stw	r4,1200(sp)
    4ca8:	003ba306 	br	3b38 <__alt_data_end+0xfffae408>
    4cac:	b809883a 	mov	r4,r23
    4cb0:	b00b883a 	mov	r5,r22
    4cb4:	d9811e04 	addi	r6,sp,1144
    4cb8:	0009f8c0 	call	9f8c <__sprint_r>
    4cbc:	103aba1e 	bne	r2,zero,37a8 <__alt_data_end+0xfffae078>
    4cc0:	d8c12017 	ldw	r3,1152(sp)
    4cc4:	da000404 	addi	r8,sp,16
    4cc8:	003d6c06 	br	427c <__alt_data_end+0xfffaeb4c>
    4ccc:	d8811f17 	ldw	r2,1148(sp)
    4cd0:	01400074 	movhi	r5,1
    4cd4:	01000044 	movi	r4,1
    4cd8:	18c00044 	addi	r3,r3,1
    4cdc:	10800044 	addi	r2,r2,1
    4ce0:	2948cd04 	addi	r5,r5,9012
    4ce4:	41000115 	stw	r4,4(r8)
    4ce8:	41400015 	stw	r5,0(r8)
    4cec:	d8c12015 	stw	r3,1152(sp)
    4cf0:	d8811f15 	stw	r2,1148(sp)
    4cf4:	010001c4 	movi	r4,7
    4cf8:	20806716 	blt	r4,r2,4e98 <___vfprintf_internal_r+0x1b50>
    4cfc:	42000204 	addi	r8,r8,8
    4d00:	8000041e 	bne	r16,zero,4d14 <___vfprintf_internal_r+0x19cc>
    4d04:	d8813317 	ldw	r2,1228(sp)
    4d08:	1000021e 	bne	r2,zero,4d14 <___vfprintf_internal_r+0x19cc>
    4d0c:	e080004c 	andi	r2,fp,1
    4d10:	103ba026 	beq	r2,zero,3b94 <__alt_data_end+0xfffae464>
    4d14:	d9013817 	ldw	r4,1248(sp)
    4d18:	d8811f17 	ldw	r2,1148(sp)
    4d1c:	d9413517 	ldw	r5,1236(sp)
    4d20:	1907883a 	add	r3,r3,r4
    4d24:	10800044 	addi	r2,r2,1
    4d28:	41000115 	stw	r4,4(r8)
    4d2c:	41400015 	stw	r5,0(r8)
    4d30:	d8c12015 	stw	r3,1152(sp)
    4d34:	d8811f15 	stw	r2,1148(sp)
    4d38:	010001c4 	movi	r4,7
    4d3c:	20815716 	blt	r4,r2,529c <___vfprintf_internal_r+0x1f54>
    4d40:	42000204 	addi	r8,r8,8
    4d44:	0421c83a 	sub	r16,zero,r16
    4d48:	0400810e 	bge	zero,r16,4f50 <___vfprintf_internal_r+0x1c08>
    4d4c:	04400404 	movi	r17,16
    4d50:	8c00bd0e 	bge	r17,r16,5048 <___vfprintf_internal_r+0x1d00>
    4d54:	01400074 	movhi	r5,1
    4d58:	2948cd84 	addi	r5,r5,9014
    4d5c:	d9412c15 	stw	r5,1200(sp)
    4d60:	04c001c4 	movi	r19,7
    4d64:	00000306 	br	4d74 <___vfprintf_internal_r+0x1a2c>
    4d68:	42000204 	addi	r8,r8,8
    4d6c:	843ffc04 	addi	r16,r16,-16
    4d70:	8c00b80e 	bge	r17,r16,5054 <___vfprintf_internal_r+0x1d0c>
    4d74:	18c00404 	addi	r3,r3,16
    4d78:	10800044 	addi	r2,r2,1
    4d7c:	45000015 	stw	r20,0(r8)
    4d80:	44400115 	stw	r17,4(r8)
    4d84:	d8c12015 	stw	r3,1152(sp)
    4d88:	d8811f15 	stw	r2,1148(sp)
    4d8c:	98bff60e 	bge	r19,r2,4d68 <__alt_data_end+0xfffaf638>
    4d90:	b809883a 	mov	r4,r23
    4d94:	b00b883a 	mov	r5,r22
    4d98:	d9811e04 	addi	r6,sp,1144
    4d9c:	0009f8c0 	call	9f8c <__sprint_r>
    4da0:	103a811e 	bne	r2,zero,37a8 <__alt_data_end+0xfffae078>
    4da4:	d8c12017 	ldw	r3,1152(sp)
    4da8:	d8811f17 	ldw	r2,1148(sp)
    4dac:	da000404 	addi	r8,sp,16
    4db0:	003fee06 	br	4d6c <__alt_data_end+0xfffaf63c>
    4db4:	008011c4 	movi	r2,71
    4db8:	1400db16 	blt	r2,r16,5128 <___vfprintf_internal_r+0x1de0>
    4dbc:	01000074 	movhi	r4,1
    4dc0:	2108bf04 	addi	r4,r4,8956
    4dc4:	d9013115 	stw	r4,1220(sp)
    4dc8:	00c000c4 	movi	r3,3
    4dcc:	00bfdfc4 	movi	r2,-129
    4dd0:	d8c12b15 	stw	r3,1196(sp)
    4dd4:	e0b8703a 	and	fp,fp,r2
    4dd8:	dcc12783 	ldbu	r19,1182(sp)
    4ddc:	dc812d15 	stw	r18,1204(sp)
    4de0:	1823883a 	mov	r17,r3
    4de4:	d8013215 	stw	zero,1224(sp)
    4de8:	d8013415 	stw	zero,1232(sp)
    4dec:	003ad606 	br	3948 <__alt_data_end+0xfffae218>
    4df0:	4823883a 	mov	r17,r9
    4df4:	003cc906 	br	411c <__alt_data_end+0xfffae9ec>
    4df8:	1c800017 	ldw	r18,0(r3)
    4dfc:	d8c12d17 	ldw	r3,1204(sp)
    4e00:	902bd7fa 	srai	r21,r18,31
    4e04:	18c00104 	addi	r3,r3,4
    4e08:	d8c12d15 	stw	r3,1204(sp)
    4e0c:	a805883a 	mov	r2,r21
    4e10:	003aa906 	br	38b8 <__alt_data_end+0xfffae188>
    4e14:	d9412d17 	ldw	r5,1204(sp)
    4e18:	14800017 	ldw	r18,0(r2)
    4e1c:	002b883a 	mov	r21,zero
    4e20:	29400104 	addi	r5,r5,4
    4e24:	d9412d15 	stw	r5,1204(sp)
    4e28:	003bf906 	br	3e10 <__alt_data_end+0xfffae6e0>
    4e2c:	d8c12d17 	ldw	r3,1204(sp)
    4e30:	14800017 	ldw	r18,0(r2)
    4e34:	002b883a 	mov	r21,zero
    4e38:	18c00104 	addi	r3,r3,4
    4e3c:	d8c12d15 	stw	r3,1204(sp)
    4e40:	00800044 	movi	r2,1
    4e44:	9007883a 	mov	r3,r18
    4e48:	003bcf06 	br	3d88 <__alt_data_end+0xfffae658>
    4e4c:	d9012d17 	ldw	r4,1204(sp)
    4e50:	14800017 	ldw	r18,0(r2)
    4e54:	002b883a 	mov	r21,zero
    4e58:	21000104 	addi	r4,r4,4
    4e5c:	d9012d15 	stw	r4,1204(sp)
    4e60:	0005883a 	mov	r2,zero
    4e64:	9007883a 	mov	r3,r18
    4e68:	003bc706 	br	3d88 <__alt_data_end+0xfffae658>
    4e6c:	d9412d17 	ldw	r5,1204(sp)
    4e70:	d8c12f17 	ldw	r3,1212(sp)
    4e74:	28800017 	ldw	r2,0(r5)
    4e78:	29400104 	addi	r5,r5,4
    4e7c:	d9412d15 	stw	r5,1204(sp)
    4e80:	10c00015 	stw	r3,0(r2)
    4e84:	00396d06 	br	343c <__alt_data_end+0xfffadd0c>
    4e88:	01000074 	movhi	r4,1
    4e8c:	2108bd04 	addi	r4,r4,8948
    4e90:	d9013115 	stw	r4,1220(sp)
    4e94:	003ba206 	br	3d20 <__alt_data_end+0xfffae5f0>
    4e98:	b809883a 	mov	r4,r23
    4e9c:	b00b883a 	mov	r5,r22
    4ea0:	d9811e04 	addi	r6,sp,1144
    4ea4:	0009f8c0 	call	9f8c <__sprint_r>
    4ea8:	103a3f1e 	bne	r2,zero,37a8 <__alt_data_end+0xfffae078>
    4eac:	dc012617 	ldw	r16,1176(sp)
    4eb0:	d8c12017 	ldw	r3,1152(sp)
    4eb4:	da000404 	addi	r8,sp,16
    4eb8:	003f9106 	br	4d00 <__alt_data_end+0xfffaf5d0>
    4ebc:	e0800044 	addi	r2,fp,1
    4ec0:	9cc00814 	ori	r19,r19,32
    4ec4:	e4000047 	ldb	r16,1(fp)
    4ec8:	00398706 	br	34e8 <__alt_data_end+0xfffaddb8>
    4ecc:	d8812e17 	ldw	r2,1208(sp)
    4ed0:	d8c12d15 	stw	r3,1204(sp)
    4ed4:	0085c83a 	sub	r2,zero,r2
    4ed8:	d8812e15 	stw	r2,1208(sp)
    4edc:	e005883a 	mov	r2,fp
    4ee0:	003a3a06 	br	37cc <__alt_data_end+0xfffae09c>
    4ee4:	b809883a 	mov	r4,r23
    4ee8:	b00b883a 	mov	r5,r22
    4eec:	d9811e04 	addi	r6,sp,1144
    4ef0:	0009f8c0 	call	9f8c <__sprint_r>
    4ef4:	103a2c1e 	bne	r2,zero,37a8 <__alt_data_end+0xfffae078>
    4ef8:	d8c12017 	ldw	r3,1152(sp)
    4efc:	da000404 	addi	r8,sp,16
    4f00:	003cf006 	br	42c4 <__alt_data_end+0xfffaeb94>
    4f04:	d8c12817 	ldw	r3,1184(sp)
    4f08:	d9013117 	ldw	r4,1220(sp)
    4f0c:	1923c83a 	sub	r17,r3,r4
    4f10:	003a8806 	br	3934 <__alt_data_end+0xfffae204>
    4f14:	da013f15 	stw	r8,1276(sp)
    4f18:	00032b00 	call	32b0 <strlen>
    4f1c:	1023883a 	mov	r17,r2
    4f20:	da013f17 	ldw	r8,1276(sp)
    4f24:	883c7f0e 	bge	r17,zero,4124 <__alt_data_end+0xfffae9f4>
    4f28:	0005883a 	mov	r2,zero
    4f2c:	003c7d06 	br	4124 <__alt_data_end+0xfffae9f4>
    4f30:	b809883a 	mov	r4,r23
    4f34:	b00b883a 	mov	r5,r22
    4f38:	d9811e04 	addi	r6,sp,1144
    4f3c:	0009f8c0 	call	9f8c <__sprint_r>
    4f40:	103a191e 	bne	r2,zero,37a8 <__alt_data_end+0xfffae078>
    4f44:	d8c12017 	ldw	r3,1152(sp)
    4f48:	d8811f17 	ldw	r2,1148(sp)
    4f4c:	da000404 	addi	r8,sp,16
    4f50:	d9413317 	ldw	r5,1228(sp)
    4f54:	d9013117 	ldw	r4,1220(sp)
    4f58:	10800044 	addi	r2,r2,1
    4f5c:	28c7883a 	add	r3,r5,r3
    4f60:	41000015 	stw	r4,0(r8)
    4f64:	41400115 	stw	r5,4(r8)
    4f68:	d8c12015 	stw	r3,1152(sp)
    4f6c:	d8811f15 	stw	r2,1148(sp)
    4f70:	010001c4 	movi	r4,7
    4f74:	20bb060e 	bge	r4,r2,3b90 <__alt_data_end+0xfffae460>
    4f78:	003d6206 	br	4504 <__alt_data_end+0xfffaedd4>
    4f7c:	01000074 	movhi	r4,1
    4f80:	2108d184 	addi	r4,r4,9030
    4f84:	d9013615 	stw	r4,1240(sp)
    4f88:	003aa306 	br	3a18 <__alt_data_end+0xfffae2e8>
    4f8c:	d8812604 	addi	r2,sp,1176
    4f90:	d8800115 	stw	r2,4(sp)
    4f94:	d9413717 	ldw	r5,1244(sp)
    4f98:	d8812504 	addi	r2,sp,1172
    4f9c:	d8800215 	stw	r2,8(sp)
    4fa0:	d8812104 	addi	r2,sp,1156
    4fa4:	da400015 	stw	r9,0(sp)
    4fa8:	d8800315 	stw	r2,12(sp)
    4fac:	b809883a 	mov	r4,r23
    4fb0:	880d883a 	mov	r6,r17
    4fb4:	01c000c4 	movi	r7,3
    4fb8:	da013f15 	stw	r8,1276(sp)
    4fbc:	da413e15 	stw	r9,1272(sp)
    4fc0:	00057c00 	call	57c0 <_dtoa_r>
    4fc4:	da413e17 	ldw	r9,1272(sp)
    4fc8:	da013f17 	ldw	r8,1276(sp)
    4fcc:	d8813115 	stw	r2,1220(sp)
    4fd0:	482b883a 	mov	r21,r9
    4fd4:	d8c13117 	ldw	r3,1220(sp)
    4fd8:	00801184 	movi	r2,70
    4fdc:	1d55883a 	add	r10,r3,r21
    4fe0:	98bebb1e 	bne	r19,r2,4ad0 <__alt_data_end+0xfffaf3a0>
    4fe4:	19000007 	ldb	r4,0(r3)
    4fe8:	00800c04 	movi	r2,48
    4fec:	2080dd26 	beq	r4,r2,5364 <___vfprintf_internal_r+0x201c>
    4ff0:	d8c12617 	ldw	r3,1176(sp)
    4ff4:	50d5883a 	add	r10,r10,r3
    4ff8:	003eb506 	br	4ad0 <__alt_data_end+0xfffaf3a0>
    4ffc:	0023883a 	mov	r17,zero
    5000:	003d9b06 	br	4670 <__alt_data_end+0xfffaef40>
    5004:	b809883a 	mov	r4,r23
    5008:	b00b883a 	mov	r5,r22
    500c:	d9811e04 	addi	r6,sp,1144
    5010:	0009f8c0 	call	9f8c <__sprint_r>
    5014:	1039e41e 	bne	r2,zero,37a8 <__alt_data_end+0xfffae078>
    5018:	d8c12017 	ldw	r3,1152(sp)
    501c:	da000404 	addi	r8,sp,16
    5020:	003d9206 	br	466c <__alt_data_end+0xfffaef3c>
    5024:	b809883a 	mov	r4,r23
    5028:	b00b883a 	mov	r5,r22
    502c:	d9811e04 	addi	r6,sp,1144
    5030:	0009f8c0 	call	9f8c <__sprint_r>
    5034:	1039dc1e 	bne	r2,zero,37a8 <__alt_data_end+0xfffae078>
    5038:	d8812617 	ldw	r2,1176(sp)
    503c:	d8c12017 	ldw	r3,1152(sp)
    5040:	da000404 	addi	r8,sp,16
    5044:	003dfb06 	br	4834 <__alt_data_end+0xfffaf104>
    5048:	01000074 	movhi	r4,1
    504c:	2108cd84 	addi	r4,r4,9014
    5050:	d9012c15 	stw	r4,1200(sp)
    5054:	d9012c17 	ldw	r4,1200(sp)
    5058:	1c07883a 	add	r3,r3,r16
    505c:	10800044 	addi	r2,r2,1
    5060:	41000015 	stw	r4,0(r8)
    5064:	44000115 	stw	r16,4(r8)
    5068:	d8c12015 	stw	r3,1152(sp)
    506c:	d8811f15 	stw	r2,1148(sp)
    5070:	010001c4 	movi	r4,7
    5074:	20bfae16 	blt	r4,r2,4f30 <__alt_data_end+0xfffaf800>
    5078:	42000204 	addi	r8,r8,8
    507c:	003fb406 	br	4f50 <__alt_data_end+0xfffaf820>
    5080:	0021883a 	mov	r16,zero
    5084:	003dfd06 	br	487c <__alt_data_end+0xfffaf14c>
    5088:	01400074 	movhi	r5,1
    508c:	2948d184 	addi	r5,r5,9030
    5090:	d9413615 	stw	r5,1240(sp)
    5094:	003ae306 	br	3c24 <__alt_data_end+0xfffae4f4>
    5098:	b809883a 	mov	r4,r23
    509c:	b00b883a 	mov	r5,r22
    50a0:	d9811e04 	addi	r6,sp,1144
    50a4:	0009f8c0 	call	9f8c <__sprint_r>
    50a8:	1039bf1e 	bne	r2,zero,37a8 <__alt_data_end+0xfffae078>
    50ac:	d8812617 	ldw	r2,1176(sp)
    50b0:	d9413317 	ldw	r5,1228(sp)
    50b4:	d8c12017 	ldw	r3,1152(sp)
    50b8:	da000404 	addi	r8,sp,16
    50bc:	2885c83a 	sub	r2,r5,r2
    50c0:	003ded06 	br	4878 <__alt_data_end+0xfffaf148>
    50c4:	00800184 	movi	r2,6
    50c8:	1240012e 	bgeu	r2,r9,50d0 <___vfprintf_internal_r+0x1d88>
    50cc:	1013883a 	mov	r9,r2
    50d0:	4823883a 	mov	r17,r9
    50d4:	4805883a 	mov	r2,r9
    50d8:	4800b216 	blt	r9,zero,53a4 <___vfprintf_internal_r+0x205c>
    50dc:	01400074 	movhi	r5,1
    50e0:	2948cb04 	addi	r5,r5,9004
    50e4:	d8812b15 	stw	r2,1196(sp)
    50e8:	dc812d15 	stw	r18,1204(sp)
    50ec:	d8013215 	stw	zero,1224(sp)
    50f0:	d8013415 	stw	zero,1232(sp)
    50f4:	d9413115 	stw	r5,1220(sp)
    50f8:	0005883a 	mov	r2,zero
    50fc:	003a1906 	br	3964 <__alt_data_end+0xfffae234>
    5100:	04c00b44 	movi	r19,45
    5104:	dcc12785 	stb	r19,1182(sp)
    5108:	003b0006 	br	3d0c <__alt_data_end+0xfffae5dc>
    510c:	d8c12d17 	ldw	r3,1204(sp)
    5110:	d9012f17 	ldw	r4,1212(sp)
    5114:	18800017 	ldw	r2,0(r3)
    5118:	18c00104 	addi	r3,r3,4
    511c:	d8c12d15 	stw	r3,1204(sp)
    5120:	11000015 	stw	r4,0(r2)
    5124:	0038c506 	br	343c <__alt_data_end+0xfffadd0c>
    5128:	01400074 	movhi	r5,1
    512c:	2948c004 	addi	r5,r5,8960
    5130:	d9413115 	stw	r5,1220(sp)
    5134:	003f2406 	br	4dc8 <__alt_data_end+0xfffaf698>
    5138:	00800b44 	movi	r2,45
    513c:	d8812785 	stb	r2,1182(sp)
    5140:	df012b15 	stw	fp,1196(sp)
    5144:	d8013215 	stw	zero,1224(sp)
    5148:	df012d17 	ldw	fp,1204(sp)
    514c:	00800b44 	movi	r2,45
    5150:	dc812d15 	stw	r18,1204(sp)
    5154:	003a0006 	br	3958 <__alt_data_end+0xfffae228>
    5158:	d8c12617 	ldw	r3,1176(sp)
    515c:	00bfff44 	movi	r2,-3
    5160:	18800a16 	blt	r3,r2,518c <___vfprintf_internal_r+0x1e44>
    5164:	48c00916 	blt	r9,r3,518c <___vfprintf_internal_r+0x1e44>
    5168:	d8c13415 	stw	r3,1232(sp)
    516c:	040019c4 	movi	r16,103
    5170:	003e7606 	br	4b4c <__alt_data_end+0xfffaf41c>
    5174:	01000074 	movhi	r4,1
    5178:	2108cd84 	addi	r4,r4,9014
    517c:	d9012c15 	stw	r4,1200(sp)
    5180:	003c8e06 	br	43bc <__alt_data_end+0xfffaec8c>
    5184:	5005883a 	mov	r2,r10
    5188:	003e6506 	br	4b20 <__alt_data_end+0xfffaf3f0>
    518c:	843fff84 	addi	r16,r16,-2
    5190:	1d7fffc4 	addi	r21,r3,-1
    5194:	dd412615 	stw	r21,1176(sp)
    5198:	dc0122c5 	stb	r16,1163(sp)
    519c:	a8009216 	blt	r21,zero,53e8 <___vfprintf_internal_r+0x20a0>
    51a0:	00800ac4 	movi	r2,43
    51a4:	d8812305 	stb	r2,1164(sp)
    51a8:	00800244 	movi	r2,9
    51ac:	1540660e 	bge	r2,r21,5348 <___vfprintf_internal_r+0x2000>
    51b0:	dcc122c4 	addi	r19,sp,1163
    51b4:	dc012c15 	stw	r16,1200(sp)
    51b8:	4023883a 	mov	r17,r8
    51bc:	9821883a 	mov	r16,r19
    51c0:	a809883a 	mov	r4,r21
    51c4:	01400284 	movi	r5,10
    51c8:	000ca540 	call	ca54 <__modsi3>
    51cc:	10800c04 	addi	r2,r2,48
    51d0:	843fffc4 	addi	r16,r16,-1
    51d4:	a809883a 	mov	r4,r21
    51d8:	01400284 	movi	r5,10
    51dc:	80800005 	stb	r2,0(r16)
    51e0:	000ca000 	call	ca00 <__divsi3>
    51e4:	01000244 	movi	r4,9
    51e8:	102b883a 	mov	r21,r2
    51ec:	20bff416 	blt	r4,r2,51c0 <__alt_data_end+0xfffafa90>
    51f0:	8811883a 	mov	r8,r17
    51f4:	10800c04 	addi	r2,r2,48
    51f8:	8023883a 	mov	r17,r16
    51fc:	897fffc4 	addi	r5,r17,-1
    5200:	88bfffc5 	stb	r2,-1(r17)
    5204:	dc012c17 	ldw	r16,1200(sp)
    5208:	2cc08a2e 	bgeu	r5,r19,5434 <___vfprintf_internal_r+0x20ec>
    520c:	d9812384 	addi	r6,sp,1166
    5210:	344dc83a 	sub	r6,r6,r17
    5214:	d9012344 	addi	r4,sp,1165
    5218:	998d883a 	add	r6,r19,r6
    521c:	00000106 	br	5224 <___vfprintf_internal_r+0x1edc>
    5220:	28800003 	ldbu	r2,0(r5)
    5224:	20800005 	stb	r2,0(r4)
    5228:	21000044 	addi	r4,r4,1
    522c:	29400044 	addi	r5,r5,1
    5230:	21bffb1e 	bne	r4,r6,5220 <__alt_data_end+0xfffafaf0>
    5234:	d8812304 	addi	r2,sp,1164
    5238:	1445c83a 	sub	r2,r2,r17
    523c:	d9412344 	addi	r5,sp,1165
    5240:	2885883a 	add	r2,r5,r2
    5244:	14e7c83a 	sub	r19,r2,r19
    5248:	d8813317 	ldw	r2,1228(sp)
    524c:	d8c13317 	ldw	r3,1228(sp)
    5250:	dcc13a15 	stw	r19,1256(sp)
    5254:	14e3883a 	add	r17,r2,r19
    5258:	00800044 	movi	r2,1
    525c:	10c0550e 	bge	r2,r3,53b4 <___vfprintf_internal_r+0x206c>
    5260:	8c400044 	addi	r17,r17,1
    5264:	8839883a 	mov	fp,r17
    5268:	88005016 	blt	r17,zero,53ac <___vfprintf_internal_r+0x2064>
    526c:	d8013415 	stw	zero,1232(sp)
    5270:	003e3f06 	br	4b70 <__alt_data_end+0xfffaf440>
    5274:	da412b15 	stw	r9,1196(sp)
    5278:	dcc12783 	ldbu	r19,1182(sp)
    527c:	4823883a 	mov	r17,r9
    5280:	dc812d15 	stw	r18,1204(sp)
    5284:	d8013215 	stw	zero,1224(sp)
    5288:	d8013415 	stw	zero,1232(sp)
    528c:	0039ae06 	br	3948 <__alt_data_end+0xfffae218>
    5290:	483de91e 	bne	r9,zero,4a38 <__alt_data_end+0xfffaf308>
    5294:	8813883a 	mov	r9,r17
    5298:	003de706 	br	4a38 <__alt_data_end+0xfffaf308>
    529c:	b809883a 	mov	r4,r23
    52a0:	b00b883a 	mov	r5,r22
    52a4:	d9811e04 	addi	r6,sp,1144
    52a8:	0009f8c0 	call	9f8c <__sprint_r>
    52ac:	10393e1e 	bne	r2,zero,37a8 <__alt_data_end+0xfffae078>
    52b0:	dc012617 	ldw	r16,1176(sp)
    52b4:	d8c12017 	ldw	r3,1152(sp)
    52b8:	d8811f17 	ldw	r2,1148(sp)
    52bc:	da000404 	addi	r8,sp,16
    52c0:	003ea006 	br	4d44 <__alt_data_end+0xfffaf614>
    52c4:	00c00b44 	movi	r3,45
    52c8:	2460003c 	xorhi	r17,r4,32768
    52cc:	d8c12b05 	stb	r3,1196(sp)
    52d0:	003ddf06 	br	4a50 <__alt_data_end+0xfffaf320>
    52d4:	02400184 	movi	r9,6
    52d8:	003dd706 	br	4a38 <__alt_data_end+0xfffaf308>
    52dc:	4d400044 	addi	r21,r9,1
    52e0:	003de206 	br	4a6c <__alt_data_end+0xfffaf33c>
    52e4:	d8c13417 	ldw	r3,1232(sp)
    52e8:	00c0490e 	bge	zero,r3,5410 <___vfprintf_internal_r+0x20c8>
    52ec:	04400044 	movi	r17,1
    52f0:	d9013317 	ldw	r4,1228(sp)
    52f4:	8923883a 	add	r17,r17,r4
    52f8:	8839883a 	mov	fp,r17
    52fc:	883e1c0e 	bge	r17,zero,4b70 <__alt_data_end+0xfffaf440>
    5300:	0039883a 	mov	fp,zero
    5304:	003e1a06 	br	4b70 <__alt_data_end+0xfffaf440>
    5308:	00c03b0e 	bge	zero,r3,53f8 <___vfprintf_internal_r+0x20b0>
    530c:	4800021e 	bne	r9,zero,5318 <___vfprintf_internal_r+0x1fd0>
    5310:	e080004c 	andi	r2,fp,1
    5314:	10000626 	beq	r2,zero,5330 <___vfprintf_internal_r+0x1fe8>
    5318:	d8c13417 	ldw	r3,1232(sp)
    531c:	4a400044 	addi	r9,r9,1
    5320:	1a63883a 	add	r17,r3,r9
    5324:	8839883a 	mov	fp,r17
    5328:	883e110e 	bge	r17,zero,4b70 <__alt_data_end+0xfffaf440>
    532c:	003ff406 	br	5300 <__alt_data_end+0xfffafbd0>
    5330:	1839883a 	mov	fp,r3
    5334:	18004116 	blt	r3,zero,543c <___vfprintf_internal_r+0x20f4>
    5338:	dc413417 	ldw	r17,1232(sp)
    533c:	003e0c06 	br	4b70 <__alt_data_end+0xfffaf440>
    5340:	d8812117 	ldw	r2,1156(sp)
    5344:	003df606 	br	4b20 <__alt_data_end+0xfffaf3f0>
    5348:	00800c04 	movi	r2,48
    534c:	a8c00c04 	addi	r3,r21,48
    5350:	d8812345 	stb	r2,1165(sp)
    5354:	d8c12385 	stb	r3,1166(sp)
    5358:	d88123c4 	addi	r2,sp,1167
    535c:	dcc122c4 	addi	r19,sp,1163
    5360:	003fb806 	br	5244 <__alt_data_end+0xfffafb14>
    5364:	d9013717 	ldw	r4,1244(sp)
    5368:	880b883a 	mov	r5,r17
    536c:	000d883a 	mov	r6,zero
    5370:	000f883a 	mov	r7,zero
    5374:	da013f15 	stw	r8,1276(sp)
    5378:	da413e15 	stw	r9,1272(sp)
    537c:	da813d15 	stw	r10,1268(sp)
    5380:	000dd040 	call	dd04 <__eqdf2>
    5384:	da013f17 	ldw	r8,1276(sp)
    5388:	da413e17 	ldw	r9,1272(sp)
    538c:	da813d17 	ldw	r10,1268(sp)
    5390:	103f1726 	beq	r2,zero,4ff0 <__alt_data_end+0xfffaf8c0>
    5394:	00800044 	movi	r2,1
    5398:	1547c83a 	sub	r3,r2,r21
    539c:	d8c12615 	stw	r3,1176(sp)
    53a0:	003f1406 	br	4ff4 <__alt_data_end+0xfffaf8c4>
    53a4:	0005883a 	mov	r2,zero
    53a8:	003f4c06 	br	50dc <__alt_data_end+0xfffaf9ac>
    53ac:	0039883a 	mov	fp,zero
    53b0:	003fae06 	br	526c <__alt_data_end+0xfffafb3c>
    53b4:	e084703a 	and	r2,fp,r2
    53b8:	103faa26 	beq	r2,zero,5264 <__alt_data_end+0xfffafb34>
    53bc:	003fa806 	br	5260 <__alt_data_end+0xfffafb30>
    53c0:	d9412d17 	ldw	r5,1204(sp)
    53c4:	2a400017 	ldw	r9,0(r5)
    53c8:	28c00104 	addi	r3,r5,4
    53cc:	d8c12d15 	stw	r3,1204(sp)
    53d0:	483ebc0e 	bge	r9,zero,4ec4 <__alt_data_end+0xfffaf794>
    53d4:	027fffc4 	movi	r9,-1
    53d8:	e4000047 	ldb	r16,1(fp)
    53dc:	00384206 	br	34e8 <__alt_data_end+0xfffaddb8>
    53e0:	043fffc4 	movi	r16,-1
    53e4:	0038ce06 	br	3720 <__alt_data_end+0xfffadff0>
    53e8:	00800b44 	movi	r2,45
    53ec:	056bc83a 	sub	r21,zero,r21
    53f0:	d8812305 	stb	r2,1164(sp)
    53f4:	003f6c06 	br	51a8 <__alt_data_end+0xfffafa78>
    53f8:	4800081e 	bne	r9,zero,541c <___vfprintf_internal_r+0x20d4>
    53fc:	e080004c 	andi	r2,fp,1
    5400:	1000061e 	bne	r2,zero,541c <___vfprintf_internal_r+0x20d4>
    5404:	07000044 	movi	fp,1
    5408:	e023883a 	mov	r17,fp
    540c:	003dd806 	br	4b70 <__alt_data_end+0xfffaf440>
    5410:	04400084 	movi	r17,2
    5414:	88e3c83a 	sub	r17,r17,r3
    5418:	003fb506 	br	52f0 <__alt_data_end+0xfffafbc0>
    541c:	4c400084 	addi	r17,r9,2
    5420:	8839883a 	mov	fp,r17
    5424:	883dd20e 	bge	r17,zero,4b70 <__alt_data_end+0xfffaf440>
    5428:	003fb506 	br	5300 <__alt_data_end+0xfffafbd0>
    542c:	d8c12617 	ldw	r3,1176(sp)
    5430:	003f5706 	br	5190 <__alt_data_end+0xfffafa60>
    5434:	d8812344 	addi	r2,sp,1165
    5438:	003f8206 	br	5244 <__alt_data_end+0xfffafb14>
    543c:	0039883a 	mov	fp,zero
    5440:	003fbd06 	br	5338 <__alt_data_end+0xfffafc08>

00005444 <__vfprintf_internal>:
    5444:	2007883a 	mov	r3,r4
    5448:	01000074 	movhi	r4,1
    544c:	21102a04 	addi	r4,r4,16552
    5450:	21000017 	ldw	r4,0(r4)
    5454:	2805883a 	mov	r2,r5
    5458:	300f883a 	mov	r7,r6
    545c:	180b883a 	mov	r5,r3
    5460:	100d883a 	mov	r6,r2
    5464:	00033481 	jmpi	3348 <___vfprintf_internal_r>

00005468 <__swsetup_r>:
    5468:	00800074 	movhi	r2,1
    546c:	defffd04 	addi	sp,sp,-12
    5470:	10902a04 	addi	r2,r2,16552
    5474:	dc400115 	stw	r17,4(sp)
    5478:	2023883a 	mov	r17,r4
    547c:	11000017 	ldw	r4,0(r2)
    5480:	dc000015 	stw	r16,0(sp)
    5484:	dfc00215 	stw	ra,8(sp)
    5488:	2821883a 	mov	r16,r5
    548c:	20000226 	beq	r4,zero,5498 <__swsetup_r+0x30>
    5490:	20c00e17 	ldw	r3,56(r4)
    5494:	18002e26 	beq	r3,zero,5550 <__swsetup_r+0xe8>
    5498:	8080030b 	ldhu	r2,12(r16)
    549c:	10c0020c 	andi	r3,r2,8
    54a0:	100d883a 	mov	r6,r2
    54a4:	18000f26 	beq	r3,zero,54e4 <__swsetup_r+0x7c>
    54a8:	80c00417 	ldw	r3,16(r16)
    54ac:	18001526 	beq	r3,zero,5504 <__swsetup_r+0x9c>
    54b0:	1100004c 	andi	r4,r2,1
    54b4:	20001c1e 	bne	r4,zero,5528 <__swsetup_r+0xc0>
    54b8:	1080008c 	andi	r2,r2,2
    54bc:	1000261e 	bne	r2,zero,5558 <__swsetup_r+0xf0>
    54c0:	80800517 	ldw	r2,20(r16)
    54c4:	80800215 	stw	r2,8(r16)
    54c8:	18001c26 	beq	r3,zero,553c <__swsetup_r+0xd4>
    54cc:	0005883a 	mov	r2,zero
    54d0:	dfc00217 	ldw	ra,8(sp)
    54d4:	dc400117 	ldw	r17,4(sp)
    54d8:	dc000017 	ldw	r16,0(sp)
    54dc:	dec00304 	addi	sp,sp,12
    54e0:	f800283a 	ret
    54e4:	3080040c 	andi	r2,r6,16
    54e8:	10001726 	beq	r2,zero,5548 <__swsetup_r+0xe0>
    54ec:	3080010c 	andi	r2,r6,4
    54f0:	10001b1e 	bne	r2,zero,5560 <__swsetup_r+0xf8>
    54f4:	80c00417 	ldw	r3,16(r16)
    54f8:	30800214 	ori	r2,r6,8
    54fc:	8080030d 	sth	r2,12(r16)
    5500:	183feb1e 	bne	r3,zero,54b0 <__alt_data_end+0xfffafd80>
    5504:	1140a00c 	andi	r5,r2,640
    5508:	01008004 	movi	r4,512
    550c:	293fe826 	beq	r5,r4,54b0 <__alt_data_end+0xfffafd80>
    5510:	8809883a 	mov	r4,r17
    5514:	800b883a 	mov	r5,r16
    5518:	0007ffc0 	call	7ffc <__smakebuf_r>
    551c:	8080030b 	ldhu	r2,12(r16)
    5520:	80c00417 	ldw	r3,16(r16)
    5524:	003fe206 	br	54b0 <__alt_data_end+0xfffafd80>
    5528:	80800517 	ldw	r2,20(r16)
    552c:	80000215 	stw	zero,8(r16)
    5530:	0085c83a 	sub	r2,zero,r2
    5534:	80800615 	stw	r2,24(r16)
    5538:	183fe41e 	bne	r3,zero,54cc <__alt_data_end+0xfffafd9c>
    553c:	8080030b 	ldhu	r2,12(r16)
    5540:	1080200c 	andi	r2,r2,128
    5544:	103fe226 	beq	r2,zero,54d0 <__alt_data_end+0xfffafda0>
    5548:	00bfffc4 	movi	r2,-1
    554c:	003fe006 	br	54d0 <__alt_data_end+0xfffafda0>
    5550:	00074a40 	call	74a4 <__sinit>
    5554:	003fd006 	br	5498 <__alt_data_end+0xfffafd68>
    5558:	0005883a 	mov	r2,zero
    555c:	003fd906 	br	54c4 <__alt_data_end+0xfffafd94>
    5560:	81400c17 	ldw	r5,48(r16)
    5564:	28000626 	beq	r5,zero,5580 <__swsetup_r+0x118>
    5568:	80801004 	addi	r2,r16,64
    556c:	28800326 	beq	r5,r2,557c <__swsetup_r+0x114>
    5570:	8809883a 	mov	r4,r17
    5574:	00076180 	call	7618 <_free_r>
    5578:	8180030b 	ldhu	r6,12(r16)
    557c:	80000c15 	stw	zero,48(r16)
    5580:	80c00417 	ldw	r3,16(r16)
    5584:	00bff6c4 	movi	r2,-37
    5588:	118c703a 	and	r6,r2,r6
    558c:	80000115 	stw	zero,4(r16)
    5590:	80c00015 	stw	r3,0(r16)
    5594:	003fd806 	br	54f8 <__alt_data_end+0xfffafdc8>

00005598 <quorem>:
    5598:	defff204 	addi	sp,sp,-56
    559c:	ddc00b15 	stw	r23,44(sp)
    55a0:	20800417 	ldw	r2,16(r4)
    55a4:	2dc00417 	ldw	r23,16(r5)
    55a8:	dfc00d15 	stw	ra,52(sp)
    55ac:	df000c15 	stw	fp,48(sp)
    55b0:	dd800a15 	stw	r22,40(sp)
    55b4:	dd400915 	stw	r21,36(sp)
    55b8:	dd000815 	stw	r20,32(sp)
    55bc:	dcc00715 	stw	r19,28(sp)
    55c0:	dc800615 	stw	r18,24(sp)
    55c4:	dc400515 	stw	r17,20(sp)
    55c8:	dc000415 	stw	r16,16(sp)
    55cc:	15c07a16 	blt	r2,r23,57b8 <quorem+0x220>
    55d0:	bdffffc4 	addi	r23,r23,-1
    55d4:	bde9883a 	add	r20,r23,r23
    55d8:	28c00504 	addi	r3,r5,20
    55dc:	a529883a 	add	r20,r20,r20
    55e0:	1d39883a 	add	fp,r3,r20
    55e4:	24c00504 	addi	r19,r4,20
    55e8:	d9400215 	stw	r5,8(sp)
    55ec:	9d29883a 	add	r20,r19,r20
    55f0:	e1400017 	ldw	r5,0(fp)
    55f4:	d9000015 	stw	r4,0(sp)
    55f8:	a1000017 	ldw	r4,0(r20)
    55fc:	29400044 	addi	r5,r5,1
    5600:	d8c00115 	stw	r3,4(sp)
    5604:	dd000315 	stw	r20,12(sp)
    5608:	000cab00 	call	cab0 <__udivsi3>
    560c:	1025883a 	mov	r18,r2
    5610:	10003026 	beq	r2,zero,56d4 <quorem+0x13c>
    5614:	dc400117 	ldw	r17,4(sp)
    5618:	9829883a 	mov	r20,r19
    561c:	002d883a 	mov	r22,zero
    5620:	0021883a 	mov	r16,zero
    5624:	8d400017 	ldw	r21,0(r17)
    5628:	900b883a 	mov	r5,r18
    562c:	8c400104 	addi	r17,r17,4
    5630:	a93fffcc 	andi	r4,r21,65535
    5634:	000cac00 	call	cac0 <__mulsi3>
    5638:	a808d43a 	srli	r4,r21,16
    563c:	900b883a 	mov	r5,r18
    5640:	b0ad883a 	add	r22,r22,r2
    5644:	000cac00 	call	cac0 <__mulsi3>
    5648:	a1000017 	ldw	r4,0(r20)
    564c:	b00cd43a 	srli	r6,r22,16
    5650:	b0ffffcc 	andi	r3,r22,65535
    5654:	217fffcc 	andi	r5,r4,65535
    5658:	2c21883a 	add	r16,r5,r16
    565c:	80c7c83a 	sub	r3,r16,r3
    5660:	2008d43a 	srli	r4,r4,16
    5664:	3085883a 	add	r2,r6,r2
    5668:	1821d43a 	srai	r16,r3,16
    566c:	117fffcc 	andi	r5,r2,65535
    5670:	2149c83a 	sub	r4,r4,r5
    5674:	2421883a 	add	r16,r4,r16
    5678:	8008943a 	slli	r4,r16,16
    567c:	18ffffcc 	andi	r3,r3,65535
    5680:	102cd43a 	srli	r22,r2,16
    5684:	20c8b03a 	or	r4,r4,r3
    5688:	a1000015 	stw	r4,0(r20)
    568c:	8021d43a 	srai	r16,r16,16
    5690:	a5000104 	addi	r20,r20,4
    5694:	e47fe32e 	bgeu	fp,r17,5624 <__alt_data_end+0xfffafef4>
    5698:	d8c00317 	ldw	r3,12(sp)
    569c:	18800017 	ldw	r2,0(r3)
    56a0:	10000c1e 	bne	r2,zero,56d4 <quorem+0x13c>
    56a4:	18bfff04 	addi	r2,r3,-4
    56a8:	9880082e 	bgeu	r19,r2,56cc <quorem+0x134>
    56ac:	18ffff17 	ldw	r3,-4(r3)
    56b0:	18000326 	beq	r3,zero,56c0 <quorem+0x128>
    56b4:	00000506 	br	56cc <quorem+0x134>
    56b8:	10c00017 	ldw	r3,0(r2)
    56bc:	1800031e 	bne	r3,zero,56cc <quorem+0x134>
    56c0:	10bfff04 	addi	r2,r2,-4
    56c4:	bdffffc4 	addi	r23,r23,-1
    56c8:	98bffb36 	bltu	r19,r2,56b8 <__alt_data_end+0xfffaff88>
    56cc:	d8c00017 	ldw	r3,0(sp)
    56d0:	1dc00415 	stw	r23,16(r3)
    56d4:	d9000017 	ldw	r4,0(sp)
    56d8:	d9400217 	ldw	r5,8(sp)
    56dc:	0008fd00 	call	8fd0 <__mcmp>
    56e0:	10002816 	blt	r2,zero,5784 <quorem+0x1ec>
    56e4:	dc400117 	ldw	r17,4(sp)
    56e8:	94800044 	addi	r18,r18,1
    56ec:	980d883a 	mov	r6,r19
    56f0:	0007883a 	mov	r3,zero
    56f4:	31000017 	ldw	r4,0(r6)
    56f8:	89400017 	ldw	r5,0(r17)
    56fc:	31800104 	addi	r6,r6,4
    5700:	20bfffcc 	andi	r2,r4,65535
    5704:	10c7883a 	add	r3,r2,r3
    5708:	28bfffcc 	andi	r2,r5,65535
    570c:	1885c83a 	sub	r2,r3,r2
    5710:	280ad43a 	srli	r5,r5,16
    5714:	2008d43a 	srli	r4,r4,16
    5718:	1007d43a 	srai	r3,r2,16
    571c:	10bfffcc 	andi	r2,r2,65535
    5720:	2149c83a 	sub	r4,r4,r5
    5724:	20c9883a 	add	r4,r4,r3
    5728:	200a943a 	slli	r5,r4,16
    572c:	8c400104 	addi	r17,r17,4
    5730:	2007d43a 	srai	r3,r4,16
    5734:	2884b03a 	or	r2,r5,r2
    5738:	30bfff15 	stw	r2,-4(r6)
    573c:	e47fed2e 	bgeu	fp,r17,56f4 <__alt_data_end+0xfffaffc4>
    5740:	bdc5883a 	add	r2,r23,r23
    5744:	1085883a 	add	r2,r2,r2
    5748:	9887883a 	add	r3,r19,r2
    574c:	18800017 	ldw	r2,0(r3)
    5750:	10000c1e 	bne	r2,zero,5784 <quorem+0x1ec>
    5754:	18bfff04 	addi	r2,r3,-4
    5758:	9880082e 	bgeu	r19,r2,577c <quorem+0x1e4>
    575c:	18ffff17 	ldw	r3,-4(r3)
    5760:	18000326 	beq	r3,zero,5770 <quorem+0x1d8>
    5764:	00000506 	br	577c <quorem+0x1e4>
    5768:	10c00017 	ldw	r3,0(r2)
    576c:	1800031e 	bne	r3,zero,577c <quorem+0x1e4>
    5770:	10bfff04 	addi	r2,r2,-4
    5774:	bdffffc4 	addi	r23,r23,-1
    5778:	98bffb36 	bltu	r19,r2,5768 <__alt_data_end+0xfffb0038>
    577c:	d8c00017 	ldw	r3,0(sp)
    5780:	1dc00415 	stw	r23,16(r3)
    5784:	9005883a 	mov	r2,r18
    5788:	dfc00d17 	ldw	ra,52(sp)
    578c:	df000c17 	ldw	fp,48(sp)
    5790:	ddc00b17 	ldw	r23,44(sp)
    5794:	dd800a17 	ldw	r22,40(sp)
    5798:	dd400917 	ldw	r21,36(sp)
    579c:	dd000817 	ldw	r20,32(sp)
    57a0:	dcc00717 	ldw	r19,28(sp)
    57a4:	dc800617 	ldw	r18,24(sp)
    57a8:	dc400517 	ldw	r17,20(sp)
    57ac:	dc000417 	ldw	r16,16(sp)
    57b0:	dec00e04 	addi	sp,sp,56
    57b4:	f800283a 	ret
    57b8:	0005883a 	mov	r2,zero
    57bc:	003ff206 	br	5788 <__alt_data_end+0xfffb0058>

000057c0 <_dtoa_r>:
    57c0:	20801017 	ldw	r2,64(r4)
    57c4:	deffde04 	addi	sp,sp,-136
    57c8:	dd401d15 	stw	r21,116(sp)
    57cc:	dcc01b15 	stw	r19,108(sp)
    57d0:	dc801a15 	stw	r18,104(sp)
    57d4:	dc401915 	stw	r17,100(sp)
    57d8:	dc001815 	stw	r16,96(sp)
    57dc:	dfc02115 	stw	ra,132(sp)
    57e0:	df002015 	stw	fp,128(sp)
    57e4:	ddc01f15 	stw	r23,124(sp)
    57e8:	dd801e15 	stw	r22,120(sp)
    57ec:	dd001c15 	stw	r20,112(sp)
    57f0:	d9c00315 	stw	r7,12(sp)
    57f4:	2021883a 	mov	r16,r4
    57f8:	302b883a 	mov	r21,r6
    57fc:	2825883a 	mov	r18,r5
    5800:	dc402417 	ldw	r17,144(sp)
    5804:	3027883a 	mov	r19,r6
    5808:	10000826 	beq	r2,zero,582c <_dtoa_r+0x6c>
    580c:	21801117 	ldw	r6,68(r4)
    5810:	00c00044 	movi	r3,1
    5814:	100b883a 	mov	r5,r2
    5818:	1986983a 	sll	r3,r3,r6
    581c:	11800115 	stw	r6,4(r2)
    5820:	10c00215 	stw	r3,8(r2)
    5824:	00086fc0 	call	86fc <_Bfree>
    5828:	80001015 	stw	zero,64(r16)
    582c:	a8002d16 	blt	r21,zero,58e4 <_dtoa_r+0x124>
    5830:	88000015 	stw	zero,0(r17)
    5834:	a8dffc2c 	andhi	r3,r21,32752
    5838:	009ffc34 	movhi	r2,32752
    583c:	18801b26 	beq	r3,r2,58ac <_dtoa_r+0xec>
    5840:	9009883a 	mov	r4,r18
    5844:	980b883a 	mov	r5,r19
    5848:	000d883a 	mov	r6,zero
    584c:	000f883a 	mov	r7,zero
    5850:	000dd040 	call	dd04 <__eqdf2>
    5854:	10002a1e 	bne	r2,zero,5900 <_dtoa_r+0x140>
    5858:	d8c02317 	ldw	r3,140(sp)
    585c:	d9002517 	ldw	r4,148(sp)
    5860:	00800044 	movi	r2,1
    5864:	18800015 	stw	r2,0(r3)
    5868:	2001a226 	beq	r4,zero,5ef4 <_dtoa_r+0x734>
    586c:	00800074 	movhi	r2,1
    5870:	1088cd44 	addi	r2,r2,9013
    5874:	20800015 	stw	r2,0(r4)
    5878:	10bfffc4 	addi	r2,r2,-1
    587c:	dfc02117 	ldw	ra,132(sp)
    5880:	df002017 	ldw	fp,128(sp)
    5884:	ddc01f17 	ldw	r23,124(sp)
    5888:	dd801e17 	ldw	r22,120(sp)
    588c:	dd401d17 	ldw	r21,116(sp)
    5890:	dd001c17 	ldw	r20,112(sp)
    5894:	dcc01b17 	ldw	r19,108(sp)
    5898:	dc801a17 	ldw	r18,104(sp)
    589c:	dc401917 	ldw	r17,100(sp)
    58a0:	dc001817 	ldw	r16,96(sp)
    58a4:	dec02204 	addi	sp,sp,136
    58a8:	f800283a 	ret
    58ac:	d8c02317 	ldw	r3,140(sp)
    58b0:	0089c3c4 	movi	r2,9999
    58b4:	18800015 	stw	r2,0(r3)
    58b8:	90017c26 	beq	r18,zero,5eac <_dtoa_r+0x6ec>
    58bc:	00800074 	movhi	r2,1
    58c0:	1088d904 	addi	r2,r2,9060
    58c4:	d9002517 	ldw	r4,148(sp)
    58c8:	203fec26 	beq	r4,zero,587c <__alt_data_end+0xfffb014c>
    58cc:	10c000c7 	ldb	r3,3(r2)
    58d0:	18017d1e 	bne	r3,zero,5ec8 <_dtoa_r+0x708>
    58d4:	10c000c4 	addi	r3,r2,3
    58d8:	d9802517 	ldw	r6,148(sp)
    58dc:	30c00015 	stw	r3,0(r6)
    58e0:	003fe606 	br	587c <__alt_data_end+0xfffb014c>
    58e4:	04e00034 	movhi	r19,32768
    58e8:	9cffffc4 	addi	r19,r19,-1
    58ec:	00800044 	movi	r2,1
    58f0:	ace6703a 	and	r19,r21,r19
    58f4:	88800015 	stw	r2,0(r17)
    58f8:	982b883a 	mov	r21,r19
    58fc:	003fcd06 	br	5834 <__alt_data_end+0xfffb0104>
    5900:	d8800204 	addi	r2,sp,8
    5904:	a822d53a 	srli	r17,r21,20
    5908:	d8800015 	stw	r2,0(sp)
    590c:	8009883a 	mov	r4,r16
    5910:	900b883a 	mov	r5,r18
    5914:	980d883a 	mov	r6,r19
    5918:	d9c00104 	addi	r7,sp,4
    591c:	00093440 	call	9344 <__d2b>
    5920:	1039883a 	mov	fp,r2
    5924:	88016a1e 	bne	r17,zero,5ed0 <_dtoa_r+0x710>
    5928:	dd000217 	ldw	r20,8(sp)
    592c:	dc400117 	ldw	r17,4(sp)
    5930:	00befbc4 	movi	r2,-1041
    5934:	a463883a 	add	r17,r20,r17
    5938:	8882ea16 	blt	r17,r2,64e4 <_dtoa_r+0xd24>
    593c:	00bf0384 	movi	r2,-1010
    5940:	1445c83a 	sub	r2,r2,r17
    5944:	89010484 	addi	r4,r17,1042
    5948:	a8aa983a 	sll	r21,r21,r2
    594c:	9108d83a 	srl	r4,r18,r4
    5950:	a908b03a 	or	r4,r21,r4
    5954:	000f1dc0 	call	f1dc <__floatunsidf>
    5958:	017f8434 	movhi	r5,65040
    595c:	01800044 	movi	r6,1
    5960:	1009883a 	mov	r4,r2
    5964:	194b883a 	add	r5,r3,r5
    5968:	8c7fffc4 	addi	r17,r17,-1
    596c:	d9800f15 	stw	r6,60(sp)
    5970:	000d883a 	mov	r6,zero
    5974:	01cffe34 	movhi	r7,16376
    5978:	000e7b40 	call	e7b4 <__subdf3>
    597c:	0198dbf4 	movhi	r6,25455
    5980:	01cff4f4 	movhi	r7,16339
    5984:	1009883a 	mov	r4,r2
    5988:	180b883a 	mov	r5,r3
    598c:	3190d844 	addi	r6,r6,17249
    5990:	39e1e9c4 	addi	r7,r7,-30809
    5994:	000df480 	call	df48 <__muldf3>
    5998:	01a2d874 	movhi	r6,35681
    599c:	01cff1f4 	movhi	r7,16327
    59a0:	180b883a 	mov	r5,r3
    59a4:	31b22cc4 	addi	r6,r6,-14157
    59a8:	39e28a04 	addi	r7,r7,-30168
    59ac:	1009883a 	mov	r4,r2
    59b0:	000cae80 	call	cae8 <__adddf3>
    59b4:	8809883a 	mov	r4,r17
    59b8:	102d883a 	mov	r22,r2
    59bc:	182b883a 	mov	r21,r3
    59c0:	000f10c0 	call	f10c <__floatsidf>
    59c4:	019427f4 	movhi	r6,20639
    59c8:	01cff4f4 	movhi	r7,16339
    59cc:	1009883a 	mov	r4,r2
    59d0:	180b883a 	mov	r5,r3
    59d4:	319e7ec4 	addi	r6,r6,31227
    59d8:	39d104c4 	addi	r7,r7,17427
    59dc:	000df480 	call	df48 <__muldf3>
    59e0:	b009883a 	mov	r4,r22
    59e4:	a80b883a 	mov	r5,r21
    59e8:	100d883a 	mov	r6,r2
    59ec:	180f883a 	mov	r7,r3
    59f0:	000cae80 	call	cae8 <__adddf3>
    59f4:	1009883a 	mov	r4,r2
    59f8:	180b883a 	mov	r5,r3
    59fc:	102d883a 	mov	r22,r2
    5a00:	182b883a 	mov	r21,r3
    5a04:	000f0840 	call	f084 <__fixdfsi>
    5a08:	b009883a 	mov	r4,r22
    5a0c:	a80b883a 	mov	r5,r21
    5a10:	000d883a 	mov	r6,zero
    5a14:	000f883a 	mov	r7,zero
    5a18:	d8800515 	stw	r2,20(sp)
    5a1c:	000de680 	call	de68 <__ledf2>
    5a20:	10023116 	blt	r2,zero,62e8 <_dtoa_r+0xb28>
    5a24:	d8c00517 	ldw	r3,20(sp)
    5a28:	00800584 	movi	r2,22
    5a2c:	10c21f36 	bltu	r2,r3,62ac <_dtoa_r+0xaec>
    5a30:	180490fa 	slli	r2,r3,3
    5a34:	00c00074 	movhi	r3,1
    5a38:	18c8f504 	addi	r3,r3,9172
    5a3c:	1885883a 	add	r2,r3,r2
    5a40:	11000017 	ldw	r4,0(r2)
    5a44:	11400117 	ldw	r5,4(r2)
    5a48:	900d883a 	mov	r6,r18
    5a4c:	980f883a 	mov	r7,r19
    5a50:	000dd880 	call	dd88 <__gedf2>
    5a54:	0082a70e 	bge	zero,r2,64f4 <_dtoa_r+0xd34>
    5a58:	d9000517 	ldw	r4,20(sp)
    5a5c:	d8000c15 	stw	zero,48(sp)
    5a60:	213fffc4 	addi	r4,r4,-1
    5a64:	d9000515 	stw	r4,20(sp)
    5a68:	a463c83a 	sub	r17,r20,r17
    5a6c:	8dbfffc4 	addi	r22,r17,-1
    5a70:	b0021916 	blt	r22,zero,62d8 <_dtoa_r+0xb18>
    5a74:	d8000815 	stw	zero,32(sp)
    5a78:	d8800517 	ldw	r2,20(sp)
    5a7c:	10020e16 	blt	r2,zero,62b8 <_dtoa_r+0xaf8>
    5a80:	b0ad883a 	add	r22,r22,r2
    5a84:	d8800a15 	stw	r2,40(sp)
    5a88:	d8000915 	stw	zero,36(sp)
    5a8c:	d8c00317 	ldw	r3,12(sp)
    5a90:	00800244 	movi	r2,9
    5a94:	10c11a36 	bltu	r2,r3,5f00 <_dtoa_r+0x740>
    5a98:	00800144 	movi	r2,5
    5a9c:	10c4fc0e 	bge	r2,r3,6e90 <_dtoa_r+0x16d0>
    5aa0:	18ffff04 	addi	r3,r3,-4
    5aa4:	d8c00315 	stw	r3,12(sp)
    5aa8:	0029883a 	mov	r20,zero
    5aac:	d9800317 	ldw	r6,12(sp)
    5ab0:	008000c4 	movi	r2,3
    5ab4:	3083bd26 	beq	r6,r2,69ac <_dtoa_r+0x11ec>
    5ab8:	1183670e 	bge	r2,r6,6858 <_dtoa_r+0x1098>
    5abc:	d8c00317 	ldw	r3,12(sp)
    5ac0:	00800104 	movi	r2,4
    5ac4:	1882e726 	beq	r3,r2,6664 <_dtoa_r+0xea4>
    5ac8:	00800144 	movi	r2,5
    5acc:	1884f21e 	bne	r3,r2,6e98 <_dtoa_r+0x16d8>
    5ad0:	00800044 	movi	r2,1
    5ad4:	d8800b15 	stw	r2,44(sp)
    5ad8:	d8c02217 	ldw	r3,136(sp)
    5adc:	d9000517 	ldw	r4,20(sp)
    5ae0:	1907883a 	add	r3,r3,r4
    5ae4:	19800044 	addi	r6,r3,1
    5ae8:	d8c00d15 	stw	r3,52(sp)
    5aec:	d9800615 	stw	r6,24(sp)
    5af0:	0183c30e 	bge	zero,r6,6a00 <_dtoa_r+0x1240>
    5af4:	d9800617 	ldw	r6,24(sp)
    5af8:	3023883a 	mov	r17,r6
    5afc:	80001115 	stw	zero,68(r16)
    5b00:	008005c4 	movi	r2,23
    5b04:	1184f62e 	bgeu	r2,r6,6ee0 <_dtoa_r+0x1720>
    5b08:	00c00044 	movi	r3,1
    5b0c:	00800104 	movi	r2,4
    5b10:	1085883a 	add	r2,r2,r2
    5b14:	11000504 	addi	r4,r2,20
    5b18:	180b883a 	mov	r5,r3
    5b1c:	18c00044 	addi	r3,r3,1
    5b20:	313ffb2e 	bgeu	r6,r4,5b10 <__alt_data_end+0xfffb03e0>
    5b24:	81401115 	stw	r5,68(r16)
    5b28:	8009883a 	mov	r4,r16
    5b2c:	00086540 	call	8654 <_Balloc>
    5b30:	d8800715 	stw	r2,28(sp)
    5b34:	80801015 	stw	r2,64(r16)
    5b38:	00800384 	movi	r2,14
    5b3c:	1440fd36 	bltu	r2,r17,5f34 <_dtoa_r+0x774>
    5b40:	a000fc26 	beq	r20,zero,5f34 <_dtoa_r+0x774>
    5b44:	d8800517 	ldw	r2,20(sp)
    5b48:	0083b90e 	bge	zero,r2,6a30 <_dtoa_r+0x1270>
    5b4c:	d8c00517 	ldw	r3,20(sp)
    5b50:	108003cc 	andi	r2,r2,15
    5b54:	100490fa 	slli	r2,r2,3
    5b58:	182fd13a 	srai	r23,r3,4
    5b5c:	00c00074 	movhi	r3,1
    5b60:	18c8f504 	addi	r3,r3,9172
    5b64:	1885883a 	add	r2,r3,r2
    5b68:	b8c0040c 	andi	r3,r23,16
    5b6c:	12c00017 	ldw	r11,0(r2)
    5b70:	12800117 	ldw	r10,4(r2)
    5b74:	18039726 	beq	r3,zero,69d4 <_dtoa_r+0x1214>
    5b78:	00800074 	movhi	r2,1
    5b7c:	1088eb04 	addi	r2,r2,9132
    5b80:	11800817 	ldw	r6,32(r2)
    5b84:	11c00917 	ldw	r7,36(r2)
    5b88:	9009883a 	mov	r4,r18
    5b8c:	980b883a 	mov	r5,r19
    5b90:	da801615 	stw	r10,88(sp)
    5b94:	dac01515 	stw	r11,84(sp)
    5b98:	000d3840 	call	d384 <__divdf3>
    5b9c:	da801617 	ldw	r10,88(sp)
    5ba0:	dac01517 	ldw	r11,84(sp)
    5ba4:	bdc003cc 	andi	r23,r23,15
    5ba8:	044000c4 	movi	r17,3
    5bac:	d8800e15 	stw	r2,56(sp)
    5bb0:	182b883a 	mov	r21,r3
    5bb4:	b8001126 	beq	r23,zero,5bfc <_dtoa_r+0x43c>
    5bb8:	05000074 	movhi	r20,1
    5bbc:	a508eb04 	addi	r20,r20,9132
    5bc0:	5805883a 	mov	r2,r11
    5bc4:	5007883a 	mov	r3,r10
    5bc8:	b980004c 	andi	r6,r23,1
    5bcc:	1009883a 	mov	r4,r2
    5bd0:	b82fd07a 	srai	r23,r23,1
    5bd4:	180b883a 	mov	r5,r3
    5bd8:	30000426 	beq	r6,zero,5bec <_dtoa_r+0x42c>
    5bdc:	a1800017 	ldw	r6,0(r20)
    5be0:	a1c00117 	ldw	r7,4(r20)
    5be4:	8c400044 	addi	r17,r17,1
    5be8:	000df480 	call	df48 <__muldf3>
    5bec:	a5000204 	addi	r20,r20,8
    5bf0:	b83ff51e 	bne	r23,zero,5bc8 <__alt_data_end+0xfffb0498>
    5bf4:	1017883a 	mov	r11,r2
    5bf8:	1815883a 	mov	r10,r3
    5bfc:	d9000e17 	ldw	r4,56(sp)
    5c00:	a80b883a 	mov	r5,r21
    5c04:	580d883a 	mov	r6,r11
    5c08:	500f883a 	mov	r7,r10
    5c0c:	000d3840 	call	d384 <__divdf3>
    5c10:	1029883a 	mov	r20,r2
    5c14:	182b883a 	mov	r21,r3
    5c18:	d9800c17 	ldw	r6,48(sp)
    5c1c:	30000626 	beq	r6,zero,5c38 <_dtoa_r+0x478>
    5c20:	a009883a 	mov	r4,r20
    5c24:	a80b883a 	mov	r5,r21
    5c28:	000d883a 	mov	r6,zero
    5c2c:	01cffc34 	movhi	r7,16368
    5c30:	000de680 	call	de68 <__ledf2>
    5c34:	10043216 	blt	r2,zero,6d00 <_dtoa_r+0x1540>
    5c38:	8809883a 	mov	r4,r17
    5c3c:	000f10c0 	call	f10c <__floatsidf>
    5c40:	1009883a 	mov	r4,r2
    5c44:	180b883a 	mov	r5,r3
    5c48:	a00d883a 	mov	r6,r20
    5c4c:	a80f883a 	mov	r7,r21
    5c50:	000df480 	call	df48 <__muldf3>
    5c54:	000d883a 	mov	r6,zero
    5c58:	1009883a 	mov	r4,r2
    5c5c:	180b883a 	mov	r5,r3
    5c60:	01d00734 	movhi	r7,16412
    5c64:	000cae80 	call	cae8 <__adddf3>
    5c68:	1023883a 	mov	r17,r2
    5c6c:	d9800617 	ldw	r6,24(sp)
    5c70:	00bf3034 	movhi	r2,64704
    5c74:	1885883a 	add	r2,r3,r2
    5c78:	d8800e15 	stw	r2,56(sp)
    5c7c:	30032e26 	beq	r6,zero,6938 <_dtoa_r+0x1178>
    5c80:	d8c00517 	ldw	r3,20(sp)
    5c84:	da800617 	ldw	r10,24(sp)
    5c88:	d8c01215 	stw	r3,72(sp)
    5c8c:	d9000b17 	ldw	r4,44(sp)
    5c90:	2003b026 	beq	r4,zero,6b54 <_dtoa_r+0x1394>
    5c94:	50bfffc4 	addi	r2,r10,-1
    5c98:	100490fa 	slli	r2,r2,3
    5c9c:	00c00074 	movhi	r3,1
    5ca0:	18c8f504 	addi	r3,r3,9172
    5ca4:	1885883a 	add	r2,r3,r2
    5ca8:	11800017 	ldw	r6,0(r2)
    5cac:	11c00117 	ldw	r7,4(r2)
    5cb0:	d8800717 	ldw	r2,28(sp)
    5cb4:	0009883a 	mov	r4,zero
    5cb8:	014ff834 	movhi	r5,16352
    5cbc:	da801615 	stw	r10,88(sp)
    5cc0:	15c00044 	addi	r23,r2,1
    5cc4:	000d3840 	call	d384 <__divdf3>
    5cc8:	d9c00e17 	ldw	r7,56(sp)
    5ccc:	880d883a 	mov	r6,r17
    5cd0:	1009883a 	mov	r4,r2
    5cd4:	180b883a 	mov	r5,r3
    5cd8:	000e7b40 	call	e7b4 <__subdf3>
    5cdc:	a80b883a 	mov	r5,r21
    5ce0:	a009883a 	mov	r4,r20
    5ce4:	d8c01015 	stw	r3,64(sp)
    5ce8:	d8800e15 	stw	r2,56(sp)
    5cec:	000f0840 	call	f084 <__fixdfsi>
    5cf0:	1009883a 	mov	r4,r2
    5cf4:	d8801715 	stw	r2,92(sp)
    5cf8:	000f10c0 	call	f10c <__floatsidf>
    5cfc:	a009883a 	mov	r4,r20
    5d00:	a80b883a 	mov	r5,r21
    5d04:	100d883a 	mov	r6,r2
    5d08:	180f883a 	mov	r7,r3
    5d0c:	000e7b40 	call	e7b4 <__subdf3>
    5d10:	da001717 	ldw	r8,92(sp)
    5d14:	1829883a 	mov	r20,r3
    5d18:	d8c00717 	ldw	r3,28(sp)
    5d1c:	d9000e17 	ldw	r4,56(sp)
    5d20:	d9401017 	ldw	r5,64(sp)
    5d24:	42000c04 	addi	r8,r8,48
    5d28:	1023883a 	mov	r17,r2
    5d2c:	1a000005 	stb	r8,0(r3)
    5d30:	880d883a 	mov	r6,r17
    5d34:	a00f883a 	mov	r7,r20
    5d38:	402b883a 	mov	r21,r8
    5d3c:	000dd880 	call	dd88 <__gedf2>
    5d40:	00844516 	blt	zero,r2,6e58 <_dtoa_r+0x1698>
    5d44:	0009883a 	mov	r4,zero
    5d48:	014ffc34 	movhi	r5,16368
    5d4c:	880d883a 	mov	r6,r17
    5d50:	a00f883a 	mov	r7,r20
    5d54:	000e7b40 	call	e7b4 <__subdf3>
    5d58:	d9000e17 	ldw	r4,56(sp)
    5d5c:	d9401017 	ldw	r5,64(sp)
    5d60:	100d883a 	mov	r6,r2
    5d64:	180f883a 	mov	r7,r3
    5d68:	000dd880 	call	dd88 <__gedf2>
    5d6c:	da801617 	ldw	r10,88(sp)
    5d70:	00843616 	blt	zero,r2,6e4c <_dtoa_r+0x168c>
    5d74:	00800044 	movi	r2,1
    5d78:	12806e0e 	bge	r2,r10,5f34 <_dtoa_r+0x774>
    5d7c:	d9000717 	ldw	r4,28(sp)
    5d80:	dd801315 	stw	r22,76(sp)
    5d84:	dc001115 	stw	r16,68(sp)
    5d88:	2295883a 	add	r10,r4,r10
    5d8c:	dcc01415 	stw	r19,80(sp)
    5d90:	502d883a 	mov	r22,r10
    5d94:	dcc01017 	ldw	r19,64(sp)
    5d98:	b821883a 	mov	r16,r23
    5d9c:	dc801015 	stw	r18,64(sp)
    5da0:	dc800e17 	ldw	r18,56(sp)
    5da4:	00000906 	br	5dcc <_dtoa_r+0x60c>
    5da8:	000e7b40 	call	e7b4 <__subdf3>
    5dac:	1009883a 	mov	r4,r2
    5db0:	180b883a 	mov	r5,r3
    5db4:	900d883a 	mov	r6,r18
    5db8:	980f883a 	mov	r7,r19
    5dbc:	000de680 	call	de68 <__ledf2>
    5dc0:	10040e16 	blt	r2,zero,6dfc <_dtoa_r+0x163c>
    5dc4:	b821883a 	mov	r16,r23
    5dc8:	bd841026 	beq	r23,r22,6e0c <_dtoa_r+0x164c>
    5dcc:	9009883a 	mov	r4,r18
    5dd0:	980b883a 	mov	r5,r19
    5dd4:	000d883a 	mov	r6,zero
    5dd8:	01d00934 	movhi	r7,16420
    5ddc:	000df480 	call	df48 <__muldf3>
    5de0:	000d883a 	mov	r6,zero
    5de4:	01d00934 	movhi	r7,16420
    5de8:	8809883a 	mov	r4,r17
    5dec:	a00b883a 	mov	r5,r20
    5df0:	1025883a 	mov	r18,r2
    5df4:	1827883a 	mov	r19,r3
    5df8:	000df480 	call	df48 <__muldf3>
    5dfc:	180b883a 	mov	r5,r3
    5e00:	1009883a 	mov	r4,r2
    5e04:	1823883a 	mov	r17,r3
    5e08:	1029883a 	mov	r20,r2
    5e0c:	000f0840 	call	f084 <__fixdfsi>
    5e10:	1009883a 	mov	r4,r2
    5e14:	102b883a 	mov	r21,r2
    5e18:	000f10c0 	call	f10c <__floatsidf>
    5e1c:	a009883a 	mov	r4,r20
    5e20:	880b883a 	mov	r5,r17
    5e24:	100d883a 	mov	r6,r2
    5e28:	180f883a 	mov	r7,r3
    5e2c:	000e7b40 	call	e7b4 <__subdf3>
    5e30:	ad400c04 	addi	r21,r21,48
    5e34:	1009883a 	mov	r4,r2
    5e38:	180b883a 	mov	r5,r3
    5e3c:	900d883a 	mov	r6,r18
    5e40:	980f883a 	mov	r7,r19
    5e44:	85400005 	stb	r21,0(r16)
    5e48:	1023883a 	mov	r17,r2
    5e4c:	1829883a 	mov	r20,r3
    5e50:	000de680 	call	de68 <__ledf2>
    5e54:	bdc00044 	addi	r23,r23,1
    5e58:	0009883a 	mov	r4,zero
    5e5c:	014ffc34 	movhi	r5,16368
    5e60:	880d883a 	mov	r6,r17
    5e64:	a00f883a 	mov	r7,r20
    5e68:	103fcf0e 	bge	r2,zero,5da8 <__alt_data_end+0xfffb0678>
    5e6c:	d9801217 	ldw	r6,72(sp)
    5e70:	dc001117 	ldw	r16,68(sp)
    5e74:	d9800515 	stw	r6,20(sp)
    5e78:	8009883a 	mov	r4,r16
    5e7c:	e00b883a 	mov	r5,fp
    5e80:	00086fc0 	call	86fc <_Bfree>
    5e84:	d8c00517 	ldw	r3,20(sp)
    5e88:	d9002317 	ldw	r4,140(sp)
    5e8c:	d9802517 	ldw	r6,148(sp)
    5e90:	b8000005 	stb	zero,0(r23)
    5e94:	18800044 	addi	r2,r3,1
    5e98:	20800015 	stw	r2,0(r4)
    5e9c:	30027226 	beq	r6,zero,6868 <_dtoa_r+0x10a8>
    5ea0:	35c00015 	stw	r23,0(r6)
    5ea4:	d8800717 	ldw	r2,28(sp)
    5ea8:	003e7406 	br	587c <__alt_data_end+0xfffb014c>
    5eac:	00800434 	movhi	r2,16
    5eb0:	10bfffc4 	addi	r2,r2,-1
    5eb4:	a8aa703a 	and	r21,r21,r2
    5eb8:	a83e801e 	bne	r21,zero,58bc <__alt_data_end+0xfffb018c>
    5ebc:	00800074 	movhi	r2,1
    5ec0:	1088d604 	addi	r2,r2,9048
    5ec4:	003e7f06 	br	58c4 <__alt_data_end+0xfffb0194>
    5ec8:	10c00204 	addi	r3,r2,8
    5ecc:	003e8206 	br	58d8 <__alt_data_end+0xfffb01a8>
    5ed0:	01400434 	movhi	r5,16
    5ed4:	297fffc4 	addi	r5,r5,-1
    5ed8:	994a703a 	and	r5,r19,r5
    5edc:	9009883a 	mov	r4,r18
    5ee0:	8c7f0044 	addi	r17,r17,-1023
    5ee4:	294ffc34 	orhi	r5,r5,16368
    5ee8:	dd000217 	ldw	r20,8(sp)
    5eec:	d8000f15 	stw	zero,60(sp)
    5ef0:	003e9f06 	br	5970 <__alt_data_end+0xfffb0240>
    5ef4:	00800074 	movhi	r2,1
    5ef8:	1088cd04 	addi	r2,r2,9012
    5efc:	003e5f06 	br	587c <__alt_data_end+0xfffb014c>
    5f00:	80001115 	stw	zero,68(r16)
    5f04:	8009883a 	mov	r4,r16
    5f08:	000b883a 	mov	r5,zero
    5f0c:	00086540 	call	8654 <_Balloc>
    5f10:	01bfffc4 	movi	r6,-1
    5f14:	d8800715 	stw	r2,28(sp)
    5f18:	80801015 	stw	r2,64(r16)
    5f1c:	00800044 	movi	r2,1
    5f20:	d9800615 	stw	r6,24(sp)
    5f24:	d8800b15 	stw	r2,44(sp)
    5f28:	d8002215 	stw	zero,136(sp)
    5f2c:	d9800d15 	stw	r6,52(sp)
    5f30:	d8000315 	stw	zero,12(sp)
    5f34:	d8800117 	ldw	r2,4(sp)
    5f38:	10008e16 	blt	r2,zero,6174 <_dtoa_r+0x9b4>
    5f3c:	d9000517 	ldw	r4,20(sp)
    5f40:	00c00384 	movi	r3,14
    5f44:	19008b16 	blt	r3,r4,6174 <_dtoa_r+0x9b4>
    5f48:	200490fa 	slli	r2,r4,3
    5f4c:	00c00074 	movhi	r3,1
    5f50:	d9802217 	ldw	r6,136(sp)
    5f54:	18c8f504 	addi	r3,r3,9172
    5f58:	1885883a 	add	r2,r3,r2
    5f5c:	14400017 	ldw	r17,0(r2)
    5f60:	15000117 	ldw	r20,4(r2)
    5f64:	3001c716 	blt	r6,zero,6684 <_dtoa_r+0xec4>
    5f68:	880d883a 	mov	r6,r17
    5f6c:	a00f883a 	mov	r7,r20
    5f70:	9009883a 	mov	r4,r18
    5f74:	980b883a 	mov	r5,r19
    5f78:	000d3840 	call	d384 <__divdf3>
    5f7c:	180b883a 	mov	r5,r3
    5f80:	1009883a 	mov	r4,r2
    5f84:	000f0840 	call	f084 <__fixdfsi>
    5f88:	1009883a 	mov	r4,r2
    5f8c:	102d883a 	mov	r22,r2
    5f90:	000f10c0 	call	f10c <__floatsidf>
    5f94:	1009883a 	mov	r4,r2
    5f98:	180b883a 	mov	r5,r3
    5f9c:	880d883a 	mov	r6,r17
    5fa0:	a00f883a 	mov	r7,r20
    5fa4:	000df480 	call	df48 <__muldf3>
    5fa8:	9009883a 	mov	r4,r18
    5fac:	980b883a 	mov	r5,r19
    5fb0:	100d883a 	mov	r6,r2
    5fb4:	180f883a 	mov	r7,r3
    5fb8:	000e7b40 	call	e7b4 <__subdf3>
    5fbc:	d9000717 	ldw	r4,28(sp)
    5fc0:	d9800617 	ldw	r6,24(sp)
    5fc4:	180b883a 	mov	r5,r3
    5fc8:	b0c00c04 	addi	r3,r22,48
    5fcc:	20c00005 	stb	r3,0(r4)
    5fd0:	25c00044 	addi	r23,r4,1
    5fd4:	01000044 	movi	r4,1
    5fd8:	1011883a 	mov	r8,r2
    5fdc:	2807883a 	mov	r3,r5
    5fe0:	31003d26 	beq	r6,r4,60d8 <_dtoa_r+0x918>
    5fe4:	000d883a 	mov	r6,zero
    5fe8:	01d00934 	movhi	r7,16420
    5fec:	1009883a 	mov	r4,r2
    5ff0:	000df480 	call	df48 <__muldf3>
    5ff4:	1009883a 	mov	r4,r2
    5ff8:	180b883a 	mov	r5,r3
    5ffc:	000d883a 	mov	r6,zero
    6000:	000f883a 	mov	r7,zero
    6004:	1027883a 	mov	r19,r2
    6008:	182b883a 	mov	r21,r3
    600c:	000dd040 	call	dd04 <__eqdf2>
    6010:	103f9926 	beq	r2,zero,5e78 <__alt_data_end+0xfffb0748>
    6014:	d8c00617 	ldw	r3,24(sp)
    6018:	d9000717 	ldw	r4,28(sp)
    601c:	b825883a 	mov	r18,r23
    6020:	18bfffc4 	addi	r2,r3,-1
    6024:	20ad883a 	add	r22,r4,r2
    6028:	dc000315 	stw	r16,12(sp)
    602c:	00000a06 	br	6058 <_dtoa_r+0x898>
    6030:	000df480 	call	df48 <__muldf3>
    6034:	1009883a 	mov	r4,r2
    6038:	180b883a 	mov	r5,r3
    603c:	000d883a 	mov	r6,zero
    6040:	000f883a 	mov	r7,zero
    6044:	1027883a 	mov	r19,r2
    6048:	182b883a 	mov	r21,r3
    604c:	b825883a 	mov	r18,r23
    6050:	000dd040 	call	dd04 <__eqdf2>
    6054:	10022626 	beq	r2,zero,68f0 <_dtoa_r+0x1130>
    6058:	880d883a 	mov	r6,r17
    605c:	a00f883a 	mov	r7,r20
    6060:	9809883a 	mov	r4,r19
    6064:	a80b883a 	mov	r5,r21
    6068:	000d3840 	call	d384 <__divdf3>
    606c:	180b883a 	mov	r5,r3
    6070:	1009883a 	mov	r4,r2
    6074:	000f0840 	call	f084 <__fixdfsi>
    6078:	1009883a 	mov	r4,r2
    607c:	1021883a 	mov	r16,r2
    6080:	000f10c0 	call	f10c <__floatsidf>
    6084:	1009883a 	mov	r4,r2
    6088:	180b883a 	mov	r5,r3
    608c:	880d883a 	mov	r6,r17
    6090:	a00f883a 	mov	r7,r20
    6094:	000df480 	call	df48 <__muldf3>
    6098:	9809883a 	mov	r4,r19
    609c:	a80b883a 	mov	r5,r21
    60a0:	100d883a 	mov	r6,r2
    60a4:	180f883a 	mov	r7,r3
    60a8:	000e7b40 	call	e7b4 <__subdf3>
    60ac:	82000c04 	addi	r8,r16,48
    60b0:	92000005 	stb	r8,0(r18)
    60b4:	1009883a 	mov	r4,r2
    60b8:	180b883a 	mov	r5,r3
    60bc:	000d883a 	mov	r6,zero
    60c0:	01d00934 	movhi	r7,16420
    60c4:	1011883a 	mov	r8,r2
    60c8:	bdc00044 	addi	r23,r23,1
    60cc:	95bfd81e 	bne	r18,r22,6030 <__alt_data_end+0xfffb0900>
    60d0:	802d883a 	mov	r22,r16
    60d4:	dc000317 	ldw	r16,12(sp)
    60d8:	4009883a 	mov	r4,r8
    60dc:	180b883a 	mov	r5,r3
    60e0:	400d883a 	mov	r6,r8
    60e4:	180f883a 	mov	r7,r3
    60e8:	000cae80 	call	cae8 <__adddf3>
    60ec:	8809883a 	mov	r4,r17
    60f0:	a00b883a 	mov	r5,r20
    60f4:	100d883a 	mov	r6,r2
    60f8:	180f883a 	mov	r7,r3
    60fc:	1027883a 	mov	r19,r2
    6100:	1825883a 	mov	r18,r3
    6104:	000de680 	call	de68 <__ledf2>
    6108:	10000816 	blt	r2,zero,612c <_dtoa_r+0x96c>
    610c:	8809883a 	mov	r4,r17
    6110:	a00b883a 	mov	r5,r20
    6114:	980d883a 	mov	r6,r19
    6118:	900f883a 	mov	r7,r18
    611c:	000dd040 	call	dd04 <__eqdf2>
    6120:	103f551e 	bne	r2,zero,5e78 <__alt_data_end+0xfffb0748>
    6124:	b580004c 	andi	r22,r22,1
    6128:	b03f5326 	beq	r22,zero,5e78 <__alt_data_end+0xfffb0748>
    612c:	bd7fffc3 	ldbu	r21,-1(r23)
    6130:	b8bfffc4 	addi	r2,r23,-1
    6134:	1007883a 	mov	r3,r2
    6138:	01400e44 	movi	r5,57
    613c:	d9800717 	ldw	r6,28(sp)
    6140:	00000506 	br	6158 <_dtoa_r+0x998>
    6144:	18ffffc4 	addi	r3,r3,-1
    6148:	30825e26 	beq	r6,r2,6ac4 <_dtoa_r+0x1304>
    614c:	1d400003 	ldbu	r21,0(r3)
    6150:	102f883a 	mov	r23,r2
    6154:	10bfffc4 	addi	r2,r2,-1
    6158:	a9003fcc 	andi	r4,r21,255
    615c:	2100201c 	xori	r4,r4,128
    6160:	213fe004 	addi	r4,r4,-128
    6164:	217ff726 	beq	r4,r5,6144 <__alt_data_end+0xfffb0a14>
    6168:	aa000044 	addi	r8,r21,1
    616c:	12000005 	stb	r8,0(r2)
    6170:	003f4106 	br	5e78 <__alt_data_end+0xfffb0748>
    6174:	d8c00b17 	ldw	r3,44(sp)
    6178:	18006726 	beq	r3,zero,6318 <_dtoa_r+0xb58>
    617c:	d9000317 	ldw	r4,12(sp)
    6180:	00c00044 	movi	r3,1
    6184:	19016a0e 	bge	r3,r4,6730 <_dtoa_r+0xf70>
    6188:	d8800617 	ldw	r2,24(sp)
    618c:	d8c00917 	ldw	r3,36(sp)
    6190:	157fffc4 	addi	r21,r2,-1
    6194:	1d420716 	blt	r3,r21,69b4 <_dtoa_r+0x11f4>
    6198:	1d6bc83a 	sub	r21,r3,r21
    619c:	d8800617 	ldw	r2,24(sp)
    61a0:	1002c716 	blt	r2,zero,6cc0 <_dtoa_r+0x1500>
    61a4:	dd000817 	ldw	r20,32(sp)
    61a8:	d8800617 	ldw	r2,24(sp)
    61ac:	d9800817 	ldw	r6,32(sp)
    61b0:	8009883a 	mov	r4,r16
    61b4:	01400044 	movi	r5,1
    61b8:	308d883a 	add	r6,r6,r2
    61bc:	d9800815 	stw	r6,32(sp)
    61c0:	b0ad883a 	add	r22,r22,r2
    61c4:	0008a7c0 	call	8a7c <__i2b>
    61c8:	1023883a 	mov	r17,r2
    61cc:	a0000826 	beq	r20,zero,61f0 <_dtoa_r+0xa30>
    61d0:	0580070e 	bge	zero,r22,61f0 <_dtoa_r+0xa30>
    61d4:	b005883a 	mov	r2,r22
    61d8:	a5812016 	blt	r20,r22,665c <_dtoa_r+0xe9c>
    61dc:	d8c00817 	ldw	r3,32(sp)
    61e0:	a0a9c83a 	sub	r20,r20,r2
    61e4:	b0adc83a 	sub	r22,r22,r2
    61e8:	1887c83a 	sub	r3,r3,r2
    61ec:	d8c00815 	stw	r3,32(sp)
    61f0:	d9000917 	ldw	r4,36(sp)
    61f4:	0100140e 	bge	zero,r4,6248 <_dtoa_r+0xa88>
    61f8:	d9800b17 	ldw	r6,44(sp)
    61fc:	3001e526 	beq	r6,zero,6994 <_dtoa_r+0x11d4>
    6200:	05400e0e 	bge	zero,r21,623c <_dtoa_r+0xa7c>
    6204:	880b883a 	mov	r5,r17
    6208:	8009883a 	mov	r4,r16
    620c:	a80d883a 	mov	r6,r21
    6210:	0008d480 	call	8d48 <__pow5mult>
    6214:	e00d883a 	mov	r6,fp
    6218:	8009883a 	mov	r4,r16
    621c:	100b883a 	mov	r5,r2
    6220:	1023883a 	mov	r17,r2
    6224:	0008ab80 	call	8ab8 <__multiply>
    6228:	102f883a 	mov	r23,r2
    622c:	e00b883a 	mov	r5,fp
    6230:	8009883a 	mov	r4,r16
    6234:	00086fc0 	call	86fc <_Bfree>
    6238:	b839883a 	mov	fp,r23
    623c:	d8800917 	ldw	r2,36(sp)
    6240:	154dc83a 	sub	r6,r2,r21
    6244:	3001281e 	bne	r6,zero,66e8 <_dtoa_r+0xf28>
    6248:	05c00044 	movi	r23,1
    624c:	8009883a 	mov	r4,r16
    6250:	b80b883a 	mov	r5,r23
    6254:	0008a7c0 	call	8a7c <__i2b>
    6258:	d8c00a17 	ldw	r3,40(sp)
    625c:	102b883a 	mov	r21,r2
    6260:	00c0310e 	bge	zero,r3,6328 <_dtoa_r+0xb68>
    6264:	8009883a 	mov	r4,r16
    6268:	100b883a 	mov	r5,r2
    626c:	180d883a 	mov	r6,r3
    6270:	0008d480 	call	8d48 <__pow5mult>
    6274:	d9000317 	ldw	r4,12(sp)
    6278:	102b883a 	mov	r21,r2
    627c:	b9011f0e 	bge	r23,r4,66fc <_dtoa_r+0xf3c>
    6280:	0027883a 	mov	r19,zero
    6284:	a8800417 	ldw	r2,16(r21)
    6288:	10800104 	addi	r2,r2,4
    628c:	1085883a 	add	r2,r2,r2
    6290:	1085883a 	add	r2,r2,r2
    6294:	a885883a 	add	r2,r21,r2
    6298:	11000017 	ldw	r4,0(r2)
    629c:	00089640 	call	8964 <__hi0bits>
    62a0:	00c00804 	movi	r3,32
    62a4:	1885c83a 	sub	r2,r3,r2
    62a8:	00002506 	br	6340 <_dtoa_r+0xb80>
    62ac:	01800044 	movi	r6,1
    62b0:	d9800c15 	stw	r6,48(sp)
    62b4:	003dec06 	br	5a68 <__alt_data_end+0xfffb0338>
    62b8:	d8c00817 	ldw	r3,32(sp)
    62bc:	d9000517 	ldw	r4,20(sp)
    62c0:	d8000a15 	stw	zero,40(sp)
    62c4:	1907c83a 	sub	r3,r3,r4
    62c8:	010dc83a 	sub	r6,zero,r4
    62cc:	d8c00815 	stw	r3,32(sp)
    62d0:	d9800915 	stw	r6,36(sp)
    62d4:	003ded06 	br	5a8c <__alt_data_end+0xfffb035c>
    62d8:	05adc83a 	sub	r22,zero,r22
    62dc:	dd800815 	stw	r22,32(sp)
    62e0:	002d883a 	mov	r22,zero
    62e4:	003de406 	br	5a78 <__alt_data_end+0xfffb0348>
    62e8:	d9000517 	ldw	r4,20(sp)
    62ec:	000f10c0 	call	f10c <__floatsidf>
    62f0:	1009883a 	mov	r4,r2
    62f4:	180b883a 	mov	r5,r3
    62f8:	b00d883a 	mov	r6,r22
    62fc:	a80f883a 	mov	r7,r21
    6300:	000dd040 	call	dd04 <__eqdf2>
    6304:	103dc726 	beq	r2,zero,5a24 <__alt_data_end+0xfffb02f4>
    6308:	d8800517 	ldw	r2,20(sp)
    630c:	10bfffc4 	addi	r2,r2,-1
    6310:	d8800515 	stw	r2,20(sp)
    6314:	003dc306 	br	5a24 <__alt_data_end+0xfffb02f4>
    6318:	dd400917 	ldw	r21,36(sp)
    631c:	dd000817 	ldw	r20,32(sp)
    6320:	0023883a 	mov	r17,zero
    6324:	003fa906 	br	61cc <__alt_data_end+0xfffb0a9c>
    6328:	d9800317 	ldw	r6,12(sp)
    632c:	b981670e 	bge	r23,r6,68cc <_dtoa_r+0x110c>
    6330:	0027883a 	mov	r19,zero
    6334:	d8c00a17 	ldw	r3,40(sp)
    6338:	183fd21e 	bne	r3,zero,6284 <__alt_data_end+0xfffb0b54>
    633c:	00800044 	movi	r2,1
    6340:	1585883a 	add	r2,r2,r22
    6344:	108007cc 	andi	r2,r2,31
    6348:	10005f26 	beq	r2,zero,64c8 <_dtoa_r+0xd08>
    634c:	00c00804 	movi	r3,32
    6350:	1887c83a 	sub	r3,r3,r2
    6354:	01000104 	movi	r4,4
    6358:	20c2dd0e 	bge	r4,r3,6ed0 <_dtoa_r+0x1710>
    635c:	d9000817 	ldw	r4,32(sp)
    6360:	00c00704 	movi	r3,28
    6364:	1885c83a 	sub	r2,r3,r2
    6368:	2089883a 	add	r4,r4,r2
    636c:	d9000815 	stw	r4,32(sp)
    6370:	a0a9883a 	add	r20,r20,r2
    6374:	b0ad883a 	add	r22,r22,r2
    6378:	d8800817 	ldw	r2,32(sp)
    637c:	0080050e 	bge	zero,r2,6394 <_dtoa_r+0xbd4>
    6380:	e00b883a 	mov	r5,fp
    6384:	8009883a 	mov	r4,r16
    6388:	100d883a 	mov	r6,r2
    638c:	0008e880 	call	8e88 <__lshift>
    6390:	1039883a 	mov	fp,r2
    6394:	0580050e 	bge	zero,r22,63ac <_dtoa_r+0xbec>
    6398:	a80b883a 	mov	r5,r21
    639c:	8009883a 	mov	r4,r16
    63a0:	b00d883a 	mov	r6,r22
    63a4:	0008e880 	call	8e88 <__lshift>
    63a8:	102b883a 	mov	r21,r2
    63ac:	d8c00c17 	ldw	r3,48(sp)
    63b0:	1801161e 	bne	r3,zero,680c <_dtoa_r+0x104c>
    63b4:	d8c00617 	ldw	r3,24(sp)
    63b8:	00c12d0e 	bge	zero,r3,6870 <_dtoa_r+0x10b0>
    63bc:	d8c00b17 	ldw	r3,44(sp)
    63c0:	1800571e 	bne	r3,zero,6520 <_dtoa_r+0xd60>
    63c4:	dc800717 	ldw	r18,28(sp)
    63c8:	dcc00617 	ldw	r19,24(sp)
    63cc:	9029883a 	mov	r20,r18
    63d0:	00000206 	br	63dc <_dtoa_r+0xc1c>
    63d4:	00087240 	call	8724 <__multadd>
    63d8:	1039883a 	mov	fp,r2
    63dc:	e009883a 	mov	r4,fp
    63e0:	a80b883a 	mov	r5,r21
    63e4:	00055980 	call	5598 <quorem>
    63e8:	10800c04 	addi	r2,r2,48
    63ec:	90800005 	stb	r2,0(r18)
    63f0:	94800044 	addi	r18,r18,1
    63f4:	9507c83a 	sub	r3,r18,r20
    63f8:	8009883a 	mov	r4,r16
    63fc:	e00b883a 	mov	r5,fp
    6400:	01800284 	movi	r6,10
    6404:	000f883a 	mov	r7,zero
    6408:	1cfff216 	blt	r3,r19,63d4 <__alt_data_end+0xfffb0ca4>
    640c:	1011883a 	mov	r8,r2
    6410:	d8800617 	ldw	r2,24(sp)
    6414:	00822e0e 	bge	zero,r2,6cd0 <_dtoa_r+0x1510>
    6418:	d9000717 	ldw	r4,28(sp)
    641c:	0025883a 	mov	r18,zero
    6420:	20af883a 	add	r23,r4,r2
    6424:	e00b883a 	mov	r5,fp
    6428:	01800044 	movi	r6,1
    642c:	8009883a 	mov	r4,r16
    6430:	da001715 	stw	r8,92(sp)
    6434:	0008e880 	call	8e88 <__lshift>
    6438:	1009883a 	mov	r4,r2
    643c:	a80b883a 	mov	r5,r21
    6440:	1039883a 	mov	fp,r2
    6444:	0008fd00 	call	8fd0 <__mcmp>
    6448:	da001717 	ldw	r8,92(sp)
    644c:	00816e0e 	bge	zero,r2,6a08 <_dtoa_r+0x1248>
    6450:	b93fffc3 	ldbu	r4,-1(r23)
    6454:	b8bfffc4 	addi	r2,r23,-1
    6458:	1007883a 	mov	r3,r2
    645c:	01800e44 	movi	r6,57
    6460:	d9c00717 	ldw	r7,28(sp)
    6464:	00000506 	br	647c <_dtoa_r+0xcbc>
    6468:	18ffffc4 	addi	r3,r3,-1
    646c:	38811926 	beq	r7,r2,68d4 <_dtoa_r+0x1114>
    6470:	19000003 	ldbu	r4,0(r3)
    6474:	102f883a 	mov	r23,r2
    6478:	10bfffc4 	addi	r2,r2,-1
    647c:	21403fcc 	andi	r5,r4,255
    6480:	2940201c 	xori	r5,r5,128
    6484:	297fe004 	addi	r5,r5,-128
    6488:	29bff726 	beq	r5,r6,6468 <__alt_data_end+0xfffb0d38>
    648c:	21000044 	addi	r4,r4,1
    6490:	11000005 	stb	r4,0(r2)
    6494:	8009883a 	mov	r4,r16
    6498:	a80b883a 	mov	r5,r21
    649c:	00086fc0 	call	86fc <_Bfree>
    64a0:	883e7526 	beq	r17,zero,5e78 <__alt_data_end+0xfffb0748>
    64a4:	90000426 	beq	r18,zero,64b8 <_dtoa_r+0xcf8>
    64a8:	94400326 	beq	r18,r17,64b8 <_dtoa_r+0xcf8>
    64ac:	8009883a 	mov	r4,r16
    64b0:	900b883a 	mov	r5,r18
    64b4:	00086fc0 	call	86fc <_Bfree>
    64b8:	8009883a 	mov	r4,r16
    64bc:	880b883a 	mov	r5,r17
    64c0:	00086fc0 	call	86fc <_Bfree>
    64c4:	003e6c06 	br	5e78 <__alt_data_end+0xfffb0748>
    64c8:	00800704 	movi	r2,28
    64cc:	d9800817 	ldw	r6,32(sp)
    64d0:	a0a9883a 	add	r20,r20,r2
    64d4:	b0ad883a 	add	r22,r22,r2
    64d8:	308d883a 	add	r6,r6,r2
    64dc:	d9800815 	stw	r6,32(sp)
    64e0:	003fa506 	br	6378 <__alt_data_end+0xfffb0c48>
    64e4:	013efb84 	movi	r4,-1042
    64e8:	246bc83a 	sub	r21,r4,r17
    64ec:	9548983a 	sll	r4,r18,r21
    64f0:	003d1806 	br	5954 <__alt_data_end+0xfffb0224>
    64f4:	d8000c15 	stw	zero,48(sp)
    64f8:	003d5b06 	br	5a68 <__alt_data_end+0xfffb0338>
    64fc:	880b883a 	mov	r5,r17
    6500:	8009883a 	mov	r4,r16
    6504:	01800284 	movi	r6,10
    6508:	000f883a 	mov	r7,zero
    650c:	00087240 	call	8724 <__multadd>
    6510:	1023883a 	mov	r17,r2
    6514:	d8800d17 	ldw	r2,52(sp)
    6518:	0082550e 	bge	zero,r2,6e70 <_dtoa_r+0x16b0>
    651c:	d8800615 	stw	r2,24(sp)
    6520:	0500050e 	bge	zero,r20,6538 <_dtoa_r+0xd78>
    6524:	880b883a 	mov	r5,r17
    6528:	8009883a 	mov	r4,r16
    652c:	a00d883a 	mov	r6,r20
    6530:	0008e880 	call	8e88 <__lshift>
    6534:	1023883a 	mov	r17,r2
    6538:	98016a1e 	bne	r19,zero,6ae4 <_dtoa_r+0x1324>
    653c:	8829883a 	mov	r20,r17
    6540:	d9000617 	ldw	r4,24(sp)
    6544:	dcc00717 	ldw	r19,28(sp)
    6548:	9480004c 	andi	r18,r18,1
    654c:	20bfffc4 	addi	r2,r4,-1
    6550:	9885883a 	add	r2,r19,r2
    6554:	d8800415 	stw	r2,16(sp)
    6558:	dc800615 	stw	r18,24(sp)
    655c:	e009883a 	mov	r4,fp
    6560:	a80b883a 	mov	r5,r21
    6564:	00055980 	call	5598 <quorem>
    6568:	e009883a 	mov	r4,fp
    656c:	880b883a 	mov	r5,r17
    6570:	102f883a 	mov	r23,r2
    6574:	0008fd00 	call	8fd0 <__mcmp>
    6578:	8009883a 	mov	r4,r16
    657c:	a80b883a 	mov	r5,r21
    6580:	a00d883a 	mov	r6,r20
    6584:	102d883a 	mov	r22,r2
    6588:	00090300 	call	9030 <__mdiff>
    658c:	1007883a 	mov	r3,r2
    6590:	10800317 	ldw	r2,12(r2)
    6594:	bc800c04 	addi	r18,r23,48
    6598:	1000971e 	bne	r2,zero,67f8 <_dtoa_r+0x1038>
    659c:	180b883a 	mov	r5,r3
    65a0:	e009883a 	mov	r4,fp
    65a4:	d8c01515 	stw	r3,84(sp)
    65a8:	0008fd00 	call	8fd0 <__mcmp>
    65ac:	d8c01517 	ldw	r3,84(sp)
    65b0:	8009883a 	mov	r4,r16
    65b4:	d8801515 	stw	r2,84(sp)
    65b8:	180b883a 	mov	r5,r3
    65bc:	00086fc0 	call	86fc <_Bfree>
    65c0:	d8801517 	ldw	r2,84(sp)
    65c4:	1000041e 	bne	r2,zero,65d8 <_dtoa_r+0xe18>
    65c8:	d9800317 	ldw	r6,12(sp)
    65cc:	3000021e 	bne	r6,zero,65d8 <_dtoa_r+0xe18>
    65d0:	d8c00617 	ldw	r3,24(sp)
    65d4:	18007626 	beq	r3,zero,67b0 <_dtoa_r+0xff0>
    65d8:	b0005b16 	blt	r22,zero,6748 <_dtoa_r+0xf88>
    65dc:	b000041e 	bne	r22,zero,65f0 <_dtoa_r+0xe30>
    65e0:	d9000317 	ldw	r4,12(sp)
    65e4:	2000021e 	bne	r4,zero,65f0 <_dtoa_r+0xe30>
    65e8:	d8c00617 	ldw	r3,24(sp)
    65ec:	18005626 	beq	r3,zero,6748 <_dtoa_r+0xf88>
    65f0:	00814d16 	blt	zero,r2,6b28 <_dtoa_r+0x1368>
    65f4:	d8c00417 	ldw	r3,16(sp)
    65f8:	9d800044 	addi	r22,r19,1
    65fc:	9c800005 	stb	r18,0(r19)
    6600:	b02f883a 	mov	r23,r22
    6604:	98c14c26 	beq	r19,r3,6b38 <_dtoa_r+0x1378>
    6608:	e00b883a 	mov	r5,fp
    660c:	8009883a 	mov	r4,r16
    6610:	01800284 	movi	r6,10
    6614:	000f883a 	mov	r7,zero
    6618:	00087240 	call	8724 <__multadd>
    661c:	1039883a 	mov	fp,r2
    6620:	8d006d26 	beq	r17,r20,67d8 <_dtoa_r+0x1018>
    6624:	880b883a 	mov	r5,r17
    6628:	01800284 	movi	r6,10
    662c:	000f883a 	mov	r7,zero
    6630:	8009883a 	mov	r4,r16
    6634:	00087240 	call	8724 <__multadd>
    6638:	a00b883a 	mov	r5,r20
    663c:	8009883a 	mov	r4,r16
    6640:	01800284 	movi	r6,10
    6644:	000f883a 	mov	r7,zero
    6648:	1023883a 	mov	r17,r2
    664c:	00087240 	call	8724 <__multadd>
    6650:	1029883a 	mov	r20,r2
    6654:	b027883a 	mov	r19,r22
    6658:	003fc006 	br	655c <__alt_data_end+0xfffb0e2c>
    665c:	a005883a 	mov	r2,r20
    6660:	003ede06 	br	61dc <__alt_data_end+0xfffb0aac>
    6664:	01000044 	movi	r4,1
    6668:	d9000b15 	stw	r4,44(sp)
    666c:	d9802217 	ldw	r6,136(sp)
    6670:	0180dc0e 	bge	zero,r6,69e4 <_dtoa_r+0x1224>
    6674:	3023883a 	mov	r17,r6
    6678:	d9800d15 	stw	r6,52(sp)
    667c:	d9800615 	stw	r6,24(sp)
    6680:	003d1e06 	br	5afc <__alt_data_end+0xfffb03cc>
    6684:	d8800617 	ldw	r2,24(sp)
    6688:	00be3716 	blt	zero,r2,5f68 <__alt_data_end+0xfffb0838>
    668c:	1000be1e 	bne	r2,zero,6988 <_dtoa_r+0x11c8>
    6690:	8809883a 	mov	r4,r17
    6694:	a00b883a 	mov	r5,r20
    6698:	000d883a 	mov	r6,zero
    669c:	01d00534 	movhi	r7,16404
    66a0:	000df480 	call	df48 <__muldf3>
    66a4:	1009883a 	mov	r4,r2
    66a8:	180b883a 	mov	r5,r3
    66ac:	900d883a 	mov	r6,r18
    66b0:	980f883a 	mov	r7,r19
    66b4:	000dd880 	call	dd88 <__gedf2>
    66b8:	002b883a 	mov	r21,zero
    66bc:	0023883a 	mov	r17,zero
    66c0:	10007a16 	blt	r2,zero,68ac <_dtoa_r+0x10ec>
    66c4:	d9002217 	ldw	r4,136(sp)
    66c8:	ddc00717 	ldw	r23,28(sp)
    66cc:	0108303a 	nor	r4,zero,r4
    66d0:	d9000515 	stw	r4,20(sp)
    66d4:	8009883a 	mov	r4,r16
    66d8:	a80b883a 	mov	r5,r21
    66dc:	00086fc0 	call	86fc <_Bfree>
    66e0:	883f751e 	bne	r17,zero,64b8 <__alt_data_end+0xfffb0d88>
    66e4:	003de406 	br	5e78 <__alt_data_end+0xfffb0748>
    66e8:	e00b883a 	mov	r5,fp
    66ec:	8009883a 	mov	r4,r16
    66f0:	0008d480 	call	8d48 <__pow5mult>
    66f4:	1039883a 	mov	fp,r2
    66f8:	003ed306 	br	6248 <__alt_data_end+0xfffb0b18>
    66fc:	903ee01e 	bne	r18,zero,6280 <__alt_data_end+0xfffb0b50>
    6700:	00800434 	movhi	r2,16
    6704:	10bfffc4 	addi	r2,r2,-1
    6708:	9884703a 	and	r2,r19,r2
    670c:	103f081e 	bne	r2,zero,6330 <__alt_data_end+0xfffb0c00>
    6710:	9cdffc2c 	andhi	r19,r19,32752
    6714:	983f0626 	beq	r19,zero,6330 <__alt_data_end+0xfffb0c00>
    6718:	d8800817 	ldw	r2,32(sp)
    671c:	b5800044 	addi	r22,r22,1
    6720:	04c00044 	movi	r19,1
    6724:	10800044 	addi	r2,r2,1
    6728:	d8800815 	stw	r2,32(sp)
    672c:	003f0106 	br	6334 <__alt_data_end+0xfffb0c04>
    6730:	d9800f17 	ldw	r6,60(sp)
    6734:	30016826 	beq	r6,zero,6cd8 <_dtoa_r+0x1518>
    6738:	10810cc4 	addi	r2,r2,1075
    673c:	dd400917 	ldw	r21,36(sp)
    6740:	dd000817 	ldw	r20,32(sp)
    6744:	003e9906 	br	61ac <__alt_data_end+0xfffb0a7c>
    6748:	9011883a 	mov	r8,r18
    674c:	4007883a 	mov	r3,r8
    6750:	e02d883a 	mov	r22,fp
    6754:	0080100e 	bge	zero,r2,6798 <_dtoa_r+0xfd8>
    6758:	01800044 	movi	r6,1
    675c:	8009883a 	mov	r4,r16
    6760:	e00b883a 	mov	r5,fp
    6764:	da001515 	stw	r8,84(sp)
    6768:	da001715 	stw	r8,92(sp)
    676c:	0008e880 	call	8e88 <__lshift>
    6770:	1009883a 	mov	r4,r2
    6774:	a80b883a 	mov	r5,r21
    6778:	102d883a 	mov	r22,r2
    677c:	0008fd00 	call	8fd0 <__mcmp>
    6780:	d8c01517 	ldw	r3,84(sp)
    6784:	da001717 	ldw	r8,92(sp)
    6788:	0081a50e 	bge	zero,r2,6e20 <_dtoa_r+0x1660>
    678c:	00800e44 	movi	r2,57
    6790:	40817b26 	beq	r8,r2,6d80 <_dtoa_r+0x15c0>
    6794:	40c00044 	addi	r3,r8,1
    6798:	8825883a 	mov	r18,r17
    679c:	9dc00044 	addi	r23,r19,1
    67a0:	98c00005 	stb	r3,0(r19)
    67a4:	a023883a 	mov	r17,r20
    67a8:	b039883a 	mov	fp,r22
    67ac:	003f3906 	br	6494 <__alt_data_end+0xfffb0d64>
    67b0:	00800e44 	movi	r2,57
    67b4:	9011883a 	mov	r8,r18
    67b8:	90817226 	beq	r18,r2,6d84 <_dtoa_r+0x15c4>
    67bc:	0580010e 	bge	zero,r22,67c4 <_dtoa_r+0x1004>
    67c0:	ba000c44 	addi	r8,r23,49
    67c4:	8825883a 	mov	r18,r17
    67c8:	9dc00044 	addi	r23,r19,1
    67cc:	9a000005 	stb	r8,0(r19)
    67d0:	a023883a 	mov	r17,r20
    67d4:	003f2f06 	br	6494 <__alt_data_end+0xfffb0d64>
    67d8:	880b883a 	mov	r5,r17
    67dc:	8009883a 	mov	r4,r16
    67e0:	01800284 	movi	r6,10
    67e4:	000f883a 	mov	r7,zero
    67e8:	00087240 	call	8724 <__multadd>
    67ec:	1023883a 	mov	r17,r2
    67f0:	1029883a 	mov	r20,r2
    67f4:	003f9706 	br	6654 <__alt_data_end+0xfffb0f24>
    67f8:	8009883a 	mov	r4,r16
    67fc:	180b883a 	mov	r5,r3
    6800:	00086fc0 	call	86fc <_Bfree>
    6804:	00800044 	movi	r2,1
    6808:	003f7306 	br	65d8 <__alt_data_end+0xfffb0ea8>
    680c:	e009883a 	mov	r4,fp
    6810:	a80b883a 	mov	r5,r21
    6814:	0008fd00 	call	8fd0 <__mcmp>
    6818:	103ee60e 	bge	r2,zero,63b4 <__alt_data_end+0xfffb0c84>
    681c:	8009883a 	mov	r4,r16
    6820:	e00b883a 	mov	r5,fp
    6824:	01800284 	movi	r6,10
    6828:	000f883a 	mov	r7,zero
    682c:	00087240 	call	8724 <__multadd>
    6830:	d9000517 	ldw	r4,20(sp)
    6834:	d9800b17 	ldw	r6,44(sp)
    6838:	1039883a 	mov	fp,r2
    683c:	213fffc4 	addi	r4,r4,-1
    6840:	d9000515 	stw	r4,20(sp)
    6844:	303f2d1e 	bne	r6,zero,64fc <__alt_data_end+0xfffb0dcc>
    6848:	d9000d17 	ldw	r4,52(sp)
    684c:	0101780e 	bge	zero,r4,6e30 <_dtoa_r+0x1670>
    6850:	d9000615 	stw	r4,24(sp)
    6854:	003edb06 	br	63c4 <__alt_data_end+0xfffb0c94>
    6858:	00800084 	movi	r2,2
    685c:	30818e1e 	bne	r6,r2,6e98 <_dtoa_r+0x16d8>
    6860:	d8000b15 	stw	zero,44(sp)
    6864:	003f8106 	br	666c <__alt_data_end+0xfffb0f3c>
    6868:	d8800717 	ldw	r2,28(sp)
    686c:	003c0306 	br	587c <__alt_data_end+0xfffb014c>
    6870:	d9000317 	ldw	r4,12(sp)
    6874:	00800084 	movi	r2,2
    6878:	113ed00e 	bge	r2,r4,63bc <__alt_data_end+0xfffb0c8c>
    687c:	d8c00617 	ldw	r3,24(sp)
    6880:	183f901e 	bne	r3,zero,66c4 <__alt_data_end+0xfffb0f94>
    6884:	a80b883a 	mov	r5,r21
    6888:	8009883a 	mov	r4,r16
    688c:	01800144 	movi	r6,5
    6890:	000f883a 	mov	r7,zero
    6894:	00087240 	call	8724 <__multadd>
    6898:	e009883a 	mov	r4,fp
    689c:	100b883a 	mov	r5,r2
    68a0:	102b883a 	mov	r21,r2
    68a4:	0008fd00 	call	8fd0 <__mcmp>
    68a8:	00bf860e 	bge	zero,r2,66c4 <__alt_data_end+0xfffb0f94>
    68ac:	d9800717 	ldw	r6,28(sp)
    68b0:	00800c44 	movi	r2,49
    68b4:	30800005 	stb	r2,0(r6)
    68b8:	d8800517 	ldw	r2,20(sp)
    68bc:	35c00044 	addi	r23,r6,1
    68c0:	10800044 	addi	r2,r2,1
    68c4:	d8800515 	stw	r2,20(sp)
    68c8:	003f8206 	br	66d4 <__alt_data_end+0xfffb0fa4>
    68cc:	903e981e 	bne	r18,zero,6330 <__alt_data_end+0xfffb0c00>
    68d0:	003f8b06 	br	6700 <__alt_data_end+0xfffb0fd0>
    68d4:	d9800517 	ldw	r6,20(sp)
    68d8:	d8c00717 	ldw	r3,28(sp)
    68dc:	00800c44 	movi	r2,49
    68e0:	31800044 	addi	r6,r6,1
    68e4:	d9800515 	stw	r6,20(sp)
    68e8:	18800005 	stb	r2,0(r3)
    68ec:	003ee906 	br	6494 <__alt_data_end+0xfffb0d64>
    68f0:	dc000317 	ldw	r16,12(sp)
    68f4:	003d6006 	br	5e78 <__alt_data_end+0xfffb0748>
    68f8:	8809883a 	mov	r4,r17
    68fc:	000f10c0 	call	f10c <__floatsidf>
    6900:	a009883a 	mov	r4,r20
    6904:	a80b883a 	mov	r5,r21
    6908:	100d883a 	mov	r6,r2
    690c:	180f883a 	mov	r7,r3
    6910:	000df480 	call	df48 <__muldf3>
    6914:	1009883a 	mov	r4,r2
    6918:	180b883a 	mov	r5,r3
    691c:	000d883a 	mov	r6,zero
    6920:	01d00734 	movhi	r7,16412
    6924:	000cae80 	call	cae8 <__adddf3>
    6928:	1023883a 	mov	r17,r2
    692c:	00bf3034 	movhi	r2,64704
    6930:	1885883a 	add	r2,r3,r2
    6934:	d8800e15 	stw	r2,56(sp)
    6938:	a009883a 	mov	r4,r20
    693c:	a80b883a 	mov	r5,r21
    6940:	000d883a 	mov	r6,zero
    6944:	01d00534 	movhi	r7,16404
    6948:	000e7b40 	call	e7b4 <__subdf3>
    694c:	d9c00e17 	ldw	r7,56(sp)
    6950:	1009883a 	mov	r4,r2
    6954:	180b883a 	mov	r5,r3
    6958:	880d883a 	mov	r6,r17
    695c:	102b883a 	mov	r21,r2
    6960:	1829883a 	mov	r20,r3
    6964:	000dd880 	call	dd88 <__gedf2>
    6968:	00807716 	blt	zero,r2,6b48 <_dtoa_r+0x1388>
    696c:	d8800e17 	ldw	r2,56(sp)
    6970:	a809883a 	mov	r4,r21
    6974:	a00b883a 	mov	r5,r20
    6978:	11e0003c 	xorhi	r7,r2,32768
    697c:	880d883a 	mov	r6,r17
    6980:	000de680 	call	de68 <__ledf2>
    6984:	103d6b0e 	bge	r2,zero,5f34 <__alt_data_end+0xfffb0804>
    6988:	002b883a 	mov	r21,zero
    698c:	0023883a 	mov	r17,zero
    6990:	003f4c06 	br	66c4 <__alt_data_end+0xfffb0f94>
    6994:	d9800917 	ldw	r6,36(sp)
    6998:	e00b883a 	mov	r5,fp
    699c:	8009883a 	mov	r4,r16
    69a0:	0008d480 	call	8d48 <__pow5mult>
    69a4:	1039883a 	mov	fp,r2
    69a8:	003e2706 	br	6248 <__alt_data_end+0xfffb0b18>
    69ac:	d8000b15 	stw	zero,44(sp)
    69b0:	003c4906 	br	5ad8 <__alt_data_end+0xfffb03a8>
    69b4:	d9000917 	ldw	r4,36(sp)
    69b8:	d9800a17 	ldw	r6,40(sp)
    69bc:	dd400915 	stw	r21,36(sp)
    69c0:	a905c83a 	sub	r2,r21,r4
    69c4:	308d883a 	add	r6,r6,r2
    69c8:	d9800a15 	stw	r6,40(sp)
    69cc:	002b883a 	mov	r21,zero
    69d0:	003df206 	br	619c <__alt_data_end+0xfffb0a6c>
    69d4:	dc800e15 	stw	r18,56(sp)
    69d8:	982b883a 	mov	r21,r19
    69dc:	04400084 	movi	r17,2
    69e0:	003c7406 	br	5bb4 <__alt_data_end+0xfffb0484>
    69e4:	04400044 	movi	r17,1
    69e8:	dc400d15 	stw	r17,52(sp)
    69ec:	dc400615 	stw	r17,24(sp)
    69f0:	dc402215 	stw	r17,136(sp)
    69f4:	80001115 	stw	zero,68(r16)
    69f8:	000b883a 	mov	r5,zero
    69fc:	003c4a06 	br	5b28 <__alt_data_end+0xfffb03f8>
    6a00:	3023883a 	mov	r17,r6
    6a04:	003ffb06 	br	69f4 <__alt_data_end+0xfffb12c4>
    6a08:	1000021e 	bne	r2,zero,6a14 <_dtoa_r+0x1254>
    6a0c:	4200004c 	andi	r8,r8,1
    6a10:	403e8f1e 	bne	r8,zero,6450 <__alt_data_end+0xfffb0d20>
    6a14:	01000c04 	movi	r4,48
    6a18:	00000106 	br	6a20 <_dtoa_r+0x1260>
    6a1c:	102f883a 	mov	r23,r2
    6a20:	b8bfffc4 	addi	r2,r23,-1
    6a24:	10c00007 	ldb	r3,0(r2)
    6a28:	193ffc26 	beq	r3,r4,6a1c <__alt_data_end+0xfffb12ec>
    6a2c:	003e9906 	br	6494 <__alt_data_end+0xfffb0d64>
    6a30:	d9000517 	ldw	r4,20(sp)
    6a34:	012fc83a 	sub	r23,zero,r4
    6a38:	b800ad26 	beq	r23,zero,6cf0 <_dtoa_r+0x1530>
    6a3c:	b88003cc 	andi	r2,r23,15
    6a40:	100490fa 	slli	r2,r2,3
    6a44:	00c00074 	movhi	r3,1
    6a48:	18c8f504 	addi	r3,r3,9172
    6a4c:	1885883a 	add	r2,r3,r2
    6a50:	11800017 	ldw	r6,0(r2)
    6a54:	11c00117 	ldw	r7,4(r2)
    6a58:	b82fd13a 	srai	r23,r23,4
    6a5c:	9009883a 	mov	r4,r18
    6a60:	980b883a 	mov	r5,r19
    6a64:	000df480 	call	df48 <__muldf3>
    6a68:	1029883a 	mov	r20,r2
    6a6c:	182b883a 	mov	r21,r3
    6a70:	b800f426 	beq	r23,zero,6e44 <_dtoa_r+0x1684>
    6a74:	02000074 	movhi	r8,1
    6a78:	4208eb04 	addi	r8,r8,9132
    6a7c:	8029883a 	mov	r20,r16
    6a80:	04400084 	movi	r17,2
    6a84:	4021883a 	mov	r16,r8
    6a88:	b980004c 	andi	r6,r23,1
    6a8c:	1009883a 	mov	r4,r2
    6a90:	b82fd07a 	srai	r23,r23,1
    6a94:	180b883a 	mov	r5,r3
    6a98:	30000426 	beq	r6,zero,6aac <_dtoa_r+0x12ec>
    6a9c:	81800017 	ldw	r6,0(r16)
    6aa0:	81c00117 	ldw	r7,4(r16)
    6aa4:	8c400044 	addi	r17,r17,1
    6aa8:	000df480 	call	df48 <__muldf3>
    6aac:	84000204 	addi	r16,r16,8
    6ab0:	b83ff51e 	bne	r23,zero,6a88 <__alt_data_end+0xfffb1358>
    6ab4:	a021883a 	mov	r16,r20
    6ab8:	182b883a 	mov	r21,r3
    6abc:	1029883a 	mov	r20,r2
    6ac0:	003c5506 	br	5c18 <__alt_data_end+0xfffb04e8>
    6ac4:	d9800517 	ldw	r6,20(sp)
    6ac8:	d9000717 	ldw	r4,28(sp)
    6acc:	00c00c04 	movi	r3,48
    6ad0:	31800044 	addi	r6,r6,1
    6ad4:	d9800515 	stw	r6,20(sp)
    6ad8:	20c00005 	stb	r3,0(r4)
    6adc:	02000c44 	movi	r8,49
    6ae0:	003da206 	br	616c <__alt_data_end+0xfffb0a3c>
    6ae4:	89400117 	ldw	r5,4(r17)
    6ae8:	8009883a 	mov	r4,r16
    6aec:	00086540 	call	8654 <_Balloc>
    6af0:	89800417 	ldw	r6,16(r17)
    6af4:	11000304 	addi	r4,r2,12
    6af8:	89400304 	addi	r5,r17,12
    6afc:	31800084 	addi	r6,r6,2
    6b00:	318d883a 	add	r6,r6,r6
    6b04:	318d883a 	add	r6,r6,r6
    6b08:	1027883a 	mov	r19,r2
    6b0c:	000829c0 	call	829c <memcpy>
    6b10:	8009883a 	mov	r4,r16
    6b14:	980b883a 	mov	r5,r19
    6b18:	01800044 	movi	r6,1
    6b1c:	0008e880 	call	8e88 <__lshift>
    6b20:	1029883a 	mov	r20,r2
    6b24:	003e8606 	br	6540 <__alt_data_end+0xfffb0e10>
    6b28:	00800e44 	movi	r2,57
    6b2c:	90809526 	beq	r18,r2,6d84 <_dtoa_r+0x15c4>
    6b30:	92000044 	addi	r8,r18,1
    6b34:	003f2306 	br	67c4 <__alt_data_end+0xfffb1094>
    6b38:	9011883a 	mov	r8,r18
    6b3c:	8825883a 	mov	r18,r17
    6b40:	a023883a 	mov	r17,r20
    6b44:	003e3706 	br	6424 <__alt_data_end+0xfffb0cf4>
    6b48:	002b883a 	mov	r21,zero
    6b4c:	0023883a 	mov	r17,zero
    6b50:	003f5606 	br	68ac <__alt_data_end+0xfffb117c>
    6b54:	51bfffc4 	addi	r6,r10,-1
    6b58:	300490fa 	slli	r2,r6,3
    6b5c:	00c00074 	movhi	r3,1
    6b60:	18c8f504 	addi	r3,r3,9172
    6b64:	1885883a 	add	r2,r3,r2
    6b68:	d9c00e17 	ldw	r7,56(sp)
    6b6c:	11000017 	ldw	r4,0(r2)
    6b70:	11400117 	ldw	r5,4(r2)
    6b74:	d8800717 	ldw	r2,28(sp)
    6b78:	d9801015 	stw	r6,64(sp)
    6b7c:	880d883a 	mov	r6,r17
    6b80:	da801615 	stw	r10,88(sp)
    6b84:	15c00044 	addi	r23,r2,1
    6b88:	000df480 	call	df48 <__muldf3>
    6b8c:	a80b883a 	mov	r5,r21
    6b90:	a009883a 	mov	r4,r20
    6b94:	d8c01115 	stw	r3,68(sp)
    6b98:	d8800e15 	stw	r2,56(sp)
    6b9c:	000f0840 	call	f084 <__fixdfsi>
    6ba0:	1009883a 	mov	r4,r2
    6ba4:	1023883a 	mov	r17,r2
    6ba8:	000f10c0 	call	f10c <__floatsidf>
    6bac:	a009883a 	mov	r4,r20
    6bb0:	a80b883a 	mov	r5,r21
    6bb4:	100d883a 	mov	r6,r2
    6bb8:	180f883a 	mov	r7,r3
    6bbc:	000e7b40 	call	e7b4 <__subdf3>
    6bc0:	1813883a 	mov	r9,r3
    6bc4:	d8c00717 	ldw	r3,28(sp)
    6bc8:	8c400c04 	addi	r17,r17,48
    6bcc:	1011883a 	mov	r8,r2
    6bd0:	1c400005 	stb	r17,0(r3)
    6bd4:	da801617 	ldw	r10,88(sp)
    6bd8:	00800044 	movi	r2,1
    6bdc:	50802326 	beq	r10,r2,6c6c <_dtoa_r+0x14ac>
    6be0:	d8800717 	ldw	r2,28(sp)
    6be4:	b82b883a 	mov	r21,r23
    6be8:	dc001315 	stw	r16,76(sp)
    6bec:	12a9883a 	add	r20,r2,r10
    6bf0:	4807883a 	mov	r3,r9
    6bf4:	4005883a 	mov	r2,r8
    6bf8:	dc801415 	stw	r18,80(sp)
    6bfc:	000d883a 	mov	r6,zero
    6c00:	01d00934 	movhi	r7,16420
    6c04:	1009883a 	mov	r4,r2
    6c08:	180b883a 	mov	r5,r3
    6c0c:	000df480 	call	df48 <__muldf3>
    6c10:	180b883a 	mov	r5,r3
    6c14:	1009883a 	mov	r4,r2
    6c18:	1821883a 	mov	r16,r3
    6c1c:	1025883a 	mov	r18,r2
    6c20:	000f0840 	call	f084 <__fixdfsi>
    6c24:	1009883a 	mov	r4,r2
    6c28:	1023883a 	mov	r17,r2
    6c2c:	000f10c0 	call	f10c <__floatsidf>
    6c30:	9009883a 	mov	r4,r18
    6c34:	800b883a 	mov	r5,r16
    6c38:	100d883a 	mov	r6,r2
    6c3c:	180f883a 	mov	r7,r3
    6c40:	8c400c04 	addi	r17,r17,48
    6c44:	000e7b40 	call	e7b4 <__subdf3>
    6c48:	ad400044 	addi	r21,r21,1
    6c4c:	ac7fffc5 	stb	r17,-1(r21)
    6c50:	ad3fea1e 	bne	r21,r20,6bfc <__alt_data_end+0xfffb14cc>
    6c54:	1813883a 	mov	r9,r3
    6c58:	d8c01017 	ldw	r3,64(sp)
    6c5c:	dc001317 	ldw	r16,76(sp)
    6c60:	dc801417 	ldw	r18,80(sp)
    6c64:	1011883a 	mov	r8,r2
    6c68:	b8ef883a 	add	r23,r23,r3
    6c6c:	d9000e17 	ldw	r4,56(sp)
    6c70:	d9401117 	ldw	r5,68(sp)
    6c74:	000d883a 	mov	r6,zero
    6c78:	01cff834 	movhi	r7,16352
    6c7c:	da001715 	stw	r8,92(sp)
    6c80:	da401515 	stw	r9,84(sp)
    6c84:	000cae80 	call	cae8 <__adddf3>
    6c88:	da001717 	ldw	r8,92(sp)
    6c8c:	da401517 	ldw	r9,84(sp)
    6c90:	1009883a 	mov	r4,r2
    6c94:	400d883a 	mov	r6,r8
    6c98:	480f883a 	mov	r7,r9
    6c9c:	180b883a 	mov	r5,r3
    6ca0:	000de680 	call	de68 <__ledf2>
    6ca4:	da001717 	ldw	r8,92(sp)
    6ca8:	da401517 	ldw	r9,84(sp)
    6cac:	10003b0e 	bge	r2,zero,6d9c <_dtoa_r+0x15dc>
    6cb0:	d9001217 	ldw	r4,72(sp)
    6cb4:	bd7fffc3 	ldbu	r21,-1(r23)
    6cb8:	d9000515 	stw	r4,20(sp)
    6cbc:	003d1c06 	br	6130 <__alt_data_end+0xfffb0a00>
    6cc0:	d8c00817 	ldw	r3,32(sp)
    6cc4:	18a9c83a 	sub	r20,r3,r2
    6cc8:	0005883a 	mov	r2,zero
    6ccc:	003d3706 	br	61ac <__alt_data_end+0xfffb0a7c>
    6cd0:	00800044 	movi	r2,1
    6cd4:	003dd006 	br	6418 <__alt_data_end+0xfffb0ce8>
    6cd8:	d8c00217 	ldw	r3,8(sp)
    6cdc:	00800d84 	movi	r2,54
    6ce0:	dd400917 	ldw	r21,36(sp)
    6ce4:	10c5c83a 	sub	r2,r2,r3
    6ce8:	dd000817 	ldw	r20,32(sp)
    6cec:	003d2f06 	br	61ac <__alt_data_end+0xfffb0a7c>
    6cf0:	9029883a 	mov	r20,r18
    6cf4:	982b883a 	mov	r21,r19
    6cf8:	04400084 	movi	r17,2
    6cfc:	003bc606 	br	5c18 <__alt_data_end+0xfffb04e8>
    6d00:	d8800617 	ldw	r2,24(sp)
    6d04:	103efc26 	beq	r2,zero,68f8 <__alt_data_end+0xfffb11c8>
    6d08:	d8c00d17 	ldw	r3,52(sp)
    6d0c:	00fc890e 	bge	zero,r3,5f34 <__alt_data_end+0xfffb0804>
    6d10:	a80b883a 	mov	r5,r21
    6d14:	a009883a 	mov	r4,r20
    6d18:	000d883a 	mov	r6,zero
    6d1c:	01d00934 	movhi	r7,16420
    6d20:	000df480 	call	df48 <__muldf3>
    6d24:	89000044 	addi	r4,r17,1
    6d28:	1029883a 	mov	r20,r2
    6d2c:	182b883a 	mov	r21,r3
    6d30:	000f10c0 	call	f10c <__floatsidf>
    6d34:	a009883a 	mov	r4,r20
    6d38:	a80b883a 	mov	r5,r21
    6d3c:	100d883a 	mov	r6,r2
    6d40:	180f883a 	mov	r7,r3
    6d44:	000df480 	call	df48 <__muldf3>
    6d48:	1009883a 	mov	r4,r2
    6d4c:	180b883a 	mov	r5,r3
    6d50:	000d883a 	mov	r6,zero
    6d54:	01d00734 	movhi	r7,16412
    6d58:	000cae80 	call	cae8 <__adddf3>
    6d5c:	d9000517 	ldw	r4,20(sp)
    6d60:	1023883a 	mov	r17,r2
    6d64:	00bf3034 	movhi	r2,64704
    6d68:	213fffc4 	addi	r4,r4,-1
    6d6c:	1885883a 	add	r2,r3,r2
    6d70:	d9001215 	stw	r4,72(sp)
    6d74:	d8800e15 	stw	r2,56(sp)
    6d78:	da800d17 	ldw	r10,52(sp)
    6d7c:	003bc306 	br	5c8c <__alt_data_end+0xfffb055c>
    6d80:	b039883a 	mov	fp,r22
    6d84:	01000e44 	movi	r4,57
    6d88:	8825883a 	mov	r18,r17
    6d8c:	9dc00044 	addi	r23,r19,1
    6d90:	99000005 	stb	r4,0(r19)
    6d94:	a023883a 	mov	r17,r20
    6d98:	003dae06 	br	6454 <__alt_data_end+0xfffb0d24>
    6d9c:	d9800e17 	ldw	r6,56(sp)
    6da0:	d9c01117 	ldw	r7,68(sp)
    6da4:	0009883a 	mov	r4,zero
    6da8:	014ff834 	movhi	r5,16352
    6dac:	da001715 	stw	r8,92(sp)
    6db0:	da401515 	stw	r9,84(sp)
    6db4:	000e7b40 	call	e7b4 <__subdf3>
    6db8:	da001717 	ldw	r8,92(sp)
    6dbc:	da401517 	ldw	r9,84(sp)
    6dc0:	1009883a 	mov	r4,r2
    6dc4:	180b883a 	mov	r5,r3
    6dc8:	400d883a 	mov	r6,r8
    6dcc:	480f883a 	mov	r7,r9
    6dd0:	000dd880 	call	dd88 <__gedf2>
    6dd4:	00bc570e 	bge	zero,r2,5f34 <__alt_data_end+0xfffb0804>
    6dd8:	01000c04 	movi	r4,48
    6ddc:	00000106 	br	6de4 <_dtoa_r+0x1624>
    6de0:	102f883a 	mov	r23,r2
    6de4:	b8bfffc4 	addi	r2,r23,-1
    6de8:	10c00007 	ldb	r3,0(r2)
    6dec:	193ffc26 	beq	r3,r4,6de0 <__alt_data_end+0xfffb16b0>
    6df0:	d9801217 	ldw	r6,72(sp)
    6df4:	d9800515 	stw	r6,20(sp)
    6df8:	003c1f06 	br	5e78 <__alt_data_end+0xfffb0748>
    6dfc:	d8801217 	ldw	r2,72(sp)
    6e00:	dc001117 	ldw	r16,68(sp)
    6e04:	d8800515 	stw	r2,20(sp)
    6e08:	003cc906 	br	6130 <__alt_data_end+0xfffb0a00>
    6e0c:	dd801317 	ldw	r22,76(sp)
    6e10:	dc001117 	ldw	r16,68(sp)
    6e14:	dcc01417 	ldw	r19,80(sp)
    6e18:	dc801017 	ldw	r18,64(sp)
    6e1c:	003c4506 	br	5f34 <__alt_data_end+0xfffb0804>
    6e20:	103e5d1e 	bne	r2,zero,6798 <__alt_data_end+0xfffb1068>
    6e24:	4080004c 	andi	r2,r8,1
    6e28:	103e5b26 	beq	r2,zero,6798 <__alt_data_end+0xfffb1068>
    6e2c:	003e5706 	br	678c <__alt_data_end+0xfffb105c>
    6e30:	d8c00317 	ldw	r3,12(sp)
    6e34:	00800084 	movi	r2,2
    6e38:	10c00a16 	blt	r2,r3,6e64 <_dtoa_r+0x16a4>
    6e3c:	d9000d17 	ldw	r4,52(sp)
    6e40:	003e8306 	br	6850 <__alt_data_end+0xfffb1120>
    6e44:	04400084 	movi	r17,2
    6e48:	003b7306 	br	5c18 <__alt_data_end+0xfffb04e8>
    6e4c:	d9801217 	ldw	r6,72(sp)
    6e50:	d9800515 	stw	r6,20(sp)
    6e54:	003cb606 	br	6130 <__alt_data_end+0xfffb0a00>
    6e58:	d9001217 	ldw	r4,72(sp)
    6e5c:	d9000515 	stw	r4,20(sp)
    6e60:	003c0506 	br	5e78 <__alt_data_end+0xfffb0748>
    6e64:	d9800d17 	ldw	r6,52(sp)
    6e68:	d9800615 	stw	r6,24(sp)
    6e6c:	003e8306 	br	687c <__alt_data_end+0xfffb114c>
    6e70:	d9800317 	ldw	r6,12(sp)
    6e74:	00800084 	movi	r2,2
    6e78:	11800216 	blt	r2,r6,6e84 <_dtoa_r+0x16c4>
    6e7c:	d8800d17 	ldw	r2,52(sp)
    6e80:	003da606 	br	651c <__alt_data_end+0xfffb0dec>
    6e84:	d8800d17 	ldw	r2,52(sp)
    6e88:	d8800615 	stw	r2,24(sp)
    6e8c:	003e7b06 	br	687c <__alt_data_end+0xfffb114c>
    6e90:	05000044 	movi	r20,1
    6e94:	003b0506 	br	5aac <__alt_data_end+0xfffb037c>
    6e98:	8009883a 	mov	r4,r16
    6e9c:	80001115 	stw	zero,68(r16)
    6ea0:	000b883a 	mov	r5,zero
    6ea4:	00086540 	call	8654 <_Balloc>
    6ea8:	d8800715 	stw	r2,28(sp)
    6eac:	d8c00717 	ldw	r3,28(sp)
    6eb0:	00bfffc4 	movi	r2,-1
    6eb4:	01000044 	movi	r4,1
    6eb8:	d8800615 	stw	r2,24(sp)
    6ebc:	80c01015 	stw	r3,64(r16)
    6ec0:	d9000b15 	stw	r4,44(sp)
    6ec4:	d8002215 	stw	zero,136(sp)
    6ec8:	d8800d15 	stw	r2,52(sp)
    6ecc:	003c1906 	br	5f34 <__alt_data_end+0xfffb0804>
    6ed0:	193d2926 	beq	r3,r4,6378 <__alt_data_end+0xfffb0c48>
    6ed4:	00c00f04 	movi	r3,60
    6ed8:	1885c83a 	sub	r2,r3,r2
    6edc:	003d7b06 	br	64cc <__alt_data_end+0xfffb0d9c>
    6ee0:	000b883a 	mov	r5,zero
    6ee4:	003b1006 	br	5b28 <__alt_data_end+0xfffb03f8>

00006ee8 <_fflush_r>:
    6ee8:	defffb04 	addi	sp,sp,-20
    6eec:	dcc00315 	stw	r19,12(sp)
    6ef0:	dc000015 	stw	r16,0(sp)
    6ef4:	dfc00415 	stw	ra,16(sp)
    6ef8:	dc800215 	stw	r18,8(sp)
    6efc:	dc400115 	stw	r17,4(sp)
    6f00:	2027883a 	mov	r19,r4
    6f04:	2821883a 	mov	r16,r5
    6f08:	20000226 	beq	r4,zero,6f14 <_fflush_r+0x2c>
    6f0c:	20800e17 	ldw	r2,56(r4)
    6f10:	10005326 	beq	r2,zero,7060 <_fflush_r+0x178>
    6f14:	8080030b 	ldhu	r2,12(r16)
    6f18:	10ffffcc 	andi	r3,r2,65535
    6f1c:	18e0001c 	xori	r3,r3,32768
    6f20:	18e00004 	addi	r3,r3,-32768
    6f24:	18002c26 	beq	r3,zero,6fd8 <_fflush_r+0xf0>
    6f28:	10c0020c 	andi	r3,r2,8
    6f2c:	1800321e 	bne	r3,zero,6ff8 <_fflush_r+0x110>
    6f30:	80c00117 	ldw	r3,4(r16)
    6f34:	10820014 	ori	r2,r2,2048
    6f38:	8080030d 	sth	r2,12(r16)
    6f3c:	00c0570e 	bge	zero,r3,709c <_fflush_r+0x1b4>
    6f40:	82000a17 	ldw	r8,40(r16)
    6f44:	40002426 	beq	r8,zero,6fd8 <_fflush_r+0xf0>
    6f48:	9c400017 	ldw	r17,0(r19)
    6f4c:	10c4000c 	andi	r3,r2,4096
    6f50:	98000015 	stw	zero,0(r19)
    6f54:	18004626 	beq	r3,zero,7070 <_fflush_r+0x188>
    6f58:	81801417 	ldw	r6,80(r16)
    6f5c:	10c0010c 	andi	r3,r2,4
    6f60:	18000626 	beq	r3,zero,6f7c <_fflush_r+0x94>
    6f64:	80c00117 	ldw	r3,4(r16)
    6f68:	80800c17 	ldw	r2,48(r16)
    6f6c:	30cdc83a 	sub	r6,r6,r3
    6f70:	10000226 	beq	r2,zero,6f7c <_fflush_r+0x94>
    6f74:	80800f17 	ldw	r2,60(r16)
    6f78:	308dc83a 	sub	r6,r6,r2
    6f7c:	81400717 	ldw	r5,28(r16)
    6f80:	9809883a 	mov	r4,r19
    6f84:	000f883a 	mov	r7,zero
    6f88:	403ee83a 	callr	r8
    6f8c:	00ffffc4 	movi	r3,-1
    6f90:	10c04526 	beq	r2,r3,70a8 <_fflush_r+0x1c0>
    6f94:	80c0030b 	ldhu	r3,12(r16)
    6f98:	81000417 	ldw	r4,16(r16)
    6f9c:	80000115 	stw	zero,4(r16)
    6fa0:	197dffcc 	andi	r5,r3,63487
    6fa4:	8140030d 	sth	r5,12(r16)
    6fa8:	81000015 	stw	r4,0(r16)
    6fac:	18c4000c 	andi	r3,r3,4096
    6fb0:	18000126 	beq	r3,zero,6fb8 <_fflush_r+0xd0>
    6fb4:	80801415 	stw	r2,80(r16)
    6fb8:	81400c17 	ldw	r5,48(r16)
    6fbc:	9c400015 	stw	r17,0(r19)
    6fc0:	28000526 	beq	r5,zero,6fd8 <_fflush_r+0xf0>
    6fc4:	80801004 	addi	r2,r16,64
    6fc8:	28800226 	beq	r5,r2,6fd4 <_fflush_r+0xec>
    6fcc:	9809883a 	mov	r4,r19
    6fd0:	00076180 	call	7618 <_free_r>
    6fd4:	80000c15 	stw	zero,48(r16)
    6fd8:	0005883a 	mov	r2,zero
    6fdc:	dfc00417 	ldw	ra,16(sp)
    6fe0:	dcc00317 	ldw	r19,12(sp)
    6fe4:	dc800217 	ldw	r18,8(sp)
    6fe8:	dc400117 	ldw	r17,4(sp)
    6fec:	dc000017 	ldw	r16,0(sp)
    6ff0:	dec00504 	addi	sp,sp,20
    6ff4:	f800283a 	ret
    6ff8:	84800417 	ldw	r18,16(r16)
    6ffc:	903ff626 	beq	r18,zero,6fd8 <__alt_data_end+0xfffb18a8>
    7000:	84400017 	ldw	r17,0(r16)
    7004:	108000cc 	andi	r2,r2,3
    7008:	84800015 	stw	r18,0(r16)
    700c:	8ca3c83a 	sub	r17,r17,r18
    7010:	10001526 	beq	r2,zero,7068 <_fflush_r+0x180>
    7014:	0005883a 	mov	r2,zero
    7018:	80800215 	stw	r2,8(r16)
    701c:	04400316 	blt	zero,r17,702c <_fflush_r+0x144>
    7020:	003fed06 	br	6fd8 <__alt_data_end+0xfffb18a8>
    7024:	90a5883a 	add	r18,r18,r2
    7028:	047feb0e 	bge	zero,r17,6fd8 <__alt_data_end+0xfffb18a8>
    702c:	80800917 	ldw	r2,36(r16)
    7030:	81400717 	ldw	r5,28(r16)
    7034:	880f883a 	mov	r7,r17
    7038:	900d883a 	mov	r6,r18
    703c:	9809883a 	mov	r4,r19
    7040:	103ee83a 	callr	r2
    7044:	88a3c83a 	sub	r17,r17,r2
    7048:	00bff616 	blt	zero,r2,7024 <__alt_data_end+0xfffb18f4>
    704c:	80c0030b 	ldhu	r3,12(r16)
    7050:	00bfffc4 	movi	r2,-1
    7054:	18c01014 	ori	r3,r3,64
    7058:	80c0030d 	sth	r3,12(r16)
    705c:	003fdf06 	br	6fdc <__alt_data_end+0xfffb18ac>
    7060:	00074a40 	call	74a4 <__sinit>
    7064:	003fab06 	br	6f14 <__alt_data_end+0xfffb17e4>
    7068:	80800517 	ldw	r2,20(r16)
    706c:	003fea06 	br	7018 <__alt_data_end+0xfffb18e8>
    7070:	81400717 	ldw	r5,28(r16)
    7074:	000d883a 	mov	r6,zero
    7078:	9809883a 	mov	r4,r19
    707c:	01c00044 	movi	r7,1
    7080:	403ee83a 	callr	r8
    7084:	100d883a 	mov	r6,r2
    7088:	00bfffc4 	movi	r2,-1
    708c:	30801326 	beq	r6,r2,70dc <_fflush_r+0x1f4>
    7090:	8080030b 	ldhu	r2,12(r16)
    7094:	82000a17 	ldw	r8,40(r16)
    7098:	003fb006 	br	6f5c <__alt_data_end+0xfffb182c>
    709c:	80c00f17 	ldw	r3,60(r16)
    70a0:	00ffa716 	blt	zero,r3,6f40 <__alt_data_end+0xfffb1810>
    70a4:	003fcc06 	br	6fd8 <__alt_data_end+0xfffb18a8>
    70a8:	98c00017 	ldw	r3,0(r19)
    70ac:	183fb926 	beq	r3,zero,6f94 <__alt_data_end+0xfffb1864>
    70b0:	01000744 	movi	r4,29
    70b4:	19000226 	beq	r3,r4,70c0 <_fflush_r+0x1d8>
    70b8:	01000584 	movi	r4,22
    70bc:	1900101e 	bne	r3,r4,7100 <_fflush_r+0x218>
    70c0:	8080030b 	ldhu	r2,12(r16)
    70c4:	80c00417 	ldw	r3,16(r16)
    70c8:	80000115 	stw	zero,4(r16)
    70cc:	10bdffcc 	andi	r2,r2,63487
    70d0:	8080030d 	sth	r2,12(r16)
    70d4:	80c00015 	stw	r3,0(r16)
    70d8:	003fb706 	br	6fb8 <__alt_data_end+0xfffb1888>
    70dc:	98800017 	ldw	r2,0(r19)
    70e0:	103feb26 	beq	r2,zero,7090 <__alt_data_end+0xfffb1960>
    70e4:	00c00744 	movi	r3,29
    70e8:	10c00226 	beq	r2,r3,70f4 <_fflush_r+0x20c>
    70ec:	00c00584 	movi	r3,22
    70f0:	10ffd61e 	bne	r2,r3,704c <__alt_data_end+0xfffb191c>
    70f4:	9c400015 	stw	r17,0(r19)
    70f8:	0005883a 	mov	r2,zero
    70fc:	003fb706 	br	6fdc <__alt_data_end+0xfffb18ac>
    7100:	80c0030b 	ldhu	r3,12(r16)
    7104:	18c01014 	ori	r3,r3,64
    7108:	80c0030d 	sth	r3,12(r16)
    710c:	003fb306 	br	6fdc <__alt_data_end+0xfffb18ac>

00007110 <fflush>:
    7110:	20000526 	beq	r4,zero,7128 <fflush+0x18>
    7114:	00800074 	movhi	r2,1
    7118:	10902a04 	addi	r2,r2,16552
    711c:	200b883a 	mov	r5,r4
    7120:	11000017 	ldw	r4,0(r2)
    7124:	0006ee81 	jmpi	6ee8 <_fflush_r>
    7128:	00800074 	movhi	r2,1
    712c:	10902904 	addi	r2,r2,16548
    7130:	11000017 	ldw	r4,0(r2)
    7134:	01400034 	movhi	r5,0
    7138:	295bba04 	addi	r5,r5,28392
    713c:	0007e641 	jmpi	7e64 <_fwalk_reent>

00007140 <__fp_lock>:
    7140:	0005883a 	mov	r2,zero
    7144:	f800283a 	ret

00007148 <__fp_unlock>:
    7148:	0005883a 	mov	r2,zero
    714c:	f800283a 	ret

00007150 <_cleanup_r>:
    7150:	01400074 	movhi	r5,1
    7154:	296d9d04 	addi	r5,r5,-18828
    7158:	0007dac1 	jmpi	7dac <_fwalk>

0000715c <__sinit.part.1>:
    715c:	defff604 	addi	sp,sp,-40
    7160:	00c00034 	movhi	r3,0
    7164:	dfc00915 	stw	ra,36(sp)
    7168:	df000815 	stw	fp,32(sp)
    716c:	ddc00715 	stw	r23,28(sp)
    7170:	dd800615 	stw	r22,24(sp)
    7174:	dd400515 	stw	r21,20(sp)
    7178:	dd000415 	stw	r20,16(sp)
    717c:	dcc00315 	stw	r19,12(sp)
    7180:	dc800215 	stw	r18,8(sp)
    7184:	dc400115 	stw	r17,4(sp)
    7188:	dc000015 	stw	r16,0(sp)
    718c:	18dc5404 	addi	r3,r3,29008
    7190:	24000117 	ldw	r16,4(r4)
    7194:	20c00f15 	stw	r3,60(r4)
    7198:	07000044 	movi	fp,1
    719c:	00c000c4 	movi	r3,3
    71a0:	2080bb04 	addi	r2,r4,748
    71a4:	20c0b915 	stw	r3,740(r4)
    71a8:	27000e15 	stw	fp,56(r4)
    71ac:	2080ba15 	stw	r2,744(r4)
    71b0:	2000b815 	stw	zero,736(r4)
    71b4:	05c00204 	movi	r23,8
    71b8:	00800104 	movi	r2,4
    71bc:	2025883a 	mov	r18,r4
    71c0:	b80d883a 	mov	r6,r23
    71c4:	81001704 	addi	r4,r16,92
    71c8:	000b883a 	mov	r5,zero
    71cc:	80000015 	stw	zero,0(r16)
    71d0:	80000115 	stw	zero,4(r16)
    71d4:	80000215 	stw	zero,8(r16)
    71d8:	8080030d 	sth	r2,12(r16)
    71dc:	80001915 	stw	zero,100(r16)
    71e0:	8000038d 	sth	zero,14(r16)
    71e4:	80000415 	stw	zero,16(r16)
    71e8:	80000515 	stw	zero,20(r16)
    71ec:	80000615 	stw	zero,24(r16)
    71f0:	00085300 	call	8530 <memset>
    71f4:	05800074 	movhi	r22,1
    71f8:	94400217 	ldw	r17,8(r18)
    71fc:	05400074 	movhi	r21,1
    7200:	05000074 	movhi	r20,1
    7204:	04c00074 	movhi	r19,1
    7208:	b5a72c04 	addi	r22,r22,-25424
    720c:	ad674304 	addi	r21,r21,-25332
    7210:	a5276204 	addi	r20,r20,-25208
    7214:	9ce77904 	addi	r19,r19,-25116
    7218:	85800815 	stw	r22,32(r16)
    721c:	85400915 	stw	r21,36(r16)
    7220:	85000a15 	stw	r20,40(r16)
    7224:	84c00b15 	stw	r19,44(r16)
    7228:	84000715 	stw	r16,28(r16)
    722c:	00800284 	movi	r2,10
    7230:	89001704 	addi	r4,r17,92
    7234:	b80d883a 	mov	r6,r23
    7238:	000b883a 	mov	r5,zero
    723c:	88000015 	stw	zero,0(r17)
    7240:	88000115 	stw	zero,4(r17)
    7244:	88000215 	stw	zero,8(r17)
    7248:	8880030d 	sth	r2,12(r17)
    724c:	88001915 	stw	zero,100(r17)
    7250:	8f00038d 	sth	fp,14(r17)
    7254:	88000415 	stw	zero,16(r17)
    7258:	88000515 	stw	zero,20(r17)
    725c:	88000615 	stw	zero,24(r17)
    7260:	00085300 	call	8530 <memset>
    7264:	94000317 	ldw	r16,12(r18)
    7268:	00800484 	movi	r2,18
    726c:	8c400715 	stw	r17,28(r17)
    7270:	8d800815 	stw	r22,32(r17)
    7274:	8d400915 	stw	r21,36(r17)
    7278:	8d000a15 	stw	r20,40(r17)
    727c:	8cc00b15 	stw	r19,44(r17)
    7280:	8080030d 	sth	r2,12(r16)
    7284:	00800084 	movi	r2,2
    7288:	80000015 	stw	zero,0(r16)
    728c:	80000115 	stw	zero,4(r16)
    7290:	80000215 	stw	zero,8(r16)
    7294:	80001915 	stw	zero,100(r16)
    7298:	8080038d 	sth	r2,14(r16)
    729c:	80000415 	stw	zero,16(r16)
    72a0:	80000515 	stw	zero,20(r16)
    72a4:	80000615 	stw	zero,24(r16)
    72a8:	81001704 	addi	r4,r16,92
    72ac:	000b883a 	mov	r5,zero
    72b0:	b80d883a 	mov	r6,r23
    72b4:	00085300 	call	8530 <memset>
    72b8:	84000715 	stw	r16,28(r16)
    72bc:	85800815 	stw	r22,32(r16)
    72c0:	85400915 	stw	r21,36(r16)
    72c4:	85000a15 	stw	r20,40(r16)
    72c8:	84c00b15 	stw	r19,44(r16)
    72cc:	dfc00917 	ldw	ra,36(sp)
    72d0:	df000817 	ldw	fp,32(sp)
    72d4:	ddc00717 	ldw	r23,28(sp)
    72d8:	dd800617 	ldw	r22,24(sp)
    72dc:	dd400517 	ldw	r21,20(sp)
    72e0:	dd000417 	ldw	r20,16(sp)
    72e4:	dcc00317 	ldw	r19,12(sp)
    72e8:	dc800217 	ldw	r18,8(sp)
    72ec:	dc400117 	ldw	r17,4(sp)
    72f0:	dc000017 	ldw	r16,0(sp)
    72f4:	dec00a04 	addi	sp,sp,40
    72f8:	f800283a 	ret

000072fc <__sfmoreglue>:
    72fc:	defffc04 	addi	sp,sp,-16
    7300:	dc800215 	stw	r18,8(sp)
    7304:	2825883a 	mov	r18,r5
    7308:	dc000015 	stw	r16,0(sp)
    730c:	01401a04 	movi	r5,104
    7310:	2021883a 	mov	r16,r4
    7314:	9009883a 	mov	r4,r18
    7318:	dfc00315 	stw	ra,12(sp)
    731c:	dc400115 	stw	r17,4(sp)
    7320:	000cac00 	call	cac0 <__mulsi3>
    7324:	8009883a 	mov	r4,r16
    7328:	11400304 	addi	r5,r2,12
    732c:	1023883a 	mov	r17,r2
    7330:	00029800 	call	2980 <_malloc_r>
    7334:	1021883a 	mov	r16,r2
    7338:	10000726 	beq	r2,zero,7358 <__sfmoreglue+0x5c>
    733c:	11000304 	addi	r4,r2,12
    7340:	10000015 	stw	zero,0(r2)
    7344:	14800115 	stw	r18,4(r2)
    7348:	11000215 	stw	r4,8(r2)
    734c:	000b883a 	mov	r5,zero
    7350:	880d883a 	mov	r6,r17
    7354:	00085300 	call	8530 <memset>
    7358:	8005883a 	mov	r2,r16
    735c:	dfc00317 	ldw	ra,12(sp)
    7360:	dc800217 	ldw	r18,8(sp)
    7364:	dc400117 	ldw	r17,4(sp)
    7368:	dc000017 	ldw	r16,0(sp)
    736c:	dec00404 	addi	sp,sp,16
    7370:	f800283a 	ret

00007374 <__sfp>:
    7374:	00800074 	movhi	r2,1
    7378:	defffb04 	addi	sp,sp,-20
    737c:	10902904 	addi	r2,r2,16548
    7380:	dc800215 	stw	r18,8(sp)
    7384:	14800017 	ldw	r18,0(r2)
    7388:	dcc00315 	stw	r19,12(sp)
    738c:	dfc00415 	stw	ra,16(sp)
    7390:	90800e17 	ldw	r2,56(r18)
    7394:	dc400115 	stw	r17,4(sp)
    7398:	dc000015 	stw	r16,0(sp)
    739c:	2027883a 	mov	r19,r4
    73a0:	1000021e 	bne	r2,zero,73ac <__sfp+0x38>
    73a4:	9009883a 	mov	r4,r18
    73a8:	000715c0 	call	715c <__sinit.part.1>
    73ac:	9480b804 	addi	r18,r18,736
    73b0:	047fffc4 	movi	r17,-1
    73b4:	91400117 	ldw	r5,4(r18)
    73b8:	94000217 	ldw	r16,8(r18)
    73bc:	297fffc4 	addi	r5,r5,-1
    73c0:	28000a16 	blt	r5,zero,73ec <__sfp+0x78>
    73c4:	8080030f 	ldh	r2,12(r16)
    73c8:	10000c26 	beq	r2,zero,73fc <__sfp+0x88>
    73cc:	80c01d04 	addi	r3,r16,116
    73d0:	00000206 	br	73dc <__sfp+0x68>
    73d4:	18bfe60f 	ldh	r2,-104(r3)
    73d8:	10000826 	beq	r2,zero,73fc <__sfp+0x88>
    73dc:	297fffc4 	addi	r5,r5,-1
    73e0:	1c3ffd04 	addi	r16,r3,-12
    73e4:	18c01a04 	addi	r3,r3,104
    73e8:	2c7ffa1e 	bne	r5,r17,73d4 <__alt_data_end+0xfffb1ca4>
    73ec:	90800017 	ldw	r2,0(r18)
    73f0:	10001d26 	beq	r2,zero,7468 <__sfp+0xf4>
    73f4:	1025883a 	mov	r18,r2
    73f8:	003fee06 	br	73b4 <__alt_data_end+0xfffb1c84>
    73fc:	00bfffc4 	movi	r2,-1
    7400:	8080038d 	sth	r2,14(r16)
    7404:	00800044 	movi	r2,1
    7408:	8080030d 	sth	r2,12(r16)
    740c:	80001915 	stw	zero,100(r16)
    7410:	80000015 	stw	zero,0(r16)
    7414:	80000215 	stw	zero,8(r16)
    7418:	80000115 	stw	zero,4(r16)
    741c:	80000415 	stw	zero,16(r16)
    7420:	80000515 	stw	zero,20(r16)
    7424:	80000615 	stw	zero,24(r16)
    7428:	81001704 	addi	r4,r16,92
    742c:	000b883a 	mov	r5,zero
    7430:	01800204 	movi	r6,8
    7434:	00085300 	call	8530 <memset>
    7438:	8005883a 	mov	r2,r16
    743c:	80000c15 	stw	zero,48(r16)
    7440:	80000d15 	stw	zero,52(r16)
    7444:	80001115 	stw	zero,68(r16)
    7448:	80001215 	stw	zero,72(r16)
    744c:	dfc00417 	ldw	ra,16(sp)
    7450:	dcc00317 	ldw	r19,12(sp)
    7454:	dc800217 	ldw	r18,8(sp)
    7458:	dc400117 	ldw	r17,4(sp)
    745c:	dc000017 	ldw	r16,0(sp)
    7460:	dec00504 	addi	sp,sp,20
    7464:	f800283a 	ret
    7468:	9809883a 	mov	r4,r19
    746c:	01400104 	movi	r5,4
    7470:	00072fc0 	call	72fc <__sfmoreglue>
    7474:	90800015 	stw	r2,0(r18)
    7478:	103fde1e 	bne	r2,zero,73f4 <__alt_data_end+0xfffb1cc4>
    747c:	00800304 	movi	r2,12
    7480:	98800015 	stw	r2,0(r19)
    7484:	0005883a 	mov	r2,zero
    7488:	003ff006 	br	744c <__alt_data_end+0xfffb1d1c>

0000748c <_cleanup>:
    748c:	00800074 	movhi	r2,1
    7490:	10902904 	addi	r2,r2,16548
    7494:	11000017 	ldw	r4,0(r2)
    7498:	01400074 	movhi	r5,1
    749c:	296d9d04 	addi	r5,r5,-18828
    74a0:	0007dac1 	jmpi	7dac <_fwalk>

000074a4 <__sinit>:
    74a4:	20800e17 	ldw	r2,56(r4)
    74a8:	10000126 	beq	r2,zero,74b0 <__sinit+0xc>
    74ac:	f800283a 	ret
    74b0:	000715c1 	jmpi	715c <__sinit.part.1>

000074b4 <__sfp_lock_acquire>:
    74b4:	f800283a 	ret

000074b8 <__sfp_lock_release>:
    74b8:	f800283a 	ret

000074bc <__sinit_lock_acquire>:
    74bc:	f800283a 	ret

000074c0 <__sinit_lock_release>:
    74c0:	f800283a 	ret

000074c4 <__fp_lock_all>:
    74c4:	00800074 	movhi	r2,1
    74c8:	10902a04 	addi	r2,r2,16552
    74cc:	11000017 	ldw	r4,0(r2)
    74d0:	01400034 	movhi	r5,0
    74d4:	295c5004 	addi	r5,r5,28992
    74d8:	0007dac1 	jmpi	7dac <_fwalk>

000074dc <__fp_unlock_all>:
    74dc:	00800074 	movhi	r2,1
    74e0:	10902a04 	addi	r2,r2,16552
    74e4:	11000017 	ldw	r4,0(r2)
    74e8:	01400034 	movhi	r5,0
    74ec:	295c5204 	addi	r5,r5,29000
    74f0:	0007dac1 	jmpi	7dac <_fwalk>

000074f4 <_malloc_trim_r>:
    74f4:	defffb04 	addi	sp,sp,-20
    74f8:	dcc00315 	stw	r19,12(sp)
    74fc:	04c00074 	movhi	r19,1
    7500:	dc800215 	stw	r18,8(sp)
    7504:	dc400115 	stw	r17,4(sp)
    7508:	dc000015 	stw	r16,0(sp)
    750c:	dfc00415 	stw	ra,16(sp)
    7510:	2821883a 	mov	r16,r5
    7514:	9cc97c04 	addi	r19,r19,9712
    7518:	2025883a 	mov	r18,r4
    751c:	000f8c40 	call	f8c4 <__malloc_lock>
    7520:	98800217 	ldw	r2,8(r19)
    7524:	14400117 	ldw	r17,4(r2)
    7528:	00bfff04 	movi	r2,-4
    752c:	88a2703a 	and	r17,r17,r2
    7530:	8c21c83a 	sub	r16,r17,r16
    7534:	8403fbc4 	addi	r16,r16,4079
    7538:	8020d33a 	srli	r16,r16,12
    753c:	0083ffc4 	movi	r2,4095
    7540:	843fffc4 	addi	r16,r16,-1
    7544:	8020933a 	slli	r16,r16,12
    7548:	1400060e 	bge	r2,r16,7564 <_malloc_trim_r+0x70>
    754c:	9009883a 	mov	r4,r18
    7550:	000b883a 	mov	r5,zero
    7554:	000325c0 	call	325c <_sbrk_r>
    7558:	98c00217 	ldw	r3,8(r19)
    755c:	1c47883a 	add	r3,r3,r17
    7560:	10c00a26 	beq	r2,r3,758c <_malloc_trim_r+0x98>
    7564:	9009883a 	mov	r4,r18
    7568:	000f8e40 	call	f8e4 <__malloc_unlock>
    756c:	0005883a 	mov	r2,zero
    7570:	dfc00417 	ldw	ra,16(sp)
    7574:	dcc00317 	ldw	r19,12(sp)
    7578:	dc800217 	ldw	r18,8(sp)
    757c:	dc400117 	ldw	r17,4(sp)
    7580:	dc000017 	ldw	r16,0(sp)
    7584:	dec00504 	addi	sp,sp,20
    7588:	f800283a 	ret
    758c:	9009883a 	mov	r4,r18
    7590:	040bc83a 	sub	r5,zero,r16
    7594:	000325c0 	call	325c <_sbrk_r>
    7598:	00ffffc4 	movi	r3,-1
    759c:	10c00d26 	beq	r2,r3,75d4 <_malloc_trim_r+0xe0>
    75a0:	00c00074 	movhi	r3,1
    75a4:	18d70804 	addi	r3,r3,23584
    75a8:	18800017 	ldw	r2,0(r3)
    75ac:	99000217 	ldw	r4,8(r19)
    75b0:	8c23c83a 	sub	r17,r17,r16
    75b4:	8c400054 	ori	r17,r17,1
    75b8:	1421c83a 	sub	r16,r2,r16
    75bc:	24400115 	stw	r17,4(r4)
    75c0:	9009883a 	mov	r4,r18
    75c4:	1c000015 	stw	r16,0(r3)
    75c8:	000f8e40 	call	f8e4 <__malloc_unlock>
    75cc:	00800044 	movi	r2,1
    75d0:	003fe706 	br	7570 <__alt_data_end+0xfffb1e40>
    75d4:	9009883a 	mov	r4,r18
    75d8:	000b883a 	mov	r5,zero
    75dc:	000325c0 	call	325c <_sbrk_r>
    75e0:	99000217 	ldw	r4,8(r19)
    75e4:	014003c4 	movi	r5,15
    75e8:	1107c83a 	sub	r3,r2,r4
    75ec:	28ffdd0e 	bge	r5,r3,7564 <__alt_data_end+0xfffb1e34>
    75f0:	01400074 	movhi	r5,1
    75f4:	29502704 	addi	r5,r5,16540
    75f8:	29400017 	ldw	r5,0(r5)
    75fc:	18c00054 	ori	r3,r3,1
    7600:	20c00115 	stw	r3,4(r4)
    7604:	00c00074 	movhi	r3,1
    7608:	1145c83a 	sub	r2,r2,r5
    760c:	18d70804 	addi	r3,r3,23584
    7610:	18800015 	stw	r2,0(r3)
    7614:	003fd306 	br	7564 <__alt_data_end+0xfffb1e34>

00007618 <_free_r>:
    7618:	28004c26 	beq	r5,zero,774c <_free_r+0x134>
    761c:	defffd04 	addi	sp,sp,-12
    7620:	dc400115 	stw	r17,4(sp)
    7624:	dc000015 	stw	r16,0(sp)
    7628:	2023883a 	mov	r17,r4
    762c:	2821883a 	mov	r16,r5
    7630:	dfc00215 	stw	ra,8(sp)
    7634:	000f8c40 	call	f8c4 <__malloc_lock>
    7638:	813fff17 	ldw	r4,-4(r16)
    763c:	00bfff84 	movi	r2,-2
    7640:	02400074 	movhi	r9,1
    7644:	81bffe04 	addi	r6,r16,-8
    7648:	2084703a 	and	r2,r4,r2
    764c:	4a497c04 	addi	r9,r9,9712
    7650:	308b883a 	add	r5,r6,r2
    7654:	2a000117 	ldw	r8,4(r5)
    7658:	49c00217 	ldw	r7,8(r9)
    765c:	00ffff04 	movi	r3,-4
    7660:	40c6703a 	and	r3,r8,r3
    7664:	39405326 	beq	r7,r5,77b4 <_free_r+0x19c>
    7668:	28c00115 	stw	r3,4(r5)
    766c:	2100004c 	andi	r4,r4,1
    7670:	2000091e 	bne	r4,zero,7698 <_free_r+0x80>
    7674:	81fffe17 	ldw	r7,-8(r16)
    7678:	4a000204 	addi	r8,r9,8
    767c:	31cdc83a 	sub	r6,r6,r7
    7680:	31000217 	ldw	r4,8(r6)
    7684:	11c5883a 	add	r2,r2,r7
    7688:	22006126 	beq	r4,r8,7810 <_free_r+0x1f8>
    768c:	31c00317 	ldw	r7,12(r6)
    7690:	21c00315 	stw	r7,12(r4)
    7694:	39000215 	stw	r4,8(r7)
    7698:	28c9883a 	add	r4,r5,r3
    769c:	21c00117 	ldw	r7,4(r4)
    76a0:	39c0004c 	andi	r7,r7,1
    76a4:	38000d1e 	bne	r7,zero,76dc <_free_r+0xc4>
    76a8:	29000217 	ldw	r4,8(r5)
    76ac:	10c5883a 	add	r2,r2,r3
    76b0:	00c00074 	movhi	r3,1
    76b4:	18c97e04 	addi	r3,r3,9720
    76b8:	20c07526 	beq	r4,r3,7890 <_free_r+0x278>
    76bc:	29c00317 	ldw	r7,12(r5)
    76c0:	11400054 	ori	r5,r2,1
    76c4:	3087883a 	add	r3,r6,r2
    76c8:	21c00315 	stw	r7,12(r4)
    76cc:	39000215 	stw	r4,8(r7)
    76d0:	31400115 	stw	r5,4(r6)
    76d4:	18800015 	stw	r2,0(r3)
    76d8:	00000406 	br	76ec <_free_r+0xd4>
    76dc:	10c00054 	ori	r3,r2,1
    76e0:	30c00115 	stw	r3,4(r6)
    76e4:	3087883a 	add	r3,r6,r2
    76e8:	18800015 	stw	r2,0(r3)
    76ec:	00c07fc4 	movi	r3,511
    76f0:	18801736 	bltu	r3,r2,7750 <_free_r+0x138>
    76f4:	1004d0fa 	srli	r2,r2,3
    76f8:	01400044 	movi	r5,1
    76fc:	49000117 	ldw	r4,4(r9)
    7700:	1087883a 	add	r3,r2,r2
    7704:	18c7883a 	add	r3,r3,r3
    7708:	1005d0ba 	srai	r2,r2,2
    770c:	18c7883a 	add	r3,r3,r3
    7710:	1a47883a 	add	r3,r3,r9
    7714:	19c00217 	ldw	r7,8(r3)
    7718:	2884983a 	sll	r2,r5,r2
    771c:	30c00315 	stw	r3,12(r6)
    7720:	31c00215 	stw	r7,8(r6)
    7724:	1104b03a 	or	r2,r2,r4
    7728:	19800215 	stw	r6,8(r3)
    772c:	48800115 	stw	r2,4(r9)
    7730:	39800315 	stw	r6,12(r7)
    7734:	8809883a 	mov	r4,r17
    7738:	dfc00217 	ldw	ra,8(sp)
    773c:	dc400117 	ldw	r17,4(sp)
    7740:	dc000017 	ldw	r16,0(sp)
    7744:	dec00304 	addi	sp,sp,12
    7748:	000f8e41 	jmpi	f8e4 <__malloc_unlock>
    774c:	f800283a 	ret
    7750:	1006d27a 	srli	r3,r2,9
    7754:	01000104 	movi	r4,4
    7758:	20c04036 	bltu	r4,r3,785c <_free_r+0x244>
    775c:	1006d1ba 	srli	r3,r2,6
    7760:	19400e04 	addi	r5,r3,56
    7764:	2947883a 	add	r3,r5,r5
    7768:	18c7883a 	add	r3,r3,r3
    776c:	18c7883a 	add	r3,r3,r3
    7770:	1a49883a 	add	r4,r3,r9
    7774:	20c00217 	ldw	r3,8(r4)
    7778:	01c00074 	movhi	r7,1
    777c:	39c97c04 	addi	r7,r7,9712
    7780:	19003b26 	beq	r3,r4,7870 <_free_r+0x258>
    7784:	01ffff04 	movi	r7,-4
    7788:	19400117 	ldw	r5,4(r3)
    778c:	29ca703a 	and	r5,r5,r7
    7790:	1140022e 	bgeu	r2,r5,779c <_free_r+0x184>
    7794:	18c00217 	ldw	r3,8(r3)
    7798:	20fffb1e 	bne	r4,r3,7788 <__alt_data_end+0xfffb2058>
    779c:	18800317 	ldw	r2,12(r3)
    77a0:	30800315 	stw	r2,12(r6)
    77a4:	30c00215 	stw	r3,8(r6)
    77a8:	11800215 	stw	r6,8(r2)
    77ac:	19800315 	stw	r6,12(r3)
    77b0:	003fe006 	br	7734 <__alt_data_end+0xfffb2004>
    77b4:	2100004c 	andi	r4,r4,1
    77b8:	1885883a 	add	r2,r3,r2
    77bc:	2000071e 	bne	r4,zero,77dc <_free_r+0x1c4>
    77c0:	817ffe17 	ldw	r5,-8(r16)
    77c4:	314dc83a 	sub	r6,r6,r5
    77c8:	30c00317 	ldw	r3,12(r6)
    77cc:	31000217 	ldw	r4,8(r6)
    77d0:	1145883a 	add	r2,r2,r5
    77d4:	20c00315 	stw	r3,12(r4)
    77d8:	19000215 	stw	r4,8(r3)
    77dc:	10c00054 	ori	r3,r2,1
    77e0:	30c00115 	stw	r3,4(r6)
    77e4:	00c00074 	movhi	r3,1
    77e8:	18d02804 	addi	r3,r3,16544
    77ec:	18c00017 	ldw	r3,0(r3)
    77f0:	49800215 	stw	r6,8(r9)
    77f4:	10ffcf36 	bltu	r2,r3,7734 <__alt_data_end+0xfffb2004>
    77f8:	00800074 	movhi	r2,1
    77fc:	1096fc04 	addi	r2,r2,23536
    7800:	11400017 	ldw	r5,0(r2)
    7804:	8809883a 	mov	r4,r17
    7808:	00074f40 	call	74f4 <_malloc_trim_r>
    780c:	003fc906 	br	7734 <__alt_data_end+0xfffb2004>
    7810:	28c9883a 	add	r4,r5,r3
    7814:	21000117 	ldw	r4,4(r4)
    7818:	2100004c 	andi	r4,r4,1
    781c:	20000a1e 	bne	r4,zero,7848 <_free_r+0x230>
    7820:	29000317 	ldw	r4,12(r5)
    7824:	29400217 	ldw	r5,8(r5)
    7828:	10c5883a 	add	r2,r2,r3
    782c:	10c00054 	ori	r3,r2,1
    7830:	29000315 	stw	r4,12(r5)
    7834:	21400215 	stw	r5,8(r4)
    7838:	30c00115 	stw	r3,4(r6)
    783c:	308d883a 	add	r6,r6,r2
    7840:	30800015 	stw	r2,0(r6)
    7844:	003fbb06 	br	7734 <__alt_data_end+0xfffb2004>
    7848:	10c00054 	ori	r3,r2,1
    784c:	30c00115 	stw	r3,4(r6)
    7850:	308d883a 	add	r6,r6,r2
    7854:	30800015 	stw	r2,0(r6)
    7858:	003fb606 	br	7734 <__alt_data_end+0xfffb2004>
    785c:	01000504 	movi	r4,20
    7860:	20c01436 	bltu	r4,r3,78b4 <_free_r+0x29c>
    7864:	194016c4 	addi	r5,r3,91
    7868:	2947883a 	add	r3,r5,r5
    786c:	003fbe06 	br	7768 <__alt_data_end+0xfffb2038>
    7870:	280bd0ba 	srai	r5,r5,2
    7874:	00800044 	movi	r2,1
    7878:	39000117 	ldw	r4,4(r7)
    787c:	114a983a 	sll	r5,r2,r5
    7880:	1805883a 	mov	r2,r3
    7884:	2908b03a 	or	r4,r5,r4
    7888:	39000115 	stw	r4,4(r7)
    788c:	003fc406 	br	77a0 <__alt_data_end+0xfffb2070>
    7890:	49800515 	stw	r6,20(r9)
    7894:	49800415 	stw	r6,16(r9)
    7898:	10c00054 	ori	r3,r2,1
    789c:	31000315 	stw	r4,12(r6)
    78a0:	31000215 	stw	r4,8(r6)
    78a4:	30c00115 	stw	r3,4(r6)
    78a8:	308d883a 	add	r6,r6,r2
    78ac:	30800015 	stw	r2,0(r6)
    78b0:	003fa006 	br	7734 <__alt_data_end+0xfffb2004>
    78b4:	01001504 	movi	r4,84
    78b8:	20c00436 	bltu	r4,r3,78cc <_free_r+0x2b4>
    78bc:	1006d33a 	srli	r3,r2,12
    78c0:	19401b84 	addi	r5,r3,110
    78c4:	2947883a 	add	r3,r5,r5
    78c8:	003fa706 	br	7768 <__alt_data_end+0xfffb2038>
    78cc:	01005504 	movi	r4,340
    78d0:	20c00436 	bltu	r4,r3,78e4 <_free_r+0x2cc>
    78d4:	1006d3fa 	srli	r3,r2,15
    78d8:	19401dc4 	addi	r5,r3,119
    78dc:	2947883a 	add	r3,r5,r5
    78e0:	003fa106 	br	7768 <__alt_data_end+0xfffb2038>
    78e4:	01015504 	movi	r4,1364
    78e8:	20c00436 	bltu	r4,r3,78fc <_free_r+0x2e4>
    78ec:	1006d4ba 	srli	r3,r2,18
    78f0:	19401f04 	addi	r5,r3,124
    78f4:	2947883a 	add	r3,r5,r5
    78f8:	003f9b06 	br	7768 <__alt_data_end+0xfffb2038>
    78fc:	00c03f04 	movi	r3,252
    7900:	01401f84 	movi	r5,126
    7904:	003f9806 	br	7768 <__alt_data_end+0xfffb2038>

00007908 <__sfvwrite_r>:
    7908:	30800217 	ldw	r2,8(r6)
    790c:	10004526 	beq	r2,zero,7a24 <__sfvwrite_r+0x11c>
    7910:	28c0030b 	ldhu	r3,12(r5)
    7914:	defff404 	addi	sp,sp,-48
    7918:	dd400715 	stw	r21,28(sp)
    791c:	dcc00515 	stw	r19,20(sp)
    7920:	dc000215 	stw	r16,8(sp)
    7924:	dfc00b15 	stw	ra,44(sp)
    7928:	df000a15 	stw	fp,40(sp)
    792c:	ddc00915 	stw	r23,36(sp)
    7930:	dd800815 	stw	r22,32(sp)
    7934:	dd000615 	stw	r20,24(sp)
    7938:	dc800415 	stw	r18,16(sp)
    793c:	dc400315 	stw	r17,12(sp)
    7940:	1880020c 	andi	r2,r3,8
    7944:	2821883a 	mov	r16,r5
    7948:	202b883a 	mov	r21,r4
    794c:	3027883a 	mov	r19,r6
    7950:	10002526 	beq	r2,zero,79e8 <__sfvwrite_r+0xe0>
    7954:	28800417 	ldw	r2,16(r5)
    7958:	10002326 	beq	r2,zero,79e8 <__sfvwrite_r+0xe0>
    795c:	1880008c 	andi	r2,r3,2
    7960:	9c400017 	ldw	r17,0(r19)
    7964:	10003126 	beq	r2,zero,7a2c <__sfvwrite_r+0x124>
    7968:	0029883a 	mov	r20,zero
    796c:	0025883a 	mov	r18,zero
    7970:	05810004 	movi	r22,1024
    7974:	a00d883a 	mov	r6,r20
    7978:	a809883a 	mov	r4,r21
    797c:	90002526 	beq	r18,zero,7a14 <__sfvwrite_r+0x10c>
    7980:	900f883a 	mov	r7,r18
    7984:	81400717 	ldw	r5,28(r16)
    7988:	b480012e 	bgeu	r22,r18,7990 <__sfvwrite_r+0x88>
    798c:	01c10004 	movi	r7,1024
    7990:	80800917 	ldw	r2,36(r16)
    7994:	103ee83a 	callr	r2
    7998:	0080510e 	bge	zero,r2,7ae0 <__sfvwrite_r+0x1d8>
    799c:	98c00217 	ldw	r3,8(r19)
    79a0:	a0a9883a 	add	r20,r20,r2
    79a4:	90a5c83a 	sub	r18,r18,r2
    79a8:	1885c83a 	sub	r2,r3,r2
    79ac:	98800215 	stw	r2,8(r19)
    79b0:	103ff01e 	bne	r2,zero,7974 <__alt_data_end+0xfffb2244>
    79b4:	0005883a 	mov	r2,zero
    79b8:	dfc00b17 	ldw	ra,44(sp)
    79bc:	df000a17 	ldw	fp,40(sp)
    79c0:	ddc00917 	ldw	r23,36(sp)
    79c4:	dd800817 	ldw	r22,32(sp)
    79c8:	dd400717 	ldw	r21,28(sp)
    79cc:	dd000617 	ldw	r20,24(sp)
    79d0:	dcc00517 	ldw	r19,20(sp)
    79d4:	dc800417 	ldw	r18,16(sp)
    79d8:	dc400317 	ldw	r17,12(sp)
    79dc:	dc000217 	ldw	r16,8(sp)
    79e0:	dec00c04 	addi	sp,sp,48
    79e4:	f800283a 	ret
    79e8:	a809883a 	mov	r4,r21
    79ec:	800b883a 	mov	r5,r16
    79f0:	00054680 	call	5468 <__swsetup_r>
    79f4:	80c0030b 	ldhu	r3,12(r16)
    79f8:	103fd826 	beq	r2,zero,795c <__alt_data_end+0xfffb222c>
    79fc:	18c01014 	ori	r3,r3,64
    7a00:	80c0030d 	sth	r3,12(r16)
    7a04:	00c00244 	movi	r3,9
    7a08:	00bfffc4 	movi	r2,-1
    7a0c:	a8c00015 	stw	r3,0(r21)
    7a10:	003fe906 	br	79b8 <__alt_data_end+0xfffb2288>
    7a14:	8d000017 	ldw	r20,0(r17)
    7a18:	8c800117 	ldw	r18,4(r17)
    7a1c:	8c400204 	addi	r17,r17,8
    7a20:	003fd406 	br	7974 <__alt_data_end+0xfffb2244>
    7a24:	0005883a 	mov	r2,zero
    7a28:	f800283a 	ret
    7a2c:	1880004c 	andi	r2,r3,1
    7a30:	1000301e 	bne	r2,zero,7af4 <__sfvwrite_r+0x1ec>
    7a34:	002f883a 	mov	r23,zero
    7a38:	0025883a 	mov	r18,zero
    7a3c:	90001c26 	beq	r18,zero,7ab0 <__sfvwrite_r+0x1a8>
    7a40:	1880800c 	andi	r2,r3,512
    7a44:	85000217 	ldw	r20,8(r16)
    7a48:	10006c26 	beq	r2,zero,7bfc <__sfvwrite_r+0x2f4>
    7a4c:	a02d883a 	mov	r22,r20
    7a50:	95008536 	bltu	r18,r20,7c68 <__sfvwrite_r+0x360>
    7a54:	1881200c 	andi	r2,r3,1152
    7a58:	10009d1e 	bne	r2,zero,7cd0 <__sfvwrite_r+0x3c8>
    7a5c:	81000017 	ldw	r4,0(r16)
    7a60:	a039883a 	mov	fp,r20
    7a64:	9029883a 	mov	r20,r18
    7a68:	b80b883a 	mov	r5,r23
    7a6c:	b00d883a 	mov	r6,r22
    7a70:	00083d40 	call	83d4 <memmove>
    7a74:	80c00217 	ldw	r3,8(r16)
    7a78:	81000017 	ldw	r4,0(r16)
    7a7c:	9005883a 	mov	r2,r18
    7a80:	1f39c83a 	sub	fp,r3,fp
    7a84:	258f883a 	add	r7,r4,r22
    7a88:	87000215 	stw	fp,8(r16)
    7a8c:	81c00015 	stw	r7,0(r16)
    7a90:	98c00217 	ldw	r3,8(r19)
    7a94:	b8af883a 	add	r23,r23,r2
    7a98:	90a5c83a 	sub	r18,r18,r2
    7a9c:	1d05c83a 	sub	r2,r3,r20
    7aa0:	98800215 	stw	r2,8(r19)
    7aa4:	103fc326 	beq	r2,zero,79b4 <__alt_data_end+0xfffb2284>
    7aa8:	80c0030b 	ldhu	r3,12(r16)
    7aac:	903fe41e 	bne	r18,zero,7a40 <__alt_data_end+0xfffb2310>
    7ab0:	8dc00017 	ldw	r23,0(r17)
    7ab4:	8c800117 	ldw	r18,4(r17)
    7ab8:	8c400204 	addi	r17,r17,8
    7abc:	003fdf06 	br	7a3c <__alt_data_end+0xfffb230c>
    7ac0:	000969c0 	call	969c <_realloc_r>
    7ac4:	102d883a 	mov	r22,r2
    7ac8:	1000a01e 	bne	r2,zero,7d4c <__sfvwrite_r+0x444>
    7acc:	81400417 	ldw	r5,16(r16)
    7ad0:	a809883a 	mov	r4,r21
    7ad4:	00076180 	call	7618 <_free_r>
    7ad8:	00800304 	movi	r2,12
    7adc:	a8800015 	stw	r2,0(r21)
    7ae0:	80c0030b 	ldhu	r3,12(r16)
    7ae4:	00bfffc4 	movi	r2,-1
    7ae8:	18c01014 	ori	r3,r3,64
    7aec:	80c0030d 	sth	r3,12(r16)
    7af0:	003fb106 	br	79b8 <__alt_data_end+0xfffb2288>
    7af4:	0029883a 	mov	r20,zero
    7af8:	0011883a 	mov	r8,zero
    7afc:	0039883a 	mov	fp,zero
    7b00:	0025883a 	mov	r18,zero
    7b04:	90001f26 	beq	r18,zero,7b84 <__sfvwrite_r+0x27c>
    7b08:	40006826 	beq	r8,zero,7cac <__sfvwrite_r+0x3a4>
    7b0c:	a02f883a 	mov	r23,r20
    7b10:	9500012e 	bgeu	r18,r20,7b18 <__sfvwrite_r+0x210>
    7b14:	902f883a 	mov	r23,r18
    7b18:	81000017 	ldw	r4,0(r16)
    7b1c:	80800417 	ldw	r2,16(r16)
    7b20:	b82d883a 	mov	r22,r23
    7b24:	81800217 	ldw	r6,8(r16)
    7b28:	81c00517 	ldw	r7,20(r16)
    7b2c:	1100022e 	bgeu	r2,r4,7b38 <__sfvwrite_r+0x230>
    7b30:	31c7883a 	add	r3,r6,r7
    7b34:	1dc01816 	blt	r3,r23,7b98 <__sfvwrite_r+0x290>
    7b38:	b9c03f16 	blt	r23,r7,7c38 <__sfvwrite_r+0x330>
    7b3c:	80800917 	ldw	r2,36(r16)
    7b40:	81400717 	ldw	r5,28(r16)
    7b44:	a809883a 	mov	r4,r21
    7b48:	da000115 	stw	r8,4(sp)
    7b4c:	e00d883a 	mov	r6,fp
    7b50:	103ee83a 	callr	r2
    7b54:	102d883a 	mov	r22,r2
    7b58:	da000117 	ldw	r8,4(sp)
    7b5c:	00bfe00e 	bge	zero,r2,7ae0 <__alt_data_end+0xfffb23b0>
    7b60:	a5a9c83a 	sub	r20,r20,r22
    7b64:	a0001f26 	beq	r20,zero,7be4 <__sfvwrite_r+0x2dc>
    7b68:	98800217 	ldw	r2,8(r19)
    7b6c:	e5b9883a 	add	fp,fp,r22
    7b70:	95a5c83a 	sub	r18,r18,r22
    7b74:	15adc83a 	sub	r22,r2,r22
    7b78:	9d800215 	stw	r22,8(r19)
    7b7c:	b03f8d26 	beq	r22,zero,79b4 <__alt_data_end+0xfffb2284>
    7b80:	903fe11e 	bne	r18,zero,7b08 <__alt_data_end+0xfffb23d8>
    7b84:	8f000017 	ldw	fp,0(r17)
    7b88:	8c800117 	ldw	r18,4(r17)
    7b8c:	0011883a 	mov	r8,zero
    7b90:	8c400204 	addi	r17,r17,8
    7b94:	003fdb06 	br	7b04 <__alt_data_end+0xfffb23d4>
    7b98:	180d883a 	mov	r6,r3
    7b9c:	e00b883a 	mov	r5,fp
    7ba0:	da000115 	stw	r8,4(sp)
    7ba4:	d8c00015 	stw	r3,0(sp)
    7ba8:	00083d40 	call	83d4 <memmove>
    7bac:	d8c00017 	ldw	r3,0(sp)
    7bb0:	80800017 	ldw	r2,0(r16)
    7bb4:	a809883a 	mov	r4,r21
    7bb8:	800b883a 	mov	r5,r16
    7bbc:	10c5883a 	add	r2,r2,r3
    7bc0:	80800015 	stw	r2,0(r16)
    7bc4:	d8c00015 	stw	r3,0(sp)
    7bc8:	0006ee80 	call	6ee8 <_fflush_r>
    7bcc:	d8c00017 	ldw	r3,0(sp)
    7bd0:	da000117 	ldw	r8,4(sp)
    7bd4:	103fc21e 	bne	r2,zero,7ae0 <__alt_data_end+0xfffb23b0>
    7bd8:	182d883a 	mov	r22,r3
    7bdc:	a5a9c83a 	sub	r20,r20,r22
    7be0:	a03fe11e 	bne	r20,zero,7b68 <__alt_data_end+0xfffb2438>
    7be4:	a809883a 	mov	r4,r21
    7be8:	800b883a 	mov	r5,r16
    7bec:	0006ee80 	call	6ee8 <_fflush_r>
    7bf0:	103fbb1e 	bne	r2,zero,7ae0 <__alt_data_end+0xfffb23b0>
    7bf4:	0011883a 	mov	r8,zero
    7bf8:	003fdb06 	br	7b68 <__alt_data_end+0xfffb2438>
    7bfc:	81000017 	ldw	r4,0(r16)
    7c00:	80800417 	ldw	r2,16(r16)
    7c04:	1100012e 	bgeu	r2,r4,7c0c <__sfvwrite_r+0x304>
    7c08:	a4805a36 	bltu	r20,r18,7d74 <__sfvwrite_r+0x46c>
    7c0c:	81c00517 	ldw	r7,20(r16)
    7c10:	91c01a36 	bltu	r18,r7,7c7c <__sfvwrite_r+0x374>
    7c14:	80800917 	ldw	r2,36(r16)
    7c18:	81400717 	ldw	r5,28(r16)
    7c1c:	a809883a 	mov	r4,r21
    7c20:	b80d883a 	mov	r6,r23
    7c24:	103ee83a 	callr	r2
    7c28:	1029883a 	mov	r20,r2
    7c2c:	00bfac0e 	bge	zero,r2,7ae0 <__alt_data_end+0xfffb23b0>
    7c30:	a005883a 	mov	r2,r20
    7c34:	003f9606 	br	7a90 <__alt_data_end+0xfffb2360>
    7c38:	b80d883a 	mov	r6,r23
    7c3c:	e00b883a 	mov	r5,fp
    7c40:	da000115 	stw	r8,4(sp)
    7c44:	00083d40 	call	83d4 <memmove>
    7c48:	80800217 	ldw	r2,8(r16)
    7c4c:	80c00017 	ldw	r3,0(r16)
    7c50:	da000117 	ldw	r8,4(sp)
    7c54:	15c5c83a 	sub	r2,r2,r23
    7c58:	1def883a 	add	r23,r3,r23
    7c5c:	80800215 	stw	r2,8(r16)
    7c60:	85c00015 	stw	r23,0(r16)
    7c64:	003fbe06 	br	7b60 <__alt_data_end+0xfffb2430>
    7c68:	81000017 	ldw	r4,0(r16)
    7c6c:	9039883a 	mov	fp,r18
    7c70:	9029883a 	mov	r20,r18
    7c74:	902d883a 	mov	r22,r18
    7c78:	003f7b06 	br	7a68 <__alt_data_end+0xfffb2338>
    7c7c:	b80b883a 	mov	r5,r23
    7c80:	900d883a 	mov	r6,r18
    7c84:	00083d40 	call	83d4 <memmove>
    7c88:	80c00217 	ldw	r3,8(r16)
    7c8c:	80800017 	ldw	r2,0(r16)
    7c90:	9029883a 	mov	r20,r18
    7c94:	1c87c83a 	sub	r3,r3,r18
    7c98:	1485883a 	add	r2,r2,r18
    7c9c:	80800015 	stw	r2,0(r16)
    7ca0:	80c00215 	stw	r3,8(r16)
    7ca4:	9005883a 	mov	r2,r18
    7ca8:	003f7906 	br	7a90 <__alt_data_end+0xfffb2360>
    7cac:	e009883a 	mov	r4,fp
    7cb0:	01400284 	movi	r5,10
    7cb4:	900d883a 	mov	r6,r18
    7cb8:	00081b40 	call	81b4 <memchr>
    7cbc:	10003826 	beq	r2,zero,7da0 <__sfvwrite_r+0x498>
    7cc0:	10800044 	addi	r2,r2,1
    7cc4:	1729c83a 	sub	r20,r2,fp
    7cc8:	02000044 	movi	r8,1
    7ccc:	003f8f06 	br	7b0c <__alt_data_end+0xfffb23dc>
    7cd0:	80800517 	ldw	r2,20(r16)
    7cd4:	81400417 	ldw	r5,16(r16)
    7cd8:	87000017 	ldw	fp,0(r16)
    7cdc:	10a9883a 	add	r20,r2,r2
    7ce0:	a085883a 	add	r2,r20,r2
    7ce4:	1028d7fa 	srli	r20,r2,31
    7ce8:	e179c83a 	sub	fp,fp,r5
    7cec:	e1000044 	addi	r4,fp,1
    7cf0:	a085883a 	add	r2,r20,r2
    7cf4:	1029d07a 	srai	r20,r2,1
    7cf8:	2485883a 	add	r2,r4,r18
    7cfc:	a00d883a 	mov	r6,r20
    7d00:	a080022e 	bgeu	r20,r2,7d0c <__sfvwrite_r+0x404>
    7d04:	1029883a 	mov	r20,r2
    7d08:	100d883a 	mov	r6,r2
    7d0c:	18c1000c 	andi	r3,r3,1024
    7d10:	a809883a 	mov	r4,r21
    7d14:	183f6a26 	beq	r3,zero,7ac0 <__alt_data_end+0xfffb2390>
    7d18:	300b883a 	mov	r5,r6
    7d1c:	00029800 	call	2980 <_malloc_r>
    7d20:	102d883a 	mov	r22,r2
    7d24:	103f6c26 	beq	r2,zero,7ad8 <__alt_data_end+0xfffb23a8>
    7d28:	81400417 	ldw	r5,16(r16)
    7d2c:	1009883a 	mov	r4,r2
    7d30:	e00d883a 	mov	r6,fp
    7d34:	000829c0 	call	829c <memcpy>
    7d38:	8080030b 	ldhu	r2,12(r16)
    7d3c:	00fedfc4 	movi	r3,-1153
    7d40:	10c4703a 	and	r2,r2,r3
    7d44:	10802014 	ori	r2,r2,128
    7d48:	8080030d 	sth	r2,12(r16)
    7d4c:	b709883a 	add	r4,r22,fp
    7d50:	a707c83a 	sub	r3,r20,fp
    7d54:	85800415 	stw	r22,16(r16)
    7d58:	85000515 	stw	r20,20(r16)
    7d5c:	81000015 	stw	r4,0(r16)
    7d60:	9039883a 	mov	fp,r18
    7d64:	80c00215 	stw	r3,8(r16)
    7d68:	9029883a 	mov	r20,r18
    7d6c:	902d883a 	mov	r22,r18
    7d70:	003f3d06 	br	7a68 <__alt_data_end+0xfffb2338>
    7d74:	b80b883a 	mov	r5,r23
    7d78:	a00d883a 	mov	r6,r20
    7d7c:	00083d40 	call	83d4 <memmove>
    7d80:	80800017 	ldw	r2,0(r16)
    7d84:	a809883a 	mov	r4,r21
    7d88:	800b883a 	mov	r5,r16
    7d8c:	1505883a 	add	r2,r2,r20
    7d90:	80800015 	stw	r2,0(r16)
    7d94:	0006ee80 	call	6ee8 <_fflush_r>
    7d98:	103fa526 	beq	r2,zero,7c30 <__alt_data_end+0xfffb2500>
    7d9c:	003f5006 	br	7ae0 <__alt_data_end+0xfffb23b0>
    7da0:	95000044 	addi	r20,r18,1
    7da4:	02000044 	movi	r8,1
    7da8:	003f5806 	br	7b0c <__alt_data_end+0xfffb23dc>

00007dac <_fwalk>:
    7dac:	defff804 	addi	sp,sp,-32
    7db0:	dd400515 	stw	r21,20(sp)
    7db4:	2540b804 	addi	r21,r4,736
    7db8:	dd800615 	stw	r22,24(sp)
    7dbc:	dd000415 	stw	r20,16(sp)
    7dc0:	dfc00715 	stw	ra,28(sp)
    7dc4:	dcc00315 	stw	r19,12(sp)
    7dc8:	dc800215 	stw	r18,8(sp)
    7dcc:	dc400115 	stw	r17,4(sp)
    7dd0:	dc000015 	stw	r16,0(sp)
    7dd4:	2829883a 	mov	r20,r5
    7dd8:	002d883a 	mov	r22,zero
    7ddc:	00074b40 	call	74b4 <__sfp_lock_acquire>
    7de0:	a8001426 	beq	r21,zero,7e34 <_fwalk+0x88>
    7de4:	04ffffc4 	movi	r19,-1
    7de8:	ac400117 	ldw	r17,4(r21)
    7dec:	ac800217 	ldw	r18,8(r21)
    7df0:	8c7fffc4 	addi	r17,r17,-1
    7df4:	88000d16 	blt	r17,zero,7e2c <_fwalk+0x80>
    7df8:	94000304 	addi	r16,r18,12
    7dfc:	94800384 	addi	r18,r18,14
    7e00:	80c0000f 	ldh	r3,0(r16)
    7e04:	8c7fffc4 	addi	r17,r17,-1
    7e08:	813ffd04 	addi	r4,r16,-12
    7e0c:	18000426 	beq	r3,zero,7e20 <_fwalk+0x74>
    7e10:	90c0000f 	ldh	r3,0(r18)
    7e14:	1cc00226 	beq	r3,r19,7e20 <_fwalk+0x74>
    7e18:	a03ee83a 	callr	r20
    7e1c:	b0acb03a 	or	r22,r22,r2
    7e20:	84001a04 	addi	r16,r16,104
    7e24:	94801a04 	addi	r18,r18,104
    7e28:	8cfff51e 	bne	r17,r19,7e00 <__alt_data_end+0xfffb26d0>
    7e2c:	ad400017 	ldw	r21,0(r21)
    7e30:	a83fed1e 	bne	r21,zero,7de8 <__alt_data_end+0xfffb26b8>
    7e34:	00074b80 	call	74b8 <__sfp_lock_release>
    7e38:	b005883a 	mov	r2,r22
    7e3c:	dfc00717 	ldw	ra,28(sp)
    7e40:	dd800617 	ldw	r22,24(sp)
    7e44:	dd400517 	ldw	r21,20(sp)
    7e48:	dd000417 	ldw	r20,16(sp)
    7e4c:	dcc00317 	ldw	r19,12(sp)
    7e50:	dc800217 	ldw	r18,8(sp)
    7e54:	dc400117 	ldw	r17,4(sp)
    7e58:	dc000017 	ldw	r16,0(sp)
    7e5c:	dec00804 	addi	sp,sp,32
    7e60:	f800283a 	ret

00007e64 <_fwalk_reent>:
    7e64:	defff804 	addi	sp,sp,-32
    7e68:	dd400515 	stw	r21,20(sp)
    7e6c:	2540b804 	addi	r21,r4,736
    7e70:	dd800615 	stw	r22,24(sp)
    7e74:	dd000415 	stw	r20,16(sp)
    7e78:	dcc00315 	stw	r19,12(sp)
    7e7c:	dfc00715 	stw	ra,28(sp)
    7e80:	dc800215 	stw	r18,8(sp)
    7e84:	dc400115 	stw	r17,4(sp)
    7e88:	dc000015 	stw	r16,0(sp)
    7e8c:	2027883a 	mov	r19,r4
    7e90:	2829883a 	mov	r20,r5
    7e94:	002d883a 	mov	r22,zero
    7e98:	00074b40 	call	74b4 <__sfp_lock_acquire>
    7e9c:	a8001326 	beq	r21,zero,7eec <_fwalk_reent+0x88>
    7ea0:	04bfffc4 	movi	r18,-1
    7ea4:	ac400117 	ldw	r17,4(r21)
    7ea8:	ac000217 	ldw	r16,8(r21)
    7eac:	8c7fffc4 	addi	r17,r17,-1
    7eb0:	88000c16 	blt	r17,zero,7ee4 <_fwalk_reent+0x80>
    7eb4:	84000304 	addi	r16,r16,12
    7eb8:	80c0000f 	ldh	r3,0(r16)
    7ebc:	8c7fffc4 	addi	r17,r17,-1
    7ec0:	817ffd04 	addi	r5,r16,-12
    7ec4:	18000526 	beq	r3,zero,7edc <_fwalk_reent+0x78>
    7ec8:	80c0008f 	ldh	r3,2(r16)
    7ecc:	9809883a 	mov	r4,r19
    7ed0:	1c800226 	beq	r3,r18,7edc <_fwalk_reent+0x78>
    7ed4:	a03ee83a 	callr	r20
    7ed8:	b0acb03a 	or	r22,r22,r2
    7edc:	84001a04 	addi	r16,r16,104
    7ee0:	8cbff51e 	bne	r17,r18,7eb8 <__alt_data_end+0xfffb2788>
    7ee4:	ad400017 	ldw	r21,0(r21)
    7ee8:	a83fee1e 	bne	r21,zero,7ea4 <__alt_data_end+0xfffb2774>
    7eec:	00074b80 	call	74b8 <__sfp_lock_release>
    7ef0:	b005883a 	mov	r2,r22
    7ef4:	dfc00717 	ldw	ra,28(sp)
    7ef8:	dd800617 	ldw	r22,24(sp)
    7efc:	dd400517 	ldw	r21,20(sp)
    7f00:	dd000417 	ldw	r20,16(sp)
    7f04:	dcc00317 	ldw	r19,12(sp)
    7f08:	dc800217 	ldw	r18,8(sp)
    7f0c:	dc400117 	ldw	r17,4(sp)
    7f10:	dc000017 	ldw	r16,0(sp)
    7f14:	dec00804 	addi	sp,sp,32
    7f18:	f800283a 	ret

00007f1c <_setlocale_r>:
    7f1c:	30001b26 	beq	r6,zero,7f8c <_setlocale_r+0x70>
    7f20:	01400074 	movhi	r5,1
    7f24:	defffe04 	addi	sp,sp,-8
    7f28:	2948db04 	addi	r5,r5,9068
    7f2c:	3009883a 	mov	r4,r6
    7f30:	dc000015 	stw	r16,0(sp)
    7f34:	dfc00115 	stw	ra,4(sp)
    7f38:	3021883a 	mov	r16,r6
    7f3c:	0009dec0 	call	9dec <strcmp>
    7f40:	1000061e 	bne	r2,zero,7f5c <_setlocale_r+0x40>
    7f44:	00800074 	movhi	r2,1
    7f48:	1088da04 	addi	r2,r2,9064
    7f4c:	dfc00117 	ldw	ra,4(sp)
    7f50:	dc000017 	ldw	r16,0(sp)
    7f54:	dec00204 	addi	sp,sp,8
    7f58:	f800283a 	ret
    7f5c:	01400074 	movhi	r5,1
    7f60:	2948da04 	addi	r5,r5,9064
    7f64:	8009883a 	mov	r4,r16
    7f68:	0009dec0 	call	9dec <strcmp>
    7f6c:	103ff526 	beq	r2,zero,7f44 <__alt_data_end+0xfffb2814>
    7f70:	01400074 	movhi	r5,1
    7f74:	2948c504 	addi	r5,r5,8980
    7f78:	8009883a 	mov	r4,r16
    7f7c:	0009dec0 	call	9dec <strcmp>
    7f80:	103ff026 	beq	r2,zero,7f44 <__alt_data_end+0xfffb2814>
    7f84:	0005883a 	mov	r2,zero
    7f88:	003ff006 	br	7f4c <__alt_data_end+0xfffb281c>
    7f8c:	00800074 	movhi	r2,1
    7f90:	1088da04 	addi	r2,r2,9064
    7f94:	f800283a 	ret

00007f98 <__locale_charset>:
    7f98:	00800074 	movhi	r2,1
    7f9c:	108b8f04 	addi	r2,r2,11836
    7fa0:	f800283a 	ret

00007fa4 <__locale_mb_cur_max>:
    7fa4:	00800074 	movhi	r2,1
    7fa8:	10902b04 	addi	r2,r2,16556
    7fac:	10800017 	ldw	r2,0(r2)
    7fb0:	f800283a 	ret

00007fb4 <__locale_msgcharset>:
    7fb4:	00800074 	movhi	r2,1
    7fb8:	108b8704 	addi	r2,r2,11804
    7fbc:	f800283a 	ret

00007fc0 <__locale_cjk_lang>:
    7fc0:	0005883a 	mov	r2,zero
    7fc4:	f800283a 	ret

00007fc8 <_localeconv_r>:
    7fc8:	00800074 	movhi	r2,1
    7fcc:	108b9704 	addi	r2,r2,11868
    7fd0:	f800283a 	ret

00007fd4 <setlocale>:
    7fd4:	00c00074 	movhi	r3,1
    7fd8:	18d02a04 	addi	r3,r3,16552
    7fdc:	2005883a 	mov	r2,r4
    7fe0:	19000017 	ldw	r4,0(r3)
    7fe4:	280d883a 	mov	r6,r5
    7fe8:	100b883a 	mov	r5,r2
    7fec:	0007f1c1 	jmpi	7f1c <_setlocale_r>

00007ff0 <localeconv>:
    7ff0:	00800074 	movhi	r2,1
    7ff4:	108b9704 	addi	r2,r2,11868
    7ff8:	f800283a 	ret

00007ffc <__smakebuf_r>:
    7ffc:	2880030b 	ldhu	r2,12(r5)
    8000:	10c0008c 	andi	r3,r2,2
    8004:	1800401e 	bne	r3,zero,8108 <__smakebuf_r+0x10c>
    8008:	deffec04 	addi	sp,sp,-80
    800c:	dc000f15 	stw	r16,60(sp)
    8010:	2821883a 	mov	r16,r5
    8014:	2940038f 	ldh	r5,14(r5)
    8018:	dc401015 	stw	r17,64(sp)
    801c:	dfc01315 	stw	ra,76(sp)
    8020:	dcc01215 	stw	r19,72(sp)
    8024:	dc801115 	stw	r18,68(sp)
    8028:	2023883a 	mov	r17,r4
    802c:	28001b16 	blt	r5,zero,809c <__smakebuf_r+0xa0>
    8030:	d80d883a 	mov	r6,sp
    8034:	000b8640 	call	b864 <_fstat_r>
    8038:	10001716 	blt	r2,zero,8098 <__smakebuf_r+0x9c>
    803c:	d8800117 	ldw	r2,4(sp)
    8040:	00e00014 	movui	r3,32768
    8044:	10bc000c 	andi	r2,r2,61440
    8048:	10c03726 	beq	r2,r3,8128 <__smakebuf_r+0x12c>
    804c:	80c0030b 	ldhu	r3,12(r16)
    8050:	18c20014 	ori	r3,r3,2048
    8054:	80c0030d 	sth	r3,12(r16)
    8058:	00c80004 	movi	r3,8192
    805c:	10c03c1e 	bne	r2,r3,8150 <__smakebuf_r+0x154>
    8060:	8140038f 	ldh	r5,14(r16)
    8064:	8809883a 	mov	r4,r17
    8068:	000b8bc0 	call	b8bc <_isatty_r>
    806c:	10004e26 	beq	r2,zero,81a8 <__smakebuf_r+0x1ac>
    8070:	8080030b 	ldhu	r2,12(r16)
    8074:	04c00044 	movi	r19,1
    8078:	80c010c4 	addi	r3,r16,67
    807c:	14c4b03a 	or	r2,r2,r19
    8080:	8080030d 	sth	r2,12(r16)
    8084:	80c00015 	stw	r3,0(r16)
    8088:	80c00415 	stw	r3,16(r16)
    808c:	84c00515 	stw	r19,20(r16)
    8090:	04810004 	movi	r18,1024
    8094:	00000706 	br	80b4 <__smakebuf_r+0xb8>
    8098:	8080030b 	ldhu	r2,12(r16)
    809c:	10c0200c 	andi	r3,r2,128
    80a0:	18001f1e 	bne	r3,zero,8120 <__smakebuf_r+0x124>
    80a4:	04810004 	movi	r18,1024
    80a8:	10820014 	ori	r2,r2,2048
    80ac:	8080030d 	sth	r2,12(r16)
    80b0:	0027883a 	mov	r19,zero
    80b4:	8809883a 	mov	r4,r17
    80b8:	900b883a 	mov	r5,r18
    80bc:	00029800 	call	2980 <_malloc_r>
    80c0:	10002e26 	beq	r2,zero,817c <__smakebuf_r+0x180>
    80c4:	80c0030b 	ldhu	r3,12(r16)
    80c8:	01000034 	movhi	r4,0
    80cc:	211c5404 	addi	r4,r4,29008
    80d0:	89000f15 	stw	r4,60(r17)
    80d4:	18c02014 	ori	r3,r3,128
    80d8:	80c0030d 	sth	r3,12(r16)
    80dc:	80800015 	stw	r2,0(r16)
    80e0:	80800415 	stw	r2,16(r16)
    80e4:	84800515 	stw	r18,20(r16)
    80e8:	98001c1e 	bne	r19,zero,815c <__smakebuf_r+0x160>
    80ec:	dfc01317 	ldw	ra,76(sp)
    80f0:	dcc01217 	ldw	r19,72(sp)
    80f4:	dc801117 	ldw	r18,68(sp)
    80f8:	dc401017 	ldw	r17,64(sp)
    80fc:	dc000f17 	ldw	r16,60(sp)
    8100:	dec01404 	addi	sp,sp,80
    8104:	f800283a 	ret
    8108:	288010c4 	addi	r2,r5,67
    810c:	28800015 	stw	r2,0(r5)
    8110:	28800415 	stw	r2,16(r5)
    8114:	00800044 	movi	r2,1
    8118:	28800515 	stw	r2,20(r5)
    811c:	f800283a 	ret
    8120:	04801004 	movi	r18,64
    8124:	003fe006 	br	80a8 <__alt_data_end+0xfffb2978>
    8128:	81000a17 	ldw	r4,40(r16)
    812c:	00c00074 	movhi	r3,1
    8130:	18e76204 	addi	r3,r3,-25208
    8134:	20ffc51e 	bne	r4,r3,804c <__alt_data_end+0xfffb291c>
    8138:	80c0030b 	ldhu	r3,12(r16)
    813c:	01010004 	movi	r4,1024
    8140:	81001315 	stw	r4,76(r16)
    8144:	1906b03a 	or	r3,r3,r4
    8148:	80c0030d 	sth	r3,12(r16)
    814c:	003fc206 	br	8058 <__alt_data_end+0xfffb2928>
    8150:	0027883a 	mov	r19,zero
    8154:	04810004 	movi	r18,1024
    8158:	003fd606 	br	80b4 <__alt_data_end+0xfffb2984>
    815c:	8140038f 	ldh	r5,14(r16)
    8160:	8809883a 	mov	r4,r17
    8164:	000b8bc0 	call	b8bc <_isatty_r>
    8168:	103fe026 	beq	r2,zero,80ec <__alt_data_end+0xfffb29bc>
    816c:	8080030b 	ldhu	r2,12(r16)
    8170:	10800054 	ori	r2,r2,1
    8174:	8080030d 	sth	r2,12(r16)
    8178:	003fdc06 	br	80ec <__alt_data_end+0xfffb29bc>
    817c:	8080030b 	ldhu	r2,12(r16)
    8180:	10c0800c 	andi	r3,r2,512
    8184:	183fd91e 	bne	r3,zero,80ec <__alt_data_end+0xfffb29bc>
    8188:	10800094 	ori	r2,r2,2
    818c:	80c010c4 	addi	r3,r16,67
    8190:	8080030d 	sth	r2,12(r16)
    8194:	00800044 	movi	r2,1
    8198:	80c00015 	stw	r3,0(r16)
    819c:	80c00415 	stw	r3,16(r16)
    81a0:	80800515 	stw	r2,20(r16)
    81a4:	003fd106 	br	80ec <__alt_data_end+0xfffb29bc>
    81a8:	04c00044 	movi	r19,1
    81ac:	04810004 	movi	r18,1024
    81b0:	003fc006 	br	80b4 <__alt_data_end+0xfffb2984>

000081b4 <memchr>:
    81b4:	208000cc 	andi	r2,r4,3
    81b8:	280f883a 	mov	r7,r5
    81bc:	10003526 	beq	r2,zero,8294 <memchr+0xe0>
    81c0:	30bfffc4 	addi	r2,r6,-1
    81c4:	30001b26 	beq	r6,zero,8234 <memchr+0x80>
    81c8:	21800003 	ldbu	r6,0(r4)
    81cc:	28c03fcc 	andi	r3,r5,255
    81d0:	30c01a26 	beq	r6,r3,823c <memchr+0x88>
    81d4:	180d883a 	mov	r6,r3
    81d8:	00000406 	br	81ec <memchr+0x38>
    81dc:	10001526 	beq	r2,zero,8234 <memchr+0x80>
    81e0:	20c00003 	ldbu	r3,0(r4)
    81e4:	10bfffc4 	addi	r2,r2,-1
    81e8:	19801426 	beq	r3,r6,823c <memchr+0x88>
    81ec:	21000044 	addi	r4,r4,1
    81f0:	20c000cc 	andi	r3,r4,3
    81f4:	183ff91e 	bne	r3,zero,81dc <__alt_data_end+0xfffb2aac>
    81f8:	024000c4 	movi	r9,3
    81fc:	48801136 	bltu	r9,r2,8244 <memchr+0x90>
    8200:	10000c26 	beq	r2,zero,8234 <memchr+0x80>
    8204:	20c00003 	ldbu	r3,0(r4)
    8208:	29403fcc 	andi	r5,r5,255
    820c:	19400b26 	beq	r3,r5,823c <memchr+0x88>
    8210:	20c00044 	addi	r3,r4,1
    8214:	2085883a 	add	r2,r4,r2
    8218:	39803fcc 	andi	r6,r7,255
    821c:	00000306 	br	822c <memchr+0x78>
    8220:	18c00044 	addi	r3,r3,1
    8224:	197fffc3 	ldbu	r5,-1(r3)
    8228:	29800426 	beq	r5,r6,823c <memchr+0x88>
    822c:	1809883a 	mov	r4,r3
    8230:	18bffb1e 	bne	r3,r2,8220 <__alt_data_end+0xfffb2af0>
    8234:	0005883a 	mov	r2,zero
    8238:	f800283a 	ret
    823c:	2005883a 	mov	r2,r4
    8240:	f800283a 	ret
    8244:	28c03fcc 	andi	r3,r5,255
    8248:	1810923a 	slli	r8,r3,8
    824c:	02ffbff4 	movhi	r11,65279
    8250:	02a02074 	movhi	r10,32897
    8254:	40c6b03a 	or	r3,r8,r3
    8258:	1810943a 	slli	r8,r3,16
    825c:	5affbfc4 	addi	r11,r11,-257
    8260:	52a02004 	addi	r10,r10,-32640
    8264:	40d0b03a 	or	r8,r8,r3
    8268:	20c00017 	ldw	r3,0(r4)
    826c:	40c6f03a 	xor	r3,r8,r3
    8270:	1acd883a 	add	r6,r3,r11
    8274:	00c6303a 	nor	r3,zero,r3
    8278:	30c6703a 	and	r3,r6,r3
    827c:	1a86703a 	and	r3,r3,r10
    8280:	183fdf1e 	bne	r3,zero,8200 <__alt_data_end+0xfffb2ad0>
    8284:	10bfff04 	addi	r2,r2,-4
    8288:	21000104 	addi	r4,r4,4
    828c:	48bff636 	bltu	r9,r2,8268 <__alt_data_end+0xfffb2b38>
    8290:	003fdb06 	br	8200 <__alt_data_end+0xfffb2ad0>
    8294:	3005883a 	mov	r2,r6
    8298:	003fd706 	br	81f8 <__alt_data_end+0xfffb2ac8>

0000829c <memcpy>:
    829c:	deffff04 	addi	sp,sp,-4
    82a0:	dc000015 	stw	r16,0(sp)
    82a4:	00c003c4 	movi	r3,15
    82a8:	2005883a 	mov	r2,r4
    82ac:	1980432e 	bgeu	r3,r6,83bc <memcpy+0x120>
    82b0:	2146b03a 	or	r3,r4,r5
    82b4:	18c000cc 	andi	r3,r3,3
    82b8:	1800421e 	bne	r3,zero,83c4 <memcpy+0x128>
    82bc:	343ffc04 	addi	r16,r6,-16
    82c0:	8020d13a 	srli	r16,r16,4
    82c4:	28c00104 	addi	r3,r5,4
    82c8:	23400104 	addi	r13,r4,4
    82cc:	801e913a 	slli	r15,r16,4
    82d0:	2b000204 	addi	r12,r5,8
    82d4:	22c00204 	addi	r11,r4,8
    82d8:	7bc00504 	addi	r15,r15,20
    82dc:	2a800304 	addi	r10,r5,12
    82e0:	22400304 	addi	r9,r4,12
    82e4:	2bdf883a 	add	r15,r5,r15
    82e8:	2811883a 	mov	r8,r5
    82ec:	200f883a 	mov	r7,r4
    82f0:	41000017 	ldw	r4,0(r8)
    82f4:	39c00404 	addi	r7,r7,16
    82f8:	18c00404 	addi	r3,r3,16
    82fc:	393ffc15 	stw	r4,-16(r7)
    8300:	1bbffc17 	ldw	r14,-16(r3)
    8304:	6b400404 	addi	r13,r13,16
    8308:	5ac00404 	addi	r11,r11,16
    830c:	6bbffc15 	stw	r14,-16(r13)
    8310:	63800017 	ldw	r14,0(r12)
    8314:	4a400404 	addi	r9,r9,16
    8318:	42000404 	addi	r8,r8,16
    831c:	5bbffc15 	stw	r14,-16(r11)
    8320:	53800017 	ldw	r14,0(r10)
    8324:	63000404 	addi	r12,r12,16
    8328:	52800404 	addi	r10,r10,16
    832c:	4bbffc15 	stw	r14,-16(r9)
    8330:	1bffef1e 	bne	r3,r15,82f0 <__alt_data_end+0xfffb2bc0>
    8334:	81c00044 	addi	r7,r16,1
    8338:	380e913a 	slli	r7,r7,4
    833c:	310003cc 	andi	r4,r6,15
    8340:	02c000c4 	movi	r11,3
    8344:	11c7883a 	add	r3,r2,r7
    8348:	29cb883a 	add	r5,r5,r7
    834c:	59001f2e 	bgeu	r11,r4,83cc <memcpy+0x130>
    8350:	1813883a 	mov	r9,r3
    8354:	2811883a 	mov	r8,r5
    8358:	200f883a 	mov	r7,r4
    835c:	42800017 	ldw	r10,0(r8)
    8360:	4a400104 	addi	r9,r9,4
    8364:	39ffff04 	addi	r7,r7,-4
    8368:	4abfff15 	stw	r10,-4(r9)
    836c:	42000104 	addi	r8,r8,4
    8370:	59fffa36 	bltu	r11,r7,835c <__alt_data_end+0xfffb2c2c>
    8374:	213fff04 	addi	r4,r4,-4
    8378:	2008d0ba 	srli	r4,r4,2
    837c:	318000cc 	andi	r6,r6,3
    8380:	21000044 	addi	r4,r4,1
    8384:	2109883a 	add	r4,r4,r4
    8388:	2109883a 	add	r4,r4,r4
    838c:	1907883a 	add	r3,r3,r4
    8390:	290b883a 	add	r5,r5,r4
    8394:	30000626 	beq	r6,zero,83b0 <memcpy+0x114>
    8398:	198d883a 	add	r6,r3,r6
    839c:	29c00003 	ldbu	r7,0(r5)
    83a0:	18c00044 	addi	r3,r3,1
    83a4:	29400044 	addi	r5,r5,1
    83a8:	19ffffc5 	stb	r7,-1(r3)
    83ac:	19bffb1e 	bne	r3,r6,839c <__alt_data_end+0xfffb2c6c>
    83b0:	dc000017 	ldw	r16,0(sp)
    83b4:	dec00104 	addi	sp,sp,4
    83b8:	f800283a 	ret
    83bc:	2007883a 	mov	r3,r4
    83c0:	003ff406 	br	8394 <__alt_data_end+0xfffb2c64>
    83c4:	2007883a 	mov	r3,r4
    83c8:	003ff306 	br	8398 <__alt_data_end+0xfffb2c68>
    83cc:	200d883a 	mov	r6,r4
    83d0:	003ff006 	br	8394 <__alt_data_end+0xfffb2c64>

000083d4 <memmove>:
    83d4:	2005883a 	mov	r2,r4
    83d8:	29000b2e 	bgeu	r5,r4,8408 <memmove+0x34>
    83dc:	298f883a 	add	r7,r5,r6
    83e0:	21c0092e 	bgeu	r4,r7,8408 <memmove+0x34>
    83e4:	2187883a 	add	r3,r4,r6
    83e8:	198bc83a 	sub	r5,r3,r6
    83ec:	30004b26 	beq	r6,zero,851c <memmove+0x148>
    83f0:	39ffffc4 	addi	r7,r7,-1
    83f4:	39000003 	ldbu	r4,0(r7)
    83f8:	18ffffc4 	addi	r3,r3,-1
    83fc:	19000005 	stb	r4,0(r3)
    8400:	197ffb1e 	bne	r3,r5,83f0 <__alt_data_end+0xfffb2cc0>
    8404:	f800283a 	ret
    8408:	00c003c4 	movi	r3,15
    840c:	1980412e 	bgeu	r3,r6,8514 <memmove+0x140>
    8410:	1146b03a 	or	r3,r2,r5
    8414:	18c000cc 	andi	r3,r3,3
    8418:	1800411e 	bne	r3,zero,8520 <memmove+0x14c>
    841c:	33fffc04 	addi	r15,r6,-16
    8420:	781ed13a 	srli	r15,r15,4
    8424:	28c00104 	addi	r3,r5,4
    8428:	13400104 	addi	r13,r2,4
    842c:	781c913a 	slli	r14,r15,4
    8430:	2b000204 	addi	r12,r5,8
    8434:	12c00204 	addi	r11,r2,8
    8438:	73800504 	addi	r14,r14,20
    843c:	2a800304 	addi	r10,r5,12
    8440:	12400304 	addi	r9,r2,12
    8444:	2b9d883a 	add	r14,r5,r14
    8448:	2811883a 	mov	r8,r5
    844c:	100f883a 	mov	r7,r2
    8450:	41000017 	ldw	r4,0(r8)
    8454:	39c00404 	addi	r7,r7,16
    8458:	18c00404 	addi	r3,r3,16
    845c:	393ffc15 	stw	r4,-16(r7)
    8460:	193ffc17 	ldw	r4,-16(r3)
    8464:	6b400404 	addi	r13,r13,16
    8468:	5ac00404 	addi	r11,r11,16
    846c:	693ffc15 	stw	r4,-16(r13)
    8470:	61000017 	ldw	r4,0(r12)
    8474:	4a400404 	addi	r9,r9,16
    8478:	42000404 	addi	r8,r8,16
    847c:	593ffc15 	stw	r4,-16(r11)
    8480:	51000017 	ldw	r4,0(r10)
    8484:	63000404 	addi	r12,r12,16
    8488:	52800404 	addi	r10,r10,16
    848c:	493ffc15 	stw	r4,-16(r9)
    8490:	1bbfef1e 	bne	r3,r14,8450 <__alt_data_end+0xfffb2d20>
    8494:	79000044 	addi	r4,r15,1
    8498:	2008913a 	slli	r4,r4,4
    849c:	328003cc 	andi	r10,r6,15
    84a0:	02c000c4 	movi	r11,3
    84a4:	1107883a 	add	r3,r2,r4
    84a8:	290b883a 	add	r5,r5,r4
    84ac:	5a801e2e 	bgeu	r11,r10,8528 <memmove+0x154>
    84b0:	1813883a 	mov	r9,r3
    84b4:	2811883a 	mov	r8,r5
    84b8:	500f883a 	mov	r7,r10
    84bc:	41000017 	ldw	r4,0(r8)
    84c0:	4a400104 	addi	r9,r9,4
    84c4:	39ffff04 	addi	r7,r7,-4
    84c8:	493fff15 	stw	r4,-4(r9)
    84cc:	42000104 	addi	r8,r8,4
    84d0:	59fffa36 	bltu	r11,r7,84bc <__alt_data_end+0xfffb2d8c>
    84d4:	513fff04 	addi	r4,r10,-4
    84d8:	2008d0ba 	srli	r4,r4,2
    84dc:	318000cc 	andi	r6,r6,3
    84e0:	21000044 	addi	r4,r4,1
    84e4:	2109883a 	add	r4,r4,r4
    84e8:	2109883a 	add	r4,r4,r4
    84ec:	1907883a 	add	r3,r3,r4
    84f0:	290b883a 	add	r5,r5,r4
    84f4:	30000926 	beq	r6,zero,851c <memmove+0x148>
    84f8:	198d883a 	add	r6,r3,r6
    84fc:	29c00003 	ldbu	r7,0(r5)
    8500:	18c00044 	addi	r3,r3,1
    8504:	29400044 	addi	r5,r5,1
    8508:	19ffffc5 	stb	r7,-1(r3)
    850c:	19bffb1e 	bne	r3,r6,84fc <__alt_data_end+0xfffb2dcc>
    8510:	f800283a 	ret
    8514:	1007883a 	mov	r3,r2
    8518:	003ff606 	br	84f4 <__alt_data_end+0xfffb2dc4>
    851c:	f800283a 	ret
    8520:	1007883a 	mov	r3,r2
    8524:	003ff406 	br	84f8 <__alt_data_end+0xfffb2dc8>
    8528:	500d883a 	mov	r6,r10
    852c:	003ff106 	br	84f4 <__alt_data_end+0xfffb2dc4>

00008530 <memset>:
    8530:	20c000cc 	andi	r3,r4,3
    8534:	2005883a 	mov	r2,r4
    8538:	18004326 	beq	r3,zero,8648 <memset+0x118>
    853c:	31ffffc4 	addi	r7,r6,-1
    8540:	30004026 	beq	r6,zero,8644 <memset+0x114>
    8544:	2813883a 	mov	r9,r5
    8548:	200d883a 	mov	r6,r4
    854c:	2007883a 	mov	r3,r4
    8550:	00000406 	br	8564 <memset+0x34>
    8554:	3a3fffc4 	addi	r8,r7,-1
    8558:	31800044 	addi	r6,r6,1
    855c:	38003926 	beq	r7,zero,8644 <memset+0x114>
    8560:	400f883a 	mov	r7,r8
    8564:	18c00044 	addi	r3,r3,1
    8568:	32400005 	stb	r9,0(r6)
    856c:	1a0000cc 	andi	r8,r3,3
    8570:	403ff81e 	bne	r8,zero,8554 <__alt_data_end+0xfffb2e24>
    8574:	010000c4 	movi	r4,3
    8578:	21c02d2e 	bgeu	r4,r7,8630 <memset+0x100>
    857c:	29803fcc 	andi	r6,r5,255
    8580:	3008923a 	slli	r4,r6,8
    8584:	218cb03a 	or	r6,r4,r6
    8588:	3008943a 	slli	r4,r6,16
    858c:	218cb03a 	or	r6,r4,r6
    8590:	010003c4 	movi	r4,15
    8594:	21c0182e 	bgeu	r4,r7,85f8 <memset+0xc8>
    8598:	3b3ffc04 	addi	r12,r7,-16
    859c:	6018d13a 	srli	r12,r12,4
    85a0:	1a000104 	addi	r8,r3,4
    85a4:	1ac00204 	addi	r11,r3,8
    85a8:	6008913a 	slli	r4,r12,4
    85ac:	1a800304 	addi	r10,r3,12
    85b0:	1813883a 	mov	r9,r3
    85b4:	21000504 	addi	r4,r4,20
    85b8:	1909883a 	add	r4,r3,r4
    85bc:	49800015 	stw	r6,0(r9)
    85c0:	41800015 	stw	r6,0(r8)
    85c4:	59800015 	stw	r6,0(r11)
    85c8:	51800015 	stw	r6,0(r10)
    85cc:	42000404 	addi	r8,r8,16
    85d0:	4a400404 	addi	r9,r9,16
    85d4:	5ac00404 	addi	r11,r11,16
    85d8:	52800404 	addi	r10,r10,16
    85dc:	413ff71e 	bne	r8,r4,85bc <__alt_data_end+0xfffb2e8c>
    85e0:	63000044 	addi	r12,r12,1
    85e4:	6018913a 	slli	r12,r12,4
    85e8:	39c003cc 	andi	r7,r7,15
    85ec:	010000c4 	movi	r4,3
    85f0:	1b07883a 	add	r3,r3,r12
    85f4:	21c00e2e 	bgeu	r4,r7,8630 <memset+0x100>
    85f8:	1813883a 	mov	r9,r3
    85fc:	3811883a 	mov	r8,r7
    8600:	010000c4 	movi	r4,3
    8604:	49800015 	stw	r6,0(r9)
    8608:	423fff04 	addi	r8,r8,-4
    860c:	4a400104 	addi	r9,r9,4
    8610:	223ffc36 	bltu	r4,r8,8604 <__alt_data_end+0xfffb2ed4>
    8614:	393fff04 	addi	r4,r7,-4
    8618:	2008d0ba 	srli	r4,r4,2
    861c:	39c000cc 	andi	r7,r7,3
    8620:	21000044 	addi	r4,r4,1
    8624:	2109883a 	add	r4,r4,r4
    8628:	2109883a 	add	r4,r4,r4
    862c:	1907883a 	add	r3,r3,r4
    8630:	38000426 	beq	r7,zero,8644 <memset+0x114>
    8634:	19cf883a 	add	r7,r3,r7
    8638:	19400005 	stb	r5,0(r3)
    863c:	18c00044 	addi	r3,r3,1
    8640:	19fffd1e 	bne	r3,r7,8638 <__alt_data_end+0xfffb2f08>
    8644:	f800283a 	ret
    8648:	2007883a 	mov	r3,r4
    864c:	300f883a 	mov	r7,r6
    8650:	003fc806 	br	8574 <__alt_data_end+0xfffb2e44>

00008654 <_Balloc>:
    8654:	20801317 	ldw	r2,76(r4)
    8658:	defffc04 	addi	sp,sp,-16
    865c:	dc400115 	stw	r17,4(sp)
    8660:	dc000015 	stw	r16,0(sp)
    8664:	dfc00315 	stw	ra,12(sp)
    8668:	dc800215 	stw	r18,8(sp)
    866c:	2023883a 	mov	r17,r4
    8670:	2821883a 	mov	r16,r5
    8674:	10000f26 	beq	r2,zero,86b4 <_Balloc+0x60>
    8678:	8407883a 	add	r3,r16,r16
    867c:	18c7883a 	add	r3,r3,r3
    8680:	10c7883a 	add	r3,r2,r3
    8684:	18800017 	ldw	r2,0(r3)
    8688:	10001126 	beq	r2,zero,86d0 <_Balloc+0x7c>
    868c:	11000017 	ldw	r4,0(r2)
    8690:	19000015 	stw	r4,0(r3)
    8694:	10000415 	stw	zero,16(r2)
    8698:	10000315 	stw	zero,12(r2)
    869c:	dfc00317 	ldw	ra,12(sp)
    86a0:	dc800217 	ldw	r18,8(sp)
    86a4:	dc400117 	ldw	r17,4(sp)
    86a8:	dc000017 	ldw	r16,0(sp)
    86ac:	dec00404 	addi	sp,sp,16
    86b0:	f800283a 	ret
    86b4:	01400104 	movi	r5,4
    86b8:	01800844 	movi	r6,33
    86bc:	000b49c0 	call	b49c <_calloc_r>
    86c0:	88801315 	stw	r2,76(r17)
    86c4:	103fec1e 	bne	r2,zero,8678 <__alt_data_end+0xfffb2f48>
    86c8:	0005883a 	mov	r2,zero
    86cc:	003ff306 	br	869c <__alt_data_end+0xfffb2f6c>
    86d0:	01400044 	movi	r5,1
    86d4:	2c24983a 	sll	r18,r5,r16
    86d8:	8809883a 	mov	r4,r17
    86dc:	91800144 	addi	r6,r18,5
    86e0:	318d883a 	add	r6,r6,r6
    86e4:	318d883a 	add	r6,r6,r6
    86e8:	000b49c0 	call	b49c <_calloc_r>
    86ec:	103ff626 	beq	r2,zero,86c8 <__alt_data_end+0xfffb2f98>
    86f0:	14000115 	stw	r16,4(r2)
    86f4:	14800215 	stw	r18,8(r2)
    86f8:	003fe606 	br	8694 <__alt_data_end+0xfffb2f64>

000086fc <_Bfree>:
    86fc:	28000826 	beq	r5,zero,8720 <_Bfree+0x24>
    8700:	28c00117 	ldw	r3,4(r5)
    8704:	20801317 	ldw	r2,76(r4)
    8708:	18c7883a 	add	r3,r3,r3
    870c:	18c7883a 	add	r3,r3,r3
    8710:	10c5883a 	add	r2,r2,r3
    8714:	10c00017 	ldw	r3,0(r2)
    8718:	28c00015 	stw	r3,0(r5)
    871c:	11400015 	stw	r5,0(r2)
    8720:	f800283a 	ret

00008724 <__multadd>:
    8724:	defff704 	addi	sp,sp,-36
    8728:	dc800215 	stw	r18,8(sp)
    872c:	2c800417 	ldw	r18,16(r5)
    8730:	ddc00715 	stw	r23,28(sp)
    8734:	dd800615 	stw	r22,24(sp)
    8738:	dd000415 	stw	r20,16(sp)
    873c:	dcc00315 	stw	r19,12(sp)
    8740:	dc400115 	stw	r17,4(sp)
    8744:	dc000015 	stw	r16,0(sp)
    8748:	dfc00815 	stw	ra,32(sp)
    874c:	dd400515 	stw	r21,20(sp)
    8750:	2827883a 	mov	r19,r5
    8754:	2029883a 	mov	r20,r4
    8758:	3023883a 	mov	r17,r6
    875c:	3821883a 	mov	r16,r7
    8760:	2d800504 	addi	r22,r5,20
    8764:	002f883a 	mov	r23,zero
    8768:	b5400017 	ldw	r21,0(r22)
    876c:	880b883a 	mov	r5,r17
    8770:	bdc00044 	addi	r23,r23,1
    8774:	a93fffcc 	andi	r4,r21,65535
    8778:	000cac00 	call	cac0 <__mulsi3>
    877c:	1421883a 	add	r16,r2,r16
    8780:	a808d43a 	srli	r4,r21,16
    8784:	802ad43a 	srli	r21,r16,16
    8788:	880b883a 	mov	r5,r17
    878c:	000cac00 	call	cac0 <__mulsi3>
    8790:	a88f883a 	add	r7,r21,r2
    8794:	3804943a 	slli	r2,r7,16
    8798:	80ffffcc 	andi	r3,r16,65535
    879c:	b5800104 	addi	r22,r22,4
    87a0:	10c7883a 	add	r3,r2,r3
    87a4:	b0ffff15 	stw	r3,-4(r22)
    87a8:	3820d43a 	srli	r16,r7,16
    87ac:	bcbfee16 	blt	r23,r18,8768 <__alt_data_end+0xfffb3038>
    87b0:	80000926 	beq	r16,zero,87d8 <__multadd+0xb4>
    87b4:	98800217 	ldw	r2,8(r19)
    87b8:	9080130e 	bge	r18,r2,8808 <__multadd+0xe4>
    87bc:	90800144 	addi	r2,r18,5
    87c0:	1085883a 	add	r2,r2,r2
    87c4:	1085883a 	add	r2,r2,r2
    87c8:	9885883a 	add	r2,r19,r2
    87cc:	14000015 	stw	r16,0(r2)
    87d0:	94800044 	addi	r18,r18,1
    87d4:	9c800415 	stw	r18,16(r19)
    87d8:	9805883a 	mov	r2,r19
    87dc:	dfc00817 	ldw	ra,32(sp)
    87e0:	ddc00717 	ldw	r23,28(sp)
    87e4:	dd800617 	ldw	r22,24(sp)
    87e8:	dd400517 	ldw	r21,20(sp)
    87ec:	dd000417 	ldw	r20,16(sp)
    87f0:	dcc00317 	ldw	r19,12(sp)
    87f4:	dc800217 	ldw	r18,8(sp)
    87f8:	dc400117 	ldw	r17,4(sp)
    87fc:	dc000017 	ldw	r16,0(sp)
    8800:	dec00904 	addi	sp,sp,36
    8804:	f800283a 	ret
    8808:	99400117 	ldw	r5,4(r19)
    880c:	a009883a 	mov	r4,r20
    8810:	29400044 	addi	r5,r5,1
    8814:	00086540 	call	8654 <_Balloc>
    8818:	99800417 	ldw	r6,16(r19)
    881c:	99400304 	addi	r5,r19,12
    8820:	11000304 	addi	r4,r2,12
    8824:	31800084 	addi	r6,r6,2
    8828:	318d883a 	add	r6,r6,r6
    882c:	318d883a 	add	r6,r6,r6
    8830:	1023883a 	mov	r17,r2
    8834:	000829c0 	call	829c <memcpy>
    8838:	99000117 	ldw	r4,4(r19)
    883c:	a0c01317 	ldw	r3,76(r20)
    8840:	2109883a 	add	r4,r4,r4
    8844:	2109883a 	add	r4,r4,r4
    8848:	1907883a 	add	r3,r3,r4
    884c:	18800017 	ldw	r2,0(r3)
    8850:	98800015 	stw	r2,0(r19)
    8854:	1cc00015 	stw	r19,0(r3)
    8858:	8827883a 	mov	r19,r17
    885c:	003fd706 	br	87bc <__alt_data_end+0xfffb308c>

00008860 <__s2b>:
    8860:	defff904 	addi	sp,sp,-28
    8864:	dc400115 	stw	r17,4(sp)
    8868:	dc000015 	stw	r16,0(sp)
    886c:	2023883a 	mov	r17,r4
    8870:	2821883a 	mov	r16,r5
    8874:	39000204 	addi	r4,r7,8
    8878:	01400244 	movi	r5,9
    887c:	dcc00315 	stw	r19,12(sp)
    8880:	dc800215 	stw	r18,8(sp)
    8884:	dfc00615 	stw	ra,24(sp)
    8888:	dd400515 	stw	r21,20(sp)
    888c:	dd000415 	stw	r20,16(sp)
    8890:	3825883a 	mov	r18,r7
    8894:	3027883a 	mov	r19,r6
    8898:	000ca000 	call	ca00 <__divsi3>
    889c:	00c00044 	movi	r3,1
    88a0:	000b883a 	mov	r5,zero
    88a4:	1880030e 	bge	r3,r2,88b4 <__s2b+0x54>
    88a8:	18c7883a 	add	r3,r3,r3
    88ac:	29400044 	addi	r5,r5,1
    88b0:	18bffd16 	blt	r3,r2,88a8 <__alt_data_end+0xfffb3178>
    88b4:	8809883a 	mov	r4,r17
    88b8:	00086540 	call	8654 <_Balloc>
    88bc:	d8c00717 	ldw	r3,28(sp)
    88c0:	10c00515 	stw	r3,20(r2)
    88c4:	00c00044 	movi	r3,1
    88c8:	10c00415 	stw	r3,16(r2)
    88cc:	00c00244 	movi	r3,9
    88d0:	1cc0210e 	bge	r3,r19,8958 <__s2b+0xf8>
    88d4:	80eb883a 	add	r21,r16,r3
    88d8:	a829883a 	mov	r20,r21
    88dc:	84e1883a 	add	r16,r16,r19
    88e0:	a1c00007 	ldb	r7,0(r20)
    88e4:	8809883a 	mov	r4,r17
    88e8:	a5000044 	addi	r20,r20,1
    88ec:	100b883a 	mov	r5,r2
    88f0:	01800284 	movi	r6,10
    88f4:	39fff404 	addi	r7,r7,-48
    88f8:	00087240 	call	8724 <__multadd>
    88fc:	a43ff81e 	bne	r20,r16,88e0 <__alt_data_end+0xfffb31b0>
    8900:	ace1883a 	add	r16,r21,r19
    8904:	843ffe04 	addi	r16,r16,-8
    8908:	9c800a0e 	bge	r19,r18,8934 <__s2b+0xd4>
    890c:	94e5c83a 	sub	r18,r18,r19
    8910:	84a5883a 	add	r18,r16,r18
    8914:	81c00007 	ldb	r7,0(r16)
    8918:	8809883a 	mov	r4,r17
    891c:	84000044 	addi	r16,r16,1
    8920:	100b883a 	mov	r5,r2
    8924:	01800284 	movi	r6,10
    8928:	39fff404 	addi	r7,r7,-48
    892c:	00087240 	call	8724 <__multadd>
    8930:	84bff81e 	bne	r16,r18,8914 <__alt_data_end+0xfffb31e4>
    8934:	dfc00617 	ldw	ra,24(sp)
    8938:	dd400517 	ldw	r21,20(sp)
    893c:	dd000417 	ldw	r20,16(sp)
    8940:	dcc00317 	ldw	r19,12(sp)
    8944:	dc800217 	ldw	r18,8(sp)
    8948:	dc400117 	ldw	r17,4(sp)
    894c:	dc000017 	ldw	r16,0(sp)
    8950:	dec00704 	addi	sp,sp,28
    8954:	f800283a 	ret
    8958:	84000284 	addi	r16,r16,10
    895c:	1827883a 	mov	r19,r3
    8960:	003fe906 	br	8908 <__alt_data_end+0xfffb31d8>

00008964 <__hi0bits>:
    8964:	20bfffec 	andhi	r2,r4,65535
    8968:	1000141e 	bne	r2,zero,89bc <__hi0bits+0x58>
    896c:	2008943a 	slli	r4,r4,16
    8970:	00800404 	movi	r2,16
    8974:	20ffc02c 	andhi	r3,r4,65280
    8978:	1800021e 	bne	r3,zero,8984 <__hi0bits+0x20>
    897c:	2008923a 	slli	r4,r4,8
    8980:	10800204 	addi	r2,r2,8
    8984:	20fc002c 	andhi	r3,r4,61440
    8988:	1800021e 	bne	r3,zero,8994 <__hi0bits+0x30>
    898c:	2008913a 	slli	r4,r4,4
    8990:	10800104 	addi	r2,r2,4
    8994:	20f0002c 	andhi	r3,r4,49152
    8998:	1800031e 	bne	r3,zero,89a8 <__hi0bits+0x44>
    899c:	2109883a 	add	r4,r4,r4
    89a0:	10800084 	addi	r2,r2,2
    89a4:	2109883a 	add	r4,r4,r4
    89a8:	20000316 	blt	r4,zero,89b8 <__hi0bits+0x54>
    89ac:	2110002c 	andhi	r4,r4,16384
    89b0:	2000041e 	bne	r4,zero,89c4 <__hi0bits+0x60>
    89b4:	00800804 	movi	r2,32
    89b8:	f800283a 	ret
    89bc:	0005883a 	mov	r2,zero
    89c0:	003fec06 	br	8974 <__alt_data_end+0xfffb3244>
    89c4:	10800044 	addi	r2,r2,1
    89c8:	f800283a 	ret

000089cc <__lo0bits>:
    89cc:	20c00017 	ldw	r3,0(r4)
    89d0:	188001cc 	andi	r2,r3,7
    89d4:	10000826 	beq	r2,zero,89f8 <__lo0bits+0x2c>
    89d8:	1880004c 	andi	r2,r3,1
    89dc:	1000211e 	bne	r2,zero,8a64 <__lo0bits+0x98>
    89e0:	1880008c 	andi	r2,r3,2
    89e4:	1000211e 	bne	r2,zero,8a6c <__lo0bits+0xa0>
    89e8:	1806d0ba 	srli	r3,r3,2
    89ec:	00800084 	movi	r2,2
    89f0:	20c00015 	stw	r3,0(r4)
    89f4:	f800283a 	ret
    89f8:	18bfffcc 	andi	r2,r3,65535
    89fc:	10001326 	beq	r2,zero,8a4c <__lo0bits+0x80>
    8a00:	0005883a 	mov	r2,zero
    8a04:	19403fcc 	andi	r5,r3,255
    8a08:	2800021e 	bne	r5,zero,8a14 <__lo0bits+0x48>
    8a0c:	1806d23a 	srli	r3,r3,8
    8a10:	10800204 	addi	r2,r2,8
    8a14:	194003cc 	andi	r5,r3,15
    8a18:	2800021e 	bne	r5,zero,8a24 <__lo0bits+0x58>
    8a1c:	1806d13a 	srli	r3,r3,4
    8a20:	10800104 	addi	r2,r2,4
    8a24:	194000cc 	andi	r5,r3,3
    8a28:	2800021e 	bne	r5,zero,8a34 <__lo0bits+0x68>
    8a2c:	1806d0ba 	srli	r3,r3,2
    8a30:	10800084 	addi	r2,r2,2
    8a34:	1940004c 	andi	r5,r3,1
    8a38:	2800081e 	bne	r5,zero,8a5c <__lo0bits+0x90>
    8a3c:	1806d07a 	srli	r3,r3,1
    8a40:	1800051e 	bne	r3,zero,8a58 <__lo0bits+0x8c>
    8a44:	00800804 	movi	r2,32
    8a48:	f800283a 	ret
    8a4c:	1806d43a 	srli	r3,r3,16
    8a50:	00800404 	movi	r2,16
    8a54:	003feb06 	br	8a04 <__alt_data_end+0xfffb32d4>
    8a58:	10800044 	addi	r2,r2,1
    8a5c:	20c00015 	stw	r3,0(r4)
    8a60:	f800283a 	ret
    8a64:	0005883a 	mov	r2,zero
    8a68:	f800283a 	ret
    8a6c:	1806d07a 	srli	r3,r3,1
    8a70:	00800044 	movi	r2,1
    8a74:	20c00015 	stw	r3,0(r4)
    8a78:	f800283a 	ret

00008a7c <__i2b>:
    8a7c:	defffd04 	addi	sp,sp,-12
    8a80:	dc000015 	stw	r16,0(sp)
    8a84:	04000044 	movi	r16,1
    8a88:	dc400115 	stw	r17,4(sp)
    8a8c:	2823883a 	mov	r17,r5
    8a90:	800b883a 	mov	r5,r16
    8a94:	dfc00215 	stw	ra,8(sp)
    8a98:	00086540 	call	8654 <_Balloc>
    8a9c:	14400515 	stw	r17,20(r2)
    8aa0:	14000415 	stw	r16,16(r2)
    8aa4:	dfc00217 	ldw	ra,8(sp)
    8aa8:	dc400117 	ldw	r17,4(sp)
    8aac:	dc000017 	ldw	r16,0(sp)
    8ab0:	dec00304 	addi	sp,sp,12
    8ab4:	f800283a 	ret

00008ab8 <__multiply>:
    8ab8:	deffef04 	addi	sp,sp,-68
    8abc:	dc400815 	stw	r17,32(sp)
    8ac0:	dc000715 	stw	r16,28(sp)
    8ac4:	2c400417 	ldw	r17,16(r5)
    8ac8:	34000417 	ldw	r16,16(r6)
    8acc:	dd800d15 	stw	r22,52(sp)
    8ad0:	dc800915 	stw	r18,36(sp)
    8ad4:	dfc01015 	stw	ra,64(sp)
    8ad8:	df000f15 	stw	fp,60(sp)
    8adc:	ddc00e15 	stw	r23,56(sp)
    8ae0:	dd400c15 	stw	r21,48(sp)
    8ae4:	dd000b15 	stw	r20,44(sp)
    8ae8:	dcc00a15 	stw	r19,40(sp)
    8aec:	2825883a 	mov	r18,r5
    8af0:	302d883a 	mov	r22,r6
    8af4:	8c009116 	blt	r17,r16,8d3c <__multiply+0x284>
    8af8:	8005883a 	mov	r2,r16
    8afc:	8821883a 	mov	r16,r17
    8b00:	1023883a 	mov	r17,r2
    8b04:	90800217 	ldw	r2,8(r18)
    8b08:	8447883a 	add	r3,r16,r17
    8b0c:	d8c00215 	stw	r3,8(sp)
    8b10:	91400117 	ldw	r5,4(r18)
    8b14:	10c0010e 	bge	r2,r3,8b1c <__multiply+0x64>
    8b18:	29400044 	addi	r5,r5,1
    8b1c:	00086540 	call	8654 <_Balloc>
    8b20:	d8c00217 	ldw	r3,8(sp)
    8b24:	d8800615 	stw	r2,24(sp)
    8b28:	18eb883a 	add	r21,r3,r3
    8b2c:	ad6b883a 	add	r21,r21,r21
    8b30:	10c00504 	addi	r3,r2,20
    8b34:	1d6b883a 	add	r21,r3,r21
    8b38:	d8c00115 	stw	r3,4(sp)
    8b3c:	dd400315 	stw	r21,12(sp)
    8b40:	1805883a 	mov	r2,r3
    8b44:	1d40042e 	bgeu	r3,r21,8b58 <__multiply+0xa0>
    8b48:	d8c00317 	ldw	r3,12(sp)
    8b4c:	10000015 	stw	zero,0(r2)
    8b50:	10800104 	addi	r2,r2,4
    8b54:	10fffc36 	bltu	r2,r3,8b48 <__alt_data_end+0xfffb3418>
    8b58:	8c63883a 	add	r17,r17,r17
    8b5c:	b5800504 	addi	r22,r22,20
    8b60:	8c63883a 	add	r17,r17,r17
    8b64:	94800504 	addi	r18,r18,20
    8b68:	8421883a 	add	r16,r16,r16
    8b6c:	b463883a 	add	r17,r22,r17
    8b70:	8421883a 	add	r16,r16,r16
    8b74:	dd800015 	stw	r22,0(sp)
    8b78:	dc800415 	stw	r18,16(sp)
    8b7c:	dc400515 	stw	r17,20(sp)
    8b80:	9429883a 	add	r20,r18,r16
    8b84:	b4404f2e 	bgeu	r22,r17,8cc4 <__multiply+0x20c>
    8b88:	d8c00017 	ldw	r3,0(sp)
    8b8c:	1c800017 	ldw	r18,0(r3)
    8b90:	943fffcc 	andi	r16,r18,65535
    8b94:	80001e26 	beq	r16,zero,8c10 <__multiply+0x158>
    8b98:	dd800117 	ldw	r22,4(sp)
    8b9c:	dd400417 	ldw	r21,16(sp)
    8ba0:	0025883a 	mov	r18,zero
    8ba4:	adc00017 	ldw	r23,0(r21)
    8ba8:	b4c00017 	ldw	r19,0(r22)
    8bac:	800b883a 	mov	r5,r16
    8bb0:	b93fffcc 	andi	r4,r23,65535
    8bb4:	000cac00 	call	cac0 <__mulsi3>
    8bb8:	9c7fffcc 	andi	r17,r19,65535
    8bbc:	8885883a 	add	r2,r17,r2
    8bc0:	b808d43a 	srli	r4,r23,16
    8bc4:	14a3883a 	add	r17,r2,r18
    8bc8:	9826d43a 	srli	r19,r19,16
    8bcc:	8824d43a 	srli	r18,r17,16
    8bd0:	800b883a 	mov	r5,r16
    8bd4:	000cac00 	call	cac0 <__mulsi3>
    8bd8:	9885883a 	add	r2,r19,r2
    8bdc:	14a7883a 	add	r19,r2,r18
    8be0:	88ffffcc 	andi	r3,r17,65535
    8be4:	9822943a 	slli	r17,r19,16
    8be8:	ad400104 	addi	r21,r21,4
    8bec:	b005883a 	mov	r2,r22
    8bf0:	88c6b03a 	or	r3,r17,r3
    8bf4:	b0c00015 	stw	r3,0(r22)
    8bf8:	9824d43a 	srli	r18,r19,16
    8bfc:	b5800104 	addi	r22,r22,4
    8c00:	ad3fe836 	bltu	r21,r20,8ba4 <__alt_data_end+0xfffb3474>
    8c04:	d8c00017 	ldw	r3,0(sp)
    8c08:	14800115 	stw	r18,4(r2)
    8c0c:	1c800017 	ldw	r18,0(r3)
    8c10:	9024d43a 	srli	r18,r18,16
    8c14:	90002226 	beq	r18,zero,8ca0 <__multiply+0x1e8>
    8c18:	d8c00117 	ldw	r3,4(sp)
    8c1c:	dd800417 	ldw	r22,16(sp)
    8c20:	002f883a 	mov	r23,zero
    8c24:	1f000017 	ldw	fp,0(r3)
    8c28:	1823883a 	mov	r17,r3
    8c2c:	182b883a 	mov	r21,r3
    8c30:	e021883a 	mov	r16,fp
    8c34:	00000106 	br	8c3c <__multiply+0x184>
    8c38:	982b883a 	mov	r21,r19
    8c3c:	b100000b 	ldhu	r4,0(r22)
    8c40:	8020d43a 	srli	r16,r16,16
    8c44:	900b883a 	mov	r5,r18
    8c48:	000cac00 	call	cac0 <__mulsi3>
    8c4c:	1405883a 	add	r2,r2,r16
    8c50:	15ef883a 	add	r23,r2,r23
    8c54:	b804943a 	slli	r2,r23,16
    8c58:	e0ffffcc 	andi	r3,fp,65535
    8c5c:	8c400104 	addi	r17,r17,4
    8c60:	10c6b03a 	or	r3,r2,r3
    8c64:	88ffff15 	stw	r3,-4(r17)
    8c68:	b5800104 	addi	r22,r22,4
    8c6c:	b13fff17 	ldw	r4,-4(r22)
    8c70:	acc00104 	addi	r19,r21,4
    8c74:	900b883a 	mov	r5,r18
    8c78:	2008d43a 	srli	r4,r4,16
    8c7c:	9c000017 	ldw	r16,0(r19)
    8c80:	000cac00 	call	cac0 <__mulsi3>
    8c84:	b806d43a 	srli	r3,r23,16
    8c88:	813fffcc 	andi	r4,r16,65535
    8c8c:	1105883a 	add	r2,r2,r4
    8c90:	10f9883a 	add	fp,r2,r3
    8c94:	e02ed43a 	srli	r23,fp,16
    8c98:	b53fe736 	bltu	r22,r20,8c38 <__alt_data_end+0xfffb3508>
    8c9c:	af000115 	stw	fp,4(r21)
    8ca0:	d8c00017 	ldw	r3,0(sp)
    8ca4:	d9000517 	ldw	r4,20(sp)
    8ca8:	18c00104 	addi	r3,r3,4
    8cac:	d8c00015 	stw	r3,0(sp)
    8cb0:	d8c00117 	ldw	r3,4(sp)
    8cb4:	18c00104 	addi	r3,r3,4
    8cb8:	d8c00115 	stw	r3,4(sp)
    8cbc:	d8c00017 	ldw	r3,0(sp)
    8cc0:	193fb136 	bltu	r3,r4,8b88 <__alt_data_end+0xfffb3458>
    8cc4:	d8c00217 	ldw	r3,8(sp)
    8cc8:	00c00c0e 	bge	zero,r3,8cfc <__multiply+0x244>
    8ccc:	d8c00317 	ldw	r3,12(sp)
    8cd0:	18bfff17 	ldw	r2,-4(r3)
    8cd4:	1d7fff04 	addi	r21,r3,-4
    8cd8:	10000326 	beq	r2,zero,8ce8 <__multiply+0x230>
    8cdc:	00000706 	br	8cfc <__multiply+0x244>
    8ce0:	a8800017 	ldw	r2,0(r21)
    8ce4:	1000051e 	bne	r2,zero,8cfc <__multiply+0x244>
    8ce8:	d8c00217 	ldw	r3,8(sp)
    8cec:	ad7fff04 	addi	r21,r21,-4
    8cf0:	18ffffc4 	addi	r3,r3,-1
    8cf4:	d8c00215 	stw	r3,8(sp)
    8cf8:	183ff91e 	bne	r3,zero,8ce0 <__alt_data_end+0xfffb35b0>
    8cfc:	d8c00617 	ldw	r3,24(sp)
    8d00:	d9000217 	ldw	r4,8(sp)
    8d04:	1805883a 	mov	r2,r3
    8d08:	19000415 	stw	r4,16(r3)
    8d0c:	dfc01017 	ldw	ra,64(sp)
    8d10:	df000f17 	ldw	fp,60(sp)
    8d14:	ddc00e17 	ldw	r23,56(sp)
    8d18:	dd800d17 	ldw	r22,52(sp)
    8d1c:	dd400c17 	ldw	r21,48(sp)
    8d20:	dd000b17 	ldw	r20,44(sp)
    8d24:	dcc00a17 	ldw	r19,40(sp)
    8d28:	dc800917 	ldw	r18,36(sp)
    8d2c:	dc400817 	ldw	r17,32(sp)
    8d30:	dc000717 	ldw	r16,28(sp)
    8d34:	dec01104 	addi	sp,sp,68
    8d38:	f800283a 	ret
    8d3c:	3025883a 	mov	r18,r6
    8d40:	282d883a 	mov	r22,r5
    8d44:	003f6f06 	br	8b04 <__alt_data_end+0xfffb33d4>

00008d48 <__pow5mult>:
    8d48:	defffa04 	addi	sp,sp,-24
    8d4c:	dcc00315 	stw	r19,12(sp)
    8d50:	dc800215 	stw	r18,8(sp)
    8d54:	dc000015 	stw	r16,0(sp)
    8d58:	dfc00515 	stw	ra,20(sp)
    8d5c:	dd000415 	stw	r20,16(sp)
    8d60:	dc400115 	stw	r17,4(sp)
    8d64:	308000cc 	andi	r2,r6,3
    8d68:	3021883a 	mov	r16,r6
    8d6c:	2027883a 	mov	r19,r4
    8d70:	2825883a 	mov	r18,r5
    8d74:	10002e1e 	bne	r2,zero,8e30 <__pow5mult+0xe8>
    8d78:	8021d0ba 	srai	r16,r16,2
    8d7c:	80001a26 	beq	r16,zero,8de8 <__pow5mult+0xa0>
    8d80:	9c401217 	ldw	r17,72(r19)
    8d84:	8800061e 	bne	r17,zero,8da0 <__pow5mult+0x58>
    8d88:	00003406 	br	8e5c <__pow5mult+0x114>
    8d8c:	8021d07a 	srai	r16,r16,1
    8d90:	80001526 	beq	r16,zero,8de8 <__pow5mult+0xa0>
    8d94:	88800017 	ldw	r2,0(r17)
    8d98:	10001c26 	beq	r2,zero,8e0c <__pow5mult+0xc4>
    8d9c:	1023883a 	mov	r17,r2
    8da0:	80c0004c 	andi	r3,r16,1
    8da4:	183ff926 	beq	r3,zero,8d8c <__alt_data_end+0xfffb365c>
    8da8:	900b883a 	mov	r5,r18
    8dac:	880d883a 	mov	r6,r17
    8db0:	9809883a 	mov	r4,r19
    8db4:	0008ab80 	call	8ab8 <__multiply>
    8db8:	90001b26 	beq	r18,zero,8e28 <__pow5mult+0xe0>
    8dbc:	91c00117 	ldw	r7,4(r18)
    8dc0:	98c01317 	ldw	r3,76(r19)
    8dc4:	8021d07a 	srai	r16,r16,1
    8dc8:	39cf883a 	add	r7,r7,r7
    8dcc:	39cf883a 	add	r7,r7,r7
    8dd0:	19c7883a 	add	r3,r3,r7
    8dd4:	19000017 	ldw	r4,0(r3)
    8dd8:	91000015 	stw	r4,0(r18)
    8ddc:	1c800015 	stw	r18,0(r3)
    8de0:	1025883a 	mov	r18,r2
    8de4:	803feb1e 	bne	r16,zero,8d94 <__alt_data_end+0xfffb3664>
    8de8:	9005883a 	mov	r2,r18
    8dec:	dfc00517 	ldw	ra,20(sp)
    8df0:	dd000417 	ldw	r20,16(sp)
    8df4:	dcc00317 	ldw	r19,12(sp)
    8df8:	dc800217 	ldw	r18,8(sp)
    8dfc:	dc400117 	ldw	r17,4(sp)
    8e00:	dc000017 	ldw	r16,0(sp)
    8e04:	dec00604 	addi	sp,sp,24
    8e08:	f800283a 	ret
    8e0c:	9809883a 	mov	r4,r19
    8e10:	880b883a 	mov	r5,r17
    8e14:	880d883a 	mov	r6,r17
    8e18:	0008ab80 	call	8ab8 <__multiply>
    8e1c:	88800015 	stw	r2,0(r17)
    8e20:	10000015 	stw	zero,0(r2)
    8e24:	003fdd06 	br	8d9c <__alt_data_end+0xfffb366c>
    8e28:	1025883a 	mov	r18,r2
    8e2c:	003fd706 	br	8d8c <__alt_data_end+0xfffb365c>
    8e30:	10bfffc4 	addi	r2,r2,-1
    8e34:	1085883a 	add	r2,r2,r2
    8e38:	00c00074 	movhi	r3,1
    8e3c:	18c8de04 	addi	r3,r3,9080
    8e40:	1085883a 	add	r2,r2,r2
    8e44:	1885883a 	add	r2,r3,r2
    8e48:	11800017 	ldw	r6,0(r2)
    8e4c:	000f883a 	mov	r7,zero
    8e50:	00087240 	call	8724 <__multadd>
    8e54:	1025883a 	mov	r18,r2
    8e58:	003fc706 	br	8d78 <__alt_data_end+0xfffb3648>
    8e5c:	05000044 	movi	r20,1
    8e60:	9809883a 	mov	r4,r19
    8e64:	a00b883a 	mov	r5,r20
    8e68:	00086540 	call	8654 <_Balloc>
    8e6c:	1023883a 	mov	r17,r2
    8e70:	00809c44 	movi	r2,625
    8e74:	88800515 	stw	r2,20(r17)
    8e78:	8d000415 	stw	r20,16(r17)
    8e7c:	9c401215 	stw	r17,72(r19)
    8e80:	88000015 	stw	zero,0(r17)
    8e84:	003fc606 	br	8da0 <__alt_data_end+0xfffb3670>

00008e88 <__lshift>:
    8e88:	defff904 	addi	sp,sp,-28
    8e8c:	dd000415 	stw	r20,16(sp)
    8e90:	dcc00315 	stw	r19,12(sp)
    8e94:	3029d17a 	srai	r20,r6,5
    8e98:	2cc00417 	ldw	r19,16(r5)
    8e9c:	28800217 	ldw	r2,8(r5)
    8ea0:	dd400515 	stw	r21,20(sp)
    8ea4:	a4e7883a 	add	r19,r20,r19
    8ea8:	dc800215 	stw	r18,8(sp)
    8eac:	dc400115 	stw	r17,4(sp)
    8eb0:	dc000015 	stw	r16,0(sp)
    8eb4:	dfc00615 	stw	ra,24(sp)
    8eb8:	9c000044 	addi	r16,r19,1
    8ebc:	2823883a 	mov	r17,r5
    8ec0:	302b883a 	mov	r21,r6
    8ec4:	2025883a 	mov	r18,r4
    8ec8:	29400117 	ldw	r5,4(r5)
    8ecc:	1400030e 	bge	r2,r16,8edc <__lshift+0x54>
    8ed0:	1085883a 	add	r2,r2,r2
    8ed4:	29400044 	addi	r5,r5,1
    8ed8:	143ffd16 	blt	r2,r16,8ed0 <__alt_data_end+0xfffb37a0>
    8edc:	9009883a 	mov	r4,r18
    8ee0:	00086540 	call	8654 <_Balloc>
    8ee4:	11c00504 	addi	r7,r2,20
    8ee8:	0500090e 	bge	zero,r20,8f10 <__lshift+0x88>
    8eec:	3811883a 	mov	r8,r7
    8ef0:	0007883a 	mov	r3,zero
    8ef4:	40000015 	stw	zero,0(r8)
    8ef8:	18c00044 	addi	r3,r3,1
    8efc:	42000104 	addi	r8,r8,4
    8f00:	1d3ffc1e 	bne	r3,r20,8ef4 <__alt_data_end+0xfffb37c4>
    8f04:	18c7883a 	add	r3,r3,r3
    8f08:	18c7883a 	add	r3,r3,r3
    8f0c:	38cf883a 	add	r7,r7,r3
    8f10:	89000417 	ldw	r4,16(r17)
    8f14:	88c00504 	addi	r3,r17,20
    8f18:	a98007cc 	andi	r6,r21,31
    8f1c:	2109883a 	add	r4,r4,r4
    8f20:	2109883a 	add	r4,r4,r4
    8f24:	1909883a 	add	r4,r3,r4
    8f28:	30002326 	beq	r6,zero,8fb8 <__lshift+0x130>
    8f2c:	01400804 	movi	r5,32
    8f30:	298bc83a 	sub	r5,r5,r6
    8f34:	0013883a 	mov	r9,zero
    8f38:	1a000017 	ldw	r8,0(r3)
    8f3c:	3815883a 	mov	r10,r7
    8f40:	39c00104 	addi	r7,r7,4
    8f44:	4190983a 	sll	r8,r8,r6
    8f48:	18c00104 	addi	r3,r3,4
    8f4c:	4a10b03a 	or	r8,r9,r8
    8f50:	3a3fff15 	stw	r8,-4(r7)
    8f54:	1a3fff17 	ldw	r8,-4(r3)
    8f58:	4152d83a 	srl	r9,r8,r5
    8f5c:	193ff636 	bltu	r3,r4,8f38 <__alt_data_end+0xfffb3808>
    8f60:	52400115 	stw	r9,4(r10)
    8f64:	48000126 	beq	r9,zero,8f6c <__lshift+0xe4>
    8f68:	9c000084 	addi	r16,r19,2
    8f6c:	89000117 	ldw	r4,4(r17)
    8f70:	90c01317 	ldw	r3,76(r18)
    8f74:	843fffc4 	addi	r16,r16,-1
    8f78:	2109883a 	add	r4,r4,r4
    8f7c:	2109883a 	add	r4,r4,r4
    8f80:	1907883a 	add	r3,r3,r4
    8f84:	19000017 	ldw	r4,0(r3)
    8f88:	14000415 	stw	r16,16(r2)
    8f8c:	89000015 	stw	r4,0(r17)
    8f90:	1c400015 	stw	r17,0(r3)
    8f94:	dfc00617 	ldw	ra,24(sp)
    8f98:	dd400517 	ldw	r21,20(sp)
    8f9c:	dd000417 	ldw	r20,16(sp)
    8fa0:	dcc00317 	ldw	r19,12(sp)
    8fa4:	dc800217 	ldw	r18,8(sp)
    8fa8:	dc400117 	ldw	r17,4(sp)
    8fac:	dc000017 	ldw	r16,0(sp)
    8fb0:	dec00704 	addi	sp,sp,28
    8fb4:	f800283a 	ret
    8fb8:	19400017 	ldw	r5,0(r3)
    8fbc:	39c00104 	addi	r7,r7,4
    8fc0:	18c00104 	addi	r3,r3,4
    8fc4:	397fff15 	stw	r5,-4(r7)
    8fc8:	193ffb36 	bltu	r3,r4,8fb8 <__alt_data_end+0xfffb3888>
    8fcc:	003fe706 	br	8f6c <__alt_data_end+0xfffb383c>

00008fd0 <__mcmp>:
    8fd0:	20800417 	ldw	r2,16(r4)
    8fd4:	28c00417 	ldw	r3,16(r5)
    8fd8:	10c5c83a 	sub	r2,r2,r3
    8fdc:	1000111e 	bne	r2,zero,9024 <__mcmp+0x54>
    8fe0:	18c7883a 	add	r3,r3,r3
    8fe4:	18c7883a 	add	r3,r3,r3
    8fe8:	21000504 	addi	r4,r4,20
    8fec:	29400504 	addi	r5,r5,20
    8ff0:	20c5883a 	add	r2,r4,r3
    8ff4:	28cb883a 	add	r5,r5,r3
    8ff8:	00000106 	br	9000 <__mcmp+0x30>
    8ffc:	20800a2e 	bgeu	r4,r2,9028 <__mcmp+0x58>
    9000:	10bfff04 	addi	r2,r2,-4
    9004:	297fff04 	addi	r5,r5,-4
    9008:	11800017 	ldw	r6,0(r2)
    900c:	28c00017 	ldw	r3,0(r5)
    9010:	30fffa26 	beq	r6,r3,8ffc <__alt_data_end+0xfffb38cc>
    9014:	30c00236 	bltu	r6,r3,9020 <__mcmp+0x50>
    9018:	00800044 	movi	r2,1
    901c:	f800283a 	ret
    9020:	00bfffc4 	movi	r2,-1
    9024:	f800283a 	ret
    9028:	0005883a 	mov	r2,zero
    902c:	f800283a 	ret

00009030 <__mdiff>:
    9030:	defffb04 	addi	sp,sp,-20
    9034:	dc000015 	stw	r16,0(sp)
    9038:	2821883a 	mov	r16,r5
    903c:	dcc00315 	stw	r19,12(sp)
    9040:	300b883a 	mov	r5,r6
    9044:	2027883a 	mov	r19,r4
    9048:	8009883a 	mov	r4,r16
    904c:	dc800215 	stw	r18,8(sp)
    9050:	dfc00415 	stw	ra,16(sp)
    9054:	dc400115 	stw	r17,4(sp)
    9058:	3025883a 	mov	r18,r6
    905c:	0008fd00 	call	8fd0 <__mcmp>
    9060:	10005226 	beq	r2,zero,91ac <__mdiff+0x17c>
    9064:	10004c16 	blt	r2,zero,9198 <__mdiff+0x168>
    9068:	0023883a 	mov	r17,zero
    906c:	81400117 	ldw	r5,4(r16)
    9070:	9809883a 	mov	r4,r19
    9074:	00086540 	call	8654 <_Balloc>
    9078:	83400417 	ldw	r13,16(r16)
    907c:	93800417 	ldw	r14,16(r18)
    9080:	81000504 	addi	r4,r16,20
    9084:	6b59883a 	add	r12,r13,r13
    9088:	739d883a 	add	r14,r14,r14
    908c:	6319883a 	add	r12,r12,r12
    9090:	91800504 	addi	r6,r18,20
    9094:	739d883a 	add	r14,r14,r14
    9098:	14400315 	stw	r17,12(r2)
    909c:	2319883a 	add	r12,r4,r12
    90a0:	339d883a 	add	r14,r6,r14
    90a4:	12400504 	addi	r9,r2,20
    90a8:	0007883a 	mov	r3,zero
    90ac:	22000017 	ldw	r8,0(r4)
    90b0:	32800017 	ldw	r10,0(r6)
    90b4:	4ac00104 	addi	r11,r9,4
    90b8:	41ffffcc 	andi	r7,r8,65535
    90bc:	38c7883a 	add	r3,r7,r3
    90c0:	51ffffcc 	andi	r7,r10,65535
    90c4:	19cfc83a 	sub	r7,r3,r7
    90c8:	4010d43a 	srli	r8,r8,16
    90cc:	5014d43a 	srli	r10,r10,16
    90d0:	3807d43a 	srai	r3,r7,16
    90d4:	39ffffcc 	andi	r7,r7,65535
    90d8:	4291c83a 	sub	r8,r8,r10
    90dc:	40c7883a 	add	r3,r8,r3
    90e0:	1810943a 	slli	r8,r3,16
    90e4:	31800104 	addi	r6,r6,4
    90e8:	21000104 	addi	r4,r4,4
    90ec:	41ceb03a 	or	r7,r8,r7
    90f0:	49c00015 	stw	r7,0(r9)
    90f4:	1807d43a 	srai	r3,r3,16
    90f8:	580b883a 	mov	r5,r11
    90fc:	5813883a 	mov	r9,r11
    9100:	33bfea36 	bltu	r6,r14,90ac <__alt_data_end+0xfffb397c>
    9104:	2011883a 	mov	r8,r4
    9108:	2300152e 	bgeu	r4,r12,9160 <__mdiff+0x130>
    910c:	21400017 	ldw	r5,0(r4)
    9110:	4a400104 	addi	r9,r9,4
    9114:	21000104 	addi	r4,r4,4
    9118:	29ffffcc 	andi	r7,r5,65535
    911c:	38c7883a 	add	r3,r7,r3
    9120:	280ad43a 	srli	r5,r5,16
    9124:	180dd43a 	srai	r6,r3,16
    9128:	19ffffcc 	andi	r7,r3,65535
    912c:	3147883a 	add	r3,r6,r5
    9130:	180a943a 	slli	r5,r3,16
    9134:	1807d43a 	srai	r3,r3,16
    9138:	29ceb03a 	or	r7,r5,r7
    913c:	49ffff15 	stw	r7,-4(r9)
    9140:	233ff236 	bltu	r4,r12,910c <__alt_data_end+0xfffb39dc>
    9144:	0206303a 	nor	r3,zero,r8
    9148:	1b07883a 	add	r3,r3,r12
    914c:	1806d0ba 	srli	r3,r3,2
    9150:	18c00044 	addi	r3,r3,1
    9154:	18c7883a 	add	r3,r3,r3
    9158:	18c7883a 	add	r3,r3,r3
    915c:	58cb883a 	add	r5,r11,r3
    9160:	28ffff04 	addi	r3,r5,-4
    9164:	3800041e 	bne	r7,zero,9178 <__mdiff+0x148>
    9168:	18ffff04 	addi	r3,r3,-4
    916c:	19000017 	ldw	r4,0(r3)
    9170:	6b7fffc4 	addi	r13,r13,-1
    9174:	203ffc26 	beq	r4,zero,9168 <__alt_data_end+0xfffb3a38>
    9178:	13400415 	stw	r13,16(r2)
    917c:	dfc00417 	ldw	ra,16(sp)
    9180:	dcc00317 	ldw	r19,12(sp)
    9184:	dc800217 	ldw	r18,8(sp)
    9188:	dc400117 	ldw	r17,4(sp)
    918c:	dc000017 	ldw	r16,0(sp)
    9190:	dec00504 	addi	sp,sp,20
    9194:	f800283a 	ret
    9198:	8005883a 	mov	r2,r16
    919c:	04400044 	movi	r17,1
    91a0:	9021883a 	mov	r16,r18
    91a4:	1025883a 	mov	r18,r2
    91a8:	003fb006 	br	906c <__alt_data_end+0xfffb393c>
    91ac:	9809883a 	mov	r4,r19
    91b0:	000b883a 	mov	r5,zero
    91b4:	00086540 	call	8654 <_Balloc>
    91b8:	00c00044 	movi	r3,1
    91bc:	10c00415 	stw	r3,16(r2)
    91c0:	10000515 	stw	zero,20(r2)
    91c4:	003fed06 	br	917c <__alt_data_end+0xfffb3a4c>

000091c8 <__ulp>:
    91c8:	295ffc2c 	andhi	r5,r5,32752
    91cc:	00bf3034 	movhi	r2,64704
    91d0:	2887883a 	add	r3,r5,r2
    91d4:	00c0020e 	bge	zero,r3,91e0 <__ulp+0x18>
    91d8:	0005883a 	mov	r2,zero
    91dc:	f800283a 	ret
    91e0:	00c7c83a 	sub	r3,zero,r3
    91e4:	180bd53a 	srai	r5,r3,20
    91e8:	008004c4 	movi	r2,19
    91ec:	11400a0e 	bge	r2,r5,9218 <__ulp+0x50>
    91f0:	00800c84 	movi	r2,50
    91f4:	0007883a 	mov	r3,zero
    91f8:	11400516 	blt	r2,r5,9210 <__ulp+0x48>
    91fc:	00800cc4 	movi	r2,51
    9200:	114bc83a 	sub	r5,r2,r5
    9204:	00800044 	movi	r2,1
    9208:	1144983a 	sll	r2,r2,r5
    920c:	f800283a 	ret
    9210:	00800044 	movi	r2,1
    9214:	f800283a 	ret
    9218:	00800234 	movhi	r2,8
    921c:	1147d83a 	sra	r3,r2,r5
    9220:	0005883a 	mov	r2,zero
    9224:	f800283a 	ret

00009228 <__b2d>:
    9228:	defffa04 	addi	sp,sp,-24
    922c:	dc000015 	stw	r16,0(sp)
    9230:	24000417 	ldw	r16,16(r4)
    9234:	dc400115 	stw	r17,4(sp)
    9238:	24400504 	addi	r17,r4,20
    923c:	8421883a 	add	r16,r16,r16
    9240:	8421883a 	add	r16,r16,r16
    9244:	8c21883a 	add	r16,r17,r16
    9248:	dc800215 	stw	r18,8(sp)
    924c:	84bfff17 	ldw	r18,-4(r16)
    9250:	dd000415 	stw	r20,16(sp)
    9254:	dcc00315 	stw	r19,12(sp)
    9258:	9009883a 	mov	r4,r18
    925c:	2829883a 	mov	r20,r5
    9260:	dfc00515 	stw	ra,20(sp)
    9264:	00089640 	call	8964 <__hi0bits>
    9268:	00c00804 	movi	r3,32
    926c:	1887c83a 	sub	r3,r3,r2
    9270:	a0c00015 	stw	r3,0(r20)
    9274:	00c00284 	movi	r3,10
    9278:	84ffff04 	addi	r19,r16,-4
    927c:	18801216 	blt	r3,r2,92c8 <__b2d+0xa0>
    9280:	014002c4 	movi	r5,11
    9284:	2889c83a 	sub	r4,r5,r2
    9288:	9106d83a 	srl	r3,r18,r4
    928c:	18cffc34 	orhi	r3,r3,16368
    9290:	8cc0282e 	bgeu	r17,r19,9334 <__b2d+0x10c>
    9294:	817ffe17 	ldw	r5,-8(r16)
    9298:	290ad83a 	srl	r5,r5,r4
    929c:	10800544 	addi	r2,r2,21
    92a0:	9084983a 	sll	r2,r18,r2
    92a4:	2884b03a 	or	r2,r5,r2
    92a8:	dfc00517 	ldw	ra,20(sp)
    92ac:	dd000417 	ldw	r20,16(sp)
    92b0:	dcc00317 	ldw	r19,12(sp)
    92b4:	dc800217 	ldw	r18,8(sp)
    92b8:	dc400117 	ldw	r17,4(sp)
    92bc:	dc000017 	ldw	r16,0(sp)
    92c0:	dec00604 	addi	sp,sp,24
    92c4:	f800283a 	ret
    92c8:	113ffd44 	addi	r4,r2,-11
    92cc:	8cc00f2e 	bgeu	r17,r19,930c <__b2d+0xe4>
    92d0:	81bffe04 	addi	r6,r16,-8
    92d4:	817ffe17 	ldw	r5,-8(r16)
    92d8:	20001326 	beq	r4,zero,9328 <__b2d+0x100>
    92dc:	00c00ac4 	movi	r3,43
    92e0:	1885c83a 	sub	r2,r3,r2
    92e4:	2886d83a 	srl	r3,r5,r2
    92e8:	9124983a 	sll	r18,r18,r4
    92ec:	90e4b03a 	or	r18,r18,r3
    92f0:	90cffc34 	orhi	r3,r18,16368
    92f4:	8980112e 	bgeu	r17,r6,933c <__b2d+0x114>
    92f8:	81bffd17 	ldw	r6,-12(r16)
    92fc:	308cd83a 	srl	r6,r6,r2
    9300:	2904983a 	sll	r2,r5,r4
    9304:	1184b03a 	or	r2,r2,r6
    9308:	003fe706 	br	92a8 <__alt_data_end+0xfffb3b78>
    930c:	20000526 	beq	r4,zero,9324 <__b2d+0xfc>
    9310:	9124983a 	sll	r18,r18,r4
    9314:	000d883a 	mov	r6,zero
    9318:	000b883a 	mov	r5,zero
    931c:	90cffc34 	orhi	r3,r18,16368
    9320:	003ff706 	br	9300 <__alt_data_end+0xfffb3bd0>
    9324:	000b883a 	mov	r5,zero
    9328:	90cffc34 	orhi	r3,r18,16368
    932c:	2805883a 	mov	r2,r5
    9330:	003fdd06 	br	92a8 <__alt_data_end+0xfffb3b78>
    9334:	000b883a 	mov	r5,zero
    9338:	003fd806 	br	929c <__alt_data_end+0xfffb3b6c>
    933c:	000d883a 	mov	r6,zero
    9340:	003fef06 	br	9300 <__alt_data_end+0xfffb3bd0>

00009344 <__d2b>:
    9344:	defff704 	addi	sp,sp,-36
    9348:	dc000215 	stw	r16,8(sp)
    934c:	3021883a 	mov	r16,r6
    9350:	dc400315 	stw	r17,12(sp)
    9354:	8022907a 	slli	r17,r16,1
    9358:	dd400715 	stw	r21,28(sp)
    935c:	282b883a 	mov	r21,r5
    9360:	01400044 	movi	r5,1
    9364:	dd000615 	stw	r20,24(sp)
    9368:	dcc00515 	stw	r19,20(sp)
    936c:	dc800415 	stw	r18,16(sp)
    9370:	dfc00815 	stw	ra,32(sp)
    9374:	3829883a 	mov	r20,r7
    9378:	dc800917 	ldw	r18,36(sp)
    937c:	8822d57a 	srli	r17,r17,21
    9380:	00086540 	call	8654 <_Balloc>
    9384:	1027883a 	mov	r19,r2
    9388:	00800434 	movhi	r2,16
    938c:	10bfffc4 	addi	r2,r2,-1
    9390:	808c703a 	and	r6,r16,r2
    9394:	88000126 	beq	r17,zero,939c <__d2b+0x58>
    9398:	31800434 	orhi	r6,r6,16
    939c:	d9800015 	stw	r6,0(sp)
    93a0:	a8001f26 	beq	r21,zero,9420 <__d2b+0xdc>
    93a4:	d9000104 	addi	r4,sp,4
    93a8:	dd400115 	stw	r21,4(sp)
    93ac:	00089cc0 	call	89cc <__lo0bits>
    93b0:	d8c00017 	ldw	r3,0(sp)
    93b4:	1000291e 	bne	r2,zero,945c <__d2b+0x118>
    93b8:	d9000117 	ldw	r4,4(sp)
    93bc:	99000515 	stw	r4,20(r19)
    93c0:	1820c03a 	cmpne	r16,r3,zero
    93c4:	84000044 	addi	r16,r16,1
    93c8:	98c00615 	stw	r3,24(r19)
    93cc:	9c000415 	stw	r16,16(r19)
    93d0:	88001b1e 	bne	r17,zero,9440 <__d2b+0xfc>
    93d4:	800690ba 	slli	r3,r16,2
    93d8:	10bef384 	addi	r2,r2,-1074
    93dc:	a0800015 	stw	r2,0(r20)
    93e0:	98c5883a 	add	r2,r19,r3
    93e4:	11000417 	ldw	r4,16(r2)
    93e8:	8020917a 	slli	r16,r16,5
    93ec:	00089640 	call	8964 <__hi0bits>
    93f0:	8085c83a 	sub	r2,r16,r2
    93f4:	90800015 	stw	r2,0(r18)
    93f8:	9805883a 	mov	r2,r19
    93fc:	dfc00817 	ldw	ra,32(sp)
    9400:	dd400717 	ldw	r21,28(sp)
    9404:	dd000617 	ldw	r20,24(sp)
    9408:	dcc00517 	ldw	r19,20(sp)
    940c:	dc800417 	ldw	r18,16(sp)
    9410:	dc400317 	ldw	r17,12(sp)
    9414:	dc000217 	ldw	r16,8(sp)
    9418:	dec00904 	addi	sp,sp,36
    941c:	f800283a 	ret
    9420:	d809883a 	mov	r4,sp
    9424:	00089cc0 	call	89cc <__lo0bits>
    9428:	d8c00017 	ldw	r3,0(sp)
    942c:	04000044 	movi	r16,1
    9430:	9c000415 	stw	r16,16(r19)
    9434:	98c00515 	stw	r3,20(r19)
    9438:	10800804 	addi	r2,r2,32
    943c:	883fe526 	beq	r17,zero,93d4 <__alt_data_end+0xfffb3ca4>
    9440:	8c7ef344 	addi	r17,r17,-1075
    9444:	88a3883a 	add	r17,r17,r2
    9448:	00c00d44 	movi	r3,53
    944c:	a4400015 	stw	r17,0(r20)
    9450:	1885c83a 	sub	r2,r3,r2
    9454:	90800015 	stw	r2,0(r18)
    9458:	003fe706 	br	93f8 <__alt_data_end+0xfffb3cc8>
    945c:	01000804 	movi	r4,32
    9460:	2089c83a 	sub	r4,r4,r2
    9464:	1908983a 	sll	r4,r3,r4
    9468:	d9400117 	ldw	r5,4(sp)
    946c:	1886d83a 	srl	r3,r3,r2
    9470:	2148b03a 	or	r4,r4,r5
    9474:	99000515 	stw	r4,20(r19)
    9478:	d8c00015 	stw	r3,0(sp)
    947c:	003fd006 	br	93c0 <__alt_data_end+0xfffb3c90>

00009480 <__ratio>:
    9480:	defff904 	addi	sp,sp,-28
    9484:	dc400315 	stw	r17,12(sp)
    9488:	2823883a 	mov	r17,r5
    948c:	d9400104 	addi	r5,sp,4
    9490:	dfc00615 	stw	ra,24(sp)
    9494:	dcc00515 	stw	r19,20(sp)
    9498:	dc800415 	stw	r18,16(sp)
    949c:	2027883a 	mov	r19,r4
    94a0:	dc000215 	stw	r16,8(sp)
    94a4:	00092280 	call	9228 <__b2d>
    94a8:	8809883a 	mov	r4,r17
    94ac:	d80b883a 	mov	r5,sp
    94b0:	1025883a 	mov	r18,r2
    94b4:	1821883a 	mov	r16,r3
    94b8:	00092280 	call	9228 <__b2d>
    94bc:	8a400417 	ldw	r9,16(r17)
    94c0:	9a000417 	ldw	r8,16(r19)
    94c4:	100d883a 	mov	r6,r2
    94c8:	d8800017 	ldw	r2,0(sp)
    94cc:	4251c83a 	sub	r8,r8,r9
    94d0:	4012917a 	slli	r9,r8,5
    94d4:	da000117 	ldw	r8,4(sp)
    94d8:	4091c83a 	sub	r8,r8,r2
    94dc:	4251883a 	add	r8,r8,r9
    94e0:	02000d0e 	bge	zero,r8,9518 <__ratio+0x98>
    94e4:	4010953a 	slli	r8,r8,20
    94e8:	4421883a 	add	r16,r8,r16
    94ec:	9009883a 	mov	r4,r18
    94f0:	800b883a 	mov	r5,r16
    94f4:	180f883a 	mov	r7,r3
    94f8:	000d3840 	call	d384 <__divdf3>
    94fc:	dfc00617 	ldw	ra,24(sp)
    9500:	dcc00517 	ldw	r19,20(sp)
    9504:	dc800417 	ldw	r18,16(sp)
    9508:	dc400317 	ldw	r17,12(sp)
    950c:	dc000217 	ldw	r16,8(sp)
    9510:	dec00704 	addi	sp,sp,28
    9514:	f800283a 	ret
    9518:	4010953a 	slli	r8,r8,20
    951c:	1a07c83a 	sub	r3,r3,r8
    9520:	003ff206 	br	94ec <__alt_data_end+0xfffb3dbc>

00009524 <_mprec_log10>:
    9524:	defffe04 	addi	sp,sp,-8
    9528:	dc000015 	stw	r16,0(sp)
    952c:	dfc00115 	stw	ra,4(sp)
    9530:	008005c4 	movi	r2,23
    9534:	2021883a 	mov	r16,r4
    9538:	11000d0e 	bge	r2,r4,9570 <_mprec_log10+0x4c>
    953c:	0005883a 	mov	r2,zero
    9540:	00cffc34 	movhi	r3,16368
    9544:	843fffc4 	addi	r16,r16,-1
    9548:	1009883a 	mov	r4,r2
    954c:	180b883a 	mov	r5,r3
    9550:	000d883a 	mov	r6,zero
    9554:	01d00934 	movhi	r7,16420
    9558:	000df480 	call	df48 <__muldf3>
    955c:	803ff91e 	bne	r16,zero,9544 <__alt_data_end+0xfffb3e14>
    9560:	dfc00117 	ldw	ra,4(sp)
    9564:	dc000017 	ldw	r16,0(sp)
    9568:	dec00204 	addi	sp,sp,8
    956c:	f800283a 	ret
    9570:	202090fa 	slli	r16,r4,3
    9574:	00800074 	movhi	r2,1
    9578:	1088f504 	addi	r2,r2,9172
    957c:	1421883a 	add	r16,r2,r16
    9580:	80800017 	ldw	r2,0(r16)
    9584:	80c00117 	ldw	r3,4(r16)
    9588:	dfc00117 	ldw	ra,4(sp)
    958c:	dc000017 	ldw	r16,0(sp)
    9590:	dec00204 	addi	sp,sp,8
    9594:	f800283a 	ret

00009598 <__copybits>:
    9598:	297fffc4 	addi	r5,r5,-1
    959c:	280fd17a 	srai	r7,r5,5
    95a0:	30c00417 	ldw	r3,16(r6)
    95a4:	30800504 	addi	r2,r6,20
    95a8:	39c00044 	addi	r7,r7,1
    95ac:	18c7883a 	add	r3,r3,r3
    95b0:	39cf883a 	add	r7,r7,r7
    95b4:	18c7883a 	add	r3,r3,r3
    95b8:	39cf883a 	add	r7,r7,r7
    95bc:	10c7883a 	add	r3,r2,r3
    95c0:	21cf883a 	add	r7,r4,r7
    95c4:	10c00d2e 	bgeu	r2,r3,95fc <__copybits+0x64>
    95c8:	200b883a 	mov	r5,r4
    95cc:	12000017 	ldw	r8,0(r2)
    95d0:	29400104 	addi	r5,r5,4
    95d4:	10800104 	addi	r2,r2,4
    95d8:	2a3fff15 	stw	r8,-4(r5)
    95dc:	10fffb36 	bltu	r2,r3,95cc <__alt_data_end+0xfffb3e9c>
    95e0:	1985c83a 	sub	r2,r3,r6
    95e4:	10bffac4 	addi	r2,r2,-21
    95e8:	1004d0ba 	srli	r2,r2,2
    95ec:	10800044 	addi	r2,r2,1
    95f0:	1085883a 	add	r2,r2,r2
    95f4:	1085883a 	add	r2,r2,r2
    95f8:	2089883a 	add	r4,r4,r2
    95fc:	21c0032e 	bgeu	r4,r7,960c <__copybits+0x74>
    9600:	20000015 	stw	zero,0(r4)
    9604:	21000104 	addi	r4,r4,4
    9608:	21fffd36 	bltu	r4,r7,9600 <__alt_data_end+0xfffb3ed0>
    960c:	f800283a 	ret

00009610 <__any_on>:
    9610:	20c00417 	ldw	r3,16(r4)
    9614:	2805d17a 	srai	r2,r5,5
    9618:	21000504 	addi	r4,r4,20
    961c:	18800d0e 	bge	r3,r2,9654 <__any_on+0x44>
    9620:	18c7883a 	add	r3,r3,r3
    9624:	18c7883a 	add	r3,r3,r3
    9628:	20c7883a 	add	r3,r4,r3
    962c:	20c0192e 	bgeu	r4,r3,9694 <__any_on+0x84>
    9630:	18bfff17 	ldw	r2,-4(r3)
    9634:	18ffff04 	addi	r3,r3,-4
    9638:	1000041e 	bne	r2,zero,964c <__any_on+0x3c>
    963c:	20c0142e 	bgeu	r4,r3,9690 <__any_on+0x80>
    9640:	18ffff04 	addi	r3,r3,-4
    9644:	19400017 	ldw	r5,0(r3)
    9648:	283ffc26 	beq	r5,zero,963c <__alt_data_end+0xfffb3f0c>
    964c:	00800044 	movi	r2,1
    9650:	f800283a 	ret
    9654:	10c00a0e 	bge	r2,r3,9680 <__any_on+0x70>
    9658:	1085883a 	add	r2,r2,r2
    965c:	1085883a 	add	r2,r2,r2
    9660:	294007cc 	andi	r5,r5,31
    9664:	2087883a 	add	r3,r4,r2
    9668:	283ff026 	beq	r5,zero,962c <__alt_data_end+0xfffb3efc>
    966c:	19800017 	ldw	r6,0(r3)
    9670:	3144d83a 	srl	r2,r6,r5
    9674:	114a983a 	sll	r5,r2,r5
    9678:	29bff41e 	bne	r5,r6,964c <__alt_data_end+0xfffb3f1c>
    967c:	003feb06 	br	962c <__alt_data_end+0xfffb3efc>
    9680:	1085883a 	add	r2,r2,r2
    9684:	1085883a 	add	r2,r2,r2
    9688:	2087883a 	add	r3,r4,r2
    968c:	003fe706 	br	962c <__alt_data_end+0xfffb3efc>
    9690:	f800283a 	ret
    9694:	0005883a 	mov	r2,zero
    9698:	f800283a 	ret

0000969c <_realloc_r>:
    969c:	defff604 	addi	sp,sp,-40
    96a0:	dcc00315 	stw	r19,12(sp)
    96a4:	dc400115 	stw	r17,4(sp)
    96a8:	dfc00915 	stw	ra,36(sp)
    96ac:	df000815 	stw	fp,32(sp)
    96b0:	ddc00715 	stw	r23,28(sp)
    96b4:	dd800615 	stw	r22,24(sp)
    96b8:	dd400515 	stw	r21,20(sp)
    96bc:	dd000415 	stw	r20,16(sp)
    96c0:	dc800215 	stw	r18,8(sp)
    96c4:	dc000015 	stw	r16,0(sp)
    96c8:	2827883a 	mov	r19,r5
    96cc:	3023883a 	mov	r17,r6
    96d0:	2800bf26 	beq	r5,zero,99d0 <_realloc_r+0x334>
    96d4:	2025883a 	mov	r18,r4
    96d8:	000f8c40 	call	f8c4 <__malloc_lock>
    96dc:	98ffff17 	ldw	r3,-4(r19)
    96e0:	01bfff04 	movi	r6,-4
    96e4:	890002c4 	addi	r4,r17,11
    96e8:	01c00584 	movi	r7,22
    96ec:	9d7ffe04 	addi	r21,r19,-8
    96f0:	19a0703a 	and	r16,r3,r6
    96f4:	39003f2e 	bgeu	r7,r4,97f4 <_realloc_r+0x158>
    96f8:	053ffe04 	movi	r20,-8
    96fc:	2528703a 	and	r20,r4,r20
    9700:	a00f883a 	mov	r7,r20
    9704:	a0008216 	blt	r20,zero,9910 <_realloc_r+0x274>
    9708:	a4408136 	bltu	r20,r17,9910 <_realloc_r+0x274>
    970c:	81c03c0e 	bge	r16,r7,9800 <_realloc_r+0x164>
    9710:	07000074 	movhi	fp,1
    9714:	e7097c04 	addi	fp,fp,9712
    9718:	e1000217 	ldw	r4,8(fp)
    971c:	ac05883a 	add	r2,r21,r16
    9720:	2080bf26 	beq	r4,r2,9a20 <_realloc_r+0x384>
    9724:	11000117 	ldw	r4,4(r2)
    9728:	023fff84 	movi	r8,-2
    972c:	2210703a 	and	r8,r4,r8
    9730:	1211883a 	add	r8,r2,r8
    9734:	41400117 	ldw	r5,4(r8)
    9738:	2940004c 	andi	r5,r5,1
    973c:	28004a1e 	bne	r5,zero,9868 <_realloc_r+0x1cc>
    9740:	017fff04 	movi	r5,-4
    9744:	2148703a 	and	r4,r4,r5
    9748:	2409883a 	add	r4,r4,r16
    974c:	21c0ad0e 	bge	r4,r7,9a04 <_realloc_r+0x368>
    9750:	18c0004c 	andi	r3,r3,1
    9754:	18007f1e 	bne	r3,zero,9954 <_realloc_r+0x2b8>
    9758:	9dfffe17 	ldw	r23,-8(r19)
    975c:	adefc83a 	sub	r23,r21,r23
    9760:	bd800117 	ldw	r22,4(r23)
    9764:	b14a703a 	and	r5,r22,r5
    9768:	216d883a 	add	r22,r4,r5
    976c:	b1c04516 	blt	r22,r7,9884 <_realloc_r+0x1e8>
    9770:	10c00317 	ldw	r3,12(r2)
    9774:	10800217 	ldw	r2,8(r2)
    9778:	81bfff04 	addi	r6,r16,-4
    977c:	bc400204 	addi	r17,r23,8
    9780:	10c00315 	stw	r3,12(r2)
    9784:	18800215 	stw	r2,8(r3)
    9788:	b9400217 	ldw	r5,8(r23)
    978c:	b8c00317 	ldw	r3,12(r23)
    9790:	00800904 	movi	r2,36
    9794:	28c00315 	stw	r3,12(r5)
    9798:	19400215 	stw	r5,8(r3)
    979c:	1180ef36 	bltu	r2,r6,9b5c <_realloc_r+0x4c0>
    97a0:	008004c4 	movi	r2,19
    97a4:	1180da2e 	bgeu	r2,r6,9b10 <_realloc_r+0x474>
    97a8:	98800017 	ldw	r2,0(r19)
    97ac:	b8800215 	stw	r2,8(r23)
    97b0:	98800117 	ldw	r2,4(r19)
    97b4:	b8800315 	stw	r2,12(r23)
    97b8:	008006c4 	movi	r2,27
    97bc:	1180fc2e 	bgeu	r2,r6,9bb0 <_realloc_r+0x514>
    97c0:	98800217 	ldw	r2,8(r19)
    97c4:	b8800415 	stw	r2,16(r23)
    97c8:	98800317 	ldw	r2,12(r19)
    97cc:	b8800515 	stw	r2,20(r23)
    97d0:	00800904 	movi	r2,36
    97d4:	3080421e 	bne	r6,r2,98e0 <_realloc_r+0x244>
    97d8:	98800417 	ldw	r2,16(r19)
    97dc:	9cc00604 	addi	r19,r19,24
    97e0:	b8c00804 	addi	r3,r23,32
    97e4:	b8800615 	stw	r2,24(r23)
    97e8:	98bfff17 	ldw	r2,-4(r19)
    97ec:	b8800715 	stw	r2,28(r23)
    97f0:	00003d06 	br	98e8 <_realloc_r+0x24c>
    97f4:	01c00404 	movi	r7,16
    97f8:	3829883a 	mov	r20,r7
    97fc:	003fc206 	br	9708 <__alt_data_end+0xfffb3fd8>
    9800:	9823883a 	mov	r17,r19
    9804:	850fc83a 	sub	r7,r16,r20
    9808:	008003c4 	movi	r2,15
    980c:	18c0004c 	andi	r3,r3,1
    9810:	11c04336 	bltu	r2,r7,9920 <_realloc_r+0x284>
    9814:	1c06b03a 	or	r3,r3,r16
    9818:	a8c00115 	stw	r3,4(r21)
    981c:	ac21883a 	add	r16,r21,r16
    9820:	80c00117 	ldw	r3,4(r16)
    9824:	18c00054 	ori	r3,r3,1
    9828:	80c00115 	stw	r3,4(r16)
    982c:	9009883a 	mov	r4,r18
    9830:	000f8e40 	call	f8e4 <__malloc_unlock>
    9834:	8805883a 	mov	r2,r17
    9838:	dfc00917 	ldw	ra,36(sp)
    983c:	df000817 	ldw	fp,32(sp)
    9840:	ddc00717 	ldw	r23,28(sp)
    9844:	dd800617 	ldw	r22,24(sp)
    9848:	dd400517 	ldw	r21,20(sp)
    984c:	dd000417 	ldw	r20,16(sp)
    9850:	dcc00317 	ldw	r19,12(sp)
    9854:	dc800217 	ldw	r18,8(sp)
    9858:	dc400117 	ldw	r17,4(sp)
    985c:	dc000017 	ldw	r16,0(sp)
    9860:	dec00a04 	addi	sp,sp,40
    9864:	f800283a 	ret
    9868:	18c0004c 	andi	r3,r3,1
    986c:	1800391e 	bne	r3,zero,9954 <_realloc_r+0x2b8>
    9870:	9dfffe17 	ldw	r23,-8(r19)
    9874:	00bfff04 	movi	r2,-4
    9878:	adefc83a 	sub	r23,r21,r23
    987c:	b9400117 	ldw	r5,4(r23)
    9880:	288a703a 	and	r5,r5,r2
    9884:	2c2d883a 	add	r22,r5,r16
    9888:	b1c03216 	blt	r22,r7,9954 <_realloc_r+0x2b8>
    988c:	b8800317 	ldw	r2,12(r23)
    9890:	b8c00217 	ldw	r3,8(r23)
    9894:	81bfff04 	addi	r6,r16,-4
    9898:	01000904 	movi	r4,36
    989c:	18800315 	stw	r2,12(r3)
    98a0:	10c00215 	stw	r3,8(r2)
    98a4:	bc400204 	addi	r17,r23,8
    98a8:	2180ac36 	bltu	r4,r6,9b5c <_realloc_r+0x4c0>
    98ac:	008004c4 	movi	r2,19
    98b0:	1180972e 	bgeu	r2,r6,9b10 <_realloc_r+0x474>
    98b4:	98800017 	ldw	r2,0(r19)
    98b8:	b8800215 	stw	r2,8(r23)
    98bc:	98800117 	ldw	r2,4(r19)
    98c0:	b8800315 	stw	r2,12(r23)
    98c4:	008006c4 	movi	r2,27
    98c8:	1180b92e 	bgeu	r2,r6,9bb0 <_realloc_r+0x514>
    98cc:	98800217 	ldw	r2,8(r19)
    98d0:	b8800415 	stw	r2,16(r23)
    98d4:	98800317 	ldw	r2,12(r19)
    98d8:	b8800515 	stw	r2,20(r23)
    98dc:	313fbe26 	beq	r6,r4,97d8 <__alt_data_end+0xfffb40a8>
    98e0:	b8c00604 	addi	r3,r23,24
    98e4:	9cc00404 	addi	r19,r19,16
    98e8:	98800017 	ldw	r2,0(r19)
    98ec:	b021883a 	mov	r16,r22
    98f0:	b82b883a 	mov	r21,r23
    98f4:	18800015 	stw	r2,0(r3)
    98f8:	98800117 	ldw	r2,4(r19)
    98fc:	18800115 	stw	r2,4(r3)
    9900:	98800217 	ldw	r2,8(r19)
    9904:	18800215 	stw	r2,8(r3)
    9908:	b8c00117 	ldw	r3,4(r23)
    990c:	003fbd06 	br	9804 <__alt_data_end+0xfffb40d4>
    9910:	00800304 	movi	r2,12
    9914:	90800015 	stw	r2,0(r18)
    9918:	0005883a 	mov	r2,zero
    991c:	003fc606 	br	9838 <__alt_data_end+0xfffb4108>
    9920:	1d06b03a 	or	r3,r3,r20
    9924:	ad0b883a 	add	r5,r21,r20
    9928:	a8c00115 	stw	r3,4(r21)
    992c:	38800054 	ori	r2,r7,1
    9930:	28800115 	stw	r2,4(r5)
    9934:	29cf883a 	add	r7,r5,r7
    9938:	38800117 	ldw	r2,4(r7)
    993c:	9009883a 	mov	r4,r18
    9940:	29400204 	addi	r5,r5,8
    9944:	10800054 	ori	r2,r2,1
    9948:	38800115 	stw	r2,4(r7)
    994c:	00076180 	call	7618 <_free_r>
    9950:	003fb606 	br	982c <__alt_data_end+0xfffb40fc>
    9954:	880b883a 	mov	r5,r17
    9958:	9009883a 	mov	r4,r18
    995c:	00029800 	call	2980 <_malloc_r>
    9960:	1023883a 	mov	r17,r2
    9964:	1000aa26 	beq	r2,zero,9c10 <_realloc_r+0x574>
    9968:	98ffff17 	ldw	r3,-4(r19)
    996c:	113ffe04 	addi	r4,r2,-8
    9970:	00bfff84 	movi	r2,-2
    9974:	1884703a 	and	r2,r3,r2
    9978:	a885883a 	add	r2,r21,r2
    997c:	20808626 	beq	r4,r2,9b98 <_realloc_r+0x4fc>
    9980:	81bfff04 	addi	r6,r16,-4
    9984:	00800904 	movi	r2,36
    9988:	11807036 	bltu	r2,r6,9b4c <_realloc_r+0x4b0>
    998c:	00c004c4 	movi	r3,19
    9990:	19805636 	bltu	r3,r6,9aec <_realloc_r+0x450>
    9994:	8805883a 	mov	r2,r17
    9998:	9807883a 	mov	r3,r19
    999c:	19000017 	ldw	r4,0(r3)
    99a0:	11000015 	stw	r4,0(r2)
    99a4:	19000117 	ldw	r4,4(r3)
    99a8:	11000115 	stw	r4,4(r2)
    99ac:	18c00217 	ldw	r3,8(r3)
    99b0:	10c00215 	stw	r3,8(r2)
    99b4:	980b883a 	mov	r5,r19
    99b8:	9009883a 	mov	r4,r18
    99bc:	00076180 	call	7618 <_free_r>
    99c0:	9009883a 	mov	r4,r18
    99c4:	000f8e40 	call	f8e4 <__malloc_unlock>
    99c8:	8805883a 	mov	r2,r17
    99cc:	003f9a06 	br	9838 <__alt_data_end+0xfffb4108>
    99d0:	300b883a 	mov	r5,r6
    99d4:	dfc00917 	ldw	ra,36(sp)
    99d8:	df000817 	ldw	fp,32(sp)
    99dc:	ddc00717 	ldw	r23,28(sp)
    99e0:	dd800617 	ldw	r22,24(sp)
    99e4:	dd400517 	ldw	r21,20(sp)
    99e8:	dd000417 	ldw	r20,16(sp)
    99ec:	dcc00317 	ldw	r19,12(sp)
    99f0:	dc800217 	ldw	r18,8(sp)
    99f4:	dc400117 	ldw	r17,4(sp)
    99f8:	dc000017 	ldw	r16,0(sp)
    99fc:	dec00a04 	addi	sp,sp,40
    9a00:	00029801 	jmpi	2980 <_malloc_r>
    9a04:	11400317 	ldw	r5,12(r2)
    9a08:	10800217 	ldw	r2,8(r2)
    9a0c:	9823883a 	mov	r17,r19
    9a10:	2021883a 	mov	r16,r4
    9a14:	11400315 	stw	r5,12(r2)
    9a18:	28800215 	stw	r2,8(r5)
    9a1c:	003f7906 	br	9804 <__alt_data_end+0xfffb40d4>
    9a20:	21000117 	ldw	r4,4(r4)
    9a24:	00bfff04 	movi	r2,-4
    9a28:	a1800404 	addi	r6,r20,16
    9a2c:	2088703a 	and	r4,r4,r2
    9a30:	2409883a 	add	r4,r4,r16
    9a34:	2180380e 	bge	r4,r6,9b18 <_realloc_r+0x47c>
    9a38:	18c0004c 	andi	r3,r3,1
    9a3c:	183fc51e 	bne	r3,zero,9954 <__alt_data_end+0xfffb4224>
    9a40:	9dfffe17 	ldw	r23,-8(r19)
    9a44:	adefc83a 	sub	r23,r21,r23
    9a48:	b9400117 	ldw	r5,4(r23)
    9a4c:	288a703a 	and	r5,r5,r2
    9a50:	216d883a 	add	r22,r4,r5
    9a54:	b1bf8b16 	blt	r22,r6,9884 <__alt_data_end+0xfffb4154>
    9a58:	b8800317 	ldw	r2,12(r23)
    9a5c:	b8c00217 	ldw	r3,8(r23)
    9a60:	81bfff04 	addi	r6,r16,-4
    9a64:	01000904 	movi	r4,36
    9a68:	18800315 	stw	r2,12(r3)
    9a6c:	10c00215 	stw	r3,8(r2)
    9a70:	bc400204 	addi	r17,r23,8
    9a74:	21805a36 	bltu	r4,r6,9be0 <_realloc_r+0x544>
    9a78:	008004c4 	movi	r2,19
    9a7c:	1180562e 	bgeu	r2,r6,9bd8 <_realloc_r+0x53c>
    9a80:	98800017 	ldw	r2,0(r19)
    9a84:	b8800215 	stw	r2,8(r23)
    9a88:	98800117 	ldw	r2,4(r19)
    9a8c:	b8800315 	stw	r2,12(r23)
    9a90:	008006c4 	movi	r2,27
    9a94:	11805636 	bltu	r2,r6,9bf0 <_realloc_r+0x554>
    9a98:	b8800404 	addi	r2,r23,16
    9a9c:	9cc00204 	addi	r19,r19,8
    9aa0:	98c00017 	ldw	r3,0(r19)
    9aa4:	10c00015 	stw	r3,0(r2)
    9aa8:	98c00117 	ldw	r3,4(r19)
    9aac:	10c00115 	stw	r3,4(r2)
    9ab0:	98c00217 	ldw	r3,8(r19)
    9ab4:	10c00215 	stw	r3,8(r2)
    9ab8:	bd07883a 	add	r3,r23,r20
    9abc:	b505c83a 	sub	r2,r22,r20
    9ac0:	e0c00215 	stw	r3,8(fp)
    9ac4:	10800054 	ori	r2,r2,1
    9ac8:	18800115 	stw	r2,4(r3)
    9acc:	b8800117 	ldw	r2,4(r23)
    9ad0:	9009883a 	mov	r4,r18
    9ad4:	1080004c 	andi	r2,r2,1
    9ad8:	a0a8b03a 	or	r20,r20,r2
    9adc:	bd000115 	stw	r20,4(r23)
    9ae0:	000f8e40 	call	f8e4 <__malloc_unlock>
    9ae4:	8805883a 	mov	r2,r17
    9ae8:	003f5306 	br	9838 <__alt_data_end+0xfffb4108>
    9aec:	98c00017 	ldw	r3,0(r19)
    9af0:	88c00015 	stw	r3,0(r17)
    9af4:	98c00117 	ldw	r3,4(r19)
    9af8:	88c00115 	stw	r3,4(r17)
    9afc:	00c006c4 	movi	r3,27
    9b00:	19801d36 	bltu	r3,r6,9b78 <_realloc_r+0x4dc>
    9b04:	88800204 	addi	r2,r17,8
    9b08:	98c00204 	addi	r3,r19,8
    9b0c:	003fa306 	br	999c <__alt_data_end+0xfffb426c>
    9b10:	8807883a 	mov	r3,r17
    9b14:	003f7406 	br	98e8 <__alt_data_end+0xfffb41b8>
    9b18:	ad2b883a 	add	r21,r21,r20
    9b1c:	2505c83a 	sub	r2,r4,r20
    9b20:	e5400215 	stw	r21,8(fp)
    9b24:	10800054 	ori	r2,r2,1
    9b28:	a8800115 	stw	r2,4(r21)
    9b2c:	98bfff17 	ldw	r2,-4(r19)
    9b30:	9009883a 	mov	r4,r18
    9b34:	1080004c 	andi	r2,r2,1
    9b38:	a0a8b03a 	or	r20,r20,r2
    9b3c:	9d3fff15 	stw	r20,-4(r19)
    9b40:	000f8e40 	call	f8e4 <__malloc_unlock>
    9b44:	9805883a 	mov	r2,r19
    9b48:	003f3b06 	br	9838 <__alt_data_end+0xfffb4108>
    9b4c:	8809883a 	mov	r4,r17
    9b50:	980b883a 	mov	r5,r19
    9b54:	00083d40 	call	83d4 <memmove>
    9b58:	003f9606 	br	99b4 <__alt_data_end+0xfffb4284>
    9b5c:	8809883a 	mov	r4,r17
    9b60:	980b883a 	mov	r5,r19
    9b64:	00083d40 	call	83d4 <memmove>
    9b68:	b8c00117 	ldw	r3,4(r23)
    9b6c:	b021883a 	mov	r16,r22
    9b70:	b82b883a 	mov	r21,r23
    9b74:	003f2306 	br	9804 <__alt_data_end+0xfffb40d4>
    9b78:	98c00217 	ldw	r3,8(r19)
    9b7c:	88c00215 	stw	r3,8(r17)
    9b80:	98c00317 	ldw	r3,12(r19)
    9b84:	88c00315 	stw	r3,12(r17)
    9b88:	30800c26 	beq	r6,r2,9bbc <_realloc_r+0x520>
    9b8c:	88800404 	addi	r2,r17,16
    9b90:	98c00404 	addi	r3,r19,16
    9b94:	003f8106 	br	999c <__alt_data_end+0xfffb426c>
    9b98:	893fff17 	ldw	r4,-4(r17)
    9b9c:	00bfff04 	movi	r2,-4
    9ba0:	9823883a 	mov	r17,r19
    9ba4:	2084703a 	and	r2,r4,r2
    9ba8:	80a1883a 	add	r16,r16,r2
    9bac:	003f1506 	br	9804 <__alt_data_end+0xfffb40d4>
    9bb0:	b8c00404 	addi	r3,r23,16
    9bb4:	9cc00204 	addi	r19,r19,8
    9bb8:	003f4b06 	br	98e8 <__alt_data_end+0xfffb41b8>
    9bbc:	99000417 	ldw	r4,16(r19)
    9bc0:	88800604 	addi	r2,r17,24
    9bc4:	98c00604 	addi	r3,r19,24
    9bc8:	89000415 	stw	r4,16(r17)
    9bcc:	99000517 	ldw	r4,20(r19)
    9bd0:	89000515 	stw	r4,20(r17)
    9bd4:	003f7106 	br	999c <__alt_data_end+0xfffb426c>
    9bd8:	8805883a 	mov	r2,r17
    9bdc:	003fb006 	br	9aa0 <__alt_data_end+0xfffb4370>
    9be0:	8809883a 	mov	r4,r17
    9be4:	980b883a 	mov	r5,r19
    9be8:	00083d40 	call	83d4 <memmove>
    9bec:	003fb206 	br	9ab8 <__alt_data_end+0xfffb4388>
    9bf0:	98800217 	ldw	r2,8(r19)
    9bf4:	b8800415 	stw	r2,16(r23)
    9bf8:	98800317 	ldw	r2,12(r19)
    9bfc:	b8800515 	stw	r2,20(r23)
    9c00:	31000726 	beq	r6,r4,9c20 <_realloc_r+0x584>
    9c04:	b8800604 	addi	r2,r23,24
    9c08:	9cc00404 	addi	r19,r19,16
    9c0c:	003fa406 	br	9aa0 <__alt_data_end+0xfffb4370>
    9c10:	9009883a 	mov	r4,r18
    9c14:	000f8e40 	call	f8e4 <__malloc_unlock>
    9c18:	0005883a 	mov	r2,zero
    9c1c:	003f0606 	br	9838 <__alt_data_end+0xfffb4108>
    9c20:	98c00417 	ldw	r3,16(r19)
    9c24:	9cc00604 	addi	r19,r19,24
    9c28:	b8800804 	addi	r2,r23,32
    9c2c:	b8c00615 	stw	r3,24(r23)
    9c30:	98ffff17 	ldw	r3,-4(r19)
    9c34:	b8c00715 	stw	r3,28(r23)
    9c38:	003f9906 	br	9aa0 <__alt_data_end+0xfffb4370>

00009c3c <__fpclassifyd>:
    9c3c:	00a00034 	movhi	r2,32768
    9c40:	10bfffc4 	addi	r2,r2,-1
    9c44:	2884703a 	and	r2,r5,r2
    9c48:	10000726 	beq	r2,zero,9c68 <__fpclassifyd+0x2c>
    9c4c:	00fffc34 	movhi	r3,65520
    9c50:	019ff834 	movhi	r6,32736
    9c54:	28c7883a 	add	r3,r5,r3
    9c58:	31bfffc4 	addi	r6,r6,-1
    9c5c:	30c00536 	bltu	r6,r3,9c74 <__fpclassifyd+0x38>
    9c60:	00800104 	movi	r2,4
    9c64:	f800283a 	ret
    9c68:	2000021e 	bne	r4,zero,9c74 <__fpclassifyd+0x38>
    9c6c:	00800084 	movi	r2,2
    9c70:	f800283a 	ret
    9c74:	00dffc34 	movhi	r3,32752
    9c78:	019ff834 	movhi	r6,32736
    9c7c:	28cb883a 	add	r5,r5,r3
    9c80:	31bfffc4 	addi	r6,r6,-1
    9c84:	317ff62e 	bgeu	r6,r5,9c60 <__alt_data_end+0xfffb4530>
    9c88:	01400434 	movhi	r5,16
    9c8c:	297fffc4 	addi	r5,r5,-1
    9c90:	28800236 	bltu	r5,r2,9c9c <__fpclassifyd+0x60>
    9c94:	008000c4 	movi	r2,3
    9c98:	f800283a 	ret
    9c9c:	10c00226 	beq	r2,r3,9ca8 <__fpclassifyd+0x6c>
    9ca0:	0005883a 	mov	r2,zero
    9ca4:	f800283a 	ret
    9ca8:	2005003a 	cmpeq	r2,r4,zero
    9cac:	f800283a 	ret

00009cb0 <__sread>:
    9cb0:	defffe04 	addi	sp,sp,-8
    9cb4:	dc000015 	stw	r16,0(sp)
    9cb8:	2821883a 	mov	r16,r5
    9cbc:	2940038f 	ldh	r5,14(r5)
    9cc0:	dfc00115 	stw	ra,4(sp)
    9cc4:	000b96c0 	call	b96c <_read_r>
    9cc8:	10000716 	blt	r2,zero,9ce8 <__sread+0x38>
    9ccc:	80c01417 	ldw	r3,80(r16)
    9cd0:	1887883a 	add	r3,r3,r2
    9cd4:	80c01415 	stw	r3,80(r16)
    9cd8:	dfc00117 	ldw	ra,4(sp)
    9cdc:	dc000017 	ldw	r16,0(sp)
    9ce0:	dec00204 	addi	sp,sp,8
    9ce4:	f800283a 	ret
    9ce8:	80c0030b 	ldhu	r3,12(r16)
    9cec:	18fbffcc 	andi	r3,r3,61439
    9cf0:	80c0030d 	sth	r3,12(r16)
    9cf4:	dfc00117 	ldw	ra,4(sp)
    9cf8:	dc000017 	ldw	r16,0(sp)
    9cfc:	dec00204 	addi	sp,sp,8
    9d00:	f800283a 	ret

00009d04 <__seofread>:
    9d04:	0005883a 	mov	r2,zero
    9d08:	f800283a 	ret

00009d0c <__swrite>:
    9d0c:	2880030b 	ldhu	r2,12(r5)
    9d10:	defffb04 	addi	sp,sp,-20
    9d14:	dcc00315 	stw	r19,12(sp)
    9d18:	dc800215 	stw	r18,8(sp)
    9d1c:	dc400115 	stw	r17,4(sp)
    9d20:	dc000015 	stw	r16,0(sp)
    9d24:	dfc00415 	stw	ra,16(sp)
    9d28:	10c0400c 	andi	r3,r2,256
    9d2c:	2821883a 	mov	r16,r5
    9d30:	2027883a 	mov	r19,r4
    9d34:	3025883a 	mov	r18,r6
    9d38:	3823883a 	mov	r17,r7
    9d3c:	18000526 	beq	r3,zero,9d54 <__swrite+0x48>
    9d40:	2940038f 	ldh	r5,14(r5)
    9d44:	000d883a 	mov	r6,zero
    9d48:	01c00084 	movi	r7,2
    9d4c:	000b9100 	call	b910 <_lseek_r>
    9d50:	8080030b 	ldhu	r2,12(r16)
    9d54:	8140038f 	ldh	r5,14(r16)
    9d58:	10bbffcc 	andi	r2,r2,61439
    9d5c:	9809883a 	mov	r4,r19
    9d60:	900d883a 	mov	r6,r18
    9d64:	880f883a 	mov	r7,r17
    9d68:	8080030d 	sth	r2,12(r16)
    9d6c:	dfc00417 	ldw	ra,16(sp)
    9d70:	dcc00317 	ldw	r19,12(sp)
    9d74:	dc800217 	ldw	r18,8(sp)
    9d78:	dc400117 	ldw	r17,4(sp)
    9d7c:	dc000017 	ldw	r16,0(sp)
    9d80:	dec00504 	addi	sp,sp,20
    9d84:	000b3ec1 	jmpi	b3ec <_write_r>

00009d88 <__sseek>:
    9d88:	defffe04 	addi	sp,sp,-8
    9d8c:	dc000015 	stw	r16,0(sp)
    9d90:	2821883a 	mov	r16,r5
    9d94:	2940038f 	ldh	r5,14(r5)
    9d98:	dfc00115 	stw	ra,4(sp)
    9d9c:	000b9100 	call	b910 <_lseek_r>
    9da0:	00ffffc4 	movi	r3,-1
    9da4:	10c00826 	beq	r2,r3,9dc8 <__sseek+0x40>
    9da8:	80c0030b 	ldhu	r3,12(r16)
    9dac:	80801415 	stw	r2,80(r16)
    9db0:	18c40014 	ori	r3,r3,4096
    9db4:	80c0030d 	sth	r3,12(r16)
    9db8:	dfc00117 	ldw	ra,4(sp)
    9dbc:	dc000017 	ldw	r16,0(sp)
    9dc0:	dec00204 	addi	sp,sp,8
    9dc4:	f800283a 	ret
    9dc8:	80c0030b 	ldhu	r3,12(r16)
    9dcc:	18fbffcc 	andi	r3,r3,61439
    9dd0:	80c0030d 	sth	r3,12(r16)
    9dd4:	dfc00117 	ldw	ra,4(sp)
    9dd8:	dc000017 	ldw	r16,0(sp)
    9ddc:	dec00204 	addi	sp,sp,8
    9de0:	f800283a 	ret

00009de4 <__sclose>:
    9de4:	2940038f 	ldh	r5,14(r5)
    9de8:	000b4481 	jmpi	b448 <_close_r>

00009dec <strcmp>:
    9dec:	2144b03a 	or	r2,r4,r5
    9df0:	108000cc 	andi	r2,r2,3
    9df4:	1000171e 	bne	r2,zero,9e54 <strcmp+0x68>
    9df8:	20800017 	ldw	r2,0(r4)
    9dfc:	28c00017 	ldw	r3,0(r5)
    9e00:	10c0141e 	bne	r2,r3,9e54 <strcmp+0x68>
    9e04:	027fbff4 	movhi	r9,65279
    9e08:	4a7fbfc4 	addi	r9,r9,-257
    9e0c:	0086303a 	nor	r3,zero,r2
    9e10:	02202074 	movhi	r8,32897
    9e14:	1245883a 	add	r2,r2,r9
    9e18:	42202004 	addi	r8,r8,-32640
    9e1c:	10c4703a 	and	r2,r2,r3
    9e20:	1204703a 	and	r2,r2,r8
    9e24:	10000226 	beq	r2,zero,9e30 <strcmp+0x44>
    9e28:	00001706 	br	9e88 <strcmp+0x9c>
    9e2c:	1000161e 	bne	r2,zero,9e88 <strcmp+0x9c>
    9e30:	21000104 	addi	r4,r4,4
    9e34:	20c00017 	ldw	r3,0(r4)
    9e38:	29400104 	addi	r5,r5,4
    9e3c:	29800017 	ldw	r6,0(r5)
    9e40:	1a4f883a 	add	r7,r3,r9
    9e44:	00c4303a 	nor	r2,zero,r3
    9e48:	3884703a 	and	r2,r7,r2
    9e4c:	1204703a 	and	r2,r2,r8
    9e50:	19bff626 	beq	r3,r6,9e2c <__alt_data_end+0xfffb46fc>
    9e54:	20800007 	ldb	r2,0(r4)
    9e58:	1000051e 	bne	r2,zero,9e70 <strcmp+0x84>
    9e5c:	00000606 	br	9e78 <strcmp+0x8c>
    9e60:	21000044 	addi	r4,r4,1
    9e64:	20800007 	ldb	r2,0(r4)
    9e68:	29400044 	addi	r5,r5,1
    9e6c:	10000226 	beq	r2,zero,9e78 <strcmp+0x8c>
    9e70:	28c00007 	ldb	r3,0(r5)
    9e74:	10fffa26 	beq	r2,r3,9e60 <__alt_data_end+0xfffb4730>
    9e78:	20800003 	ldbu	r2,0(r4)
    9e7c:	28c00003 	ldbu	r3,0(r5)
    9e80:	10c5c83a 	sub	r2,r2,r3
    9e84:	f800283a 	ret
    9e88:	0005883a 	mov	r2,zero
    9e8c:	f800283a 	ret

00009e90 <__sprint_r.part.0>:
    9e90:	28801917 	ldw	r2,100(r5)
    9e94:	defff604 	addi	sp,sp,-40
    9e98:	dd400515 	stw	r21,20(sp)
    9e9c:	dcc00315 	stw	r19,12(sp)
    9ea0:	dfc00915 	stw	ra,36(sp)
    9ea4:	df000815 	stw	fp,32(sp)
    9ea8:	ddc00715 	stw	r23,28(sp)
    9eac:	dd800615 	stw	r22,24(sp)
    9eb0:	dd000415 	stw	r20,16(sp)
    9eb4:	dc800215 	stw	r18,8(sp)
    9eb8:	dc400115 	stw	r17,4(sp)
    9ebc:	dc000015 	stw	r16,0(sp)
    9ec0:	1088000c 	andi	r2,r2,8192
    9ec4:	2827883a 	mov	r19,r5
    9ec8:	302b883a 	mov	r21,r6
    9ecc:	10002d26 	beq	r2,zero,9f84 <__sprint_r.part.0+0xf4>
    9ed0:	30800217 	ldw	r2,8(r6)
    9ed4:	35800017 	ldw	r22,0(r6)
    9ed8:	10002826 	beq	r2,zero,9f7c <__sprint_r.part.0+0xec>
    9edc:	2029883a 	mov	r20,r4
    9ee0:	b5c00104 	addi	r23,r22,4
    9ee4:	04bfffc4 	movi	r18,-1
    9ee8:	bc400017 	ldw	r17,0(r23)
    9eec:	b4000017 	ldw	r16,0(r22)
    9ef0:	0039883a 	mov	fp,zero
    9ef4:	8822d0ba 	srli	r17,r17,2
    9ef8:	04400316 	blt	zero,r17,9f08 <__sprint_r.part.0+0x78>
    9efc:	00001706 	br	9f5c <__sprint_r.part.0+0xcc>
    9f00:	84000104 	addi	r16,r16,4
    9f04:	8f001526 	beq	r17,fp,9f5c <__sprint_r.part.0+0xcc>
    9f08:	81400017 	ldw	r5,0(r16)
    9f0c:	a009883a 	mov	r4,r20
    9f10:	980d883a 	mov	r6,r19
    9f14:	000b6880 	call	b688 <_fputwc_r>
    9f18:	e7000044 	addi	fp,fp,1
    9f1c:	14bff81e 	bne	r2,r18,9f00 <__alt_data_end+0xfffb47d0>
    9f20:	9005883a 	mov	r2,r18
    9f24:	a8000215 	stw	zero,8(r21)
    9f28:	a8000115 	stw	zero,4(r21)
    9f2c:	dfc00917 	ldw	ra,36(sp)
    9f30:	df000817 	ldw	fp,32(sp)
    9f34:	ddc00717 	ldw	r23,28(sp)
    9f38:	dd800617 	ldw	r22,24(sp)
    9f3c:	dd400517 	ldw	r21,20(sp)
    9f40:	dd000417 	ldw	r20,16(sp)
    9f44:	dcc00317 	ldw	r19,12(sp)
    9f48:	dc800217 	ldw	r18,8(sp)
    9f4c:	dc400117 	ldw	r17,4(sp)
    9f50:	dc000017 	ldw	r16,0(sp)
    9f54:	dec00a04 	addi	sp,sp,40
    9f58:	f800283a 	ret
    9f5c:	a8c00217 	ldw	r3,8(r21)
    9f60:	8c63883a 	add	r17,r17,r17
    9f64:	8c63883a 	add	r17,r17,r17
    9f68:	1c45c83a 	sub	r2,r3,r17
    9f6c:	a8800215 	stw	r2,8(r21)
    9f70:	b5800204 	addi	r22,r22,8
    9f74:	bdc00204 	addi	r23,r23,8
    9f78:	103fdb1e 	bne	r2,zero,9ee8 <__alt_data_end+0xfffb47b8>
    9f7c:	0005883a 	mov	r2,zero
    9f80:	003fe806 	br	9f24 <__alt_data_end+0xfffb47f4>
    9f84:	00079080 	call	7908 <__sfvwrite_r>
    9f88:	003fe606 	br	9f24 <__alt_data_end+0xfffb47f4>

00009f8c <__sprint_r>:
    9f8c:	30c00217 	ldw	r3,8(r6)
    9f90:	18000126 	beq	r3,zero,9f98 <__sprint_r+0xc>
    9f94:	0009e901 	jmpi	9e90 <__sprint_r.part.0>
    9f98:	30000115 	stw	zero,4(r6)
    9f9c:	0005883a 	mov	r2,zero
    9fa0:	f800283a 	ret

00009fa4 <___vfiprintf_internal_r>:
    9fa4:	defeca04 	addi	sp,sp,-1240
    9fa8:	dcc12f15 	stw	r19,1212(sp)
    9fac:	dfc13515 	stw	ra,1236(sp)
    9fb0:	df013415 	stw	fp,1232(sp)
    9fb4:	ddc13315 	stw	r23,1228(sp)
    9fb8:	dd813215 	stw	r22,1224(sp)
    9fbc:	dd413115 	stw	r21,1220(sp)
    9fc0:	dd013015 	stw	r20,1216(sp)
    9fc4:	dc812e15 	stw	r18,1208(sp)
    9fc8:	dc412d15 	stw	r17,1204(sp)
    9fcc:	dc012c15 	stw	r16,1200(sp)
    9fd0:	d9012115 	stw	r4,1156(sp)
    9fd4:	d9412015 	stw	r5,1152(sp)
    9fd8:	d9c12315 	stw	r7,1164(sp)
    9fdc:	3027883a 	mov	r19,r6
    9fe0:	20000226 	beq	r4,zero,9fec <___vfiprintf_internal_r+0x48>
    9fe4:	20800e17 	ldw	r2,56(r4)
    9fe8:	1000f726 	beq	r2,zero,a3c8 <___vfiprintf_internal_r+0x424>
    9fec:	d8812017 	ldw	r2,1152(sp)
    9ff0:	10c0030b 	ldhu	r3,12(r2)
    9ff4:	1908000c 	andi	r4,r3,8192
    9ff8:	1805883a 	mov	r2,r3
    9ffc:	2000081e 	bne	r4,zero,a020 <___vfiprintf_internal_r+0x7c>
    a000:	d9412017 	ldw	r5,1152(sp)
    a004:	18880014 	ori	r2,r3,8192
    a008:	00f7ffc4 	movi	r3,-8193
    a00c:	29001917 	ldw	r4,100(r5)
    a010:	2880030d 	sth	r2,12(r5)
    a014:	20c8703a 	and	r4,r4,r3
    a018:	29001915 	stw	r4,100(r5)
    a01c:	1007883a 	mov	r3,r2
    a020:	1100020c 	andi	r4,r2,8
    a024:	2000a726 	beq	r4,zero,a2c4 <___vfiprintf_internal_r+0x320>
    a028:	d9412017 	ldw	r5,1152(sp)
    a02c:	29000417 	ldw	r4,16(r5)
    a030:	2000a426 	beq	r4,zero,a2c4 <___vfiprintf_internal_r+0x320>
    a034:	1080068c 	andi	r2,r2,26
    a038:	01000284 	movi	r4,10
    a03c:	1100ab26 	beq	r2,r4,a2ec <___vfiprintf_internal_r+0x348>
    a040:	d9010a04 	addi	r4,sp,1064
    a044:	d94109c4 	addi	r5,sp,1063
    a048:	07000074 	movhi	fp,1
    a04c:	04400074 	movhi	r17,1
    a050:	2145c83a 	sub	r2,r4,r5
    a054:	e7092b04 	addi	fp,fp,9388
    a058:	8c492704 	addi	r17,r17,9372
    a05c:	d9011e15 	stw	r4,1144(sp)
    a060:	d9411f15 	stw	r5,1148(sp)
    a064:	dec11a15 	stw	sp,1128(sp)
    a068:	d8011c15 	stw	zero,1136(sp)
    a06c:	d8011b15 	stw	zero,1132(sp)
    a070:	d8012715 	stw	zero,1180(sp)
    a074:	d8012515 	stw	zero,1172(sp)
    a078:	d811883a 	mov	r8,sp
    a07c:	d8812815 	stw	r2,1184(sp)
    a080:	982f883a 	mov	r23,r19
    a084:	b8800007 	ldb	r2,0(r23)
    a088:	1003b026 	beq	r2,zero,af4c <___vfiprintf_internal_r+0xfa8>
    a08c:	01000944 	movi	r4,37
    a090:	1103ae26 	beq	r2,r4,af4c <___vfiprintf_internal_r+0xfa8>
    a094:	b805883a 	mov	r2,r23
    a098:	00000106 	br	a0a0 <___vfiprintf_internal_r+0xfc>
    a09c:	19000326 	beq	r3,r4,a0ac <___vfiprintf_internal_r+0x108>
    a0a0:	10800044 	addi	r2,r2,1
    a0a4:	10c00007 	ldb	r3,0(r2)
    a0a8:	183ffc1e 	bne	r3,zero,a09c <__alt_data_end+0xfffb496c>
    a0ac:	15e1c83a 	sub	r16,r2,r23
    a0b0:	1029883a 	mov	r20,r2
    a0b4:	80001026 	beq	r16,zero,a0f8 <___vfiprintf_internal_r+0x154>
    a0b8:	d8c11c17 	ldw	r3,1136(sp)
    a0bc:	d8811b17 	ldw	r2,1132(sp)
    a0c0:	45c00015 	stw	r23,0(r8)
    a0c4:	80c7883a 	add	r3,r16,r3
    a0c8:	10800044 	addi	r2,r2,1
    a0cc:	44000115 	stw	r16,4(r8)
    a0d0:	d8c11c15 	stw	r3,1136(sp)
    a0d4:	d8811b15 	stw	r2,1132(sp)
    a0d8:	010001c4 	movi	r4,7
    a0dc:	2080740e 	bge	r4,r2,a2b0 <___vfiprintf_internal_r+0x30c>
    a0e0:	1803a71e 	bne	r3,zero,af80 <___vfiprintf_internal_r+0xfdc>
    a0e4:	d8c12517 	ldw	r3,1172(sp)
    a0e8:	d8011b15 	stw	zero,1132(sp)
    a0ec:	d811883a 	mov	r8,sp
    a0f0:	1c07883a 	add	r3,r3,r16
    a0f4:	d8c12515 	stw	r3,1172(sp)
    a0f8:	a0800007 	ldb	r2,0(r20)
    a0fc:	1002bf26 	beq	r2,zero,abfc <___vfiprintf_internal_r+0xc58>
    a100:	a5c00044 	addi	r23,r20,1
    a104:	a1800047 	ldb	r6,1(r20)
    a108:	d8011d85 	stb	zero,1142(sp)
    a10c:	d8012205 	stb	zero,1160(sp)
    a110:	043fffc4 	movi	r16,-1
    a114:	d8012415 	stw	zero,1168(sp)
    a118:	0025883a 	mov	r18,zero
    a11c:	05001604 	movi	r20,88
    a120:	05400244 	movi	r21,9
    a124:	4027883a 	mov	r19,r8
    a128:	bdc00044 	addi	r23,r23,1
    a12c:	30bff804 	addi	r2,r6,-32
    a130:	a0825636 	bltu	r20,r2,aa8c <___vfiprintf_internal_r+0xae8>
    a134:	100490ba 	slli	r2,r2,2
    a138:	01000074 	movhi	r4,1
    a13c:	21285304 	addi	r4,r4,-24244
    a140:	1105883a 	add	r2,r2,r4
    a144:	10800017 	ldw	r2,0(r2)
    a148:	1000683a 	jmp	r2
    a14c:	0000aa1c 	xori	zero,zero,680
    a150:	0000aa8c 	andi	zero,zero,682
    a154:	0000aa8c 	andi	zero,zero,682
    a158:	0000aa80 	call	aa8 <setup_keyboard+0x408>
    a15c:	0000aa8c 	andi	zero,zero,682
    a160:	0000aa8c 	andi	zero,zero,682
    a164:	0000aa8c 	andi	zero,zero,682
    a168:	0000aa8c 	andi	zero,zero,682
    a16c:	0000aa8c 	andi	zero,zero,682
    a170:	0000aa8c 	andi	zero,zero,682
    a174:	0000a80c 	andi	zero,zero,672
    a178:	0000aa34 	movhi	zero,680
    a17c:	0000aa8c 	andi	zero,zero,682
    a180:	0000a3e0 	cmpeqi	zero,zero,655
    a184:	0000a830 	cmpltui	zero,zero,672
    a188:	0000aa8c 	andi	zero,zero,682
    a18c:	0000a3ec 	andhi	zero,zero,655
    a190:	0000a3f8 	rdprs	zero,zero,655
    a194:	0000a3f8 	rdprs	zero,zero,655
    a198:	0000a3f8 	rdprs	zero,zero,655
    a19c:	0000a3f8 	rdprs	zero,zero,655
    a1a0:	0000a3f8 	rdprs	zero,zero,655
    a1a4:	0000a3f8 	rdprs	zero,zero,655
    a1a8:	0000a3f8 	rdprs	zero,zero,655
    a1ac:	0000a3f8 	rdprs	zero,zero,655
    a1b0:	0000a3f8 	rdprs	zero,zero,655
    a1b4:	0000aa8c 	andi	zero,zero,682
    a1b8:	0000aa8c 	andi	zero,zero,682
    a1bc:	0000aa8c 	andi	zero,zero,682
    a1c0:	0000aa8c 	andi	zero,zero,682
    a1c4:	0000aa8c 	andi	zero,zero,682
    a1c8:	0000aa8c 	andi	zero,zero,682
    a1cc:	0000aa8c 	andi	zero,zero,682
    a1d0:	0000aa8c 	andi	zero,zero,682
    a1d4:	0000aa8c 	andi	zero,zero,682
    a1d8:	0000aa8c 	andi	zero,zero,682
    a1dc:	0000a438 	rdprs	zero,zero,656
    a1e0:	0000aa8c 	andi	zero,zero,682
    a1e4:	0000aa8c 	andi	zero,zero,682
    a1e8:	0000aa8c 	andi	zero,zero,682
    a1ec:	0000aa8c 	andi	zero,zero,682
    a1f0:	0000aa8c 	andi	zero,zero,682
    a1f4:	0000aa8c 	andi	zero,zero,682
    a1f8:	0000aa8c 	andi	zero,zero,682
    a1fc:	0000aa8c 	andi	zero,zero,682
    a200:	0000aa8c 	andi	zero,zero,682
    a204:	0000aa8c 	andi	zero,zero,682
    a208:	0000a728 	cmpgeui	zero,zero,668
    a20c:	0000aa8c 	andi	zero,zero,682
    a210:	0000aa8c 	andi	zero,zero,682
    a214:	0000aa8c 	andi	zero,zero,682
    a218:	0000aa8c 	andi	zero,zero,682
    a21c:	0000aa8c 	andi	zero,zero,682
    a220:	0000a768 	cmpgeui	zero,zero,669
    a224:	0000aa8c 	andi	zero,zero,682
    a228:	0000aa8c 	andi	zero,zero,682
    a22c:	0000a7ac 	andhi	zero,zero,670
    a230:	0000aa8c 	andi	zero,zero,682
    a234:	0000aa8c 	andi	zero,zero,682
    a238:	0000aa8c 	andi	zero,zero,682
    a23c:	0000aa8c 	andi	zero,zero,682
    a240:	0000aa8c 	andi	zero,zero,682
    a244:	0000aa8c 	andi	zero,zero,682
    a248:	0000aa8c 	andi	zero,zero,682
    a24c:	0000aa8c 	andi	zero,zero,682
    a250:	0000aa8c 	andi	zero,zero,682
    a254:	0000aa8c 	andi	zero,zero,682
    a258:	0000a6f4 	movhi	zero,667
    a25c:	0000aa44 	movi	zero,681
    a260:	0000aa8c 	andi	zero,zero,682
    a264:	0000aa8c 	andi	zero,zero,682
    a268:	0000aa8c 	andi	zero,zero,682
    a26c:	0000a880 	call	a88 <setup_keyboard+0x3e8>
    a270:	0000aa44 	movi	zero,681
    a274:	0000aa8c 	andi	zero,zero,682
    a278:	0000aa8c 	andi	zero,zero,682
    a27c:	0000a798 	cmpnei	zero,zero,670
    a280:	0000aa8c 	andi	zero,zero,682
    a284:	0000a9e4 	muli	zero,zero,679
    a288:	0000a96c 	andhi	zero,zero,677
    a28c:	0000a9a0 	cmpeqi	zero,zero,678
    a290:	0000a88c 	andi	zero,zero,674
    a294:	0000aa8c 	andi	zero,zero,682
    a298:	0000a898 	cmpnei	zero,zero,674
    a29c:	0000aa8c 	andi	zero,zero,682
    a2a0:	0000a8f4 	movhi	zero,675
    a2a4:	0000aa8c 	andi	zero,zero,682
    a2a8:	0000aa8c 	andi	zero,zero,682
    a2ac:	0000a928 	cmpgeui	zero,zero,676
    a2b0:	42000204 	addi	r8,r8,8
    a2b4:	d8c12517 	ldw	r3,1172(sp)
    a2b8:	1c07883a 	add	r3,r3,r16
    a2bc:	d8c12515 	stw	r3,1172(sp)
    a2c0:	003f8d06 	br	a0f8 <__alt_data_end+0xfffb49c8>
    a2c4:	d9012117 	ldw	r4,1156(sp)
    a2c8:	d9412017 	ldw	r5,1152(sp)
    a2cc:	00054680 	call	5468 <__swsetup_r>
    a2d0:	1000301e 	bne	r2,zero,a394 <___vfiprintf_internal_r+0x3f0>
    a2d4:	d8812017 	ldw	r2,1152(sp)
    a2d8:	01000284 	movi	r4,10
    a2dc:	10c0030b 	ldhu	r3,12(r2)
    a2e0:	1805883a 	mov	r2,r3
    a2e4:	1080068c 	andi	r2,r2,26
    a2e8:	113f551e 	bne	r2,r4,a040 <__alt_data_end+0xfffb4910>
    a2ec:	d9012017 	ldw	r4,1152(sp)
    a2f0:	2080038b 	ldhu	r2,14(r4)
    a2f4:	113fffcc 	andi	r4,r2,65535
    a2f8:	2120001c 	xori	r4,r4,32768
    a2fc:	21200004 	addi	r4,r4,-32768
    a300:	203f4f16 	blt	r4,zero,a040 <__alt_data_end+0xfffb4910>
    a304:	d9412017 	ldw	r5,1152(sp)
    a308:	d9012117 	ldw	r4,1156(sp)
    a30c:	d9c12317 	ldw	r7,1164(sp)
    a310:	2b001917 	ldw	r12,100(r5)
    a314:	2ac00717 	ldw	r11,28(r5)
    a318:	2a800917 	ldw	r10,36(r5)
    a31c:	02010004 	movi	r8,1024
    a320:	18ffff4c 	andi	r3,r3,65533
    a324:	da0b883a 	add	r5,sp,r8
    a328:	980d883a 	mov	r6,r19
    a32c:	d8c1030d 	sth	r3,1036(sp)
    a330:	db011915 	stw	r12,1124(sp)
    a334:	d881038d 	sth	r2,1038(sp)
    a338:	dac10715 	stw	r11,1052(sp)
    a33c:	da810915 	stw	r10,1060(sp)
    a340:	dec10015 	stw	sp,1024(sp)
    a344:	dec10415 	stw	sp,1040(sp)
    a348:	da010215 	stw	r8,1032(sp)
    a34c:	da010515 	stw	r8,1044(sp)
    a350:	d8010615 	stw	zero,1048(sp)
    a354:	0009fa40 	call	9fa4 <___vfiprintf_internal_r>
    a358:	1021883a 	mov	r16,r2
    a35c:	10000416 	blt	r2,zero,a370 <___vfiprintf_internal_r+0x3cc>
    a360:	d9012117 	ldw	r4,1156(sp)
    a364:	d9410004 	addi	r5,sp,1024
    a368:	0006ee80 	call	6ee8 <_fflush_r>
    a36c:	10040f1e 	bne	r2,zero,b3ac <___vfiprintf_internal_r+0x1408>
    a370:	d881030b 	ldhu	r2,1036(sp)
    a374:	1080100c 	andi	r2,r2,64
    a378:	10000426 	beq	r2,zero,a38c <___vfiprintf_internal_r+0x3e8>
    a37c:	d8c12017 	ldw	r3,1152(sp)
    a380:	1880030b 	ldhu	r2,12(r3)
    a384:	10801014 	ori	r2,r2,64
    a388:	1880030d 	sth	r2,12(r3)
    a38c:	8005883a 	mov	r2,r16
    a390:	00000106 	br	a398 <___vfiprintf_internal_r+0x3f4>
    a394:	00bfffc4 	movi	r2,-1
    a398:	dfc13517 	ldw	ra,1236(sp)
    a39c:	df013417 	ldw	fp,1232(sp)
    a3a0:	ddc13317 	ldw	r23,1228(sp)
    a3a4:	dd813217 	ldw	r22,1224(sp)
    a3a8:	dd413117 	ldw	r21,1220(sp)
    a3ac:	dd013017 	ldw	r20,1216(sp)
    a3b0:	dcc12f17 	ldw	r19,1212(sp)
    a3b4:	dc812e17 	ldw	r18,1208(sp)
    a3b8:	dc412d17 	ldw	r17,1204(sp)
    a3bc:	dc012c17 	ldw	r16,1200(sp)
    a3c0:	dec13604 	addi	sp,sp,1240
    a3c4:	f800283a 	ret
    a3c8:	00074a40 	call	74a4 <__sinit>
    a3cc:	003f0706 	br	9fec <__alt_data_end+0xfffb48bc>
    a3d0:	d8c12417 	ldw	r3,1168(sp)
    a3d4:	d8812315 	stw	r2,1164(sp)
    a3d8:	00c7c83a 	sub	r3,zero,r3
    a3dc:	d8c12415 	stw	r3,1168(sp)
    a3e0:	94800114 	ori	r18,r18,4
    a3e4:	b9800007 	ldb	r6,0(r23)
    a3e8:	003f4f06 	br	a128 <__alt_data_end+0xfffb49f8>
    a3ec:	94802014 	ori	r18,r18,128
    a3f0:	b9800007 	ldb	r6,0(r23)
    a3f4:	003f4c06 	br	a128 <__alt_data_end+0xfffb49f8>
    a3f8:	dc012615 	stw	r16,1176(sp)
    a3fc:	d8012415 	stw	zero,1168(sp)
    a400:	35bff404 	addi	r22,r6,-48
    a404:	0009883a 	mov	r4,zero
    a408:	b821883a 	mov	r16,r23
    a40c:	01400284 	movi	r5,10
    a410:	000cac00 	call	cac0 <__mulsi3>
    a414:	81800007 	ldb	r6,0(r16)
    a418:	1589883a 	add	r4,r2,r22
    a41c:	bdc00044 	addi	r23,r23,1
    a420:	35bff404 	addi	r22,r6,-48
    a424:	b821883a 	mov	r16,r23
    a428:	adbff82e 	bgeu	r21,r22,a40c <__alt_data_end+0xfffb4cdc>
    a42c:	d9012415 	stw	r4,1168(sp)
    a430:	dc012617 	ldw	r16,1176(sp)
    a434:	003f3d06 	br	a12c <__alt_data_end+0xfffb49fc>
    a438:	d8c12203 	ldbu	r3,1160(sp)
    a43c:	94800414 	ori	r18,r18,16
    a440:	9080080c 	andi	r2,r18,32
    a444:	d8c11d85 	stb	r3,1142(sp)
    a448:	9811883a 	mov	r8,r19
    a44c:	d8c12317 	ldw	r3,1164(sp)
    a450:	10018226 	beq	r2,zero,aa5c <___vfiprintf_internal_r+0xab8>
    a454:	d9012317 	ldw	r4,1164(sp)
    a458:	18800117 	ldw	r2,4(r3)
    a45c:	1cc00017 	ldw	r19,0(r3)
    a460:	21000204 	addi	r4,r4,8
    a464:	d9012315 	stw	r4,1164(sp)
    a468:	102b883a 	mov	r21,r2
    a46c:	10030016 	blt	r2,zero,b070 <___vfiprintf_internal_r+0x10cc>
    a470:	dd811d83 	ldbu	r22,1142(sp)
    a474:	8029883a 	mov	r20,r16
    a478:	00800044 	movi	r2,1
    a47c:	9d46b03a 	or	r3,r19,r21
    a480:	80000216 	blt	r16,zero,a48c <___vfiprintf_internal_r+0x4e8>
    a484:	013fdfc4 	movi	r4,-129
    a488:	9124703a 	and	r18,r18,r4
    a48c:	1801b41e 	bne	r3,zero,ab60 <___vfiprintf_internal_r+0xbbc>
    a490:	80028126 	beq	r16,zero,ae98 <___vfiprintf_internal_r+0xef4>
    a494:	10803fcc 	andi	r2,r2,255
    a498:	00c00044 	movi	r3,1
    a49c:	10c1d126 	beq	r2,r3,abe4 <___vfiprintf_internal_r+0xc40>
    a4a0:	00c00084 	movi	r3,2
    a4a4:	10c28626 	beq	r2,r3,aec0 <___vfiprintf_internal_r+0xf1c>
    a4a8:	d8c10a04 	addi	r3,sp,1064
    a4ac:	9808d0fa 	srli	r4,r19,3
    a4b0:	a80a977a 	slli	r5,r21,29
    a4b4:	a82ad0fa 	srli	r21,r21,3
    a4b8:	9cc001cc 	andi	r19,r19,7
    a4bc:	98800c04 	addi	r2,r19,48
    a4c0:	18ffffc4 	addi	r3,r3,-1
    a4c4:	2926b03a 	or	r19,r5,r4
    a4c8:	18800005 	stb	r2,0(r3)
    a4cc:	9d48b03a 	or	r4,r19,r21
    a4d0:	203ff61e 	bne	r4,zero,a4ac <__alt_data_end+0xfffb4d7c>
    a4d4:	9100004c 	andi	r4,r18,1
    a4d8:	d8c12215 	stw	r3,1160(sp)
    a4dc:	2002b31e 	bne	r4,zero,afac <___vfiprintf_internal_r+0x1008>
    a4e0:	d9411e17 	ldw	r5,1144(sp)
    a4e4:	28e9c83a 	sub	r20,r5,r3
    a4e8:	a02b883a 	mov	r21,r20
    a4ec:	a400010e 	bge	r20,r16,a4f4 <___vfiprintf_internal_r+0x550>
    a4f0:	802b883a 	mov	r21,r16
    a4f4:	b5803fcc 	andi	r22,r22,255
    a4f8:	b580201c 	xori	r22,r22,128
    a4fc:	b5bfe004 	addi	r22,r22,-128
    a500:	b0000126 	beq	r22,zero,a508 <___vfiprintf_internal_r+0x564>
    a504:	ad400044 	addi	r21,r21,1
    a508:	9280008c 	andi	r10,r18,2
    a50c:	50000126 	beq	r10,zero,a514 <___vfiprintf_internal_r+0x570>
    a510:	ad400084 	addi	r21,r21,2
    a514:	9580210c 	andi	r22,r18,132
    a518:	b001751e 	bne	r22,zero,aaf0 <___vfiprintf_internal_r+0xb4c>
    a51c:	d9012417 	ldw	r4,1168(sp)
    a520:	2567c83a 	sub	r19,r4,r21
    a524:	04c1720e 	bge	zero,r19,aaf0 <___vfiprintf_internal_r+0xb4c>
    a528:	01c00404 	movi	r7,16
    a52c:	d8c11c17 	ldw	r3,1136(sp)
    a530:	3cc36b0e 	bge	r7,r19,b2e0 <___vfiprintf_internal_r+0x133c>
    a534:	00800074 	movhi	r2,1
    a538:	10892b04 	addi	r2,r2,9388
    a53c:	dc012915 	stw	r16,1188(sp)
    a540:	d9011b17 	ldw	r4,1132(sp)
    a544:	9821883a 	mov	r16,r19
    a548:	d8812615 	stw	r2,1176(sp)
    a54c:	030001c4 	movi	r12,7
    a550:	5027883a 	mov	r19,r10
    a554:	00000506 	br	a56c <___vfiprintf_internal_r+0x5c8>
    a558:	21400084 	addi	r5,r4,2
    a55c:	42000204 	addi	r8,r8,8
    a560:	1009883a 	mov	r4,r2
    a564:	843ffc04 	addi	r16,r16,-16
    a568:	3c000d0e 	bge	r7,r16,a5a0 <___vfiprintf_internal_r+0x5fc>
    a56c:	18c00404 	addi	r3,r3,16
    a570:	20800044 	addi	r2,r4,1
    a574:	47000015 	stw	fp,0(r8)
    a578:	41c00115 	stw	r7,4(r8)
    a57c:	d8c11c15 	stw	r3,1136(sp)
    a580:	d8811b15 	stw	r2,1132(sp)
    a584:	60bff40e 	bge	r12,r2,a558 <__alt_data_end+0xfffb4e28>
    a588:	18014b1e 	bne	r3,zero,aab8 <___vfiprintf_internal_r+0xb14>
    a58c:	843ffc04 	addi	r16,r16,-16
    a590:	0009883a 	mov	r4,zero
    a594:	01400044 	movi	r5,1
    a598:	d811883a 	mov	r8,sp
    a59c:	3c3ff316 	blt	r7,r16,a56c <__alt_data_end+0xfffb4e3c>
    a5a0:	9815883a 	mov	r10,r19
    a5a4:	8027883a 	mov	r19,r16
    a5a8:	dc012917 	ldw	r16,1188(sp)
    a5ac:	d9012617 	ldw	r4,1176(sp)
    a5b0:	98c7883a 	add	r3,r19,r3
    a5b4:	44c00115 	stw	r19,4(r8)
    a5b8:	41000015 	stw	r4,0(r8)
    a5bc:	d8c11c15 	stw	r3,1136(sp)
    a5c0:	d9411b15 	stw	r5,1132(sp)
    a5c4:	008001c4 	movi	r2,7
    a5c8:	11425116 	blt	r2,r5,af10 <___vfiprintf_internal_r+0xf6c>
    a5cc:	d9011d87 	ldb	r4,1142(sp)
    a5d0:	42000204 	addi	r8,r8,8
    a5d4:	28800044 	addi	r2,r5,1
    a5d8:	20014a1e 	bne	r4,zero,ab04 <___vfiprintf_internal_r+0xb60>
    a5dc:	50000c26 	beq	r10,zero,a610 <___vfiprintf_internal_r+0x66c>
    a5e0:	d9011d04 	addi	r4,sp,1140
    a5e4:	18c00084 	addi	r3,r3,2
    a5e8:	41000015 	stw	r4,0(r8)
    a5ec:	01000084 	movi	r4,2
    a5f0:	41000115 	stw	r4,4(r8)
    a5f4:	d8c11c15 	stw	r3,1136(sp)
    a5f8:	d8811b15 	stw	r2,1132(sp)
    a5fc:	010001c4 	movi	r4,7
    a600:	20822016 	blt	r4,r2,ae84 <___vfiprintf_internal_r+0xee0>
    a604:	100b883a 	mov	r5,r2
    a608:	42000204 	addi	r8,r8,8
    a60c:	10800044 	addi	r2,r2,1
    a610:	01002004 	movi	r4,128
    a614:	b101de26 	beq	r22,r4,ad90 <___vfiprintf_internal_r+0xdec>
    a618:	8521c83a 	sub	r16,r16,r20
    a61c:	0400230e 	bge	zero,r16,a6ac <___vfiprintf_internal_r+0x708>
    a620:	04c00404 	movi	r19,16
    a624:	9c030d0e 	bge	r19,r16,b25c <___vfiprintf_internal_r+0x12b8>
    a628:	00800074 	movhi	r2,1
    a62c:	10892704 	addi	r2,r2,9372
    a630:	d8812615 	stw	r2,1176(sp)
    a634:	058001c4 	movi	r22,7
    a638:	00000506 	br	a650 <___vfiprintf_internal_r+0x6ac>
    a63c:	28800084 	addi	r2,r5,2
    a640:	42000204 	addi	r8,r8,8
    a644:	200b883a 	mov	r5,r4
    a648:	843ffc04 	addi	r16,r16,-16
    a64c:	9c000d0e 	bge	r19,r16,a684 <___vfiprintf_internal_r+0x6e0>
    a650:	18c00404 	addi	r3,r3,16
    a654:	29000044 	addi	r4,r5,1
    a658:	44400015 	stw	r17,0(r8)
    a65c:	44c00115 	stw	r19,4(r8)
    a660:	d8c11c15 	stw	r3,1136(sp)
    a664:	d9011b15 	stw	r4,1132(sp)
    a668:	b13ff40e 	bge	r22,r4,a63c <__alt_data_end+0xfffb4f0c>
    a66c:	1801321e 	bne	r3,zero,ab38 <___vfiprintf_internal_r+0xb94>
    a670:	843ffc04 	addi	r16,r16,-16
    a674:	000b883a 	mov	r5,zero
    a678:	00800044 	movi	r2,1
    a67c:	d811883a 	mov	r8,sp
    a680:	9c3ff316 	blt	r19,r16,a650 <__alt_data_end+0xfffb4f20>
    a684:	d9012617 	ldw	r4,1176(sp)
    a688:	1c07883a 	add	r3,r3,r16
    a68c:	44000115 	stw	r16,4(r8)
    a690:	41000015 	stw	r4,0(r8)
    a694:	d8c11c15 	stw	r3,1136(sp)
    a698:	d8811b15 	stw	r2,1132(sp)
    a69c:	010001c4 	movi	r4,7
    a6a0:	20816216 	blt	r4,r2,ac2c <___vfiprintf_internal_r+0xc88>
    a6a4:	42000204 	addi	r8,r8,8
    a6a8:	10800044 	addi	r2,r2,1
    a6ac:	d9012217 	ldw	r4,1160(sp)
    a6b0:	1d07883a 	add	r3,r3,r20
    a6b4:	45000115 	stw	r20,4(r8)
    a6b8:	41000015 	stw	r4,0(r8)
    a6bc:	d8c11c15 	stw	r3,1136(sp)
    a6c0:	d8811b15 	stw	r2,1132(sp)
    a6c4:	010001c4 	movi	r4,7
    a6c8:	2081610e 	bge	r4,r2,ac50 <___vfiprintf_internal_r+0xcac>
    a6cc:	1802211e 	bne	r3,zero,af54 <___vfiprintf_internal_r+0xfb0>
    a6d0:	d8011b15 	stw	zero,1132(sp)
    a6d4:	9480010c 	andi	r18,r18,4
    a6d8:	9002171e 	bne	r18,zero,af38 <___vfiprintf_internal_r+0xf94>
    a6dc:	d9412417 	ldw	r5,1168(sp)
    a6e0:	a9433716 	blt	r21,r5,b3c0 <___vfiprintf_internal_r+0x141c>
    a6e4:	d8812517 	ldw	r2,1172(sp)
    a6e8:	1545883a 	add	r2,r2,r21
    a6ec:	d8812515 	stw	r2,1172(sp)
    a6f0:	00019a06 	br	ad5c <___vfiprintf_internal_r+0xdb8>
    a6f4:	d8c12317 	ldw	r3,1164(sp)
    a6f8:	05400044 	movi	r21,1
    a6fc:	9811883a 	mov	r8,r19
    a700:	18800017 	ldw	r2,0(r3)
    a704:	18c00104 	addi	r3,r3,4
    a708:	d8c12315 	stw	r3,1164(sp)
    a70c:	d8c10004 	addi	r3,sp,1024
    a710:	d8011d85 	stb	zero,1142(sp)
    a714:	d8810005 	stb	r2,1024(sp)
    a718:	a829883a 	mov	r20,r21
    a71c:	d8c12215 	stw	r3,1160(sp)
    a720:	0021883a 	mov	r16,zero
    a724:	003f7806 	br	a508 <__alt_data_end+0xfffb4dd8>
    a728:	94800414 	ori	r18,r18,16
    a72c:	9080080c 	andi	r2,r18,32
    a730:	9811883a 	mov	r8,r19
    a734:	10009026 	beq	r2,zero,a978 <___vfiprintf_internal_r+0x9d4>
    a738:	d8812317 	ldw	r2,1164(sp)
    a73c:	d8c12317 	ldw	r3,1164(sp)
    a740:	14c00017 	ldw	r19,0(r2)
    a744:	15400117 	ldw	r21,4(r2)
    a748:	18c00204 	addi	r3,r3,8
    a74c:	d8c12315 	stw	r3,1164(sp)
    a750:	0005883a 	mov	r2,zero
    a754:	9d46b03a 	or	r3,r19,r21
    a758:	d8011d85 	stb	zero,1142(sp)
    a75c:	8029883a 	mov	r20,r16
    a760:	002d883a 	mov	r22,zero
    a764:	003f4606 	br	a480 <__alt_data_end+0xfffb4d50>
    a768:	94800414 	ori	r18,r18,16
    a76c:	9080080c 	andi	r2,r18,32
    a770:	9811883a 	mov	r8,r19
    a774:	10006226 	beq	r2,zero,a900 <___vfiprintf_internal_r+0x95c>
    a778:	d9012317 	ldw	r4,1164(sp)
    a77c:	00800044 	movi	r2,1
    a780:	24c00017 	ldw	r19,0(r4)
    a784:	25400117 	ldw	r21,4(r4)
    a788:	21000204 	addi	r4,r4,8
    a78c:	d9012315 	stw	r4,1164(sp)
    a790:	9d46b03a 	or	r3,r19,r21
    a794:	003ff006 	br	a758 <__alt_data_end+0xfffb5028>
    a798:	b9800007 	ldb	r6,0(r23)
    a79c:	00801b04 	movi	r2,108
    a7a0:	3082b226 	beq	r6,r2,b26c <___vfiprintf_internal_r+0x12c8>
    a7a4:	94800414 	ori	r18,r18,16
    a7a8:	003e5f06 	br	a128 <__alt_data_end+0xfffb49f8>
    a7ac:	d8c12203 	ldbu	r3,1160(sp)
    a7b0:	01000074 	movhi	r4,1
    a7b4:	2108c104 	addi	r4,r4,8964
    a7b8:	d8c11d85 	stb	r3,1142(sp)
    a7bc:	d9012715 	stw	r4,1180(sp)
    a7c0:	90c0080c 	andi	r3,r18,32
    a7c4:	9811883a 	mov	r8,r19
    a7c8:	d8812317 	ldw	r2,1164(sp)
    a7cc:	18005f26 	beq	r3,zero,a94c <___vfiprintf_internal_r+0x9a8>
    a7d0:	d9012317 	ldw	r4,1164(sp)
    a7d4:	14c00017 	ldw	r19,0(r2)
    a7d8:	15400117 	ldw	r21,4(r2)
    a7dc:	21000204 	addi	r4,r4,8
    a7e0:	d9012315 	stw	r4,1164(sp)
    a7e4:	9080004c 	andi	r2,r18,1
    a7e8:	1001e226 	beq	r2,zero,af74 <___vfiprintf_internal_r+0xfd0>
    a7ec:	9d46b03a 	or	r3,r19,r21
    a7f0:	18024e26 	beq	r3,zero,b12c <___vfiprintf_internal_r+0x1188>
    a7f4:	00800c04 	movi	r2,48
    a7f8:	d8811d05 	stb	r2,1140(sp)
    a7fc:	d9811d45 	stb	r6,1141(sp)
    a800:	94800094 	ori	r18,r18,2
    a804:	00800084 	movi	r2,2
    a808:	003fd306 	br	a758 <__alt_data_end+0xfffb5028>
    a80c:	d9012317 	ldw	r4,1164(sp)
    a810:	d9412317 	ldw	r5,1164(sp)
    a814:	21000017 	ldw	r4,0(r4)
    a818:	28800104 	addi	r2,r5,4
    a81c:	d9012415 	stw	r4,1168(sp)
    a820:	203eeb16 	blt	r4,zero,a3d0 <__alt_data_end+0xfffb4ca0>
    a824:	d8812315 	stw	r2,1164(sp)
    a828:	b9800007 	ldb	r6,0(r23)
    a82c:	003e3e06 	br	a128 <__alt_data_end+0xfffb49f8>
    a830:	b9800007 	ldb	r6,0(r23)
    a834:	01000a84 	movi	r4,42
    a838:	b8800044 	addi	r2,r23,1
    a83c:	3102d226 	beq	r6,r4,b388 <___vfiprintf_internal_r+0x13e4>
    a840:	35bff404 	addi	r22,r6,-48
    a844:	102f883a 	mov	r23,r2
    a848:	0021883a 	mov	r16,zero
    a84c:	adbe3736 	bltu	r21,r22,a12c <__alt_data_end+0xfffb49fc>
    a850:	0009883a 	mov	r4,zero
    a854:	01400284 	movi	r5,10
    a858:	000cac00 	call	cac0 <__mulsi3>
    a85c:	b9800007 	ldb	r6,0(r23)
    a860:	b089883a 	add	r4,r22,r2
    a864:	bdc00044 	addi	r23,r23,1
    a868:	35bff404 	addi	r22,r6,-48
    a86c:	adbff92e 	bgeu	r21,r22,a854 <__alt_data_end+0xfffb5124>
    a870:	2021883a 	mov	r16,r4
    a874:	203e2d0e 	bge	r4,zero,a12c <__alt_data_end+0xfffb49fc>
    a878:	043fffc4 	movi	r16,-1
    a87c:	003e2b06 	br	a12c <__alt_data_end+0xfffb49fc>
    a880:	94801014 	ori	r18,r18,64
    a884:	b9800007 	ldb	r6,0(r23)
    a888:	003e2706 	br	a128 <__alt_data_end+0xfffb49f8>
    a88c:	94800814 	ori	r18,r18,32
    a890:	b9800007 	ldb	r6,0(r23)
    a894:	003e2406 	br	a128 <__alt_data_end+0xfffb49f8>
    a898:	d9412317 	ldw	r5,1164(sp)
    a89c:	d8812317 	ldw	r2,1164(sp)
    a8a0:	d8011d85 	stb	zero,1142(sp)
    a8a4:	29400017 	ldw	r5,0(r5)
    a8a8:	9811883a 	mov	r8,r19
    a8ac:	14c00104 	addi	r19,r2,4
    a8b0:	d9412215 	stw	r5,1160(sp)
    a8b4:	28029026 	beq	r5,zero,b2f8 <___vfiprintf_internal_r+0x1354>
    a8b8:	d9012217 	ldw	r4,1160(sp)
    a8bc:	80027616 	blt	r16,zero,b298 <___vfiprintf_internal_r+0x12f4>
    a8c0:	000b883a 	mov	r5,zero
    a8c4:	800d883a 	mov	r6,r16
    a8c8:	da012a15 	stw	r8,1192(sp)
    a8cc:	00081b40 	call	81b4 <memchr>
    a8d0:	da012a17 	ldw	r8,1192(sp)
    a8d4:	1002a026 	beq	r2,zero,b358 <___vfiprintf_internal_r+0x13b4>
    a8d8:	d8c12217 	ldw	r3,1160(sp)
    a8dc:	10e9c83a 	sub	r20,r2,r3
    a8e0:	85023816 	blt	r16,r20,b1c4 <___vfiprintf_internal_r+0x1220>
    a8e4:	dd811d83 	ldbu	r22,1142(sp)
    a8e8:	dcc12315 	stw	r19,1164(sp)
    a8ec:	0021883a 	mov	r16,zero
    a8f0:	003efd06 	br	a4e8 <__alt_data_end+0xfffb4db8>
    a8f4:	9080080c 	andi	r2,r18,32
    a8f8:	9811883a 	mov	r8,r19
    a8fc:	103f9e1e 	bne	r2,zero,a778 <__alt_data_end+0xfffb5048>
    a900:	9080040c 	andi	r2,r18,16
    a904:	10021726 	beq	r2,zero,b164 <___vfiprintf_internal_r+0x11c0>
    a908:	d9412317 	ldw	r5,1164(sp)
    a90c:	002b883a 	mov	r21,zero
    a910:	00800044 	movi	r2,1
    a914:	2cc00017 	ldw	r19,0(r5)
    a918:	29400104 	addi	r5,r5,4
    a91c:	d9412315 	stw	r5,1164(sp)
    a920:	9807883a 	mov	r3,r19
    a924:	003f8c06 	br	a758 <__alt_data_end+0xfffb5028>
    a928:	d8c12203 	ldbu	r3,1160(sp)
    a92c:	01000074 	movhi	r4,1
    a930:	2108c604 	addi	r4,r4,8984
    a934:	d8c11d85 	stb	r3,1142(sp)
    a938:	d9012715 	stw	r4,1180(sp)
    a93c:	90c0080c 	andi	r3,r18,32
    a940:	9811883a 	mov	r8,r19
    a944:	d8812317 	ldw	r2,1164(sp)
    a948:	183fa11e 	bne	r3,zero,a7d0 <__alt_data_end+0xfffb50a0>
    a94c:	90c0040c 	andi	r3,r18,16
    a950:	1801e526 	beq	r3,zero,b0e8 <___vfiprintf_internal_r+0x1144>
    a954:	d9412317 	ldw	r5,1164(sp)
    a958:	14c00017 	ldw	r19,0(r2)
    a95c:	002b883a 	mov	r21,zero
    a960:	29400104 	addi	r5,r5,4
    a964:	d9412315 	stw	r5,1164(sp)
    a968:	003f9e06 	br	a7e4 <__alt_data_end+0xfffb50b4>
    a96c:	9080080c 	andi	r2,r18,32
    a970:	9811883a 	mov	r8,r19
    a974:	103f701e 	bne	r2,zero,a738 <__alt_data_end+0xfffb5008>
    a978:	9080040c 	andi	r2,r18,16
    a97c:	1001ef26 	beq	r2,zero,b13c <___vfiprintf_internal_r+0x1198>
    a980:	d9012317 	ldw	r4,1164(sp)
    a984:	002b883a 	mov	r21,zero
    a988:	0005883a 	mov	r2,zero
    a98c:	24c00017 	ldw	r19,0(r4)
    a990:	21000104 	addi	r4,r4,4
    a994:	d9012315 	stw	r4,1164(sp)
    a998:	9807883a 	mov	r3,r19
    a99c:	003f6e06 	br	a758 <__alt_data_end+0xfffb5028>
    a9a0:	d8c12317 	ldw	r3,1164(sp)
    a9a4:	9811883a 	mov	r8,r19
    a9a8:	00800c04 	movi	r2,48
    a9ac:	1cc00017 	ldw	r19,0(r3)
    a9b0:	01000074 	movhi	r4,1
    a9b4:	18c00104 	addi	r3,r3,4
    a9b8:	d8811d05 	stb	r2,1140(sp)
    a9bc:	2108c604 	addi	r4,r4,8984
    a9c0:	00801e04 	movi	r2,120
    a9c4:	d8811d45 	stb	r2,1141(sp)
    a9c8:	d8c12315 	stw	r3,1164(sp)
    a9cc:	002b883a 	mov	r21,zero
    a9d0:	94800094 	ori	r18,r18,2
    a9d4:	d9012715 	stw	r4,1180(sp)
    a9d8:	00800084 	movi	r2,2
    a9dc:	9807883a 	mov	r3,r19
    a9e0:	003f5d06 	br	a758 <__alt_data_end+0xfffb5028>
    a9e4:	d8c12203 	ldbu	r3,1160(sp)
    a9e8:	9080080c 	andi	r2,r18,32
    a9ec:	9811883a 	mov	r8,r19
    a9f0:	d8c11d85 	stb	r3,1142(sp)
    a9f4:	1001b126 	beq	r2,zero,b0bc <___vfiprintf_internal_r+0x1118>
    a9f8:	d9012317 	ldw	r4,1164(sp)
    a9fc:	d9412517 	ldw	r5,1172(sp)
    aa00:	20800017 	ldw	r2,0(r4)
    aa04:	2807d7fa 	srai	r3,r5,31
    aa08:	21000104 	addi	r4,r4,4
    aa0c:	d9012315 	stw	r4,1164(sp)
    aa10:	11400015 	stw	r5,0(r2)
    aa14:	10c00115 	stw	r3,4(r2)
    aa18:	003d9a06 	br	a084 <__alt_data_end+0xfffb4954>
    aa1c:	d8812207 	ldb	r2,1160(sp)
    aa20:	1001c41e 	bne	r2,zero,b134 <___vfiprintf_internal_r+0x1190>
    aa24:	00c00804 	movi	r3,32
    aa28:	d8c12205 	stb	r3,1160(sp)
    aa2c:	b9800007 	ldb	r6,0(r23)
    aa30:	003dbd06 	br	a128 <__alt_data_end+0xfffb49f8>
    aa34:	00c00ac4 	movi	r3,43
    aa38:	d8c12205 	stb	r3,1160(sp)
    aa3c:	b9800007 	ldb	r6,0(r23)
    aa40:	003db906 	br	a128 <__alt_data_end+0xfffb49f8>
    aa44:	d8c12203 	ldbu	r3,1160(sp)
    aa48:	9080080c 	andi	r2,r18,32
    aa4c:	9811883a 	mov	r8,r19
    aa50:	d8c11d85 	stb	r3,1142(sp)
    aa54:	d8c12317 	ldw	r3,1164(sp)
    aa58:	103e7e1e 	bne	r2,zero,a454 <__alt_data_end+0xfffb4d24>
    aa5c:	9080040c 	andi	r2,r18,16
    aa60:	1001a926 	beq	r2,zero,b108 <___vfiprintf_internal_r+0x1164>
    aa64:	1cc00017 	ldw	r19,0(r3)
    aa68:	d9412317 	ldw	r5,1164(sp)
    aa6c:	982bd7fa 	srai	r21,r19,31
    aa70:	29400104 	addi	r5,r5,4
    aa74:	d9412315 	stw	r5,1164(sp)
    aa78:	a805883a 	mov	r2,r21
    aa7c:	003e7b06 	br	a46c <__alt_data_end+0xfffb4d3c>
    aa80:	94800054 	ori	r18,r18,1
    aa84:	b9800007 	ldb	r6,0(r23)
    aa88:	003da706 	br	a128 <__alt_data_end+0xfffb49f8>
    aa8c:	d8c12203 	ldbu	r3,1160(sp)
    aa90:	9811883a 	mov	r8,r19
    aa94:	d8c11d85 	stb	r3,1142(sp)
    aa98:	30005826 	beq	r6,zero,abfc <___vfiprintf_internal_r+0xc58>
    aa9c:	05400044 	movi	r21,1
    aaa0:	d8c10004 	addi	r3,sp,1024
    aaa4:	d9810005 	stb	r6,1024(sp)
    aaa8:	d8011d85 	stb	zero,1142(sp)
    aaac:	a829883a 	mov	r20,r21
    aab0:	d8c12215 	stw	r3,1160(sp)
    aab4:	003f1a06 	br	a720 <__alt_data_end+0xfffb4ff0>
    aab8:	d9012117 	ldw	r4,1156(sp)
    aabc:	d9412017 	ldw	r5,1152(sp)
    aac0:	d9811a04 	addi	r6,sp,1128
    aac4:	d9c12a15 	stw	r7,1192(sp)
    aac8:	db012b15 	stw	r12,1196(sp)
    aacc:	0009e900 	call	9e90 <__sprint_r.part.0>
    aad0:	d9c12a17 	ldw	r7,1192(sp)
    aad4:	db012b17 	ldw	r12,1196(sp)
    aad8:	10004e1e 	bne	r2,zero,ac14 <___vfiprintf_internal_r+0xc70>
    aadc:	d9011b17 	ldw	r4,1132(sp)
    aae0:	d8c11c17 	ldw	r3,1136(sp)
    aae4:	d811883a 	mov	r8,sp
    aae8:	21400044 	addi	r5,r4,1
    aaec:	003e9d06 	br	a564 <__alt_data_end+0xfffb4e34>
    aaf0:	d9411b17 	ldw	r5,1132(sp)
    aaf4:	d8c11c17 	ldw	r3,1136(sp)
    aaf8:	28800044 	addi	r2,r5,1
    aafc:	d9011d87 	ldb	r4,1142(sp)
    ab00:	203eb626 	beq	r4,zero,a5dc <__alt_data_end+0xfffb4eac>
    ab04:	01000044 	movi	r4,1
    ab08:	d9411d84 	addi	r5,sp,1142
    ab0c:	1907883a 	add	r3,r3,r4
    ab10:	41400015 	stw	r5,0(r8)
    ab14:	41000115 	stw	r4,4(r8)
    ab18:	d8c11c15 	stw	r3,1136(sp)
    ab1c:	d8811b15 	stw	r2,1132(sp)
    ab20:	014001c4 	movi	r5,7
    ab24:	2880ce16 	blt	r5,r2,ae60 <___vfiprintf_internal_r+0xebc>
    ab28:	100b883a 	mov	r5,r2
    ab2c:	42000204 	addi	r8,r8,8
    ab30:	10800044 	addi	r2,r2,1
    ab34:	003ea906 	br	a5dc <__alt_data_end+0xfffb4eac>
    ab38:	d9012117 	ldw	r4,1156(sp)
    ab3c:	d9412017 	ldw	r5,1152(sp)
    ab40:	d9811a04 	addi	r6,sp,1128
    ab44:	0009e900 	call	9e90 <__sprint_r.part.0>
    ab48:	1000321e 	bne	r2,zero,ac14 <___vfiprintf_internal_r+0xc70>
    ab4c:	d9411b17 	ldw	r5,1132(sp)
    ab50:	d8c11c17 	ldw	r3,1136(sp)
    ab54:	d811883a 	mov	r8,sp
    ab58:	28800044 	addi	r2,r5,1
    ab5c:	003eba06 	br	a648 <__alt_data_end+0xfffb4f18>
    ab60:	10803fcc 	andi	r2,r2,255
    ab64:	00c00044 	movi	r3,1
    ab68:	10fe4d1e 	bne	r2,r3,a4a0 <__alt_data_end+0xfffb4d70>
    ab6c:	a800021e 	bne	r21,zero,ab78 <___vfiprintf_internal_r+0xbd4>
    ab70:	00800244 	movi	r2,9
    ab74:	14c01b2e 	bgeu	r2,r19,abe4 <___vfiprintf_internal_r+0xc40>
    ab78:	dc012215 	stw	r16,1160(sp)
    ab7c:	dd010a04 	addi	r20,sp,1064
    ab80:	a821883a 	mov	r16,r21
    ab84:	402b883a 	mov	r21,r8
    ab88:	9809883a 	mov	r4,r19
    ab8c:	800b883a 	mov	r5,r16
    ab90:	01800284 	movi	r6,10
    ab94:	000f883a 	mov	r7,zero
    ab98:	000c3780 	call	c378 <__umoddi3>
    ab9c:	10800c04 	addi	r2,r2,48
    aba0:	a53fffc4 	addi	r20,r20,-1
    aba4:	9809883a 	mov	r4,r19
    aba8:	800b883a 	mov	r5,r16
    abac:	01800284 	movi	r6,10
    abb0:	000f883a 	mov	r7,zero
    abb4:	a0800005 	stb	r2,0(r20)
    abb8:	000bd380 	call	bd38 <__udivdi3>
    abbc:	1027883a 	mov	r19,r2
    abc0:	10c4b03a 	or	r2,r2,r3
    abc4:	1821883a 	mov	r16,r3
    abc8:	103fef1e 	bne	r2,zero,ab88 <__alt_data_end+0xfffb5458>
    abcc:	d9011e17 	ldw	r4,1144(sp)
    abd0:	dc012217 	ldw	r16,1160(sp)
    abd4:	a811883a 	mov	r8,r21
    abd8:	dd012215 	stw	r20,1160(sp)
    abdc:	2529c83a 	sub	r20,r4,r20
    abe0:	003e4106 	br	a4e8 <__alt_data_end+0xfffb4db8>
    abe4:	9cc00c04 	addi	r19,r19,48
    abe8:	d8c109c4 	addi	r3,sp,1063
    abec:	dcc109c5 	stb	r19,1063(sp)
    abf0:	dd012817 	ldw	r20,1184(sp)
    abf4:	d8c12215 	stw	r3,1160(sp)
    abf8:	003e3b06 	br	a4e8 <__alt_data_end+0xfffb4db8>
    abfc:	d8811c17 	ldw	r2,1136(sp)
    ac00:	10000426 	beq	r2,zero,ac14 <___vfiprintf_internal_r+0xc70>
    ac04:	d9012117 	ldw	r4,1156(sp)
    ac08:	d9412017 	ldw	r5,1152(sp)
    ac0c:	d9811a04 	addi	r6,sp,1128
    ac10:	0009e900 	call	9e90 <__sprint_r.part.0>
    ac14:	d9412017 	ldw	r5,1152(sp)
    ac18:	2880030b 	ldhu	r2,12(r5)
    ac1c:	1080100c 	andi	r2,r2,64
    ac20:	103ddc1e 	bne	r2,zero,a394 <__alt_data_end+0xfffb4c64>
    ac24:	d8812517 	ldw	r2,1172(sp)
    ac28:	003ddb06 	br	a398 <__alt_data_end+0xfffb4c68>
    ac2c:	1801061e 	bne	r3,zero,b048 <___vfiprintf_internal_r+0x10a4>
    ac30:	d8c12217 	ldw	r3,1160(sp)
    ac34:	00800044 	movi	r2,1
    ac38:	dd000115 	stw	r20,4(sp)
    ac3c:	d8c00015 	stw	r3,0(sp)
    ac40:	dd011c15 	stw	r20,1136(sp)
    ac44:	d8811b15 	stw	r2,1132(sp)
    ac48:	a007883a 	mov	r3,r20
    ac4c:	d811883a 	mov	r8,sp
    ac50:	42000204 	addi	r8,r8,8
    ac54:	9480010c 	andi	r18,r18,4
    ac58:	90003426 	beq	r18,zero,ad2c <___vfiprintf_internal_r+0xd88>
    ac5c:	d9412417 	ldw	r5,1168(sp)
    ac60:	2d65c83a 	sub	r18,r5,r21
    ac64:	0480310e 	bge	zero,r18,ad2c <___vfiprintf_internal_r+0xd88>
    ac68:	04000404 	movi	r16,16
    ac6c:	8481ad0e 	bge	r16,r18,b324 <___vfiprintf_internal_r+0x1380>
    ac70:	01400074 	movhi	r5,1
    ac74:	29492b04 	addi	r5,r5,9388
    ac78:	d9011b17 	ldw	r4,1132(sp)
    ac7c:	d9412615 	stw	r5,1176(sp)
    ac80:	04c001c4 	movi	r19,7
    ac84:	dd012117 	ldw	r20,1156(sp)
    ac88:	dd812017 	ldw	r22,1152(sp)
    ac8c:	00000506 	br	aca4 <___vfiprintf_internal_r+0xd00>
    ac90:	21400084 	addi	r5,r4,2
    ac94:	42000204 	addi	r8,r8,8
    ac98:	1009883a 	mov	r4,r2
    ac9c:	94bffc04 	addi	r18,r18,-16
    aca0:	84800d0e 	bge	r16,r18,acd8 <___vfiprintf_internal_r+0xd34>
    aca4:	18c00404 	addi	r3,r3,16
    aca8:	20800044 	addi	r2,r4,1
    acac:	47000015 	stw	fp,0(r8)
    acb0:	44000115 	stw	r16,4(r8)
    acb4:	d8c11c15 	stw	r3,1136(sp)
    acb8:	d8811b15 	stw	r2,1132(sp)
    acbc:	98bff40e 	bge	r19,r2,ac90 <__alt_data_end+0xfffb5560>
    acc0:	1800291e 	bne	r3,zero,ad68 <___vfiprintf_internal_r+0xdc4>
    acc4:	94bffc04 	addi	r18,r18,-16
    acc8:	0009883a 	mov	r4,zero
    accc:	01400044 	movi	r5,1
    acd0:	d811883a 	mov	r8,sp
    acd4:	84bff316 	blt	r16,r18,aca4 <__alt_data_end+0xfffb5574>
    acd8:	d8812617 	ldw	r2,1176(sp)
    acdc:	1c87883a 	add	r3,r3,r18
    ace0:	44800115 	stw	r18,4(r8)
    ace4:	40800015 	stw	r2,0(r8)
    ace8:	d8c11c15 	stw	r3,1136(sp)
    acec:	d9411b15 	stw	r5,1132(sp)
    acf0:	008001c4 	movi	r2,7
    acf4:	11400d0e 	bge	r2,r5,ad2c <___vfiprintf_internal_r+0xd88>
    acf8:	1800061e 	bne	r3,zero,ad14 <___vfiprintf_internal_r+0xd70>
    acfc:	d8c12417 	ldw	r3,1168(sp)
    ad00:	a8c12e16 	blt	r21,r3,b1bc <___vfiprintf_internal_r+0x1218>
    ad04:	d9012517 	ldw	r4,1172(sp)
    ad08:	2549883a 	add	r4,r4,r21
    ad0c:	d9012515 	stw	r4,1172(sp)
    ad10:	00001206 	br	ad5c <___vfiprintf_internal_r+0xdb8>
    ad14:	d9012117 	ldw	r4,1156(sp)
    ad18:	d9412017 	ldw	r5,1152(sp)
    ad1c:	d9811a04 	addi	r6,sp,1128
    ad20:	0009e900 	call	9e90 <__sprint_r.part.0>
    ad24:	103fbb1e 	bne	r2,zero,ac14 <__alt_data_end+0xfffb54e4>
    ad28:	d8c11c17 	ldw	r3,1136(sp)
    ad2c:	d8812417 	ldw	r2,1168(sp)
    ad30:	a880010e 	bge	r21,r2,ad38 <___vfiprintf_internal_r+0xd94>
    ad34:	102b883a 	mov	r21,r2
    ad38:	d9012517 	ldw	r4,1172(sp)
    ad3c:	2549883a 	add	r4,r4,r21
    ad40:	d9012515 	stw	r4,1172(sp)
    ad44:	18000526 	beq	r3,zero,ad5c <___vfiprintf_internal_r+0xdb8>
    ad48:	d9012117 	ldw	r4,1156(sp)
    ad4c:	d9412017 	ldw	r5,1152(sp)
    ad50:	d9811a04 	addi	r6,sp,1128
    ad54:	0009e900 	call	9e90 <__sprint_r.part.0>
    ad58:	103fae1e 	bne	r2,zero,ac14 <__alt_data_end+0xfffb54e4>
    ad5c:	d8011b15 	stw	zero,1132(sp)
    ad60:	d811883a 	mov	r8,sp
    ad64:	003cc706 	br	a084 <__alt_data_end+0xfffb4954>
    ad68:	a009883a 	mov	r4,r20
    ad6c:	b00b883a 	mov	r5,r22
    ad70:	d9811a04 	addi	r6,sp,1128
    ad74:	0009e900 	call	9e90 <__sprint_r.part.0>
    ad78:	103fa61e 	bne	r2,zero,ac14 <__alt_data_end+0xfffb54e4>
    ad7c:	d9011b17 	ldw	r4,1132(sp)
    ad80:	d8c11c17 	ldw	r3,1136(sp)
    ad84:	d811883a 	mov	r8,sp
    ad88:	21400044 	addi	r5,r4,1
    ad8c:	003fc306 	br	ac9c <__alt_data_end+0xfffb556c>
    ad90:	d9012417 	ldw	r4,1168(sp)
    ad94:	256dc83a 	sub	r22,r4,r21
    ad98:	05be1f0e 	bge	zero,r22,a618 <__alt_data_end+0xfffb4ee8>
    ad9c:	04c00404 	movi	r19,16
    ada0:	9d81720e 	bge	r19,r22,b36c <___vfiprintf_internal_r+0x13c8>
    ada4:	00800074 	movhi	r2,1
    ada8:	10892704 	addi	r2,r2,9372
    adac:	d8812615 	stw	r2,1176(sp)
    adb0:	028001c4 	movi	r10,7
    adb4:	00000506 	br	adcc <___vfiprintf_internal_r+0xe28>
    adb8:	29000084 	addi	r4,r5,2
    adbc:	42000204 	addi	r8,r8,8
    adc0:	100b883a 	mov	r5,r2
    adc4:	b5bffc04 	addi	r22,r22,-16
    adc8:	9d800d0e 	bge	r19,r22,ae00 <___vfiprintf_internal_r+0xe5c>
    adcc:	18c00404 	addi	r3,r3,16
    add0:	28800044 	addi	r2,r5,1
    add4:	44400015 	stw	r17,0(r8)
    add8:	44c00115 	stw	r19,4(r8)
    addc:	d8c11c15 	stw	r3,1136(sp)
    ade0:	d8811b15 	stw	r2,1132(sp)
    ade4:	50bff40e 	bge	r10,r2,adb8 <__alt_data_end+0xfffb5688>
    ade8:	1800111e 	bne	r3,zero,ae30 <___vfiprintf_internal_r+0xe8c>
    adec:	b5bffc04 	addi	r22,r22,-16
    adf0:	000b883a 	mov	r5,zero
    adf4:	01000044 	movi	r4,1
    adf8:	d811883a 	mov	r8,sp
    adfc:	9dbff316 	blt	r19,r22,adcc <__alt_data_end+0xfffb569c>
    ae00:	d9412617 	ldw	r5,1176(sp)
    ae04:	1d87883a 	add	r3,r3,r22
    ae08:	45800115 	stw	r22,4(r8)
    ae0c:	41400015 	stw	r5,0(r8)
    ae10:	d8c11c15 	stw	r3,1136(sp)
    ae14:	d9011b15 	stw	r4,1132(sp)
    ae18:	008001c4 	movi	r2,7
    ae1c:	11008516 	blt	r2,r4,b034 <___vfiprintf_internal_r+0x1090>
    ae20:	42000204 	addi	r8,r8,8
    ae24:	20800044 	addi	r2,r4,1
    ae28:	200b883a 	mov	r5,r4
    ae2c:	003dfa06 	br	a618 <__alt_data_end+0xfffb4ee8>
    ae30:	d9012117 	ldw	r4,1156(sp)
    ae34:	d9412017 	ldw	r5,1152(sp)
    ae38:	d9811a04 	addi	r6,sp,1128
    ae3c:	da812a15 	stw	r10,1192(sp)
    ae40:	0009e900 	call	9e90 <__sprint_r.part.0>
    ae44:	da812a17 	ldw	r10,1192(sp)
    ae48:	103f721e 	bne	r2,zero,ac14 <__alt_data_end+0xfffb54e4>
    ae4c:	d9411b17 	ldw	r5,1132(sp)
    ae50:	d8c11c17 	ldw	r3,1136(sp)
    ae54:	d811883a 	mov	r8,sp
    ae58:	29000044 	addi	r4,r5,1
    ae5c:	003fd906 	br	adc4 <__alt_data_end+0xfffb5694>
    ae60:	1800681e 	bne	r3,zero,b004 <___vfiprintf_internal_r+0x1060>
    ae64:	50004d26 	beq	r10,zero,af9c <___vfiprintf_internal_r+0xff8>
    ae68:	d8811d04 	addi	r2,sp,1140
    ae6c:	00c00084 	movi	r3,2
    ae70:	d8800015 	stw	r2,0(sp)
    ae74:	d8c00115 	stw	r3,4(sp)
    ae78:	2005883a 	mov	r2,r4
    ae7c:	d811883a 	mov	r8,sp
    ae80:	003de006 	br	a604 <__alt_data_end+0xfffb4ed4>
    ae84:	1800551e 	bne	r3,zero,afdc <___vfiprintf_internal_r+0x1038>
    ae88:	000b883a 	mov	r5,zero
    ae8c:	00800044 	movi	r2,1
    ae90:	d811883a 	mov	r8,sp
    ae94:	003dde06 	br	a610 <__alt_data_end+0xfffb4ee0>
    ae98:	10803fcc 	andi	r2,r2,255
    ae9c:	1000191e 	bne	r2,zero,af04 <___vfiprintf_internal_r+0xf60>
    aea0:	9080004c 	andi	r2,r18,1
    aea4:	10001726 	beq	r2,zero,af04 <___vfiprintf_internal_r+0xf60>
    aea8:	00800c04 	movi	r2,48
    aeac:	d8c109c4 	addi	r3,sp,1063
    aeb0:	d88109c5 	stb	r2,1063(sp)
    aeb4:	dd012817 	ldw	r20,1184(sp)
    aeb8:	d8c12215 	stw	r3,1160(sp)
    aebc:	003d8a06 	br	a4e8 <__alt_data_end+0xfffb4db8>
    aec0:	d9012717 	ldw	r4,1180(sp)
    aec4:	dd010a04 	addi	r20,sp,1064
    aec8:	988003cc 	andi	r2,r19,15
    aecc:	a806973a 	slli	r3,r21,28
    aed0:	2085883a 	add	r2,r4,r2
    aed4:	9826d13a 	srli	r19,r19,4
    aed8:	10800003 	ldbu	r2,0(r2)
    aedc:	a82ad13a 	srli	r21,r21,4
    aee0:	a53fffc4 	addi	r20,r20,-1
    aee4:	1ce6b03a 	or	r19,r3,r19
    aee8:	a0800005 	stb	r2,0(r20)
    aeec:	9d44b03a 	or	r2,r19,r21
    aef0:	103ff51e 	bne	r2,zero,aec8 <__alt_data_end+0xfffb5798>
    aef4:	d9411e17 	ldw	r5,1144(sp)
    aef8:	dd012215 	stw	r20,1160(sp)
    aefc:	2d29c83a 	sub	r20,r5,r20
    af00:	003d7906 	br	a4e8 <__alt_data_end+0xfffb4db8>
    af04:	d8c10a04 	addi	r3,sp,1064
    af08:	d8c12215 	stw	r3,1160(sp)
    af0c:	003d7606 	br	a4e8 <__alt_data_end+0xfffb4db8>
    af10:	18009e1e 	bne	r3,zero,b18c <___vfiprintf_internal_r+0x11e8>
    af14:	d8811d87 	ldb	r2,1142(sp)
    af18:	10005f26 	beq	r2,zero,b098 <___vfiprintf_internal_r+0x10f4>
    af1c:	00c00044 	movi	r3,1
    af20:	d9011d84 	addi	r4,sp,1142
    af24:	1805883a 	mov	r2,r3
    af28:	d9000015 	stw	r4,0(sp)
    af2c:	d8c00115 	stw	r3,4(sp)
    af30:	d811883a 	mov	r8,sp
    af34:	003efc06 	br	ab28 <__alt_data_end+0xfffb53f8>
    af38:	d9412417 	ldw	r5,1168(sp)
    af3c:	d811883a 	mov	r8,sp
    af40:	2d65c83a 	sub	r18,r5,r21
    af44:	04bf4816 	blt	zero,r18,ac68 <__alt_data_end+0xfffb5538>
    af48:	003f6c06 	br	acfc <__alt_data_end+0xfffb55cc>
    af4c:	b829883a 	mov	r20,r23
    af50:	003c6906 	br	a0f8 <__alt_data_end+0xfffb49c8>
    af54:	d9012117 	ldw	r4,1156(sp)
    af58:	d9412017 	ldw	r5,1152(sp)
    af5c:	d9811a04 	addi	r6,sp,1128
    af60:	0009e900 	call	9e90 <__sprint_r.part.0>
    af64:	103f2b1e 	bne	r2,zero,ac14 <__alt_data_end+0xfffb54e4>
    af68:	d8c11c17 	ldw	r3,1136(sp)
    af6c:	d811883a 	mov	r8,sp
    af70:	003f3806 	br	ac54 <__alt_data_end+0xfffb5524>
    af74:	00800084 	movi	r2,2
    af78:	9d46b03a 	or	r3,r19,r21
    af7c:	003df606 	br	a758 <__alt_data_end+0xfffb5028>
    af80:	d9012117 	ldw	r4,1156(sp)
    af84:	d9412017 	ldw	r5,1152(sp)
    af88:	d9811a04 	addi	r6,sp,1128
    af8c:	0009e900 	call	9e90 <__sprint_r.part.0>
    af90:	103f201e 	bne	r2,zero,ac14 <__alt_data_end+0xfffb54e4>
    af94:	d811883a 	mov	r8,sp
    af98:	003cc606 	br	a2b4 <__alt_data_end+0xfffb4b84>
    af9c:	000b883a 	mov	r5,zero
    afa0:	2005883a 	mov	r2,r4
    afa4:	d811883a 	mov	r8,sp
    afa8:	003d9906 	br	a610 <__alt_data_end+0xfffb4ee0>
    afac:	10803fcc 	andi	r2,r2,255
    afb0:	1080201c 	xori	r2,r2,128
    afb4:	10bfe004 	addi	r2,r2,-128
    afb8:	01000c04 	movi	r4,48
    afbc:	1100b226 	beq	r2,r4,b288 <___vfiprintf_internal_r+0x12e4>
    afc0:	d9412217 	ldw	r5,1160(sp)
    afc4:	d8811e17 	ldw	r2,1144(sp)
    afc8:	193fffc5 	stb	r4,-1(r3)
    afcc:	297fffc4 	addi	r5,r5,-1
    afd0:	d9412215 	stw	r5,1160(sp)
    afd4:	1169c83a 	sub	r20,r2,r5
    afd8:	003d4306 	br	a4e8 <__alt_data_end+0xfffb4db8>
    afdc:	d9012117 	ldw	r4,1156(sp)
    afe0:	d9412017 	ldw	r5,1152(sp)
    afe4:	d9811a04 	addi	r6,sp,1128
    afe8:	0009e900 	call	9e90 <__sprint_r.part.0>
    afec:	103f091e 	bne	r2,zero,ac14 <__alt_data_end+0xfffb54e4>
    aff0:	d9411b17 	ldw	r5,1132(sp)
    aff4:	d8c11c17 	ldw	r3,1136(sp)
    aff8:	d811883a 	mov	r8,sp
    affc:	28800044 	addi	r2,r5,1
    b000:	003d8306 	br	a610 <__alt_data_end+0xfffb4ee0>
    b004:	d9012117 	ldw	r4,1156(sp)
    b008:	d9412017 	ldw	r5,1152(sp)
    b00c:	d9811a04 	addi	r6,sp,1128
    b010:	da812a15 	stw	r10,1192(sp)
    b014:	0009e900 	call	9e90 <__sprint_r.part.0>
    b018:	da812a17 	ldw	r10,1192(sp)
    b01c:	103efd1e 	bne	r2,zero,ac14 <__alt_data_end+0xfffb54e4>
    b020:	d9411b17 	ldw	r5,1132(sp)
    b024:	d8c11c17 	ldw	r3,1136(sp)
    b028:	d811883a 	mov	r8,sp
    b02c:	28800044 	addi	r2,r5,1
    b030:	003d6a06 	br	a5dc <__alt_data_end+0xfffb4eac>
    b034:	1800a01e 	bne	r3,zero,b2b8 <___vfiprintf_internal_r+0x1314>
    b038:	000b883a 	mov	r5,zero
    b03c:	00800044 	movi	r2,1
    b040:	d811883a 	mov	r8,sp
    b044:	003d7406 	br	a618 <__alt_data_end+0xfffb4ee8>
    b048:	d9012117 	ldw	r4,1156(sp)
    b04c:	d9412017 	ldw	r5,1152(sp)
    b050:	d9811a04 	addi	r6,sp,1128
    b054:	0009e900 	call	9e90 <__sprint_r.part.0>
    b058:	103eee1e 	bne	r2,zero,ac14 <__alt_data_end+0xfffb54e4>
    b05c:	d8811b17 	ldw	r2,1132(sp)
    b060:	d8c11c17 	ldw	r3,1136(sp)
    b064:	d811883a 	mov	r8,sp
    b068:	10800044 	addi	r2,r2,1
    b06c:	003d8f06 	br	a6ac <__alt_data_end+0xfffb4f7c>
    b070:	04e7c83a 	sub	r19,zero,r19
    b074:	9804c03a 	cmpne	r2,r19,zero
    b078:	056bc83a 	sub	r21,zero,r21
    b07c:	a8abc83a 	sub	r21,r21,r2
    b080:	05800b44 	movi	r22,45
    b084:	dd811d85 	stb	r22,1142(sp)
    b088:	8029883a 	mov	r20,r16
    b08c:	00800044 	movi	r2,1
    b090:	9d46b03a 	or	r3,r19,r21
    b094:	003cfa06 	br	a480 <__alt_data_end+0xfffb4d50>
    b098:	000b883a 	mov	r5,zero
    b09c:	00800044 	movi	r2,1
    b0a0:	d811883a 	mov	r8,sp
    b0a4:	503d5a26 	beq	r10,zero,a610 <__alt_data_end+0xfffb4ee0>
    b0a8:	00c00084 	movi	r3,2
    b0ac:	d9011d04 	addi	r4,sp,1140
    b0b0:	d9000015 	stw	r4,0(sp)
    b0b4:	d8c00115 	stw	r3,4(sp)
    b0b8:	003d5206 	br	a604 <__alt_data_end+0xfffb4ed4>
    b0bc:	9080040c 	andi	r2,r18,16
    b0c0:	1000421e 	bne	r2,zero,b1cc <___vfiprintf_internal_r+0x1228>
    b0c4:	9480100c 	andi	r18,r18,64
    b0c8:	90009c26 	beq	r18,zero,b33c <___vfiprintf_internal_r+0x1398>
    b0cc:	d9412317 	ldw	r5,1164(sp)
    b0d0:	d8c12517 	ldw	r3,1172(sp)
    b0d4:	28800017 	ldw	r2,0(r5)
    b0d8:	29400104 	addi	r5,r5,4
    b0dc:	d9412315 	stw	r5,1164(sp)
    b0e0:	10c0000d 	sth	r3,0(r2)
    b0e4:	003be706 	br	a084 <__alt_data_end+0xfffb4954>
    b0e8:	90c0100c 	andi	r3,r18,64
    b0ec:	18003e26 	beq	r3,zero,b1e8 <___vfiprintf_internal_r+0x1244>
    b0f0:	d8c12317 	ldw	r3,1164(sp)
    b0f4:	14c0000b 	ldhu	r19,0(r2)
    b0f8:	002b883a 	mov	r21,zero
    b0fc:	18c00104 	addi	r3,r3,4
    b100:	d8c12315 	stw	r3,1164(sp)
    b104:	003db706 	br	a7e4 <__alt_data_end+0xfffb50b4>
    b108:	9080100c 	andi	r2,r18,64
    b10c:	10004c26 	beq	r2,zero,b240 <___vfiprintf_internal_r+0x129c>
    b110:	1cc0000f 	ldh	r19,0(r3)
    b114:	d8812317 	ldw	r2,1164(sp)
    b118:	982bd7fa 	srai	r21,r19,31
    b11c:	10800104 	addi	r2,r2,4
    b120:	d8812315 	stw	r2,1164(sp)
    b124:	a805883a 	mov	r2,r21
    b128:	003cd006 	br	a46c <__alt_data_end+0xfffb4d3c>
    b12c:	00800084 	movi	r2,2
    b130:	003d8906 	br	a758 <__alt_data_end+0xfffb5028>
    b134:	b9800007 	ldb	r6,0(r23)
    b138:	003bfb06 	br	a128 <__alt_data_end+0xfffb49f8>
    b13c:	9080100c 	andi	r2,r18,64
    b140:	10003726 	beq	r2,zero,b220 <___vfiprintf_internal_r+0x127c>
    b144:	d9412317 	ldw	r5,1164(sp)
    b148:	002b883a 	mov	r21,zero
    b14c:	0005883a 	mov	r2,zero
    b150:	2cc0000b 	ldhu	r19,0(r5)
    b154:	29400104 	addi	r5,r5,4
    b158:	d9412315 	stw	r5,1164(sp)
    b15c:	9807883a 	mov	r3,r19
    b160:	003d7d06 	br	a758 <__alt_data_end+0xfffb5028>
    b164:	9080100c 	andi	r2,r18,64
    b168:	10002526 	beq	r2,zero,b200 <___vfiprintf_internal_r+0x125c>
    b16c:	d8812317 	ldw	r2,1164(sp)
    b170:	002b883a 	mov	r21,zero
    b174:	14c0000b 	ldhu	r19,0(r2)
    b178:	10800104 	addi	r2,r2,4
    b17c:	d8812315 	stw	r2,1164(sp)
    b180:	9807883a 	mov	r3,r19
    b184:	00800044 	movi	r2,1
    b188:	003d7306 	br	a758 <__alt_data_end+0xfffb5028>
    b18c:	d9012117 	ldw	r4,1156(sp)
    b190:	d9412017 	ldw	r5,1152(sp)
    b194:	d9811a04 	addi	r6,sp,1128
    b198:	da812a15 	stw	r10,1192(sp)
    b19c:	0009e900 	call	9e90 <__sprint_r.part.0>
    b1a0:	da812a17 	ldw	r10,1192(sp)
    b1a4:	103e9b1e 	bne	r2,zero,ac14 <__alt_data_end+0xfffb54e4>
    b1a8:	d9411b17 	ldw	r5,1132(sp)
    b1ac:	d8c11c17 	ldw	r3,1136(sp)
    b1b0:	d811883a 	mov	r8,sp
    b1b4:	28800044 	addi	r2,r5,1
    b1b8:	003e5006 	br	aafc <__alt_data_end+0xfffb53cc>
    b1bc:	182b883a 	mov	r21,r3
    b1c0:	003ed006 	br	ad04 <__alt_data_end+0xfffb55d4>
    b1c4:	8029883a 	mov	r20,r16
    b1c8:	003dc606 	br	a8e4 <__alt_data_end+0xfffb51b4>
    b1cc:	d8c12317 	ldw	r3,1164(sp)
    b1d0:	d9012517 	ldw	r4,1172(sp)
    b1d4:	18800017 	ldw	r2,0(r3)
    b1d8:	18c00104 	addi	r3,r3,4
    b1dc:	d8c12315 	stw	r3,1164(sp)
    b1e0:	11000015 	stw	r4,0(r2)
    b1e4:	003ba706 	br	a084 <__alt_data_end+0xfffb4954>
    b1e8:	d9012317 	ldw	r4,1164(sp)
    b1ec:	14c00017 	ldw	r19,0(r2)
    b1f0:	002b883a 	mov	r21,zero
    b1f4:	21000104 	addi	r4,r4,4
    b1f8:	d9012315 	stw	r4,1164(sp)
    b1fc:	003d7906 	br	a7e4 <__alt_data_end+0xfffb50b4>
    b200:	d8c12317 	ldw	r3,1164(sp)
    b204:	002b883a 	mov	r21,zero
    b208:	00800044 	movi	r2,1
    b20c:	1cc00017 	ldw	r19,0(r3)
    b210:	18c00104 	addi	r3,r3,4
    b214:	d8c12315 	stw	r3,1164(sp)
    b218:	9807883a 	mov	r3,r19
    b21c:	003d4e06 	br	a758 <__alt_data_end+0xfffb5028>
    b220:	d8812317 	ldw	r2,1164(sp)
    b224:	002b883a 	mov	r21,zero
    b228:	14c00017 	ldw	r19,0(r2)
    b22c:	10800104 	addi	r2,r2,4
    b230:	d8812315 	stw	r2,1164(sp)
    b234:	9807883a 	mov	r3,r19
    b238:	0005883a 	mov	r2,zero
    b23c:	003d4606 	br	a758 <__alt_data_end+0xfffb5028>
    b240:	1cc00017 	ldw	r19,0(r3)
    b244:	d8c12317 	ldw	r3,1164(sp)
    b248:	982bd7fa 	srai	r21,r19,31
    b24c:	18c00104 	addi	r3,r3,4
    b250:	d8c12315 	stw	r3,1164(sp)
    b254:	a805883a 	mov	r2,r21
    b258:	003c8406 	br	a46c <__alt_data_end+0xfffb4d3c>
    b25c:	01000074 	movhi	r4,1
    b260:	21092704 	addi	r4,r4,9372
    b264:	d9012615 	stw	r4,1176(sp)
    b268:	003d0606 	br	a684 <__alt_data_end+0xfffb4f54>
    b26c:	b9800043 	ldbu	r6,1(r23)
    b270:	94800814 	ori	r18,r18,32
    b274:	bdc00044 	addi	r23,r23,1
    b278:	31803fcc 	andi	r6,r6,255
    b27c:	3180201c 	xori	r6,r6,128
    b280:	31bfe004 	addi	r6,r6,-128
    b284:	003ba806 	br	a128 <__alt_data_end+0xfffb49f8>
    b288:	d8811e17 	ldw	r2,1144(sp)
    b28c:	d8c12217 	ldw	r3,1160(sp)
    b290:	10e9c83a 	sub	r20,r2,r3
    b294:	003c9406 	br	a4e8 <__alt_data_end+0xfffb4db8>
    b298:	da012a15 	stw	r8,1192(sp)
    b29c:	00032b00 	call	32b0 <strlen>
    b2a0:	1029883a 	mov	r20,r2
    b2a4:	dd811d83 	ldbu	r22,1142(sp)
    b2a8:	dcc12315 	stw	r19,1164(sp)
    b2ac:	0021883a 	mov	r16,zero
    b2b0:	da012a17 	ldw	r8,1192(sp)
    b2b4:	003c8c06 	br	a4e8 <__alt_data_end+0xfffb4db8>
    b2b8:	d9012117 	ldw	r4,1156(sp)
    b2bc:	d9412017 	ldw	r5,1152(sp)
    b2c0:	d9811a04 	addi	r6,sp,1128
    b2c4:	0009e900 	call	9e90 <__sprint_r.part.0>
    b2c8:	103e521e 	bne	r2,zero,ac14 <__alt_data_end+0xfffb54e4>
    b2cc:	d9411b17 	ldw	r5,1132(sp)
    b2d0:	d8c11c17 	ldw	r3,1136(sp)
    b2d4:	d811883a 	mov	r8,sp
    b2d8:	28800044 	addi	r2,r5,1
    b2dc:	003cce06 	br	a618 <__alt_data_end+0xfffb4ee8>
    b2e0:	01400074 	movhi	r5,1
    b2e4:	29492b04 	addi	r5,r5,9388
    b2e8:	d9412615 	stw	r5,1176(sp)
    b2ec:	d9411b17 	ldw	r5,1132(sp)
    b2f0:	29400044 	addi	r5,r5,1
    b2f4:	003cad06 	br	a5ac <__alt_data_end+0xfffb4e7c>
    b2f8:	00800184 	movi	r2,6
    b2fc:	1400012e 	bgeu	r2,r16,b304 <___vfiprintf_internal_r+0x1360>
    b300:	1021883a 	mov	r16,r2
    b304:	8029883a 	mov	r20,r16
    b308:	802b883a 	mov	r21,r16
    b30c:	80001c16 	blt	r16,zero,b380 <___vfiprintf_internal_r+0x13dc>
    b310:	00c00074 	movhi	r3,1
    b314:	18c8cb04 	addi	r3,r3,9004
    b318:	dcc12315 	stw	r19,1164(sp)
    b31c:	d8c12215 	stw	r3,1160(sp)
    b320:	003cff06 	br	a720 <__alt_data_end+0xfffb4ff0>
    b324:	d9411b17 	ldw	r5,1132(sp)
    b328:	00800074 	movhi	r2,1
    b32c:	10892b04 	addi	r2,r2,9388
    b330:	d8812615 	stw	r2,1176(sp)
    b334:	29400044 	addi	r5,r5,1
    b338:	003e6706 	br	acd8 <__alt_data_end+0xfffb55a8>
    b33c:	d9012317 	ldw	r4,1164(sp)
    b340:	d9412517 	ldw	r5,1172(sp)
    b344:	20800017 	ldw	r2,0(r4)
    b348:	21000104 	addi	r4,r4,4
    b34c:	d9012315 	stw	r4,1164(sp)
    b350:	11400015 	stw	r5,0(r2)
    b354:	003b4b06 	br	a084 <__alt_data_end+0xfffb4954>
    b358:	8029883a 	mov	r20,r16
    b35c:	dd811d83 	ldbu	r22,1142(sp)
    b360:	dcc12315 	stw	r19,1164(sp)
    b364:	0021883a 	mov	r16,zero
    b368:	003c5f06 	br	a4e8 <__alt_data_end+0xfffb4db8>
    b36c:	01000074 	movhi	r4,1
    b370:	21092704 	addi	r4,r4,9372
    b374:	d9012615 	stw	r4,1176(sp)
    b378:	1009883a 	mov	r4,r2
    b37c:	003ea006 	br	ae00 <__alt_data_end+0xfffb56d0>
    b380:	002b883a 	mov	r21,zero
    b384:	003fe206 	br	b310 <__alt_data_end+0xfffb5be0>
    b388:	d9412317 	ldw	r5,1164(sp)
    b38c:	b807883a 	mov	r3,r23
    b390:	102f883a 	mov	r23,r2
    b394:	2c000017 	ldw	r16,0(r5)
    b398:	29000104 	addi	r4,r5,4
    b39c:	d9012315 	stw	r4,1164(sp)
    b3a0:	80000416 	blt	r16,zero,b3b4 <___vfiprintf_internal_r+0x1410>
    b3a4:	19800047 	ldb	r6,1(r3)
    b3a8:	003b5f06 	br	a128 <__alt_data_end+0xfffb49f8>
    b3ac:	043fffc4 	movi	r16,-1
    b3b0:	003bef06 	br	a370 <__alt_data_end+0xfffb4c40>
    b3b4:	043fffc4 	movi	r16,-1
    b3b8:	19800047 	ldb	r6,1(r3)
    b3bc:	003b5a06 	br	a128 <__alt_data_end+0xfffb49f8>
    b3c0:	282b883a 	mov	r21,r5
    b3c4:	003cc706 	br	a6e4 <__alt_data_end+0xfffb4fb4>

0000b3c8 <__vfiprintf_internal>:
    b3c8:	2007883a 	mov	r3,r4
    b3cc:	01000074 	movhi	r4,1
    b3d0:	21102a04 	addi	r4,r4,16552
    b3d4:	21000017 	ldw	r4,0(r4)
    b3d8:	2805883a 	mov	r2,r5
    b3dc:	300f883a 	mov	r7,r6
    b3e0:	180b883a 	mov	r5,r3
    b3e4:	100d883a 	mov	r6,r2
    b3e8:	0009fa41 	jmpi	9fa4 <___vfiprintf_internal_r>

0000b3ec <_write_r>:
    b3ec:	defffd04 	addi	sp,sp,-12
    b3f0:	dc000015 	stw	r16,0(sp)
    b3f4:	04000074 	movhi	r16,1
    b3f8:	dc400115 	stw	r17,4(sp)
    b3fc:	8416fd04 	addi	r16,r16,23540
    b400:	2023883a 	mov	r17,r4
    b404:	2809883a 	mov	r4,r5
    b408:	300b883a 	mov	r5,r6
    b40c:	380d883a 	mov	r6,r7
    b410:	dfc00215 	stw	ra,8(sp)
    b414:	80000015 	stw	zero,0(r16)
    b418:	000fc080 	call	fc08 <write>
    b41c:	00ffffc4 	movi	r3,-1
    b420:	10c00526 	beq	r2,r3,b438 <_write_r+0x4c>
    b424:	dfc00217 	ldw	ra,8(sp)
    b428:	dc400117 	ldw	r17,4(sp)
    b42c:	dc000017 	ldw	r16,0(sp)
    b430:	dec00304 	addi	sp,sp,12
    b434:	f800283a 	ret
    b438:	80c00017 	ldw	r3,0(r16)
    b43c:	183ff926 	beq	r3,zero,b424 <__alt_data_end+0xfffb5cf4>
    b440:	88c00015 	stw	r3,0(r17)
    b444:	003ff706 	br	b424 <__alt_data_end+0xfffb5cf4>

0000b448 <_close_r>:
    b448:	defffd04 	addi	sp,sp,-12
    b44c:	dc000015 	stw	r16,0(sp)
    b450:	04000074 	movhi	r16,1
    b454:	dc400115 	stw	r17,4(sp)
    b458:	8416fd04 	addi	r16,r16,23540
    b45c:	2023883a 	mov	r17,r4
    b460:	2809883a 	mov	r4,r5
    b464:	dfc00215 	stw	ra,8(sp)
    b468:	80000015 	stw	zero,0(r16)
    b46c:	000f3340 	call	f334 <close>
    b470:	00ffffc4 	movi	r3,-1
    b474:	10c00526 	beq	r2,r3,b48c <_close_r+0x44>
    b478:	dfc00217 	ldw	ra,8(sp)
    b47c:	dc400117 	ldw	r17,4(sp)
    b480:	dc000017 	ldw	r16,0(sp)
    b484:	dec00304 	addi	sp,sp,12
    b488:	f800283a 	ret
    b48c:	80c00017 	ldw	r3,0(r16)
    b490:	183ff926 	beq	r3,zero,b478 <__alt_data_end+0xfffb5d48>
    b494:	88c00015 	stw	r3,0(r17)
    b498:	003ff706 	br	b478 <__alt_data_end+0xfffb5d48>

0000b49c <_calloc_r>:
    b49c:	defffe04 	addi	sp,sp,-8
    b4a0:	dc000015 	stw	r16,0(sp)
    b4a4:	2021883a 	mov	r16,r4
    b4a8:	2809883a 	mov	r4,r5
    b4ac:	300b883a 	mov	r5,r6
    b4b0:	dfc00115 	stw	ra,4(sp)
    b4b4:	000cac00 	call	cac0 <__mulsi3>
    b4b8:	8009883a 	mov	r4,r16
    b4bc:	100b883a 	mov	r5,r2
    b4c0:	00029800 	call	2980 <_malloc_r>
    b4c4:	1021883a 	mov	r16,r2
    b4c8:	10002826 	beq	r2,zero,b56c <_calloc_r+0xd0>
    b4cc:	11bfff17 	ldw	r6,-4(r2)
    b4d0:	00bfff04 	movi	r2,-4
    b4d4:	00c00904 	movi	r3,36
    b4d8:	308c703a 	and	r6,r6,r2
    b4dc:	308d883a 	add	r6,r6,r2
    b4e0:	19801436 	bltu	r3,r6,b534 <_calloc_r+0x98>
    b4e4:	008004c4 	movi	r2,19
    b4e8:	11800936 	bltu	r2,r6,b510 <_calloc_r+0x74>
    b4ec:	8005883a 	mov	r2,r16
    b4f0:	10000015 	stw	zero,0(r2)
    b4f4:	10000115 	stw	zero,4(r2)
    b4f8:	10000215 	stw	zero,8(r2)
    b4fc:	8005883a 	mov	r2,r16
    b500:	dfc00117 	ldw	ra,4(sp)
    b504:	dc000017 	ldw	r16,0(sp)
    b508:	dec00204 	addi	sp,sp,8
    b50c:	f800283a 	ret
    b510:	80000015 	stw	zero,0(r16)
    b514:	80000115 	stw	zero,4(r16)
    b518:	008006c4 	movi	r2,27
    b51c:	11800d2e 	bgeu	r2,r6,b554 <_calloc_r+0xb8>
    b520:	80000215 	stw	zero,8(r16)
    b524:	80000315 	stw	zero,12(r16)
    b528:	30c00c26 	beq	r6,r3,b55c <_calloc_r+0xc0>
    b52c:	80800404 	addi	r2,r16,16
    b530:	003fef06 	br	b4f0 <__alt_data_end+0xfffb5dc0>
    b534:	8009883a 	mov	r4,r16
    b538:	000b883a 	mov	r5,zero
    b53c:	00085300 	call	8530 <memset>
    b540:	8005883a 	mov	r2,r16
    b544:	dfc00117 	ldw	ra,4(sp)
    b548:	dc000017 	ldw	r16,0(sp)
    b54c:	dec00204 	addi	sp,sp,8
    b550:	f800283a 	ret
    b554:	80800204 	addi	r2,r16,8
    b558:	003fe506 	br	b4f0 <__alt_data_end+0xfffb5dc0>
    b55c:	80000415 	stw	zero,16(r16)
    b560:	80800604 	addi	r2,r16,24
    b564:	80000515 	stw	zero,20(r16)
    b568:	003fe106 	br	b4f0 <__alt_data_end+0xfffb5dc0>
    b56c:	0005883a 	mov	r2,zero
    b570:	003fe306 	br	b500 <__alt_data_end+0xfffb5dd0>

0000b574 <_fclose_r>:
    b574:	28003226 	beq	r5,zero,b640 <_fclose_r+0xcc>
    b578:	defffc04 	addi	sp,sp,-16
    b57c:	dc400115 	stw	r17,4(sp)
    b580:	2023883a 	mov	r17,r4
    b584:	dc000015 	stw	r16,0(sp)
    b588:	dfc00315 	stw	ra,12(sp)
    b58c:	dc800215 	stw	r18,8(sp)
    b590:	2821883a 	mov	r16,r5
    b594:	00074b40 	call	74b4 <__sfp_lock_acquire>
    b598:	88000226 	beq	r17,zero,b5a4 <_fclose_r+0x30>
    b59c:	88800e17 	ldw	r2,56(r17)
    b5a0:	10002926 	beq	r2,zero,b648 <_fclose_r+0xd4>
    b5a4:	8080030f 	ldh	r2,12(r16)
    b5a8:	10002226 	beq	r2,zero,b634 <_fclose_r+0xc0>
    b5ac:	8809883a 	mov	r4,r17
    b5b0:	800b883a 	mov	r5,r16
    b5b4:	0006ee80 	call	6ee8 <_fflush_r>
    b5b8:	1025883a 	mov	r18,r2
    b5bc:	80800b17 	ldw	r2,44(r16)
    b5c0:	10000426 	beq	r2,zero,b5d4 <_fclose_r+0x60>
    b5c4:	81400717 	ldw	r5,28(r16)
    b5c8:	8809883a 	mov	r4,r17
    b5cc:	103ee83a 	callr	r2
    b5d0:	10002616 	blt	r2,zero,b66c <_fclose_r+0xf8>
    b5d4:	8080030b 	ldhu	r2,12(r16)
    b5d8:	1080200c 	andi	r2,r2,128
    b5dc:	10001f1e 	bne	r2,zero,b65c <_fclose_r+0xe8>
    b5e0:	81400c17 	ldw	r5,48(r16)
    b5e4:	28000526 	beq	r5,zero,b5fc <_fclose_r+0x88>
    b5e8:	80801004 	addi	r2,r16,64
    b5ec:	28800226 	beq	r5,r2,b5f8 <_fclose_r+0x84>
    b5f0:	8809883a 	mov	r4,r17
    b5f4:	00076180 	call	7618 <_free_r>
    b5f8:	80000c15 	stw	zero,48(r16)
    b5fc:	81401117 	ldw	r5,68(r16)
    b600:	28000326 	beq	r5,zero,b610 <_fclose_r+0x9c>
    b604:	8809883a 	mov	r4,r17
    b608:	00076180 	call	7618 <_free_r>
    b60c:	80001115 	stw	zero,68(r16)
    b610:	8000030d 	sth	zero,12(r16)
    b614:	00074b80 	call	74b8 <__sfp_lock_release>
    b618:	9005883a 	mov	r2,r18
    b61c:	dfc00317 	ldw	ra,12(sp)
    b620:	dc800217 	ldw	r18,8(sp)
    b624:	dc400117 	ldw	r17,4(sp)
    b628:	dc000017 	ldw	r16,0(sp)
    b62c:	dec00404 	addi	sp,sp,16
    b630:	f800283a 	ret
    b634:	00074b80 	call	74b8 <__sfp_lock_release>
    b638:	0005883a 	mov	r2,zero
    b63c:	003ff706 	br	b61c <__alt_data_end+0xfffb5eec>
    b640:	0005883a 	mov	r2,zero
    b644:	f800283a 	ret
    b648:	8809883a 	mov	r4,r17
    b64c:	00074a40 	call	74a4 <__sinit>
    b650:	8080030f 	ldh	r2,12(r16)
    b654:	103fd51e 	bne	r2,zero,b5ac <__alt_data_end+0xfffb5e7c>
    b658:	003ff606 	br	b634 <__alt_data_end+0xfffb5f04>
    b65c:	81400417 	ldw	r5,16(r16)
    b660:	8809883a 	mov	r4,r17
    b664:	00076180 	call	7618 <_free_r>
    b668:	003fdd06 	br	b5e0 <__alt_data_end+0xfffb5eb0>
    b66c:	04bfffc4 	movi	r18,-1
    b670:	003fd806 	br	b5d4 <__alt_data_end+0xfffb5ea4>

0000b674 <fclose>:
    b674:	00800074 	movhi	r2,1
    b678:	10902a04 	addi	r2,r2,16552
    b67c:	200b883a 	mov	r5,r4
    b680:	11000017 	ldw	r4,0(r2)
    b684:	000b5741 	jmpi	b574 <_fclose_r>

0000b688 <_fputwc_r>:
    b688:	3080030b 	ldhu	r2,12(r6)
    b68c:	defff804 	addi	sp,sp,-32
    b690:	dcc00415 	stw	r19,16(sp)
    b694:	dc800315 	stw	r18,12(sp)
    b698:	dc000115 	stw	r16,4(sp)
    b69c:	dfc00715 	stw	ra,28(sp)
    b6a0:	dd400615 	stw	r21,24(sp)
    b6a4:	dd000515 	stw	r20,20(sp)
    b6a8:	dc400215 	stw	r17,8(sp)
    b6ac:	10c8000c 	andi	r3,r2,8192
    b6b0:	3021883a 	mov	r16,r6
    b6b4:	2027883a 	mov	r19,r4
    b6b8:	2825883a 	mov	r18,r5
    b6bc:	1800051e 	bne	r3,zero,b6d4 <_fputwc_r+0x4c>
    b6c0:	30c01917 	ldw	r3,100(r6)
    b6c4:	10880014 	ori	r2,r2,8192
    b6c8:	3080030d 	sth	r2,12(r6)
    b6cc:	18880014 	ori	r2,r3,8192
    b6d0:	30801915 	stw	r2,100(r6)
    b6d4:	0007fa40 	call	7fa4 <__locale_mb_cur_max>
    b6d8:	00c00044 	movi	r3,1
    b6dc:	10c03e26 	beq	r2,r3,b7d8 <_fputwc_r+0x150>
    b6e0:	9809883a 	mov	r4,r19
    b6e4:	d80b883a 	mov	r5,sp
    b6e8:	900d883a 	mov	r6,r18
    b6ec:	81c01704 	addi	r7,r16,92
    b6f0:	000bb380 	call	bb38 <_wcrtomb_r>
    b6f4:	1029883a 	mov	r20,r2
    b6f8:	00bfffc4 	movi	r2,-1
    b6fc:	a0802026 	beq	r20,r2,b780 <_fputwc_r+0xf8>
    b700:	d9400003 	ldbu	r5,0(sp)
    b704:	a0001c26 	beq	r20,zero,b778 <_fputwc_r+0xf0>
    b708:	0023883a 	mov	r17,zero
    b70c:	05400284 	movi	r21,10
    b710:	00000906 	br	b738 <_fputwc_r+0xb0>
    b714:	80800017 	ldw	r2,0(r16)
    b718:	11400005 	stb	r5,0(r2)
    b71c:	80c00017 	ldw	r3,0(r16)
    b720:	18c00044 	addi	r3,r3,1
    b724:	80c00015 	stw	r3,0(r16)
    b728:	8c400044 	addi	r17,r17,1
    b72c:	dc45883a 	add	r2,sp,r17
    b730:	8d00112e 	bgeu	r17,r20,b778 <_fputwc_r+0xf0>
    b734:	11400003 	ldbu	r5,0(r2)
    b738:	80c00217 	ldw	r3,8(r16)
    b73c:	18ffffc4 	addi	r3,r3,-1
    b740:	80c00215 	stw	r3,8(r16)
    b744:	183ff30e 	bge	r3,zero,b714 <__alt_data_end+0xfffb5fe4>
    b748:	80800617 	ldw	r2,24(r16)
    b74c:	18801916 	blt	r3,r2,b7b4 <_fputwc_r+0x12c>
    b750:	80800017 	ldw	r2,0(r16)
    b754:	11400005 	stb	r5,0(r2)
    b758:	80800017 	ldw	r2,0(r16)
    b75c:	10c00003 	ldbu	r3,0(r2)
    b760:	10800044 	addi	r2,r2,1
    b764:	1d402326 	beq	r3,r21,b7f4 <_fputwc_r+0x16c>
    b768:	80800015 	stw	r2,0(r16)
    b76c:	8c400044 	addi	r17,r17,1
    b770:	dc45883a 	add	r2,sp,r17
    b774:	8d3fef36 	bltu	r17,r20,b734 <__alt_data_end+0xfffb6004>
    b778:	9005883a 	mov	r2,r18
    b77c:	00000406 	br	b790 <_fputwc_r+0x108>
    b780:	80c0030b 	ldhu	r3,12(r16)
    b784:	a005883a 	mov	r2,r20
    b788:	18c01014 	ori	r3,r3,64
    b78c:	80c0030d 	sth	r3,12(r16)
    b790:	dfc00717 	ldw	ra,28(sp)
    b794:	dd400617 	ldw	r21,24(sp)
    b798:	dd000517 	ldw	r20,20(sp)
    b79c:	dcc00417 	ldw	r19,16(sp)
    b7a0:	dc800317 	ldw	r18,12(sp)
    b7a4:	dc400217 	ldw	r17,8(sp)
    b7a8:	dc000117 	ldw	r16,4(sp)
    b7ac:	dec00804 	addi	sp,sp,32
    b7b0:	f800283a 	ret
    b7b4:	9809883a 	mov	r4,r19
    b7b8:	29403fcc 	andi	r5,r5,255
    b7bc:	800d883a 	mov	r6,r16
    b7c0:	000b9c80 	call	b9c8 <__swbuf_r>
    b7c4:	10bfffe0 	cmpeqi	r2,r2,-1
    b7c8:	10803fcc 	andi	r2,r2,255
    b7cc:	103fd626 	beq	r2,zero,b728 <__alt_data_end+0xfffb5ff8>
    b7d0:	00bfffc4 	movi	r2,-1
    b7d4:	003fee06 	br	b790 <__alt_data_end+0xfffb6060>
    b7d8:	90ffffc4 	addi	r3,r18,-1
    b7dc:	01003f84 	movi	r4,254
    b7e0:	20ffbf36 	bltu	r4,r3,b6e0 <__alt_data_end+0xfffb5fb0>
    b7e4:	900b883a 	mov	r5,r18
    b7e8:	dc800005 	stb	r18,0(sp)
    b7ec:	1029883a 	mov	r20,r2
    b7f0:	003fc506 	br	b708 <__alt_data_end+0xfffb5fd8>
    b7f4:	9809883a 	mov	r4,r19
    b7f8:	a80b883a 	mov	r5,r21
    b7fc:	800d883a 	mov	r6,r16
    b800:	000b9c80 	call	b9c8 <__swbuf_r>
    b804:	10bfffe0 	cmpeqi	r2,r2,-1
    b808:	003fef06 	br	b7c8 <__alt_data_end+0xfffb6098>

0000b80c <fputwc>:
    b80c:	defffc04 	addi	sp,sp,-16
    b810:	dc000115 	stw	r16,4(sp)
    b814:	04000074 	movhi	r16,1
    b818:	84102a04 	addi	r16,r16,16552
    b81c:	dc400215 	stw	r17,8(sp)
    b820:	2023883a 	mov	r17,r4
    b824:	81000017 	ldw	r4,0(r16)
    b828:	dfc00315 	stw	ra,12(sp)
    b82c:	280d883a 	mov	r6,r5
    b830:	20000626 	beq	r4,zero,b84c <fputwc+0x40>
    b834:	20800e17 	ldw	r2,56(r4)
    b838:	1000041e 	bne	r2,zero,b84c <fputwc+0x40>
    b83c:	d9400015 	stw	r5,0(sp)
    b840:	00074a40 	call	74a4 <__sinit>
    b844:	81000017 	ldw	r4,0(r16)
    b848:	d9800017 	ldw	r6,0(sp)
    b84c:	880b883a 	mov	r5,r17
    b850:	dfc00317 	ldw	ra,12(sp)
    b854:	dc400217 	ldw	r17,8(sp)
    b858:	dc000117 	ldw	r16,4(sp)
    b85c:	dec00404 	addi	sp,sp,16
    b860:	000b6881 	jmpi	b688 <_fputwc_r>

0000b864 <_fstat_r>:
    b864:	defffd04 	addi	sp,sp,-12
    b868:	dc000015 	stw	r16,0(sp)
    b86c:	04000074 	movhi	r16,1
    b870:	dc400115 	stw	r17,4(sp)
    b874:	8416fd04 	addi	r16,r16,23540
    b878:	2023883a 	mov	r17,r4
    b87c:	2809883a 	mov	r4,r5
    b880:	300b883a 	mov	r5,r6
    b884:	dfc00215 	stw	ra,8(sp)
    b888:	80000015 	stw	zero,0(r16)
    b88c:	000f4880 	call	f488 <fstat>
    b890:	00ffffc4 	movi	r3,-1
    b894:	10c00526 	beq	r2,r3,b8ac <_fstat_r+0x48>
    b898:	dfc00217 	ldw	ra,8(sp)
    b89c:	dc400117 	ldw	r17,4(sp)
    b8a0:	dc000017 	ldw	r16,0(sp)
    b8a4:	dec00304 	addi	sp,sp,12
    b8a8:	f800283a 	ret
    b8ac:	80c00017 	ldw	r3,0(r16)
    b8b0:	183ff926 	beq	r3,zero,b898 <__alt_data_end+0xfffb6168>
    b8b4:	88c00015 	stw	r3,0(r17)
    b8b8:	003ff706 	br	b898 <__alt_data_end+0xfffb6168>

0000b8bc <_isatty_r>:
    b8bc:	defffd04 	addi	sp,sp,-12
    b8c0:	dc000015 	stw	r16,0(sp)
    b8c4:	04000074 	movhi	r16,1
    b8c8:	dc400115 	stw	r17,4(sp)
    b8cc:	8416fd04 	addi	r16,r16,23540
    b8d0:	2023883a 	mov	r17,r4
    b8d4:	2809883a 	mov	r4,r5
    b8d8:	dfc00215 	stw	ra,8(sp)
    b8dc:	80000015 	stw	zero,0(r16)
    b8e0:	000f5900 	call	f590 <isatty>
    b8e4:	00ffffc4 	movi	r3,-1
    b8e8:	10c00526 	beq	r2,r3,b900 <_isatty_r+0x44>
    b8ec:	dfc00217 	ldw	ra,8(sp)
    b8f0:	dc400117 	ldw	r17,4(sp)
    b8f4:	dc000017 	ldw	r16,0(sp)
    b8f8:	dec00304 	addi	sp,sp,12
    b8fc:	f800283a 	ret
    b900:	80c00017 	ldw	r3,0(r16)
    b904:	183ff926 	beq	r3,zero,b8ec <__alt_data_end+0xfffb61bc>
    b908:	88c00015 	stw	r3,0(r17)
    b90c:	003ff706 	br	b8ec <__alt_data_end+0xfffb61bc>

0000b910 <_lseek_r>:
    b910:	defffd04 	addi	sp,sp,-12
    b914:	dc000015 	stw	r16,0(sp)
    b918:	04000074 	movhi	r16,1
    b91c:	dc400115 	stw	r17,4(sp)
    b920:	8416fd04 	addi	r16,r16,23540
    b924:	2023883a 	mov	r17,r4
    b928:	2809883a 	mov	r4,r5
    b92c:	300b883a 	mov	r5,r6
    b930:	380d883a 	mov	r6,r7
    b934:	dfc00215 	stw	ra,8(sp)
    b938:	80000015 	stw	zero,0(r16)
    b93c:	000f7700 	call	f770 <lseek>
    b940:	00ffffc4 	movi	r3,-1
    b944:	10c00526 	beq	r2,r3,b95c <_lseek_r+0x4c>
    b948:	dfc00217 	ldw	ra,8(sp)
    b94c:	dc400117 	ldw	r17,4(sp)
    b950:	dc000017 	ldw	r16,0(sp)
    b954:	dec00304 	addi	sp,sp,12
    b958:	f800283a 	ret
    b95c:	80c00017 	ldw	r3,0(r16)
    b960:	183ff926 	beq	r3,zero,b948 <__alt_data_end+0xfffb6218>
    b964:	88c00015 	stw	r3,0(r17)
    b968:	003ff706 	br	b948 <__alt_data_end+0xfffb6218>

0000b96c <_read_r>:
    b96c:	defffd04 	addi	sp,sp,-12
    b970:	dc000015 	stw	r16,0(sp)
    b974:	04000074 	movhi	r16,1
    b978:	dc400115 	stw	r17,4(sp)
    b97c:	8416fd04 	addi	r16,r16,23540
    b980:	2023883a 	mov	r17,r4
    b984:	2809883a 	mov	r4,r5
    b988:	300b883a 	mov	r5,r6
    b98c:	380d883a 	mov	r6,r7
    b990:	dfc00215 	stw	ra,8(sp)
    b994:	80000015 	stw	zero,0(r16)
    b998:	000f9540 	call	f954 <read>
    b99c:	00ffffc4 	movi	r3,-1
    b9a0:	10c00526 	beq	r2,r3,b9b8 <_read_r+0x4c>
    b9a4:	dfc00217 	ldw	ra,8(sp)
    b9a8:	dc400117 	ldw	r17,4(sp)
    b9ac:	dc000017 	ldw	r16,0(sp)
    b9b0:	dec00304 	addi	sp,sp,12
    b9b4:	f800283a 	ret
    b9b8:	80c00017 	ldw	r3,0(r16)
    b9bc:	183ff926 	beq	r3,zero,b9a4 <__alt_data_end+0xfffb6274>
    b9c0:	88c00015 	stw	r3,0(r17)
    b9c4:	003ff706 	br	b9a4 <__alt_data_end+0xfffb6274>

0000b9c8 <__swbuf_r>:
    b9c8:	defffc04 	addi	sp,sp,-16
    b9cc:	dc800215 	stw	r18,8(sp)
    b9d0:	dc400115 	stw	r17,4(sp)
    b9d4:	dc000015 	stw	r16,0(sp)
    b9d8:	dfc00315 	stw	ra,12(sp)
    b9dc:	2025883a 	mov	r18,r4
    b9e0:	2823883a 	mov	r17,r5
    b9e4:	3021883a 	mov	r16,r6
    b9e8:	20000226 	beq	r4,zero,b9f4 <__swbuf_r+0x2c>
    b9ec:	20800e17 	ldw	r2,56(r4)
    b9f0:	10004126 	beq	r2,zero,baf8 <__swbuf_r+0x130>
    b9f4:	80c00617 	ldw	r3,24(r16)
    b9f8:	8180030b 	ldhu	r6,12(r16)
    b9fc:	80c00215 	stw	r3,8(r16)
    ba00:	30c0020c 	andi	r3,r6,8
    ba04:	18003526 	beq	r3,zero,badc <__swbuf_r+0x114>
    ba08:	80c00417 	ldw	r3,16(r16)
    ba0c:	18003326 	beq	r3,zero,badc <__swbuf_r+0x114>
    ba10:	3088000c 	andi	r2,r6,8192
    ba14:	8c403fcc 	andi	r17,r17,255
    ba18:	10001726 	beq	r2,zero,ba78 <__swbuf_r+0xb0>
    ba1c:	80800017 	ldw	r2,0(r16)
    ba20:	81000517 	ldw	r4,20(r16)
    ba24:	10c7c83a 	sub	r3,r2,r3
    ba28:	19001d0e 	bge	r3,r4,baa0 <__swbuf_r+0xd8>
    ba2c:	18c00044 	addi	r3,r3,1
    ba30:	81400217 	ldw	r5,8(r16)
    ba34:	11000044 	addi	r4,r2,1
    ba38:	81000015 	stw	r4,0(r16)
    ba3c:	297fffc4 	addi	r5,r5,-1
    ba40:	81400215 	stw	r5,8(r16)
    ba44:	14400005 	stb	r17,0(r2)
    ba48:	80800517 	ldw	r2,20(r16)
    ba4c:	10c01d26 	beq	r2,r3,bac4 <__swbuf_r+0xfc>
    ba50:	8080030b 	ldhu	r2,12(r16)
    ba54:	1080004c 	andi	r2,r2,1
    ba58:	1000181e 	bne	r2,zero,babc <__swbuf_r+0xf4>
    ba5c:	8805883a 	mov	r2,r17
    ba60:	dfc00317 	ldw	ra,12(sp)
    ba64:	dc800217 	ldw	r18,8(sp)
    ba68:	dc400117 	ldw	r17,4(sp)
    ba6c:	dc000017 	ldw	r16,0(sp)
    ba70:	dec00404 	addi	sp,sp,16
    ba74:	f800283a 	ret
    ba78:	81001917 	ldw	r4,100(r16)
    ba7c:	00b7ffc4 	movi	r2,-8193
    ba80:	31880014 	ori	r6,r6,8192
    ba84:	2084703a 	and	r2,r4,r2
    ba88:	80801915 	stw	r2,100(r16)
    ba8c:	80800017 	ldw	r2,0(r16)
    ba90:	81000517 	ldw	r4,20(r16)
    ba94:	8180030d 	sth	r6,12(r16)
    ba98:	10c7c83a 	sub	r3,r2,r3
    ba9c:	193fe316 	blt	r3,r4,ba2c <__alt_data_end+0xfffb62fc>
    baa0:	9009883a 	mov	r4,r18
    baa4:	800b883a 	mov	r5,r16
    baa8:	0006ee80 	call	6ee8 <_fflush_r>
    baac:	1000091e 	bne	r2,zero,bad4 <__swbuf_r+0x10c>
    bab0:	80800017 	ldw	r2,0(r16)
    bab4:	00c00044 	movi	r3,1
    bab8:	003fdd06 	br	ba30 <__alt_data_end+0xfffb6300>
    babc:	00800284 	movi	r2,10
    bac0:	88bfe61e 	bne	r17,r2,ba5c <__alt_data_end+0xfffb632c>
    bac4:	9009883a 	mov	r4,r18
    bac8:	800b883a 	mov	r5,r16
    bacc:	0006ee80 	call	6ee8 <_fflush_r>
    bad0:	103fe226 	beq	r2,zero,ba5c <__alt_data_end+0xfffb632c>
    bad4:	00bfffc4 	movi	r2,-1
    bad8:	003fe106 	br	ba60 <__alt_data_end+0xfffb6330>
    badc:	9009883a 	mov	r4,r18
    bae0:	800b883a 	mov	r5,r16
    bae4:	00054680 	call	5468 <__swsetup_r>
    bae8:	1000051e 	bne	r2,zero,bb00 <__swbuf_r+0x138>
    baec:	8180030b 	ldhu	r6,12(r16)
    baf0:	80c00417 	ldw	r3,16(r16)
    baf4:	003fc606 	br	ba10 <__alt_data_end+0xfffb62e0>
    baf8:	00074a40 	call	74a4 <__sinit>
    bafc:	003fbd06 	br	b9f4 <__alt_data_end+0xfffb62c4>
    bb00:	80c0030b 	ldhu	r3,12(r16)
    bb04:	00bfffc4 	movi	r2,-1
    bb08:	18c01014 	ori	r3,r3,64
    bb0c:	80c0030d 	sth	r3,12(r16)
    bb10:	00c00244 	movi	r3,9
    bb14:	90c00015 	stw	r3,0(r18)
    bb18:	003fd106 	br	ba60 <__alt_data_end+0xfffb6330>

0000bb1c <__swbuf>:
    bb1c:	00c00074 	movhi	r3,1
    bb20:	18d02a04 	addi	r3,r3,16552
    bb24:	2005883a 	mov	r2,r4
    bb28:	19000017 	ldw	r4,0(r3)
    bb2c:	280d883a 	mov	r6,r5
    bb30:	100b883a 	mov	r5,r2
    bb34:	000b9c81 	jmpi	b9c8 <__swbuf_r>

0000bb38 <_wcrtomb_r>:
    bb38:	defff604 	addi	sp,sp,-40
    bb3c:	00800074 	movhi	r2,1
    bb40:	dc800815 	stw	r18,32(sp)
    bb44:	dc400715 	stw	r17,28(sp)
    bb48:	dc000615 	stw	r16,24(sp)
    bb4c:	10902c04 	addi	r2,r2,16560
    bb50:	dfc00915 	stw	ra,36(sp)
    bb54:	2021883a 	mov	r16,r4
    bb58:	3823883a 	mov	r17,r7
    bb5c:	14800017 	ldw	r18,0(r2)
    bb60:	28001426 	beq	r5,zero,bbb4 <_wcrtomb_r+0x7c>
    bb64:	d9400415 	stw	r5,16(sp)
    bb68:	d9800515 	stw	r6,20(sp)
    bb6c:	0007f980 	call	7f98 <__locale_charset>
    bb70:	d9400417 	ldw	r5,16(sp)
    bb74:	d9800517 	ldw	r6,20(sp)
    bb78:	8009883a 	mov	r4,r16
    bb7c:	dc400015 	stw	r17,0(sp)
    bb80:	100f883a 	mov	r7,r2
    bb84:	903ee83a 	callr	r18
    bb88:	00ffffc4 	movi	r3,-1
    bb8c:	10c0031e 	bne	r2,r3,bb9c <_wcrtomb_r+0x64>
    bb90:	88000015 	stw	zero,0(r17)
    bb94:	00c02284 	movi	r3,138
    bb98:	80c00015 	stw	r3,0(r16)
    bb9c:	dfc00917 	ldw	ra,36(sp)
    bba0:	dc800817 	ldw	r18,32(sp)
    bba4:	dc400717 	ldw	r17,28(sp)
    bba8:	dc000617 	ldw	r16,24(sp)
    bbac:	dec00a04 	addi	sp,sp,40
    bbb0:	f800283a 	ret
    bbb4:	0007f980 	call	7f98 <__locale_charset>
    bbb8:	8009883a 	mov	r4,r16
    bbbc:	dc400015 	stw	r17,0(sp)
    bbc0:	d9400104 	addi	r5,sp,4
    bbc4:	000d883a 	mov	r6,zero
    bbc8:	100f883a 	mov	r7,r2
    bbcc:	903ee83a 	callr	r18
    bbd0:	003fed06 	br	bb88 <__alt_data_end+0xfffb6458>

0000bbd4 <wcrtomb>:
    bbd4:	defff504 	addi	sp,sp,-44
    bbd8:	dc400515 	stw	r17,20(sp)
    bbdc:	dc000415 	stw	r16,16(sp)
    bbe0:	dfc00a15 	stw	ra,40(sp)
    bbe4:	dd400915 	stw	r21,36(sp)
    bbe8:	dd000815 	stw	r20,32(sp)
    bbec:	dcc00715 	stw	r19,28(sp)
    bbf0:	dc800615 	stw	r18,24(sp)
    bbf4:	2021883a 	mov	r16,r4
    bbf8:	3023883a 	mov	r17,r6
    bbfc:	20001d26 	beq	r4,zero,bc74 <wcrtomb+0xa0>
    bc00:	04800074 	movhi	r18,1
    bc04:	94902a04 	addi	r18,r18,16552
    bc08:	00800074 	movhi	r2,1
    bc0c:	95400017 	ldw	r21,0(r18)
    bc10:	10902c04 	addi	r2,r2,16560
    bc14:	15000017 	ldw	r20,0(r2)
    bc18:	2827883a 	mov	r19,r5
    bc1c:	0007f980 	call	7f98 <__locale_charset>
    bc20:	a809883a 	mov	r4,r21
    bc24:	dc400015 	stw	r17,0(sp)
    bc28:	800b883a 	mov	r5,r16
    bc2c:	980d883a 	mov	r6,r19
    bc30:	100f883a 	mov	r7,r2
    bc34:	a03ee83a 	callr	r20
    bc38:	00ffffc4 	movi	r3,-1
    bc3c:	10c0041e 	bne	r2,r3,bc50 <wcrtomb+0x7c>
    bc40:	90c00017 	ldw	r3,0(r18)
    bc44:	01002284 	movi	r4,138
    bc48:	88000015 	stw	zero,0(r17)
    bc4c:	19000015 	stw	r4,0(r3)
    bc50:	dfc00a17 	ldw	ra,40(sp)
    bc54:	dd400917 	ldw	r21,36(sp)
    bc58:	dd000817 	ldw	r20,32(sp)
    bc5c:	dcc00717 	ldw	r19,28(sp)
    bc60:	dc800617 	ldw	r18,24(sp)
    bc64:	dc400517 	ldw	r17,20(sp)
    bc68:	dc000417 	ldw	r16,16(sp)
    bc6c:	dec00b04 	addi	sp,sp,44
    bc70:	f800283a 	ret
    bc74:	04800074 	movhi	r18,1
    bc78:	94902a04 	addi	r18,r18,16552
    bc7c:	00800074 	movhi	r2,1
    bc80:	94c00017 	ldw	r19,0(r18)
    bc84:	10902c04 	addi	r2,r2,16560
    bc88:	14000017 	ldw	r16,0(r2)
    bc8c:	0007f980 	call	7f98 <__locale_charset>
    bc90:	9809883a 	mov	r4,r19
    bc94:	dc400015 	stw	r17,0(sp)
    bc98:	d9400104 	addi	r5,sp,4
    bc9c:	000d883a 	mov	r6,zero
    bca0:	100f883a 	mov	r7,r2
    bca4:	803ee83a 	callr	r16
    bca8:	003fe306 	br	bc38 <__alt_data_end+0xfffb6508>

0000bcac <__ascii_wctomb>:
    bcac:	28000526 	beq	r5,zero,bcc4 <__ascii_wctomb+0x18>
    bcb0:	00803fc4 	movi	r2,255
    bcb4:	11800536 	bltu	r2,r6,bccc <__ascii_wctomb+0x20>
    bcb8:	29800005 	stb	r6,0(r5)
    bcbc:	00800044 	movi	r2,1
    bcc0:	f800283a 	ret
    bcc4:	0005883a 	mov	r2,zero
    bcc8:	f800283a 	ret
    bccc:	00802284 	movi	r2,138
    bcd0:	20800015 	stw	r2,0(r4)
    bcd4:	00bfffc4 	movi	r2,-1
    bcd8:	f800283a 	ret

0000bcdc <_wctomb_r>:
    bcdc:	00800074 	movhi	r2,1
    bce0:	defff904 	addi	sp,sp,-28
    bce4:	10902c04 	addi	r2,r2,16560
    bce8:	dfc00615 	stw	ra,24(sp)
    bcec:	dc400515 	stw	r17,20(sp)
    bcf0:	dc000415 	stw	r16,16(sp)
    bcf4:	3823883a 	mov	r17,r7
    bcf8:	14000017 	ldw	r16,0(r2)
    bcfc:	d9000115 	stw	r4,4(sp)
    bd00:	d9400215 	stw	r5,8(sp)
    bd04:	d9800315 	stw	r6,12(sp)
    bd08:	0007f980 	call	7f98 <__locale_charset>
    bd0c:	d9000117 	ldw	r4,4(sp)
    bd10:	d9400217 	ldw	r5,8(sp)
    bd14:	d9800317 	ldw	r6,12(sp)
    bd18:	dc400015 	stw	r17,0(sp)
    bd1c:	100f883a 	mov	r7,r2
    bd20:	803ee83a 	callr	r16
    bd24:	dfc00617 	ldw	ra,24(sp)
    bd28:	dc400517 	ldw	r17,20(sp)
    bd2c:	dc000417 	ldw	r16,16(sp)
    bd30:	dec00704 	addi	sp,sp,28
    bd34:	f800283a 	ret

0000bd38 <__udivdi3>:
    bd38:	defff504 	addi	sp,sp,-44
    bd3c:	dcc00415 	stw	r19,16(sp)
    bd40:	dc000115 	stw	r16,4(sp)
    bd44:	dfc00a15 	stw	ra,40(sp)
    bd48:	df000915 	stw	fp,36(sp)
    bd4c:	ddc00815 	stw	r23,32(sp)
    bd50:	dd800715 	stw	r22,28(sp)
    bd54:	dd400615 	stw	r21,24(sp)
    bd58:	dd000515 	stw	r20,20(sp)
    bd5c:	dc800315 	stw	r18,12(sp)
    bd60:	dc400215 	stw	r17,8(sp)
    bd64:	2027883a 	mov	r19,r4
    bd68:	2821883a 	mov	r16,r5
    bd6c:	3800471e 	bne	r7,zero,be8c <__udivdi3+0x154>
    bd70:	3025883a 	mov	r18,r6
    bd74:	2023883a 	mov	r17,r4
    bd78:	2980592e 	bgeu	r5,r6,bee0 <__udivdi3+0x1a8>
    bd7c:	00bfffd4 	movui	r2,65535
    bd80:	2829883a 	mov	r20,r5
    bd84:	1180b236 	bltu	r2,r6,c050 <__udivdi3+0x318>
    bd88:	00803fc4 	movi	r2,255
    bd8c:	1181622e 	bgeu	r2,r6,c318 <__udivdi3+0x5e0>
    bd90:	00800204 	movi	r2,8
    bd94:	1007883a 	mov	r3,r2
    bd98:	3084d83a 	srl	r2,r6,r2
    bd9c:	01000074 	movhi	r4,1
    bda0:	21092f04 	addi	r4,r4,9404
    bda4:	2085883a 	add	r2,r4,r2
    bda8:	11000003 	ldbu	r4,0(r2)
    bdac:	20c9883a 	add	r4,r4,r3
    bdb0:	00c00804 	movi	r3,32
    bdb4:	1907c83a 	sub	r3,r3,r4
    bdb8:	18000526 	beq	r3,zero,bdd0 <__udivdi3+0x98>
    bdbc:	80e0983a 	sll	r16,r16,r3
    bdc0:	9908d83a 	srl	r4,r19,r4
    bdc4:	30e4983a 	sll	r18,r6,r3
    bdc8:	98e2983a 	sll	r17,r19,r3
    bdcc:	8128b03a 	or	r20,r16,r4
    bdd0:	902ad43a 	srli	r21,r18,16
    bdd4:	a009883a 	mov	r4,r20
    bdd8:	95bfffcc 	andi	r22,r18,65535
    bddc:	a80b883a 	mov	r5,r21
    bde0:	000cab80 	call	cab8 <__umodsi3>
    bde4:	a009883a 	mov	r4,r20
    bde8:	a80b883a 	mov	r5,r21
    bdec:	102f883a 	mov	r23,r2
    bdf0:	000cab00 	call	cab0 <__udivsi3>
    bdf4:	1009883a 	mov	r4,r2
    bdf8:	b00b883a 	mov	r5,r22
    bdfc:	1021883a 	mov	r16,r2
    be00:	000cac00 	call	cac0 <__mulsi3>
    be04:	b82e943a 	slli	r23,r23,16
    be08:	8808d43a 	srli	r4,r17,16
    be0c:	b906b03a 	or	r3,r23,r4
    be10:	1880052e 	bgeu	r3,r2,be28 <__udivdi3+0xf0>
    be14:	1c87883a 	add	r3,r3,r18
    be18:	813fffc4 	addi	r4,r16,-1
    be1c:	1c800136 	bltu	r3,r18,be24 <__udivdi3+0xec>
    be20:	18815236 	bltu	r3,r2,c36c <__udivdi3+0x634>
    be24:	2021883a 	mov	r16,r4
    be28:	18a7c83a 	sub	r19,r3,r2
    be2c:	9809883a 	mov	r4,r19
    be30:	a80b883a 	mov	r5,r21
    be34:	000cab80 	call	cab8 <__umodsi3>
    be38:	1029883a 	mov	r20,r2
    be3c:	9809883a 	mov	r4,r19
    be40:	a80b883a 	mov	r5,r21
    be44:	a028943a 	slli	r20,r20,16
    be48:	000cab00 	call	cab0 <__udivsi3>
    be4c:	1009883a 	mov	r4,r2
    be50:	b00b883a 	mov	r5,r22
    be54:	8c7fffcc 	andi	r17,r17,65535
    be58:	1027883a 	mov	r19,r2
    be5c:	a462b03a 	or	r17,r20,r17
    be60:	000cac00 	call	cac0 <__mulsi3>
    be64:	8880052e 	bgeu	r17,r2,be7c <__udivdi3+0x144>
    be68:	8ca3883a 	add	r17,r17,r18
    be6c:	98ffffc4 	addi	r3,r19,-1
    be70:	8c811036 	bltu	r17,r18,c2b4 <__udivdi3+0x57c>
    be74:	88810f2e 	bgeu	r17,r2,c2b4 <__udivdi3+0x57c>
    be78:	9cffff84 	addi	r19,r19,-2
    be7c:	8020943a 	slli	r16,r16,16
    be80:	0007883a 	mov	r3,zero
    be84:	9c04b03a 	or	r2,r19,r16
    be88:	00006006 	br	c00c <__udivdi3+0x2d4>
    be8c:	29c05d36 	bltu	r5,r7,c004 <__udivdi3+0x2cc>
    be90:	00bfffd4 	movui	r2,65535
    be94:	11c0692e 	bgeu	r2,r7,c03c <__udivdi3+0x304>
    be98:	00804034 	movhi	r2,256
    be9c:	10bfffc4 	addi	r2,r2,-1
    bea0:	11c10e2e 	bgeu	r2,r7,c2dc <__udivdi3+0x5a4>
    bea4:	01400604 	movi	r5,24
    bea8:	2811883a 	mov	r8,r5
    beac:	394ad83a 	srl	r5,r7,r5
    beb0:	00800074 	movhi	r2,1
    beb4:	10892f04 	addi	r2,r2,9404
    beb8:	114b883a 	add	r5,r2,r5
    bebc:	29400003 	ldbu	r5,0(r5)
    bec0:	00c00804 	movi	r3,32
    bec4:	2a0b883a 	add	r5,r5,r8
    bec8:	196fc83a 	sub	r23,r3,r5
    becc:	b8006b1e 	bne	r23,zero,c07c <__udivdi3+0x344>
    bed0:	3c011436 	bltu	r7,r16,c324 <__udivdi3+0x5ec>
    bed4:	9985403a 	cmpgeu	r2,r19,r6
    bed8:	0007883a 	mov	r3,zero
    bedc:	00004b06 	br	c00c <__udivdi3+0x2d4>
    bee0:	3000041e 	bne	r6,zero,bef4 <__udivdi3+0x1bc>
    bee4:	01000044 	movi	r4,1
    bee8:	000b883a 	mov	r5,zero
    beec:	000cab00 	call	cab0 <__udivsi3>
    bef0:	1025883a 	mov	r18,r2
    bef4:	00bfffd4 	movui	r2,65535
    bef8:	14805b2e 	bgeu	r2,r18,c068 <__udivdi3+0x330>
    befc:	00804034 	movhi	r2,256
    bf00:	10bfffc4 	addi	r2,r2,-1
    bf04:	1480fe2e 	bgeu	r2,r18,c300 <__udivdi3+0x5c8>
    bf08:	00800604 	movi	r2,24
    bf0c:	1007883a 	mov	r3,r2
    bf10:	9084d83a 	srl	r2,r18,r2
    bf14:	01000074 	movhi	r4,1
    bf18:	21092f04 	addi	r4,r4,9404
    bf1c:	2085883a 	add	r2,r4,r2
    bf20:	11800003 	ldbu	r6,0(r2)
    bf24:	01c00804 	movi	r7,32
    bf28:	30c7883a 	add	r3,r6,r3
    bf2c:	38cfc83a 	sub	r7,r7,r3
    bf30:	3800a71e 	bne	r7,zero,c1d0 <__udivdi3+0x498>
    bf34:	9028d43a 	srli	r20,r18,16
    bf38:	84a1c83a 	sub	r16,r16,r18
    bf3c:	957fffcc 	andi	r21,r18,65535
    bf40:	00c00044 	movi	r3,1
    bf44:	8009883a 	mov	r4,r16
    bf48:	a00b883a 	mov	r5,r20
    bf4c:	d8c00015 	stw	r3,0(sp)
    bf50:	000cab80 	call	cab8 <__umodsi3>
    bf54:	8009883a 	mov	r4,r16
    bf58:	a00b883a 	mov	r5,r20
    bf5c:	102d883a 	mov	r22,r2
    bf60:	000cab00 	call	cab0 <__udivsi3>
    bf64:	1009883a 	mov	r4,r2
    bf68:	a80b883a 	mov	r5,r21
    bf6c:	1021883a 	mov	r16,r2
    bf70:	000cac00 	call	cac0 <__mulsi3>
    bf74:	b02c943a 	slli	r22,r22,16
    bf78:	880ed43a 	srli	r7,r17,16
    bf7c:	d8c00017 	ldw	r3,0(sp)
    bf80:	b1ccb03a 	or	r6,r22,r7
    bf84:	3080052e 	bgeu	r6,r2,bf9c <__udivdi3+0x264>
    bf88:	348d883a 	add	r6,r6,r18
    bf8c:	813fffc4 	addi	r4,r16,-1
    bf90:	34800136 	bltu	r6,r18,bf98 <__udivdi3+0x260>
    bf94:	3080f236 	bltu	r6,r2,c360 <__udivdi3+0x628>
    bf98:	2021883a 	mov	r16,r4
    bf9c:	30a7c83a 	sub	r19,r6,r2
    bfa0:	9809883a 	mov	r4,r19
    bfa4:	a00b883a 	mov	r5,r20
    bfa8:	d8c00015 	stw	r3,0(sp)
    bfac:	000cab80 	call	cab8 <__umodsi3>
    bfb0:	102d883a 	mov	r22,r2
    bfb4:	9809883a 	mov	r4,r19
    bfb8:	a00b883a 	mov	r5,r20
    bfbc:	b02c943a 	slli	r22,r22,16
    bfc0:	000cab00 	call	cab0 <__udivsi3>
    bfc4:	1009883a 	mov	r4,r2
    bfc8:	a80b883a 	mov	r5,r21
    bfcc:	8c7fffcc 	andi	r17,r17,65535
    bfd0:	1027883a 	mov	r19,r2
    bfd4:	b462b03a 	or	r17,r22,r17
    bfd8:	000cac00 	call	cac0 <__mulsi3>
    bfdc:	d8c00017 	ldw	r3,0(sp)
    bfe0:	8880052e 	bgeu	r17,r2,bff8 <__udivdi3+0x2c0>
    bfe4:	8ca3883a 	add	r17,r17,r18
    bfe8:	993fffc4 	addi	r4,r19,-1
    bfec:	8c80af36 	bltu	r17,r18,c2ac <__udivdi3+0x574>
    bff0:	8880ae2e 	bgeu	r17,r2,c2ac <__udivdi3+0x574>
    bff4:	9cffff84 	addi	r19,r19,-2
    bff8:	8020943a 	slli	r16,r16,16
    bffc:	9c04b03a 	or	r2,r19,r16
    c000:	00000206 	br	c00c <__udivdi3+0x2d4>
    c004:	0007883a 	mov	r3,zero
    c008:	0005883a 	mov	r2,zero
    c00c:	dfc00a17 	ldw	ra,40(sp)
    c010:	df000917 	ldw	fp,36(sp)
    c014:	ddc00817 	ldw	r23,32(sp)
    c018:	dd800717 	ldw	r22,28(sp)
    c01c:	dd400617 	ldw	r21,24(sp)
    c020:	dd000517 	ldw	r20,20(sp)
    c024:	dcc00417 	ldw	r19,16(sp)
    c028:	dc800317 	ldw	r18,12(sp)
    c02c:	dc400217 	ldw	r17,8(sp)
    c030:	dc000117 	ldw	r16,4(sp)
    c034:	dec00b04 	addi	sp,sp,44
    c038:	f800283a 	ret
    c03c:	00803fc4 	movi	r2,255
    c040:	11c0a92e 	bgeu	r2,r7,c2e8 <__udivdi3+0x5b0>
    c044:	01400204 	movi	r5,8
    c048:	2811883a 	mov	r8,r5
    c04c:	003f9706 	br	beac <__alt_data_end+0xfffb677c>
    c050:	00804034 	movhi	r2,256
    c054:	10bfffc4 	addi	r2,r2,-1
    c058:	1180a62e 	bgeu	r2,r6,c2f4 <__udivdi3+0x5bc>
    c05c:	00800604 	movi	r2,24
    c060:	1007883a 	mov	r3,r2
    c064:	003f4c06 	br	bd98 <__alt_data_end+0xfffb6668>
    c068:	00803fc4 	movi	r2,255
    c06c:	1480a72e 	bgeu	r2,r18,c30c <__udivdi3+0x5d4>
    c070:	00800204 	movi	r2,8
    c074:	1007883a 	mov	r3,r2
    c078:	003fa506 	br	bf10 <__alt_data_end+0xfffb67e0>
    c07c:	3178d83a 	srl	fp,r6,r5
    c080:	3dce983a 	sll	r7,r7,r23
    c084:	8168d83a 	srl	r20,r16,r5
    c088:	9950d83a 	srl	r8,r19,r5
    c08c:	3f38b03a 	or	fp,r7,fp
    c090:	e024d43a 	srli	r18,fp,16
    c094:	85e0983a 	sll	r16,r16,r23
    c098:	a009883a 	mov	r4,r20
    c09c:	900b883a 	mov	r5,r18
    c0a0:	8220b03a 	or	r16,r16,r8
    c0a4:	35ea983a 	sll	r21,r6,r23
    c0a8:	000cab80 	call	cab8 <__umodsi3>
    c0ac:	a009883a 	mov	r4,r20
    c0b0:	900b883a 	mov	r5,r18
    c0b4:	1023883a 	mov	r17,r2
    c0b8:	e5bfffcc 	andi	r22,fp,65535
    c0bc:	000cab00 	call	cab0 <__udivsi3>
    c0c0:	1009883a 	mov	r4,r2
    c0c4:	b00b883a 	mov	r5,r22
    c0c8:	1029883a 	mov	r20,r2
    c0cc:	000cac00 	call	cac0 <__mulsi3>
    c0d0:	8806943a 	slli	r3,r17,16
    c0d4:	8014d43a 	srli	r10,r16,16
    c0d8:	1a92b03a 	or	r9,r3,r10
    c0dc:	4880042e 	bgeu	r9,r2,c0f0 <__udivdi3+0x3b8>
    c0e0:	4f13883a 	add	r9,r9,fp
    c0e4:	a0ffffc4 	addi	r3,r20,-1
    c0e8:	4f00952e 	bgeu	r9,fp,c340 <__udivdi3+0x608>
    c0ec:	1829883a 	mov	r20,r3
    c0f0:	48a3c83a 	sub	r17,r9,r2
    c0f4:	8809883a 	mov	r4,r17
    c0f8:	900b883a 	mov	r5,r18
    c0fc:	000cab80 	call	cab8 <__umodsi3>
    c100:	8809883a 	mov	r4,r17
    c104:	900b883a 	mov	r5,r18
    c108:	d8800015 	stw	r2,0(sp)
    c10c:	000cab00 	call	cab0 <__udivsi3>
    c110:	1009883a 	mov	r4,r2
    c114:	b00b883a 	mov	r5,r22
    c118:	1023883a 	mov	r17,r2
    c11c:	000cac00 	call	cac0 <__mulsi3>
    c120:	d8c00017 	ldw	r3,0(sp)
    c124:	823fffcc 	andi	r8,r16,65535
    c128:	1806943a 	slli	r3,r3,16
    c12c:	1a20b03a 	or	r16,r3,r8
    c130:	8080042e 	bgeu	r16,r2,c144 <__udivdi3+0x40c>
    c134:	8721883a 	add	r16,r16,fp
    c138:	88ffffc4 	addi	r3,r17,-1
    c13c:	87007c2e 	bgeu	r16,fp,c330 <__udivdi3+0x5f8>
    c140:	1823883a 	mov	r17,r3
    c144:	a028943a 	slli	r20,r20,16
    c148:	acbfffcc 	andi	r18,r21,65535
    c14c:	900b883a 	mov	r5,r18
    c150:	8d28b03a 	or	r20,r17,r20
    c154:	a022d43a 	srli	r17,r20,16
    c158:	a5bfffcc 	andi	r22,r20,65535
    c15c:	b009883a 	mov	r4,r22
    c160:	a82ad43a 	srli	r21,r21,16
    c164:	80a1c83a 	sub	r16,r16,r2
    c168:	000cac00 	call	cac0 <__mulsi3>
    c16c:	8809883a 	mov	r4,r17
    c170:	900b883a 	mov	r5,r18
    c174:	1039883a 	mov	fp,r2
    c178:	000cac00 	call	cac0 <__mulsi3>
    c17c:	8809883a 	mov	r4,r17
    c180:	a80b883a 	mov	r5,r21
    c184:	1025883a 	mov	r18,r2
    c188:	000cac00 	call	cac0 <__mulsi3>
    c18c:	b009883a 	mov	r4,r22
    c190:	a80b883a 	mov	r5,r21
    c194:	1023883a 	mov	r17,r2
    c198:	000cac00 	call	cac0 <__mulsi3>
    c19c:	e006d43a 	srli	r3,fp,16
    c1a0:	9085883a 	add	r2,r18,r2
    c1a4:	10c7883a 	add	r3,r2,r3
    c1a8:	1c80022e 	bgeu	r3,r18,c1b4 <__udivdi3+0x47c>
    c1ac:	00800074 	movhi	r2,1
    c1b0:	88a3883a 	add	r17,r17,r2
    c1b4:	1808d43a 	srli	r4,r3,16
    c1b8:	8909883a 	add	r4,r17,r4
    c1bc:	81004436 	bltu	r16,r4,c2d0 <__udivdi3+0x598>
    c1c0:	81003e26 	beq	r16,r4,c2bc <__udivdi3+0x584>
    c1c4:	a005883a 	mov	r2,r20
    c1c8:	0007883a 	mov	r3,zero
    c1cc:	003f8f06 	br	c00c <__alt_data_end+0xfffb68dc>
    c1d0:	91e4983a 	sll	r18,r18,r7
    c1d4:	80eed83a 	srl	r23,r16,r3
    c1d8:	81cc983a 	sll	r6,r16,r7
    c1dc:	9028d43a 	srli	r20,r18,16
    c1e0:	98c6d83a 	srl	r3,r19,r3
    c1e4:	b809883a 	mov	r4,r23
    c1e8:	a00b883a 	mov	r5,r20
    c1ec:	30ecb03a 	or	r22,r6,r3
    c1f0:	99e2983a 	sll	r17,r19,r7
    c1f4:	000cab80 	call	cab8 <__umodsi3>
    c1f8:	b809883a 	mov	r4,r23
    c1fc:	a00b883a 	mov	r5,r20
    c200:	1021883a 	mov	r16,r2
    c204:	957fffcc 	andi	r21,r18,65535
    c208:	000cab00 	call	cab0 <__udivsi3>
    c20c:	a80b883a 	mov	r5,r21
    c210:	1009883a 	mov	r4,r2
    c214:	102f883a 	mov	r23,r2
    c218:	000cac00 	call	cac0 <__mulsi3>
    c21c:	8020943a 	slli	r16,r16,16
    c220:	b00ad43a 	srli	r5,r22,16
    c224:	814cb03a 	or	r6,r16,r5
    c228:	3080062e 	bgeu	r6,r2,c244 <__udivdi3+0x50c>
    c22c:	348d883a 	add	r6,r6,r18
    c230:	b8ffffc4 	addi	r3,r23,-1
    c234:	34804836 	bltu	r6,r18,c358 <__udivdi3+0x620>
    c238:	3080472e 	bgeu	r6,r2,c358 <__udivdi3+0x620>
    c23c:	bdffff84 	addi	r23,r23,-2
    c240:	348d883a 	add	r6,r6,r18
    c244:	30a7c83a 	sub	r19,r6,r2
    c248:	9809883a 	mov	r4,r19
    c24c:	a00b883a 	mov	r5,r20
    c250:	000cab80 	call	cab8 <__umodsi3>
    c254:	9809883a 	mov	r4,r19
    c258:	a00b883a 	mov	r5,r20
    c25c:	1039883a 	mov	fp,r2
    c260:	000cab00 	call	cab0 <__udivsi3>
    c264:	1009883a 	mov	r4,r2
    c268:	a80b883a 	mov	r5,r21
    c26c:	e038943a 	slli	fp,fp,16
    c270:	1027883a 	mov	r19,r2
    c274:	000cac00 	call	cac0 <__mulsi3>
    c278:	b1bfffcc 	andi	r6,r22,65535
    c27c:	e18cb03a 	or	r6,fp,r6
    c280:	3080062e 	bgeu	r6,r2,c29c <__udivdi3+0x564>
    c284:	348d883a 	add	r6,r6,r18
    c288:	98ffffc4 	addi	r3,r19,-1
    c28c:	34803036 	bltu	r6,r18,c350 <__udivdi3+0x618>
    c290:	30802f2e 	bgeu	r6,r2,c350 <__udivdi3+0x618>
    c294:	9cffff84 	addi	r19,r19,-2
    c298:	348d883a 	add	r6,r6,r18
    c29c:	b82e943a 	slli	r23,r23,16
    c2a0:	30a1c83a 	sub	r16,r6,r2
    c2a4:	9dc6b03a 	or	r3,r19,r23
    c2a8:	003f2606 	br	bf44 <__alt_data_end+0xfffb6814>
    c2ac:	2027883a 	mov	r19,r4
    c2b0:	003f5106 	br	bff8 <__alt_data_end+0xfffb68c8>
    c2b4:	1827883a 	mov	r19,r3
    c2b8:	003ef006 	br	be7c <__alt_data_end+0xfffb674c>
    c2bc:	1808943a 	slli	r4,r3,16
    c2c0:	9dc6983a 	sll	r3,r19,r23
    c2c4:	e73fffcc 	andi	fp,fp,65535
    c2c8:	2709883a 	add	r4,r4,fp
    c2cc:	193fbd2e 	bgeu	r3,r4,c1c4 <__alt_data_end+0xfffb6a94>
    c2d0:	a0bfffc4 	addi	r2,r20,-1
    c2d4:	0007883a 	mov	r3,zero
    c2d8:	003f4c06 	br	c00c <__alt_data_end+0xfffb68dc>
    c2dc:	01400404 	movi	r5,16
    c2e0:	2811883a 	mov	r8,r5
    c2e4:	003ef106 	br	beac <__alt_data_end+0xfffb677c>
    c2e8:	000b883a 	mov	r5,zero
    c2ec:	0011883a 	mov	r8,zero
    c2f0:	003eee06 	br	beac <__alt_data_end+0xfffb677c>
    c2f4:	00800404 	movi	r2,16
    c2f8:	1007883a 	mov	r3,r2
    c2fc:	003ea606 	br	bd98 <__alt_data_end+0xfffb6668>
    c300:	00800404 	movi	r2,16
    c304:	1007883a 	mov	r3,r2
    c308:	003f0106 	br	bf10 <__alt_data_end+0xfffb67e0>
    c30c:	0005883a 	mov	r2,zero
    c310:	0007883a 	mov	r3,zero
    c314:	003efe06 	br	bf10 <__alt_data_end+0xfffb67e0>
    c318:	0005883a 	mov	r2,zero
    c31c:	0007883a 	mov	r3,zero
    c320:	003e9d06 	br	bd98 <__alt_data_end+0xfffb6668>
    c324:	0007883a 	mov	r3,zero
    c328:	00800044 	movi	r2,1
    c32c:	003f3706 	br	c00c <__alt_data_end+0xfffb68dc>
    c330:	80bf832e 	bgeu	r16,r2,c140 <__alt_data_end+0xfffb6a10>
    c334:	8c7fff84 	addi	r17,r17,-2
    c338:	8721883a 	add	r16,r16,fp
    c33c:	003f8106 	br	c144 <__alt_data_end+0xfffb6a14>
    c340:	48bf6a2e 	bgeu	r9,r2,c0ec <__alt_data_end+0xfffb69bc>
    c344:	a53fff84 	addi	r20,r20,-2
    c348:	4f13883a 	add	r9,r9,fp
    c34c:	003f6806 	br	c0f0 <__alt_data_end+0xfffb69c0>
    c350:	1827883a 	mov	r19,r3
    c354:	003fd106 	br	c29c <__alt_data_end+0xfffb6b6c>
    c358:	182f883a 	mov	r23,r3
    c35c:	003fb906 	br	c244 <__alt_data_end+0xfffb6b14>
    c360:	843fff84 	addi	r16,r16,-2
    c364:	348d883a 	add	r6,r6,r18
    c368:	003f0c06 	br	bf9c <__alt_data_end+0xfffb686c>
    c36c:	843fff84 	addi	r16,r16,-2
    c370:	1c87883a 	add	r3,r3,r18
    c374:	003eac06 	br	be28 <__alt_data_end+0xfffb66f8>

0000c378 <__umoddi3>:
    c378:	defff404 	addi	sp,sp,-48
    c37c:	dd800815 	stw	r22,32(sp)
    c380:	dc400315 	stw	r17,12(sp)
    c384:	dc000215 	stw	r16,8(sp)
    c388:	dfc00b15 	stw	ra,44(sp)
    c38c:	df000a15 	stw	fp,40(sp)
    c390:	ddc00915 	stw	r23,36(sp)
    c394:	dd400715 	stw	r21,28(sp)
    c398:	dd000615 	stw	r20,24(sp)
    c39c:	dcc00515 	stw	r19,20(sp)
    c3a0:	dc800415 	stw	r18,16(sp)
    c3a4:	2021883a 	mov	r16,r4
    c3a8:	2823883a 	mov	r17,r5
    c3ac:	282d883a 	mov	r22,r5
    c3b0:	38003c1e 	bne	r7,zero,c4a4 <__umoddi3+0x12c>
    c3b4:	3027883a 	mov	r19,r6
    c3b8:	2029883a 	mov	r20,r4
    c3bc:	2980522e 	bgeu	r5,r6,c508 <__umoddi3+0x190>
    c3c0:	00bfffd4 	movui	r2,65535
    c3c4:	1180a436 	bltu	r2,r6,c658 <__umoddi3+0x2e0>
    c3c8:	00803fc4 	movi	r2,255
    c3cc:	11815e2e 	bgeu	r2,r6,c948 <__umoddi3+0x5d0>
    c3d0:	01400204 	movi	r5,8
    c3d4:	2805883a 	mov	r2,r5
    c3d8:	314ad83a 	srl	r5,r6,r5
    c3dc:	00c00074 	movhi	r3,1
    c3e0:	18c92f04 	addi	r3,r3,9404
    c3e4:	194b883a 	add	r5,r3,r5
    c3e8:	29000003 	ldbu	r4,0(r5)
    c3ec:	2089883a 	add	r4,r4,r2
    c3f0:	00800804 	movi	r2,32
    c3f4:	1105c83a 	sub	r2,r2,r4
    c3f8:	10010c26 	beq	r2,zero,c82c <__umoddi3+0x4b4>
    c3fc:	88a2983a 	sll	r17,r17,r2
    c400:	8108d83a 	srl	r4,r16,r4
    c404:	30a6983a 	sll	r19,r6,r2
    c408:	80a8983a 	sll	r20,r16,r2
    c40c:	1025883a 	mov	r18,r2
    c410:	892cb03a 	or	r22,r17,r4
    c414:	9822d43a 	srli	r17,r19,16
    c418:	b009883a 	mov	r4,r22
    c41c:	9d7fffcc 	andi	r21,r19,65535
    c420:	880b883a 	mov	r5,r17
    c424:	000cab80 	call	cab8 <__umodsi3>
    c428:	b009883a 	mov	r4,r22
    c42c:	880b883a 	mov	r5,r17
    c430:	102f883a 	mov	r23,r2
    c434:	000cab00 	call	cab0 <__udivsi3>
    c438:	1009883a 	mov	r4,r2
    c43c:	a80b883a 	mov	r5,r21
    c440:	000cac00 	call	cac0 <__mulsi3>
    c444:	b82e943a 	slli	r23,r23,16
    c448:	a008d43a 	srli	r4,r20,16
    c44c:	b906b03a 	or	r3,r23,r4
    c450:	1880042e 	bgeu	r3,r2,c464 <__umoddi3+0xec>
    c454:	1cc7883a 	add	r3,r3,r19
    c458:	1cc00236 	bltu	r3,r19,c464 <__umoddi3+0xec>
    c45c:	1880012e 	bgeu	r3,r2,c464 <__umoddi3+0xec>
    c460:	1cc7883a 	add	r3,r3,r19
    c464:	18a1c83a 	sub	r16,r3,r2
    c468:	8009883a 	mov	r4,r16
    c46c:	880b883a 	mov	r5,r17
    c470:	000cab80 	call	cab8 <__umodsi3>
    c474:	8009883a 	mov	r4,r16
    c478:	880b883a 	mov	r5,r17
    c47c:	102d883a 	mov	r22,r2
    c480:	000cab00 	call	cab0 <__udivsi3>
    c484:	1009883a 	mov	r4,r2
    c488:	a80b883a 	mov	r5,r21
    c48c:	b02c943a 	slli	r22,r22,16
    c490:	000cac00 	call	cac0 <__mulsi3>
    c494:	a13fffcc 	andi	r4,r20,65535
    c498:	b106b03a 	or	r3,r22,r4
    c49c:	1880572e 	bgeu	r3,r2,c5fc <__umoddi3+0x284>
    c4a0:	00005206 	br	c5ec <__umoddi3+0x274>
    c4a4:	29c05936 	bltu	r5,r7,c60c <__umoddi3+0x294>
    c4a8:	00bfffd4 	movui	r2,65535
    c4ac:	11c0652e 	bgeu	r2,r7,c644 <__umoddi3+0x2cc>
    c4b0:	00804034 	movhi	r2,256
    c4b4:	10bfffc4 	addi	r2,r2,-1
    c4b8:	11c1172e 	bgeu	r2,r7,c918 <__umoddi3+0x5a0>
    c4bc:	01400604 	movi	r5,24
    c4c0:	282b883a 	mov	r21,r5
    c4c4:	394ad83a 	srl	r5,r7,r5
    c4c8:	00c00074 	movhi	r3,1
    c4cc:	18c92f04 	addi	r3,r3,9404
    c4d0:	194b883a 	add	r5,r3,r5
    c4d4:	28800003 	ldbu	r2,0(r5)
    c4d8:	00c00804 	movi	r3,32
    c4dc:	156b883a 	add	r21,r2,r21
    c4e0:	1d69c83a 	sub	r20,r3,r21
    c4e4:	a000671e 	bne	r20,zero,c684 <__umoddi3+0x30c>
    c4e8:	3c400136 	bltu	r7,r17,c4f0 <__umoddi3+0x178>
    c4ec:	81812336 	bltu	r16,r6,c97c <__umoddi3+0x604>
    c4f0:	8185c83a 	sub	r2,r16,r6
    c4f4:	89e3c83a 	sub	r17,r17,r7
    c4f8:	8087803a 	cmpltu	r3,r16,r2
    c4fc:	88edc83a 	sub	r22,r17,r3
    c500:	b007883a 	mov	r3,r22
    c504:	00004306 	br	c614 <__umoddi3+0x29c>
    c508:	3000041e 	bne	r6,zero,c51c <__umoddi3+0x1a4>
    c50c:	01000044 	movi	r4,1
    c510:	000b883a 	mov	r5,zero
    c514:	000cab00 	call	cab0 <__udivsi3>
    c518:	1027883a 	mov	r19,r2
    c51c:	00bfffd4 	movui	r2,65535
    c520:	14c0532e 	bgeu	r2,r19,c670 <__umoddi3+0x2f8>
    c524:	00804034 	movhi	r2,256
    c528:	10bfffc4 	addi	r2,r2,-1
    c52c:	14c1032e 	bgeu	r2,r19,c93c <__umoddi3+0x5c4>
    c530:	00800604 	movi	r2,24
    c534:	1007883a 	mov	r3,r2
    c538:	9884d83a 	srl	r2,r19,r2
    c53c:	01000074 	movhi	r4,1
    c540:	21092f04 	addi	r4,r4,9404
    c544:	2085883a 	add	r2,r4,r2
    c548:	11000003 	ldbu	r4,0(r2)
    c54c:	00800804 	movi	r2,32
    c550:	20c7883a 	add	r3,r4,r3
    c554:	10c5c83a 	sub	r2,r2,r3
    c558:	1000b61e 	bne	r2,zero,c834 <__umoddi3+0x4bc>
    c55c:	982ad43a 	srli	r21,r19,16
    c560:	8ce3c83a 	sub	r17,r17,r19
    c564:	9dbfffcc 	andi	r22,r19,65535
    c568:	0025883a 	mov	r18,zero
    c56c:	8809883a 	mov	r4,r17
    c570:	a80b883a 	mov	r5,r21
    c574:	000cab80 	call	cab8 <__umodsi3>
    c578:	8809883a 	mov	r4,r17
    c57c:	a80b883a 	mov	r5,r21
    c580:	102f883a 	mov	r23,r2
    c584:	000cab00 	call	cab0 <__udivsi3>
    c588:	1009883a 	mov	r4,r2
    c58c:	b00b883a 	mov	r5,r22
    c590:	000cac00 	call	cac0 <__mulsi3>
    c594:	b82e943a 	slli	r23,r23,16
    c598:	a008d43a 	srli	r4,r20,16
    c59c:	b906b03a 	or	r3,r23,r4
    c5a0:	1880032e 	bgeu	r3,r2,c5b0 <__umoddi3+0x238>
    c5a4:	1cc7883a 	add	r3,r3,r19
    c5a8:	1cc00136 	bltu	r3,r19,c5b0 <__umoddi3+0x238>
    c5ac:	1880f136 	bltu	r3,r2,c974 <__umoddi3+0x5fc>
    c5b0:	18a1c83a 	sub	r16,r3,r2
    c5b4:	8009883a 	mov	r4,r16
    c5b8:	a80b883a 	mov	r5,r21
    c5bc:	000cab80 	call	cab8 <__umodsi3>
    c5c0:	8009883a 	mov	r4,r16
    c5c4:	a80b883a 	mov	r5,r21
    c5c8:	1023883a 	mov	r17,r2
    c5cc:	000cab00 	call	cab0 <__udivsi3>
    c5d0:	1009883a 	mov	r4,r2
    c5d4:	b00b883a 	mov	r5,r22
    c5d8:	8822943a 	slli	r17,r17,16
    c5dc:	000cac00 	call	cac0 <__mulsi3>
    c5e0:	a13fffcc 	andi	r4,r20,65535
    c5e4:	8906b03a 	or	r3,r17,r4
    c5e8:	1880042e 	bgeu	r3,r2,c5fc <__umoddi3+0x284>
    c5ec:	1cc7883a 	add	r3,r3,r19
    c5f0:	1cc00236 	bltu	r3,r19,c5fc <__umoddi3+0x284>
    c5f4:	1880012e 	bgeu	r3,r2,c5fc <__umoddi3+0x284>
    c5f8:	1cc7883a 	add	r3,r3,r19
    c5fc:	1887c83a 	sub	r3,r3,r2
    c600:	1c84d83a 	srl	r2,r3,r18
    c604:	0007883a 	mov	r3,zero
    c608:	00000206 	br	c614 <__umoddi3+0x29c>
    c60c:	2005883a 	mov	r2,r4
    c610:	2807883a 	mov	r3,r5
    c614:	dfc00b17 	ldw	ra,44(sp)
    c618:	df000a17 	ldw	fp,40(sp)
    c61c:	ddc00917 	ldw	r23,36(sp)
    c620:	dd800817 	ldw	r22,32(sp)
    c624:	dd400717 	ldw	r21,28(sp)
    c628:	dd000617 	ldw	r20,24(sp)
    c62c:	dcc00517 	ldw	r19,20(sp)
    c630:	dc800417 	ldw	r18,16(sp)
    c634:	dc400317 	ldw	r17,12(sp)
    c638:	dc000217 	ldw	r16,8(sp)
    c63c:	dec00c04 	addi	sp,sp,48
    c640:	f800283a 	ret
    c644:	00803fc4 	movi	r2,255
    c648:	11c0b02e 	bgeu	r2,r7,c90c <__umoddi3+0x594>
    c64c:	01400204 	movi	r5,8
    c650:	282b883a 	mov	r21,r5
    c654:	003f9b06 	br	c4c4 <__alt_data_end+0xfffb6d94>
    c658:	00804034 	movhi	r2,256
    c65c:	10bfffc4 	addi	r2,r2,-1
    c660:	1180b02e 	bgeu	r2,r6,c924 <__umoddi3+0x5ac>
    c664:	01400604 	movi	r5,24
    c668:	2805883a 	mov	r2,r5
    c66c:	003f5a06 	br	c3d8 <__alt_data_end+0xfffb6ca8>
    c670:	00803fc4 	movi	r2,255
    c674:	14c0ae2e 	bgeu	r2,r19,c930 <__umoddi3+0x5b8>
    c678:	00800204 	movi	r2,8
    c67c:	1007883a 	mov	r3,r2
    c680:	003fad06 	br	c538 <__alt_data_end+0xfffb6e08>
    c684:	3d0a983a 	sll	r5,r7,r20
    c688:	356cd83a 	srl	r22,r6,r21
    c68c:	8d78d83a 	srl	fp,r17,r21
    c690:	8d10983a 	sll	r8,r17,r20
    c694:	2dacb03a 	or	r22,r5,r22
    c698:	b02ed43a 	srli	r23,r22,16
    c69c:	8564d83a 	srl	r18,r16,r21
    c6a0:	e009883a 	mov	r4,fp
    c6a4:	b80b883a 	mov	r5,r23
    c6a8:	44a4b03a 	or	r18,r8,r18
    c6ac:	3526983a 	sll	r19,r6,r20
    c6b0:	000cab80 	call	cab8 <__umodsi3>
    c6b4:	e009883a 	mov	r4,fp
    c6b8:	b80b883a 	mov	r5,r23
    c6bc:	b47fffcc 	andi	r17,r22,65535
    c6c0:	d8800015 	stw	r2,0(sp)
    c6c4:	000cab00 	call	cab0 <__udivsi3>
    c6c8:	1009883a 	mov	r4,r2
    c6cc:	880b883a 	mov	r5,r17
    c6d0:	1039883a 	mov	fp,r2
    c6d4:	000cac00 	call	cac0 <__mulsi3>
    c6d8:	d9800017 	ldw	r6,0(sp)
    c6dc:	9008d43a 	srli	r4,r18,16
    c6e0:	8520983a 	sll	r16,r16,r20
    c6e4:	300c943a 	slli	r6,r6,16
    c6e8:	3106b03a 	or	r3,r6,r4
    c6ec:	1880042e 	bgeu	r3,r2,c700 <__umoddi3+0x388>
    c6f0:	1d87883a 	add	r3,r3,r22
    c6f4:	e13fffc4 	addi	r4,fp,-1
    c6f8:	1d809a2e 	bgeu	r3,r22,c964 <__umoddi3+0x5ec>
    c6fc:	2039883a 	mov	fp,r4
    c700:	1887c83a 	sub	r3,r3,r2
    c704:	1809883a 	mov	r4,r3
    c708:	b80b883a 	mov	r5,r23
    c70c:	d8c00115 	stw	r3,4(sp)
    c710:	000cab80 	call	cab8 <__umodsi3>
    c714:	d8c00117 	ldw	r3,4(sp)
    c718:	b80b883a 	mov	r5,r23
    c71c:	d8800015 	stw	r2,0(sp)
    c720:	1809883a 	mov	r4,r3
    c724:	000cab00 	call	cab0 <__udivsi3>
    c728:	880b883a 	mov	r5,r17
    c72c:	1009883a 	mov	r4,r2
    c730:	102f883a 	mov	r23,r2
    c734:	000cac00 	call	cac0 <__mulsi3>
    c738:	d9800017 	ldw	r6,0(sp)
    c73c:	947fffcc 	andi	r17,r18,65535
    c740:	300c943a 	slli	r6,r6,16
    c744:	3464b03a 	or	r18,r6,r17
    c748:	9080042e 	bgeu	r18,r2,c75c <__umoddi3+0x3e4>
    c74c:	95a5883a 	add	r18,r18,r22
    c750:	b8ffffc4 	addi	r3,r23,-1
    c754:	95807f2e 	bgeu	r18,r22,c954 <__umoddi3+0x5dc>
    c758:	182f883a 	mov	r23,r3
    c75c:	e038943a 	slli	fp,fp,16
    c760:	980cd43a 	srli	r6,r19,16
    c764:	98ffffcc 	andi	r3,r19,65535
    c768:	bf38b03a 	or	fp,r23,fp
    c76c:	e02ed43a 	srli	r23,fp,16
    c770:	e73fffcc 	andi	fp,fp,65535
    c774:	180b883a 	mov	r5,r3
    c778:	e009883a 	mov	r4,fp
    c77c:	d9800015 	stw	r6,0(sp)
    c780:	d8c00115 	stw	r3,4(sp)
    c784:	90a5c83a 	sub	r18,r18,r2
    c788:	000cac00 	call	cac0 <__mulsi3>
    c78c:	d8c00117 	ldw	r3,4(sp)
    c790:	b809883a 	mov	r4,r23
    c794:	1023883a 	mov	r17,r2
    c798:	180b883a 	mov	r5,r3
    c79c:	000cac00 	call	cac0 <__mulsi3>
    c7a0:	d9800017 	ldw	r6,0(sp)
    c7a4:	b809883a 	mov	r4,r23
    c7a8:	d8800115 	stw	r2,4(sp)
    c7ac:	300b883a 	mov	r5,r6
    c7b0:	302f883a 	mov	r23,r6
    c7b4:	000cac00 	call	cac0 <__mulsi3>
    c7b8:	e009883a 	mov	r4,fp
    c7bc:	b80b883a 	mov	r5,r23
    c7c0:	d8800015 	stw	r2,0(sp)
    c7c4:	000cac00 	call	cac0 <__mulsi3>
    c7c8:	d8c00117 	ldw	r3,4(sp)
    c7cc:	880cd43a 	srli	r6,r17,16
    c7d0:	d9c00017 	ldw	r7,0(sp)
    c7d4:	1885883a 	add	r2,r3,r2
    c7d8:	118d883a 	add	r6,r2,r6
    c7dc:	30c0022e 	bgeu	r6,r3,c7e8 <__umoddi3+0x470>
    c7e0:	00800074 	movhi	r2,1
    c7e4:	388f883a 	add	r7,r7,r2
    c7e8:	3006d43a 	srli	r3,r6,16
    c7ec:	300c943a 	slli	r6,r6,16
    c7f0:	8c7fffcc 	andi	r17,r17,65535
    c7f4:	38c7883a 	add	r3,r7,r3
    c7f8:	3463883a 	add	r17,r6,r17
    c7fc:	90c03d36 	bltu	r18,r3,c8f4 <__umoddi3+0x57c>
    c800:	90c06026 	beq	r18,r3,c984 <__umoddi3+0x60c>
    c804:	90c9c83a 	sub	r4,r18,r3
    c808:	880f883a 	mov	r7,r17
    c80c:	81cfc83a 	sub	r7,r16,r7
    c810:	81c7803a 	cmpltu	r3,r16,r7
    c814:	20c7c83a 	sub	r3,r4,r3
    c818:	1d44983a 	sll	r2,r3,r21
    c81c:	3d0ed83a 	srl	r7,r7,r20
    c820:	1d06d83a 	srl	r3,r3,r20
    c824:	11c4b03a 	or	r2,r2,r7
    c828:	003f7a06 	br	c614 <__alt_data_end+0xfffb6ee4>
    c82c:	0025883a 	mov	r18,zero
    c830:	003ef806 	br	c414 <__alt_data_end+0xfffb6ce4>
    c834:	98a6983a 	sll	r19,r19,r2
    c838:	88e8d83a 	srl	r20,r17,r3
    c83c:	80c6d83a 	srl	r3,r16,r3
    c840:	982ad43a 	srli	r21,r19,16
    c844:	88a2983a 	sll	r17,r17,r2
    c848:	a009883a 	mov	r4,r20
    c84c:	a80b883a 	mov	r5,r21
    c850:	88eeb03a 	or	r23,r17,r3
    c854:	1025883a 	mov	r18,r2
    c858:	000cab80 	call	cab8 <__umodsi3>
    c85c:	a009883a 	mov	r4,r20
    c860:	a80b883a 	mov	r5,r21
    c864:	1023883a 	mov	r17,r2
    c868:	9dbfffcc 	andi	r22,r19,65535
    c86c:	000cab00 	call	cab0 <__udivsi3>
    c870:	1009883a 	mov	r4,r2
    c874:	b00b883a 	mov	r5,r22
    c878:	000cac00 	call	cac0 <__mulsi3>
    c87c:	8822943a 	slli	r17,r17,16
    c880:	b808d43a 	srli	r4,r23,16
    c884:	84a8983a 	sll	r20,r16,r18
    c888:	8906b03a 	or	r3,r17,r4
    c88c:	1880042e 	bgeu	r3,r2,c8a0 <__umoddi3+0x528>
    c890:	1cc7883a 	add	r3,r3,r19
    c894:	1cc00236 	bltu	r3,r19,c8a0 <__umoddi3+0x528>
    c898:	1880012e 	bgeu	r3,r2,c8a0 <__umoddi3+0x528>
    c89c:	1cc7883a 	add	r3,r3,r19
    c8a0:	18a1c83a 	sub	r16,r3,r2
    c8a4:	8009883a 	mov	r4,r16
    c8a8:	a80b883a 	mov	r5,r21
    c8ac:	000cab80 	call	cab8 <__umodsi3>
    c8b0:	8009883a 	mov	r4,r16
    c8b4:	a80b883a 	mov	r5,r21
    c8b8:	1039883a 	mov	fp,r2
    c8bc:	000cab00 	call	cab0 <__udivsi3>
    c8c0:	1009883a 	mov	r4,r2
    c8c4:	b00b883a 	mov	r5,r22
    c8c8:	000cac00 	call	cac0 <__mulsi3>
    c8cc:	e006943a 	slli	r3,fp,16
    c8d0:	b93fffcc 	andi	r4,r23,65535
    c8d4:	1906b03a 	or	r3,r3,r4
    c8d8:	1880042e 	bgeu	r3,r2,c8ec <__umoddi3+0x574>
    c8dc:	1cc7883a 	add	r3,r3,r19
    c8e0:	1cc00236 	bltu	r3,r19,c8ec <__umoddi3+0x574>
    c8e4:	1880012e 	bgeu	r3,r2,c8ec <__umoddi3+0x574>
    c8e8:	1cc7883a 	add	r3,r3,r19
    c8ec:	18a3c83a 	sub	r17,r3,r2
    c8f0:	003f1e06 	br	c56c <__alt_data_end+0xfffb6e3c>
    c8f4:	8ccfc83a 	sub	r7,r17,r19
    c8f8:	1d89c83a 	sub	r4,r3,r22
    c8fc:	89e3803a 	cmpltu	r17,r17,r7
    c900:	2463c83a 	sub	r17,r4,r17
    c904:	9449c83a 	sub	r4,r18,r17
    c908:	003fc006 	br	c80c <__alt_data_end+0xfffb70dc>
    c90c:	000b883a 	mov	r5,zero
    c910:	002b883a 	mov	r21,zero
    c914:	003eeb06 	br	c4c4 <__alt_data_end+0xfffb6d94>
    c918:	01400404 	movi	r5,16
    c91c:	282b883a 	mov	r21,r5
    c920:	003ee806 	br	c4c4 <__alt_data_end+0xfffb6d94>
    c924:	01400404 	movi	r5,16
    c928:	2805883a 	mov	r2,r5
    c92c:	003eaa06 	br	c3d8 <__alt_data_end+0xfffb6ca8>
    c930:	0005883a 	mov	r2,zero
    c934:	0007883a 	mov	r3,zero
    c938:	003eff06 	br	c538 <__alt_data_end+0xfffb6e08>
    c93c:	00800404 	movi	r2,16
    c940:	1007883a 	mov	r3,r2
    c944:	003efc06 	br	c538 <__alt_data_end+0xfffb6e08>
    c948:	000b883a 	mov	r5,zero
    c94c:	0005883a 	mov	r2,zero
    c950:	003ea106 	br	c3d8 <__alt_data_end+0xfffb6ca8>
    c954:	90bf802e 	bgeu	r18,r2,c758 <__alt_data_end+0xfffb7028>
    c958:	bdffff84 	addi	r23,r23,-2
    c95c:	95a5883a 	add	r18,r18,r22
    c960:	003f7e06 	br	c75c <__alt_data_end+0xfffb702c>
    c964:	18bf652e 	bgeu	r3,r2,c6fc <__alt_data_end+0xfffb6fcc>
    c968:	e73fff84 	addi	fp,fp,-2
    c96c:	1d87883a 	add	r3,r3,r22
    c970:	003f6306 	br	c700 <__alt_data_end+0xfffb6fd0>
    c974:	1cc7883a 	add	r3,r3,r19
    c978:	003f0d06 	br	c5b0 <__alt_data_end+0xfffb6e80>
    c97c:	8005883a 	mov	r2,r16
    c980:	003edf06 	br	c500 <__alt_data_end+0xfffb6dd0>
    c984:	847fdb36 	bltu	r16,r17,c8f4 <__alt_data_end+0xfffb71c4>
    c988:	880f883a 	mov	r7,r17
    c98c:	0009883a 	mov	r4,zero
    c990:	003f9e06 	br	c80c <__alt_data_end+0xfffb70dc>

0000c994 <udivmodsi4>:
    c994:	2900182e 	bgeu	r5,r4,c9f8 <udivmodsi4+0x64>
    c998:	28001716 	blt	r5,zero,c9f8 <udivmodsi4+0x64>
    c99c:	00800804 	movi	r2,32
    c9a0:	00c00044 	movi	r3,1
    c9a4:	00000206 	br	c9b0 <udivmodsi4+0x1c>
    c9a8:	10001126 	beq	r2,zero,c9f0 <udivmodsi4+0x5c>
    c9ac:	28000516 	blt	r5,zero,c9c4 <udivmodsi4+0x30>
    c9b0:	294b883a 	add	r5,r5,r5
    c9b4:	10bfffc4 	addi	r2,r2,-1
    c9b8:	18c7883a 	add	r3,r3,r3
    c9bc:	293ffa36 	bltu	r5,r4,c9a8 <__alt_data_end+0xfffb7278>
    c9c0:	18000b26 	beq	r3,zero,c9f0 <udivmodsi4+0x5c>
    c9c4:	0005883a 	mov	r2,zero
    c9c8:	21400236 	bltu	r4,r5,c9d4 <udivmodsi4+0x40>
    c9cc:	2149c83a 	sub	r4,r4,r5
    c9d0:	10c4b03a 	or	r2,r2,r3
    c9d4:	1806d07a 	srli	r3,r3,1
    c9d8:	280ad07a 	srli	r5,r5,1
    c9dc:	183ffa1e 	bne	r3,zero,c9c8 <__alt_data_end+0xfffb7298>
    c9e0:	3000011e 	bne	r6,zero,c9e8 <udivmodsi4+0x54>
    c9e4:	f800283a 	ret
    c9e8:	2005883a 	mov	r2,r4
    c9ec:	f800283a 	ret
    c9f0:	0005883a 	mov	r2,zero
    c9f4:	003ffa06 	br	c9e0 <__alt_data_end+0xfffb72b0>
    c9f8:	00c00044 	movi	r3,1
    c9fc:	003ff106 	br	c9c4 <__alt_data_end+0xfffb7294>

0000ca00 <__divsi3>:
    ca00:	defffe04 	addi	sp,sp,-8
    ca04:	dfc00115 	stw	ra,4(sp)
    ca08:	dc000015 	stw	r16,0(sp)
    ca0c:	20000b16 	blt	r4,zero,ca3c <__divsi3+0x3c>
    ca10:	0021883a 	mov	r16,zero
    ca14:	28000c16 	blt	r5,zero,ca48 <__divsi3+0x48>
    ca18:	000d883a 	mov	r6,zero
    ca1c:	000c9940 	call	c994 <udivmodsi4>
    ca20:	0407c83a 	sub	r3,zero,r16
    ca24:	1884f03a 	xor	r2,r3,r2
    ca28:	1405883a 	add	r2,r2,r16
    ca2c:	dfc00117 	ldw	ra,4(sp)
    ca30:	dc000017 	ldw	r16,0(sp)
    ca34:	dec00204 	addi	sp,sp,8
    ca38:	f800283a 	ret
    ca3c:	0109c83a 	sub	r4,zero,r4
    ca40:	04000044 	movi	r16,1
    ca44:	283ff40e 	bge	r5,zero,ca18 <__alt_data_end+0xfffb72e8>
    ca48:	014bc83a 	sub	r5,zero,r5
    ca4c:	8400005c 	xori	r16,r16,1
    ca50:	003ff106 	br	ca18 <__alt_data_end+0xfffb72e8>

0000ca54 <__modsi3>:
    ca54:	defffd04 	addi	sp,sp,-12
    ca58:	dfc00215 	stw	ra,8(sp)
    ca5c:	dc400115 	stw	r17,4(sp)
    ca60:	dc000015 	stw	r16,0(sp)
    ca64:	20000c16 	blt	r4,zero,ca98 <__modsi3+0x44>
    ca68:	0023883a 	mov	r17,zero
    ca6c:	0021883a 	mov	r16,zero
    ca70:	28000d16 	blt	r5,zero,caa8 <__modsi3+0x54>
    ca74:	01800044 	movi	r6,1
    ca78:	000c9940 	call	c994 <udivmodsi4>
    ca7c:	1404f03a 	xor	r2,r2,r16
    ca80:	8885883a 	add	r2,r17,r2
    ca84:	dfc00217 	ldw	ra,8(sp)
    ca88:	dc400117 	ldw	r17,4(sp)
    ca8c:	dc000017 	ldw	r16,0(sp)
    ca90:	dec00304 	addi	sp,sp,12
    ca94:	f800283a 	ret
    ca98:	0109c83a 	sub	r4,zero,r4
    ca9c:	04400044 	movi	r17,1
    caa0:	043fffc4 	movi	r16,-1
    caa4:	283ff30e 	bge	r5,zero,ca74 <__alt_data_end+0xfffb7344>
    caa8:	014bc83a 	sub	r5,zero,r5
    caac:	003ff106 	br	ca74 <__alt_data_end+0xfffb7344>

0000cab0 <__udivsi3>:
    cab0:	000d883a 	mov	r6,zero
    cab4:	000c9941 	jmpi	c994 <udivmodsi4>

0000cab8 <__umodsi3>:
    cab8:	01800044 	movi	r6,1
    cabc:	000c9941 	jmpi	c994 <udivmodsi4>

0000cac0 <__mulsi3>:
    cac0:	0005883a 	mov	r2,zero
    cac4:	20000726 	beq	r4,zero,cae4 <__mulsi3+0x24>
    cac8:	20c0004c 	andi	r3,r4,1
    cacc:	2008d07a 	srli	r4,r4,1
    cad0:	18000126 	beq	r3,zero,cad8 <__mulsi3+0x18>
    cad4:	1145883a 	add	r2,r2,r5
    cad8:	294b883a 	add	r5,r5,r5
    cadc:	203ffa1e 	bne	r4,zero,cac8 <__alt_data_end+0xfffb7398>
    cae0:	f800283a 	ret
    cae4:	f800283a 	ret

0000cae8 <__adddf3>:
    cae8:	02000434 	movhi	r8,16
    caec:	423fffc4 	addi	r8,r8,-1
    caf0:	defffb04 	addi	sp,sp,-20
    caf4:	2a12703a 	and	r9,r5,r8
    caf8:	2806d7fa 	srli	r3,r5,31
    cafc:	3a10703a 	and	r8,r7,r8
    cb00:	3804d53a 	srli	r2,r7,20
    cb04:	3014d77a 	srli	r10,r6,29
    cb08:	dc000015 	stw	r16,0(sp)
    cb0c:	481290fa 	slli	r9,r9,3
    cb10:	2820d53a 	srli	r16,r5,20
    cb14:	401090fa 	slli	r8,r8,3
    cb18:	200ad77a 	srli	r5,r4,29
    cb1c:	380ed7fa 	srli	r7,r7,31
    cb20:	dc800215 	stw	r18,8(sp)
    cb24:	dc400115 	stw	r17,4(sp)
    cb28:	dfc00415 	stw	ra,16(sp)
    cb2c:	dcc00315 	stw	r19,12(sp)
    cb30:	1c803fcc 	andi	r18,r3,255
    cb34:	8401ffcc 	andi	r16,r16,2047
    cb38:	494ab03a 	or	r5,r9,r5
    cb3c:	202290fa 	slli	r17,r4,3
    cb40:	1081ffcc 	andi	r2,r2,2047
    cb44:	4290b03a 	or	r8,r8,r10
    cb48:	300c90fa 	slli	r6,r6,3
    cb4c:	91c07026 	beq	r18,r7,cd10 <__adddf3+0x228>
    cb50:	8087c83a 	sub	r3,r16,r2
    cb54:	00c0b30e 	bge	zero,r3,ce24 <__adddf3+0x33c>
    cb58:	10002a1e 	bne	r2,zero,cc04 <__adddf3+0x11c>
    cb5c:	4184b03a 	or	r2,r8,r6
    cb60:	1000991e 	bne	r2,zero,cdc8 <__adddf3+0x2e0>
    cb64:	888001cc 	andi	r2,r17,7
    cb68:	10005b26 	beq	r2,zero,ccd8 <__adddf3+0x1f0>
    cb6c:	88c003cc 	andi	r3,r17,15
    cb70:	00800104 	movi	r2,4
    cb74:	18805826 	beq	r3,r2,ccd8 <__adddf3+0x1f0>
    cb78:	89800104 	addi	r6,r17,4
    cb7c:	3463803a 	cmpltu	r17,r6,r17
    cb80:	2c4b883a 	add	r5,r5,r17
    cb84:	2880202c 	andhi	r2,r5,128
    cb88:	9007883a 	mov	r3,r18
    cb8c:	3023883a 	mov	r17,r6
    cb90:	10005426 	beq	r2,zero,cce4 <__adddf3+0x1fc>
    cb94:	84000044 	addi	r16,r16,1
    cb98:	0081ffc4 	movi	r2,2047
    cb9c:	8080c126 	beq	r16,r2,cea4 <__adddf3+0x3bc>
    cba0:	013fe034 	movhi	r4,65408
    cba4:	213fffc4 	addi	r4,r4,-1
    cba8:	290a703a 	and	r5,r5,r4
    cbac:	2804977a 	slli	r2,r5,29
    cbb0:	280a927a 	slli	r5,r5,9
    cbb4:	8822d0fa 	srli	r17,r17,3
    cbb8:	8401ffcc 	andi	r16,r16,2047
    cbbc:	2808d33a 	srli	r4,r5,12
    cbc0:	1444b03a 	or	r2,r2,r17
    cbc4:	8401ffcc 	andi	r16,r16,2047
    cbc8:	800a953a 	slli	r5,r16,20
    cbcc:	18c03fcc 	andi	r3,r3,255
    cbd0:	04000434 	movhi	r16,16
    cbd4:	180697fa 	slli	r3,r3,31
    cbd8:	843fffc4 	addi	r16,r16,-1
    cbdc:	2420703a 	and	r16,r4,r16
    cbe0:	8160b03a 	or	r16,r16,r5
    cbe4:	80c6b03a 	or	r3,r16,r3
    cbe8:	dfc00417 	ldw	ra,16(sp)
    cbec:	dcc00317 	ldw	r19,12(sp)
    cbf0:	dc800217 	ldw	r18,8(sp)
    cbf4:	dc400117 	ldw	r17,4(sp)
    cbf8:	dc000017 	ldw	r16,0(sp)
    cbfc:	dec00504 	addi	sp,sp,20
    cc00:	f800283a 	ret
    cc04:	0081ffc4 	movi	r2,2047
    cc08:	80bfd626 	beq	r16,r2,cb64 <__alt_data_end+0xfffb7434>
    cc0c:	42002034 	orhi	r8,r8,128
    cc10:	00800e04 	movi	r2,56
    cc14:	10c0a616 	blt	r2,r3,ceb0 <__adddf3+0x3c8>
    cc18:	008007c4 	movi	r2,31
    cc1c:	10c0c916 	blt	r2,r3,cf44 <__adddf3+0x45c>
    cc20:	00800804 	movi	r2,32
    cc24:	10c5c83a 	sub	r2,r2,r3
    cc28:	408e983a 	sll	r7,r8,r2
    cc2c:	30c8d83a 	srl	r4,r6,r3
    cc30:	3084983a 	sll	r2,r6,r2
    cc34:	40c6d83a 	srl	r3,r8,r3
    cc38:	390cb03a 	or	r6,r7,r4
    cc3c:	1004c03a 	cmpne	r2,r2,zero
    cc40:	308cb03a 	or	r6,r6,r2
    cc44:	898dc83a 	sub	r6,r17,r6
    cc48:	89a3803a 	cmpltu	r17,r17,r6
    cc4c:	28cbc83a 	sub	r5,r5,r3
    cc50:	2c4bc83a 	sub	r5,r5,r17
    cc54:	3023883a 	mov	r17,r6
    cc58:	2880202c 	andhi	r2,r5,128
    cc5c:	10006d26 	beq	r2,zero,ce14 <__adddf3+0x32c>
    cc60:	04c02034 	movhi	r19,128
    cc64:	9cffffc4 	addi	r19,r19,-1
    cc68:	2ce6703a 	and	r19,r5,r19
    cc6c:	98007e26 	beq	r19,zero,ce68 <__adddf3+0x380>
    cc70:	9809883a 	mov	r4,r19
    cc74:	000f2800 	call	f280 <__clzsi2>
    cc78:	10fffe04 	addi	r3,r2,-8
    cc7c:	010007c4 	movi	r4,31
    cc80:	20c07f16 	blt	r4,r3,ce80 <__adddf3+0x398>
    cc84:	01400a04 	movi	r5,40
    cc88:	2885c83a 	sub	r2,r5,r2
    cc8c:	888ad83a 	srl	r5,r17,r2
    cc90:	98e6983a 	sll	r19,r19,r3
    cc94:	88e2983a 	sll	r17,r17,r3
    cc98:	2ce6b03a 	or	r19,r5,r19
    cc9c:	1c007c16 	blt	r3,r16,ce90 <__adddf3+0x3a8>
    cca0:	1c21c83a 	sub	r16,r3,r16
    cca4:	81400044 	addi	r5,r16,1
    cca8:	00c007c4 	movi	r3,31
    ccac:	19409816 	blt	r3,r5,cf10 <__adddf3+0x428>
    ccb0:	1c21c83a 	sub	r16,r3,r16
    ccb4:	8c08983a 	sll	r4,r17,r16
    ccb8:	8946d83a 	srl	r3,r17,r5
    ccbc:	9c20983a 	sll	r16,r19,r16
    ccc0:	2008c03a 	cmpne	r4,r4,zero
    ccc4:	994ad83a 	srl	r5,r19,r5
    ccc8:	1c06b03a 	or	r3,r3,r16
    cccc:	1922b03a 	or	r17,r3,r4
    ccd0:	0021883a 	mov	r16,zero
    ccd4:	003fa306 	br	cb64 <__alt_data_end+0xfffb7434>
    ccd8:	2880202c 	andhi	r2,r5,128
    ccdc:	9007883a 	mov	r3,r18
    cce0:	103fac1e 	bne	r2,zero,cb94 <__alt_data_end+0xfffb7464>
    cce4:	2804977a 	slli	r2,r5,29
    cce8:	8822d0fa 	srli	r17,r17,3
    ccec:	0101ffc4 	movi	r4,2047
    ccf0:	280ad0fa 	srli	r5,r5,3
    ccf4:	1444b03a 	or	r2,r2,r17
    ccf8:	81002c26 	beq	r16,r4,cdac <__adddf3+0x2c4>
    ccfc:	8120703a 	and	r16,r16,r4
    cd00:	01000434 	movhi	r4,16
    cd04:	213fffc4 	addi	r4,r4,-1
    cd08:	2908703a 	and	r4,r5,r4
    cd0c:	003fad06 	br	cbc4 <__alt_data_end+0xfffb7494>
    cd10:	8089c83a 	sub	r4,r16,r2
    cd14:	01006a0e 	bge	zero,r4,cec0 <__adddf3+0x3d8>
    cd18:	10003326 	beq	r2,zero,cde8 <__adddf3+0x300>
    cd1c:	0081ffc4 	movi	r2,2047
    cd20:	80bf9026 	beq	r16,r2,cb64 <__alt_data_end+0xfffb7434>
    cd24:	42002034 	orhi	r8,r8,128
    cd28:	00800e04 	movi	r2,56
    cd2c:	1100b116 	blt	r2,r4,cff4 <__adddf3+0x50c>
    cd30:	008007c4 	movi	r2,31
    cd34:	1100e216 	blt	r2,r4,d0c0 <__adddf3+0x5d8>
    cd38:	00800804 	movi	r2,32
    cd3c:	1105c83a 	sub	r2,r2,r4
    cd40:	4092983a 	sll	r9,r8,r2
    cd44:	310ed83a 	srl	r7,r6,r4
    cd48:	3084983a 	sll	r2,r6,r2
    cd4c:	4110d83a 	srl	r8,r8,r4
    cd50:	49ccb03a 	or	r6,r9,r7
    cd54:	1004c03a 	cmpne	r2,r2,zero
    cd58:	308cb03a 	or	r6,r6,r2
    cd5c:	344d883a 	add	r6,r6,r17
    cd60:	3463803a 	cmpltu	r17,r6,r17
    cd64:	414b883a 	add	r5,r8,r5
    cd68:	2c4b883a 	add	r5,r5,r17
    cd6c:	3023883a 	mov	r17,r6
    cd70:	2880202c 	andhi	r2,r5,128
    cd74:	10002726 	beq	r2,zero,ce14 <__adddf3+0x32c>
    cd78:	84000044 	addi	r16,r16,1
    cd7c:	0081ffc4 	movi	r2,2047
    cd80:	8080ae26 	beq	r16,r2,d03c <__adddf3+0x554>
    cd84:	00bfe034 	movhi	r2,65408
    cd88:	10bfffc4 	addi	r2,r2,-1
    cd8c:	288a703a 	and	r5,r5,r2
    cd90:	880cd07a 	srli	r6,r17,1
    cd94:	280897fa 	slli	r4,r5,31
    cd98:	88c0004c 	andi	r3,r17,1
    cd9c:	30e2b03a 	or	r17,r6,r3
    cda0:	280ad07a 	srli	r5,r5,1
    cda4:	8922b03a 	or	r17,r17,r4
    cda8:	003f6e06 	br	cb64 <__alt_data_end+0xfffb7434>
    cdac:	1148b03a 	or	r4,r2,r5
    cdb0:	20003c26 	beq	r4,zero,cea4 <__adddf3+0x3bc>
    cdb4:	29000234 	orhi	r4,r5,8
    cdb8:	01400434 	movhi	r5,16
    cdbc:	297fffc4 	addi	r5,r5,-1
    cdc0:	2148703a 	and	r4,r4,r5
    cdc4:	003f7f06 	br	cbc4 <__alt_data_end+0xfffb7494>
    cdc8:	18ffffc4 	addi	r3,r3,-1
    cdcc:	18004d1e 	bne	r3,zero,cf04 <__adddf3+0x41c>
    cdd0:	898dc83a 	sub	r6,r17,r6
    cdd4:	89a3803a 	cmpltu	r17,r17,r6
    cdd8:	2a0bc83a 	sub	r5,r5,r8
    cddc:	2c4bc83a 	sub	r5,r5,r17
    cde0:	3023883a 	mov	r17,r6
    cde4:	003f9c06 	br	cc58 <__alt_data_end+0xfffb7528>
    cde8:	4184b03a 	or	r2,r8,r6
    cdec:	103f5d26 	beq	r2,zero,cb64 <__alt_data_end+0xfffb7434>
    cdf0:	213fffc4 	addi	r4,r4,-1
    cdf4:	203fd926 	beq	r4,zero,cd5c <__alt_data_end+0xfffb762c>
    cdf8:	0081ffc4 	movi	r2,2047
    cdfc:	80bfca1e 	bne	r16,r2,cd28 <__alt_data_end+0xfffb75f8>
    ce00:	003f5806 	br	cb64 <__alt_data_end+0xfffb7434>
    ce04:	10c8b03a 	or	r4,r2,r3
    ce08:	20008b26 	beq	r4,zero,d038 <__adddf3+0x550>
    ce0c:	100b883a 	mov	r5,r2
    ce10:	1823883a 	mov	r17,r3
    ce14:	888001cc 	andi	r2,r17,7
    ce18:	103f541e 	bne	r2,zero,cb6c <__alt_data_end+0xfffb743c>
    ce1c:	9007883a 	mov	r3,r18
    ce20:	003fb006 	br	cce4 <__alt_data_end+0xfffb75b4>
    ce24:	1800531e 	bne	r3,zero,cf74 <__adddf3+0x48c>
    ce28:	80800044 	addi	r2,r16,1
    ce2c:	1081ffcc 	andi	r2,r2,2047
    ce30:	00c00044 	movi	r3,1
    ce34:	1880990e 	bge	r3,r2,d09c <__adddf3+0x5b4>
    ce38:	8985c83a 	sub	r2,r17,r6
    ce3c:	8887803a 	cmpltu	r3,r17,r2
    ce40:	2a27c83a 	sub	r19,r5,r8
    ce44:	98e7c83a 	sub	r19,r19,r3
    ce48:	98c0202c 	andhi	r3,r19,128
    ce4c:	18006226 	beq	r3,zero,cfd8 <__adddf3+0x4f0>
    ce50:	3463c83a 	sub	r17,r6,r17
    ce54:	4151c83a 	sub	r8,r8,r5
    ce58:	344d803a 	cmpltu	r6,r6,r17
    ce5c:	41a7c83a 	sub	r19,r8,r6
    ce60:	3825883a 	mov	r18,r7
    ce64:	983f821e 	bne	r19,zero,cc70 <__alt_data_end+0xfffb7540>
    ce68:	8809883a 	mov	r4,r17
    ce6c:	000f2800 	call	f280 <__clzsi2>
    ce70:	10800804 	addi	r2,r2,32
    ce74:	10fffe04 	addi	r3,r2,-8
    ce78:	010007c4 	movi	r4,31
    ce7c:	20ff810e 	bge	r4,r3,cc84 <__alt_data_end+0xfffb7554>
    ce80:	14fff604 	addi	r19,r2,-40
    ce84:	8ce6983a 	sll	r19,r17,r19
    ce88:	0023883a 	mov	r17,zero
    ce8c:	1c3f840e 	bge	r3,r16,cca0 <__alt_data_end+0xfffb7570>
    ce90:	017fe034 	movhi	r5,65408
    ce94:	297fffc4 	addi	r5,r5,-1
    ce98:	80e1c83a 	sub	r16,r16,r3
    ce9c:	994a703a 	and	r5,r19,r5
    cea0:	003f3006 	br	cb64 <__alt_data_end+0xfffb7434>
    cea4:	0009883a 	mov	r4,zero
    cea8:	0005883a 	mov	r2,zero
    ceac:	003f4506 	br	cbc4 <__alt_data_end+0xfffb7494>
    ceb0:	418cb03a 	or	r6,r8,r6
    ceb4:	300cc03a 	cmpne	r6,r6,zero
    ceb8:	0007883a 	mov	r3,zero
    cebc:	003f6106 	br	cc44 <__alt_data_end+0xfffb7514>
    cec0:	2000921e 	bne	r4,zero,d10c <__adddf3+0x624>
    cec4:	80800044 	addi	r2,r16,1
    cec8:	11c1ffcc 	andi	r7,r2,2047
    cecc:	01000044 	movi	r4,1
    ced0:	21c0610e 	bge	r4,r7,d058 <__adddf3+0x570>
    ced4:	0101ffc4 	movi	r4,2047
    ced8:	1100a326 	beq	r2,r4,d168 <__adddf3+0x680>
    cedc:	344d883a 	add	r6,r6,r17
    cee0:	3463803a 	cmpltu	r17,r6,r17
    cee4:	414b883a 	add	r5,r8,r5
    cee8:	2c4b883a 	add	r5,r5,r17
    ceec:	282297fa 	slli	r17,r5,31
    cef0:	300cd07a 	srli	r6,r6,1
    cef4:	280ad07a 	srli	r5,r5,1
    cef8:	1021883a 	mov	r16,r2
    cefc:	89a2b03a 	or	r17,r17,r6
    cf00:	003f1806 	br	cb64 <__alt_data_end+0xfffb7434>
    cf04:	0081ffc4 	movi	r2,2047
    cf08:	80bf411e 	bne	r16,r2,cc10 <__alt_data_end+0xfffb74e0>
    cf0c:	003f1506 	br	cb64 <__alt_data_end+0xfffb7434>
    cf10:	80bff844 	addi	r2,r16,-31
    cf14:	00c00804 	movi	r3,32
    cf18:	9884d83a 	srl	r2,r19,r2
    cf1c:	28c04a26 	beq	r5,r3,d048 <__adddf3+0x560>
    cf20:	00c00fc4 	movi	r3,63
    cf24:	1c21c83a 	sub	r16,r3,r16
    cf28:	9c26983a 	sll	r19,r19,r16
    cf2c:	9c62b03a 	or	r17,r19,r17
    cf30:	8822c03a 	cmpne	r17,r17,zero
    cf34:	88a2b03a 	or	r17,r17,r2
    cf38:	000b883a 	mov	r5,zero
    cf3c:	0021883a 	mov	r16,zero
    cf40:	003fb406 	br	ce14 <__alt_data_end+0xfffb76e4>
    cf44:	18bff804 	addi	r2,r3,-32
    cf48:	01000804 	movi	r4,32
    cf4c:	4084d83a 	srl	r2,r8,r2
    cf50:	19003f26 	beq	r3,r4,d050 <__adddf3+0x568>
    cf54:	01001004 	movi	r4,64
    cf58:	20c7c83a 	sub	r3,r4,r3
    cf5c:	40d0983a 	sll	r8,r8,r3
    cf60:	418cb03a 	or	r6,r8,r6
    cf64:	300cc03a 	cmpne	r6,r6,zero
    cf68:	308cb03a 	or	r6,r6,r2
    cf6c:	0007883a 	mov	r3,zero
    cf70:	003f3406 	br	cc44 <__alt_data_end+0xfffb7514>
    cf74:	80002326 	beq	r16,zero,d004 <__adddf3+0x51c>
    cf78:	0101ffc4 	movi	r4,2047
    cf7c:	11005e26 	beq	r2,r4,d0f8 <__adddf3+0x610>
    cf80:	00c7c83a 	sub	r3,zero,r3
    cf84:	29402034 	orhi	r5,r5,128
    cf88:	01000e04 	movi	r4,56
    cf8c:	20c07216 	blt	r4,r3,d158 <__adddf3+0x670>
    cf90:	010007c4 	movi	r4,31
    cf94:	20c0ce16 	blt	r4,r3,d2d0 <__adddf3+0x7e8>
    cf98:	01000804 	movi	r4,32
    cf9c:	20c9c83a 	sub	r4,r4,r3
    cfa0:	2914983a 	sll	r10,r5,r4
    cfa4:	88d2d83a 	srl	r9,r17,r3
    cfa8:	8908983a 	sll	r4,r17,r4
    cfac:	28c6d83a 	srl	r3,r5,r3
    cfb0:	5262b03a 	or	r17,r10,r9
    cfb4:	2008c03a 	cmpne	r4,r4,zero
    cfb8:	8922b03a 	or	r17,r17,r4
    cfbc:	3463c83a 	sub	r17,r6,r17
    cfc0:	40c7c83a 	sub	r3,r8,r3
    cfc4:	344d803a 	cmpltu	r6,r6,r17
    cfc8:	198bc83a 	sub	r5,r3,r6
    cfcc:	1021883a 	mov	r16,r2
    cfd0:	3825883a 	mov	r18,r7
    cfd4:	003f2006 	br	cc58 <__alt_data_end+0xfffb7528>
    cfd8:	9886b03a 	or	r3,r19,r2
    cfdc:	1800141e 	bne	r3,zero,d030 <__adddf3+0x548>
    cfe0:	0007883a 	mov	r3,zero
    cfe4:	000b883a 	mov	r5,zero
    cfe8:	0023883a 	mov	r17,zero
    cfec:	0021883a 	mov	r16,zero
    cff0:	003f3c06 	br	cce4 <__alt_data_end+0xfffb75b4>
    cff4:	418cb03a 	or	r6,r8,r6
    cff8:	300cc03a 	cmpne	r6,r6,zero
    cffc:	0011883a 	mov	r8,zero
    d000:	003f5606 	br	cd5c <__alt_data_end+0xfffb762c>
    d004:	2c48b03a 	or	r4,r5,r17
    d008:	20003b26 	beq	r4,zero,d0f8 <__adddf3+0x610>
    d00c:	00c6303a 	nor	r3,zero,r3
    d010:	1800371e 	bne	r3,zero,d0f0 <__adddf3+0x608>
    d014:	3463c83a 	sub	r17,r6,r17
    d018:	414bc83a 	sub	r5,r8,r5
    d01c:	344d803a 	cmpltu	r6,r6,r17
    d020:	298bc83a 	sub	r5,r5,r6
    d024:	1021883a 	mov	r16,r2
    d028:	3825883a 	mov	r18,r7
    d02c:	003f0a06 	br	cc58 <__alt_data_end+0xfffb7528>
    d030:	1023883a 	mov	r17,r2
    d034:	003f0d06 	br	cc6c <__alt_data_end+0xfffb753c>
    d038:	0007883a 	mov	r3,zero
    d03c:	000b883a 	mov	r5,zero
    d040:	0023883a 	mov	r17,zero
    d044:	003f2706 	br	cce4 <__alt_data_end+0xfffb75b4>
    d048:	0027883a 	mov	r19,zero
    d04c:	003fb706 	br	cf2c <__alt_data_end+0xfffb77fc>
    d050:	0011883a 	mov	r8,zero
    d054:	003fc206 	br	cf60 <__alt_data_end+0xfffb7830>
    d058:	2c44b03a 	or	r2,r5,r17
    d05c:	8000871e 	bne	r16,zero,d27c <__adddf3+0x794>
    d060:	1000b126 	beq	r2,zero,d328 <__adddf3+0x840>
    d064:	4184b03a 	or	r2,r8,r6
    d068:	103ebe26 	beq	r2,zero,cb64 <__alt_data_end+0xfffb7434>
    d06c:	3445883a 	add	r2,r6,r17
    d070:	1463803a 	cmpltu	r17,r2,r17
    d074:	414b883a 	add	r5,r8,r5
    d078:	2c4b883a 	add	r5,r5,r17
    d07c:	28c0202c 	andhi	r3,r5,128
    d080:	1023883a 	mov	r17,r2
    d084:	183f6326 	beq	r3,zero,ce14 <__alt_data_end+0xfffb76e4>
    d088:	00bfe034 	movhi	r2,65408
    d08c:	10bfffc4 	addi	r2,r2,-1
    d090:	2021883a 	mov	r16,r4
    d094:	288a703a 	and	r5,r5,r2
    d098:	003eb206 	br	cb64 <__alt_data_end+0xfffb7434>
    d09c:	2c44b03a 	or	r2,r5,r17
    d0a0:	8000251e 	bne	r16,zero,d138 <__adddf3+0x650>
    d0a4:	10004b1e 	bne	r2,zero,d1d4 <__adddf3+0x6ec>
    d0a8:	4184b03a 	or	r2,r8,r6
    d0ac:	103fe226 	beq	r2,zero,d038 <__alt_data_end+0xfffb7908>
    d0b0:	400b883a 	mov	r5,r8
    d0b4:	3023883a 	mov	r17,r6
    d0b8:	3825883a 	mov	r18,r7
    d0bc:	003ea906 	br	cb64 <__alt_data_end+0xfffb7434>
    d0c0:	20bff804 	addi	r2,r4,-32
    d0c4:	01c00804 	movi	r7,32
    d0c8:	4084d83a 	srl	r2,r8,r2
    d0cc:	21c07e26 	beq	r4,r7,d2c8 <__adddf3+0x7e0>
    d0d0:	01c01004 	movi	r7,64
    d0d4:	3909c83a 	sub	r4,r7,r4
    d0d8:	4110983a 	sll	r8,r8,r4
    d0dc:	418cb03a 	or	r6,r8,r6
    d0e0:	300cc03a 	cmpne	r6,r6,zero
    d0e4:	308cb03a 	or	r6,r6,r2
    d0e8:	0011883a 	mov	r8,zero
    d0ec:	003f1b06 	br	cd5c <__alt_data_end+0xfffb762c>
    d0f0:	0101ffc4 	movi	r4,2047
    d0f4:	113fa41e 	bne	r2,r4,cf88 <__alt_data_end+0xfffb7858>
    d0f8:	400b883a 	mov	r5,r8
    d0fc:	3023883a 	mov	r17,r6
    d100:	1021883a 	mov	r16,r2
    d104:	3825883a 	mov	r18,r7
    d108:	003e9606 	br	cb64 <__alt_data_end+0xfffb7434>
    d10c:	80001a1e 	bne	r16,zero,d178 <__adddf3+0x690>
    d110:	2c4eb03a 	or	r7,r5,r17
    d114:	38005526 	beq	r7,zero,d26c <__adddf3+0x784>
    d118:	0108303a 	nor	r4,zero,r4
    d11c:	2000511e 	bne	r4,zero,d264 <__adddf3+0x77c>
    d120:	89a3883a 	add	r17,r17,r6
    d124:	414b883a 	add	r5,r8,r5
    d128:	898d803a 	cmpltu	r6,r17,r6
    d12c:	298b883a 	add	r5,r5,r6
    d130:	1021883a 	mov	r16,r2
    d134:	003f0e06 	br	cd70 <__alt_data_end+0xfffb7640>
    d138:	1000341e 	bne	r2,zero,d20c <__adddf3+0x724>
    d13c:	4184b03a 	or	r2,r8,r6
    d140:	10006f26 	beq	r2,zero,d300 <__adddf3+0x818>
    d144:	400b883a 	mov	r5,r8
    d148:	3023883a 	mov	r17,r6
    d14c:	3825883a 	mov	r18,r7
    d150:	0401ffc4 	movi	r16,2047
    d154:	003e8306 	br	cb64 <__alt_data_end+0xfffb7434>
    d158:	2c62b03a 	or	r17,r5,r17
    d15c:	8822c03a 	cmpne	r17,r17,zero
    d160:	0007883a 	mov	r3,zero
    d164:	003f9506 	br	cfbc <__alt_data_end+0xfffb788c>
    d168:	1021883a 	mov	r16,r2
    d16c:	000b883a 	mov	r5,zero
    d170:	0023883a 	mov	r17,zero
    d174:	003edb06 	br	cce4 <__alt_data_end+0xfffb75b4>
    d178:	01c1ffc4 	movi	r7,2047
    d17c:	11c03b26 	beq	r2,r7,d26c <__adddf3+0x784>
    d180:	0109c83a 	sub	r4,zero,r4
    d184:	29402034 	orhi	r5,r5,128
    d188:	01c00e04 	movi	r7,56
    d18c:	39006216 	blt	r7,r4,d318 <__adddf3+0x830>
    d190:	01c007c4 	movi	r7,31
    d194:	39006b16 	blt	r7,r4,d344 <__adddf3+0x85c>
    d198:	01c00804 	movi	r7,32
    d19c:	390fc83a 	sub	r7,r7,r4
    d1a0:	29d4983a 	sll	r10,r5,r7
    d1a4:	8912d83a 	srl	r9,r17,r4
    d1a8:	89ce983a 	sll	r7,r17,r7
    d1ac:	2908d83a 	srl	r4,r5,r4
    d1b0:	5262b03a 	or	r17,r10,r9
    d1b4:	380ac03a 	cmpne	r5,r7,zero
    d1b8:	8962b03a 	or	r17,r17,r5
    d1bc:	89a3883a 	add	r17,r17,r6
    d1c0:	2211883a 	add	r8,r4,r8
    d1c4:	898d803a 	cmpltu	r6,r17,r6
    d1c8:	418b883a 	add	r5,r8,r6
    d1cc:	1021883a 	mov	r16,r2
    d1d0:	003ee706 	br	cd70 <__alt_data_end+0xfffb7640>
    d1d4:	4184b03a 	or	r2,r8,r6
    d1d8:	103e6226 	beq	r2,zero,cb64 <__alt_data_end+0xfffb7434>
    d1dc:	8987c83a 	sub	r3,r17,r6
    d1e0:	88c9803a 	cmpltu	r4,r17,r3
    d1e4:	2a05c83a 	sub	r2,r5,r8
    d1e8:	1105c83a 	sub	r2,r2,r4
    d1ec:	1100202c 	andhi	r4,r2,128
    d1f0:	203f0426 	beq	r4,zero,ce04 <__alt_data_end+0xfffb76d4>
    d1f4:	3463c83a 	sub	r17,r6,r17
    d1f8:	414bc83a 	sub	r5,r8,r5
    d1fc:	344d803a 	cmpltu	r6,r6,r17
    d200:	298bc83a 	sub	r5,r5,r6
    d204:	3825883a 	mov	r18,r7
    d208:	003e5606 	br	cb64 <__alt_data_end+0xfffb7434>
    d20c:	4184b03a 	or	r2,r8,r6
    d210:	10002b26 	beq	r2,zero,d2c0 <__adddf3+0x7d8>
    d214:	2804d0fa 	srli	r2,r5,3
    d218:	8822d0fa 	srli	r17,r17,3
    d21c:	280a977a 	slli	r5,r5,29
    d220:	10c0022c 	andhi	r3,r2,8
    d224:	2c62b03a 	or	r17,r5,r17
    d228:	18000826 	beq	r3,zero,d24c <__adddf3+0x764>
    d22c:	4008d0fa 	srli	r4,r8,3
    d230:	20c0022c 	andhi	r3,r4,8
    d234:	1800051e 	bne	r3,zero,d24c <__adddf3+0x764>
    d238:	300cd0fa 	srli	r6,r6,3
    d23c:	4010977a 	slli	r8,r8,29
    d240:	2005883a 	mov	r2,r4
    d244:	3825883a 	mov	r18,r7
    d248:	41a2b03a 	or	r17,r8,r6
    d24c:	880ad77a 	srli	r5,r17,29
    d250:	100490fa 	slli	r2,r2,3
    d254:	882290fa 	slli	r17,r17,3
    d258:	0401ffc4 	movi	r16,2047
    d25c:	288ab03a 	or	r5,r5,r2
    d260:	003e4006 	br	cb64 <__alt_data_end+0xfffb7434>
    d264:	01c1ffc4 	movi	r7,2047
    d268:	11ffc71e 	bne	r2,r7,d188 <__alt_data_end+0xfffb7a58>
    d26c:	400b883a 	mov	r5,r8
    d270:	3023883a 	mov	r17,r6
    d274:	1021883a 	mov	r16,r2
    d278:	003e3a06 	br	cb64 <__alt_data_end+0xfffb7434>
    d27c:	10002d26 	beq	r2,zero,d334 <__adddf3+0x84c>
    d280:	4184b03a 	or	r2,r8,r6
    d284:	10000e26 	beq	r2,zero,d2c0 <__adddf3+0x7d8>
    d288:	2804d0fa 	srli	r2,r5,3
    d28c:	8822d0fa 	srli	r17,r17,3
    d290:	280a977a 	slli	r5,r5,29
    d294:	10c0022c 	andhi	r3,r2,8
    d298:	2c62b03a 	or	r17,r5,r17
    d29c:	183feb26 	beq	r3,zero,d24c <__alt_data_end+0xfffb7b1c>
    d2a0:	4008d0fa 	srli	r4,r8,3
    d2a4:	20c0022c 	andhi	r3,r4,8
    d2a8:	183fe81e 	bne	r3,zero,d24c <__alt_data_end+0xfffb7b1c>
    d2ac:	300cd0fa 	srli	r6,r6,3
    d2b0:	4010977a 	slli	r8,r8,29
    d2b4:	2005883a 	mov	r2,r4
    d2b8:	41a2b03a 	or	r17,r8,r6
    d2bc:	003fe306 	br	d24c <__alt_data_end+0xfffb7b1c>
    d2c0:	0401ffc4 	movi	r16,2047
    d2c4:	003e2706 	br	cb64 <__alt_data_end+0xfffb7434>
    d2c8:	0011883a 	mov	r8,zero
    d2cc:	003f8306 	br	d0dc <__alt_data_end+0xfffb79ac>
    d2d0:	193ff804 	addi	r4,r3,-32
    d2d4:	02400804 	movi	r9,32
    d2d8:	2908d83a 	srl	r4,r5,r4
    d2dc:	1a402526 	beq	r3,r9,d374 <__adddf3+0x88c>
    d2e0:	02401004 	movi	r9,64
    d2e4:	48c7c83a 	sub	r3,r9,r3
    d2e8:	28ca983a 	sll	r5,r5,r3
    d2ec:	2c62b03a 	or	r17,r5,r17
    d2f0:	8822c03a 	cmpne	r17,r17,zero
    d2f4:	8922b03a 	or	r17,r17,r4
    d2f8:	0007883a 	mov	r3,zero
    d2fc:	003f2f06 	br	cfbc <__alt_data_end+0xfffb788c>
    d300:	01402034 	movhi	r5,128
    d304:	0007883a 	mov	r3,zero
    d308:	297fffc4 	addi	r5,r5,-1
    d30c:	047ffe04 	movi	r17,-8
    d310:	0401ffc4 	movi	r16,2047
    d314:	003e7306 	br	cce4 <__alt_data_end+0xfffb75b4>
    d318:	2c62b03a 	or	r17,r5,r17
    d31c:	8822c03a 	cmpne	r17,r17,zero
    d320:	0009883a 	mov	r4,zero
    d324:	003fa506 	br	d1bc <__alt_data_end+0xfffb7a8c>
    d328:	400b883a 	mov	r5,r8
    d32c:	3023883a 	mov	r17,r6
    d330:	003e0c06 	br	cb64 <__alt_data_end+0xfffb7434>
    d334:	400b883a 	mov	r5,r8
    d338:	3023883a 	mov	r17,r6
    d33c:	0401ffc4 	movi	r16,2047
    d340:	003e0806 	br	cb64 <__alt_data_end+0xfffb7434>
    d344:	21fff804 	addi	r7,r4,-32
    d348:	02400804 	movi	r9,32
    d34c:	29ced83a 	srl	r7,r5,r7
    d350:	22400a26 	beq	r4,r9,d37c <__adddf3+0x894>
    d354:	02401004 	movi	r9,64
    d358:	4909c83a 	sub	r4,r9,r4
    d35c:	290a983a 	sll	r5,r5,r4
    d360:	2c62b03a 	or	r17,r5,r17
    d364:	8822c03a 	cmpne	r17,r17,zero
    d368:	89e2b03a 	or	r17,r17,r7
    d36c:	0009883a 	mov	r4,zero
    d370:	003f9206 	br	d1bc <__alt_data_end+0xfffb7a8c>
    d374:	000b883a 	mov	r5,zero
    d378:	003fdc06 	br	d2ec <__alt_data_end+0xfffb7bbc>
    d37c:	000b883a 	mov	r5,zero
    d380:	003ff706 	br	d360 <__alt_data_end+0xfffb7c30>

0000d384 <__divdf3>:
    d384:	defff004 	addi	sp,sp,-64
    d388:	dc800815 	stw	r18,32(sp)
    d38c:	2824d53a 	srli	r18,r5,20
    d390:	dd800c15 	stw	r22,48(sp)
    d394:	282cd7fa 	srli	r22,r5,31
    d398:	dc000615 	stw	r16,24(sp)
    d39c:	04000434 	movhi	r16,16
    d3a0:	df000e15 	stw	fp,56(sp)
    d3a4:	dd000a15 	stw	r20,40(sp)
    d3a8:	dcc00915 	stw	r19,36(sp)
    d3ac:	dc400715 	stw	r17,28(sp)
    d3b0:	843fffc4 	addi	r16,r16,-1
    d3b4:	dfc00f15 	stw	ra,60(sp)
    d3b8:	ddc00d15 	stw	r23,52(sp)
    d3bc:	dd400b15 	stw	r21,44(sp)
    d3c0:	9481ffcc 	andi	r18,r18,2047
    d3c4:	2029883a 	mov	r20,r4
    d3c8:	2027883a 	mov	r19,r4
    d3cc:	2c22703a 	and	r17,r5,r16
    d3d0:	b7003fcc 	andi	fp,r22,255
    d3d4:	90005e26 	beq	r18,zero,d550 <__divdf3+0x1cc>
    d3d8:	0081ffc4 	movi	r2,2047
    d3dc:	90803526 	beq	r18,r2,d4b4 <__divdf3+0x130>
    d3e0:	8c000434 	orhi	r16,r17,16
    d3e4:	2004d77a 	srli	r2,r4,29
    d3e8:	802090fa 	slli	r16,r16,3
    d3ec:	202690fa 	slli	r19,r4,3
    d3f0:	94bf0044 	addi	r18,r18,-1023
    d3f4:	80a2b03a 	or	r17,r16,r2
    d3f8:	0029883a 	mov	r20,zero
    d3fc:	0011883a 	mov	r8,zero
    d400:	380ad53a 	srli	r5,r7,20
    d404:	382ed7fa 	srli	r23,r7,31
    d408:	04000434 	movhi	r16,16
    d40c:	843fffc4 	addi	r16,r16,-1
    d410:	2941ffcc 	andi	r5,r5,2047
    d414:	302b883a 	mov	r21,r6
    d418:	3c20703a 	and	r16,r7,r16
    d41c:	ba403fcc 	andi	r9,r23,255
    d420:	28006726 	beq	r5,zero,d5c0 <__divdf3+0x23c>
    d424:	0081ffc4 	movi	r2,2047
    d428:	28805f26 	beq	r5,r2,d5a8 <__divdf3+0x224>
    d42c:	84000434 	orhi	r16,r16,16
    d430:	3004d77a 	srli	r2,r6,29
    d434:	802090fa 	slli	r16,r16,3
    d438:	302a90fa 	slli	r21,r6,3
    d43c:	297f0044 	addi	r5,r5,-1023
    d440:	80a0b03a 	or	r16,r16,r2
    d444:	000f883a 	mov	r7,zero
    d448:	3d06b03a 	or	r3,r7,r20
    d44c:	180690ba 	slli	r3,r3,2
    d450:	00800074 	movhi	r2,1
    d454:	10b51d04 	addi	r2,r2,-11148
    d458:	1885883a 	add	r2,r3,r2
    d45c:	10800017 	ldw	r2,0(r2)
    d460:	b5c8f03a 	xor	r4,r22,r23
    d464:	200d883a 	mov	r6,r4
    d468:	25003fcc 	andi	r20,r4,255
    d46c:	9165c83a 	sub	r18,r18,r5
    d470:	1000683a 	jmp	r2
    d474:	0000d6bc 	xorhi	zero,zero,858
    d478:	0000d4ec 	andhi	zero,zero,851
    d47c:	0000d680 	call	d68 <setup_keyboard+0x6c8>
    d480:	0000d4d0 	cmplti	zero,zero,851
    d484:	0000d680 	call	d68 <setup_keyboard+0x6c8>
    d488:	0000d654 	movui	zero,857
    d48c:	0000d680 	call	d68 <setup_keyboard+0x6c8>
    d490:	0000d4d0 	cmplti	zero,zero,851
    d494:	0000d4ec 	andhi	zero,zero,851
    d498:	0000d4ec 	andhi	zero,zero,851
    d49c:	0000d654 	movui	zero,857
    d4a0:	0000d4d0 	cmplti	zero,zero,851
    d4a4:	0000d4e0 	cmpeqi	zero,zero,851
    d4a8:	0000d4e0 	cmpeqi	zero,zero,851
    d4ac:	0000d4e0 	cmpeqi	zero,zero,851
    d4b0:	0000d690 	cmplti	zero,zero,858
    d4b4:	8904b03a 	or	r2,r17,r4
    d4b8:	1000631e 	bne	r2,zero,d648 <__divdf3+0x2c4>
    d4bc:	05000204 	movi	r20,8
    d4c0:	0023883a 	mov	r17,zero
    d4c4:	0027883a 	mov	r19,zero
    d4c8:	02000084 	movi	r8,2
    d4cc:	003fcc06 	br	d400 <__alt_data_end+0xfffb7cd0>
    d4d0:	8023883a 	mov	r17,r16
    d4d4:	a827883a 	mov	r19,r21
    d4d8:	4839883a 	mov	fp,r9
    d4dc:	3811883a 	mov	r8,r7
    d4e0:	00800084 	movi	r2,2
    d4e4:	4081531e 	bne	r8,r2,da34 <__divdf3+0x6b0>
    d4e8:	e029883a 	mov	r20,fp
    d4ec:	a180004c 	andi	r6,r20,1
    d4f0:	0201ffc4 	movi	r8,2047
    d4f4:	000b883a 	mov	r5,zero
    d4f8:	0027883a 	mov	r19,zero
    d4fc:	4010953a 	slli	r8,r8,20
    d500:	30c03fcc 	andi	r3,r6,255
    d504:	04000434 	movhi	r16,16
    d508:	180697fa 	slli	r3,r3,31
    d50c:	843fffc4 	addi	r16,r16,-1
    d510:	2c20703a 	and	r16,r5,r16
    d514:	8220b03a 	or	r16,r16,r8
    d518:	80c6b03a 	or	r3,r16,r3
    d51c:	9805883a 	mov	r2,r19
    d520:	dfc00f17 	ldw	ra,60(sp)
    d524:	df000e17 	ldw	fp,56(sp)
    d528:	ddc00d17 	ldw	r23,52(sp)
    d52c:	dd800c17 	ldw	r22,48(sp)
    d530:	dd400b17 	ldw	r21,44(sp)
    d534:	dd000a17 	ldw	r20,40(sp)
    d538:	dcc00917 	ldw	r19,36(sp)
    d53c:	dc800817 	ldw	r18,32(sp)
    d540:	dc400717 	ldw	r17,28(sp)
    d544:	dc000617 	ldw	r16,24(sp)
    d548:	dec01004 	addi	sp,sp,64
    d54c:	f800283a 	ret
    d550:	8904b03a 	or	r2,r17,r4
    d554:	10003726 	beq	r2,zero,d634 <__divdf3+0x2b0>
    d558:	88014d26 	beq	r17,zero,da90 <__divdf3+0x70c>
    d55c:	8809883a 	mov	r4,r17
    d560:	d9800215 	stw	r6,8(sp)
    d564:	d9c00515 	stw	r7,20(sp)
    d568:	000f2800 	call	f280 <__clzsi2>
    d56c:	d9800217 	ldw	r6,8(sp)
    d570:	d9c00517 	ldw	r7,20(sp)
    d574:	1007883a 	mov	r3,r2
    d578:	01000a04 	movi	r4,40
    d57c:	1cfffe04 	addi	r19,r3,-8
    d580:	20c9c83a 	sub	r4,r4,r3
    d584:	8cca983a 	sll	r5,r17,r19
    d588:	a108d83a 	srl	r4,r20,r4
    d58c:	a4e6983a 	sll	r19,r20,r19
    d590:	2162b03a 	or	r17,r4,r5
    d594:	04bf0344 	movi	r18,-1011
    d598:	90e5c83a 	sub	r18,r18,r3
    d59c:	0029883a 	mov	r20,zero
    d5a0:	0011883a 	mov	r8,zero
    d5a4:	003f9606 	br	d400 <__alt_data_end+0xfffb7cd0>
    d5a8:	8184b03a 	or	r2,r16,r6
    d5ac:	10001f1e 	bne	r2,zero,d62c <__divdf3+0x2a8>
    d5b0:	0021883a 	mov	r16,zero
    d5b4:	002b883a 	mov	r21,zero
    d5b8:	01c00084 	movi	r7,2
    d5bc:	003fa206 	br	d448 <__alt_data_end+0xfffb7d18>
    d5c0:	8184b03a 	or	r2,r16,r6
    d5c4:	10001526 	beq	r2,zero,d61c <__divdf3+0x298>
    d5c8:	80013d26 	beq	r16,zero,dac0 <__divdf3+0x73c>
    d5cc:	8009883a 	mov	r4,r16
    d5d0:	d9800215 	stw	r6,8(sp)
    d5d4:	da000315 	stw	r8,12(sp)
    d5d8:	da400415 	stw	r9,16(sp)
    d5dc:	000f2800 	call	f280 <__clzsi2>
    d5e0:	d9800217 	ldw	r6,8(sp)
    d5e4:	da000317 	ldw	r8,12(sp)
    d5e8:	da400417 	ldw	r9,16(sp)
    d5ec:	1007883a 	mov	r3,r2
    d5f0:	01000a04 	movi	r4,40
    d5f4:	1d7ffe04 	addi	r21,r3,-8
    d5f8:	20c9c83a 	sub	r4,r4,r3
    d5fc:	8560983a 	sll	r16,r16,r21
    d600:	3108d83a 	srl	r4,r6,r4
    d604:	356a983a 	sll	r21,r6,r21
    d608:	2420b03a 	or	r16,r4,r16
    d60c:	017f0344 	movi	r5,-1011
    d610:	28cbc83a 	sub	r5,r5,r3
    d614:	000f883a 	mov	r7,zero
    d618:	003f8b06 	br	d448 <__alt_data_end+0xfffb7d18>
    d61c:	0021883a 	mov	r16,zero
    d620:	002b883a 	mov	r21,zero
    d624:	01c00044 	movi	r7,1
    d628:	003f8706 	br	d448 <__alt_data_end+0xfffb7d18>
    d62c:	01c000c4 	movi	r7,3
    d630:	003f8506 	br	d448 <__alt_data_end+0xfffb7d18>
    d634:	05000104 	movi	r20,4
    d638:	0023883a 	mov	r17,zero
    d63c:	0027883a 	mov	r19,zero
    d640:	02000044 	movi	r8,1
    d644:	003f6e06 	br	d400 <__alt_data_end+0xfffb7cd0>
    d648:	05000304 	movi	r20,12
    d64c:	020000c4 	movi	r8,3
    d650:	003f6b06 	br	d400 <__alt_data_end+0xfffb7cd0>
    d654:	01400434 	movhi	r5,16
    d658:	000d883a 	mov	r6,zero
    d65c:	297fffc4 	addi	r5,r5,-1
    d660:	04ffffc4 	movi	r19,-1
    d664:	0201ffc4 	movi	r8,2047
    d668:	003fa406 	br	d4fc <__alt_data_end+0xfffb7dcc>
    d66c:	043f0084 	movi	r16,-1022
    d670:	84a1c83a 	sub	r16,r16,r18
    d674:	00800e04 	movi	r2,56
    d678:	14014d0e 	bge	r2,r16,dbb0 <__divdf3+0x82c>
    d67c:	a180004c 	andi	r6,r20,1
    d680:	0011883a 	mov	r8,zero
    d684:	000b883a 	mov	r5,zero
    d688:	0027883a 	mov	r19,zero
    d68c:	003f9b06 	br	d4fc <__alt_data_end+0xfffb7dcc>
    d690:	8880022c 	andhi	r2,r17,8
    d694:	1000f026 	beq	r2,zero,da58 <__divdf3+0x6d4>
    d698:	8080022c 	andhi	r2,r16,8
    d69c:	1000ee1e 	bne	r2,zero,da58 <__divdf3+0x6d4>
    d6a0:	00800434 	movhi	r2,16
    d6a4:	81400234 	orhi	r5,r16,8
    d6a8:	10bfffc4 	addi	r2,r2,-1
    d6ac:	b80d883a 	mov	r6,r23
    d6b0:	288a703a 	and	r5,r5,r2
    d6b4:	a827883a 	mov	r19,r21
    d6b8:	003fea06 	br	d664 <__alt_data_end+0xfffb7f34>
    d6bc:	84411c36 	bltu	r16,r17,db30 <__divdf3+0x7ac>
    d6c0:	8c011a26 	beq	r17,r16,db2c <__divdf3+0x7a8>
    d6c4:	94bfffc4 	addi	r18,r18,-1
    d6c8:	dcc00015 	stw	r19,0(sp)
    d6cc:	8811883a 	mov	r8,r17
    d6d0:	002d883a 	mov	r22,zero
    d6d4:	a80cd63a 	srli	r6,r21,24
    d6d8:	8020923a 	slli	r16,r16,8
    d6dc:	a82a923a 	slli	r21,r21,8
    d6e0:	4009883a 	mov	r4,r8
    d6e4:	342eb03a 	or	r23,r6,r16
    d6e8:	dd400115 	stw	r21,4(sp)
    d6ec:	b82ad43a 	srli	r21,r23,16
    d6f0:	da000315 	stw	r8,12(sp)
    d6f4:	bcffffcc 	andi	r19,r23,65535
    d6f8:	a80b883a 	mov	r5,r21
    d6fc:	000cab00 	call	cab0 <__udivsi3>
    d700:	1009883a 	mov	r4,r2
    d704:	980b883a 	mov	r5,r19
    d708:	1023883a 	mov	r17,r2
    d70c:	000cac00 	call	cac0 <__mulsi3>
    d710:	da000317 	ldw	r8,12(sp)
    d714:	a80b883a 	mov	r5,r21
    d718:	1039883a 	mov	fp,r2
    d71c:	4009883a 	mov	r4,r8
    d720:	000cab80 	call	cab8 <__umodsi3>
    d724:	d8c00017 	ldw	r3,0(sp)
    d728:	1004943a 	slli	r2,r2,16
    d72c:	1810d43a 	srli	r8,r3,16
    d730:	120eb03a 	or	r7,r2,r8
    d734:	3f00062e 	bgeu	r7,fp,d750 <__divdf3+0x3cc>
    d738:	3dcf883a 	add	r7,r7,r23
    d73c:	88bfffc4 	addi	r2,r17,-1
    d740:	3dc10a36 	bltu	r7,r23,db6c <__divdf3+0x7e8>
    d744:	3f01092e 	bgeu	r7,fp,db6c <__divdf3+0x7e8>
    d748:	8c7fff84 	addi	r17,r17,-2
    d74c:	3dcf883a 	add	r7,r7,r23
    d750:	3f39c83a 	sub	fp,r7,fp
    d754:	e009883a 	mov	r4,fp
    d758:	a80b883a 	mov	r5,r21
    d75c:	000cab00 	call	cab0 <__udivsi3>
    d760:	1009883a 	mov	r4,r2
    d764:	980b883a 	mov	r5,r19
    d768:	1021883a 	mov	r16,r2
    d76c:	000cac00 	call	cac0 <__mulsi3>
    d770:	e009883a 	mov	r4,fp
    d774:	a80b883a 	mov	r5,r21
    d778:	d8800315 	stw	r2,12(sp)
    d77c:	000cab80 	call	cab8 <__umodsi3>
    d780:	d9000017 	ldw	r4,0(sp)
    d784:	1004943a 	slli	r2,r2,16
    d788:	da000317 	ldw	r8,12(sp)
    d78c:	20ffffcc 	andi	r3,r4,65535
    d790:	10ceb03a 	or	r7,r2,r3
    d794:	3a00062e 	bgeu	r7,r8,d7b0 <__divdf3+0x42c>
    d798:	3dcf883a 	add	r7,r7,r23
    d79c:	80bfffc4 	addi	r2,r16,-1
    d7a0:	3dc0f036 	bltu	r7,r23,db64 <__divdf3+0x7e0>
    d7a4:	3a00ef2e 	bgeu	r7,r8,db64 <__divdf3+0x7e0>
    d7a8:	843fff84 	addi	r16,r16,-2
    d7ac:	3dcf883a 	add	r7,r7,r23
    d7b0:	d8c00117 	ldw	r3,4(sp)
    d7b4:	8822943a 	slli	r17,r17,16
    d7b8:	3a0fc83a 	sub	r7,r7,r8
    d7bc:	1806d43a 	srli	r3,r3,16
    d7c0:	8462b03a 	or	r17,r16,r17
    d7c4:	8affffcc 	andi	r11,r17,65535
    d7c8:	d8c00015 	stw	r3,0(sp)
    d7cc:	d8c00117 	ldw	r3,4(sp)
    d7d0:	8820d43a 	srli	r16,r17,16
    d7d4:	5809883a 	mov	r4,r11
    d7d8:	1f3fffcc 	andi	fp,r3,65535
    d7dc:	e00b883a 	mov	r5,fp
    d7e0:	d9c00515 	stw	r7,20(sp)
    d7e4:	dac00215 	stw	r11,8(sp)
    d7e8:	000cac00 	call	cac0 <__mulsi3>
    d7ec:	8009883a 	mov	r4,r16
    d7f0:	e00b883a 	mov	r5,fp
    d7f4:	d8800415 	stw	r2,16(sp)
    d7f8:	000cac00 	call	cac0 <__mulsi3>
    d7fc:	d9400017 	ldw	r5,0(sp)
    d800:	8009883a 	mov	r4,r16
    d804:	d8800315 	stw	r2,12(sp)
    d808:	000cac00 	call	cac0 <__mulsi3>
    d80c:	dac00217 	ldw	r11,8(sp)
    d810:	d9400017 	ldw	r5,0(sp)
    d814:	d8800215 	stw	r2,8(sp)
    d818:	5809883a 	mov	r4,r11
    d81c:	000cac00 	call	cac0 <__mulsi3>
    d820:	da400417 	ldw	r9,16(sp)
    d824:	da800317 	ldw	r10,12(sp)
    d828:	d9c00517 	ldw	r7,20(sp)
    d82c:	480ad43a 	srli	r5,r9,16
    d830:	5085883a 	add	r2,r10,r2
    d834:	db000217 	ldw	r12,8(sp)
    d838:	1151883a 	add	r8,r2,r5
    d83c:	4280022e 	bgeu	r8,r10,d848 <__divdf3+0x4c4>
    d840:	00800074 	movhi	r2,1
    d844:	6099883a 	add	r12,r12,r2
    d848:	400ad43a 	srli	r5,r8,16
    d84c:	4010943a 	slli	r8,r8,16
    d850:	4c3fffcc 	andi	r16,r9,65535
    d854:	6149883a 	add	r4,r12,r5
    d858:	4411883a 	add	r8,r8,r16
    d85c:	3900a736 	bltu	r7,r4,dafc <__divdf3+0x778>
    d860:	3900c426 	beq	r7,r4,db74 <__divdf3+0x7f0>
    d864:	3909c83a 	sub	r4,r7,r4
    d868:	b221c83a 	sub	r16,r22,r8
    d86c:	b42d803a 	cmpltu	r22,r22,r16
    d870:	25adc83a 	sub	r22,r4,r22
    d874:	b5c0c626 	beq	r22,r23,db90 <__divdf3+0x80c>
    d878:	b009883a 	mov	r4,r22
    d87c:	a80b883a 	mov	r5,r21
    d880:	000cab00 	call	cab0 <__udivsi3>
    d884:	1009883a 	mov	r4,r2
    d888:	980b883a 	mov	r5,r19
    d88c:	d8800315 	stw	r2,12(sp)
    d890:	000cac00 	call	cac0 <__mulsi3>
    d894:	a80b883a 	mov	r5,r21
    d898:	b009883a 	mov	r4,r22
    d89c:	d8800415 	stw	r2,16(sp)
    d8a0:	000cab80 	call	cab8 <__umodsi3>
    d8a4:	1004943a 	slli	r2,r2,16
    d8a8:	800ed43a 	srli	r7,r16,16
    d8ac:	da400417 	ldw	r9,16(sp)
    d8b0:	da000317 	ldw	r8,12(sp)
    d8b4:	11cab03a 	or	r5,r2,r7
    d8b8:	2a40062e 	bgeu	r5,r9,d8d4 <__divdf3+0x550>
    d8bc:	2dcb883a 	add	r5,r5,r23
    d8c0:	40bfffc4 	addi	r2,r8,-1
    d8c4:	2dc0b436 	bltu	r5,r23,db98 <__divdf3+0x814>
    d8c8:	2a40b32e 	bgeu	r5,r9,db98 <__divdf3+0x814>
    d8cc:	423fff84 	addi	r8,r8,-2
    d8d0:	2dcb883a 	add	r5,r5,r23
    d8d4:	2a6dc83a 	sub	r22,r5,r9
    d8d8:	b009883a 	mov	r4,r22
    d8dc:	a80b883a 	mov	r5,r21
    d8e0:	da000315 	stw	r8,12(sp)
    d8e4:	000cab00 	call	cab0 <__udivsi3>
    d8e8:	980b883a 	mov	r5,r19
    d8ec:	1009883a 	mov	r4,r2
    d8f0:	d8800415 	stw	r2,16(sp)
    d8f4:	000cac00 	call	cac0 <__mulsi3>
    d8f8:	b009883a 	mov	r4,r22
    d8fc:	a80b883a 	mov	r5,r21
    d900:	1027883a 	mov	r19,r2
    d904:	000cab80 	call	cab8 <__umodsi3>
    d908:	1004943a 	slli	r2,r2,16
    d90c:	843fffcc 	andi	r16,r16,65535
    d910:	da000317 	ldw	r8,12(sp)
    d914:	140eb03a 	or	r7,r2,r16
    d918:	da400417 	ldw	r9,16(sp)
    d91c:	3cc0062e 	bgeu	r7,r19,d938 <__divdf3+0x5b4>
    d920:	3dcf883a 	add	r7,r7,r23
    d924:	48bfffc4 	addi	r2,r9,-1
    d928:	3dc09d36 	bltu	r7,r23,dba0 <__divdf3+0x81c>
    d92c:	3cc09c2e 	bgeu	r7,r19,dba0 <__divdf3+0x81c>
    d930:	4a7fff84 	addi	r9,r9,-2
    d934:	3dcf883a 	add	r7,r7,r23
    d938:	4010943a 	slli	r8,r8,16
    d93c:	3cebc83a 	sub	r21,r7,r19
    d940:	e00b883a 	mov	r5,fp
    d944:	4a26b03a 	or	r19,r9,r8
    d948:	99ffffcc 	andi	r7,r19,65535
    d94c:	9820d43a 	srli	r16,r19,16
    d950:	3809883a 	mov	r4,r7
    d954:	d9c00515 	stw	r7,20(sp)
    d958:	000cac00 	call	cac0 <__mulsi3>
    d95c:	8009883a 	mov	r4,r16
    d960:	e00b883a 	mov	r5,fp
    d964:	102d883a 	mov	r22,r2
    d968:	000cac00 	call	cac0 <__mulsi3>
    d96c:	d9400017 	ldw	r5,0(sp)
    d970:	8009883a 	mov	r4,r16
    d974:	1039883a 	mov	fp,r2
    d978:	000cac00 	call	cac0 <__mulsi3>
    d97c:	d9c00517 	ldw	r7,20(sp)
    d980:	d9400017 	ldw	r5,0(sp)
    d984:	1021883a 	mov	r16,r2
    d988:	3809883a 	mov	r4,r7
    d98c:	000cac00 	call	cac0 <__mulsi3>
    d990:	b008d43a 	srli	r4,r22,16
    d994:	e085883a 	add	r2,fp,r2
    d998:	1109883a 	add	r4,r2,r4
    d99c:	2700022e 	bgeu	r4,fp,d9a8 <__divdf3+0x624>
    d9a0:	00800074 	movhi	r2,1
    d9a4:	80a1883a 	add	r16,r16,r2
    d9a8:	200ad43a 	srli	r5,r4,16
    d9ac:	2008943a 	slli	r4,r4,16
    d9b0:	b5bfffcc 	andi	r22,r22,65535
    d9b4:	8145883a 	add	r2,r16,r5
    d9b8:	2589883a 	add	r4,r4,r22
    d9bc:	a8802c36 	bltu	r21,r2,da70 <__divdf3+0x6ec>
    d9c0:	a880a426 	beq	r21,r2,dc54 <__divdf3+0x8d0>
    d9c4:	9cc00054 	ori	r19,r19,1
    d9c8:	9200ffc4 	addi	r8,r18,1023
    d9cc:	023f270e 	bge	zero,r8,d66c <__alt_data_end+0xfffb7f3c>
    d9d0:	988001cc 	andi	r2,r19,7
    d9d4:	10000726 	beq	r2,zero,d9f4 <__divdf3+0x670>
    d9d8:	990003cc 	andi	r4,r19,15
    d9dc:	00800104 	movi	r2,4
    d9e0:	20800426 	beq	r4,r2,d9f4 <__divdf3+0x670>
    d9e4:	9885883a 	add	r2,r19,r2
    d9e8:	14e7803a 	cmpltu	r19,r2,r19
    d9ec:	8ce3883a 	add	r17,r17,r19
    d9f0:	1027883a 	mov	r19,r2
    d9f4:	8880402c 	andhi	r2,r17,256
    d9f8:	10000426 	beq	r2,zero,da0c <__divdf3+0x688>
    d9fc:	00bfc034 	movhi	r2,65280
    da00:	10bfffc4 	addi	r2,r2,-1
    da04:	92010004 	addi	r8,r18,1024
    da08:	88a2703a 	and	r17,r17,r2
    da0c:	0081ff84 	movi	r2,2046
    da10:	123eb616 	blt	r2,r8,d4ec <__alt_data_end+0xfffb7dbc>
    da14:	9826d0fa 	srli	r19,r19,3
    da18:	8804977a 	slli	r2,r17,29
    da1c:	8820927a 	slli	r16,r17,9
    da20:	4201ffcc 	andi	r8,r8,2047
    da24:	14e6b03a 	or	r19,r2,r19
    da28:	800ad33a 	srli	r5,r16,12
    da2c:	a180004c 	andi	r6,r20,1
    da30:	003eb206 	br	d4fc <__alt_data_end+0xfffb7dcc>
    da34:	008000c4 	movi	r2,3
    da38:	4080ac26 	beq	r8,r2,dcec <__divdf3+0x968>
    da3c:	00800044 	movi	r2,1
    da40:	4080591e 	bne	r8,r2,dba8 <__divdf3+0x824>
    da44:	e00d883a 	mov	r6,fp
    da48:	0011883a 	mov	r8,zero
    da4c:	000b883a 	mov	r5,zero
    da50:	0027883a 	mov	r19,zero
    da54:	003ea906 	br	d4fc <__alt_data_end+0xfffb7dcc>
    da58:	00800434 	movhi	r2,16
    da5c:	89400234 	orhi	r5,r17,8
    da60:	10bfffc4 	addi	r2,r2,-1
    da64:	b00d883a 	mov	r6,r22
    da68:	288a703a 	and	r5,r5,r2
    da6c:	003efd06 	br	d664 <__alt_data_end+0xfffb7f34>
    da70:	adcf883a 	add	r7,r21,r23
    da74:	997fffc4 	addi	r5,r19,-1
    da78:	3dc0412e 	bgeu	r7,r23,db80 <__divdf3+0x7fc>
    da7c:	2827883a 	mov	r19,r5
    da80:	38bfd01e 	bne	r7,r2,d9c4 <__alt_data_end+0xfffb8294>
    da84:	d8c00117 	ldw	r3,4(sp)
    da88:	193fce1e 	bne	r3,r4,d9c4 <__alt_data_end+0xfffb8294>
    da8c:	003fce06 	br	d9c8 <__alt_data_end+0xfffb8298>
    da90:	d9800215 	stw	r6,8(sp)
    da94:	d9c00515 	stw	r7,20(sp)
    da98:	000f2800 	call	f280 <__clzsi2>
    da9c:	10c00804 	addi	r3,r2,32
    daa0:	010009c4 	movi	r4,39
    daa4:	d9800217 	ldw	r6,8(sp)
    daa8:	d9c00517 	ldw	r7,20(sp)
    daac:	20feb20e 	bge	r4,r3,d578 <__alt_data_end+0xfffb7e48>
    dab0:	117ffe04 	addi	r5,r2,-8
    dab4:	a162983a 	sll	r17,r20,r5
    dab8:	0027883a 	mov	r19,zero
    dabc:	003eb506 	br	d594 <__alt_data_end+0xfffb7e64>
    dac0:	3009883a 	mov	r4,r6
    dac4:	d9800215 	stw	r6,8(sp)
    dac8:	da000315 	stw	r8,12(sp)
    dacc:	da400415 	stw	r9,16(sp)
    dad0:	000f2800 	call	f280 <__clzsi2>
    dad4:	10c00804 	addi	r3,r2,32
    dad8:	010009c4 	movi	r4,39
    dadc:	d9800217 	ldw	r6,8(sp)
    dae0:	da000317 	ldw	r8,12(sp)
    dae4:	da400417 	ldw	r9,16(sp)
    dae8:	20fec10e 	bge	r4,r3,d5f0 <__alt_data_end+0xfffb7ec0>
    daec:	10bffe04 	addi	r2,r2,-8
    daf0:	a8a0983a 	sll	r16,r21,r2
    daf4:	002b883a 	mov	r21,zero
    daf8:	003ec406 	br	d60c <__alt_data_end+0xfffb7edc>
    dafc:	d8c00117 	ldw	r3,4(sp)
    db00:	b0ed883a 	add	r22,r22,r3
    db04:	b0c5803a 	cmpltu	r2,r22,r3
    db08:	15c5883a 	add	r2,r2,r23
    db0c:	11cf883a 	add	r7,r2,r7
    db10:	88bfffc4 	addi	r2,r17,-1
    db14:	b9c00d2e 	bgeu	r23,r7,db4c <__divdf3+0x7c8>
    db18:	39003f36 	bltu	r7,r4,dc18 <__divdf3+0x894>
    db1c:	21c06a26 	beq	r4,r7,dcc8 <__divdf3+0x944>
    db20:	3909c83a 	sub	r4,r7,r4
    db24:	1023883a 	mov	r17,r2
    db28:	003f4f06 	br	d868 <__alt_data_end+0xfffb8138>
    db2c:	9d7ee536 	bltu	r19,r21,d6c4 <__alt_data_end+0xfffb7f94>
    db30:	982ed07a 	srli	r23,r19,1
    db34:	880497fa 	slli	r2,r17,31
    db38:	8810d07a 	srli	r8,r17,1
    db3c:	982c97fa 	slli	r22,r19,31
    db40:	b884b03a 	or	r2,r23,r2
    db44:	d8800015 	stw	r2,0(sp)
    db48:	003ee206 	br	d6d4 <__alt_data_end+0xfffb7fa4>
    db4c:	3dfff41e 	bne	r7,r23,db20 <__alt_data_end+0xfffb83f0>
    db50:	d8c00117 	ldw	r3,4(sp)
    db54:	b0fff02e 	bgeu	r22,r3,db18 <__alt_data_end+0xfffb83e8>
    db58:	b909c83a 	sub	r4,r23,r4
    db5c:	1023883a 	mov	r17,r2
    db60:	003f4106 	br	d868 <__alt_data_end+0xfffb8138>
    db64:	1021883a 	mov	r16,r2
    db68:	003f1106 	br	d7b0 <__alt_data_end+0xfffb8080>
    db6c:	1023883a 	mov	r17,r2
    db70:	003ef706 	br	d750 <__alt_data_end+0xfffb8020>
    db74:	b23fe136 	bltu	r22,r8,dafc <__alt_data_end+0xfffb83cc>
    db78:	0009883a 	mov	r4,zero
    db7c:	003f3a06 	br	d868 <__alt_data_end+0xfffb8138>
    db80:	38802c36 	bltu	r7,r2,dc34 <__divdf3+0x8b0>
    db84:	11c05326 	beq	r2,r7,dcd4 <__divdf3+0x950>
    db88:	2827883a 	mov	r19,r5
    db8c:	003f8d06 	br	d9c4 <__alt_data_end+0xfffb8294>
    db90:	04ffffc4 	movi	r19,-1
    db94:	003f8c06 	br	d9c8 <__alt_data_end+0xfffb8298>
    db98:	1011883a 	mov	r8,r2
    db9c:	003f4d06 	br	d8d4 <__alt_data_end+0xfffb81a4>
    dba0:	1013883a 	mov	r9,r2
    dba4:	003f6406 	br	d938 <__alt_data_end+0xfffb8208>
    dba8:	e029883a 	mov	r20,fp
    dbac:	003f8606 	br	d9c8 <__alt_data_end+0xfffb8298>
    dbb0:	008007c4 	movi	r2,31
    dbb4:	14002a16 	blt	r2,r16,dc60 <__divdf3+0x8dc>
    dbb8:	91410784 	addi	r5,r18,1054
    dbbc:	9c0cd83a 	srl	r6,r19,r16
    dbc0:	8948983a 	sll	r4,r17,r5
    dbc4:	9944983a 	sll	r2,r19,r5
    dbc8:	8c20d83a 	srl	r16,r17,r16
    dbcc:	3108b03a 	or	r4,r6,r4
    dbd0:	1004c03a 	cmpne	r2,r2,zero
    dbd4:	2084b03a 	or	r2,r4,r2
    dbd8:	110001cc 	andi	r4,r2,7
    dbdc:	20000726 	beq	r4,zero,dbfc <__divdf3+0x878>
    dbe0:	114003cc 	andi	r5,r2,15
    dbe4:	01000104 	movi	r4,4
    dbe8:	29000426 	beq	r5,r4,dbfc <__divdf3+0x878>
    dbec:	11000104 	addi	r4,r2,4
    dbf0:	2085803a 	cmpltu	r2,r4,r2
    dbf4:	80a1883a 	add	r16,r16,r2
    dbf8:	2005883a 	mov	r2,r4
    dbfc:	8100202c 	andhi	r4,r16,128
    dc00:	20002d26 	beq	r4,zero,dcb8 <__divdf3+0x934>
    dc04:	a180004c 	andi	r6,r20,1
    dc08:	02000044 	movi	r8,1
    dc0c:	000b883a 	mov	r5,zero
    dc10:	0027883a 	mov	r19,zero
    dc14:	003e3906 	br	d4fc <__alt_data_end+0xfffb7dcc>
    dc18:	d8c00117 	ldw	r3,4(sp)
    dc1c:	8c7fff84 	addi	r17,r17,-2
    dc20:	b0ed883a 	add	r22,r22,r3
    dc24:	b0c5803a 	cmpltu	r2,r22,r3
    dc28:	15c5883a 	add	r2,r2,r23
    dc2c:	11cf883a 	add	r7,r2,r7
    dc30:	003f0c06 	br	d864 <__alt_data_end+0xfffb8134>
    dc34:	d8c00117 	ldw	r3,4(sp)
    dc38:	997fff84 	addi	r5,r19,-2
    dc3c:	18d1883a 	add	r8,r3,r3
    dc40:	40c7803a 	cmpltu	r3,r8,r3
    dc44:	1dcd883a 	add	r6,r3,r23
    dc48:	398f883a 	add	r7,r7,r6
    dc4c:	da000115 	stw	r8,4(sp)
    dc50:	003f8a06 	br	da7c <__alt_data_end+0xfffb834c>
    dc54:	203f861e 	bne	r4,zero,da70 <__alt_data_end+0xfffb8340>
    dc58:	d8000115 	stw	zero,4(sp)
    dc5c:	003f8906 	br	da84 <__alt_data_end+0xfffb8354>
    dc60:	00bef884 	movi	r2,-1054
    dc64:	1485c83a 	sub	r2,r2,r18
    dc68:	01000804 	movi	r4,32
    dc6c:	8884d83a 	srl	r2,r17,r2
    dc70:	81001c26 	beq	r16,r4,dce4 <__divdf3+0x960>
    dc74:	91010f84 	addi	r4,r18,1086
    dc78:	8908983a 	sll	r4,r17,r4
    dc7c:	24c8b03a 	or	r4,r4,r19
    dc80:	2008c03a 	cmpne	r4,r4,zero
    dc84:	2084b03a 	or	r2,r4,r2
    dc88:	140001cc 	andi	r16,r2,7
    dc8c:	8000061e 	bne	r16,zero,dca8 <__divdf3+0x924>
    dc90:	000b883a 	mov	r5,zero
    dc94:	1004d0fa 	srli	r2,r2,3
    dc98:	a180004c 	andi	r6,r20,1
    dc9c:	0011883a 	mov	r8,zero
    dca0:	1426b03a 	or	r19,r2,r16
    dca4:	003e1506 	br	d4fc <__alt_data_end+0xfffb7dcc>
    dca8:	114003cc 	andi	r5,r2,15
    dcac:	01000104 	movi	r4,4
    dcb0:	0021883a 	mov	r16,zero
    dcb4:	293fcd1e 	bne	r5,r4,dbec <__alt_data_end+0xfffb84bc>
    dcb8:	800a927a 	slli	r5,r16,9
    dcbc:	8020977a 	slli	r16,r16,29
    dcc0:	280ad33a 	srli	r5,r5,12
    dcc4:	003ff306 	br	dc94 <__alt_data_end+0xfffb8564>
    dcc8:	b23fd336 	bltu	r22,r8,dc18 <__alt_data_end+0xfffb84e8>
    dccc:	1023883a 	mov	r17,r2
    dcd0:	003fa906 	br	db78 <__alt_data_end+0xfffb8448>
    dcd4:	d8c00117 	ldw	r3,4(sp)
    dcd8:	193fd636 	bltu	r3,r4,dc34 <__alt_data_end+0xfffb8504>
    dcdc:	2827883a 	mov	r19,r5
    dce0:	003f6806 	br	da84 <__alt_data_end+0xfffb8354>
    dce4:	0009883a 	mov	r4,zero
    dce8:	003fe406 	br	dc7c <__alt_data_end+0xfffb854c>
    dcec:	00800434 	movhi	r2,16
    dcf0:	89400234 	orhi	r5,r17,8
    dcf4:	10bfffc4 	addi	r2,r2,-1
    dcf8:	e00d883a 	mov	r6,fp
    dcfc:	288a703a 	and	r5,r5,r2
    dd00:	003e5806 	br	d664 <__alt_data_end+0xfffb7f34>

0000dd04 <__eqdf2>:
    dd04:	2804d53a 	srli	r2,r5,20
    dd08:	3806d53a 	srli	r3,r7,20
    dd0c:	02000434 	movhi	r8,16
    dd10:	423fffc4 	addi	r8,r8,-1
    dd14:	1081ffcc 	andi	r2,r2,2047
    dd18:	0241ffc4 	movi	r9,2047
    dd1c:	2a14703a 	and	r10,r5,r8
    dd20:	18c1ffcc 	andi	r3,r3,2047
    dd24:	3a10703a 	and	r8,r7,r8
    dd28:	280ad7fa 	srli	r5,r5,31
    dd2c:	380ed7fa 	srli	r7,r7,31
    dd30:	12400f26 	beq	r2,r9,dd70 <__eqdf2+0x6c>
    dd34:	0241ffc4 	movi	r9,2047
    dd38:	1a400326 	beq	r3,r9,dd48 <__eqdf2+0x44>
    dd3c:	10c00526 	beq	r2,r3,dd54 <__eqdf2+0x50>
    dd40:	00800044 	movi	r2,1
    dd44:	f800283a 	ret
    dd48:	4192b03a 	or	r9,r8,r6
    dd4c:	483ffc1e 	bne	r9,zero,dd40 <__alt_data_end+0xfffb8610>
    dd50:	10fffb1e 	bne	r2,r3,dd40 <__alt_data_end+0xfffb8610>
    dd54:	523ffa1e 	bne	r10,r8,dd40 <__alt_data_end+0xfffb8610>
    dd58:	21bff91e 	bne	r4,r6,dd40 <__alt_data_end+0xfffb8610>
    dd5c:	29c00826 	beq	r5,r7,dd80 <__eqdf2+0x7c>
    dd60:	103ff71e 	bne	r2,zero,dd40 <__alt_data_end+0xfffb8610>
    dd64:	5104b03a 	or	r2,r10,r4
    dd68:	1004c03a 	cmpne	r2,r2,zero
    dd6c:	f800283a 	ret
    dd70:	5112b03a 	or	r9,r10,r4
    dd74:	483fef26 	beq	r9,zero,dd34 <__alt_data_end+0xfffb8604>
    dd78:	00800044 	movi	r2,1
    dd7c:	f800283a 	ret
    dd80:	0005883a 	mov	r2,zero
    dd84:	f800283a 	ret

0000dd88 <__gedf2>:
    dd88:	2804d53a 	srli	r2,r5,20
    dd8c:	3806d53a 	srli	r3,r7,20
    dd90:	02000434 	movhi	r8,16
    dd94:	423fffc4 	addi	r8,r8,-1
    dd98:	0241ffc4 	movi	r9,2047
    dd9c:	1081ffcc 	andi	r2,r2,2047
    dda0:	2a14703a 	and	r10,r5,r8
    dda4:	1a46703a 	and	r3,r3,r9
    dda8:	3a10703a 	and	r8,r7,r8
    ddac:	280ad7fa 	srli	r5,r5,31
    ddb0:	380ed7fa 	srli	r7,r7,31
    ddb4:	12400b26 	beq	r2,r9,dde4 <__gedf2+0x5c>
    ddb8:	1a401626 	beq	r3,r9,de14 <__gedf2+0x8c>
    ddbc:	10000c1e 	bne	r2,zero,ddf0 <__gedf2+0x68>
    ddc0:	5112b03a 	or	r9,r10,r4
    ddc4:	4813003a 	cmpeq	r9,r9,zero
    ddc8:	4817883a 	mov	r11,r9
    ddcc:	18000c1e 	bne	r3,zero,de00 <__gedf2+0x78>
    ddd0:	4198b03a 	or	r12,r8,r6
    ddd4:	60000a1e 	bne	r12,zero,de00 <__gedf2+0x78>
    ddd8:	48001326 	beq	r9,zero,de28 <__gedf2+0xa0>
    dddc:	0005883a 	mov	r2,zero
    dde0:	f800283a 	ret
    dde4:	5112b03a 	or	r9,r10,r4
    dde8:	4800191e 	bne	r9,zero,de50 <__gedf2+0xc8>
    ddec:	18800926 	beq	r3,r2,de14 <__gedf2+0x8c>
    ddf0:	18000b1e 	bne	r3,zero,de20 <__gedf2+0x98>
    ddf4:	4192b03a 	or	r9,r8,r6
    ddf8:	0017883a 	mov	r11,zero
    ddfc:	48000a26 	beq	r9,zero,de28 <__gedf2+0xa0>
    de00:	39c03fcc 	andi	r7,r7,255
    de04:	58000726 	beq	r11,zero,de24 <__gedf2+0x9c>
    de08:	3800081e 	bne	r7,zero,de2c <__gedf2+0xa4>
    de0c:	00bfffc4 	movi	r2,-1
    de10:	f800283a 	ret
    de14:	4192b03a 	or	r9,r8,r6
    de18:	48000d1e 	bne	r9,zero,de50 <__gedf2+0xc8>
    de1c:	103fe826 	beq	r2,zero,ddc0 <__alt_data_end+0xfffb8690>
    de20:	39c03fcc 	andi	r7,r7,255
    de24:	29c00326 	beq	r5,r7,de34 <__gedf2+0xac>
    de28:	283ff81e 	bne	r5,zero,de0c <__alt_data_end+0xfffb86dc>
    de2c:	00800044 	movi	r2,1
    de30:	f800283a 	ret
    de34:	18bffc16 	blt	r3,r2,de28 <__alt_data_end+0xfffb86f8>
    de38:	10c00316 	blt	r2,r3,de48 <__gedf2+0xc0>
    de3c:	42bffa36 	bltu	r8,r10,de28 <__alt_data_end+0xfffb86f8>
    de40:	52000526 	beq	r10,r8,de58 <__gedf2+0xd0>
    de44:	523fe52e 	bgeu	r10,r8,dddc <__alt_data_end+0xfffb86ac>
    de48:	283ff026 	beq	r5,zero,de0c <__alt_data_end+0xfffb86dc>
    de4c:	003ff706 	br	de2c <__alt_data_end+0xfffb86fc>
    de50:	00bfff84 	movi	r2,-2
    de54:	f800283a 	ret
    de58:	313ff336 	bltu	r6,r4,de28 <__alt_data_end+0xfffb86f8>
    de5c:	21bfdf2e 	bgeu	r4,r6,dddc <__alt_data_end+0xfffb86ac>
    de60:	283fea26 	beq	r5,zero,de0c <__alt_data_end+0xfffb86dc>
    de64:	003ff106 	br	de2c <__alt_data_end+0xfffb86fc>

0000de68 <__ledf2>:
    de68:	2804d53a 	srli	r2,r5,20
    de6c:	3810d53a 	srli	r8,r7,20
    de70:	00c00434 	movhi	r3,16
    de74:	18ffffc4 	addi	r3,r3,-1
    de78:	0241ffc4 	movi	r9,2047
    de7c:	1081ffcc 	andi	r2,r2,2047
    de80:	28d4703a 	and	r10,r5,r3
    de84:	4250703a 	and	r8,r8,r9
    de88:	38c6703a 	and	r3,r7,r3
    de8c:	280ad7fa 	srli	r5,r5,31
    de90:	380ed7fa 	srli	r7,r7,31
    de94:	12400b26 	beq	r2,r9,dec4 <__ledf2+0x5c>
    de98:	42401926 	beq	r8,r9,df00 <__ledf2+0x98>
    de9c:	10000c1e 	bne	r2,zero,ded0 <__ledf2+0x68>
    dea0:	5112b03a 	or	r9,r10,r4
    dea4:	4813003a 	cmpeq	r9,r9,zero
    dea8:	4817883a 	mov	r11,r9
    deac:	40000f26 	beq	r8,zero,deec <__ledf2+0x84>
    deb0:	39c03fcc 	andi	r7,r7,255
    deb4:	58001826 	beq	r11,zero,df18 <__ledf2+0xb0>
    deb8:	38000a1e 	bne	r7,zero,dee4 <__ledf2+0x7c>
    debc:	00bfffc4 	movi	r2,-1
    dec0:	f800283a 	ret
    dec4:	5112b03a 	or	r9,r10,r4
    dec8:	48000f1e 	bne	r9,zero,df08 <__ledf2+0xa0>
    decc:	40800c26 	beq	r8,r2,df00 <__ledf2+0x98>
    ded0:	4000101e 	bne	r8,zero,df14 <__ledf2+0xac>
    ded4:	1992b03a 	or	r9,r3,r6
    ded8:	0017883a 	mov	r11,zero
    dedc:	483ff41e 	bne	r9,zero,deb0 <__alt_data_end+0xfffb8780>
    dee0:	283ff61e 	bne	r5,zero,debc <__alt_data_end+0xfffb878c>
    dee4:	00800044 	movi	r2,1
    dee8:	f800283a 	ret
    deec:	1998b03a 	or	r12,r3,r6
    def0:	603fef1e 	bne	r12,zero,deb0 <__alt_data_end+0xfffb8780>
    def4:	483ffa26 	beq	r9,zero,dee0 <__alt_data_end+0xfffb87b0>
    def8:	0005883a 	mov	r2,zero
    defc:	f800283a 	ret
    df00:	1992b03a 	or	r9,r3,r6
    df04:	48000226 	beq	r9,zero,df10 <__ledf2+0xa8>
    df08:	00800084 	movi	r2,2
    df0c:	f800283a 	ret
    df10:	103fe326 	beq	r2,zero,dea0 <__alt_data_end+0xfffb8770>
    df14:	39c03fcc 	andi	r7,r7,255
    df18:	29fff11e 	bne	r5,r7,dee0 <__alt_data_end+0xfffb87b0>
    df1c:	40bff016 	blt	r8,r2,dee0 <__alt_data_end+0xfffb87b0>
    df20:	12000316 	blt	r2,r8,df30 <__ledf2+0xc8>
    df24:	1abfee36 	bltu	r3,r10,dee0 <__alt_data_end+0xfffb87b0>
    df28:	50c00326 	beq	r10,r3,df38 <__ledf2+0xd0>
    df2c:	50fff22e 	bgeu	r10,r3,def8 <__alt_data_end+0xfffb87c8>
    df30:	283fe226 	beq	r5,zero,debc <__alt_data_end+0xfffb878c>
    df34:	003feb06 	br	dee4 <__alt_data_end+0xfffb87b4>
    df38:	313fe936 	bltu	r6,r4,dee0 <__alt_data_end+0xfffb87b0>
    df3c:	21bfee2e 	bgeu	r4,r6,def8 <__alt_data_end+0xfffb87c8>
    df40:	283fde26 	beq	r5,zero,debc <__alt_data_end+0xfffb878c>
    df44:	003fe706 	br	dee4 <__alt_data_end+0xfffb87b4>

0000df48 <__muldf3>:
    df48:	deffee04 	addi	sp,sp,-72
    df4c:	dd000c15 	stw	r20,48(sp)
    df50:	2828d53a 	srli	r20,r5,20
    df54:	dd400d15 	stw	r21,52(sp)
    df58:	282ad7fa 	srli	r21,r5,31
    df5c:	dc000815 	stw	r16,32(sp)
    df60:	04000434 	movhi	r16,16
    df64:	ddc00f15 	stw	r23,60(sp)
    df68:	dcc00b15 	stw	r19,44(sp)
    df6c:	dc800a15 	stw	r18,40(sp)
    df70:	843fffc4 	addi	r16,r16,-1
    df74:	dfc01115 	stw	ra,68(sp)
    df78:	df001015 	stw	fp,64(sp)
    df7c:	dd800e15 	stw	r22,56(sp)
    df80:	dc400915 	stw	r17,36(sp)
    df84:	a501ffcc 	andi	r20,r20,2047
    df88:	2025883a 	mov	r18,r4
    df8c:	202f883a 	mov	r23,r4
    df90:	2c20703a 	and	r16,r5,r16
    df94:	a827883a 	mov	r19,r21
    df98:	aa403fcc 	andi	r9,r21,255
    df9c:	a0005926 	beq	r20,zero,e104 <__muldf3+0x1bc>
    dfa0:	0081ffc4 	movi	r2,2047
    dfa4:	a0803426 	beq	r20,r2,e078 <__muldf3+0x130>
    dfa8:	84000434 	orhi	r16,r16,16
    dfac:	2004d77a 	srli	r2,r4,29
    dfb0:	802090fa 	slli	r16,r16,3
    dfb4:	202e90fa 	slli	r23,r4,3
    dfb8:	a53f0044 	addi	r20,r20,-1023
    dfbc:	80a0b03a 	or	r16,r16,r2
    dfc0:	000b883a 	mov	r5,zero
    dfc4:	0039883a 	mov	fp,zero
    dfc8:	3806d53a 	srli	r3,r7,20
    dfcc:	382cd7fa 	srli	r22,r7,31
    dfd0:	00800434 	movhi	r2,16
    dfd4:	10bfffc4 	addi	r2,r2,-1
    dfd8:	18c1ffcc 	andi	r3,r3,2047
    dfdc:	3025883a 	mov	r18,r6
    dfe0:	38a2703a 	and	r17,r7,r2
    dfe4:	b2803fcc 	andi	r10,r22,255
    dfe8:	18006426 	beq	r3,zero,e17c <__muldf3+0x234>
    dfec:	0081ffc4 	movi	r2,2047
    dff0:	18805c26 	beq	r3,r2,e164 <__muldf3+0x21c>
    dff4:	8c400434 	orhi	r17,r17,16
    dff8:	3004d77a 	srli	r2,r6,29
    dffc:	882290fa 	slli	r17,r17,3
    e000:	302490fa 	slli	r18,r6,3
    e004:	18ff0044 	addi	r3,r3,-1023
    e008:	88a2b03a 	or	r17,r17,r2
    e00c:	000f883a 	mov	r7,zero
    e010:	394ab03a 	or	r5,r7,r5
    e014:	280a90ba 	slli	r5,r5,2
    e018:	00800074 	movhi	r2,1
    e01c:	10b80e04 	addi	r2,r2,-8136
    e020:	288b883a 	add	r5,r5,r2
    e024:	28800017 	ldw	r2,0(r5)
    e028:	a0c7883a 	add	r3,r20,r3
    e02c:	b54cf03a 	xor	r6,r22,r21
    e030:	1a000044 	addi	r8,r3,1
    e034:	1000683a 	jmp	r2
    e038:	0000e27c 	xorhi	zero,zero,905
    e03c:	0000e268 	cmpgeui	zero,zero,905
    e040:	0000e268 	cmpgeui	zero,zero,905
    e044:	0000e254 	movui	zero,905
    e048:	0000e094 	movui	zero,898
    e04c:	0000e094 	movui	zero,898
    e050:	0000e23c 	xorhi	zero,zero,904
    e054:	0000e254 	movui	zero,905
    e058:	0000e094 	movui	zero,898
    e05c:	0000e23c 	xorhi	zero,zero,904
    e060:	0000e094 	movui	zero,898
    e064:	0000e254 	movui	zero,905
    e068:	0000e098 	cmpnei	zero,zero,898
    e06c:	0000e098 	cmpnei	zero,zero,898
    e070:	0000e098 	cmpnei	zero,zero,898
    e074:	0000e5b8 	rdprs	zero,zero,918
    e078:	8104b03a 	or	r2,r16,r4
    e07c:	10006c1e 	bne	r2,zero,e230 <__muldf3+0x2e8>
    e080:	01400204 	movi	r5,8
    e084:	0021883a 	mov	r16,zero
    e088:	002f883a 	mov	r23,zero
    e08c:	07000084 	movi	fp,2
    e090:	003fcd06 	br	dfc8 <__alt_data_end+0xfffb8898>
    e094:	3013883a 	mov	r9,r6
    e098:	00800084 	movi	r2,2
    e09c:	e080501e 	bne	fp,r2,e1e0 <__muldf3+0x298>
    e0a0:	4cc0004c 	andi	r19,r9,1
    e0a4:	0101ffc4 	movi	r4,2047
    e0a8:	0021883a 	mov	r16,zero
    e0ac:	002f883a 	mov	r23,zero
    e0b0:	2008953a 	slli	r4,r4,20
    e0b4:	98c03fcc 	andi	r3,r19,255
    e0b8:	04400434 	movhi	r17,16
    e0bc:	8c7fffc4 	addi	r17,r17,-1
    e0c0:	180697fa 	slli	r3,r3,31
    e0c4:	8460703a 	and	r16,r16,r17
    e0c8:	8120b03a 	or	r16,r16,r4
    e0cc:	80c6b03a 	or	r3,r16,r3
    e0d0:	b805883a 	mov	r2,r23
    e0d4:	dfc01117 	ldw	ra,68(sp)
    e0d8:	df001017 	ldw	fp,64(sp)
    e0dc:	ddc00f17 	ldw	r23,60(sp)
    e0e0:	dd800e17 	ldw	r22,56(sp)
    e0e4:	dd400d17 	ldw	r21,52(sp)
    e0e8:	dd000c17 	ldw	r20,48(sp)
    e0ec:	dcc00b17 	ldw	r19,44(sp)
    e0f0:	dc800a17 	ldw	r18,40(sp)
    e0f4:	dc400917 	ldw	r17,36(sp)
    e0f8:	dc000817 	ldw	r16,32(sp)
    e0fc:	dec01204 	addi	sp,sp,72
    e100:	f800283a 	ret
    e104:	8104b03a 	or	r2,r16,r4
    e108:	10004426 	beq	r2,zero,e21c <__muldf3+0x2d4>
    e10c:	80014b26 	beq	r16,zero,e63c <__muldf3+0x6f4>
    e110:	8009883a 	mov	r4,r16
    e114:	d9800715 	stw	r6,28(sp)
    e118:	d9c00215 	stw	r7,8(sp)
    e11c:	da400415 	stw	r9,16(sp)
    e120:	000f2800 	call	f280 <__clzsi2>
    e124:	d9800717 	ldw	r6,28(sp)
    e128:	d9c00217 	ldw	r7,8(sp)
    e12c:	da400417 	ldw	r9,16(sp)
    e130:	1007883a 	mov	r3,r2
    e134:	01000a04 	movi	r4,40
    e138:	1dfffe04 	addi	r23,r3,-8
    e13c:	20c9c83a 	sub	r4,r4,r3
    e140:	85e0983a 	sll	r16,r16,r23
    e144:	9108d83a 	srl	r4,r18,r4
    e148:	95ee983a 	sll	r23,r18,r23
    e14c:	2420b03a 	or	r16,r4,r16
    e150:	053f0344 	movi	r20,-1011
    e154:	a0e9c83a 	sub	r20,r20,r3
    e158:	000b883a 	mov	r5,zero
    e15c:	0039883a 	mov	fp,zero
    e160:	003f9906 	br	dfc8 <__alt_data_end+0xfffb8898>
    e164:	8984b03a 	or	r2,r17,r6
    e168:	10002a1e 	bne	r2,zero,e214 <__muldf3+0x2cc>
    e16c:	0023883a 	mov	r17,zero
    e170:	0025883a 	mov	r18,zero
    e174:	01c00084 	movi	r7,2
    e178:	003fa506 	br	e010 <__alt_data_end+0xfffb88e0>
    e17c:	8984b03a 	or	r2,r17,r6
    e180:	10002026 	beq	r2,zero,e204 <__muldf3+0x2bc>
    e184:	88011c26 	beq	r17,zero,e5f8 <__muldf3+0x6b0>
    e188:	8809883a 	mov	r4,r17
    e18c:	d9400215 	stw	r5,8(sp)
    e190:	d9800715 	stw	r6,28(sp)
    e194:	da400415 	stw	r9,16(sp)
    e198:	da800315 	stw	r10,12(sp)
    e19c:	000f2800 	call	f280 <__clzsi2>
    e1a0:	d9400217 	ldw	r5,8(sp)
    e1a4:	d9800717 	ldw	r6,28(sp)
    e1a8:	da400417 	ldw	r9,16(sp)
    e1ac:	da800317 	ldw	r10,12(sp)
    e1b0:	1007883a 	mov	r3,r2
    e1b4:	01000a04 	movi	r4,40
    e1b8:	1cbffe04 	addi	r18,r3,-8
    e1bc:	20c9c83a 	sub	r4,r4,r3
    e1c0:	8ca2983a 	sll	r17,r17,r18
    e1c4:	3108d83a 	srl	r4,r6,r4
    e1c8:	34a4983a 	sll	r18,r6,r18
    e1cc:	2462b03a 	or	r17,r4,r17
    e1d0:	00bf0344 	movi	r2,-1011
    e1d4:	10c7c83a 	sub	r3,r2,r3
    e1d8:	000f883a 	mov	r7,zero
    e1dc:	003f8c06 	br	e010 <__alt_data_end+0xfffb88e0>
    e1e0:	008000c4 	movi	r2,3
    e1e4:	e0816d26 	beq	fp,r2,e79c <__muldf3+0x854>
    e1e8:	00800044 	movi	r2,1
    e1ec:	e081321e 	bne	fp,r2,e6b8 <__muldf3+0x770>
    e1f0:	48a6703a 	and	r19,r9,r2
    e1f4:	0009883a 	mov	r4,zero
    e1f8:	0021883a 	mov	r16,zero
    e1fc:	002f883a 	mov	r23,zero
    e200:	003fab06 	br	e0b0 <__alt_data_end+0xfffb8980>
    e204:	0023883a 	mov	r17,zero
    e208:	0025883a 	mov	r18,zero
    e20c:	01c00044 	movi	r7,1
    e210:	003f7f06 	br	e010 <__alt_data_end+0xfffb88e0>
    e214:	01c000c4 	movi	r7,3
    e218:	003f7d06 	br	e010 <__alt_data_end+0xfffb88e0>
    e21c:	01400104 	movi	r5,4
    e220:	0021883a 	mov	r16,zero
    e224:	002f883a 	mov	r23,zero
    e228:	07000044 	movi	fp,1
    e22c:	003f6606 	br	dfc8 <__alt_data_end+0xfffb8898>
    e230:	01400304 	movi	r5,12
    e234:	070000c4 	movi	fp,3
    e238:	003f6306 	br	dfc8 <__alt_data_end+0xfffb8898>
    e23c:	04000434 	movhi	r16,16
    e240:	0027883a 	mov	r19,zero
    e244:	843fffc4 	addi	r16,r16,-1
    e248:	05ffffc4 	movi	r23,-1
    e24c:	0101ffc4 	movi	r4,2047
    e250:	003f9706 	br	e0b0 <__alt_data_end+0xfffb8980>
    e254:	8821883a 	mov	r16,r17
    e258:	902f883a 	mov	r23,r18
    e25c:	5013883a 	mov	r9,r10
    e260:	3839883a 	mov	fp,r7
    e264:	003f8c06 	br	e098 <__alt_data_end+0xfffb8968>
    e268:	8821883a 	mov	r16,r17
    e26c:	902f883a 	mov	r23,r18
    e270:	3013883a 	mov	r9,r6
    e274:	3839883a 	mov	fp,r7
    e278:	003f8706 	br	e098 <__alt_data_end+0xfffb8968>
    e27c:	b82ad43a 	srli	r21,r23,16
    e280:	9038d43a 	srli	fp,r18,16
    e284:	bdffffcc 	andi	r23,r23,65535
    e288:	94bfffcc 	andi	r18,r18,65535
    e28c:	9009883a 	mov	r4,r18
    e290:	b80b883a 	mov	r5,r23
    e294:	d8c00515 	stw	r3,20(sp)
    e298:	d9800715 	stw	r6,28(sp)
    e29c:	da000615 	stw	r8,24(sp)
    e2a0:	000cac00 	call	cac0 <__mulsi3>
    e2a4:	9009883a 	mov	r4,r18
    e2a8:	a80b883a 	mov	r5,r21
    e2ac:	1029883a 	mov	r20,r2
    e2b0:	000cac00 	call	cac0 <__mulsi3>
    e2b4:	e009883a 	mov	r4,fp
    e2b8:	a80b883a 	mov	r5,r21
    e2bc:	102d883a 	mov	r22,r2
    e2c0:	000cac00 	call	cac0 <__mulsi3>
    e2c4:	e009883a 	mov	r4,fp
    e2c8:	b80b883a 	mov	r5,r23
    e2cc:	1027883a 	mov	r19,r2
    e2d0:	000cac00 	call	cac0 <__mulsi3>
    e2d4:	a008d43a 	srli	r4,r20,16
    e2d8:	b085883a 	add	r2,r22,r2
    e2dc:	d8c00517 	ldw	r3,20(sp)
    e2e0:	110f883a 	add	r7,r2,r4
    e2e4:	d9800717 	ldw	r6,28(sp)
    e2e8:	da000617 	ldw	r8,24(sp)
    e2ec:	3d80022e 	bgeu	r7,r22,e2f8 <__muldf3+0x3b0>
    e2f0:	00800074 	movhi	r2,1
    e2f4:	98a7883a 	add	r19,r19,r2
    e2f8:	3804943a 	slli	r2,r7,16
    e2fc:	380ed43a 	srli	r7,r7,16
    e300:	882cd43a 	srli	r22,r17,16
    e304:	a53fffcc 	andi	r20,r20,65535
    e308:	8c7fffcc 	andi	r17,r17,65535
    e30c:	1529883a 	add	r20,r2,r20
    e310:	8809883a 	mov	r4,r17
    e314:	b80b883a 	mov	r5,r23
    e318:	d8c00515 	stw	r3,20(sp)
    e31c:	d9800715 	stw	r6,28(sp)
    e320:	da000615 	stw	r8,24(sp)
    e324:	d9c00015 	stw	r7,0(sp)
    e328:	dd000115 	stw	r20,4(sp)
    e32c:	000cac00 	call	cac0 <__mulsi3>
    e330:	a80b883a 	mov	r5,r21
    e334:	8809883a 	mov	r4,r17
    e338:	d8800415 	stw	r2,16(sp)
    e33c:	000cac00 	call	cac0 <__mulsi3>
    e340:	a80b883a 	mov	r5,r21
    e344:	b009883a 	mov	r4,r22
    e348:	1029883a 	mov	r20,r2
    e34c:	000cac00 	call	cac0 <__mulsi3>
    e350:	b009883a 	mov	r4,r22
    e354:	b80b883a 	mov	r5,r23
    e358:	102b883a 	mov	r21,r2
    e35c:	000cac00 	call	cac0 <__mulsi3>
    e360:	da400417 	ldw	r9,16(sp)
    e364:	a085883a 	add	r2,r20,r2
    e368:	d8c00517 	ldw	r3,20(sp)
    e36c:	4808d43a 	srli	r4,r9,16
    e370:	d9800717 	ldw	r6,28(sp)
    e374:	da000617 	ldw	r8,24(sp)
    e378:	1109883a 	add	r4,r2,r4
    e37c:	2500022e 	bgeu	r4,r20,e388 <__muldf3+0x440>
    e380:	00800074 	movhi	r2,1
    e384:	a8ab883a 	add	r21,r21,r2
    e388:	200e943a 	slli	r7,r4,16
    e38c:	2004d43a 	srli	r2,r4,16
    e390:	802ed43a 	srli	r23,r16,16
    e394:	843fffcc 	andi	r16,r16,65535
    e398:	4d3fffcc 	andi	r20,r9,65535
    e39c:	9009883a 	mov	r4,r18
    e3a0:	800b883a 	mov	r5,r16
    e3a4:	3d29883a 	add	r20,r7,r20
    e3a8:	d8c00515 	stw	r3,20(sp)
    e3ac:	d9800715 	stw	r6,28(sp)
    e3b0:	da000615 	stw	r8,24(sp)
    e3b4:	a8ab883a 	add	r21,r21,r2
    e3b8:	000cac00 	call	cac0 <__mulsi3>
    e3bc:	9009883a 	mov	r4,r18
    e3c0:	b80b883a 	mov	r5,r23
    e3c4:	d8800315 	stw	r2,12(sp)
    e3c8:	000cac00 	call	cac0 <__mulsi3>
    e3cc:	e009883a 	mov	r4,fp
    e3d0:	b80b883a 	mov	r5,r23
    e3d4:	1025883a 	mov	r18,r2
    e3d8:	000cac00 	call	cac0 <__mulsi3>
    e3dc:	e009883a 	mov	r4,fp
    e3e0:	800b883a 	mov	r5,r16
    e3e4:	d8800215 	stw	r2,8(sp)
    e3e8:	000cac00 	call	cac0 <__mulsi3>
    e3ec:	da800317 	ldw	r10,12(sp)
    e3f0:	d9400017 	ldw	r5,0(sp)
    e3f4:	9085883a 	add	r2,r18,r2
    e3f8:	5008d43a 	srli	r4,r10,16
    e3fc:	a153883a 	add	r9,r20,r5
    e400:	d8c00517 	ldw	r3,20(sp)
    e404:	1109883a 	add	r4,r2,r4
    e408:	d9800717 	ldw	r6,28(sp)
    e40c:	da000617 	ldw	r8,24(sp)
    e410:	dac00217 	ldw	r11,8(sp)
    e414:	2480022e 	bgeu	r4,r18,e420 <__muldf3+0x4d8>
    e418:	00800074 	movhi	r2,1
    e41c:	5897883a 	add	r11,r11,r2
    e420:	200e943a 	slli	r7,r4,16
    e424:	2038d43a 	srli	fp,r4,16
    e428:	52bfffcc 	andi	r10,r10,65535
    e42c:	3a8f883a 	add	r7,r7,r10
    e430:	8809883a 	mov	r4,r17
    e434:	800b883a 	mov	r5,r16
    e438:	d8c00515 	stw	r3,20(sp)
    e43c:	d9800715 	stw	r6,28(sp)
    e440:	d9c00215 	stw	r7,8(sp)
    e444:	da000615 	stw	r8,24(sp)
    e448:	da400415 	stw	r9,16(sp)
    e44c:	5f39883a 	add	fp,r11,fp
    e450:	000cac00 	call	cac0 <__mulsi3>
    e454:	8809883a 	mov	r4,r17
    e458:	b80b883a 	mov	r5,r23
    e45c:	1025883a 	mov	r18,r2
    e460:	000cac00 	call	cac0 <__mulsi3>
    e464:	b009883a 	mov	r4,r22
    e468:	b80b883a 	mov	r5,r23
    e46c:	d8800315 	stw	r2,12(sp)
    e470:	000cac00 	call	cac0 <__mulsi3>
    e474:	b009883a 	mov	r4,r22
    e478:	800b883a 	mov	r5,r16
    e47c:	1023883a 	mov	r17,r2
    e480:	000cac00 	call	cac0 <__mulsi3>
    e484:	da800317 	ldw	r10,12(sp)
    e488:	9008d43a 	srli	r4,r18,16
    e48c:	d8c00517 	ldw	r3,20(sp)
    e490:	5085883a 	add	r2,r10,r2
    e494:	1109883a 	add	r4,r2,r4
    e498:	d9800717 	ldw	r6,28(sp)
    e49c:	d9c00217 	ldw	r7,8(sp)
    e4a0:	da000617 	ldw	r8,24(sp)
    e4a4:	da400417 	ldw	r9,16(sp)
    e4a8:	2280022e 	bgeu	r4,r10,e4b4 <__muldf3+0x56c>
    e4ac:	00800074 	movhi	r2,1
    e4b0:	88a3883a 	add	r17,r17,r2
    e4b4:	2004943a 	slli	r2,r4,16
    e4b8:	94bfffcc 	andi	r18,r18,65535
    e4bc:	4ce7883a 	add	r19,r9,r19
    e4c0:	14a5883a 	add	r18,r2,r18
    e4c4:	9d29803a 	cmpltu	r20,r19,r20
    e4c8:	9565883a 	add	r18,r18,r21
    e4cc:	9505883a 	add	r2,r18,r20
    e4d0:	99e7883a 	add	r19,r19,r7
    e4d4:	99cf803a 	cmpltu	r7,r19,r7
    e4d8:	e08b883a 	add	r5,fp,r2
    e4dc:	2008d43a 	srli	r4,r4,16
    e4e0:	29ef883a 	add	r23,r5,r7
    e4e4:	1529803a 	cmpltu	r20,r2,r20
    e4e8:	956b803a 	cmpltu	r21,r18,r21
    e4ec:	b9cf803a 	cmpltu	r7,r23,r7
    e4f0:	a564b03a 	or	r18,r20,r21
    e4f4:	2f39803a 	cmpltu	fp,r5,fp
    e4f8:	9125883a 	add	r18,r18,r4
    e4fc:	3f38b03a 	or	fp,r7,fp
    e500:	9725883a 	add	r18,r18,fp
    e504:	9804927a 	slli	r2,r19,9
    e508:	9463883a 	add	r17,r18,r17
    e50c:	d9000117 	ldw	r4,4(sp)
    e510:	b820d5fa 	srli	r16,r23,23
    e514:	8822927a 	slli	r17,r17,9
    e518:	9826d5fa 	srli	r19,r19,23
    e51c:	1104b03a 	or	r2,r2,r4
    e520:	b82e927a 	slli	r23,r23,9
    e524:	1004c03a 	cmpne	r2,r2,zero
    e528:	8c20b03a 	or	r16,r17,r16
    e52c:	14e6b03a 	or	r19,r2,r19
    e530:	8080402c 	andhi	r2,r16,256
    e534:	9deeb03a 	or	r23,r19,r23
    e538:	10000726 	beq	r2,zero,e558 <__muldf3+0x610>
    e53c:	b804d07a 	srli	r2,r23,1
    e540:	800697fa 	slli	r3,r16,31
    e544:	bdc0004c 	andi	r23,r23,1
    e548:	8020d07a 	srli	r16,r16,1
    e54c:	b8aeb03a 	or	r23,r23,r2
    e550:	b8eeb03a 	or	r23,r23,r3
    e554:	4007883a 	mov	r3,r8
    e558:	1900ffc4 	addi	r4,r3,1023
    e55c:	01004d0e 	bge	zero,r4,e694 <__muldf3+0x74c>
    e560:	b88001cc 	andi	r2,r23,7
    e564:	10000726 	beq	r2,zero,e584 <__muldf3+0x63c>
    e568:	b94003cc 	andi	r5,r23,15
    e56c:	00800104 	movi	r2,4
    e570:	28800426 	beq	r5,r2,e584 <__muldf3+0x63c>
    e574:	b885883a 	add	r2,r23,r2
    e578:	15ef803a 	cmpltu	r23,r2,r23
    e57c:	85e1883a 	add	r16,r16,r23
    e580:	102f883a 	mov	r23,r2
    e584:	8080402c 	andhi	r2,r16,256
    e588:	10000426 	beq	r2,zero,e59c <__muldf3+0x654>
    e58c:	00bfc034 	movhi	r2,65280
    e590:	10bfffc4 	addi	r2,r2,-1
    e594:	19010004 	addi	r4,r3,1024
    e598:	80a0703a 	and	r16,r16,r2
    e59c:	0081ff84 	movi	r2,2046
    e5a0:	1100340e 	bge	r2,r4,e674 <__muldf3+0x72c>
    e5a4:	34c0004c 	andi	r19,r6,1
    e5a8:	0101ffc4 	movi	r4,2047
    e5ac:	0021883a 	mov	r16,zero
    e5b0:	002f883a 	mov	r23,zero
    e5b4:	003ebe06 	br	e0b0 <__alt_data_end+0xfffb8980>
    e5b8:	8080022c 	andhi	r2,r16,8
    e5bc:	10000926 	beq	r2,zero,e5e4 <__muldf3+0x69c>
    e5c0:	8880022c 	andhi	r2,r17,8
    e5c4:	1000071e 	bne	r2,zero,e5e4 <__muldf3+0x69c>
    e5c8:	00800434 	movhi	r2,16
    e5cc:	8c000234 	orhi	r16,r17,8
    e5d0:	10bfffc4 	addi	r2,r2,-1
    e5d4:	b027883a 	mov	r19,r22
    e5d8:	80a0703a 	and	r16,r16,r2
    e5dc:	902f883a 	mov	r23,r18
    e5e0:	003f1a06 	br	e24c <__alt_data_end+0xfffb8b1c>
    e5e4:	00800434 	movhi	r2,16
    e5e8:	84000234 	orhi	r16,r16,8
    e5ec:	10bfffc4 	addi	r2,r2,-1
    e5f0:	80a0703a 	and	r16,r16,r2
    e5f4:	003f1506 	br	e24c <__alt_data_end+0xfffb8b1c>
    e5f8:	3009883a 	mov	r4,r6
    e5fc:	d9400215 	stw	r5,8(sp)
    e600:	d9800715 	stw	r6,28(sp)
    e604:	da400415 	stw	r9,16(sp)
    e608:	da800315 	stw	r10,12(sp)
    e60c:	000f2800 	call	f280 <__clzsi2>
    e610:	10c00804 	addi	r3,r2,32
    e614:	010009c4 	movi	r4,39
    e618:	d9400217 	ldw	r5,8(sp)
    e61c:	d9800717 	ldw	r6,28(sp)
    e620:	da400417 	ldw	r9,16(sp)
    e624:	da800317 	ldw	r10,12(sp)
    e628:	20fee20e 	bge	r4,r3,e1b4 <__alt_data_end+0xfffb8a84>
    e62c:	147ffe04 	addi	r17,r2,-8
    e630:	9462983a 	sll	r17,r18,r17
    e634:	0025883a 	mov	r18,zero
    e638:	003ee506 	br	e1d0 <__alt_data_end+0xfffb8aa0>
    e63c:	d9800715 	stw	r6,28(sp)
    e640:	d9c00215 	stw	r7,8(sp)
    e644:	da400415 	stw	r9,16(sp)
    e648:	000f2800 	call	f280 <__clzsi2>
    e64c:	10c00804 	addi	r3,r2,32
    e650:	010009c4 	movi	r4,39
    e654:	d9800717 	ldw	r6,28(sp)
    e658:	d9c00217 	ldw	r7,8(sp)
    e65c:	da400417 	ldw	r9,16(sp)
    e660:	20feb40e 	bge	r4,r3,e134 <__alt_data_end+0xfffb8a04>
    e664:	143ffe04 	addi	r16,r2,-8
    e668:	9420983a 	sll	r16,r18,r16
    e66c:	002f883a 	mov	r23,zero
    e670:	003eb706 	br	e150 <__alt_data_end+0xfffb8a20>
    e674:	8004977a 	slli	r2,r16,29
    e678:	b82ed0fa 	srli	r23,r23,3
    e67c:	8020927a 	slli	r16,r16,9
    e680:	2101ffcc 	andi	r4,r4,2047
    e684:	15eeb03a 	or	r23,r2,r23
    e688:	8020d33a 	srli	r16,r16,12
    e68c:	34c0004c 	andi	r19,r6,1
    e690:	003e8706 	br	e0b0 <__alt_data_end+0xfffb8980>
    e694:	00bf0084 	movi	r2,-1022
    e698:	10c5c83a 	sub	r2,r2,r3
    e69c:	01000e04 	movi	r4,56
    e6a0:	2080080e 	bge	r4,r2,e6c4 <__muldf3+0x77c>
    e6a4:	34c0004c 	andi	r19,r6,1
    e6a8:	0009883a 	mov	r4,zero
    e6ac:	0021883a 	mov	r16,zero
    e6b0:	002f883a 	mov	r23,zero
    e6b4:	003e7e06 	br	e0b0 <__alt_data_end+0xfffb8980>
    e6b8:	4007883a 	mov	r3,r8
    e6bc:	480d883a 	mov	r6,r9
    e6c0:	003fa506 	br	e558 <__alt_data_end+0xfffb8e28>
    e6c4:	010007c4 	movi	r4,31
    e6c8:	20801816 	blt	r4,r2,e72c <__muldf3+0x7e4>
    e6cc:	18c10784 	addi	r3,r3,1054
    e6d0:	80c8983a 	sll	r4,r16,r3
    e6d4:	b88ad83a 	srl	r5,r23,r2
    e6d8:	b8c6983a 	sll	r3,r23,r3
    e6dc:	80a0d83a 	srl	r16,r16,r2
    e6e0:	2908b03a 	or	r4,r5,r4
    e6e4:	1804c03a 	cmpne	r2,r3,zero
    e6e8:	2088b03a 	or	r4,r4,r2
    e6ec:	208001cc 	andi	r2,r4,7
    e6f0:	10000726 	beq	r2,zero,e710 <__muldf3+0x7c8>
    e6f4:	20c003cc 	andi	r3,r4,15
    e6f8:	00800104 	movi	r2,4
    e6fc:	18800426 	beq	r3,r2,e710 <__muldf3+0x7c8>
    e700:	20c00104 	addi	r3,r4,4
    e704:	1905803a 	cmpltu	r2,r3,r4
    e708:	80a1883a 	add	r16,r16,r2
    e70c:	1809883a 	mov	r4,r3
    e710:	8080202c 	andhi	r2,r16,128
    e714:	10001b26 	beq	r2,zero,e784 <__muldf3+0x83c>
    e718:	34c0004c 	andi	r19,r6,1
    e71c:	01000044 	movi	r4,1
    e720:	0021883a 	mov	r16,zero
    e724:	002f883a 	mov	r23,zero
    e728:	003e6106 	br	e0b0 <__alt_data_end+0xfffb8980>
    e72c:	013ef884 	movi	r4,-1054
    e730:	20c9c83a 	sub	r4,r4,r3
    e734:	01400804 	movi	r5,32
    e738:	8108d83a 	srl	r4,r16,r4
    e73c:	11401526 	beq	r2,r5,e794 <__muldf3+0x84c>
    e740:	18c10f84 	addi	r3,r3,1086
    e744:	80e0983a 	sll	r16,r16,r3
    e748:	85eeb03a 	or	r23,r16,r23
    e74c:	b804c03a 	cmpne	r2,r23,zero
    e750:	1108b03a 	or	r4,r2,r4
    e754:	20c001cc 	andi	r3,r4,7
    e758:	1800061e 	bne	r3,zero,e774 <__muldf3+0x82c>
    e75c:	0021883a 	mov	r16,zero
    e760:	202ed0fa 	srli	r23,r4,3
    e764:	34c0004c 	andi	r19,r6,1
    e768:	0009883a 	mov	r4,zero
    e76c:	b8eeb03a 	or	r23,r23,r3
    e770:	003e4f06 	br	e0b0 <__alt_data_end+0xfffb8980>
    e774:	20c003cc 	andi	r3,r4,15
    e778:	00800104 	movi	r2,4
    e77c:	0021883a 	mov	r16,zero
    e780:	18bfdf1e 	bne	r3,r2,e700 <__alt_data_end+0xfffb8fd0>
    e784:	8004927a 	slli	r2,r16,9
    e788:	8006977a 	slli	r3,r16,29
    e78c:	1020d33a 	srli	r16,r2,12
    e790:	003ff306 	br	e760 <__alt_data_end+0xfffb9030>
    e794:	0021883a 	mov	r16,zero
    e798:	003feb06 	br	e748 <__alt_data_end+0xfffb9018>
    e79c:	00800434 	movhi	r2,16
    e7a0:	84000234 	orhi	r16,r16,8
    e7a4:	10bfffc4 	addi	r2,r2,-1
    e7a8:	4cc0004c 	andi	r19,r9,1
    e7ac:	80a0703a 	and	r16,r16,r2
    e7b0:	003ea606 	br	e24c <__alt_data_end+0xfffb8b1c>

0000e7b4 <__subdf3>:
    e7b4:	00c00434 	movhi	r3,16
    e7b8:	18ffffc4 	addi	r3,r3,-1
    e7bc:	defffb04 	addi	sp,sp,-20
    e7c0:	28d2703a 	and	r9,r5,r3
    e7c4:	3814d53a 	srli	r10,r7,20
    e7c8:	38c6703a 	and	r3,r7,r3
    e7cc:	3004d77a 	srli	r2,r6,29
    e7d0:	dc800215 	stw	r18,8(sp)
    e7d4:	dc000015 	stw	r16,0(sp)
    e7d8:	2824d7fa 	srli	r18,r5,31
    e7dc:	2820d53a 	srli	r16,r5,20
    e7e0:	481290fa 	slli	r9,r9,3
    e7e4:	200ad77a 	srli	r5,r4,29
    e7e8:	180690fa 	slli	r3,r3,3
    e7ec:	dc400115 	stw	r17,4(sp)
    e7f0:	dfc00415 	stw	ra,16(sp)
    e7f4:	202290fa 	slli	r17,r4,3
    e7f8:	dcc00315 	stw	r19,12(sp)
    e7fc:	5281ffcc 	andi	r10,r10,2047
    e800:	0101ffc4 	movi	r4,2047
    e804:	9011883a 	mov	r8,r18
    e808:	8401ffcc 	andi	r16,r16,2047
    e80c:	94803fcc 	andi	r18,r18,255
    e810:	494ab03a 	or	r5,r9,r5
    e814:	380ed7fa 	srli	r7,r7,31
    e818:	1886b03a 	or	r3,r3,r2
    e81c:	300c90fa 	slli	r6,r6,3
    e820:	51009026 	beq	r10,r4,ea64 <__subdf3+0x2b0>
    e824:	39c0005c 	xori	r7,r7,1
    e828:	8285c83a 	sub	r2,r16,r10
    e82c:	91c06f26 	beq	r18,r7,e9ec <__subdf3+0x238>
    e830:	0080b10e 	bge	zero,r2,eaf8 <__subdf3+0x344>
    e834:	50002a1e 	bne	r10,zero,e8e0 <__subdf3+0x12c>
    e838:	1988b03a 	or	r4,r3,r6
    e83c:	2000941e 	bne	r4,zero,ea90 <__subdf3+0x2dc>
    e840:	888001cc 	andi	r2,r17,7
    e844:	10005b26 	beq	r2,zero,e9b4 <__subdf3+0x200>
    e848:	88c003cc 	andi	r3,r17,15
    e84c:	00800104 	movi	r2,4
    e850:	18805826 	beq	r3,r2,e9b4 <__subdf3+0x200>
    e854:	88c00104 	addi	r3,r17,4
    e858:	1c63803a 	cmpltu	r17,r3,r17
    e85c:	2c4b883a 	add	r5,r5,r17
    e860:	2880202c 	andhi	r2,r5,128
    e864:	9200004c 	andi	r8,r18,1
    e868:	1823883a 	mov	r17,r3
    e86c:	10005426 	beq	r2,zero,e9c0 <__subdf3+0x20c>
    e870:	84000044 	addi	r16,r16,1
    e874:	0081ffc4 	movi	r2,2047
    e878:	8080bf26 	beq	r16,r2,eb78 <__subdf3+0x3c4>
    e87c:	013fe034 	movhi	r4,65408
    e880:	213fffc4 	addi	r4,r4,-1
    e884:	290a703a 	and	r5,r5,r4
    e888:	2804977a 	slli	r2,r5,29
    e88c:	280a927a 	slli	r5,r5,9
    e890:	8822d0fa 	srli	r17,r17,3
    e894:	8401ffcc 	andi	r16,r16,2047
    e898:	2808d33a 	srli	r4,r5,12
    e89c:	1444b03a 	or	r2,r2,r17
    e8a0:	8401ffcc 	andi	r16,r16,2047
    e8a4:	800a953a 	slli	r5,r16,20
    e8a8:	40c03fcc 	andi	r3,r8,255
    e8ac:	04000434 	movhi	r16,16
    e8b0:	180697fa 	slli	r3,r3,31
    e8b4:	843fffc4 	addi	r16,r16,-1
    e8b8:	2420703a 	and	r16,r4,r16
    e8bc:	8160b03a 	or	r16,r16,r5
    e8c0:	80c6b03a 	or	r3,r16,r3
    e8c4:	dfc00417 	ldw	ra,16(sp)
    e8c8:	dcc00317 	ldw	r19,12(sp)
    e8cc:	dc800217 	ldw	r18,8(sp)
    e8d0:	dc400117 	ldw	r17,4(sp)
    e8d4:	dc000017 	ldw	r16,0(sp)
    e8d8:	dec00504 	addi	sp,sp,20
    e8dc:	f800283a 	ret
    e8e0:	0101ffc4 	movi	r4,2047
    e8e4:	813fd626 	beq	r16,r4,e840 <__alt_data_end+0xfffb9110>
    e8e8:	18c02034 	orhi	r3,r3,128
    e8ec:	01000e04 	movi	r4,56
    e8f0:	2080a416 	blt	r4,r2,eb84 <__subdf3+0x3d0>
    e8f4:	010007c4 	movi	r4,31
    e8f8:	2080c716 	blt	r4,r2,ec18 <__subdf3+0x464>
    e8fc:	01000804 	movi	r4,32
    e900:	2089c83a 	sub	r4,r4,r2
    e904:	1910983a 	sll	r8,r3,r4
    e908:	308ed83a 	srl	r7,r6,r2
    e90c:	3108983a 	sll	r4,r6,r4
    e910:	1884d83a 	srl	r2,r3,r2
    e914:	41ccb03a 	or	r6,r8,r7
    e918:	2008c03a 	cmpne	r4,r4,zero
    e91c:	310cb03a 	or	r6,r6,r4
    e920:	898dc83a 	sub	r6,r17,r6
    e924:	89a3803a 	cmpltu	r17,r17,r6
    e928:	288bc83a 	sub	r5,r5,r2
    e92c:	2c4bc83a 	sub	r5,r5,r17
    e930:	3023883a 	mov	r17,r6
    e934:	2880202c 	andhi	r2,r5,128
    e938:	10006b26 	beq	r2,zero,eae8 <__subdf3+0x334>
    e93c:	04c02034 	movhi	r19,128
    e940:	9cffffc4 	addi	r19,r19,-1
    e944:	2ce6703a 	and	r19,r5,r19
    e948:	98007c26 	beq	r19,zero,eb3c <__subdf3+0x388>
    e94c:	9809883a 	mov	r4,r19
    e950:	000f2800 	call	f280 <__clzsi2>
    e954:	10fffe04 	addi	r3,r2,-8
    e958:	010007c4 	movi	r4,31
    e95c:	20c07d16 	blt	r4,r3,eb54 <__subdf3+0x3a0>
    e960:	01400a04 	movi	r5,40
    e964:	2885c83a 	sub	r2,r5,r2
    e968:	888ad83a 	srl	r5,r17,r2
    e96c:	98e6983a 	sll	r19,r19,r3
    e970:	88e2983a 	sll	r17,r17,r3
    e974:	2ce6b03a 	or	r19,r5,r19
    e978:	1c007a16 	blt	r3,r16,eb64 <__subdf3+0x3b0>
    e97c:	1c21c83a 	sub	r16,r3,r16
    e980:	81400044 	addi	r5,r16,1
    e984:	00c007c4 	movi	r3,31
    e988:	19409616 	blt	r3,r5,ebe4 <__subdf3+0x430>
    e98c:	1c21c83a 	sub	r16,r3,r16
    e990:	8c08983a 	sll	r4,r17,r16
    e994:	8946d83a 	srl	r3,r17,r5
    e998:	9c20983a 	sll	r16,r19,r16
    e99c:	2008c03a 	cmpne	r4,r4,zero
    e9a0:	994ad83a 	srl	r5,r19,r5
    e9a4:	1c06b03a 	or	r3,r3,r16
    e9a8:	1922b03a 	or	r17,r3,r4
    e9ac:	0021883a 	mov	r16,zero
    e9b0:	003fa306 	br	e840 <__alt_data_end+0xfffb9110>
    e9b4:	2880202c 	andhi	r2,r5,128
    e9b8:	9200004c 	andi	r8,r18,1
    e9bc:	103fac1e 	bne	r2,zero,e870 <__alt_data_end+0xfffb9140>
    e9c0:	2804977a 	slli	r2,r5,29
    e9c4:	8822d0fa 	srli	r17,r17,3
    e9c8:	00c1ffc4 	movi	r3,2047
    e9cc:	280ad0fa 	srli	r5,r5,3
    e9d0:	1444b03a 	or	r2,r2,r17
    e9d4:	80c02726 	beq	r16,r3,ea74 <__subdf3+0x2c0>
    e9d8:	01000434 	movhi	r4,16
    e9dc:	213fffc4 	addi	r4,r4,-1
    e9e0:	80e0703a 	and	r16,r16,r3
    e9e4:	2908703a 	and	r4,r5,r4
    e9e8:	003fad06 	br	e8a0 <__alt_data_end+0xfffb9170>
    e9ec:	0080690e 	bge	zero,r2,eb94 <__subdf3+0x3e0>
    e9f0:	50002f26 	beq	r10,zero,eab0 <__subdf3+0x2fc>
    e9f4:	0101ffc4 	movi	r4,2047
    e9f8:	813f9126 	beq	r16,r4,e840 <__alt_data_end+0xfffb9110>
    e9fc:	18c02034 	orhi	r3,r3,128
    ea00:	01000e04 	movi	r4,56
    ea04:	2080b00e 	bge	r4,r2,ecc8 <__subdf3+0x514>
    ea08:	198cb03a 	or	r6,r3,r6
    ea0c:	300ec03a 	cmpne	r7,r6,zero
    ea10:	0005883a 	mov	r2,zero
    ea14:	3c4f883a 	add	r7,r7,r17
    ea18:	3c63803a 	cmpltu	r17,r7,r17
    ea1c:	114b883a 	add	r5,r2,r5
    ea20:	2c4b883a 	add	r5,r5,r17
    ea24:	3823883a 	mov	r17,r7
    ea28:	2880202c 	andhi	r2,r5,128
    ea2c:	10002e26 	beq	r2,zero,eae8 <__subdf3+0x334>
    ea30:	84000044 	addi	r16,r16,1
    ea34:	0081ffc4 	movi	r2,2047
    ea38:	8080de26 	beq	r16,r2,edb4 <__subdf3+0x600>
    ea3c:	00bfe034 	movhi	r2,65408
    ea40:	10bfffc4 	addi	r2,r2,-1
    ea44:	288a703a 	and	r5,r5,r2
    ea48:	880cd07a 	srli	r6,r17,1
    ea4c:	280897fa 	slli	r4,r5,31
    ea50:	88c0004c 	andi	r3,r17,1
    ea54:	30e2b03a 	or	r17,r6,r3
    ea58:	280ad07a 	srli	r5,r5,1
    ea5c:	8922b03a 	or	r17,r17,r4
    ea60:	003f7706 	br	e840 <__alt_data_end+0xfffb9110>
    ea64:	1984b03a 	or	r2,r3,r6
    ea68:	103f6e26 	beq	r2,zero,e824 <__alt_data_end+0xfffb90f4>
    ea6c:	39c03fcc 	andi	r7,r7,255
    ea70:	003f6d06 	br	e828 <__alt_data_end+0xfffb90f8>
    ea74:	1146b03a 	or	r3,r2,r5
    ea78:	18003f26 	beq	r3,zero,eb78 <__subdf3+0x3c4>
    ea7c:	00c00434 	movhi	r3,16
    ea80:	29000234 	orhi	r4,r5,8
    ea84:	18ffffc4 	addi	r3,r3,-1
    ea88:	20c8703a 	and	r4,r4,r3
    ea8c:	003f8406 	br	e8a0 <__alt_data_end+0xfffb9170>
    ea90:	10bfffc4 	addi	r2,r2,-1
    ea94:	1000501e 	bne	r2,zero,ebd8 <__subdf3+0x424>
    ea98:	898fc83a 	sub	r7,r17,r6
    ea9c:	89e3803a 	cmpltu	r17,r17,r7
    eaa0:	28cbc83a 	sub	r5,r5,r3
    eaa4:	2c4bc83a 	sub	r5,r5,r17
    eaa8:	3823883a 	mov	r17,r7
    eaac:	003fa106 	br	e934 <__alt_data_end+0xfffb9204>
    eab0:	1988b03a 	or	r4,r3,r6
    eab4:	203f6226 	beq	r4,zero,e840 <__alt_data_end+0xfffb9110>
    eab8:	10bfffc4 	addi	r2,r2,-1
    eabc:	10009b1e 	bne	r2,zero,ed2c <__subdf3+0x578>
    eac0:	344d883a 	add	r6,r6,r17
    eac4:	3463803a 	cmpltu	r17,r6,r17
    eac8:	194b883a 	add	r5,r3,r5
    eacc:	2c4b883a 	add	r5,r5,r17
    ead0:	3023883a 	mov	r17,r6
    ead4:	003fd406 	br	ea28 <__alt_data_end+0xfffb92f8>
    ead8:	1106b03a 	or	r3,r2,r4
    eadc:	1800b426 	beq	r3,zero,edb0 <__subdf3+0x5fc>
    eae0:	100b883a 	mov	r5,r2
    eae4:	2023883a 	mov	r17,r4
    eae8:	888001cc 	andi	r2,r17,7
    eaec:	103f561e 	bne	r2,zero,e848 <__alt_data_end+0xfffb9118>
    eaf0:	9200004c 	andi	r8,r18,1
    eaf4:	003fb206 	br	e9c0 <__alt_data_end+0xfffb9290>
    eaf8:	1000531e 	bne	r2,zero,ec48 <__subdf3+0x494>
    eafc:	80800044 	addi	r2,r16,1
    eb00:	1081ffcc 	andi	r2,r2,2047
    eb04:	01000044 	movi	r4,1
    eb08:	2080a00e 	bge	r4,r2,ed8c <__subdf3+0x5d8>
    eb0c:	8985c83a 	sub	r2,r17,r6
    eb10:	8889803a 	cmpltu	r4,r17,r2
    eb14:	28e7c83a 	sub	r19,r5,r3
    eb18:	9927c83a 	sub	r19,r19,r4
    eb1c:	9900202c 	andhi	r4,r19,128
    eb20:	20006226 	beq	r4,zero,ecac <__subdf3+0x4f8>
    eb24:	3463c83a 	sub	r17,r6,r17
    eb28:	194bc83a 	sub	r5,r3,r5
    eb2c:	344d803a 	cmpltu	r6,r6,r17
    eb30:	29a7c83a 	sub	r19,r5,r6
    eb34:	3825883a 	mov	r18,r7
    eb38:	983f841e 	bne	r19,zero,e94c <__alt_data_end+0xfffb921c>
    eb3c:	8809883a 	mov	r4,r17
    eb40:	000f2800 	call	f280 <__clzsi2>
    eb44:	10800804 	addi	r2,r2,32
    eb48:	10fffe04 	addi	r3,r2,-8
    eb4c:	010007c4 	movi	r4,31
    eb50:	20ff830e 	bge	r4,r3,e960 <__alt_data_end+0xfffb9230>
    eb54:	14fff604 	addi	r19,r2,-40
    eb58:	8ce6983a 	sll	r19,r17,r19
    eb5c:	0023883a 	mov	r17,zero
    eb60:	1c3f860e 	bge	r3,r16,e97c <__alt_data_end+0xfffb924c>
    eb64:	017fe034 	movhi	r5,65408
    eb68:	297fffc4 	addi	r5,r5,-1
    eb6c:	80e1c83a 	sub	r16,r16,r3
    eb70:	994a703a 	and	r5,r19,r5
    eb74:	003f3206 	br	e840 <__alt_data_end+0xfffb9110>
    eb78:	0009883a 	mov	r4,zero
    eb7c:	0005883a 	mov	r2,zero
    eb80:	003f4706 	br	e8a0 <__alt_data_end+0xfffb9170>
    eb84:	198cb03a 	or	r6,r3,r6
    eb88:	300cc03a 	cmpne	r6,r6,zero
    eb8c:	0005883a 	mov	r2,zero
    eb90:	003f6306 	br	e920 <__alt_data_end+0xfffb91f0>
    eb94:	10009d1e 	bne	r2,zero,ee0c <__subdf3+0x658>
    eb98:	81c00044 	addi	r7,r16,1
    eb9c:	3881ffcc 	andi	r2,r7,2047
    eba0:	02400044 	movi	r9,1
    eba4:	4880680e 	bge	r9,r2,ed48 <__subdf3+0x594>
    eba8:	0081ffc4 	movi	r2,2047
    ebac:	3880ae26 	beq	r7,r2,ee68 <__subdf3+0x6b4>
    ebb0:	344d883a 	add	r6,r6,r17
    ebb4:	3463803a 	cmpltu	r17,r6,r17
    ebb8:	194b883a 	add	r5,r3,r5
    ebbc:	2c4b883a 	add	r5,r5,r17
    ebc0:	282297fa 	slli	r17,r5,31
    ebc4:	300cd07a 	srli	r6,r6,1
    ebc8:	280ad07a 	srli	r5,r5,1
    ebcc:	3821883a 	mov	r16,r7
    ebd0:	89a2b03a 	or	r17,r17,r6
    ebd4:	003f1a06 	br	e840 <__alt_data_end+0xfffb9110>
    ebd8:	0101ffc4 	movi	r4,2047
    ebdc:	813f431e 	bne	r16,r4,e8ec <__alt_data_end+0xfffb91bc>
    ebe0:	003f1706 	br	e840 <__alt_data_end+0xfffb9110>
    ebe4:	80bff844 	addi	r2,r16,-31
    ebe8:	00c00804 	movi	r3,32
    ebec:	9884d83a 	srl	r2,r19,r2
    ebf0:	28c05126 	beq	r5,r3,ed38 <__subdf3+0x584>
    ebf4:	00c00fc4 	movi	r3,63
    ebf8:	1c21c83a 	sub	r16,r3,r16
    ebfc:	9c26983a 	sll	r19,r19,r16
    ec00:	9c62b03a 	or	r17,r19,r17
    ec04:	8822c03a 	cmpne	r17,r17,zero
    ec08:	88a2b03a 	or	r17,r17,r2
    ec0c:	000b883a 	mov	r5,zero
    ec10:	0021883a 	mov	r16,zero
    ec14:	003fb406 	br	eae8 <__alt_data_end+0xfffb93b8>
    ec18:	113ff804 	addi	r4,r2,-32
    ec1c:	01c00804 	movi	r7,32
    ec20:	1908d83a 	srl	r4,r3,r4
    ec24:	11c04626 	beq	r2,r7,ed40 <__subdf3+0x58c>
    ec28:	01c01004 	movi	r7,64
    ec2c:	3885c83a 	sub	r2,r7,r2
    ec30:	1884983a 	sll	r2,r3,r2
    ec34:	118cb03a 	or	r6,r2,r6
    ec38:	300cc03a 	cmpne	r6,r6,zero
    ec3c:	310cb03a 	or	r6,r6,r4
    ec40:	0005883a 	mov	r2,zero
    ec44:	003f3606 	br	e920 <__alt_data_end+0xfffb91f0>
    ec48:	80002b26 	beq	r16,zero,ecf8 <__subdf3+0x544>
    ec4c:	0101ffc4 	movi	r4,2047
    ec50:	51006926 	beq	r10,r4,edf8 <__subdf3+0x644>
    ec54:	0085c83a 	sub	r2,zero,r2
    ec58:	29402034 	orhi	r5,r5,128
    ec5c:	01000e04 	movi	r4,56
    ec60:	20807d16 	blt	r4,r2,ee58 <__subdf3+0x6a4>
    ec64:	010007c4 	movi	r4,31
    ec68:	2080d916 	blt	r4,r2,efd0 <__subdf3+0x81c>
    ec6c:	01000804 	movi	r4,32
    ec70:	2089c83a 	sub	r4,r4,r2
    ec74:	2912983a 	sll	r9,r5,r4
    ec78:	8890d83a 	srl	r8,r17,r2
    ec7c:	8908983a 	sll	r4,r17,r4
    ec80:	2884d83a 	srl	r2,r5,r2
    ec84:	4a22b03a 	or	r17,r9,r8
    ec88:	2008c03a 	cmpne	r4,r4,zero
    ec8c:	8922b03a 	or	r17,r17,r4
    ec90:	3463c83a 	sub	r17,r6,r17
    ec94:	1885c83a 	sub	r2,r3,r2
    ec98:	344d803a 	cmpltu	r6,r6,r17
    ec9c:	118bc83a 	sub	r5,r2,r6
    eca0:	5021883a 	mov	r16,r10
    eca4:	3825883a 	mov	r18,r7
    eca8:	003f2206 	br	e934 <__alt_data_end+0xfffb9204>
    ecac:	9886b03a 	or	r3,r19,r2
    ecb0:	18001c1e 	bne	r3,zero,ed24 <__subdf3+0x570>
    ecb4:	0011883a 	mov	r8,zero
    ecb8:	000b883a 	mov	r5,zero
    ecbc:	0023883a 	mov	r17,zero
    ecc0:	0021883a 	mov	r16,zero
    ecc4:	003f3e06 	br	e9c0 <__alt_data_end+0xfffb9290>
    ecc8:	010007c4 	movi	r4,31
    eccc:	20803c16 	blt	r4,r2,edc0 <__subdf3+0x60c>
    ecd0:	01000804 	movi	r4,32
    ecd4:	2089c83a 	sub	r4,r4,r2
    ecd8:	1912983a 	sll	r9,r3,r4
    ecdc:	308ed83a 	srl	r7,r6,r2
    ece0:	3108983a 	sll	r4,r6,r4
    ece4:	1884d83a 	srl	r2,r3,r2
    ece8:	49ceb03a 	or	r7,r9,r7
    ecec:	2008c03a 	cmpne	r4,r4,zero
    ecf0:	390eb03a 	or	r7,r7,r4
    ecf4:	003f4706 	br	ea14 <__alt_data_end+0xfffb92e4>
    ecf8:	2c48b03a 	or	r4,r5,r17
    ecfc:	20003e26 	beq	r4,zero,edf8 <__subdf3+0x644>
    ed00:	0084303a 	nor	r2,zero,r2
    ed04:	10003a1e 	bne	r2,zero,edf0 <__subdf3+0x63c>
    ed08:	3463c83a 	sub	r17,r6,r17
    ed0c:	194bc83a 	sub	r5,r3,r5
    ed10:	344d803a 	cmpltu	r6,r6,r17
    ed14:	298bc83a 	sub	r5,r5,r6
    ed18:	5021883a 	mov	r16,r10
    ed1c:	3825883a 	mov	r18,r7
    ed20:	003f0406 	br	e934 <__alt_data_end+0xfffb9204>
    ed24:	1023883a 	mov	r17,r2
    ed28:	003f0706 	br	e948 <__alt_data_end+0xfffb9218>
    ed2c:	0101ffc4 	movi	r4,2047
    ed30:	813f331e 	bne	r16,r4,ea00 <__alt_data_end+0xfffb92d0>
    ed34:	003ec206 	br	e840 <__alt_data_end+0xfffb9110>
    ed38:	0027883a 	mov	r19,zero
    ed3c:	003fb006 	br	ec00 <__alt_data_end+0xfffb94d0>
    ed40:	0005883a 	mov	r2,zero
    ed44:	003fbb06 	br	ec34 <__alt_data_end+0xfffb9504>
    ed48:	2c44b03a 	or	r2,r5,r17
    ed4c:	80008b1e 	bne	r16,zero,ef7c <__subdf3+0x7c8>
    ed50:	1000b526 	beq	r2,zero,f028 <__subdf3+0x874>
    ed54:	1984b03a 	or	r2,r3,r6
    ed58:	103eb926 	beq	r2,zero,e840 <__alt_data_end+0xfffb9110>
    ed5c:	3449883a 	add	r4,r6,r17
    ed60:	2463803a 	cmpltu	r17,r4,r17
    ed64:	194b883a 	add	r5,r3,r5
    ed68:	2c4b883a 	add	r5,r5,r17
    ed6c:	2880202c 	andhi	r2,r5,128
    ed70:	2023883a 	mov	r17,r4
    ed74:	103f5c26 	beq	r2,zero,eae8 <__alt_data_end+0xfffb93b8>
    ed78:	00bfe034 	movhi	r2,65408
    ed7c:	10bfffc4 	addi	r2,r2,-1
    ed80:	4821883a 	mov	r16,r9
    ed84:	288a703a 	and	r5,r5,r2
    ed88:	003ead06 	br	e840 <__alt_data_end+0xfffb9110>
    ed8c:	2c44b03a 	or	r2,r5,r17
    ed90:	8000291e 	bne	r16,zero,ee38 <__subdf3+0x684>
    ed94:	10004f1e 	bne	r2,zero,eed4 <__subdf3+0x720>
    ed98:	1984b03a 	or	r2,r3,r6
    ed9c:	10000426 	beq	r2,zero,edb0 <__subdf3+0x5fc>
    eda0:	180b883a 	mov	r5,r3
    eda4:	3023883a 	mov	r17,r6
    eda8:	3825883a 	mov	r18,r7
    edac:	003ea406 	br	e840 <__alt_data_end+0xfffb9110>
    edb0:	0011883a 	mov	r8,zero
    edb4:	000b883a 	mov	r5,zero
    edb8:	0023883a 	mov	r17,zero
    edbc:	003f0006 	br	e9c0 <__alt_data_end+0xfffb9290>
    edc0:	11fff804 	addi	r7,r2,-32
    edc4:	19c8d83a 	srl	r4,r3,r7
    edc8:	01c00804 	movi	r7,32
    edcc:	11c07e26 	beq	r2,r7,efc8 <__subdf3+0x814>
    edd0:	01c01004 	movi	r7,64
    edd4:	3885c83a 	sub	r2,r7,r2
    edd8:	1884983a 	sll	r2,r3,r2
    eddc:	118cb03a 	or	r6,r2,r6
    ede0:	300ec03a 	cmpne	r7,r6,zero
    ede4:	390eb03a 	or	r7,r7,r4
    ede8:	0005883a 	mov	r2,zero
    edec:	003f0906 	br	ea14 <__alt_data_end+0xfffb92e4>
    edf0:	0101ffc4 	movi	r4,2047
    edf4:	513f991e 	bne	r10,r4,ec5c <__alt_data_end+0xfffb952c>
    edf8:	180b883a 	mov	r5,r3
    edfc:	3023883a 	mov	r17,r6
    ee00:	5021883a 	mov	r16,r10
    ee04:	3825883a 	mov	r18,r7
    ee08:	003e8d06 	br	e840 <__alt_data_end+0xfffb9110>
    ee0c:	80001a1e 	bne	r16,zero,ee78 <__subdf3+0x6c4>
    ee10:	2c48b03a 	or	r4,r5,r17
    ee14:	20005526 	beq	r4,zero,ef6c <__subdf3+0x7b8>
    ee18:	0084303a 	nor	r2,zero,r2
    ee1c:	1000511e 	bne	r2,zero,ef64 <__subdf3+0x7b0>
    ee20:	89a3883a 	add	r17,r17,r6
    ee24:	194b883a 	add	r5,r3,r5
    ee28:	898d803a 	cmpltu	r6,r17,r6
    ee2c:	298b883a 	add	r5,r5,r6
    ee30:	5021883a 	mov	r16,r10
    ee34:	003efc06 	br	ea28 <__alt_data_end+0xfffb92f8>
    ee38:	1000341e 	bne	r2,zero,ef0c <__subdf3+0x758>
    ee3c:	1984b03a 	or	r2,r3,r6
    ee40:	10006f26 	beq	r2,zero,f000 <__subdf3+0x84c>
    ee44:	180b883a 	mov	r5,r3
    ee48:	3023883a 	mov	r17,r6
    ee4c:	3825883a 	mov	r18,r7
    ee50:	0401ffc4 	movi	r16,2047
    ee54:	003e7a06 	br	e840 <__alt_data_end+0xfffb9110>
    ee58:	2c62b03a 	or	r17,r5,r17
    ee5c:	8822c03a 	cmpne	r17,r17,zero
    ee60:	0005883a 	mov	r2,zero
    ee64:	003f8a06 	br	ec90 <__alt_data_end+0xfffb9560>
    ee68:	3821883a 	mov	r16,r7
    ee6c:	000b883a 	mov	r5,zero
    ee70:	0023883a 	mov	r17,zero
    ee74:	003ed206 	br	e9c0 <__alt_data_end+0xfffb9290>
    ee78:	0101ffc4 	movi	r4,2047
    ee7c:	51003b26 	beq	r10,r4,ef6c <__subdf3+0x7b8>
    ee80:	0085c83a 	sub	r2,zero,r2
    ee84:	29402034 	orhi	r5,r5,128
    ee88:	01000e04 	movi	r4,56
    ee8c:	20806216 	blt	r4,r2,f018 <__subdf3+0x864>
    ee90:	010007c4 	movi	r4,31
    ee94:	20806b16 	blt	r4,r2,f044 <__subdf3+0x890>
    ee98:	01000804 	movi	r4,32
    ee9c:	2089c83a 	sub	r4,r4,r2
    eea0:	2912983a 	sll	r9,r5,r4
    eea4:	888ed83a 	srl	r7,r17,r2
    eea8:	8908983a 	sll	r4,r17,r4
    eeac:	2884d83a 	srl	r2,r5,r2
    eeb0:	49e2b03a 	or	r17,r9,r7
    eeb4:	2008c03a 	cmpne	r4,r4,zero
    eeb8:	8922b03a 	or	r17,r17,r4
    eebc:	89a3883a 	add	r17,r17,r6
    eec0:	10c5883a 	add	r2,r2,r3
    eec4:	898d803a 	cmpltu	r6,r17,r6
    eec8:	118b883a 	add	r5,r2,r6
    eecc:	5021883a 	mov	r16,r10
    eed0:	003ed506 	br	ea28 <__alt_data_end+0xfffb92f8>
    eed4:	1984b03a 	or	r2,r3,r6
    eed8:	103e5926 	beq	r2,zero,e840 <__alt_data_end+0xfffb9110>
    eedc:	8989c83a 	sub	r4,r17,r6
    eee0:	8911803a 	cmpltu	r8,r17,r4
    eee4:	28c5c83a 	sub	r2,r5,r3
    eee8:	1205c83a 	sub	r2,r2,r8
    eeec:	1200202c 	andhi	r8,r2,128
    eef0:	403ef926 	beq	r8,zero,ead8 <__alt_data_end+0xfffb93a8>
    eef4:	3463c83a 	sub	r17,r6,r17
    eef8:	194bc83a 	sub	r5,r3,r5
    eefc:	344d803a 	cmpltu	r6,r6,r17
    ef00:	298bc83a 	sub	r5,r5,r6
    ef04:	3825883a 	mov	r18,r7
    ef08:	003e4d06 	br	e840 <__alt_data_end+0xfffb9110>
    ef0c:	1984b03a 	or	r2,r3,r6
    ef10:	10002b26 	beq	r2,zero,efc0 <__subdf3+0x80c>
    ef14:	2808d0fa 	srli	r4,r5,3
    ef18:	8822d0fa 	srli	r17,r17,3
    ef1c:	280a977a 	slli	r5,r5,29
    ef20:	2080022c 	andhi	r2,r4,8
    ef24:	2c62b03a 	or	r17,r5,r17
    ef28:	10000826 	beq	r2,zero,ef4c <__subdf3+0x798>
    ef2c:	1810d0fa 	srli	r8,r3,3
    ef30:	4080022c 	andhi	r2,r8,8
    ef34:	1000051e 	bne	r2,zero,ef4c <__subdf3+0x798>
    ef38:	300cd0fa 	srli	r6,r6,3
    ef3c:	1804977a 	slli	r2,r3,29
    ef40:	4009883a 	mov	r4,r8
    ef44:	3825883a 	mov	r18,r7
    ef48:	11a2b03a 	or	r17,r2,r6
    ef4c:	880ad77a 	srli	r5,r17,29
    ef50:	200890fa 	slli	r4,r4,3
    ef54:	882290fa 	slli	r17,r17,3
    ef58:	0401ffc4 	movi	r16,2047
    ef5c:	290ab03a 	or	r5,r5,r4
    ef60:	003e3706 	br	e840 <__alt_data_end+0xfffb9110>
    ef64:	0101ffc4 	movi	r4,2047
    ef68:	513fc71e 	bne	r10,r4,ee88 <__alt_data_end+0xfffb9758>
    ef6c:	180b883a 	mov	r5,r3
    ef70:	3023883a 	mov	r17,r6
    ef74:	5021883a 	mov	r16,r10
    ef78:	003e3106 	br	e840 <__alt_data_end+0xfffb9110>
    ef7c:	10002d26 	beq	r2,zero,f034 <__subdf3+0x880>
    ef80:	1984b03a 	or	r2,r3,r6
    ef84:	10000e26 	beq	r2,zero,efc0 <__subdf3+0x80c>
    ef88:	2808d0fa 	srli	r4,r5,3
    ef8c:	8822d0fa 	srli	r17,r17,3
    ef90:	280a977a 	slli	r5,r5,29
    ef94:	2080022c 	andhi	r2,r4,8
    ef98:	2c62b03a 	or	r17,r5,r17
    ef9c:	103feb26 	beq	r2,zero,ef4c <__alt_data_end+0xfffb981c>
    efa0:	180ed0fa 	srli	r7,r3,3
    efa4:	3880022c 	andhi	r2,r7,8
    efa8:	103fe81e 	bne	r2,zero,ef4c <__alt_data_end+0xfffb981c>
    efac:	300cd0fa 	srli	r6,r6,3
    efb0:	1804977a 	slli	r2,r3,29
    efb4:	3809883a 	mov	r4,r7
    efb8:	11a2b03a 	or	r17,r2,r6
    efbc:	003fe306 	br	ef4c <__alt_data_end+0xfffb981c>
    efc0:	0401ffc4 	movi	r16,2047
    efc4:	003e1e06 	br	e840 <__alt_data_end+0xfffb9110>
    efc8:	0005883a 	mov	r2,zero
    efcc:	003f8306 	br	eddc <__alt_data_end+0xfffb96ac>
    efd0:	113ff804 	addi	r4,r2,-32
    efd4:	02000804 	movi	r8,32
    efd8:	2908d83a 	srl	r4,r5,r4
    efdc:	12002526 	beq	r2,r8,f074 <__subdf3+0x8c0>
    efe0:	02001004 	movi	r8,64
    efe4:	4085c83a 	sub	r2,r8,r2
    efe8:	288a983a 	sll	r5,r5,r2
    efec:	2c62b03a 	or	r17,r5,r17
    eff0:	8822c03a 	cmpne	r17,r17,zero
    eff4:	8922b03a 	or	r17,r17,r4
    eff8:	0005883a 	mov	r2,zero
    effc:	003f2406 	br	ec90 <__alt_data_end+0xfffb9560>
    f000:	01402034 	movhi	r5,128
    f004:	0011883a 	mov	r8,zero
    f008:	297fffc4 	addi	r5,r5,-1
    f00c:	047ffe04 	movi	r17,-8
    f010:	0401ffc4 	movi	r16,2047
    f014:	003e6a06 	br	e9c0 <__alt_data_end+0xfffb9290>
    f018:	2c62b03a 	or	r17,r5,r17
    f01c:	8822c03a 	cmpne	r17,r17,zero
    f020:	0005883a 	mov	r2,zero
    f024:	003fa506 	br	eebc <__alt_data_end+0xfffb978c>
    f028:	180b883a 	mov	r5,r3
    f02c:	3023883a 	mov	r17,r6
    f030:	003e0306 	br	e840 <__alt_data_end+0xfffb9110>
    f034:	180b883a 	mov	r5,r3
    f038:	3023883a 	mov	r17,r6
    f03c:	0401ffc4 	movi	r16,2047
    f040:	003dff06 	br	e840 <__alt_data_end+0xfffb9110>
    f044:	113ff804 	addi	r4,r2,-32
    f048:	01c00804 	movi	r7,32
    f04c:	2908d83a 	srl	r4,r5,r4
    f050:	11c00a26 	beq	r2,r7,f07c <__subdf3+0x8c8>
    f054:	01c01004 	movi	r7,64
    f058:	3885c83a 	sub	r2,r7,r2
    f05c:	288a983a 	sll	r5,r5,r2
    f060:	2c62b03a 	or	r17,r5,r17
    f064:	8822c03a 	cmpne	r17,r17,zero
    f068:	8922b03a 	or	r17,r17,r4
    f06c:	0005883a 	mov	r2,zero
    f070:	003f9206 	br	eebc <__alt_data_end+0xfffb978c>
    f074:	000b883a 	mov	r5,zero
    f078:	003fdc06 	br	efec <__alt_data_end+0xfffb98bc>
    f07c:	000b883a 	mov	r5,zero
    f080:	003ff706 	br	f060 <__alt_data_end+0xfffb9930>

0000f084 <__fixdfsi>:
    f084:	2806d53a 	srli	r3,r5,20
    f088:	00800434 	movhi	r2,16
    f08c:	10bfffc4 	addi	r2,r2,-1
    f090:	18c1ffcc 	andi	r3,r3,2047
    f094:	0180ff84 	movi	r6,1022
    f098:	2884703a 	and	r2,r5,r2
    f09c:	280ad7fa 	srli	r5,r5,31
    f0a0:	30c0130e 	bge	r6,r3,f0f0 <__fixdfsi+0x6c>
    f0a4:	01810744 	movi	r6,1053
    f0a8:	30c00d16 	blt	r6,r3,f0e0 <__fixdfsi+0x5c>
    f0ac:	01810cc4 	movi	r6,1075
    f0b0:	30cdc83a 	sub	r6,r6,r3
    f0b4:	01c007c4 	movi	r7,31
    f0b8:	10800434 	orhi	r2,r2,16
    f0bc:	39800e0e 	bge	r7,r6,f0f8 <__fixdfsi+0x74>
    f0c0:	010104c4 	movi	r4,1043
    f0c4:	20c7c83a 	sub	r3,r4,r3
    f0c8:	10c6d83a 	srl	r3,r2,r3
    f0cc:	29403fcc 	andi	r5,r5,255
    f0d0:	0145c83a 	sub	r2,zero,r5
    f0d4:	1884f03a 	xor	r2,r3,r2
    f0d8:	1145883a 	add	r2,r2,r5
    f0dc:	f800283a 	ret
    f0e0:	00a00034 	movhi	r2,32768
    f0e4:	10bfffc4 	addi	r2,r2,-1
    f0e8:	2885883a 	add	r2,r5,r2
    f0ec:	f800283a 	ret
    f0f0:	0005883a 	mov	r2,zero
    f0f4:	f800283a 	ret
    f0f8:	18fefb44 	addi	r3,r3,-1043
    f0fc:	2188d83a 	srl	r4,r4,r6
    f100:	10c6983a 	sll	r3,r2,r3
    f104:	20c6b03a 	or	r3,r4,r3
    f108:	003ff006 	br	f0cc <__alt_data_end+0xfffb999c>

0000f10c <__floatsidf>:
    f10c:	defffd04 	addi	sp,sp,-12
    f110:	dc400115 	stw	r17,4(sp)
    f114:	dfc00215 	stw	ra,8(sp)
    f118:	dc000015 	stw	r16,0(sp)
    f11c:	2023883a 	mov	r17,r4
    f120:	20001426 	beq	r4,zero,f174 <__floatsidf+0x68>
    f124:	2020d7fa 	srli	r16,r4,31
    f128:	80000126 	beq	r16,zero,f130 <__floatsidf+0x24>
    f12c:	0123c83a 	sub	r17,zero,r4
    f130:	8809883a 	mov	r4,r17
    f134:	000f2800 	call	f280 <__clzsi2>
    f138:	01410784 	movi	r5,1054
    f13c:	00c00284 	movi	r3,10
    f140:	288bc83a 	sub	r5,r5,r2
    f144:	18801c16 	blt	r3,r2,f1b8 <__floatsidf+0xac>
    f148:	00c002c4 	movi	r3,11
    f14c:	1887c83a 	sub	r3,r3,r2
    f150:	88c8d83a 	srl	r4,r17,r3
    f154:	00c00434 	movhi	r3,16
    f158:	18ffffc4 	addi	r3,r3,-1
    f15c:	10800544 	addi	r2,r2,21
    f160:	20c8703a 	and	r4,r4,r3
    f164:	8884983a 	sll	r2,r17,r2
    f168:	28c1ffcc 	andi	r3,r5,2047
    f16c:	800d883a 	mov	r6,r16
    f170:	00000406 	br	f184 <__floatsidf+0x78>
    f174:	000d883a 	mov	r6,zero
    f178:	0007883a 	mov	r3,zero
    f17c:	0009883a 	mov	r4,zero
    f180:	0005883a 	mov	r2,zero
    f184:	180a953a 	slli	r5,r3,20
    f188:	31803fcc 	andi	r6,r6,255
    f18c:	00c00434 	movhi	r3,16
    f190:	300c97fa 	slli	r6,r6,31
    f194:	18ffffc4 	addi	r3,r3,-1
    f198:	20c6703a 	and	r3,r4,r3
    f19c:	1946b03a 	or	r3,r3,r5
    f1a0:	1986b03a 	or	r3,r3,r6
    f1a4:	dfc00217 	ldw	ra,8(sp)
    f1a8:	dc400117 	ldw	r17,4(sp)
    f1ac:	dc000017 	ldw	r16,0(sp)
    f1b0:	dec00304 	addi	sp,sp,12
    f1b4:	f800283a 	ret
    f1b8:	10fffd44 	addi	r3,r2,-11
    f1bc:	88c8983a 	sll	r4,r17,r3
    f1c0:	00800434 	movhi	r2,16
    f1c4:	10bfffc4 	addi	r2,r2,-1
    f1c8:	2088703a 	and	r4,r4,r2
    f1cc:	28c1ffcc 	andi	r3,r5,2047
    f1d0:	800d883a 	mov	r6,r16
    f1d4:	0005883a 	mov	r2,zero
    f1d8:	003fea06 	br	f184 <__alt_data_end+0xfffb9a54>

0000f1dc <__floatunsidf>:
    f1dc:	defffe04 	addi	sp,sp,-8
    f1e0:	dc000015 	stw	r16,0(sp)
    f1e4:	dfc00115 	stw	ra,4(sp)
    f1e8:	2021883a 	mov	r16,r4
    f1ec:	20001026 	beq	r4,zero,f230 <__floatunsidf+0x54>
    f1f0:	000f2800 	call	f280 <__clzsi2>
    f1f4:	01410784 	movi	r5,1054
    f1f8:	100d883a 	mov	r6,r2
    f1fc:	288bc83a 	sub	r5,r5,r2
    f200:	00800284 	movi	r2,10
    f204:	11801616 	blt	r2,r6,f260 <__floatunsidf+0x84>
    f208:	008002c4 	movi	r2,11
    f20c:	1185c83a 	sub	r2,r2,r6
    f210:	8084d83a 	srl	r2,r16,r2
    f214:	00c00434 	movhi	r3,16
    f218:	31c00544 	addi	r7,r6,21
    f21c:	18ffffc4 	addi	r3,r3,-1
    f220:	81e0983a 	sll	r16,r16,r7
    f224:	10cc703a 	and	r6,r2,r3
    f228:	2941ffcc 	andi	r5,r5,2047
    f22c:	00000206 	br	f238 <__floatunsidf+0x5c>
    f230:	000b883a 	mov	r5,zero
    f234:	000d883a 	mov	r6,zero
    f238:	280a953a 	slli	r5,r5,20
    f23c:	00c00434 	movhi	r3,16
    f240:	18ffffc4 	addi	r3,r3,-1
    f244:	30c6703a 	and	r3,r6,r3
    f248:	8005883a 	mov	r2,r16
    f24c:	1946b03a 	or	r3,r3,r5
    f250:	dfc00117 	ldw	ra,4(sp)
    f254:	dc000017 	ldw	r16,0(sp)
    f258:	dec00204 	addi	sp,sp,8
    f25c:	f800283a 	ret
    f260:	31bffd44 	addi	r6,r6,-11
    f264:	818c983a 	sll	r6,r16,r6
    f268:	00800434 	movhi	r2,16
    f26c:	10bfffc4 	addi	r2,r2,-1
    f270:	2941ffcc 	andi	r5,r5,2047
    f274:	0021883a 	mov	r16,zero
    f278:	308c703a 	and	r6,r6,r2
    f27c:	003fee06 	br	f238 <__alt_data_end+0xfffb9b08>

0000f280 <__clzsi2>:
    f280:	00bfffd4 	movui	r2,65535
    f284:	11000b36 	bltu	r2,r4,f2b4 <__clzsi2+0x34>
    f288:	00803fc4 	movi	r2,255
    f28c:	1100122e 	bgeu	r2,r4,f2d8 <__clzsi2+0x58>
    f290:	00c00204 	movi	r3,8
    f294:	01400604 	movi	r5,24
    f298:	20c8d83a 	srl	r4,r4,r3
    f29c:	00800074 	movhi	r2,1
    f2a0:	10892f04 	addi	r2,r2,9404
    f2a4:	1109883a 	add	r4,r2,r4
    f2a8:	20800003 	ldbu	r2,0(r4)
    f2ac:	2885c83a 	sub	r2,r5,r2
    f2b0:	f800283a 	ret
    f2b4:	00804034 	movhi	r2,256
    f2b8:	10bfffc4 	addi	r2,r2,-1
    f2bc:	11000336 	bltu	r2,r4,f2cc <__clzsi2+0x4c>
    f2c0:	00c00404 	movi	r3,16
    f2c4:	180b883a 	mov	r5,r3
    f2c8:	003ff306 	br	f298 <__alt_data_end+0xfffb9b68>
    f2cc:	00c00604 	movi	r3,24
    f2d0:	01400204 	movi	r5,8
    f2d4:	003ff006 	br	f298 <__alt_data_end+0xfffb9b68>
    f2d8:	0007883a 	mov	r3,zero
    f2dc:	01400804 	movi	r5,32
    f2e0:	003fed06 	br	f298 <__alt_data_end+0xfffb9b68>

0000f2e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f2e4:	defffe04 	addi	sp,sp,-8
    f2e8:	dfc00115 	stw	ra,4(sp)
    f2ec:	df000015 	stw	fp,0(sp)
    f2f0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f2f4:	00800074 	movhi	r2,1
    f2f8:	10903204 	addi	r2,r2,16584
    f2fc:	10800017 	ldw	r2,0(r2)
    f300:	10000526 	beq	r2,zero,f318 <alt_get_errno+0x34>
    f304:	00800074 	movhi	r2,1
    f308:	10903204 	addi	r2,r2,16584
    f30c:	10800017 	ldw	r2,0(r2)
    f310:	103ee83a 	callr	r2
    f314:	00000206 	br	f320 <alt_get_errno+0x3c>
    f318:	00800074 	movhi	r2,1
    f31c:	1096fd04 	addi	r2,r2,23540
}
    f320:	e037883a 	mov	sp,fp
    f324:	dfc00117 	ldw	ra,4(sp)
    f328:	df000017 	ldw	fp,0(sp)
    f32c:	dec00204 	addi	sp,sp,8
    f330:	f800283a 	ret

0000f334 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    f334:	defffb04 	addi	sp,sp,-20
    f338:	dfc00415 	stw	ra,16(sp)
    f33c:	df000315 	stw	fp,12(sp)
    f340:	df000304 	addi	fp,sp,12
    f344:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    f348:	e0bfff17 	ldw	r2,-4(fp)
    f34c:	10000816 	blt	r2,zero,f370 <close+0x3c>
    f350:	e13fff17 	ldw	r4,-4(fp)
    f354:	01400304 	movi	r5,12
    f358:	000cac00 	call	cac0 <__mulsi3>
    f35c:	1007883a 	mov	r3,r2
    f360:	00800074 	movhi	r2,1
    f364:	108baf04 	addi	r2,r2,11964
    f368:	1885883a 	add	r2,r3,r2
    f36c:	00000106 	br	f374 <close+0x40>
    f370:	0005883a 	mov	r2,zero
    f374:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    f378:	e0bffd17 	ldw	r2,-12(fp)
    f37c:	10001926 	beq	r2,zero,f3e4 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    f380:	e0bffd17 	ldw	r2,-12(fp)
    f384:	10800017 	ldw	r2,0(r2)
    f388:	10800417 	ldw	r2,16(r2)
    f38c:	10000626 	beq	r2,zero,f3a8 <close+0x74>
    f390:	e0bffd17 	ldw	r2,-12(fp)
    f394:	10800017 	ldw	r2,0(r2)
    f398:	10800417 	ldw	r2,16(r2)
    f39c:	e13ffd17 	ldw	r4,-12(fp)
    f3a0:	103ee83a 	callr	r2
    f3a4:	00000106 	br	f3ac <close+0x78>
    f3a8:	0005883a 	mov	r2,zero
    f3ac:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    f3b0:	e13fff17 	ldw	r4,-4(fp)
    f3b4:	000fa580 	call	fa58 <alt_release_fd>
    if (rval < 0)
    f3b8:	e0bffe17 	ldw	r2,-8(fp)
    f3bc:	1000070e 	bge	r2,zero,f3dc <close+0xa8>
    {
      ALT_ERRNO = -rval;
    f3c0:	000f2e40 	call	f2e4 <alt_get_errno>
    f3c4:	1007883a 	mov	r3,r2
    f3c8:	e0bffe17 	ldw	r2,-8(fp)
    f3cc:	0085c83a 	sub	r2,zero,r2
    f3d0:	18800015 	stw	r2,0(r3)
      return -1;
    f3d4:	00bfffc4 	movi	r2,-1
    f3d8:	00000706 	br	f3f8 <close+0xc4>
    }
    return 0;
    f3dc:	0005883a 	mov	r2,zero
    f3e0:	00000506 	br	f3f8 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    f3e4:	000f2e40 	call	f2e4 <alt_get_errno>
    f3e8:	1007883a 	mov	r3,r2
    f3ec:	00801444 	movi	r2,81
    f3f0:	18800015 	stw	r2,0(r3)
    return -1;
    f3f4:	00bfffc4 	movi	r2,-1
  }
}
    f3f8:	e037883a 	mov	sp,fp
    f3fc:	dfc00117 	ldw	ra,4(sp)
    f400:	df000017 	ldw	fp,0(sp)
    f404:	dec00204 	addi	sp,sp,8
    f408:	f800283a 	ret

0000f40c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    f40c:	defffc04 	addi	sp,sp,-16
    f410:	df000315 	stw	fp,12(sp)
    f414:	df000304 	addi	fp,sp,12
    f418:	e13ffd15 	stw	r4,-12(fp)
    f41c:	e17ffe15 	stw	r5,-8(fp)
    f420:	e1bfff15 	stw	r6,-4(fp)
  return len;
    f424:	e0bfff17 	ldw	r2,-4(fp)
}
    f428:	e037883a 	mov	sp,fp
    f42c:	df000017 	ldw	fp,0(sp)
    f430:	dec00104 	addi	sp,sp,4
    f434:	f800283a 	ret

0000f438 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f438:	defffe04 	addi	sp,sp,-8
    f43c:	dfc00115 	stw	ra,4(sp)
    f440:	df000015 	stw	fp,0(sp)
    f444:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f448:	00800074 	movhi	r2,1
    f44c:	10903204 	addi	r2,r2,16584
    f450:	10800017 	ldw	r2,0(r2)
    f454:	10000526 	beq	r2,zero,f46c <alt_get_errno+0x34>
    f458:	00800074 	movhi	r2,1
    f45c:	10903204 	addi	r2,r2,16584
    f460:	10800017 	ldw	r2,0(r2)
    f464:	103ee83a 	callr	r2
    f468:	00000206 	br	f474 <alt_get_errno+0x3c>
    f46c:	00800074 	movhi	r2,1
    f470:	1096fd04 	addi	r2,r2,23540
}
    f474:	e037883a 	mov	sp,fp
    f478:	dfc00117 	ldw	ra,4(sp)
    f47c:	df000017 	ldw	fp,0(sp)
    f480:	dec00204 	addi	sp,sp,8
    f484:	f800283a 	ret

0000f488 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    f488:	defffb04 	addi	sp,sp,-20
    f48c:	dfc00415 	stw	ra,16(sp)
    f490:	df000315 	stw	fp,12(sp)
    f494:	df000304 	addi	fp,sp,12
    f498:	e13ffe15 	stw	r4,-8(fp)
    f49c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f4a0:	e0bffe17 	ldw	r2,-8(fp)
    f4a4:	10000816 	blt	r2,zero,f4c8 <fstat+0x40>
    f4a8:	e13ffe17 	ldw	r4,-8(fp)
    f4ac:	01400304 	movi	r5,12
    f4b0:	000cac00 	call	cac0 <__mulsi3>
    f4b4:	1007883a 	mov	r3,r2
    f4b8:	00800074 	movhi	r2,1
    f4bc:	108baf04 	addi	r2,r2,11964
    f4c0:	1885883a 	add	r2,r3,r2
    f4c4:	00000106 	br	f4cc <fstat+0x44>
    f4c8:	0005883a 	mov	r2,zero
    f4cc:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    f4d0:	e0bffd17 	ldw	r2,-12(fp)
    f4d4:	10001026 	beq	r2,zero,f518 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    f4d8:	e0bffd17 	ldw	r2,-12(fp)
    f4dc:	10800017 	ldw	r2,0(r2)
    f4e0:	10800817 	ldw	r2,32(r2)
    f4e4:	10000726 	beq	r2,zero,f504 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
    f4e8:	e0bffd17 	ldw	r2,-12(fp)
    f4ec:	10800017 	ldw	r2,0(r2)
    f4f0:	10800817 	ldw	r2,32(r2)
    f4f4:	e13ffd17 	ldw	r4,-12(fp)
    f4f8:	e17fff17 	ldw	r5,-4(fp)
    f4fc:	103ee83a 	callr	r2
    f500:	00000a06 	br	f52c <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    f504:	e0bfff17 	ldw	r2,-4(fp)
    f508:	00c80004 	movi	r3,8192
    f50c:	10c00115 	stw	r3,4(r2)
      return 0;
    f510:	0005883a 	mov	r2,zero
    f514:	00000506 	br	f52c <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    f518:	000f4380 	call	f438 <alt_get_errno>
    f51c:	1007883a 	mov	r3,r2
    f520:	00801444 	movi	r2,81
    f524:	18800015 	stw	r2,0(r3)
    return -1;
    f528:	00bfffc4 	movi	r2,-1
  }
}
    f52c:	e037883a 	mov	sp,fp
    f530:	dfc00117 	ldw	ra,4(sp)
    f534:	df000017 	ldw	fp,0(sp)
    f538:	dec00204 	addi	sp,sp,8
    f53c:	f800283a 	ret

0000f540 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f540:	defffe04 	addi	sp,sp,-8
    f544:	dfc00115 	stw	ra,4(sp)
    f548:	df000015 	stw	fp,0(sp)
    f54c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f550:	00800074 	movhi	r2,1
    f554:	10903204 	addi	r2,r2,16584
    f558:	10800017 	ldw	r2,0(r2)
    f55c:	10000526 	beq	r2,zero,f574 <alt_get_errno+0x34>
    f560:	00800074 	movhi	r2,1
    f564:	10903204 	addi	r2,r2,16584
    f568:	10800017 	ldw	r2,0(r2)
    f56c:	103ee83a 	callr	r2
    f570:	00000206 	br	f57c <alt_get_errno+0x3c>
    f574:	00800074 	movhi	r2,1
    f578:	1096fd04 	addi	r2,r2,23540
}
    f57c:	e037883a 	mov	sp,fp
    f580:	dfc00117 	ldw	ra,4(sp)
    f584:	df000017 	ldw	fp,0(sp)
    f588:	dec00204 	addi	sp,sp,8
    f58c:	f800283a 	ret

0000f590 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    f590:	deffed04 	addi	sp,sp,-76
    f594:	dfc01215 	stw	ra,72(sp)
    f598:	df001115 	stw	fp,68(sp)
    f59c:	df001104 	addi	fp,sp,68
    f5a0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f5a4:	e0bfff17 	ldw	r2,-4(fp)
    f5a8:	10000816 	blt	r2,zero,f5cc <isatty+0x3c>
    f5ac:	e13fff17 	ldw	r4,-4(fp)
    f5b0:	01400304 	movi	r5,12
    f5b4:	000cac00 	call	cac0 <__mulsi3>
    f5b8:	1007883a 	mov	r3,r2
    f5bc:	00800074 	movhi	r2,1
    f5c0:	108baf04 	addi	r2,r2,11964
    f5c4:	1885883a 	add	r2,r3,r2
    f5c8:	00000106 	br	f5d0 <isatty+0x40>
    f5cc:	0005883a 	mov	r2,zero
    f5d0:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    f5d4:	e0bfef17 	ldw	r2,-68(fp)
    f5d8:	10000e26 	beq	r2,zero,f614 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    f5dc:	e0bfef17 	ldw	r2,-68(fp)
    f5e0:	10800017 	ldw	r2,0(r2)
    f5e4:	10800817 	ldw	r2,32(r2)
    f5e8:	1000021e 	bne	r2,zero,f5f4 <isatty+0x64>
    {
      return 1;
    f5ec:	00800044 	movi	r2,1
    f5f0:	00000d06 	br	f628 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    f5f4:	e0bff004 	addi	r2,fp,-64
    f5f8:	e13fff17 	ldw	r4,-4(fp)
    f5fc:	100b883a 	mov	r5,r2
    f600:	000f4880 	call	f488 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    f604:	e0bff117 	ldw	r2,-60(fp)
    f608:	10880020 	cmpeqi	r2,r2,8192
    f60c:	10803fcc 	andi	r2,r2,255
    f610:	00000506 	br	f628 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    f614:	000f5400 	call	f540 <alt_get_errno>
    f618:	1007883a 	mov	r3,r2
    f61c:	00801444 	movi	r2,81
    f620:	18800015 	stw	r2,0(r3)
    return 0;
    f624:	0005883a 	mov	r2,zero
  }
}
    f628:	e037883a 	mov	sp,fp
    f62c:	dfc00117 	ldw	ra,4(sp)
    f630:	df000017 	ldw	fp,0(sp)
    f634:	dec00204 	addi	sp,sp,8
    f638:	f800283a 	ret

0000f63c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    f63c:	defffc04 	addi	sp,sp,-16
    f640:	df000315 	stw	fp,12(sp)
    f644:	df000304 	addi	fp,sp,12
    f648:	e13ffd15 	stw	r4,-12(fp)
    f64c:	e17ffe15 	stw	r5,-8(fp)
    f650:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    f654:	e0fffe17 	ldw	r3,-8(fp)
    f658:	e0bffd17 	ldw	r2,-12(fp)
    f65c:	18800c26 	beq	r3,r2,f690 <alt_load_section+0x54>
  {
    while( to != end )
    f660:	00000806 	br	f684 <alt_load_section+0x48>
    {
      *to++ = *from++;
    f664:	e0bffe17 	ldw	r2,-8(fp)
    f668:	10c00104 	addi	r3,r2,4
    f66c:	e0fffe15 	stw	r3,-8(fp)
    f670:	e0fffd17 	ldw	r3,-12(fp)
    f674:	19000104 	addi	r4,r3,4
    f678:	e13ffd15 	stw	r4,-12(fp)
    f67c:	18c00017 	ldw	r3,0(r3)
    f680:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    f684:	e0fffe17 	ldw	r3,-8(fp)
    f688:	e0bfff17 	ldw	r2,-4(fp)
    f68c:	18bff51e 	bne	r3,r2,f664 <__alt_data_end+0xfffb9f34>
    {
      *to++ = *from++;
    }
  }
}
    f690:	e037883a 	mov	sp,fp
    f694:	df000017 	ldw	fp,0(sp)
    f698:	dec00104 	addi	sp,sp,4
    f69c:	f800283a 	ret

0000f6a0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    f6a0:	defffe04 	addi	sp,sp,-8
    f6a4:	dfc00115 	stw	ra,4(sp)
    f6a8:	df000015 	stw	fp,0(sp)
    f6ac:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    f6b0:	01000074 	movhi	r4,1
    f6b4:	21103704 	addi	r4,r4,16604
    f6b8:	01400074 	movhi	r5,1
    f6bc:	29497c04 	addi	r5,r5,9712
    f6c0:	01800074 	movhi	r6,1
    f6c4:	31903704 	addi	r6,r6,16604
    f6c8:	000f63c0 	call	f63c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    f6cc:	01000034 	movhi	r4,0
    f6d0:	21000804 	addi	r4,r4,32
    f6d4:	01400034 	movhi	r5,0
    f6d8:	29400804 	addi	r5,r5,32
    f6dc:	01800034 	movhi	r6,0
    f6e0:	31808b04 	addi	r6,r6,556
    f6e4:	000f63c0 	call	f63c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    f6e8:	01000074 	movhi	r4,1
    f6ec:	2106f104 	addi	r4,r4,7108
    f6f0:	01400074 	movhi	r5,1
    f6f4:	2946f104 	addi	r5,r5,7108
    f6f8:	01800074 	movhi	r6,1
    f6fc:	31897c04 	addi	r6,r6,9712
    f700:	000f63c0 	call	f63c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    f704:	0010aa00 	call	10aa0 <alt_dcache_flush_all>
  alt_icache_flush_all();
    f708:	0010c680 	call	10c68 <alt_icache_flush_all>
}
    f70c:	e037883a 	mov	sp,fp
    f710:	dfc00117 	ldw	ra,4(sp)
    f714:	df000017 	ldw	fp,0(sp)
    f718:	dec00204 	addi	sp,sp,8
    f71c:	f800283a 	ret

0000f720 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f720:	defffe04 	addi	sp,sp,-8
    f724:	dfc00115 	stw	ra,4(sp)
    f728:	df000015 	stw	fp,0(sp)
    f72c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f730:	00800074 	movhi	r2,1
    f734:	10903204 	addi	r2,r2,16584
    f738:	10800017 	ldw	r2,0(r2)
    f73c:	10000526 	beq	r2,zero,f754 <alt_get_errno+0x34>
    f740:	00800074 	movhi	r2,1
    f744:	10903204 	addi	r2,r2,16584
    f748:	10800017 	ldw	r2,0(r2)
    f74c:	103ee83a 	callr	r2
    f750:	00000206 	br	f75c <alt_get_errno+0x3c>
    f754:	00800074 	movhi	r2,1
    f758:	1096fd04 	addi	r2,r2,23540
}
    f75c:	e037883a 	mov	sp,fp
    f760:	dfc00117 	ldw	ra,4(sp)
    f764:	df000017 	ldw	fp,0(sp)
    f768:	dec00204 	addi	sp,sp,8
    f76c:	f800283a 	ret

0000f770 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    f770:	defff904 	addi	sp,sp,-28
    f774:	dfc00615 	stw	ra,24(sp)
    f778:	df000515 	stw	fp,20(sp)
    f77c:	df000504 	addi	fp,sp,20
    f780:	e13ffd15 	stw	r4,-12(fp)
    f784:	e17ffe15 	stw	r5,-8(fp)
    f788:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    f78c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f790:	e0bffd17 	ldw	r2,-12(fp)
    f794:	10000816 	blt	r2,zero,f7b8 <lseek+0x48>
    f798:	e13ffd17 	ldw	r4,-12(fp)
    f79c:	01400304 	movi	r5,12
    f7a0:	000cac00 	call	cac0 <__mulsi3>
    f7a4:	1007883a 	mov	r3,r2
    f7a8:	00800074 	movhi	r2,1
    f7ac:	108baf04 	addi	r2,r2,11964
    f7b0:	1885883a 	add	r2,r3,r2
    f7b4:	00000106 	br	f7bc <lseek+0x4c>
    f7b8:	0005883a 	mov	r2,zero
    f7bc:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    f7c0:	e0bffc17 	ldw	r2,-16(fp)
    f7c4:	10001026 	beq	r2,zero,f808 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    f7c8:	e0bffc17 	ldw	r2,-16(fp)
    f7cc:	10800017 	ldw	r2,0(r2)
    f7d0:	10800717 	ldw	r2,28(r2)
    f7d4:	10000926 	beq	r2,zero,f7fc <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    f7d8:	e0bffc17 	ldw	r2,-16(fp)
    f7dc:	10800017 	ldw	r2,0(r2)
    f7e0:	10800717 	ldw	r2,28(r2)
    f7e4:	e13ffc17 	ldw	r4,-16(fp)
    f7e8:	e17ffe17 	ldw	r5,-8(fp)
    f7ec:	e1bfff17 	ldw	r6,-4(fp)
    f7f0:	103ee83a 	callr	r2
    f7f4:	e0bffb15 	stw	r2,-20(fp)
    f7f8:	00000506 	br	f810 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    f7fc:	00bfde84 	movi	r2,-134
    f800:	e0bffb15 	stw	r2,-20(fp)
    f804:	00000206 	br	f810 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
    f808:	00bfebc4 	movi	r2,-81
    f80c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    f810:	e0bffb17 	ldw	r2,-20(fp)
    f814:	1000070e 	bge	r2,zero,f834 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
    f818:	000f7200 	call	f720 <alt_get_errno>
    f81c:	1007883a 	mov	r3,r2
    f820:	e0bffb17 	ldw	r2,-20(fp)
    f824:	0085c83a 	sub	r2,zero,r2
    f828:	18800015 	stw	r2,0(r3)
    rc = -1;
    f82c:	00bfffc4 	movi	r2,-1
    f830:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    f834:	e0bffb17 	ldw	r2,-20(fp)
}
    f838:	e037883a 	mov	sp,fp
    f83c:	dfc00117 	ldw	ra,4(sp)
    f840:	df000017 	ldw	fp,0(sp)
    f844:	dec00204 	addi	sp,sp,8
    f848:	f800283a 	ret

0000f84c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    f84c:	defffd04 	addi	sp,sp,-12
    f850:	dfc00215 	stw	ra,8(sp)
    f854:	df000115 	stw	fp,4(sp)
    f858:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    f85c:	0009883a 	mov	r4,zero
    f860:	000fd400 	call	fd40 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    f864:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    f868:	000fd740 	call	fd74 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    f86c:	01000074 	movhi	r4,1
    f870:	21097204 	addi	r4,r4,9672
    f874:	01400074 	movhi	r5,1
    f878:	29497204 	addi	r5,r5,9672
    f87c:	01800074 	movhi	r6,1
    f880:	31897204 	addi	r6,r6,9672
    f884:	00110340 	call	11034 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    f888:	0010bb00 	call	10bb0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    f88c:	01000074 	movhi	r4,1
    f890:	21030304 	addi	r4,r4,3084
    f894:	00118200 	call	11820 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    f898:	d126da17 	ldw	r4,-25752(gp)
    f89c:	d0e6db17 	ldw	r3,-25748(gp)
    f8a0:	d0a6dc17 	ldw	r2,-25744(gp)
    f8a4:	180b883a 	mov	r5,r3
    f8a8:	100d883a 	mov	r6,r2
    f8ac:	00017780 	call	1778 <main>
    f8b0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    f8b4:	01000044 	movi	r4,1
    f8b8:	000f3340 	call	f334 <close>
  exit (result);
    f8bc:	e13fff17 	ldw	r4,-4(fp)
    f8c0:	00118340 	call	11834 <exit>

0000f8c4 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    f8c4:	defffe04 	addi	sp,sp,-8
    f8c8:	df000115 	stw	fp,4(sp)
    f8cc:	df000104 	addi	fp,sp,4
    f8d0:	e13fff15 	stw	r4,-4(fp)
}
    f8d4:	e037883a 	mov	sp,fp
    f8d8:	df000017 	ldw	fp,0(sp)
    f8dc:	dec00104 	addi	sp,sp,4
    f8e0:	f800283a 	ret

0000f8e4 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    f8e4:	defffe04 	addi	sp,sp,-8
    f8e8:	df000115 	stw	fp,4(sp)
    f8ec:	df000104 	addi	fp,sp,4
    f8f0:	e13fff15 	stw	r4,-4(fp)
}
    f8f4:	e037883a 	mov	sp,fp
    f8f8:	df000017 	ldw	fp,0(sp)
    f8fc:	dec00104 	addi	sp,sp,4
    f900:	f800283a 	ret

0000f904 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f904:	defffe04 	addi	sp,sp,-8
    f908:	dfc00115 	stw	ra,4(sp)
    f90c:	df000015 	stw	fp,0(sp)
    f910:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f914:	00800074 	movhi	r2,1
    f918:	10903204 	addi	r2,r2,16584
    f91c:	10800017 	ldw	r2,0(r2)
    f920:	10000526 	beq	r2,zero,f938 <alt_get_errno+0x34>
    f924:	00800074 	movhi	r2,1
    f928:	10903204 	addi	r2,r2,16584
    f92c:	10800017 	ldw	r2,0(r2)
    f930:	103ee83a 	callr	r2
    f934:	00000206 	br	f940 <alt_get_errno+0x3c>
    f938:	00800074 	movhi	r2,1
    f93c:	1096fd04 	addi	r2,r2,23540
}
    f940:	e037883a 	mov	sp,fp
    f944:	dfc00117 	ldw	ra,4(sp)
    f948:	df000017 	ldw	fp,0(sp)
    f94c:	dec00204 	addi	sp,sp,8
    f950:	f800283a 	ret

0000f954 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    f954:	defff904 	addi	sp,sp,-28
    f958:	dfc00615 	stw	ra,24(sp)
    f95c:	df000515 	stw	fp,20(sp)
    f960:	df000504 	addi	fp,sp,20
    f964:	e13ffd15 	stw	r4,-12(fp)
    f968:	e17ffe15 	stw	r5,-8(fp)
    f96c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f970:	e0bffd17 	ldw	r2,-12(fp)
    f974:	10000816 	blt	r2,zero,f998 <read+0x44>
    f978:	e13ffd17 	ldw	r4,-12(fp)
    f97c:	01400304 	movi	r5,12
    f980:	000cac00 	call	cac0 <__mulsi3>
    f984:	1007883a 	mov	r3,r2
    f988:	00800074 	movhi	r2,1
    f98c:	108baf04 	addi	r2,r2,11964
    f990:	1885883a 	add	r2,r3,r2
    f994:	00000106 	br	f99c <read+0x48>
    f998:	0005883a 	mov	r2,zero
    f99c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    f9a0:	e0bffb17 	ldw	r2,-20(fp)
    f9a4:	10002226 	beq	r2,zero,fa30 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    f9a8:	e0bffb17 	ldw	r2,-20(fp)
    f9ac:	10800217 	ldw	r2,8(r2)
    f9b0:	108000cc 	andi	r2,r2,3
    f9b4:	10800060 	cmpeqi	r2,r2,1
    f9b8:	1000181e 	bne	r2,zero,fa1c <read+0xc8>
        (fd->dev->read))
    f9bc:	e0bffb17 	ldw	r2,-20(fp)
    f9c0:	10800017 	ldw	r2,0(r2)
    f9c4:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    f9c8:	10001426 	beq	r2,zero,fa1c <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    f9cc:	e0bffb17 	ldw	r2,-20(fp)
    f9d0:	10800017 	ldw	r2,0(r2)
    f9d4:	10800517 	ldw	r2,20(r2)
    f9d8:	e0ffff17 	ldw	r3,-4(fp)
    f9dc:	e13ffb17 	ldw	r4,-20(fp)
    f9e0:	e17ffe17 	ldw	r5,-8(fp)
    f9e4:	180d883a 	mov	r6,r3
    f9e8:	103ee83a 	callr	r2
    f9ec:	e0bffc15 	stw	r2,-16(fp)
    f9f0:	e0bffc17 	ldw	r2,-16(fp)
    f9f4:	1000070e 	bge	r2,zero,fa14 <read+0xc0>
        {
          ALT_ERRNO = -rval;
    f9f8:	000f9040 	call	f904 <alt_get_errno>
    f9fc:	1007883a 	mov	r3,r2
    fa00:	e0bffc17 	ldw	r2,-16(fp)
    fa04:	0085c83a 	sub	r2,zero,r2
    fa08:	18800015 	stw	r2,0(r3)
          return -1;
    fa0c:	00bfffc4 	movi	r2,-1
    fa10:	00000c06 	br	fa44 <read+0xf0>
        }
        return rval;
    fa14:	e0bffc17 	ldw	r2,-16(fp)
    fa18:	00000a06 	br	fa44 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
    fa1c:	000f9040 	call	f904 <alt_get_errno>
    fa20:	1007883a 	mov	r3,r2
    fa24:	00800344 	movi	r2,13
    fa28:	18800015 	stw	r2,0(r3)
    fa2c:	00000406 	br	fa40 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    fa30:	000f9040 	call	f904 <alt_get_errno>
    fa34:	1007883a 	mov	r3,r2
    fa38:	00801444 	movi	r2,81
    fa3c:	18800015 	stw	r2,0(r3)
  }
  return -1;
    fa40:	00bfffc4 	movi	r2,-1
}
    fa44:	e037883a 	mov	sp,fp
    fa48:	dfc00117 	ldw	ra,4(sp)
    fa4c:	df000017 	ldw	fp,0(sp)
    fa50:	dec00204 	addi	sp,sp,8
    fa54:	f800283a 	ret

0000fa58 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    fa58:	defffc04 	addi	sp,sp,-16
    fa5c:	dfc00315 	stw	ra,12(sp)
    fa60:	df000215 	stw	fp,8(sp)
    fa64:	dc000115 	stw	r16,4(sp)
    fa68:	df000204 	addi	fp,sp,8
    fa6c:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
    fa70:	e0bffe17 	ldw	r2,-8(fp)
    fa74:	108000d0 	cmplti	r2,r2,3
    fa78:	1000111e 	bne	r2,zero,fac0 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    fa7c:	04000074 	movhi	r16,1
    fa80:	840baf04 	addi	r16,r16,11964
    fa84:	e0bffe17 	ldw	r2,-8(fp)
    fa88:	1009883a 	mov	r4,r2
    fa8c:	01400304 	movi	r5,12
    fa90:	000cac00 	call	cac0 <__mulsi3>
    fa94:	8085883a 	add	r2,r16,r2
    fa98:	10800204 	addi	r2,r2,8
    fa9c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    faa0:	04000074 	movhi	r16,1
    faa4:	840baf04 	addi	r16,r16,11964
    faa8:	e0bffe17 	ldw	r2,-8(fp)
    faac:	1009883a 	mov	r4,r2
    fab0:	01400304 	movi	r5,12
    fab4:	000cac00 	call	cac0 <__mulsi3>
    fab8:	8085883a 	add	r2,r16,r2
    fabc:	10000015 	stw	zero,0(r2)
  }
}
    fac0:	e6ffff04 	addi	sp,fp,-4
    fac4:	dfc00217 	ldw	ra,8(sp)
    fac8:	df000117 	ldw	fp,4(sp)
    facc:	dc000017 	ldw	r16,0(sp)
    fad0:	dec00304 	addi	sp,sp,12
    fad4:	f800283a 	ret

0000fad8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    fad8:	defff904 	addi	sp,sp,-28
    fadc:	df000615 	stw	fp,24(sp)
    fae0:	df000604 	addi	fp,sp,24
    fae4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fae8:	0005303a 	rdctl	r2,status
    faec:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    faf0:	e0fffc17 	ldw	r3,-16(fp)
    faf4:	00bfff84 	movi	r2,-2
    faf8:	1884703a 	and	r2,r3,r2
    fafc:	1001703a 	wrctl	status,r2
  
  return context;
    fb00:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    fb04:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    fb08:	d0a00c17 	ldw	r2,-32720(gp)
    fb0c:	10c000c4 	addi	r3,r2,3
    fb10:	00bfff04 	movi	r2,-4
    fb14:	1884703a 	and	r2,r3,r2
    fb18:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    fb1c:	d0e00c17 	ldw	r3,-32720(gp)
    fb20:	e0bfff17 	ldw	r2,-4(fp)
    fb24:	1887883a 	add	r3,r3,r2
    fb28:	00800174 	movhi	r2,5
    fb2c:	1095cc04 	addi	r2,r2,22320
    fb30:	10c0062e 	bgeu	r2,r3,fb4c <sbrk+0x74>
    fb34:	e0bffa17 	ldw	r2,-24(fp)
    fb38:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fb3c:	e0bffd17 	ldw	r2,-12(fp)
    fb40:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    fb44:	00bfffc4 	movi	r2,-1
    fb48:	00000b06 	br	fb78 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    fb4c:	d0a00c17 	ldw	r2,-32720(gp)
    fb50:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
    fb54:	d0e00c17 	ldw	r3,-32720(gp)
    fb58:	e0bfff17 	ldw	r2,-4(fp)
    fb5c:	1885883a 	add	r2,r3,r2
    fb60:	d0a00c15 	stw	r2,-32720(gp)
    fb64:	e0bffa17 	ldw	r2,-24(fp)
    fb68:	e0bffe15 	stw	r2,-8(fp)
    fb6c:	e0bffe17 	ldw	r2,-8(fp)
    fb70:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    fb74:	e0bffb17 	ldw	r2,-20(fp)
} 
    fb78:	e037883a 	mov	sp,fp
    fb7c:	df000017 	ldw	fp,0(sp)
    fb80:	dec00104 	addi	sp,sp,4
    fb84:	f800283a 	ret

0000fb88 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    fb88:	defffd04 	addi	sp,sp,-12
    fb8c:	dfc00215 	stw	ra,8(sp)
    fb90:	df000115 	stw	fp,4(sp)
    fb94:	df000104 	addi	fp,sp,4
    fb98:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    fb9c:	e13fff17 	ldw	r4,-4(fp)
    fba0:	00109480 	call	10948 <alt_busy_sleep>
}
    fba4:	e037883a 	mov	sp,fp
    fba8:	dfc00117 	ldw	ra,4(sp)
    fbac:	df000017 	ldw	fp,0(sp)
    fbb0:	dec00204 	addi	sp,sp,8
    fbb4:	f800283a 	ret

0000fbb8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    fbb8:	defffe04 	addi	sp,sp,-8
    fbbc:	dfc00115 	stw	ra,4(sp)
    fbc0:	df000015 	stw	fp,0(sp)
    fbc4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    fbc8:	00800074 	movhi	r2,1
    fbcc:	10903204 	addi	r2,r2,16584
    fbd0:	10800017 	ldw	r2,0(r2)
    fbd4:	10000526 	beq	r2,zero,fbec <alt_get_errno+0x34>
    fbd8:	00800074 	movhi	r2,1
    fbdc:	10903204 	addi	r2,r2,16584
    fbe0:	10800017 	ldw	r2,0(r2)
    fbe4:	103ee83a 	callr	r2
    fbe8:	00000206 	br	fbf4 <alt_get_errno+0x3c>
    fbec:	00800074 	movhi	r2,1
    fbf0:	1096fd04 	addi	r2,r2,23540
}
    fbf4:	e037883a 	mov	sp,fp
    fbf8:	dfc00117 	ldw	ra,4(sp)
    fbfc:	df000017 	ldw	fp,0(sp)
    fc00:	dec00204 	addi	sp,sp,8
    fc04:	f800283a 	ret

0000fc08 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    fc08:	defff904 	addi	sp,sp,-28
    fc0c:	dfc00615 	stw	ra,24(sp)
    fc10:	df000515 	stw	fp,20(sp)
    fc14:	df000504 	addi	fp,sp,20
    fc18:	e13ffd15 	stw	r4,-12(fp)
    fc1c:	e17ffe15 	stw	r5,-8(fp)
    fc20:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    fc24:	e0bffd17 	ldw	r2,-12(fp)
    fc28:	10000816 	blt	r2,zero,fc4c <write+0x44>
    fc2c:	e13ffd17 	ldw	r4,-12(fp)
    fc30:	01400304 	movi	r5,12
    fc34:	000cac00 	call	cac0 <__mulsi3>
    fc38:	1007883a 	mov	r3,r2
    fc3c:	00800074 	movhi	r2,1
    fc40:	108baf04 	addi	r2,r2,11964
    fc44:	1885883a 	add	r2,r3,r2
    fc48:	00000106 	br	fc50 <write+0x48>
    fc4c:	0005883a 	mov	r2,zero
    fc50:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    fc54:	e0bffb17 	ldw	r2,-20(fp)
    fc58:	10002126 	beq	r2,zero,fce0 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    fc5c:	e0bffb17 	ldw	r2,-20(fp)
    fc60:	10800217 	ldw	r2,8(r2)
    fc64:	108000cc 	andi	r2,r2,3
    fc68:	10001826 	beq	r2,zero,fccc <write+0xc4>
    fc6c:	e0bffb17 	ldw	r2,-20(fp)
    fc70:	10800017 	ldw	r2,0(r2)
    fc74:	10800617 	ldw	r2,24(r2)
    fc78:	10001426 	beq	r2,zero,fccc <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    fc7c:	e0bffb17 	ldw	r2,-20(fp)
    fc80:	10800017 	ldw	r2,0(r2)
    fc84:	10800617 	ldw	r2,24(r2)
    fc88:	e0ffff17 	ldw	r3,-4(fp)
    fc8c:	e13ffb17 	ldw	r4,-20(fp)
    fc90:	e17ffe17 	ldw	r5,-8(fp)
    fc94:	180d883a 	mov	r6,r3
    fc98:	103ee83a 	callr	r2
    fc9c:	e0bffc15 	stw	r2,-16(fp)
    fca0:	e0bffc17 	ldw	r2,-16(fp)
    fca4:	1000070e 	bge	r2,zero,fcc4 <write+0xbc>
      {
        ALT_ERRNO = -rval;
    fca8:	000fbb80 	call	fbb8 <alt_get_errno>
    fcac:	1007883a 	mov	r3,r2
    fcb0:	e0bffc17 	ldw	r2,-16(fp)
    fcb4:	0085c83a 	sub	r2,zero,r2
    fcb8:	18800015 	stw	r2,0(r3)
        return -1;
    fcbc:	00bfffc4 	movi	r2,-1
    fcc0:	00000c06 	br	fcf4 <write+0xec>
      }
      return rval;
    fcc4:	e0bffc17 	ldw	r2,-16(fp)
    fcc8:	00000a06 	br	fcf4 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
    fccc:	000fbb80 	call	fbb8 <alt_get_errno>
    fcd0:	1007883a 	mov	r3,r2
    fcd4:	00800344 	movi	r2,13
    fcd8:	18800015 	stw	r2,0(r3)
    fcdc:	00000406 	br	fcf0 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    fce0:	000fbb80 	call	fbb8 <alt_get_errno>
    fce4:	1007883a 	mov	r3,r2
    fce8:	00801444 	movi	r2,81
    fcec:	18800015 	stw	r2,0(r3)
  }
  return -1;
    fcf0:	00bfffc4 	movi	r2,-1
}
    fcf4:	e037883a 	mov	sp,fp
    fcf8:	dfc00117 	ldw	ra,4(sp)
    fcfc:	df000017 	ldw	fp,0(sp)
    fd00:	dec00204 	addi	sp,sp,8
    fd04:	f800283a 	ret

0000fd08 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    fd08:	defffd04 	addi	sp,sp,-12
    fd0c:	dfc00215 	stw	ra,8(sp)
    fd10:	df000115 	stw	fp,4(sp)
    fd14:	df000104 	addi	fp,sp,4
    fd18:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    fd1c:	e13fff17 	ldw	r4,-4(fp)
    fd20:	01400074 	movhi	r5,1
    fd24:	29502f04 	addi	r5,r5,16572
    fd28:	0010b0c0 	call	10b0c <alt_dev_llist_insert>
}
    fd2c:	e037883a 	mov	sp,fp
    fd30:	dfc00117 	ldw	ra,4(sp)
    fd34:	df000017 	ldw	fp,0(sp)
    fd38:	dec00204 	addi	sp,sp,8
    fd3c:	f800283a 	ret

0000fd40 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    fd40:	defffd04 	addi	sp,sp,-12
    fd44:	dfc00215 	stw	ra,8(sp)
    fd48:	df000115 	stw	fp,4(sp)
    fd4c:	df000104 	addi	fp,sp,4
    fd50:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
    fd54:	00114ec0 	call	114ec <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    fd58:	00800044 	movi	r2,1
    fd5c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    fd60:	e037883a 	mov	sp,fp
    fd64:	dfc00117 	ldw	ra,4(sp)
    fd68:	df000017 	ldw	fp,0(sp)
    fd6c:	dec00204 	addi	sp,sp,8
    fd70:	f800283a 	ret

0000fd74 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    fd74:	defffe04 	addi	sp,sp,-8
    fd78:	dfc00115 	stw	ra,4(sp)
    fd7c:	df000015 	stw	fp,0(sp)
    fd80:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    fd84:	01000074 	movhi	r4,1
    fd88:	210c1904 	addi	r4,r4,12388
    fd8c:	000b883a 	mov	r5,zero
    fd90:	01800144 	movi	r6,5
    fd94:	000ff200 	call	ff20 <altera_avalon_jtag_uart_init>
    fd98:	01000074 	movhi	r4,1
    fd9c:	210c0f04 	addi	r4,r4,12348
    fda0:	000fd080 	call	fd08 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
    fda4:	0001883a 	nop
}
    fda8:	e037883a 	mov	sp,fp
    fdac:	dfc00117 	ldw	ra,4(sp)
    fdb0:	df000017 	ldw	fp,0(sp)
    fdb4:	dec00204 	addi	sp,sp,8
    fdb8:	f800283a 	ret

0000fdbc <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    fdbc:	defffa04 	addi	sp,sp,-24
    fdc0:	dfc00515 	stw	ra,20(sp)
    fdc4:	df000415 	stw	fp,16(sp)
    fdc8:	df000404 	addi	fp,sp,16
    fdcc:	e13ffd15 	stw	r4,-12(fp)
    fdd0:	e17ffe15 	stw	r5,-8(fp)
    fdd4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    fdd8:	e0bffd17 	ldw	r2,-12(fp)
    fddc:	10800017 	ldw	r2,0(r2)
    fde0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    fde4:	e0bffc17 	ldw	r2,-16(fp)
    fde8:	10c00a04 	addi	r3,r2,40
    fdec:	e0bffd17 	ldw	r2,-12(fp)
    fdf0:	10800217 	ldw	r2,8(r2)
    fdf4:	1809883a 	mov	r4,r3
    fdf8:	e17ffe17 	ldw	r5,-8(fp)
    fdfc:	e1bfff17 	ldw	r6,-4(fp)
    fe00:	100f883a 	mov	r7,r2
    fe04:	00103e40 	call	103e4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    fe08:	e037883a 	mov	sp,fp
    fe0c:	dfc00117 	ldw	ra,4(sp)
    fe10:	df000017 	ldw	fp,0(sp)
    fe14:	dec00204 	addi	sp,sp,8
    fe18:	f800283a 	ret

0000fe1c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    fe1c:	defffa04 	addi	sp,sp,-24
    fe20:	dfc00515 	stw	ra,20(sp)
    fe24:	df000415 	stw	fp,16(sp)
    fe28:	df000404 	addi	fp,sp,16
    fe2c:	e13ffd15 	stw	r4,-12(fp)
    fe30:	e17ffe15 	stw	r5,-8(fp)
    fe34:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    fe38:	e0bffd17 	ldw	r2,-12(fp)
    fe3c:	10800017 	ldw	r2,0(r2)
    fe40:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    fe44:	e0bffc17 	ldw	r2,-16(fp)
    fe48:	10c00a04 	addi	r3,r2,40
    fe4c:	e0bffd17 	ldw	r2,-12(fp)
    fe50:	10800217 	ldw	r2,8(r2)
    fe54:	1809883a 	mov	r4,r3
    fe58:	e17ffe17 	ldw	r5,-8(fp)
    fe5c:	e1bfff17 	ldw	r6,-4(fp)
    fe60:	100f883a 	mov	r7,r2
    fe64:	00105f00 	call	105f0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    fe68:	e037883a 	mov	sp,fp
    fe6c:	dfc00117 	ldw	ra,4(sp)
    fe70:	df000017 	ldw	fp,0(sp)
    fe74:	dec00204 	addi	sp,sp,8
    fe78:	f800283a 	ret

0000fe7c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    fe7c:	defffc04 	addi	sp,sp,-16
    fe80:	dfc00315 	stw	ra,12(sp)
    fe84:	df000215 	stw	fp,8(sp)
    fe88:	df000204 	addi	fp,sp,8
    fe8c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    fe90:	e0bfff17 	ldw	r2,-4(fp)
    fe94:	10800017 	ldw	r2,0(r2)
    fe98:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    fe9c:	e0bffe17 	ldw	r2,-8(fp)
    fea0:	10c00a04 	addi	r3,r2,40
    fea4:	e0bfff17 	ldw	r2,-4(fp)
    fea8:	10800217 	ldw	r2,8(r2)
    feac:	1809883a 	mov	r4,r3
    feb0:	100b883a 	mov	r5,r2
    feb4:	00102900 	call	10290 <altera_avalon_jtag_uart_close>
}
    feb8:	e037883a 	mov	sp,fp
    febc:	dfc00117 	ldw	ra,4(sp)
    fec0:	df000017 	ldw	fp,0(sp)
    fec4:	dec00204 	addi	sp,sp,8
    fec8:	f800283a 	ret

0000fecc <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    fecc:	defffa04 	addi	sp,sp,-24
    fed0:	dfc00515 	stw	ra,20(sp)
    fed4:	df000415 	stw	fp,16(sp)
    fed8:	df000404 	addi	fp,sp,16
    fedc:	e13ffd15 	stw	r4,-12(fp)
    fee0:	e17ffe15 	stw	r5,-8(fp)
    fee4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    fee8:	e0bffd17 	ldw	r2,-12(fp)
    feec:	10800017 	ldw	r2,0(r2)
    fef0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    fef4:	e0bffc17 	ldw	r2,-16(fp)
    fef8:	10800a04 	addi	r2,r2,40
    fefc:	1009883a 	mov	r4,r2
    ff00:	e17ffe17 	ldw	r5,-8(fp)
    ff04:	e1bfff17 	ldw	r6,-4(fp)
    ff08:	00102f80 	call	102f8 <altera_avalon_jtag_uart_ioctl>
}
    ff0c:	e037883a 	mov	sp,fp
    ff10:	dfc00117 	ldw	ra,4(sp)
    ff14:	df000017 	ldw	fp,0(sp)
    ff18:	dec00204 	addi	sp,sp,8
    ff1c:	f800283a 	ret

0000ff20 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    ff20:	defffa04 	addi	sp,sp,-24
    ff24:	dfc00515 	stw	ra,20(sp)
    ff28:	df000415 	stw	fp,16(sp)
    ff2c:	df000404 	addi	fp,sp,16
    ff30:	e13ffd15 	stw	r4,-12(fp)
    ff34:	e17ffe15 	stw	r5,-8(fp)
    ff38:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    ff3c:	e0bffd17 	ldw	r2,-12(fp)
    ff40:	00c00044 	movi	r3,1
    ff44:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    ff48:	e0bffd17 	ldw	r2,-12(fp)
    ff4c:	10800017 	ldw	r2,0(r2)
    ff50:	10800104 	addi	r2,r2,4
    ff54:	1007883a 	mov	r3,r2
    ff58:	e0bffd17 	ldw	r2,-12(fp)
    ff5c:	10800817 	ldw	r2,32(r2)
    ff60:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    ff64:	e0fffe17 	ldw	r3,-8(fp)
    ff68:	e0bfff17 	ldw	r2,-4(fp)
    ff6c:	d8000015 	stw	zero,0(sp)
    ff70:	1809883a 	mov	r4,r3
    ff74:	100b883a 	mov	r5,r2
    ff78:	01800074 	movhi	r6,1
    ff7c:	31bff904 	addi	r6,r6,-28
    ff80:	e1fffd17 	ldw	r7,-12(fp)
    ff84:	0010c840 	call	10c84 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    ff88:	e0bffd17 	ldw	r2,-12(fp)
    ff8c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    ff90:	e0bffd17 	ldw	r2,-12(fp)
    ff94:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    ff98:	00800074 	movhi	r2,1
    ff9c:	10970504 	addi	r2,r2,23572
    ffa0:	10800017 	ldw	r2,0(r2)
    ffa4:	1809883a 	mov	r4,r3
    ffa8:	100b883a 	mov	r5,r2
    ffac:	01800074 	movhi	r6,1
    ffb0:	31807a04 	addi	r6,r6,488
    ffb4:	e1fffd17 	ldw	r7,-12(fp)
    ffb8:	00108080 	call	10808 <alt_alarm_start>
    ffbc:	1000040e 	bge	r2,zero,ffd0 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    ffc0:	e0fffd17 	ldw	r3,-12(fp)
    ffc4:	00a00034 	movhi	r2,32768
    ffc8:	10bfffc4 	addi	r2,r2,-1
    ffcc:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    ffd0:	e037883a 	mov	sp,fp
    ffd4:	dfc00117 	ldw	ra,4(sp)
    ffd8:	df000017 	ldw	fp,0(sp)
    ffdc:	dec00204 	addi	sp,sp,8
    ffe0:	f800283a 	ret

0000ffe4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    ffe4:	defff804 	addi	sp,sp,-32
    ffe8:	df000715 	stw	fp,28(sp)
    ffec:	df000704 	addi	fp,sp,28
    fff0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    fff4:	e0bfff17 	ldw	r2,-4(fp)
    fff8:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
    fffc:	e0bffb17 	ldw	r2,-20(fp)
   10000:	10800017 	ldw	r2,0(r2)
   10004:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   10008:	e0bffc17 	ldw	r2,-16(fp)
   1000c:	10800104 	addi	r2,r2,4
   10010:	10800037 	ldwio	r2,0(r2)
   10014:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   10018:	e0bffd17 	ldw	r2,-12(fp)
   1001c:	1080c00c 	andi	r2,r2,768
   10020:	1000011e 	bne	r2,zero,10028 <altera_avalon_jtag_uart_irq+0x44>
      break;
   10024:	00006c06 	br	101d8 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   10028:	e0bffd17 	ldw	r2,-12(fp)
   1002c:	1080400c 	andi	r2,r2,256
   10030:	10003426 	beq	r2,zero,10104 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   10034:	00800074 	movhi	r2,1
   10038:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1003c:	e0bffb17 	ldw	r2,-20(fp)
   10040:	10800a17 	ldw	r2,40(r2)
   10044:	10800044 	addi	r2,r2,1
   10048:	1081ffcc 	andi	r2,r2,2047
   1004c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   10050:	e0bffb17 	ldw	r2,-20(fp)
   10054:	10c00b17 	ldw	r3,44(r2)
   10058:	e0bffe17 	ldw	r2,-8(fp)
   1005c:	1880011e 	bne	r3,r2,10064 <altera_avalon_jtag_uart_irq+0x80>
          break;
   10060:	00001606 	br	100bc <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   10064:	e0bffc17 	ldw	r2,-16(fp)
   10068:	10800037 	ldwio	r2,0(r2)
   1006c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   10070:	e0bff917 	ldw	r2,-28(fp)
   10074:	10a0000c 	andi	r2,r2,32768
   10078:	1000011e 	bne	r2,zero,10080 <altera_avalon_jtag_uart_irq+0x9c>
          break;
   1007c:	00000f06 	br	100bc <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   10080:	e0bffb17 	ldw	r2,-20(fp)
   10084:	10800a17 	ldw	r2,40(r2)
   10088:	e0fff917 	ldw	r3,-28(fp)
   1008c:	1809883a 	mov	r4,r3
   10090:	e0fffb17 	ldw	r3,-20(fp)
   10094:	1885883a 	add	r2,r3,r2
   10098:	10800e04 	addi	r2,r2,56
   1009c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   100a0:	e0bffb17 	ldw	r2,-20(fp)
   100a4:	10800a17 	ldw	r2,40(r2)
   100a8:	10800044 	addi	r2,r2,1
   100ac:	10c1ffcc 	andi	r3,r2,2047
   100b0:	e0bffb17 	ldw	r2,-20(fp)
   100b4:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   100b8:	003fe006 	br	1003c <__alt_data_end+0xfffba90c>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   100bc:	e0bff917 	ldw	r2,-28(fp)
   100c0:	10bfffec 	andhi	r2,r2,65535
   100c4:	10000f26 	beq	r2,zero,10104 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   100c8:	e0bffb17 	ldw	r2,-20(fp)
   100cc:	10c00817 	ldw	r3,32(r2)
   100d0:	00bfff84 	movi	r2,-2
   100d4:	1886703a 	and	r3,r3,r2
   100d8:	e0bffb17 	ldw	r2,-20(fp)
   100dc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   100e0:	e0bffc17 	ldw	r2,-16(fp)
   100e4:	10800104 	addi	r2,r2,4
   100e8:	1007883a 	mov	r3,r2
   100ec:	e0bffb17 	ldw	r2,-20(fp)
   100f0:	10800817 	ldw	r2,32(r2)
   100f4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   100f8:	e0bffc17 	ldw	r2,-16(fp)
   100fc:	10800104 	addi	r2,r2,4
   10100:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   10104:	e0bffd17 	ldw	r2,-12(fp)
   10108:	1080800c 	andi	r2,r2,512
   1010c:	10003126 	beq	r2,zero,101d4 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   10110:	e0bffd17 	ldw	r2,-12(fp)
   10114:	1004d43a 	srli	r2,r2,16
   10118:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   1011c:	00001406 	br	10170 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   10120:	e0bffc17 	ldw	r2,-16(fp)
   10124:	e0fffb17 	ldw	r3,-20(fp)
   10128:	18c00d17 	ldw	r3,52(r3)
   1012c:	e13ffb17 	ldw	r4,-20(fp)
   10130:	20c7883a 	add	r3,r4,r3
   10134:	18c20e04 	addi	r3,r3,2104
   10138:	18c00003 	ldbu	r3,0(r3)
   1013c:	18c03fcc 	andi	r3,r3,255
   10140:	18c0201c 	xori	r3,r3,128
   10144:	18ffe004 	addi	r3,r3,-128
   10148:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1014c:	e0bffb17 	ldw	r2,-20(fp)
   10150:	10800d17 	ldw	r2,52(r2)
   10154:	10800044 	addi	r2,r2,1
   10158:	10c1ffcc 	andi	r3,r2,2047
   1015c:	e0bffb17 	ldw	r2,-20(fp)
   10160:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   10164:	e0bffa17 	ldw	r2,-24(fp)
   10168:	10bfffc4 	addi	r2,r2,-1
   1016c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   10170:	e0bffa17 	ldw	r2,-24(fp)
   10174:	10000526 	beq	r2,zero,1018c <altera_avalon_jtag_uart_irq+0x1a8>
   10178:	e0bffb17 	ldw	r2,-20(fp)
   1017c:	10c00d17 	ldw	r3,52(r2)
   10180:	e0bffb17 	ldw	r2,-20(fp)
   10184:	10800c17 	ldw	r2,48(r2)
   10188:	18bfe51e 	bne	r3,r2,10120 <__alt_data_end+0xfffba9f0>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   1018c:	e0bffa17 	ldw	r2,-24(fp)
   10190:	10001026 	beq	r2,zero,101d4 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   10194:	e0bffb17 	ldw	r2,-20(fp)
   10198:	10c00817 	ldw	r3,32(r2)
   1019c:	00bfff44 	movi	r2,-3
   101a0:	1886703a 	and	r3,r3,r2
   101a4:	e0bffb17 	ldw	r2,-20(fp)
   101a8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   101ac:	e0bffb17 	ldw	r2,-20(fp)
   101b0:	10800017 	ldw	r2,0(r2)
   101b4:	10800104 	addi	r2,r2,4
   101b8:	1007883a 	mov	r3,r2
   101bc:	e0bffb17 	ldw	r2,-20(fp)
   101c0:	10800817 	ldw	r2,32(r2)
   101c4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   101c8:	e0bffc17 	ldw	r2,-16(fp)
   101cc:	10800104 	addi	r2,r2,4
   101d0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   101d4:	003f8c06 	br	10008 <__alt_data_end+0xfffba8d8>
}
   101d8:	e037883a 	mov	sp,fp
   101dc:	df000017 	ldw	fp,0(sp)
   101e0:	dec00104 	addi	sp,sp,4
   101e4:	f800283a 	ret

000101e8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   101e8:	defff804 	addi	sp,sp,-32
   101ec:	df000715 	stw	fp,28(sp)
   101f0:	df000704 	addi	fp,sp,28
   101f4:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   101f8:	e0bffb17 	ldw	r2,-20(fp)
   101fc:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   10200:	e0bff917 	ldw	r2,-28(fp)
   10204:	10800017 	ldw	r2,0(r2)
   10208:	10800104 	addi	r2,r2,4
   1020c:	10800037 	ldwio	r2,0(r2)
   10210:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   10214:	e0bffa17 	ldw	r2,-24(fp)
   10218:	1081000c 	andi	r2,r2,1024
   1021c:	10000b26 	beq	r2,zero,1024c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   10220:	e0bff917 	ldw	r2,-28(fp)
   10224:	10800017 	ldw	r2,0(r2)
   10228:	10800104 	addi	r2,r2,4
   1022c:	1007883a 	mov	r3,r2
   10230:	e0bff917 	ldw	r2,-28(fp)
   10234:	10800817 	ldw	r2,32(r2)
   10238:	10810014 	ori	r2,r2,1024
   1023c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   10240:	e0bff917 	ldw	r2,-28(fp)
   10244:	10000915 	stw	zero,36(r2)
   10248:	00000a06 	br	10274 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   1024c:	e0bff917 	ldw	r2,-28(fp)
   10250:	10c00917 	ldw	r3,36(r2)
   10254:	00a00034 	movhi	r2,32768
   10258:	10bfff04 	addi	r2,r2,-4
   1025c:	10c00536 	bltu	r2,r3,10274 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   10260:	e0bff917 	ldw	r2,-28(fp)
   10264:	10800917 	ldw	r2,36(r2)
   10268:	10c00044 	addi	r3,r2,1
   1026c:	e0bff917 	ldw	r2,-28(fp)
   10270:	10c00915 	stw	r3,36(r2)
   10274:	00800074 	movhi	r2,1
   10278:	10970504 	addi	r2,r2,23572
   1027c:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   10280:	e037883a 	mov	sp,fp
   10284:	df000017 	ldw	fp,0(sp)
   10288:	dec00104 	addi	sp,sp,4
   1028c:	f800283a 	ret

00010290 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   10290:	defffd04 	addi	sp,sp,-12
   10294:	df000215 	stw	fp,8(sp)
   10298:	df000204 	addi	fp,sp,8
   1029c:	e13ffe15 	stw	r4,-8(fp)
   102a0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   102a4:	00000506 	br	102bc <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   102a8:	e0bfff17 	ldw	r2,-4(fp)
   102ac:	1090000c 	andi	r2,r2,16384
   102b0:	10000226 	beq	r2,zero,102bc <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   102b4:	00bffd44 	movi	r2,-11
   102b8:	00000b06 	br	102e8 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   102bc:	e0bffe17 	ldw	r2,-8(fp)
   102c0:	10c00d17 	ldw	r3,52(r2)
   102c4:	e0bffe17 	ldw	r2,-8(fp)
   102c8:	10800c17 	ldw	r2,48(r2)
   102cc:	18800526 	beq	r3,r2,102e4 <altera_avalon_jtag_uart_close+0x54>
   102d0:	e0bffe17 	ldw	r2,-8(fp)
   102d4:	10c00917 	ldw	r3,36(r2)
   102d8:	e0bffe17 	ldw	r2,-8(fp)
   102dc:	10800117 	ldw	r2,4(r2)
   102e0:	18bff136 	bltu	r3,r2,102a8 <__alt_data_end+0xfffbab78>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   102e4:	0005883a 	mov	r2,zero
}
   102e8:	e037883a 	mov	sp,fp
   102ec:	df000017 	ldw	fp,0(sp)
   102f0:	dec00104 	addi	sp,sp,4
   102f4:	f800283a 	ret

000102f8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   102f8:	defffa04 	addi	sp,sp,-24
   102fc:	df000515 	stw	fp,20(sp)
   10300:	df000504 	addi	fp,sp,20
   10304:	e13ffd15 	stw	r4,-12(fp)
   10308:	e17ffe15 	stw	r5,-8(fp)
   1030c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   10310:	00bff9c4 	movi	r2,-25
   10314:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   10318:	e0bffe17 	ldw	r2,-8(fp)
   1031c:	10da8060 	cmpeqi	r3,r2,27137
   10320:	1800031e 	bne	r3,zero,10330 <altera_avalon_jtag_uart_ioctl+0x38>
   10324:	109a80a0 	cmpeqi	r2,r2,27138
   10328:	1000191e 	bne	r2,zero,10390 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
   1032c:	00002806 	br	103d0 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   10330:	e0bffd17 	ldw	r2,-12(fp)
   10334:	10c00117 	ldw	r3,4(r2)
   10338:	00a00034 	movhi	r2,32768
   1033c:	10bfffc4 	addi	r2,r2,-1
   10340:	18801226 	beq	r3,r2,1038c <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
   10344:	e0bfff17 	ldw	r2,-4(fp)
   10348:	10800017 	ldw	r2,0(r2)
   1034c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   10350:	e0bffc17 	ldw	r2,-16(fp)
   10354:	10800090 	cmplti	r2,r2,2
   10358:	1000061e 	bne	r2,zero,10374 <altera_avalon_jtag_uart_ioctl+0x7c>
   1035c:	e0fffc17 	ldw	r3,-16(fp)
   10360:	00a00034 	movhi	r2,32768
   10364:	10bfffc4 	addi	r2,r2,-1
   10368:	18800226 	beq	r3,r2,10374 <altera_avalon_jtag_uart_ioctl+0x7c>
   1036c:	e0bffc17 	ldw	r2,-16(fp)
   10370:	00000206 	br	1037c <altera_avalon_jtag_uart_ioctl+0x84>
   10374:	00a00034 	movhi	r2,32768
   10378:	10bfff84 	addi	r2,r2,-2
   1037c:	e0fffd17 	ldw	r3,-12(fp)
   10380:	18800115 	stw	r2,4(r3)
      rc = 0;
   10384:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   10388:	00001106 	br	103d0 <altera_avalon_jtag_uart_ioctl+0xd8>
   1038c:	00001006 	br	103d0 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   10390:	e0bffd17 	ldw	r2,-12(fp)
   10394:	10c00117 	ldw	r3,4(r2)
   10398:	00a00034 	movhi	r2,32768
   1039c:	10bfffc4 	addi	r2,r2,-1
   103a0:	18800a26 	beq	r3,r2,103cc <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   103a4:	e0bffd17 	ldw	r2,-12(fp)
   103a8:	10c00917 	ldw	r3,36(r2)
   103ac:	e0bffd17 	ldw	r2,-12(fp)
   103b0:	10800117 	ldw	r2,4(r2)
   103b4:	1885803a 	cmpltu	r2,r3,r2
   103b8:	10c03fcc 	andi	r3,r2,255
   103bc:	e0bfff17 	ldw	r2,-4(fp)
   103c0:	10c00015 	stw	r3,0(r2)
      rc = 0;
   103c4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   103c8:	00000006 	br	103cc <altera_avalon_jtag_uart_ioctl+0xd4>
   103cc:	0001883a 	nop

  default:
    break;
  }

  return rc;
   103d0:	e0bffb17 	ldw	r2,-20(fp)
}
   103d4:	e037883a 	mov	sp,fp
   103d8:	df000017 	ldw	fp,0(sp)
   103dc:	dec00104 	addi	sp,sp,4
   103e0:	f800283a 	ret

000103e4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   103e4:	defff304 	addi	sp,sp,-52
   103e8:	dfc00c15 	stw	ra,48(sp)
   103ec:	df000b15 	stw	fp,44(sp)
   103f0:	df000b04 	addi	fp,sp,44
   103f4:	e13ffc15 	stw	r4,-16(fp)
   103f8:	e17ffd15 	stw	r5,-12(fp)
   103fc:	e1bffe15 	stw	r6,-8(fp)
   10400:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   10404:	e0bffd17 	ldw	r2,-12(fp)
   10408:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   1040c:	00004906 	br	10534 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   10410:	e0bffc17 	ldw	r2,-16(fp)
   10414:	10800a17 	ldw	r2,40(r2)
   10418:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   1041c:	e0bffc17 	ldw	r2,-16(fp)
   10420:	10800b17 	ldw	r2,44(r2)
   10424:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   10428:	e0fff717 	ldw	r3,-36(fp)
   1042c:	e0bff817 	ldw	r2,-32(fp)
   10430:	18800536 	bltu	r3,r2,10448 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   10434:	e0fff717 	ldw	r3,-36(fp)
   10438:	e0bff817 	ldw	r2,-32(fp)
   1043c:	1885c83a 	sub	r2,r3,r2
   10440:	e0bff615 	stw	r2,-40(fp)
   10444:	00000406 	br	10458 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   10448:	00c20004 	movi	r3,2048
   1044c:	e0bff817 	ldw	r2,-32(fp)
   10450:	1885c83a 	sub	r2,r3,r2
   10454:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   10458:	e0bff617 	ldw	r2,-40(fp)
   1045c:	1000011e 	bne	r2,zero,10464 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
   10460:	00001d06 	br	104d8 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
   10464:	e0fffe17 	ldw	r3,-8(fp)
   10468:	e0bff617 	ldw	r2,-40(fp)
   1046c:	1880022e 	bgeu	r3,r2,10478 <altera_avalon_jtag_uart_read+0x94>
        n = space;
   10470:	e0bffe17 	ldw	r2,-8(fp)
   10474:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   10478:	e0bff817 	ldw	r2,-32(fp)
   1047c:	10800e04 	addi	r2,r2,56
   10480:	e0fffc17 	ldw	r3,-16(fp)
   10484:	1885883a 	add	r2,r3,r2
   10488:	e13ff517 	ldw	r4,-44(fp)
   1048c:	100b883a 	mov	r5,r2
   10490:	e1bff617 	ldw	r6,-40(fp)
   10494:	000829c0 	call	829c <memcpy>
      ptr   += n;
   10498:	e0fff517 	ldw	r3,-44(fp)
   1049c:	e0bff617 	ldw	r2,-40(fp)
   104a0:	1885883a 	add	r2,r3,r2
   104a4:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   104a8:	e0fffe17 	ldw	r3,-8(fp)
   104ac:	e0bff617 	ldw	r2,-40(fp)
   104b0:	1885c83a 	sub	r2,r3,r2
   104b4:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   104b8:	e0fff817 	ldw	r3,-32(fp)
   104bc:	e0bff617 	ldw	r2,-40(fp)
   104c0:	1885883a 	add	r2,r3,r2
   104c4:	10c1ffcc 	andi	r3,r2,2047
   104c8:	e0bffc17 	ldw	r2,-16(fp)
   104cc:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   104d0:	e0bffe17 	ldw	r2,-8(fp)
   104d4:	00bfce16 	blt	zero,r2,10410 <__alt_data_end+0xfffbace0>

    /* If we read any data then return it */
    if (ptr != buffer)
   104d8:	e0fff517 	ldw	r3,-44(fp)
   104dc:	e0bffd17 	ldw	r2,-12(fp)
   104e0:	18800126 	beq	r3,r2,104e8 <altera_avalon_jtag_uart_read+0x104>
      break;
   104e4:	00001506 	br	1053c <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   104e8:	e0bfff17 	ldw	r2,-4(fp)
   104ec:	1090000c 	andi	r2,r2,16384
   104f0:	10000126 	beq	r2,zero,104f8 <altera_avalon_jtag_uart_read+0x114>
      break;
   104f4:	00001106 	br	1053c <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   104f8:	0001883a 	nop
   104fc:	e0bffc17 	ldw	r2,-16(fp)
   10500:	10c00a17 	ldw	r3,40(r2)
   10504:	e0bff717 	ldw	r2,-36(fp)
   10508:	1880051e 	bne	r3,r2,10520 <altera_avalon_jtag_uart_read+0x13c>
   1050c:	e0bffc17 	ldw	r2,-16(fp)
   10510:	10c00917 	ldw	r3,36(r2)
   10514:	e0bffc17 	ldw	r2,-16(fp)
   10518:	10800117 	ldw	r2,4(r2)
   1051c:	18bff736 	bltu	r3,r2,104fc <__alt_data_end+0xfffbadcc>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   10520:	e0bffc17 	ldw	r2,-16(fp)
   10524:	10c00a17 	ldw	r3,40(r2)
   10528:	e0bff717 	ldw	r2,-36(fp)
   1052c:	1880011e 	bne	r3,r2,10534 <altera_avalon_jtag_uart_read+0x150>
      break;
   10530:	00000206 	br	1053c <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   10534:	e0bffe17 	ldw	r2,-8(fp)
   10538:	00bfb516 	blt	zero,r2,10410 <__alt_data_end+0xfffbace0>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   1053c:	e0fff517 	ldw	r3,-44(fp)
   10540:	e0bffd17 	ldw	r2,-12(fp)
   10544:	18801826 	beq	r3,r2,105a8 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10548:	0005303a 	rdctl	r2,status
   1054c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10550:	e0fffa17 	ldw	r3,-24(fp)
   10554:	00bfff84 	movi	r2,-2
   10558:	1884703a 	and	r2,r3,r2
   1055c:	1001703a 	wrctl	status,r2
  
  return context;
   10560:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   10564:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   10568:	e0bffc17 	ldw	r2,-16(fp)
   1056c:	10800817 	ldw	r2,32(r2)
   10570:	10c00054 	ori	r3,r2,1
   10574:	e0bffc17 	ldw	r2,-16(fp)
   10578:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1057c:	e0bffc17 	ldw	r2,-16(fp)
   10580:	10800017 	ldw	r2,0(r2)
   10584:	10800104 	addi	r2,r2,4
   10588:	1007883a 	mov	r3,r2
   1058c:	e0bffc17 	ldw	r2,-16(fp)
   10590:	10800817 	ldw	r2,32(r2)
   10594:	18800035 	stwio	r2,0(r3)
   10598:	e0bff917 	ldw	r2,-28(fp)
   1059c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   105a0:	e0bffb17 	ldw	r2,-20(fp)
   105a4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   105a8:	e0fff517 	ldw	r3,-44(fp)
   105ac:	e0bffd17 	ldw	r2,-12(fp)
   105b0:	18800426 	beq	r3,r2,105c4 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
   105b4:	e0fff517 	ldw	r3,-44(fp)
   105b8:	e0bffd17 	ldw	r2,-12(fp)
   105bc:	1885c83a 	sub	r2,r3,r2
   105c0:	00000606 	br	105dc <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
   105c4:	e0bfff17 	ldw	r2,-4(fp)
   105c8:	1090000c 	andi	r2,r2,16384
   105cc:	10000226 	beq	r2,zero,105d8 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
   105d0:	00bffd44 	movi	r2,-11
   105d4:	00000106 	br	105dc <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
   105d8:	00bffec4 	movi	r2,-5
}
   105dc:	e037883a 	mov	sp,fp
   105e0:	dfc00117 	ldw	ra,4(sp)
   105e4:	df000017 	ldw	fp,0(sp)
   105e8:	dec00204 	addi	sp,sp,8
   105ec:	f800283a 	ret

000105f0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   105f0:	defff304 	addi	sp,sp,-52
   105f4:	dfc00c15 	stw	ra,48(sp)
   105f8:	df000b15 	stw	fp,44(sp)
   105fc:	df000b04 	addi	fp,sp,44
   10600:	e13ffc15 	stw	r4,-16(fp)
   10604:	e17ffd15 	stw	r5,-12(fp)
   10608:	e1bffe15 	stw	r6,-8(fp)
   1060c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   10610:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   10614:	e0bffd17 	ldw	r2,-12(fp)
   10618:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   1061c:	00003806 	br	10700 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   10620:	e0bffc17 	ldw	r2,-16(fp)
   10624:	10800c17 	ldw	r2,48(r2)
   10628:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
   1062c:	e0bffc17 	ldw	r2,-16(fp)
   10630:	10800d17 	ldw	r2,52(r2)
   10634:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   10638:	e0fff817 	ldw	r3,-32(fp)
   1063c:	e0bff517 	ldw	r2,-44(fp)
   10640:	1880062e 	bgeu	r3,r2,1065c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   10644:	e0fff517 	ldw	r3,-44(fp)
   10648:	e0bff817 	ldw	r2,-32(fp)
   1064c:	1885c83a 	sub	r2,r3,r2
   10650:	10bfffc4 	addi	r2,r2,-1
   10654:	e0bff615 	stw	r2,-40(fp)
   10658:	00000b06 	br	10688 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   1065c:	e0bff517 	ldw	r2,-44(fp)
   10660:	10000526 	beq	r2,zero,10678 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   10664:	00c20004 	movi	r3,2048
   10668:	e0bff817 	ldw	r2,-32(fp)
   1066c:	1885c83a 	sub	r2,r3,r2
   10670:	e0bff615 	stw	r2,-40(fp)
   10674:	00000406 	br	10688 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   10678:	00c1ffc4 	movi	r3,2047
   1067c:	e0bff817 	ldw	r2,-32(fp)
   10680:	1885c83a 	sub	r2,r3,r2
   10684:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   10688:	e0bff617 	ldw	r2,-40(fp)
   1068c:	1000011e 	bne	r2,zero,10694 <altera_avalon_jtag_uart_write+0xa4>
        break;
   10690:	00001d06 	br	10708 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
   10694:	e0fffe17 	ldw	r3,-8(fp)
   10698:	e0bff617 	ldw	r2,-40(fp)
   1069c:	1880022e 	bgeu	r3,r2,106a8 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
   106a0:	e0bffe17 	ldw	r2,-8(fp)
   106a4:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   106a8:	e0bff817 	ldw	r2,-32(fp)
   106ac:	10820e04 	addi	r2,r2,2104
   106b0:	e0fffc17 	ldw	r3,-16(fp)
   106b4:	1885883a 	add	r2,r3,r2
   106b8:	1009883a 	mov	r4,r2
   106bc:	e17ffd17 	ldw	r5,-12(fp)
   106c0:	e1bff617 	ldw	r6,-40(fp)
   106c4:	000829c0 	call	829c <memcpy>
      ptr   += n;
   106c8:	e0fffd17 	ldw	r3,-12(fp)
   106cc:	e0bff617 	ldw	r2,-40(fp)
   106d0:	1885883a 	add	r2,r3,r2
   106d4:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   106d8:	e0fffe17 	ldw	r3,-8(fp)
   106dc:	e0bff617 	ldw	r2,-40(fp)
   106e0:	1885c83a 	sub	r2,r3,r2
   106e4:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   106e8:	e0fff817 	ldw	r3,-32(fp)
   106ec:	e0bff617 	ldw	r2,-40(fp)
   106f0:	1885883a 	add	r2,r3,r2
   106f4:	10c1ffcc 	andi	r3,r2,2047
   106f8:	e0bffc17 	ldw	r2,-16(fp)
   106fc:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   10700:	e0bffe17 	ldw	r2,-8(fp)
   10704:	00bfc616 	blt	zero,r2,10620 <__alt_data_end+0xfffbaef0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10708:	0005303a 	rdctl	r2,status
   1070c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10710:	e0fffa17 	ldw	r3,-24(fp)
   10714:	00bfff84 	movi	r2,-2
   10718:	1884703a 	and	r2,r3,r2
   1071c:	1001703a 	wrctl	status,r2
  
  return context;
   10720:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   10724:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   10728:	e0bffc17 	ldw	r2,-16(fp)
   1072c:	10800817 	ldw	r2,32(r2)
   10730:	10c00094 	ori	r3,r2,2
   10734:	e0bffc17 	ldw	r2,-16(fp)
   10738:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1073c:	e0bffc17 	ldw	r2,-16(fp)
   10740:	10800017 	ldw	r2,0(r2)
   10744:	10800104 	addi	r2,r2,4
   10748:	1007883a 	mov	r3,r2
   1074c:	e0bffc17 	ldw	r2,-16(fp)
   10750:	10800817 	ldw	r2,32(r2)
   10754:	18800035 	stwio	r2,0(r3)
   10758:	e0bff917 	ldw	r2,-28(fp)
   1075c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10760:	e0bffb17 	ldw	r2,-20(fp)
   10764:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   10768:	e0bffe17 	ldw	r2,-8(fp)
   1076c:	0080120e 	bge	zero,r2,107b8 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
   10770:	e0bfff17 	ldw	r2,-4(fp)
   10774:	1090000c 	andi	r2,r2,16384
   10778:	10000126 	beq	r2,zero,10780 <altera_avalon_jtag_uart_write+0x190>
        break;
   1077c:	00001006 	br	107c0 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   10780:	0001883a 	nop
   10784:	e0bffc17 	ldw	r2,-16(fp)
   10788:	10c00d17 	ldw	r3,52(r2)
   1078c:	e0bff517 	ldw	r2,-44(fp)
   10790:	1880051e 	bne	r3,r2,107a8 <altera_avalon_jtag_uart_write+0x1b8>
   10794:	e0bffc17 	ldw	r2,-16(fp)
   10798:	10c00917 	ldw	r3,36(r2)
   1079c:	e0bffc17 	ldw	r2,-16(fp)
   107a0:	10800117 	ldw	r2,4(r2)
   107a4:	18bff736 	bltu	r3,r2,10784 <__alt_data_end+0xfffbb054>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   107a8:	e0bffc17 	ldw	r2,-16(fp)
   107ac:	10800917 	ldw	r2,36(r2)
   107b0:	10000126 	beq	r2,zero,107b8 <altera_avalon_jtag_uart_write+0x1c8>
         break;
   107b4:	00000206 	br	107c0 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
   107b8:	e0bffe17 	ldw	r2,-8(fp)
   107bc:	00bf9716 	blt	zero,r2,1061c <__alt_data_end+0xfffbaeec>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   107c0:	e0fffd17 	ldw	r3,-12(fp)
   107c4:	e0bff717 	ldw	r2,-36(fp)
   107c8:	18800426 	beq	r3,r2,107dc <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
   107cc:	e0fffd17 	ldw	r3,-12(fp)
   107d0:	e0bff717 	ldw	r2,-36(fp)
   107d4:	1885c83a 	sub	r2,r3,r2
   107d8:	00000606 	br	107f4 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
   107dc:	e0bfff17 	ldw	r2,-4(fp)
   107e0:	1090000c 	andi	r2,r2,16384
   107e4:	10000226 	beq	r2,zero,107f0 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
   107e8:	00bffd44 	movi	r2,-11
   107ec:	00000106 	br	107f4 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   107f0:	00bffec4 	movi	r2,-5
}
   107f4:	e037883a 	mov	sp,fp
   107f8:	dfc00117 	ldw	ra,4(sp)
   107fc:	df000017 	ldw	fp,0(sp)
   10800:	dec00204 	addi	sp,sp,8
   10804:	f800283a 	ret

00010808 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   10808:	defff504 	addi	sp,sp,-44
   1080c:	df000a15 	stw	fp,40(sp)
   10810:	df000a04 	addi	fp,sp,40
   10814:	e13ffc15 	stw	r4,-16(fp)
   10818:	e17ffd15 	stw	r5,-12(fp)
   1081c:	e1bffe15 	stw	r6,-8(fp)
   10820:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   10824:	e03ff615 	stw	zero,-40(fp)
   10828:	00800074 	movhi	r2,1
   1082c:	10970504 	addi	r2,r2,23572
   10830:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   10834:	10003f26 	beq	r2,zero,10934 <alt_alarm_start+0x12c>
  {
    if (alarm)
   10838:	e0bffc17 	ldw	r2,-16(fp)
   1083c:	10003b26 	beq	r2,zero,1092c <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   10840:	e0bffc17 	ldw	r2,-16(fp)
   10844:	e0fffe17 	ldw	r3,-8(fp)
   10848:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   1084c:	e0bffc17 	ldw	r2,-16(fp)
   10850:	e0ffff17 	ldw	r3,-4(fp)
   10854:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10858:	0005303a 	rdctl	r2,status
   1085c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10860:	e0fff817 	ldw	r3,-32(fp)
   10864:	00bfff84 	movi	r2,-2
   10868:	1884703a 	and	r2,r3,r2
   1086c:	1001703a 	wrctl	status,r2
  
  return context;
   10870:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   10874:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   10878:	00800074 	movhi	r2,1
   1087c:	10970604 	addi	r2,r2,23576
   10880:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   10884:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   10888:	e0fffd17 	ldw	r3,-12(fp)
   1088c:	e0bff617 	ldw	r2,-40(fp)
   10890:	1885883a 	add	r2,r3,r2
   10894:	10c00044 	addi	r3,r2,1
   10898:	e0bffc17 	ldw	r2,-16(fp)
   1089c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   108a0:	e0bffc17 	ldw	r2,-16(fp)
   108a4:	10c00217 	ldw	r3,8(r2)
   108a8:	e0bff617 	ldw	r2,-40(fp)
   108ac:	1880042e 	bgeu	r3,r2,108c0 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   108b0:	e0bffc17 	ldw	r2,-16(fp)
   108b4:	00c00044 	movi	r3,1
   108b8:	10c00405 	stb	r3,16(r2)
   108bc:	00000206 	br	108c8 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   108c0:	e0bffc17 	ldw	r2,-16(fp)
   108c4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   108c8:	e0fffc17 	ldw	r3,-16(fp)
   108cc:	00800074 	movhi	r2,1
   108d0:	10903504 	addi	r2,r2,16596
   108d4:	e0bff915 	stw	r2,-28(fp)
   108d8:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   108dc:	e0bffa17 	ldw	r2,-24(fp)
   108e0:	e0fff917 	ldw	r3,-28(fp)
   108e4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   108e8:	e0bff917 	ldw	r2,-28(fp)
   108ec:	10c00017 	ldw	r3,0(r2)
   108f0:	e0bffa17 	ldw	r2,-24(fp)
   108f4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   108f8:	e0bff917 	ldw	r2,-28(fp)
   108fc:	10800017 	ldw	r2,0(r2)
   10900:	e0fffa17 	ldw	r3,-24(fp)
   10904:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   10908:	e0bff917 	ldw	r2,-28(fp)
   1090c:	e0fffa17 	ldw	r3,-24(fp)
   10910:	10c00015 	stw	r3,0(r2)
   10914:	e0bff717 	ldw	r2,-36(fp)
   10918:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1091c:	e0bffb17 	ldw	r2,-20(fp)
   10920:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   10924:	0005883a 	mov	r2,zero
   10928:	00000306 	br	10938 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   1092c:	00bffa84 	movi	r2,-22
   10930:	00000106 	br	10938 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   10934:	00bfde84 	movi	r2,-134
  }
}
   10938:	e037883a 	mov	sp,fp
   1093c:	df000017 	ldw	fp,0(sp)
   10940:	dec00104 	addi	sp,sp,4
   10944:	f800283a 	ret

00010948 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   10948:	defffa04 	addi	sp,sp,-24
   1094c:	dfc00515 	stw	ra,20(sp)
   10950:	df000415 	stw	fp,16(sp)
   10954:	df000404 	addi	fp,sp,16
   10958:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   1095c:	00800244 	movi	r2,9
   10960:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   10964:	e13ffd17 	ldw	r4,-12(fp)
   10968:	014003f4 	movhi	r5,15
   1096c:	29509004 	addi	r5,r5,16960
   10970:	000cac00 	call	cac0 <__mulsi3>
   10974:	0100bef4 	movhi	r4,763
   10978:	213c2004 	addi	r4,r4,-3968
   1097c:	100b883a 	mov	r5,r2
   10980:	000cab00 	call	cab0 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   10984:	01200034 	movhi	r4,32768
   10988:	213fffc4 	addi	r4,r4,-1
   1098c:	100b883a 	mov	r5,r2
   10990:	000cab00 	call	cab0 <__udivsi3>
   10994:	e13fff17 	ldw	r4,-4(fp)
   10998:	100b883a 	mov	r5,r2
   1099c:	000cab00 	call	cab0 <__udivsi3>
   109a0:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   109a4:	e0bffe17 	ldw	r2,-8(fp)
   109a8:	10002a26 	beq	r2,zero,10a54 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   109ac:	e03ffc15 	stw	zero,-16(fp)
   109b0:	00001706 	br	10a10 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   109b4:	00a00034 	movhi	r2,32768
   109b8:	10bfffc4 	addi	r2,r2,-1
   109bc:	10bfffc4 	addi	r2,r2,-1
   109c0:	103ffe1e 	bne	r2,zero,109bc <__alt_data_end+0xfffbb28c>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   109c4:	e13ffd17 	ldw	r4,-12(fp)
   109c8:	014003f4 	movhi	r5,15
   109cc:	29509004 	addi	r5,r5,16960
   109d0:	000cac00 	call	cac0 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   109d4:	0100bef4 	movhi	r4,763
   109d8:	213c2004 	addi	r4,r4,-3968
   109dc:	100b883a 	mov	r5,r2
   109e0:	000cab00 	call	cab0 <__udivsi3>
   109e4:	01200034 	movhi	r4,32768
   109e8:	213fffc4 	addi	r4,r4,-1
   109ec:	100b883a 	mov	r5,r2
   109f0:	000cab00 	call	cab0 <__udivsi3>
   109f4:	1007883a 	mov	r3,r2
   109f8:	e0bfff17 	ldw	r2,-4(fp)
   109fc:	10c5c83a 	sub	r2,r2,r3
   10a00:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   10a04:	e0bffc17 	ldw	r2,-16(fp)
   10a08:	10800044 	addi	r2,r2,1
   10a0c:	e0bffc15 	stw	r2,-16(fp)
   10a10:	e0fffc17 	ldw	r3,-16(fp)
   10a14:	e0bffe17 	ldw	r2,-8(fp)
   10a18:	18bfe616 	blt	r3,r2,109b4 <__alt_data_end+0xfffbb284>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   10a1c:	e13ffd17 	ldw	r4,-12(fp)
   10a20:	014003f4 	movhi	r5,15
   10a24:	29509004 	addi	r5,r5,16960
   10a28:	000cac00 	call	cac0 <__mulsi3>
   10a2c:	0100bef4 	movhi	r4,763
   10a30:	213c2004 	addi	r4,r4,-3968
   10a34:	100b883a 	mov	r5,r2
   10a38:	000cab00 	call	cab0 <__udivsi3>
   10a3c:	1009883a 	mov	r4,r2
   10a40:	e17fff17 	ldw	r5,-4(fp)
   10a44:	000cac00 	call	cac0 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   10a48:	10bfffc4 	addi	r2,r2,-1
   10a4c:	103ffe1e 	bne	r2,zero,10a48 <__alt_data_end+0xfffbb318>
   10a50:	00000d06 	br	10a88 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   10a54:	e13ffd17 	ldw	r4,-12(fp)
   10a58:	014003f4 	movhi	r5,15
   10a5c:	29509004 	addi	r5,r5,16960
   10a60:	000cac00 	call	cac0 <__mulsi3>
   10a64:	0100bef4 	movhi	r4,763
   10a68:	213c2004 	addi	r4,r4,-3968
   10a6c:	100b883a 	mov	r5,r2
   10a70:	000cab00 	call	cab0 <__udivsi3>
   10a74:	1009883a 	mov	r4,r2
   10a78:	e17fff17 	ldw	r5,-4(fp)
   10a7c:	000cac00 	call	cac0 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   10a80:	10bfffc4 	addi	r2,r2,-1
   10a84:	00bffe16 	blt	zero,r2,10a80 <__alt_data_end+0xfffbb350>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   10a88:	0005883a 	mov	r2,zero
}
   10a8c:	e037883a 	mov	sp,fp
   10a90:	dfc00117 	ldw	ra,4(sp)
   10a94:	df000017 	ldw	fp,0(sp)
   10a98:	dec00204 	addi	sp,sp,8
   10a9c:	f800283a 	ret

00010aa0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   10aa0:	deffff04 	addi	sp,sp,-4
   10aa4:	df000015 	stw	fp,0(sp)
   10aa8:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   10aac:	e037883a 	mov	sp,fp
   10ab0:	df000017 	ldw	fp,0(sp)
   10ab4:	dec00104 	addi	sp,sp,4
   10ab8:	f800283a 	ret

00010abc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10abc:	defffe04 	addi	sp,sp,-8
   10ac0:	dfc00115 	stw	ra,4(sp)
   10ac4:	df000015 	stw	fp,0(sp)
   10ac8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10acc:	00800074 	movhi	r2,1
   10ad0:	10903204 	addi	r2,r2,16584
   10ad4:	10800017 	ldw	r2,0(r2)
   10ad8:	10000526 	beq	r2,zero,10af0 <alt_get_errno+0x34>
   10adc:	00800074 	movhi	r2,1
   10ae0:	10903204 	addi	r2,r2,16584
   10ae4:	10800017 	ldw	r2,0(r2)
   10ae8:	103ee83a 	callr	r2
   10aec:	00000206 	br	10af8 <alt_get_errno+0x3c>
   10af0:	00800074 	movhi	r2,1
   10af4:	1096fd04 	addi	r2,r2,23540
}
   10af8:	e037883a 	mov	sp,fp
   10afc:	dfc00117 	ldw	ra,4(sp)
   10b00:	df000017 	ldw	fp,0(sp)
   10b04:	dec00204 	addi	sp,sp,8
   10b08:	f800283a 	ret

00010b0c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   10b0c:	defffa04 	addi	sp,sp,-24
   10b10:	dfc00515 	stw	ra,20(sp)
   10b14:	df000415 	stw	fp,16(sp)
   10b18:	df000404 	addi	fp,sp,16
   10b1c:	e13ffe15 	stw	r4,-8(fp)
   10b20:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   10b24:	e0bffe17 	ldw	r2,-8(fp)
   10b28:	10000326 	beq	r2,zero,10b38 <alt_dev_llist_insert+0x2c>
   10b2c:	e0bffe17 	ldw	r2,-8(fp)
   10b30:	10800217 	ldw	r2,8(r2)
   10b34:	1000061e 	bne	r2,zero,10b50 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   10b38:	0010abc0 	call	10abc <alt_get_errno>
   10b3c:	1007883a 	mov	r3,r2
   10b40:	00800584 	movi	r2,22
   10b44:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   10b48:	00bffa84 	movi	r2,-22
   10b4c:	00001306 	br	10b9c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   10b50:	e0bffe17 	ldw	r2,-8(fp)
   10b54:	e0ffff17 	ldw	r3,-4(fp)
   10b58:	e0fffc15 	stw	r3,-16(fp)
   10b5c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   10b60:	e0bffd17 	ldw	r2,-12(fp)
   10b64:	e0fffc17 	ldw	r3,-16(fp)
   10b68:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   10b6c:	e0bffc17 	ldw	r2,-16(fp)
   10b70:	10c00017 	ldw	r3,0(r2)
   10b74:	e0bffd17 	ldw	r2,-12(fp)
   10b78:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   10b7c:	e0bffc17 	ldw	r2,-16(fp)
   10b80:	10800017 	ldw	r2,0(r2)
   10b84:	e0fffd17 	ldw	r3,-12(fp)
   10b88:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   10b8c:	e0bffc17 	ldw	r2,-16(fp)
   10b90:	e0fffd17 	ldw	r3,-12(fp)
   10b94:	10c00015 	stw	r3,0(r2)

  return 0;  
   10b98:	0005883a 	mov	r2,zero
}
   10b9c:	e037883a 	mov	sp,fp
   10ba0:	dfc00117 	ldw	ra,4(sp)
   10ba4:	df000017 	ldw	fp,0(sp)
   10ba8:	dec00204 	addi	sp,sp,8
   10bac:	f800283a 	ret

00010bb0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   10bb0:	defffd04 	addi	sp,sp,-12
   10bb4:	dfc00215 	stw	ra,8(sp)
   10bb8:	df000115 	stw	fp,4(sp)
   10bbc:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   10bc0:	00800074 	movhi	r2,1
   10bc4:	1086f004 	addi	r2,r2,7104
   10bc8:	e0bfff15 	stw	r2,-4(fp)
   10bcc:	00000606 	br	10be8 <_do_ctors+0x38>
        (*ctor) (); 
   10bd0:	e0bfff17 	ldw	r2,-4(fp)
   10bd4:	10800017 	ldw	r2,0(r2)
   10bd8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   10bdc:	e0bfff17 	ldw	r2,-4(fp)
   10be0:	10bfff04 	addi	r2,r2,-4
   10be4:	e0bfff15 	stw	r2,-4(fp)
   10be8:	e0ffff17 	ldw	r3,-4(fp)
   10bec:	00800074 	movhi	r2,1
   10bf0:	1086f104 	addi	r2,r2,7108
   10bf4:	18bff62e 	bgeu	r3,r2,10bd0 <__alt_data_end+0xfffbb4a0>
        (*ctor) (); 
}
   10bf8:	e037883a 	mov	sp,fp
   10bfc:	dfc00117 	ldw	ra,4(sp)
   10c00:	df000017 	ldw	fp,0(sp)
   10c04:	dec00204 	addi	sp,sp,8
   10c08:	f800283a 	ret

00010c0c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   10c0c:	defffd04 	addi	sp,sp,-12
   10c10:	dfc00215 	stw	ra,8(sp)
   10c14:	df000115 	stw	fp,4(sp)
   10c18:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   10c1c:	00800074 	movhi	r2,1
   10c20:	1086f004 	addi	r2,r2,7104
   10c24:	e0bfff15 	stw	r2,-4(fp)
   10c28:	00000606 	br	10c44 <_do_dtors+0x38>
        (*dtor) (); 
   10c2c:	e0bfff17 	ldw	r2,-4(fp)
   10c30:	10800017 	ldw	r2,0(r2)
   10c34:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   10c38:	e0bfff17 	ldw	r2,-4(fp)
   10c3c:	10bfff04 	addi	r2,r2,-4
   10c40:	e0bfff15 	stw	r2,-4(fp)
   10c44:	e0ffff17 	ldw	r3,-4(fp)
   10c48:	00800074 	movhi	r2,1
   10c4c:	1086f104 	addi	r2,r2,7108
   10c50:	18bff62e 	bgeu	r3,r2,10c2c <__alt_data_end+0xfffbb4fc>
        (*dtor) (); 
}
   10c54:	e037883a 	mov	sp,fp
   10c58:	dfc00117 	ldw	ra,4(sp)
   10c5c:	df000017 	ldw	fp,0(sp)
   10c60:	dec00204 	addi	sp,sp,8
   10c64:	f800283a 	ret

00010c68 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   10c68:	deffff04 	addi	sp,sp,-4
   10c6c:	df000015 	stw	fp,0(sp)
   10c70:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   10c74:	e037883a 	mov	sp,fp
   10c78:	df000017 	ldw	fp,0(sp)
   10c7c:	dec00104 	addi	sp,sp,4
   10c80:	f800283a 	ret

00010c84 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   10c84:	defff904 	addi	sp,sp,-28
   10c88:	dfc00615 	stw	ra,24(sp)
   10c8c:	df000515 	stw	fp,20(sp)
   10c90:	df000504 	addi	fp,sp,20
   10c94:	e13ffc15 	stw	r4,-16(fp)
   10c98:	e17ffd15 	stw	r5,-12(fp)
   10c9c:	e1bffe15 	stw	r6,-8(fp)
   10ca0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   10ca4:	e0800217 	ldw	r2,8(fp)
   10ca8:	d8800015 	stw	r2,0(sp)
   10cac:	e13ffc17 	ldw	r4,-16(fp)
   10cb0:	e17ffd17 	ldw	r5,-12(fp)
   10cb4:	e1bffe17 	ldw	r6,-8(fp)
   10cb8:	e1ffff17 	ldw	r7,-4(fp)
   10cbc:	0010e640 	call	10e64 <alt_iic_isr_register>
}  
   10cc0:	e037883a 	mov	sp,fp
   10cc4:	dfc00117 	ldw	ra,4(sp)
   10cc8:	df000017 	ldw	fp,0(sp)
   10ccc:	dec00204 	addi	sp,sp,8
   10cd0:	f800283a 	ret

00010cd4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   10cd4:	defff904 	addi	sp,sp,-28
   10cd8:	df000615 	stw	fp,24(sp)
   10cdc:	df000604 	addi	fp,sp,24
   10ce0:	e13ffe15 	stw	r4,-8(fp)
   10ce4:	e17fff15 	stw	r5,-4(fp)
   10ce8:	e0bfff17 	ldw	r2,-4(fp)
   10cec:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10cf0:	0005303a 	rdctl	r2,status
   10cf4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10cf8:	e0fffb17 	ldw	r3,-20(fp)
   10cfc:	00bfff84 	movi	r2,-2
   10d00:	1884703a 	and	r2,r3,r2
   10d04:	1001703a 	wrctl	status,r2
  
  return context;
   10d08:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   10d0c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   10d10:	e0bffa17 	ldw	r2,-24(fp)
   10d14:	00c00044 	movi	r3,1
   10d18:	1884983a 	sll	r2,r3,r2
   10d1c:	1007883a 	mov	r3,r2
   10d20:	00800074 	movhi	r2,1
   10d24:	10970404 	addi	r2,r2,23568
   10d28:	10800017 	ldw	r2,0(r2)
   10d2c:	1886b03a 	or	r3,r3,r2
   10d30:	00800074 	movhi	r2,1
   10d34:	10970404 	addi	r2,r2,23568
   10d38:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   10d3c:	00800074 	movhi	r2,1
   10d40:	10970404 	addi	r2,r2,23568
   10d44:	10800017 	ldw	r2,0(r2)
   10d48:	100170fa 	wrctl	ienable,r2
   10d4c:	e0bffc17 	ldw	r2,-16(fp)
   10d50:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10d54:	e0bffd17 	ldw	r2,-12(fp)
   10d58:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   10d5c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   10d60:	0001883a 	nop
}
   10d64:	e037883a 	mov	sp,fp
   10d68:	df000017 	ldw	fp,0(sp)
   10d6c:	dec00104 	addi	sp,sp,4
   10d70:	f800283a 	ret

00010d74 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   10d74:	defff904 	addi	sp,sp,-28
   10d78:	df000615 	stw	fp,24(sp)
   10d7c:	df000604 	addi	fp,sp,24
   10d80:	e13ffe15 	stw	r4,-8(fp)
   10d84:	e17fff15 	stw	r5,-4(fp)
   10d88:	e0bfff17 	ldw	r2,-4(fp)
   10d8c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10d90:	0005303a 	rdctl	r2,status
   10d94:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10d98:	e0fffb17 	ldw	r3,-20(fp)
   10d9c:	00bfff84 	movi	r2,-2
   10da0:	1884703a 	and	r2,r3,r2
   10da4:	1001703a 	wrctl	status,r2
  
  return context;
   10da8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   10dac:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   10db0:	e0bffa17 	ldw	r2,-24(fp)
   10db4:	00c00044 	movi	r3,1
   10db8:	1884983a 	sll	r2,r3,r2
   10dbc:	0084303a 	nor	r2,zero,r2
   10dc0:	1007883a 	mov	r3,r2
   10dc4:	00800074 	movhi	r2,1
   10dc8:	10970404 	addi	r2,r2,23568
   10dcc:	10800017 	ldw	r2,0(r2)
   10dd0:	1886703a 	and	r3,r3,r2
   10dd4:	00800074 	movhi	r2,1
   10dd8:	10970404 	addi	r2,r2,23568
   10ddc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   10de0:	00800074 	movhi	r2,1
   10de4:	10970404 	addi	r2,r2,23568
   10de8:	10800017 	ldw	r2,0(r2)
   10dec:	100170fa 	wrctl	ienable,r2
   10df0:	e0bffc17 	ldw	r2,-16(fp)
   10df4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10df8:	e0bffd17 	ldw	r2,-12(fp)
   10dfc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   10e00:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   10e04:	0001883a 	nop
}
   10e08:	e037883a 	mov	sp,fp
   10e0c:	df000017 	ldw	fp,0(sp)
   10e10:	dec00104 	addi	sp,sp,4
   10e14:	f800283a 	ret

00010e18 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   10e18:	defffc04 	addi	sp,sp,-16
   10e1c:	df000315 	stw	fp,12(sp)
   10e20:	df000304 	addi	fp,sp,12
   10e24:	e13ffe15 	stw	r4,-8(fp)
   10e28:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   10e2c:	000530fa 	rdctl	r2,ienable
   10e30:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   10e34:	e0bfff17 	ldw	r2,-4(fp)
   10e38:	00c00044 	movi	r3,1
   10e3c:	1884983a 	sll	r2,r3,r2
   10e40:	1007883a 	mov	r3,r2
   10e44:	e0bffd17 	ldw	r2,-12(fp)
   10e48:	1884703a 	and	r2,r3,r2
   10e4c:	1004c03a 	cmpne	r2,r2,zero
   10e50:	10803fcc 	andi	r2,r2,255
}
   10e54:	e037883a 	mov	sp,fp
   10e58:	df000017 	ldw	fp,0(sp)
   10e5c:	dec00104 	addi	sp,sp,4
   10e60:	f800283a 	ret

00010e64 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   10e64:	defff504 	addi	sp,sp,-44
   10e68:	dfc00a15 	stw	ra,40(sp)
   10e6c:	df000915 	stw	fp,36(sp)
   10e70:	df000904 	addi	fp,sp,36
   10e74:	e13ffc15 	stw	r4,-16(fp)
   10e78:	e17ffd15 	stw	r5,-12(fp)
   10e7c:	e1bffe15 	stw	r6,-8(fp)
   10e80:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   10e84:	00bffa84 	movi	r2,-22
   10e88:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   10e8c:	e0bffd17 	ldw	r2,-12(fp)
   10e90:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   10e94:	e0bff817 	ldw	r2,-32(fp)
   10e98:	10800808 	cmpgei	r2,r2,32
   10e9c:	1000271e 	bne	r2,zero,10f3c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10ea0:	0005303a 	rdctl	r2,status
   10ea4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10ea8:	e0fffa17 	ldw	r3,-24(fp)
   10eac:	00bfff84 	movi	r2,-2
   10eb0:	1884703a 	and	r2,r3,r2
   10eb4:	1001703a 	wrctl	status,r2
  
  return context;
   10eb8:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   10ebc:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   10ec0:	00800074 	movhi	r2,1
   10ec4:	10971204 	addi	r2,r2,23624
   10ec8:	e0fff817 	ldw	r3,-32(fp)
   10ecc:	180690fa 	slli	r3,r3,3
   10ed0:	10c5883a 	add	r2,r2,r3
   10ed4:	e0fffe17 	ldw	r3,-8(fp)
   10ed8:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   10edc:	00800074 	movhi	r2,1
   10ee0:	10971204 	addi	r2,r2,23624
   10ee4:	e0fff817 	ldw	r3,-32(fp)
   10ee8:	180690fa 	slli	r3,r3,3
   10eec:	10c5883a 	add	r2,r2,r3
   10ef0:	10800104 	addi	r2,r2,4
   10ef4:	e0ffff17 	ldw	r3,-4(fp)
   10ef8:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   10efc:	e0bffe17 	ldw	r2,-8(fp)
   10f00:	10000526 	beq	r2,zero,10f18 <alt_iic_isr_register+0xb4>
   10f04:	e0bff817 	ldw	r2,-32(fp)
   10f08:	e13ffc17 	ldw	r4,-16(fp)
   10f0c:	100b883a 	mov	r5,r2
   10f10:	0010cd40 	call	10cd4 <alt_ic_irq_enable>
   10f14:	00000406 	br	10f28 <alt_iic_isr_register+0xc4>
   10f18:	e0bff817 	ldw	r2,-32(fp)
   10f1c:	e13ffc17 	ldw	r4,-16(fp)
   10f20:	100b883a 	mov	r5,r2
   10f24:	0010d740 	call	10d74 <alt_ic_irq_disable>
   10f28:	e0bff715 	stw	r2,-36(fp)
   10f2c:	e0bff917 	ldw	r2,-28(fp)
   10f30:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10f34:	e0bffb17 	ldw	r2,-20(fp)
   10f38:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   10f3c:	e0bff717 	ldw	r2,-36(fp)
}
   10f40:	e037883a 	mov	sp,fp
   10f44:	dfc00117 	ldw	ra,4(sp)
   10f48:	df000017 	ldw	fp,0(sp)
   10f4c:	dec00204 	addi	sp,sp,8
   10f50:	f800283a 	ret

00010f54 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   10f54:	defff804 	addi	sp,sp,-32
   10f58:	dfc00715 	stw	ra,28(sp)
   10f5c:	df000615 	stw	fp,24(sp)
   10f60:	dc000515 	stw	r16,20(sp)
   10f64:	df000604 	addi	fp,sp,24
   10f68:	e13ffb15 	stw	r4,-20(fp)
   10f6c:	e17ffc15 	stw	r5,-16(fp)
   10f70:	e1bffd15 	stw	r6,-12(fp)
   10f74:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   10f78:	e13ffc17 	ldw	r4,-16(fp)
   10f7c:	e17ffd17 	ldw	r5,-12(fp)
   10f80:	e1bffe17 	ldw	r6,-8(fp)
   10f84:	00111f00 	call	111f0 <open>
   10f88:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   10f8c:	e0bffa17 	ldw	r2,-24(fp)
   10f90:	10002216 	blt	r2,zero,1101c <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   10f94:	04000074 	movhi	r16,1
   10f98:	840baf04 	addi	r16,r16,11964
   10f9c:	e0bffa17 	ldw	r2,-24(fp)
   10fa0:	1009883a 	mov	r4,r2
   10fa4:	01400304 	movi	r5,12
   10fa8:	000cac00 	call	cac0 <__mulsi3>
   10fac:	8085883a 	add	r2,r16,r2
   10fb0:	10c00017 	ldw	r3,0(r2)
   10fb4:	e0bffb17 	ldw	r2,-20(fp)
   10fb8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   10fbc:	04000074 	movhi	r16,1
   10fc0:	840baf04 	addi	r16,r16,11964
   10fc4:	e0bffa17 	ldw	r2,-24(fp)
   10fc8:	1009883a 	mov	r4,r2
   10fcc:	01400304 	movi	r5,12
   10fd0:	000cac00 	call	cac0 <__mulsi3>
   10fd4:	8085883a 	add	r2,r16,r2
   10fd8:	10800104 	addi	r2,r2,4
   10fdc:	10c00017 	ldw	r3,0(r2)
   10fe0:	e0bffb17 	ldw	r2,-20(fp)
   10fe4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   10fe8:	04000074 	movhi	r16,1
   10fec:	840baf04 	addi	r16,r16,11964
   10ff0:	e0bffa17 	ldw	r2,-24(fp)
   10ff4:	1009883a 	mov	r4,r2
   10ff8:	01400304 	movi	r5,12
   10ffc:	000cac00 	call	cac0 <__mulsi3>
   11000:	8085883a 	add	r2,r16,r2
   11004:	10800204 	addi	r2,r2,8
   11008:	10c00017 	ldw	r3,0(r2)
   1100c:	e0bffb17 	ldw	r2,-20(fp)
   11010:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   11014:	e13ffa17 	ldw	r4,-24(fp)
   11018:	000fa580 	call	fa58 <alt_release_fd>
  }
} 
   1101c:	e6ffff04 	addi	sp,fp,-4
   11020:	dfc00217 	ldw	ra,8(sp)
   11024:	df000117 	ldw	fp,4(sp)
   11028:	dc000017 	ldw	r16,0(sp)
   1102c:	dec00304 	addi	sp,sp,12
   11030:	f800283a 	ret

00011034 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   11034:	defffb04 	addi	sp,sp,-20
   11038:	dfc00415 	stw	ra,16(sp)
   1103c:	df000315 	stw	fp,12(sp)
   11040:	df000304 	addi	fp,sp,12
   11044:	e13ffd15 	stw	r4,-12(fp)
   11048:	e17ffe15 	stw	r5,-8(fp)
   1104c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   11050:	01000074 	movhi	r4,1
   11054:	210bb204 	addi	r4,r4,11976
   11058:	e17ffd17 	ldw	r5,-12(fp)
   1105c:	01800044 	movi	r6,1
   11060:	01c07fc4 	movi	r7,511
   11064:	0010f540 	call	10f54 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   11068:	01000074 	movhi	r4,1
   1106c:	210baf04 	addi	r4,r4,11964
   11070:	e17ffe17 	ldw	r5,-8(fp)
   11074:	000d883a 	mov	r6,zero
   11078:	01c07fc4 	movi	r7,511
   1107c:	0010f540 	call	10f54 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   11080:	01000074 	movhi	r4,1
   11084:	210bb504 	addi	r4,r4,11988
   11088:	e17fff17 	ldw	r5,-4(fp)
   1108c:	01800044 	movi	r6,1
   11090:	01c07fc4 	movi	r7,511
   11094:	0010f540 	call	10f54 <alt_open_fd>
}  
   11098:	e037883a 	mov	sp,fp
   1109c:	dfc00117 	ldw	ra,4(sp)
   110a0:	df000017 	ldw	fp,0(sp)
   110a4:	dec00204 	addi	sp,sp,8
   110a8:	f800283a 	ret

000110ac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   110ac:	defffe04 	addi	sp,sp,-8
   110b0:	dfc00115 	stw	ra,4(sp)
   110b4:	df000015 	stw	fp,0(sp)
   110b8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   110bc:	00800074 	movhi	r2,1
   110c0:	10903204 	addi	r2,r2,16584
   110c4:	10800017 	ldw	r2,0(r2)
   110c8:	10000526 	beq	r2,zero,110e0 <alt_get_errno+0x34>
   110cc:	00800074 	movhi	r2,1
   110d0:	10903204 	addi	r2,r2,16584
   110d4:	10800017 	ldw	r2,0(r2)
   110d8:	103ee83a 	callr	r2
   110dc:	00000206 	br	110e8 <alt_get_errno+0x3c>
   110e0:	00800074 	movhi	r2,1
   110e4:	1096fd04 	addi	r2,r2,23540
}
   110e8:	e037883a 	mov	sp,fp
   110ec:	dfc00117 	ldw	ra,4(sp)
   110f0:	df000017 	ldw	fp,0(sp)
   110f4:	dec00204 	addi	sp,sp,8
   110f8:	f800283a 	ret

000110fc <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   110fc:	defffb04 	addi	sp,sp,-20
   11100:	dfc00415 	stw	ra,16(sp)
   11104:	df000315 	stw	fp,12(sp)
   11108:	dc000215 	stw	r16,8(sp)
   1110c:	df000304 	addi	fp,sp,12
   11110:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   11114:	e0bffe17 	ldw	r2,-8(fp)
   11118:	10800217 	ldw	r2,8(r2)
   1111c:	10d00034 	orhi	r3,r2,16384
   11120:	e0bffe17 	ldw	r2,-8(fp)
   11124:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   11128:	e03ffd15 	stw	zero,-12(fp)
   1112c:	00002306 	br	111bc <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   11130:	04000074 	movhi	r16,1
   11134:	840baf04 	addi	r16,r16,11964
   11138:	e0bffd17 	ldw	r2,-12(fp)
   1113c:	1009883a 	mov	r4,r2
   11140:	01400304 	movi	r5,12
   11144:	000cac00 	call	cac0 <__mulsi3>
   11148:	8085883a 	add	r2,r16,r2
   1114c:	10c00017 	ldw	r3,0(r2)
   11150:	e0bffe17 	ldw	r2,-8(fp)
   11154:	10800017 	ldw	r2,0(r2)
   11158:	1880151e 	bne	r3,r2,111b0 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1115c:	04000074 	movhi	r16,1
   11160:	840baf04 	addi	r16,r16,11964
   11164:	e0bffd17 	ldw	r2,-12(fp)
   11168:	1009883a 	mov	r4,r2
   1116c:	01400304 	movi	r5,12
   11170:	000cac00 	call	cac0 <__mulsi3>
   11174:	8085883a 	add	r2,r16,r2
   11178:	10800204 	addi	r2,r2,8
   1117c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   11180:	10000b0e 	bge	r2,zero,111b0 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   11184:	e13ffd17 	ldw	r4,-12(fp)
   11188:	01400304 	movi	r5,12
   1118c:	000cac00 	call	cac0 <__mulsi3>
   11190:	1007883a 	mov	r3,r2
   11194:	00800074 	movhi	r2,1
   11198:	108baf04 	addi	r2,r2,11964
   1119c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   111a0:	e0bffe17 	ldw	r2,-8(fp)
   111a4:	18800226 	beq	r3,r2,111b0 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   111a8:	00bffcc4 	movi	r2,-13
   111ac:	00000a06 	br	111d8 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   111b0:	e0bffd17 	ldw	r2,-12(fp)
   111b4:	10800044 	addi	r2,r2,1
   111b8:	e0bffd15 	stw	r2,-12(fp)
   111bc:	00800074 	movhi	r2,1
   111c0:	10903104 	addi	r2,r2,16580
   111c4:	10800017 	ldw	r2,0(r2)
   111c8:	1007883a 	mov	r3,r2
   111cc:	e0bffd17 	ldw	r2,-12(fp)
   111d0:	18bfd72e 	bgeu	r3,r2,11130 <__alt_data_end+0xfffbba00>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   111d4:	0005883a 	mov	r2,zero
}
   111d8:	e6ffff04 	addi	sp,fp,-4
   111dc:	dfc00217 	ldw	ra,8(sp)
   111e0:	df000117 	ldw	fp,4(sp)
   111e4:	dc000017 	ldw	r16,0(sp)
   111e8:	dec00304 	addi	sp,sp,12
   111ec:	f800283a 	ret

000111f0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   111f0:	defff604 	addi	sp,sp,-40
   111f4:	dfc00915 	stw	ra,36(sp)
   111f8:	df000815 	stw	fp,32(sp)
   111fc:	df000804 	addi	fp,sp,32
   11200:	e13ffd15 	stw	r4,-12(fp)
   11204:	e17ffe15 	stw	r5,-8(fp)
   11208:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   1120c:	00bfffc4 	movi	r2,-1
   11210:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   11214:	00bffb44 	movi	r2,-19
   11218:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   1121c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   11220:	e13ffd17 	ldw	r4,-12(fp)
   11224:	01400074 	movhi	r5,1
   11228:	29502f04 	addi	r5,r5,16572
   1122c:	001150c0 	call	1150c <alt_find_dev>
   11230:	e0bff815 	stw	r2,-32(fp)
   11234:	e0bff817 	ldw	r2,-32(fp)
   11238:	1000051e 	bne	r2,zero,11250 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   1123c:	e13ffd17 	ldw	r4,-12(fp)
   11240:	001159c0 	call	1159c <alt_find_file>
   11244:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   11248:	00800044 	movi	r2,1
   1124c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   11250:	e0bff817 	ldw	r2,-32(fp)
   11254:	10002b26 	beq	r2,zero,11304 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
   11258:	e13ff817 	ldw	r4,-32(fp)
   1125c:	00116b00 	call	116b0 <alt_get_fd>
   11260:	e0bff915 	stw	r2,-28(fp)
   11264:	e0bff917 	ldw	r2,-28(fp)
   11268:	1000030e 	bge	r2,zero,11278 <open+0x88>
    {
      status = index;
   1126c:	e0bff917 	ldw	r2,-28(fp)
   11270:	e0bffa15 	stw	r2,-24(fp)
   11274:	00002506 	br	1130c <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
   11278:	e13ff917 	ldw	r4,-28(fp)
   1127c:	01400304 	movi	r5,12
   11280:	000cac00 	call	cac0 <__mulsi3>
   11284:	1007883a 	mov	r3,r2
   11288:	00800074 	movhi	r2,1
   1128c:	108baf04 	addi	r2,r2,11964
   11290:	1885883a 	add	r2,r3,r2
   11294:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   11298:	e0fffe17 	ldw	r3,-8(fp)
   1129c:	00900034 	movhi	r2,16384
   112a0:	10bfffc4 	addi	r2,r2,-1
   112a4:	1886703a 	and	r3,r3,r2
   112a8:	e0bffc17 	ldw	r2,-16(fp)
   112ac:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   112b0:	e0bffb17 	ldw	r2,-20(fp)
   112b4:	1000051e 	bne	r2,zero,112cc <open+0xdc>
   112b8:	e13ffc17 	ldw	r4,-16(fp)
   112bc:	00110fc0 	call	110fc <alt_file_locked>
   112c0:	e0bffa15 	stw	r2,-24(fp)
   112c4:	e0bffa17 	ldw	r2,-24(fp)
   112c8:	10001016 	blt	r2,zero,1130c <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   112cc:	e0bff817 	ldw	r2,-32(fp)
   112d0:	10800317 	ldw	r2,12(r2)
   112d4:	10000826 	beq	r2,zero,112f8 <open+0x108>
   112d8:	e0bff817 	ldw	r2,-32(fp)
   112dc:	10800317 	ldw	r2,12(r2)
   112e0:	e13ffc17 	ldw	r4,-16(fp)
   112e4:	e17ffd17 	ldw	r5,-12(fp)
   112e8:	e1bffe17 	ldw	r6,-8(fp)
   112ec:	e1ffff17 	ldw	r7,-4(fp)
   112f0:	103ee83a 	callr	r2
   112f4:	00000106 	br	112fc <open+0x10c>
   112f8:	0005883a 	mov	r2,zero
   112fc:	e0bffa15 	stw	r2,-24(fp)
   11300:	00000206 	br	1130c <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   11304:	00bffb44 	movi	r2,-19
   11308:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   1130c:	e0bffa17 	ldw	r2,-24(fp)
   11310:	1000090e 	bge	r2,zero,11338 <open+0x148>
  {
    alt_release_fd (index);  
   11314:	e13ff917 	ldw	r4,-28(fp)
   11318:	000fa580 	call	fa58 <alt_release_fd>
    ALT_ERRNO = -status;
   1131c:	00110ac0 	call	110ac <alt_get_errno>
   11320:	1007883a 	mov	r3,r2
   11324:	e0bffa17 	ldw	r2,-24(fp)
   11328:	0085c83a 	sub	r2,zero,r2
   1132c:	18800015 	stw	r2,0(r3)
    return -1;
   11330:	00bfffc4 	movi	r2,-1
   11334:	00000106 	br	1133c <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
   11338:	e0bff917 	ldw	r2,-28(fp)
}
   1133c:	e037883a 	mov	sp,fp
   11340:	dfc00117 	ldw	ra,4(sp)
   11344:	df000017 	ldw	fp,0(sp)
   11348:	dec00204 	addi	sp,sp,8
   1134c:	f800283a 	ret

00011350 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   11350:	defffa04 	addi	sp,sp,-24
   11354:	df000515 	stw	fp,20(sp)
   11358:	df000504 	addi	fp,sp,20
   1135c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11360:	0005303a 	rdctl	r2,status
   11364:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11368:	e0fffc17 	ldw	r3,-16(fp)
   1136c:	00bfff84 	movi	r2,-2
   11370:	1884703a 	and	r2,r3,r2
   11374:	1001703a 	wrctl	status,r2
  
  return context;
   11378:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   1137c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   11380:	e0bfff17 	ldw	r2,-4(fp)
   11384:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   11388:	e0bffd17 	ldw	r2,-12(fp)
   1138c:	10800017 	ldw	r2,0(r2)
   11390:	e0fffd17 	ldw	r3,-12(fp)
   11394:	18c00117 	ldw	r3,4(r3)
   11398:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   1139c:	e0bffd17 	ldw	r2,-12(fp)
   113a0:	10800117 	ldw	r2,4(r2)
   113a4:	e0fffd17 	ldw	r3,-12(fp)
   113a8:	18c00017 	ldw	r3,0(r3)
   113ac:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   113b0:	e0bffd17 	ldw	r2,-12(fp)
   113b4:	e0fffd17 	ldw	r3,-12(fp)
   113b8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   113bc:	e0bffd17 	ldw	r2,-12(fp)
   113c0:	e0fffd17 	ldw	r3,-12(fp)
   113c4:	10c00015 	stw	r3,0(r2)
   113c8:	e0bffb17 	ldw	r2,-20(fp)
   113cc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   113d0:	e0bffe17 	ldw	r2,-8(fp)
   113d4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   113d8:	e037883a 	mov	sp,fp
   113dc:	df000017 	ldw	fp,0(sp)
   113e0:	dec00104 	addi	sp,sp,4
   113e4:	f800283a 	ret

000113e8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   113e8:	defffb04 	addi	sp,sp,-20
   113ec:	dfc00415 	stw	ra,16(sp)
   113f0:	df000315 	stw	fp,12(sp)
   113f4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   113f8:	d0a00e17 	ldw	r2,-32712(gp)
   113fc:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   11400:	d0a6df17 	ldw	r2,-25732(gp)
   11404:	10800044 	addi	r2,r2,1
   11408:	d0a6df15 	stw	r2,-25732(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1140c:	00002e06 	br	114c8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   11410:	e0bffd17 	ldw	r2,-12(fp)
   11414:	10800017 	ldw	r2,0(r2)
   11418:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   1141c:	e0bffd17 	ldw	r2,-12(fp)
   11420:	10800403 	ldbu	r2,16(r2)
   11424:	10803fcc 	andi	r2,r2,255
   11428:	10000426 	beq	r2,zero,1143c <alt_tick+0x54>
   1142c:	d0a6df17 	ldw	r2,-25732(gp)
   11430:	1000021e 	bne	r2,zero,1143c <alt_tick+0x54>
    {
      alarm->rollover = 0;
   11434:	e0bffd17 	ldw	r2,-12(fp)
   11438:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   1143c:	e0bffd17 	ldw	r2,-12(fp)
   11440:	10800217 	ldw	r2,8(r2)
   11444:	d0e6df17 	ldw	r3,-25732(gp)
   11448:	18801d36 	bltu	r3,r2,114c0 <alt_tick+0xd8>
   1144c:	e0bffd17 	ldw	r2,-12(fp)
   11450:	10800403 	ldbu	r2,16(r2)
   11454:	10803fcc 	andi	r2,r2,255
   11458:	1000191e 	bne	r2,zero,114c0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   1145c:	e0bffd17 	ldw	r2,-12(fp)
   11460:	10800317 	ldw	r2,12(r2)
   11464:	e0fffd17 	ldw	r3,-12(fp)
   11468:	18c00517 	ldw	r3,20(r3)
   1146c:	1809883a 	mov	r4,r3
   11470:	103ee83a 	callr	r2
   11474:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   11478:	e0bfff17 	ldw	r2,-4(fp)
   1147c:	1000031e 	bne	r2,zero,1148c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   11480:	e13ffd17 	ldw	r4,-12(fp)
   11484:	00113500 	call	11350 <alt_alarm_stop>
   11488:	00000d06 	br	114c0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   1148c:	e0bffd17 	ldw	r2,-12(fp)
   11490:	10c00217 	ldw	r3,8(r2)
   11494:	e0bfff17 	ldw	r2,-4(fp)
   11498:	1887883a 	add	r3,r3,r2
   1149c:	e0bffd17 	ldw	r2,-12(fp)
   114a0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   114a4:	e0bffd17 	ldw	r2,-12(fp)
   114a8:	10c00217 	ldw	r3,8(r2)
   114ac:	d0a6df17 	ldw	r2,-25732(gp)
   114b0:	1880032e 	bgeu	r3,r2,114c0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   114b4:	e0bffd17 	ldw	r2,-12(fp)
   114b8:	00c00044 	movi	r3,1
   114bc:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   114c0:	e0bffe17 	ldw	r2,-8(fp)
   114c4:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   114c8:	e0fffd17 	ldw	r3,-12(fp)
   114cc:	d0a00e04 	addi	r2,gp,-32712
   114d0:	18bfcf1e 	bne	r3,r2,11410 <__alt_data_end+0xfffbbce0>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   114d4:	0001883a 	nop
}
   114d8:	e037883a 	mov	sp,fp
   114dc:	dfc00117 	ldw	ra,4(sp)
   114e0:	df000017 	ldw	fp,0(sp)
   114e4:	dec00204 	addi	sp,sp,8
   114e8:	f800283a 	ret

000114ec <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   114ec:	deffff04 	addi	sp,sp,-4
   114f0:	df000015 	stw	fp,0(sp)
   114f4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   114f8:	000170fa 	wrctl	ienable,zero
}
   114fc:	e037883a 	mov	sp,fp
   11500:	df000017 	ldw	fp,0(sp)
   11504:	dec00104 	addi	sp,sp,4
   11508:	f800283a 	ret

0001150c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   1150c:	defffa04 	addi	sp,sp,-24
   11510:	dfc00515 	stw	ra,20(sp)
   11514:	df000415 	stw	fp,16(sp)
   11518:	df000404 	addi	fp,sp,16
   1151c:	e13ffe15 	stw	r4,-8(fp)
   11520:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   11524:	e0bfff17 	ldw	r2,-4(fp)
   11528:	10800017 	ldw	r2,0(r2)
   1152c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   11530:	e13ffe17 	ldw	r4,-8(fp)
   11534:	00032b00 	call	32b0 <strlen>
   11538:	10800044 	addi	r2,r2,1
   1153c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   11540:	00000d06 	br	11578 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   11544:	e0bffc17 	ldw	r2,-16(fp)
   11548:	10c00217 	ldw	r3,8(r2)
   1154c:	e0bffd17 	ldw	r2,-12(fp)
   11550:	1809883a 	mov	r4,r3
   11554:	e17ffe17 	ldw	r5,-8(fp)
   11558:	100d883a 	mov	r6,r2
   1155c:	001186c0 	call	1186c <memcmp>
   11560:	1000021e 	bne	r2,zero,1156c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   11564:	e0bffc17 	ldw	r2,-16(fp)
   11568:	00000706 	br	11588 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   1156c:	e0bffc17 	ldw	r2,-16(fp)
   11570:	10800017 	ldw	r2,0(r2)
   11574:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   11578:	e0fffc17 	ldw	r3,-16(fp)
   1157c:	e0bfff17 	ldw	r2,-4(fp)
   11580:	18bff01e 	bne	r3,r2,11544 <__alt_data_end+0xfffbbe14>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   11584:	0005883a 	mov	r2,zero
}
   11588:	e037883a 	mov	sp,fp
   1158c:	dfc00117 	ldw	ra,4(sp)
   11590:	df000017 	ldw	fp,0(sp)
   11594:	dec00204 	addi	sp,sp,8
   11598:	f800283a 	ret

0001159c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   1159c:	defffb04 	addi	sp,sp,-20
   115a0:	dfc00415 	stw	ra,16(sp)
   115a4:	df000315 	stw	fp,12(sp)
   115a8:	df000304 	addi	fp,sp,12
   115ac:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   115b0:	00800074 	movhi	r2,1
   115b4:	10902d04 	addi	r2,r2,16564
   115b8:	10800017 	ldw	r2,0(r2)
   115bc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   115c0:	00003106 	br	11688 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   115c4:	e0bffd17 	ldw	r2,-12(fp)
   115c8:	10800217 	ldw	r2,8(r2)
   115cc:	1009883a 	mov	r4,r2
   115d0:	00032b00 	call	32b0 <strlen>
   115d4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   115d8:	e0bffd17 	ldw	r2,-12(fp)
   115dc:	10c00217 	ldw	r3,8(r2)
   115e0:	e0bffe17 	ldw	r2,-8(fp)
   115e4:	10bfffc4 	addi	r2,r2,-1
   115e8:	1885883a 	add	r2,r3,r2
   115ec:	10800003 	ldbu	r2,0(r2)
   115f0:	10803fcc 	andi	r2,r2,255
   115f4:	1080201c 	xori	r2,r2,128
   115f8:	10bfe004 	addi	r2,r2,-128
   115fc:	10800bd8 	cmpnei	r2,r2,47
   11600:	1000031e 	bne	r2,zero,11610 <alt_find_file+0x74>
    {
      len -= 1;
   11604:	e0bffe17 	ldw	r2,-8(fp)
   11608:	10bfffc4 	addi	r2,r2,-1
   1160c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   11610:	e0bffe17 	ldw	r2,-8(fp)
   11614:	e0ffff17 	ldw	r3,-4(fp)
   11618:	1885883a 	add	r2,r3,r2
   1161c:	10800003 	ldbu	r2,0(r2)
   11620:	10803fcc 	andi	r2,r2,255
   11624:	1080201c 	xori	r2,r2,128
   11628:	10bfe004 	addi	r2,r2,-128
   1162c:	10800be0 	cmpeqi	r2,r2,47
   11630:	1000081e 	bne	r2,zero,11654 <alt_find_file+0xb8>
   11634:	e0bffe17 	ldw	r2,-8(fp)
   11638:	e0ffff17 	ldw	r3,-4(fp)
   1163c:	1885883a 	add	r2,r3,r2
   11640:	10800003 	ldbu	r2,0(r2)
   11644:	10803fcc 	andi	r2,r2,255
   11648:	1080201c 	xori	r2,r2,128
   1164c:	10bfe004 	addi	r2,r2,-128
   11650:	10000a1e 	bne	r2,zero,1167c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   11654:	e0bffd17 	ldw	r2,-12(fp)
   11658:	10c00217 	ldw	r3,8(r2)
   1165c:	e0bffe17 	ldw	r2,-8(fp)
   11660:	1809883a 	mov	r4,r3
   11664:	e17fff17 	ldw	r5,-4(fp)
   11668:	100d883a 	mov	r6,r2
   1166c:	001186c0 	call	1186c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   11670:	1000021e 	bne	r2,zero,1167c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   11674:	e0bffd17 	ldw	r2,-12(fp)
   11678:	00000806 	br	1169c <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   1167c:	e0bffd17 	ldw	r2,-12(fp)
   11680:	10800017 	ldw	r2,0(r2)
   11684:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   11688:	e0fffd17 	ldw	r3,-12(fp)
   1168c:	00800074 	movhi	r2,1
   11690:	10902d04 	addi	r2,r2,16564
   11694:	18bfcb1e 	bne	r3,r2,115c4 <__alt_data_end+0xfffbbe94>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   11698:	0005883a 	mov	r2,zero
}
   1169c:	e037883a 	mov	sp,fp
   116a0:	dfc00117 	ldw	ra,4(sp)
   116a4:	df000017 	ldw	fp,0(sp)
   116a8:	dec00204 	addi	sp,sp,8
   116ac:	f800283a 	ret

000116b0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   116b0:	defffa04 	addi	sp,sp,-24
   116b4:	dfc00515 	stw	ra,20(sp)
   116b8:	df000415 	stw	fp,16(sp)
   116bc:	dc000315 	stw	r16,12(sp)
   116c0:	df000404 	addi	fp,sp,16
   116c4:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   116c8:	00bffa04 	movi	r2,-24
   116cc:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   116d0:	e03ffc15 	stw	zero,-16(fp)
   116d4:	00002106 	br	1175c <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   116d8:	04000074 	movhi	r16,1
   116dc:	840baf04 	addi	r16,r16,11964
   116e0:	e0bffc17 	ldw	r2,-16(fp)
   116e4:	1009883a 	mov	r4,r2
   116e8:	01400304 	movi	r5,12
   116ec:	000cac00 	call	cac0 <__mulsi3>
   116f0:	8085883a 	add	r2,r16,r2
   116f4:	10800017 	ldw	r2,0(r2)
   116f8:	1000151e 	bne	r2,zero,11750 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   116fc:	04000074 	movhi	r16,1
   11700:	840baf04 	addi	r16,r16,11964
   11704:	e0bffc17 	ldw	r2,-16(fp)
   11708:	1009883a 	mov	r4,r2
   1170c:	01400304 	movi	r5,12
   11710:	000cac00 	call	cac0 <__mulsi3>
   11714:	8085883a 	add	r2,r16,r2
   11718:	e0fffe17 	ldw	r3,-8(fp)
   1171c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   11720:	00800074 	movhi	r2,1
   11724:	10903104 	addi	r2,r2,16580
   11728:	10c00017 	ldw	r3,0(r2)
   1172c:	e0bffc17 	ldw	r2,-16(fp)
   11730:	1880040e 	bge	r3,r2,11744 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   11734:	00800074 	movhi	r2,1
   11738:	10903104 	addi	r2,r2,16580
   1173c:	e0fffc17 	ldw	r3,-16(fp)
   11740:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   11744:	e0bffc17 	ldw	r2,-16(fp)
   11748:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   1174c:	00000606 	br	11768 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   11750:	e0bffc17 	ldw	r2,-16(fp)
   11754:	10800044 	addi	r2,r2,1
   11758:	e0bffc15 	stw	r2,-16(fp)
   1175c:	e0bffc17 	ldw	r2,-16(fp)
   11760:	10800810 	cmplti	r2,r2,32
   11764:	103fdc1e 	bne	r2,zero,116d8 <__alt_data_end+0xfffbbfa8>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   11768:	e0bffd17 	ldw	r2,-12(fp)
}
   1176c:	e6ffff04 	addi	sp,fp,-4
   11770:	dfc00217 	ldw	ra,8(sp)
   11774:	df000117 	ldw	fp,4(sp)
   11778:	dc000017 	ldw	r16,0(sp)
   1177c:	dec00304 	addi	sp,sp,12
   11780:	f800283a 	ret

00011784 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   11784:	defffe04 	addi	sp,sp,-8
   11788:	df000115 	stw	fp,4(sp)
   1178c:	df000104 	addi	fp,sp,4
   11790:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   11794:	e0bfff17 	ldw	r2,-4(fp)
   11798:	10bffe84 	addi	r2,r2,-6
   1179c:	10c00428 	cmpgeui	r3,r2,16
   117a0:	18001a1e 	bne	r3,zero,1180c <alt_exception_cause_generated_bad_addr+0x88>
   117a4:	100690ba 	slli	r3,r2,2
   117a8:	00800074 	movhi	r2,1
   117ac:	1085ef04 	addi	r2,r2,6076
   117b0:	1885883a 	add	r2,r3,r2
   117b4:	10800017 	ldw	r2,0(r2)
   117b8:	1000683a 	jmp	r2
   117bc:	000117fc 	xorhi	zero,zero,1119
   117c0:	000117fc 	xorhi	zero,zero,1119
   117c4:	0001180c 	andi	zero,zero,1120
   117c8:	0001180c 	andi	zero,zero,1120
   117cc:	0001180c 	andi	zero,zero,1120
   117d0:	000117fc 	xorhi	zero,zero,1119
   117d4:	00011804 	movi	zero,1120
   117d8:	0001180c 	andi	zero,zero,1120
   117dc:	000117fc 	xorhi	zero,zero,1119
   117e0:	000117fc 	xorhi	zero,zero,1119
   117e4:	0001180c 	andi	zero,zero,1120
   117e8:	000117fc 	xorhi	zero,zero,1119
   117ec:	00011804 	movi	zero,1120
   117f0:	0001180c 	andi	zero,zero,1120
   117f4:	0001180c 	andi	zero,zero,1120
   117f8:	000117fc 	xorhi	zero,zero,1119
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   117fc:	00800044 	movi	r2,1
   11800:	00000306 	br	11810 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   11804:	0005883a 	mov	r2,zero
   11808:	00000106 	br	11810 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   1180c:	0005883a 	mov	r2,zero
  }
}
   11810:	e037883a 	mov	sp,fp
   11814:	df000017 	ldw	fp,0(sp)
   11818:	dec00104 	addi	sp,sp,4
   1181c:	f800283a 	ret

00011820 <atexit>:
   11820:	200b883a 	mov	r5,r4
   11824:	000d883a 	mov	r6,zero
   11828:	0009883a 	mov	r4,zero
   1182c:	000f883a 	mov	r7,zero
   11830:	00118e81 	jmpi	118e8 <__register_exitproc>

00011834 <exit>:
   11834:	defffe04 	addi	sp,sp,-8
   11838:	000b883a 	mov	r5,zero
   1183c:	dc000015 	stw	r16,0(sp)
   11840:	dfc00115 	stw	ra,4(sp)
   11844:	2021883a 	mov	r16,r4
   11848:	00119fc0 	call	119fc <__call_exitprocs>
   1184c:	00800074 	movhi	r2,1
   11850:	10902904 	addi	r2,r2,16548
   11854:	11000017 	ldw	r4,0(r2)
   11858:	20800f17 	ldw	r2,60(r4)
   1185c:	10000126 	beq	r2,zero,11864 <exit+0x30>
   11860:	103ee83a 	callr	r2
   11864:	8009883a 	mov	r4,r16
   11868:	0011b900 	call	11b90 <_exit>

0001186c <memcmp>:
   1186c:	01c000c4 	movi	r7,3
   11870:	3980192e 	bgeu	r7,r6,118d8 <memcmp+0x6c>
   11874:	2144b03a 	or	r2,r4,r5
   11878:	11c4703a 	and	r2,r2,r7
   1187c:	10000f26 	beq	r2,zero,118bc <memcmp+0x50>
   11880:	20800003 	ldbu	r2,0(r4)
   11884:	28c00003 	ldbu	r3,0(r5)
   11888:	10c0151e 	bne	r2,r3,118e0 <memcmp+0x74>
   1188c:	31bfff84 	addi	r6,r6,-2
   11890:	01ffffc4 	movi	r7,-1
   11894:	00000406 	br	118a8 <memcmp+0x3c>
   11898:	20800003 	ldbu	r2,0(r4)
   1189c:	28c00003 	ldbu	r3,0(r5)
   118a0:	31bfffc4 	addi	r6,r6,-1
   118a4:	10c00e1e 	bne	r2,r3,118e0 <memcmp+0x74>
   118a8:	21000044 	addi	r4,r4,1
   118ac:	29400044 	addi	r5,r5,1
   118b0:	31fff91e 	bne	r6,r7,11898 <__alt_data_end+0xfffbc168>
   118b4:	0005883a 	mov	r2,zero
   118b8:	f800283a 	ret
   118bc:	20c00017 	ldw	r3,0(r4)
   118c0:	28800017 	ldw	r2,0(r5)
   118c4:	1880041e 	bne	r3,r2,118d8 <memcmp+0x6c>
   118c8:	31bfff04 	addi	r6,r6,-4
   118cc:	21000104 	addi	r4,r4,4
   118d0:	29400104 	addi	r5,r5,4
   118d4:	39bff936 	bltu	r7,r6,118bc <__alt_data_end+0xfffbc18c>
   118d8:	303fe91e 	bne	r6,zero,11880 <__alt_data_end+0xfffbc150>
   118dc:	003ff506 	br	118b4 <__alt_data_end+0xfffbc184>
   118e0:	10c5c83a 	sub	r2,r2,r3
   118e4:	f800283a 	ret

000118e8 <__register_exitproc>:
   118e8:	00800074 	movhi	r2,1
   118ec:	defffa04 	addi	sp,sp,-24
   118f0:	10902904 	addi	r2,r2,16548
   118f4:	dc000315 	stw	r16,12(sp)
   118f8:	14000017 	ldw	r16,0(r2)
   118fc:	dc400415 	stw	r17,16(sp)
   11900:	dfc00515 	stw	ra,20(sp)
   11904:	80805217 	ldw	r2,328(r16)
   11908:	2023883a 	mov	r17,r4
   1190c:	10003626 	beq	r2,zero,119e8 <__register_exitproc+0x100>
   11910:	10c00117 	ldw	r3,4(r2)
   11914:	010007c4 	movi	r4,31
   11918:	20c00e16 	blt	r4,r3,11954 <__register_exitproc+0x6c>
   1191c:	1a400044 	addi	r9,r3,1
   11920:	8800211e 	bne	r17,zero,119a8 <__register_exitproc+0xc0>
   11924:	18c00084 	addi	r3,r3,2
   11928:	18c7883a 	add	r3,r3,r3
   1192c:	18c7883a 	add	r3,r3,r3
   11930:	12400115 	stw	r9,4(r2)
   11934:	10c7883a 	add	r3,r2,r3
   11938:	19400015 	stw	r5,0(r3)
   1193c:	0005883a 	mov	r2,zero
   11940:	dfc00517 	ldw	ra,20(sp)
   11944:	dc400417 	ldw	r17,16(sp)
   11948:	dc000317 	ldw	r16,12(sp)
   1194c:	dec00604 	addi	sp,sp,24
   11950:	f800283a 	ret
   11954:	00800034 	movhi	r2,0
   11958:	108a5604 	addi	r2,r2,10584
   1195c:	10002526 	beq	r2,zero,119f4 <__register_exitproc+0x10c>
   11960:	01006404 	movi	r4,400
   11964:	d9400015 	stw	r5,0(sp)
   11968:	d9800115 	stw	r6,4(sp)
   1196c:	d9c00215 	stw	r7,8(sp)
   11970:	00029580 	call	2958 <malloc>
   11974:	d9400017 	ldw	r5,0(sp)
   11978:	d9800117 	ldw	r6,4(sp)
   1197c:	d9c00217 	ldw	r7,8(sp)
   11980:	10001c26 	beq	r2,zero,119f4 <__register_exitproc+0x10c>
   11984:	80c05217 	ldw	r3,328(r16)
   11988:	10000115 	stw	zero,4(r2)
   1198c:	02400044 	movi	r9,1
   11990:	10c00015 	stw	r3,0(r2)
   11994:	80805215 	stw	r2,328(r16)
   11998:	10006215 	stw	zero,392(r2)
   1199c:	10006315 	stw	zero,396(r2)
   119a0:	0007883a 	mov	r3,zero
   119a4:	883fdf26 	beq	r17,zero,11924 <__alt_data_end+0xfffbc1f4>
   119a8:	18d1883a 	add	r8,r3,r3
   119ac:	4211883a 	add	r8,r8,r8
   119b0:	1211883a 	add	r8,r2,r8
   119b4:	41802215 	stw	r6,136(r8)
   119b8:	01000044 	movi	r4,1
   119bc:	11806217 	ldw	r6,392(r2)
   119c0:	20c8983a 	sll	r4,r4,r3
   119c4:	310cb03a 	or	r6,r6,r4
   119c8:	11806215 	stw	r6,392(r2)
   119cc:	41c04215 	stw	r7,264(r8)
   119d0:	01800084 	movi	r6,2
   119d4:	89bfd31e 	bne	r17,r6,11924 <__alt_data_end+0xfffbc1f4>
   119d8:	11806317 	ldw	r6,396(r2)
   119dc:	3108b03a 	or	r4,r6,r4
   119e0:	11006315 	stw	r4,396(r2)
   119e4:	003fcf06 	br	11924 <__alt_data_end+0xfffbc1f4>
   119e8:	80805304 	addi	r2,r16,332
   119ec:	80805215 	stw	r2,328(r16)
   119f0:	003fc706 	br	11910 <__alt_data_end+0xfffbc1e0>
   119f4:	00bfffc4 	movi	r2,-1
   119f8:	003fd106 	br	11940 <__alt_data_end+0xfffbc210>

000119fc <__call_exitprocs>:
   119fc:	00800074 	movhi	r2,1
   11a00:	10902904 	addi	r2,r2,16548
   11a04:	10800017 	ldw	r2,0(r2)
   11a08:	defff404 	addi	sp,sp,-48
   11a0c:	dd800815 	stw	r22,32(sp)
   11a10:	d8800015 	stw	r2,0(sp)
   11a14:	10805204 	addi	r2,r2,328
   11a18:	dd000615 	stw	r20,24(sp)
   11a1c:	dc800415 	stw	r18,16(sp)
   11a20:	dfc00b15 	stw	ra,44(sp)
   11a24:	df000a15 	stw	fp,40(sp)
   11a28:	ddc00915 	stw	r23,36(sp)
   11a2c:	dd400715 	stw	r21,28(sp)
   11a30:	dcc00515 	stw	r19,20(sp)
   11a34:	dc400315 	stw	r17,12(sp)
   11a38:	dc000215 	stw	r16,8(sp)
   11a3c:	2025883a 	mov	r18,r4
   11a40:	2829883a 	mov	r20,r5
   11a44:	d8800115 	stw	r2,4(sp)
   11a48:	05bfffc4 	movi	r22,-1
   11a4c:	d8800017 	ldw	r2,0(sp)
   11a50:	14c05217 	ldw	r19,328(r2)
   11a54:	98001d26 	beq	r19,zero,11acc <__call_exitprocs+0xd0>
   11a58:	dd400117 	ldw	r21,4(sp)
   11a5c:	98800117 	ldw	r2,4(r19)
   11a60:	173fffc4 	addi	fp,r2,-1
   11a64:	e0000d16 	blt	fp,zero,11a9c <__call_exitprocs+0xa0>
   11a68:	14000044 	addi	r16,r2,1
   11a6c:	8421883a 	add	r16,r16,r16
   11a70:	8421883a 	add	r16,r16,r16
   11a74:	84402004 	addi	r17,r16,128
   11a78:	9c63883a 	add	r17,r19,r17
   11a7c:	9c21883a 	add	r16,r19,r16
   11a80:	a0001e26 	beq	r20,zero,11afc <__call_exitprocs+0x100>
   11a84:	80804017 	ldw	r2,256(r16)
   11a88:	15001c26 	beq	r2,r20,11afc <__call_exitprocs+0x100>
   11a8c:	e73fffc4 	addi	fp,fp,-1
   11a90:	843fff04 	addi	r16,r16,-4
   11a94:	8c7fff04 	addi	r17,r17,-4
   11a98:	e5bff91e 	bne	fp,r22,11a80 <__alt_data_end+0xfffbc350>
   11a9c:	00800034 	movhi	r2,0
   11aa0:	108a5b04 	addi	r2,r2,10604
   11aa4:	10000926 	beq	r2,zero,11acc <__call_exitprocs+0xd0>
   11aa8:	98800117 	ldw	r2,4(r19)
   11aac:	1000311e 	bne	r2,zero,11b74 <__call_exitprocs+0x178>
   11ab0:	98800017 	ldw	r2,0(r19)
   11ab4:	10003426 	beq	r2,zero,11b88 <__call_exitprocs+0x18c>
   11ab8:	9809883a 	mov	r4,r19
   11abc:	a8800015 	stw	r2,0(r21)
   11ac0:	000296c0 	call	296c <free>
   11ac4:	acc00017 	ldw	r19,0(r21)
   11ac8:	983fe41e 	bne	r19,zero,11a5c <__alt_data_end+0xfffbc32c>
   11acc:	dfc00b17 	ldw	ra,44(sp)
   11ad0:	df000a17 	ldw	fp,40(sp)
   11ad4:	ddc00917 	ldw	r23,36(sp)
   11ad8:	dd800817 	ldw	r22,32(sp)
   11adc:	dd400717 	ldw	r21,28(sp)
   11ae0:	dd000617 	ldw	r20,24(sp)
   11ae4:	dcc00517 	ldw	r19,20(sp)
   11ae8:	dc800417 	ldw	r18,16(sp)
   11aec:	dc400317 	ldw	r17,12(sp)
   11af0:	dc000217 	ldw	r16,8(sp)
   11af4:	dec00c04 	addi	sp,sp,48
   11af8:	f800283a 	ret
   11afc:	98800117 	ldw	r2,4(r19)
   11b00:	80c00017 	ldw	r3,0(r16)
   11b04:	10bfffc4 	addi	r2,r2,-1
   11b08:	17001526 	beq	r2,fp,11b60 <__call_exitprocs+0x164>
   11b0c:	80000015 	stw	zero,0(r16)
   11b10:	183fde26 	beq	r3,zero,11a8c <__alt_data_end+0xfffbc35c>
   11b14:	00800044 	movi	r2,1
   11b18:	1708983a 	sll	r4,r2,fp
   11b1c:	98806217 	ldw	r2,392(r19)
   11b20:	9dc00117 	ldw	r23,4(r19)
   11b24:	2084703a 	and	r2,r4,r2
   11b28:	1000061e 	bne	r2,zero,11b44 <__call_exitprocs+0x148>
   11b2c:	183ee83a 	callr	r3
   11b30:	98800117 	ldw	r2,4(r19)
   11b34:	15ffc51e 	bne	r2,r23,11a4c <__alt_data_end+0xfffbc31c>
   11b38:	a8800017 	ldw	r2,0(r21)
   11b3c:	14ffd326 	beq	r2,r19,11a8c <__alt_data_end+0xfffbc35c>
   11b40:	003fc206 	br	11a4c <__alt_data_end+0xfffbc31c>
   11b44:	98806317 	ldw	r2,396(r19)
   11b48:	2084703a 	and	r2,r4,r2
   11b4c:	1000061e 	bne	r2,zero,11b68 <__call_exitprocs+0x16c>
   11b50:	89400017 	ldw	r5,0(r17)
   11b54:	9009883a 	mov	r4,r18
   11b58:	183ee83a 	callr	r3
   11b5c:	003ff406 	br	11b30 <__alt_data_end+0xfffbc400>
   11b60:	9f000115 	stw	fp,4(r19)
   11b64:	003fea06 	br	11b10 <__alt_data_end+0xfffbc3e0>
   11b68:	89000017 	ldw	r4,0(r17)
   11b6c:	183ee83a 	callr	r3
   11b70:	003fef06 	br	11b30 <__alt_data_end+0xfffbc400>
   11b74:	98800017 	ldw	r2,0(r19)
   11b78:	982b883a 	mov	r21,r19
   11b7c:	1027883a 	mov	r19,r2
   11b80:	983fb61e 	bne	r19,zero,11a5c <__alt_data_end+0xfffbc32c>
   11b84:	003fd106 	br	11acc <__alt_data_end+0xfffbc39c>
   11b88:	0005883a 	mov	r2,zero
   11b8c:	003ffa06 	br	11b78 <__alt_data_end+0xfffbc448>

00011b90 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   11b90:	defffd04 	addi	sp,sp,-12
   11b94:	df000215 	stw	fp,8(sp)
   11b98:	df000204 	addi	fp,sp,8
   11b9c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   11ba0:	0001883a 	nop
   11ba4:	e0bfff17 	ldw	r2,-4(fp)
   11ba8:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   11bac:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   11bb0:	10000226 	beq	r2,zero,11bbc <_exit+0x2c>
    ALT_SIM_FAIL();
   11bb4:	002af070 	cmpltui	zero,zero,43969
   11bb8:	00000106 	br	11bc0 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   11bbc:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   11bc0:	003fff06 	br	11bc0 <__alt_data_end+0xfffbc490>
