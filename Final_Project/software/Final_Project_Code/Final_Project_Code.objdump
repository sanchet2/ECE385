
Final_Project_Code.elf:     file format elf32-littlenios2
Final_Project_Code.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0000022c

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0001258c memsz 0x0001258c flags r-x
    LOAD off    0x000135ac vaddr 0x000125ac paddr 0x00014098 align 2**12
         filesz 0x00001aec memsz 0x00001aec flags rw-
    LOAD off    0x00015b84 vaddr 0x00015b84 paddr 0x00015b84 align 2**12
         filesz 0x00000000 memsz 0x00000180 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000020c  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00011968  0000022c  0000022c  0000122c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000a18  00011b94  00011b94  00012b94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aec  000125ac  00014098  000135ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000180  00015b84  00015b84  00015b84  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00015d04  00015d04  00015098  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00015098  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000d90  00000000  00000000  000150c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002456b  00000000  00000000  00015e50  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000935b  00000000  00000000  0003a3bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000b526  00000000  00000000  00043716  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002514  00000000  00000000  0004ec3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003932  00000000  00000000  00051150  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00016da4  00000000  00000000  00054a82  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  0006b828  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001388  00000000  00000000  0006b868  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00070232  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00070235  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00070241  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00070242  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00070243  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00070247  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0007024b  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  0007024f  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  0007025a  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  00070265  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  00070270  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000003b  00000000  00000000  0007027b  2**0
                  CONTENTS, READONLY
 29 .jdi          0000444b  00000000  00000000  000702b6  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00083150  00000000  00000000  00074701  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
0000022c l    d  .text	00000000 .text
00011b94 l    d  .rodata	00000000 .rodata
000125ac l    d  .rwdata	00000000 .rwdata
00015b84 l    d  .bss	00000000 .bss
00015d04 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Final_Project_Code_bsp//obj/HAL/src/crt0.o
00000264 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 io_handler.c
00000000 l    df *ABS*	00000000 keyboard_functions.c
00015b84 l     O .bss	00000002 ctl_reg
00015b86 l     O .bss	00000002 no_device
00000000 l    df *ABS*	00000000 main.c
00015ba0 l     O .bss	00000004 projectiles
00000000 l    df *ABS*	00000000 play_game.c
00000000 l    df *ABS*	00000000 usb.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000122f2 l     O .rodata	00000010 zeroes.4181
00012302 l     O .rodata	00000010 blanks.4180
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00005568 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00007110 l     F .text	00000008 __fp_lock
00007118 l     F .text	00000008 __fp_unlock
0000712c l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
000129b4 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
00012df8 l     O .rwdata	00000020 lc_ctype_charset
00012dd8 l     O .rwdata	00000020 lc_message_charset
00012e18 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00012334 l     O .rodata	0000000c p05.2678
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00009e60 l     F .text	000000fc __sprint_r.part.0
00012468 l     O .rodata	00000010 blanks.4125
00012458 l     O .rodata	00000010 zeroes.4126
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0000c964 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0000f2b4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000f3dc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000f408 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000f510 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000f60c l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000f6f0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000f8d4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00014088 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0000fb88 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000fcd8 l     F .text	00000038 alt_dev_reg
00012ff8 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000ffb4 l     F .text	00000204 altera_avalon_jtag_uart_irq
000101b8 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00010a8c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00010f24 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0001107c l     F .text	00000050 alt_get_errno
000110cc l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00015bd8 g     O .bss	00000004 alt_instruction_exception_handler
000094f4 g     F .text	00000074 _mprec_log10
000095e0 g     F .text	0000008c __any_on
0000b88c g     F .text	00000054 _isatty_r
00012340 g     O .rodata	00000028 __mprec_tinytens
0000f81c g     F .text	00000078 alt_main
00003160 g     F .text	000000b8 _puts_r
00015c04 g     O .bss	00000100 alt_irq
0000b8e0 g     F .text	0000005c _lseek_r
00014098 g       *ABS*	00000000 __flash_rwdata_start
0000dcd4 g     F .text	00000084 .hidden __eqdf2
00015d04 g       *ABS*	00000000 __alt_heap_start
00003124 g     F .text	0000003c printf
0000bb08 g     F .text	0000009c _wcrtomb_r
00015b94 g     O .bss	00000002 usb_ctl_val
00009d58 g     F .text	0000005c __sseek
00007474 g     F .text	00000010 __sinit
00015b8c g     O .bss	00000004 keycode
0000b998 g     F .text	00000154 __swbuf_r
00007eec g     F .text	0000007c _setlocale_r
000072cc g     F .text	00000078 __sfmoreglue
0000f8b4 g     F .text	00000020 __malloc_unlock
0000282c g     F .text	00000080 UsbGetRetryCnt
000083a4 g     F .text	0000015c memmove
00000268 g     F .text	00000060 IO_init
0000745c g     F .text	00000018 _cleanup
00008624 g     F .text	000000a8 _Balloc
0000dd58 g     F .text	000000e0 .hidden __gtdf2
000114bc g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
0000b834 g     F .text	00000058 _fstat_r
00015bb0 g     O .bss	00000004 errno
00009cd4 g     F .text	00000008 __seofread
00000394 g     F .text	0000030c get_keycode
00015bc4 g     O .bss	00000004 alt_argv
0001c058 g       *ABS*	00000000 _gp
0000fb58 g     F .text	00000030 usleep
00012e78 g     O .rwdata	00000180 alt_fd_list
000114dc g     F .text	00000090 alt_find_dev
0000826c g     F .text	00000138 memcpy
00001550 g     F .text	00000080 fire_projectile
00007120 g     F .text	0000000c _cleanup_r
0000f0dc g     F .text	000000d0 .hidden __floatsidf
00011004 g     F .text	00000078 alt_io_redirect
00015b96 g     O .bss	00000001 data_size
0000de38 g     F .text	000000e0 .hidden __ltdf2
00011b94 g       *ABS*	00000000 __DTOR_END__
00003218 g     F .text	00000014 puts
00011754 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00009c0c g     F .text	00000074 __fpclassifyd
00009450 g     F .text	000000a4 __ratio
0000b398 g     F .text	00000024 __vfiprintf_internal
000103b4 g     F .text	0000020c altera_avalon_jtag_uart_read
00002928 g     F .text	00000014 malloc
000030f8 g     F .text	0000002c _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0000ca80 g     F .text	00000008 .hidden __udivsi3
0000f560 g     F .text	000000ac isatty
00012390 g     O .rodata	000000c8 __mprec_tens
00007f68 g     F .text	0000000c __locale_charset
00015bac g     O .bss	00000004 __malloc_top_pad
00001ecc g     F .text	00000264 UsbGetConfigDesc2
00014068 g     O .rwdata	00000004 __mb_cur_max
00007f98 g     F .text	0000000c _localeconv_r
00008a4c g     F .text	0000003c __i2b
000078d8 g     F .text	000004a4 __sfvwrite_r
00015b98 g     O .bss	00000002 intStat
0000322c g     F .text	00000054 _sbrk_r
0000b93c g     F .text	0000005c _read_r
00014080 g     O .rwdata	00000004 alt_max_fd
0000b544 g     F .text	00000100 _fclose_r
000070e0 g     F .text	00000030 fflush
00015ba8 g     O .bss	00000004 __malloc_max_sbrked_mem
000011c8 g     F .text	000000a0 render_shadows
0000cab8 g     F .text	0000089c .hidden __adddf3
000091f8 g     F .text	0000011c __b2d
0000c348 g     F .text	0000061c .hidden __umoddi3
0000f740 g     F .text	000000dc lseek
00014060 g     O .rwdata	00000004 _global_impure_ptr
0000966c g     F .text	000005a0 _realloc_r
00015d04 g       *ABS*	00000000 __bss_end
00010e34 g     F .text	000000f0 alt_iic_isr_register
000113b8 g     F .text	00000104 alt_tick
0000bd08 g     F .text	00000640 .hidden __udivdi3
0000b658 g     F .text	00000184 _fputwc_r
00012368 g     O .rodata	00000028 __mprec_bigtens
00008830 g     F .text	00000104 __s2b
0000f1ac g     F .text	000000a4 .hidden __floatunsidf
00008fa0 g     F .text	00000060 __mcmp
0000192c g     F .text	000000fc UsbSetAddress
00007494 g     F .text	00000018 __fp_lock_all
00010de8 g     F .text	0000004c alt_ic_irq_enabled
00011320 g     F .text	00000098 alt_alarm_stop
00015bcc g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	000000d0 alt_irq_handler
00012e50 g     O .rwdata	00000028 alt_dev_null
000015ec g     F .text	000000ac init_players
00010a70 g     F .text	0000001c alt_dcache_flush_all
00008934 g     F .text	00000068 __hi0bits
00000330 g     F .text	00000064 IO_read
0000f054 g     F .text	00000088 .hidden __fixdfsi
00014098 g       *ABS*	00000000 __ram_rwdata_end
00014078 g     O .rwdata	00000008 alt_dev_list
0000fbd8 g     F .text	00000100 write
000125ac g       *ABS*	00000000 __ram_rodata_end
0000f458 g     F .text	000000b8 fstat
0000de38 g     F .text	000000e0 .hidden __ledf2
000028ac g     F .text	0000007c UsbPrintMem
00008d18 g     F .text	00000140 __pow5mult
00009f74 g     F .text	00001424 ___vfiprintf_internal_r
00015bbc g     O .bss	00000004 __nlocale_changed
0000ca88 g     F .text	00000008 .hidden __umodsi3
00015d04 g       *ABS*	00000000 end
0000fef0 g     F .text	000000c4 altera_avalon_jtag_uart_init
000001cc g     F .exceptions	00000060 alt_instruction_exception_entry
00011b94 g       *ABS*	00000000 __CTOR_LIST__
00055730 g       *ABS*	00000000 __alt_stack_pointer
0000f250 g     F .text	00000064 .hidden __clzsi2
000105c0 g     F .text	00000218 altera_avalon_jtag_uart_write
00007484 g     F .text	00000004 __sfp_lock_acquire
00008184 g     F .text	000000e8 memchr
00003318 g     F .text	000020fc ___vfprintf_internal_r
0000222c g     F .text	000000fc UsbClassRequest
000075e8 g     F .text	000002f0 _free_r
00007f74 g     F .text	00000010 __locale_mb_cur_max
000119cc g     F .text	00000194 __call_exitprocs
00015bb8 g     O .bss	00000004 __mlocale_changed
00014058 g     O .rwdata	00000004 __malloc_sbrk_base
0000022c g     F .text	0000003c _start
00015bd0 g     O .bss	00000004 _alt_tick_rate
00008e58 g     F .text	00000148 __lshift
00015bd4 g     O .bss	00000004 _alt_nticks
0000f924 g     F .text	00000104 read
0000fd44 g     F .text	00000048 alt_sys_init
000118b8 g     F .text	00000114 __register_exitproc
00008a88 g     F .text	00000290 __multiply
00010260 g     F .text	00000068 altera_avalon_jtag_uart_close
000010ac g     F .text	0000011c renderer
0000ca90 g     F .text	00000028 .hidden __mulsi3
000125ac g       *ABS*	00000000 __ram_rwdata_start
00011b94 g       *ABS*	00000000 __ram_rodata_start
00015bdc g     O .bss	00000028 __malloc_current_mallinfo
000006a0 g     F .text	00000a0c setup_keyboard
00009314 g     F .text	0000013c __d2b
00001a28 g     F .text	00000144 UsbGetDeviceDesc1
0000fd8c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00011680 g     F .text	000000d4 alt_get_fd
00010918 g     F .text	00000158 alt_busy_sleep
0000b418 g     F .text	00000054 _close_r
00001698 g     F .text	000000b0 move_player
0001183c g     F .text	0000007c memcmp
0000fe4c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00015d04 g       *ABS*	00000000 __alt_stack_base
0000fe9c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00005438 g     F .text	00000130 __swsetup_r
0000d354 g     F .text	00000980 .hidden __divdf3
00007344 g     F .text	00000118 __sfp
00009568 g     F .text	00000078 __copybits
000125ac g     O .rwdata	00000408 __malloc_av_
00007490 g     F .text	00000004 __sinit_lock_release
0000df18 g     F .text	0000086c .hidden __muldf3
00009c80 g     F .text	00000054 __sread
000027a8 g     F .text	00000084 UsbWaitTDListDone
0001156c g     F .text	00000114 alt_find_file
00010adc g     F .text	000000a4 alt_dev_llist_insert
0000f894 g     F .text	00000020 __malloc_lock
0000faa8 g     F .text	000000b0 sbrk
00006eb8 g     F .text	00000228 _fflush_r
0000b46c g     F .text	000000d8 _calloc_r
00015b9a g     O .bss	00000001 hot_plug_count
00015b84 g       *ABS*	00000000 __bss_start
00008500 g     F .text	00000124 memset
00001748 g     F .text	0000009c main
00015bc8 g     O .bss	00000004 alt_envp
00015ba4 g     O .bss	00000004 __malloc_max_total_mem
0000fdec g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00002130 g     F .text	000000fc UsbSetConfig
0000baec g     F .text	0000001c __swbuf
00009db4 g     F .text	00000008 __sclose
00055730 g       *ABS*	00000000 __alt_heap_limit
0000b644 g     F .text	00000014 fclose
00005790 g     F .text	00001728 _dtoa_r
00002950 g     F .text	000007a8 _malloc_r
0000bc7c g     F .text	00000030 __ascii_wctomb
00014084 g     O .rwdata	00000004 alt_errno
00007d7c g     F .text	000000b8 _fwalk
0000c9d0 g     F .text	00000054 .hidden __divsi3
000074c4 g     F .text	00000124 _malloc_trim_r
00002328 g     F .text	00000144 UsbGetHidDesc
00011b94 g       *ABS*	00000000 __CTOR_END__
00009dbc g     F .text	000000a4 strcmp
00011b94 g       *ABS*	00000000 __flash_rodata_start
00011b94 g       *ABS*	00000000 __DTOR_LIST__
0000dcd4 g     F .text	00000084 .hidden __nedf2
00001838 g     F .text	00000044 UsbRead
000014dc g     F .text	00000074 parse_keycode
0000fd10 g     F .text	00000034 alt_irq_init
0000fa28 g     F .text	00000080 alt_release_fd
00012478 g     O .rodata	00000100 .hidden __clz_tab
00015bb4 g     O .bss	00000004 _PathLocale
000117f0 g     F .text	00000014 atexit
0000b3bc g     F .text	0000005c _write_r
00007fa4 g     F .text	0000001c setlocale
00014064 g     O .rwdata	00000004 _impure_ptr
00015bc0 g     O .bss	00000004 alt_argc
00010bdc g     F .text	0000005c _do_dtors
00007f90 g     F .text	00000008 __locale_cjk_lang
000015d0 g     F .text	0000001c check_projectiles
00000020 g       .exceptions	00000000 alt_irq_entry
00009198 g     F .text	00000060 __ulp
000074ac g     F .text	00000018 __fp_unlock_all
00015b90 g     O .bss	00000001 toggle
00001268 g     F .text	000000a8 render_players
00014070 g     O .rwdata	00000008 alt_fs_list
0000246c g     F .text	0000033c UsbGetReportDesc
00000020 g       *ABS*	00000000 __ram_exceptions_start
00007fc0 g     F .text	0000000c localeconv
00010c54 g     F .text	00000050 alt_ic_isr_register
00014098 g       *ABS*	00000000 _edata
00015d04 g       *ABS*	00000000 _end
000017e4 g     F .text	00000054 UsbWrite
0000022c g       *ABS*	00000000 __ram_exceptions_end
000102c8 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
00015b9c g     O .bss	00000002 code
00010d44 g     F .text	000000a4 alt_ic_irq_disable
00009cdc g     F .text	0000007c __swrite
0001405c g     O .rwdata	00000004 __malloc_trim_threshold
00007f84 g     F .text	0000000c __locale_msgcharset
00015b88 g     O .bss	00000002 fs_device
00011804 g     F .text	00000038 exit
00007e34 g     F .text	000000b8 _fwalk_reent
00009000 g     F .text	00000198 __mdiff
0000ca24 g     F .text	0000005c .hidden __modsi3
00055730 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00007488 g     F .text	00000004 __sfp_lock_release
000002c8 g     F .text	00000068 IO_write
00011b60 g     F .text	00000034 _exit
000107d8 g     F .text	00000140 alt_alarm_start
00007fcc g     F .text	000001b8 __smakebuf_r
00003280 g     F .text	00000098 strlen
000111c0 g     F .text	00000160 open
0000dd58 g     F .text	000000e0 .hidden __gedf2
0001406c g     O .rwdata	00000004 __wctomb
00009f5c g     F .text	00000018 __sprint_r
00010c38 g     F .text	0000001c alt_icache_flush_all
0001408c g     O .rwdata	00000004 alt_priority_mask
00010ca4 g     F .text	000000a0 alt_ic_irq_enable
00005414 g     F .text	00000024 __vfprintf_internal
0000bcac g     F .text	0000005c _wctomb_r
0000e784 g     F .text	000008d0 .hidden __subdf3
00001310 g     F .text	000001cc keycode_effect
0000899c g     F .text	000000b0 __lo0bits
00001d40 g     F .text	0000018c UsbGetConfigDesc1
00014090 g     O .rwdata	00000008 alt_alarm_list
00010b80 g     F .text	0000005c _do_ctors
0000187c g     F .text	000000b0 UsbSoftReset
0000bba4 g     F .text	000000d8 wcrtomb
0000f304 g     F .text	000000d8 close
00001b6c g     F .text	000001d4 UsbGetDeviceDesc2
0000f670 g     F .text	00000080 alt_load
0000b7dc g     F .text	00000058 fputwc
0000293c g     F .text	00000014 free
0000748c g     F .text	00000004 __sinit_lock_acquire
000086f4 g     F .text	0000013c __multadd
000086cc g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08408b14 	ori	at,at,556
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001cc0 	call	1cc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	00800074 	movhi	r2,1
 140:	10970104 	addi	r2,r2,23556
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	00800074 	movhi	r2,1
 158:	10970104 	addi	r2,r2,23556
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <__alt_data_end+0xfffaa9fc>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <__alt_data_end+0xfffaa9f0>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0001883a 	nop
}
 1b8:	e037883a 	mov	sp,fp
 1bc:	dfc00117 	ldw	ra,4(sp)
 1c0:	df000017 	ldw	fp,0(sp)
 1c4:	dec00204 	addi	sp,sp,8
 1c8:	f800283a 	ret

000001cc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1cc:	defffb04 	addi	sp,sp,-20
 1d0:	dfc00415 	stw	ra,16(sp)
 1d4:	df000315 	stw	fp,12(sp)
 1d8:	df000304 	addi	fp,sp,12
 1dc:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 1e0:	00bfffc4 	movi	r2,-1
 1e4:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 1e8:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1ec:	d0a6e017 	ldw	r2,-25728(gp)
 1f0:	10000726 	beq	r2,zero,210 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 1f4:	d0a6e017 	ldw	r2,-25728(gp)
 1f8:	e0fffd17 	ldw	r3,-12(fp)
 1fc:	1809883a 	mov	r4,r3
 200:	e17fff17 	ldw	r5,-4(fp)
 204:	e1bffe17 	ldw	r6,-8(fp)
 208:	103ee83a 	callr	r2
 20c:	00000206 	br	218 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 210:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 214:	0005883a 	mov	r2,zero
}
 218:	e037883a 	mov	sp,fp
 21c:	dfc00117 	ldw	ra,4(sp)
 220:	df000017 	ldw	fp,0(sp)
 224:	dec00204 	addi	sp,sp,8
 228:	f800283a 	ret

Disassembly of section .text:

0000022c <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     22c:	06c00174 	movhi	sp,5
    ori sp, sp, %lo(__alt_stack_pointer)
     230:	ded5cc14 	ori	sp,sp,22320
    movhi gp, %hi(_gp)
     234:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     238:	d6b01614 	ori	gp,gp,49240
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     23c:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     240:	1096e114 	ori	r2,r2,23428

    movhi r3, %hi(__bss_end)
     244:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     248:	18d74114 	ori	r3,r3,23812

    beq r2, r3, 1f
     24c:	10c00326 	beq	r2,r3,25c <_start+0x30>

0:
    stw zero, (r2)
     250:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     254:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     258:	10fffd36 	bltu	r2,r3,250 <__alt_data_end+0xfffaab20>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     25c:	000f6700 	call	f670 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     260:	000f81c0 	call	f81c <alt_main>

00000264 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     264:	003fff06 	br	264 <__alt_data_end+0xfffaab34>

00000268 <IO_init>:
#define otg_hpi_cs			(volatile char*)	OTG_HPI_CS_BASE //FOR SOME REASON CS BASE BEHAVES WEIRDLY MIGHT HAVE TO SET MANUALLY
#define otg_hpi_w			(volatile char*)	OTG_HPI_W_BASE


void IO_init(void)
{
     268:	deffff04 	addi	sp,sp,-4
     26c:	df000015 	stw	fp,0(sp)
     270:	d839883a 	mov	fp,sp
	*otg_hpi_cs = 0;
     274:	00800234 	movhi	r2,8
     278:	10841404 	addi	r2,r2,4176
     27c:	10000005 	stb	zero,0(r2)
	*otg_hpi_r = 1;
     280:	00800234 	movhi	r2,8
     284:	10840804 	addi	r2,r2,4128
     288:	00c00044 	movi	r3,1
     28c:	10c00005 	stb	r3,0(r2)
	*otg_hpi_w = 1;
     290:	00800234 	movhi	r2,8
     294:	10840404 	addi	r2,r2,4112
     298:	00c00044 	movi	r3,1
     29c:	10c00005 	stb	r3,0(r2)
	*otg_hpi_address = 0;
     2a0:	00800234 	movhi	r2,8
     2a4:	10841004 	addi	r2,r2,4160
     2a8:	10000015 	stw	zero,0(r2)
	*otg_hpi_data = 0;
     2ac:	00800234 	movhi	r2,8
     2b0:	10840c04 	addi	r2,r2,4144
     2b4:	10000015 	stw	zero,0(r2)
}
     2b8:	e037883a 	mov	sp,fp
     2bc:	df000017 	ldw	fp,0(sp)
     2c0:	dec00104 	addi	sp,sp,4
     2c4:	f800283a 	ret

000002c8 <IO_write>:

void IO_write(alt_u8 Address, alt_u16 Data)
{
     2c8:	defffd04 	addi	sp,sp,-12
     2cc:	df000215 	stw	fp,8(sp)
     2d0:	df000204 	addi	fp,sp,8
     2d4:	2007883a 	mov	r3,r4
     2d8:	2805883a 	mov	r2,r5
     2dc:	e0fffe05 	stb	r3,-8(fp)
     2e0:	e0bfff0d 	sth	r2,-4(fp)
	*otg_hpi_address = Address;
     2e4:	00800234 	movhi	r2,8
     2e8:	10841004 	addi	r2,r2,4160
     2ec:	e0fffe03 	ldbu	r3,-8(fp)
     2f0:	10c00015 	stw	r3,0(r2)
	*otg_hpi_data = Data;
     2f4:	00800234 	movhi	r2,8
     2f8:	10840c04 	addi	r2,r2,4144
     2fc:	e0ffff0b 	ldhu	r3,-4(fp)
     300:	10c00015 	stw	r3,0(r2)
	*otg_hpi_w = 0;
     304:	00800234 	movhi	r2,8
     308:	10840404 	addi	r2,r2,4112
     30c:	10000005 	stb	zero,0(r2)
	*otg_hpi_w = 1;
     310:	00800234 	movhi	r2,8
     314:	10840404 	addi	r2,r2,4112
     318:	00c00044 	movi	r3,1
     31c:	10c00005 	stb	r3,0(r2)
}
     320:	e037883a 	mov	sp,fp
     324:	df000017 	ldw	fp,0(sp)
     328:	dec00104 	addi	sp,sp,4
     32c:	f800283a 	ret

00000330 <IO_read>:

alt_u16 IO_read(alt_u8 Address)
{
     330:	defffd04 	addi	sp,sp,-12
     334:	df000215 	stw	fp,8(sp)
     338:	df000204 	addi	fp,sp,8
     33c:	2005883a 	mov	r2,r4
     340:	e0bfff05 	stb	r2,-4(fp)
	alt_u16 temp;
	*otg_hpi_address = Address;
     344:	00800234 	movhi	r2,8
     348:	10841004 	addi	r2,r2,4160
     34c:	e0ffff03 	ldbu	r3,-4(fp)
     350:	10c00015 	stw	r3,0(r2)
	*otg_hpi_r = 0;
     354:	00800234 	movhi	r2,8
     358:	10840804 	addi	r2,r2,4128
     35c:	10000005 	stb	zero,0(r2)
	temp = *otg_hpi_data;
     360:	00800234 	movhi	r2,8
     364:	10840c04 	addi	r2,r2,4144
     368:	10800017 	ldw	r2,0(r2)
     36c:	e0bffe0d 	sth	r2,-8(fp)
	*otg_hpi_r = 1;
     370:	00800234 	movhi	r2,8
     374:	10840804 	addi	r2,r2,4128
     378:	00c00044 	movi	r3,1
     37c:	10c00005 	stb	r3,0(r2)

	return temp;
     380:	e0bffe0b 	ldhu	r2,-8(fp)
}
     384:	e037883a 	mov	sp,fp
     388:	df000017 	ldw	fp,0(sp)
     38c:	dec00104 	addi	sp,sp,4
     390:	f800283a 	ret

00000394 <get_keycode>:
alt_u16 code;




int get_keycode(unsigned int *keycode1,unsigned int *keycode2){
     394:	defffc04 	addi	sp,sp,-16
     398:	dfc00315 	stw	ra,12(sp)
     39c:	df000215 	stw	fp,8(sp)
     3a0:	df000204 	addi	fp,sp,8
     3a4:	e13ffe15 	stw	r4,-8(fp)
     3a8:	e17fff15 	stw	r5,-4(fp)
				toggle++;
     3ac:	d0a6ce03 	ldbu	r2,-25800(gp)
     3b0:	10800044 	addi	r2,r2,1
     3b4:	d0a6ce05 	stb	r2,-25800(gp)
				IO_write(HPI_ADDR,0x0500); //the start address
     3b8:	01000084 	movi	r4,2
     3bc:	01414004 	movi	r5,1280
     3c0:	00002c80 	call	2c8 <IO_write>
				//data phase IN-1
				IO_write(HPI_DATA,0x051c); //500
     3c4:	0009883a 	mov	r4,zero
     3c8:	01414704 	movi	r5,1308
     3cc:	00002c80 	call	2c8 <IO_write>

				IO_write(HPI_DATA,0x000f & data_size);//2 data length
     3d0:	d0a6cf83 	ldbu	r2,-25794(gp)
     3d4:	10803fcc 	andi	r2,r2,255
     3d8:	108003cc 	andi	r2,r2,15
     3dc:	0009883a 	mov	r4,zero
     3e0:	100b883a 	mov	r5,r2
     3e4:	00002c80 	call	2c8 <IO_write>

				IO_write(HPI_DATA,0x0291);//4 //endpoint 1
     3e8:	0009883a 	mov	r4,zero
     3ec:	0140a444 	movi	r5,657
     3f0:	00002c80 	call	2c8 <IO_write>
				if(toggle%2)
     3f4:	d0a6ce03 	ldbu	r2,-25800(gp)
     3f8:	1080004c 	andi	r2,r2,1
     3fc:	10803fcc 	andi	r2,r2,255
     400:	10000426 	beq	r2,zero,414 <get_keycode+0x80>
				{
					IO_write(HPI_DATA,0x0001);//6 //data 1
     404:	0009883a 	mov	r4,zero
     408:	01400044 	movi	r5,1
     40c:	00002c80 	call	2c8 <IO_write>
     410:	00000306 	br	420 <get_keycode+0x8c>
				}
				else
				{
					IO_write(HPI_DATA,0x0041);//6 //data 1
     414:	0009883a 	mov	r4,zero
     418:	01401044 	movi	r5,65
     41c:	00002c80 	call	2c8 <IO_write>
				}
				IO_write(HPI_DATA,0x0013);//8
     420:	0009883a 	mov	r4,zero
     424:	014004c4 	movi	r5,19
     428:	00002c80 	call	2c8 <IO_write>
				IO_write(HPI_DATA,0x0000);//a
     42c:	0009883a 	mov	r4,zero
     430:	000b883a 	mov	r5,zero
     434:	00002c80 	call	2c8 <IO_write>
				UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
     438:	01006c04 	movi	r4,432
     43c:	01414004 	movi	r5,1280
     440:	00017e40 	call	17e4 <UsbWrite>

				while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     444:	00002506 	br	4dc <get_keycode+0x148>
				{
					IO_write(HPI_ADDR,0x0500); //the start address
     448:	01000084 	movi	r4,2
     44c:	01414004 	movi	r5,1280
     450:	00002c80 	call	2c8 <IO_write>
					//data phase IN-1
					IO_write(HPI_DATA,0x051c); //500
     454:	0009883a 	mov	r4,zero
     458:	01414704 	movi	r5,1308
     45c:	00002c80 	call	2c8 <IO_write>

					IO_write(HPI_DATA,0x000f & data_size);//2 data length
     460:	d0a6cf83 	ldbu	r2,-25794(gp)
     464:	10803fcc 	andi	r2,r2,255
     468:	108003cc 	andi	r2,r2,15
     46c:	0009883a 	mov	r4,zero
     470:	100b883a 	mov	r5,r2
     474:	00002c80 	call	2c8 <IO_write>

					IO_write(HPI_DATA,0x0291);//4 //endpoint 1
     478:	0009883a 	mov	r4,zero
     47c:	0140a444 	movi	r5,657
     480:	00002c80 	call	2c8 <IO_write>
					if(toggle%2)
     484:	d0a6ce03 	ldbu	r2,-25800(gp)
     488:	1080004c 	andi	r2,r2,1
     48c:	10803fcc 	andi	r2,r2,255
     490:	10000426 	beq	r2,zero,4a4 <get_keycode+0x110>
					{
						IO_write(HPI_DATA,0x0001);//6 //data 1
     494:	0009883a 	mov	r4,zero
     498:	01400044 	movi	r5,1
     49c:	00002c80 	call	2c8 <IO_write>
     4a0:	00000306 	br	4b0 <get_keycode+0x11c>
					}
					else
					{
						IO_write(HPI_DATA,0x0041);//6 //data 1
     4a4:	0009883a 	mov	r4,zero
     4a8:	01401044 	movi	r5,65
     4ac:	00002c80 	call	2c8 <IO_write>
					}
					IO_write(HPI_DATA,0x0013);//8
     4b0:	0009883a 	mov	r4,zero
     4b4:	014004c4 	movi	r5,19
     4b8:	00002c80 	call	2c8 <IO_write>
					IO_write(HPI_DATA,0x0000);//
     4bc:	0009883a 	mov	r4,zero
     4c0:	000b883a 	mov	r5,zero
     4c4:	00002c80 	call	2c8 <IO_write>
					UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
     4c8:	01006c04 	movi	r4,432
     4cc:	01414004 	movi	r5,1280
     4d0:	00017e40 	call	17e4 <UsbWrite>
					usleep(10*1000);
     4d4:	0109c404 	movi	r4,10000
     4d8:	000fb580 	call	fb58 <usleep>
				}
				IO_write(HPI_DATA,0x0013);//8
				IO_write(HPI_DATA,0x0000);//a
				UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr

				while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     4dc:	010000c4 	movi	r4,3
     4e0:	00003300 	call	330 <IO_read>
     4e4:	10bfffcc 	andi	r2,r2,65535
     4e8:	1080040c 	andi	r2,r2,16
     4ec:	103fd626 	beq	r2,zero,448 <__alt_data_end+0xfffaad18>
					usleep(10*1000);
				}//end while



				usb_ctl_val = UsbWaitTDListDone();
     4f0:	00027a80 	call	27a8 <UsbWaitTDListDone>
     4f4:	d0a6cf0d 	sth	r2,-25796(gp)

				// packet starts from 0x051c, reading third byte
				// TASK: Write the address to read from the memory for byte 3 of the report descriptor to HPI_ADDR.
				IO_write(HPI_ADDR,0x051e); //the start address
     4f8:	01000084 	movi	r4,2
     4fc:	01414784 	movi	r5,1310
     500:	00002c80 	call	2c8 <IO_write>
				*keycode1 = IO_read(HPI_DATA);
     504:	0009883a 	mov	r4,zero
     508:	00003300 	call	330 <IO_read>
     50c:	10ffffcc 	andi	r3,r2,65535
     510:	e0bffe17 	ldw	r2,-8(fp)
     514:	10c00015 	stw	r3,0(r2)
				keycode=*keycode1;
     518:	e0bffe17 	ldw	r2,-8(fp)
     51c:	10800017 	ldw	r2,0(r2)
     520:	d0a6cd15 	stw	r2,-25804(gp)


				*keycode2 = IO_read(HPI_DATA);
     524:	0009883a 	mov	r4,zero
     528:	00003300 	call	330 <IO_read>
     52c:	10ffffcc 	andi	r3,r2,65535
     530:	e0bfff17 	ldw	r2,-4(fp)
     534:	10c00015 	stw	r3,0(r2)


				IOWR(KEYCODE_BASE, 0, keycode & 0xff);
     538:	d0a6cd17 	ldw	r2,-25804(gp)
     53c:	10c03fcc 	andi	r3,r2,255
     540:	00800234 	movhi	r2,8
     544:	10841804 	addi	r2,r2,4192
     548:	10c00035 	stwio	r3,0(r2)



				usb_ctl_val = UsbRead(ctl_reg);
     54c:	d0a6cb0b 	ldhu	r2,-25812(gp)
     550:	10bfffcc 	andi	r2,r2,65535
     554:	1009883a 	mov	r4,r2
     558:	00018380 	call	1838 <UsbRead>
     55c:	d0a6cf0d 	sth	r2,-25796(gp)

				if(!(usb_ctl_val & no_device))
     560:	d0e6cf0b 	ldhu	r3,-25796(gp)
     564:	d0a6cb8b 	ldhu	r2,-25810(gp)
     568:	1884703a 	and	r2,r3,r2
     56c:	10bfffcc 	andi	r2,r2,65535
     570:	1000211e 	bne	r2,zero,5f8 <get_keycode+0x264>
				{
					//USB hot plug routine
					for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
     574:	d026d085 	stb	zero,-25790(gp)
     578:	00001006 	br	5bc <get_keycode+0x228>
					{
						usleep(5*1000);
     57c:	0104e204 	movi	r4,5000
     580:	000fb580 	call	fb58 <usleep>
						usb_ctl_val = UsbRead(ctl_reg);
     584:	d0a6cb0b 	ldhu	r2,-25812(gp)
     588:	10bfffcc 	andi	r2,r2,65535
     58c:	1009883a 	mov	r4,r2
     590:	00018380 	call	1838 <UsbRead>
     594:	d0a6cf0d 	sth	r2,-25796(gp)
						if(usb_ctl_val & no_device) break;
     598:	d0e6cf0b 	ldhu	r3,-25796(gp)
     59c:	d0a6cb8b 	ldhu	r2,-25810(gp)
     5a0:	1884703a 	and	r2,r3,r2
     5a4:	10bfffcc 	andi	r2,r2,65535
     5a8:	10000126 	beq	r2,zero,5b0 <get_keycode+0x21c>
     5ac:	00000706 	br	5cc <get_keycode+0x238>
				usb_ctl_val = UsbRead(ctl_reg);

				if(!(usb_ctl_val & no_device))
				{
					//USB hot plug routine
					for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
     5b0:	d0a6d083 	ldbu	r2,-25790(gp)
     5b4:	10800044 	addi	r2,r2,1
     5b8:	d0a6d085 	stb	r2,-25790(gp)
     5bc:	d0a6d083 	ldbu	r2,-25790(gp)
     5c0:	10803fcc 	andi	r2,r2,255
     5c4:	108001f0 	cmpltui	r2,r2,7
     5c8:	103fec1e 	bne	r2,zero,57c <__alt_data_end+0xfffaae4c>
					{
						usleep(5*1000);
						usb_ctl_val = UsbRead(ctl_reg);
						if(usb_ctl_val & no_device) break;
					}
					if(!(usb_ctl_val & no_device))
     5cc:	d0e6cf0b 	ldhu	r3,-25796(gp)
     5d0:	d0a6cb8b 	ldhu	r2,-25810(gp)
     5d4:	1884703a 	and	r2,r3,r2
     5d8:	10bfffcc 	andi	r2,r2,65535
     5dc:	1000061e 	bne	r2,zero,5f8 <get_keycode+0x264>
					{
						printf("\n[INFO]: the keyboard has been removed!!! \n");
     5e0:	01000074 	movhi	r4,1
     5e4:	2106e504 	addi	r4,r4,7060
     5e8:	00032180 	call	3218 <puts>
						printf("[INFO]: please insert again!!! \n");
     5ec:	01000074 	movhi	r4,1
     5f0:	2106f004 	addi	r4,r4,7104
     5f4:	00032180 	call	3218 <puts>
					}
				}

				while (!(usb_ctl_val & no_device))
     5f8:	00001e06 	br	674 <get_keycode+0x2e0>
				{

					usb_ctl_val = UsbRead(ctl_reg);
     5fc:	d0a6cb0b 	ldhu	r2,-25812(gp)
     600:	10bfffcc 	andi	r2,r2,65535
     604:	1009883a 	mov	r4,r2
     608:	00018380 	call	1838 <UsbRead>
     60c:	d0a6cf0d 	sth	r2,-25796(gp)
					usleep(5*1000);
     610:	0104e204 	movi	r4,5000
     614:	000fb580 	call	fb58 <usleep>
					usb_ctl_val = UsbRead(ctl_reg);
     618:	d0a6cb0b 	ldhu	r2,-25812(gp)
     61c:	10bfffcc 	andi	r2,r2,65535
     620:	1009883a 	mov	r4,r2
     624:	00018380 	call	1838 <UsbRead>
     628:	d0a6cf0d 	sth	r2,-25796(gp)
					usleep(5*1000);
     62c:	0104e204 	movi	r4,5000
     630:	000fb580 	call	fb58 <usleep>
					usb_ctl_val = UsbRead(ctl_reg);
     634:	d0a6cb0b 	ldhu	r2,-25812(gp)
     638:	10bfffcc 	andi	r2,r2,65535
     63c:	1009883a 	mov	r4,r2
     640:	00018380 	call	1838 <UsbRead>
     644:	d0a6cf0d 	sth	r2,-25796(gp)
					usleep(5*1000);
     648:	0104e204 	movi	r4,5000
     64c:	000fb580 	call	fb58 <usleep>

					if(usb_ctl_val & no_device)
     650:	d0e6cf0b 	ldhu	r3,-25796(gp)
     654:	d0a6cb8b 	ldhu	r2,-25810(gp)
     658:	1884703a 	and	r2,r3,r2
     65c:	10bfffcc 	andi	r2,r2,65535
     660:	10000226 	beq	r2,zero,66c <get_keycode+0x2d8>
						return -1;
     664:	00bfffc4 	movi	r2,-1
     668:	00000806 	br	68c <get_keycode+0x2f8>

					usleep(200);
     66c:	01003204 	movi	r4,200
     670:	000fb580 	call	fb58 <usleep>
						printf("\n[INFO]: the keyboard has been removed!!! \n");
						printf("[INFO]: please insert again!!! \n");
					}
				}

				while (!(usb_ctl_val & no_device))
     674:	d0e6cf0b 	ldhu	r3,-25796(gp)
     678:	d0a6cb8b 	ldhu	r2,-25810(gp)
     67c:	1884703a 	and	r2,r3,r2
     680:	10bfffcc 	andi	r2,r2,65535
     684:	103fdd26 	beq	r2,zero,5fc <__alt_data_end+0xfffaaecc>
					if(usb_ctl_val & no_device)
						return -1;

					usleep(200);
				}
				return 0;
     688:	0005883a 	mov	r2,zero
}
     68c:	e037883a 	mov	sp,fp
     690:	dfc00117 	ldw	ra,4(sp)
     694:	df000017 	ldw	fp,0(sp)
     698:	dec00204 	addi	sp,sp,8
     69c:	f800283a 	ret

000006a0 <setup_keyboard>:


void setup_keyboard()
{
     6a0:	defffe04 	addi	sp,sp,-8
     6a4:	dfc00115 	stw	ra,4(sp)
     6a8:	df000015 	stw	fp,0(sp)
     6ac:	d839883a 	mov	fp,sp
	IO_init();
     6b0:	00002680 	call	268 <IO_init>
		usleep(10*10000);
	}*/



	printf("USB keyboard setup...\n\n");
     6b4:	01000074 	movhi	r4,1
     6b8:	2106f804 	addi	r4,r4,7136
     6bc:	00032180 	call	3218 <puts>

	//----------------------------------------SIE1 initial---------------------------------------------------//
	USB_HOT_PLUG:
	UsbSoftReset();
     6c0:	000187c0 	call	187c <UsbSoftReset>

	// STEP 1a:
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
     6c4:	01005104 	movi	r4,324
     6c8:	000b883a 	mov	r5,zero
     6cc:	00017e40 	call	17e4 <UsbWrite>
	UsbWrite (HOST1_STAT_REG, 0xFFFF);
     6d0:	01302414 	movui	r4,49296
     6d4:	017fffd4 	movui	r5,65535
     6d8:	00017e40 	call	17e4 <UsbWrite>

	/* Set HUSB_pEOT time */
	UsbWrite(HUSB_pEOT, 600); // adjust the according to your USB device speed
     6dc:	01006d04 	movi	r4,436
     6e0:	01409604 	movi	r5,600
     6e4:	00017e40 	call	17e4 <UsbWrite>

	usb_ctl_val = SOFEOP1_TO_CPU_EN | RESUME1_TO_HPI_EN;// | SOFEOP1_TO_HPI_EN;
     6e8:	00811004 	movi	r2,1088
     6ec:	d0a6cf0d 	sth	r2,-25796(gp)
	UsbWrite(HPI_IRQ_ROUTING_REG, usb_ctl_val);
     6f0:	d0a6cf0b 	ldhu	r2,-25796(gp)
     6f4:	10bfffcc 	andi	r2,r2,65535
     6f8:	01005084 	movi	r4,322
     6fc:	100b883a 	mov	r5,r2
     700:	00017e40 	call	17e4 <UsbWrite>

	intStat = A_CHG_IRQ_EN | SOF_EOP_IRQ_EN ;
     704:	00808404 	movi	r2,528
     708:	d0a6d00d 	sth	r2,-25792(gp)
	UsbWrite(HOST1_IRQ_EN_REG, intStat);
     70c:	d0a6d00b 	ldhu	r2,-25792(gp)
     710:	10bfffcc 	andi	r2,r2,65535
     714:	01302314 	movui	r4,49292
     718:	100b883a 	mov	r5,r2
     71c:	00017e40 	call	17e4 <UsbWrite>
	// STEP 1a end

	// STEP 1b begin
	UsbWrite(COMM_R0,0x0000);//reset time
     720:	01007104 	movi	r4,452
     724:	000b883a 	mov	r5,zero
     728:	00017e40 	call	17e4 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
     72c:	01007184 	movi	r4,454
     730:	000b883a 	mov	r5,zero
     734:	00017e40 	call	17e4 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
     738:	01007204 	movi	r4,456
     73c:	000b883a 	mov	r5,zero
     740:	00017e40 	call	17e4 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
     744:	01007284 	movi	r4,458
     748:	000b883a 	mov	r5,zero
     74c:	00017e40 	call	17e4 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
     750:	01007304 	movi	r4,460
     754:	000b883a 	mov	r5,zero
     758:	00017e40 	call	17e4 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
     75c:	01007384 	movi	r4,462
     760:	000b883a 	mov	r5,zero
     764:	00017e40 	call	17e4 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
     768:	01007404 	movi	r4,464
     76c:	000b883a 	mov	r5,zero
     770:	00017e40 	call	17e4 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
     774:	01007484 	movi	r4,466
     778:	000b883a 	mov	r5,zero
     77c:	00017e40 	call	17e4 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
     780:	01007504 	movi	r4,468
     784:	000b883a 	mov	r5,zero
     788:	00017e40 	call	17e4 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
     78c:	01007584 	movi	r4,470
     790:	000b883a 	mov	r5,zero
     794:	00017e40 	call	17e4 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
     798:	01007604 	movi	r4,472
     79c:	000b883a 	mov	r5,zero
     7a0:	00017e40 	call	17e4 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
     7a4:	01007684 	movi	r4,474
     7a8:	000b883a 	mov	r5,zero
     7ac:	00017e40 	call	17e4 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
     7b0:	01007704 	movi	r4,476
     7b4:	000b883a 	mov	r5,zero
     7b8:	00017e40 	call	17e4 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
     7bc:	01007784 	movi	r4,478
     7c0:	000b883a 	mov	r5,zero
     7c4:	00017e40 	call	17e4 <UsbWrite>
	UsbWrite(COMM_INT_NUM,HUSB_SIE1_INIT_INT); //HUSB_SIE1_INIT_INT
     7c8:	01007084 	movi	r4,450
     7cc:	01401c84 	movi	r5,114
     7d0:	00017e40 	call	17e4 <UsbWrite>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
     7d4:	01000044 	movi	r4,1
     7d8:	01738054 	movui	r5,52737
     7dc:	00002c80 	call	2c8 <IO_write>

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
     7e0:	0001883a 	nop
     7e4:	010000c4 	movi	r4,3
     7e8:	00003300 	call	330 <IO_read>
     7ec:	10bfffcc 	andi	r2,r2,65535
     7f0:	103ffc26 	beq	r2,zero,7e4 <__alt_data_end+0xfffab0b4>
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
     7f4:	0001883a 	nop
     7f8:	01000044 	movi	r4,1
     7fc:	00003300 	call	330 <IO_read>
     800:	10bfffcc 	andi	r2,r2,65535
     804:	1083fb58 	cmpnei	r2,r2,4077
     808:	10000826 	beq	r2,zero,82c <setup_keyboard+0x18c>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
     80c:	01000044 	movi	r4,1
     810:	00003300 	call	330 <IO_read>
     814:	10bfffcc 	andi	r2,r2,65535
     818:	01000074 	movhi	r4,1
     81c:	2106fe04 	addi	r4,r4,7160
     820:	100b883a 	mov	r5,r2
     824:	00031240 	call	3124 <printf>
		goto USB_HOT_PLUG;
     828:	003fa506 	br	6c0 <__alt_data_end+0xfffaaf90>
	}
	// STEP 1b end

	printf("STEP 1 Complete");
     82c:	01000074 	movhi	r4,1
     830:	21070704 	addi	r4,r4,7196
     834:	00031240 	call	3124 <printf>
	// STEP 2 begin
	UsbWrite(COMM_INT_NUM,HUSB_RESET_INT); //husb reset
     838:	01007084 	movi	r4,450
     83c:	01401d04 	movi	r5,116
     840:	00017e40 	call	17e4 <UsbWrite>
	UsbWrite(COMM_R0,0x003c);//reset time
     844:	01007104 	movi	r4,452
     848:	01400f04 	movi	r5,60
     84c:	00017e40 	call	17e4 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
     850:	01007184 	movi	r4,454
     854:	000b883a 	mov	r5,zero
     858:	00017e40 	call	17e4 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
     85c:	01007204 	movi	r4,456
     860:	000b883a 	mov	r5,zero
     864:	00017e40 	call	17e4 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
     868:	01007284 	movi	r4,458
     86c:	000b883a 	mov	r5,zero
     870:	00017e40 	call	17e4 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
     874:	01007304 	movi	r4,460
     878:	000b883a 	mov	r5,zero
     87c:	00017e40 	call	17e4 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
     880:	01007384 	movi	r4,462
     884:	000b883a 	mov	r5,zero
     888:	00017e40 	call	17e4 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
     88c:	01007404 	movi	r4,464
     890:	000b883a 	mov	r5,zero
     894:	00017e40 	call	17e4 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
     898:	01007484 	movi	r4,466
     89c:	000b883a 	mov	r5,zero
     8a0:	00017e40 	call	17e4 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
     8a4:	01007504 	movi	r4,468
     8a8:	000b883a 	mov	r5,zero
     8ac:	00017e40 	call	17e4 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
     8b0:	01007584 	movi	r4,470
     8b4:	000b883a 	mov	r5,zero
     8b8:	00017e40 	call	17e4 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
     8bc:	01007604 	movi	r4,472
     8c0:	000b883a 	mov	r5,zero
     8c4:	00017e40 	call	17e4 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
     8c8:	01007684 	movi	r4,474
     8cc:	000b883a 	mov	r5,zero
     8d0:	00017e40 	call	17e4 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
     8d4:	01007704 	movi	r4,476
     8d8:	000b883a 	mov	r5,zero
     8dc:	00017e40 	call	17e4 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
     8e0:	01007784 	movi	r4,478
     8e4:	000b883a 	mov	r5,zero
     8e8:	00017e40 	call	17e4 <UsbWrite>

	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
     8ec:	01000044 	movi	r4,1
     8f0:	01738054 	movui	r5,52737
     8f4:	00002c80 	call	2c8 <IO_write>

	while (IO_read(HPI_MAILBOX) != COMM_ACK)
     8f8:	0001883a 	nop
     8fc:	01000044 	movi	r4,1
     900:	00003300 	call	330 <IO_read>
     904:	10bfffcc 	andi	r2,r2,65535
     908:	1083fb58 	cmpnei	r2,r2,4077
     90c:	10000826 	beq	r2,zero,930 <setup_keyboard+0x290>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
     910:	01000044 	movi	r4,1
     914:	00003300 	call	330 <IO_read>
     918:	10bfffcc 	andi	r2,r2,65535
     91c:	01000074 	movhi	r4,1
     920:	2106fe04 	addi	r4,r4,7160
     924:	100b883a 	mov	r5,r2
     928:	00031240 	call	3124 <printf>
		goto USB_HOT_PLUG;
     92c:	003f6406 	br	6c0 <__alt_data_end+0xfffaaf90>
	}
	// STEP 2 end

	ctl_reg = USB1_CTL_REG;
     930:	00b02284 	movi	r2,-16246
     934:	d0a6cb0d 	sth	r2,-25812(gp)
	no_device = (A_DP_STAT | A_DM_STAT);
     938:	008c0004 	movi	r2,12288
     93c:	d0a6cb8d 	sth	r2,-25810(gp)
	fs_device = A_DP_STAT;
     940:	00880004 	movi	r2,8192
     944:	d0a6cc0d 	sth	r2,-25808(gp)
	usb_ctl_val = UsbRead(ctl_reg);
     948:	d0a6cb0b 	ldhu	r2,-25812(gp)
     94c:	10bfffcc 	andi	r2,r2,65535
     950:	1009883a 	mov	r4,r2
     954:	00018380 	call	1838 <UsbRead>
     958:	d0a6cf0d 	sth	r2,-25796(gp)
		}
	}
	else
	{
		 check for low speed or full speed by reading D+ and D- lines */
		if (usb_ctl_val & fs_device)
     95c:	d0e6cf0b 	ldhu	r3,-25796(gp)
     960:	d0a6cc0b 	ldhu	r2,-25808(gp)
     964:	1884703a 	and	r2,r3,r2
     968:	10bfffcc 	andi	r2,r2,65535
     96c:	10000426 	beq	r2,zero,980 <setup_keyboard+0x2e0>
		{
			printf("[INFO]: full speed device\n");
     970:	01000074 	movhi	r4,1
     974:	21070b04 	addi	r4,r4,7212
     978:	00032180 	call	3218 <puts>
     97c:	00000306 	br	98c <setup_keyboard+0x2ec>
		}
		else
		{
			printf("[INFO]: low speed device\n");
     980:	01000074 	movhi	r4,1
     984:	21071204 	addi	r4,r4,7240
     988:	00032180 	call	3218 <puts>



	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();
     98c:	000192c0 	call	192c <UsbSetAddress>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     990:	00000306 	br	9a0 <setup_keyboard+0x300>
	{
		UsbSetAddress();
     994:	000192c0 	call	192c <UsbSetAddress>
		usleep(10*1000);
     998:	0109c404 	movi	r4,10000
     99c:	000fb580 	call	fb58 <usleep>

	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     9a0:	010000c4 	movi	r4,3
     9a4:	00003300 	call	330 <IO_read>
     9a8:	10bfffcc 	andi	r2,r2,65535
     9ac:	1080040c 	andi	r2,r2,16
     9b0:	103ff826 	beq	r2,zero,994 <__alt_data_end+0xfffab264>
	{
		UsbSetAddress();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     9b4:	00027a80 	call	27a8 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506); // i
     9b8:	01000084 	movi	r4,2
     9bc:	01414184 	movi	r5,1286
     9c0:	00002c80 	call	2c8 <IO_write>
	printf("[ENUM PROCESS]:step 3 TD Status Byte is %x\n",IO_read(HPI_DATA));
     9c4:	0009883a 	mov	r4,zero
     9c8:	00003300 	call	330 <IO_read>
     9cc:	10bfffcc 	andi	r2,r2,65535
     9d0:	01000074 	movhi	r4,1
     9d4:	21071904 	addi	r4,r4,7268
     9d8:	100b883a 	mov	r5,r2
     9dc:	00031240 	call	3124 <printf>

	IO_write(HPI_ADDR,0x0508); // n
     9e0:	01000084 	movi	r4,2
     9e4:	01414204 	movi	r5,1288
     9e8:	00002c80 	call	2c8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     9ec:	0009883a 	mov	r4,zero
     9f0:	00003300 	call	330 <IO_read>
     9f4:	d0a6cf0d 	sth	r2,-25796(gp)
	printf("[ENUM PROCESS]:step 3 TD Control Byte is %x\n",usb_ctl_val);
     9f8:	d0a6cf0b 	ldhu	r2,-25796(gp)
     9fc:	10bfffcc 	andi	r2,r2,65535
     a00:	01000074 	movhi	r4,1
     a04:	21072404 	addi	r4,r4,7312
     a08:	100b883a 	mov	r5,r2
     a0c:	00031240 	call	3124 <printf>
	while (usb_ctl_val != 0x03) // retries occurred
     a10:	0001883a 	nop
     a14:	d0a6cf0b 	ldhu	r2,-25796(gp)
     a18:	10bfffcc 	andi	r2,r2,65535
     a1c:	108000d8 	cmpnei	r2,r2,3
     a20:	10000326 	beq	r2,zero,a30 <setup_keyboard+0x390>
	{
		usb_ctl_val = UsbGetRetryCnt();
     a24:	000282c0 	call	282c <UsbGetRetryCnt>
     a28:	d0a6cf0d 	sth	r2,-25796(gp)

		goto USB_HOT_PLUG;
     a2c:	003f2406 	br	6c0 <__alt_data_end+0xfffaaf90>
	}

	printf("------------[ENUM PROCESS]:set address done!---------------\n");
     a30:	01000074 	movhi	r4,1
     a34:	21073004 	addi	r4,r4,7360
     a38:	00032180 	call	3218 <puts>

	// STEP 4 begin
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1
     a3c:	0001a280 	call	1a28 <UsbGetDeviceDesc1>

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     a40:	00000306 	br	a50 <setup_keyboard+0x3b0>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
     a44:	0001a280 	call	1a28 <UsbGetDeviceDesc1>
		usleep(10*1000);
     a48:	0109c404 	movi	r4,10000
     a4c:	000fb580 	call	fb58 <usleep>
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     a50:	010000c4 	movi	r4,3
     a54:	00003300 	call	330 <IO_read>
     a58:	10bfffcc 	andi	r2,r2,65535
     a5c:	1080040c 	andi	r2,r2,16
     a60:	103ff826 	beq	r2,zero,a44 <__alt_data_end+0xfffab314>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     a64:	00027a80 	call	27a8 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     a68:	01000084 	movi	r4,2
     a6c:	01414184 	movi	r5,1286
     a70:	00002c80 	call	2c8 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
     a74:	0009883a 	mov	r4,zero
     a78:	00003300 	call	330 <IO_read>
     a7c:	10bfffcc 	andi	r2,r2,65535
     a80:	01000074 	movhi	r4,1
     a84:	21073f04 	addi	r4,r4,7420
     a88:	100b883a 	mov	r5,r2
     a8c:	00031240 	call	3124 <printf>

	IO_write(HPI_ADDR,0x0508);
     a90:	01000084 	movi	r4,2
     a94:	01414204 	movi	r5,1288
     a98:	00002c80 	call	2c8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     a9c:	0009883a 	mov	r4,zero
     aa0:	00003300 	call	330 <IO_read>
     aa4:	d0a6cf0d 	sth	r2,-25796(gp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
     aa8:	d0a6cf0b 	ldhu	r2,-25796(gp)
     aac:	10bfffcc 	andi	r2,r2,65535
     ab0:	01000074 	movhi	r4,1
     ab4:	21074a04 	addi	r4,r4,7464
     ab8:	100b883a 	mov	r5,r2
     abc:	00031240 	call	3124 <printf>
	while (usb_ctl_val != 0x03)
     ac0:	00000206 	br	acc <setup_keyboard+0x42c>
	{
		usb_ctl_val = UsbGetRetryCnt();
     ac4:	000282c0 	call	282c <UsbGetRetryCnt>
     ac8:	d0a6cf0d 	sth	r2,-25796(gp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
     acc:	d0a6cf0b 	ldhu	r2,-25796(gp)
     ad0:	10bfffcc 	andi	r2,r2,65535
     ad4:	108000d8 	cmpnei	r2,r2,3
     ad8:	103ffa1e 	bne	r2,zero,ac4 <__alt_data_end+0xfffab394>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get device descriptor-1 done!-----------------\n");
     adc:	01000074 	movhi	r4,1
     ae0:	21075604 	addi	r4,r4,7512
     ae4:	00032180 	call	3218 <puts>


	//--------------------------------get device descriptor-2---------------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2
     ae8:	0001b6c0 	call	1b6c <UsbGetDeviceDesc2>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     aec:	00000306 	br	afc <setup_keyboard+0x45c>
	{
		//resend the get device descriptor
		//get device descriptor
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
     af0:	0001b6c0 	call	1b6c <UsbGetDeviceDesc2>
		usleep(10*1000);
     af4:	0109c404 	movi	r4,10000
     af8:	000fb580 	call	fb58 <usleep>
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     afc:	010000c4 	movi	r4,3
     b00:	00003300 	call	330 <IO_read>
     b04:	10bfffcc 	andi	r2,r2,65535
     b08:	1080040c 	andi	r2,r2,16
     b0c:	103ff826 	beq	r2,zero,af0 <__alt_data_end+0xfffab3c0>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     b10:	00027a80 	call	27a8 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     b14:	01000084 	movi	r4,2
     b18:	01414184 	movi	r5,1286
     b1c:	00002c80 	call	2c8 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
     b20:	0009883a 	mov	r4,zero
     b24:	00003300 	call	330 <IO_read>
     b28:	10bfffcc 	andi	r2,r2,65535
     b2c:	01000074 	movhi	r4,1
     b30:	21073f04 	addi	r4,r4,7420
     b34:	100b883a 	mov	r5,r2
     b38:	00031240 	call	3124 <printf>

	IO_write(HPI_ADDR,0x0508);
     b3c:	01000084 	movi	r4,2
     b40:	01414204 	movi	r5,1288
     b44:	00002c80 	call	2c8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     b48:	0009883a 	mov	r4,zero
     b4c:	00003300 	call	330 <IO_read>
     b50:	d0a6cf0d 	sth	r2,-25796(gp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
     b54:	d0a6cf0b 	ldhu	r2,-25796(gp)
     b58:	10bfffcc 	andi	r2,r2,65535
     b5c:	01000074 	movhi	r4,1
     b60:	21074a04 	addi	r4,r4,7464
     b64:	100b883a 	mov	r5,r2
     b68:	00031240 	call	3124 <printf>
	while (usb_ctl_val != 0x03)
     b6c:	00000206 	br	b78 <setup_keyboard+0x4d8>
	{
		usb_ctl_val = UsbGetRetryCnt();
     b70:	000282c0 	call	282c <UsbGetRetryCnt>
     b74:	d0a6cf0d 	sth	r2,-25796(gp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
     b78:	d0a6cf0b 	ldhu	r2,-25796(gp)
     b7c:	10bfffcc 	andi	r2,r2,65535
     b80:	108000d8 	cmpnei	r2,r2,3
     b84:	103ffa1e 	bne	r2,zero,b70 <__alt_data_end+0xfffab440>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get device descriptor-2 done!--------------\n");
     b88:	01000074 	movhi	r4,1
     b8c:	21076a04 	addi	r4,r4,7592
     b90:	00032180 	call	3218 <puts>


	// STEP 5 begin
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1
     b94:	0001d400 	call	1d40 <UsbGetConfigDesc1>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     b98:	00000306 	br	ba8 <setup_keyboard+0x508>
	{
		//resend the get device descriptor
		//get device descriptor

		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
     b9c:	0001d400 	call	1d40 <UsbGetConfigDesc1>
		usleep(10*1000);
     ba0:	0109c404 	movi	r4,10000
     ba4:	000fb580 	call	fb58 <usleep>
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     ba8:	010000c4 	movi	r4,3
     bac:	00003300 	call	330 <IO_read>
     bb0:	10bfffcc 	andi	r2,r2,65535
     bb4:	1080040c 	andi	r2,r2,16
     bb8:	103ff826 	beq	r2,zero,b9c <__alt_data_end+0xfffab46c>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     bbc:	00027a80 	call	27a8 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     bc0:	01000084 	movi	r4,2
     bc4:	01414184 	movi	r5,1286
     bc8:	00002c80 	call	2c8 <IO_write>
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));
     bcc:	0009883a 	mov	r4,zero
     bd0:	00003300 	call	330 <IO_read>
     bd4:	10bfffcc 	andi	r2,r2,65535
     bd8:	01000074 	movhi	r4,1
     bdc:	21077c04 	addi	r4,r4,7664
     be0:	100b883a 	mov	r5,r2
     be4:	00031240 	call	3124 <printf>

	IO_write(HPI_ADDR,0x0508);
     be8:	01000084 	movi	r4,2
     bec:	01414204 	movi	r5,1288
     bf0:	00002c80 	call	2c8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     bf4:	0009883a 	mov	r4,zero
     bf8:	00003300 	call	330 <IO_read>
     bfc:	d0a6cf0d 	sth	r2,-25796(gp)
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
     c00:	d0a6cf0b 	ldhu	r2,-25796(gp)
     c04:	10bfffcc 	andi	r2,r2,65535
     c08:	01000074 	movhi	r4,1
     c0c:	21078704 	addi	r4,r4,7708
     c10:	100b883a 	mov	r5,r2
     c14:	00031240 	call	3124 <printf>
	while (usb_ctl_val != 0x03)
     c18:	00000206 	br	c24 <setup_keyboard+0x584>
	{
		usb_ctl_val = UsbGetRetryCnt();
     c1c:	000282c0 	call	282c <UsbGetRetryCnt>
     c20:	d0a6cf0d 	sth	r2,-25796(gp)
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
     c24:	d0a6cf0b 	ldhu	r2,-25796(gp)
     c28:	10bfffcc 	andi	r2,r2,65535
     c2c:	108000d8 	cmpnei	r2,r2,3
     c30:	103ffa1e 	bne	r2,zero,c1c <__alt_data_end+0xfffab4ec>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}
	printf("------------[ENUM PROCESS]:get configuration descriptor-1 pass------------\n");
     c34:	01000074 	movhi	r4,1
     c38:	21079304 	addi	r4,r4,7756
     c3c:	00032180 	call	3218 <puts>

	// STEP 6 begin
	//-----------------------------------get configuration descriptor-2------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2
     c40:	0001ecc0 	call	1ecc <UsbGetConfigDesc2>

	usleep(100*1000);
     c44:	010000b4 	movhi	r4,2
     c48:	2121a804 	addi	r4,r4,-31072
     c4c:	000fb580 	call	fb58 <usleep>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     c50:	00000306 	br	c60 <setup_keyboard+0x5c0>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
     c54:	0001ecc0 	call	1ecc <UsbGetConfigDesc2>
		usleep(10*1000);
     c58:	0109c404 	movi	r4,10000
     c5c:	000fb580 	call	fb58 <usleep>
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2

	usleep(100*1000);
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     c60:	010000c4 	movi	r4,3
     c64:	00003300 	call	330 <IO_read>
     c68:	10bfffcc 	andi	r2,r2,65535
     c6c:	1080040c 	andi	r2,r2,16
     c70:	103ff826 	beq	r2,zero,c54 <__alt_data_end+0xfffab524>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     c74:	00027a80 	call	27a8 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     c78:	01000084 	movi	r4,2
     c7c:	01414184 	movi	r5,1286
     c80:	00002c80 	call	2c8 <IO_write>
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));
     c84:	0009883a 	mov	r4,zero
     c88:	00003300 	call	330 <IO_read>
     c8c:	10bfffcc 	andi	r2,r2,65535
     c90:	01000074 	movhi	r4,1
     c94:	2107a604 	addi	r4,r4,7832
     c98:	100b883a 	mov	r5,r2
     c9c:	00031240 	call	3124 <printf>

	IO_write(HPI_ADDR,0x0508);
     ca0:	01000084 	movi	r4,2
     ca4:	01414204 	movi	r5,1288
     ca8:	00002c80 	call	2c8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     cac:	0009883a 	mov	r4,zero
     cb0:	00003300 	call	330 <IO_read>
     cb4:	d0a6cf0d 	sth	r2,-25796(gp)
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
     cb8:	d0a6cf0b 	ldhu	r2,-25796(gp)
     cbc:	10bfffcc 	andi	r2,r2,65535
     cc0:	01000074 	movhi	r4,1
     cc4:	2107b104 	addi	r4,r4,7876
     cc8:	100b883a 	mov	r5,r2
     ccc:	00031240 	call	3124 <printf>
	while (usb_ctl_val != 0x03)
     cd0:	00000206 	br	cdc <setup_keyboard+0x63c>
	{
		usb_ctl_val = UsbGetRetryCnt();
     cd4:	000282c0 	call	282c <UsbGetRetryCnt>
     cd8:	d0a6cf0d 	sth	r2,-25796(gp)
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
     cdc:	d0a6cf0b 	ldhu	r2,-25796(gp)
     ce0:	10bfffcc 	andi	r2,r2,65535
     ce4:	108000d8 	cmpnei	r2,r2,3
     ce8:	103ffa1e 	bne	r2,zero,cd4 <__alt_data_end+0xfffab5a4>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("-----------[ENUM PROCESS]:get configuration descriptor-2 done!------------\n");
     cec:	01000074 	movhi	r4,1
     cf0:	2107bd04 	addi	r4,r4,7924
     cf4:	00032180 	call	3218 <puts>


	// ---------------------------------get device info---------------------------------------------//

	// TASK: Write the address to read from the memory for byte 7 of the interface descriptor to HPI_ADDR.
	IO_write(HPI_ADDR,0x056c);
     cf8:	01000084 	movi	r4,2
     cfc:	01415b04 	movi	r5,1388
     d00:	00002c80 	call	2c8 <IO_write>
	code = IO_read(HPI_DATA);
     d04:	0009883a 	mov	r4,zero
     d08:	00003300 	call	330 <IO_read>
     d0c:	d0a6d10d 	sth	r2,-25788(gp)
	code = code & 0x003;
     d10:	d0a6d10b 	ldhu	r2,-25788(gp)
     d14:	108000cc 	andi	r2,r2,3
     d18:	d0a6d10d 	sth	r2,-25788(gp)
	printf("\ncode = %x\n", code);
     d1c:	d0a6d10b 	ldhu	r2,-25788(gp)
     d20:	10bfffcc 	andi	r2,r2,65535
     d24:	01000074 	movhi	r4,1
     d28:	2107d004 	addi	r4,r4,8000
     d2c:	100b883a 	mov	r5,r2
     d30:	00031240 	call	3124 <printf>

	if (code == 0x01)
     d34:	d0a6d10b 	ldhu	r2,-25788(gp)
     d38:	10bfffcc 	andi	r2,r2,65535
     d3c:	10800058 	cmpnei	r2,r2,1
     d40:	1000041e 	bne	r2,zero,d54 <setup_keyboard+0x6b4>
	{
		printf("\n[INFO]:check TD rec data7 \n[INFO]:Keyboard Detected!!!\n\n");
     d44:	01000074 	movhi	r4,1
     d48:	2107d304 	addi	r4,r4,8012
     d4c:	00032180 	call	3218 <puts>
     d50:	00000306 	br	d60 <setup_keyboard+0x6c0>
	}
	else
	{
		printf("\n[INFO]:Keyboard Not Detected!!! \n\n");
     d54:	01000074 	movhi	r4,1
     d58:	2107e204 	addi	r4,r4,8072
     d5c:	00032180 	call	3218 <puts>
	}

	// TASK: Write the address to read from the memory for the endpoint descriptor to HPI_ADDR.

	IO_write(HPI_ADDR,0x0576);
     d60:	01000084 	movi	r4,2
     d64:	01415d84 	movi	r5,1398
     d68:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x073F);
     d6c:	0009883a 	mov	r4,zero
     d70:	0141cfc4 	movi	r5,1855
     d74:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x8105);
     d78:	0009883a 	mov	r4,zero
     d7c:	01604154 	movui	r5,33029
     d80:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0003);
     d84:	0009883a 	mov	r4,zero
     d88:	014000c4 	movi	r5,3
     d8c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);
     d90:	0009883a 	mov	r4,zero
     d94:	01400204 	movi	r5,8
     d98:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0xAC0A);
     d9c:	0009883a 	mov	r4,zero
     da0:	016b0294 	movui	r5,44042
     da4:	00002c80 	call	2c8 <IO_write>
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0576); //HUSB_SIE1_pCurrentTDPtr
     da8:	01006c04 	movi	r4,432
     dac:	01415d84 	movi	r5,1398
     db0:	00017e40 	call	17e4 <UsbWrite>

	//data_size = (IO_read(HPI_DATA)>>8)&0x0ff;
	//data_size = 0x08;//(IO_read(HPI_DATA))&0x0ff;
	//UsbPrintMem();
	IO_write(HPI_ADDR,0x057c);
     db4:	01000084 	movi	r4,2
     db8:	01415f04 	movi	r5,1404
     dbc:	00002c80 	call	2c8 <IO_write>
	data_size = (IO_read(HPI_DATA))&0x0ff;
     dc0:	0009883a 	mov	r4,zero
     dc4:	00003300 	call	330 <IO_read>
     dc8:	d0a6cf85 	stb	r2,-25794(gp)
	printf("[ENUM PROCESS]:data packet size is %d\n",data_size);
     dcc:	d0a6cf83 	ldbu	r2,-25794(gp)
     dd0:	10803fcc 	andi	r2,r2,255
     dd4:	01000074 	movhi	r4,1
     dd8:	2107eb04 	addi	r4,r4,8108
     ddc:	100b883a 	mov	r5,r2
     de0:	00031240 	call	3124 <printf>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration
     de4:	00021300 	call	2130 <UsbSetConfig>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     de8:	00000306 	br	df8 <setup_keyboard+0x758>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
     dec:	00021300 	call	2130 <UsbSetConfig>
		usleep(10*1000);
     df0:	0109c404 	movi	r4,10000
     df4:	000fb580 	call	fb58 <usleep>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     df8:	010000c4 	movi	r4,3
     dfc:	00003300 	call	330 <IO_read>
     e00:	10bfffcc 	andi	r2,r2,65535
     e04:	1080040c 	andi	r2,r2,16
     e08:	103ff826 	beq	r2,zero,dec <__alt_data_end+0xfffab6bc>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     e0c:	00027a80 	call	27a8 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     e10:	01000084 	movi	r4,2
     e14:	01414184 	movi	r5,1286
     e18:	00002c80 	call	2c8 <IO_write>
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));
     e1c:	0009883a 	mov	r4,zero
     e20:	00003300 	call	330 <IO_read>
     e24:	10bfffcc 	andi	r2,r2,65535
     e28:	01000074 	movhi	r4,1
     e2c:	2107f504 	addi	r4,r4,8148
     e30:	100b883a 	mov	r5,r2
     e34:	00031240 	call	3124 <printf>

	IO_write(HPI_ADDR,0x0508);
     e38:	01000084 	movi	r4,2
     e3c:	01414204 	movi	r5,1288
     e40:	00002c80 	call	2c8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     e44:	0009883a 	mov	r4,zero
     e48:	00003300 	call	330 <IO_read>
     e4c:	d0a6cf0d 	sth	r2,-25796(gp)
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
     e50:	d0a6cf0b 	ldhu	r2,-25796(gp)
     e54:	10bfffcc 	andi	r2,r2,65535
     e58:	01000074 	movhi	r4,1
     e5c:	21080004 	addi	r4,r4,8192
     e60:	100b883a 	mov	r5,r2
     e64:	00031240 	call	3124 <printf>
	while (usb_ctl_val != 0x03)
     e68:	00000206 	br	e74 <setup_keyboard+0x7d4>
	{
		usb_ctl_val = UsbGetRetryCnt();
     e6c:	000282c0 	call	282c <UsbGetRetryCnt>
     e70:	d0a6cf0d 	sth	r2,-25796(gp)
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
     e74:	d0a6cf0b 	ldhu	r2,-25796(gp)
     e78:	10bfffcc 	andi	r2,r2,65535
     e7c:	108000d8 	cmpnei	r2,r2,3
     e80:	103ffa1e 	bne	r2,zero,e6c <__alt_data_end+0xfffab73c>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:set configuration done!-------------------\n");
     e84:	01000074 	movhi	r4,1
     e88:	21080c04 	addi	r4,r4,8240
     e8c:	00032180 	call	3218 <puts>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();
     e90:	000222c0 	call	222c <UsbClassRequest>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     e94:	00000306 	br	ea4 <setup_keyboard+0x804>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
     e98:	000222c0 	call	222c <UsbClassRequest>
		usleep(10*1000);
     e9c:	0109c404 	movi	r4,10000
     ea0:	000fb580 	call	fb58 <usleep>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     ea4:	010000c4 	movi	r4,3
     ea8:	00003300 	call	330 <IO_read>
     eac:	10bfffcc 	andi	r2,r2,65535
     eb0:	1080040c 	andi	r2,r2,16
     eb4:	103ff826 	beq	r2,zero,e98 <__alt_data_end+0xfffab768>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     eb8:	00027a80 	call	27a8 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     ebc:	01000084 	movi	r4,2
     ec0:	01414184 	movi	r5,1286
     ec4:	00002c80 	call	2c8 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
     ec8:	0009883a 	mov	r4,zero
     ecc:	00003300 	call	330 <IO_read>
     ed0:	10bfffcc 	andi	r2,r2,65535
     ed4:	01000074 	movhi	r4,1
     ed8:	21081e04 	addi	r4,r4,8312
     edc:	100b883a 	mov	r5,r2
     ee0:	00031240 	call	3124 <printf>

	IO_write(HPI_ADDR,0x0508);
     ee4:	01000084 	movi	r4,2
     ee8:	01414204 	movi	r5,1288
     eec:	00002c80 	call	2c8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     ef0:	0009883a 	mov	r4,zero
     ef4:	00003300 	call	330 <IO_read>
     ef8:	d0a6cf0d 	sth	r2,-25796(gp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
     efc:	d0a6cf0b 	ldhu	r2,-25796(gp)
     f00:	10bfffcc 	andi	r2,r2,65535
     f04:	01000074 	movhi	r4,1
     f08:	21082904 	addi	r4,r4,8356
     f0c:	100b883a 	mov	r5,r2
     f10:	00031240 	call	3124 <printf>
	while (usb_ctl_val != 0x03)
     f14:	00000206 	br	f20 <setup_keyboard+0x880>
	{
		usb_ctl_val = UsbGetRetryCnt();
     f18:	000282c0 	call	282c <UsbGetRetryCnt>
     f1c:	d0a6cf0d 	sth	r2,-25796(gp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
     f20:	d0a6cf0b 	ldhu	r2,-25796(gp)
     f24:	10bfffcc 	andi	r2,r2,65535
     f28:	108000d8 	cmpnei	r2,r2,3
     f2c:	103ffa1e 	bne	r2,zero,f18 <__alt_data_end+0xfffab7e8>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("------------[ENUM PROCESS]:class request out done!-------------------\n");
     f30:	01000074 	movhi	r4,1
     f34:	21083504 	addi	r4,r4,8404
     f38:	00032180 	call	3218 <puts>

	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();
     f3c:	00023280 	call	2328 <UsbGetHidDesc>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     f40:	00000306 	br	f50 <setup_keyboard+0x8b0>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
     f44:	00023280 	call	2328 <UsbGetHidDesc>
		usleep(10*1000);
     f48:	0109c404 	movi	r4,10000
     f4c:	000fb580 	call	fb58 <usleep>
	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     f50:	010000c4 	movi	r4,3
     f54:	00003300 	call	330 <IO_read>
     f58:	10bfffcc 	andi	r2,r2,65535
     f5c:	1080040c 	andi	r2,r2,16
     f60:	103ff826 	beq	r2,zero,f44 <__alt_data_end+0xfffab814>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     f64:	00027a80 	call	27a8 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     f68:	01000084 	movi	r4,2
     f6c:	01414184 	movi	r5,1286
     f70:	00002c80 	call	2c8 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
     f74:	0009883a 	mov	r4,zero
     f78:	00003300 	call	330 <IO_read>
     f7c:	10bfffcc 	andi	r2,r2,65535
     f80:	01000074 	movhi	r4,1
     f84:	21081e04 	addi	r4,r4,8312
     f88:	100b883a 	mov	r5,r2
     f8c:	00031240 	call	3124 <printf>

	IO_write(HPI_ADDR,0x0508);
     f90:	01000084 	movi	r4,2
     f94:	01414204 	movi	r5,1288
     f98:	00002c80 	call	2c8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     f9c:	0009883a 	mov	r4,zero
     fa0:	00003300 	call	330 <IO_read>
     fa4:	d0a6cf0d 	sth	r2,-25796(gp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
     fa8:	d0a6cf0b 	ldhu	r2,-25796(gp)
     fac:	10bfffcc 	andi	r2,r2,65535
     fb0:	01000074 	movhi	r4,1
     fb4:	21082904 	addi	r4,r4,8356
     fb8:	100b883a 	mov	r5,r2
     fbc:	00031240 	call	3124 <printf>
	while (usb_ctl_val != 0x03)
     fc0:	00000206 	br	fcc <setup_keyboard+0x92c>
	{
		usb_ctl_val = UsbGetRetryCnt();
     fc4:	000282c0 	call	282c <UsbGetRetryCnt>
     fc8:	d0a6cf0d 	sth	r2,-25796(gp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
     fcc:	d0a6cf0b 	ldhu	r2,-25796(gp)
     fd0:	10bfffcc 	andi	r2,r2,65535
     fd4:	108000d8 	cmpnei	r2,r2,3
     fd8:	103ffa1e 	bne	r2,zero,fc4 <__alt_data_end+0xfffab894>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get descriptor (class 0x21) done!-------------------\n");
     fdc:	01000074 	movhi	r4,1
     fe0:	21084704 	addi	r4,r4,8476
     fe4:	00032180 	call	3218 <puts>

	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
     fe8:	000246c0 	call	246c <UsbGetReportDesc>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     fec:	00000306 	br	ffc <setup_keyboard+0x95c>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
     ff0:	000246c0 	call	246c <UsbGetReportDesc>
		usleep(10*1000);
     ff4:	0109c404 	movi	r4,10000
     ff8:	000fb580 	call	fb58 <usleep>
	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     ffc:	010000c4 	movi	r4,3
    1000:	00003300 	call	330 <IO_read>
    1004:	10bfffcc 	andi	r2,r2,65535
    1008:	1080040c 	andi	r2,r2,16
    100c:	103ff826 	beq	r2,zero,ff0 <__alt_data_end+0xfffab8c0>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
    1010:	00027a80 	call	27a8 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
    1014:	01000084 	movi	r4,2
    1018:	01414184 	movi	r5,1286
    101c:	00002c80 	call	2c8 <IO_write>
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));
    1020:	0009883a 	mov	r4,zero
    1024:	00003300 	call	330 <IO_read>
    1028:	10bfffcc 	andi	r2,r2,65535
    102c:	01000074 	movhi	r4,1
    1030:	21085b04 	addi	r4,r4,8556
    1034:	100b883a 	mov	r5,r2
    1038:	00031240 	call	3124 <printf>

	IO_write(HPI_ADDR,0x0508);
    103c:	01000084 	movi	r4,2
    1040:	01414204 	movi	r5,1288
    1044:	00002c80 	call	2c8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
    1048:	0009883a 	mov	r4,zero
    104c:	00003300 	call	330 <IO_read>
    1050:	d0a6cf0d 	sth	r2,-25796(gp)
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
    1054:	d0a6cf0b 	ldhu	r2,-25796(gp)
    1058:	10bfffcc 	andi	r2,r2,65535
    105c:	01000074 	movhi	r4,1
    1060:	21086704 	addi	r4,r4,8604
    1064:	100b883a 	mov	r5,r2
    1068:	00031240 	call	3124 <printf>
	while (usb_ctl_val != 0x03)
    106c:	00000206 	br	1078 <setup_keyboard+0x9d8>
	{
		usb_ctl_val = UsbGetRetryCnt();
    1070:	000282c0 	call	282c <UsbGetRetryCnt>
    1074:	d0a6cf0d 	sth	r2,-25796(gp)
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
    1078:	d0a6cf0b 	ldhu	r2,-25796(gp)
    107c:	10bfffcc 	andi	r2,r2,65535
    1080:	108000d8 	cmpnei	r2,r2,3
    1084:	103ffa1e 	bne	r2,zero,1070 <__alt_data_end+0xfffab940>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get descriptor (class 0x22) done!----------------\n");
    1088:	01000074 	movhi	r4,1
    108c:	21087304 	addi	r4,r4,8652
    1090:	00032180 	call	3218 <puts>


	//-----------------------------------get keycode value------------------------------------------------//


	return;
    1094:	0001883a 	nop
}
    1098:	e037883a 	mov	sp,fp
    109c:	dfc00117 	ldw	ra,4(sp)
    10a0:	df000017 	ldw	fp,0(sp)
    10a4:	dec00204 	addi	sp,sp,8
    10a8:	f800283a 	ret

000010ac <renderer>:

void move_player(player *current, int x_pos, int y_pos);
void fire_projectile(player *current);

void renderer(int x, int y, int sprite_num, int is_shadow)
{
    10ac:	defffb04 	addi	sp,sp,-20
    10b0:	df000415 	stw	fp,16(sp)
    10b4:	df000404 	addi	fp,sp,16
    10b8:	e13ffc15 	stw	r4,-16(fp)
    10bc:	e17ffd15 	stw	r5,-12(fp)
    10c0:	e1bffe15 	stw	r6,-8(fp)
    10c4:	e1ffff15 	stw	r7,-4(fp)
	if(is_shadow==1)
    10c8:	e0bfff17 	ldw	r2,-4(fp)
    10cc:	10800058 	cmpnei	r2,r2,1
    10d0:	1000051e 	bne	r2,zero,10e8 <renderer+0x3c>
		*sw_to_hw = 4;
    10d4:	00800234 	movhi	r2,8
    10d8:	10840804 	addi	r2,r2,4128
    10dc:	00c00104 	movi	r3,4
    10e0:	10c00015 	stw	r3,0(r2)
    10e4:	00000606 	br	1100 <renderer+0x54>
	else
		*sw_to_hw &= 0;
    10e8:	00800234 	movhi	r2,8
    10ec:	10840804 	addi	r2,r2,4128
    10f0:	10800017 	ldw	r2,0(r2)
    10f4:	00800234 	movhi	r2,8
    10f8:	10840804 	addi	r2,r2,4128
    10fc:	10000015 	stw	zero,0(r2)
	*sprite_number = sprite_num;
    1100:	00800234 	movhi	r2,8
    1104:	10841004 	addi	r2,r2,4160
    1108:	e0fffe17 	ldw	r3,-8(fp)
    110c:	10c00015 	stw	r3,0(r2)
	*sprite_xy = 1024*x + y;
    1110:	00800234 	movhi	r2,8
    1114:	10840c04 	addi	r2,r2,4144
    1118:	e0fffc17 	ldw	r3,-16(fp)
    111c:	180892ba 	slli	r4,r3,10
    1120:	e0fffd17 	ldw	r3,-12(fp)
    1124:	20c7883a 	add	r3,r4,r3
    1128:	10c00015 	stw	r3,0(r2)
	*sw_to_hw |= 2;
    112c:	00800234 	movhi	r2,8
    1130:	10840804 	addi	r2,r2,4128
    1134:	00c00234 	movhi	r3,8
    1138:	18c40804 	addi	r3,r3,4128
    113c:	18c00017 	ldw	r3,0(r3)
    1140:	18c00094 	ori	r3,r3,2
    1144:	10c00015 	stw	r3,0(r2)
	while(*hw_to_sw%2 != 0)
    1148:	0001883a 	nop
    114c:	00800234 	movhi	r2,8
    1150:	10840404 	addi	r2,r2,4112
    1154:	10800017 	ldw	r2,0(r2)
    1158:	1080004c 	andi	r2,r2,1
    115c:	103ffb1e 	bne	r2,zero,114c <__alt_data_end+0xfffaba1c>
	{}
	*sw_to_hw &= ~2;
    1160:	00800234 	movhi	r2,8
    1164:	10840804 	addi	r2,r2,4128
    1168:	00c00234 	movhi	r3,8
    116c:	18c40804 	addi	r3,r3,4128
    1170:	19000017 	ldw	r4,0(r3)
    1174:	00ffff44 	movi	r3,-3
    1178:	20c6703a 	and	r3,r4,r3
    117c:	10c00015 	stw	r3,0(r2)
	while(*hw_to_sw != 1)
    1180:	0001883a 	nop
    1184:	00800234 	movhi	r2,8
    1188:	10840404 	addi	r2,r2,4112
    118c:	10800017 	ldw	r2,0(r2)
    1190:	10800058 	cmpnei	r2,r2,1
    1194:	103ffb1e 	bne	r2,zero,1184 <__alt_data_end+0xfffaba54>
	{}
	*sw_to_hw |= 1;
    1198:	00800234 	movhi	r2,8
    119c:	10840804 	addi	r2,r2,4128
    11a0:	00c00234 	movhi	r3,8
    11a4:	18c40804 	addi	r3,r3,4128
    11a8:	18c00017 	ldw	r3,0(r3)
    11ac:	18c00054 	ori	r3,r3,1
    11b0:	10c00015 	stw	r3,0(r2)
	return;
    11b4:	0001883a 	nop
}
    11b8:	e037883a 	mov	sp,fp
    11bc:	df000017 	ldw	fp,0(sp)
    11c0:	dec00104 	addi	sp,sp,4
    11c4:	f800283a 	ret

000011c8 <render_shadows>:

void render_shadows(player *first,player *second){
    11c8:	defffc04 	addi	sp,sp,-16
    11cc:	dfc00315 	stw	ra,12(sp)
    11d0:	df000215 	stw	fp,8(sp)
    11d4:	df000204 	addi	fp,sp,8
    11d8:	e13ffe15 	stw	r4,-8(fp)
    11dc:	e17fff15 	stw	r5,-4(fp)
	if(first==NULL || second ==NULL){
    11e0:	e0bffe17 	ldw	r2,-8(fp)
    11e4:	10000226 	beq	r2,zero,11f0 <render_shadows+0x28>
    11e8:	e0bfff17 	ldw	r2,-4(fp)
    11ec:	1000041e 	bne	r2,zero,1200 <render_shadows+0x38>
			printf("players not instantiated");
    11f0:	01000074 	movhi	r4,1
    11f4:	21088704 	addi	r4,r4,8732
    11f8:	00031240 	call	3124 <printf>
    11fc:	00001406 	br	1250 <render_shadows+0x88>
	}
	else{
		renderer(first->old_x,first->old_y,first->id,1);
    1200:	e0bffe17 	ldw	r2,-8(fp)
    1204:	11000417 	ldw	r4,16(r2)
    1208:	e0bffe17 	ldw	r2,-8(fp)
    120c:	10c00517 	ldw	r3,20(r2)
    1210:	e0bffe17 	ldw	r2,-8(fp)
    1214:	10800317 	ldw	r2,12(r2)
    1218:	180b883a 	mov	r5,r3
    121c:	100d883a 	mov	r6,r2
    1220:	01c00044 	movi	r7,1
    1224:	00010ac0 	call	10ac <renderer>
		renderer(second->old_x,second->old_y,second->id,1);
    1228:	e0bfff17 	ldw	r2,-4(fp)
    122c:	11000417 	ldw	r4,16(r2)
    1230:	e0bfff17 	ldw	r2,-4(fp)
    1234:	10c00517 	ldw	r3,20(r2)
    1238:	e0bfff17 	ldw	r2,-4(fp)
    123c:	10800317 	ldw	r2,12(r2)
    1240:	180b883a 	mov	r5,r3
    1244:	100d883a 	mov	r6,r2
    1248:	01c00044 	movi	r7,1
    124c:	00010ac0 	call	10ac <renderer>
	}
	return;
    1250:	0001883a 	nop
}
    1254:	e037883a 	mov	sp,fp
    1258:	dfc00117 	ldw	ra,4(sp)
    125c:	df000017 	ldw	fp,0(sp)
    1260:	dec00204 	addi	sp,sp,8
    1264:	f800283a 	ret

00001268 <render_players>:

void render_players(player *first,player *second){
    1268:	defffc04 	addi	sp,sp,-16
    126c:	dfc00315 	stw	ra,12(sp)
    1270:	df000215 	stw	fp,8(sp)
    1274:	df000204 	addi	fp,sp,8
    1278:	e13ffe15 	stw	r4,-8(fp)
    127c:	e17fff15 	stw	r5,-4(fp)
	if(first==NULL || second ==NULL){
    1280:	e0bffe17 	ldw	r2,-8(fp)
    1284:	10000226 	beq	r2,zero,1290 <render_players+0x28>
    1288:	e0bfff17 	ldw	r2,-4(fp)
    128c:	1000041e 	bne	r2,zero,12a0 <render_players+0x38>
		printf("players not instantiated");
    1290:	01000074 	movhi	r4,1
    1294:	21088704 	addi	r4,r4,8732
    1298:	00031240 	call	3124 <printf>
    129c:	00001706 	br	12fc <render_players+0x94>
	}
	else{
		render_shadows(first,second);
    12a0:	e13ffe17 	ldw	r4,-8(fp)
    12a4:	e17fff17 	ldw	r5,-4(fp)
    12a8:	00011c80 	call	11c8 <render_shadows>
		renderer(first->x_pos,first->y_pos,first->id,0);
    12ac:	e0bffe17 	ldw	r2,-8(fp)
    12b0:	11000017 	ldw	r4,0(r2)
    12b4:	e0bffe17 	ldw	r2,-8(fp)
    12b8:	10c00117 	ldw	r3,4(r2)
    12bc:	e0bffe17 	ldw	r2,-8(fp)
    12c0:	10800317 	ldw	r2,12(r2)
    12c4:	180b883a 	mov	r5,r3
    12c8:	100d883a 	mov	r6,r2
    12cc:	000f883a 	mov	r7,zero
    12d0:	00010ac0 	call	10ac <renderer>
		renderer(second->x_pos,second->y_pos,second->id,0);
    12d4:	e0bfff17 	ldw	r2,-4(fp)
    12d8:	11000017 	ldw	r4,0(r2)
    12dc:	e0bfff17 	ldw	r2,-4(fp)
    12e0:	10c00117 	ldw	r3,4(r2)
    12e4:	e0bfff17 	ldw	r2,-4(fp)
    12e8:	10800317 	ldw	r2,12(r2)
    12ec:	180b883a 	mov	r5,r3
    12f0:	100d883a 	mov	r6,r2
    12f4:	000f883a 	mov	r7,zero
    12f8:	00010ac0 	call	10ac <renderer>
	}
}
    12fc:	e037883a 	mov	sp,fp
    1300:	dfc00117 	ldw	ra,4(sp)
    1304:	df000017 	ldw	fp,0(sp)
    1308:	dec00204 	addi	sp,sp,8
    130c:	f800283a 	ret

00001310 <keycode_effect>:
void keycode_effect(player *first,player *second,unsigned int *arr){
    1310:	defffa04 	addi	sp,sp,-24
    1314:	dfc00515 	stw	ra,20(sp)
    1318:	df000415 	stw	fp,16(sp)
    131c:	df000404 	addi	fp,sp,16
    1320:	e13ffd15 	stw	r4,-12(fp)
    1324:	e17ffe15 	stw	r5,-8(fp)
    1328:	e1bfff15 	stw	r6,-4(fp)
	int i=0;
    132c:	e03ffc15 	stw	zero,-16(fp)
	for(i=0;i<4;i++){
    1330:	e03ffc15 	stw	zero,-16(fp)
    1334:	00006106 	br	14bc <keycode_effect+0x1ac>
		if(arr[i]==0x04){
    1338:	e0bffc17 	ldw	r2,-16(fp)
    133c:	1085883a 	add	r2,r2,r2
    1340:	1085883a 	add	r2,r2,r2
    1344:	1007883a 	mov	r3,r2
    1348:	e0bfff17 	ldw	r2,-4(fp)
    134c:	10c5883a 	add	r2,r2,r3
    1350:	10800017 	ldw	r2,0(r2)
    1354:	10800118 	cmpnei	r2,r2,4
    1358:	1000091e 	bne	r2,zero,1380 <keycode_effect+0x70>
			move_player(first,first->x_pos-5,first->y_pos);
    135c:	e0bffd17 	ldw	r2,-12(fp)
    1360:	10800017 	ldw	r2,0(r2)
    1364:	10fffec4 	addi	r3,r2,-5
    1368:	e0bffd17 	ldw	r2,-12(fp)
    136c:	10800117 	ldw	r2,4(r2)
    1370:	e13ffd17 	ldw	r4,-12(fp)
    1374:	180b883a 	mov	r5,r3
    1378:	100d883a 	mov	r6,r2
    137c:	00016980 	call	1698 <move_player>
		}
		if(arr[i]==0x07){
    1380:	e0bffc17 	ldw	r2,-16(fp)
    1384:	1085883a 	add	r2,r2,r2
    1388:	1085883a 	add	r2,r2,r2
    138c:	1007883a 	mov	r3,r2
    1390:	e0bfff17 	ldw	r2,-4(fp)
    1394:	10c5883a 	add	r2,r2,r3
    1398:	10800017 	ldw	r2,0(r2)
    139c:	108001d8 	cmpnei	r2,r2,7
    13a0:	1000091e 	bne	r2,zero,13c8 <keycode_effect+0xb8>
			move_player(first,first->x_pos+5,first->y_pos);
    13a4:	e0bffd17 	ldw	r2,-12(fp)
    13a8:	10800017 	ldw	r2,0(r2)
    13ac:	10c00144 	addi	r3,r2,5
    13b0:	e0bffd17 	ldw	r2,-12(fp)
    13b4:	10800117 	ldw	r2,4(r2)
    13b8:	e13ffd17 	ldw	r4,-12(fp)
    13bc:	180b883a 	mov	r5,r3
    13c0:	100d883a 	mov	r6,r2
    13c4:	00016980 	call	1698 <move_player>
		}
		if(arr[i]==0x26){
    13c8:	e0bffc17 	ldw	r2,-16(fp)
    13cc:	1085883a 	add	r2,r2,r2
    13d0:	1085883a 	add	r2,r2,r2
    13d4:	1007883a 	mov	r3,r2
    13d8:	e0bfff17 	ldw	r2,-4(fp)
    13dc:	10c5883a 	add	r2,r2,r3
    13e0:	10800017 	ldw	r2,0(r2)
    13e4:	10800998 	cmpnei	r2,r2,38
    13e8:	1000021e 	bne	r2,zero,13f4 <keycode_effect+0xe4>
			fire_projectile(first);
    13ec:	e13ffd17 	ldw	r4,-12(fp)
    13f0:	00015500 	call	1550 <fire_projectile>
		}
		if(arr[i]==0x80){
    13f4:	e0bffc17 	ldw	r2,-16(fp)
    13f8:	1085883a 	add	r2,r2,r2
    13fc:	1085883a 	add	r2,r2,r2
    1400:	1007883a 	mov	r3,r2
    1404:	e0bfff17 	ldw	r2,-4(fp)
    1408:	10c5883a 	add	r2,r2,r3
    140c:	10800017 	ldw	r2,0(r2)
    1410:	10802018 	cmpnei	r2,r2,128
    1414:	1000091e 	bne	r2,zero,143c <keycode_effect+0x12c>
			move_player(second,second->x_pos-5,second->y_pos);
    1418:	e0bffe17 	ldw	r2,-8(fp)
    141c:	10800017 	ldw	r2,0(r2)
    1420:	10fffec4 	addi	r3,r2,-5
    1424:	e0bffe17 	ldw	r2,-8(fp)
    1428:	10800117 	ldw	r2,4(r2)
    142c:	e13ffe17 	ldw	r4,-8(fp)
    1430:	180b883a 	mov	r5,r3
    1434:	100d883a 	mov	r6,r2
    1438:	00016980 	call	1698 <move_player>
		}
		if(arr[i]==0x79){
    143c:	e0bffc17 	ldw	r2,-16(fp)
    1440:	1085883a 	add	r2,r2,r2
    1444:	1085883a 	add	r2,r2,r2
    1448:	1007883a 	mov	r3,r2
    144c:	e0bfff17 	ldw	r2,-4(fp)
    1450:	10c5883a 	add	r2,r2,r3
    1454:	10800017 	ldw	r2,0(r2)
    1458:	10801e58 	cmpnei	r2,r2,121
    145c:	1000091e 	bne	r2,zero,1484 <keycode_effect+0x174>
			move_player(second,second->x_pos+5,second->y_pos);
    1460:	e0bffe17 	ldw	r2,-8(fp)
    1464:	10800017 	ldw	r2,0(r2)
    1468:	10c00144 	addi	r3,r2,5
    146c:	e0bffe17 	ldw	r2,-8(fp)
    1470:	10800117 	ldw	r2,4(r2)
    1474:	e13ffe17 	ldw	r4,-8(fp)
    1478:	180b883a 	mov	r5,r3
    147c:	100d883a 	mov	r6,r2
    1480:	00016980 	call	1698 <move_player>
		}
		if(arr[i]==0x82){
    1484:	e0bffc17 	ldw	r2,-16(fp)
    1488:	1085883a 	add	r2,r2,r2
    148c:	1085883a 	add	r2,r2,r2
    1490:	1007883a 	mov	r3,r2
    1494:	e0bfff17 	ldw	r2,-4(fp)
    1498:	10c5883a 	add	r2,r2,r3
    149c:	10800017 	ldw	r2,0(r2)
    14a0:	10802098 	cmpnei	r2,r2,130
    14a4:	1000021e 	bne	r2,zero,14b0 <keycode_effect+0x1a0>
			fire_projectile(second);
    14a8:	e13ffe17 	ldw	r4,-8(fp)
    14ac:	00015500 	call	1550 <fire_projectile>
		renderer(second->x_pos,second->y_pos,second->id,0);
	}
}
void keycode_effect(player *first,player *second,unsigned int *arr){
	int i=0;
	for(i=0;i<4;i++){
    14b0:	e0bffc17 	ldw	r2,-16(fp)
    14b4:	10800044 	addi	r2,r2,1
    14b8:	e0bffc15 	stw	r2,-16(fp)
    14bc:	e0bffc17 	ldw	r2,-16(fp)
    14c0:	10800110 	cmplti	r2,r2,4
    14c4:	103f9c1e 	bne	r2,zero,1338 <__alt_data_end+0xfffabc08>
		if(arr[i]==0x82){
			fire_projectile(second);
		}
	}

}
    14c8:	e037883a 	mov	sp,fp
    14cc:	dfc00117 	ldw	ra,4(sp)
    14d0:	df000017 	ldw	fp,0(sp)
    14d4:	dec00204 	addi	sp,sp,8
    14d8:	f800283a 	ret

000014dc <parse_keycode>:
void parse_keycode(unsigned int *arr,unsigned int keycode1,unsigned int keycode2){
    14dc:	defffc04 	addi	sp,sp,-16
    14e0:	df000315 	stw	fp,12(sp)
    14e4:	df000304 	addi	fp,sp,12
    14e8:	e13ffd15 	stw	r4,-12(fp)
    14ec:	e17ffe15 	stw	r5,-8(fp)
    14f0:	e1bfff15 	stw	r6,-4(fp)
	arr[0]=keycode1%16;
    14f4:	e0bffe17 	ldw	r2,-8(fp)
    14f8:	10c003cc 	andi	r3,r2,15
    14fc:	e0bffd17 	ldw	r2,-12(fp)
    1500:	10c00015 	stw	r3,0(r2)
	arr[1]=keycode1/16;
    1504:	e0bffd17 	ldw	r2,-12(fp)
    1508:	10800104 	addi	r2,r2,4
    150c:	e0fffe17 	ldw	r3,-8(fp)
    1510:	1806d13a 	srli	r3,r3,4
    1514:	10c00015 	stw	r3,0(r2)
	arr[2]=keycode2%16;
    1518:	e0bffd17 	ldw	r2,-12(fp)
    151c:	10800204 	addi	r2,r2,8
    1520:	e0ffff17 	ldw	r3,-4(fp)
    1524:	18c003cc 	andi	r3,r3,15
    1528:	10c00015 	stw	r3,0(r2)
	arr[3]=keycode2/16;
    152c:	e0bffd17 	ldw	r2,-12(fp)
    1530:	10800304 	addi	r2,r2,12
    1534:	e0ffff17 	ldw	r3,-4(fp)
    1538:	1806d13a 	srli	r3,r3,4
    153c:	10c00015 	stw	r3,0(r2)
}
    1540:	e037883a 	mov	sp,fp
    1544:	df000017 	ldw	fp,0(sp)
    1548:	dec00104 	addi	sp,sp,4
    154c:	f800283a 	ret

00001550 <fire_projectile>:


void fire_projectile(player *current)
{
    1550:	defffc04 	addi	sp,sp,-16
    1554:	dfc00315 	stw	ra,12(sp)
    1558:	df000215 	stw	fp,8(sp)
    155c:	df000204 	addi	fp,sp,8
    1560:	e13fff15 	stw	r4,-4(fp)
	player_projectile *new=(player_projectile*)malloc(sizeof(player_projectile));
    1564:	01000504 	movi	r4,20
    1568:	00029280 	call	2928 <malloc>
    156c:	e0bffe15 	stw	r2,-8(fp)
	new->x_pos=current->x_pos;//TODO: Refine start point
    1570:	e0bfff17 	ldw	r2,-4(fp)
    1574:	10c00017 	ldw	r3,0(r2)
    1578:	e0bffe17 	ldw	r2,-8(fp)
    157c:	10c00015 	stw	r3,0(r2)
	new->y_pos=current->y_pos -20;
    1580:	e0bfff17 	ldw	r2,-4(fp)
    1584:	10800117 	ldw	r2,4(r2)
    1588:	10fffb04 	addi	r3,r2,-20
    158c:	e0bffe17 	ldw	r2,-8(fp)
    1590:	10c00115 	stw	r3,4(r2)
	if(projectiles==NULL){
    1594:	d0a6d217 	ldw	r2,-25784(gp)
    1598:	1000031e 	bne	r2,zero,15a8 <fire_projectile+0x58>
		projectiles=new;
    159c:	e0bffe17 	ldw	r2,-8(fp)
    15a0:	d0a6d215 	stw	r2,-25784(gp)
    15a4:	00000506 	br	15bc <fire_projectile+0x6c>
	}
	else{
		new->next=projectiles;
    15a8:	d0e6d217 	ldw	r3,-25784(gp)
    15ac:	e0bffe17 	ldw	r2,-8(fp)
    15b0:	10c00415 	stw	r3,16(r2)
		projectiles=new;
    15b4:	e0bffe17 	ldw	r2,-8(fp)
    15b8:	d0a6d215 	stw	r2,-25784(gp)
	}
}
    15bc:	e037883a 	mov	sp,fp
    15c0:	dfc00117 	ldw	ra,4(sp)
    15c4:	df000017 	ldw	fp,0(sp)
    15c8:	dec00204 	addi	sp,sp,8
    15cc:	f800283a 	ret

000015d0 <check_projectiles>:

void check_projectiles()
{
    15d0:	deffff04 	addi	sp,sp,-4
    15d4:	df000015 	stw	fp,0(sp)
    15d8:	d839883a 	mov	fp,sp

}
    15dc:	e037883a 	mov	sp,fp
    15e0:	df000017 	ldw	fp,0(sp)
    15e4:	dec00104 	addi	sp,sp,4
    15e8:	f800283a 	ret

000015ec <init_players>:



void init_players(player *first,player *second){
    15ec:	defffc04 	addi	sp,sp,-16
    15f0:	dfc00315 	stw	ra,12(sp)
    15f4:	df000215 	stw	fp,8(sp)
    15f8:	df000204 	addi	fp,sp,8
    15fc:	e13ffe15 	stw	r4,-8(fp)
    1600:	e17fff15 	stw	r5,-4(fp)
	if(first==NULL || second ==NULL)
    1604:	e0bffe17 	ldw	r2,-8(fp)
    1608:	10000226 	beq	r2,zero,1614 <init_players+0x28>
    160c:	e0bfff17 	ldw	r2,-4(fp)
    1610:	1000041e 	bne	r2,zero,1624 <init_players+0x38>
	{
		printf("players not instantiated");
    1614:	01000074 	movhi	r4,1
    1618:	21088704 	addi	r4,r4,8732
    161c:	00031240 	call	3124 <printf>
    1620:	00001806 	br	1684 <init_players+0x98>
	}
	else{
		first->x_pos = 300,
    1624:	e0bffe17 	ldw	r2,-8(fp)
    1628:	00c04b04 	movi	r3,300
    162c:	10c00015 	stw	r3,0(r2)
		first->y_pos = 400;
    1630:	e0bffe17 	ldw	r2,-8(fp)
    1634:	00c06404 	movi	r3,400
    1638:	10c00115 	stw	r3,4(r2)
		first->health = 3;
    163c:	e0bffe17 	ldw	r2,-8(fp)
    1640:	00c000c4 	movi	r3,3
    1644:	10c00215 	stw	r3,8(r2)
		first->id=player_sprite1;
    1648:	e0bffe17 	ldw	r2,-8(fp)
    164c:	00c00084 	movi	r3,2
    1650:	10c00315 	stw	r3,12(r2)
		second->x_pos= 200;
    1654:	e0bfff17 	ldw	r2,-4(fp)
    1658:	00c03204 	movi	r3,200
    165c:	10c00015 	stw	r3,0(r2)
		second->y_pos= 200;
    1660:	e0bfff17 	ldw	r2,-4(fp)
    1664:	00c03204 	movi	r3,200
    1668:	10c00115 	stw	r3,4(r2)
		second->health=3;
    166c:	e0bfff17 	ldw	r2,-4(fp)
    1670:	00c000c4 	movi	r3,3
    1674:	10c00215 	stw	r3,8(r2)
		second->id = player_sprite1;
    1678:	e0bfff17 	ldw	r2,-4(fp)
    167c:	00c00084 	movi	r3,2
    1680:	10c00315 	stw	r3,12(r2)
	}
}
    1684:	e037883a 	mov	sp,fp
    1688:	dfc00117 	ldw	ra,4(sp)
    168c:	df000017 	ldw	fp,0(sp)
    1690:	dec00204 	addi	sp,sp,8
    1694:	f800283a 	ret

00001698 <move_player>:



void move_player(player *current, int x_pos, int y_pos){
    1698:	defffb04 	addi	sp,sp,-20
    169c:	dfc00415 	stw	ra,16(sp)
    16a0:	df000315 	stw	fp,12(sp)
    16a4:	df000304 	addi	fp,sp,12
    16a8:	e13ffd15 	stw	r4,-12(fp)
    16ac:	e17ffe15 	stw	r5,-8(fp)
    16b0:	e1bfff15 	stw	r6,-4(fp)
	if(current==NULL)
    16b4:	e0bffd17 	ldw	r2,-12(fp)
    16b8:	1000041e 	bne	r2,zero,16cc <move_player+0x34>
		{
			printf("players not instantiated");
    16bc:	01000074 	movhi	r4,1
    16c0:	21088704 	addi	r4,r4,8732
    16c4:	00031240 	call	3124 <printf>
    16c8:	00001a06 	br	1734 <move_player+0x9c>
		}
	else{
		current->old_x=current->x_pos;
    16cc:	e0bffd17 	ldw	r2,-12(fp)
    16d0:	10c00017 	ldw	r3,0(r2)
    16d4:	e0bffd17 	ldw	r2,-12(fp)
    16d8:	10c00415 	stw	r3,16(r2)
		current->old_y=current->y_pos;
    16dc:	e0bffd17 	ldw	r2,-12(fp)
    16e0:	10c00117 	ldw	r3,4(r2)
    16e4:	e0bffd17 	ldw	r2,-12(fp)
    16e8:	10c00515 	stw	r3,20(r2)
		if((x_pos+64) < x_bounds && x_pos > 0 && y_pos > 0 && (y_pos+64)<y_bounds){
    16ec:	e0bffe17 	ldw	r2,-8(fp)
    16f0:	10801004 	addi	r2,r2,64
    16f4:	1080a008 	cmpgei	r2,r2,640
    16f8:	10000e1e 	bne	r2,zero,1734 <move_player+0x9c>
    16fc:	e0bffe17 	ldw	r2,-8(fp)
    1700:	00800c0e 	bge	zero,r2,1734 <move_player+0x9c>
    1704:	e0bfff17 	ldw	r2,-4(fp)
    1708:	00800a0e 	bge	zero,r2,1734 <move_player+0x9c>
    170c:	e0bfff17 	ldw	r2,-4(fp)
    1710:	10801004 	addi	r2,r2,64
    1714:	10807808 	cmpgei	r2,r2,480
    1718:	1000061e 	bne	r2,zero,1734 <move_player+0x9c>
			current->x_pos = x_pos;
    171c:	e0bffd17 	ldw	r2,-12(fp)
    1720:	e0fffe17 	ldw	r3,-8(fp)
    1724:	10c00015 	stw	r3,0(r2)
			current->y_pos = y_pos;
    1728:	e0bffd17 	ldw	r2,-12(fp)
    172c:	e0ffff17 	ldw	r3,-4(fp)
    1730:	10c00115 	stw	r3,4(r2)
		}
	}
}
    1734:	e037883a 	mov	sp,fp
    1738:	dfc00117 	ldw	ra,4(sp)
    173c:	df000017 	ldw	fp,0(sp)
    1740:	dec00204 	addi	sp,sp,8
    1744:	f800283a 	ret

00001748 <main>:



int main(void){
    1748:	defff604 	addi	sp,sp,-40
    174c:	dfc00915 	stw	ra,36(sp)
    1750:	df000815 	stw	fp,32(sp)
    1754:	df000804 	addi	fp,sp,32
	setup_keyboard();
    1758:	00006a00 	call	6a0 <setup_keyboard>
	unsigned int keycode1,keycode2;
	player *first=(player *)malloc(sizeof(player));
    175c:	01000604 	movi	r4,24
    1760:	00029280 	call	2928 <malloc>
    1764:	e0bff815 	stw	r2,-32(fp)
	player *second=(player *)malloc(sizeof(player));
    1768:	01000604 	movi	r4,24
    176c:	00029280 	call	2928 <malloc>
    1770:	e0bff915 	stw	r2,-28(fp)
	init_players(first,second);
    1774:	e13ff817 	ldw	r4,-32(fp)
    1778:	e17ff917 	ldw	r5,-28(fp)
    177c:	00015ec0 	call	15ec <init_players>
	unsigned int arr[4]={0,0,0,0};
    1780:	e03ffc15 	stw	zero,-16(fp)
    1784:	e03ffd15 	stw	zero,-12(fp)
    1788:	e03ffe15 	stw	zero,-8(fp)
    178c:	e03fff15 	stw	zero,-4(fp)
	while(1)
		{
			if(get_keycode(&keycode1,&keycode2)==0){
    1790:	e0fffa04 	addi	r3,fp,-24
    1794:	e0bffb04 	addi	r2,fp,-20
    1798:	1809883a 	mov	r4,r3
    179c:	100b883a 	mov	r5,r2
    17a0:	00003940 	call	394 <get_keycode>
    17a4:	10000e1e 	bne	r2,zero,17e0 <main+0x98>
				parse_keycode(arr,keycode1,keycode2);
    17a8:	e0fffa17 	ldw	r3,-24(fp)
    17ac:	e0bffb17 	ldw	r2,-20(fp)
    17b0:	e13ffc04 	addi	r4,fp,-16
    17b4:	180b883a 	mov	r5,r3
    17b8:	100d883a 	mov	r6,r2
    17bc:	00014dc0 	call	14dc <parse_keycode>
				keycode_effect(first,second,arr);
    17c0:	e0bffc04 	addi	r2,fp,-16
    17c4:	e13ff817 	ldw	r4,-32(fp)
    17c8:	e17ff917 	ldw	r5,-28(fp)
    17cc:	100d883a 	mov	r6,r2
    17d0:	00013100 	call	1310 <keycode_effect>
				render_players(first,second);
    17d4:	e13ff817 	ldw	r4,-32(fp)
    17d8:	e17ff917 	ldw	r5,-28(fp)
    17dc:	00012680 	call	1268 <render_players>
			}

		}
    17e0:	003feb06 	br	1790 <__alt_data_end+0xfffac060>

000017e4 <UsbWrite>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbWrite(alt_u16 Address, alt_u16 Data)
{
    17e4:	defffc04 	addi	sp,sp,-16
    17e8:	dfc00315 	stw	ra,12(sp)
    17ec:	df000215 	stw	fp,8(sp)
    17f0:	df000204 	addi	fp,sp,8
    17f4:	2007883a 	mov	r3,r4
    17f8:	2805883a 	mov	r2,r5
    17fc:	e0fffe0d 	sth	r3,-8(fp)
    1800:	e0bfff0d 	sth	r2,-4(fp)
	IO_write(HPI_ADDR_PORT, Address);
    1804:	e0bffe0b 	ldhu	r2,-8(fp)
    1808:	01000084 	movi	r4,2
    180c:	100b883a 	mov	r5,r2
    1810:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA_PORT, Data);
    1814:	e0bfff0b 	ldhu	r2,-4(fp)
    1818:	0009883a 	mov	r4,zero
    181c:	100b883a 	mov	r5,r2
    1820:	00002c80 	call	2c8 <IO_write>
}
    1824:	e037883a 	mov	sp,fp
    1828:	dfc00117 	ldw	ra,4(sp)
    182c:	df000017 	ldw	fp,0(sp)
    1830:	dec00204 	addi	sp,sp,8
    1834:	f800283a 	ret

00001838 <UsbRead>:
 *
 * @note     None
 *
 ******************************************************************************/
alt_u16 UsbRead(alt_u16 Address)
{
    1838:	defffd04 	addi	sp,sp,-12
    183c:	dfc00215 	stw	ra,8(sp)
    1840:	df000115 	stw	fp,4(sp)
    1844:	df000104 	addi	fp,sp,4
    1848:	2005883a 	mov	r2,r4
    184c:	e0bfff0d 	sth	r2,-4(fp)
	IO_write(HPI_ADDR_PORT, Address);
    1850:	e0bfff0b 	ldhu	r2,-4(fp)
    1854:	01000084 	movi	r4,2
    1858:	100b883a 	mov	r5,r2
    185c:	00002c80 	call	2c8 <IO_write>
	return IO_read(HPI_DATA_PORT);
    1860:	0009883a 	mov	r4,zero
    1864:	00003300 	call	330 <IO_read>
}
    1868:	e037883a 	mov	sp,fp
    186c:	dfc00117 	ldw	ra,4(sp)
    1870:	df000017 	ldw	fp,0(sp)
    1874:	dec00204 	addi	sp,sp,8
    1878:	f800283a 	ret

0000187c <UsbSoftReset>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbSoftReset()
{
    187c:	defffe04 	addi	sp,sp,-8
    1880:	dfc00115 	stw	ra,4(sp)
    1884:	df000015 	stw	fp,0(sp)
    1888:	d839883a 	mov	fp,sp
	//XIo_Out16(USB_MAILBOX, COMM_RESET);
	IO_write(HPI_MAILBOX,COMM_RESET); //COMM_JUMP2CODE
    188c:	01000044 	movi	r4,1
    1890:	017e9414 	movui	r5,64080
    1894:	00002c80 	call	2c8 <IO_write>
	usleep(100000);
    1898:	010000b4 	movhi	r4,2
    189c:	2121a804 	addi	r4,r4,-31072
    18a0:	000fb580 	call	fb58 <usleep>
	printf("[USB INIT]:reset finished!\n");
    18a4:	01000074 	movhi	r4,1
    18a8:	21088e04 	addi	r4,r4,8760
    18ac:	00032180 	call	3218 <puts>

	usleep(500000);
    18b0:	01000234 	movhi	r4,8
    18b4:	21284804 	addi	r4,r4,-24288
    18b8:	000fb580 	call	fb58 <usleep>
	printf("[USB INIT]:Clear up the interrupt\r\n");
    18bc:	01000074 	movhi	r4,1
    18c0:	21089504 	addi	r4,r4,8788
    18c4:	00032180 	call	3218 <puts>
	IO_read(HPI_MAILBOX);
    18c8:	01000044 	movi	r4,1
    18cc:	00003300 	call	330 <IO_read>
	IO_read(HPI_STATUS);
    18d0:	010000c4 	movi	r4,3
    18d4:	00003300 	call	330 <IO_read>

	// Had to add the write due to a bug in BIOS where they overwrite
	// the mailbox after initialization with garbage.  The read clears
	// any pending interrupts.
	UsbRead (HPI_SIE1_MSG_ADR);
    18d8:	01005104 	movi	r4,324
    18dc:	00018380 	call	1838 <UsbRead>
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
    18e0:	01005104 	movi	r4,324
    18e4:	000b883a 	mov	r5,zero
    18e8:	00017e40 	call	17e4 <UsbWrite>
	UsbRead (HPI_SIE2_MSG_ADR);
    18ec:	01005204 	movi	r4,328
    18f0:	00018380 	call	1838 <UsbRead>
	UsbWrite (HPI_SIE2_MSG_ADR, 0);
    18f4:	01005204 	movi	r4,328
    18f8:	000b883a 	mov	r5,zero
    18fc:	00017e40 	call	17e4 <UsbWrite>


	UsbWrite (HOST1_STAT_REG, 0xFFFF);
    1900:	01302414 	movui	r4,49296
    1904:	017fffd4 	movui	r5,65535
    1908:	00017e40 	call	17e4 <UsbWrite>
	UsbWrite (HOST2_STAT_REG, 0xFFFF);
    190c:	01302c14 	movui	r4,49328
    1910:	017fffd4 	movui	r5,65535
    1914:	00017e40 	call	17e4 <UsbWrite>
}
    1918:	e037883a 	mov	sp,fp
    191c:	dfc00117 	ldw	ra,4(sp)
    1920:	df000017 	ldw	fp,0(sp)
    1924:	dec00204 	addi	sp,sp,8
    1928:	f800283a 	ret

0000192c <UsbSetAddress>:


void UsbSetAddress()
{
    192c:	defffe04 	addi	sp,sp,-8
    1930:	dfc00115 	stw	ra,4(sp)
    1934:	df000015 	stw	fp,0(sp)
    1938:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    193c:	01000084 	movi	r4,2
    1940:	01414004 	movi	r5,1280
    1944:	00002c80 	call	2c8 <IO_write>
	// TD #1: 6 writes
	IO_write(HPI_DATA,0x050C);
    1948:	0009883a 	mov	r4,zero
    194c:	01414304 	movi	r5,1292
    1950:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    1954:	0009883a 	mov	r4,zero
    1958:	01400204 	movi	r5,8
    195c:	00002c80 	call	2c8 <IO_write>
	// TASK: Complete with 4 more IOWR functions
	IO_write(HPI_DATA,0x00D0);
    1960:	0009883a 	mov	r4,zero
    1964:	01403404 	movi	r5,208
    1968:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);
    196c:	0009883a 	mov	r4,zero
    1970:	01400044 	movi	r5,1
    1974:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    1978:	0009883a 	mov	r4,zero
    197c:	014004c4 	movi	r5,19
    1980:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0514);
    1984:	0009883a 	mov	r4,zero
    1988:	01414504 	movi	r5,1300
    198c:	00002c80 	call	2c8 <IO_write>
	// TD #2: 4 writes
	// TASK: Complete with 4 IOWR functions
	IO_write(HPI_DATA,0x0500);
    1990:	0009883a 	mov	r4,zero
    1994:	01414004 	movi	r5,1280
    1998:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0002);
    199c:	0009883a 	mov	r4,zero
    19a0:	01400084 	movi	r5,2
    19a4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    19a8:	0009883a 	mov	r4,zero
    19ac:	000b883a 	mov	r5,zero
    19b0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    19b4:	0009883a 	mov	r4,zero
    19b8:	000b883a 	mov	r5,zero
    19bc:	00002c80 	call	2c8 <IO_write>
	// TD #3: 6 writes
	// TASK: Complete with 6 IOWR functions
	IO_write(HPI_DATA,0x0000); //
    19c0:	0009883a 	mov	r4,zero
    19c4:	000b883a 	mov	r5,zero
    19c8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//
    19cc:	0009883a 	mov	r4,zero
    19d0:	000b883a 	mov	r5,zero
    19d4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0090);//
    19d8:	0009883a 	mov	r4,zero
    19dc:	01402404 	movi	r5,144
    19e0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);
    19e4:	0009883a 	mov	r4,zero
    19e8:	01401044 	movi	r5,65
    19ec:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    19f0:	0009883a 	mov	r4,zero
    19f4:	014004c4 	movi	r5,19
    19f8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    19fc:	0009883a 	mov	r4,zero
    1a00:	000b883a 	mov	r5,zero
    1a04:	00002c80 	call	2c8 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    1a08:	01006c04 	movi	r4,432
    1a0c:	01414004 	movi	r5,1280
    1a10:	00017e40 	call	17e4 <UsbWrite>
}
    1a14:	e037883a 	mov	sp,fp
    1a18:	dfc00117 	ldw	ra,4(sp)
    1a1c:	df000017 	ldw	fp,0(sp)
    1a20:	dec00204 	addi	sp,sp,8
    1a24:	f800283a 	ret

00001a28 <UsbGetDeviceDesc1>:


void UsbGetDeviceDesc1()
{
    1a28:	defffe04 	addi	sp,sp,-8
    1a2c:	dfc00115 	stw	ra,4(sp)
    1a30:	df000015 	stw	fp,0(sp)
    1a34:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    1a38:	01000084 	movi	r4,2
    1a3c:	01414004 	movi	r5,1280
    1a40:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x050C);
    1a44:	0009883a 	mov	r4,zero
    1a48:	01414304 	movi	r5,1292
    1a4c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    1a50:	0009883a 	mov	r4,zero
    1a54:	01400204 	movi	r5,8
    1a58:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    1a5c:	0009883a 	mov	r4,zero
    1a60:	0140b404 	movi	r5,720
    1a64:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);
    1a68:	0009883a 	mov	r4,zero
    1a6c:	01400044 	movi	r5,1
    1a70:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    1a74:	0009883a 	mov	r4,zero
    1a78:	014004c4 	movi	r5,19
    1a7c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0514);
    1a80:	0009883a 	mov	r4,zero
    1a84:	01414504 	movi	r5,1300
    1a88:	00002c80 	call	2c8 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
    1a8c:	0009883a 	mov	r4,zero
    1a90:	0141a004 	movi	r5,1664
    1a94:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0100); //device 0x01
    1a98:	0009883a 	mov	r4,zero
    1a9c:	01404004 	movi	r5,256
    1aa0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    1aa4:	0009883a 	mov	r4,zero
    1aa8:	000b883a 	mov	r5,zero
    1aac:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);
    1ab0:	0009883a 	mov	r4,zero
    1ab4:	01400204 	movi	r5,8
    1ab8:	00002c80 	call	2c8 <IO_write>

	//data phase IN
	IO_write(HPI_DATA,0x052C); //
    1abc:	0009883a 	mov	r4,zero
    1ac0:	01414b04 	movi	r5,1324
    1ac4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//
    1ac8:	0009883a 	mov	r4,zero
    1acc:	01400204 	movi	r5,8
    1ad0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//
    1ad4:	0009883a 	mov	r4,zero
    1ad8:	0140a404 	movi	r5,656
    1adc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);
    1ae0:	0009883a 	mov	r4,zero
    1ae4:	01401044 	movi	r5,65
    1ae8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    1aec:	0009883a 	mov	r4,zero
    1af0:	014004c4 	movi	r5,19
    1af4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0520);
    1af8:	0009883a 	mov	r4,zero
    1afc:	01414804 	movi	r5,1312
    1b00:	00002c80 	call	2c8 <IO_write>

	//    //status phase
	IO_write(HPI_DATA,0x0000); //don't care
    1b04:	0009883a 	mov	r4,zero
    1b08:	000b883a 	mov	r5,zero
    1b0c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
    1b10:	0009883a 	mov	r4,zero
    1b14:	000b883a 	mov	r5,zero
    1b18:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0210);//device address
    1b1c:	0009883a 	mov	r4,zero
    1b20:	01408404 	movi	r5,528
    1b24:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);
    1b28:	0009883a 	mov	r4,zero
    1b2c:	01401044 	movi	r5,65
    1b30:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    1b34:	0009883a 	mov	r4,zero
    1b38:	014004c4 	movi	r5,19
    1b3c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    1b40:	0009883a 	mov	r4,zero
    1b44:	000b883a 	mov	r5,zero
    1b48:	00002c80 	call	2c8 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    1b4c:	01006c04 	movi	r4,432
    1b50:	01414004 	movi	r5,1280
    1b54:	00017e40 	call	17e4 <UsbWrite>
}
    1b58:	e037883a 	mov	sp,fp
    1b5c:	dfc00117 	ldw	ra,4(sp)
    1b60:	df000017 	ldw	fp,0(sp)
    1b64:	dec00204 	addi	sp,sp,8
    1b68:	f800283a 	ret

00001b6c <UsbGetDeviceDesc2>:

void UsbGetDeviceDesc2()
{
    1b6c:	defffe04 	addi	sp,sp,-8
    1b70:	dfc00115 	stw	ra,4(sp)
    1b74:	df000015 	stw	fp,0(sp)
    1b78:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    1b7c:	01000084 	movi	r4,2
    1b80:	01414004 	movi	r5,1280
    1b84:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x050C);
    1b88:	0009883a 	mov	r4,zero
    1b8c:	01414304 	movi	r5,1292
    1b90:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    1b94:	0009883a 	mov	r4,zero
    1b98:	01400204 	movi	r5,8
    1b9c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    1ba0:	0009883a 	mov	r4,zero
    1ba4:	0140b404 	movi	r5,720
    1ba8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);
    1bac:	0009883a 	mov	r4,zero
    1bb0:	01400044 	movi	r5,1
    1bb4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    1bb8:	0009883a 	mov	r4,zero
    1bbc:	014004c4 	movi	r5,19
    1bc0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0514);
    1bc4:	0009883a 	mov	r4,zero
    1bc8:	01414504 	movi	r5,1300
    1bcc:	00002c80 	call	2c8 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
    1bd0:	0009883a 	mov	r4,zero
    1bd4:	0141a004 	movi	r5,1664
    1bd8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0100);//e //device 0x01
    1bdc:	0009883a 	mov	r4,zero
    1be0:	01404004 	movi	r5,256
    1be4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    1be8:	0009883a 	mov	r4,zero
    1bec:	000b883a 	mov	r5,zero
    1bf0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0012);//2
    1bf4:	0009883a 	mov	r4,zero
    1bf8:	01400484 	movi	r5,18
    1bfc:	00002c80 	call	2c8 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
    1c00:	0009883a 	mov	r4,zero
    1c04:	01415104 	movi	r5,1348
    1c08:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    1c0c:	0009883a 	mov	r4,zero
    1c10:	01400204 	movi	r5,8
    1c14:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    1c18:	0009883a 	mov	r4,zero
    1c1c:	0140a404 	movi	r5,656
    1c20:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    1c24:	0009883a 	mov	r4,zero
    1c28:	01401044 	movi	r5,65
    1c2c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    1c30:	0009883a 	mov	r4,zero
    1c34:	014004c4 	movi	r5,19
    1c38:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    1c3c:	0009883a 	mov	r4,zero
    1c40:	01414804 	movi	r5,1312
    1c44:	00002c80 	call	2c8 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
    1c48:	0009883a 	mov	r4,zero
    1c4c:	01415304 	movi	r5,1356
    1c50:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
    1c54:	0009883a 	mov	r4,zero
    1c58:	01400204 	movi	r5,8
    1c5c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    1c60:	0009883a 	mov	r4,zero
    1c64:	0140a404 	movi	r5,656
    1c68:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);//6
    1c6c:	0009883a 	mov	r4,zero
    1c70:	01400044 	movi	r5,1
    1c74:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    1c78:	0009883a 	mov	r4,zero
    1c7c:	014004c4 	movi	r5,19
    1c80:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
    1c84:	0009883a 	mov	r4,zero
    1c88:	01414b04 	movi	r5,1324
    1c8c:	00002c80 	call	2c8 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0554); //c
    1c90:	0009883a 	mov	r4,zero
    1c94:	01415504 	movi	r5,1364
    1c98:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0002);//e
    1c9c:	0009883a 	mov	r4,zero
    1ca0:	01400084 	movi	r5,2
    1ca4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
    1ca8:	0009883a 	mov	r4,zero
    1cac:	0140a404 	movi	r5,656
    1cb0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    1cb4:	0009883a 	mov	r4,zero
    1cb8:	01401044 	movi	r5,65
    1cbc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    1cc0:	0009883a 	mov	r4,zero
    1cc4:	014004c4 	movi	r5,19
    1cc8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
    1ccc:	0009883a 	mov	r4,zero
    1cd0:	01414e04 	movi	r5,1336
    1cd4:	00002c80 	call	2c8 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //538
    1cd8:	0009883a 	mov	r4,zero
    1cdc:	000b883a 	mov	r5,zero
    1ce0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
    1ce4:	0009883a 	mov	r4,zero
    1ce8:	000b883a 	mov	r5,zero
    1cec:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0210);//c
    1cf0:	0009883a 	mov	r4,zero
    1cf4:	01408404 	movi	r5,528
    1cf8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//e
    1cfc:	0009883a 	mov	r4,zero
    1d00:	01401044 	movi	r5,65
    1d04:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
    1d08:	0009883a 	mov	r4,zero
    1d0c:	014004c4 	movi	r5,19
    1d10:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
    1d14:	0009883a 	mov	r4,zero
    1d18:	000b883a 	mov	r5,zero
    1d1c:	00002c80 	call	2c8 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    1d20:	01006c04 	movi	r4,432
    1d24:	01414004 	movi	r5,1280
    1d28:	00017e40 	call	17e4 <UsbWrite>
}
    1d2c:	e037883a 	mov	sp,fp
    1d30:	dfc00117 	ldw	ra,4(sp)
    1d34:	df000017 	ldw	fp,0(sp)
    1d38:	dec00204 	addi	sp,sp,8
    1d3c:	f800283a 	ret

00001d40 <UsbGetConfigDesc1>:


void UsbGetConfigDesc1()
{
    1d40:	defffe04 	addi	sp,sp,-8
    1d44:	dfc00115 	stw	ra,4(sp)
    1d48:	df000015 	stw	fp,0(sp)
    1d4c:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    1d50:	01000084 	movi	r4,2
    1d54:	01414004 	movi	r5,1280
    1d58:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x050C);
    1d5c:	0009883a 	mov	r4,zero
    1d60:	01414304 	movi	r5,1292
    1d64:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    1d68:	0009883a 	mov	r4,zero
    1d6c:	01400204 	movi	r5,8
    1d70:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    1d74:	0009883a 	mov	r4,zero
    1d78:	0140b404 	movi	r5,720
    1d7c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);
    1d80:	0009883a 	mov	r4,zero
    1d84:	01400044 	movi	r5,1
    1d88:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    1d8c:	0009883a 	mov	r4,zero
    1d90:	014004c4 	movi	r5,19
    1d94:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0514);
    1d98:	0009883a 	mov	r4,zero
    1d9c:	01414504 	movi	r5,1300
    1da0:	00002c80 	call	2c8 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
    1da4:	0009883a 	mov	r4,zero
    1da8:	0141a004 	movi	r5,1664
    1dac:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
    1db0:	0009883a 	mov	r4,zero
    1db4:	01408004 	movi	r5,512
    1db8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    1dbc:	0009883a 	mov	r4,zero
    1dc0:	000b883a 	mov	r5,zero
    1dc4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0009);//2
    1dc8:	0009883a 	mov	r4,zero
    1dcc:	01400244 	movi	r5,9
    1dd0:	00002c80 	call	2c8 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
    1dd4:	0009883a 	mov	r4,zero
    1dd8:	01415104 	movi	r5,1348
    1ddc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    1de0:	0009883a 	mov	r4,zero
    1de4:	01400204 	movi	r5,8
    1de8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    1dec:	0009883a 	mov	r4,zero
    1df0:	0140a404 	movi	r5,656
    1df4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    1df8:	0009883a 	mov	r4,zero
    1dfc:	01401044 	movi	r5,65
    1e00:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    1e04:	0009883a 	mov	r4,zero
    1e08:	014004c4 	movi	r5,19
    1e0c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    1e10:	0009883a 	mov	r4,zero
    1e14:	01414804 	movi	r5,1312
    1e18:	00002c80 	call	2c8 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
    1e1c:	0009883a 	mov	r4,zero
    1e20:	01415304 	movi	r5,1356
    1e24:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);//2
    1e28:	0009883a 	mov	r4,zero
    1e2c:	01400044 	movi	r5,1
    1e30:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    1e34:	0009883a 	mov	r4,zero
    1e38:	0140a404 	movi	r5,656
    1e3c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
    1e40:	0009883a 	mov	r4,zero
    1e44:	01400044 	movi	r5,1
    1e48:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    1e4c:	0009883a 	mov	r4,zero
    1e50:	014004c4 	movi	r5,19
    1e54:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
    1e58:	0009883a 	mov	r4,zero
    1e5c:	01414b04 	movi	r5,1324
    1e60:	00002c80 	call	2c8 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
    1e64:	0009883a 	mov	r4,zero
    1e68:	000b883a 	mov	r5,zero
    1e6c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
    1e70:	0009883a 	mov	r4,zero
    1e74:	000b883a 	mov	r5,zero
    1e78:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
    1e7c:	0009883a 	mov	r4,zero
    1e80:	01408404 	movi	r5,528
    1e84:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    1e88:	0009883a 	mov	r4,zero
    1e8c:	01401044 	movi	r5,65
    1e90:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    1e94:	0009883a 	mov	r4,zero
    1e98:	014004c4 	movi	r5,19
    1e9c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
    1ea0:	0009883a 	mov	r4,zero
    1ea4:	000b883a 	mov	r5,zero
    1ea8:	00002c80 	call	2c8 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    1eac:	01006c04 	movi	r4,432
    1eb0:	01414004 	movi	r5,1280
    1eb4:	00017e40 	call	17e4 <UsbWrite>
}
    1eb8:	e037883a 	mov	sp,fp
    1ebc:	dfc00117 	ldw	ra,4(sp)
    1ec0:	df000017 	ldw	fp,0(sp)
    1ec4:	dec00204 	addi	sp,sp,8
    1ec8:	f800283a 	ret

00001ecc <UsbGetConfigDesc2>:


void UsbGetConfigDesc2()
{
    1ecc:	defffe04 	addi	sp,sp,-8
    1ed0:	dfc00115 	stw	ra,4(sp)
    1ed4:	df000015 	stw	fp,0(sp)
    1ed8:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    1edc:	01000084 	movi	r4,2
    1ee0:	01414004 	movi	r5,1280
    1ee4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x050C);
    1ee8:	0009883a 	mov	r4,zero
    1eec:	01414304 	movi	r5,1292
    1ef0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    1ef4:	0009883a 	mov	r4,zero
    1ef8:	01400204 	movi	r5,8
    1efc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    1f00:	0009883a 	mov	r4,zero
    1f04:	0140b404 	movi	r5,720
    1f08:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);
    1f0c:	0009883a 	mov	r4,zero
    1f10:	01400044 	movi	r5,1
    1f14:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    1f18:	0009883a 	mov	r4,zero
    1f1c:	014004c4 	movi	r5,19
    1f20:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0514);
    1f24:	0009883a 	mov	r4,zero
    1f28:	01414504 	movi	r5,1300
    1f2c:	00002c80 	call	2c8 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
    1f30:	0009883a 	mov	r4,zero
    1f34:	0141a004 	movi	r5,1664
    1f38:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
    1f3c:	0009883a 	mov	r4,zero
    1f40:	01408004 	movi	r5,512
    1f44:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    1f48:	0009883a 	mov	r4,zero
    1f4c:	000b883a 	mov	r5,zero
    1f50:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x00FF);//2
    1f54:	0009883a 	mov	r4,zero
    1f58:	01403fc4 	movi	r5,255
    1f5c:	00002c80 	call	2c8 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x055c); //514
    1f60:	0009883a 	mov	r4,zero
    1f64:	01415704 	movi	r5,1372
    1f68:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    1f6c:	0009883a 	mov	r4,zero
    1f70:	01400204 	movi	r5,8
    1f74:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    1f78:	0009883a 	mov	r4,zero
    1f7c:	0140a404 	movi	r5,656
    1f80:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    1f84:	0009883a 	mov	r4,zero
    1f88:	01401044 	movi	r5,65
    1f8c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    1f90:	0009883a 	mov	r4,zero
    1f94:	014004c4 	movi	r5,19
    1f98:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    1f9c:	0009883a 	mov	r4,zero
    1fa0:	01414804 	movi	r5,1312
    1fa4:	00002c80 	call	2c8 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0564); //520
    1fa8:	0009883a 	mov	r4,zero
    1fac:	01415904 	movi	r5,1380
    1fb0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
    1fb4:	0009883a 	mov	r4,zero
    1fb8:	01400204 	movi	r5,8
    1fbc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    1fc0:	0009883a 	mov	r4,zero
    1fc4:	0140a404 	movi	r5,656
    1fc8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
    1fcc:	0009883a 	mov	r4,zero
    1fd0:	01400044 	movi	r5,1
    1fd4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    1fd8:	0009883a 	mov	r4,zero
    1fdc:	014004c4 	movi	r5,19
    1fe0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
    1fe4:	0009883a 	mov	r4,zero
    1fe8:	01414b04 	movi	r5,1324
    1fec:	00002c80 	call	2c8 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x056c); //52c
    1ff0:	0009883a 	mov	r4,zero
    1ff4:	01415b04 	movi	r5,1388
    1ff8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
    1ffc:	0009883a 	mov	r4,zero
    2000:	01400204 	movi	r5,8
    2004:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
    2008:	0009883a 	mov	r4,zero
    200c:	0140a404 	movi	r5,656
    2010:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    2014:	0009883a 	mov	r4,zero
    2018:	01401044 	movi	r5,65
    201c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    2020:	0009883a 	mov	r4,zero
    2024:	014004c4 	movi	r5,19
    2028:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
    202c:	0009883a 	mov	r4,zero
    2030:	01414e04 	movi	r5,1336
    2034:	00002c80 	call	2c8 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0574); //538
    2038:	0009883a 	mov	r4,zero
    203c:	01415d04 	movi	r5,1396
    2040:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
    2044:	0009883a 	mov	r4,zero
    2048:	01400204 	movi	r5,8
    204c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
    2050:	0009883a 	mov	r4,zero
    2054:	0140a404 	movi	r5,656
    2058:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
    205c:	0009883a 	mov	r4,zero
    2060:	01400044 	movi	r5,1
    2064:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
    2068:	0009883a 	mov	r4,zero
    206c:	014004c4 	movi	r5,19
    2070:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
    2074:	0009883a 	mov	r4,zero
    2078:	01415104 	movi	r5,1348
    207c:	00002c80 	call	2c8 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x057c); //544
    2080:	0009883a 	mov	r4,zero
    2084:	01415f04 	movi	r5,1404
    2088:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0002);//6
    208c:	0009883a 	mov	r4,zero
    2090:	01400084 	movi	r5,2
    2094:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    2098:	0009883a 	mov	r4,zero
    209c:	0140a404 	movi	r5,656
    20a0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
    20a4:	0009883a 	mov	r4,zero
    20a8:	01401044 	movi	r5,65
    20ac:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    20b0:	0009883a 	mov	r4,zero
    20b4:	014004c4 	movi	r5,19
    20b8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
    20bc:	0009883a 	mov	r4,zero
    20c0:	01415404 	movi	r5,1360
    20c4:	00002c80 	call	2c8 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //550
    20c8:	0009883a 	mov	r4,zero
    20cc:	000b883a 	mov	r5,zero
    20d0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
    20d4:	0009883a 	mov	r4,zero
    20d8:	000b883a 	mov	r5,zero
    20dc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0210);//4
    20e0:	0009883a 	mov	r4,zero
    20e4:	01408404 	movi	r5,528
    20e8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//6
    20ec:	0009883a 	mov	r4,zero
    20f0:	01401044 	movi	r5,65
    20f4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    20f8:	0009883a 	mov	r4,zero
    20fc:	014004c4 	movi	r5,19
    2100:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
    2104:	0009883a 	mov	r4,zero
    2108:	000b883a 	mov	r5,zero
    210c:	00002c80 	call	2c8 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    2110:	01006c04 	movi	r4,432
    2114:	01414004 	movi	r5,1280
    2118:	00017e40 	call	17e4 <UsbWrite>
}
    211c:	e037883a 	mov	sp,fp
    2120:	dfc00117 	ldw	ra,4(sp)
    2124:	df000017 	ldw	fp,0(sp)
    2128:	dec00204 	addi	sp,sp,8
    212c:	f800283a 	ret

00002130 <UsbSetConfig>:

void UsbSetConfig()
{
    2130:	defffe04 	addi	sp,sp,-8
    2134:	dfc00115 	stw	ra,4(sp)
    2138:	df000015 	stw	fp,0(sp)
    213c:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    2140:	01000084 	movi	r4,2
    2144:	01414004 	movi	r5,1280
    2148:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x050C);
    214c:	0009883a 	mov	r4,zero
    2150:	01414304 	movi	r5,1292
    2154:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    2158:	0009883a 	mov	r4,zero
    215c:	01400204 	movi	r5,8
    2160:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
    2164:	0009883a 	mov	r4,zero
    2168:	0140b404 	movi	r5,720
    216c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);
    2170:	0009883a 	mov	r4,zero
    2174:	01400044 	movi	r5,1
    2178:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    217c:	0009883a 	mov	r4,zero
    2180:	014004c4 	movi	r5,19
    2184:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0514);
    2188:	0009883a 	mov	r4,zero
    218c:	01414504 	movi	r5,1300
    2190:	00002c80 	call	2c8 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0900);
    2194:	0009883a 	mov	r4,zero
    2198:	01424004 	movi	r5,2304
    219c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);//device address
    21a0:	0009883a 	mov	r4,zero
    21a4:	01400044 	movi	r5,1
    21a8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    21ac:	0009883a 	mov	r4,zero
    21b0:	000b883a 	mov	r5,zero
    21b4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    21b8:	0009883a 	mov	r4,zero
    21bc:	000b883a 	mov	r5,zero
    21c0:	00002c80 	call	2c8 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
    21c4:	0009883a 	mov	r4,zero
    21c8:	000b883a 	mov	r5,zero
    21cc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
    21d0:	0009883a 	mov	r4,zero
    21d4:	000b883a 	mov	r5,zero
    21d8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
    21dc:	0009883a 	mov	r4,zero
    21e0:	0140a404 	movi	r5,656
    21e4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
    21e8:	0009883a 	mov	r4,zero
    21ec:	01401044 	movi	r5,65
    21f0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    21f4:	0009883a 	mov	r4,zero
    21f8:	014004c4 	movi	r5,19
    21fc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    2200:	0009883a 	mov	r4,zero
    2204:	000b883a 	mov	r5,zero
    2208:	00002c80 	call	2c8 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    220c:	01006c04 	movi	r4,432
    2210:	01414004 	movi	r5,1280
    2214:	00017e40 	call	17e4 <UsbWrite>

}
    2218:	e037883a 	mov	sp,fp
    221c:	dfc00117 	ldw	ra,4(sp)
    2220:	df000017 	ldw	fp,0(sp)
    2224:	dec00204 	addi	sp,sp,8
    2228:	f800283a 	ret

0000222c <UsbClassRequest>:

void UsbClassRequest()
{
    222c:	defffe04 	addi	sp,sp,-8
    2230:	dfc00115 	stw	ra,4(sp)
    2234:	df000015 	stw	fp,0(sp)
    2238:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    223c:	01000084 	movi	r4,2
    2240:	01414004 	movi	r5,1280
    2244:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x050C);
    2248:	0009883a 	mov	r4,zero
    224c:	01414304 	movi	r5,1292
    2250:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    2254:	0009883a 	mov	r4,zero
    2258:	01400204 	movi	r5,8
    225c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
    2260:	0009883a 	mov	r4,zero
    2264:	0140b404 	movi	r5,720
    2268:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);
    226c:	0009883a 	mov	r4,zero
    2270:	01400044 	movi	r5,1
    2274:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    2278:	0009883a 	mov	r4,zero
    227c:	014004c4 	movi	r5,19
    2280:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0514);
    2284:	0009883a 	mov	r4,zero
    2288:	01414504 	movi	r5,1300
    228c:	00002c80 	call	2c8 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0A21);
    2290:	0009883a 	mov	r4,zero
    2294:	01428844 	movi	r5,2593
    2298:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//device address
    229c:	0009883a 	mov	r4,zero
    22a0:	000b883a 	mov	r5,zero
    22a4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    22a8:	0009883a 	mov	r4,zero
    22ac:	000b883a 	mov	r5,zero
    22b0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    22b4:	0009883a 	mov	r4,zero
    22b8:	000b883a 	mov	r5,zero
    22bc:	00002c80 	call	2c8 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
    22c0:	0009883a 	mov	r4,zero
    22c4:	000b883a 	mov	r5,zero
    22c8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number /data length
    22cc:	0009883a 	mov	r4,zero
    22d0:	000b883a 	mov	r5,zero
    22d4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
    22d8:	0009883a 	mov	r4,zero
    22dc:	0140a404 	movi	r5,656
    22e0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
    22e4:	0009883a 	mov	r4,zero
    22e8:	01401044 	movi	r5,65
    22ec:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    22f0:	0009883a 	mov	r4,zero
    22f4:	014004c4 	movi	r5,19
    22f8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    22fc:	0009883a 	mov	r4,zero
    2300:	000b883a 	mov	r5,zero
    2304:	00002c80 	call	2c8 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    2308:	01006c04 	movi	r4,432
    230c:	01414004 	movi	r5,1280
    2310:	00017e40 	call	17e4 <UsbWrite>
}
    2314:	e037883a 	mov	sp,fp
    2318:	dfc00117 	ldw	ra,4(sp)
    231c:	df000017 	ldw	fp,0(sp)
    2320:	dec00204 	addi	sp,sp,8
    2324:	f800283a 	ret

00002328 <UsbGetHidDesc>:


void UsbGetHidDesc()
{
    2328:	defffe04 	addi	sp,sp,-8
    232c:	dfc00115 	stw	ra,4(sp)
    2330:	df000015 	stw	fp,0(sp)
    2334:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    2338:	01000084 	movi	r4,2
    233c:	01414004 	movi	r5,1280
    2340:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x050C);
    2344:	0009883a 	mov	r4,zero
    2348:	01414304 	movi	r5,1292
    234c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    2350:	0009883a 	mov	r4,zero
    2354:	01400204 	movi	r5,8
    2358:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
    235c:	0009883a 	mov	r4,zero
    2360:	0140b404 	movi	r5,720
    2364:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);
    2368:	0009883a 	mov	r4,zero
    236c:	01400044 	movi	r5,1
    2370:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    2374:	0009883a 	mov	r4,zero
    2378:	014004c4 	movi	r5,19
    237c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0514);
    2380:	0009883a 	mov	r4,zero
    2384:	01414504 	movi	r5,1300
    2388:	00002c80 	call	2c8 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
    238c:	0009883a 	mov	r4,zero
    2390:	0141a044 	movi	r5,1665
    2394:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x2100);//e //HID 0x21
    2398:	0009883a 	mov	r4,zero
    239c:	01484004 	movi	r5,8448
    23a0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    23a4:	0009883a 	mov	r4,zero
    23a8:	000b883a 	mov	r5,zero
    23ac:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
    23b0:	0009883a 	mov	r4,zero
    23b4:	01401ec4 	movi	r5,123
    23b8:	00002c80 	call	2c8 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
    23bc:	0009883a 	mov	r4,zero
    23c0:	01415104 	movi	r5,1348
    23c4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    23c8:	0009883a 	mov	r4,zero
    23cc:	01400204 	movi	r5,8
    23d0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    23d4:	0009883a 	mov	r4,zero
    23d8:	0140a404 	movi	r5,656
    23dc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    23e0:	0009883a 	mov	r4,zero
    23e4:	01401044 	movi	r5,65
    23e8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    23ec:	0009883a 	mov	r4,zero
    23f0:	014004c4 	movi	r5,19
    23f4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    23f8:	0009883a 	mov	r4,zero
    23fc:	01414804 	movi	r5,1312
    2400:	00002c80 	call	2c8 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
    2404:	0009883a 	mov	r4,zero
    2408:	000b883a 	mov	r5,zero
    240c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
    2410:	0009883a 	mov	r4,zero
    2414:	000b883a 	mov	r5,zero
    2418:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
    241c:	0009883a 	mov	r4,zero
    2420:	01408404 	movi	r5,528
    2424:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    2428:	0009883a 	mov	r4,zero
    242c:	01401044 	movi	r5,65
    2430:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    2434:	0009883a 	mov	r4,zero
    2438:	014004c4 	movi	r5,19
    243c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
    2440:	0009883a 	mov	r4,zero
    2444:	000b883a 	mov	r5,zero
    2448:	00002c80 	call	2c8 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    244c:	01006c04 	movi	r4,432
    2450:	01414004 	movi	r5,1280
    2454:	00017e40 	call	17e4 <UsbWrite>

}
    2458:	e037883a 	mov	sp,fp
    245c:	dfc00117 	ldw	ra,4(sp)
    2460:	df000017 	ldw	fp,0(sp)
    2464:	dec00204 	addi	sp,sp,8
    2468:	f800283a 	ret

0000246c <UsbGetReportDesc>:


void UsbGetReportDesc()
{
    246c:	defffe04 	addi	sp,sp,-8
    2470:	dfc00115 	stw	ra,4(sp)
    2474:	df000015 	stw	fp,0(sp)
    2478:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    247c:	01000084 	movi	r4,2
    2480:	01414004 	movi	r5,1280
    2484:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x050C);
    2488:	0009883a 	mov	r4,zero
    248c:	01414304 	movi	r5,1292
    2490:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    2494:	0009883a 	mov	r4,zero
    2498:	01400204 	movi	r5,8
    249c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    24a0:	0009883a 	mov	r4,zero
    24a4:	0140b404 	movi	r5,720
    24a8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);
    24ac:	0009883a 	mov	r4,zero
    24b0:	01400044 	movi	r5,1
    24b4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    24b8:	0009883a 	mov	r4,zero
    24bc:	014004c4 	movi	r5,19
    24c0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0514);
    24c4:	0009883a 	mov	r4,zero
    24c8:	01414504 	movi	r5,1300
    24cc:	00002c80 	call	2c8 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
    24d0:	0009883a 	mov	r4,zero
    24d4:	0141a044 	movi	r5,1665
    24d8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x2200);//e //report 0x22
    24dc:	0009883a 	mov	r4,zero
    24e0:	01488004 	movi	r5,8704
    24e4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    24e8:	0009883a 	mov	r4,zero
    24ec:	000b883a 	mov	r5,zero
    24f0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
    24f4:	0009883a 	mov	r4,zero
    24f8:	01401ec4 	movi	r5,123
    24fc:	00002c80 	call	2c8 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0580); //514
    2500:	0009883a 	mov	r4,zero
    2504:	01416004 	movi	r5,1408
    2508:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    250c:	0009883a 	mov	r4,zero
    2510:	01400204 	movi	r5,8
    2514:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    2518:	0009883a 	mov	r4,zero
    251c:	0140a404 	movi	r5,656
    2520:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    2524:	0009883a 	mov	r4,zero
    2528:	01401044 	movi	r5,65
    252c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    2530:	0009883a 	mov	r4,zero
    2534:	014004c4 	movi	r5,19
    2538:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    253c:	0009883a 	mov	r4,zero
    2540:	01414804 	movi	r5,1312
    2544:	00002c80 	call	2c8 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0588); //520
    2548:	0009883a 	mov	r4,zero
    254c:	01416204 	movi	r5,1416
    2550:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
    2554:	0009883a 	mov	r4,zero
    2558:	01400204 	movi	r5,8
    255c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    2560:	0009883a 	mov	r4,zero
    2564:	0140a404 	movi	r5,656
    2568:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
    256c:	0009883a 	mov	r4,zero
    2570:	01400044 	movi	r5,1
    2574:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    2578:	0009883a 	mov	r4,zero
    257c:	014004c4 	movi	r5,19
    2580:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
    2584:	0009883a 	mov	r4,zero
    2588:	01414b04 	movi	r5,1324
    258c:	00002c80 	call	2c8 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0590); //52c
    2590:	0009883a 	mov	r4,zero
    2594:	01416404 	movi	r5,1424
    2598:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
    259c:	0009883a 	mov	r4,zero
    25a0:	01400204 	movi	r5,8
    25a4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
    25a8:	0009883a 	mov	r4,zero
    25ac:	0140a404 	movi	r5,656
    25b0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    25b4:	0009883a 	mov	r4,zero
    25b8:	01401044 	movi	r5,65
    25bc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    25c0:	0009883a 	mov	r4,zero
    25c4:	014004c4 	movi	r5,19
    25c8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
    25cc:	0009883a 	mov	r4,zero
    25d0:	01414e04 	movi	r5,1336
    25d4:	00002c80 	call	2c8 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0598); //538
    25d8:	0009883a 	mov	r4,zero
    25dc:	01416604 	movi	r5,1432
    25e0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
    25e4:	0009883a 	mov	r4,zero
    25e8:	01400204 	movi	r5,8
    25ec:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
    25f0:	0009883a 	mov	r4,zero
    25f4:	0140a404 	movi	r5,656
    25f8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
    25fc:	0009883a 	mov	r4,zero
    2600:	01400044 	movi	r5,1
    2604:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
    2608:	0009883a 	mov	r4,zero
    260c:	014004c4 	movi	r5,19
    2610:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
    2614:	0009883a 	mov	r4,zero
    2618:	01415104 	movi	r5,1348
    261c:	00002c80 	call	2c8 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x05a0); //544
    2620:	0009883a 	mov	r4,zero
    2624:	01416804 	movi	r5,1440
    2628:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    262c:	0009883a 	mov	r4,zero
    2630:	01400204 	movi	r5,8
    2634:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    2638:	0009883a 	mov	r4,zero
    263c:	0140a404 	movi	r5,656
    2640:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
    2644:	0009883a 	mov	r4,zero
    2648:	01401044 	movi	r5,65
    264c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    2650:	0009883a 	mov	r4,zero
    2654:	014004c4 	movi	r5,19
    2658:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
    265c:	0009883a 	mov	r4,zero
    2660:	01415404 	movi	r5,1360
    2664:	00002c80 	call	2c8 <IO_write>

	//data phase IN-6
	IO_write(HPI_DATA,0x05a8); //550
    2668:	0009883a 	mov	r4,zero
    266c:	01416a04 	movi	r5,1448
    2670:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
    2674:	0009883a 	mov	r4,zero
    2678:	01400204 	movi	r5,8
    267c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    2680:	0009883a 	mov	r4,zero
    2684:	0140a404 	movi	r5,656
    2688:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
    268c:	0009883a 	mov	r4,zero
    2690:	01400044 	movi	r5,1
    2694:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    2698:	0009883a 	mov	r4,zero
    269c:	014004c4 	movi	r5,19
    26a0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x055c);//a
    26a4:	0009883a 	mov	r4,zero
    26a8:	01415704 	movi	r5,1372
    26ac:	00002c80 	call	2c8 <IO_write>

	//data phase IN-7
	IO_write(HPI_DATA,0x05b0); //c
    26b0:	0009883a 	mov	r4,zero
    26b4:	01416c04 	movi	r5,1456
    26b8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
    26bc:	0009883a 	mov	r4,zero
    26c0:	01400204 	movi	r5,8
    26c4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//560
    26c8:	0009883a 	mov	r4,zero
    26cc:	0140a404 	movi	r5,656
    26d0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//2 //data1
    26d4:	0009883a 	mov	r4,zero
    26d8:	01401044 	movi	r5,65
    26dc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    26e0:	0009883a 	mov	r4,zero
    26e4:	014004c4 	movi	r5,19
    26e8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0568);//6
    26ec:	0009883a 	mov	r4,zero
    26f0:	01415a04 	movi	r5,1384
    26f4:	00002c80 	call	2c8 <IO_write>

	//data phase IN-8
	IO_write(HPI_DATA,0x05b8); //8
    26f8:	0009883a 	mov	r4,zero
    26fc:	01416e04 	movi	r5,1464
    2700:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0003);//a
    2704:	0009883a 	mov	r4,zero
    2708:	014000c4 	movi	r5,3
    270c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
    2710:	0009883a 	mov	r4,zero
    2714:	0140a404 	movi	r5,656
    2718:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
    271c:	0009883a 	mov	r4,zero
    2720:	01400044 	movi	r5,1
    2724:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//570
    2728:	0009883a 	mov	r4,zero
    272c:	014004c4 	movi	r5,19
    2730:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0574);//2
    2734:	0009883a 	mov	r4,zero
    2738:	01415d04 	movi	r5,1396
    273c:	00002c80 	call	2c8 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //574
    2740:	0009883a 	mov	r4,zero
    2744:	000b883a 	mov	r5,zero
    2748:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
    274c:	0009883a 	mov	r4,zero
    2750:	000b883a 	mov	r5,zero
    2754:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0210);//8
    2758:	0009883a 	mov	r4,zero
    275c:	01408404 	movi	r5,528
    2760:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    2764:	0009883a 	mov	r4,zero
    2768:	01401044 	movi	r5,65
    276c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    2770:	0009883a 	mov	r4,zero
    2774:	014004c4 	movi	r5,19
    2778:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
    277c:	0009883a 	mov	r4,zero
    2780:	000b883a 	mov	r5,zero
    2784:	00002c80 	call	2c8 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    2788:	01006c04 	movi	r4,432
    278c:	01414004 	movi	r5,1280
    2790:	00017e40 	call	17e4 <UsbWrite>

}
    2794:	e037883a 	mov	sp,fp
    2798:	dfc00117 	ldw	ra,4(sp)
    279c:	df000017 	ldw	fp,0(sp)
    27a0:	dec00204 	addi	sp,sp,8
    27a4:	f800283a 	ret

000027a8 <UsbWaitTDListDone>:


alt_u16 UsbWaitTDListDone()
{
    27a8:	defffd04 	addi	sp,sp,-12
    27ac:	dfc00215 	stw	ra,8(sp)
    27b0:	df000115 	stw	fp,4(sp)
    27b4:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
    27b8:	01005104 	movi	r4,324
    27bc:	00018380 	call	1838 <UsbRead>
    27c0:	e0bfff0d 	sth	r2,-4(fp)
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
    27c4:	01005104 	movi	r4,324
    27c8:	000b883a 	mov	r5,zero
    27cc:	00017e40 	call	17e4 <UsbWrite>
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
    27d0:	00000d06 	br	2808 <UsbWaitTDListDone+0x60>
	{
		if(usb_ctl_val == 0x0000)
    27d4:	e0bfff0b 	ldhu	r2,-4(fp)
    27d8:	10000526 	beq	r2,zero,27f0 <UsbWaitTDListDone+0x48>
		{
		}
		else
		{
			printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
    27dc:	e0bfff0b 	ldhu	r2,-4(fp)
    27e0:	01000074 	movhi	r4,1
    27e4:	21089e04 	addi	r4,r4,8824
    27e8:	100b883a 	mov	r5,r2
    27ec:	00031240 	call	3124 <printf>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    27f0:	01005104 	movi	r4,324
    27f4:	00018380 	call	1838 <UsbRead>
    27f8:	e0bfff0d 	sth	r2,-4(fp)
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
    27fc:	01005104 	movi	r4,324
    2800:	000b883a 	mov	r5,zero
    2804:	00017e40 	call	17e4 <UsbWrite>
{
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
    2808:	e0bfff0b 	ldhu	r2,-4(fp)
    280c:	10840018 	cmpnei	r2,r2,4096
    2810:	103ff01e 	bne	r2,zero,27d4 <__alt_data_end+0xfffad0a4>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
	}

	return usb_ctl_val;
    2814:	e0bfff0b 	ldhu	r2,-4(fp)
}
    2818:	e037883a 	mov	sp,fp
    281c:	dfc00117 	ldw	ra,4(sp)
    2820:	df000017 	ldw	fp,0(sp)
    2824:	dec00204 	addi	sp,sp,8
    2828:	f800283a 	ret

0000282c <UsbGetRetryCnt>:


alt_u16 UsbGetRetryCnt()
{
    282c:	defffd04 	addi	sp,sp,-12
    2830:	dfc00215 	stw	ra,8(sp)
    2834:	df000115 	stw	fp,4(sp)
    2838:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	IO_read(HPI_STATUS);
    283c:	010000c4 	movi	r4,3
    2840:	00003300 	call	330 <IO_read>
	if(UsbRead(HPI_SIE1_MSG_ADR) == HUSB_TDListDone)
    2844:	01005104 	movi	r4,324
    2848:	00018380 	call	1838 <UsbRead>
    284c:	10bfffcc 	andi	r2,r2,65535
    2850:	10840018 	cmpnei	r2,r2,4096
    2854:	1000091e 	bne	r2,zero,287c <UsbGetRetryCnt+0x50>
	{
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
    2858:	01005104 	movi	r4,324
    285c:	000b883a 	mov	r5,zero
    2860:	00017e40 	call	17e4 <UsbWrite>

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    2864:	0001883a 	nop
    2868:	010000c4 	movi	r4,3
    286c:	00003300 	call	330 <IO_read>
    2870:	10bfffcc 	andi	r2,r2,65535
    2874:	1080040c 	andi	r2,r2,16
    2878:	103ffb26 	beq	r2,zero,2868 <__alt_data_end+0xfffad138>
		{
		}
	}
	//usleep(1000);
	IO_write(HPI_ADDR,0x0508);
    287c:	01000084 	movi	r4,2
    2880:	01414204 	movi	r5,1288
    2884:	00002c80 	call	2c8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
    2888:	0009883a 	mov	r4,zero
    288c:	00003300 	call	330 <IO_read>
    2890:	e0bfff0d 	sth	r2,-4(fp)

	return usb_ctl_val;
    2894:	e0bfff0b 	ldhu	r2,-4(fp)
}
    2898:	e037883a 	mov	sp,fp
    289c:	dfc00117 	ldw	ra,4(sp)
    28a0:	df000017 	ldw	fp,0(sp)
    28a4:	dec00204 	addi	sp,sp,8
    28a8:	f800283a 	ret

000028ac <UsbPrintMem>:


void UsbPrintMem()
{
    28ac:	defffc04 	addi	sp,sp,-16
    28b0:	dfc00315 	stw	ra,12(sp)
    28b4:	df000215 	stw	fp,8(sp)
    28b8:	df000204 	addi	fp,sp,8
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
    28bc:	01000084 	movi	r4,2
    28c0:	01414004 	movi	r5,1280
    28c4:	00002c80 	call	2c8 <IO_write>
	for (i = 0; i <= 200; i += 2)
    28c8:	e03ffe15 	stw	zero,-8(fp)
    28cc:	00000e06 	br	2908 <UsbPrintMem+0x5c>
	{
		code = IO_read(HPI_DATA);
    28d0:	0009883a 	mov	r4,zero
    28d4:	00003300 	call	330 <IO_read>
    28d8:	10bfffcc 	andi	r2,r2,65535
    28dc:	e0bfff15 	stw	r2,-4(fp)
		printf("\naddr %x = %04x\n", 0x0500+i, code);
    28e0:	e0bffe17 	ldw	r2,-8(fp)
    28e4:	10814004 	addi	r2,r2,1280
    28e8:	01000074 	movhi	r4,1
    28ec:	2108a604 	addi	r4,r4,8856
    28f0:	100b883a 	mov	r5,r2
    28f4:	e1bfff17 	ldw	r6,-4(fp)
    28f8:	00031240 	call	3124 <printf>

void UsbPrintMem()
{
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
	for (i = 0; i <= 200; i += 2)
    28fc:	e0bffe17 	ldw	r2,-8(fp)
    2900:	10800084 	addi	r2,r2,2
    2904:	e0bffe15 	stw	r2,-8(fp)
    2908:	e0bffe17 	ldw	r2,-8(fp)
    290c:	10803250 	cmplti	r2,r2,201
    2910:	103fef1e 	bne	r2,zero,28d0 <__alt_data_end+0xfffad1a0>
	{
		code = IO_read(HPI_DATA);
		printf("\naddr %x = %04x\n", 0x0500+i, code);
	}
}
    2914:	e037883a 	mov	sp,fp
    2918:	dfc00117 	ldw	ra,4(sp)
    291c:	df000017 	ldw	fp,0(sp)
    2920:	dec00204 	addi	sp,sp,8
    2924:	f800283a 	ret

00002928 <malloc>:
    2928:	00800074 	movhi	r2,1
    292c:	10901904 	addi	r2,r2,16484
    2930:	200b883a 	mov	r5,r4
    2934:	11000017 	ldw	r4,0(r2)
    2938:	00029501 	jmpi	2950 <_malloc_r>

0000293c <free>:
    293c:	00800074 	movhi	r2,1
    2940:	10901904 	addi	r2,r2,16484
    2944:	200b883a 	mov	r5,r4
    2948:	11000017 	ldw	r4,0(r2)
    294c:	00075e81 	jmpi	75e8 <_free_r>

00002950 <_malloc_r>:
    2950:	defff504 	addi	sp,sp,-44
    2954:	dc800315 	stw	r18,12(sp)
    2958:	dfc00a15 	stw	ra,40(sp)
    295c:	df000915 	stw	fp,36(sp)
    2960:	ddc00815 	stw	r23,32(sp)
    2964:	dd800715 	stw	r22,28(sp)
    2968:	dd400615 	stw	r21,24(sp)
    296c:	dd000515 	stw	r20,20(sp)
    2970:	dcc00415 	stw	r19,16(sp)
    2974:	dc400215 	stw	r17,8(sp)
    2978:	dc000115 	stw	r16,4(sp)
    297c:	288002c4 	addi	r2,r5,11
    2980:	00c00584 	movi	r3,22
    2984:	2025883a 	mov	r18,r4
    2988:	18802a2e 	bgeu	r3,r2,2a34 <_malloc_r+0xe4>
    298c:	047ffe04 	movi	r17,-8
    2990:	1462703a 	and	r17,r2,r17
    2994:	88009e16 	blt	r17,zero,2c10 <_malloc_r+0x2c0>
    2998:	89409d36 	bltu	r17,r5,2c10 <_malloc_r+0x2c0>
    299c:	000f8940 	call	f894 <__malloc_lock>
    29a0:	00807dc4 	movi	r2,503
    29a4:	14402736 	bltu	r2,r17,2a44 <_malloc_r+0xf4>
    29a8:	8806d0fa 	srli	r3,r17,3
    29ac:	04c00074 	movhi	r19,1
    29b0:	9cc96b04 	addi	r19,r19,9644
    29b4:	18c5883a 	add	r2,r3,r3
    29b8:	1085883a 	add	r2,r2,r2
    29bc:	1085883a 	add	r2,r2,r2
    29c0:	9885883a 	add	r2,r19,r2
    29c4:	14000317 	ldw	r16,12(r2)
    29c8:	80814a26 	beq	r16,r2,2ef4 <_malloc_r+0x5a4>
    29cc:	80c00117 	ldw	r3,4(r16)
    29d0:	81000317 	ldw	r4,12(r16)
    29d4:	00bfff04 	movi	r2,-4
    29d8:	1884703a 	and	r2,r3,r2
    29dc:	81400217 	ldw	r5,8(r16)
    29e0:	8085883a 	add	r2,r16,r2
    29e4:	10c00117 	ldw	r3,4(r2)
    29e8:	29000315 	stw	r4,12(r5)
    29ec:	21400215 	stw	r5,8(r4)
    29f0:	18c00054 	ori	r3,r3,1
    29f4:	10c00115 	stw	r3,4(r2)
    29f8:	9009883a 	mov	r4,r18
    29fc:	000f8b40 	call	f8b4 <__malloc_unlock>
    2a00:	80800204 	addi	r2,r16,8
    2a04:	dfc00a17 	ldw	ra,40(sp)
    2a08:	df000917 	ldw	fp,36(sp)
    2a0c:	ddc00817 	ldw	r23,32(sp)
    2a10:	dd800717 	ldw	r22,28(sp)
    2a14:	dd400617 	ldw	r21,24(sp)
    2a18:	dd000517 	ldw	r20,20(sp)
    2a1c:	dcc00417 	ldw	r19,16(sp)
    2a20:	dc800317 	ldw	r18,12(sp)
    2a24:	dc400217 	ldw	r17,8(sp)
    2a28:	dc000117 	ldw	r16,4(sp)
    2a2c:	dec00b04 	addi	sp,sp,44
    2a30:	f800283a 	ret
    2a34:	04400404 	movi	r17,16
    2a38:	89407536 	bltu	r17,r5,2c10 <_malloc_r+0x2c0>
    2a3c:	000f8940 	call	f894 <__malloc_lock>
    2a40:	003fd906 	br	29a8 <__alt_data_end+0xfffad278>
    2a44:	8806d27a 	srli	r3,r17,9
    2a48:	18007526 	beq	r3,zero,2c20 <_malloc_r+0x2d0>
    2a4c:	00800104 	movi	r2,4
    2a50:	10c0ef36 	bltu	r2,r3,2e10 <_malloc_r+0x4c0>
    2a54:	8806d1ba 	srli	r3,r17,6
    2a58:	19c00e04 	addi	r7,r3,56
    2a5c:	39cb883a 	add	r5,r7,r7
    2a60:	04c00074 	movhi	r19,1
    2a64:	294b883a 	add	r5,r5,r5
    2a68:	9cc96b04 	addi	r19,r19,9644
    2a6c:	294b883a 	add	r5,r5,r5
    2a70:	994b883a 	add	r5,r19,r5
    2a74:	2c000317 	ldw	r16,12(r5)
    2a78:	2c000e26 	beq	r5,r16,2ab4 <_malloc_r+0x164>
    2a7c:	80800117 	ldw	r2,4(r16)
    2a80:	01bfff04 	movi	r6,-4
    2a84:	010003c4 	movi	r4,15
    2a88:	1184703a 	and	r2,r2,r6
    2a8c:	1447c83a 	sub	r3,r2,r17
    2a90:	20c00716 	blt	r4,r3,2ab0 <_malloc_r+0x160>
    2a94:	1800650e 	bge	r3,zero,2c2c <_malloc_r+0x2dc>
    2a98:	84000317 	ldw	r16,12(r16)
    2a9c:	2c000526 	beq	r5,r16,2ab4 <_malloc_r+0x164>
    2aa0:	80800117 	ldw	r2,4(r16)
    2aa4:	1184703a 	and	r2,r2,r6
    2aa8:	1447c83a 	sub	r3,r2,r17
    2aac:	20fff90e 	bge	r4,r3,2a94 <__alt_data_end+0xfffad364>
    2ab0:	39ffffc4 	addi	r7,r7,-1
    2ab4:	38c00044 	addi	r3,r7,1
    2ab8:	01800074 	movhi	r6,1
    2abc:	9c000417 	ldw	r16,16(r19)
    2ac0:	31896b04 	addi	r6,r6,9644
    2ac4:	32400204 	addi	r9,r6,8
    2ac8:	82410326 	beq	r16,r9,2ed8 <_malloc_r+0x588>
    2acc:	81000117 	ldw	r4,4(r16)
    2ad0:	00bfff04 	movi	r2,-4
    2ad4:	208e703a 	and	r7,r4,r2
    2ad8:	3c45c83a 	sub	r2,r7,r17
    2adc:	010003c4 	movi	r4,15
    2ae0:	2080ee16 	blt	r4,r2,2e9c <_malloc_r+0x54c>
    2ae4:	32400515 	stw	r9,20(r6)
    2ae8:	32400415 	stw	r9,16(r6)
    2aec:	1000510e 	bge	r2,zero,2c34 <_malloc_r+0x2e4>
    2af0:	00807fc4 	movi	r2,511
    2af4:	11c0ce36 	bltu	r2,r7,2e30 <_malloc_r+0x4e0>
    2af8:	3808d0fa 	srli	r4,r7,3
    2afc:	01c00044 	movi	r7,1
    2b00:	30800117 	ldw	r2,4(r6)
    2b04:	210b883a 	add	r5,r4,r4
    2b08:	294b883a 	add	r5,r5,r5
    2b0c:	2009d0ba 	srai	r4,r4,2
    2b10:	294b883a 	add	r5,r5,r5
    2b14:	298b883a 	add	r5,r5,r6
    2b18:	2a000217 	ldw	r8,8(r5)
    2b1c:	3908983a 	sll	r4,r7,r4
    2b20:	81400315 	stw	r5,12(r16)
    2b24:	82000215 	stw	r8,8(r16)
    2b28:	2088b03a 	or	r4,r4,r2
    2b2c:	2c000215 	stw	r16,8(r5)
    2b30:	31000115 	stw	r4,4(r6)
    2b34:	44000315 	stw	r16,12(r8)
    2b38:	1805d0ba 	srai	r2,r3,2
    2b3c:	01400044 	movi	r5,1
    2b40:	288a983a 	sll	r5,r5,r2
    2b44:	21404336 	bltu	r4,r5,2c54 <_malloc_r+0x304>
    2b48:	2144703a 	and	r2,r4,r5
    2b4c:	10000a1e 	bne	r2,zero,2b78 <_malloc_r+0x228>
    2b50:	00bfff04 	movi	r2,-4
    2b54:	294b883a 	add	r5,r5,r5
    2b58:	1886703a 	and	r3,r3,r2
    2b5c:	2144703a 	and	r2,r4,r5
    2b60:	18c00104 	addi	r3,r3,4
    2b64:	1000041e 	bne	r2,zero,2b78 <_malloc_r+0x228>
    2b68:	294b883a 	add	r5,r5,r5
    2b6c:	2144703a 	and	r2,r4,r5
    2b70:	18c00104 	addi	r3,r3,4
    2b74:	103ffc26 	beq	r2,zero,2b68 <__alt_data_end+0xfffad438>
    2b78:	023fff04 	movi	r8,-4
    2b7c:	01c003c4 	movi	r7,15
    2b80:	18c5883a 	add	r2,r3,r3
    2b84:	1085883a 	add	r2,r2,r2
    2b88:	1085883a 	add	r2,r2,r2
    2b8c:	9895883a 	add	r10,r19,r2
    2b90:	52c00304 	addi	r11,r10,12
    2b94:	1819883a 	mov	r12,r3
    2b98:	5c000017 	ldw	r16,0(r11)
    2b9c:	59bffd04 	addi	r6,r11,-12
    2ba0:	8180041e 	bne	r16,r6,2bb4 <_malloc_r+0x264>
    2ba4:	0000ce06 	br	2ee0 <_malloc_r+0x590>
    2ba8:	2000d70e 	bge	r4,zero,2f08 <_malloc_r+0x5b8>
    2bac:	84000317 	ldw	r16,12(r16)
    2bb0:	8180cb26 	beq	r16,r6,2ee0 <_malloc_r+0x590>
    2bb4:	80800117 	ldw	r2,4(r16)
    2bb8:	1204703a 	and	r2,r2,r8
    2bbc:	1449c83a 	sub	r4,r2,r17
    2bc0:	393ff90e 	bge	r7,r4,2ba8 <__alt_data_end+0xfffad478>
    2bc4:	80800317 	ldw	r2,12(r16)
    2bc8:	80c00217 	ldw	r3,8(r16)
    2bcc:	89400054 	ori	r5,r17,1
    2bd0:	81400115 	stw	r5,4(r16)
    2bd4:	18800315 	stw	r2,12(r3)
    2bd8:	10c00215 	stw	r3,8(r2)
    2bdc:	8463883a 	add	r17,r16,r17
    2be0:	9c400515 	stw	r17,20(r19)
    2be4:	9c400415 	stw	r17,16(r19)
    2be8:	20800054 	ori	r2,r4,1
    2bec:	88800115 	stw	r2,4(r17)
    2bf0:	8a400315 	stw	r9,12(r17)
    2bf4:	8a400215 	stw	r9,8(r17)
    2bf8:	8923883a 	add	r17,r17,r4
    2bfc:	89000015 	stw	r4,0(r17)
    2c00:	9009883a 	mov	r4,r18
    2c04:	000f8b40 	call	f8b4 <__malloc_unlock>
    2c08:	80800204 	addi	r2,r16,8
    2c0c:	003f7d06 	br	2a04 <__alt_data_end+0xfffad2d4>
    2c10:	00800304 	movi	r2,12
    2c14:	90800015 	stw	r2,0(r18)
    2c18:	0005883a 	mov	r2,zero
    2c1c:	003f7906 	br	2a04 <__alt_data_end+0xfffad2d4>
    2c20:	01401f84 	movi	r5,126
    2c24:	01c00fc4 	movi	r7,63
    2c28:	003f8d06 	br	2a60 <__alt_data_end+0xfffad330>
    2c2c:	81000317 	ldw	r4,12(r16)
    2c30:	003f6a06 	br	29dc <__alt_data_end+0xfffad2ac>
    2c34:	81c5883a 	add	r2,r16,r7
    2c38:	10c00117 	ldw	r3,4(r2)
    2c3c:	9009883a 	mov	r4,r18
    2c40:	18c00054 	ori	r3,r3,1
    2c44:	10c00115 	stw	r3,4(r2)
    2c48:	000f8b40 	call	f8b4 <__malloc_unlock>
    2c4c:	80800204 	addi	r2,r16,8
    2c50:	003f6c06 	br	2a04 <__alt_data_end+0xfffad2d4>
    2c54:	9c000217 	ldw	r16,8(r19)
    2c58:	00bfff04 	movi	r2,-4
    2c5c:	85800117 	ldw	r22,4(r16)
    2c60:	b0ac703a 	and	r22,r22,r2
    2c64:	b4400336 	bltu	r22,r17,2c74 <_malloc_r+0x324>
    2c68:	b445c83a 	sub	r2,r22,r17
    2c6c:	00c003c4 	movi	r3,15
    2c70:	18805d16 	blt	r3,r2,2de8 <_malloc_r+0x498>
    2c74:	05c00074 	movhi	r23,1
    2c78:	00800074 	movhi	r2,1
    2c7c:	bdd01604 	addi	r23,r23,16472
    2c80:	1096eb04 	addi	r2,r2,23468
    2c84:	15400017 	ldw	r21,0(r2)
    2c88:	b9000017 	ldw	r4,0(r23)
    2c8c:	00ffffc4 	movi	r3,-1
    2c90:	858d883a 	add	r6,r16,r22
    2c94:	8d6b883a 	add	r21,r17,r21
    2c98:	20c0e426 	beq	r4,r3,302c <_malloc_r+0x6dc>
    2c9c:	ad4403c4 	addi	r21,r21,4111
    2ca0:	00fc0004 	movi	r3,-4096
    2ca4:	a8ea703a 	and	r21,r21,r3
    2ca8:	9009883a 	mov	r4,r18
    2cac:	a80b883a 	mov	r5,r21
    2cb0:	d9800015 	stw	r6,0(sp)
    2cb4:	000322c0 	call	322c <_sbrk_r>
    2cb8:	00ffffc4 	movi	r3,-1
    2cbc:	1029883a 	mov	r20,r2
    2cc0:	d9800017 	ldw	r6,0(sp)
    2cc4:	10c0a426 	beq	r2,r3,2f58 <_malloc_r+0x608>
    2cc8:	1180a236 	bltu	r2,r6,2f54 <_malloc_r+0x604>
    2ccc:	07000074 	movhi	fp,1
    2cd0:	e716f704 	addi	fp,fp,23516
    2cd4:	e0c00017 	ldw	r3,0(fp)
    2cd8:	a8c7883a 	add	r3,r21,r3
    2cdc:	e0c00015 	stw	r3,0(fp)
    2ce0:	3500da26 	beq	r6,r20,304c <_malloc_r+0x6fc>
    2ce4:	b9000017 	ldw	r4,0(r23)
    2ce8:	00bfffc4 	movi	r2,-1
    2cec:	2080e426 	beq	r4,r2,3080 <_malloc_r+0x730>
    2cf0:	a185c83a 	sub	r2,r20,r6
    2cf4:	1885883a 	add	r2,r3,r2
    2cf8:	e0800015 	stw	r2,0(fp)
    2cfc:	a0c001cc 	andi	r3,r20,7
    2d00:	1800b526 	beq	r3,zero,2fd8 <_malloc_r+0x688>
    2d04:	a0e9c83a 	sub	r20,r20,r3
    2d08:	00840204 	movi	r2,4104
    2d0c:	a5000204 	addi	r20,r20,8
    2d10:	10c7c83a 	sub	r3,r2,r3
    2d14:	a545883a 	add	r2,r20,r21
    2d18:	1083ffcc 	andi	r2,r2,4095
    2d1c:	18abc83a 	sub	r21,r3,r2
    2d20:	9009883a 	mov	r4,r18
    2d24:	a80b883a 	mov	r5,r21
    2d28:	000322c0 	call	322c <_sbrk_r>
    2d2c:	00ffffc4 	movi	r3,-1
    2d30:	10c0d026 	beq	r2,r3,3074 <_malloc_r+0x724>
    2d34:	1507c83a 	sub	r3,r2,r20
    2d38:	a8c7883a 	add	r3,r21,r3
    2d3c:	18c00054 	ori	r3,r3,1
    2d40:	e0800017 	ldw	r2,0(fp)
    2d44:	9d000215 	stw	r20,8(r19)
    2d48:	a0c00115 	stw	r3,4(r20)
    2d4c:	a887883a 	add	r3,r21,r2
    2d50:	e0c00015 	stw	r3,0(fp)
    2d54:	84c00e26 	beq	r16,r19,2d90 <_malloc_r+0x440>
    2d58:	018003c4 	movi	r6,15
    2d5c:	3580a02e 	bgeu	r6,r22,2fe0 <_malloc_r+0x690>
    2d60:	81400117 	ldw	r5,4(r16)
    2d64:	013ffe04 	movi	r4,-8
    2d68:	b0bffd04 	addi	r2,r22,-12
    2d6c:	1104703a 	and	r2,r2,r4
    2d70:	2900004c 	andi	r4,r5,1
    2d74:	1108b03a 	or	r4,r2,r4
    2d78:	81000115 	stw	r4,4(r16)
    2d7c:	01400144 	movi	r5,5
    2d80:	8089883a 	add	r4,r16,r2
    2d84:	21400115 	stw	r5,4(r4)
    2d88:	21400215 	stw	r5,8(r4)
    2d8c:	3080c036 	bltu	r6,r2,3090 <_malloc_r+0x740>
    2d90:	00800074 	movhi	r2,1
    2d94:	1096ea04 	addi	r2,r2,23464
    2d98:	11000017 	ldw	r4,0(r2)
    2d9c:	20c0012e 	bgeu	r4,r3,2da4 <_malloc_r+0x454>
    2da0:	10c00015 	stw	r3,0(r2)
    2da4:	00800074 	movhi	r2,1
    2da8:	1096e904 	addi	r2,r2,23460
    2dac:	11000017 	ldw	r4,0(r2)
    2db0:	9c000217 	ldw	r16,8(r19)
    2db4:	20c0012e 	bgeu	r4,r3,2dbc <_malloc_r+0x46c>
    2db8:	10c00015 	stw	r3,0(r2)
    2dbc:	80c00117 	ldw	r3,4(r16)
    2dc0:	00bfff04 	movi	r2,-4
    2dc4:	1886703a 	and	r3,r3,r2
    2dc8:	1c45c83a 	sub	r2,r3,r17
    2dcc:	1c400236 	bltu	r3,r17,2dd8 <_malloc_r+0x488>
    2dd0:	00c003c4 	movi	r3,15
    2dd4:	18800416 	blt	r3,r2,2de8 <_malloc_r+0x498>
    2dd8:	9009883a 	mov	r4,r18
    2ddc:	000f8b40 	call	f8b4 <__malloc_unlock>
    2de0:	0005883a 	mov	r2,zero
    2de4:	003f0706 	br	2a04 <__alt_data_end+0xfffad2d4>
    2de8:	88c00054 	ori	r3,r17,1
    2dec:	80c00115 	stw	r3,4(r16)
    2df0:	8463883a 	add	r17,r16,r17
    2df4:	10800054 	ori	r2,r2,1
    2df8:	9c400215 	stw	r17,8(r19)
    2dfc:	88800115 	stw	r2,4(r17)
    2e00:	9009883a 	mov	r4,r18
    2e04:	000f8b40 	call	f8b4 <__malloc_unlock>
    2e08:	80800204 	addi	r2,r16,8
    2e0c:	003efd06 	br	2a04 <__alt_data_end+0xfffad2d4>
    2e10:	00800504 	movi	r2,20
    2e14:	10c0482e 	bgeu	r2,r3,2f38 <_malloc_r+0x5e8>
    2e18:	00801504 	movi	r2,84
    2e1c:	10c06836 	bltu	r2,r3,2fc0 <_malloc_r+0x670>
    2e20:	8806d33a 	srli	r3,r17,12
    2e24:	19c01b84 	addi	r7,r3,110
    2e28:	39cb883a 	add	r5,r7,r7
    2e2c:	003f0c06 	br	2a60 <__alt_data_end+0xfffad330>
    2e30:	3804d27a 	srli	r2,r7,9
    2e34:	01000104 	movi	r4,4
    2e38:	2080422e 	bgeu	r4,r2,2f44 <_malloc_r+0x5f4>
    2e3c:	01000504 	movi	r4,20
    2e40:	20807c36 	bltu	r4,r2,3034 <_malloc_r+0x6e4>
    2e44:	110016c4 	addi	r4,r2,91
    2e48:	210b883a 	add	r5,r4,r4
    2e4c:	294b883a 	add	r5,r5,r5
    2e50:	294b883a 	add	r5,r5,r5
    2e54:	994b883a 	add	r5,r19,r5
    2e58:	28800217 	ldw	r2,8(r5)
    2e5c:	02000074 	movhi	r8,1
    2e60:	42096b04 	addi	r8,r8,9644
    2e64:	11406326 	beq	r2,r5,2ff4 <_malloc_r+0x6a4>
    2e68:	01bfff04 	movi	r6,-4
    2e6c:	11000117 	ldw	r4,4(r2)
    2e70:	2188703a 	and	r4,r4,r6
    2e74:	3900022e 	bgeu	r7,r4,2e80 <_malloc_r+0x530>
    2e78:	10800217 	ldw	r2,8(r2)
    2e7c:	28bffb1e 	bne	r5,r2,2e6c <__alt_data_end+0xfffad73c>
    2e80:	11800317 	ldw	r6,12(r2)
    2e84:	99000117 	ldw	r4,4(r19)
    2e88:	81800315 	stw	r6,12(r16)
    2e8c:	80800215 	stw	r2,8(r16)
    2e90:	34000215 	stw	r16,8(r6)
    2e94:	14000315 	stw	r16,12(r2)
    2e98:	003f2706 	br	2b38 <__alt_data_end+0xfffad408>
    2e9c:	88c00054 	ori	r3,r17,1
    2ea0:	80c00115 	stw	r3,4(r16)
    2ea4:	8463883a 	add	r17,r16,r17
    2ea8:	34400515 	stw	r17,20(r6)
    2eac:	34400415 	stw	r17,16(r6)
    2eb0:	10c00054 	ori	r3,r2,1
    2eb4:	8a400315 	stw	r9,12(r17)
    2eb8:	8a400215 	stw	r9,8(r17)
    2ebc:	88c00115 	stw	r3,4(r17)
    2ec0:	88a3883a 	add	r17,r17,r2
    2ec4:	88800015 	stw	r2,0(r17)
    2ec8:	9009883a 	mov	r4,r18
    2ecc:	000f8b40 	call	f8b4 <__malloc_unlock>
    2ed0:	80800204 	addi	r2,r16,8
    2ed4:	003ecb06 	br	2a04 <__alt_data_end+0xfffad2d4>
    2ed8:	31000117 	ldw	r4,4(r6)
    2edc:	003f1606 	br	2b38 <__alt_data_end+0xfffad408>
    2ee0:	63000044 	addi	r12,r12,1
    2ee4:	608000cc 	andi	r2,r12,3
    2ee8:	5ac00204 	addi	r11,r11,8
    2eec:	103f2a1e 	bne	r2,zero,2b98 <__alt_data_end+0xfffad468>
    2ef0:	00002106 	br	2f78 <_malloc_r+0x628>
    2ef4:	80800204 	addi	r2,r16,8
    2ef8:	84000517 	ldw	r16,20(r16)
    2efc:	143eb31e 	bne	r2,r16,29cc <__alt_data_end+0xfffad29c>
    2f00:	18c00084 	addi	r3,r3,2
    2f04:	003eec06 	br	2ab8 <__alt_data_end+0xfffad388>
    2f08:	8085883a 	add	r2,r16,r2
    2f0c:	10c00117 	ldw	r3,4(r2)
    2f10:	81000317 	ldw	r4,12(r16)
    2f14:	81400217 	ldw	r5,8(r16)
    2f18:	18c00054 	ori	r3,r3,1
    2f1c:	10c00115 	stw	r3,4(r2)
    2f20:	29000315 	stw	r4,12(r5)
    2f24:	21400215 	stw	r5,8(r4)
    2f28:	9009883a 	mov	r4,r18
    2f2c:	000f8b40 	call	f8b4 <__malloc_unlock>
    2f30:	80800204 	addi	r2,r16,8
    2f34:	003eb306 	br	2a04 <__alt_data_end+0xfffad2d4>
    2f38:	19c016c4 	addi	r7,r3,91
    2f3c:	39cb883a 	add	r5,r7,r7
    2f40:	003ec706 	br	2a60 <__alt_data_end+0xfffad330>
    2f44:	3804d1ba 	srli	r2,r7,6
    2f48:	11000e04 	addi	r4,r2,56
    2f4c:	210b883a 	add	r5,r4,r4
    2f50:	003fbe06 	br	2e4c <__alt_data_end+0xfffad71c>
    2f54:	84ff5d26 	beq	r16,r19,2ccc <__alt_data_end+0xfffad59c>
    2f58:	9c000217 	ldw	r16,8(r19)
    2f5c:	00bfff04 	movi	r2,-4
    2f60:	80c00117 	ldw	r3,4(r16)
    2f64:	1886703a 	and	r3,r3,r2
    2f68:	003f9706 	br	2dc8 <__alt_data_end+0xfffad698>
    2f6c:	52800017 	ldw	r10,0(r10)
    2f70:	18ffffc4 	addi	r3,r3,-1
    2f74:	50805c1e 	bne	r10,r2,30e8 <_malloc_r+0x798>
    2f78:	190000cc 	andi	r4,r3,3
    2f7c:	50bffe04 	addi	r2,r10,-8
    2f80:	203ffa1e 	bne	r4,zero,2f6c <__alt_data_end+0xfffad83c>
    2f84:	98800117 	ldw	r2,4(r19)
    2f88:	0146303a 	nor	r3,zero,r5
    2f8c:	1884703a 	and	r2,r3,r2
    2f90:	98800115 	stw	r2,4(r19)
    2f94:	294b883a 	add	r5,r5,r5
    2f98:	117f2e36 	bltu	r2,r5,2c54 <__alt_data_end+0xfffad524>
    2f9c:	283f2d26 	beq	r5,zero,2c54 <__alt_data_end+0xfffad524>
    2fa0:	1146703a 	and	r3,r2,r5
    2fa4:	1800521e 	bne	r3,zero,30f0 <_malloc_r+0x7a0>
    2fa8:	6007883a 	mov	r3,r12
    2fac:	294b883a 	add	r5,r5,r5
    2fb0:	1148703a 	and	r4,r2,r5
    2fb4:	18c00104 	addi	r3,r3,4
    2fb8:	203ffc26 	beq	r4,zero,2fac <__alt_data_end+0xfffad87c>
    2fbc:	003ef006 	br	2b80 <__alt_data_end+0xfffad450>
    2fc0:	00805504 	movi	r2,340
    2fc4:	10c01336 	bltu	r2,r3,3014 <_malloc_r+0x6c4>
    2fc8:	8806d3fa 	srli	r3,r17,15
    2fcc:	19c01dc4 	addi	r7,r3,119
    2fd0:	39cb883a 	add	r5,r7,r7
    2fd4:	003ea206 	br	2a60 <__alt_data_end+0xfffad330>
    2fd8:	00c40004 	movi	r3,4096
    2fdc:	003f4d06 	br	2d14 <__alt_data_end+0xfffad5e4>
    2fe0:	00800044 	movi	r2,1
    2fe4:	a0800115 	stw	r2,4(r20)
    2fe8:	a021883a 	mov	r16,r20
    2fec:	0007883a 	mov	r3,zero
    2ff0:	003f7506 	br	2dc8 <__alt_data_end+0xfffad698>
    2ff4:	200bd0ba 	srai	r5,r4,2
    2ff8:	01800044 	movi	r6,1
    2ffc:	41000117 	ldw	r4,4(r8)
    3000:	314a983a 	sll	r5,r6,r5
    3004:	100d883a 	mov	r6,r2
    3008:	2908b03a 	or	r4,r5,r4
    300c:	41000115 	stw	r4,4(r8)
    3010:	003f9d06 	br	2e88 <__alt_data_end+0xfffad758>
    3014:	00815504 	movi	r2,1364
    3018:	10c01336 	bltu	r2,r3,3068 <_malloc_r+0x718>
    301c:	8806d4ba 	srli	r3,r17,18
    3020:	19c01f04 	addi	r7,r3,124
    3024:	39cb883a 	add	r5,r7,r7
    3028:	003e8d06 	br	2a60 <__alt_data_end+0xfffad330>
    302c:	ad400404 	addi	r21,r21,16
    3030:	003f1d06 	br	2ca8 <__alt_data_end+0xfffad578>
    3034:	01001504 	movi	r4,84
    3038:	20801c36 	bltu	r4,r2,30ac <_malloc_r+0x75c>
    303c:	3804d33a 	srli	r2,r7,12
    3040:	11001b84 	addi	r4,r2,110
    3044:	210b883a 	add	r5,r4,r4
    3048:	003f8006 	br	2e4c <__alt_data_end+0xfffad71c>
    304c:	3083ffcc 	andi	r2,r6,4095
    3050:	103f241e 	bne	r2,zero,2ce4 <__alt_data_end+0xfffad5b4>
    3054:	99000217 	ldw	r4,8(r19)
    3058:	ad85883a 	add	r2,r21,r22
    305c:	10800054 	ori	r2,r2,1
    3060:	20800115 	stw	r2,4(r4)
    3064:	003f4a06 	br	2d90 <__alt_data_end+0xfffad660>
    3068:	01403f04 	movi	r5,252
    306c:	01c01f84 	movi	r7,126
    3070:	003e7b06 	br	2a60 <__alt_data_end+0xfffad330>
    3074:	00c00044 	movi	r3,1
    3078:	002b883a 	mov	r21,zero
    307c:	003f3006 	br	2d40 <__alt_data_end+0xfffad610>
    3080:	00800074 	movhi	r2,1
    3084:	10901604 	addi	r2,r2,16472
    3088:	15000015 	stw	r20,0(r2)
    308c:	003f1b06 	br	2cfc <__alt_data_end+0xfffad5cc>
    3090:	9009883a 	mov	r4,r18
    3094:	81400204 	addi	r5,r16,8
    3098:	00075e80 	call	75e8 <_free_r>
    309c:	00800074 	movhi	r2,1
    30a0:	1096f704 	addi	r2,r2,23516
    30a4:	10c00017 	ldw	r3,0(r2)
    30a8:	003f3906 	br	2d90 <__alt_data_end+0xfffad660>
    30ac:	01005504 	movi	r4,340
    30b0:	20800436 	bltu	r4,r2,30c4 <_malloc_r+0x774>
    30b4:	3804d3fa 	srli	r2,r7,15
    30b8:	11001dc4 	addi	r4,r2,119
    30bc:	210b883a 	add	r5,r4,r4
    30c0:	003f6206 	br	2e4c <__alt_data_end+0xfffad71c>
    30c4:	01015504 	movi	r4,1364
    30c8:	20800436 	bltu	r4,r2,30dc <_malloc_r+0x78c>
    30cc:	3804d4ba 	srli	r2,r7,18
    30d0:	11001f04 	addi	r4,r2,124
    30d4:	210b883a 	add	r5,r4,r4
    30d8:	003f5c06 	br	2e4c <__alt_data_end+0xfffad71c>
    30dc:	01403f04 	movi	r5,252
    30e0:	01001f84 	movi	r4,126
    30e4:	003f5906 	br	2e4c <__alt_data_end+0xfffad71c>
    30e8:	98800117 	ldw	r2,4(r19)
    30ec:	003fa906 	br	2f94 <__alt_data_end+0xfffad864>
    30f0:	6007883a 	mov	r3,r12
    30f4:	003ea206 	br	2b80 <__alt_data_end+0xfffad450>

000030f8 <_printf_r>:
    30f8:	defffd04 	addi	sp,sp,-12
    30fc:	dfc00015 	stw	ra,0(sp)
    3100:	d9800115 	stw	r6,4(sp)
    3104:	d9c00215 	stw	r7,8(sp)
    3108:	280d883a 	mov	r6,r5
    310c:	21400217 	ldw	r5,8(r4)
    3110:	d9c00104 	addi	r7,sp,4
    3114:	00033180 	call	3318 <___vfprintf_internal_r>
    3118:	dfc00017 	ldw	ra,0(sp)
    311c:	dec00304 	addi	sp,sp,12
    3120:	f800283a 	ret

00003124 <printf>:
    3124:	defffc04 	addi	sp,sp,-16
    3128:	dfc00015 	stw	ra,0(sp)
    312c:	d9400115 	stw	r5,4(sp)
    3130:	d9800215 	stw	r6,8(sp)
    3134:	d9c00315 	stw	r7,12(sp)
    3138:	00800074 	movhi	r2,1
    313c:	10901904 	addi	r2,r2,16484
    3140:	10800017 	ldw	r2,0(r2)
    3144:	200b883a 	mov	r5,r4
    3148:	d9800104 	addi	r6,sp,4
    314c:	11000217 	ldw	r4,8(r2)
    3150:	00054140 	call	5414 <__vfprintf_internal>
    3154:	dfc00017 	ldw	ra,0(sp)
    3158:	dec00404 	addi	sp,sp,16
    315c:	f800283a 	ret

00003160 <_puts_r>:
    3160:	defff604 	addi	sp,sp,-40
    3164:	dc000715 	stw	r16,28(sp)
    3168:	2021883a 	mov	r16,r4
    316c:	2809883a 	mov	r4,r5
    3170:	dc400815 	stw	r17,32(sp)
    3174:	dfc00915 	stw	ra,36(sp)
    3178:	2823883a 	mov	r17,r5
    317c:	00032800 	call	3280 <strlen>
    3180:	00c00074 	movhi	r3,1
    3184:	18d01904 	addi	r3,r3,16484
    3188:	18c00017 	ldw	r3,0(r3)
    318c:	11000044 	addi	r4,r2,1
    3190:	d8800115 	stw	r2,4(sp)
    3194:	18c00217 	ldw	r3,8(r3)
    3198:	01400074 	movhi	r5,1
    319c:	2948ab04 	addi	r5,r5,8876
    31a0:	1880030b 	ldhu	r2,12(r3)
    31a4:	d9400215 	stw	r5,8(sp)
    31a8:	d9000615 	stw	r4,24(sp)
    31ac:	01400044 	movi	r5,1
    31b0:	01000084 	movi	r4,2
    31b4:	d9000515 	stw	r4,20(sp)
    31b8:	dc400015 	stw	r17,0(sp)
    31bc:	d9400315 	stw	r5,12(sp)
    31c0:	dec00415 	stw	sp,16(sp)
    31c4:	1108000c 	andi	r4,r2,8192
    31c8:	2000061e 	bne	r4,zero,31e4 <_puts_r+0x84>
    31cc:	19401917 	ldw	r5,100(r3)
    31d0:	0137ffc4 	movi	r4,-8193
    31d4:	10880014 	ori	r2,r2,8192
    31d8:	2908703a 	and	r4,r5,r4
    31dc:	1880030d 	sth	r2,12(r3)
    31e0:	19001915 	stw	r4,100(r3)
    31e4:	81400217 	ldw	r5,8(r16)
    31e8:	8009883a 	mov	r4,r16
    31ec:	d9800404 	addi	r6,sp,16
    31f0:	00078d80 	call	78d8 <__sfvwrite_r>
    31f4:	1000061e 	bne	r2,zero,3210 <_puts_r+0xb0>
    31f8:	00800284 	movi	r2,10
    31fc:	dfc00917 	ldw	ra,36(sp)
    3200:	dc400817 	ldw	r17,32(sp)
    3204:	dc000717 	ldw	r16,28(sp)
    3208:	dec00a04 	addi	sp,sp,40
    320c:	f800283a 	ret
    3210:	00bfffc4 	movi	r2,-1
    3214:	003ff906 	br	31fc <__alt_data_end+0xfffadacc>

00003218 <puts>:
    3218:	00800074 	movhi	r2,1
    321c:	10901904 	addi	r2,r2,16484
    3220:	200b883a 	mov	r5,r4
    3224:	11000017 	ldw	r4,0(r2)
    3228:	00031601 	jmpi	3160 <_puts_r>

0000322c <_sbrk_r>:
    322c:	defffd04 	addi	sp,sp,-12
    3230:	dc000015 	stw	r16,0(sp)
    3234:	04000074 	movhi	r16,1
    3238:	dc400115 	stw	r17,4(sp)
    323c:	8416ec04 	addi	r16,r16,23472
    3240:	2023883a 	mov	r17,r4
    3244:	2809883a 	mov	r4,r5
    3248:	dfc00215 	stw	ra,8(sp)
    324c:	80000015 	stw	zero,0(r16)
    3250:	000faa80 	call	faa8 <sbrk>
    3254:	00ffffc4 	movi	r3,-1
    3258:	10c00526 	beq	r2,r3,3270 <_sbrk_r+0x44>
    325c:	dfc00217 	ldw	ra,8(sp)
    3260:	dc400117 	ldw	r17,4(sp)
    3264:	dc000017 	ldw	r16,0(sp)
    3268:	dec00304 	addi	sp,sp,12
    326c:	f800283a 	ret
    3270:	80c00017 	ldw	r3,0(r16)
    3274:	183ff926 	beq	r3,zero,325c <__alt_data_end+0xfffadb2c>
    3278:	88c00015 	stw	r3,0(r17)
    327c:	003ff706 	br	325c <__alt_data_end+0xfffadb2c>

00003280 <strlen>:
    3280:	208000cc 	andi	r2,r4,3
    3284:	10002026 	beq	r2,zero,3308 <strlen+0x88>
    3288:	20800007 	ldb	r2,0(r4)
    328c:	10002026 	beq	r2,zero,3310 <strlen+0x90>
    3290:	2005883a 	mov	r2,r4
    3294:	00000206 	br	32a0 <strlen+0x20>
    3298:	10c00007 	ldb	r3,0(r2)
    329c:	18001826 	beq	r3,zero,3300 <strlen+0x80>
    32a0:	10800044 	addi	r2,r2,1
    32a4:	10c000cc 	andi	r3,r2,3
    32a8:	183ffb1e 	bne	r3,zero,3298 <__alt_data_end+0xfffadb68>
    32ac:	10c00017 	ldw	r3,0(r2)
    32b0:	01ffbff4 	movhi	r7,65279
    32b4:	39ffbfc4 	addi	r7,r7,-257
    32b8:	00ca303a 	nor	r5,zero,r3
    32bc:	01a02074 	movhi	r6,32897
    32c0:	19c7883a 	add	r3,r3,r7
    32c4:	31a02004 	addi	r6,r6,-32640
    32c8:	1946703a 	and	r3,r3,r5
    32cc:	1986703a 	and	r3,r3,r6
    32d0:	1800091e 	bne	r3,zero,32f8 <strlen+0x78>
    32d4:	10800104 	addi	r2,r2,4
    32d8:	10c00017 	ldw	r3,0(r2)
    32dc:	19cb883a 	add	r5,r3,r7
    32e0:	00c6303a 	nor	r3,zero,r3
    32e4:	28c6703a 	and	r3,r5,r3
    32e8:	1986703a 	and	r3,r3,r6
    32ec:	183ff926 	beq	r3,zero,32d4 <__alt_data_end+0xfffadba4>
    32f0:	00000106 	br	32f8 <strlen+0x78>
    32f4:	10800044 	addi	r2,r2,1
    32f8:	10c00007 	ldb	r3,0(r2)
    32fc:	183ffd1e 	bne	r3,zero,32f4 <__alt_data_end+0xfffadbc4>
    3300:	1105c83a 	sub	r2,r2,r4
    3304:	f800283a 	ret
    3308:	2005883a 	mov	r2,r4
    330c:	003fe706 	br	32ac <__alt_data_end+0xfffadb7c>
    3310:	0005883a 	mov	r2,zero
    3314:	f800283a 	ret

00003318 <___vfprintf_internal_r>:
    3318:	defeb604 	addi	sp,sp,-1320
    331c:	dfc14915 	stw	ra,1316(sp)
    3320:	ddc14715 	stw	r23,1308(sp)
    3324:	dd814615 	stw	r22,1304(sp)
    3328:	202f883a 	mov	r23,r4
    332c:	282d883a 	mov	r22,r5
    3330:	d9812a15 	stw	r6,1192(sp)
    3334:	d9c12d15 	stw	r7,1204(sp)
    3338:	df014815 	stw	fp,1312(sp)
    333c:	dd414515 	stw	r21,1300(sp)
    3340:	dd014415 	stw	r20,1296(sp)
    3344:	dcc14315 	stw	r19,1292(sp)
    3348:	dc814215 	stw	r18,1288(sp)
    334c:	dc414115 	stw	r17,1284(sp)
    3350:	dc014015 	stw	r16,1280(sp)
    3354:	0007f980 	call	7f98 <_localeconv_r>
    3358:	10800017 	ldw	r2,0(r2)
    335c:	1009883a 	mov	r4,r2
    3360:	d8813515 	stw	r2,1236(sp)
    3364:	00032800 	call	3280 <strlen>
    3368:	d8813815 	stw	r2,1248(sp)
    336c:	b8000226 	beq	r23,zero,3378 <___vfprintf_internal_r+0x60>
    3370:	b8800e17 	ldw	r2,56(r23)
    3374:	10010526 	beq	r2,zero,378c <___vfprintf_internal_r+0x474>
    3378:	b0c0030b 	ldhu	r3,12(r22)
    337c:	1908000c 	andi	r4,r3,8192
    3380:	1805883a 	mov	r2,r3
    3384:	2000071e 	bne	r4,zero,33a4 <___vfprintf_internal_r+0x8c>
    3388:	b1001917 	ldw	r4,100(r22)
    338c:	18880014 	ori	r2,r3,8192
    3390:	00f7ffc4 	movi	r3,-8193
    3394:	20c8703a 	and	r4,r4,r3
    3398:	b080030d 	sth	r2,12(r22)
    339c:	1007883a 	mov	r3,r2
    33a0:	b1001915 	stw	r4,100(r22)
    33a4:	1100020c 	andi	r4,r2,8
    33a8:	2000a826 	beq	r4,zero,364c <___vfprintf_internal_r+0x334>
    33ac:	b1000417 	ldw	r4,16(r22)
    33b0:	2000a626 	beq	r4,zero,364c <___vfprintf_internal_r+0x334>
    33b4:	1080068c 	andi	r2,r2,26
    33b8:	01000284 	movi	r4,10
    33bc:	1100ac26 	beq	r2,r4,3670 <___vfprintf_internal_r+0x358>
    33c0:	d8c10e04 	addi	r3,sp,1080
    33c4:	d9010dc4 	addi	r4,sp,1079
    33c8:	d9400404 	addi	r5,sp,16
    33cc:	05000074 	movhi	r20,1
    33d0:	1905c83a 	sub	r2,r3,r4
    33d4:	a508bc84 	addi	r20,r20,8946
    33d8:	d8c12815 	stw	r3,1184(sp)
    33dc:	d9012915 	stw	r4,1188(sp)
    33e0:	d9411e15 	stw	r5,1144(sp)
    33e4:	d8012015 	stw	zero,1152(sp)
    33e8:	d8011f15 	stw	zero,1148(sp)
    33ec:	d8013315 	stw	zero,1228(sp)
    33f0:	d8013715 	stw	zero,1244(sp)
    33f4:	d8013915 	stw	zero,1252(sp)
    33f8:	d8013b15 	stw	zero,1260(sp)
    33fc:	d8013a15 	stw	zero,1256(sp)
    3400:	d8012f15 	stw	zero,1212(sp)
    3404:	2811883a 	mov	r8,r5
    3408:	d8813c15 	stw	r2,1264(sp)
    340c:	d8c12a17 	ldw	r3,1192(sp)
    3410:	18800007 	ldb	r2,0(r3)
    3414:	10021326 	beq	r2,zero,3c64 <___vfprintf_internal_r+0x94c>
    3418:	00c00944 	movi	r3,37
    341c:	dc012a17 	ldw	r16,1192(sp)
    3420:	10c0021e 	bne	r2,r3,342c <___vfprintf_internal_r+0x114>
    3424:	00001606 	br	3480 <___vfprintf_internal_r+0x168>
    3428:	10c08526 	beq	r2,r3,3640 <___vfprintf_internal_r+0x328>
    342c:	84000044 	addi	r16,r16,1
    3430:	80800007 	ldb	r2,0(r16)
    3434:	103ffc1e 	bne	r2,zero,3428 <__alt_data_end+0xfffadcf8>
    3438:	d9012a17 	ldw	r4,1192(sp)
    343c:	8123c83a 	sub	r17,r16,r4
    3440:	88000f26 	beq	r17,zero,3480 <___vfprintf_internal_r+0x168>
    3444:	d8812a17 	ldw	r2,1192(sp)
    3448:	d8c12017 	ldw	r3,1152(sp)
    344c:	44400115 	stw	r17,4(r8)
    3450:	40800015 	stw	r2,0(r8)
    3454:	d8811f17 	ldw	r2,1148(sp)
    3458:	1c47883a 	add	r3,r3,r17
    345c:	d8c12015 	stw	r3,1152(sp)
    3460:	10800044 	addi	r2,r2,1
    3464:	d8811f15 	stw	r2,1148(sp)
    3468:	00c001c4 	movi	r3,7
    346c:	1880b516 	blt	r3,r2,3744 <___vfprintf_internal_r+0x42c>
    3470:	42000204 	addi	r8,r8,8
    3474:	d8c12f17 	ldw	r3,1212(sp)
    3478:	1c47883a 	add	r3,r3,r17
    347c:	d8c12f15 	stw	r3,1212(sp)
    3480:	80800007 	ldb	r2,0(r16)
    3484:	1000b626 	beq	r2,zero,3760 <___vfprintf_internal_r+0x448>
    3488:	80800044 	addi	r2,r16,1
    348c:	84000047 	ldb	r16,1(r16)
    3490:	0027883a 	mov	r19,zero
    3494:	0039883a 	mov	fp,zero
    3498:	dcc12b05 	stb	r19,1196(sp)
    349c:	d8012785 	stb	zero,1182(sp)
    34a0:	027fffc4 	movi	r9,-1
    34a4:	d8012e15 	stw	zero,1208(sp)
    34a8:	04401604 	movi	r17,88
    34ac:	04800244 	movi	r18,9
    34b0:	da012a15 	stw	r8,1192(sp)
    34b4:	e027883a 	mov	r19,fp
    34b8:	17000044 	addi	fp,r2,1
    34bc:	80bff804 	addi	r2,r16,-32
    34c0:	88831236 	bltu	r17,r2,410c <___vfprintf_internal_r+0xdf4>
    34c4:	100490ba 	slli	r2,r2,2
    34c8:	01000034 	movhi	r4,0
    34cc:	210d3704 	addi	r4,r4,13532
    34d0:	1105883a 	add	r2,r2,r4
    34d4:	10800017 	ldw	r2,0(r2)
    34d8:	1000683a 	jmp	r2
    34dc:	00004028 	cmpgeui	zero,zero,256
    34e0:	0000410c 	andi	zero,zero,260
    34e4:	0000410c 	andi	zero,zero,260
    34e8:	00004044 	movi	zero,257
    34ec:	0000410c 	andi	zero,zero,260
    34f0:	0000410c 	andi	zero,zero,260
    34f4:	0000410c 	andi	zero,zero,260
    34f8:	0000410c 	andi	zero,zero,260
    34fc:	0000410c 	andi	zero,zero,260
    3500:	0000410c 	andi	zero,zero,260
    3504:	00004054 	movui	zero,257
    3508:	0000407c 	xorhi	zero,zero,257
    350c:	0000410c 	andi	zero,zero,260
    3510:	00003798 	cmpnei	zero,zero,222
    3514:	000037a8 	cmpgeui	zero,zero,222
    3518:	0000410c 	andi	zero,zero,260
    351c:	000037f8 	rdprs	zero,zero,223
    3520:	00003808 	cmpgei	zero,zero,224
    3524:	00003808 	cmpgei	zero,zero,224
    3528:	00003808 	cmpgei	zero,zero,224
    352c:	00003808 	cmpgei	zero,zero,224
    3530:	00003808 	cmpgei	zero,zero,224
    3534:	00003808 	cmpgei	zero,zero,224
    3538:	00003808 	cmpgei	zero,zero,224
    353c:	00003808 	cmpgei	zero,zero,224
    3540:	00003808 	cmpgei	zero,zero,224
    3544:	0000410c 	andi	zero,zero,260
    3548:	0000410c 	andi	zero,zero,260
    354c:	0000410c 	andi	zero,zero,260
    3550:	0000410c 	andi	zero,zero,260
    3554:	0000410c 	andi	zero,zero,260
    3558:	0000410c 	andi	zero,zero,260
    355c:	0000410c 	andi	zero,zero,260
    3560:	0000410c 	andi	zero,zero,260
    3564:	0000410c 	andi	zero,zero,260
    3568:	0000410c 	andi	zero,zero,260
    356c:	0000384c 	andi	zero,zero,225
    3570:	00003c6c 	andhi	zero,zero,241
    3574:	0000410c 	andi	zero,zero,260
    3578:	00003c6c 	andhi	zero,zero,241
    357c:	0000410c 	andi	zero,zero,260
    3580:	0000410c 	andi	zero,zero,260
    3584:	0000410c 	andi	zero,zero,260
    3588:	0000410c 	andi	zero,zero,260
    358c:	00003d14 	movui	zero,244
    3590:	0000410c 	andi	zero,zero,260
    3594:	0000410c 	andi	zero,zero,260
    3598:	00003d24 	muli	zero,zero,244
    359c:	0000410c 	andi	zero,zero,260
    35a0:	0000410c 	andi	zero,zero,260
    35a4:	0000410c 	andi	zero,zero,260
    35a8:	0000410c 	andi	zero,zero,260
    35ac:	0000410c 	andi	zero,zero,260
    35b0:	00003d68 	cmpgeui	zero,zero,245
    35b4:	0000410c 	andi	zero,zero,260
    35b8:	0000410c 	andi	zero,zero,260
    35bc:	00003da0 	cmpeqi	zero,zero,246
    35c0:	0000410c 	andi	zero,zero,260
    35c4:	0000410c 	andi	zero,zero,260
    35c8:	0000410c 	andi	zero,zero,260
    35cc:	0000410c 	andi	zero,zero,260
    35d0:	0000410c 	andi	zero,zero,260
    35d4:	0000410c 	andi	zero,zero,260
    35d8:	0000410c 	andi	zero,zero,260
    35dc:	0000410c 	andi	zero,zero,260
    35e0:	0000410c 	andi	zero,zero,260
    35e4:	0000410c 	andi	zero,zero,260
    35e8:	00003fdc 	xori	zero,zero,255
    35ec:	00003f88 	cmpgei	zero,zero,254
    35f0:	00003c6c 	andhi	zero,zero,241
    35f4:	00003c6c 	andhi	zero,zero,241
    35f8:	00003c6c 	andhi	zero,zero,241
    35fc:	00003fcc 	andi	zero,zero,255
    3600:	00003f88 	cmpgei	zero,zero,254
    3604:	0000410c 	andi	zero,zero,260
    3608:	0000410c 	andi	zero,zero,260
    360c:	00003ea4 	muli	zero,zero,250
    3610:	0000410c 	andi	zero,zero,260
    3614:	00003ebc 	xorhi	zero,zero,250
    3618:	00003efc 	xorhi	zero,zero,251
    361c:	00003f3c 	xorhi	zero,zero,252
    3620:	00003e08 	cmpgei	zero,zero,248
    3624:	0000410c 	andi	zero,zero,260
    3628:	00004090 	cmplti	zero,zero,258
    362c:	0000410c 	andi	zero,zero,260
    3630:	00003e18 	cmpnei	zero,zero,248
    3634:	0000410c 	andi	zero,zero,260
    3638:	0000410c 	andi	zero,zero,260
    363c:	00003e58 	cmpnei	zero,zero,249
    3640:	d9412a17 	ldw	r5,1192(sp)
    3644:	8163c83a 	sub	r17,r16,r5
    3648:	003f7d06 	br	3440 <__alt_data_end+0xfffadd10>
    364c:	b809883a 	mov	r4,r23
    3650:	b00b883a 	mov	r5,r22
    3654:	00054380 	call	5438 <__swsetup_r>
    3658:	10002d1e 	bne	r2,zero,3710 <___vfprintf_internal_r+0x3f8>
    365c:	b0c0030b 	ldhu	r3,12(r22)
    3660:	01000284 	movi	r4,10
    3664:	1805883a 	mov	r2,r3
    3668:	1080068c 	andi	r2,r2,26
    366c:	113f541e 	bne	r2,r4,33c0 <__alt_data_end+0xfffadc90>
    3670:	b080038b 	ldhu	r2,14(r22)
    3674:	113fffcc 	andi	r4,r2,65535
    3678:	2120001c 	xori	r4,r4,32768
    367c:	21200004 	addi	r4,r4,-32768
    3680:	203f4f16 	blt	r4,zero,33c0 <__alt_data_end+0xfffadc90>
    3684:	b2c01917 	ldw	r11,100(r22)
    3688:	b2800717 	ldw	r10,28(r22)
    368c:	b2400917 	ldw	r9,36(r22)
    3690:	d9812a17 	ldw	r6,1192(sp)
    3694:	d9c12d17 	ldw	r7,1204(sp)
    3698:	02010004 	movi	r8,1024
    369c:	18ffff4c 	andi	r3,r3,65533
    36a0:	d881078d 	sth	r2,1054(sp)
    36a4:	b809883a 	mov	r4,r23
    36a8:	d8800404 	addi	r2,sp,16
    36ac:	d9410404 	addi	r5,sp,1040
    36b0:	d8c1070d 	sth	r3,1052(sp)
    36b4:	dac11d15 	stw	r11,1140(sp)
    36b8:	da810b15 	stw	r10,1068(sp)
    36bc:	da410d15 	stw	r9,1076(sp)
    36c0:	d8810415 	stw	r2,1040(sp)
    36c4:	d8810815 	stw	r2,1056(sp)
    36c8:	da010615 	stw	r8,1048(sp)
    36cc:	da010915 	stw	r8,1060(sp)
    36d0:	d8010a15 	stw	zero,1064(sp)
    36d4:	00033180 	call	3318 <___vfprintf_internal_r>
    36d8:	1021883a 	mov	r16,r2
    36dc:	10000416 	blt	r2,zero,36f0 <___vfprintf_internal_r+0x3d8>
    36e0:	b809883a 	mov	r4,r23
    36e4:	d9410404 	addi	r5,sp,1040
    36e8:	0006eb80 	call	6eb8 <_fflush_r>
    36ec:	1007301e 	bne	r2,zero,53b0 <___vfprintf_internal_r+0x2098>
    36f0:	d881070b 	ldhu	r2,1052(sp)
    36f4:	1080100c 	andi	r2,r2,64
    36f8:	10000326 	beq	r2,zero,3708 <___vfprintf_internal_r+0x3f0>
    36fc:	b080030b 	ldhu	r2,12(r22)
    3700:	10801014 	ori	r2,r2,64
    3704:	b080030d 	sth	r2,12(r22)
    3708:	8005883a 	mov	r2,r16
    370c:	00000106 	br	3714 <___vfprintf_internal_r+0x3fc>
    3710:	00bfffc4 	movi	r2,-1
    3714:	dfc14917 	ldw	ra,1316(sp)
    3718:	df014817 	ldw	fp,1312(sp)
    371c:	ddc14717 	ldw	r23,1308(sp)
    3720:	dd814617 	ldw	r22,1304(sp)
    3724:	dd414517 	ldw	r21,1300(sp)
    3728:	dd014417 	ldw	r20,1296(sp)
    372c:	dcc14317 	ldw	r19,1292(sp)
    3730:	dc814217 	ldw	r18,1288(sp)
    3734:	dc414117 	ldw	r17,1284(sp)
    3738:	dc014017 	ldw	r16,1280(sp)
    373c:	dec14a04 	addi	sp,sp,1320
    3740:	f800283a 	ret
    3744:	b809883a 	mov	r4,r23
    3748:	b00b883a 	mov	r5,r22
    374c:	d9811e04 	addi	r6,sp,1144
    3750:	0009f5c0 	call	9f5c <__sprint_r>
    3754:	1000081e 	bne	r2,zero,3778 <___vfprintf_internal_r+0x460>
    3758:	da000404 	addi	r8,sp,16
    375c:	003f4506 	br	3474 <__alt_data_end+0xfffadd44>
    3760:	d8812017 	ldw	r2,1152(sp)
    3764:	10000426 	beq	r2,zero,3778 <___vfprintf_internal_r+0x460>
    3768:	b809883a 	mov	r4,r23
    376c:	b00b883a 	mov	r5,r22
    3770:	d9811e04 	addi	r6,sp,1144
    3774:	0009f5c0 	call	9f5c <__sprint_r>
    3778:	b080030b 	ldhu	r2,12(r22)
    377c:	1080100c 	andi	r2,r2,64
    3780:	103fe31e 	bne	r2,zero,3710 <__alt_data_end+0xfffadfe0>
    3784:	d8812f17 	ldw	r2,1212(sp)
    3788:	003fe206 	br	3714 <__alt_data_end+0xfffadfe4>
    378c:	b809883a 	mov	r4,r23
    3790:	00074740 	call	7474 <__sinit>
    3794:	003ef806 	br	3378 <__alt_data_end+0xfffadc48>
    3798:	e005883a 	mov	r2,fp
    379c:	9cc00114 	ori	r19,r19,4
    37a0:	e4000007 	ldb	r16,0(fp)
    37a4:	003f4406 	br	34b8 <__alt_data_end+0xfffadd88>
    37a8:	e4000007 	ldb	r16,0(fp)
    37ac:	01000a84 	movi	r4,42
    37b0:	e0800044 	addi	r2,fp,1
    37b4:	8106f626 	beq	r16,r4,5390 <___vfprintf_internal_r+0x2078>
    37b8:	857ff404 	addi	r21,r16,-48
    37bc:	1039883a 	mov	fp,r2
    37c0:	0013883a 	mov	r9,zero
    37c4:	957f3d36 	bltu	r18,r21,34bc <__alt_data_end+0xfffadd8c>
    37c8:	0009883a 	mov	r4,zero
    37cc:	01400284 	movi	r5,10
    37d0:	000ca900 	call	ca90 <__mulsi3>
    37d4:	e4000007 	ldb	r16,0(fp)
    37d8:	a889883a 	add	r4,r21,r2
    37dc:	e7000044 	addi	fp,fp,1
    37e0:	857ff404 	addi	r21,r16,-48
    37e4:	957ff92e 	bgeu	r18,r21,37cc <__alt_data_end+0xfffae09c>
    37e8:	2013883a 	mov	r9,r4
    37ec:	203f330e 	bge	r4,zero,34bc <__alt_data_end+0xfffadd8c>
    37f0:	027fffc4 	movi	r9,-1
    37f4:	003f3106 	br	34bc <__alt_data_end+0xfffadd8c>
    37f8:	9cc02014 	ori	r19,r19,128
    37fc:	e005883a 	mov	r2,fp
    3800:	e4000007 	ldb	r16,0(fp)
    3804:	003f2c06 	br	34b8 <__alt_data_end+0xfffadd88>
    3808:	857ff404 	addi	r21,r16,-48
    380c:	d8012e15 	stw	zero,1208(sp)
    3810:	e021883a 	mov	r16,fp
    3814:	0009883a 	mov	r4,zero
    3818:	da412c15 	stw	r9,1200(sp)
    381c:	01400284 	movi	r5,10
    3820:	000ca900 	call	ca90 <__mulsi3>
    3824:	81400007 	ldb	r5,0(r16)
    3828:	1549883a 	add	r4,r2,r21
    382c:	e7000044 	addi	fp,fp,1
    3830:	2d7ff404 	addi	r21,r5,-48
    3834:	e021883a 	mov	r16,fp
    3838:	957ff82e 	bgeu	r18,r21,381c <__alt_data_end+0xfffae0ec>
    383c:	2821883a 	mov	r16,r5
    3840:	d9012e15 	stw	r4,1208(sp)
    3844:	da412c17 	ldw	r9,1200(sp)
    3848:	003f1c06 	br	34bc <__alt_data_end+0xfffadd8c>
    384c:	da012a17 	ldw	r8,1192(sp)
    3850:	df012a15 	stw	fp,1192(sp)
    3854:	9839883a 	mov	fp,r19
    3858:	dcc12b03 	ldbu	r19,1196(sp)
    385c:	e7000414 	ori	fp,fp,16
    3860:	e080080c 	andi	r2,fp,32
    3864:	dcc12785 	stb	r19,1182(sp)
    3868:	d8c12d17 	ldw	r3,1204(sp)
    386c:	1001ce26 	beq	r2,zero,3fa8 <___vfprintf_internal_r+0xc90>
    3870:	d9012d17 	ldw	r4,1204(sp)
    3874:	18800117 	ldw	r2,4(r3)
    3878:	1c800017 	ldw	r18,0(r3)
    387c:	21000204 	addi	r4,r4,8
    3880:	d9012d15 	stw	r4,1204(sp)
    3884:	102b883a 	mov	r21,r2
    3888:	10044916 	blt	r2,zero,49b0 <___vfprintf_internal_r+0x1698>
    388c:	dcc12783 	ldbu	r19,1182(sp)
    3890:	da413215 	stw	r9,1224(sp)
    3894:	00800044 	movi	r2,1
    3898:	9546b03a 	or	r3,r18,r21
    389c:	48000216 	blt	r9,zero,38a8 <___vfprintf_internal_r+0x590>
    38a0:	013fdfc4 	movi	r4,-129
    38a4:	e138703a 	and	fp,fp,r4
    38a8:	1802251e 	bne	r3,zero,4140 <___vfprintf_internal_r+0xe28>
    38ac:	48031726 	beq	r9,zero,450c <___vfprintf_internal_r+0x11f4>
    38b0:	10803fcc 	andi	r2,r2,255
    38b4:	00c00044 	movi	r3,1
    38b8:	10c24526 	beq	r2,r3,41d0 <___vfprintf_internal_r+0xeb8>
    38bc:	00c00084 	movi	r3,2
    38c0:	10c33426 	beq	r2,r3,4594 <___vfprintf_internal_r+0x127c>
    38c4:	d8c10e04 	addi	r3,sp,1080
    38c8:	9008d0fa 	srli	r4,r18,3
    38cc:	a80a977a 	slli	r5,r21,29
    38d0:	a82ad0fa 	srli	r21,r21,3
    38d4:	948001cc 	andi	r18,r18,7
    38d8:	90800c04 	addi	r2,r18,48
    38dc:	18ffffc4 	addi	r3,r3,-1
    38e0:	2924b03a 	or	r18,r5,r4
    38e4:	18800005 	stb	r2,0(r3)
    38e8:	9548b03a 	or	r4,r18,r21
    38ec:	203ff61e 	bne	r4,zero,38c8 <__alt_data_end+0xfffae198>
    38f0:	e100004c 	andi	r4,fp,1
    38f4:	d8c13115 	stw	r3,1220(sp)
    38f8:	20039a1e 	bne	r4,zero,4764 <___vfprintf_internal_r+0x144c>
    38fc:	d8812817 	ldw	r2,1184(sp)
    3900:	10e3c83a 	sub	r17,r2,r3
    3904:	8805883a 	mov	r2,r17
    3908:	8a40010e 	bge	r17,r9,3910 <___vfprintf_internal_r+0x5f8>
    390c:	4805883a 	mov	r2,r9
    3910:	d8812b15 	stw	r2,1196(sp)
    3914:	d8013415 	stw	zero,1232(sp)
    3918:	98803fcc 	andi	r2,r19,255
    391c:	1080201c 	xori	r2,r2,128
    3920:	10bfe004 	addi	r2,r2,-128
    3924:	10000326 	beq	r2,zero,3934 <___vfprintf_internal_r+0x61c>
    3928:	d8c12b17 	ldw	r3,1196(sp)
    392c:	18c00044 	addi	r3,r3,1
    3930:	d8c12b15 	stw	r3,1196(sp)
    3934:	e0c0008c 	andi	r3,fp,2
    3938:	d8c12c15 	stw	r3,1200(sp)
    393c:	18000326 	beq	r3,zero,394c <___vfprintf_internal_r+0x634>
    3940:	d8c12b17 	ldw	r3,1196(sp)
    3944:	18c00084 	addi	r3,r3,2
    3948:	d8c12b15 	stw	r3,1196(sp)
    394c:	e0c0210c 	andi	r3,fp,132
    3950:	d8c13015 	stw	r3,1216(sp)
    3954:	1801f81e 	bne	r3,zero,4138 <___vfprintf_internal_r+0xe20>
    3958:	d9012e17 	ldw	r4,1208(sp)
    395c:	d8c12b17 	ldw	r3,1196(sp)
    3960:	20ebc83a 	sub	r21,r4,r3
    3964:	0541f40e 	bge	zero,r21,4138 <___vfprintf_internal_r+0xe20>
    3968:	02400404 	movi	r9,16
    396c:	d8c12017 	ldw	r3,1152(sp)
    3970:	d8811f17 	ldw	r2,1148(sp)
    3974:	4d45750e 	bge	r9,r21,4f4c <___vfprintf_internal_r+0x1c34>
    3978:	01400074 	movhi	r5,1
    397c:	2948c084 	addi	r5,r5,8962
    3980:	d9413615 	stw	r5,1240(sp)
    3984:	4827883a 	mov	r19,r9
    3988:	048001c4 	movi	r18,7
    398c:	00000306 	br	399c <___vfprintf_internal_r+0x684>
    3990:	ad7ffc04 	addi	r21,r21,-16
    3994:	42000204 	addi	r8,r8,8
    3998:	9d40130e 	bge	r19,r21,39e8 <___vfprintf_internal_r+0x6d0>
    399c:	01000074 	movhi	r4,1
    39a0:	18c00404 	addi	r3,r3,16
    39a4:	10800044 	addi	r2,r2,1
    39a8:	2108c084 	addi	r4,r4,8962
    39ac:	41000015 	stw	r4,0(r8)
    39b0:	44c00115 	stw	r19,4(r8)
    39b4:	d8c12015 	stw	r3,1152(sp)
    39b8:	d8811f15 	stw	r2,1148(sp)
    39bc:	90bff40e 	bge	r18,r2,3990 <__alt_data_end+0xfffae260>
    39c0:	b809883a 	mov	r4,r23
    39c4:	b00b883a 	mov	r5,r22
    39c8:	d9811e04 	addi	r6,sp,1144
    39cc:	0009f5c0 	call	9f5c <__sprint_r>
    39d0:	103f691e 	bne	r2,zero,3778 <__alt_data_end+0xfffae048>
    39d4:	ad7ffc04 	addi	r21,r21,-16
    39d8:	d8c12017 	ldw	r3,1152(sp)
    39dc:	d8811f17 	ldw	r2,1148(sp)
    39e0:	da000404 	addi	r8,sp,16
    39e4:	9d7fed16 	blt	r19,r21,399c <__alt_data_end+0xfffae26c>
    39e8:	d9413617 	ldw	r5,1240(sp)
    39ec:	a8c7883a 	add	r3,r21,r3
    39f0:	10800044 	addi	r2,r2,1
    39f4:	41400015 	stw	r5,0(r8)
    39f8:	45400115 	stw	r21,4(r8)
    39fc:	d8c12015 	stw	r3,1152(sp)
    3a00:	d8811f15 	stw	r2,1148(sp)
    3a04:	010001c4 	movi	r4,7
    3a08:	20832b16 	blt	r4,r2,46b8 <___vfprintf_internal_r+0x13a0>
    3a0c:	d8812787 	ldb	r2,1182(sp)
    3a10:	42000204 	addi	r8,r8,8
    3a14:	10000c26 	beq	r2,zero,3a48 <___vfprintf_internal_r+0x730>
    3a18:	d8811f17 	ldw	r2,1148(sp)
    3a1c:	d9012784 	addi	r4,sp,1182
    3a20:	18c00044 	addi	r3,r3,1
    3a24:	10800044 	addi	r2,r2,1
    3a28:	41000015 	stw	r4,0(r8)
    3a2c:	01000044 	movi	r4,1
    3a30:	41000115 	stw	r4,4(r8)
    3a34:	d8c12015 	stw	r3,1152(sp)
    3a38:	d8811f15 	stw	r2,1148(sp)
    3a3c:	010001c4 	movi	r4,7
    3a40:	2082c416 	blt	r4,r2,4554 <___vfprintf_internal_r+0x123c>
    3a44:	42000204 	addi	r8,r8,8
    3a48:	d8812c17 	ldw	r2,1200(sp)
    3a4c:	10000c26 	beq	r2,zero,3a80 <___vfprintf_internal_r+0x768>
    3a50:	d8811f17 	ldw	r2,1148(sp)
    3a54:	d9012704 	addi	r4,sp,1180
    3a58:	18c00084 	addi	r3,r3,2
    3a5c:	10800044 	addi	r2,r2,1
    3a60:	41000015 	stw	r4,0(r8)
    3a64:	01000084 	movi	r4,2
    3a68:	41000115 	stw	r4,4(r8)
    3a6c:	d8c12015 	stw	r3,1152(sp)
    3a70:	d8811f15 	stw	r2,1148(sp)
    3a74:	010001c4 	movi	r4,7
    3a78:	2082be16 	blt	r4,r2,4574 <___vfprintf_internal_r+0x125c>
    3a7c:	42000204 	addi	r8,r8,8
    3a80:	d9013017 	ldw	r4,1216(sp)
    3a84:	00802004 	movi	r2,128
    3a88:	20822026 	beq	r4,r2,430c <___vfprintf_internal_r+0xff4>
    3a8c:	d9413217 	ldw	r5,1224(sp)
    3a90:	2c67c83a 	sub	r19,r5,r17
    3a94:	04c0260e 	bge	zero,r19,3b30 <___vfprintf_internal_r+0x818>
    3a98:	05400404 	movi	r21,16
    3a9c:	d8811f17 	ldw	r2,1148(sp)
    3aa0:	acc4720e 	bge	r21,r19,4c6c <___vfprintf_internal_r+0x1954>
    3aa4:	01400074 	movhi	r5,1
    3aa8:	2948bc84 	addi	r5,r5,8946
    3aac:	d9412c15 	stw	r5,1200(sp)
    3ab0:	048001c4 	movi	r18,7
    3ab4:	00000306 	br	3ac4 <___vfprintf_internal_r+0x7ac>
    3ab8:	9cfffc04 	addi	r19,r19,-16
    3abc:	42000204 	addi	r8,r8,8
    3ac0:	acc0110e 	bge	r21,r19,3b08 <___vfprintf_internal_r+0x7f0>
    3ac4:	18c00404 	addi	r3,r3,16
    3ac8:	10800044 	addi	r2,r2,1
    3acc:	45000015 	stw	r20,0(r8)
    3ad0:	45400115 	stw	r21,4(r8)
    3ad4:	d8c12015 	stw	r3,1152(sp)
    3ad8:	d8811f15 	stw	r2,1148(sp)
    3adc:	90bff60e 	bge	r18,r2,3ab8 <__alt_data_end+0xfffae388>
    3ae0:	b809883a 	mov	r4,r23
    3ae4:	b00b883a 	mov	r5,r22
    3ae8:	d9811e04 	addi	r6,sp,1144
    3aec:	0009f5c0 	call	9f5c <__sprint_r>
    3af0:	103f211e 	bne	r2,zero,3778 <__alt_data_end+0xfffae048>
    3af4:	9cfffc04 	addi	r19,r19,-16
    3af8:	d8c12017 	ldw	r3,1152(sp)
    3afc:	d8811f17 	ldw	r2,1148(sp)
    3b00:	da000404 	addi	r8,sp,16
    3b04:	acffef16 	blt	r21,r19,3ac4 <__alt_data_end+0xfffae394>
    3b08:	d9012c17 	ldw	r4,1200(sp)
    3b0c:	1cc7883a 	add	r3,r3,r19
    3b10:	10800044 	addi	r2,r2,1
    3b14:	41000015 	stw	r4,0(r8)
    3b18:	44c00115 	stw	r19,4(r8)
    3b1c:	d8c12015 	stw	r3,1152(sp)
    3b20:	d8811f15 	stw	r2,1148(sp)
    3b24:	010001c4 	movi	r4,7
    3b28:	20828216 	blt	r4,r2,4534 <___vfprintf_internal_r+0x121c>
    3b2c:	42000204 	addi	r8,r8,8
    3b30:	e080400c 	andi	r2,fp,256
    3b34:	1001ac1e 	bne	r2,zero,41e8 <___vfprintf_internal_r+0xed0>
    3b38:	d8811f17 	ldw	r2,1148(sp)
    3b3c:	d9413117 	ldw	r5,1220(sp)
    3b40:	1c47883a 	add	r3,r3,r17
    3b44:	10800044 	addi	r2,r2,1
    3b48:	41400015 	stw	r5,0(r8)
    3b4c:	44400115 	stw	r17,4(r8)
    3b50:	d8c12015 	stw	r3,1152(sp)
    3b54:	d8811f15 	stw	r2,1148(sp)
    3b58:	010001c4 	movi	r4,7
    3b5c:	20825d16 	blt	r4,r2,44d4 <___vfprintf_internal_r+0x11bc>
    3b60:	42000204 	addi	r8,r8,8
    3b64:	e080010c 	andi	r2,fp,4
    3b68:	10003126 	beq	r2,zero,3c30 <___vfprintf_internal_r+0x918>
    3b6c:	d8812e17 	ldw	r2,1208(sp)
    3b70:	d9012b17 	ldw	r4,1196(sp)
    3b74:	1121c83a 	sub	r16,r2,r4
    3b78:	04002d0e 	bge	zero,r16,3c30 <___vfprintf_internal_r+0x918>
    3b7c:	04400404 	movi	r17,16
    3b80:	d8811f17 	ldw	r2,1148(sp)
    3b84:	8c05340e 	bge	r17,r16,5058 <___vfprintf_internal_r+0x1d40>
    3b88:	01000074 	movhi	r4,1
    3b8c:	2108c084 	addi	r4,r4,8962
    3b90:	d9013615 	stw	r4,1240(sp)
    3b94:	048001c4 	movi	r18,7
    3b98:	00000306 	br	3ba8 <___vfprintf_internal_r+0x890>
    3b9c:	843ffc04 	addi	r16,r16,-16
    3ba0:	42000204 	addi	r8,r8,8
    3ba4:	8c00130e 	bge	r17,r16,3bf4 <___vfprintf_internal_r+0x8dc>
    3ba8:	01400074 	movhi	r5,1
    3bac:	18c00404 	addi	r3,r3,16
    3bb0:	10800044 	addi	r2,r2,1
    3bb4:	2948c084 	addi	r5,r5,8962
    3bb8:	41400015 	stw	r5,0(r8)
    3bbc:	44400115 	stw	r17,4(r8)
    3bc0:	d8c12015 	stw	r3,1152(sp)
    3bc4:	d8811f15 	stw	r2,1148(sp)
    3bc8:	90bff40e 	bge	r18,r2,3b9c <__alt_data_end+0xfffae46c>
    3bcc:	b809883a 	mov	r4,r23
    3bd0:	b00b883a 	mov	r5,r22
    3bd4:	d9811e04 	addi	r6,sp,1144
    3bd8:	0009f5c0 	call	9f5c <__sprint_r>
    3bdc:	103ee61e 	bne	r2,zero,3778 <__alt_data_end+0xfffae048>
    3be0:	843ffc04 	addi	r16,r16,-16
    3be4:	d8c12017 	ldw	r3,1152(sp)
    3be8:	d8811f17 	ldw	r2,1148(sp)
    3bec:	da000404 	addi	r8,sp,16
    3bf0:	8c3fed16 	blt	r17,r16,3ba8 <__alt_data_end+0xfffae478>
    3bf4:	d9013617 	ldw	r4,1240(sp)
    3bf8:	1c07883a 	add	r3,r3,r16
    3bfc:	10800044 	addi	r2,r2,1
    3c00:	41000015 	stw	r4,0(r8)
    3c04:	44000115 	stw	r16,4(r8)
    3c08:	d8c12015 	stw	r3,1152(sp)
    3c0c:	d8811f15 	stw	r2,1148(sp)
    3c10:	010001c4 	movi	r4,7
    3c14:	2080060e 	bge	r4,r2,3c30 <___vfprintf_internal_r+0x918>
    3c18:	b809883a 	mov	r4,r23
    3c1c:	b00b883a 	mov	r5,r22
    3c20:	d9811e04 	addi	r6,sp,1144
    3c24:	0009f5c0 	call	9f5c <__sprint_r>
    3c28:	103ed31e 	bne	r2,zero,3778 <__alt_data_end+0xfffae048>
    3c2c:	d8c12017 	ldw	r3,1152(sp)
    3c30:	df012b17 	ldw	fp,1196(sp)
    3c34:	d9412e17 	ldw	r5,1208(sp)
    3c38:	e140010e 	bge	fp,r5,3c40 <___vfprintf_internal_r+0x928>
    3c3c:	2839883a 	mov	fp,r5
    3c40:	d8812f17 	ldw	r2,1212(sp)
    3c44:	1705883a 	add	r2,r2,fp
    3c48:	d8812f15 	stw	r2,1212(sp)
    3c4c:	1802291e 	bne	r3,zero,44f4 <___vfprintf_internal_r+0x11dc>
    3c50:	d8c12a17 	ldw	r3,1192(sp)
    3c54:	d8011f15 	stw	zero,1148(sp)
    3c58:	da000404 	addi	r8,sp,16
    3c5c:	18800007 	ldb	r2,0(r3)
    3c60:	103ded1e 	bne	r2,zero,3418 <__alt_data_end+0xfffadce8>
    3c64:	dc012a17 	ldw	r16,1192(sp)
    3c68:	003e0506 	br	3480 <__alt_data_end+0xfffadd50>
    3c6c:	d9012d17 	ldw	r4,1204(sp)
    3c70:	d9412d17 	ldw	r5,1204(sp)
    3c74:	da012a17 	ldw	r8,1192(sp)
    3c78:	21000017 	ldw	r4,0(r4)
    3c7c:	29400117 	ldw	r5,4(r5)
    3c80:	df012a15 	stw	fp,1192(sp)
    3c84:	9839883a 	mov	fp,r19
    3c88:	dcc12b03 	ldbu	r19,1196(sp)
    3c8c:	d9013715 	stw	r4,1244(sp)
    3c90:	d9413915 	stw	r5,1252(sp)
    3c94:	da013f15 	stw	r8,1276(sp)
    3c98:	da413e15 	stw	r9,1272(sp)
    3c9c:	dcc12785 	stb	r19,1182(sp)
    3ca0:	0009c0c0 	call	9c0c <__fpclassifyd>
    3ca4:	d8c12d17 	ldw	r3,1204(sp)
    3ca8:	04400044 	movi	r17,1
    3cac:	da013f17 	ldw	r8,1276(sp)
    3cb0:	1c800204 	addi	r18,r3,8
    3cb4:	da413e17 	ldw	r9,1272(sp)
    3cb8:	d9013717 	ldw	r4,1244(sp)
    3cbc:	d9413917 	ldw	r5,1252(sp)
    3cc0:	1443451e 	bne	r2,r17,49d8 <___vfprintf_internal_r+0x16c0>
    3cc4:	000d883a 	mov	r6,zero
    3cc8:	000f883a 	mov	r7,zero
    3ccc:	000de380 	call	de38 <__ledf2>
    3cd0:	da013f17 	ldw	r8,1276(sp)
    3cd4:	1004fe16 	blt	r2,zero,50d0 <___vfprintf_internal_r+0x1db8>
    3cd8:	dcc12783 	ldbu	r19,1182(sp)
    3cdc:	008011c4 	movi	r2,71
    3ce0:	14045d0e 	bge	r2,r16,4e58 <___vfprintf_internal_r+0x1b40>
    3ce4:	01400074 	movhi	r5,1
    3ce8:	2948ad04 	addi	r5,r5,8884
    3cec:	d9413115 	stw	r5,1220(sp)
    3cf0:	00c000c4 	movi	r3,3
    3cf4:	00bfdfc4 	movi	r2,-129
    3cf8:	d8c12b15 	stw	r3,1196(sp)
    3cfc:	e0b8703a 	and	fp,fp,r2
    3d00:	dc812d15 	stw	r18,1204(sp)
    3d04:	1823883a 	mov	r17,r3
    3d08:	d8013215 	stw	zero,1224(sp)
    3d0c:	d8013415 	stw	zero,1232(sp)
    3d10:	003f0106 	br	3918 <__alt_data_end+0xfffae1e8>
    3d14:	9cc00214 	ori	r19,r19,8
    3d18:	e005883a 	mov	r2,fp
    3d1c:	e4000007 	ldb	r16,0(fp)
    3d20:	003de506 	br	34b8 <__alt_data_end+0xfffadd88>
    3d24:	da012a17 	ldw	r8,1192(sp)
    3d28:	df012a15 	stw	fp,1192(sp)
    3d2c:	9f000414 	ori	fp,r19,16
    3d30:	e0c0080c 	andi	r3,fp,32
    3d34:	d8812d17 	ldw	r2,1204(sp)
    3d38:	18007626 	beq	r3,zero,3f14 <___vfprintf_internal_r+0xbfc>
    3d3c:	d9412d17 	ldw	r5,1204(sp)
    3d40:	14800017 	ldw	r18,0(r2)
    3d44:	15400117 	ldw	r21,4(r2)
    3d48:	29400204 	addi	r5,r5,8
    3d4c:	d9412d15 	stw	r5,1204(sp)
    3d50:	0005883a 	mov	r2,zero
    3d54:	9546b03a 	or	r3,r18,r21
    3d58:	d8012785 	stb	zero,1182(sp)
    3d5c:	da413215 	stw	r9,1224(sp)
    3d60:	0027883a 	mov	r19,zero
    3d64:	003ecd06 	br	389c <__alt_data_end+0xfffae16c>
    3d68:	da012a17 	ldw	r8,1192(sp)
    3d6c:	df012a15 	stw	fp,1192(sp)
    3d70:	9f000414 	ori	fp,r19,16
    3d74:	e0c0080c 	andi	r3,fp,32
    3d78:	d8812d17 	ldw	r2,1204(sp)
    3d7c:	18002c26 	beq	r3,zero,3e30 <___vfprintf_internal_r+0xb18>
    3d80:	d9012d17 	ldw	r4,1204(sp)
    3d84:	14800017 	ldw	r18,0(r2)
    3d88:	15400117 	ldw	r21,4(r2)
    3d8c:	21000204 	addi	r4,r4,8
    3d90:	d9012d15 	stw	r4,1204(sp)
    3d94:	00800044 	movi	r2,1
    3d98:	9546b03a 	or	r3,r18,r21
    3d9c:	003fee06 	br	3d58 <__alt_data_end+0xfffae628>
    3da0:	da012a17 	ldw	r8,1192(sp)
    3da4:	df012a15 	stw	fp,1192(sp)
    3da8:	9839883a 	mov	fp,r19
    3dac:	dcc12b03 	ldbu	r19,1196(sp)
    3db0:	01400074 	movhi	r5,1
    3db4:	2948b004 	addi	r5,r5,8896
    3db8:	dcc12785 	stb	r19,1182(sp)
    3dbc:	d9413b15 	stw	r5,1260(sp)
    3dc0:	e0c0080c 	andi	r3,fp,32
    3dc4:	d8812d17 	ldw	r2,1204(sp)
    3dc8:	18002e26 	beq	r3,zero,3e84 <___vfprintf_internal_r+0xb6c>
    3dcc:	d9412d17 	ldw	r5,1204(sp)
    3dd0:	14800017 	ldw	r18,0(r2)
    3dd4:	15400117 	ldw	r21,4(r2)
    3dd8:	29400204 	addi	r5,r5,8
    3ddc:	d9412d15 	stw	r5,1204(sp)
    3de0:	e080004c 	andi	r2,fp,1
    3de4:	10025c26 	beq	r2,zero,4758 <___vfprintf_internal_r+0x1440>
    3de8:	9546b03a 	or	r3,r18,r21
    3dec:	18038f26 	beq	r3,zero,4c2c <___vfprintf_internal_r+0x1914>
    3df0:	00800c04 	movi	r2,48
    3df4:	d8812705 	stb	r2,1180(sp)
    3df8:	dc012745 	stb	r16,1181(sp)
    3dfc:	e7000094 	ori	fp,fp,2
    3e00:	00800084 	movi	r2,2
    3e04:	003fd406 	br	3d58 <__alt_data_end+0xfffae628>
    3e08:	9cc00814 	ori	r19,r19,32
    3e0c:	e005883a 	mov	r2,fp
    3e10:	e4000007 	ldb	r16,0(fp)
    3e14:	003da806 	br	34b8 <__alt_data_end+0xfffadd88>
    3e18:	da012a17 	ldw	r8,1192(sp)
    3e1c:	df012a15 	stw	fp,1192(sp)
    3e20:	9839883a 	mov	fp,r19
    3e24:	e0c0080c 	andi	r3,fp,32
    3e28:	d8812d17 	ldw	r2,1204(sp)
    3e2c:	183fd41e 	bne	r3,zero,3d80 <__alt_data_end+0xfffae650>
    3e30:	e0c0040c 	andi	r3,fp,16
    3e34:	18035f26 	beq	r3,zero,4bb4 <___vfprintf_internal_r+0x189c>
    3e38:	d9412d17 	ldw	r5,1204(sp)
    3e3c:	14800017 	ldw	r18,0(r2)
    3e40:	002b883a 	mov	r21,zero
    3e44:	29400104 	addi	r5,r5,4
    3e48:	d9412d15 	stw	r5,1204(sp)
    3e4c:	00800044 	movi	r2,1
    3e50:	9007883a 	mov	r3,r18
    3e54:	003fc006 	br	3d58 <__alt_data_end+0xfffae628>
    3e58:	da012a17 	ldw	r8,1192(sp)
    3e5c:	df012a15 	stw	fp,1192(sp)
    3e60:	9839883a 	mov	fp,r19
    3e64:	dcc12b03 	ldbu	r19,1196(sp)
    3e68:	01000074 	movhi	r4,1
    3e6c:	2108b504 	addi	r4,r4,8916
    3e70:	d9013b15 	stw	r4,1260(sp)
    3e74:	dcc12785 	stb	r19,1182(sp)
    3e78:	e0c0080c 	andi	r3,fp,32
    3e7c:	d8812d17 	ldw	r2,1204(sp)
    3e80:	183fd21e 	bne	r3,zero,3dcc <__alt_data_end+0xfffae69c>
    3e84:	e0c0040c 	andi	r3,fp,16
    3e88:	18035426 	beq	r3,zero,4bdc <___vfprintf_internal_r+0x18c4>
    3e8c:	d8c12d17 	ldw	r3,1204(sp)
    3e90:	14800017 	ldw	r18,0(r2)
    3e94:	002b883a 	mov	r21,zero
    3e98:	18c00104 	addi	r3,r3,4
    3e9c:	d8c12d15 	stw	r3,1204(sp)
    3ea0:	003fcf06 	br	3de0 <__alt_data_end+0xfffae6b0>
    3ea4:	e4000007 	ldb	r16,0(fp)
    3ea8:	00801b04 	movi	r2,108
    3eac:	8083f726 	beq	r16,r2,4e8c <___vfprintf_internal_r+0x1b74>
    3eb0:	9cc00414 	ori	r19,r19,16
    3eb4:	e005883a 	mov	r2,fp
    3eb8:	003d7f06 	br	34b8 <__alt_data_end+0xfffadd88>
    3ebc:	da012a17 	ldw	r8,1192(sp)
    3ec0:	df012a15 	stw	fp,1192(sp)
    3ec4:	9839883a 	mov	fp,r19
    3ec8:	dcc12b03 	ldbu	r19,1196(sp)
    3ecc:	e080080c 	andi	r2,fp,32
    3ed0:	dcc12785 	stb	r19,1182(sp)
    3ed4:	10032226 	beq	r2,zero,4b60 <___vfprintf_internal_r+0x1848>
    3ed8:	d9412d17 	ldw	r5,1204(sp)
    3edc:	d9012f17 	ldw	r4,1212(sp)
    3ee0:	28800017 	ldw	r2,0(r5)
    3ee4:	2007d7fa 	srai	r3,r4,31
    3ee8:	29400104 	addi	r5,r5,4
    3eec:	d9412d15 	stw	r5,1204(sp)
    3ef0:	11000015 	stw	r4,0(r2)
    3ef4:	10c00115 	stw	r3,4(r2)
    3ef8:	003d4406 	br	340c <__alt_data_end+0xfffadcdc>
    3efc:	da012a17 	ldw	r8,1192(sp)
    3f00:	df012a15 	stw	fp,1192(sp)
    3f04:	9839883a 	mov	fp,r19
    3f08:	e0c0080c 	andi	r3,fp,32
    3f0c:	d8812d17 	ldw	r2,1204(sp)
    3f10:	183f8a1e 	bne	r3,zero,3d3c <__alt_data_end+0xfffae60c>
    3f14:	e0c0040c 	andi	r3,fp,16
    3f18:	18031c26 	beq	r3,zero,4b8c <___vfprintf_internal_r+0x1874>
    3f1c:	14800017 	ldw	r18,0(r2)
    3f20:	d8812d17 	ldw	r2,1204(sp)
    3f24:	002b883a 	mov	r21,zero
    3f28:	9007883a 	mov	r3,r18
    3f2c:	10800104 	addi	r2,r2,4
    3f30:	d8812d15 	stw	r2,1204(sp)
    3f34:	0005883a 	mov	r2,zero
    3f38:	003f8706 	br	3d58 <__alt_data_end+0xfffae628>
    3f3c:	d9412d17 	ldw	r5,1204(sp)
    3f40:	00800c04 	movi	r2,48
    3f44:	d8812705 	stb	r2,1180(sp)
    3f48:	2c800017 	ldw	r18,0(r5)
    3f4c:	00801e04 	movi	r2,120
    3f50:	d8812745 	stb	r2,1181(sp)
    3f54:	00800074 	movhi	r2,1
    3f58:	1088b504 	addi	r2,r2,8916
    3f5c:	29400104 	addi	r5,r5,4
    3f60:	da012a17 	ldw	r8,1192(sp)
    3f64:	d8813b15 	stw	r2,1260(sp)
    3f68:	df012a15 	stw	fp,1192(sp)
    3f6c:	002b883a 	mov	r21,zero
    3f70:	9f000094 	ori	fp,r19,2
    3f74:	d9412d15 	stw	r5,1204(sp)
    3f78:	00800084 	movi	r2,2
    3f7c:	04001e04 	movi	r16,120
    3f80:	9007883a 	mov	r3,r18
    3f84:	003f7406 	br	3d58 <__alt_data_end+0xfffae628>
    3f88:	da012a17 	ldw	r8,1192(sp)
    3f8c:	df012a15 	stw	fp,1192(sp)
    3f90:	9839883a 	mov	fp,r19
    3f94:	dcc12b03 	ldbu	r19,1196(sp)
    3f98:	e080080c 	andi	r2,fp,32
    3f9c:	d8c12d17 	ldw	r3,1204(sp)
    3fa0:	dcc12785 	stb	r19,1182(sp)
    3fa4:	103e321e 	bne	r2,zero,3870 <__alt_data_end+0xfffae140>
    3fa8:	e080040c 	andi	r2,fp,16
    3fac:	10031326 	beq	r2,zero,4bfc <___vfprintf_internal_r+0x18e4>
    3fb0:	1c800017 	ldw	r18,0(r3)
    3fb4:	d9412d17 	ldw	r5,1204(sp)
    3fb8:	902bd7fa 	srai	r21,r18,31
    3fbc:	29400104 	addi	r5,r5,4
    3fc0:	d9412d15 	stw	r5,1204(sp)
    3fc4:	a805883a 	mov	r2,r21
    3fc8:	003e2f06 	br	3888 <__alt_data_end+0xfffae158>
    3fcc:	9cc01014 	ori	r19,r19,64
    3fd0:	e005883a 	mov	r2,fp
    3fd4:	e4000007 	ldb	r16,0(fp)
    3fd8:	003d3706 	br	34b8 <__alt_data_end+0xfffadd88>
    3fdc:	d8c12d17 	ldw	r3,1204(sp)
    3fe0:	d9012d17 	ldw	r4,1204(sp)
    3fe4:	da012a17 	ldw	r8,1192(sp)
    3fe8:	18800017 	ldw	r2,0(r3)
    3fec:	21000104 	addi	r4,r4,4
    3ff0:	00c00044 	movi	r3,1
    3ff4:	df012a15 	stw	fp,1192(sp)
    3ff8:	d8c12b15 	stw	r3,1196(sp)
    3ffc:	9839883a 	mov	fp,r19
    4000:	d8012785 	stb	zero,1182(sp)
    4004:	d8810405 	stb	r2,1040(sp)
    4008:	d9012d15 	stw	r4,1204(sp)
    400c:	1823883a 	mov	r17,r3
    4010:	d8c10404 	addi	r3,sp,1040
    4014:	d8013215 	stw	zero,1224(sp)
    4018:	d8013415 	stw	zero,1232(sp)
    401c:	d8c13115 	stw	r3,1220(sp)
    4020:	0005883a 	mov	r2,zero
    4024:	003e4306 	br	3934 <__alt_data_end+0xfffae204>
    4028:	d8812b07 	ldb	r2,1196(sp)
    402c:	1002fc1e 	bne	r2,zero,4c20 <___vfprintf_internal_r+0x1908>
    4030:	00c00804 	movi	r3,32
    4034:	d8c12b05 	stb	r3,1196(sp)
    4038:	e005883a 	mov	r2,fp
    403c:	e4000007 	ldb	r16,0(fp)
    4040:	003d1d06 	br	34b8 <__alt_data_end+0xfffadd88>
    4044:	9cc00054 	ori	r19,r19,1
    4048:	e005883a 	mov	r2,fp
    404c:	e4000007 	ldb	r16,0(fp)
    4050:	003d1906 	br	34b8 <__alt_data_end+0xfffadd88>
    4054:	d9012d17 	ldw	r4,1204(sp)
    4058:	d9412d17 	ldw	r5,1204(sp)
    405c:	21000017 	ldw	r4,0(r4)
    4060:	28c00104 	addi	r3,r5,4
    4064:	d9012e15 	stw	r4,1208(sp)
    4068:	20038c16 	blt	r4,zero,4e9c <___vfprintf_internal_r+0x1b84>
    406c:	d8c12d15 	stw	r3,1204(sp)
    4070:	e005883a 	mov	r2,fp
    4074:	e4000007 	ldb	r16,0(fp)
    4078:	003d0f06 	br	34b8 <__alt_data_end+0xfffadd88>
    407c:	00c00ac4 	movi	r3,43
    4080:	d8c12b05 	stb	r3,1196(sp)
    4084:	e005883a 	mov	r2,fp
    4088:	e4000007 	ldb	r16,0(fp)
    408c:	003d0a06 	br	34b8 <__alt_data_end+0xfffadd88>
    4090:	d8c12d17 	ldw	r3,1204(sp)
    4094:	d9012d17 	ldw	r4,1204(sp)
    4098:	da012a17 	ldw	r8,1192(sp)
    409c:	18c00017 	ldw	r3,0(r3)
    40a0:	df012a15 	stw	fp,1192(sp)
    40a4:	d8012785 	stb	zero,1182(sp)
    40a8:	d8c13115 	stw	r3,1220(sp)
    40ac:	9839883a 	mov	fp,r19
    40b0:	24800104 	addi	r18,r4,4
    40b4:	1803f726 	beq	r3,zero,5094 <___vfprintf_internal_r+0x1d7c>
    40b8:	d9013117 	ldw	r4,1220(sp)
    40bc:	48038916 	blt	r9,zero,4ee4 <___vfprintf_internal_r+0x1bcc>
    40c0:	480d883a 	mov	r6,r9
    40c4:	000b883a 	mov	r5,zero
    40c8:	da013f15 	stw	r8,1276(sp)
    40cc:	da413e15 	stw	r9,1272(sp)
    40d0:	00081840 	call	8184 <memchr>
    40d4:	da013f17 	ldw	r8,1276(sp)
    40d8:	da413e17 	ldw	r9,1272(sp)
    40dc:	10045926 	beq	r2,zero,5244 <___vfprintf_internal_r+0x1f2c>
    40e0:	d8c13117 	ldw	r3,1220(sp)
    40e4:	10e3c83a 	sub	r17,r2,r3
    40e8:	4c433516 	blt	r9,r17,4dc0 <___vfprintf_internal_r+0x1aa8>
    40ec:	8805883a 	mov	r2,r17
    40f0:	88038116 	blt	r17,zero,4ef8 <___vfprintf_internal_r+0x1be0>
    40f4:	dcc12783 	ldbu	r19,1182(sp)
    40f8:	d8812b15 	stw	r2,1196(sp)
    40fc:	dc812d15 	stw	r18,1204(sp)
    4100:	d8013215 	stw	zero,1224(sp)
    4104:	d8013415 	stw	zero,1232(sp)
    4108:	003e0306 	br	3918 <__alt_data_end+0xfffae1e8>
    410c:	da012a17 	ldw	r8,1192(sp)
    4110:	df012a15 	stw	fp,1192(sp)
    4114:	9839883a 	mov	fp,r19
    4118:	dcc12b03 	ldbu	r19,1196(sp)
    411c:	dcc12785 	stb	r19,1182(sp)
    4120:	803d8f26 	beq	r16,zero,3760 <__alt_data_end+0xfffae030>
    4124:	00c00044 	movi	r3,1
    4128:	d8c12b15 	stw	r3,1196(sp)
    412c:	dc010405 	stb	r16,1040(sp)
    4130:	d8012785 	stb	zero,1182(sp)
    4134:	003fb506 	br	400c <__alt_data_end+0xfffae8dc>
    4138:	d8c12017 	ldw	r3,1152(sp)
    413c:	003e3506 	br	3a14 <__alt_data_end+0xfffae2e4>
    4140:	10803fcc 	andi	r2,r2,255
    4144:	00c00044 	movi	r3,1
    4148:	10fddc1e 	bne	r2,r3,38bc <__alt_data_end+0xfffae18c>
    414c:	a800021e 	bne	r21,zero,4158 <___vfprintf_internal_r+0xe40>
    4150:	00800244 	movi	r2,9
    4154:	14801e2e 	bgeu	r2,r18,41d0 <___vfprintf_internal_r+0xeb8>
    4158:	dc012b15 	stw	r16,1196(sp)
    415c:	dc410e04 	addi	r17,sp,1080
    4160:	9021883a 	mov	r16,r18
    4164:	da012c15 	stw	r8,1200(sp)
    4168:	a825883a 	mov	r18,r21
    416c:	482b883a 	mov	r21,r9
    4170:	8009883a 	mov	r4,r16
    4174:	900b883a 	mov	r5,r18
    4178:	01800284 	movi	r6,10
    417c:	000f883a 	mov	r7,zero
    4180:	000c3480 	call	c348 <__umoddi3>
    4184:	10800c04 	addi	r2,r2,48
    4188:	8c7fffc4 	addi	r17,r17,-1
    418c:	8009883a 	mov	r4,r16
    4190:	900b883a 	mov	r5,r18
    4194:	01800284 	movi	r6,10
    4198:	000f883a 	mov	r7,zero
    419c:	88800005 	stb	r2,0(r17)
    41a0:	000bd080 	call	bd08 <__udivdi3>
    41a4:	1021883a 	mov	r16,r2
    41a8:	10c4b03a 	or	r2,r2,r3
    41ac:	1825883a 	mov	r18,r3
    41b0:	103fef1e 	bne	r2,zero,4170 <__alt_data_end+0xfffaea40>
    41b4:	d9012817 	ldw	r4,1184(sp)
    41b8:	dc413115 	stw	r17,1220(sp)
    41bc:	dc012b17 	ldw	r16,1196(sp)
    41c0:	da012c17 	ldw	r8,1200(sp)
    41c4:	a813883a 	mov	r9,r21
    41c8:	2463c83a 	sub	r17,r4,r17
    41cc:	003dcd06 	br	3904 <__alt_data_end+0xfffae1d4>
    41d0:	94800c04 	addi	r18,r18,48
    41d4:	d8c10dc4 	addi	r3,sp,1079
    41d8:	dc810dc5 	stb	r18,1079(sp)
    41dc:	dc413c17 	ldw	r17,1264(sp)
    41e0:	d8c13115 	stw	r3,1220(sp)
    41e4:	003dc706 	br	3904 <__alt_data_end+0xfffae1d4>
    41e8:	00801944 	movi	r2,101
    41ec:	1400720e 	bge	r2,r16,43b8 <___vfprintf_internal_r+0x10a0>
    41f0:	d9013717 	ldw	r4,1244(sp)
    41f4:	d9413917 	ldw	r5,1252(sp)
    41f8:	000d883a 	mov	r6,zero
    41fc:	000f883a 	mov	r7,zero
    4200:	d8c13d15 	stw	r3,1268(sp)
    4204:	da013f15 	stw	r8,1276(sp)
    4208:	000dcd40 	call	dcd4 <__eqdf2>
    420c:	d8c13d17 	ldw	r3,1268(sp)
    4210:	da013f17 	ldw	r8,1276(sp)
    4214:	1000f41e 	bne	r2,zero,45e8 <___vfprintf_internal_r+0x12d0>
    4218:	d8811f17 	ldw	r2,1148(sp)
    421c:	01000074 	movhi	r4,1
    4220:	2108bc04 	addi	r4,r4,8944
    4224:	18c00044 	addi	r3,r3,1
    4228:	10800044 	addi	r2,r2,1
    422c:	41000015 	stw	r4,0(r8)
    4230:	01000044 	movi	r4,1
    4234:	41000115 	stw	r4,4(r8)
    4238:	d8c12015 	stw	r3,1152(sp)
    423c:	d8811f15 	stw	r2,1148(sp)
    4240:	010001c4 	movi	r4,7
    4244:	20828d16 	blt	r4,r2,4c7c <___vfprintf_internal_r+0x1964>
    4248:	42000204 	addi	r8,r8,8
    424c:	d8812617 	ldw	r2,1176(sp)
    4250:	d9413317 	ldw	r5,1228(sp)
    4254:	11400216 	blt	r2,r5,4260 <___vfprintf_internal_r+0xf48>
    4258:	e080004c 	andi	r2,fp,1
    425c:	103e4126 	beq	r2,zero,3b64 <__alt_data_end+0xfffae434>
    4260:	d8813817 	ldw	r2,1248(sp)
    4264:	d9013517 	ldw	r4,1236(sp)
    4268:	d9413817 	ldw	r5,1248(sp)
    426c:	1887883a 	add	r3,r3,r2
    4270:	d8811f17 	ldw	r2,1148(sp)
    4274:	41000015 	stw	r4,0(r8)
    4278:	41400115 	stw	r5,4(r8)
    427c:	10800044 	addi	r2,r2,1
    4280:	d8c12015 	stw	r3,1152(sp)
    4284:	d8811f15 	stw	r2,1148(sp)
    4288:	010001c4 	movi	r4,7
    428c:	20830916 	blt	r4,r2,4eb4 <___vfprintf_internal_r+0x1b9c>
    4290:	42000204 	addi	r8,r8,8
    4294:	d8813317 	ldw	r2,1228(sp)
    4298:	143fffc4 	addi	r16,r2,-1
    429c:	043e310e 	bge	zero,r16,3b64 <__alt_data_end+0xfffae434>
    42a0:	04400404 	movi	r17,16
    42a4:	d8811f17 	ldw	r2,1148(sp)
    42a8:	8c007e0e 	bge	r17,r16,44a4 <___vfprintf_internal_r+0x118c>
    42ac:	01400074 	movhi	r5,1
    42b0:	2948bc84 	addi	r5,r5,8946
    42b4:	d9412c15 	stw	r5,1200(sp)
    42b8:	04c001c4 	movi	r19,7
    42bc:	00000306 	br	42cc <___vfprintf_internal_r+0xfb4>
    42c0:	42000204 	addi	r8,r8,8
    42c4:	843ffc04 	addi	r16,r16,-16
    42c8:	8c00790e 	bge	r17,r16,44b0 <___vfprintf_internal_r+0x1198>
    42cc:	18c00404 	addi	r3,r3,16
    42d0:	10800044 	addi	r2,r2,1
    42d4:	45000015 	stw	r20,0(r8)
    42d8:	44400115 	stw	r17,4(r8)
    42dc:	d8c12015 	stw	r3,1152(sp)
    42e0:	d8811f15 	stw	r2,1148(sp)
    42e4:	98bff60e 	bge	r19,r2,42c0 <__alt_data_end+0xfffaeb90>
    42e8:	b809883a 	mov	r4,r23
    42ec:	b00b883a 	mov	r5,r22
    42f0:	d9811e04 	addi	r6,sp,1144
    42f4:	0009f5c0 	call	9f5c <__sprint_r>
    42f8:	103d1f1e 	bne	r2,zero,3778 <__alt_data_end+0xfffae048>
    42fc:	d8c12017 	ldw	r3,1152(sp)
    4300:	d8811f17 	ldw	r2,1148(sp)
    4304:	da000404 	addi	r8,sp,16
    4308:	003fee06 	br	42c4 <__alt_data_end+0xfffaeb94>
    430c:	d9412e17 	ldw	r5,1208(sp)
    4310:	d8812b17 	ldw	r2,1196(sp)
    4314:	28a7c83a 	sub	r19,r5,r2
    4318:	04fddc0e 	bge	zero,r19,3a8c <__alt_data_end+0xfffae35c>
    431c:	05400404 	movi	r21,16
    4320:	d8811f17 	ldw	r2,1148(sp)
    4324:	acc3870e 	bge	r21,r19,5144 <___vfprintf_internal_r+0x1e2c>
    4328:	01400074 	movhi	r5,1
    432c:	2948bc84 	addi	r5,r5,8946
    4330:	d9412c15 	stw	r5,1200(sp)
    4334:	048001c4 	movi	r18,7
    4338:	00000306 	br	4348 <___vfprintf_internal_r+0x1030>
    433c:	9cfffc04 	addi	r19,r19,-16
    4340:	42000204 	addi	r8,r8,8
    4344:	acc0110e 	bge	r21,r19,438c <___vfprintf_internal_r+0x1074>
    4348:	18c00404 	addi	r3,r3,16
    434c:	10800044 	addi	r2,r2,1
    4350:	45000015 	stw	r20,0(r8)
    4354:	45400115 	stw	r21,4(r8)
    4358:	d8c12015 	stw	r3,1152(sp)
    435c:	d8811f15 	stw	r2,1148(sp)
    4360:	90bff60e 	bge	r18,r2,433c <__alt_data_end+0xfffaec0c>
    4364:	b809883a 	mov	r4,r23
    4368:	b00b883a 	mov	r5,r22
    436c:	d9811e04 	addi	r6,sp,1144
    4370:	0009f5c0 	call	9f5c <__sprint_r>
    4374:	103d001e 	bne	r2,zero,3778 <__alt_data_end+0xfffae048>
    4378:	9cfffc04 	addi	r19,r19,-16
    437c:	d8c12017 	ldw	r3,1152(sp)
    4380:	d8811f17 	ldw	r2,1148(sp)
    4384:	da000404 	addi	r8,sp,16
    4388:	acffef16 	blt	r21,r19,4348 <__alt_data_end+0xfffaec18>
    438c:	d9012c17 	ldw	r4,1200(sp)
    4390:	1cc7883a 	add	r3,r3,r19
    4394:	10800044 	addi	r2,r2,1
    4398:	41000015 	stw	r4,0(r8)
    439c:	44c00115 	stw	r19,4(r8)
    43a0:	d8c12015 	stw	r3,1152(sp)
    43a4:	d8811f15 	stw	r2,1148(sp)
    43a8:	010001c4 	movi	r4,7
    43ac:	20817816 	blt	r4,r2,4990 <___vfprintf_internal_r+0x1678>
    43b0:	42000204 	addi	r8,r8,8
    43b4:	003db506 	br	3a8c <__alt_data_end+0xfffae35c>
    43b8:	d9413317 	ldw	r5,1228(sp)
    43bc:	00800044 	movi	r2,1
    43c0:	18c00044 	addi	r3,r3,1
    43c4:	11413e0e 	bge	r2,r5,48c0 <___vfprintf_internal_r+0x15a8>
    43c8:	dc011f17 	ldw	r16,1148(sp)
    43cc:	d8813117 	ldw	r2,1220(sp)
    43d0:	d8c12015 	stw	r3,1152(sp)
    43d4:	84000044 	addi	r16,r16,1
    43d8:	40800015 	stw	r2,0(r8)
    43dc:	00800044 	movi	r2,1
    43e0:	40800115 	stw	r2,4(r8)
    43e4:	dc011f15 	stw	r16,1148(sp)
    43e8:	008001c4 	movi	r2,7
    43ec:	14015616 	blt	r2,r16,4948 <___vfprintf_internal_r+0x1630>
    43f0:	42000204 	addi	r8,r8,8
    43f4:	d9013817 	ldw	r4,1248(sp)
    43f8:	d9413517 	ldw	r5,1236(sp)
    43fc:	84000044 	addi	r16,r16,1
    4400:	1907883a 	add	r3,r3,r4
    4404:	41400015 	stw	r5,0(r8)
    4408:	41000115 	stw	r4,4(r8)
    440c:	d8c12015 	stw	r3,1152(sp)
    4410:	dc011f15 	stw	r16,1148(sp)
    4414:	008001c4 	movi	r2,7
    4418:	14015416 	blt	r2,r16,496c <___vfprintf_internal_r+0x1654>
    441c:	44400204 	addi	r17,r8,8
    4420:	d9013717 	ldw	r4,1244(sp)
    4424:	d9413917 	ldw	r5,1252(sp)
    4428:	000d883a 	mov	r6,zero
    442c:	000f883a 	mov	r7,zero
    4430:	d8c13d15 	stw	r3,1268(sp)
    4434:	000dcd40 	call	dcd4 <__eqdf2>
    4438:	d8c13d17 	ldw	r3,1268(sp)
    443c:	1000a726 	beq	r2,zero,46dc <___vfprintf_internal_r+0x13c4>
    4440:	d9013317 	ldw	r4,1228(sp)
    4444:	d9413117 	ldw	r5,1220(sp)
    4448:	84000044 	addi	r16,r16,1
    444c:	20bfffc4 	addi	r2,r4,-1
    4450:	1887883a 	add	r3,r3,r2
    4454:	29000044 	addi	r4,r5,1
    4458:	88800115 	stw	r2,4(r17)
    445c:	89000015 	stw	r4,0(r17)
    4460:	d8c12015 	stw	r3,1152(sp)
    4464:	dc011f15 	stw	r16,1148(sp)
    4468:	008001c4 	movi	r2,7
    446c:	14012d16 	blt	r2,r16,4924 <___vfprintf_internal_r+0x160c>
    4470:	8c400204 	addi	r17,r17,8
    4474:	d9413a17 	ldw	r5,1256(sp)
    4478:	dcc122c4 	addi	r19,sp,1163
    447c:	84000044 	addi	r16,r16,1
    4480:	28c7883a 	add	r3,r5,r3
    4484:	8cc00015 	stw	r19,0(r17)
    4488:	89400115 	stw	r5,4(r17)
    448c:	d8c12015 	stw	r3,1152(sp)
    4490:	dc011f15 	stw	r16,1148(sp)
    4494:	008001c4 	movi	r2,7
    4498:	14000e16 	blt	r2,r16,44d4 <___vfprintf_internal_r+0x11bc>
    449c:	8a000204 	addi	r8,r17,8
    44a0:	003db006 	br	3b64 <__alt_data_end+0xfffae434>
    44a4:	01000074 	movhi	r4,1
    44a8:	2108bc84 	addi	r4,r4,8946
    44ac:	d9012c15 	stw	r4,1200(sp)
    44b0:	d9012c17 	ldw	r4,1200(sp)
    44b4:	1c07883a 	add	r3,r3,r16
    44b8:	44000115 	stw	r16,4(r8)
    44bc:	41000015 	stw	r4,0(r8)
    44c0:	10800044 	addi	r2,r2,1
    44c4:	d8c12015 	stw	r3,1152(sp)
    44c8:	d8811f15 	stw	r2,1148(sp)
    44cc:	010001c4 	movi	r4,7
    44d0:	20bda30e 	bge	r4,r2,3b60 <__alt_data_end+0xfffae430>
    44d4:	b809883a 	mov	r4,r23
    44d8:	b00b883a 	mov	r5,r22
    44dc:	d9811e04 	addi	r6,sp,1144
    44e0:	0009f5c0 	call	9f5c <__sprint_r>
    44e4:	103ca41e 	bne	r2,zero,3778 <__alt_data_end+0xfffae048>
    44e8:	d8c12017 	ldw	r3,1152(sp)
    44ec:	da000404 	addi	r8,sp,16
    44f0:	003d9c06 	br	3b64 <__alt_data_end+0xfffae434>
    44f4:	b809883a 	mov	r4,r23
    44f8:	b00b883a 	mov	r5,r22
    44fc:	d9811e04 	addi	r6,sp,1144
    4500:	0009f5c0 	call	9f5c <__sprint_r>
    4504:	103dd226 	beq	r2,zero,3c50 <__alt_data_end+0xfffae520>
    4508:	003c9b06 	br	3778 <__alt_data_end+0xfffae048>
    450c:	10803fcc 	andi	r2,r2,255
    4510:	1000311e 	bne	r2,zero,45d8 <___vfprintf_internal_r+0x12c0>
    4514:	e080004c 	andi	r2,fp,1
    4518:	10002f26 	beq	r2,zero,45d8 <___vfprintf_internal_r+0x12c0>
    451c:	00800c04 	movi	r2,48
    4520:	d8c10dc4 	addi	r3,sp,1079
    4524:	d8810dc5 	stb	r2,1079(sp)
    4528:	dc413c17 	ldw	r17,1264(sp)
    452c:	d8c13115 	stw	r3,1220(sp)
    4530:	003cf406 	br	3904 <__alt_data_end+0xfffae1d4>
    4534:	b809883a 	mov	r4,r23
    4538:	b00b883a 	mov	r5,r22
    453c:	d9811e04 	addi	r6,sp,1144
    4540:	0009f5c0 	call	9f5c <__sprint_r>
    4544:	103c8c1e 	bne	r2,zero,3778 <__alt_data_end+0xfffae048>
    4548:	d8c12017 	ldw	r3,1152(sp)
    454c:	da000404 	addi	r8,sp,16
    4550:	003d7706 	br	3b30 <__alt_data_end+0xfffae400>
    4554:	b809883a 	mov	r4,r23
    4558:	b00b883a 	mov	r5,r22
    455c:	d9811e04 	addi	r6,sp,1144
    4560:	0009f5c0 	call	9f5c <__sprint_r>
    4564:	103c841e 	bne	r2,zero,3778 <__alt_data_end+0xfffae048>
    4568:	d8c12017 	ldw	r3,1152(sp)
    456c:	da000404 	addi	r8,sp,16
    4570:	003d3506 	br	3a48 <__alt_data_end+0xfffae318>
    4574:	b809883a 	mov	r4,r23
    4578:	b00b883a 	mov	r5,r22
    457c:	d9811e04 	addi	r6,sp,1144
    4580:	0009f5c0 	call	9f5c <__sprint_r>
    4584:	103c7c1e 	bne	r2,zero,3778 <__alt_data_end+0xfffae048>
    4588:	d8c12017 	ldw	r3,1152(sp)
    458c:	da000404 	addi	r8,sp,16
    4590:	003d3b06 	br	3a80 <__alt_data_end+0xfffae350>
    4594:	d9413b17 	ldw	r5,1260(sp)
    4598:	d8c10e04 	addi	r3,sp,1080
    459c:	908003cc 	andi	r2,r18,15
    45a0:	a808973a 	slli	r4,r21,28
    45a4:	2885883a 	add	r2,r5,r2
    45a8:	9024d13a 	srli	r18,r18,4
    45ac:	10800003 	ldbu	r2,0(r2)
    45b0:	a82ad13a 	srli	r21,r21,4
    45b4:	18ffffc4 	addi	r3,r3,-1
    45b8:	24a4b03a 	or	r18,r4,r18
    45bc:	18800005 	stb	r2,0(r3)
    45c0:	9544b03a 	or	r2,r18,r21
    45c4:	103ff51e 	bne	r2,zero,459c <__alt_data_end+0xfffaee6c>
    45c8:	d9412817 	ldw	r5,1184(sp)
    45cc:	d8c13115 	stw	r3,1220(sp)
    45d0:	28e3c83a 	sub	r17,r5,r3
    45d4:	003ccb06 	br	3904 <__alt_data_end+0xfffae1d4>
    45d8:	d8c10e04 	addi	r3,sp,1080
    45dc:	0023883a 	mov	r17,zero
    45e0:	d8c13115 	stw	r3,1220(sp)
    45e4:	003cc706 	br	3904 <__alt_data_end+0xfffae1d4>
    45e8:	dc012617 	ldw	r16,1176(sp)
    45ec:	0401ab0e 	bge	zero,r16,4c9c <___vfprintf_internal_r+0x1984>
    45f0:	d8813317 	ldw	r2,1228(sp)
    45f4:	d9413117 	ldw	r5,1220(sp)
    45f8:	d9013417 	ldw	r4,1232(sp)
    45fc:	1023883a 	mov	r17,r2
    4600:	28a1883a 	add	r16,r5,r2
    4604:	2080010e 	bge	r4,r2,460c <___vfprintf_internal_r+0x12f4>
    4608:	2023883a 	mov	r17,r4
    460c:	04400b0e 	bge	zero,r17,463c <___vfprintf_internal_r+0x1324>
    4610:	d8811f17 	ldw	r2,1148(sp)
    4614:	d9413117 	ldw	r5,1220(sp)
    4618:	1c47883a 	add	r3,r3,r17
    461c:	10800044 	addi	r2,r2,1
    4620:	41400015 	stw	r5,0(r8)
    4624:	44400115 	stw	r17,4(r8)
    4628:	d8c12015 	stw	r3,1152(sp)
    462c:	d8811f15 	stw	r2,1148(sp)
    4630:	010001c4 	movi	r4,7
    4634:	20826716 	blt	r4,r2,4fd4 <___vfprintf_internal_r+0x1cbc>
    4638:	42000204 	addi	r8,r8,8
    463c:	88026316 	blt	r17,zero,4fcc <___vfprintf_internal_r+0x1cb4>
    4640:	d8813417 	ldw	r2,1232(sp)
    4644:	1463c83a 	sub	r17,r2,r17
    4648:	0440590e 	bge	zero,r17,47b0 <___vfprintf_internal_r+0x1498>
    464c:	04c00404 	movi	r19,16
    4650:	d8811f17 	ldw	r2,1148(sp)
    4654:	9c41770e 	bge	r19,r17,4c34 <___vfprintf_internal_r+0x191c>
    4658:	01400074 	movhi	r5,1
    465c:	2948bc84 	addi	r5,r5,8946
    4660:	d9412c15 	stw	r5,1200(sp)
    4664:	054001c4 	movi	r21,7
    4668:	00000306 	br	4678 <___vfprintf_internal_r+0x1360>
    466c:	42000204 	addi	r8,r8,8
    4670:	8c7ffc04 	addi	r17,r17,-16
    4674:	9c41720e 	bge	r19,r17,4c40 <___vfprintf_internal_r+0x1928>
    4678:	18c00404 	addi	r3,r3,16
    467c:	10800044 	addi	r2,r2,1
    4680:	45000015 	stw	r20,0(r8)
    4684:	44c00115 	stw	r19,4(r8)
    4688:	d8c12015 	stw	r3,1152(sp)
    468c:	d8811f15 	stw	r2,1148(sp)
    4690:	a8bff60e 	bge	r21,r2,466c <__alt_data_end+0xfffaef3c>
    4694:	b809883a 	mov	r4,r23
    4698:	b00b883a 	mov	r5,r22
    469c:	d9811e04 	addi	r6,sp,1144
    46a0:	0009f5c0 	call	9f5c <__sprint_r>
    46a4:	103c341e 	bne	r2,zero,3778 <__alt_data_end+0xfffae048>
    46a8:	d8c12017 	ldw	r3,1152(sp)
    46ac:	d8811f17 	ldw	r2,1148(sp)
    46b0:	da000404 	addi	r8,sp,16
    46b4:	003fee06 	br	4670 <__alt_data_end+0xfffaef40>
    46b8:	b809883a 	mov	r4,r23
    46bc:	b00b883a 	mov	r5,r22
    46c0:	d9811e04 	addi	r6,sp,1144
    46c4:	0009f5c0 	call	9f5c <__sprint_r>
    46c8:	103c2b1e 	bne	r2,zero,3778 <__alt_data_end+0xfffae048>
    46cc:	d8c12017 	ldw	r3,1152(sp)
    46d0:	d8812787 	ldb	r2,1182(sp)
    46d4:	da000404 	addi	r8,sp,16
    46d8:	003cce06 	br	3a14 <__alt_data_end+0xfffae2e4>
    46dc:	d8813317 	ldw	r2,1228(sp)
    46e0:	14ffffc4 	addi	r19,r2,-1
    46e4:	04ff630e 	bge	zero,r19,4474 <__alt_data_end+0xfffaed44>
    46e8:	05400404 	movi	r21,16
    46ec:	acc0810e 	bge	r21,r19,48f4 <___vfprintf_internal_r+0x15dc>
    46f0:	01400074 	movhi	r5,1
    46f4:	2948bc84 	addi	r5,r5,8946
    46f8:	d9412c15 	stw	r5,1200(sp)
    46fc:	01c001c4 	movi	r7,7
    4700:	00000306 	br	4710 <___vfprintf_internal_r+0x13f8>
    4704:	8c400204 	addi	r17,r17,8
    4708:	9cfffc04 	addi	r19,r19,-16
    470c:	acc07c0e 	bge	r21,r19,4900 <___vfprintf_internal_r+0x15e8>
    4710:	18c00404 	addi	r3,r3,16
    4714:	84000044 	addi	r16,r16,1
    4718:	8d000015 	stw	r20,0(r17)
    471c:	8d400115 	stw	r21,4(r17)
    4720:	d8c12015 	stw	r3,1152(sp)
    4724:	dc011f15 	stw	r16,1148(sp)
    4728:	3c3ff60e 	bge	r7,r16,4704 <__alt_data_end+0xfffaefd4>
    472c:	b809883a 	mov	r4,r23
    4730:	b00b883a 	mov	r5,r22
    4734:	d9811e04 	addi	r6,sp,1144
    4738:	d9c13d15 	stw	r7,1268(sp)
    473c:	0009f5c0 	call	9f5c <__sprint_r>
    4740:	d9c13d17 	ldw	r7,1268(sp)
    4744:	103c0c1e 	bne	r2,zero,3778 <__alt_data_end+0xfffae048>
    4748:	d8c12017 	ldw	r3,1152(sp)
    474c:	dc011f17 	ldw	r16,1148(sp)
    4750:	dc400404 	addi	r17,sp,16
    4754:	003fec06 	br	4708 <__alt_data_end+0xfffaefd8>
    4758:	00800084 	movi	r2,2
    475c:	9546b03a 	or	r3,r18,r21
    4760:	003d7d06 	br	3d58 <__alt_data_end+0xfffae628>
    4764:	10803fcc 	andi	r2,r2,255
    4768:	1080201c 	xori	r2,r2,128
    476c:	10bfe004 	addi	r2,r2,-128
    4770:	01000c04 	movi	r4,48
    4774:	1101d726 	beq	r2,r4,4ed4 <___vfprintf_internal_r+0x1bbc>
    4778:	d9413117 	ldw	r5,1220(sp)
    477c:	d8812817 	ldw	r2,1184(sp)
    4780:	193fffc5 	stb	r4,-1(r3)
    4784:	297fffc4 	addi	r5,r5,-1
    4788:	d9413115 	stw	r5,1220(sp)
    478c:	1163c83a 	sub	r17,r2,r5
    4790:	003c5c06 	br	3904 <__alt_data_end+0xfffae1d4>
    4794:	b809883a 	mov	r4,r23
    4798:	b00b883a 	mov	r5,r22
    479c:	d9811e04 	addi	r6,sp,1144
    47a0:	0009f5c0 	call	9f5c <__sprint_r>
    47a4:	103bf41e 	bne	r2,zero,3778 <__alt_data_end+0xfffae048>
    47a8:	d8c12017 	ldw	r3,1152(sp)
    47ac:	da000404 	addi	r8,sp,16
    47b0:	d9413117 	ldw	r5,1220(sp)
    47b4:	d9013417 	ldw	r4,1232(sp)
    47b8:	d8812617 	ldw	r2,1176(sp)
    47bc:	2923883a 	add	r17,r5,r4
    47c0:	d9413317 	ldw	r5,1228(sp)
    47c4:	11400216 	blt	r2,r5,47d0 <___vfprintf_internal_r+0x14b8>
    47c8:	e100004c 	andi	r4,fp,1
    47cc:	20000d26 	beq	r4,zero,4804 <___vfprintf_internal_r+0x14ec>
    47d0:	d9013817 	ldw	r4,1248(sp)
    47d4:	d9413517 	ldw	r5,1236(sp)
    47d8:	1907883a 	add	r3,r3,r4
    47dc:	d9011f17 	ldw	r4,1148(sp)
    47e0:	41400015 	stw	r5,0(r8)
    47e4:	d9413817 	ldw	r5,1248(sp)
    47e8:	21000044 	addi	r4,r4,1
    47ec:	d8c12015 	stw	r3,1152(sp)
    47f0:	41400115 	stw	r5,4(r8)
    47f4:	d9011f15 	stw	r4,1148(sp)
    47f8:	014001c4 	movi	r5,7
    47fc:	2901fd16 	blt	r5,r4,4ff4 <___vfprintf_internal_r+0x1cdc>
    4800:	42000204 	addi	r8,r8,8
    4804:	d9013317 	ldw	r4,1228(sp)
    4808:	2085c83a 	sub	r2,r4,r2
    480c:	8449c83a 	sub	r4,r16,r17
    4810:	1021883a 	mov	r16,r2
    4814:	2080010e 	bge	r4,r2,481c <___vfprintf_internal_r+0x1504>
    4818:	2021883a 	mov	r16,r4
    481c:	04000a0e 	bge	zero,r16,4848 <___vfprintf_internal_r+0x1530>
    4820:	d9011f17 	ldw	r4,1148(sp)
    4824:	1c07883a 	add	r3,r3,r16
    4828:	44400015 	stw	r17,0(r8)
    482c:	21000044 	addi	r4,r4,1
    4830:	44000115 	stw	r16,4(r8)
    4834:	d8c12015 	stw	r3,1152(sp)
    4838:	d9011f15 	stw	r4,1148(sp)
    483c:	014001c4 	movi	r5,7
    4840:	29020916 	blt	r5,r4,5068 <___vfprintf_internal_r+0x1d50>
    4844:	42000204 	addi	r8,r8,8
    4848:	80020116 	blt	r16,zero,5050 <___vfprintf_internal_r+0x1d38>
    484c:	1421c83a 	sub	r16,r2,r16
    4850:	043cc40e 	bge	zero,r16,3b64 <__alt_data_end+0xfffae434>
    4854:	04400404 	movi	r17,16
    4858:	d8811f17 	ldw	r2,1148(sp)
    485c:	8c3f110e 	bge	r17,r16,44a4 <__alt_data_end+0xfffaed74>
    4860:	01400074 	movhi	r5,1
    4864:	2948bc84 	addi	r5,r5,8946
    4868:	d9412c15 	stw	r5,1200(sp)
    486c:	04c001c4 	movi	r19,7
    4870:	00000306 	br	4880 <___vfprintf_internal_r+0x1568>
    4874:	42000204 	addi	r8,r8,8
    4878:	843ffc04 	addi	r16,r16,-16
    487c:	8c3f0c0e 	bge	r17,r16,44b0 <__alt_data_end+0xfffaed80>
    4880:	18c00404 	addi	r3,r3,16
    4884:	10800044 	addi	r2,r2,1
    4888:	45000015 	stw	r20,0(r8)
    488c:	44400115 	stw	r17,4(r8)
    4890:	d8c12015 	stw	r3,1152(sp)
    4894:	d8811f15 	stw	r2,1148(sp)
    4898:	98bff60e 	bge	r19,r2,4874 <__alt_data_end+0xfffaf144>
    489c:	b809883a 	mov	r4,r23
    48a0:	b00b883a 	mov	r5,r22
    48a4:	d9811e04 	addi	r6,sp,1144
    48a8:	0009f5c0 	call	9f5c <__sprint_r>
    48ac:	103bb21e 	bne	r2,zero,3778 <__alt_data_end+0xfffae048>
    48b0:	d8c12017 	ldw	r3,1152(sp)
    48b4:	d8811f17 	ldw	r2,1148(sp)
    48b8:	da000404 	addi	r8,sp,16
    48bc:	003fee06 	br	4878 <__alt_data_end+0xfffaf148>
    48c0:	e088703a 	and	r4,fp,r2
    48c4:	203ec01e 	bne	r4,zero,43c8 <__alt_data_end+0xfffaec98>
    48c8:	dc011f17 	ldw	r16,1148(sp)
    48cc:	d9013117 	ldw	r4,1220(sp)
    48d0:	40800115 	stw	r2,4(r8)
    48d4:	84000044 	addi	r16,r16,1
    48d8:	41000015 	stw	r4,0(r8)
    48dc:	d8c12015 	stw	r3,1152(sp)
    48e0:	dc011f15 	stw	r16,1148(sp)
    48e4:	008001c4 	movi	r2,7
    48e8:	14000e16 	blt	r2,r16,4924 <___vfprintf_internal_r+0x160c>
    48ec:	44400204 	addi	r17,r8,8
    48f0:	003ee006 	br	4474 <__alt_data_end+0xfffaed44>
    48f4:	01000074 	movhi	r4,1
    48f8:	2108bc84 	addi	r4,r4,8946
    48fc:	d9012c15 	stw	r4,1200(sp)
    4900:	d8812c17 	ldw	r2,1200(sp)
    4904:	1cc7883a 	add	r3,r3,r19
    4908:	84000044 	addi	r16,r16,1
    490c:	88800015 	stw	r2,0(r17)
    4910:	8cc00115 	stw	r19,4(r17)
    4914:	d8c12015 	stw	r3,1152(sp)
    4918:	dc011f15 	stw	r16,1148(sp)
    491c:	008001c4 	movi	r2,7
    4920:	143ed30e 	bge	r2,r16,4470 <__alt_data_end+0xfffaed40>
    4924:	b809883a 	mov	r4,r23
    4928:	b00b883a 	mov	r5,r22
    492c:	d9811e04 	addi	r6,sp,1144
    4930:	0009f5c0 	call	9f5c <__sprint_r>
    4934:	103b901e 	bne	r2,zero,3778 <__alt_data_end+0xfffae048>
    4938:	d8c12017 	ldw	r3,1152(sp)
    493c:	dc011f17 	ldw	r16,1148(sp)
    4940:	dc400404 	addi	r17,sp,16
    4944:	003ecb06 	br	4474 <__alt_data_end+0xfffaed44>
    4948:	b809883a 	mov	r4,r23
    494c:	b00b883a 	mov	r5,r22
    4950:	d9811e04 	addi	r6,sp,1144
    4954:	0009f5c0 	call	9f5c <__sprint_r>
    4958:	103b871e 	bne	r2,zero,3778 <__alt_data_end+0xfffae048>
    495c:	d8c12017 	ldw	r3,1152(sp)
    4960:	dc011f17 	ldw	r16,1148(sp)
    4964:	da000404 	addi	r8,sp,16
    4968:	003ea206 	br	43f4 <__alt_data_end+0xfffaecc4>
    496c:	b809883a 	mov	r4,r23
    4970:	b00b883a 	mov	r5,r22
    4974:	d9811e04 	addi	r6,sp,1144
    4978:	0009f5c0 	call	9f5c <__sprint_r>
    497c:	103b7e1e 	bne	r2,zero,3778 <__alt_data_end+0xfffae048>
    4980:	d8c12017 	ldw	r3,1152(sp)
    4984:	dc011f17 	ldw	r16,1148(sp)
    4988:	dc400404 	addi	r17,sp,16
    498c:	003ea406 	br	4420 <__alt_data_end+0xfffaecf0>
    4990:	b809883a 	mov	r4,r23
    4994:	b00b883a 	mov	r5,r22
    4998:	d9811e04 	addi	r6,sp,1144
    499c:	0009f5c0 	call	9f5c <__sprint_r>
    49a0:	103b751e 	bne	r2,zero,3778 <__alt_data_end+0xfffae048>
    49a4:	d8c12017 	ldw	r3,1152(sp)
    49a8:	da000404 	addi	r8,sp,16
    49ac:	003c3706 	br	3a8c <__alt_data_end+0xfffae35c>
    49b0:	04a5c83a 	sub	r18,zero,r18
    49b4:	9004c03a 	cmpne	r2,r18,zero
    49b8:	056bc83a 	sub	r21,zero,r21
    49bc:	a8abc83a 	sub	r21,r21,r2
    49c0:	04c00b44 	movi	r19,45
    49c4:	dcc12785 	stb	r19,1182(sp)
    49c8:	da413215 	stw	r9,1224(sp)
    49cc:	00800044 	movi	r2,1
    49d0:	9546b03a 	or	r3,r18,r21
    49d4:	003bb106 	br	389c <__alt_data_end+0xfffae16c>
    49d8:	da013f15 	stw	r8,1276(sp)
    49dc:	da413e15 	stw	r9,1272(sp)
    49e0:	0009c0c0 	call	9c0c <__fpclassifyd>
    49e4:	da013f17 	ldw	r8,1276(sp)
    49e8:	da413e17 	ldw	r9,1272(sp)
    49ec:	1000e526 	beq	r2,zero,4d84 <___vfprintf_internal_r+0x1a6c>
    49f0:	04fff7c4 	movi	r19,-33
    49f4:	00bfffc4 	movi	r2,-1
    49f8:	84e6703a 	and	r19,r16,r19
    49fc:	48822926 	beq	r9,r2,52a4 <___vfprintf_internal_r+0x1f8c>
    4a00:	008011c4 	movi	r2,71
    4a04:	98821626 	beq	r19,r2,5260 <___vfprintf_internal_r+0x1f48>
    4a08:	d9013917 	ldw	r4,1252(sp)
    4a0c:	e0c04014 	ori	r3,fp,256
    4a10:	d8c12d15 	stw	r3,1204(sp)
    4a14:	20021f16 	blt	r4,zero,5294 <___vfprintf_internal_r+0x1f7c>
    4a18:	dc413917 	ldw	r17,1252(sp)
    4a1c:	d8012b05 	stb	zero,1196(sp)
    4a20:	00801984 	movi	r2,102
    4a24:	80814d26 	beq	r16,r2,4f5c <___vfprintf_internal_r+0x1c44>
    4a28:	00801184 	movi	r2,70
    4a2c:	80814b26 	beq	r16,r2,4f5c <___vfprintf_internal_r+0x1c44>
    4a30:	00801144 	movi	r2,69
    4a34:	98821d26 	beq	r19,r2,52ac <___vfprintf_internal_r+0x1f94>
    4a38:	482b883a 	mov	r21,r9
    4a3c:	d8812604 	addi	r2,sp,1176
    4a40:	d8800115 	stw	r2,4(sp)
    4a44:	d9413717 	ldw	r5,1244(sp)
    4a48:	d8812504 	addi	r2,sp,1172
    4a4c:	d8800215 	stw	r2,8(sp)
    4a50:	d8812104 	addi	r2,sp,1156
    4a54:	dd400015 	stw	r21,0(sp)
    4a58:	d8800315 	stw	r2,12(sp)
    4a5c:	b809883a 	mov	r4,r23
    4a60:	880d883a 	mov	r6,r17
    4a64:	01c00084 	movi	r7,2
    4a68:	da013f15 	stw	r8,1276(sp)
    4a6c:	da413e15 	stw	r9,1272(sp)
    4a70:	00057900 	call	5790 <_dtoa_r>
    4a74:	d8813115 	stw	r2,1220(sp)
    4a78:	008019c4 	movi	r2,103
    4a7c:	da013f17 	ldw	r8,1276(sp)
    4a80:	da413e17 	ldw	r9,1272(sp)
    4a84:	80800226 	beq	r16,r2,4a90 <___vfprintf_internal_r+0x1778>
    4a88:	008011c4 	movi	r2,71
    4a8c:	8081451e 	bne	r16,r2,4fa4 <___vfprintf_internal_r+0x1c8c>
    4a90:	e080004c 	andi	r2,fp,1
    4a94:	10021e26 	beq	r2,zero,5310 <___vfprintf_internal_r+0x1ff8>
    4a98:	d8c13117 	ldw	r3,1220(sp)
    4a9c:	1d55883a 	add	r10,r3,r21
    4aa0:	d9013717 	ldw	r4,1244(sp)
    4aa4:	880b883a 	mov	r5,r17
    4aa8:	000d883a 	mov	r6,zero
    4aac:	000f883a 	mov	r7,zero
    4ab0:	da013f15 	stw	r8,1276(sp)
    4ab4:	da413e15 	stw	r9,1272(sp)
    4ab8:	da813d15 	stw	r10,1268(sp)
    4abc:	000dcd40 	call	dcd4 <__eqdf2>
    4ac0:	da013f17 	ldw	r8,1276(sp)
    4ac4:	da413e17 	ldw	r9,1272(sp)
    4ac8:	da813d17 	ldw	r10,1268(sp)
    4acc:	1001a126 	beq	r2,zero,5154 <___vfprintf_internal_r+0x1e3c>
    4ad0:	d8812117 	ldw	r2,1156(sp)
    4ad4:	1280062e 	bgeu	r2,r10,4af0 <___vfprintf_internal_r+0x17d8>
    4ad8:	01000c04 	movi	r4,48
    4adc:	10c00044 	addi	r3,r2,1
    4ae0:	d8c12115 	stw	r3,1156(sp)
    4ae4:	11000005 	stb	r4,0(r2)
    4ae8:	d8812117 	ldw	r2,1156(sp)
    4aec:	12bffb36 	bltu	r2,r10,4adc <__alt_data_end+0xfffaf3ac>
    4af0:	d8c13117 	ldw	r3,1220(sp)
    4af4:	10c5c83a 	sub	r2,r2,r3
    4af8:	d8813315 	stw	r2,1228(sp)
    4afc:	008011c4 	movi	r2,71
    4b00:	98818926 	beq	r19,r2,5128 <___vfprintf_internal_r+0x1e10>
    4b04:	00801944 	movi	r2,101
    4b08:	14023c0e 	bge	r2,r16,53fc <___vfprintf_internal_r+0x20e4>
    4b0c:	d8c12617 	ldw	r3,1176(sp)
    4b10:	00801984 	movi	r2,102
    4b14:	d8c13415 	stw	r3,1232(sp)
    4b18:	8081ef26 	beq	r16,r2,52d8 <___vfprintf_internal_r+0x1fc0>
    4b1c:	d8c13417 	ldw	r3,1232(sp)
    4b20:	d9013317 	ldw	r4,1228(sp)
    4b24:	1901e316 	blt	r3,r4,52b4 <___vfprintf_internal_r+0x1f9c>
    4b28:	e080004c 	andi	r2,fp,1
    4b2c:	1001f426 	beq	r2,zero,5300 <___vfprintf_internal_r+0x1fe8>
    4b30:	d8c13417 	ldw	r3,1232(sp)
    4b34:	1c400044 	addi	r17,r3,1
    4b38:	8839883a 	mov	fp,r17
    4b3c:	8801e416 	blt	r17,zero,52d0 <___vfprintf_internal_r+0x1fb8>
    4b40:	dd412b07 	ldb	r21,1196(sp)
    4b44:	a801701e 	bne	r21,zero,5108 <___vfprintf_internal_r+0x1df0>
    4b48:	df012b15 	stw	fp,1196(sp)
    4b4c:	dcc12783 	ldbu	r19,1182(sp)
    4b50:	df012d17 	ldw	fp,1204(sp)
    4b54:	d8013215 	stw	zero,1224(sp)
    4b58:	dc812d15 	stw	r18,1204(sp)
    4b5c:	003b6e06 	br	3918 <__alt_data_end+0xfffae1e8>
    4b60:	e080040c 	andi	r2,fp,16
    4b64:	1000b51e 	bne	r2,zero,4e3c <___vfprintf_internal_r+0x1b24>
    4b68:	e080100c 	andi	r2,fp,64
    4b6c:	10015b26 	beq	r2,zero,50dc <___vfprintf_internal_r+0x1dc4>
    4b70:	d9012d17 	ldw	r4,1204(sp)
    4b74:	d9412f17 	ldw	r5,1212(sp)
    4b78:	20800017 	ldw	r2,0(r4)
    4b7c:	21000104 	addi	r4,r4,4
    4b80:	d9012d15 	stw	r4,1204(sp)
    4b84:	1140000d 	sth	r5,0(r2)
    4b88:	003a2006 	br	340c <__alt_data_end+0xfffadcdc>
    4b8c:	e0c0100c 	andi	r3,fp,64
    4b90:	1800a226 	beq	r3,zero,4e1c <___vfprintf_internal_r+0x1b04>
    4b94:	d8c12d17 	ldw	r3,1204(sp)
    4b98:	1480000b 	ldhu	r18,0(r2)
    4b9c:	002b883a 	mov	r21,zero
    4ba0:	18c00104 	addi	r3,r3,4
    4ba4:	d8c12d15 	stw	r3,1204(sp)
    4ba8:	0005883a 	mov	r2,zero
    4bac:	9007883a 	mov	r3,r18
    4bb0:	003c6906 	br	3d58 <__alt_data_end+0xfffae628>
    4bb4:	e0c0100c 	andi	r3,fp,64
    4bb8:	18009026 	beq	r3,zero,4dfc <___vfprintf_internal_r+0x1ae4>
    4bbc:	1480000b 	ldhu	r18,0(r2)
    4bc0:	d8812d17 	ldw	r2,1204(sp)
    4bc4:	002b883a 	mov	r21,zero
    4bc8:	9007883a 	mov	r3,r18
    4bcc:	10800104 	addi	r2,r2,4
    4bd0:	d8812d15 	stw	r2,1204(sp)
    4bd4:	00800044 	movi	r2,1
    4bd8:	003c5f06 	br	3d58 <__alt_data_end+0xfffae628>
    4bdc:	e0c0100c 	andi	r3,fp,64
    4be0:	18008026 	beq	r3,zero,4de4 <___vfprintf_internal_r+0x1acc>
    4be4:	d9012d17 	ldw	r4,1204(sp)
    4be8:	1480000b 	ldhu	r18,0(r2)
    4bec:	002b883a 	mov	r21,zero
    4bf0:	21000104 	addi	r4,r4,4
    4bf4:	d9012d15 	stw	r4,1204(sp)
    4bf8:	003c7906 	br	3de0 <__alt_data_end+0xfffae6b0>
    4bfc:	e080100c 	andi	r2,fp,64
    4c00:	10007126 	beq	r2,zero,4dc8 <___vfprintf_internal_r+0x1ab0>
    4c04:	1c80000f 	ldh	r18,0(r3)
    4c08:	d8812d17 	ldw	r2,1204(sp)
    4c0c:	902bd7fa 	srai	r21,r18,31
    4c10:	10800104 	addi	r2,r2,4
    4c14:	d8812d15 	stw	r2,1204(sp)
    4c18:	a805883a 	mov	r2,r21
    4c1c:	003b1a06 	br	3888 <__alt_data_end+0xfffae158>
    4c20:	e4000007 	ldb	r16,0(fp)
    4c24:	e005883a 	mov	r2,fp
    4c28:	003a2306 	br	34b8 <__alt_data_end+0xfffadd88>
    4c2c:	00800084 	movi	r2,2
    4c30:	003c4906 	br	3d58 <__alt_data_end+0xfffae628>
    4c34:	01000074 	movhi	r4,1
    4c38:	2108bc84 	addi	r4,r4,8946
    4c3c:	d9012c15 	stw	r4,1200(sp)
    4c40:	d9012c17 	ldw	r4,1200(sp)
    4c44:	1c47883a 	add	r3,r3,r17
    4c48:	10800044 	addi	r2,r2,1
    4c4c:	41000015 	stw	r4,0(r8)
    4c50:	44400115 	stw	r17,4(r8)
    4c54:	d8c12015 	stw	r3,1152(sp)
    4c58:	d8811f15 	stw	r2,1148(sp)
    4c5c:	010001c4 	movi	r4,7
    4c60:	20becc16 	blt	r4,r2,4794 <__alt_data_end+0xfffaf064>
    4c64:	42000204 	addi	r8,r8,8
    4c68:	003ed106 	br	47b0 <__alt_data_end+0xfffaf080>
    4c6c:	01000074 	movhi	r4,1
    4c70:	2108bc84 	addi	r4,r4,8946
    4c74:	d9012c15 	stw	r4,1200(sp)
    4c78:	003ba306 	br	3b08 <__alt_data_end+0xfffae3d8>
    4c7c:	b809883a 	mov	r4,r23
    4c80:	b00b883a 	mov	r5,r22
    4c84:	d9811e04 	addi	r6,sp,1144
    4c88:	0009f5c0 	call	9f5c <__sprint_r>
    4c8c:	103aba1e 	bne	r2,zero,3778 <__alt_data_end+0xfffae048>
    4c90:	d8c12017 	ldw	r3,1152(sp)
    4c94:	da000404 	addi	r8,sp,16
    4c98:	003d6c06 	br	424c <__alt_data_end+0xfffaeb1c>
    4c9c:	d8811f17 	ldw	r2,1148(sp)
    4ca0:	01400074 	movhi	r5,1
    4ca4:	01000044 	movi	r4,1
    4ca8:	18c00044 	addi	r3,r3,1
    4cac:	10800044 	addi	r2,r2,1
    4cb0:	2948bc04 	addi	r5,r5,8944
    4cb4:	41000115 	stw	r4,4(r8)
    4cb8:	41400015 	stw	r5,0(r8)
    4cbc:	d8c12015 	stw	r3,1152(sp)
    4cc0:	d8811f15 	stw	r2,1148(sp)
    4cc4:	010001c4 	movi	r4,7
    4cc8:	20806716 	blt	r4,r2,4e68 <___vfprintf_internal_r+0x1b50>
    4ccc:	42000204 	addi	r8,r8,8
    4cd0:	8000041e 	bne	r16,zero,4ce4 <___vfprintf_internal_r+0x19cc>
    4cd4:	d8813317 	ldw	r2,1228(sp)
    4cd8:	1000021e 	bne	r2,zero,4ce4 <___vfprintf_internal_r+0x19cc>
    4cdc:	e080004c 	andi	r2,fp,1
    4ce0:	103ba026 	beq	r2,zero,3b64 <__alt_data_end+0xfffae434>
    4ce4:	d9013817 	ldw	r4,1248(sp)
    4ce8:	d8811f17 	ldw	r2,1148(sp)
    4cec:	d9413517 	ldw	r5,1236(sp)
    4cf0:	1907883a 	add	r3,r3,r4
    4cf4:	10800044 	addi	r2,r2,1
    4cf8:	41000115 	stw	r4,4(r8)
    4cfc:	41400015 	stw	r5,0(r8)
    4d00:	d8c12015 	stw	r3,1152(sp)
    4d04:	d8811f15 	stw	r2,1148(sp)
    4d08:	010001c4 	movi	r4,7
    4d0c:	20815716 	blt	r4,r2,526c <___vfprintf_internal_r+0x1f54>
    4d10:	42000204 	addi	r8,r8,8
    4d14:	0421c83a 	sub	r16,zero,r16
    4d18:	0400810e 	bge	zero,r16,4f20 <___vfprintf_internal_r+0x1c08>
    4d1c:	04400404 	movi	r17,16
    4d20:	8c00bd0e 	bge	r17,r16,5018 <___vfprintf_internal_r+0x1d00>
    4d24:	01400074 	movhi	r5,1
    4d28:	2948bc84 	addi	r5,r5,8946
    4d2c:	d9412c15 	stw	r5,1200(sp)
    4d30:	04c001c4 	movi	r19,7
    4d34:	00000306 	br	4d44 <___vfprintf_internal_r+0x1a2c>
    4d38:	42000204 	addi	r8,r8,8
    4d3c:	843ffc04 	addi	r16,r16,-16
    4d40:	8c00b80e 	bge	r17,r16,5024 <___vfprintf_internal_r+0x1d0c>
    4d44:	18c00404 	addi	r3,r3,16
    4d48:	10800044 	addi	r2,r2,1
    4d4c:	45000015 	stw	r20,0(r8)
    4d50:	44400115 	stw	r17,4(r8)
    4d54:	d8c12015 	stw	r3,1152(sp)
    4d58:	d8811f15 	stw	r2,1148(sp)
    4d5c:	98bff60e 	bge	r19,r2,4d38 <__alt_data_end+0xfffaf608>
    4d60:	b809883a 	mov	r4,r23
    4d64:	b00b883a 	mov	r5,r22
    4d68:	d9811e04 	addi	r6,sp,1144
    4d6c:	0009f5c0 	call	9f5c <__sprint_r>
    4d70:	103a811e 	bne	r2,zero,3778 <__alt_data_end+0xfffae048>
    4d74:	d8c12017 	ldw	r3,1152(sp)
    4d78:	d8811f17 	ldw	r2,1148(sp)
    4d7c:	da000404 	addi	r8,sp,16
    4d80:	003fee06 	br	4d3c <__alt_data_end+0xfffaf60c>
    4d84:	008011c4 	movi	r2,71
    4d88:	1400db16 	blt	r2,r16,50f8 <___vfprintf_internal_r+0x1de0>
    4d8c:	01000074 	movhi	r4,1
    4d90:	2108ae04 	addi	r4,r4,8888
    4d94:	d9013115 	stw	r4,1220(sp)
    4d98:	00c000c4 	movi	r3,3
    4d9c:	00bfdfc4 	movi	r2,-129
    4da0:	d8c12b15 	stw	r3,1196(sp)
    4da4:	e0b8703a 	and	fp,fp,r2
    4da8:	dcc12783 	ldbu	r19,1182(sp)
    4dac:	dc812d15 	stw	r18,1204(sp)
    4db0:	1823883a 	mov	r17,r3
    4db4:	d8013215 	stw	zero,1224(sp)
    4db8:	d8013415 	stw	zero,1232(sp)
    4dbc:	003ad606 	br	3918 <__alt_data_end+0xfffae1e8>
    4dc0:	4823883a 	mov	r17,r9
    4dc4:	003cc906 	br	40ec <__alt_data_end+0xfffae9bc>
    4dc8:	1c800017 	ldw	r18,0(r3)
    4dcc:	d8c12d17 	ldw	r3,1204(sp)
    4dd0:	902bd7fa 	srai	r21,r18,31
    4dd4:	18c00104 	addi	r3,r3,4
    4dd8:	d8c12d15 	stw	r3,1204(sp)
    4ddc:	a805883a 	mov	r2,r21
    4de0:	003aa906 	br	3888 <__alt_data_end+0xfffae158>
    4de4:	d9412d17 	ldw	r5,1204(sp)
    4de8:	14800017 	ldw	r18,0(r2)
    4dec:	002b883a 	mov	r21,zero
    4df0:	29400104 	addi	r5,r5,4
    4df4:	d9412d15 	stw	r5,1204(sp)
    4df8:	003bf906 	br	3de0 <__alt_data_end+0xfffae6b0>
    4dfc:	d8c12d17 	ldw	r3,1204(sp)
    4e00:	14800017 	ldw	r18,0(r2)
    4e04:	002b883a 	mov	r21,zero
    4e08:	18c00104 	addi	r3,r3,4
    4e0c:	d8c12d15 	stw	r3,1204(sp)
    4e10:	00800044 	movi	r2,1
    4e14:	9007883a 	mov	r3,r18
    4e18:	003bcf06 	br	3d58 <__alt_data_end+0xfffae628>
    4e1c:	d9012d17 	ldw	r4,1204(sp)
    4e20:	14800017 	ldw	r18,0(r2)
    4e24:	002b883a 	mov	r21,zero
    4e28:	21000104 	addi	r4,r4,4
    4e2c:	d9012d15 	stw	r4,1204(sp)
    4e30:	0005883a 	mov	r2,zero
    4e34:	9007883a 	mov	r3,r18
    4e38:	003bc706 	br	3d58 <__alt_data_end+0xfffae628>
    4e3c:	d9412d17 	ldw	r5,1204(sp)
    4e40:	d8c12f17 	ldw	r3,1212(sp)
    4e44:	28800017 	ldw	r2,0(r5)
    4e48:	29400104 	addi	r5,r5,4
    4e4c:	d9412d15 	stw	r5,1204(sp)
    4e50:	10c00015 	stw	r3,0(r2)
    4e54:	00396d06 	br	340c <__alt_data_end+0xfffadcdc>
    4e58:	01000074 	movhi	r4,1
    4e5c:	2108ac04 	addi	r4,r4,8880
    4e60:	d9013115 	stw	r4,1220(sp)
    4e64:	003ba206 	br	3cf0 <__alt_data_end+0xfffae5c0>
    4e68:	b809883a 	mov	r4,r23
    4e6c:	b00b883a 	mov	r5,r22
    4e70:	d9811e04 	addi	r6,sp,1144
    4e74:	0009f5c0 	call	9f5c <__sprint_r>
    4e78:	103a3f1e 	bne	r2,zero,3778 <__alt_data_end+0xfffae048>
    4e7c:	dc012617 	ldw	r16,1176(sp)
    4e80:	d8c12017 	ldw	r3,1152(sp)
    4e84:	da000404 	addi	r8,sp,16
    4e88:	003f9106 	br	4cd0 <__alt_data_end+0xfffaf5a0>
    4e8c:	e0800044 	addi	r2,fp,1
    4e90:	9cc00814 	ori	r19,r19,32
    4e94:	e4000047 	ldb	r16,1(fp)
    4e98:	00398706 	br	34b8 <__alt_data_end+0xfffadd88>
    4e9c:	d8812e17 	ldw	r2,1208(sp)
    4ea0:	d8c12d15 	stw	r3,1204(sp)
    4ea4:	0085c83a 	sub	r2,zero,r2
    4ea8:	d8812e15 	stw	r2,1208(sp)
    4eac:	e005883a 	mov	r2,fp
    4eb0:	003a3a06 	br	379c <__alt_data_end+0xfffae06c>
    4eb4:	b809883a 	mov	r4,r23
    4eb8:	b00b883a 	mov	r5,r22
    4ebc:	d9811e04 	addi	r6,sp,1144
    4ec0:	0009f5c0 	call	9f5c <__sprint_r>
    4ec4:	103a2c1e 	bne	r2,zero,3778 <__alt_data_end+0xfffae048>
    4ec8:	d8c12017 	ldw	r3,1152(sp)
    4ecc:	da000404 	addi	r8,sp,16
    4ed0:	003cf006 	br	4294 <__alt_data_end+0xfffaeb64>
    4ed4:	d8c12817 	ldw	r3,1184(sp)
    4ed8:	d9013117 	ldw	r4,1220(sp)
    4edc:	1923c83a 	sub	r17,r3,r4
    4ee0:	003a8806 	br	3904 <__alt_data_end+0xfffae1d4>
    4ee4:	da013f15 	stw	r8,1276(sp)
    4ee8:	00032800 	call	3280 <strlen>
    4eec:	1023883a 	mov	r17,r2
    4ef0:	da013f17 	ldw	r8,1276(sp)
    4ef4:	883c7f0e 	bge	r17,zero,40f4 <__alt_data_end+0xfffae9c4>
    4ef8:	0005883a 	mov	r2,zero
    4efc:	003c7d06 	br	40f4 <__alt_data_end+0xfffae9c4>
    4f00:	b809883a 	mov	r4,r23
    4f04:	b00b883a 	mov	r5,r22
    4f08:	d9811e04 	addi	r6,sp,1144
    4f0c:	0009f5c0 	call	9f5c <__sprint_r>
    4f10:	103a191e 	bne	r2,zero,3778 <__alt_data_end+0xfffae048>
    4f14:	d8c12017 	ldw	r3,1152(sp)
    4f18:	d8811f17 	ldw	r2,1148(sp)
    4f1c:	da000404 	addi	r8,sp,16
    4f20:	d9413317 	ldw	r5,1228(sp)
    4f24:	d9013117 	ldw	r4,1220(sp)
    4f28:	10800044 	addi	r2,r2,1
    4f2c:	28c7883a 	add	r3,r5,r3
    4f30:	41000015 	stw	r4,0(r8)
    4f34:	41400115 	stw	r5,4(r8)
    4f38:	d8c12015 	stw	r3,1152(sp)
    4f3c:	d8811f15 	stw	r2,1148(sp)
    4f40:	010001c4 	movi	r4,7
    4f44:	20bb060e 	bge	r4,r2,3b60 <__alt_data_end+0xfffae430>
    4f48:	003d6206 	br	44d4 <__alt_data_end+0xfffaeda4>
    4f4c:	01000074 	movhi	r4,1
    4f50:	2108c084 	addi	r4,r4,8962
    4f54:	d9013615 	stw	r4,1240(sp)
    4f58:	003aa306 	br	39e8 <__alt_data_end+0xfffae2b8>
    4f5c:	d8812604 	addi	r2,sp,1176
    4f60:	d8800115 	stw	r2,4(sp)
    4f64:	d9413717 	ldw	r5,1244(sp)
    4f68:	d8812504 	addi	r2,sp,1172
    4f6c:	d8800215 	stw	r2,8(sp)
    4f70:	d8812104 	addi	r2,sp,1156
    4f74:	da400015 	stw	r9,0(sp)
    4f78:	d8800315 	stw	r2,12(sp)
    4f7c:	b809883a 	mov	r4,r23
    4f80:	880d883a 	mov	r6,r17
    4f84:	01c000c4 	movi	r7,3
    4f88:	da013f15 	stw	r8,1276(sp)
    4f8c:	da413e15 	stw	r9,1272(sp)
    4f90:	00057900 	call	5790 <_dtoa_r>
    4f94:	da413e17 	ldw	r9,1272(sp)
    4f98:	da013f17 	ldw	r8,1276(sp)
    4f9c:	d8813115 	stw	r2,1220(sp)
    4fa0:	482b883a 	mov	r21,r9
    4fa4:	d8c13117 	ldw	r3,1220(sp)
    4fa8:	00801184 	movi	r2,70
    4fac:	1d55883a 	add	r10,r3,r21
    4fb0:	98bebb1e 	bne	r19,r2,4aa0 <__alt_data_end+0xfffaf370>
    4fb4:	19000007 	ldb	r4,0(r3)
    4fb8:	00800c04 	movi	r2,48
    4fbc:	2080dd26 	beq	r4,r2,5334 <___vfprintf_internal_r+0x201c>
    4fc0:	d8c12617 	ldw	r3,1176(sp)
    4fc4:	50d5883a 	add	r10,r10,r3
    4fc8:	003eb506 	br	4aa0 <__alt_data_end+0xfffaf370>
    4fcc:	0023883a 	mov	r17,zero
    4fd0:	003d9b06 	br	4640 <__alt_data_end+0xfffaef10>
    4fd4:	b809883a 	mov	r4,r23
    4fd8:	b00b883a 	mov	r5,r22
    4fdc:	d9811e04 	addi	r6,sp,1144
    4fe0:	0009f5c0 	call	9f5c <__sprint_r>
    4fe4:	1039e41e 	bne	r2,zero,3778 <__alt_data_end+0xfffae048>
    4fe8:	d8c12017 	ldw	r3,1152(sp)
    4fec:	da000404 	addi	r8,sp,16
    4ff0:	003d9206 	br	463c <__alt_data_end+0xfffaef0c>
    4ff4:	b809883a 	mov	r4,r23
    4ff8:	b00b883a 	mov	r5,r22
    4ffc:	d9811e04 	addi	r6,sp,1144
    5000:	0009f5c0 	call	9f5c <__sprint_r>
    5004:	1039dc1e 	bne	r2,zero,3778 <__alt_data_end+0xfffae048>
    5008:	d8812617 	ldw	r2,1176(sp)
    500c:	d8c12017 	ldw	r3,1152(sp)
    5010:	da000404 	addi	r8,sp,16
    5014:	003dfb06 	br	4804 <__alt_data_end+0xfffaf0d4>
    5018:	01000074 	movhi	r4,1
    501c:	2108bc84 	addi	r4,r4,8946
    5020:	d9012c15 	stw	r4,1200(sp)
    5024:	d9012c17 	ldw	r4,1200(sp)
    5028:	1c07883a 	add	r3,r3,r16
    502c:	10800044 	addi	r2,r2,1
    5030:	41000015 	stw	r4,0(r8)
    5034:	44000115 	stw	r16,4(r8)
    5038:	d8c12015 	stw	r3,1152(sp)
    503c:	d8811f15 	stw	r2,1148(sp)
    5040:	010001c4 	movi	r4,7
    5044:	20bfae16 	blt	r4,r2,4f00 <__alt_data_end+0xfffaf7d0>
    5048:	42000204 	addi	r8,r8,8
    504c:	003fb406 	br	4f20 <__alt_data_end+0xfffaf7f0>
    5050:	0021883a 	mov	r16,zero
    5054:	003dfd06 	br	484c <__alt_data_end+0xfffaf11c>
    5058:	01400074 	movhi	r5,1
    505c:	2948c084 	addi	r5,r5,8962
    5060:	d9413615 	stw	r5,1240(sp)
    5064:	003ae306 	br	3bf4 <__alt_data_end+0xfffae4c4>
    5068:	b809883a 	mov	r4,r23
    506c:	b00b883a 	mov	r5,r22
    5070:	d9811e04 	addi	r6,sp,1144
    5074:	0009f5c0 	call	9f5c <__sprint_r>
    5078:	1039bf1e 	bne	r2,zero,3778 <__alt_data_end+0xfffae048>
    507c:	d8812617 	ldw	r2,1176(sp)
    5080:	d9413317 	ldw	r5,1228(sp)
    5084:	d8c12017 	ldw	r3,1152(sp)
    5088:	da000404 	addi	r8,sp,16
    508c:	2885c83a 	sub	r2,r5,r2
    5090:	003ded06 	br	4848 <__alt_data_end+0xfffaf118>
    5094:	00800184 	movi	r2,6
    5098:	1240012e 	bgeu	r2,r9,50a0 <___vfprintf_internal_r+0x1d88>
    509c:	1013883a 	mov	r9,r2
    50a0:	4823883a 	mov	r17,r9
    50a4:	4805883a 	mov	r2,r9
    50a8:	4800b216 	blt	r9,zero,5374 <___vfprintf_internal_r+0x205c>
    50ac:	01400074 	movhi	r5,1
    50b0:	2948ba04 	addi	r5,r5,8936
    50b4:	d8812b15 	stw	r2,1196(sp)
    50b8:	dc812d15 	stw	r18,1204(sp)
    50bc:	d8013215 	stw	zero,1224(sp)
    50c0:	d8013415 	stw	zero,1232(sp)
    50c4:	d9413115 	stw	r5,1220(sp)
    50c8:	0005883a 	mov	r2,zero
    50cc:	003a1906 	br	3934 <__alt_data_end+0xfffae204>
    50d0:	04c00b44 	movi	r19,45
    50d4:	dcc12785 	stb	r19,1182(sp)
    50d8:	003b0006 	br	3cdc <__alt_data_end+0xfffae5ac>
    50dc:	d8c12d17 	ldw	r3,1204(sp)
    50e0:	d9012f17 	ldw	r4,1212(sp)
    50e4:	18800017 	ldw	r2,0(r3)
    50e8:	18c00104 	addi	r3,r3,4
    50ec:	d8c12d15 	stw	r3,1204(sp)
    50f0:	11000015 	stw	r4,0(r2)
    50f4:	0038c506 	br	340c <__alt_data_end+0xfffadcdc>
    50f8:	01400074 	movhi	r5,1
    50fc:	2948af04 	addi	r5,r5,8892
    5100:	d9413115 	stw	r5,1220(sp)
    5104:	003f2406 	br	4d98 <__alt_data_end+0xfffaf668>
    5108:	00800b44 	movi	r2,45
    510c:	d8812785 	stb	r2,1182(sp)
    5110:	df012b15 	stw	fp,1196(sp)
    5114:	d8013215 	stw	zero,1224(sp)
    5118:	df012d17 	ldw	fp,1204(sp)
    511c:	00800b44 	movi	r2,45
    5120:	dc812d15 	stw	r18,1204(sp)
    5124:	003a0006 	br	3928 <__alt_data_end+0xfffae1f8>
    5128:	d8c12617 	ldw	r3,1176(sp)
    512c:	00bfff44 	movi	r2,-3
    5130:	18800a16 	blt	r3,r2,515c <___vfprintf_internal_r+0x1e44>
    5134:	48c00916 	blt	r9,r3,515c <___vfprintf_internal_r+0x1e44>
    5138:	d8c13415 	stw	r3,1232(sp)
    513c:	040019c4 	movi	r16,103
    5140:	003e7606 	br	4b1c <__alt_data_end+0xfffaf3ec>
    5144:	01000074 	movhi	r4,1
    5148:	2108bc84 	addi	r4,r4,8946
    514c:	d9012c15 	stw	r4,1200(sp)
    5150:	003c8e06 	br	438c <__alt_data_end+0xfffaec5c>
    5154:	5005883a 	mov	r2,r10
    5158:	003e6506 	br	4af0 <__alt_data_end+0xfffaf3c0>
    515c:	843fff84 	addi	r16,r16,-2
    5160:	1d7fffc4 	addi	r21,r3,-1
    5164:	dd412615 	stw	r21,1176(sp)
    5168:	dc0122c5 	stb	r16,1163(sp)
    516c:	a8009216 	blt	r21,zero,53b8 <___vfprintf_internal_r+0x20a0>
    5170:	00800ac4 	movi	r2,43
    5174:	d8812305 	stb	r2,1164(sp)
    5178:	00800244 	movi	r2,9
    517c:	1540660e 	bge	r2,r21,5318 <___vfprintf_internal_r+0x2000>
    5180:	dcc122c4 	addi	r19,sp,1163
    5184:	dc012c15 	stw	r16,1200(sp)
    5188:	4023883a 	mov	r17,r8
    518c:	9821883a 	mov	r16,r19
    5190:	a809883a 	mov	r4,r21
    5194:	01400284 	movi	r5,10
    5198:	000ca240 	call	ca24 <__modsi3>
    519c:	10800c04 	addi	r2,r2,48
    51a0:	843fffc4 	addi	r16,r16,-1
    51a4:	a809883a 	mov	r4,r21
    51a8:	01400284 	movi	r5,10
    51ac:	80800005 	stb	r2,0(r16)
    51b0:	000c9d00 	call	c9d0 <__divsi3>
    51b4:	01000244 	movi	r4,9
    51b8:	102b883a 	mov	r21,r2
    51bc:	20bff416 	blt	r4,r2,5190 <__alt_data_end+0xfffafa60>
    51c0:	8811883a 	mov	r8,r17
    51c4:	10800c04 	addi	r2,r2,48
    51c8:	8023883a 	mov	r17,r16
    51cc:	897fffc4 	addi	r5,r17,-1
    51d0:	88bfffc5 	stb	r2,-1(r17)
    51d4:	dc012c17 	ldw	r16,1200(sp)
    51d8:	2cc08a2e 	bgeu	r5,r19,5404 <___vfprintf_internal_r+0x20ec>
    51dc:	d9812384 	addi	r6,sp,1166
    51e0:	344dc83a 	sub	r6,r6,r17
    51e4:	d9012344 	addi	r4,sp,1165
    51e8:	998d883a 	add	r6,r19,r6
    51ec:	00000106 	br	51f4 <___vfprintf_internal_r+0x1edc>
    51f0:	28800003 	ldbu	r2,0(r5)
    51f4:	20800005 	stb	r2,0(r4)
    51f8:	21000044 	addi	r4,r4,1
    51fc:	29400044 	addi	r5,r5,1
    5200:	21bffb1e 	bne	r4,r6,51f0 <__alt_data_end+0xfffafac0>
    5204:	d8812304 	addi	r2,sp,1164
    5208:	1445c83a 	sub	r2,r2,r17
    520c:	d9412344 	addi	r5,sp,1165
    5210:	2885883a 	add	r2,r5,r2
    5214:	14e7c83a 	sub	r19,r2,r19
    5218:	d8813317 	ldw	r2,1228(sp)
    521c:	d8c13317 	ldw	r3,1228(sp)
    5220:	dcc13a15 	stw	r19,1256(sp)
    5224:	14e3883a 	add	r17,r2,r19
    5228:	00800044 	movi	r2,1
    522c:	10c0550e 	bge	r2,r3,5384 <___vfprintf_internal_r+0x206c>
    5230:	8c400044 	addi	r17,r17,1
    5234:	8839883a 	mov	fp,r17
    5238:	88005016 	blt	r17,zero,537c <___vfprintf_internal_r+0x2064>
    523c:	d8013415 	stw	zero,1232(sp)
    5240:	003e3f06 	br	4b40 <__alt_data_end+0xfffaf410>
    5244:	da412b15 	stw	r9,1196(sp)
    5248:	dcc12783 	ldbu	r19,1182(sp)
    524c:	4823883a 	mov	r17,r9
    5250:	dc812d15 	stw	r18,1204(sp)
    5254:	d8013215 	stw	zero,1224(sp)
    5258:	d8013415 	stw	zero,1232(sp)
    525c:	0039ae06 	br	3918 <__alt_data_end+0xfffae1e8>
    5260:	483de91e 	bne	r9,zero,4a08 <__alt_data_end+0xfffaf2d8>
    5264:	8813883a 	mov	r9,r17
    5268:	003de706 	br	4a08 <__alt_data_end+0xfffaf2d8>
    526c:	b809883a 	mov	r4,r23
    5270:	b00b883a 	mov	r5,r22
    5274:	d9811e04 	addi	r6,sp,1144
    5278:	0009f5c0 	call	9f5c <__sprint_r>
    527c:	10393e1e 	bne	r2,zero,3778 <__alt_data_end+0xfffae048>
    5280:	dc012617 	ldw	r16,1176(sp)
    5284:	d8c12017 	ldw	r3,1152(sp)
    5288:	d8811f17 	ldw	r2,1148(sp)
    528c:	da000404 	addi	r8,sp,16
    5290:	003ea006 	br	4d14 <__alt_data_end+0xfffaf5e4>
    5294:	00c00b44 	movi	r3,45
    5298:	2460003c 	xorhi	r17,r4,32768
    529c:	d8c12b05 	stb	r3,1196(sp)
    52a0:	003ddf06 	br	4a20 <__alt_data_end+0xfffaf2f0>
    52a4:	02400184 	movi	r9,6
    52a8:	003dd706 	br	4a08 <__alt_data_end+0xfffaf2d8>
    52ac:	4d400044 	addi	r21,r9,1
    52b0:	003de206 	br	4a3c <__alt_data_end+0xfffaf30c>
    52b4:	d8c13417 	ldw	r3,1232(sp)
    52b8:	00c0490e 	bge	zero,r3,53e0 <___vfprintf_internal_r+0x20c8>
    52bc:	04400044 	movi	r17,1
    52c0:	d9013317 	ldw	r4,1228(sp)
    52c4:	8923883a 	add	r17,r17,r4
    52c8:	8839883a 	mov	fp,r17
    52cc:	883e1c0e 	bge	r17,zero,4b40 <__alt_data_end+0xfffaf410>
    52d0:	0039883a 	mov	fp,zero
    52d4:	003e1a06 	br	4b40 <__alt_data_end+0xfffaf410>
    52d8:	00c03b0e 	bge	zero,r3,53c8 <___vfprintf_internal_r+0x20b0>
    52dc:	4800021e 	bne	r9,zero,52e8 <___vfprintf_internal_r+0x1fd0>
    52e0:	e080004c 	andi	r2,fp,1
    52e4:	10000626 	beq	r2,zero,5300 <___vfprintf_internal_r+0x1fe8>
    52e8:	d8c13417 	ldw	r3,1232(sp)
    52ec:	4a400044 	addi	r9,r9,1
    52f0:	1a63883a 	add	r17,r3,r9
    52f4:	8839883a 	mov	fp,r17
    52f8:	883e110e 	bge	r17,zero,4b40 <__alt_data_end+0xfffaf410>
    52fc:	003ff406 	br	52d0 <__alt_data_end+0xfffafba0>
    5300:	1839883a 	mov	fp,r3
    5304:	18004116 	blt	r3,zero,540c <___vfprintf_internal_r+0x20f4>
    5308:	dc413417 	ldw	r17,1232(sp)
    530c:	003e0c06 	br	4b40 <__alt_data_end+0xfffaf410>
    5310:	d8812117 	ldw	r2,1156(sp)
    5314:	003df606 	br	4af0 <__alt_data_end+0xfffaf3c0>
    5318:	00800c04 	movi	r2,48
    531c:	a8c00c04 	addi	r3,r21,48
    5320:	d8812345 	stb	r2,1165(sp)
    5324:	d8c12385 	stb	r3,1166(sp)
    5328:	d88123c4 	addi	r2,sp,1167
    532c:	dcc122c4 	addi	r19,sp,1163
    5330:	003fb806 	br	5214 <__alt_data_end+0xfffafae4>
    5334:	d9013717 	ldw	r4,1244(sp)
    5338:	880b883a 	mov	r5,r17
    533c:	000d883a 	mov	r6,zero
    5340:	000f883a 	mov	r7,zero
    5344:	da013f15 	stw	r8,1276(sp)
    5348:	da413e15 	stw	r9,1272(sp)
    534c:	da813d15 	stw	r10,1268(sp)
    5350:	000dcd40 	call	dcd4 <__eqdf2>
    5354:	da013f17 	ldw	r8,1276(sp)
    5358:	da413e17 	ldw	r9,1272(sp)
    535c:	da813d17 	ldw	r10,1268(sp)
    5360:	103f1726 	beq	r2,zero,4fc0 <__alt_data_end+0xfffaf890>
    5364:	00800044 	movi	r2,1
    5368:	1547c83a 	sub	r3,r2,r21
    536c:	d8c12615 	stw	r3,1176(sp)
    5370:	003f1406 	br	4fc4 <__alt_data_end+0xfffaf894>
    5374:	0005883a 	mov	r2,zero
    5378:	003f4c06 	br	50ac <__alt_data_end+0xfffaf97c>
    537c:	0039883a 	mov	fp,zero
    5380:	003fae06 	br	523c <__alt_data_end+0xfffafb0c>
    5384:	e084703a 	and	r2,fp,r2
    5388:	103faa26 	beq	r2,zero,5234 <__alt_data_end+0xfffafb04>
    538c:	003fa806 	br	5230 <__alt_data_end+0xfffafb00>
    5390:	d9412d17 	ldw	r5,1204(sp)
    5394:	2a400017 	ldw	r9,0(r5)
    5398:	28c00104 	addi	r3,r5,4
    539c:	d8c12d15 	stw	r3,1204(sp)
    53a0:	483ebc0e 	bge	r9,zero,4e94 <__alt_data_end+0xfffaf764>
    53a4:	027fffc4 	movi	r9,-1
    53a8:	e4000047 	ldb	r16,1(fp)
    53ac:	00384206 	br	34b8 <__alt_data_end+0xfffadd88>
    53b0:	043fffc4 	movi	r16,-1
    53b4:	0038ce06 	br	36f0 <__alt_data_end+0xfffadfc0>
    53b8:	00800b44 	movi	r2,45
    53bc:	056bc83a 	sub	r21,zero,r21
    53c0:	d8812305 	stb	r2,1164(sp)
    53c4:	003f6c06 	br	5178 <__alt_data_end+0xfffafa48>
    53c8:	4800081e 	bne	r9,zero,53ec <___vfprintf_internal_r+0x20d4>
    53cc:	e080004c 	andi	r2,fp,1
    53d0:	1000061e 	bne	r2,zero,53ec <___vfprintf_internal_r+0x20d4>
    53d4:	07000044 	movi	fp,1
    53d8:	e023883a 	mov	r17,fp
    53dc:	003dd806 	br	4b40 <__alt_data_end+0xfffaf410>
    53e0:	04400084 	movi	r17,2
    53e4:	88e3c83a 	sub	r17,r17,r3
    53e8:	003fb506 	br	52c0 <__alt_data_end+0xfffafb90>
    53ec:	4c400084 	addi	r17,r9,2
    53f0:	8839883a 	mov	fp,r17
    53f4:	883dd20e 	bge	r17,zero,4b40 <__alt_data_end+0xfffaf410>
    53f8:	003fb506 	br	52d0 <__alt_data_end+0xfffafba0>
    53fc:	d8c12617 	ldw	r3,1176(sp)
    5400:	003f5706 	br	5160 <__alt_data_end+0xfffafa30>
    5404:	d8812344 	addi	r2,sp,1165
    5408:	003f8206 	br	5214 <__alt_data_end+0xfffafae4>
    540c:	0039883a 	mov	fp,zero
    5410:	003fbd06 	br	5308 <__alt_data_end+0xfffafbd8>

00005414 <__vfprintf_internal>:
    5414:	2007883a 	mov	r3,r4
    5418:	01000074 	movhi	r4,1
    541c:	21101904 	addi	r4,r4,16484
    5420:	21000017 	ldw	r4,0(r4)
    5424:	2805883a 	mov	r2,r5
    5428:	300f883a 	mov	r7,r6
    542c:	180b883a 	mov	r5,r3
    5430:	100d883a 	mov	r6,r2
    5434:	00033181 	jmpi	3318 <___vfprintf_internal_r>

00005438 <__swsetup_r>:
    5438:	00800074 	movhi	r2,1
    543c:	defffd04 	addi	sp,sp,-12
    5440:	10901904 	addi	r2,r2,16484
    5444:	dc400115 	stw	r17,4(sp)
    5448:	2023883a 	mov	r17,r4
    544c:	11000017 	ldw	r4,0(r2)
    5450:	dc000015 	stw	r16,0(sp)
    5454:	dfc00215 	stw	ra,8(sp)
    5458:	2821883a 	mov	r16,r5
    545c:	20000226 	beq	r4,zero,5468 <__swsetup_r+0x30>
    5460:	20c00e17 	ldw	r3,56(r4)
    5464:	18002e26 	beq	r3,zero,5520 <__swsetup_r+0xe8>
    5468:	8080030b 	ldhu	r2,12(r16)
    546c:	10c0020c 	andi	r3,r2,8
    5470:	100d883a 	mov	r6,r2
    5474:	18000f26 	beq	r3,zero,54b4 <__swsetup_r+0x7c>
    5478:	80c00417 	ldw	r3,16(r16)
    547c:	18001526 	beq	r3,zero,54d4 <__swsetup_r+0x9c>
    5480:	1100004c 	andi	r4,r2,1
    5484:	20001c1e 	bne	r4,zero,54f8 <__swsetup_r+0xc0>
    5488:	1080008c 	andi	r2,r2,2
    548c:	1000261e 	bne	r2,zero,5528 <__swsetup_r+0xf0>
    5490:	80800517 	ldw	r2,20(r16)
    5494:	80800215 	stw	r2,8(r16)
    5498:	18001c26 	beq	r3,zero,550c <__swsetup_r+0xd4>
    549c:	0005883a 	mov	r2,zero
    54a0:	dfc00217 	ldw	ra,8(sp)
    54a4:	dc400117 	ldw	r17,4(sp)
    54a8:	dc000017 	ldw	r16,0(sp)
    54ac:	dec00304 	addi	sp,sp,12
    54b0:	f800283a 	ret
    54b4:	3080040c 	andi	r2,r6,16
    54b8:	10001726 	beq	r2,zero,5518 <__swsetup_r+0xe0>
    54bc:	3080010c 	andi	r2,r6,4
    54c0:	10001b1e 	bne	r2,zero,5530 <__swsetup_r+0xf8>
    54c4:	80c00417 	ldw	r3,16(r16)
    54c8:	30800214 	ori	r2,r6,8
    54cc:	8080030d 	sth	r2,12(r16)
    54d0:	183feb1e 	bne	r3,zero,5480 <__alt_data_end+0xfffafd50>
    54d4:	1140a00c 	andi	r5,r2,640
    54d8:	01008004 	movi	r4,512
    54dc:	293fe826 	beq	r5,r4,5480 <__alt_data_end+0xfffafd50>
    54e0:	8809883a 	mov	r4,r17
    54e4:	800b883a 	mov	r5,r16
    54e8:	0007fcc0 	call	7fcc <__smakebuf_r>
    54ec:	8080030b 	ldhu	r2,12(r16)
    54f0:	80c00417 	ldw	r3,16(r16)
    54f4:	003fe206 	br	5480 <__alt_data_end+0xfffafd50>
    54f8:	80800517 	ldw	r2,20(r16)
    54fc:	80000215 	stw	zero,8(r16)
    5500:	0085c83a 	sub	r2,zero,r2
    5504:	80800615 	stw	r2,24(r16)
    5508:	183fe41e 	bne	r3,zero,549c <__alt_data_end+0xfffafd6c>
    550c:	8080030b 	ldhu	r2,12(r16)
    5510:	1080200c 	andi	r2,r2,128
    5514:	103fe226 	beq	r2,zero,54a0 <__alt_data_end+0xfffafd70>
    5518:	00bfffc4 	movi	r2,-1
    551c:	003fe006 	br	54a0 <__alt_data_end+0xfffafd70>
    5520:	00074740 	call	7474 <__sinit>
    5524:	003fd006 	br	5468 <__alt_data_end+0xfffafd38>
    5528:	0005883a 	mov	r2,zero
    552c:	003fd906 	br	5494 <__alt_data_end+0xfffafd64>
    5530:	81400c17 	ldw	r5,48(r16)
    5534:	28000626 	beq	r5,zero,5550 <__swsetup_r+0x118>
    5538:	80801004 	addi	r2,r16,64
    553c:	28800326 	beq	r5,r2,554c <__swsetup_r+0x114>
    5540:	8809883a 	mov	r4,r17
    5544:	00075e80 	call	75e8 <_free_r>
    5548:	8180030b 	ldhu	r6,12(r16)
    554c:	80000c15 	stw	zero,48(r16)
    5550:	80c00417 	ldw	r3,16(r16)
    5554:	00bff6c4 	movi	r2,-37
    5558:	118c703a 	and	r6,r2,r6
    555c:	80000115 	stw	zero,4(r16)
    5560:	80c00015 	stw	r3,0(r16)
    5564:	003fd806 	br	54c8 <__alt_data_end+0xfffafd98>

00005568 <quorem>:
    5568:	defff204 	addi	sp,sp,-56
    556c:	ddc00b15 	stw	r23,44(sp)
    5570:	20800417 	ldw	r2,16(r4)
    5574:	2dc00417 	ldw	r23,16(r5)
    5578:	dfc00d15 	stw	ra,52(sp)
    557c:	df000c15 	stw	fp,48(sp)
    5580:	dd800a15 	stw	r22,40(sp)
    5584:	dd400915 	stw	r21,36(sp)
    5588:	dd000815 	stw	r20,32(sp)
    558c:	dcc00715 	stw	r19,28(sp)
    5590:	dc800615 	stw	r18,24(sp)
    5594:	dc400515 	stw	r17,20(sp)
    5598:	dc000415 	stw	r16,16(sp)
    559c:	15c07a16 	blt	r2,r23,5788 <quorem+0x220>
    55a0:	bdffffc4 	addi	r23,r23,-1
    55a4:	bde9883a 	add	r20,r23,r23
    55a8:	28c00504 	addi	r3,r5,20
    55ac:	a529883a 	add	r20,r20,r20
    55b0:	1d39883a 	add	fp,r3,r20
    55b4:	24c00504 	addi	r19,r4,20
    55b8:	d9400215 	stw	r5,8(sp)
    55bc:	9d29883a 	add	r20,r19,r20
    55c0:	e1400017 	ldw	r5,0(fp)
    55c4:	d9000015 	stw	r4,0(sp)
    55c8:	a1000017 	ldw	r4,0(r20)
    55cc:	29400044 	addi	r5,r5,1
    55d0:	d8c00115 	stw	r3,4(sp)
    55d4:	dd000315 	stw	r20,12(sp)
    55d8:	000ca800 	call	ca80 <__udivsi3>
    55dc:	1025883a 	mov	r18,r2
    55e0:	10003026 	beq	r2,zero,56a4 <quorem+0x13c>
    55e4:	dc400117 	ldw	r17,4(sp)
    55e8:	9829883a 	mov	r20,r19
    55ec:	002d883a 	mov	r22,zero
    55f0:	0021883a 	mov	r16,zero
    55f4:	8d400017 	ldw	r21,0(r17)
    55f8:	900b883a 	mov	r5,r18
    55fc:	8c400104 	addi	r17,r17,4
    5600:	a93fffcc 	andi	r4,r21,65535
    5604:	000ca900 	call	ca90 <__mulsi3>
    5608:	a808d43a 	srli	r4,r21,16
    560c:	900b883a 	mov	r5,r18
    5610:	b0ad883a 	add	r22,r22,r2
    5614:	000ca900 	call	ca90 <__mulsi3>
    5618:	a1000017 	ldw	r4,0(r20)
    561c:	b00cd43a 	srli	r6,r22,16
    5620:	b0ffffcc 	andi	r3,r22,65535
    5624:	217fffcc 	andi	r5,r4,65535
    5628:	2c21883a 	add	r16,r5,r16
    562c:	80c7c83a 	sub	r3,r16,r3
    5630:	2008d43a 	srli	r4,r4,16
    5634:	3085883a 	add	r2,r6,r2
    5638:	1821d43a 	srai	r16,r3,16
    563c:	117fffcc 	andi	r5,r2,65535
    5640:	2149c83a 	sub	r4,r4,r5
    5644:	2421883a 	add	r16,r4,r16
    5648:	8008943a 	slli	r4,r16,16
    564c:	18ffffcc 	andi	r3,r3,65535
    5650:	102cd43a 	srli	r22,r2,16
    5654:	20c8b03a 	or	r4,r4,r3
    5658:	a1000015 	stw	r4,0(r20)
    565c:	8021d43a 	srai	r16,r16,16
    5660:	a5000104 	addi	r20,r20,4
    5664:	e47fe32e 	bgeu	fp,r17,55f4 <__alt_data_end+0xfffafec4>
    5668:	d8c00317 	ldw	r3,12(sp)
    566c:	18800017 	ldw	r2,0(r3)
    5670:	10000c1e 	bne	r2,zero,56a4 <quorem+0x13c>
    5674:	18bfff04 	addi	r2,r3,-4
    5678:	9880082e 	bgeu	r19,r2,569c <quorem+0x134>
    567c:	18ffff17 	ldw	r3,-4(r3)
    5680:	18000326 	beq	r3,zero,5690 <quorem+0x128>
    5684:	00000506 	br	569c <quorem+0x134>
    5688:	10c00017 	ldw	r3,0(r2)
    568c:	1800031e 	bne	r3,zero,569c <quorem+0x134>
    5690:	10bfff04 	addi	r2,r2,-4
    5694:	bdffffc4 	addi	r23,r23,-1
    5698:	98bffb36 	bltu	r19,r2,5688 <__alt_data_end+0xfffaff58>
    569c:	d8c00017 	ldw	r3,0(sp)
    56a0:	1dc00415 	stw	r23,16(r3)
    56a4:	d9000017 	ldw	r4,0(sp)
    56a8:	d9400217 	ldw	r5,8(sp)
    56ac:	0008fa00 	call	8fa0 <__mcmp>
    56b0:	10002816 	blt	r2,zero,5754 <quorem+0x1ec>
    56b4:	dc400117 	ldw	r17,4(sp)
    56b8:	94800044 	addi	r18,r18,1
    56bc:	980d883a 	mov	r6,r19
    56c0:	0007883a 	mov	r3,zero
    56c4:	31000017 	ldw	r4,0(r6)
    56c8:	89400017 	ldw	r5,0(r17)
    56cc:	31800104 	addi	r6,r6,4
    56d0:	20bfffcc 	andi	r2,r4,65535
    56d4:	10c7883a 	add	r3,r2,r3
    56d8:	28bfffcc 	andi	r2,r5,65535
    56dc:	1885c83a 	sub	r2,r3,r2
    56e0:	280ad43a 	srli	r5,r5,16
    56e4:	2008d43a 	srli	r4,r4,16
    56e8:	1007d43a 	srai	r3,r2,16
    56ec:	10bfffcc 	andi	r2,r2,65535
    56f0:	2149c83a 	sub	r4,r4,r5
    56f4:	20c9883a 	add	r4,r4,r3
    56f8:	200a943a 	slli	r5,r4,16
    56fc:	8c400104 	addi	r17,r17,4
    5700:	2007d43a 	srai	r3,r4,16
    5704:	2884b03a 	or	r2,r5,r2
    5708:	30bfff15 	stw	r2,-4(r6)
    570c:	e47fed2e 	bgeu	fp,r17,56c4 <__alt_data_end+0xfffaff94>
    5710:	bdc5883a 	add	r2,r23,r23
    5714:	1085883a 	add	r2,r2,r2
    5718:	9887883a 	add	r3,r19,r2
    571c:	18800017 	ldw	r2,0(r3)
    5720:	10000c1e 	bne	r2,zero,5754 <quorem+0x1ec>
    5724:	18bfff04 	addi	r2,r3,-4
    5728:	9880082e 	bgeu	r19,r2,574c <quorem+0x1e4>
    572c:	18ffff17 	ldw	r3,-4(r3)
    5730:	18000326 	beq	r3,zero,5740 <quorem+0x1d8>
    5734:	00000506 	br	574c <quorem+0x1e4>
    5738:	10c00017 	ldw	r3,0(r2)
    573c:	1800031e 	bne	r3,zero,574c <quorem+0x1e4>
    5740:	10bfff04 	addi	r2,r2,-4
    5744:	bdffffc4 	addi	r23,r23,-1
    5748:	98bffb36 	bltu	r19,r2,5738 <__alt_data_end+0xfffb0008>
    574c:	d8c00017 	ldw	r3,0(sp)
    5750:	1dc00415 	stw	r23,16(r3)
    5754:	9005883a 	mov	r2,r18
    5758:	dfc00d17 	ldw	ra,52(sp)
    575c:	df000c17 	ldw	fp,48(sp)
    5760:	ddc00b17 	ldw	r23,44(sp)
    5764:	dd800a17 	ldw	r22,40(sp)
    5768:	dd400917 	ldw	r21,36(sp)
    576c:	dd000817 	ldw	r20,32(sp)
    5770:	dcc00717 	ldw	r19,28(sp)
    5774:	dc800617 	ldw	r18,24(sp)
    5778:	dc400517 	ldw	r17,20(sp)
    577c:	dc000417 	ldw	r16,16(sp)
    5780:	dec00e04 	addi	sp,sp,56
    5784:	f800283a 	ret
    5788:	0005883a 	mov	r2,zero
    578c:	003ff206 	br	5758 <__alt_data_end+0xfffb0028>

00005790 <_dtoa_r>:
    5790:	20801017 	ldw	r2,64(r4)
    5794:	deffde04 	addi	sp,sp,-136
    5798:	dd401d15 	stw	r21,116(sp)
    579c:	dcc01b15 	stw	r19,108(sp)
    57a0:	dc801a15 	stw	r18,104(sp)
    57a4:	dc401915 	stw	r17,100(sp)
    57a8:	dc001815 	stw	r16,96(sp)
    57ac:	dfc02115 	stw	ra,132(sp)
    57b0:	df002015 	stw	fp,128(sp)
    57b4:	ddc01f15 	stw	r23,124(sp)
    57b8:	dd801e15 	stw	r22,120(sp)
    57bc:	dd001c15 	stw	r20,112(sp)
    57c0:	d9c00315 	stw	r7,12(sp)
    57c4:	2021883a 	mov	r16,r4
    57c8:	302b883a 	mov	r21,r6
    57cc:	2825883a 	mov	r18,r5
    57d0:	dc402417 	ldw	r17,144(sp)
    57d4:	3027883a 	mov	r19,r6
    57d8:	10000826 	beq	r2,zero,57fc <_dtoa_r+0x6c>
    57dc:	21801117 	ldw	r6,68(r4)
    57e0:	00c00044 	movi	r3,1
    57e4:	100b883a 	mov	r5,r2
    57e8:	1986983a 	sll	r3,r3,r6
    57ec:	11800115 	stw	r6,4(r2)
    57f0:	10c00215 	stw	r3,8(r2)
    57f4:	00086cc0 	call	86cc <_Bfree>
    57f8:	80001015 	stw	zero,64(r16)
    57fc:	a8002d16 	blt	r21,zero,58b4 <_dtoa_r+0x124>
    5800:	88000015 	stw	zero,0(r17)
    5804:	a8dffc2c 	andhi	r3,r21,32752
    5808:	009ffc34 	movhi	r2,32752
    580c:	18801b26 	beq	r3,r2,587c <_dtoa_r+0xec>
    5810:	9009883a 	mov	r4,r18
    5814:	980b883a 	mov	r5,r19
    5818:	000d883a 	mov	r6,zero
    581c:	000f883a 	mov	r7,zero
    5820:	000dcd40 	call	dcd4 <__eqdf2>
    5824:	10002a1e 	bne	r2,zero,58d0 <_dtoa_r+0x140>
    5828:	d8c02317 	ldw	r3,140(sp)
    582c:	d9002517 	ldw	r4,148(sp)
    5830:	00800044 	movi	r2,1
    5834:	18800015 	stw	r2,0(r3)
    5838:	2001a226 	beq	r4,zero,5ec4 <_dtoa_r+0x734>
    583c:	00800074 	movhi	r2,1
    5840:	1088bc44 	addi	r2,r2,8945
    5844:	20800015 	stw	r2,0(r4)
    5848:	10bfffc4 	addi	r2,r2,-1
    584c:	dfc02117 	ldw	ra,132(sp)
    5850:	df002017 	ldw	fp,128(sp)
    5854:	ddc01f17 	ldw	r23,124(sp)
    5858:	dd801e17 	ldw	r22,120(sp)
    585c:	dd401d17 	ldw	r21,116(sp)
    5860:	dd001c17 	ldw	r20,112(sp)
    5864:	dcc01b17 	ldw	r19,108(sp)
    5868:	dc801a17 	ldw	r18,104(sp)
    586c:	dc401917 	ldw	r17,100(sp)
    5870:	dc001817 	ldw	r16,96(sp)
    5874:	dec02204 	addi	sp,sp,136
    5878:	f800283a 	ret
    587c:	d8c02317 	ldw	r3,140(sp)
    5880:	0089c3c4 	movi	r2,9999
    5884:	18800015 	stw	r2,0(r3)
    5888:	90017c26 	beq	r18,zero,5e7c <_dtoa_r+0x6ec>
    588c:	00800074 	movhi	r2,1
    5890:	1088c804 	addi	r2,r2,8992
    5894:	d9002517 	ldw	r4,148(sp)
    5898:	203fec26 	beq	r4,zero,584c <__alt_data_end+0xfffb011c>
    589c:	10c000c7 	ldb	r3,3(r2)
    58a0:	18017d1e 	bne	r3,zero,5e98 <_dtoa_r+0x708>
    58a4:	10c000c4 	addi	r3,r2,3
    58a8:	d9802517 	ldw	r6,148(sp)
    58ac:	30c00015 	stw	r3,0(r6)
    58b0:	003fe606 	br	584c <__alt_data_end+0xfffb011c>
    58b4:	04e00034 	movhi	r19,32768
    58b8:	9cffffc4 	addi	r19,r19,-1
    58bc:	00800044 	movi	r2,1
    58c0:	ace6703a 	and	r19,r21,r19
    58c4:	88800015 	stw	r2,0(r17)
    58c8:	982b883a 	mov	r21,r19
    58cc:	003fcd06 	br	5804 <__alt_data_end+0xfffb00d4>
    58d0:	d8800204 	addi	r2,sp,8
    58d4:	a822d53a 	srli	r17,r21,20
    58d8:	d8800015 	stw	r2,0(sp)
    58dc:	8009883a 	mov	r4,r16
    58e0:	900b883a 	mov	r5,r18
    58e4:	980d883a 	mov	r6,r19
    58e8:	d9c00104 	addi	r7,sp,4
    58ec:	00093140 	call	9314 <__d2b>
    58f0:	1039883a 	mov	fp,r2
    58f4:	88016a1e 	bne	r17,zero,5ea0 <_dtoa_r+0x710>
    58f8:	dd000217 	ldw	r20,8(sp)
    58fc:	dc400117 	ldw	r17,4(sp)
    5900:	00befbc4 	movi	r2,-1041
    5904:	a463883a 	add	r17,r20,r17
    5908:	8882ea16 	blt	r17,r2,64b4 <_dtoa_r+0xd24>
    590c:	00bf0384 	movi	r2,-1010
    5910:	1445c83a 	sub	r2,r2,r17
    5914:	89010484 	addi	r4,r17,1042
    5918:	a8aa983a 	sll	r21,r21,r2
    591c:	9108d83a 	srl	r4,r18,r4
    5920:	a908b03a 	or	r4,r21,r4
    5924:	000f1ac0 	call	f1ac <__floatunsidf>
    5928:	017f8434 	movhi	r5,65040
    592c:	01800044 	movi	r6,1
    5930:	1009883a 	mov	r4,r2
    5934:	194b883a 	add	r5,r3,r5
    5938:	8c7fffc4 	addi	r17,r17,-1
    593c:	d9800f15 	stw	r6,60(sp)
    5940:	000d883a 	mov	r6,zero
    5944:	01cffe34 	movhi	r7,16376
    5948:	000e7840 	call	e784 <__subdf3>
    594c:	0198dbf4 	movhi	r6,25455
    5950:	01cff4f4 	movhi	r7,16339
    5954:	1009883a 	mov	r4,r2
    5958:	180b883a 	mov	r5,r3
    595c:	3190d844 	addi	r6,r6,17249
    5960:	39e1e9c4 	addi	r7,r7,-30809
    5964:	000df180 	call	df18 <__muldf3>
    5968:	01a2d874 	movhi	r6,35681
    596c:	01cff1f4 	movhi	r7,16327
    5970:	180b883a 	mov	r5,r3
    5974:	31b22cc4 	addi	r6,r6,-14157
    5978:	39e28a04 	addi	r7,r7,-30168
    597c:	1009883a 	mov	r4,r2
    5980:	000cab80 	call	cab8 <__adddf3>
    5984:	8809883a 	mov	r4,r17
    5988:	102d883a 	mov	r22,r2
    598c:	182b883a 	mov	r21,r3
    5990:	000f0dc0 	call	f0dc <__floatsidf>
    5994:	019427f4 	movhi	r6,20639
    5998:	01cff4f4 	movhi	r7,16339
    599c:	1009883a 	mov	r4,r2
    59a0:	180b883a 	mov	r5,r3
    59a4:	319e7ec4 	addi	r6,r6,31227
    59a8:	39d104c4 	addi	r7,r7,17427
    59ac:	000df180 	call	df18 <__muldf3>
    59b0:	b009883a 	mov	r4,r22
    59b4:	a80b883a 	mov	r5,r21
    59b8:	100d883a 	mov	r6,r2
    59bc:	180f883a 	mov	r7,r3
    59c0:	000cab80 	call	cab8 <__adddf3>
    59c4:	1009883a 	mov	r4,r2
    59c8:	180b883a 	mov	r5,r3
    59cc:	102d883a 	mov	r22,r2
    59d0:	182b883a 	mov	r21,r3
    59d4:	000f0540 	call	f054 <__fixdfsi>
    59d8:	b009883a 	mov	r4,r22
    59dc:	a80b883a 	mov	r5,r21
    59e0:	000d883a 	mov	r6,zero
    59e4:	000f883a 	mov	r7,zero
    59e8:	d8800515 	stw	r2,20(sp)
    59ec:	000de380 	call	de38 <__ledf2>
    59f0:	10023116 	blt	r2,zero,62b8 <_dtoa_r+0xb28>
    59f4:	d8c00517 	ldw	r3,20(sp)
    59f8:	00800584 	movi	r2,22
    59fc:	10c21f36 	bltu	r2,r3,627c <_dtoa_r+0xaec>
    5a00:	180490fa 	slli	r2,r3,3
    5a04:	00c00074 	movhi	r3,1
    5a08:	18c8e404 	addi	r3,r3,9104
    5a0c:	1885883a 	add	r2,r3,r2
    5a10:	11000017 	ldw	r4,0(r2)
    5a14:	11400117 	ldw	r5,4(r2)
    5a18:	900d883a 	mov	r6,r18
    5a1c:	980f883a 	mov	r7,r19
    5a20:	000dd580 	call	dd58 <__gedf2>
    5a24:	0082a70e 	bge	zero,r2,64c4 <_dtoa_r+0xd34>
    5a28:	d9000517 	ldw	r4,20(sp)
    5a2c:	d8000c15 	stw	zero,48(sp)
    5a30:	213fffc4 	addi	r4,r4,-1
    5a34:	d9000515 	stw	r4,20(sp)
    5a38:	a463c83a 	sub	r17,r20,r17
    5a3c:	8dbfffc4 	addi	r22,r17,-1
    5a40:	b0021916 	blt	r22,zero,62a8 <_dtoa_r+0xb18>
    5a44:	d8000815 	stw	zero,32(sp)
    5a48:	d8800517 	ldw	r2,20(sp)
    5a4c:	10020e16 	blt	r2,zero,6288 <_dtoa_r+0xaf8>
    5a50:	b0ad883a 	add	r22,r22,r2
    5a54:	d8800a15 	stw	r2,40(sp)
    5a58:	d8000915 	stw	zero,36(sp)
    5a5c:	d8c00317 	ldw	r3,12(sp)
    5a60:	00800244 	movi	r2,9
    5a64:	10c11a36 	bltu	r2,r3,5ed0 <_dtoa_r+0x740>
    5a68:	00800144 	movi	r2,5
    5a6c:	10c4fc0e 	bge	r2,r3,6e60 <_dtoa_r+0x16d0>
    5a70:	18ffff04 	addi	r3,r3,-4
    5a74:	d8c00315 	stw	r3,12(sp)
    5a78:	0029883a 	mov	r20,zero
    5a7c:	d9800317 	ldw	r6,12(sp)
    5a80:	008000c4 	movi	r2,3
    5a84:	3083bd26 	beq	r6,r2,697c <_dtoa_r+0x11ec>
    5a88:	1183670e 	bge	r2,r6,6828 <_dtoa_r+0x1098>
    5a8c:	d8c00317 	ldw	r3,12(sp)
    5a90:	00800104 	movi	r2,4
    5a94:	1882e726 	beq	r3,r2,6634 <_dtoa_r+0xea4>
    5a98:	00800144 	movi	r2,5
    5a9c:	1884f21e 	bne	r3,r2,6e68 <_dtoa_r+0x16d8>
    5aa0:	00800044 	movi	r2,1
    5aa4:	d8800b15 	stw	r2,44(sp)
    5aa8:	d8c02217 	ldw	r3,136(sp)
    5aac:	d9000517 	ldw	r4,20(sp)
    5ab0:	1907883a 	add	r3,r3,r4
    5ab4:	19800044 	addi	r6,r3,1
    5ab8:	d8c00d15 	stw	r3,52(sp)
    5abc:	d9800615 	stw	r6,24(sp)
    5ac0:	0183c30e 	bge	zero,r6,69d0 <_dtoa_r+0x1240>
    5ac4:	d9800617 	ldw	r6,24(sp)
    5ac8:	3023883a 	mov	r17,r6
    5acc:	80001115 	stw	zero,68(r16)
    5ad0:	008005c4 	movi	r2,23
    5ad4:	1184f62e 	bgeu	r2,r6,6eb0 <_dtoa_r+0x1720>
    5ad8:	00c00044 	movi	r3,1
    5adc:	00800104 	movi	r2,4
    5ae0:	1085883a 	add	r2,r2,r2
    5ae4:	11000504 	addi	r4,r2,20
    5ae8:	180b883a 	mov	r5,r3
    5aec:	18c00044 	addi	r3,r3,1
    5af0:	313ffb2e 	bgeu	r6,r4,5ae0 <__alt_data_end+0xfffb03b0>
    5af4:	81401115 	stw	r5,68(r16)
    5af8:	8009883a 	mov	r4,r16
    5afc:	00086240 	call	8624 <_Balloc>
    5b00:	d8800715 	stw	r2,28(sp)
    5b04:	80801015 	stw	r2,64(r16)
    5b08:	00800384 	movi	r2,14
    5b0c:	1440fd36 	bltu	r2,r17,5f04 <_dtoa_r+0x774>
    5b10:	a000fc26 	beq	r20,zero,5f04 <_dtoa_r+0x774>
    5b14:	d8800517 	ldw	r2,20(sp)
    5b18:	0083b90e 	bge	zero,r2,6a00 <_dtoa_r+0x1270>
    5b1c:	d8c00517 	ldw	r3,20(sp)
    5b20:	108003cc 	andi	r2,r2,15
    5b24:	100490fa 	slli	r2,r2,3
    5b28:	182fd13a 	srai	r23,r3,4
    5b2c:	00c00074 	movhi	r3,1
    5b30:	18c8e404 	addi	r3,r3,9104
    5b34:	1885883a 	add	r2,r3,r2
    5b38:	b8c0040c 	andi	r3,r23,16
    5b3c:	12c00017 	ldw	r11,0(r2)
    5b40:	12800117 	ldw	r10,4(r2)
    5b44:	18039726 	beq	r3,zero,69a4 <_dtoa_r+0x1214>
    5b48:	00800074 	movhi	r2,1
    5b4c:	1088da04 	addi	r2,r2,9064
    5b50:	11800817 	ldw	r6,32(r2)
    5b54:	11c00917 	ldw	r7,36(r2)
    5b58:	9009883a 	mov	r4,r18
    5b5c:	980b883a 	mov	r5,r19
    5b60:	da801615 	stw	r10,88(sp)
    5b64:	dac01515 	stw	r11,84(sp)
    5b68:	000d3540 	call	d354 <__divdf3>
    5b6c:	da801617 	ldw	r10,88(sp)
    5b70:	dac01517 	ldw	r11,84(sp)
    5b74:	bdc003cc 	andi	r23,r23,15
    5b78:	044000c4 	movi	r17,3
    5b7c:	d8800e15 	stw	r2,56(sp)
    5b80:	182b883a 	mov	r21,r3
    5b84:	b8001126 	beq	r23,zero,5bcc <_dtoa_r+0x43c>
    5b88:	05000074 	movhi	r20,1
    5b8c:	a508da04 	addi	r20,r20,9064
    5b90:	5805883a 	mov	r2,r11
    5b94:	5007883a 	mov	r3,r10
    5b98:	b980004c 	andi	r6,r23,1
    5b9c:	1009883a 	mov	r4,r2
    5ba0:	b82fd07a 	srai	r23,r23,1
    5ba4:	180b883a 	mov	r5,r3
    5ba8:	30000426 	beq	r6,zero,5bbc <_dtoa_r+0x42c>
    5bac:	a1800017 	ldw	r6,0(r20)
    5bb0:	a1c00117 	ldw	r7,4(r20)
    5bb4:	8c400044 	addi	r17,r17,1
    5bb8:	000df180 	call	df18 <__muldf3>
    5bbc:	a5000204 	addi	r20,r20,8
    5bc0:	b83ff51e 	bne	r23,zero,5b98 <__alt_data_end+0xfffb0468>
    5bc4:	1017883a 	mov	r11,r2
    5bc8:	1815883a 	mov	r10,r3
    5bcc:	d9000e17 	ldw	r4,56(sp)
    5bd0:	a80b883a 	mov	r5,r21
    5bd4:	580d883a 	mov	r6,r11
    5bd8:	500f883a 	mov	r7,r10
    5bdc:	000d3540 	call	d354 <__divdf3>
    5be0:	1029883a 	mov	r20,r2
    5be4:	182b883a 	mov	r21,r3
    5be8:	d9800c17 	ldw	r6,48(sp)
    5bec:	30000626 	beq	r6,zero,5c08 <_dtoa_r+0x478>
    5bf0:	a009883a 	mov	r4,r20
    5bf4:	a80b883a 	mov	r5,r21
    5bf8:	000d883a 	mov	r6,zero
    5bfc:	01cffc34 	movhi	r7,16368
    5c00:	000de380 	call	de38 <__ledf2>
    5c04:	10043216 	blt	r2,zero,6cd0 <_dtoa_r+0x1540>
    5c08:	8809883a 	mov	r4,r17
    5c0c:	000f0dc0 	call	f0dc <__floatsidf>
    5c10:	1009883a 	mov	r4,r2
    5c14:	180b883a 	mov	r5,r3
    5c18:	a00d883a 	mov	r6,r20
    5c1c:	a80f883a 	mov	r7,r21
    5c20:	000df180 	call	df18 <__muldf3>
    5c24:	000d883a 	mov	r6,zero
    5c28:	1009883a 	mov	r4,r2
    5c2c:	180b883a 	mov	r5,r3
    5c30:	01d00734 	movhi	r7,16412
    5c34:	000cab80 	call	cab8 <__adddf3>
    5c38:	1023883a 	mov	r17,r2
    5c3c:	d9800617 	ldw	r6,24(sp)
    5c40:	00bf3034 	movhi	r2,64704
    5c44:	1885883a 	add	r2,r3,r2
    5c48:	d8800e15 	stw	r2,56(sp)
    5c4c:	30032e26 	beq	r6,zero,6908 <_dtoa_r+0x1178>
    5c50:	d8c00517 	ldw	r3,20(sp)
    5c54:	da800617 	ldw	r10,24(sp)
    5c58:	d8c01215 	stw	r3,72(sp)
    5c5c:	d9000b17 	ldw	r4,44(sp)
    5c60:	2003b026 	beq	r4,zero,6b24 <_dtoa_r+0x1394>
    5c64:	50bfffc4 	addi	r2,r10,-1
    5c68:	100490fa 	slli	r2,r2,3
    5c6c:	00c00074 	movhi	r3,1
    5c70:	18c8e404 	addi	r3,r3,9104
    5c74:	1885883a 	add	r2,r3,r2
    5c78:	11800017 	ldw	r6,0(r2)
    5c7c:	11c00117 	ldw	r7,4(r2)
    5c80:	d8800717 	ldw	r2,28(sp)
    5c84:	0009883a 	mov	r4,zero
    5c88:	014ff834 	movhi	r5,16352
    5c8c:	da801615 	stw	r10,88(sp)
    5c90:	15c00044 	addi	r23,r2,1
    5c94:	000d3540 	call	d354 <__divdf3>
    5c98:	d9c00e17 	ldw	r7,56(sp)
    5c9c:	880d883a 	mov	r6,r17
    5ca0:	1009883a 	mov	r4,r2
    5ca4:	180b883a 	mov	r5,r3
    5ca8:	000e7840 	call	e784 <__subdf3>
    5cac:	a80b883a 	mov	r5,r21
    5cb0:	a009883a 	mov	r4,r20
    5cb4:	d8c01015 	stw	r3,64(sp)
    5cb8:	d8800e15 	stw	r2,56(sp)
    5cbc:	000f0540 	call	f054 <__fixdfsi>
    5cc0:	1009883a 	mov	r4,r2
    5cc4:	d8801715 	stw	r2,92(sp)
    5cc8:	000f0dc0 	call	f0dc <__floatsidf>
    5ccc:	a009883a 	mov	r4,r20
    5cd0:	a80b883a 	mov	r5,r21
    5cd4:	100d883a 	mov	r6,r2
    5cd8:	180f883a 	mov	r7,r3
    5cdc:	000e7840 	call	e784 <__subdf3>
    5ce0:	da001717 	ldw	r8,92(sp)
    5ce4:	1829883a 	mov	r20,r3
    5ce8:	d8c00717 	ldw	r3,28(sp)
    5cec:	d9000e17 	ldw	r4,56(sp)
    5cf0:	d9401017 	ldw	r5,64(sp)
    5cf4:	42000c04 	addi	r8,r8,48
    5cf8:	1023883a 	mov	r17,r2
    5cfc:	1a000005 	stb	r8,0(r3)
    5d00:	880d883a 	mov	r6,r17
    5d04:	a00f883a 	mov	r7,r20
    5d08:	402b883a 	mov	r21,r8
    5d0c:	000dd580 	call	dd58 <__gedf2>
    5d10:	00844516 	blt	zero,r2,6e28 <_dtoa_r+0x1698>
    5d14:	0009883a 	mov	r4,zero
    5d18:	014ffc34 	movhi	r5,16368
    5d1c:	880d883a 	mov	r6,r17
    5d20:	a00f883a 	mov	r7,r20
    5d24:	000e7840 	call	e784 <__subdf3>
    5d28:	d9000e17 	ldw	r4,56(sp)
    5d2c:	d9401017 	ldw	r5,64(sp)
    5d30:	100d883a 	mov	r6,r2
    5d34:	180f883a 	mov	r7,r3
    5d38:	000dd580 	call	dd58 <__gedf2>
    5d3c:	da801617 	ldw	r10,88(sp)
    5d40:	00843616 	blt	zero,r2,6e1c <_dtoa_r+0x168c>
    5d44:	00800044 	movi	r2,1
    5d48:	12806e0e 	bge	r2,r10,5f04 <_dtoa_r+0x774>
    5d4c:	d9000717 	ldw	r4,28(sp)
    5d50:	dd801315 	stw	r22,76(sp)
    5d54:	dc001115 	stw	r16,68(sp)
    5d58:	2295883a 	add	r10,r4,r10
    5d5c:	dcc01415 	stw	r19,80(sp)
    5d60:	502d883a 	mov	r22,r10
    5d64:	dcc01017 	ldw	r19,64(sp)
    5d68:	b821883a 	mov	r16,r23
    5d6c:	dc801015 	stw	r18,64(sp)
    5d70:	dc800e17 	ldw	r18,56(sp)
    5d74:	00000906 	br	5d9c <_dtoa_r+0x60c>
    5d78:	000e7840 	call	e784 <__subdf3>
    5d7c:	1009883a 	mov	r4,r2
    5d80:	180b883a 	mov	r5,r3
    5d84:	900d883a 	mov	r6,r18
    5d88:	980f883a 	mov	r7,r19
    5d8c:	000de380 	call	de38 <__ledf2>
    5d90:	10040e16 	blt	r2,zero,6dcc <_dtoa_r+0x163c>
    5d94:	b821883a 	mov	r16,r23
    5d98:	bd841026 	beq	r23,r22,6ddc <_dtoa_r+0x164c>
    5d9c:	9009883a 	mov	r4,r18
    5da0:	980b883a 	mov	r5,r19
    5da4:	000d883a 	mov	r6,zero
    5da8:	01d00934 	movhi	r7,16420
    5dac:	000df180 	call	df18 <__muldf3>
    5db0:	000d883a 	mov	r6,zero
    5db4:	01d00934 	movhi	r7,16420
    5db8:	8809883a 	mov	r4,r17
    5dbc:	a00b883a 	mov	r5,r20
    5dc0:	1025883a 	mov	r18,r2
    5dc4:	1827883a 	mov	r19,r3
    5dc8:	000df180 	call	df18 <__muldf3>
    5dcc:	180b883a 	mov	r5,r3
    5dd0:	1009883a 	mov	r4,r2
    5dd4:	1823883a 	mov	r17,r3
    5dd8:	1029883a 	mov	r20,r2
    5ddc:	000f0540 	call	f054 <__fixdfsi>
    5de0:	1009883a 	mov	r4,r2
    5de4:	102b883a 	mov	r21,r2
    5de8:	000f0dc0 	call	f0dc <__floatsidf>
    5dec:	a009883a 	mov	r4,r20
    5df0:	880b883a 	mov	r5,r17
    5df4:	100d883a 	mov	r6,r2
    5df8:	180f883a 	mov	r7,r3
    5dfc:	000e7840 	call	e784 <__subdf3>
    5e00:	ad400c04 	addi	r21,r21,48
    5e04:	1009883a 	mov	r4,r2
    5e08:	180b883a 	mov	r5,r3
    5e0c:	900d883a 	mov	r6,r18
    5e10:	980f883a 	mov	r7,r19
    5e14:	85400005 	stb	r21,0(r16)
    5e18:	1023883a 	mov	r17,r2
    5e1c:	1829883a 	mov	r20,r3
    5e20:	000de380 	call	de38 <__ledf2>
    5e24:	bdc00044 	addi	r23,r23,1
    5e28:	0009883a 	mov	r4,zero
    5e2c:	014ffc34 	movhi	r5,16368
    5e30:	880d883a 	mov	r6,r17
    5e34:	a00f883a 	mov	r7,r20
    5e38:	103fcf0e 	bge	r2,zero,5d78 <__alt_data_end+0xfffb0648>
    5e3c:	d9801217 	ldw	r6,72(sp)
    5e40:	dc001117 	ldw	r16,68(sp)
    5e44:	d9800515 	stw	r6,20(sp)
    5e48:	8009883a 	mov	r4,r16
    5e4c:	e00b883a 	mov	r5,fp
    5e50:	00086cc0 	call	86cc <_Bfree>
    5e54:	d8c00517 	ldw	r3,20(sp)
    5e58:	d9002317 	ldw	r4,140(sp)
    5e5c:	d9802517 	ldw	r6,148(sp)
    5e60:	b8000005 	stb	zero,0(r23)
    5e64:	18800044 	addi	r2,r3,1
    5e68:	20800015 	stw	r2,0(r4)
    5e6c:	30027226 	beq	r6,zero,6838 <_dtoa_r+0x10a8>
    5e70:	35c00015 	stw	r23,0(r6)
    5e74:	d8800717 	ldw	r2,28(sp)
    5e78:	003e7406 	br	584c <__alt_data_end+0xfffb011c>
    5e7c:	00800434 	movhi	r2,16
    5e80:	10bfffc4 	addi	r2,r2,-1
    5e84:	a8aa703a 	and	r21,r21,r2
    5e88:	a83e801e 	bne	r21,zero,588c <__alt_data_end+0xfffb015c>
    5e8c:	00800074 	movhi	r2,1
    5e90:	1088c504 	addi	r2,r2,8980
    5e94:	003e7f06 	br	5894 <__alt_data_end+0xfffb0164>
    5e98:	10c00204 	addi	r3,r2,8
    5e9c:	003e8206 	br	58a8 <__alt_data_end+0xfffb0178>
    5ea0:	01400434 	movhi	r5,16
    5ea4:	297fffc4 	addi	r5,r5,-1
    5ea8:	994a703a 	and	r5,r19,r5
    5eac:	9009883a 	mov	r4,r18
    5eb0:	8c7f0044 	addi	r17,r17,-1023
    5eb4:	294ffc34 	orhi	r5,r5,16368
    5eb8:	dd000217 	ldw	r20,8(sp)
    5ebc:	d8000f15 	stw	zero,60(sp)
    5ec0:	003e9f06 	br	5940 <__alt_data_end+0xfffb0210>
    5ec4:	00800074 	movhi	r2,1
    5ec8:	1088bc04 	addi	r2,r2,8944
    5ecc:	003e5f06 	br	584c <__alt_data_end+0xfffb011c>
    5ed0:	80001115 	stw	zero,68(r16)
    5ed4:	8009883a 	mov	r4,r16
    5ed8:	000b883a 	mov	r5,zero
    5edc:	00086240 	call	8624 <_Balloc>
    5ee0:	01bfffc4 	movi	r6,-1
    5ee4:	d8800715 	stw	r2,28(sp)
    5ee8:	80801015 	stw	r2,64(r16)
    5eec:	00800044 	movi	r2,1
    5ef0:	d9800615 	stw	r6,24(sp)
    5ef4:	d8800b15 	stw	r2,44(sp)
    5ef8:	d8002215 	stw	zero,136(sp)
    5efc:	d9800d15 	stw	r6,52(sp)
    5f00:	d8000315 	stw	zero,12(sp)
    5f04:	d8800117 	ldw	r2,4(sp)
    5f08:	10008e16 	blt	r2,zero,6144 <_dtoa_r+0x9b4>
    5f0c:	d9000517 	ldw	r4,20(sp)
    5f10:	00c00384 	movi	r3,14
    5f14:	19008b16 	blt	r3,r4,6144 <_dtoa_r+0x9b4>
    5f18:	200490fa 	slli	r2,r4,3
    5f1c:	00c00074 	movhi	r3,1
    5f20:	d9802217 	ldw	r6,136(sp)
    5f24:	18c8e404 	addi	r3,r3,9104
    5f28:	1885883a 	add	r2,r3,r2
    5f2c:	14400017 	ldw	r17,0(r2)
    5f30:	15000117 	ldw	r20,4(r2)
    5f34:	3001c716 	blt	r6,zero,6654 <_dtoa_r+0xec4>
    5f38:	880d883a 	mov	r6,r17
    5f3c:	a00f883a 	mov	r7,r20
    5f40:	9009883a 	mov	r4,r18
    5f44:	980b883a 	mov	r5,r19
    5f48:	000d3540 	call	d354 <__divdf3>
    5f4c:	180b883a 	mov	r5,r3
    5f50:	1009883a 	mov	r4,r2
    5f54:	000f0540 	call	f054 <__fixdfsi>
    5f58:	1009883a 	mov	r4,r2
    5f5c:	102d883a 	mov	r22,r2
    5f60:	000f0dc0 	call	f0dc <__floatsidf>
    5f64:	1009883a 	mov	r4,r2
    5f68:	180b883a 	mov	r5,r3
    5f6c:	880d883a 	mov	r6,r17
    5f70:	a00f883a 	mov	r7,r20
    5f74:	000df180 	call	df18 <__muldf3>
    5f78:	9009883a 	mov	r4,r18
    5f7c:	980b883a 	mov	r5,r19
    5f80:	100d883a 	mov	r6,r2
    5f84:	180f883a 	mov	r7,r3
    5f88:	000e7840 	call	e784 <__subdf3>
    5f8c:	d9000717 	ldw	r4,28(sp)
    5f90:	d9800617 	ldw	r6,24(sp)
    5f94:	180b883a 	mov	r5,r3
    5f98:	b0c00c04 	addi	r3,r22,48
    5f9c:	20c00005 	stb	r3,0(r4)
    5fa0:	25c00044 	addi	r23,r4,1
    5fa4:	01000044 	movi	r4,1
    5fa8:	1011883a 	mov	r8,r2
    5fac:	2807883a 	mov	r3,r5
    5fb0:	31003d26 	beq	r6,r4,60a8 <_dtoa_r+0x918>
    5fb4:	000d883a 	mov	r6,zero
    5fb8:	01d00934 	movhi	r7,16420
    5fbc:	1009883a 	mov	r4,r2
    5fc0:	000df180 	call	df18 <__muldf3>
    5fc4:	1009883a 	mov	r4,r2
    5fc8:	180b883a 	mov	r5,r3
    5fcc:	000d883a 	mov	r6,zero
    5fd0:	000f883a 	mov	r7,zero
    5fd4:	1027883a 	mov	r19,r2
    5fd8:	182b883a 	mov	r21,r3
    5fdc:	000dcd40 	call	dcd4 <__eqdf2>
    5fe0:	103f9926 	beq	r2,zero,5e48 <__alt_data_end+0xfffb0718>
    5fe4:	d8c00617 	ldw	r3,24(sp)
    5fe8:	d9000717 	ldw	r4,28(sp)
    5fec:	b825883a 	mov	r18,r23
    5ff0:	18bfffc4 	addi	r2,r3,-1
    5ff4:	20ad883a 	add	r22,r4,r2
    5ff8:	dc000315 	stw	r16,12(sp)
    5ffc:	00000a06 	br	6028 <_dtoa_r+0x898>
    6000:	000df180 	call	df18 <__muldf3>
    6004:	1009883a 	mov	r4,r2
    6008:	180b883a 	mov	r5,r3
    600c:	000d883a 	mov	r6,zero
    6010:	000f883a 	mov	r7,zero
    6014:	1027883a 	mov	r19,r2
    6018:	182b883a 	mov	r21,r3
    601c:	b825883a 	mov	r18,r23
    6020:	000dcd40 	call	dcd4 <__eqdf2>
    6024:	10022626 	beq	r2,zero,68c0 <_dtoa_r+0x1130>
    6028:	880d883a 	mov	r6,r17
    602c:	a00f883a 	mov	r7,r20
    6030:	9809883a 	mov	r4,r19
    6034:	a80b883a 	mov	r5,r21
    6038:	000d3540 	call	d354 <__divdf3>
    603c:	180b883a 	mov	r5,r3
    6040:	1009883a 	mov	r4,r2
    6044:	000f0540 	call	f054 <__fixdfsi>
    6048:	1009883a 	mov	r4,r2
    604c:	1021883a 	mov	r16,r2
    6050:	000f0dc0 	call	f0dc <__floatsidf>
    6054:	1009883a 	mov	r4,r2
    6058:	180b883a 	mov	r5,r3
    605c:	880d883a 	mov	r6,r17
    6060:	a00f883a 	mov	r7,r20
    6064:	000df180 	call	df18 <__muldf3>
    6068:	9809883a 	mov	r4,r19
    606c:	a80b883a 	mov	r5,r21
    6070:	100d883a 	mov	r6,r2
    6074:	180f883a 	mov	r7,r3
    6078:	000e7840 	call	e784 <__subdf3>
    607c:	82000c04 	addi	r8,r16,48
    6080:	92000005 	stb	r8,0(r18)
    6084:	1009883a 	mov	r4,r2
    6088:	180b883a 	mov	r5,r3
    608c:	000d883a 	mov	r6,zero
    6090:	01d00934 	movhi	r7,16420
    6094:	1011883a 	mov	r8,r2
    6098:	bdc00044 	addi	r23,r23,1
    609c:	95bfd81e 	bne	r18,r22,6000 <__alt_data_end+0xfffb08d0>
    60a0:	802d883a 	mov	r22,r16
    60a4:	dc000317 	ldw	r16,12(sp)
    60a8:	4009883a 	mov	r4,r8
    60ac:	180b883a 	mov	r5,r3
    60b0:	400d883a 	mov	r6,r8
    60b4:	180f883a 	mov	r7,r3
    60b8:	000cab80 	call	cab8 <__adddf3>
    60bc:	8809883a 	mov	r4,r17
    60c0:	a00b883a 	mov	r5,r20
    60c4:	100d883a 	mov	r6,r2
    60c8:	180f883a 	mov	r7,r3
    60cc:	1027883a 	mov	r19,r2
    60d0:	1825883a 	mov	r18,r3
    60d4:	000de380 	call	de38 <__ledf2>
    60d8:	10000816 	blt	r2,zero,60fc <_dtoa_r+0x96c>
    60dc:	8809883a 	mov	r4,r17
    60e0:	a00b883a 	mov	r5,r20
    60e4:	980d883a 	mov	r6,r19
    60e8:	900f883a 	mov	r7,r18
    60ec:	000dcd40 	call	dcd4 <__eqdf2>
    60f0:	103f551e 	bne	r2,zero,5e48 <__alt_data_end+0xfffb0718>
    60f4:	b580004c 	andi	r22,r22,1
    60f8:	b03f5326 	beq	r22,zero,5e48 <__alt_data_end+0xfffb0718>
    60fc:	bd7fffc3 	ldbu	r21,-1(r23)
    6100:	b8bfffc4 	addi	r2,r23,-1
    6104:	1007883a 	mov	r3,r2
    6108:	01400e44 	movi	r5,57
    610c:	d9800717 	ldw	r6,28(sp)
    6110:	00000506 	br	6128 <_dtoa_r+0x998>
    6114:	18ffffc4 	addi	r3,r3,-1
    6118:	30825e26 	beq	r6,r2,6a94 <_dtoa_r+0x1304>
    611c:	1d400003 	ldbu	r21,0(r3)
    6120:	102f883a 	mov	r23,r2
    6124:	10bfffc4 	addi	r2,r2,-1
    6128:	a9003fcc 	andi	r4,r21,255
    612c:	2100201c 	xori	r4,r4,128
    6130:	213fe004 	addi	r4,r4,-128
    6134:	217ff726 	beq	r4,r5,6114 <__alt_data_end+0xfffb09e4>
    6138:	aa000044 	addi	r8,r21,1
    613c:	12000005 	stb	r8,0(r2)
    6140:	003f4106 	br	5e48 <__alt_data_end+0xfffb0718>
    6144:	d8c00b17 	ldw	r3,44(sp)
    6148:	18006726 	beq	r3,zero,62e8 <_dtoa_r+0xb58>
    614c:	d9000317 	ldw	r4,12(sp)
    6150:	00c00044 	movi	r3,1
    6154:	19016a0e 	bge	r3,r4,6700 <_dtoa_r+0xf70>
    6158:	d8800617 	ldw	r2,24(sp)
    615c:	d8c00917 	ldw	r3,36(sp)
    6160:	157fffc4 	addi	r21,r2,-1
    6164:	1d420716 	blt	r3,r21,6984 <_dtoa_r+0x11f4>
    6168:	1d6bc83a 	sub	r21,r3,r21
    616c:	d8800617 	ldw	r2,24(sp)
    6170:	1002c716 	blt	r2,zero,6c90 <_dtoa_r+0x1500>
    6174:	dd000817 	ldw	r20,32(sp)
    6178:	d8800617 	ldw	r2,24(sp)
    617c:	d9800817 	ldw	r6,32(sp)
    6180:	8009883a 	mov	r4,r16
    6184:	01400044 	movi	r5,1
    6188:	308d883a 	add	r6,r6,r2
    618c:	d9800815 	stw	r6,32(sp)
    6190:	b0ad883a 	add	r22,r22,r2
    6194:	0008a4c0 	call	8a4c <__i2b>
    6198:	1023883a 	mov	r17,r2
    619c:	a0000826 	beq	r20,zero,61c0 <_dtoa_r+0xa30>
    61a0:	0580070e 	bge	zero,r22,61c0 <_dtoa_r+0xa30>
    61a4:	b005883a 	mov	r2,r22
    61a8:	a5812016 	blt	r20,r22,662c <_dtoa_r+0xe9c>
    61ac:	d8c00817 	ldw	r3,32(sp)
    61b0:	a0a9c83a 	sub	r20,r20,r2
    61b4:	b0adc83a 	sub	r22,r22,r2
    61b8:	1887c83a 	sub	r3,r3,r2
    61bc:	d8c00815 	stw	r3,32(sp)
    61c0:	d9000917 	ldw	r4,36(sp)
    61c4:	0100140e 	bge	zero,r4,6218 <_dtoa_r+0xa88>
    61c8:	d9800b17 	ldw	r6,44(sp)
    61cc:	3001e526 	beq	r6,zero,6964 <_dtoa_r+0x11d4>
    61d0:	05400e0e 	bge	zero,r21,620c <_dtoa_r+0xa7c>
    61d4:	880b883a 	mov	r5,r17
    61d8:	8009883a 	mov	r4,r16
    61dc:	a80d883a 	mov	r6,r21
    61e0:	0008d180 	call	8d18 <__pow5mult>
    61e4:	e00d883a 	mov	r6,fp
    61e8:	8009883a 	mov	r4,r16
    61ec:	100b883a 	mov	r5,r2
    61f0:	1023883a 	mov	r17,r2
    61f4:	0008a880 	call	8a88 <__multiply>
    61f8:	102f883a 	mov	r23,r2
    61fc:	e00b883a 	mov	r5,fp
    6200:	8009883a 	mov	r4,r16
    6204:	00086cc0 	call	86cc <_Bfree>
    6208:	b839883a 	mov	fp,r23
    620c:	d8800917 	ldw	r2,36(sp)
    6210:	154dc83a 	sub	r6,r2,r21
    6214:	3001281e 	bne	r6,zero,66b8 <_dtoa_r+0xf28>
    6218:	05c00044 	movi	r23,1
    621c:	8009883a 	mov	r4,r16
    6220:	b80b883a 	mov	r5,r23
    6224:	0008a4c0 	call	8a4c <__i2b>
    6228:	d8c00a17 	ldw	r3,40(sp)
    622c:	102b883a 	mov	r21,r2
    6230:	00c0310e 	bge	zero,r3,62f8 <_dtoa_r+0xb68>
    6234:	8009883a 	mov	r4,r16
    6238:	100b883a 	mov	r5,r2
    623c:	180d883a 	mov	r6,r3
    6240:	0008d180 	call	8d18 <__pow5mult>
    6244:	d9000317 	ldw	r4,12(sp)
    6248:	102b883a 	mov	r21,r2
    624c:	b9011f0e 	bge	r23,r4,66cc <_dtoa_r+0xf3c>
    6250:	0027883a 	mov	r19,zero
    6254:	a8800417 	ldw	r2,16(r21)
    6258:	10800104 	addi	r2,r2,4
    625c:	1085883a 	add	r2,r2,r2
    6260:	1085883a 	add	r2,r2,r2
    6264:	a885883a 	add	r2,r21,r2
    6268:	11000017 	ldw	r4,0(r2)
    626c:	00089340 	call	8934 <__hi0bits>
    6270:	00c00804 	movi	r3,32
    6274:	1885c83a 	sub	r2,r3,r2
    6278:	00002506 	br	6310 <_dtoa_r+0xb80>
    627c:	01800044 	movi	r6,1
    6280:	d9800c15 	stw	r6,48(sp)
    6284:	003dec06 	br	5a38 <__alt_data_end+0xfffb0308>
    6288:	d8c00817 	ldw	r3,32(sp)
    628c:	d9000517 	ldw	r4,20(sp)
    6290:	d8000a15 	stw	zero,40(sp)
    6294:	1907c83a 	sub	r3,r3,r4
    6298:	010dc83a 	sub	r6,zero,r4
    629c:	d8c00815 	stw	r3,32(sp)
    62a0:	d9800915 	stw	r6,36(sp)
    62a4:	003ded06 	br	5a5c <__alt_data_end+0xfffb032c>
    62a8:	05adc83a 	sub	r22,zero,r22
    62ac:	dd800815 	stw	r22,32(sp)
    62b0:	002d883a 	mov	r22,zero
    62b4:	003de406 	br	5a48 <__alt_data_end+0xfffb0318>
    62b8:	d9000517 	ldw	r4,20(sp)
    62bc:	000f0dc0 	call	f0dc <__floatsidf>
    62c0:	1009883a 	mov	r4,r2
    62c4:	180b883a 	mov	r5,r3
    62c8:	b00d883a 	mov	r6,r22
    62cc:	a80f883a 	mov	r7,r21
    62d0:	000dcd40 	call	dcd4 <__eqdf2>
    62d4:	103dc726 	beq	r2,zero,59f4 <__alt_data_end+0xfffb02c4>
    62d8:	d8800517 	ldw	r2,20(sp)
    62dc:	10bfffc4 	addi	r2,r2,-1
    62e0:	d8800515 	stw	r2,20(sp)
    62e4:	003dc306 	br	59f4 <__alt_data_end+0xfffb02c4>
    62e8:	dd400917 	ldw	r21,36(sp)
    62ec:	dd000817 	ldw	r20,32(sp)
    62f0:	0023883a 	mov	r17,zero
    62f4:	003fa906 	br	619c <__alt_data_end+0xfffb0a6c>
    62f8:	d9800317 	ldw	r6,12(sp)
    62fc:	b981670e 	bge	r23,r6,689c <_dtoa_r+0x110c>
    6300:	0027883a 	mov	r19,zero
    6304:	d8c00a17 	ldw	r3,40(sp)
    6308:	183fd21e 	bne	r3,zero,6254 <__alt_data_end+0xfffb0b24>
    630c:	00800044 	movi	r2,1
    6310:	1585883a 	add	r2,r2,r22
    6314:	108007cc 	andi	r2,r2,31
    6318:	10005f26 	beq	r2,zero,6498 <_dtoa_r+0xd08>
    631c:	00c00804 	movi	r3,32
    6320:	1887c83a 	sub	r3,r3,r2
    6324:	01000104 	movi	r4,4
    6328:	20c2dd0e 	bge	r4,r3,6ea0 <_dtoa_r+0x1710>
    632c:	d9000817 	ldw	r4,32(sp)
    6330:	00c00704 	movi	r3,28
    6334:	1885c83a 	sub	r2,r3,r2
    6338:	2089883a 	add	r4,r4,r2
    633c:	d9000815 	stw	r4,32(sp)
    6340:	a0a9883a 	add	r20,r20,r2
    6344:	b0ad883a 	add	r22,r22,r2
    6348:	d8800817 	ldw	r2,32(sp)
    634c:	0080050e 	bge	zero,r2,6364 <_dtoa_r+0xbd4>
    6350:	e00b883a 	mov	r5,fp
    6354:	8009883a 	mov	r4,r16
    6358:	100d883a 	mov	r6,r2
    635c:	0008e580 	call	8e58 <__lshift>
    6360:	1039883a 	mov	fp,r2
    6364:	0580050e 	bge	zero,r22,637c <_dtoa_r+0xbec>
    6368:	a80b883a 	mov	r5,r21
    636c:	8009883a 	mov	r4,r16
    6370:	b00d883a 	mov	r6,r22
    6374:	0008e580 	call	8e58 <__lshift>
    6378:	102b883a 	mov	r21,r2
    637c:	d8c00c17 	ldw	r3,48(sp)
    6380:	1801161e 	bne	r3,zero,67dc <_dtoa_r+0x104c>
    6384:	d8c00617 	ldw	r3,24(sp)
    6388:	00c12d0e 	bge	zero,r3,6840 <_dtoa_r+0x10b0>
    638c:	d8c00b17 	ldw	r3,44(sp)
    6390:	1800571e 	bne	r3,zero,64f0 <_dtoa_r+0xd60>
    6394:	dc800717 	ldw	r18,28(sp)
    6398:	dcc00617 	ldw	r19,24(sp)
    639c:	9029883a 	mov	r20,r18
    63a0:	00000206 	br	63ac <_dtoa_r+0xc1c>
    63a4:	00086f40 	call	86f4 <__multadd>
    63a8:	1039883a 	mov	fp,r2
    63ac:	e009883a 	mov	r4,fp
    63b0:	a80b883a 	mov	r5,r21
    63b4:	00055680 	call	5568 <quorem>
    63b8:	10800c04 	addi	r2,r2,48
    63bc:	90800005 	stb	r2,0(r18)
    63c0:	94800044 	addi	r18,r18,1
    63c4:	9507c83a 	sub	r3,r18,r20
    63c8:	8009883a 	mov	r4,r16
    63cc:	e00b883a 	mov	r5,fp
    63d0:	01800284 	movi	r6,10
    63d4:	000f883a 	mov	r7,zero
    63d8:	1cfff216 	blt	r3,r19,63a4 <__alt_data_end+0xfffb0c74>
    63dc:	1011883a 	mov	r8,r2
    63e0:	d8800617 	ldw	r2,24(sp)
    63e4:	00822e0e 	bge	zero,r2,6ca0 <_dtoa_r+0x1510>
    63e8:	d9000717 	ldw	r4,28(sp)
    63ec:	0025883a 	mov	r18,zero
    63f0:	20af883a 	add	r23,r4,r2
    63f4:	e00b883a 	mov	r5,fp
    63f8:	01800044 	movi	r6,1
    63fc:	8009883a 	mov	r4,r16
    6400:	da001715 	stw	r8,92(sp)
    6404:	0008e580 	call	8e58 <__lshift>
    6408:	1009883a 	mov	r4,r2
    640c:	a80b883a 	mov	r5,r21
    6410:	1039883a 	mov	fp,r2
    6414:	0008fa00 	call	8fa0 <__mcmp>
    6418:	da001717 	ldw	r8,92(sp)
    641c:	00816e0e 	bge	zero,r2,69d8 <_dtoa_r+0x1248>
    6420:	b93fffc3 	ldbu	r4,-1(r23)
    6424:	b8bfffc4 	addi	r2,r23,-1
    6428:	1007883a 	mov	r3,r2
    642c:	01800e44 	movi	r6,57
    6430:	d9c00717 	ldw	r7,28(sp)
    6434:	00000506 	br	644c <_dtoa_r+0xcbc>
    6438:	18ffffc4 	addi	r3,r3,-1
    643c:	38811926 	beq	r7,r2,68a4 <_dtoa_r+0x1114>
    6440:	19000003 	ldbu	r4,0(r3)
    6444:	102f883a 	mov	r23,r2
    6448:	10bfffc4 	addi	r2,r2,-1
    644c:	21403fcc 	andi	r5,r4,255
    6450:	2940201c 	xori	r5,r5,128
    6454:	297fe004 	addi	r5,r5,-128
    6458:	29bff726 	beq	r5,r6,6438 <__alt_data_end+0xfffb0d08>
    645c:	21000044 	addi	r4,r4,1
    6460:	11000005 	stb	r4,0(r2)
    6464:	8009883a 	mov	r4,r16
    6468:	a80b883a 	mov	r5,r21
    646c:	00086cc0 	call	86cc <_Bfree>
    6470:	883e7526 	beq	r17,zero,5e48 <__alt_data_end+0xfffb0718>
    6474:	90000426 	beq	r18,zero,6488 <_dtoa_r+0xcf8>
    6478:	94400326 	beq	r18,r17,6488 <_dtoa_r+0xcf8>
    647c:	8009883a 	mov	r4,r16
    6480:	900b883a 	mov	r5,r18
    6484:	00086cc0 	call	86cc <_Bfree>
    6488:	8009883a 	mov	r4,r16
    648c:	880b883a 	mov	r5,r17
    6490:	00086cc0 	call	86cc <_Bfree>
    6494:	003e6c06 	br	5e48 <__alt_data_end+0xfffb0718>
    6498:	00800704 	movi	r2,28
    649c:	d9800817 	ldw	r6,32(sp)
    64a0:	a0a9883a 	add	r20,r20,r2
    64a4:	b0ad883a 	add	r22,r22,r2
    64a8:	308d883a 	add	r6,r6,r2
    64ac:	d9800815 	stw	r6,32(sp)
    64b0:	003fa506 	br	6348 <__alt_data_end+0xfffb0c18>
    64b4:	013efb84 	movi	r4,-1042
    64b8:	246bc83a 	sub	r21,r4,r17
    64bc:	9548983a 	sll	r4,r18,r21
    64c0:	003d1806 	br	5924 <__alt_data_end+0xfffb01f4>
    64c4:	d8000c15 	stw	zero,48(sp)
    64c8:	003d5b06 	br	5a38 <__alt_data_end+0xfffb0308>
    64cc:	880b883a 	mov	r5,r17
    64d0:	8009883a 	mov	r4,r16
    64d4:	01800284 	movi	r6,10
    64d8:	000f883a 	mov	r7,zero
    64dc:	00086f40 	call	86f4 <__multadd>
    64e0:	1023883a 	mov	r17,r2
    64e4:	d8800d17 	ldw	r2,52(sp)
    64e8:	0082550e 	bge	zero,r2,6e40 <_dtoa_r+0x16b0>
    64ec:	d8800615 	stw	r2,24(sp)
    64f0:	0500050e 	bge	zero,r20,6508 <_dtoa_r+0xd78>
    64f4:	880b883a 	mov	r5,r17
    64f8:	8009883a 	mov	r4,r16
    64fc:	a00d883a 	mov	r6,r20
    6500:	0008e580 	call	8e58 <__lshift>
    6504:	1023883a 	mov	r17,r2
    6508:	98016a1e 	bne	r19,zero,6ab4 <_dtoa_r+0x1324>
    650c:	8829883a 	mov	r20,r17
    6510:	d9000617 	ldw	r4,24(sp)
    6514:	dcc00717 	ldw	r19,28(sp)
    6518:	9480004c 	andi	r18,r18,1
    651c:	20bfffc4 	addi	r2,r4,-1
    6520:	9885883a 	add	r2,r19,r2
    6524:	d8800415 	stw	r2,16(sp)
    6528:	dc800615 	stw	r18,24(sp)
    652c:	e009883a 	mov	r4,fp
    6530:	a80b883a 	mov	r5,r21
    6534:	00055680 	call	5568 <quorem>
    6538:	e009883a 	mov	r4,fp
    653c:	880b883a 	mov	r5,r17
    6540:	102f883a 	mov	r23,r2
    6544:	0008fa00 	call	8fa0 <__mcmp>
    6548:	8009883a 	mov	r4,r16
    654c:	a80b883a 	mov	r5,r21
    6550:	a00d883a 	mov	r6,r20
    6554:	102d883a 	mov	r22,r2
    6558:	00090000 	call	9000 <__mdiff>
    655c:	1007883a 	mov	r3,r2
    6560:	10800317 	ldw	r2,12(r2)
    6564:	bc800c04 	addi	r18,r23,48
    6568:	1000971e 	bne	r2,zero,67c8 <_dtoa_r+0x1038>
    656c:	180b883a 	mov	r5,r3
    6570:	e009883a 	mov	r4,fp
    6574:	d8c01515 	stw	r3,84(sp)
    6578:	0008fa00 	call	8fa0 <__mcmp>
    657c:	d8c01517 	ldw	r3,84(sp)
    6580:	8009883a 	mov	r4,r16
    6584:	d8801515 	stw	r2,84(sp)
    6588:	180b883a 	mov	r5,r3
    658c:	00086cc0 	call	86cc <_Bfree>
    6590:	d8801517 	ldw	r2,84(sp)
    6594:	1000041e 	bne	r2,zero,65a8 <_dtoa_r+0xe18>
    6598:	d9800317 	ldw	r6,12(sp)
    659c:	3000021e 	bne	r6,zero,65a8 <_dtoa_r+0xe18>
    65a0:	d8c00617 	ldw	r3,24(sp)
    65a4:	18007626 	beq	r3,zero,6780 <_dtoa_r+0xff0>
    65a8:	b0005b16 	blt	r22,zero,6718 <_dtoa_r+0xf88>
    65ac:	b000041e 	bne	r22,zero,65c0 <_dtoa_r+0xe30>
    65b0:	d9000317 	ldw	r4,12(sp)
    65b4:	2000021e 	bne	r4,zero,65c0 <_dtoa_r+0xe30>
    65b8:	d8c00617 	ldw	r3,24(sp)
    65bc:	18005626 	beq	r3,zero,6718 <_dtoa_r+0xf88>
    65c0:	00814d16 	blt	zero,r2,6af8 <_dtoa_r+0x1368>
    65c4:	d8c00417 	ldw	r3,16(sp)
    65c8:	9d800044 	addi	r22,r19,1
    65cc:	9c800005 	stb	r18,0(r19)
    65d0:	b02f883a 	mov	r23,r22
    65d4:	98c14c26 	beq	r19,r3,6b08 <_dtoa_r+0x1378>
    65d8:	e00b883a 	mov	r5,fp
    65dc:	8009883a 	mov	r4,r16
    65e0:	01800284 	movi	r6,10
    65e4:	000f883a 	mov	r7,zero
    65e8:	00086f40 	call	86f4 <__multadd>
    65ec:	1039883a 	mov	fp,r2
    65f0:	8d006d26 	beq	r17,r20,67a8 <_dtoa_r+0x1018>
    65f4:	880b883a 	mov	r5,r17
    65f8:	01800284 	movi	r6,10
    65fc:	000f883a 	mov	r7,zero
    6600:	8009883a 	mov	r4,r16
    6604:	00086f40 	call	86f4 <__multadd>
    6608:	a00b883a 	mov	r5,r20
    660c:	8009883a 	mov	r4,r16
    6610:	01800284 	movi	r6,10
    6614:	000f883a 	mov	r7,zero
    6618:	1023883a 	mov	r17,r2
    661c:	00086f40 	call	86f4 <__multadd>
    6620:	1029883a 	mov	r20,r2
    6624:	b027883a 	mov	r19,r22
    6628:	003fc006 	br	652c <__alt_data_end+0xfffb0dfc>
    662c:	a005883a 	mov	r2,r20
    6630:	003ede06 	br	61ac <__alt_data_end+0xfffb0a7c>
    6634:	01000044 	movi	r4,1
    6638:	d9000b15 	stw	r4,44(sp)
    663c:	d9802217 	ldw	r6,136(sp)
    6640:	0180dc0e 	bge	zero,r6,69b4 <_dtoa_r+0x1224>
    6644:	3023883a 	mov	r17,r6
    6648:	d9800d15 	stw	r6,52(sp)
    664c:	d9800615 	stw	r6,24(sp)
    6650:	003d1e06 	br	5acc <__alt_data_end+0xfffb039c>
    6654:	d8800617 	ldw	r2,24(sp)
    6658:	00be3716 	blt	zero,r2,5f38 <__alt_data_end+0xfffb0808>
    665c:	1000be1e 	bne	r2,zero,6958 <_dtoa_r+0x11c8>
    6660:	8809883a 	mov	r4,r17
    6664:	a00b883a 	mov	r5,r20
    6668:	000d883a 	mov	r6,zero
    666c:	01d00534 	movhi	r7,16404
    6670:	000df180 	call	df18 <__muldf3>
    6674:	1009883a 	mov	r4,r2
    6678:	180b883a 	mov	r5,r3
    667c:	900d883a 	mov	r6,r18
    6680:	980f883a 	mov	r7,r19
    6684:	000dd580 	call	dd58 <__gedf2>
    6688:	002b883a 	mov	r21,zero
    668c:	0023883a 	mov	r17,zero
    6690:	10007a16 	blt	r2,zero,687c <_dtoa_r+0x10ec>
    6694:	d9002217 	ldw	r4,136(sp)
    6698:	ddc00717 	ldw	r23,28(sp)
    669c:	0108303a 	nor	r4,zero,r4
    66a0:	d9000515 	stw	r4,20(sp)
    66a4:	8009883a 	mov	r4,r16
    66a8:	a80b883a 	mov	r5,r21
    66ac:	00086cc0 	call	86cc <_Bfree>
    66b0:	883f751e 	bne	r17,zero,6488 <__alt_data_end+0xfffb0d58>
    66b4:	003de406 	br	5e48 <__alt_data_end+0xfffb0718>
    66b8:	e00b883a 	mov	r5,fp
    66bc:	8009883a 	mov	r4,r16
    66c0:	0008d180 	call	8d18 <__pow5mult>
    66c4:	1039883a 	mov	fp,r2
    66c8:	003ed306 	br	6218 <__alt_data_end+0xfffb0ae8>
    66cc:	903ee01e 	bne	r18,zero,6250 <__alt_data_end+0xfffb0b20>
    66d0:	00800434 	movhi	r2,16
    66d4:	10bfffc4 	addi	r2,r2,-1
    66d8:	9884703a 	and	r2,r19,r2
    66dc:	103f081e 	bne	r2,zero,6300 <__alt_data_end+0xfffb0bd0>
    66e0:	9cdffc2c 	andhi	r19,r19,32752
    66e4:	983f0626 	beq	r19,zero,6300 <__alt_data_end+0xfffb0bd0>
    66e8:	d8800817 	ldw	r2,32(sp)
    66ec:	b5800044 	addi	r22,r22,1
    66f0:	04c00044 	movi	r19,1
    66f4:	10800044 	addi	r2,r2,1
    66f8:	d8800815 	stw	r2,32(sp)
    66fc:	003f0106 	br	6304 <__alt_data_end+0xfffb0bd4>
    6700:	d9800f17 	ldw	r6,60(sp)
    6704:	30016826 	beq	r6,zero,6ca8 <_dtoa_r+0x1518>
    6708:	10810cc4 	addi	r2,r2,1075
    670c:	dd400917 	ldw	r21,36(sp)
    6710:	dd000817 	ldw	r20,32(sp)
    6714:	003e9906 	br	617c <__alt_data_end+0xfffb0a4c>
    6718:	9011883a 	mov	r8,r18
    671c:	4007883a 	mov	r3,r8
    6720:	e02d883a 	mov	r22,fp
    6724:	0080100e 	bge	zero,r2,6768 <_dtoa_r+0xfd8>
    6728:	01800044 	movi	r6,1
    672c:	8009883a 	mov	r4,r16
    6730:	e00b883a 	mov	r5,fp
    6734:	da001515 	stw	r8,84(sp)
    6738:	da001715 	stw	r8,92(sp)
    673c:	0008e580 	call	8e58 <__lshift>
    6740:	1009883a 	mov	r4,r2
    6744:	a80b883a 	mov	r5,r21
    6748:	102d883a 	mov	r22,r2
    674c:	0008fa00 	call	8fa0 <__mcmp>
    6750:	d8c01517 	ldw	r3,84(sp)
    6754:	da001717 	ldw	r8,92(sp)
    6758:	0081a50e 	bge	zero,r2,6df0 <_dtoa_r+0x1660>
    675c:	00800e44 	movi	r2,57
    6760:	40817b26 	beq	r8,r2,6d50 <_dtoa_r+0x15c0>
    6764:	40c00044 	addi	r3,r8,1
    6768:	8825883a 	mov	r18,r17
    676c:	9dc00044 	addi	r23,r19,1
    6770:	98c00005 	stb	r3,0(r19)
    6774:	a023883a 	mov	r17,r20
    6778:	b039883a 	mov	fp,r22
    677c:	003f3906 	br	6464 <__alt_data_end+0xfffb0d34>
    6780:	00800e44 	movi	r2,57
    6784:	9011883a 	mov	r8,r18
    6788:	90817226 	beq	r18,r2,6d54 <_dtoa_r+0x15c4>
    678c:	0580010e 	bge	zero,r22,6794 <_dtoa_r+0x1004>
    6790:	ba000c44 	addi	r8,r23,49
    6794:	8825883a 	mov	r18,r17
    6798:	9dc00044 	addi	r23,r19,1
    679c:	9a000005 	stb	r8,0(r19)
    67a0:	a023883a 	mov	r17,r20
    67a4:	003f2f06 	br	6464 <__alt_data_end+0xfffb0d34>
    67a8:	880b883a 	mov	r5,r17
    67ac:	8009883a 	mov	r4,r16
    67b0:	01800284 	movi	r6,10
    67b4:	000f883a 	mov	r7,zero
    67b8:	00086f40 	call	86f4 <__multadd>
    67bc:	1023883a 	mov	r17,r2
    67c0:	1029883a 	mov	r20,r2
    67c4:	003f9706 	br	6624 <__alt_data_end+0xfffb0ef4>
    67c8:	8009883a 	mov	r4,r16
    67cc:	180b883a 	mov	r5,r3
    67d0:	00086cc0 	call	86cc <_Bfree>
    67d4:	00800044 	movi	r2,1
    67d8:	003f7306 	br	65a8 <__alt_data_end+0xfffb0e78>
    67dc:	e009883a 	mov	r4,fp
    67e0:	a80b883a 	mov	r5,r21
    67e4:	0008fa00 	call	8fa0 <__mcmp>
    67e8:	103ee60e 	bge	r2,zero,6384 <__alt_data_end+0xfffb0c54>
    67ec:	8009883a 	mov	r4,r16
    67f0:	e00b883a 	mov	r5,fp
    67f4:	01800284 	movi	r6,10
    67f8:	000f883a 	mov	r7,zero
    67fc:	00086f40 	call	86f4 <__multadd>
    6800:	d9000517 	ldw	r4,20(sp)
    6804:	d9800b17 	ldw	r6,44(sp)
    6808:	1039883a 	mov	fp,r2
    680c:	213fffc4 	addi	r4,r4,-1
    6810:	d9000515 	stw	r4,20(sp)
    6814:	303f2d1e 	bne	r6,zero,64cc <__alt_data_end+0xfffb0d9c>
    6818:	d9000d17 	ldw	r4,52(sp)
    681c:	0101780e 	bge	zero,r4,6e00 <_dtoa_r+0x1670>
    6820:	d9000615 	stw	r4,24(sp)
    6824:	003edb06 	br	6394 <__alt_data_end+0xfffb0c64>
    6828:	00800084 	movi	r2,2
    682c:	30818e1e 	bne	r6,r2,6e68 <_dtoa_r+0x16d8>
    6830:	d8000b15 	stw	zero,44(sp)
    6834:	003f8106 	br	663c <__alt_data_end+0xfffb0f0c>
    6838:	d8800717 	ldw	r2,28(sp)
    683c:	003c0306 	br	584c <__alt_data_end+0xfffb011c>
    6840:	d9000317 	ldw	r4,12(sp)
    6844:	00800084 	movi	r2,2
    6848:	113ed00e 	bge	r2,r4,638c <__alt_data_end+0xfffb0c5c>
    684c:	d8c00617 	ldw	r3,24(sp)
    6850:	183f901e 	bne	r3,zero,6694 <__alt_data_end+0xfffb0f64>
    6854:	a80b883a 	mov	r5,r21
    6858:	8009883a 	mov	r4,r16
    685c:	01800144 	movi	r6,5
    6860:	000f883a 	mov	r7,zero
    6864:	00086f40 	call	86f4 <__multadd>
    6868:	e009883a 	mov	r4,fp
    686c:	100b883a 	mov	r5,r2
    6870:	102b883a 	mov	r21,r2
    6874:	0008fa00 	call	8fa0 <__mcmp>
    6878:	00bf860e 	bge	zero,r2,6694 <__alt_data_end+0xfffb0f64>
    687c:	d9800717 	ldw	r6,28(sp)
    6880:	00800c44 	movi	r2,49
    6884:	30800005 	stb	r2,0(r6)
    6888:	d8800517 	ldw	r2,20(sp)
    688c:	35c00044 	addi	r23,r6,1
    6890:	10800044 	addi	r2,r2,1
    6894:	d8800515 	stw	r2,20(sp)
    6898:	003f8206 	br	66a4 <__alt_data_end+0xfffb0f74>
    689c:	903e981e 	bne	r18,zero,6300 <__alt_data_end+0xfffb0bd0>
    68a0:	003f8b06 	br	66d0 <__alt_data_end+0xfffb0fa0>
    68a4:	d9800517 	ldw	r6,20(sp)
    68a8:	d8c00717 	ldw	r3,28(sp)
    68ac:	00800c44 	movi	r2,49
    68b0:	31800044 	addi	r6,r6,1
    68b4:	d9800515 	stw	r6,20(sp)
    68b8:	18800005 	stb	r2,0(r3)
    68bc:	003ee906 	br	6464 <__alt_data_end+0xfffb0d34>
    68c0:	dc000317 	ldw	r16,12(sp)
    68c4:	003d6006 	br	5e48 <__alt_data_end+0xfffb0718>
    68c8:	8809883a 	mov	r4,r17
    68cc:	000f0dc0 	call	f0dc <__floatsidf>
    68d0:	a009883a 	mov	r4,r20
    68d4:	a80b883a 	mov	r5,r21
    68d8:	100d883a 	mov	r6,r2
    68dc:	180f883a 	mov	r7,r3
    68e0:	000df180 	call	df18 <__muldf3>
    68e4:	1009883a 	mov	r4,r2
    68e8:	180b883a 	mov	r5,r3
    68ec:	000d883a 	mov	r6,zero
    68f0:	01d00734 	movhi	r7,16412
    68f4:	000cab80 	call	cab8 <__adddf3>
    68f8:	1023883a 	mov	r17,r2
    68fc:	00bf3034 	movhi	r2,64704
    6900:	1885883a 	add	r2,r3,r2
    6904:	d8800e15 	stw	r2,56(sp)
    6908:	a009883a 	mov	r4,r20
    690c:	a80b883a 	mov	r5,r21
    6910:	000d883a 	mov	r6,zero
    6914:	01d00534 	movhi	r7,16404
    6918:	000e7840 	call	e784 <__subdf3>
    691c:	d9c00e17 	ldw	r7,56(sp)
    6920:	1009883a 	mov	r4,r2
    6924:	180b883a 	mov	r5,r3
    6928:	880d883a 	mov	r6,r17
    692c:	102b883a 	mov	r21,r2
    6930:	1829883a 	mov	r20,r3
    6934:	000dd580 	call	dd58 <__gedf2>
    6938:	00807716 	blt	zero,r2,6b18 <_dtoa_r+0x1388>
    693c:	d8800e17 	ldw	r2,56(sp)
    6940:	a809883a 	mov	r4,r21
    6944:	a00b883a 	mov	r5,r20
    6948:	11e0003c 	xorhi	r7,r2,32768
    694c:	880d883a 	mov	r6,r17
    6950:	000de380 	call	de38 <__ledf2>
    6954:	103d6b0e 	bge	r2,zero,5f04 <__alt_data_end+0xfffb07d4>
    6958:	002b883a 	mov	r21,zero
    695c:	0023883a 	mov	r17,zero
    6960:	003f4c06 	br	6694 <__alt_data_end+0xfffb0f64>
    6964:	d9800917 	ldw	r6,36(sp)
    6968:	e00b883a 	mov	r5,fp
    696c:	8009883a 	mov	r4,r16
    6970:	0008d180 	call	8d18 <__pow5mult>
    6974:	1039883a 	mov	fp,r2
    6978:	003e2706 	br	6218 <__alt_data_end+0xfffb0ae8>
    697c:	d8000b15 	stw	zero,44(sp)
    6980:	003c4906 	br	5aa8 <__alt_data_end+0xfffb0378>
    6984:	d9000917 	ldw	r4,36(sp)
    6988:	d9800a17 	ldw	r6,40(sp)
    698c:	dd400915 	stw	r21,36(sp)
    6990:	a905c83a 	sub	r2,r21,r4
    6994:	308d883a 	add	r6,r6,r2
    6998:	d9800a15 	stw	r6,40(sp)
    699c:	002b883a 	mov	r21,zero
    69a0:	003df206 	br	616c <__alt_data_end+0xfffb0a3c>
    69a4:	dc800e15 	stw	r18,56(sp)
    69a8:	982b883a 	mov	r21,r19
    69ac:	04400084 	movi	r17,2
    69b0:	003c7406 	br	5b84 <__alt_data_end+0xfffb0454>
    69b4:	04400044 	movi	r17,1
    69b8:	dc400d15 	stw	r17,52(sp)
    69bc:	dc400615 	stw	r17,24(sp)
    69c0:	dc402215 	stw	r17,136(sp)
    69c4:	80001115 	stw	zero,68(r16)
    69c8:	000b883a 	mov	r5,zero
    69cc:	003c4a06 	br	5af8 <__alt_data_end+0xfffb03c8>
    69d0:	3023883a 	mov	r17,r6
    69d4:	003ffb06 	br	69c4 <__alt_data_end+0xfffb1294>
    69d8:	1000021e 	bne	r2,zero,69e4 <_dtoa_r+0x1254>
    69dc:	4200004c 	andi	r8,r8,1
    69e0:	403e8f1e 	bne	r8,zero,6420 <__alt_data_end+0xfffb0cf0>
    69e4:	01000c04 	movi	r4,48
    69e8:	00000106 	br	69f0 <_dtoa_r+0x1260>
    69ec:	102f883a 	mov	r23,r2
    69f0:	b8bfffc4 	addi	r2,r23,-1
    69f4:	10c00007 	ldb	r3,0(r2)
    69f8:	193ffc26 	beq	r3,r4,69ec <__alt_data_end+0xfffb12bc>
    69fc:	003e9906 	br	6464 <__alt_data_end+0xfffb0d34>
    6a00:	d9000517 	ldw	r4,20(sp)
    6a04:	012fc83a 	sub	r23,zero,r4
    6a08:	b800ad26 	beq	r23,zero,6cc0 <_dtoa_r+0x1530>
    6a0c:	b88003cc 	andi	r2,r23,15
    6a10:	100490fa 	slli	r2,r2,3
    6a14:	00c00074 	movhi	r3,1
    6a18:	18c8e404 	addi	r3,r3,9104
    6a1c:	1885883a 	add	r2,r3,r2
    6a20:	11800017 	ldw	r6,0(r2)
    6a24:	11c00117 	ldw	r7,4(r2)
    6a28:	b82fd13a 	srai	r23,r23,4
    6a2c:	9009883a 	mov	r4,r18
    6a30:	980b883a 	mov	r5,r19
    6a34:	000df180 	call	df18 <__muldf3>
    6a38:	1029883a 	mov	r20,r2
    6a3c:	182b883a 	mov	r21,r3
    6a40:	b800f426 	beq	r23,zero,6e14 <_dtoa_r+0x1684>
    6a44:	02000074 	movhi	r8,1
    6a48:	4208da04 	addi	r8,r8,9064
    6a4c:	8029883a 	mov	r20,r16
    6a50:	04400084 	movi	r17,2
    6a54:	4021883a 	mov	r16,r8
    6a58:	b980004c 	andi	r6,r23,1
    6a5c:	1009883a 	mov	r4,r2
    6a60:	b82fd07a 	srai	r23,r23,1
    6a64:	180b883a 	mov	r5,r3
    6a68:	30000426 	beq	r6,zero,6a7c <_dtoa_r+0x12ec>
    6a6c:	81800017 	ldw	r6,0(r16)
    6a70:	81c00117 	ldw	r7,4(r16)
    6a74:	8c400044 	addi	r17,r17,1
    6a78:	000df180 	call	df18 <__muldf3>
    6a7c:	84000204 	addi	r16,r16,8
    6a80:	b83ff51e 	bne	r23,zero,6a58 <__alt_data_end+0xfffb1328>
    6a84:	a021883a 	mov	r16,r20
    6a88:	182b883a 	mov	r21,r3
    6a8c:	1029883a 	mov	r20,r2
    6a90:	003c5506 	br	5be8 <__alt_data_end+0xfffb04b8>
    6a94:	d9800517 	ldw	r6,20(sp)
    6a98:	d9000717 	ldw	r4,28(sp)
    6a9c:	00c00c04 	movi	r3,48
    6aa0:	31800044 	addi	r6,r6,1
    6aa4:	d9800515 	stw	r6,20(sp)
    6aa8:	20c00005 	stb	r3,0(r4)
    6aac:	02000c44 	movi	r8,49
    6ab0:	003da206 	br	613c <__alt_data_end+0xfffb0a0c>
    6ab4:	89400117 	ldw	r5,4(r17)
    6ab8:	8009883a 	mov	r4,r16
    6abc:	00086240 	call	8624 <_Balloc>
    6ac0:	89800417 	ldw	r6,16(r17)
    6ac4:	11000304 	addi	r4,r2,12
    6ac8:	89400304 	addi	r5,r17,12
    6acc:	31800084 	addi	r6,r6,2
    6ad0:	318d883a 	add	r6,r6,r6
    6ad4:	318d883a 	add	r6,r6,r6
    6ad8:	1027883a 	mov	r19,r2
    6adc:	000826c0 	call	826c <memcpy>
    6ae0:	8009883a 	mov	r4,r16
    6ae4:	980b883a 	mov	r5,r19
    6ae8:	01800044 	movi	r6,1
    6aec:	0008e580 	call	8e58 <__lshift>
    6af0:	1029883a 	mov	r20,r2
    6af4:	003e8606 	br	6510 <__alt_data_end+0xfffb0de0>
    6af8:	00800e44 	movi	r2,57
    6afc:	90809526 	beq	r18,r2,6d54 <_dtoa_r+0x15c4>
    6b00:	92000044 	addi	r8,r18,1
    6b04:	003f2306 	br	6794 <__alt_data_end+0xfffb1064>
    6b08:	9011883a 	mov	r8,r18
    6b0c:	8825883a 	mov	r18,r17
    6b10:	a023883a 	mov	r17,r20
    6b14:	003e3706 	br	63f4 <__alt_data_end+0xfffb0cc4>
    6b18:	002b883a 	mov	r21,zero
    6b1c:	0023883a 	mov	r17,zero
    6b20:	003f5606 	br	687c <__alt_data_end+0xfffb114c>
    6b24:	51bfffc4 	addi	r6,r10,-1
    6b28:	300490fa 	slli	r2,r6,3
    6b2c:	00c00074 	movhi	r3,1
    6b30:	18c8e404 	addi	r3,r3,9104
    6b34:	1885883a 	add	r2,r3,r2
    6b38:	d9c00e17 	ldw	r7,56(sp)
    6b3c:	11000017 	ldw	r4,0(r2)
    6b40:	11400117 	ldw	r5,4(r2)
    6b44:	d8800717 	ldw	r2,28(sp)
    6b48:	d9801015 	stw	r6,64(sp)
    6b4c:	880d883a 	mov	r6,r17
    6b50:	da801615 	stw	r10,88(sp)
    6b54:	15c00044 	addi	r23,r2,1
    6b58:	000df180 	call	df18 <__muldf3>
    6b5c:	a80b883a 	mov	r5,r21
    6b60:	a009883a 	mov	r4,r20
    6b64:	d8c01115 	stw	r3,68(sp)
    6b68:	d8800e15 	stw	r2,56(sp)
    6b6c:	000f0540 	call	f054 <__fixdfsi>
    6b70:	1009883a 	mov	r4,r2
    6b74:	1023883a 	mov	r17,r2
    6b78:	000f0dc0 	call	f0dc <__floatsidf>
    6b7c:	a009883a 	mov	r4,r20
    6b80:	a80b883a 	mov	r5,r21
    6b84:	100d883a 	mov	r6,r2
    6b88:	180f883a 	mov	r7,r3
    6b8c:	000e7840 	call	e784 <__subdf3>
    6b90:	1813883a 	mov	r9,r3
    6b94:	d8c00717 	ldw	r3,28(sp)
    6b98:	8c400c04 	addi	r17,r17,48
    6b9c:	1011883a 	mov	r8,r2
    6ba0:	1c400005 	stb	r17,0(r3)
    6ba4:	da801617 	ldw	r10,88(sp)
    6ba8:	00800044 	movi	r2,1
    6bac:	50802326 	beq	r10,r2,6c3c <_dtoa_r+0x14ac>
    6bb0:	d8800717 	ldw	r2,28(sp)
    6bb4:	b82b883a 	mov	r21,r23
    6bb8:	dc001315 	stw	r16,76(sp)
    6bbc:	12a9883a 	add	r20,r2,r10
    6bc0:	4807883a 	mov	r3,r9
    6bc4:	4005883a 	mov	r2,r8
    6bc8:	dc801415 	stw	r18,80(sp)
    6bcc:	000d883a 	mov	r6,zero
    6bd0:	01d00934 	movhi	r7,16420
    6bd4:	1009883a 	mov	r4,r2
    6bd8:	180b883a 	mov	r5,r3
    6bdc:	000df180 	call	df18 <__muldf3>
    6be0:	180b883a 	mov	r5,r3
    6be4:	1009883a 	mov	r4,r2
    6be8:	1821883a 	mov	r16,r3
    6bec:	1025883a 	mov	r18,r2
    6bf0:	000f0540 	call	f054 <__fixdfsi>
    6bf4:	1009883a 	mov	r4,r2
    6bf8:	1023883a 	mov	r17,r2
    6bfc:	000f0dc0 	call	f0dc <__floatsidf>
    6c00:	9009883a 	mov	r4,r18
    6c04:	800b883a 	mov	r5,r16
    6c08:	100d883a 	mov	r6,r2
    6c0c:	180f883a 	mov	r7,r3
    6c10:	8c400c04 	addi	r17,r17,48
    6c14:	000e7840 	call	e784 <__subdf3>
    6c18:	ad400044 	addi	r21,r21,1
    6c1c:	ac7fffc5 	stb	r17,-1(r21)
    6c20:	ad3fea1e 	bne	r21,r20,6bcc <__alt_data_end+0xfffb149c>
    6c24:	1813883a 	mov	r9,r3
    6c28:	d8c01017 	ldw	r3,64(sp)
    6c2c:	dc001317 	ldw	r16,76(sp)
    6c30:	dc801417 	ldw	r18,80(sp)
    6c34:	1011883a 	mov	r8,r2
    6c38:	b8ef883a 	add	r23,r23,r3
    6c3c:	d9000e17 	ldw	r4,56(sp)
    6c40:	d9401117 	ldw	r5,68(sp)
    6c44:	000d883a 	mov	r6,zero
    6c48:	01cff834 	movhi	r7,16352
    6c4c:	da001715 	stw	r8,92(sp)
    6c50:	da401515 	stw	r9,84(sp)
    6c54:	000cab80 	call	cab8 <__adddf3>
    6c58:	da001717 	ldw	r8,92(sp)
    6c5c:	da401517 	ldw	r9,84(sp)
    6c60:	1009883a 	mov	r4,r2
    6c64:	400d883a 	mov	r6,r8
    6c68:	480f883a 	mov	r7,r9
    6c6c:	180b883a 	mov	r5,r3
    6c70:	000de380 	call	de38 <__ledf2>
    6c74:	da001717 	ldw	r8,92(sp)
    6c78:	da401517 	ldw	r9,84(sp)
    6c7c:	10003b0e 	bge	r2,zero,6d6c <_dtoa_r+0x15dc>
    6c80:	d9001217 	ldw	r4,72(sp)
    6c84:	bd7fffc3 	ldbu	r21,-1(r23)
    6c88:	d9000515 	stw	r4,20(sp)
    6c8c:	003d1c06 	br	6100 <__alt_data_end+0xfffb09d0>
    6c90:	d8c00817 	ldw	r3,32(sp)
    6c94:	18a9c83a 	sub	r20,r3,r2
    6c98:	0005883a 	mov	r2,zero
    6c9c:	003d3706 	br	617c <__alt_data_end+0xfffb0a4c>
    6ca0:	00800044 	movi	r2,1
    6ca4:	003dd006 	br	63e8 <__alt_data_end+0xfffb0cb8>
    6ca8:	d8c00217 	ldw	r3,8(sp)
    6cac:	00800d84 	movi	r2,54
    6cb0:	dd400917 	ldw	r21,36(sp)
    6cb4:	10c5c83a 	sub	r2,r2,r3
    6cb8:	dd000817 	ldw	r20,32(sp)
    6cbc:	003d2f06 	br	617c <__alt_data_end+0xfffb0a4c>
    6cc0:	9029883a 	mov	r20,r18
    6cc4:	982b883a 	mov	r21,r19
    6cc8:	04400084 	movi	r17,2
    6ccc:	003bc606 	br	5be8 <__alt_data_end+0xfffb04b8>
    6cd0:	d8800617 	ldw	r2,24(sp)
    6cd4:	103efc26 	beq	r2,zero,68c8 <__alt_data_end+0xfffb1198>
    6cd8:	d8c00d17 	ldw	r3,52(sp)
    6cdc:	00fc890e 	bge	zero,r3,5f04 <__alt_data_end+0xfffb07d4>
    6ce0:	a80b883a 	mov	r5,r21
    6ce4:	a009883a 	mov	r4,r20
    6ce8:	000d883a 	mov	r6,zero
    6cec:	01d00934 	movhi	r7,16420
    6cf0:	000df180 	call	df18 <__muldf3>
    6cf4:	89000044 	addi	r4,r17,1
    6cf8:	1029883a 	mov	r20,r2
    6cfc:	182b883a 	mov	r21,r3
    6d00:	000f0dc0 	call	f0dc <__floatsidf>
    6d04:	a009883a 	mov	r4,r20
    6d08:	a80b883a 	mov	r5,r21
    6d0c:	100d883a 	mov	r6,r2
    6d10:	180f883a 	mov	r7,r3
    6d14:	000df180 	call	df18 <__muldf3>
    6d18:	1009883a 	mov	r4,r2
    6d1c:	180b883a 	mov	r5,r3
    6d20:	000d883a 	mov	r6,zero
    6d24:	01d00734 	movhi	r7,16412
    6d28:	000cab80 	call	cab8 <__adddf3>
    6d2c:	d9000517 	ldw	r4,20(sp)
    6d30:	1023883a 	mov	r17,r2
    6d34:	00bf3034 	movhi	r2,64704
    6d38:	213fffc4 	addi	r4,r4,-1
    6d3c:	1885883a 	add	r2,r3,r2
    6d40:	d9001215 	stw	r4,72(sp)
    6d44:	d8800e15 	stw	r2,56(sp)
    6d48:	da800d17 	ldw	r10,52(sp)
    6d4c:	003bc306 	br	5c5c <__alt_data_end+0xfffb052c>
    6d50:	b039883a 	mov	fp,r22
    6d54:	01000e44 	movi	r4,57
    6d58:	8825883a 	mov	r18,r17
    6d5c:	9dc00044 	addi	r23,r19,1
    6d60:	99000005 	stb	r4,0(r19)
    6d64:	a023883a 	mov	r17,r20
    6d68:	003dae06 	br	6424 <__alt_data_end+0xfffb0cf4>
    6d6c:	d9800e17 	ldw	r6,56(sp)
    6d70:	d9c01117 	ldw	r7,68(sp)
    6d74:	0009883a 	mov	r4,zero
    6d78:	014ff834 	movhi	r5,16352
    6d7c:	da001715 	stw	r8,92(sp)
    6d80:	da401515 	stw	r9,84(sp)
    6d84:	000e7840 	call	e784 <__subdf3>
    6d88:	da001717 	ldw	r8,92(sp)
    6d8c:	da401517 	ldw	r9,84(sp)
    6d90:	1009883a 	mov	r4,r2
    6d94:	180b883a 	mov	r5,r3
    6d98:	400d883a 	mov	r6,r8
    6d9c:	480f883a 	mov	r7,r9
    6da0:	000dd580 	call	dd58 <__gedf2>
    6da4:	00bc570e 	bge	zero,r2,5f04 <__alt_data_end+0xfffb07d4>
    6da8:	01000c04 	movi	r4,48
    6dac:	00000106 	br	6db4 <_dtoa_r+0x1624>
    6db0:	102f883a 	mov	r23,r2
    6db4:	b8bfffc4 	addi	r2,r23,-1
    6db8:	10c00007 	ldb	r3,0(r2)
    6dbc:	193ffc26 	beq	r3,r4,6db0 <__alt_data_end+0xfffb1680>
    6dc0:	d9801217 	ldw	r6,72(sp)
    6dc4:	d9800515 	stw	r6,20(sp)
    6dc8:	003c1f06 	br	5e48 <__alt_data_end+0xfffb0718>
    6dcc:	d8801217 	ldw	r2,72(sp)
    6dd0:	dc001117 	ldw	r16,68(sp)
    6dd4:	d8800515 	stw	r2,20(sp)
    6dd8:	003cc906 	br	6100 <__alt_data_end+0xfffb09d0>
    6ddc:	dd801317 	ldw	r22,76(sp)
    6de0:	dc001117 	ldw	r16,68(sp)
    6de4:	dcc01417 	ldw	r19,80(sp)
    6de8:	dc801017 	ldw	r18,64(sp)
    6dec:	003c4506 	br	5f04 <__alt_data_end+0xfffb07d4>
    6df0:	103e5d1e 	bne	r2,zero,6768 <__alt_data_end+0xfffb1038>
    6df4:	4080004c 	andi	r2,r8,1
    6df8:	103e5b26 	beq	r2,zero,6768 <__alt_data_end+0xfffb1038>
    6dfc:	003e5706 	br	675c <__alt_data_end+0xfffb102c>
    6e00:	d8c00317 	ldw	r3,12(sp)
    6e04:	00800084 	movi	r2,2
    6e08:	10c00a16 	blt	r2,r3,6e34 <_dtoa_r+0x16a4>
    6e0c:	d9000d17 	ldw	r4,52(sp)
    6e10:	003e8306 	br	6820 <__alt_data_end+0xfffb10f0>
    6e14:	04400084 	movi	r17,2
    6e18:	003b7306 	br	5be8 <__alt_data_end+0xfffb04b8>
    6e1c:	d9801217 	ldw	r6,72(sp)
    6e20:	d9800515 	stw	r6,20(sp)
    6e24:	003cb606 	br	6100 <__alt_data_end+0xfffb09d0>
    6e28:	d9001217 	ldw	r4,72(sp)
    6e2c:	d9000515 	stw	r4,20(sp)
    6e30:	003c0506 	br	5e48 <__alt_data_end+0xfffb0718>
    6e34:	d9800d17 	ldw	r6,52(sp)
    6e38:	d9800615 	stw	r6,24(sp)
    6e3c:	003e8306 	br	684c <__alt_data_end+0xfffb111c>
    6e40:	d9800317 	ldw	r6,12(sp)
    6e44:	00800084 	movi	r2,2
    6e48:	11800216 	blt	r2,r6,6e54 <_dtoa_r+0x16c4>
    6e4c:	d8800d17 	ldw	r2,52(sp)
    6e50:	003da606 	br	64ec <__alt_data_end+0xfffb0dbc>
    6e54:	d8800d17 	ldw	r2,52(sp)
    6e58:	d8800615 	stw	r2,24(sp)
    6e5c:	003e7b06 	br	684c <__alt_data_end+0xfffb111c>
    6e60:	05000044 	movi	r20,1
    6e64:	003b0506 	br	5a7c <__alt_data_end+0xfffb034c>
    6e68:	8009883a 	mov	r4,r16
    6e6c:	80001115 	stw	zero,68(r16)
    6e70:	000b883a 	mov	r5,zero
    6e74:	00086240 	call	8624 <_Balloc>
    6e78:	d8800715 	stw	r2,28(sp)
    6e7c:	d8c00717 	ldw	r3,28(sp)
    6e80:	00bfffc4 	movi	r2,-1
    6e84:	01000044 	movi	r4,1
    6e88:	d8800615 	stw	r2,24(sp)
    6e8c:	80c01015 	stw	r3,64(r16)
    6e90:	d9000b15 	stw	r4,44(sp)
    6e94:	d8002215 	stw	zero,136(sp)
    6e98:	d8800d15 	stw	r2,52(sp)
    6e9c:	003c1906 	br	5f04 <__alt_data_end+0xfffb07d4>
    6ea0:	193d2926 	beq	r3,r4,6348 <__alt_data_end+0xfffb0c18>
    6ea4:	00c00f04 	movi	r3,60
    6ea8:	1885c83a 	sub	r2,r3,r2
    6eac:	003d7b06 	br	649c <__alt_data_end+0xfffb0d6c>
    6eb0:	000b883a 	mov	r5,zero
    6eb4:	003b1006 	br	5af8 <__alt_data_end+0xfffb03c8>

00006eb8 <_fflush_r>:
    6eb8:	defffb04 	addi	sp,sp,-20
    6ebc:	dcc00315 	stw	r19,12(sp)
    6ec0:	dc000015 	stw	r16,0(sp)
    6ec4:	dfc00415 	stw	ra,16(sp)
    6ec8:	dc800215 	stw	r18,8(sp)
    6ecc:	dc400115 	stw	r17,4(sp)
    6ed0:	2027883a 	mov	r19,r4
    6ed4:	2821883a 	mov	r16,r5
    6ed8:	20000226 	beq	r4,zero,6ee4 <_fflush_r+0x2c>
    6edc:	20800e17 	ldw	r2,56(r4)
    6ee0:	10005326 	beq	r2,zero,7030 <_fflush_r+0x178>
    6ee4:	8080030b 	ldhu	r2,12(r16)
    6ee8:	10ffffcc 	andi	r3,r2,65535
    6eec:	18e0001c 	xori	r3,r3,32768
    6ef0:	18e00004 	addi	r3,r3,-32768
    6ef4:	18002c26 	beq	r3,zero,6fa8 <_fflush_r+0xf0>
    6ef8:	10c0020c 	andi	r3,r2,8
    6efc:	1800321e 	bne	r3,zero,6fc8 <_fflush_r+0x110>
    6f00:	80c00117 	ldw	r3,4(r16)
    6f04:	10820014 	ori	r2,r2,2048
    6f08:	8080030d 	sth	r2,12(r16)
    6f0c:	00c0570e 	bge	zero,r3,706c <_fflush_r+0x1b4>
    6f10:	82000a17 	ldw	r8,40(r16)
    6f14:	40002426 	beq	r8,zero,6fa8 <_fflush_r+0xf0>
    6f18:	9c400017 	ldw	r17,0(r19)
    6f1c:	10c4000c 	andi	r3,r2,4096
    6f20:	98000015 	stw	zero,0(r19)
    6f24:	18004626 	beq	r3,zero,7040 <_fflush_r+0x188>
    6f28:	81801417 	ldw	r6,80(r16)
    6f2c:	10c0010c 	andi	r3,r2,4
    6f30:	18000626 	beq	r3,zero,6f4c <_fflush_r+0x94>
    6f34:	80c00117 	ldw	r3,4(r16)
    6f38:	80800c17 	ldw	r2,48(r16)
    6f3c:	30cdc83a 	sub	r6,r6,r3
    6f40:	10000226 	beq	r2,zero,6f4c <_fflush_r+0x94>
    6f44:	80800f17 	ldw	r2,60(r16)
    6f48:	308dc83a 	sub	r6,r6,r2
    6f4c:	81400717 	ldw	r5,28(r16)
    6f50:	9809883a 	mov	r4,r19
    6f54:	000f883a 	mov	r7,zero
    6f58:	403ee83a 	callr	r8
    6f5c:	00ffffc4 	movi	r3,-1
    6f60:	10c04526 	beq	r2,r3,7078 <_fflush_r+0x1c0>
    6f64:	80c0030b 	ldhu	r3,12(r16)
    6f68:	81000417 	ldw	r4,16(r16)
    6f6c:	80000115 	stw	zero,4(r16)
    6f70:	197dffcc 	andi	r5,r3,63487
    6f74:	8140030d 	sth	r5,12(r16)
    6f78:	81000015 	stw	r4,0(r16)
    6f7c:	18c4000c 	andi	r3,r3,4096
    6f80:	18000126 	beq	r3,zero,6f88 <_fflush_r+0xd0>
    6f84:	80801415 	stw	r2,80(r16)
    6f88:	81400c17 	ldw	r5,48(r16)
    6f8c:	9c400015 	stw	r17,0(r19)
    6f90:	28000526 	beq	r5,zero,6fa8 <_fflush_r+0xf0>
    6f94:	80801004 	addi	r2,r16,64
    6f98:	28800226 	beq	r5,r2,6fa4 <_fflush_r+0xec>
    6f9c:	9809883a 	mov	r4,r19
    6fa0:	00075e80 	call	75e8 <_free_r>
    6fa4:	80000c15 	stw	zero,48(r16)
    6fa8:	0005883a 	mov	r2,zero
    6fac:	dfc00417 	ldw	ra,16(sp)
    6fb0:	dcc00317 	ldw	r19,12(sp)
    6fb4:	dc800217 	ldw	r18,8(sp)
    6fb8:	dc400117 	ldw	r17,4(sp)
    6fbc:	dc000017 	ldw	r16,0(sp)
    6fc0:	dec00504 	addi	sp,sp,20
    6fc4:	f800283a 	ret
    6fc8:	84800417 	ldw	r18,16(r16)
    6fcc:	903ff626 	beq	r18,zero,6fa8 <__alt_data_end+0xfffb1878>
    6fd0:	84400017 	ldw	r17,0(r16)
    6fd4:	108000cc 	andi	r2,r2,3
    6fd8:	84800015 	stw	r18,0(r16)
    6fdc:	8ca3c83a 	sub	r17,r17,r18
    6fe0:	10001526 	beq	r2,zero,7038 <_fflush_r+0x180>
    6fe4:	0005883a 	mov	r2,zero
    6fe8:	80800215 	stw	r2,8(r16)
    6fec:	04400316 	blt	zero,r17,6ffc <_fflush_r+0x144>
    6ff0:	003fed06 	br	6fa8 <__alt_data_end+0xfffb1878>
    6ff4:	90a5883a 	add	r18,r18,r2
    6ff8:	047feb0e 	bge	zero,r17,6fa8 <__alt_data_end+0xfffb1878>
    6ffc:	80800917 	ldw	r2,36(r16)
    7000:	81400717 	ldw	r5,28(r16)
    7004:	880f883a 	mov	r7,r17
    7008:	900d883a 	mov	r6,r18
    700c:	9809883a 	mov	r4,r19
    7010:	103ee83a 	callr	r2
    7014:	88a3c83a 	sub	r17,r17,r2
    7018:	00bff616 	blt	zero,r2,6ff4 <__alt_data_end+0xfffb18c4>
    701c:	80c0030b 	ldhu	r3,12(r16)
    7020:	00bfffc4 	movi	r2,-1
    7024:	18c01014 	ori	r3,r3,64
    7028:	80c0030d 	sth	r3,12(r16)
    702c:	003fdf06 	br	6fac <__alt_data_end+0xfffb187c>
    7030:	00074740 	call	7474 <__sinit>
    7034:	003fab06 	br	6ee4 <__alt_data_end+0xfffb17b4>
    7038:	80800517 	ldw	r2,20(r16)
    703c:	003fea06 	br	6fe8 <__alt_data_end+0xfffb18b8>
    7040:	81400717 	ldw	r5,28(r16)
    7044:	000d883a 	mov	r6,zero
    7048:	9809883a 	mov	r4,r19
    704c:	01c00044 	movi	r7,1
    7050:	403ee83a 	callr	r8
    7054:	100d883a 	mov	r6,r2
    7058:	00bfffc4 	movi	r2,-1
    705c:	30801326 	beq	r6,r2,70ac <_fflush_r+0x1f4>
    7060:	8080030b 	ldhu	r2,12(r16)
    7064:	82000a17 	ldw	r8,40(r16)
    7068:	003fb006 	br	6f2c <__alt_data_end+0xfffb17fc>
    706c:	80c00f17 	ldw	r3,60(r16)
    7070:	00ffa716 	blt	zero,r3,6f10 <__alt_data_end+0xfffb17e0>
    7074:	003fcc06 	br	6fa8 <__alt_data_end+0xfffb1878>
    7078:	98c00017 	ldw	r3,0(r19)
    707c:	183fb926 	beq	r3,zero,6f64 <__alt_data_end+0xfffb1834>
    7080:	01000744 	movi	r4,29
    7084:	19000226 	beq	r3,r4,7090 <_fflush_r+0x1d8>
    7088:	01000584 	movi	r4,22
    708c:	1900101e 	bne	r3,r4,70d0 <_fflush_r+0x218>
    7090:	8080030b 	ldhu	r2,12(r16)
    7094:	80c00417 	ldw	r3,16(r16)
    7098:	80000115 	stw	zero,4(r16)
    709c:	10bdffcc 	andi	r2,r2,63487
    70a0:	8080030d 	sth	r2,12(r16)
    70a4:	80c00015 	stw	r3,0(r16)
    70a8:	003fb706 	br	6f88 <__alt_data_end+0xfffb1858>
    70ac:	98800017 	ldw	r2,0(r19)
    70b0:	103feb26 	beq	r2,zero,7060 <__alt_data_end+0xfffb1930>
    70b4:	00c00744 	movi	r3,29
    70b8:	10c00226 	beq	r2,r3,70c4 <_fflush_r+0x20c>
    70bc:	00c00584 	movi	r3,22
    70c0:	10ffd61e 	bne	r2,r3,701c <__alt_data_end+0xfffb18ec>
    70c4:	9c400015 	stw	r17,0(r19)
    70c8:	0005883a 	mov	r2,zero
    70cc:	003fb706 	br	6fac <__alt_data_end+0xfffb187c>
    70d0:	80c0030b 	ldhu	r3,12(r16)
    70d4:	18c01014 	ori	r3,r3,64
    70d8:	80c0030d 	sth	r3,12(r16)
    70dc:	003fb306 	br	6fac <__alt_data_end+0xfffb187c>

000070e0 <fflush>:
    70e0:	20000526 	beq	r4,zero,70f8 <fflush+0x18>
    70e4:	00800074 	movhi	r2,1
    70e8:	10901904 	addi	r2,r2,16484
    70ec:	200b883a 	mov	r5,r4
    70f0:	11000017 	ldw	r4,0(r2)
    70f4:	0006eb81 	jmpi	6eb8 <_fflush_r>
    70f8:	00800074 	movhi	r2,1
    70fc:	10901804 	addi	r2,r2,16480
    7100:	11000017 	ldw	r4,0(r2)
    7104:	01400034 	movhi	r5,0
    7108:	295bae04 	addi	r5,r5,28344
    710c:	0007e341 	jmpi	7e34 <_fwalk_reent>

00007110 <__fp_lock>:
    7110:	0005883a 	mov	r2,zero
    7114:	f800283a 	ret

00007118 <__fp_unlock>:
    7118:	0005883a 	mov	r2,zero
    711c:	f800283a 	ret

00007120 <_cleanup_r>:
    7120:	01400074 	movhi	r5,1
    7124:	296d9104 	addi	r5,r5,-18876
    7128:	0007d7c1 	jmpi	7d7c <_fwalk>

0000712c <__sinit.part.1>:
    712c:	defff604 	addi	sp,sp,-40
    7130:	00c00034 	movhi	r3,0
    7134:	dfc00915 	stw	ra,36(sp)
    7138:	df000815 	stw	fp,32(sp)
    713c:	ddc00715 	stw	r23,28(sp)
    7140:	dd800615 	stw	r22,24(sp)
    7144:	dd400515 	stw	r21,20(sp)
    7148:	dd000415 	stw	r20,16(sp)
    714c:	dcc00315 	stw	r19,12(sp)
    7150:	dc800215 	stw	r18,8(sp)
    7154:	dc400115 	stw	r17,4(sp)
    7158:	dc000015 	stw	r16,0(sp)
    715c:	18dc4804 	addi	r3,r3,28960
    7160:	24000117 	ldw	r16,4(r4)
    7164:	20c00f15 	stw	r3,60(r4)
    7168:	07000044 	movi	fp,1
    716c:	00c000c4 	movi	r3,3
    7170:	2080bb04 	addi	r2,r4,748
    7174:	20c0b915 	stw	r3,740(r4)
    7178:	27000e15 	stw	fp,56(r4)
    717c:	2080ba15 	stw	r2,744(r4)
    7180:	2000b815 	stw	zero,736(r4)
    7184:	05c00204 	movi	r23,8
    7188:	00800104 	movi	r2,4
    718c:	2025883a 	mov	r18,r4
    7190:	b80d883a 	mov	r6,r23
    7194:	81001704 	addi	r4,r16,92
    7198:	000b883a 	mov	r5,zero
    719c:	80000015 	stw	zero,0(r16)
    71a0:	80000115 	stw	zero,4(r16)
    71a4:	80000215 	stw	zero,8(r16)
    71a8:	8080030d 	sth	r2,12(r16)
    71ac:	80001915 	stw	zero,100(r16)
    71b0:	8000038d 	sth	zero,14(r16)
    71b4:	80000415 	stw	zero,16(r16)
    71b8:	80000515 	stw	zero,20(r16)
    71bc:	80000615 	stw	zero,24(r16)
    71c0:	00085000 	call	8500 <memset>
    71c4:	05800074 	movhi	r22,1
    71c8:	94400217 	ldw	r17,8(r18)
    71cc:	05400074 	movhi	r21,1
    71d0:	05000074 	movhi	r20,1
    71d4:	04c00074 	movhi	r19,1
    71d8:	b5a72004 	addi	r22,r22,-25472
    71dc:	ad673704 	addi	r21,r21,-25380
    71e0:	a5275604 	addi	r20,r20,-25256
    71e4:	9ce76d04 	addi	r19,r19,-25164
    71e8:	85800815 	stw	r22,32(r16)
    71ec:	85400915 	stw	r21,36(r16)
    71f0:	85000a15 	stw	r20,40(r16)
    71f4:	84c00b15 	stw	r19,44(r16)
    71f8:	84000715 	stw	r16,28(r16)
    71fc:	00800284 	movi	r2,10
    7200:	89001704 	addi	r4,r17,92
    7204:	b80d883a 	mov	r6,r23
    7208:	000b883a 	mov	r5,zero
    720c:	88000015 	stw	zero,0(r17)
    7210:	88000115 	stw	zero,4(r17)
    7214:	88000215 	stw	zero,8(r17)
    7218:	8880030d 	sth	r2,12(r17)
    721c:	88001915 	stw	zero,100(r17)
    7220:	8f00038d 	sth	fp,14(r17)
    7224:	88000415 	stw	zero,16(r17)
    7228:	88000515 	stw	zero,20(r17)
    722c:	88000615 	stw	zero,24(r17)
    7230:	00085000 	call	8500 <memset>
    7234:	94000317 	ldw	r16,12(r18)
    7238:	00800484 	movi	r2,18
    723c:	8c400715 	stw	r17,28(r17)
    7240:	8d800815 	stw	r22,32(r17)
    7244:	8d400915 	stw	r21,36(r17)
    7248:	8d000a15 	stw	r20,40(r17)
    724c:	8cc00b15 	stw	r19,44(r17)
    7250:	8080030d 	sth	r2,12(r16)
    7254:	00800084 	movi	r2,2
    7258:	80000015 	stw	zero,0(r16)
    725c:	80000115 	stw	zero,4(r16)
    7260:	80000215 	stw	zero,8(r16)
    7264:	80001915 	stw	zero,100(r16)
    7268:	8080038d 	sth	r2,14(r16)
    726c:	80000415 	stw	zero,16(r16)
    7270:	80000515 	stw	zero,20(r16)
    7274:	80000615 	stw	zero,24(r16)
    7278:	81001704 	addi	r4,r16,92
    727c:	000b883a 	mov	r5,zero
    7280:	b80d883a 	mov	r6,r23
    7284:	00085000 	call	8500 <memset>
    7288:	84000715 	stw	r16,28(r16)
    728c:	85800815 	stw	r22,32(r16)
    7290:	85400915 	stw	r21,36(r16)
    7294:	85000a15 	stw	r20,40(r16)
    7298:	84c00b15 	stw	r19,44(r16)
    729c:	dfc00917 	ldw	ra,36(sp)
    72a0:	df000817 	ldw	fp,32(sp)
    72a4:	ddc00717 	ldw	r23,28(sp)
    72a8:	dd800617 	ldw	r22,24(sp)
    72ac:	dd400517 	ldw	r21,20(sp)
    72b0:	dd000417 	ldw	r20,16(sp)
    72b4:	dcc00317 	ldw	r19,12(sp)
    72b8:	dc800217 	ldw	r18,8(sp)
    72bc:	dc400117 	ldw	r17,4(sp)
    72c0:	dc000017 	ldw	r16,0(sp)
    72c4:	dec00a04 	addi	sp,sp,40
    72c8:	f800283a 	ret

000072cc <__sfmoreglue>:
    72cc:	defffc04 	addi	sp,sp,-16
    72d0:	dc800215 	stw	r18,8(sp)
    72d4:	2825883a 	mov	r18,r5
    72d8:	dc000015 	stw	r16,0(sp)
    72dc:	01401a04 	movi	r5,104
    72e0:	2021883a 	mov	r16,r4
    72e4:	9009883a 	mov	r4,r18
    72e8:	dfc00315 	stw	ra,12(sp)
    72ec:	dc400115 	stw	r17,4(sp)
    72f0:	000ca900 	call	ca90 <__mulsi3>
    72f4:	8009883a 	mov	r4,r16
    72f8:	11400304 	addi	r5,r2,12
    72fc:	1023883a 	mov	r17,r2
    7300:	00029500 	call	2950 <_malloc_r>
    7304:	1021883a 	mov	r16,r2
    7308:	10000726 	beq	r2,zero,7328 <__sfmoreglue+0x5c>
    730c:	11000304 	addi	r4,r2,12
    7310:	10000015 	stw	zero,0(r2)
    7314:	14800115 	stw	r18,4(r2)
    7318:	11000215 	stw	r4,8(r2)
    731c:	000b883a 	mov	r5,zero
    7320:	880d883a 	mov	r6,r17
    7324:	00085000 	call	8500 <memset>
    7328:	8005883a 	mov	r2,r16
    732c:	dfc00317 	ldw	ra,12(sp)
    7330:	dc800217 	ldw	r18,8(sp)
    7334:	dc400117 	ldw	r17,4(sp)
    7338:	dc000017 	ldw	r16,0(sp)
    733c:	dec00404 	addi	sp,sp,16
    7340:	f800283a 	ret

00007344 <__sfp>:
    7344:	00800074 	movhi	r2,1
    7348:	defffb04 	addi	sp,sp,-20
    734c:	10901804 	addi	r2,r2,16480
    7350:	dc800215 	stw	r18,8(sp)
    7354:	14800017 	ldw	r18,0(r2)
    7358:	dcc00315 	stw	r19,12(sp)
    735c:	dfc00415 	stw	ra,16(sp)
    7360:	90800e17 	ldw	r2,56(r18)
    7364:	dc400115 	stw	r17,4(sp)
    7368:	dc000015 	stw	r16,0(sp)
    736c:	2027883a 	mov	r19,r4
    7370:	1000021e 	bne	r2,zero,737c <__sfp+0x38>
    7374:	9009883a 	mov	r4,r18
    7378:	000712c0 	call	712c <__sinit.part.1>
    737c:	9480b804 	addi	r18,r18,736
    7380:	047fffc4 	movi	r17,-1
    7384:	91400117 	ldw	r5,4(r18)
    7388:	94000217 	ldw	r16,8(r18)
    738c:	297fffc4 	addi	r5,r5,-1
    7390:	28000a16 	blt	r5,zero,73bc <__sfp+0x78>
    7394:	8080030f 	ldh	r2,12(r16)
    7398:	10000c26 	beq	r2,zero,73cc <__sfp+0x88>
    739c:	80c01d04 	addi	r3,r16,116
    73a0:	00000206 	br	73ac <__sfp+0x68>
    73a4:	18bfe60f 	ldh	r2,-104(r3)
    73a8:	10000826 	beq	r2,zero,73cc <__sfp+0x88>
    73ac:	297fffc4 	addi	r5,r5,-1
    73b0:	1c3ffd04 	addi	r16,r3,-12
    73b4:	18c01a04 	addi	r3,r3,104
    73b8:	2c7ffa1e 	bne	r5,r17,73a4 <__alt_data_end+0xfffb1c74>
    73bc:	90800017 	ldw	r2,0(r18)
    73c0:	10001d26 	beq	r2,zero,7438 <__sfp+0xf4>
    73c4:	1025883a 	mov	r18,r2
    73c8:	003fee06 	br	7384 <__alt_data_end+0xfffb1c54>
    73cc:	00bfffc4 	movi	r2,-1
    73d0:	8080038d 	sth	r2,14(r16)
    73d4:	00800044 	movi	r2,1
    73d8:	8080030d 	sth	r2,12(r16)
    73dc:	80001915 	stw	zero,100(r16)
    73e0:	80000015 	stw	zero,0(r16)
    73e4:	80000215 	stw	zero,8(r16)
    73e8:	80000115 	stw	zero,4(r16)
    73ec:	80000415 	stw	zero,16(r16)
    73f0:	80000515 	stw	zero,20(r16)
    73f4:	80000615 	stw	zero,24(r16)
    73f8:	81001704 	addi	r4,r16,92
    73fc:	000b883a 	mov	r5,zero
    7400:	01800204 	movi	r6,8
    7404:	00085000 	call	8500 <memset>
    7408:	8005883a 	mov	r2,r16
    740c:	80000c15 	stw	zero,48(r16)
    7410:	80000d15 	stw	zero,52(r16)
    7414:	80001115 	stw	zero,68(r16)
    7418:	80001215 	stw	zero,72(r16)
    741c:	dfc00417 	ldw	ra,16(sp)
    7420:	dcc00317 	ldw	r19,12(sp)
    7424:	dc800217 	ldw	r18,8(sp)
    7428:	dc400117 	ldw	r17,4(sp)
    742c:	dc000017 	ldw	r16,0(sp)
    7430:	dec00504 	addi	sp,sp,20
    7434:	f800283a 	ret
    7438:	9809883a 	mov	r4,r19
    743c:	01400104 	movi	r5,4
    7440:	00072cc0 	call	72cc <__sfmoreglue>
    7444:	90800015 	stw	r2,0(r18)
    7448:	103fde1e 	bne	r2,zero,73c4 <__alt_data_end+0xfffb1c94>
    744c:	00800304 	movi	r2,12
    7450:	98800015 	stw	r2,0(r19)
    7454:	0005883a 	mov	r2,zero
    7458:	003ff006 	br	741c <__alt_data_end+0xfffb1cec>

0000745c <_cleanup>:
    745c:	00800074 	movhi	r2,1
    7460:	10901804 	addi	r2,r2,16480
    7464:	11000017 	ldw	r4,0(r2)
    7468:	01400074 	movhi	r5,1
    746c:	296d9104 	addi	r5,r5,-18876
    7470:	0007d7c1 	jmpi	7d7c <_fwalk>

00007474 <__sinit>:
    7474:	20800e17 	ldw	r2,56(r4)
    7478:	10000126 	beq	r2,zero,7480 <__sinit+0xc>
    747c:	f800283a 	ret
    7480:	000712c1 	jmpi	712c <__sinit.part.1>

00007484 <__sfp_lock_acquire>:
    7484:	f800283a 	ret

00007488 <__sfp_lock_release>:
    7488:	f800283a 	ret

0000748c <__sinit_lock_acquire>:
    748c:	f800283a 	ret

00007490 <__sinit_lock_release>:
    7490:	f800283a 	ret

00007494 <__fp_lock_all>:
    7494:	00800074 	movhi	r2,1
    7498:	10901904 	addi	r2,r2,16484
    749c:	11000017 	ldw	r4,0(r2)
    74a0:	01400034 	movhi	r5,0
    74a4:	295c4404 	addi	r5,r5,28944
    74a8:	0007d7c1 	jmpi	7d7c <_fwalk>

000074ac <__fp_unlock_all>:
    74ac:	00800074 	movhi	r2,1
    74b0:	10901904 	addi	r2,r2,16484
    74b4:	11000017 	ldw	r4,0(r2)
    74b8:	01400034 	movhi	r5,0
    74bc:	295c4604 	addi	r5,r5,28952
    74c0:	0007d7c1 	jmpi	7d7c <_fwalk>

000074c4 <_malloc_trim_r>:
    74c4:	defffb04 	addi	sp,sp,-20
    74c8:	dcc00315 	stw	r19,12(sp)
    74cc:	04c00074 	movhi	r19,1
    74d0:	dc800215 	stw	r18,8(sp)
    74d4:	dc400115 	stw	r17,4(sp)
    74d8:	dc000015 	stw	r16,0(sp)
    74dc:	dfc00415 	stw	ra,16(sp)
    74e0:	2821883a 	mov	r16,r5
    74e4:	9cc96b04 	addi	r19,r19,9644
    74e8:	2025883a 	mov	r18,r4
    74ec:	000f8940 	call	f894 <__malloc_lock>
    74f0:	98800217 	ldw	r2,8(r19)
    74f4:	14400117 	ldw	r17,4(r2)
    74f8:	00bfff04 	movi	r2,-4
    74fc:	88a2703a 	and	r17,r17,r2
    7500:	8c21c83a 	sub	r16,r17,r16
    7504:	8403fbc4 	addi	r16,r16,4079
    7508:	8020d33a 	srli	r16,r16,12
    750c:	0083ffc4 	movi	r2,4095
    7510:	843fffc4 	addi	r16,r16,-1
    7514:	8020933a 	slli	r16,r16,12
    7518:	1400060e 	bge	r2,r16,7534 <_malloc_trim_r+0x70>
    751c:	9009883a 	mov	r4,r18
    7520:	000b883a 	mov	r5,zero
    7524:	000322c0 	call	322c <_sbrk_r>
    7528:	98c00217 	ldw	r3,8(r19)
    752c:	1c47883a 	add	r3,r3,r17
    7530:	10c00a26 	beq	r2,r3,755c <_malloc_trim_r+0x98>
    7534:	9009883a 	mov	r4,r18
    7538:	000f8b40 	call	f8b4 <__malloc_unlock>
    753c:	0005883a 	mov	r2,zero
    7540:	dfc00417 	ldw	ra,16(sp)
    7544:	dcc00317 	ldw	r19,12(sp)
    7548:	dc800217 	ldw	r18,8(sp)
    754c:	dc400117 	ldw	r17,4(sp)
    7550:	dc000017 	ldw	r16,0(sp)
    7554:	dec00504 	addi	sp,sp,20
    7558:	f800283a 	ret
    755c:	9009883a 	mov	r4,r18
    7560:	040bc83a 	sub	r5,zero,r16
    7564:	000322c0 	call	322c <_sbrk_r>
    7568:	00ffffc4 	movi	r3,-1
    756c:	10c00d26 	beq	r2,r3,75a4 <_malloc_trim_r+0xe0>
    7570:	00c00074 	movhi	r3,1
    7574:	18d6f704 	addi	r3,r3,23516
    7578:	18800017 	ldw	r2,0(r3)
    757c:	99000217 	ldw	r4,8(r19)
    7580:	8c23c83a 	sub	r17,r17,r16
    7584:	8c400054 	ori	r17,r17,1
    7588:	1421c83a 	sub	r16,r2,r16
    758c:	24400115 	stw	r17,4(r4)
    7590:	9009883a 	mov	r4,r18
    7594:	1c000015 	stw	r16,0(r3)
    7598:	000f8b40 	call	f8b4 <__malloc_unlock>
    759c:	00800044 	movi	r2,1
    75a0:	003fe706 	br	7540 <__alt_data_end+0xfffb1e10>
    75a4:	9009883a 	mov	r4,r18
    75a8:	000b883a 	mov	r5,zero
    75ac:	000322c0 	call	322c <_sbrk_r>
    75b0:	99000217 	ldw	r4,8(r19)
    75b4:	014003c4 	movi	r5,15
    75b8:	1107c83a 	sub	r3,r2,r4
    75bc:	28ffdd0e 	bge	r5,r3,7534 <__alt_data_end+0xfffb1e04>
    75c0:	01400074 	movhi	r5,1
    75c4:	29501604 	addi	r5,r5,16472
    75c8:	29400017 	ldw	r5,0(r5)
    75cc:	18c00054 	ori	r3,r3,1
    75d0:	20c00115 	stw	r3,4(r4)
    75d4:	00c00074 	movhi	r3,1
    75d8:	1145c83a 	sub	r2,r2,r5
    75dc:	18d6f704 	addi	r3,r3,23516
    75e0:	18800015 	stw	r2,0(r3)
    75e4:	003fd306 	br	7534 <__alt_data_end+0xfffb1e04>

000075e8 <_free_r>:
    75e8:	28004c26 	beq	r5,zero,771c <_free_r+0x134>
    75ec:	defffd04 	addi	sp,sp,-12
    75f0:	dc400115 	stw	r17,4(sp)
    75f4:	dc000015 	stw	r16,0(sp)
    75f8:	2023883a 	mov	r17,r4
    75fc:	2821883a 	mov	r16,r5
    7600:	dfc00215 	stw	ra,8(sp)
    7604:	000f8940 	call	f894 <__malloc_lock>
    7608:	813fff17 	ldw	r4,-4(r16)
    760c:	00bfff84 	movi	r2,-2
    7610:	02400074 	movhi	r9,1
    7614:	81bffe04 	addi	r6,r16,-8
    7618:	2084703a 	and	r2,r4,r2
    761c:	4a496b04 	addi	r9,r9,9644
    7620:	308b883a 	add	r5,r6,r2
    7624:	2a000117 	ldw	r8,4(r5)
    7628:	49c00217 	ldw	r7,8(r9)
    762c:	00ffff04 	movi	r3,-4
    7630:	40c6703a 	and	r3,r8,r3
    7634:	39405326 	beq	r7,r5,7784 <_free_r+0x19c>
    7638:	28c00115 	stw	r3,4(r5)
    763c:	2100004c 	andi	r4,r4,1
    7640:	2000091e 	bne	r4,zero,7668 <_free_r+0x80>
    7644:	81fffe17 	ldw	r7,-8(r16)
    7648:	4a000204 	addi	r8,r9,8
    764c:	31cdc83a 	sub	r6,r6,r7
    7650:	31000217 	ldw	r4,8(r6)
    7654:	11c5883a 	add	r2,r2,r7
    7658:	22006126 	beq	r4,r8,77e0 <_free_r+0x1f8>
    765c:	31c00317 	ldw	r7,12(r6)
    7660:	21c00315 	stw	r7,12(r4)
    7664:	39000215 	stw	r4,8(r7)
    7668:	28c9883a 	add	r4,r5,r3
    766c:	21c00117 	ldw	r7,4(r4)
    7670:	39c0004c 	andi	r7,r7,1
    7674:	38000d1e 	bne	r7,zero,76ac <_free_r+0xc4>
    7678:	29000217 	ldw	r4,8(r5)
    767c:	10c5883a 	add	r2,r2,r3
    7680:	00c00074 	movhi	r3,1
    7684:	18c96d04 	addi	r3,r3,9652
    7688:	20c07526 	beq	r4,r3,7860 <_free_r+0x278>
    768c:	29c00317 	ldw	r7,12(r5)
    7690:	11400054 	ori	r5,r2,1
    7694:	3087883a 	add	r3,r6,r2
    7698:	21c00315 	stw	r7,12(r4)
    769c:	39000215 	stw	r4,8(r7)
    76a0:	31400115 	stw	r5,4(r6)
    76a4:	18800015 	stw	r2,0(r3)
    76a8:	00000406 	br	76bc <_free_r+0xd4>
    76ac:	10c00054 	ori	r3,r2,1
    76b0:	30c00115 	stw	r3,4(r6)
    76b4:	3087883a 	add	r3,r6,r2
    76b8:	18800015 	stw	r2,0(r3)
    76bc:	00c07fc4 	movi	r3,511
    76c0:	18801736 	bltu	r3,r2,7720 <_free_r+0x138>
    76c4:	1004d0fa 	srli	r2,r2,3
    76c8:	01400044 	movi	r5,1
    76cc:	49000117 	ldw	r4,4(r9)
    76d0:	1087883a 	add	r3,r2,r2
    76d4:	18c7883a 	add	r3,r3,r3
    76d8:	1005d0ba 	srai	r2,r2,2
    76dc:	18c7883a 	add	r3,r3,r3
    76e0:	1a47883a 	add	r3,r3,r9
    76e4:	19c00217 	ldw	r7,8(r3)
    76e8:	2884983a 	sll	r2,r5,r2
    76ec:	30c00315 	stw	r3,12(r6)
    76f0:	31c00215 	stw	r7,8(r6)
    76f4:	1104b03a 	or	r2,r2,r4
    76f8:	19800215 	stw	r6,8(r3)
    76fc:	48800115 	stw	r2,4(r9)
    7700:	39800315 	stw	r6,12(r7)
    7704:	8809883a 	mov	r4,r17
    7708:	dfc00217 	ldw	ra,8(sp)
    770c:	dc400117 	ldw	r17,4(sp)
    7710:	dc000017 	ldw	r16,0(sp)
    7714:	dec00304 	addi	sp,sp,12
    7718:	000f8b41 	jmpi	f8b4 <__malloc_unlock>
    771c:	f800283a 	ret
    7720:	1006d27a 	srli	r3,r2,9
    7724:	01000104 	movi	r4,4
    7728:	20c04036 	bltu	r4,r3,782c <_free_r+0x244>
    772c:	1006d1ba 	srli	r3,r2,6
    7730:	19400e04 	addi	r5,r3,56
    7734:	2947883a 	add	r3,r5,r5
    7738:	18c7883a 	add	r3,r3,r3
    773c:	18c7883a 	add	r3,r3,r3
    7740:	1a49883a 	add	r4,r3,r9
    7744:	20c00217 	ldw	r3,8(r4)
    7748:	01c00074 	movhi	r7,1
    774c:	39c96b04 	addi	r7,r7,9644
    7750:	19003b26 	beq	r3,r4,7840 <_free_r+0x258>
    7754:	01ffff04 	movi	r7,-4
    7758:	19400117 	ldw	r5,4(r3)
    775c:	29ca703a 	and	r5,r5,r7
    7760:	1140022e 	bgeu	r2,r5,776c <_free_r+0x184>
    7764:	18c00217 	ldw	r3,8(r3)
    7768:	20fffb1e 	bne	r4,r3,7758 <__alt_data_end+0xfffb2028>
    776c:	18800317 	ldw	r2,12(r3)
    7770:	30800315 	stw	r2,12(r6)
    7774:	30c00215 	stw	r3,8(r6)
    7778:	11800215 	stw	r6,8(r2)
    777c:	19800315 	stw	r6,12(r3)
    7780:	003fe006 	br	7704 <__alt_data_end+0xfffb1fd4>
    7784:	2100004c 	andi	r4,r4,1
    7788:	1885883a 	add	r2,r3,r2
    778c:	2000071e 	bne	r4,zero,77ac <_free_r+0x1c4>
    7790:	817ffe17 	ldw	r5,-8(r16)
    7794:	314dc83a 	sub	r6,r6,r5
    7798:	30c00317 	ldw	r3,12(r6)
    779c:	31000217 	ldw	r4,8(r6)
    77a0:	1145883a 	add	r2,r2,r5
    77a4:	20c00315 	stw	r3,12(r4)
    77a8:	19000215 	stw	r4,8(r3)
    77ac:	10c00054 	ori	r3,r2,1
    77b0:	30c00115 	stw	r3,4(r6)
    77b4:	00c00074 	movhi	r3,1
    77b8:	18d01704 	addi	r3,r3,16476
    77bc:	18c00017 	ldw	r3,0(r3)
    77c0:	49800215 	stw	r6,8(r9)
    77c4:	10ffcf36 	bltu	r2,r3,7704 <__alt_data_end+0xfffb1fd4>
    77c8:	00800074 	movhi	r2,1
    77cc:	1096eb04 	addi	r2,r2,23468
    77d0:	11400017 	ldw	r5,0(r2)
    77d4:	8809883a 	mov	r4,r17
    77d8:	00074c40 	call	74c4 <_malloc_trim_r>
    77dc:	003fc906 	br	7704 <__alt_data_end+0xfffb1fd4>
    77e0:	28c9883a 	add	r4,r5,r3
    77e4:	21000117 	ldw	r4,4(r4)
    77e8:	2100004c 	andi	r4,r4,1
    77ec:	20000a1e 	bne	r4,zero,7818 <_free_r+0x230>
    77f0:	29000317 	ldw	r4,12(r5)
    77f4:	29400217 	ldw	r5,8(r5)
    77f8:	10c5883a 	add	r2,r2,r3
    77fc:	10c00054 	ori	r3,r2,1
    7800:	29000315 	stw	r4,12(r5)
    7804:	21400215 	stw	r5,8(r4)
    7808:	30c00115 	stw	r3,4(r6)
    780c:	308d883a 	add	r6,r6,r2
    7810:	30800015 	stw	r2,0(r6)
    7814:	003fbb06 	br	7704 <__alt_data_end+0xfffb1fd4>
    7818:	10c00054 	ori	r3,r2,1
    781c:	30c00115 	stw	r3,4(r6)
    7820:	308d883a 	add	r6,r6,r2
    7824:	30800015 	stw	r2,0(r6)
    7828:	003fb606 	br	7704 <__alt_data_end+0xfffb1fd4>
    782c:	01000504 	movi	r4,20
    7830:	20c01436 	bltu	r4,r3,7884 <_free_r+0x29c>
    7834:	194016c4 	addi	r5,r3,91
    7838:	2947883a 	add	r3,r5,r5
    783c:	003fbe06 	br	7738 <__alt_data_end+0xfffb2008>
    7840:	280bd0ba 	srai	r5,r5,2
    7844:	00800044 	movi	r2,1
    7848:	39000117 	ldw	r4,4(r7)
    784c:	114a983a 	sll	r5,r2,r5
    7850:	1805883a 	mov	r2,r3
    7854:	2908b03a 	or	r4,r5,r4
    7858:	39000115 	stw	r4,4(r7)
    785c:	003fc406 	br	7770 <__alt_data_end+0xfffb2040>
    7860:	49800515 	stw	r6,20(r9)
    7864:	49800415 	stw	r6,16(r9)
    7868:	10c00054 	ori	r3,r2,1
    786c:	31000315 	stw	r4,12(r6)
    7870:	31000215 	stw	r4,8(r6)
    7874:	30c00115 	stw	r3,4(r6)
    7878:	308d883a 	add	r6,r6,r2
    787c:	30800015 	stw	r2,0(r6)
    7880:	003fa006 	br	7704 <__alt_data_end+0xfffb1fd4>
    7884:	01001504 	movi	r4,84
    7888:	20c00436 	bltu	r4,r3,789c <_free_r+0x2b4>
    788c:	1006d33a 	srli	r3,r2,12
    7890:	19401b84 	addi	r5,r3,110
    7894:	2947883a 	add	r3,r5,r5
    7898:	003fa706 	br	7738 <__alt_data_end+0xfffb2008>
    789c:	01005504 	movi	r4,340
    78a0:	20c00436 	bltu	r4,r3,78b4 <_free_r+0x2cc>
    78a4:	1006d3fa 	srli	r3,r2,15
    78a8:	19401dc4 	addi	r5,r3,119
    78ac:	2947883a 	add	r3,r5,r5
    78b0:	003fa106 	br	7738 <__alt_data_end+0xfffb2008>
    78b4:	01015504 	movi	r4,1364
    78b8:	20c00436 	bltu	r4,r3,78cc <_free_r+0x2e4>
    78bc:	1006d4ba 	srli	r3,r2,18
    78c0:	19401f04 	addi	r5,r3,124
    78c4:	2947883a 	add	r3,r5,r5
    78c8:	003f9b06 	br	7738 <__alt_data_end+0xfffb2008>
    78cc:	00c03f04 	movi	r3,252
    78d0:	01401f84 	movi	r5,126
    78d4:	003f9806 	br	7738 <__alt_data_end+0xfffb2008>

000078d8 <__sfvwrite_r>:
    78d8:	30800217 	ldw	r2,8(r6)
    78dc:	10004526 	beq	r2,zero,79f4 <__sfvwrite_r+0x11c>
    78e0:	28c0030b 	ldhu	r3,12(r5)
    78e4:	defff404 	addi	sp,sp,-48
    78e8:	dd400715 	stw	r21,28(sp)
    78ec:	dcc00515 	stw	r19,20(sp)
    78f0:	dc000215 	stw	r16,8(sp)
    78f4:	dfc00b15 	stw	ra,44(sp)
    78f8:	df000a15 	stw	fp,40(sp)
    78fc:	ddc00915 	stw	r23,36(sp)
    7900:	dd800815 	stw	r22,32(sp)
    7904:	dd000615 	stw	r20,24(sp)
    7908:	dc800415 	stw	r18,16(sp)
    790c:	dc400315 	stw	r17,12(sp)
    7910:	1880020c 	andi	r2,r3,8
    7914:	2821883a 	mov	r16,r5
    7918:	202b883a 	mov	r21,r4
    791c:	3027883a 	mov	r19,r6
    7920:	10002526 	beq	r2,zero,79b8 <__sfvwrite_r+0xe0>
    7924:	28800417 	ldw	r2,16(r5)
    7928:	10002326 	beq	r2,zero,79b8 <__sfvwrite_r+0xe0>
    792c:	1880008c 	andi	r2,r3,2
    7930:	9c400017 	ldw	r17,0(r19)
    7934:	10003126 	beq	r2,zero,79fc <__sfvwrite_r+0x124>
    7938:	0029883a 	mov	r20,zero
    793c:	0025883a 	mov	r18,zero
    7940:	05810004 	movi	r22,1024
    7944:	a00d883a 	mov	r6,r20
    7948:	a809883a 	mov	r4,r21
    794c:	90002526 	beq	r18,zero,79e4 <__sfvwrite_r+0x10c>
    7950:	900f883a 	mov	r7,r18
    7954:	81400717 	ldw	r5,28(r16)
    7958:	b480012e 	bgeu	r22,r18,7960 <__sfvwrite_r+0x88>
    795c:	01c10004 	movi	r7,1024
    7960:	80800917 	ldw	r2,36(r16)
    7964:	103ee83a 	callr	r2
    7968:	0080510e 	bge	zero,r2,7ab0 <__sfvwrite_r+0x1d8>
    796c:	98c00217 	ldw	r3,8(r19)
    7970:	a0a9883a 	add	r20,r20,r2
    7974:	90a5c83a 	sub	r18,r18,r2
    7978:	1885c83a 	sub	r2,r3,r2
    797c:	98800215 	stw	r2,8(r19)
    7980:	103ff01e 	bne	r2,zero,7944 <__alt_data_end+0xfffb2214>
    7984:	0005883a 	mov	r2,zero
    7988:	dfc00b17 	ldw	ra,44(sp)
    798c:	df000a17 	ldw	fp,40(sp)
    7990:	ddc00917 	ldw	r23,36(sp)
    7994:	dd800817 	ldw	r22,32(sp)
    7998:	dd400717 	ldw	r21,28(sp)
    799c:	dd000617 	ldw	r20,24(sp)
    79a0:	dcc00517 	ldw	r19,20(sp)
    79a4:	dc800417 	ldw	r18,16(sp)
    79a8:	dc400317 	ldw	r17,12(sp)
    79ac:	dc000217 	ldw	r16,8(sp)
    79b0:	dec00c04 	addi	sp,sp,48
    79b4:	f800283a 	ret
    79b8:	a809883a 	mov	r4,r21
    79bc:	800b883a 	mov	r5,r16
    79c0:	00054380 	call	5438 <__swsetup_r>
    79c4:	80c0030b 	ldhu	r3,12(r16)
    79c8:	103fd826 	beq	r2,zero,792c <__alt_data_end+0xfffb21fc>
    79cc:	18c01014 	ori	r3,r3,64
    79d0:	80c0030d 	sth	r3,12(r16)
    79d4:	00c00244 	movi	r3,9
    79d8:	00bfffc4 	movi	r2,-1
    79dc:	a8c00015 	stw	r3,0(r21)
    79e0:	003fe906 	br	7988 <__alt_data_end+0xfffb2258>
    79e4:	8d000017 	ldw	r20,0(r17)
    79e8:	8c800117 	ldw	r18,4(r17)
    79ec:	8c400204 	addi	r17,r17,8
    79f0:	003fd406 	br	7944 <__alt_data_end+0xfffb2214>
    79f4:	0005883a 	mov	r2,zero
    79f8:	f800283a 	ret
    79fc:	1880004c 	andi	r2,r3,1
    7a00:	1000301e 	bne	r2,zero,7ac4 <__sfvwrite_r+0x1ec>
    7a04:	002f883a 	mov	r23,zero
    7a08:	0025883a 	mov	r18,zero
    7a0c:	90001c26 	beq	r18,zero,7a80 <__sfvwrite_r+0x1a8>
    7a10:	1880800c 	andi	r2,r3,512
    7a14:	85000217 	ldw	r20,8(r16)
    7a18:	10006c26 	beq	r2,zero,7bcc <__sfvwrite_r+0x2f4>
    7a1c:	a02d883a 	mov	r22,r20
    7a20:	95008536 	bltu	r18,r20,7c38 <__sfvwrite_r+0x360>
    7a24:	1881200c 	andi	r2,r3,1152
    7a28:	10009d1e 	bne	r2,zero,7ca0 <__sfvwrite_r+0x3c8>
    7a2c:	81000017 	ldw	r4,0(r16)
    7a30:	a039883a 	mov	fp,r20
    7a34:	9029883a 	mov	r20,r18
    7a38:	b80b883a 	mov	r5,r23
    7a3c:	b00d883a 	mov	r6,r22
    7a40:	00083a40 	call	83a4 <memmove>
    7a44:	80c00217 	ldw	r3,8(r16)
    7a48:	81000017 	ldw	r4,0(r16)
    7a4c:	9005883a 	mov	r2,r18
    7a50:	1f39c83a 	sub	fp,r3,fp
    7a54:	258f883a 	add	r7,r4,r22
    7a58:	87000215 	stw	fp,8(r16)
    7a5c:	81c00015 	stw	r7,0(r16)
    7a60:	98c00217 	ldw	r3,8(r19)
    7a64:	b8af883a 	add	r23,r23,r2
    7a68:	90a5c83a 	sub	r18,r18,r2
    7a6c:	1d05c83a 	sub	r2,r3,r20
    7a70:	98800215 	stw	r2,8(r19)
    7a74:	103fc326 	beq	r2,zero,7984 <__alt_data_end+0xfffb2254>
    7a78:	80c0030b 	ldhu	r3,12(r16)
    7a7c:	903fe41e 	bne	r18,zero,7a10 <__alt_data_end+0xfffb22e0>
    7a80:	8dc00017 	ldw	r23,0(r17)
    7a84:	8c800117 	ldw	r18,4(r17)
    7a88:	8c400204 	addi	r17,r17,8
    7a8c:	003fdf06 	br	7a0c <__alt_data_end+0xfffb22dc>
    7a90:	000966c0 	call	966c <_realloc_r>
    7a94:	102d883a 	mov	r22,r2
    7a98:	1000a01e 	bne	r2,zero,7d1c <__sfvwrite_r+0x444>
    7a9c:	81400417 	ldw	r5,16(r16)
    7aa0:	a809883a 	mov	r4,r21
    7aa4:	00075e80 	call	75e8 <_free_r>
    7aa8:	00800304 	movi	r2,12
    7aac:	a8800015 	stw	r2,0(r21)
    7ab0:	80c0030b 	ldhu	r3,12(r16)
    7ab4:	00bfffc4 	movi	r2,-1
    7ab8:	18c01014 	ori	r3,r3,64
    7abc:	80c0030d 	sth	r3,12(r16)
    7ac0:	003fb106 	br	7988 <__alt_data_end+0xfffb2258>
    7ac4:	0029883a 	mov	r20,zero
    7ac8:	0011883a 	mov	r8,zero
    7acc:	0039883a 	mov	fp,zero
    7ad0:	0025883a 	mov	r18,zero
    7ad4:	90001f26 	beq	r18,zero,7b54 <__sfvwrite_r+0x27c>
    7ad8:	40006826 	beq	r8,zero,7c7c <__sfvwrite_r+0x3a4>
    7adc:	a02f883a 	mov	r23,r20
    7ae0:	9500012e 	bgeu	r18,r20,7ae8 <__sfvwrite_r+0x210>
    7ae4:	902f883a 	mov	r23,r18
    7ae8:	81000017 	ldw	r4,0(r16)
    7aec:	80800417 	ldw	r2,16(r16)
    7af0:	b82d883a 	mov	r22,r23
    7af4:	81800217 	ldw	r6,8(r16)
    7af8:	81c00517 	ldw	r7,20(r16)
    7afc:	1100022e 	bgeu	r2,r4,7b08 <__sfvwrite_r+0x230>
    7b00:	31c7883a 	add	r3,r6,r7
    7b04:	1dc01816 	blt	r3,r23,7b68 <__sfvwrite_r+0x290>
    7b08:	b9c03f16 	blt	r23,r7,7c08 <__sfvwrite_r+0x330>
    7b0c:	80800917 	ldw	r2,36(r16)
    7b10:	81400717 	ldw	r5,28(r16)
    7b14:	a809883a 	mov	r4,r21
    7b18:	da000115 	stw	r8,4(sp)
    7b1c:	e00d883a 	mov	r6,fp
    7b20:	103ee83a 	callr	r2
    7b24:	102d883a 	mov	r22,r2
    7b28:	da000117 	ldw	r8,4(sp)
    7b2c:	00bfe00e 	bge	zero,r2,7ab0 <__alt_data_end+0xfffb2380>
    7b30:	a5a9c83a 	sub	r20,r20,r22
    7b34:	a0001f26 	beq	r20,zero,7bb4 <__sfvwrite_r+0x2dc>
    7b38:	98800217 	ldw	r2,8(r19)
    7b3c:	e5b9883a 	add	fp,fp,r22
    7b40:	95a5c83a 	sub	r18,r18,r22
    7b44:	15adc83a 	sub	r22,r2,r22
    7b48:	9d800215 	stw	r22,8(r19)
    7b4c:	b03f8d26 	beq	r22,zero,7984 <__alt_data_end+0xfffb2254>
    7b50:	903fe11e 	bne	r18,zero,7ad8 <__alt_data_end+0xfffb23a8>
    7b54:	8f000017 	ldw	fp,0(r17)
    7b58:	8c800117 	ldw	r18,4(r17)
    7b5c:	0011883a 	mov	r8,zero
    7b60:	8c400204 	addi	r17,r17,8
    7b64:	003fdb06 	br	7ad4 <__alt_data_end+0xfffb23a4>
    7b68:	180d883a 	mov	r6,r3
    7b6c:	e00b883a 	mov	r5,fp
    7b70:	da000115 	stw	r8,4(sp)
    7b74:	d8c00015 	stw	r3,0(sp)
    7b78:	00083a40 	call	83a4 <memmove>
    7b7c:	d8c00017 	ldw	r3,0(sp)
    7b80:	80800017 	ldw	r2,0(r16)
    7b84:	a809883a 	mov	r4,r21
    7b88:	800b883a 	mov	r5,r16
    7b8c:	10c5883a 	add	r2,r2,r3
    7b90:	80800015 	stw	r2,0(r16)
    7b94:	d8c00015 	stw	r3,0(sp)
    7b98:	0006eb80 	call	6eb8 <_fflush_r>
    7b9c:	d8c00017 	ldw	r3,0(sp)
    7ba0:	da000117 	ldw	r8,4(sp)
    7ba4:	103fc21e 	bne	r2,zero,7ab0 <__alt_data_end+0xfffb2380>
    7ba8:	182d883a 	mov	r22,r3
    7bac:	a5a9c83a 	sub	r20,r20,r22
    7bb0:	a03fe11e 	bne	r20,zero,7b38 <__alt_data_end+0xfffb2408>
    7bb4:	a809883a 	mov	r4,r21
    7bb8:	800b883a 	mov	r5,r16
    7bbc:	0006eb80 	call	6eb8 <_fflush_r>
    7bc0:	103fbb1e 	bne	r2,zero,7ab0 <__alt_data_end+0xfffb2380>
    7bc4:	0011883a 	mov	r8,zero
    7bc8:	003fdb06 	br	7b38 <__alt_data_end+0xfffb2408>
    7bcc:	81000017 	ldw	r4,0(r16)
    7bd0:	80800417 	ldw	r2,16(r16)
    7bd4:	1100012e 	bgeu	r2,r4,7bdc <__sfvwrite_r+0x304>
    7bd8:	a4805a36 	bltu	r20,r18,7d44 <__sfvwrite_r+0x46c>
    7bdc:	81c00517 	ldw	r7,20(r16)
    7be0:	91c01a36 	bltu	r18,r7,7c4c <__sfvwrite_r+0x374>
    7be4:	80800917 	ldw	r2,36(r16)
    7be8:	81400717 	ldw	r5,28(r16)
    7bec:	a809883a 	mov	r4,r21
    7bf0:	b80d883a 	mov	r6,r23
    7bf4:	103ee83a 	callr	r2
    7bf8:	1029883a 	mov	r20,r2
    7bfc:	00bfac0e 	bge	zero,r2,7ab0 <__alt_data_end+0xfffb2380>
    7c00:	a005883a 	mov	r2,r20
    7c04:	003f9606 	br	7a60 <__alt_data_end+0xfffb2330>
    7c08:	b80d883a 	mov	r6,r23
    7c0c:	e00b883a 	mov	r5,fp
    7c10:	da000115 	stw	r8,4(sp)
    7c14:	00083a40 	call	83a4 <memmove>
    7c18:	80800217 	ldw	r2,8(r16)
    7c1c:	80c00017 	ldw	r3,0(r16)
    7c20:	da000117 	ldw	r8,4(sp)
    7c24:	15c5c83a 	sub	r2,r2,r23
    7c28:	1def883a 	add	r23,r3,r23
    7c2c:	80800215 	stw	r2,8(r16)
    7c30:	85c00015 	stw	r23,0(r16)
    7c34:	003fbe06 	br	7b30 <__alt_data_end+0xfffb2400>
    7c38:	81000017 	ldw	r4,0(r16)
    7c3c:	9039883a 	mov	fp,r18
    7c40:	9029883a 	mov	r20,r18
    7c44:	902d883a 	mov	r22,r18
    7c48:	003f7b06 	br	7a38 <__alt_data_end+0xfffb2308>
    7c4c:	b80b883a 	mov	r5,r23
    7c50:	900d883a 	mov	r6,r18
    7c54:	00083a40 	call	83a4 <memmove>
    7c58:	80c00217 	ldw	r3,8(r16)
    7c5c:	80800017 	ldw	r2,0(r16)
    7c60:	9029883a 	mov	r20,r18
    7c64:	1c87c83a 	sub	r3,r3,r18
    7c68:	1485883a 	add	r2,r2,r18
    7c6c:	80800015 	stw	r2,0(r16)
    7c70:	80c00215 	stw	r3,8(r16)
    7c74:	9005883a 	mov	r2,r18
    7c78:	003f7906 	br	7a60 <__alt_data_end+0xfffb2330>
    7c7c:	e009883a 	mov	r4,fp
    7c80:	01400284 	movi	r5,10
    7c84:	900d883a 	mov	r6,r18
    7c88:	00081840 	call	8184 <memchr>
    7c8c:	10003826 	beq	r2,zero,7d70 <__sfvwrite_r+0x498>
    7c90:	10800044 	addi	r2,r2,1
    7c94:	1729c83a 	sub	r20,r2,fp
    7c98:	02000044 	movi	r8,1
    7c9c:	003f8f06 	br	7adc <__alt_data_end+0xfffb23ac>
    7ca0:	80800517 	ldw	r2,20(r16)
    7ca4:	81400417 	ldw	r5,16(r16)
    7ca8:	87000017 	ldw	fp,0(r16)
    7cac:	10a9883a 	add	r20,r2,r2
    7cb0:	a085883a 	add	r2,r20,r2
    7cb4:	1028d7fa 	srli	r20,r2,31
    7cb8:	e179c83a 	sub	fp,fp,r5
    7cbc:	e1000044 	addi	r4,fp,1
    7cc0:	a085883a 	add	r2,r20,r2
    7cc4:	1029d07a 	srai	r20,r2,1
    7cc8:	2485883a 	add	r2,r4,r18
    7ccc:	a00d883a 	mov	r6,r20
    7cd0:	a080022e 	bgeu	r20,r2,7cdc <__sfvwrite_r+0x404>
    7cd4:	1029883a 	mov	r20,r2
    7cd8:	100d883a 	mov	r6,r2
    7cdc:	18c1000c 	andi	r3,r3,1024
    7ce0:	a809883a 	mov	r4,r21
    7ce4:	183f6a26 	beq	r3,zero,7a90 <__alt_data_end+0xfffb2360>
    7ce8:	300b883a 	mov	r5,r6
    7cec:	00029500 	call	2950 <_malloc_r>
    7cf0:	102d883a 	mov	r22,r2
    7cf4:	103f6c26 	beq	r2,zero,7aa8 <__alt_data_end+0xfffb2378>
    7cf8:	81400417 	ldw	r5,16(r16)
    7cfc:	1009883a 	mov	r4,r2
    7d00:	e00d883a 	mov	r6,fp
    7d04:	000826c0 	call	826c <memcpy>
    7d08:	8080030b 	ldhu	r2,12(r16)
    7d0c:	00fedfc4 	movi	r3,-1153
    7d10:	10c4703a 	and	r2,r2,r3
    7d14:	10802014 	ori	r2,r2,128
    7d18:	8080030d 	sth	r2,12(r16)
    7d1c:	b709883a 	add	r4,r22,fp
    7d20:	a707c83a 	sub	r3,r20,fp
    7d24:	85800415 	stw	r22,16(r16)
    7d28:	85000515 	stw	r20,20(r16)
    7d2c:	81000015 	stw	r4,0(r16)
    7d30:	9039883a 	mov	fp,r18
    7d34:	80c00215 	stw	r3,8(r16)
    7d38:	9029883a 	mov	r20,r18
    7d3c:	902d883a 	mov	r22,r18
    7d40:	003f3d06 	br	7a38 <__alt_data_end+0xfffb2308>
    7d44:	b80b883a 	mov	r5,r23
    7d48:	a00d883a 	mov	r6,r20
    7d4c:	00083a40 	call	83a4 <memmove>
    7d50:	80800017 	ldw	r2,0(r16)
    7d54:	a809883a 	mov	r4,r21
    7d58:	800b883a 	mov	r5,r16
    7d5c:	1505883a 	add	r2,r2,r20
    7d60:	80800015 	stw	r2,0(r16)
    7d64:	0006eb80 	call	6eb8 <_fflush_r>
    7d68:	103fa526 	beq	r2,zero,7c00 <__alt_data_end+0xfffb24d0>
    7d6c:	003f5006 	br	7ab0 <__alt_data_end+0xfffb2380>
    7d70:	95000044 	addi	r20,r18,1
    7d74:	02000044 	movi	r8,1
    7d78:	003f5806 	br	7adc <__alt_data_end+0xfffb23ac>

00007d7c <_fwalk>:
    7d7c:	defff804 	addi	sp,sp,-32
    7d80:	dd400515 	stw	r21,20(sp)
    7d84:	2540b804 	addi	r21,r4,736
    7d88:	dd800615 	stw	r22,24(sp)
    7d8c:	dd000415 	stw	r20,16(sp)
    7d90:	dfc00715 	stw	ra,28(sp)
    7d94:	dcc00315 	stw	r19,12(sp)
    7d98:	dc800215 	stw	r18,8(sp)
    7d9c:	dc400115 	stw	r17,4(sp)
    7da0:	dc000015 	stw	r16,0(sp)
    7da4:	2829883a 	mov	r20,r5
    7da8:	002d883a 	mov	r22,zero
    7dac:	00074840 	call	7484 <__sfp_lock_acquire>
    7db0:	a8001426 	beq	r21,zero,7e04 <_fwalk+0x88>
    7db4:	04ffffc4 	movi	r19,-1
    7db8:	ac400117 	ldw	r17,4(r21)
    7dbc:	ac800217 	ldw	r18,8(r21)
    7dc0:	8c7fffc4 	addi	r17,r17,-1
    7dc4:	88000d16 	blt	r17,zero,7dfc <_fwalk+0x80>
    7dc8:	94000304 	addi	r16,r18,12
    7dcc:	94800384 	addi	r18,r18,14
    7dd0:	80c0000f 	ldh	r3,0(r16)
    7dd4:	8c7fffc4 	addi	r17,r17,-1
    7dd8:	813ffd04 	addi	r4,r16,-12
    7ddc:	18000426 	beq	r3,zero,7df0 <_fwalk+0x74>
    7de0:	90c0000f 	ldh	r3,0(r18)
    7de4:	1cc00226 	beq	r3,r19,7df0 <_fwalk+0x74>
    7de8:	a03ee83a 	callr	r20
    7dec:	b0acb03a 	or	r22,r22,r2
    7df0:	84001a04 	addi	r16,r16,104
    7df4:	94801a04 	addi	r18,r18,104
    7df8:	8cfff51e 	bne	r17,r19,7dd0 <__alt_data_end+0xfffb26a0>
    7dfc:	ad400017 	ldw	r21,0(r21)
    7e00:	a83fed1e 	bne	r21,zero,7db8 <__alt_data_end+0xfffb2688>
    7e04:	00074880 	call	7488 <__sfp_lock_release>
    7e08:	b005883a 	mov	r2,r22
    7e0c:	dfc00717 	ldw	ra,28(sp)
    7e10:	dd800617 	ldw	r22,24(sp)
    7e14:	dd400517 	ldw	r21,20(sp)
    7e18:	dd000417 	ldw	r20,16(sp)
    7e1c:	dcc00317 	ldw	r19,12(sp)
    7e20:	dc800217 	ldw	r18,8(sp)
    7e24:	dc400117 	ldw	r17,4(sp)
    7e28:	dc000017 	ldw	r16,0(sp)
    7e2c:	dec00804 	addi	sp,sp,32
    7e30:	f800283a 	ret

00007e34 <_fwalk_reent>:
    7e34:	defff804 	addi	sp,sp,-32
    7e38:	dd400515 	stw	r21,20(sp)
    7e3c:	2540b804 	addi	r21,r4,736
    7e40:	dd800615 	stw	r22,24(sp)
    7e44:	dd000415 	stw	r20,16(sp)
    7e48:	dcc00315 	stw	r19,12(sp)
    7e4c:	dfc00715 	stw	ra,28(sp)
    7e50:	dc800215 	stw	r18,8(sp)
    7e54:	dc400115 	stw	r17,4(sp)
    7e58:	dc000015 	stw	r16,0(sp)
    7e5c:	2027883a 	mov	r19,r4
    7e60:	2829883a 	mov	r20,r5
    7e64:	002d883a 	mov	r22,zero
    7e68:	00074840 	call	7484 <__sfp_lock_acquire>
    7e6c:	a8001326 	beq	r21,zero,7ebc <_fwalk_reent+0x88>
    7e70:	04bfffc4 	movi	r18,-1
    7e74:	ac400117 	ldw	r17,4(r21)
    7e78:	ac000217 	ldw	r16,8(r21)
    7e7c:	8c7fffc4 	addi	r17,r17,-1
    7e80:	88000c16 	blt	r17,zero,7eb4 <_fwalk_reent+0x80>
    7e84:	84000304 	addi	r16,r16,12
    7e88:	80c0000f 	ldh	r3,0(r16)
    7e8c:	8c7fffc4 	addi	r17,r17,-1
    7e90:	817ffd04 	addi	r5,r16,-12
    7e94:	18000526 	beq	r3,zero,7eac <_fwalk_reent+0x78>
    7e98:	80c0008f 	ldh	r3,2(r16)
    7e9c:	9809883a 	mov	r4,r19
    7ea0:	1c800226 	beq	r3,r18,7eac <_fwalk_reent+0x78>
    7ea4:	a03ee83a 	callr	r20
    7ea8:	b0acb03a 	or	r22,r22,r2
    7eac:	84001a04 	addi	r16,r16,104
    7eb0:	8cbff51e 	bne	r17,r18,7e88 <__alt_data_end+0xfffb2758>
    7eb4:	ad400017 	ldw	r21,0(r21)
    7eb8:	a83fee1e 	bne	r21,zero,7e74 <__alt_data_end+0xfffb2744>
    7ebc:	00074880 	call	7488 <__sfp_lock_release>
    7ec0:	b005883a 	mov	r2,r22
    7ec4:	dfc00717 	ldw	ra,28(sp)
    7ec8:	dd800617 	ldw	r22,24(sp)
    7ecc:	dd400517 	ldw	r21,20(sp)
    7ed0:	dd000417 	ldw	r20,16(sp)
    7ed4:	dcc00317 	ldw	r19,12(sp)
    7ed8:	dc800217 	ldw	r18,8(sp)
    7edc:	dc400117 	ldw	r17,4(sp)
    7ee0:	dc000017 	ldw	r16,0(sp)
    7ee4:	dec00804 	addi	sp,sp,32
    7ee8:	f800283a 	ret

00007eec <_setlocale_r>:
    7eec:	30001b26 	beq	r6,zero,7f5c <_setlocale_r+0x70>
    7ef0:	01400074 	movhi	r5,1
    7ef4:	defffe04 	addi	sp,sp,-8
    7ef8:	2948ca04 	addi	r5,r5,9000
    7efc:	3009883a 	mov	r4,r6
    7f00:	dc000015 	stw	r16,0(sp)
    7f04:	dfc00115 	stw	ra,4(sp)
    7f08:	3021883a 	mov	r16,r6
    7f0c:	0009dbc0 	call	9dbc <strcmp>
    7f10:	1000061e 	bne	r2,zero,7f2c <_setlocale_r+0x40>
    7f14:	00800074 	movhi	r2,1
    7f18:	1088c904 	addi	r2,r2,8996
    7f1c:	dfc00117 	ldw	ra,4(sp)
    7f20:	dc000017 	ldw	r16,0(sp)
    7f24:	dec00204 	addi	sp,sp,8
    7f28:	f800283a 	ret
    7f2c:	01400074 	movhi	r5,1
    7f30:	2948c904 	addi	r5,r5,8996
    7f34:	8009883a 	mov	r4,r16
    7f38:	0009dbc0 	call	9dbc <strcmp>
    7f3c:	103ff526 	beq	r2,zero,7f14 <__alt_data_end+0xfffb27e4>
    7f40:	01400074 	movhi	r5,1
    7f44:	2948b404 	addi	r5,r5,8912
    7f48:	8009883a 	mov	r4,r16
    7f4c:	0009dbc0 	call	9dbc <strcmp>
    7f50:	103ff026 	beq	r2,zero,7f14 <__alt_data_end+0xfffb27e4>
    7f54:	0005883a 	mov	r2,zero
    7f58:	003ff006 	br	7f1c <__alt_data_end+0xfffb27ec>
    7f5c:	00800074 	movhi	r2,1
    7f60:	1088c904 	addi	r2,r2,8996
    7f64:	f800283a 	ret

00007f68 <__locale_charset>:
    7f68:	00800074 	movhi	r2,1
    7f6c:	108b7e04 	addi	r2,r2,11768
    7f70:	f800283a 	ret

00007f74 <__locale_mb_cur_max>:
    7f74:	00800074 	movhi	r2,1
    7f78:	10901a04 	addi	r2,r2,16488
    7f7c:	10800017 	ldw	r2,0(r2)
    7f80:	f800283a 	ret

00007f84 <__locale_msgcharset>:
    7f84:	00800074 	movhi	r2,1
    7f88:	108b7604 	addi	r2,r2,11736
    7f8c:	f800283a 	ret

00007f90 <__locale_cjk_lang>:
    7f90:	0005883a 	mov	r2,zero
    7f94:	f800283a 	ret

00007f98 <_localeconv_r>:
    7f98:	00800074 	movhi	r2,1
    7f9c:	108b8604 	addi	r2,r2,11800
    7fa0:	f800283a 	ret

00007fa4 <setlocale>:
    7fa4:	00c00074 	movhi	r3,1
    7fa8:	18d01904 	addi	r3,r3,16484
    7fac:	2005883a 	mov	r2,r4
    7fb0:	19000017 	ldw	r4,0(r3)
    7fb4:	280d883a 	mov	r6,r5
    7fb8:	100b883a 	mov	r5,r2
    7fbc:	0007eec1 	jmpi	7eec <_setlocale_r>

00007fc0 <localeconv>:
    7fc0:	00800074 	movhi	r2,1
    7fc4:	108b8604 	addi	r2,r2,11800
    7fc8:	f800283a 	ret

00007fcc <__smakebuf_r>:
    7fcc:	2880030b 	ldhu	r2,12(r5)
    7fd0:	10c0008c 	andi	r3,r2,2
    7fd4:	1800401e 	bne	r3,zero,80d8 <__smakebuf_r+0x10c>
    7fd8:	deffec04 	addi	sp,sp,-80
    7fdc:	dc000f15 	stw	r16,60(sp)
    7fe0:	2821883a 	mov	r16,r5
    7fe4:	2940038f 	ldh	r5,14(r5)
    7fe8:	dc401015 	stw	r17,64(sp)
    7fec:	dfc01315 	stw	ra,76(sp)
    7ff0:	dcc01215 	stw	r19,72(sp)
    7ff4:	dc801115 	stw	r18,68(sp)
    7ff8:	2023883a 	mov	r17,r4
    7ffc:	28001b16 	blt	r5,zero,806c <__smakebuf_r+0xa0>
    8000:	d80d883a 	mov	r6,sp
    8004:	000b8340 	call	b834 <_fstat_r>
    8008:	10001716 	blt	r2,zero,8068 <__smakebuf_r+0x9c>
    800c:	d8800117 	ldw	r2,4(sp)
    8010:	00e00014 	movui	r3,32768
    8014:	10bc000c 	andi	r2,r2,61440
    8018:	10c03726 	beq	r2,r3,80f8 <__smakebuf_r+0x12c>
    801c:	80c0030b 	ldhu	r3,12(r16)
    8020:	18c20014 	ori	r3,r3,2048
    8024:	80c0030d 	sth	r3,12(r16)
    8028:	00c80004 	movi	r3,8192
    802c:	10c03c1e 	bne	r2,r3,8120 <__smakebuf_r+0x154>
    8030:	8140038f 	ldh	r5,14(r16)
    8034:	8809883a 	mov	r4,r17
    8038:	000b88c0 	call	b88c <_isatty_r>
    803c:	10004e26 	beq	r2,zero,8178 <__smakebuf_r+0x1ac>
    8040:	8080030b 	ldhu	r2,12(r16)
    8044:	04c00044 	movi	r19,1
    8048:	80c010c4 	addi	r3,r16,67
    804c:	14c4b03a 	or	r2,r2,r19
    8050:	8080030d 	sth	r2,12(r16)
    8054:	80c00015 	stw	r3,0(r16)
    8058:	80c00415 	stw	r3,16(r16)
    805c:	84c00515 	stw	r19,20(r16)
    8060:	04810004 	movi	r18,1024
    8064:	00000706 	br	8084 <__smakebuf_r+0xb8>
    8068:	8080030b 	ldhu	r2,12(r16)
    806c:	10c0200c 	andi	r3,r2,128
    8070:	18001f1e 	bne	r3,zero,80f0 <__smakebuf_r+0x124>
    8074:	04810004 	movi	r18,1024
    8078:	10820014 	ori	r2,r2,2048
    807c:	8080030d 	sth	r2,12(r16)
    8080:	0027883a 	mov	r19,zero
    8084:	8809883a 	mov	r4,r17
    8088:	900b883a 	mov	r5,r18
    808c:	00029500 	call	2950 <_malloc_r>
    8090:	10002e26 	beq	r2,zero,814c <__smakebuf_r+0x180>
    8094:	80c0030b 	ldhu	r3,12(r16)
    8098:	01000034 	movhi	r4,0
    809c:	211c4804 	addi	r4,r4,28960
    80a0:	89000f15 	stw	r4,60(r17)
    80a4:	18c02014 	ori	r3,r3,128
    80a8:	80c0030d 	sth	r3,12(r16)
    80ac:	80800015 	stw	r2,0(r16)
    80b0:	80800415 	stw	r2,16(r16)
    80b4:	84800515 	stw	r18,20(r16)
    80b8:	98001c1e 	bne	r19,zero,812c <__smakebuf_r+0x160>
    80bc:	dfc01317 	ldw	ra,76(sp)
    80c0:	dcc01217 	ldw	r19,72(sp)
    80c4:	dc801117 	ldw	r18,68(sp)
    80c8:	dc401017 	ldw	r17,64(sp)
    80cc:	dc000f17 	ldw	r16,60(sp)
    80d0:	dec01404 	addi	sp,sp,80
    80d4:	f800283a 	ret
    80d8:	288010c4 	addi	r2,r5,67
    80dc:	28800015 	stw	r2,0(r5)
    80e0:	28800415 	stw	r2,16(r5)
    80e4:	00800044 	movi	r2,1
    80e8:	28800515 	stw	r2,20(r5)
    80ec:	f800283a 	ret
    80f0:	04801004 	movi	r18,64
    80f4:	003fe006 	br	8078 <__alt_data_end+0xfffb2948>
    80f8:	81000a17 	ldw	r4,40(r16)
    80fc:	00c00074 	movhi	r3,1
    8100:	18e75604 	addi	r3,r3,-25256
    8104:	20ffc51e 	bne	r4,r3,801c <__alt_data_end+0xfffb28ec>
    8108:	80c0030b 	ldhu	r3,12(r16)
    810c:	01010004 	movi	r4,1024
    8110:	81001315 	stw	r4,76(r16)
    8114:	1906b03a 	or	r3,r3,r4
    8118:	80c0030d 	sth	r3,12(r16)
    811c:	003fc206 	br	8028 <__alt_data_end+0xfffb28f8>
    8120:	0027883a 	mov	r19,zero
    8124:	04810004 	movi	r18,1024
    8128:	003fd606 	br	8084 <__alt_data_end+0xfffb2954>
    812c:	8140038f 	ldh	r5,14(r16)
    8130:	8809883a 	mov	r4,r17
    8134:	000b88c0 	call	b88c <_isatty_r>
    8138:	103fe026 	beq	r2,zero,80bc <__alt_data_end+0xfffb298c>
    813c:	8080030b 	ldhu	r2,12(r16)
    8140:	10800054 	ori	r2,r2,1
    8144:	8080030d 	sth	r2,12(r16)
    8148:	003fdc06 	br	80bc <__alt_data_end+0xfffb298c>
    814c:	8080030b 	ldhu	r2,12(r16)
    8150:	10c0800c 	andi	r3,r2,512
    8154:	183fd91e 	bne	r3,zero,80bc <__alt_data_end+0xfffb298c>
    8158:	10800094 	ori	r2,r2,2
    815c:	80c010c4 	addi	r3,r16,67
    8160:	8080030d 	sth	r2,12(r16)
    8164:	00800044 	movi	r2,1
    8168:	80c00015 	stw	r3,0(r16)
    816c:	80c00415 	stw	r3,16(r16)
    8170:	80800515 	stw	r2,20(r16)
    8174:	003fd106 	br	80bc <__alt_data_end+0xfffb298c>
    8178:	04c00044 	movi	r19,1
    817c:	04810004 	movi	r18,1024
    8180:	003fc006 	br	8084 <__alt_data_end+0xfffb2954>

00008184 <memchr>:
    8184:	208000cc 	andi	r2,r4,3
    8188:	280f883a 	mov	r7,r5
    818c:	10003526 	beq	r2,zero,8264 <memchr+0xe0>
    8190:	30bfffc4 	addi	r2,r6,-1
    8194:	30001b26 	beq	r6,zero,8204 <memchr+0x80>
    8198:	21800003 	ldbu	r6,0(r4)
    819c:	28c03fcc 	andi	r3,r5,255
    81a0:	30c01a26 	beq	r6,r3,820c <memchr+0x88>
    81a4:	180d883a 	mov	r6,r3
    81a8:	00000406 	br	81bc <memchr+0x38>
    81ac:	10001526 	beq	r2,zero,8204 <memchr+0x80>
    81b0:	20c00003 	ldbu	r3,0(r4)
    81b4:	10bfffc4 	addi	r2,r2,-1
    81b8:	19801426 	beq	r3,r6,820c <memchr+0x88>
    81bc:	21000044 	addi	r4,r4,1
    81c0:	20c000cc 	andi	r3,r4,3
    81c4:	183ff91e 	bne	r3,zero,81ac <__alt_data_end+0xfffb2a7c>
    81c8:	024000c4 	movi	r9,3
    81cc:	48801136 	bltu	r9,r2,8214 <memchr+0x90>
    81d0:	10000c26 	beq	r2,zero,8204 <memchr+0x80>
    81d4:	20c00003 	ldbu	r3,0(r4)
    81d8:	29403fcc 	andi	r5,r5,255
    81dc:	19400b26 	beq	r3,r5,820c <memchr+0x88>
    81e0:	20c00044 	addi	r3,r4,1
    81e4:	2085883a 	add	r2,r4,r2
    81e8:	39803fcc 	andi	r6,r7,255
    81ec:	00000306 	br	81fc <memchr+0x78>
    81f0:	18c00044 	addi	r3,r3,1
    81f4:	197fffc3 	ldbu	r5,-1(r3)
    81f8:	29800426 	beq	r5,r6,820c <memchr+0x88>
    81fc:	1809883a 	mov	r4,r3
    8200:	18bffb1e 	bne	r3,r2,81f0 <__alt_data_end+0xfffb2ac0>
    8204:	0005883a 	mov	r2,zero
    8208:	f800283a 	ret
    820c:	2005883a 	mov	r2,r4
    8210:	f800283a 	ret
    8214:	28c03fcc 	andi	r3,r5,255
    8218:	1810923a 	slli	r8,r3,8
    821c:	02ffbff4 	movhi	r11,65279
    8220:	02a02074 	movhi	r10,32897
    8224:	40c6b03a 	or	r3,r8,r3
    8228:	1810943a 	slli	r8,r3,16
    822c:	5affbfc4 	addi	r11,r11,-257
    8230:	52a02004 	addi	r10,r10,-32640
    8234:	40d0b03a 	or	r8,r8,r3
    8238:	20c00017 	ldw	r3,0(r4)
    823c:	40c6f03a 	xor	r3,r8,r3
    8240:	1acd883a 	add	r6,r3,r11
    8244:	00c6303a 	nor	r3,zero,r3
    8248:	30c6703a 	and	r3,r6,r3
    824c:	1a86703a 	and	r3,r3,r10
    8250:	183fdf1e 	bne	r3,zero,81d0 <__alt_data_end+0xfffb2aa0>
    8254:	10bfff04 	addi	r2,r2,-4
    8258:	21000104 	addi	r4,r4,4
    825c:	48bff636 	bltu	r9,r2,8238 <__alt_data_end+0xfffb2b08>
    8260:	003fdb06 	br	81d0 <__alt_data_end+0xfffb2aa0>
    8264:	3005883a 	mov	r2,r6
    8268:	003fd706 	br	81c8 <__alt_data_end+0xfffb2a98>

0000826c <memcpy>:
    826c:	deffff04 	addi	sp,sp,-4
    8270:	dc000015 	stw	r16,0(sp)
    8274:	00c003c4 	movi	r3,15
    8278:	2005883a 	mov	r2,r4
    827c:	1980432e 	bgeu	r3,r6,838c <memcpy+0x120>
    8280:	2146b03a 	or	r3,r4,r5
    8284:	18c000cc 	andi	r3,r3,3
    8288:	1800421e 	bne	r3,zero,8394 <memcpy+0x128>
    828c:	343ffc04 	addi	r16,r6,-16
    8290:	8020d13a 	srli	r16,r16,4
    8294:	28c00104 	addi	r3,r5,4
    8298:	23400104 	addi	r13,r4,4
    829c:	801e913a 	slli	r15,r16,4
    82a0:	2b000204 	addi	r12,r5,8
    82a4:	22c00204 	addi	r11,r4,8
    82a8:	7bc00504 	addi	r15,r15,20
    82ac:	2a800304 	addi	r10,r5,12
    82b0:	22400304 	addi	r9,r4,12
    82b4:	2bdf883a 	add	r15,r5,r15
    82b8:	2811883a 	mov	r8,r5
    82bc:	200f883a 	mov	r7,r4
    82c0:	41000017 	ldw	r4,0(r8)
    82c4:	39c00404 	addi	r7,r7,16
    82c8:	18c00404 	addi	r3,r3,16
    82cc:	393ffc15 	stw	r4,-16(r7)
    82d0:	1bbffc17 	ldw	r14,-16(r3)
    82d4:	6b400404 	addi	r13,r13,16
    82d8:	5ac00404 	addi	r11,r11,16
    82dc:	6bbffc15 	stw	r14,-16(r13)
    82e0:	63800017 	ldw	r14,0(r12)
    82e4:	4a400404 	addi	r9,r9,16
    82e8:	42000404 	addi	r8,r8,16
    82ec:	5bbffc15 	stw	r14,-16(r11)
    82f0:	53800017 	ldw	r14,0(r10)
    82f4:	63000404 	addi	r12,r12,16
    82f8:	52800404 	addi	r10,r10,16
    82fc:	4bbffc15 	stw	r14,-16(r9)
    8300:	1bffef1e 	bne	r3,r15,82c0 <__alt_data_end+0xfffb2b90>
    8304:	81c00044 	addi	r7,r16,1
    8308:	380e913a 	slli	r7,r7,4
    830c:	310003cc 	andi	r4,r6,15
    8310:	02c000c4 	movi	r11,3
    8314:	11c7883a 	add	r3,r2,r7
    8318:	29cb883a 	add	r5,r5,r7
    831c:	59001f2e 	bgeu	r11,r4,839c <memcpy+0x130>
    8320:	1813883a 	mov	r9,r3
    8324:	2811883a 	mov	r8,r5
    8328:	200f883a 	mov	r7,r4
    832c:	42800017 	ldw	r10,0(r8)
    8330:	4a400104 	addi	r9,r9,4
    8334:	39ffff04 	addi	r7,r7,-4
    8338:	4abfff15 	stw	r10,-4(r9)
    833c:	42000104 	addi	r8,r8,4
    8340:	59fffa36 	bltu	r11,r7,832c <__alt_data_end+0xfffb2bfc>
    8344:	213fff04 	addi	r4,r4,-4
    8348:	2008d0ba 	srli	r4,r4,2
    834c:	318000cc 	andi	r6,r6,3
    8350:	21000044 	addi	r4,r4,1
    8354:	2109883a 	add	r4,r4,r4
    8358:	2109883a 	add	r4,r4,r4
    835c:	1907883a 	add	r3,r3,r4
    8360:	290b883a 	add	r5,r5,r4
    8364:	30000626 	beq	r6,zero,8380 <memcpy+0x114>
    8368:	198d883a 	add	r6,r3,r6
    836c:	29c00003 	ldbu	r7,0(r5)
    8370:	18c00044 	addi	r3,r3,1
    8374:	29400044 	addi	r5,r5,1
    8378:	19ffffc5 	stb	r7,-1(r3)
    837c:	19bffb1e 	bne	r3,r6,836c <__alt_data_end+0xfffb2c3c>
    8380:	dc000017 	ldw	r16,0(sp)
    8384:	dec00104 	addi	sp,sp,4
    8388:	f800283a 	ret
    838c:	2007883a 	mov	r3,r4
    8390:	003ff406 	br	8364 <__alt_data_end+0xfffb2c34>
    8394:	2007883a 	mov	r3,r4
    8398:	003ff306 	br	8368 <__alt_data_end+0xfffb2c38>
    839c:	200d883a 	mov	r6,r4
    83a0:	003ff006 	br	8364 <__alt_data_end+0xfffb2c34>

000083a4 <memmove>:
    83a4:	2005883a 	mov	r2,r4
    83a8:	29000b2e 	bgeu	r5,r4,83d8 <memmove+0x34>
    83ac:	298f883a 	add	r7,r5,r6
    83b0:	21c0092e 	bgeu	r4,r7,83d8 <memmove+0x34>
    83b4:	2187883a 	add	r3,r4,r6
    83b8:	198bc83a 	sub	r5,r3,r6
    83bc:	30004b26 	beq	r6,zero,84ec <memmove+0x148>
    83c0:	39ffffc4 	addi	r7,r7,-1
    83c4:	39000003 	ldbu	r4,0(r7)
    83c8:	18ffffc4 	addi	r3,r3,-1
    83cc:	19000005 	stb	r4,0(r3)
    83d0:	197ffb1e 	bne	r3,r5,83c0 <__alt_data_end+0xfffb2c90>
    83d4:	f800283a 	ret
    83d8:	00c003c4 	movi	r3,15
    83dc:	1980412e 	bgeu	r3,r6,84e4 <memmove+0x140>
    83e0:	1146b03a 	or	r3,r2,r5
    83e4:	18c000cc 	andi	r3,r3,3
    83e8:	1800411e 	bne	r3,zero,84f0 <memmove+0x14c>
    83ec:	33fffc04 	addi	r15,r6,-16
    83f0:	781ed13a 	srli	r15,r15,4
    83f4:	28c00104 	addi	r3,r5,4
    83f8:	13400104 	addi	r13,r2,4
    83fc:	781c913a 	slli	r14,r15,4
    8400:	2b000204 	addi	r12,r5,8
    8404:	12c00204 	addi	r11,r2,8
    8408:	73800504 	addi	r14,r14,20
    840c:	2a800304 	addi	r10,r5,12
    8410:	12400304 	addi	r9,r2,12
    8414:	2b9d883a 	add	r14,r5,r14
    8418:	2811883a 	mov	r8,r5
    841c:	100f883a 	mov	r7,r2
    8420:	41000017 	ldw	r4,0(r8)
    8424:	39c00404 	addi	r7,r7,16
    8428:	18c00404 	addi	r3,r3,16
    842c:	393ffc15 	stw	r4,-16(r7)
    8430:	193ffc17 	ldw	r4,-16(r3)
    8434:	6b400404 	addi	r13,r13,16
    8438:	5ac00404 	addi	r11,r11,16
    843c:	693ffc15 	stw	r4,-16(r13)
    8440:	61000017 	ldw	r4,0(r12)
    8444:	4a400404 	addi	r9,r9,16
    8448:	42000404 	addi	r8,r8,16
    844c:	593ffc15 	stw	r4,-16(r11)
    8450:	51000017 	ldw	r4,0(r10)
    8454:	63000404 	addi	r12,r12,16
    8458:	52800404 	addi	r10,r10,16
    845c:	493ffc15 	stw	r4,-16(r9)
    8460:	1bbfef1e 	bne	r3,r14,8420 <__alt_data_end+0xfffb2cf0>
    8464:	79000044 	addi	r4,r15,1
    8468:	2008913a 	slli	r4,r4,4
    846c:	328003cc 	andi	r10,r6,15
    8470:	02c000c4 	movi	r11,3
    8474:	1107883a 	add	r3,r2,r4
    8478:	290b883a 	add	r5,r5,r4
    847c:	5a801e2e 	bgeu	r11,r10,84f8 <memmove+0x154>
    8480:	1813883a 	mov	r9,r3
    8484:	2811883a 	mov	r8,r5
    8488:	500f883a 	mov	r7,r10
    848c:	41000017 	ldw	r4,0(r8)
    8490:	4a400104 	addi	r9,r9,4
    8494:	39ffff04 	addi	r7,r7,-4
    8498:	493fff15 	stw	r4,-4(r9)
    849c:	42000104 	addi	r8,r8,4
    84a0:	59fffa36 	bltu	r11,r7,848c <__alt_data_end+0xfffb2d5c>
    84a4:	513fff04 	addi	r4,r10,-4
    84a8:	2008d0ba 	srli	r4,r4,2
    84ac:	318000cc 	andi	r6,r6,3
    84b0:	21000044 	addi	r4,r4,1
    84b4:	2109883a 	add	r4,r4,r4
    84b8:	2109883a 	add	r4,r4,r4
    84bc:	1907883a 	add	r3,r3,r4
    84c0:	290b883a 	add	r5,r5,r4
    84c4:	30000926 	beq	r6,zero,84ec <memmove+0x148>
    84c8:	198d883a 	add	r6,r3,r6
    84cc:	29c00003 	ldbu	r7,0(r5)
    84d0:	18c00044 	addi	r3,r3,1
    84d4:	29400044 	addi	r5,r5,1
    84d8:	19ffffc5 	stb	r7,-1(r3)
    84dc:	19bffb1e 	bne	r3,r6,84cc <__alt_data_end+0xfffb2d9c>
    84e0:	f800283a 	ret
    84e4:	1007883a 	mov	r3,r2
    84e8:	003ff606 	br	84c4 <__alt_data_end+0xfffb2d94>
    84ec:	f800283a 	ret
    84f0:	1007883a 	mov	r3,r2
    84f4:	003ff406 	br	84c8 <__alt_data_end+0xfffb2d98>
    84f8:	500d883a 	mov	r6,r10
    84fc:	003ff106 	br	84c4 <__alt_data_end+0xfffb2d94>

00008500 <memset>:
    8500:	20c000cc 	andi	r3,r4,3
    8504:	2005883a 	mov	r2,r4
    8508:	18004326 	beq	r3,zero,8618 <memset+0x118>
    850c:	31ffffc4 	addi	r7,r6,-1
    8510:	30004026 	beq	r6,zero,8614 <memset+0x114>
    8514:	2813883a 	mov	r9,r5
    8518:	200d883a 	mov	r6,r4
    851c:	2007883a 	mov	r3,r4
    8520:	00000406 	br	8534 <memset+0x34>
    8524:	3a3fffc4 	addi	r8,r7,-1
    8528:	31800044 	addi	r6,r6,1
    852c:	38003926 	beq	r7,zero,8614 <memset+0x114>
    8530:	400f883a 	mov	r7,r8
    8534:	18c00044 	addi	r3,r3,1
    8538:	32400005 	stb	r9,0(r6)
    853c:	1a0000cc 	andi	r8,r3,3
    8540:	403ff81e 	bne	r8,zero,8524 <__alt_data_end+0xfffb2df4>
    8544:	010000c4 	movi	r4,3
    8548:	21c02d2e 	bgeu	r4,r7,8600 <memset+0x100>
    854c:	29803fcc 	andi	r6,r5,255
    8550:	3008923a 	slli	r4,r6,8
    8554:	218cb03a 	or	r6,r4,r6
    8558:	3008943a 	slli	r4,r6,16
    855c:	218cb03a 	or	r6,r4,r6
    8560:	010003c4 	movi	r4,15
    8564:	21c0182e 	bgeu	r4,r7,85c8 <memset+0xc8>
    8568:	3b3ffc04 	addi	r12,r7,-16
    856c:	6018d13a 	srli	r12,r12,4
    8570:	1a000104 	addi	r8,r3,4
    8574:	1ac00204 	addi	r11,r3,8
    8578:	6008913a 	slli	r4,r12,4
    857c:	1a800304 	addi	r10,r3,12
    8580:	1813883a 	mov	r9,r3
    8584:	21000504 	addi	r4,r4,20
    8588:	1909883a 	add	r4,r3,r4
    858c:	49800015 	stw	r6,0(r9)
    8590:	41800015 	stw	r6,0(r8)
    8594:	59800015 	stw	r6,0(r11)
    8598:	51800015 	stw	r6,0(r10)
    859c:	42000404 	addi	r8,r8,16
    85a0:	4a400404 	addi	r9,r9,16
    85a4:	5ac00404 	addi	r11,r11,16
    85a8:	52800404 	addi	r10,r10,16
    85ac:	413ff71e 	bne	r8,r4,858c <__alt_data_end+0xfffb2e5c>
    85b0:	63000044 	addi	r12,r12,1
    85b4:	6018913a 	slli	r12,r12,4
    85b8:	39c003cc 	andi	r7,r7,15
    85bc:	010000c4 	movi	r4,3
    85c0:	1b07883a 	add	r3,r3,r12
    85c4:	21c00e2e 	bgeu	r4,r7,8600 <memset+0x100>
    85c8:	1813883a 	mov	r9,r3
    85cc:	3811883a 	mov	r8,r7
    85d0:	010000c4 	movi	r4,3
    85d4:	49800015 	stw	r6,0(r9)
    85d8:	423fff04 	addi	r8,r8,-4
    85dc:	4a400104 	addi	r9,r9,4
    85e0:	223ffc36 	bltu	r4,r8,85d4 <__alt_data_end+0xfffb2ea4>
    85e4:	393fff04 	addi	r4,r7,-4
    85e8:	2008d0ba 	srli	r4,r4,2
    85ec:	39c000cc 	andi	r7,r7,3
    85f0:	21000044 	addi	r4,r4,1
    85f4:	2109883a 	add	r4,r4,r4
    85f8:	2109883a 	add	r4,r4,r4
    85fc:	1907883a 	add	r3,r3,r4
    8600:	38000426 	beq	r7,zero,8614 <memset+0x114>
    8604:	19cf883a 	add	r7,r3,r7
    8608:	19400005 	stb	r5,0(r3)
    860c:	18c00044 	addi	r3,r3,1
    8610:	19fffd1e 	bne	r3,r7,8608 <__alt_data_end+0xfffb2ed8>
    8614:	f800283a 	ret
    8618:	2007883a 	mov	r3,r4
    861c:	300f883a 	mov	r7,r6
    8620:	003fc806 	br	8544 <__alt_data_end+0xfffb2e14>

00008624 <_Balloc>:
    8624:	20801317 	ldw	r2,76(r4)
    8628:	defffc04 	addi	sp,sp,-16
    862c:	dc400115 	stw	r17,4(sp)
    8630:	dc000015 	stw	r16,0(sp)
    8634:	dfc00315 	stw	ra,12(sp)
    8638:	dc800215 	stw	r18,8(sp)
    863c:	2023883a 	mov	r17,r4
    8640:	2821883a 	mov	r16,r5
    8644:	10000f26 	beq	r2,zero,8684 <_Balloc+0x60>
    8648:	8407883a 	add	r3,r16,r16
    864c:	18c7883a 	add	r3,r3,r3
    8650:	10c7883a 	add	r3,r2,r3
    8654:	18800017 	ldw	r2,0(r3)
    8658:	10001126 	beq	r2,zero,86a0 <_Balloc+0x7c>
    865c:	11000017 	ldw	r4,0(r2)
    8660:	19000015 	stw	r4,0(r3)
    8664:	10000415 	stw	zero,16(r2)
    8668:	10000315 	stw	zero,12(r2)
    866c:	dfc00317 	ldw	ra,12(sp)
    8670:	dc800217 	ldw	r18,8(sp)
    8674:	dc400117 	ldw	r17,4(sp)
    8678:	dc000017 	ldw	r16,0(sp)
    867c:	dec00404 	addi	sp,sp,16
    8680:	f800283a 	ret
    8684:	01400104 	movi	r5,4
    8688:	01800844 	movi	r6,33
    868c:	000b46c0 	call	b46c <_calloc_r>
    8690:	88801315 	stw	r2,76(r17)
    8694:	103fec1e 	bne	r2,zero,8648 <__alt_data_end+0xfffb2f18>
    8698:	0005883a 	mov	r2,zero
    869c:	003ff306 	br	866c <__alt_data_end+0xfffb2f3c>
    86a0:	01400044 	movi	r5,1
    86a4:	2c24983a 	sll	r18,r5,r16
    86a8:	8809883a 	mov	r4,r17
    86ac:	91800144 	addi	r6,r18,5
    86b0:	318d883a 	add	r6,r6,r6
    86b4:	318d883a 	add	r6,r6,r6
    86b8:	000b46c0 	call	b46c <_calloc_r>
    86bc:	103ff626 	beq	r2,zero,8698 <__alt_data_end+0xfffb2f68>
    86c0:	14000115 	stw	r16,4(r2)
    86c4:	14800215 	stw	r18,8(r2)
    86c8:	003fe606 	br	8664 <__alt_data_end+0xfffb2f34>

000086cc <_Bfree>:
    86cc:	28000826 	beq	r5,zero,86f0 <_Bfree+0x24>
    86d0:	28c00117 	ldw	r3,4(r5)
    86d4:	20801317 	ldw	r2,76(r4)
    86d8:	18c7883a 	add	r3,r3,r3
    86dc:	18c7883a 	add	r3,r3,r3
    86e0:	10c5883a 	add	r2,r2,r3
    86e4:	10c00017 	ldw	r3,0(r2)
    86e8:	28c00015 	stw	r3,0(r5)
    86ec:	11400015 	stw	r5,0(r2)
    86f0:	f800283a 	ret

000086f4 <__multadd>:
    86f4:	defff704 	addi	sp,sp,-36
    86f8:	dc800215 	stw	r18,8(sp)
    86fc:	2c800417 	ldw	r18,16(r5)
    8700:	ddc00715 	stw	r23,28(sp)
    8704:	dd800615 	stw	r22,24(sp)
    8708:	dd000415 	stw	r20,16(sp)
    870c:	dcc00315 	stw	r19,12(sp)
    8710:	dc400115 	stw	r17,4(sp)
    8714:	dc000015 	stw	r16,0(sp)
    8718:	dfc00815 	stw	ra,32(sp)
    871c:	dd400515 	stw	r21,20(sp)
    8720:	2827883a 	mov	r19,r5
    8724:	2029883a 	mov	r20,r4
    8728:	3023883a 	mov	r17,r6
    872c:	3821883a 	mov	r16,r7
    8730:	2d800504 	addi	r22,r5,20
    8734:	002f883a 	mov	r23,zero
    8738:	b5400017 	ldw	r21,0(r22)
    873c:	880b883a 	mov	r5,r17
    8740:	bdc00044 	addi	r23,r23,1
    8744:	a93fffcc 	andi	r4,r21,65535
    8748:	000ca900 	call	ca90 <__mulsi3>
    874c:	1421883a 	add	r16,r2,r16
    8750:	a808d43a 	srli	r4,r21,16
    8754:	802ad43a 	srli	r21,r16,16
    8758:	880b883a 	mov	r5,r17
    875c:	000ca900 	call	ca90 <__mulsi3>
    8760:	a88f883a 	add	r7,r21,r2
    8764:	3804943a 	slli	r2,r7,16
    8768:	80ffffcc 	andi	r3,r16,65535
    876c:	b5800104 	addi	r22,r22,4
    8770:	10c7883a 	add	r3,r2,r3
    8774:	b0ffff15 	stw	r3,-4(r22)
    8778:	3820d43a 	srli	r16,r7,16
    877c:	bcbfee16 	blt	r23,r18,8738 <__alt_data_end+0xfffb3008>
    8780:	80000926 	beq	r16,zero,87a8 <__multadd+0xb4>
    8784:	98800217 	ldw	r2,8(r19)
    8788:	9080130e 	bge	r18,r2,87d8 <__multadd+0xe4>
    878c:	90800144 	addi	r2,r18,5
    8790:	1085883a 	add	r2,r2,r2
    8794:	1085883a 	add	r2,r2,r2
    8798:	9885883a 	add	r2,r19,r2
    879c:	14000015 	stw	r16,0(r2)
    87a0:	94800044 	addi	r18,r18,1
    87a4:	9c800415 	stw	r18,16(r19)
    87a8:	9805883a 	mov	r2,r19
    87ac:	dfc00817 	ldw	ra,32(sp)
    87b0:	ddc00717 	ldw	r23,28(sp)
    87b4:	dd800617 	ldw	r22,24(sp)
    87b8:	dd400517 	ldw	r21,20(sp)
    87bc:	dd000417 	ldw	r20,16(sp)
    87c0:	dcc00317 	ldw	r19,12(sp)
    87c4:	dc800217 	ldw	r18,8(sp)
    87c8:	dc400117 	ldw	r17,4(sp)
    87cc:	dc000017 	ldw	r16,0(sp)
    87d0:	dec00904 	addi	sp,sp,36
    87d4:	f800283a 	ret
    87d8:	99400117 	ldw	r5,4(r19)
    87dc:	a009883a 	mov	r4,r20
    87e0:	29400044 	addi	r5,r5,1
    87e4:	00086240 	call	8624 <_Balloc>
    87e8:	99800417 	ldw	r6,16(r19)
    87ec:	99400304 	addi	r5,r19,12
    87f0:	11000304 	addi	r4,r2,12
    87f4:	31800084 	addi	r6,r6,2
    87f8:	318d883a 	add	r6,r6,r6
    87fc:	318d883a 	add	r6,r6,r6
    8800:	1023883a 	mov	r17,r2
    8804:	000826c0 	call	826c <memcpy>
    8808:	99000117 	ldw	r4,4(r19)
    880c:	a0c01317 	ldw	r3,76(r20)
    8810:	2109883a 	add	r4,r4,r4
    8814:	2109883a 	add	r4,r4,r4
    8818:	1907883a 	add	r3,r3,r4
    881c:	18800017 	ldw	r2,0(r3)
    8820:	98800015 	stw	r2,0(r19)
    8824:	1cc00015 	stw	r19,0(r3)
    8828:	8827883a 	mov	r19,r17
    882c:	003fd706 	br	878c <__alt_data_end+0xfffb305c>

00008830 <__s2b>:
    8830:	defff904 	addi	sp,sp,-28
    8834:	dc400115 	stw	r17,4(sp)
    8838:	dc000015 	stw	r16,0(sp)
    883c:	2023883a 	mov	r17,r4
    8840:	2821883a 	mov	r16,r5
    8844:	39000204 	addi	r4,r7,8
    8848:	01400244 	movi	r5,9
    884c:	dcc00315 	stw	r19,12(sp)
    8850:	dc800215 	stw	r18,8(sp)
    8854:	dfc00615 	stw	ra,24(sp)
    8858:	dd400515 	stw	r21,20(sp)
    885c:	dd000415 	stw	r20,16(sp)
    8860:	3825883a 	mov	r18,r7
    8864:	3027883a 	mov	r19,r6
    8868:	000c9d00 	call	c9d0 <__divsi3>
    886c:	00c00044 	movi	r3,1
    8870:	000b883a 	mov	r5,zero
    8874:	1880030e 	bge	r3,r2,8884 <__s2b+0x54>
    8878:	18c7883a 	add	r3,r3,r3
    887c:	29400044 	addi	r5,r5,1
    8880:	18bffd16 	blt	r3,r2,8878 <__alt_data_end+0xfffb3148>
    8884:	8809883a 	mov	r4,r17
    8888:	00086240 	call	8624 <_Balloc>
    888c:	d8c00717 	ldw	r3,28(sp)
    8890:	10c00515 	stw	r3,20(r2)
    8894:	00c00044 	movi	r3,1
    8898:	10c00415 	stw	r3,16(r2)
    889c:	00c00244 	movi	r3,9
    88a0:	1cc0210e 	bge	r3,r19,8928 <__s2b+0xf8>
    88a4:	80eb883a 	add	r21,r16,r3
    88a8:	a829883a 	mov	r20,r21
    88ac:	84e1883a 	add	r16,r16,r19
    88b0:	a1c00007 	ldb	r7,0(r20)
    88b4:	8809883a 	mov	r4,r17
    88b8:	a5000044 	addi	r20,r20,1
    88bc:	100b883a 	mov	r5,r2
    88c0:	01800284 	movi	r6,10
    88c4:	39fff404 	addi	r7,r7,-48
    88c8:	00086f40 	call	86f4 <__multadd>
    88cc:	a43ff81e 	bne	r20,r16,88b0 <__alt_data_end+0xfffb3180>
    88d0:	ace1883a 	add	r16,r21,r19
    88d4:	843ffe04 	addi	r16,r16,-8
    88d8:	9c800a0e 	bge	r19,r18,8904 <__s2b+0xd4>
    88dc:	94e5c83a 	sub	r18,r18,r19
    88e0:	84a5883a 	add	r18,r16,r18
    88e4:	81c00007 	ldb	r7,0(r16)
    88e8:	8809883a 	mov	r4,r17
    88ec:	84000044 	addi	r16,r16,1
    88f0:	100b883a 	mov	r5,r2
    88f4:	01800284 	movi	r6,10
    88f8:	39fff404 	addi	r7,r7,-48
    88fc:	00086f40 	call	86f4 <__multadd>
    8900:	84bff81e 	bne	r16,r18,88e4 <__alt_data_end+0xfffb31b4>
    8904:	dfc00617 	ldw	ra,24(sp)
    8908:	dd400517 	ldw	r21,20(sp)
    890c:	dd000417 	ldw	r20,16(sp)
    8910:	dcc00317 	ldw	r19,12(sp)
    8914:	dc800217 	ldw	r18,8(sp)
    8918:	dc400117 	ldw	r17,4(sp)
    891c:	dc000017 	ldw	r16,0(sp)
    8920:	dec00704 	addi	sp,sp,28
    8924:	f800283a 	ret
    8928:	84000284 	addi	r16,r16,10
    892c:	1827883a 	mov	r19,r3
    8930:	003fe906 	br	88d8 <__alt_data_end+0xfffb31a8>

00008934 <__hi0bits>:
    8934:	20bfffec 	andhi	r2,r4,65535
    8938:	1000141e 	bne	r2,zero,898c <__hi0bits+0x58>
    893c:	2008943a 	slli	r4,r4,16
    8940:	00800404 	movi	r2,16
    8944:	20ffc02c 	andhi	r3,r4,65280
    8948:	1800021e 	bne	r3,zero,8954 <__hi0bits+0x20>
    894c:	2008923a 	slli	r4,r4,8
    8950:	10800204 	addi	r2,r2,8
    8954:	20fc002c 	andhi	r3,r4,61440
    8958:	1800021e 	bne	r3,zero,8964 <__hi0bits+0x30>
    895c:	2008913a 	slli	r4,r4,4
    8960:	10800104 	addi	r2,r2,4
    8964:	20f0002c 	andhi	r3,r4,49152
    8968:	1800031e 	bne	r3,zero,8978 <__hi0bits+0x44>
    896c:	2109883a 	add	r4,r4,r4
    8970:	10800084 	addi	r2,r2,2
    8974:	2109883a 	add	r4,r4,r4
    8978:	20000316 	blt	r4,zero,8988 <__hi0bits+0x54>
    897c:	2110002c 	andhi	r4,r4,16384
    8980:	2000041e 	bne	r4,zero,8994 <__hi0bits+0x60>
    8984:	00800804 	movi	r2,32
    8988:	f800283a 	ret
    898c:	0005883a 	mov	r2,zero
    8990:	003fec06 	br	8944 <__alt_data_end+0xfffb3214>
    8994:	10800044 	addi	r2,r2,1
    8998:	f800283a 	ret

0000899c <__lo0bits>:
    899c:	20c00017 	ldw	r3,0(r4)
    89a0:	188001cc 	andi	r2,r3,7
    89a4:	10000826 	beq	r2,zero,89c8 <__lo0bits+0x2c>
    89a8:	1880004c 	andi	r2,r3,1
    89ac:	1000211e 	bne	r2,zero,8a34 <__lo0bits+0x98>
    89b0:	1880008c 	andi	r2,r3,2
    89b4:	1000211e 	bne	r2,zero,8a3c <__lo0bits+0xa0>
    89b8:	1806d0ba 	srli	r3,r3,2
    89bc:	00800084 	movi	r2,2
    89c0:	20c00015 	stw	r3,0(r4)
    89c4:	f800283a 	ret
    89c8:	18bfffcc 	andi	r2,r3,65535
    89cc:	10001326 	beq	r2,zero,8a1c <__lo0bits+0x80>
    89d0:	0005883a 	mov	r2,zero
    89d4:	19403fcc 	andi	r5,r3,255
    89d8:	2800021e 	bne	r5,zero,89e4 <__lo0bits+0x48>
    89dc:	1806d23a 	srli	r3,r3,8
    89e0:	10800204 	addi	r2,r2,8
    89e4:	194003cc 	andi	r5,r3,15
    89e8:	2800021e 	bne	r5,zero,89f4 <__lo0bits+0x58>
    89ec:	1806d13a 	srli	r3,r3,4
    89f0:	10800104 	addi	r2,r2,4
    89f4:	194000cc 	andi	r5,r3,3
    89f8:	2800021e 	bne	r5,zero,8a04 <__lo0bits+0x68>
    89fc:	1806d0ba 	srli	r3,r3,2
    8a00:	10800084 	addi	r2,r2,2
    8a04:	1940004c 	andi	r5,r3,1
    8a08:	2800081e 	bne	r5,zero,8a2c <__lo0bits+0x90>
    8a0c:	1806d07a 	srli	r3,r3,1
    8a10:	1800051e 	bne	r3,zero,8a28 <__lo0bits+0x8c>
    8a14:	00800804 	movi	r2,32
    8a18:	f800283a 	ret
    8a1c:	1806d43a 	srli	r3,r3,16
    8a20:	00800404 	movi	r2,16
    8a24:	003feb06 	br	89d4 <__alt_data_end+0xfffb32a4>
    8a28:	10800044 	addi	r2,r2,1
    8a2c:	20c00015 	stw	r3,0(r4)
    8a30:	f800283a 	ret
    8a34:	0005883a 	mov	r2,zero
    8a38:	f800283a 	ret
    8a3c:	1806d07a 	srli	r3,r3,1
    8a40:	00800044 	movi	r2,1
    8a44:	20c00015 	stw	r3,0(r4)
    8a48:	f800283a 	ret

00008a4c <__i2b>:
    8a4c:	defffd04 	addi	sp,sp,-12
    8a50:	dc000015 	stw	r16,0(sp)
    8a54:	04000044 	movi	r16,1
    8a58:	dc400115 	stw	r17,4(sp)
    8a5c:	2823883a 	mov	r17,r5
    8a60:	800b883a 	mov	r5,r16
    8a64:	dfc00215 	stw	ra,8(sp)
    8a68:	00086240 	call	8624 <_Balloc>
    8a6c:	14400515 	stw	r17,20(r2)
    8a70:	14000415 	stw	r16,16(r2)
    8a74:	dfc00217 	ldw	ra,8(sp)
    8a78:	dc400117 	ldw	r17,4(sp)
    8a7c:	dc000017 	ldw	r16,0(sp)
    8a80:	dec00304 	addi	sp,sp,12
    8a84:	f800283a 	ret

00008a88 <__multiply>:
    8a88:	deffef04 	addi	sp,sp,-68
    8a8c:	dc400815 	stw	r17,32(sp)
    8a90:	dc000715 	stw	r16,28(sp)
    8a94:	2c400417 	ldw	r17,16(r5)
    8a98:	34000417 	ldw	r16,16(r6)
    8a9c:	dd800d15 	stw	r22,52(sp)
    8aa0:	dc800915 	stw	r18,36(sp)
    8aa4:	dfc01015 	stw	ra,64(sp)
    8aa8:	df000f15 	stw	fp,60(sp)
    8aac:	ddc00e15 	stw	r23,56(sp)
    8ab0:	dd400c15 	stw	r21,48(sp)
    8ab4:	dd000b15 	stw	r20,44(sp)
    8ab8:	dcc00a15 	stw	r19,40(sp)
    8abc:	2825883a 	mov	r18,r5
    8ac0:	302d883a 	mov	r22,r6
    8ac4:	8c009116 	blt	r17,r16,8d0c <__multiply+0x284>
    8ac8:	8005883a 	mov	r2,r16
    8acc:	8821883a 	mov	r16,r17
    8ad0:	1023883a 	mov	r17,r2
    8ad4:	90800217 	ldw	r2,8(r18)
    8ad8:	8447883a 	add	r3,r16,r17
    8adc:	d8c00215 	stw	r3,8(sp)
    8ae0:	91400117 	ldw	r5,4(r18)
    8ae4:	10c0010e 	bge	r2,r3,8aec <__multiply+0x64>
    8ae8:	29400044 	addi	r5,r5,1
    8aec:	00086240 	call	8624 <_Balloc>
    8af0:	d8c00217 	ldw	r3,8(sp)
    8af4:	d8800615 	stw	r2,24(sp)
    8af8:	18eb883a 	add	r21,r3,r3
    8afc:	ad6b883a 	add	r21,r21,r21
    8b00:	10c00504 	addi	r3,r2,20
    8b04:	1d6b883a 	add	r21,r3,r21
    8b08:	d8c00115 	stw	r3,4(sp)
    8b0c:	dd400315 	stw	r21,12(sp)
    8b10:	1805883a 	mov	r2,r3
    8b14:	1d40042e 	bgeu	r3,r21,8b28 <__multiply+0xa0>
    8b18:	d8c00317 	ldw	r3,12(sp)
    8b1c:	10000015 	stw	zero,0(r2)
    8b20:	10800104 	addi	r2,r2,4
    8b24:	10fffc36 	bltu	r2,r3,8b18 <__alt_data_end+0xfffb33e8>
    8b28:	8c63883a 	add	r17,r17,r17
    8b2c:	b5800504 	addi	r22,r22,20
    8b30:	8c63883a 	add	r17,r17,r17
    8b34:	94800504 	addi	r18,r18,20
    8b38:	8421883a 	add	r16,r16,r16
    8b3c:	b463883a 	add	r17,r22,r17
    8b40:	8421883a 	add	r16,r16,r16
    8b44:	dd800015 	stw	r22,0(sp)
    8b48:	dc800415 	stw	r18,16(sp)
    8b4c:	dc400515 	stw	r17,20(sp)
    8b50:	9429883a 	add	r20,r18,r16
    8b54:	b4404f2e 	bgeu	r22,r17,8c94 <__multiply+0x20c>
    8b58:	d8c00017 	ldw	r3,0(sp)
    8b5c:	1c800017 	ldw	r18,0(r3)
    8b60:	943fffcc 	andi	r16,r18,65535
    8b64:	80001e26 	beq	r16,zero,8be0 <__multiply+0x158>
    8b68:	dd800117 	ldw	r22,4(sp)
    8b6c:	dd400417 	ldw	r21,16(sp)
    8b70:	0025883a 	mov	r18,zero
    8b74:	adc00017 	ldw	r23,0(r21)
    8b78:	b4c00017 	ldw	r19,0(r22)
    8b7c:	800b883a 	mov	r5,r16
    8b80:	b93fffcc 	andi	r4,r23,65535
    8b84:	000ca900 	call	ca90 <__mulsi3>
    8b88:	9c7fffcc 	andi	r17,r19,65535
    8b8c:	8885883a 	add	r2,r17,r2
    8b90:	b808d43a 	srli	r4,r23,16
    8b94:	14a3883a 	add	r17,r2,r18
    8b98:	9826d43a 	srli	r19,r19,16
    8b9c:	8824d43a 	srli	r18,r17,16
    8ba0:	800b883a 	mov	r5,r16
    8ba4:	000ca900 	call	ca90 <__mulsi3>
    8ba8:	9885883a 	add	r2,r19,r2
    8bac:	14a7883a 	add	r19,r2,r18
    8bb0:	88ffffcc 	andi	r3,r17,65535
    8bb4:	9822943a 	slli	r17,r19,16
    8bb8:	ad400104 	addi	r21,r21,4
    8bbc:	b005883a 	mov	r2,r22
    8bc0:	88c6b03a 	or	r3,r17,r3
    8bc4:	b0c00015 	stw	r3,0(r22)
    8bc8:	9824d43a 	srli	r18,r19,16
    8bcc:	b5800104 	addi	r22,r22,4
    8bd0:	ad3fe836 	bltu	r21,r20,8b74 <__alt_data_end+0xfffb3444>
    8bd4:	d8c00017 	ldw	r3,0(sp)
    8bd8:	14800115 	stw	r18,4(r2)
    8bdc:	1c800017 	ldw	r18,0(r3)
    8be0:	9024d43a 	srli	r18,r18,16
    8be4:	90002226 	beq	r18,zero,8c70 <__multiply+0x1e8>
    8be8:	d8c00117 	ldw	r3,4(sp)
    8bec:	dd800417 	ldw	r22,16(sp)
    8bf0:	002f883a 	mov	r23,zero
    8bf4:	1f000017 	ldw	fp,0(r3)
    8bf8:	1823883a 	mov	r17,r3
    8bfc:	182b883a 	mov	r21,r3
    8c00:	e021883a 	mov	r16,fp
    8c04:	00000106 	br	8c0c <__multiply+0x184>
    8c08:	982b883a 	mov	r21,r19
    8c0c:	b100000b 	ldhu	r4,0(r22)
    8c10:	8020d43a 	srli	r16,r16,16
    8c14:	900b883a 	mov	r5,r18
    8c18:	000ca900 	call	ca90 <__mulsi3>
    8c1c:	1405883a 	add	r2,r2,r16
    8c20:	15ef883a 	add	r23,r2,r23
    8c24:	b804943a 	slli	r2,r23,16
    8c28:	e0ffffcc 	andi	r3,fp,65535
    8c2c:	8c400104 	addi	r17,r17,4
    8c30:	10c6b03a 	or	r3,r2,r3
    8c34:	88ffff15 	stw	r3,-4(r17)
    8c38:	b5800104 	addi	r22,r22,4
    8c3c:	b13fff17 	ldw	r4,-4(r22)
    8c40:	acc00104 	addi	r19,r21,4
    8c44:	900b883a 	mov	r5,r18
    8c48:	2008d43a 	srli	r4,r4,16
    8c4c:	9c000017 	ldw	r16,0(r19)
    8c50:	000ca900 	call	ca90 <__mulsi3>
    8c54:	b806d43a 	srli	r3,r23,16
    8c58:	813fffcc 	andi	r4,r16,65535
    8c5c:	1105883a 	add	r2,r2,r4
    8c60:	10f9883a 	add	fp,r2,r3
    8c64:	e02ed43a 	srli	r23,fp,16
    8c68:	b53fe736 	bltu	r22,r20,8c08 <__alt_data_end+0xfffb34d8>
    8c6c:	af000115 	stw	fp,4(r21)
    8c70:	d8c00017 	ldw	r3,0(sp)
    8c74:	d9000517 	ldw	r4,20(sp)
    8c78:	18c00104 	addi	r3,r3,4
    8c7c:	d8c00015 	stw	r3,0(sp)
    8c80:	d8c00117 	ldw	r3,4(sp)
    8c84:	18c00104 	addi	r3,r3,4
    8c88:	d8c00115 	stw	r3,4(sp)
    8c8c:	d8c00017 	ldw	r3,0(sp)
    8c90:	193fb136 	bltu	r3,r4,8b58 <__alt_data_end+0xfffb3428>
    8c94:	d8c00217 	ldw	r3,8(sp)
    8c98:	00c00c0e 	bge	zero,r3,8ccc <__multiply+0x244>
    8c9c:	d8c00317 	ldw	r3,12(sp)
    8ca0:	18bfff17 	ldw	r2,-4(r3)
    8ca4:	1d7fff04 	addi	r21,r3,-4
    8ca8:	10000326 	beq	r2,zero,8cb8 <__multiply+0x230>
    8cac:	00000706 	br	8ccc <__multiply+0x244>
    8cb0:	a8800017 	ldw	r2,0(r21)
    8cb4:	1000051e 	bne	r2,zero,8ccc <__multiply+0x244>
    8cb8:	d8c00217 	ldw	r3,8(sp)
    8cbc:	ad7fff04 	addi	r21,r21,-4
    8cc0:	18ffffc4 	addi	r3,r3,-1
    8cc4:	d8c00215 	stw	r3,8(sp)
    8cc8:	183ff91e 	bne	r3,zero,8cb0 <__alt_data_end+0xfffb3580>
    8ccc:	d8c00617 	ldw	r3,24(sp)
    8cd0:	d9000217 	ldw	r4,8(sp)
    8cd4:	1805883a 	mov	r2,r3
    8cd8:	19000415 	stw	r4,16(r3)
    8cdc:	dfc01017 	ldw	ra,64(sp)
    8ce0:	df000f17 	ldw	fp,60(sp)
    8ce4:	ddc00e17 	ldw	r23,56(sp)
    8ce8:	dd800d17 	ldw	r22,52(sp)
    8cec:	dd400c17 	ldw	r21,48(sp)
    8cf0:	dd000b17 	ldw	r20,44(sp)
    8cf4:	dcc00a17 	ldw	r19,40(sp)
    8cf8:	dc800917 	ldw	r18,36(sp)
    8cfc:	dc400817 	ldw	r17,32(sp)
    8d00:	dc000717 	ldw	r16,28(sp)
    8d04:	dec01104 	addi	sp,sp,68
    8d08:	f800283a 	ret
    8d0c:	3025883a 	mov	r18,r6
    8d10:	282d883a 	mov	r22,r5
    8d14:	003f6f06 	br	8ad4 <__alt_data_end+0xfffb33a4>

00008d18 <__pow5mult>:
    8d18:	defffa04 	addi	sp,sp,-24
    8d1c:	dcc00315 	stw	r19,12(sp)
    8d20:	dc800215 	stw	r18,8(sp)
    8d24:	dc000015 	stw	r16,0(sp)
    8d28:	dfc00515 	stw	ra,20(sp)
    8d2c:	dd000415 	stw	r20,16(sp)
    8d30:	dc400115 	stw	r17,4(sp)
    8d34:	308000cc 	andi	r2,r6,3
    8d38:	3021883a 	mov	r16,r6
    8d3c:	2027883a 	mov	r19,r4
    8d40:	2825883a 	mov	r18,r5
    8d44:	10002e1e 	bne	r2,zero,8e00 <__pow5mult+0xe8>
    8d48:	8021d0ba 	srai	r16,r16,2
    8d4c:	80001a26 	beq	r16,zero,8db8 <__pow5mult+0xa0>
    8d50:	9c401217 	ldw	r17,72(r19)
    8d54:	8800061e 	bne	r17,zero,8d70 <__pow5mult+0x58>
    8d58:	00003406 	br	8e2c <__pow5mult+0x114>
    8d5c:	8021d07a 	srai	r16,r16,1
    8d60:	80001526 	beq	r16,zero,8db8 <__pow5mult+0xa0>
    8d64:	88800017 	ldw	r2,0(r17)
    8d68:	10001c26 	beq	r2,zero,8ddc <__pow5mult+0xc4>
    8d6c:	1023883a 	mov	r17,r2
    8d70:	80c0004c 	andi	r3,r16,1
    8d74:	183ff926 	beq	r3,zero,8d5c <__alt_data_end+0xfffb362c>
    8d78:	900b883a 	mov	r5,r18
    8d7c:	880d883a 	mov	r6,r17
    8d80:	9809883a 	mov	r4,r19
    8d84:	0008a880 	call	8a88 <__multiply>
    8d88:	90001b26 	beq	r18,zero,8df8 <__pow5mult+0xe0>
    8d8c:	91c00117 	ldw	r7,4(r18)
    8d90:	98c01317 	ldw	r3,76(r19)
    8d94:	8021d07a 	srai	r16,r16,1
    8d98:	39cf883a 	add	r7,r7,r7
    8d9c:	39cf883a 	add	r7,r7,r7
    8da0:	19c7883a 	add	r3,r3,r7
    8da4:	19000017 	ldw	r4,0(r3)
    8da8:	91000015 	stw	r4,0(r18)
    8dac:	1c800015 	stw	r18,0(r3)
    8db0:	1025883a 	mov	r18,r2
    8db4:	803feb1e 	bne	r16,zero,8d64 <__alt_data_end+0xfffb3634>
    8db8:	9005883a 	mov	r2,r18
    8dbc:	dfc00517 	ldw	ra,20(sp)
    8dc0:	dd000417 	ldw	r20,16(sp)
    8dc4:	dcc00317 	ldw	r19,12(sp)
    8dc8:	dc800217 	ldw	r18,8(sp)
    8dcc:	dc400117 	ldw	r17,4(sp)
    8dd0:	dc000017 	ldw	r16,0(sp)
    8dd4:	dec00604 	addi	sp,sp,24
    8dd8:	f800283a 	ret
    8ddc:	9809883a 	mov	r4,r19
    8de0:	880b883a 	mov	r5,r17
    8de4:	880d883a 	mov	r6,r17
    8de8:	0008a880 	call	8a88 <__multiply>
    8dec:	88800015 	stw	r2,0(r17)
    8df0:	10000015 	stw	zero,0(r2)
    8df4:	003fdd06 	br	8d6c <__alt_data_end+0xfffb363c>
    8df8:	1025883a 	mov	r18,r2
    8dfc:	003fd706 	br	8d5c <__alt_data_end+0xfffb362c>
    8e00:	10bfffc4 	addi	r2,r2,-1
    8e04:	1085883a 	add	r2,r2,r2
    8e08:	00c00074 	movhi	r3,1
    8e0c:	18c8cd04 	addi	r3,r3,9012
    8e10:	1085883a 	add	r2,r2,r2
    8e14:	1885883a 	add	r2,r3,r2
    8e18:	11800017 	ldw	r6,0(r2)
    8e1c:	000f883a 	mov	r7,zero
    8e20:	00086f40 	call	86f4 <__multadd>
    8e24:	1025883a 	mov	r18,r2
    8e28:	003fc706 	br	8d48 <__alt_data_end+0xfffb3618>
    8e2c:	05000044 	movi	r20,1
    8e30:	9809883a 	mov	r4,r19
    8e34:	a00b883a 	mov	r5,r20
    8e38:	00086240 	call	8624 <_Balloc>
    8e3c:	1023883a 	mov	r17,r2
    8e40:	00809c44 	movi	r2,625
    8e44:	88800515 	stw	r2,20(r17)
    8e48:	8d000415 	stw	r20,16(r17)
    8e4c:	9c401215 	stw	r17,72(r19)
    8e50:	88000015 	stw	zero,0(r17)
    8e54:	003fc606 	br	8d70 <__alt_data_end+0xfffb3640>

00008e58 <__lshift>:
    8e58:	defff904 	addi	sp,sp,-28
    8e5c:	dd000415 	stw	r20,16(sp)
    8e60:	dcc00315 	stw	r19,12(sp)
    8e64:	3029d17a 	srai	r20,r6,5
    8e68:	2cc00417 	ldw	r19,16(r5)
    8e6c:	28800217 	ldw	r2,8(r5)
    8e70:	dd400515 	stw	r21,20(sp)
    8e74:	a4e7883a 	add	r19,r20,r19
    8e78:	dc800215 	stw	r18,8(sp)
    8e7c:	dc400115 	stw	r17,4(sp)
    8e80:	dc000015 	stw	r16,0(sp)
    8e84:	dfc00615 	stw	ra,24(sp)
    8e88:	9c000044 	addi	r16,r19,1
    8e8c:	2823883a 	mov	r17,r5
    8e90:	302b883a 	mov	r21,r6
    8e94:	2025883a 	mov	r18,r4
    8e98:	29400117 	ldw	r5,4(r5)
    8e9c:	1400030e 	bge	r2,r16,8eac <__lshift+0x54>
    8ea0:	1085883a 	add	r2,r2,r2
    8ea4:	29400044 	addi	r5,r5,1
    8ea8:	143ffd16 	blt	r2,r16,8ea0 <__alt_data_end+0xfffb3770>
    8eac:	9009883a 	mov	r4,r18
    8eb0:	00086240 	call	8624 <_Balloc>
    8eb4:	11c00504 	addi	r7,r2,20
    8eb8:	0500090e 	bge	zero,r20,8ee0 <__lshift+0x88>
    8ebc:	3811883a 	mov	r8,r7
    8ec0:	0007883a 	mov	r3,zero
    8ec4:	40000015 	stw	zero,0(r8)
    8ec8:	18c00044 	addi	r3,r3,1
    8ecc:	42000104 	addi	r8,r8,4
    8ed0:	1d3ffc1e 	bne	r3,r20,8ec4 <__alt_data_end+0xfffb3794>
    8ed4:	18c7883a 	add	r3,r3,r3
    8ed8:	18c7883a 	add	r3,r3,r3
    8edc:	38cf883a 	add	r7,r7,r3
    8ee0:	89000417 	ldw	r4,16(r17)
    8ee4:	88c00504 	addi	r3,r17,20
    8ee8:	a98007cc 	andi	r6,r21,31
    8eec:	2109883a 	add	r4,r4,r4
    8ef0:	2109883a 	add	r4,r4,r4
    8ef4:	1909883a 	add	r4,r3,r4
    8ef8:	30002326 	beq	r6,zero,8f88 <__lshift+0x130>
    8efc:	01400804 	movi	r5,32
    8f00:	298bc83a 	sub	r5,r5,r6
    8f04:	0013883a 	mov	r9,zero
    8f08:	1a000017 	ldw	r8,0(r3)
    8f0c:	3815883a 	mov	r10,r7
    8f10:	39c00104 	addi	r7,r7,4
    8f14:	4190983a 	sll	r8,r8,r6
    8f18:	18c00104 	addi	r3,r3,4
    8f1c:	4a10b03a 	or	r8,r9,r8
    8f20:	3a3fff15 	stw	r8,-4(r7)
    8f24:	1a3fff17 	ldw	r8,-4(r3)
    8f28:	4152d83a 	srl	r9,r8,r5
    8f2c:	193ff636 	bltu	r3,r4,8f08 <__alt_data_end+0xfffb37d8>
    8f30:	52400115 	stw	r9,4(r10)
    8f34:	48000126 	beq	r9,zero,8f3c <__lshift+0xe4>
    8f38:	9c000084 	addi	r16,r19,2
    8f3c:	89000117 	ldw	r4,4(r17)
    8f40:	90c01317 	ldw	r3,76(r18)
    8f44:	843fffc4 	addi	r16,r16,-1
    8f48:	2109883a 	add	r4,r4,r4
    8f4c:	2109883a 	add	r4,r4,r4
    8f50:	1907883a 	add	r3,r3,r4
    8f54:	19000017 	ldw	r4,0(r3)
    8f58:	14000415 	stw	r16,16(r2)
    8f5c:	89000015 	stw	r4,0(r17)
    8f60:	1c400015 	stw	r17,0(r3)
    8f64:	dfc00617 	ldw	ra,24(sp)
    8f68:	dd400517 	ldw	r21,20(sp)
    8f6c:	dd000417 	ldw	r20,16(sp)
    8f70:	dcc00317 	ldw	r19,12(sp)
    8f74:	dc800217 	ldw	r18,8(sp)
    8f78:	dc400117 	ldw	r17,4(sp)
    8f7c:	dc000017 	ldw	r16,0(sp)
    8f80:	dec00704 	addi	sp,sp,28
    8f84:	f800283a 	ret
    8f88:	19400017 	ldw	r5,0(r3)
    8f8c:	39c00104 	addi	r7,r7,4
    8f90:	18c00104 	addi	r3,r3,4
    8f94:	397fff15 	stw	r5,-4(r7)
    8f98:	193ffb36 	bltu	r3,r4,8f88 <__alt_data_end+0xfffb3858>
    8f9c:	003fe706 	br	8f3c <__alt_data_end+0xfffb380c>

00008fa0 <__mcmp>:
    8fa0:	20800417 	ldw	r2,16(r4)
    8fa4:	28c00417 	ldw	r3,16(r5)
    8fa8:	10c5c83a 	sub	r2,r2,r3
    8fac:	1000111e 	bne	r2,zero,8ff4 <__mcmp+0x54>
    8fb0:	18c7883a 	add	r3,r3,r3
    8fb4:	18c7883a 	add	r3,r3,r3
    8fb8:	21000504 	addi	r4,r4,20
    8fbc:	29400504 	addi	r5,r5,20
    8fc0:	20c5883a 	add	r2,r4,r3
    8fc4:	28cb883a 	add	r5,r5,r3
    8fc8:	00000106 	br	8fd0 <__mcmp+0x30>
    8fcc:	20800a2e 	bgeu	r4,r2,8ff8 <__mcmp+0x58>
    8fd0:	10bfff04 	addi	r2,r2,-4
    8fd4:	297fff04 	addi	r5,r5,-4
    8fd8:	11800017 	ldw	r6,0(r2)
    8fdc:	28c00017 	ldw	r3,0(r5)
    8fe0:	30fffa26 	beq	r6,r3,8fcc <__alt_data_end+0xfffb389c>
    8fe4:	30c00236 	bltu	r6,r3,8ff0 <__mcmp+0x50>
    8fe8:	00800044 	movi	r2,1
    8fec:	f800283a 	ret
    8ff0:	00bfffc4 	movi	r2,-1
    8ff4:	f800283a 	ret
    8ff8:	0005883a 	mov	r2,zero
    8ffc:	f800283a 	ret

00009000 <__mdiff>:
    9000:	defffb04 	addi	sp,sp,-20
    9004:	dc000015 	stw	r16,0(sp)
    9008:	2821883a 	mov	r16,r5
    900c:	dcc00315 	stw	r19,12(sp)
    9010:	300b883a 	mov	r5,r6
    9014:	2027883a 	mov	r19,r4
    9018:	8009883a 	mov	r4,r16
    901c:	dc800215 	stw	r18,8(sp)
    9020:	dfc00415 	stw	ra,16(sp)
    9024:	dc400115 	stw	r17,4(sp)
    9028:	3025883a 	mov	r18,r6
    902c:	0008fa00 	call	8fa0 <__mcmp>
    9030:	10005226 	beq	r2,zero,917c <__mdiff+0x17c>
    9034:	10004c16 	blt	r2,zero,9168 <__mdiff+0x168>
    9038:	0023883a 	mov	r17,zero
    903c:	81400117 	ldw	r5,4(r16)
    9040:	9809883a 	mov	r4,r19
    9044:	00086240 	call	8624 <_Balloc>
    9048:	83400417 	ldw	r13,16(r16)
    904c:	93800417 	ldw	r14,16(r18)
    9050:	81000504 	addi	r4,r16,20
    9054:	6b59883a 	add	r12,r13,r13
    9058:	739d883a 	add	r14,r14,r14
    905c:	6319883a 	add	r12,r12,r12
    9060:	91800504 	addi	r6,r18,20
    9064:	739d883a 	add	r14,r14,r14
    9068:	14400315 	stw	r17,12(r2)
    906c:	2319883a 	add	r12,r4,r12
    9070:	339d883a 	add	r14,r6,r14
    9074:	12400504 	addi	r9,r2,20
    9078:	0007883a 	mov	r3,zero
    907c:	22000017 	ldw	r8,0(r4)
    9080:	32800017 	ldw	r10,0(r6)
    9084:	4ac00104 	addi	r11,r9,4
    9088:	41ffffcc 	andi	r7,r8,65535
    908c:	38c7883a 	add	r3,r7,r3
    9090:	51ffffcc 	andi	r7,r10,65535
    9094:	19cfc83a 	sub	r7,r3,r7
    9098:	4010d43a 	srli	r8,r8,16
    909c:	5014d43a 	srli	r10,r10,16
    90a0:	3807d43a 	srai	r3,r7,16
    90a4:	39ffffcc 	andi	r7,r7,65535
    90a8:	4291c83a 	sub	r8,r8,r10
    90ac:	40c7883a 	add	r3,r8,r3
    90b0:	1810943a 	slli	r8,r3,16
    90b4:	31800104 	addi	r6,r6,4
    90b8:	21000104 	addi	r4,r4,4
    90bc:	41ceb03a 	or	r7,r8,r7
    90c0:	49c00015 	stw	r7,0(r9)
    90c4:	1807d43a 	srai	r3,r3,16
    90c8:	580b883a 	mov	r5,r11
    90cc:	5813883a 	mov	r9,r11
    90d0:	33bfea36 	bltu	r6,r14,907c <__alt_data_end+0xfffb394c>
    90d4:	2011883a 	mov	r8,r4
    90d8:	2300152e 	bgeu	r4,r12,9130 <__mdiff+0x130>
    90dc:	21400017 	ldw	r5,0(r4)
    90e0:	4a400104 	addi	r9,r9,4
    90e4:	21000104 	addi	r4,r4,4
    90e8:	29ffffcc 	andi	r7,r5,65535
    90ec:	38c7883a 	add	r3,r7,r3
    90f0:	280ad43a 	srli	r5,r5,16
    90f4:	180dd43a 	srai	r6,r3,16
    90f8:	19ffffcc 	andi	r7,r3,65535
    90fc:	3147883a 	add	r3,r6,r5
    9100:	180a943a 	slli	r5,r3,16
    9104:	1807d43a 	srai	r3,r3,16
    9108:	29ceb03a 	or	r7,r5,r7
    910c:	49ffff15 	stw	r7,-4(r9)
    9110:	233ff236 	bltu	r4,r12,90dc <__alt_data_end+0xfffb39ac>
    9114:	0206303a 	nor	r3,zero,r8
    9118:	1b07883a 	add	r3,r3,r12
    911c:	1806d0ba 	srli	r3,r3,2
    9120:	18c00044 	addi	r3,r3,1
    9124:	18c7883a 	add	r3,r3,r3
    9128:	18c7883a 	add	r3,r3,r3
    912c:	58cb883a 	add	r5,r11,r3
    9130:	28ffff04 	addi	r3,r5,-4
    9134:	3800041e 	bne	r7,zero,9148 <__mdiff+0x148>
    9138:	18ffff04 	addi	r3,r3,-4
    913c:	19000017 	ldw	r4,0(r3)
    9140:	6b7fffc4 	addi	r13,r13,-1
    9144:	203ffc26 	beq	r4,zero,9138 <__alt_data_end+0xfffb3a08>
    9148:	13400415 	stw	r13,16(r2)
    914c:	dfc00417 	ldw	ra,16(sp)
    9150:	dcc00317 	ldw	r19,12(sp)
    9154:	dc800217 	ldw	r18,8(sp)
    9158:	dc400117 	ldw	r17,4(sp)
    915c:	dc000017 	ldw	r16,0(sp)
    9160:	dec00504 	addi	sp,sp,20
    9164:	f800283a 	ret
    9168:	8005883a 	mov	r2,r16
    916c:	04400044 	movi	r17,1
    9170:	9021883a 	mov	r16,r18
    9174:	1025883a 	mov	r18,r2
    9178:	003fb006 	br	903c <__alt_data_end+0xfffb390c>
    917c:	9809883a 	mov	r4,r19
    9180:	000b883a 	mov	r5,zero
    9184:	00086240 	call	8624 <_Balloc>
    9188:	00c00044 	movi	r3,1
    918c:	10c00415 	stw	r3,16(r2)
    9190:	10000515 	stw	zero,20(r2)
    9194:	003fed06 	br	914c <__alt_data_end+0xfffb3a1c>

00009198 <__ulp>:
    9198:	295ffc2c 	andhi	r5,r5,32752
    919c:	00bf3034 	movhi	r2,64704
    91a0:	2887883a 	add	r3,r5,r2
    91a4:	00c0020e 	bge	zero,r3,91b0 <__ulp+0x18>
    91a8:	0005883a 	mov	r2,zero
    91ac:	f800283a 	ret
    91b0:	00c7c83a 	sub	r3,zero,r3
    91b4:	180bd53a 	srai	r5,r3,20
    91b8:	008004c4 	movi	r2,19
    91bc:	11400a0e 	bge	r2,r5,91e8 <__ulp+0x50>
    91c0:	00800c84 	movi	r2,50
    91c4:	0007883a 	mov	r3,zero
    91c8:	11400516 	blt	r2,r5,91e0 <__ulp+0x48>
    91cc:	00800cc4 	movi	r2,51
    91d0:	114bc83a 	sub	r5,r2,r5
    91d4:	00800044 	movi	r2,1
    91d8:	1144983a 	sll	r2,r2,r5
    91dc:	f800283a 	ret
    91e0:	00800044 	movi	r2,1
    91e4:	f800283a 	ret
    91e8:	00800234 	movhi	r2,8
    91ec:	1147d83a 	sra	r3,r2,r5
    91f0:	0005883a 	mov	r2,zero
    91f4:	f800283a 	ret

000091f8 <__b2d>:
    91f8:	defffa04 	addi	sp,sp,-24
    91fc:	dc000015 	stw	r16,0(sp)
    9200:	24000417 	ldw	r16,16(r4)
    9204:	dc400115 	stw	r17,4(sp)
    9208:	24400504 	addi	r17,r4,20
    920c:	8421883a 	add	r16,r16,r16
    9210:	8421883a 	add	r16,r16,r16
    9214:	8c21883a 	add	r16,r17,r16
    9218:	dc800215 	stw	r18,8(sp)
    921c:	84bfff17 	ldw	r18,-4(r16)
    9220:	dd000415 	stw	r20,16(sp)
    9224:	dcc00315 	stw	r19,12(sp)
    9228:	9009883a 	mov	r4,r18
    922c:	2829883a 	mov	r20,r5
    9230:	dfc00515 	stw	ra,20(sp)
    9234:	00089340 	call	8934 <__hi0bits>
    9238:	00c00804 	movi	r3,32
    923c:	1887c83a 	sub	r3,r3,r2
    9240:	a0c00015 	stw	r3,0(r20)
    9244:	00c00284 	movi	r3,10
    9248:	84ffff04 	addi	r19,r16,-4
    924c:	18801216 	blt	r3,r2,9298 <__b2d+0xa0>
    9250:	014002c4 	movi	r5,11
    9254:	2889c83a 	sub	r4,r5,r2
    9258:	9106d83a 	srl	r3,r18,r4
    925c:	18cffc34 	orhi	r3,r3,16368
    9260:	8cc0282e 	bgeu	r17,r19,9304 <__b2d+0x10c>
    9264:	817ffe17 	ldw	r5,-8(r16)
    9268:	290ad83a 	srl	r5,r5,r4
    926c:	10800544 	addi	r2,r2,21
    9270:	9084983a 	sll	r2,r18,r2
    9274:	2884b03a 	or	r2,r5,r2
    9278:	dfc00517 	ldw	ra,20(sp)
    927c:	dd000417 	ldw	r20,16(sp)
    9280:	dcc00317 	ldw	r19,12(sp)
    9284:	dc800217 	ldw	r18,8(sp)
    9288:	dc400117 	ldw	r17,4(sp)
    928c:	dc000017 	ldw	r16,0(sp)
    9290:	dec00604 	addi	sp,sp,24
    9294:	f800283a 	ret
    9298:	113ffd44 	addi	r4,r2,-11
    929c:	8cc00f2e 	bgeu	r17,r19,92dc <__b2d+0xe4>
    92a0:	81bffe04 	addi	r6,r16,-8
    92a4:	817ffe17 	ldw	r5,-8(r16)
    92a8:	20001326 	beq	r4,zero,92f8 <__b2d+0x100>
    92ac:	00c00ac4 	movi	r3,43
    92b0:	1885c83a 	sub	r2,r3,r2
    92b4:	2886d83a 	srl	r3,r5,r2
    92b8:	9124983a 	sll	r18,r18,r4
    92bc:	90e4b03a 	or	r18,r18,r3
    92c0:	90cffc34 	orhi	r3,r18,16368
    92c4:	8980112e 	bgeu	r17,r6,930c <__b2d+0x114>
    92c8:	81bffd17 	ldw	r6,-12(r16)
    92cc:	308cd83a 	srl	r6,r6,r2
    92d0:	2904983a 	sll	r2,r5,r4
    92d4:	1184b03a 	or	r2,r2,r6
    92d8:	003fe706 	br	9278 <__alt_data_end+0xfffb3b48>
    92dc:	20000526 	beq	r4,zero,92f4 <__b2d+0xfc>
    92e0:	9124983a 	sll	r18,r18,r4
    92e4:	000d883a 	mov	r6,zero
    92e8:	000b883a 	mov	r5,zero
    92ec:	90cffc34 	orhi	r3,r18,16368
    92f0:	003ff706 	br	92d0 <__alt_data_end+0xfffb3ba0>
    92f4:	000b883a 	mov	r5,zero
    92f8:	90cffc34 	orhi	r3,r18,16368
    92fc:	2805883a 	mov	r2,r5
    9300:	003fdd06 	br	9278 <__alt_data_end+0xfffb3b48>
    9304:	000b883a 	mov	r5,zero
    9308:	003fd806 	br	926c <__alt_data_end+0xfffb3b3c>
    930c:	000d883a 	mov	r6,zero
    9310:	003fef06 	br	92d0 <__alt_data_end+0xfffb3ba0>

00009314 <__d2b>:
    9314:	defff704 	addi	sp,sp,-36
    9318:	dc000215 	stw	r16,8(sp)
    931c:	3021883a 	mov	r16,r6
    9320:	dc400315 	stw	r17,12(sp)
    9324:	8022907a 	slli	r17,r16,1
    9328:	dd400715 	stw	r21,28(sp)
    932c:	282b883a 	mov	r21,r5
    9330:	01400044 	movi	r5,1
    9334:	dd000615 	stw	r20,24(sp)
    9338:	dcc00515 	stw	r19,20(sp)
    933c:	dc800415 	stw	r18,16(sp)
    9340:	dfc00815 	stw	ra,32(sp)
    9344:	3829883a 	mov	r20,r7
    9348:	dc800917 	ldw	r18,36(sp)
    934c:	8822d57a 	srli	r17,r17,21
    9350:	00086240 	call	8624 <_Balloc>
    9354:	1027883a 	mov	r19,r2
    9358:	00800434 	movhi	r2,16
    935c:	10bfffc4 	addi	r2,r2,-1
    9360:	808c703a 	and	r6,r16,r2
    9364:	88000126 	beq	r17,zero,936c <__d2b+0x58>
    9368:	31800434 	orhi	r6,r6,16
    936c:	d9800015 	stw	r6,0(sp)
    9370:	a8001f26 	beq	r21,zero,93f0 <__d2b+0xdc>
    9374:	d9000104 	addi	r4,sp,4
    9378:	dd400115 	stw	r21,4(sp)
    937c:	000899c0 	call	899c <__lo0bits>
    9380:	d8c00017 	ldw	r3,0(sp)
    9384:	1000291e 	bne	r2,zero,942c <__d2b+0x118>
    9388:	d9000117 	ldw	r4,4(sp)
    938c:	99000515 	stw	r4,20(r19)
    9390:	1820c03a 	cmpne	r16,r3,zero
    9394:	84000044 	addi	r16,r16,1
    9398:	98c00615 	stw	r3,24(r19)
    939c:	9c000415 	stw	r16,16(r19)
    93a0:	88001b1e 	bne	r17,zero,9410 <__d2b+0xfc>
    93a4:	800690ba 	slli	r3,r16,2
    93a8:	10bef384 	addi	r2,r2,-1074
    93ac:	a0800015 	stw	r2,0(r20)
    93b0:	98c5883a 	add	r2,r19,r3
    93b4:	11000417 	ldw	r4,16(r2)
    93b8:	8020917a 	slli	r16,r16,5
    93bc:	00089340 	call	8934 <__hi0bits>
    93c0:	8085c83a 	sub	r2,r16,r2
    93c4:	90800015 	stw	r2,0(r18)
    93c8:	9805883a 	mov	r2,r19
    93cc:	dfc00817 	ldw	ra,32(sp)
    93d0:	dd400717 	ldw	r21,28(sp)
    93d4:	dd000617 	ldw	r20,24(sp)
    93d8:	dcc00517 	ldw	r19,20(sp)
    93dc:	dc800417 	ldw	r18,16(sp)
    93e0:	dc400317 	ldw	r17,12(sp)
    93e4:	dc000217 	ldw	r16,8(sp)
    93e8:	dec00904 	addi	sp,sp,36
    93ec:	f800283a 	ret
    93f0:	d809883a 	mov	r4,sp
    93f4:	000899c0 	call	899c <__lo0bits>
    93f8:	d8c00017 	ldw	r3,0(sp)
    93fc:	04000044 	movi	r16,1
    9400:	9c000415 	stw	r16,16(r19)
    9404:	98c00515 	stw	r3,20(r19)
    9408:	10800804 	addi	r2,r2,32
    940c:	883fe526 	beq	r17,zero,93a4 <__alt_data_end+0xfffb3c74>
    9410:	8c7ef344 	addi	r17,r17,-1075
    9414:	88a3883a 	add	r17,r17,r2
    9418:	00c00d44 	movi	r3,53
    941c:	a4400015 	stw	r17,0(r20)
    9420:	1885c83a 	sub	r2,r3,r2
    9424:	90800015 	stw	r2,0(r18)
    9428:	003fe706 	br	93c8 <__alt_data_end+0xfffb3c98>
    942c:	01000804 	movi	r4,32
    9430:	2089c83a 	sub	r4,r4,r2
    9434:	1908983a 	sll	r4,r3,r4
    9438:	d9400117 	ldw	r5,4(sp)
    943c:	1886d83a 	srl	r3,r3,r2
    9440:	2148b03a 	or	r4,r4,r5
    9444:	99000515 	stw	r4,20(r19)
    9448:	d8c00015 	stw	r3,0(sp)
    944c:	003fd006 	br	9390 <__alt_data_end+0xfffb3c60>

00009450 <__ratio>:
    9450:	defff904 	addi	sp,sp,-28
    9454:	dc400315 	stw	r17,12(sp)
    9458:	2823883a 	mov	r17,r5
    945c:	d9400104 	addi	r5,sp,4
    9460:	dfc00615 	stw	ra,24(sp)
    9464:	dcc00515 	stw	r19,20(sp)
    9468:	dc800415 	stw	r18,16(sp)
    946c:	2027883a 	mov	r19,r4
    9470:	dc000215 	stw	r16,8(sp)
    9474:	00091f80 	call	91f8 <__b2d>
    9478:	8809883a 	mov	r4,r17
    947c:	d80b883a 	mov	r5,sp
    9480:	1025883a 	mov	r18,r2
    9484:	1821883a 	mov	r16,r3
    9488:	00091f80 	call	91f8 <__b2d>
    948c:	8a400417 	ldw	r9,16(r17)
    9490:	9a000417 	ldw	r8,16(r19)
    9494:	100d883a 	mov	r6,r2
    9498:	d8800017 	ldw	r2,0(sp)
    949c:	4251c83a 	sub	r8,r8,r9
    94a0:	4012917a 	slli	r9,r8,5
    94a4:	da000117 	ldw	r8,4(sp)
    94a8:	4091c83a 	sub	r8,r8,r2
    94ac:	4251883a 	add	r8,r8,r9
    94b0:	02000d0e 	bge	zero,r8,94e8 <__ratio+0x98>
    94b4:	4010953a 	slli	r8,r8,20
    94b8:	4421883a 	add	r16,r8,r16
    94bc:	9009883a 	mov	r4,r18
    94c0:	800b883a 	mov	r5,r16
    94c4:	180f883a 	mov	r7,r3
    94c8:	000d3540 	call	d354 <__divdf3>
    94cc:	dfc00617 	ldw	ra,24(sp)
    94d0:	dcc00517 	ldw	r19,20(sp)
    94d4:	dc800417 	ldw	r18,16(sp)
    94d8:	dc400317 	ldw	r17,12(sp)
    94dc:	dc000217 	ldw	r16,8(sp)
    94e0:	dec00704 	addi	sp,sp,28
    94e4:	f800283a 	ret
    94e8:	4010953a 	slli	r8,r8,20
    94ec:	1a07c83a 	sub	r3,r3,r8
    94f0:	003ff206 	br	94bc <__alt_data_end+0xfffb3d8c>

000094f4 <_mprec_log10>:
    94f4:	defffe04 	addi	sp,sp,-8
    94f8:	dc000015 	stw	r16,0(sp)
    94fc:	dfc00115 	stw	ra,4(sp)
    9500:	008005c4 	movi	r2,23
    9504:	2021883a 	mov	r16,r4
    9508:	11000d0e 	bge	r2,r4,9540 <_mprec_log10+0x4c>
    950c:	0005883a 	mov	r2,zero
    9510:	00cffc34 	movhi	r3,16368
    9514:	843fffc4 	addi	r16,r16,-1
    9518:	1009883a 	mov	r4,r2
    951c:	180b883a 	mov	r5,r3
    9520:	000d883a 	mov	r6,zero
    9524:	01d00934 	movhi	r7,16420
    9528:	000df180 	call	df18 <__muldf3>
    952c:	803ff91e 	bne	r16,zero,9514 <__alt_data_end+0xfffb3de4>
    9530:	dfc00117 	ldw	ra,4(sp)
    9534:	dc000017 	ldw	r16,0(sp)
    9538:	dec00204 	addi	sp,sp,8
    953c:	f800283a 	ret
    9540:	202090fa 	slli	r16,r4,3
    9544:	00800074 	movhi	r2,1
    9548:	1088e404 	addi	r2,r2,9104
    954c:	1421883a 	add	r16,r2,r16
    9550:	80800017 	ldw	r2,0(r16)
    9554:	80c00117 	ldw	r3,4(r16)
    9558:	dfc00117 	ldw	ra,4(sp)
    955c:	dc000017 	ldw	r16,0(sp)
    9560:	dec00204 	addi	sp,sp,8
    9564:	f800283a 	ret

00009568 <__copybits>:
    9568:	297fffc4 	addi	r5,r5,-1
    956c:	280fd17a 	srai	r7,r5,5
    9570:	30c00417 	ldw	r3,16(r6)
    9574:	30800504 	addi	r2,r6,20
    9578:	39c00044 	addi	r7,r7,1
    957c:	18c7883a 	add	r3,r3,r3
    9580:	39cf883a 	add	r7,r7,r7
    9584:	18c7883a 	add	r3,r3,r3
    9588:	39cf883a 	add	r7,r7,r7
    958c:	10c7883a 	add	r3,r2,r3
    9590:	21cf883a 	add	r7,r4,r7
    9594:	10c00d2e 	bgeu	r2,r3,95cc <__copybits+0x64>
    9598:	200b883a 	mov	r5,r4
    959c:	12000017 	ldw	r8,0(r2)
    95a0:	29400104 	addi	r5,r5,4
    95a4:	10800104 	addi	r2,r2,4
    95a8:	2a3fff15 	stw	r8,-4(r5)
    95ac:	10fffb36 	bltu	r2,r3,959c <__alt_data_end+0xfffb3e6c>
    95b0:	1985c83a 	sub	r2,r3,r6
    95b4:	10bffac4 	addi	r2,r2,-21
    95b8:	1004d0ba 	srli	r2,r2,2
    95bc:	10800044 	addi	r2,r2,1
    95c0:	1085883a 	add	r2,r2,r2
    95c4:	1085883a 	add	r2,r2,r2
    95c8:	2089883a 	add	r4,r4,r2
    95cc:	21c0032e 	bgeu	r4,r7,95dc <__copybits+0x74>
    95d0:	20000015 	stw	zero,0(r4)
    95d4:	21000104 	addi	r4,r4,4
    95d8:	21fffd36 	bltu	r4,r7,95d0 <__alt_data_end+0xfffb3ea0>
    95dc:	f800283a 	ret

000095e0 <__any_on>:
    95e0:	20c00417 	ldw	r3,16(r4)
    95e4:	2805d17a 	srai	r2,r5,5
    95e8:	21000504 	addi	r4,r4,20
    95ec:	18800d0e 	bge	r3,r2,9624 <__any_on+0x44>
    95f0:	18c7883a 	add	r3,r3,r3
    95f4:	18c7883a 	add	r3,r3,r3
    95f8:	20c7883a 	add	r3,r4,r3
    95fc:	20c0192e 	bgeu	r4,r3,9664 <__any_on+0x84>
    9600:	18bfff17 	ldw	r2,-4(r3)
    9604:	18ffff04 	addi	r3,r3,-4
    9608:	1000041e 	bne	r2,zero,961c <__any_on+0x3c>
    960c:	20c0142e 	bgeu	r4,r3,9660 <__any_on+0x80>
    9610:	18ffff04 	addi	r3,r3,-4
    9614:	19400017 	ldw	r5,0(r3)
    9618:	283ffc26 	beq	r5,zero,960c <__alt_data_end+0xfffb3edc>
    961c:	00800044 	movi	r2,1
    9620:	f800283a 	ret
    9624:	10c00a0e 	bge	r2,r3,9650 <__any_on+0x70>
    9628:	1085883a 	add	r2,r2,r2
    962c:	1085883a 	add	r2,r2,r2
    9630:	294007cc 	andi	r5,r5,31
    9634:	2087883a 	add	r3,r4,r2
    9638:	283ff026 	beq	r5,zero,95fc <__alt_data_end+0xfffb3ecc>
    963c:	19800017 	ldw	r6,0(r3)
    9640:	3144d83a 	srl	r2,r6,r5
    9644:	114a983a 	sll	r5,r2,r5
    9648:	29bff41e 	bne	r5,r6,961c <__alt_data_end+0xfffb3eec>
    964c:	003feb06 	br	95fc <__alt_data_end+0xfffb3ecc>
    9650:	1085883a 	add	r2,r2,r2
    9654:	1085883a 	add	r2,r2,r2
    9658:	2087883a 	add	r3,r4,r2
    965c:	003fe706 	br	95fc <__alt_data_end+0xfffb3ecc>
    9660:	f800283a 	ret
    9664:	0005883a 	mov	r2,zero
    9668:	f800283a 	ret

0000966c <_realloc_r>:
    966c:	defff604 	addi	sp,sp,-40
    9670:	dcc00315 	stw	r19,12(sp)
    9674:	dc400115 	stw	r17,4(sp)
    9678:	dfc00915 	stw	ra,36(sp)
    967c:	df000815 	stw	fp,32(sp)
    9680:	ddc00715 	stw	r23,28(sp)
    9684:	dd800615 	stw	r22,24(sp)
    9688:	dd400515 	stw	r21,20(sp)
    968c:	dd000415 	stw	r20,16(sp)
    9690:	dc800215 	stw	r18,8(sp)
    9694:	dc000015 	stw	r16,0(sp)
    9698:	2827883a 	mov	r19,r5
    969c:	3023883a 	mov	r17,r6
    96a0:	2800bf26 	beq	r5,zero,99a0 <_realloc_r+0x334>
    96a4:	2025883a 	mov	r18,r4
    96a8:	000f8940 	call	f894 <__malloc_lock>
    96ac:	98ffff17 	ldw	r3,-4(r19)
    96b0:	01bfff04 	movi	r6,-4
    96b4:	890002c4 	addi	r4,r17,11
    96b8:	01c00584 	movi	r7,22
    96bc:	9d7ffe04 	addi	r21,r19,-8
    96c0:	19a0703a 	and	r16,r3,r6
    96c4:	39003f2e 	bgeu	r7,r4,97c4 <_realloc_r+0x158>
    96c8:	053ffe04 	movi	r20,-8
    96cc:	2528703a 	and	r20,r4,r20
    96d0:	a00f883a 	mov	r7,r20
    96d4:	a0008216 	blt	r20,zero,98e0 <_realloc_r+0x274>
    96d8:	a4408136 	bltu	r20,r17,98e0 <_realloc_r+0x274>
    96dc:	81c03c0e 	bge	r16,r7,97d0 <_realloc_r+0x164>
    96e0:	07000074 	movhi	fp,1
    96e4:	e7096b04 	addi	fp,fp,9644
    96e8:	e1000217 	ldw	r4,8(fp)
    96ec:	ac05883a 	add	r2,r21,r16
    96f0:	2080bf26 	beq	r4,r2,99f0 <_realloc_r+0x384>
    96f4:	11000117 	ldw	r4,4(r2)
    96f8:	023fff84 	movi	r8,-2
    96fc:	2210703a 	and	r8,r4,r8
    9700:	1211883a 	add	r8,r2,r8
    9704:	41400117 	ldw	r5,4(r8)
    9708:	2940004c 	andi	r5,r5,1
    970c:	28004a1e 	bne	r5,zero,9838 <_realloc_r+0x1cc>
    9710:	017fff04 	movi	r5,-4
    9714:	2148703a 	and	r4,r4,r5
    9718:	2409883a 	add	r4,r4,r16
    971c:	21c0ad0e 	bge	r4,r7,99d4 <_realloc_r+0x368>
    9720:	18c0004c 	andi	r3,r3,1
    9724:	18007f1e 	bne	r3,zero,9924 <_realloc_r+0x2b8>
    9728:	9dfffe17 	ldw	r23,-8(r19)
    972c:	adefc83a 	sub	r23,r21,r23
    9730:	bd800117 	ldw	r22,4(r23)
    9734:	b14a703a 	and	r5,r22,r5
    9738:	216d883a 	add	r22,r4,r5
    973c:	b1c04516 	blt	r22,r7,9854 <_realloc_r+0x1e8>
    9740:	10c00317 	ldw	r3,12(r2)
    9744:	10800217 	ldw	r2,8(r2)
    9748:	81bfff04 	addi	r6,r16,-4
    974c:	bc400204 	addi	r17,r23,8
    9750:	10c00315 	stw	r3,12(r2)
    9754:	18800215 	stw	r2,8(r3)
    9758:	b9400217 	ldw	r5,8(r23)
    975c:	b8c00317 	ldw	r3,12(r23)
    9760:	00800904 	movi	r2,36
    9764:	28c00315 	stw	r3,12(r5)
    9768:	19400215 	stw	r5,8(r3)
    976c:	1180ef36 	bltu	r2,r6,9b2c <_realloc_r+0x4c0>
    9770:	008004c4 	movi	r2,19
    9774:	1180da2e 	bgeu	r2,r6,9ae0 <_realloc_r+0x474>
    9778:	98800017 	ldw	r2,0(r19)
    977c:	b8800215 	stw	r2,8(r23)
    9780:	98800117 	ldw	r2,4(r19)
    9784:	b8800315 	stw	r2,12(r23)
    9788:	008006c4 	movi	r2,27
    978c:	1180fc2e 	bgeu	r2,r6,9b80 <_realloc_r+0x514>
    9790:	98800217 	ldw	r2,8(r19)
    9794:	b8800415 	stw	r2,16(r23)
    9798:	98800317 	ldw	r2,12(r19)
    979c:	b8800515 	stw	r2,20(r23)
    97a0:	00800904 	movi	r2,36
    97a4:	3080421e 	bne	r6,r2,98b0 <_realloc_r+0x244>
    97a8:	98800417 	ldw	r2,16(r19)
    97ac:	9cc00604 	addi	r19,r19,24
    97b0:	b8c00804 	addi	r3,r23,32
    97b4:	b8800615 	stw	r2,24(r23)
    97b8:	98bfff17 	ldw	r2,-4(r19)
    97bc:	b8800715 	stw	r2,28(r23)
    97c0:	00003d06 	br	98b8 <_realloc_r+0x24c>
    97c4:	01c00404 	movi	r7,16
    97c8:	3829883a 	mov	r20,r7
    97cc:	003fc206 	br	96d8 <__alt_data_end+0xfffb3fa8>
    97d0:	9823883a 	mov	r17,r19
    97d4:	850fc83a 	sub	r7,r16,r20
    97d8:	008003c4 	movi	r2,15
    97dc:	18c0004c 	andi	r3,r3,1
    97e0:	11c04336 	bltu	r2,r7,98f0 <_realloc_r+0x284>
    97e4:	1c06b03a 	or	r3,r3,r16
    97e8:	a8c00115 	stw	r3,4(r21)
    97ec:	ac21883a 	add	r16,r21,r16
    97f0:	80c00117 	ldw	r3,4(r16)
    97f4:	18c00054 	ori	r3,r3,1
    97f8:	80c00115 	stw	r3,4(r16)
    97fc:	9009883a 	mov	r4,r18
    9800:	000f8b40 	call	f8b4 <__malloc_unlock>
    9804:	8805883a 	mov	r2,r17
    9808:	dfc00917 	ldw	ra,36(sp)
    980c:	df000817 	ldw	fp,32(sp)
    9810:	ddc00717 	ldw	r23,28(sp)
    9814:	dd800617 	ldw	r22,24(sp)
    9818:	dd400517 	ldw	r21,20(sp)
    981c:	dd000417 	ldw	r20,16(sp)
    9820:	dcc00317 	ldw	r19,12(sp)
    9824:	dc800217 	ldw	r18,8(sp)
    9828:	dc400117 	ldw	r17,4(sp)
    982c:	dc000017 	ldw	r16,0(sp)
    9830:	dec00a04 	addi	sp,sp,40
    9834:	f800283a 	ret
    9838:	18c0004c 	andi	r3,r3,1
    983c:	1800391e 	bne	r3,zero,9924 <_realloc_r+0x2b8>
    9840:	9dfffe17 	ldw	r23,-8(r19)
    9844:	00bfff04 	movi	r2,-4
    9848:	adefc83a 	sub	r23,r21,r23
    984c:	b9400117 	ldw	r5,4(r23)
    9850:	288a703a 	and	r5,r5,r2
    9854:	2c2d883a 	add	r22,r5,r16
    9858:	b1c03216 	blt	r22,r7,9924 <_realloc_r+0x2b8>
    985c:	b8800317 	ldw	r2,12(r23)
    9860:	b8c00217 	ldw	r3,8(r23)
    9864:	81bfff04 	addi	r6,r16,-4
    9868:	01000904 	movi	r4,36
    986c:	18800315 	stw	r2,12(r3)
    9870:	10c00215 	stw	r3,8(r2)
    9874:	bc400204 	addi	r17,r23,8
    9878:	2180ac36 	bltu	r4,r6,9b2c <_realloc_r+0x4c0>
    987c:	008004c4 	movi	r2,19
    9880:	1180972e 	bgeu	r2,r6,9ae0 <_realloc_r+0x474>
    9884:	98800017 	ldw	r2,0(r19)
    9888:	b8800215 	stw	r2,8(r23)
    988c:	98800117 	ldw	r2,4(r19)
    9890:	b8800315 	stw	r2,12(r23)
    9894:	008006c4 	movi	r2,27
    9898:	1180b92e 	bgeu	r2,r6,9b80 <_realloc_r+0x514>
    989c:	98800217 	ldw	r2,8(r19)
    98a0:	b8800415 	stw	r2,16(r23)
    98a4:	98800317 	ldw	r2,12(r19)
    98a8:	b8800515 	stw	r2,20(r23)
    98ac:	313fbe26 	beq	r6,r4,97a8 <__alt_data_end+0xfffb4078>
    98b0:	b8c00604 	addi	r3,r23,24
    98b4:	9cc00404 	addi	r19,r19,16
    98b8:	98800017 	ldw	r2,0(r19)
    98bc:	b021883a 	mov	r16,r22
    98c0:	b82b883a 	mov	r21,r23
    98c4:	18800015 	stw	r2,0(r3)
    98c8:	98800117 	ldw	r2,4(r19)
    98cc:	18800115 	stw	r2,4(r3)
    98d0:	98800217 	ldw	r2,8(r19)
    98d4:	18800215 	stw	r2,8(r3)
    98d8:	b8c00117 	ldw	r3,4(r23)
    98dc:	003fbd06 	br	97d4 <__alt_data_end+0xfffb40a4>
    98e0:	00800304 	movi	r2,12
    98e4:	90800015 	stw	r2,0(r18)
    98e8:	0005883a 	mov	r2,zero
    98ec:	003fc606 	br	9808 <__alt_data_end+0xfffb40d8>
    98f0:	1d06b03a 	or	r3,r3,r20
    98f4:	ad0b883a 	add	r5,r21,r20
    98f8:	a8c00115 	stw	r3,4(r21)
    98fc:	38800054 	ori	r2,r7,1
    9900:	28800115 	stw	r2,4(r5)
    9904:	29cf883a 	add	r7,r5,r7
    9908:	38800117 	ldw	r2,4(r7)
    990c:	9009883a 	mov	r4,r18
    9910:	29400204 	addi	r5,r5,8
    9914:	10800054 	ori	r2,r2,1
    9918:	38800115 	stw	r2,4(r7)
    991c:	00075e80 	call	75e8 <_free_r>
    9920:	003fb606 	br	97fc <__alt_data_end+0xfffb40cc>
    9924:	880b883a 	mov	r5,r17
    9928:	9009883a 	mov	r4,r18
    992c:	00029500 	call	2950 <_malloc_r>
    9930:	1023883a 	mov	r17,r2
    9934:	1000aa26 	beq	r2,zero,9be0 <_realloc_r+0x574>
    9938:	98ffff17 	ldw	r3,-4(r19)
    993c:	113ffe04 	addi	r4,r2,-8
    9940:	00bfff84 	movi	r2,-2
    9944:	1884703a 	and	r2,r3,r2
    9948:	a885883a 	add	r2,r21,r2
    994c:	20808626 	beq	r4,r2,9b68 <_realloc_r+0x4fc>
    9950:	81bfff04 	addi	r6,r16,-4
    9954:	00800904 	movi	r2,36
    9958:	11807036 	bltu	r2,r6,9b1c <_realloc_r+0x4b0>
    995c:	00c004c4 	movi	r3,19
    9960:	19805636 	bltu	r3,r6,9abc <_realloc_r+0x450>
    9964:	8805883a 	mov	r2,r17
    9968:	9807883a 	mov	r3,r19
    996c:	19000017 	ldw	r4,0(r3)
    9970:	11000015 	stw	r4,0(r2)
    9974:	19000117 	ldw	r4,4(r3)
    9978:	11000115 	stw	r4,4(r2)
    997c:	18c00217 	ldw	r3,8(r3)
    9980:	10c00215 	stw	r3,8(r2)
    9984:	980b883a 	mov	r5,r19
    9988:	9009883a 	mov	r4,r18
    998c:	00075e80 	call	75e8 <_free_r>
    9990:	9009883a 	mov	r4,r18
    9994:	000f8b40 	call	f8b4 <__malloc_unlock>
    9998:	8805883a 	mov	r2,r17
    999c:	003f9a06 	br	9808 <__alt_data_end+0xfffb40d8>
    99a0:	300b883a 	mov	r5,r6
    99a4:	dfc00917 	ldw	ra,36(sp)
    99a8:	df000817 	ldw	fp,32(sp)
    99ac:	ddc00717 	ldw	r23,28(sp)
    99b0:	dd800617 	ldw	r22,24(sp)
    99b4:	dd400517 	ldw	r21,20(sp)
    99b8:	dd000417 	ldw	r20,16(sp)
    99bc:	dcc00317 	ldw	r19,12(sp)
    99c0:	dc800217 	ldw	r18,8(sp)
    99c4:	dc400117 	ldw	r17,4(sp)
    99c8:	dc000017 	ldw	r16,0(sp)
    99cc:	dec00a04 	addi	sp,sp,40
    99d0:	00029501 	jmpi	2950 <_malloc_r>
    99d4:	11400317 	ldw	r5,12(r2)
    99d8:	10800217 	ldw	r2,8(r2)
    99dc:	9823883a 	mov	r17,r19
    99e0:	2021883a 	mov	r16,r4
    99e4:	11400315 	stw	r5,12(r2)
    99e8:	28800215 	stw	r2,8(r5)
    99ec:	003f7906 	br	97d4 <__alt_data_end+0xfffb40a4>
    99f0:	21000117 	ldw	r4,4(r4)
    99f4:	00bfff04 	movi	r2,-4
    99f8:	a1800404 	addi	r6,r20,16
    99fc:	2088703a 	and	r4,r4,r2
    9a00:	2409883a 	add	r4,r4,r16
    9a04:	2180380e 	bge	r4,r6,9ae8 <_realloc_r+0x47c>
    9a08:	18c0004c 	andi	r3,r3,1
    9a0c:	183fc51e 	bne	r3,zero,9924 <__alt_data_end+0xfffb41f4>
    9a10:	9dfffe17 	ldw	r23,-8(r19)
    9a14:	adefc83a 	sub	r23,r21,r23
    9a18:	b9400117 	ldw	r5,4(r23)
    9a1c:	288a703a 	and	r5,r5,r2
    9a20:	216d883a 	add	r22,r4,r5
    9a24:	b1bf8b16 	blt	r22,r6,9854 <__alt_data_end+0xfffb4124>
    9a28:	b8800317 	ldw	r2,12(r23)
    9a2c:	b8c00217 	ldw	r3,8(r23)
    9a30:	81bfff04 	addi	r6,r16,-4
    9a34:	01000904 	movi	r4,36
    9a38:	18800315 	stw	r2,12(r3)
    9a3c:	10c00215 	stw	r3,8(r2)
    9a40:	bc400204 	addi	r17,r23,8
    9a44:	21805a36 	bltu	r4,r6,9bb0 <_realloc_r+0x544>
    9a48:	008004c4 	movi	r2,19
    9a4c:	1180562e 	bgeu	r2,r6,9ba8 <_realloc_r+0x53c>
    9a50:	98800017 	ldw	r2,0(r19)
    9a54:	b8800215 	stw	r2,8(r23)
    9a58:	98800117 	ldw	r2,4(r19)
    9a5c:	b8800315 	stw	r2,12(r23)
    9a60:	008006c4 	movi	r2,27
    9a64:	11805636 	bltu	r2,r6,9bc0 <_realloc_r+0x554>
    9a68:	b8800404 	addi	r2,r23,16
    9a6c:	9cc00204 	addi	r19,r19,8
    9a70:	98c00017 	ldw	r3,0(r19)
    9a74:	10c00015 	stw	r3,0(r2)
    9a78:	98c00117 	ldw	r3,4(r19)
    9a7c:	10c00115 	stw	r3,4(r2)
    9a80:	98c00217 	ldw	r3,8(r19)
    9a84:	10c00215 	stw	r3,8(r2)
    9a88:	bd07883a 	add	r3,r23,r20
    9a8c:	b505c83a 	sub	r2,r22,r20
    9a90:	e0c00215 	stw	r3,8(fp)
    9a94:	10800054 	ori	r2,r2,1
    9a98:	18800115 	stw	r2,4(r3)
    9a9c:	b8800117 	ldw	r2,4(r23)
    9aa0:	9009883a 	mov	r4,r18
    9aa4:	1080004c 	andi	r2,r2,1
    9aa8:	a0a8b03a 	or	r20,r20,r2
    9aac:	bd000115 	stw	r20,4(r23)
    9ab0:	000f8b40 	call	f8b4 <__malloc_unlock>
    9ab4:	8805883a 	mov	r2,r17
    9ab8:	003f5306 	br	9808 <__alt_data_end+0xfffb40d8>
    9abc:	98c00017 	ldw	r3,0(r19)
    9ac0:	88c00015 	stw	r3,0(r17)
    9ac4:	98c00117 	ldw	r3,4(r19)
    9ac8:	88c00115 	stw	r3,4(r17)
    9acc:	00c006c4 	movi	r3,27
    9ad0:	19801d36 	bltu	r3,r6,9b48 <_realloc_r+0x4dc>
    9ad4:	88800204 	addi	r2,r17,8
    9ad8:	98c00204 	addi	r3,r19,8
    9adc:	003fa306 	br	996c <__alt_data_end+0xfffb423c>
    9ae0:	8807883a 	mov	r3,r17
    9ae4:	003f7406 	br	98b8 <__alt_data_end+0xfffb4188>
    9ae8:	ad2b883a 	add	r21,r21,r20
    9aec:	2505c83a 	sub	r2,r4,r20
    9af0:	e5400215 	stw	r21,8(fp)
    9af4:	10800054 	ori	r2,r2,1
    9af8:	a8800115 	stw	r2,4(r21)
    9afc:	98bfff17 	ldw	r2,-4(r19)
    9b00:	9009883a 	mov	r4,r18
    9b04:	1080004c 	andi	r2,r2,1
    9b08:	a0a8b03a 	or	r20,r20,r2
    9b0c:	9d3fff15 	stw	r20,-4(r19)
    9b10:	000f8b40 	call	f8b4 <__malloc_unlock>
    9b14:	9805883a 	mov	r2,r19
    9b18:	003f3b06 	br	9808 <__alt_data_end+0xfffb40d8>
    9b1c:	8809883a 	mov	r4,r17
    9b20:	980b883a 	mov	r5,r19
    9b24:	00083a40 	call	83a4 <memmove>
    9b28:	003f9606 	br	9984 <__alt_data_end+0xfffb4254>
    9b2c:	8809883a 	mov	r4,r17
    9b30:	980b883a 	mov	r5,r19
    9b34:	00083a40 	call	83a4 <memmove>
    9b38:	b8c00117 	ldw	r3,4(r23)
    9b3c:	b021883a 	mov	r16,r22
    9b40:	b82b883a 	mov	r21,r23
    9b44:	003f2306 	br	97d4 <__alt_data_end+0xfffb40a4>
    9b48:	98c00217 	ldw	r3,8(r19)
    9b4c:	88c00215 	stw	r3,8(r17)
    9b50:	98c00317 	ldw	r3,12(r19)
    9b54:	88c00315 	stw	r3,12(r17)
    9b58:	30800c26 	beq	r6,r2,9b8c <_realloc_r+0x520>
    9b5c:	88800404 	addi	r2,r17,16
    9b60:	98c00404 	addi	r3,r19,16
    9b64:	003f8106 	br	996c <__alt_data_end+0xfffb423c>
    9b68:	893fff17 	ldw	r4,-4(r17)
    9b6c:	00bfff04 	movi	r2,-4
    9b70:	9823883a 	mov	r17,r19
    9b74:	2084703a 	and	r2,r4,r2
    9b78:	80a1883a 	add	r16,r16,r2
    9b7c:	003f1506 	br	97d4 <__alt_data_end+0xfffb40a4>
    9b80:	b8c00404 	addi	r3,r23,16
    9b84:	9cc00204 	addi	r19,r19,8
    9b88:	003f4b06 	br	98b8 <__alt_data_end+0xfffb4188>
    9b8c:	99000417 	ldw	r4,16(r19)
    9b90:	88800604 	addi	r2,r17,24
    9b94:	98c00604 	addi	r3,r19,24
    9b98:	89000415 	stw	r4,16(r17)
    9b9c:	99000517 	ldw	r4,20(r19)
    9ba0:	89000515 	stw	r4,20(r17)
    9ba4:	003f7106 	br	996c <__alt_data_end+0xfffb423c>
    9ba8:	8805883a 	mov	r2,r17
    9bac:	003fb006 	br	9a70 <__alt_data_end+0xfffb4340>
    9bb0:	8809883a 	mov	r4,r17
    9bb4:	980b883a 	mov	r5,r19
    9bb8:	00083a40 	call	83a4 <memmove>
    9bbc:	003fb206 	br	9a88 <__alt_data_end+0xfffb4358>
    9bc0:	98800217 	ldw	r2,8(r19)
    9bc4:	b8800415 	stw	r2,16(r23)
    9bc8:	98800317 	ldw	r2,12(r19)
    9bcc:	b8800515 	stw	r2,20(r23)
    9bd0:	31000726 	beq	r6,r4,9bf0 <_realloc_r+0x584>
    9bd4:	b8800604 	addi	r2,r23,24
    9bd8:	9cc00404 	addi	r19,r19,16
    9bdc:	003fa406 	br	9a70 <__alt_data_end+0xfffb4340>
    9be0:	9009883a 	mov	r4,r18
    9be4:	000f8b40 	call	f8b4 <__malloc_unlock>
    9be8:	0005883a 	mov	r2,zero
    9bec:	003f0606 	br	9808 <__alt_data_end+0xfffb40d8>
    9bf0:	98c00417 	ldw	r3,16(r19)
    9bf4:	9cc00604 	addi	r19,r19,24
    9bf8:	b8800804 	addi	r2,r23,32
    9bfc:	b8c00615 	stw	r3,24(r23)
    9c00:	98ffff17 	ldw	r3,-4(r19)
    9c04:	b8c00715 	stw	r3,28(r23)
    9c08:	003f9906 	br	9a70 <__alt_data_end+0xfffb4340>

00009c0c <__fpclassifyd>:
    9c0c:	00a00034 	movhi	r2,32768
    9c10:	10bfffc4 	addi	r2,r2,-1
    9c14:	2884703a 	and	r2,r5,r2
    9c18:	10000726 	beq	r2,zero,9c38 <__fpclassifyd+0x2c>
    9c1c:	00fffc34 	movhi	r3,65520
    9c20:	019ff834 	movhi	r6,32736
    9c24:	28c7883a 	add	r3,r5,r3
    9c28:	31bfffc4 	addi	r6,r6,-1
    9c2c:	30c00536 	bltu	r6,r3,9c44 <__fpclassifyd+0x38>
    9c30:	00800104 	movi	r2,4
    9c34:	f800283a 	ret
    9c38:	2000021e 	bne	r4,zero,9c44 <__fpclassifyd+0x38>
    9c3c:	00800084 	movi	r2,2
    9c40:	f800283a 	ret
    9c44:	00dffc34 	movhi	r3,32752
    9c48:	019ff834 	movhi	r6,32736
    9c4c:	28cb883a 	add	r5,r5,r3
    9c50:	31bfffc4 	addi	r6,r6,-1
    9c54:	317ff62e 	bgeu	r6,r5,9c30 <__alt_data_end+0xfffb4500>
    9c58:	01400434 	movhi	r5,16
    9c5c:	297fffc4 	addi	r5,r5,-1
    9c60:	28800236 	bltu	r5,r2,9c6c <__fpclassifyd+0x60>
    9c64:	008000c4 	movi	r2,3
    9c68:	f800283a 	ret
    9c6c:	10c00226 	beq	r2,r3,9c78 <__fpclassifyd+0x6c>
    9c70:	0005883a 	mov	r2,zero
    9c74:	f800283a 	ret
    9c78:	2005003a 	cmpeq	r2,r4,zero
    9c7c:	f800283a 	ret

00009c80 <__sread>:
    9c80:	defffe04 	addi	sp,sp,-8
    9c84:	dc000015 	stw	r16,0(sp)
    9c88:	2821883a 	mov	r16,r5
    9c8c:	2940038f 	ldh	r5,14(r5)
    9c90:	dfc00115 	stw	ra,4(sp)
    9c94:	000b93c0 	call	b93c <_read_r>
    9c98:	10000716 	blt	r2,zero,9cb8 <__sread+0x38>
    9c9c:	80c01417 	ldw	r3,80(r16)
    9ca0:	1887883a 	add	r3,r3,r2
    9ca4:	80c01415 	stw	r3,80(r16)
    9ca8:	dfc00117 	ldw	ra,4(sp)
    9cac:	dc000017 	ldw	r16,0(sp)
    9cb0:	dec00204 	addi	sp,sp,8
    9cb4:	f800283a 	ret
    9cb8:	80c0030b 	ldhu	r3,12(r16)
    9cbc:	18fbffcc 	andi	r3,r3,61439
    9cc0:	80c0030d 	sth	r3,12(r16)
    9cc4:	dfc00117 	ldw	ra,4(sp)
    9cc8:	dc000017 	ldw	r16,0(sp)
    9ccc:	dec00204 	addi	sp,sp,8
    9cd0:	f800283a 	ret

00009cd4 <__seofread>:
    9cd4:	0005883a 	mov	r2,zero
    9cd8:	f800283a 	ret

00009cdc <__swrite>:
    9cdc:	2880030b 	ldhu	r2,12(r5)
    9ce0:	defffb04 	addi	sp,sp,-20
    9ce4:	dcc00315 	stw	r19,12(sp)
    9ce8:	dc800215 	stw	r18,8(sp)
    9cec:	dc400115 	stw	r17,4(sp)
    9cf0:	dc000015 	stw	r16,0(sp)
    9cf4:	dfc00415 	stw	ra,16(sp)
    9cf8:	10c0400c 	andi	r3,r2,256
    9cfc:	2821883a 	mov	r16,r5
    9d00:	2027883a 	mov	r19,r4
    9d04:	3025883a 	mov	r18,r6
    9d08:	3823883a 	mov	r17,r7
    9d0c:	18000526 	beq	r3,zero,9d24 <__swrite+0x48>
    9d10:	2940038f 	ldh	r5,14(r5)
    9d14:	000d883a 	mov	r6,zero
    9d18:	01c00084 	movi	r7,2
    9d1c:	000b8e00 	call	b8e0 <_lseek_r>
    9d20:	8080030b 	ldhu	r2,12(r16)
    9d24:	8140038f 	ldh	r5,14(r16)
    9d28:	10bbffcc 	andi	r2,r2,61439
    9d2c:	9809883a 	mov	r4,r19
    9d30:	900d883a 	mov	r6,r18
    9d34:	880f883a 	mov	r7,r17
    9d38:	8080030d 	sth	r2,12(r16)
    9d3c:	dfc00417 	ldw	ra,16(sp)
    9d40:	dcc00317 	ldw	r19,12(sp)
    9d44:	dc800217 	ldw	r18,8(sp)
    9d48:	dc400117 	ldw	r17,4(sp)
    9d4c:	dc000017 	ldw	r16,0(sp)
    9d50:	dec00504 	addi	sp,sp,20
    9d54:	000b3bc1 	jmpi	b3bc <_write_r>

00009d58 <__sseek>:
    9d58:	defffe04 	addi	sp,sp,-8
    9d5c:	dc000015 	stw	r16,0(sp)
    9d60:	2821883a 	mov	r16,r5
    9d64:	2940038f 	ldh	r5,14(r5)
    9d68:	dfc00115 	stw	ra,4(sp)
    9d6c:	000b8e00 	call	b8e0 <_lseek_r>
    9d70:	00ffffc4 	movi	r3,-1
    9d74:	10c00826 	beq	r2,r3,9d98 <__sseek+0x40>
    9d78:	80c0030b 	ldhu	r3,12(r16)
    9d7c:	80801415 	stw	r2,80(r16)
    9d80:	18c40014 	ori	r3,r3,4096
    9d84:	80c0030d 	sth	r3,12(r16)
    9d88:	dfc00117 	ldw	ra,4(sp)
    9d8c:	dc000017 	ldw	r16,0(sp)
    9d90:	dec00204 	addi	sp,sp,8
    9d94:	f800283a 	ret
    9d98:	80c0030b 	ldhu	r3,12(r16)
    9d9c:	18fbffcc 	andi	r3,r3,61439
    9da0:	80c0030d 	sth	r3,12(r16)
    9da4:	dfc00117 	ldw	ra,4(sp)
    9da8:	dc000017 	ldw	r16,0(sp)
    9dac:	dec00204 	addi	sp,sp,8
    9db0:	f800283a 	ret

00009db4 <__sclose>:
    9db4:	2940038f 	ldh	r5,14(r5)
    9db8:	000b4181 	jmpi	b418 <_close_r>

00009dbc <strcmp>:
    9dbc:	2144b03a 	or	r2,r4,r5
    9dc0:	108000cc 	andi	r2,r2,3
    9dc4:	1000171e 	bne	r2,zero,9e24 <strcmp+0x68>
    9dc8:	20800017 	ldw	r2,0(r4)
    9dcc:	28c00017 	ldw	r3,0(r5)
    9dd0:	10c0141e 	bne	r2,r3,9e24 <strcmp+0x68>
    9dd4:	027fbff4 	movhi	r9,65279
    9dd8:	4a7fbfc4 	addi	r9,r9,-257
    9ddc:	0086303a 	nor	r3,zero,r2
    9de0:	02202074 	movhi	r8,32897
    9de4:	1245883a 	add	r2,r2,r9
    9de8:	42202004 	addi	r8,r8,-32640
    9dec:	10c4703a 	and	r2,r2,r3
    9df0:	1204703a 	and	r2,r2,r8
    9df4:	10000226 	beq	r2,zero,9e00 <strcmp+0x44>
    9df8:	00001706 	br	9e58 <strcmp+0x9c>
    9dfc:	1000161e 	bne	r2,zero,9e58 <strcmp+0x9c>
    9e00:	21000104 	addi	r4,r4,4
    9e04:	20c00017 	ldw	r3,0(r4)
    9e08:	29400104 	addi	r5,r5,4
    9e0c:	29800017 	ldw	r6,0(r5)
    9e10:	1a4f883a 	add	r7,r3,r9
    9e14:	00c4303a 	nor	r2,zero,r3
    9e18:	3884703a 	and	r2,r7,r2
    9e1c:	1204703a 	and	r2,r2,r8
    9e20:	19bff626 	beq	r3,r6,9dfc <__alt_data_end+0xfffb46cc>
    9e24:	20800007 	ldb	r2,0(r4)
    9e28:	1000051e 	bne	r2,zero,9e40 <strcmp+0x84>
    9e2c:	00000606 	br	9e48 <strcmp+0x8c>
    9e30:	21000044 	addi	r4,r4,1
    9e34:	20800007 	ldb	r2,0(r4)
    9e38:	29400044 	addi	r5,r5,1
    9e3c:	10000226 	beq	r2,zero,9e48 <strcmp+0x8c>
    9e40:	28c00007 	ldb	r3,0(r5)
    9e44:	10fffa26 	beq	r2,r3,9e30 <__alt_data_end+0xfffb4700>
    9e48:	20800003 	ldbu	r2,0(r4)
    9e4c:	28c00003 	ldbu	r3,0(r5)
    9e50:	10c5c83a 	sub	r2,r2,r3
    9e54:	f800283a 	ret
    9e58:	0005883a 	mov	r2,zero
    9e5c:	f800283a 	ret

00009e60 <__sprint_r.part.0>:
    9e60:	28801917 	ldw	r2,100(r5)
    9e64:	defff604 	addi	sp,sp,-40
    9e68:	dd400515 	stw	r21,20(sp)
    9e6c:	dcc00315 	stw	r19,12(sp)
    9e70:	dfc00915 	stw	ra,36(sp)
    9e74:	df000815 	stw	fp,32(sp)
    9e78:	ddc00715 	stw	r23,28(sp)
    9e7c:	dd800615 	stw	r22,24(sp)
    9e80:	dd000415 	stw	r20,16(sp)
    9e84:	dc800215 	stw	r18,8(sp)
    9e88:	dc400115 	stw	r17,4(sp)
    9e8c:	dc000015 	stw	r16,0(sp)
    9e90:	1088000c 	andi	r2,r2,8192
    9e94:	2827883a 	mov	r19,r5
    9e98:	302b883a 	mov	r21,r6
    9e9c:	10002d26 	beq	r2,zero,9f54 <__sprint_r.part.0+0xf4>
    9ea0:	30800217 	ldw	r2,8(r6)
    9ea4:	35800017 	ldw	r22,0(r6)
    9ea8:	10002826 	beq	r2,zero,9f4c <__sprint_r.part.0+0xec>
    9eac:	2029883a 	mov	r20,r4
    9eb0:	b5c00104 	addi	r23,r22,4
    9eb4:	04bfffc4 	movi	r18,-1
    9eb8:	bc400017 	ldw	r17,0(r23)
    9ebc:	b4000017 	ldw	r16,0(r22)
    9ec0:	0039883a 	mov	fp,zero
    9ec4:	8822d0ba 	srli	r17,r17,2
    9ec8:	04400316 	blt	zero,r17,9ed8 <__sprint_r.part.0+0x78>
    9ecc:	00001706 	br	9f2c <__sprint_r.part.0+0xcc>
    9ed0:	84000104 	addi	r16,r16,4
    9ed4:	8f001526 	beq	r17,fp,9f2c <__sprint_r.part.0+0xcc>
    9ed8:	81400017 	ldw	r5,0(r16)
    9edc:	a009883a 	mov	r4,r20
    9ee0:	980d883a 	mov	r6,r19
    9ee4:	000b6580 	call	b658 <_fputwc_r>
    9ee8:	e7000044 	addi	fp,fp,1
    9eec:	14bff81e 	bne	r2,r18,9ed0 <__alt_data_end+0xfffb47a0>
    9ef0:	9005883a 	mov	r2,r18
    9ef4:	a8000215 	stw	zero,8(r21)
    9ef8:	a8000115 	stw	zero,4(r21)
    9efc:	dfc00917 	ldw	ra,36(sp)
    9f00:	df000817 	ldw	fp,32(sp)
    9f04:	ddc00717 	ldw	r23,28(sp)
    9f08:	dd800617 	ldw	r22,24(sp)
    9f0c:	dd400517 	ldw	r21,20(sp)
    9f10:	dd000417 	ldw	r20,16(sp)
    9f14:	dcc00317 	ldw	r19,12(sp)
    9f18:	dc800217 	ldw	r18,8(sp)
    9f1c:	dc400117 	ldw	r17,4(sp)
    9f20:	dc000017 	ldw	r16,0(sp)
    9f24:	dec00a04 	addi	sp,sp,40
    9f28:	f800283a 	ret
    9f2c:	a8c00217 	ldw	r3,8(r21)
    9f30:	8c63883a 	add	r17,r17,r17
    9f34:	8c63883a 	add	r17,r17,r17
    9f38:	1c45c83a 	sub	r2,r3,r17
    9f3c:	a8800215 	stw	r2,8(r21)
    9f40:	b5800204 	addi	r22,r22,8
    9f44:	bdc00204 	addi	r23,r23,8
    9f48:	103fdb1e 	bne	r2,zero,9eb8 <__alt_data_end+0xfffb4788>
    9f4c:	0005883a 	mov	r2,zero
    9f50:	003fe806 	br	9ef4 <__alt_data_end+0xfffb47c4>
    9f54:	00078d80 	call	78d8 <__sfvwrite_r>
    9f58:	003fe606 	br	9ef4 <__alt_data_end+0xfffb47c4>

00009f5c <__sprint_r>:
    9f5c:	30c00217 	ldw	r3,8(r6)
    9f60:	18000126 	beq	r3,zero,9f68 <__sprint_r+0xc>
    9f64:	0009e601 	jmpi	9e60 <__sprint_r.part.0>
    9f68:	30000115 	stw	zero,4(r6)
    9f6c:	0005883a 	mov	r2,zero
    9f70:	f800283a 	ret

00009f74 <___vfiprintf_internal_r>:
    9f74:	defeca04 	addi	sp,sp,-1240
    9f78:	dcc12f15 	stw	r19,1212(sp)
    9f7c:	dfc13515 	stw	ra,1236(sp)
    9f80:	df013415 	stw	fp,1232(sp)
    9f84:	ddc13315 	stw	r23,1228(sp)
    9f88:	dd813215 	stw	r22,1224(sp)
    9f8c:	dd413115 	stw	r21,1220(sp)
    9f90:	dd013015 	stw	r20,1216(sp)
    9f94:	dc812e15 	stw	r18,1208(sp)
    9f98:	dc412d15 	stw	r17,1204(sp)
    9f9c:	dc012c15 	stw	r16,1200(sp)
    9fa0:	d9012115 	stw	r4,1156(sp)
    9fa4:	d9412015 	stw	r5,1152(sp)
    9fa8:	d9c12315 	stw	r7,1164(sp)
    9fac:	3027883a 	mov	r19,r6
    9fb0:	20000226 	beq	r4,zero,9fbc <___vfiprintf_internal_r+0x48>
    9fb4:	20800e17 	ldw	r2,56(r4)
    9fb8:	1000f726 	beq	r2,zero,a398 <___vfiprintf_internal_r+0x424>
    9fbc:	d8812017 	ldw	r2,1152(sp)
    9fc0:	10c0030b 	ldhu	r3,12(r2)
    9fc4:	1908000c 	andi	r4,r3,8192
    9fc8:	1805883a 	mov	r2,r3
    9fcc:	2000081e 	bne	r4,zero,9ff0 <___vfiprintf_internal_r+0x7c>
    9fd0:	d9412017 	ldw	r5,1152(sp)
    9fd4:	18880014 	ori	r2,r3,8192
    9fd8:	00f7ffc4 	movi	r3,-8193
    9fdc:	29001917 	ldw	r4,100(r5)
    9fe0:	2880030d 	sth	r2,12(r5)
    9fe4:	20c8703a 	and	r4,r4,r3
    9fe8:	29001915 	stw	r4,100(r5)
    9fec:	1007883a 	mov	r3,r2
    9ff0:	1100020c 	andi	r4,r2,8
    9ff4:	2000a726 	beq	r4,zero,a294 <___vfiprintf_internal_r+0x320>
    9ff8:	d9412017 	ldw	r5,1152(sp)
    9ffc:	29000417 	ldw	r4,16(r5)
    a000:	2000a426 	beq	r4,zero,a294 <___vfiprintf_internal_r+0x320>
    a004:	1080068c 	andi	r2,r2,26
    a008:	01000284 	movi	r4,10
    a00c:	1100ab26 	beq	r2,r4,a2bc <___vfiprintf_internal_r+0x348>
    a010:	d9010a04 	addi	r4,sp,1064
    a014:	d94109c4 	addi	r5,sp,1063
    a018:	07000074 	movhi	fp,1
    a01c:	04400074 	movhi	r17,1
    a020:	2145c83a 	sub	r2,r4,r5
    a024:	e7091a04 	addi	fp,fp,9320
    a028:	8c491604 	addi	r17,r17,9304
    a02c:	d9011e15 	stw	r4,1144(sp)
    a030:	d9411f15 	stw	r5,1148(sp)
    a034:	dec11a15 	stw	sp,1128(sp)
    a038:	d8011c15 	stw	zero,1136(sp)
    a03c:	d8011b15 	stw	zero,1132(sp)
    a040:	d8012715 	stw	zero,1180(sp)
    a044:	d8012515 	stw	zero,1172(sp)
    a048:	d811883a 	mov	r8,sp
    a04c:	d8812815 	stw	r2,1184(sp)
    a050:	982f883a 	mov	r23,r19
    a054:	b8800007 	ldb	r2,0(r23)
    a058:	1003b026 	beq	r2,zero,af1c <___vfiprintf_internal_r+0xfa8>
    a05c:	01000944 	movi	r4,37
    a060:	1103ae26 	beq	r2,r4,af1c <___vfiprintf_internal_r+0xfa8>
    a064:	b805883a 	mov	r2,r23
    a068:	00000106 	br	a070 <___vfiprintf_internal_r+0xfc>
    a06c:	19000326 	beq	r3,r4,a07c <___vfiprintf_internal_r+0x108>
    a070:	10800044 	addi	r2,r2,1
    a074:	10c00007 	ldb	r3,0(r2)
    a078:	183ffc1e 	bne	r3,zero,a06c <__alt_data_end+0xfffb493c>
    a07c:	15e1c83a 	sub	r16,r2,r23
    a080:	1029883a 	mov	r20,r2
    a084:	80001026 	beq	r16,zero,a0c8 <___vfiprintf_internal_r+0x154>
    a088:	d8c11c17 	ldw	r3,1136(sp)
    a08c:	d8811b17 	ldw	r2,1132(sp)
    a090:	45c00015 	stw	r23,0(r8)
    a094:	80c7883a 	add	r3,r16,r3
    a098:	10800044 	addi	r2,r2,1
    a09c:	44000115 	stw	r16,4(r8)
    a0a0:	d8c11c15 	stw	r3,1136(sp)
    a0a4:	d8811b15 	stw	r2,1132(sp)
    a0a8:	010001c4 	movi	r4,7
    a0ac:	2080740e 	bge	r4,r2,a280 <___vfiprintf_internal_r+0x30c>
    a0b0:	1803a71e 	bne	r3,zero,af50 <___vfiprintf_internal_r+0xfdc>
    a0b4:	d8c12517 	ldw	r3,1172(sp)
    a0b8:	d8011b15 	stw	zero,1132(sp)
    a0bc:	d811883a 	mov	r8,sp
    a0c0:	1c07883a 	add	r3,r3,r16
    a0c4:	d8c12515 	stw	r3,1172(sp)
    a0c8:	a0800007 	ldb	r2,0(r20)
    a0cc:	1002bf26 	beq	r2,zero,abcc <___vfiprintf_internal_r+0xc58>
    a0d0:	a5c00044 	addi	r23,r20,1
    a0d4:	a1800047 	ldb	r6,1(r20)
    a0d8:	d8011d85 	stb	zero,1142(sp)
    a0dc:	d8012205 	stb	zero,1160(sp)
    a0e0:	043fffc4 	movi	r16,-1
    a0e4:	d8012415 	stw	zero,1168(sp)
    a0e8:	0025883a 	mov	r18,zero
    a0ec:	05001604 	movi	r20,88
    a0f0:	05400244 	movi	r21,9
    a0f4:	4027883a 	mov	r19,r8
    a0f8:	bdc00044 	addi	r23,r23,1
    a0fc:	30bff804 	addi	r2,r6,-32
    a100:	a0825636 	bltu	r20,r2,aa5c <___vfiprintf_internal_r+0xae8>
    a104:	100490ba 	slli	r2,r2,2
    a108:	01000074 	movhi	r4,1
    a10c:	21284704 	addi	r4,r4,-24292
    a110:	1105883a 	add	r2,r2,r4
    a114:	10800017 	ldw	r2,0(r2)
    a118:	1000683a 	jmp	r2
    a11c:	0000a9ec 	andhi	zero,zero,679
    a120:	0000aa5c 	xori	zero,zero,681
    a124:	0000aa5c 	xori	zero,zero,681
    a128:	0000aa50 	cmplti	zero,zero,681
    a12c:	0000aa5c 	xori	zero,zero,681
    a130:	0000aa5c 	xori	zero,zero,681
    a134:	0000aa5c 	xori	zero,zero,681
    a138:	0000aa5c 	xori	zero,zero,681
    a13c:	0000aa5c 	xori	zero,zero,681
    a140:	0000aa5c 	xori	zero,zero,681
    a144:	0000a7dc 	xori	zero,zero,671
    a148:	0000aa04 	movi	zero,680
    a14c:	0000aa5c 	xori	zero,zero,681
    a150:	0000a3b0 	cmpltui	zero,zero,654
    a154:	0000a800 	call	a80 <setup_keyboard+0x3e0>
    a158:	0000aa5c 	xori	zero,zero,681
    a15c:	0000a3bc 	xorhi	zero,zero,654
    a160:	0000a3c8 	cmpgei	zero,zero,655
    a164:	0000a3c8 	cmpgei	zero,zero,655
    a168:	0000a3c8 	cmpgei	zero,zero,655
    a16c:	0000a3c8 	cmpgei	zero,zero,655
    a170:	0000a3c8 	cmpgei	zero,zero,655
    a174:	0000a3c8 	cmpgei	zero,zero,655
    a178:	0000a3c8 	cmpgei	zero,zero,655
    a17c:	0000a3c8 	cmpgei	zero,zero,655
    a180:	0000a3c8 	cmpgei	zero,zero,655
    a184:	0000aa5c 	xori	zero,zero,681
    a188:	0000aa5c 	xori	zero,zero,681
    a18c:	0000aa5c 	xori	zero,zero,681
    a190:	0000aa5c 	xori	zero,zero,681
    a194:	0000aa5c 	xori	zero,zero,681
    a198:	0000aa5c 	xori	zero,zero,681
    a19c:	0000aa5c 	xori	zero,zero,681
    a1a0:	0000aa5c 	xori	zero,zero,681
    a1a4:	0000aa5c 	xori	zero,zero,681
    a1a8:	0000aa5c 	xori	zero,zero,681
    a1ac:	0000a408 	cmpgei	zero,zero,656
    a1b0:	0000aa5c 	xori	zero,zero,681
    a1b4:	0000aa5c 	xori	zero,zero,681
    a1b8:	0000aa5c 	xori	zero,zero,681
    a1bc:	0000aa5c 	xori	zero,zero,681
    a1c0:	0000aa5c 	xori	zero,zero,681
    a1c4:	0000aa5c 	xori	zero,zero,681
    a1c8:	0000aa5c 	xori	zero,zero,681
    a1cc:	0000aa5c 	xori	zero,zero,681
    a1d0:	0000aa5c 	xori	zero,zero,681
    a1d4:	0000aa5c 	xori	zero,zero,681
    a1d8:	0000a6f8 	rdprs	zero,zero,667
    a1dc:	0000aa5c 	xori	zero,zero,681
    a1e0:	0000aa5c 	xori	zero,zero,681
    a1e4:	0000aa5c 	xori	zero,zero,681
    a1e8:	0000aa5c 	xori	zero,zero,681
    a1ec:	0000aa5c 	xori	zero,zero,681
    a1f0:	0000a738 	rdprs	zero,zero,668
    a1f4:	0000aa5c 	xori	zero,zero,681
    a1f8:	0000aa5c 	xori	zero,zero,681
    a1fc:	0000a77c 	xorhi	zero,zero,669
    a200:	0000aa5c 	xori	zero,zero,681
    a204:	0000aa5c 	xori	zero,zero,681
    a208:	0000aa5c 	xori	zero,zero,681
    a20c:	0000aa5c 	xori	zero,zero,681
    a210:	0000aa5c 	xori	zero,zero,681
    a214:	0000aa5c 	xori	zero,zero,681
    a218:	0000aa5c 	xori	zero,zero,681
    a21c:	0000aa5c 	xori	zero,zero,681
    a220:	0000aa5c 	xori	zero,zero,681
    a224:	0000aa5c 	xori	zero,zero,681
    a228:	0000a6c4 	movi	zero,667
    a22c:	0000aa14 	movui	zero,680
    a230:	0000aa5c 	xori	zero,zero,681
    a234:	0000aa5c 	xori	zero,zero,681
    a238:	0000aa5c 	xori	zero,zero,681
    a23c:	0000a850 	cmplti	zero,zero,673
    a240:	0000aa14 	movui	zero,680
    a244:	0000aa5c 	xori	zero,zero,681
    a248:	0000aa5c 	xori	zero,zero,681
    a24c:	0000a768 	cmpgeui	zero,zero,669
    a250:	0000aa5c 	xori	zero,zero,681
    a254:	0000a9b4 	movhi	zero,678
    a258:	0000a93c 	xorhi	zero,zero,676
    a25c:	0000a970 	cmpltui	zero,zero,677
    a260:	0000a85c 	xori	zero,zero,673
    a264:	0000aa5c 	xori	zero,zero,681
    a268:	0000a868 	cmpgeui	zero,zero,673
    a26c:	0000aa5c 	xori	zero,zero,681
    a270:	0000a8c4 	movi	zero,675
    a274:	0000aa5c 	xori	zero,zero,681
    a278:	0000aa5c 	xori	zero,zero,681
    a27c:	0000a8f8 	rdprs	zero,zero,675
    a280:	42000204 	addi	r8,r8,8
    a284:	d8c12517 	ldw	r3,1172(sp)
    a288:	1c07883a 	add	r3,r3,r16
    a28c:	d8c12515 	stw	r3,1172(sp)
    a290:	003f8d06 	br	a0c8 <__alt_data_end+0xfffb4998>
    a294:	d9012117 	ldw	r4,1156(sp)
    a298:	d9412017 	ldw	r5,1152(sp)
    a29c:	00054380 	call	5438 <__swsetup_r>
    a2a0:	1000301e 	bne	r2,zero,a364 <___vfiprintf_internal_r+0x3f0>
    a2a4:	d8812017 	ldw	r2,1152(sp)
    a2a8:	01000284 	movi	r4,10
    a2ac:	10c0030b 	ldhu	r3,12(r2)
    a2b0:	1805883a 	mov	r2,r3
    a2b4:	1080068c 	andi	r2,r2,26
    a2b8:	113f551e 	bne	r2,r4,a010 <__alt_data_end+0xfffb48e0>
    a2bc:	d9012017 	ldw	r4,1152(sp)
    a2c0:	2080038b 	ldhu	r2,14(r4)
    a2c4:	113fffcc 	andi	r4,r2,65535
    a2c8:	2120001c 	xori	r4,r4,32768
    a2cc:	21200004 	addi	r4,r4,-32768
    a2d0:	203f4f16 	blt	r4,zero,a010 <__alt_data_end+0xfffb48e0>
    a2d4:	d9412017 	ldw	r5,1152(sp)
    a2d8:	d9012117 	ldw	r4,1156(sp)
    a2dc:	d9c12317 	ldw	r7,1164(sp)
    a2e0:	2b001917 	ldw	r12,100(r5)
    a2e4:	2ac00717 	ldw	r11,28(r5)
    a2e8:	2a800917 	ldw	r10,36(r5)
    a2ec:	02010004 	movi	r8,1024
    a2f0:	18ffff4c 	andi	r3,r3,65533
    a2f4:	da0b883a 	add	r5,sp,r8
    a2f8:	980d883a 	mov	r6,r19
    a2fc:	d8c1030d 	sth	r3,1036(sp)
    a300:	db011915 	stw	r12,1124(sp)
    a304:	d881038d 	sth	r2,1038(sp)
    a308:	dac10715 	stw	r11,1052(sp)
    a30c:	da810915 	stw	r10,1060(sp)
    a310:	dec10015 	stw	sp,1024(sp)
    a314:	dec10415 	stw	sp,1040(sp)
    a318:	da010215 	stw	r8,1032(sp)
    a31c:	da010515 	stw	r8,1044(sp)
    a320:	d8010615 	stw	zero,1048(sp)
    a324:	0009f740 	call	9f74 <___vfiprintf_internal_r>
    a328:	1021883a 	mov	r16,r2
    a32c:	10000416 	blt	r2,zero,a340 <___vfiprintf_internal_r+0x3cc>
    a330:	d9012117 	ldw	r4,1156(sp)
    a334:	d9410004 	addi	r5,sp,1024
    a338:	0006eb80 	call	6eb8 <_fflush_r>
    a33c:	10040f1e 	bne	r2,zero,b37c <___vfiprintf_internal_r+0x1408>
    a340:	d881030b 	ldhu	r2,1036(sp)
    a344:	1080100c 	andi	r2,r2,64
    a348:	10000426 	beq	r2,zero,a35c <___vfiprintf_internal_r+0x3e8>
    a34c:	d8c12017 	ldw	r3,1152(sp)
    a350:	1880030b 	ldhu	r2,12(r3)
    a354:	10801014 	ori	r2,r2,64
    a358:	1880030d 	sth	r2,12(r3)
    a35c:	8005883a 	mov	r2,r16
    a360:	00000106 	br	a368 <___vfiprintf_internal_r+0x3f4>
    a364:	00bfffc4 	movi	r2,-1
    a368:	dfc13517 	ldw	ra,1236(sp)
    a36c:	df013417 	ldw	fp,1232(sp)
    a370:	ddc13317 	ldw	r23,1228(sp)
    a374:	dd813217 	ldw	r22,1224(sp)
    a378:	dd413117 	ldw	r21,1220(sp)
    a37c:	dd013017 	ldw	r20,1216(sp)
    a380:	dcc12f17 	ldw	r19,1212(sp)
    a384:	dc812e17 	ldw	r18,1208(sp)
    a388:	dc412d17 	ldw	r17,1204(sp)
    a38c:	dc012c17 	ldw	r16,1200(sp)
    a390:	dec13604 	addi	sp,sp,1240
    a394:	f800283a 	ret
    a398:	00074740 	call	7474 <__sinit>
    a39c:	003f0706 	br	9fbc <__alt_data_end+0xfffb488c>
    a3a0:	d8c12417 	ldw	r3,1168(sp)
    a3a4:	d8812315 	stw	r2,1164(sp)
    a3a8:	00c7c83a 	sub	r3,zero,r3
    a3ac:	d8c12415 	stw	r3,1168(sp)
    a3b0:	94800114 	ori	r18,r18,4
    a3b4:	b9800007 	ldb	r6,0(r23)
    a3b8:	003f4f06 	br	a0f8 <__alt_data_end+0xfffb49c8>
    a3bc:	94802014 	ori	r18,r18,128
    a3c0:	b9800007 	ldb	r6,0(r23)
    a3c4:	003f4c06 	br	a0f8 <__alt_data_end+0xfffb49c8>
    a3c8:	dc012615 	stw	r16,1176(sp)
    a3cc:	d8012415 	stw	zero,1168(sp)
    a3d0:	35bff404 	addi	r22,r6,-48
    a3d4:	0009883a 	mov	r4,zero
    a3d8:	b821883a 	mov	r16,r23
    a3dc:	01400284 	movi	r5,10
    a3e0:	000ca900 	call	ca90 <__mulsi3>
    a3e4:	81800007 	ldb	r6,0(r16)
    a3e8:	1589883a 	add	r4,r2,r22
    a3ec:	bdc00044 	addi	r23,r23,1
    a3f0:	35bff404 	addi	r22,r6,-48
    a3f4:	b821883a 	mov	r16,r23
    a3f8:	adbff82e 	bgeu	r21,r22,a3dc <__alt_data_end+0xfffb4cac>
    a3fc:	d9012415 	stw	r4,1168(sp)
    a400:	dc012617 	ldw	r16,1176(sp)
    a404:	003f3d06 	br	a0fc <__alt_data_end+0xfffb49cc>
    a408:	d8c12203 	ldbu	r3,1160(sp)
    a40c:	94800414 	ori	r18,r18,16
    a410:	9080080c 	andi	r2,r18,32
    a414:	d8c11d85 	stb	r3,1142(sp)
    a418:	9811883a 	mov	r8,r19
    a41c:	d8c12317 	ldw	r3,1164(sp)
    a420:	10018226 	beq	r2,zero,aa2c <___vfiprintf_internal_r+0xab8>
    a424:	d9012317 	ldw	r4,1164(sp)
    a428:	18800117 	ldw	r2,4(r3)
    a42c:	1cc00017 	ldw	r19,0(r3)
    a430:	21000204 	addi	r4,r4,8
    a434:	d9012315 	stw	r4,1164(sp)
    a438:	102b883a 	mov	r21,r2
    a43c:	10030016 	blt	r2,zero,b040 <___vfiprintf_internal_r+0x10cc>
    a440:	dd811d83 	ldbu	r22,1142(sp)
    a444:	8029883a 	mov	r20,r16
    a448:	00800044 	movi	r2,1
    a44c:	9d46b03a 	or	r3,r19,r21
    a450:	80000216 	blt	r16,zero,a45c <___vfiprintf_internal_r+0x4e8>
    a454:	013fdfc4 	movi	r4,-129
    a458:	9124703a 	and	r18,r18,r4
    a45c:	1801b41e 	bne	r3,zero,ab30 <___vfiprintf_internal_r+0xbbc>
    a460:	80028126 	beq	r16,zero,ae68 <___vfiprintf_internal_r+0xef4>
    a464:	10803fcc 	andi	r2,r2,255
    a468:	00c00044 	movi	r3,1
    a46c:	10c1d126 	beq	r2,r3,abb4 <___vfiprintf_internal_r+0xc40>
    a470:	00c00084 	movi	r3,2
    a474:	10c28626 	beq	r2,r3,ae90 <___vfiprintf_internal_r+0xf1c>
    a478:	d8c10a04 	addi	r3,sp,1064
    a47c:	9808d0fa 	srli	r4,r19,3
    a480:	a80a977a 	slli	r5,r21,29
    a484:	a82ad0fa 	srli	r21,r21,3
    a488:	9cc001cc 	andi	r19,r19,7
    a48c:	98800c04 	addi	r2,r19,48
    a490:	18ffffc4 	addi	r3,r3,-1
    a494:	2926b03a 	or	r19,r5,r4
    a498:	18800005 	stb	r2,0(r3)
    a49c:	9d48b03a 	or	r4,r19,r21
    a4a0:	203ff61e 	bne	r4,zero,a47c <__alt_data_end+0xfffb4d4c>
    a4a4:	9100004c 	andi	r4,r18,1
    a4a8:	d8c12215 	stw	r3,1160(sp)
    a4ac:	2002b31e 	bne	r4,zero,af7c <___vfiprintf_internal_r+0x1008>
    a4b0:	d9411e17 	ldw	r5,1144(sp)
    a4b4:	28e9c83a 	sub	r20,r5,r3
    a4b8:	a02b883a 	mov	r21,r20
    a4bc:	a400010e 	bge	r20,r16,a4c4 <___vfiprintf_internal_r+0x550>
    a4c0:	802b883a 	mov	r21,r16
    a4c4:	b5803fcc 	andi	r22,r22,255
    a4c8:	b580201c 	xori	r22,r22,128
    a4cc:	b5bfe004 	addi	r22,r22,-128
    a4d0:	b0000126 	beq	r22,zero,a4d8 <___vfiprintf_internal_r+0x564>
    a4d4:	ad400044 	addi	r21,r21,1
    a4d8:	9280008c 	andi	r10,r18,2
    a4dc:	50000126 	beq	r10,zero,a4e4 <___vfiprintf_internal_r+0x570>
    a4e0:	ad400084 	addi	r21,r21,2
    a4e4:	9580210c 	andi	r22,r18,132
    a4e8:	b001751e 	bne	r22,zero,aac0 <___vfiprintf_internal_r+0xb4c>
    a4ec:	d9012417 	ldw	r4,1168(sp)
    a4f0:	2567c83a 	sub	r19,r4,r21
    a4f4:	04c1720e 	bge	zero,r19,aac0 <___vfiprintf_internal_r+0xb4c>
    a4f8:	01c00404 	movi	r7,16
    a4fc:	d8c11c17 	ldw	r3,1136(sp)
    a500:	3cc36b0e 	bge	r7,r19,b2b0 <___vfiprintf_internal_r+0x133c>
    a504:	00800074 	movhi	r2,1
    a508:	10891a04 	addi	r2,r2,9320
    a50c:	dc012915 	stw	r16,1188(sp)
    a510:	d9011b17 	ldw	r4,1132(sp)
    a514:	9821883a 	mov	r16,r19
    a518:	d8812615 	stw	r2,1176(sp)
    a51c:	030001c4 	movi	r12,7
    a520:	5027883a 	mov	r19,r10
    a524:	00000506 	br	a53c <___vfiprintf_internal_r+0x5c8>
    a528:	21400084 	addi	r5,r4,2
    a52c:	42000204 	addi	r8,r8,8
    a530:	1009883a 	mov	r4,r2
    a534:	843ffc04 	addi	r16,r16,-16
    a538:	3c000d0e 	bge	r7,r16,a570 <___vfiprintf_internal_r+0x5fc>
    a53c:	18c00404 	addi	r3,r3,16
    a540:	20800044 	addi	r2,r4,1
    a544:	47000015 	stw	fp,0(r8)
    a548:	41c00115 	stw	r7,4(r8)
    a54c:	d8c11c15 	stw	r3,1136(sp)
    a550:	d8811b15 	stw	r2,1132(sp)
    a554:	60bff40e 	bge	r12,r2,a528 <__alt_data_end+0xfffb4df8>
    a558:	18014b1e 	bne	r3,zero,aa88 <___vfiprintf_internal_r+0xb14>
    a55c:	843ffc04 	addi	r16,r16,-16
    a560:	0009883a 	mov	r4,zero
    a564:	01400044 	movi	r5,1
    a568:	d811883a 	mov	r8,sp
    a56c:	3c3ff316 	blt	r7,r16,a53c <__alt_data_end+0xfffb4e0c>
    a570:	9815883a 	mov	r10,r19
    a574:	8027883a 	mov	r19,r16
    a578:	dc012917 	ldw	r16,1188(sp)
    a57c:	d9012617 	ldw	r4,1176(sp)
    a580:	98c7883a 	add	r3,r19,r3
    a584:	44c00115 	stw	r19,4(r8)
    a588:	41000015 	stw	r4,0(r8)
    a58c:	d8c11c15 	stw	r3,1136(sp)
    a590:	d9411b15 	stw	r5,1132(sp)
    a594:	008001c4 	movi	r2,7
    a598:	11425116 	blt	r2,r5,aee0 <___vfiprintf_internal_r+0xf6c>
    a59c:	d9011d87 	ldb	r4,1142(sp)
    a5a0:	42000204 	addi	r8,r8,8
    a5a4:	28800044 	addi	r2,r5,1
    a5a8:	20014a1e 	bne	r4,zero,aad4 <___vfiprintf_internal_r+0xb60>
    a5ac:	50000c26 	beq	r10,zero,a5e0 <___vfiprintf_internal_r+0x66c>
    a5b0:	d9011d04 	addi	r4,sp,1140
    a5b4:	18c00084 	addi	r3,r3,2
    a5b8:	41000015 	stw	r4,0(r8)
    a5bc:	01000084 	movi	r4,2
    a5c0:	41000115 	stw	r4,4(r8)
    a5c4:	d8c11c15 	stw	r3,1136(sp)
    a5c8:	d8811b15 	stw	r2,1132(sp)
    a5cc:	010001c4 	movi	r4,7
    a5d0:	20822016 	blt	r4,r2,ae54 <___vfiprintf_internal_r+0xee0>
    a5d4:	100b883a 	mov	r5,r2
    a5d8:	42000204 	addi	r8,r8,8
    a5dc:	10800044 	addi	r2,r2,1
    a5e0:	01002004 	movi	r4,128
    a5e4:	b101de26 	beq	r22,r4,ad60 <___vfiprintf_internal_r+0xdec>
    a5e8:	8521c83a 	sub	r16,r16,r20
    a5ec:	0400230e 	bge	zero,r16,a67c <___vfiprintf_internal_r+0x708>
    a5f0:	04c00404 	movi	r19,16
    a5f4:	9c030d0e 	bge	r19,r16,b22c <___vfiprintf_internal_r+0x12b8>
    a5f8:	00800074 	movhi	r2,1
    a5fc:	10891604 	addi	r2,r2,9304
    a600:	d8812615 	stw	r2,1176(sp)
    a604:	058001c4 	movi	r22,7
    a608:	00000506 	br	a620 <___vfiprintf_internal_r+0x6ac>
    a60c:	28800084 	addi	r2,r5,2
    a610:	42000204 	addi	r8,r8,8
    a614:	200b883a 	mov	r5,r4
    a618:	843ffc04 	addi	r16,r16,-16
    a61c:	9c000d0e 	bge	r19,r16,a654 <___vfiprintf_internal_r+0x6e0>
    a620:	18c00404 	addi	r3,r3,16
    a624:	29000044 	addi	r4,r5,1
    a628:	44400015 	stw	r17,0(r8)
    a62c:	44c00115 	stw	r19,4(r8)
    a630:	d8c11c15 	stw	r3,1136(sp)
    a634:	d9011b15 	stw	r4,1132(sp)
    a638:	b13ff40e 	bge	r22,r4,a60c <__alt_data_end+0xfffb4edc>
    a63c:	1801321e 	bne	r3,zero,ab08 <___vfiprintf_internal_r+0xb94>
    a640:	843ffc04 	addi	r16,r16,-16
    a644:	000b883a 	mov	r5,zero
    a648:	00800044 	movi	r2,1
    a64c:	d811883a 	mov	r8,sp
    a650:	9c3ff316 	blt	r19,r16,a620 <__alt_data_end+0xfffb4ef0>
    a654:	d9012617 	ldw	r4,1176(sp)
    a658:	1c07883a 	add	r3,r3,r16
    a65c:	44000115 	stw	r16,4(r8)
    a660:	41000015 	stw	r4,0(r8)
    a664:	d8c11c15 	stw	r3,1136(sp)
    a668:	d8811b15 	stw	r2,1132(sp)
    a66c:	010001c4 	movi	r4,7
    a670:	20816216 	blt	r4,r2,abfc <___vfiprintf_internal_r+0xc88>
    a674:	42000204 	addi	r8,r8,8
    a678:	10800044 	addi	r2,r2,1
    a67c:	d9012217 	ldw	r4,1160(sp)
    a680:	1d07883a 	add	r3,r3,r20
    a684:	45000115 	stw	r20,4(r8)
    a688:	41000015 	stw	r4,0(r8)
    a68c:	d8c11c15 	stw	r3,1136(sp)
    a690:	d8811b15 	stw	r2,1132(sp)
    a694:	010001c4 	movi	r4,7
    a698:	2081610e 	bge	r4,r2,ac20 <___vfiprintf_internal_r+0xcac>
    a69c:	1802211e 	bne	r3,zero,af24 <___vfiprintf_internal_r+0xfb0>
    a6a0:	d8011b15 	stw	zero,1132(sp)
    a6a4:	9480010c 	andi	r18,r18,4
    a6a8:	9002171e 	bne	r18,zero,af08 <___vfiprintf_internal_r+0xf94>
    a6ac:	d9412417 	ldw	r5,1168(sp)
    a6b0:	a9433716 	blt	r21,r5,b390 <___vfiprintf_internal_r+0x141c>
    a6b4:	d8812517 	ldw	r2,1172(sp)
    a6b8:	1545883a 	add	r2,r2,r21
    a6bc:	d8812515 	stw	r2,1172(sp)
    a6c0:	00019a06 	br	ad2c <___vfiprintf_internal_r+0xdb8>
    a6c4:	d8c12317 	ldw	r3,1164(sp)
    a6c8:	05400044 	movi	r21,1
    a6cc:	9811883a 	mov	r8,r19
    a6d0:	18800017 	ldw	r2,0(r3)
    a6d4:	18c00104 	addi	r3,r3,4
    a6d8:	d8c12315 	stw	r3,1164(sp)
    a6dc:	d8c10004 	addi	r3,sp,1024
    a6e0:	d8011d85 	stb	zero,1142(sp)
    a6e4:	d8810005 	stb	r2,1024(sp)
    a6e8:	a829883a 	mov	r20,r21
    a6ec:	d8c12215 	stw	r3,1160(sp)
    a6f0:	0021883a 	mov	r16,zero
    a6f4:	003f7806 	br	a4d8 <__alt_data_end+0xfffb4da8>
    a6f8:	94800414 	ori	r18,r18,16
    a6fc:	9080080c 	andi	r2,r18,32
    a700:	9811883a 	mov	r8,r19
    a704:	10009026 	beq	r2,zero,a948 <___vfiprintf_internal_r+0x9d4>
    a708:	d8812317 	ldw	r2,1164(sp)
    a70c:	d8c12317 	ldw	r3,1164(sp)
    a710:	14c00017 	ldw	r19,0(r2)
    a714:	15400117 	ldw	r21,4(r2)
    a718:	18c00204 	addi	r3,r3,8
    a71c:	d8c12315 	stw	r3,1164(sp)
    a720:	0005883a 	mov	r2,zero
    a724:	9d46b03a 	or	r3,r19,r21
    a728:	d8011d85 	stb	zero,1142(sp)
    a72c:	8029883a 	mov	r20,r16
    a730:	002d883a 	mov	r22,zero
    a734:	003f4606 	br	a450 <__alt_data_end+0xfffb4d20>
    a738:	94800414 	ori	r18,r18,16
    a73c:	9080080c 	andi	r2,r18,32
    a740:	9811883a 	mov	r8,r19
    a744:	10006226 	beq	r2,zero,a8d0 <___vfiprintf_internal_r+0x95c>
    a748:	d9012317 	ldw	r4,1164(sp)
    a74c:	00800044 	movi	r2,1
    a750:	24c00017 	ldw	r19,0(r4)
    a754:	25400117 	ldw	r21,4(r4)
    a758:	21000204 	addi	r4,r4,8
    a75c:	d9012315 	stw	r4,1164(sp)
    a760:	9d46b03a 	or	r3,r19,r21
    a764:	003ff006 	br	a728 <__alt_data_end+0xfffb4ff8>
    a768:	b9800007 	ldb	r6,0(r23)
    a76c:	00801b04 	movi	r2,108
    a770:	3082b226 	beq	r6,r2,b23c <___vfiprintf_internal_r+0x12c8>
    a774:	94800414 	ori	r18,r18,16
    a778:	003e5f06 	br	a0f8 <__alt_data_end+0xfffb49c8>
    a77c:	d8c12203 	ldbu	r3,1160(sp)
    a780:	01000074 	movhi	r4,1
    a784:	2108b004 	addi	r4,r4,8896
    a788:	d8c11d85 	stb	r3,1142(sp)
    a78c:	d9012715 	stw	r4,1180(sp)
    a790:	90c0080c 	andi	r3,r18,32
    a794:	9811883a 	mov	r8,r19
    a798:	d8812317 	ldw	r2,1164(sp)
    a79c:	18005f26 	beq	r3,zero,a91c <___vfiprintf_internal_r+0x9a8>
    a7a0:	d9012317 	ldw	r4,1164(sp)
    a7a4:	14c00017 	ldw	r19,0(r2)
    a7a8:	15400117 	ldw	r21,4(r2)
    a7ac:	21000204 	addi	r4,r4,8
    a7b0:	d9012315 	stw	r4,1164(sp)
    a7b4:	9080004c 	andi	r2,r18,1
    a7b8:	1001e226 	beq	r2,zero,af44 <___vfiprintf_internal_r+0xfd0>
    a7bc:	9d46b03a 	or	r3,r19,r21
    a7c0:	18024e26 	beq	r3,zero,b0fc <___vfiprintf_internal_r+0x1188>
    a7c4:	00800c04 	movi	r2,48
    a7c8:	d8811d05 	stb	r2,1140(sp)
    a7cc:	d9811d45 	stb	r6,1141(sp)
    a7d0:	94800094 	ori	r18,r18,2
    a7d4:	00800084 	movi	r2,2
    a7d8:	003fd306 	br	a728 <__alt_data_end+0xfffb4ff8>
    a7dc:	d9012317 	ldw	r4,1164(sp)
    a7e0:	d9412317 	ldw	r5,1164(sp)
    a7e4:	21000017 	ldw	r4,0(r4)
    a7e8:	28800104 	addi	r2,r5,4
    a7ec:	d9012415 	stw	r4,1168(sp)
    a7f0:	203eeb16 	blt	r4,zero,a3a0 <__alt_data_end+0xfffb4c70>
    a7f4:	d8812315 	stw	r2,1164(sp)
    a7f8:	b9800007 	ldb	r6,0(r23)
    a7fc:	003e3e06 	br	a0f8 <__alt_data_end+0xfffb49c8>
    a800:	b9800007 	ldb	r6,0(r23)
    a804:	01000a84 	movi	r4,42
    a808:	b8800044 	addi	r2,r23,1
    a80c:	3102d226 	beq	r6,r4,b358 <___vfiprintf_internal_r+0x13e4>
    a810:	35bff404 	addi	r22,r6,-48
    a814:	102f883a 	mov	r23,r2
    a818:	0021883a 	mov	r16,zero
    a81c:	adbe3736 	bltu	r21,r22,a0fc <__alt_data_end+0xfffb49cc>
    a820:	0009883a 	mov	r4,zero
    a824:	01400284 	movi	r5,10
    a828:	000ca900 	call	ca90 <__mulsi3>
    a82c:	b9800007 	ldb	r6,0(r23)
    a830:	b089883a 	add	r4,r22,r2
    a834:	bdc00044 	addi	r23,r23,1
    a838:	35bff404 	addi	r22,r6,-48
    a83c:	adbff92e 	bgeu	r21,r22,a824 <__alt_data_end+0xfffb50f4>
    a840:	2021883a 	mov	r16,r4
    a844:	203e2d0e 	bge	r4,zero,a0fc <__alt_data_end+0xfffb49cc>
    a848:	043fffc4 	movi	r16,-1
    a84c:	003e2b06 	br	a0fc <__alt_data_end+0xfffb49cc>
    a850:	94801014 	ori	r18,r18,64
    a854:	b9800007 	ldb	r6,0(r23)
    a858:	003e2706 	br	a0f8 <__alt_data_end+0xfffb49c8>
    a85c:	94800814 	ori	r18,r18,32
    a860:	b9800007 	ldb	r6,0(r23)
    a864:	003e2406 	br	a0f8 <__alt_data_end+0xfffb49c8>
    a868:	d9412317 	ldw	r5,1164(sp)
    a86c:	d8812317 	ldw	r2,1164(sp)
    a870:	d8011d85 	stb	zero,1142(sp)
    a874:	29400017 	ldw	r5,0(r5)
    a878:	9811883a 	mov	r8,r19
    a87c:	14c00104 	addi	r19,r2,4
    a880:	d9412215 	stw	r5,1160(sp)
    a884:	28029026 	beq	r5,zero,b2c8 <___vfiprintf_internal_r+0x1354>
    a888:	d9012217 	ldw	r4,1160(sp)
    a88c:	80027616 	blt	r16,zero,b268 <___vfiprintf_internal_r+0x12f4>
    a890:	000b883a 	mov	r5,zero
    a894:	800d883a 	mov	r6,r16
    a898:	da012a15 	stw	r8,1192(sp)
    a89c:	00081840 	call	8184 <memchr>
    a8a0:	da012a17 	ldw	r8,1192(sp)
    a8a4:	1002a026 	beq	r2,zero,b328 <___vfiprintf_internal_r+0x13b4>
    a8a8:	d8c12217 	ldw	r3,1160(sp)
    a8ac:	10e9c83a 	sub	r20,r2,r3
    a8b0:	85023816 	blt	r16,r20,b194 <___vfiprintf_internal_r+0x1220>
    a8b4:	dd811d83 	ldbu	r22,1142(sp)
    a8b8:	dcc12315 	stw	r19,1164(sp)
    a8bc:	0021883a 	mov	r16,zero
    a8c0:	003efd06 	br	a4b8 <__alt_data_end+0xfffb4d88>
    a8c4:	9080080c 	andi	r2,r18,32
    a8c8:	9811883a 	mov	r8,r19
    a8cc:	103f9e1e 	bne	r2,zero,a748 <__alt_data_end+0xfffb5018>
    a8d0:	9080040c 	andi	r2,r18,16
    a8d4:	10021726 	beq	r2,zero,b134 <___vfiprintf_internal_r+0x11c0>
    a8d8:	d9412317 	ldw	r5,1164(sp)
    a8dc:	002b883a 	mov	r21,zero
    a8e0:	00800044 	movi	r2,1
    a8e4:	2cc00017 	ldw	r19,0(r5)
    a8e8:	29400104 	addi	r5,r5,4
    a8ec:	d9412315 	stw	r5,1164(sp)
    a8f0:	9807883a 	mov	r3,r19
    a8f4:	003f8c06 	br	a728 <__alt_data_end+0xfffb4ff8>
    a8f8:	d8c12203 	ldbu	r3,1160(sp)
    a8fc:	01000074 	movhi	r4,1
    a900:	2108b504 	addi	r4,r4,8916
    a904:	d8c11d85 	stb	r3,1142(sp)
    a908:	d9012715 	stw	r4,1180(sp)
    a90c:	90c0080c 	andi	r3,r18,32
    a910:	9811883a 	mov	r8,r19
    a914:	d8812317 	ldw	r2,1164(sp)
    a918:	183fa11e 	bne	r3,zero,a7a0 <__alt_data_end+0xfffb5070>
    a91c:	90c0040c 	andi	r3,r18,16
    a920:	1801e526 	beq	r3,zero,b0b8 <___vfiprintf_internal_r+0x1144>
    a924:	d9412317 	ldw	r5,1164(sp)
    a928:	14c00017 	ldw	r19,0(r2)
    a92c:	002b883a 	mov	r21,zero
    a930:	29400104 	addi	r5,r5,4
    a934:	d9412315 	stw	r5,1164(sp)
    a938:	003f9e06 	br	a7b4 <__alt_data_end+0xfffb5084>
    a93c:	9080080c 	andi	r2,r18,32
    a940:	9811883a 	mov	r8,r19
    a944:	103f701e 	bne	r2,zero,a708 <__alt_data_end+0xfffb4fd8>
    a948:	9080040c 	andi	r2,r18,16
    a94c:	1001ef26 	beq	r2,zero,b10c <___vfiprintf_internal_r+0x1198>
    a950:	d9012317 	ldw	r4,1164(sp)
    a954:	002b883a 	mov	r21,zero
    a958:	0005883a 	mov	r2,zero
    a95c:	24c00017 	ldw	r19,0(r4)
    a960:	21000104 	addi	r4,r4,4
    a964:	d9012315 	stw	r4,1164(sp)
    a968:	9807883a 	mov	r3,r19
    a96c:	003f6e06 	br	a728 <__alt_data_end+0xfffb4ff8>
    a970:	d8c12317 	ldw	r3,1164(sp)
    a974:	9811883a 	mov	r8,r19
    a978:	00800c04 	movi	r2,48
    a97c:	1cc00017 	ldw	r19,0(r3)
    a980:	01000074 	movhi	r4,1
    a984:	18c00104 	addi	r3,r3,4
    a988:	d8811d05 	stb	r2,1140(sp)
    a98c:	2108b504 	addi	r4,r4,8916
    a990:	00801e04 	movi	r2,120
    a994:	d8811d45 	stb	r2,1141(sp)
    a998:	d8c12315 	stw	r3,1164(sp)
    a99c:	002b883a 	mov	r21,zero
    a9a0:	94800094 	ori	r18,r18,2
    a9a4:	d9012715 	stw	r4,1180(sp)
    a9a8:	00800084 	movi	r2,2
    a9ac:	9807883a 	mov	r3,r19
    a9b0:	003f5d06 	br	a728 <__alt_data_end+0xfffb4ff8>
    a9b4:	d8c12203 	ldbu	r3,1160(sp)
    a9b8:	9080080c 	andi	r2,r18,32
    a9bc:	9811883a 	mov	r8,r19
    a9c0:	d8c11d85 	stb	r3,1142(sp)
    a9c4:	1001b126 	beq	r2,zero,b08c <___vfiprintf_internal_r+0x1118>
    a9c8:	d9012317 	ldw	r4,1164(sp)
    a9cc:	d9412517 	ldw	r5,1172(sp)
    a9d0:	20800017 	ldw	r2,0(r4)
    a9d4:	2807d7fa 	srai	r3,r5,31
    a9d8:	21000104 	addi	r4,r4,4
    a9dc:	d9012315 	stw	r4,1164(sp)
    a9e0:	11400015 	stw	r5,0(r2)
    a9e4:	10c00115 	stw	r3,4(r2)
    a9e8:	003d9a06 	br	a054 <__alt_data_end+0xfffb4924>
    a9ec:	d8812207 	ldb	r2,1160(sp)
    a9f0:	1001c41e 	bne	r2,zero,b104 <___vfiprintf_internal_r+0x1190>
    a9f4:	00c00804 	movi	r3,32
    a9f8:	d8c12205 	stb	r3,1160(sp)
    a9fc:	b9800007 	ldb	r6,0(r23)
    aa00:	003dbd06 	br	a0f8 <__alt_data_end+0xfffb49c8>
    aa04:	00c00ac4 	movi	r3,43
    aa08:	d8c12205 	stb	r3,1160(sp)
    aa0c:	b9800007 	ldb	r6,0(r23)
    aa10:	003db906 	br	a0f8 <__alt_data_end+0xfffb49c8>
    aa14:	d8c12203 	ldbu	r3,1160(sp)
    aa18:	9080080c 	andi	r2,r18,32
    aa1c:	9811883a 	mov	r8,r19
    aa20:	d8c11d85 	stb	r3,1142(sp)
    aa24:	d8c12317 	ldw	r3,1164(sp)
    aa28:	103e7e1e 	bne	r2,zero,a424 <__alt_data_end+0xfffb4cf4>
    aa2c:	9080040c 	andi	r2,r18,16
    aa30:	1001a926 	beq	r2,zero,b0d8 <___vfiprintf_internal_r+0x1164>
    aa34:	1cc00017 	ldw	r19,0(r3)
    aa38:	d9412317 	ldw	r5,1164(sp)
    aa3c:	982bd7fa 	srai	r21,r19,31
    aa40:	29400104 	addi	r5,r5,4
    aa44:	d9412315 	stw	r5,1164(sp)
    aa48:	a805883a 	mov	r2,r21
    aa4c:	003e7b06 	br	a43c <__alt_data_end+0xfffb4d0c>
    aa50:	94800054 	ori	r18,r18,1
    aa54:	b9800007 	ldb	r6,0(r23)
    aa58:	003da706 	br	a0f8 <__alt_data_end+0xfffb49c8>
    aa5c:	d8c12203 	ldbu	r3,1160(sp)
    aa60:	9811883a 	mov	r8,r19
    aa64:	d8c11d85 	stb	r3,1142(sp)
    aa68:	30005826 	beq	r6,zero,abcc <___vfiprintf_internal_r+0xc58>
    aa6c:	05400044 	movi	r21,1
    aa70:	d8c10004 	addi	r3,sp,1024
    aa74:	d9810005 	stb	r6,1024(sp)
    aa78:	d8011d85 	stb	zero,1142(sp)
    aa7c:	a829883a 	mov	r20,r21
    aa80:	d8c12215 	stw	r3,1160(sp)
    aa84:	003f1a06 	br	a6f0 <__alt_data_end+0xfffb4fc0>
    aa88:	d9012117 	ldw	r4,1156(sp)
    aa8c:	d9412017 	ldw	r5,1152(sp)
    aa90:	d9811a04 	addi	r6,sp,1128
    aa94:	d9c12a15 	stw	r7,1192(sp)
    aa98:	db012b15 	stw	r12,1196(sp)
    aa9c:	0009e600 	call	9e60 <__sprint_r.part.0>
    aaa0:	d9c12a17 	ldw	r7,1192(sp)
    aaa4:	db012b17 	ldw	r12,1196(sp)
    aaa8:	10004e1e 	bne	r2,zero,abe4 <___vfiprintf_internal_r+0xc70>
    aaac:	d9011b17 	ldw	r4,1132(sp)
    aab0:	d8c11c17 	ldw	r3,1136(sp)
    aab4:	d811883a 	mov	r8,sp
    aab8:	21400044 	addi	r5,r4,1
    aabc:	003e9d06 	br	a534 <__alt_data_end+0xfffb4e04>
    aac0:	d9411b17 	ldw	r5,1132(sp)
    aac4:	d8c11c17 	ldw	r3,1136(sp)
    aac8:	28800044 	addi	r2,r5,1
    aacc:	d9011d87 	ldb	r4,1142(sp)
    aad0:	203eb626 	beq	r4,zero,a5ac <__alt_data_end+0xfffb4e7c>
    aad4:	01000044 	movi	r4,1
    aad8:	d9411d84 	addi	r5,sp,1142
    aadc:	1907883a 	add	r3,r3,r4
    aae0:	41400015 	stw	r5,0(r8)
    aae4:	41000115 	stw	r4,4(r8)
    aae8:	d8c11c15 	stw	r3,1136(sp)
    aaec:	d8811b15 	stw	r2,1132(sp)
    aaf0:	014001c4 	movi	r5,7
    aaf4:	2880ce16 	blt	r5,r2,ae30 <___vfiprintf_internal_r+0xebc>
    aaf8:	100b883a 	mov	r5,r2
    aafc:	42000204 	addi	r8,r8,8
    ab00:	10800044 	addi	r2,r2,1
    ab04:	003ea906 	br	a5ac <__alt_data_end+0xfffb4e7c>
    ab08:	d9012117 	ldw	r4,1156(sp)
    ab0c:	d9412017 	ldw	r5,1152(sp)
    ab10:	d9811a04 	addi	r6,sp,1128
    ab14:	0009e600 	call	9e60 <__sprint_r.part.0>
    ab18:	1000321e 	bne	r2,zero,abe4 <___vfiprintf_internal_r+0xc70>
    ab1c:	d9411b17 	ldw	r5,1132(sp)
    ab20:	d8c11c17 	ldw	r3,1136(sp)
    ab24:	d811883a 	mov	r8,sp
    ab28:	28800044 	addi	r2,r5,1
    ab2c:	003eba06 	br	a618 <__alt_data_end+0xfffb4ee8>
    ab30:	10803fcc 	andi	r2,r2,255
    ab34:	00c00044 	movi	r3,1
    ab38:	10fe4d1e 	bne	r2,r3,a470 <__alt_data_end+0xfffb4d40>
    ab3c:	a800021e 	bne	r21,zero,ab48 <___vfiprintf_internal_r+0xbd4>
    ab40:	00800244 	movi	r2,9
    ab44:	14c01b2e 	bgeu	r2,r19,abb4 <___vfiprintf_internal_r+0xc40>
    ab48:	dc012215 	stw	r16,1160(sp)
    ab4c:	dd010a04 	addi	r20,sp,1064
    ab50:	a821883a 	mov	r16,r21
    ab54:	402b883a 	mov	r21,r8
    ab58:	9809883a 	mov	r4,r19
    ab5c:	800b883a 	mov	r5,r16
    ab60:	01800284 	movi	r6,10
    ab64:	000f883a 	mov	r7,zero
    ab68:	000c3480 	call	c348 <__umoddi3>
    ab6c:	10800c04 	addi	r2,r2,48
    ab70:	a53fffc4 	addi	r20,r20,-1
    ab74:	9809883a 	mov	r4,r19
    ab78:	800b883a 	mov	r5,r16
    ab7c:	01800284 	movi	r6,10
    ab80:	000f883a 	mov	r7,zero
    ab84:	a0800005 	stb	r2,0(r20)
    ab88:	000bd080 	call	bd08 <__udivdi3>
    ab8c:	1027883a 	mov	r19,r2
    ab90:	10c4b03a 	or	r2,r2,r3
    ab94:	1821883a 	mov	r16,r3
    ab98:	103fef1e 	bne	r2,zero,ab58 <__alt_data_end+0xfffb5428>
    ab9c:	d9011e17 	ldw	r4,1144(sp)
    aba0:	dc012217 	ldw	r16,1160(sp)
    aba4:	a811883a 	mov	r8,r21
    aba8:	dd012215 	stw	r20,1160(sp)
    abac:	2529c83a 	sub	r20,r4,r20
    abb0:	003e4106 	br	a4b8 <__alt_data_end+0xfffb4d88>
    abb4:	9cc00c04 	addi	r19,r19,48
    abb8:	d8c109c4 	addi	r3,sp,1063
    abbc:	dcc109c5 	stb	r19,1063(sp)
    abc0:	dd012817 	ldw	r20,1184(sp)
    abc4:	d8c12215 	stw	r3,1160(sp)
    abc8:	003e3b06 	br	a4b8 <__alt_data_end+0xfffb4d88>
    abcc:	d8811c17 	ldw	r2,1136(sp)
    abd0:	10000426 	beq	r2,zero,abe4 <___vfiprintf_internal_r+0xc70>
    abd4:	d9012117 	ldw	r4,1156(sp)
    abd8:	d9412017 	ldw	r5,1152(sp)
    abdc:	d9811a04 	addi	r6,sp,1128
    abe0:	0009e600 	call	9e60 <__sprint_r.part.0>
    abe4:	d9412017 	ldw	r5,1152(sp)
    abe8:	2880030b 	ldhu	r2,12(r5)
    abec:	1080100c 	andi	r2,r2,64
    abf0:	103ddc1e 	bne	r2,zero,a364 <__alt_data_end+0xfffb4c34>
    abf4:	d8812517 	ldw	r2,1172(sp)
    abf8:	003ddb06 	br	a368 <__alt_data_end+0xfffb4c38>
    abfc:	1801061e 	bne	r3,zero,b018 <___vfiprintf_internal_r+0x10a4>
    ac00:	d8c12217 	ldw	r3,1160(sp)
    ac04:	00800044 	movi	r2,1
    ac08:	dd000115 	stw	r20,4(sp)
    ac0c:	d8c00015 	stw	r3,0(sp)
    ac10:	dd011c15 	stw	r20,1136(sp)
    ac14:	d8811b15 	stw	r2,1132(sp)
    ac18:	a007883a 	mov	r3,r20
    ac1c:	d811883a 	mov	r8,sp
    ac20:	42000204 	addi	r8,r8,8
    ac24:	9480010c 	andi	r18,r18,4
    ac28:	90003426 	beq	r18,zero,acfc <___vfiprintf_internal_r+0xd88>
    ac2c:	d9412417 	ldw	r5,1168(sp)
    ac30:	2d65c83a 	sub	r18,r5,r21
    ac34:	0480310e 	bge	zero,r18,acfc <___vfiprintf_internal_r+0xd88>
    ac38:	04000404 	movi	r16,16
    ac3c:	8481ad0e 	bge	r16,r18,b2f4 <___vfiprintf_internal_r+0x1380>
    ac40:	01400074 	movhi	r5,1
    ac44:	29491a04 	addi	r5,r5,9320
    ac48:	d9011b17 	ldw	r4,1132(sp)
    ac4c:	d9412615 	stw	r5,1176(sp)
    ac50:	04c001c4 	movi	r19,7
    ac54:	dd012117 	ldw	r20,1156(sp)
    ac58:	dd812017 	ldw	r22,1152(sp)
    ac5c:	00000506 	br	ac74 <___vfiprintf_internal_r+0xd00>
    ac60:	21400084 	addi	r5,r4,2
    ac64:	42000204 	addi	r8,r8,8
    ac68:	1009883a 	mov	r4,r2
    ac6c:	94bffc04 	addi	r18,r18,-16
    ac70:	84800d0e 	bge	r16,r18,aca8 <___vfiprintf_internal_r+0xd34>
    ac74:	18c00404 	addi	r3,r3,16
    ac78:	20800044 	addi	r2,r4,1
    ac7c:	47000015 	stw	fp,0(r8)
    ac80:	44000115 	stw	r16,4(r8)
    ac84:	d8c11c15 	stw	r3,1136(sp)
    ac88:	d8811b15 	stw	r2,1132(sp)
    ac8c:	98bff40e 	bge	r19,r2,ac60 <__alt_data_end+0xfffb5530>
    ac90:	1800291e 	bne	r3,zero,ad38 <___vfiprintf_internal_r+0xdc4>
    ac94:	94bffc04 	addi	r18,r18,-16
    ac98:	0009883a 	mov	r4,zero
    ac9c:	01400044 	movi	r5,1
    aca0:	d811883a 	mov	r8,sp
    aca4:	84bff316 	blt	r16,r18,ac74 <__alt_data_end+0xfffb5544>
    aca8:	d8812617 	ldw	r2,1176(sp)
    acac:	1c87883a 	add	r3,r3,r18
    acb0:	44800115 	stw	r18,4(r8)
    acb4:	40800015 	stw	r2,0(r8)
    acb8:	d8c11c15 	stw	r3,1136(sp)
    acbc:	d9411b15 	stw	r5,1132(sp)
    acc0:	008001c4 	movi	r2,7
    acc4:	11400d0e 	bge	r2,r5,acfc <___vfiprintf_internal_r+0xd88>
    acc8:	1800061e 	bne	r3,zero,ace4 <___vfiprintf_internal_r+0xd70>
    accc:	d8c12417 	ldw	r3,1168(sp)
    acd0:	a8c12e16 	blt	r21,r3,b18c <___vfiprintf_internal_r+0x1218>
    acd4:	d9012517 	ldw	r4,1172(sp)
    acd8:	2549883a 	add	r4,r4,r21
    acdc:	d9012515 	stw	r4,1172(sp)
    ace0:	00001206 	br	ad2c <___vfiprintf_internal_r+0xdb8>
    ace4:	d9012117 	ldw	r4,1156(sp)
    ace8:	d9412017 	ldw	r5,1152(sp)
    acec:	d9811a04 	addi	r6,sp,1128
    acf0:	0009e600 	call	9e60 <__sprint_r.part.0>
    acf4:	103fbb1e 	bne	r2,zero,abe4 <__alt_data_end+0xfffb54b4>
    acf8:	d8c11c17 	ldw	r3,1136(sp)
    acfc:	d8812417 	ldw	r2,1168(sp)
    ad00:	a880010e 	bge	r21,r2,ad08 <___vfiprintf_internal_r+0xd94>
    ad04:	102b883a 	mov	r21,r2
    ad08:	d9012517 	ldw	r4,1172(sp)
    ad0c:	2549883a 	add	r4,r4,r21
    ad10:	d9012515 	stw	r4,1172(sp)
    ad14:	18000526 	beq	r3,zero,ad2c <___vfiprintf_internal_r+0xdb8>
    ad18:	d9012117 	ldw	r4,1156(sp)
    ad1c:	d9412017 	ldw	r5,1152(sp)
    ad20:	d9811a04 	addi	r6,sp,1128
    ad24:	0009e600 	call	9e60 <__sprint_r.part.0>
    ad28:	103fae1e 	bne	r2,zero,abe4 <__alt_data_end+0xfffb54b4>
    ad2c:	d8011b15 	stw	zero,1132(sp)
    ad30:	d811883a 	mov	r8,sp
    ad34:	003cc706 	br	a054 <__alt_data_end+0xfffb4924>
    ad38:	a009883a 	mov	r4,r20
    ad3c:	b00b883a 	mov	r5,r22
    ad40:	d9811a04 	addi	r6,sp,1128
    ad44:	0009e600 	call	9e60 <__sprint_r.part.0>
    ad48:	103fa61e 	bne	r2,zero,abe4 <__alt_data_end+0xfffb54b4>
    ad4c:	d9011b17 	ldw	r4,1132(sp)
    ad50:	d8c11c17 	ldw	r3,1136(sp)
    ad54:	d811883a 	mov	r8,sp
    ad58:	21400044 	addi	r5,r4,1
    ad5c:	003fc306 	br	ac6c <__alt_data_end+0xfffb553c>
    ad60:	d9012417 	ldw	r4,1168(sp)
    ad64:	256dc83a 	sub	r22,r4,r21
    ad68:	05be1f0e 	bge	zero,r22,a5e8 <__alt_data_end+0xfffb4eb8>
    ad6c:	04c00404 	movi	r19,16
    ad70:	9d81720e 	bge	r19,r22,b33c <___vfiprintf_internal_r+0x13c8>
    ad74:	00800074 	movhi	r2,1
    ad78:	10891604 	addi	r2,r2,9304
    ad7c:	d8812615 	stw	r2,1176(sp)
    ad80:	028001c4 	movi	r10,7
    ad84:	00000506 	br	ad9c <___vfiprintf_internal_r+0xe28>
    ad88:	29000084 	addi	r4,r5,2
    ad8c:	42000204 	addi	r8,r8,8
    ad90:	100b883a 	mov	r5,r2
    ad94:	b5bffc04 	addi	r22,r22,-16
    ad98:	9d800d0e 	bge	r19,r22,add0 <___vfiprintf_internal_r+0xe5c>
    ad9c:	18c00404 	addi	r3,r3,16
    ada0:	28800044 	addi	r2,r5,1
    ada4:	44400015 	stw	r17,0(r8)
    ada8:	44c00115 	stw	r19,4(r8)
    adac:	d8c11c15 	stw	r3,1136(sp)
    adb0:	d8811b15 	stw	r2,1132(sp)
    adb4:	50bff40e 	bge	r10,r2,ad88 <__alt_data_end+0xfffb5658>
    adb8:	1800111e 	bne	r3,zero,ae00 <___vfiprintf_internal_r+0xe8c>
    adbc:	b5bffc04 	addi	r22,r22,-16
    adc0:	000b883a 	mov	r5,zero
    adc4:	01000044 	movi	r4,1
    adc8:	d811883a 	mov	r8,sp
    adcc:	9dbff316 	blt	r19,r22,ad9c <__alt_data_end+0xfffb566c>
    add0:	d9412617 	ldw	r5,1176(sp)
    add4:	1d87883a 	add	r3,r3,r22
    add8:	45800115 	stw	r22,4(r8)
    addc:	41400015 	stw	r5,0(r8)
    ade0:	d8c11c15 	stw	r3,1136(sp)
    ade4:	d9011b15 	stw	r4,1132(sp)
    ade8:	008001c4 	movi	r2,7
    adec:	11008516 	blt	r2,r4,b004 <___vfiprintf_internal_r+0x1090>
    adf0:	42000204 	addi	r8,r8,8
    adf4:	20800044 	addi	r2,r4,1
    adf8:	200b883a 	mov	r5,r4
    adfc:	003dfa06 	br	a5e8 <__alt_data_end+0xfffb4eb8>
    ae00:	d9012117 	ldw	r4,1156(sp)
    ae04:	d9412017 	ldw	r5,1152(sp)
    ae08:	d9811a04 	addi	r6,sp,1128
    ae0c:	da812a15 	stw	r10,1192(sp)
    ae10:	0009e600 	call	9e60 <__sprint_r.part.0>
    ae14:	da812a17 	ldw	r10,1192(sp)
    ae18:	103f721e 	bne	r2,zero,abe4 <__alt_data_end+0xfffb54b4>
    ae1c:	d9411b17 	ldw	r5,1132(sp)
    ae20:	d8c11c17 	ldw	r3,1136(sp)
    ae24:	d811883a 	mov	r8,sp
    ae28:	29000044 	addi	r4,r5,1
    ae2c:	003fd906 	br	ad94 <__alt_data_end+0xfffb5664>
    ae30:	1800681e 	bne	r3,zero,afd4 <___vfiprintf_internal_r+0x1060>
    ae34:	50004d26 	beq	r10,zero,af6c <___vfiprintf_internal_r+0xff8>
    ae38:	d8811d04 	addi	r2,sp,1140
    ae3c:	00c00084 	movi	r3,2
    ae40:	d8800015 	stw	r2,0(sp)
    ae44:	d8c00115 	stw	r3,4(sp)
    ae48:	2005883a 	mov	r2,r4
    ae4c:	d811883a 	mov	r8,sp
    ae50:	003de006 	br	a5d4 <__alt_data_end+0xfffb4ea4>
    ae54:	1800551e 	bne	r3,zero,afac <___vfiprintf_internal_r+0x1038>
    ae58:	000b883a 	mov	r5,zero
    ae5c:	00800044 	movi	r2,1
    ae60:	d811883a 	mov	r8,sp
    ae64:	003dde06 	br	a5e0 <__alt_data_end+0xfffb4eb0>
    ae68:	10803fcc 	andi	r2,r2,255
    ae6c:	1000191e 	bne	r2,zero,aed4 <___vfiprintf_internal_r+0xf60>
    ae70:	9080004c 	andi	r2,r18,1
    ae74:	10001726 	beq	r2,zero,aed4 <___vfiprintf_internal_r+0xf60>
    ae78:	00800c04 	movi	r2,48
    ae7c:	d8c109c4 	addi	r3,sp,1063
    ae80:	d88109c5 	stb	r2,1063(sp)
    ae84:	dd012817 	ldw	r20,1184(sp)
    ae88:	d8c12215 	stw	r3,1160(sp)
    ae8c:	003d8a06 	br	a4b8 <__alt_data_end+0xfffb4d88>
    ae90:	d9012717 	ldw	r4,1180(sp)
    ae94:	dd010a04 	addi	r20,sp,1064
    ae98:	988003cc 	andi	r2,r19,15
    ae9c:	a806973a 	slli	r3,r21,28
    aea0:	2085883a 	add	r2,r4,r2
    aea4:	9826d13a 	srli	r19,r19,4
    aea8:	10800003 	ldbu	r2,0(r2)
    aeac:	a82ad13a 	srli	r21,r21,4
    aeb0:	a53fffc4 	addi	r20,r20,-1
    aeb4:	1ce6b03a 	or	r19,r3,r19
    aeb8:	a0800005 	stb	r2,0(r20)
    aebc:	9d44b03a 	or	r2,r19,r21
    aec0:	103ff51e 	bne	r2,zero,ae98 <__alt_data_end+0xfffb5768>
    aec4:	d9411e17 	ldw	r5,1144(sp)
    aec8:	dd012215 	stw	r20,1160(sp)
    aecc:	2d29c83a 	sub	r20,r5,r20
    aed0:	003d7906 	br	a4b8 <__alt_data_end+0xfffb4d88>
    aed4:	d8c10a04 	addi	r3,sp,1064
    aed8:	d8c12215 	stw	r3,1160(sp)
    aedc:	003d7606 	br	a4b8 <__alt_data_end+0xfffb4d88>
    aee0:	18009e1e 	bne	r3,zero,b15c <___vfiprintf_internal_r+0x11e8>
    aee4:	d8811d87 	ldb	r2,1142(sp)
    aee8:	10005f26 	beq	r2,zero,b068 <___vfiprintf_internal_r+0x10f4>
    aeec:	00c00044 	movi	r3,1
    aef0:	d9011d84 	addi	r4,sp,1142
    aef4:	1805883a 	mov	r2,r3
    aef8:	d9000015 	stw	r4,0(sp)
    aefc:	d8c00115 	stw	r3,4(sp)
    af00:	d811883a 	mov	r8,sp
    af04:	003efc06 	br	aaf8 <__alt_data_end+0xfffb53c8>
    af08:	d9412417 	ldw	r5,1168(sp)
    af0c:	d811883a 	mov	r8,sp
    af10:	2d65c83a 	sub	r18,r5,r21
    af14:	04bf4816 	blt	zero,r18,ac38 <__alt_data_end+0xfffb5508>
    af18:	003f6c06 	br	accc <__alt_data_end+0xfffb559c>
    af1c:	b829883a 	mov	r20,r23
    af20:	003c6906 	br	a0c8 <__alt_data_end+0xfffb4998>
    af24:	d9012117 	ldw	r4,1156(sp)
    af28:	d9412017 	ldw	r5,1152(sp)
    af2c:	d9811a04 	addi	r6,sp,1128
    af30:	0009e600 	call	9e60 <__sprint_r.part.0>
    af34:	103f2b1e 	bne	r2,zero,abe4 <__alt_data_end+0xfffb54b4>
    af38:	d8c11c17 	ldw	r3,1136(sp)
    af3c:	d811883a 	mov	r8,sp
    af40:	003f3806 	br	ac24 <__alt_data_end+0xfffb54f4>
    af44:	00800084 	movi	r2,2
    af48:	9d46b03a 	or	r3,r19,r21
    af4c:	003df606 	br	a728 <__alt_data_end+0xfffb4ff8>
    af50:	d9012117 	ldw	r4,1156(sp)
    af54:	d9412017 	ldw	r5,1152(sp)
    af58:	d9811a04 	addi	r6,sp,1128
    af5c:	0009e600 	call	9e60 <__sprint_r.part.0>
    af60:	103f201e 	bne	r2,zero,abe4 <__alt_data_end+0xfffb54b4>
    af64:	d811883a 	mov	r8,sp
    af68:	003cc606 	br	a284 <__alt_data_end+0xfffb4b54>
    af6c:	000b883a 	mov	r5,zero
    af70:	2005883a 	mov	r2,r4
    af74:	d811883a 	mov	r8,sp
    af78:	003d9906 	br	a5e0 <__alt_data_end+0xfffb4eb0>
    af7c:	10803fcc 	andi	r2,r2,255
    af80:	1080201c 	xori	r2,r2,128
    af84:	10bfe004 	addi	r2,r2,-128
    af88:	01000c04 	movi	r4,48
    af8c:	1100b226 	beq	r2,r4,b258 <___vfiprintf_internal_r+0x12e4>
    af90:	d9412217 	ldw	r5,1160(sp)
    af94:	d8811e17 	ldw	r2,1144(sp)
    af98:	193fffc5 	stb	r4,-1(r3)
    af9c:	297fffc4 	addi	r5,r5,-1
    afa0:	d9412215 	stw	r5,1160(sp)
    afa4:	1169c83a 	sub	r20,r2,r5
    afa8:	003d4306 	br	a4b8 <__alt_data_end+0xfffb4d88>
    afac:	d9012117 	ldw	r4,1156(sp)
    afb0:	d9412017 	ldw	r5,1152(sp)
    afb4:	d9811a04 	addi	r6,sp,1128
    afb8:	0009e600 	call	9e60 <__sprint_r.part.0>
    afbc:	103f091e 	bne	r2,zero,abe4 <__alt_data_end+0xfffb54b4>
    afc0:	d9411b17 	ldw	r5,1132(sp)
    afc4:	d8c11c17 	ldw	r3,1136(sp)
    afc8:	d811883a 	mov	r8,sp
    afcc:	28800044 	addi	r2,r5,1
    afd0:	003d8306 	br	a5e0 <__alt_data_end+0xfffb4eb0>
    afd4:	d9012117 	ldw	r4,1156(sp)
    afd8:	d9412017 	ldw	r5,1152(sp)
    afdc:	d9811a04 	addi	r6,sp,1128
    afe0:	da812a15 	stw	r10,1192(sp)
    afe4:	0009e600 	call	9e60 <__sprint_r.part.0>
    afe8:	da812a17 	ldw	r10,1192(sp)
    afec:	103efd1e 	bne	r2,zero,abe4 <__alt_data_end+0xfffb54b4>
    aff0:	d9411b17 	ldw	r5,1132(sp)
    aff4:	d8c11c17 	ldw	r3,1136(sp)
    aff8:	d811883a 	mov	r8,sp
    affc:	28800044 	addi	r2,r5,1
    b000:	003d6a06 	br	a5ac <__alt_data_end+0xfffb4e7c>
    b004:	1800a01e 	bne	r3,zero,b288 <___vfiprintf_internal_r+0x1314>
    b008:	000b883a 	mov	r5,zero
    b00c:	00800044 	movi	r2,1
    b010:	d811883a 	mov	r8,sp
    b014:	003d7406 	br	a5e8 <__alt_data_end+0xfffb4eb8>
    b018:	d9012117 	ldw	r4,1156(sp)
    b01c:	d9412017 	ldw	r5,1152(sp)
    b020:	d9811a04 	addi	r6,sp,1128
    b024:	0009e600 	call	9e60 <__sprint_r.part.0>
    b028:	103eee1e 	bne	r2,zero,abe4 <__alt_data_end+0xfffb54b4>
    b02c:	d8811b17 	ldw	r2,1132(sp)
    b030:	d8c11c17 	ldw	r3,1136(sp)
    b034:	d811883a 	mov	r8,sp
    b038:	10800044 	addi	r2,r2,1
    b03c:	003d8f06 	br	a67c <__alt_data_end+0xfffb4f4c>
    b040:	04e7c83a 	sub	r19,zero,r19
    b044:	9804c03a 	cmpne	r2,r19,zero
    b048:	056bc83a 	sub	r21,zero,r21
    b04c:	a8abc83a 	sub	r21,r21,r2
    b050:	05800b44 	movi	r22,45
    b054:	dd811d85 	stb	r22,1142(sp)
    b058:	8029883a 	mov	r20,r16
    b05c:	00800044 	movi	r2,1
    b060:	9d46b03a 	or	r3,r19,r21
    b064:	003cfa06 	br	a450 <__alt_data_end+0xfffb4d20>
    b068:	000b883a 	mov	r5,zero
    b06c:	00800044 	movi	r2,1
    b070:	d811883a 	mov	r8,sp
    b074:	503d5a26 	beq	r10,zero,a5e0 <__alt_data_end+0xfffb4eb0>
    b078:	00c00084 	movi	r3,2
    b07c:	d9011d04 	addi	r4,sp,1140
    b080:	d9000015 	stw	r4,0(sp)
    b084:	d8c00115 	stw	r3,4(sp)
    b088:	003d5206 	br	a5d4 <__alt_data_end+0xfffb4ea4>
    b08c:	9080040c 	andi	r2,r18,16
    b090:	1000421e 	bne	r2,zero,b19c <___vfiprintf_internal_r+0x1228>
    b094:	9480100c 	andi	r18,r18,64
    b098:	90009c26 	beq	r18,zero,b30c <___vfiprintf_internal_r+0x1398>
    b09c:	d9412317 	ldw	r5,1164(sp)
    b0a0:	d8c12517 	ldw	r3,1172(sp)
    b0a4:	28800017 	ldw	r2,0(r5)
    b0a8:	29400104 	addi	r5,r5,4
    b0ac:	d9412315 	stw	r5,1164(sp)
    b0b0:	10c0000d 	sth	r3,0(r2)
    b0b4:	003be706 	br	a054 <__alt_data_end+0xfffb4924>
    b0b8:	90c0100c 	andi	r3,r18,64
    b0bc:	18003e26 	beq	r3,zero,b1b8 <___vfiprintf_internal_r+0x1244>
    b0c0:	d8c12317 	ldw	r3,1164(sp)
    b0c4:	14c0000b 	ldhu	r19,0(r2)
    b0c8:	002b883a 	mov	r21,zero
    b0cc:	18c00104 	addi	r3,r3,4
    b0d0:	d8c12315 	stw	r3,1164(sp)
    b0d4:	003db706 	br	a7b4 <__alt_data_end+0xfffb5084>
    b0d8:	9080100c 	andi	r2,r18,64
    b0dc:	10004c26 	beq	r2,zero,b210 <___vfiprintf_internal_r+0x129c>
    b0e0:	1cc0000f 	ldh	r19,0(r3)
    b0e4:	d8812317 	ldw	r2,1164(sp)
    b0e8:	982bd7fa 	srai	r21,r19,31
    b0ec:	10800104 	addi	r2,r2,4
    b0f0:	d8812315 	stw	r2,1164(sp)
    b0f4:	a805883a 	mov	r2,r21
    b0f8:	003cd006 	br	a43c <__alt_data_end+0xfffb4d0c>
    b0fc:	00800084 	movi	r2,2
    b100:	003d8906 	br	a728 <__alt_data_end+0xfffb4ff8>
    b104:	b9800007 	ldb	r6,0(r23)
    b108:	003bfb06 	br	a0f8 <__alt_data_end+0xfffb49c8>
    b10c:	9080100c 	andi	r2,r18,64
    b110:	10003726 	beq	r2,zero,b1f0 <___vfiprintf_internal_r+0x127c>
    b114:	d9412317 	ldw	r5,1164(sp)
    b118:	002b883a 	mov	r21,zero
    b11c:	0005883a 	mov	r2,zero
    b120:	2cc0000b 	ldhu	r19,0(r5)
    b124:	29400104 	addi	r5,r5,4
    b128:	d9412315 	stw	r5,1164(sp)
    b12c:	9807883a 	mov	r3,r19
    b130:	003d7d06 	br	a728 <__alt_data_end+0xfffb4ff8>
    b134:	9080100c 	andi	r2,r18,64
    b138:	10002526 	beq	r2,zero,b1d0 <___vfiprintf_internal_r+0x125c>
    b13c:	d8812317 	ldw	r2,1164(sp)
    b140:	002b883a 	mov	r21,zero
    b144:	14c0000b 	ldhu	r19,0(r2)
    b148:	10800104 	addi	r2,r2,4
    b14c:	d8812315 	stw	r2,1164(sp)
    b150:	9807883a 	mov	r3,r19
    b154:	00800044 	movi	r2,1
    b158:	003d7306 	br	a728 <__alt_data_end+0xfffb4ff8>
    b15c:	d9012117 	ldw	r4,1156(sp)
    b160:	d9412017 	ldw	r5,1152(sp)
    b164:	d9811a04 	addi	r6,sp,1128
    b168:	da812a15 	stw	r10,1192(sp)
    b16c:	0009e600 	call	9e60 <__sprint_r.part.0>
    b170:	da812a17 	ldw	r10,1192(sp)
    b174:	103e9b1e 	bne	r2,zero,abe4 <__alt_data_end+0xfffb54b4>
    b178:	d9411b17 	ldw	r5,1132(sp)
    b17c:	d8c11c17 	ldw	r3,1136(sp)
    b180:	d811883a 	mov	r8,sp
    b184:	28800044 	addi	r2,r5,1
    b188:	003e5006 	br	aacc <__alt_data_end+0xfffb539c>
    b18c:	182b883a 	mov	r21,r3
    b190:	003ed006 	br	acd4 <__alt_data_end+0xfffb55a4>
    b194:	8029883a 	mov	r20,r16
    b198:	003dc606 	br	a8b4 <__alt_data_end+0xfffb5184>
    b19c:	d8c12317 	ldw	r3,1164(sp)
    b1a0:	d9012517 	ldw	r4,1172(sp)
    b1a4:	18800017 	ldw	r2,0(r3)
    b1a8:	18c00104 	addi	r3,r3,4
    b1ac:	d8c12315 	stw	r3,1164(sp)
    b1b0:	11000015 	stw	r4,0(r2)
    b1b4:	003ba706 	br	a054 <__alt_data_end+0xfffb4924>
    b1b8:	d9012317 	ldw	r4,1164(sp)
    b1bc:	14c00017 	ldw	r19,0(r2)
    b1c0:	002b883a 	mov	r21,zero
    b1c4:	21000104 	addi	r4,r4,4
    b1c8:	d9012315 	stw	r4,1164(sp)
    b1cc:	003d7906 	br	a7b4 <__alt_data_end+0xfffb5084>
    b1d0:	d8c12317 	ldw	r3,1164(sp)
    b1d4:	002b883a 	mov	r21,zero
    b1d8:	00800044 	movi	r2,1
    b1dc:	1cc00017 	ldw	r19,0(r3)
    b1e0:	18c00104 	addi	r3,r3,4
    b1e4:	d8c12315 	stw	r3,1164(sp)
    b1e8:	9807883a 	mov	r3,r19
    b1ec:	003d4e06 	br	a728 <__alt_data_end+0xfffb4ff8>
    b1f0:	d8812317 	ldw	r2,1164(sp)
    b1f4:	002b883a 	mov	r21,zero
    b1f8:	14c00017 	ldw	r19,0(r2)
    b1fc:	10800104 	addi	r2,r2,4
    b200:	d8812315 	stw	r2,1164(sp)
    b204:	9807883a 	mov	r3,r19
    b208:	0005883a 	mov	r2,zero
    b20c:	003d4606 	br	a728 <__alt_data_end+0xfffb4ff8>
    b210:	1cc00017 	ldw	r19,0(r3)
    b214:	d8c12317 	ldw	r3,1164(sp)
    b218:	982bd7fa 	srai	r21,r19,31
    b21c:	18c00104 	addi	r3,r3,4
    b220:	d8c12315 	stw	r3,1164(sp)
    b224:	a805883a 	mov	r2,r21
    b228:	003c8406 	br	a43c <__alt_data_end+0xfffb4d0c>
    b22c:	01000074 	movhi	r4,1
    b230:	21091604 	addi	r4,r4,9304
    b234:	d9012615 	stw	r4,1176(sp)
    b238:	003d0606 	br	a654 <__alt_data_end+0xfffb4f24>
    b23c:	b9800043 	ldbu	r6,1(r23)
    b240:	94800814 	ori	r18,r18,32
    b244:	bdc00044 	addi	r23,r23,1
    b248:	31803fcc 	andi	r6,r6,255
    b24c:	3180201c 	xori	r6,r6,128
    b250:	31bfe004 	addi	r6,r6,-128
    b254:	003ba806 	br	a0f8 <__alt_data_end+0xfffb49c8>
    b258:	d8811e17 	ldw	r2,1144(sp)
    b25c:	d8c12217 	ldw	r3,1160(sp)
    b260:	10e9c83a 	sub	r20,r2,r3
    b264:	003c9406 	br	a4b8 <__alt_data_end+0xfffb4d88>
    b268:	da012a15 	stw	r8,1192(sp)
    b26c:	00032800 	call	3280 <strlen>
    b270:	1029883a 	mov	r20,r2
    b274:	dd811d83 	ldbu	r22,1142(sp)
    b278:	dcc12315 	stw	r19,1164(sp)
    b27c:	0021883a 	mov	r16,zero
    b280:	da012a17 	ldw	r8,1192(sp)
    b284:	003c8c06 	br	a4b8 <__alt_data_end+0xfffb4d88>
    b288:	d9012117 	ldw	r4,1156(sp)
    b28c:	d9412017 	ldw	r5,1152(sp)
    b290:	d9811a04 	addi	r6,sp,1128
    b294:	0009e600 	call	9e60 <__sprint_r.part.0>
    b298:	103e521e 	bne	r2,zero,abe4 <__alt_data_end+0xfffb54b4>
    b29c:	d9411b17 	ldw	r5,1132(sp)
    b2a0:	d8c11c17 	ldw	r3,1136(sp)
    b2a4:	d811883a 	mov	r8,sp
    b2a8:	28800044 	addi	r2,r5,1
    b2ac:	003cce06 	br	a5e8 <__alt_data_end+0xfffb4eb8>
    b2b0:	01400074 	movhi	r5,1
    b2b4:	29491a04 	addi	r5,r5,9320
    b2b8:	d9412615 	stw	r5,1176(sp)
    b2bc:	d9411b17 	ldw	r5,1132(sp)
    b2c0:	29400044 	addi	r5,r5,1
    b2c4:	003cad06 	br	a57c <__alt_data_end+0xfffb4e4c>
    b2c8:	00800184 	movi	r2,6
    b2cc:	1400012e 	bgeu	r2,r16,b2d4 <___vfiprintf_internal_r+0x1360>
    b2d0:	1021883a 	mov	r16,r2
    b2d4:	8029883a 	mov	r20,r16
    b2d8:	802b883a 	mov	r21,r16
    b2dc:	80001c16 	blt	r16,zero,b350 <___vfiprintf_internal_r+0x13dc>
    b2e0:	00c00074 	movhi	r3,1
    b2e4:	18c8ba04 	addi	r3,r3,8936
    b2e8:	dcc12315 	stw	r19,1164(sp)
    b2ec:	d8c12215 	stw	r3,1160(sp)
    b2f0:	003cff06 	br	a6f0 <__alt_data_end+0xfffb4fc0>
    b2f4:	d9411b17 	ldw	r5,1132(sp)
    b2f8:	00800074 	movhi	r2,1
    b2fc:	10891a04 	addi	r2,r2,9320
    b300:	d8812615 	stw	r2,1176(sp)
    b304:	29400044 	addi	r5,r5,1
    b308:	003e6706 	br	aca8 <__alt_data_end+0xfffb5578>
    b30c:	d9012317 	ldw	r4,1164(sp)
    b310:	d9412517 	ldw	r5,1172(sp)
    b314:	20800017 	ldw	r2,0(r4)
    b318:	21000104 	addi	r4,r4,4
    b31c:	d9012315 	stw	r4,1164(sp)
    b320:	11400015 	stw	r5,0(r2)
    b324:	003b4b06 	br	a054 <__alt_data_end+0xfffb4924>
    b328:	8029883a 	mov	r20,r16
    b32c:	dd811d83 	ldbu	r22,1142(sp)
    b330:	dcc12315 	stw	r19,1164(sp)
    b334:	0021883a 	mov	r16,zero
    b338:	003c5f06 	br	a4b8 <__alt_data_end+0xfffb4d88>
    b33c:	01000074 	movhi	r4,1
    b340:	21091604 	addi	r4,r4,9304
    b344:	d9012615 	stw	r4,1176(sp)
    b348:	1009883a 	mov	r4,r2
    b34c:	003ea006 	br	add0 <__alt_data_end+0xfffb56a0>
    b350:	002b883a 	mov	r21,zero
    b354:	003fe206 	br	b2e0 <__alt_data_end+0xfffb5bb0>
    b358:	d9412317 	ldw	r5,1164(sp)
    b35c:	b807883a 	mov	r3,r23
    b360:	102f883a 	mov	r23,r2
    b364:	2c000017 	ldw	r16,0(r5)
    b368:	29000104 	addi	r4,r5,4
    b36c:	d9012315 	stw	r4,1164(sp)
    b370:	80000416 	blt	r16,zero,b384 <___vfiprintf_internal_r+0x1410>
    b374:	19800047 	ldb	r6,1(r3)
    b378:	003b5f06 	br	a0f8 <__alt_data_end+0xfffb49c8>
    b37c:	043fffc4 	movi	r16,-1
    b380:	003bef06 	br	a340 <__alt_data_end+0xfffb4c10>
    b384:	043fffc4 	movi	r16,-1
    b388:	19800047 	ldb	r6,1(r3)
    b38c:	003b5a06 	br	a0f8 <__alt_data_end+0xfffb49c8>
    b390:	282b883a 	mov	r21,r5
    b394:	003cc706 	br	a6b4 <__alt_data_end+0xfffb4f84>

0000b398 <__vfiprintf_internal>:
    b398:	2007883a 	mov	r3,r4
    b39c:	01000074 	movhi	r4,1
    b3a0:	21101904 	addi	r4,r4,16484
    b3a4:	21000017 	ldw	r4,0(r4)
    b3a8:	2805883a 	mov	r2,r5
    b3ac:	300f883a 	mov	r7,r6
    b3b0:	180b883a 	mov	r5,r3
    b3b4:	100d883a 	mov	r6,r2
    b3b8:	0009f741 	jmpi	9f74 <___vfiprintf_internal_r>

0000b3bc <_write_r>:
    b3bc:	defffd04 	addi	sp,sp,-12
    b3c0:	dc000015 	stw	r16,0(sp)
    b3c4:	04000074 	movhi	r16,1
    b3c8:	dc400115 	stw	r17,4(sp)
    b3cc:	8416ec04 	addi	r16,r16,23472
    b3d0:	2023883a 	mov	r17,r4
    b3d4:	2809883a 	mov	r4,r5
    b3d8:	300b883a 	mov	r5,r6
    b3dc:	380d883a 	mov	r6,r7
    b3e0:	dfc00215 	stw	ra,8(sp)
    b3e4:	80000015 	stw	zero,0(r16)
    b3e8:	000fbd80 	call	fbd8 <write>
    b3ec:	00ffffc4 	movi	r3,-1
    b3f0:	10c00526 	beq	r2,r3,b408 <_write_r+0x4c>
    b3f4:	dfc00217 	ldw	ra,8(sp)
    b3f8:	dc400117 	ldw	r17,4(sp)
    b3fc:	dc000017 	ldw	r16,0(sp)
    b400:	dec00304 	addi	sp,sp,12
    b404:	f800283a 	ret
    b408:	80c00017 	ldw	r3,0(r16)
    b40c:	183ff926 	beq	r3,zero,b3f4 <__alt_data_end+0xfffb5cc4>
    b410:	88c00015 	stw	r3,0(r17)
    b414:	003ff706 	br	b3f4 <__alt_data_end+0xfffb5cc4>

0000b418 <_close_r>:
    b418:	defffd04 	addi	sp,sp,-12
    b41c:	dc000015 	stw	r16,0(sp)
    b420:	04000074 	movhi	r16,1
    b424:	dc400115 	stw	r17,4(sp)
    b428:	8416ec04 	addi	r16,r16,23472
    b42c:	2023883a 	mov	r17,r4
    b430:	2809883a 	mov	r4,r5
    b434:	dfc00215 	stw	ra,8(sp)
    b438:	80000015 	stw	zero,0(r16)
    b43c:	000f3040 	call	f304 <close>
    b440:	00ffffc4 	movi	r3,-1
    b444:	10c00526 	beq	r2,r3,b45c <_close_r+0x44>
    b448:	dfc00217 	ldw	ra,8(sp)
    b44c:	dc400117 	ldw	r17,4(sp)
    b450:	dc000017 	ldw	r16,0(sp)
    b454:	dec00304 	addi	sp,sp,12
    b458:	f800283a 	ret
    b45c:	80c00017 	ldw	r3,0(r16)
    b460:	183ff926 	beq	r3,zero,b448 <__alt_data_end+0xfffb5d18>
    b464:	88c00015 	stw	r3,0(r17)
    b468:	003ff706 	br	b448 <__alt_data_end+0xfffb5d18>

0000b46c <_calloc_r>:
    b46c:	defffe04 	addi	sp,sp,-8
    b470:	dc000015 	stw	r16,0(sp)
    b474:	2021883a 	mov	r16,r4
    b478:	2809883a 	mov	r4,r5
    b47c:	300b883a 	mov	r5,r6
    b480:	dfc00115 	stw	ra,4(sp)
    b484:	000ca900 	call	ca90 <__mulsi3>
    b488:	8009883a 	mov	r4,r16
    b48c:	100b883a 	mov	r5,r2
    b490:	00029500 	call	2950 <_malloc_r>
    b494:	1021883a 	mov	r16,r2
    b498:	10002826 	beq	r2,zero,b53c <_calloc_r+0xd0>
    b49c:	11bfff17 	ldw	r6,-4(r2)
    b4a0:	00bfff04 	movi	r2,-4
    b4a4:	00c00904 	movi	r3,36
    b4a8:	308c703a 	and	r6,r6,r2
    b4ac:	308d883a 	add	r6,r6,r2
    b4b0:	19801436 	bltu	r3,r6,b504 <_calloc_r+0x98>
    b4b4:	008004c4 	movi	r2,19
    b4b8:	11800936 	bltu	r2,r6,b4e0 <_calloc_r+0x74>
    b4bc:	8005883a 	mov	r2,r16
    b4c0:	10000015 	stw	zero,0(r2)
    b4c4:	10000115 	stw	zero,4(r2)
    b4c8:	10000215 	stw	zero,8(r2)
    b4cc:	8005883a 	mov	r2,r16
    b4d0:	dfc00117 	ldw	ra,4(sp)
    b4d4:	dc000017 	ldw	r16,0(sp)
    b4d8:	dec00204 	addi	sp,sp,8
    b4dc:	f800283a 	ret
    b4e0:	80000015 	stw	zero,0(r16)
    b4e4:	80000115 	stw	zero,4(r16)
    b4e8:	008006c4 	movi	r2,27
    b4ec:	11800d2e 	bgeu	r2,r6,b524 <_calloc_r+0xb8>
    b4f0:	80000215 	stw	zero,8(r16)
    b4f4:	80000315 	stw	zero,12(r16)
    b4f8:	30c00c26 	beq	r6,r3,b52c <_calloc_r+0xc0>
    b4fc:	80800404 	addi	r2,r16,16
    b500:	003fef06 	br	b4c0 <__alt_data_end+0xfffb5d90>
    b504:	8009883a 	mov	r4,r16
    b508:	000b883a 	mov	r5,zero
    b50c:	00085000 	call	8500 <memset>
    b510:	8005883a 	mov	r2,r16
    b514:	dfc00117 	ldw	ra,4(sp)
    b518:	dc000017 	ldw	r16,0(sp)
    b51c:	dec00204 	addi	sp,sp,8
    b520:	f800283a 	ret
    b524:	80800204 	addi	r2,r16,8
    b528:	003fe506 	br	b4c0 <__alt_data_end+0xfffb5d90>
    b52c:	80000415 	stw	zero,16(r16)
    b530:	80800604 	addi	r2,r16,24
    b534:	80000515 	stw	zero,20(r16)
    b538:	003fe106 	br	b4c0 <__alt_data_end+0xfffb5d90>
    b53c:	0005883a 	mov	r2,zero
    b540:	003fe306 	br	b4d0 <__alt_data_end+0xfffb5da0>

0000b544 <_fclose_r>:
    b544:	28003226 	beq	r5,zero,b610 <_fclose_r+0xcc>
    b548:	defffc04 	addi	sp,sp,-16
    b54c:	dc400115 	stw	r17,4(sp)
    b550:	2023883a 	mov	r17,r4
    b554:	dc000015 	stw	r16,0(sp)
    b558:	dfc00315 	stw	ra,12(sp)
    b55c:	dc800215 	stw	r18,8(sp)
    b560:	2821883a 	mov	r16,r5
    b564:	00074840 	call	7484 <__sfp_lock_acquire>
    b568:	88000226 	beq	r17,zero,b574 <_fclose_r+0x30>
    b56c:	88800e17 	ldw	r2,56(r17)
    b570:	10002926 	beq	r2,zero,b618 <_fclose_r+0xd4>
    b574:	8080030f 	ldh	r2,12(r16)
    b578:	10002226 	beq	r2,zero,b604 <_fclose_r+0xc0>
    b57c:	8809883a 	mov	r4,r17
    b580:	800b883a 	mov	r5,r16
    b584:	0006eb80 	call	6eb8 <_fflush_r>
    b588:	1025883a 	mov	r18,r2
    b58c:	80800b17 	ldw	r2,44(r16)
    b590:	10000426 	beq	r2,zero,b5a4 <_fclose_r+0x60>
    b594:	81400717 	ldw	r5,28(r16)
    b598:	8809883a 	mov	r4,r17
    b59c:	103ee83a 	callr	r2
    b5a0:	10002616 	blt	r2,zero,b63c <_fclose_r+0xf8>
    b5a4:	8080030b 	ldhu	r2,12(r16)
    b5a8:	1080200c 	andi	r2,r2,128
    b5ac:	10001f1e 	bne	r2,zero,b62c <_fclose_r+0xe8>
    b5b0:	81400c17 	ldw	r5,48(r16)
    b5b4:	28000526 	beq	r5,zero,b5cc <_fclose_r+0x88>
    b5b8:	80801004 	addi	r2,r16,64
    b5bc:	28800226 	beq	r5,r2,b5c8 <_fclose_r+0x84>
    b5c0:	8809883a 	mov	r4,r17
    b5c4:	00075e80 	call	75e8 <_free_r>
    b5c8:	80000c15 	stw	zero,48(r16)
    b5cc:	81401117 	ldw	r5,68(r16)
    b5d0:	28000326 	beq	r5,zero,b5e0 <_fclose_r+0x9c>
    b5d4:	8809883a 	mov	r4,r17
    b5d8:	00075e80 	call	75e8 <_free_r>
    b5dc:	80001115 	stw	zero,68(r16)
    b5e0:	8000030d 	sth	zero,12(r16)
    b5e4:	00074880 	call	7488 <__sfp_lock_release>
    b5e8:	9005883a 	mov	r2,r18
    b5ec:	dfc00317 	ldw	ra,12(sp)
    b5f0:	dc800217 	ldw	r18,8(sp)
    b5f4:	dc400117 	ldw	r17,4(sp)
    b5f8:	dc000017 	ldw	r16,0(sp)
    b5fc:	dec00404 	addi	sp,sp,16
    b600:	f800283a 	ret
    b604:	00074880 	call	7488 <__sfp_lock_release>
    b608:	0005883a 	mov	r2,zero
    b60c:	003ff706 	br	b5ec <__alt_data_end+0xfffb5ebc>
    b610:	0005883a 	mov	r2,zero
    b614:	f800283a 	ret
    b618:	8809883a 	mov	r4,r17
    b61c:	00074740 	call	7474 <__sinit>
    b620:	8080030f 	ldh	r2,12(r16)
    b624:	103fd51e 	bne	r2,zero,b57c <__alt_data_end+0xfffb5e4c>
    b628:	003ff606 	br	b604 <__alt_data_end+0xfffb5ed4>
    b62c:	81400417 	ldw	r5,16(r16)
    b630:	8809883a 	mov	r4,r17
    b634:	00075e80 	call	75e8 <_free_r>
    b638:	003fdd06 	br	b5b0 <__alt_data_end+0xfffb5e80>
    b63c:	04bfffc4 	movi	r18,-1
    b640:	003fd806 	br	b5a4 <__alt_data_end+0xfffb5e74>

0000b644 <fclose>:
    b644:	00800074 	movhi	r2,1
    b648:	10901904 	addi	r2,r2,16484
    b64c:	200b883a 	mov	r5,r4
    b650:	11000017 	ldw	r4,0(r2)
    b654:	000b5441 	jmpi	b544 <_fclose_r>

0000b658 <_fputwc_r>:
    b658:	3080030b 	ldhu	r2,12(r6)
    b65c:	defff804 	addi	sp,sp,-32
    b660:	dcc00415 	stw	r19,16(sp)
    b664:	dc800315 	stw	r18,12(sp)
    b668:	dc000115 	stw	r16,4(sp)
    b66c:	dfc00715 	stw	ra,28(sp)
    b670:	dd400615 	stw	r21,24(sp)
    b674:	dd000515 	stw	r20,20(sp)
    b678:	dc400215 	stw	r17,8(sp)
    b67c:	10c8000c 	andi	r3,r2,8192
    b680:	3021883a 	mov	r16,r6
    b684:	2027883a 	mov	r19,r4
    b688:	2825883a 	mov	r18,r5
    b68c:	1800051e 	bne	r3,zero,b6a4 <_fputwc_r+0x4c>
    b690:	30c01917 	ldw	r3,100(r6)
    b694:	10880014 	ori	r2,r2,8192
    b698:	3080030d 	sth	r2,12(r6)
    b69c:	18880014 	ori	r2,r3,8192
    b6a0:	30801915 	stw	r2,100(r6)
    b6a4:	0007f740 	call	7f74 <__locale_mb_cur_max>
    b6a8:	00c00044 	movi	r3,1
    b6ac:	10c03e26 	beq	r2,r3,b7a8 <_fputwc_r+0x150>
    b6b0:	9809883a 	mov	r4,r19
    b6b4:	d80b883a 	mov	r5,sp
    b6b8:	900d883a 	mov	r6,r18
    b6bc:	81c01704 	addi	r7,r16,92
    b6c0:	000bb080 	call	bb08 <_wcrtomb_r>
    b6c4:	1029883a 	mov	r20,r2
    b6c8:	00bfffc4 	movi	r2,-1
    b6cc:	a0802026 	beq	r20,r2,b750 <_fputwc_r+0xf8>
    b6d0:	d9400003 	ldbu	r5,0(sp)
    b6d4:	a0001c26 	beq	r20,zero,b748 <_fputwc_r+0xf0>
    b6d8:	0023883a 	mov	r17,zero
    b6dc:	05400284 	movi	r21,10
    b6e0:	00000906 	br	b708 <_fputwc_r+0xb0>
    b6e4:	80800017 	ldw	r2,0(r16)
    b6e8:	11400005 	stb	r5,0(r2)
    b6ec:	80c00017 	ldw	r3,0(r16)
    b6f0:	18c00044 	addi	r3,r3,1
    b6f4:	80c00015 	stw	r3,0(r16)
    b6f8:	8c400044 	addi	r17,r17,1
    b6fc:	dc45883a 	add	r2,sp,r17
    b700:	8d00112e 	bgeu	r17,r20,b748 <_fputwc_r+0xf0>
    b704:	11400003 	ldbu	r5,0(r2)
    b708:	80c00217 	ldw	r3,8(r16)
    b70c:	18ffffc4 	addi	r3,r3,-1
    b710:	80c00215 	stw	r3,8(r16)
    b714:	183ff30e 	bge	r3,zero,b6e4 <__alt_data_end+0xfffb5fb4>
    b718:	80800617 	ldw	r2,24(r16)
    b71c:	18801916 	blt	r3,r2,b784 <_fputwc_r+0x12c>
    b720:	80800017 	ldw	r2,0(r16)
    b724:	11400005 	stb	r5,0(r2)
    b728:	80800017 	ldw	r2,0(r16)
    b72c:	10c00003 	ldbu	r3,0(r2)
    b730:	10800044 	addi	r2,r2,1
    b734:	1d402326 	beq	r3,r21,b7c4 <_fputwc_r+0x16c>
    b738:	80800015 	stw	r2,0(r16)
    b73c:	8c400044 	addi	r17,r17,1
    b740:	dc45883a 	add	r2,sp,r17
    b744:	8d3fef36 	bltu	r17,r20,b704 <__alt_data_end+0xfffb5fd4>
    b748:	9005883a 	mov	r2,r18
    b74c:	00000406 	br	b760 <_fputwc_r+0x108>
    b750:	80c0030b 	ldhu	r3,12(r16)
    b754:	a005883a 	mov	r2,r20
    b758:	18c01014 	ori	r3,r3,64
    b75c:	80c0030d 	sth	r3,12(r16)
    b760:	dfc00717 	ldw	ra,28(sp)
    b764:	dd400617 	ldw	r21,24(sp)
    b768:	dd000517 	ldw	r20,20(sp)
    b76c:	dcc00417 	ldw	r19,16(sp)
    b770:	dc800317 	ldw	r18,12(sp)
    b774:	dc400217 	ldw	r17,8(sp)
    b778:	dc000117 	ldw	r16,4(sp)
    b77c:	dec00804 	addi	sp,sp,32
    b780:	f800283a 	ret
    b784:	9809883a 	mov	r4,r19
    b788:	29403fcc 	andi	r5,r5,255
    b78c:	800d883a 	mov	r6,r16
    b790:	000b9980 	call	b998 <__swbuf_r>
    b794:	10bfffe0 	cmpeqi	r2,r2,-1
    b798:	10803fcc 	andi	r2,r2,255
    b79c:	103fd626 	beq	r2,zero,b6f8 <__alt_data_end+0xfffb5fc8>
    b7a0:	00bfffc4 	movi	r2,-1
    b7a4:	003fee06 	br	b760 <__alt_data_end+0xfffb6030>
    b7a8:	90ffffc4 	addi	r3,r18,-1
    b7ac:	01003f84 	movi	r4,254
    b7b0:	20ffbf36 	bltu	r4,r3,b6b0 <__alt_data_end+0xfffb5f80>
    b7b4:	900b883a 	mov	r5,r18
    b7b8:	dc800005 	stb	r18,0(sp)
    b7bc:	1029883a 	mov	r20,r2
    b7c0:	003fc506 	br	b6d8 <__alt_data_end+0xfffb5fa8>
    b7c4:	9809883a 	mov	r4,r19
    b7c8:	a80b883a 	mov	r5,r21
    b7cc:	800d883a 	mov	r6,r16
    b7d0:	000b9980 	call	b998 <__swbuf_r>
    b7d4:	10bfffe0 	cmpeqi	r2,r2,-1
    b7d8:	003fef06 	br	b798 <__alt_data_end+0xfffb6068>

0000b7dc <fputwc>:
    b7dc:	defffc04 	addi	sp,sp,-16
    b7e0:	dc000115 	stw	r16,4(sp)
    b7e4:	04000074 	movhi	r16,1
    b7e8:	84101904 	addi	r16,r16,16484
    b7ec:	dc400215 	stw	r17,8(sp)
    b7f0:	2023883a 	mov	r17,r4
    b7f4:	81000017 	ldw	r4,0(r16)
    b7f8:	dfc00315 	stw	ra,12(sp)
    b7fc:	280d883a 	mov	r6,r5
    b800:	20000626 	beq	r4,zero,b81c <fputwc+0x40>
    b804:	20800e17 	ldw	r2,56(r4)
    b808:	1000041e 	bne	r2,zero,b81c <fputwc+0x40>
    b80c:	d9400015 	stw	r5,0(sp)
    b810:	00074740 	call	7474 <__sinit>
    b814:	81000017 	ldw	r4,0(r16)
    b818:	d9800017 	ldw	r6,0(sp)
    b81c:	880b883a 	mov	r5,r17
    b820:	dfc00317 	ldw	ra,12(sp)
    b824:	dc400217 	ldw	r17,8(sp)
    b828:	dc000117 	ldw	r16,4(sp)
    b82c:	dec00404 	addi	sp,sp,16
    b830:	000b6581 	jmpi	b658 <_fputwc_r>

0000b834 <_fstat_r>:
    b834:	defffd04 	addi	sp,sp,-12
    b838:	dc000015 	stw	r16,0(sp)
    b83c:	04000074 	movhi	r16,1
    b840:	dc400115 	stw	r17,4(sp)
    b844:	8416ec04 	addi	r16,r16,23472
    b848:	2023883a 	mov	r17,r4
    b84c:	2809883a 	mov	r4,r5
    b850:	300b883a 	mov	r5,r6
    b854:	dfc00215 	stw	ra,8(sp)
    b858:	80000015 	stw	zero,0(r16)
    b85c:	000f4580 	call	f458 <fstat>
    b860:	00ffffc4 	movi	r3,-1
    b864:	10c00526 	beq	r2,r3,b87c <_fstat_r+0x48>
    b868:	dfc00217 	ldw	ra,8(sp)
    b86c:	dc400117 	ldw	r17,4(sp)
    b870:	dc000017 	ldw	r16,0(sp)
    b874:	dec00304 	addi	sp,sp,12
    b878:	f800283a 	ret
    b87c:	80c00017 	ldw	r3,0(r16)
    b880:	183ff926 	beq	r3,zero,b868 <__alt_data_end+0xfffb6138>
    b884:	88c00015 	stw	r3,0(r17)
    b888:	003ff706 	br	b868 <__alt_data_end+0xfffb6138>

0000b88c <_isatty_r>:
    b88c:	defffd04 	addi	sp,sp,-12
    b890:	dc000015 	stw	r16,0(sp)
    b894:	04000074 	movhi	r16,1
    b898:	dc400115 	stw	r17,4(sp)
    b89c:	8416ec04 	addi	r16,r16,23472
    b8a0:	2023883a 	mov	r17,r4
    b8a4:	2809883a 	mov	r4,r5
    b8a8:	dfc00215 	stw	ra,8(sp)
    b8ac:	80000015 	stw	zero,0(r16)
    b8b0:	000f5600 	call	f560 <isatty>
    b8b4:	00ffffc4 	movi	r3,-1
    b8b8:	10c00526 	beq	r2,r3,b8d0 <_isatty_r+0x44>
    b8bc:	dfc00217 	ldw	ra,8(sp)
    b8c0:	dc400117 	ldw	r17,4(sp)
    b8c4:	dc000017 	ldw	r16,0(sp)
    b8c8:	dec00304 	addi	sp,sp,12
    b8cc:	f800283a 	ret
    b8d0:	80c00017 	ldw	r3,0(r16)
    b8d4:	183ff926 	beq	r3,zero,b8bc <__alt_data_end+0xfffb618c>
    b8d8:	88c00015 	stw	r3,0(r17)
    b8dc:	003ff706 	br	b8bc <__alt_data_end+0xfffb618c>

0000b8e0 <_lseek_r>:
    b8e0:	defffd04 	addi	sp,sp,-12
    b8e4:	dc000015 	stw	r16,0(sp)
    b8e8:	04000074 	movhi	r16,1
    b8ec:	dc400115 	stw	r17,4(sp)
    b8f0:	8416ec04 	addi	r16,r16,23472
    b8f4:	2023883a 	mov	r17,r4
    b8f8:	2809883a 	mov	r4,r5
    b8fc:	300b883a 	mov	r5,r6
    b900:	380d883a 	mov	r6,r7
    b904:	dfc00215 	stw	ra,8(sp)
    b908:	80000015 	stw	zero,0(r16)
    b90c:	000f7400 	call	f740 <lseek>
    b910:	00ffffc4 	movi	r3,-1
    b914:	10c00526 	beq	r2,r3,b92c <_lseek_r+0x4c>
    b918:	dfc00217 	ldw	ra,8(sp)
    b91c:	dc400117 	ldw	r17,4(sp)
    b920:	dc000017 	ldw	r16,0(sp)
    b924:	dec00304 	addi	sp,sp,12
    b928:	f800283a 	ret
    b92c:	80c00017 	ldw	r3,0(r16)
    b930:	183ff926 	beq	r3,zero,b918 <__alt_data_end+0xfffb61e8>
    b934:	88c00015 	stw	r3,0(r17)
    b938:	003ff706 	br	b918 <__alt_data_end+0xfffb61e8>

0000b93c <_read_r>:
    b93c:	defffd04 	addi	sp,sp,-12
    b940:	dc000015 	stw	r16,0(sp)
    b944:	04000074 	movhi	r16,1
    b948:	dc400115 	stw	r17,4(sp)
    b94c:	8416ec04 	addi	r16,r16,23472
    b950:	2023883a 	mov	r17,r4
    b954:	2809883a 	mov	r4,r5
    b958:	300b883a 	mov	r5,r6
    b95c:	380d883a 	mov	r6,r7
    b960:	dfc00215 	stw	ra,8(sp)
    b964:	80000015 	stw	zero,0(r16)
    b968:	000f9240 	call	f924 <read>
    b96c:	00ffffc4 	movi	r3,-1
    b970:	10c00526 	beq	r2,r3,b988 <_read_r+0x4c>
    b974:	dfc00217 	ldw	ra,8(sp)
    b978:	dc400117 	ldw	r17,4(sp)
    b97c:	dc000017 	ldw	r16,0(sp)
    b980:	dec00304 	addi	sp,sp,12
    b984:	f800283a 	ret
    b988:	80c00017 	ldw	r3,0(r16)
    b98c:	183ff926 	beq	r3,zero,b974 <__alt_data_end+0xfffb6244>
    b990:	88c00015 	stw	r3,0(r17)
    b994:	003ff706 	br	b974 <__alt_data_end+0xfffb6244>

0000b998 <__swbuf_r>:
    b998:	defffc04 	addi	sp,sp,-16
    b99c:	dc800215 	stw	r18,8(sp)
    b9a0:	dc400115 	stw	r17,4(sp)
    b9a4:	dc000015 	stw	r16,0(sp)
    b9a8:	dfc00315 	stw	ra,12(sp)
    b9ac:	2025883a 	mov	r18,r4
    b9b0:	2823883a 	mov	r17,r5
    b9b4:	3021883a 	mov	r16,r6
    b9b8:	20000226 	beq	r4,zero,b9c4 <__swbuf_r+0x2c>
    b9bc:	20800e17 	ldw	r2,56(r4)
    b9c0:	10004126 	beq	r2,zero,bac8 <__swbuf_r+0x130>
    b9c4:	80c00617 	ldw	r3,24(r16)
    b9c8:	8180030b 	ldhu	r6,12(r16)
    b9cc:	80c00215 	stw	r3,8(r16)
    b9d0:	30c0020c 	andi	r3,r6,8
    b9d4:	18003526 	beq	r3,zero,baac <__swbuf_r+0x114>
    b9d8:	80c00417 	ldw	r3,16(r16)
    b9dc:	18003326 	beq	r3,zero,baac <__swbuf_r+0x114>
    b9e0:	3088000c 	andi	r2,r6,8192
    b9e4:	8c403fcc 	andi	r17,r17,255
    b9e8:	10001726 	beq	r2,zero,ba48 <__swbuf_r+0xb0>
    b9ec:	80800017 	ldw	r2,0(r16)
    b9f0:	81000517 	ldw	r4,20(r16)
    b9f4:	10c7c83a 	sub	r3,r2,r3
    b9f8:	19001d0e 	bge	r3,r4,ba70 <__swbuf_r+0xd8>
    b9fc:	18c00044 	addi	r3,r3,1
    ba00:	81400217 	ldw	r5,8(r16)
    ba04:	11000044 	addi	r4,r2,1
    ba08:	81000015 	stw	r4,0(r16)
    ba0c:	297fffc4 	addi	r5,r5,-1
    ba10:	81400215 	stw	r5,8(r16)
    ba14:	14400005 	stb	r17,0(r2)
    ba18:	80800517 	ldw	r2,20(r16)
    ba1c:	10c01d26 	beq	r2,r3,ba94 <__swbuf_r+0xfc>
    ba20:	8080030b 	ldhu	r2,12(r16)
    ba24:	1080004c 	andi	r2,r2,1
    ba28:	1000181e 	bne	r2,zero,ba8c <__swbuf_r+0xf4>
    ba2c:	8805883a 	mov	r2,r17
    ba30:	dfc00317 	ldw	ra,12(sp)
    ba34:	dc800217 	ldw	r18,8(sp)
    ba38:	dc400117 	ldw	r17,4(sp)
    ba3c:	dc000017 	ldw	r16,0(sp)
    ba40:	dec00404 	addi	sp,sp,16
    ba44:	f800283a 	ret
    ba48:	81001917 	ldw	r4,100(r16)
    ba4c:	00b7ffc4 	movi	r2,-8193
    ba50:	31880014 	ori	r6,r6,8192
    ba54:	2084703a 	and	r2,r4,r2
    ba58:	80801915 	stw	r2,100(r16)
    ba5c:	80800017 	ldw	r2,0(r16)
    ba60:	81000517 	ldw	r4,20(r16)
    ba64:	8180030d 	sth	r6,12(r16)
    ba68:	10c7c83a 	sub	r3,r2,r3
    ba6c:	193fe316 	blt	r3,r4,b9fc <__alt_data_end+0xfffb62cc>
    ba70:	9009883a 	mov	r4,r18
    ba74:	800b883a 	mov	r5,r16
    ba78:	0006eb80 	call	6eb8 <_fflush_r>
    ba7c:	1000091e 	bne	r2,zero,baa4 <__swbuf_r+0x10c>
    ba80:	80800017 	ldw	r2,0(r16)
    ba84:	00c00044 	movi	r3,1
    ba88:	003fdd06 	br	ba00 <__alt_data_end+0xfffb62d0>
    ba8c:	00800284 	movi	r2,10
    ba90:	88bfe61e 	bne	r17,r2,ba2c <__alt_data_end+0xfffb62fc>
    ba94:	9009883a 	mov	r4,r18
    ba98:	800b883a 	mov	r5,r16
    ba9c:	0006eb80 	call	6eb8 <_fflush_r>
    baa0:	103fe226 	beq	r2,zero,ba2c <__alt_data_end+0xfffb62fc>
    baa4:	00bfffc4 	movi	r2,-1
    baa8:	003fe106 	br	ba30 <__alt_data_end+0xfffb6300>
    baac:	9009883a 	mov	r4,r18
    bab0:	800b883a 	mov	r5,r16
    bab4:	00054380 	call	5438 <__swsetup_r>
    bab8:	1000051e 	bne	r2,zero,bad0 <__swbuf_r+0x138>
    babc:	8180030b 	ldhu	r6,12(r16)
    bac0:	80c00417 	ldw	r3,16(r16)
    bac4:	003fc606 	br	b9e0 <__alt_data_end+0xfffb62b0>
    bac8:	00074740 	call	7474 <__sinit>
    bacc:	003fbd06 	br	b9c4 <__alt_data_end+0xfffb6294>
    bad0:	80c0030b 	ldhu	r3,12(r16)
    bad4:	00bfffc4 	movi	r2,-1
    bad8:	18c01014 	ori	r3,r3,64
    badc:	80c0030d 	sth	r3,12(r16)
    bae0:	00c00244 	movi	r3,9
    bae4:	90c00015 	stw	r3,0(r18)
    bae8:	003fd106 	br	ba30 <__alt_data_end+0xfffb6300>

0000baec <__swbuf>:
    baec:	00c00074 	movhi	r3,1
    baf0:	18d01904 	addi	r3,r3,16484
    baf4:	2005883a 	mov	r2,r4
    baf8:	19000017 	ldw	r4,0(r3)
    bafc:	280d883a 	mov	r6,r5
    bb00:	100b883a 	mov	r5,r2
    bb04:	000b9981 	jmpi	b998 <__swbuf_r>

0000bb08 <_wcrtomb_r>:
    bb08:	defff604 	addi	sp,sp,-40
    bb0c:	00800074 	movhi	r2,1
    bb10:	dc800815 	stw	r18,32(sp)
    bb14:	dc400715 	stw	r17,28(sp)
    bb18:	dc000615 	stw	r16,24(sp)
    bb1c:	10901b04 	addi	r2,r2,16492
    bb20:	dfc00915 	stw	ra,36(sp)
    bb24:	2021883a 	mov	r16,r4
    bb28:	3823883a 	mov	r17,r7
    bb2c:	14800017 	ldw	r18,0(r2)
    bb30:	28001426 	beq	r5,zero,bb84 <_wcrtomb_r+0x7c>
    bb34:	d9400415 	stw	r5,16(sp)
    bb38:	d9800515 	stw	r6,20(sp)
    bb3c:	0007f680 	call	7f68 <__locale_charset>
    bb40:	d9400417 	ldw	r5,16(sp)
    bb44:	d9800517 	ldw	r6,20(sp)
    bb48:	8009883a 	mov	r4,r16
    bb4c:	dc400015 	stw	r17,0(sp)
    bb50:	100f883a 	mov	r7,r2
    bb54:	903ee83a 	callr	r18
    bb58:	00ffffc4 	movi	r3,-1
    bb5c:	10c0031e 	bne	r2,r3,bb6c <_wcrtomb_r+0x64>
    bb60:	88000015 	stw	zero,0(r17)
    bb64:	00c02284 	movi	r3,138
    bb68:	80c00015 	stw	r3,0(r16)
    bb6c:	dfc00917 	ldw	ra,36(sp)
    bb70:	dc800817 	ldw	r18,32(sp)
    bb74:	dc400717 	ldw	r17,28(sp)
    bb78:	dc000617 	ldw	r16,24(sp)
    bb7c:	dec00a04 	addi	sp,sp,40
    bb80:	f800283a 	ret
    bb84:	0007f680 	call	7f68 <__locale_charset>
    bb88:	8009883a 	mov	r4,r16
    bb8c:	dc400015 	stw	r17,0(sp)
    bb90:	d9400104 	addi	r5,sp,4
    bb94:	000d883a 	mov	r6,zero
    bb98:	100f883a 	mov	r7,r2
    bb9c:	903ee83a 	callr	r18
    bba0:	003fed06 	br	bb58 <__alt_data_end+0xfffb6428>

0000bba4 <wcrtomb>:
    bba4:	defff504 	addi	sp,sp,-44
    bba8:	dc400515 	stw	r17,20(sp)
    bbac:	dc000415 	stw	r16,16(sp)
    bbb0:	dfc00a15 	stw	ra,40(sp)
    bbb4:	dd400915 	stw	r21,36(sp)
    bbb8:	dd000815 	stw	r20,32(sp)
    bbbc:	dcc00715 	stw	r19,28(sp)
    bbc0:	dc800615 	stw	r18,24(sp)
    bbc4:	2021883a 	mov	r16,r4
    bbc8:	3023883a 	mov	r17,r6
    bbcc:	20001d26 	beq	r4,zero,bc44 <wcrtomb+0xa0>
    bbd0:	04800074 	movhi	r18,1
    bbd4:	94901904 	addi	r18,r18,16484
    bbd8:	00800074 	movhi	r2,1
    bbdc:	95400017 	ldw	r21,0(r18)
    bbe0:	10901b04 	addi	r2,r2,16492
    bbe4:	15000017 	ldw	r20,0(r2)
    bbe8:	2827883a 	mov	r19,r5
    bbec:	0007f680 	call	7f68 <__locale_charset>
    bbf0:	a809883a 	mov	r4,r21
    bbf4:	dc400015 	stw	r17,0(sp)
    bbf8:	800b883a 	mov	r5,r16
    bbfc:	980d883a 	mov	r6,r19
    bc00:	100f883a 	mov	r7,r2
    bc04:	a03ee83a 	callr	r20
    bc08:	00ffffc4 	movi	r3,-1
    bc0c:	10c0041e 	bne	r2,r3,bc20 <wcrtomb+0x7c>
    bc10:	90c00017 	ldw	r3,0(r18)
    bc14:	01002284 	movi	r4,138
    bc18:	88000015 	stw	zero,0(r17)
    bc1c:	19000015 	stw	r4,0(r3)
    bc20:	dfc00a17 	ldw	ra,40(sp)
    bc24:	dd400917 	ldw	r21,36(sp)
    bc28:	dd000817 	ldw	r20,32(sp)
    bc2c:	dcc00717 	ldw	r19,28(sp)
    bc30:	dc800617 	ldw	r18,24(sp)
    bc34:	dc400517 	ldw	r17,20(sp)
    bc38:	dc000417 	ldw	r16,16(sp)
    bc3c:	dec00b04 	addi	sp,sp,44
    bc40:	f800283a 	ret
    bc44:	04800074 	movhi	r18,1
    bc48:	94901904 	addi	r18,r18,16484
    bc4c:	00800074 	movhi	r2,1
    bc50:	94c00017 	ldw	r19,0(r18)
    bc54:	10901b04 	addi	r2,r2,16492
    bc58:	14000017 	ldw	r16,0(r2)
    bc5c:	0007f680 	call	7f68 <__locale_charset>
    bc60:	9809883a 	mov	r4,r19
    bc64:	dc400015 	stw	r17,0(sp)
    bc68:	d9400104 	addi	r5,sp,4
    bc6c:	000d883a 	mov	r6,zero
    bc70:	100f883a 	mov	r7,r2
    bc74:	803ee83a 	callr	r16
    bc78:	003fe306 	br	bc08 <__alt_data_end+0xfffb64d8>

0000bc7c <__ascii_wctomb>:
    bc7c:	28000526 	beq	r5,zero,bc94 <__ascii_wctomb+0x18>
    bc80:	00803fc4 	movi	r2,255
    bc84:	11800536 	bltu	r2,r6,bc9c <__ascii_wctomb+0x20>
    bc88:	29800005 	stb	r6,0(r5)
    bc8c:	00800044 	movi	r2,1
    bc90:	f800283a 	ret
    bc94:	0005883a 	mov	r2,zero
    bc98:	f800283a 	ret
    bc9c:	00802284 	movi	r2,138
    bca0:	20800015 	stw	r2,0(r4)
    bca4:	00bfffc4 	movi	r2,-1
    bca8:	f800283a 	ret

0000bcac <_wctomb_r>:
    bcac:	00800074 	movhi	r2,1
    bcb0:	defff904 	addi	sp,sp,-28
    bcb4:	10901b04 	addi	r2,r2,16492
    bcb8:	dfc00615 	stw	ra,24(sp)
    bcbc:	dc400515 	stw	r17,20(sp)
    bcc0:	dc000415 	stw	r16,16(sp)
    bcc4:	3823883a 	mov	r17,r7
    bcc8:	14000017 	ldw	r16,0(r2)
    bccc:	d9000115 	stw	r4,4(sp)
    bcd0:	d9400215 	stw	r5,8(sp)
    bcd4:	d9800315 	stw	r6,12(sp)
    bcd8:	0007f680 	call	7f68 <__locale_charset>
    bcdc:	d9000117 	ldw	r4,4(sp)
    bce0:	d9400217 	ldw	r5,8(sp)
    bce4:	d9800317 	ldw	r6,12(sp)
    bce8:	dc400015 	stw	r17,0(sp)
    bcec:	100f883a 	mov	r7,r2
    bcf0:	803ee83a 	callr	r16
    bcf4:	dfc00617 	ldw	ra,24(sp)
    bcf8:	dc400517 	ldw	r17,20(sp)
    bcfc:	dc000417 	ldw	r16,16(sp)
    bd00:	dec00704 	addi	sp,sp,28
    bd04:	f800283a 	ret

0000bd08 <__udivdi3>:
    bd08:	defff504 	addi	sp,sp,-44
    bd0c:	dcc00415 	stw	r19,16(sp)
    bd10:	dc000115 	stw	r16,4(sp)
    bd14:	dfc00a15 	stw	ra,40(sp)
    bd18:	df000915 	stw	fp,36(sp)
    bd1c:	ddc00815 	stw	r23,32(sp)
    bd20:	dd800715 	stw	r22,28(sp)
    bd24:	dd400615 	stw	r21,24(sp)
    bd28:	dd000515 	stw	r20,20(sp)
    bd2c:	dc800315 	stw	r18,12(sp)
    bd30:	dc400215 	stw	r17,8(sp)
    bd34:	2027883a 	mov	r19,r4
    bd38:	2821883a 	mov	r16,r5
    bd3c:	3800471e 	bne	r7,zero,be5c <__udivdi3+0x154>
    bd40:	3025883a 	mov	r18,r6
    bd44:	2023883a 	mov	r17,r4
    bd48:	2980592e 	bgeu	r5,r6,beb0 <__udivdi3+0x1a8>
    bd4c:	00bfffd4 	movui	r2,65535
    bd50:	2829883a 	mov	r20,r5
    bd54:	1180b236 	bltu	r2,r6,c020 <__udivdi3+0x318>
    bd58:	00803fc4 	movi	r2,255
    bd5c:	1181622e 	bgeu	r2,r6,c2e8 <__udivdi3+0x5e0>
    bd60:	00800204 	movi	r2,8
    bd64:	1007883a 	mov	r3,r2
    bd68:	3084d83a 	srl	r2,r6,r2
    bd6c:	01000074 	movhi	r4,1
    bd70:	21091e04 	addi	r4,r4,9336
    bd74:	2085883a 	add	r2,r4,r2
    bd78:	11000003 	ldbu	r4,0(r2)
    bd7c:	20c9883a 	add	r4,r4,r3
    bd80:	00c00804 	movi	r3,32
    bd84:	1907c83a 	sub	r3,r3,r4
    bd88:	18000526 	beq	r3,zero,bda0 <__udivdi3+0x98>
    bd8c:	80e0983a 	sll	r16,r16,r3
    bd90:	9908d83a 	srl	r4,r19,r4
    bd94:	30e4983a 	sll	r18,r6,r3
    bd98:	98e2983a 	sll	r17,r19,r3
    bd9c:	8128b03a 	or	r20,r16,r4
    bda0:	902ad43a 	srli	r21,r18,16
    bda4:	a009883a 	mov	r4,r20
    bda8:	95bfffcc 	andi	r22,r18,65535
    bdac:	a80b883a 	mov	r5,r21
    bdb0:	000ca880 	call	ca88 <__umodsi3>
    bdb4:	a009883a 	mov	r4,r20
    bdb8:	a80b883a 	mov	r5,r21
    bdbc:	102f883a 	mov	r23,r2
    bdc0:	000ca800 	call	ca80 <__udivsi3>
    bdc4:	1009883a 	mov	r4,r2
    bdc8:	b00b883a 	mov	r5,r22
    bdcc:	1021883a 	mov	r16,r2
    bdd0:	000ca900 	call	ca90 <__mulsi3>
    bdd4:	b82e943a 	slli	r23,r23,16
    bdd8:	8808d43a 	srli	r4,r17,16
    bddc:	b906b03a 	or	r3,r23,r4
    bde0:	1880052e 	bgeu	r3,r2,bdf8 <__udivdi3+0xf0>
    bde4:	1c87883a 	add	r3,r3,r18
    bde8:	813fffc4 	addi	r4,r16,-1
    bdec:	1c800136 	bltu	r3,r18,bdf4 <__udivdi3+0xec>
    bdf0:	18815236 	bltu	r3,r2,c33c <__udivdi3+0x634>
    bdf4:	2021883a 	mov	r16,r4
    bdf8:	18a7c83a 	sub	r19,r3,r2
    bdfc:	9809883a 	mov	r4,r19
    be00:	a80b883a 	mov	r5,r21
    be04:	000ca880 	call	ca88 <__umodsi3>
    be08:	1029883a 	mov	r20,r2
    be0c:	9809883a 	mov	r4,r19
    be10:	a80b883a 	mov	r5,r21
    be14:	a028943a 	slli	r20,r20,16
    be18:	000ca800 	call	ca80 <__udivsi3>
    be1c:	1009883a 	mov	r4,r2
    be20:	b00b883a 	mov	r5,r22
    be24:	8c7fffcc 	andi	r17,r17,65535
    be28:	1027883a 	mov	r19,r2
    be2c:	a462b03a 	or	r17,r20,r17
    be30:	000ca900 	call	ca90 <__mulsi3>
    be34:	8880052e 	bgeu	r17,r2,be4c <__udivdi3+0x144>
    be38:	8ca3883a 	add	r17,r17,r18
    be3c:	98ffffc4 	addi	r3,r19,-1
    be40:	8c811036 	bltu	r17,r18,c284 <__udivdi3+0x57c>
    be44:	88810f2e 	bgeu	r17,r2,c284 <__udivdi3+0x57c>
    be48:	9cffff84 	addi	r19,r19,-2
    be4c:	8020943a 	slli	r16,r16,16
    be50:	0007883a 	mov	r3,zero
    be54:	9c04b03a 	or	r2,r19,r16
    be58:	00006006 	br	bfdc <__udivdi3+0x2d4>
    be5c:	29c05d36 	bltu	r5,r7,bfd4 <__udivdi3+0x2cc>
    be60:	00bfffd4 	movui	r2,65535
    be64:	11c0692e 	bgeu	r2,r7,c00c <__udivdi3+0x304>
    be68:	00804034 	movhi	r2,256
    be6c:	10bfffc4 	addi	r2,r2,-1
    be70:	11c10e2e 	bgeu	r2,r7,c2ac <__udivdi3+0x5a4>
    be74:	01400604 	movi	r5,24
    be78:	2811883a 	mov	r8,r5
    be7c:	394ad83a 	srl	r5,r7,r5
    be80:	00800074 	movhi	r2,1
    be84:	10891e04 	addi	r2,r2,9336
    be88:	114b883a 	add	r5,r2,r5
    be8c:	29400003 	ldbu	r5,0(r5)
    be90:	00c00804 	movi	r3,32
    be94:	2a0b883a 	add	r5,r5,r8
    be98:	196fc83a 	sub	r23,r3,r5
    be9c:	b8006b1e 	bne	r23,zero,c04c <__udivdi3+0x344>
    bea0:	3c011436 	bltu	r7,r16,c2f4 <__udivdi3+0x5ec>
    bea4:	9985403a 	cmpgeu	r2,r19,r6
    bea8:	0007883a 	mov	r3,zero
    beac:	00004b06 	br	bfdc <__udivdi3+0x2d4>
    beb0:	3000041e 	bne	r6,zero,bec4 <__udivdi3+0x1bc>
    beb4:	01000044 	movi	r4,1
    beb8:	000b883a 	mov	r5,zero
    bebc:	000ca800 	call	ca80 <__udivsi3>
    bec0:	1025883a 	mov	r18,r2
    bec4:	00bfffd4 	movui	r2,65535
    bec8:	14805b2e 	bgeu	r2,r18,c038 <__udivdi3+0x330>
    becc:	00804034 	movhi	r2,256
    bed0:	10bfffc4 	addi	r2,r2,-1
    bed4:	1480fe2e 	bgeu	r2,r18,c2d0 <__udivdi3+0x5c8>
    bed8:	00800604 	movi	r2,24
    bedc:	1007883a 	mov	r3,r2
    bee0:	9084d83a 	srl	r2,r18,r2
    bee4:	01000074 	movhi	r4,1
    bee8:	21091e04 	addi	r4,r4,9336
    beec:	2085883a 	add	r2,r4,r2
    bef0:	11800003 	ldbu	r6,0(r2)
    bef4:	01c00804 	movi	r7,32
    bef8:	30c7883a 	add	r3,r6,r3
    befc:	38cfc83a 	sub	r7,r7,r3
    bf00:	3800a71e 	bne	r7,zero,c1a0 <__udivdi3+0x498>
    bf04:	9028d43a 	srli	r20,r18,16
    bf08:	84a1c83a 	sub	r16,r16,r18
    bf0c:	957fffcc 	andi	r21,r18,65535
    bf10:	00c00044 	movi	r3,1
    bf14:	8009883a 	mov	r4,r16
    bf18:	a00b883a 	mov	r5,r20
    bf1c:	d8c00015 	stw	r3,0(sp)
    bf20:	000ca880 	call	ca88 <__umodsi3>
    bf24:	8009883a 	mov	r4,r16
    bf28:	a00b883a 	mov	r5,r20
    bf2c:	102d883a 	mov	r22,r2
    bf30:	000ca800 	call	ca80 <__udivsi3>
    bf34:	1009883a 	mov	r4,r2
    bf38:	a80b883a 	mov	r5,r21
    bf3c:	1021883a 	mov	r16,r2
    bf40:	000ca900 	call	ca90 <__mulsi3>
    bf44:	b02c943a 	slli	r22,r22,16
    bf48:	880ed43a 	srli	r7,r17,16
    bf4c:	d8c00017 	ldw	r3,0(sp)
    bf50:	b1ccb03a 	or	r6,r22,r7
    bf54:	3080052e 	bgeu	r6,r2,bf6c <__udivdi3+0x264>
    bf58:	348d883a 	add	r6,r6,r18
    bf5c:	813fffc4 	addi	r4,r16,-1
    bf60:	34800136 	bltu	r6,r18,bf68 <__udivdi3+0x260>
    bf64:	3080f236 	bltu	r6,r2,c330 <__udivdi3+0x628>
    bf68:	2021883a 	mov	r16,r4
    bf6c:	30a7c83a 	sub	r19,r6,r2
    bf70:	9809883a 	mov	r4,r19
    bf74:	a00b883a 	mov	r5,r20
    bf78:	d8c00015 	stw	r3,0(sp)
    bf7c:	000ca880 	call	ca88 <__umodsi3>
    bf80:	102d883a 	mov	r22,r2
    bf84:	9809883a 	mov	r4,r19
    bf88:	a00b883a 	mov	r5,r20
    bf8c:	b02c943a 	slli	r22,r22,16
    bf90:	000ca800 	call	ca80 <__udivsi3>
    bf94:	1009883a 	mov	r4,r2
    bf98:	a80b883a 	mov	r5,r21
    bf9c:	8c7fffcc 	andi	r17,r17,65535
    bfa0:	1027883a 	mov	r19,r2
    bfa4:	b462b03a 	or	r17,r22,r17
    bfa8:	000ca900 	call	ca90 <__mulsi3>
    bfac:	d8c00017 	ldw	r3,0(sp)
    bfb0:	8880052e 	bgeu	r17,r2,bfc8 <__udivdi3+0x2c0>
    bfb4:	8ca3883a 	add	r17,r17,r18
    bfb8:	993fffc4 	addi	r4,r19,-1
    bfbc:	8c80af36 	bltu	r17,r18,c27c <__udivdi3+0x574>
    bfc0:	8880ae2e 	bgeu	r17,r2,c27c <__udivdi3+0x574>
    bfc4:	9cffff84 	addi	r19,r19,-2
    bfc8:	8020943a 	slli	r16,r16,16
    bfcc:	9c04b03a 	or	r2,r19,r16
    bfd0:	00000206 	br	bfdc <__udivdi3+0x2d4>
    bfd4:	0007883a 	mov	r3,zero
    bfd8:	0005883a 	mov	r2,zero
    bfdc:	dfc00a17 	ldw	ra,40(sp)
    bfe0:	df000917 	ldw	fp,36(sp)
    bfe4:	ddc00817 	ldw	r23,32(sp)
    bfe8:	dd800717 	ldw	r22,28(sp)
    bfec:	dd400617 	ldw	r21,24(sp)
    bff0:	dd000517 	ldw	r20,20(sp)
    bff4:	dcc00417 	ldw	r19,16(sp)
    bff8:	dc800317 	ldw	r18,12(sp)
    bffc:	dc400217 	ldw	r17,8(sp)
    c000:	dc000117 	ldw	r16,4(sp)
    c004:	dec00b04 	addi	sp,sp,44
    c008:	f800283a 	ret
    c00c:	00803fc4 	movi	r2,255
    c010:	11c0a92e 	bgeu	r2,r7,c2b8 <__udivdi3+0x5b0>
    c014:	01400204 	movi	r5,8
    c018:	2811883a 	mov	r8,r5
    c01c:	003f9706 	br	be7c <__alt_data_end+0xfffb674c>
    c020:	00804034 	movhi	r2,256
    c024:	10bfffc4 	addi	r2,r2,-1
    c028:	1180a62e 	bgeu	r2,r6,c2c4 <__udivdi3+0x5bc>
    c02c:	00800604 	movi	r2,24
    c030:	1007883a 	mov	r3,r2
    c034:	003f4c06 	br	bd68 <__alt_data_end+0xfffb6638>
    c038:	00803fc4 	movi	r2,255
    c03c:	1480a72e 	bgeu	r2,r18,c2dc <__udivdi3+0x5d4>
    c040:	00800204 	movi	r2,8
    c044:	1007883a 	mov	r3,r2
    c048:	003fa506 	br	bee0 <__alt_data_end+0xfffb67b0>
    c04c:	3178d83a 	srl	fp,r6,r5
    c050:	3dce983a 	sll	r7,r7,r23
    c054:	8168d83a 	srl	r20,r16,r5
    c058:	9950d83a 	srl	r8,r19,r5
    c05c:	3f38b03a 	or	fp,r7,fp
    c060:	e024d43a 	srli	r18,fp,16
    c064:	85e0983a 	sll	r16,r16,r23
    c068:	a009883a 	mov	r4,r20
    c06c:	900b883a 	mov	r5,r18
    c070:	8220b03a 	or	r16,r16,r8
    c074:	35ea983a 	sll	r21,r6,r23
    c078:	000ca880 	call	ca88 <__umodsi3>
    c07c:	a009883a 	mov	r4,r20
    c080:	900b883a 	mov	r5,r18
    c084:	1023883a 	mov	r17,r2
    c088:	e5bfffcc 	andi	r22,fp,65535
    c08c:	000ca800 	call	ca80 <__udivsi3>
    c090:	1009883a 	mov	r4,r2
    c094:	b00b883a 	mov	r5,r22
    c098:	1029883a 	mov	r20,r2
    c09c:	000ca900 	call	ca90 <__mulsi3>
    c0a0:	8806943a 	slli	r3,r17,16
    c0a4:	8014d43a 	srli	r10,r16,16
    c0a8:	1a92b03a 	or	r9,r3,r10
    c0ac:	4880042e 	bgeu	r9,r2,c0c0 <__udivdi3+0x3b8>
    c0b0:	4f13883a 	add	r9,r9,fp
    c0b4:	a0ffffc4 	addi	r3,r20,-1
    c0b8:	4f00952e 	bgeu	r9,fp,c310 <__udivdi3+0x608>
    c0bc:	1829883a 	mov	r20,r3
    c0c0:	48a3c83a 	sub	r17,r9,r2
    c0c4:	8809883a 	mov	r4,r17
    c0c8:	900b883a 	mov	r5,r18
    c0cc:	000ca880 	call	ca88 <__umodsi3>
    c0d0:	8809883a 	mov	r4,r17
    c0d4:	900b883a 	mov	r5,r18
    c0d8:	d8800015 	stw	r2,0(sp)
    c0dc:	000ca800 	call	ca80 <__udivsi3>
    c0e0:	1009883a 	mov	r4,r2
    c0e4:	b00b883a 	mov	r5,r22
    c0e8:	1023883a 	mov	r17,r2
    c0ec:	000ca900 	call	ca90 <__mulsi3>
    c0f0:	d8c00017 	ldw	r3,0(sp)
    c0f4:	823fffcc 	andi	r8,r16,65535
    c0f8:	1806943a 	slli	r3,r3,16
    c0fc:	1a20b03a 	or	r16,r3,r8
    c100:	8080042e 	bgeu	r16,r2,c114 <__udivdi3+0x40c>
    c104:	8721883a 	add	r16,r16,fp
    c108:	88ffffc4 	addi	r3,r17,-1
    c10c:	87007c2e 	bgeu	r16,fp,c300 <__udivdi3+0x5f8>
    c110:	1823883a 	mov	r17,r3
    c114:	a028943a 	slli	r20,r20,16
    c118:	acbfffcc 	andi	r18,r21,65535
    c11c:	900b883a 	mov	r5,r18
    c120:	8d28b03a 	or	r20,r17,r20
    c124:	a022d43a 	srli	r17,r20,16
    c128:	a5bfffcc 	andi	r22,r20,65535
    c12c:	b009883a 	mov	r4,r22
    c130:	a82ad43a 	srli	r21,r21,16
    c134:	80a1c83a 	sub	r16,r16,r2
    c138:	000ca900 	call	ca90 <__mulsi3>
    c13c:	8809883a 	mov	r4,r17
    c140:	900b883a 	mov	r5,r18
    c144:	1039883a 	mov	fp,r2
    c148:	000ca900 	call	ca90 <__mulsi3>
    c14c:	8809883a 	mov	r4,r17
    c150:	a80b883a 	mov	r5,r21
    c154:	1025883a 	mov	r18,r2
    c158:	000ca900 	call	ca90 <__mulsi3>
    c15c:	b009883a 	mov	r4,r22
    c160:	a80b883a 	mov	r5,r21
    c164:	1023883a 	mov	r17,r2
    c168:	000ca900 	call	ca90 <__mulsi3>
    c16c:	e006d43a 	srli	r3,fp,16
    c170:	9085883a 	add	r2,r18,r2
    c174:	10c7883a 	add	r3,r2,r3
    c178:	1c80022e 	bgeu	r3,r18,c184 <__udivdi3+0x47c>
    c17c:	00800074 	movhi	r2,1
    c180:	88a3883a 	add	r17,r17,r2
    c184:	1808d43a 	srli	r4,r3,16
    c188:	8909883a 	add	r4,r17,r4
    c18c:	81004436 	bltu	r16,r4,c2a0 <__udivdi3+0x598>
    c190:	81003e26 	beq	r16,r4,c28c <__udivdi3+0x584>
    c194:	a005883a 	mov	r2,r20
    c198:	0007883a 	mov	r3,zero
    c19c:	003f8f06 	br	bfdc <__alt_data_end+0xfffb68ac>
    c1a0:	91e4983a 	sll	r18,r18,r7
    c1a4:	80eed83a 	srl	r23,r16,r3
    c1a8:	81cc983a 	sll	r6,r16,r7
    c1ac:	9028d43a 	srli	r20,r18,16
    c1b0:	98c6d83a 	srl	r3,r19,r3
    c1b4:	b809883a 	mov	r4,r23
    c1b8:	a00b883a 	mov	r5,r20
    c1bc:	30ecb03a 	or	r22,r6,r3
    c1c0:	99e2983a 	sll	r17,r19,r7
    c1c4:	000ca880 	call	ca88 <__umodsi3>
    c1c8:	b809883a 	mov	r4,r23
    c1cc:	a00b883a 	mov	r5,r20
    c1d0:	1021883a 	mov	r16,r2
    c1d4:	957fffcc 	andi	r21,r18,65535
    c1d8:	000ca800 	call	ca80 <__udivsi3>
    c1dc:	a80b883a 	mov	r5,r21
    c1e0:	1009883a 	mov	r4,r2
    c1e4:	102f883a 	mov	r23,r2
    c1e8:	000ca900 	call	ca90 <__mulsi3>
    c1ec:	8020943a 	slli	r16,r16,16
    c1f0:	b00ad43a 	srli	r5,r22,16
    c1f4:	814cb03a 	or	r6,r16,r5
    c1f8:	3080062e 	bgeu	r6,r2,c214 <__udivdi3+0x50c>
    c1fc:	348d883a 	add	r6,r6,r18
    c200:	b8ffffc4 	addi	r3,r23,-1
    c204:	34804836 	bltu	r6,r18,c328 <__udivdi3+0x620>
    c208:	3080472e 	bgeu	r6,r2,c328 <__udivdi3+0x620>
    c20c:	bdffff84 	addi	r23,r23,-2
    c210:	348d883a 	add	r6,r6,r18
    c214:	30a7c83a 	sub	r19,r6,r2
    c218:	9809883a 	mov	r4,r19
    c21c:	a00b883a 	mov	r5,r20
    c220:	000ca880 	call	ca88 <__umodsi3>
    c224:	9809883a 	mov	r4,r19
    c228:	a00b883a 	mov	r5,r20
    c22c:	1039883a 	mov	fp,r2
    c230:	000ca800 	call	ca80 <__udivsi3>
    c234:	1009883a 	mov	r4,r2
    c238:	a80b883a 	mov	r5,r21
    c23c:	e038943a 	slli	fp,fp,16
    c240:	1027883a 	mov	r19,r2
    c244:	000ca900 	call	ca90 <__mulsi3>
    c248:	b1bfffcc 	andi	r6,r22,65535
    c24c:	e18cb03a 	or	r6,fp,r6
    c250:	3080062e 	bgeu	r6,r2,c26c <__udivdi3+0x564>
    c254:	348d883a 	add	r6,r6,r18
    c258:	98ffffc4 	addi	r3,r19,-1
    c25c:	34803036 	bltu	r6,r18,c320 <__udivdi3+0x618>
    c260:	30802f2e 	bgeu	r6,r2,c320 <__udivdi3+0x618>
    c264:	9cffff84 	addi	r19,r19,-2
    c268:	348d883a 	add	r6,r6,r18
    c26c:	b82e943a 	slli	r23,r23,16
    c270:	30a1c83a 	sub	r16,r6,r2
    c274:	9dc6b03a 	or	r3,r19,r23
    c278:	003f2606 	br	bf14 <__alt_data_end+0xfffb67e4>
    c27c:	2027883a 	mov	r19,r4
    c280:	003f5106 	br	bfc8 <__alt_data_end+0xfffb6898>
    c284:	1827883a 	mov	r19,r3
    c288:	003ef006 	br	be4c <__alt_data_end+0xfffb671c>
    c28c:	1808943a 	slli	r4,r3,16
    c290:	9dc6983a 	sll	r3,r19,r23
    c294:	e73fffcc 	andi	fp,fp,65535
    c298:	2709883a 	add	r4,r4,fp
    c29c:	193fbd2e 	bgeu	r3,r4,c194 <__alt_data_end+0xfffb6a64>
    c2a0:	a0bfffc4 	addi	r2,r20,-1
    c2a4:	0007883a 	mov	r3,zero
    c2a8:	003f4c06 	br	bfdc <__alt_data_end+0xfffb68ac>
    c2ac:	01400404 	movi	r5,16
    c2b0:	2811883a 	mov	r8,r5
    c2b4:	003ef106 	br	be7c <__alt_data_end+0xfffb674c>
    c2b8:	000b883a 	mov	r5,zero
    c2bc:	0011883a 	mov	r8,zero
    c2c0:	003eee06 	br	be7c <__alt_data_end+0xfffb674c>
    c2c4:	00800404 	movi	r2,16
    c2c8:	1007883a 	mov	r3,r2
    c2cc:	003ea606 	br	bd68 <__alt_data_end+0xfffb6638>
    c2d0:	00800404 	movi	r2,16
    c2d4:	1007883a 	mov	r3,r2
    c2d8:	003f0106 	br	bee0 <__alt_data_end+0xfffb67b0>
    c2dc:	0005883a 	mov	r2,zero
    c2e0:	0007883a 	mov	r3,zero
    c2e4:	003efe06 	br	bee0 <__alt_data_end+0xfffb67b0>
    c2e8:	0005883a 	mov	r2,zero
    c2ec:	0007883a 	mov	r3,zero
    c2f0:	003e9d06 	br	bd68 <__alt_data_end+0xfffb6638>
    c2f4:	0007883a 	mov	r3,zero
    c2f8:	00800044 	movi	r2,1
    c2fc:	003f3706 	br	bfdc <__alt_data_end+0xfffb68ac>
    c300:	80bf832e 	bgeu	r16,r2,c110 <__alt_data_end+0xfffb69e0>
    c304:	8c7fff84 	addi	r17,r17,-2
    c308:	8721883a 	add	r16,r16,fp
    c30c:	003f8106 	br	c114 <__alt_data_end+0xfffb69e4>
    c310:	48bf6a2e 	bgeu	r9,r2,c0bc <__alt_data_end+0xfffb698c>
    c314:	a53fff84 	addi	r20,r20,-2
    c318:	4f13883a 	add	r9,r9,fp
    c31c:	003f6806 	br	c0c0 <__alt_data_end+0xfffb6990>
    c320:	1827883a 	mov	r19,r3
    c324:	003fd106 	br	c26c <__alt_data_end+0xfffb6b3c>
    c328:	182f883a 	mov	r23,r3
    c32c:	003fb906 	br	c214 <__alt_data_end+0xfffb6ae4>
    c330:	843fff84 	addi	r16,r16,-2
    c334:	348d883a 	add	r6,r6,r18
    c338:	003f0c06 	br	bf6c <__alt_data_end+0xfffb683c>
    c33c:	843fff84 	addi	r16,r16,-2
    c340:	1c87883a 	add	r3,r3,r18
    c344:	003eac06 	br	bdf8 <__alt_data_end+0xfffb66c8>

0000c348 <__umoddi3>:
    c348:	defff404 	addi	sp,sp,-48
    c34c:	dd800815 	stw	r22,32(sp)
    c350:	dc400315 	stw	r17,12(sp)
    c354:	dc000215 	stw	r16,8(sp)
    c358:	dfc00b15 	stw	ra,44(sp)
    c35c:	df000a15 	stw	fp,40(sp)
    c360:	ddc00915 	stw	r23,36(sp)
    c364:	dd400715 	stw	r21,28(sp)
    c368:	dd000615 	stw	r20,24(sp)
    c36c:	dcc00515 	stw	r19,20(sp)
    c370:	dc800415 	stw	r18,16(sp)
    c374:	2021883a 	mov	r16,r4
    c378:	2823883a 	mov	r17,r5
    c37c:	282d883a 	mov	r22,r5
    c380:	38003c1e 	bne	r7,zero,c474 <__umoddi3+0x12c>
    c384:	3027883a 	mov	r19,r6
    c388:	2029883a 	mov	r20,r4
    c38c:	2980522e 	bgeu	r5,r6,c4d8 <__umoddi3+0x190>
    c390:	00bfffd4 	movui	r2,65535
    c394:	1180a436 	bltu	r2,r6,c628 <__umoddi3+0x2e0>
    c398:	00803fc4 	movi	r2,255
    c39c:	11815e2e 	bgeu	r2,r6,c918 <__umoddi3+0x5d0>
    c3a0:	01400204 	movi	r5,8
    c3a4:	2805883a 	mov	r2,r5
    c3a8:	314ad83a 	srl	r5,r6,r5
    c3ac:	00c00074 	movhi	r3,1
    c3b0:	18c91e04 	addi	r3,r3,9336
    c3b4:	194b883a 	add	r5,r3,r5
    c3b8:	29000003 	ldbu	r4,0(r5)
    c3bc:	2089883a 	add	r4,r4,r2
    c3c0:	00800804 	movi	r2,32
    c3c4:	1105c83a 	sub	r2,r2,r4
    c3c8:	10010c26 	beq	r2,zero,c7fc <__umoddi3+0x4b4>
    c3cc:	88a2983a 	sll	r17,r17,r2
    c3d0:	8108d83a 	srl	r4,r16,r4
    c3d4:	30a6983a 	sll	r19,r6,r2
    c3d8:	80a8983a 	sll	r20,r16,r2
    c3dc:	1025883a 	mov	r18,r2
    c3e0:	892cb03a 	or	r22,r17,r4
    c3e4:	9822d43a 	srli	r17,r19,16
    c3e8:	b009883a 	mov	r4,r22
    c3ec:	9d7fffcc 	andi	r21,r19,65535
    c3f0:	880b883a 	mov	r5,r17
    c3f4:	000ca880 	call	ca88 <__umodsi3>
    c3f8:	b009883a 	mov	r4,r22
    c3fc:	880b883a 	mov	r5,r17
    c400:	102f883a 	mov	r23,r2
    c404:	000ca800 	call	ca80 <__udivsi3>
    c408:	1009883a 	mov	r4,r2
    c40c:	a80b883a 	mov	r5,r21
    c410:	000ca900 	call	ca90 <__mulsi3>
    c414:	b82e943a 	slli	r23,r23,16
    c418:	a008d43a 	srli	r4,r20,16
    c41c:	b906b03a 	or	r3,r23,r4
    c420:	1880042e 	bgeu	r3,r2,c434 <__umoddi3+0xec>
    c424:	1cc7883a 	add	r3,r3,r19
    c428:	1cc00236 	bltu	r3,r19,c434 <__umoddi3+0xec>
    c42c:	1880012e 	bgeu	r3,r2,c434 <__umoddi3+0xec>
    c430:	1cc7883a 	add	r3,r3,r19
    c434:	18a1c83a 	sub	r16,r3,r2
    c438:	8009883a 	mov	r4,r16
    c43c:	880b883a 	mov	r5,r17
    c440:	000ca880 	call	ca88 <__umodsi3>
    c444:	8009883a 	mov	r4,r16
    c448:	880b883a 	mov	r5,r17
    c44c:	102d883a 	mov	r22,r2
    c450:	000ca800 	call	ca80 <__udivsi3>
    c454:	1009883a 	mov	r4,r2
    c458:	a80b883a 	mov	r5,r21
    c45c:	b02c943a 	slli	r22,r22,16
    c460:	000ca900 	call	ca90 <__mulsi3>
    c464:	a13fffcc 	andi	r4,r20,65535
    c468:	b106b03a 	or	r3,r22,r4
    c46c:	1880572e 	bgeu	r3,r2,c5cc <__umoddi3+0x284>
    c470:	00005206 	br	c5bc <__umoddi3+0x274>
    c474:	29c05936 	bltu	r5,r7,c5dc <__umoddi3+0x294>
    c478:	00bfffd4 	movui	r2,65535
    c47c:	11c0652e 	bgeu	r2,r7,c614 <__umoddi3+0x2cc>
    c480:	00804034 	movhi	r2,256
    c484:	10bfffc4 	addi	r2,r2,-1
    c488:	11c1172e 	bgeu	r2,r7,c8e8 <__umoddi3+0x5a0>
    c48c:	01400604 	movi	r5,24
    c490:	282b883a 	mov	r21,r5
    c494:	394ad83a 	srl	r5,r7,r5
    c498:	00c00074 	movhi	r3,1
    c49c:	18c91e04 	addi	r3,r3,9336
    c4a0:	194b883a 	add	r5,r3,r5
    c4a4:	28800003 	ldbu	r2,0(r5)
    c4a8:	00c00804 	movi	r3,32
    c4ac:	156b883a 	add	r21,r2,r21
    c4b0:	1d69c83a 	sub	r20,r3,r21
    c4b4:	a000671e 	bne	r20,zero,c654 <__umoddi3+0x30c>
    c4b8:	3c400136 	bltu	r7,r17,c4c0 <__umoddi3+0x178>
    c4bc:	81812336 	bltu	r16,r6,c94c <__umoddi3+0x604>
    c4c0:	8185c83a 	sub	r2,r16,r6
    c4c4:	89e3c83a 	sub	r17,r17,r7
    c4c8:	8087803a 	cmpltu	r3,r16,r2
    c4cc:	88edc83a 	sub	r22,r17,r3
    c4d0:	b007883a 	mov	r3,r22
    c4d4:	00004306 	br	c5e4 <__umoddi3+0x29c>
    c4d8:	3000041e 	bne	r6,zero,c4ec <__umoddi3+0x1a4>
    c4dc:	01000044 	movi	r4,1
    c4e0:	000b883a 	mov	r5,zero
    c4e4:	000ca800 	call	ca80 <__udivsi3>
    c4e8:	1027883a 	mov	r19,r2
    c4ec:	00bfffd4 	movui	r2,65535
    c4f0:	14c0532e 	bgeu	r2,r19,c640 <__umoddi3+0x2f8>
    c4f4:	00804034 	movhi	r2,256
    c4f8:	10bfffc4 	addi	r2,r2,-1
    c4fc:	14c1032e 	bgeu	r2,r19,c90c <__umoddi3+0x5c4>
    c500:	00800604 	movi	r2,24
    c504:	1007883a 	mov	r3,r2
    c508:	9884d83a 	srl	r2,r19,r2
    c50c:	01000074 	movhi	r4,1
    c510:	21091e04 	addi	r4,r4,9336
    c514:	2085883a 	add	r2,r4,r2
    c518:	11000003 	ldbu	r4,0(r2)
    c51c:	00800804 	movi	r2,32
    c520:	20c7883a 	add	r3,r4,r3
    c524:	10c5c83a 	sub	r2,r2,r3
    c528:	1000b61e 	bne	r2,zero,c804 <__umoddi3+0x4bc>
    c52c:	982ad43a 	srli	r21,r19,16
    c530:	8ce3c83a 	sub	r17,r17,r19
    c534:	9dbfffcc 	andi	r22,r19,65535
    c538:	0025883a 	mov	r18,zero
    c53c:	8809883a 	mov	r4,r17
    c540:	a80b883a 	mov	r5,r21
    c544:	000ca880 	call	ca88 <__umodsi3>
    c548:	8809883a 	mov	r4,r17
    c54c:	a80b883a 	mov	r5,r21
    c550:	102f883a 	mov	r23,r2
    c554:	000ca800 	call	ca80 <__udivsi3>
    c558:	1009883a 	mov	r4,r2
    c55c:	b00b883a 	mov	r5,r22
    c560:	000ca900 	call	ca90 <__mulsi3>
    c564:	b82e943a 	slli	r23,r23,16
    c568:	a008d43a 	srli	r4,r20,16
    c56c:	b906b03a 	or	r3,r23,r4
    c570:	1880032e 	bgeu	r3,r2,c580 <__umoddi3+0x238>
    c574:	1cc7883a 	add	r3,r3,r19
    c578:	1cc00136 	bltu	r3,r19,c580 <__umoddi3+0x238>
    c57c:	1880f136 	bltu	r3,r2,c944 <__umoddi3+0x5fc>
    c580:	18a1c83a 	sub	r16,r3,r2
    c584:	8009883a 	mov	r4,r16
    c588:	a80b883a 	mov	r5,r21
    c58c:	000ca880 	call	ca88 <__umodsi3>
    c590:	8009883a 	mov	r4,r16
    c594:	a80b883a 	mov	r5,r21
    c598:	1023883a 	mov	r17,r2
    c59c:	000ca800 	call	ca80 <__udivsi3>
    c5a0:	1009883a 	mov	r4,r2
    c5a4:	b00b883a 	mov	r5,r22
    c5a8:	8822943a 	slli	r17,r17,16
    c5ac:	000ca900 	call	ca90 <__mulsi3>
    c5b0:	a13fffcc 	andi	r4,r20,65535
    c5b4:	8906b03a 	or	r3,r17,r4
    c5b8:	1880042e 	bgeu	r3,r2,c5cc <__umoddi3+0x284>
    c5bc:	1cc7883a 	add	r3,r3,r19
    c5c0:	1cc00236 	bltu	r3,r19,c5cc <__umoddi3+0x284>
    c5c4:	1880012e 	bgeu	r3,r2,c5cc <__umoddi3+0x284>
    c5c8:	1cc7883a 	add	r3,r3,r19
    c5cc:	1887c83a 	sub	r3,r3,r2
    c5d0:	1c84d83a 	srl	r2,r3,r18
    c5d4:	0007883a 	mov	r3,zero
    c5d8:	00000206 	br	c5e4 <__umoddi3+0x29c>
    c5dc:	2005883a 	mov	r2,r4
    c5e0:	2807883a 	mov	r3,r5
    c5e4:	dfc00b17 	ldw	ra,44(sp)
    c5e8:	df000a17 	ldw	fp,40(sp)
    c5ec:	ddc00917 	ldw	r23,36(sp)
    c5f0:	dd800817 	ldw	r22,32(sp)
    c5f4:	dd400717 	ldw	r21,28(sp)
    c5f8:	dd000617 	ldw	r20,24(sp)
    c5fc:	dcc00517 	ldw	r19,20(sp)
    c600:	dc800417 	ldw	r18,16(sp)
    c604:	dc400317 	ldw	r17,12(sp)
    c608:	dc000217 	ldw	r16,8(sp)
    c60c:	dec00c04 	addi	sp,sp,48
    c610:	f800283a 	ret
    c614:	00803fc4 	movi	r2,255
    c618:	11c0b02e 	bgeu	r2,r7,c8dc <__umoddi3+0x594>
    c61c:	01400204 	movi	r5,8
    c620:	282b883a 	mov	r21,r5
    c624:	003f9b06 	br	c494 <__alt_data_end+0xfffb6d64>
    c628:	00804034 	movhi	r2,256
    c62c:	10bfffc4 	addi	r2,r2,-1
    c630:	1180b02e 	bgeu	r2,r6,c8f4 <__umoddi3+0x5ac>
    c634:	01400604 	movi	r5,24
    c638:	2805883a 	mov	r2,r5
    c63c:	003f5a06 	br	c3a8 <__alt_data_end+0xfffb6c78>
    c640:	00803fc4 	movi	r2,255
    c644:	14c0ae2e 	bgeu	r2,r19,c900 <__umoddi3+0x5b8>
    c648:	00800204 	movi	r2,8
    c64c:	1007883a 	mov	r3,r2
    c650:	003fad06 	br	c508 <__alt_data_end+0xfffb6dd8>
    c654:	3d0a983a 	sll	r5,r7,r20
    c658:	356cd83a 	srl	r22,r6,r21
    c65c:	8d78d83a 	srl	fp,r17,r21
    c660:	8d10983a 	sll	r8,r17,r20
    c664:	2dacb03a 	or	r22,r5,r22
    c668:	b02ed43a 	srli	r23,r22,16
    c66c:	8564d83a 	srl	r18,r16,r21
    c670:	e009883a 	mov	r4,fp
    c674:	b80b883a 	mov	r5,r23
    c678:	44a4b03a 	or	r18,r8,r18
    c67c:	3526983a 	sll	r19,r6,r20
    c680:	000ca880 	call	ca88 <__umodsi3>
    c684:	e009883a 	mov	r4,fp
    c688:	b80b883a 	mov	r5,r23
    c68c:	b47fffcc 	andi	r17,r22,65535
    c690:	d8800015 	stw	r2,0(sp)
    c694:	000ca800 	call	ca80 <__udivsi3>
    c698:	1009883a 	mov	r4,r2
    c69c:	880b883a 	mov	r5,r17
    c6a0:	1039883a 	mov	fp,r2
    c6a4:	000ca900 	call	ca90 <__mulsi3>
    c6a8:	d9800017 	ldw	r6,0(sp)
    c6ac:	9008d43a 	srli	r4,r18,16
    c6b0:	8520983a 	sll	r16,r16,r20
    c6b4:	300c943a 	slli	r6,r6,16
    c6b8:	3106b03a 	or	r3,r6,r4
    c6bc:	1880042e 	bgeu	r3,r2,c6d0 <__umoddi3+0x388>
    c6c0:	1d87883a 	add	r3,r3,r22
    c6c4:	e13fffc4 	addi	r4,fp,-1
    c6c8:	1d809a2e 	bgeu	r3,r22,c934 <__umoddi3+0x5ec>
    c6cc:	2039883a 	mov	fp,r4
    c6d0:	1887c83a 	sub	r3,r3,r2
    c6d4:	1809883a 	mov	r4,r3
    c6d8:	b80b883a 	mov	r5,r23
    c6dc:	d8c00115 	stw	r3,4(sp)
    c6e0:	000ca880 	call	ca88 <__umodsi3>
    c6e4:	d8c00117 	ldw	r3,4(sp)
    c6e8:	b80b883a 	mov	r5,r23
    c6ec:	d8800015 	stw	r2,0(sp)
    c6f0:	1809883a 	mov	r4,r3
    c6f4:	000ca800 	call	ca80 <__udivsi3>
    c6f8:	880b883a 	mov	r5,r17
    c6fc:	1009883a 	mov	r4,r2
    c700:	102f883a 	mov	r23,r2
    c704:	000ca900 	call	ca90 <__mulsi3>
    c708:	d9800017 	ldw	r6,0(sp)
    c70c:	947fffcc 	andi	r17,r18,65535
    c710:	300c943a 	slli	r6,r6,16
    c714:	3464b03a 	or	r18,r6,r17
    c718:	9080042e 	bgeu	r18,r2,c72c <__umoddi3+0x3e4>
    c71c:	95a5883a 	add	r18,r18,r22
    c720:	b8ffffc4 	addi	r3,r23,-1
    c724:	95807f2e 	bgeu	r18,r22,c924 <__umoddi3+0x5dc>
    c728:	182f883a 	mov	r23,r3
    c72c:	e038943a 	slli	fp,fp,16
    c730:	980cd43a 	srli	r6,r19,16
    c734:	98ffffcc 	andi	r3,r19,65535
    c738:	bf38b03a 	or	fp,r23,fp
    c73c:	e02ed43a 	srli	r23,fp,16
    c740:	e73fffcc 	andi	fp,fp,65535
    c744:	180b883a 	mov	r5,r3
    c748:	e009883a 	mov	r4,fp
    c74c:	d9800015 	stw	r6,0(sp)
    c750:	d8c00115 	stw	r3,4(sp)
    c754:	90a5c83a 	sub	r18,r18,r2
    c758:	000ca900 	call	ca90 <__mulsi3>
    c75c:	d8c00117 	ldw	r3,4(sp)
    c760:	b809883a 	mov	r4,r23
    c764:	1023883a 	mov	r17,r2
    c768:	180b883a 	mov	r5,r3
    c76c:	000ca900 	call	ca90 <__mulsi3>
    c770:	d9800017 	ldw	r6,0(sp)
    c774:	b809883a 	mov	r4,r23
    c778:	d8800115 	stw	r2,4(sp)
    c77c:	300b883a 	mov	r5,r6
    c780:	302f883a 	mov	r23,r6
    c784:	000ca900 	call	ca90 <__mulsi3>
    c788:	e009883a 	mov	r4,fp
    c78c:	b80b883a 	mov	r5,r23
    c790:	d8800015 	stw	r2,0(sp)
    c794:	000ca900 	call	ca90 <__mulsi3>
    c798:	d8c00117 	ldw	r3,4(sp)
    c79c:	880cd43a 	srli	r6,r17,16
    c7a0:	d9c00017 	ldw	r7,0(sp)
    c7a4:	1885883a 	add	r2,r3,r2
    c7a8:	118d883a 	add	r6,r2,r6
    c7ac:	30c0022e 	bgeu	r6,r3,c7b8 <__umoddi3+0x470>
    c7b0:	00800074 	movhi	r2,1
    c7b4:	388f883a 	add	r7,r7,r2
    c7b8:	3006d43a 	srli	r3,r6,16
    c7bc:	300c943a 	slli	r6,r6,16
    c7c0:	8c7fffcc 	andi	r17,r17,65535
    c7c4:	38c7883a 	add	r3,r7,r3
    c7c8:	3463883a 	add	r17,r6,r17
    c7cc:	90c03d36 	bltu	r18,r3,c8c4 <__umoddi3+0x57c>
    c7d0:	90c06026 	beq	r18,r3,c954 <__umoddi3+0x60c>
    c7d4:	90c9c83a 	sub	r4,r18,r3
    c7d8:	880f883a 	mov	r7,r17
    c7dc:	81cfc83a 	sub	r7,r16,r7
    c7e0:	81c7803a 	cmpltu	r3,r16,r7
    c7e4:	20c7c83a 	sub	r3,r4,r3
    c7e8:	1d44983a 	sll	r2,r3,r21
    c7ec:	3d0ed83a 	srl	r7,r7,r20
    c7f0:	1d06d83a 	srl	r3,r3,r20
    c7f4:	11c4b03a 	or	r2,r2,r7
    c7f8:	003f7a06 	br	c5e4 <__alt_data_end+0xfffb6eb4>
    c7fc:	0025883a 	mov	r18,zero
    c800:	003ef806 	br	c3e4 <__alt_data_end+0xfffb6cb4>
    c804:	98a6983a 	sll	r19,r19,r2
    c808:	88e8d83a 	srl	r20,r17,r3
    c80c:	80c6d83a 	srl	r3,r16,r3
    c810:	982ad43a 	srli	r21,r19,16
    c814:	88a2983a 	sll	r17,r17,r2
    c818:	a009883a 	mov	r4,r20
    c81c:	a80b883a 	mov	r5,r21
    c820:	88eeb03a 	or	r23,r17,r3
    c824:	1025883a 	mov	r18,r2
    c828:	000ca880 	call	ca88 <__umodsi3>
    c82c:	a009883a 	mov	r4,r20
    c830:	a80b883a 	mov	r5,r21
    c834:	1023883a 	mov	r17,r2
    c838:	9dbfffcc 	andi	r22,r19,65535
    c83c:	000ca800 	call	ca80 <__udivsi3>
    c840:	1009883a 	mov	r4,r2
    c844:	b00b883a 	mov	r5,r22
    c848:	000ca900 	call	ca90 <__mulsi3>
    c84c:	8822943a 	slli	r17,r17,16
    c850:	b808d43a 	srli	r4,r23,16
    c854:	84a8983a 	sll	r20,r16,r18
    c858:	8906b03a 	or	r3,r17,r4
    c85c:	1880042e 	bgeu	r3,r2,c870 <__umoddi3+0x528>
    c860:	1cc7883a 	add	r3,r3,r19
    c864:	1cc00236 	bltu	r3,r19,c870 <__umoddi3+0x528>
    c868:	1880012e 	bgeu	r3,r2,c870 <__umoddi3+0x528>
    c86c:	1cc7883a 	add	r3,r3,r19
    c870:	18a1c83a 	sub	r16,r3,r2
    c874:	8009883a 	mov	r4,r16
    c878:	a80b883a 	mov	r5,r21
    c87c:	000ca880 	call	ca88 <__umodsi3>
    c880:	8009883a 	mov	r4,r16
    c884:	a80b883a 	mov	r5,r21
    c888:	1039883a 	mov	fp,r2
    c88c:	000ca800 	call	ca80 <__udivsi3>
    c890:	1009883a 	mov	r4,r2
    c894:	b00b883a 	mov	r5,r22
    c898:	000ca900 	call	ca90 <__mulsi3>
    c89c:	e006943a 	slli	r3,fp,16
    c8a0:	b93fffcc 	andi	r4,r23,65535
    c8a4:	1906b03a 	or	r3,r3,r4
    c8a8:	1880042e 	bgeu	r3,r2,c8bc <__umoddi3+0x574>
    c8ac:	1cc7883a 	add	r3,r3,r19
    c8b0:	1cc00236 	bltu	r3,r19,c8bc <__umoddi3+0x574>
    c8b4:	1880012e 	bgeu	r3,r2,c8bc <__umoddi3+0x574>
    c8b8:	1cc7883a 	add	r3,r3,r19
    c8bc:	18a3c83a 	sub	r17,r3,r2
    c8c0:	003f1e06 	br	c53c <__alt_data_end+0xfffb6e0c>
    c8c4:	8ccfc83a 	sub	r7,r17,r19
    c8c8:	1d89c83a 	sub	r4,r3,r22
    c8cc:	89e3803a 	cmpltu	r17,r17,r7
    c8d0:	2463c83a 	sub	r17,r4,r17
    c8d4:	9449c83a 	sub	r4,r18,r17
    c8d8:	003fc006 	br	c7dc <__alt_data_end+0xfffb70ac>
    c8dc:	000b883a 	mov	r5,zero
    c8e0:	002b883a 	mov	r21,zero
    c8e4:	003eeb06 	br	c494 <__alt_data_end+0xfffb6d64>
    c8e8:	01400404 	movi	r5,16
    c8ec:	282b883a 	mov	r21,r5
    c8f0:	003ee806 	br	c494 <__alt_data_end+0xfffb6d64>
    c8f4:	01400404 	movi	r5,16
    c8f8:	2805883a 	mov	r2,r5
    c8fc:	003eaa06 	br	c3a8 <__alt_data_end+0xfffb6c78>
    c900:	0005883a 	mov	r2,zero
    c904:	0007883a 	mov	r3,zero
    c908:	003eff06 	br	c508 <__alt_data_end+0xfffb6dd8>
    c90c:	00800404 	movi	r2,16
    c910:	1007883a 	mov	r3,r2
    c914:	003efc06 	br	c508 <__alt_data_end+0xfffb6dd8>
    c918:	000b883a 	mov	r5,zero
    c91c:	0005883a 	mov	r2,zero
    c920:	003ea106 	br	c3a8 <__alt_data_end+0xfffb6c78>
    c924:	90bf802e 	bgeu	r18,r2,c728 <__alt_data_end+0xfffb6ff8>
    c928:	bdffff84 	addi	r23,r23,-2
    c92c:	95a5883a 	add	r18,r18,r22
    c930:	003f7e06 	br	c72c <__alt_data_end+0xfffb6ffc>
    c934:	18bf652e 	bgeu	r3,r2,c6cc <__alt_data_end+0xfffb6f9c>
    c938:	e73fff84 	addi	fp,fp,-2
    c93c:	1d87883a 	add	r3,r3,r22
    c940:	003f6306 	br	c6d0 <__alt_data_end+0xfffb6fa0>
    c944:	1cc7883a 	add	r3,r3,r19
    c948:	003f0d06 	br	c580 <__alt_data_end+0xfffb6e50>
    c94c:	8005883a 	mov	r2,r16
    c950:	003edf06 	br	c4d0 <__alt_data_end+0xfffb6da0>
    c954:	847fdb36 	bltu	r16,r17,c8c4 <__alt_data_end+0xfffb7194>
    c958:	880f883a 	mov	r7,r17
    c95c:	0009883a 	mov	r4,zero
    c960:	003f9e06 	br	c7dc <__alt_data_end+0xfffb70ac>

0000c964 <udivmodsi4>:
    c964:	2900182e 	bgeu	r5,r4,c9c8 <udivmodsi4+0x64>
    c968:	28001716 	blt	r5,zero,c9c8 <udivmodsi4+0x64>
    c96c:	00800804 	movi	r2,32
    c970:	00c00044 	movi	r3,1
    c974:	00000206 	br	c980 <udivmodsi4+0x1c>
    c978:	10001126 	beq	r2,zero,c9c0 <udivmodsi4+0x5c>
    c97c:	28000516 	blt	r5,zero,c994 <udivmodsi4+0x30>
    c980:	294b883a 	add	r5,r5,r5
    c984:	10bfffc4 	addi	r2,r2,-1
    c988:	18c7883a 	add	r3,r3,r3
    c98c:	293ffa36 	bltu	r5,r4,c978 <__alt_data_end+0xfffb7248>
    c990:	18000b26 	beq	r3,zero,c9c0 <udivmodsi4+0x5c>
    c994:	0005883a 	mov	r2,zero
    c998:	21400236 	bltu	r4,r5,c9a4 <udivmodsi4+0x40>
    c99c:	2149c83a 	sub	r4,r4,r5
    c9a0:	10c4b03a 	or	r2,r2,r3
    c9a4:	1806d07a 	srli	r3,r3,1
    c9a8:	280ad07a 	srli	r5,r5,1
    c9ac:	183ffa1e 	bne	r3,zero,c998 <__alt_data_end+0xfffb7268>
    c9b0:	3000011e 	bne	r6,zero,c9b8 <udivmodsi4+0x54>
    c9b4:	f800283a 	ret
    c9b8:	2005883a 	mov	r2,r4
    c9bc:	f800283a 	ret
    c9c0:	0005883a 	mov	r2,zero
    c9c4:	003ffa06 	br	c9b0 <__alt_data_end+0xfffb7280>
    c9c8:	00c00044 	movi	r3,1
    c9cc:	003ff106 	br	c994 <__alt_data_end+0xfffb7264>

0000c9d0 <__divsi3>:
    c9d0:	defffe04 	addi	sp,sp,-8
    c9d4:	dfc00115 	stw	ra,4(sp)
    c9d8:	dc000015 	stw	r16,0(sp)
    c9dc:	20000b16 	blt	r4,zero,ca0c <__divsi3+0x3c>
    c9e0:	0021883a 	mov	r16,zero
    c9e4:	28000c16 	blt	r5,zero,ca18 <__divsi3+0x48>
    c9e8:	000d883a 	mov	r6,zero
    c9ec:	000c9640 	call	c964 <udivmodsi4>
    c9f0:	0407c83a 	sub	r3,zero,r16
    c9f4:	1884f03a 	xor	r2,r3,r2
    c9f8:	1405883a 	add	r2,r2,r16
    c9fc:	dfc00117 	ldw	ra,4(sp)
    ca00:	dc000017 	ldw	r16,0(sp)
    ca04:	dec00204 	addi	sp,sp,8
    ca08:	f800283a 	ret
    ca0c:	0109c83a 	sub	r4,zero,r4
    ca10:	04000044 	movi	r16,1
    ca14:	283ff40e 	bge	r5,zero,c9e8 <__alt_data_end+0xfffb72b8>
    ca18:	014bc83a 	sub	r5,zero,r5
    ca1c:	8400005c 	xori	r16,r16,1
    ca20:	003ff106 	br	c9e8 <__alt_data_end+0xfffb72b8>

0000ca24 <__modsi3>:
    ca24:	defffd04 	addi	sp,sp,-12
    ca28:	dfc00215 	stw	ra,8(sp)
    ca2c:	dc400115 	stw	r17,4(sp)
    ca30:	dc000015 	stw	r16,0(sp)
    ca34:	20000c16 	blt	r4,zero,ca68 <__modsi3+0x44>
    ca38:	0023883a 	mov	r17,zero
    ca3c:	0021883a 	mov	r16,zero
    ca40:	28000d16 	blt	r5,zero,ca78 <__modsi3+0x54>
    ca44:	01800044 	movi	r6,1
    ca48:	000c9640 	call	c964 <udivmodsi4>
    ca4c:	1404f03a 	xor	r2,r2,r16
    ca50:	8885883a 	add	r2,r17,r2
    ca54:	dfc00217 	ldw	ra,8(sp)
    ca58:	dc400117 	ldw	r17,4(sp)
    ca5c:	dc000017 	ldw	r16,0(sp)
    ca60:	dec00304 	addi	sp,sp,12
    ca64:	f800283a 	ret
    ca68:	0109c83a 	sub	r4,zero,r4
    ca6c:	04400044 	movi	r17,1
    ca70:	043fffc4 	movi	r16,-1
    ca74:	283ff30e 	bge	r5,zero,ca44 <__alt_data_end+0xfffb7314>
    ca78:	014bc83a 	sub	r5,zero,r5
    ca7c:	003ff106 	br	ca44 <__alt_data_end+0xfffb7314>

0000ca80 <__udivsi3>:
    ca80:	000d883a 	mov	r6,zero
    ca84:	000c9641 	jmpi	c964 <udivmodsi4>

0000ca88 <__umodsi3>:
    ca88:	01800044 	movi	r6,1
    ca8c:	000c9641 	jmpi	c964 <udivmodsi4>

0000ca90 <__mulsi3>:
    ca90:	0005883a 	mov	r2,zero
    ca94:	20000726 	beq	r4,zero,cab4 <__mulsi3+0x24>
    ca98:	20c0004c 	andi	r3,r4,1
    ca9c:	2008d07a 	srli	r4,r4,1
    caa0:	18000126 	beq	r3,zero,caa8 <__mulsi3+0x18>
    caa4:	1145883a 	add	r2,r2,r5
    caa8:	294b883a 	add	r5,r5,r5
    caac:	203ffa1e 	bne	r4,zero,ca98 <__alt_data_end+0xfffb7368>
    cab0:	f800283a 	ret
    cab4:	f800283a 	ret

0000cab8 <__adddf3>:
    cab8:	02000434 	movhi	r8,16
    cabc:	423fffc4 	addi	r8,r8,-1
    cac0:	defffb04 	addi	sp,sp,-20
    cac4:	2a12703a 	and	r9,r5,r8
    cac8:	2806d7fa 	srli	r3,r5,31
    cacc:	3a10703a 	and	r8,r7,r8
    cad0:	3804d53a 	srli	r2,r7,20
    cad4:	3014d77a 	srli	r10,r6,29
    cad8:	dc000015 	stw	r16,0(sp)
    cadc:	481290fa 	slli	r9,r9,3
    cae0:	2820d53a 	srli	r16,r5,20
    cae4:	401090fa 	slli	r8,r8,3
    cae8:	200ad77a 	srli	r5,r4,29
    caec:	380ed7fa 	srli	r7,r7,31
    caf0:	dc800215 	stw	r18,8(sp)
    caf4:	dc400115 	stw	r17,4(sp)
    caf8:	dfc00415 	stw	ra,16(sp)
    cafc:	dcc00315 	stw	r19,12(sp)
    cb00:	1c803fcc 	andi	r18,r3,255
    cb04:	8401ffcc 	andi	r16,r16,2047
    cb08:	494ab03a 	or	r5,r9,r5
    cb0c:	202290fa 	slli	r17,r4,3
    cb10:	1081ffcc 	andi	r2,r2,2047
    cb14:	4290b03a 	or	r8,r8,r10
    cb18:	300c90fa 	slli	r6,r6,3
    cb1c:	91c07026 	beq	r18,r7,cce0 <__adddf3+0x228>
    cb20:	8087c83a 	sub	r3,r16,r2
    cb24:	00c0b30e 	bge	zero,r3,cdf4 <__adddf3+0x33c>
    cb28:	10002a1e 	bne	r2,zero,cbd4 <__adddf3+0x11c>
    cb2c:	4184b03a 	or	r2,r8,r6
    cb30:	1000991e 	bne	r2,zero,cd98 <__adddf3+0x2e0>
    cb34:	888001cc 	andi	r2,r17,7
    cb38:	10005b26 	beq	r2,zero,cca8 <__adddf3+0x1f0>
    cb3c:	88c003cc 	andi	r3,r17,15
    cb40:	00800104 	movi	r2,4
    cb44:	18805826 	beq	r3,r2,cca8 <__adddf3+0x1f0>
    cb48:	89800104 	addi	r6,r17,4
    cb4c:	3463803a 	cmpltu	r17,r6,r17
    cb50:	2c4b883a 	add	r5,r5,r17
    cb54:	2880202c 	andhi	r2,r5,128
    cb58:	9007883a 	mov	r3,r18
    cb5c:	3023883a 	mov	r17,r6
    cb60:	10005426 	beq	r2,zero,ccb4 <__adddf3+0x1fc>
    cb64:	84000044 	addi	r16,r16,1
    cb68:	0081ffc4 	movi	r2,2047
    cb6c:	8080c126 	beq	r16,r2,ce74 <__adddf3+0x3bc>
    cb70:	013fe034 	movhi	r4,65408
    cb74:	213fffc4 	addi	r4,r4,-1
    cb78:	290a703a 	and	r5,r5,r4
    cb7c:	2804977a 	slli	r2,r5,29
    cb80:	280a927a 	slli	r5,r5,9
    cb84:	8822d0fa 	srli	r17,r17,3
    cb88:	8401ffcc 	andi	r16,r16,2047
    cb8c:	2808d33a 	srli	r4,r5,12
    cb90:	1444b03a 	or	r2,r2,r17
    cb94:	8401ffcc 	andi	r16,r16,2047
    cb98:	800a953a 	slli	r5,r16,20
    cb9c:	18c03fcc 	andi	r3,r3,255
    cba0:	04000434 	movhi	r16,16
    cba4:	180697fa 	slli	r3,r3,31
    cba8:	843fffc4 	addi	r16,r16,-1
    cbac:	2420703a 	and	r16,r4,r16
    cbb0:	8160b03a 	or	r16,r16,r5
    cbb4:	80c6b03a 	or	r3,r16,r3
    cbb8:	dfc00417 	ldw	ra,16(sp)
    cbbc:	dcc00317 	ldw	r19,12(sp)
    cbc0:	dc800217 	ldw	r18,8(sp)
    cbc4:	dc400117 	ldw	r17,4(sp)
    cbc8:	dc000017 	ldw	r16,0(sp)
    cbcc:	dec00504 	addi	sp,sp,20
    cbd0:	f800283a 	ret
    cbd4:	0081ffc4 	movi	r2,2047
    cbd8:	80bfd626 	beq	r16,r2,cb34 <__alt_data_end+0xfffb7404>
    cbdc:	42002034 	orhi	r8,r8,128
    cbe0:	00800e04 	movi	r2,56
    cbe4:	10c0a616 	blt	r2,r3,ce80 <__adddf3+0x3c8>
    cbe8:	008007c4 	movi	r2,31
    cbec:	10c0c916 	blt	r2,r3,cf14 <__adddf3+0x45c>
    cbf0:	00800804 	movi	r2,32
    cbf4:	10c5c83a 	sub	r2,r2,r3
    cbf8:	408e983a 	sll	r7,r8,r2
    cbfc:	30c8d83a 	srl	r4,r6,r3
    cc00:	3084983a 	sll	r2,r6,r2
    cc04:	40c6d83a 	srl	r3,r8,r3
    cc08:	390cb03a 	or	r6,r7,r4
    cc0c:	1004c03a 	cmpne	r2,r2,zero
    cc10:	308cb03a 	or	r6,r6,r2
    cc14:	898dc83a 	sub	r6,r17,r6
    cc18:	89a3803a 	cmpltu	r17,r17,r6
    cc1c:	28cbc83a 	sub	r5,r5,r3
    cc20:	2c4bc83a 	sub	r5,r5,r17
    cc24:	3023883a 	mov	r17,r6
    cc28:	2880202c 	andhi	r2,r5,128
    cc2c:	10006d26 	beq	r2,zero,cde4 <__adddf3+0x32c>
    cc30:	04c02034 	movhi	r19,128
    cc34:	9cffffc4 	addi	r19,r19,-1
    cc38:	2ce6703a 	and	r19,r5,r19
    cc3c:	98007e26 	beq	r19,zero,ce38 <__adddf3+0x380>
    cc40:	9809883a 	mov	r4,r19
    cc44:	000f2500 	call	f250 <__clzsi2>
    cc48:	10fffe04 	addi	r3,r2,-8
    cc4c:	010007c4 	movi	r4,31
    cc50:	20c07f16 	blt	r4,r3,ce50 <__adddf3+0x398>
    cc54:	01400a04 	movi	r5,40
    cc58:	2885c83a 	sub	r2,r5,r2
    cc5c:	888ad83a 	srl	r5,r17,r2
    cc60:	98e6983a 	sll	r19,r19,r3
    cc64:	88e2983a 	sll	r17,r17,r3
    cc68:	2ce6b03a 	or	r19,r5,r19
    cc6c:	1c007c16 	blt	r3,r16,ce60 <__adddf3+0x3a8>
    cc70:	1c21c83a 	sub	r16,r3,r16
    cc74:	81400044 	addi	r5,r16,1
    cc78:	00c007c4 	movi	r3,31
    cc7c:	19409816 	blt	r3,r5,cee0 <__adddf3+0x428>
    cc80:	1c21c83a 	sub	r16,r3,r16
    cc84:	8c08983a 	sll	r4,r17,r16
    cc88:	8946d83a 	srl	r3,r17,r5
    cc8c:	9c20983a 	sll	r16,r19,r16
    cc90:	2008c03a 	cmpne	r4,r4,zero
    cc94:	994ad83a 	srl	r5,r19,r5
    cc98:	1c06b03a 	or	r3,r3,r16
    cc9c:	1922b03a 	or	r17,r3,r4
    cca0:	0021883a 	mov	r16,zero
    cca4:	003fa306 	br	cb34 <__alt_data_end+0xfffb7404>
    cca8:	2880202c 	andhi	r2,r5,128
    ccac:	9007883a 	mov	r3,r18
    ccb0:	103fac1e 	bne	r2,zero,cb64 <__alt_data_end+0xfffb7434>
    ccb4:	2804977a 	slli	r2,r5,29
    ccb8:	8822d0fa 	srli	r17,r17,3
    ccbc:	0101ffc4 	movi	r4,2047
    ccc0:	280ad0fa 	srli	r5,r5,3
    ccc4:	1444b03a 	or	r2,r2,r17
    ccc8:	81002c26 	beq	r16,r4,cd7c <__adddf3+0x2c4>
    cccc:	8120703a 	and	r16,r16,r4
    ccd0:	01000434 	movhi	r4,16
    ccd4:	213fffc4 	addi	r4,r4,-1
    ccd8:	2908703a 	and	r4,r5,r4
    ccdc:	003fad06 	br	cb94 <__alt_data_end+0xfffb7464>
    cce0:	8089c83a 	sub	r4,r16,r2
    cce4:	01006a0e 	bge	zero,r4,ce90 <__adddf3+0x3d8>
    cce8:	10003326 	beq	r2,zero,cdb8 <__adddf3+0x300>
    ccec:	0081ffc4 	movi	r2,2047
    ccf0:	80bf9026 	beq	r16,r2,cb34 <__alt_data_end+0xfffb7404>
    ccf4:	42002034 	orhi	r8,r8,128
    ccf8:	00800e04 	movi	r2,56
    ccfc:	1100b116 	blt	r2,r4,cfc4 <__adddf3+0x50c>
    cd00:	008007c4 	movi	r2,31
    cd04:	1100e216 	blt	r2,r4,d090 <__adddf3+0x5d8>
    cd08:	00800804 	movi	r2,32
    cd0c:	1105c83a 	sub	r2,r2,r4
    cd10:	4092983a 	sll	r9,r8,r2
    cd14:	310ed83a 	srl	r7,r6,r4
    cd18:	3084983a 	sll	r2,r6,r2
    cd1c:	4110d83a 	srl	r8,r8,r4
    cd20:	49ccb03a 	or	r6,r9,r7
    cd24:	1004c03a 	cmpne	r2,r2,zero
    cd28:	308cb03a 	or	r6,r6,r2
    cd2c:	344d883a 	add	r6,r6,r17
    cd30:	3463803a 	cmpltu	r17,r6,r17
    cd34:	414b883a 	add	r5,r8,r5
    cd38:	2c4b883a 	add	r5,r5,r17
    cd3c:	3023883a 	mov	r17,r6
    cd40:	2880202c 	andhi	r2,r5,128
    cd44:	10002726 	beq	r2,zero,cde4 <__adddf3+0x32c>
    cd48:	84000044 	addi	r16,r16,1
    cd4c:	0081ffc4 	movi	r2,2047
    cd50:	8080ae26 	beq	r16,r2,d00c <__adddf3+0x554>
    cd54:	00bfe034 	movhi	r2,65408
    cd58:	10bfffc4 	addi	r2,r2,-1
    cd5c:	288a703a 	and	r5,r5,r2
    cd60:	880cd07a 	srli	r6,r17,1
    cd64:	280897fa 	slli	r4,r5,31
    cd68:	88c0004c 	andi	r3,r17,1
    cd6c:	30e2b03a 	or	r17,r6,r3
    cd70:	280ad07a 	srli	r5,r5,1
    cd74:	8922b03a 	or	r17,r17,r4
    cd78:	003f6e06 	br	cb34 <__alt_data_end+0xfffb7404>
    cd7c:	1148b03a 	or	r4,r2,r5
    cd80:	20003c26 	beq	r4,zero,ce74 <__adddf3+0x3bc>
    cd84:	29000234 	orhi	r4,r5,8
    cd88:	01400434 	movhi	r5,16
    cd8c:	297fffc4 	addi	r5,r5,-1
    cd90:	2148703a 	and	r4,r4,r5
    cd94:	003f7f06 	br	cb94 <__alt_data_end+0xfffb7464>
    cd98:	18ffffc4 	addi	r3,r3,-1
    cd9c:	18004d1e 	bne	r3,zero,ced4 <__adddf3+0x41c>
    cda0:	898dc83a 	sub	r6,r17,r6
    cda4:	89a3803a 	cmpltu	r17,r17,r6
    cda8:	2a0bc83a 	sub	r5,r5,r8
    cdac:	2c4bc83a 	sub	r5,r5,r17
    cdb0:	3023883a 	mov	r17,r6
    cdb4:	003f9c06 	br	cc28 <__alt_data_end+0xfffb74f8>
    cdb8:	4184b03a 	or	r2,r8,r6
    cdbc:	103f5d26 	beq	r2,zero,cb34 <__alt_data_end+0xfffb7404>
    cdc0:	213fffc4 	addi	r4,r4,-1
    cdc4:	203fd926 	beq	r4,zero,cd2c <__alt_data_end+0xfffb75fc>
    cdc8:	0081ffc4 	movi	r2,2047
    cdcc:	80bfca1e 	bne	r16,r2,ccf8 <__alt_data_end+0xfffb75c8>
    cdd0:	003f5806 	br	cb34 <__alt_data_end+0xfffb7404>
    cdd4:	10c8b03a 	or	r4,r2,r3
    cdd8:	20008b26 	beq	r4,zero,d008 <__adddf3+0x550>
    cddc:	100b883a 	mov	r5,r2
    cde0:	1823883a 	mov	r17,r3
    cde4:	888001cc 	andi	r2,r17,7
    cde8:	103f541e 	bne	r2,zero,cb3c <__alt_data_end+0xfffb740c>
    cdec:	9007883a 	mov	r3,r18
    cdf0:	003fb006 	br	ccb4 <__alt_data_end+0xfffb7584>
    cdf4:	1800531e 	bne	r3,zero,cf44 <__adddf3+0x48c>
    cdf8:	80800044 	addi	r2,r16,1
    cdfc:	1081ffcc 	andi	r2,r2,2047
    ce00:	00c00044 	movi	r3,1
    ce04:	1880990e 	bge	r3,r2,d06c <__adddf3+0x5b4>
    ce08:	8985c83a 	sub	r2,r17,r6
    ce0c:	8887803a 	cmpltu	r3,r17,r2
    ce10:	2a27c83a 	sub	r19,r5,r8
    ce14:	98e7c83a 	sub	r19,r19,r3
    ce18:	98c0202c 	andhi	r3,r19,128
    ce1c:	18006226 	beq	r3,zero,cfa8 <__adddf3+0x4f0>
    ce20:	3463c83a 	sub	r17,r6,r17
    ce24:	4151c83a 	sub	r8,r8,r5
    ce28:	344d803a 	cmpltu	r6,r6,r17
    ce2c:	41a7c83a 	sub	r19,r8,r6
    ce30:	3825883a 	mov	r18,r7
    ce34:	983f821e 	bne	r19,zero,cc40 <__alt_data_end+0xfffb7510>
    ce38:	8809883a 	mov	r4,r17
    ce3c:	000f2500 	call	f250 <__clzsi2>
    ce40:	10800804 	addi	r2,r2,32
    ce44:	10fffe04 	addi	r3,r2,-8
    ce48:	010007c4 	movi	r4,31
    ce4c:	20ff810e 	bge	r4,r3,cc54 <__alt_data_end+0xfffb7524>
    ce50:	14fff604 	addi	r19,r2,-40
    ce54:	8ce6983a 	sll	r19,r17,r19
    ce58:	0023883a 	mov	r17,zero
    ce5c:	1c3f840e 	bge	r3,r16,cc70 <__alt_data_end+0xfffb7540>
    ce60:	017fe034 	movhi	r5,65408
    ce64:	297fffc4 	addi	r5,r5,-1
    ce68:	80e1c83a 	sub	r16,r16,r3
    ce6c:	994a703a 	and	r5,r19,r5
    ce70:	003f3006 	br	cb34 <__alt_data_end+0xfffb7404>
    ce74:	0009883a 	mov	r4,zero
    ce78:	0005883a 	mov	r2,zero
    ce7c:	003f4506 	br	cb94 <__alt_data_end+0xfffb7464>
    ce80:	418cb03a 	or	r6,r8,r6
    ce84:	300cc03a 	cmpne	r6,r6,zero
    ce88:	0007883a 	mov	r3,zero
    ce8c:	003f6106 	br	cc14 <__alt_data_end+0xfffb74e4>
    ce90:	2000921e 	bne	r4,zero,d0dc <__adddf3+0x624>
    ce94:	80800044 	addi	r2,r16,1
    ce98:	11c1ffcc 	andi	r7,r2,2047
    ce9c:	01000044 	movi	r4,1
    cea0:	21c0610e 	bge	r4,r7,d028 <__adddf3+0x570>
    cea4:	0101ffc4 	movi	r4,2047
    cea8:	1100a326 	beq	r2,r4,d138 <__adddf3+0x680>
    ceac:	344d883a 	add	r6,r6,r17
    ceb0:	3463803a 	cmpltu	r17,r6,r17
    ceb4:	414b883a 	add	r5,r8,r5
    ceb8:	2c4b883a 	add	r5,r5,r17
    cebc:	282297fa 	slli	r17,r5,31
    cec0:	300cd07a 	srli	r6,r6,1
    cec4:	280ad07a 	srli	r5,r5,1
    cec8:	1021883a 	mov	r16,r2
    cecc:	89a2b03a 	or	r17,r17,r6
    ced0:	003f1806 	br	cb34 <__alt_data_end+0xfffb7404>
    ced4:	0081ffc4 	movi	r2,2047
    ced8:	80bf411e 	bne	r16,r2,cbe0 <__alt_data_end+0xfffb74b0>
    cedc:	003f1506 	br	cb34 <__alt_data_end+0xfffb7404>
    cee0:	80bff844 	addi	r2,r16,-31
    cee4:	00c00804 	movi	r3,32
    cee8:	9884d83a 	srl	r2,r19,r2
    ceec:	28c04a26 	beq	r5,r3,d018 <__adddf3+0x560>
    cef0:	00c00fc4 	movi	r3,63
    cef4:	1c21c83a 	sub	r16,r3,r16
    cef8:	9c26983a 	sll	r19,r19,r16
    cefc:	9c62b03a 	or	r17,r19,r17
    cf00:	8822c03a 	cmpne	r17,r17,zero
    cf04:	88a2b03a 	or	r17,r17,r2
    cf08:	000b883a 	mov	r5,zero
    cf0c:	0021883a 	mov	r16,zero
    cf10:	003fb406 	br	cde4 <__alt_data_end+0xfffb76b4>
    cf14:	18bff804 	addi	r2,r3,-32
    cf18:	01000804 	movi	r4,32
    cf1c:	4084d83a 	srl	r2,r8,r2
    cf20:	19003f26 	beq	r3,r4,d020 <__adddf3+0x568>
    cf24:	01001004 	movi	r4,64
    cf28:	20c7c83a 	sub	r3,r4,r3
    cf2c:	40d0983a 	sll	r8,r8,r3
    cf30:	418cb03a 	or	r6,r8,r6
    cf34:	300cc03a 	cmpne	r6,r6,zero
    cf38:	308cb03a 	or	r6,r6,r2
    cf3c:	0007883a 	mov	r3,zero
    cf40:	003f3406 	br	cc14 <__alt_data_end+0xfffb74e4>
    cf44:	80002326 	beq	r16,zero,cfd4 <__adddf3+0x51c>
    cf48:	0101ffc4 	movi	r4,2047
    cf4c:	11005e26 	beq	r2,r4,d0c8 <__adddf3+0x610>
    cf50:	00c7c83a 	sub	r3,zero,r3
    cf54:	29402034 	orhi	r5,r5,128
    cf58:	01000e04 	movi	r4,56
    cf5c:	20c07216 	blt	r4,r3,d128 <__adddf3+0x670>
    cf60:	010007c4 	movi	r4,31
    cf64:	20c0ce16 	blt	r4,r3,d2a0 <__adddf3+0x7e8>
    cf68:	01000804 	movi	r4,32
    cf6c:	20c9c83a 	sub	r4,r4,r3
    cf70:	2914983a 	sll	r10,r5,r4
    cf74:	88d2d83a 	srl	r9,r17,r3
    cf78:	8908983a 	sll	r4,r17,r4
    cf7c:	28c6d83a 	srl	r3,r5,r3
    cf80:	5262b03a 	or	r17,r10,r9
    cf84:	2008c03a 	cmpne	r4,r4,zero
    cf88:	8922b03a 	or	r17,r17,r4
    cf8c:	3463c83a 	sub	r17,r6,r17
    cf90:	40c7c83a 	sub	r3,r8,r3
    cf94:	344d803a 	cmpltu	r6,r6,r17
    cf98:	198bc83a 	sub	r5,r3,r6
    cf9c:	1021883a 	mov	r16,r2
    cfa0:	3825883a 	mov	r18,r7
    cfa4:	003f2006 	br	cc28 <__alt_data_end+0xfffb74f8>
    cfa8:	9886b03a 	or	r3,r19,r2
    cfac:	1800141e 	bne	r3,zero,d000 <__adddf3+0x548>
    cfb0:	0007883a 	mov	r3,zero
    cfb4:	000b883a 	mov	r5,zero
    cfb8:	0023883a 	mov	r17,zero
    cfbc:	0021883a 	mov	r16,zero
    cfc0:	003f3c06 	br	ccb4 <__alt_data_end+0xfffb7584>
    cfc4:	418cb03a 	or	r6,r8,r6
    cfc8:	300cc03a 	cmpne	r6,r6,zero
    cfcc:	0011883a 	mov	r8,zero
    cfd0:	003f5606 	br	cd2c <__alt_data_end+0xfffb75fc>
    cfd4:	2c48b03a 	or	r4,r5,r17
    cfd8:	20003b26 	beq	r4,zero,d0c8 <__adddf3+0x610>
    cfdc:	00c6303a 	nor	r3,zero,r3
    cfe0:	1800371e 	bne	r3,zero,d0c0 <__adddf3+0x608>
    cfe4:	3463c83a 	sub	r17,r6,r17
    cfe8:	414bc83a 	sub	r5,r8,r5
    cfec:	344d803a 	cmpltu	r6,r6,r17
    cff0:	298bc83a 	sub	r5,r5,r6
    cff4:	1021883a 	mov	r16,r2
    cff8:	3825883a 	mov	r18,r7
    cffc:	003f0a06 	br	cc28 <__alt_data_end+0xfffb74f8>
    d000:	1023883a 	mov	r17,r2
    d004:	003f0d06 	br	cc3c <__alt_data_end+0xfffb750c>
    d008:	0007883a 	mov	r3,zero
    d00c:	000b883a 	mov	r5,zero
    d010:	0023883a 	mov	r17,zero
    d014:	003f2706 	br	ccb4 <__alt_data_end+0xfffb7584>
    d018:	0027883a 	mov	r19,zero
    d01c:	003fb706 	br	cefc <__alt_data_end+0xfffb77cc>
    d020:	0011883a 	mov	r8,zero
    d024:	003fc206 	br	cf30 <__alt_data_end+0xfffb7800>
    d028:	2c44b03a 	or	r2,r5,r17
    d02c:	8000871e 	bne	r16,zero,d24c <__adddf3+0x794>
    d030:	1000b126 	beq	r2,zero,d2f8 <__adddf3+0x840>
    d034:	4184b03a 	or	r2,r8,r6
    d038:	103ebe26 	beq	r2,zero,cb34 <__alt_data_end+0xfffb7404>
    d03c:	3445883a 	add	r2,r6,r17
    d040:	1463803a 	cmpltu	r17,r2,r17
    d044:	414b883a 	add	r5,r8,r5
    d048:	2c4b883a 	add	r5,r5,r17
    d04c:	28c0202c 	andhi	r3,r5,128
    d050:	1023883a 	mov	r17,r2
    d054:	183f6326 	beq	r3,zero,cde4 <__alt_data_end+0xfffb76b4>
    d058:	00bfe034 	movhi	r2,65408
    d05c:	10bfffc4 	addi	r2,r2,-1
    d060:	2021883a 	mov	r16,r4
    d064:	288a703a 	and	r5,r5,r2
    d068:	003eb206 	br	cb34 <__alt_data_end+0xfffb7404>
    d06c:	2c44b03a 	or	r2,r5,r17
    d070:	8000251e 	bne	r16,zero,d108 <__adddf3+0x650>
    d074:	10004b1e 	bne	r2,zero,d1a4 <__adddf3+0x6ec>
    d078:	4184b03a 	or	r2,r8,r6
    d07c:	103fe226 	beq	r2,zero,d008 <__alt_data_end+0xfffb78d8>
    d080:	400b883a 	mov	r5,r8
    d084:	3023883a 	mov	r17,r6
    d088:	3825883a 	mov	r18,r7
    d08c:	003ea906 	br	cb34 <__alt_data_end+0xfffb7404>
    d090:	20bff804 	addi	r2,r4,-32
    d094:	01c00804 	movi	r7,32
    d098:	4084d83a 	srl	r2,r8,r2
    d09c:	21c07e26 	beq	r4,r7,d298 <__adddf3+0x7e0>
    d0a0:	01c01004 	movi	r7,64
    d0a4:	3909c83a 	sub	r4,r7,r4
    d0a8:	4110983a 	sll	r8,r8,r4
    d0ac:	418cb03a 	or	r6,r8,r6
    d0b0:	300cc03a 	cmpne	r6,r6,zero
    d0b4:	308cb03a 	or	r6,r6,r2
    d0b8:	0011883a 	mov	r8,zero
    d0bc:	003f1b06 	br	cd2c <__alt_data_end+0xfffb75fc>
    d0c0:	0101ffc4 	movi	r4,2047
    d0c4:	113fa41e 	bne	r2,r4,cf58 <__alt_data_end+0xfffb7828>
    d0c8:	400b883a 	mov	r5,r8
    d0cc:	3023883a 	mov	r17,r6
    d0d0:	1021883a 	mov	r16,r2
    d0d4:	3825883a 	mov	r18,r7
    d0d8:	003e9606 	br	cb34 <__alt_data_end+0xfffb7404>
    d0dc:	80001a1e 	bne	r16,zero,d148 <__adddf3+0x690>
    d0e0:	2c4eb03a 	or	r7,r5,r17
    d0e4:	38005526 	beq	r7,zero,d23c <__adddf3+0x784>
    d0e8:	0108303a 	nor	r4,zero,r4
    d0ec:	2000511e 	bne	r4,zero,d234 <__adddf3+0x77c>
    d0f0:	89a3883a 	add	r17,r17,r6
    d0f4:	414b883a 	add	r5,r8,r5
    d0f8:	898d803a 	cmpltu	r6,r17,r6
    d0fc:	298b883a 	add	r5,r5,r6
    d100:	1021883a 	mov	r16,r2
    d104:	003f0e06 	br	cd40 <__alt_data_end+0xfffb7610>
    d108:	1000341e 	bne	r2,zero,d1dc <__adddf3+0x724>
    d10c:	4184b03a 	or	r2,r8,r6
    d110:	10006f26 	beq	r2,zero,d2d0 <__adddf3+0x818>
    d114:	400b883a 	mov	r5,r8
    d118:	3023883a 	mov	r17,r6
    d11c:	3825883a 	mov	r18,r7
    d120:	0401ffc4 	movi	r16,2047
    d124:	003e8306 	br	cb34 <__alt_data_end+0xfffb7404>
    d128:	2c62b03a 	or	r17,r5,r17
    d12c:	8822c03a 	cmpne	r17,r17,zero
    d130:	0007883a 	mov	r3,zero
    d134:	003f9506 	br	cf8c <__alt_data_end+0xfffb785c>
    d138:	1021883a 	mov	r16,r2
    d13c:	000b883a 	mov	r5,zero
    d140:	0023883a 	mov	r17,zero
    d144:	003edb06 	br	ccb4 <__alt_data_end+0xfffb7584>
    d148:	01c1ffc4 	movi	r7,2047
    d14c:	11c03b26 	beq	r2,r7,d23c <__adddf3+0x784>
    d150:	0109c83a 	sub	r4,zero,r4
    d154:	29402034 	orhi	r5,r5,128
    d158:	01c00e04 	movi	r7,56
    d15c:	39006216 	blt	r7,r4,d2e8 <__adddf3+0x830>
    d160:	01c007c4 	movi	r7,31
    d164:	39006b16 	blt	r7,r4,d314 <__adddf3+0x85c>
    d168:	01c00804 	movi	r7,32
    d16c:	390fc83a 	sub	r7,r7,r4
    d170:	29d4983a 	sll	r10,r5,r7
    d174:	8912d83a 	srl	r9,r17,r4
    d178:	89ce983a 	sll	r7,r17,r7
    d17c:	2908d83a 	srl	r4,r5,r4
    d180:	5262b03a 	or	r17,r10,r9
    d184:	380ac03a 	cmpne	r5,r7,zero
    d188:	8962b03a 	or	r17,r17,r5
    d18c:	89a3883a 	add	r17,r17,r6
    d190:	2211883a 	add	r8,r4,r8
    d194:	898d803a 	cmpltu	r6,r17,r6
    d198:	418b883a 	add	r5,r8,r6
    d19c:	1021883a 	mov	r16,r2
    d1a0:	003ee706 	br	cd40 <__alt_data_end+0xfffb7610>
    d1a4:	4184b03a 	or	r2,r8,r6
    d1a8:	103e6226 	beq	r2,zero,cb34 <__alt_data_end+0xfffb7404>
    d1ac:	8987c83a 	sub	r3,r17,r6
    d1b0:	88c9803a 	cmpltu	r4,r17,r3
    d1b4:	2a05c83a 	sub	r2,r5,r8
    d1b8:	1105c83a 	sub	r2,r2,r4
    d1bc:	1100202c 	andhi	r4,r2,128
    d1c0:	203f0426 	beq	r4,zero,cdd4 <__alt_data_end+0xfffb76a4>
    d1c4:	3463c83a 	sub	r17,r6,r17
    d1c8:	414bc83a 	sub	r5,r8,r5
    d1cc:	344d803a 	cmpltu	r6,r6,r17
    d1d0:	298bc83a 	sub	r5,r5,r6
    d1d4:	3825883a 	mov	r18,r7
    d1d8:	003e5606 	br	cb34 <__alt_data_end+0xfffb7404>
    d1dc:	4184b03a 	or	r2,r8,r6
    d1e0:	10002b26 	beq	r2,zero,d290 <__adddf3+0x7d8>
    d1e4:	2804d0fa 	srli	r2,r5,3
    d1e8:	8822d0fa 	srli	r17,r17,3
    d1ec:	280a977a 	slli	r5,r5,29
    d1f0:	10c0022c 	andhi	r3,r2,8
    d1f4:	2c62b03a 	or	r17,r5,r17
    d1f8:	18000826 	beq	r3,zero,d21c <__adddf3+0x764>
    d1fc:	4008d0fa 	srli	r4,r8,3
    d200:	20c0022c 	andhi	r3,r4,8
    d204:	1800051e 	bne	r3,zero,d21c <__adddf3+0x764>
    d208:	300cd0fa 	srli	r6,r6,3
    d20c:	4010977a 	slli	r8,r8,29
    d210:	2005883a 	mov	r2,r4
    d214:	3825883a 	mov	r18,r7
    d218:	41a2b03a 	or	r17,r8,r6
    d21c:	880ad77a 	srli	r5,r17,29
    d220:	100490fa 	slli	r2,r2,3
    d224:	882290fa 	slli	r17,r17,3
    d228:	0401ffc4 	movi	r16,2047
    d22c:	288ab03a 	or	r5,r5,r2
    d230:	003e4006 	br	cb34 <__alt_data_end+0xfffb7404>
    d234:	01c1ffc4 	movi	r7,2047
    d238:	11ffc71e 	bne	r2,r7,d158 <__alt_data_end+0xfffb7a28>
    d23c:	400b883a 	mov	r5,r8
    d240:	3023883a 	mov	r17,r6
    d244:	1021883a 	mov	r16,r2
    d248:	003e3a06 	br	cb34 <__alt_data_end+0xfffb7404>
    d24c:	10002d26 	beq	r2,zero,d304 <__adddf3+0x84c>
    d250:	4184b03a 	or	r2,r8,r6
    d254:	10000e26 	beq	r2,zero,d290 <__adddf3+0x7d8>
    d258:	2804d0fa 	srli	r2,r5,3
    d25c:	8822d0fa 	srli	r17,r17,3
    d260:	280a977a 	slli	r5,r5,29
    d264:	10c0022c 	andhi	r3,r2,8
    d268:	2c62b03a 	or	r17,r5,r17
    d26c:	183feb26 	beq	r3,zero,d21c <__alt_data_end+0xfffb7aec>
    d270:	4008d0fa 	srli	r4,r8,3
    d274:	20c0022c 	andhi	r3,r4,8
    d278:	183fe81e 	bne	r3,zero,d21c <__alt_data_end+0xfffb7aec>
    d27c:	300cd0fa 	srli	r6,r6,3
    d280:	4010977a 	slli	r8,r8,29
    d284:	2005883a 	mov	r2,r4
    d288:	41a2b03a 	or	r17,r8,r6
    d28c:	003fe306 	br	d21c <__alt_data_end+0xfffb7aec>
    d290:	0401ffc4 	movi	r16,2047
    d294:	003e2706 	br	cb34 <__alt_data_end+0xfffb7404>
    d298:	0011883a 	mov	r8,zero
    d29c:	003f8306 	br	d0ac <__alt_data_end+0xfffb797c>
    d2a0:	193ff804 	addi	r4,r3,-32
    d2a4:	02400804 	movi	r9,32
    d2a8:	2908d83a 	srl	r4,r5,r4
    d2ac:	1a402526 	beq	r3,r9,d344 <__adddf3+0x88c>
    d2b0:	02401004 	movi	r9,64
    d2b4:	48c7c83a 	sub	r3,r9,r3
    d2b8:	28ca983a 	sll	r5,r5,r3
    d2bc:	2c62b03a 	or	r17,r5,r17
    d2c0:	8822c03a 	cmpne	r17,r17,zero
    d2c4:	8922b03a 	or	r17,r17,r4
    d2c8:	0007883a 	mov	r3,zero
    d2cc:	003f2f06 	br	cf8c <__alt_data_end+0xfffb785c>
    d2d0:	01402034 	movhi	r5,128
    d2d4:	0007883a 	mov	r3,zero
    d2d8:	297fffc4 	addi	r5,r5,-1
    d2dc:	047ffe04 	movi	r17,-8
    d2e0:	0401ffc4 	movi	r16,2047
    d2e4:	003e7306 	br	ccb4 <__alt_data_end+0xfffb7584>
    d2e8:	2c62b03a 	or	r17,r5,r17
    d2ec:	8822c03a 	cmpne	r17,r17,zero
    d2f0:	0009883a 	mov	r4,zero
    d2f4:	003fa506 	br	d18c <__alt_data_end+0xfffb7a5c>
    d2f8:	400b883a 	mov	r5,r8
    d2fc:	3023883a 	mov	r17,r6
    d300:	003e0c06 	br	cb34 <__alt_data_end+0xfffb7404>
    d304:	400b883a 	mov	r5,r8
    d308:	3023883a 	mov	r17,r6
    d30c:	0401ffc4 	movi	r16,2047
    d310:	003e0806 	br	cb34 <__alt_data_end+0xfffb7404>
    d314:	21fff804 	addi	r7,r4,-32
    d318:	02400804 	movi	r9,32
    d31c:	29ced83a 	srl	r7,r5,r7
    d320:	22400a26 	beq	r4,r9,d34c <__adddf3+0x894>
    d324:	02401004 	movi	r9,64
    d328:	4909c83a 	sub	r4,r9,r4
    d32c:	290a983a 	sll	r5,r5,r4
    d330:	2c62b03a 	or	r17,r5,r17
    d334:	8822c03a 	cmpne	r17,r17,zero
    d338:	89e2b03a 	or	r17,r17,r7
    d33c:	0009883a 	mov	r4,zero
    d340:	003f9206 	br	d18c <__alt_data_end+0xfffb7a5c>
    d344:	000b883a 	mov	r5,zero
    d348:	003fdc06 	br	d2bc <__alt_data_end+0xfffb7b8c>
    d34c:	000b883a 	mov	r5,zero
    d350:	003ff706 	br	d330 <__alt_data_end+0xfffb7c00>

0000d354 <__divdf3>:
    d354:	defff004 	addi	sp,sp,-64
    d358:	dc800815 	stw	r18,32(sp)
    d35c:	2824d53a 	srli	r18,r5,20
    d360:	dd800c15 	stw	r22,48(sp)
    d364:	282cd7fa 	srli	r22,r5,31
    d368:	dc000615 	stw	r16,24(sp)
    d36c:	04000434 	movhi	r16,16
    d370:	df000e15 	stw	fp,56(sp)
    d374:	dd000a15 	stw	r20,40(sp)
    d378:	dcc00915 	stw	r19,36(sp)
    d37c:	dc400715 	stw	r17,28(sp)
    d380:	843fffc4 	addi	r16,r16,-1
    d384:	dfc00f15 	stw	ra,60(sp)
    d388:	ddc00d15 	stw	r23,52(sp)
    d38c:	dd400b15 	stw	r21,44(sp)
    d390:	9481ffcc 	andi	r18,r18,2047
    d394:	2029883a 	mov	r20,r4
    d398:	2027883a 	mov	r19,r4
    d39c:	2c22703a 	and	r17,r5,r16
    d3a0:	b7003fcc 	andi	fp,r22,255
    d3a4:	90005e26 	beq	r18,zero,d520 <__divdf3+0x1cc>
    d3a8:	0081ffc4 	movi	r2,2047
    d3ac:	90803526 	beq	r18,r2,d484 <__divdf3+0x130>
    d3b0:	8c000434 	orhi	r16,r17,16
    d3b4:	2004d77a 	srli	r2,r4,29
    d3b8:	802090fa 	slli	r16,r16,3
    d3bc:	202690fa 	slli	r19,r4,3
    d3c0:	94bf0044 	addi	r18,r18,-1023
    d3c4:	80a2b03a 	or	r17,r16,r2
    d3c8:	0029883a 	mov	r20,zero
    d3cc:	0011883a 	mov	r8,zero
    d3d0:	380ad53a 	srli	r5,r7,20
    d3d4:	382ed7fa 	srli	r23,r7,31
    d3d8:	04000434 	movhi	r16,16
    d3dc:	843fffc4 	addi	r16,r16,-1
    d3e0:	2941ffcc 	andi	r5,r5,2047
    d3e4:	302b883a 	mov	r21,r6
    d3e8:	3c20703a 	and	r16,r7,r16
    d3ec:	ba403fcc 	andi	r9,r23,255
    d3f0:	28006726 	beq	r5,zero,d590 <__divdf3+0x23c>
    d3f4:	0081ffc4 	movi	r2,2047
    d3f8:	28805f26 	beq	r5,r2,d578 <__divdf3+0x224>
    d3fc:	84000434 	orhi	r16,r16,16
    d400:	3004d77a 	srli	r2,r6,29
    d404:	802090fa 	slli	r16,r16,3
    d408:	302a90fa 	slli	r21,r6,3
    d40c:	297f0044 	addi	r5,r5,-1023
    d410:	80a0b03a 	or	r16,r16,r2
    d414:	000f883a 	mov	r7,zero
    d418:	3d06b03a 	or	r3,r7,r20
    d41c:	180690ba 	slli	r3,r3,2
    d420:	00800074 	movhi	r2,1
    d424:	10b51104 	addi	r2,r2,-11196
    d428:	1885883a 	add	r2,r3,r2
    d42c:	10800017 	ldw	r2,0(r2)
    d430:	b5c8f03a 	xor	r4,r22,r23
    d434:	200d883a 	mov	r6,r4
    d438:	25003fcc 	andi	r20,r4,255
    d43c:	9165c83a 	sub	r18,r18,r5
    d440:	1000683a 	jmp	r2
    d444:	0000d68c 	andi	zero,zero,858
    d448:	0000d4bc 	xorhi	zero,zero,850
    d44c:	0000d650 	cmplti	zero,zero,857
    d450:	0000d4a0 	cmpeqi	zero,zero,850
    d454:	0000d650 	cmplti	zero,zero,857
    d458:	0000d624 	muli	zero,zero,856
    d45c:	0000d650 	cmplti	zero,zero,857
    d460:	0000d4a0 	cmpeqi	zero,zero,850
    d464:	0000d4bc 	xorhi	zero,zero,850
    d468:	0000d4bc 	xorhi	zero,zero,850
    d46c:	0000d624 	muli	zero,zero,856
    d470:	0000d4a0 	cmpeqi	zero,zero,850
    d474:	0000d4b0 	cmpltui	zero,zero,850
    d478:	0000d4b0 	cmpltui	zero,zero,850
    d47c:	0000d4b0 	cmpltui	zero,zero,850
    d480:	0000d660 	cmpeqi	zero,zero,857
    d484:	8904b03a 	or	r2,r17,r4
    d488:	1000631e 	bne	r2,zero,d618 <__divdf3+0x2c4>
    d48c:	05000204 	movi	r20,8
    d490:	0023883a 	mov	r17,zero
    d494:	0027883a 	mov	r19,zero
    d498:	02000084 	movi	r8,2
    d49c:	003fcc06 	br	d3d0 <__alt_data_end+0xfffb7ca0>
    d4a0:	8023883a 	mov	r17,r16
    d4a4:	a827883a 	mov	r19,r21
    d4a8:	4839883a 	mov	fp,r9
    d4ac:	3811883a 	mov	r8,r7
    d4b0:	00800084 	movi	r2,2
    d4b4:	4081531e 	bne	r8,r2,da04 <__divdf3+0x6b0>
    d4b8:	e029883a 	mov	r20,fp
    d4bc:	a180004c 	andi	r6,r20,1
    d4c0:	0201ffc4 	movi	r8,2047
    d4c4:	000b883a 	mov	r5,zero
    d4c8:	0027883a 	mov	r19,zero
    d4cc:	4010953a 	slli	r8,r8,20
    d4d0:	30c03fcc 	andi	r3,r6,255
    d4d4:	04000434 	movhi	r16,16
    d4d8:	180697fa 	slli	r3,r3,31
    d4dc:	843fffc4 	addi	r16,r16,-1
    d4e0:	2c20703a 	and	r16,r5,r16
    d4e4:	8220b03a 	or	r16,r16,r8
    d4e8:	80c6b03a 	or	r3,r16,r3
    d4ec:	9805883a 	mov	r2,r19
    d4f0:	dfc00f17 	ldw	ra,60(sp)
    d4f4:	df000e17 	ldw	fp,56(sp)
    d4f8:	ddc00d17 	ldw	r23,52(sp)
    d4fc:	dd800c17 	ldw	r22,48(sp)
    d500:	dd400b17 	ldw	r21,44(sp)
    d504:	dd000a17 	ldw	r20,40(sp)
    d508:	dcc00917 	ldw	r19,36(sp)
    d50c:	dc800817 	ldw	r18,32(sp)
    d510:	dc400717 	ldw	r17,28(sp)
    d514:	dc000617 	ldw	r16,24(sp)
    d518:	dec01004 	addi	sp,sp,64
    d51c:	f800283a 	ret
    d520:	8904b03a 	or	r2,r17,r4
    d524:	10003726 	beq	r2,zero,d604 <__divdf3+0x2b0>
    d528:	88014d26 	beq	r17,zero,da60 <__divdf3+0x70c>
    d52c:	8809883a 	mov	r4,r17
    d530:	d9800215 	stw	r6,8(sp)
    d534:	d9c00515 	stw	r7,20(sp)
    d538:	000f2500 	call	f250 <__clzsi2>
    d53c:	d9800217 	ldw	r6,8(sp)
    d540:	d9c00517 	ldw	r7,20(sp)
    d544:	1007883a 	mov	r3,r2
    d548:	01000a04 	movi	r4,40
    d54c:	1cfffe04 	addi	r19,r3,-8
    d550:	20c9c83a 	sub	r4,r4,r3
    d554:	8cca983a 	sll	r5,r17,r19
    d558:	a108d83a 	srl	r4,r20,r4
    d55c:	a4e6983a 	sll	r19,r20,r19
    d560:	2162b03a 	or	r17,r4,r5
    d564:	04bf0344 	movi	r18,-1011
    d568:	90e5c83a 	sub	r18,r18,r3
    d56c:	0029883a 	mov	r20,zero
    d570:	0011883a 	mov	r8,zero
    d574:	003f9606 	br	d3d0 <__alt_data_end+0xfffb7ca0>
    d578:	8184b03a 	or	r2,r16,r6
    d57c:	10001f1e 	bne	r2,zero,d5fc <__divdf3+0x2a8>
    d580:	0021883a 	mov	r16,zero
    d584:	002b883a 	mov	r21,zero
    d588:	01c00084 	movi	r7,2
    d58c:	003fa206 	br	d418 <__alt_data_end+0xfffb7ce8>
    d590:	8184b03a 	or	r2,r16,r6
    d594:	10001526 	beq	r2,zero,d5ec <__divdf3+0x298>
    d598:	80013d26 	beq	r16,zero,da90 <__divdf3+0x73c>
    d59c:	8009883a 	mov	r4,r16
    d5a0:	d9800215 	stw	r6,8(sp)
    d5a4:	da000315 	stw	r8,12(sp)
    d5a8:	da400415 	stw	r9,16(sp)
    d5ac:	000f2500 	call	f250 <__clzsi2>
    d5b0:	d9800217 	ldw	r6,8(sp)
    d5b4:	da000317 	ldw	r8,12(sp)
    d5b8:	da400417 	ldw	r9,16(sp)
    d5bc:	1007883a 	mov	r3,r2
    d5c0:	01000a04 	movi	r4,40
    d5c4:	1d7ffe04 	addi	r21,r3,-8
    d5c8:	20c9c83a 	sub	r4,r4,r3
    d5cc:	8560983a 	sll	r16,r16,r21
    d5d0:	3108d83a 	srl	r4,r6,r4
    d5d4:	356a983a 	sll	r21,r6,r21
    d5d8:	2420b03a 	or	r16,r4,r16
    d5dc:	017f0344 	movi	r5,-1011
    d5e0:	28cbc83a 	sub	r5,r5,r3
    d5e4:	000f883a 	mov	r7,zero
    d5e8:	003f8b06 	br	d418 <__alt_data_end+0xfffb7ce8>
    d5ec:	0021883a 	mov	r16,zero
    d5f0:	002b883a 	mov	r21,zero
    d5f4:	01c00044 	movi	r7,1
    d5f8:	003f8706 	br	d418 <__alt_data_end+0xfffb7ce8>
    d5fc:	01c000c4 	movi	r7,3
    d600:	003f8506 	br	d418 <__alt_data_end+0xfffb7ce8>
    d604:	05000104 	movi	r20,4
    d608:	0023883a 	mov	r17,zero
    d60c:	0027883a 	mov	r19,zero
    d610:	02000044 	movi	r8,1
    d614:	003f6e06 	br	d3d0 <__alt_data_end+0xfffb7ca0>
    d618:	05000304 	movi	r20,12
    d61c:	020000c4 	movi	r8,3
    d620:	003f6b06 	br	d3d0 <__alt_data_end+0xfffb7ca0>
    d624:	01400434 	movhi	r5,16
    d628:	000d883a 	mov	r6,zero
    d62c:	297fffc4 	addi	r5,r5,-1
    d630:	04ffffc4 	movi	r19,-1
    d634:	0201ffc4 	movi	r8,2047
    d638:	003fa406 	br	d4cc <__alt_data_end+0xfffb7d9c>
    d63c:	043f0084 	movi	r16,-1022
    d640:	84a1c83a 	sub	r16,r16,r18
    d644:	00800e04 	movi	r2,56
    d648:	14014d0e 	bge	r2,r16,db80 <__divdf3+0x82c>
    d64c:	a180004c 	andi	r6,r20,1
    d650:	0011883a 	mov	r8,zero
    d654:	000b883a 	mov	r5,zero
    d658:	0027883a 	mov	r19,zero
    d65c:	003f9b06 	br	d4cc <__alt_data_end+0xfffb7d9c>
    d660:	8880022c 	andhi	r2,r17,8
    d664:	1000f026 	beq	r2,zero,da28 <__divdf3+0x6d4>
    d668:	8080022c 	andhi	r2,r16,8
    d66c:	1000ee1e 	bne	r2,zero,da28 <__divdf3+0x6d4>
    d670:	00800434 	movhi	r2,16
    d674:	81400234 	orhi	r5,r16,8
    d678:	10bfffc4 	addi	r2,r2,-1
    d67c:	b80d883a 	mov	r6,r23
    d680:	288a703a 	and	r5,r5,r2
    d684:	a827883a 	mov	r19,r21
    d688:	003fea06 	br	d634 <__alt_data_end+0xfffb7f04>
    d68c:	84411c36 	bltu	r16,r17,db00 <__divdf3+0x7ac>
    d690:	8c011a26 	beq	r17,r16,dafc <__divdf3+0x7a8>
    d694:	94bfffc4 	addi	r18,r18,-1
    d698:	dcc00015 	stw	r19,0(sp)
    d69c:	8811883a 	mov	r8,r17
    d6a0:	002d883a 	mov	r22,zero
    d6a4:	a80cd63a 	srli	r6,r21,24
    d6a8:	8020923a 	slli	r16,r16,8
    d6ac:	a82a923a 	slli	r21,r21,8
    d6b0:	4009883a 	mov	r4,r8
    d6b4:	342eb03a 	or	r23,r6,r16
    d6b8:	dd400115 	stw	r21,4(sp)
    d6bc:	b82ad43a 	srli	r21,r23,16
    d6c0:	da000315 	stw	r8,12(sp)
    d6c4:	bcffffcc 	andi	r19,r23,65535
    d6c8:	a80b883a 	mov	r5,r21
    d6cc:	000ca800 	call	ca80 <__udivsi3>
    d6d0:	1009883a 	mov	r4,r2
    d6d4:	980b883a 	mov	r5,r19
    d6d8:	1023883a 	mov	r17,r2
    d6dc:	000ca900 	call	ca90 <__mulsi3>
    d6e0:	da000317 	ldw	r8,12(sp)
    d6e4:	a80b883a 	mov	r5,r21
    d6e8:	1039883a 	mov	fp,r2
    d6ec:	4009883a 	mov	r4,r8
    d6f0:	000ca880 	call	ca88 <__umodsi3>
    d6f4:	d8c00017 	ldw	r3,0(sp)
    d6f8:	1004943a 	slli	r2,r2,16
    d6fc:	1810d43a 	srli	r8,r3,16
    d700:	120eb03a 	or	r7,r2,r8
    d704:	3f00062e 	bgeu	r7,fp,d720 <__divdf3+0x3cc>
    d708:	3dcf883a 	add	r7,r7,r23
    d70c:	88bfffc4 	addi	r2,r17,-1
    d710:	3dc10a36 	bltu	r7,r23,db3c <__divdf3+0x7e8>
    d714:	3f01092e 	bgeu	r7,fp,db3c <__divdf3+0x7e8>
    d718:	8c7fff84 	addi	r17,r17,-2
    d71c:	3dcf883a 	add	r7,r7,r23
    d720:	3f39c83a 	sub	fp,r7,fp
    d724:	e009883a 	mov	r4,fp
    d728:	a80b883a 	mov	r5,r21
    d72c:	000ca800 	call	ca80 <__udivsi3>
    d730:	1009883a 	mov	r4,r2
    d734:	980b883a 	mov	r5,r19
    d738:	1021883a 	mov	r16,r2
    d73c:	000ca900 	call	ca90 <__mulsi3>
    d740:	e009883a 	mov	r4,fp
    d744:	a80b883a 	mov	r5,r21
    d748:	d8800315 	stw	r2,12(sp)
    d74c:	000ca880 	call	ca88 <__umodsi3>
    d750:	d9000017 	ldw	r4,0(sp)
    d754:	1004943a 	slli	r2,r2,16
    d758:	da000317 	ldw	r8,12(sp)
    d75c:	20ffffcc 	andi	r3,r4,65535
    d760:	10ceb03a 	or	r7,r2,r3
    d764:	3a00062e 	bgeu	r7,r8,d780 <__divdf3+0x42c>
    d768:	3dcf883a 	add	r7,r7,r23
    d76c:	80bfffc4 	addi	r2,r16,-1
    d770:	3dc0f036 	bltu	r7,r23,db34 <__divdf3+0x7e0>
    d774:	3a00ef2e 	bgeu	r7,r8,db34 <__divdf3+0x7e0>
    d778:	843fff84 	addi	r16,r16,-2
    d77c:	3dcf883a 	add	r7,r7,r23
    d780:	d8c00117 	ldw	r3,4(sp)
    d784:	8822943a 	slli	r17,r17,16
    d788:	3a0fc83a 	sub	r7,r7,r8
    d78c:	1806d43a 	srli	r3,r3,16
    d790:	8462b03a 	or	r17,r16,r17
    d794:	8affffcc 	andi	r11,r17,65535
    d798:	d8c00015 	stw	r3,0(sp)
    d79c:	d8c00117 	ldw	r3,4(sp)
    d7a0:	8820d43a 	srli	r16,r17,16
    d7a4:	5809883a 	mov	r4,r11
    d7a8:	1f3fffcc 	andi	fp,r3,65535
    d7ac:	e00b883a 	mov	r5,fp
    d7b0:	d9c00515 	stw	r7,20(sp)
    d7b4:	dac00215 	stw	r11,8(sp)
    d7b8:	000ca900 	call	ca90 <__mulsi3>
    d7bc:	8009883a 	mov	r4,r16
    d7c0:	e00b883a 	mov	r5,fp
    d7c4:	d8800415 	stw	r2,16(sp)
    d7c8:	000ca900 	call	ca90 <__mulsi3>
    d7cc:	d9400017 	ldw	r5,0(sp)
    d7d0:	8009883a 	mov	r4,r16
    d7d4:	d8800315 	stw	r2,12(sp)
    d7d8:	000ca900 	call	ca90 <__mulsi3>
    d7dc:	dac00217 	ldw	r11,8(sp)
    d7e0:	d9400017 	ldw	r5,0(sp)
    d7e4:	d8800215 	stw	r2,8(sp)
    d7e8:	5809883a 	mov	r4,r11
    d7ec:	000ca900 	call	ca90 <__mulsi3>
    d7f0:	da400417 	ldw	r9,16(sp)
    d7f4:	da800317 	ldw	r10,12(sp)
    d7f8:	d9c00517 	ldw	r7,20(sp)
    d7fc:	480ad43a 	srli	r5,r9,16
    d800:	5085883a 	add	r2,r10,r2
    d804:	db000217 	ldw	r12,8(sp)
    d808:	1151883a 	add	r8,r2,r5
    d80c:	4280022e 	bgeu	r8,r10,d818 <__divdf3+0x4c4>
    d810:	00800074 	movhi	r2,1
    d814:	6099883a 	add	r12,r12,r2
    d818:	400ad43a 	srli	r5,r8,16
    d81c:	4010943a 	slli	r8,r8,16
    d820:	4c3fffcc 	andi	r16,r9,65535
    d824:	6149883a 	add	r4,r12,r5
    d828:	4411883a 	add	r8,r8,r16
    d82c:	3900a736 	bltu	r7,r4,dacc <__divdf3+0x778>
    d830:	3900c426 	beq	r7,r4,db44 <__divdf3+0x7f0>
    d834:	3909c83a 	sub	r4,r7,r4
    d838:	b221c83a 	sub	r16,r22,r8
    d83c:	b42d803a 	cmpltu	r22,r22,r16
    d840:	25adc83a 	sub	r22,r4,r22
    d844:	b5c0c626 	beq	r22,r23,db60 <__divdf3+0x80c>
    d848:	b009883a 	mov	r4,r22
    d84c:	a80b883a 	mov	r5,r21
    d850:	000ca800 	call	ca80 <__udivsi3>
    d854:	1009883a 	mov	r4,r2
    d858:	980b883a 	mov	r5,r19
    d85c:	d8800315 	stw	r2,12(sp)
    d860:	000ca900 	call	ca90 <__mulsi3>
    d864:	a80b883a 	mov	r5,r21
    d868:	b009883a 	mov	r4,r22
    d86c:	d8800415 	stw	r2,16(sp)
    d870:	000ca880 	call	ca88 <__umodsi3>
    d874:	1004943a 	slli	r2,r2,16
    d878:	800ed43a 	srli	r7,r16,16
    d87c:	da400417 	ldw	r9,16(sp)
    d880:	da000317 	ldw	r8,12(sp)
    d884:	11cab03a 	or	r5,r2,r7
    d888:	2a40062e 	bgeu	r5,r9,d8a4 <__divdf3+0x550>
    d88c:	2dcb883a 	add	r5,r5,r23
    d890:	40bfffc4 	addi	r2,r8,-1
    d894:	2dc0b436 	bltu	r5,r23,db68 <__divdf3+0x814>
    d898:	2a40b32e 	bgeu	r5,r9,db68 <__divdf3+0x814>
    d89c:	423fff84 	addi	r8,r8,-2
    d8a0:	2dcb883a 	add	r5,r5,r23
    d8a4:	2a6dc83a 	sub	r22,r5,r9
    d8a8:	b009883a 	mov	r4,r22
    d8ac:	a80b883a 	mov	r5,r21
    d8b0:	da000315 	stw	r8,12(sp)
    d8b4:	000ca800 	call	ca80 <__udivsi3>
    d8b8:	980b883a 	mov	r5,r19
    d8bc:	1009883a 	mov	r4,r2
    d8c0:	d8800415 	stw	r2,16(sp)
    d8c4:	000ca900 	call	ca90 <__mulsi3>
    d8c8:	b009883a 	mov	r4,r22
    d8cc:	a80b883a 	mov	r5,r21
    d8d0:	1027883a 	mov	r19,r2
    d8d4:	000ca880 	call	ca88 <__umodsi3>
    d8d8:	1004943a 	slli	r2,r2,16
    d8dc:	843fffcc 	andi	r16,r16,65535
    d8e0:	da000317 	ldw	r8,12(sp)
    d8e4:	140eb03a 	or	r7,r2,r16
    d8e8:	da400417 	ldw	r9,16(sp)
    d8ec:	3cc0062e 	bgeu	r7,r19,d908 <__divdf3+0x5b4>
    d8f0:	3dcf883a 	add	r7,r7,r23
    d8f4:	48bfffc4 	addi	r2,r9,-1
    d8f8:	3dc09d36 	bltu	r7,r23,db70 <__divdf3+0x81c>
    d8fc:	3cc09c2e 	bgeu	r7,r19,db70 <__divdf3+0x81c>
    d900:	4a7fff84 	addi	r9,r9,-2
    d904:	3dcf883a 	add	r7,r7,r23
    d908:	4010943a 	slli	r8,r8,16
    d90c:	3cebc83a 	sub	r21,r7,r19
    d910:	e00b883a 	mov	r5,fp
    d914:	4a26b03a 	or	r19,r9,r8
    d918:	99ffffcc 	andi	r7,r19,65535
    d91c:	9820d43a 	srli	r16,r19,16
    d920:	3809883a 	mov	r4,r7
    d924:	d9c00515 	stw	r7,20(sp)
    d928:	000ca900 	call	ca90 <__mulsi3>
    d92c:	8009883a 	mov	r4,r16
    d930:	e00b883a 	mov	r5,fp
    d934:	102d883a 	mov	r22,r2
    d938:	000ca900 	call	ca90 <__mulsi3>
    d93c:	d9400017 	ldw	r5,0(sp)
    d940:	8009883a 	mov	r4,r16
    d944:	1039883a 	mov	fp,r2
    d948:	000ca900 	call	ca90 <__mulsi3>
    d94c:	d9c00517 	ldw	r7,20(sp)
    d950:	d9400017 	ldw	r5,0(sp)
    d954:	1021883a 	mov	r16,r2
    d958:	3809883a 	mov	r4,r7
    d95c:	000ca900 	call	ca90 <__mulsi3>
    d960:	b008d43a 	srli	r4,r22,16
    d964:	e085883a 	add	r2,fp,r2
    d968:	1109883a 	add	r4,r2,r4
    d96c:	2700022e 	bgeu	r4,fp,d978 <__divdf3+0x624>
    d970:	00800074 	movhi	r2,1
    d974:	80a1883a 	add	r16,r16,r2
    d978:	200ad43a 	srli	r5,r4,16
    d97c:	2008943a 	slli	r4,r4,16
    d980:	b5bfffcc 	andi	r22,r22,65535
    d984:	8145883a 	add	r2,r16,r5
    d988:	2589883a 	add	r4,r4,r22
    d98c:	a8802c36 	bltu	r21,r2,da40 <__divdf3+0x6ec>
    d990:	a880a426 	beq	r21,r2,dc24 <__divdf3+0x8d0>
    d994:	9cc00054 	ori	r19,r19,1
    d998:	9200ffc4 	addi	r8,r18,1023
    d99c:	023f270e 	bge	zero,r8,d63c <__alt_data_end+0xfffb7f0c>
    d9a0:	988001cc 	andi	r2,r19,7
    d9a4:	10000726 	beq	r2,zero,d9c4 <__divdf3+0x670>
    d9a8:	990003cc 	andi	r4,r19,15
    d9ac:	00800104 	movi	r2,4
    d9b0:	20800426 	beq	r4,r2,d9c4 <__divdf3+0x670>
    d9b4:	9885883a 	add	r2,r19,r2
    d9b8:	14e7803a 	cmpltu	r19,r2,r19
    d9bc:	8ce3883a 	add	r17,r17,r19
    d9c0:	1027883a 	mov	r19,r2
    d9c4:	8880402c 	andhi	r2,r17,256
    d9c8:	10000426 	beq	r2,zero,d9dc <__divdf3+0x688>
    d9cc:	00bfc034 	movhi	r2,65280
    d9d0:	10bfffc4 	addi	r2,r2,-1
    d9d4:	92010004 	addi	r8,r18,1024
    d9d8:	88a2703a 	and	r17,r17,r2
    d9dc:	0081ff84 	movi	r2,2046
    d9e0:	123eb616 	blt	r2,r8,d4bc <__alt_data_end+0xfffb7d8c>
    d9e4:	9826d0fa 	srli	r19,r19,3
    d9e8:	8804977a 	slli	r2,r17,29
    d9ec:	8820927a 	slli	r16,r17,9
    d9f0:	4201ffcc 	andi	r8,r8,2047
    d9f4:	14e6b03a 	or	r19,r2,r19
    d9f8:	800ad33a 	srli	r5,r16,12
    d9fc:	a180004c 	andi	r6,r20,1
    da00:	003eb206 	br	d4cc <__alt_data_end+0xfffb7d9c>
    da04:	008000c4 	movi	r2,3
    da08:	4080ac26 	beq	r8,r2,dcbc <__divdf3+0x968>
    da0c:	00800044 	movi	r2,1
    da10:	4080591e 	bne	r8,r2,db78 <__divdf3+0x824>
    da14:	e00d883a 	mov	r6,fp
    da18:	0011883a 	mov	r8,zero
    da1c:	000b883a 	mov	r5,zero
    da20:	0027883a 	mov	r19,zero
    da24:	003ea906 	br	d4cc <__alt_data_end+0xfffb7d9c>
    da28:	00800434 	movhi	r2,16
    da2c:	89400234 	orhi	r5,r17,8
    da30:	10bfffc4 	addi	r2,r2,-1
    da34:	b00d883a 	mov	r6,r22
    da38:	288a703a 	and	r5,r5,r2
    da3c:	003efd06 	br	d634 <__alt_data_end+0xfffb7f04>
    da40:	adcf883a 	add	r7,r21,r23
    da44:	997fffc4 	addi	r5,r19,-1
    da48:	3dc0412e 	bgeu	r7,r23,db50 <__divdf3+0x7fc>
    da4c:	2827883a 	mov	r19,r5
    da50:	38bfd01e 	bne	r7,r2,d994 <__alt_data_end+0xfffb8264>
    da54:	d8c00117 	ldw	r3,4(sp)
    da58:	193fce1e 	bne	r3,r4,d994 <__alt_data_end+0xfffb8264>
    da5c:	003fce06 	br	d998 <__alt_data_end+0xfffb8268>
    da60:	d9800215 	stw	r6,8(sp)
    da64:	d9c00515 	stw	r7,20(sp)
    da68:	000f2500 	call	f250 <__clzsi2>
    da6c:	10c00804 	addi	r3,r2,32
    da70:	010009c4 	movi	r4,39
    da74:	d9800217 	ldw	r6,8(sp)
    da78:	d9c00517 	ldw	r7,20(sp)
    da7c:	20feb20e 	bge	r4,r3,d548 <__alt_data_end+0xfffb7e18>
    da80:	117ffe04 	addi	r5,r2,-8
    da84:	a162983a 	sll	r17,r20,r5
    da88:	0027883a 	mov	r19,zero
    da8c:	003eb506 	br	d564 <__alt_data_end+0xfffb7e34>
    da90:	3009883a 	mov	r4,r6
    da94:	d9800215 	stw	r6,8(sp)
    da98:	da000315 	stw	r8,12(sp)
    da9c:	da400415 	stw	r9,16(sp)
    daa0:	000f2500 	call	f250 <__clzsi2>
    daa4:	10c00804 	addi	r3,r2,32
    daa8:	010009c4 	movi	r4,39
    daac:	d9800217 	ldw	r6,8(sp)
    dab0:	da000317 	ldw	r8,12(sp)
    dab4:	da400417 	ldw	r9,16(sp)
    dab8:	20fec10e 	bge	r4,r3,d5c0 <__alt_data_end+0xfffb7e90>
    dabc:	10bffe04 	addi	r2,r2,-8
    dac0:	a8a0983a 	sll	r16,r21,r2
    dac4:	002b883a 	mov	r21,zero
    dac8:	003ec406 	br	d5dc <__alt_data_end+0xfffb7eac>
    dacc:	d8c00117 	ldw	r3,4(sp)
    dad0:	b0ed883a 	add	r22,r22,r3
    dad4:	b0c5803a 	cmpltu	r2,r22,r3
    dad8:	15c5883a 	add	r2,r2,r23
    dadc:	11cf883a 	add	r7,r2,r7
    dae0:	88bfffc4 	addi	r2,r17,-1
    dae4:	b9c00d2e 	bgeu	r23,r7,db1c <__divdf3+0x7c8>
    dae8:	39003f36 	bltu	r7,r4,dbe8 <__divdf3+0x894>
    daec:	21c06a26 	beq	r4,r7,dc98 <__divdf3+0x944>
    daf0:	3909c83a 	sub	r4,r7,r4
    daf4:	1023883a 	mov	r17,r2
    daf8:	003f4f06 	br	d838 <__alt_data_end+0xfffb8108>
    dafc:	9d7ee536 	bltu	r19,r21,d694 <__alt_data_end+0xfffb7f64>
    db00:	982ed07a 	srli	r23,r19,1
    db04:	880497fa 	slli	r2,r17,31
    db08:	8810d07a 	srli	r8,r17,1
    db0c:	982c97fa 	slli	r22,r19,31
    db10:	b884b03a 	or	r2,r23,r2
    db14:	d8800015 	stw	r2,0(sp)
    db18:	003ee206 	br	d6a4 <__alt_data_end+0xfffb7f74>
    db1c:	3dfff41e 	bne	r7,r23,daf0 <__alt_data_end+0xfffb83c0>
    db20:	d8c00117 	ldw	r3,4(sp)
    db24:	b0fff02e 	bgeu	r22,r3,dae8 <__alt_data_end+0xfffb83b8>
    db28:	b909c83a 	sub	r4,r23,r4
    db2c:	1023883a 	mov	r17,r2
    db30:	003f4106 	br	d838 <__alt_data_end+0xfffb8108>
    db34:	1021883a 	mov	r16,r2
    db38:	003f1106 	br	d780 <__alt_data_end+0xfffb8050>
    db3c:	1023883a 	mov	r17,r2
    db40:	003ef706 	br	d720 <__alt_data_end+0xfffb7ff0>
    db44:	b23fe136 	bltu	r22,r8,dacc <__alt_data_end+0xfffb839c>
    db48:	0009883a 	mov	r4,zero
    db4c:	003f3a06 	br	d838 <__alt_data_end+0xfffb8108>
    db50:	38802c36 	bltu	r7,r2,dc04 <__divdf3+0x8b0>
    db54:	11c05326 	beq	r2,r7,dca4 <__divdf3+0x950>
    db58:	2827883a 	mov	r19,r5
    db5c:	003f8d06 	br	d994 <__alt_data_end+0xfffb8264>
    db60:	04ffffc4 	movi	r19,-1
    db64:	003f8c06 	br	d998 <__alt_data_end+0xfffb8268>
    db68:	1011883a 	mov	r8,r2
    db6c:	003f4d06 	br	d8a4 <__alt_data_end+0xfffb8174>
    db70:	1013883a 	mov	r9,r2
    db74:	003f6406 	br	d908 <__alt_data_end+0xfffb81d8>
    db78:	e029883a 	mov	r20,fp
    db7c:	003f8606 	br	d998 <__alt_data_end+0xfffb8268>
    db80:	008007c4 	movi	r2,31
    db84:	14002a16 	blt	r2,r16,dc30 <__divdf3+0x8dc>
    db88:	91410784 	addi	r5,r18,1054
    db8c:	9c0cd83a 	srl	r6,r19,r16
    db90:	8948983a 	sll	r4,r17,r5
    db94:	9944983a 	sll	r2,r19,r5
    db98:	8c20d83a 	srl	r16,r17,r16
    db9c:	3108b03a 	or	r4,r6,r4
    dba0:	1004c03a 	cmpne	r2,r2,zero
    dba4:	2084b03a 	or	r2,r4,r2
    dba8:	110001cc 	andi	r4,r2,7
    dbac:	20000726 	beq	r4,zero,dbcc <__divdf3+0x878>
    dbb0:	114003cc 	andi	r5,r2,15
    dbb4:	01000104 	movi	r4,4
    dbb8:	29000426 	beq	r5,r4,dbcc <__divdf3+0x878>
    dbbc:	11000104 	addi	r4,r2,4
    dbc0:	2085803a 	cmpltu	r2,r4,r2
    dbc4:	80a1883a 	add	r16,r16,r2
    dbc8:	2005883a 	mov	r2,r4
    dbcc:	8100202c 	andhi	r4,r16,128
    dbd0:	20002d26 	beq	r4,zero,dc88 <__divdf3+0x934>
    dbd4:	a180004c 	andi	r6,r20,1
    dbd8:	02000044 	movi	r8,1
    dbdc:	000b883a 	mov	r5,zero
    dbe0:	0027883a 	mov	r19,zero
    dbe4:	003e3906 	br	d4cc <__alt_data_end+0xfffb7d9c>
    dbe8:	d8c00117 	ldw	r3,4(sp)
    dbec:	8c7fff84 	addi	r17,r17,-2
    dbf0:	b0ed883a 	add	r22,r22,r3
    dbf4:	b0c5803a 	cmpltu	r2,r22,r3
    dbf8:	15c5883a 	add	r2,r2,r23
    dbfc:	11cf883a 	add	r7,r2,r7
    dc00:	003f0c06 	br	d834 <__alt_data_end+0xfffb8104>
    dc04:	d8c00117 	ldw	r3,4(sp)
    dc08:	997fff84 	addi	r5,r19,-2
    dc0c:	18d1883a 	add	r8,r3,r3
    dc10:	40c7803a 	cmpltu	r3,r8,r3
    dc14:	1dcd883a 	add	r6,r3,r23
    dc18:	398f883a 	add	r7,r7,r6
    dc1c:	da000115 	stw	r8,4(sp)
    dc20:	003f8a06 	br	da4c <__alt_data_end+0xfffb831c>
    dc24:	203f861e 	bne	r4,zero,da40 <__alt_data_end+0xfffb8310>
    dc28:	d8000115 	stw	zero,4(sp)
    dc2c:	003f8906 	br	da54 <__alt_data_end+0xfffb8324>
    dc30:	00bef884 	movi	r2,-1054
    dc34:	1485c83a 	sub	r2,r2,r18
    dc38:	01000804 	movi	r4,32
    dc3c:	8884d83a 	srl	r2,r17,r2
    dc40:	81001c26 	beq	r16,r4,dcb4 <__divdf3+0x960>
    dc44:	91010f84 	addi	r4,r18,1086
    dc48:	8908983a 	sll	r4,r17,r4
    dc4c:	24c8b03a 	or	r4,r4,r19
    dc50:	2008c03a 	cmpne	r4,r4,zero
    dc54:	2084b03a 	or	r2,r4,r2
    dc58:	140001cc 	andi	r16,r2,7
    dc5c:	8000061e 	bne	r16,zero,dc78 <__divdf3+0x924>
    dc60:	000b883a 	mov	r5,zero
    dc64:	1004d0fa 	srli	r2,r2,3
    dc68:	a180004c 	andi	r6,r20,1
    dc6c:	0011883a 	mov	r8,zero
    dc70:	1426b03a 	or	r19,r2,r16
    dc74:	003e1506 	br	d4cc <__alt_data_end+0xfffb7d9c>
    dc78:	114003cc 	andi	r5,r2,15
    dc7c:	01000104 	movi	r4,4
    dc80:	0021883a 	mov	r16,zero
    dc84:	293fcd1e 	bne	r5,r4,dbbc <__alt_data_end+0xfffb848c>
    dc88:	800a927a 	slli	r5,r16,9
    dc8c:	8020977a 	slli	r16,r16,29
    dc90:	280ad33a 	srli	r5,r5,12
    dc94:	003ff306 	br	dc64 <__alt_data_end+0xfffb8534>
    dc98:	b23fd336 	bltu	r22,r8,dbe8 <__alt_data_end+0xfffb84b8>
    dc9c:	1023883a 	mov	r17,r2
    dca0:	003fa906 	br	db48 <__alt_data_end+0xfffb8418>
    dca4:	d8c00117 	ldw	r3,4(sp)
    dca8:	193fd636 	bltu	r3,r4,dc04 <__alt_data_end+0xfffb84d4>
    dcac:	2827883a 	mov	r19,r5
    dcb0:	003f6806 	br	da54 <__alt_data_end+0xfffb8324>
    dcb4:	0009883a 	mov	r4,zero
    dcb8:	003fe406 	br	dc4c <__alt_data_end+0xfffb851c>
    dcbc:	00800434 	movhi	r2,16
    dcc0:	89400234 	orhi	r5,r17,8
    dcc4:	10bfffc4 	addi	r2,r2,-1
    dcc8:	e00d883a 	mov	r6,fp
    dccc:	288a703a 	and	r5,r5,r2
    dcd0:	003e5806 	br	d634 <__alt_data_end+0xfffb7f04>

0000dcd4 <__eqdf2>:
    dcd4:	2804d53a 	srli	r2,r5,20
    dcd8:	3806d53a 	srli	r3,r7,20
    dcdc:	02000434 	movhi	r8,16
    dce0:	423fffc4 	addi	r8,r8,-1
    dce4:	1081ffcc 	andi	r2,r2,2047
    dce8:	0241ffc4 	movi	r9,2047
    dcec:	2a14703a 	and	r10,r5,r8
    dcf0:	18c1ffcc 	andi	r3,r3,2047
    dcf4:	3a10703a 	and	r8,r7,r8
    dcf8:	280ad7fa 	srli	r5,r5,31
    dcfc:	380ed7fa 	srli	r7,r7,31
    dd00:	12400f26 	beq	r2,r9,dd40 <__eqdf2+0x6c>
    dd04:	0241ffc4 	movi	r9,2047
    dd08:	1a400326 	beq	r3,r9,dd18 <__eqdf2+0x44>
    dd0c:	10c00526 	beq	r2,r3,dd24 <__eqdf2+0x50>
    dd10:	00800044 	movi	r2,1
    dd14:	f800283a 	ret
    dd18:	4192b03a 	or	r9,r8,r6
    dd1c:	483ffc1e 	bne	r9,zero,dd10 <__alt_data_end+0xfffb85e0>
    dd20:	10fffb1e 	bne	r2,r3,dd10 <__alt_data_end+0xfffb85e0>
    dd24:	523ffa1e 	bne	r10,r8,dd10 <__alt_data_end+0xfffb85e0>
    dd28:	21bff91e 	bne	r4,r6,dd10 <__alt_data_end+0xfffb85e0>
    dd2c:	29c00826 	beq	r5,r7,dd50 <__eqdf2+0x7c>
    dd30:	103ff71e 	bne	r2,zero,dd10 <__alt_data_end+0xfffb85e0>
    dd34:	5104b03a 	or	r2,r10,r4
    dd38:	1004c03a 	cmpne	r2,r2,zero
    dd3c:	f800283a 	ret
    dd40:	5112b03a 	or	r9,r10,r4
    dd44:	483fef26 	beq	r9,zero,dd04 <__alt_data_end+0xfffb85d4>
    dd48:	00800044 	movi	r2,1
    dd4c:	f800283a 	ret
    dd50:	0005883a 	mov	r2,zero
    dd54:	f800283a 	ret

0000dd58 <__gedf2>:
    dd58:	2804d53a 	srli	r2,r5,20
    dd5c:	3806d53a 	srli	r3,r7,20
    dd60:	02000434 	movhi	r8,16
    dd64:	423fffc4 	addi	r8,r8,-1
    dd68:	0241ffc4 	movi	r9,2047
    dd6c:	1081ffcc 	andi	r2,r2,2047
    dd70:	2a14703a 	and	r10,r5,r8
    dd74:	1a46703a 	and	r3,r3,r9
    dd78:	3a10703a 	and	r8,r7,r8
    dd7c:	280ad7fa 	srli	r5,r5,31
    dd80:	380ed7fa 	srli	r7,r7,31
    dd84:	12400b26 	beq	r2,r9,ddb4 <__gedf2+0x5c>
    dd88:	1a401626 	beq	r3,r9,dde4 <__gedf2+0x8c>
    dd8c:	10000c1e 	bne	r2,zero,ddc0 <__gedf2+0x68>
    dd90:	5112b03a 	or	r9,r10,r4
    dd94:	4813003a 	cmpeq	r9,r9,zero
    dd98:	4817883a 	mov	r11,r9
    dd9c:	18000c1e 	bne	r3,zero,ddd0 <__gedf2+0x78>
    dda0:	4198b03a 	or	r12,r8,r6
    dda4:	60000a1e 	bne	r12,zero,ddd0 <__gedf2+0x78>
    dda8:	48001326 	beq	r9,zero,ddf8 <__gedf2+0xa0>
    ddac:	0005883a 	mov	r2,zero
    ddb0:	f800283a 	ret
    ddb4:	5112b03a 	or	r9,r10,r4
    ddb8:	4800191e 	bne	r9,zero,de20 <__gedf2+0xc8>
    ddbc:	18800926 	beq	r3,r2,dde4 <__gedf2+0x8c>
    ddc0:	18000b1e 	bne	r3,zero,ddf0 <__gedf2+0x98>
    ddc4:	4192b03a 	or	r9,r8,r6
    ddc8:	0017883a 	mov	r11,zero
    ddcc:	48000a26 	beq	r9,zero,ddf8 <__gedf2+0xa0>
    ddd0:	39c03fcc 	andi	r7,r7,255
    ddd4:	58000726 	beq	r11,zero,ddf4 <__gedf2+0x9c>
    ddd8:	3800081e 	bne	r7,zero,ddfc <__gedf2+0xa4>
    dddc:	00bfffc4 	movi	r2,-1
    dde0:	f800283a 	ret
    dde4:	4192b03a 	or	r9,r8,r6
    dde8:	48000d1e 	bne	r9,zero,de20 <__gedf2+0xc8>
    ddec:	103fe826 	beq	r2,zero,dd90 <__alt_data_end+0xfffb8660>
    ddf0:	39c03fcc 	andi	r7,r7,255
    ddf4:	29c00326 	beq	r5,r7,de04 <__gedf2+0xac>
    ddf8:	283ff81e 	bne	r5,zero,dddc <__alt_data_end+0xfffb86ac>
    ddfc:	00800044 	movi	r2,1
    de00:	f800283a 	ret
    de04:	18bffc16 	blt	r3,r2,ddf8 <__alt_data_end+0xfffb86c8>
    de08:	10c00316 	blt	r2,r3,de18 <__gedf2+0xc0>
    de0c:	42bffa36 	bltu	r8,r10,ddf8 <__alt_data_end+0xfffb86c8>
    de10:	52000526 	beq	r10,r8,de28 <__gedf2+0xd0>
    de14:	523fe52e 	bgeu	r10,r8,ddac <__alt_data_end+0xfffb867c>
    de18:	283ff026 	beq	r5,zero,dddc <__alt_data_end+0xfffb86ac>
    de1c:	003ff706 	br	ddfc <__alt_data_end+0xfffb86cc>
    de20:	00bfff84 	movi	r2,-2
    de24:	f800283a 	ret
    de28:	313ff336 	bltu	r6,r4,ddf8 <__alt_data_end+0xfffb86c8>
    de2c:	21bfdf2e 	bgeu	r4,r6,ddac <__alt_data_end+0xfffb867c>
    de30:	283fea26 	beq	r5,zero,dddc <__alt_data_end+0xfffb86ac>
    de34:	003ff106 	br	ddfc <__alt_data_end+0xfffb86cc>

0000de38 <__ledf2>:
    de38:	2804d53a 	srli	r2,r5,20
    de3c:	3810d53a 	srli	r8,r7,20
    de40:	00c00434 	movhi	r3,16
    de44:	18ffffc4 	addi	r3,r3,-1
    de48:	0241ffc4 	movi	r9,2047
    de4c:	1081ffcc 	andi	r2,r2,2047
    de50:	28d4703a 	and	r10,r5,r3
    de54:	4250703a 	and	r8,r8,r9
    de58:	38c6703a 	and	r3,r7,r3
    de5c:	280ad7fa 	srli	r5,r5,31
    de60:	380ed7fa 	srli	r7,r7,31
    de64:	12400b26 	beq	r2,r9,de94 <__ledf2+0x5c>
    de68:	42401926 	beq	r8,r9,ded0 <__ledf2+0x98>
    de6c:	10000c1e 	bne	r2,zero,dea0 <__ledf2+0x68>
    de70:	5112b03a 	or	r9,r10,r4
    de74:	4813003a 	cmpeq	r9,r9,zero
    de78:	4817883a 	mov	r11,r9
    de7c:	40000f26 	beq	r8,zero,debc <__ledf2+0x84>
    de80:	39c03fcc 	andi	r7,r7,255
    de84:	58001826 	beq	r11,zero,dee8 <__ledf2+0xb0>
    de88:	38000a1e 	bne	r7,zero,deb4 <__ledf2+0x7c>
    de8c:	00bfffc4 	movi	r2,-1
    de90:	f800283a 	ret
    de94:	5112b03a 	or	r9,r10,r4
    de98:	48000f1e 	bne	r9,zero,ded8 <__ledf2+0xa0>
    de9c:	40800c26 	beq	r8,r2,ded0 <__ledf2+0x98>
    dea0:	4000101e 	bne	r8,zero,dee4 <__ledf2+0xac>
    dea4:	1992b03a 	or	r9,r3,r6
    dea8:	0017883a 	mov	r11,zero
    deac:	483ff41e 	bne	r9,zero,de80 <__alt_data_end+0xfffb8750>
    deb0:	283ff61e 	bne	r5,zero,de8c <__alt_data_end+0xfffb875c>
    deb4:	00800044 	movi	r2,1
    deb8:	f800283a 	ret
    debc:	1998b03a 	or	r12,r3,r6
    dec0:	603fef1e 	bne	r12,zero,de80 <__alt_data_end+0xfffb8750>
    dec4:	483ffa26 	beq	r9,zero,deb0 <__alt_data_end+0xfffb8780>
    dec8:	0005883a 	mov	r2,zero
    decc:	f800283a 	ret
    ded0:	1992b03a 	or	r9,r3,r6
    ded4:	48000226 	beq	r9,zero,dee0 <__ledf2+0xa8>
    ded8:	00800084 	movi	r2,2
    dedc:	f800283a 	ret
    dee0:	103fe326 	beq	r2,zero,de70 <__alt_data_end+0xfffb8740>
    dee4:	39c03fcc 	andi	r7,r7,255
    dee8:	29fff11e 	bne	r5,r7,deb0 <__alt_data_end+0xfffb8780>
    deec:	40bff016 	blt	r8,r2,deb0 <__alt_data_end+0xfffb8780>
    def0:	12000316 	blt	r2,r8,df00 <__ledf2+0xc8>
    def4:	1abfee36 	bltu	r3,r10,deb0 <__alt_data_end+0xfffb8780>
    def8:	50c00326 	beq	r10,r3,df08 <__ledf2+0xd0>
    defc:	50fff22e 	bgeu	r10,r3,dec8 <__alt_data_end+0xfffb8798>
    df00:	283fe226 	beq	r5,zero,de8c <__alt_data_end+0xfffb875c>
    df04:	003feb06 	br	deb4 <__alt_data_end+0xfffb8784>
    df08:	313fe936 	bltu	r6,r4,deb0 <__alt_data_end+0xfffb8780>
    df0c:	21bfee2e 	bgeu	r4,r6,dec8 <__alt_data_end+0xfffb8798>
    df10:	283fde26 	beq	r5,zero,de8c <__alt_data_end+0xfffb875c>
    df14:	003fe706 	br	deb4 <__alt_data_end+0xfffb8784>

0000df18 <__muldf3>:
    df18:	deffee04 	addi	sp,sp,-72
    df1c:	dd000c15 	stw	r20,48(sp)
    df20:	2828d53a 	srli	r20,r5,20
    df24:	dd400d15 	stw	r21,52(sp)
    df28:	282ad7fa 	srli	r21,r5,31
    df2c:	dc000815 	stw	r16,32(sp)
    df30:	04000434 	movhi	r16,16
    df34:	ddc00f15 	stw	r23,60(sp)
    df38:	dcc00b15 	stw	r19,44(sp)
    df3c:	dc800a15 	stw	r18,40(sp)
    df40:	843fffc4 	addi	r16,r16,-1
    df44:	dfc01115 	stw	ra,68(sp)
    df48:	df001015 	stw	fp,64(sp)
    df4c:	dd800e15 	stw	r22,56(sp)
    df50:	dc400915 	stw	r17,36(sp)
    df54:	a501ffcc 	andi	r20,r20,2047
    df58:	2025883a 	mov	r18,r4
    df5c:	202f883a 	mov	r23,r4
    df60:	2c20703a 	and	r16,r5,r16
    df64:	a827883a 	mov	r19,r21
    df68:	aa403fcc 	andi	r9,r21,255
    df6c:	a0005926 	beq	r20,zero,e0d4 <__muldf3+0x1bc>
    df70:	0081ffc4 	movi	r2,2047
    df74:	a0803426 	beq	r20,r2,e048 <__muldf3+0x130>
    df78:	84000434 	orhi	r16,r16,16
    df7c:	2004d77a 	srli	r2,r4,29
    df80:	802090fa 	slli	r16,r16,3
    df84:	202e90fa 	slli	r23,r4,3
    df88:	a53f0044 	addi	r20,r20,-1023
    df8c:	80a0b03a 	or	r16,r16,r2
    df90:	000b883a 	mov	r5,zero
    df94:	0039883a 	mov	fp,zero
    df98:	3806d53a 	srli	r3,r7,20
    df9c:	382cd7fa 	srli	r22,r7,31
    dfa0:	00800434 	movhi	r2,16
    dfa4:	10bfffc4 	addi	r2,r2,-1
    dfa8:	18c1ffcc 	andi	r3,r3,2047
    dfac:	3025883a 	mov	r18,r6
    dfb0:	38a2703a 	and	r17,r7,r2
    dfb4:	b2803fcc 	andi	r10,r22,255
    dfb8:	18006426 	beq	r3,zero,e14c <__muldf3+0x234>
    dfbc:	0081ffc4 	movi	r2,2047
    dfc0:	18805c26 	beq	r3,r2,e134 <__muldf3+0x21c>
    dfc4:	8c400434 	orhi	r17,r17,16
    dfc8:	3004d77a 	srli	r2,r6,29
    dfcc:	882290fa 	slli	r17,r17,3
    dfd0:	302490fa 	slli	r18,r6,3
    dfd4:	18ff0044 	addi	r3,r3,-1023
    dfd8:	88a2b03a 	or	r17,r17,r2
    dfdc:	000f883a 	mov	r7,zero
    dfe0:	394ab03a 	or	r5,r7,r5
    dfe4:	280a90ba 	slli	r5,r5,2
    dfe8:	00800074 	movhi	r2,1
    dfec:	10b80204 	addi	r2,r2,-8184
    dff0:	288b883a 	add	r5,r5,r2
    dff4:	28800017 	ldw	r2,0(r5)
    dff8:	a0c7883a 	add	r3,r20,r3
    dffc:	b54cf03a 	xor	r6,r22,r21
    e000:	1a000044 	addi	r8,r3,1
    e004:	1000683a 	jmp	r2
    e008:	0000e24c 	andi	zero,zero,905
    e00c:	0000e238 	rdprs	zero,zero,904
    e010:	0000e238 	rdprs	zero,zero,904
    e014:	0000e224 	muli	zero,zero,904
    e018:	0000e064 	muli	zero,zero,897
    e01c:	0000e064 	muli	zero,zero,897
    e020:	0000e20c 	andi	zero,zero,904
    e024:	0000e224 	muli	zero,zero,904
    e028:	0000e064 	muli	zero,zero,897
    e02c:	0000e20c 	andi	zero,zero,904
    e030:	0000e064 	muli	zero,zero,897
    e034:	0000e224 	muli	zero,zero,904
    e038:	0000e068 	cmpgeui	zero,zero,897
    e03c:	0000e068 	cmpgeui	zero,zero,897
    e040:	0000e068 	cmpgeui	zero,zero,897
    e044:	0000e588 	cmpgei	zero,zero,918
    e048:	8104b03a 	or	r2,r16,r4
    e04c:	10006c1e 	bne	r2,zero,e200 <__muldf3+0x2e8>
    e050:	01400204 	movi	r5,8
    e054:	0021883a 	mov	r16,zero
    e058:	002f883a 	mov	r23,zero
    e05c:	07000084 	movi	fp,2
    e060:	003fcd06 	br	df98 <__alt_data_end+0xfffb8868>
    e064:	3013883a 	mov	r9,r6
    e068:	00800084 	movi	r2,2
    e06c:	e080501e 	bne	fp,r2,e1b0 <__muldf3+0x298>
    e070:	4cc0004c 	andi	r19,r9,1
    e074:	0101ffc4 	movi	r4,2047
    e078:	0021883a 	mov	r16,zero
    e07c:	002f883a 	mov	r23,zero
    e080:	2008953a 	slli	r4,r4,20
    e084:	98c03fcc 	andi	r3,r19,255
    e088:	04400434 	movhi	r17,16
    e08c:	8c7fffc4 	addi	r17,r17,-1
    e090:	180697fa 	slli	r3,r3,31
    e094:	8460703a 	and	r16,r16,r17
    e098:	8120b03a 	or	r16,r16,r4
    e09c:	80c6b03a 	or	r3,r16,r3
    e0a0:	b805883a 	mov	r2,r23
    e0a4:	dfc01117 	ldw	ra,68(sp)
    e0a8:	df001017 	ldw	fp,64(sp)
    e0ac:	ddc00f17 	ldw	r23,60(sp)
    e0b0:	dd800e17 	ldw	r22,56(sp)
    e0b4:	dd400d17 	ldw	r21,52(sp)
    e0b8:	dd000c17 	ldw	r20,48(sp)
    e0bc:	dcc00b17 	ldw	r19,44(sp)
    e0c0:	dc800a17 	ldw	r18,40(sp)
    e0c4:	dc400917 	ldw	r17,36(sp)
    e0c8:	dc000817 	ldw	r16,32(sp)
    e0cc:	dec01204 	addi	sp,sp,72
    e0d0:	f800283a 	ret
    e0d4:	8104b03a 	or	r2,r16,r4
    e0d8:	10004426 	beq	r2,zero,e1ec <__muldf3+0x2d4>
    e0dc:	80014b26 	beq	r16,zero,e60c <__muldf3+0x6f4>
    e0e0:	8009883a 	mov	r4,r16
    e0e4:	d9800715 	stw	r6,28(sp)
    e0e8:	d9c00215 	stw	r7,8(sp)
    e0ec:	da400415 	stw	r9,16(sp)
    e0f0:	000f2500 	call	f250 <__clzsi2>
    e0f4:	d9800717 	ldw	r6,28(sp)
    e0f8:	d9c00217 	ldw	r7,8(sp)
    e0fc:	da400417 	ldw	r9,16(sp)
    e100:	1007883a 	mov	r3,r2
    e104:	01000a04 	movi	r4,40
    e108:	1dfffe04 	addi	r23,r3,-8
    e10c:	20c9c83a 	sub	r4,r4,r3
    e110:	85e0983a 	sll	r16,r16,r23
    e114:	9108d83a 	srl	r4,r18,r4
    e118:	95ee983a 	sll	r23,r18,r23
    e11c:	2420b03a 	or	r16,r4,r16
    e120:	053f0344 	movi	r20,-1011
    e124:	a0e9c83a 	sub	r20,r20,r3
    e128:	000b883a 	mov	r5,zero
    e12c:	0039883a 	mov	fp,zero
    e130:	003f9906 	br	df98 <__alt_data_end+0xfffb8868>
    e134:	8984b03a 	or	r2,r17,r6
    e138:	10002a1e 	bne	r2,zero,e1e4 <__muldf3+0x2cc>
    e13c:	0023883a 	mov	r17,zero
    e140:	0025883a 	mov	r18,zero
    e144:	01c00084 	movi	r7,2
    e148:	003fa506 	br	dfe0 <__alt_data_end+0xfffb88b0>
    e14c:	8984b03a 	or	r2,r17,r6
    e150:	10002026 	beq	r2,zero,e1d4 <__muldf3+0x2bc>
    e154:	88011c26 	beq	r17,zero,e5c8 <__muldf3+0x6b0>
    e158:	8809883a 	mov	r4,r17
    e15c:	d9400215 	stw	r5,8(sp)
    e160:	d9800715 	stw	r6,28(sp)
    e164:	da400415 	stw	r9,16(sp)
    e168:	da800315 	stw	r10,12(sp)
    e16c:	000f2500 	call	f250 <__clzsi2>
    e170:	d9400217 	ldw	r5,8(sp)
    e174:	d9800717 	ldw	r6,28(sp)
    e178:	da400417 	ldw	r9,16(sp)
    e17c:	da800317 	ldw	r10,12(sp)
    e180:	1007883a 	mov	r3,r2
    e184:	01000a04 	movi	r4,40
    e188:	1cbffe04 	addi	r18,r3,-8
    e18c:	20c9c83a 	sub	r4,r4,r3
    e190:	8ca2983a 	sll	r17,r17,r18
    e194:	3108d83a 	srl	r4,r6,r4
    e198:	34a4983a 	sll	r18,r6,r18
    e19c:	2462b03a 	or	r17,r4,r17
    e1a0:	00bf0344 	movi	r2,-1011
    e1a4:	10c7c83a 	sub	r3,r2,r3
    e1a8:	000f883a 	mov	r7,zero
    e1ac:	003f8c06 	br	dfe0 <__alt_data_end+0xfffb88b0>
    e1b0:	008000c4 	movi	r2,3
    e1b4:	e0816d26 	beq	fp,r2,e76c <__muldf3+0x854>
    e1b8:	00800044 	movi	r2,1
    e1bc:	e081321e 	bne	fp,r2,e688 <__muldf3+0x770>
    e1c0:	48a6703a 	and	r19,r9,r2
    e1c4:	0009883a 	mov	r4,zero
    e1c8:	0021883a 	mov	r16,zero
    e1cc:	002f883a 	mov	r23,zero
    e1d0:	003fab06 	br	e080 <__alt_data_end+0xfffb8950>
    e1d4:	0023883a 	mov	r17,zero
    e1d8:	0025883a 	mov	r18,zero
    e1dc:	01c00044 	movi	r7,1
    e1e0:	003f7f06 	br	dfe0 <__alt_data_end+0xfffb88b0>
    e1e4:	01c000c4 	movi	r7,3
    e1e8:	003f7d06 	br	dfe0 <__alt_data_end+0xfffb88b0>
    e1ec:	01400104 	movi	r5,4
    e1f0:	0021883a 	mov	r16,zero
    e1f4:	002f883a 	mov	r23,zero
    e1f8:	07000044 	movi	fp,1
    e1fc:	003f6606 	br	df98 <__alt_data_end+0xfffb8868>
    e200:	01400304 	movi	r5,12
    e204:	070000c4 	movi	fp,3
    e208:	003f6306 	br	df98 <__alt_data_end+0xfffb8868>
    e20c:	04000434 	movhi	r16,16
    e210:	0027883a 	mov	r19,zero
    e214:	843fffc4 	addi	r16,r16,-1
    e218:	05ffffc4 	movi	r23,-1
    e21c:	0101ffc4 	movi	r4,2047
    e220:	003f9706 	br	e080 <__alt_data_end+0xfffb8950>
    e224:	8821883a 	mov	r16,r17
    e228:	902f883a 	mov	r23,r18
    e22c:	5013883a 	mov	r9,r10
    e230:	3839883a 	mov	fp,r7
    e234:	003f8c06 	br	e068 <__alt_data_end+0xfffb8938>
    e238:	8821883a 	mov	r16,r17
    e23c:	902f883a 	mov	r23,r18
    e240:	3013883a 	mov	r9,r6
    e244:	3839883a 	mov	fp,r7
    e248:	003f8706 	br	e068 <__alt_data_end+0xfffb8938>
    e24c:	b82ad43a 	srli	r21,r23,16
    e250:	9038d43a 	srli	fp,r18,16
    e254:	bdffffcc 	andi	r23,r23,65535
    e258:	94bfffcc 	andi	r18,r18,65535
    e25c:	9009883a 	mov	r4,r18
    e260:	b80b883a 	mov	r5,r23
    e264:	d8c00515 	stw	r3,20(sp)
    e268:	d9800715 	stw	r6,28(sp)
    e26c:	da000615 	stw	r8,24(sp)
    e270:	000ca900 	call	ca90 <__mulsi3>
    e274:	9009883a 	mov	r4,r18
    e278:	a80b883a 	mov	r5,r21
    e27c:	1029883a 	mov	r20,r2
    e280:	000ca900 	call	ca90 <__mulsi3>
    e284:	e009883a 	mov	r4,fp
    e288:	a80b883a 	mov	r5,r21
    e28c:	102d883a 	mov	r22,r2
    e290:	000ca900 	call	ca90 <__mulsi3>
    e294:	e009883a 	mov	r4,fp
    e298:	b80b883a 	mov	r5,r23
    e29c:	1027883a 	mov	r19,r2
    e2a0:	000ca900 	call	ca90 <__mulsi3>
    e2a4:	a008d43a 	srli	r4,r20,16
    e2a8:	b085883a 	add	r2,r22,r2
    e2ac:	d8c00517 	ldw	r3,20(sp)
    e2b0:	110f883a 	add	r7,r2,r4
    e2b4:	d9800717 	ldw	r6,28(sp)
    e2b8:	da000617 	ldw	r8,24(sp)
    e2bc:	3d80022e 	bgeu	r7,r22,e2c8 <__muldf3+0x3b0>
    e2c0:	00800074 	movhi	r2,1
    e2c4:	98a7883a 	add	r19,r19,r2
    e2c8:	3804943a 	slli	r2,r7,16
    e2cc:	380ed43a 	srli	r7,r7,16
    e2d0:	882cd43a 	srli	r22,r17,16
    e2d4:	a53fffcc 	andi	r20,r20,65535
    e2d8:	8c7fffcc 	andi	r17,r17,65535
    e2dc:	1529883a 	add	r20,r2,r20
    e2e0:	8809883a 	mov	r4,r17
    e2e4:	b80b883a 	mov	r5,r23
    e2e8:	d8c00515 	stw	r3,20(sp)
    e2ec:	d9800715 	stw	r6,28(sp)
    e2f0:	da000615 	stw	r8,24(sp)
    e2f4:	d9c00015 	stw	r7,0(sp)
    e2f8:	dd000115 	stw	r20,4(sp)
    e2fc:	000ca900 	call	ca90 <__mulsi3>
    e300:	a80b883a 	mov	r5,r21
    e304:	8809883a 	mov	r4,r17
    e308:	d8800415 	stw	r2,16(sp)
    e30c:	000ca900 	call	ca90 <__mulsi3>
    e310:	a80b883a 	mov	r5,r21
    e314:	b009883a 	mov	r4,r22
    e318:	1029883a 	mov	r20,r2
    e31c:	000ca900 	call	ca90 <__mulsi3>
    e320:	b009883a 	mov	r4,r22
    e324:	b80b883a 	mov	r5,r23
    e328:	102b883a 	mov	r21,r2
    e32c:	000ca900 	call	ca90 <__mulsi3>
    e330:	da400417 	ldw	r9,16(sp)
    e334:	a085883a 	add	r2,r20,r2
    e338:	d8c00517 	ldw	r3,20(sp)
    e33c:	4808d43a 	srli	r4,r9,16
    e340:	d9800717 	ldw	r6,28(sp)
    e344:	da000617 	ldw	r8,24(sp)
    e348:	1109883a 	add	r4,r2,r4
    e34c:	2500022e 	bgeu	r4,r20,e358 <__muldf3+0x440>
    e350:	00800074 	movhi	r2,1
    e354:	a8ab883a 	add	r21,r21,r2
    e358:	200e943a 	slli	r7,r4,16
    e35c:	2004d43a 	srli	r2,r4,16
    e360:	802ed43a 	srli	r23,r16,16
    e364:	843fffcc 	andi	r16,r16,65535
    e368:	4d3fffcc 	andi	r20,r9,65535
    e36c:	9009883a 	mov	r4,r18
    e370:	800b883a 	mov	r5,r16
    e374:	3d29883a 	add	r20,r7,r20
    e378:	d8c00515 	stw	r3,20(sp)
    e37c:	d9800715 	stw	r6,28(sp)
    e380:	da000615 	stw	r8,24(sp)
    e384:	a8ab883a 	add	r21,r21,r2
    e388:	000ca900 	call	ca90 <__mulsi3>
    e38c:	9009883a 	mov	r4,r18
    e390:	b80b883a 	mov	r5,r23
    e394:	d8800315 	stw	r2,12(sp)
    e398:	000ca900 	call	ca90 <__mulsi3>
    e39c:	e009883a 	mov	r4,fp
    e3a0:	b80b883a 	mov	r5,r23
    e3a4:	1025883a 	mov	r18,r2
    e3a8:	000ca900 	call	ca90 <__mulsi3>
    e3ac:	e009883a 	mov	r4,fp
    e3b0:	800b883a 	mov	r5,r16
    e3b4:	d8800215 	stw	r2,8(sp)
    e3b8:	000ca900 	call	ca90 <__mulsi3>
    e3bc:	da800317 	ldw	r10,12(sp)
    e3c0:	d9400017 	ldw	r5,0(sp)
    e3c4:	9085883a 	add	r2,r18,r2
    e3c8:	5008d43a 	srli	r4,r10,16
    e3cc:	a153883a 	add	r9,r20,r5
    e3d0:	d8c00517 	ldw	r3,20(sp)
    e3d4:	1109883a 	add	r4,r2,r4
    e3d8:	d9800717 	ldw	r6,28(sp)
    e3dc:	da000617 	ldw	r8,24(sp)
    e3e0:	dac00217 	ldw	r11,8(sp)
    e3e4:	2480022e 	bgeu	r4,r18,e3f0 <__muldf3+0x4d8>
    e3e8:	00800074 	movhi	r2,1
    e3ec:	5897883a 	add	r11,r11,r2
    e3f0:	200e943a 	slli	r7,r4,16
    e3f4:	2038d43a 	srli	fp,r4,16
    e3f8:	52bfffcc 	andi	r10,r10,65535
    e3fc:	3a8f883a 	add	r7,r7,r10
    e400:	8809883a 	mov	r4,r17
    e404:	800b883a 	mov	r5,r16
    e408:	d8c00515 	stw	r3,20(sp)
    e40c:	d9800715 	stw	r6,28(sp)
    e410:	d9c00215 	stw	r7,8(sp)
    e414:	da000615 	stw	r8,24(sp)
    e418:	da400415 	stw	r9,16(sp)
    e41c:	5f39883a 	add	fp,r11,fp
    e420:	000ca900 	call	ca90 <__mulsi3>
    e424:	8809883a 	mov	r4,r17
    e428:	b80b883a 	mov	r5,r23
    e42c:	1025883a 	mov	r18,r2
    e430:	000ca900 	call	ca90 <__mulsi3>
    e434:	b009883a 	mov	r4,r22
    e438:	b80b883a 	mov	r5,r23
    e43c:	d8800315 	stw	r2,12(sp)
    e440:	000ca900 	call	ca90 <__mulsi3>
    e444:	b009883a 	mov	r4,r22
    e448:	800b883a 	mov	r5,r16
    e44c:	1023883a 	mov	r17,r2
    e450:	000ca900 	call	ca90 <__mulsi3>
    e454:	da800317 	ldw	r10,12(sp)
    e458:	9008d43a 	srli	r4,r18,16
    e45c:	d8c00517 	ldw	r3,20(sp)
    e460:	5085883a 	add	r2,r10,r2
    e464:	1109883a 	add	r4,r2,r4
    e468:	d9800717 	ldw	r6,28(sp)
    e46c:	d9c00217 	ldw	r7,8(sp)
    e470:	da000617 	ldw	r8,24(sp)
    e474:	da400417 	ldw	r9,16(sp)
    e478:	2280022e 	bgeu	r4,r10,e484 <__muldf3+0x56c>
    e47c:	00800074 	movhi	r2,1
    e480:	88a3883a 	add	r17,r17,r2
    e484:	2004943a 	slli	r2,r4,16
    e488:	94bfffcc 	andi	r18,r18,65535
    e48c:	4ce7883a 	add	r19,r9,r19
    e490:	14a5883a 	add	r18,r2,r18
    e494:	9d29803a 	cmpltu	r20,r19,r20
    e498:	9565883a 	add	r18,r18,r21
    e49c:	9505883a 	add	r2,r18,r20
    e4a0:	99e7883a 	add	r19,r19,r7
    e4a4:	99cf803a 	cmpltu	r7,r19,r7
    e4a8:	e08b883a 	add	r5,fp,r2
    e4ac:	2008d43a 	srli	r4,r4,16
    e4b0:	29ef883a 	add	r23,r5,r7
    e4b4:	1529803a 	cmpltu	r20,r2,r20
    e4b8:	956b803a 	cmpltu	r21,r18,r21
    e4bc:	b9cf803a 	cmpltu	r7,r23,r7
    e4c0:	a564b03a 	or	r18,r20,r21
    e4c4:	2f39803a 	cmpltu	fp,r5,fp
    e4c8:	9125883a 	add	r18,r18,r4
    e4cc:	3f38b03a 	or	fp,r7,fp
    e4d0:	9725883a 	add	r18,r18,fp
    e4d4:	9804927a 	slli	r2,r19,9
    e4d8:	9463883a 	add	r17,r18,r17
    e4dc:	d9000117 	ldw	r4,4(sp)
    e4e0:	b820d5fa 	srli	r16,r23,23
    e4e4:	8822927a 	slli	r17,r17,9
    e4e8:	9826d5fa 	srli	r19,r19,23
    e4ec:	1104b03a 	or	r2,r2,r4
    e4f0:	b82e927a 	slli	r23,r23,9
    e4f4:	1004c03a 	cmpne	r2,r2,zero
    e4f8:	8c20b03a 	or	r16,r17,r16
    e4fc:	14e6b03a 	or	r19,r2,r19
    e500:	8080402c 	andhi	r2,r16,256
    e504:	9deeb03a 	or	r23,r19,r23
    e508:	10000726 	beq	r2,zero,e528 <__muldf3+0x610>
    e50c:	b804d07a 	srli	r2,r23,1
    e510:	800697fa 	slli	r3,r16,31
    e514:	bdc0004c 	andi	r23,r23,1
    e518:	8020d07a 	srli	r16,r16,1
    e51c:	b8aeb03a 	or	r23,r23,r2
    e520:	b8eeb03a 	or	r23,r23,r3
    e524:	4007883a 	mov	r3,r8
    e528:	1900ffc4 	addi	r4,r3,1023
    e52c:	01004d0e 	bge	zero,r4,e664 <__muldf3+0x74c>
    e530:	b88001cc 	andi	r2,r23,7
    e534:	10000726 	beq	r2,zero,e554 <__muldf3+0x63c>
    e538:	b94003cc 	andi	r5,r23,15
    e53c:	00800104 	movi	r2,4
    e540:	28800426 	beq	r5,r2,e554 <__muldf3+0x63c>
    e544:	b885883a 	add	r2,r23,r2
    e548:	15ef803a 	cmpltu	r23,r2,r23
    e54c:	85e1883a 	add	r16,r16,r23
    e550:	102f883a 	mov	r23,r2
    e554:	8080402c 	andhi	r2,r16,256
    e558:	10000426 	beq	r2,zero,e56c <__muldf3+0x654>
    e55c:	00bfc034 	movhi	r2,65280
    e560:	10bfffc4 	addi	r2,r2,-1
    e564:	19010004 	addi	r4,r3,1024
    e568:	80a0703a 	and	r16,r16,r2
    e56c:	0081ff84 	movi	r2,2046
    e570:	1100340e 	bge	r2,r4,e644 <__muldf3+0x72c>
    e574:	34c0004c 	andi	r19,r6,1
    e578:	0101ffc4 	movi	r4,2047
    e57c:	0021883a 	mov	r16,zero
    e580:	002f883a 	mov	r23,zero
    e584:	003ebe06 	br	e080 <__alt_data_end+0xfffb8950>
    e588:	8080022c 	andhi	r2,r16,8
    e58c:	10000926 	beq	r2,zero,e5b4 <__muldf3+0x69c>
    e590:	8880022c 	andhi	r2,r17,8
    e594:	1000071e 	bne	r2,zero,e5b4 <__muldf3+0x69c>
    e598:	00800434 	movhi	r2,16
    e59c:	8c000234 	orhi	r16,r17,8
    e5a0:	10bfffc4 	addi	r2,r2,-1
    e5a4:	b027883a 	mov	r19,r22
    e5a8:	80a0703a 	and	r16,r16,r2
    e5ac:	902f883a 	mov	r23,r18
    e5b0:	003f1a06 	br	e21c <__alt_data_end+0xfffb8aec>
    e5b4:	00800434 	movhi	r2,16
    e5b8:	84000234 	orhi	r16,r16,8
    e5bc:	10bfffc4 	addi	r2,r2,-1
    e5c0:	80a0703a 	and	r16,r16,r2
    e5c4:	003f1506 	br	e21c <__alt_data_end+0xfffb8aec>
    e5c8:	3009883a 	mov	r4,r6
    e5cc:	d9400215 	stw	r5,8(sp)
    e5d0:	d9800715 	stw	r6,28(sp)
    e5d4:	da400415 	stw	r9,16(sp)
    e5d8:	da800315 	stw	r10,12(sp)
    e5dc:	000f2500 	call	f250 <__clzsi2>
    e5e0:	10c00804 	addi	r3,r2,32
    e5e4:	010009c4 	movi	r4,39
    e5e8:	d9400217 	ldw	r5,8(sp)
    e5ec:	d9800717 	ldw	r6,28(sp)
    e5f0:	da400417 	ldw	r9,16(sp)
    e5f4:	da800317 	ldw	r10,12(sp)
    e5f8:	20fee20e 	bge	r4,r3,e184 <__alt_data_end+0xfffb8a54>
    e5fc:	147ffe04 	addi	r17,r2,-8
    e600:	9462983a 	sll	r17,r18,r17
    e604:	0025883a 	mov	r18,zero
    e608:	003ee506 	br	e1a0 <__alt_data_end+0xfffb8a70>
    e60c:	d9800715 	stw	r6,28(sp)
    e610:	d9c00215 	stw	r7,8(sp)
    e614:	da400415 	stw	r9,16(sp)
    e618:	000f2500 	call	f250 <__clzsi2>
    e61c:	10c00804 	addi	r3,r2,32
    e620:	010009c4 	movi	r4,39
    e624:	d9800717 	ldw	r6,28(sp)
    e628:	d9c00217 	ldw	r7,8(sp)
    e62c:	da400417 	ldw	r9,16(sp)
    e630:	20feb40e 	bge	r4,r3,e104 <__alt_data_end+0xfffb89d4>
    e634:	143ffe04 	addi	r16,r2,-8
    e638:	9420983a 	sll	r16,r18,r16
    e63c:	002f883a 	mov	r23,zero
    e640:	003eb706 	br	e120 <__alt_data_end+0xfffb89f0>
    e644:	8004977a 	slli	r2,r16,29
    e648:	b82ed0fa 	srli	r23,r23,3
    e64c:	8020927a 	slli	r16,r16,9
    e650:	2101ffcc 	andi	r4,r4,2047
    e654:	15eeb03a 	or	r23,r2,r23
    e658:	8020d33a 	srli	r16,r16,12
    e65c:	34c0004c 	andi	r19,r6,1
    e660:	003e8706 	br	e080 <__alt_data_end+0xfffb8950>
    e664:	00bf0084 	movi	r2,-1022
    e668:	10c5c83a 	sub	r2,r2,r3
    e66c:	01000e04 	movi	r4,56
    e670:	2080080e 	bge	r4,r2,e694 <__muldf3+0x77c>
    e674:	34c0004c 	andi	r19,r6,1
    e678:	0009883a 	mov	r4,zero
    e67c:	0021883a 	mov	r16,zero
    e680:	002f883a 	mov	r23,zero
    e684:	003e7e06 	br	e080 <__alt_data_end+0xfffb8950>
    e688:	4007883a 	mov	r3,r8
    e68c:	480d883a 	mov	r6,r9
    e690:	003fa506 	br	e528 <__alt_data_end+0xfffb8df8>
    e694:	010007c4 	movi	r4,31
    e698:	20801816 	blt	r4,r2,e6fc <__muldf3+0x7e4>
    e69c:	18c10784 	addi	r3,r3,1054
    e6a0:	80c8983a 	sll	r4,r16,r3
    e6a4:	b88ad83a 	srl	r5,r23,r2
    e6a8:	b8c6983a 	sll	r3,r23,r3
    e6ac:	80a0d83a 	srl	r16,r16,r2
    e6b0:	2908b03a 	or	r4,r5,r4
    e6b4:	1804c03a 	cmpne	r2,r3,zero
    e6b8:	2088b03a 	or	r4,r4,r2
    e6bc:	208001cc 	andi	r2,r4,7
    e6c0:	10000726 	beq	r2,zero,e6e0 <__muldf3+0x7c8>
    e6c4:	20c003cc 	andi	r3,r4,15
    e6c8:	00800104 	movi	r2,4
    e6cc:	18800426 	beq	r3,r2,e6e0 <__muldf3+0x7c8>
    e6d0:	20c00104 	addi	r3,r4,4
    e6d4:	1905803a 	cmpltu	r2,r3,r4
    e6d8:	80a1883a 	add	r16,r16,r2
    e6dc:	1809883a 	mov	r4,r3
    e6e0:	8080202c 	andhi	r2,r16,128
    e6e4:	10001b26 	beq	r2,zero,e754 <__muldf3+0x83c>
    e6e8:	34c0004c 	andi	r19,r6,1
    e6ec:	01000044 	movi	r4,1
    e6f0:	0021883a 	mov	r16,zero
    e6f4:	002f883a 	mov	r23,zero
    e6f8:	003e6106 	br	e080 <__alt_data_end+0xfffb8950>
    e6fc:	013ef884 	movi	r4,-1054
    e700:	20c9c83a 	sub	r4,r4,r3
    e704:	01400804 	movi	r5,32
    e708:	8108d83a 	srl	r4,r16,r4
    e70c:	11401526 	beq	r2,r5,e764 <__muldf3+0x84c>
    e710:	18c10f84 	addi	r3,r3,1086
    e714:	80e0983a 	sll	r16,r16,r3
    e718:	85eeb03a 	or	r23,r16,r23
    e71c:	b804c03a 	cmpne	r2,r23,zero
    e720:	1108b03a 	or	r4,r2,r4
    e724:	20c001cc 	andi	r3,r4,7
    e728:	1800061e 	bne	r3,zero,e744 <__muldf3+0x82c>
    e72c:	0021883a 	mov	r16,zero
    e730:	202ed0fa 	srli	r23,r4,3
    e734:	34c0004c 	andi	r19,r6,1
    e738:	0009883a 	mov	r4,zero
    e73c:	b8eeb03a 	or	r23,r23,r3
    e740:	003e4f06 	br	e080 <__alt_data_end+0xfffb8950>
    e744:	20c003cc 	andi	r3,r4,15
    e748:	00800104 	movi	r2,4
    e74c:	0021883a 	mov	r16,zero
    e750:	18bfdf1e 	bne	r3,r2,e6d0 <__alt_data_end+0xfffb8fa0>
    e754:	8004927a 	slli	r2,r16,9
    e758:	8006977a 	slli	r3,r16,29
    e75c:	1020d33a 	srli	r16,r2,12
    e760:	003ff306 	br	e730 <__alt_data_end+0xfffb9000>
    e764:	0021883a 	mov	r16,zero
    e768:	003feb06 	br	e718 <__alt_data_end+0xfffb8fe8>
    e76c:	00800434 	movhi	r2,16
    e770:	84000234 	orhi	r16,r16,8
    e774:	10bfffc4 	addi	r2,r2,-1
    e778:	4cc0004c 	andi	r19,r9,1
    e77c:	80a0703a 	and	r16,r16,r2
    e780:	003ea606 	br	e21c <__alt_data_end+0xfffb8aec>

0000e784 <__subdf3>:
    e784:	00c00434 	movhi	r3,16
    e788:	18ffffc4 	addi	r3,r3,-1
    e78c:	defffb04 	addi	sp,sp,-20
    e790:	28d2703a 	and	r9,r5,r3
    e794:	3814d53a 	srli	r10,r7,20
    e798:	38c6703a 	and	r3,r7,r3
    e79c:	3004d77a 	srli	r2,r6,29
    e7a0:	dc800215 	stw	r18,8(sp)
    e7a4:	dc000015 	stw	r16,0(sp)
    e7a8:	2824d7fa 	srli	r18,r5,31
    e7ac:	2820d53a 	srli	r16,r5,20
    e7b0:	481290fa 	slli	r9,r9,3
    e7b4:	200ad77a 	srli	r5,r4,29
    e7b8:	180690fa 	slli	r3,r3,3
    e7bc:	dc400115 	stw	r17,4(sp)
    e7c0:	dfc00415 	stw	ra,16(sp)
    e7c4:	202290fa 	slli	r17,r4,3
    e7c8:	dcc00315 	stw	r19,12(sp)
    e7cc:	5281ffcc 	andi	r10,r10,2047
    e7d0:	0101ffc4 	movi	r4,2047
    e7d4:	9011883a 	mov	r8,r18
    e7d8:	8401ffcc 	andi	r16,r16,2047
    e7dc:	94803fcc 	andi	r18,r18,255
    e7e0:	494ab03a 	or	r5,r9,r5
    e7e4:	380ed7fa 	srli	r7,r7,31
    e7e8:	1886b03a 	or	r3,r3,r2
    e7ec:	300c90fa 	slli	r6,r6,3
    e7f0:	51009026 	beq	r10,r4,ea34 <__subdf3+0x2b0>
    e7f4:	39c0005c 	xori	r7,r7,1
    e7f8:	8285c83a 	sub	r2,r16,r10
    e7fc:	91c06f26 	beq	r18,r7,e9bc <__subdf3+0x238>
    e800:	0080b10e 	bge	zero,r2,eac8 <__subdf3+0x344>
    e804:	50002a1e 	bne	r10,zero,e8b0 <__subdf3+0x12c>
    e808:	1988b03a 	or	r4,r3,r6
    e80c:	2000941e 	bne	r4,zero,ea60 <__subdf3+0x2dc>
    e810:	888001cc 	andi	r2,r17,7
    e814:	10005b26 	beq	r2,zero,e984 <__subdf3+0x200>
    e818:	88c003cc 	andi	r3,r17,15
    e81c:	00800104 	movi	r2,4
    e820:	18805826 	beq	r3,r2,e984 <__subdf3+0x200>
    e824:	88c00104 	addi	r3,r17,4
    e828:	1c63803a 	cmpltu	r17,r3,r17
    e82c:	2c4b883a 	add	r5,r5,r17
    e830:	2880202c 	andhi	r2,r5,128
    e834:	9200004c 	andi	r8,r18,1
    e838:	1823883a 	mov	r17,r3
    e83c:	10005426 	beq	r2,zero,e990 <__subdf3+0x20c>
    e840:	84000044 	addi	r16,r16,1
    e844:	0081ffc4 	movi	r2,2047
    e848:	8080bf26 	beq	r16,r2,eb48 <__subdf3+0x3c4>
    e84c:	013fe034 	movhi	r4,65408
    e850:	213fffc4 	addi	r4,r4,-1
    e854:	290a703a 	and	r5,r5,r4
    e858:	2804977a 	slli	r2,r5,29
    e85c:	280a927a 	slli	r5,r5,9
    e860:	8822d0fa 	srli	r17,r17,3
    e864:	8401ffcc 	andi	r16,r16,2047
    e868:	2808d33a 	srli	r4,r5,12
    e86c:	1444b03a 	or	r2,r2,r17
    e870:	8401ffcc 	andi	r16,r16,2047
    e874:	800a953a 	slli	r5,r16,20
    e878:	40c03fcc 	andi	r3,r8,255
    e87c:	04000434 	movhi	r16,16
    e880:	180697fa 	slli	r3,r3,31
    e884:	843fffc4 	addi	r16,r16,-1
    e888:	2420703a 	and	r16,r4,r16
    e88c:	8160b03a 	or	r16,r16,r5
    e890:	80c6b03a 	or	r3,r16,r3
    e894:	dfc00417 	ldw	ra,16(sp)
    e898:	dcc00317 	ldw	r19,12(sp)
    e89c:	dc800217 	ldw	r18,8(sp)
    e8a0:	dc400117 	ldw	r17,4(sp)
    e8a4:	dc000017 	ldw	r16,0(sp)
    e8a8:	dec00504 	addi	sp,sp,20
    e8ac:	f800283a 	ret
    e8b0:	0101ffc4 	movi	r4,2047
    e8b4:	813fd626 	beq	r16,r4,e810 <__alt_data_end+0xfffb90e0>
    e8b8:	18c02034 	orhi	r3,r3,128
    e8bc:	01000e04 	movi	r4,56
    e8c0:	2080a416 	blt	r4,r2,eb54 <__subdf3+0x3d0>
    e8c4:	010007c4 	movi	r4,31
    e8c8:	2080c716 	blt	r4,r2,ebe8 <__subdf3+0x464>
    e8cc:	01000804 	movi	r4,32
    e8d0:	2089c83a 	sub	r4,r4,r2
    e8d4:	1910983a 	sll	r8,r3,r4
    e8d8:	308ed83a 	srl	r7,r6,r2
    e8dc:	3108983a 	sll	r4,r6,r4
    e8e0:	1884d83a 	srl	r2,r3,r2
    e8e4:	41ccb03a 	or	r6,r8,r7
    e8e8:	2008c03a 	cmpne	r4,r4,zero
    e8ec:	310cb03a 	or	r6,r6,r4
    e8f0:	898dc83a 	sub	r6,r17,r6
    e8f4:	89a3803a 	cmpltu	r17,r17,r6
    e8f8:	288bc83a 	sub	r5,r5,r2
    e8fc:	2c4bc83a 	sub	r5,r5,r17
    e900:	3023883a 	mov	r17,r6
    e904:	2880202c 	andhi	r2,r5,128
    e908:	10006b26 	beq	r2,zero,eab8 <__subdf3+0x334>
    e90c:	04c02034 	movhi	r19,128
    e910:	9cffffc4 	addi	r19,r19,-1
    e914:	2ce6703a 	and	r19,r5,r19
    e918:	98007c26 	beq	r19,zero,eb0c <__subdf3+0x388>
    e91c:	9809883a 	mov	r4,r19
    e920:	000f2500 	call	f250 <__clzsi2>
    e924:	10fffe04 	addi	r3,r2,-8
    e928:	010007c4 	movi	r4,31
    e92c:	20c07d16 	blt	r4,r3,eb24 <__subdf3+0x3a0>
    e930:	01400a04 	movi	r5,40
    e934:	2885c83a 	sub	r2,r5,r2
    e938:	888ad83a 	srl	r5,r17,r2
    e93c:	98e6983a 	sll	r19,r19,r3
    e940:	88e2983a 	sll	r17,r17,r3
    e944:	2ce6b03a 	or	r19,r5,r19
    e948:	1c007a16 	blt	r3,r16,eb34 <__subdf3+0x3b0>
    e94c:	1c21c83a 	sub	r16,r3,r16
    e950:	81400044 	addi	r5,r16,1
    e954:	00c007c4 	movi	r3,31
    e958:	19409616 	blt	r3,r5,ebb4 <__subdf3+0x430>
    e95c:	1c21c83a 	sub	r16,r3,r16
    e960:	8c08983a 	sll	r4,r17,r16
    e964:	8946d83a 	srl	r3,r17,r5
    e968:	9c20983a 	sll	r16,r19,r16
    e96c:	2008c03a 	cmpne	r4,r4,zero
    e970:	994ad83a 	srl	r5,r19,r5
    e974:	1c06b03a 	or	r3,r3,r16
    e978:	1922b03a 	or	r17,r3,r4
    e97c:	0021883a 	mov	r16,zero
    e980:	003fa306 	br	e810 <__alt_data_end+0xfffb90e0>
    e984:	2880202c 	andhi	r2,r5,128
    e988:	9200004c 	andi	r8,r18,1
    e98c:	103fac1e 	bne	r2,zero,e840 <__alt_data_end+0xfffb9110>
    e990:	2804977a 	slli	r2,r5,29
    e994:	8822d0fa 	srli	r17,r17,3
    e998:	00c1ffc4 	movi	r3,2047
    e99c:	280ad0fa 	srli	r5,r5,3
    e9a0:	1444b03a 	or	r2,r2,r17
    e9a4:	80c02726 	beq	r16,r3,ea44 <__subdf3+0x2c0>
    e9a8:	01000434 	movhi	r4,16
    e9ac:	213fffc4 	addi	r4,r4,-1
    e9b0:	80e0703a 	and	r16,r16,r3
    e9b4:	2908703a 	and	r4,r5,r4
    e9b8:	003fad06 	br	e870 <__alt_data_end+0xfffb9140>
    e9bc:	0080690e 	bge	zero,r2,eb64 <__subdf3+0x3e0>
    e9c0:	50002f26 	beq	r10,zero,ea80 <__subdf3+0x2fc>
    e9c4:	0101ffc4 	movi	r4,2047
    e9c8:	813f9126 	beq	r16,r4,e810 <__alt_data_end+0xfffb90e0>
    e9cc:	18c02034 	orhi	r3,r3,128
    e9d0:	01000e04 	movi	r4,56
    e9d4:	2080b00e 	bge	r4,r2,ec98 <__subdf3+0x514>
    e9d8:	198cb03a 	or	r6,r3,r6
    e9dc:	300ec03a 	cmpne	r7,r6,zero
    e9e0:	0005883a 	mov	r2,zero
    e9e4:	3c4f883a 	add	r7,r7,r17
    e9e8:	3c63803a 	cmpltu	r17,r7,r17
    e9ec:	114b883a 	add	r5,r2,r5
    e9f0:	2c4b883a 	add	r5,r5,r17
    e9f4:	3823883a 	mov	r17,r7
    e9f8:	2880202c 	andhi	r2,r5,128
    e9fc:	10002e26 	beq	r2,zero,eab8 <__subdf3+0x334>
    ea00:	84000044 	addi	r16,r16,1
    ea04:	0081ffc4 	movi	r2,2047
    ea08:	8080de26 	beq	r16,r2,ed84 <__subdf3+0x600>
    ea0c:	00bfe034 	movhi	r2,65408
    ea10:	10bfffc4 	addi	r2,r2,-1
    ea14:	288a703a 	and	r5,r5,r2
    ea18:	880cd07a 	srli	r6,r17,1
    ea1c:	280897fa 	slli	r4,r5,31
    ea20:	88c0004c 	andi	r3,r17,1
    ea24:	30e2b03a 	or	r17,r6,r3
    ea28:	280ad07a 	srli	r5,r5,1
    ea2c:	8922b03a 	or	r17,r17,r4
    ea30:	003f7706 	br	e810 <__alt_data_end+0xfffb90e0>
    ea34:	1984b03a 	or	r2,r3,r6
    ea38:	103f6e26 	beq	r2,zero,e7f4 <__alt_data_end+0xfffb90c4>
    ea3c:	39c03fcc 	andi	r7,r7,255
    ea40:	003f6d06 	br	e7f8 <__alt_data_end+0xfffb90c8>
    ea44:	1146b03a 	or	r3,r2,r5
    ea48:	18003f26 	beq	r3,zero,eb48 <__subdf3+0x3c4>
    ea4c:	00c00434 	movhi	r3,16
    ea50:	29000234 	orhi	r4,r5,8
    ea54:	18ffffc4 	addi	r3,r3,-1
    ea58:	20c8703a 	and	r4,r4,r3
    ea5c:	003f8406 	br	e870 <__alt_data_end+0xfffb9140>
    ea60:	10bfffc4 	addi	r2,r2,-1
    ea64:	1000501e 	bne	r2,zero,eba8 <__subdf3+0x424>
    ea68:	898fc83a 	sub	r7,r17,r6
    ea6c:	89e3803a 	cmpltu	r17,r17,r7
    ea70:	28cbc83a 	sub	r5,r5,r3
    ea74:	2c4bc83a 	sub	r5,r5,r17
    ea78:	3823883a 	mov	r17,r7
    ea7c:	003fa106 	br	e904 <__alt_data_end+0xfffb91d4>
    ea80:	1988b03a 	or	r4,r3,r6
    ea84:	203f6226 	beq	r4,zero,e810 <__alt_data_end+0xfffb90e0>
    ea88:	10bfffc4 	addi	r2,r2,-1
    ea8c:	10009b1e 	bne	r2,zero,ecfc <__subdf3+0x578>
    ea90:	344d883a 	add	r6,r6,r17
    ea94:	3463803a 	cmpltu	r17,r6,r17
    ea98:	194b883a 	add	r5,r3,r5
    ea9c:	2c4b883a 	add	r5,r5,r17
    eaa0:	3023883a 	mov	r17,r6
    eaa4:	003fd406 	br	e9f8 <__alt_data_end+0xfffb92c8>
    eaa8:	1106b03a 	or	r3,r2,r4
    eaac:	1800b426 	beq	r3,zero,ed80 <__subdf3+0x5fc>
    eab0:	100b883a 	mov	r5,r2
    eab4:	2023883a 	mov	r17,r4
    eab8:	888001cc 	andi	r2,r17,7
    eabc:	103f561e 	bne	r2,zero,e818 <__alt_data_end+0xfffb90e8>
    eac0:	9200004c 	andi	r8,r18,1
    eac4:	003fb206 	br	e990 <__alt_data_end+0xfffb9260>
    eac8:	1000531e 	bne	r2,zero,ec18 <__subdf3+0x494>
    eacc:	80800044 	addi	r2,r16,1
    ead0:	1081ffcc 	andi	r2,r2,2047
    ead4:	01000044 	movi	r4,1
    ead8:	2080a00e 	bge	r4,r2,ed5c <__subdf3+0x5d8>
    eadc:	8985c83a 	sub	r2,r17,r6
    eae0:	8889803a 	cmpltu	r4,r17,r2
    eae4:	28e7c83a 	sub	r19,r5,r3
    eae8:	9927c83a 	sub	r19,r19,r4
    eaec:	9900202c 	andhi	r4,r19,128
    eaf0:	20006226 	beq	r4,zero,ec7c <__subdf3+0x4f8>
    eaf4:	3463c83a 	sub	r17,r6,r17
    eaf8:	194bc83a 	sub	r5,r3,r5
    eafc:	344d803a 	cmpltu	r6,r6,r17
    eb00:	29a7c83a 	sub	r19,r5,r6
    eb04:	3825883a 	mov	r18,r7
    eb08:	983f841e 	bne	r19,zero,e91c <__alt_data_end+0xfffb91ec>
    eb0c:	8809883a 	mov	r4,r17
    eb10:	000f2500 	call	f250 <__clzsi2>
    eb14:	10800804 	addi	r2,r2,32
    eb18:	10fffe04 	addi	r3,r2,-8
    eb1c:	010007c4 	movi	r4,31
    eb20:	20ff830e 	bge	r4,r3,e930 <__alt_data_end+0xfffb9200>
    eb24:	14fff604 	addi	r19,r2,-40
    eb28:	8ce6983a 	sll	r19,r17,r19
    eb2c:	0023883a 	mov	r17,zero
    eb30:	1c3f860e 	bge	r3,r16,e94c <__alt_data_end+0xfffb921c>
    eb34:	017fe034 	movhi	r5,65408
    eb38:	297fffc4 	addi	r5,r5,-1
    eb3c:	80e1c83a 	sub	r16,r16,r3
    eb40:	994a703a 	and	r5,r19,r5
    eb44:	003f3206 	br	e810 <__alt_data_end+0xfffb90e0>
    eb48:	0009883a 	mov	r4,zero
    eb4c:	0005883a 	mov	r2,zero
    eb50:	003f4706 	br	e870 <__alt_data_end+0xfffb9140>
    eb54:	198cb03a 	or	r6,r3,r6
    eb58:	300cc03a 	cmpne	r6,r6,zero
    eb5c:	0005883a 	mov	r2,zero
    eb60:	003f6306 	br	e8f0 <__alt_data_end+0xfffb91c0>
    eb64:	10009d1e 	bne	r2,zero,eddc <__subdf3+0x658>
    eb68:	81c00044 	addi	r7,r16,1
    eb6c:	3881ffcc 	andi	r2,r7,2047
    eb70:	02400044 	movi	r9,1
    eb74:	4880680e 	bge	r9,r2,ed18 <__subdf3+0x594>
    eb78:	0081ffc4 	movi	r2,2047
    eb7c:	3880ae26 	beq	r7,r2,ee38 <__subdf3+0x6b4>
    eb80:	344d883a 	add	r6,r6,r17
    eb84:	3463803a 	cmpltu	r17,r6,r17
    eb88:	194b883a 	add	r5,r3,r5
    eb8c:	2c4b883a 	add	r5,r5,r17
    eb90:	282297fa 	slli	r17,r5,31
    eb94:	300cd07a 	srli	r6,r6,1
    eb98:	280ad07a 	srli	r5,r5,1
    eb9c:	3821883a 	mov	r16,r7
    eba0:	89a2b03a 	or	r17,r17,r6
    eba4:	003f1a06 	br	e810 <__alt_data_end+0xfffb90e0>
    eba8:	0101ffc4 	movi	r4,2047
    ebac:	813f431e 	bne	r16,r4,e8bc <__alt_data_end+0xfffb918c>
    ebb0:	003f1706 	br	e810 <__alt_data_end+0xfffb90e0>
    ebb4:	80bff844 	addi	r2,r16,-31
    ebb8:	00c00804 	movi	r3,32
    ebbc:	9884d83a 	srl	r2,r19,r2
    ebc0:	28c05126 	beq	r5,r3,ed08 <__subdf3+0x584>
    ebc4:	00c00fc4 	movi	r3,63
    ebc8:	1c21c83a 	sub	r16,r3,r16
    ebcc:	9c26983a 	sll	r19,r19,r16
    ebd0:	9c62b03a 	or	r17,r19,r17
    ebd4:	8822c03a 	cmpne	r17,r17,zero
    ebd8:	88a2b03a 	or	r17,r17,r2
    ebdc:	000b883a 	mov	r5,zero
    ebe0:	0021883a 	mov	r16,zero
    ebe4:	003fb406 	br	eab8 <__alt_data_end+0xfffb9388>
    ebe8:	113ff804 	addi	r4,r2,-32
    ebec:	01c00804 	movi	r7,32
    ebf0:	1908d83a 	srl	r4,r3,r4
    ebf4:	11c04626 	beq	r2,r7,ed10 <__subdf3+0x58c>
    ebf8:	01c01004 	movi	r7,64
    ebfc:	3885c83a 	sub	r2,r7,r2
    ec00:	1884983a 	sll	r2,r3,r2
    ec04:	118cb03a 	or	r6,r2,r6
    ec08:	300cc03a 	cmpne	r6,r6,zero
    ec0c:	310cb03a 	or	r6,r6,r4
    ec10:	0005883a 	mov	r2,zero
    ec14:	003f3606 	br	e8f0 <__alt_data_end+0xfffb91c0>
    ec18:	80002b26 	beq	r16,zero,ecc8 <__subdf3+0x544>
    ec1c:	0101ffc4 	movi	r4,2047
    ec20:	51006926 	beq	r10,r4,edc8 <__subdf3+0x644>
    ec24:	0085c83a 	sub	r2,zero,r2
    ec28:	29402034 	orhi	r5,r5,128
    ec2c:	01000e04 	movi	r4,56
    ec30:	20807d16 	blt	r4,r2,ee28 <__subdf3+0x6a4>
    ec34:	010007c4 	movi	r4,31
    ec38:	2080d916 	blt	r4,r2,efa0 <__subdf3+0x81c>
    ec3c:	01000804 	movi	r4,32
    ec40:	2089c83a 	sub	r4,r4,r2
    ec44:	2912983a 	sll	r9,r5,r4
    ec48:	8890d83a 	srl	r8,r17,r2
    ec4c:	8908983a 	sll	r4,r17,r4
    ec50:	2884d83a 	srl	r2,r5,r2
    ec54:	4a22b03a 	or	r17,r9,r8
    ec58:	2008c03a 	cmpne	r4,r4,zero
    ec5c:	8922b03a 	or	r17,r17,r4
    ec60:	3463c83a 	sub	r17,r6,r17
    ec64:	1885c83a 	sub	r2,r3,r2
    ec68:	344d803a 	cmpltu	r6,r6,r17
    ec6c:	118bc83a 	sub	r5,r2,r6
    ec70:	5021883a 	mov	r16,r10
    ec74:	3825883a 	mov	r18,r7
    ec78:	003f2206 	br	e904 <__alt_data_end+0xfffb91d4>
    ec7c:	9886b03a 	or	r3,r19,r2
    ec80:	18001c1e 	bne	r3,zero,ecf4 <__subdf3+0x570>
    ec84:	0011883a 	mov	r8,zero
    ec88:	000b883a 	mov	r5,zero
    ec8c:	0023883a 	mov	r17,zero
    ec90:	0021883a 	mov	r16,zero
    ec94:	003f3e06 	br	e990 <__alt_data_end+0xfffb9260>
    ec98:	010007c4 	movi	r4,31
    ec9c:	20803c16 	blt	r4,r2,ed90 <__subdf3+0x60c>
    eca0:	01000804 	movi	r4,32
    eca4:	2089c83a 	sub	r4,r4,r2
    eca8:	1912983a 	sll	r9,r3,r4
    ecac:	308ed83a 	srl	r7,r6,r2
    ecb0:	3108983a 	sll	r4,r6,r4
    ecb4:	1884d83a 	srl	r2,r3,r2
    ecb8:	49ceb03a 	or	r7,r9,r7
    ecbc:	2008c03a 	cmpne	r4,r4,zero
    ecc0:	390eb03a 	or	r7,r7,r4
    ecc4:	003f4706 	br	e9e4 <__alt_data_end+0xfffb92b4>
    ecc8:	2c48b03a 	or	r4,r5,r17
    eccc:	20003e26 	beq	r4,zero,edc8 <__subdf3+0x644>
    ecd0:	0084303a 	nor	r2,zero,r2
    ecd4:	10003a1e 	bne	r2,zero,edc0 <__subdf3+0x63c>
    ecd8:	3463c83a 	sub	r17,r6,r17
    ecdc:	194bc83a 	sub	r5,r3,r5
    ece0:	344d803a 	cmpltu	r6,r6,r17
    ece4:	298bc83a 	sub	r5,r5,r6
    ece8:	5021883a 	mov	r16,r10
    ecec:	3825883a 	mov	r18,r7
    ecf0:	003f0406 	br	e904 <__alt_data_end+0xfffb91d4>
    ecf4:	1023883a 	mov	r17,r2
    ecf8:	003f0706 	br	e918 <__alt_data_end+0xfffb91e8>
    ecfc:	0101ffc4 	movi	r4,2047
    ed00:	813f331e 	bne	r16,r4,e9d0 <__alt_data_end+0xfffb92a0>
    ed04:	003ec206 	br	e810 <__alt_data_end+0xfffb90e0>
    ed08:	0027883a 	mov	r19,zero
    ed0c:	003fb006 	br	ebd0 <__alt_data_end+0xfffb94a0>
    ed10:	0005883a 	mov	r2,zero
    ed14:	003fbb06 	br	ec04 <__alt_data_end+0xfffb94d4>
    ed18:	2c44b03a 	or	r2,r5,r17
    ed1c:	80008b1e 	bne	r16,zero,ef4c <__subdf3+0x7c8>
    ed20:	1000b526 	beq	r2,zero,eff8 <__subdf3+0x874>
    ed24:	1984b03a 	or	r2,r3,r6
    ed28:	103eb926 	beq	r2,zero,e810 <__alt_data_end+0xfffb90e0>
    ed2c:	3449883a 	add	r4,r6,r17
    ed30:	2463803a 	cmpltu	r17,r4,r17
    ed34:	194b883a 	add	r5,r3,r5
    ed38:	2c4b883a 	add	r5,r5,r17
    ed3c:	2880202c 	andhi	r2,r5,128
    ed40:	2023883a 	mov	r17,r4
    ed44:	103f5c26 	beq	r2,zero,eab8 <__alt_data_end+0xfffb9388>
    ed48:	00bfe034 	movhi	r2,65408
    ed4c:	10bfffc4 	addi	r2,r2,-1
    ed50:	4821883a 	mov	r16,r9
    ed54:	288a703a 	and	r5,r5,r2
    ed58:	003ead06 	br	e810 <__alt_data_end+0xfffb90e0>
    ed5c:	2c44b03a 	or	r2,r5,r17
    ed60:	8000291e 	bne	r16,zero,ee08 <__subdf3+0x684>
    ed64:	10004f1e 	bne	r2,zero,eea4 <__subdf3+0x720>
    ed68:	1984b03a 	or	r2,r3,r6
    ed6c:	10000426 	beq	r2,zero,ed80 <__subdf3+0x5fc>
    ed70:	180b883a 	mov	r5,r3
    ed74:	3023883a 	mov	r17,r6
    ed78:	3825883a 	mov	r18,r7
    ed7c:	003ea406 	br	e810 <__alt_data_end+0xfffb90e0>
    ed80:	0011883a 	mov	r8,zero
    ed84:	000b883a 	mov	r5,zero
    ed88:	0023883a 	mov	r17,zero
    ed8c:	003f0006 	br	e990 <__alt_data_end+0xfffb9260>
    ed90:	11fff804 	addi	r7,r2,-32
    ed94:	19c8d83a 	srl	r4,r3,r7
    ed98:	01c00804 	movi	r7,32
    ed9c:	11c07e26 	beq	r2,r7,ef98 <__subdf3+0x814>
    eda0:	01c01004 	movi	r7,64
    eda4:	3885c83a 	sub	r2,r7,r2
    eda8:	1884983a 	sll	r2,r3,r2
    edac:	118cb03a 	or	r6,r2,r6
    edb0:	300ec03a 	cmpne	r7,r6,zero
    edb4:	390eb03a 	or	r7,r7,r4
    edb8:	0005883a 	mov	r2,zero
    edbc:	003f0906 	br	e9e4 <__alt_data_end+0xfffb92b4>
    edc0:	0101ffc4 	movi	r4,2047
    edc4:	513f991e 	bne	r10,r4,ec2c <__alt_data_end+0xfffb94fc>
    edc8:	180b883a 	mov	r5,r3
    edcc:	3023883a 	mov	r17,r6
    edd0:	5021883a 	mov	r16,r10
    edd4:	3825883a 	mov	r18,r7
    edd8:	003e8d06 	br	e810 <__alt_data_end+0xfffb90e0>
    eddc:	80001a1e 	bne	r16,zero,ee48 <__subdf3+0x6c4>
    ede0:	2c48b03a 	or	r4,r5,r17
    ede4:	20005526 	beq	r4,zero,ef3c <__subdf3+0x7b8>
    ede8:	0084303a 	nor	r2,zero,r2
    edec:	1000511e 	bne	r2,zero,ef34 <__subdf3+0x7b0>
    edf0:	89a3883a 	add	r17,r17,r6
    edf4:	194b883a 	add	r5,r3,r5
    edf8:	898d803a 	cmpltu	r6,r17,r6
    edfc:	298b883a 	add	r5,r5,r6
    ee00:	5021883a 	mov	r16,r10
    ee04:	003efc06 	br	e9f8 <__alt_data_end+0xfffb92c8>
    ee08:	1000341e 	bne	r2,zero,eedc <__subdf3+0x758>
    ee0c:	1984b03a 	or	r2,r3,r6
    ee10:	10006f26 	beq	r2,zero,efd0 <__subdf3+0x84c>
    ee14:	180b883a 	mov	r5,r3
    ee18:	3023883a 	mov	r17,r6
    ee1c:	3825883a 	mov	r18,r7
    ee20:	0401ffc4 	movi	r16,2047
    ee24:	003e7a06 	br	e810 <__alt_data_end+0xfffb90e0>
    ee28:	2c62b03a 	or	r17,r5,r17
    ee2c:	8822c03a 	cmpne	r17,r17,zero
    ee30:	0005883a 	mov	r2,zero
    ee34:	003f8a06 	br	ec60 <__alt_data_end+0xfffb9530>
    ee38:	3821883a 	mov	r16,r7
    ee3c:	000b883a 	mov	r5,zero
    ee40:	0023883a 	mov	r17,zero
    ee44:	003ed206 	br	e990 <__alt_data_end+0xfffb9260>
    ee48:	0101ffc4 	movi	r4,2047
    ee4c:	51003b26 	beq	r10,r4,ef3c <__subdf3+0x7b8>
    ee50:	0085c83a 	sub	r2,zero,r2
    ee54:	29402034 	orhi	r5,r5,128
    ee58:	01000e04 	movi	r4,56
    ee5c:	20806216 	blt	r4,r2,efe8 <__subdf3+0x864>
    ee60:	010007c4 	movi	r4,31
    ee64:	20806b16 	blt	r4,r2,f014 <__subdf3+0x890>
    ee68:	01000804 	movi	r4,32
    ee6c:	2089c83a 	sub	r4,r4,r2
    ee70:	2912983a 	sll	r9,r5,r4
    ee74:	888ed83a 	srl	r7,r17,r2
    ee78:	8908983a 	sll	r4,r17,r4
    ee7c:	2884d83a 	srl	r2,r5,r2
    ee80:	49e2b03a 	or	r17,r9,r7
    ee84:	2008c03a 	cmpne	r4,r4,zero
    ee88:	8922b03a 	or	r17,r17,r4
    ee8c:	89a3883a 	add	r17,r17,r6
    ee90:	10c5883a 	add	r2,r2,r3
    ee94:	898d803a 	cmpltu	r6,r17,r6
    ee98:	118b883a 	add	r5,r2,r6
    ee9c:	5021883a 	mov	r16,r10
    eea0:	003ed506 	br	e9f8 <__alt_data_end+0xfffb92c8>
    eea4:	1984b03a 	or	r2,r3,r6
    eea8:	103e5926 	beq	r2,zero,e810 <__alt_data_end+0xfffb90e0>
    eeac:	8989c83a 	sub	r4,r17,r6
    eeb0:	8911803a 	cmpltu	r8,r17,r4
    eeb4:	28c5c83a 	sub	r2,r5,r3
    eeb8:	1205c83a 	sub	r2,r2,r8
    eebc:	1200202c 	andhi	r8,r2,128
    eec0:	403ef926 	beq	r8,zero,eaa8 <__alt_data_end+0xfffb9378>
    eec4:	3463c83a 	sub	r17,r6,r17
    eec8:	194bc83a 	sub	r5,r3,r5
    eecc:	344d803a 	cmpltu	r6,r6,r17
    eed0:	298bc83a 	sub	r5,r5,r6
    eed4:	3825883a 	mov	r18,r7
    eed8:	003e4d06 	br	e810 <__alt_data_end+0xfffb90e0>
    eedc:	1984b03a 	or	r2,r3,r6
    eee0:	10002b26 	beq	r2,zero,ef90 <__subdf3+0x80c>
    eee4:	2808d0fa 	srli	r4,r5,3
    eee8:	8822d0fa 	srli	r17,r17,3
    eeec:	280a977a 	slli	r5,r5,29
    eef0:	2080022c 	andhi	r2,r4,8
    eef4:	2c62b03a 	or	r17,r5,r17
    eef8:	10000826 	beq	r2,zero,ef1c <__subdf3+0x798>
    eefc:	1810d0fa 	srli	r8,r3,3
    ef00:	4080022c 	andhi	r2,r8,8
    ef04:	1000051e 	bne	r2,zero,ef1c <__subdf3+0x798>
    ef08:	300cd0fa 	srli	r6,r6,3
    ef0c:	1804977a 	slli	r2,r3,29
    ef10:	4009883a 	mov	r4,r8
    ef14:	3825883a 	mov	r18,r7
    ef18:	11a2b03a 	or	r17,r2,r6
    ef1c:	880ad77a 	srli	r5,r17,29
    ef20:	200890fa 	slli	r4,r4,3
    ef24:	882290fa 	slli	r17,r17,3
    ef28:	0401ffc4 	movi	r16,2047
    ef2c:	290ab03a 	or	r5,r5,r4
    ef30:	003e3706 	br	e810 <__alt_data_end+0xfffb90e0>
    ef34:	0101ffc4 	movi	r4,2047
    ef38:	513fc71e 	bne	r10,r4,ee58 <__alt_data_end+0xfffb9728>
    ef3c:	180b883a 	mov	r5,r3
    ef40:	3023883a 	mov	r17,r6
    ef44:	5021883a 	mov	r16,r10
    ef48:	003e3106 	br	e810 <__alt_data_end+0xfffb90e0>
    ef4c:	10002d26 	beq	r2,zero,f004 <__subdf3+0x880>
    ef50:	1984b03a 	or	r2,r3,r6
    ef54:	10000e26 	beq	r2,zero,ef90 <__subdf3+0x80c>
    ef58:	2808d0fa 	srli	r4,r5,3
    ef5c:	8822d0fa 	srli	r17,r17,3
    ef60:	280a977a 	slli	r5,r5,29
    ef64:	2080022c 	andhi	r2,r4,8
    ef68:	2c62b03a 	or	r17,r5,r17
    ef6c:	103feb26 	beq	r2,zero,ef1c <__alt_data_end+0xfffb97ec>
    ef70:	180ed0fa 	srli	r7,r3,3
    ef74:	3880022c 	andhi	r2,r7,8
    ef78:	103fe81e 	bne	r2,zero,ef1c <__alt_data_end+0xfffb97ec>
    ef7c:	300cd0fa 	srli	r6,r6,3
    ef80:	1804977a 	slli	r2,r3,29
    ef84:	3809883a 	mov	r4,r7
    ef88:	11a2b03a 	or	r17,r2,r6
    ef8c:	003fe306 	br	ef1c <__alt_data_end+0xfffb97ec>
    ef90:	0401ffc4 	movi	r16,2047
    ef94:	003e1e06 	br	e810 <__alt_data_end+0xfffb90e0>
    ef98:	0005883a 	mov	r2,zero
    ef9c:	003f8306 	br	edac <__alt_data_end+0xfffb967c>
    efa0:	113ff804 	addi	r4,r2,-32
    efa4:	02000804 	movi	r8,32
    efa8:	2908d83a 	srl	r4,r5,r4
    efac:	12002526 	beq	r2,r8,f044 <__subdf3+0x8c0>
    efb0:	02001004 	movi	r8,64
    efb4:	4085c83a 	sub	r2,r8,r2
    efb8:	288a983a 	sll	r5,r5,r2
    efbc:	2c62b03a 	or	r17,r5,r17
    efc0:	8822c03a 	cmpne	r17,r17,zero
    efc4:	8922b03a 	or	r17,r17,r4
    efc8:	0005883a 	mov	r2,zero
    efcc:	003f2406 	br	ec60 <__alt_data_end+0xfffb9530>
    efd0:	01402034 	movhi	r5,128
    efd4:	0011883a 	mov	r8,zero
    efd8:	297fffc4 	addi	r5,r5,-1
    efdc:	047ffe04 	movi	r17,-8
    efe0:	0401ffc4 	movi	r16,2047
    efe4:	003e6a06 	br	e990 <__alt_data_end+0xfffb9260>
    efe8:	2c62b03a 	or	r17,r5,r17
    efec:	8822c03a 	cmpne	r17,r17,zero
    eff0:	0005883a 	mov	r2,zero
    eff4:	003fa506 	br	ee8c <__alt_data_end+0xfffb975c>
    eff8:	180b883a 	mov	r5,r3
    effc:	3023883a 	mov	r17,r6
    f000:	003e0306 	br	e810 <__alt_data_end+0xfffb90e0>
    f004:	180b883a 	mov	r5,r3
    f008:	3023883a 	mov	r17,r6
    f00c:	0401ffc4 	movi	r16,2047
    f010:	003dff06 	br	e810 <__alt_data_end+0xfffb90e0>
    f014:	113ff804 	addi	r4,r2,-32
    f018:	01c00804 	movi	r7,32
    f01c:	2908d83a 	srl	r4,r5,r4
    f020:	11c00a26 	beq	r2,r7,f04c <__subdf3+0x8c8>
    f024:	01c01004 	movi	r7,64
    f028:	3885c83a 	sub	r2,r7,r2
    f02c:	288a983a 	sll	r5,r5,r2
    f030:	2c62b03a 	or	r17,r5,r17
    f034:	8822c03a 	cmpne	r17,r17,zero
    f038:	8922b03a 	or	r17,r17,r4
    f03c:	0005883a 	mov	r2,zero
    f040:	003f9206 	br	ee8c <__alt_data_end+0xfffb975c>
    f044:	000b883a 	mov	r5,zero
    f048:	003fdc06 	br	efbc <__alt_data_end+0xfffb988c>
    f04c:	000b883a 	mov	r5,zero
    f050:	003ff706 	br	f030 <__alt_data_end+0xfffb9900>

0000f054 <__fixdfsi>:
    f054:	2806d53a 	srli	r3,r5,20
    f058:	00800434 	movhi	r2,16
    f05c:	10bfffc4 	addi	r2,r2,-1
    f060:	18c1ffcc 	andi	r3,r3,2047
    f064:	0180ff84 	movi	r6,1022
    f068:	2884703a 	and	r2,r5,r2
    f06c:	280ad7fa 	srli	r5,r5,31
    f070:	30c0130e 	bge	r6,r3,f0c0 <__fixdfsi+0x6c>
    f074:	01810744 	movi	r6,1053
    f078:	30c00d16 	blt	r6,r3,f0b0 <__fixdfsi+0x5c>
    f07c:	01810cc4 	movi	r6,1075
    f080:	30cdc83a 	sub	r6,r6,r3
    f084:	01c007c4 	movi	r7,31
    f088:	10800434 	orhi	r2,r2,16
    f08c:	39800e0e 	bge	r7,r6,f0c8 <__fixdfsi+0x74>
    f090:	010104c4 	movi	r4,1043
    f094:	20c7c83a 	sub	r3,r4,r3
    f098:	10c6d83a 	srl	r3,r2,r3
    f09c:	29403fcc 	andi	r5,r5,255
    f0a0:	0145c83a 	sub	r2,zero,r5
    f0a4:	1884f03a 	xor	r2,r3,r2
    f0a8:	1145883a 	add	r2,r2,r5
    f0ac:	f800283a 	ret
    f0b0:	00a00034 	movhi	r2,32768
    f0b4:	10bfffc4 	addi	r2,r2,-1
    f0b8:	2885883a 	add	r2,r5,r2
    f0bc:	f800283a 	ret
    f0c0:	0005883a 	mov	r2,zero
    f0c4:	f800283a 	ret
    f0c8:	18fefb44 	addi	r3,r3,-1043
    f0cc:	2188d83a 	srl	r4,r4,r6
    f0d0:	10c6983a 	sll	r3,r2,r3
    f0d4:	20c6b03a 	or	r3,r4,r3
    f0d8:	003ff006 	br	f09c <__alt_data_end+0xfffb996c>

0000f0dc <__floatsidf>:
    f0dc:	defffd04 	addi	sp,sp,-12
    f0e0:	dc400115 	stw	r17,4(sp)
    f0e4:	dfc00215 	stw	ra,8(sp)
    f0e8:	dc000015 	stw	r16,0(sp)
    f0ec:	2023883a 	mov	r17,r4
    f0f0:	20001426 	beq	r4,zero,f144 <__floatsidf+0x68>
    f0f4:	2020d7fa 	srli	r16,r4,31
    f0f8:	80000126 	beq	r16,zero,f100 <__floatsidf+0x24>
    f0fc:	0123c83a 	sub	r17,zero,r4
    f100:	8809883a 	mov	r4,r17
    f104:	000f2500 	call	f250 <__clzsi2>
    f108:	01410784 	movi	r5,1054
    f10c:	00c00284 	movi	r3,10
    f110:	288bc83a 	sub	r5,r5,r2
    f114:	18801c16 	blt	r3,r2,f188 <__floatsidf+0xac>
    f118:	00c002c4 	movi	r3,11
    f11c:	1887c83a 	sub	r3,r3,r2
    f120:	88c8d83a 	srl	r4,r17,r3
    f124:	00c00434 	movhi	r3,16
    f128:	18ffffc4 	addi	r3,r3,-1
    f12c:	10800544 	addi	r2,r2,21
    f130:	20c8703a 	and	r4,r4,r3
    f134:	8884983a 	sll	r2,r17,r2
    f138:	28c1ffcc 	andi	r3,r5,2047
    f13c:	800d883a 	mov	r6,r16
    f140:	00000406 	br	f154 <__floatsidf+0x78>
    f144:	000d883a 	mov	r6,zero
    f148:	0007883a 	mov	r3,zero
    f14c:	0009883a 	mov	r4,zero
    f150:	0005883a 	mov	r2,zero
    f154:	180a953a 	slli	r5,r3,20
    f158:	31803fcc 	andi	r6,r6,255
    f15c:	00c00434 	movhi	r3,16
    f160:	300c97fa 	slli	r6,r6,31
    f164:	18ffffc4 	addi	r3,r3,-1
    f168:	20c6703a 	and	r3,r4,r3
    f16c:	1946b03a 	or	r3,r3,r5
    f170:	1986b03a 	or	r3,r3,r6
    f174:	dfc00217 	ldw	ra,8(sp)
    f178:	dc400117 	ldw	r17,4(sp)
    f17c:	dc000017 	ldw	r16,0(sp)
    f180:	dec00304 	addi	sp,sp,12
    f184:	f800283a 	ret
    f188:	10fffd44 	addi	r3,r2,-11
    f18c:	88c8983a 	sll	r4,r17,r3
    f190:	00800434 	movhi	r2,16
    f194:	10bfffc4 	addi	r2,r2,-1
    f198:	2088703a 	and	r4,r4,r2
    f19c:	28c1ffcc 	andi	r3,r5,2047
    f1a0:	800d883a 	mov	r6,r16
    f1a4:	0005883a 	mov	r2,zero
    f1a8:	003fea06 	br	f154 <__alt_data_end+0xfffb9a24>

0000f1ac <__floatunsidf>:
    f1ac:	defffe04 	addi	sp,sp,-8
    f1b0:	dc000015 	stw	r16,0(sp)
    f1b4:	dfc00115 	stw	ra,4(sp)
    f1b8:	2021883a 	mov	r16,r4
    f1bc:	20001026 	beq	r4,zero,f200 <__floatunsidf+0x54>
    f1c0:	000f2500 	call	f250 <__clzsi2>
    f1c4:	01410784 	movi	r5,1054
    f1c8:	100d883a 	mov	r6,r2
    f1cc:	288bc83a 	sub	r5,r5,r2
    f1d0:	00800284 	movi	r2,10
    f1d4:	11801616 	blt	r2,r6,f230 <__floatunsidf+0x84>
    f1d8:	008002c4 	movi	r2,11
    f1dc:	1185c83a 	sub	r2,r2,r6
    f1e0:	8084d83a 	srl	r2,r16,r2
    f1e4:	00c00434 	movhi	r3,16
    f1e8:	31c00544 	addi	r7,r6,21
    f1ec:	18ffffc4 	addi	r3,r3,-1
    f1f0:	81e0983a 	sll	r16,r16,r7
    f1f4:	10cc703a 	and	r6,r2,r3
    f1f8:	2941ffcc 	andi	r5,r5,2047
    f1fc:	00000206 	br	f208 <__floatunsidf+0x5c>
    f200:	000b883a 	mov	r5,zero
    f204:	000d883a 	mov	r6,zero
    f208:	280a953a 	slli	r5,r5,20
    f20c:	00c00434 	movhi	r3,16
    f210:	18ffffc4 	addi	r3,r3,-1
    f214:	30c6703a 	and	r3,r6,r3
    f218:	8005883a 	mov	r2,r16
    f21c:	1946b03a 	or	r3,r3,r5
    f220:	dfc00117 	ldw	ra,4(sp)
    f224:	dc000017 	ldw	r16,0(sp)
    f228:	dec00204 	addi	sp,sp,8
    f22c:	f800283a 	ret
    f230:	31bffd44 	addi	r6,r6,-11
    f234:	818c983a 	sll	r6,r16,r6
    f238:	00800434 	movhi	r2,16
    f23c:	10bfffc4 	addi	r2,r2,-1
    f240:	2941ffcc 	andi	r5,r5,2047
    f244:	0021883a 	mov	r16,zero
    f248:	308c703a 	and	r6,r6,r2
    f24c:	003fee06 	br	f208 <__alt_data_end+0xfffb9ad8>

0000f250 <__clzsi2>:
    f250:	00bfffd4 	movui	r2,65535
    f254:	11000b36 	bltu	r2,r4,f284 <__clzsi2+0x34>
    f258:	00803fc4 	movi	r2,255
    f25c:	1100122e 	bgeu	r2,r4,f2a8 <__clzsi2+0x58>
    f260:	00c00204 	movi	r3,8
    f264:	01400604 	movi	r5,24
    f268:	20c8d83a 	srl	r4,r4,r3
    f26c:	00800074 	movhi	r2,1
    f270:	10891e04 	addi	r2,r2,9336
    f274:	1109883a 	add	r4,r2,r4
    f278:	20800003 	ldbu	r2,0(r4)
    f27c:	2885c83a 	sub	r2,r5,r2
    f280:	f800283a 	ret
    f284:	00804034 	movhi	r2,256
    f288:	10bfffc4 	addi	r2,r2,-1
    f28c:	11000336 	bltu	r2,r4,f29c <__clzsi2+0x4c>
    f290:	00c00404 	movi	r3,16
    f294:	180b883a 	mov	r5,r3
    f298:	003ff306 	br	f268 <__alt_data_end+0xfffb9b38>
    f29c:	00c00604 	movi	r3,24
    f2a0:	01400204 	movi	r5,8
    f2a4:	003ff006 	br	f268 <__alt_data_end+0xfffb9b38>
    f2a8:	0007883a 	mov	r3,zero
    f2ac:	01400804 	movi	r5,32
    f2b0:	003fed06 	br	f268 <__alt_data_end+0xfffb9b38>

0000f2b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f2b4:	defffe04 	addi	sp,sp,-8
    f2b8:	dfc00115 	stw	ra,4(sp)
    f2bc:	df000015 	stw	fp,0(sp)
    f2c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f2c4:	00800074 	movhi	r2,1
    f2c8:	10902104 	addi	r2,r2,16516
    f2cc:	10800017 	ldw	r2,0(r2)
    f2d0:	10000526 	beq	r2,zero,f2e8 <alt_get_errno+0x34>
    f2d4:	00800074 	movhi	r2,1
    f2d8:	10902104 	addi	r2,r2,16516
    f2dc:	10800017 	ldw	r2,0(r2)
    f2e0:	103ee83a 	callr	r2
    f2e4:	00000206 	br	f2f0 <alt_get_errno+0x3c>
    f2e8:	00800074 	movhi	r2,1
    f2ec:	1096ec04 	addi	r2,r2,23472
}
    f2f0:	e037883a 	mov	sp,fp
    f2f4:	dfc00117 	ldw	ra,4(sp)
    f2f8:	df000017 	ldw	fp,0(sp)
    f2fc:	dec00204 	addi	sp,sp,8
    f300:	f800283a 	ret

0000f304 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    f304:	defffb04 	addi	sp,sp,-20
    f308:	dfc00415 	stw	ra,16(sp)
    f30c:	df000315 	stw	fp,12(sp)
    f310:	df000304 	addi	fp,sp,12
    f314:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    f318:	e0bfff17 	ldw	r2,-4(fp)
    f31c:	10000816 	blt	r2,zero,f340 <close+0x3c>
    f320:	e13fff17 	ldw	r4,-4(fp)
    f324:	01400304 	movi	r5,12
    f328:	000ca900 	call	ca90 <__mulsi3>
    f32c:	1007883a 	mov	r3,r2
    f330:	00800074 	movhi	r2,1
    f334:	108b9e04 	addi	r2,r2,11896
    f338:	1885883a 	add	r2,r3,r2
    f33c:	00000106 	br	f344 <close+0x40>
    f340:	0005883a 	mov	r2,zero
    f344:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    f348:	e0bffd17 	ldw	r2,-12(fp)
    f34c:	10001926 	beq	r2,zero,f3b4 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    f350:	e0bffd17 	ldw	r2,-12(fp)
    f354:	10800017 	ldw	r2,0(r2)
    f358:	10800417 	ldw	r2,16(r2)
    f35c:	10000626 	beq	r2,zero,f378 <close+0x74>
    f360:	e0bffd17 	ldw	r2,-12(fp)
    f364:	10800017 	ldw	r2,0(r2)
    f368:	10800417 	ldw	r2,16(r2)
    f36c:	e13ffd17 	ldw	r4,-12(fp)
    f370:	103ee83a 	callr	r2
    f374:	00000106 	br	f37c <close+0x78>
    f378:	0005883a 	mov	r2,zero
    f37c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    f380:	e13fff17 	ldw	r4,-4(fp)
    f384:	000fa280 	call	fa28 <alt_release_fd>
    if (rval < 0)
    f388:	e0bffe17 	ldw	r2,-8(fp)
    f38c:	1000070e 	bge	r2,zero,f3ac <close+0xa8>
    {
      ALT_ERRNO = -rval;
    f390:	000f2b40 	call	f2b4 <alt_get_errno>
    f394:	1007883a 	mov	r3,r2
    f398:	e0bffe17 	ldw	r2,-8(fp)
    f39c:	0085c83a 	sub	r2,zero,r2
    f3a0:	18800015 	stw	r2,0(r3)
      return -1;
    f3a4:	00bfffc4 	movi	r2,-1
    f3a8:	00000706 	br	f3c8 <close+0xc4>
    }
    return 0;
    f3ac:	0005883a 	mov	r2,zero
    f3b0:	00000506 	br	f3c8 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    f3b4:	000f2b40 	call	f2b4 <alt_get_errno>
    f3b8:	1007883a 	mov	r3,r2
    f3bc:	00801444 	movi	r2,81
    f3c0:	18800015 	stw	r2,0(r3)
    return -1;
    f3c4:	00bfffc4 	movi	r2,-1
  }
}
    f3c8:	e037883a 	mov	sp,fp
    f3cc:	dfc00117 	ldw	ra,4(sp)
    f3d0:	df000017 	ldw	fp,0(sp)
    f3d4:	dec00204 	addi	sp,sp,8
    f3d8:	f800283a 	ret

0000f3dc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    f3dc:	defffc04 	addi	sp,sp,-16
    f3e0:	df000315 	stw	fp,12(sp)
    f3e4:	df000304 	addi	fp,sp,12
    f3e8:	e13ffd15 	stw	r4,-12(fp)
    f3ec:	e17ffe15 	stw	r5,-8(fp)
    f3f0:	e1bfff15 	stw	r6,-4(fp)
  return len;
    f3f4:	e0bfff17 	ldw	r2,-4(fp)
}
    f3f8:	e037883a 	mov	sp,fp
    f3fc:	df000017 	ldw	fp,0(sp)
    f400:	dec00104 	addi	sp,sp,4
    f404:	f800283a 	ret

0000f408 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f408:	defffe04 	addi	sp,sp,-8
    f40c:	dfc00115 	stw	ra,4(sp)
    f410:	df000015 	stw	fp,0(sp)
    f414:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f418:	00800074 	movhi	r2,1
    f41c:	10902104 	addi	r2,r2,16516
    f420:	10800017 	ldw	r2,0(r2)
    f424:	10000526 	beq	r2,zero,f43c <alt_get_errno+0x34>
    f428:	00800074 	movhi	r2,1
    f42c:	10902104 	addi	r2,r2,16516
    f430:	10800017 	ldw	r2,0(r2)
    f434:	103ee83a 	callr	r2
    f438:	00000206 	br	f444 <alt_get_errno+0x3c>
    f43c:	00800074 	movhi	r2,1
    f440:	1096ec04 	addi	r2,r2,23472
}
    f444:	e037883a 	mov	sp,fp
    f448:	dfc00117 	ldw	ra,4(sp)
    f44c:	df000017 	ldw	fp,0(sp)
    f450:	dec00204 	addi	sp,sp,8
    f454:	f800283a 	ret

0000f458 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    f458:	defffb04 	addi	sp,sp,-20
    f45c:	dfc00415 	stw	ra,16(sp)
    f460:	df000315 	stw	fp,12(sp)
    f464:	df000304 	addi	fp,sp,12
    f468:	e13ffe15 	stw	r4,-8(fp)
    f46c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f470:	e0bffe17 	ldw	r2,-8(fp)
    f474:	10000816 	blt	r2,zero,f498 <fstat+0x40>
    f478:	e13ffe17 	ldw	r4,-8(fp)
    f47c:	01400304 	movi	r5,12
    f480:	000ca900 	call	ca90 <__mulsi3>
    f484:	1007883a 	mov	r3,r2
    f488:	00800074 	movhi	r2,1
    f48c:	108b9e04 	addi	r2,r2,11896
    f490:	1885883a 	add	r2,r3,r2
    f494:	00000106 	br	f49c <fstat+0x44>
    f498:	0005883a 	mov	r2,zero
    f49c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    f4a0:	e0bffd17 	ldw	r2,-12(fp)
    f4a4:	10001026 	beq	r2,zero,f4e8 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    f4a8:	e0bffd17 	ldw	r2,-12(fp)
    f4ac:	10800017 	ldw	r2,0(r2)
    f4b0:	10800817 	ldw	r2,32(r2)
    f4b4:	10000726 	beq	r2,zero,f4d4 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
    f4b8:	e0bffd17 	ldw	r2,-12(fp)
    f4bc:	10800017 	ldw	r2,0(r2)
    f4c0:	10800817 	ldw	r2,32(r2)
    f4c4:	e13ffd17 	ldw	r4,-12(fp)
    f4c8:	e17fff17 	ldw	r5,-4(fp)
    f4cc:	103ee83a 	callr	r2
    f4d0:	00000a06 	br	f4fc <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    f4d4:	e0bfff17 	ldw	r2,-4(fp)
    f4d8:	00c80004 	movi	r3,8192
    f4dc:	10c00115 	stw	r3,4(r2)
      return 0;
    f4e0:	0005883a 	mov	r2,zero
    f4e4:	00000506 	br	f4fc <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    f4e8:	000f4080 	call	f408 <alt_get_errno>
    f4ec:	1007883a 	mov	r3,r2
    f4f0:	00801444 	movi	r2,81
    f4f4:	18800015 	stw	r2,0(r3)
    return -1;
    f4f8:	00bfffc4 	movi	r2,-1
  }
}
    f4fc:	e037883a 	mov	sp,fp
    f500:	dfc00117 	ldw	ra,4(sp)
    f504:	df000017 	ldw	fp,0(sp)
    f508:	dec00204 	addi	sp,sp,8
    f50c:	f800283a 	ret

0000f510 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f510:	defffe04 	addi	sp,sp,-8
    f514:	dfc00115 	stw	ra,4(sp)
    f518:	df000015 	stw	fp,0(sp)
    f51c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f520:	00800074 	movhi	r2,1
    f524:	10902104 	addi	r2,r2,16516
    f528:	10800017 	ldw	r2,0(r2)
    f52c:	10000526 	beq	r2,zero,f544 <alt_get_errno+0x34>
    f530:	00800074 	movhi	r2,1
    f534:	10902104 	addi	r2,r2,16516
    f538:	10800017 	ldw	r2,0(r2)
    f53c:	103ee83a 	callr	r2
    f540:	00000206 	br	f54c <alt_get_errno+0x3c>
    f544:	00800074 	movhi	r2,1
    f548:	1096ec04 	addi	r2,r2,23472
}
    f54c:	e037883a 	mov	sp,fp
    f550:	dfc00117 	ldw	ra,4(sp)
    f554:	df000017 	ldw	fp,0(sp)
    f558:	dec00204 	addi	sp,sp,8
    f55c:	f800283a 	ret

0000f560 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    f560:	deffed04 	addi	sp,sp,-76
    f564:	dfc01215 	stw	ra,72(sp)
    f568:	df001115 	stw	fp,68(sp)
    f56c:	df001104 	addi	fp,sp,68
    f570:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f574:	e0bfff17 	ldw	r2,-4(fp)
    f578:	10000816 	blt	r2,zero,f59c <isatty+0x3c>
    f57c:	e13fff17 	ldw	r4,-4(fp)
    f580:	01400304 	movi	r5,12
    f584:	000ca900 	call	ca90 <__mulsi3>
    f588:	1007883a 	mov	r3,r2
    f58c:	00800074 	movhi	r2,1
    f590:	108b9e04 	addi	r2,r2,11896
    f594:	1885883a 	add	r2,r3,r2
    f598:	00000106 	br	f5a0 <isatty+0x40>
    f59c:	0005883a 	mov	r2,zero
    f5a0:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    f5a4:	e0bfef17 	ldw	r2,-68(fp)
    f5a8:	10000e26 	beq	r2,zero,f5e4 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    f5ac:	e0bfef17 	ldw	r2,-68(fp)
    f5b0:	10800017 	ldw	r2,0(r2)
    f5b4:	10800817 	ldw	r2,32(r2)
    f5b8:	1000021e 	bne	r2,zero,f5c4 <isatty+0x64>
    {
      return 1;
    f5bc:	00800044 	movi	r2,1
    f5c0:	00000d06 	br	f5f8 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    f5c4:	e0bff004 	addi	r2,fp,-64
    f5c8:	e13fff17 	ldw	r4,-4(fp)
    f5cc:	100b883a 	mov	r5,r2
    f5d0:	000f4580 	call	f458 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    f5d4:	e0bff117 	ldw	r2,-60(fp)
    f5d8:	10880020 	cmpeqi	r2,r2,8192
    f5dc:	10803fcc 	andi	r2,r2,255
    f5e0:	00000506 	br	f5f8 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    f5e4:	000f5100 	call	f510 <alt_get_errno>
    f5e8:	1007883a 	mov	r3,r2
    f5ec:	00801444 	movi	r2,81
    f5f0:	18800015 	stw	r2,0(r3)
    return 0;
    f5f4:	0005883a 	mov	r2,zero
  }
}
    f5f8:	e037883a 	mov	sp,fp
    f5fc:	dfc00117 	ldw	ra,4(sp)
    f600:	df000017 	ldw	fp,0(sp)
    f604:	dec00204 	addi	sp,sp,8
    f608:	f800283a 	ret

0000f60c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    f60c:	defffc04 	addi	sp,sp,-16
    f610:	df000315 	stw	fp,12(sp)
    f614:	df000304 	addi	fp,sp,12
    f618:	e13ffd15 	stw	r4,-12(fp)
    f61c:	e17ffe15 	stw	r5,-8(fp)
    f620:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    f624:	e0fffe17 	ldw	r3,-8(fp)
    f628:	e0bffd17 	ldw	r2,-12(fp)
    f62c:	18800c26 	beq	r3,r2,f660 <alt_load_section+0x54>
  {
    while( to != end )
    f630:	00000806 	br	f654 <alt_load_section+0x48>
    {
      *to++ = *from++;
    f634:	e0bffe17 	ldw	r2,-8(fp)
    f638:	10c00104 	addi	r3,r2,4
    f63c:	e0fffe15 	stw	r3,-8(fp)
    f640:	e0fffd17 	ldw	r3,-12(fp)
    f644:	19000104 	addi	r4,r3,4
    f648:	e13ffd15 	stw	r4,-12(fp)
    f64c:	18c00017 	ldw	r3,0(r3)
    f650:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    f654:	e0fffe17 	ldw	r3,-8(fp)
    f658:	e0bfff17 	ldw	r2,-4(fp)
    f65c:	18bff51e 	bne	r3,r2,f634 <__alt_data_end+0xfffb9f04>
    {
      *to++ = *from++;
    }
  }
}
    f660:	e037883a 	mov	sp,fp
    f664:	df000017 	ldw	fp,0(sp)
    f668:	dec00104 	addi	sp,sp,4
    f66c:	f800283a 	ret

0000f670 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    f670:	defffe04 	addi	sp,sp,-8
    f674:	dfc00115 	stw	ra,4(sp)
    f678:	df000015 	stw	fp,0(sp)
    f67c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    f680:	01000074 	movhi	r4,1
    f684:	21102604 	addi	r4,r4,16536
    f688:	01400074 	movhi	r5,1
    f68c:	29496b04 	addi	r5,r5,9644
    f690:	01800074 	movhi	r6,1
    f694:	31902604 	addi	r6,r6,16536
    f698:	000f60c0 	call	f60c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    f69c:	01000034 	movhi	r4,0
    f6a0:	21000804 	addi	r4,r4,32
    f6a4:	01400034 	movhi	r5,0
    f6a8:	29400804 	addi	r5,r5,32
    f6ac:	01800034 	movhi	r6,0
    f6b0:	31808b04 	addi	r6,r6,556
    f6b4:	000f60c0 	call	f60c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    f6b8:	01000074 	movhi	r4,1
    f6bc:	2106e504 	addi	r4,r4,7060
    f6c0:	01400074 	movhi	r5,1
    f6c4:	2946e504 	addi	r5,r5,7060
    f6c8:	01800074 	movhi	r6,1
    f6cc:	31896b04 	addi	r6,r6,9644
    f6d0:	000f60c0 	call	f60c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    f6d4:	0010a700 	call	10a70 <alt_dcache_flush_all>
  alt_icache_flush_all();
    f6d8:	0010c380 	call	10c38 <alt_icache_flush_all>
}
    f6dc:	e037883a 	mov	sp,fp
    f6e0:	dfc00117 	ldw	ra,4(sp)
    f6e4:	df000017 	ldw	fp,0(sp)
    f6e8:	dec00204 	addi	sp,sp,8
    f6ec:	f800283a 	ret

0000f6f0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f6f0:	defffe04 	addi	sp,sp,-8
    f6f4:	dfc00115 	stw	ra,4(sp)
    f6f8:	df000015 	stw	fp,0(sp)
    f6fc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f700:	00800074 	movhi	r2,1
    f704:	10902104 	addi	r2,r2,16516
    f708:	10800017 	ldw	r2,0(r2)
    f70c:	10000526 	beq	r2,zero,f724 <alt_get_errno+0x34>
    f710:	00800074 	movhi	r2,1
    f714:	10902104 	addi	r2,r2,16516
    f718:	10800017 	ldw	r2,0(r2)
    f71c:	103ee83a 	callr	r2
    f720:	00000206 	br	f72c <alt_get_errno+0x3c>
    f724:	00800074 	movhi	r2,1
    f728:	1096ec04 	addi	r2,r2,23472
}
    f72c:	e037883a 	mov	sp,fp
    f730:	dfc00117 	ldw	ra,4(sp)
    f734:	df000017 	ldw	fp,0(sp)
    f738:	dec00204 	addi	sp,sp,8
    f73c:	f800283a 	ret

0000f740 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    f740:	defff904 	addi	sp,sp,-28
    f744:	dfc00615 	stw	ra,24(sp)
    f748:	df000515 	stw	fp,20(sp)
    f74c:	df000504 	addi	fp,sp,20
    f750:	e13ffd15 	stw	r4,-12(fp)
    f754:	e17ffe15 	stw	r5,-8(fp)
    f758:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    f75c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f760:	e0bffd17 	ldw	r2,-12(fp)
    f764:	10000816 	blt	r2,zero,f788 <lseek+0x48>
    f768:	e13ffd17 	ldw	r4,-12(fp)
    f76c:	01400304 	movi	r5,12
    f770:	000ca900 	call	ca90 <__mulsi3>
    f774:	1007883a 	mov	r3,r2
    f778:	00800074 	movhi	r2,1
    f77c:	108b9e04 	addi	r2,r2,11896
    f780:	1885883a 	add	r2,r3,r2
    f784:	00000106 	br	f78c <lseek+0x4c>
    f788:	0005883a 	mov	r2,zero
    f78c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    f790:	e0bffc17 	ldw	r2,-16(fp)
    f794:	10001026 	beq	r2,zero,f7d8 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    f798:	e0bffc17 	ldw	r2,-16(fp)
    f79c:	10800017 	ldw	r2,0(r2)
    f7a0:	10800717 	ldw	r2,28(r2)
    f7a4:	10000926 	beq	r2,zero,f7cc <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    f7a8:	e0bffc17 	ldw	r2,-16(fp)
    f7ac:	10800017 	ldw	r2,0(r2)
    f7b0:	10800717 	ldw	r2,28(r2)
    f7b4:	e13ffc17 	ldw	r4,-16(fp)
    f7b8:	e17ffe17 	ldw	r5,-8(fp)
    f7bc:	e1bfff17 	ldw	r6,-4(fp)
    f7c0:	103ee83a 	callr	r2
    f7c4:	e0bffb15 	stw	r2,-20(fp)
    f7c8:	00000506 	br	f7e0 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    f7cc:	00bfde84 	movi	r2,-134
    f7d0:	e0bffb15 	stw	r2,-20(fp)
    f7d4:	00000206 	br	f7e0 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
    f7d8:	00bfebc4 	movi	r2,-81
    f7dc:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    f7e0:	e0bffb17 	ldw	r2,-20(fp)
    f7e4:	1000070e 	bge	r2,zero,f804 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
    f7e8:	000f6f00 	call	f6f0 <alt_get_errno>
    f7ec:	1007883a 	mov	r3,r2
    f7f0:	e0bffb17 	ldw	r2,-20(fp)
    f7f4:	0085c83a 	sub	r2,zero,r2
    f7f8:	18800015 	stw	r2,0(r3)
    rc = -1;
    f7fc:	00bfffc4 	movi	r2,-1
    f800:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    f804:	e0bffb17 	ldw	r2,-20(fp)
}
    f808:	e037883a 	mov	sp,fp
    f80c:	dfc00117 	ldw	ra,4(sp)
    f810:	df000017 	ldw	fp,0(sp)
    f814:	dec00204 	addi	sp,sp,8
    f818:	f800283a 	ret

0000f81c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    f81c:	defffd04 	addi	sp,sp,-12
    f820:	dfc00215 	stw	ra,8(sp)
    f824:	df000115 	stw	fp,4(sp)
    f828:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    f82c:	0009883a 	mov	r4,zero
    f830:	000fd100 	call	fd10 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    f834:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    f838:	000fd440 	call	fd44 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    f83c:	01000074 	movhi	r4,1
    f840:	21096104 	addi	r4,r4,9604
    f844:	01400074 	movhi	r5,1
    f848:	29496104 	addi	r5,r5,9604
    f84c:	01800074 	movhi	r6,1
    f850:	31896104 	addi	r6,r6,9604
    f854:	00110040 	call	11004 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    f858:	0010b800 	call	10b80 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    f85c:	01000074 	movhi	r4,1
    f860:	2102f704 	addi	r4,r4,3036
    f864:	00117f00 	call	117f0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    f868:	d126da17 	ldw	r4,-25752(gp)
    f86c:	d0e6db17 	ldw	r3,-25748(gp)
    f870:	d0a6dc17 	ldw	r2,-25744(gp)
    f874:	180b883a 	mov	r5,r3
    f878:	100d883a 	mov	r6,r2
    f87c:	00017480 	call	1748 <main>
    f880:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    f884:	01000044 	movi	r4,1
    f888:	000f3040 	call	f304 <close>
  exit (result);
    f88c:	e13fff17 	ldw	r4,-4(fp)
    f890:	00118040 	call	11804 <exit>

0000f894 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    f894:	defffe04 	addi	sp,sp,-8
    f898:	df000115 	stw	fp,4(sp)
    f89c:	df000104 	addi	fp,sp,4
    f8a0:	e13fff15 	stw	r4,-4(fp)
}
    f8a4:	e037883a 	mov	sp,fp
    f8a8:	df000017 	ldw	fp,0(sp)
    f8ac:	dec00104 	addi	sp,sp,4
    f8b0:	f800283a 	ret

0000f8b4 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    f8b4:	defffe04 	addi	sp,sp,-8
    f8b8:	df000115 	stw	fp,4(sp)
    f8bc:	df000104 	addi	fp,sp,4
    f8c0:	e13fff15 	stw	r4,-4(fp)
}
    f8c4:	e037883a 	mov	sp,fp
    f8c8:	df000017 	ldw	fp,0(sp)
    f8cc:	dec00104 	addi	sp,sp,4
    f8d0:	f800283a 	ret

0000f8d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f8d4:	defffe04 	addi	sp,sp,-8
    f8d8:	dfc00115 	stw	ra,4(sp)
    f8dc:	df000015 	stw	fp,0(sp)
    f8e0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f8e4:	00800074 	movhi	r2,1
    f8e8:	10902104 	addi	r2,r2,16516
    f8ec:	10800017 	ldw	r2,0(r2)
    f8f0:	10000526 	beq	r2,zero,f908 <alt_get_errno+0x34>
    f8f4:	00800074 	movhi	r2,1
    f8f8:	10902104 	addi	r2,r2,16516
    f8fc:	10800017 	ldw	r2,0(r2)
    f900:	103ee83a 	callr	r2
    f904:	00000206 	br	f910 <alt_get_errno+0x3c>
    f908:	00800074 	movhi	r2,1
    f90c:	1096ec04 	addi	r2,r2,23472
}
    f910:	e037883a 	mov	sp,fp
    f914:	dfc00117 	ldw	ra,4(sp)
    f918:	df000017 	ldw	fp,0(sp)
    f91c:	dec00204 	addi	sp,sp,8
    f920:	f800283a 	ret

0000f924 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    f924:	defff904 	addi	sp,sp,-28
    f928:	dfc00615 	stw	ra,24(sp)
    f92c:	df000515 	stw	fp,20(sp)
    f930:	df000504 	addi	fp,sp,20
    f934:	e13ffd15 	stw	r4,-12(fp)
    f938:	e17ffe15 	stw	r5,-8(fp)
    f93c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f940:	e0bffd17 	ldw	r2,-12(fp)
    f944:	10000816 	blt	r2,zero,f968 <read+0x44>
    f948:	e13ffd17 	ldw	r4,-12(fp)
    f94c:	01400304 	movi	r5,12
    f950:	000ca900 	call	ca90 <__mulsi3>
    f954:	1007883a 	mov	r3,r2
    f958:	00800074 	movhi	r2,1
    f95c:	108b9e04 	addi	r2,r2,11896
    f960:	1885883a 	add	r2,r3,r2
    f964:	00000106 	br	f96c <read+0x48>
    f968:	0005883a 	mov	r2,zero
    f96c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    f970:	e0bffb17 	ldw	r2,-20(fp)
    f974:	10002226 	beq	r2,zero,fa00 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    f978:	e0bffb17 	ldw	r2,-20(fp)
    f97c:	10800217 	ldw	r2,8(r2)
    f980:	108000cc 	andi	r2,r2,3
    f984:	10800060 	cmpeqi	r2,r2,1
    f988:	1000181e 	bne	r2,zero,f9ec <read+0xc8>
        (fd->dev->read))
    f98c:	e0bffb17 	ldw	r2,-20(fp)
    f990:	10800017 	ldw	r2,0(r2)
    f994:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    f998:	10001426 	beq	r2,zero,f9ec <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    f99c:	e0bffb17 	ldw	r2,-20(fp)
    f9a0:	10800017 	ldw	r2,0(r2)
    f9a4:	10800517 	ldw	r2,20(r2)
    f9a8:	e0ffff17 	ldw	r3,-4(fp)
    f9ac:	e13ffb17 	ldw	r4,-20(fp)
    f9b0:	e17ffe17 	ldw	r5,-8(fp)
    f9b4:	180d883a 	mov	r6,r3
    f9b8:	103ee83a 	callr	r2
    f9bc:	e0bffc15 	stw	r2,-16(fp)
    f9c0:	e0bffc17 	ldw	r2,-16(fp)
    f9c4:	1000070e 	bge	r2,zero,f9e4 <read+0xc0>
        {
          ALT_ERRNO = -rval;
    f9c8:	000f8d40 	call	f8d4 <alt_get_errno>
    f9cc:	1007883a 	mov	r3,r2
    f9d0:	e0bffc17 	ldw	r2,-16(fp)
    f9d4:	0085c83a 	sub	r2,zero,r2
    f9d8:	18800015 	stw	r2,0(r3)
          return -1;
    f9dc:	00bfffc4 	movi	r2,-1
    f9e0:	00000c06 	br	fa14 <read+0xf0>
        }
        return rval;
    f9e4:	e0bffc17 	ldw	r2,-16(fp)
    f9e8:	00000a06 	br	fa14 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
    f9ec:	000f8d40 	call	f8d4 <alt_get_errno>
    f9f0:	1007883a 	mov	r3,r2
    f9f4:	00800344 	movi	r2,13
    f9f8:	18800015 	stw	r2,0(r3)
    f9fc:	00000406 	br	fa10 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    fa00:	000f8d40 	call	f8d4 <alt_get_errno>
    fa04:	1007883a 	mov	r3,r2
    fa08:	00801444 	movi	r2,81
    fa0c:	18800015 	stw	r2,0(r3)
  }
  return -1;
    fa10:	00bfffc4 	movi	r2,-1
}
    fa14:	e037883a 	mov	sp,fp
    fa18:	dfc00117 	ldw	ra,4(sp)
    fa1c:	df000017 	ldw	fp,0(sp)
    fa20:	dec00204 	addi	sp,sp,8
    fa24:	f800283a 	ret

0000fa28 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    fa28:	defffc04 	addi	sp,sp,-16
    fa2c:	dfc00315 	stw	ra,12(sp)
    fa30:	df000215 	stw	fp,8(sp)
    fa34:	dc000115 	stw	r16,4(sp)
    fa38:	df000204 	addi	fp,sp,8
    fa3c:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
    fa40:	e0bffe17 	ldw	r2,-8(fp)
    fa44:	108000d0 	cmplti	r2,r2,3
    fa48:	1000111e 	bne	r2,zero,fa90 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    fa4c:	04000074 	movhi	r16,1
    fa50:	840b9e04 	addi	r16,r16,11896
    fa54:	e0bffe17 	ldw	r2,-8(fp)
    fa58:	1009883a 	mov	r4,r2
    fa5c:	01400304 	movi	r5,12
    fa60:	000ca900 	call	ca90 <__mulsi3>
    fa64:	8085883a 	add	r2,r16,r2
    fa68:	10800204 	addi	r2,r2,8
    fa6c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    fa70:	04000074 	movhi	r16,1
    fa74:	840b9e04 	addi	r16,r16,11896
    fa78:	e0bffe17 	ldw	r2,-8(fp)
    fa7c:	1009883a 	mov	r4,r2
    fa80:	01400304 	movi	r5,12
    fa84:	000ca900 	call	ca90 <__mulsi3>
    fa88:	8085883a 	add	r2,r16,r2
    fa8c:	10000015 	stw	zero,0(r2)
  }
}
    fa90:	e6ffff04 	addi	sp,fp,-4
    fa94:	dfc00217 	ldw	ra,8(sp)
    fa98:	df000117 	ldw	fp,4(sp)
    fa9c:	dc000017 	ldw	r16,0(sp)
    faa0:	dec00304 	addi	sp,sp,12
    faa4:	f800283a 	ret

0000faa8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    faa8:	defff904 	addi	sp,sp,-28
    faac:	df000615 	stw	fp,24(sp)
    fab0:	df000604 	addi	fp,sp,24
    fab4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fab8:	0005303a 	rdctl	r2,status
    fabc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fac0:	e0fffc17 	ldw	r3,-16(fp)
    fac4:	00bfff84 	movi	r2,-2
    fac8:	1884703a 	and	r2,r3,r2
    facc:	1001703a 	wrctl	status,r2
  
  return context;
    fad0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    fad4:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    fad8:	d0a00c17 	ldw	r2,-32720(gp)
    fadc:	10c000c4 	addi	r3,r2,3
    fae0:	00bfff04 	movi	r2,-4
    fae4:	1884703a 	and	r2,r3,r2
    fae8:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    faec:	d0e00c17 	ldw	r3,-32720(gp)
    faf0:	e0bfff17 	ldw	r2,-4(fp)
    faf4:	1887883a 	add	r3,r3,r2
    faf8:	00800174 	movhi	r2,5
    fafc:	1095cc04 	addi	r2,r2,22320
    fb00:	10c0062e 	bgeu	r2,r3,fb1c <sbrk+0x74>
    fb04:	e0bffa17 	ldw	r2,-24(fp)
    fb08:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fb0c:	e0bffd17 	ldw	r2,-12(fp)
    fb10:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    fb14:	00bfffc4 	movi	r2,-1
    fb18:	00000b06 	br	fb48 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    fb1c:	d0a00c17 	ldw	r2,-32720(gp)
    fb20:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
    fb24:	d0e00c17 	ldw	r3,-32720(gp)
    fb28:	e0bfff17 	ldw	r2,-4(fp)
    fb2c:	1885883a 	add	r2,r3,r2
    fb30:	d0a00c15 	stw	r2,-32720(gp)
    fb34:	e0bffa17 	ldw	r2,-24(fp)
    fb38:	e0bffe15 	stw	r2,-8(fp)
    fb3c:	e0bffe17 	ldw	r2,-8(fp)
    fb40:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    fb44:	e0bffb17 	ldw	r2,-20(fp)
} 
    fb48:	e037883a 	mov	sp,fp
    fb4c:	df000017 	ldw	fp,0(sp)
    fb50:	dec00104 	addi	sp,sp,4
    fb54:	f800283a 	ret

0000fb58 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    fb58:	defffd04 	addi	sp,sp,-12
    fb5c:	dfc00215 	stw	ra,8(sp)
    fb60:	df000115 	stw	fp,4(sp)
    fb64:	df000104 	addi	fp,sp,4
    fb68:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    fb6c:	e13fff17 	ldw	r4,-4(fp)
    fb70:	00109180 	call	10918 <alt_busy_sleep>
}
    fb74:	e037883a 	mov	sp,fp
    fb78:	dfc00117 	ldw	ra,4(sp)
    fb7c:	df000017 	ldw	fp,0(sp)
    fb80:	dec00204 	addi	sp,sp,8
    fb84:	f800283a 	ret

0000fb88 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    fb88:	defffe04 	addi	sp,sp,-8
    fb8c:	dfc00115 	stw	ra,4(sp)
    fb90:	df000015 	stw	fp,0(sp)
    fb94:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    fb98:	00800074 	movhi	r2,1
    fb9c:	10902104 	addi	r2,r2,16516
    fba0:	10800017 	ldw	r2,0(r2)
    fba4:	10000526 	beq	r2,zero,fbbc <alt_get_errno+0x34>
    fba8:	00800074 	movhi	r2,1
    fbac:	10902104 	addi	r2,r2,16516
    fbb0:	10800017 	ldw	r2,0(r2)
    fbb4:	103ee83a 	callr	r2
    fbb8:	00000206 	br	fbc4 <alt_get_errno+0x3c>
    fbbc:	00800074 	movhi	r2,1
    fbc0:	1096ec04 	addi	r2,r2,23472
}
    fbc4:	e037883a 	mov	sp,fp
    fbc8:	dfc00117 	ldw	ra,4(sp)
    fbcc:	df000017 	ldw	fp,0(sp)
    fbd0:	dec00204 	addi	sp,sp,8
    fbd4:	f800283a 	ret

0000fbd8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    fbd8:	defff904 	addi	sp,sp,-28
    fbdc:	dfc00615 	stw	ra,24(sp)
    fbe0:	df000515 	stw	fp,20(sp)
    fbe4:	df000504 	addi	fp,sp,20
    fbe8:	e13ffd15 	stw	r4,-12(fp)
    fbec:	e17ffe15 	stw	r5,-8(fp)
    fbf0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    fbf4:	e0bffd17 	ldw	r2,-12(fp)
    fbf8:	10000816 	blt	r2,zero,fc1c <write+0x44>
    fbfc:	e13ffd17 	ldw	r4,-12(fp)
    fc00:	01400304 	movi	r5,12
    fc04:	000ca900 	call	ca90 <__mulsi3>
    fc08:	1007883a 	mov	r3,r2
    fc0c:	00800074 	movhi	r2,1
    fc10:	108b9e04 	addi	r2,r2,11896
    fc14:	1885883a 	add	r2,r3,r2
    fc18:	00000106 	br	fc20 <write+0x48>
    fc1c:	0005883a 	mov	r2,zero
    fc20:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    fc24:	e0bffb17 	ldw	r2,-20(fp)
    fc28:	10002126 	beq	r2,zero,fcb0 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    fc2c:	e0bffb17 	ldw	r2,-20(fp)
    fc30:	10800217 	ldw	r2,8(r2)
    fc34:	108000cc 	andi	r2,r2,3
    fc38:	10001826 	beq	r2,zero,fc9c <write+0xc4>
    fc3c:	e0bffb17 	ldw	r2,-20(fp)
    fc40:	10800017 	ldw	r2,0(r2)
    fc44:	10800617 	ldw	r2,24(r2)
    fc48:	10001426 	beq	r2,zero,fc9c <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    fc4c:	e0bffb17 	ldw	r2,-20(fp)
    fc50:	10800017 	ldw	r2,0(r2)
    fc54:	10800617 	ldw	r2,24(r2)
    fc58:	e0ffff17 	ldw	r3,-4(fp)
    fc5c:	e13ffb17 	ldw	r4,-20(fp)
    fc60:	e17ffe17 	ldw	r5,-8(fp)
    fc64:	180d883a 	mov	r6,r3
    fc68:	103ee83a 	callr	r2
    fc6c:	e0bffc15 	stw	r2,-16(fp)
    fc70:	e0bffc17 	ldw	r2,-16(fp)
    fc74:	1000070e 	bge	r2,zero,fc94 <write+0xbc>
      {
        ALT_ERRNO = -rval;
    fc78:	000fb880 	call	fb88 <alt_get_errno>
    fc7c:	1007883a 	mov	r3,r2
    fc80:	e0bffc17 	ldw	r2,-16(fp)
    fc84:	0085c83a 	sub	r2,zero,r2
    fc88:	18800015 	stw	r2,0(r3)
        return -1;
    fc8c:	00bfffc4 	movi	r2,-1
    fc90:	00000c06 	br	fcc4 <write+0xec>
      }
      return rval;
    fc94:	e0bffc17 	ldw	r2,-16(fp)
    fc98:	00000a06 	br	fcc4 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
    fc9c:	000fb880 	call	fb88 <alt_get_errno>
    fca0:	1007883a 	mov	r3,r2
    fca4:	00800344 	movi	r2,13
    fca8:	18800015 	stw	r2,0(r3)
    fcac:	00000406 	br	fcc0 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    fcb0:	000fb880 	call	fb88 <alt_get_errno>
    fcb4:	1007883a 	mov	r3,r2
    fcb8:	00801444 	movi	r2,81
    fcbc:	18800015 	stw	r2,0(r3)
  }
  return -1;
    fcc0:	00bfffc4 	movi	r2,-1
}
    fcc4:	e037883a 	mov	sp,fp
    fcc8:	dfc00117 	ldw	ra,4(sp)
    fccc:	df000017 	ldw	fp,0(sp)
    fcd0:	dec00204 	addi	sp,sp,8
    fcd4:	f800283a 	ret

0000fcd8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    fcd8:	defffd04 	addi	sp,sp,-12
    fcdc:	dfc00215 	stw	ra,8(sp)
    fce0:	df000115 	stw	fp,4(sp)
    fce4:	df000104 	addi	fp,sp,4
    fce8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    fcec:	e13fff17 	ldw	r4,-4(fp)
    fcf0:	01400074 	movhi	r5,1
    fcf4:	29501e04 	addi	r5,r5,16504
    fcf8:	0010adc0 	call	10adc <alt_dev_llist_insert>
}
    fcfc:	e037883a 	mov	sp,fp
    fd00:	dfc00117 	ldw	ra,4(sp)
    fd04:	df000017 	ldw	fp,0(sp)
    fd08:	dec00204 	addi	sp,sp,8
    fd0c:	f800283a 	ret

0000fd10 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    fd10:	defffd04 	addi	sp,sp,-12
    fd14:	dfc00215 	stw	ra,8(sp)
    fd18:	df000115 	stw	fp,4(sp)
    fd1c:	df000104 	addi	fp,sp,4
    fd20:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
    fd24:	00114bc0 	call	114bc <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    fd28:	00800044 	movi	r2,1
    fd2c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    fd30:	e037883a 	mov	sp,fp
    fd34:	dfc00117 	ldw	ra,4(sp)
    fd38:	df000017 	ldw	fp,0(sp)
    fd3c:	dec00204 	addi	sp,sp,8
    fd40:	f800283a 	ret

0000fd44 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    fd44:	defffe04 	addi	sp,sp,-8
    fd48:	dfc00115 	stw	ra,4(sp)
    fd4c:	df000015 	stw	fp,0(sp)
    fd50:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    fd54:	01000074 	movhi	r4,1
    fd58:	210c0804 	addi	r4,r4,12320
    fd5c:	000b883a 	mov	r5,zero
    fd60:	01800144 	movi	r6,5
    fd64:	000fef00 	call	fef0 <altera_avalon_jtag_uart_init>
    fd68:	01000074 	movhi	r4,1
    fd6c:	210bfe04 	addi	r4,r4,12280
    fd70:	000fcd80 	call	fcd8 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
    fd74:	0001883a 	nop
}
    fd78:	e037883a 	mov	sp,fp
    fd7c:	dfc00117 	ldw	ra,4(sp)
    fd80:	df000017 	ldw	fp,0(sp)
    fd84:	dec00204 	addi	sp,sp,8
    fd88:	f800283a 	ret

0000fd8c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    fd8c:	defffa04 	addi	sp,sp,-24
    fd90:	dfc00515 	stw	ra,20(sp)
    fd94:	df000415 	stw	fp,16(sp)
    fd98:	df000404 	addi	fp,sp,16
    fd9c:	e13ffd15 	stw	r4,-12(fp)
    fda0:	e17ffe15 	stw	r5,-8(fp)
    fda4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    fda8:	e0bffd17 	ldw	r2,-12(fp)
    fdac:	10800017 	ldw	r2,0(r2)
    fdb0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    fdb4:	e0bffc17 	ldw	r2,-16(fp)
    fdb8:	10c00a04 	addi	r3,r2,40
    fdbc:	e0bffd17 	ldw	r2,-12(fp)
    fdc0:	10800217 	ldw	r2,8(r2)
    fdc4:	1809883a 	mov	r4,r3
    fdc8:	e17ffe17 	ldw	r5,-8(fp)
    fdcc:	e1bfff17 	ldw	r6,-4(fp)
    fdd0:	100f883a 	mov	r7,r2
    fdd4:	00103b40 	call	103b4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    fdd8:	e037883a 	mov	sp,fp
    fddc:	dfc00117 	ldw	ra,4(sp)
    fde0:	df000017 	ldw	fp,0(sp)
    fde4:	dec00204 	addi	sp,sp,8
    fde8:	f800283a 	ret

0000fdec <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    fdec:	defffa04 	addi	sp,sp,-24
    fdf0:	dfc00515 	stw	ra,20(sp)
    fdf4:	df000415 	stw	fp,16(sp)
    fdf8:	df000404 	addi	fp,sp,16
    fdfc:	e13ffd15 	stw	r4,-12(fp)
    fe00:	e17ffe15 	stw	r5,-8(fp)
    fe04:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    fe08:	e0bffd17 	ldw	r2,-12(fp)
    fe0c:	10800017 	ldw	r2,0(r2)
    fe10:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    fe14:	e0bffc17 	ldw	r2,-16(fp)
    fe18:	10c00a04 	addi	r3,r2,40
    fe1c:	e0bffd17 	ldw	r2,-12(fp)
    fe20:	10800217 	ldw	r2,8(r2)
    fe24:	1809883a 	mov	r4,r3
    fe28:	e17ffe17 	ldw	r5,-8(fp)
    fe2c:	e1bfff17 	ldw	r6,-4(fp)
    fe30:	100f883a 	mov	r7,r2
    fe34:	00105c00 	call	105c0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    fe38:	e037883a 	mov	sp,fp
    fe3c:	dfc00117 	ldw	ra,4(sp)
    fe40:	df000017 	ldw	fp,0(sp)
    fe44:	dec00204 	addi	sp,sp,8
    fe48:	f800283a 	ret

0000fe4c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    fe4c:	defffc04 	addi	sp,sp,-16
    fe50:	dfc00315 	stw	ra,12(sp)
    fe54:	df000215 	stw	fp,8(sp)
    fe58:	df000204 	addi	fp,sp,8
    fe5c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    fe60:	e0bfff17 	ldw	r2,-4(fp)
    fe64:	10800017 	ldw	r2,0(r2)
    fe68:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    fe6c:	e0bffe17 	ldw	r2,-8(fp)
    fe70:	10c00a04 	addi	r3,r2,40
    fe74:	e0bfff17 	ldw	r2,-4(fp)
    fe78:	10800217 	ldw	r2,8(r2)
    fe7c:	1809883a 	mov	r4,r3
    fe80:	100b883a 	mov	r5,r2
    fe84:	00102600 	call	10260 <altera_avalon_jtag_uart_close>
}
    fe88:	e037883a 	mov	sp,fp
    fe8c:	dfc00117 	ldw	ra,4(sp)
    fe90:	df000017 	ldw	fp,0(sp)
    fe94:	dec00204 	addi	sp,sp,8
    fe98:	f800283a 	ret

0000fe9c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    fe9c:	defffa04 	addi	sp,sp,-24
    fea0:	dfc00515 	stw	ra,20(sp)
    fea4:	df000415 	stw	fp,16(sp)
    fea8:	df000404 	addi	fp,sp,16
    feac:	e13ffd15 	stw	r4,-12(fp)
    feb0:	e17ffe15 	stw	r5,-8(fp)
    feb4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    feb8:	e0bffd17 	ldw	r2,-12(fp)
    febc:	10800017 	ldw	r2,0(r2)
    fec0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    fec4:	e0bffc17 	ldw	r2,-16(fp)
    fec8:	10800a04 	addi	r2,r2,40
    fecc:	1009883a 	mov	r4,r2
    fed0:	e17ffe17 	ldw	r5,-8(fp)
    fed4:	e1bfff17 	ldw	r6,-4(fp)
    fed8:	00102c80 	call	102c8 <altera_avalon_jtag_uart_ioctl>
}
    fedc:	e037883a 	mov	sp,fp
    fee0:	dfc00117 	ldw	ra,4(sp)
    fee4:	df000017 	ldw	fp,0(sp)
    fee8:	dec00204 	addi	sp,sp,8
    feec:	f800283a 	ret

0000fef0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    fef0:	defffa04 	addi	sp,sp,-24
    fef4:	dfc00515 	stw	ra,20(sp)
    fef8:	df000415 	stw	fp,16(sp)
    fefc:	df000404 	addi	fp,sp,16
    ff00:	e13ffd15 	stw	r4,-12(fp)
    ff04:	e17ffe15 	stw	r5,-8(fp)
    ff08:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    ff0c:	e0bffd17 	ldw	r2,-12(fp)
    ff10:	00c00044 	movi	r3,1
    ff14:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    ff18:	e0bffd17 	ldw	r2,-12(fp)
    ff1c:	10800017 	ldw	r2,0(r2)
    ff20:	10800104 	addi	r2,r2,4
    ff24:	1007883a 	mov	r3,r2
    ff28:	e0bffd17 	ldw	r2,-12(fp)
    ff2c:	10800817 	ldw	r2,32(r2)
    ff30:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    ff34:	e0fffe17 	ldw	r3,-8(fp)
    ff38:	e0bfff17 	ldw	r2,-4(fp)
    ff3c:	d8000015 	stw	zero,0(sp)
    ff40:	1809883a 	mov	r4,r3
    ff44:	100b883a 	mov	r5,r2
    ff48:	01800074 	movhi	r6,1
    ff4c:	31bfed04 	addi	r6,r6,-76
    ff50:	e1fffd17 	ldw	r7,-12(fp)
    ff54:	0010c540 	call	10c54 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    ff58:	e0bffd17 	ldw	r2,-12(fp)
    ff5c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    ff60:	e0bffd17 	ldw	r2,-12(fp)
    ff64:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    ff68:	00800074 	movhi	r2,1
    ff6c:	1096f404 	addi	r2,r2,23504
    ff70:	10800017 	ldw	r2,0(r2)
    ff74:	1809883a 	mov	r4,r3
    ff78:	100b883a 	mov	r5,r2
    ff7c:	01800074 	movhi	r6,1
    ff80:	31806e04 	addi	r6,r6,440
    ff84:	e1fffd17 	ldw	r7,-12(fp)
    ff88:	00107d80 	call	107d8 <alt_alarm_start>
    ff8c:	1000040e 	bge	r2,zero,ffa0 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    ff90:	e0fffd17 	ldw	r3,-12(fp)
    ff94:	00a00034 	movhi	r2,32768
    ff98:	10bfffc4 	addi	r2,r2,-1
    ff9c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    ffa0:	e037883a 	mov	sp,fp
    ffa4:	dfc00117 	ldw	ra,4(sp)
    ffa8:	df000017 	ldw	fp,0(sp)
    ffac:	dec00204 	addi	sp,sp,8
    ffb0:	f800283a 	ret

0000ffb4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    ffb4:	defff804 	addi	sp,sp,-32
    ffb8:	df000715 	stw	fp,28(sp)
    ffbc:	df000704 	addi	fp,sp,28
    ffc0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    ffc4:	e0bfff17 	ldw	r2,-4(fp)
    ffc8:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
    ffcc:	e0bffb17 	ldw	r2,-20(fp)
    ffd0:	10800017 	ldw	r2,0(r2)
    ffd4:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    ffd8:	e0bffc17 	ldw	r2,-16(fp)
    ffdc:	10800104 	addi	r2,r2,4
    ffe0:	10800037 	ldwio	r2,0(r2)
    ffe4:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    ffe8:	e0bffd17 	ldw	r2,-12(fp)
    ffec:	1080c00c 	andi	r2,r2,768
    fff0:	1000011e 	bne	r2,zero,fff8 <altera_avalon_jtag_uart_irq+0x44>
      break;
    fff4:	00006c06 	br	101a8 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    fff8:	e0bffd17 	ldw	r2,-12(fp)
    fffc:	1080400c 	andi	r2,r2,256
   10000:	10003426 	beq	r2,zero,100d4 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   10004:	00800074 	movhi	r2,1
   10008:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1000c:	e0bffb17 	ldw	r2,-20(fp)
   10010:	10800a17 	ldw	r2,40(r2)
   10014:	10800044 	addi	r2,r2,1
   10018:	1081ffcc 	andi	r2,r2,2047
   1001c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   10020:	e0bffb17 	ldw	r2,-20(fp)
   10024:	10c00b17 	ldw	r3,44(r2)
   10028:	e0bffe17 	ldw	r2,-8(fp)
   1002c:	1880011e 	bne	r3,r2,10034 <altera_avalon_jtag_uart_irq+0x80>
          break;
   10030:	00001606 	br	1008c <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   10034:	e0bffc17 	ldw	r2,-16(fp)
   10038:	10800037 	ldwio	r2,0(r2)
   1003c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   10040:	e0bff917 	ldw	r2,-28(fp)
   10044:	10a0000c 	andi	r2,r2,32768
   10048:	1000011e 	bne	r2,zero,10050 <altera_avalon_jtag_uart_irq+0x9c>
          break;
   1004c:	00000f06 	br	1008c <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   10050:	e0bffb17 	ldw	r2,-20(fp)
   10054:	10800a17 	ldw	r2,40(r2)
   10058:	e0fff917 	ldw	r3,-28(fp)
   1005c:	1809883a 	mov	r4,r3
   10060:	e0fffb17 	ldw	r3,-20(fp)
   10064:	1885883a 	add	r2,r3,r2
   10068:	10800e04 	addi	r2,r2,56
   1006c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   10070:	e0bffb17 	ldw	r2,-20(fp)
   10074:	10800a17 	ldw	r2,40(r2)
   10078:	10800044 	addi	r2,r2,1
   1007c:	10c1ffcc 	andi	r3,r2,2047
   10080:	e0bffb17 	ldw	r2,-20(fp)
   10084:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   10088:	003fe006 	br	1000c <__alt_data_end+0xfffba8dc>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   1008c:	e0bff917 	ldw	r2,-28(fp)
   10090:	10bfffec 	andhi	r2,r2,65535
   10094:	10000f26 	beq	r2,zero,100d4 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   10098:	e0bffb17 	ldw	r2,-20(fp)
   1009c:	10c00817 	ldw	r3,32(r2)
   100a0:	00bfff84 	movi	r2,-2
   100a4:	1886703a 	and	r3,r3,r2
   100a8:	e0bffb17 	ldw	r2,-20(fp)
   100ac:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   100b0:	e0bffc17 	ldw	r2,-16(fp)
   100b4:	10800104 	addi	r2,r2,4
   100b8:	1007883a 	mov	r3,r2
   100bc:	e0bffb17 	ldw	r2,-20(fp)
   100c0:	10800817 	ldw	r2,32(r2)
   100c4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   100c8:	e0bffc17 	ldw	r2,-16(fp)
   100cc:	10800104 	addi	r2,r2,4
   100d0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   100d4:	e0bffd17 	ldw	r2,-12(fp)
   100d8:	1080800c 	andi	r2,r2,512
   100dc:	10003126 	beq	r2,zero,101a4 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   100e0:	e0bffd17 	ldw	r2,-12(fp)
   100e4:	1004d43a 	srli	r2,r2,16
   100e8:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   100ec:	00001406 	br	10140 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   100f0:	e0bffc17 	ldw	r2,-16(fp)
   100f4:	e0fffb17 	ldw	r3,-20(fp)
   100f8:	18c00d17 	ldw	r3,52(r3)
   100fc:	e13ffb17 	ldw	r4,-20(fp)
   10100:	20c7883a 	add	r3,r4,r3
   10104:	18c20e04 	addi	r3,r3,2104
   10108:	18c00003 	ldbu	r3,0(r3)
   1010c:	18c03fcc 	andi	r3,r3,255
   10110:	18c0201c 	xori	r3,r3,128
   10114:	18ffe004 	addi	r3,r3,-128
   10118:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1011c:	e0bffb17 	ldw	r2,-20(fp)
   10120:	10800d17 	ldw	r2,52(r2)
   10124:	10800044 	addi	r2,r2,1
   10128:	10c1ffcc 	andi	r3,r2,2047
   1012c:	e0bffb17 	ldw	r2,-20(fp)
   10130:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   10134:	e0bffa17 	ldw	r2,-24(fp)
   10138:	10bfffc4 	addi	r2,r2,-1
   1013c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   10140:	e0bffa17 	ldw	r2,-24(fp)
   10144:	10000526 	beq	r2,zero,1015c <altera_avalon_jtag_uart_irq+0x1a8>
   10148:	e0bffb17 	ldw	r2,-20(fp)
   1014c:	10c00d17 	ldw	r3,52(r2)
   10150:	e0bffb17 	ldw	r2,-20(fp)
   10154:	10800c17 	ldw	r2,48(r2)
   10158:	18bfe51e 	bne	r3,r2,100f0 <__alt_data_end+0xfffba9c0>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   1015c:	e0bffa17 	ldw	r2,-24(fp)
   10160:	10001026 	beq	r2,zero,101a4 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   10164:	e0bffb17 	ldw	r2,-20(fp)
   10168:	10c00817 	ldw	r3,32(r2)
   1016c:	00bfff44 	movi	r2,-3
   10170:	1886703a 	and	r3,r3,r2
   10174:	e0bffb17 	ldw	r2,-20(fp)
   10178:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1017c:	e0bffb17 	ldw	r2,-20(fp)
   10180:	10800017 	ldw	r2,0(r2)
   10184:	10800104 	addi	r2,r2,4
   10188:	1007883a 	mov	r3,r2
   1018c:	e0bffb17 	ldw	r2,-20(fp)
   10190:	10800817 	ldw	r2,32(r2)
   10194:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   10198:	e0bffc17 	ldw	r2,-16(fp)
   1019c:	10800104 	addi	r2,r2,4
   101a0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   101a4:	003f8c06 	br	ffd8 <__alt_data_end+0xfffba8a8>
}
   101a8:	e037883a 	mov	sp,fp
   101ac:	df000017 	ldw	fp,0(sp)
   101b0:	dec00104 	addi	sp,sp,4
   101b4:	f800283a 	ret

000101b8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   101b8:	defff804 	addi	sp,sp,-32
   101bc:	df000715 	stw	fp,28(sp)
   101c0:	df000704 	addi	fp,sp,28
   101c4:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   101c8:	e0bffb17 	ldw	r2,-20(fp)
   101cc:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   101d0:	e0bff917 	ldw	r2,-28(fp)
   101d4:	10800017 	ldw	r2,0(r2)
   101d8:	10800104 	addi	r2,r2,4
   101dc:	10800037 	ldwio	r2,0(r2)
   101e0:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   101e4:	e0bffa17 	ldw	r2,-24(fp)
   101e8:	1081000c 	andi	r2,r2,1024
   101ec:	10000b26 	beq	r2,zero,1021c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   101f0:	e0bff917 	ldw	r2,-28(fp)
   101f4:	10800017 	ldw	r2,0(r2)
   101f8:	10800104 	addi	r2,r2,4
   101fc:	1007883a 	mov	r3,r2
   10200:	e0bff917 	ldw	r2,-28(fp)
   10204:	10800817 	ldw	r2,32(r2)
   10208:	10810014 	ori	r2,r2,1024
   1020c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   10210:	e0bff917 	ldw	r2,-28(fp)
   10214:	10000915 	stw	zero,36(r2)
   10218:	00000a06 	br	10244 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   1021c:	e0bff917 	ldw	r2,-28(fp)
   10220:	10c00917 	ldw	r3,36(r2)
   10224:	00a00034 	movhi	r2,32768
   10228:	10bfff04 	addi	r2,r2,-4
   1022c:	10c00536 	bltu	r2,r3,10244 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   10230:	e0bff917 	ldw	r2,-28(fp)
   10234:	10800917 	ldw	r2,36(r2)
   10238:	10c00044 	addi	r3,r2,1
   1023c:	e0bff917 	ldw	r2,-28(fp)
   10240:	10c00915 	stw	r3,36(r2)
   10244:	00800074 	movhi	r2,1
   10248:	1096f404 	addi	r2,r2,23504
   1024c:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   10250:	e037883a 	mov	sp,fp
   10254:	df000017 	ldw	fp,0(sp)
   10258:	dec00104 	addi	sp,sp,4
   1025c:	f800283a 	ret

00010260 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   10260:	defffd04 	addi	sp,sp,-12
   10264:	df000215 	stw	fp,8(sp)
   10268:	df000204 	addi	fp,sp,8
   1026c:	e13ffe15 	stw	r4,-8(fp)
   10270:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   10274:	00000506 	br	1028c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   10278:	e0bfff17 	ldw	r2,-4(fp)
   1027c:	1090000c 	andi	r2,r2,16384
   10280:	10000226 	beq	r2,zero,1028c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   10284:	00bffd44 	movi	r2,-11
   10288:	00000b06 	br	102b8 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   1028c:	e0bffe17 	ldw	r2,-8(fp)
   10290:	10c00d17 	ldw	r3,52(r2)
   10294:	e0bffe17 	ldw	r2,-8(fp)
   10298:	10800c17 	ldw	r2,48(r2)
   1029c:	18800526 	beq	r3,r2,102b4 <altera_avalon_jtag_uart_close+0x54>
   102a0:	e0bffe17 	ldw	r2,-8(fp)
   102a4:	10c00917 	ldw	r3,36(r2)
   102a8:	e0bffe17 	ldw	r2,-8(fp)
   102ac:	10800117 	ldw	r2,4(r2)
   102b0:	18bff136 	bltu	r3,r2,10278 <__alt_data_end+0xfffbab48>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   102b4:	0005883a 	mov	r2,zero
}
   102b8:	e037883a 	mov	sp,fp
   102bc:	df000017 	ldw	fp,0(sp)
   102c0:	dec00104 	addi	sp,sp,4
   102c4:	f800283a 	ret

000102c8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   102c8:	defffa04 	addi	sp,sp,-24
   102cc:	df000515 	stw	fp,20(sp)
   102d0:	df000504 	addi	fp,sp,20
   102d4:	e13ffd15 	stw	r4,-12(fp)
   102d8:	e17ffe15 	stw	r5,-8(fp)
   102dc:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   102e0:	00bff9c4 	movi	r2,-25
   102e4:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   102e8:	e0bffe17 	ldw	r2,-8(fp)
   102ec:	10da8060 	cmpeqi	r3,r2,27137
   102f0:	1800031e 	bne	r3,zero,10300 <altera_avalon_jtag_uart_ioctl+0x38>
   102f4:	109a80a0 	cmpeqi	r2,r2,27138
   102f8:	1000191e 	bne	r2,zero,10360 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
   102fc:	00002806 	br	103a0 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   10300:	e0bffd17 	ldw	r2,-12(fp)
   10304:	10c00117 	ldw	r3,4(r2)
   10308:	00a00034 	movhi	r2,32768
   1030c:	10bfffc4 	addi	r2,r2,-1
   10310:	18801226 	beq	r3,r2,1035c <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
   10314:	e0bfff17 	ldw	r2,-4(fp)
   10318:	10800017 	ldw	r2,0(r2)
   1031c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   10320:	e0bffc17 	ldw	r2,-16(fp)
   10324:	10800090 	cmplti	r2,r2,2
   10328:	1000061e 	bne	r2,zero,10344 <altera_avalon_jtag_uart_ioctl+0x7c>
   1032c:	e0fffc17 	ldw	r3,-16(fp)
   10330:	00a00034 	movhi	r2,32768
   10334:	10bfffc4 	addi	r2,r2,-1
   10338:	18800226 	beq	r3,r2,10344 <altera_avalon_jtag_uart_ioctl+0x7c>
   1033c:	e0bffc17 	ldw	r2,-16(fp)
   10340:	00000206 	br	1034c <altera_avalon_jtag_uart_ioctl+0x84>
   10344:	00a00034 	movhi	r2,32768
   10348:	10bfff84 	addi	r2,r2,-2
   1034c:	e0fffd17 	ldw	r3,-12(fp)
   10350:	18800115 	stw	r2,4(r3)
      rc = 0;
   10354:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   10358:	00001106 	br	103a0 <altera_avalon_jtag_uart_ioctl+0xd8>
   1035c:	00001006 	br	103a0 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   10360:	e0bffd17 	ldw	r2,-12(fp)
   10364:	10c00117 	ldw	r3,4(r2)
   10368:	00a00034 	movhi	r2,32768
   1036c:	10bfffc4 	addi	r2,r2,-1
   10370:	18800a26 	beq	r3,r2,1039c <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   10374:	e0bffd17 	ldw	r2,-12(fp)
   10378:	10c00917 	ldw	r3,36(r2)
   1037c:	e0bffd17 	ldw	r2,-12(fp)
   10380:	10800117 	ldw	r2,4(r2)
   10384:	1885803a 	cmpltu	r2,r3,r2
   10388:	10c03fcc 	andi	r3,r2,255
   1038c:	e0bfff17 	ldw	r2,-4(fp)
   10390:	10c00015 	stw	r3,0(r2)
      rc = 0;
   10394:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   10398:	00000006 	br	1039c <altera_avalon_jtag_uart_ioctl+0xd4>
   1039c:	0001883a 	nop

  default:
    break;
  }

  return rc;
   103a0:	e0bffb17 	ldw	r2,-20(fp)
}
   103a4:	e037883a 	mov	sp,fp
   103a8:	df000017 	ldw	fp,0(sp)
   103ac:	dec00104 	addi	sp,sp,4
   103b0:	f800283a 	ret

000103b4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   103b4:	defff304 	addi	sp,sp,-52
   103b8:	dfc00c15 	stw	ra,48(sp)
   103bc:	df000b15 	stw	fp,44(sp)
   103c0:	df000b04 	addi	fp,sp,44
   103c4:	e13ffc15 	stw	r4,-16(fp)
   103c8:	e17ffd15 	stw	r5,-12(fp)
   103cc:	e1bffe15 	stw	r6,-8(fp)
   103d0:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   103d4:	e0bffd17 	ldw	r2,-12(fp)
   103d8:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   103dc:	00004906 	br	10504 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   103e0:	e0bffc17 	ldw	r2,-16(fp)
   103e4:	10800a17 	ldw	r2,40(r2)
   103e8:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   103ec:	e0bffc17 	ldw	r2,-16(fp)
   103f0:	10800b17 	ldw	r2,44(r2)
   103f4:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   103f8:	e0fff717 	ldw	r3,-36(fp)
   103fc:	e0bff817 	ldw	r2,-32(fp)
   10400:	18800536 	bltu	r3,r2,10418 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   10404:	e0fff717 	ldw	r3,-36(fp)
   10408:	e0bff817 	ldw	r2,-32(fp)
   1040c:	1885c83a 	sub	r2,r3,r2
   10410:	e0bff615 	stw	r2,-40(fp)
   10414:	00000406 	br	10428 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   10418:	00c20004 	movi	r3,2048
   1041c:	e0bff817 	ldw	r2,-32(fp)
   10420:	1885c83a 	sub	r2,r3,r2
   10424:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   10428:	e0bff617 	ldw	r2,-40(fp)
   1042c:	1000011e 	bne	r2,zero,10434 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
   10430:	00001d06 	br	104a8 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
   10434:	e0fffe17 	ldw	r3,-8(fp)
   10438:	e0bff617 	ldw	r2,-40(fp)
   1043c:	1880022e 	bgeu	r3,r2,10448 <altera_avalon_jtag_uart_read+0x94>
        n = space;
   10440:	e0bffe17 	ldw	r2,-8(fp)
   10444:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   10448:	e0bff817 	ldw	r2,-32(fp)
   1044c:	10800e04 	addi	r2,r2,56
   10450:	e0fffc17 	ldw	r3,-16(fp)
   10454:	1885883a 	add	r2,r3,r2
   10458:	e13ff517 	ldw	r4,-44(fp)
   1045c:	100b883a 	mov	r5,r2
   10460:	e1bff617 	ldw	r6,-40(fp)
   10464:	000826c0 	call	826c <memcpy>
      ptr   += n;
   10468:	e0fff517 	ldw	r3,-44(fp)
   1046c:	e0bff617 	ldw	r2,-40(fp)
   10470:	1885883a 	add	r2,r3,r2
   10474:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   10478:	e0fffe17 	ldw	r3,-8(fp)
   1047c:	e0bff617 	ldw	r2,-40(fp)
   10480:	1885c83a 	sub	r2,r3,r2
   10484:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   10488:	e0fff817 	ldw	r3,-32(fp)
   1048c:	e0bff617 	ldw	r2,-40(fp)
   10490:	1885883a 	add	r2,r3,r2
   10494:	10c1ffcc 	andi	r3,r2,2047
   10498:	e0bffc17 	ldw	r2,-16(fp)
   1049c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   104a0:	e0bffe17 	ldw	r2,-8(fp)
   104a4:	00bfce16 	blt	zero,r2,103e0 <__alt_data_end+0xfffbacb0>

    /* If we read any data then return it */
    if (ptr != buffer)
   104a8:	e0fff517 	ldw	r3,-44(fp)
   104ac:	e0bffd17 	ldw	r2,-12(fp)
   104b0:	18800126 	beq	r3,r2,104b8 <altera_avalon_jtag_uart_read+0x104>
      break;
   104b4:	00001506 	br	1050c <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   104b8:	e0bfff17 	ldw	r2,-4(fp)
   104bc:	1090000c 	andi	r2,r2,16384
   104c0:	10000126 	beq	r2,zero,104c8 <altera_avalon_jtag_uart_read+0x114>
      break;
   104c4:	00001106 	br	1050c <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   104c8:	0001883a 	nop
   104cc:	e0bffc17 	ldw	r2,-16(fp)
   104d0:	10c00a17 	ldw	r3,40(r2)
   104d4:	e0bff717 	ldw	r2,-36(fp)
   104d8:	1880051e 	bne	r3,r2,104f0 <altera_avalon_jtag_uart_read+0x13c>
   104dc:	e0bffc17 	ldw	r2,-16(fp)
   104e0:	10c00917 	ldw	r3,36(r2)
   104e4:	e0bffc17 	ldw	r2,-16(fp)
   104e8:	10800117 	ldw	r2,4(r2)
   104ec:	18bff736 	bltu	r3,r2,104cc <__alt_data_end+0xfffbad9c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   104f0:	e0bffc17 	ldw	r2,-16(fp)
   104f4:	10c00a17 	ldw	r3,40(r2)
   104f8:	e0bff717 	ldw	r2,-36(fp)
   104fc:	1880011e 	bne	r3,r2,10504 <altera_avalon_jtag_uart_read+0x150>
      break;
   10500:	00000206 	br	1050c <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   10504:	e0bffe17 	ldw	r2,-8(fp)
   10508:	00bfb516 	blt	zero,r2,103e0 <__alt_data_end+0xfffbacb0>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   1050c:	e0fff517 	ldw	r3,-44(fp)
   10510:	e0bffd17 	ldw	r2,-12(fp)
   10514:	18801826 	beq	r3,r2,10578 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10518:	0005303a 	rdctl	r2,status
   1051c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10520:	e0fffa17 	ldw	r3,-24(fp)
   10524:	00bfff84 	movi	r2,-2
   10528:	1884703a 	and	r2,r3,r2
   1052c:	1001703a 	wrctl	status,r2
  
  return context;
   10530:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   10534:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   10538:	e0bffc17 	ldw	r2,-16(fp)
   1053c:	10800817 	ldw	r2,32(r2)
   10540:	10c00054 	ori	r3,r2,1
   10544:	e0bffc17 	ldw	r2,-16(fp)
   10548:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1054c:	e0bffc17 	ldw	r2,-16(fp)
   10550:	10800017 	ldw	r2,0(r2)
   10554:	10800104 	addi	r2,r2,4
   10558:	1007883a 	mov	r3,r2
   1055c:	e0bffc17 	ldw	r2,-16(fp)
   10560:	10800817 	ldw	r2,32(r2)
   10564:	18800035 	stwio	r2,0(r3)
   10568:	e0bff917 	ldw	r2,-28(fp)
   1056c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10570:	e0bffb17 	ldw	r2,-20(fp)
   10574:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   10578:	e0fff517 	ldw	r3,-44(fp)
   1057c:	e0bffd17 	ldw	r2,-12(fp)
   10580:	18800426 	beq	r3,r2,10594 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
   10584:	e0fff517 	ldw	r3,-44(fp)
   10588:	e0bffd17 	ldw	r2,-12(fp)
   1058c:	1885c83a 	sub	r2,r3,r2
   10590:	00000606 	br	105ac <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
   10594:	e0bfff17 	ldw	r2,-4(fp)
   10598:	1090000c 	andi	r2,r2,16384
   1059c:	10000226 	beq	r2,zero,105a8 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
   105a0:	00bffd44 	movi	r2,-11
   105a4:	00000106 	br	105ac <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
   105a8:	00bffec4 	movi	r2,-5
}
   105ac:	e037883a 	mov	sp,fp
   105b0:	dfc00117 	ldw	ra,4(sp)
   105b4:	df000017 	ldw	fp,0(sp)
   105b8:	dec00204 	addi	sp,sp,8
   105bc:	f800283a 	ret

000105c0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   105c0:	defff304 	addi	sp,sp,-52
   105c4:	dfc00c15 	stw	ra,48(sp)
   105c8:	df000b15 	stw	fp,44(sp)
   105cc:	df000b04 	addi	fp,sp,44
   105d0:	e13ffc15 	stw	r4,-16(fp)
   105d4:	e17ffd15 	stw	r5,-12(fp)
   105d8:	e1bffe15 	stw	r6,-8(fp)
   105dc:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   105e0:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   105e4:	e0bffd17 	ldw	r2,-12(fp)
   105e8:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   105ec:	00003806 	br	106d0 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   105f0:	e0bffc17 	ldw	r2,-16(fp)
   105f4:	10800c17 	ldw	r2,48(r2)
   105f8:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
   105fc:	e0bffc17 	ldw	r2,-16(fp)
   10600:	10800d17 	ldw	r2,52(r2)
   10604:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   10608:	e0fff817 	ldw	r3,-32(fp)
   1060c:	e0bff517 	ldw	r2,-44(fp)
   10610:	1880062e 	bgeu	r3,r2,1062c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   10614:	e0fff517 	ldw	r3,-44(fp)
   10618:	e0bff817 	ldw	r2,-32(fp)
   1061c:	1885c83a 	sub	r2,r3,r2
   10620:	10bfffc4 	addi	r2,r2,-1
   10624:	e0bff615 	stw	r2,-40(fp)
   10628:	00000b06 	br	10658 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   1062c:	e0bff517 	ldw	r2,-44(fp)
   10630:	10000526 	beq	r2,zero,10648 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   10634:	00c20004 	movi	r3,2048
   10638:	e0bff817 	ldw	r2,-32(fp)
   1063c:	1885c83a 	sub	r2,r3,r2
   10640:	e0bff615 	stw	r2,-40(fp)
   10644:	00000406 	br	10658 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   10648:	00c1ffc4 	movi	r3,2047
   1064c:	e0bff817 	ldw	r2,-32(fp)
   10650:	1885c83a 	sub	r2,r3,r2
   10654:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   10658:	e0bff617 	ldw	r2,-40(fp)
   1065c:	1000011e 	bne	r2,zero,10664 <altera_avalon_jtag_uart_write+0xa4>
        break;
   10660:	00001d06 	br	106d8 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
   10664:	e0fffe17 	ldw	r3,-8(fp)
   10668:	e0bff617 	ldw	r2,-40(fp)
   1066c:	1880022e 	bgeu	r3,r2,10678 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
   10670:	e0bffe17 	ldw	r2,-8(fp)
   10674:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   10678:	e0bff817 	ldw	r2,-32(fp)
   1067c:	10820e04 	addi	r2,r2,2104
   10680:	e0fffc17 	ldw	r3,-16(fp)
   10684:	1885883a 	add	r2,r3,r2
   10688:	1009883a 	mov	r4,r2
   1068c:	e17ffd17 	ldw	r5,-12(fp)
   10690:	e1bff617 	ldw	r6,-40(fp)
   10694:	000826c0 	call	826c <memcpy>
      ptr   += n;
   10698:	e0fffd17 	ldw	r3,-12(fp)
   1069c:	e0bff617 	ldw	r2,-40(fp)
   106a0:	1885883a 	add	r2,r3,r2
   106a4:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   106a8:	e0fffe17 	ldw	r3,-8(fp)
   106ac:	e0bff617 	ldw	r2,-40(fp)
   106b0:	1885c83a 	sub	r2,r3,r2
   106b4:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   106b8:	e0fff817 	ldw	r3,-32(fp)
   106bc:	e0bff617 	ldw	r2,-40(fp)
   106c0:	1885883a 	add	r2,r3,r2
   106c4:	10c1ffcc 	andi	r3,r2,2047
   106c8:	e0bffc17 	ldw	r2,-16(fp)
   106cc:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   106d0:	e0bffe17 	ldw	r2,-8(fp)
   106d4:	00bfc616 	blt	zero,r2,105f0 <__alt_data_end+0xfffbaec0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   106d8:	0005303a 	rdctl	r2,status
   106dc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   106e0:	e0fffa17 	ldw	r3,-24(fp)
   106e4:	00bfff84 	movi	r2,-2
   106e8:	1884703a 	and	r2,r3,r2
   106ec:	1001703a 	wrctl	status,r2
  
  return context;
   106f0:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   106f4:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   106f8:	e0bffc17 	ldw	r2,-16(fp)
   106fc:	10800817 	ldw	r2,32(r2)
   10700:	10c00094 	ori	r3,r2,2
   10704:	e0bffc17 	ldw	r2,-16(fp)
   10708:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1070c:	e0bffc17 	ldw	r2,-16(fp)
   10710:	10800017 	ldw	r2,0(r2)
   10714:	10800104 	addi	r2,r2,4
   10718:	1007883a 	mov	r3,r2
   1071c:	e0bffc17 	ldw	r2,-16(fp)
   10720:	10800817 	ldw	r2,32(r2)
   10724:	18800035 	stwio	r2,0(r3)
   10728:	e0bff917 	ldw	r2,-28(fp)
   1072c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10730:	e0bffb17 	ldw	r2,-20(fp)
   10734:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   10738:	e0bffe17 	ldw	r2,-8(fp)
   1073c:	0080120e 	bge	zero,r2,10788 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
   10740:	e0bfff17 	ldw	r2,-4(fp)
   10744:	1090000c 	andi	r2,r2,16384
   10748:	10000126 	beq	r2,zero,10750 <altera_avalon_jtag_uart_write+0x190>
        break;
   1074c:	00001006 	br	10790 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   10750:	0001883a 	nop
   10754:	e0bffc17 	ldw	r2,-16(fp)
   10758:	10c00d17 	ldw	r3,52(r2)
   1075c:	e0bff517 	ldw	r2,-44(fp)
   10760:	1880051e 	bne	r3,r2,10778 <altera_avalon_jtag_uart_write+0x1b8>
   10764:	e0bffc17 	ldw	r2,-16(fp)
   10768:	10c00917 	ldw	r3,36(r2)
   1076c:	e0bffc17 	ldw	r2,-16(fp)
   10770:	10800117 	ldw	r2,4(r2)
   10774:	18bff736 	bltu	r3,r2,10754 <__alt_data_end+0xfffbb024>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   10778:	e0bffc17 	ldw	r2,-16(fp)
   1077c:	10800917 	ldw	r2,36(r2)
   10780:	10000126 	beq	r2,zero,10788 <altera_avalon_jtag_uart_write+0x1c8>
         break;
   10784:	00000206 	br	10790 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
   10788:	e0bffe17 	ldw	r2,-8(fp)
   1078c:	00bf9716 	blt	zero,r2,105ec <__alt_data_end+0xfffbaebc>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   10790:	e0fffd17 	ldw	r3,-12(fp)
   10794:	e0bff717 	ldw	r2,-36(fp)
   10798:	18800426 	beq	r3,r2,107ac <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
   1079c:	e0fffd17 	ldw	r3,-12(fp)
   107a0:	e0bff717 	ldw	r2,-36(fp)
   107a4:	1885c83a 	sub	r2,r3,r2
   107a8:	00000606 	br	107c4 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
   107ac:	e0bfff17 	ldw	r2,-4(fp)
   107b0:	1090000c 	andi	r2,r2,16384
   107b4:	10000226 	beq	r2,zero,107c0 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
   107b8:	00bffd44 	movi	r2,-11
   107bc:	00000106 	br	107c4 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   107c0:	00bffec4 	movi	r2,-5
}
   107c4:	e037883a 	mov	sp,fp
   107c8:	dfc00117 	ldw	ra,4(sp)
   107cc:	df000017 	ldw	fp,0(sp)
   107d0:	dec00204 	addi	sp,sp,8
   107d4:	f800283a 	ret

000107d8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   107d8:	defff504 	addi	sp,sp,-44
   107dc:	df000a15 	stw	fp,40(sp)
   107e0:	df000a04 	addi	fp,sp,40
   107e4:	e13ffc15 	stw	r4,-16(fp)
   107e8:	e17ffd15 	stw	r5,-12(fp)
   107ec:	e1bffe15 	stw	r6,-8(fp)
   107f0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   107f4:	e03ff615 	stw	zero,-40(fp)
   107f8:	00800074 	movhi	r2,1
   107fc:	1096f404 	addi	r2,r2,23504
   10800:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   10804:	10003f26 	beq	r2,zero,10904 <alt_alarm_start+0x12c>
  {
    if (alarm)
   10808:	e0bffc17 	ldw	r2,-16(fp)
   1080c:	10003b26 	beq	r2,zero,108fc <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   10810:	e0bffc17 	ldw	r2,-16(fp)
   10814:	e0fffe17 	ldw	r3,-8(fp)
   10818:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   1081c:	e0bffc17 	ldw	r2,-16(fp)
   10820:	e0ffff17 	ldw	r3,-4(fp)
   10824:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10828:	0005303a 	rdctl	r2,status
   1082c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10830:	e0fff817 	ldw	r3,-32(fp)
   10834:	00bfff84 	movi	r2,-2
   10838:	1884703a 	and	r2,r3,r2
   1083c:	1001703a 	wrctl	status,r2
  
  return context;
   10840:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   10844:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   10848:	00800074 	movhi	r2,1
   1084c:	1096f504 	addi	r2,r2,23508
   10850:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   10854:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   10858:	e0fffd17 	ldw	r3,-12(fp)
   1085c:	e0bff617 	ldw	r2,-40(fp)
   10860:	1885883a 	add	r2,r3,r2
   10864:	10c00044 	addi	r3,r2,1
   10868:	e0bffc17 	ldw	r2,-16(fp)
   1086c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   10870:	e0bffc17 	ldw	r2,-16(fp)
   10874:	10c00217 	ldw	r3,8(r2)
   10878:	e0bff617 	ldw	r2,-40(fp)
   1087c:	1880042e 	bgeu	r3,r2,10890 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   10880:	e0bffc17 	ldw	r2,-16(fp)
   10884:	00c00044 	movi	r3,1
   10888:	10c00405 	stb	r3,16(r2)
   1088c:	00000206 	br	10898 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   10890:	e0bffc17 	ldw	r2,-16(fp)
   10894:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   10898:	e0fffc17 	ldw	r3,-16(fp)
   1089c:	00800074 	movhi	r2,1
   108a0:	10902404 	addi	r2,r2,16528
   108a4:	e0bff915 	stw	r2,-28(fp)
   108a8:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   108ac:	e0bffa17 	ldw	r2,-24(fp)
   108b0:	e0fff917 	ldw	r3,-28(fp)
   108b4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   108b8:	e0bff917 	ldw	r2,-28(fp)
   108bc:	10c00017 	ldw	r3,0(r2)
   108c0:	e0bffa17 	ldw	r2,-24(fp)
   108c4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   108c8:	e0bff917 	ldw	r2,-28(fp)
   108cc:	10800017 	ldw	r2,0(r2)
   108d0:	e0fffa17 	ldw	r3,-24(fp)
   108d4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   108d8:	e0bff917 	ldw	r2,-28(fp)
   108dc:	e0fffa17 	ldw	r3,-24(fp)
   108e0:	10c00015 	stw	r3,0(r2)
   108e4:	e0bff717 	ldw	r2,-36(fp)
   108e8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   108ec:	e0bffb17 	ldw	r2,-20(fp)
   108f0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   108f4:	0005883a 	mov	r2,zero
   108f8:	00000306 	br	10908 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   108fc:	00bffa84 	movi	r2,-22
   10900:	00000106 	br	10908 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   10904:	00bfde84 	movi	r2,-134
  }
}
   10908:	e037883a 	mov	sp,fp
   1090c:	df000017 	ldw	fp,0(sp)
   10910:	dec00104 	addi	sp,sp,4
   10914:	f800283a 	ret

00010918 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   10918:	defffa04 	addi	sp,sp,-24
   1091c:	dfc00515 	stw	ra,20(sp)
   10920:	df000415 	stw	fp,16(sp)
   10924:	df000404 	addi	fp,sp,16
   10928:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   1092c:	00800244 	movi	r2,9
   10930:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   10934:	e13ffd17 	ldw	r4,-12(fp)
   10938:	014003f4 	movhi	r5,15
   1093c:	29509004 	addi	r5,r5,16960
   10940:	000ca900 	call	ca90 <__mulsi3>
   10944:	0100bef4 	movhi	r4,763
   10948:	213c2004 	addi	r4,r4,-3968
   1094c:	100b883a 	mov	r5,r2
   10950:	000ca800 	call	ca80 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   10954:	01200034 	movhi	r4,32768
   10958:	213fffc4 	addi	r4,r4,-1
   1095c:	100b883a 	mov	r5,r2
   10960:	000ca800 	call	ca80 <__udivsi3>
   10964:	e13fff17 	ldw	r4,-4(fp)
   10968:	100b883a 	mov	r5,r2
   1096c:	000ca800 	call	ca80 <__udivsi3>
   10970:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   10974:	e0bffe17 	ldw	r2,-8(fp)
   10978:	10002a26 	beq	r2,zero,10a24 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   1097c:	e03ffc15 	stw	zero,-16(fp)
   10980:	00001706 	br	109e0 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   10984:	00a00034 	movhi	r2,32768
   10988:	10bfffc4 	addi	r2,r2,-1
   1098c:	10bfffc4 	addi	r2,r2,-1
   10990:	103ffe1e 	bne	r2,zero,1098c <__alt_data_end+0xfffbb25c>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   10994:	e13ffd17 	ldw	r4,-12(fp)
   10998:	014003f4 	movhi	r5,15
   1099c:	29509004 	addi	r5,r5,16960
   109a0:	000ca900 	call	ca90 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   109a4:	0100bef4 	movhi	r4,763
   109a8:	213c2004 	addi	r4,r4,-3968
   109ac:	100b883a 	mov	r5,r2
   109b0:	000ca800 	call	ca80 <__udivsi3>
   109b4:	01200034 	movhi	r4,32768
   109b8:	213fffc4 	addi	r4,r4,-1
   109bc:	100b883a 	mov	r5,r2
   109c0:	000ca800 	call	ca80 <__udivsi3>
   109c4:	1007883a 	mov	r3,r2
   109c8:	e0bfff17 	ldw	r2,-4(fp)
   109cc:	10c5c83a 	sub	r2,r2,r3
   109d0:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   109d4:	e0bffc17 	ldw	r2,-16(fp)
   109d8:	10800044 	addi	r2,r2,1
   109dc:	e0bffc15 	stw	r2,-16(fp)
   109e0:	e0fffc17 	ldw	r3,-16(fp)
   109e4:	e0bffe17 	ldw	r2,-8(fp)
   109e8:	18bfe616 	blt	r3,r2,10984 <__alt_data_end+0xfffbb254>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   109ec:	e13ffd17 	ldw	r4,-12(fp)
   109f0:	014003f4 	movhi	r5,15
   109f4:	29509004 	addi	r5,r5,16960
   109f8:	000ca900 	call	ca90 <__mulsi3>
   109fc:	0100bef4 	movhi	r4,763
   10a00:	213c2004 	addi	r4,r4,-3968
   10a04:	100b883a 	mov	r5,r2
   10a08:	000ca800 	call	ca80 <__udivsi3>
   10a0c:	1009883a 	mov	r4,r2
   10a10:	e17fff17 	ldw	r5,-4(fp)
   10a14:	000ca900 	call	ca90 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   10a18:	10bfffc4 	addi	r2,r2,-1
   10a1c:	103ffe1e 	bne	r2,zero,10a18 <__alt_data_end+0xfffbb2e8>
   10a20:	00000d06 	br	10a58 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   10a24:	e13ffd17 	ldw	r4,-12(fp)
   10a28:	014003f4 	movhi	r5,15
   10a2c:	29509004 	addi	r5,r5,16960
   10a30:	000ca900 	call	ca90 <__mulsi3>
   10a34:	0100bef4 	movhi	r4,763
   10a38:	213c2004 	addi	r4,r4,-3968
   10a3c:	100b883a 	mov	r5,r2
   10a40:	000ca800 	call	ca80 <__udivsi3>
   10a44:	1009883a 	mov	r4,r2
   10a48:	e17fff17 	ldw	r5,-4(fp)
   10a4c:	000ca900 	call	ca90 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   10a50:	10bfffc4 	addi	r2,r2,-1
   10a54:	00bffe16 	blt	zero,r2,10a50 <__alt_data_end+0xfffbb320>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   10a58:	0005883a 	mov	r2,zero
}
   10a5c:	e037883a 	mov	sp,fp
   10a60:	dfc00117 	ldw	ra,4(sp)
   10a64:	df000017 	ldw	fp,0(sp)
   10a68:	dec00204 	addi	sp,sp,8
   10a6c:	f800283a 	ret

00010a70 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   10a70:	deffff04 	addi	sp,sp,-4
   10a74:	df000015 	stw	fp,0(sp)
   10a78:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   10a7c:	e037883a 	mov	sp,fp
   10a80:	df000017 	ldw	fp,0(sp)
   10a84:	dec00104 	addi	sp,sp,4
   10a88:	f800283a 	ret

00010a8c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10a8c:	defffe04 	addi	sp,sp,-8
   10a90:	dfc00115 	stw	ra,4(sp)
   10a94:	df000015 	stw	fp,0(sp)
   10a98:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10a9c:	00800074 	movhi	r2,1
   10aa0:	10902104 	addi	r2,r2,16516
   10aa4:	10800017 	ldw	r2,0(r2)
   10aa8:	10000526 	beq	r2,zero,10ac0 <alt_get_errno+0x34>
   10aac:	00800074 	movhi	r2,1
   10ab0:	10902104 	addi	r2,r2,16516
   10ab4:	10800017 	ldw	r2,0(r2)
   10ab8:	103ee83a 	callr	r2
   10abc:	00000206 	br	10ac8 <alt_get_errno+0x3c>
   10ac0:	00800074 	movhi	r2,1
   10ac4:	1096ec04 	addi	r2,r2,23472
}
   10ac8:	e037883a 	mov	sp,fp
   10acc:	dfc00117 	ldw	ra,4(sp)
   10ad0:	df000017 	ldw	fp,0(sp)
   10ad4:	dec00204 	addi	sp,sp,8
   10ad8:	f800283a 	ret

00010adc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   10adc:	defffa04 	addi	sp,sp,-24
   10ae0:	dfc00515 	stw	ra,20(sp)
   10ae4:	df000415 	stw	fp,16(sp)
   10ae8:	df000404 	addi	fp,sp,16
   10aec:	e13ffe15 	stw	r4,-8(fp)
   10af0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   10af4:	e0bffe17 	ldw	r2,-8(fp)
   10af8:	10000326 	beq	r2,zero,10b08 <alt_dev_llist_insert+0x2c>
   10afc:	e0bffe17 	ldw	r2,-8(fp)
   10b00:	10800217 	ldw	r2,8(r2)
   10b04:	1000061e 	bne	r2,zero,10b20 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   10b08:	0010a8c0 	call	10a8c <alt_get_errno>
   10b0c:	1007883a 	mov	r3,r2
   10b10:	00800584 	movi	r2,22
   10b14:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   10b18:	00bffa84 	movi	r2,-22
   10b1c:	00001306 	br	10b6c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   10b20:	e0bffe17 	ldw	r2,-8(fp)
   10b24:	e0ffff17 	ldw	r3,-4(fp)
   10b28:	e0fffc15 	stw	r3,-16(fp)
   10b2c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   10b30:	e0bffd17 	ldw	r2,-12(fp)
   10b34:	e0fffc17 	ldw	r3,-16(fp)
   10b38:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   10b3c:	e0bffc17 	ldw	r2,-16(fp)
   10b40:	10c00017 	ldw	r3,0(r2)
   10b44:	e0bffd17 	ldw	r2,-12(fp)
   10b48:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   10b4c:	e0bffc17 	ldw	r2,-16(fp)
   10b50:	10800017 	ldw	r2,0(r2)
   10b54:	e0fffd17 	ldw	r3,-12(fp)
   10b58:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   10b5c:	e0bffc17 	ldw	r2,-16(fp)
   10b60:	e0fffd17 	ldw	r3,-12(fp)
   10b64:	10c00015 	stw	r3,0(r2)

  return 0;  
   10b68:	0005883a 	mov	r2,zero
}
   10b6c:	e037883a 	mov	sp,fp
   10b70:	dfc00117 	ldw	ra,4(sp)
   10b74:	df000017 	ldw	fp,0(sp)
   10b78:	dec00204 	addi	sp,sp,8
   10b7c:	f800283a 	ret

00010b80 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   10b80:	defffd04 	addi	sp,sp,-12
   10b84:	dfc00215 	stw	ra,8(sp)
   10b88:	df000115 	stw	fp,4(sp)
   10b8c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   10b90:	00800074 	movhi	r2,1
   10b94:	1086e404 	addi	r2,r2,7056
   10b98:	e0bfff15 	stw	r2,-4(fp)
   10b9c:	00000606 	br	10bb8 <_do_ctors+0x38>
        (*ctor) (); 
   10ba0:	e0bfff17 	ldw	r2,-4(fp)
   10ba4:	10800017 	ldw	r2,0(r2)
   10ba8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   10bac:	e0bfff17 	ldw	r2,-4(fp)
   10bb0:	10bfff04 	addi	r2,r2,-4
   10bb4:	e0bfff15 	stw	r2,-4(fp)
   10bb8:	e0ffff17 	ldw	r3,-4(fp)
   10bbc:	00800074 	movhi	r2,1
   10bc0:	1086e504 	addi	r2,r2,7060
   10bc4:	18bff62e 	bgeu	r3,r2,10ba0 <__alt_data_end+0xfffbb470>
        (*ctor) (); 
}
   10bc8:	e037883a 	mov	sp,fp
   10bcc:	dfc00117 	ldw	ra,4(sp)
   10bd0:	df000017 	ldw	fp,0(sp)
   10bd4:	dec00204 	addi	sp,sp,8
   10bd8:	f800283a 	ret

00010bdc <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   10bdc:	defffd04 	addi	sp,sp,-12
   10be0:	dfc00215 	stw	ra,8(sp)
   10be4:	df000115 	stw	fp,4(sp)
   10be8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   10bec:	00800074 	movhi	r2,1
   10bf0:	1086e404 	addi	r2,r2,7056
   10bf4:	e0bfff15 	stw	r2,-4(fp)
   10bf8:	00000606 	br	10c14 <_do_dtors+0x38>
        (*dtor) (); 
   10bfc:	e0bfff17 	ldw	r2,-4(fp)
   10c00:	10800017 	ldw	r2,0(r2)
   10c04:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   10c08:	e0bfff17 	ldw	r2,-4(fp)
   10c0c:	10bfff04 	addi	r2,r2,-4
   10c10:	e0bfff15 	stw	r2,-4(fp)
   10c14:	e0ffff17 	ldw	r3,-4(fp)
   10c18:	00800074 	movhi	r2,1
   10c1c:	1086e504 	addi	r2,r2,7060
   10c20:	18bff62e 	bgeu	r3,r2,10bfc <__alt_data_end+0xfffbb4cc>
        (*dtor) (); 
}
   10c24:	e037883a 	mov	sp,fp
   10c28:	dfc00117 	ldw	ra,4(sp)
   10c2c:	df000017 	ldw	fp,0(sp)
   10c30:	dec00204 	addi	sp,sp,8
   10c34:	f800283a 	ret

00010c38 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   10c38:	deffff04 	addi	sp,sp,-4
   10c3c:	df000015 	stw	fp,0(sp)
   10c40:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   10c44:	e037883a 	mov	sp,fp
   10c48:	df000017 	ldw	fp,0(sp)
   10c4c:	dec00104 	addi	sp,sp,4
   10c50:	f800283a 	ret

00010c54 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   10c54:	defff904 	addi	sp,sp,-28
   10c58:	dfc00615 	stw	ra,24(sp)
   10c5c:	df000515 	stw	fp,20(sp)
   10c60:	df000504 	addi	fp,sp,20
   10c64:	e13ffc15 	stw	r4,-16(fp)
   10c68:	e17ffd15 	stw	r5,-12(fp)
   10c6c:	e1bffe15 	stw	r6,-8(fp)
   10c70:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   10c74:	e0800217 	ldw	r2,8(fp)
   10c78:	d8800015 	stw	r2,0(sp)
   10c7c:	e13ffc17 	ldw	r4,-16(fp)
   10c80:	e17ffd17 	ldw	r5,-12(fp)
   10c84:	e1bffe17 	ldw	r6,-8(fp)
   10c88:	e1ffff17 	ldw	r7,-4(fp)
   10c8c:	0010e340 	call	10e34 <alt_iic_isr_register>
}  
   10c90:	e037883a 	mov	sp,fp
   10c94:	dfc00117 	ldw	ra,4(sp)
   10c98:	df000017 	ldw	fp,0(sp)
   10c9c:	dec00204 	addi	sp,sp,8
   10ca0:	f800283a 	ret

00010ca4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   10ca4:	defff904 	addi	sp,sp,-28
   10ca8:	df000615 	stw	fp,24(sp)
   10cac:	df000604 	addi	fp,sp,24
   10cb0:	e13ffe15 	stw	r4,-8(fp)
   10cb4:	e17fff15 	stw	r5,-4(fp)
   10cb8:	e0bfff17 	ldw	r2,-4(fp)
   10cbc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10cc0:	0005303a 	rdctl	r2,status
   10cc4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10cc8:	e0fffb17 	ldw	r3,-20(fp)
   10ccc:	00bfff84 	movi	r2,-2
   10cd0:	1884703a 	and	r2,r3,r2
   10cd4:	1001703a 	wrctl	status,r2
  
  return context;
   10cd8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   10cdc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   10ce0:	e0bffa17 	ldw	r2,-24(fp)
   10ce4:	00c00044 	movi	r3,1
   10ce8:	1884983a 	sll	r2,r3,r2
   10cec:	1007883a 	mov	r3,r2
   10cf0:	00800074 	movhi	r2,1
   10cf4:	1096f304 	addi	r2,r2,23500
   10cf8:	10800017 	ldw	r2,0(r2)
   10cfc:	1886b03a 	or	r3,r3,r2
   10d00:	00800074 	movhi	r2,1
   10d04:	1096f304 	addi	r2,r2,23500
   10d08:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   10d0c:	00800074 	movhi	r2,1
   10d10:	1096f304 	addi	r2,r2,23500
   10d14:	10800017 	ldw	r2,0(r2)
   10d18:	100170fa 	wrctl	ienable,r2
   10d1c:	e0bffc17 	ldw	r2,-16(fp)
   10d20:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10d24:	e0bffd17 	ldw	r2,-12(fp)
   10d28:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   10d2c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   10d30:	0001883a 	nop
}
   10d34:	e037883a 	mov	sp,fp
   10d38:	df000017 	ldw	fp,0(sp)
   10d3c:	dec00104 	addi	sp,sp,4
   10d40:	f800283a 	ret

00010d44 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   10d44:	defff904 	addi	sp,sp,-28
   10d48:	df000615 	stw	fp,24(sp)
   10d4c:	df000604 	addi	fp,sp,24
   10d50:	e13ffe15 	stw	r4,-8(fp)
   10d54:	e17fff15 	stw	r5,-4(fp)
   10d58:	e0bfff17 	ldw	r2,-4(fp)
   10d5c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10d60:	0005303a 	rdctl	r2,status
   10d64:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10d68:	e0fffb17 	ldw	r3,-20(fp)
   10d6c:	00bfff84 	movi	r2,-2
   10d70:	1884703a 	and	r2,r3,r2
   10d74:	1001703a 	wrctl	status,r2
  
  return context;
   10d78:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   10d7c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   10d80:	e0bffa17 	ldw	r2,-24(fp)
   10d84:	00c00044 	movi	r3,1
   10d88:	1884983a 	sll	r2,r3,r2
   10d8c:	0084303a 	nor	r2,zero,r2
   10d90:	1007883a 	mov	r3,r2
   10d94:	00800074 	movhi	r2,1
   10d98:	1096f304 	addi	r2,r2,23500
   10d9c:	10800017 	ldw	r2,0(r2)
   10da0:	1886703a 	and	r3,r3,r2
   10da4:	00800074 	movhi	r2,1
   10da8:	1096f304 	addi	r2,r2,23500
   10dac:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   10db0:	00800074 	movhi	r2,1
   10db4:	1096f304 	addi	r2,r2,23500
   10db8:	10800017 	ldw	r2,0(r2)
   10dbc:	100170fa 	wrctl	ienable,r2
   10dc0:	e0bffc17 	ldw	r2,-16(fp)
   10dc4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10dc8:	e0bffd17 	ldw	r2,-12(fp)
   10dcc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   10dd0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   10dd4:	0001883a 	nop
}
   10dd8:	e037883a 	mov	sp,fp
   10ddc:	df000017 	ldw	fp,0(sp)
   10de0:	dec00104 	addi	sp,sp,4
   10de4:	f800283a 	ret

00010de8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   10de8:	defffc04 	addi	sp,sp,-16
   10dec:	df000315 	stw	fp,12(sp)
   10df0:	df000304 	addi	fp,sp,12
   10df4:	e13ffe15 	stw	r4,-8(fp)
   10df8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   10dfc:	000530fa 	rdctl	r2,ienable
   10e00:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   10e04:	e0bfff17 	ldw	r2,-4(fp)
   10e08:	00c00044 	movi	r3,1
   10e0c:	1884983a 	sll	r2,r3,r2
   10e10:	1007883a 	mov	r3,r2
   10e14:	e0bffd17 	ldw	r2,-12(fp)
   10e18:	1884703a 	and	r2,r3,r2
   10e1c:	1004c03a 	cmpne	r2,r2,zero
   10e20:	10803fcc 	andi	r2,r2,255
}
   10e24:	e037883a 	mov	sp,fp
   10e28:	df000017 	ldw	fp,0(sp)
   10e2c:	dec00104 	addi	sp,sp,4
   10e30:	f800283a 	ret

00010e34 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   10e34:	defff504 	addi	sp,sp,-44
   10e38:	dfc00a15 	stw	ra,40(sp)
   10e3c:	df000915 	stw	fp,36(sp)
   10e40:	df000904 	addi	fp,sp,36
   10e44:	e13ffc15 	stw	r4,-16(fp)
   10e48:	e17ffd15 	stw	r5,-12(fp)
   10e4c:	e1bffe15 	stw	r6,-8(fp)
   10e50:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   10e54:	00bffa84 	movi	r2,-22
   10e58:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   10e5c:	e0bffd17 	ldw	r2,-12(fp)
   10e60:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   10e64:	e0bff817 	ldw	r2,-32(fp)
   10e68:	10800808 	cmpgei	r2,r2,32
   10e6c:	1000271e 	bne	r2,zero,10f0c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10e70:	0005303a 	rdctl	r2,status
   10e74:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10e78:	e0fffa17 	ldw	r3,-24(fp)
   10e7c:	00bfff84 	movi	r2,-2
   10e80:	1884703a 	and	r2,r3,r2
   10e84:	1001703a 	wrctl	status,r2
  
  return context;
   10e88:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   10e8c:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   10e90:	00800074 	movhi	r2,1
   10e94:	10970104 	addi	r2,r2,23556
   10e98:	e0fff817 	ldw	r3,-32(fp)
   10e9c:	180690fa 	slli	r3,r3,3
   10ea0:	10c5883a 	add	r2,r2,r3
   10ea4:	e0fffe17 	ldw	r3,-8(fp)
   10ea8:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   10eac:	00800074 	movhi	r2,1
   10eb0:	10970104 	addi	r2,r2,23556
   10eb4:	e0fff817 	ldw	r3,-32(fp)
   10eb8:	180690fa 	slli	r3,r3,3
   10ebc:	10c5883a 	add	r2,r2,r3
   10ec0:	10800104 	addi	r2,r2,4
   10ec4:	e0ffff17 	ldw	r3,-4(fp)
   10ec8:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   10ecc:	e0bffe17 	ldw	r2,-8(fp)
   10ed0:	10000526 	beq	r2,zero,10ee8 <alt_iic_isr_register+0xb4>
   10ed4:	e0bff817 	ldw	r2,-32(fp)
   10ed8:	e13ffc17 	ldw	r4,-16(fp)
   10edc:	100b883a 	mov	r5,r2
   10ee0:	0010ca40 	call	10ca4 <alt_ic_irq_enable>
   10ee4:	00000406 	br	10ef8 <alt_iic_isr_register+0xc4>
   10ee8:	e0bff817 	ldw	r2,-32(fp)
   10eec:	e13ffc17 	ldw	r4,-16(fp)
   10ef0:	100b883a 	mov	r5,r2
   10ef4:	0010d440 	call	10d44 <alt_ic_irq_disable>
   10ef8:	e0bff715 	stw	r2,-36(fp)
   10efc:	e0bff917 	ldw	r2,-28(fp)
   10f00:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10f04:	e0bffb17 	ldw	r2,-20(fp)
   10f08:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   10f0c:	e0bff717 	ldw	r2,-36(fp)
}
   10f10:	e037883a 	mov	sp,fp
   10f14:	dfc00117 	ldw	ra,4(sp)
   10f18:	df000017 	ldw	fp,0(sp)
   10f1c:	dec00204 	addi	sp,sp,8
   10f20:	f800283a 	ret

00010f24 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   10f24:	defff804 	addi	sp,sp,-32
   10f28:	dfc00715 	stw	ra,28(sp)
   10f2c:	df000615 	stw	fp,24(sp)
   10f30:	dc000515 	stw	r16,20(sp)
   10f34:	df000604 	addi	fp,sp,24
   10f38:	e13ffb15 	stw	r4,-20(fp)
   10f3c:	e17ffc15 	stw	r5,-16(fp)
   10f40:	e1bffd15 	stw	r6,-12(fp)
   10f44:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   10f48:	e13ffc17 	ldw	r4,-16(fp)
   10f4c:	e17ffd17 	ldw	r5,-12(fp)
   10f50:	e1bffe17 	ldw	r6,-8(fp)
   10f54:	00111c00 	call	111c0 <open>
   10f58:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   10f5c:	e0bffa17 	ldw	r2,-24(fp)
   10f60:	10002216 	blt	r2,zero,10fec <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   10f64:	04000074 	movhi	r16,1
   10f68:	840b9e04 	addi	r16,r16,11896
   10f6c:	e0bffa17 	ldw	r2,-24(fp)
   10f70:	1009883a 	mov	r4,r2
   10f74:	01400304 	movi	r5,12
   10f78:	000ca900 	call	ca90 <__mulsi3>
   10f7c:	8085883a 	add	r2,r16,r2
   10f80:	10c00017 	ldw	r3,0(r2)
   10f84:	e0bffb17 	ldw	r2,-20(fp)
   10f88:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   10f8c:	04000074 	movhi	r16,1
   10f90:	840b9e04 	addi	r16,r16,11896
   10f94:	e0bffa17 	ldw	r2,-24(fp)
   10f98:	1009883a 	mov	r4,r2
   10f9c:	01400304 	movi	r5,12
   10fa0:	000ca900 	call	ca90 <__mulsi3>
   10fa4:	8085883a 	add	r2,r16,r2
   10fa8:	10800104 	addi	r2,r2,4
   10fac:	10c00017 	ldw	r3,0(r2)
   10fb0:	e0bffb17 	ldw	r2,-20(fp)
   10fb4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   10fb8:	04000074 	movhi	r16,1
   10fbc:	840b9e04 	addi	r16,r16,11896
   10fc0:	e0bffa17 	ldw	r2,-24(fp)
   10fc4:	1009883a 	mov	r4,r2
   10fc8:	01400304 	movi	r5,12
   10fcc:	000ca900 	call	ca90 <__mulsi3>
   10fd0:	8085883a 	add	r2,r16,r2
   10fd4:	10800204 	addi	r2,r2,8
   10fd8:	10c00017 	ldw	r3,0(r2)
   10fdc:	e0bffb17 	ldw	r2,-20(fp)
   10fe0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   10fe4:	e13ffa17 	ldw	r4,-24(fp)
   10fe8:	000fa280 	call	fa28 <alt_release_fd>
  }
} 
   10fec:	e6ffff04 	addi	sp,fp,-4
   10ff0:	dfc00217 	ldw	ra,8(sp)
   10ff4:	df000117 	ldw	fp,4(sp)
   10ff8:	dc000017 	ldw	r16,0(sp)
   10ffc:	dec00304 	addi	sp,sp,12
   11000:	f800283a 	ret

00011004 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   11004:	defffb04 	addi	sp,sp,-20
   11008:	dfc00415 	stw	ra,16(sp)
   1100c:	df000315 	stw	fp,12(sp)
   11010:	df000304 	addi	fp,sp,12
   11014:	e13ffd15 	stw	r4,-12(fp)
   11018:	e17ffe15 	stw	r5,-8(fp)
   1101c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   11020:	01000074 	movhi	r4,1
   11024:	210ba104 	addi	r4,r4,11908
   11028:	e17ffd17 	ldw	r5,-12(fp)
   1102c:	01800044 	movi	r6,1
   11030:	01c07fc4 	movi	r7,511
   11034:	0010f240 	call	10f24 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   11038:	01000074 	movhi	r4,1
   1103c:	210b9e04 	addi	r4,r4,11896
   11040:	e17ffe17 	ldw	r5,-8(fp)
   11044:	000d883a 	mov	r6,zero
   11048:	01c07fc4 	movi	r7,511
   1104c:	0010f240 	call	10f24 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   11050:	01000074 	movhi	r4,1
   11054:	210ba404 	addi	r4,r4,11920
   11058:	e17fff17 	ldw	r5,-4(fp)
   1105c:	01800044 	movi	r6,1
   11060:	01c07fc4 	movi	r7,511
   11064:	0010f240 	call	10f24 <alt_open_fd>
}  
   11068:	e037883a 	mov	sp,fp
   1106c:	dfc00117 	ldw	ra,4(sp)
   11070:	df000017 	ldw	fp,0(sp)
   11074:	dec00204 	addi	sp,sp,8
   11078:	f800283a 	ret

0001107c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1107c:	defffe04 	addi	sp,sp,-8
   11080:	dfc00115 	stw	ra,4(sp)
   11084:	df000015 	stw	fp,0(sp)
   11088:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1108c:	00800074 	movhi	r2,1
   11090:	10902104 	addi	r2,r2,16516
   11094:	10800017 	ldw	r2,0(r2)
   11098:	10000526 	beq	r2,zero,110b0 <alt_get_errno+0x34>
   1109c:	00800074 	movhi	r2,1
   110a0:	10902104 	addi	r2,r2,16516
   110a4:	10800017 	ldw	r2,0(r2)
   110a8:	103ee83a 	callr	r2
   110ac:	00000206 	br	110b8 <alt_get_errno+0x3c>
   110b0:	00800074 	movhi	r2,1
   110b4:	1096ec04 	addi	r2,r2,23472
}
   110b8:	e037883a 	mov	sp,fp
   110bc:	dfc00117 	ldw	ra,4(sp)
   110c0:	df000017 	ldw	fp,0(sp)
   110c4:	dec00204 	addi	sp,sp,8
   110c8:	f800283a 	ret

000110cc <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   110cc:	defffb04 	addi	sp,sp,-20
   110d0:	dfc00415 	stw	ra,16(sp)
   110d4:	df000315 	stw	fp,12(sp)
   110d8:	dc000215 	stw	r16,8(sp)
   110dc:	df000304 	addi	fp,sp,12
   110e0:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   110e4:	e0bffe17 	ldw	r2,-8(fp)
   110e8:	10800217 	ldw	r2,8(r2)
   110ec:	10d00034 	orhi	r3,r2,16384
   110f0:	e0bffe17 	ldw	r2,-8(fp)
   110f4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   110f8:	e03ffd15 	stw	zero,-12(fp)
   110fc:	00002306 	br	1118c <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   11100:	04000074 	movhi	r16,1
   11104:	840b9e04 	addi	r16,r16,11896
   11108:	e0bffd17 	ldw	r2,-12(fp)
   1110c:	1009883a 	mov	r4,r2
   11110:	01400304 	movi	r5,12
   11114:	000ca900 	call	ca90 <__mulsi3>
   11118:	8085883a 	add	r2,r16,r2
   1111c:	10c00017 	ldw	r3,0(r2)
   11120:	e0bffe17 	ldw	r2,-8(fp)
   11124:	10800017 	ldw	r2,0(r2)
   11128:	1880151e 	bne	r3,r2,11180 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1112c:	04000074 	movhi	r16,1
   11130:	840b9e04 	addi	r16,r16,11896
   11134:	e0bffd17 	ldw	r2,-12(fp)
   11138:	1009883a 	mov	r4,r2
   1113c:	01400304 	movi	r5,12
   11140:	000ca900 	call	ca90 <__mulsi3>
   11144:	8085883a 	add	r2,r16,r2
   11148:	10800204 	addi	r2,r2,8
   1114c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   11150:	10000b0e 	bge	r2,zero,11180 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   11154:	e13ffd17 	ldw	r4,-12(fp)
   11158:	01400304 	movi	r5,12
   1115c:	000ca900 	call	ca90 <__mulsi3>
   11160:	1007883a 	mov	r3,r2
   11164:	00800074 	movhi	r2,1
   11168:	108b9e04 	addi	r2,r2,11896
   1116c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   11170:	e0bffe17 	ldw	r2,-8(fp)
   11174:	18800226 	beq	r3,r2,11180 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   11178:	00bffcc4 	movi	r2,-13
   1117c:	00000a06 	br	111a8 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   11180:	e0bffd17 	ldw	r2,-12(fp)
   11184:	10800044 	addi	r2,r2,1
   11188:	e0bffd15 	stw	r2,-12(fp)
   1118c:	00800074 	movhi	r2,1
   11190:	10902004 	addi	r2,r2,16512
   11194:	10800017 	ldw	r2,0(r2)
   11198:	1007883a 	mov	r3,r2
   1119c:	e0bffd17 	ldw	r2,-12(fp)
   111a0:	18bfd72e 	bgeu	r3,r2,11100 <__alt_data_end+0xfffbb9d0>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   111a4:	0005883a 	mov	r2,zero
}
   111a8:	e6ffff04 	addi	sp,fp,-4
   111ac:	dfc00217 	ldw	ra,8(sp)
   111b0:	df000117 	ldw	fp,4(sp)
   111b4:	dc000017 	ldw	r16,0(sp)
   111b8:	dec00304 	addi	sp,sp,12
   111bc:	f800283a 	ret

000111c0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   111c0:	defff604 	addi	sp,sp,-40
   111c4:	dfc00915 	stw	ra,36(sp)
   111c8:	df000815 	stw	fp,32(sp)
   111cc:	df000804 	addi	fp,sp,32
   111d0:	e13ffd15 	stw	r4,-12(fp)
   111d4:	e17ffe15 	stw	r5,-8(fp)
   111d8:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   111dc:	00bfffc4 	movi	r2,-1
   111e0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   111e4:	00bffb44 	movi	r2,-19
   111e8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   111ec:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   111f0:	e13ffd17 	ldw	r4,-12(fp)
   111f4:	01400074 	movhi	r5,1
   111f8:	29501e04 	addi	r5,r5,16504
   111fc:	00114dc0 	call	114dc <alt_find_dev>
   11200:	e0bff815 	stw	r2,-32(fp)
   11204:	e0bff817 	ldw	r2,-32(fp)
   11208:	1000051e 	bne	r2,zero,11220 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   1120c:	e13ffd17 	ldw	r4,-12(fp)
   11210:	001156c0 	call	1156c <alt_find_file>
   11214:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   11218:	00800044 	movi	r2,1
   1121c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   11220:	e0bff817 	ldw	r2,-32(fp)
   11224:	10002b26 	beq	r2,zero,112d4 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
   11228:	e13ff817 	ldw	r4,-32(fp)
   1122c:	00116800 	call	11680 <alt_get_fd>
   11230:	e0bff915 	stw	r2,-28(fp)
   11234:	e0bff917 	ldw	r2,-28(fp)
   11238:	1000030e 	bge	r2,zero,11248 <open+0x88>
    {
      status = index;
   1123c:	e0bff917 	ldw	r2,-28(fp)
   11240:	e0bffa15 	stw	r2,-24(fp)
   11244:	00002506 	br	112dc <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
   11248:	e13ff917 	ldw	r4,-28(fp)
   1124c:	01400304 	movi	r5,12
   11250:	000ca900 	call	ca90 <__mulsi3>
   11254:	1007883a 	mov	r3,r2
   11258:	00800074 	movhi	r2,1
   1125c:	108b9e04 	addi	r2,r2,11896
   11260:	1885883a 	add	r2,r3,r2
   11264:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   11268:	e0fffe17 	ldw	r3,-8(fp)
   1126c:	00900034 	movhi	r2,16384
   11270:	10bfffc4 	addi	r2,r2,-1
   11274:	1886703a 	and	r3,r3,r2
   11278:	e0bffc17 	ldw	r2,-16(fp)
   1127c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   11280:	e0bffb17 	ldw	r2,-20(fp)
   11284:	1000051e 	bne	r2,zero,1129c <open+0xdc>
   11288:	e13ffc17 	ldw	r4,-16(fp)
   1128c:	00110cc0 	call	110cc <alt_file_locked>
   11290:	e0bffa15 	stw	r2,-24(fp)
   11294:	e0bffa17 	ldw	r2,-24(fp)
   11298:	10001016 	blt	r2,zero,112dc <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   1129c:	e0bff817 	ldw	r2,-32(fp)
   112a0:	10800317 	ldw	r2,12(r2)
   112a4:	10000826 	beq	r2,zero,112c8 <open+0x108>
   112a8:	e0bff817 	ldw	r2,-32(fp)
   112ac:	10800317 	ldw	r2,12(r2)
   112b0:	e13ffc17 	ldw	r4,-16(fp)
   112b4:	e17ffd17 	ldw	r5,-12(fp)
   112b8:	e1bffe17 	ldw	r6,-8(fp)
   112bc:	e1ffff17 	ldw	r7,-4(fp)
   112c0:	103ee83a 	callr	r2
   112c4:	00000106 	br	112cc <open+0x10c>
   112c8:	0005883a 	mov	r2,zero
   112cc:	e0bffa15 	stw	r2,-24(fp)
   112d0:	00000206 	br	112dc <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   112d4:	00bffb44 	movi	r2,-19
   112d8:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   112dc:	e0bffa17 	ldw	r2,-24(fp)
   112e0:	1000090e 	bge	r2,zero,11308 <open+0x148>
  {
    alt_release_fd (index);  
   112e4:	e13ff917 	ldw	r4,-28(fp)
   112e8:	000fa280 	call	fa28 <alt_release_fd>
    ALT_ERRNO = -status;
   112ec:	001107c0 	call	1107c <alt_get_errno>
   112f0:	1007883a 	mov	r3,r2
   112f4:	e0bffa17 	ldw	r2,-24(fp)
   112f8:	0085c83a 	sub	r2,zero,r2
   112fc:	18800015 	stw	r2,0(r3)
    return -1;
   11300:	00bfffc4 	movi	r2,-1
   11304:	00000106 	br	1130c <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
   11308:	e0bff917 	ldw	r2,-28(fp)
}
   1130c:	e037883a 	mov	sp,fp
   11310:	dfc00117 	ldw	ra,4(sp)
   11314:	df000017 	ldw	fp,0(sp)
   11318:	dec00204 	addi	sp,sp,8
   1131c:	f800283a 	ret

00011320 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   11320:	defffa04 	addi	sp,sp,-24
   11324:	df000515 	stw	fp,20(sp)
   11328:	df000504 	addi	fp,sp,20
   1132c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11330:	0005303a 	rdctl	r2,status
   11334:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11338:	e0fffc17 	ldw	r3,-16(fp)
   1133c:	00bfff84 	movi	r2,-2
   11340:	1884703a 	and	r2,r3,r2
   11344:	1001703a 	wrctl	status,r2
  
  return context;
   11348:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   1134c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   11350:	e0bfff17 	ldw	r2,-4(fp)
   11354:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   11358:	e0bffd17 	ldw	r2,-12(fp)
   1135c:	10800017 	ldw	r2,0(r2)
   11360:	e0fffd17 	ldw	r3,-12(fp)
   11364:	18c00117 	ldw	r3,4(r3)
   11368:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   1136c:	e0bffd17 	ldw	r2,-12(fp)
   11370:	10800117 	ldw	r2,4(r2)
   11374:	e0fffd17 	ldw	r3,-12(fp)
   11378:	18c00017 	ldw	r3,0(r3)
   1137c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   11380:	e0bffd17 	ldw	r2,-12(fp)
   11384:	e0fffd17 	ldw	r3,-12(fp)
   11388:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   1138c:	e0bffd17 	ldw	r2,-12(fp)
   11390:	e0fffd17 	ldw	r3,-12(fp)
   11394:	10c00015 	stw	r3,0(r2)
   11398:	e0bffb17 	ldw	r2,-20(fp)
   1139c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   113a0:	e0bffe17 	ldw	r2,-8(fp)
   113a4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   113a8:	e037883a 	mov	sp,fp
   113ac:	df000017 	ldw	fp,0(sp)
   113b0:	dec00104 	addi	sp,sp,4
   113b4:	f800283a 	ret

000113b8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   113b8:	defffb04 	addi	sp,sp,-20
   113bc:	dfc00415 	stw	ra,16(sp)
   113c0:	df000315 	stw	fp,12(sp)
   113c4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   113c8:	d0a00e17 	ldw	r2,-32712(gp)
   113cc:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   113d0:	d0a6df17 	ldw	r2,-25732(gp)
   113d4:	10800044 	addi	r2,r2,1
   113d8:	d0a6df15 	stw	r2,-25732(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   113dc:	00002e06 	br	11498 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   113e0:	e0bffd17 	ldw	r2,-12(fp)
   113e4:	10800017 	ldw	r2,0(r2)
   113e8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   113ec:	e0bffd17 	ldw	r2,-12(fp)
   113f0:	10800403 	ldbu	r2,16(r2)
   113f4:	10803fcc 	andi	r2,r2,255
   113f8:	10000426 	beq	r2,zero,1140c <alt_tick+0x54>
   113fc:	d0a6df17 	ldw	r2,-25732(gp)
   11400:	1000021e 	bne	r2,zero,1140c <alt_tick+0x54>
    {
      alarm->rollover = 0;
   11404:	e0bffd17 	ldw	r2,-12(fp)
   11408:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   1140c:	e0bffd17 	ldw	r2,-12(fp)
   11410:	10800217 	ldw	r2,8(r2)
   11414:	d0e6df17 	ldw	r3,-25732(gp)
   11418:	18801d36 	bltu	r3,r2,11490 <alt_tick+0xd8>
   1141c:	e0bffd17 	ldw	r2,-12(fp)
   11420:	10800403 	ldbu	r2,16(r2)
   11424:	10803fcc 	andi	r2,r2,255
   11428:	1000191e 	bne	r2,zero,11490 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   1142c:	e0bffd17 	ldw	r2,-12(fp)
   11430:	10800317 	ldw	r2,12(r2)
   11434:	e0fffd17 	ldw	r3,-12(fp)
   11438:	18c00517 	ldw	r3,20(r3)
   1143c:	1809883a 	mov	r4,r3
   11440:	103ee83a 	callr	r2
   11444:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   11448:	e0bfff17 	ldw	r2,-4(fp)
   1144c:	1000031e 	bne	r2,zero,1145c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   11450:	e13ffd17 	ldw	r4,-12(fp)
   11454:	00113200 	call	11320 <alt_alarm_stop>
   11458:	00000d06 	br	11490 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   1145c:	e0bffd17 	ldw	r2,-12(fp)
   11460:	10c00217 	ldw	r3,8(r2)
   11464:	e0bfff17 	ldw	r2,-4(fp)
   11468:	1887883a 	add	r3,r3,r2
   1146c:	e0bffd17 	ldw	r2,-12(fp)
   11470:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   11474:	e0bffd17 	ldw	r2,-12(fp)
   11478:	10c00217 	ldw	r3,8(r2)
   1147c:	d0a6df17 	ldw	r2,-25732(gp)
   11480:	1880032e 	bgeu	r3,r2,11490 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   11484:	e0bffd17 	ldw	r2,-12(fp)
   11488:	00c00044 	movi	r3,1
   1148c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   11490:	e0bffe17 	ldw	r2,-8(fp)
   11494:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   11498:	e0fffd17 	ldw	r3,-12(fp)
   1149c:	d0a00e04 	addi	r2,gp,-32712
   114a0:	18bfcf1e 	bne	r3,r2,113e0 <__alt_data_end+0xfffbbcb0>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   114a4:	0001883a 	nop
}
   114a8:	e037883a 	mov	sp,fp
   114ac:	dfc00117 	ldw	ra,4(sp)
   114b0:	df000017 	ldw	fp,0(sp)
   114b4:	dec00204 	addi	sp,sp,8
   114b8:	f800283a 	ret

000114bc <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   114bc:	deffff04 	addi	sp,sp,-4
   114c0:	df000015 	stw	fp,0(sp)
   114c4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   114c8:	000170fa 	wrctl	ienable,zero
}
   114cc:	e037883a 	mov	sp,fp
   114d0:	df000017 	ldw	fp,0(sp)
   114d4:	dec00104 	addi	sp,sp,4
   114d8:	f800283a 	ret

000114dc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   114dc:	defffa04 	addi	sp,sp,-24
   114e0:	dfc00515 	stw	ra,20(sp)
   114e4:	df000415 	stw	fp,16(sp)
   114e8:	df000404 	addi	fp,sp,16
   114ec:	e13ffe15 	stw	r4,-8(fp)
   114f0:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   114f4:	e0bfff17 	ldw	r2,-4(fp)
   114f8:	10800017 	ldw	r2,0(r2)
   114fc:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   11500:	e13ffe17 	ldw	r4,-8(fp)
   11504:	00032800 	call	3280 <strlen>
   11508:	10800044 	addi	r2,r2,1
   1150c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   11510:	00000d06 	br	11548 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   11514:	e0bffc17 	ldw	r2,-16(fp)
   11518:	10c00217 	ldw	r3,8(r2)
   1151c:	e0bffd17 	ldw	r2,-12(fp)
   11520:	1809883a 	mov	r4,r3
   11524:	e17ffe17 	ldw	r5,-8(fp)
   11528:	100d883a 	mov	r6,r2
   1152c:	001183c0 	call	1183c <memcmp>
   11530:	1000021e 	bne	r2,zero,1153c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   11534:	e0bffc17 	ldw	r2,-16(fp)
   11538:	00000706 	br	11558 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   1153c:	e0bffc17 	ldw	r2,-16(fp)
   11540:	10800017 	ldw	r2,0(r2)
   11544:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   11548:	e0fffc17 	ldw	r3,-16(fp)
   1154c:	e0bfff17 	ldw	r2,-4(fp)
   11550:	18bff01e 	bne	r3,r2,11514 <__alt_data_end+0xfffbbde4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   11554:	0005883a 	mov	r2,zero
}
   11558:	e037883a 	mov	sp,fp
   1155c:	dfc00117 	ldw	ra,4(sp)
   11560:	df000017 	ldw	fp,0(sp)
   11564:	dec00204 	addi	sp,sp,8
   11568:	f800283a 	ret

0001156c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   1156c:	defffb04 	addi	sp,sp,-20
   11570:	dfc00415 	stw	ra,16(sp)
   11574:	df000315 	stw	fp,12(sp)
   11578:	df000304 	addi	fp,sp,12
   1157c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   11580:	00800074 	movhi	r2,1
   11584:	10901c04 	addi	r2,r2,16496
   11588:	10800017 	ldw	r2,0(r2)
   1158c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   11590:	00003106 	br	11658 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   11594:	e0bffd17 	ldw	r2,-12(fp)
   11598:	10800217 	ldw	r2,8(r2)
   1159c:	1009883a 	mov	r4,r2
   115a0:	00032800 	call	3280 <strlen>
   115a4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   115a8:	e0bffd17 	ldw	r2,-12(fp)
   115ac:	10c00217 	ldw	r3,8(r2)
   115b0:	e0bffe17 	ldw	r2,-8(fp)
   115b4:	10bfffc4 	addi	r2,r2,-1
   115b8:	1885883a 	add	r2,r3,r2
   115bc:	10800003 	ldbu	r2,0(r2)
   115c0:	10803fcc 	andi	r2,r2,255
   115c4:	1080201c 	xori	r2,r2,128
   115c8:	10bfe004 	addi	r2,r2,-128
   115cc:	10800bd8 	cmpnei	r2,r2,47
   115d0:	1000031e 	bne	r2,zero,115e0 <alt_find_file+0x74>
    {
      len -= 1;
   115d4:	e0bffe17 	ldw	r2,-8(fp)
   115d8:	10bfffc4 	addi	r2,r2,-1
   115dc:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   115e0:	e0bffe17 	ldw	r2,-8(fp)
   115e4:	e0ffff17 	ldw	r3,-4(fp)
   115e8:	1885883a 	add	r2,r3,r2
   115ec:	10800003 	ldbu	r2,0(r2)
   115f0:	10803fcc 	andi	r2,r2,255
   115f4:	1080201c 	xori	r2,r2,128
   115f8:	10bfe004 	addi	r2,r2,-128
   115fc:	10800be0 	cmpeqi	r2,r2,47
   11600:	1000081e 	bne	r2,zero,11624 <alt_find_file+0xb8>
   11604:	e0bffe17 	ldw	r2,-8(fp)
   11608:	e0ffff17 	ldw	r3,-4(fp)
   1160c:	1885883a 	add	r2,r3,r2
   11610:	10800003 	ldbu	r2,0(r2)
   11614:	10803fcc 	andi	r2,r2,255
   11618:	1080201c 	xori	r2,r2,128
   1161c:	10bfe004 	addi	r2,r2,-128
   11620:	10000a1e 	bne	r2,zero,1164c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   11624:	e0bffd17 	ldw	r2,-12(fp)
   11628:	10c00217 	ldw	r3,8(r2)
   1162c:	e0bffe17 	ldw	r2,-8(fp)
   11630:	1809883a 	mov	r4,r3
   11634:	e17fff17 	ldw	r5,-4(fp)
   11638:	100d883a 	mov	r6,r2
   1163c:	001183c0 	call	1183c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   11640:	1000021e 	bne	r2,zero,1164c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   11644:	e0bffd17 	ldw	r2,-12(fp)
   11648:	00000806 	br	1166c <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   1164c:	e0bffd17 	ldw	r2,-12(fp)
   11650:	10800017 	ldw	r2,0(r2)
   11654:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   11658:	e0fffd17 	ldw	r3,-12(fp)
   1165c:	00800074 	movhi	r2,1
   11660:	10901c04 	addi	r2,r2,16496
   11664:	18bfcb1e 	bne	r3,r2,11594 <__alt_data_end+0xfffbbe64>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   11668:	0005883a 	mov	r2,zero
}
   1166c:	e037883a 	mov	sp,fp
   11670:	dfc00117 	ldw	ra,4(sp)
   11674:	df000017 	ldw	fp,0(sp)
   11678:	dec00204 	addi	sp,sp,8
   1167c:	f800283a 	ret

00011680 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   11680:	defffa04 	addi	sp,sp,-24
   11684:	dfc00515 	stw	ra,20(sp)
   11688:	df000415 	stw	fp,16(sp)
   1168c:	dc000315 	stw	r16,12(sp)
   11690:	df000404 	addi	fp,sp,16
   11694:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   11698:	00bffa04 	movi	r2,-24
   1169c:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   116a0:	e03ffc15 	stw	zero,-16(fp)
   116a4:	00002106 	br	1172c <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   116a8:	04000074 	movhi	r16,1
   116ac:	840b9e04 	addi	r16,r16,11896
   116b0:	e0bffc17 	ldw	r2,-16(fp)
   116b4:	1009883a 	mov	r4,r2
   116b8:	01400304 	movi	r5,12
   116bc:	000ca900 	call	ca90 <__mulsi3>
   116c0:	8085883a 	add	r2,r16,r2
   116c4:	10800017 	ldw	r2,0(r2)
   116c8:	1000151e 	bne	r2,zero,11720 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   116cc:	04000074 	movhi	r16,1
   116d0:	840b9e04 	addi	r16,r16,11896
   116d4:	e0bffc17 	ldw	r2,-16(fp)
   116d8:	1009883a 	mov	r4,r2
   116dc:	01400304 	movi	r5,12
   116e0:	000ca900 	call	ca90 <__mulsi3>
   116e4:	8085883a 	add	r2,r16,r2
   116e8:	e0fffe17 	ldw	r3,-8(fp)
   116ec:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   116f0:	00800074 	movhi	r2,1
   116f4:	10902004 	addi	r2,r2,16512
   116f8:	10c00017 	ldw	r3,0(r2)
   116fc:	e0bffc17 	ldw	r2,-16(fp)
   11700:	1880040e 	bge	r3,r2,11714 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   11704:	00800074 	movhi	r2,1
   11708:	10902004 	addi	r2,r2,16512
   1170c:	e0fffc17 	ldw	r3,-16(fp)
   11710:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   11714:	e0bffc17 	ldw	r2,-16(fp)
   11718:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   1171c:	00000606 	br	11738 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   11720:	e0bffc17 	ldw	r2,-16(fp)
   11724:	10800044 	addi	r2,r2,1
   11728:	e0bffc15 	stw	r2,-16(fp)
   1172c:	e0bffc17 	ldw	r2,-16(fp)
   11730:	10800810 	cmplti	r2,r2,32
   11734:	103fdc1e 	bne	r2,zero,116a8 <__alt_data_end+0xfffbbf78>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   11738:	e0bffd17 	ldw	r2,-12(fp)
}
   1173c:	e6ffff04 	addi	sp,fp,-4
   11740:	dfc00217 	ldw	ra,8(sp)
   11744:	df000117 	ldw	fp,4(sp)
   11748:	dc000017 	ldw	r16,0(sp)
   1174c:	dec00304 	addi	sp,sp,12
   11750:	f800283a 	ret

00011754 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   11754:	defffe04 	addi	sp,sp,-8
   11758:	df000115 	stw	fp,4(sp)
   1175c:	df000104 	addi	fp,sp,4
   11760:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   11764:	e0bfff17 	ldw	r2,-4(fp)
   11768:	10bffe84 	addi	r2,r2,-6
   1176c:	10c00428 	cmpgeui	r3,r2,16
   11770:	18001a1e 	bne	r3,zero,117dc <alt_exception_cause_generated_bad_addr+0x88>
   11774:	100690ba 	slli	r3,r2,2
   11778:	00800074 	movhi	r2,1
   1177c:	1085e304 	addi	r2,r2,6028
   11780:	1885883a 	add	r2,r3,r2
   11784:	10800017 	ldw	r2,0(r2)
   11788:	1000683a 	jmp	r2
   1178c:	000117cc 	andi	zero,zero,1119
   11790:	000117cc 	andi	zero,zero,1119
   11794:	000117dc 	xori	zero,zero,1119
   11798:	000117dc 	xori	zero,zero,1119
   1179c:	000117dc 	xori	zero,zero,1119
   117a0:	000117cc 	andi	zero,zero,1119
   117a4:	000117d4 	movui	zero,1119
   117a8:	000117dc 	xori	zero,zero,1119
   117ac:	000117cc 	andi	zero,zero,1119
   117b0:	000117cc 	andi	zero,zero,1119
   117b4:	000117dc 	xori	zero,zero,1119
   117b8:	000117cc 	andi	zero,zero,1119
   117bc:	000117d4 	movui	zero,1119
   117c0:	000117dc 	xori	zero,zero,1119
   117c4:	000117dc 	xori	zero,zero,1119
   117c8:	000117cc 	andi	zero,zero,1119
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   117cc:	00800044 	movi	r2,1
   117d0:	00000306 	br	117e0 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   117d4:	0005883a 	mov	r2,zero
   117d8:	00000106 	br	117e0 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   117dc:	0005883a 	mov	r2,zero
  }
}
   117e0:	e037883a 	mov	sp,fp
   117e4:	df000017 	ldw	fp,0(sp)
   117e8:	dec00104 	addi	sp,sp,4
   117ec:	f800283a 	ret

000117f0 <atexit>:
   117f0:	200b883a 	mov	r5,r4
   117f4:	000d883a 	mov	r6,zero
   117f8:	0009883a 	mov	r4,zero
   117fc:	000f883a 	mov	r7,zero
   11800:	00118b81 	jmpi	118b8 <__register_exitproc>

00011804 <exit>:
   11804:	defffe04 	addi	sp,sp,-8
   11808:	000b883a 	mov	r5,zero
   1180c:	dc000015 	stw	r16,0(sp)
   11810:	dfc00115 	stw	ra,4(sp)
   11814:	2021883a 	mov	r16,r4
   11818:	00119cc0 	call	119cc <__call_exitprocs>
   1181c:	00800074 	movhi	r2,1
   11820:	10901804 	addi	r2,r2,16480
   11824:	11000017 	ldw	r4,0(r2)
   11828:	20800f17 	ldw	r2,60(r4)
   1182c:	10000126 	beq	r2,zero,11834 <exit+0x30>
   11830:	103ee83a 	callr	r2
   11834:	8009883a 	mov	r4,r16
   11838:	0011b600 	call	11b60 <_exit>

0001183c <memcmp>:
   1183c:	01c000c4 	movi	r7,3
   11840:	3980192e 	bgeu	r7,r6,118a8 <memcmp+0x6c>
   11844:	2144b03a 	or	r2,r4,r5
   11848:	11c4703a 	and	r2,r2,r7
   1184c:	10000f26 	beq	r2,zero,1188c <memcmp+0x50>
   11850:	20800003 	ldbu	r2,0(r4)
   11854:	28c00003 	ldbu	r3,0(r5)
   11858:	10c0151e 	bne	r2,r3,118b0 <memcmp+0x74>
   1185c:	31bfff84 	addi	r6,r6,-2
   11860:	01ffffc4 	movi	r7,-1
   11864:	00000406 	br	11878 <memcmp+0x3c>
   11868:	20800003 	ldbu	r2,0(r4)
   1186c:	28c00003 	ldbu	r3,0(r5)
   11870:	31bfffc4 	addi	r6,r6,-1
   11874:	10c00e1e 	bne	r2,r3,118b0 <memcmp+0x74>
   11878:	21000044 	addi	r4,r4,1
   1187c:	29400044 	addi	r5,r5,1
   11880:	31fff91e 	bne	r6,r7,11868 <__alt_data_end+0xfffbc138>
   11884:	0005883a 	mov	r2,zero
   11888:	f800283a 	ret
   1188c:	20c00017 	ldw	r3,0(r4)
   11890:	28800017 	ldw	r2,0(r5)
   11894:	1880041e 	bne	r3,r2,118a8 <memcmp+0x6c>
   11898:	31bfff04 	addi	r6,r6,-4
   1189c:	21000104 	addi	r4,r4,4
   118a0:	29400104 	addi	r5,r5,4
   118a4:	39bff936 	bltu	r7,r6,1188c <__alt_data_end+0xfffbc15c>
   118a8:	303fe91e 	bne	r6,zero,11850 <__alt_data_end+0xfffbc120>
   118ac:	003ff506 	br	11884 <__alt_data_end+0xfffbc154>
   118b0:	10c5c83a 	sub	r2,r2,r3
   118b4:	f800283a 	ret

000118b8 <__register_exitproc>:
   118b8:	00800074 	movhi	r2,1
   118bc:	defffa04 	addi	sp,sp,-24
   118c0:	10901804 	addi	r2,r2,16480
   118c4:	dc000315 	stw	r16,12(sp)
   118c8:	14000017 	ldw	r16,0(r2)
   118cc:	dc400415 	stw	r17,16(sp)
   118d0:	dfc00515 	stw	ra,20(sp)
   118d4:	80805217 	ldw	r2,328(r16)
   118d8:	2023883a 	mov	r17,r4
   118dc:	10003626 	beq	r2,zero,119b8 <__register_exitproc+0x100>
   118e0:	10c00117 	ldw	r3,4(r2)
   118e4:	010007c4 	movi	r4,31
   118e8:	20c00e16 	blt	r4,r3,11924 <__register_exitproc+0x6c>
   118ec:	1a400044 	addi	r9,r3,1
   118f0:	8800211e 	bne	r17,zero,11978 <__register_exitproc+0xc0>
   118f4:	18c00084 	addi	r3,r3,2
   118f8:	18c7883a 	add	r3,r3,r3
   118fc:	18c7883a 	add	r3,r3,r3
   11900:	12400115 	stw	r9,4(r2)
   11904:	10c7883a 	add	r3,r2,r3
   11908:	19400015 	stw	r5,0(r3)
   1190c:	0005883a 	mov	r2,zero
   11910:	dfc00517 	ldw	ra,20(sp)
   11914:	dc400417 	ldw	r17,16(sp)
   11918:	dc000317 	ldw	r16,12(sp)
   1191c:	dec00604 	addi	sp,sp,24
   11920:	f800283a 	ret
   11924:	00800034 	movhi	r2,0
   11928:	108a4a04 	addi	r2,r2,10536
   1192c:	10002526 	beq	r2,zero,119c4 <__register_exitproc+0x10c>
   11930:	01006404 	movi	r4,400
   11934:	d9400015 	stw	r5,0(sp)
   11938:	d9800115 	stw	r6,4(sp)
   1193c:	d9c00215 	stw	r7,8(sp)
   11940:	00029280 	call	2928 <malloc>
   11944:	d9400017 	ldw	r5,0(sp)
   11948:	d9800117 	ldw	r6,4(sp)
   1194c:	d9c00217 	ldw	r7,8(sp)
   11950:	10001c26 	beq	r2,zero,119c4 <__register_exitproc+0x10c>
   11954:	80c05217 	ldw	r3,328(r16)
   11958:	10000115 	stw	zero,4(r2)
   1195c:	02400044 	movi	r9,1
   11960:	10c00015 	stw	r3,0(r2)
   11964:	80805215 	stw	r2,328(r16)
   11968:	10006215 	stw	zero,392(r2)
   1196c:	10006315 	stw	zero,396(r2)
   11970:	0007883a 	mov	r3,zero
   11974:	883fdf26 	beq	r17,zero,118f4 <__alt_data_end+0xfffbc1c4>
   11978:	18d1883a 	add	r8,r3,r3
   1197c:	4211883a 	add	r8,r8,r8
   11980:	1211883a 	add	r8,r2,r8
   11984:	41802215 	stw	r6,136(r8)
   11988:	01000044 	movi	r4,1
   1198c:	11806217 	ldw	r6,392(r2)
   11990:	20c8983a 	sll	r4,r4,r3
   11994:	310cb03a 	or	r6,r6,r4
   11998:	11806215 	stw	r6,392(r2)
   1199c:	41c04215 	stw	r7,264(r8)
   119a0:	01800084 	movi	r6,2
   119a4:	89bfd31e 	bne	r17,r6,118f4 <__alt_data_end+0xfffbc1c4>
   119a8:	11806317 	ldw	r6,396(r2)
   119ac:	3108b03a 	or	r4,r6,r4
   119b0:	11006315 	stw	r4,396(r2)
   119b4:	003fcf06 	br	118f4 <__alt_data_end+0xfffbc1c4>
   119b8:	80805304 	addi	r2,r16,332
   119bc:	80805215 	stw	r2,328(r16)
   119c0:	003fc706 	br	118e0 <__alt_data_end+0xfffbc1b0>
   119c4:	00bfffc4 	movi	r2,-1
   119c8:	003fd106 	br	11910 <__alt_data_end+0xfffbc1e0>

000119cc <__call_exitprocs>:
   119cc:	00800074 	movhi	r2,1
   119d0:	10901804 	addi	r2,r2,16480
   119d4:	10800017 	ldw	r2,0(r2)
   119d8:	defff404 	addi	sp,sp,-48
   119dc:	dd800815 	stw	r22,32(sp)
   119e0:	d8800015 	stw	r2,0(sp)
   119e4:	10805204 	addi	r2,r2,328
   119e8:	dd000615 	stw	r20,24(sp)
   119ec:	dc800415 	stw	r18,16(sp)
   119f0:	dfc00b15 	stw	ra,44(sp)
   119f4:	df000a15 	stw	fp,40(sp)
   119f8:	ddc00915 	stw	r23,36(sp)
   119fc:	dd400715 	stw	r21,28(sp)
   11a00:	dcc00515 	stw	r19,20(sp)
   11a04:	dc400315 	stw	r17,12(sp)
   11a08:	dc000215 	stw	r16,8(sp)
   11a0c:	2025883a 	mov	r18,r4
   11a10:	2829883a 	mov	r20,r5
   11a14:	d8800115 	stw	r2,4(sp)
   11a18:	05bfffc4 	movi	r22,-1
   11a1c:	d8800017 	ldw	r2,0(sp)
   11a20:	14c05217 	ldw	r19,328(r2)
   11a24:	98001d26 	beq	r19,zero,11a9c <__call_exitprocs+0xd0>
   11a28:	dd400117 	ldw	r21,4(sp)
   11a2c:	98800117 	ldw	r2,4(r19)
   11a30:	173fffc4 	addi	fp,r2,-1
   11a34:	e0000d16 	blt	fp,zero,11a6c <__call_exitprocs+0xa0>
   11a38:	14000044 	addi	r16,r2,1
   11a3c:	8421883a 	add	r16,r16,r16
   11a40:	8421883a 	add	r16,r16,r16
   11a44:	84402004 	addi	r17,r16,128
   11a48:	9c63883a 	add	r17,r19,r17
   11a4c:	9c21883a 	add	r16,r19,r16
   11a50:	a0001e26 	beq	r20,zero,11acc <__call_exitprocs+0x100>
   11a54:	80804017 	ldw	r2,256(r16)
   11a58:	15001c26 	beq	r2,r20,11acc <__call_exitprocs+0x100>
   11a5c:	e73fffc4 	addi	fp,fp,-1
   11a60:	843fff04 	addi	r16,r16,-4
   11a64:	8c7fff04 	addi	r17,r17,-4
   11a68:	e5bff91e 	bne	fp,r22,11a50 <__alt_data_end+0xfffbc320>
   11a6c:	00800034 	movhi	r2,0
   11a70:	108a4f04 	addi	r2,r2,10556
   11a74:	10000926 	beq	r2,zero,11a9c <__call_exitprocs+0xd0>
   11a78:	98800117 	ldw	r2,4(r19)
   11a7c:	1000311e 	bne	r2,zero,11b44 <__call_exitprocs+0x178>
   11a80:	98800017 	ldw	r2,0(r19)
   11a84:	10003426 	beq	r2,zero,11b58 <__call_exitprocs+0x18c>
   11a88:	9809883a 	mov	r4,r19
   11a8c:	a8800015 	stw	r2,0(r21)
   11a90:	000293c0 	call	293c <free>
   11a94:	acc00017 	ldw	r19,0(r21)
   11a98:	983fe41e 	bne	r19,zero,11a2c <__alt_data_end+0xfffbc2fc>
   11a9c:	dfc00b17 	ldw	ra,44(sp)
   11aa0:	df000a17 	ldw	fp,40(sp)
   11aa4:	ddc00917 	ldw	r23,36(sp)
   11aa8:	dd800817 	ldw	r22,32(sp)
   11aac:	dd400717 	ldw	r21,28(sp)
   11ab0:	dd000617 	ldw	r20,24(sp)
   11ab4:	dcc00517 	ldw	r19,20(sp)
   11ab8:	dc800417 	ldw	r18,16(sp)
   11abc:	dc400317 	ldw	r17,12(sp)
   11ac0:	dc000217 	ldw	r16,8(sp)
   11ac4:	dec00c04 	addi	sp,sp,48
   11ac8:	f800283a 	ret
   11acc:	98800117 	ldw	r2,4(r19)
   11ad0:	80c00017 	ldw	r3,0(r16)
   11ad4:	10bfffc4 	addi	r2,r2,-1
   11ad8:	17001526 	beq	r2,fp,11b30 <__call_exitprocs+0x164>
   11adc:	80000015 	stw	zero,0(r16)
   11ae0:	183fde26 	beq	r3,zero,11a5c <__alt_data_end+0xfffbc32c>
   11ae4:	00800044 	movi	r2,1
   11ae8:	1708983a 	sll	r4,r2,fp
   11aec:	98806217 	ldw	r2,392(r19)
   11af0:	9dc00117 	ldw	r23,4(r19)
   11af4:	2084703a 	and	r2,r4,r2
   11af8:	1000061e 	bne	r2,zero,11b14 <__call_exitprocs+0x148>
   11afc:	183ee83a 	callr	r3
   11b00:	98800117 	ldw	r2,4(r19)
   11b04:	15ffc51e 	bne	r2,r23,11a1c <__alt_data_end+0xfffbc2ec>
   11b08:	a8800017 	ldw	r2,0(r21)
   11b0c:	14ffd326 	beq	r2,r19,11a5c <__alt_data_end+0xfffbc32c>
   11b10:	003fc206 	br	11a1c <__alt_data_end+0xfffbc2ec>
   11b14:	98806317 	ldw	r2,396(r19)
   11b18:	2084703a 	and	r2,r4,r2
   11b1c:	1000061e 	bne	r2,zero,11b38 <__call_exitprocs+0x16c>
   11b20:	89400017 	ldw	r5,0(r17)
   11b24:	9009883a 	mov	r4,r18
   11b28:	183ee83a 	callr	r3
   11b2c:	003ff406 	br	11b00 <__alt_data_end+0xfffbc3d0>
   11b30:	9f000115 	stw	fp,4(r19)
   11b34:	003fea06 	br	11ae0 <__alt_data_end+0xfffbc3b0>
   11b38:	89000017 	ldw	r4,0(r17)
   11b3c:	183ee83a 	callr	r3
   11b40:	003fef06 	br	11b00 <__alt_data_end+0xfffbc3d0>
   11b44:	98800017 	ldw	r2,0(r19)
   11b48:	982b883a 	mov	r21,r19
   11b4c:	1027883a 	mov	r19,r2
   11b50:	983fb61e 	bne	r19,zero,11a2c <__alt_data_end+0xfffbc2fc>
   11b54:	003fd106 	br	11a9c <__alt_data_end+0xfffbc36c>
   11b58:	0005883a 	mov	r2,zero
   11b5c:	003ffa06 	br	11b48 <__alt_data_end+0xfffbc418>

00011b60 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   11b60:	defffd04 	addi	sp,sp,-12
   11b64:	df000215 	stw	fp,8(sp)
   11b68:	df000204 	addi	fp,sp,8
   11b6c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   11b70:	0001883a 	nop
   11b74:	e0bfff17 	ldw	r2,-4(fp)
   11b78:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   11b7c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   11b80:	10000226 	beq	r2,zero,11b8c <_exit+0x2c>
    ALT_SIM_FAIL();
   11b84:	002af070 	cmpltui	zero,zero,43969
   11b88:	00000106 	br	11b90 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   11b8c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   11b90:	003fff06 	br	11b90 <__alt_data_end+0xfffbc460>
