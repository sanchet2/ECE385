
Final_Project_Code.elf:     file format elf32-littlenios2
Final_Project_Code.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0000022c

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00012ce4 memsz 0x00012ce4 flags r-x
    LOAD off    0x00013d04 vaddr 0x00012d04 paddr 0x00014858 align 2**12
         filesz 0x00001b54 memsz 0x00001b54 flags rw-
    LOAD off    0x000163ac vaddr 0x000163ac paddr 0x000163ac align 2**12
         filesz 0x00000000 memsz 0x0000017c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000020c  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00012094  0000022c  0000022c  0000122c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000a44  000122c0  000122c0  000132c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b54  00012d04  00014858  00013d04  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000017c  000163ac  000163ac  000163ac  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00016528  00016528  00015858  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00015858  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000dd0  00000000  00000000  00015880  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00025239  00000000  00000000  00016650  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000096b5  00000000  00000000  0003b889  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000b84c  00000000  00000000  00044f3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000026c0  00000000  00000000  0005078c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003a09  00000000  00000000  00052e4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00016f01  00000000  00000000  00056855  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  0006d758  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000013c0  00000000  00000000  0006d798  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000722d6  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  000722d9  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000722e5  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000722e6  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000722e7  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000722eb  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000722ef  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  000722f3  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  000722fe  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  00072309  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  00072314  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000003b  00000000  00000000  0007231f  2**0
                  CONTENTS, READONLY
 29 .jdi          000056ce  00000000  00000000  0007235a  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00083150  00000000  00000000  00077a28  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
0000022c l    d  .text	00000000 .text
000122c0 l    d  .rodata	00000000 .rodata
00012d04 l    d  .rwdata	00000000 .rwdata
000163ac l    d  .bss	00000000 .bss
00016528 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Final_Project_Code_bsp//obj/HAL/src/crt0.o
00000264 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 io_handler.c
00000000 l    df *ABS*	00000000 keyboard_functions.c
000163ac l     O .bss	00000002 ctl_reg
000163ae l     O .bss	00000002 no_device
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 play_game.c
00000000 l    df *ABS*	00000000 usb.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00002ecc l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00012a4a l     O .rodata	00000010 zeroes.4181
00012a5a l     O .rodata	00000010 blanks.4180
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00005cb4 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0000785c l     F .text	00000008 __fp_lock
00007864 l     F .text	00000008 __fp_unlock
00007878 l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00013174 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
000135b8 l     O .rwdata	00000020 lc_ctype_charset
00013598 l     O .rwdata	00000020 lc_message_charset
000135d8 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00012a8c l     O .rodata	0000000c p05.2678
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0000a5ac l     F .text	000000fc __sprint_r.part.0
00012bc0 l     O .rodata	00000010 blanks.4125
00012bb0 l     O .rodata	00000010 zeroes.4126
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0000f9e0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000fb08 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000fb34 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000fc3c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000fd38 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000fe1c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00010000 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00014848 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
000102b4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00010404 l     F .text	00000038 alt_dev_reg
000137b8 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
000106e0 l     F .text	00000204 altera_avalon_jtag_uart_irq
000108e4 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000111b8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00011650 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
000117a8 l     F .text	00000050 alt_get_errno
000117f8 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
000163fc g     O .bss	00000004 alt_instruction_exception_handler
00009c40 g     F .text	00000074 _mprec_log10
00009d2c g     F .text	0000008c __any_on
0000bfd8 g     F .text	00000054 _isatty_r
00012a98 g     O .rodata	00000028 __mprec_tinytens
0000ff48 g     F .text	00000078 alt_main
00003830 g     F .text	000000b8 _puts_r
00016428 g     O .bss	00000100 alt_irq
0000c02c g     F .text	0000005c _lseek_r
00014858 g       *ABS*	00000000 __flash_rwdata_start
0000e400 g     F .text	00000084 .hidden __eqdf2
00016528 g       *ABS*	00000000 __alt_heap_start
000037f4 g     F .text	0000003c printf
0000c254 g     F .text	0000009c _wcrtomb_r
000163bc g     O .bss	00000002 usb_ctl_val
0000a4a4 g     F .text	0000005c __sseek
00007bc0 g     F .text	00000010 __sinit
000163b4 g     O .bss	00000004 keycode
0000c0e4 g     F .text	00000154 __swbuf_r
00008638 g     F .text	0000007c _setlocale_r
00001440 g     F .text	00000068 render_shadow_enemy
00007a18 g     F .text	00000078 __sfmoreglue
0000ffe0 g     F .text	00000020 __malloc_unlock
00002dd0 g     F .text	00000080 UsbGetRetryCnt
00008af0 g     F .text	0000015c memmove
00000268 g     F .text	00000060 IO_init
00007ba8 g     F .text	00000018 _cleanup
00008d70 g     F .text	000000a8 _Balloc
0000e484 g     F .text	000000e0 .hidden __gtdf2
00011be8 g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
0000bf80 g     F .text	00000058 _fstat_r
000163d4 g     O .bss	00000004 errno
0000a420 g     F .text	00000008 __seofread
00000394 g     F .text	0000030c get_keycode
000163e8 g     O .bss	00000004 alt_argv
0001c818 g       *ABS*	00000000 _gp
00010284 g     F .text	00000030 usleep
00013638 g     O .rwdata	00000180 alt_fd_list
00011c08 g     F .text	00000090 alt_find_dev
000089b8 g     F .text	00000138 memcpy
00001724 g     F .text	0000008c render_shadow
0000786c g     F .text	0000000c _cleanup_r
0000f808 g     F .text	000000d0 .hidden __floatsidf
00011730 g     F .text	00000078 alt_io_redirect
000163be g     O .bss	00000001 data_size
0000e564 g     F .text	000000e0 .hidden __ltdf2
000122c0 g       *ABS*	00000000 __DTOR_END__
000038e8 g     F .text	00000014 puts
00011e80 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00001500 g     F .text	00000068 render_enemy
0000a358 g     F .text	00000074 __fpclassifyd
00009b9c g     F .text	000000a4 __ratio
0000bae4 g     F .text	00000024 __vfiprintf_internal
00010ae0 g     F .text	0000020c altera_avalon_jtag_uart_read
00002ff8 g     F .text	00000014 malloc
000037c8 g     F .text	0000002c _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00002fe8 g     F .text	00000008 .hidden __udivsi3
0000fc8c g     F .text	000000ac isatty
00012ae8 g     O .rodata	000000c8 __mprec_tens
000086b4 g     F .text	0000000c __locale_charset
000014a8 g     F .text	00000058 render_enemies
000163d0 g     O .bss	00000004 __malloc_top_pad
00002470 g     F .text	00000264 UsbGetConfigDesc2
00014828 g     O .rwdata	00000004 __mb_cur_max
000086e4 g     F .text	0000000c _localeconv_r
00012d04 g     O .rwdata	00000068 sizes
00009198 g     F .text	0000003c __i2b
00008024 g     F .text	000004a4 __sfvwrite_r
000163c0 g     O .bss	00000002 intStat
00003978 g     F .text	00000054 _sbrk_r
0000c088 g     F .text	0000005c _read_r
00014840 g     O .rwdata	00000004 alt_max_fd
0000bc90 g     F .text	00000100 _fclose_r
0000782c g     F .text	00000030 fflush
000163cc g     O .bss	00000004 __malloc_max_sbrked_mem
00001684 g     F .text	000000a0 render_shadows
00001c6c g     F .text	0000011c move_enemy
0000d1e4 g     F .text	0000089c .hidden __adddf3
00009944 g     F .text	0000011c __b2d
0000cba0 g     F .text	0000061c .hidden __umoddi3
0000fe6c g     F .text	000000dc lseek
00014820 g     O .rwdata	00000004 _global_impure_ptr
00009db8 g     F .text	000005a0 _realloc_r
00016528 g       *ABS*	00000000 __bss_end
00011560 g     F .text	000000f0 alt_iic_isr_register
00011ae4 g     F .text	00000104 alt_tick
0000c560 g     F .text	00000640 .hidden __udivdi3
0000bda4 g     F .text	00000184 _fputwc_r
00012ac0 g     O .rodata	00000028 __mprec_bigtens
00008f7c g     F .text	00000104 __s2b
0000f8d8 g     F .text	000000a4 .hidden __floatunsidf
000096ec g     F .text	00000060 __mcmp
00001ed0 g     F .text	000000fc UsbSetAddress
00007be0 g     F .text	00000018 __fp_lock_all
00011514 g     F .text	0000004c alt_ic_irq_enabled
00011a4c g     F .text	00000098 alt_alarm_stop
000163f0 g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	000000d0 alt_irq_handler
00013610 g     O .rwdata	00000028 alt_dev_null
00001184 g     F .text	000000d8 init_players
0001119c g     F .text	0000001c alt_dcache_flush_all
00009080 g     F .text	00000068 __hi0bits
00000330 g     F .text	00000064 IO_read
0000f780 g     F .text	00000088 .hidden __fixdfsi
00014858 g       *ABS*	00000000 __ram_rwdata_end
00014838 g     O .rwdata	00000008 alt_dev_list
00010304 g     F .text	00000100 write
00012d04 g       *ABS*	00000000 __ram_rodata_end
0000fb84 g     F .text	000000b8 fstat
0000e564 g     F .text	000000e0 .hidden __ledf2
00002e50 g     F .text	0000007c UsbPrintMem
00009464 g     F .text	00000140 __pow5mult
0000a6c0 g     F .text	00001424 ___vfiprintf_internal_r
000163e0 g     O .bss	00000004 __nlocale_changed
00002ff0 g     F .text	00000008 .hidden __umodsi3
00001874 g     F .text	00000058 render_player_check
00016528 g       *ABS*	00000000 end
0001061c g     F .text	000000c4 altera_avalon_jtag_uart_init
000001cc g     F .exceptions	00000060 alt_instruction_exception_entry
000122c0 g       *ABS*	00000000 __CTOR_LIST__
00055730 g       *ABS*	00000000 __alt_stack_pointer
0000f97c g     F .text	00000064 .hidden __clzsi2
00010cec g     F .text	00000218 altera_avalon_jtag_uart_write
00007bd0 g     F .text	00000004 __sfp_lock_acquire
000088d0 g     F .text	000000e8 memchr
00003a64 g     F .text	000020fc ___vfprintf_internal_r
000027d0 g     F .text	000000fc UsbClassRequest
00007d34 g     F .text	000002f0 _free_r
000086c0 g     F .text	00000010 __locale_mb_cur_max
000120f8 g     F .text	00000194 __call_exitprocs
000163dc g     O .bss	00000004 __mlocale_changed
00014818 g     O .rwdata	00000004 __malloc_sbrk_base
0000022c g     F .text	0000003c _start
000163f4 g     O .bss	00000004 _alt_tick_rate
00003914 g     F .text	00000064 rand
000095a4 g     F .text	00000148 __lshift
000163f8 g     O .bss	00000004 _alt_nticks
00010050 g     F .text	00000104 read
00010470 g     F .text	00000048 alt_sys_init
00011fe4 g     F .text	00000114 __register_exitproc
000091d4 g     F .text	00000290 __multiply
0001098c g     F .text	00000068 altera_avalon_jtag_uart_close
00001568 g     F .text	0000011c renderer
0000d1bc g     F .text	00000028 .hidden __mulsi3
00012d04 g       *ABS*	00000000 __ram_rwdata_start
000122c0 g       *ABS*	00000000 __ram_rodata_start
00016400 g     O .bss	00000028 __malloc_current_mallinfo
000006a0 g     F .text	00000a0c setup_keyboard
00009a60 g     F .text	0000013c __d2b
00001fcc g     F .text	00000144 UsbGetDeviceDesc1
000104b8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00011dac g     F .text	000000d4 alt_get_fd
00011044 g     F .text	00000158 alt_busy_sleep
0000bb64 g     F .text	00000054 _close_r
00001b50 g     F .text	0000011c move_player
00011f68 g     F .text	0000007c memcmp
00010578 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00016528 g       *ABS*	00000000 __alt_stack_base
000105c8 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00005b84 g     F .text	00000130 __swsetup_r
0000da80 g     F .text	00000980 .hidden __divdf3
00007a90 g     F .text	00000118 __sfp
00009cb4 g     F .text	00000078 __copybits
00012d6c g     O .rwdata	00000408 __malloc_av_
00007bdc g     F .text	00000004 __sinit_lock_release
0000e644 g     F .text	0000086c .hidden __muldf3
0000a3cc g     F .text	00000054 __sread
00002d4c g     F .text	00000084 UsbWaitTDListDone
00011c98 g     F .text	00000114 alt_find_file
00011208 g     F .text	000000a4 alt_dev_llist_insert
0000ffc0 g     F .text	00000020 __malloc_lock
000101d4 g     F .text	000000b0 sbrk
00007604 g     F .text	00000228 _fflush_r
0000bbb8 g     F .text	000000d8 _calloc_r
000163c2 g     O .bss	00000001 hot_plug_count
000163ac g       *ABS*	00000000 __bss_start
00008c4c g     F .text	00000124 memset
000010ac g     F .text	000000d8 main
000163ec g     O .bss	00000004 alt_envp
000163c8 g     O .bss	00000004 __malloc_max_total_mem
00010518 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
000026d4 g     F .text	000000fc UsbSetConfig
0000c238 g     F .text	0000001c __swbuf
000038fc g     F .text	00000018 srand
0000a500 g     F .text	00000008 __sclose
00055730 g       *ABS*	00000000 __alt_heap_limit
0000bd90 g     F .text	00000014 fclose
00005edc g     F .text	00001728 _dtoa_r
00003020 g     F .text	000007a8 _malloc_r
0000c3c8 g     F .text	00000030 __ascii_wctomb
00014844 g     O .rwdata	00000004 alt_errno
000084c8 g     F .text	000000b8 _fwalk
00002f38 g     F .text	00000054 .hidden __divsi3
00007c10 g     F .text	00000124 _malloc_trim_r
000028cc g     F .text	00000144 UsbGetHidDesc
000122c0 g       *ABS*	00000000 __CTOR_END__
0000a508 g     F .text	000000a4 strcmp
000122c0 g       *ABS*	00000000 __flash_rodata_start
000122c0 g       *ABS*	00000000 __DTOR_LIST__
0000e400 g     F .text	00000084 .hidden __nedf2
00001ddc g     F .text	00000044 UsbRead
00001ac0 g     F .text	00000074 parse_keycode
0001043c g     F .text	00000034 alt_irq_init
00010154 g     F .text	00000080 alt_release_fd
00012bd0 g     O .rodata	00000100 .hidden __clz_tab
000163d8 g     O .bss	00000004 _PathLocale
00011f1c g     F .text	00000014 atexit
0000bb08 g     F .text	0000005c _write_r
000086f0 g     F .text	0000001c setlocale
00014824 g     O .rwdata	00000004 _impure_ptr
000163e4 g     O .bss	00000004 alt_argc
00011308 g     F .text	0000005c _do_dtors
000086dc g     F .text	00000008 __locale_cjk_lang
00001b34 g     F .text	0000001c check_projectiles
00000020 g       .exceptions	00000000 alt_irq_entry
000098e4 g     F .text	00000060 __ulp
00007bf8 g     F .text	00000018 __fp_unlock_all
000163b8 g     O .bss	00000001 toggle
000017b0 g     F .text	000000c4 render_players
0000136c g     F .text	000000d4 move_enemies
00014830 g     O .rwdata	00000008 alt_fs_list
00002a10 g     F .text	0000033c UsbGetReportDesc
00000020 g       *ABS*	00000000 __ram_exceptions_start
0000870c g     F .text	0000000c localeconv
00011380 g     F .text	00000050 alt_ic_isr_register
00014858 g       *ABS*	00000000 _edata
00016528 g       *ABS*	00000000 _end
00001d88 g     F .text	00000054 UsbWrite
0000022c g       *ABS*	00000000 __ram_exceptions_end
000109f4 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
000163c4 g     O .bss	00000002 code
00011470 g     F .text	000000a4 alt_ic_irq_disable
0000a428 g     F .text	0000007c __swrite
0001481c g     O .rwdata	00000004 __malloc_trim_threshold
000086d0 g     F .text	0000000c __locale_msgcharset
000163b0 g     O .bss	00000002 fs_device
00011f30 g     F .text	00000038 exit
00008580 g     F .text	000000b8 _fwalk_reent
0000974c g     F .text	00000198 __mdiff
00002f8c g     F .text	0000005c .hidden __modsi3
00055730 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00007bd4 g     F .text	00000004 __sfp_lock_release
000002c8 g     F .text	00000068 IO_write
0001228c g     F .text	00000034 _exit
00010f04 g     F .text	00000140 alt_alarm_start
0000c454 g     F .text	0000010c .hidden __muldi3
00008718 g     F .text	000001b8 __smakebuf_r
000039cc g     F .text	00000098 strlen
000118ec g     F .text	00000160 open
0000e484 g     F .text	000000e0 .hidden __gedf2
0001482c g     O .rwdata	00000004 __wctomb
0000a6a8 g     F .text	00000018 __sprint_r
00011364 g     F .text	0000001c alt_icache_flush_all
0000125c g     F .text	00000110 make_enemies
0001484c g     O .rwdata	00000004 alt_priority_mask
000113d0 g     F .text	000000a0 alt_ic_irq_enable
00005b60 g     F .text	00000024 __vfprintf_internal
0000c3f8 g     F .text	0000005c _wctomb_r
0000eeb0 g     F .text	000008d0 .hidden __subdf3
000018cc g     F .text	000001f4 keycode_effect
000090e8 g     F .text	000000b0 __lo0bits
000022e4 g     F .text	0000018c UsbGetConfigDesc1
00014850 g     O .rwdata	00000008 alt_alarm_list
000112ac g     F .text	0000005c _do_ctors
00001e20 g     F .text	000000b0 UsbSoftReset
0000c2f0 g     F .text	000000d8 wcrtomb
0000fa30 g     F .text	000000d8 close
00002110 g     F .text	000001d4 UsbGetDeviceDesc2
0000fd9c g     F .text	00000080 alt_load
0000bf28 g     F .text	00000058 fputwc
0000300c g     F .text	00000014 free
00007bd8 g     F .text	00000004 __sinit_lock_acquire
00008e40 g     F .text	0000013c __multadd
00008e18 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08408b14 	ori	at,at,556
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001cc0 	call	1cc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	00800074 	movhi	r2,1
 140:	10990a04 	addi	r2,r2,25640
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	00800074 	movhi	r2,1
 158:	10990a04 	addi	r2,r2,25640
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <__alt_data_end+0xfffaa9fc>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <__alt_data_end+0xfffaa9f0>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0001883a 	nop
}
 1b8:	e037883a 	mov	sp,fp
 1bc:	dfc00117 	ldw	ra,4(sp)
 1c0:	df000017 	ldw	fp,0(sp)
 1c4:	dec00204 	addi	sp,sp,8
 1c8:	f800283a 	ret

000001cc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1cc:	defffb04 	addi	sp,sp,-20
 1d0:	dfc00415 	stw	ra,16(sp)
 1d4:	df000315 	stw	fp,12(sp)
 1d8:	df000304 	addi	fp,sp,12
 1dc:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 1e0:	00bfffc4 	movi	r2,-1
 1e4:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 1e8:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1ec:	d0a6f917 	ldw	r2,-25628(gp)
 1f0:	10000726 	beq	r2,zero,210 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 1f4:	d0a6f917 	ldw	r2,-25628(gp)
 1f8:	e0fffd17 	ldw	r3,-12(fp)
 1fc:	1809883a 	mov	r4,r3
 200:	e17fff17 	ldw	r5,-4(fp)
 204:	e1bffe17 	ldw	r6,-8(fp)
 208:	103ee83a 	callr	r2
 20c:	00000206 	br	218 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 210:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 214:	0005883a 	mov	r2,zero
}
 218:	e037883a 	mov	sp,fp
 21c:	dfc00117 	ldw	ra,4(sp)
 220:	df000017 	ldw	fp,0(sp)
 224:	dec00204 	addi	sp,sp,8
 228:	f800283a 	ret

Disassembly of section .text:

0000022c <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     22c:	06c00174 	movhi	sp,5
    ori sp, sp, %lo(__alt_stack_pointer)
     230:	ded5cc14 	ori	sp,sp,22320
    movhi gp, %hi(_gp)
     234:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     238:	d6b20614 	ori	gp,gp,51224
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     23c:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     240:	1098eb14 	ori	r2,r2,25516

    movhi r3, %hi(__bss_end)
     244:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     248:	18d94a14 	ori	r3,r3,25896

    beq r2, r3, 1f
     24c:	10c00326 	beq	r2,r3,25c <_start+0x30>

0:
    stw zero, (r2)
     250:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     254:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     258:	10fffd36 	bltu	r2,r3,250 <__alt_data_end+0xfffaab20>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     25c:	000fd9c0 	call	fd9c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     260:	000ff480 	call	ff48 <alt_main>

00000264 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     264:	003fff06 	br	264 <__alt_data_end+0xfffaab34>

00000268 <IO_init>:
#define otg_hpi_cs			(volatile char*)	OTG_HPI_CS_BASE //FOR SOME REASON CS BASE BEHAVES WEIRDLY MIGHT HAVE TO SET MANUALLY
#define otg_hpi_w			(volatile char*)	OTG_HPI_W_BASE


void IO_init(void)
{
     268:	deffff04 	addi	sp,sp,-4
     26c:	df000015 	stw	fp,0(sp)
     270:	d839883a 	mov	fp,sp
	*otg_hpi_cs = 0;
     274:	00800234 	movhi	r2,8
     278:	10841404 	addi	r2,r2,4176
     27c:	10000005 	stb	zero,0(r2)
	*otg_hpi_r = 1;
     280:	00800234 	movhi	r2,8
     284:	10840804 	addi	r2,r2,4128
     288:	00c00044 	movi	r3,1
     28c:	10c00005 	stb	r3,0(r2)
	*otg_hpi_w = 1;
     290:	00800234 	movhi	r2,8
     294:	10840404 	addi	r2,r2,4112
     298:	00c00044 	movi	r3,1
     29c:	10c00005 	stb	r3,0(r2)
	*otg_hpi_address = 0;
     2a0:	00800234 	movhi	r2,8
     2a4:	10841004 	addi	r2,r2,4160
     2a8:	10000015 	stw	zero,0(r2)
	*otg_hpi_data = 0;
     2ac:	00800234 	movhi	r2,8
     2b0:	10840c04 	addi	r2,r2,4144
     2b4:	10000015 	stw	zero,0(r2)
}
     2b8:	e037883a 	mov	sp,fp
     2bc:	df000017 	ldw	fp,0(sp)
     2c0:	dec00104 	addi	sp,sp,4
     2c4:	f800283a 	ret

000002c8 <IO_write>:

void IO_write(alt_u8 Address, alt_u16 Data)
{
     2c8:	defffd04 	addi	sp,sp,-12
     2cc:	df000215 	stw	fp,8(sp)
     2d0:	df000204 	addi	fp,sp,8
     2d4:	2007883a 	mov	r3,r4
     2d8:	2805883a 	mov	r2,r5
     2dc:	e0fffe05 	stb	r3,-8(fp)
     2e0:	e0bfff0d 	sth	r2,-4(fp)
	*otg_hpi_address = Address;
     2e4:	00800234 	movhi	r2,8
     2e8:	10841004 	addi	r2,r2,4160
     2ec:	e0fffe03 	ldbu	r3,-8(fp)
     2f0:	10c00015 	stw	r3,0(r2)
	*otg_hpi_data = Data;
     2f4:	00800234 	movhi	r2,8
     2f8:	10840c04 	addi	r2,r2,4144
     2fc:	e0ffff0b 	ldhu	r3,-4(fp)
     300:	10c00015 	stw	r3,0(r2)
	*otg_hpi_w = 0;
     304:	00800234 	movhi	r2,8
     308:	10840404 	addi	r2,r2,4112
     30c:	10000005 	stb	zero,0(r2)
	*otg_hpi_w = 1;
     310:	00800234 	movhi	r2,8
     314:	10840404 	addi	r2,r2,4112
     318:	00c00044 	movi	r3,1
     31c:	10c00005 	stb	r3,0(r2)
}
     320:	e037883a 	mov	sp,fp
     324:	df000017 	ldw	fp,0(sp)
     328:	dec00104 	addi	sp,sp,4
     32c:	f800283a 	ret

00000330 <IO_read>:

alt_u16 IO_read(alt_u8 Address)
{
     330:	defffd04 	addi	sp,sp,-12
     334:	df000215 	stw	fp,8(sp)
     338:	df000204 	addi	fp,sp,8
     33c:	2005883a 	mov	r2,r4
     340:	e0bfff05 	stb	r2,-4(fp)
	alt_u16 temp;
	*otg_hpi_address = Address;
     344:	00800234 	movhi	r2,8
     348:	10841004 	addi	r2,r2,4160
     34c:	e0ffff03 	ldbu	r3,-4(fp)
     350:	10c00015 	stw	r3,0(r2)
	*otg_hpi_r = 0;
     354:	00800234 	movhi	r2,8
     358:	10840804 	addi	r2,r2,4128
     35c:	10000005 	stb	zero,0(r2)
	temp = *otg_hpi_data;
     360:	00800234 	movhi	r2,8
     364:	10840c04 	addi	r2,r2,4144
     368:	10800017 	ldw	r2,0(r2)
     36c:	e0bffe0d 	sth	r2,-8(fp)
	*otg_hpi_r = 1;
     370:	00800234 	movhi	r2,8
     374:	10840804 	addi	r2,r2,4128
     378:	00c00044 	movi	r3,1
     37c:	10c00005 	stb	r3,0(r2)

	return temp;
     380:	e0bffe0b 	ldhu	r2,-8(fp)
}
     384:	e037883a 	mov	sp,fp
     388:	df000017 	ldw	fp,0(sp)
     38c:	dec00104 	addi	sp,sp,4
     390:	f800283a 	ret

00000394 <get_keycode>:
alt_u16 code;




int get_keycode(unsigned int *keycode1,unsigned int *keycode2){
     394:	defffc04 	addi	sp,sp,-16
     398:	dfc00315 	stw	ra,12(sp)
     39c:	df000215 	stw	fp,8(sp)
     3a0:	df000204 	addi	fp,sp,8
     3a4:	e13ffe15 	stw	r4,-8(fp)
     3a8:	e17fff15 	stw	r5,-4(fp)
				toggle++;
     3ac:	d0a6e803 	ldbu	r2,-25696(gp)
     3b0:	10800044 	addi	r2,r2,1
     3b4:	d0a6e805 	stb	r2,-25696(gp)
				IO_write(HPI_ADDR,0x0500); //the start address
     3b8:	01000084 	movi	r4,2
     3bc:	01414004 	movi	r5,1280
     3c0:	00002c80 	call	2c8 <IO_write>
				//data phase IN-1
				IO_write(HPI_DATA,0x051c); //500
     3c4:	0009883a 	mov	r4,zero
     3c8:	01414704 	movi	r5,1308
     3cc:	00002c80 	call	2c8 <IO_write>

				IO_write(HPI_DATA,0x000f & data_size);//2 data length
     3d0:	d0a6e983 	ldbu	r2,-25690(gp)
     3d4:	10803fcc 	andi	r2,r2,255
     3d8:	108003cc 	andi	r2,r2,15
     3dc:	0009883a 	mov	r4,zero
     3e0:	100b883a 	mov	r5,r2
     3e4:	00002c80 	call	2c8 <IO_write>

				IO_write(HPI_DATA,0x0291);//4 //endpoint 1
     3e8:	0009883a 	mov	r4,zero
     3ec:	0140a444 	movi	r5,657
     3f0:	00002c80 	call	2c8 <IO_write>
				if(toggle%2)
     3f4:	d0a6e803 	ldbu	r2,-25696(gp)
     3f8:	1080004c 	andi	r2,r2,1
     3fc:	10803fcc 	andi	r2,r2,255
     400:	10000426 	beq	r2,zero,414 <get_keycode+0x80>
				{
					IO_write(HPI_DATA,0x0001);//6 //data 1
     404:	0009883a 	mov	r4,zero
     408:	01400044 	movi	r5,1
     40c:	00002c80 	call	2c8 <IO_write>
     410:	00000306 	br	420 <get_keycode+0x8c>
				}
				else
				{
					IO_write(HPI_DATA,0x0041);//6 //data 1
     414:	0009883a 	mov	r4,zero
     418:	01401044 	movi	r5,65
     41c:	00002c80 	call	2c8 <IO_write>
				}
				IO_write(HPI_DATA,0x0013);//8
     420:	0009883a 	mov	r4,zero
     424:	014004c4 	movi	r5,19
     428:	00002c80 	call	2c8 <IO_write>
				IO_write(HPI_DATA,0x0000);//a
     42c:	0009883a 	mov	r4,zero
     430:	000b883a 	mov	r5,zero
     434:	00002c80 	call	2c8 <IO_write>
				UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
     438:	01006c04 	movi	r4,432
     43c:	01414004 	movi	r5,1280
     440:	0001d880 	call	1d88 <UsbWrite>

				while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     444:	00002506 	br	4dc <get_keycode+0x148>
				{
					IO_write(HPI_ADDR,0x0500); //the start address
     448:	01000084 	movi	r4,2
     44c:	01414004 	movi	r5,1280
     450:	00002c80 	call	2c8 <IO_write>
					//data phase IN-1
					IO_write(HPI_DATA,0x051c); //500
     454:	0009883a 	mov	r4,zero
     458:	01414704 	movi	r5,1308
     45c:	00002c80 	call	2c8 <IO_write>

					IO_write(HPI_DATA,0x000f & data_size);//2 data length
     460:	d0a6e983 	ldbu	r2,-25690(gp)
     464:	10803fcc 	andi	r2,r2,255
     468:	108003cc 	andi	r2,r2,15
     46c:	0009883a 	mov	r4,zero
     470:	100b883a 	mov	r5,r2
     474:	00002c80 	call	2c8 <IO_write>

					IO_write(HPI_DATA,0x0291);//4 //endpoint 1
     478:	0009883a 	mov	r4,zero
     47c:	0140a444 	movi	r5,657
     480:	00002c80 	call	2c8 <IO_write>
					if(toggle%2)
     484:	d0a6e803 	ldbu	r2,-25696(gp)
     488:	1080004c 	andi	r2,r2,1
     48c:	10803fcc 	andi	r2,r2,255
     490:	10000426 	beq	r2,zero,4a4 <get_keycode+0x110>
					{
						IO_write(HPI_DATA,0x0001);//6 //data 1
     494:	0009883a 	mov	r4,zero
     498:	01400044 	movi	r5,1
     49c:	00002c80 	call	2c8 <IO_write>
     4a0:	00000306 	br	4b0 <get_keycode+0x11c>
					}
					else
					{
						IO_write(HPI_DATA,0x0041);//6 //data 1
     4a4:	0009883a 	mov	r4,zero
     4a8:	01401044 	movi	r5,65
     4ac:	00002c80 	call	2c8 <IO_write>
					}
					IO_write(HPI_DATA,0x0013);//8
     4b0:	0009883a 	mov	r4,zero
     4b4:	014004c4 	movi	r5,19
     4b8:	00002c80 	call	2c8 <IO_write>
					IO_write(HPI_DATA,0x0000);//
     4bc:	0009883a 	mov	r4,zero
     4c0:	000b883a 	mov	r5,zero
     4c4:	00002c80 	call	2c8 <IO_write>
					UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
     4c8:	01006c04 	movi	r4,432
     4cc:	01414004 	movi	r5,1280
     4d0:	0001d880 	call	1d88 <UsbWrite>
					usleep(10*1000);
     4d4:	0109c404 	movi	r4,10000
     4d8:	00102840 	call	10284 <usleep>
				}
				IO_write(HPI_DATA,0x0013);//8
				IO_write(HPI_DATA,0x0000);//a
				UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr

				while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     4dc:	010000c4 	movi	r4,3
     4e0:	00003300 	call	330 <IO_read>
     4e4:	10bfffcc 	andi	r2,r2,65535
     4e8:	1080040c 	andi	r2,r2,16
     4ec:	103fd626 	beq	r2,zero,448 <__alt_data_end+0xfffaad18>
					usleep(10*1000);
				}//end while



				usb_ctl_val = UsbWaitTDListDone();
     4f0:	0002d4c0 	call	2d4c <UsbWaitTDListDone>
     4f4:	d0a6e90d 	sth	r2,-25692(gp)

				// packet starts from 0x051c, reading third byte
				// TASK: Write the address to read from the memory for byte 3 of the report descriptor to HPI_ADDR.
				IO_write(HPI_ADDR,0x051e); //the start address
     4f8:	01000084 	movi	r4,2
     4fc:	01414784 	movi	r5,1310
     500:	00002c80 	call	2c8 <IO_write>
				*keycode1 = IO_read(HPI_DATA);
     504:	0009883a 	mov	r4,zero
     508:	00003300 	call	330 <IO_read>
     50c:	10ffffcc 	andi	r3,r2,65535
     510:	e0bffe17 	ldw	r2,-8(fp)
     514:	10c00015 	stw	r3,0(r2)
				keycode=*keycode1;
     518:	e0bffe17 	ldw	r2,-8(fp)
     51c:	10800017 	ldw	r2,0(r2)
     520:	d0a6e715 	stw	r2,-25700(gp)


				*keycode2 = IO_read(HPI_DATA);
     524:	0009883a 	mov	r4,zero
     528:	00003300 	call	330 <IO_read>
     52c:	10ffffcc 	andi	r3,r2,65535
     530:	e0bfff17 	ldw	r2,-4(fp)
     534:	10c00015 	stw	r3,0(r2)


				IOWR(KEYCODE_BASE, 0, keycode & 0xff);
     538:	d0a6e717 	ldw	r2,-25700(gp)
     53c:	10c03fcc 	andi	r3,r2,255
     540:	00800234 	movhi	r2,8
     544:	10841804 	addi	r2,r2,4192
     548:	10c00035 	stwio	r3,0(r2)



				usb_ctl_val = UsbRead(ctl_reg);
     54c:	d0a6e50b 	ldhu	r2,-25708(gp)
     550:	10bfffcc 	andi	r2,r2,65535
     554:	1009883a 	mov	r4,r2
     558:	0001ddc0 	call	1ddc <UsbRead>
     55c:	d0a6e90d 	sth	r2,-25692(gp)

				if(!(usb_ctl_val & no_device))
     560:	d0e6e90b 	ldhu	r3,-25692(gp)
     564:	d0a6e58b 	ldhu	r2,-25706(gp)
     568:	1884703a 	and	r2,r3,r2
     56c:	10bfffcc 	andi	r2,r2,65535
     570:	1000211e 	bne	r2,zero,5f8 <get_keycode+0x264>
				{
					//USB hot plug routine
					for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
     574:	d026ea85 	stb	zero,-25686(gp)
     578:	00001006 	br	5bc <get_keycode+0x228>
					{
						usleep(5*1000);
     57c:	0104e204 	movi	r4,5000
     580:	00102840 	call	10284 <usleep>
						usb_ctl_val = UsbRead(ctl_reg);
     584:	d0a6e50b 	ldhu	r2,-25708(gp)
     588:	10bfffcc 	andi	r2,r2,65535
     58c:	1009883a 	mov	r4,r2
     590:	0001ddc0 	call	1ddc <UsbRead>
     594:	d0a6e90d 	sth	r2,-25692(gp)
						if(usb_ctl_val & no_device) break;
     598:	d0e6e90b 	ldhu	r3,-25692(gp)
     59c:	d0a6e58b 	ldhu	r2,-25706(gp)
     5a0:	1884703a 	and	r2,r3,r2
     5a4:	10bfffcc 	andi	r2,r2,65535
     5a8:	10000126 	beq	r2,zero,5b0 <get_keycode+0x21c>
     5ac:	00000706 	br	5cc <get_keycode+0x238>
				usb_ctl_val = UsbRead(ctl_reg);

				if(!(usb_ctl_val & no_device))
				{
					//USB hot plug routine
					for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
     5b0:	d0a6ea83 	ldbu	r2,-25686(gp)
     5b4:	10800044 	addi	r2,r2,1
     5b8:	d0a6ea85 	stb	r2,-25686(gp)
     5bc:	d0a6ea83 	ldbu	r2,-25686(gp)
     5c0:	10803fcc 	andi	r2,r2,255
     5c4:	108001f0 	cmpltui	r2,r2,7
     5c8:	103fec1e 	bne	r2,zero,57c <__alt_data_end+0xfffaae4c>
					{
						usleep(5*1000);
						usb_ctl_val = UsbRead(ctl_reg);
						if(usb_ctl_val & no_device) break;
					}
					if(!(usb_ctl_val & no_device))
     5cc:	d0e6e90b 	ldhu	r3,-25692(gp)
     5d0:	d0a6e58b 	ldhu	r2,-25706(gp)
     5d4:	1884703a 	and	r2,r3,r2
     5d8:	10bfffcc 	andi	r2,r2,65535
     5dc:	1000061e 	bne	r2,zero,5f8 <get_keycode+0x264>
					{
						printf("\n[INFO]: the keyboard has been removed!!! \n");
     5e0:	01000074 	movhi	r4,1
     5e4:	2108b004 	addi	r4,r4,8896
     5e8:	00038e80 	call	38e8 <puts>
						printf("[INFO]: please insert again!!! \n");
     5ec:	01000074 	movhi	r4,1
     5f0:	2108bb04 	addi	r4,r4,8940
     5f4:	00038e80 	call	38e8 <puts>
					}
				}

				while (!(usb_ctl_val & no_device))
     5f8:	00001e06 	br	674 <get_keycode+0x2e0>
				{

					usb_ctl_val = UsbRead(ctl_reg);
     5fc:	d0a6e50b 	ldhu	r2,-25708(gp)
     600:	10bfffcc 	andi	r2,r2,65535
     604:	1009883a 	mov	r4,r2
     608:	0001ddc0 	call	1ddc <UsbRead>
     60c:	d0a6e90d 	sth	r2,-25692(gp)
					usleep(5*1000);
     610:	0104e204 	movi	r4,5000
     614:	00102840 	call	10284 <usleep>
					usb_ctl_val = UsbRead(ctl_reg);
     618:	d0a6e50b 	ldhu	r2,-25708(gp)
     61c:	10bfffcc 	andi	r2,r2,65535
     620:	1009883a 	mov	r4,r2
     624:	0001ddc0 	call	1ddc <UsbRead>
     628:	d0a6e90d 	sth	r2,-25692(gp)
					usleep(5*1000);
     62c:	0104e204 	movi	r4,5000
     630:	00102840 	call	10284 <usleep>
					usb_ctl_val = UsbRead(ctl_reg);
     634:	d0a6e50b 	ldhu	r2,-25708(gp)
     638:	10bfffcc 	andi	r2,r2,65535
     63c:	1009883a 	mov	r4,r2
     640:	0001ddc0 	call	1ddc <UsbRead>
     644:	d0a6e90d 	sth	r2,-25692(gp)
					usleep(5*1000);
     648:	0104e204 	movi	r4,5000
     64c:	00102840 	call	10284 <usleep>

					if(usb_ctl_val & no_device)
     650:	d0e6e90b 	ldhu	r3,-25692(gp)
     654:	d0a6e58b 	ldhu	r2,-25706(gp)
     658:	1884703a 	and	r2,r3,r2
     65c:	10bfffcc 	andi	r2,r2,65535
     660:	10000226 	beq	r2,zero,66c <get_keycode+0x2d8>
						return -1;
     664:	00bfffc4 	movi	r2,-1
     668:	00000806 	br	68c <get_keycode+0x2f8>

					usleep(200);
     66c:	01003204 	movi	r4,200
     670:	00102840 	call	10284 <usleep>
						printf("\n[INFO]: the keyboard has been removed!!! \n");
						printf("[INFO]: please insert again!!! \n");
					}
				}

				while (!(usb_ctl_val & no_device))
     674:	d0e6e90b 	ldhu	r3,-25692(gp)
     678:	d0a6e58b 	ldhu	r2,-25706(gp)
     67c:	1884703a 	and	r2,r3,r2
     680:	10bfffcc 	andi	r2,r2,65535
     684:	103fdd26 	beq	r2,zero,5fc <__alt_data_end+0xfffaaecc>
					if(usb_ctl_val & no_device)
						return -1;

					usleep(200);
				}
				return 0;
     688:	0005883a 	mov	r2,zero
}
     68c:	e037883a 	mov	sp,fp
     690:	dfc00117 	ldw	ra,4(sp)
     694:	df000017 	ldw	fp,0(sp)
     698:	dec00204 	addi	sp,sp,8
     69c:	f800283a 	ret

000006a0 <setup_keyboard>:


void setup_keyboard()
{
     6a0:	defffe04 	addi	sp,sp,-8
     6a4:	dfc00115 	stw	ra,4(sp)
     6a8:	df000015 	stw	fp,0(sp)
     6ac:	d839883a 	mov	fp,sp
	IO_init();
     6b0:	00002680 	call	268 <IO_init>
		usleep(10*10000);
	}*/



	printf("USB keyboard setup...\n\n");
     6b4:	01000074 	movhi	r4,1
     6b8:	2108c304 	addi	r4,r4,8972
     6bc:	00038e80 	call	38e8 <puts>

	//----------------------------------------SIE1 initial---------------------------------------------------//
	USB_HOT_PLUG:
	UsbSoftReset();
     6c0:	0001e200 	call	1e20 <UsbSoftReset>

	// STEP 1a:
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
     6c4:	01005104 	movi	r4,324
     6c8:	000b883a 	mov	r5,zero
     6cc:	0001d880 	call	1d88 <UsbWrite>
	UsbWrite (HOST1_STAT_REG, 0xFFFF);
     6d0:	01302414 	movui	r4,49296
     6d4:	017fffd4 	movui	r5,65535
     6d8:	0001d880 	call	1d88 <UsbWrite>

	/* Set HUSB_pEOT time */
	UsbWrite(HUSB_pEOT, 600); // adjust the according to your USB device speed
     6dc:	01006d04 	movi	r4,436
     6e0:	01409604 	movi	r5,600
     6e4:	0001d880 	call	1d88 <UsbWrite>

	usb_ctl_val = SOFEOP1_TO_CPU_EN | RESUME1_TO_HPI_EN;// | SOFEOP1_TO_HPI_EN;
     6e8:	00811004 	movi	r2,1088
     6ec:	d0a6e90d 	sth	r2,-25692(gp)
	UsbWrite(HPI_IRQ_ROUTING_REG, usb_ctl_val);
     6f0:	d0a6e90b 	ldhu	r2,-25692(gp)
     6f4:	10bfffcc 	andi	r2,r2,65535
     6f8:	01005084 	movi	r4,322
     6fc:	100b883a 	mov	r5,r2
     700:	0001d880 	call	1d88 <UsbWrite>

	intStat = A_CHG_IRQ_EN | SOF_EOP_IRQ_EN ;
     704:	00808404 	movi	r2,528
     708:	d0a6ea0d 	sth	r2,-25688(gp)
	UsbWrite(HOST1_IRQ_EN_REG, intStat);
     70c:	d0a6ea0b 	ldhu	r2,-25688(gp)
     710:	10bfffcc 	andi	r2,r2,65535
     714:	01302314 	movui	r4,49292
     718:	100b883a 	mov	r5,r2
     71c:	0001d880 	call	1d88 <UsbWrite>
	// STEP 1a end

	// STEP 1b begin
	UsbWrite(COMM_R0,0x0000);//reset time
     720:	01007104 	movi	r4,452
     724:	000b883a 	mov	r5,zero
     728:	0001d880 	call	1d88 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
     72c:	01007184 	movi	r4,454
     730:	000b883a 	mov	r5,zero
     734:	0001d880 	call	1d88 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
     738:	01007204 	movi	r4,456
     73c:	000b883a 	mov	r5,zero
     740:	0001d880 	call	1d88 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
     744:	01007284 	movi	r4,458
     748:	000b883a 	mov	r5,zero
     74c:	0001d880 	call	1d88 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
     750:	01007304 	movi	r4,460
     754:	000b883a 	mov	r5,zero
     758:	0001d880 	call	1d88 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
     75c:	01007384 	movi	r4,462
     760:	000b883a 	mov	r5,zero
     764:	0001d880 	call	1d88 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
     768:	01007404 	movi	r4,464
     76c:	000b883a 	mov	r5,zero
     770:	0001d880 	call	1d88 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
     774:	01007484 	movi	r4,466
     778:	000b883a 	mov	r5,zero
     77c:	0001d880 	call	1d88 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
     780:	01007504 	movi	r4,468
     784:	000b883a 	mov	r5,zero
     788:	0001d880 	call	1d88 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
     78c:	01007584 	movi	r4,470
     790:	000b883a 	mov	r5,zero
     794:	0001d880 	call	1d88 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
     798:	01007604 	movi	r4,472
     79c:	000b883a 	mov	r5,zero
     7a0:	0001d880 	call	1d88 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
     7a4:	01007684 	movi	r4,474
     7a8:	000b883a 	mov	r5,zero
     7ac:	0001d880 	call	1d88 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
     7b0:	01007704 	movi	r4,476
     7b4:	000b883a 	mov	r5,zero
     7b8:	0001d880 	call	1d88 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
     7bc:	01007784 	movi	r4,478
     7c0:	000b883a 	mov	r5,zero
     7c4:	0001d880 	call	1d88 <UsbWrite>
	UsbWrite(COMM_INT_NUM,HUSB_SIE1_INIT_INT); //HUSB_SIE1_INIT_INT
     7c8:	01007084 	movi	r4,450
     7cc:	01401c84 	movi	r5,114
     7d0:	0001d880 	call	1d88 <UsbWrite>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
     7d4:	01000044 	movi	r4,1
     7d8:	01738054 	movui	r5,52737
     7dc:	00002c80 	call	2c8 <IO_write>

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
     7e0:	0001883a 	nop
     7e4:	010000c4 	movi	r4,3
     7e8:	00003300 	call	330 <IO_read>
     7ec:	10bfffcc 	andi	r2,r2,65535
     7f0:	103ffc26 	beq	r2,zero,7e4 <__alt_data_end+0xfffab0b4>
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
     7f4:	0001883a 	nop
     7f8:	01000044 	movi	r4,1
     7fc:	00003300 	call	330 <IO_read>
     800:	10bfffcc 	andi	r2,r2,65535
     804:	1083fb58 	cmpnei	r2,r2,4077
     808:	10000826 	beq	r2,zero,82c <setup_keyboard+0x18c>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
     80c:	01000044 	movi	r4,1
     810:	00003300 	call	330 <IO_read>
     814:	10bfffcc 	andi	r2,r2,65535
     818:	01000074 	movhi	r4,1
     81c:	2108c904 	addi	r4,r4,8996
     820:	100b883a 	mov	r5,r2
     824:	00037f40 	call	37f4 <printf>
		goto USB_HOT_PLUG;
     828:	003fa506 	br	6c0 <__alt_data_end+0xfffaaf90>
	}
	// STEP 1b end

	printf("STEP 1 Complete");
     82c:	01000074 	movhi	r4,1
     830:	2108d204 	addi	r4,r4,9032
     834:	00037f40 	call	37f4 <printf>
	// STEP 2 begin
	UsbWrite(COMM_INT_NUM,HUSB_RESET_INT); //husb reset
     838:	01007084 	movi	r4,450
     83c:	01401d04 	movi	r5,116
     840:	0001d880 	call	1d88 <UsbWrite>
	UsbWrite(COMM_R0,0x003c);//reset time
     844:	01007104 	movi	r4,452
     848:	01400f04 	movi	r5,60
     84c:	0001d880 	call	1d88 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
     850:	01007184 	movi	r4,454
     854:	000b883a 	mov	r5,zero
     858:	0001d880 	call	1d88 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
     85c:	01007204 	movi	r4,456
     860:	000b883a 	mov	r5,zero
     864:	0001d880 	call	1d88 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
     868:	01007284 	movi	r4,458
     86c:	000b883a 	mov	r5,zero
     870:	0001d880 	call	1d88 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
     874:	01007304 	movi	r4,460
     878:	000b883a 	mov	r5,zero
     87c:	0001d880 	call	1d88 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
     880:	01007384 	movi	r4,462
     884:	000b883a 	mov	r5,zero
     888:	0001d880 	call	1d88 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
     88c:	01007404 	movi	r4,464
     890:	000b883a 	mov	r5,zero
     894:	0001d880 	call	1d88 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
     898:	01007484 	movi	r4,466
     89c:	000b883a 	mov	r5,zero
     8a0:	0001d880 	call	1d88 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
     8a4:	01007504 	movi	r4,468
     8a8:	000b883a 	mov	r5,zero
     8ac:	0001d880 	call	1d88 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
     8b0:	01007584 	movi	r4,470
     8b4:	000b883a 	mov	r5,zero
     8b8:	0001d880 	call	1d88 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
     8bc:	01007604 	movi	r4,472
     8c0:	000b883a 	mov	r5,zero
     8c4:	0001d880 	call	1d88 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
     8c8:	01007684 	movi	r4,474
     8cc:	000b883a 	mov	r5,zero
     8d0:	0001d880 	call	1d88 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
     8d4:	01007704 	movi	r4,476
     8d8:	000b883a 	mov	r5,zero
     8dc:	0001d880 	call	1d88 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
     8e0:	01007784 	movi	r4,478
     8e4:	000b883a 	mov	r5,zero
     8e8:	0001d880 	call	1d88 <UsbWrite>

	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
     8ec:	01000044 	movi	r4,1
     8f0:	01738054 	movui	r5,52737
     8f4:	00002c80 	call	2c8 <IO_write>

	while (IO_read(HPI_MAILBOX) != COMM_ACK)
     8f8:	0001883a 	nop
     8fc:	01000044 	movi	r4,1
     900:	00003300 	call	330 <IO_read>
     904:	10bfffcc 	andi	r2,r2,65535
     908:	1083fb58 	cmpnei	r2,r2,4077
     90c:	10000826 	beq	r2,zero,930 <setup_keyboard+0x290>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
     910:	01000044 	movi	r4,1
     914:	00003300 	call	330 <IO_read>
     918:	10bfffcc 	andi	r2,r2,65535
     91c:	01000074 	movhi	r4,1
     920:	2108c904 	addi	r4,r4,8996
     924:	100b883a 	mov	r5,r2
     928:	00037f40 	call	37f4 <printf>
		goto USB_HOT_PLUG;
     92c:	003f6406 	br	6c0 <__alt_data_end+0xfffaaf90>
	}
	// STEP 2 end

	ctl_reg = USB1_CTL_REG;
     930:	00b02284 	movi	r2,-16246
     934:	d0a6e50d 	sth	r2,-25708(gp)
	no_device = (A_DP_STAT | A_DM_STAT);
     938:	008c0004 	movi	r2,12288
     93c:	d0a6e58d 	sth	r2,-25706(gp)
	fs_device = A_DP_STAT;
     940:	00880004 	movi	r2,8192
     944:	d0a6e60d 	sth	r2,-25704(gp)
	usb_ctl_val = UsbRead(ctl_reg);
     948:	d0a6e50b 	ldhu	r2,-25708(gp)
     94c:	10bfffcc 	andi	r2,r2,65535
     950:	1009883a 	mov	r4,r2
     954:	0001ddc0 	call	1ddc <UsbRead>
     958:	d0a6e90d 	sth	r2,-25692(gp)
		}
	}
	else
	{
		 check for low speed or full speed by reading D+ and D- lines */
		if (usb_ctl_val & fs_device)
     95c:	d0e6e90b 	ldhu	r3,-25692(gp)
     960:	d0a6e60b 	ldhu	r2,-25704(gp)
     964:	1884703a 	and	r2,r3,r2
     968:	10bfffcc 	andi	r2,r2,65535
     96c:	10000426 	beq	r2,zero,980 <setup_keyboard+0x2e0>
		{
			printf("[INFO]: full speed device\n");
     970:	01000074 	movhi	r4,1
     974:	2108d604 	addi	r4,r4,9048
     978:	00038e80 	call	38e8 <puts>
     97c:	00000306 	br	98c <setup_keyboard+0x2ec>
		}
		else
		{
			printf("[INFO]: low speed device\n");
     980:	01000074 	movhi	r4,1
     984:	2108dd04 	addi	r4,r4,9076
     988:	00038e80 	call	38e8 <puts>



	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();
     98c:	0001ed00 	call	1ed0 <UsbSetAddress>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     990:	00000306 	br	9a0 <setup_keyboard+0x300>
	{
		UsbSetAddress();
     994:	0001ed00 	call	1ed0 <UsbSetAddress>
		usleep(10*1000);
     998:	0109c404 	movi	r4,10000
     99c:	00102840 	call	10284 <usleep>

	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     9a0:	010000c4 	movi	r4,3
     9a4:	00003300 	call	330 <IO_read>
     9a8:	10bfffcc 	andi	r2,r2,65535
     9ac:	1080040c 	andi	r2,r2,16
     9b0:	103ff826 	beq	r2,zero,994 <__alt_data_end+0xfffab264>
	{
		UsbSetAddress();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     9b4:	0002d4c0 	call	2d4c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506); // i
     9b8:	01000084 	movi	r4,2
     9bc:	01414184 	movi	r5,1286
     9c0:	00002c80 	call	2c8 <IO_write>
	printf("[ENUM PROCESS]:step 3 TD Status Byte is %x\n",IO_read(HPI_DATA));
     9c4:	0009883a 	mov	r4,zero
     9c8:	00003300 	call	330 <IO_read>
     9cc:	10bfffcc 	andi	r2,r2,65535
     9d0:	01000074 	movhi	r4,1
     9d4:	2108e404 	addi	r4,r4,9104
     9d8:	100b883a 	mov	r5,r2
     9dc:	00037f40 	call	37f4 <printf>

	IO_write(HPI_ADDR,0x0508); // n
     9e0:	01000084 	movi	r4,2
     9e4:	01414204 	movi	r5,1288
     9e8:	00002c80 	call	2c8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     9ec:	0009883a 	mov	r4,zero
     9f0:	00003300 	call	330 <IO_read>
     9f4:	d0a6e90d 	sth	r2,-25692(gp)
	printf("[ENUM PROCESS]:step 3 TD Control Byte is %x\n",usb_ctl_val);
     9f8:	d0a6e90b 	ldhu	r2,-25692(gp)
     9fc:	10bfffcc 	andi	r2,r2,65535
     a00:	01000074 	movhi	r4,1
     a04:	2108ef04 	addi	r4,r4,9148
     a08:	100b883a 	mov	r5,r2
     a0c:	00037f40 	call	37f4 <printf>
	while (usb_ctl_val != 0x03) // retries occurred
     a10:	0001883a 	nop
     a14:	d0a6e90b 	ldhu	r2,-25692(gp)
     a18:	10bfffcc 	andi	r2,r2,65535
     a1c:	108000d8 	cmpnei	r2,r2,3
     a20:	10000326 	beq	r2,zero,a30 <setup_keyboard+0x390>
	{
		usb_ctl_val = UsbGetRetryCnt();
     a24:	0002dd00 	call	2dd0 <UsbGetRetryCnt>
     a28:	d0a6e90d 	sth	r2,-25692(gp)

		goto USB_HOT_PLUG;
     a2c:	003f2406 	br	6c0 <__alt_data_end+0xfffaaf90>
	}

	printf("------------[ENUM PROCESS]:set address done!---------------\n");
     a30:	01000074 	movhi	r4,1
     a34:	2108fb04 	addi	r4,r4,9196
     a38:	00038e80 	call	38e8 <puts>

	// STEP 4 begin
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1
     a3c:	0001fcc0 	call	1fcc <UsbGetDeviceDesc1>

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     a40:	00000306 	br	a50 <setup_keyboard+0x3b0>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
     a44:	0001fcc0 	call	1fcc <UsbGetDeviceDesc1>
		usleep(10*1000);
     a48:	0109c404 	movi	r4,10000
     a4c:	00102840 	call	10284 <usleep>
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     a50:	010000c4 	movi	r4,3
     a54:	00003300 	call	330 <IO_read>
     a58:	10bfffcc 	andi	r2,r2,65535
     a5c:	1080040c 	andi	r2,r2,16
     a60:	103ff826 	beq	r2,zero,a44 <__alt_data_end+0xfffab314>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     a64:	0002d4c0 	call	2d4c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     a68:	01000084 	movi	r4,2
     a6c:	01414184 	movi	r5,1286
     a70:	00002c80 	call	2c8 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
     a74:	0009883a 	mov	r4,zero
     a78:	00003300 	call	330 <IO_read>
     a7c:	10bfffcc 	andi	r2,r2,65535
     a80:	01000074 	movhi	r4,1
     a84:	21090a04 	addi	r4,r4,9256
     a88:	100b883a 	mov	r5,r2
     a8c:	00037f40 	call	37f4 <printf>

	IO_write(HPI_ADDR,0x0508);
     a90:	01000084 	movi	r4,2
     a94:	01414204 	movi	r5,1288
     a98:	00002c80 	call	2c8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     a9c:	0009883a 	mov	r4,zero
     aa0:	00003300 	call	330 <IO_read>
     aa4:	d0a6e90d 	sth	r2,-25692(gp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
     aa8:	d0a6e90b 	ldhu	r2,-25692(gp)
     aac:	10bfffcc 	andi	r2,r2,65535
     ab0:	01000074 	movhi	r4,1
     ab4:	21091504 	addi	r4,r4,9300
     ab8:	100b883a 	mov	r5,r2
     abc:	00037f40 	call	37f4 <printf>
	while (usb_ctl_val != 0x03)
     ac0:	00000206 	br	acc <setup_keyboard+0x42c>
	{
		usb_ctl_val = UsbGetRetryCnt();
     ac4:	0002dd00 	call	2dd0 <UsbGetRetryCnt>
     ac8:	d0a6e90d 	sth	r2,-25692(gp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
     acc:	d0a6e90b 	ldhu	r2,-25692(gp)
     ad0:	10bfffcc 	andi	r2,r2,65535
     ad4:	108000d8 	cmpnei	r2,r2,3
     ad8:	103ffa1e 	bne	r2,zero,ac4 <__alt_data_end+0xfffab394>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get device descriptor-1 done!-----------------\n");
     adc:	01000074 	movhi	r4,1
     ae0:	21092104 	addi	r4,r4,9348
     ae4:	00038e80 	call	38e8 <puts>


	//--------------------------------get device descriptor-2---------------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2
     ae8:	00021100 	call	2110 <UsbGetDeviceDesc2>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     aec:	00000306 	br	afc <setup_keyboard+0x45c>
	{
		//resend the get device descriptor
		//get device descriptor
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
     af0:	00021100 	call	2110 <UsbGetDeviceDesc2>
		usleep(10*1000);
     af4:	0109c404 	movi	r4,10000
     af8:	00102840 	call	10284 <usleep>
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     afc:	010000c4 	movi	r4,3
     b00:	00003300 	call	330 <IO_read>
     b04:	10bfffcc 	andi	r2,r2,65535
     b08:	1080040c 	andi	r2,r2,16
     b0c:	103ff826 	beq	r2,zero,af0 <__alt_data_end+0xfffab3c0>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     b10:	0002d4c0 	call	2d4c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     b14:	01000084 	movi	r4,2
     b18:	01414184 	movi	r5,1286
     b1c:	00002c80 	call	2c8 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
     b20:	0009883a 	mov	r4,zero
     b24:	00003300 	call	330 <IO_read>
     b28:	10bfffcc 	andi	r2,r2,65535
     b2c:	01000074 	movhi	r4,1
     b30:	21090a04 	addi	r4,r4,9256
     b34:	100b883a 	mov	r5,r2
     b38:	00037f40 	call	37f4 <printf>

	IO_write(HPI_ADDR,0x0508);
     b3c:	01000084 	movi	r4,2
     b40:	01414204 	movi	r5,1288
     b44:	00002c80 	call	2c8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     b48:	0009883a 	mov	r4,zero
     b4c:	00003300 	call	330 <IO_read>
     b50:	d0a6e90d 	sth	r2,-25692(gp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
     b54:	d0a6e90b 	ldhu	r2,-25692(gp)
     b58:	10bfffcc 	andi	r2,r2,65535
     b5c:	01000074 	movhi	r4,1
     b60:	21091504 	addi	r4,r4,9300
     b64:	100b883a 	mov	r5,r2
     b68:	00037f40 	call	37f4 <printf>
	while (usb_ctl_val != 0x03)
     b6c:	00000206 	br	b78 <setup_keyboard+0x4d8>
	{
		usb_ctl_val = UsbGetRetryCnt();
     b70:	0002dd00 	call	2dd0 <UsbGetRetryCnt>
     b74:	d0a6e90d 	sth	r2,-25692(gp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
     b78:	d0a6e90b 	ldhu	r2,-25692(gp)
     b7c:	10bfffcc 	andi	r2,r2,65535
     b80:	108000d8 	cmpnei	r2,r2,3
     b84:	103ffa1e 	bne	r2,zero,b70 <__alt_data_end+0xfffab440>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get device descriptor-2 done!--------------\n");
     b88:	01000074 	movhi	r4,1
     b8c:	21093504 	addi	r4,r4,9428
     b90:	00038e80 	call	38e8 <puts>


	// STEP 5 begin
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1
     b94:	00022e40 	call	22e4 <UsbGetConfigDesc1>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     b98:	00000306 	br	ba8 <setup_keyboard+0x508>
	{
		//resend the get device descriptor
		//get device descriptor

		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
     b9c:	00022e40 	call	22e4 <UsbGetConfigDesc1>
		usleep(10*1000);
     ba0:	0109c404 	movi	r4,10000
     ba4:	00102840 	call	10284 <usleep>
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     ba8:	010000c4 	movi	r4,3
     bac:	00003300 	call	330 <IO_read>
     bb0:	10bfffcc 	andi	r2,r2,65535
     bb4:	1080040c 	andi	r2,r2,16
     bb8:	103ff826 	beq	r2,zero,b9c <__alt_data_end+0xfffab46c>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     bbc:	0002d4c0 	call	2d4c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     bc0:	01000084 	movi	r4,2
     bc4:	01414184 	movi	r5,1286
     bc8:	00002c80 	call	2c8 <IO_write>
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));
     bcc:	0009883a 	mov	r4,zero
     bd0:	00003300 	call	330 <IO_read>
     bd4:	10bfffcc 	andi	r2,r2,65535
     bd8:	01000074 	movhi	r4,1
     bdc:	21094704 	addi	r4,r4,9500
     be0:	100b883a 	mov	r5,r2
     be4:	00037f40 	call	37f4 <printf>

	IO_write(HPI_ADDR,0x0508);
     be8:	01000084 	movi	r4,2
     bec:	01414204 	movi	r5,1288
     bf0:	00002c80 	call	2c8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     bf4:	0009883a 	mov	r4,zero
     bf8:	00003300 	call	330 <IO_read>
     bfc:	d0a6e90d 	sth	r2,-25692(gp)
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
     c00:	d0a6e90b 	ldhu	r2,-25692(gp)
     c04:	10bfffcc 	andi	r2,r2,65535
     c08:	01000074 	movhi	r4,1
     c0c:	21095204 	addi	r4,r4,9544
     c10:	100b883a 	mov	r5,r2
     c14:	00037f40 	call	37f4 <printf>
	while (usb_ctl_val != 0x03)
     c18:	00000206 	br	c24 <setup_keyboard+0x584>
	{
		usb_ctl_val = UsbGetRetryCnt();
     c1c:	0002dd00 	call	2dd0 <UsbGetRetryCnt>
     c20:	d0a6e90d 	sth	r2,-25692(gp)
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
     c24:	d0a6e90b 	ldhu	r2,-25692(gp)
     c28:	10bfffcc 	andi	r2,r2,65535
     c2c:	108000d8 	cmpnei	r2,r2,3
     c30:	103ffa1e 	bne	r2,zero,c1c <__alt_data_end+0xfffab4ec>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}
	printf("------------[ENUM PROCESS]:get configuration descriptor-1 pass------------\n");
     c34:	01000074 	movhi	r4,1
     c38:	21095e04 	addi	r4,r4,9592
     c3c:	00038e80 	call	38e8 <puts>

	// STEP 6 begin
	//-----------------------------------get configuration descriptor-2------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2
     c40:	00024700 	call	2470 <UsbGetConfigDesc2>

	usleep(100*1000);
     c44:	010000b4 	movhi	r4,2
     c48:	2121a804 	addi	r4,r4,-31072
     c4c:	00102840 	call	10284 <usleep>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     c50:	00000306 	br	c60 <setup_keyboard+0x5c0>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
     c54:	00024700 	call	2470 <UsbGetConfigDesc2>
		usleep(10*1000);
     c58:	0109c404 	movi	r4,10000
     c5c:	00102840 	call	10284 <usleep>
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2

	usleep(100*1000);
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     c60:	010000c4 	movi	r4,3
     c64:	00003300 	call	330 <IO_read>
     c68:	10bfffcc 	andi	r2,r2,65535
     c6c:	1080040c 	andi	r2,r2,16
     c70:	103ff826 	beq	r2,zero,c54 <__alt_data_end+0xfffab524>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     c74:	0002d4c0 	call	2d4c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     c78:	01000084 	movi	r4,2
     c7c:	01414184 	movi	r5,1286
     c80:	00002c80 	call	2c8 <IO_write>
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));
     c84:	0009883a 	mov	r4,zero
     c88:	00003300 	call	330 <IO_read>
     c8c:	10bfffcc 	andi	r2,r2,65535
     c90:	01000074 	movhi	r4,1
     c94:	21097104 	addi	r4,r4,9668
     c98:	100b883a 	mov	r5,r2
     c9c:	00037f40 	call	37f4 <printf>

	IO_write(HPI_ADDR,0x0508);
     ca0:	01000084 	movi	r4,2
     ca4:	01414204 	movi	r5,1288
     ca8:	00002c80 	call	2c8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     cac:	0009883a 	mov	r4,zero
     cb0:	00003300 	call	330 <IO_read>
     cb4:	d0a6e90d 	sth	r2,-25692(gp)
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
     cb8:	d0a6e90b 	ldhu	r2,-25692(gp)
     cbc:	10bfffcc 	andi	r2,r2,65535
     cc0:	01000074 	movhi	r4,1
     cc4:	21097c04 	addi	r4,r4,9712
     cc8:	100b883a 	mov	r5,r2
     ccc:	00037f40 	call	37f4 <printf>
	while (usb_ctl_val != 0x03)
     cd0:	00000206 	br	cdc <setup_keyboard+0x63c>
	{
		usb_ctl_val = UsbGetRetryCnt();
     cd4:	0002dd00 	call	2dd0 <UsbGetRetryCnt>
     cd8:	d0a6e90d 	sth	r2,-25692(gp)
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
     cdc:	d0a6e90b 	ldhu	r2,-25692(gp)
     ce0:	10bfffcc 	andi	r2,r2,65535
     ce4:	108000d8 	cmpnei	r2,r2,3
     ce8:	103ffa1e 	bne	r2,zero,cd4 <__alt_data_end+0xfffab5a4>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("-----------[ENUM PROCESS]:get configuration descriptor-2 done!------------\n");
     cec:	01000074 	movhi	r4,1
     cf0:	21098804 	addi	r4,r4,9760
     cf4:	00038e80 	call	38e8 <puts>


	// ---------------------------------get device info---------------------------------------------//

	// TASK: Write the address to read from the memory for byte 7 of the interface descriptor to HPI_ADDR.
	IO_write(HPI_ADDR,0x056c);
     cf8:	01000084 	movi	r4,2
     cfc:	01415b04 	movi	r5,1388
     d00:	00002c80 	call	2c8 <IO_write>
	code = IO_read(HPI_DATA);
     d04:	0009883a 	mov	r4,zero
     d08:	00003300 	call	330 <IO_read>
     d0c:	d0a6eb0d 	sth	r2,-25684(gp)
	code = code & 0x003;
     d10:	d0a6eb0b 	ldhu	r2,-25684(gp)
     d14:	108000cc 	andi	r2,r2,3
     d18:	d0a6eb0d 	sth	r2,-25684(gp)
	printf("\ncode = %x\n", code);
     d1c:	d0a6eb0b 	ldhu	r2,-25684(gp)
     d20:	10bfffcc 	andi	r2,r2,65535
     d24:	01000074 	movhi	r4,1
     d28:	21099b04 	addi	r4,r4,9836
     d2c:	100b883a 	mov	r5,r2
     d30:	00037f40 	call	37f4 <printf>

	if (code == 0x01)
     d34:	d0a6eb0b 	ldhu	r2,-25684(gp)
     d38:	10bfffcc 	andi	r2,r2,65535
     d3c:	10800058 	cmpnei	r2,r2,1
     d40:	1000041e 	bne	r2,zero,d54 <setup_keyboard+0x6b4>
	{
		printf("\n[INFO]:check TD rec data7 \n[INFO]:Keyboard Detected!!!\n\n");
     d44:	01000074 	movhi	r4,1
     d48:	21099e04 	addi	r4,r4,9848
     d4c:	00038e80 	call	38e8 <puts>
     d50:	00000306 	br	d60 <setup_keyboard+0x6c0>
	}
	else
	{
		printf("\n[INFO]:Keyboard Not Detected!!! \n\n");
     d54:	01000074 	movhi	r4,1
     d58:	2109ad04 	addi	r4,r4,9908
     d5c:	00038e80 	call	38e8 <puts>
	}

	// TASK: Write the address to read from the memory for the endpoint descriptor to HPI_ADDR.

	IO_write(HPI_ADDR,0x0576);
     d60:	01000084 	movi	r4,2
     d64:	01415d84 	movi	r5,1398
     d68:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x073F);
     d6c:	0009883a 	mov	r4,zero
     d70:	0141cfc4 	movi	r5,1855
     d74:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x8105);
     d78:	0009883a 	mov	r4,zero
     d7c:	01604154 	movui	r5,33029
     d80:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0003);
     d84:	0009883a 	mov	r4,zero
     d88:	014000c4 	movi	r5,3
     d8c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);
     d90:	0009883a 	mov	r4,zero
     d94:	01400204 	movi	r5,8
     d98:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0xAC0A);
     d9c:	0009883a 	mov	r4,zero
     da0:	016b0294 	movui	r5,44042
     da4:	00002c80 	call	2c8 <IO_write>
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0576); //HUSB_SIE1_pCurrentTDPtr
     da8:	01006c04 	movi	r4,432
     dac:	01415d84 	movi	r5,1398
     db0:	0001d880 	call	1d88 <UsbWrite>

	//data_size = (IO_read(HPI_DATA)>>8)&0x0ff;
	//data_size = 0x08;//(IO_read(HPI_DATA))&0x0ff;
	//UsbPrintMem();
	IO_write(HPI_ADDR,0x057c);
     db4:	01000084 	movi	r4,2
     db8:	01415f04 	movi	r5,1404
     dbc:	00002c80 	call	2c8 <IO_write>
	data_size = (IO_read(HPI_DATA))&0x0ff;
     dc0:	0009883a 	mov	r4,zero
     dc4:	00003300 	call	330 <IO_read>
     dc8:	d0a6e985 	stb	r2,-25690(gp)
	printf("[ENUM PROCESS]:data packet size is %d\n",data_size);
     dcc:	d0a6e983 	ldbu	r2,-25690(gp)
     dd0:	10803fcc 	andi	r2,r2,255
     dd4:	01000074 	movhi	r4,1
     dd8:	2109b604 	addi	r4,r4,9944
     ddc:	100b883a 	mov	r5,r2
     de0:	00037f40 	call	37f4 <printf>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration
     de4:	00026d40 	call	26d4 <UsbSetConfig>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     de8:	00000306 	br	df8 <setup_keyboard+0x758>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
     dec:	00026d40 	call	26d4 <UsbSetConfig>
		usleep(10*1000);
     df0:	0109c404 	movi	r4,10000
     df4:	00102840 	call	10284 <usleep>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     df8:	010000c4 	movi	r4,3
     dfc:	00003300 	call	330 <IO_read>
     e00:	10bfffcc 	andi	r2,r2,65535
     e04:	1080040c 	andi	r2,r2,16
     e08:	103ff826 	beq	r2,zero,dec <__alt_data_end+0xfffab6bc>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     e0c:	0002d4c0 	call	2d4c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     e10:	01000084 	movi	r4,2
     e14:	01414184 	movi	r5,1286
     e18:	00002c80 	call	2c8 <IO_write>
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));
     e1c:	0009883a 	mov	r4,zero
     e20:	00003300 	call	330 <IO_read>
     e24:	10bfffcc 	andi	r2,r2,65535
     e28:	01000074 	movhi	r4,1
     e2c:	2109c004 	addi	r4,r4,9984
     e30:	100b883a 	mov	r5,r2
     e34:	00037f40 	call	37f4 <printf>

	IO_write(HPI_ADDR,0x0508);
     e38:	01000084 	movi	r4,2
     e3c:	01414204 	movi	r5,1288
     e40:	00002c80 	call	2c8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     e44:	0009883a 	mov	r4,zero
     e48:	00003300 	call	330 <IO_read>
     e4c:	d0a6e90d 	sth	r2,-25692(gp)
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
     e50:	d0a6e90b 	ldhu	r2,-25692(gp)
     e54:	10bfffcc 	andi	r2,r2,65535
     e58:	01000074 	movhi	r4,1
     e5c:	2109cb04 	addi	r4,r4,10028
     e60:	100b883a 	mov	r5,r2
     e64:	00037f40 	call	37f4 <printf>
	while (usb_ctl_val != 0x03)
     e68:	00000206 	br	e74 <setup_keyboard+0x7d4>
	{
		usb_ctl_val = UsbGetRetryCnt();
     e6c:	0002dd00 	call	2dd0 <UsbGetRetryCnt>
     e70:	d0a6e90d 	sth	r2,-25692(gp)
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
     e74:	d0a6e90b 	ldhu	r2,-25692(gp)
     e78:	10bfffcc 	andi	r2,r2,65535
     e7c:	108000d8 	cmpnei	r2,r2,3
     e80:	103ffa1e 	bne	r2,zero,e6c <__alt_data_end+0xfffab73c>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:set configuration done!-------------------\n");
     e84:	01000074 	movhi	r4,1
     e88:	2109d704 	addi	r4,r4,10076
     e8c:	00038e80 	call	38e8 <puts>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();
     e90:	00027d00 	call	27d0 <UsbClassRequest>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     e94:	00000306 	br	ea4 <setup_keyboard+0x804>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
     e98:	00027d00 	call	27d0 <UsbClassRequest>
		usleep(10*1000);
     e9c:	0109c404 	movi	r4,10000
     ea0:	00102840 	call	10284 <usleep>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     ea4:	010000c4 	movi	r4,3
     ea8:	00003300 	call	330 <IO_read>
     eac:	10bfffcc 	andi	r2,r2,65535
     eb0:	1080040c 	andi	r2,r2,16
     eb4:	103ff826 	beq	r2,zero,e98 <__alt_data_end+0xfffab768>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     eb8:	0002d4c0 	call	2d4c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     ebc:	01000084 	movi	r4,2
     ec0:	01414184 	movi	r5,1286
     ec4:	00002c80 	call	2c8 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
     ec8:	0009883a 	mov	r4,zero
     ecc:	00003300 	call	330 <IO_read>
     ed0:	10bfffcc 	andi	r2,r2,65535
     ed4:	01000074 	movhi	r4,1
     ed8:	2109e904 	addi	r4,r4,10148
     edc:	100b883a 	mov	r5,r2
     ee0:	00037f40 	call	37f4 <printf>

	IO_write(HPI_ADDR,0x0508);
     ee4:	01000084 	movi	r4,2
     ee8:	01414204 	movi	r5,1288
     eec:	00002c80 	call	2c8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     ef0:	0009883a 	mov	r4,zero
     ef4:	00003300 	call	330 <IO_read>
     ef8:	d0a6e90d 	sth	r2,-25692(gp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
     efc:	d0a6e90b 	ldhu	r2,-25692(gp)
     f00:	10bfffcc 	andi	r2,r2,65535
     f04:	01000074 	movhi	r4,1
     f08:	2109f404 	addi	r4,r4,10192
     f0c:	100b883a 	mov	r5,r2
     f10:	00037f40 	call	37f4 <printf>
	while (usb_ctl_val != 0x03)
     f14:	00000206 	br	f20 <setup_keyboard+0x880>
	{
		usb_ctl_val = UsbGetRetryCnt();
     f18:	0002dd00 	call	2dd0 <UsbGetRetryCnt>
     f1c:	d0a6e90d 	sth	r2,-25692(gp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
     f20:	d0a6e90b 	ldhu	r2,-25692(gp)
     f24:	10bfffcc 	andi	r2,r2,65535
     f28:	108000d8 	cmpnei	r2,r2,3
     f2c:	103ffa1e 	bne	r2,zero,f18 <__alt_data_end+0xfffab7e8>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("------------[ENUM PROCESS]:class request out done!-------------------\n");
     f30:	01000074 	movhi	r4,1
     f34:	210a0004 	addi	r4,r4,10240
     f38:	00038e80 	call	38e8 <puts>

	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();
     f3c:	00028cc0 	call	28cc <UsbGetHidDesc>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     f40:	00000306 	br	f50 <setup_keyboard+0x8b0>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
     f44:	00028cc0 	call	28cc <UsbGetHidDesc>
		usleep(10*1000);
     f48:	0109c404 	movi	r4,10000
     f4c:	00102840 	call	10284 <usleep>
	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     f50:	010000c4 	movi	r4,3
     f54:	00003300 	call	330 <IO_read>
     f58:	10bfffcc 	andi	r2,r2,65535
     f5c:	1080040c 	andi	r2,r2,16
     f60:	103ff826 	beq	r2,zero,f44 <__alt_data_end+0xfffab814>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     f64:	0002d4c0 	call	2d4c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     f68:	01000084 	movi	r4,2
     f6c:	01414184 	movi	r5,1286
     f70:	00002c80 	call	2c8 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
     f74:	0009883a 	mov	r4,zero
     f78:	00003300 	call	330 <IO_read>
     f7c:	10bfffcc 	andi	r2,r2,65535
     f80:	01000074 	movhi	r4,1
     f84:	2109e904 	addi	r4,r4,10148
     f88:	100b883a 	mov	r5,r2
     f8c:	00037f40 	call	37f4 <printf>

	IO_write(HPI_ADDR,0x0508);
     f90:	01000084 	movi	r4,2
     f94:	01414204 	movi	r5,1288
     f98:	00002c80 	call	2c8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     f9c:	0009883a 	mov	r4,zero
     fa0:	00003300 	call	330 <IO_read>
     fa4:	d0a6e90d 	sth	r2,-25692(gp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
     fa8:	d0a6e90b 	ldhu	r2,-25692(gp)
     fac:	10bfffcc 	andi	r2,r2,65535
     fb0:	01000074 	movhi	r4,1
     fb4:	2109f404 	addi	r4,r4,10192
     fb8:	100b883a 	mov	r5,r2
     fbc:	00037f40 	call	37f4 <printf>
	while (usb_ctl_val != 0x03)
     fc0:	00000206 	br	fcc <setup_keyboard+0x92c>
	{
		usb_ctl_val = UsbGetRetryCnt();
     fc4:	0002dd00 	call	2dd0 <UsbGetRetryCnt>
     fc8:	d0a6e90d 	sth	r2,-25692(gp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
     fcc:	d0a6e90b 	ldhu	r2,-25692(gp)
     fd0:	10bfffcc 	andi	r2,r2,65535
     fd4:	108000d8 	cmpnei	r2,r2,3
     fd8:	103ffa1e 	bne	r2,zero,fc4 <__alt_data_end+0xfffab894>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get descriptor (class 0x21) done!-------------------\n");
     fdc:	01000074 	movhi	r4,1
     fe0:	210a1204 	addi	r4,r4,10312
     fe4:	00038e80 	call	38e8 <puts>

	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
     fe8:	0002a100 	call	2a10 <UsbGetReportDesc>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     fec:	00000306 	br	ffc <setup_keyboard+0x95c>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
     ff0:	0002a100 	call	2a10 <UsbGetReportDesc>
		usleep(10*1000);
     ff4:	0109c404 	movi	r4,10000
     ff8:	00102840 	call	10284 <usleep>
	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     ffc:	010000c4 	movi	r4,3
    1000:	00003300 	call	330 <IO_read>
    1004:	10bfffcc 	andi	r2,r2,65535
    1008:	1080040c 	andi	r2,r2,16
    100c:	103ff826 	beq	r2,zero,ff0 <__alt_data_end+0xfffab8c0>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
    1010:	0002d4c0 	call	2d4c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
    1014:	01000084 	movi	r4,2
    1018:	01414184 	movi	r5,1286
    101c:	00002c80 	call	2c8 <IO_write>
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));
    1020:	0009883a 	mov	r4,zero
    1024:	00003300 	call	330 <IO_read>
    1028:	10bfffcc 	andi	r2,r2,65535
    102c:	01000074 	movhi	r4,1
    1030:	210a2604 	addi	r4,r4,10392
    1034:	100b883a 	mov	r5,r2
    1038:	00037f40 	call	37f4 <printf>

	IO_write(HPI_ADDR,0x0508);
    103c:	01000084 	movi	r4,2
    1040:	01414204 	movi	r5,1288
    1044:	00002c80 	call	2c8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
    1048:	0009883a 	mov	r4,zero
    104c:	00003300 	call	330 <IO_read>
    1050:	d0a6e90d 	sth	r2,-25692(gp)
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
    1054:	d0a6e90b 	ldhu	r2,-25692(gp)
    1058:	10bfffcc 	andi	r2,r2,65535
    105c:	01000074 	movhi	r4,1
    1060:	210a3204 	addi	r4,r4,10440
    1064:	100b883a 	mov	r5,r2
    1068:	00037f40 	call	37f4 <printf>
	while (usb_ctl_val != 0x03)
    106c:	00000206 	br	1078 <setup_keyboard+0x9d8>
	{
		usb_ctl_val = UsbGetRetryCnt();
    1070:	0002dd00 	call	2dd0 <UsbGetRetryCnt>
    1074:	d0a6e90d 	sth	r2,-25692(gp)
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
    1078:	d0a6e90b 	ldhu	r2,-25692(gp)
    107c:	10bfffcc 	andi	r2,r2,65535
    1080:	108000d8 	cmpnei	r2,r2,3
    1084:	103ffa1e 	bne	r2,zero,1070 <__alt_data_end+0xfffab940>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get descriptor (class 0x22) done!----------------\n");
    1088:	01000074 	movhi	r4,1
    108c:	210a3e04 	addi	r4,r4,10488
    1090:	00038e80 	call	38e8 <puts>


	//-----------------------------------get keycode value------------------------------------------------//


	return;
    1094:	0001883a 	nop
}
    1098:	e037883a 	mov	sp,fp
    109c:	dfc00117 	ldw	ra,4(sp)
    10a0:	df000017 	ldw	fp,0(sp)
    10a4:	dec00204 	addi	sp,sp,8
    10a8:	f800283a 	ret

000010ac <main>:
void parse_keycode(unsigned int *arr,unsigned int keycode1,unsigned int keycode2);

//Hits
void check_projectiles();

int main(void){
    10ac:	defff504 	addi	sp,sp,-44
    10b0:	dfc00a15 	stw	ra,40(sp)
    10b4:	df000915 	stw	fp,36(sp)
    10b8:	df000904 	addi	fp,sp,36
	setup_keyboard();
    10bc:	00006a00 	call	6a0 <setup_keyboard>
	unsigned int keycode1,keycode2;
	player *first=(player *)malloc(sizeof(player));
    10c0:	01000604 	movi	r4,24
    10c4:	0002ff80 	call	2ff8 <malloc>
    10c8:	e0bff715 	stw	r2,-36(fp)
	player *second=(player *)malloc(sizeof(player));
    10cc:	01000604 	movi	r4,24
    10d0:	0002ff80 	call	2ff8 <malloc>
    10d4:	e0bff815 	stw	r2,-32(fp)
	enemy *head_enemies=NULL;
    10d8:	e03ffb15 	stw	zero,-20(fp)
	init_players(first,second);
    10dc:	e13ff717 	ldw	r4,-36(fp)
    10e0:	e17ff817 	ldw	r5,-32(fp)
    10e4:	00011840 	call	1184 <init_players>
	render_players(first,second);
    10e8:	e13ff717 	ldw	r4,-36(fp)
    10ec:	e17ff817 	ldw	r5,-32(fp)
    10f0:	00017b00 	call	17b0 <render_players>
	unsigned int arr[4]={0,0,0,0};
    10f4:	e03ffc15 	stw	zero,-16(fp)
    10f8:	e03ffd15 	stw	zero,-12(fp)
    10fc:	e03ffe15 	stw	zero,-8(fp)
    1100:	e03fff15 	stw	zero,-4(fp)
	while(1)
		{
			if(get_keycode(&keycode1,&keycode2)==0){
    1104:	e0fff904 	addi	r3,fp,-28
    1108:	e0bffa04 	addi	r2,fp,-24
    110c:	1809883a 	mov	r4,r3
    1110:	100b883a 	mov	r5,r2
    1114:	00003940 	call	394 <get_keycode>
    1118:	1000101e 	bne	r2,zero,115c <main+0xb0>
				parse_keycode(arr,keycode1,keycode2);
    111c:	e0fff917 	ldw	r3,-28(fp)
    1120:	e0bffa17 	ldw	r2,-24(fp)
    1124:	e13ffc04 	addi	r4,fp,-16
    1128:	180b883a 	mov	r5,r3
    112c:	100d883a 	mov	r6,r2
    1130:	0001ac00 	call	1ac0 <parse_keycode>
				if(keycode_effect(first,second,arr)==1){
    1134:	e0bffc04 	addi	r2,fp,-16
    1138:	e13ff717 	ldw	r4,-36(fp)
    113c:	e17ff817 	ldw	r5,-32(fp)
    1140:	100d883a 	mov	r6,r2
    1144:	00018cc0 	call	18cc <keycode_effect>
    1148:	10800058 	cmpnei	r2,r2,1
    114c:	1000031e 	bne	r2,zero,115c <main+0xb0>
				render_players(first,second);
    1150:	e13ff717 	ldw	r4,-36(fp)
    1154:	e17ff817 	ldw	r5,-32(fp)
    1158:	00017b00 	call	17b0 <render_players>
				}
			}
			make_enemies(&head_enemies);
    115c:	e0bffb04 	addi	r2,fp,-20
    1160:	1009883a 	mov	r4,r2
    1164:	000125c0 	call	125c <make_enemies>
			render_enemies(head_enemies);
    1168:	e0bffb17 	ldw	r2,-20(fp)
    116c:	1009883a 	mov	r4,r2
    1170:	00014a80 	call	14a8 <render_enemies>
			move_enemies(head_enemies);
    1174:	e0bffb17 	ldw	r2,-20(fp)
    1178:	1009883a 	mov	r4,r2
    117c:	000136c0 	call	136c <move_enemies>
		}
    1180:	003fe006 	br	1104 <__alt_data_end+0xfffab9d4>

00001184 <init_players>:
				 {84,78},
				 {116,137},
				 {105,63},
				 {89,75}};

void init_players(player *first,player *second){
    1184:	defffc04 	addi	sp,sp,-16
    1188:	dfc00315 	stw	ra,12(sp)
    118c:	df000215 	stw	fp,8(sp)
    1190:	df000204 	addi	fp,sp,8
    1194:	e13ffe15 	stw	r4,-8(fp)
    1198:	e17fff15 	stw	r5,-4(fp)
	if(first==NULL || second ==NULL)
    119c:	e0bffe17 	ldw	r2,-8(fp)
    11a0:	10000226 	beq	r2,zero,11ac <init_players+0x28>
    11a4:	e0bfff17 	ldw	r2,-4(fp)
    11a8:	1000041e 	bne	r2,zero,11bc <init_players+0x38>
	{
		printf("players not instantiated");
    11ac:	01000074 	movhi	r4,1
    11b0:	210a5204 	addi	r4,r4,10568
    11b4:	00037f40 	call	37f4 <printf>
    11b8:	00002306 	br	1248 <init_players+0xc4>
	}
	else{
		first->x_pos = 300,
    11bc:	e0bffe17 	ldw	r2,-8(fp)
    11c0:	00c04b04 	movi	r3,300
    11c4:	10c00015 	stw	r3,0(r2)
		first->y_pos = y_bounds - sizes[player1_sprite][1];
    11c8:	00800074 	movhi	r2,1
    11cc:	108b4104 	addi	r2,r2,11524
    11d0:	10800117 	ldw	r2,4(r2)
    11d4:	00c077c4 	movi	r3,479
    11d8:	1887c83a 	sub	r3,r3,r2
    11dc:	e0bffe17 	ldw	r2,-8(fp)
    11e0:	10c00115 	stw	r3,4(r2)
		first->health = 3;
    11e4:	e0bffe17 	ldw	r2,-8(fp)
    11e8:	00c000c4 	movi	r3,3
    11ec:	10c00215 	stw	r3,8(r2)
		first->id=player1_sprite;
    11f0:	e0bffe17 	ldw	r2,-8(fp)
    11f4:	10000315 	stw	zero,12(r2)
		first->old_x =
		second->x_pos= 200;
    11f8:	e0bfff17 	ldw	r2,-4(fp)
    11fc:	00c03204 	movi	r3,200
    1200:	10c00015 	stw	r3,0(r2)
    1204:	e0bfff17 	ldw	r2,-4(fp)
    1208:	10c00017 	ldw	r3,0(r2)
	else{
		first->x_pos = 300,
		first->y_pos = y_bounds - sizes[player1_sprite][1];
		first->health = 3;
		first->id=player1_sprite;
		first->old_x =
    120c:	e0bffe17 	ldw	r2,-8(fp)
    1210:	10c00415 	stw	r3,16(r2)
		second->x_pos= 200;
		second->y_pos= y_bounds - sizes[player2_sprite][1];
    1214:	00800074 	movhi	r2,1
    1218:	108b4104 	addi	r2,r2,11524
    121c:	10800317 	ldw	r2,12(r2)
    1220:	00c077c4 	movi	r3,479
    1224:	1887c83a 	sub	r3,r3,r2
    1228:	e0bfff17 	ldw	r2,-4(fp)
    122c:	10c00115 	stw	r3,4(r2)
		second->health=3;
    1230:	e0bfff17 	ldw	r2,-4(fp)
    1234:	00c000c4 	movi	r3,3
    1238:	10c00215 	stw	r3,8(r2)
		second->id = player2_sprite;
    123c:	e0bfff17 	ldw	r2,-4(fp)
    1240:	00c00044 	movi	r3,1
    1244:	10c00315 	stw	r3,12(r2)
	}
}
    1248:	e037883a 	mov	sp,fp
    124c:	dfc00117 	ldw	ra,4(sp)
    1250:	df000017 	ldw	fp,0(sp)
    1254:	dec00204 	addi	sp,sp,8
    1258:	f800283a 	ret

0000125c <make_enemies>:

void make_enemies(enemy **em){
    125c:	defffa04 	addi	sp,sp,-24
    1260:	dfc00515 	stw	ra,20(sp)
    1264:	df000415 	stw	fp,16(sp)
    1268:	df000404 	addi	fp,sp,16
    126c:	e13fff15 	stw	r4,-4(fp)
	int num=0;
    1270:	e03ffc15 	stw	zero,-16(fp)
	enemy *mover=*em;
    1274:	e0bfff17 	ldw	r2,-4(fp)
    1278:	10800017 	ldw	r2,0(r2)
    127c:	e0bffd15 	stw	r2,-12(fp)
	while(mover!=NULL){
    1280:	00000606 	br	129c <make_enemies+0x40>
		num++;
    1284:	e0bffc17 	ldw	r2,-16(fp)
    1288:	10800044 	addi	r2,r2,1
    128c:	e0bffc15 	stw	r2,-16(fp)
		mover=mover->next;
    1290:	e0bffd17 	ldw	r2,-12(fp)
    1294:	10800717 	ldw	r2,28(r2)
    1298:	e0bffd15 	stw	r2,-12(fp)
}

void make_enemies(enemy **em){
	int num=0;
	enemy *mover=*em;
	while(mover!=NULL){
    129c:	e0bffd17 	ldw	r2,-12(fp)
    12a0:	103ff81e 	bne	r2,zero,1284 <__alt_data_end+0xfffabb54>
		num++;
		mover=mover->next;
	}
	while(num<10){
    12a4:	00002906 	br	134c <make_enemies+0xf0>
		enemy *generated=(enemy *)malloc(sizeof(enemy));
    12a8:	01000804 	movi	r4,32
    12ac:	0002ff80 	call	2ff8 <malloc>
    12b0:	e0bffe15 	stw	r2,-8(fp)
		generated->x_pos=rand()%640;
    12b4:	00039140 	call	3914 <rand>
    12b8:	1009883a 	mov	r4,r2
    12bc:	0140a004 	movi	r5,640
    12c0:	0002f8c0 	call	2f8c <__modsi3>
    12c4:	1007883a 	mov	r3,r2
    12c8:	e0bffe17 	ldw	r2,-8(fp)
    12cc:	10c00015 	stw	r3,0(r2)
		generated->y_pos=3;
    12d0:	e0bffe17 	ldw	r2,-8(fp)
    12d4:	00c000c4 	movi	r3,3
    12d8:	10c00115 	stw	r3,4(r2)
		generated->old_x=generated->x_pos;
    12dc:	e0bffe17 	ldw	r2,-8(fp)
    12e0:	10c00017 	ldw	r3,0(r2)
    12e4:	e0bffe17 	ldw	r2,-8(fp)
    12e8:	10c00415 	stw	r3,16(r2)
		generated->old_y=generated->y_pos;
    12ec:	e0bffe17 	ldw	r2,-8(fp)
    12f0:	10c00117 	ldw	r3,4(r2)
    12f4:	e0bffe17 	ldw	r2,-8(fp)
    12f8:	10c00515 	stw	r3,20(r2)
		generated->health = 2;
    12fc:	e0bffe17 	ldw	r2,-8(fp)
    1300:	00c00084 	movi	r3,2
    1304:	10c00215 	stw	r3,8(r2)
		generated->id=rand()%9+3;
    1308:	00039140 	call	3914 <rand>
    130c:	1009883a 	mov	r4,r2
    1310:	01400244 	movi	r5,9
    1314:	0002f8c0 	call	2f8c <__modsi3>
    1318:	10c000c4 	addi	r3,r2,3
    131c:	e0bffe17 	ldw	r2,-8(fp)
    1320:	10c00315 	stw	r3,12(r2)
		generated->next = *em;
    1324:	e0bfff17 	ldw	r2,-4(fp)
    1328:	10c00017 	ldw	r3,0(r2)
    132c:	e0bffe17 	ldw	r2,-8(fp)
    1330:	10c00715 	stw	r3,28(r2)
		*em = generated;
    1334:	e0bfff17 	ldw	r2,-4(fp)
    1338:	e0fffe17 	ldw	r3,-8(fp)
    133c:	10c00015 	stw	r3,0(r2)
		num++;
    1340:	e0bffc17 	ldw	r2,-16(fp)
    1344:	10800044 	addi	r2,r2,1
    1348:	e0bffc15 	stw	r2,-16(fp)
	enemy *mover=*em;
	while(mover!=NULL){
		num++;
		mover=mover->next;
	}
	while(num<10){
    134c:	e0bffc17 	ldw	r2,-16(fp)
    1350:	10800290 	cmplti	r2,r2,10
    1354:	103fd41e 	bne	r2,zero,12a8 <__alt_data_end+0xfffabb78>
		generated->next = *em;
		*em = generated;
		num++;
	}

}
    1358:	e037883a 	mov	sp,fp
    135c:	dfc00117 	ldw	ra,4(sp)
    1360:	df000017 	ldw	fp,0(sp)
    1364:	dec00204 	addi	sp,sp,8
    1368:	f800283a 	ret

0000136c <move_enemies>:




void move_enemies(enemy *start){
    136c:	defffb04 	addi	sp,sp,-20
    1370:	dfc00415 	stw	ra,16(sp)
    1374:	df000315 	stw	fp,12(sp)
    1378:	df000304 	addi	fp,sp,12
    137c:	e13fff15 	stw	r4,-4(fp)
	if(start==NULL){
    1380:	e0bfff17 	ldw	r2,-4(fp)
    1384:	1000041e 	bne	r2,zero,1398 <move_enemies+0x2c>
		printf("You piece of shit\n");
    1388:	01000074 	movhi	r4,1
    138c:	210a5904 	addi	r4,r4,10596
    1390:	00038e80 	call	38e8 <puts>
    1394:	00002506 	br	142c <move_enemies+0xc0>
	}
	else{
	enemy *em=start;
    1398:	e0bfff17 	ldw	r2,-4(fp)
    139c:	e0bffd15 	stw	r2,-12(fp)
	while(em!=NULL){
    13a0:	00002006 	br	1424 <move_enemies+0xb8>
		render_shadow_enemy(em);
    13a4:	e13ffd17 	ldw	r4,-12(fp)
    13a8:	00014400 	call	1440 <render_shadow_enemy>
		move_enemy(em,em->x_pos,em->y_pos+3);
    13ac:	e0bffd17 	ldw	r2,-12(fp)
    13b0:	10c00017 	ldw	r3,0(r2)
    13b4:	e0bffd17 	ldw	r2,-12(fp)
    13b8:	10800117 	ldw	r2,4(r2)
    13bc:	108000c4 	addi	r2,r2,3
    13c0:	e13ffd17 	ldw	r4,-12(fp)
    13c4:	180b883a 	mov	r5,r3
    13c8:	100d883a 	mov	r6,r2
    13cc:	0001c6c0 	call	1c6c <move_enemy>
		if(em->next!=NULL && em->next->y_pos==100){
    13d0:	e0bffd17 	ldw	r2,-12(fp)
    13d4:	10800717 	ldw	r2,28(r2)
    13d8:	10000f26 	beq	r2,zero,1418 <move_enemies+0xac>
    13dc:	e0bffd17 	ldw	r2,-12(fp)
    13e0:	10800717 	ldw	r2,28(r2)
    13e4:	10800117 	ldw	r2,4(r2)
    13e8:	10801918 	cmpnei	r2,r2,100
    13ec:	10000a1e 	bne	r2,zero,1418 <move_enemies+0xac>
			enemy *to_free=em->next;
    13f0:	e0bffd17 	ldw	r2,-12(fp)
    13f4:	10800717 	ldw	r2,28(r2)
    13f8:	e0bffe15 	stw	r2,-8(fp)
			em->next=em->next->next;
    13fc:	e0bffd17 	ldw	r2,-12(fp)
    1400:	10800717 	ldw	r2,28(r2)
    1404:	10c00717 	ldw	r3,28(r2)
    1408:	e0bffd17 	ldw	r2,-12(fp)
    140c:	10c00715 	stw	r3,28(r2)
			free(to_free);
    1410:	e13ffe17 	ldw	r4,-8(fp)
    1414:	000300c0 	call	300c <free>
			}
		em=em->next;
    1418:	e0bffd17 	ldw	r2,-12(fp)
    141c:	10800717 	ldw	r2,28(r2)
    1420:	e0bffd15 	stw	r2,-12(fp)
	if(start==NULL){
		printf("You piece of shit\n");
	}
	else{
	enemy *em=start;
	while(em!=NULL){
    1424:	e0bffd17 	ldw	r2,-12(fp)
    1428:	103fde1e 	bne	r2,zero,13a4 <__alt_data_end+0xfffabc74>
			free(to_free);
			}
		em=em->next;
		}
	}
}
    142c:	e037883a 	mov	sp,fp
    1430:	dfc00117 	ldw	ra,4(sp)
    1434:	df000017 	ldw	fp,0(sp)
    1438:	dec00204 	addi	sp,sp,8
    143c:	f800283a 	ret

00001440 <render_shadow_enemy>:

void render_shadow_enemy(enemy *start){
    1440:	defffd04 	addi	sp,sp,-12
    1444:	dfc00215 	stw	ra,8(sp)
    1448:	df000115 	stw	fp,4(sp)
    144c:	df000104 	addi	fp,sp,4
    1450:	e13fff15 	stw	r4,-4(fp)
	if(start==NULL){
    1454:	e0bfff17 	ldw	r2,-4(fp)
    1458:	1000041e 	bne	r2,zero,146c <render_shadow_enemy+0x2c>
		printf("enemy not initialized");
    145c:	01000074 	movhi	r4,1
    1460:	210a5e04 	addi	r4,r4,10616
    1464:	00037f40 	call	37f4 <printf>
    1468:	00000a06 	br	1494 <render_shadow_enemy+0x54>
	}
	else{
		renderer(start->x_pos,start->y_pos,start->id,1);
    146c:	e0bfff17 	ldw	r2,-4(fp)
    1470:	11000017 	ldw	r4,0(r2)
    1474:	e0bfff17 	ldw	r2,-4(fp)
    1478:	10c00117 	ldw	r3,4(r2)
    147c:	e0bfff17 	ldw	r2,-4(fp)
    1480:	10800317 	ldw	r2,12(r2)
    1484:	180b883a 	mov	r5,r3
    1488:	100d883a 	mov	r6,r2
    148c:	01c00044 	movi	r7,1
    1490:	00015680 	call	1568 <renderer>
	}
}
    1494:	e037883a 	mov	sp,fp
    1498:	dfc00117 	ldw	ra,4(sp)
    149c:	df000017 	ldw	fp,0(sp)
    14a0:	dec00204 	addi	sp,sp,8
    14a4:	f800283a 	ret

000014a8 <render_enemies>:

void render_enemies(enemy *start){
    14a8:	defffc04 	addi	sp,sp,-16
    14ac:	dfc00315 	stw	ra,12(sp)
    14b0:	df000215 	stw	fp,8(sp)
    14b4:	df000204 	addi	fp,sp,8
    14b8:	e13fff15 	stw	r4,-4(fp)
	enemy *em=start;
    14bc:	e0bfff17 	ldw	r2,-4(fp)
    14c0:	e0bffe15 	stw	r2,-8(fp)
	while(em!=NULL){
    14c4:	00000706 	br	14e4 <render_enemies+0x3c>
		render_shadow_enemy(em);
    14c8:	e13ffe17 	ldw	r4,-8(fp)
    14cc:	00014400 	call	1440 <render_shadow_enemy>
		render_enemy(em);
    14d0:	e13ffe17 	ldw	r4,-8(fp)
    14d4:	00015000 	call	1500 <render_enemy>
		em=em->next;
    14d8:	e0bffe17 	ldw	r2,-8(fp)
    14dc:	10800717 	ldw	r2,28(r2)
    14e0:	e0bffe15 	stw	r2,-8(fp)
	}
}

void render_enemies(enemy *start){
	enemy *em=start;
	while(em!=NULL){
    14e4:	e0bffe17 	ldw	r2,-8(fp)
    14e8:	103ff71e 	bne	r2,zero,14c8 <__alt_data_end+0xfffabd98>
		render_shadow_enemy(em);
		render_enemy(em);
		em=em->next;
	}
}
    14ec:	e037883a 	mov	sp,fp
    14f0:	dfc00117 	ldw	ra,4(sp)
    14f4:	df000017 	ldw	fp,0(sp)
    14f8:	dec00204 	addi	sp,sp,8
    14fc:	f800283a 	ret

00001500 <render_enemy>:

void render_enemy(enemy *em){
    1500:	defffd04 	addi	sp,sp,-12
    1504:	dfc00215 	stw	ra,8(sp)
    1508:	df000115 	stw	fp,4(sp)
    150c:	df000104 	addi	fp,sp,4
    1510:	e13fff15 	stw	r4,-4(fp)
	if(em==NULL){
    1514:	e0bfff17 	ldw	r2,-4(fp)
    1518:	1000041e 	bne	r2,zero,152c <render_enemy+0x2c>
		printf("enemy not initialized");
    151c:	01000074 	movhi	r4,1
    1520:	210a5e04 	addi	r4,r4,10616
    1524:	00037f40 	call	37f4 <printf>
    1528:	00000a06 	br	1554 <render_enemy+0x54>
		}
	else{
		renderer(em->x_pos,em->y_pos,em->id,0);
    152c:	e0bfff17 	ldw	r2,-4(fp)
    1530:	11000017 	ldw	r4,0(r2)
    1534:	e0bfff17 	ldw	r2,-4(fp)
    1538:	10c00117 	ldw	r3,4(r2)
    153c:	e0bfff17 	ldw	r2,-4(fp)
    1540:	10800317 	ldw	r2,12(r2)
    1544:	180b883a 	mov	r5,r3
    1548:	100d883a 	mov	r6,r2
    154c:	000f883a 	mov	r7,zero
    1550:	00015680 	call	1568 <renderer>
		}
}
    1554:	e037883a 	mov	sp,fp
    1558:	dfc00117 	ldw	ra,4(sp)
    155c:	df000017 	ldw	fp,0(sp)
    1560:	dec00204 	addi	sp,sp,8
    1564:	f800283a 	ret

00001568 <renderer>:


void renderer(int x, int y, int sprite_num, int is_shadow)
{
    1568:	defffb04 	addi	sp,sp,-20
    156c:	df000415 	stw	fp,16(sp)
    1570:	df000404 	addi	fp,sp,16
    1574:	e13ffc15 	stw	r4,-16(fp)
    1578:	e17ffd15 	stw	r5,-12(fp)
    157c:	e1bffe15 	stw	r6,-8(fp)
    1580:	e1ffff15 	stw	r7,-4(fp)
	if(is_shadow==1)
    1584:	e0bfff17 	ldw	r2,-4(fp)
    1588:	10800058 	cmpnei	r2,r2,1
    158c:	1000051e 	bne	r2,zero,15a4 <renderer+0x3c>
		*sw_to_hw = 4;
    1590:	00800234 	movhi	r2,8
    1594:	10842004 	addi	r2,r2,4224
    1598:	00c00104 	movi	r3,4
    159c:	10c00015 	stw	r3,0(r2)
    15a0:	00000606 	br	15bc <renderer+0x54>
	else
		*sw_to_hw &= 0;
    15a4:	00800234 	movhi	r2,8
    15a8:	10842004 	addi	r2,r2,4224
    15ac:	10800017 	ldw	r2,0(r2)
    15b0:	00800234 	movhi	r2,8
    15b4:	10842004 	addi	r2,r2,4224
    15b8:	10000015 	stw	zero,0(r2)
	*sprite_number = sprite_num;
    15bc:	00800234 	movhi	r2,8
    15c0:	10842804 	addi	r2,r2,4256
    15c4:	e0fffe17 	ldw	r3,-8(fp)
    15c8:	10c00015 	stw	r3,0(r2)
	*sprite_xy = 1024*x + y;
    15cc:	00800234 	movhi	r2,8
    15d0:	10842404 	addi	r2,r2,4240
    15d4:	e0fffc17 	ldw	r3,-16(fp)
    15d8:	180892ba 	slli	r4,r3,10
    15dc:	e0fffd17 	ldw	r3,-12(fp)
    15e0:	20c7883a 	add	r3,r4,r3
    15e4:	10c00015 	stw	r3,0(r2)
	*sw_to_hw |= 2;
    15e8:	00800234 	movhi	r2,8
    15ec:	10842004 	addi	r2,r2,4224
    15f0:	00c00234 	movhi	r3,8
    15f4:	18c42004 	addi	r3,r3,4224
    15f8:	18c00017 	ldw	r3,0(r3)
    15fc:	18c00094 	ori	r3,r3,2
    1600:	10c00015 	stw	r3,0(r2)
	while(*hw_to_sw%2 != 0)
    1604:	0001883a 	nop
    1608:	00800234 	movhi	r2,8
    160c:	10841c04 	addi	r2,r2,4208
    1610:	10800017 	ldw	r2,0(r2)
    1614:	1080004c 	andi	r2,r2,1
    1618:	103ffb1e 	bne	r2,zero,1608 <__alt_data_end+0xfffabed8>
	{}
	*sw_to_hw &= ~2;
    161c:	00800234 	movhi	r2,8
    1620:	10842004 	addi	r2,r2,4224
    1624:	00c00234 	movhi	r3,8
    1628:	18c42004 	addi	r3,r3,4224
    162c:	19000017 	ldw	r4,0(r3)
    1630:	00ffff44 	movi	r3,-3
    1634:	20c6703a 	and	r3,r4,r3
    1638:	10c00015 	stw	r3,0(r2)
	while(*hw_to_sw != 1)
    163c:	0001883a 	nop
    1640:	00800234 	movhi	r2,8
    1644:	10841c04 	addi	r2,r2,4208
    1648:	10800017 	ldw	r2,0(r2)
    164c:	10800058 	cmpnei	r2,r2,1
    1650:	103ffb1e 	bne	r2,zero,1640 <__alt_data_end+0xfffabf10>
	{}
	*sw_to_hw |= 1;
    1654:	00800234 	movhi	r2,8
    1658:	10842004 	addi	r2,r2,4224
    165c:	00c00234 	movhi	r3,8
    1660:	18c42004 	addi	r3,r3,4224
    1664:	18c00017 	ldw	r3,0(r3)
    1668:	18c00054 	ori	r3,r3,1
    166c:	10c00015 	stw	r3,0(r2)
	return;
    1670:	0001883a 	nop
}
    1674:	e037883a 	mov	sp,fp
    1678:	df000017 	ldw	fp,0(sp)
    167c:	dec00104 	addi	sp,sp,4
    1680:	f800283a 	ret

00001684 <render_shadows>:

void render_shadows(player *first,player *second){
    1684:	defffc04 	addi	sp,sp,-16
    1688:	dfc00315 	stw	ra,12(sp)
    168c:	df000215 	stw	fp,8(sp)
    1690:	df000204 	addi	fp,sp,8
    1694:	e13ffe15 	stw	r4,-8(fp)
    1698:	e17fff15 	stw	r5,-4(fp)
	if(first==NULL || second ==NULL){
    169c:	e0bffe17 	ldw	r2,-8(fp)
    16a0:	10000226 	beq	r2,zero,16ac <render_shadows+0x28>
    16a4:	e0bfff17 	ldw	r2,-4(fp)
    16a8:	1000041e 	bne	r2,zero,16bc <render_shadows+0x38>
			printf("players not instantiated");
    16ac:	01000074 	movhi	r4,1
    16b0:	210a5204 	addi	r4,r4,10568
    16b4:	00037f40 	call	37f4 <printf>
    16b8:	00001406 	br	170c <render_shadows+0x88>
	}
	else{
		renderer(first->old_x,first->old_y,first->id,1);
    16bc:	e0bffe17 	ldw	r2,-8(fp)
    16c0:	11000417 	ldw	r4,16(r2)
    16c4:	e0bffe17 	ldw	r2,-8(fp)
    16c8:	10c00517 	ldw	r3,20(r2)
    16cc:	e0bffe17 	ldw	r2,-8(fp)
    16d0:	10800317 	ldw	r2,12(r2)
    16d4:	180b883a 	mov	r5,r3
    16d8:	100d883a 	mov	r6,r2
    16dc:	01c00044 	movi	r7,1
    16e0:	00015680 	call	1568 <renderer>
		renderer(second->old_x,second->old_y,second->id,1);
    16e4:	e0bfff17 	ldw	r2,-4(fp)
    16e8:	11000417 	ldw	r4,16(r2)
    16ec:	e0bfff17 	ldw	r2,-4(fp)
    16f0:	10c00517 	ldw	r3,20(r2)
    16f4:	e0bfff17 	ldw	r2,-4(fp)
    16f8:	10800317 	ldw	r2,12(r2)
    16fc:	180b883a 	mov	r5,r3
    1700:	100d883a 	mov	r6,r2
    1704:	01c00044 	movi	r7,1
    1708:	00015680 	call	1568 <renderer>
	}
	return;
    170c:	0001883a 	nop
}
    1710:	e037883a 	mov	sp,fp
    1714:	dfc00117 	ldw	ra,4(sp)
    1718:	df000017 	ldw	fp,0(sp)
    171c:	dec00204 	addi	sp,sp,8
    1720:	f800283a 	ret

00001724 <render_shadow>:
void render_shadow(player *current){
    1724:	defffd04 	addi	sp,sp,-12
    1728:	dfc00215 	stw	ra,8(sp)
    172c:	df000115 	stw	fp,4(sp)
    1730:	df000104 	addi	fp,sp,4
    1734:	e13fff15 	stw	r4,-4(fp)
	if(current==NULL){
    1738:	e0bfff17 	ldw	r2,-4(fp)
    173c:	1000041e 	bne	r2,zero,1750 <render_shadow+0x2c>
			printf("players not instantiated");
    1740:	01000074 	movhi	r4,1
    1744:	210a5204 	addi	r4,r4,10568
    1748:	00037f40 	call	37f4 <printf>
    174c:	00001206 	br	1798 <render_shadow+0x74>
	}
	else{
		renderer(current->old_x,current->old_y,current->id,1);
    1750:	e0bfff17 	ldw	r2,-4(fp)
    1754:	11000417 	ldw	r4,16(r2)
    1758:	e0bfff17 	ldw	r2,-4(fp)
    175c:	10c00517 	ldw	r3,20(r2)
    1760:	e0bfff17 	ldw	r2,-4(fp)
    1764:	10800317 	ldw	r2,12(r2)
    1768:	180b883a 	mov	r5,r3
    176c:	100d883a 	mov	r6,r2
    1770:	01c00044 	movi	r7,1
    1774:	00015680 	call	1568 <renderer>
		current->old_x=current->x_pos;
    1778:	e0bfff17 	ldw	r2,-4(fp)
    177c:	10c00017 	ldw	r3,0(r2)
    1780:	e0bfff17 	ldw	r2,-4(fp)
    1784:	10c00415 	stw	r3,16(r2)
		current->old_y=current->y_pos;
    1788:	e0bfff17 	ldw	r2,-4(fp)
    178c:	10c00117 	ldw	r3,4(r2)
    1790:	e0bfff17 	ldw	r2,-4(fp)
    1794:	10c00515 	stw	r3,20(r2)
	}
	return;
    1798:	0001883a 	nop
}
    179c:	e037883a 	mov	sp,fp
    17a0:	dfc00117 	ldw	ra,4(sp)
    17a4:	df000017 	ldw	fp,0(sp)
    17a8:	dec00204 	addi	sp,sp,8
    17ac:	f800283a 	ret

000017b0 <render_players>:

void render_players(player *first,player *second){
    17b0:	defffc04 	addi	sp,sp,-16
    17b4:	dfc00315 	stw	ra,12(sp)
    17b8:	df000215 	stw	fp,8(sp)
    17bc:	df000204 	addi	fp,sp,8
    17c0:	e13ffe15 	stw	r4,-8(fp)
    17c4:	e17fff15 	stw	r5,-4(fp)
	if(first==NULL || second ==NULL){
    17c8:	e0bffe17 	ldw	r2,-8(fp)
    17cc:	10000226 	beq	r2,zero,17d8 <render_players+0x28>
    17d0:	e0bfff17 	ldw	r2,-4(fp)
    17d4:	1000041e 	bne	r2,zero,17e8 <render_players+0x38>
		printf("players not instantiated");
    17d8:	01000074 	movhi	r4,1
    17dc:	210a5204 	addi	r4,r4,10568
    17e0:	00037f40 	call	37f4 <printf>
    17e4:	00001e06 	br	1860 <render_players+0xb0>
	}
	else{
		if(render_player_check(first)==0){
    17e8:	e13ffe17 	ldw	r4,-8(fp)
    17ec:	00018740 	call	1874 <render_player_check>
    17f0:	10000c1e 	bne	r2,zero,1824 <render_players+0x74>
			render_shadow(first);
    17f4:	e13ffe17 	ldw	r4,-8(fp)
    17f8:	00017240 	call	1724 <render_shadow>
			renderer(first->x_pos,first->y_pos,first->id,0);
    17fc:	e0bffe17 	ldw	r2,-8(fp)
    1800:	11000017 	ldw	r4,0(r2)
    1804:	e0bffe17 	ldw	r2,-8(fp)
    1808:	10c00117 	ldw	r3,4(r2)
    180c:	e0bffe17 	ldw	r2,-8(fp)
    1810:	10800317 	ldw	r2,12(r2)
    1814:	180b883a 	mov	r5,r3
    1818:	100d883a 	mov	r6,r2
    181c:	000f883a 	mov	r7,zero
    1820:	00015680 	call	1568 <renderer>

		}
		if(render_player_check(second)==0){
    1824:	e13fff17 	ldw	r4,-4(fp)
    1828:	00018740 	call	1874 <render_player_check>
    182c:	10000c1e 	bne	r2,zero,1860 <render_players+0xb0>
			render_shadow(second);
    1830:	e13fff17 	ldw	r4,-4(fp)
    1834:	00017240 	call	1724 <render_shadow>
			renderer(second->x_pos,second->y_pos,second->id,0);
    1838:	e0bfff17 	ldw	r2,-4(fp)
    183c:	11000017 	ldw	r4,0(r2)
    1840:	e0bfff17 	ldw	r2,-4(fp)
    1844:	10c00117 	ldw	r3,4(r2)
    1848:	e0bfff17 	ldw	r2,-4(fp)
    184c:	10800317 	ldw	r2,12(r2)
    1850:	180b883a 	mov	r5,r3
    1854:	100d883a 	mov	r6,r2
    1858:	000f883a 	mov	r7,zero
    185c:	00015680 	call	1568 <renderer>

		}
	}
}
    1860:	e037883a 	mov	sp,fp
    1864:	dfc00117 	ldw	ra,4(sp)
    1868:	df000017 	ldw	fp,0(sp)
    186c:	dec00204 	addi	sp,sp,8
    1870:	f800283a 	ret

00001874 <render_player_check>:
int render_player_check(player *current){
    1874:	defffd04 	addi	sp,sp,-12
    1878:	df000215 	stw	fp,8(sp)
    187c:	df000204 	addi	fp,sp,8
    1880:	e13fff15 	stw	r4,-4(fp)
	int i=0;
    1884:	e03ffe15 	stw	zero,-8(fp)
	if(current->x_pos==current->old_x && current->y_pos==current->old_y){
    1888:	e0bfff17 	ldw	r2,-4(fp)
    188c:	10c00017 	ldw	r3,0(r2)
    1890:	e0bfff17 	ldw	r2,-4(fp)
    1894:	10800417 	ldw	r2,16(r2)
    1898:	1880071e 	bne	r3,r2,18b8 <render_player_check+0x44>
    189c:	e0bfff17 	ldw	r2,-4(fp)
    18a0:	10c00117 	ldw	r3,4(r2)
    18a4:	e0bfff17 	ldw	r2,-4(fp)
    18a8:	10800517 	ldw	r2,20(r2)
    18ac:	1880021e 	bne	r3,r2,18b8 <render_player_check+0x44>
		i=1;
    18b0:	00800044 	movi	r2,1
    18b4:	e0bffe15 	stw	r2,-8(fp)
	}
	return i;
    18b8:	e0bffe17 	ldw	r2,-8(fp)
}
    18bc:	e037883a 	mov	sp,fp
    18c0:	df000017 	ldw	fp,0(sp)
    18c4:	dec00104 	addi	sp,sp,4
    18c8:	f800283a 	ret

000018cc <keycode_effect>:
//	if(current->x_pos==current->old_x && current->y_pos==current->old_y){
//		i=1;
//	}
//	return i;
//}
int keycode_effect(player *first,player *second,unsigned int *arr){
    18cc:	defff904 	addi	sp,sp,-28
    18d0:	dfc00615 	stw	ra,24(sp)
    18d4:	df000515 	stw	fp,20(sp)
    18d8:	df000504 	addi	fp,sp,20
    18dc:	e13ffd15 	stw	r4,-12(fp)
    18e0:	e17ffe15 	stw	r5,-8(fp)
    18e4:	e1bfff15 	stw	r6,-4(fp)
	int i=0;
    18e8:	e03ffb15 	stw	zero,-20(fp)
	int j=0;
    18ec:	e03ffc15 	stw	zero,-16(fp)
	for(i=0;i<4;i++){
    18f0:	e03ffb15 	stw	zero,-20(fp)
    18f4:	00006906 	br	1a9c <keycode_effect+0x1d0>
		if(arr[i]==0x04){
    18f8:	e0bffb17 	ldw	r2,-20(fp)
    18fc:	1085883a 	add	r2,r2,r2
    1900:	1085883a 	add	r2,r2,r2
    1904:	1007883a 	mov	r3,r2
    1908:	e0bfff17 	ldw	r2,-4(fp)
    190c:	10c5883a 	add	r2,r2,r3
    1910:	10800017 	ldw	r2,0(r2)
    1914:	10800118 	cmpnei	r2,r2,4
    1918:	10000b1e 	bne	r2,zero,1948 <keycode_effect+0x7c>
			j=1;
    191c:	00800044 	movi	r2,1
    1920:	e0bffc15 	stw	r2,-16(fp)
			move_player(first,first->x_pos-5,first->y_pos);
    1924:	e0bffd17 	ldw	r2,-12(fp)
    1928:	10800017 	ldw	r2,0(r2)
    192c:	10fffec4 	addi	r3,r2,-5
    1930:	e0bffd17 	ldw	r2,-12(fp)
    1934:	10800117 	ldw	r2,4(r2)
    1938:	e13ffd17 	ldw	r4,-12(fp)
    193c:	180b883a 	mov	r5,r3
    1940:	100d883a 	mov	r6,r2
    1944:	0001b500 	call	1b50 <move_player>
		}
		if(arr[i]==0x07){
    1948:	e0bffb17 	ldw	r2,-20(fp)
    194c:	1085883a 	add	r2,r2,r2
    1950:	1085883a 	add	r2,r2,r2
    1954:	1007883a 	mov	r3,r2
    1958:	e0bfff17 	ldw	r2,-4(fp)
    195c:	10c5883a 	add	r2,r2,r3
    1960:	10800017 	ldw	r2,0(r2)
    1964:	108001d8 	cmpnei	r2,r2,7
    1968:	10000b1e 	bne	r2,zero,1998 <keycode_effect+0xcc>
			j=1;
    196c:	00800044 	movi	r2,1
    1970:	e0bffc15 	stw	r2,-16(fp)
			move_player(first,first->x_pos+5,first->y_pos);
    1974:	e0bffd17 	ldw	r2,-12(fp)
    1978:	10800017 	ldw	r2,0(r2)
    197c:	10c00144 	addi	r3,r2,5
    1980:	e0bffd17 	ldw	r2,-12(fp)
    1984:	10800117 	ldw	r2,4(r2)
    1988:	e13ffd17 	ldw	r4,-12(fp)
    198c:	180b883a 	mov	r5,r3
    1990:	100d883a 	mov	r6,r2
    1994:	0001b500 	call	1b50 <move_player>
		}
		if(arr[i]==0x1a){
    1998:	e0bffb17 	ldw	r2,-20(fp)
    199c:	1085883a 	add	r2,r2,r2
    19a0:	1085883a 	add	r2,r2,r2
    19a4:	1007883a 	mov	r3,r2
    19a8:	e0bfff17 	ldw	r2,-4(fp)
    19ac:	10c5883a 	add	r2,r2,r3
    19b0:	10800017 	ldw	r2,0(r2)
    19b4:	10800698 	cmpnei	r2,r2,26
    19b8:	1000021e 	bne	r2,zero,19c4 <keycode_effect+0xf8>
			j=1;
    19bc:	00800044 	movi	r2,1
    19c0:	e0bffc15 	stw	r2,-16(fp)
//			fire_projectile(first);
		}
		if(arr[i]==0x50){
    19c4:	e0bffb17 	ldw	r2,-20(fp)
    19c8:	1085883a 	add	r2,r2,r2
    19cc:	1085883a 	add	r2,r2,r2
    19d0:	1007883a 	mov	r3,r2
    19d4:	e0bfff17 	ldw	r2,-4(fp)
    19d8:	10c5883a 	add	r2,r2,r3
    19dc:	10800017 	ldw	r2,0(r2)
    19e0:	10801418 	cmpnei	r2,r2,80
    19e4:	10000b1e 	bne	r2,zero,1a14 <keycode_effect+0x148>
			j=1;
    19e8:	00800044 	movi	r2,1
    19ec:	e0bffc15 	stw	r2,-16(fp)
			move_player(second,second->x_pos-5,second->y_pos);
    19f0:	e0bffe17 	ldw	r2,-8(fp)
    19f4:	10800017 	ldw	r2,0(r2)
    19f8:	10fffec4 	addi	r3,r2,-5
    19fc:	e0bffe17 	ldw	r2,-8(fp)
    1a00:	10800117 	ldw	r2,4(r2)
    1a04:	e13ffe17 	ldw	r4,-8(fp)
    1a08:	180b883a 	mov	r5,r3
    1a0c:	100d883a 	mov	r6,r2
    1a10:	0001b500 	call	1b50 <move_player>
		}
		if(arr[i]==0x4f){
    1a14:	e0bffb17 	ldw	r2,-20(fp)
    1a18:	1085883a 	add	r2,r2,r2
    1a1c:	1085883a 	add	r2,r2,r2
    1a20:	1007883a 	mov	r3,r2
    1a24:	e0bfff17 	ldw	r2,-4(fp)
    1a28:	10c5883a 	add	r2,r2,r3
    1a2c:	10800017 	ldw	r2,0(r2)
    1a30:	108013d8 	cmpnei	r2,r2,79
    1a34:	10000b1e 	bne	r2,zero,1a64 <keycode_effect+0x198>
			j=1;
    1a38:	00800044 	movi	r2,1
    1a3c:	e0bffc15 	stw	r2,-16(fp)
			move_player(second,second->x_pos+5,second->y_pos);
    1a40:	e0bffe17 	ldw	r2,-8(fp)
    1a44:	10800017 	ldw	r2,0(r2)
    1a48:	10c00144 	addi	r3,r2,5
    1a4c:	e0bffe17 	ldw	r2,-8(fp)
    1a50:	10800117 	ldw	r2,4(r2)
    1a54:	e13ffe17 	ldw	r4,-8(fp)
    1a58:	180b883a 	mov	r5,r3
    1a5c:	100d883a 	mov	r6,r2
    1a60:	0001b500 	call	1b50 <move_player>
		}
		if(arr[i]==0x52){
    1a64:	e0bffb17 	ldw	r2,-20(fp)
    1a68:	1085883a 	add	r2,r2,r2
    1a6c:	1085883a 	add	r2,r2,r2
    1a70:	1007883a 	mov	r3,r2
    1a74:	e0bfff17 	ldw	r2,-4(fp)
    1a78:	10c5883a 	add	r2,r2,r3
    1a7c:	10800017 	ldw	r2,0(r2)
    1a80:	10801498 	cmpnei	r2,r2,82
    1a84:	1000021e 	bne	r2,zero,1a90 <keycode_effect+0x1c4>
			j=1;
    1a88:	00800044 	movi	r2,1
    1a8c:	e0bffc15 	stw	r2,-16(fp)
//	return i;
//}
int keycode_effect(player *first,player *second,unsigned int *arr){
	int i=0;
	int j=0;
	for(i=0;i<4;i++){
    1a90:	e0bffb17 	ldw	r2,-20(fp)
    1a94:	10800044 	addi	r2,r2,1
    1a98:	e0bffb15 	stw	r2,-20(fp)
    1a9c:	e0bffb17 	ldw	r2,-20(fp)
    1aa0:	10800110 	cmplti	r2,r2,4
    1aa4:	103f941e 	bne	r2,zero,18f8 <__alt_data_end+0xfffac1c8>
		if(arr[i]==0x52){
			j=1;
//			fire_projectile(second);
		}
	}
	return j;
    1aa8:	e0bffc17 	ldw	r2,-16(fp)
}
    1aac:	e037883a 	mov	sp,fp
    1ab0:	dfc00117 	ldw	ra,4(sp)
    1ab4:	df000017 	ldw	fp,0(sp)
    1ab8:	dec00204 	addi	sp,sp,8
    1abc:	f800283a 	ret

00001ac0 <parse_keycode>:
void parse_keycode(unsigned int *arr,unsigned int keycode1,unsigned int keycode2){
    1ac0:	defffc04 	addi	sp,sp,-16
    1ac4:	df000315 	stw	fp,12(sp)
    1ac8:	df000304 	addi	fp,sp,12
    1acc:	e13ffd15 	stw	r4,-12(fp)
    1ad0:	e17ffe15 	stw	r5,-8(fp)
    1ad4:	e1bfff15 	stw	r6,-4(fp)
	arr[0]=keycode1%256;
    1ad8:	e0bffe17 	ldw	r2,-8(fp)
    1adc:	10c03fcc 	andi	r3,r2,255
    1ae0:	e0bffd17 	ldw	r2,-12(fp)
    1ae4:	10c00015 	stw	r3,0(r2)
	arr[1]=keycode1/256;
    1ae8:	e0bffd17 	ldw	r2,-12(fp)
    1aec:	10800104 	addi	r2,r2,4
    1af0:	e0fffe17 	ldw	r3,-8(fp)
    1af4:	1806d23a 	srli	r3,r3,8
    1af8:	10c00015 	stw	r3,0(r2)
	arr[2]=keycode2%256;
    1afc:	e0bffd17 	ldw	r2,-12(fp)
    1b00:	10800204 	addi	r2,r2,8
    1b04:	e0ffff17 	ldw	r3,-4(fp)
    1b08:	18c03fcc 	andi	r3,r3,255
    1b0c:	10c00015 	stw	r3,0(r2)
	arr[3]=keycode2/256;
    1b10:	e0bffd17 	ldw	r2,-12(fp)
    1b14:	10800304 	addi	r2,r2,12
    1b18:	e0ffff17 	ldw	r3,-4(fp)
    1b1c:	1806d23a 	srli	r3,r3,8
    1b20:	10c00015 	stw	r3,0(r2)
}
    1b24:	e037883a 	mov	sp,fp
    1b28:	df000017 	ldw	fp,0(sp)
    1b2c:	dec00104 	addi	sp,sp,4
    1b30:	f800283a 	ret

00001b34 <check_projectiles>:
//		projectiles=new;
//	}
//}

void check_projectiles()
{
    1b34:	deffff04 	addi	sp,sp,-4
    1b38:	df000015 	stw	fp,0(sp)
    1b3c:	d839883a 	mov	fp,sp

}
    1b40:	e037883a 	mov	sp,fp
    1b44:	df000017 	ldw	fp,0(sp)
    1b48:	dec00104 	addi	sp,sp,4
    1b4c:	f800283a 	ret

00001b50 <move_player>:

void move_player(player *current, int x_pos, int y_pos){
    1b50:	defff904 	addi	sp,sp,-28
    1b54:	dfc00615 	stw	ra,24(sp)
    1b58:	df000515 	stw	fp,20(sp)
    1b5c:	df000504 	addi	fp,sp,20
    1b60:	e13ffd15 	stw	r4,-12(fp)
    1b64:	e17ffe15 	stw	r5,-8(fp)
    1b68:	e1bfff15 	stw	r6,-4(fp)
	if(current==NULL)
    1b6c:	e0bffd17 	ldw	r2,-12(fp)
    1b70:	1000041e 	bne	r2,zero,1b84 <move_player+0x34>
		{
			printf("players not instantiated");
    1b74:	01000074 	movhi	r4,1
    1b78:	210a5204 	addi	r4,r4,10568
    1b7c:	00037f40 	call	37f4 <printf>
    1b80:	00003506 	br	1c58 <move_player+0x108>
		}
	else{
		int width = sizes[current->id][0];
    1b84:	e0bffd17 	ldw	r2,-12(fp)
    1b88:	10c00317 	ldw	r3,12(r2)
    1b8c:	00800074 	movhi	r2,1
    1b90:	108b4104 	addi	r2,r2,11524
    1b94:	180690fa 	slli	r3,r3,3
    1b98:	10c5883a 	add	r2,r2,r3
    1b9c:	10800017 	ldw	r2,0(r2)
    1ba0:	e0bffb15 	stw	r2,-20(fp)
		int height = sizes[current->id][1];
    1ba4:	e0bffd17 	ldw	r2,-12(fp)
    1ba8:	10c00317 	ldw	r3,12(r2)
    1bac:	00800074 	movhi	r2,1
    1bb0:	108b4104 	addi	r2,r2,11524
    1bb4:	180690fa 	slli	r3,r3,3
    1bb8:	10c5883a 	add	r2,r2,r3
    1bbc:	10800104 	addi	r2,r2,4
    1bc0:	10800017 	ldw	r2,0(r2)
    1bc4:	e0bffc15 	stw	r2,-16(fp)
		current->x_pos = x_pos;
    1bc8:	e0bffd17 	ldw	r2,-12(fp)
    1bcc:	e0fffe17 	ldw	r3,-8(fp)
    1bd0:	10c00015 	stw	r3,0(r2)
		current->y_pos = y_pos;
    1bd4:	e0bffd17 	ldw	r2,-12(fp)
    1bd8:	e0ffff17 	ldw	r3,-4(fp)
    1bdc:	10c00115 	stw	r3,4(r2)
		if((x_pos + width)> x_bounds)
    1be0:	e0fffe17 	ldw	r3,-8(fp)
    1be4:	e0bffb17 	ldw	r2,-20(fp)
    1be8:	1885883a 	add	r2,r3,r2
    1bec:	1080a010 	cmplti	r2,r2,640
    1bf0:	1000061e 	bne	r2,zero,1c0c <move_player+0xbc>
			current->x_pos = x_bounds - width;
    1bf4:	00c09fc4 	movi	r3,639
    1bf8:	e0bffb17 	ldw	r2,-20(fp)
    1bfc:	1887c83a 	sub	r3,r3,r2
    1c00:	e0bffd17 	ldw	r2,-12(fp)
    1c04:	10c00015 	stw	r3,0(r2)
    1c08:	00000406 	br	1c1c <move_player+0xcc>
		else if(x_pos < 0)
    1c0c:	e0bffe17 	ldw	r2,-8(fp)
    1c10:	1000020e 	bge	r2,zero,1c1c <move_player+0xcc>
		{
			current->x_pos = 0;
    1c14:	e0bffd17 	ldw	r2,-12(fp)
    1c18:	10000015 	stw	zero,0(r2)
		}
		if((y_pos + height) > y_bounds)
    1c1c:	e0ffff17 	ldw	r3,-4(fp)
    1c20:	e0bffc17 	ldw	r2,-16(fp)
    1c24:	1885883a 	add	r2,r3,r2
    1c28:	10807810 	cmplti	r2,r2,480
    1c2c:	1000061e 	bne	r2,zero,1c48 <move_player+0xf8>
			current->y_pos = y_bounds - height;
    1c30:	00c077c4 	movi	r3,479
    1c34:	e0bffc17 	ldw	r2,-16(fp)
    1c38:	1887c83a 	sub	r3,r3,r2
    1c3c:	e0bffd17 	ldw	r2,-12(fp)
    1c40:	10c00115 	stw	r3,4(r2)
    1c44:	00000406 	br	1c58 <move_player+0x108>
		else if(y_pos < 0)
    1c48:	e0bfff17 	ldw	r2,-4(fp)
    1c4c:	1000020e 	bge	r2,zero,1c58 <move_player+0x108>
		{
			current->y_pos = 0;
    1c50:	e0bffd17 	ldw	r2,-12(fp)
    1c54:	10000115 	stw	zero,4(r2)
		}
	}
}
    1c58:	e037883a 	mov	sp,fp
    1c5c:	dfc00117 	ldw	ra,4(sp)
    1c60:	df000017 	ldw	fp,0(sp)
    1c64:	dec00204 	addi	sp,sp,8
    1c68:	f800283a 	ret

00001c6c <move_enemy>:

void move_enemy(enemy *current, int x_pos, int y_pos){
    1c6c:	defff904 	addi	sp,sp,-28
    1c70:	dfc00615 	stw	ra,24(sp)
    1c74:	df000515 	stw	fp,20(sp)
    1c78:	df000504 	addi	fp,sp,20
    1c7c:	e13ffd15 	stw	r4,-12(fp)
    1c80:	e17ffe15 	stw	r5,-8(fp)
    1c84:	e1bfff15 	stw	r6,-4(fp)
	if(current==NULL)
    1c88:	e0bffd17 	ldw	r2,-12(fp)
    1c8c:	1000041e 	bne	r2,zero,1ca0 <move_enemy+0x34>
		{
			printf("players not instantiated");
    1c90:	01000074 	movhi	r4,1
    1c94:	210a5204 	addi	r4,r4,10568
    1c98:	00037f40 	call	37f4 <printf>
    1c9c:	00003506 	br	1d74 <move_enemy+0x108>
		}
	else{
		int width = sizes[current->id][0];
    1ca0:	e0bffd17 	ldw	r2,-12(fp)
    1ca4:	10c00317 	ldw	r3,12(r2)
    1ca8:	00800074 	movhi	r2,1
    1cac:	108b4104 	addi	r2,r2,11524
    1cb0:	180690fa 	slli	r3,r3,3
    1cb4:	10c5883a 	add	r2,r2,r3
    1cb8:	10800017 	ldw	r2,0(r2)
    1cbc:	e0bffb15 	stw	r2,-20(fp)
		int height = sizes[current->id][1];
    1cc0:	e0bffd17 	ldw	r2,-12(fp)
    1cc4:	10c00317 	ldw	r3,12(r2)
    1cc8:	00800074 	movhi	r2,1
    1ccc:	108b4104 	addi	r2,r2,11524
    1cd0:	180690fa 	slli	r3,r3,3
    1cd4:	10c5883a 	add	r2,r2,r3
    1cd8:	10800104 	addi	r2,r2,4
    1cdc:	10800017 	ldw	r2,0(r2)
    1ce0:	e0bffc15 	stw	r2,-16(fp)
		current->x_pos = x_pos;
    1ce4:	e0bffd17 	ldw	r2,-12(fp)
    1ce8:	e0fffe17 	ldw	r3,-8(fp)
    1cec:	10c00015 	stw	r3,0(r2)
		current->y_pos = y_pos;
    1cf0:	e0bffd17 	ldw	r2,-12(fp)
    1cf4:	e0ffff17 	ldw	r3,-4(fp)
    1cf8:	10c00115 	stw	r3,4(r2)
		if((x_pos + width)> x_bounds)
    1cfc:	e0fffe17 	ldw	r3,-8(fp)
    1d00:	e0bffb17 	ldw	r2,-20(fp)
    1d04:	1885883a 	add	r2,r3,r2
    1d08:	1080a010 	cmplti	r2,r2,640
    1d0c:	1000061e 	bne	r2,zero,1d28 <move_enemy+0xbc>
			current->x_pos = x_bounds - width;
    1d10:	00c09fc4 	movi	r3,639
    1d14:	e0bffb17 	ldw	r2,-20(fp)
    1d18:	1887c83a 	sub	r3,r3,r2
    1d1c:	e0bffd17 	ldw	r2,-12(fp)
    1d20:	10c00015 	stw	r3,0(r2)
    1d24:	00000406 	br	1d38 <move_enemy+0xcc>
		else if(x_pos < 0)
    1d28:	e0bffe17 	ldw	r2,-8(fp)
    1d2c:	1000020e 	bge	r2,zero,1d38 <move_enemy+0xcc>
		{
			current->x_pos = 0;
    1d30:	e0bffd17 	ldw	r2,-12(fp)
    1d34:	10000015 	stw	zero,0(r2)
		}
		if((y_pos + height) > y_bounds)
    1d38:	e0ffff17 	ldw	r3,-4(fp)
    1d3c:	e0bffc17 	ldw	r2,-16(fp)
    1d40:	1885883a 	add	r2,r3,r2
    1d44:	10807810 	cmplti	r2,r2,480
    1d48:	1000061e 	bne	r2,zero,1d64 <move_enemy+0xf8>
			current->y_pos = y_bounds - height;
    1d4c:	00c077c4 	movi	r3,479
    1d50:	e0bffc17 	ldw	r2,-16(fp)
    1d54:	1887c83a 	sub	r3,r3,r2
    1d58:	e0bffd17 	ldw	r2,-12(fp)
    1d5c:	10c00115 	stw	r3,4(r2)
    1d60:	00000406 	br	1d74 <move_enemy+0x108>
		else if(y_pos < 0)
    1d64:	e0bfff17 	ldw	r2,-4(fp)
    1d68:	1000020e 	bge	r2,zero,1d74 <move_enemy+0x108>
		{
			current->y_pos = 0;
    1d6c:	e0bffd17 	ldw	r2,-12(fp)
    1d70:	10000115 	stw	zero,4(r2)
		}
	}
}
    1d74:	e037883a 	mov	sp,fp
    1d78:	dfc00117 	ldw	ra,4(sp)
    1d7c:	df000017 	ldw	fp,0(sp)
    1d80:	dec00204 	addi	sp,sp,8
    1d84:	f800283a 	ret

00001d88 <UsbWrite>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbWrite(alt_u16 Address, alt_u16 Data)
{
    1d88:	defffc04 	addi	sp,sp,-16
    1d8c:	dfc00315 	stw	ra,12(sp)
    1d90:	df000215 	stw	fp,8(sp)
    1d94:	df000204 	addi	fp,sp,8
    1d98:	2007883a 	mov	r3,r4
    1d9c:	2805883a 	mov	r2,r5
    1da0:	e0fffe0d 	sth	r3,-8(fp)
    1da4:	e0bfff0d 	sth	r2,-4(fp)
	IO_write(HPI_ADDR_PORT, Address);
    1da8:	e0bffe0b 	ldhu	r2,-8(fp)
    1dac:	01000084 	movi	r4,2
    1db0:	100b883a 	mov	r5,r2
    1db4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA_PORT, Data);
    1db8:	e0bfff0b 	ldhu	r2,-4(fp)
    1dbc:	0009883a 	mov	r4,zero
    1dc0:	100b883a 	mov	r5,r2
    1dc4:	00002c80 	call	2c8 <IO_write>
}
    1dc8:	e037883a 	mov	sp,fp
    1dcc:	dfc00117 	ldw	ra,4(sp)
    1dd0:	df000017 	ldw	fp,0(sp)
    1dd4:	dec00204 	addi	sp,sp,8
    1dd8:	f800283a 	ret

00001ddc <UsbRead>:
 *
 * @note     None
 *
 ******************************************************************************/
alt_u16 UsbRead(alt_u16 Address)
{
    1ddc:	defffd04 	addi	sp,sp,-12
    1de0:	dfc00215 	stw	ra,8(sp)
    1de4:	df000115 	stw	fp,4(sp)
    1de8:	df000104 	addi	fp,sp,4
    1dec:	2005883a 	mov	r2,r4
    1df0:	e0bfff0d 	sth	r2,-4(fp)
	IO_write(HPI_ADDR_PORT, Address);
    1df4:	e0bfff0b 	ldhu	r2,-4(fp)
    1df8:	01000084 	movi	r4,2
    1dfc:	100b883a 	mov	r5,r2
    1e00:	00002c80 	call	2c8 <IO_write>
	return IO_read(HPI_DATA_PORT);
    1e04:	0009883a 	mov	r4,zero
    1e08:	00003300 	call	330 <IO_read>
}
    1e0c:	e037883a 	mov	sp,fp
    1e10:	dfc00117 	ldw	ra,4(sp)
    1e14:	df000017 	ldw	fp,0(sp)
    1e18:	dec00204 	addi	sp,sp,8
    1e1c:	f800283a 	ret

00001e20 <UsbSoftReset>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbSoftReset()
{
    1e20:	defffe04 	addi	sp,sp,-8
    1e24:	dfc00115 	stw	ra,4(sp)
    1e28:	df000015 	stw	fp,0(sp)
    1e2c:	d839883a 	mov	fp,sp
	//XIo_Out16(USB_MAILBOX, COMM_RESET);
	IO_write(HPI_MAILBOX,COMM_RESET); //COMM_JUMP2CODE
    1e30:	01000044 	movi	r4,1
    1e34:	017e9414 	movui	r5,64080
    1e38:	00002c80 	call	2c8 <IO_write>
	usleep(100000);
    1e3c:	010000b4 	movhi	r4,2
    1e40:	2121a804 	addi	r4,r4,-31072
    1e44:	00102840 	call	10284 <usleep>
	printf("[USB INIT]:reset finished!\n");
    1e48:	01000074 	movhi	r4,1
    1e4c:	210a6404 	addi	r4,r4,10640
    1e50:	00038e80 	call	38e8 <puts>

	usleep(500000);
    1e54:	01000234 	movhi	r4,8
    1e58:	21284804 	addi	r4,r4,-24288
    1e5c:	00102840 	call	10284 <usleep>
	printf("[USB INIT]:Clear up the interrupt\r\n");
    1e60:	01000074 	movhi	r4,1
    1e64:	210a6b04 	addi	r4,r4,10668
    1e68:	00038e80 	call	38e8 <puts>
	IO_read(HPI_MAILBOX);
    1e6c:	01000044 	movi	r4,1
    1e70:	00003300 	call	330 <IO_read>
	IO_read(HPI_STATUS);
    1e74:	010000c4 	movi	r4,3
    1e78:	00003300 	call	330 <IO_read>

	// Had to add the write due to a bug in BIOS where they overwrite
	// the mailbox after initialization with garbage.  The read clears
	// any pending interrupts.
	UsbRead (HPI_SIE1_MSG_ADR);
    1e7c:	01005104 	movi	r4,324
    1e80:	0001ddc0 	call	1ddc <UsbRead>
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
    1e84:	01005104 	movi	r4,324
    1e88:	000b883a 	mov	r5,zero
    1e8c:	0001d880 	call	1d88 <UsbWrite>
	UsbRead (HPI_SIE2_MSG_ADR);
    1e90:	01005204 	movi	r4,328
    1e94:	0001ddc0 	call	1ddc <UsbRead>
	UsbWrite (HPI_SIE2_MSG_ADR, 0);
    1e98:	01005204 	movi	r4,328
    1e9c:	000b883a 	mov	r5,zero
    1ea0:	0001d880 	call	1d88 <UsbWrite>


	UsbWrite (HOST1_STAT_REG, 0xFFFF);
    1ea4:	01302414 	movui	r4,49296
    1ea8:	017fffd4 	movui	r5,65535
    1eac:	0001d880 	call	1d88 <UsbWrite>
	UsbWrite (HOST2_STAT_REG, 0xFFFF);
    1eb0:	01302c14 	movui	r4,49328
    1eb4:	017fffd4 	movui	r5,65535
    1eb8:	0001d880 	call	1d88 <UsbWrite>
}
    1ebc:	e037883a 	mov	sp,fp
    1ec0:	dfc00117 	ldw	ra,4(sp)
    1ec4:	df000017 	ldw	fp,0(sp)
    1ec8:	dec00204 	addi	sp,sp,8
    1ecc:	f800283a 	ret

00001ed0 <UsbSetAddress>:


void UsbSetAddress()
{
    1ed0:	defffe04 	addi	sp,sp,-8
    1ed4:	dfc00115 	stw	ra,4(sp)
    1ed8:	df000015 	stw	fp,0(sp)
    1edc:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    1ee0:	01000084 	movi	r4,2
    1ee4:	01414004 	movi	r5,1280
    1ee8:	00002c80 	call	2c8 <IO_write>
	// TD #1: 6 writes
	IO_write(HPI_DATA,0x050C);
    1eec:	0009883a 	mov	r4,zero
    1ef0:	01414304 	movi	r5,1292
    1ef4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    1ef8:	0009883a 	mov	r4,zero
    1efc:	01400204 	movi	r5,8
    1f00:	00002c80 	call	2c8 <IO_write>
	// TASK: Complete with 4 more IOWR functions
	IO_write(HPI_DATA,0x00D0);
    1f04:	0009883a 	mov	r4,zero
    1f08:	01403404 	movi	r5,208
    1f0c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);
    1f10:	0009883a 	mov	r4,zero
    1f14:	01400044 	movi	r5,1
    1f18:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    1f1c:	0009883a 	mov	r4,zero
    1f20:	014004c4 	movi	r5,19
    1f24:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0514);
    1f28:	0009883a 	mov	r4,zero
    1f2c:	01414504 	movi	r5,1300
    1f30:	00002c80 	call	2c8 <IO_write>
	// TD #2: 4 writes
	// TASK: Complete with 4 IOWR functions
	IO_write(HPI_DATA,0x0500);
    1f34:	0009883a 	mov	r4,zero
    1f38:	01414004 	movi	r5,1280
    1f3c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0002);
    1f40:	0009883a 	mov	r4,zero
    1f44:	01400084 	movi	r5,2
    1f48:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    1f4c:	0009883a 	mov	r4,zero
    1f50:	000b883a 	mov	r5,zero
    1f54:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    1f58:	0009883a 	mov	r4,zero
    1f5c:	000b883a 	mov	r5,zero
    1f60:	00002c80 	call	2c8 <IO_write>
	// TD #3: 6 writes
	// TASK: Complete with 6 IOWR functions
	IO_write(HPI_DATA,0x0000); //
    1f64:	0009883a 	mov	r4,zero
    1f68:	000b883a 	mov	r5,zero
    1f6c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//
    1f70:	0009883a 	mov	r4,zero
    1f74:	000b883a 	mov	r5,zero
    1f78:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0090);//
    1f7c:	0009883a 	mov	r4,zero
    1f80:	01402404 	movi	r5,144
    1f84:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);
    1f88:	0009883a 	mov	r4,zero
    1f8c:	01401044 	movi	r5,65
    1f90:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    1f94:	0009883a 	mov	r4,zero
    1f98:	014004c4 	movi	r5,19
    1f9c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    1fa0:	0009883a 	mov	r4,zero
    1fa4:	000b883a 	mov	r5,zero
    1fa8:	00002c80 	call	2c8 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    1fac:	01006c04 	movi	r4,432
    1fb0:	01414004 	movi	r5,1280
    1fb4:	0001d880 	call	1d88 <UsbWrite>
}
    1fb8:	e037883a 	mov	sp,fp
    1fbc:	dfc00117 	ldw	ra,4(sp)
    1fc0:	df000017 	ldw	fp,0(sp)
    1fc4:	dec00204 	addi	sp,sp,8
    1fc8:	f800283a 	ret

00001fcc <UsbGetDeviceDesc1>:


void UsbGetDeviceDesc1()
{
    1fcc:	defffe04 	addi	sp,sp,-8
    1fd0:	dfc00115 	stw	ra,4(sp)
    1fd4:	df000015 	stw	fp,0(sp)
    1fd8:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    1fdc:	01000084 	movi	r4,2
    1fe0:	01414004 	movi	r5,1280
    1fe4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x050C);
    1fe8:	0009883a 	mov	r4,zero
    1fec:	01414304 	movi	r5,1292
    1ff0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    1ff4:	0009883a 	mov	r4,zero
    1ff8:	01400204 	movi	r5,8
    1ffc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    2000:	0009883a 	mov	r4,zero
    2004:	0140b404 	movi	r5,720
    2008:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);
    200c:	0009883a 	mov	r4,zero
    2010:	01400044 	movi	r5,1
    2014:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    2018:	0009883a 	mov	r4,zero
    201c:	014004c4 	movi	r5,19
    2020:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0514);
    2024:	0009883a 	mov	r4,zero
    2028:	01414504 	movi	r5,1300
    202c:	00002c80 	call	2c8 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
    2030:	0009883a 	mov	r4,zero
    2034:	0141a004 	movi	r5,1664
    2038:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0100); //device 0x01
    203c:	0009883a 	mov	r4,zero
    2040:	01404004 	movi	r5,256
    2044:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    2048:	0009883a 	mov	r4,zero
    204c:	000b883a 	mov	r5,zero
    2050:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);
    2054:	0009883a 	mov	r4,zero
    2058:	01400204 	movi	r5,8
    205c:	00002c80 	call	2c8 <IO_write>

	//data phase IN
	IO_write(HPI_DATA,0x052C); //
    2060:	0009883a 	mov	r4,zero
    2064:	01414b04 	movi	r5,1324
    2068:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//
    206c:	0009883a 	mov	r4,zero
    2070:	01400204 	movi	r5,8
    2074:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//
    2078:	0009883a 	mov	r4,zero
    207c:	0140a404 	movi	r5,656
    2080:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);
    2084:	0009883a 	mov	r4,zero
    2088:	01401044 	movi	r5,65
    208c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    2090:	0009883a 	mov	r4,zero
    2094:	014004c4 	movi	r5,19
    2098:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0520);
    209c:	0009883a 	mov	r4,zero
    20a0:	01414804 	movi	r5,1312
    20a4:	00002c80 	call	2c8 <IO_write>

	//    //status phase
	IO_write(HPI_DATA,0x0000); //don't care
    20a8:	0009883a 	mov	r4,zero
    20ac:	000b883a 	mov	r5,zero
    20b0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
    20b4:	0009883a 	mov	r4,zero
    20b8:	000b883a 	mov	r5,zero
    20bc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0210);//device address
    20c0:	0009883a 	mov	r4,zero
    20c4:	01408404 	movi	r5,528
    20c8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);
    20cc:	0009883a 	mov	r4,zero
    20d0:	01401044 	movi	r5,65
    20d4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    20d8:	0009883a 	mov	r4,zero
    20dc:	014004c4 	movi	r5,19
    20e0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    20e4:	0009883a 	mov	r4,zero
    20e8:	000b883a 	mov	r5,zero
    20ec:	00002c80 	call	2c8 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    20f0:	01006c04 	movi	r4,432
    20f4:	01414004 	movi	r5,1280
    20f8:	0001d880 	call	1d88 <UsbWrite>
}
    20fc:	e037883a 	mov	sp,fp
    2100:	dfc00117 	ldw	ra,4(sp)
    2104:	df000017 	ldw	fp,0(sp)
    2108:	dec00204 	addi	sp,sp,8
    210c:	f800283a 	ret

00002110 <UsbGetDeviceDesc2>:

void UsbGetDeviceDesc2()
{
    2110:	defffe04 	addi	sp,sp,-8
    2114:	dfc00115 	stw	ra,4(sp)
    2118:	df000015 	stw	fp,0(sp)
    211c:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    2120:	01000084 	movi	r4,2
    2124:	01414004 	movi	r5,1280
    2128:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x050C);
    212c:	0009883a 	mov	r4,zero
    2130:	01414304 	movi	r5,1292
    2134:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    2138:	0009883a 	mov	r4,zero
    213c:	01400204 	movi	r5,8
    2140:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    2144:	0009883a 	mov	r4,zero
    2148:	0140b404 	movi	r5,720
    214c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);
    2150:	0009883a 	mov	r4,zero
    2154:	01400044 	movi	r5,1
    2158:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    215c:	0009883a 	mov	r4,zero
    2160:	014004c4 	movi	r5,19
    2164:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0514);
    2168:	0009883a 	mov	r4,zero
    216c:	01414504 	movi	r5,1300
    2170:	00002c80 	call	2c8 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
    2174:	0009883a 	mov	r4,zero
    2178:	0141a004 	movi	r5,1664
    217c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0100);//e //device 0x01
    2180:	0009883a 	mov	r4,zero
    2184:	01404004 	movi	r5,256
    2188:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    218c:	0009883a 	mov	r4,zero
    2190:	000b883a 	mov	r5,zero
    2194:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0012);//2
    2198:	0009883a 	mov	r4,zero
    219c:	01400484 	movi	r5,18
    21a0:	00002c80 	call	2c8 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
    21a4:	0009883a 	mov	r4,zero
    21a8:	01415104 	movi	r5,1348
    21ac:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    21b0:	0009883a 	mov	r4,zero
    21b4:	01400204 	movi	r5,8
    21b8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    21bc:	0009883a 	mov	r4,zero
    21c0:	0140a404 	movi	r5,656
    21c4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    21c8:	0009883a 	mov	r4,zero
    21cc:	01401044 	movi	r5,65
    21d0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    21d4:	0009883a 	mov	r4,zero
    21d8:	014004c4 	movi	r5,19
    21dc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    21e0:	0009883a 	mov	r4,zero
    21e4:	01414804 	movi	r5,1312
    21e8:	00002c80 	call	2c8 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
    21ec:	0009883a 	mov	r4,zero
    21f0:	01415304 	movi	r5,1356
    21f4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
    21f8:	0009883a 	mov	r4,zero
    21fc:	01400204 	movi	r5,8
    2200:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    2204:	0009883a 	mov	r4,zero
    2208:	0140a404 	movi	r5,656
    220c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);//6
    2210:	0009883a 	mov	r4,zero
    2214:	01400044 	movi	r5,1
    2218:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    221c:	0009883a 	mov	r4,zero
    2220:	014004c4 	movi	r5,19
    2224:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
    2228:	0009883a 	mov	r4,zero
    222c:	01414b04 	movi	r5,1324
    2230:	00002c80 	call	2c8 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0554); //c
    2234:	0009883a 	mov	r4,zero
    2238:	01415504 	movi	r5,1364
    223c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0002);//e
    2240:	0009883a 	mov	r4,zero
    2244:	01400084 	movi	r5,2
    2248:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
    224c:	0009883a 	mov	r4,zero
    2250:	0140a404 	movi	r5,656
    2254:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    2258:	0009883a 	mov	r4,zero
    225c:	01401044 	movi	r5,65
    2260:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    2264:	0009883a 	mov	r4,zero
    2268:	014004c4 	movi	r5,19
    226c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
    2270:	0009883a 	mov	r4,zero
    2274:	01414e04 	movi	r5,1336
    2278:	00002c80 	call	2c8 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //538
    227c:	0009883a 	mov	r4,zero
    2280:	000b883a 	mov	r5,zero
    2284:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
    2288:	0009883a 	mov	r4,zero
    228c:	000b883a 	mov	r5,zero
    2290:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0210);//c
    2294:	0009883a 	mov	r4,zero
    2298:	01408404 	movi	r5,528
    229c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//e
    22a0:	0009883a 	mov	r4,zero
    22a4:	01401044 	movi	r5,65
    22a8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
    22ac:	0009883a 	mov	r4,zero
    22b0:	014004c4 	movi	r5,19
    22b4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
    22b8:	0009883a 	mov	r4,zero
    22bc:	000b883a 	mov	r5,zero
    22c0:	00002c80 	call	2c8 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    22c4:	01006c04 	movi	r4,432
    22c8:	01414004 	movi	r5,1280
    22cc:	0001d880 	call	1d88 <UsbWrite>
}
    22d0:	e037883a 	mov	sp,fp
    22d4:	dfc00117 	ldw	ra,4(sp)
    22d8:	df000017 	ldw	fp,0(sp)
    22dc:	dec00204 	addi	sp,sp,8
    22e0:	f800283a 	ret

000022e4 <UsbGetConfigDesc1>:


void UsbGetConfigDesc1()
{
    22e4:	defffe04 	addi	sp,sp,-8
    22e8:	dfc00115 	stw	ra,4(sp)
    22ec:	df000015 	stw	fp,0(sp)
    22f0:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    22f4:	01000084 	movi	r4,2
    22f8:	01414004 	movi	r5,1280
    22fc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x050C);
    2300:	0009883a 	mov	r4,zero
    2304:	01414304 	movi	r5,1292
    2308:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    230c:	0009883a 	mov	r4,zero
    2310:	01400204 	movi	r5,8
    2314:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    2318:	0009883a 	mov	r4,zero
    231c:	0140b404 	movi	r5,720
    2320:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);
    2324:	0009883a 	mov	r4,zero
    2328:	01400044 	movi	r5,1
    232c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    2330:	0009883a 	mov	r4,zero
    2334:	014004c4 	movi	r5,19
    2338:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0514);
    233c:	0009883a 	mov	r4,zero
    2340:	01414504 	movi	r5,1300
    2344:	00002c80 	call	2c8 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
    2348:	0009883a 	mov	r4,zero
    234c:	0141a004 	movi	r5,1664
    2350:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
    2354:	0009883a 	mov	r4,zero
    2358:	01408004 	movi	r5,512
    235c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    2360:	0009883a 	mov	r4,zero
    2364:	000b883a 	mov	r5,zero
    2368:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0009);//2
    236c:	0009883a 	mov	r4,zero
    2370:	01400244 	movi	r5,9
    2374:	00002c80 	call	2c8 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
    2378:	0009883a 	mov	r4,zero
    237c:	01415104 	movi	r5,1348
    2380:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    2384:	0009883a 	mov	r4,zero
    2388:	01400204 	movi	r5,8
    238c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    2390:	0009883a 	mov	r4,zero
    2394:	0140a404 	movi	r5,656
    2398:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    239c:	0009883a 	mov	r4,zero
    23a0:	01401044 	movi	r5,65
    23a4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    23a8:	0009883a 	mov	r4,zero
    23ac:	014004c4 	movi	r5,19
    23b0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    23b4:	0009883a 	mov	r4,zero
    23b8:	01414804 	movi	r5,1312
    23bc:	00002c80 	call	2c8 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
    23c0:	0009883a 	mov	r4,zero
    23c4:	01415304 	movi	r5,1356
    23c8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);//2
    23cc:	0009883a 	mov	r4,zero
    23d0:	01400044 	movi	r5,1
    23d4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    23d8:	0009883a 	mov	r4,zero
    23dc:	0140a404 	movi	r5,656
    23e0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
    23e4:	0009883a 	mov	r4,zero
    23e8:	01400044 	movi	r5,1
    23ec:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    23f0:	0009883a 	mov	r4,zero
    23f4:	014004c4 	movi	r5,19
    23f8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
    23fc:	0009883a 	mov	r4,zero
    2400:	01414b04 	movi	r5,1324
    2404:	00002c80 	call	2c8 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
    2408:	0009883a 	mov	r4,zero
    240c:	000b883a 	mov	r5,zero
    2410:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
    2414:	0009883a 	mov	r4,zero
    2418:	000b883a 	mov	r5,zero
    241c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
    2420:	0009883a 	mov	r4,zero
    2424:	01408404 	movi	r5,528
    2428:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    242c:	0009883a 	mov	r4,zero
    2430:	01401044 	movi	r5,65
    2434:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    2438:	0009883a 	mov	r4,zero
    243c:	014004c4 	movi	r5,19
    2440:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
    2444:	0009883a 	mov	r4,zero
    2448:	000b883a 	mov	r5,zero
    244c:	00002c80 	call	2c8 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    2450:	01006c04 	movi	r4,432
    2454:	01414004 	movi	r5,1280
    2458:	0001d880 	call	1d88 <UsbWrite>
}
    245c:	e037883a 	mov	sp,fp
    2460:	dfc00117 	ldw	ra,4(sp)
    2464:	df000017 	ldw	fp,0(sp)
    2468:	dec00204 	addi	sp,sp,8
    246c:	f800283a 	ret

00002470 <UsbGetConfigDesc2>:


void UsbGetConfigDesc2()
{
    2470:	defffe04 	addi	sp,sp,-8
    2474:	dfc00115 	stw	ra,4(sp)
    2478:	df000015 	stw	fp,0(sp)
    247c:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    2480:	01000084 	movi	r4,2
    2484:	01414004 	movi	r5,1280
    2488:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x050C);
    248c:	0009883a 	mov	r4,zero
    2490:	01414304 	movi	r5,1292
    2494:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    2498:	0009883a 	mov	r4,zero
    249c:	01400204 	movi	r5,8
    24a0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    24a4:	0009883a 	mov	r4,zero
    24a8:	0140b404 	movi	r5,720
    24ac:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);
    24b0:	0009883a 	mov	r4,zero
    24b4:	01400044 	movi	r5,1
    24b8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    24bc:	0009883a 	mov	r4,zero
    24c0:	014004c4 	movi	r5,19
    24c4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0514);
    24c8:	0009883a 	mov	r4,zero
    24cc:	01414504 	movi	r5,1300
    24d0:	00002c80 	call	2c8 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
    24d4:	0009883a 	mov	r4,zero
    24d8:	0141a004 	movi	r5,1664
    24dc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
    24e0:	0009883a 	mov	r4,zero
    24e4:	01408004 	movi	r5,512
    24e8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    24ec:	0009883a 	mov	r4,zero
    24f0:	000b883a 	mov	r5,zero
    24f4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x00FF);//2
    24f8:	0009883a 	mov	r4,zero
    24fc:	01403fc4 	movi	r5,255
    2500:	00002c80 	call	2c8 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x055c); //514
    2504:	0009883a 	mov	r4,zero
    2508:	01415704 	movi	r5,1372
    250c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    2510:	0009883a 	mov	r4,zero
    2514:	01400204 	movi	r5,8
    2518:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    251c:	0009883a 	mov	r4,zero
    2520:	0140a404 	movi	r5,656
    2524:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    2528:	0009883a 	mov	r4,zero
    252c:	01401044 	movi	r5,65
    2530:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    2534:	0009883a 	mov	r4,zero
    2538:	014004c4 	movi	r5,19
    253c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    2540:	0009883a 	mov	r4,zero
    2544:	01414804 	movi	r5,1312
    2548:	00002c80 	call	2c8 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0564); //520
    254c:	0009883a 	mov	r4,zero
    2550:	01415904 	movi	r5,1380
    2554:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
    2558:	0009883a 	mov	r4,zero
    255c:	01400204 	movi	r5,8
    2560:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    2564:	0009883a 	mov	r4,zero
    2568:	0140a404 	movi	r5,656
    256c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
    2570:	0009883a 	mov	r4,zero
    2574:	01400044 	movi	r5,1
    2578:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    257c:	0009883a 	mov	r4,zero
    2580:	014004c4 	movi	r5,19
    2584:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
    2588:	0009883a 	mov	r4,zero
    258c:	01414b04 	movi	r5,1324
    2590:	00002c80 	call	2c8 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x056c); //52c
    2594:	0009883a 	mov	r4,zero
    2598:	01415b04 	movi	r5,1388
    259c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
    25a0:	0009883a 	mov	r4,zero
    25a4:	01400204 	movi	r5,8
    25a8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
    25ac:	0009883a 	mov	r4,zero
    25b0:	0140a404 	movi	r5,656
    25b4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    25b8:	0009883a 	mov	r4,zero
    25bc:	01401044 	movi	r5,65
    25c0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    25c4:	0009883a 	mov	r4,zero
    25c8:	014004c4 	movi	r5,19
    25cc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
    25d0:	0009883a 	mov	r4,zero
    25d4:	01414e04 	movi	r5,1336
    25d8:	00002c80 	call	2c8 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0574); //538
    25dc:	0009883a 	mov	r4,zero
    25e0:	01415d04 	movi	r5,1396
    25e4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
    25e8:	0009883a 	mov	r4,zero
    25ec:	01400204 	movi	r5,8
    25f0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
    25f4:	0009883a 	mov	r4,zero
    25f8:	0140a404 	movi	r5,656
    25fc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
    2600:	0009883a 	mov	r4,zero
    2604:	01400044 	movi	r5,1
    2608:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
    260c:	0009883a 	mov	r4,zero
    2610:	014004c4 	movi	r5,19
    2614:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
    2618:	0009883a 	mov	r4,zero
    261c:	01415104 	movi	r5,1348
    2620:	00002c80 	call	2c8 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x057c); //544
    2624:	0009883a 	mov	r4,zero
    2628:	01415f04 	movi	r5,1404
    262c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0002);//6
    2630:	0009883a 	mov	r4,zero
    2634:	01400084 	movi	r5,2
    2638:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    263c:	0009883a 	mov	r4,zero
    2640:	0140a404 	movi	r5,656
    2644:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
    2648:	0009883a 	mov	r4,zero
    264c:	01401044 	movi	r5,65
    2650:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    2654:	0009883a 	mov	r4,zero
    2658:	014004c4 	movi	r5,19
    265c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
    2660:	0009883a 	mov	r4,zero
    2664:	01415404 	movi	r5,1360
    2668:	00002c80 	call	2c8 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //550
    266c:	0009883a 	mov	r4,zero
    2670:	000b883a 	mov	r5,zero
    2674:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
    2678:	0009883a 	mov	r4,zero
    267c:	000b883a 	mov	r5,zero
    2680:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0210);//4
    2684:	0009883a 	mov	r4,zero
    2688:	01408404 	movi	r5,528
    268c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//6
    2690:	0009883a 	mov	r4,zero
    2694:	01401044 	movi	r5,65
    2698:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    269c:	0009883a 	mov	r4,zero
    26a0:	014004c4 	movi	r5,19
    26a4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
    26a8:	0009883a 	mov	r4,zero
    26ac:	000b883a 	mov	r5,zero
    26b0:	00002c80 	call	2c8 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    26b4:	01006c04 	movi	r4,432
    26b8:	01414004 	movi	r5,1280
    26bc:	0001d880 	call	1d88 <UsbWrite>
}
    26c0:	e037883a 	mov	sp,fp
    26c4:	dfc00117 	ldw	ra,4(sp)
    26c8:	df000017 	ldw	fp,0(sp)
    26cc:	dec00204 	addi	sp,sp,8
    26d0:	f800283a 	ret

000026d4 <UsbSetConfig>:

void UsbSetConfig()
{
    26d4:	defffe04 	addi	sp,sp,-8
    26d8:	dfc00115 	stw	ra,4(sp)
    26dc:	df000015 	stw	fp,0(sp)
    26e0:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    26e4:	01000084 	movi	r4,2
    26e8:	01414004 	movi	r5,1280
    26ec:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x050C);
    26f0:	0009883a 	mov	r4,zero
    26f4:	01414304 	movi	r5,1292
    26f8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    26fc:	0009883a 	mov	r4,zero
    2700:	01400204 	movi	r5,8
    2704:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
    2708:	0009883a 	mov	r4,zero
    270c:	0140b404 	movi	r5,720
    2710:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);
    2714:	0009883a 	mov	r4,zero
    2718:	01400044 	movi	r5,1
    271c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    2720:	0009883a 	mov	r4,zero
    2724:	014004c4 	movi	r5,19
    2728:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0514);
    272c:	0009883a 	mov	r4,zero
    2730:	01414504 	movi	r5,1300
    2734:	00002c80 	call	2c8 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0900);
    2738:	0009883a 	mov	r4,zero
    273c:	01424004 	movi	r5,2304
    2740:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);//device address
    2744:	0009883a 	mov	r4,zero
    2748:	01400044 	movi	r5,1
    274c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    2750:	0009883a 	mov	r4,zero
    2754:	000b883a 	mov	r5,zero
    2758:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    275c:	0009883a 	mov	r4,zero
    2760:	000b883a 	mov	r5,zero
    2764:	00002c80 	call	2c8 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
    2768:	0009883a 	mov	r4,zero
    276c:	000b883a 	mov	r5,zero
    2770:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
    2774:	0009883a 	mov	r4,zero
    2778:	000b883a 	mov	r5,zero
    277c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
    2780:	0009883a 	mov	r4,zero
    2784:	0140a404 	movi	r5,656
    2788:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
    278c:	0009883a 	mov	r4,zero
    2790:	01401044 	movi	r5,65
    2794:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    2798:	0009883a 	mov	r4,zero
    279c:	014004c4 	movi	r5,19
    27a0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    27a4:	0009883a 	mov	r4,zero
    27a8:	000b883a 	mov	r5,zero
    27ac:	00002c80 	call	2c8 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    27b0:	01006c04 	movi	r4,432
    27b4:	01414004 	movi	r5,1280
    27b8:	0001d880 	call	1d88 <UsbWrite>

}
    27bc:	e037883a 	mov	sp,fp
    27c0:	dfc00117 	ldw	ra,4(sp)
    27c4:	df000017 	ldw	fp,0(sp)
    27c8:	dec00204 	addi	sp,sp,8
    27cc:	f800283a 	ret

000027d0 <UsbClassRequest>:

void UsbClassRequest()
{
    27d0:	defffe04 	addi	sp,sp,-8
    27d4:	dfc00115 	stw	ra,4(sp)
    27d8:	df000015 	stw	fp,0(sp)
    27dc:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    27e0:	01000084 	movi	r4,2
    27e4:	01414004 	movi	r5,1280
    27e8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x050C);
    27ec:	0009883a 	mov	r4,zero
    27f0:	01414304 	movi	r5,1292
    27f4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    27f8:	0009883a 	mov	r4,zero
    27fc:	01400204 	movi	r5,8
    2800:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
    2804:	0009883a 	mov	r4,zero
    2808:	0140b404 	movi	r5,720
    280c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);
    2810:	0009883a 	mov	r4,zero
    2814:	01400044 	movi	r5,1
    2818:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    281c:	0009883a 	mov	r4,zero
    2820:	014004c4 	movi	r5,19
    2824:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0514);
    2828:	0009883a 	mov	r4,zero
    282c:	01414504 	movi	r5,1300
    2830:	00002c80 	call	2c8 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0A21);
    2834:	0009883a 	mov	r4,zero
    2838:	01428844 	movi	r5,2593
    283c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//device address
    2840:	0009883a 	mov	r4,zero
    2844:	000b883a 	mov	r5,zero
    2848:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    284c:	0009883a 	mov	r4,zero
    2850:	000b883a 	mov	r5,zero
    2854:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    2858:	0009883a 	mov	r4,zero
    285c:	000b883a 	mov	r5,zero
    2860:	00002c80 	call	2c8 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
    2864:	0009883a 	mov	r4,zero
    2868:	000b883a 	mov	r5,zero
    286c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number /data length
    2870:	0009883a 	mov	r4,zero
    2874:	000b883a 	mov	r5,zero
    2878:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
    287c:	0009883a 	mov	r4,zero
    2880:	0140a404 	movi	r5,656
    2884:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
    2888:	0009883a 	mov	r4,zero
    288c:	01401044 	movi	r5,65
    2890:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    2894:	0009883a 	mov	r4,zero
    2898:	014004c4 	movi	r5,19
    289c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    28a0:	0009883a 	mov	r4,zero
    28a4:	000b883a 	mov	r5,zero
    28a8:	00002c80 	call	2c8 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    28ac:	01006c04 	movi	r4,432
    28b0:	01414004 	movi	r5,1280
    28b4:	0001d880 	call	1d88 <UsbWrite>
}
    28b8:	e037883a 	mov	sp,fp
    28bc:	dfc00117 	ldw	ra,4(sp)
    28c0:	df000017 	ldw	fp,0(sp)
    28c4:	dec00204 	addi	sp,sp,8
    28c8:	f800283a 	ret

000028cc <UsbGetHidDesc>:


void UsbGetHidDesc()
{
    28cc:	defffe04 	addi	sp,sp,-8
    28d0:	dfc00115 	stw	ra,4(sp)
    28d4:	df000015 	stw	fp,0(sp)
    28d8:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    28dc:	01000084 	movi	r4,2
    28e0:	01414004 	movi	r5,1280
    28e4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x050C);
    28e8:	0009883a 	mov	r4,zero
    28ec:	01414304 	movi	r5,1292
    28f0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    28f4:	0009883a 	mov	r4,zero
    28f8:	01400204 	movi	r5,8
    28fc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
    2900:	0009883a 	mov	r4,zero
    2904:	0140b404 	movi	r5,720
    2908:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);
    290c:	0009883a 	mov	r4,zero
    2910:	01400044 	movi	r5,1
    2914:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    2918:	0009883a 	mov	r4,zero
    291c:	014004c4 	movi	r5,19
    2920:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0514);
    2924:	0009883a 	mov	r4,zero
    2928:	01414504 	movi	r5,1300
    292c:	00002c80 	call	2c8 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
    2930:	0009883a 	mov	r4,zero
    2934:	0141a044 	movi	r5,1665
    2938:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x2100);//e //HID 0x21
    293c:	0009883a 	mov	r4,zero
    2940:	01484004 	movi	r5,8448
    2944:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    2948:	0009883a 	mov	r4,zero
    294c:	000b883a 	mov	r5,zero
    2950:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
    2954:	0009883a 	mov	r4,zero
    2958:	01401ec4 	movi	r5,123
    295c:	00002c80 	call	2c8 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
    2960:	0009883a 	mov	r4,zero
    2964:	01415104 	movi	r5,1348
    2968:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    296c:	0009883a 	mov	r4,zero
    2970:	01400204 	movi	r5,8
    2974:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    2978:	0009883a 	mov	r4,zero
    297c:	0140a404 	movi	r5,656
    2980:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    2984:	0009883a 	mov	r4,zero
    2988:	01401044 	movi	r5,65
    298c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    2990:	0009883a 	mov	r4,zero
    2994:	014004c4 	movi	r5,19
    2998:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    299c:	0009883a 	mov	r4,zero
    29a0:	01414804 	movi	r5,1312
    29a4:	00002c80 	call	2c8 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
    29a8:	0009883a 	mov	r4,zero
    29ac:	000b883a 	mov	r5,zero
    29b0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
    29b4:	0009883a 	mov	r4,zero
    29b8:	000b883a 	mov	r5,zero
    29bc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
    29c0:	0009883a 	mov	r4,zero
    29c4:	01408404 	movi	r5,528
    29c8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    29cc:	0009883a 	mov	r4,zero
    29d0:	01401044 	movi	r5,65
    29d4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    29d8:	0009883a 	mov	r4,zero
    29dc:	014004c4 	movi	r5,19
    29e0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
    29e4:	0009883a 	mov	r4,zero
    29e8:	000b883a 	mov	r5,zero
    29ec:	00002c80 	call	2c8 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    29f0:	01006c04 	movi	r4,432
    29f4:	01414004 	movi	r5,1280
    29f8:	0001d880 	call	1d88 <UsbWrite>

}
    29fc:	e037883a 	mov	sp,fp
    2a00:	dfc00117 	ldw	ra,4(sp)
    2a04:	df000017 	ldw	fp,0(sp)
    2a08:	dec00204 	addi	sp,sp,8
    2a0c:	f800283a 	ret

00002a10 <UsbGetReportDesc>:


void UsbGetReportDesc()
{
    2a10:	defffe04 	addi	sp,sp,-8
    2a14:	dfc00115 	stw	ra,4(sp)
    2a18:	df000015 	stw	fp,0(sp)
    2a1c:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    2a20:	01000084 	movi	r4,2
    2a24:	01414004 	movi	r5,1280
    2a28:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x050C);
    2a2c:	0009883a 	mov	r4,zero
    2a30:	01414304 	movi	r5,1292
    2a34:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    2a38:	0009883a 	mov	r4,zero
    2a3c:	01400204 	movi	r5,8
    2a40:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    2a44:	0009883a 	mov	r4,zero
    2a48:	0140b404 	movi	r5,720
    2a4c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);
    2a50:	0009883a 	mov	r4,zero
    2a54:	01400044 	movi	r5,1
    2a58:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    2a5c:	0009883a 	mov	r4,zero
    2a60:	014004c4 	movi	r5,19
    2a64:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0514);
    2a68:	0009883a 	mov	r4,zero
    2a6c:	01414504 	movi	r5,1300
    2a70:	00002c80 	call	2c8 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
    2a74:	0009883a 	mov	r4,zero
    2a78:	0141a044 	movi	r5,1665
    2a7c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x2200);//e //report 0x22
    2a80:	0009883a 	mov	r4,zero
    2a84:	01488004 	movi	r5,8704
    2a88:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    2a8c:	0009883a 	mov	r4,zero
    2a90:	000b883a 	mov	r5,zero
    2a94:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
    2a98:	0009883a 	mov	r4,zero
    2a9c:	01401ec4 	movi	r5,123
    2aa0:	00002c80 	call	2c8 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0580); //514
    2aa4:	0009883a 	mov	r4,zero
    2aa8:	01416004 	movi	r5,1408
    2aac:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    2ab0:	0009883a 	mov	r4,zero
    2ab4:	01400204 	movi	r5,8
    2ab8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    2abc:	0009883a 	mov	r4,zero
    2ac0:	0140a404 	movi	r5,656
    2ac4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    2ac8:	0009883a 	mov	r4,zero
    2acc:	01401044 	movi	r5,65
    2ad0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    2ad4:	0009883a 	mov	r4,zero
    2ad8:	014004c4 	movi	r5,19
    2adc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    2ae0:	0009883a 	mov	r4,zero
    2ae4:	01414804 	movi	r5,1312
    2ae8:	00002c80 	call	2c8 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0588); //520
    2aec:	0009883a 	mov	r4,zero
    2af0:	01416204 	movi	r5,1416
    2af4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
    2af8:	0009883a 	mov	r4,zero
    2afc:	01400204 	movi	r5,8
    2b00:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    2b04:	0009883a 	mov	r4,zero
    2b08:	0140a404 	movi	r5,656
    2b0c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
    2b10:	0009883a 	mov	r4,zero
    2b14:	01400044 	movi	r5,1
    2b18:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    2b1c:	0009883a 	mov	r4,zero
    2b20:	014004c4 	movi	r5,19
    2b24:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
    2b28:	0009883a 	mov	r4,zero
    2b2c:	01414b04 	movi	r5,1324
    2b30:	00002c80 	call	2c8 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0590); //52c
    2b34:	0009883a 	mov	r4,zero
    2b38:	01416404 	movi	r5,1424
    2b3c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
    2b40:	0009883a 	mov	r4,zero
    2b44:	01400204 	movi	r5,8
    2b48:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
    2b4c:	0009883a 	mov	r4,zero
    2b50:	0140a404 	movi	r5,656
    2b54:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    2b58:	0009883a 	mov	r4,zero
    2b5c:	01401044 	movi	r5,65
    2b60:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    2b64:	0009883a 	mov	r4,zero
    2b68:	014004c4 	movi	r5,19
    2b6c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
    2b70:	0009883a 	mov	r4,zero
    2b74:	01414e04 	movi	r5,1336
    2b78:	00002c80 	call	2c8 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0598); //538
    2b7c:	0009883a 	mov	r4,zero
    2b80:	01416604 	movi	r5,1432
    2b84:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
    2b88:	0009883a 	mov	r4,zero
    2b8c:	01400204 	movi	r5,8
    2b90:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
    2b94:	0009883a 	mov	r4,zero
    2b98:	0140a404 	movi	r5,656
    2b9c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
    2ba0:	0009883a 	mov	r4,zero
    2ba4:	01400044 	movi	r5,1
    2ba8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
    2bac:	0009883a 	mov	r4,zero
    2bb0:	014004c4 	movi	r5,19
    2bb4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
    2bb8:	0009883a 	mov	r4,zero
    2bbc:	01415104 	movi	r5,1348
    2bc0:	00002c80 	call	2c8 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x05a0); //544
    2bc4:	0009883a 	mov	r4,zero
    2bc8:	01416804 	movi	r5,1440
    2bcc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    2bd0:	0009883a 	mov	r4,zero
    2bd4:	01400204 	movi	r5,8
    2bd8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    2bdc:	0009883a 	mov	r4,zero
    2be0:	0140a404 	movi	r5,656
    2be4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
    2be8:	0009883a 	mov	r4,zero
    2bec:	01401044 	movi	r5,65
    2bf0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    2bf4:	0009883a 	mov	r4,zero
    2bf8:	014004c4 	movi	r5,19
    2bfc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
    2c00:	0009883a 	mov	r4,zero
    2c04:	01415404 	movi	r5,1360
    2c08:	00002c80 	call	2c8 <IO_write>

	//data phase IN-6
	IO_write(HPI_DATA,0x05a8); //550
    2c0c:	0009883a 	mov	r4,zero
    2c10:	01416a04 	movi	r5,1448
    2c14:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
    2c18:	0009883a 	mov	r4,zero
    2c1c:	01400204 	movi	r5,8
    2c20:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    2c24:	0009883a 	mov	r4,zero
    2c28:	0140a404 	movi	r5,656
    2c2c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
    2c30:	0009883a 	mov	r4,zero
    2c34:	01400044 	movi	r5,1
    2c38:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    2c3c:	0009883a 	mov	r4,zero
    2c40:	014004c4 	movi	r5,19
    2c44:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x055c);//a
    2c48:	0009883a 	mov	r4,zero
    2c4c:	01415704 	movi	r5,1372
    2c50:	00002c80 	call	2c8 <IO_write>

	//data phase IN-7
	IO_write(HPI_DATA,0x05b0); //c
    2c54:	0009883a 	mov	r4,zero
    2c58:	01416c04 	movi	r5,1456
    2c5c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
    2c60:	0009883a 	mov	r4,zero
    2c64:	01400204 	movi	r5,8
    2c68:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//560
    2c6c:	0009883a 	mov	r4,zero
    2c70:	0140a404 	movi	r5,656
    2c74:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//2 //data1
    2c78:	0009883a 	mov	r4,zero
    2c7c:	01401044 	movi	r5,65
    2c80:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    2c84:	0009883a 	mov	r4,zero
    2c88:	014004c4 	movi	r5,19
    2c8c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0568);//6
    2c90:	0009883a 	mov	r4,zero
    2c94:	01415a04 	movi	r5,1384
    2c98:	00002c80 	call	2c8 <IO_write>

	//data phase IN-8
	IO_write(HPI_DATA,0x05b8); //8
    2c9c:	0009883a 	mov	r4,zero
    2ca0:	01416e04 	movi	r5,1464
    2ca4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0003);//a
    2ca8:	0009883a 	mov	r4,zero
    2cac:	014000c4 	movi	r5,3
    2cb0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
    2cb4:	0009883a 	mov	r4,zero
    2cb8:	0140a404 	movi	r5,656
    2cbc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
    2cc0:	0009883a 	mov	r4,zero
    2cc4:	01400044 	movi	r5,1
    2cc8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//570
    2ccc:	0009883a 	mov	r4,zero
    2cd0:	014004c4 	movi	r5,19
    2cd4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0574);//2
    2cd8:	0009883a 	mov	r4,zero
    2cdc:	01415d04 	movi	r5,1396
    2ce0:	00002c80 	call	2c8 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //574
    2ce4:	0009883a 	mov	r4,zero
    2ce8:	000b883a 	mov	r5,zero
    2cec:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
    2cf0:	0009883a 	mov	r4,zero
    2cf4:	000b883a 	mov	r5,zero
    2cf8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0210);//8
    2cfc:	0009883a 	mov	r4,zero
    2d00:	01408404 	movi	r5,528
    2d04:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    2d08:	0009883a 	mov	r4,zero
    2d0c:	01401044 	movi	r5,65
    2d10:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    2d14:	0009883a 	mov	r4,zero
    2d18:	014004c4 	movi	r5,19
    2d1c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
    2d20:	0009883a 	mov	r4,zero
    2d24:	000b883a 	mov	r5,zero
    2d28:	00002c80 	call	2c8 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    2d2c:	01006c04 	movi	r4,432
    2d30:	01414004 	movi	r5,1280
    2d34:	0001d880 	call	1d88 <UsbWrite>

}
    2d38:	e037883a 	mov	sp,fp
    2d3c:	dfc00117 	ldw	ra,4(sp)
    2d40:	df000017 	ldw	fp,0(sp)
    2d44:	dec00204 	addi	sp,sp,8
    2d48:	f800283a 	ret

00002d4c <UsbWaitTDListDone>:


alt_u16 UsbWaitTDListDone()
{
    2d4c:	defffd04 	addi	sp,sp,-12
    2d50:	dfc00215 	stw	ra,8(sp)
    2d54:	df000115 	stw	fp,4(sp)
    2d58:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
    2d5c:	01005104 	movi	r4,324
    2d60:	0001ddc0 	call	1ddc <UsbRead>
    2d64:	e0bfff0d 	sth	r2,-4(fp)
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
    2d68:	01005104 	movi	r4,324
    2d6c:	000b883a 	mov	r5,zero
    2d70:	0001d880 	call	1d88 <UsbWrite>
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
    2d74:	00000d06 	br	2dac <UsbWaitTDListDone+0x60>
	{
		if(usb_ctl_val == 0x0000)
    2d78:	e0bfff0b 	ldhu	r2,-4(fp)
    2d7c:	10000526 	beq	r2,zero,2d94 <UsbWaitTDListDone+0x48>
		{
		}
		else
		{
			printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
    2d80:	e0bfff0b 	ldhu	r2,-4(fp)
    2d84:	01000074 	movhi	r4,1
    2d88:	210a7404 	addi	r4,r4,10704
    2d8c:	100b883a 	mov	r5,r2
    2d90:	00037f40 	call	37f4 <printf>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    2d94:	01005104 	movi	r4,324
    2d98:	0001ddc0 	call	1ddc <UsbRead>
    2d9c:	e0bfff0d 	sth	r2,-4(fp)
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
    2da0:	01005104 	movi	r4,324
    2da4:	000b883a 	mov	r5,zero
    2da8:	0001d880 	call	1d88 <UsbWrite>
{
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
    2dac:	e0bfff0b 	ldhu	r2,-4(fp)
    2db0:	10840018 	cmpnei	r2,r2,4096
    2db4:	103ff01e 	bne	r2,zero,2d78 <__alt_data_end+0xfffad648>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
	}

	return usb_ctl_val;
    2db8:	e0bfff0b 	ldhu	r2,-4(fp)
}
    2dbc:	e037883a 	mov	sp,fp
    2dc0:	dfc00117 	ldw	ra,4(sp)
    2dc4:	df000017 	ldw	fp,0(sp)
    2dc8:	dec00204 	addi	sp,sp,8
    2dcc:	f800283a 	ret

00002dd0 <UsbGetRetryCnt>:


alt_u16 UsbGetRetryCnt()
{
    2dd0:	defffd04 	addi	sp,sp,-12
    2dd4:	dfc00215 	stw	ra,8(sp)
    2dd8:	df000115 	stw	fp,4(sp)
    2ddc:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	IO_read(HPI_STATUS);
    2de0:	010000c4 	movi	r4,3
    2de4:	00003300 	call	330 <IO_read>
	if(UsbRead(HPI_SIE1_MSG_ADR) == HUSB_TDListDone)
    2de8:	01005104 	movi	r4,324
    2dec:	0001ddc0 	call	1ddc <UsbRead>
    2df0:	10bfffcc 	andi	r2,r2,65535
    2df4:	10840018 	cmpnei	r2,r2,4096
    2df8:	1000091e 	bne	r2,zero,2e20 <UsbGetRetryCnt+0x50>
	{
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
    2dfc:	01005104 	movi	r4,324
    2e00:	000b883a 	mov	r5,zero
    2e04:	0001d880 	call	1d88 <UsbWrite>

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    2e08:	0001883a 	nop
    2e0c:	010000c4 	movi	r4,3
    2e10:	00003300 	call	330 <IO_read>
    2e14:	10bfffcc 	andi	r2,r2,65535
    2e18:	1080040c 	andi	r2,r2,16
    2e1c:	103ffb26 	beq	r2,zero,2e0c <__alt_data_end+0xfffad6dc>
		{
		}
	}
	//usleep(1000);
	IO_write(HPI_ADDR,0x0508);
    2e20:	01000084 	movi	r4,2
    2e24:	01414204 	movi	r5,1288
    2e28:	00002c80 	call	2c8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
    2e2c:	0009883a 	mov	r4,zero
    2e30:	00003300 	call	330 <IO_read>
    2e34:	e0bfff0d 	sth	r2,-4(fp)

	return usb_ctl_val;
    2e38:	e0bfff0b 	ldhu	r2,-4(fp)
}
    2e3c:	e037883a 	mov	sp,fp
    2e40:	dfc00117 	ldw	ra,4(sp)
    2e44:	df000017 	ldw	fp,0(sp)
    2e48:	dec00204 	addi	sp,sp,8
    2e4c:	f800283a 	ret

00002e50 <UsbPrintMem>:


void UsbPrintMem()
{
    2e50:	defffc04 	addi	sp,sp,-16
    2e54:	dfc00315 	stw	ra,12(sp)
    2e58:	df000215 	stw	fp,8(sp)
    2e5c:	df000204 	addi	fp,sp,8
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
    2e60:	01000084 	movi	r4,2
    2e64:	01414004 	movi	r5,1280
    2e68:	00002c80 	call	2c8 <IO_write>
	for (i = 0; i <= 200; i += 2)
    2e6c:	e03ffe15 	stw	zero,-8(fp)
    2e70:	00000e06 	br	2eac <UsbPrintMem+0x5c>
	{
		code = IO_read(HPI_DATA);
    2e74:	0009883a 	mov	r4,zero
    2e78:	00003300 	call	330 <IO_read>
    2e7c:	10bfffcc 	andi	r2,r2,65535
    2e80:	e0bfff15 	stw	r2,-4(fp)
		printf("\naddr %x = %04x\n", 0x0500+i, code);
    2e84:	e0bffe17 	ldw	r2,-8(fp)
    2e88:	10814004 	addi	r2,r2,1280
    2e8c:	01000074 	movhi	r4,1
    2e90:	210a7c04 	addi	r4,r4,10736
    2e94:	100b883a 	mov	r5,r2
    2e98:	e1bfff17 	ldw	r6,-4(fp)
    2e9c:	00037f40 	call	37f4 <printf>

void UsbPrintMem()
{
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
	for (i = 0; i <= 200; i += 2)
    2ea0:	e0bffe17 	ldw	r2,-8(fp)
    2ea4:	10800084 	addi	r2,r2,2
    2ea8:	e0bffe15 	stw	r2,-8(fp)
    2eac:	e0bffe17 	ldw	r2,-8(fp)
    2eb0:	10803250 	cmplti	r2,r2,201
    2eb4:	103fef1e 	bne	r2,zero,2e74 <__alt_data_end+0xfffad744>
	{
		code = IO_read(HPI_DATA);
		printf("\naddr %x = %04x\n", 0x0500+i, code);
	}
}
    2eb8:	e037883a 	mov	sp,fp
    2ebc:	dfc00117 	ldw	ra,4(sp)
    2ec0:	df000017 	ldw	fp,0(sp)
    2ec4:	dec00204 	addi	sp,sp,8
    2ec8:	f800283a 	ret

00002ecc <udivmodsi4>:
    2ecc:	2900182e 	bgeu	r5,r4,2f30 <udivmodsi4+0x64>
    2ed0:	28001716 	blt	r5,zero,2f30 <udivmodsi4+0x64>
    2ed4:	00800804 	movi	r2,32
    2ed8:	00c00044 	movi	r3,1
    2edc:	00000206 	br	2ee8 <udivmodsi4+0x1c>
    2ee0:	10001126 	beq	r2,zero,2f28 <udivmodsi4+0x5c>
    2ee4:	28000516 	blt	r5,zero,2efc <udivmodsi4+0x30>
    2ee8:	294b883a 	add	r5,r5,r5
    2eec:	10bfffc4 	addi	r2,r2,-1
    2ef0:	18c7883a 	add	r3,r3,r3
    2ef4:	293ffa36 	bltu	r5,r4,2ee0 <__alt_data_end+0xfffad7b0>
    2ef8:	18000b26 	beq	r3,zero,2f28 <udivmodsi4+0x5c>
    2efc:	0005883a 	mov	r2,zero
    2f00:	21400236 	bltu	r4,r5,2f0c <udivmodsi4+0x40>
    2f04:	2149c83a 	sub	r4,r4,r5
    2f08:	10c4b03a 	or	r2,r2,r3
    2f0c:	1806d07a 	srli	r3,r3,1
    2f10:	280ad07a 	srli	r5,r5,1
    2f14:	183ffa1e 	bne	r3,zero,2f00 <__alt_data_end+0xfffad7d0>
    2f18:	3000011e 	bne	r6,zero,2f20 <udivmodsi4+0x54>
    2f1c:	f800283a 	ret
    2f20:	2005883a 	mov	r2,r4
    2f24:	f800283a 	ret
    2f28:	0005883a 	mov	r2,zero
    2f2c:	003ffa06 	br	2f18 <__alt_data_end+0xfffad7e8>
    2f30:	00c00044 	movi	r3,1
    2f34:	003ff106 	br	2efc <__alt_data_end+0xfffad7cc>

00002f38 <__divsi3>:
    2f38:	defffe04 	addi	sp,sp,-8
    2f3c:	dfc00115 	stw	ra,4(sp)
    2f40:	dc000015 	stw	r16,0(sp)
    2f44:	20000b16 	blt	r4,zero,2f74 <__divsi3+0x3c>
    2f48:	0021883a 	mov	r16,zero
    2f4c:	28000c16 	blt	r5,zero,2f80 <__divsi3+0x48>
    2f50:	000d883a 	mov	r6,zero
    2f54:	0002ecc0 	call	2ecc <udivmodsi4>
    2f58:	0407c83a 	sub	r3,zero,r16
    2f5c:	1884f03a 	xor	r2,r3,r2
    2f60:	1405883a 	add	r2,r2,r16
    2f64:	dfc00117 	ldw	ra,4(sp)
    2f68:	dc000017 	ldw	r16,0(sp)
    2f6c:	dec00204 	addi	sp,sp,8
    2f70:	f800283a 	ret
    2f74:	0109c83a 	sub	r4,zero,r4
    2f78:	04000044 	movi	r16,1
    2f7c:	283ff40e 	bge	r5,zero,2f50 <__alt_data_end+0xfffad820>
    2f80:	014bc83a 	sub	r5,zero,r5
    2f84:	8400005c 	xori	r16,r16,1
    2f88:	003ff106 	br	2f50 <__alt_data_end+0xfffad820>

00002f8c <__modsi3>:
    2f8c:	defffd04 	addi	sp,sp,-12
    2f90:	dfc00215 	stw	ra,8(sp)
    2f94:	dc400115 	stw	r17,4(sp)
    2f98:	dc000015 	stw	r16,0(sp)
    2f9c:	20000c16 	blt	r4,zero,2fd0 <__modsi3+0x44>
    2fa0:	0023883a 	mov	r17,zero
    2fa4:	0021883a 	mov	r16,zero
    2fa8:	28000d16 	blt	r5,zero,2fe0 <__modsi3+0x54>
    2fac:	01800044 	movi	r6,1
    2fb0:	0002ecc0 	call	2ecc <udivmodsi4>
    2fb4:	1404f03a 	xor	r2,r2,r16
    2fb8:	8885883a 	add	r2,r17,r2
    2fbc:	dfc00217 	ldw	ra,8(sp)
    2fc0:	dc400117 	ldw	r17,4(sp)
    2fc4:	dc000017 	ldw	r16,0(sp)
    2fc8:	dec00304 	addi	sp,sp,12
    2fcc:	f800283a 	ret
    2fd0:	0109c83a 	sub	r4,zero,r4
    2fd4:	04400044 	movi	r17,1
    2fd8:	043fffc4 	movi	r16,-1
    2fdc:	283ff30e 	bge	r5,zero,2fac <__alt_data_end+0xfffad87c>
    2fe0:	014bc83a 	sub	r5,zero,r5
    2fe4:	003ff106 	br	2fac <__alt_data_end+0xfffad87c>

00002fe8 <__udivsi3>:
    2fe8:	000d883a 	mov	r6,zero
    2fec:	0002ecc1 	jmpi	2ecc <udivmodsi4>

00002ff0 <__umodsi3>:
    2ff0:	01800044 	movi	r6,1
    2ff4:	0002ecc1 	jmpi	2ecc <udivmodsi4>

00002ff8 <malloc>:
    2ff8:	00800074 	movhi	r2,1
    2ffc:	10920904 	addi	r2,r2,18468
    3000:	200b883a 	mov	r5,r4
    3004:	11000017 	ldw	r4,0(r2)
    3008:	00030201 	jmpi	3020 <_malloc_r>

0000300c <free>:
    300c:	00800074 	movhi	r2,1
    3010:	10920904 	addi	r2,r2,18468
    3014:	200b883a 	mov	r5,r4
    3018:	11000017 	ldw	r4,0(r2)
    301c:	0007d341 	jmpi	7d34 <_free_r>

00003020 <_malloc_r>:
    3020:	defff504 	addi	sp,sp,-44
    3024:	dc800315 	stw	r18,12(sp)
    3028:	dfc00a15 	stw	ra,40(sp)
    302c:	df000915 	stw	fp,36(sp)
    3030:	ddc00815 	stw	r23,32(sp)
    3034:	dd800715 	stw	r22,28(sp)
    3038:	dd400615 	stw	r21,24(sp)
    303c:	dd000515 	stw	r20,20(sp)
    3040:	dcc00415 	stw	r19,16(sp)
    3044:	dc400215 	stw	r17,8(sp)
    3048:	dc000115 	stw	r16,4(sp)
    304c:	288002c4 	addi	r2,r5,11
    3050:	00c00584 	movi	r3,22
    3054:	2025883a 	mov	r18,r4
    3058:	18802a2e 	bgeu	r3,r2,3104 <_malloc_r+0xe4>
    305c:	047ffe04 	movi	r17,-8
    3060:	1462703a 	and	r17,r2,r17
    3064:	88009e16 	blt	r17,zero,32e0 <_malloc_r+0x2c0>
    3068:	89409d36 	bltu	r17,r5,32e0 <_malloc_r+0x2c0>
    306c:	000ffc00 	call	ffc0 <__malloc_lock>
    3070:	00807dc4 	movi	r2,503
    3074:	14402736 	bltu	r2,r17,3114 <_malloc_r+0xf4>
    3078:	8806d0fa 	srli	r3,r17,3
    307c:	04c00074 	movhi	r19,1
    3080:	9ccb5b04 	addi	r19,r19,11628
    3084:	18c5883a 	add	r2,r3,r3
    3088:	1085883a 	add	r2,r2,r2
    308c:	1085883a 	add	r2,r2,r2
    3090:	9885883a 	add	r2,r19,r2
    3094:	14000317 	ldw	r16,12(r2)
    3098:	80814a26 	beq	r16,r2,35c4 <_malloc_r+0x5a4>
    309c:	80c00117 	ldw	r3,4(r16)
    30a0:	81000317 	ldw	r4,12(r16)
    30a4:	00bfff04 	movi	r2,-4
    30a8:	1884703a 	and	r2,r3,r2
    30ac:	81400217 	ldw	r5,8(r16)
    30b0:	8085883a 	add	r2,r16,r2
    30b4:	10c00117 	ldw	r3,4(r2)
    30b8:	29000315 	stw	r4,12(r5)
    30bc:	21400215 	stw	r5,8(r4)
    30c0:	18c00054 	ori	r3,r3,1
    30c4:	10c00115 	stw	r3,4(r2)
    30c8:	9009883a 	mov	r4,r18
    30cc:	000ffe00 	call	ffe0 <__malloc_unlock>
    30d0:	80800204 	addi	r2,r16,8
    30d4:	dfc00a17 	ldw	ra,40(sp)
    30d8:	df000917 	ldw	fp,36(sp)
    30dc:	ddc00817 	ldw	r23,32(sp)
    30e0:	dd800717 	ldw	r22,28(sp)
    30e4:	dd400617 	ldw	r21,24(sp)
    30e8:	dd000517 	ldw	r20,20(sp)
    30ec:	dcc00417 	ldw	r19,16(sp)
    30f0:	dc800317 	ldw	r18,12(sp)
    30f4:	dc400217 	ldw	r17,8(sp)
    30f8:	dc000117 	ldw	r16,4(sp)
    30fc:	dec00b04 	addi	sp,sp,44
    3100:	f800283a 	ret
    3104:	04400404 	movi	r17,16
    3108:	89407536 	bltu	r17,r5,32e0 <_malloc_r+0x2c0>
    310c:	000ffc00 	call	ffc0 <__malloc_lock>
    3110:	003fd906 	br	3078 <__alt_data_end+0xfffad948>
    3114:	8806d27a 	srli	r3,r17,9
    3118:	18007526 	beq	r3,zero,32f0 <_malloc_r+0x2d0>
    311c:	00800104 	movi	r2,4
    3120:	10c0ef36 	bltu	r2,r3,34e0 <_malloc_r+0x4c0>
    3124:	8806d1ba 	srli	r3,r17,6
    3128:	19c00e04 	addi	r7,r3,56
    312c:	39cb883a 	add	r5,r7,r7
    3130:	04c00074 	movhi	r19,1
    3134:	294b883a 	add	r5,r5,r5
    3138:	9ccb5b04 	addi	r19,r19,11628
    313c:	294b883a 	add	r5,r5,r5
    3140:	994b883a 	add	r5,r19,r5
    3144:	2c000317 	ldw	r16,12(r5)
    3148:	2c000e26 	beq	r5,r16,3184 <_malloc_r+0x164>
    314c:	80800117 	ldw	r2,4(r16)
    3150:	01bfff04 	movi	r6,-4
    3154:	010003c4 	movi	r4,15
    3158:	1184703a 	and	r2,r2,r6
    315c:	1447c83a 	sub	r3,r2,r17
    3160:	20c00716 	blt	r4,r3,3180 <_malloc_r+0x160>
    3164:	1800650e 	bge	r3,zero,32fc <_malloc_r+0x2dc>
    3168:	84000317 	ldw	r16,12(r16)
    316c:	2c000526 	beq	r5,r16,3184 <_malloc_r+0x164>
    3170:	80800117 	ldw	r2,4(r16)
    3174:	1184703a 	and	r2,r2,r6
    3178:	1447c83a 	sub	r3,r2,r17
    317c:	20fff90e 	bge	r4,r3,3164 <__alt_data_end+0xfffada34>
    3180:	39ffffc4 	addi	r7,r7,-1
    3184:	38c00044 	addi	r3,r7,1
    3188:	01800074 	movhi	r6,1
    318c:	9c000417 	ldw	r16,16(r19)
    3190:	318b5b04 	addi	r6,r6,11628
    3194:	32400204 	addi	r9,r6,8
    3198:	82410326 	beq	r16,r9,35a8 <_malloc_r+0x588>
    319c:	81000117 	ldw	r4,4(r16)
    31a0:	00bfff04 	movi	r2,-4
    31a4:	208e703a 	and	r7,r4,r2
    31a8:	3c45c83a 	sub	r2,r7,r17
    31ac:	010003c4 	movi	r4,15
    31b0:	2080ee16 	blt	r4,r2,356c <_malloc_r+0x54c>
    31b4:	32400515 	stw	r9,20(r6)
    31b8:	32400415 	stw	r9,16(r6)
    31bc:	1000510e 	bge	r2,zero,3304 <_malloc_r+0x2e4>
    31c0:	00807fc4 	movi	r2,511
    31c4:	11c0ce36 	bltu	r2,r7,3500 <_malloc_r+0x4e0>
    31c8:	3808d0fa 	srli	r4,r7,3
    31cc:	01c00044 	movi	r7,1
    31d0:	30800117 	ldw	r2,4(r6)
    31d4:	210b883a 	add	r5,r4,r4
    31d8:	294b883a 	add	r5,r5,r5
    31dc:	2009d0ba 	srai	r4,r4,2
    31e0:	294b883a 	add	r5,r5,r5
    31e4:	298b883a 	add	r5,r5,r6
    31e8:	2a000217 	ldw	r8,8(r5)
    31ec:	3908983a 	sll	r4,r7,r4
    31f0:	81400315 	stw	r5,12(r16)
    31f4:	82000215 	stw	r8,8(r16)
    31f8:	2088b03a 	or	r4,r4,r2
    31fc:	2c000215 	stw	r16,8(r5)
    3200:	31000115 	stw	r4,4(r6)
    3204:	44000315 	stw	r16,12(r8)
    3208:	1805d0ba 	srai	r2,r3,2
    320c:	01400044 	movi	r5,1
    3210:	288a983a 	sll	r5,r5,r2
    3214:	21404336 	bltu	r4,r5,3324 <_malloc_r+0x304>
    3218:	2144703a 	and	r2,r4,r5
    321c:	10000a1e 	bne	r2,zero,3248 <_malloc_r+0x228>
    3220:	00bfff04 	movi	r2,-4
    3224:	294b883a 	add	r5,r5,r5
    3228:	1886703a 	and	r3,r3,r2
    322c:	2144703a 	and	r2,r4,r5
    3230:	18c00104 	addi	r3,r3,4
    3234:	1000041e 	bne	r2,zero,3248 <_malloc_r+0x228>
    3238:	294b883a 	add	r5,r5,r5
    323c:	2144703a 	and	r2,r4,r5
    3240:	18c00104 	addi	r3,r3,4
    3244:	103ffc26 	beq	r2,zero,3238 <__alt_data_end+0xfffadb08>
    3248:	023fff04 	movi	r8,-4
    324c:	01c003c4 	movi	r7,15
    3250:	18c5883a 	add	r2,r3,r3
    3254:	1085883a 	add	r2,r2,r2
    3258:	1085883a 	add	r2,r2,r2
    325c:	9895883a 	add	r10,r19,r2
    3260:	52c00304 	addi	r11,r10,12
    3264:	1819883a 	mov	r12,r3
    3268:	5c000017 	ldw	r16,0(r11)
    326c:	59bffd04 	addi	r6,r11,-12
    3270:	8180041e 	bne	r16,r6,3284 <_malloc_r+0x264>
    3274:	0000ce06 	br	35b0 <_malloc_r+0x590>
    3278:	2000d70e 	bge	r4,zero,35d8 <_malloc_r+0x5b8>
    327c:	84000317 	ldw	r16,12(r16)
    3280:	8180cb26 	beq	r16,r6,35b0 <_malloc_r+0x590>
    3284:	80800117 	ldw	r2,4(r16)
    3288:	1204703a 	and	r2,r2,r8
    328c:	1449c83a 	sub	r4,r2,r17
    3290:	393ff90e 	bge	r7,r4,3278 <__alt_data_end+0xfffadb48>
    3294:	80800317 	ldw	r2,12(r16)
    3298:	80c00217 	ldw	r3,8(r16)
    329c:	89400054 	ori	r5,r17,1
    32a0:	81400115 	stw	r5,4(r16)
    32a4:	18800315 	stw	r2,12(r3)
    32a8:	10c00215 	stw	r3,8(r2)
    32ac:	8463883a 	add	r17,r16,r17
    32b0:	9c400515 	stw	r17,20(r19)
    32b4:	9c400415 	stw	r17,16(r19)
    32b8:	20800054 	ori	r2,r4,1
    32bc:	88800115 	stw	r2,4(r17)
    32c0:	8a400315 	stw	r9,12(r17)
    32c4:	8a400215 	stw	r9,8(r17)
    32c8:	8923883a 	add	r17,r17,r4
    32cc:	89000015 	stw	r4,0(r17)
    32d0:	9009883a 	mov	r4,r18
    32d4:	000ffe00 	call	ffe0 <__malloc_unlock>
    32d8:	80800204 	addi	r2,r16,8
    32dc:	003f7d06 	br	30d4 <__alt_data_end+0xfffad9a4>
    32e0:	00800304 	movi	r2,12
    32e4:	90800015 	stw	r2,0(r18)
    32e8:	0005883a 	mov	r2,zero
    32ec:	003f7906 	br	30d4 <__alt_data_end+0xfffad9a4>
    32f0:	01401f84 	movi	r5,126
    32f4:	01c00fc4 	movi	r7,63
    32f8:	003f8d06 	br	3130 <__alt_data_end+0xfffada00>
    32fc:	81000317 	ldw	r4,12(r16)
    3300:	003f6a06 	br	30ac <__alt_data_end+0xfffad97c>
    3304:	81c5883a 	add	r2,r16,r7
    3308:	10c00117 	ldw	r3,4(r2)
    330c:	9009883a 	mov	r4,r18
    3310:	18c00054 	ori	r3,r3,1
    3314:	10c00115 	stw	r3,4(r2)
    3318:	000ffe00 	call	ffe0 <__malloc_unlock>
    331c:	80800204 	addi	r2,r16,8
    3320:	003f6c06 	br	30d4 <__alt_data_end+0xfffad9a4>
    3324:	9c000217 	ldw	r16,8(r19)
    3328:	00bfff04 	movi	r2,-4
    332c:	85800117 	ldw	r22,4(r16)
    3330:	b0ac703a 	and	r22,r22,r2
    3334:	b4400336 	bltu	r22,r17,3344 <_malloc_r+0x324>
    3338:	b445c83a 	sub	r2,r22,r17
    333c:	00c003c4 	movi	r3,15
    3340:	18805d16 	blt	r3,r2,34b8 <_malloc_r+0x498>
    3344:	05c00074 	movhi	r23,1
    3348:	00800074 	movhi	r2,1
    334c:	bdd20604 	addi	r23,r23,18456
    3350:	1098f404 	addi	r2,r2,25552
    3354:	15400017 	ldw	r21,0(r2)
    3358:	b9000017 	ldw	r4,0(r23)
    335c:	00ffffc4 	movi	r3,-1
    3360:	858d883a 	add	r6,r16,r22
    3364:	8d6b883a 	add	r21,r17,r21
    3368:	20c0e426 	beq	r4,r3,36fc <_malloc_r+0x6dc>
    336c:	ad4403c4 	addi	r21,r21,4111
    3370:	00fc0004 	movi	r3,-4096
    3374:	a8ea703a 	and	r21,r21,r3
    3378:	9009883a 	mov	r4,r18
    337c:	a80b883a 	mov	r5,r21
    3380:	d9800015 	stw	r6,0(sp)
    3384:	00039780 	call	3978 <_sbrk_r>
    3388:	00ffffc4 	movi	r3,-1
    338c:	1029883a 	mov	r20,r2
    3390:	d9800017 	ldw	r6,0(sp)
    3394:	10c0a426 	beq	r2,r3,3628 <_malloc_r+0x608>
    3398:	1180a236 	bltu	r2,r6,3624 <_malloc_r+0x604>
    339c:	07000074 	movhi	fp,1
    33a0:	e7190004 	addi	fp,fp,25600
    33a4:	e0c00017 	ldw	r3,0(fp)
    33a8:	a8c7883a 	add	r3,r21,r3
    33ac:	e0c00015 	stw	r3,0(fp)
    33b0:	3500da26 	beq	r6,r20,371c <_malloc_r+0x6fc>
    33b4:	b9000017 	ldw	r4,0(r23)
    33b8:	00bfffc4 	movi	r2,-1
    33bc:	2080e426 	beq	r4,r2,3750 <_malloc_r+0x730>
    33c0:	a185c83a 	sub	r2,r20,r6
    33c4:	1885883a 	add	r2,r3,r2
    33c8:	e0800015 	stw	r2,0(fp)
    33cc:	a0c001cc 	andi	r3,r20,7
    33d0:	1800b526 	beq	r3,zero,36a8 <_malloc_r+0x688>
    33d4:	a0e9c83a 	sub	r20,r20,r3
    33d8:	00840204 	movi	r2,4104
    33dc:	a5000204 	addi	r20,r20,8
    33e0:	10c7c83a 	sub	r3,r2,r3
    33e4:	a545883a 	add	r2,r20,r21
    33e8:	1083ffcc 	andi	r2,r2,4095
    33ec:	18abc83a 	sub	r21,r3,r2
    33f0:	9009883a 	mov	r4,r18
    33f4:	a80b883a 	mov	r5,r21
    33f8:	00039780 	call	3978 <_sbrk_r>
    33fc:	00ffffc4 	movi	r3,-1
    3400:	10c0d026 	beq	r2,r3,3744 <_malloc_r+0x724>
    3404:	1507c83a 	sub	r3,r2,r20
    3408:	a8c7883a 	add	r3,r21,r3
    340c:	18c00054 	ori	r3,r3,1
    3410:	e0800017 	ldw	r2,0(fp)
    3414:	9d000215 	stw	r20,8(r19)
    3418:	a0c00115 	stw	r3,4(r20)
    341c:	a887883a 	add	r3,r21,r2
    3420:	e0c00015 	stw	r3,0(fp)
    3424:	84c00e26 	beq	r16,r19,3460 <_malloc_r+0x440>
    3428:	018003c4 	movi	r6,15
    342c:	3580a02e 	bgeu	r6,r22,36b0 <_malloc_r+0x690>
    3430:	81400117 	ldw	r5,4(r16)
    3434:	013ffe04 	movi	r4,-8
    3438:	b0bffd04 	addi	r2,r22,-12
    343c:	1104703a 	and	r2,r2,r4
    3440:	2900004c 	andi	r4,r5,1
    3444:	1108b03a 	or	r4,r2,r4
    3448:	81000115 	stw	r4,4(r16)
    344c:	01400144 	movi	r5,5
    3450:	8089883a 	add	r4,r16,r2
    3454:	21400115 	stw	r5,4(r4)
    3458:	21400215 	stw	r5,8(r4)
    345c:	3080c036 	bltu	r6,r2,3760 <_malloc_r+0x740>
    3460:	00800074 	movhi	r2,1
    3464:	1098f304 	addi	r2,r2,25548
    3468:	11000017 	ldw	r4,0(r2)
    346c:	20c0012e 	bgeu	r4,r3,3474 <_malloc_r+0x454>
    3470:	10c00015 	stw	r3,0(r2)
    3474:	00800074 	movhi	r2,1
    3478:	1098f204 	addi	r2,r2,25544
    347c:	11000017 	ldw	r4,0(r2)
    3480:	9c000217 	ldw	r16,8(r19)
    3484:	20c0012e 	bgeu	r4,r3,348c <_malloc_r+0x46c>
    3488:	10c00015 	stw	r3,0(r2)
    348c:	80c00117 	ldw	r3,4(r16)
    3490:	00bfff04 	movi	r2,-4
    3494:	1886703a 	and	r3,r3,r2
    3498:	1c45c83a 	sub	r2,r3,r17
    349c:	1c400236 	bltu	r3,r17,34a8 <_malloc_r+0x488>
    34a0:	00c003c4 	movi	r3,15
    34a4:	18800416 	blt	r3,r2,34b8 <_malloc_r+0x498>
    34a8:	9009883a 	mov	r4,r18
    34ac:	000ffe00 	call	ffe0 <__malloc_unlock>
    34b0:	0005883a 	mov	r2,zero
    34b4:	003f0706 	br	30d4 <__alt_data_end+0xfffad9a4>
    34b8:	88c00054 	ori	r3,r17,1
    34bc:	80c00115 	stw	r3,4(r16)
    34c0:	8463883a 	add	r17,r16,r17
    34c4:	10800054 	ori	r2,r2,1
    34c8:	9c400215 	stw	r17,8(r19)
    34cc:	88800115 	stw	r2,4(r17)
    34d0:	9009883a 	mov	r4,r18
    34d4:	000ffe00 	call	ffe0 <__malloc_unlock>
    34d8:	80800204 	addi	r2,r16,8
    34dc:	003efd06 	br	30d4 <__alt_data_end+0xfffad9a4>
    34e0:	00800504 	movi	r2,20
    34e4:	10c0482e 	bgeu	r2,r3,3608 <_malloc_r+0x5e8>
    34e8:	00801504 	movi	r2,84
    34ec:	10c06836 	bltu	r2,r3,3690 <_malloc_r+0x670>
    34f0:	8806d33a 	srli	r3,r17,12
    34f4:	19c01b84 	addi	r7,r3,110
    34f8:	39cb883a 	add	r5,r7,r7
    34fc:	003f0c06 	br	3130 <__alt_data_end+0xfffada00>
    3500:	3804d27a 	srli	r2,r7,9
    3504:	01000104 	movi	r4,4
    3508:	2080422e 	bgeu	r4,r2,3614 <_malloc_r+0x5f4>
    350c:	01000504 	movi	r4,20
    3510:	20807c36 	bltu	r4,r2,3704 <_malloc_r+0x6e4>
    3514:	110016c4 	addi	r4,r2,91
    3518:	210b883a 	add	r5,r4,r4
    351c:	294b883a 	add	r5,r5,r5
    3520:	294b883a 	add	r5,r5,r5
    3524:	994b883a 	add	r5,r19,r5
    3528:	28800217 	ldw	r2,8(r5)
    352c:	02000074 	movhi	r8,1
    3530:	420b5b04 	addi	r8,r8,11628
    3534:	11406326 	beq	r2,r5,36c4 <_malloc_r+0x6a4>
    3538:	01bfff04 	movi	r6,-4
    353c:	11000117 	ldw	r4,4(r2)
    3540:	2188703a 	and	r4,r4,r6
    3544:	3900022e 	bgeu	r7,r4,3550 <_malloc_r+0x530>
    3548:	10800217 	ldw	r2,8(r2)
    354c:	28bffb1e 	bne	r5,r2,353c <__alt_data_end+0xfffade0c>
    3550:	11800317 	ldw	r6,12(r2)
    3554:	99000117 	ldw	r4,4(r19)
    3558:	81800315 	stw	r6,12(r16)
    355c:	80800215 	stw	r2,8(r16)
    3560:	34000215 	stw	r16,8(r6)
    3564:	14000315 	stw	r16,12(r2)
    3568:	003f2706 	br	3208 <__alt_data_end+0xfffadad8>
    356c:	88c00054 	ori	r3,r17,1
    3570:	80c00115 	stw	r3,4(r16)
    3574:	8463883a 	add	r17,r16,r17
    3578:	34400515 	stw	r17,20(r6)
    357c:	34400415 	stw	r17,16(r6)
    3580:	10c00054 	ori	r3,r2,1
    3584:	8a400315 	stw	r9,12(r17)
    3588:	8a400215 	stw	r9,8(r17)
    358c:	88c00115 	stw	r3,4(r17)
    3590:	88a3883a 	add	r17,r17,r2
    3594:	88800015 	stw	r2,0(r17)
    3598:	9009883a 	mov	r4,r18
    359c:	000ffe00 	call	ffe0 <__malloc_unlock>
    35a0:	80800204 	addi	r2,r16,8
    35a4:	003ecb06 	br	30d4 <__alt_data_end+0xfffad9a4>
    35a8:	31000117 	ldw	r4,4(r6)
    35ac:	003f1606 	br	3208 <__alt_data_end+0xfffadad8>
    35b0:	63000044 	addi	r12,r12,1
    35b4:	608000cc 	andi	r2,r12,3
    35b8:	5ac00204 	addi	r11,r11,8
    35bc:	103f2a1e 	bne	r2,zero,3268 <__alt_data_end+0xfffadb38>
    35c0:	00002106 	br	3648 <_malloc_r+0x628>
    35c4:	80800204 	addi	r2,r16,8
    35c8:	84000517 	ldw	r16,20(r16)
    35cc:	143eb31e 	bne	r2,r16,309c <__alt_data_end+0xfffad96c>
    35d0:	18c00084 	addi	r3,r3,2
    35d4:	003eec06 	br	3188 <__alt_data_end+0xfffada58>
    35d8:	8085883a 	add	r2,r16,r2
    35dc:	10c00117 	ldw	r3,4(r2)
    35e0:	81000317 	ldw	r4,12(r16)
    35e4:	81400217 	ldw	r5,8(r16)
    35e8:	18c00054 	ori	r3,r3,1
    35ec:	10c00115 	stw	r3,4(r2)
    35f0:	29000315 	stw	r4,12(r5)
    35f4:	21400215 	stw	r5,8(r4)
    35f8:	9009883a 	mov	r4,r18
    35fc:	000ffe00 	call	ffe0 <__malloc_unlock>
    3600:	80800204 	addi	r2,r16,8
    3604:	003eb306 	br	30d4 <__alt_data_end+0xfffad9a4>
    3608:	19c016c4 	addi	r7,r3,91
    360c:	39cb883a 	add	r5,r7,r7
    3610:	003ec706 	br	3130 <__alt_data_end+0xfffada00>
    3614:	3804d1ba 	srli	r2,r7,6
    3618:	11000e04 	addi	r4,r2,56
    361c:	210b883a 	add	r5,r4,r4
    3620:	003fbe06 	br	351c <__alt_data_end+0xfffaddec>
    3624:	84ff5d26 	beq	r16,r19,339c <__alt_data_end+0xfffadc6c>
    3628:	9c000217 	ldw	r16,8(r19)
    362c:	00bfff04 	movi	r2,-4
    3630:	80c00117 	ldw	r3,4(r16)
    3634:	1886703a 	and	r3,r3,r2
    3638:	003f9706 	br	3498 <__alt_data_end+0xfffadd68>
    363c:	52800017 	ldw	r10,0(r10)
    3640:	18ffffc4 	addi	r3,r3,-1
    3644:	50805c1e 	bne	r10,r2,37b8 <_malloc_r+0x798>
    3648:	190000cc 	andi	r4,r3,3
    364c:	50bffe04 	addi	r2,r10,-8
    3650:	203ffa1e 	bne	r4,zero,363c <__alt_data_end+0xfffadf0c>
    3654:	98800117 	ldw	r2,4(r19)
    3658:	0146303a 	nor	r3,zero,r5
    365c:	1884703a 	and	r2,r3,r2
    3660:	98800115 	stw	r2,4(r19)
    3664:	294b883a 	add	r5,r5,r5
    3668:	117f2e36 	bltu	r2,r5,3324 <__alt_data_end+0xfffadbf4>
    366c:	283f2d26 	beq	r5,zero,3324 <__alt_data_end+0xfffadbf4>
    3670:	1146703a 	and	r3,r2,r5
    3674:	1800521e 	bne	r3,zero,37c0 <_malloc_r+0x7a0>
    3678:	6007883a 	mov	r3,r12
    367c:	294b883a 	add	r5,r5,r5
    3680:	1148703a 	and	r4,r2,r5
    3684:	18c00104 	addi	r3,r3,4
    3688:	203ffc26 	beq	r4,zero,367c <__alt_data_end+0xfffadf4c>
    368c:	003ef006 	br	3250 <__alt_data_end+0xfffadb20>
    3690:	00805504 	movi	r2,340
    3694:	10c01336 	bltu	r2,r3,36e4 <_malloc_r+0x6c4>
    3698:	8806d3fa 	srli	r3,r17,15
    369c:	19c01dc4 	addi	r7,r3,119
    36a0:	39cb883a 	add	r5,r7,r7
    36a4:	003ea206 	br	3130 <__alt_data_end+0xfffada00>
    36a8:	00c40004 	movi	r3,4096
    36ac:	003f4d06 	br	33e4 <__alt_data_end+0xfffadcb4>
    36b0:	00800044 	movi	r2,1
    36b4:	a0800115 	stw	r2,4(r20)
    36b8:	a021883a 	mov	r16,r20
    36bc:	0007883a 	mov	r3,zero
    36c0:	003f7506 	br	3498 <__alt_data_end+0xfffadd68>
    36c4:	200bd0ba 	srai	r5,r4,2
    36c8:	01800044 	movi	r6,1
    36cc:	41000117 	ldw	r4,4(r8)
    36d0:	314a983a 	sll	r5,r6,r5
    36d4:	100d883a 	mov	r6,r2
    36d8:	2908b03a 	or	r4,r5,r4
    36dc:	41000115 	stw	r4,4(r8)
    36e0:	003f9d06 	br	3558 <__alt_data_end+0xfffade28>
    36e4:	00815504 	movi	r2,1364
    36e8:	10c01336 	bltu	r2,r3,3738 <_malloc_r+0x718>
    36ec:	8806d4ba 	srli	r3,r17,18
    36f0:	19c01f04 	addi	r7,r3,124
    36f4:	39cb883a 	add	r5,r7,r7
    36f8:	003e8d06 	br	3130 <__alt_data_end+0xfffada00>
    36fc:	ad400404 	addi	r21,r21,16
    3700:	003f1d06 	br	3378 <__alt_data_end+0xfffadc48>
    3704:	01001504 	movi	r4,84
    3708:	20801c36 	bltu	r4,r2,377c <_malloc_r+0x75c>
    370c:	3804d33a 	srli	r2,r7,12
    3710:	11001b84 	addi	r4,r2,110
    3714:	210b883a 	add	r5,r4,r4
    3718:	003f8006 	br	351c <__alt_data_end+0xfffaddec>
    371c:	3083ffcc 	andi	r2,r6,4095
    3720:	103f241e 	bne	r2,zero,33b4 <__alt_data_end+0xfffadc84>
    3724:	99000217 	ldw	r4,8(r19)
    3728:	ad85883a 	add	r2,r21,r22
    372c:	10800054 	ori	r2,r2,1
    3730:	20800115 	stw	r2,4(r4)
    3734:	003f4a06 	br	3460 <__alt_data_end+0xfffadd30>
    3738:	01403f04 	movi	r5,252
    373c:	01c01f84 	movi	r7,126
    3740:	003e7b06 	br	3130 <__alt_data_end+0xfffada00>
    3744:	00c00044 	movi	r3,1
    3748:	002b883a 	mov	r21,zero
    374c:	003f3006 	br	3410 <__alt_data_end+0xfffadce0>
    3750:	00800074 	movhi	r2,1
    3754:	10920604 	addi	r2,r2,18456
    3758:	15000015 	stw	r20,0(r2)
    375c:	003f1b06 	br	33cc <__alt_data_end+0xfffadc9c>
    3760:	9009883a 	mov	r4,r18
    3764:	81400204 	addi	r5,r16,8
    3768:	0007d340 	call	7d34 <_free_r>
    376c:	00800074 	movhi	r2,1
    3770:	10990004 	addi	r2,r2,25600
    3774:	10c00017 	ldw	r3,0(r2)
    3778:	003f3906 	br	3460 <__alt_data_end+0xfffadd30>
    377c:	01005504 	movi	r4,340
    3780:	20800436 	bltu	r4,r2,3794 <_malloc_r+0x774>
    3784:	3804d3fa 	srli	r2,r7,15
    3788:	11001dc4 	addi	r4,r2,119
    378c:	210b883a 	add	r5,r4,r4
    3790:	003f6206 	br	351c <__alt_data_end+0xfffaddec>
    3794:	01015504 	movi	r4,1364
    3798:	20800436 	bltu	r4,r2,37ac <_malloc_r+0x78c>
    379c:	3804d4ba 	srli	r2,r7,18
    37a0:	11001f04 	addi	r4,r2,124
    37a4:	210b883a 	add	r5,r4,r4
    37a8:	003f5c06 	br	351c <__alt_data_end+0xfffaddec>
    37ac:	01403f04 	movi	r5,252
    37b0:	01001f84 	movi	r4,126
    37b4:	003f5906 	br	351c <__alt_data_end+0xfffaddec>
    37b8:	98800117 	ldw	r2,4(r19)
    37bc:	003fa906 	br	3664 <__alt_data_end+0xfffadf34>
    37c0:	6007883a 	mov	r3,r12
    37c4:	003ea206 	br	3250 <__alt_data_end+0xfffadb20>

000037c8 <_printf_r>:
    37c8:	defffd04 	addi	sp,sp,-12
    37cc:	dfc00015 	stw	ra,0(sp)
    37d0:	d9800115 	stw	r6,4(sp)
    37d4:	d9c00215 	stw	r7,8(sp)
    37d8:	280d883a 	mov	r6,r5
    37dc:	21400217 	ldw	r5,8(r4)
    37e0:	d9c00104 	addi	r7,sp,4
    37e4:	0003a640 	call	3a64 <___vfprintf_internal_r>
    37e8:	dfc00017 	ldw	ra,0(sp)
    37ec:	dec00304 	addi	sp,sp,12
    37f0:	f800283a 	ret

000037f4 <printf>:
    37f4:	defffc04 	addi	sp,sp,-16
    37f8:	dfc00015 	stw	ra,0(sp)
    37fc:	d9400115 	stw	r5,4(sp)
    3800:	d9800215 	stw	r6,8(sp)
    3804:	d9c00315 	stw	r7,12(sp)
    3808:	00800074 	movhi	r2,1
    380c:	10920904 	addi	r2,r2,18468
    3810:	10800017 	ldw	r2,0(r2)
    3814:	200b883a 	mov	r5,r4
    3818:	d9800104 	addi	r6,sp,4
    381c:	11000217 	ldw	r4,8(r2)
    3820:	0005b600 	call	5b60 <__vfprintf_internal>
    3824:	dfc00017 	ldw	ra,0(sp)
    3828:	dec00404 	addi	sp,sp,16
    382c:	f800283a 	ret

00003830 <_puts_r>:
    3830:	defff604 	addi	sp,sp,-40
    3834:	dc000715 	stw	r16,28(sp)
    3838:	2021883a 	mov	r16,r4
    383c:	2809883a 	mov	r4,r5
    3840:	dc400815 	stw	r17,32(sp)
    3844:	dfc00915 	stw	ra,36(sp)
    3848:	2823883a 	mov	r17,r5
    384c:	00039cc0 	call	39cc <strlen>
    3850:	00c00074 	movhi	r3,1
    3854:	18d20904 	addi	r3,r3,18468
    3858:	18c00017 	ldw	r3,0(r3)
    385c:	11000044 	addi	r4,r2,1
    3860:	d8800115 	stw	r2,4(sp)
    3864:	18c00217 	ldw	r3,8(r3)
    3868:	01400074 	movhi	r5,1
    386c:	294a8104 	addi	r5,r5,10756
    3870:	1880030b 	ldhu	r2,12(r3)
    3874:	d9400215 	stw	r5,8(sp)
    3878:	d9000615 	stw	r4,24(sp)
    387c:	01400044 	movi	r5,1
    3880:	01000084 	movi	r4,2
    3884:	d9000515 	stw	r4,20(sp)
    3888:	dc400015 	stw	r17,0(sp)
    388c:	d9400315 	stw	r5,12(sp)
    3890:	dec00415 	stw	sp,16(sp)
    3894:	1108000c 	andi	r4,r2,8192
    3898:	2000061e 	bne	r4,zero,38b4 <_puts_r+0x84>
    389c:	19401917 	ldw	r5,100(r3)
    38a0:	0137ffc4 	movi	r4,-8193
    38a4:	10880014 	ori	r2,r2,8192
    38a8:	2908703a 	and	r4,r5,r4
    38ac:	1880030d 	sth	r2,12(r3)
    38b0:	19001915 	stw	r4,100(r3)
    38b4:	81400217 	ldw	r5,8(r16)
    38b8:	8009883a 	mov	r4,r16
    38bc:	d9800404 	addi	r6,sp,16
    38c0:	00080240 	call	8024 <__sfvwrite_r>
    38c4:	1000061e 	bne	r2,zero,38e0 <_puts_r+0xb0>
    38c8:	00800284 	movi	r2,10
    38cc:	dfc00917 	ldw	ra,36(sp)
    38d0:	dc400817 	ldw	r17,32(sp)
    38d4:	dc000717 	ldw	r16,28(sp)
    38d8:	dec00a04 	addi	sp,sp,40
    38dc:	f800283a 	ret
    38e0:	00bfffc4 	movi	r2,-1
    38e4:	003ff906 	br	38cc <__alt_data_end+0xfffae19c>

000038e8 <puts>:
    38e8:	00800074 	movhi	r2,1
    38ec:	10920904 	addi	r2,r2,18468
    38f0:	200b883a 	mov	r5,r4
    38f4:	11000017 	ldw	r4,0(r2)
    38f8:	00038301 	jmpi	3830 <_puts_r>

000038fc <srand>:
    38fc:	00800074 	movhi	r2,1
    3900:	10920904 	addi	r2,r2,18468
    3904:	10800017 	ldw	r2,0(r2)
    3908:	11002915 	stw	r4,164(r2)
    390c:	10002a15 	stw	zero,168(r2)
    3910:	f800283a 	ret

00003914 <rand>:
    3914:	00800074 	movhi	r2,1
    3918:	defffe04 	addi	sp,sp,-8
    391c:	10920904 	addi	r2,r2,18468
    3920:	dc000015 	stw	r16,0(sp)
    3924:	14000017 	ldw	r16,0(r2)
    3928:	dfc00115 	stw	ra,4(sp)
    392c:	01932574 	movhi	r6,19605
    3930:	81002917 	ldw	r4,164(r16)
    3934:	81402a17 	ldw	r5,168(r16)
    3938:	01d614b4 	movhi	r7,22610
    393c:	319fcb44 	addi	r6,r6,32557
    3940:	39fd0b44 	addi	r7,r7,-3027
    3944:	000c4540 	call	c454 <__muldi3>
    3948:	11000044 	addi	r4,r2,1
    394c:	2085803a 	cmpltu	r2,r4,r2
    3950:	10c7883a 	add	r3,r2,r3
    3954:	00a00034 	movhi	r2,32768
    3958:	10bfffc4 	addi	r2,r2,-1
    395c:	1884703a 	and	r2,r3,r2
    3960:	81002915 	stw	r4,164(r16)
    3964:	80c02a15 	stw	r3,168(r16)
    3968:	dfc00117 	ldw	ra,4(sp)
    396c:	dc000017 	ldw	r16,0(sp)
    3970:	dec00204 	addi	sp,sp,8
    3974:	f800283a 	ret

00003978 <_sbrk_r>:
    3978:	defffd04 	addi	sp,sp,-12
    397c:	dc000015 	stw	r16,0(sp)
    3980:	04000074 	movhi	r16,1
    3984:	dc400115 	stw	r17,4(sp)
    3988:	8418f504 	addi	r16,r16,25556
    398c:	2023883a 	mov	r17,r4
    3990:	2809883a 	mov	r4,r5
    3994:	dfc00215 	stw	ra,8(sp)
    3998:	80000015 	stw	zero,0(r16)
    399c:	00101d40 	call	101d4 <sbrk>
    39a0:	00ffffc4 	movi	r3,-1
    39a4:	10c00526 	beq	r2,r3,39bc <_sbrk_r+0x44>
    39a8:	dfc00217 	ldw	ra,8(sp)
    39ac:	dc400117 	ldw	r17,4(sp)
    39b0:	dc000017 	ldw	r16,0(sp)
    39b4:	dec00304 	addi	sp,sp,12
    39b8:	f800283a 	ret
    39bc:	80c00017 	ldw	r3,0(r16)
    39c0:	183ff926 	beq	r3,zero,39a8 <__alt_data_end+0xfffae278>
    39c4:	88c00015 	stw	r3,0(r17)
    39c8:	003ff706 	br	39a8 <__alt_data_end+0xfffae278>

000039cc <strlen>:
    39cc:	208000cc 	andi	r2,r4,3
    39d0:	10002026 	beq	r2,zero,3a54 <strlen+0x88>
    39d4:	20800007 	ldb	r2,0(r4)
    39d8:	10002026 	beq	r2,zero,3a5c <strlen+0x90>
    39dc:	2005883a 	mov	r2,r4
    39e0:	00000206 	br	39ec <strlen+0x20>
    39e4:	10c00007 	ldb	r3,0(r2)
    39e8:	18001826 	beq	r3,zero,3a4c <strlen+0x80>
    39ec:	10800044 	addi	r2,r2,1
    39f0:	10c000cc 	andi	r3,r2,3
    39f4:	183ffb1e 	bne	r3,zero,39e4 <__alt_data_end+0xfffae2b4>
    39f8:	10c00017 	ldw	r3,0(r2)
    39fc:	01ffbff4 	movhi	r7,65279
    3a00:	39ffbfc4 	addi	r7,r7,-257
    3a04:	00ca303a 	nor	r5,zero,r3
    3a08:	01a02074 	movhi	r6,32897
    3a0c:	19c7883a 	add	r3,r3,r7
    3a10:	31a02004 	addi	r6,r6,-32640
    3a14:	1946703a 	and	r3,r3,r5
    3a18:	1986703a 	and	r3,r3,r6
    3a1c:	1800091e 	bne	r3,zero,3a44 <strlen+0x78>
    3a20:	10800104 	addi	r2,r2,4
    3a24:	10c00017 	ldw	r3,0(r2)
    3a28:	19cb883a 	add	r5,r3,r7
    3a2c:	00c6303a 	nor	r3,zero,r3
    3a30:	28c6703a 	and	r3,r5,r3
    3a34:	1986703a 	and	r3,r3,r6
    3a38:	183ff926 	beq	r3,zero,3a20 <__alt_data_end+0xfffae2f0>
    3a3c:	00000106 	br	3a44 <strlen+0x78>
    3a40:	10800044 	addi	r2,r2,1
    3a44:	10c00007 	ldb	r3,0(r2)
    3a48:	183ffd1e 	bne	r3,zero,3a40 <__alt_data_end+0xfffae310>
    3a4c:	1105c83a 	sub	r2,r2,r4
    3a50:	f800283a 	ret
    3a54:	2005883a 	mov	r2,r4
    3a58:	003fe706 	br	39f8 <__alt_data_end+0xfffae2c8>
    3a5c:	0005883a 	mov	r2,zero
    3a60:	f800283a 	ret

00003a64 <___vfprintf_internal_r>:
    3a64:	defeb604 	addi	sp,sp,-1320
    3a68:	dfc14915 	stw	ra,1316(sp)
    3a6c:	ddc14715 	stw	r23,1308(sp)
    3a70:	dd814615 	stw	r22,1304(sp)
    3a74:	202f883a 	mov	r23,r4
    3a78:	282d883a 	mov	r22,r5
    3a7c:	d9812a15 	stw	r6,1192(sp)
    3a80:	d9c12d15 	stw	r7,1204(sp)
    3a84:	df014815 	stw	fp,1312(sp)
    3a88:	dd414515 	stw	r21,1300(sp)
    3a8c:	dd014415 	stw	r20,1296(sp)
    3a90:	dcc14315 	stw	r19,1292(sp)
    3a94:	dc814215 	stw	r18,1288(sp)
    3a98:	dc414115 	stw	r17,1284(sp)
    3a9c:	dc014015 	stw	r16,1280(sp)
    3aa0:	00086e40 	call	86e4 <_localeconv_r>
    3aa4:	10800017 	ldw	r2,0(r2)
    3aa8:	1009883a 	mov	r4,r2
    3aac:	d8813515 	stw	r2,1236(sp)
    3ab0:	00039cc0 	call	39cc <strlen>
    3ab4:	d8813815 	stw	r2,1248(sp)
    3ab8:	b8000226 	beq	r23,zero,3ac4 <___vfprintf_internal_r+0x60>
    3abc:	b8800e17 	ldw	r2,56(r23)
    3ac0:	10010526 	beq	r2,zero,3ed8 <___vfprintf_internal_r+0x474>
    3ac4:	b0c0030b 	ldhu	r3,12(r22)
    3ac8:	1908000c 	andi	r4,r3,8192
    3acc:	1805883a 	mov	r2,r3
    3ad0:	2000071e 	bne	r4,zero,3af0 <___vfprintf_internal_r+0x8c>
    3ad4:	b1001917 	ldw	r4,100(r22)
    3ad8:	18880014 	ori	r2,r3,8192
    3adc:	00f7ffc4 	movi	r3,-8193
    3ae0:	20c8703a 	and	r4,r4,r3
    3ae4:	b080030d 	sth	r2,12(r22)
    3ae8:	1007883a 	mov	r3,r2
    3aec:	b1001915 	stw	r4,100(r22)
    3af0:	1100020c 	andi	r4,r2,8
    3af4:	2000a826 	beq	r4,zero,3d98 <___vfprintf_internal_r+0x334>
    3af8:	b1000417 	ldw	r4,16(r22)
    3afc:	2000a626 	beq	r4,zero,3d98 <___vfprintf_internal_r+0x334>
    3b00:	1080068c 	andi	r2,r2,26
    3b04:	01000284 	movi	r4,10
    3b08:	1100ac26 	beq	r2,r4,3dbc <___vfprintf_internal_r+0x358>
    3b0c:	d8c10e04 	addi	r3,sp,1080
    3b10:	d9010dc4 	addi	r4,sp,1079
    3b14:	d9400404 	addi	r5,sp,16
    3b18:	05000074 	movhi	r20,1
    3b1c:	1905c83a 	sub	r2,r3,r4
    3b20:	a50a9284 	addi	r20,r20,10826
    3b24:	d8c12815 	stw	r3,1184(sp)
    3b28:	d9012915 	stw	r4,1188(sp)
    3b2c:	d9411e15 	stw	r5,1144(sp)
    3b30:	d8012015 	stw	zero,1152(sp)
    3b34:	d8011f15 	stw	zero,1148(sp)
    3b38:	d8013315 	stw	zero,1228(sp)
    3b3c:	d8013715 	stw	zero,1244(sp)
    3b40:	d8013915 	stw	zero,1252(sp)
    3b44:	d8013b15 	stw	zero,1260(sp)
    3b48:	d8013a15 	stw	zero,1256(sp)
    3b4c:	d8012f15 	stw	zero,1212(sp)
    3b50:	2811883a 	mov	r8,r5
    3b54:	d8813c15 	stw	r2,1264(sp)
    3b58:	d8c12a17 	ldw	r3,1192(sp)
    3b5c:	18800007 	ldb	r2,0(r3)
    3b60:	10021326 	beq	r2,zero,43b0 <___vfprintf_internal_r+0x94c>
    3b64:	00c00944 	movi	r3,37
    3b68:	dc012a17 	ldw	r16,1192(sp)
    3b6c:	10c0021e 	bne	r2,r3,3b78 <___vfprintf_internal_r+0x114>
    3b70:	00001606 	br	3bcc <___vfprintf_internal_r+0x168>
    3b74:	10c08526 	beq	r2,r3,3d8c <___vfprintf_internal_r+0x328>
    3b78:	84000044 	addi	r16,r16,1
    3b7c:	80800007 	ldb	r2,0(r16)
    3b80:	103ffc1e 	bne	r2,zero,3b74 <__alt_data_end+0xfffae444>
    3b84:	d9012a17 	ldw	r4,1192(sp)
    3b88:	8123c83a 	sub	r17,r16,r4
    3b8c:	88000f26 	beq	r17,zero,3bcc <___vfprintf_internal_r+0x168>
    3b90:	d8812a17 	ldw	r2,1192(sp)
    3b94:	d8c12017 	ldw	r3,1152(sp)
    3b98:	44400115 	stw	r17,4(r8)
    3b9c:	40800015 	stw	r2,0(r8)
    3ba0:	d8811f17 	ldw	r2,1148(sp)
    3ba4:	1c47883a 	add	r3,r3,r17
    3ba8:	d8c12015 	stw	r3,1152(sp)
    3bac:	10800044 	addi	r2,r2,1
    3bb0:	d8811f15 	stw	r2,1148(sp)
    3bb4:	00c001c4 	movi	r3,7
    3bb8:	1880b516 	blt	r3,r2,3e90 <___vfprintf_internal_r+0x42c>
    3bbc:	42000204 	addi	r8,r8,8
    3bc0:	d8c12f17 	ldw	r3,1212(sp)
    3bc4:	1c47883a 	add	r3,r3,r17
    3bc8:	d8c12f15 	stw	r3,1212(sp)
    3bcc:	80800007 	ldb	r2,0(r16)
    3bd0:	1000b626 	beq	r2,zero,3eac <___vfprintf_internal_r+0x448>
    3bd4:	80800044 	addi	r2,r16,1
    3bd8:	84000047 	ldb	r16,1(r16)
    3bdc:	0027883a 	mov	r19,zero
    3be0:	0039883a 	mov	fp,zero
    3be4:	dcc12b05 	stb	r19,1196(sp)
    3be8:	d8012785 	stb	zero,1182(sp)
    3bec:	027fffc4 	movi	r9,-1
    3bf0:	d8012e15 	stw	zero,1208(sp)
    3bf4:	04401604 	movi	r17,88
    3bf8:	04800244 	movi	r18,9
    3bfc:	da012a15 	stw	r8,1192(sp)
    3c00:	e027883a 	mov	r19,fp
    3c04:	17000044 	addi	fp,r2,1
    3c08:	80bff804 	addi	r2,r16,-32
    3c0c:	88831236 	bltu	r17,r2,4858 <___vfprintf_internal_r+0xdf4>
    3c10:	100490ba 	slli	r2,r2,2
    3c14:	01000034 	movhi	r4,0
    3c18:	210f0a04 	addi	r4,r4,15400
    3c1c:	1105883a 	add	r2,r2,r4
    3c20:	10800017 	ldw	r2,0(r2)
    3c24:	1000683a 	jmp	r2
    3c28:	00004774 	movhi	zero,285
    3c2c:	00004858 	cmpnei	zero,zero,289
    3c30:	00004858 	cmpnei	zero,zero,289
    3c34:	00004790 	cmplti	zero,zero,286
    3c38:	00004858 	cmpnei	zero,zero,289
    3c3c:	00004858 	cmpnei	zero,zero,289
    3c40:	00004858 	cmpnei	zero,zero,289
    3c44:	00004858 	cmpnei	zero,zero,289
    3c48:	00004858 	cmpnei	zero,zero,289
    3c4c:	00004858 	cmpnei	zero,zero,289
    3c50:	000047a0 	cmpeqi	zero,zero,286
    3c54:	000047c8 	cmpgei	zero,zero,287
    3c58:	00004858 	cmpnei	zero,zero,289
    3c5c:	00003ee4 	muli	zero,zero,251
    3c60:	00003ef4 	movhi	zero,251
    3c64:	00004858 	cmpnei	zero,zero,289
    3c68:	00003f44 	movi	zero,253
    3c6c:	00003f54 	movui	zero,253
    3c70:	00003f54 	movui	zero,253
    3c74:	00003f54 	movui	zero,253
    3c78:	00003f54 	movui	zero,253
    3c7c:	00003f54 	movui	zero,253
    3c80:	00003f54 	movui	zero,253
    3c84:	00003f54 	movui	zero,253
    3c88:	00003f54 	movui	zero,253
    3c8c:	00003f54 	movui	zero,253
    3c90:	00004858 	cmpnei	zero,zero,289
    3c94:	00004858 	cmpnei	zero,zero,289
    3c98:	00004858 	cmpnei	zero,zero,289
    3c9c:	00004858 	cmpnei	zero,zero,289
    3ca0:	00004858 	cmpnei	zero,zero,289
    3ca4:	00004858 	cmpnei	zero,zero,289
    3ca8:	00004858 	cmpnei	zero,zero,289
    3cac:	00004858 	cmpnei	zero,zero,289
    3cb0:	00004858 	cmpnei	zero,zero,289
    3cb4:	00004858 	cmpnei	zero,zero,289
    3cb8:	00003f98 	cmpnei	zero,zero,254
    3cbc:	000043b8 	rdprs	zero,zero,270
    3cc0:	00004858 	cmpnei	zero,zero,289
    3cc4:	000043b8 	rdprs	zero,zero,270
    3cc8:	00004858 	cmpnei	zero,zero,289
    3ccc:	00004858 	cmpnei	zero,zero,289
    3cd0:	00004858 	cmpnei	zero,zero,289
    3cd4:	00004858 	cmpnei	zero,zero,289
    3cd8:	00004460 	cmpeqi	zero,zero,273
    3cdc:	00004858 	cmpnei	zero,zero,289
    3ce0:	00004858 	cmpnei	zero,zero,289
    3ce4:	00004470 	cmpltui	zero,zero,273
    3ce8:	00004858 	cmpnei	zero,zero,289
    3cec:	00004858 	cmpnei	zero,zero,289
    3cf0:	00004858 	cmpnei	zero,zero,289
    3cf4:	00004858 	cmpnei	zero,zero,289
    3cf8:	00004858 	cmpnei	zero,zero,289
    3cfc:	000044b4 	movhi	zero,274
    3d00:	00004858 	cmpnei	zero,zero,289
    3d04:	00004858 	cmpnei	zero,zero,289
    3d08:	000044ec 	andhi	zero,zero,275
    3d0c:	00004858 	cmpnei	zero,zero,289
    3d10:	00004858 	cmpnei	zero,zero,289
    3d14:	00004858 	cmpnei	zero,zero,289
    3d18:	00004858 	cmpnei	zero,zero,289
    3d1c:	00004858 	cmpnei	zero,zero,289
    3d20:	00004858 	cmpnei	zero,zero,289
    3d24:	00004858 	cmpnei	zero,zero,289
    3d28:	00004858 	cmpnei	zero,zero,289
    3d2c:	00004858 	cmpnei	zero,zero,289
    3d30:	00004858 	cmpnei	zero,zero,289
    3d34:	00004728 	cmpgeui	zero,zero,284
    3d38:	000046d4 	movui	zero,283
    3d3c:	000043b8 	rdprs	zero,zero,270
    3d40:	000043b8 	rdprs	zero,zero,270
    3d44:	000043b8 	rdprs	zero,zero,270
    3d48:	00004718 	cmpnei	zero,zero,284
    3d4c:	000046d4 	movui	zero,283
    3d50:	00004858 	cmpnei	zero,zero,289
    3d54:	00004858 	cmpnei	zero,zero,289
    3d58:	000045f0 	cmpltui	zero,zero,279
    3d5c:	00004858 	cmpnei	zero,zero,289
    3d60:	00004608 	cmpgei	zero,zero,280
    3d64:	00004648 	cmpgei	zero,zero,281
    3d68:	00004688 	cmpgei	zero,zero,282
    3d6c:	00004554 	movui	zero,277
    3d70:	00004858 	cmpnei	zero,zero,289
    3d74:	000047dc 	xori	zero,zero,287
    3d78:	00004858 	cmpnei	zero,zero,289
    3d7c:	00004564 	muli	zero,zero,277
    3d80:	00004858 	cmpnei	zero,zero,289
    3d84:	00004858 	cmpnei	zero,zero,289
    3d88:	000045a4 	muli	zero,zero,278
    3d8c:	d9412a17 	ldw	r5,1192(sp)
    3d90:	8163c83a 	sub	r17,r16,r5
    3d94:	003f7d06 	br	3b8c <__alt_data_end+0xfffae45c>
    3d98:	b809883a 	mov	r4,r23
    3d9c:	b00b883a 	mov	r5,r22
    3da0:	0005b840 	call	5b84 <__swsetup_r>
    3da4:	10002d1e 	bne	r2,zero,3e5c <___vfprintf_internal_r+0x3f8>
    3da8:	b0c0030b 	ldhu	r3,12(r22)
    3dac:	01000284 	movi	r4,10
    3db0:	1805883a 	mov	r2,r3
    3db4:	1080068c 	andi	r2,r2,26
    3db8:	113f541e 	bne	r2,r4,3b0c <__alt_data_end+0xfffae3dc>
    3dbc:	b080038b 	ldhu	r2,14(r22)
    3dc0:	113fffcc 	andi	r4,r2,65535
    3dc4:	2120001c 	xori	r4,r4,32768
    3dc8:	21200004 	addi	r4,r4,-32768
    3dcc:	203f4f16 	blt	r4,zero,3b0c <__alt_data_end+0xfffae3dc>
    3dd0:	b2c01917 	ldw	r11,100(r22)
    3dd4:	b2800717 	ldw	r10,28(r22)
    3dd8:	b2400917 	ldw	r9,36(r22)
    3ddc:	d9812a17 	ldw	r6,1192(sp)
    3de0:	d9c12d17 	ldw	r7,1204(sp)
    3de4:	02010004 	movi	r8,1024
    3de8:	18ffff4c 	andi	r3,r3,65533
    3dec:	d881078d 	sth	r2,1054(sp)
    3df0:	b809883a 	mov	r4,r23
    3df4:	d8800404 	addi	r2,sp,16
    3df8:	d9410404 	addi	r5,sp,1040
    3dfc:	d8c1070d 	sth	r3,1052(sp)
    3e00:	dac11d15 	stw	r11,1140(sp)
    3e04:	da810b15 	stw	r10,1068(sp)
    3e08:	da410d15 	stw	r9,1076(sp)
    3e0c:	d8810415 	stw	r2,1040(sp)
    3e10:	d8810815 	stw	r2,1056(sp)
    3e14:	da010615 	stw	r8,1048(sp)
    3e18:	da010915 	stw	r8,1060(sp)
    3e1c:	d8010a15 	stw	zero,1064(sp)
    3e20:	0003a640 	call	3a64 <___vfprintf_internal_r>
    3e24:	1021883a 	mov	r16,r2
    3e28:	10000416 	blt	r2,zero,3e3c <___vfprintf_internal_r+0x3d8>
    3e2c:	b809883a 	mov	r4,r23
    3e30:	d9410404 	addi	r5,sp,1040
    3e34:	00076040 	call	7604 <_fflush_r>
    3e38:	1007301e 	bne	r2,zero,5afc <___vfprintf_internal_r+0x2098>
    3e3c:	d881070b 	ldhu	r2,1052(sp)
    3e40:	1080100c 	andi	r2,r2,64
    3e44:	10000326 	beq	r2,zero,3e54 <___vfprintf_internal_r+0x3f0>
    3e48:	b080030b 	ldhu	r2,12(r22)
    3e4c:	10801014 	ori	r2,r2,64
    3e50:	b080030d 	sth	r2,12(r22)
    3e54:	8005883a 	mov	r2,r16
    3e58:	00000106 	br	3e60 <___vfprintf_internal_r+0x3fc>
    3e5c:	00bfffc4 	movi	r2,-1
    3e60:	dfc14917 	ldw	ra,1316(sp)
    3e64:	df014817 	ldw	fp,1312(sp)
    3e68:	ddc14717 	ldw	r23,1308(sp)
    3e6c:	dd814617 	ldw	r22,1304(sp)
    3e70:	dd414517 	ldw	r21,1300(sp)
    3e74:	dd014417 	ldw	r20,1296(sp)
    3e78:	dcc14317 	ldw	r19,1292(sp)
    3e7c:	dc814217 	ldw	r18,1288(sp)
    3e80:	dc414117 	ldw	r17,1284(sp)
    3e84:	dc014017 	ldw	r16,1280(sp)
    3e88:	dec14a04 	addi	sp,sp,1320
    3e8c:	f800283a 	ret
    3e90:	b809883a 	mov	r4,r23
    3e94:	b00b883a 	mov	r5,r22
    3e98:	d9811e04 	addi	r6,sp,1144
    3e9c:	000a6a80 	call	a6a8 <__sprint_r>
    3ea0:	1000081e 	bne	r2,zero,3ec4 <___vfprintf_internal_r+0x460>
    3ea4:	da000404 	addi	r8,sp,16
    3ea8:	003f4506 	br	3bc0 <__alt_data_end+0xfffae490>
    3eac:	d8812017 	ldw	r2,1152(sp)
    3eb0:	10000426 	beq	r2,zero,3ec4 <___vfprintf_internal_r+0x460>
    3eb4:	b809883a 	mov	r4,r23
    3eb8:	b00b883a 	mov	r5,r22
    3ebc:	d9811e04 	addi	r6,sp,1144
    3ec0:	000a6a80 	call	a6a8 <__sprint_r>
    3ec4:	b080030b 	ldhu	r2,12(r22)
    3ec8:	1080100c 	andi	r2,r2,64
    3ecc:	103fe31e 	bne	r2,zero,3e5c <__alt_data_end+0xfffae72c>
    3ed0:	d8812f17 	ldw	r2,1212(sp)
    3ed4:	003fe206 	br	3e60 <__alt_data_end+0xfffae730>
    3ed8:	b809883a 	mov	r4,r23
    3edc:	0007bc00 	call	7bc0 <__sinit>
    3ee0:	003ef806 	br	3ac4 <__alt_data_end+0xfffae394>
    3ee4:	e005883a 	mov	r2,fp
    3ee8:	9cc00114 	ori	r19,r19,4
    3eec:	e4000007 	ldb	r16,0(fp)
    3ef0:	003f4406 	br	3c04 <__alt_data_end+0xfffae4d4>
    3ef4:	e4000007 	ldb	r16,0(fp)
    3ef8:	01000a84 	movi	r4,42
    3efc:	e0800044 	addi	r2,fp,1
    3f00:	8106f626 	beq	r16,r4,5adc <___vfprintf_internal_r+0x2078>
    3f04:	857ff404 	addi	r21,r16,-48
    3f08:	1039883a 	mov	fp,r2
    3f0c:	0013883a 	mov	r9,zero
    3f10:	957f3d36 	bltu	r18,r21,3c08 <__alt_data_end+0xfffae4d8>
    3f14:	0009883a 	mov	r4,zero
    3f18:	01400284 	movi	r5,10
    3f1c:	000d1bc0 	call	d1bc <__mulsi3>
    3f20:	e4000007 	ldb	r16,0(fp)
    3f24:	a889883a 	add	r4,r21,r2
    3f28:	e7000044 	addi	fp,fp,1
    3f2c:	857ff404 	addi	r21,r16,-48
    3f30:	957ff92e 	bgeu	r18,r21,3f18 <__alt_data_end+0xfffae7e8>
    3f34:	2013883a 	mov	r9,r4
    3f38:	203f330e 	bge	r4,zero,3c08 <__alt_data_end+0xfffae4d8>
    3f3c:	027fffc4 	movi	r9,-1
    3f40:	003f3106 	br	3c08 <__alt_data_end+0xfffae4d8>
    3f44:	9cc02014 	ori	r19,r19,128
    3f48:	e005883a 	mov	r2,fp
    3f4c:	e4000007 	ldb	r16,0(fp)
    3f50:	003f2c06 	br	3c04 <__alt_data_end+0xfffae4d4>
    3f54:	857ff404 	addi	r21,r16,-48
    3f58:	d8012e15 	stw	zero,1208(sp)
    3f5c:	e021883a 	mov	r16,fp
    3f60:	0009883a 	mov	r4,zero
    3f64:	da412c15 	stw	r9,1200(sp)
    3f68:	01400284 	movi	r5,10
    3f6c:	000d1bc0 	call	d1bc <__mulsi3>
    3f70:	81400007 	ldb	r5,0(r16)
    3f74:	1549883a 	add	r4,r2,r21
    3f78:	e7000044 	addi	fp,fp,1
    3f7c:	2d7ff404 	addi	r21,r5,-48
    3f80:	e021883a 	mov	r16,fp
    3f84:	957ff82e 	bgeu	r18,r21,3f68 <__alt_data_end+0xfffae838>
    3f88:	2821883a 	mov	r16,r5
    3f8c:	d9012e15 	stw	r4,1208(sp)
    3f90:	da412c17 	ldw	r9,1200(sp)
    3f94:	003f1c06 	br	3c08 <__alt_data_end+0xfffae4d8>
    3f98:	da012a17 	ldw	r8,1192(sp)
    3f9c:	df012a15 	stw	fp,1192(sp)
    3fa0:	9839883a 	mov	fp,r19
    3fa4:	dcc12b03 	ldbu	r19,1196(sp)
    3fa8:	e7000414 	ori	fp,fp,16
    3fac:	e080080c 	andi	r2,fp,32
    3fb0:	dcc12785 	stb	r19,1182(sp)
    3fb4:	d8c12d17 	ldw	r3,1204(sp)
    3fb8:	1001ce26 	beq	r2,zero,46f4 <___vfprintf_internal_r+0xc90>
    3fbc:	d9012d17 	ldw	r4,1204(sp)
    3fc0:	18800117 	ldw	r2,4(r3)
    3fc4:	1c800017 	ldw	r18,0(r3)
    3fc8:	21000204 	addi	r4,r4,8
    3fcc:	d9012d15 	stw	r4,1204(sp)
    3fd0:	102b883a 	mov	r21,r2
    3fd4:	10044916 	blt	r2,zero,50fc <___vfprintf_internal_r+0x1698>
    3fd8:	dcc12783 	ldbu	r19,1182(sp)
    3fdc:	da413215 	stw	r9,1224(sp)
    3fe0:	00800044 	movi	r2,1
    3fe4:	9546b03a 	or	r3,r18,r21
    3fe8:	48000216 	blt	r9,zero,3ff4 <___vfprintf_internal_r+0x590>
    3fec:	013fdfc4 	movi	r4,-129
    3ff0:	e138703a 	and	fp,fp,r4
    3ff4:	1802251e 	bne	r3,zero,488c <___vfprintf_internal_r+0xe28>
    3ff8:	48031726 	beq	r9,zero,4c58 <___vfprintf_internal_r+0x11f4>
    3ffc:	10803fcc 	andi	r2,r2,255
    4000:	00c00044 	movi	r3,1
    4004:	10c24526 	beq	r2,r3,491c <___vfprintf_internal_r+0xeb8>
    4008:	00c00084 	movi	r3,2
    400c:	10c33426 	beq	r2,r3,4ce0 <___vfprintf_internal_r+0x127c>
    4010:	d8c10e04 	addi	r3,sp,1080
    4014:	9008d0fa 	srli	r4,r18,3
    4018:	a80a977a 	slli	r5,r21,29
    401c:	a82ad0fa 	srli	r21,r21,3
    4020:	948001cc 	andi	r18,r18,7
    4024:	90800c04 	addi	r2,r18,48
    4028:	18ffffc4 	addi	r3,r3,-1
    402c:	2924b03a 	or	r18,r5,r4
    4030:	18800005 	stb	r2,0(r3)
    4034:	9548b03a 	or	r4,r18,r21
    4038:	203ff61e 	bne	r4,zero,4014 <__alt_data_end+0xfffae8e4>
    403c:	e100004c 	andi	r4,fp,1
    4040:	d8c13115 	stw	r3,1220(sp)
    4044:	20039a1e 	bne	r4,zero,4eb0 <___vfprintf_internal_r+0x144c>
    4048:	d8812817 	ldw	r2,1184(sp)
    404c:	10e3c83a 	sub	r17,r2,r3
    4050:	8805883a 	mov	r2,r17
    4054:	8a40010e 	bge	r17,r9,405c <___vfprintf_internal_r+0x5f8>
    4058:	4805883a 	mov	r2,r9
    405c:	d8812b15 	stw	r2,1196(sp)
    4060:	d8013415 	stw	zero,1232(sp)
    4064:	98803fcc 	andi	r2,r19,255
    4068:	1080201c 	xori	r2,r2,128
    406c:	10bfe004 	addi	r2,r2,-128
    4070:	10000326 	beq	r2,zero,4080 <___vfprintf_internal_r+0x61c>
    4074:	d8c12b17 	ldw	r3,1196(sp)
    4078:	18c00044 	addi	r3,r3,1
    407c:	d8c12b15 	stw	r3,1196(sp)
    4080:	e0c0008c 	andi	r3,fp,2
    4084:	d8c12c15 	stw	r3,1200(sp)
    4088:	18000326 	beq	r3,zero,4098 <___vfprintf_internal_r+0x634>
    408c:	d8c12b17 	ldw	r3,1196(sp)
    4090:	18c00084 	addi	r3,r3,2
    4094:	d8c12b15 	stw	r3,1196(sp)
    4098:	e0c0210c 	andi	r3,fp,132
    409c:	d8c13015 	stw	r3,1216(sp)
    40a0:	1801f81e 	bne	r3,zero,4884 <___vfprintf_internal_r+0xe20>
    40a4:	d9012e17 	ldw	r4,1208(sp)
    40a8:	d8c12b17 	ldw	r3,1196(sp)
    40ac:	20ebc83a 	sub	r21,r4,r3
    40b0:	0541f40e 	bge	zero,r21,4884 <___vfprintf_internal_r+0xe20>
    40b4:	02400404 	movi	r9,16
    40b8:	d8c12017 	ldw	r3,1152(sp)
    40bc:	d8811f17 	ldw	r2,1148(sp)
    40c0:	4d45750e 	bge	r9,r21,5698 <___vfprintf_internal_r+0x1c34>
    40c4:	01400074 	movhi	r5,1
    40c8:	294a9684 	addi	r5,r5,10842
    40cc:	d9413615 	stw	r5,1240(sp)
    40d0:	4827883a 	mov	r19,r9
    40d4:	048001c4 	movi	r18,7
    40d8:	00000306 	br	40e8 <___vfprintf_internal_r+0x684>
    40dc:	ad7ffc04 	addi	r21,r21,-16
    40e0:	42000204 	addi	r8,r8,8
    40e4:	9d40130e 	bge	r19,r21,4134 <___vfprintf_internal_r+0x6d0>
    40e8:	01000074 	movhi	r4,1
    40ec:	18c00404 	addi	r3,r3,16
    40f0:	10800044 	addi	r2,r2,1
    40f4:	210a9684 	addi	r4,r4,10842
    40f8:	41000015 	stw	r4,0(r8)
    40fc:	44c00115 	stw	r19,4(r8)
    4100:	d8c12015 	stw	r3,1152(sp)
    4104:	d8811f15 	stw	r2,1148(sp)
    4108:	90bff40e 	bge	r18,r2,40dc <__alt_data_end+0xfffae9ac>
    410c:	b809883a 	mov	r4,r23
    4110:	b00b883a 	mov	r5,r22
    4114:	d9811e04 	addi	r6,sp,1144
    4118:	000a6a80 	call	a6a8 <__sprint_r>
    411c:	103f691e 	bne	r2,zero,3ec4 <__alt_data_end+0xfffae794>
    4120:	ad7ffc04 	addi	r21,r21,-16
    4124:	d8c12017 	ldw	r3,1152(sp)
    4128:	d8811f17 	ldw	r2,1148(sp)
    412c:	da000404 	addi	r8,sp,16
    4130:	9d7fed16 	blt	r19,r21,40e8 <__alt_data_end+0xfffae9b8>
    4134:	d9413617 	ldw	r5,1240(sp)
    4138:	a8c7883a 	add	r3,r21,r3
    413c:	10800044 	addi	r2,r2,1
    4140:	41400015 	stw	r5,0(r8)
    4144:	45400115 	stw	r21,4(r8)
    4148:	d8c12015 	stw	r3,1152(sp)
    414c:	d8811f15 	stw	r2,1148(sp)
    4150:	010001c4 	movi	r4,7
    4154:	20832b16 	blt	r4,r2,4e04 <___vfprintf_internal_r+0x13a0>
    4158:	d8812787 	ldb	r2,1182(sp)
    415c:	42000204 	addi	r8,r8,8
    4160:	10000c26 	beq	r2,zero,4194 <___vfprintf_internal_r+0x730>
    4164:	d8811f17 	ldw	r2,1148(sp)
    4168:	d9012784 	addi	r4,sp,1182
    416c:	18c00044 	addi	r3,r3,1
    4170:	10800044 	addi	r2,r2,1
    4174:	41000015 	stw	r4,0(r8)
    4178:	01000044 	movi	r4,1
    417c:	41000115 	stw	r4,4(r8)
    4180:	d8c12015 	stw	r3,1152(sp)
    4184:	d8811f15 	stw	r2,1148(sp)
    4188:	010001c4 	movi	r4,7
    418c:	2082c416 	blt	r4,r2,4ca0 <___vfprintf_internal_r+0x123c>
    4190:	42000204 	addi	r8,r8,8
    4194:	d8812c17 	ldw	r2,1200(sp)
    4198:	10000c26 	beq	r2,zero,41cc <___vfprintf_internal_r+0x768>
    419c:	d8811f17 	ldw	r2,1148(sp)
    41a0:	d9012704 	addi	r4,sp,1180
    41a4:	18c00084 	addi	r3,r3,2
    41a8:	10800044 	addi	r2,r2,1
    41ac:	41000015 	stw	r4,0(r8)
    41b0:	01000084 	movi	r4,2
    41b4:	41000115 	stw	r4,4(r8)
    41b8:	d8c12015 	stw	r3,1152(sp)
    41bc:	d8811f15 	stw	r2,1148(sp)
    41c0:	010001c4 	movi	r4,7
    41c4:	2082be16 	blt	r4,r2,4cc0 <___vfprintf_internal_r+0x125c>
    41c8:	42000204 	addi	r8,r8,8
    41cc:	d9013017 	ldw	r4,1216(sp)
    41d0:	00802004 	movi	r2,128
    41d4:	20822026 	beq	r4,r2,4a58 <___vfprintf_internal_r+0xff4>
    41d8:	d9413217 	ldw	r5,1224(sp)
    41dc:	2c67c83a 	sub	r19,r5,r17
    41e0:	04c0260e 	bge	zero,r19,427c <___vfprintf_internal_r+0x818>
    41e4:	05400404 	movi	r21,16
    41e8:	d8811f17 	ldw	r2,1148(sp)
    41ec:	acc4720e 	bge	r21,r19,53b8 <___vfprintf_internal_r+0x1954>
    41f0:	01400074 	movhi	r5,1
    41f4:	294a9284 	addi	r5,r5,10826
    41f8:	d9412c15 	stw	r5,1200(sp)
    41fc:	048001c4 	movi	r18,7
    4200:	00000306 	br	4210 <___vfprintf_internal_r+0x7ac>
    4204:	9cfffc04 	addi	r19,r19,-16
    4208:	42000204 	addi	r8,r8,8
    420c:	acc0110e 	bge	r21,r19,4254 <___vfprintf_internal_r+0x7f0>
    4210:	18c00404 	addi	r3,r3,16
    4214:	10800044 	addi	r2,r2,1
    4218:	45000015 	stw	r20,0(r8)
    421c:	45400115 	stw	r21,4(r8)
    4220:	d8c12015 	stw	r3,1152(sp)
    4224:	d8811f15 	stw	r2,1148(sp)
    4228:	90bff60e 	bge	r18,r2,4204 <__alt_data_end+0xfffaead4>
    422c:	b809883a 	mov	r4,r23
    4230:	b00b883a 	mov	r5,r22
    4234:	d9811e04 	addi	r6,sp,1144
    4238:	000a6a80 	call	a6a8 <__sprint_r>
    423c:	103f211e 	bne	r2,zero,3ec4 <__alt_data_end+0xfffae794>
    4240:	9cfffc04 	addi	r19,r19,-16
    4244:	d8c12017 	ldw	r3,1152(sp)
    4248:	d8811f17 	ldw	r2,1148(sp)
    424c:	da000404 	addi	r8,sp,16
    4250:	acffef16 	blt	r21,r19,4210 <__alt_data_end+0xfffaeae0>
    4254:	d9012c17 	ldw	r4,1200(sp)
    4258:	1cc7883a 	add	r3,r3,r19
    425c:	10800044 	addi	r2,r2,1
    4260:	41000015 	stw	r4,0(r8)
    4264:	44c00115 	stw	r19,4(r8)
    4268:	d8c12015 	stw	r3,1152(sp)
    426c:	d8811f15 	stw	r2,1148(sp)
    4270:	010001c4 	movi	r4,7
    4274:	20828216 	blt	r4,r2,4c80 <___vfprintf_internal_r+0x121c>
    4278:	42000204 	addi	r8,r8,8
    427c:	e080400c 	andi	r2,fp,256
    4280:	1001ac1e 	bne	r2,zero,4934 <___vfprintf_internal_r+0xed0>
    4284:	d8811f17 	ldw	r2,1148(sp)
    4288:	d9413117 	ldw	r5,1220(sp)
    428c:	1c47883a 	add	r3,r3,r17
    4290:	10800044 	addi	r2,r2,1
    4294:	41400015 	stw	r5,0(r8)
    4298:	44400115 	stw	r17,4(r8)
    429c:	d8c12015 	stw	r3,1152(sp)
    42a0:	d8811f15 	stw	r2,1148(sp)
    42a4:	010001c4 	movi	r4,7
    42a8:	20825d16 	blt	r4,r2,4c20 <___vfprintf_internal_r+0x11bc>
    42ac:	42000204 	addi	r8,r8,8
    42b0:	e080010c 	andi	r2,fp,4
    42b4:	10003126 	beq	r2,zero,437c <___vfprintf_internal_r+0x918>
    42b8:	d8812e17 	ldw	r2,1208(sp)
    42bc:	d9012b17 	ldw	r4,1196(sp)
    42c0:	1121c83a 	sub	r16,r2,r4
    42c4:	04002d0e 	bge	zero,r16,437c <___vfprintf_internal_r+0x918>
    42c8:	04400404 	movi	r17,16
    42cc:	d8811f17 	ldw	r2,1148(sp)
    42d0:	8c05340e 	bge	r17,r16,57a4 <___vfprintf_internal_r+0x1d40>
    42d4:	01000074 	movhi	r4,1
    42d8:	210a9684 	addi	r4,r4,10842
    42dc:	d9013615 	stw	r4,1240(sp)
    42e0:	048001c4 	movi	r18,7
    42e4:	00000306 	br	42f4 <___vfprintf_internal_r+0x890>
    42e8:	843ffc04 	addi	r16,r16,-16
    42ec:	42000204 	addi	r8,r8,8
    42f0:	8c00130e 	bge	r17,r16,4340 <___vfprintf_internal_r+0x8dc>
    42f4:	01400074 	movhi	r5,1
    42f8:	18c00404 	addi	r3,r3,16
    42fc:	10800044 	addi	r2,r2,1
    4300:	294a9684 	addi	r5,r5,10842
    4304:	41400015 	stw	r5,0(r8)
    4308:	44400115 	stw	r17,4(r8)
    430c:	d8c12015 	stw	r3,1152(sp)
    4310:	d8811f15 	stw	r2,1148(sp)
    4314:	90bff40e 	bge	r18,r2,42e8 <__alt_data_end+0xfffaebb8>
    4318:	b809883a 	mov	r4,r23
    431c:	b00b883a 	mov	r5,r22
    4320:	d9811e04 	addi	r6,sp,1144
    4324:	000a6a80 	call	a6a8 <__sprint_r>
    4328:	103ee61e 	bne	r2,zero,3ec4 <__alt_data_end+0xfffae794>
    432c:	843ffc04 	addi	r16,r16,-16
    4330:	d8c12017 	ldw	r3,1152(sp)
    4334:	d8811f17 	ldw	r2,1148(sp)
    4338:	da000404 	addi	r8,sp,16
    433c:	8c3fed16 	blt	r17,r16,42f4 <__alt_data_end+0xfffaebc4>
    4340:	d9013617 	ldw	r4,1240(sp)
    4344:	1c07883a 	add	r3,r3,r16
    4348:	10800044 	addi	r2,r2,1
    434c:	41000015 	stw	r4,0(r8)
    4350:	44000115 	stw	r16,4(r8)
    4354:	d8c12015 	stw	r3,1152(sp)
    4358:	d8811f15 	stw	r2,1148(sp)
    435c:	010001c4 	movi	r4,7
    4360:	2080060e 	bge	r4,r2,437c <___vfprintf_internal_r+0x918>
    4364:	b809883a 	mov	r4,r23
    4368:	b00b883a 	mov	r5,r22
    436c:	d9811e04 	addi	r6,sp,1144
    4370:	000a6a80 	call	a6a8 <__sprint_r>
    4374:	103ed31e 	bne	r2,zero,3ec4 <__alt_data_end+0xfffae794>
    4378:	d8c12017 	ldw	r3,1152(sp)
    437c:	df012b17 	ldw	fp,1196(sp)
    4380:	d9412e17 	ldw	r5,1208(sp)
    4384:	e140010e 	bge	fp,r5,438c <___vfprintf_internal_r+0x928>
    4388:	2839883a 	mov	fp,r5
    438c:	d8812f17 	ldw	r2,1212(sp)
    4390:	1705883a 	add	r2,r2,fp
    4394:	d8812f15 	stw	r2,1212(sp)
    4398:	1802291e 	bne	r3,zero,4c40 <___vfprintf_internal_r+0x11dc>
    439c:	d8c12a17 	ldw	r3,1192(sp)
    43a0:	d8011f15 	stw	zero,1148(sp)
    43a4:	da000404 	addi	r8,sp,16
    43a8:	18800007 	ldb	r2,0(r3)
    43ac:	103ded1e 	bne	r2,zero,3b64 <__alt_data_end+0xfffae434>
    43b0:	dc012a17 	ldw	r16,1192(sp)
    43b4:	003e0506 	br	3bcc <__alt_data_end+0xfffae49c>
    43b8:	d9012d17 	ldw	r4,1204(sp)
    43bc:	d9412d17 	ldw	r5,1204(sp)
    43c0:	da012a17 	ldw	r8,1192(sp)
    43c4:	21000017 	ldw	r4,0(r4)
    43c8:	29400117 	ldw	r5,4(r5)
    43cc:	df012a15 	stw	fp,1192(sp)
    43d0:	9839883a 	mov	fp,r19
    43d4:	dcc12b03 	ldbu	r19,1196(sp)
    43d8:	d9013715 	stw	r4,1244(sp)
    43dc:	d9413915 	stw	r5,1252(sp)
    43e0:	da013f15 	stw	r8,1276(sp)
    43e4:	da413e15 	stw	r9,1272(sp)
    43e8:	dcc12785 	stb	r19,1182(sp)
    43ec:	000a3580 	call	a358 <__fpclassifyd>
    43f0:	d8c12d17 	ldw	r3,1204(sp)
    43f4:	04400044 	movi	r17,1
    43f8:	da013f17 	ldw	r8,1276(sp)
    43fc:	1c800204 	addi	r18,r3,8
    4400:	da413e17 	ldw	r9,1272(sp)
    4404:	d9013717 	ldw	r4,1244(sp)
    4408:	d9413917 	ldw	r5,1252(sp)
    440c:	1443451e 	bne	r2,r17,5124 <___vfprintf_internal_r+0x16c0>
    4410:	000d883a 	mov	r6,zero
    4414:	000f883a 	mov	r7,zero
    4418:	000e5640 	call	e564 <__ledf2>
    441c:	da013f17 	ldw	r8,1276(sp)
    4420:	1004fe16 	blt	r2,zero,581c <___vfprintf_internal_r+0x1db8>
    4424:	dcc12783 	ldbu	r19,1182(sp)
    4428:	008011c4 	movi	r2,71
    442c:	14045d0e 	bge	r2,r16,55a4 <___vfprintf_internal_r+0x1b40>
    4430:	01400074 	movhi	r5,1
    4434:	294a8304 	addi	r5,r5,10764
    4438:	d9413115 	stw	r5,1220(sp)
    443c:	00c000c4 	movi	r3,3
    4440:	00bfdfc4 	movi	r2,-129
    4444:	d8c12b15 	stw	r3,1196(sp)
    4448:	e0b8703a 	and	fp,fp,r2
    444c:	dc812d15 	stw	r18,1204(sp)
    4450:	1823883a 	mov	r17,r3
    4454:	d8013215 	stw	zero,1224(sp)
    4458:	d8013415 	stw	zero,1232(sp)
    445c:	003f0106 	br	4064 <__alt_data_end+0xfffae934>
    4460:	9cc00214 	ori	r19,r19,8
    4464:	e005883a 	mov	r2,fp
    4468:	e4000007 	ldb	r16,0(fp)
    446c:	003de506 	br	3c04 <__alt_data_end+0xfffae4d4>
    4470:	da012a17 	ldw	r8,1192(sp)
    4474:	df012a15 	stw	fp,1192(sp)
    4478:	9f000414 	ori	fp,r19,16
    447c:	e0c0080c 	andi	r3,fp,32
    4480:	d8812d17 	ldw	r2,1204(sp)
    4484:	18007626 	beq	r3,zero,4660 <___vfprintf_internal_r+0xbfc>
    4488:	d9412d17 	ldw	r5,1204(sp)
    448c:	14800017 	ldw	r18,0(r2)
    4490:	15400117 	ldw	r21,4(r2)
    4494:	29400204 	addi	r5,r5,8
    4498:	d9412d15 	stw	r5,1204(sp)
    449c:	0005883a 	mov	r2,zero
    44a0:	9546b03a 	or	r3,r18,r21
    44a4:	d8012785 	stb	zero,1182(sp)
    44a8:	da413215 	stw	r9,1224(sp)
    44ac:	0027883a 	mov	r19,zero
    44b0:	003ecd06 	br	3fe8 <__alt_data_end+0xfffae8b8>
    44b4:	da012a17 	ldw	r8,1192(sp)
    44b8:	df012a15 	stw	fp,1192(sp)
    44bc:	9f000414 	ori	fp,r19,16
    44c0:	e0c0080c 	andi	r3,fp,32
    44c4:	d8812d17 	ldw	r2,1204(sp)
    44c8:	18002c26 	beq	r3,zero,457c <___vfprintf_internal_r+0xb18>
    44cc:	d9012d17 	ldw	r4,1204(sp)
    44d0:	14800017 	ldw	r18,0(r2)
    44d4:	15400117 	ldw	r21,4(r2)
    44d8:	21000204 	addi	r4,r4,8
    44dc:	d9012d15 	stw	r4,1204(sp)
    44e0:	00800044 	movi	r2,1
    44e4:	9546b03a 	or	r3,r18,r21
    44e8:	003fee06 	br	44a4 <__alt_data_end+0xfffaed74>
    44ec:	da012a17 	ldw	r8,1192(sp)
    44f0:	df012a15 	stw	fp,1192(sp)
    44f4:	9839883a 	mov	fp,r19
    44f8:	dcc12b03 	ldbu	r19,1196(sp)
    44fc:	01400074 	movhi	r5,1
    4500:	294a8604 	addi	r5,r5,10776
    4504:	dcc12785 	stb	r19,1182(sp)
    4508:	d9413b15 	stw	r5,1260(sp)
    450c:	e0c0080c 	andi	r3,fp,32
    4510:	d8812d17 	ldw	r2,1204(sp)
    4514:	18002e26 	beq	r3,zero,45d0 <___vfprintf_internal_r+0xb6c>
    4518:	d9412d17 	ldw	r5,1204(sp)
    451c:	14800017 	ldw	r18,0(r2)
    4520:	15400117 	ldw	r21,4(r2)
    4524:	29400204 	addi	r5,r5,8
    4528:	d9412d15 	stw	r5,1204(sp)
    452c:	e080004c 	andi	r2,fp,1
    4530:	10025c26 	beq	r2,zero,4ea4 <___vfprintf_internal_r+0x1440>
    4534:	9546b03a 	or	r3,r18,r21
    4538:	18038f26 	beq	r3,zero,5378 <___vfprintf_internal_r+0x1914>
    453c:	00800c04 	movi	r2,48
    4540:	d8812705 	stb	r2,1180(sp)
    4544:	dc012745 	stb	r16,1181(sp)
    4548:	e7000094 	ori	fp,fp,2
    454c:	00800084 	movi	r2,2
    4550:	003fd406 	br	44a4 <__alt_data_end+0xfffaed74>
    4554:	9cc00814 	ori	r19,r19,32
    4558:	e005883a 	mov	r2,fp
    455c:	e4000007 	ldb	r16,0(fp)
    4560:	003da806 	br	3c04 <__alt_data_end+0xfffae4d4>
    4564:	da012a17 	ldw	r8,1192(sp)
    4568:	df012a15 	stw	fp,1192(sp)
    456c:	9839883a 	mov	fp,r19
    4570:	e0c0080c 	andi	r3,fp,32
    4574:	d8812d17 	ldw	r2,1204(sp)
    4578:	183fd41e 	bne	r3,zero,44cc <__alt_data_end+0xfffaed9c>
    457c:	e0c0040c 	andi	r3,fp,16
    4580:	18035f26 	beq	r3,zero,5300 <___vfprintf_internal_r+0x189c>
    4584:	d9412d17 	ldw	r5,1204(sp)
    4588:	14800017 	ldw	r18,0(r2)
    458c:	002b883a 	mov	r21,zero
    4590:	29400104 	addi	r5,r5,4
    4594:	d9412d15 	stw	r5,1204(sp)
    4598:	00800044 	movi	r2,1
    459c:	9007883a 	mov	r3,r18
    45a0:	003fc006 	br	44a4 <__alt_data_end+0xfffaed74>
    45a4:	da012a17 	ldw	r8,1192(sp)
    45a8:	df012a15 	stw	fp,1192(sp)
    45ac:	9839883a 	mov	fp,r19
    45b0:	dcc12b03 	ldbu	r19,1196(sp)
    45b4:	01000074 	movhi	r4,1
    45b8:	210a8b04 	addi	r4,r4,10796
    45bc:	d9013b15 	stw	r4,1260(sp)
    45c0:	dcc12785 	stb	r19,1182(sp)
    45c4:	e0c0080c 	andi	r3,fp,32
    45c8:	d8812d17 	ldw	r2,1204(sp)
    45cc:	183fd21e 	bne	r3,zero,4518 <__alt_data_end+0xfffaede8>
    45d0:	e0c0040c 	andi	r3,fp,16
    45d4:	18035426 	beq	r3,zero,5328 <___vfprintf_internal_r+0x18c4>
    45d8:	d8c12d17 	ldw	r3,1204(sp)
    45dc:	14800017 	ldw	r18,0(r2)
    45e0:	002b883a 	mov	r21,zero
    45e4:	18c00104 	addi	r3,r3,4
    45e8:	d8c12d15 	stw	r3,1204(sp)
    45ec:	003fcf06 	br	452c <__alt_data_end+0xfffaedfc>
    45f0:	e4000007 	ldb	r16,0(fp)
    45f4:	00801b04 	movi	r2,108
    45f8:	8083f726 	beq	r16,r2,55d8 <___vfprintf_internal_r+0x1b74>
    45fc:	9cc00414 	ori	r19,r19,16
    4600:	e005883a 	mov	r2,fp
    4604:	003d7f06 	br	3c04 <__alt_data_end+0xfffae4d4>
    4608:	da012a17 	ldw	r8,1192(sp)
    460c:	df012a15 	stw	fp,1192(sp)
    4610:	9839883a 	mov	fp,r19
    4614:	dcc12b03 	ldbu	r19,1196(sp)
    4618:	e080080c 	andi	r2,fp,32
    461c:	dcc12785 	stb	r19,1182(sp)
    4620:	10032226 	beq	r2,zero,52ac <___vfprintf_internal_r+0x1848>
    4624:	d9412d17 	ldw	r5,1204(sp)
    4628:	d9012f17 	ldw	r4,1212(sp)
    462c:	28800017 	ldw	r2,0(r5)
    4630:	2007d7fa 	srai	r3,r4,31
    4634:	29400104 	addi	r5,r5,4
    4638:	d9412d15 	stw	r5,1204(sp)
    463c:	11000015 	stw	r4,0(r2)
    4640:	10c00115 	stw	r3,4(r2)
    4644:	003d4406 	br	3b58 <__alt_data_end+0xfffae428>
    4648:	da012a17 	ldw	r8,1192(sp)
    464c:	df012a15 	stw	fp,1192(sp)
    4650:	9839883a 	mov	fp,r19
    4654:	e0c0080c 	andi	r3,fp,32
    4658:	d8812d17 	ldw	r2,1204(sp)
    465c:	183f8a1e 	bne	r3,zero,4488 <__alt_data_end+0xfffaed58>
    4660:	e0c0040c 	andi	r3,fp,16
    4664:	18031c26 	beq	r3,zero,52d8 <___vfprintf_internal_r+0x1874>
    4668:	14800017 	ldw	r18,0(r2)
    466c:	d8812d17 	ldw	r2,1204(sp)
    4670:	002b883a 	mov	r21,zero
    4674:	9007883a 	mov	r3,r18
    4678:	10800104 	addi	r2,r2,4
    467c:	d8812d15 	stw	r2,1204(sp)
    4680:	0005883a 	mov	r2,zero
    4684:	003f8706 	br	44a4 <__alt_data_end+0xfffaed74>
    4688:	d9412d17 	ldw	r5,1204(sp)
    468c:	00800c04 	movi	r2,48
    4690:	d8812705 	stb	r2,1180(sp)
    4694:	2c800017 	ldw	r18,0(r5)
    4698:	00801e04 	movi	r2,120
    469c:	d8812745 	stb	r2,1181(sp)
    46a0:	00800074 	movhi	r2,1
    46a4:	108a8b04 	addi	r2,r2,10796
    46a8:	29400104 	addi	r5,r5,4
    46ac:	da012a17 	ldw	r8,1192(sp)
    46b0:	d8813b15 	stw	r2,1260(sp)
    46b4:	df012a15 	stw	fp,1192(sp)
    46b8:	002b883a 	mov	r21,zero
    46bc:	9f000094 	ori	fp,r19,2
    46c0:	d9412d15 	stw	r5,1204(sp)
    46c4:	00800084 	movi	r2,2
    46c8:	04001e04 	movi	r16,120
    46cc:	9007883a 	mov	r3,r18
    46d0:	003f7406 	br	44a4 <__alt_data_end+0xfffaed74>
    46d4:	da012a17 	ldw	r8,1192(sp)
    46d8:	df012a15 	stw	fp,1192(sp)
    46dc:	9839883a 	mov	fp,r19
    46e0:	dcc12b03 	ldbu	r19,1196(sp)
    46e4:	e080080c 	andi	r2,fp,32
    46e8:	d8c12d17 	ldw	r3,1204(sp)
    46ec:	dcc12785 	stb	r19,1182(sp)
    46f0:	103e321e 	bne	r2,zero,3fbc <__alt_data_end+0xfffae88c>
    46f4:	e080040c 	andi	r2,fp,16
    46f8:	10031326 	beq	r2,zero,5348 <___vfprintf_internal_r+0x18e4>
    46fc:	1c800017 	ldw	r18,0(r3)
    4700:	d9412d17 	ldw	r5,1204(sp)
    4704:	902bd7fa 	srai	r21,r18,31
    4708:	29400104 	addi	r5,r5,4
    470c:	d9412d15 	stw	r5,1204(sp)
    4710:	a805883a 	mov	r2,r21
    4714:	003e2f06 	br	3fd4 <__alt_data_end+0xfffae8a4>
    4718:	9cc01014 	ori	r19,r19,64
    471c:	e005883a 	mov	r2,fp
    4720:	e4000007 	ldb	r16,0(fp)
    4724:	003d3706 	br	3c04 <__alt_data_end+0xfffae4d4>
    4728:	d8c12d17 	ldw	r3,1204(sp)
    472c:	d9012d17 	ldw	r4,1204(sp)
    4730:	da012a17 	ldw	r8,1192(sp)
    4734:	18800017 	ldw	r2,0(r3)
    4738:	21000104 	addi	r4,r4,4
    473c:	00c00044 	movi	r3,1
    4740:	df012a15 	stw	fp,1192(sp)
    4744:	d8c12b15 	stw	r3,1196(sp)
    4748:	9839883a 	mov	fp,r19
    474c:	d8012785 	stb	zero,1182(sp)
    4750:	d8810405 	stb	r2,1040(sp)
    4754:	d9012d15 	stw	r4,1204(sp)
    4758:	1823883a 	mov	r17,r3
    475c:	d8c10404 	addi	r3,sp,1040
    4760:	d8013215 	stw	zero,1224(sp)
    4764:	d8013415 	stw	zero,1232(sp)
    4768:	d8c13115 	stw	r3,1220(sp)
    476c:	0005883a 	mov	r2,zero
    4770:	003e4306 	br	4080 <__alt_data_end+0xfffae950>
    4774:	d8812b07 	ldb	r2,1196(sp)
    4778:	1002fc1e 	bne	r2,zero,536c <___vfprintf_internal_r+0x1908>
    477c:	00c00804 	movi	r3,32
    4780:	d8c12b05 	stb	r3,1196(sp)
    4784:	e005883a 	mov	r2,fp
    4788:	e4000007 	ldb	r16,0(fp)
    478c:	003d1d06 	br	3c04 <__alt_data_end+0xfffae4d4>
    4790:	9cc00054 	ori	r19,r19,1
    4794:	e005883a 	mov	r2,fp
    4798:	e4000007 	ldb	r16,0(fp)
    479c:	003d1906 	br	3c04 <__alt_data_end+0xfffae4d4>
    47a0:	d9012d17 	ldw	r4,1204(sp)
    47a4:	d9412d17 	ldw	r5,1204(sp)
    47a8:	21000017 	ldw	r4,0(r4)
    47ac:	28c00104 	addi	r3,r5,4
    47b0:	d9012e15 	stw	r4,1208(sp)
    47b4:	20038c16 	blt	r4,zero,55e8 <___vfprintf_internal_r+0x1b84>
    47b8:	d8c12d15 	stw	r3,1204(sp)
    47bc:	e005883a 	mov	r2,fp
    47c0:	e4000007 	ldb	r16,0(fp)
    47c4:	003d0f06 	br	3c04 <__alt_data_end+0xfffae4d4>
    47c8:	00c00ac4 	movi	r3,43
    47cc:	d8c12b05 	stb	r3,1196(sp)
    47d0:	e005883a 	mov	r2,fp
    47d4:	e4000007 	ldb	r16,0(fp)
    47d8:	003d0a06 	br	3c04 <__alt_data_end+0xfffae4d4>
    47dc:	d8c12d17 	ldw	r3,1204(sp)
    47e0:	d9012d17 	ldw	r4,1204(sp)
    47e4:	da012a17 	ldw	r8,1192(sp)
    47e8:	18c00017 	ldw	r3,0(r3)
    47ec:	df012a15 	stw	fp,1192(sp)
    47f0:	d8012785 	stb	zero,1182(sp)
    47f4:	d8c13115 	stw	r3,1220(sp)
    47f8:	9839883a 	mov	fp,r19
    47fc:	24800104 	addi	r18,r4,4
    4800:	1803f726 	beq	r3,zero,57e0 <___vfprintf_internal_r+0x1d7c>
    4804:	d9013117 	ldw	r4,1220(sp)
    4808:	48038916 	blt	r9,zero,5630 <___vfprintf_internal_r+0x1bcc>
    480c:	480d883a 	mov	r6,r9
    4810:	000b883a 	mov	r5,zero
    4814:	da013f15 	stw	r8,1276(sp)
    4818:	da413e15 	stw	r9,1272(sp)
    481c:	00088d00 	call	88d0 <memchr>
    4820:	da013f17 	ldw	r8,1276(sp)
    4824:	da413e17 	ldw	r9,1272(sp)
    4828:	10045926 	beq	r2,zero,5990 <___vfprintf_internal_r+0x1f2c>
    482c:	d8c13117 	ldw	r3,1220(sp)
    4830:	10e3c83a 	sub	r17,r2,r3
    4834:	4c433516 	blt	r9,r17,550c <___vfprintf_internal_r+0x1aa8>
    4838:	8805883a 	mov	r2,r17
    483c:	88038116 	blt	r17,zero,5644 <___vfprintf_internal_r+0x1be0>
    4840:	dcc12783 	ldbu	r19,1182(sp)
    4844:	d8812b15 	stw	r2,1196(sp)
    4848:	dc812d15 	stw	r18,1204(sp)
    484c:	d8013215 	stw	zero,1224(sp)
    4850:	d8013415 	stw	zero,1232(sp)
    4854:	003e0306 	br	4064 <__alt_data_end+0xfffae934>
    4858:	da012a17 	ldw	r8,1192(sp)
    485c:	df012a15 	stw	fp,1192(sp)
    4860:	9839883a 	mov	fp,r19
    4864:	dcc12b03 	ldbu	r19,1196(sp)
    4868:	dcc12785 	stb	r19,1182(sp)
    486c:	803d8f26 	beq	r16,zero,3eac <__alt_data_end+0xfffae77c>
    4870:	00c00044 	movi	r3,1
    4874:	d8c12b15 	stw	r3,1196(sp)
    4878:	dc010405 	stb	r16,1040(sp)
    487c:	d8012785 	stb	zero,1182(sp)
    4880:	003fb506 	br	4758 <__alt_data_end+0xfffaf028>
    4884:	d8c12017 	ldw	r3,1152(sp)
    4888:	003e3506 	br	4160 <__alt_data_end+0xfffaea30>
    488c:	10803fcc 	andi	r2,r2,255
    4890:	00c00044 	movi	r3,1
    4894:	10fddc1e 	bne	r2,r3,4008 <__alt_data_end+0xfffae8d8>
    4898:	a800021e 	bne	r21,zero,48a4 <___vfprintf_internal_r+0xe40>
    489c:	00800244 	movi	r2,9
    48a0:	14801e2e 	bgeu	r2,r18,491c <___vfprintf_internal_r+0xeb8>
    48a4:	dc012b15 	stw	r16,1196(sp)
    48a8:	dc410e04 	addi	r17,sp,1080
    48ac:	9021883a 	mov	r16,r18
    48b0:	da012c15 	stw	r8,1200(sp)
    48b4:	a825883a 	mov	r18,r21
    48b8:	482b883a 	mov	r21,r9
    48bc:	8009883a 	mov	r4,r16
    48c0:	900b883a 	mov	r5,r18
    48c4:	01800284 	movi	r6,10
    48c8:	000f883a 	mov	r7,zero
    48cc:	000cba00 	call	cba0 <__umoddi3>
    48d0:	10800c04 	addi	r2,r2,48
    48d4:	8c7fffc4 	addi	r17,r17,-1
    48d8:	8009883a 	mov	r4,r16
    48dc:	900b883a 	mov	r5,r18
    48e0:	01800284 	movi	r6,10
    48e4:	000f883a 	mov	r7,zero
    48e8:	88800005 	stb	r2,0(r17)
    48ec:	000c5600 	call	c560 <__udivdi3>
    48f0:	1021883a 	mov	r16,r2
    48f4:	10c4b03a 	or	r2,r2,r3
    48f8:	1825883a 	mov	r18,r3
    48fc:	103fef1e 	bne	r2,zero,48bc <__alt_data_end+0xfffaf18c>
    4900:	d9012817 	ldw	r4,1184(sp)
    4904:	dc413115 	stw	r17,1220(sp)
    4908:	dc012b17 	ldw	r16,1196(sp)
    490c:	da012c17 	ldw	r8,1200(sp)
    4910:	a813883a 	mov	r9,r21
    4914:	2463c83a 	sub	r17,r4,r17
    4918:	003dcd06 	br	4050 <__alt_data_end+0xfffae920>
    491c:	94800c04 	addi	r18,r18,48
    4920:	d8c10dc4 	addi	r3,sp,1079
    4924:	dc810dc5 	stb	r18,1079(sp)
    4928:	dc413c17 	ldw	r17,1264(sp)
    492c:	d8c13115 	stw	r3,1220(sp)
    4930:	003dc706 	br	4050 <__alt_data_end+0xfffae920>
    4934:	00801944 	movi	r2,101
    4938:	1400720e 	bge	r2,r16,4b04 <___vfprintf_internal_r+0x10a0>
    493c:	d9013717 	ldw	r4,1244(sp)
    4940:	d9413917 	ldw	r5,1252(sp)
    4944:	000d883a 	mov	r6,zero
    4948:	000f883a 	mov	r7,zero
    494c:	d8c13d15 	stw	r3,1268(sp)
    4950:	da013f15 	stw	r8,1276(sp)
    4954:	000e4000 	call	e400 <__eqdf2>
    4958:	d8c13d17 	ldw	r3,1268(sp)
    495c:	da013f17 	ldw	r8,1276(sp)
    4960:	1000f41e 	bne	r2,zero,4d34 <___vfprintf_internal_r+0x12d0>
    4964:	d8811f17 	ldw	r2,1148(sp)
    4968:	01000074 	movhi	r4,1
    496c:	210a9204 	addi	r4,r4,10824
    4970:	18c00044 	addi	r3,r3,1
    4974:	10800044 	addi	r2,r2,1
    4978:	41000015 	stw	r4,0(r8)
    497c:	01000044 	movi	r4,1
    4980:	41000115 	stw	r4,4(r8)
    4984:	d8c12015 	stw	r3,1152(sp)
    4988:	d8811f15 	stw	r2,1148(sp)
    498c:	010001c4 	movi	r4,7
    4990:	20828d16 	blt	r4,r2,53c8 <___vfprintf_internal_r+0x1964>
    4994:	42000204 	addi	r8,r8,8
    4998:	d8812617 	ldw	r2,1176(sp)
    499c:	d9413317 	ldw	r5,1228(sp)
    49a0:	11400216 	blt	r2,r5,49ac <___vfprintf_internal_r+0xf48>
    49a4:	e080004c 	andi	r2,fp,1
    49a8:	103e4126 	beq	r2,zero,42b0 <__alt_data_end+0xfffaeb80>
    49ac:	d8813817 	ldw	r2,1248(sp)
    49b0:	d9013517 	ldw	r4,1236(sp)
    49b4:	d9413817 	ldw	r5,1248(sp)
    49b8:	1887883a 	add	r3,r3,r2
    49bc:	d8811f17 	ldw	r2,1148(sp)
    49c0:	41000015 	stw	r4,0(r8)
    49c4:	41400115 	stw	r5,4(r8)
    49c8:	10800044 	addi	r2,r2,1
    49cc:	d8c12015 	stw	r3,1152(sp)
    49d0:	d8811f15 	stw	r2,1148(sp)
    49d4:	010001c4 	movi	r4,7
    49d8:	20830916 	blt	r4,r2,5600 <___vfprintf_internal_r+0x1b9c>
    49dc:	42000204 	addi	r8,r8,8
    49e0:	d8813317 	ldw	r2,1228(sp)
    49e4:	143fffc4 	addi	r16,r2,-1
    49e8:	043e310e 	bge	zero,r16,42b0 <__alt_data_end+0xfffaeb80>
    49ec:	04400404 	movi	r17,16
    49f0:	d8811f17 	ldw	r2,1148(sp)
    49f4:	8c007e0e 	bge	r17,r16,4bf0 <___vfprintf_internal_r+0x118c>
    49f8:	01400074 	movhi	r5,1
    49fc:	294a9284 	addi	r5,r5,10826
    4a00:	d9412c15 	stw	r5,1200(sp)
    4a04:	04c001c4 	movi	r19,7
    4a08:	00000306 	br	4a18 <___vfprintf_internal_r+0xfb4>
    4a0c:	42000204 	addi	r8,r8,8
    4a10:	843ffc04 	addi	r16,r16,-16
    4a14:	8c00790e 	bge	r17,r16,4bfc <___vfprintf_internal_r+0x1198>
    4a18:	18c00404 	addi	r3,r3,16
    4a1c:	10800044 	addi	r2,r2,1
    4a20:	45000015 	stw	r20,0(r8)
    4a24:	44400115 	stw	r17,4(r8)
    4a28:	d8c12015 	stw	r3,1152(sp)
    4a2c:	d8811f15 	stw	r2,1148(sp)
    4a30:	98bff60e 	bge	r19,r2,4a0c <__alt_data_end+0xfffaf2dc>
    4a34:	b809883a 	mov	r4,r23
    4a38:	b00b883a 	mov	r5,r22
    4a3c:	d9811e04 	addi	r6,sp,1144
    4a40:	000a6a80 	call	a6a8 <__sprint_r>
    4a44:	103d1f1e 	bne	r2,zero,3ec4 <__alt_data_end+0xfffae794>
    4a48:	d8c12017 	ldw	r3,1152(sp)
    4a4c:	d8811f17 	ldw	r2,1148(sp)
    4a50:	da000404 	addi	r8,sp,16
    4a54:	003fee06 	br	4a10 <__alt_data_end+0xfffaf2e0>
    4a58:	d9412e17 	ldw	r5,1208(sp)
    4a5c:	d8812b17 	ldw	r2,1196(sp)
    4a60:	28a7c83a 	sub	r19,r5,r2
    4a64:	04fddc0e 	bge	zero,r19,41d8 <__alt_data_end+0xfffaeaa8>
    4a68:	05400404 	movi	r21,16
    4a6c:	d8811f17 	ldw	r2,1148(sp)
    4a70:	acc3870e 	bge	r21,r19,5890 <___vfprintf_internal_r+0x1e2c>
    4a74:	01400074 	movhi	r5,1
    4a78:	294a9284 	addi	r5,r5,10826
    4a7c:	d9412c15 	stw	r5,1200(sp)
    4a80:	048001c4 	movi	r18,7
    4a84:	00000306 	br	4a94 <___vfprintf_internal_r+0x1030>
    4a88:	9cfffc04 	addi	r19,r19,-16
    4a8c:	42000204 	addi	r8,r8,8
    4a90:	acc0110e 	bge	r21,r19,4ad8 <___vfprintf_internal_r+0x1074>
    4a94:	18c00404 	addi	r3,r3,16
    4a98:	10800044 	addi	r2,r2,1
    4a9c:	45000015 	stw	r20,0(r8)
    4aa0:	45400115 	stw	r21,4(r8)
    4aa4:	d8c12015 	stw	r3,1152(sp)
    4aa8:	d8811f15 	stw	r2,1148(sp)
    4aac:	90bff60e 	bge	r18,r2,4a88 <__alt_data_end+0xfffaf358>
    4ab0:	b809883a 	mov	r4,r23
    4ab4:	b00b883a 	mov	r5,r22
    4ab8:	d9811e04 	addi	r6,sp,1144
    4abc:	000a6a80 	call	a6a8 <__sprint_r>
    4ac0:	103d001e 	bne	r2,zero,3ec4 <__alt_data_end+0xfffae794>
    4ac4:	9cfffc04 	addi	r19,r19,-16
    4ac8:	d8c12017 	ldw	r3,1152(sp)
    4acc:	d8811f17 	ldw	r2,1148(sp)
    4ad0:	da000404 	addi	r8,sp,16
    4ad4:	acffef16 	blt	r21,r19,4a94 <__alt_data_end+0xfffaf364>
    4ad8:	d9012c17 	ldw	r4,1200(sp)
    4adc:	1cc7883a 	add	r3,r3,r19
    4ae0:	10800044 	addi	r2,r2,1
    4ae4:	41000015 	stw	r4,0(r8)
    4ae8:	44c00115 	stw	r19,4(r8)
    4aec:	d8c12015 	stw	r3,1152(sp)
    4af0:	d8811f15 	stw	r2,1148(sp)
    4af4:	010001c4 	movi	r4,7
    4af8:	20817816 	blt	r4,r2,50dc <___vfprintf_internal_r+0x1678>
    4afc:	42000204 	addi	r8,r8,8
    4b00:	003db506 	br	41d8 <__alt_data_end+0xfffaeaa8>
    4b04:	d9413317 	ldw	r5,1228(sp)
    4b08:	00800044 	movi	r2,1
    4b0c:	18c00044 	addi	r3,r3,1
    4b10:	11413e0e 	bge	r2,r5,500c <___vfprintf_internal_r+0x15a8>
    4b14:	dc011f17 	ldw	r16,1148(sp)
    4b18:	d8813117 	ldw	r2,1220(sp)
    4b1c:	d8c12015 	stw	r3,1152(sp)
    4b20:	84000044 	addi	r16,r16,1
    4b24:	40800015 	stw	r2,0(r8)
    4b28:	00800044 	movi	r2,1
    4b2c:	40800115 	stw	r2,4(r8)
    4b30:	dc011f15 	stw	r16,1148(sp)
    4b34:	008001c4 	movi	r2,7
    4b38:	14015616 	blt	r2,r16,5094 <___vfprintf_internal_r+0x1630>
    4b3c:	42000204 	addi	r8,r8,8
    4b40:	d9013817 	ldw	r4,1248(sp)
    4b44:	d9413517 	ldw	r5,1236(sp)
    4b48:	84000044 	addi	r16,r16,1
    4b4c:	1907883a 	add	r3,r3,r4
    4b50:	41400015 	stw	r5,0(r8)
    4b54:	41000115 	stw	r4,4(r8)
    4b58:	d8c12015 	stw	r3,1152(sp)
    4b5c:	dc011f15 	stw	r16,1148(sp)
    4b60:	008001c4 	movi	r2,7
    4b64:	14015416 	blt	r2,r16,50b8 <___vfprintf_internal_r+0x1654>
    4b68:	44400204 	addi	r17,r8,8
    4b6c:	d9013717 	ldw	r4,1244(sp)
    4b70:	d9413917 	ldw	r5,1252(sp)
    4b74:	000d883a 	mov	r6,zero
    4b78:	000f883a 	mov	r7,zero
    4b7c:	d8c13d15 	stw	r3,1268(sp)
    4b80:	000e4000 	call	e400 <__eqdf2>
    4b84:	d8c13d17 	ldw	r3,1268(sp)
    4b88:	1000a726 	beq	r2,zero,4e28 <___vfprintf_internal_r+0x13c4>
    4b8c:	d9013317 	ldw	r4,1228(sp)
    4b90:	d9413117 	ldw	r5,1220(sp)
    4b94:	84000044 	addi	r16,r16,1
    4b98:	20bfffc4 	addi	r2,r4,-1
    4b9c:	1887883a 	add	r3,r3,r2
    4ba0:	29000044 	addi	r4,r5,1
    4ba4:	88800115 	stw	r2,4(r17)
    4ba8:	89000015 	stw	r4,0(r17)
    4bac:	d8c12015 	stw	r3,1152(sp)
    4bb0:	dc011f15 	stw	r16,1148(sp)
    4bb4:	008001c4 	movi	r2,7
    4bb8:	14012d16 	blt	r2,r16,5070 <___vfprintf_internal_r+0x160c>
    4bbc:	8c400204 	addi	r17,r17,8
    4bc0:	d9413a17 	ldw	r5,1256(sp)
    4bc4:	dcc122c4 	addi	r19,sp,1163
    4bc8:	84000044 	addi	r16,r16,1
    4bcc:	28c7883a 	add	r3,r5,r3
    4bd0:	8cc00015 	stw	r19,0(r17)
    4bd4:	89400115 	stw	r5,4(r17)
    4bd8:	d8c12015 	stw	r3,1152(sp)
    4bdc:	dc011f15 	stw	r16,1148(sp)
    4be0:	008001c4 	movi	r2,7
    4be4:	14000e16 	blt	r2,r16,4c20 <___vfprintf_internal_r+0x11bc>
    4be8:	8a000204 	addi	r8,r17,8
    4bec:	003db006 	br	42b0 <__alt_data_end+0xfffaeb80>
    4bf0:	01000074 	movhi	r4,1
    4bf4:	210a9284 	addi	r4,r4,10826
    4bf8:	d9012c15 	stw	r4,1200(sp)
    4bfc:	d9012c17 	ldw	r4,1200(sp)
    4c00:	1c07883a 	add	r3,r3,r16
    4c04:	44000115 	stw	r16,4(r8)
    4c08:	41000015 	stw	r4,0(r8)
    4c0c:	10800044 	addi	r2,r2,1
    4c10:	d8c12015 	stw	r3,1152(sp)
    4c14:	d8811f15 	stw	r2,1148(sp)
    4c18:	010001c4 	movi	r4,7
    4c1c:	20bda30e 	bge	r4,r2,42ac <__alt_data_end+0xfffaeb7c>
    4c20:	b809883a 	mov	r4,r23
    4c24:	b00b883a 	mov	r5,r22
    4c28:	d9811e04 	addi	r6,sp,1144
    4c2c:	000a6a80 	call	a6a8 <__sprint_r>
    4c30:	103ca41e 	bne	r2,zero,3ec4 <__alt_data_end+0xfffae794>
    4c34:	d8c12017 	ldw	r3,1152(sp)
    4c38:	da000404 	addi	r8,sp,16
    4c3c:	003d9c06 	br	42b0 <__alt_data_end+0xfffaeb80>
    4c40:	b809883a 	mov	r4,r23
    4c44:	b00b883a 	mov	r5,r22
    4c48:	d9811e04 	addi	r6,sp,1144
    4c4c:	000a6a80 	call	a6a8 <__sprint_r>
    4c50:	103dd226 	beq	r2,zero,439c <__alt_data_end+0xfffaec6c>
    4c54:	003c9b06 	br	3ec4 <__alt_data_end+0xfffae794>
    4c58:	10803fcc 	andi	r2,r2,255
    4c5c:	1000311e 	bne	r2,zero,4d24 <___vfprintf_internal_r+0x12c0>
    4c60:	e080004c 	andi	r2,fp,1
    4c64:	10002f26 	beq	r2,zero,4d24 <___vfprintf_internal_r+0x12c0>
    4c68:	00800c04 	movi	r2,48
    4c6c:	d8c10dc4 	addi	r3,sp,1079
    4c70:	d8810dc5 	stb	r2,1079(sp)
    4c74:	dc413c17 	ldw	r17,1264(sp)
    4c78:	d8c13115 	stw	r3,1220(sp)
    4c7c:	003cf406 	br	4050 <__alt_data_end+0xfffae920>
    4c80:	b809883a 	mov	r4,r23
    4c84:	b00b883a 	mov	r5,r22
    4c88:	d9811e04 	addi	r6,sp,1144
    4c8c:	000a6a80 	call	a6a8 <__sprint_r>
    4c90:	103c8c1e 	bne	r2,zero,3ec4 <__alt_data_end+0xfffae794>
    4c94:	d8c12017 	ldw	r3,1152(sp)
    4c98:	da000404 	addi	r8,sp,16
    4c9c:	003d7706 	br	427c <__alt_data_end+0xfffaeb4c>
    4ca0:	b809883a 	mov	r4,r23
    4ca4:	b00b883a 	mov	r5,r22
    4ca8:	d9811e04 	addi	r6,sp,1144
    4cac:	000a6a80 	call	a6a8 <__sprint_r>
    4cb0:	103c841e 	bne	r2,zero,3ec4 <__alt_data_end+0xfffae794>
    4cb4:	d8c12017 	ldw	r3,1152(sp)
    4cb8:	da000404 	addi	r8,sp,16
    4cbc:	003d3506 	br	4194 <__alt_data_end+0xfffaea64>
    4cc0:	b809883a 	mov	r4,r23
    4cc4:	b00b883a 	mov	r5,r22
    4cc8:	d9811e04 	addi	r6,sp,1144
    4ccc:	000a6a80 	call	a6a8 <__sprint_r>
    4cd0:	103c7c1e 	bne	r2,zero,3ec4 <__alt_data_end+0xfffae794>
    4cd4:	d8c12017 	ldw	r3,1152(sp)
    4cd8:	da000404 	addi	r8,sp,16
    4cdc:	003d3b06 	br	41cc <__alt_data_end+0xfffaea9c>
    4ce0:	d9413b17 	ldw	r5,1260(sp)
    4ce4:	d8c10e04 	addi	r3,sp,1080
    4ce8:	908003cc 	andi	r2,r18,15
    4cec:	a808973a 	slli	r4,r21,28
    4cf0:	2885883a 	add	r2,r5,r2
    4cf4:	9024d13a 	srli	r18,r18,4
    4cf8:	10800003 	ldbu	r2,0(r2)
    4cfc:	a82ad13a 	srli	r21,r21,4
    4d00:	18ffffc4 	addi	r3,r3,-1
    4d04:	24a4b03a 	or	r18,r4,r18
    4d08:	18800005 	stb	r2,0(r3)
    4d0c:	9544b03a 	or	r2,r18,r21
    4d10:	103ff51e 	bne	r2,zero,4ce8 <__alt_data_end+0xfffaf5b8>
    4d14:	d9412817 	ldw	r5,1184(sp)
    4d18:	d8c13115 	stw	r3,1220(sp)
    4d1c:	28e3c83a 	sub	r17,r5,r3
    4d20:	003ccb06 	br	4050 <__alt_data_end+0xfffae920>
    4d24:	d8c10e04 	addi	r3,sp,1080
    4d28:	0023883a 	mov	r17,zero
    4d2c:	d8c13115 	stw	r3,1220(sp)
    4d30:	003cc706 	br	4050 <__alt_data_end+0xfffae920>
    4d34:	dc012617 	ldw	r16,1176(sp)
    4d38:	0401ab0e 	bge	zero,r16,53e8 <___vfprintf_internal_r+0x1984>
    4d3c:	d8813317 	ldw	r2,1228(sp)
    4d40:	d9413117 	ldw	r5,1220(sp)
    4d44:	d9013417 	ldw	r4,1232(sp)
    4d48:	1023883a 	mov	r17,r2
    4d4c:	28a1883a 	add	r16,r5,r2
    4d50:	2080010e 	bge	r4,r2,4d58 <___vfprintf_internal_r+0x12f4>
    4d54:	2023883a 	mov	r17,r4
    4d58:	04400b0e 	bge	zero,r17,4d88 <___vfprintf_internal_r+0x1324>
    4d5c:	d8811f17 	ldw	r2,1148(sp)
    4d60:	d9413117 	ldw	r5,1220(sp)
    4d64:	1c47883a 	add	r3,r3,r17
    4d68:	10800044 	addi	r2,r2,1
    4d6c:	41400015 	stw	r5,0(r8)
    4d70:	44400115 	stw	r17,4(r8)
    4d74:	d8c12015 	stw	r3,1152(sp)
    4d78:	d8811f15 	stw	r2,1148(sp)
    4d7c:	010001c4 	movi	r4,7
    4d80:	20826716 	blt	r4,r2,5720 <___vfprintf_internal_r+0x1cbc>
    4d84:	42000204 	addi	r8,r8,8
    4d88:	88026316 	blt	r17,zero,5718 <___vfprintf_internal_r+0x1cb4>
    4d8c:	d8813417 	ldw	r2,1232(sp)
    4d90:	1463c83a 	sub	r17,r2,r17
    4d94:	0440590e 	bge	zero,r17,4efc <___vfprintf_internal_r+0x1498>
    4d98:	04c00404 	movi	r19,16
    4d9c:	d8811f17 	ldw	r2,1148(sp)
    4da0:	9c41770e 	bge	r19,r17,5380 <___vfprintf_internal_r+0x191c>
    4da4:	01400074 	movhi	r5,1
    4da8:	294a9284 	addi	r5,r5,10826
    4dac:	d9412c15 	stw	r5,1200(sp)
    4db0:	054001c4 	movi	r21,7
    4db4:	00000306 	br	4dc4 <___vfprintf_internal_r+0x1360>
    4db8:	42000204 	addi	r8,r8,8
    4dbc:	8c7ffc04 	addi	r17,r17,-16
    4dc0:	9c41720e 	bge	r19,r17,538c <___vfprintf_internal_r+0x1928>
    4dc4:	18c00404 	addi	r3,r3,16
    4dc8:	10800044 	addi	r2,r2,1
    4dcc:	45000015 	stw	r20,0(r8)
    4dd0:	44c00115 	stw	r19,4(r8)
    4dd4:	d8c12015 	stw	r3,1152(sp)
    4dd8:	d8811f15 	stw	r2,1148(sp)
    4ddc:	a8bff60e 	bge	r21,r2,4db8 <__alt_data_end+0xfffaf688>
    4de0:	b809883a 	mov	r4,r23
    4de4:	b00b883a 	mov	r5,r22
    4de8:	d9811e04 	addi	r6,sp,1144
    4dec:	000a6a80 	call	a6a8 <__sprint_r>
    4df0:	103c341e 	bne	r2,zero,3ec4 <__alt_data_end+0xfffae794>
    4df4:	d8c12017 	ldw	r3,1152(sp)
    4df8:	d8811f17 	ldw	r2,1148(sp)
    4dfc:	da000404 	addi	r8,sp,16
    4e00:	003fee06 	br	4dbc <__alt_data_end+0xfffaf68c>
    4e04:	b809883a 	mov	r4,r23
    4e08:	b00b883a 	mov	r5,r22
    4e0c:	d9811e04 	addi	r6,sp,1144
    4e10:	000a6a80 	call	a6a8 <__sprint_r>
    4e14:	103c2b1e 	bne	r2,zero,3ec4 <__alt_data_end+0xfffae794>
    4e18:	d8c12017 	ldw	r3,1152(sp)
    4e1c:	d8812787 	ldb	r2,1182(sp)
    4e20:	da000404 	addi	r8,sp,16
    4e24:	003cce06 	br	4160 <__alt_data_end+0xfffaea30>
    4e28:	d8813317 	ldw	r2,1228(sp)
    4e2c:	14ffffc4 	addi	r19,r2,-1
    4e30:	04ff630e 	bge	zero,r19,4bc0 <__alt_data_end+0xfffaf490>
    4e34:	05400404 	movi	r21,16
    4e38:	acc0810e 	bge	r21,r19,5040 <___vfprintf_internal_r+0x15dc>
    4e3c:	01400074 	movhi	r5,1
    4e40:	294a9284 	addi	r5,r5,10826
    4e44:	d9412c15 	stw	r5,1200(sp)
    4e48:	01c001c4 	movi	r7,7
    4e4c:	00000306 	br	4e5c <___vfprintf_internal_r+0x13f8>
    4e50:	8c400204 	addi	r17,r17,8
    4e54:	9cfffc04 	addi	r19,r19,-16
    4e58:	acc07c0e 	bge	r21,r19,504c <___vfprintf_internal_r+0x15e8>
    4e5c:	18c00404 	addi	r3,r3,16
    4e60:	84000044 	addi	r16,r16,1
    4e64:	8d000015 	stw	r20,0(r17)
    4e68:	8d400115 	stw	r21,4(r17)
    4e6c:	d8c12015 	stw	r3,1152(sp)
    4e70:	dc011f15 	stw	r16,1148(sp)
    4e74:	3c3ff60e 	bge	r7,r16,4e50 <__alt_data_end+0xfffaf720>
    4e78:	b809883a 	mov	r4,r23
    4e7c:	b00b883a 	mov	r5,r22
    4e80:	d9811e04 	addi	r6,sp,1144
    4e84:	d9c13d15 	stw	r7,1268(sp)
    4e88:	000a6a80 	call	a6a8 <__sprint_r>
    4e8c:	d9c13d17 	ldw	r7,1268(sp)
    4e90:	103c0c1e 	bne	r2,zero,3ec4 <__alt_data_end+0xfffae794>
    4e94:	d8c12017 	ldw	r3,1152(sp)
    4e98:	dc011f17 	ldw	r16,1148(sp)
    4e9c:	dc400404 	addi	r17,sp,16
    4ea0:	003fec06 	br	4e54 <__alt_data_end+0xfffaf724>
    4ea4:	00800084 	movi	r2,2
    4ea8:	9546b03a 	or	r3,r18,r21
    4eac:	003d7d06 	br	44a4 <__alt_data_end+0xfffaed74>
    4eb0:	10803fcc 	andi	r2,r2,255
    4eb4:	1080201c 	xori	r2,r2,128
    4eb8:	10bfe004 	addi	r2,r2,-128
    4ebc:	01000c04 	movi	r4,48
    4ec0:	1101d726 	beq	r2,r4,5620 <___vfprintf_internal_r+0x1bbc>
    4ec4:	d9413117 	ldw	r5,1220(sp)
    4ec8:	d8812817 	ldw	r2,1184(sp)
    4ecc:	193fffc5 	stb	r4,-1(r3)
    4ed0:	297fffc4 	addi	r5,r5,-1
    4ed4:	d9413115 	stw	r5,1220(sp)
    4ed8:	1163c83a 	sub	r17,r2,r5
    4edc:	003c5c06 	br	4050 <__alt_data_end+0xfffae920>
    4ee0:	b809883a 	mov	r4,r23
    4ee4:	b00b883a 	mov	r5,r22
    4ee8:	d9811e04 	addi	r6,sp,1144
    4eec:	000a6a80 	call	a6a8 <__sprint_r>
    4ef0:	103bf41e 	bne	r2,zero,3ec4 <__alt_data_end+0xfffae794>
    4ef4:	d8c12017 	ldw	r3,1152(sp)
    4ef8:	da000404 	addi	r8,sp,16
    4efc:	d9413117 	ldw	r5,1220(sp)
    4f00:	d9013417 	ldw	r4,1232(sp)
    4f04:	d8812617 	ldw	r2,1176(sp)
    4f08:	2923883a 	add	r17,r5,r4
    4f0c:	d9413317 	ldw	r5,1228(sp)
    4f10:	11400216 	blt	r2,r5,4f1c <___vfprintf_internal_r+0x14b8>
    4f14:	e100004c 	andi	r4,fp,1
    4f18:	20000d26 	beq	r4,zero,4f50 <___vfprintf_internal_r+0x14ec>
    4f1c:	d9013817 	ldw	r4,1248(sp)
    4f20:	d9413517 	ldw	r5,1236(sp)
    4f24:	1907883a 	add	r3,r3,r4
    4f28:	d9011f17 	ldw	r4,1148(sp)
    4f2c:	41400015 	stw	r5,0(r8)
    4f30:	d9413817 	ldw	r5,1248(sp)
    4f34:	21000044 	addi	r4,r4,1
    4f38:	d8c12015 	stw	r3,1152(sp)
    4f3c:	41400115 	stw	r5,4(r8)
    4f40:	d9011f15 	stw	r4,1148(sp)
    4f44:	014001c4 	movi	r5,7
    4f48:	2901fd16 	blt	r5,r4,5740 <___vfprintf_internal_r+0x1cdc>
    4f4c:	42000204 	addi	r8,r8,8
    4f50:	d9013317 	ldw	r4,1228(sp)
    4f54:	2085c83a 	sub	r2,r4,r2
    4f58:	8449c83a 	sub	r4,r16,r17
    4f5c:	1021883a 	mov	r16,r2
    4f60:	2080010e 	bge	r4,r2,4f68 <___vfprintf_internal_r+0x1504>
    4f64:	2021883a 	mov	r16,r4
    4f68:	04000a0e 	bge	zero,r16,4f94 <___vfprintf_internal_r+0x1530>
    4f6c:	d9011f17 	ldw	r4,1148(sp)
    4f70:	1c07883a 	add	r3,r3,r16
    4f74:	44400015 	stw	r17,0(r8)
    4f78:	21000044 	addi	r4,r4,1
    4f7c:	44000115 	stw	r16,4(r8)
    4f80:	d8c12015 	stw	r3,1152(sp)
    4f84:	d9011f15 	stw	r4,1148(sp)
    4f88:	014001c4 	movi	r5,7
    4f8c:	29020916 	blt	r5,r4,57b4 <___vfprintf_internal_r+0x1d50>
    4f90:	42000204 	addi	r8,r8,8
    4f94:	80020116 	blt	r16,zero,579c <___vfprintf_internal_r+0x1d38>
    4f98:	1421c83a 	sub	r16,r2,r16
    4f9c:	043cc40e 	bge	zero,r16,42b0 <__alt_data_end+0xfffaeb80>
    4fa0:	04400404 	movi	r17,16
    4fa4:	d8811f17 	ldw	r2,1148(sp)
    4fa8:	8c3f110e 	bge	r17,r16,4bf0 <__alt_data_end+0xfffaf4c0>
    4fac:	01400074 	movhi	r5,1
    4fb0:	294a9284 	addi	r5,r5,10826
    4fb4:	d9412c15 	stw	r5,1200(sp)
    4fb8:	04c001c4 	movi	r19,7
    4fbc:	00000306 	br	4fcc <___vfprintf_internal_r+0x1568>
    4fc0:	42000204 	addi	r8,r8,8
    4fc4:	843ffc04 	addi	r16,r16,-16
    4fc8:	8c3f0c0e 	bge	r17,r16,4bfc <__alt_data_end+0xfffaf4cc>
    4fcc:	18c00404 	addi	r3,r3,16
    4fd0:	10800044 	addi	r2,r2,1
    4fd4:	45000015 	stw	r20,0(r8)
    4fd8:	44400115 	stw	r17,4(r8)
    4fdc:	d8c12015 	stw	r3,1152(sp)
    4fe0:	d8811f15 	stw	r2,1148(sp)
    4fe4:	98bff60e 	bge	r19,r2,4fc0 <__alt_data_end+0xfffaf890>
    4fe8:	b809883a 	mov	r4,r23
    4fec:	b00b883a 	mov	r5,r22
    4ff0:	d9811e04 	addi	r6,sp,1144
    4ff4:	000a6a80 	call	a6a8 <__sprint_r>
    4ff8:	103bb21e 	bne	r2,zero,3ec4 <__alt_data_end+0xfffae794>
    4ffc:	d8c12017 	ldw	r3,1152(sp)
    5000:	d8811f17 	ldw	r2,1148(sp)
    5004:	da000404 	addi	r8,sp,16
    5008:	003fee06 	br	4fc4 <__alt_data_end+0xfffaf894>
    500c:	e088703a 	and	r4,fp,r2
    5010:	203ec01e 	bne	r4,zero,4b14 <__alt_data_end+0xfffaf3e4>
    5014:	dc011f17 	ldw	r16,1148(sp)
    5018:	d9013117 	ldw	r4,1220(sp)
    501c:	40800115 	stw	r2,4(r8)
    5020:	84000044 	addi	r16,r16,1
    5024:	41000015 	stw	r4,0(r8)
    5028:	d8c12015 	stw	r3,1152(sp)
    502c:	dc011f15 	stw	r16,1148(sp)
    5030:	008001c4 	movi	r2,7
    5034:	14000e16 	blt	r2,r16,5070 <___vfprintf_internal_r+0x160c>
    5038:	44400204 	addi	r17,r8,8
    503c:	003ee006 	br	4bc0 <__alt_data_end+0xfffaf490>
    5040:	01000074 	movhi	r4,1
    5044:	210a9284 	addi	r4,r4,10826
    5048:	d9012c15 	stw	r4,1200(sp)
    504c:	d8812c17 	ldw	r2,1200(sp)
    5050:	1cc7883a 	add	r3,r3,r19
    5054:	84000044 	addi	r16,r16,1
    5058:	88800015 	stw	r2,0(r17)
    505c:	8cc00115 	stw	r19,4(r17)
    5060:	d8c12015 	stw	r3,1152(sp)
    5064:	dc011f15 	stw	r16,1148(sp)
    5068:	008001c4 	movi	r2,7
    506c:	143ed30e 	bge	r2,r16,4bbc <__alt_data_end+0xfffaf48c>
    5070:	b809883a 	mov	r4,r23
    5074:	b00b883a 	mov	r5,r22
    5078:	d9811e04 	addi	r6,sp,1144
    507c:	000a6a80 	call	a6a8 <__sprint_r>
    5080:	103b901e 	bne	r2,zero,3ec4 <__alt_data_end+0xfffae794>
    5084:	d8c12017 	ldw	r3,1152(sp)
    5088:	dc011f17 	ldw	r16,1148(sp)
    508c:	dc400404 	addi	r17,sp,16
    5090:	003ecb06 	br	4bc0 <__alt_data_end+0xfffaf490>
    5094:	b809883a 	mov	r4,r23
    5098:	b00b883a 	mov	r5,r22
    509c:	d9811e04 	addi	r6,sp,1144
    50a0:	000a6a80 	call	a6a8 <__sprint_r>
    50a4:	103b871e 	bne	r2,zero,3ec4 <__alt_data_end+0xfffae794>
    50a8:	d8c12017 	ldw	r3,1152(sp)
    50ac:	dc011f17 	ldw	r16,1148(sp)
    50b0:	da000404 	addi	r8,sp,16
    50b4:	003ea206 	br	4b40 <__alt_data_end+0xfffaf410>
    50b8:	b809883a 	mov	r4,r23
    50bc:	b00b883a 	mov	r5,r22
    50c0:	d9811e04 	addi	r6,sp,1144
    50c4:	000a6a80 	call	a6a8 <__sprint_r>
    50c8:	103b7e1e 	bne	r2,zero,3ec4 <__alt_data_end+0xfffae794>
    50cc:	d8c12017 	ldw	r3,1152(sp)
    50d0:	dc011f17 	ldw	r16,1148(sp)
    50d4:	dc400404 	addi	r17,sp,16
    50d8:	003ea406 	br	4b6c <__alt_data_end+0xfffaf43c>
    50dc:	b809883a 	mov	r4,r23
    50e0:	b00b883a 	mov	r5,r22
    50e4:	d9811e04 	addi	r6,sp,1144
    50e8:	000a6a80 	call	a6a8 <__sprint_r>
    50ec:	103b751e 	bne	r2,zero,3ec4 <__alt_data_end+0xfffae794>
    50f0:	d8c12017 	ldw	r3,1152(sp)
    50f4:	da000404 	addi	r8,sp,16
    50f8:	003c3706 	br	41d8 <__alt_data_end+0xfffaeaa8>
    50fc:	04a5c83a 	sub	r18,zero,r18
    5100:	9004c03a 	cmpne	r2,r18,zero
    5104:	056bc83a 	sub	r21,zero,r21
    5108:	a8abc83a 	sub	r21,r21,r2
    510c:	04c00b44 	movi	r19,45
    5110:	dcc12785 	stb	r19,1182(sp)
    5114:	da413215 	stw	r9,1224(sp)
    5118:	00800044 	movi	r2,1
    511c:	9546b03a 	or	r3,r18,r21
    5120:	003bb106 	br	3fe8 <__alt_data_end+0xfffae8b8>
    5124:	da013f15 	stw	r8,1276(sp)
    5128:	da413e15 	stw	r9,1272(sp)
    512c:	000a3580 	call	a358 <__fpclassifyd>
    5130:	da013f17 	ldw	r8,1276(sp)
    5134:	da413e17 	ldw	r9,1272(sp)
    5138:	1000e526 	beq	r2,zero,54d0 <___vfprintf_internal_r+0x1a6c>
    513c:	04fff7c4 	movi	r19,-33
    5140:	00bfffc4 	movi	r2,-1
    5144:	84e6703a 	and	r19,r16,r19
    5148:	48822926 	beq	r9,r2,59f0 <___vfprintf_internal_r+0x1f8c>
    514c:	008011c4 	movi	r2,71
    5150:	98821626 	beq	r19,r2,59ac <___vfprintf_internal_r+0x1f48>
    5154:	d9013917 	ldw	r4,1252(sp)
    5158:	e0c04014 	ori	r3,fp,256
    515c:	d8c12d15 	stw	r3,1204(sp)
    5160:	20021f16 	blt	r4,zero,59e0 <___vfprintf_internal_r+0x1f7c>
    5164:	dc413917 	ldw	r17,1252(sp)
    5168:	d8012b05 	stb	zero,1196(sp)
    516c:	00801984 	movi	r2,102
    5170:	80814d26 	beq	r16,r2,56a8 <___vfprintf_internal_r+0x1c44>
    5174:	00801184 	movi	r2,70
    5178:	80814b26 	beq	r16,r2,56a8 <___vfprintf_internal_r+0x1c44>
    517c:	00801144 	movi	r2,69
    5180:	98821d26 	beq	r19,r2,59f8 <___vfprintf_internal_r+0x1f94>
    5184:	482b883a 	mov	r21,r9
    5188:	d8812604 	addi	r2,sp,1176
    518c:	d8800115 	stw	r2,4(sp)
    5190:	d9413717 	ldw	r5,1244(sp)
    5194:	d8812504 	addi	r2,sp,1172
    5198:	d8800215 	stw	r2,8(sp)
    519c:	d8812104 	addi	r2,sp,1156
    51a0:	dd400015 	stw	r21,0(sp)
    51a4:	d8800315 	stw	r2,12(sp)
    51a8:	b809883a 	mov	r4,r23
    51ac:	880d883a 	mov	r6,r17
    51b0:	01c00084 	movi	r7,2
    51b4:	da013f15 	stw	r8,1276(sp)
    51b8:	da413e15 	stw	r9,1272(sp)
    51bc:	0005edc0 	call	5edc <_dtoa_r>
    51c0:	d8813115 	stw	r2,1220(sp)
    51c4:	008019c4 	movi	r2,103
    51c8:	da013f17 	ldw	r8,1276(sp)
    51cc:	da413e17 	ldw	r9,1272(sp)
    51d0:	80800226 	beq	r16,r2,51dc <___vfprintf_internal_r+0x1778>
    51d4:	008011c4 	movi	r2,71
    51d8:	8081451e 	bne	r16,r2,56f0 <___vfprintf_internal_r+0x1c8c>
    51dc:	e080004c 	andi	r2,fp,1
    51e0:	10021e26 	beq	r2,zero,5a5c <___vfprintf_internal_r+0x1ff8>
    51e4:	d8c13117 	ldw	r3,1220(sp)
    51e8:	1d55883a 	add	r10,r3,r21
    51ec:	d9013717 	ldw	r4,1244(sp)
    51f0:	880b883a 	mov	r5,r17
    51f4:	000d883a 	mov	r6,zero
    51f8:	000f883a 	mov	r7,zero
    51fc:	da013f15 	stw	r8,1276(sp)
    5200:	da413e15 	stw	r9,1272(sp)
    5204:	da813d15 	stw	r10,1268(sp)
    5208:	000e4000 	call	e400 <__eqdf2>
    520c:	da013f17 	ldw	r8,1276(sp)
    5210:	da413e17 	ldw	r9,1272(sp)
    5214:	da813d17 	ldw	r10,1268(sp)
    5218:	1001a126 	beq	r2,zero,58a0 <___vfprintf_internal_r+0x1e3c>
    521c:	d8812117 	ldw	r2,1156(sp)
    5220:	1280062e 	bgeu	r2,r10,523c <___vfprintf_internal_r+0x17d8>
    5224:	01000c04 	movi	r4,48
    5228:	10c00044 	addi	r3,r2,1
    522c:	d8c12115 	stw	r3,1156(sp)
    5230:	11000005 	stb	r4,0(r2)
    5234:	d8812117 	ldw	r2,1156(sp)
    5238:	12bffb36 	bltu	r2,r10,5228 <__alt_data_end+0xfffafaf8>
    523c:	d8c13117 	ldw	r3,1220(sp)
    5240:	10c5c83a 	sub	r2,r2,r3
    5244:	d8813315 	stw	r2,1228(sp)
    5248:	008011c4 	movi	r2,71
    524c:	98818926 	beq	r19,r2,5874 <___vfprintf_internal_r+0x1e10>
    5250:	00801944 	movi	r2,101
    5254:	14023c0e 	bge	r2,r16,5b48 <___vfprintf_internal_r+0x20e4>
    5258:	d8c12617 	ldw	r3,1176(sp)
    525c:	00801984 	movi	r2,102
    5260:	d8c13415 	stw	r3,1232(sp)
    5264:	8081ef26 	beq	r16,r2,5a24 <___vfprintf_internal_r+0x1fc0>
    5268:	d8c13417 	ldw	r3,1232(sp)
    526c:	d9013317 	ldw	r4,1228(sp)
    5270:	1901e316 	blt	r3,r4,5a00 <___vfprintf_internal_r+0x1f9c>
    5274:	e080004c 	andi	r2,fp,1
    5278:	1001f426 	beq	r2,zero,5a4c <___vfprintf_internal_r+0x1fe8>
    527c:	d8c13417 	ldw	r3,1232(sp)
    5280:	1c400044 	addi	r17,r3,1
    5284:	8839883a 	mov	fp,r17
    5288:	8801e416 	blt	r17,zero,5a1c <___vfprintf_internal_r+0x1fb8>
    528c:	dd412b07 	ldb	r21,1196(sp)
    5290:	a801701e 	bne	r21,zero,5854 <___vfprintf_internal_r+0x1df0>
    5294:	df012b15 	stw	fp,1196(sp)
    5298:	dcc12783 	ldbu	r19,1182(sp)
    529c:	df012d17 	ldw	fp,1204(sp)
    52a0:	d8013215 	stw	zero,1224(sp)
    52a4:	dc812d15 	stw	r18,1204(sp)
    52a8:	003b6e06 	br	4064 <__alt_data_end+0xfffae934>
    52ac:	e080040c 	andi	r2,fp,16
    52b0:	1000b51e 	bne	r2,zero,5588 <___vfprintf_internal_r+0x1b24>
    52b4:	e080100c 	andi	r2,fp,64
    52b8:	10015b26 	beq	r2,zero,5828 <___vfprintf_internal_r+0x1dc4>
    52bc:	d9012d17 	ldw	r4,1204(sp)
    52c0:	d9412f17 	ldw	r5,1212(sp)
    52c4:	20800017 	ldw	r2,0(r4)
    52c8:	21000104 	addi	r4,r4,4
    52cc:	d9012d15 	stw	r4,1204(sp)
    52d0:	1140000d 	sth	r5,0(r2)
    52d4:	003a2006 	br	3b58 <__alt_data_end+0xfffae428>
    52d8:	e0c0100c 	andi	r3,fp,64
    52dc:	1800a226 	beq	r3,zero,5568 <___vfprintf_internal_r+0x1b04>
    52e0:	d8c12d17 	ldw	r3,1204(sp)
    52e4:	1480000b 	ldhu	r18,0(r2)
    52e8:	002b883a 	mov	r21,zero
    52ec:	18c00104 	addi	r3,r3,4
    52f0:	d8c12d15 	stw	r3,1204(sp)
    52f4:	0005883a 	mov	r2,zero
    52f8:	9007883a 	mov	r3,r18
    52fc:	003c6906 	br	44a4 <__alt_data_end+0xfffaed74>
    5300:	e0c0100c 	andi	r3,fp,64
    5304:	18009026 	beq	r3,zero,5548 <___vfprintf_internal_r+0x1ae4>
    5308:	1480000b 	ldhu	r18,0(r2)
    530c:	d8812d17 	ldw	r2,1204(sp)
    5310:	002b883a 	mov	r21,zero
    5314:	9007883a 	mov	r3,r18
    5318:	10800104 	addi	r2,r2,4
    531c:	d8812d15 	stw	r2,1204(sp)
    5320:	00800044 	movi	r2,1
    5324:	003c5f06 	br	44a4 <__alt_data_end+0xfffaed74>
    5328:	e0c0100c 	andi	r3,fp,64
    532c:	18008026 	beq	r3,zero,5530 <___vfprintf_internal_r+0x1acc>
    5330:	d9012d17 	ldw	r4,1204(sp)
    5334:	1480000b 	ldhu	r18,0(r2)
    5338:	002b883a 	mov	r21,zero
    533c:	21000104 	addi	r4,r4,4
    5340:	d9012d15 	stw	r4,1204(sp)
    5344:	003c7906 	br	452c <__alt_data_end+0xfffaedfc>
    5348:	e080100c 	andi	r2,fp,64
    534c:	10007126 	beq	r2,zero,5514 <___vfprintf_internal_r+0x1ab0>
    5350:	1c80000f 	ldh	r18,0(r3)
    5354:	d8812d17 	ldw	r2,1204(sp)
    5358:	902bd7fa 	srai	r21,r18,31
    535c:	10800104 	addi	r2,r2,4
    5360:	d8812d15 	stw	r2,1204(sp)
    5364:	a805883a 	mov	r2,r21
    5368:	003b1a06 	br	3fd4 <__alt_data_end+0xfffae8a4>
    536c:	e4000007 	ldb	r16,0(fp)
    5370:	e005883a 	mov	r2,fp
    5374:	003a2306 	br	3c04 <__alt_data_end+0xfffae4d4>
    5378:	00800084 	movi	r2,2
    537c:	003c4906 	br	44a4 <__alt_data_end+0xfffaed74>
    5380:	01000074 	movhi	r4,1
    5384:	210a9284 	addi	r4,r4,10826
    5388:	d9012c15 	stw	r4,1200(sp)
    538c:	d9012c17 	ldw	r4,1200(sp)
    5390:	1c47883a 	add	r3,r3,r17
    5394:	10800044 	addi	r2,r2,1
    5398:	41000015 	stw	r4,0(r8)
    539c:	44400115 	stw	r17,4(r8)
    53a0:	d8c12015 	stw	r3,1152(sp)
    53a4:	d8811f15 	stw	r2,1148(sp)
    53a8:	010001c4 	movi	r4,7
    53ac:	20becc16 	blt	r4,r2,4ee0 <__alt_data_end+0xfffaf7b0>
    53b0:	42000204 	addi	r8,r8,8
    53b4:	003ed106 	br	4efc <__alt_data_end+0xfffaf7cc>
    53b8:	01000074 	movhi	r4,1
    53bc:	210a9284 	addi	r4,r4,10826
    53c0:	d9012c15 	stw	r4,1200(sp)
    53c4:	003ba306 	br	4254 <__alt_data_end+0xfffaeb24>
    53c8:	b809883a 	mov	r4,r23
    53cc:	b00b883a 	mov	r5,r22
    53d0:	d9811e04 	addi	r6,sp,1144
    53d4:	000a6a80 	call	a6a8 <__sprint_r>
    53d8:	103aba1e 	bne	r2,zero,3ec4 <__alt_data_end+0xfffae794>
    53dc:	d8c12017 	ldw	r3,1152(sp)
    53e0:	da000404 	addi	r8,sp,16
    53e4:	003d6c06 	br	4998 <__alt_data_end+0xfffaf268>
    53e8:	d8811f17 	ldw	r2,1148(sp)
    53ec:	01400074 	movhi	r5,1
    53f0:	01000044 	movi	r4,1
    53f4:	18c00044 	addi	r3,r3,1
    53f8:	10800044 	addi	r2,r2,1
    53fc:	294a9204 	addi	r5,r5,10824
    5400:	41000115 	stw	r4,4(r8)
    5404:	41400015 	stw	r5,0(r8)
    5408:	d8c12015 	stw	r3,1152(sp)
    540c:	d8811f15 	stw	r2,1148(sp)
    5410:	010001c4 	movi	r4,7
    5414:	20806716 	blt	r4,r2,55b4 <___vfprintf_internal_r+0x1b50>
    5418:	42000204 	addi	r8,r8,8
    541c:	8000041e 	bne	r16,zero,5430 <___vfprintf_internal_r+0x19cc>
    5420:	d8813317 	ldw	r2,1228(sp)
    5424:	1000021e 	bne	r2,zero,5430 <___vfprintf_internal_r+0x19cc>
    5428:	e080004c 	andi	r2,fp,1
    542c:	103ba026 	beq	r2,zero,42b0 <__alt_data_end+0xfffaeb80>
    5430:	d9013817 	ldw	r4,1248(sp)
    5434:	d8811f17 	ldw	r2,1148(sp)
    5438:	d9413517 	ldw	r5,1236(sp)
    543c:	1907883a 	add	r3,r3,r4
    5440:	10800044 	addi	r2,r2,1
    5444:	41000115 	stw	r4,4(r8)
    5448:	41400015 	stw	r5,0(r8)
    544c:	d8c12015 	stw	r3,1152(sp)
    5450:	d8811f15 	stw	r2,1148(sp)
    5454:	010001c4 	movi	r4,7
    5458:	20815716 	blt	r4,r2,59b8 <___vfprintf_internal_r+0x1f54>
    545c:	42000204 	addi	r8,r8,8
    5460:	0421c83a 	sub	r16,zero,r16
    5464:	0400810e 	bge	zero,r16,566c <___vfprintf_internal_r+0x1c08>
    5468:	04400404 	movi	r17,16
    546c:	8c00bd0e 	bge	r17,r16,5764 <___vfprintf_internal_r+0x1d00>
    5470:	01400074 	movhi	r5,1
    5474:	294a9284 	addi	r5,r5,10826
    5478:	d9412c15 	stw	r5,1200(sp)
    547c:	04c001c4 	movi	r19,7
    5480:	00000306 	br	5490 <___vfprintf_internal_r+0x1a2c>
    5484:	42000204 	addi	r8,r8,8
    5488:	843ffc04 	addi	r16,r16,-16
    548c:	8c00b80e 	bge	r17,r16,5770 <___vfprintf_internal_r+0x1d0c>
    5490:	18c00404 	addi	r3,r3,16
    5494:	10800044 	addi	r2,r2,1
    5498:	45000015 	stw	r20,0(r8)
    549c:	44400115 	stw	r17,4(r8)
    54a0:	d8c12015 	stw	r3,1152(sp)
    54a4:	d8811f15 	stw	r2,1148(sp)
    54a8:	98bff60e 	bge	r19,r2,5484 <__alt_data_end+0xfffafd54>
    54ac:	b809883a 	mov	r4,r23
    54b0:	b00b883a 	mov	r5,r22
    54b4:	d9811e04 	addi	r6,sp,1144
    54b8:	000a6a80 	call	a6a8 <__sprint_r>
    54bc:	103a811e 	bne	r2,zero,3ec4 <__alt_data_end+0xfffae794>
    54c0:	d8c12017 	ldw	r3,1152(sp)
    54c4:	d8811f17 	ldw	r2,1148(sp)
    54c8:	da000404 	addi	r8,sp,16
    54cc:	003fee06 	br	5488 <__alt_data_end+0xfffafd58>
    54d0:	008011c4 	movi	r2,71
    54d4:	1400db16 	blt	r2,r16,5844 <___vfprintf_internal_r+0x1de0>
    54d8:	01000074 	movhi	r4,1
    54dc:	210a8404 	addi	r4,r4,10768
    54e0:	d9013115 	stw	r4,1220(sp)
    54e4:	00c000c4 	movi	r3,3
    54e8:	00bfdfc4 	movi	r2,-129
    54ec:	d8c12b15 	stw	r3,1196(sp)
    54f0:	e0b8703a 	and	fp,fp,r2
    54f4:	dcc12783 	ldbu	r19,1182(sp)
    54f8:	dc812d15 	stw	r18,1204(sp)
    54fc:	1823883a 	mov	r17,r3
    5500:	d8013215 	stw	zero,1224(sp)
    5504:	d8013415 	stw	zero,1232(sp)
    5508:	003ad606 	br	4064 <__alt_data_end+0xfffae934>
    550c:	4823883a 	mov	r17,r9
    5510:	003cc906 	br	4838 <__alt_data_end+0xfffaf108>
    5514:	1c800017 	ldw	r18,0(r3)
    5518:	d8c12d17 	ldw	r3,1204(sp)
    551c:	902bd7fa 	srai	r21,r18,31
    5520:	18c00104 	addi	r3,r3,4
    5524:	d8c12d15 	stw	r3,1204(sp)
    5528:	a805883a 	mov	r2,r21
    552c:	003aa906 	br	3fd4 <__alt_data_end+0xfffae8a4>
    5530:	d9412d17 	ldw	r5,1204(sp)
    5534:	14800017 	ldw	r18,0(r2)
    5538:	002b883a 	mov	r21,zero
    553c:	29400104 	addi	r5,r5,4
    5540:	d9412d15 	stw	r5,1204(sp)
    5544:	003bf906 	br	452c <__alt_data_end+0xfffaedfc>
    5548:	d8c12d17 	ldw	r3,1204(sp)
    554c:	14800017 	ldw	r18,0(r2)
    5550:	002b883a 	mov	r21,zero
    5554:	18c00104 	addi	r3,r3,4
    5558:	d8c12d15 	stw	r3,1204(sp)
    555c:	00800044 	movi	r2,1
    5560:	9007883a 	mov	r3,r18
    5564:	003bcf06 	br	44a4 <__alt_data_end+0xfffaed74>
    5568:	d9012d17 	ldw	r4,1204(sp)
    556c:	14800017 	ldw	r18,0(r2)
    5570:	002b883a 	mov	r21,zero
    5574:	21000104 	addi	r4,r4,4
    5578:	d9012d15 	stw	r4,1204(sp)
    557c:	0005883a 	mov	r2,zero
    5580:	9007883a 	mov	r3,r18
    5584:	003bc706 	br	44a4 <__alt_data_end+0xfffaed74>
    5588:	d9412d17 	ldw	r5,1204(sp)
    558c:	d8c12f17 	ldw	r3,1212(sp)
    5590:	28800017 	ldw	r2,0(r5)
    5594:	29400104 	addi	r5,r5,4
    5598:	d9412d15 	stw	r5,1204(sp)
    559c:	10c00015 	stw	r3,0(r2)
    55a0:	00396d06 	br	3b58 <__alt_data_end+0xfffae428>
    55a4:	01000074 	movhi	r4,1
    55a8:	210a8204 	addi	r4,r4,10760
    55ac:	d9013115 	stw	r4,1220(sp)
    55b0:	003ba206 	br	443c <__alt_data_end+0xfffaed0c>
    55b4:	b809883a 	mov	r4,r23
    55b8:	b00b883a 	mov	r5,r22
    55bc:	d9811e04 	addi	r6,sp,1144
    55c0:	000a6a80 	call	a6a8 <__sprint_r>
    55c4:	103a3f1e 	bne	r2,zero,3ec4 <__alt_data_end+0xfffae794>
    55c8:	dc012617 	ldw	r16,1176(sp)
    55cc:	d8c12017 	ldw	r3,1152(sp)
    55d0:	da000404 	addi	r8,sp,16
    55d4:	003f9106 	br	541c <__alt_data_end+0xfffafcec>
    55d8:	e0800044 	addi	r2,fp,1
    55dc:	9cc00814 	ori	r19,r19,32
    55e0:	e4000047 	ldb	r16,1(fp)
    55e4:	00398706 	br	3c04 <__alt_data_end+0xfffae4d4>
    55e8:	d8812e17 	ldw	r2,1208(sp)
    55ec:	d8c12d15 	stw	r3,1204(sp)
    55f0:	0085c83a 	sub	r2,zero,r2
    55f4:	d8812e15 	stw	r2,1208(sp)
    55f8:	e005883a 	mov	r2,fp
    55fc:	003a3a06 	br	3ee8 <__alt_data_end+0xfffae7b8>
    5600:	b809883a 	mov	r4,r23
    5604:	b00b883a 	mov	r5,r22
    5608:	d9811e04 	addi	r6,sp,1144
    560c:	000a6a80 	call	a6a8 <__sprint_r>
    5610:	103a2c1e 	bne	r2,zero,3ec4 <__alt_data_end+0xfffae794>
    5614:	d8c12017 	ldw	r3,1152(sp)
    5618:	da000404 	addi	r8,sp,16
    561c:	003cf006 	br	49e0 <__alt_data_end+0xfffaf2b0>
    5620:	d8c12817 	ldw	r3,1184(sp)
    5624:	d9013117 	ldw	r4,1220(sp)
    5628:	1923c83a 	sub	r17,r3,r4
    562c:	003a8806 	br	4050 <__alt_data_end+0xfffae920>
    5630:	da013f15 	stw	r8,1276(sp)
    5634:	00039cc0 	call	39cc <strlen>
    5638:	1023883a 	mov	r17,r2
    563c:	da013f17 	ldw	r8,1276(sp)
    5640:	883c7f0e 	bge	r17,zero,4840 <__alt_data_end+0xfffaf110>
    5644:	0005883a 	mov	r2,zero
    5648:	003c7d06 	br	4840 <__alt_data_end+0xfffaf110>
    564c:	b809883a 	mov	r4,r23
    5650:	b00b883a 	mov	r5,r22
    5654:	d9811e04 	addi	r6,sp,1144
    5658:	000a6a80 	call	a6a8 <__sprint_r>
    565c:	103a191e 	bne	r2,zero,3ec4 <__alt_data_end+0xfffae794>
    5660:	d8c12017 	ldw	r3,1152(sp)
    5664:	d8811f17 	ldw	r2,1148(sp)
    5668:	da000404 	addi	r8,sp,16
    566c:	d9413317 	ldw	r5,1228(sp)
    5670:	d9013117 	ldw	r4,1220(sp)
    5674:	10800044 	addi	r2,r2,1
    5678:	28c7883a 	add	r3,r5,r3
    567c:	41000015 	stw	r4,0(r8)
    5680:	41400115 	stw	r5,4(r8)
    5684:	d8c12015 	stw	r3,1152(sp)
    5688:	d8811f15 	stw	r2,1148(sp)
    568c:	010001c4 	movi	r4,7
    5690:	20bb060e 	bge	r4,r2,42ac <__alt_data_end+0xfffaeb7c>
    5694:	003d6206 	br	4c20 <__alt_data_end+0xfffaf4f0>
    5698:	01000074 	movhi	r4,1
    569c:	210a9684 	addi	r4,r4,10842
    56a0:	d9013615 	stw	r4,1240(sp)
    56a4:	003aa306 	br	4134 <__alt_data_end+0xfffaea04>
    56a8:	d8812604 	addi	r2,sp,1176
    56ac:	d8800115 	stw	r2,4(sp)
    56b0:	d9413717 	ldw	r5,1244(sp)
    56b4:	d8812504 	addi	r2,sp,1172
    56b8:	d8800215 	stw	r2,8(sp)
    56bc:	d8812104 	addi	r2,sp,1156
    56c0:	da400015 	stw	r9,0(sp)
    56c4:	d8800315 	stw	r2,12(sp)
    56c8:	b809883a 	mov	r4,r23
    56cc:	880d883a 	mov	r6,r17
    56d0:	01c000c4 	movi	r7,3
    56d4:	da013f15 	stw	r8,1276(sp)
    56d8:	da413e15 	stw	r9,1272(sp)
    56dc:	0005edc0 	call	5edc <_dtoa_r>
    56e0:	da413e17 	ldw	r9,1272(sp)
    56e4:	da013f17 	ldw	r8,1276(sp)
    56e8:	d8813115 	stw	r2,1220(sp)
    56ec:	482b883a 	mov	r21,r9
    56f0:	d8c13117 	ldw	r3,1220(sp)
    56f4:	00801184 	movi	r2,70
    56f8:	1d55883a 	add	r10,r3,r21
    56fc:	98bebb1e 	bne	r19,r2,51ec <__alt_data_end+0xfffafabc>
    5700:	19000007 	ldb	r4,0(r3)
    5704:	00800c04 	movi	r2,48
    5708:	2080dd26 	beq	r4,r2,5a80 <___vfprintf_internal_r+0x201c>
    570c:	d8c12617 	ldw	r3,1176(sp)
    5710:	50d5883a 	add	r10,r10,r3
    5714:	003eb506 	br	51ec <__alt_data_end+0xfffafabc>
    5718:	0023883a 	mov	r17,zero
    571c:	003d9b06 	br	4d8c <__alt_data_end+0xfffaf65c>
    5720:	b809883a 	mov	r4,r23
    5724:	b00b883a 	mov	r5,r22
    5728:	d9811e04 	addi	r6,sp,1144
    572c:	000a6a80 	call	a6a8 <__sprint_r>
    5730:	1039e41e 	bne	r2,zero,3ec4 <__alt_data_end+0xfffae794>
    5734:	d8c12017 	ldw	r3,1152(sp)
    5738:	da000404 	addi	r8,sp,16
    573c:	003d9206 	br	4d88 <__alt_data_end+0xfffaf658>
    5740:	b809883a 	mov	r4,r23
    5744:	b00b883a 	mov	r5,r22
    5748:	d9811e04 	addi	r6,sp,1144
    574c:	000a6a80 	call	a6a8 <__sprint_r>
    5750:	1039dc1e 	bne	r2,zero,3ec4 <__alt_data_end+0xfffae794>
    5754:	d8812617 	ldw	r2,1176(sp)
    5758:	d8c12017 	ldw	r3,1152(sp)
    575c:	da000404 	addi	r8,sp,16
    5760:	003dfb06 	br	4f50 <__alt_data_end+0xfffaf820>
    5764:	01000074 	movhi	r4,1
    5768:	210a9284 	addi	r4,r4,10826
    576c:	d9012c15 	stw	r4,1200(sp)
    5770:	d9012c17 	ldw	r4,1200(sp)
    5774:	1c07883a 	add	r3,r3,r16
    5778:	10800044 	addi	r2,r2,1
    577c:	41000015 	stw	r4,0(r8)
    5780:	44000115 	stw	r16,4(r8)
    5784:	d8c12015 	stw	r3,1152(sp)
    5788:	d8811f15 	stw	r2,1148(sp)
    578c:	010001c4 	movi	r4,7
    5790:	20bfae16 	blt	r4,r2,564c <__alt_data_end+0xfffaff1c>
    5794:	42000204 	addi	r8,r8,8
    5798:	003fb406 	br	566c <__alt_data_end+0xfffaff3c>
    579c:	0021883a 	mov	r16,zero
    57a0:	003dfd06 	br	4f98 <__alt_data_end+0xfffaf868>
    57a4:	01400074 	movhi	r5,1
    57a8:	294a9684 	addi	r5,r5,10842
    57ac:	d9413615 	stw	r5,1240(sp)
    57b0:	003ae306 	br	4340 <__alt_data_end+0xfffaec10>
    57b4:	b809883a 	mov	r4,r23
    57b8:	b00b883a 	mov	r5,r22
    57bc:	d9811e04 	addi	r6,sp,1144
    57c0:	000a6a80 	call	a6a8 <__sprint_r>
    57c4:	1039bf1e 	bne	r2,zero,3ec4 <__alt_data_end+0xfffae794>
    57c8:	d8812617 	ldw	r2,1176(sp)
    57cc:	d9413317 	ldw	r5,1228(sp)
    57d0:	d8c12017 	ldw	r3,1152(sp)
    57d4:	da000404 	addi	r8,sp,16
    57d8:	2885c83a 	sub	r2,r5,r2
    57dc:	003ded06 	br	4f94 <__alt_data_end+0xfffaf864>
    57e0:	00800184 	movi	r2,6
    57e4:	1240012e 	bgeu	r2,r9,57ec <___vfprintf_internal_r+0x1d88>
    57e8:	1013883a 	mov	r9,r2
    57ec:	4823883a 	mov	r17,r9
    57f0:	4805883a 	mov	r2,r9
    57f4:	4800b216 	blt	r9,zero,5ac0 <___vfprintf_internal_r+0x205c>
    57f8:	01400074 	movhi	r5,1
    57fc:	294a9004 	addi	r5,r5,10816
    5800:	d8812b15 	stw	r2,1196(sp)
    5804:	dc812d15 	stw	r18,1204(sp)
    5808:	d8013215 	stw	zero,1224(sp)
    580c:	d8013415 	stw	zero,1232(sp)
    5810:	d9413115 	stw	r5,1220(sp)
    5814:	0005883a 	mov	r2,zero
    5818:	003a1906 	br	4080 <__alt_data_end+0xfffae950>
    581c:	04c00b44 	movi	r19,45
    5820:	dcc12785 	stb	r19,1182(sp)
    5824:	003b0006 	br	4428 <__alt_data_end+0xfffaecf8>
    5828:	d8c12d17 	ldw	r3,1204(sp)
    582c:	d9012f17 	ldw	r4,1212(sp)
    5830:	18800017 	ldw	r2,0(r3)
    5834:	18c00104 	addi	r3,r3,4
    5838:	d8c12d15 	stw	r3,1204(sp)
    583c:	11000015 	stw	r4,0(r2)
    5840:	0038c506 	br	3b58 <__alt_data_end+0xfffae428>
    5844:	01400074 	movhi	r5,1
    5848:	294a8504 	addi	r5,r5,10772
    584c:	d9413115 	stw	r5,1220(sp)
    5850:	003f2406 	br	54e4 <__alt_data_end+0xfffafdb4>
    5854:	00800b44 	movi	r2,45
    5858:	d8812785 	stb	r2,1182(sp)
    585c:	df012b15 	stw	fp,1196(sp)
    5860:	d8013215 	stw	zero,1224(sp)
    5864:	df012d17 	ldw	fp,1204(sp)
    5868:	00800b44 	movi	r2,45
    586c:	dc812d15 	stw	r18,1204(sp)
    5870:	003a0006 	br	4074 <__alt_data_end+0xfffae944>
    5874:	d8c12617 	ldw	r3,1176(sp)
    5878:	00bfff44 	movi	r2,-3
    587c:	18800a16 	blt	r3,r2,58a8 <___vfprintf_internal_r+0x1e44>
    5880:	48c00916 	blt	r9,r3,58a8 <___vfprintf_internal_r+0x1e44>
    5884:	d8c13415 	stw	r3,1232(sp)
    5888:	040019c4 	movi	r16,103
    588c:	003e7606 	br	5268 <__alt_data_end+0xfffafb38>
    5890:	01000074 	movhi	r4,1
    5894:	210a9284 	addi	r4,r4,10826
    5898:	d9012c15 	stw	r4,1200(sp)
    589c:	003c8e06 	br	4ad8 <__alt_data_end+0xfffaf3a8>
    58a0:	5005883a 	mov	r2,r10
    58a4:	003e6506 	br	523c <__alt_data_end+0xfffafb0c>
    58a8:	843fff84 	addi	r16,r16,-2
    58ac:	1d7fffc4 	addi	r21,r3,-1
    58b0:	dd412615 	stw	r21,1176(sp)
    58b4:	dc0122c5 	stb	r16,1163(sp)
    58b8:	a8009216 	blt	r21,zero,5b04 <___vfprintf_internal_r+0x20a0>
    58bc:	00800ac4 	movi	r2,43
    58c0:	d8812305 	stb	r2,1164(sp)
    58c4:	00800244 	movi	r2,9
    58c8:	1540660e 	bge	r2,r21,5a64 <___vfprintf_internal_r+0x2000>
    58cc:	dcc122c4 	addi	r19,sp,1163
    58d0:	dc012c15 	stw	r16,1200(sp)
    58d4:	4023883a 	mov	r17,r8
    58d8:	9821883a 	mov	r16,r19
    58dc:	a809883a 	mov	r4,r21
    58e0:	01400284 	movi	r5,10
    58e4:	0002f8c0 	call	2f8c <__modsi3>
    58e8:	10800c04 	addi	r2,r2,48
    58ec:	843fffc4 	addi	r16,r16,-1
    58f0:	a809883a 	mov	r4,r21
    58f4:	01400284 	movi	r5,10
    58f8:	80800005 	stb	r2,0(r16)
    58fc:	0002f380 	call	2f38 <__divsi3>
    5900:	01000244 	movi	r4,9
    5904:	102b883a 	mov	r21,r2
    5908:	20bff416 	blt	r4,r2,58dc <__alt_data_end+0xfffb01ac>
    590c:	8811883a 	mov	r8,r17
    5910:	10800c04 	addi	r2,r2,48
    5914:	8023883a 	mov	r17,r16
    5918:	897fffc4 	addi	r5,r17,-1
    591c:	88bfffc5 	stb	r2,-1(r17)
    5920:	dc012c17 	ldw	r16,1200(sp)
    5924:	2cc08a2e 	bgeu	r5,r19,5b50 <___vfprintf_internal_r+0x20ec>
    5928:	d9812384 	addi	r6,sp,1166
    592c:	344dc83a 	sub	r6,r6,r17
    5930:	d9012344 	addi	r4,sp,1165
    5934:	998d883a 	add	r6,r19,r6
    5938:	00000106 	br	5940 <___vfprintf_internal_r+0x1edc>
    593c:	28800003 	ldbu	r2,0(r5)
    5940:	20800005 	stb	r2,0(r4)
    5944:	21000044 	addi	r4,r4,1
    5948:	29400044 	addi	r5,r5,1
    594c:	21bffb1e 	bne	r4,r6,593c <__alt_data_end+0xfffb020c>
    5950:	d8812304 	addi	r2,sp,1164
    5954:	1445c83a 	sub	r2,r2,r17
    5958:	d9412344 	addi	r5,sp,1165
    595c:	2885883a 	add	r2,r5,r2
    5960:	14e7c83a 	sub	r19,r2,r19
    5964:	d8813317 	ldw	r2,1228(sp)
    5968:	d8c13317 	ldw	r3,1228(sp)
    596c:	dcc13a15 	stw	r19,1256(sp)
    5970:	14e3883a 	add	r17,r2,r19
    5974:	00800044 	movi	r2,1
    5978:	10c0550e 	bge	r2,r3,5ad0 <___vfprintf_internal_r+0x206c>
    597c:	8c400044 	addi	r17,r17,1
    5980:	8839883a 	mov	fp,r17
    5984:	88005016 	blt	r17,zero,5ac8 <___vfprintf_internal_r+0x2064>
    5988:	d8013415 	stw	zero,1232(sp)
    598c:	003e3f06 	br	528c <__alt_data_end+0xfffafb5c>
    5990:	da412b15 	stw	r9,1196(sp)
    5994:	dcc12783 	ldbu	r19,1182(sp)
    5998:	4823883a 	mov	r17,r9
    599c:	dc812d15 	stw	r18,1204(sp)
    59a0:	d8013215 	stw	zero,1224(sp)
    59a4:	d8013415 	stw	zero,1232(sp)
    59a8:	0039ae06 	br	4064 <__alt_data_end+0xfffae934>
    59ac:	483de91e 	bne	r9,zero,5154 <__alt_data_end+0xfffafa24>
    59b0:	8813883a 	mov	r9,r17
    59b4:	003de706 	br	5154 <__alt_data_end+0xfffafa24>
    59b8:	b809883a 	mov	r4,r23
    59bc:	b00b883a 	mov	r5,r22
    59c0:	d9811e04 	addi	r6,sp,1144
    59c4:	000a6a80 	call	a6a8 <__sprint_r>
    59c8:	10393e1e 	bne	r2,zero,3ec4 <__alt_data_end+0xfffae794>
    59cc:	dc012617 	ldw	r16,1176(sp)
    59d0:	d8c12017 	ldw	r3,1152(sp)
    59d4:	d8811f17 	ldw	r2,1148(sp)
    59d8:	da000404 	addi	r8,sp,16
    59dc:	003ea006 	br	5460 <__alt_data_end+0xfffafd30>
    59e0:	00c00b44 	movi	r3,45
    59e4:	2460003c 	xorhi	r17,r4,32768
    59e8:	d8c12b05 	stb	r3,1196(sp)
    59ec:	003ddf06 	br	516c <__alt_data_end+0xfffafa3c>
    59f0:	02400184 	movi	r9,6
    59f4:	003dd706 	br	5154 <__alt_data_end+0xfffafa24>
    59f8:	4d400044 	addi	r21,r9,1
    59fc:	003de206 	br	5188 <__alt_data_end+0xfffafa58>
    5a00:	d8c13417 	ldw	r3,1232(sp)
    5a04:	00c0490e 	bge	zero,r3,5b2c <___vfprintf_internal_r+0x20c8>
    5a08:	04400044 	movi	r17,1
    5a0c:	d9013317 	ldw	r4,1228(sp)
    5a10:	8923883a 	add	r17,r17,r4
    5a14:	8839883a 	mov	fp,r17
    5a18:	883e1c0e 	bge	r17,zero,528c <__alt_data_end+0xfffafb5c>
    5a1c:	0039883a 	mov	fp,zero
    5a20:	003e1a06 	br	528c <__alt_data_end+0xfffafb5c>
    5a24:	00c03b0e 	bge	zero,r3,5b14 <___vfprintf_internal_r+0x20b0>
    5a28:	4800021e 	bne	r9,zero,5a34 <___vfprintf_internal_r+0x1fd0>
    5a2c:	e080004c 	andi	r2,fp,1
    5a30:	10000626 	beq	r2,zero,5a4c <___vfprintf_internal_r+0x1fe8>
    5a34:	d8c13417 	ldw	r3,1232(sp)
    5a38:	4a400044 	addi	r9,r9,1
    5a3c:	1a63883a 	add	r17,r3,r9
    5a40:	8839883a 	mov	fp,r17
    5a44:	883e110e 	bge	r17,zero,528c <__alt_data_end+0xfffafb5c>
    5a48:	003ff406 	br	5a1c <__alt_data_end+0xfffb02ec>
    5a4c:	1839883a 	mov	fp,r3
    5a50:	18004116 	blt	r3,zero,5b58 <___vfprintf_internal_r+0x20f4>
    5a54:	dc413417 	ldw	r17,1232(sp)
    5a58:	003e0c06 	br	528c <__alt_data_end+0xfffafb5c>
    5a5c:	d8812117 	ldw	r2,1156(sp)
    5a60:	003df606 	br	523c <__alt_data_end+0xfffafb0c>
    5a64:	00800c04 	movi	r2,48
    5a68:	a8c00c04 	addi	r3,r21,48
    5a6c:	d8812345 	stb	r2,1165(sp)
    5a70:	d8c12385 	stb	r3,1166(sp)
    5a74:	d88123c4 	addi	r2,sp,1167
    5a78:	dcc122c4 	addi	r19,sp,1163
    5a7c:	003fb806 	br	5960 <__alt_data_end+0xfffb0230>
    5a80:	d9013717 	ldw	r4,1244(sp)
    5a84:	880b883a 	mov	r5,r17
    5a88:	000d883a 	mov	r6,zero
    5a8c:	000f883a 	mov	r7,zero
    5a90:	da013f15 	stw	r8,1276(sp)
    5a94:	da413e15 	stw	r9,1272(sp)
    5a98:	da813d15 	stw	r10,1268(sp)
    5a9c:	000e4000 	call	e400 <__eqdf2>
    5aa0:	da013f17 	ldw	r8,1276(sp)
    5aa4:	da413e17 	ldw	r9,1272(sp)
    5aa8:	da813d17 	ldw	r10,1268(sp)
    5aac:	103f1726 	beq	r2,zero,570c <__alt_data_end+0xfffaffdc>
    5ab0:	00800044 	movi	r2,1
    5ab4:	1547c83a 	sub	r3,r2,r21
    5ab8:	d8c12615 	stw	r3,1176(sp)
    5abc:	003f1406 	br	5710 <__alt_data_end+0xfffaffe0>
    5ac0:	0005883a 	mov	r2,zero
    5ac4:	003f4c06 	br	57f8 <__alt_data_end+0xfffb00c8>
    5ac8:	0039883a 	mov	fp,zero
    5acc:	003fae06 	br	5988 <__alt_data_end+0xfffb0258>
    5ad0:	e084703a 	and	r2,fp,r2
    5ad4:	103faa26 	beq	r2,zero,5980 <__alt_data_end+0xfffb0250>
    5ad8:	003fa806 	br	597c <__alt_data_end+0xfffb024c>
    5adc:	d9412d17 	ldw	r5,1204(sp)
    5ae0:	2a400017 	ldw	r9,0(r5)
    5ae4:	28c00104 	addi	r3,r5,4
    5ae8:	d8c12d15 	stw	r3,1204(sp)
    5aec:	483ebc0e 	bge	r9,zero,55e0 <__alt_data_end+0xfffafeb0>
    5af0:	027fffc4 	movi	r9,-1
    5af4:	e4000047 	ldb	r16,1(fp)
    5af8:	00384206 	br	3c04 <__alt_data_end+0xfffae4d4>
    5afc:	043fffc4 	movi	r16,-1
    5b00:	0038ce06 	br	3e3c <__alt_data_end+0xfffae70c>
    5b04:	00800b44 	movi	r2,45
    5b08:	056bc83a 	sub	r21,zero,r21
    5b0c:	d8812305 	stb	r2,1164(sp)
    5b10:	003f6c06 	br	58c4 <__alt_data_end+0xfffb0194>
    5b14:	4800081e 	bne	r9,zero,5b38 <___vfprintf_internal_r+0x20d4>
    5b18:	e080004c 	andi	r2,fp,1
    5b1c:	1000061e 	bne	r2,zero,5b38 <___vfprintf_internal_r+0x20d4>
    5b20:	07000044 	movi	fp,1
    5b24:	e023883a 	mov	r17,fp
    5b28:	003dd806 	br	528c <__alt_data_end+0xfffafb5c>
    5b2c:	04400084 	movi	r17,2
    5b30:	88e3c83a 	sub	r17,r17,r3
    5b34:	003fb506 	br	5a0c <__alt_data_end+0xfffb02dc>
    5b38:	4c400084 	addi	r17,r9,2
    5b3c:	8839883a 	mov	fp,r17
    5b40:	883dd20e 	bge	r17,zero,528c <__alt_data_end+0xfffafb5c>
    5b44:	003fb506 	br	5a1c <__alt_data_end+0xfffb02ec>
    5b48:	d8c12617 	ldw	r3,1176(sp)
    5b4c:	003f5706 	br	58ac <__alt_data_end+0xfffb017c>
    5b50:	d8812344 	addi	r2,sp,1165
    5b54:	003f8206 	br	5960 <__alt_data_end+0xfffb0230>
    5b58:	0039883a 	mov	fp,zero
    5b5c:	003fbd06 	br	5a54 <__alt_data_end+0xfffb0324>

00005b60 <__vfprintf_internal>:
    5b60:	2007883a 	mov	r3,r4
    5b64:	01000074 	movhi	r4,1
    5b68:	21120904 	addi	r4,r4,18468
    5b6c:	21000017 	ldw	r4,0(r4)
    5b70:	2805883a 	mov	r2,r5
    5b74:	300f883a 	mov	r7,r6
    5b78:	180b883a 	mov	r5,r3
    5b7c:	100d883a 	mov	r6,r2
    5b80:	0003a641 	jmpi	3a64 <___vfprintf_internal_r>

00005b84 <__swsetup_r>:
    5b84:	00800074 	movhi	r2,1
    5b88:	defffd04 	addi	sp,sp,-12
    5b8c:	10920904 	addi	r2,r2,18468
    5b90:	dc400115 	stw	r17,4(sp)
    5b94:	2023883a 	mov	r17,r4
    5b98:	11000017 	ldw	r4,0(r2)
    5b9c:	dc000015 	stw	r16,0(sp)
    5ba0:	dfc00215 	stw	ra,8(sp)
    5ba4:	2821883a 	mov	r16,r5
    5ba8:	20000226 	beq	r4,zero,5bb4 <__swsetup_r+0x30>
    5bac:	20c00e17 	ldw	r3,56(r4)
    5bb0:	18002e26 	beq	r3,zero,5c6c <__swsetup_r+0xe8>
    5bb4:	8080030b 	ldhu	r2,12(r16)
    5bb8:	10c0020c 	andi	r3,r2,8
    5bbc:	100d883a 	mov	r6,r2
    5bc0:	18000f26 	beq	r3,zero,5c00 <__swsetup_r+0x7c>
    5bc4:	80c00417 	ldw	r3,16(r16)
    5bc8:	18001526 	beq	r3,zero,5c20 <__swsetup_r+0x9c>
    5bcc:	1100004c 	andi	r4,r2,1
    5bd0:	20001c1e 	bne	r4,zero,5c44 <__swsetup_r+0xc0>
    5bd4:	1080008c 	andi	r2,r2,2
    5bd8:	1000261e 	bne	r2,zero,5c74 <__swsetup_r+0xf0>
    5bdc:	80800517 	ldw	r2,20(r16)
    5be0:	80800215 	stw	r2,8(r16)
    5be4:	18001c26 	beq	r3,zero,5c58 <__swsetup_r+0xd4>
    5be8:	0005883a 	mov	r2,zero
    5bec:	dfc00217 	ldw	ra,8(sp)
    5bf0:	dc400117 	ldw	r17,4(sp)
    5bf4:	dc000017 	ldw	r16,0(sp)
    5bf8:	dec00304 	addi	sp,sp,12
    5bfc:	f800283a 	ret
    5c00:	3080040c 	andi	r2,r6,16
    5c04:	10001726 	beq	r2,zero,5c64 <__swsetup_r+0xe0>
    5c08:	3080010c 	andi	r2,r6,4
    5c0c:	10001b1e 	bne	r2,zero,5c7c <__swsetup_r+0xf8>
    5c10:	80c00417 	ldw	r3,16(r16)
    5c14:	30800214 	ori	r2,r6,8
    5c18:	8080030d 	sth	r2,12(r16)
    5c1c:	183feb1e 	bne	r3,zero,5bcc <__alt_data_end+0xfffb049c>
    5c20:	1140a00c 	andi	r5,r2,640
    5c24:	01008004 	movi	r4,512
    5c28:	293fe826 	beq	r5,r4,5bcc <__alt_data_end+0xfffb049c>
    5c2c:	8809883a 	mov	r4,r17
    5c30:	800b883a 	mov	r5,r16
    5c34:	00087180 	call	8718 <__smakebuf_r>
    5c38:	8080030b 	ldhu	r2,12(r16)
    5c3c:	80c00417 	ldw	r3,16(r16)
    5c40:	003fe206 	br	5bcc <__alt_data_end+0xfffb049c>
    5c44:	80800517 	ldw	r2,20(r16)
    5c48:	80000215 	stw	zero,8(r16)
    5c4c:	0085c83a 	sub	r2,zero,r2
    5c50:	80800615 	stw	r2,24(r16)
    5c54:	183fe41e 	bne	r3,zero,5be8 <__alt_data_end+0xfffb04b8>
    5c58:	8080030b 	ldhu	r2,12(r16)
    5c5c:	1080200c 	andi	r2,r2,128
    5c60:	103fe226 	beq	r2,zero,5bec <__alt_data_end+0xfffb04bc>
    5c64:	00bfffc4 	movi	r2,-1
    5c68:	003fe006 	br	5bec <__alt_data_end+0xfffb04bc>
    5c6c:	0007bc00 	call	7bc0 <__sinit>
    5c70:	003fd006 	br	5bb4 <__alt_data_end+0xfffb0484>
    5c74:	0005883a 	mov	r2,zero
    5c78:	003fd906 	br	5be0 <__alt_data_end+0xfffb04b0>
    5c7c:	81400c17 	ldw	r5,48(r16)
    5c80:	28000626 	beq	r5,zero,5c9c <__swsetup_r+0x118>
    5c84:	80801004 	addi	r2,r16,64
    5c88:	28800326 	beq	r5,r2,5c98 <__swsetup_r+0x114>
    5c8c:	8809883a 	mov	r4,r17
    5c90:	0007d340 	call	7d34 <_free_r>
    5c94:	8180030b 	ldhu	r6,12(r16)
    5c98:	80000c15 	stw	zero,48(r16)
    5c9c:	80c00417 	ldw	r3,16(r16)
    5ca0:	00bff6c4 	movi	r2,-37
    5ca4:	118c703a 	and	r6,r2,r6
    5ca8:	80000115 	stw	zero,4(r16)
    5cac:	80c00015 	stw	r3,0(r16)
    5cb0:	003fd806 	br	5c14 <__alt_data_end+0xfffb04e4>

00005cb4 <quorem>:
    5cb4:	defff204 	addi	sp,sp,-56
    5cb8:	ddc00b15 	stw	r23,44(sp)
    5cbc:	20800417 	ldw	r2,16(r4)
    5cc0:	2dc00417 	ldw	r23,16(r5)
    5cc4:	dfc00d15 	stw	ra,52(sp)
    5cc8:	df000c15 	stw	fp,48(sp)
    5ccc:	dd800a15 	stw	r22,40(sp)
    5cd0:	dd400915 	stw	r21,36(sp)
    5cd4:	dd000815 	stw	r20,32(sp)
    5cd8:	dcc00715 	stw	r19,28(sp)
    5cdc:	dc800615 	stw	r18,24(sp)
    5ce0:	dc400515 	stw	r17,20(sp)
    5ce4:	dc000415 	stw	r16,16(sp)
    5ce8:	15c07a16 	blt	r2,r23,5ed4 <quorem+0x220>
    5cec:	bdffffc4 	addi	r23,r23,-1
    5cf0:	bde9883a 	add	r20,r23,r23
    5cf4:	28c00504 	addi	r3,r5,20
    5cf8:	a529883a 	add	r20,r20,r20
    5cfc:	1d39883a 	add	fp,r3,r20
    5d00:	24c00504 	addi	r19,r4,20
    5d04:	d9400215 	stw	r5,8(sp)
    5d08:	9d29883a 	add	r20,r19,r20
    5d0c:	e1400017 	ldw	r5,0(fp)
    5d10:	d9000015 	stw	r4,0(sp)
    5d14:	a1000017 	ldw	r4,0(r20)
    5d18:	29400044 	addi	r5,r5,1
    5d1c:	d8c00115 	stw	r3,4(sp)
    5d20:	dd000315 	stw	r20,12(sp)
    5d24:	0002fe80 	call	2fe8 <__udivsi3>
    5d28:	1025883a 	mov	r18,r2
    5d2c:	10003026 	beq	r2,zero,5df0 <quorem+0x13c>
    5d30:	dc400117 	ldw	r17,4(sp)
    5d34:	9829883a 	mov	r20,r19
    5d38:	002d883a 	mov	r22,zero
    5d3c:	0021883a 	mov	r16,zero
    5d40:	8d400017 	ldw	r21,0(r17)
    5d44:	900b883a 	mov	r5,r18
    5d48:	8c400104 	addi	r17,r17,4
    5d4c:	a93fffcc 	andi	r4,r21,65535
    5d50:	000d1bc0 	call	d1bc <__mulsi3>
    5d54:	a808d43a 	srli	r4,r21,16
    5d58:	900b883a 	mov	r5,r18
    5d5c:	b0ad883a 	add	r22,r22,r2
    5d60:	000d1bc0 	call	d1bc <__mulsi3>
    5d64:	a1000017 	ldw	r4,0(r20)
    5d68:	b00cd43a 	srli	r6,r22,16
    5d6c:	b0ffffcc 	andi	r3,r22,65535
    5d70:	217fffcc 	andi	r5,r4,65535
    5d74:	2c21883a 	add	r16,r5,r16
    5d78:	80c7c83a 	sub	r3,r16,r3
    5d7c:	2008d43a 	srli	r4,r4,16
    5d80:	3085883a 	add	r2,r6,r2
    5d84:	1821d43a 	srai	r16,r3,16
    5d88:	117fffcc 	andi	r5,r2,65535
    5d8c:	2149c83a 	sub	r4,r4,r5
    5d90:	2421883a 	add	r16,r4,r16
    5d94:	8008943a 	slli	r4,r16,16
    5d98:	18ffffcc 	andi	r3,r3,65535
    5d9c:	102cd43a 	srli	r22,r2,16
    5da0:	20c8b03a 	or	r4,r4,r3
    5da4:	a1000015 	stw	r4,0(r20)
    5da8:	8021d43a 	srai	r16,r16,16
    5dac:	a5000104 	addi	r20,r20,4
    5db0:	e47fe32e 	bgeu	fp,r17,5d40 <__alt_data_end+0xfffb0610>
    5db4:	d8c00317 	ldw	r3,12(sp)
    5db8:	18800017 	ldw	r2,0(r3)
    5dbc:	10000c1e 	bne	r2,zero,5df0 <quorem+0x13c>
    5dc0:	18bfff04 	addi	r2,r3,-4
    5dc4:	9880082e 	bgeu	r19,r2,5de8 <quorem+0x134>
    5dc8:	18ffff17 	ldw	r3,-4(r3)
    5dcc:	18000326 	beq	r3,zero,5ddc <quorem+0x128>
    5dd0:	00000506 	br	5de8 <quorem+0x134>
    5dd4:	10c00017 	ldw	r3,0(r2)
    5dd8:	1800031e 	bne	r3,zero,5de8 <quorem+0x134>
    5ddc:	10bfff04 	addi	r2,r2,-4
    5de0:	bdffffc4 	addi	r23,r23,-1
    5de4:	98bffb36 	bltu	r19,r2,5dd4 <__alt_data_end+0xfffb06a4>
    5de8:	d8c00017 	ldw	r3,0(sp)
    5dec:	1dc00415 	stw	r23,16(r3)
    5df0:	d9000017 	ldw	r4,0(sp)
    5df4:	d9400217 	ldw	r5,8(sp)
    5df8:	00096ec0 	call	96ec <__mcmp>
    5dfc:	10002816 	blt	r2,zero,5ea0 <quorem+0x1ec>
    5e00:	dc400117 	ldw	r17,4(sp)
    5e04:	94800044 	addi	r18,r18,1
    5e08:	980d883a 	mov	r6,r19
    5e0c:	0007883a 	mov	r3,zero
    5e10:	31000017 	ldw	r4,0(r6)
    5e14:	89400017 	ldw	r5,0(r17)
    5e18:	31800104 	addi	r6,r6,4
    5e1c:	20bfffcc 	andi	r2,r4,65535
    5e20:	10c7883a 	add	r3,r2,r3
    5e24:	28bfffcc 	andi	r2,r5,65535
    5e28:	1885c83a 	sub	r2,r3,r2
    5e2c:	280ad43a 	srli	r5,r5,16
    5e30:	2008d43a 	srli	r4,r4,16
    5e34:	1007d43a 	srai	r3,r2,16
    5e38:	10bfffcc 	andi	r2,r2,65535
    5e3c:	2149c83a 	sub	r4,r4,r5
    5e40:	20c9883a 	add	r4,r4,r3
    5e44:	200a943a 	slli	r5,r4,16
    5e48:	8c400104 	addi	r17,r17,4
    5e4c:	2007d43a 	srai	r3,r4,16
    5e50:	2884b03a 	or	r2,r5,r2
    5e54:	30bfff15 	stw	r2,-4(r6)
    5e58:	e47fed2e 	bgeu	fp,r17,5e10 <__alt_data_end+0xfffb06e0>
    5e5c:	bdc5883a 	add	r2,r23,r23
    5e60:	1085883a 	add	r2,r2,r2
    5e64:	9887883a 	add	r3,r19,r2
    5e68:	18800017 	ldw	r2,0(r3)
    5e6c:	10000c1e 	bne	r2,zero,5ea0 <quorem+0x1ec>
    5e70:	18bfff04 	addi	r2,r3,-4
    5e74:	9880082e 	bgeu	r19,r2,5e98 <quorem+0x1e4>
    5e78:	18ffff17 	ldw	r3,-4(r3)
    5e7c:	18000326 	beq	r3,zero,5e8c <quorem+0x1d8>
    5e80:	00000506 	br	5e98 <quorem+0x1e4>
    5e84:	10c00017 	ldw	r3,0(r2)
    5e88:	1800031e 	bne	r3,zero,5e98 <quorem+0x1e4>
    5e8c:	10bfff04 	addi	r2,r2,-4
    5e90:	bdffffc4 	addi	r23,r23,-1
    5e94:	98bffb36 	bltu	r19,r2,5e84 <__alt_data_end+0xfffb0754>
    5e98:	d8c00017 	ldw	r3,0(sp)
    5e9c:	1dc00415 	stw	r23,16(r3)
    5ea0:	9005883a 	mov	r2,r18
    5ea4:	dfc00d17 	ldw	ra,52(sp)
    5ea8:	df000c17 	ldw	fp,48(sp)
    5eac:	ddc00b17 	ldw	r23,44(sp)
    5eb0:	dd800a17 	ldw	r22,40(sp)
    5eb4:	dd400917 	ldw	r21,36(sp)
    5eb8:	dd000817 	ldw	r20,32(sp)
    5ebc:	dcc00717 	ldw	r19,28(sp)
    5ec0:	dc800617 	ldw	r18,24(sp)
    5ec4:	dc400517 	ldw	r17,20(sp)
    5ec8:	dc000417 	ldw	r16,16(sp)
    5ecc:	dec00e04 	addi	sp,sp,56
    5ed0:	f800283a 	ret
    5ed4:	0005883a 	mov	r2,zero
    5ed8:	003ff206 	br	5ea4 <__alt_data_end+0xfffb0774>

00005edc <_dtoa_r>:
    5edc:	20801017 	ldw	r2,64(r4)
    5ee0:	deffde04 	addi	sp,sp,-136
    5ee4:	dd401d15 	stw	r21,116(sp)
    5ee8:	dcc01b15 	stw	r19,108(sp)
    5eec:	dc801a15 	stw	r18,104(sp)
    5ef0:	dc401915 	stw	r17,100(sp)
    5ef4:	dc001815 	stw	r16,96(sp)
    5ef8:	dfc02115 	stw	ra,132(sp)
    5efc:	df002015 	stw	fp,128(sp)
    5f00:	ddc01f15 	stw	r23,124(sp)
    5f04:	dd801e15 	stw	r22,120(sp)
    5f08:	dd001c15 	stw	r20,112(sp)
    5f0c:	d9c00315 	stw	r7,12(sp)
    5f10:	2021883a 	mov	r16,r4
    5f14:	302b883a 	mov	r21,r6
    5f18:	2825883a 	mov	r18,r5
    5f1c:	dc402417 	ldw	r17,144(sp)
    5f20:	3027883a 	mov	r19,r6
    5f24:	10000826 	beq	r2,zero,5f48 <_dtoa_r+0x6c>
    5f28:	21801117 	ldw	r6,68(r4)
    5f2c:	00c00044 	movi	r3,1
    5f30:	100b883a 	mov	r5,r2
    5f34:	1986983a 	sll	r3,r3,r6
    5f38:	11800115 	stw	r6,4(r2)
    5f3c:	10c00215 	stw	r3,8(r2)
    5f40:	0008e180 	call	8e18 <_Bfree>
    5f44:	80001015 	stw	zero,64(r16)
    5f48:	a8002d16 	blt	r21,zero,6000 <_dtoa_r+0x124>
    5f4c:	88000015 	stw	zero,0(r17)
    5f50:	a8dffc2c 	andhi	r3,r21,32752
    5f54:	009ffc34 	movhi	r2,32752
    5f58:	18801b26 	beq	r3,r2,5fc8 <_dtoa_r+0xec>
    5f5c:	9009883a 	mov	r4,r18
    5f60:	980b883a 	mov	r5,r19
    5f64:	000d883a 	mov	r6,zero
    5f68:	000f883a 	mov	r7,zero
    5f6c:	000e4000 	call	e400 <__eqdf2>
    5f70:	10002a1e 	bne	r2,zero,601c <_dtoa_r+0x140>
    5f74:	d8c02317 	ldw	r3,140(sp)
    5f78:	d9002517 	ldw	r4,148(sp)
    5f7c:	00800044 	movi	r2,1
    5f80:	18800015 	stw	r2,0(r3)
    5f84:	2001a226 	beq	r4,zero,6610 <_dtoa_r+0x734>
    5f88:	00800074 	movhi	r2,1
    5f8c:	108a9244 	addi	r2,r2,10825
    5f90:	20800015 	stw	r2,0(r4)
    5f94:	10bfffc4 	addi	r2,r2,-1
    5f98:	dfc02117 	ldw	ra,132(sp)
    5f9c:	df002017 	ldw	fp,128(sp)
    5fa0:	ddc01f17 	ldw	r23,124(sp)
    5fa4:	dd801e17 	ldw	r22,120(sp)
    5fa8:	dd401d17 	ldw	r21,116(sp)
    5fac:	dd001c17 	ldw	r20,112(sp)
    5fb0:	dcc01b17 	ldw	r19,108(sp)
    5fb4:	dc801a17 	ldw	r18,104(sp)
    5fb8:	dc401917 	ldw	r17,100(sp)
    5fbc:	dc001817 	ldw	r16,96(sp)
    5fc0:	dec02204 	addi	sp,sp,136
    5fc4:	f800283a 	ret
    5fc8:	d8c02317 	ldw	r3,140(sp)
    5fcc:	0089c3c4 	movi	r2,9999
    5fd0:	18800015 	stw	r2,0(r3)
    5fd4:	90017c26 	beq	r18,zero,65c8 <_dtoa_r+0x6ec>
    5fd8:	00800074 	movhi	r2,1
    5fdc:	108a9e04 	addi	r2,r2,10872
    5fe0:	d9002517 	ldw	r4,148(sp)
    5fe4:	203fec26 	beq	r4,zero,5f98 <__alt_data_end+0xfffb0868>
    5fe8:	10c000c7 	ldb	r3,3(r2)
    5fec:	18017d1e 	bne	r3,zero,65e4 <_dtoa_r+0x708>
    5ff0:	10c000c4 	addi	r3,r2,3
    5ff4:	d9802517 	ldw	r6,148(sp)
    5ff8:	30c00015 	stw	r3,0(r6)
    5ffc:	003fe606 	br	5f98 <__alt_data_end+0xfffb0868>
    6000:	04e00034 	movhi	r19,32768
    6004:	9cffffc4 	addi	r19,r19,-1
    6008:	00800044 	movi	r2,1
    600c:	ace6703a 	and	r19,r21,r19
    6010:	88800015 	stw	r2,0(r17)
    6014:	982b883a 	mov	r21,r19
    6018:	003fcd06 	br	5f50 <__alt_data_end+0xfffb0820>
    601c:	d8800204 	addi	r2,sp,8
    6020:	a822d53a 	srli	r17,r21,20
    6024:	d8800015 	stw	r2,0(sp)
    6028:	8009883a 	mov	r4,r16
    602c:	900b883a 	mov	r5,r18
    6030:	980d883a 	mov	r6,r19
    6034:	d9c00104 	addi	r7,sp,4
    6038:	0009a600 	call	9a60 <__d2b>
    603c:	1039883a 	mov	fp,r2
    6040:	88016a1e 	bne	r17,zero,65ec <_dtoa_r+0x710>
    6044:	dd000217 	ldw	r20,8(sp)
    6048:	dc400117 	ldw	r17,4(sp)
    604c:	00befbc4 	movi	r2,-1041
    6050:	a463883a 	add	r17,r20,r17
    6054:	8882ea16 	blt	r17,r2,6c00 <_dtoa_r+0xd24>
    6058:	00bf0384 	movi	r2,-1010
    605c:	1445c83a 	sub	r2,r2,r17
    6060:	89010484 	addi	r4,r17,1042
    6064:	a8aa983a 	sll	r21,r21,r2
    6068:	9108d83a 	srl	r4,r18,r4
    606c:	a908b03a 	or	r4,r21,r4
    6070:	000f8d80 	call	f8d8 <__floatunsidf>
    6074:	017f8434 	movhi	r5,65040
    6078:	01800044 	movi	r6,1
    607c:	1009883a 	mov	r4,r2
    6080:	194b883a 	add	r5,r3,r5
    6084:	8c7fffc4 	addi	r17,r17,-1
    6088:	d9800f15 	stw	r6,60(sp)
    608c:	000d883a 	mov	r6,zero
    6090:	01cffe34 	movhi	r7,16376
    6094:	000eeb00 	call	eeb0 <__subdf3>
    6098:	0198dbf4 	movhi	r6,25455
    609c:	01cff4f4 	movhi	r7,16339
    60a0:	1009883a 	mov	r4,r2
    60a4:	180b883a 	mov	r5,r3
    60a8:	3190d844 	addi	r6,r6,17249
    60ac:	39e1e9c4 	addi	r7,r7,-30809
    60b0:	000e6440 	call	e644 <__muldf3>
    60b4:	01a2d874 	movhi	r6,35681
    60b8:	01cff1f4 	movhi	r7,16327
    60bc:	180b883a 	mov	r5,r3
    60c0:	31b22cc4 	addi	r6,r6,-14157
    60c4:	39e28a04 	addi	r7,r7,-30168
    60c8:	1009883a 	mov	r4,r2
    60cc:	000d1e40 	call	d1e4 <__adddf3>
    60d0:	8809883a 	mov	r4,r17
    60d4:	102d883a 	mov	r22,r2
    60d8:	182b883a 	mov	r21,r3
    60dc:	000f8080 	call	f808 <__floatsidf>
    60e0:	019427f4 	movhi	r6,20639
    60e4:	01cff4f4 	movhi	r7,16339
    60e8:	1009883a 	mov	r4,r2
    60ec:	180b883a 	mov	r5,r3
    60f0:	319e7ec4 	addi	r6,r6,31227
    60f4:	39d104c4 	addi	r7,r7,17427
    60f8:	000e6440 	call	e644 <__muldf3>
    60fc:	b009883a 	mov	r4,r22
    6100:	a80b883a 	mov	r5,r21
    6104:	100d883a 	mov	r6,r2
    6108:	180f883a 	mov	r7,r3
    610c:	000d1e40 	call	d1e4 <__adddf3>
    6110:	1009883a 	mov	r4,r2
    6114:	180b883a 	mov	r5,r3
    6118:	102d883a 	mov	r22,r2
    611c:	182b883a 	mov	r21,r3
    6120:	000f7800 	call	f780 <__fixdfsi>
    6124:	b009883a 	mov	r4,r22
    6128:	a80b883a 	mov	r5,r21
    612c:	000d883a 	mov	r6,zero
    6130:	000f883a 	mov	r7,zero
    6134:	d8800515 	stw	r2,20(sp)
    6138:	000e5640 	call	e564 <__ledf2>
    613c:	10023116 	blt	r2,zero,6a04 <_dtoa_r+0xb28>
    6140:	d8c00517 	ldw	r3,20(sp)
    6144:	00800584 	movi	r2,22
    6148:	10c21f36 	bltu	r2,r3,69c8 <_dtoa_r+0xaec>
    614c:	180490fa 	slli	r2,r3,3
    6150:	00c00074 	movhi	r3,1
    6154:	18caba04 	addi	r3,r3,10984
    6158:	1885883a 	add	r2,r3,r2
    615c:	11000017 	ldw	r4,0(r2)
    6160:	11400117 	ldw	r5,4(r2)
    6164:	900d883a 	mov	r6,r18
    6168:	980f883a 	mov	r7,r19
    616c:	000e4840 	call	e484 <__gedf2>
    6170:	0082a70e 	bge	zero,r2,6c10 <_dtoa_r+0xd34>
    6174:	d9000517 	ldw	r4,20(sp)
    6178:	d8000c15 	stw	zero,48(sp)
    617c:	213fffc4 	addi	r4,r4,-1
    6180:	d9000515 	stw	r4,20(sp)
    6184:	a463c83a 	sub	r17,r20,r17
    6188:	8dbfffc4 	addi	r22,r17,-1
    618c:	b0021916 	blt	r22,zero,69f4 <_dtoa_r+0xb18>
    6190:	d8000815 	stw	zero,32(sp)
    6194:	d8800517 	ldw	r2,20(sp)
    6198:	10020e16 	blt	r2,zero,69d4 <_dtoa_r+0xaf8>
    619c:	b0ad883a 	add	r22,r22,r2
    61a0:	d8800a15 	stw	r2,40(sp)
    61a4:	d8000915 	stw	zero,36(sp)
    61a8:	d8c00317 	ldw	r3,12(sp)
    61ac:	00800244 	movi	r2,9
    61b0:	10c11a36 	bltu	r2,r3,661c <_dtoa_r+0x740>
    61b4:	00800144 	movi	r2,5
    61b8:	10c4fc0e 	bge	r2,r3,75ac <_dtoa_r+0x16d0>
    61bc:	18ffff04 	addi	r3,r3,-4
    61c0:	d8c00315 	stw	r3,12(sp)
    61c4:	0029883a 	mov	r20,zero
    61c8:	d9800317 	ldw	r6,12(sp)
    61cc:	008000c4 	movi	r2,3
    61d0:	3083bd26 	beq	r6,r2,70c8 <_dtoa_r+0x11ec>
    61d4:	1183670e 	bge	r2,r6,6f74 <_dtoa_r+0x1098>
    61d8:	d8c00317 	ldw	r3,12(sp)
    61dc:	00800104 	movi	r2,4
    61e0:	1882e726 	beq	r3,r2,6d80 <_dtoa_r+0xea4>
    61e4:	00800144 	movi	r2,5
    61e8:	1884f21e 	bne	r3,r2,75b4 <_dtoa_r+0x16d8>
    61ec:	00800044 	movi	r2,1
    61f0:	d8800b15 	stw	r2,44(sp)
    61f4:	d8c02217 	ldw	r3,136(sp)
    61f8:	d9000517 	ldw	r4,20(sp)
    61fc:	1907883a 	add	r3,r3,r4
    6200:	19800044 	addi	r6,r3,1
    6204:	d8c00d15 	stw	r3,52(sp)
    6208:	d9800615 	stw	r6,24(sp)
    620c:	0183c30e 	bge	zero,r6,711c <_dtoa_r+0x1240>
    6210:	d9800617 	ldw	r6,24(sp)
    6214:	3023883a 	mov	r17,r6
    6218:	80001115 	stw	zero,68(r16)
    621c:	008005c4 	movi	r2,23
    6220:	1184f62e 	bgeu	r2,r6,75fc <_dtoa_r+0x1720>
    6224:	00c00044 	movi	r3,1
    6228:	00800104 	movi	r2,4
    622c:	1085883a 	add	r2,r2,r2
    6230:	11000504 	addi	r4,r2,20
    6234:	180b883a 	mov	r5,r3
    6238:	18c00044 	addi	r3,r3,1
    623c:	313ffb2e 	bgeu	r6,r4,622c <__alt_data_end+0xfffb0afc>
    6240:	81401115 	stw	r5,68(r16)
    6244:	8009883a 	mov	r4,r16
    6248:	0008d700 	call	8d70 <_Balloc>
    624c:	d8800715 	stw	r2,28(sp)
    6250:	80801015 	stw	r2,64(r16)
    6254:	00800384 	movi	r2,14
    6258:	1440fd36 	bltu	r2,r17,6650 <_dtoa_r+0x774>
    625c:	a000fc26 	beq	r20,zero,6650 <_dtoa_r+0x774>
    6260:	d8800517 	ldw	r2,20(sp)
    6264:	0083b90e 	bge	zero,r2,714c <_dtoa_r+0x1270>
    6268:	d8c00517 	ldw	r3,20(sp)
    626c:	108003cc 	andi	r2,r2,15
    6270:	100490fa 	slli	r2,r2,3
    6274:	182fd13a 	srai	r23,r3,4
    6278:	00c00074 	movhi	r3,1
    627c:	18caba04 	addi	r3,r3,10984
    6280:	1885883a 	add	r2,r3,r2
    6284:	b8c0040c 	andi	r3,r23,16
    6288:	12c00017 	ldw	r11,0(r2)
    628c:	12800117 	ldw	r10,4(r2)
    6290:	18039726 	beq	r3,zero,70f0 <_dtoa_r+0x1214>
    6294:	00800074 	movhi	r2,1
    6298:	108ab004 	addi	r2,r2,10944
    629c:	11800817 	ldw	r6,32(r2)
    62a0:	11c00917 	ldw	r7,36(r2)
    62a4:	9009883a 	mov	r4,r18
    62a8:	980b883a 	mov	r5,r19
    62ac:	da801615 	stw	r10,88(sp)
    62b0:	dac01515 	stw	r11,84(sp)
    62b4:	000da800 	call	da80 <__divdf3>
    62b8:	da801617 	ldw	r10,88(sp)
    62bc:	dac01517 	ldw	r11,84(sp)
    62c0:	bdc003cc 	andi	r23,r23,15
    62c4:	044000c4 	movi	r17,3
    62c8:	d8800e15 	stw	r2,56(sp)
    62cc:	182b883a 	mov	r21,r3
    62d0:	b8001126 	beq	r23,zero,6318 <_dtoa_r+0x43c>
    62d4:	05000074 	movhi	r20,1
    62d8:	a50ab004 	addi	r20,r20,10944
    62dc:	5805883a 	mov	r2,r11
    62e0:	5007883a 	mov	r3,r10
    62e4:	b980004c 	andi	r6,r23,1
    62e8:	1009883a 	mov	r4,r2
    62ec:	b82fd07a 	srai	r23,r23,1
    62f0:	180b883a 	mov	r5,r3
    62f4:	30000426 	beq	r6,zero,6308 <_dtoa_r+0x42c>
    62f8:	a1800017 	ldw	r6,0(r20)
    62fc:	a1c00117 	ldw	r7,4(r20)
    6300:	8c400044 	addi	r17,r17,1
    6304:	000e6440 	call	e644 <__muldf3>
    6308:	a5000204 	addi	r20,r20,8
    630c:	b83ff51e 	bne	r23,zero,62e4 <__alt_data_end+0xfffb0bb4>
    6310:	1017883a 	mov	r11,r2
    6314:	1815883a 	mov	r10,r3
    6318:	d9000e17 	ldw	r4,56(sp)
    631c:	a80b883a 	mov	r5,r21
    6320:	580d883a 	mov	r6,r11
    6324:	500f883a 	mov	r7,r10
    6328:	000da800 	call	da80 <__divdf3>
    632c:	1029883a 	mov	r20,r2
    6330:	182b883a 	mov	r21,r3
    6334:	d9800c17 	ldw	r6,48(sp)
    6338:	30000626 	beq	r6,zero,6354 <_dtoa_r+0x478>
    633c:	a009883a 	mov	r4,r20
    6340:	a80b883a 	mov	r5,r21
    6344:	000d883a 	mov	r6,zero
    6348:	01cffc34 	movhi	r7,16368
    634c:	000e5640 	call	e564 <__ledf2>
    6350:	10043216 	blt	r2,zero,741c <_dtoa_r+0x1540>
    6354:	8809883a 	mov	r4,r17
    6358:	000f8080 	call	f808 <__floatsidf>
    635c:	1009883a 	mov	r4,r2
    6360:	180b883a 	mov	r5,r3
    6364:	a00d883a 	mov	r6,r20
    6368:	a80f883a 	mov	r7,r21
    636c:	000e6440 	call	e644 <__muldf3>
    6370:	000d883a 	mov	r6,zero
    6374:	1009883a 	mov	r4,r2
    6378:	180b883a 	mov	r5,r3
    637c:	01d00734 	movhi	r7,16412
    6380:	000d1e40 	call	d1e4 <__adddf3>
    6384:	1023883a 	mov	r17,r2
    6388:	d9800617 	ldw	r6,24(sp)
    638c:	00bf3034 	movhi	r2,64704
    6390:	1885883a 	add	r2,r3,r2
    6394:	d8800e15 	stw	r2,56(sp)
    6398:	30032e26 	beq	r6,zero,7054 <_dtoa_r+0x1178>
    639c:	d8c00517 	ldw	r3,20(sp)
    63a0:	da800617 	ldw	r10,24(sp)
    63a4:	d8c01215 	stw	r3,72(sp)
    63a8:	d9000b17 	ldw	r4,44(sp)
    63ac:	2003b026 	beq	r4,zero,7270 <_dtoa_r+0x1394>
    63b0:	50bfffc4 	addi	r2,r10,-1
    63b4:	100490fa 	slli	r2,r2,3
    63b8:	00c00074 	movhi	r3,1
    63bc:	18caba04 	addi	r3,r3,10984
    63c0:	1885883a 	add	r2,r3,r2
    63c4:	11800017 	ldw	r6,0(r2)
    63c8:	11c00117 	ldw	r7,4(r2)
    63cc:	d8800717 	ldw	r2,28(sp)
    63d0:	0009883a 	mov	r4,zero
    63d4:	014ff834 	movhi	r5,16352
    63d8:	da801615 	stw	r10,88(sp)
    63dc:	15c00044 	addi	r23,r2,1
    63e0:	000da800 	call	da80 <__divdf3>
    63e4:	d9c00e17 	ldw	r7,56(sp)
    63e8:	880d883a 	mov	r6,r17
    63ec:	1009883a 	mov	r4,r2
    63f0:	180b883a 	mov	r5,r3
    63f4:	000eeb00 	call	eeb0 <__subdf3>
    63f8:	a80b883a 	mov	r5,r21
    63fc:	a009883a 	mov	r4,r20
    6400:	d8c01015 	stw	r3,64(sp)
    6404:	d8800e15 	stw	r2,56(sp)
    6408:	000f7800 	call	f780 <__fixdfsi>
    640c:	1009883a 	mov	r4,r2
    6410:	d8801715 	stw	r2,92(sp)
    6414:	000f8080 	call	f808 <__floatsidf>
    6418:	a009883a 	mov	r4,r20
    641c:	a80b883a 	mov	r5,r21
    6420:	100d883a 	mov	r6,r2
    6424:	180f883a 	mov	r7,r3
    6428:	000eeb00 	call	eeb0 <__subdf3>
    642c:	da001717 	ldw	r8,92(sp)
    6430:	1829883a 	mov	r20,r3
    6434:	d8c00717 	ldw	r3,28(sp)
    6438:	d9000e17 	ldw	r4,56(sp)
    643c:	d9401017 	ldw	r5,64(sp)
    6440:	42000c04 	addi	r8,r8,48
    6444:	1023883a 	mov	r17,r2
    6448:	1a000005 	stb	r8,0(r3)
    644c:	880d883a 	mov	r6,r17
    6450:	a00f883a 	mov	r7,r20
    6454:	402b883a 	mov	r21,r8
    6458:	000e4840 	call	e484 <__gedf2>
    645c:	00844516 	blt	zero,r2,7574 <_dtoa_r+0x1698>
    6460:	0009883a 	mov	r4,zero
    6464:	014ffc34 	movhi	r5,16368
    6468:	880d883a 	mov	r6,r17
    646c:	a00f883a 	mov	r7,r20
    6470:	000eeb00 	call	eeb0 <__subdf3>
    6474:	d9000e17 	ldw	r4,56(sp)
    6478:	d9401017 	ldw	r5,64(sp)
    647c:	100d883a 	mov	r6,r2
    6480:	180f883a 	mov	r7,r3
    6484:	000e4840 	call	e484 <__gedf2>
    6488:	da801617 	ldw	r10,88(sp)
    648c:	00843616 	blt	zero,r2,7568 <_dtoa_r+0x168c>
    6490:	00800044 	movi	r2,1
    6494:	12806e0e 	bge	r2,r10,6650 <_dtoa_r+0x774>
    6498:	d9000717 	ldw	r4,28(sp)
    649c:	dd801315 	stw	r22,76(sp)
    64a0:	dc001115 	stw	r16,68(sp)
    64a4:	2295883a 	add	r10,r4,r10
    64a8:	dcc01415 	stw	r19,80(sp)
    64ac:	502d883a 	mov	r22,r10
    64b0:	dcc01017 	ldw	r19,64(sp)
    64b4:	b821883a 	mov	r16,r23
    64b8:	dc801015 	stw	r18,64(sp)
    64bc:	dc800e17 	ldw	r18,56(sp)
    64c0:	00000906 	br	64e8 <_dtoa_r+0x60c>
    64c4:	000eeb00 	call	eeb0 <__subdf3>
    64c8:	1009883a 	mov	r4,r2
    64cc:	180b883a 	mov	r5,r3
    64d0:	900d883a 	mov	r6,r18
    64d4:	980f883a 	mov	r7,r19
    64d8:	000e5640 	call	e564 <__ledf2>
    64dc:	10040e16 	blt	r2,zero,7518 <_dtoa_r+0x163c>
    64e0:	b821883a 	mov	r16,r23
    64e4:	bd841026 	beq	r23,r22,7528 <_dtoa_r+0x164c>
    64e8:	9009883a 	mov	r4,r18
    64ec:	980b883a 	mov	r5,r19
    64f0:	000d883a 	mov	r6,zero
    64f4:	01d00934 	movhi	r7,16420
    64f8:	000e6440 	call	e644 <__muldf3>
    64fc:	000d883a 	mov	r6,zero
    6500:	01d00934 	movhi	r7,16420
    6504:	8809883a 	mov	r4,r17
    6508:	a00b883a 	mov	r5,r20
    650c:	1025883a 	mov	r18,r2
    6510:	1827883a 	mov	r19,r3
    6514:	000e6440 	call	e644 <__muldf3>
    6518:	180b883a 	mov	r5,r3
    651c:	1009883a 	mov	r4,r2
    6520:	1823883a 	mov	r17,r3
    6524:	1029883a 	mov	r20,r2
    6528:	000f7800 	call	f780 <__fixdfsi>
    652c:	1009883a 	mov	r4,r2
    6530:	102b883a 	mov	r21,r2
    6534:	000f8080 	call	f808 <__floatsidf>
    6538:	a009883a 	mov	r4,r20
    653c:	880b883a 	mov	r5,r17
    6540:	100d883a 	mov	r6,r2
    6544:	180f883a 	mov	r7,r3
    6548:	000eeb00 	call	eeb0 <__subdf3>
    654c:	ad400c04 	addi	r21,r21,48
    6550:	1009883a 	mov	r4,r2
    6554:	180b883a 	mov	r5,r3
    6558:	900d883a 	mov	r6,r18
    655c:	980f883a 	mov	r7,r19
    6560:	85400005 	stb	r21,0(r16)
    6564:	1023883a 	mov	r17,r2
    6568:	1829883a 	mov	r20,r3
    656c:	000e5640 	call	e564 <__ledf2>
    6570:	bdc00044 	addi	r23,r23,1
    6574:	0009883a 	mov	r4,zero
    6578:	014ffc34 	movhi	r5,16368
    657c:	880d883a 	mov	r6,r17
    6580:	a00f883a 	mov	r7,r20
    6584:	103fcf0e 	bge	r2,zero,64c4 <__alt_data_end+0xfffb0d94>
    6588:	d9801217 	ldw	r6,72(sp)
    658c:	dc001117 	ldw	r16,68(sp)
    6590:	d9800515 	stw	r6,20(sp)
    6594:	8009883a 	mov	r4,r16
    6598:	e00b883a 	mov	r5,fp
    659c:	0008e180 	call	8e18 <_Bfree>
    65a0:	d8c00517 	ldw	r3,20(sp)
    65a4:	d9002317 	ldw	r4,140(sp)
    65a8:	d9802517 	ldw	r6,148(sp)
    65ac:	b8000005 	stb	zero,0(r23)
    65b0:	18800044 	addi	r2,r3,1
    65b4:	20800015 	stw	r2,0(r4)
    65b8:	30027226 	beq	r6,zero,6f84 <_dtoa_r+0x10a8>
    65bc:	35c00015 	stw	r23,0(r6)
    65c0:	d8800717 	ldw	r2,28(sp)
    65c4:	003e7406 	br	5f98 <__alt_data_end+0xfffb0868>
    65c8:	00800434 	movhi	r2,16
    65cc:	10bfffc4 	addi	r2,r2,-1
    65d0:	a8aa703a 	and	r21,r21,r2
    65d4:	a83e801e 	bne	r21,zero,5fd8 <__alt_data_end+0xfffb08a8>
    65d8:	00800074 	movhi	r2,1
    65dc:	108a9b04 	addi	r2,r2,10860
    65e0:	003e7f06 	br	5fe0 <__alt_data_end+0xfffb08b0>
    65e4:	10c00204 	addi	r3,r2,8
    65e8:	003e8206 	br	5ff4 <__alt_data_end+0xfffb08c4>
    65ec:	01400434 	movhi	r5,16
    65f0:	297fffc4 	addi	r5,r5,-1
    65f4:	994a703a 	and	r5,r19,r5
    65f8:	9009883a 	mov	r4,r18
    65fc:	8c7f0044 	addi	r17,r17,-1023
    6600:	294ffc34 	orhi	r5,r5,16368
    6604:	dd000217 	ldw	r20,8(sp)
    6608:	d8000f15 	stw	zero,60(sp)
    660c:	003e9f06 	br	608c <__alt_data_end+0xfffb095c>
    6610:	00800074 	movhi	r2,1
    6614:	108a9204 	addi	r2,r2,10824
    6618:	003e5f06 	br	5f98 <__alt_data_end+0xfffb0868>
    661c:	80001115 	stw	zero,68(r16)
    6620:	8009883a 	mov	r4,r16
    6624:	000b883a 	mov	r5,zero
    6628:	0008d700 	call	8d70 <_Balloc>
    662c:	01bfffc4 	movi	r6,-1
    6630:	d8800715 	stw	r2,28(sp)
    6634:	80801015 	stw	r2,64(r16)
    6638:	00800044 	movi	r2,1
    663c:	d9800615 	stw	r6,24(sp)
    6640:	d8800b15 	stw	r2,44(sp)
    6644:	d8002215 	stw	zero,136(sp)
    6648:	d9800d15 	stw	r6,52(sp)
    664c:	d8000315 	stw	zero,12(sp)
    6650:	d8800117 	ldw	r2,4(sp)
    6654:	10008e16 	blt	r2,zero,6890 <_dtoa_r+0x9b4>
    6658:	d9000517 	ldw	r4,20(sp)
    665c:	00c00384 	movi	r3,14
    6660:	19008b16 	blt	r3,r4,6890 <_dtoa_r+0x9b4>
    6664:	200490fa 	slli	r2,r4,3
    6668:	00c00074 	movhi	r3,1
    666c:	d9802217 	ldw	r6,136(sp)
    6670:	18caba04 	addi	r3,r3,10984
    6674:	1885883a 	add	r2,r3,r2
    6678:	14400017 	ldw	r17,0(r2)
    667c:	15000117 	ldw	r20,4(r2)
    6680:	3001c716 	blt	r6,zero,6da0 <_dtoa_r+0xec4>
    6684:	880d883a 	mov	r6,r17
    6688:	a00f883a 	mov	r7,r20
    668c:	9009883a 	mov	r4,r18
    6690:	980b883a 	mov	r5,r19
    6694:	000da800 	call	da80 <__divdf3>
    6698:	180b883a 	mov	r5,r3
    669c:	1009883a 	mov	r4,r2
    66a0:	000f7800 	call	f780 <__fixdfsi>
    66a4:	1009883a 	mov	r4,r2
    66a8:	102d883a 	mov	r22,r2
    66ac:	000f8080 	call	f808 <__floatsidf>
    66b0:	1009883a 	mov	r4,r2
    66b4:	180b883a 	mov	r5,r3
    66b8:	880d883a 	mov	r6,r17
    66bc:	a00f883a 	mov	r7,r20
    66c0:	000e6440 	call	e644 <__muldf3>
    66c4:	9009883a 	mov	r4,r18
    66c8:	980b883a 	mov	r5,r19
    66cc:	100d883a 	mov	r6,r2
    66d0:	180f883a 	mov	r7,r3
    66d4:	000eeb00 	call	eeb0 <__subdf3>
    66d8:	d9000717 	ldw	r4,28(sp)
    66dc:	d9800617 	ldw	r6,24(sp)
    66e0:	180b883a 	mov	r5,r3
    66e4:	b0c00c04 	addi	r3,r22,48
    66e8:	20c00005 	stb	r3,0(r4)
    66ec:	25c00044 	addi	r23,r4,1
    66f0:	01000044 	movi	r4,1
    66f4:	1011883a 	mov	r8,r2
    66f8:	2807883a 	mov	r3,r5
    66fc:	31003d26 	beq	r6,r4,67f4 <_dtoa_r+0x918>
    6700:	000d883a 	mov	r6,zero
    6704:	01d00934 	movhi	r7,16420
    6708:	1009883a 	mov	r4,r2
    670c:	000e6440 	call	e644 <__muldf3>
    6710:	1009883a 	mov	r4,r2
    6714:	180b883a 	mov	r5,r3
    6718:	000d883a 	mov	r6,zero
    671c:	000f883a 	mov	r7,zero
    6720:	1027883a 	mov	r19,r2
    6724:	182b883a 	mov	r21,r3
    6728:	000e4000 	call	e400 <__eqdf2>
    672c:	103f9926 	beq	r2,zero,6594 <__alt_data_end+0xfffb0e64>
    6730:	d8c00617 	ldw	r3,24(sp)
    6734:	d9000717 	ldw	r4,28(sp)
    6738:	b825883a 	mov	r18,r23
    673c:	18bfffc4 	addi	r2,r3,-1
    6740:	20ad883a 	add	r22,r4,r2
    6744:	dc000315 	stw	r16,12(sp)
    6748:	00000a06 	br	6774 <_dtoa_r+0x898>
    674c:	000e6440 	call	e644 <__muldf3>
    6750:	1009883a 	mov	r4,r2
    6754:	180b883a 	mov	r5,r3
    6758:	000d883a 	mov	r6,zero
    675c:	000f883a 	mov	r7,zero
    6760:	1027883a 	mov	r19,r2
    6764:	182b883a 	mov	r21,r3
    6768:	b825883a 	mov	r18,r23
    676c:	000e4000 	call	e400 <__eqdf2>
    6770:	10022626 	beq	r2,zero,700c <_dtoa_r+0x1130>
    6774:	880d883a 	mov	r6,r17
    6778:	a00f883a 	mov	r7,r20
    677c:	9809883a 	mov	r4,r19
    6780:	a80b883a 	mov	r5,r21
    6784:	000da800 	call	da80 <__divdf3>
    6788:	180b883a 	mov	r5,r3
    678c:	1009883a 	mov	r4,r2
    6790:	000f7800 	call	f780 <__fixdfsi>
    6794:	1009883a 	mov	r4,r2
    6798:	1021883a 	mov	r16,r2
    679c:	000f8080 	call	f808 <__floatsidf>
    67a0:	1009883a 	mov	r4,r2
    67a4:	180b883a 	mov	r5,r3
    67a8:	880d883a 	mov	r6,r17
    67ac:	a00f883a 	mov	r7,r20
    67b0:	000e6440 	call	e644 <__muldf3>
    67b4:	9809883a 	mov	r4,r19
    67b8:	a80b883a 	mov	r5,r21
    67bc:	100d883a 	mov	r6,r2
    67c0:	180f883a 	mov	r7,r3
    67c4:	000eeb00 	call	eeb0 <__subdf3>
    67c8:	82000c04 	addi	r8,r16,48
    67cc:	92000005 	stb	r8,0(r18)
    67d0:	1009883a 	mov	r4,r2
    67d4:	180b883a 	mov	r5,r3
    67d8:	000d883a 	mov	r6,zero
    67dc:	01d00934 	movhi	r7,16420
    67e0:	1011883a 	mov	r8,r2
    67e4:	bdc00044 	addi	r23,r23,1
    67e8:	95bfd81e 	bne	r18,r22,674c <__alt_data_end+0xfffb101c>
    67ec:	802d883a 	mov	r22,r16
    67f0:	dc000317 	ldw	r16,12(sp)
    67f4:	4009883a 	mov	r4,r8
    67f8:	180b883a 	mov	r5,r3
    67fc:	400d883a 	mov	r6,r8
    6800:	180f883a 	mov	r7,r3
    6804:	000d1e40 	call	d1e4 <__adddf3>
    6808:	8809883a 	mov	r4,r17
    680c:	a00b883a 	mov	r5,r20
    6810:	100d883a 	mov	r6,r2
    6814:	180f883a 	mov	r7,r3
    6818:	1027883a 	mov	r19,r2
    681c:	1825883a 	mov	r18,r3
    6820:	000e5640 	call	e564 <__ledf2>
    6824:	10000816 	blt	r2,zero,6848 <_dtoa_r+0x96c>
    6828:	8809883a 	mov	r4,r17
    682c:	a00b883a 	mov	r5,r20
    6830:	980d883a 	mov	r6,r19
    6834:	900f883a 	mov	r7,r18
    6838:	000e4000 	call	e400 <__eqdf2>
    683c:	103f551e 	bne	r2,zero,6594 <__alt_data_end+0xfffb0e64>
    6840:	b580004c 	andi	r22,r22,1
    6844:	b03f5326 	beq	r22,zero,6594 <__alt_data_end+0xfffb0e64>
    6848:	bd7fffc3 	ldbu	r21,-1(r23)
    684c:	b8bfffc4 	addi	r2,r23,-1
    6850:	1007883a 	mov	r3,r2
    6854:	01400e44 	movi	r5,57
    6858:	d9800717 	ldw	r6,28(sp)
    685c:	00000506 	br	6874 <_dtoa_r+0x998>
    6860:	18ffffc4 	addi	r3,r3,-1
    6864:	30825e26 	beq	r6,r2,71e0 <_dtoa_r+0x1304>
    6868:	1d400003 	ldbu	r21,0(r3)
    686c:	102f883a 	mov	r23,r2
    6870:	10bfffc4 	addi	r2,r2,-1
    6874:	a9003fcc 	andi	r4,r21,255
    6878:	2100201c 	xori	r4,r4,128
    687c:	213fe004 	addi	r4,r4,-128
    6880:	217ff726 	beq	r4,r5,6860 <__alt_data_end+0xfffb1130>
    6884:	aa000044 	addi	r8,r21,1
    6888:	12000005 	stb	r8,0(r2)
    688c:	003f4106 	br	6594 <__alt_data_end+0xfffb0e64>
    6890:	d8c00b17 	ldw	r3,44(sp)
    6894:	18006726 	beq	r3,zero,6a34 <_dtoa_r+0xb58>
    6898:	d9000317 	ldw	r4,12(sp)
    689c:	00c00044 	movi	r3,1
    68a0:	19016a0e 	bge	r3,r4,6e4c <_dtoa_r+0xf70>
    68a4:	d8800617 	ldw	r2,24(sp)
    68a8:	d8c00917 	ldw	r3,36(sp)
    68ac:	157fffc4 	addi	r21,r2,-1
    68b0:	1d420716 	blt	r3,r21,70d0 <_dtoa_r+0x11f4>
    68b4:	1d6bc83a 	sub	r21,r3,r21
    68b8:	d8800617 	ldw	r2,24(sp)
    68bc:	1002c716 	blt	r2,zero,73dc <_dtoa_r+0x1500>
    68c0:	dd000817 	ldw	r20,32(sp)
    68c4:	d8800617 	ldw	r2,24(sp)
    68c8:	d9800817 	ldw	r6,32(sp)
    68cc:	8009883a 	mov	r4,r16
    68d0:	01400044 	movi	r5,1
    68d4:	308d883a 	add	r6,r6,r2
    68d8:	d9800815 	stw	r6,32(sp)
    68dc:	b0ad883a 	add	r22,r22,r2
    68e0:	00091980 	call	9198 <__i2b>
    68e4:	1023883a 	mov	r17,r2
    68e8:	a0000826 	beq	r20,zero,690c <_dtoa_r+0xa30>
    68ec:	0580070e 	bge	zero,r22,690c <_dtoa_r+0xa30>
    68f0:	b005883a 	mov	r2,r22
    68f4:	a5812016 	blt	r20,r22,6d78 <_dtoa_r+0xe9c>
    68f8:	d8c00817 	ldw	r3,32(sp)
    68fc:	a0a9c83a 	sub	r20,r20,r2
    6900:	b0adc83a 	sub	r22,r22,r2
    6904:	1887c83a 	sub	r3,r3,r2
    6908:	d8c00815 	stw	r3,32(sp)
    690c:	d9000917 	ldw	r4,36(sp)
    6910:	0100140e 	bge	zero,r4,6964 <_dtoa_r+0xa88>
    6914:	d9800b17 	ldw	r6,44(sp)
    6918:	3001e526 	beq	r6,zero,70b0 <_dtoa_r+0x11d4>
    691c:	05400e0e 	bge	zero,r21,6958 <_dtoa_r+0xa7c>
    6920:	880b883a 	mov	r5,r17
    6924:	8009883a 	mov	r4,r16
    6928:	a80d883a 	mov	r6,r21
    692c:	00094640 	call	9464 <__pow5mult>
    6930:	e00d883a 	mov	r6,fp
    6934:	8009883a 	mov	r4,r16
    6938:	100b883a 	mov	r5,r2
    693c:	1023883a 	mov	r17,r2
    6940:	00091d40 	call	91d4 <__multiply>
    6944:	102f883a 	mov	r23,r2
    6948:	e00b883a 	mov	r5,fp
    694c:	8009883a 	mov	r4,r16
    6950:	0008e180 	call	8e18 <_Bfree>
    6954:	b839883a 	mov	fp,r23
    6958:	d8800917 	ldw	r2,36(sp)
    695c:	154dc83a 	sub	r6,r2,r21
    6960:	3001281e 	bne	r6,zero,6e04 <_dtoa_r+0xf28>
    6964:	05c00044 	movi	r23,1
    6968:	8009883a 	mov	r4,r16
    696c:	b80b883a 	mov	r5,r23
    6970:	00091980 	call	9198 <__i2b>
    6974:	d8c00a17 	ldw	r3,40(sp)
    6978:	102b883a 	mov	r21,r2
    697c:	00c0310e 	bge	zero,r3,6a44 <_dtoa_r+0xb68>
    6980:	8009883a 	mov	r4,r16
    6984:	100b883a 	mov	r5,r2
    6988:	180d883a 	mov	r6,r3
    698c:	00094640 	call	9464 <__pow5mult>
    6990:	d9000317 	ldw	r4,12(sp)
    6994:	102b883a 	mov	r21,r2
    6998:	b9011f0e 	bge	r23,r4,6e18 <_dtoa_r+0xf3c>
    699c:	0027883a 	mov	r19,zero
    69a0:	a8800417 	ldw	r2,16(r21)
    69a4:	10800104 	addi	r2,r2,4
    69a8:	1085883a 	add	r2,r2,r2
    69ac:	1085883a 	add	r2,r2,r2
    69b0:	a885883a 	add	r2,r21,r2
    69b4:	11000017 	ldw	r4,0(r2)
    69b8:	00090800 	call	9080 <__hi0bits>
    69bc:	00c00804 	movi	r3,32
    69c0:	1885c83a 	sub	r2,r3,r2
    69c4:	00002506 	br	6a5c <_dtoa_r+0xb80>
    69c8:	01800044 	movi	r6,1
    69cc:	d9800c15 	stw	r6,48(sp)
    69d0:	003dec06 	br	6184 <__alt_data_end+0xfffb0a54>
    69d4:	d8c00817 	ldw	r3,32(sp)
    69d8:	d9000517 	ldw	r4,20(sp)
    69dc:	d8000a15 	stw	zero,40(sp)
    69e0:	1907c83a 	sub	r3,r3,r4
    69e4:	010dc83a 	sub	r6,zero,r4
    69e8:	d8c00815 	stw	r3,32(sp)
    69ec:	d9800915 	stw	r6,36(sp)
    69f0:	003ded06 	br	61a8 <__alt_data_end+0xfffb0a78>
    69f4:	05adc83a 	sub	r22,zero,r22
    69f8:	dd800815 	stw	r22,32(sp)
    69fc:	002d883a 	mov	r22,zero
    6a00:	003de406 	br	6194 <__alt_data_end+0xfffb0a64>
    6a04:	d9000517 	ldw	r4,20(sp)
    6a08:	000f8080 	call	f808 <__floatsidf>
    6a0c:	1009883a 	mov	r4,r2
    6a10:	180b883a 	mov	r5,r3
    6a14:	b00d883a 	mov	r6,r22
    6a18:	a80f883a 	mov	r7,r21
    6a1c:	000e4000 	call	e400 <__eqdf2>
    6a20:	103dc726 	beq	r2,zero,6140 <__alt_data_end+0xfffb0a10>
    6a24:	d8800517 	ldw	r2,20(sp)
    6a28:	10bfffc4 	addi	r2,r2,-1
    6a2c:	d8800515 	stw	r2,20(sp)
    6a30:	003dc306 	br	6140 <__alt_data_end+0xfffb0a10>
    6a34:	dd400917 	ldw	r21,36(sp)
    6a38:	dd000817 	ldw	r20,32(sp)
    6a3c:	0023883a 	mov	r17,zero
    6a40:	003fa906 	br	68e8 <__alt_data_end+0xfffb11b8>
    6a44:	d9800317 	ldw	r6,12(sp)
    6a48:	b981670e 	bge	r23,r6,6fe8 <_dtoa_r+0x110c>
    6a4c:	0027883a 	mov	r19,zero
    6a50:	d8c00a17 	ldw	r3,40(sp)
    6a54:	183fd21e 	bne	r3,zero,69a0 <__alt_data_end+0xfffb1270>
    6a58:	00800044 	movi	r2,1
    6a5c:	1585883a 	add	r2,r2,r22
    6a60:	108007cc 	andi	r2,r2,31
    6a64:	10005f26 	beq	r2,zero,6be4 <_dtoa_r+0xd08>
    6a68:	00c00804 	movi	r3,32
    6a6c:	1887c83a 	sub	r3,r3,r2
    6a70:	01000104 	movi	r4,4
    6a74:	20c2dd0e 	bge	r4,r3,75ec <_dtoa_r+0x1710>
    6a78:	d9000817 	ldw	r4,32(sp)
    6a7c:	00c00704 	movi	r3,28
    6a80:	1885c83a 	sub	r2,r3,r2
    6a84:	2089883a 	add	r4,r4,r2
    6a88:	d9000815 	stw	r4,32(sp)
    6a8c:	a0a9883a 	add	r20,r20,r2
    6a90:	b0ad883a 	add	r22,r22,r2
    6a94:	d8800817 	ldw	r2,32(sp)
    6a98:	0080050e 	bge	zero,r2,6ab0 <_dtoa_r+0xbd4>
    6a9c:	e00b883a 	mov	r5,fp
    6aa0:	8009883a 	mov	r4,r16
    6aa4:	100d883a 	mov	r6,r2
    6aa8:	00095a40 	call	95a4 <__lshift>
    6aac:	1039883a 	mov	fp,r2
    6ab0:	0580050e 	bge	zero,r22,6ac8 <_dtoa_r+0xbec>
    6ab4:	a80b883a 	mov	r5,r21
    6ab8:	8009883a 	mov	r4,r16
    6abc:	b00d883a 	mov	r6,r22
    6ac0:	00095a40 	call	95a4 <__lshift>
    6ac4:	102b883a 	mov	r21,r2
    6ac8:	d8c00c17 	ldw	r3,48(sp)
    6acc:	1801161e 	bne	r3,zero,6f28 <_dtoa_r+0x104c>
    6ad0:	d8c00617 	ldw	r3,24(sp)
    6ad4:	00c12d0e 	bge	zero,r3,6f8c <_dtoa_r+0x10b0>
    6ad8:	d8c00b17 	ldw	r3,44(sp)
    6adc:	1800571e 	bne	r3,zero,6c3c <_dtoa_r+0xd60>
    6ae0:	dc800717 	ldw	r18,28(sp)
    6ae4:	dcc00617 	ldw	r19,24(sp)
    6ae8:	9029883a 	mov	r20,r18
    6aec:	00000206 	br	6af8 <_dtoa_r+0xc1c>
    6af0:	0008e400 	call	8e40 <__multadd>
    6af4:	1039883a 	mov	fp,r2
    6af8:	e009883a 	mov	r4,fp
    6afc:	a80b883a 	mov	r5,r21
    6b00:	0005cb40 	call	5cb4 <quorem>
    6b04:	10800c04 	addi	r2,r2,48
    6b08:	90800005 	stb	r2,0(r18)
    6b0c:	94800044 	addi	r18,r18,1
    6b10:	9507c83a 	sub	r3,r18,r20
    6b14:	8009883a 	mov	r4,r16
    6b18:	e00b883a 	mov	r5,fp
    6b1c:	01800284 	movi	r6,10
    6b20:	000f883a 	mov	r7,zero
    6b24:	1cfff216 	blt	r3,r19,6af0 <__alt_data_end+0xfffb13c0>
    6b28:	1011883a 	mov	r8,r2
    6b2c:	d8800617 	ldw	r2,24(sp)
    6b30:	00822e0e 	bge	zero,r2,73ec <_dtoa_r+0x1510>
    6b34:	d9000717 	ldw	r4,28(sp)
    6b38:	0025883a 	mov	r18,zero
    6b3c:	20af883a 	add	r23,r4,r2
    6b40:	e00b883a 	mov	r5,fp
    6b44:	01800044 	movi	r6,1
    6b48:	8009883a 	mov	r4,r16
    6b4c:	da001715 	stw	r8,92(sp)
    6b50:	00095a40 	call	95a4 <__lshift>
    6b54:	1009883a 	mov	r4,r2
    6b58:	a80b883a 	mov	r5,r21
    6b5c:	1039883a 	mov	fp,r2
    6b60:	00096ec0 	call	96ec <__mcmp>
    6b64:	da001717 	ldw	r8,92(sp)
    6b68:	00816e0e 	bge	zero,r2,7124 <_dtoa_r+0x1248>
    6b6c:	b93fffc3 	ldbu	r4,-1(r23)
    6b70:	b8bfffc4 	addi	r2,r23,-1
    6b74:	1007883a 	mov	r3,r2
    6b78:	01800e44 	movi	r6,57
    6b7c:	d9c00717 	ldw	r7,28(sp)
    6b80:	00000506 	br	6b98 <_dtoa_r+0xcbc>
    6b84:	18ffffc4 	addi	r3,r3,-1
    6b88:	38811926 	beq	r7,r2,6ff0 <_dtoa_r+0x1114>
    6b8c:	19000003 	ldbu	r4,0(r3)
    6b90:	102f883a 	mov	r23,r2
    6b94:	10bfffc4 	addi	r2,r2,-1
    6b98:	21403fcc 	andi	r5,r4,255
    6b9c:	2940201c 	xori	r5,r5,128
    6ba0:	297fe004 	addi	r5,r5,-128
    6ba4:	29bff726 	beq	r5,r6,6b84 <__alt_data_end+0xfffb1454>
    6ba8:	21000044 	addi	r4,r4,1
    6bac:	11000005 	stb	r4,0(r2)
    6bb0:	8009883a 	mov	r4,r16
    6bb4:	a80b883a 	mov	r5,r21
    6bb8:	0008e180 	call	8e18 <_Bfree>
    6bbc:	883e7526 	beq	r17,zero,6594 <__alt_data_end+0xfffb0e64>
    6bc0:	90000426 	beq	r18,zero,6bd4 <_dtoa_r+0xcf8>
    6bc4:	94400326 	beq	r18,r17,6bd4 <_dtoa_r+0xcf8>
    6bc8:	8009883a 	mov	r4,r16
    6bcc:	900b883a 	mov	r5,r18
    6bd0:	0008e180 	call	8e18 <_Bfree>
    6bd4:	8009883a 	mov	r4,r16
    6bd8:	880b883a 	mov	r5,r17
    6bdc:	0008e180 	call	8e18 <_Bfree>
    6be0:	003e6c06 	br	6594 <__alt_data_end+0xfffb0e64>
    6be4:	00800704 	movi	r2,28
    6be8:	d9800817 	ldw	r6,32(sp)
    6bec:	a0a9883a 	add	r20,r20,r2
    6bf0:	b0ad883a 	add	r22,r22,r2
    6bf4:	308d883a 	add	r6,r6,r2
    6bf8:	d9800815 	stw	r6,32(sp)
    6bfc:	003fa506 	br	6a94 <__alt_data_end+0xfffb1364>
    6c00:	013efb84 	movi	r4,-1042
    6c04:	246bc83a 	sub	r21,r4,r17
    6c08:	9548983a 	sll	r4,r18,r21
    6c0c:	003d1806 	br	6070 <__alt_data_end+0xfffb0940>
    6c10:	d8000c15 	stw	zero,48(sp)
    6c14:	003d5b06 	br	6184 <__alt_data_end+0xfffb0a54>
    6c18:	880b883a 	mov	r5,r17
    6c1c:	8009883a 	mov	r4,r16
    6c20:	01800284 	movi	r6,10
    6c24:	000f883a 	mov	r7,zero
    6c28:	0008e400 	call	8e40 <__multadd>
    6c2c:	1023883a 	mov	r17,r2
    6c30:	d8800d17 	ldw	r2,52(sp)
    6c34:	0082550e 	bge	zero,r2,758c <_dtoa_r+0x16b0>
    6c38:	d8800615 	stw	r2,24(sp)
    6c3c:	0500050e 	bge	zero,r20,6c54 <_dtoa_r+0xd78>
    6c40:	880b883a 	mov	r5,r17
    6c44:	8009883a 	mov	r4,r16
    6c48:	a00d883a 	mov	r6,r20
    6c4c:	00095a40 	call	95a4 <__lshift>
    6c50:	1023883a 	mov	r17,r2
    6c54:	98016a1e 	bne	r19,zero,7200 <_dtoa_r+0x1324>
    6c58:	8829883a 	mov	r20,r17
    6c5c:	d9000617 	ldw	r4,24(sp)
    6c60:	dcc00717 	ldw	r19,28(sp)
    6c64:	9480004c 	andi	r18,r18,1
    6c68:	20bfffc4 	addi	r2,r4,-1
    6c6c:	9885883a 	add	r2,r19,r2
    6c70:	d8800415 	stw	r2,16(sp)
    6c74:	dc800615 	stw	r18,24(sp)
    6c78:	e009883a 	mov	r4,fp
    6c7c:	a80b883a 	mov	r5,r21
    6c80:	0005cb40 	call	5cb4 <quorem>
    6c84:	e009883a 	mov	r4,fp
    6c88:	880b883a 	mov	r5,r17
    6c8c:	102f883a 	mov	r23,r2
    6c90:	00096ec0 	call	96ec <__mcmp>
    6c94:	8009883a 	mov	r4,r16
    6c98:	a80b883a 	mov	r5,r21
    6c9c:	a00d883a 	mov	r6,r20
    6ca0:	102d883a 	mov	r22,r2
    6ca4:	000974c0 	call	974c <__mdiff>
    6ca8:	1007883a 	mov	r3,r2
    6cac:	10800317 	ldw	r2,12(r2)
    6cb0:	bc800c04 	addi	r18,r23,48
    6cb4:	1000971e 	bne	r2,zero,6f14 <_dtoa_r+0x1038>
    6cb8:	180b883a 	mov	r5,r3
    6cbc:	e009883a 	mov	r4,fp
    6cc0:	d8c01515 	stw	r3,84(sp)
    6cc4:	00096ec0 	call	96ec <__mcmp>
    6cc8:	d8c01517 	ldw	r3,84(sp)
    6ccc:	8009883a 	mov	r4,r16
    6cd0:	d8801515 	stw	r2,84(sp)
    6cd4:	180b883a 	mov	r5,r3
    6cd8:	0008e180 	call	8e18 <_Bfree>
    6cdc:	d8801517 	ldw	r2,84(sp)
    6ce0:	1000041e 	bne	r2,zero,6cf4 <_dtoa_r+0xe18>
    6ce4:	d9800317 	ldw	r6,12(sp)
    6ce8:	3000021e 	bne	r6,zero,6cf4 <_dtoa_r+0xe18>
    6cec:	d8c00617 	ldw	r3,24(sp)
    6cf0:	18007626 	beq	r3,zero,6ecc <_dtoa_r+0xff0>
    6cf4:	b0005b16 	blt	r22,zero,6e64 <_dtoa_r+0xf88>
    6cf8:	b000041e 	bne	r22,zero,6d0c <_dtoa_r+0xe30>
    6cfc:	d9000317 	ldw	r4,12(sp)
    6d00:	2000021e 	bne	r4,zero,6d0c <_dtoa_r+0xe30>
    6d04:	d8c00617 	ldw	r3,24(sp)
    6d08:	18005626 	beq	r3,zero,6e64 <_dtoa_r+0xf88>
    6d0c:	00814d16 	blt	zero,r2,7244 <_dtoa_r+0x1368>
    6d10:	d8c00417 	ldw	r3,16(sp)
    6d14:	9d800044 	addi	r22,r19,1
    6d18:	9c800005 	stb	r18,0(r19)
    6d1c:	b02f883a 	mov	r23,r22
    6d20:	98c14c26 	beq	r19,r3,7254 <_dtoa_r+0x1378>
    6d24:	e00b883a 	mov	r5,fp
    6d28:	8009883a 	mov	r4,r16
    6d2c:	01800284 	movi	r6,10
    6d30:	000f883a 	mov	r7,zero
    6d34:	0008e400 	call	8e40 <__multadd>
    6d38:	1039883a 	mov	fp,r2
    6d3c:	8d006d26 	beq	r17,r20,6ef4 <_dtoa_r+0x1018>
    6d40:	880b883a 	mov	r5,r17
    6d44:	01800284 	movi	r6,10
    6d48:	000f883a 	mov	r7,zero
    6d4c:	8009883a 	mov	r4,r16
    6d50:	0008e400 	call	8e40 <__multadd>
    6d54:	a00b883a 	mov	r5,r20
    6d58:	8009883a 	mov	r4,r16
    6d5c:	01800284 	movi	r6,10
    6d60:	000f883a 	mov	r7,zero
    6d64:	1023883a 	mov	r17,r2
    6d68:	0008e400 	call	8e40 <__multadd>
    6d6c:	1029883a 	mov	r20,r2
    6d70:	b027883a 	mov	r19,r22
    6d74:	003fc006 	br	6c78 <__alt_data_end+0xfffb1548>
    6d78:	a005883a 	mov	r2,r20
    6d7c:	003ede06 	br	68f8 <__alt_data_end+0xfffb11c8>
    6d80:	01000044 	movi	r4,1
    6d84:	d9000b15 	stw	r4,44(sp)
    6d88:	d9802217 	ldw	r6,136(sp)
    6d8c:	0180dc0e 	bge	zero,r6,7100 <_dtoa_r+0x1224>
    6d90:	3023883a 	mov	r17,r6
    6d94:	d9800d15 	stw	r6,52(sp)
    6d98:	d9800615 	stw	r6,24(sp)
    6d9c:	003d1e06 	br	6218 <__alt_data_end+0xfffb0ae8>
    6da0:	d8800617 	ldw	r2,24(sp)
    6da4:	00be3716 	blt	zero,r2,6684 <__alt_data_end+0xfffb0f54>
    6da8:	1000be1e 	bne	r2,zero,70a4 <_dtoa_r+0x11c8>
    6dac:	8809883a 	mov	r4,r17
    6db0:	a00b883a 	mov	r5,r20
    6db4:	000d883a 	mov	r6,zero
    6db8:	01d00534 	movhi	r7,16404
    6dbc:	000e6440 	call	e644 <__muldf3>
    6dc0:	1009883a 	mov	r4,r2
    6dc4:	180b883a 	mov	r5,r3
    6dc8:	900d883a 	mov	r6,r18
    6dcc:	980f883a 	mov	r7,r19
    6dd0:	000e4840 	call	e484 <__gedf2>
    6dd4:	002b883a 	mov	r21,zero
    6dd8:	0023883a 	mov	r17,zero
    6ddc:	10007a16 	blt	r2,zero,6fc8 <_dtoa_r+0x10ec>
    6de0:	d9002217 	ldw	r4,136(sp)
    6de4:	ddc00717 	ldw	r23,28(sp)
    6de8:	0108303a 	nor	r4,zero,r4
    6dec:	d9000515 	stw	r4,20(sp)
    6df0:	8009883a 	mov	r4,r16
    6df4:	a80b883a 	mov	r5,r21
    6df8:	0008e180 	call	8e18 <_Bfree>
    6dfc:	883f751e 	bne	r17,zero,6bd4 <__alt_data_end+0xfffb14a4>
    6e00:	003de406 	br	6594 <__alt_data_end+0xfffb0e64>
    6e04:	e00b883a 	mov	r5,fp
    6e08:	8009883a 	mov	r4,r16
    6e0c:	00094640 	call	9464 <__pow5mult>
    6e10:	1039883a 	mov	fp,r2
    6e14:	003ed306 	br	6964 <__alt_data_end+0xfffb1234>
    6e18:	903ee01e 	bne	r18,zero,699c <__alt_data_end+0xfffb126c>
    6e1c:	00800434 	movhi	r2,16
    6e20:	10bfffc4 	addi	r2,r2,-1
    6e24:	9884703a 	and	r2,r19,r2
    6e28:	103f081e 	bne	r2,zero,6a4c <__alt_data_end+0xfffb131c>
    6e2c:	9cdffc2c 	andhi	r19,r19,32752
    6e30:	983f0626 	beq	r19,zero,6a4c <__alt_data_end+0xfffb131c>
    6e34:	d8800817 	ldw	r2,32(sp)
    6e38:	b5800044 	addi	r22,r22,1
    6e3c:	04c00044 	movi	r19,1
    6e40:	10800044 	addi	r2,r2,1
    6e44:	d8800815 	stw	r2,32(sp)
    6e48:	003f0106 	br	6a50 <__alt_data_end+0xfffb1320>
    6e4c:	d9800f17 	ldw	r6,60(sp)
    6e50:	30016826 	beq	r6,zero,73f4 <_dtoa_r+0x1518>
    6e54:	10810cc4 	addi	r2,r2,1075
    6e58:	dd400917 	ldw	r21,36(sp)
    6e5c:	dd000817 	ldw	r20,32(sp)
    6e60:	003e9906 	br	68c8 <__alt_data_end+0xfffb1198>
    6e64:	9011883a 	mov	r8,r18
    6e68:	4007883a 	mov	r3,r8
    6e6c:	e02d883a 	mov	r22,fp
    6e70:	0080100e 	bge	zero,r2,6eb4 <_dtoa_r+0xfd8>
    6e74:	01800044 	movi	r6,1
    6e78:	8009883a 	mov	r4,r16
    6e7c:	e00b883a 	mov	r5,fp
    6e80:	da001515 	stw	r8,84(sp)
    6e84:	da001715 	stw	r8,92(sp)
    6e88:	00095a40 	call	95a4 <__lshift>
    6e8c:	1009883a 	mov	r4,r2
    6e90:	a80b883a 	mov	r5,r21
    6e94:	102d883a 	mov	r22,r2
    6e98:	00096ec0 	call	96ec <__mcmp>
    6e9c:	d8c01517 	ldw	r3,84(sp)
    6ea0:	da001717 	ldw	r8,92(sp)
    6ea4:	0081a50e 	bge	zero,r2,753c <_dtoa_r+0x1660>
    6ea8:	00800e44 	movi	r2,57
    6eac:	40817b26 	beq	r8,r2,749c <_dtoa_r+0x15c0>
    6eb0:	40c00044 	addi	r3,r8,1
    6eb4:	8825883a 	mov	r18,r17
    6eb8:	9dc00044 	addi	r23,r19,1
    6ebc:	98c00005 	stb	r3,0(r19)
    6ec0:	a023883a 	mov	r17,r20
    6ec4:	b039883a 	mov	fp,r22
    6ec8:	003f3906 	br	6bb0 <__alt_data_end+0xfffb1480>
    6ecc:	00800e44 	movi	r2,57
    6ed0:	9011883a 	mov	r8,r18
    6ed4:	90817226 	beq	r18,r2,74a0 <_dtoa_r+0x15c4>
    6ed8:	0580010e 	bge	zero,r22,6ee0 <_dtoa_r+0x1004>
    6edc:	ba000c44 	addi	r8,r23,49
    6ee0:	8825883a 	mov	r18,r17
    6ee4:	9dc00044 	addi	r23,r19,1
    6ee8:	9a000005 	stb	r8,0(r19)
    6eec:	a023883a 	mov	r17,r20
    6ef0:	003f2f06 	br	6bb0 <__alt_data_end+0xfffb1480>
    6ef4:	880b883a 	mov	r5,r17
    6ef8:	8009883a 	mov	r4,r16
    6efc:	01800284 	movi	r6,10
    6f00:	000f883a 	mov	r7,zero
    6f04:	0008e400 	call	8e40 <__multadd>
    6f08:	1023883a 	mov	r17,r2
    6f0c:	1029883a 	mov	r20,r2
    6f10:	003f9706 	br	6d70 <__alt_data_end+0xfffb1640>
    6f14:	8009883a 	mov	r4,r16
    6f18:	180b883a 	mov	r5,r3
    6f1c:	0008e180 	call	8e18 <_Bfree>
    6f20:	00800044 	movi	r2,1
    6f24:	003f7306 	br	6cf4 <__alt_data_end+0xfffb15c4>
    6f28:	e009883a 	mov	r4,fp
    6f2c:	a80b883a 	mov	r5,r21
    6f30:	00096ec0 	call	96ec <__mcmp>
    6f34:	103ee60e 	bge	r2,zero,6ad0 <__alt_data_end+0xfffb13a0>
    6f38:	8009883a 	mov	r4,r16
    6f3c:	e00b883a 	mov	r5,fp
    6f40:	01800284 	movi	r6,10
    6f44:	000f883a 	mov	r7,zero
    6f48:	0008e400 	call	8e40 <__multadd>
    6f4c:	d9000517 	ldw	r4,20(sp)
    6f50:	d9800b17 	ldw	r6,44(sp)
    6f54:	1039883a 	mov	fp,r2
    6f58:	213fffc4 	addi	r4,r4,-1
    6f5c:	d9000515 	stw	r4,20(sp)
    6f60:	303f2d1e 	bne	r6,zero,6c18 <__alt_data_end+0xfffb14e8>
    6f64:	d9000d17 	ldw	r4,52(sp)
    6f68:	0101780e 	bge	zero,r4,754c <_dtoa_r+0x1670>
    6f6c:	d9000615 	stw	r4,24(sp)
    6f70:	003edb06 	br	6ae0 <__alt_data_end+0xfffb13b0>
    6f74:	00800084 	movi	r2,2
    6f78:	30818e1e 	bne	r6,r2,75b4 <_dtoa_r+0x16d8>
    6f7c:	d8000b15 	stw	zero,44(sp)
    6f80:	003f8106 	br	6d88 <__alt_data_end+0xfffb1658>
    6f84:	d8800717 	ldw	r2,28(sp)
    6f88:	003c0306 	br	5f98 <__alt_data_end+0xfffb0868>
    6f8c:	d9000317 	ldw	r4,12(sp)
    6f90:	00800084 	movi	r2,2
    6f94:	113ed00e 	bge	r2,r4,6ad8 <__alt_data_end+0xfffb13a8>
    6f98:	d8c00617 	ldw	r3,24(sp)
    6f9c:	183f901e 	bne	r3,zero,6de0 <__alt_data_end+0xfffb16b0>
    6fa0:	a80b883a 	mov	r5,r21
    6fa4:	8009883a 	mov	r4,r16
    6fa8:	01800144 	movi	r6,5
    6fac:	000f883a 	mov	r7,zero
    6fb0:	0008e400 	call	8e40 <__multadd>
    6fb4:	e009883a 	mov	r4,fp
    6fb8:	100b883a 	mov	r5,r2
    6fbc:	102b883a 	mov	r21,r2
    6fc0:	00096ec0 	call	96ec <__mcmp>
    6fc4:	00bf860e 	bge	zero,r2,6de0 <__alt_data_end+0xfffb16b0>
    6fc8:	d9800717 	ldw	r6,28(sp)
    6fcc:	00800c44 	movi	r2,49
    6fd0:	30800005 	stb	r2,0(r6)
    6fd4:	d8800517 	ldw	r2,20(sp)
    6fd8:	35c00044 	addi	r23,r6,1
    6fdc:	10800044 	addi	r2,r2,1
    6fe0:	d8800515 	stw	r2,20(sp)
    6fe4:	003f8206 	br	6df0 <__alt_data_end+0xfffb16c0>
    6fe8:	903e981e 	bne	r18,zero,6a4c <__alt_data_end+0xfffb131c>
    6fec:	003f8b06 	br	6e1c <__alt_data_end+0xfffb16ec>
    6ff0:	d9800517 	ldw	r6,20(sp)
    6ff4:	d8c00717 	ldw	r3,28(sp)
    6ff8:	00800c44 	movi	r2,49
    6ffc:	31800044 	addi	r6,r6,1
    7000:	d9800515 	stw	r6,20(sp)
    7004:	18800005 	stb	r2,0(r3)
    7008:	003ee906 	br	6bb0 <__alt_data_end+0xfffb1480>
    700c:	dc000317 	ldw	r16,12(sp)
    7010:	003d6006 	br	6594 <__alt_data_end+0xfffb0e64>
    7014:	8809883a 	mov	r4,r17
    7018:	000f8080 	call	f808 <__floatsidf>
    701c:	a009883a 	mov	r4,r20
    7020:	a80b883a 	mov	r5,r21
    7024:	100d883a 	mov	r6,r2
    7028:	180f883a 	mov	r7,r3
    702c:	000e6440 	call	e644 <__muldf3>
    7030:	1009883a 	mov	r4,r2
    7034:	180b883a 	mov	r5,r3
    7038:	000d883a 	mov	r6,zero
    703c:	01d00734 	movhi	r7,16412
    7040:	000d1e40 	call	d1e4 <__adddf3>
    7044:	1023883a 	mov	r17,r2
    7048:	00bf3034 	movhi	r2,64704
    704c:	1885883a 	add	r2,r3,r2
    7050:	d8800e15 	stw	r2,56(sp)
    7054:	a009883a 	mov	r4,r20
    7058:	a80b883a 	mov	r5,r21
    705c:	000d883a 	mov	r6,zero
    7060:	01d00534 	movhi	r7,16404
    7064:	000eeb00 	call	eeb0 <__subdf3>
    7068:	d9c00e17 	ldw	r7,56(sp)
    706c:	1009883a 	mov	r4,r2
    7070:	180b883a 	mov	r5,r3
    7074:	880d883a 	mov	r6,r17
    7078:	102b883a 	mov	r21,r2
    707c:	1829883a 	mov	r20,r3
    7080:	000e4840 	call	e484 <__gedf2>
    7084:	00807716 	blt	zero,r2,7264 <_dtoa_r+0x1388>
    7088:	d8800e17 	ldw	r2,56(sp)
    708c:	a809883a 	mov	r4,r21
    7090:	a00b883a 	mov	r5,r20
    7094:	11e0003c 	xorhi	r7,r2,32768
    7098:	880d883a 	mov	r6,r17
    709c:	000e5640 	call	e564 <__ledf2>
    70a0:	103d6b0e 	bge	r2,zero,6650 <__alt_data_end+0xfffb0f20>
    70a4:	002b883a 	mov	r21,zero
    70a8:	0023883a 	mov	r17,zero
    70ac:	003f4c06 	br	6de0 <__alt_data_end+0xfffb16b0>
    70b0:	d9800917 	ldw	r6,36(sp)
    70b4:	e00b883a 	mov	r5,fp
    70b8:	8009883a 	mov	r4,r16
    70bc:	00094640 	call	9464 <__pow5mult>
    70c0:	1039883a 	mov	fp,r2
    70c4:	003e2706 	br	6964 <__alt_data_end+0xfffb1234>
    70c8:	d8000b15 	stw	zero,44(sp)
    70cc:	003c4906 	br	61f4 <__alt_data_end+0xfffb0ac4>
    70d0:	d9000917 	ldw	r4,36(sp)
    70d4:	d9800a17 	ldw	r6,40(sp)
    70d8:	dd400915 	stw	r21,36(sp)
    70dc:	a905c83a 	sub	r2,r21,r4
    70e0:	308d883a 	add	r6,r6,r2
    70e4:	d9800a15 	stw	r6,40(sp)
    70e8:	002b883a 	mov	r21,zero
    70ec:	003df206 	br	68b8 <__alt_data_end+0xfffb1188>
    70f0:	dc800e15 	stw	r18,56(sp)
    70f4:	982b883a 	mov	r21,r19
    70f8:	04400084 	movi	r17,2
    70fc:	003c7406 	br	62d0 <__alt_data_end+0xfffb0ba0>
    7100:	04400044 	movi	r17,1
    7104:	dc400d15 	stw	r17,52(sp)
    7108:	dc400615 	stw	r17,24(sp)
    710c:	dc402215 	stw	r17,136(sp)
    7110:	80001115 	stw	zero,68(r16)
    7114:	000b883a 	mov	r5,zero
    7118:	003c4a06 	br	6244 <__alt_data_end+0xfffb0b14>
    711c:	3023883a 	mov	r17,r6
    7120:	003ffb06 	br	7110 <__alt_data_end+0xfffb19e0>
    7124:	1000021e 	bne	r2,zero,7130 <_dtoa_r+0x1254>
    7128:	4200004c 	andi	r8,r8,1
    712c:	403e8f1e 	bne	r8,zero,6b6c <__alt_data_end+0xfffb143c>
    7130:	01000c04 	movi	r4,48
    7134:	00000106 	br	713c <_dtoa_r+0x1260>
    7138:	102f883a 	mov	r23,r2
    713c:	b8bfffc4 	addi	r2,r23,-1
    7140:	10c00007 	ldb	r3,0(r2)
    7144:	193ffc26 	beq	r3,r4,7138 <__alt_data_end+0xfffb1a08>
    7148:	003e9906 	br	6bb0 <__alt_data_end+0xfffb1480>
    714c:	d9000517 	ldw	r4,20(sp)
    7150:	012fc83a 	sub	r23,zero,r4
    7154:	b800ad26 	beq	r23,zero,740c <_dtoa_r+0x1530>
    7158:	b88003cc 	andi	r2,r23,15
    715c:	100490fa 	slli	r2,r2,3
    7160:	00c00074 	movhi	r3,1
    7164:	18caba04 	addi	r3,r3,10984
    7168:	1885883a 	add	r2,r3,r2
    716c:	11800017 	ldw	r6,0(r2)
    7170:	11c00117 	ldw	r7,4(r2)
    7174:	b82fd13a 	srai	r23,r23,4
    7178:	9009883a 	mov	r4,r18
    717c:	980b883a 	mov	r5,r19
    7180:	000e6440 	call	e644 <__muldf3>
    7184:	1029883a 	mov	r20,r2
    7188:	182b883a 	mov	r21,r3
    718c:	b800f426 	beq	r23,zero,7560 <_dtoa_r+0x1684>
    7190:	02000074 	movhi	r8,1
    7194:	420ab004 	addi	r8,r8,10944
    7198:	8029883a 	mov	r20,r16
    719c:	04400084 	movi	r17,2
    71a0:	4021883a 	mov	r16,r8
    71a4:	b980004c 	andi	r6,r23,1
    71a8:	1009883a 	mov	r4,r2
    71ac:	b82fd07a 	srai	r23,r23,1
    71b0:	180b883a 	mov	r5,r3
    71b4:	30000426 	beq	r6,zero,71c8 <_dtoa_r+0x12ec>
    71b8:	81800017 	ldw	r6,0(r16)
    71bc:	81c00117 	ldw	r7,4(r16)
    71c0:	8c400044 	addi	r17,r17,1
    71c4:	000e6440 	call	e644 <__muldf3>
    71c8:	84000204 	addi	r16,r16,8
    71cc:	b83ff51e 	bne	r23,zero,71a4 <__alt_data_end+0xfffb1a74>
    71d0:	a021883a 	mov	r16,r20
    71d4:	182b883a 	mov	r21,r3
    71d8:	1029883a 	mov	r20,r2
    71dc:	003c5506 	br	6334 <__alt_data_end+0xfffb0c04>
    71e0:	d9800517 	ldw	r6,20(sp)
    71e4:	d9000717 	ldw	r4,28(sp)
    71e8:	00c00c04 	movi	r3,48
    71ec:	31800044 	addi	r6,r6,1
    71f0:	d9800515 	stw	r6,20(sp)
    71f4:	20c00005 	stb	r3,0(r4)
    71f8:	02000c44 	movi	r8,49
    71fc:	003da206 	br	6888 <__alt_data_end+0xfffb1158>
    7200:	89400117 	ldw	r5,4(r17)
    7204:	8009883a 	mov	r4,r16
    7208:	0008d700 	call	8d70 <_Balloc>
    720c:	89800417 	ldw	r6,16(r17)
    7210:	11000304 	addi	r4,r2,12
    7214:	89400304 	addi	r5,r17,12
    7218:	31800084 	addi	r6,r6,2
    721c:	318d883a 	add	r6,r6,r6
    7220:	318d883a 	add	r6,r6,r6
    7224:	1027883a 	mov	r19,r2
    7228:	00089b80 	call	89b8 <memcpy>
    722c:	8009883a 	mov	r4,r16
    7230:	980b883a 	mov	r5,r19
    7234:	01800044 	movi	r6,1
    7238:	00095a40 	call	95a4 <__lshift>
    723c:	1029883a 	mov	r20,r2
    7240:	003e8606 	br	6c5c <__alt_data_end+0xfffb152c>
    7244:	00800e44 	movi	r2,57
    7248:	90809526 	beq	r18,r2,74a0 <_dtoa_r+0x15c4>
    724c:	92000044 	addi	r8,r18,1
    7250:	003f2306 	br	6ee0 <__alt_data_end+0xfffb17b0>
    7254:	9011883a 	mov	r8,r18
    7258:	8825883a 	mov	r18,r17
    725c:	a023883a 	mov	r17,r20
    7260:	003e3706 	br	6b40 <__alt_data_end+0xfffb1410>
    7264:	002b883a 	mov	r21,zero
    7268:	0023883a 	mov	r17,zero
    726c:	003f5606 	br	6fc8 <__alt_data_end+0xfffb1898>
    7270:	51bfffc4 	addi	r6,r10,-1
    7274:	300490fa 	slli	r2,r6,3
    7278:	00c00074 	movhi	r3,1
    727c:	18caba04 	addi	r3,r3,10984
    7280:	1885883a 	add	r2,r3,r2
    7284:	d9c00e17 	ldw	r7,56(sp)
    7288:	11000017 	ldw	r4,0(r2)
    728c:	11400117 	ldw	r5,4(r2)
    7290:	d8800717 	ldw	r2,28(sp)
    7294:	d9801015 	stw	r6,64(sp)
    7298:	880d883a 	mov	r6,r17
    729c:	da801615 	stw	r10,88(sp)
    72a0:	15c00044 	addi	r23,r2,1
    72a4:	000e6440 	call	e644 <__muldf3>
    72a8:	a80b883a 	mov	r5,r21
    72ac:	a009883a 	mov	r4,r20
    72b0:	d8c01115 	stw	r3,68(sp)
    72b4:	d8800e15 	stw	r2,56(sp)
    72b8:	000f7800 	call	f780 <__fixdfsi>
    72bc:	1009883a 	mov	r4,r2
    72c0:	1023883a 	mov	r17,r2
    72c4:	000f8080 	call	f808 <__floatsidf>
    72c8:	a009883a 	mov	r4,r20
    72cc:	a80b883a 	mov	r5,r21
    72d0:	100d883a 	mov	r6,r2
    72d4:	180f883a 	mov	r7,r3
    72d8:	000eeb00 	call	eeb0 <__subdf3>
    72dc:	1813883a 	mov	r9,r3
    72e0:	d8c00717 	ldw	r3,28(sp)
    72e4:	8c400c04 	addi	r17,r17,48
    72e8:	1011883a 	mov	r8,r2
    72ec:	1c400005 	stb	r17,0(r3)
    72f0:	da801617 	ldw	r10,88(sp)
    72f4:	00800044 	movi	r2,1
    72f8:	50802326 	beq	r10,r2,7388 <_dtoa_r+0x14ac>
    72fc:	d8800717 	ldw	r2,28(sp)
    7300:	b82b883a 	mov	r21,r23
    7304:	dc001315 	stw	r16,76(sp)
    7308:	12a9883a 	add	r20,r2,r10
    730c:	4807883a 	mov	r3,r9
    7310:	4005883a 	mov	r2,r8
    7314:	dc801415 	stw	r18,80(sp)
    7318:	000d883a 	mov	r6,zero
    731c:	01d00934 	movhi	r7,16420
    7320:	1009883a 	mov	r4,r2
    7324:	180b883a 	mov	r5,r3
    7328:	000e6440 	call	e644 <__muldf3>
    732c:	180b883a 	mov	r5,r3
    7330:	1009883a 	mov	r4,r2
    7334:	1821883a 	mov	r16,r3
    7338:	1025883a 	mov	r18,r2
    733c:	000f7800 	call	f780 <__fixdfsi>
    7340:	1009883a 	mov	r4,r2
    7344:	1023883a 	mov	r17,r2
    7348:	000f8080 	call	f808 <__floatsidf>
    734c:	9009883a 	mov	r4,r18
    7350:	800b883a 	mov	r5,r16
    7354:	100d883a 	mov	r6,r2
    7358:	180f883a 	mov	r7,r3
    735c:	8c400c04 	addi	r17,r17,48
    7360:	000eeb00 	call	eeb0 <__subdf3>
    7364:	ad400044 	addi	r21,r21,1
    7368:	ac7fffc5 	stb	r17,-1(r21)
    736c:	ad3fea1e 	bne	r21,r20,7318 <__alt_data_end+0xfffb1be8>
    7370:	1813883a 	mov	r9,r3
    7374:	d8c01017 	ldw	r3,64(sp)
    7378:	dc001317 	ldw	r16,76(sp)
    737c:	dc801417 	ldw	r18,80(sp)
    7380:	1011883a 	mov	r8,r2
    7384:	b8ef883a 	add	r23,r23,r3
    7388:	d9000e17 	ldw	r4,56(sp)
    738c:	d9401117 	ldw	r5,68(sp)
    7390:	000d883a 	mov	r6,zero
    7394:	01cff834 	movhi	r7,16352
    7398:	da001715 	stw	r8,92(sp)
    739c:	da401515 	stw	r9,84(sp)
    73a0:	000d1e40 	call	d1e4 <__adddf3>
    73a4:	da001717 	ldw	r8,92(sp)
    73a8:	da401517 	ldw	r9,84(sp)
    73ac:	1009883a 	mov	r4,r2
    73b0:	400d883a 	mov	r6,r8
    73b4:	480f883a 	mov	r7,r9
    73b8:	180b883a 	mov	r5,r3
    73bc:	000e5640 	call	e564 <__ledf2>
    73c0:	da001717 	ldw	r8,92(sp)
    73c4:	da401517 	ldw	r9,84(sp)
    73c8:	10003b0e 	bge	r2,zero,74b8 <_dtoa_r+0x15dc>
    73cc:	d9001217 	ldw	r4,72(sp)
    73d0:	bd7fffc3 	ldbu	r21,-1(r23)
    73d4:	d9000515 	stw	r4,20(sp)
    73d8:	003d1c06 	br	684c <__alt_data_end+0xfffb111c>
    73dc:	d8c00817 	ldw	r3,32(sp)
    73e0:	18a9c83a 	sub	r20,r3,r2
    73e4:	0005883a 	mov	r2,zero
    73e8:	003d3706 	br	68c8 <__alt_data_end+0xfffb1198>
    73ec:	00800044 	movi	r2,1
    73f0:	003dd006 	br	6b34 <__alt_data_end+0xfffb1404>
    73f4:	d8c00217 	ldw	r3,8(sp)
    73f8:	00800d84 	movi	r2,54
    73fc:	dd400917 	ldw	r21,36(sp)
    7400:	10c5c83a 	sub	r2,r2,r3
    7404:	dd000817 	ldw	r20,32(sp)
    7408:	003d2f06 	br	68c8 <__alt_data_end+0xfffb1198>
    740c:	9029883a 	mov	r20,r18
    7410:	982b883a 	mov	r21,r19
    7414:	04400084 	movi	r17,2
    7418:	003bc606 	br	6334 <__alt_data_end+0xfffb0c04>
    741c:	d8800617 	ldw	r2,24(sp)
    7420:	103efc26 	beq	r2,zero,7014 <__alt_data_end+0xfffb18e4>
    7424:	d8c00d17 	ldw	r3,52(sp)
    7428:	00fc890e 	bge	zero,r3,6650 <__alt_data_end+0xfffb0f20>
    742c:	a80b883a 	mov	r5,r21
    7430:	a009883a 	mov	r4,r20
    7434:	000d883a 	mov	r6,zero
    7438:	01d00934 	movhi	r7,16420
    743c:	000e6440 	call	e644 <__muldf3>
    7440:	89000044 	addi	r4,r17,1
    7444:	1029883a 	mov	r20,r2
    7448:	182b883a 	mov	r21,r3
    744c:	000f8080 	call	f808 <__floatsidf>
    7450:	a009883a 	mov	r4,r20
    7454:	a80b883a 	mov	r5,r21
    7458:	100d883a 	mov	r6,r2
    745c:	180f883a 	mov	r7,r3
    7460:	000e6440 	call	e644 <__muldf3>
    7464:	1009883a 	mov	r4,r2
    7468:	180b883a 	mov	r5,r3
    746c:	000d883a 	mov	r6,zero
    7470:	01d00734 	movhi	r7,16412
    7474:	000d1e40 	call	d1e4 <__adddf3>
    7478:	d9000517 	ldw	r4,20(sp)
    747c:	1023883a 	mov	r17,r2
    7480:	00bf3034 	movhi	r2,64704
    7484:	213fffc4 	addi	r4,r4,-1
    7488:	1885883a 	add	r2,r3,r2
    748c:	d9001215 	stw	r4,72(sp)
    7490:	d8800e15 	stw	r2,56(sp)
    7494:	da800d17 	ldw	r10,52(sp)
    7498:	003bc306 	br	63a8 <__alt_data_end+0xfffb0c78>
    749c:	b039883a 	mov	fp,r22
    74a0:	01000e44 	movi	r4,57
    74a4:	8825883a 	mov	r18,r17
    74a8:	9dc00044 	addi	r23,r19,1
    74ac:	99000005 	stb	r4,0(r19)
    74b0:	a023883a 	mov	r17,r20
    74b4:	003dae06 	br	6b70 <__alt_data_end+0xfffb1440>
    74b8:	d9800e17 	ldw	r6,56(sp)
    74bc:	d9c01117 	ldw	r7,68(sp)
    74c0:	0009883a 	mov	r4,zero
    74c4:	014ff834 	movhi	r5,16352
    74c8:	da001715 	stw	r8,92(sp)
    74cc:	da401515 	stw	r9,84(sp)
    74d0:	000eeb00 	call	eeb0 <__subdf3>
    74d4:	da001717 	ldw	r8,92(sp)
    74d8:	da401517 	ldw	r9,84(sp)
    74dc:	1009883a 	mov	r4,r2
    74e0:	180b883a 	mov	r5,r3
    74e4:	400d883a 	mov	r6,r8
    74e8:	480f883a 	mov	r7,r9
    74ec:	000e4840 	call	e484 <__gedf2>
    74f0:	00bc570e 	bge	zero,r2,6650 <__alt_data_end+0xfffb0f20>
    74f4:	01000c04 	movi	r4,48
    74f8:	00000106 	br	7500 <_dtoa_r+0x1624>
    74fc:	102f883a 	mov	r23,r2
    7500:	b8bfffc4 	addi	r2,r23,-1
    7504:	10c00007 	ldb	r3,0(r2)
    7508:	193ffc26 	beq	r3,r4,74fc <__alt_data_end+0xfffb1dcc>
    750c:	d9801217 	ldw	r6,72(sp)
    7510:	d9800515 	stw	r6,20(sp)
    7514:	003c1f06 	br	6594 <__alt_data_end+0xfffb0e64>
    7518:	d8801217 	ldw	r2,72(sp)
    751c:	dc001117 	ldw	r16,68(sp)
    7520:	d8800515 	stw	r2,20(sp)
    7524:	003cc906 	br	684c <__alt_data_end+0xfffb111c>
    7528:	dd801317 	ldw	r22,76(sp)
    752c:	dc001117 	ldw	r16,68(sp)
    7530:	dcc01417 	ldw	r19,80(sp)
    7534:	dc801017 	ldw	r18,64(sp)
    7538:	003c4506 	br	6650 <__alt_data_end+0xfffb0f20>
    753c:	103e5d1e 	bne	r2,zero,6eb4 <__alt_data_end+0xfffb1784>
    7540:	4080004c 	andi	r2,r8,1
    7544:	103e5b26 	beq	r2,zero,6eb4 <__alt_data_end+0xfffb1784>
    7548:	003e5706 	br	6ea8 <__alt_data_end+0xfffb1778>
    754c:	d8c00317 	ldw	r3,12(sp)
    7550:	00800084 	movi	r2,2
    7554:	10c00a16 	blt	r2,r3,7580 <_dtoa_r+0x16a4>
    7558:	d9000d17 	ldw	r4,52(sp)
    755c:	003e8306 	br	6f6c <__alt_data_end+0xfffb183c>
    7560:	04400084 	movi	r17,2
    7564:	003b7306 	br	6334 <__alt_data_end+0xfffb0c04>
    7568:	d9801217 	ldw	r6,72(sp)
    756c:	d9800515 	stw	r6,20(sp)
    7570:	003cb606 	br	684c <__alt_data_end+0xfffb111c>
    7574:	d9001217 	ldw	r4,72(sp)
    7578:	d9000515 	stw	r4,20(sp)
    757c:	003c0506 	br	6594 <__alt_data_end+0xfffb0e64>
    7580:	d9800d17 	ldw	r6,52(sp)
    7584:	d9800615 	stw	r6,24(sp)
    7588:	003e8306 	br	6f98 <__alt_data_end+0xfffb1868>
    758c:	d9800317 	ldw	r6,12(sp)
    7590:	00800084 	movi	r2,2
    7594:	11800216 	blt	r2,r6,75a0 <_dtoa_r+0x16c4>
    7598:	d8800d17 	ldw	r2,52(sp)
    759c:	003da606 	br	6c38 <__alt_data_end+0xfffb1508>
    75a0:	d8800d17 	ldw	r2,52(sp)
    75a4:	d8800615 	stw	r2,24(sp)
    75a8:	003e7b06 	br	6f98 <__alt_data_end+0xfffb1868>
    75ac:	05000044 	movi	r20,1
    75b0:	003b0506 	br	61c8 <__alt_data_end+0xfffb0a98>
    75b4:	8009883a 	mov	r4,r16
    75b8:	80001115 	stw	zero,68(r16)
    75bc:	000b883a 	mov	r5,zero
    75c0:	0008d700 	call	8d70 <_Balloc>
    75c4:	d8800715 	stw	r2,28(sp)
    75c8:	d8c00717 	ldw	r3,28(sp)
    75cc:	00bfffc4 	movi	r2,-1
    75d0:	01000044 	movi	r4,1
    75d4:	d8800615 	stw	r2,24(sp)
    75d8:	80c01015 	stw	r3,64(r16)
    75dc:	d9000b15 	stw	r4,44(sp)
    75e0:	d8002215 	stw	zero,136(sp)
    75e4:	d8800d15 	stw	r2,52(sp)
    75e8:	003c1906 	br	6650 <__alt_data_end+0xfffb0f20>
    75ec:	193d2926 	beq	r3,r4,6a94 <__alt_data_end+0xfffb1364>
    75f0:	00c00f04 	movi	r3,60
    75f4:	1885c83a 	sub	r2,r3,r2
    75f8:	003d7b06 	br	6be8 <__alt_data_end+0xfffb14b8>
    75fc:	000b883a 	mov	r5,zero
    7600:	003b1006 	br	6244 <__alt_data_end+0xfffb0b14>

00007604 <_fflush_r>:
    7604:	defffb04 	addi	sp,sp,-20
    7608:	dcc00315 	stw	r19,12(sp)
    760c:	dc000015 	stw	r16,0(sp)
    7610:	dfc00415 	stw	ra,16(sp)
    7614:	dc800215 	stw	r18,8(sp)
    7618:	dc400115 	stw	r17,4(sp)
    761c:	2027883a 	mov	r19,r4
    7620:	2821883a 	mov	r16,r5
    7624:	20000226 	beq	r4,zero,7630 <_fflush_r+0x2c>
    7628:	20800e17 	ldw	r2,56(r4)
    762c:	10005326 	beq	r2,zero,777c <_fflush_r+0x178>
    7630:	8080030b 	ldhu	r2,12(r16)
    7634:	10ffffcc 	andi	r3,r2,65535
    7638:	18e0001c 	xori	r3,r3,32768
    763c:	18e00004 	addi	r3,r3,-32768
    7640:	18002c26 	beq	r3,zero,76f4 <_fflush_r+0xf0>
    7644:	10c0020c 	andi	r3,r2,8
    7648:	1800321e 	bne	r3,zero,7714 <_fflush_r+0x110>
    764c:	80c00117 	ldw	r3,4(r16)
    7650:	10820014 	ori	r2,r2,2048
    7654:	8080030d 	sth	r2,12(r16)
    7658:	00c0570e 	bge	zero,r3,77b8 <_fflush_r+0x1b4>
    765c:	82000a17 	ldw	r8,40(r16)
    7660:	40002426 	beq	r8,zero,76f4 <_fflush_r+0xf0>
    7664:	9c400017 	ldw	r17,0(r19)
    7668:	10c4000c 	andi	r3,r2,4096
    766c:	98000015 	stw	zero,0(r19)
    7670:	18004626 	beq	r3,zero,778c <_fflush_r+0x188>
    7674:	81801417 	ldw	r6,80(r16)
    7678:	10c0010c 	andi	r3,r2,4
    767c:	18000626 	beq	r3,zero,7698 <_fflush_r+0x94>
    7680:	80c00117 	ldw	r3,4(r16)
    7684:	80800c17 	ldw	r2,48(r16)
    7688:	30cdc83a 	sub	r6,r6,r3
    768c:	10000226 	beq	r2,zero,7698 <_fflush_r+0x94>
    7690:	80800f17 	ldw	r2,60(r16)
    7694:	308dc83a 	sub	r6,r6,r2
    7698:	81400717 	ldw	r5,28(r16)
    769c:	9809883a 	mov	r4,r19
    76a0:	000f883a 	mov	r7,zero
    76a4:	403ee83a 	callr	r8
    76a8:	00ffffc4 	movi	r3,-1
    76ac:	10c04526 	beq	r2,r3,77c4 <_fflush_r+0x1c0>
    76b0:	80c0030b 	ldhu	r3,12(r16)
    76b4:	81000417 	ldw	r4,16(r16)
    76b8:	80000115 	stw	zero,4(r16)
    76bc:	197dffcc 	andi	r5,r3,63487
    76c0:	8140030d 	sth	r5,12(r16)
    76c4:	81000015 	stw	r4,0(r16)
    76c8:	18c4000c 	andi	r3,r3,4096
    76cc:	18000126 	beq	r3,zero,76d4 <_fflush_r+0xd0>
    76d0:	80801415 	stw	r2,80(r16)
    76d4:	81400c17 	ldw	r5,48(r16)
    76d8:	9c400015 	stw	r17,0(r19)
    76dc:	28000526 	beq	r5,zero,76f4 <_fflush_r+0xf0>
    76e0:	80801004 	addi	r2,r16,64
    76e4:	28800226 	beq	r5,r2,76f0 <_fflush_r+0xec>
    76e8:	9809883a 	mov	r4,r19
    76ec:	0007d340 	call	7d34 <_free_r>
    76f0:	80000c15 	stw	zero,48(r16)
    76f4:	0005883a 	mov	r2,zero
    76f8:	dfc00417 	ldw	ra,16(sp)
    76fc:	dcc00317 	ldw	r19,12(sp)
    7700:	dc800217 	ldw	r18,8(sp)
    7704:	dc400117 	ldw	r17,4(sp)
    7708:	dc000017 	ldw	r16,0(sp)
    770c:	dec00504 	addi	sp,sp,20
    7710:	f800283a 	ret
    7714:	84800417 	ldw	r18,16(r16)
    7718:	903ff626 	beq	r18,zero,76f4 <__alt_data_end+0xfffb1fc4>
    771c:	84400017 	ldw	r17,0(r16)
    7720:	108000cc 	andi	r2,r2,3
    7724:	84800015 	stw	r18,0(r16)
    7728:	8ca3c83a 	sub	r17,r17,r18
    772c:	10001526 	beq	r2,zero,7784 <_fflush_r+0x180>
    7730:	0005883a 	mov	r2,zero
    7734:	80800215 	stw	r2,8(r16)
    7738:	04400316 	blt	zero,r17,7748 <_fflush_r+0x144>
    773c:	003fed06 	br	76f4 <__alt_data_end+0xfffb1fc4>
    7740:	90a5883a 	add	r18,r18,r2
    7744:	047feb0e 	bge	zero,r17,76f4 <__alt_data_end+0xfffb1fc4>
    7748:	80800917 	ldw	r2,36(r16)
    774c:	81400717 	ldw	r5,28(r16)
    7750:	880f883a 	mov	r7,r17
    7754:	900d883a 	mov	r6,r18
    7758:	9809883a 	mov	r4,r19
    775c:	103ee83a 	callr	r2
    7760:	88a3c83a 	sub	r17,r17,r2
    7764:	00bff616 	blt	zero,r2,7740 <__alt_data_end+0xfffb2010>
    7768:	80c0030b 	ldhu	r3,12(r16)
    776c:	00bfffc4 	movi	r2,-1
    7770:	18c01014 	ori	r3,r3,64
    7774:	80c0030d 	sth	r3,12(r16)
    7778:	003fdf06 	br	76f8 <__alt_data_end+0xfffb1fc8>
    777c:	0007bc00 	call	7bc0 <__sinit>
    7780:	003fab06 	br	7630 <__alt_data_end+0xfffb1f00>
    7784:	80800517 	ldw	r2,20(r16)
    7788:	003fea06 	br	7734 <__alt_data_end+0xfffb2004>
    778c:	81400717 	ldw	r5,28(r16)
    7790:	000d883a 	mov	r6,zero
    7794:	9809883a 	mov	r4,r19
    7798:	01c00044 	movi	r7,1
    779c:	403ee83a 	callr	r8
    77a0:	100d883a 	mov	r6,r2
    77a4:	00bfffc4 	movi	r2,-1
    77a8:	30801326 	beq	r6,r2,77f8 <_fflush_r+0x1f4>
    77ac:	8080030b 	ldhu	r2,12(r16)
    77b0:	82000a17 	ldw	r8,40(r16)
    77b4:	003fb006 	br	7678 <__alt_data_end+0xfffb1f48>
    77b8:	80c00f17 	ldw	r3,60(r16)
    77bc:	00ffa716 	blt	zero,r3,765c <__alt_data_end+0xfffb1f2c>
    77c0:	003fcc06 	br	76f4 <__alt_data_end+0xfffb1fc4>
    77c4:	98c00017 	ldw	r3,0(r19)
    77c8:	183fb926 	beq	r3,zero,76b0 <__alt_data_end+0xfffb1f80>
    77cc:	01000744 	movi	r4,29
    77d0:	19000226 	beq	r3,r4,77dc <_fflush_r+0x1d8>
    77d4:	01000584 	movi	r4,22
    77d8:	1900101e 	bne	r3,r4,781c <_fflush_r+0x218>
    77dc:	8080030b 	ldhu	r2,12(r16)
    77e0:	80c00417 	ldw	r3,16(r16)
    77e4:	80000115 	stw	zero,4(r16)
    77e8:	10bdffcc 	andi	r2,r2,63487
    77ec:	8080030d 	sth	r2,12(r16)
    77f0:	80c00015 	stw	r3,0(r16)
    77f4:	003fb706 	br	76d4 <__alt_data_end+0xfffb1fa4>
    77f8:	98800017 	ldw	r2,0(r19)
    77fc:	103feb26 	beq	r2,zero,77ac <__alt_data_end+0xfffb207c>
    7800:	00c00744 	movi	r3,29
    7804:	10c00226 	beq	r2,r3,7810 <_fflush_r+0x20c>
    7808:	00c00584 	movi	r3,22
    780c:	10ffd61e 	bne	r2,r3,7768 <__alt_data_end+0xfffb2038>
    7810:	9c400015 	stw	r17,0(r19)
    7814:	0005883a 	mov	r2,zero
    7818:	003fb706 	br	76f8 <__alt_data_end+0xfffb1fc8>
    781c:	80c0030b 	ldhu	r3,12(r16)
    7820:	18c01014 	ori	r3,r3,64
    7824:	80c0030d 	sth	r3,12(r16)
    7828:	003fb306 	br	76f8 <__alt_data_end+0xfffb1fc8>

0000782c <fflush>:
    782c:	20000526 	beq	r4,zero,7844 <fflush+0x18>
    7830:	00800074 	movhi	r2,1
    7834:	10920904 	addi	r2,r2,18468
    7838:	200b883a 	mov	r5,r4
    783c:	11000017 	ldw	r4,0(r2)
    7840:	00076041 	jmpi	7604 <_fflush_r>
    7844:	00800074 	movhi	r2,1
    7848:	10920804 	addi	r2,r2,18464
    784c:	11000017 	ldw	r4,0(r2)
    7850:	01400034 	movhi	r5,0
    7854:	295d8104 	addi	r5,r5,30212
    7858:	00085801 	jmpi	8580 <_fwalk_reent>

0000785c <__fp_lock>:
    785c:	0005883a 	mov	r2,zero
    7860:	f800283a 	ret

00007864 <__fp_unlock>:
    7864:	0005883a 	mov	r2,zero
    7868:	f800283a 	ret

0000786c <_cleanup_r>:
    786c:	01400074 	movhi	r5,1
    7870:	296f6404 	addi	r5,r5,-17008
    7874:	00084c81 	jmpi	84c8 <_fwalk>

00007878 <__sinit.part.1>:
    7878:	defff604 	addi	sp,sp,-40
    787c:	00c00034 	movhi	r3,0
    7880:	dfc00915 	stw	ra,36(sp)
    7884:	df000815 	stw	fp,32(sp)
    7888:	ddc00715 	stw	r23,28(sp)
    788c:	dd800615 	stw	r22,24(sp)
    7890:	dd400515 	stw	r21,20(sp)
    7894:	dd000415 	stw	r20,16(sp)
    7898:	dcc00315 	stw	r19,12(sp)
    789c:	dc800215 	stw	r18,8(sp)
    78a0:	dc400115 	stw	r17,4(sp)
    78a4:	dc000015 	stw	r16,0(sp)
    78a8:	18de1b04 	addi	r3,r3,30828
    78ac:	24000117 	ldw	r16,4(r4)
    78b0:	20c00f15 	stw	r3,60(r4)
    78b4:	07000044 	movi	fp,1
    78b8:	00c000c4 	movi	r3,3
    78bc:	2080bb04 	addi	r2,r4,748
    78c0:	20c0b915 	stw	r3,740(r4)
    78c4:	27000e15 	stw	fp,56(r4)
    78c8:	2080ba15 	stw	r2,744(r4)
    78cc:	2000b815 	stw	zero,736(r4)
    78d0:	05c00204 	movi	r23,8
    78d4:	00800104 	movi	r2,4
    78d8:	2025883a 	mov	r18,r4
    78dc:	b80d883a 	mov	r6,r23
    78e0:	81001704 	addi	r4,r16,92
    78e4:	000b883a 	mov	r5,zero
    78e8:	80000015 	stw	zero,0(r16)
    78ec:	80000115 	stw	zero,4(r16)
    78f0:	80000215 	stw	zero,8(r16)
    78f4:	8080030d 	sth	r2,12(r16)
    78f8:	80001915 	stw	zero,100(r16)
    78fc:	8000038d 	sth	zero,14(r16)
    7900:	80000415 	stw	zero,16(r16)
    7904:	80000515 	stw	zero,20(r16)
    7908:	80000615 	stw	zero,24(r16)
    790c:	0008c4c0 	call	8c4c <memset>
    7910:	05800074 	movhi	r22,1
    7914:	94400217 	ldw	r17,8(r18)
    7918:	05400074 	movhi	r21,1
    791c:	05000074 	movhi	r20,1
    7920:	04c00074 	movhi	r19,1
    7924:	b5a8f304 	addi	r22,r22,-23604
    7928:	ad690a04 	addi	r21,r21,-23512
    792c:	a5292904 	addi	r20,r20,-23388
    7930:	9ce94004 	addi	r19,r19,-23296
    7934:	85800815 	stw	r22,32(r16)
    7938:	85400915 	stw	r21,36(r16)
    793c:	85000a15 	stw	r20,40(r16)
    7940:	84c00b15 	stw	r19,44(r16)
    7944:	84000715 	stw	r16,28(r16)
    7948:	00800284 	movi	r2,10
    794c:	89001704 	addi	r4,r17,92
    7950:	b80d883a 	mov	r6,r23
    7954:	000b883a 	mov	r5,zero
    7958:	88000015 	stw	zero,0(r17)
    795c:	88000115 	stw	zero,4(r17)
    7960:	88000215 	stw	zero,8(r17)
    7964:	8880030d 	sth	r2,12(r17)
    7968:	88001915 	stw	zero,100(r17)
    796c:	8f00038d 	sth	fp,14(r17)
    7970:	88000415 	stw	zero,16(r17)
    7974:	88000515 	stw	zero,20(r17)
    7978:	88000615 	stw	zero,24(r17)
    797c:	0008c4c0 	call	8c4c <memset>
    7980:	94000317 	ldw	r16,12(r18)
    7984:	00800484 	movi	r2,18
    7988:	8c400715 	stw	r17,28(r17)
    798c:	8d800815 	stw	r22,32(r17)
    7990:	8d400915 	stw	r21,36(r17)
    7994:	8d000a15 	stw	r20,40(r17)
    7998:	8cc00b15 	stw	r19,44(r17)
    799c:	8080030d 	sth	r2,12(r16)
    79a0:	00800084 	movi	r2,2
    79a4:	80000015 	stw	zero,0(r16)
    79a8:	80000115 	stw	zero,4(r16)
    79ac:	80000215 	stw	zero,8(r16)
    79b0:	80001915 	stw	zero,100(r16)
    79b4:	8080038d 	sth	r2,14(r16)
    79b8:	80000415 	stw	zero,16(r16)
    79bc:	80000515 	stw	zero,20(r16)
    79c0:	80000615 	stw	zero,24(r16)
    79c4:	81001704 	addi	r4,r16,92
    79c8:	000b883a 	mov	r5,zero
    79cc:	b80d883a 	mov	r6,r23
    79d0:	0008c4c0 	call	8c4c <memset>
    79d4:	84000715 	stw	r16,28(r16)
    79d8:	85800815 	stw	r22,32(r16)
    79dc:	85400915 	stw	r21,36(r16)
    79e0:	85000a15 	stw	r20,40(r16)
    79e4:	84c00b15 	stw	r19,44(r16)
    79e8:	dfc00917 	ldw	ra,36(sp)
    79ec:	df000817 	ldw	fp,32(sp)
    79f0:	ddc00717 	ldw	r23,28(sp)
    79f4:	dd800617 	ldw	r22,24(sp)
    79f8:	dd400517 	ldw	r21,20(sp)
    79fc:	dd000417 	ldw	r20,16(sp)
    7a00:	dcc00317 	ldw	r19,12(sp)
    7a04:	dc800217 	ldw	r18,8(sp)
    7a08:	dc400117 	ldw	r17,4(sp)
    7a0c:	dc000017 	ldw	r16,0(sp)
    7a10:	dec00a04 	addi	sp,sp,40
    7a14:	f800283a 	ret

00007a18 <__sfmoreglue>:
    7a18:	defffc04 	addi	sp,sp,-16
    7a1c:	dc800215 	stw	r18,8(sp)
    7a20:	2825883a 	mov	r18,r5
    7a24:	dc000015 	stw	r16,0(sp)
    7a28:	01401a04 	movi	r5,104
    7a2c:	2021883a 	mov	r16,r4
    7a30:	9009883a 	mov	r4,r18
    7a34:	dfc00315 	stw	ra,12(sp)
    7a38:	dc400115 	stw	r17,4(sp)
    7a3c:	000d1bc0 	call	d1bc <__mulsi3>
    7a40:	8009883a 	mov	r4,r16
    7a44:	11400304 	addi	r5,r2,12
    7a48:	1023883a 	mov	r17,r2
    7a4c:	00030200 	call	3020 <_malloc_r>
    7a50:	1021883a 	mov	r16,r2
    7a54:	10000726 	beq	r2,zero,7a74 <__sfmoreglue+0x5c>
    7a58:	11000304 	addi	r4,r2,12
    7a5c:	10000015 	stw	zero,0(r2)
    7a60:	14800115 	stw	r18,4(r2)
    7a64:	11000215 	stw	r4,8(r2)
    7a68:	000b883a 	mov	r5,zero
    7a6c:	880d883a 	mov	r6,r17
    7a70:	0008c4c0 	call	8c4c <memset>
    7a74:	8005883a 	mov	r2,r16
    7a78:	dfc00317 	ldw	ra,12(sp)
    7a7c:	dc800217 	ldw	r18,8(sp)
    7a80:	dc400117 	ldw	r17,4(sp)
    7a84:	dc000017 	ldw	r16,0(sp)
    7a88:	dec00404 	addi	sp,sp,16
    7a8c:	f800283a 	ret

00007a90 <__sfp>:
    7a90:	00800074 	movhi	r2,1
    7a94:	defffb04 	addi	sp,sp,-20
    7a98:	10920804 	addi	r2,r2,18464
    7a9c:	dc800215 	stw	r18,8(sp)
    7aa0:	14800017 	ldw	r18,0(r2)
    7aa4:	dcc00315 	stw	r19,12(sp)
    7aa8:	dfc00415 	stw	ra,16(sp)
    7aac:	90800e17 	ldw	r2,56(r18)
    7ab0:	dc400115 	stw	r17,4(sp)
    7ab4:	dc000015 	stw	r16,0(sp)
    7ab8:	2027883a 	mov	r19,r4
    7abc:	1000021e 	bne	r2,zero,7ac8 <__sfp+0x38>
    7ac0:	9009883a 	mov	r4,r18
    7ac4:	00078780 	call	7878 <__sinit.part.1>
    7ac8:	9480b804 	addi	r18,r18,736
    7acc:	047fffc4 	movi	r17,-1
    7ad0:	91400117 	ldw	r5,4(r18)
    7ad4:	94000217 	ldw	r16,8(r18)
    7ad8:	297fffc4 	addi	r5,r5,-1
    7adc:	28000a16 	blt	r5,zero,7b08 <__sfp+0x78>
    7ae0:	8080030f 	ldh	r2,12(r16)
    7ae4:	10000c26 	beq	r2,zero,7b18 <__sfp+0x88>
    7ae8:	80c01d04 	addi	r3,r16,116
    7aec:	00000206 	br	7af8 <__sfp+0x68>
    7af0:	18bfe60f 	ldh	r2,-104(r3)
    7af4:	10000826 	beq	r2,zero,7b18 <__sfp+0x88>
    7af8:	297fffc4 	addi	r5,r5,-1
    7afc:	1c3ffd04 	addi	r16,r3,-12
    7b00:	18c01a04 	addi	r3,r3,104
    7b04:	2c7ffa1e 	bne	r5,r17,7af0 <__alt_data_end+0xfffb23c0>
    7b08:	90800017 	ldw	r2,0(r18)
    7b0c:	10001d26 	beq	r2,zero,7b84 <__sfp+0xf4>
    7b10:	1025883a 	mov	r18,r2
    7b14:	003fee06 	br	7ad0 <__alt_data_end+0xfffb23a0>
    7b18:	00bfffc4 	movi	r2,-1
    7b1c:	8080038d 	sth	r2,14(r16)
    7b20:	00800044 	movi	r2,1
    7b24:	8080030d 	sth	r2,12(r16)
    7b28:	80001915 	stw	zero,100(r16)
    7b2c:	80000015 	stw	zero,0(r16)
    7b30:	80000215 	stw	zero,8(r16)
    7b34:	80000115 	stw	zero,4(r16)
    7b38:	80000415 	stw	zero,16(r16)
    7b3c:	80000515 	stw	zero,20(r16)
    7b40:	80000615 	stw	zero,24(r16)
    7b44:	81001704 	addi	r4,r16,92
    7b48:	000b883a 	mov	r5,zero
    7b4c:	01800204 	movi	r6,8
    7b50:	0008c4c0 	call	8c4c <memset>
    7b54:	8005883a 	mov	r2,r16
    7b58:	80000c15 	stw	zero,48(r16)
    7b5c:	80000d15 	stw	zero,52(r16)
    7b60:	80001115 	stw	zero,68(r16)
    7b64:	80001215 	stw	zero,72(r16)
    7b68:	dfc00417 	ldw	ra,16(sp)
    7b6c:	dcc00317 	ldw	r19,12(sp)
    7b70:	dc800217 	ldw	r18,8(sp)
    7b74:	dc400117 	ldw	r17,4(sp)
    7b78:	dc000017 	ldw	r16,0(sp)
    7b7c:	dec00504 	addi	sp,sp,20
    7b80:	f800283a 	ret
    7b84:	9809883a 	mov	r4,r19
    7b88:	01400104 	movi	r5,4
    7b8c:	0007a180 	call	7a18 <__sfmoreglue>
    7b90:	90800015 	stw	r2,0(r18)
    7b94:	103fde1e 	bne	r2,zero,7b10 <__alt_data_end+0xfffb23e0>
    7b98:	00800304 	movi	r2,12
    7b9c:	98800015 	stw	r2,0(r19)
    7ba0:	0005883a 	mov	r2,zero
    7ba4:	003ff006 	br	7b68 <__alt_data_end+0xfffb2438>

00007ba8 <_cleanup>:
    7ba8:	00800074 	movhi	r2,1
    7bac:	10920804 	addi	r2,r2,18464
    7bb0:	11000017 	ldw	r4,0(r2)
    7bb4:	01400074 	movhi	r5,1
    7bb8:	296f6404 	addi	r5,r5,-17008
    7bbc:	00084c81 	jmpi	84c8 <_fwalk>

00007bc0 <__sinit>:
    7bc0:	20800e17 	ldw	r2,56(r4)
    7bc4:	10000126 	beq	r2,zero,7bcc <__sinit+0xc>
    7bc8:	f800283a 	ret
    7bcc:	00078781 	jmpi	7878 <__sinit.part.1>

00007bd0 <__sfp_lock_acquire>:
    7bd0:	f800283a 	ret

00007bd4 <__sfp_lock_release>:
    7bd4:	f800283a 	ret

00007bd8 <__sinit_lock_acquire>:
    7bd8:	f800283a 	ret

00007bdc <__sinit_lock_release>:
    7bdc:	f800283a 	ret

00007be0 <__fp_lock_all>:
    7be0:	00800074 	movhi	r2,1
    7be4:	10920904 	addi	r2,r2,18468
    7be8:	11000017 	ldw	r4,0(r2)
    7bec:	01400034 	movhi	r5,0
    7bf0:	295e1704 	addi	r5,r5,30812
    7bf4:	00084c81 	jmpi	84c8 <_fwalk>

00007bf8 <__fp_unlock_all>:
    7bf8:	00800074 	movhi	r2,1
    7bfc:	10920904 	addi	r2,r2,18468
    7c00:	11000017 	ldw	r4,0(r2)
    7c04:	01400034 	movhi	r5,0
    7c08:	295e1904 	addi	r5,r5,30820
    7c0c:	00084c81 	jmpi	84c8 <_fwalk>

00007c10 <_malloc_trim_r>:
    7c10:	defffb04 	addi	sp,sp,-20
    7c14:	dcc00315 	stw	r19,12(sp)
    7c18:	04c00074 	movhi	r19,1
    7c1c:	dc800215 	stw	r18,8(sp)
    7c20:	dc400115 	stw	r17,4(sp)
    7c24:	dc000015 	stw	r16,0(sp)
    7c28:	dfc00415 	stw	ra,16(sp)
    7c2c:	2821883a 	mov	r16,r5
    7c30:	9ccb5b04 	addi	r19,r19,11628
    7c34:	2025883a 	mov	r18,r4
    7c38:	000ffc00 	call	ffc0 <__malloc_lock>
    7c3c:	98800217 	ldw	r2,8(r19)
    7c40:	14400117 	ldw	r17,4(r2)
    7c44:	00bfff04 	movi	r2,-4
    7c48:	88a2703a 	and	r17,r17,r2
    7c4c:	8c21c83a 	sub	r16,r17,r16
    7c50:	8403fbc4 	addi	r16,r16,4079
    7c54:	8020d33a 	srli	r16,r16,12
    7c58:	0083ffc4 	movi	r2,4095
    7c5c:	843fffc4 	addi	r16,r16,-1
    7c60:	8020933a 	slli	r16,r16,12
    7c64:	1400060e 	bge	r2,r16,7c80 <_malloc_trim_r+0x70>
    7c68:	9009883a 	mov	r4,r18
    7c6c:	000b883a 	mov	r5,zero
    7c70:	00039780 	call	3978 <_sbrk_r>
    7c74:	98c00217 	ldw	r3,8(r19)
    7c78:	1c47883a 	add	r3,r3,r17
    7c7c:	10c00a26 	beq	r2,r3,7ca8 <_malloc_trim_r+0x98>
    7c80:	9009883a 	mov	r4,r18
    7c84:	000ffe00 	call	ffe0 <__malloc_unlock>
    7c88:	0005883a 	mov	r2,zero
    7c8c:	dfc00417 	ldw	ra,16(sp)
    7c90:	dcc00317 	ldw	r19,12(sp)
    7c94:	dc800217 	ldw	r18,8(sp)
    7c98:	dc400117 	ldw	r17,4(sp)
    7c9c:	dc000017 	ldw	r16,0(sp)
    7ca0:	dec00504 	addi	sp,sp,20
    7ca4:	f800283a 	ret
    7ca8:	9009883a 	mov	r4,r18
    7cac:	040bc83a 	sub	r5,zero,r16
    7cb0:	00039780 	call	3978 <_sbrk_r>
    7cb4:	00ffffc4 	movi	r3,-1
    7cb8:	10c00d26 	beq	r2,r3,7cf0 <_malloc_trim_r+0xe0>
    7cbc:	00c00074 	movhi	r3,1
    7cc0:	18d90004 	addi	r3,r3,25600
    7cc4:	18800017 	ldw	r2,0(r3)
    7cc8:	99000217 	ldw	r4,8(r19)
    7ccc:	8c23c83a 	sub	r17,r17,r16
    7cd0:	8c400054 	ori	r17,r17,1
    7cd4:	1421c83a 	sub	r16,r2,r16
    7cd8:	24400115 	stw	r17,4(r4)
    7cdc:	9009883a 	mov	r4,r18
    7ce0:	1c000015 	stw	r16,0(r3)
    7ce4:	000ffe00 	call	ffe0 <__malloc_unlock>
    7ce8:	00800044 	movi	r2,1
    7cec:	003fe706 	br	7c8c <__alt_data_end+0xfffb255c>
    7cf0:	9009883a 	mov	r4,r18
    7cf4:	000b883a 	mov	r5,zero
    7cf8:	00039780 	call	3978 <_sbrk_r>
    7cfc:	99000217 	ldw	r4,8(r19)
    7d00:	014003c4 	movi	r5,15
    7d04:	1107c83a 	sub	r3,r2,r4
    7d08:	28ffdd0e 	bge	r5,r3,7c80 <__alt_data_end+0xfffb2550>
    7d0c:	01400074 	movhi	r5,1
    7d10:	29520604 	addi	r5,r5,18456
    7d14:	29400017 	ldw	r5,0(r5)
    7d18:	18c00054 	ori	r3,r3,1
    7d1c:	20c00115 	stw	r3,4(r4)
    7d20:	00c00074 	movhi	r3,1
    7d24:	1145c83a 	sub	r2,r2,r5
    7d28:	18d90004 	addi	r3,r3,25600
    7d2c:	18800015 	stw	r2,0(r3)
    7d30:	003fd306 	br	7c80 <__alt_data_end+0xfffb2550>

00007d34 <_free_r>:
    7d34:	28004c26 	beq	r5,zero,7e68 <_free_r+0x134>
    7d38:	defffd04 	addi	sp,sp,-12
    7d3c:	dc400115 	stw	r17,4(sp)
    7d40:	dc000015 	stw	r16,0(sp)
    7d44:	2023883a 	mov	r17,r4
    7d48:	2821883a 	mov	r16,r5
    7d4c:	dfc00215 	stw	ra,8(sp)
    7d50:	000ffc00 	call	ffc0 <__malloc_lock>
    7d54:	813fff17 	ldw	r4,-4(r16)
    7d58:	00bfff84 	movi	r2,-2
    7d5c:	02400074 	movhi	r9,1
    7d60:	81bffe04 	addi	r6,r16,-8
    7d64:	2084703a 	and	r2,r4,r2
    7d68:	4a4b5b04 	addi	r9,r9,11628
    7d6c:	308b883a 	add	r5,r6,r2
    7d70:	2a000117 	ldw	r8,4(r5)
    7d74:	49c00217 	ldw	r7,8(r9)
    7d78:	00ffff04 	movi	r3,-4
    7d7c:	40c6703a 	and	r3,r8,r3
    7d80:	39405326 	beq	r7,r5,7ed0 <_free_r+0x19c>
    7d84:	28c00115 	stw	r3,4(r5)
    7d88:	2100004c 	andi	r4,r4,1
    7d8c:	2000091e 	bne	r4,zero,7db4 <_free_r+0x80>
    7d90:	81fffe17 	ldw	r7,-8(r16)
    7d94:	4a000204 	addi	r8,r9,8
    7d98:	31cdc83a 	sub	r6,r6,r7
    7d9c:	31000217 	ldw	r4,8(r6)
    7da0:	11c5883a 	add	r2,r2,r7
    7da4:	22006126 	beq	r4,r8,7f2c <_free_r+0x1f8>
    7da8:	31c00317 	ldw	r7,12(r6)
    7dac:	21c00315 	stw	r7,12(r4)
    7db0:	39000215 	stw	r4,8(r7)
    7db4:	28c9883a 	add	r4,r5,r3
    7db8:	21c00117 	ldw	r7,4(r4)
    7dbc:	39c0004c 	andi	r7,r7,1
    7dc0:	38000d1e 	bne	r7,zero,7df8 <_free_r+0xc4>
    7dc4:	29000217 	ldw	r4,8(r5)
    7dc8:	10c5883a 	add	r2,r2,r3
    7dcc:	00c00074 	movhi	r3,1
    7dd0:	18cb5d04 	addi	r3,r3,11636
    7dd4:	20c07526 	beq	r4,r3,7fac <_free_r+0x278>
    7dd8:	29c00317 	ldw	r7,12(r5)
    7ddc:	11400054 	ori	r5,r2,1
    7de0:	3087883a 	add	r3,r6,r2
    7de4:	21c00315 	stw	r7,12(r4)
    7de8:	39000215 	stw	r4,8(r7)
    7dec:	31400115 	stw	r5,4(r6)
    7df0:	18800015 	stw	r2,0(r3)
    7df4:	00000406 	br	7e08 <_free_r+0xd4>
    7df8:	10c00054 	ori	r3,r2,1
    7dfc:	30c00115 	stw	r3,4(r6)
    7e00:	3087883a 	add	r3,r6,r2
    7e04:	18800015 	stw	r2,0(r3)
    7e08:	00c07fc4 	movi	r3,511
    7e0c:	18801736 	bltu	r3,r2,7e6c <_free_r+0x138>
    7e10:	1004d0fa 	srli	r2,r2,3
    7e14:	01400044 	movi	r5,1
    7e18:	49000117 	ldw	r4,4(r9)
    7e1c:	1087883a 	add	r3,r2,r2
    7e20:	18c7883a 	add	r3,r3,r3
    7e24:	1005d0ba 	srai	r2,r2,2
    7e28:	18c7883a 	add	r3,r3,r3
    7e2c:	1a47883a 	add	r3,r3,r9
    7e30:	19c00217 	ldw	r7,8(r3)
    7e34:	2884983a 	sll	r2,r5,r2
    7e38:	30c00315 	stw	r3,12(r6)
    7e3c:	31c00215 	stw	r7,8(r6)
    7e40:	1104b03a 	or	r2,r2,r4
    7e44:	19800215 	stw	r6,8(r3)
    7e48:	48800115 	stw	r2,4(r9)
    7e4c:	39800315 	stw	r6,12(r7)
    7e50:	8809883a 	mov	r4,r17
    7e54:	dfc00217 	ldw	ra,8(sp)
    7e58:	dc400117 	ldw	r17,4(sp)
    7e5c:	dc000017 	ldw	r16,0(sp)
    7e60:	dec00304 	addi	sp,sp,12
    7e64:	000ffe01 	jmpi	ffe0 <__malloc_unlock>
    7e68:	f800283a 	ret
    7e6c:	1006d27a 	srli	r3,r2,9
    7e70:	01000104 	movi	r4,4
    7e74:	20c04036 	bltu	r4,r3,7f78 <_free_r+0x244>
    7e78:	1006d1ba 	srli	r3,r2,6
    7e7c:	19400e04 	addi	r5,r3,56
    7e80:	2947883a 	add	r3,r5,r5
    7e84:	18c7883a 	add	r3,r3,r3
    7e88:	18c7883a 	add	r3,r3,r3
    7e8c:	1a49883a 	add	r4,r3,r9
    7e90:	20c00217 	ldw	r3,8(r4)
    7e94:	01c00074 	movhi	r7,1
    7e98:	39cb5b04 	addi	r7,r7,11628
    7e9c:	19003b26 	beq	r3,r4,7f8c <_free_r+0x258>
    7ea0:	01ffff04 	movi	r7,-4
    7ea4:	19400117 	ldw	r5,4(r3)
    7ea8:	29ca703a 	and	r5,r5,r7
    7eac:	1140022e 	bgeu	r2,r5,7eb8 <_free_r+0x184>
    7eb0:	18c00217 	ldw	r3,8(r3)
    7eb4:	20fffb1e 	bne	r4,r3,7ea4 <__alt_data_end+0xfffb2774>
    7eb8:	18800317 	ldw	r2,12(r3)
    7ebc:	30800315 	stw	r2,12(r6)
    7ec0:	30c00215 	stw	r3,8(r6)
    7ec4:	11800215 	stw	r6,8(r2)
    7ec8:	19800315 	stw	r6,12(r3)
    7ecc:	003fe006 	br	7e50 <__alt_data_end+0xfffb2720>
    7ed0:	2100004c 	andi	r4,r4,1
    7ed4:	1885883a 	add	r2,r3,r2
    7ed8:	2000071e 	bne	r4,zero,7ef8 <_free_r+0x1c4>
    7edc:	817ffe17 	ldw	r5,-8(r16)
    7ee0:	314dc83a 	sub	r6,r6,r5
    7ee4:	30c00317 	ldw	r3,12(r6)
    7ee8:	31000217 	ldw	r4,8(r6)
    7eec:	1145883a 	add	r2,r2,r5
    7ef0:	20c00315 	stw	r3,12(r4)
    7ef4:	19000215 	stw	r4,8(r3)
    7ef8:	10c00054 	ori	r3,r2,1
    7efc:	30c00115 	stw	r3,4(r6)
    7f00:	00c00074 	movhi	r3,1
    7f04:	18d20704 	addi	r3,r3,18460
    7f08:	18c00017 	ldw	r3,0(r3)
    7f0c:	49800215 	stw	r6,8(r9)
    7f10:	10ffcf36 	bltu	r2,r3,7e50 <__alt_data_end+0xfffb2720>
    7f14:	00800074 	movhi	r2,1
    7f18:	1098f404 	addi	r2,r2,25552
    7f1c:	11400017 	ldw	r5,0(r2)
    7f20:	8809883a 	mov	r4,r17
    7f24:	0007c100 	call	7c10 <_malloc_trim_r>
    7f28:	003fc906 	br	7e50 <__alt_data_end+0xfffb2720>
    7f2c:	28c9883a 	add	r4,r5,r3
    7f30:	21000117 	ldw	r4,4(r4)
    7f34:	2100004c 	andi	r4,r4,1
    7f38:	20000a1e 	bne	r4,zero,7f64 <_free_r+0x230>
    7f3c:	29000317 	ldw	r4,12(r5)
    7f40:	29400217 	ldw	r5,8(r5)
    7f44:	10c5883a 	add	r2,r2,r3
    7f48:	10c00054 	ori	r3,r2,1
    7f4c:	29000315 	stw	r4,12(r5)
    7f50:	21400215 	stw	r5,8(r4)
    7f54:	30c00115 	stw	r3,4(r6)
    7f58:	308d883a 	add	r6,r6,r2
    7f5c:	30800015 	stw	r2,0(r6)
    7f60:	003fbb06 	br	7e50 <__alt_data_end+0xfffb2720>
    7f64:	10c00054 	ori	r3,r2,1
    7f68:	30c00115 	stw	r3,4(r6)
    7f6c:	308d883a 	add	r6,r6,r2
    7f70:	30800015 	stw	r2,0(r6)
    7f74:	003fb606 	br	7e50 <__alt_data_end+0xfffb2720>
    7f78:	01000504 	movi	r4,20
    7f7c:	20c01436 	bltu	r4,r3,7fd0 <_free_r+0x29c>
    7f80:	194016c4 	addi	r5,r3,91
    7f84:	2947883a 	add	r3,r5,r5
    7f88:	003fbe06 	br	7e84 <__alt_data_end+0xfffb2754>
    7f8c:	280bd0ba 	srai	r5,r5,2
    7f90:	00800044 	movi	r2,1
    7f94:	39000117 	ldw	r4,4(r7)
    7f98:	114a983a 	sll	r5,r2,r5
    7f9c:	1805883a 	mov	r2,r3
    7fa0:	2908b03a 	or	r4,r5,r4
    7fa4:	39000115 	stw	r4,4(r7)
    7fa8:	003fc406 	br	7ebc <__alt_data_end+0xfffb278c>
    7fac:	49800515 	stw	r6,20(r9)
    7fb0:	49800415 	stw	r6,16(r9)
    7fb4:	10c00054 	ori	r3,r2,1
    7fb8:	31000315 	stw	r4,12(r6)
    7fbc:	31000215 	stw	r4,8(r6)
    7fc0:	30c00115 	stw	r3,4(r6)
    7fc4:	308d883a 	add	r6,r6,r2
    7fc8:	30800015 	stw	r2,0(r6)
    7fcc:	003fa006 	br	7e50 <__alt_data_end+0xfffb2720>
    7fd0:	01001504 	movi	r4,84
    7fd4:	20c00436 	bltu	r4,r3,7fe8 <_free_r+0x2b4>
    7fd8:	1006d33a 	srli	r3,r2,12
    7fdc:	19401b84 	addi	r5,r3,110
    7fe0:	2947883a 	add	r3,r5,r5
    7fe4:	003fa706 	br	7e84 <__alt_data_end+0xfffb2754>
    7fe8:	01005504 	movi	r4,340
    7fec:	20c00436 	bltu	r4,r3,8000 <_free_r+0x2cc>
    7ff0:	1006d3fa 	srli	r3,r2,15
    7ff4:	19401dc4 	addi	r5,r3,119
    7ff8:	2947883a 	add	r3,r5,r5
    7ffc:	003fa106 	br	7e84 <__alt_data_end+0xfffb2754>
    8000:	01015504 	movi	r4,1364
    8004:	20c00436 	bltu	r4,r3,8018 <_free_r+0x2e4>
    8008:	1006d4ba 	srli	r3,r2,18
    800c:	19401f04 	addi	r5,r3,124
    8010:	2947883a 	add	r3,r5,r5
    8014:	003f9b06 	br	7e84 <__alt_data_end+0xfffb2754>
    8018:	00c03f04 	movi	r3,252
    801c:	01401f84 	movi	r5,126
    8020:	003f9806 	br	7e84 <__alt_data_end+0xfffb2754>

00008024 <__sfvwrite_r>:
    8024:	30800217 	ldw	r2,8(r6)
    8028:	10004526 	beq	r2,zero,8140 <__sfvwrite_r+0x11c>
    802c:	28c0030b 	ldhu	r3,12(r5)
    8030:	defff404 	addi	sp,sp,-48
    8034:	dd400715 	stw	r21,28(sp)
    8038:	dcc00515 	stw	r19,20(sp)
    803c:	dc000215 	stw	r16,8(sp)
    8040:	dfc00b15 	stw	ra,44(sp)
    8044:	df000a15 	stw	fp,40(sp)
    8048:	ddc00915 	stw	r23,36(sp)
    804c:	dd800815 	stw	r22,32(sp)
    8050:	dd000615 	stw	r20,24(sp)
    8054:	dc800415 	stw	r18,16(sp)
    8058:	dc400315 	stw	r17,12(sp)
    805c:	1880020c 	andi	r2,r3,8
    8060:	2821883a 	mov	r16,r5
    8064:	202b883a 	mov	r21,r4
    8068:	3027883a 	mov	r19,r6
    806c:	10002526 	beq	r2,zero,8104 <__sfvwrite_r+0xe0>
    8070:	28800417 	ldw	r2,16(r5)
    8074:	10002326 	beq	r2,zero,8104 <__sfvwrite_r+0xe0>
    8078:	1880008c 	andi	r2,r3,2
    807c:	9c400017 	ldw	r17,0(r19)
    8080:	10003126 	beq	r2,zero,8148 <__sfvwrite_r+0x124>
    8084:	0029883a 	mov	r20,zero
    8088:	0025883a 	mov	r18,zero
    808c:	05810004 	movi	r22,1024
    8090:	a00d883a 	mov	r6,r20
    8094:	a809883a 	mov	r4,r21
    8098:	90002526 	beq	r18,zero,8130 <__sfvwrite_r+0x10c>
    809c:	900f883a 	mov	r7,r18
    80a0:	81400717 	ldw	r5,28(r16)
    80a4:	b480012e 	bgeu	r22,r18,80ac <__sfvwrite_r+0x88>
    80a8:	01c10004 	movi	r7,1024
    80ac:	80800917 	ldw	r2,36(r16)
    80b0:	103ee83a 	callr	r2
    80b4:	0080510e 	bge	zero,r2,81fc <__sfvwrite_r+0x1d8>
    80b8:	98c00217 	ldw	r3,8(r19)
    80bc:	a0a9883a 	add	r20,r20,r2
    80c0:	90a5c83a 	sub	r18,r18,r2
    80c4:	1885c83a 	sub	r2,r3,r2
    80c8:	98800215 	stw	r2,8(r19)
    80cc:	103ff01e 	bne	r2,zero,8090 <__alt_data_end+0xfffb2960>
    80d0:	0005883a 	mov	r2,zero
    80d4:	dfc00b17 	ldw	ra,44(sp)
    80d8:	df000a17 	ldw	fp,40(sp)
    80dc:	ddc00917 	ldw	r23,36(sp)
    80e0:	dd800817 	ldw	r22,32(sp)
    80e4:	dd400717 	ldw	r21,28(sp)
    80e8:	dd000617 	ldw	r20,24(sp)
    80ec:	dcc00517 	ldw	r19,20(sp)
    80f0:	dc800417 	ldw	r18,16(sp)
    80f4:	dc400317 	ldw	r17,12(sp)
    80f8:	dc000217 	ldw	r16,8(sp)
    80fc:	dec00c04 	addi	sp,sp,48
    8100:	f800283a 	ret
    8104:	a809883a 	mov	r4,r21
    8108:	800b883a 	mov	r5,r16
    810c:	0005b840 	call	5b84 <__swsetup_r>
    8110:	80c0030b 	ldhu	r3,12(r16)
    8114:	103fd826 	beq	r2,zero,8078 <__alt_data_end+0xfffb2948>
    8118:	18c01014 	ori	r3,r3,64
    811c:	80c0030d 	sth	r3,12(r16)
    8120:	00c00244 	movi	r3,9
    8124:	00bfffc4 	movi	r2,-1
    8128:	a8c00015 	stw	r3,0(r21)
    812c:	003fe906 	br	80d4 <__alt_data_end+0xfffb29a4>
    8130:	8d000017 	ldw	r20,0(r17)
    8134:	8c800117 	ldw	r18,4(r17)
    8138:	8c400204 	addi	r17,r17,8
    813c:	003fd406 	br	8090 <__alt_data_end+0xfffb2960>
    8140:	0005883a 	mov	r2,zero
    8144:	f800283a 	ret
    8148:	1880004c 	andi	r2,r3,1
    814c:	1000301e 	bne	r2,zero,8210 <__sfvwrite_r+0x1ec>
    8150:	002f883a 	mov	r23,zero
    8154:	0025883a 	mov	r18,zero
    8158:	90001c26 	beq	r18,zero,81cc <__sfvwrite_r+0x1a8>
    815c:	1880800c 	andi	r2,r3,512
    8160:	85000217 	ldw	r20,8(r16)
    8164:	10006c26 	beq	r2,zero,8318 <__sfvwrite_r+0x2f4>
    8168:	a02d883a 	mov	r22,r20
    816c:	95008536 	bltu	r18,r20,8384 <__sfvwrite_r+0x360>
    8170:	1881200c 	andi	r2,r3,1152
    8174:	10009d1e 	bne	r2,zero,83ec <__sfvwrite_r+0x3c8>
    8178:	81000017 	ldw	r4,0(r16)
    817c:	a039883a 	mov	fp,r20
    8180:	9029883a 	mov	r20,r18
    8184:	b80b883a 	mov	r5,r23
    8188:	b00d883a 	mov	r6,r22
    818c:	0008af00 	call	8af0 <memmove>
    8190:	80c00217 	ldw	r3,8(r16)
    8194:	81000017 	ldw	r4,0(r16)
    8198:	9005883a 	mov	r2,r18
    819c:	1f39c83a 	sub	fp,r3,fp
    81a0:	258f883a 	add	r7,r4,r22
    81a4:	87000215 	stw	fp,8(r16)
    81a8:	81c00015 	stw	r7,0(r16)
    81ac:	98c00217 	ldw	r3,8(r19)
    81b0:	b8af883a 	add	r23,r23,r2
    81b4:	90a5c83a 	sub	r18,r18,r2
    81b8:	1d05c83a 	sub	r2,r3,r20
    81bc:	98800215 	stw	r2,8(r19)
    81c0:	103fc326 	beq	r2,zero,80d0 <__alt_data_end+0xfffb29a0>
    81c4:	80c0030b 	ldhu	r3,12(r16)
    81c8:	903fe41e 	bne	r18,zero,815c <__alt_data_end+0xfffb2a2c>
    81cc:	8dc00017 	ldw	r23,0(r17)
    81d0:	8c800117 	ldw	r18,4(r17)
    81d4:	8c400204 	addi	r17,r17,8
    81d8:	003fdf06 	br	8158 <__alt_data_end+0xfffb2a28>
    81dc:	0009db80 	call	9db8 <_realloc_r>
    81e0:	102d883a 	mov	r22,r2
    81e4:	1000a01e 	bne	r2,zero,8468 <__sfvwrite_r+0x444>
    81e8:	81400417 	ldw	r5,16(r16)
    81ec:	a809883a 	mov	r4,r21
    81f0:	0007d340 	call	7d34 <_free_r>
    81f4:	00800304 	movi	r2,12
    81f8:	a8800015 	stw	r2,0(r21)
    81fc:	80c0030b 	ldhu	r3,12(r16)
    8200:	00bfffc4 	movi	r2,-1
    8204:	18c01014 	ori	r3,r3,64
    8208:	80c0030d 	sth	r3,12(r16)
    820c:	003fb106 	br	80d4 <__alt_data_end+0xfffb29a4>
    8210:	0029883a 	mov	r20,zero
    8214:	0011883a 	mov	r8,zero
    8218:	0039883a 	mov	fp,zero
    821c:	0025883a 	mov	r18,zero
    8220:	90001f26 	beq	r18,zero,82a0 <__sfvwrite_r+0x27c>
    8224:	40006826 	beq	r8,zero,83c8 <__sfvwrite_r+0x3a4>
    8228:	a02f883a 	mov	r23,r20
    822c:	9500012e 	bgeu	r18,r20,8234 <__sfvwrite_r+0x210>
    8230:	902f883a 	mov	r23,r18
    8234:	81000017 	ldw	r4,0(r16)
    8238:	80800417 	ldw	r2,16(r16)
    823c:	b82d883a 	mov	r22,r23
    8240:	81800217 	ldw	r6,8(r16)
    8244:	81c00517 	ldw	r7,20(r16)
    8248:	1100022e 	bgeu	r2,r4,8254 <__sfvwrite_r+0x230>
    824c:	31c7883a 	add	r3,r6,r7
    8250:	1dc01816 	blt	r3,r23,82b4 <__sfvwrite_r+0x290>
    8254:	b9c03f16 	blt	r23,r7,8354 <__sfvwrite_r+0x330>
    8258:	80800917 	ldw	r2,36(r16)
    825c:	81400717 	ldw	r5,28(r16)
    8260:	a809883a 	mov	r4,r21
    8264:	da000115 	stw	r8,4(sp)
    8268:	e00d883a 	mov	r6,fp
    826c:	103ee83a 	callr	r2
    8270:	102d883a 	mov	r22,r2
    8274:	da000117 	ldw	r8,4(sp)
    8278:	00bfe00e 	bge	zero,r2,81fc <__alt_data_end+0xfffb2acc>
    827c:	a5a9c83a 	sub	r20,r20,r22
    8280:	a0001f26 	beq	r20,zero,8300 <__sfvwrite_r+0x2dc>
    8284:	98800217 	ldw	r2,8(r19)
    8288:	e5b9883a 	add	fp,fp,r22
    828c:	95a5c83a 	sub	r18,r18,r22
    8290:	15adc83a 	sub	r22,r2,r22
    8294:	9d800215 	stw	r22,8(r19)
    8298:	b03f8d26 	beq	r22,zero,80d0 <__alt_data_end+0xfffb29a0>
    829c:	903fe11e 	bne	r18,zero,8224 <__alt_data_end+0xfffb2af4>
    82a0:	8f000017 	ldw	fp,0(r17)
    82a4:	8c800117 	ldw	r18,4(r17)
    82a8:	0011883a 	mov	r8,zero
    82ac:	8c400204 	addi	r17,r17,8
    82b0:	003fdb06 	br	8220 <__alt_data_end+0xfffb2af0>
    82b4:	180d883a 	mov	r6,r3
    82b8:	e00b883a 	mov	r5,fp
    82bc:	da000115 	stw	r8,4(sp)
    82c0:	d8c00015 	stw	r3,0(sp)
    82c4:	0008af00 	call	8af0 <memmove>
    82c8:	d8c00017 	ldw	r3,0(sp)
    82cc:	80800017 	ldw	r2,0(r16)
    82d0:	a809883a 	mov	r4,r21
    82d4:	800b883a 	mov	r5,r16
    82d8:	10c5883a 	add	r2,r2,r3
    82dc:	80800015 	stw	r2,0(r16)
    82e0:	d8c00015 	stw	r3,0(sp)
    82e4:	00076040 	call	7604 <_fflush_r>
    82e8:	d8c00017 	ldw	r3,0(sp)
    82ec:	da000117 	ldw	r8,4(sp)
    82f0:	103fc21e 	bne	r2,zero,81fc <__alt_data_end+0xfffb2acc>
    82f4:	182d883a 	mov	r22,r3
    82f8:	a5a9c83a 	sub	r20,r20,r22
    82fc:	a03fe11e 	bne	r20,zero,8284 <__alt_data_end+0xfffb2b54>
    8300:	a809883a 	mov	r4,r21
    8304:	800b883a 	mov	r5,r16
    8308:	00076040 	call	7604 <_fflush_r>
    830c:	103fbb1e 	bne	r2,zero,81fc <__alt_data_end+0xfffb2acc>
    8310:	0011883a 	mov	r8,zero
    8314:	003fdb06 	br	8284 <__alt_data_end+0xfffb2b54>
    8318:	81000017 	ldw	r4,0(r16)
    831c:	80800417 	ldw	r2,16(r16)
    8320:	1100012e 	bgeu	r2,r4,8328 <__sfvwrite_r+0x304>
    8324:	a4805a36 	bltu	r20,r18,8490 <__sfvwrite_r+0x46c>
    8328:	81c00517 	ldw	r7,20(r16)
    832c:	91c01a36 	bltu	r18,r7,8398 <__sfvwrite_r+0x374>
    8330:	80800917 	ldw	r2,36(r16)
    8334:	81400717 	ldw	r5,28(r16)
    8338:	a809883a 	mov	r4,r21
    833c:	b80d883a 	mov	r6,r23
    8340:	103ee83a 	callr	r2
    8344:	1029883a 	mov	r20,r2
    8348:	00bfac0e 	bge	zero,r2,81fc <__alt_data_end+0xfffb2acc>
    834c:	a005883a 	mov	r2,r20
    8350:	003f9606 	br	81ac <__alt_data_end+0xfffb2a7c>
    8354:	b80d883a 	mov	r6,r23
    8358:	e00b883a 	mov	r5,fp
    835c:	da000115 	stw	r8,4(sp)
    8360:	0008af00 	call	8af0 <memmove>
    8364:	80800217 	ldw	r2,8(r16)
    8368:	80c00017 	ldw	r3,0(r16)
    836c:	da000117 	ldw	r8,4(sp)
    8370:	15c5c83a 	sub	r2,r2,r23
    8374:	1def883a 	add	r23,r3,r23
    8378:	80800215 	stw	r2,8(r16)
    837c:	85c00015 	stw	r23,0(r16)
    8380:	003fbe06 	br	827c <__alt_data_end+0xfffb2b4c>
    8384:	81000017 	ldw	r4,0(r16)
    8388:	9039883a 	mov	fp,r18
    838c:	9029883a 	mov	r20,r18
    8390:	902d883a 	mov	r22,r18
    8394:	003f7b06 	br	8184 <__alt_data_end+0xfffb2a54>
    8398:	b80b883a 	mov	r5,r23
    839c:	900d883a 	mov	r6,r18
    83a0:	0008af00 	call	8af0 <memmove>
    83a4:	80c00217 	ldw	r3,8(r16)
    83a8:	80800017 	ldw	r2,0(r16)
    83ac:	9029883a 	mov	r20,r18
    83b0:	1c87c83a 	sub	r3,r3,r18
    83b4:	1485883a 	add	r2,r2,r18
    83b8:	80800015 	stw	r2,0(r16)
    83bc:	80c00215 	stw	r3,8(r16)
    83c0:	9005883a 	mov	r2,r18
    83c4:	003f7906 	br	81ac <__alt_data_end+0xfffb2a7c>
    83c8:	e009883a 	mov	r4,fp
    83cc:	01400284 	movi	r5,10
    83d0:	900d883a 	mov	r6,r18
    83d4:	00088d00 	call	88d0 <memchr>
    83d8:	10003826 	beq	r2,zero,84bc <__sfvwrite_r+0x498>
    83dc:	10800044 	addi	r2,r2,1
    83e0:	1729c83a 	sub	r20,r2,fp
    83e4:	02000044 	movi	r8,1
    83e8:	003f8f06 	br	8228 <__alt_data_end+0xfffb2af8>
    83ec:	80800517 	ldw	r2,20(r16)
    83f0:	81400417 	ldw	r5,16(r16)
    83f4:	87000017 	ldw	fp,0(r16)
    83f8:	10a9883a 	add	r20,r2,r2
    83fc:	a085883a 	add	r2,r20,r2
    8400:	1028d7fa 	srli	r20,r2,31
    8404:	e179c83a 	sub	fp,fp,r5
    8408:	e1000044 	addi	r4,fp,1
    840c:	a085883a 	add	r2,r20,r2
    8410:	1029d07a 	srai	r20,r2,1
    8414:	2485883a 	add	r2,r4,r18
    8418:	a00d883a 	mov	r6,r20
    841c:	a080022e 	bgeu	r20,r2,8428 <__sfvwrite_r+0x404>
    8420:	1029883a 	mov	r20,r2
    8424:	100d883a 	mov	r6,r2
    8428:	18c1000c 	andi	r3,r3,1024
    842c:	a809883a 	mov	r4,r21
    8430:	183f6a26 	beq	r3,zero,81dc <__alt_data_end+0xfffb2aac>
    8434:	300b883a 	mov	r5,r6
    8438:	00030200 	call	3020 <_malloc_r>
    843c:	102d883a 	mov	r22,r2
    8440:	103f6c26 	beq	r2,zero,81f4 <__alt_data_end+0xfffb2ac4>
    8444:	81400417 	ldw	r5,16(r16)
    8448:	1009883a 	mov	r4,r2
    844c:	e00d883a 	mov	r6,fp
    8450:	00089b80 	call	89b8 <memcpy>
    8454:	8080030b 	ldhu	r2,12(r16)
    8458:	00fedfc4 	movi	r3,-1153
    845c:	10c4703a 	and	r2,r2,r3
    8460:	10802014 	ori	r2,r2,128
    8464:	8080030d 	sth	r2,12(r16)
    8468:	b709883a 	add	r4,r22,fp
    846c:	a707c83a 	sub	r3,r20,fp
    8470:	85800415 	stw	r22,16(r16)
    8474:	85000515 	stw	r20,20(r16)
    8478:	81000015 	stw	r4,0(r16)
    847c:	9039883a 	mov	fp,r18
    8480:	80c00215 	stw	r3,8(r16)
    8484:	9029883a 	mov	r20,r18
    8488:	902d883a 	mov	r22,r18
    848c:	003f3d06 	br	8184 <__alt_data_end+0xfffb2a54>
    8490:	b80b883a 	mov	r5,r23
    8494:	a00d883a 	mov	r6,r20
    8498:	0008af00 	call	8af0 <memmove>
    849c:	80800017 	ldw	r2,0(r16)
    84a0:	a809883a 	mov	r4,r21
    84a4:	800b883a 	mov	r5,r16
    84a8:	1505883a 	add	r2,r2,r20
    84ac:	80800015 	stw	r2,0(r16)
    84b0:	00076040 	call	7604 <_fflush_r>
    84b4:	103fa526 	beq	r2,zero,834c <__alt_data_end+0xfffb2c1c>
    84b8:	003f5006 	br	81fc <__alt_data_end+0xfffb2acc>
    84bc:	95000044 	addi	r20,r18,1
    84c0:	02000044 	movi	r8,1
    84c4:	003f5806 	br	8228 <__alt_data_end+0xfffb2af8>

000084c8 <_fwalk>:
    84c8:	defff804 	addi	sp,sp,-32
    84cc:	dd400515 	stw	r21,20(sp)
    84d0:	2540b804 	addi	r21,r4,736
    84d4:	dd800615 	stw	r22,24(sp)
    84d8:	dd000415 	stw	r20,16(sp)
    84dc:	dfc00715 	stw	ra,28(sp)
    84e0:	dcc00315 	stw	r19,12(sp)
    84e4:	dc800215 	stw	r18,8(sp)
    84e8:	dc400115 	stw	r17,4(sp)
    84ec:	dc000015 	stw	r16,0(sp)
    84f0:	2829883a 	mov	r20,r5
    84f4:	002d883a 	mov	r22,zero
    84f8:	0007bd00 	call	7bd0 <__sfp_lock_acquire>
    84fc:	a8001426 	beq	r21,zero,8550 <_fwalk+0x88>
    8500:	04ffffc4 	movi	r19,-1
    8504:	ac400117 	ldw	r17,4(r21)
    8508:	ac800217 	ldw	r18,8(r21)
    850c:	8c7fffc4 	addi	r17,r17,-1
    8510:	88000d16 	blt	r17,zero,8548 <_fwalk+0x80>
    8514:	94000304 	addi	r16,r18,12
    8518:	94800384 	addi	r18,r18,14
    851c:	80c0000f 	ldh	r3,0(r16)
    8520:	8c7fffc4 	addi	r17,r17,-1
    8524:	813ffd04 	addi	r4,r16,-12
    8528:	18000426 	beq	r3,zero,853c <_fwalk+0x74>
    852c:	90c0000f 	ldh	r3,0(r18)
    8530:	1cc00226 	beq	r3,r19,853c <_fwalk+0x74>
    8534:	a03ee83a 	callr	r20
    8538:	b0acb03a 	or	r22,r22,r2
    853c:	84001a04 	addi	r16,r16,104
    8540:	94801a04 	addi	r18,r18,104
    8544:	8cfff51e 	bne	r17,r19,851c <__alt_data_end+0xfffb2dec>
    8548:	ad400017 	ldw	r21,0(r21)
    854c:	a83fed1e 	bne	r21,zero,8504 <__alt_data_end+0xfffb2dd4>
    8550:	0007bd40 	call	7bd4 <__sfp_lock_release>
    8554:	b005883a 	mov	r2,r22
    8558:	dfc00717 	ldw	ra,28(sp)
    855c:	dd800617 	ldw	r22,24(sp)
    8560:	dd400517 	ldw	r21,20(sp)
    8564:	dd000417 	ldw	r20,16(sp)
    8568:	dcc00317 	ldw	r19,12(sp)
    856c:	dc800217 	ldw	r18,8(sp)
    8570:	dc400117 	ldw	r17,4(sp)
    8574:	dc000017 	ldw	r16,0(sp)
    8578:	dec00804 	addi	sp,sp,32
    857c:	f800283a 	ret

00008580 <_fwalk_reent>:
    8580:	defff804 	addi	sp,sp,-32
    8584:	dd400515 	stw	r21,20(sp)
    8588:	2540b804 	addi	r21,r4,736
    858c:	dd800615 	stw	r22,24(sp)
    8590:	dd000415 	stw	r20,16(sp)
    8594:	dcc00315 	stw	r19,12(sp)
    8598:	dfc00715 	stw	ra,28(sp)
    859c:	dc800215 	stw	r18,8(sp)
    85a0:	dc400115 	stw	r17,4(sp)
    85a4:	dc000015 	stw	r16,0(sp)
    85a8:	2027883a 	mov	r19,r4
    85ac:	2829883a 	mov	r20,r5
    85b0:	002d883a 	mov	r22,zero
    85b4:	0007bd00 	call	7bd0 <__sfp_lock_acquire>
    85b8:	a8001326 	beq	r21,zero,8608 <_fwalk_reent+0x88>
    85bc:	04bfffc4 	movi	r18,-1
    85c0:	ac400117 	ldw	r17,4(r21)
    85c4:	ac000217 	ldw	r16,8(r21)
    85c8:	8c7fffc4 	addi	r17,r17,-1
    85cc:	88000c16 	blt	r17,zero,8600 <_fwalk_reent+0x80>
    85d0:	84000304 	addi	r16,r16,12
    85d4:	80c0000f 	ldh	r3,0(r16)
    85d8:	8c7fffc4 	addi	r17,r17,-1
    85dc:	817ffd04 	addi	r5,r16,-12
    85e0:	18000526 	beq	r3,zero,85f8 <_fwalk_reent+0x78>
    85e4:	80c0008f 	ldh	r3,2(r16)
    85e8:	9809883a 	mov	r4,r19
    85ec:	1c800226 	beq	r3,r18,85f8 <_fwalk_reent+0x78>
    85f0:	a03ee83a 	callr	r20
    85f4:	b0acb03a 	or	r22,r22,r2
    85f8:	84001a04 	addi	r16,r16,104
    85fc:	8cbff51e 	bne	r17,r18,85d4 <__alt_data_end+0xfffb2ea4>
    8600:	ad400017 	ldw	r21,0(r21)
    8604:	a83fee1e 	bne	r21,zero,85c0 <__alt_data_end+0xfffb2e90>
    8608:	0007bd40 	call	7bd4 <__sfp_lock_release>
    860c:	b005883a 	mov	r2,r22
    8610:	dfc00717 	ldw	ra,28(sp)
    8614:	dd800617 	ldw	r22,24(sp)
    8618:	dd400517 	ldw	r21,20(sp)
    861c:	dd000417 	ldw	r20,16(sp)
    8620:	dcc00317 	ldw	r19,12(sp)
    8624:	dc800217 	ldw	r18,8(sp)
    8628:	dc400117 	ldw	r17,4(sp)
    862c:	dc000017 	ldw	r16,0(sp)
    8630:	dec00804 	addi	sp,sp,32
    8634:	f800283a 	ret

00008638 <_setlocale_r>:
    8638:	30001b26 	beq	r6,zero,86a8 <_setlocale_r+0x70>
    863c:	01400074 	movhi	r5,1
    8640:	defffe04 	addi	sp,sp,-8
    8644:	294aa004 	addi	r5,r5,10880
    8648:	3009883a 	mov	r4,r6
    864c:	dc000015 	stw	r16,0(sp)
    8650:	dfc00115 	stw	ra,4(sp)
    8654:	3021883a 	mov	r16,r6
    8658:	000a5080 	call	a508 <strcmp>
    865c:	1000061e 	bne	r2,zero,8678 <_setlocale_r+0x40>
    8660:	00800074 	movhi	r2,1
    8664:	108a9f04 	addi	r2,r2,10876
    8668:	dfc00117 	ldw	ra,4(sp)
    866c:	dc000017 	ldw	r16,0(sp)
    8670:	dec00204 	addi	sp,sp,8
    8674:	f800283a 	ret
    8678:	01400074 	movhi	r5,1
    867c:	294a9f04 	addi	r5,r5,10876
    8680:	8009883a 	mov	r4,r16
    8684:	000a5080 	call	a508 <strcmp>
    8688:	103ff526 	beq	r2,zero,8660 <__alt_data_end+0xfffb2f30>
    868c:	01400074 	movhi	r5,1
    8690:	294a8a04 	addi	r5,r5,10792
    8694:	8009883a 	mov	r4,r16
    8698:	000a5080 	call	a508 <strcmp>
    869c:	103ff026 	beq	r2,zero,8660 <__alt_data_end+0xfffb2f30>
    86a0:	0005883a 	mov	r2,zero
    86a4:	003ff006 	br	8668 <__alt_data_end+0xfffb2f38>
    86a8:	00800074 	movhi	r2,1
    86ac:	108a9f04 	addi	r2,r2,10876
    86b0:	f800283a 	ret

000086b4 <__locale_charset>:
    86b4:	00800074 	movhi	r2,1
    86b8:	108d6e04 	addi	r2,r2,13752
    86bc:	f800283a 	ret

000086c0 <__locale_mb_cur_max>:
    86c0:	00800074 	movhi	r2,1
    86c4:	10920a04 	addi	r2,r2,18472
    86c8:	10800017 	ldw	r2,0(r2)
    86cc:	f800283a 	ret

000086d0 <__locale_msgcharset>:
    86d0:	00800074 	movhi	r2,1
    86d4:	108d6604 	addi	r2,r2,13720
    86d8:	f800283a 	ret

000086dc <__locale_cjk_lang>:
    86dc:	0005883a 	mov	r2,zero
    86e0:	f800283a 	ret

000086e4 <_localeconv_r>:
    86e4:	00800074 	movhi	r2,1
    86e8:	108d7604 	addi	r2,r2,13784
    86ec:	f800283a 	ret

000086f0 <setlocale>:
    86f0:	00c00074 	movhi	r3,1
    86f4:	18d20904 	addi	r3,r3,18468
    86f8:	2005883a 	mov	r2,r4
    86fc:	19000017 	ldw	r4,0(r3)
    8700:	280d883a 	mov	r6,r5
    8704:	100b883a 	mov	r5,r2
    8708:	00086381 	jmpi	8638 <_setlocale_r>

0000870c <localeconv>:
    870c:	00800074 	movhi	r2,1
    8710:	108d7604 	addi	r2,r2,13784
    8714:	f800283a 	ret

00008718 <__smakebuf_r>:
    8718:	2880030b 	ldhu	r2,12(r5)
    871c:	10c0008c 	andi	r3,r2,2
    8720:	1800401e 	bne	r3,zero,8824 <__smakebuf_r+0x10c>
    8724:	deffec04 	addi	sp,sp,-80
    8728:	dc000f15 	stw	r16,60(sp)
    872c:	2821883a 	mov	r16,r5
    8730:	2940038f 	ldh	r5,14(r5)
    8734:	dc401015 	stw	r17,64(sp)
    8738:	dfc01315 	stw	ra,76(sp)
    873c:	dcc01215 	stw	r19,72(sp)
    8740:	dc801115 	stw	r18,68(sp)
    8744:	2023883a 	mov	r17,r4
    8748:	28001b16 	blt	r5,zero,87b8 <__smakebuf_r+0xa0>
    874c:	d80d883a 	mov	r6,sp
    8750:	000bf800 	call	bf80 <_fstat_r>
    8754:	10001716 	blt	r2,zero,87b4 <__smakebuf_r+0x9c>
    8758:	d8800117 	ldw	r2,4(sp)
    875c:	00e00014 	movui	r3,32768
    8760:	10bc000c 	andi	r2,r2,61440
    8764:	10c03726 	beq	r2,r3,8844 <__smakebuf_r+0x12c>
    8768:	80c0030b 	ldhu	r3,12(r16)
    876c:	18c20014 	ori	r3,r3,2048
    8770:	80c0030d 	sth	r3,12(r16)
    8774:	00c80004 	movi	r3,8192
    8778:	10c03c1e 	bne	r2,r3,886c <__smakebuf_r+0x154>
    877c:	8140038f 	ldh	r5,14(r16)
    8780:	8809883a 	mov	r4,r17
    8784:	000bfd80 	call	bfd8 <_isatty_r>
    8788:	10004e26 	beq	r2,zero,88c4 <__smakebuf_r+0x1ac>
    878c:	8080030b 	ldhu	r2,12(r16)
    8790:	04c00044 	movi	r19,1
    8794:	80c010c4 	addi	r3,r16,67
    8798:	14c4b03a 	or	r2,r2,r19
    879c:	8080030d 	sth	r2,12(r16)
    87a0:	80c00015 	stw	r3,0(r16)
    87a4:	80c00415 	stw	r3,16(r16)
    87a8:	84c00515 	stw	r19,20(r16)
    87ac:	04810004 	movi	r18,1024
    87b0:	00000706 	br	87d0 <__smakebuf_r+0xb8>
    87b4:	8080030b 	ldhu	r2,12(r16)
    87b8:	10c0200c 	andi	r3,r2,128
    87bc:	18001f1e 	bne	r3,zero,883c <__smakebuf_r+0x124>
    87c0:	04810004 	movi	r18,1024
    87c4:	10820014 	ori	r2,r2,2048
    87c8:	8080030d 	sth	r2,12(r16)
    87cc:	0027883a 	mov	r19,zero
    87d0:	8809883a 	mov	r4,r17
    87d4:	900b883a 	mov	r5,r18
    87d8:	00030200 	call	3020 <_malloc_r>
    87dc:	10002e26 	beq	r2,zero,8898 <__smakebuf_r+0x180>
    87e0:	80c0030b 	ldhu	r3,12(r16)
    87e4:	01000034 	movhi	r4,0
    87e8:	211e1b04 	addi	r4,r4,30828
    87ec:	89000f15 	stw	r4,60(r17)
    87f0:	18c02014 	ori	r3,r3,128
    87f4:	80c0030d 	sth	r3,12(r16)
    87f8:	80800015 	stw	r2,0(r16)
    87fc:	80800415 	stw	r2,16(r16)
    8800:	84800515 	stw	r18,20(r16)
    8804:	98001c1e 	bne	r19,zero,8878 <__smakebuf_r+0x160>
    8808:	dfc01317 	ldw	ra,76(sp)
    880c:	dcc01217 	ldw	r19,72(sp)
    8810:	dc801117 	ldw	r18,68(sp)
    8814:	dc401017 	ldw	r17,64(sp)
    8818:	dc000f17 	ldw	r16,60(sp)
    881c:	dec01404 	addi	sp,sp,80
    8820:	f800283a 	ret
    8824:	288010c4 	addi	r2,r5,67
    8828:	28800015 	stw	r2,0(r5)
    882c:	28800415 	stw	r2,16(r5)
    8830:	00800044 	movi	r2,1
    8834:	28800515 	stw	r2,20(r5)
    8838:	f800283a 	ret
    883c:	04801004 	movi	r18,64
    8840:	003fe006 	br	87c4 <__alt_data_end+0xfffb3094>
    8844:	81000a17 	ldw	r4,40(r16)
    8848:	00c00074 	movhi	r3,1
    884c:	18e92904 	addi	r3,r3,-23388
    8850:	20ffc51e 	bne	r4,r3,8768 <__alt_data_end+0xfffb3038>
    8854:	80c0030b 	ldhu	r3,12(r16)
    8858:	01010004 	movi	r4,1024
    885c:	81001315 	stw	r4,76(r16)
    8860:	1906b03a 	or	r3,r3,r4
    8864:	80c0030d 	sth	r3,12(r16)
    8868:	003fc206 	br	8774 <__alt_data_end+0xfffb3044>
    886c:	0027883a 	mov	r19,zero
    8870:	04810004 	movi	r18,1024
    8874:	003fd606 	br	87d0 <__alt_data_end+0xfffb30a0>
    8878:	8140038f 	ldh	r5,14(r16)
    887c:	8809883a 	mov	r4,r17
    8880:	000bfd80 	call	bfd8 <_isatty_r>
    8884:	103fe026 	beq	r2,zero,8808 <__alt_data_end+0xfffb30d8>
    8888:	8080030b 	ldhu	r2,12(r16)
    888c:	10800054 	ori	r2,r2,1
    8890:	8080030d 	sth	r2,12(r16)
    8894:	003fdc06 	br	8808 <__alt_data_end+0xfffb30d8>
    8898:	8080030b 	ldhu	r2,12(r16)
    889c:	10c0800c 	andi	r3,r2,512
    88a0:	183fd91e 	bne	r3,zero,8808 <__alt_data_end+0xfffb30d8>
    88a4:	10800094 	ori	r2,r2,2
    88a8:	80c010c4 	addi	r3,r16,67
    88ac:	8080030d 	sth	r2,12(r16)
    88b0:	00800044 	movi	r2,1
    88b4:	80c00015 	stw	r3,0(r16)
    88b8:	80c00415 	stw	r3,16(r16)
    88bc:	80800515 	stw	r2,20(r16)
    88c0:	003fd106 	br	8808 <__alt_data_end+0xfffb30d8>
    88c4:	04c00044 	movi	r19,1
    88c8:	04810004 	movi	r18,1024
    88cc:	003fc006 	br	87d0 <__alt_data_end+0xfffb30a0>

000088d0 <memchr>:
    88d0:	208000cc 	andi	r2,r4,3
    88d4:	280f883a 	mov	r7,r5
    88d8:	10003526 	beq	r2,zero,89b0 <memchr+0xe0>
    88dc:	30bfffc4 	addi	r2,r6,-1
    88e0:	30001b26 	beq	r6,zero,8950 <memchr+0x80>
    88e4:	21800003 	ldbu	r6,0(r4)
    88e8:	28c03fcc 	andi	r3,r5,255
    88ec:	30c01a26 	beq	r6,r3,8958 <memchr+0x88>
    88f0:	180d883a 	mov	r6,r3
    88f4:	00000406 	br	8908 <memchr+0x38>
    88f8:	10001526 	beq	r2,zero,8950 <memchr+0x80>
    88fc:	20c00003 	ldbu	r3,0(r4)
    8900:	10bfffc4 	addi	r2,r2,-1
    8904:	19801426 	beq	r3,r6,8958 <memchr+0x88>
    8908:	21000044 	addi	r4,r4,1
    890c:	20c000cc 	andi	r3,r4,3
    8910:	183ff91e 	bne	r3,zero,88f8 <__alt_data_end+0xfffb31c8>
    8914:	024000c4 	movi	r9,3
    8918:	48801136 	bltu	r9,r2,8960 <memchr+0x90>
    891c:	10000c26 	beq	r2,zero,8950 <memchr+0x80>
    8920:	20c00003 	ldbu	r3,0(r4)
    8924:	29403fcc 	andi	r5,r5,255
    8928:	19400b26 	beq	r3,r5,8958 <memchr+0x88>
    892c:	20c00044 	addi	r3,r4,1
    8930:	2085883a 	add	r2,r4,r2
    8934:	39803fcc 	andi	r6,r7,255
    8938:	00000306 	br	8948 <memchr+0x78>
    893c:	18c00044 	addi	r3,r3,1
    8940:	197fffc3 	ldbu	r5,-1(r3)
    8944:	29800426 	beq	r5,r6,8958 <memchr+0x88>
    8948:	1809883a 	mov	r4,r3
    894c:	18bffb1e 	bne	r3,r2,893c <__alt_data_end+0xfffb320c>
    8950:	0005883a 	mov	r2,zero
    8954:	f800283a 	ret
    8958:	2005883a 	mov	r2,r4
    895c:	f800283a 	ret
    8960:	28c03fcc 	andi	r3,r5,255
    8964:	1810923a 	slli	r8,r3,8
    8968:	02ffbff4 	movhi	r11,65279
    896c:	02a02074 	movhi	r10,32897
    8970:	40c6b03a 	or	r3,r8,r3
    8974:	1810943a 	slli	r8,r3,16
    8978:	5affbfc4 	addi	r11,r11,-257
    897c:	52a02004 	addi	r10,r10,-32640
    8980:	40d0b03a 	or	r8,r8,r3
    8984:	20c00017 	ldw	r3,0(r4)
    8988:	40c6f03a 	xor	r3,r8,r3
    898c:	1acd883a 	add	r6,r3,r11
    8990:	00c6303a 	nor	r3,zero,r3
    8994:	30c6703a 	and	r3,r6,r3
    8998:	1a86703a 	and	r3,r3,r10
    899c:	183fdf1e 	bne	r3,zero,891c <__alt_data_end+0xfffb31ec>
    89a0:	10bfff04 	addi	r2,r2,-4
    89a4:	21000104 	addi	r4,r4,4
    89a8:	48bff636 	bltu	r9,r2,8984 <__alt_data_end+0xfffb3254>
    89ac:	003fdb06 	br	891c <__alt_data_end+0xfffb31ec>
    89b0:	3005883a 	mov	r2,r6
    89b4:	003fd706 	br	8914 <__alt_data_end+0xfffb31e4>

000089b8 <memcpy>:
    89b8:	deffff04 	addi	sp,sp,-4
    89bc:	dc000015 	stw	r16,0(sp)
    89c0:	00c003c4 	movi	r3,15
    89c4:	2005883a 	mov	r2,r4
    89c8:	1980432e 	bgeu	r3,r6,8ad8 <memcpy+0x120>
    89cc:	2146b03a 	or	r3,r4,r5
    89d0:	18c000cc 	andi	r3,r3,3
    89d4:	1800421e 	bne	r3,zero,8ae0 <memcpy+0x128>
    89d8:	343ffc04 	addi	r16,r6,-16
    89dc:	8020d13a 	srli	r16,r16,4
    89e0:	28c00104 	addi	r3,r5,4
    89e4:	23400104 	addi	r13,r4,4
    89e8:	801e913a 	slli	r15,r16,4
    89ec:	2b000204 	addi	r12,r5,8
    89f0:	22c00204 	addi	r11,r4,8
    89f4:	7bc00504 	addi	r15,r15,20
    89f8:	2a800304 	addi	r10,r5,12
    89fc:	22400304 	addi	r9,r4,12
    8a00:	2bdf883a 	add	r15,r5,r15
    8a04:	2811883a 	mov	r8,r5
    8a08:	200f883a 	mov	r7,r4
    8a0c:	41000017 	ldw	r4,0(r8)
    8a10:	39c00404 	addi	r7,r7,16
    8a14:	18c00404 	addi	r3,r3,16
    8a18:	393ffc15 	stw	r4,-16(r7)
    8a1c:	1bbffc17 	ldw	r14,-16(r3)
    8a20:	6b400404 	addi	r13,r13,16
    8a24:	5ac00404 	addi	r11,r11,16
    8a28:	6bbffc15 	stw	r14,-16(r13)
    8a2c:	63800017 	ldw	r14,0(r12)
    8a30:	4a400404 	addi	r9,r9,16
    8a34:	42000404 	addi	r8,r8,16
    8a38:	5bbffc15 	stw	r14,-16(r11)
    8a3c:	53800017 	ldw	r14,0(r10)
    8a40:	63000404 	addi	r12,r12,16
    8a44:	52800404 	addi	r10,r10,16
    8a48:	4bbffc15 	stw	r14,-16(r9)
    8a4c:	1bffef1e 	bne	r3,r15,8a0c <__alt_data_end+0xfffb32dc>
    8a50:	81c00044 	addi	r7,r16,1
    8a54:	380e913a 	slli	r7,r7,4
    8a58:	310003cc 	andi	r4,r6,15
    8a5c:	02c000c4 	movi	r11,3
    8a60:	11c7883a 	add	r3,r2,r7
    8a64:	29cb883a 	add	r5,r5,r7
    8a68:	59001f2e 	bgeu	r11,r4,8ae8 <memcpy+0x130>
    8a6c:	1813883a 	mov	r9,r3
    8a70:	2811883a 	mov	r8,r5
    8a74:	200f883a 	mov	r7,r4
    8a78:	42800017 	ldw	r10,0(r8)
    8a7c:	4a400104 	addi	r9,r9,4
    8a80:	39ffff04 	addi	r7,r7,-4
    8a84:	4abfff15 	stw	r10,-4(r9)
    8a88:	42000104 	addi	r8,r8,4
    8a8c:	59fffa36 	bltu	r11,r7,8a78 <__alt_data_end+0xfffb3348>
    8a90:	213fff04 	addi	r4,r4,-4
    8a94:	2008d0ba 	srli	r4,r4,2
    8a98:	318000cc 	andi	r6,r6,3
    8a9c:	21000044 	addi	r4,r4,1
    8aa0:	2109883a 	add	r4,r4,r4
    8aa4:	2109883a 	add	r4,r4,r4
    8aa8:	1907883a 	add	r3,r3,r4
    8aac:	290b883a 	add	r5,r5,r4
    8ab0:	30000626 	beq	r6,zero,8acc <memcpy+0x114>
    8ab4:	198d883a 	add	r6,r3,r6
    8ab8:	29c00003 	ldbu	r7,0(r5)
    8abc:	18c00044 	addi	r3,r3,1
    8ac0:	29400044 	addi	r5,r5,1
    8ac4:	19ffffc5 	stb	r7,-1(r3)
    8ac8:	19bffb1e 	bne	r3,r6,8ab8 <__alt_data_end+0xfffb3388>
    8acc:	dc000017 	ldw	r16,0(sp)
    8ad0:	dec00104 	addi	sp,sp,4
    8ad4:	f800283a 	ret
    8ad8:	2007883a 	mov	r3,r4
    8adc:	003ff406 	br	8ab0 <__alt_data_end+0xfffb3380>
    8ae0:	2007883a 	mov	r3,r4
    8ae4:	003ff306 	br	8ab4 <__alt_data_end+0xfffb3384>
    8ae8:	200d883a 	mov	r6,r4
    8aec:	003ff006 	br	8ab0 <__alt_data_end+0xfffb3380>

00008af0 <memmove>:
    8af0:	2005883a 	mov	r2,r4
    8af4:	29000b2e 	bgeu	r5,r4,8b24 <memmove+0x34>
    8af8:	298f883a 	add	r7,r5,r6
    8afc:	21c0092e 	bgeu	r4,r7,8b24 <memmove+0x34>
    8b00:	2187883a 	add	r3,r4,r6
    8b04:	198bc83a 	sub	r5,r3,r6
    8b08:	30004b26 	beq	r6,zero,8c38 <memmove+0x148>
    8b0c:	39ffffc4 	addi	r7,r7,-1
    8b10:	39000003 	ldbu	r4,0(r7)
    8b14:	18ffffc4 	addi	r3,r3,-1
    8b18:	19000005 	stb	r4,0(r3)
    8b1c:	197ffb1e 	bne	r3,r5,8b0c <__alt_data_end+0xfffb33dc>
    8b20:	f800283a 	ret
    8b24:	00c003c4 	movi	r3,15
    8b28:	1980412e 	bgeu	r3,r6,8c30 <memmove+0x140>
    8b2c:	1146b03a 	or	r3,r2,r5
    8b30:	18c000cc 	andi	r3,r3,3
    8b34:	1800411e 	bne	r3,zero,8c3c <memmove+0x14c>
    8b38:	33fffc04 	addi	r15,r6,-16
    8b3c:	781ed13a 	srli	r15,r15,4
    8b40:	28c00104 	addi	r3,r5,4
    8b44:	13400104 	addi	r13,r2,4
    8b48:	781c913a 	slli	r14,r15,4
    8b4c:	2b000204 	addi	r12,r5,8
    8b50:	12c00204 	addi	r11,r2,8
    8b54:	73800504 	addi	r14,r14,20
    8b58:	2a800304 	addi	r10,r5,12
    8b5c:	12400304 	addi	r9,r2,12
    8b60:	2b9d883a 	add	r14,r5,r14
    8b64:	2811883a 	mov	r8,r5
    8b68:	100f883a 	mov	r7,r2
    8b6c:	41000017 	ldw	r4,0(r8)
    8b70:	39c00404 	addi	r7,r7,16
    8b74:	18c00404 	addi	r3,r3,16
    8b78:	393ffc15 	stw	r4,-16(r7)
    8b7c:	193ffc17 	ldw	r4,-16(r3)
    8b80:	6b400404 	addi	r13,r13,16
    8b84:	5ac00404 	addi	r11,r11,16
    8b88:	693ffc15 	stw	r4,-16(r13)
    8b8c:	61000017 	ldw	r4,0(r12)
    8b90:	4a400404 	addi	r9,r9,16
    8b94:	42000404 	addi	r8,r8,16
    8b98:	593ffc15 	stw	r4,-16(r11)
    8b9c:	51000017 	ldw	r4,0(r10)
    8ba0:	63000404 	addi	r12,r12,16
    8ba4:	52800404 	addi	r10,r10,16
    8ba8:	493ffc15 	stw	r4,-16(r9)
    8bac:	1bbfef1e 	bne	r3,r14,8b6c <__alt_data_end+0xfffb343c>
    8bb0:	79000044 	addi	r4,r15,1
    8bb4:	2008913a 	slli	r4,r4,4
    8bb8:	328003cc 	andi	r10,r6,15
    8bbc:	02c000c4 	movi	r11,3
    8bc0:	1107883a 	add	r3,r2,r4
    8bc4:	290b883a 	add	r5,r5,r4
    8bc8:	5a801e2e 	bgeu	r11,r10,8c44 <memmove+0x154>
    8bcc:	1813883a 	mov	r9,r3
    8bd0:	2811883a 	mov	r8,r5
    8bd4:	500f883a 	mov	r7,r10
    8bd8:	41000017 	ldw	r4,0(r8)
    8bdc:	4a400104 	addi	r9,r9,4
    8be0:	39ffff04 	addi	r7,r7,-4
    8be4:	493fff15 	stw	r4,-4(r9)
    8be8:	42000104 	addi	r8,r8,4
    8bec:	59fffa36 	bltu	r11,r7,8bd8 <__alt_data_end+0xfffb34a8>
    8bf0:	513fff04 	addi	r4,r10,-4
    8bf4:	2008d0ba 	srli	r4,r4,2
    8bf8:	318000cc 	andi	r6,r6,3
    8bfc:	21000044 	addi	r4,r4,1
    8c00:	2109883a 	add	r4,r4,r4
    8c04:	2109883a 	add	r4,r4,r4
    8c08:	1907883a 	add	r3,r3,r4
    8c0c:	290b883a 	add	r5,r5,r4
    8c10:	30000926 	beq	r6,zero,8c38 <memmove+0x148>
    8c14:	198d883a 	add	r6,r3,r6
    8c18:	29c00003 	ldbu	r7,0(r5)
    8c1c:	18c00044 	addi	r3,r3,1
    8c20:	29400044 	addi	r5,r5,1
    8c24:	19ffffc5 	stb	r7,-1(r3)
    8c28:	19bffb1e 	bne	r3,r6,8c18 <__alt_data_end+0xfffb34e8>
    8c2c:	f800283a 	ret
    8c30:	1007883a 	mov	r3,r2
    8c34:	003ff606 	br	8c10 <__alt_data_end+0xfffb34e0>
    8c38:	f800283a 	ret
    8c3c:	1007883a 	mov	r3,r2
    8c40:	003ff406 	br	8c14 <__alt_data_end+0xfffb34e4>
    8c44:	500d883a 	mov	r6,r10
    8c48:	003ff106 	br	8c10 <__alt_data_end+0xfffb34e0>

00008c4c <memset>:
    8c4c:	20c000cc 	andi	r3,r4,3
    8c50:	2005883a 	mov	r2,r4
    8c54:	18004326 	beq	r3,zero,8d64 <memset+0x118>
    8c58:	31ffffc4 	addi	r7,r6,-1
    8c5c:	30004026 	beq	r6,zero,8d60 <memset+0x114>
    8c60:	2813883a 	mov	r9,r5
    8c64:	200d883a 	mov	r6,r4
    8c68:	2007883a 	mov	r3,r4
    8c6c:	00000406 	br	8c80 <memset+0x34>
    8c70:	3a3fffc4 	addi	r8,r7,-1
    8c74:	31800044 	addi	r6,r6,1
    8c78:	38003926 	beq	r7,zero,8d60 <memset+0x114>
    8c7c:	400f883a 	mov	r7,r8
    8c80:	18c00044 	addi	r3,r3,1
    8c84:	32400005 	stb	r9,0(r6)
    8c88:	1a0000cc 	andi	r8,r3,3
    8c8c:	403ff81e 	bne	r8,zero,8c70 <__alt_data_end+0xfffb3540>
    8c90:	010000c4 	movi	r4,3
    8c94:	21c02d2e 	bgeu	r4,r7,8d4c <memset+0x100>
    8c98:	29803fcc 	andi	r6,r5,255
    8c9c:	3008923a 	slli	r4,r6,8
    8ca0:	218cb03a 	or	r6,r4,r6
    8ca4:	3008943a 	slli	r4,r6,16
    8ca8:	218cb03a 	or	r6,r4,r6
    8cac:	010003c4 	movi	r4,15
    8cb0:	21c0182e 	bgeu	r4,r7,8d14 <memset+0xc8>
    8cb4:	3b3ffc04 	addi	r12,r7,-16
    8cb8:	6018d13a 	srli	r12,r12,4
    8cbc:	1a000104 	addi	r8,r3,4
    8cc0:	1ac00204 	addi	r11,r3,8
    8cc4:	6008913a 	slli	r4,r12,4
    8cc8:	1a800304 	addi	r10,r3,12
    8ccc:	1813883a 	mov	r9,r3
    8cd0:	21000504 	addi	r4,r4,20
    8cd4:	1909883a 	add	r4,r3,r4
    8cd8:	49800015 	stw	r6,0(r9)
    8cdc:	41800015 	stw	r6,0(r8)
    8ce0:	59800015 	stw	r6,0(r11)
    8ce4:	51800015 	stw	r6,0(r10)
    8ce8:	42000404 	addi	r8,r8,16
    8cec:	4a400404 	addi	r9,r9,16
    8cf0:	5ac00404 	addi	r11,r11,16
    8cf4:	52800404 	addi	r10,r10,16
    8cf8:	413ff71e 	bne	r8,r4,8cd8 <__alt_data_end+0xfffb35a8>
    8cfc:	63000044 	addi	r12,r12,1
    8d00:	6018913a 	slli	r12,r12,4
    8d04:	39c003cc 	andi	r7,r7,15
    8d08:	010000c4 	movi	r4,3
    8d0c:	1b07883a 	add	r3,r3,r12
    8d10:	21c00e2e 	bgeu	r4,r7,8d4c <memset+0x100>
    8d14:	1813883a 	mov	r9,r3
    8d18:	3811883a 	mov	r8,r7
    8d1c:	010000c4 	movi	r4,3
    8d20:	49800015 	stw	r6,0(r9)
    8d24:	423fff04 	addi	r8,r8,-4
    8d28:	4a400104 	addi	r9,r9,4
    8d2c:	223ffc36 	bltu	r4,r8,8d20 <__alt_data_end+0xfffb35f0>
    8d30:	393fff04 	addi	r4,r7,-4
    8d34:	2008d0ba 	srli	r4,r4,2
    8d38:	39c000cc 	andi	r7,r7,3
    8d3c:	21000044 	addi	r4,r4,1
    8d40:	2109883a 	add	r4,r4,r4
    8d44:	2109883a 	add	r4,r4,r4
    8d48:	1907883a 	add	r3,r3,r4
    8d4c:	38000426 	beq	r7,zero,8d60 <memset+0x114>
    8d50:	19cf883a 	add	r7,r3,r7
    8d54:	19400005 	stb	r5,0(r3)
    8d58:	18c00044 	addi	r3,r3,1
    8d5c:	19fffd1e 	bne	r3,r7,8d54 <__alt_data_end+0xfffb3624>
    8d60:	f800283a 	ret
    8d64:	2007883a 	mov	r3,r4
    8d68:	300f883a 	mov	r7,r6
    8d6c:	003fc806 	br	8c90 <__alt_data_end+0xfffb3560>

00008d70 <_Balloc>:
    8d70:	20801317 	ldw	r2,76(r4)
    8d74:	defffc04 	addi	sp,sp,-16
    8d78:	dc400115 	stw	r17,4(sp)
    8d7c:	dc000015 	stw	r16,0(sp)
    8d80:	dfc00315 	stw	ra,12(sp)
    8d84:	dc800215 	stw	r18,8(sp)
    8d88:	2023883a 	mov	r17,r4
    8d8c:	2821883a 	mov	r16,r5
    8d90:	10000f26 	beq	r2,zero,8dd0 <_Balloc+0x60>
    8d94:	8407883a 	add	r3,r16,r16
    8d98:	18c7883a 	add	r3,r3,r3
    8d9c:	10c7883a 	add	r3,r2,r3
    8da0:	18800017 	ldw	r2,0(r3)
    8da4:	10001126 	beq	r2,zero,8dec <_Balloc+0x7c>
    8da8:	11000017 	ldw	r4,0(r2)
    8dac:	19000015 	stw	r4,0(r3)
    8db0:	10000415 	stw	zero,16(r2)
    8db4:	10000315 	stw	zero,12(r2)
    8db8:	dfc00317 	ldw	ra,12(sp)
    8dbc:	dc800217 	ldw	r18,8(sp)
    8dc0:	dc400117 	ldw	r17,4(sp)
    8dc4:	dc000017 	ldw	r16,0(sp)
    8dc8:	dec00404 	addi	sp,sp,16
    8dcc:	f800283a 	ret
    8dd0:	01400104 	movi	r5,4
    8dd4:	01800844 	movi	r6,33
    8dd8:	000bbb80 	call	bbb8 <_calloc_r>
    8ddc:	88801315 	stw	r2,76(r17)
    8de0:	103fec1e 	bne	r2,zero,8d94 <__alt_data_end+0xfffb3664>
    8de4:	0005883a 	mov	r2,zero
    8de8:	003ff306 	br	8db8 <__alt_data_end+0xfffb3688>
    8dec:	01400044 	movi	r5,1
    8df0:	2c24983a 	sll	r18,r5,r16
    8df4:	8809883a 	mov	r4,r17
    8df8:	91800144 	addi	r6,r18,5
    8dfc:	318d883a 	add	r6,r6,r6
    8e00:	318d883a 	add	r6,r6,r6
    8e04:	000bbb80 	call	bbb8 <_calloc_r>
    8e08:	103ff626 	beq	r2,zero,8de4 <__alt_data_end+0xfffb36b4>
    8e0c:	14000115 	stw	r16,4(r2)
    8e10:	14800215 	stw	r18,8(r2)
    8e14:	003fe606 	br	8db0 <__alt_data_end+0xfffb3680>

00008e18 <_Bfree>:
    8e18:	28000826 	beq	r5,zero,8e3c <_Bfree+0x24>
    8e1c:	28c00117 	ldw	r3,4(r5)
    8e20:	20801317 	ldw	r2,76(r4)
    8e24:	18c7883a 	add	r3,r3,r3
    8e28:	18c7883a 	add	r3,r3,r3
    8e2c:	10c5883a 	add	r2,r2,r3
    8e30:	10c00017 	ldw	r3,0(r2)
    8e34:	28c00015 	stw	r3,0(r5)
    8e38:	11400015 	stw	r5,0(r2)
    8e3c:	f800283a 	ret

00008e40 <__multadd>:
    8e40:	defff704 	addi	sp,sp,-36
    8e44:	dc800215 	stw	r18,8(sp)
    8e48:	2c800417 	ldw	r18,16(r5)
    8e4c:	ddc00715 	stw	r23,28(sp)
    8e50:	dd800615 	stw	r22,24(sp)
    8e54:	dd000415 	stw	r20,16(sp)
    8e58:	dcc00315 	stw	r19,12(sp)
    8e5c:	dc400115 	stw	r17,4(sp)
    8e60:	dc000015 	stw	r16,0(sp)
    8e64:	dfc00815 	stw	ra,32(sp)
    8e68:	dd400515 	stw	r21,20(sp)
    8e6c:	2827883a 	mov	r19,r5
    8e70:	2029883a 	mov	r20,r4
    8e74:	3023883a 	mov	r17,r6
    8e78:	3821883a 	mov	r16,r7
    8e7c:	2d800504 	addi	r22,r5,20
    8e80:	002f883a 	mov	r23,zero
    8e84:	b5400017 	ldw	r21,0(r22)
    8e88:	880b883a 	mov	r5,r17
    8e8c:	bdc00044 	addi	r23,r23,1
    8e90:	a93fffcc 	andi	r4,r21,65535
    8e94:	000d1bc0 	call	d1bc <__mulsi3>
    8e98:	1421883a 	add	r16,r2,r16
    8e9c:	a808d43a 	srli	r4,r21,16
    8ea0:	802ad43a 	srli	r21,r16,16
    8ea4:	880b883a 	mov	r5,r17
    8ea8:	000d1bc0 	call	d1bc <__mulsi3>
    8eac:	a88f883a 	add	r7,r21,r2
    8eb0:	3804943a 	slli	r2,r7,16
    8eb4:	80ffffcc 	andi	r3,r16,65535
    8eb8:	b5800104 	addi	r22,r22,4
    8ebc:	10c7883a 	add	r3,r2,r3
    8ec0:	b0ffff15 	stw	r3,-4(r22)
    8ec4:	3820d43a 	srli	r16,r7,16
    8ec8:	bcbfee16 	blt	r23,r18,8e84 <__alt_data_end+0xfffb3754>
    8ecc:	80000926 	beq	r16,zero,8ef4 <__multadd+0xb4>
    8ed0:	98800217 	ldw	r2,8(r19)
    8ed4:	9080130e 	bge	r18,r2,8f24 <__multadd+0xe4>
    8ed8:	90800144 	addi	r2,r18,5
    8edc:	1085883a 	add	r2,r2,r2
    8ee0:	1085883a 	add	r2,r2,r2
    8ee4:	9885883a 	add	r2,r19,r2
    8ee8:	14000015 	stw	r16,0(r2)
    8eec:	94800044 	addi	r18,r18,1
    8ef0:	9c800415 	stw	r18,16(r19)
    8ef4:	9805883a 	mov	r2,r19
    8ef8:	dfc00817 	ldw	ra,32(sp)
    8efc:	ddc00717 	ldw	r23,28(sp)
    8f00:	dd800617 	ldw	r22,24(sp)
    8f04:	dd400517 	ldw	r21,20(sp)
    8f08:	dd000417 	ldw	r20,16(sp)
    8f0c:	dcc00317 	ldw	r19,12(sp)
    8f10:	dc800217 	ldw	r18,8(sp)
    8f14:	dc400117 	ldw	r17,4(sp)
    8f18:	dc000017 	ldw	r16,0(sp)
    8f1c:	dec00904 	addi	sp,sp,36
    8f20:	f800283a 	ret
    8f24:	99400117 	ldw	r5,4(r19)
    8f28:	a009883a 	mov	r4,r20
    8f2c:	29400044 	addi	r5,r5,1
    8f30:	0008d700 	call	8d70 <_Balloc>
    8f34:	99800417 	ldw	r6,16(r19)
    8f38:	99400304 	addi	r5,r19,12
    8f3c:	11000304 	addi	r4,r2,12
    8f40:	31800084 	addi	r6,r6,2
    8f44:	318d883a 	add	r6,r6,r6
    8f48:	318d883a 	add	r6,r6,r6
    8f4c:	1023883a 	mov	r17,r2
    8f50:	00089b80 	call	89b8 <memcpy>
    8f54:	99000117 	ldw	r4,4(r19)
    8f58:	a0c01317 	ldw	r3,76(r20)
    8f5c:	2109883a 	add	r4,r4,r4
    8f60:	2109883a 	add	r4,r4,r4
    8f64:	1907883a 	add	r3,r3,r4
    8f68:	18800017 	ldw	r2,0(r3)
    8f6c:	98800015 	stw	r2,0(r19)
    8f70:	1cc00015 	stw	r19,0(r3)
    8f74:	8827883a 	mov	r19,r17
    8f78:	003fd706 	br	8ed8 <__alt_data_end+0xfffb37a8>

00008f7c <__s2b>:
    8f7c:	defff904 	addi	sp,sp,-28
    8f80:	dc400115 	stw	r17,4(sp)
    8f84:	dc000015 	stw	r16,0(sp)
    8f88:	2023883a 	mov	r17,r4
    8f8c:	2821883a 	mov	r16,r5
    8f90:	39000204 	addi	r4,r7,8
    8f94:	01400244 	movi	r5,9
    8f98:	dcc00315 	stw	r19,12(sp)
    8f9c:	dc800215 	stw	r18,8(sp)
    8fa0:	dfc00615 	stw	ra,24(sp)
    8fa4:	dd400515 	stw	r21,20(sp)
    8fa8:	dd000415 	stw	r20,16(sp)
    8fac:	3825883a 	mov	r18,r7
    8fb0:	3027883a 	mov	r19,r6
    8fb4:	0002f380 	call	2f38 <__divsi3>
    8fb8:	00c00044 	movi	r3,1
    8fbc:	000b883a 	mov	r5,zero
    8fc0:	1880030e 	bge	r3,r2,8fd0 <__s2b+0x54>
    8fc4:	18c7883a 	add	r3,r3,r3
    8fc8:	29400044 	addi	r5,r5,1
    8fcc:	18bffd16 	blt	r3,r2,8fc4 <__alt_data_end+0xfffb3894>
    8fd0:	8809883a 	mov	r4,r17
    8fd4:	0008d700 	call	8d70 <_Balloc>
    8fd8:	d8c00717 	ldw	r3,28(sp)
    8fdc:	10c00515 	stw	r3,20(r2)
    8fe0:	00c00044 	movi	r3,1
    8fe4:	10c00415 	stw	r3,16(r2)
    8fe8:	00c00244 	movi	r3,9
    8fec:	1cc0210e 	bge	r3,r19,9074 <__s2b+0xf8>
    8ff0:	80eb883a 	add	r21,r16,r3
    8ff4:	a829883a 	mov	r20,r21
    8ff8:	84e1883a 	add	r16,r16,r19
    8ffc:	a1c00007 	ldb	r7,0(r20)
    9000:	8809883a 	mov	r4,r17
    9004:	a5000044 	addi	r20,r20,1
    9008:	100b883a 	mov	r5,r2
    900c:	01800284 	movi	r6,10
    9010:	39fff404 	addi	r7,r7,-48
    9014:	0008e400 	call	8e40 <__multadd>
    9018:	a43ff81e 	bne	r20,r16,8ffc <__alt_data_end+0xfffb38cc>
    901c:	ace1883a 	add	r16,r21,r19
    9020:	843ffe04 	addi	r16,r16,-8
    9024:	9c800a0e 	bge	r19,r18,9050 <__s2b+0xd4>
    9028:	94e5c83a 	sub	r18,r18,r19
    902c:	84a5883a 	add	r18,r16,r18
    9030:	81c00007 	ldb	r7,0(r16)
    9034:	8809883a 	mov	r4,r17
    9038:	84000044 	addi	r16,r16,1
    903c:	100b883a 	mov	r5,r2
    9040:	01800284 	movi	r6,10
    9044:	39fff404 	addi	r7,r7,-48
    9048:	0008e400 	call	8e40 <__multadd>
    904c:	84bff81e 	bne	r16,r18,9030 <__alt_data_end+0xfffb3900>
    9050:	dfc00617 	ldw	ra,24(sp)
    9054:	dd400517 	ldw	r21,20(sp)
    9058:	dd000417 	ldw	r20,16(sp)
    905c:	dcc00317 	ldw	r19,12(sp)
    9060:	dc800217 	ldw	r18,8(sp)
    9064:	dc400117 	ldw	r17,4(sp)
    9068:	dc000017 	ldw	r16,0(sp)
    906c:	dec00704 	addi	sp,sp,28
    9070:	f800283a 	ret
    9074:	84000284 	addi	r16,r16,10
    9078:	1827883a 	mov	r19,r3
    907c:	003fe906 	br	9024 <__alt_data_end+0xfffb38f4>

00009080 <__hi0bits>:
    9080:	20bfffec 	andhi	r2,r4,65535
    9084:	1000141e 	bne	r2,zero,90d8 <__hi0bits+0x58>
    9088:	2008943a 	slli	r4,r4,16
    908c:	00800404 	movi	r2,16
    9090:	20ffc02c 	andhi	r3,r4,65280
    9094:	1800021e 	bne	r3,zero,90a0 <__hi0bits+0x20>
    9098:	2008923a 	slli	r4,r4,8
    909c:	10800204 	addi	r2,r2,8
    90a0:	20fc002c 	andhi	r3,r4,61440
    90a4:	1800021e 	bne	r3,zero,90b0 <__hi0bits+0x30>
    90a8:	2008913a 	slli	r4,r4,4
    90ac:	10800104 	addi	r2,r2,4
    90b0:	20f0002c 	andhi	r3,r4,49152
    90b4:	1800031e 	bne	r3,zero,90c4 <__hi0bits+0x44>
    90b8:	2109883a 	add	r4,r4,r4
    90bc:	10800084 	addi	r2,r2,2
    90c0:	2109883a 	add	r4,r4,r4
    90c4:	20000316 	blt	r4,zero,90d4 <__hi0bits+0x54>
    90c8:	2110002c 	andhi	r4,r4,16384
    90cc:	2000041e 	bne	r4,zero,90e0 <__hi0bits+0x60>
    90d0:	00800804 	movi	r2,32
    90d4:	f800283a 	ret
    90d8:	0005883a 	mov	r2,zero
    90dc:	003fec06 	br	9090 <__alt_data_end+0xfffb3960>
    90e0:	10800044 	addi	r2,r2,1
    90e4:	f800283a 	ret

000090e8 <__lo0bits>:
    90e8:	20c00017 	ldw	r3,0(r4)
    90ec:	188001cc 	andi	r2,r3,7
    90f0:	10000826 	beq	r2,zero,9114 <__lo0bits+0x2c>
    90f4:	1880004c 	andi	r2,r3,1
    90f8:	1000211e 	bne	r2,zero,9180 <__lo0bits+0x98>
    90fc:	1880008c 	andi	r2,r3,2
    9100:	1000211e 	bne	r2,zero,9188 <__lo0bits+0xa0>
    9104:	1806d0ba 	srli	r3,r3,2
    9108:	00800084 	movi	r2,2
    910c:	20c00015 	stw	r3,0(r4)
    9110:	f800283a 	ret
    9114:	18bfffcc 	andi	r2,r3,65535
    9118:	10001326 	beq	r2,zero,9168 <__lo0bits+0x80>
    911c:	0005883a 	mov	r2,zero
    9120:	19403fcc 	andi	r5,r3,255
    9124:	2800021e 	bne	r5,zero,9130 <__lo0bits+0x48>
    9128:	1806d23a 	srli	r3,r3,8
    912c:	10800204 	addi	r2,r2,8
    9130:	194003cc 	andi	r5,r3,15
    9134:	2800021e 	bne	r5,zero,9140 <__lo0bits+0x58>
    9138:	1806d13a 	srli	r3,r3,4
    913c:	10800104 	addi	r2,r2,4
    9140:	194000cc 	andi	r5,r3,3
    9144:	2800021e 	bne	r5,zero,9150 <__lo0bits+0x68>
    9148:	1806d0ba 	srli	r3,r3,2
    914c:	10800084 	addi	r2,r2,2
    9150:	1940004c 	andi	r5,r3,1
    9154:	2800081e 	bne	r5,zero,9178 <__lo0bits+0x90>
    9158:	1806d07a 	srli	r3,r3,1
    915c:	1800051e 	bne	r3,zero,9174 <__lo0bits+0x8c>
    9160:	00800804 	movi	r2,32
    9164:	f800283a 	ret
    9168:	1806d43a 	srli	r3,r3,16
    916c:	00800404 	movi	r2,16
    9170:	003feb06 	br	9120 <__alt_data_end+0xfffb39f0>
    9174:	10800044 	addi	r2,r2,1
    9178:	20c00015 	stw	r3,0(r4)
    917c:	f800283a 	ret
    9180:	0005883a 	mov	r2,zero
    9184:	f800283a 	ret
    9188:	1806d07a 	srli	r3,r3,1
    918c:	00800044 	movi	r2,1
    9190:	20c00015 	stw	r3,0(r4)
    9194:	f800283a 	ret

00009198 <__i2b>:
    9198:	defffd04 	addi	sp,sp,-12
    919c:	dc000015 	stw	r16,0(sp)
    91a0:	04000044 	movi	r16,1
    91a4:	dc400115 	stw	r17,4(sp)
    91a8:	2823883a 	mov	r17,r5
    91ac:	800b883a 	mov	r5,r16
    91b0:	dfc00215 	stw	ra,8(sp)
    91b4:	0008d700 	call	8d70 <_Balloc>
    91b8:	14400515 	stw	r17,20(r2)
    91bc:	14000415 	stw	r16,16(r2)
    91c0:	dfc00217 	ldw	ra,8(sp)
    91c4:	dc400117 	ldw	r17,4(sp)
    91c8:	dc000017 	ldw	r16,0(sp)
    91cc:	dec00304 	addi	sp,sp,12
    91d0:	f800283a 	ret

000091d4 <__multiply>:
    91d4:	deffef04 	addi	sp,sp,-68
    91d8:	dc400815 	stw	r17,32(sp)
    91dc:	dc000715 	stw	r16,28(sp)
    91e0:	2c400417 	ldw	r17,16(r5)
    91e4:	34000417 	ldw	r16,16(r6)
    91e8:	dd800d15 	stw	r22,52(sp)
    91ec:	dc800915 	stw	r18,36(sp)
    91f0:	dfc01015 	stw	ra,64(sp)
    91f4:	df000f15 	stw	fp,60(sp)
    91f8:	ddc00e15 	stw	r23,56(sp)
    91fc:	dd400c15 	stw	r21,48(sp)
    9200:	dd000b15 	stw	r20,44(sp)
    9204:	dcc00a15 	stw	r19,40(sp)
    9208:	2825883a 	mov	r18,r5
    920c:	302d883a 	mov	r22,r6
    9210:	8c009116 	blt	r17,r16,9458 <__multiply+0x284>
    9214:	8005883a 	mov	r2,r16
    9218:	8821883a 	mov	r16,r17
    921c:	1023883a 	mov	r17,r2
    9220:	90800217 	ldw	r2,8(r18)
    9224:	8447883a 	add	r3,r16,r17
    9228:	d8c00215 	stw	r3,8(sp)
    922c:	91400117 	ldw	r5,4(r18)
    9230:	10c0010e 	bge	r2,r3,9238 <__multiply+0x64>
    9234:	29400044 	addi	r5,r5,1
    9238:	0008d700 	call	8d70 <_Balloc>
    923c:	d8c00217 	ldw	r3,8(sp)
    9240:	d8800615 	stw	r2,24(sp)
    9244:	18eb883a 	add	r21,r3,r3
    9248:	ad6b883a 	add	r21,r21,r21
    924c:	10c00504 	addi	r3,r2,20
    9250:	1d6b883a 	add	r21,r3,r21
    9254:	d8c00115 	stw	r3,4(sp)
    9258:	dd400315 	stw	r21,12(sp)
    925c:	1805883a 	mov	r2,r3
    9260:	1d40042e 	bgeu	r3,r21,9274 <__multiply+0xa0>
    9264:	d8c00317 	ldw	r3,12(sp)
    9268:	10000015 	stw	zero,0(r2)
    926c:	10800104 	addi	r2,r2,4
    9270:	10fffc36 	bltu	r2,r3,9264 <__alt_data_end+0xfffb3b34>
    9274:	8c63883a 	add	r17,r17,r17
    9278:	b5800504 	addi	r22,r22,20
    927c:	8c63883a 	add	r17,r17,r17
    9280:	94800504 	addi	r18,r18,20
    9284:	8421883a 	add	r16,r16,r16
    9288:	b463883a 	add	r17,r22,r17
    928c:	8421883a 	add	r16,r16,r16
    9290:	dd800015 	stw	r22,0(sp)
    9294:	dc800415 	stw	r18,16(sp)
    9298:	dc400515 	stw	r17,20(sp)
    929c:	9429883a 	add	r20,r18,r16
    92a0:	b4404f2e 	bgeu	r22,r17,93e0 <__multiply+0x20c>
    92a4:	d8c00017 	ldw	r3,0(sp)
    92a8:	1c800017 	ldw	r18,0(r3)
    92ac:	943fffcc 	andi	r16,r18,65535
    92b0:	80001e26 	beq	r16,zero,932c <__multiply+0x158>
    92b4:	dd800117 	ldw	r22,4(sp)
    92b8:	dd400417 	ldw	r21,16(sp)
    92bc:	0025883a 	mov	r18,zero
    92c0:	adc00017 	ldw	r23,0(r21)
    92c4:	b4c00017 	ldw	r19,0(r22)
    92c8:	800b883a 	mov	r5,r16
    92cc:	b93fffcc 	andi	r4,r23,65535
    92d0:	000d1bc0 	call	d1bc <__mulsi3>
    92d4:	9c7fffcc 	andi	r17,r19,65535
    92d8:	8885883a 	add	r2,r17,r2
    92dc:	b808d43a 	srli	r4,r23,16
    92e0:	14a3883a 	add	r17,r2,r18
    92e4:	9826d43a 	srli	r19,r19,16
    92e8:	8824d43a 	srli	r18,r17,16
    92ec:	800b883a 	mov	r5,r16
    92f0:	000d1bc0 	call	d1bc <__mulsi3>
    92f4:	9885883a 	add	r2,r19,r2
    92f8:	14a7883a 	add	r19,r2,r18
    92fc:	88ffffcc 	andi	r3,r17,65535
    9300:	9822943a 	slli	r17,r19,16
    9304:	ad400104 	addi	r21,r21,4
    9308:	b005883a 	mov	r2,r22
    930c:	88c6b03a 	or	r3,r17,r3
    9310:	b0c00015 	stw	r3,0(r22)
    9314:	9824d43a 	srli	r18,r19,16
    9318:	b5800104 	addi	r22,r22,4
    931c:	ad3fe836 	bltu	r21,r20,92c0 <__alt_data_end+0xfffb3b90>
    9320:	d8c00017 	ldw	r3,0(sp)
    9324:	14800115 	stw	r18,4(r2)
    9328:	1c800017 	ldw	r18,0(r3)
    932c:	9024d43a 	srli	r18,r18,16
    9330:	90002226 	beq	r18,zero,93bc <__multiply+0x1e8>
    9334:	d8c00117 	ldw	r3,4(sp)
    9338:	dd800417 	ldw	r22,16(sp)
    933c:	002f883a 	mov	r23,zero
    9340:	1f000017 	ldw	fp,0(r3)
    9344:	1823883a 	mov	r17,r3
    9348:	182b883a 	mov	r21,r3
    934c:	e021883a 	mov	r16,fp
    9350:	00000106 	br	9358 <__multiply+0x184>
    9354:	982b883a 	mov	r21,r19
    9358:	b100000b 	ldhu	r4,0(r22)
    935c:	8020d43a 	srli	r16,r16,16
    9360:	900b883a 	mov	r5,r18
    9364:	000d1bc0 	call	d1bc <__mulsi3>
    9368:	1405883a 	add	r2,r2,r16
    936c:	15ef883a 	add	r23,r2,r23
    9370:	b804943a 	slli	r2,r23,16
    9374:	e0ffffcc 	andi	r3,fp,65535
    9378:	8c400104 	addi	r17,r17,4
    937c:	10c6b03a 	or	r3,r2,r3
    9380:	88ffff15 	stw	r3,-4(r17)
    9384:	b5800104 	addi	r22,r22,4
    9388:	b13fff17 	ldw	r4,-4(r22)
    938c:	acc00104 	addi	r19,r21,4
    9390:	900b883a 	mov	r5,r18
    9394:	2008d43a 	srli	r4,r4,16
    9398:	9c000017 	ldw	r16,0(r19)
    939c:	000d1bc0 	call	d1bc <__mulsi3>
    93a0:	b806d43a 	srli	r3,r23,16
    93a4:	813fffcc 	andi	r4,r16,65535
    93a8:	1105883a 	add	r2,r2,r4
    93ac:	10f9883a 	add	fp,r2,r3
    93b0:	e02ed43a 	srli	r23,fp,16
    93b4:	b53fe736 	bltu	r22,r20,9354 <__alt_data_end+0xfffb3c24>
    93b8:	af000115 	stw	fp,4(r21)
    93bc:	d8c00017 	ldw	r3,0(sp)
    93c0:	d9000517 	ldw	r4,20(sp)
    93c4:	18c00104 	addi	r3,r3,4
    93c8:	d8c00015 	stw	r3,0(sp)
    93cc:	d8c00117 	ldw	r3,4(sp)
    93d0:	18c00104 	addi	r3,r3,4
    93d4:	d8c00115 	stw	r3,4(sp)
    93d8:	d8c00017 	ldw	r3,0(sp)
    93dc:	193fb136 	bltu	r3,r4,92a4 <__alt_data_end+0xfffb3b74>
    93e0:	d8c00217 	ldw	r3,8(sp)
    93e4:	00c00c0e 	bge	zero,r3,9418 <__multiply+0x244>
    93e8:	d8c00317 	ldw	r3,12(sp)
    93ec:	18bfff17 	ldw	r2,-4(r3)
    93f0:	1d7fff04 	addi	r21,r3,-4
    93f4:	10000326 	beq	r2,zero,9404 <__multiply+0x230>
    93f8:	00000706 	br	9418 <__multiply+0x244>
    93fc:	a8800017 	ldw	r2,0(r21)
    9400:	1000051e 	bne	r2,zero,9418 <__multiply+0x244>
    9404:	d8c00217 	ldw	r3,8(sp)
    9408:	ad7fff04 	addi	r21,r21,-4
    940c:	18ffffc4 	addi	r3,r3,-1
    9410:	d8c00215 	stw	r3,8(sp)
    9414:	183ff91e 	bne	r3,zero,93fc <__alt_data_end+0xfffb3ccc>
    9418:	d8c00617 	ldw	r3,24(sp)
    941c:	d9000217 	ldw	r4,8(sp)
    9420:	1805883a 	mov	r2,r3
    9424:	19000415 	stw	r4,16(r3)
    9428:	dfc01017 	ldw	ra,64(sp)
    942c:	df000f17 	ldw	fp,60(sp)
    9430:	ddc00e17 	ldw	r23,56(sp)
    9434:	dd800d17 	ldw	r22,52(sp)
    9438:	dd400c17 	ldw	r21,48(sp)
    943c:	dd000b17 	ldw	r20,44(sp)
    9440:	dcc00a17 	ldw	r19,40(sp)
    9444:	dc800917 	ldw	r18,36(sp)
    9448:	dc400817 	ldw	r17,32(sp)
    944c:	dc000717 	ldw	r16,28(sp)
    9450:	dec01104 	addi	sp,sp,68
    9454:	f800283a 	ret
    9458:	3025883a 	mov	r18,r6
    945c:	282d883a 	mov	r22,r5
    9460:	003f6f06 	br	9220 <__alt_data_end+0xfffb3af0>

00009464 <__pow5mult>:
    9464:	defffa04 	addi	sp,sp,-24
    9468:	dcc00315 	stw	r19,12(sp)
    946c:	dc800215 	stw	r18,8(sp)
    9470:	dc000015 	stw	r16,0(sp)
    9474:	dfc00515 	stw	ra,20(sp)
    9478:	dd000415 	stw	r20,16(sp)
    947c:	dc400115 	stw	r17,4(sp)
    9480:	308000cc 	andi	r2,r6,3
    9484:	3021883a 	mov	r16,r6
    9488:	2027883a 	mov	r19,r4
    948c:	2825883a 	mov	r18,r5
    9490:	10002e1e 	bne	r2,zero,954c <__pow5mult+0xe8>
    9494:	8021d0ba 	srai	r16,r16,2
    9498:	80001a26 	beq	r16,zero,9504 <__pow5mult+0xa0>
    949c:	9c401217 	ldw	r17,72(r19)
    94a0:	8800061e 	bne	r17,zero,94bc <__pow5mult+0x58>
    94a4:	00003406 	br	9578 <__pow5mult+0x114>
    94a8:	8021d07a 	srai	r16,r16,1
    94ac:	80001526 	beq	r16,zero,9504 <__pow5mult+0xa0>
    94b0:	88800017 	ldw	r2,0(r17)
    94b4:	10001c26 	beq	r2,zero,9528 <__pow5mult+0xc4>
    94b8:	1023883a 	mov	r17,r2
    94bc:	80c0004c 	andi	r3,r16,1
    94c0:	183ff926 	beq	r3,zero,94a8 <__alt_data_end+0xfffb3d78>
    94c4:	900b883a 	mov	r5,r18
    94c8:	880d883a 	mov	r6,r17
    94cc:	9809883a 	mov	r4,r19
    94d0:	00091d40 	call	91d4 <__multiply>
    94d4:	90001b26 	beq	r18,zero,9544 <__pow5mult+0xe0>
    94d8:	91c00117 	ldw	r7,4(r18)
    94dc:	98c01317 	ldw	r3,76(r19)
    94e0:	8021d07a 	srai	r16,r16,1
    94e4:	39cf883a 	add	r7,r7,r7
    94e8:	39cf883a 	add	r7,r7,r7
    94ec:	19c7883a 	add	r3,r3,r7
    94f0:	19000017 	ldw	r4,0(r3)
    94f4:	91000015 	stw	r4,0(r18)
    94f8:	1c800015 	stw	r18,0(r3)
    94fc:	1025883a 	mov	r18,r2
    9500:	803feb1e 	bne	r16,zero,94b0 <__alt_data_end+0xfffb3d80>
    9504:	9005883a 	mov	r2,r18
    9508:	dfc00517 	ldw	ra,20(sp)
    950c:	dd000417 	ldw	r20,16(sp)
    9510:	dcc00317 	ldw	r19,12(sp)
    9514:	dc800217 	ldw	r18,8(sp)
    9518:	dc400117 	ldw	r17,4(sp)
    951c:	dc000017 	ldw	r16,0(sp)
    9520:	dec00604 	addi	sp,sp,24
    9524:	f800283a 	ret
    9528:	9809883a 	mov	r4,r19
    952c:	880b883a 	mov	r5,r17
    9530:	880d883a 	mov	r6,r17
    9534:	00091d40 	call	91d4 <__multiply>
    9538:	88800015 	stw	r2,0(r17)
    953c:	10000015 	stw	zero,0(r2)
    9540:	003fdd06 	br	94b8 <__alt_data_end+0xfffb3d88>
    9544:	1025883a 	mov	r18,r2
    9548:	003fd706 	br	94a8 <__alt_data_end+0xfffb3d78>
    954c:	10bfffc4 	addi	r2,r2,-1
    9550:	1085883a 	add	r2,r2,r2
    9554:	00c00074 	movhi	r3,1
    9558:	18caa304 	addi	r3,r3,10892
    955c:	1085883a 	add	r2,r2,r2
    9560:	1885883a 	add	r2,r3,r2
    9564:	11800017 	ldw	r6,0(r2)
    9568:	000f883a 	mov	r7,zero
    956c:	0008e400 	call	8e40 <__multadd>
    9570:	1025883a 	mov	r18,r2
    9574:	003fc706 	br	9494 <__alt_data_end+0xfffb3d64>
    9578:	05000044 	movi	r20,1
    957c:	9809883a 	mov	r4,r19
    9580:	a00b883a 	mov	r5,r20
    9584:	0008d700 	call	8d70 <_Balloc>
    9588:	1023883a 	mov	r17,r2
    958c:	00809c44 	movi	r2,625
    9590:	88800515 	stw	r2,20(r17)
    9594:	8d000415 	stw	r20,16(r17)
    9598:	9c401215 	stw	r17,72(r19)
    959c:	88000015 	stw	zero,0(r17)
    95a0:	003fc606 	br	94bc <__alt_data_end+0xfffb3d8c>

000095a4 <__lshift>:
    95a4:	defff904 	addi	sp,sp,-28
    95a8:	dd000415 	stw	r20,16(sp)
    95ac:	dcc00315 	stw	r19,12(sp)
    95b0:	3029d17a 	srai	r20,r6,5
    95b4:	2cc00417 	ldw	r19,16(r5)
    95b8:	28800217 	ldw	r2,8(r5)
    95bc:	dd400515 	stw	r21,20(sp)
    95c0:	a4e7883a 	add	r19,r20,r19
    95c4:	dc800215 	stw	r18,8(sp)
    95c8:	dc400115 	stw	r17,4(sp)
    95cc:	dc000015 	stw	r16,0(sp)
    95d0:	dfc00615 	stw	ra,24(sp)
    95d4:	9c000044 	addi	r16,r19,1
    95d8:	2823883a 	mov	r17,r5
    95dc:	302b883a 	mov	r21,r6
    95e0:	2025883a 	mov	r18,r4
    95e4:	29400117 	ldw	r5,4(r5)
    95e8:	1400030e 	bge	r2,r16,95f8 <__lshift+0x54>
    95ec:	1085883a 	add	r2,r2,r2
    95f0:	29400044 	addi	r5,r5,1
    95f4:	143ffd16 	blt	r2,r16,95ec <__alt_data_end+0xfffb3ebc>
    95f8:	9009883a 	mov	r4,r18
    95fc:	0008d700 	call	8d70 <_Balloc>
    9600:	11c00504 	addi	r7,r2,20
    9604:	0500090e 	bge	zero,r20,962c <__lshift+0x88>
    9608:	3811883a 	mov	r8,r7
    960c:	0007883a 	mov	r3,zero
    9610:	40000015 	stw	zero,0(r8)
    9614:	18c00044 	addi	r3,r3,1
    9618:	42000104 	addi	r8,r8,4
    961c:	1d3ffc1e 	bne	r3,r20,9610 <__alt_data_end+0xfffb3ee0>
    9620:	18c7883a 	add	r3,r3,r3
    9624:	18c7883a 	add	r3,r3,r3
    9628:	38cf883a 	add	r7,r7,r3
    962c:	89000417 	ldw	r4,16(r17)
    9630:	88c00504 	addi	r3,r17,20
    9634:	a98007cc 	andi	r6,r21,31
    9638:	2109883a 	add	r4,r4,r4
    963c:	2109883a 	add	r4,r4,r4
    9640:	1909883a 	add	r4,r3,r4
    9644:	30002326 	beq	r6,zero,96d4 <__lshift+0x130>
    9648:	01400804 	movi	r5,32
    964c:	298bc83a 	sub	r5,r5,r6
    9650:	0013883a 	mov	r9,zero
    9654:	1a000017 	ldw	r8,0(r3)
    9658:	3815883a 	mov	r10,r7
    965c:	39c00104 	addi	r7,r7,4
    9660:	4190983a 	sll	r8,r8,r6
    9664:	18c00104 	addi	r3,r3,4
    9668:	4a10b03a 	or	r8,r9,r8
    966c:	3a3fff15 	stw	r8,-4(r7)
    9670:	1a3fff17 	ldw	r8,-4(r3)
    9674:	4152d83a 	srl	r9,r8,r5
    9678:	193ff636 	bltu	r3,r4,9654 <__alt_data_end+0xfffb3f24>
    967c:	52400115 	stw	r9,4(r10)
    9680:	48000126 	beq	r9,zero,9688 <__lshift+0xe4>
    9684:	9c000084 	addi	r16,r19,2
    9688:	89000117 	ldw	r4,4(r17)
    968c:	90c01317 	ldw	r3,76(r18)
    9690:	843fffc4 	addi	r16,r16,-1
    9694:	2109883a 	add	r4,r4,r4
    9698:	2109883a 	add	r4,r4,r4
    969c:	1907883a 	add	r3,r3,r4
    96a0:	19000017 	ldw	r4,0(r3)
    96a4:	14000415 	stw	r16,16(r2)
    96a8:	89000015 	stw	r4,0(r17)
    96ac:	1c400015 	stw	r17,0(r3)
    96b0:	dfc00617 	ldw	ra,24(sp)
    96b4:	dd400517 	ldw	r21,20(sp)
    96b8:	dd000417 	ldw	r20,16(sp)
    96bc:	dcc00317 	ldw	r19,12(sp)
    96c0:	dc800217 	ldw	r18,8(sp)
    96c4:	dc400117 	ldw	r17,4(sp)
    96c8:	dc000017 	ldw	r16,0(sp)
    96cc:	dec00704 	addi	sp,sp,28
    96d0:	f800283a 	ret
    96d4:	19400017 	ldw	r5,0(r3)
    96d8:	39c00104 	addi	r7,r7,4
    96dc:	18c00104 	addi	r3,r3,4
    96e0:	397fff15 	stw	r5,-4(r7)
    96e4:	193ffb36 	bltu	r3,r4,96d4 <__alt_data_end+0xfffb3fa4>
    96e8:	003fe706 	br	9688 <__alt_data_end+0xfffb3f58>

000096ec <__mcmp>:
    96ec:	20800417 	ldw	r2,16(r4)
    96f0:	28c00417 	ldw	r3,16(r5)
    96f4:	10c5c83a 	sub	r2,r2,r3
    96f8:	1000111e 	bne	r2,zero,9740 <__mcmp+0x54>
    96fc:	18c7883a 	add	r3,r3,r3
    9700:	18c7883a 	add	r3,r3,r3
    9704:	21000504 	addi	r4,r4,20
    9708:	29400504 	addi	r5,r5,20
    970c:	20c5883a 	add	r2,r4,r3
    9710:	28cb883a 	add	r5,r5,r3
    9714:	00000106 	br	971c <__mcmp+0x30>
    9718:	20800a2e 	bgeu	r4,r2,9744 <__mcmp+0x58>
    971c:	10bfff04 	addi	r2,r2,-4
    9720:	297fff04 	addi	r5,r5,-4
    9724:	11800017 	ldw	r6,0(r2)
    9728:	28c00017 	ldw	r3,0(r5)
    972c:	30fffa26 	beq	r6,r3,9718 <__alt_data_end+0xfffb3fe8>
    9730:	30c00236 	bltu	r6,r3,973c <__mcmp+0x50>
    9734:	00800044 	movi	r2,1
    9738:	f800283a 	ret
    973c:	00bfffc4 	movi	r2,-1
    9740:	f800283a 	ret
    9744:	0005883a 	mov	r2,zero
    9748:	f800283a 	ret

0000974c <__mdiff>:
    974c:	defffb04 	addi	sp,sp,-20
    9750:	dc000015 	stw	r16,0(sp)
    9754:	2821883a 	mov	r16,r5
    9758:	dcc00315 	stw	r19,12(sp)
    975c:	300b883a 	mov	r5,r6
    9760:	2027883a 	mov	r19,r4
    9764:	8009883a 	mov	r4,r16
    9768:	dc800215 	stw	r18,8(sp)
    976c:	dfc00415 	stw	ra,16(sp)
    9770:	dc400115 	stw	r17,4(sp)
    9774:	3025883a 	mov	r18,r6
    9778:	00096ec0 	call	96ec <__mcmp>
    977c:	10005226 	beq	r2,zero,98c8 <__mdiff+0x17c>
    9780:	10004c16 	blt	r2,zero,98b4 <__mdiff+0x168>
    9784:	0023883a 	mov	r17,zero
    9788:	81400117 	ldw	r5,4(r16)
    978c:	9809883a 	mov	r4,r19
    9790:	0008d700 	call	8d70 <_Balloc>
    9794:	83400417 	ldw	r13,16(r16)
    9798:	93800417 	ldw	r14,16(r18)
    979c:	81000504 	addi	r4,r16,20
    97a0:	6b59883a 	add	r12,r13,r13
    97a4:	739d883a 	add	r14,r14,r14
    97a8:	6319883a 	add	r12,r12,r12
    97ac:	91800504 	addi	r6,r18,20
    97b0:	739d883a 	add	r14,r14,r14
    97b4:	14400315 	stw	r17,12(r2)
    97b8:	2319883a 	add	r12,r4,r12
    97bc:	339d883a 	add	r14,r6,r14
    97c0:	12400504 	addi	r9,r2,20
    97c4:	0007883a 	mov	r3,zero
    97c8:	22000017 	ldw	r8,0(r4)
    97cc:	32800017 	ldw	r10,0(r6)
    97d0:	4ac00104 	addi	r11,r9,4
    97d4:	41ffffcc 	andi	r7,r8,65535
    97d8:	38c7883a 	add	r3,r7,r3
    97dc:	51ffffcc 	andi	r7,r10,65535
    97e0:	19cfc83a 	sub	r7,r3,r7
    97e4:	4010d43a 	srli	r8,r8,16
    97e8:	5014d43a 	srli	r10,r10,16
    97ec:	3807d43a 	srai	r3,r7,16
    97f0:	39ffffcc 	andi	r7,r7,65535
    97f4:	4291c83a 	sub	r8,r8,r10
    97f8:	40c7883a 	add	r3,r8,r3
    97fc:	1810943a 	slli	r8,r3,16
    9800:	31800104 	addi	r6,r6,4
    9804:	21000104 	addi	r4,r4,4
    9808:	41ceb03a 	or	r7,r8,r7
    980c:	49c00015 	stw	r7,0(r9)
    9810:	1807d43a 	srai	r3,r3,16
    9814:	580b883a 	mov	r5,r11
    9818:	5813883a 	mov	r9,r11
    981c:	33bfea36 	bltu	r6,r14,97c8 <__alt_data_end+0xfffb4098>
    9820:	2011883a 	mov	r8,r4
    9824:	2300152e 	bgeu	r4,r12,987c <__mdiff+0x130>
    9828:	21400017 	ldw	r5,0(r4)
    982c:	4a400104 	addi	r9,r9,4
    9830:	21000104 	addi	r4,r4,4
    9834:	29ffffcc 	andi	r7,r5,65535
    9838:	38c7883a 	add	r3,r7,r3
    983c:	280ad43a 	srli	r5,r5,16
    9840:	180dd43a 	srai	r6,r3,16
    9844:	19ffffcc 	andi	r7,r3,65535
    9848:	3147883a 	add	r3,r6,r5
    984c:	180a943a 	slli	r5,r3,16
    9850:	1807d43a 	srai	r3,r3,16
    9854:	29ceb03a 	or	r7,r5,r7
    9858:	49ffff15 	stw	r7,-4(r9)
    985c:	233ff236 	bltu	r4,r12,9828 <__alt_data_end+0xfffb40f8>
    9860:	0206303a 	nor	r3,zero,r8
    9864:	1b07883a 	add	r3,r3,r12
    9868:	1806d0ba 	srli	r3,r3,2
    986c:	18c00044 	addi	r3,r3,1
    9870:	18c7883a 	add	r3,r3,r3
    9874:	18c7883a 	add	r3,r3,r3
    9878:	58cb883a 	add	r5,r11,r3
    987c:	28ffff04 	addi	r3,r5,-4
    9880:	3800041e 	bne	r7,zero,9894 <__mdiff+0x148>
    9884:	18ffff04 	addi	r3,r3,-4
    9888:	19000017 	ldw	r4,0(r3)
    988c:	6b7fffc4 	addi	r13,r13,-1
    9890:	203ffc26 	beq	r4,zero,9884 <__alt_data_end+0xfffb4154>
    9894:	13400415 	stw	r13,16(r2)
    9898:	dfc00417 	ldw	ra,16(sp)
    989c:	dcc00317 	ldw	r19,12(sp)
    98a0:	dc800217 	ldw	r18,8(sp)
    98a4:	dc400117 	ldw	r17,4(sp)
    98a8:	dc000017 	ldw	r16,0(sp)
    98ac:	dec00504 	addi	sp,sp,20
    98b0:	f800283a 	ret
    98b4:	8005883a 	mov	r2,r16
    98b8:	04400044 	movi	r17,1
    98bc:	9021883a 	mov	r16,r18
    98c0:	1025883a 	mov	r18,r2
    98c4:	003fb006 	br	9788 <__alt_data_end+0xfffb4058>
    98c8:	9809883a 	mov	r4,r19
    98cc:	000b883a 	mov	r5,zero
    98d0:	0008d700 	call	8d70 <_Balloc>
    98d4:	00c00044 	movi	r3,1
    98d8:	10c00415 	stw	r3,16(r2)
    98dc:	10000515 	stw	zero,20(r2)
    98e0:	003fed06 	br	9898 <__alt_data_end+0xfffb4168>

000098e4 <__ulp>:
    98e4:	295ffc2c 	andhi	r5,r5,32752
    98e8:	00bf3034 	movhi	r2,64704
    98ec:	2887883a 	add	r3,r5,r2
    98f0:	00c0020e 	bge	zero,r3,98fc <__ulp+0x18>
    98f4:	0005883a 	mov	r2,zero
    98f8:	f800283a 	ret
    98fc:	00c7c83a 	sub	r3,zero,r3
    9900:	180bd53a 	srai	r5,r3,20
    9904:	008004c4 	movi	r2,19
    9908:	11400a0e 	bge	r2,r5,9934 <__ulp+0x50>
    990c:	00800c84 	movi	r2,50
    9910:	0007883a 	mov	r3,zero
    9914:	11400516 	blt	r2,r5,992c <__ulp+0x48>
    9918:	00800cc4 	movi	r2,51
    991c:	114bc83a 	sub	r5,r2,r5
    9920:	00800044 	movi	r2,1
    9924:	1144983a 	sll	r2,r2,r5
    9928:	f800283a 	ret
    992c:	00800044 	movi	r2,1
    9930:	f800283a 	ret
    9934:	00800234 	movhi	r2,8
    9938:	1147d83a 	sra	r3,r2,r5
    993c:	0005883a 	mov	r2,zero
    9940:	f800283a 	ret

00009944 <__b2d>:
    9944:	defffa04 	addi	sp,sp,-24
    9948:	dc000015 	stw	r16,0(sp)
    994c:	24000417 	ldw	r16,16(r4)
    9950:	dc400115 	stw	r17,4(sp)
    9954:	24400504 	addi	r17,r4,20
    9958:	8421883a 	add	r16,r16,r16
    995c:	8421883a 	add	r16,r16,r16
    9960:	8c21883a 	add	r16,r17,r16
    9964:	dc800215 	stw	r18,8(sp)
    9968:	84bfff17 	ldw	r18,-4(r16)
    996c:	dd000415 	stw	r20,16(sp)
    9970:	dcc00315 	stw	r19,12(sp)
    9974:	9009883a 	mov	r4,r18
    9978:	2829883a 	mov	r20,r5
    997c:	dfc00515 	stw	ra,20(sp)
    9980:	00090800 	call	9080 <__hi0bits>
    9984:	00c00804 	movi	r3,32
    9988:	1887c83a 	sub	r3,r3,r2
    998c:	a0c00015 	stw	r3,0(r20)
    9990:	00c00284 	movi	r3,10
    9994:	84ffff04 	addi	r19,r16,-4
    9998:	18801216 	blt	r3,r2,99e4 <__b2d+0xa0>
    999c:	014002c4 	movi	r5,11
    99a0:	2889c83a 	sub	r4,r5,r2
    99a4:	9106d83a 	srl	r3,r18,r4
    99a8:	18cffc34 	orhi	r3,r3,16368
    99ac:	8cc0282e 	bgeu	r17,r19,9a50 <__b2d+0x10c>
    99b0:	817ffe17 	ldw	r5,-8(r16)
    99b4:	290ad83a 	srl	r5,r5,r4
    99b8:	10800544 	addi	r2,r2,21
    99bc:	9084983a 	sll	r2,r18,r2
    99c0:	2884b03a 	or	r2,r5,r2
    99c4:	dfc00517 	ldw	ra,20(sp)
    99c8:	dd000417 	ldw	r20,16(sp)
    99cc:	dcc00317 	ldw	r19,12(sp)
    99d0:	dc800217 	ldw	r18,8(sp)
    99d4:	dc400117 	ldw	r17,4(sp)
    99d8:	dc000017 	ldw	r16,0(sp)
    99dc:	dec00604 	addi	sp,sp,24
    99e0:	f800283a 	ret
    99e4:	113ffd44 	addi	r4,r2,-11
    99e8:	8cc00f2e 	bgeu	r17,r19,9a28 <__b2d+0xe4>
    99ec:	81bffe04 	addi	r6,r16,-8
    99f0:	817ffe17 	ldw	r5,-8(r16)
    99f4:	20001326 	beq	r4,zero,9a44 <__b2d+0x100>
    99f8:	00c00ac4 	movi	r3,43
    99fc:	1885c83a 	sub	r2,r3,r2
    9a00:	2886d83a 	srl	r3,r5,r2
    9a04:	9124983a 	sll	r18,r18,r4
    9a08:	90e4b03a 	or	r18,r18,r3
    9a0c:	90cffc34 	orhi	r3,r18,16368
    9a10:	8980112e 	bgeu	r17,r6,9a58 <__b2d+0x114>
    9a14:	81bffd17 	ldw	r6,-12(r16)
    9a18:	308cd83a 	srl	r6,r6,r2
    9a1c:	2904983a 	sll	r2,r5,r4
    9a20:	1184b03a 	or	r2,r2,r6
    9a24:	003fe706 	br	99c4 <__alt_data_end+0xfffb4294>
    9a28:	20000526 	beq	r4,zero,9a40 <__b2d+0xfc>
    9a2c:	9124983a 	sll	r18,r18,r4
    9a30:	000d883a 	mov	r6,zero
    9a34:	000b883a 	mov	r5,zero
    9a38:	90cffc34 	orhi	r3,r18,16368
    9a3c:	003ff706 	br	9a1c <__alt_data_end+0xfffb42ec>
    9a40:	000b883a 	mov	r5,zero
    9a44:	90cffc34 	orhi	r3,r18,16368
    9a48:	2805883a 	mov	r2,r5
    9a4c:	003fdd06 	br	99c4 <__alt_data_end+0xfffb4294>
    9a50:	000b883a 	mov	r5,zero
    9a54:	003fd806 	br	99b8 <__alt_data_end+0xfffb4288>
    9a58:	000d883a 	mov	r6,zero
    9a5c:	003fef06 	br	9a1c <__alt_data_end+0xfffb42ec>

00009a60 <__d2b>:
    9a60:	defff704 	addi	sp,sp,-36
    9a64:	dc000215 	stw	r16,8(sp)
    9a68:	3021883a 	mov	r16,r6
    9a6c:	dc400315 	stw	r17,12(sp)
    9a70:	8022907a 	slli	r17,r16,1
    9a74:	dd400715 	stw	r21,28(sp)
    9a78:	282b883a 	mov	r21,r5
    9a7c:	01400044 	movi	r5,1
    9a80:	dd000615 	stw	r20,24(sp)
    9a84:	dcc00515 	stw	r19,20(sp)
    9a88:	dc800415 	stw	r18,16(sp)
    9a8c:	dfc00815 	stw	ra,32(sp)
    9a90:	3829883a 	mov	r20,r7
    9a94:	dc800917 	ldw	r18,36(sp)
    9a98:	8822d57a 	srli	r17,r17,21
    9a9c:	0008d700 	call	8d70 <_Balloc>
    9aa0:	1027883a 	mov	r19,r2
    9aa4:	00800434 	movhi	r2,16
    9aa8:	10bfffc4 	addi	r2,r2,-1
    9aac:	808c703a 	and	r6,r16,r2
    9ab0:	88000126 	beq	r17,zero,9ab8 <__d2b+0x58>
    9ab4:	31800434 	orhi	r6,r6,16
    9ab8:	d9800015 	stw	r6,0(sp)
    9abc:	a8001f26 	beq	r21,zero,9b3c <__d2b+0xdc>
    9ac0:	d9000104 	addi	r4,sp,4
    9ac4:	dd400115 	stw	r21,4(sp)
    9ac8:	00090e80 	call	90e8 <__lo0bits>
    9acc:	d8c00017 	ldw	r3,0(sp)
    9ad0:	1000291e 	bne	r2,zero,9b78 <__d2b+0x118>
    9ad4:	d9000117 	ldw	r4,4(sp)
    9ad8:	99000515 	stw	r4,20(r19)
    9adc:	1820c03a 	cmpne	r16,r3,zero
    9ae0:	84000044 	addi	r16,r16,1
    9ae4:	98c00615 	stw	r3,24(r19)
    9ae8:	9c000415 	stw	r16,16(r19)
    9aec:	88001b1e 	bne	r17,zero,9b5c <__d2b+0xfc>
    9af0:	800690ba 	slli	r3,r16,2
    9af4:	10bef384 	addi	r2,r2,-1074
    9af8:	a0800015 	stw	r2,0(r20)
    9afc:	98c5883a 	add	r2,r19,r3
    9b00:	11000417 	ldw	r4,16(r2)
    9b04:	8020917a 	slli	r16,r16,5
    9b08:	00090800 	call	9080 <__hi0bits>
    9b0c:	8085c83a 	sub	r2,r16,r2
    9b10:	90800015 	stw	r2,0(r18)
    9b14:	9805883a 	mov	r2,r19
    9b18:	dfc00817 	ldw	ra,32(sp)
    9b1c:	dd400717 	ldw	r21,28(sp)
    9b20:	dd000617 	ldw	r20,24(sp)
    9b24:	dcc00517 	ldw	r19,20(sp)
    9b28:	dc800417 	ldw	r18,16(sp)
    9b2c:	dc400317 	ldw	r17,12(sp)
    9b30:	dc000217 	ldw	r16,8(sp)
    9b34:	dec00904 	addi	sp,sp,36
    9b38:	f800283a 	ret
    9b3c:	d809883a 	mov	r4,sp
    9b40:	00090e80 	call	90e8 <__lo0bits>
    9b44:	d8c00017 	ldw	r3,0(sp)
    9b48:	04000044 	movi	r16,1
    9b4c:	9c000415 	stw	r16,16(r19)
    9b50:	98c00515 	stw	r3,20(r19)
    9b54:	10800804 	addi	r2,r2,32
    9b58:	883fe526 	beq	r17,zero,9af0 <__alt_data_end+0xfffb43c0>
    9b5c:	8c7ef344 	addi	r17,r17,-1075
    9b60:	88a3883a 	add	r17,r17,r2
    9b64:	00c00d44 	movi	r3,53
    9b68:	a4400015 	stw	r17,0(r20)
    9b6c:	1885c83a 	sub	r2,r3,r2
    9b70:	90800015 	stw	r2,0(r18)
    9b74:	003fe706 	br	9b14 <__alt_data_end+0xfffb43e4>
    9b78:	01000804 	movi	r4,32
    9b7c:	2089c83a 	sub	r4,r4,r2
    9b80:	1908983a 	sll	r4,r3,r4
    9b84:	d9400117 	ldw	r5,4(sp)
    9b88:	1886d83a 	srl	r3,r3,r2
    9b8c:	2148b03a 	or	r4,r4,r5
    9b90:	99000515 	stw	r4,20(r19)
    9b94:	d8c00015 	stw	r3,0(sp)
    9b98:	003fd006 	br	9adc <__alt_data_end+0xfffb43ac>

00009b9c <__ratio>:
    9b9c:	defff904 	addi	sp,sp,-28
    9ba0:	dc400315 	stw	r17,12(sp)
    9ba4:	2823883a 	mov	r17,r5
    9ba8:	d9400104 	addi	r5,sp,4
    9bac:	dfc00615 	stw	ra,24(sp)
    9bb0:	dcc00515 	stw	r19,20(sp)
    9bb4:	dc800415 	stw	r18,16(sp)
    9bb8:	2027883a 	mov	r19,r4
    9bbc:	dc000215 	stw	r16,8(sp)
    9bc0:	00099440 	call	9944 <__b2d>
    9bc4:	8809883a 	mov	r4,r17
    9bc8:	d80b883a 	mov	r5,sp
    9bcc:	1025883a 	mov	r18,r2
    9bd0:	1821883a 	mov	r16,r3
    9bd4:	00099440 	call	9944 <__b2d>
    9bd8:	8a400417 	ldw	r9,16(r17)
    9bdc:	9a000417 	ldw	r8,16(r19)
    9be0:	100d883a 	mov	r6,r2
    9be4:	d8800017 	ldw	r2,0(sp)
    9be8:	4251c83a 	sub	r8,r8,r9
    9bec:	4012917a 	slli	r9,r8,5
    9bf0:	da000117 	ldw	r8,4(sp)
    9bf4:	4091c83a 	sub	r8,r8,r2
    9bf8:	4251883a 	add	r8,r8,r9
    9bfc:	02000d0e 	bge	zero,r8,9c34 <__ratio+0x98>
    9c00:	4010953a 	slli	r8,r8,20
    9c04:	4421883a 	add	r16,r8,r16
    9c08:	9009883a 	mov	r4,r18
    9c0c:	800b883a 	mov	r5,r16
    9c10:	180f883a 	mov	r7,r3
    9c14:	000da800 	call	da80 <__divdf3>
    9c18:	dfc00617 	ldw	ra,24(sp)
    9c1c:	dcc00517 	ldw	r19,20(sp)
    9c20:	dc800417 	ldw	r18,16(sp)
    9c24:	dc400317 	ldw	r17,12(sp)
    9c28:	dc000217 	ldw	r16,8(sp)
    9c2c:	dec00704 	addi	sp,sp,28
    9c30:	f800283a 	ret
    9c34:	4010953a 	slli	r8,r8,20
    9c38:	1a07c83a 	sub	r3,r3,r8
    9c3c:	003ff206 	br	9c08 <__alt_data_end+0xfffb44d8>

00009c40 <_mprec_log10>:
    9c40:	defffe04 	addi	sp,sp,-8
    9c44:	dc000015 	stw	r16,0(sp)
    9c48:	dfc00115 	stw	ra,4(sp)
    9c4c:	008005c4 	movi	r2,23
    9c50:	2021883a 	mov	r16,r4
    9c54:	11000d0e 	bge	r2,r4,9c8c <_mprec_log10+0x4c>
    9c58:	0005883a 	mov	r2,zero
    9c5c:	00cffc34 	movhi	r3,16368
    9c60:	843fffc4 	addi	r16,r16,-1
    9c64:	1009883a 	mov	r4,r2
    9c68:	180b883a 	mov	r5,r3
    9c6c:	000d883a 	mov	r6,zero
    9c70:	01d00934 	movhi	r7,16420
    9c74:	000e6440 	call	e644 <__muldf3>
    9c78:	803ff91e 	bne	r16,zero,9c60 <__alt_data_end+0xfffb4530>
    9c7c:	dfc00117 	ldw	ra,4(sp)
    9c80:	dc000017 	ldw	r16,0(sp)
    9c84:	dec00204 	addi	sp,sp,8
    9c88:	f800283a 	ret
    9c8c:	202090fa 	slli	r16,r4,3
    9c90:	00800074 	movhi	r2,1
    9c94:	108aba04 	addi	r2,r2,10984
    9c98:	1421883a 	add	r16,r2,r16
    9c9c:	80800017 	ldw	r2,0(r16)
    9ca0:	80c00117 	ldw	r3,4(r16)
    9ca4:	dfc00117 	ldw	ra,4(sp)
    9ca8:	dc000017 	ldw	r16,0(sp)
    9cac:	dec00204 	addi	sp,sp,8
    9cb0:	f800283a 	ret

00009cb4 <__copybits>:
    9cb4:	297fffc4 	addi	r5,r5,-1
    9cb8:	280fd17a 	srai	r7,r5,5
    9cbc:	30c00417 	ldw	r3,16(r6)
    9cc0:	30800504 	addi	r2,r6,20
    9cc4:	39c00044 	addi	r7,r7,1
    9cc8:	18c7883a 	add	r3,r3,r3
    9ccc:	39cf883a 	add	r7,r7,r7
    9cd0:	18c7883a 	add	r3,r3,r3
    9cd4:	39cf883a 	add	r7,r7,r7
    9cd8:	10c7883a 	add	r3,r2,r3
    9cdc:	21cf883a 	add	r7,r4,r7
    9ce0:	10c00d2e 	bgeu	r2,r3,9d18 <__copybits+0x64>
    9ce4:	200b883a 	mov	r5,r4
    9ce8:	12000017 	ldw	r8,0(r2)
    9cec:	29400104 	addi	r5,r5,4
    9cf0:	10800104 	addi	r2,r2,4
    9cf4:	2a3fff15 	stw	r8,-4(r5)
    9cf8:	10fffb36 	bltu	r2,r3,9ce8 <__alt_data_end+0xfffb45b8>
    9cfc:	1985c83a 	sub	r2,r3,r6
    9d00:	10bffac4 	addi	r2,r2,-21
    9d04:	1004d0ba 	srli	r2,r2,2
    9d08:	10800044 	addi	r2,r2,1
    9d0c:	1085883a 	add	r2,r2,r2
    9d10:	1085883a 	add	r2,r2,r2
    9d14:	2089883a 	add	r4,r4,r2
    9d18:	21c0032e 	bgeu	r4,r7,9d28 <__copybits+0x74>
    9d1c:	20000015 	stw	zero,0(r4)
    9d20:	21000104 	addi	r4,r4,4
    9d24:	21fffd36 	bltu	r4,r7,9d1c <__alt_data_end+0xfffb45ec>
    9d28:	f800283a 	ret

00009d2c <__any_on>:
    9d2c:	20c00417 	ldw	r3,16(r4)
    9d30:	2805d17a 	srai	r2,r5,5
    9d34:	21000504 	addi	r4,r4,20
    9d38:	18800d0e 	bge	r3,r2,9d70 <__any_on+0x44>
    9d3c:	18c7883a 	add	r3,r3,r3
    9d40:	18c7883a 	add	r3,r3,r3
    9d44:	20c7883a 	add	r3,r4,r3
    9d48:	20c0192e 	bgeu	r4,r3,9db0 <__any_on+0x84>
    9d4c:	18bfff17 	ldw	r2,-4(r3)
    9d50:	18ffff04 	addi	r3,r3,-4
    9d54:	1000041e 	bne	r2,zero,9d68 <__any_on+0x3c>
    9d58:	20c0142e 	bgeu	r4,r3,9dac <__any_on+0x80>
    9d5c:	18ffff04 	addi	r3,r3,-4
    9d60:	19400017 	ldw	r5,0(r3)
    9d64:	283ffc26 	beq	r5,zero,9d58 <__alt_data_end+0xfffb4628>
    9d68:	00800044 	movi	r2,1
    9d6c:	f800283a 	ret
    9d70:	10c00a0e 	bge	r2,r3,9d9c <__any_on+0x70>
    9d74:	1085883a 	add	r2,r2,r2
    9d78:	1085883a 	add	r2,r2,r2
    9d7c:	294007cc 	andi	r5,r5,31
    9d80:	2087883a 	add	r3,r4,r2
    9d84:	283ff026 	beq	r5,zero,9d48 <__alt_data_end+0xfffb4618>
    9d88:	19800017 	ldw	r6,0(r3)
    9d8c:	3144d83a 	srl	r2,r6,r5
    9d90:	114a983a 	sll	r5,r2,r5
    9d94:	29bff41e 	bne	r5,r6,9d68 <__alt_data_end+0xfffb4638>
    9d98:	003feb06 	br	9d48 <__alt_data_end+0xfffb4618>
    9d9c:	1085883a 	add	r2,r2,r2
    9da0:	1085883a 	add	r2,r2,r2
    9da4:	2087883a 	add	r3,r4,r2
    9da8:	003fe706 	br	9d48 <__alt_data_end+0xfffb4618>
    9dac:	f800283a 	ret
    9db0:	0005883a 	mov	r2,zero
    9db4:	f800283a 	ret

00009db8 <_realloc_r>:
    9db8:	defff604 	addi	sp,sp,-40
    9dbc:	dcc00315 	stw	r19,12(sp)
    9dc0:	dc400115 	stw	r17,4(sp)
    9dc4:	dfc00915 	stw	ra,36(sp)
    9dc8:	df000815 	stw	fp,32(sp)
    9dcc:	ddc00715 	stw	r23,28(sp)
    9dd0:	dd800615 	stw	r22,24(sp)
    9dd4:	dd400515 	stw	r21,20(sp)
    9dd8:	dd000415 	stw	r20,16(sp)
    9ddc:	dc800215 	stw	r18,8(sp)
    9de0:	dc000015 	stw	r16,0(sp)
    9de4:	2827883a 	mov	r19,r5
    9de8:	3023883a 	mov	r17,r6
    9dec:	2800bf26 	beq	r5,zero,a0ec <_realloc_r+0x334>
    9df0:	2025883a 	mov	r18,r4
    9df4:	000ffc00 	call	ffc0 <__malloc_lock>
    9df8:	98ffff17 	ldw	r3,-4(r19)
    9dfc:	01bfff04 	movi	r6,-4
    9e00:	890002c4 	addi	r4,r17,11
    9e04:	01c00584 	movi	r7,22
    9e08:	9d7ffe04 	addi	r21,r19,-8
    9e0c:	19a0703a 	and	r16,r3,r6
    9e10:	39003f2e 	bgeu	r7,r4,9f10 <_realloc_r+0x158>
    9e14:	053ffe04 	movi	r20,-8
    9e18:	2528703a 	and	r20,r4,r20
    9e1c:	a00f883a 	mov	r7,r20
    9e20:	a0008216 	blt	r20,zero,a02c <_realloc_r+0x274>
    9e24:	a4408136 	bltu	r20,r17,a02c <_realloc_r+0x274>
    9e28:	81c03c0e 	bge	r16,r7,9f1c <_realloc_r+0x164>
    9e2c:	07000074 	movhi	fp,1
    9e30:	e70b5b04 	addi	fp,fp,11628
    9e34:	e1000217 	ldw	r4,8(fp)
    9e38:	ac05883a 	add	r2,r21,r16
    9e3c:	2080bf26 	beq	r4,r2,a13c <_realloc_r+0x384>
    9e40:	11000117 	ldw	r4,4(r2)
    9e44:	023fff84 	movi	r8,-2
    9e48:	2210703a 	and	r8,r4,r8
    9e4c:	1211883a 	add	r8,r2,r8
    9e50:	41400117 	ldw	r5,4(r8)
    9e54:	2940004c 	andi	r5,r5,1
    9e58:	28004a1e 	bne	r5,zero,9f84 <_realloc_r+0x1cc>
    9e5c:	017fff04 	movi	r5,-4
    9e60:	2148703a 	and	r4,r4,r5
    9e64:	2409883a 	add	r4,r4,r16
    9e68:	21c0ad0e 	bge	r4,r7,a120 <_realloc_r+0x368>
    9e6c:	18c0004c 	andi	r3,r3,1
    9e70:	18007f1e 	bne	r3,zero,a070 <_realloc_r+0x2b8>
    9e74:	9dfffe17 	ldw	r23,-8(r19)
    9e78:	adefc83a 	sub	r23,r21,r23
    9e7c:	bd800117 	ldw	r22,4(r23)
    9e80:	b14a703a 	and	r5,r22,r5
    9e84:	216d883a 	add	r22,r4,r5
    9e88:	b1c04516 	blt	r22,r7,9fa0 <_realloc_r+0x1e8>
    9e8c:	10c00317 	ldw	r3,12(r2)
    9e90:	10800217 	ldw	r2,8(r2)
    9e94:	81bfff04 	addi	r6,r16,-4
    9e98:	bc400204 	addi	r17,r23,8
    9e9c:	10c00315 	stw	r3,12(r2)
    9ea0:	18800215 	stw	r2,8(r3)
    9ea4:	b9400217 	ldw	r5,8(r23)
    9ea8:	b8c00317 	ldw	r3,12(r23)
    9eac:	00800904 	movi	r2,36
    9eb0:	28c00315 	stw	r3,12(r5)
    9eb4:	19400215 	stw	r5,8(r3)
    9eb8:	1180ef36 	bltu	r2,r6,a278 <_realloc_r+0x4c0>
    9ebc:	008004c4 	movi	r2,19
    9ec0:	1180da2e 	bgeu	r2,r6,a22c <_realloc_r+0x474>
    9ec4:	98800017 	ldw	r2,0(r19)
    9ec8:	b8800215 	stw	r2,8(r23)
    9ecc:	98800117 	ldw	r2,4(r19)
    9ed0:	b8800315 	stw	r2,12(r23)
    9ed4:	008006c4 	movi	r2,27
    9ed8:	1180fc2e 	bgeu	r2,r6,a2cc <_realloc_r+0x514>
    9edc:	98800217 	ldw	r2,8(r19)
    9ee0:	b8800415 	stw	r2,16(r23)
    9ee4:	98800317 	ldw	r2,12(r19)
    9ee8:	b8800515 	stw	r2,20(r23)
    9eec:	00800904 	movi	r2,36
    9ef0:	3080421e 	bne	r6,r2,9ffc <_realloc_r+0x244>
    9ef4:	98800417 	ldw	r2,16(r19)
    9ef8:	9cc00604 	addi	r19,r19,24
    9efc:	b8c00804 	addi	r3,r23,32
    9f00:	b8800615 	stw	r2,24(r23)
    9f04:	98bfff17 	ldw	r2,-4(r19)
    9f08:	b8800715 	stw	r2,28(r23)
    9f0c:	00003d06 	br	a004 <_realloc_r+0x24c>
    9f10:	01c00404 	movi	r7,16
    9f14:	3829883a 	mov	r20,r7
    9f18:	003fc206 	br	9e24 <__alt_data_end+0xfffb46f4>
    9f1c:	9823883a 	mov	r17,r19
    9f20:	850fc83a 	sub	r7,r16,r20
    9f24:	008003c4 	movi	r2,15
    9f28:	18c0004c 	andi	r3,r3,1
    9f2c:	11c04336 	bltu	r2,r7,a03c <_realloc_r+0x284>
    9f30:	1c06b03a 	or	r3,r3,r16
    9f34:	a8c00115 	stw	r3,4(r21)
    9f38:	ac21883a 	add	r16,r21,r16
    9f3c:	80c00117 	ldw	r3,4(r16)
    9f40:	18c00054 	ori	r3,r3,1
    9f44:	80c00115 	stw	r3,4(r16)
    9f48:	9009883a 	mov	r4,r18
    9f4c:	000ffe00 	call	ffe0 <__malloc_unlock>
    9f50:	8805883a 	mov	r2,r17
    9f54:	dfc00917 	ldw	ra,36(sp)
    9f58:	df000817 	ldw	fp,32(sp)
    9f5c:	ddc00717 	ldw	r23,28(sp)
    9f60:	dd800617 	ldw	r22,24(sp)
    9f64:	dd400517 	ldw	r21,20(sp)
    9f68:	dd000417 	ldw	r20,16(sp)
    9f6c:	dcc00317 	ldw	r19,12(sp)
    9f70:	dc800217 	ldw	r18,8(sp)
    9f74:	dc400117 	ldw	r17,4(sp)
    9f78:	dc000017 	ldw	r16,0(sp)
    9f7c:	dec00a04 	addi	sp,sp,40
    9f80:	f800283a 	ret
    9f84:	18c0004c 	andi	r3,r3,1
    9f88:	1800391e 	bne	r3,zero,a070 <_realloc_r+0x2b8>
    9f8c:	9dfffe17 	ldw	r23,-8(r19)
    9f90:	00bfff04 	movi	r2,-4
    9f94:	adefc83a 	sub	r23,r21,r23
    9f98:	b9400117 	ldw	r5,4(r23)
    9f9c:	288a703a 	and	r5,r5,r2
    9fa0:	2c2d883a 	add	r22,r5,r16
    9fa4:	b1c03216 	blt	r22,r7,a070 <_realloc_r+0x2b8>
    9fa8:	b8800317 	ldw	r2,12(r23)
    9fac:	b8c00217 	ldw	r3,8(r23)
    9fb0:	81bfff04 	addi	r6,r16,-4
    9fb4:	01000904 	movi	r4,36
    9fb8:	18800315 	stw	r2,12(r3)
    9fbc:	10c00215 	stw	r3,8(r2)
    9fc0:	bc400204 	addi	r17,r23,8
    9fc4:	2180ac36 	bltu	r4,r6,a278 <_realloc_r+0x4c0>
    9fc8:	008004c4 	movi	r2,19
    9fcc:	1180972e 	bgeu	r2,r6,a22c <_realloc_r+0x474>
    9fd0:	98800017 	ldw	r2,0(r19)
    9fd4:	b8800215 	stw	r2,8(r23)
    9fd8:	98800117 	ldw	r2,4(r19)
    9fdc:	b8800315 	stw	r2,12(r23)
    9fe0:	008006c4 	movi	r2,27
    9fe4:	1180b92e 	bgeu	r2,r6,a2cc <_realloc_r+0x514>
    9fe8:	98800217 	ldw	r2,8(r19)
    9fec:	b8800415 	stw	r2,16(r23)
    9ff0:	98800317 	ldw	r2,12(r19)
    9ff4:	b8800515 	stw	r2,20(r23)
    9ff8:	313fbe26 	beq	r6,r4,9ef4 <__alt_data_end+0xfffb47c4>
    9ffc:	b8c00604 	addi	r3,r23,24
    a000:	9cc00404 	addi	r19,r19,16
    a004:	98800017 	ldw	r2,0(r19)
    a008:	b021883a 	mov	r16,r22
    a00c:	b82b883a 	mov	r21,r23
    a010:	18800015 	stw	r2,0(r3)
    a014:	98800117 	ldw	r2,4(r19)
    a018:	18800115 	stw	r2,4(r3)
    a01c:	98800217 	ldw	r2,8(r19)
    a020:	18800215 	stw	r2,8(r3)
    a024:	b8c00117 	ldw	r3,4(r23)
    a028:	003fbd06 	br	9f20 <__alt_data_end+0xfffb47f0>
    a02c:	00800304 	movi	r2,12
    a030:	90800015 	stw	r2,0(r18)
    a034:	0005883a 	mov	r2,zero
    a038:	003fc606 	br	9f54 <__alt_data_end+0xfffb4824>
    a03c:	1d06b03a 	or	r3,r3,r20
    a040:	ad0b883a 	add	r5,r21,r20
    a044:	a8c00115 	stw	r3,4(r21)
    a048:	38800054 	ori	r2,r7,1
    a04c:	28800115 	stw	r2,4(r5)
    a050:	29cf883a 	add	r7,r5,r7
    a054:	38800117 	ldw	r2,4(r7)
    a058:	9009883a 	mov	r4,r18
    a05c:	29400204 	addi	r5,r5,8
    a060:	10800054 	ori	r2,r2,1
    a064:	38800115 	stw	r2,4(r7)
    a068:	0007d340 	call	7d34 <_free_r>
    a06c:	003fb606 	br	9f48 <__alt_data_end+0xfffb4818>
    a070:	880b883a 	mov	r5,r17
    a074:	9009883a 	mov	r4,r18
    a078:	00030200 	call	3020 <_malloc_r>
    a07c:	1023883a 	mov	r17,r2
    a080:	1000aa26 	beq	r2,zero,a32c <_realloc_r+0x574>
    a084:	98ffff17 	ldw	r3,-4(r19)
    a088:	113ffe04 	addi	r4,r2,-8
    a08c:	00bfff84 	movi	r2,-2
    a090:	1884703a 	and	r2,r3,r2
    a094:	a885883a 	add	r2,r21,r2
    a098:	20808626 	beq	r4,r2,a2b4 <_realloc_r+0x4fc>
    a09c:	81bfff04 	addi	r6,r16,-4
    a0a0:	00800904 	movi	r2,36
    a0a4:	11807036 	bltu	r2,r6,a268 <_realloc_r+0x4b0>
    a0a8:	00c004c4 	movi	r3,19
    a0ac:	19805636 	bltu	r3,r6,a208 <_realloc_r+0x450>
    a0b0:	8805883a 	mov	r2,r17
    a0b4:	9807883a 	mov	r3,r19
    a0b8:	19000017 	ldw	r4,0(r3)
    a0bc:	11000015 	stw	r4,0(r2)
    a0c0:	19000117 	ldw	r4,4(r3)
    a0c4:	11000115 	stw	r4,4(r2)
    a0c8:	18c00217 	ldw	r3,8(r3)
    a0cc:	10c00215 	stw	r3,8(r2)
    a0d0:	980b883a 	mov	r5,r19
    a0d4:	9009883a 	mov	r4,r18
    a0d8:	0007d340 	call	7d34 <_free_r>
    a0dc:	9009883a 	mov	r4,r18
    a0e0:	000ffe00 	call	ffe0 <__malloc_unlock>
    a0e4:	8805883a 	mov	r2,r17
    a0e8:	003f9a06 	br	9f54 <__alt_data_end+0xfffb4824>
    a0ec:	300b883a 	mov	r5,r6
    a0f0:	dfc00917 	ldw	ra,36(sp)
    a0f4:	df000817 	ldw	fp,32(sp)
    a0f8:	ddc00717 	ldw	r23,28(sp)
    a0fc:	dd800617 	ldw	r22,24(sp)
    a100:	dd400517 	ldw	r21,20(sp)
    a104:	dd000417 	ldw	r20,16(sp)
    a108:	dcc00317 	ldw	r19,12(sp)
    a10c:	dc800217 	ldw	r18,8(sp)
    a110:	dc400117 	ldw	r17,4(sp)
    a114:	dc000017 	ldw	r16,0(sp)
    a118:	dec00a04 	addi	sp,sp,40
    a11c:	00030201 	jmpi	3020 <_malloc_r>
    a120:	11400317 	ldw	r5,12(r2)
    a124:	10800217 	ldw	r2,8(r2)
    a128:	9823883a 	mov	r17,r19
    a12c:	2021883a 	mov	r16,r4
    a130:	11400315 	stw	r5,12(r2)
    a134:	28800215 	stw	r2,8(r5)
    a138:	003f7906 	br	9f20 <__alt_data_end+0xfffb47f0>
    a13c:	21000117 	ldw	r4,4(r4)
    a140:	00bfff04 	movi	r2,-4
    a144:	a1800404 	addi	r6,r20,16
    a148:	2088703a 	and	r4,r4,r2
    a14c:	2409883a 	add	r4,r4,r16
    a150:	2180380e 	bge	r4,r6,a234 <_realloc_r+0x47c>
    a154:	18c0004c 	andi	r3,r3,1
    a158:	183fc51e 	bne	r3,zero,a070 <__alt_data_end+0xfffb4940>
    a15c:	9dfffe17 	ldw	r23,-8(r19)
    a160:	adefc83a 	sub	r23,r21,r23
    a164:	b9400117 	ldw	r5,4(r23)
    a168:	288a703a 	and	r5,r5,r2
    a16c:	216d883a 	add	r22,r4,r5
    a170:	b1bf8b16 	blt	r22,r6,9fa0 <__alt_data_end+0xfffb4870>
    a174:	b8800317 	ldw	r2,12(r23)
    a178:	b8c00217 	ldw	r3,8(r23)
    a17c:	81bfff04 	addi	r6,r16,-4
    a180:	01000904 	movi	r4,36
    a184:	18800315 	stw	r2,12(r3)
    a188:	10c00215 	stw	r3,8(r2)
    a18c:	bc400204 	addi	r17,r23,8
    a190:	21805a36 	bltu	r4,r6,a2fc <_realloc_r+0x544>
    a194:	008004c4 	movi	r2,19
    a198:	1180562e 	bgeu	r2,r6,a2f4 <_realloc_r+0x53c>
    a19c:	98800017 	ldw	r2,0(r19)
    a1a0:	b8800215 	stw	r2,8(r23)
    a1a4:	98800117 	ldw	r2,4(r19)
    a1a8:	b8800315 	stw	r2,12(r23)
    a1ac:	008006c4 	movi	r2,27
    a1b0:	11805636 	bltu	r2,r6,a30c <_realloc_r+0x554>
    a1b4:	b8800404 	addi	r2,r23,16
    a1b8:	9cc00204 	addi	r19,r19,8
    a1bc:	98c00017 	ldw	r3,0(r19)
    a1c0:	10c00015 	stw	r3,0(r2)
    a1c4:	98c00117 	ldw	r3,4(r19)
    a1c8:	10c00115 	stw	r3,4(r2)
    a1cc:	98c00217 	ldw	r3,8(r19)
    a1d0:	10c00215 	stw	r3,8(r2)
    a1d4:	bd07883a 	add	r3,r23,r20
    a1d8:	b505c83a 	sub	r2,r22,r20
    a1dc:	e0c00215 	stw	r3,8(fp)
    a1e0:	10800054 	ori	r2,r2,1
    a1e4:	18800115 	stw	r2,4(r3)
    a1e8:	b8800117 	ldw	r2,4(r23)
    a1ec:	9009883a 	mov	r4,r18
    a1f0:	1080004c 	andi	r2,r2,1
    a1f4:	a0a8b03a 	or	r20,r20,r2
    a1f8:	bd000115 	stw	r20,4(r23)
    a1fc:	000ffe00 	call	ffe0 <__malloc_unlock>
    a200:	8805883a 	mov	r2,r17
    a204:	003f5306 	br	9f54 <__alt_data_end+0xfffb4824>
    a208:	98c00017 	ldw	r3,0(r19)
    a20c:	88c00015 	stw	r3,0(r17)
    a210:	98c00117 	ldw	r3,4(r19)
    a214:	88c00115 	stw	r3,4(r17)
    a218:	00c006c4 	movi	r3,27
    a21c:	19801d36 	bltu	r3,r6,a294 <_realloc_r+0x4dc>
    a220:	88800204 	addi	r2,r17,8
    a224:	98c00204 	addi	r3,r19,8
    a228:	003fa306 	br	a0b8 <__alt_data_end+0xfffb4988>
    a22c:	8807883a 	mov	r3,r17
    a230:	003f7406 	br	a004 <__alt_data_end+0xfffb48d4>
    a234:	ad2b883a 	add	r21,r21,r20
    a238:	2505c83a 	sub	r2,r4,r20
    a23c:	e5400215 	stw	r21,8(fp)
    a240:	10800054 	ori	r2,r2,1
    a244:	a8800115 	stw	r2,4(r21)
    a248:	98bfff17 	ldw	r2,-4(r19)
    a24c:	9009883a 	mov	r4,r18
    a250:	1080004c 	andi	r2,r2,1
    a254:	a0a8b03a 	or	r20,r20,r2
    a258:	9d3fff15 	stw	r20,-4(r19)
    a25c:	000ffe00 	call	ffe0 <__malloc_unlock>
    a260:	9805883a 	mov	r2,r19
    a264:	003f3b06 	br	9f54 <__alt_data_end+0xfffb4824>
    a268:	8809883a 	mov	r4,r17
    a26c:	980b883a 	mov	r5,r19
    a270:	0008af00 	call	8af0 <memmove>
    a274:	003f9606 	br	a0d0 <__alt_data_end+0xfffb49a0>
    a278:	8809883a 	mov	r4,r17
    a27c:	980b883a 	mov	r5,r19
    a280:	0008af00 	call	8af0 <memmove>
    a284:	b8c00117 	ldw	r3,4(r23)
    a288:	b021883a 	mov	r16,r22
    a28c:	b82b883a 	mov	r21,r23
    a290:	003f2306 	br	9f20 <__alt_data_end+0xfffb47f0>
    a294:	98c00217 	ldw	r3,8(r19)
    a298:	88c00215 	stw	r3,8(r17)
    a29c:	98c00317 	ldw	r3,12(r19)
    a2a0:	88c00315 	stw	r3,12(r17)
    a2a4:	30800c26 	beq	r6,r2,a2d8 <_realloc_r+0x520>
    a2a8:	88800404 	addi	r2,r17,16
    a2ac:	98c00404 	addi	r3,r19,16
    a2b0:	003f8106 	br	a0b8 <__alt_data_end+0xfffb4988>
    a2b4:	893fff17 	ldw	r4,-4(r17)
    a2b8:	00bfff04 	movi	r2,-4
    a2bc:	9823883a 	mov	r17,r19
    a2c0:	2084703a 	and	r2,r4,r2
    a2c4:	80a1883a 	add	r16,r16,r2
    a2c8:	003f1506 	br	9f20 <__alt_data_end+0xfffb47f0>
    a2cc:	b8c00404 	addi	r3,r23,16
    a2d0:	9cc00204 	addi	r19,r19,8
    a2d4:	003f4b06 	br	a004 <__alt_data_end+0xfffb48d4>
    a2d8:	99000417 	ldw	r4,16(r19)
    a2dc:	88800604 	addi	r2,r17,24
    a2e0:	98c00604 	addi	r3,r19,24
    a2e4:	89000415 	stw	r4,16(r17)
    a2e8:	99000517 	ldw	r4,20(r19)
    a2ec:	89000515 	stw	r4,20(r17)
    a2f0:	003f7106 	br	a0b8 <__alt_data_end+0xfffb4988>
    a2f4:	8805883a 	mov	r2,r17
    a2f8:	003fb006 	br	a1bc <__alt_data_end+0xfffb4a8c>
    a2fc:	8809883a 	mov	r4,r17
    a300:	980b883a 	mov	r5,r19
    a304:	0008af00 	call	8af0 <memmove>
    a308:	003fb206 	br	a1d4 <__alt_data_end+0xfffb4aa4>
    a30c:	98800217 	ldw	r2,8(r19)
    a310:	b8800415 	stw	r2,16(r23)
    a314:	98800317 	ldw	r2,12(r19)
    a318:	b8800515 	stw	r2,20(r23)
    a31c:	31000726 	beq	r6,r4,a33c <_realloc_r+0x584>
    a320:	b8800604 	addi	r2,r23,24
    a324:	9cc00404 	addi	r19,r19,16
    a328:	003fa406 	br	a1bc <__alt_data_end+0xfffb4a8c>
    a32c:	9009883a 	mov	r4,r18
    a330:	000ffe00 	call	ffe0 <__malloc_unlock>
    a334:	0005883a 	mov	r2,zero
    a338:	003f0606 	br	9f54 <__alt_data_end+0xfffb4824>
    a33c:	98c00417 	ldw	r3,16(r19)
    a340:	9cc00604 	addi	r19,r19,24
    a344:	b8800804 	addi	r2,r23,32
    a348:	b8c00615 	stw	r3,24(r23)
    a34c:	98ffff17 	ldw	r3,-4(r19)
    a350:	b8c00715 	stw	r3,28(r23)
    a354:	003f9906 	br	a1bc <__alt_data_end+0xfffb4a8c>

0000a358 <__fpclassifyd>:
    a358:	00a00034 	movhi	r2,32768
    a35c:	10bfffc4 	addi	r2,r2,-1
    a360:	2884703a 	and	r2,r5,r2
    a364:	10000726 	beq	r2,zero,a384 <__fpclassifyd+0x2c>
    a368:	00fffc34 	movhi	r3,65520
    a36c:	019ff834 	movhi	r6,32736
    a370:	28c7883a 	add	r3,r5,r3
    a374:	31bfffc4 	addi	r6,r6,-1
    a378:	30c00536 	bltu	r6,r3,a390 <__fpclassifyd+0x38>
    a37c:	00800104 	movi	r2,4
    a380:	f800283a 	ret
    a384:	2000021e 	bne	r4,zero,a390 <__fpclassifyd+0x38>
    a388:	00800084 	movi	r2,2
    a38c:	f800283a 	ret
    a390:	00dffc34 	movhi	r3,32752
    a394:	019ff834 	movhi	r6,32736
    a398:	28cb883a 	add	r5,r5,r3
    a39c:	31bfffc4 	addi	r6,r6,-1
    a3a0:	317ff62e 	bgeu	r6,r5,a37c <__alt_data_end+0xfffb4c4c>
    a3a4:	01400434 	movhi	r5,16
    a3a8:	297fffc4 	addi	r5,r5,-1
    a3ac:	28800236 	bltu	r5,r2,a3b8 <__fpclassifyd+0x60>
    a3b0:	008000c4 	movi	r2,3
    a3b4:	f800283a 	ret
    a3b8:	10c00226 	beq	r2,r3,a3c4 <__fpclassifyd+0x6c>
    a3bc:	0005883a 	mov	r2,zero
    a3c0:	f800283a 	ret
    a3c4:	2005003a 	cmpeq	r2,r4,zero
    a3c8:	f800283a 	ret

0000a3cc <__sread>:
    a3cc:	defffe04 	addi	sp,sp,-8
    a3d0:	dc000015 	stw	r16,0(sp)
    a3d4:	2821883a 	mov	r16,r5
    a3d8:	2940038f 	ldh	r5,14(r5)
    a3dc:	dfc00115 	stw	ra,4(sp)
    a3e0:	000c0880 	call	c088 <_read_r>
    a3e4:	10000716 	blt	r2,zero,a404 <__sread+0x38>
    a3e8:	80c01417 	ldw	r3,80(r16)
    a3ec:	1887883a 	add	r3,r3,r2
    a3f0:	80c01415 	stw	r3,80(r16)
    a3f4:	dfc00117 	ldw	ra,4(sp)
    a3f8:	dc000017 	ldw	r16,0(sp)
    a3fc:	dec00204 	addi	sp,sp,8
    a400:	f800283a 	ret
    a404:	80c0030b 	ldhu	r3,12(r16)
    a408:	18fbffcc 	andi	r3,r3,61439
    a40c:	80c0030d 	sth	r3,12(r16)
    a410:	dfc00117 	ldw	ra,4(sp)
    a414:	dc000017 	ldw	r16,0(sp)
    a418:	dec00204 	addi	sp,sp,8
    a41c:	f800283a 	ret

0000a420 <__seofread>:
    a420:	0005883a 	mov	r2,zero
    a424:	f800283a 	ret

0000a428 <__swrite>:
    a428:	2880030b 	ldhu	r2,12(r5)
    a42c:	defffb04 	addi	sp,sp,-20
    a430:	dcc00315 	stw	r19,12(sp)
    a434:	dc800215 	stw	r18,8(sp)
    a438:	dc400115 	stw	r17,4(sp)
    a43c:	dc000015 	stw	r16,0(sp)
    a440:	dfc00415 	stw	ra,16(sp)
    a444:	10c0400c 	andi	r3,r2,256
    a448:	2821883a 	mov	r16,r5
    a44c:	2027883a 	mov	r19,r4
    a450:	3025883a 	mov	r18,r6
    a454:	3823883a 	mov	r17,r7
    a458:	18000526 	beq	r3,zero,a470 <__swrite+0x48>
    a45c:	2940038f 	ldh	r5,14(r5)
    a460:	000d883a 	mov	r6,zero
    a464:	01c00084 	movi	r7,2
    a468:	000c02c0 	call	c02c <_lseek_r>
    a46c:	8080030b 	ldhu	r2,12(r16)
    a470:	8140038f 	ldh	r5,14(r16)
    a474:	10bbffcc 	andi	r2,r2,61439
    a478:	9809883a 	mov	r4,r19
    a47c:	900d883a 	mov	r6,r18
    a480:	880f883a 	mov	r7,r17
    a484:	8080030d 	sth	r2,12(r16)
    a488:	dfc00417 	ldw	ra,16(sp)
    a48c:	dcc00317 	ldw	r19,12(sp)
    a490:	dc800217 	ldw	r18,8(sp)
    a494:	dc400117 	ldw	r17,4(sp)
    a498:	dc000017 	ldw	r16,0(sp)
    a49c:	dec00504 	addi	sp,sp,20
    a4a0:	000bb081 	jmpi	bb08 <_write_r>

0000a4a4 <__sseek>:
    a4a4:	defffe04 	addi	sp,sp,-8
    a4a8:	dc000015 	stw	r16,0(sp)
    a4ac:	2821883a 	mov	r16,r5
    a4b0:	2940038f 	ldh	r5,14(r5)
    a4b4:	dfc00115 	stw	ra,4(sp)
    a4b8:	000c02c0 	call	c02c <_lseek_r>
    a4bc:	00ffffc4 	movi	r3,-1
    a4c0:	10c00826 	beq	r2,r3,a4e4 <__sseek+0x40>
    a4c4:	80c0030b 	ldhu	r3,12(r16)
    a4c8:	80801415 	stw	r2,80(r16)
    a4cc:	18c40014 	ori	r3,r3,4096
    a4d0:	80c0030d 	sth	r3,12(r16)
    a4d4:	dfc00117 	ldw	ra,4(sp)
    a4d8:	dc000017 	ldw	r16,0(sp)
    a4dc:	dec00204 	addi	sp,sp,8
    a4e0:	f800283a 	ret
    a4e4:	80c0030b 	ldhu	r3,12(r16)
    a4e8:	18fbffcc 	andi	r3,r3,61439
    a4ec:	80c0030d 	sth	r3,12(r16)
    a4f0:	dfc00117 	ldw	ra,4(sp)
    a4f4:	dc000017 	ldw	r16,0(sp)
    a4f8:	dec00204 	addi	sp,sp,8
    a4fc:	f800283a 	ret

0000a500 <__sclose>:
    a500:	2940038f 	ldh	r5,14(r5)
    a504:	000bb641 	jmpi	bb64 <_close_r>

0000a508 <strcmp>:
    a508:	2144b03a 	or	r2,r4,r5
    a50c:	108000cc 	andi	r2,r2,3
    a510:	1000171e 	bne	r2,zero,a570 <strcmp+0x68>
    a514:	20800017 	ldw	r2,0(r4)
    a518:	28c00017 	ldw	r3,0(r5)
    a51c:	10c0141e 	bne	r2,r3,a570 <strcmp+0x68>
    a520:	027fbff4 	movhi	r9,65279
    a524:	4a7fbfc4 	addi	r9,r9,-257
    a528:	0086303a 	nor	r3,zero,r2
    a52c:	02202074 	movhi	r8,32897
    a530:	1245883a 	add	r2,r2,r9
    a534:	42202004 	addi	r8,r8,-32640
    a538:	10c4703a 	and	r2,r2,r3
    a53c:	1204703a 	and	r2,r2,r8
    a540:	10000226 	beq	r2,zero,a54c <strcmp+0x44>
    a544:	00001706 	br	a5a4 <strcmp+0x9c>
    a548:	1000161e 	bne	r2,zero,a5a4 <strcmp+0x9c>
    a54c:	21000104 	addi	r4,r4,4
    a550:	20c00017 	ldw	r3,0(r4)
    a554:	29400104 	addi	r5,r5,4
    a558:	29800017 	ldw	r6,0(r5)
    a55c:	1a4f883a 	add	r7,r3,r9
    a560:	00c4303a 	nor	r2,zero,r3
    a564:	3884703a 	and	r2,r7,r2
    a568:	1204703a 	and	r2,r2,r8
    a56c:	19bff626 	beq	r3,r6,a548 <__alt_data_end+0xfffb4e18>
    a570:	20800007 	ldb	r2,0(r4)
    a574:	1000051e 	bne	r2,zero,a58c <strcmp+0x84>
    a578:	00000606 	br	a594 <strcmp+0x8c>
    a57c:	21000044 	addi	r4,r4,1
    a580:	20800007 	ldb	r2,0(r4)
    a584:	29400044 	addi	r5,r5,1
    a588:	10000226 	beq	r2,zero,a594 <strcmp+0x8c>
    a58c:	28c00007 	ldb	r3,0(r5)
    a590:	10fffa26 	beq	r2,r3,a57c <__alt_data_end+0xfffb4e4c>
    a594:	20800003 	ldbu	r2,0(r4)
    a598:	28c00003 	ldbu	r3,0(r5)
    a59c:	10c5c83a 	sub	r2,r2,r3
    a5a0:	f800283a 	ret
    a5a4:	0005883a 	mov	r2,zero
    a5a8:	f800283a 	ret

0000a5ac <__sprint_r.part.0>:
    a5ac:	28801917 	ldw	r2,100(r5)
    a5b0:	defff604 	addi	sp,sp,-40
    a5b4:	dd400515 	stw	r21,20(sp)
    a5b8:	dcc00315 	stw	r19,12(sp)
    a5bc:	dfc00915 	stw	ra,36(sp)
    a5c0:	df000815 	stw	fp,32(sp)
    a5c4:	ddc00715 	stw	r23,28(sp)
    a5c8:	dd800615 	stw	r22,24(sp)
    a5cc:	dd000415 	stw	r20,16(sp)
    a5d0:	dc800215 	stw	r18,8(sp)
    a5d4:	dc400115 	stw	r17,4(sp)
    a5d8:	dc000015 	stw	r16,0(sp)
    a5dc:	1088000c 	andi	r2,r2,8192
    a5e0:	2827883a 	mov	r19,r5
    a5e4:	302b883a 	mov	r21,r6
    a5e8:	10002d26 	beq	r2,zero,a6a0 <__sprint_r.part.0+0xf4>
    a5ec:	30800217 	ldw	r2,8(r6)
    a5f0:	35800017 	ldw	r22,0(r6)
    a5f4:	10002826 	beq	r2,zero,a698 <__sprint_r.part.0+0xec>
    a5f8:	2029883a 	mov	r20,r4
    a5fc:	b5c00104 	addi	r23,r22,4
    a600:	04bfffc4 	movi	r18,-1
    a604:	bc400017 	ldw	r17,0(r23)
    a608:	b4000017 	ldw	r16,0(r22)
    a60c:	0039883a 	mov	fp,zero
    a610:	8822d0ba 	srli	r17,r17,2
    a614:	04400316 	blt	zero,r17,a624 <__sprint_r.part.0+0x78>
    a618:	00001706 	br	a678 <__sprint_r.part.0+0xcc>
    a61c:	84000104 	addi	r16,r16,4
    a620:	8f001526 	beq	r17,fp,a678 <__sprint_r.part.0+0xcc>
    a624:	81400017 	ldw	r5,0(r16)
    a628:	a009883a 	mov	r4,r20
    a62c:	980d883a 	mov	r6,r19
    a630:	000bda40 	call	bda4 <_fputwc_r>
    a634:	e7000044 	addi	fp,fp,1
    a638:	14bff81e 	bne	r2,r18,a61c <__alt_data_end+0xfffb4eec>
    a63c:	9005883a 	mov	r2,r18
    a640:	a8000215 	stw	zero,8(r21)
    a644:	a8000115 	stw	zero,4(r21)
    a648:	dfc00917 	ldw	ra,36(sp)
    a64c:	df000817 	ldw	fp,32(sp)
    a650:	ddc00717 	ldw	r23,28(sp)
    a654:	dd800617 	ldw	r22,24(sp)
    a658:	dd400517 	ldw	r21,20(sp)
    a65c:	dd000417 	ldw	r20,16(sp)
    a660:	dcc00317 	ldw	r19,12(sp)
    a664:	dc800217 	ldw	r18,8(sp)
    a668:	dc400117 	ldw	r17,4(sp)
    a66c:	dc000017 	ldw	r16,0(sp)
    a670:	dec00a04 	addi	sp,sp,40
    a674:	f800283a 	ret
    a678:	a8c00217 	ldw	r3,8(r21)
    a67c:	8c63883a 	add	r17,r17,r17
    a680:	8c63883a 	add	r17,r17,r17
    a684:	1c45c83a 	sub	r2,r3,r17
    a688:	a8800215 	stw	r2,8(r21)
    a68c:	b5800204 	addi	r22,r22,8
    a690:	bdc00204 	addi	r23,r23,8
    a694:	103fdb1e 	bne	r2,zero,a604 <__alt_data_end+0xfffb4ed4>
    a698:	0005883a 	mov	r2,zero
    a69c:	003fe806 	br	a640 <__alt_data_end+0xfffb4f10>
    a6a0:	00080240 	call	8024 <__sfvwrite_r>
    a6a4:	003fe606 	br	a640 <__alt_data_end+0xfffb4f10>

0000a6a8 <__sprint_r>:
    a6a8:	30c00217 	ldw	r3,8(r6)
    a6ac:	18000126 	beq	r3,zero,a6b4 <__sprint_r+0xc>
    a6b0:	000a5ac1 	jmpi	a5ac <__sprint_r.part.0>
    a6b4:	30000115 	stw	zero,4(r6)
    a6b8:	0005883a 	mov	r2,zero
    a6bc:	f800283a 	ret

0000a6c0 <___vfiprintf_internal_r>:
    a6c0:	defeca04 	addi	sp,sp,-1240
    a6c4:	dcc12f15 	stw	r19,1212(sp)
    a6c8:	dfc13515 	stw	ra,1236(sp)
    a6cc:	df013415 	stw	fp,1232(sp)
    a6d0:	ddc13315 	stw	r23,1228(sp)
    a6d4:	dd813215 	stw	r22,1224(sp)
    a6d8:	dd413115 	stw	r21,1220(sp)
    a6dc:	dd013015 	stw	r20,1216(sp)
    a6e0:	dc812e15 	stw	r18,1208(sp)
    a6e4:	dc412d15 	stw	r17,1204(sp)
    a6e8:	dc012c15 	stw	r16,1200(sp)
    a6ec:	d9012115 	stw	r4,1156(sp)
    a6f0:	d9412015 	stw	r5,1152(sp)
    a6f4:	d9c12315 	stw	r7,1164(sp)
    a6f8:	3027883a 	mov	r19,r6
    a6fc:	20000226 	beq	r4,zero,a708 <___vfiprintf_internal_r+0x48>
    a700:	20800e17 	ldw	r2,56(r4)
    a704:	1000f726 	beq	r2,zero,aae4 <___vfiprintf_internal_r+0x424>
    a708:	d8812017 	ldw	r2,1152(sp)
    a70c:	10c0030b 	ldhu	r3,12(r2)
    a710:	1908000c 	andi	r4,r3,8192
    a714:	1805883a 	mov	r2,r3
    a718:	2000081e 	bne	r4,zero,a73c <___vfiprintf_internal_r+0x7c>
    a71c:	d9412017 	ldw	r5,1152(sp)
    a720:	18880014 	ori	r2,r3,8192
    a724:	00f7ffc4 	movi	r3,-8193
    a728:	29001917 	ldw	r4,100(r5)
    a72c:	2880030d 	sth	r2,12(r5)
    a730:	20c8703a 	and	r4,r4,r3
    a734:	29001915 	stw	r4,100(r5)
    a738:	1007883a 	mov	r3,r2
    a73c:	1100020c 	andi	r4,r2,8
    a740:	2000a726 	beq	r4,zero,a9e0 <___vfiprintf_internal_r+0x320>
    a744:	d9412017 	ldw	r5,1152(sp)
    a748:	29000417 	ldw	r4,16(r5)
    a74c:	2000a426 	beq	r4,zero,a9e0 <___vfiprintf_internal_r+0x320>
    a750:	1080068c 	andi	r2,r2,26
    a754:	01000284 	movi	r4,10
    a758:	1100ab26 	beq	r2,r4,aa08 <___vfiprintf_internal_r+0x348>
    a75c:	d9010a04 	addi	r4,sp,1064
    a760:	d94109c4 	addi	r5,sp,1063
    a764:	07000074 	movhi	fp,1
    a768:	04400074 	movhi	r17,1
    a76c:	2145c83a 	sub	r2,r4,r5
    a770:	e70af004 	addi	fp,fp,11200
    a774:	8c4aec04 	addi	r17,r17,11184
    a778:	d9011e15 	stw	r4,1144(sp)
    a77c:	d9411f15 	stw	r5,1148(sp)
    a780:	dec11a15 	stw	sp,1128(sp)
    a784:	d8011c15 	stw	zero,1136(sp)
    a788:	d8011b15 	stw	zero,1132(sp)
    a78c:	d8012715 	stw	zero,1180(sp)
    a790:	d8012515 	stw	zero,1172(sp)
    a794:	d811883a 	mov	r8,sp
    a798:	d8812815 	stw	r2,1184(sp)
    a79c:	982f883a 	mov	r23,r19
    a7a0:	b8800007 	ldb	r2,0(r23)
    a7a4:	1003b026 	beq	r2,zero,b668 <___vfiprintf_internal_r+0xfa8>
    a7a8:	01000944 	movi	r4,37
    a7ac:	1103ae26 	beq	r2,r4,b668 <___vfiprintf_internal_r+0xfa8>
    a7b0:	b805883a 	mov	r2,r23
    a7b4:	00000106 	br	a7bc <___vfiprintf_internal_r+0xfc>
    a7b8:	19000326 	beq	r3,r4,a7c8 <___vfiprintf_internal_r+0x108>
    a7bc:	10800044 	addi	r2,r2,1
    a7c0:	10c00007 	ldb	r3,0(r2)
    a7c4:	183ffc1e 	bne	r3,zero,a7b8 <__alt_data_end+0xfffb5088>
    a7c8:	15e1c83a 	sub	r16,r2,r23
    a7cc:	1029883a 	mov	r20,r2
    a7d0:	80001026 	beq	r16,zero,a814 <___vfiprintf_internal_r+0x154>
    a7d4:	d8c11c17 	ldw	r3,1136(sp)
    a7d8:	d8811b17 	ldw	r2,1132(sp)
    a7dc:	45c00015 	stw	r23,0(r8)
    a7e0:	80c7883a 	add	r3,r16,r3
    a7e4:	10800044 	addi	r2,r2,1
    a7e8:	44000115 	stw	r16,4(r8)
    a7ec:	d8c11c15 	stw	r3,1136(sp)
    a7f0:	d8811b15 	stw	r2,1132(sp)
    a7f4:	010001c4 	movi	r4,7
    a7f8:	2080740e 	bge	r4,r2,a9cc <___vfiprintf_internal_r+0x30c>
    a7fc:	1803a71e 	bne	r3,zero,b69c <___vfiprintf_internal_r+0xfdc>
    a800:	d8c12517 	ldw	r3,1172(sp)
    a804:	d8011b15 	stw	zero,1132(sp)
    a808:	d811883a 	mov	r8,sp
    a80c:	1c07883a 	add	r3,r3,r16
    a810:	d8c12515 	stw	r3,1172(sp)
    a814:	a0800007 	ldb	r2,0(r20)
    a818:	1002bf26 	beq	r2,zero,b318 <___vfiprintf_internal_r+0xc58>
    a81c:	a5c00044 	addi	r23,r20,1
    a820:	a1800047 	ldb	r6,1(r20)
    a824:	d8011d85 	stb	zero,1142(sp)
    a828:	d8012205 	stb	zero,1160(sp)
    a82c:	043fffc4 	movi	r16,-1
    a830:	d8012415 	stw	zero,1168(sp)
    a834:	0025883a 	mov	r18,zero
    a838:	05001604 	movi	r20,88
    a83c:	05400244 	movi	r21,9
    a840:	4027883a 	mov	r19,r8
    a844:	bdc00044 	addi	r23,r23,1
    a848:	30bff804 	addi	r2,r6,-32
    a84c:	a0825636 	bltu	r20,r2,b1a8 <___vfiprintf_internal_r+0xae8>
    a850:	100490ba 	slli	r2,r2,2
    a854:	01000074 	movhi	r4,1
    a858:	212a1a04 	addi	r4,r4,-22424
    a85c:	1105883a 	add	r2,r2,r4
    a860:	10800017 	ldw	r2,0(r2)
    a864:	1000683a 	jmp	r2
    a868:	0000b138 	rdprs	zero,zero,708
    a86c:	0000b1a8 	cmpgeui	zero,zero,710
    a870:	0000b1a8 	cmpgeui	zero,zero,710
    a874:	0000b19c 	xori	zero,zero,710
    a878:	0000b1a8 	cmpgeui	zero,zero,710
    a87c:	0000b1a8 	cmpgeui	zero,zero,710
    a880:	0000b1a8 	cmpgeui	zero,zero,710
    a884:	0000b1a8 	cmpgeui	zero,zero,710
    a888:	0000b1a8 	cmpgeui	zero,zero,710
    a88c:	0000b1a8 	cmpgeui	zero,zero,710
    a890:	0000af28 	cmpgeui	zero,zero,700
    a894:	0000b150 	cmplti	zero,zero,709
    a898:	0000b1a8 	cmpgeui	zero,zero,710
    a89c:	0000aafc 	xorhi	zero,zero,683
    a8a0:	0000af4c 	andi	zero,zero,701
    a8a4:	0000b1a8 	cmpgeui	zero,zero,710
    a8a8:	0000ab08 	cmpgei	zero,zero,684
    a8ac:	0000ab14 	movui	zero,684
    a8b0:	0000ab14 	movui	zero,684
    a8b4:	0000ab14 	movui	zero,684
    a8b8:	0000ab14 	movui	zero,684
    a8bc:	0000ab14 	movui	zero,684
    a8c0:	0000ab14 	movui	zero,684
    a8c4:	0000ab14 	movui	zero,684
    a8c8:	0000ab14 	movui	zero,684
    a8cc:	0000ab14 	movui	zero,684
    a8d0:	0000b1a8 	cmpgeui	zero,zero,710
    a8d4:	0000b1a8 	cmpgeui	zero,zero,710
    a8d8:	0000b1a8 	cmpgeui	zero,zero,710
    a8dc:	0000b1a8 	cmpgeui	zero,zero,710
    a8e0:	0000b1a8 	cmpgeui	zero,zero,710
    a8e4:	0000b1a8 	cmpgeui	zero,zero,710
    a8e8:	0000b1a8 	cmpgeui	zero,zero,710
    a8ec:	0000b1a8 	cmpgeui	zero,zero,710
    a8f0:	0000b1a8 	cmpgeui	zero,zero,710
    a8f4:	0000b1a8 	cmpgeui	zero,zero,710
    a8f8:	0000ab54 	movui	zero,685
    a8fc:	0000b1a8 	cmpgeui	zero,zero,710
    a900:	0000b1a8 	cmpgeui	zero,zero,710
    a904:	0000b1a8 	cmpgeui	zero,zero,710
    a908:	0000b1a8 	cmpgeui	zero,zero,710
    a90c:	0000b1a8 	cmpgeui	zero,zero,710
    a910:	0000b1a8 	cmpgeui	zero,zero,710
    a914:	0000b1a8 	cmpgeui	zero,zero,710
    a918:	0000b1a8 	cmpgeui	zero,zero,710
    a91c:	0000b1a8 	cmpgeui	zero,zero,710
    a920:	0000b1a8 	cmpgeui	zero,zero,710
    a924:	0000ae44 	movi	zero,697
    a928:	0000b1a8 	cmpgeui	zero,zero,710
    a92c:	0000b1a8 	cmpgeui	zero,zero,710
    a930:	0000b1a8 	cmpgeui	zero,zero,710
    a934:	0000b1a8 	cmpgeui	zero,zero,710
    a938:	0000b1a8 	cmpgeui	zero,zero,710
    a93c:	0000ae84 	movi	zero,698
    a940:	0000b1a8 	cmpgeui	zero,zero,710
    a944:	0000b1a8 	cmpgeui	zero,zero,710
    a948:	0000aec8 	cmpgei	zero,zero,699
    a94c:	0000b1a8 	cmpgeui	zero,zero,710
    a950:	0000b1a8 	cmpgeui	zero,zero,710
    a954:	0000b1a8 	cmpgeui	zero,zero,710
    a958:	0000b1a8 	cmpgeui	zero,zero,710
    a95c:	0000b1a8 	cmpgeui	zero,zero,710
    a960:	0000b1a8 	cmpgeui	zero,zero,710
    a964:	0000b1a8 	cmpgeui	zero,zero,710
    a968:	0000b1a8 	cmpgeui	zero,zero,710
    a96c:	0000b1a8 	cmpgeui	zero,zero,710
    a970:	0000b1a8 	cmpgeui	zero,zero,710
    a974:	0000ae10 	cmplti	zero,zero,696
    a978:	0000b160 	cmpeqi	zero,zero,709
    a97c:	0000b1a8 	cmpgeui	zero,zero,710
    a980:	0000b1a8 	cmpgeui	zero,zero,710
    a984:	0000b1a8 	cmpgeui	zero,zero,710
    a988:	0000af9c 	xori	zero,zero,702
    a98c:	0000b160 	cmpeqi	zero,zero,709
    a990:	0000b1a8 	cmpgeui	zero,zero,710
    a994:	0000b1a8 	cmpgeui	zero,zero,710
    a998:	0000aeb4 	movhi	zero,698
    a99c:	0000b1a8 	cmpgeui	zero,zero,710
    a9a0:	0000b100 	call	b10 <setup_keyboard+0x470>
    a9a4:	0000b088 	cmpgei	zero,zero,706
    a9a8:	0000b0bc 	xorhi	zero,zero,706
    a9ac:	0000afa8 	cmpgeui	zero,zero,702
    a9b0:	0000b1a8 	cmpgeui	zero,zero,710
    a9b4:	0000afb4 	movhi	zero,702
    a9b8:	0000b1a8 	cmpgeui	zero,zero,710
    a9bc:	0000b010 	cmplti	zero,zero,704
    a9c0:	0000b1a8 	cmpgeui	zero,zero,710
    a9c4:	0000b1a8 	cmpgeui	zero,zero,710
    a9c8:	0000b044 	movi	zero,705
    a9cc:	42000204 	addi	r8,r8,8
    a9d0:	d8c12517 	ldw	r3,1172(sp)
    a9d4:	1c07883a 	add	r3,r3,r16
    a9d8:	d8c12515 	stw	r3,1172(sp)
    a9dc:	003f8d06 	br	a814 <__alt_data_end+0xfffb50e4>
    a9e0:	d9012117 	ldw	r4,1156(sp)
    a9e4:	d9412017 	ldw	r5,1152(sp)
    a9e8:	0005b840 	call	5b84 <__swsetup_r>
    a9ec:	1000301e 	bne	r2,zero,aab0 <___vfiprintf_internal_r+0x3f0>
    a9f0:	d8812017 	ldw	r2,1152(sp)
    a9f4:	01000284 	movi	r4,10
    a9f8:	10c0030b 	ldhu	r3,12(r2)
    a9fc:	1805883a 	mov	r2,r3
    aa00:	1080068c 	andi	r2,r2,26
    aa04:	113f551e 	bne	r2,r4,a75c <__alt_data_end+0xfffb502c>
    aa08:	d9012017 	ldw	r4,1152(sp)
    aa0c:	2080038b 	ldhu	r2,14(r4)
    aa10:	113fffcc 	andi	r4,r2,65535
    aa14:	2120001c 	xori	r4,r4,32768
    aa18:	21200004 	addi	r4,r4,-32768
    aa1c:	203f4f16 	blt	r4,zero,a75c <__alt_data_end+0xfffb502c>
    aa20:	d9412017 	ldw	r5,1152(sp)
    aa24:	d9012117 	ldw	r4,1156(sp)
    aa28:	d9c12317 	ldw	r7,1164(sp)
    aa2c:	2b001917 	ldw	r12,100(r5)
    aa30:	2ac00717 	ldw	r11,28(r5)
    aa34:	2a800917 	ldw	r10,36(r5)
    aa38:	02010004 	movi	r8,1024
    aa3c:	18ffff4c 	andi	r3,r3,65533
    aa40:	da0b883a 	add	r5,sp,r8
    aa44:	980d883a 	mov	r6,r19
    aa48:	d8c1030d 	sth	r3,1036(sp)
    aa4c:	db011915 	stw	r12,1124(sp)
    aa50:	d881038d 	sth	r2,1038(sp)
    aa54:	dac10715 	stw	r11,1052(sp)
    aa58:	da810915 	stw	r10,1060(sp)
    aa5c:	dec10015 	stw	sp,1024(sp)
    aa60:	dec10415 	stw	sp,1040(sp)
    aa64:	da010215 	stw	r8,1032(sp)
    aa68:	da010515 	stw	r8,1044(sp)
    aa6c:	d8010615 	stw	zero,1048(sp)
    aa70:	000a6c00 	call	a6c0 <___vfiprintf_internal_r>
    aa74:	1021883a 	mov	r16,r2
    aa78:	10000416 	blt	r2,zero,aa8c <___vfiprintf_internal_r+0x3cc>
    aa7c:	d9012117 	ldw	r4,1156(sp)
    aa80:	d9410004 	addi	r5,sp,1024
    aa84:	00076040 	call	7604 <_fflush_r>
    aa88:	10040f1e 	bne	r2,zero,bac8 <___vfiprintf_internal_r+0x1408>
    aa8c:	d881030b 	ldhu	r2,1036(sp)
    aa90:	1080100c 	andi	r2,r2,64
    aa94:	10000426 	beq	r2,zero,aaa8 <___vfiprintf_internal_r+0x3e8>
    aa98:	d8c12017 	ldw	r3,1152(sp)
    aa9c:	1880030b 	ldhu	r2,12(r3)
    aaa0:	10801014 	ori	r2,r2,64
    aaa4:	1880030d 	sth	r2,12(r3)
    aaa8:	8005883a 	mov	r2,r16
    aaac:	00000106 	br	aab4 <___vfiprintf_internal_r+0x3f4>
    aab0:	00bfffc4 	movi	r2,-1
    aab4:	dfc13517 	ldw	ra,1236(sp)
    aab8:	df013417 	ldw	fp,1232(sp)
    aabc:	ddc13317 	ldw	r23,1228(sp)
    aac0:	dd813217 	ldw	r22,1224(sp)
    aac4:	dd413117 	ldw	r21,1220(sp)
    aac8:	dd013017 	ldw	r20,1216(sp)
    aacc:	dcc12f17 	ldw	r19,1212(sp)
    aad0:	dc812e17 	ldw	r18,1208(sp)
    aad4:	dc412d17 	ldw	r17,1204(sp)
    aad8:	dc012c17 	ldw	r16,1200(sp)
    aadc:	dec13604 	addi	sp,sp,1240
    aae0:	f800283a 	ret
    aae4:	0007bc00 	call	7bc0 <__sinit>
    aae8:	003f0706 	br	a708 <__alt_data_end+0xfffb4fd8>
    aaec:	d8c12417 	ldw	r3,1168(sp)
    aaf0:	d8812315 	stw	r2,1164(sp)
    aaf4:	00c7c83a 	sub	r3,zero,r3
    aaf8:	d8c12415 	stw	r3,1168(sp)
    aafc:	94800114 	ori	r18,r18,4
    ab00:	b9800007 	ldb	r6,0(r23)
    ab04:	003f4f06 	br	a844 <__alt_data_end+0xfffb5114>
    ab08:	94802014 	ori	r18,r18,128
    ab0c:	b9800007 	ldb	r6,0(r23)
    ab10:	003f4c06 	br	a844 <__alt_data_end+0xfffb5114>
    ab14:	dc012615 	stw	r16,1176(sp)
    ab18:	d8012415 	stw	zero,1168(sp)
    ab1c:	35bff404 	addi	r22,r6,-48
    ab20:	0009883a 	mov	r4,zero
    ab24:	b821883a 	mov	r16,r23
    ab28:	01400284 	movi	r5,10
    ab2c:	000d1bc0 	call	d1bc <__mulsi3>
    ab30:	81800007 	ldb	r6,0(r16)
    ab34:	1589883a 	add	r4,r2,r22
    ab38:	bdc00044 	addi	r23,r23,1
    ab3c:	35bff404 	addi	r22,r6,-48
    ab40:	b821883a 	mov	r16,r23
    ab44:	adbff82e 	bgeu	r21,r22,ab28 <__alt_data_end+0xfffb53f8>
    ab48:	d9012415 	stw	r4,1168(sp)
    ab4c:	dc012617 	ldw	r16,1176(sp)
    ab50:	003f3d06 	br	a848 <__alt_data_end+0xfffb5118>
    ab54:	d8c12203 	ldbu	r3,1160(sp)
    ab58:	94800414 	ori	r18,r18,16
    ab5c:	9080080c 	andi	r2,r18,32
    ab60:	d8c11d85 	stb	r3,1142(sp)
    ab64:	9811883a 	mov	r8,r19
    ab68:	d8c12317 	ldw	r3,1164(sp)
    ab6c:	10018226 	beq	r2,zero,b178 <___vfiprintf_internal_r+0xab8>
    ab70:	d9012317 	ldw	r4,1164(sp)
    ab74:	18800117 	ldw	r2,4(r3)
    ab78:	1cc00017 	ldw	r19,0(r3)
    ab7c:	21000204 	addi	r4,r4,8
    ab80:	d9012315 	stw	r4,1164(sp)
    ab84:	102b883a 	mov	r21,r2
    ab88:	10030016 	blt	r2,zero,b78c <___vfiprintf_internal_r+0x10cc>
    ab8c:	dd811d83 	ldbu	r22,1142(sp)
    ab90:	8029883a 	mov	r20,r16
    ab94:	00800044 	movi	r2,1
    ab98:	9d46b03a 	or	r3,r19,r21
    ab9c:	80000216 	blt	r16,zero,aba8 <___vfiprintf_internal_r+0x4e8>
    aba0:	013fdfc4 	movi	r4,-129
    aba4:	9124703a 	and	r18,r18,r4
    aba8:	1801b41e 	bne	r3,zero,b27c <___vfiprintf_internal_r+0xbbc>
    abac:	80028126 	beq	r16,zero,b5b4 <___vfiprintf_internal_r+0xef4>
    abb0:	10803fcc 	andi	r2,r2,255
    abb4:	00c00044 	movi	r3,1
    abb8:	10c1d126 	beq	r2,r3,b300 <___vfiprintf_internal_r+0xc40>
    abbc:	00c00084 	movi	r3,2
    abc0:	10c28626 	beq	r2,r3,b5dc <___vfiprintf_internal_r+0xf1c>
    abc4:	d8c10a04 	addi	r3,sp,1064
    abc8:	9808d0fa 	srli	r4,r19,3
    abcc:	a80a977a 	slli	r5,r21,29
    abd0:	a82ad0fa 	srli	r21,r21,3
    abd4:	9cc001cc 	andi	r19,r19,7
    abd8:	98800c04 	addi	r2,r19,48
    abdc:	18ffffc4 	addi	r3,r3,-1
    abe0:	2926b03a 	or	r19,r5,r4
    abe4:	18800005 	stb	r2,0(r3)
    abe8:	9d48b03a 	or	r4,r19,r21
    abec:	203ff61e 	bne	r4,zero,abc8 <__alt_data_end+0xfffb5498>
    abf0:	9100004c 	andi	r4,r18,1
    abf4:	d8c12215 	stw	r3,1160(sp)
    abf8:	2002b31e 	bne	r4,zero,b6c8 <___vfiprintf_internal_r+0x1008>
    abfc:	d9411e17 	ldw	r5,1144(sp)
    ac00:	28e9c83a 	sub	r20,r5,r3
    ac04:	a02b883a 	mov	r21,r20
    ac08:	a400010e 	bge	r20,r16,ac10 <___vfiprintf_internal_r+0x550>
    ac0c:	802b883a 	mov	r21,r16
    ac10:	b5803fcc 	andi	r22,r22,255
    ac14:	b580201c 	xori	r22,r22,128
    ac18:	b5bfe004 	addi	r22,r22,-128
    ac1c:	b0000126 	beq	r22,zero,ac24 <___vfiprintf_internal_r+0x564>
    ac20:	ad400044 	addi	r21,r21,1
    ac24:	9280008c 	andi	r10,r18,2
    ac28:	50000126 	beq	r10,zero,ac30 <___vfiprintf_internal_r+0x570>
    ac2c:	ad400084 	addi	r21,r21,2
    ac30:	9580210c 	andi	r22,r18,132
    ac34:	b001751e 	bne	r22,zero,b20c <___vfiprintf_internal_r+0xb4c>
    ac38:	d9012417 	ldw	r4,1168(sp)
    ac3c:	2567c83a 	sub	r19,r4,r21
    ac40:	04c1720e 	bge	zero,r19,b20c <___vfiprintf_internal_r+0xb4c>
    ac44:	01c00404 	movi	r7,16
    ac48:	d8c11c17 	ldw	r3,1136(sp)
    ac4c:	3cc36b0e 	bge	r7,r19,b9fc <___vfiprintf_internal_r+0x133c>
    ac50:	00800074 	movhi	r2,1
    ac54:	108af004 	addi	r2,r2,11200
    ac58:	dc012915 	stw	r16,1188(sp)
    ac5c:	d9011b17 	ldw	r4,1132(sp)
    ac60:	9821883a 	mov	r16,r19
    ac64:	d8812615 	stw	r2,1176(sp)
    ac68:	030001c4 	movi	r12,7
    ac6c:	5027883a 	mov	r19,r10
    ac70:	00000506 	br	ac88 <___vfiprintf_internal_r+0x5c8>
    ac74:	21400084 	addi	r5,r4,2
    ac78:	42000204 	addi	r8,r8,8
    ac7c:	1009883a 	mov	r4,r2
    ac80:	843ffc04 	addi	r16,r16,-16
    ac84:	3c000d0e 	bge	r7,r16,acbc <___vfiprintf_internal_r+0x5fc>
    ac88:	18c00404 	addi	r3,r3,16
    ac8c:	20800044 	addi	r2,r4,1
    ac90:	47000015 	stw	fp,0(r8)
    ac94:	41c00115 	stw	r7,4(r8)
    ac98:	d8c11c15 	stw	r3,1136(sp)
    ac9c:	d8811b15 	stw	r2,1132(sp)
    aca0:	60bff40e 	bge	r12,r2,ac74 <__alt_data_end+0xfffb5544>
    aca4:	18014b1e 	bne	r3,zero,b1d4 <___vfiprintf_internal_r+0xb14>
    aca8:	843ffc04 	addi	r16,r16,-16
    acac:	0009883a 	mov	r4,zero
    acb0:	01400044 	movi	r5,1
    acb4:	d811883a 	mov	r8,sp
    acb8:	3c3ff316 	blt	r7,r16,ac88 <__alt_data_end+0xfffb5558>
    acbc:	9815883a 	mov	r10,r19
    acc0:	8027883a 	mov	r19,r16
    acc4:	dc012917 	ldw	r16,1188(sp)
    acc8:	d9012617 	ldw	r4,1176(sp)
    accc:	98c7883a 	add	r3,r19,r3
    acd0:	44c00115 	stw	r19,4(r8)
    acd4:	41000015 	stw	r4,0(r8)
    acd8:	d8c11c15 	stw	r3,1136(sp)
    acdc:	d9411b15 	stw	r5,1132(sp)
    ace0:	008001c4 	movi	r2,7
    ace4:	11425116 	blt	r2,r5,b62c <___vfiprintf_internal_r+0xf6c>
    ace8:	d9011d87 	ldb	r4,1142(sp)
    acec:	42000204 	addi	r8,r8,8
    acf0:	28800044 	addi	r2,r5,1
    acf4:	20014a1e 	bne	r4,zero,b220 <___vfiprintf_internal_r+0xb60>
    acf8:	50000c26 	beq	r10,zero,ad2c <___vfiprintf_internal_r+0x66c>
    acfc:	d9011d04 	addi	r4,sp,1140
    ad00:	18c00084 	addi	r3,r3,2
    ad04:	41000015 	stw	r4,0(r8)
    ad08:	01000084 	movi	r4,2
    ad0c:	41000115 	stw	r4,4(r8)
    ad10:	d8c11c15 	stw	r3,1136(sp)
    ad14:	d8811b15 	stw	r2,1132(sp)
    ad18:	010001c4 	movi	r4,7
    ad1c:	20822016 	blt	r4,r2,b5a0 <___vfiprintf_internal_r+0xee0>
    ad20:	100b883a 	mov	r5,r2
    ad24:	42000204 	addi	r8,r8,8
    ad28:	10800044 	addi	r2,r2,1
    ad2c:	01002004 	movi	r4,128
    ad30:	b101de26 	beq	r22,r4,b4ac <___vfiprintf_internal_r+0xdec>
    ad34:	8521c83a 	sub	r16,r16,r20
    ad38:	0400230e 	bge	zero,r16,adc8 <___vfiprintf_internal_r+0x708>
    ad3c:	04c00404 	movi	r19,16
    ad40:	9c030d0e 	bge	r19,r16,b978 <___vfiprintf_internal_r+0x12b8>
    ad44:	00800074 	movhi	r2,1
    ad48:	108aec04 	addi	r2,r2,11184
    ad4c:	d8812615 	stw	r2,1176(sp)
    ad50:	058001c4 	movi	r22,7
    ad54:	00000506 	br	ad6c <___vfiprintf_internal_r+0x6ac>
    ad58:	28800084 	addi	r2,r5,2
    ad5c:	42000204 	addi	r8,r8,8
    ad60:	200b883a 	mov	r5,r4
    ad64:	843ffc04 	addi	r16,r16,-16
    ad68:	9c000d0e 	bge	r19,r16,ada0 <___vfiprintf_internal_r+0x6e0>
    ad6c:	18c00404 	addi	r3,r3,16
    ad70:	29000044 	addi	r4,r5,1
    ad74:	44400015 	stw	r17,0(r8)
    ad78:	44c00115 	stw	r19,4(r8)
    ad7c:	d8c11c15 	stw	r3,1136(sp)
    ad80:	d9011b15 	stw	r4,1132(sp)
    ad84:	b13ff40e 	bge	r22,r4,ad58 <__alt_data_end+0xfffb5628>
    ad88:	1801321e 	bne	r3,zero,b254 <___vfiprintf_internal_r+0xb94>
    ad8c:	843ffc04 	addi	r16,r16,-16
    ad90:	000b883a 	mov	r5,zero
    ad94:	00800044 	movi	r2,1
    ad98:	d811883a 	mov	r8,sp
    ad9c:	9c3ff316 	blt	r19,r16,ad6c <__alt_data_end+0xfffb563c>
    ada0:	d9012617 	ldw	r4,1176(sp)
    ada4:	1c07883a 	add	r3,r3,r16
    ada8:	44000115 	stw	r16,4(r8)
    adac:	41000015 	stw	r4,0(r8)
    adb0:	d8c11c15 	stw	r3,1136(sp)
    adb4:	d8811b15 	stw	r2,1132(sp)
    adb8:	010001c4 	movi	r4,7
    adbc:	20816216 	blt	r4,r2,b348 <___vfiprintf_internal_r+0xc88>
    adc0:	42000204 	addi	r8,r8,8
    adc4:	10800044 	addi	r2,r2,1
    adc8:	d9012217 	ldw	r4,1160(sp)
    adcc:	1d07883a 	add	r3,r3,r20
    add0:	45000115 	stw	r20,4(r8)
    add4:	41000015 	stw	r4,0(r8)
    add8:	d8c11c15 	stw	r3,1136(sp)
    addc:	d8811b15 	stw	r2,1132(sp)
    ade0:	010001c4 	movi	r4,7
    ade4:	2081610e 	bge	r4,r2,b36c <___vfiprintf_internal_r+0xcac>
    ade8:	1802211e 	bne	r3,zero,b670 <___vfiprintf_internal_r+0xfb0>
    adec:	d8011b15 	stw	zero,1132(sp)
    adf0:	9480010c 	andi	r18,r18,4
    adf4:	9002171e 	bne	r18,zero,b654 <___vfiprintf_internal_r+0xf94>
    adf8:	d9412417 	ldw	r5,1168(sp)
    adfc:	a9433716 	blt	r21,r5,badc <___vfiprintf_internal_r+0x141c>
    ae00:	d8812517 	ldw	r2,1172(sp)
    ae04:	1545883a 	add	r2,r2,r21
    ae08:	d8812515 	stw	r2,1172(sp)
    ae0c:	00019a06 	br	b478 <___vfiprintf_internal_r+0xdb8>
    ae10:	d8c12317 	ldw	r3,1164(sp)
    ae14:	05400044 	movi	r21,1
    ae18:	9811883a 	mov	r8,r19
    ae1c:	18800017 	ldw	r2,0(r3)
    ae20:	18c00104 	addi	r3,r3,4
    ae24:	d8c12315 	stw	r3,1164(sp)
    ae28:	d8c10004 	addi	r3,sp,1024
    ae2c:	d8011d85 	stb	zero,1142(sp)
    ae30:	d8810005 	stb	r2,1024(sp)
    ae34:	a829883a 	mov	r20,r21
    ae38:	d8c12215 	stw	r3,1160(sp)
    ae3c:	0021883a 	mov	r16,zero
    ae40:	003f7806 	br	ac24 <__alt_data_end+0xfffb54f4>
    ae44:	94800414 	ori	r18,r18,16
    ae48:	9080080c 	andi	r2,r18,32
    ae4c:	9811883a 	mov	r8,r19
    ae50:	10009026 	beq	r2,zero,b094 <___vfiprintf_internal_r+0x9d4>
    ae54:	d8812317 	ldw	r2,1164(sp)
    ae58:	d8c12317 	ldw	r3,1164(sp)
    ae5c:	14c00017 	ldw	r19,0(r2)
    ae60:	15400117 	ldw	r21,4(r2)
    ae64:	18c00204 	addi	r3,r3,8
    ae68:	d8c12315 	stw	r3,1164(sp)
    ae6c:	0005883a 	mov	r2,zero
    ae70:	9d46b03a 	or	r3,r19,r21
    ae74:	d8011d85 	stb	zero,1142(sp)
    ae78:	8029883a 	mov	r20,r16
    ae7c:	002d883a 	mov	r22,zero
    ae80:	003f4606 	br	ab9c <__alt_data_end+0xfffb546c>
    ae84:	94800414 	ori	r18,r18,16
    ae88:	9080080c 	andi	r2,r18,32
    ae8c:	9811883a 	mov	r8,r19
    ae90:	10006226 	beq	r2,zero,b01c <___vfiprintf_internal_r+0x95c>
    ae94:	d9012317 	ldw	r4,1164(sp)
    ae98:	00800044 	movi	r2,1
    ae9c:	24c00017 	ldw	r19,0(r4)
    aea0:	25400117 	ldw	r21,4(r4)
    aea4:	21000204 	addi	r4,r4,8
    aea8:	d9012315 	stw	r4,1164(sp)
    aeac:	9d46b03a 	or	r3,r19,r21
    aeb0:	003ff006 	br	ae74 <__alt_data_end+0xfffb5744>
    aeb4:	b9800007 	ldb	r6,0(r23)
    aeb8:	00801b04 	movi	r2,108
    aebc:	3082b226 	beq	r6,r2,b988 <___vfiprintf_internal_r+0x12c8>
    aec0:	94800414 	ori	r18,r18,16
    aec4:	003e5f06 	br	a844 <__alt_data_end+0xfffb5114>
    aec8:	d8c12203 	ldbu	r3,1160(sp)
    aecc:	01000074 	movhi	r4,1
    aed0:	210a8604 	addi	r4,r4,10776
    aed4:	d8c11d85 	stb	r3,1142(sp)
    aed8:	d9012715 	stw	r4,1180(sp)
    aedc:	90c0080c 	andi	r3,r18,32
    aee0:	9811883a 	mov	r8,r19
    aee4:	d8812317 	ldw	r2,1164(sp)
    aee8:	18005f26 	beq	r3,zero,b068 <___vfiprintf_internal_r+0x9a8>
    aeec:	d9012317 	ldw	r4,1164(sp)
    aef0:	14c00017 	ldw	r19,0(r2)
    aef4:	15400117 	ldw	r21,4(r2)
    aef8:	21000204 	addi	r4,r4,8
    aefc:	d9012315 	stw	r4,1164(sp)
    af00:	9080004c 	andi	r2,r18,1
    af04:	1001e226 	beq	r2,zero,b690 <___vfiprintf_internal_r+0xfd0>
    af08:	9d46b03a 	or	r3,r19,r21
    af0c:	18024e26 	beq	r3,zero,b848 <___vfiprintf_internal_r+0x1188>
    af10:	00800c04 	movi	r2,48
    af14:	d8811d05 	stb	r2,1140(sp)
    af18:	d9811d45 	stb	r6,1141(sp)
    af1c:	94800094 	ori	r18,r18,2
    af20:	00800084 	movi	r2,2
    af24:	003fd306 	br	ae74 <__alt_data_end+0xfffb5744>
    af28:	d9012317 	ldw	r4,1164(sp)
    af2c:	d9412317 	ldw	r5,1164(sp)
    af30:	21000017 	ldw	r4,0(r4)
    af34:	28800104 	addi	r2,r5,4
    af38:	d9012415 	stw	r4,1168(sp)
    af3c:	203eeb16 	blt	r4,zero,aaec <__alt_data_end+0xfffb53bc>
    af40:	d8812315 	stw	r2,1164(sp)
    af44:	b9800007 	ldb	r6,0(r23)
    af48:	003e3e06 	br	a844 <__alt_data_end+0xfffb5114>
    af4c:	b9800007 	ldb	r6,0(r23)
    af50:	01000a84 	movi	r4,42
    af54:	b8800044 	addi	r2,r23,1
    af58:	3102d226 	beq	r6,r4,baa4 <___vfiprintf_internal_r+0x13e4>
    af5c:	35bff404 	addi	r22,r6,-48
    af60:	102f883a 	mov	r23,r2
    af64:	0021883a 	mov	r16,zero
    af68:	adbe3736 	bltu	r21,r22,a848 <__alt_data_end+0xfffb5118>
    af6c:	0009883a 	mov	r4,zero
    af70:	01400284 	movi	r5,10
    af74:	000d1bc0 	call	d1bc <__mulsi3>
    af78:	b9800007 	ldb	r6,0(r23)
    af7c:	b089883a 	add	r4,r22,r2
    af80:	bdc00044 	addi	r23,r23,1
    af84:	35bff404 	addi	r22,r6,-48
    af88:	adbff92e 	bgeu	r21,r22,af70 <__alt_data_end+0xfffb5840>
    af8c:	2021883a 	mov	r16,r4
    af90:	203e2d0e 	bge	r4,zero,a848 <__alt_data_end+0xfffb5118>
    af94:	043fffc4 	movi	r16,-1
    af98:	003e2b06 	br	a848 <__alt_data_end+0xfffb5118>
    af9c:	94801014 	ori	r18,r18,64
    afa0:	b9800007 	ldb	r6,0(r23)
    afa4:	003e2706 	br	a844 <__alt_data_end+0xfffb5114>
    afa8:	94800814 	ori	r18,r18,32
    afac:	b9800007 	ldb	r6,0(r23)
    afb0:	003e2406 	br	a844 <__alt_data_end+0xfffb5114>
    afb4:	d9412317 	ldw	r5,1164(sp)
    afb8:	d8812317 	ldw	r2,1164(sp)
    afbc:	d8011d85 	stb	zero,1142(sp)
    afc0:	29400017 	ldw	r5,0(r5)
    afc4:	9811883a 	mov	r8,r19
    afc8:	14c00104 	addi	r19,r2,4
    afcc:	d9412215 	stw	r5,1160(sp)
    afd0:	28029026 	beq	r5,zero,ba14 <___vfiprintf_internal_r+0x1354>
    afd4:	d9012217 	ldw	r4,1160(sp)
    afd8:	80027616 	blt	r16,zero,b9b4 <___vfiprintf_internal_r+0x12f4>
    afdc:	000b883a 	mov	r5,zero
    afe0:	800d883a 	mov	r6,r16
    afe4:	da012a15 	stw	r8,1192(sp)
    afe8:	00088d00 	call	88d0 <memchr>
    afec:	da012a17 	ldw	r8,1192(sp)
    aff0:	1002a026 	beq	r2,zero,ba74 <___vfiprintf_internal_r+0x13b4>
    aff4:	d8c12217 	ldw	r3,1160(sp)
    aff8:	10e9c83a 	sub	r20,r2,r3
    affc:	85023816 	blt	r16,r20,b8e0 <___vfiprintf_internal_r+0x1220>
    b000:	dd811d83 	ldbu	r22,1142(sp)
    b004:	dcc12315 	stw	r19,1164(sp)
    b008:	0021883a 	mov	r16,zero
    b00c:	003efd06 	br	ac04 <__alt_data_end+0xfffb54d4>
    b010:	9080080c 	andi	r2,r18,32
    b014:	9811883a 	mov	r8,r19
    b018:	103f9e1e 	bne	r2,zero,ae94 <__alt_data_end+0xfffb5764>
    b01c:	9080040c 	andi	r2,r18,16
    b020:	10021726 	beq	r2,zero,b880 <___vfiprintf_internal_r+0x11c0>
    b024:	d9412317 	ldw	r5,1164(sp)
    b028:	002b883a 	mov	r21,zero
    b02c:	00800044 	movi	r2,1
    b030:	2cc00017 	ldw	r19,0(r5)
    b034:	29400104 	addi	r5,r5,4
    b038:	d9412315 	stw	r5,1164(sp)
    b03c:	9807883a 	mov	r3,r19
    b040:	003f8c06 	br	ae74 <__alt_data_end+0xfffb5744>
    b044:	d8c12203 	ldbu	r3,1160(sp)
    b048:	01000074 	movhi	r4,1
    b04c:	210a8b04 	addi	r4,r4,10796
    b050:	d8c11d85 	stb	r3,1142(sp)
    b054:	d9012715 	stw	r4,1180(sp)
    b058:	90c0080c 	andi	r3,r18,32
    b05c:	9811883a 	mov	r8,r19
    b060:	d8812317 	ldw	r2,1164(sp)
    b064:	183fa11e 	bne	r3,zero,aeec <__alt_data_end+0xfffb57bc>
    b068:	90c0040c 	andi	r3,r18,16
    b06c:	1801e526 	beq	r3,zero,b804 <___vfiprintf_internal_r+0x1144>
    b070:	d9412317 	ldw	r5,1164(sp)
    b074:	14c00017 	ldw	r19,0(r2)
    b078:	002b883a 	mov	r21,zero
    b07c:	29400104 	addi	r5,r5,4
    b080:	d9412315 	stw	r5,1164(sp)
    b084:	003f9e06 	br	af00 <__alt_data_end+0xfffb57d0>
    b088:	9080080c 	andi	r2,r18,32
    b08c:	9811883a 	mov	r8,r19
    b090:	103f701e 	bne	r2,zero,ae54 <__alt_data_end+0xfffb5724>
    b094:	9080040c 	andi	r2,r18,16
    b098:	1001ef26 	beq	r2,zero,b858 <___vfiprintf_internal_r+0x1198>
    b09c:	d9012317 	ldw	r4,1164(sp)
    b0a0:	002b883a 	mov	r21,zero
    b0a4:	0005883a 	mov	r2,zero
    b0a8:	24c00017 	ldw	r19,0(r4)
    b0ac:	21000104 	addi	r4,r4,4
    b0b0:	d9012315 	stw	r4,1164(sp)
    b0b4:	9807883a 	mov	r3,r19
    b0b8:	003f6e06 	br	ae74 <__alt_data_end+0xfffb5744>
    b0bc:	d8c12317 	ldw	r3,1164(sp)
    b0c0:	9811883a 	mov	r8,r19
    b0c4:	00800c04 	movi	r2,48
    b0c8:	1cc00017 	ldw	r19,0(r3)
    b0cc:	01000074 	movhi	r4,1
    b0d0:	18c00104 	addi	r3,r3,4
    b0d4:	d8811d05 	stb	r2,1140(sp)
    b0d8:	210a8b04 	addi	r4,r4,10796
    b0dc:	00801e04 	movi	r2,120
    b0e0:	d8811d45 	stb	r2,1141(sp)
    b0e4:	d8c12315 	stw	r3,1164(sp)
    b0e8:	002b883a 	mov	r21,zero
    b0ec:	94800094 	ori	r18,r18,2
    b0f0:	d9012715 	stw	r4,1180(sp)
    b0f4:	00800084 	movi	r2,2
    b0f8:	9807883a 	mov	r3,r19
    b0fc:	003f5d06 	br	ae74 <__alt_data_end+0xfffb5744>
    b100:	d8c12203 	ldbu	r3,1160(sp)
    b104:	9080080c 	andi	r2,r18,32
    b108:	9811883a 	mov	r8,r19
    b10c:	d8c11d85 	stb	r3,1142(sp)
    b110:	1001b126 	beq	r2,zero,b7d8 <___vfiprintf_internal_r+0x1118>
    b114:	d9012317 	ldw	r4,1164(sp)
    b118:	d9412517 	ldw	r5,1172(sp)
    b11c:	20800017 	ldw	r2,0(r4)
    b120:	2807d7fa 	srai	r3,r5,31
    b124:	21000104 	addi	r4,r4,4
    b128:	d9012315 	stw	r4,1164(sp)
    b12c:	11400015 	stw	r5,0(r2)
    b130:	10c00115 	stw	r3,4(r2)
    b134:	003d9a06 	br	a7a0 <__alt_data_end+0xfffb5070>
    b138:	d8812207 	ldb	r2,1160(sp)
    b13c:	1001c41e 	bne	r2,zero,b850 <___vfiprintf_internal_r+0x1190>
    b140:	00c00804 	movi	r3,32
    b144:	d8c12205 	stb	r3,1160(sp)
    b148:	b9800007 	ldb	r6,0(r23)
    b14c:	003dbd06 	br	a844 <__alt_data_end+0xfffb5114>
    b150:	00c00ac4 	movi	r3,43
    b154:	d8c12205 	stb	r3,1160(sp)
    b158:	b9800007 	ldb	r6,0(r23)
    b15c:	003db906 	br	a844 <__alt_data_end+0xfffb5114>
    b160:	d8c12203 	ldbu	r3,1160(sp)
    b164:	9080080c 	andi	r2,r18,32
    b168:	9811883a 	mov	r8,r19
    b16c:	d8c11d85 	stb	r3,1142(sp)
    b170:	d8c12317 	ldw	r3,1164(sp)
    b174:	103e7e1e 	bne	r2,zero,ab70 <__alt_data_end+0xfffb5440>
    b178:	9080040c 	andi	r2,r18,16
    b17c:	1001a926 	beq	r2,zero,b824 <___vfiprintf_internal_r+0x1164>
    b180:	1cc00017 	ldw	r19,0(r3)
    b184:	d9412317 	ldw	r5,1164(sp)
    b188:	982bd7fa 	srai	r21,r19,31
    b18c:	29400104 	addi	r5,r5,4
    b190:	d9412315 	stw	r5,1164(sp)
    b194:	a805883a 	mov	r2,r21
    b198:	003e7b06 	br	ab88 <__alt_data_end+0xfffb5458>
    b19c:	94800054 	ori	r18,r18,1
    b1a0:	b9800007 	ldb	r6,0(r23)
    b1a4:	003da706 	br	a844 <__alt_data_end+0xfffb5114>
    b1a8:	d8c12203 	ldbu	r3,1160(sp)
    b1ac:	9811883a 	mov	r8,r19
    b1b0:	d8c11d85 	stb	r3,1142(sp)
    b1b4:	30005826 	beq	r6,zero,b318 <___vfiprintf_internal_r+0xc58>
    b1b8:	05400044 	movi	r21,1
    b1bc:	d8c10004 	addi	r3,sp,1024
    b1c0:	d9810005 	stb	r6,1024(sp)
    b1c4:	d8011d85 	stb	zero,1142(sp)
    b1c8:	a829883a 	mov	r20,r21
    b1cc:	d8c12215 	stw	r3,1160(sp)
    b1d0:	003f1a06 	br	ae3c <__alt_data_end+0xfffb570c>
    b1d4:	d9012117 	ldw	r4,1156(sp)
    b1d8:	d9412017 	ldw	r5,1152(sp)
    b1dc:	d9811a04 	addi	r6,sp,1128
    b1e0:	d9c12a15 	stw	r7,1192(sp)
    b1e4:	db012b15 	stw	r12,1196(sp)
    b1e8:	000a5ac0 	call	a5ac <__sprint_r.part.0>
    b1ec:	d9c12a17 	ldw	r7,1192(sp)
    b1f0:	db012b17 	ldw	r12,1196(sp)
    b1f4:	10004e1e 	bne	r2,zero,b330 <___vfiprintf_internal_r+0xc70>
    b1f8:	d9011b17 	ldw	r4,1132(sp)
    b1fc:	d8c11c17 	ldw	r3,1136(sp)
    b200:	d811883a 	mov	r8,sp
    b204:	21400044 	addi	r5,r4,1
    b208:	003e9d06 	br	ac80 <__alt_data_end+0xfffb5550>
    b20c:	d9411b17 	ldw	r5,1132(sp)
    b210:	d8c11c17 	ldw	r3,1136(sp)
    b214:	28800044 	addi	r2,r5,1
    b218:	d9011d87 	ldb	r4,1142(sp)
    b21c:	203eb626 	beq	r4,zero,acf8 <__alt_data_end+0xfffb55c8>
    b220:	01000044 	movi	r4,1
    b224:	d9411d84 	addi	r5,sp,1142
    b228:	1907883a 	add	r3,r3,r4
    b22c:	41400015 	stw	r5,0(r8)
    b230:	41000115 	stw	r4,4(r8)
    b234:	d8c11c15 	stw	r3,1136(sp)
    b238:	d8811b15 	stw	r2,1132(sp)
    b23c:	014001c4 	movi	r5,7
    b240:	2880ce16 	blt	r5,r2,b57c <___vfiprintf_internal_r+0xebc>
    b244:	100b883a 	mov	r5,r2
    b248:	42000204 	addi	r8,r8,8
    b24c:	10800044 	addi	r2,r2,1
    b250:	003ea906 	br	acf8 <__alt_data_end+0xfffb55c8>
    b254:	d9012117 	ldw	r4,1156(sp)
    b258:	d9412017 	ldw	r5,1152(sp)
    b25c:	d9811a04 	addi	r6,sp,1128
    b260:	000a5ac0 	call	a5ac <__sprint_r.part.0>
    b264:	1000321e 	bne	r2,zero,b330 <___vfiprintf_internal_r+0xc70>
    b268:	d9411b17 	ldw	r5,1132(sp)
    b26c:	d8c11c17 	ldw	r3,1136(sp)
    b270:	d811883a 	mov	r8,sp
    b274:	28800044 	addi	r2,r5,1
    b278:	003eba06 	br	ad64 <__alt_data_end+0xfffb5634>
    b27c:	10803fcc 	andi	r2,r2,255
    b280:	00c00044 	movi	r3,1
    b284:	10fe4d1e 	bne	r2,r3,abbc <__alt_data_end+0xfffb548c>
    b288:	a800021e 	bne	r21,zero,b294 <___vfiprintf_internal_r+0xbd4>
    b28c:	00800244 	movi	r2,9
    b290:	14c01b2e 	bgeu	r2,r19,b300 <___vfiprintf_internal_r+0xc40>
    b294:	dc012215 	stw	r16,1160(sp)
    b298:	dd010a04 	addi	r20,sp,1064
    b29c:	a821883a 	mov	r16,r21
    b2a0:	402b883a 	mov	r21,r8
    b2a4:	9809883a 	mov	r4,r19
    b2a8:	800b883a 	mov	r5,r16
    b2ac:	01800284 	movi	r6,10
    b2b0:	000f883a 	mov	r7,zero
    b2b4:	000cba00 	call	cba0 <__umoddi3>
    b2b8:	10800c04 	addi	r2,r2,48
    b2bc:	a53fffc4 	addi	r20,r20,-1
    b2c0:	9809883a 	mov	r4,r19
    b2c4:	800b883a 	mov	r5,r16
    b2c8:	01800284 	movi	r6,10
    b2cc:	000f883a 	mov	r7,zero
    b2d0:	a0800005 	stb	r2,0(r20)
    b2d4:	000c5600 	call	c560 <__udivdi3>
    b2d8:	1027883a 	mov	r19,r2
    b2dc:	10c4b03a 	or	r2,r2,r3
    b2e0:	1821883a 	mov	r16,r3
    b2e4:	103fef1e 	bne	r2,zero,b2a4 <__alt_data_end+0xfffb5b74>
    b2e8:	d9011e17 	ldw	r4,1144(sp)
    b2ec:	dc012217 	ldw	r16,1160(sp)
    b2f0:	a811883a 	mov	r8,r21
    b2f4:	dd012215 	stw	r20,1160(sp)
    b2f8:	2529c83a 	sub	r20,r4,r20
    b2fc:	003e4106 	br	ac04 <__alt_data_end+0xfffb54d4>
    b300:	9cc00c04 	addi	r19,r19,48
    b304:	d8c109c4 	addi	r3,sp,1063
    b308:	dcc109c5 	stb	r19,1063(sp)
    b30c:	dd012817 	ldw	r20,1184(sp)
    b310:	d8c12215 	stw	r3,1160(sp)
    b314:	003e3b06 	br	ac04 <__alt_data_end+0xfffb54d4>
    b318:	d8811c17 	ldw	r2,1136(sp)
    b31c:	10000426 	beq	r2,zero,b330 <___vfiprintf_internal_r+0xc70>
    b320:	d9012117 	ldw	r4,1156(sp)
    b324:	d9412017 	ldw	r5,1152(sp)
    b328:	d9811a04 	addi	r6,sp,1128
    b32c:	000a5ac0 	call	a5ac <__sprint_r.part.0>
    b330:	d9412017 	ldw	r5,1152(sp)
    b334:	2880030b 	ldhu	r2,12(r5)
    b338:	1080100c 	andi	r2,r2,64
    b33c:	103ddc1e 	bne	r2,zero,aab0 <__alt_data_end+0xfffb5380>
    b340:	d8812517 	ldw	r2,1172(sp)
    b344:	003ddb06 	br	aab4 <__alt_data_end+0xfffb5384>
    b348:	1801061e 	bne	r3,zero,b764 <___vfiprintf_internal_r+0x10a4>
    b34c:	d8c12217 	ldw	r3,1160(sp)
    b350:	00800044 	movi	r2,1
    b354:	dd000115 	stw	r20,4(sp)
    b358:	d8c00015 	stw	r3,0(sp)
    b35c:	dd011c15 	stw	r20,1136(sp)
    b360:	d8811b15 	stw	r2,1132(sp)
    b364:	a007883a 	mov	r3,r20
    b368:	d811883a 	mov	r8,sp
    b36c:	42000204 	addi	r8,r8,8
    b370:	9480010c 	andi	r18,r18,4
    b374:	90003426 	beq	r18,zero,b448 <___vfiprintf_internal_r+0xd88>
    b378:	d9412417 	ldw	r5,1168(sp)
    b37c:	2d65c83a 	sub	r18,r5,r21
    b380:	0480310e 	bge	zero,r18,b448 <___vfiprintf_internal_r+0xd88>
    b384:	04000404 	movi	r16,16
    b388:	8481ad0e 	bge	r16,r18,ba40 <___vfiprintf_internal_r+0x1380>
    b38c:	01400074 	movhi	r5,1
    b390:	294af004 	addi	r5,r5,11200
    b394:	d9011b17 	ldw	r4,1132(sp)
    b398:	d9412615 	stw	r5,1176(sp)
    b39c:	04c001c4 	movi	r19,7
    b3a0:	dd012117 	ldw	r20,1156(sp)
    b3a4:	dd812017 	ldw	r22,1152(sp)
    b3a8:	00000506 	br	b3c0 <___vfiprintf_internal_r+0xd00>
    b3ac:	21400084 	addi	r5,r4,2
    b3b0:	42000204 	addi	r8,r8,8
    b3b4:	1009883a 	mov	r4,r2
    b3b8:	94bffc04 	addi	r18,r18,-16
    b3bc:	84800d0e 	bge	r16,r18,b3f4 <___vfiprintf_internal_r+0xd34>
    b3c0:	18c00404 	addi	r3,r3,16
    b3c4:	20800044 	addi	r2,r4,1
    b3c8:	47000015 	stw	fp,0(r8)
    b3cc:	44000115 	stw	r16,4(r8)
    b3d0:	d8c11c15 	stw	r3,1136(sp)
    b3d4:	d8811b15 	stw	r2,1132(sp)
    b3d8:	98bff40e 	bge	r19,r2,b3ac <__alt_data_end+0xfffb5c7c>
    b3dc:	1800291e 	bne	r3,zero,b484 <___vfiprintf_internal_r+0xdc4>
    b3e0:	94bffc04 	addi	r18,r18,-16
    b3e4:	0009883a 	mov	r4,zero
    b3e8:	01400044 	movi	r5,1
    b3ec:	d811883a 	mov	r8,sp
    b3f0:	84bff316 	blt	r16,r18,b3c0 <__alt_data_end+0xfffb5c90>
    b3f4:	d8812617 	ldw	r2,1176(sp)
    b3f8:	1c87883a 	add	r3,r3,r18
    b3fc:	44800115 	stw	r18,4(r8)
    b400:	40800015 	stw	r2,0(r8)
    b404:	d8c11c15 	stw	r3,1136(sp)
    b408:	d9411b15 	stw	r5,1132(sp)
    b40c:	008001c4 	movi	r2,7
    b410:	11400d0e 	bge	r2,r5,b448 <___vfiprintf_internal_r+0xd88>
    b414:	1800061e 	bne	r3,zero,b430 <___vfiprintf_internal_r+0xd70>
    b418:	d8c12417 	ldw	r3,1168(sp)
    b41c:	a8c12e16 	blt	r21,r3,b8d8 <___vfiprintf_internal_r+0x1218>
    b420:	d9012517 	ldw	r4,1172(sp)
    b424:	2549883a 	add	r4,r4,r21
    b428:	d9012515 	stw	r4,1172(sp)
    b42c:	00001206 	br	b478 <___vfiprintf_internal_r+0xdb8>
    b430:	d9012117 	ldw	r4,1156(sp)
    b434:	d9412017 	ldw	r5,1152(sp)
    b438:	d9811a04 	addi	r6,sp,1128
    b43c:	000a5ac0 	call	a5ac <__sprint_r.part.0>
    b440:	103fbb1e 	bne	r2,zero,b330 <__alt_data_end+0xfffb5c00>
    b444:	d8c11c17 	ldw	r3,1136(sp)
    b448:	d8812417 	ldw	r2,1168(sp)
    b44c:	a880010e 	bge	r21,r2,b454 <___vfiprintf_internal_r+0xd94>
    b450:	102b883a 	mov	r21,r2
    b454:	d9012517 	ldw	r4,1172(sp)
    b458:	2549883a 	add	r4,r4,r21
    b45c:	d9012515 	stw	r4,1172(sp)
    b460:	18000526 	beq	r3,zero,b478 <___vfiprintf_internal_r+0xdb8>
    b464:	d9012117 	ldw	r4,1156(sp)
    b468:	d9412017 	ldw	r5,1152(sp)
    b46c:	d9811a04 	addi	r6,sp,1128
    b470:	000a5ac0 	call	a5ac <__sprint_r.part.0>
    b474:	103fae1e 	bne	r2,zero,b330 <__alt_data_end+0xfffb5c00>
    b478:	d8011b15 	stw	zero,1132(sp)
    b47c:	d811883a 	mov	r8,sp
    b480:	003cc706 	br	a7a0 <__alt_data_end+0xfffb5070>
    b484:	a009883a 	mov	r4,r20
    b488:	b00b883a 	mov	r5,r22
    b48c:	d9811a04 	addi	r6,sp,1128
    b490:	000a5ac0 	call	a5ac <__sprint_r.part.0>
    b494:	103fa61e 	bne	r2,zero,b330 <__alt_data_end+0xfffb5c00>
    b498:	d9011b17 	ldw	r4,1132(sp)
    b49c:	d8c11c17 	ldw	r3,1136(sp)
    b4a0:	d811883a 	mov	r8,sp
    b4a4:	21400044 	addi	r5,r4,1
    b4a8:	003fc306 	br	b3b8 <__alt_data_end+0xfffb5c88>
    b4ac:	d9012417 	ldw	r4,1168(sp)
    b4b0:	256dc83a 	sub	r22,r4,r21
    b4b4:	05be1f0e 	bge	zero,r22,ad34 <__alt_data_end+0xfffb5604>
    b4b8:	04c00404 	movi	r19,16
    b4bc:	9d81720e 	bge	r19,r22,ba88 <___vfiprintf_internal_r+0x13c8>
    b4c0:	00800074 	movhi	r2,1
    b4c4:	108aec04 	addi	r2,r2,11184
    b4c8:	d8812615 	stw	r2,1176(sp)
    b4cc:	028001c4 	movi	r10,7
    b4d0:	00000506 	br	b4e8 <___vfiprintf_internal_r+0xe28>
    b4d4:	29000084 	addi	r4,r5,2
    b4d8:	42000204 	addi	r8,r8,8
    b4dc:	100b883a 	mov	r5,r2
    b4e0:	b5bffc04 	addi	r22,r22,-16
    b4e4:	9d800d0e 	bge	r19,r22,b51c <___vfiprintf_internal_r+0xe5c>
    b4e8:	18c00404 	addi	r3,r3,16
    b4ec:	28800044 	addi	r2,r5,1
    b4f0:	44400015 	stw	r17,0(r8)
    b4f4:	44c00115 	stw	r19,4(r8)
    b4f8:	d8c11c15 	stw	r3,1136(sp)
    b4fc:	d8811b15 	stw	r2,1132(sp)
    b500:	50bff40e 	bge	r10,r2,b4d4 <__alt_data_end+0xfffb5da4>
    b504:	1800111e 	bne	r3,zero,b54c <___vfiprintf_internal_r+0xe8c>
    b508:	b5bffc04 	addi	r22,r22,-16
    b50c:	000b883a 	mov	r5,zero
    b510:	01000044 	movi	r4,1
    b514:	d811883a 	mov	r8,sp
    b518:	9dbff316 	blt	r19,r22,b4e8 <__alt_data_end+0xfffb5db8>
    b51c:	d9412617 	ldw	r5,1176(sp)
    b520:	1d87883a 	add	r3,r3,r22
    b524:	45800115 	stw	r22,4(r8)
    b528:	41400015 	stw	r5,0(r8)
    b52c:	d8c11c15 	stw	r3,1136(sp)
    b530:	d9011b15 	stw	r4,1132(sp)
    b534:	008001c4 	movi	r2,7
    b538:	11008516 	blt	r2,r4,b750 <___vfiprintf_internal_r+0x1090>
    b53c:	42000204 	addi	r8,r8,8
    b540:	20800044 	addi	r2,r4,1
    b544:	200b883a 	mov	r5,r4
    b548:	003dfa06 	br	ad34 <__alt_data_end+0xfffb5604>
    b54c:	d9012117 	ldw	r4,1156(sp)
    b550:	d9412017 	ldw	r5,1152(sp)
    b554:	d9811a04 	addi	r6,sp,1128
    b558:	da812a15 	stw	r10,1192(sp)
    b55c:	000a5ac0 	call	a5ac <__sprint_r.part.0>
    b560:	da812a17 	ldw	r10,1192(sp)
    b564:	103f721e 	bne	r2,zero,b330 <__alt_data_end+0xfffb5c00>
    b568:	d9411b17 	ldw	r5,1132(sp)
    b56c:	d8c11c17 	ldw	r3,1136(sp)
    b570:	d811883a 	mov	r8,sp
    b574:	29000044 	addi	r4,r5,1
    b578:	003fd906 	br	b4e0 <__alt_data_end+0xfffb5db0>
    b57c:	1800681e 	bne	r3,zero,b720 <___vfiprintf_internal_r+0x1060>
    b580:	50004d26 	beq	r10,zero,b6b8 <___vfiprintf_internal_r+0xff8>
    b584:	d8811d04 	addi	r2,sp,1140
    b588:	00c00084 	movi	r3,2
    b58c:	d8800015 	stw	r2,0(sp)
    b590:	d8c00115 	stw	r3,4(sp)
    b594:	2005883a 	mov	r2,r4
    b598:	d811883a 	mov	r8,sp
    b59c:	003de006 	br	ad20 <__alt_data_end+0xfffb55f0>
    b5a0:	1800551e 	bne	r3,zero,b6f8 <___vfiprintf_internal_r+0x1038>
    b5a4:	000b883a 	mov	r5,zero
    b5a8:	00800044 	movi	r2,1
    b5ac:	d811883a 	mov	r8,sp
    b5b0:	003dde06 	br	ad2c <__alt_data_end+0xfffb55fc>
    b5b4:	10803fcc 	andi	r2,r2,255
    b5b8:	1000191e 	bne	r2,zero,b620 <___vfiprintf_internal_r+0xf60>
    b5bc:	9080004c 	andi	r2,r18,1
    b5c0:	10001726 	beq	r2,zero,b620 <___vfiprintf_internal_r+0xf60>
    b5c4:	00800c04 	movi	r2,48
    b5c8:	d8c109c4 	addi	r3,sp,1063
    b5cc:	d88109c5 	stb	r2,1063(sp)
    b5d0:	dd012817 	ldw	r20,1184(sp)
    b5d4:	d8c12215 	stw	r3,1160(sp)
    b5d8:	003d8a06 	br	ac04 <__alt_data_end+0xfffb54d4>
    b5dc:	d9012717 	ldw	r4,1180(sp)
    b5e0:	dd010a04 	addi	r20,sp,1064
    b5e4:	988003cc 	andi	r2,r19,15
    b5e8:	a806973a 	slli	r3,r21,28
    b5ec:	2085883a 	add	r2,r4,r2
    b5f0:	9826d13a 	srli	r19,r19,4
    b5f4:	10800003 	ldbu	r2,0(r2)
    b5f8:	a82ad13a 	srli	r21,r21,4
    b5fc:	a53fffc4 	addi	r20,r20,-1
    b600:	1ce6b03a 	or	r19,r3,r19
    b604:	a0800005 	stb	r2,0(r20)
    b608:	9d44b03a 	or	r2,r19,r21
    b60c:	103ff51e 	bne	r2,zero,b5e4 <__alt_data_end+0xfffb5eb4>
    b610:	d9411e17 	ldw	r5,1144(sp)
    b614:	dd012215 	stw	r20,1160(sp)
    b618:	2d29c83a 	sub	r20,r5,r20
    b61c:	003d7906 	br	ac04 <__alt_data_end+0xfffb54d4>
    b620:	d8c10a04 	addi	r3,sp,1064
    b624:	d8c12215 	stw	r3,1160(sp)
    b628:	003d7606 	br	ac04 <__alt_data_end+0xfffb54d4>
    b62c:	18009e1e 	bne	r3,zero,b8a8 <___vfiprintf_internal_r+0x11e8>
    b630:	d8811d87 	ldb	r2,1142(sp)
    b634:	10005f26 	beq	r2,zero,b7b4 <___vfiprintf_internal_r+0x10f4>
    b638:	00c00044 	movi	r3,1
    b63c:	d9011d84 	addi	r4,sp,1142
    b640:	1805883a 	mov	r2,r3
    b644:	d9000015 	stw	r4,0(sp)
    b648:	d8c00115 	stw	r3,4(sp)
    b64c:	d811883a 	mov	r8,sp
    b650:	003efc06 	br	b244 <__alt_data_end+0xfffb5b14>
    b654:	d9412417 	ldw	r5,1168(sp)
    b658:	d811883a 	mov	r8,sp
    b65c:	2d65c83a 	sub	r18,r5,r21
    b660:	04bf4816 	blt	zero,r18,b384 <__alt_data_end+0xfffb5c54>
    b664:	003f6c06 	br	b418 <__alt_data_end+0xfffb5ce8>
    b668:	b829883a 	mov	r20,r23
    b66c:	003c6906 	br	a814 <__alt_data_end+0xfffb50e4>
    b670:	d9012117 	ldw	r4,1156(sp)
    b674:	d9412017 	ldw	r5,1152(sp)
    b678:	d9811a04 	addi	r6,sp,1128
    b67c:	000a5ac0 	call	a5ac <__sprint_r.part.0>
    b680:	103f2b1e 	bne	r2,zero,b330 <__alt_data_end+0xfffb5c00>
    b684:	d8c11c17 	ldw	r3,1136(sp)
    b688:	d811883a 	mov	r8,sp
    b68c:	003f3806 	br	b370 <__alt_data_end+0xfffb5c40>
    b690:	00800084 	movi	r2,2
    b694:	9d46b03a 	or	r3,r19,r21
    b698:	003df606 	br	ae74 <__alt_data_end+0xfffb5744>
    b69c:	d9012117 	ldw	r4,1156(sp)
    b6a0:	d9412017 	ldw	r5,1152(sp)
    b6a4:	d9811a04 	addi	r6,sp,1128
    b6a8:	000a5ac0 	call	a5ac <__sprint_r.part.0>
    b6ac:	103f201e 	bne	r2,zero,b330 <__alt_data_end+0xfffb5c00>
    b6b0:	d811883a 	mov	r8,sp
    b6b4:	003cc606 	br	a9d0 <__alt_data_end+0xfffb52a0>
    b6b8:	000b883a 	mov	r5,zero
    b6bc:	2005883a 	mov	r2,r4
    b6c0:	d811883a 	mov	r8,sp
    b6c4:	003d9906 	br	ad2c <__alt_data_end+0xfffb55fc>
    b6c8:	10803fcc 	andi	r2,r2,255
    b6cc:	1080201c 	xori	r2,r2,128
    b6d0:	10bfe004 	addi	r2,r2,-128
    b6d4:	01000c04 	movi	r4,48
    b6d8:	1100b226 	beq	r2,r4,b9a4 <___vfiprintf_internal_r+0x12e4>
    b6dc:	d9412217 	ldw	r5,1160(sp)
    b6e0:	d8811e17 	ldw	r2,1144(sp)
    b6e4:	193fffc5 	stb	r4,-1(r3)
    b6e8:	297fffc4 	addi	r5,r5,-1
    b6ec:	d9412215 	stw	r5,1160(sp)
    b6f0:	1169c83a 	sub	r20,r2,r5
    b6f4:	003d4306 	br	ac04 <__alt_data_end+0xfffb54d4>
    b6f8:	d9012117 	ldw	r4,1156(sp)
    b6fc:	d9412017 	ldw	r5,1152(sp)
    b700:	d9811a04 	addi	r6,sp,1128
    b704:	000a5ac0 	call	a5ac <__sprint_r.part.0>
    b708:	103f091e 	bne	r2,zero,b330 <__alt_data_end+0xfffb5c00>
    b70c:	d9411b17 	ldw	r5,1132(sp)
    b710:	d8c11c17 	ldw	r3,1136(sp)
    b714:	d811883a 	mov	r8,sp
    b718:	28800044 	addi	r2,r5,1
    b71c:	003d8306 	br	ad2c <__alt_data_end+0xfffb55fc>
    b720:	d9012117 	ldw	r4,1156(sp)
    b724:	d9412017 	ldw	r5,1152(sp)
    b728:	d9811a04 	addi	r6,sp,1128
    b72c:	da812a15 	stw	r10,1192(sp)
    b730:	000a5ac0 	call	a5ac <__sprint_r.part.0>
    b734:	da812a17 	ldw	r10,1192(sp)
    b738:	103efd1e 	bne	r2,zero,b330 <__alt_data_end+0xfffb5c00>
    b73c:	d9411b17 	ldw	r5,1132(sp)
    b740:	d8c11c17 	ldw	r3,1136(sp)
    b744:	d811883a 	mov	r8,sp
    b748:	28800044 	addi	r2,r5,1
    b74c:	003d6a06 	br	acf8 <__alt_data_end+0xfffb55c8>
    b750:	1800a01e 	bne	r3,zero,b9d4 <___vfiprintf_internal_r+0x1314>
    b754:	000b883a 	mov	r5,zero
    b758:	00800044 	movi	r2,1
    b75c:	d811883a 	mov	r8,sp
    b760:	003d7406 	br	ad34 <__alt_data_end+0xfffb5604>
    b764:	d9012117 	ldw	r4,1156(sp)
    b768:	d9412017 	ldw	r5,1152(sp)
    b76c:	d9811a04 	addi	r6,sp,1128
    b770:	000a5ac0 	call	a5ac <__sprint_r.part.0>
    b774:	103eee1e 	bne	r2,zero,b330 <__alt_data_end+0xfffb5c00>
    b778:	d8811b17 	ldw	r2,1132(sp)
    b77c:	d8c11c17 	ldw	r3,1136(sp)
    b780:	d811883a 	mov	r8,sp
    b784:	10800044 	addi	r2,r2,1
    b788:	003d8f06 	br	adc8 <__alt_data_end+0xfffb5698>
    b78c:	04e7c83a 	sub	r19,zero,r19
    b790:	9804c03a 	cmpne	r2,r19,zero
    b794:	056bc83a 	sub	r21,zero,r21
    b798:	a8abc83a 	sub	r21,r21,r2
    b79c:	05800b44 	movi	r22,45
    b7a0:	dd811d85 	stb	r22,1142(sp)
    b7a4:	8029883a 	mov	r20,r16
    b7a8:	00800044 	movi	r2,1
    b7ac:	9d46b03a 	or	r3,r19,r21
    b7b0:	003cfa06 	br	ab9c <__alt_data_end+0xfffb546c>
    b7b4:	000b883a 	mov	r5,zero
    b7b8:	00800044 	movi	r2,1
    b7bc:	d811883a 	mov	r8,sp
    b7c0:	503d5a26 	beq	r10,zero,ad2c <__alt_data_end+0xfffb55fc>
    b7c4:	00c00084 	movi	r3,2
    b7c8:	d9011d04 	addi	r4,sp,1140
    b7cc:	d9000015 	stw	r4,0(sp)
    b7d0:	d8c00115 	stw	r3,4(sp)
    b7d4:	003d5206 	br	ad20 <__alt_data_end+0xfffb55f0>
    b7d8:	9080040c 	andi	r2,r18,16
    b7dc:	1000421e 	bne	r2,zero,b8e8 <___vfiprintf_internal_r+0x1228>
    b7e0:	9480100c 	andi	r18,r18,64
    b7e4:	90009c26 	beq	r18,zero,ba58 <___vfiprintf_internal_r+0x1398>
    b7e8:	d9412317 	ldw	r5,1164(sp)
    b7ec:	d8c12517 	ldw	r3,1172(sp)
    b7f0:	28800017 	ldw	r2,0(r5)
    b7f4:	29400104 	addi	r5,r5,4
    b7f8:	d9412315 	stw	r5,1164(sp)
    b7fc:	10c0000d 	sth	r3,0(r2)
    b800:	003be706 	br	a7a0 <__alt_data_end+0xfffb5070>
    b804:	90c0100c 	andi	r3,r18,64
    b808:	18003e26 	beq	r3,zero,b904 <___vfiprintf_internal_r+0x1244>
    b80c:	d8c12317 	ldw	r3,1164(sp)
    b810:	14c0000b 	ldhu	r19,0(r2)
    b814:	002b883a 	mov	r21,zero
    b818:	18c00104 	addi	r3,r3,4
    b81c:	d8c12315 	stw	r3,1164(sp)
    b820:	003db706 	br	af00 <__alt_data_end+0xfffb57d0>
    b824:	9080100c 	andi	r2,r18,64
    b828:	10004c26 	beq	r2,zero,b95c <___vfiprintf_internal_r+0x129c>
    b82c:	1cc0000f 	ldh	r19,0(r3)
    b830:	d8812317 	ldw	r2,1164(sp)
    b834:	982bd7fa 	srai	r21,r19,31
    b838:	10800104 	addi	r2,r2,4
    b83c:	d8812315 	stw	r2,1164(sp)
    b840:	a805883a 	mov	r2,r21
    b844:	003cd006 	br	ab88 <__alt_data_end+0xfffb5458>
    b848:	00800084 	movi	r2,2
    b84c:	003d8906 	br	ae74 <__alt_data_end+0xfffb5744>
    b850:	b9800007 	ldb	r6,0(r23)
    b854:	003bfb06 	br	a844 <__alt_data_end+0xfffb5114>
    b858:	9080100c 	andi	r2,r18,64
    b85c:	10003726 	beq	r2,zero,b93c <___vfiprintf_internal_r+0x127c>
    b860:	d9412317 	ldw	r5,1164(sp)
    b864:	002b883a 	mov	r21,zero
    b868:	0005883a 	mov	r2,zero
    b86c:	2cc0000b 	ldhu	r19,0(r5)
    b870:	29400104 	addi	r5,r5,4
    b874:	d9412315 	stw	r5,1164(sp)
    b878:	9807883a 	mov	r3,r19
    b87c:	003d7d06 	br	ae74 <__alt_data_end+0xfffb5744>
    b880:	9080100c 	andi	r2,r18,64
    b884:	10002526 	beq	r2,zero,b91c <___vfiprintf_internal_r+0x125c>
    b888:	d8812317 	ldw	r2,1164(sp)
    b88c:	002b883a 	mov	r21,zero
    b890:	14c0000b 	ldhu	r19,0(r2)
    b894:	10800104 	addi	r2,r2,4
    b898:	d8812315 	stw	r2,1164(sp)
    b89c:	9807883a 	mov	r3,r19
    b8a0:	00800044 	movi	r2,1
    b8a4:	003d7306 	br	ae74 <__alt_data_end+0xfffb5744>
    b8a8:	d9012117 	ldw	r4,1156(sp)
    b8ac:	d9412017 	ldw	r5,1152(sp)
    b8b0:	d9811a04 	addi	r6,sp,1128
    b8b4:	da812a15 	stw	r10,1192(sp)
    b8b8:	000a5ac0 	call	a5ac <__sprint_r.part.0>
    b8bc:	da812a17 	ldw	r10,1192(sp)
    b8c0:	103e9b1e 	bne	r2,zero,b330 <__alt_data_end+0xfffb5c00>
    b8c4:	d9411b17 	ldw	r5,1132(sp)
    b8c8:	d8c11c17 	ldw	r3,1136(sp)
    b8cc:	d811883a 	mov	r8,sp
    b8d0:	28800044 	addi	r2,r5,1
    b8d4:	003e5006 	br	b218 <__alt_data_end+0xfffb5ae8>
    b8d8:	182b883a 	mov	r21,r3
    b8dc:	003ed006 	br	b420 <__alt_data_end+0xfffb5cf0>
    b8e0:	8029883a 	mov	r20,r16
    b8e4:	003dc606 	br	b000 <__alt_data_end+0xfffb58d0>
    b8e8:	d8c12317 	ldw	r3,1164(sp)
    b8ec:	d9012517 	ldw	r4,1172(sp)
    b8f0:	18800017 	ldw	r2,0(r3)
    b8f4:	18c00104 	addi	r3,r3,4
    b8f8:	d8c12315 	stw	r3,1164(sp)
    b8fc:	11000015 	stw	r4,0(r2)
    b900:	003ba706 	br	a7a0 <__alt_data_end+0xfffb5070>
    b904:	d9012317 	ldw	r4,1164(sp)
    b908:	14c00017 	ldw	r19,0(r2)
    b90c:	002b883a 	mov	r21,zero
    b910:	21000104 	addi	r4,r4,4
    b914:	d9012315 	stw	r4,1164(sp)
    b918:	003d7906 	br	af00 <__alt_data_end+0xfffb57d0>
    b91c:	d8c12317 	ldw	r3,1164(sp)
    b920:	002b883a 	mov	r21,zero
    b924:	00800044 	movi	r2,1
    b928:	1cc00017 	ldw	r19,0(r3)
    b92c:	18c00104 	addi	r3,r3,4
    b930:	d8c12315 	stw	r3,1164(sp)
    b934:	9807883a 	mov	r3,r19
    b938:	003d4e06 	br	ae74 <__alt_data_end+0xfffb5744>
    b93c:	d8812317 	ldw	r2,1164(sp)
    b940:	002b883a 	mov	r21,zero
    b944:	14c00017 	ldw	r19,0(r2)
    b948:	10800104 	addi	r2,r2,4
    b94c:	d8812315 	stw	r2,1164(sp)
    b950:	9807883a 	mov	r3,r19
    b954:	0005883a 	mov	r2,zero
    b958:	003d4606 	br	ae74 <__alt_data_end+0xfffb5744>
    b95c:	1cc00017 	ldw	r19,0(r3)
    b960:	d8c12317 	ldw	r3,1164(sp)
    b964:	982bd7fa 	srai	r21,r19,31
    b968:	18c00104 	addi	r3,r3,4
    b96c:	d8c12315 	stw	r3,1164(sp)
    b970:	a805883a 	mov	r2,r21
    b974:	003c8406 	br	ab88 <__alt_data_end+0xfffb5458>
    b978:	01000074 	movhi	r4,1
    b97c:	210aec04 	addi	r4,r4,11184
    b980:	d9012615 	stw	r4,1176(sp)
    b984:	003d0606 	br	ada0 <__alt_data_end+0xfffb5670>
    b988:	b9800043 	ldbu	r6,1(r23)
    b98c:	94800814 	ori	r18,r18,32
    b990:	bdc00044 	addi	r23,r23,1
    b994:	31803fcc 	andi	r6,r6,255
    b998:	3180201c 	xori	r6,r6,128
    b99c:	31bfe004 	addi	r6,r6,-128
    b9a0:	003ba806 	br	a844 <__alt_data_end+0xfffb5114>
    b9a4:	d8811e17 	ldw	r2,1144(sp)
    b9a8:	d8c12217 	ldw	r3,1160(sp)
    b9ac:	10e9c83a 	sub	r20,r2,r3
    b9b0:	003c9406 	br	ac04 <__alt_data_end+0xfffb54d4>
    b9b4:	da012a15 	stw	r8,1192(sp)
    b9b8:	00039cc0 	call	39cc <strlen>
    b9bc:	1029883a 	mov	r20,r2
    b9c0:	dd811d83 	ldbu	r22,1142(sp)
    b9c4:	dcc12315 	stw	r19,1164(sp)
    b9c8:	0021883a 	mov	r16,zero
    b9cc:	da012a17 	ldw	r8,1192(sp)
    b9d0:	003c8c06 	br	ac04 <__alt_data_end+0xfffb54d4>
    b9d4:	d9012117 	ldw	r4,1156(sp)
    b9d8:	d9412017 	ldw	r5,1152(sp)
    b9dc:	d9811a04 	addi	r6,sp,1128
    b9e0:	000a5ac0 	call	a5ac <__sprint_r.part.0>
    b9e4:	103e521e 	bne	r2,zero,b330 <__alt_data_end+0xfffb5c00>
    b9e8:	d9411b17 	ldw	r5,1132(sp)
    b9ec:	d8c11c17 	ldw	r3,1136(sp)
    b9f0:	d811883a 	mov	r8,sp
    b9f4:	28800044 	addi	r2,r5,1
    b9f8:	003cce06 	br	ad34 <__alt_data_end+0xfffb5604>
    b9fc:	01400074 	movhi	r5,1
    ba00:	294af004 	addi	r5,r5,11200
    ba04:	d9412615 	stw	r5,1176(sp)
    ba08:	d9411b17 	ldw	r5,1132(sp)
    ba0c:	29400044 	addi	r5,r5,1
    ba10:	003cad06 	br	acc8 <__alt_data_end+0xfffb5598>
    ba14:	00800184 	movi	r2,6
    ba18:	1400012e 	bgeu	r2,r16,ba20 <___vfiprintf_internal_r+0x1360>
    ba1c:	1021883a 	mov	r16,r2
    ba20:	8029883a 	mov	r20,r16
    ba24:	802b883a 	mov	r21,r16
    ba28:	80001c16 	blt	r16,zero,ba9c <___vfiprintf_internal_r+0x13dc>
    ba2c:	00c00074 	movhi	r3,1
    ba30:	18ca9004 	addi	r3,r3,10816
    ba34:	dcc12315 	stw	r19,1164(sp)
    ba38:	d8c12215 	stw	r3,1160(sp)
    ba3c:	003cff06 	br	ae3c <__alt_data_end+0xfffb570c>
    ba40:	d9411b17 	ldw	r5,1132(sp)
    ba44:	00800074 	movhi	r2,1
    ba48:	108af004 	addi	r2,r2,11200
    ba4c:	d8812615 	stw	r2,1176(sp)
    ba50:	29400044 	addi	r5,r5,1
    ba54:	003e6706 	br	b3f4 <__alt_data_end+0xfffb5cc4>
    ba58:	d9012317 	ldw	r4,1164(sp)
    ba5c:	d9412517 	ldw	r5,1172(sp)
    ba60:	20800017 	ldw	r2,0(r4)
    ba64:	21000104 	addi	r4,r4,4
    ba68:	d9012315 	stw	r4,1164(sp)
    ba6c:	11400015 	stw	r5,0(r2)
    ba70:	003b4b06 	br	a7a0 <__alt_data_end+0xfffb5070>
    ba74:	8029883a 	mov	r20,r16
    ba78:	dd811d83 	ldbu	r22,1142(sp)
    ba7c:	dcc12315 	stw	r19,1164(sp)
    ba80:	0021883a 	mov	r16,zero
    ba84:	003c5f06 	br	ac04 <__alt_data_end+0xfffb54d4>
    ba88:	01000074 	movhi	r4,1
    ba8c:	210aec04 	addi	r4,r4,11184
    ba90:	d9012615 	stw	r4,1176(sp)
    ba94:	1009883a 	mov	r4,r2
    ba98:	003ea006 	br	b51c <__alt_data_end+0xfffb5dec>
    ba9c:	002b883a 	mov	r21,zero
    baa0:	003fe206 	br	ba2c <__alt_data_end+0xfffb62fc>
    baa4:	d9412317 	ldw	r5,1164(sp)
    baa8:	b807883a 	mov	r3,r23
    baac:	102f883a 	mov	r23,r2
    bab0:	2c000017 	ldw	r16,0(r5)
    bab4:	29000104 	addi	r4,r5,4
    bab8:	d9012315 	stw	r4,1164(sp)
    babc:	80000416 	blt	r16,zero,bad0 <___vfiprintf_internal_r+0x1410>
    bac0:	19800047 	ldb	r6,1(r3)
    bac4:	003b5f06 	br	a844 <__alt_data_end+0xfffb5114>
    bac8:	043fffc4 	movi	r16,-1
    bacc:	003bef06 	br	aa8c <__alt_data_end+0xfffb535c>
    bad0:	043fffc4 	movi	r16,-1
    bad4:	19800047 	ldb	r6,1(r3)
    bad8:	003b5a06 	br	a844 <__alt_data_end+0xfffb5114>
    badc:	282b883a 	mov	r21,r5
    bae0:	003cc706 	br	ae00 <__alt_data_end+0xfffb56d0>

0000bae4 <__vfiprintf_internal>:
    bae4:	2007883a 	mov	r3,r4
    bae8:	01000074 	movhi	r4,1
    baec:	21120904 	addi	r4,r4,18468
    baf0:	21000017 	ldw	r4,0(r4)
    baf4:	2805883a 	mov	r2,r5
    baf8:	300f883a 	mov	r7,r6
    bafc:	180b883a 	mov	r5,r3
    bb00:	100d883a 	mov	r6,r2
    bb04:	000a6c01 	jmpi	a6c0 <___vfiprintf_internal_r>

0000bb08 <_write_r>:
    bb08:	defffd04 	addi	sp,sp,-12
    bb0c:	dc000015 	stw	r16,0(sp)
    bb10:	04000074 	movhi	r16,1
    bb14:	dc400115 	stw	r17,4(sp)
    bb18:	8418f504 	addi	r16,r16,25556
    bb1c:	2023883a 	mov	r17,r4
    bb20:	2809883a 	mov	r4,r5
    bb24:	300b883a 	mov	r5,r6
    bb28:	380d883a 	mov	r6,r7
    bb2c:	dfc00215 	stw	ra,8(sp)
    bb30:	80000015 	stw	zero,0(r16)
    bb34:	00103040 	call	10304 <write>
    bb38:	00ffffc4 	movi	r3,-1
    bb3c:	10c00526 	beq	r2,r3,bb54 <_write_r+0x4c>
    bb40:	dfc00217 	ldw	ra,8(sp)
    bb44:	dc400117 	ldw	r17,4(sp)
    bb48:	dc000017 	ldw	r16,0(sp)
    bb4c:	dec00304 	addi	sp,sp,12
    bb50:	f800283a 	ret
    bb54:	80c00017 	ldw	r3,0(r16)
    bb58:	183ff926 	beq	r3,zero,bb40 <__alt_data_end+0xfffb6410>
    bb5c:	88c00015 	stw	r3,0(r17)
    bb60:	003ff706 	br	bb40 <__alt_data_end+0xfffb6410>

0000bb64 <_close_r>:
    bb64:	defffd04 	addi	sp,sp,-12
    bb68:	dc000015 	stw	r16,0(sp)
    bb6c:	04000074 	movhi	r16,1
    bb70:	dc400115 	stw	r17,4(sp)
    bb74:	8418f504 	addi	r16,r16,25556
    bb78:	2023883a 	mov	r17,r4
    bb7c:	2809883a 	mov	r4,r5
    bb80:	dfc00215 	stw	ra,8(sp)
    bb84:	80000015 	stw	zero,0(r16)
    bb88:	000fa300 	call	fa30 <close>
    bb8c:	00ffffc4 	movi	r3,-1
    bb90:	10c00526 	beq	r2,r3,bba8 <_close_r+0x44>
    bb94:	dfc00217 	ldw	ra,8(sp)
    bb98:	dc400117 	ldw	r17,4(sp)
    bb9c:	dc000017 	ldw	r16,0(sp)
    bba0:	dec00304 	addi	sp,sp,12
    bba4:	f800283a 	ret
    bba8:	80c00017 	ldw	r3,0(r16)
    bbac:	183ff926 	beq	r3,zero,bb94 <__alt_data_end+0xfffb6464>
    bbb0:	88c00015 	stw	r3,0(r17)
    bbb4:	003ff706 	br	bb94 <__alt_data_end+0xfffb6464>

0000bbb8 <_calloc_r>:
    bbb8:	defffe04 	addi	sp,sp,-8
    bbbc:	dc000015 	stw	r16,0(sp)
    bbc0:	2021883a 	mov	r16,r4
    bbc4:	2809883a 	mov	r4,r5
    bbc8:	300b883a 	mov	r5,r6
    bbcc:	dfc00115 	stw	ra,4(sp)
    bbd0:	000d1bc0 	call	d1bc <__mulsi3>
    bbd4:	8009883a 	mov	r4,r16
    bbd8:	100b883a 	mov	r5,r2
    bbdc:	00030200 	call	3020 <_malloc_r>
    bbe0:	1021883a 	mov	r16,r2
    bbe4:	10002826 	beq	r2,zero,bc88 <_calloc_r+0xd0>
    bbe8:	11bfff17 	ldw	r6,-4(r2)
    bbec:	00bfff04 	movi	r2,-4
    bbf0:	00c00904 	movi	r3,36
    bbf4:	308c703a 	and	r6,r6,r2
    bbf8:	308d883a 	add	r6,r6,r2
    bbfc:	19801436 	bltu	r3,r6,bc50 <_calloc_r+0x98>
    bc00:	008004c4 	movi	r2,19
    bc04:	11800936 	bltu	r2,r6,bc2c <_calloc_r+0x74>
    bc08:	8005883a 	mov	r2,r16
    bc0c:	10000015 	stw	zero,0(r2)
    bc10:	10000115 	stw	zero,4(r2)
    bc14:	10000215 	stw	zero,8(r2)
    bc18:	8005883a 	mov	r2,r16
    bc1c:	dfc00117 	ldw	ra,4(sp)
    bc20:	dc000017 	ldw	r16,0(sp)
    bc24:	dec00204 	addi	sp,sp,8
    bc28:	f800283a 	ret
    bc2c:	80000015 	stw	zero,0(r16)
    bc30:	80000115 	stw	zero,4(r16)
    bc34:	008006c4 	movi	r2,27
    bc38:	11800d2e 	bgeu	r2,r6,bc70 <_calloc_r+0xb8>
    bc3c:	80000215 	stw	zero,8(r16)
    bc40:	80000315 	stw	zero,12(r16)
    bc44:	30c00c26 	beq	r6,r3,bc78 <_calloc_r+0xc0>
    bc48:	80800404 	addi	r2,r16,16
    bc4c:	003fef06 	br	bc0c <__alt_data_end+0xfffb64dc>
    bc50:	8009883a 	mov	r4,r16
    bc54:	000b883a 	mov	r5,zero
    bc58:	0008c4c0 	call	8c4c <memset>
    bc5c:	8005883a 	mov	r2,r16
    bc60:	dfc00117 	ldw	ra,4(sp)
    bc64:	dc000017 	ldw	r16,0(sp)
    bc68:	dec00204 	addi	sp,sp,8
    bc6c:	f800283a 	ret
    bc70:	80800204 	addi	r2,r16,8
    bc74:	003fe506 	br	bc0c <__alt_data_end+0xfffb64dc>
    bc78:	80000415 	stw	zero,16(r16)
    bc7c:	80800604 	addi	r2,r16,24
    bc80:	80000515 	stw	zero,20(r16)
    bc84:	003fe106 	br	bc0c <__alt_data_end+0xfffb64dc>
    bc88:	0005883a 	mov	r2,zero
    bc8c:	003fe306 	br	bc1c <__alt_data_end+0xfffb64ec>

0000bc90 <_fclose_r>:
    bc90:	28003226 	beq	r5,zero,bd5c <_fclose_r+0xcc>
    bc94:	defffc04 	addi	sp,sp,-16
    bc98:	dc400115 	stw	r17,4(sp)
    bc9c:	2023883a 	mov	r17,r4
    bca0:	dc000015 	stw	r16,0(sp)
    bca4:	dfc00315 	stw	ra,12(sp)
    bca8:	dc800215 	stw	r18,8(sp)
    bcac:	2821883a 	mov	r16,r5
    bcb0:	0007bd00 	call	7bd0 <__sfp_lock_acquire>
    bcb4:	88000226 	beq	r17,zero,bcc0 <_fclose_r+0x30>
    bcb8:	88800e17 	ldw	r2,56(r17)
    bcbc:	10002926 	beq	r2,zero,bd64 <_fclose_r+0xd4>
    bcc0:	8080030f 	ldh	r2,12(r16)
    bcc4:	10002226 	beq	r2,zero,bd50 <_fclose_r+0xc0>
    bcc8:	8809883a 	mov	r4,r17
    bccc:	800b883a 	mov	r5,r16
    bcd0:	00076040 	call	7604 <_fflush_r>
    bcd4:	1025883a 	mov	r18,r2
    bcd8:	80800b17 	ldw	r2,44(r16)
    bcdc:	10000426 	beq	r2,zero,bcf0 <_fclose_r+0x60>
    bce0:	81400717 	ldw	r5,28(r16)
    bce4:	8809883a 	mov	r4,r17
    bce8:	103ee83a 	callr	r2
    bcec:	10002616 	blt	r2,zero,bd88 <_fclose_r+0xf8>
    bcf0:	8080030b 	ldhu	r2,12(r16)
    bcf4:	1080200c 	andi	r2,r2,128
    bcf8:	10001f1e 	bne	r2,zero,bd78 <_fclose_r+0xe8>
    bcfc:	81400c17 	ldw	r5,48(r16)
    bd00:	28000526 	beq	r5,zero,bd18 <_fclose_r+0x88>
    bd04:	80801004 	addi	r2,r16,64
    bd08:	28800226 	beq	r5,r2,bd14 <_fclose_r+0x84>
    bd0c:	8809883a 	mov	r4,r17
    bd10:	0007d340 	call	7d34 <_free_r>
    bd14:	80000c15 	stw	zero,48(r16)
    bd18:	81401117 	ldw	r5,68(r16)
    bd1c:	28000326 	beq	r5,zero,bd2c <_fclose_r+0x9c>
    bd20:	8809883a 	mov	r4,r17
    bd24:	0007d340 	call	7d34 <_free_r>
    bd28:	80001115 	stw	zero,68(r16)
    bd2c:	8000030d 	sth	zero,12(r16)
    bd30:	0007bd40 	call	7bd4 <__sfp_lock_release>
    bd34:	9005883a 	mov	r2,r18
    bd38:	dfc00317 	ldw	ra,12(sp)
    bd3c:	dc800217 	ldw	r18,8(sp)
    bd40:	dc400117 	ldw	r17,4(sp)
    bd44:	dc000017 	ldw	r16,0(sp)
    bd48:	dec00404 	addi	sp,sp,16
    bd4c:	f800283a 	ret
    bd50:	0007bd40 	call	7bd4 <__sfp_lock_release>
    bd54:	0005883a 	mov	r2,zero
    bd58:	003ff706 	br	bd38 <__alt_data_end+0xfffb6608>
    bd5c:	0005883a 	mov	r2,zero
    bd60:	f800283a 	ret
    bd64:	8809883a 	mov	r4,r17
    bd68:	0007bc00 	call	7bc0 <__sinit>
    bd6c:	8080030f 	ldh	r2,12(r16)
    bd70:	103fd51e 	bne	r2,zero,bcc8 <__alt_data_end+0xfffb6598>
    bd74:	003ff606 	br	bd50 <__alt_data_end+0xfffb6620>
    bd78:	81400417 	ldw	r5,16(r16)
    bd7c:	8809883a 	mov	r4,r17
    bd80:	0007d340 	call	7d34 <_free_r>
    bd84:	003fdd06 	br	bcfc <__alt_data_end+0xfffb65cc>
    bd88:	04bfffc4 	movi	r18,-1
    bd8c:	003fd806 	br	bcf0 <__alt_data_end+0xfffb65c0>

0000bd90 <fclose>:
    bd90:	00800074 	movhi	r2,1
    bd94:	10920904 	addi	r2,r2,18468
    bd98:	200b883a 	mov	r5,r4
    bd9c:	11000017 	ldw	r4,0(r2)
    bda0:	000bc901 	jmpi	bc90 <_fclose_r>

0000bda4 <_fputwc_r>:
    bda4:	3080030b 	ldhu	r2,12(r6)
    bda8:	defff804 	addi	sp,sp,-32
    bdac:	dcc00415 	stw	r19,16(sp)
    bdb0:	dc800315 	stw	r18,12(sp)
    bdb4:	dc000115 	stw	r16,4(sp)
    bdb8:	dfc00715 	stw	ra,28(sp)
    bdbc:	dd400615 	stw	r21,24(sp)
    bdc0:	dd000515 	stw	r20,20(sp)
    bdc4:	dc400215 	stw	r17,8(sp)
    bdc8:	10c8000c 	andi	r3,r2,8192
    bdcc:	3021883a 	mov	r16,r6
    bdd0:	2027883a 	mov	r19,r4
    bdd4:	2825883a 	mov	r18,r5
    bdd8:	1800051e 	bne	r3,zero,bdf0 <_fputwc_r+0x4c>
    bddc:	30c01917 	ldw	r3,100(r6)
    bde0:	10880014 	ori	r2,r2,8192
    bde4:	3080030d 	sth	r2,12(r6)
    bde8:	18880014 	ori	r2,r3,8192
    bdec:	30801915 	stw	r2,100(r6)
    bdf0:	00086c00 	call	86c0 <__locale_mb_cur_max>
    bdf4:	00c00044 	movi	r3,1
    bdf8:	10c03e26 	beq	r2,r3,bef4 <_fputwc_r+0x150>
    bdfc:	9809883a 	mov	r4,r19
    be00:	d80b883a 	mov	r5,sp
    be04:	900d883a 	mov	r6,r18
    be08:	81c01704 	addi	r7,r16,92
    be0c:	000c2540 	call	c254 <_wcrtomb_r>
    be10:	1029883a 	mov	r20,r2
    be14:	00bfffc4 	movi	r2,-1
    be18:	a0802026 	beq	r20,r2,be9c <_fputwc_r+0xf8>
    be1c:	d9400003 	ldbu	r5,0(sp)
    be20:	a0001c26 	beq	r20,zero,be94 <_fputwc_r+0xf0>
    be24:	0023883a 	mov	r17,zero
    be28:	05400284 	movi	r21,10
    be2c:	00000906 	br	be54 <_fputwc_r+0xb0>
    be30:	80800017 	ldw	r2,0(r16)
    be34:	11400005 	stb	r5,0(r2)
    be38:	80c00017 	ldw	r3,0(r16)
    be3c:	18c00044 	addi	r3,r3,1
    be40:	80c00015 	stw	r3,0(r16)
    be44:	8c400044 	addi	r17,r17,1
    be48:	dc45883a 	add	r2,sp,r17
    be4c:	8d00112e 	bgeu	r17,r20,be94 <_fputwc_r+0xf0>
    be50:	11400003 	ldbu	r5,0(r2)
    be54:	80c00217 	ldw	r3,8(r16)
    be58:	18ffffc4 	addi	r3,r3,-1
    be5c:	80c00215 	stw	r3,8(r16)
    be60:	183ff30e 	bge	r3,zero,be30 <__alt_data_end+0xfffb6700>
    be64:	80800617 	ldw	r2,24(r16)
    be68:	18801916 	blt	r3,r2,bed0 <_fputwc_r+0x12c>
    be6c:	80800017 	ldw	r2,0(r16)
    be70:	11400005 	stb	r5,0(r2)
    be74:	80800017 	ldw	r2,0(r16)
    be78:	10c00003 	ldbu	r3,0(r2)
    be7c:	10800044 	addi	r2,r2,1
    be80:	1d402326 	beq	r3,r21,bf10 <_fputwc_r+0x16c>
    be84:	80800015 	stw	r2,0(r16)
    be88:	8c400044 	addi	r17,r17,1
    be8c:	dc45883a 	add	r2,sp,r17
    be90:	8d3fef36 	bltu	r17,r20,be50 <__alt_data_end+0xfffb6720>
    be94:	9005883a 	mov	r2,r18
    be98:	00000406 	br	beac <_fputwc_r+0x108>
    be9c:	80c0030b 	ldhu	r3,12(r16)
    bea0:	a005883a 	mov	r2,r20
    bea4:	18c01014 	ori	r3,r3,64
    bea8:	80c0030d 	sth	r3,12(r16)
    beac:	dfc00717 	ldw	ra,28(sp)
    beb0:	dd400617 	ldw	r21,24(sp)
    beb4:	dd000517 	ldw	r20,20(sp)
    beb8:	dcc00417 	ldw	r19,16(sp)
    bebc:	dc800317 	ldw	r18,12(sp)
    bec0:	dc400217 	ldw	r17,8(sp)
    bec4:	dc000117 	ldw	r16,4(sp)
    bec8:	dec00804 	addi	sp,sp,32
    becc:	f800283a 	ret
    bed0:	9809883a 	mov	r4,r19
    bed4:	29403fcc 	andi	r5,r5,255
    bed8:	800d883a 	mov	r6,r16
    bedc:	000c0e40 	call	c0e4 <__swbuf_r>
    bee0:	10bfffe0 	cmpeqi	r2,r2,-1
    bee4:	10803fcc 	andi	r2,r2,255
    bee8:	103fd626 	beq	r2,zero,be44 <__alt_data_end+0xfffb6714>
    beec:	00bfffc4 	movi	r2,-1
    bef0:	003fee06 	br	beac <__alt_data_end+0xfffb677c>
    bef4:	90ffffc4 	addi	r3,r18,-1
    bef8:	01003f84 	movi	r4,254
    befc:	20ffbf36 	bltu	r4,r3,bdfc <__alt_data_end+0xfffb66cc>
    bf00:	900b883a 	mov	r5,r18
    bf04:	dc800005 	stb	r18,0(sp)
    bf08:	1029883a 	mov	r20,r2
    bf0c:	003fc506 	br	be24 <__alt_data_end+0xfffb66f4>
    bf10:	9809883a 	mov	r4,r19
    bf14:	a80b883a 	mov	r5,r21
    bf18:	800d883a 	mov	r6,r16
    bf1c:	000c0e40 	call	c0e4 <__swbuf_r>
    bf20:	10bfffe0 	cmpeqi	r2,r2,-1
    bf24:	003fef06 	br	bee4 <__alt_data_end+0xfffb67b4>

0000bf28 <fputwc>:
    bf28:	defffc04 	addi	sp,sp,-16
    bf2c:	dc000115 	stw	r16,4(sp)
    bf30:	04000074 	movhi	r16,1
    bf34:	84120904 	addi	r16,r16,18468
    bf38:	dc400215 	stw	r17,8(sp)
    bf3c:	2023883a 	mov	r17,r4
    bf40:	81000017 	ldw	r4,0(r16)
    bf44:	dfc00315 	stw	ra,12(sp)
    bf48:	280d883a 	mov	r6,r5
    bf4c:	20000626 	beq	r4,zero,bf68 <fputwc+0x40>
    bf50:	20800e17 	ldw	r2,56(r4)
    bf54:	1000041e 	bne	r2,zero,bf68 <fputwc+0x40>
    bf58:	d9400015 	stw	r5,0(sp)
    bf5c:	0007bc00 	call	7bc0 <__sinit>
    bf60:	81000017 	ldw	r4,0(r16)
    bf64:	d9800017 	ldw	r6,0(sp)
    bf68:	880b883a 	mov	r5,r17
    bf6c:	dfc00317 	ldw	ra,12(sp)
    bf70:	dc400217 	ldw	r17,8(sp)
    bf74:	dc000117 	ldw	r16,4(sp)
    bf78:	dec00404 	addi	sp,sp,16
    bf7c:	000bda41 	jmpi	bda4 <_fputwc_r>

0000bf80 <_fstat_r>:
    bf80:	defffd04 	addi	sp,sp,-12
    bf84:	dc000015 	stw	r16,0(sp)
    bf88:	04000074 	movhi	r16,1
    bf8c:	dc400115 	stw	r17,4(sp)
    bf90:	8418f504 	addi	r16,r16,25556
    bf94:	2023883a 	mov	r17,r4
    bf98:	2809883a 	mov	r4,r5
    bf9c:	300b883a 	mov	r5,r6
    bfa0:	dfc00215 	stw	ra,8(sp)
    bfa4:	80000015 	stw	zero,0(r16)
    bfa8:	000fb840 	call	fb84 <fstat>
    bfac:	00ffffc4 	movi	r3,-1
    bfb0:	10c00526 	beq	r2,r3,bfc8 <_fstat_r+0x48>
    bfb4:	dfc00217 	ldw	ra,8(sp)
    bfb8:	dc400117 	ldw	r17,4(sp)
    bfbc:	dc000017 	ldw	r16,0(sp)
    bfc0:	dec00304 	addi	sp,sp,12
    bfc4:	f800283a 	ret
    bfc8:	80c00017 	ldw	r3,0(r16)
    bfcc:	183ff926 	beq	r3,zero,bfb4 <__alt_data_end+0xfffb6884>
    bfd0:	88c00015 	stw	r3,0(r17)
    bfd4:	003ff706 	br	bfb4 <__alt_data_end+0xfffb6884>

0000bfd8 <_isatty_r>:
    bfd8:	defffd04 	addi	sp,sp,-12
    bfdc:	dc000015 	stw	r16,0(sp)
    bfe0:	04000074 	movhi	r16,1
    bfe4:	dc400115 	stw	r17,4(sp)
    bfe8:	8418f504 	addi	r16,r16,25556
    bfec:	2023883a 	mov	r17,r4
    bff0:	2809883a 	mov	r4,r5
    bff4:	dfc00215 	stw	ra,8(sp)
    bff8:	80000015 	stw	zero,0(r16)
    bffc:	000fc8c0 	call	fc8c <isatty>
    c000:	00ffffc4 	movi	r3,-1
    c004:	10c00526 	beq	r2,r3,c01c <_isatty_r+0x44>
    c008:	dfc00217 	ldw	ra,8(sp)
    c00c:	dc400117 	ldw	r17,4(sp)
    c010:	dc000017 	ldw	r16,0(sp)
    c014:	dec00304 	addi	sp,sp,12
    c018:	f800283a 	ret
    c01c:	80c00017 	ldw	r3,0(r16)
    c020:	183ff926 	beq	r3,zero,c008 <__alt_data_end+0xfffb68d8>
    c024:	88c00015 	stw	r3,0(r17)
    c028:	003ff706 	br	c008 <__alt_data_end+0xfffb68d8>

0000c02c <_lseek_r>:
    c02c:	defffd04 	addi	sp,sp,-12
    c030:	dc000015 	stw	r16,0(sp)
    c034:	04000074 	movhi	r16,1
    c038:	dc400115 	stw	r17,4(sp)
    c03c:	8418f504 	addi	r16,r16,25556
    c040:	2023883a 	mov	r17,r4
    c044:	2809883a 	mov	r4,r5
    c048:	300b883a 	mov	r5,r6
    c04c:	380d883a 	mov	r6,r7
    c050:	dfc00215 	stw	ra,8(sp)
    c054:	80000015 	stw	zero,0(r16)
    c058:	000fe6c0 	call	fe6c <lseek>
    c05c:	00ffffc4 	movi	r3,-1
    c060:	10c00526 	beq	r2,r3,c078 <_lseek_r+0x4c>
    c064:	dfc00217 	ldw	ra,8(sp)
    c068:	dc400117 	ldw	r17,4(sp)
    c06c:	dc000017 	ldw	r16,0(sp)
    c070:	dec00304 	addi	sp,sp,12
    c074:	f800283a 	ret
    c078:	80c00017 	ldw	r3,0(r16)
    c07c:	183ff926 	beq	r3,zero,c064 <__alt_data_end+0xfffb6934>
    c080:	88c00015 	stw	r3,0(r17)
    c084:	003ff706 	br	c064 <__alt_data_end+0xfffb6934>

0000c088 <_read_r>:
    c088:	defffd04 	addi	sp,sp,-12
    c08c:	dc000015 	stw	r16,0(sp)
    c090:	04000074 	movhi	r16,1
    c094:	dc400115 	stw	r17,4(sp)
    c098:	8418f504 	addi	r16,r16,25556
    c09c:	2023883a 	mov	r17,r4
    c0a0:	2809883a 	mov	r4,r5
    c0a4:	300b883a 	mov	r5,r6
    c0a8:	380d883a 	mov	r6,r7
    c0ac:	dfc00215 	stw	ra,8(sp)
    c0b0:	80000015 	stw	zero,0(r16)
    c0b4:	00100500 	call	10050 <read>
    c0b8:	00ffffc4 	movi	r3,-1
    c0bc:	10c00526 	beq	r2,r3,c0d4 <_read_r+0x4c>
    c0c0:	dfc00217 	ldw	ra,8(sp)
    c0c4:	dc400117 	ldw	r17,4(sp)
    c0c8:	dc000017 	ldw	r16,0(sp)
    c0cc:	dec00304 	addi	sp,sp,12
    c0d0:	f800283a 	ret
    c0d4:	80c00017 	ldw	r3,0(r16)
    c0d8:	183ff926 	beq	r3,zero,c0c0 <__alt_data_end+0xfffb6990>
    c0dc:	88c00015 	stw	r3,0(r17)
    c0e0:	003ff706 	br	c0c0 <__alt_data_end+0xfffb6990>

0000c0e4 <__swbuf_r>:
    c0e4:	defffc04 	addi	sp,sp,-16
    c0e8:	dc800215 	stw	r18,8(sp)
    c0ec:	dc400115 	stw	r17,4(sp)
    c0f0:	dc000015 	stw	r16,0(sp)
    c0f4:	dfc00315 	stw	ra,12(sp)
    c0f8:	2025883a 	mov	r18,r4
    c0fc:	2823883a 	mov	r17,r5
    c100:	3021883a 	mov	r16,r6
    c104:	20000226 	beq	r4,zero,c110 <__swbuf_r+0x2c>
    c108:	20800e17 	ldw	r2,56(r4)
    c10c:	10004126 	beq	r2,zero,c214 <__swbuf_r+0x130>
    c110:	80c00617 	ldw	r3,24(r16)
    c114:	8180030b 	ldhu	r6,12(r16)
    c118:	80c00215 	stw	r3,8(r16)
    c11c:	30c0020c 	andi	r3,r6,8
    c120:	18003526 	beq	r3,zero,c1f8 <__swbuf_r+0x114>
    c124:	80c00417 	ldw	r3,16(r16)
    c128:	18003326 	beq	r3,zero,c1f8 <__swbuf_r+0x114>
    c12c:	3088000c 	andi	r2,r6,8192
    c130:	8c403fcc 	andi	r17,r17,255
    c134:	10001726 	beq	r2,zero,c194 <__swbuf_r+0xb0>
    c138:	80800017 	ldw	r2,0(r16)
    c13c:	81000517 	ldw	r4,20(r16)
    c140:	10c7c83a 	sub	r3,r2,r3
    c144:	19001d0e 	bge	r3,r4,c1bc <__swbuf_r+0xd8>
    c148:	18c00044 	addi	r3,r3,1
    c14c:	81400217 	ldw	r5,8(r16)
    c150:	11000044 	addi	r4,r2,1
    c154:	81000015 	stw	r4,0(r16)
    c158:	297fffc4 	addi	r5,r5,-1
    c15c:	81400215 	stw	r5,8(r16)
    c160:	14400005 	stb	r17,0(r2)
    c164:	80800517 	ldw	r2,20(r16)
    c168:	10c01d26 	beq	r2,r3,c1e0 <__swbuf_r+0xfc>
    c16c:	8080030b 	ldhu	r2,12(r16)
    c170:	1080004c 	andi	r2,r2,1
    c174:	1000181e 	bne	r2,zero,c1d8 <__swbuf_r+0xf4>
    c178:	8805883a 	mov	r2,r17
    c17c:	dfc00317 	ldw	ra,12(sp)
    c180:	dc800217 	ldw	r18,8(sp)
    c184:	dc400117 	ldw	r17,4(sp)
    c188:	dc000017 	ldw	r16,0(sp)
    c18c:	dec00404 	addi	sp,sp,16
    c190:	f800283a 	ret
    c194:	81001917 	ldw	r4,100(r16)
    c198:	00b7ffc4 	movi	r2,-8193
    c19c:	31880014 	ori	r6,r6,8192
    c1a0:	2084703a 	and	r2,r4,r2
    c1a4:	80801915 	stw	r2,100(r16)
    c1a8:	80800017 	ldw	r2,0(r16)
    c1ac:	81000517 	ldw	r4,20(r16)
    c1b0:	8180030d 	sth	r6,12(r16)
    c1b4:	10c7c83a 	sub	r3,r2,r3
    c1b8:	193fe316 	blt	r3,r4,c148 <__alt_data_end+0xfffb6a18>
    c1bc:	9009883a 	mov	r4,r18
    c1c0:	800b883a 	mov	r5,r16
    c1c4:	00076040 	call	7604 <_fflush_r>
    c1c8:	1000091e 	bne	r2,zero,c1f0 <__swbuf_r+0x10c>
    c1cc:	80800017 	ldw	r2,0(r16)
    c1d0:	00c00044 	movi	r3,1
    c1d4:	003fdd06 	br	c14c <__alt_data_end+0xfffb6a1c>
    c1d8:	00800284 	movi	r2,10
    c1dc:	88bfe61e 	bne	r17,r2,c178 <__alt_data_end+0xfffb6a48>
    c1e0:	9009883a 	mov	r4,r18
    c1e4:	800b883a 	mov	r5,r16
    c1e8:	00076040 	call	7604 <_fflush_r>
    c1ec:	103fe226 	beq	r2,zero,c178 <__alt_data_end+0xfffb6a48>
    c1f0:	00bfffc4 	movi	r2,-1
    c1f4:	003fe106 	br	c17c <__alt_data_end+0xfffb6a4c>
    c1f8:	9009883a 	mov	r4,r18
    c1fc:	800b883a 	mov	r5,r16
    c200:	0005b840 	call	5b84 <__swsetup_r>
    c204:	1000051e 	bne	r2,zero,c21c <__swbuf_r+0x138>
    c208:	8180030b 	ldhu	r6,12(r16)
    c20c:	80c00417 	ldw	r3,16(r16)
    c210:	003fc606 	br	c12c <__alt_data_end+0xfffb69fc>
    c214:	0007bc00 	call	7bc0 <__sinit>
    c218:	003fbd06 	br	c110 <__alt_data_end+0xfffb69e0>
    c21c:	80c0030b 	ldhu	r3,12(r16)
    c220:	00bfffc4 	movi	r2,-1
    c224:	18c01014 	ori	r3,r3,64
    c228:	80c0030d 	sth	r3,12(r16)
    c22c:	00c00244 	movi	r3,9
    c230:	90c00015 	stw	r3,0(r18)
    c234:	003fd106 	br	c17c <__alt_data_end+0xfffb6a4c>

0000c238 <__swbuf>:
    c238:	00c00074 	movhi	r3,1
    c23c:	18d20904 	addi	r3,r3,18468
    c240:	2005883a 	mov	r2,r4
    c244:	19000017 	ldw	r4,0(r3)
    c248:	280d883a 	mov	r6,r5
    c24c:	100b883a 	mov	r5,r2
    c250:	000c0e41 	jmpi	c0e4 <__swbuf_r>

0000c254 <_wcrtomb_r>:
    c254:	defff604 	addi	sp,sp,-40
    c258:	00800074 	movhi	r2,1
    c25c:	dc800815 	stw	r18,32(sp)
    c260:	dc400715 	stw	r17,28(sp)
    c264:	dc000615 	stw	r16,24(sp)
    c268:	10920b04 	addi	r2,r2,18476
    c26c:	dfc00915 	stw	ra,36(sp)
    c270:	2021883a 	mov	r16,r4
    c274:	3823883a 	mov	r17,r7
    c278:	14800017 	ldw	r18,0(r2)
    c27c:	28001426 	beq	r5,zero,c2d0 <_wcrtomb_r+0x7c>
    c280:	d9400415 	stw	r5,16(sp)
    c284:	d9800515 	stw	r6,20(sp)
    c288:	00086b40 	call	86b4 <__locale_charset>
    c28c:	d9400417 	ldw	r5,16(sp)
    c290:	d9800517 	ldw	r6,20(sp)
    c294:	8009883a 	mov	r4,r16
    c298:	dc400015 	stw	r17,0(sp)
    c29c:	100f883a 	mov	r7,r2
    c2a0:	903ee83a 	callr	r18
    c2a4:	00ffffc4 	movi	r3,-1
    c2a8:	10c0031e 	bne	r2,r3,c2b8 <_wcrtomb_r+0x64>
    c2ac:	88000015 	stw	zero,0(r17)
    c2b0:	00c02284 	movi	r3,138
    c2b4:	80c00015 	stw	r3,0(r16)
    c2b8:	dfc00917 	ldw	ra,36(sp)
    c2bc:	dc800817 	ldw	r18,32(sp)
    c2c0:	dc400717 	ldw	r17,28(sp)
    c2c4:	dc000617 	ldw	r16,24(sp)
    c2c8:	dec00a04 	addi	sp,sp,40
    c2cc:	f800283a 	ret
    c2d0:	00086b40 	call	86b4 <__locale_charset>
    c2d4:	8009883a 	mov	r4,r16
    c2d8:	dc400015 	stw	r17,0(sp)
    c2dc:	d9400104 	addi	r5,sp,4
    c2e0:	000d883a 	mov	r6,zero
    c2e4:	100f883a 	mov	r7,r2
    c2e8:	903ee83a 	callr	r18
    c2ec:	003fed06 	br	c2a4 <__alt_data_end+0xfffb6b74>

0000c2f0 <wcrtomb>:
    c2f0:	defff504 	addi	sp,sp,-44
    c2f4:	dc400515 	stw	r17,20(sp)
    c2f8:	dc000415 	stw	r16,16(sp)
    c2fc:	dfc00a15 	stw	ra,40(sp)
    c300:	dd400915 	stw	r21,36(sp)
    c304:	dd000815 	stw	r20,32(sp)
    c308:	dcc00715 	stw	r19,28(sp)
    c30c:	dc800615 	stw	r18,24(sp)
    c310:	2021883a 	mov	r16,r4
    c314:	3023883a 	mov	r17,r6
    c318:	20001d26 	beq	r4,zero,c390 <wcrtomb+0xa0>
    c31c:	04800074 	movhi	r18,1
    c320:	94920904 	addi	r18,r18,18468
    c324:	00800074 	movhi	r2,1
    c328:	95400017 	ldw	r21,0(r18)
    c32c:	10920b04 	addi	r2,r2,18476
    c330:	15000017 	ldw	r20,0(r2)
    c334:	2827883a 	mov	r19,r5
    c338:	00086b40 	call	86b4 <__locale_charset>
    c33c:	a809883a 	mov	r4,r21
    c340:	dc400015 	stw	r17,0(sp)
    c344:	800b883a 	mov	r5,r16
    c348:	980d883a 	mov	r6,r19
    c34c:	100f883a 	mov	r7,r2
    c350:	a03ee83a 	callr	r20
    c354:	00ffffc4 	movi	r3,-1
    c358:	10c0041e 	bne	r2,r3,c36c <wcrtomb+0x7c>
    c35c:	90c00017 	ldw	r3,0(r18)
    c360:	01002284 	movi	r4,138
    c364:	88000015 	stw	zero,0(r17)
    c368:	19000015 	stw	r4,0(r3)
    c36c:	dfc00a17 	ldw	ra,40(sp)
    c370:	dd400917 	ldw	r21,36(sp)
    c374:	dd000817 	ldw	r20,32(sp)
    c378:	dcc00717 	ldw	r19,28(sp)
    c37c:	dc800617 	ldw	r18,24(sp)
    c380:	dc400517 	ldw	r17,20(sp)
    c384:	dc000417 	ldw	r16,16(sp)
    c388:	dec00b04 	addi	sp,sp,44
    c38c:	f800283a 	ret
    c390:	04800074 	movhi	r18,1
    c394:	94920904 	addi	r18,r18,18468
    c398:	00800074 	movhi	r2,1
    c39c:	94c00017 	ldw	r19,0(r18)
    c3a0:	10920b04 	addi	r2,r2,18476
    c3a4:	14000017 	ldw	r16,0(r2)
    c3a8:	00086b40 	call	86b4 <__locale_charset>
    c3ac:	9809883a 	mov	r4,r19
    c3b0:	dc400015 	stw	r17,0(sp)
    c3b4:	d9400104 	addi	r5,sp,4
    c3b8:	000d883a 	mov	r6,zero
    c3bc:	100f883a 	mov	r7,r2
    c3c0:	803ee83a 	callr	r16
    c3c4:	003fe306 	br	c354 <__alt_data_end+0xfffb6c24>

0000c3c8 <__ascii_wctomb>:
    c3c8:	28000526 	beq	r5,zero,c3e0 <__ascii_wctomb+0x18>
    c3cc:	00803fc4 	movi	r2,255
    c3d0:	11800536 	bltu	r2,r6,c3e8 <__ascii_wctomb+0x20>
    c3d4:	29800005 	stb	r6,0(r5)
    c3d8:	00800044 	movi	r2,1
    c3dc:	f800283a 	ret
    c3e0:	0005883a 	mov	r2,zero
    c3e4:	f800283a 	ret
    c3e8:	00802284 	movi	r2,138
    c3ec:	20800015 	stw	r2,0(r4)
    c3f0:	00bfffc4 	movi	r2,-1
    c3f4:	f800283a 	ret

0000c3f8 <_wctomb_r>:
    c3f8:	00800074 	movhi	r2,1
    c3fc:	defff904 	addi	sp,sp,-28
    c400:	10920b04 	addi	r2,r2,18476
    c404:	dfc00615 	stw	ra,24(sp)
    c408:	dc400515 	stw	r17,20(sp)
    c40c:	dc000415 	stw	r16,16(sp)
    c410:	3823883a 	mov	r17,r7
    c414:	14000017 	ldw	r16,0(r2)
    c418:	d9000115 	stw	r4,4(sp)
    c41c:	d9400215 	stw	r5,8(sp)
    c420:	d9800315 	stw	r6,12(sp)
    c424:	00086b40 	call	86b4 <__locale_charset>
    c428:	d9000117 	ldw	r4,4(sp)
    c42c:	d9400217 	ldw	r5,8(sp)
    c430:	d9800317 	ldw	r6,12(sp)
    c434:	dc400015 	stw	r17,0(sp)
    c438:	100f883a 	mov	r7,r2
    c43c:	803ee83a 	callr	r16
    c440:	dfc00617 	ldw	ra,24(sp)
    c444:	dc400517 	ldw	r17,20(sp)
    c448:	dc000417 	ldw	r16,16(sp)
    c44c:	dec00704 	addi	sp,sp,28
    c450:	f800283a 	ret

0000c454 <__muldi3>:
    c454:	defff604 	addi	sp,sp,-40
    c458:	dd800615 	stw	r22,24(sp)
    c45c:	dd400515 	stw	r21,20(sp)
    c460:	25bfffcc 	andi	r22,r4,65535
    c464:	357fffcc 	andi	r21,r6,65535
    c468:	dc400115 	stw	r17,4(sp)
    c46c:	2022d43a 	srli	r17,r4,16
    c470:	dcc00315 	stw	r19,12(sp)
    c474:	dc800215 	stw	r18,8(sp)
    c478:	2027883a 	mov	r19,r4
    c47c:	2825883a 	mov	r18,r5
    c480:	a809883a 	mov	r4,r21
    c484:	b00b883a 	mov	r5,r22
    c488:	dfc00915 	stw	ra,36(sp)
    c48c:	df000815 	stw	fp,32(sp)
    c490:	ddc00715 	stw	r23,28(sp)
    c494:	3839883a 	mov	fp,r7
    c498:	302ed43a 	srli	r23,r6,16
    c49c:	dd000415 	stw	r20,16(sp)
    c4a0:	dc000015 	stw	r16,0(sp)
    c4a4:	3029883a 	mov	r20,r6
    c4a8:	000d1bc0 	call	d1bc <__mulsi3>
    c4ac:	a809883a 	mov	r4,r21
    c4b0:	880b883a 	mov	r5,r17
    c4b4:	1021883a 	mov	r16,r2
    c4b8:	000d1bc0 	call	d1bc <__mulsi3>
    c4bc:	880b883a 	mov	r5,r17
    c4c0:	b809883a 	mov	r4,r23
    c4c4:	102b883a 	mov	r21,r2
    c4c8:	000d1bc0 	call	d1bc <__mulsi3>
    c4cc:	b809883a 	mov	r4,r23
    c4d0:	b00b883a 	mov	r5,r22
    c4d4:	1023883a 	mov	r17,r2
    c4d8:	000d1bc0 	call	d1bc <__mulsi3>
    c4dc:	8012d43a 	srli	r9,r16,16
    c4e0:	a885883a 	add	r2,r21,r2
    c4e4:	1251883a 	add	r8,r2,r9
    c4e8:	4540022e 	bgeu	r8,r21,c4f4 <__muldi3+0xa0>
    c4ec:	00800074 	movhi	r2,1
    c4f0:	88a3883a 	add	r17,r17,r2
    c4f4:	4006d43a 	srli	r3,r8,16
    c4f8:	4010943a 	slli	r8,r8,16
    c4fc:	9809883a 	mov	r4,r19
    c500:	e00b883a 	mov	r5,fp
    c504:	843fffcc 	andi	r16,r16,65535
    c508:	88e3883a 	add	r17,r17,r3
    c50c:	4421883a 	add	r16,r8,r16
    c510:	000d1bc0 	call	d1bc <__mulsi3>
    c514:	a009883a 	mov	r4,r20
    c518:	900b883a 	mov	r5,r18
    c51c:	1027883a 	mov	r19,r2
    c520:	000d1bc0 	call	d1bc <__mulsi3>
    c524:	9885883a 	add	r2,r19,r2
    c528:	1447883a 	add	r3,r2,r17
    c52c:	8005883a 	mov	r2,r16
    c530:	dfc00917 	ldw	ra,36(sp)
    c534:	df000817 	ldw	fp,32(sp)
    c538:	ddc00717 	ldw	r23,28(sp)
    c53c:	dd800617 	ldw	r22,24(sp)
    c540:	dd400517 	ldw	r21,20(sp)
    c544:	dd000417 	ldw	r20,16(sp)
    c548:	dcc00317 	ldw	r19,12(sp)
    c54c:	dc800217 	ldw	r18,8(sp)
    c550:	dc400117 	ldw	r17,4(sp)
    c554:	dc000017 	ldw	r16,0(sp)
    c558:	dec00a04 	addi	sp,sp,40
    c55c:	f800283a 	ret

0000c560 <__udivdi3>:
    c560:	defff504 	addi	sp,sp,-44
    c564:	dcc00415 	stw	r19,16(sp)
    c568:	dc000115 	stw	r16,4(sp)
    c56c:	dfc00a15 	stw	ra,40(sp)
    c570:	df000915 	stw	fp,36(sp)
    c574:	ddc00815 	stw	r23,32(sp)
    c578:	dd800715 	stw	r22,28(sp)
    c57c:	dd400615 	stw	r21,24(sp)
    c580:	dd000515 	stw	r20,20(sp)
    c584:	dc800315 	stw	r18,12(sp)
    c588:	dc400215 	stw	r17,8(sp)
    c58c:	2027883a 	mov	r19,r4
    c590:	2821883a 	mov	r16,r5
    c594:	3800471e 	bne	r7,zero,c6b4 <__udivdi3+0x154>
    c598:	3025883a 	mov	r18,r6
    c59c:	2023883a 	mov	r17,r4
    c5a0:	2980592e 	bgeu	r5,r6,c708 <__udivdi3+0x1a8>
    c5a4:	00bfffd4 	movui	r2,65535
    c5a8:	2829883a 	mov	r20,r5
    c5ac:	1180b236 	bltu	r2,r6,c878 <__udivdi3+0x318>
    c5b0:	00803fc4 	movi	r2,255
    c5b4:	1181622e 	bgeu	r2,r6,cb40 <__udivdi3+0x5e0>
    c5b8:	00800204 	movi	r2,8
    c5bc:	1007883a 	mov	r3,r2
    c5c0:	3084d83a 	srl	r2,r6,r2
    c5c4:	01000074 	movhi	r4,1
    c5c8:	210af404 	addi	r4,r4,11216
    c5cc:	2085883a 	add	r2,r4,r2
    c5d0:	11000003 	ldbu	r4,0(r2)
    c5d4:	20c9883a 	add	r4,r4,r3
    c5d8:	00c00804 	movi	r3,32
    c5dc:	1907c83a 	sub	r3,r3,r4
    c5e0:	18000526 	beq	r3,zero,c5f8 <__udivdi3+0x98>
    c5e4:	80e0983a 	sll	r16,r16,r3
    c5e8:	9908d83a 	srl	r4,r19,r4
    c5ec:	30e4983a 	sll	r18,r6,r3
    c5f0:	98e2983a 	sll	r17,r19,r3
    c5f4:	8128b03a 	or	r20,r16,r4
    c5f8:	902ad43a 	srli	r21,r18,16
    c5fc:	a009883a 	mov	r4,r20
    c600:	95bfffcc 	andi	r22,r18,65535
    c604:	a80b883a 	mov	r5,r21
    c608:	0002ff00 	call	2ff0 <__umodsi3>
    c60c:	a009883a 	mov	r4,r20
    c610:	a80b883a 	mov	r5,r21
    c614:	102f883a 	mov	r23,r2
    c618:	0002fe80 	call	2fe8 <__udivsi3>
    c61c:	1009883a 	mov	r4,r2
    c620:	b00b883a 	mov	r5,r22
    c624:	1021883a 	mov	r16,r2
    c628:	000d1bc0 	call	d1bc <__mulsi3>
    c62c:	b82e943a 	slli	r23,r23,16
    c630:	8808d43a 	srli	r4,r17,16
    c634:	b906b03a 	or	r3,r23,r4
    c638:	1880052e 	bgeu	r3,r2,c650 <__udivdi3+0xf0>
    c63c:	1c87883a 	add	r3,r3,r18
    c640:	813fffc4 	addi	r4,r16,-1
    c644:	1c800136 	bltu	r3,r18,c64c <__udivdi3+0xec>
    c648:	18815236 	bltu	r3,r2,cb94 <__udivdi3+0x634>
    c64c:	2021883a 	mov	r16,r4
    c650:	18a7c83a 	sub	r19,r3,r2
    c654:	9809883a 	mov	r4,r19
    c658:	a80b883a 	mov	r5,r21
    c65c:	0002ff00 	call	2ff0 <__umodsi3>
    c660:	1029883a 	mov	r20,r2
    c664:	9809883a 	mov	r4,r19
    c668:	a80b883a 	mov	r5,r21
    c66c:	a028943a 	slli	r20,r20,16
    c670:	0002fe80 	call	2fe8 <__udivsi3>
    c674:	1009883a 	mov	r4,r2
    c678:	b00b883a 	mov	r5,r22
    c67c:	8c7fffcc 	andi	r17,r17,65535
    c680:	1027883a 	mov	r19,r2
    c684:	a462b03a 	or	r17,r20,r17
    c688:	000d1bc0 	call	d1bc <__mulsi3>
    c68c:	8880052e 	bgeu	r17,r2,c6a4 <__udivdi3+0x144>
    c690:	8ca3883a 	add	r17,r17,r18
    c694:	98ffffc4 	addi	r3,r19,-1
    c698:	8c811036 	bltu	r17,r18,cadc <__udivdi3+0x57c>
    c69c:	88810f2e 	bgeu	r17,r2,cadc <__udivdi3+0x57c>
    c6a0:	9cffff84 	addi	r19,r19,-2
    c6a4:	8020943a 	slli	r16,r16,16
    c6a8:	0007883a 	mov	r3,zero
    c6ac:	9c04b03a 	or	r2,r19,r16
    c6b0:	00006006 	br	c834 <__udivdi3+0x2d4>
    c6b4:	29c05d36 	bltu	r5,r7,c82c <__udivdi3+0x2cc>
    c6b8:	00bfffd4 	movui	r2,65535
    c6bc:	11c0692e 	bgeu	r2,r7,c864 <__udivdi3+0x304>
    c6c0:	00804034 	movhi	r2,256
    c6c4:	10bfffc4 	addi	r2,r2,-1
    c6c8:	11c10e2e 	bgeu	r2,r7,cb04 <__udivdi3+0x5a4>
    c6cc:	01400604 	movi	r5,24
    c6d0:	2811883a 	mov	r8,r5
    c6d4:	394ad83a 	srl	r5,r7,r5
    c6d8:	00800074 	movhi	r2,1
    c6dc:	108af404 	addi	r2,r2,11216
    c6e0:	114b883a 	add	r5,r2,r5
    c6e4:	29400003 	ldbu	r5,0(r5)
    c6e8:	00c00804 	movi	r3,32
    c6ec:	2a0b883a 	add	r5,r5,r8
    c6f0:	196fc83a 	sub	r23,r3,r5
    c6f4:	b8006b1e 	bne	r23,zero,c8a4 <__udivdi3+0x344>
    c6f8:	3c011436 	bltu	r7,r16,cb4c <__udivdi3+0x5ec>
    c6fc:	9985403a 	cmpgeu	r2,r19,r6
    c700:	0007883a 	mov	r3,zero
    c704:	00004b06 	br	c834 <__udivdi3+0x2d4>
    c708:	3000041e 	bne	r6,zero,c71c <__udivdi3+0x1bc>
    c70c:	01000044 	movi	r4,1
    c710:	000b883a 	mov	r5,zero
    c714:	0002fe80 	call	2fe8 <__udivsi3>
    c718:	1025883a 	mov	r18,r2
    c71c:	00bfffd4 	movui	r2,65535
    c720:	14805b2e 	bgeu	r2,r18,c890 <__udivdi3+0x330>
    c724:	00804034 	movhi	r2,256
    c728:	10bfffc4 	addi	r2,r2,-1
    c72c:	1480fe2e 	bgeu	r2,r18,cb28 <__udivdi3+0x5c8>
    c730:	00800604 	movi	r2,24
    c734:	1007883a 	mov	r3,r2
    c738:	9084d83a 	srl	r2,r18,r2
    c73c:	01000074 	movhi	r4,1
    c740:	210af404 	addi	r4,r4,11216
    c744:	2085883a 	add	r2,r4,r2
    c748:	11800003 	ldbu	r6,0(r2)
    c74c:	01c00804 	movi	r7,32
    c750:	30c7883a 	add	r3,r6,r3
    c754:	38cfc83a 	sub	r7,r7,r3
    c758:	3800a71e 	bne	r7,zero,c9f8 <__udivdi3+0x498>
    c75c:	9028d43a 	srli	r20,r18,16
    c760:	84a1c83a 	sub	r16,r16,r18
    c764:	957fffcc 	andi	r21,r18,65535
    c768:	00c00044 	movi	r3,1
    c76c:	8009883a 	mov	r4,r16
    c770:	a00b883a 	mov	r5,r20
    c774:	d8c00015 	stw	r3,0(sp)
    c778:	0002ff00 	call	2ff0 <__umodsi3>
    c77c:	8009883a 	mov	r4,r16
    c780:	a00b883a 	mov	r5,r20
    c784:	102d883a 	mov	r22,r2
    c788:	0002fe80 	call	2fe8 <__udivsi3>
    c78c:	1009883a 	mov	r4,r2
    c790:	a80b883a 	mov	r5,r21
    c794:	1021883a 	mov	r16,r2
    c798:	000d1bc0 	call	d1bc <__mulsi3>
    c79c:	b02c943a 	slli	r22,r22,16
    c7a0:	880ed43a 	srli	r7,r17,16
    c7a4:	d8c00017 	ldw	r3,0(sp)
    c7a8:	b1ccb03a 	or	r6,r22,r7
    c7ac:	3080052e 	bgeu	r6,r2,c7c4 <__udivdi3+0x264>
    c7b0:	348d883a 	add	r6,r6,r18
    c7b4:	813fffc4 	addi	r4,r16,-1
    c7b8:	34800136 	bltu	r6,r18,c7c0 <__udivdi3+0x260>
    c7bc:	3080f236 	bltu	r6,r2,cb88 <__udivdi3+0x628>
    c7c0:	2021883a 	mov	r16,r4
    c7c4:	30a7c83a 	sub	r19,r6,r2
    c7c8:	9809883a 	mov	r4,r19
    c7cc:	a00b883a 	mov	r5,r20
    c7d0:	d8c00015 	stw	r3,0(sp)
    c7d4:	0002ff00 	call	2ff0 <__umodsi3>
    c7d8:	102d883a 	mov	r22,r2
    c7dc:	9809883a 	mov	r4,r19
    c7e0:	a00b883a 	mov	r5,r20
    c7e4:	b02c943a 	slli	r22,r22,16
    c7e8:	0002fe80 	call	2fe8 <__udivsi3>
    c7ec:	1009883a 	mov	r4,r2
    c7f0:	a80b883a 	mov	r5,r21
    c7f4:	8c7fffcc 	andi	r17,r17,65535
    c7f8:	1027883a 	mov	r19,r2
    c7fc:	b462b03a 	or	r17,r22,r17
    c800:	000d1bc0 	call	d1bc <__mulsi3>
    c804:	d8c00017 	ldw	r3,0(sp)
    c808:	8880052e 	bgeu	r17,r2,c820 <__udivdi3+0x2c0>
    c80c:	8ca3883a 	add	r17,r17,r18
    c810:	993fffc4 	addi	r4,r19,-1
    c814:	8c80af36 	bltu	r17,r18,cad4 <__udivdi3+0x574>
    c818:	8880ae2e 	bgeu	r17,r2,cad4 <__udivdi3+0x574>
    c81c:	9cffff84 	addi	r19,r19,-2
    c820:	8020943a 	slli	r16,r16,16
    c824:	9c04b03a 	or	r2,r19,r16
    c828:	00000206 	br	c834 <__udivdi3+0x2d4>
    c82c:	0007883a 	mov	r3,zero
    c830:	0005883a 	mov	r2,zero
    c834:	dfc00a17 	ldw	ra,40(sp)
    c838:	df000917 	ldw	fp,36(sp)
    c83c:	ddc00817 	ldw	r23,32(sp)
    c840:	dd800717 	ldw	r22,28(sp)
    c844:	dd400617 	ldw	r21,24(sp)
    c848:	dd000517 	ldw	r20,20(sp)
    c84c:	dcc00417 	ldw	r19,16(sp)
    c850:	dc800317 	ldw	r18,12(sp)
    c854:	dc400217 	ldw	r17,8(sp)
    c858:	dc000117 	ldw	r16,4(sp)
    c85c:	dec00b04 	addi	sp,sp,44
    c860:	f800283a 	ret
    c864:	00803fc4 	movi	r2,255
    c868:	11c0a92e 	bgeu	r2,r7,cb10 <__udivdi3+0x5b0>
    c86c:	01400204 	movi	r5,8
    c870:	2811883a 	mov	r8,r5
    c874:	003f9706 	br	c6d4 <__alt_data_end+0xfffb6fa4>
    c878:	00804034 	movhi	r2,256
    c87c:	10bfffc4 	addi	r2,r2,-1
    c880:	1180a62e 	bgeu	r2,r6,cb1c <__udivdi3+0x5bc>
    c884:	00800604 	movi	r2,24
    c888:	1007883a 	mov	r3,r2
    c88c:	003f4c06 	br	c5c0 <__alt_data_end+0xfffb6e90>
    c890:	00803fc4 	movi	r2,255
    c894:	1480a72e 	bgeu	r2,r18,cb34 <__udivdi3+0x5d4>
    c898:	00800204 	movi	r2,8
    c89c:	1007883a 	mov	r3,r2
    c8a0:	003fa506 	br	c738 <__alt_data_end+0xfffb7008>
    c8a4:	3178d83a 	srl	fp,r6,r5
    c8a8:	3dce983a 	sll	r7,r7,r23
    c8ac:	8168d83a 	srl	r20,r16,r5
    c8b0:	9950d83a 	srl	r8,r19,r5
    c8b4:	3f38b03a 	or	fp,r7,fp
    c8b8:	e024d43a 	srli	r18,fp,16
    c8bc:	85e0983a 	sll	r16,r16,r23
    c8c0:	a009883a 	mov	r4,r20
    c8c4:	900b883a 	mov	r5,r18
    c8c8:	8220b03a 	or	r16,r16,r8
    c8cc:	35ea983a 	sll	r21,r6,r23
    c8d0:	0002ff00 	call	2ff0 <__umodsi3>
    c8d4:	a009883a 	mov	r4,r20
    c8d8:	900b883a 	mov	r5,r18
    c8dc:	1023883a 	mov	r17,r2
    c8e0:	e5bfffcc 	andi	r22,fp,65535
    c8e4:	0002fe80 	call	2fe8 <__udivsi3>
    c8e8:	1009883a 	mov	r4,r2
    c8ec:	b00b883a 	mov	r5,r22
    c8f0:	1029883a 	mov	r20,r2
    c8f4:	000d1bc0 	call	d1bc <__mulsi3>
    c8f8:	8806943a 	slli	r3,r17,16
    c8fc:	8014d43a 	srli	r10,r16,16
    c900:	1a92b03a 	or	r9,r3,r10
    c904:	4880042e 	bgeu	r9,r2,c918 <__udivdi3+0x3b8>
    c908:	4f13883a 	add	r9,r9,fp
    c90c:	a0ffffc4 	addi	r3,r20,-1
    c910:	4f00952e 	bgeu	r9,fp,cb68 <__udivdi3+0x608>
    c914:	1829883a 	mov	r20,r3
    c918:	48a3c83a 	sub	r17,r9,r2
    c91c:	8809883a 	mov	r4,r17
    c920:	900b883a 	mov	r5,r18
    c924:	0002ff00 	call	2ff0 <__umodsi3>
    c928:	8809883a 	mov	r4,r17
    c92c:	900b883a 	mov	r5,r18
    c930:	d8800015 	stw	r2,0(sp)
    c934:	0002fe80 	call	2fe8 <__udivsi3>
    c938:	1009883a 	mov	r4,r2
    c93c:	b00b883a 	mov	r5,r22
    c940:	1023883a 	mov	r17,r2
    c944:	000d1bc0 	call	d1bc <__mulsi3>
    c948:	d8c00017 	ldw	r3,0(sp)
    c94c:	823fffcc 	andi	r8,r16,65535
    c950:	1806943a 	slli	r3,r3,16
    c954:	1a20b03a 	or	r16,r3,r8
    c958:	8080042e 	bgeu	r16,r2,c96c <__udivdi3+0x40c>
    c95c:	8721883a 	add	r16,r16,fp
    c960:	88ffffc4 	addi	r3,r17,-1
    c964:	87007c2e 	bgeu	r16,fp,cb58 <__udivdi3+0x5f8>
    c968:	1823883a 	mov	r17,r3
    c96c:	a028943a 	slli	r20,r20,16
    c970:	acbfffcc 	andi	r18,r21,65535
    c974:	900b883a 	mov	r5,r18
    c978:	8d28b03a 	or	r20,r17,r20
    c97c:	a022d43a 	srli	r17,r20,16
    c980:	a5bfffcc 	andi	r22,r20,65535
    c984:	b009883a 	mov	r4,r22
    c988:	a82ad43a 	srli	r21,r21,16
    c98c:	80a1c83a 	sub	r16,r16,r2
    c990:	000d1bc0 	call	d1bc <__mulsi3>
    c994:	8809883a 	mov	r4,r17
    c998:	900b883a 	mov	r5,r18
    c99c:	1039883a 	mov	fp,r2
    c9a0:	000d1bc0 	call	d1bc <__mulsi3>
    c9a4:	8809883a 	mov	r4,r17
    c9a8:	a80b883a 	mov	r5,r21
    c9ac:	1025883a 	mov	r18,r2
    c9b0:	000d1bc0 	call	d1bc <__mulsi3>
    c9b4:	b009883a 	mov	r4,r22
    c9b8:	a80b883a 	mov	r5,r21
    c9bc:	1023883a 	mov	r17,r2
    c9c0:	000d1bc0 	call	d1bc <__mulsi3>
    c9c4:	e006d43a 	srli	r3,fp,16
    c9c8:	9085883a 	add	r2,r18,r2
    c9cc:	10c7883a 	add	r3,r2,r3
    c9d0:	1c80022e 	bgeu	r3,r18,c9dc <__udivdi3+0x47c>
    c9d4:	00800074 	movhi	r2,1
    c9d8:	88a3883a 	add	r17,r17,r2
    c9dc:	1808d43a 	srli	r4,r3,16
    c9e0:	8909883a 	add	r4,r17,r4
    c9e4:	81004436 	bltu	r16,r4,caf8 <__udivdi3+0x598>
    c9e8:	81003e26 	beq	r16,r4,cae4 <__udivdi3+0x584>
    c9ec:	a005883a 	mov	r2,r20
    c9f0:	0007883a 	mov	r3,zero
    c9f4:	003f8f06 	br	c834 <__alt_data_end+0xfffb7104>
    c9f8:	91e4983a 	sll	r18,r18,r7
    c9fc:	80eed83a 	srl	r23,r16,r3
    ca00:	81cc983a 	sll	r6,r16,r7
    ca04:	9028d43a 	srli	r20,r18,16
    ca08:	98c6d83a 	srl	r3,r19,r3
    ca0c:	b809883a 	mov	r4,r23
    ca10:	a00b883a 	mov	r5,r20
    ca14:	30ecb03a 	or	r22,r6,r3
    ca18:	99e2983a 	sll	r17,r19,r7
    ca1c:	0002ff00 	call	2ff0 <__umodsi3>
    ca20:	b809883a 	mov	r4,r23
    ca24:	a00b883a 	mov	r5,r20
    ca28:	1021883a 	mov	r16,r2
    ca2c:	957fffcc 	andi	r21,r18,65535
    ca30:	0002fe80 	call	2fe8 <__udivsi3>
    ca34:	a80b883a 	mov	r5,r21
    ca38:	1009883a 	mov	r4,r2
    ca3c:	102f883a 	mov	r23,r2
    ca40:	000d1bc0 	call	d1bc <__mulsi3>
    ca44:	8020943a 	slli	r16,r16,16
    ca48:	b00ad43a 	srli	r5,r22,16
    ca4c:	814cb03a 	or	r6,r16,r5
    ca50:	3080062e 	bgeu	r6,r2,ca6c <__udivdi3+0x50c>
    ca54:	348d883a 	add	r6,r6,r18
    ca58:	b8ffffc4 	addi	r3,r23,-1
    ca5c:	34804836 	bltu	r6,r18,cb80 <__udivdi3+0x620>
    ca60:	3080472e 	bgeu	r6,r2,cb80 <__udivdi3+0x620>
    ca64:	bdffff84 	addi	r23,r23,-2
    ca68:	348d883a 	add	r6,r6,r18
    ca6c:	30a7c83a 	sub	r19,r6,r2
    ca70:	9809883a 	mov	r4,r19
    ca74:	a00b883a 	mov	r5,r20
    ca78:	0002ff00 	call	2ff0 <__umodsi3>
    ca7c:	9809883a 	mov	r4,r19
    ca80:	a00b883a 	mov	r5,r20
    ca84:	1039883a 	mov	fp,r2
    ca88:	0002fe80 	call	2fe8 <__udivsi3>
    ca8c:	1009883a 	mov	r4,r2
    ca90:	a80b883a 	mov	r5,r21
    ca94:	e038943a 	slli	fp,fp,16
    ca98:	1027883a 	mov	r19,r2
    ca9c:	000d1bc0 	call	d1bc <__mulsi3>
    caa0:	b1bfffcc 	andi	r6,r22,65535
    caa4:	e18cb03a 	or	r6,fp,r6
    caa8:	3080062e 	bgeu	r6,r2,cac4 <__udivdi3+0x564>
    caac:	348d883a 	add	r6,r6,r18
    cab0:	98ffffc4 	addi	r3,r19,-1
    cab4:	34803036 	bltu	r6,r18,cb78 <__udivdi3+0x618>
    cab8:	30802f2e 	bgeu	r6,r2,cb78 <__udivdi3+0x618>
    cabc:	9cffff84 	addi	r19,r19,-2
    cac0:	348d883a 	add	r6,r6,r18
    cac4:	b82e943a 	slli	r23,r23,16
    cac8:	30a1c83a 	sub	r16,r6,r2
    cacc:	9dc6b03a 	or	r3,r19,r23
    cad0:	003f2606 	br	c76c <__alt_data_end+0xfffb703c>
    cad4:	2027883a 	mov	r19,r4
    cad8:	003f5106 	br	c820 <__alt_data_end+0xfffb70f0>
    cadc:	1827883a 	mov	r19,r3
    cae0:	003ef006 	br	c6a4 <__alt_data_end+0xfffb6f74>
    cae4:	1808943a 	slli	r4,r3,16
    cae8:	9dc6983a 	sll	r3,r19,r23
    caec:	e73fffcc 	andi	fp,fp,65535
    caf0:	2709883a 	add	r4,r4,fp
    caf4:	193fbd2e 	bgeu	r3,r4,c9ec <__alt_data_end+0xfffb72bc>
    caf8:	a0bfffc4 	addi	r2,r20,-1
    cafc:	0007883a 	mov	r3,zero
    cb00:	003f4c06 	br	c834 <__alt_data_end+0xfffb7104>
    cb04:	01400404 	movi	r5,16
    cb08:	2811883a 	mov	r8,r5
    cb0c:	003ef106 	br	c6d4 <__alt_data_end+0xfffb6fa4>
    cb10:	000b883a 	mov	r5,zero
    cb14:	0011883a 	mov	r8,zero
    cb18:	003eee06 	br	c6d4 <__alt_data_end+0xfffb6fa4>
    cb1c:	00800404 	movi	r2,16
    cb20:	1007883a 	mov	r3,r2
    cb24:	003ea606 	br	c5c0 <__alt_data_end+0xfffb6e90>
    cb28:	00800404 	movi	r2,16
    cb2c:	1007883a 	mov	r3,r2
    cb30:	003f0106 	br	c738 <__alt_data_end+0xfffb7008>
    cb34:	0005883a 	mov	r2,zero
    cb38:	0007883a 	mov	r3,zero
    cb3c:	003efe06 	br	c738 <__alt_data_end+0xfffb7008>
    cb40:	0005883a 	mov	r2,zero
    cb44:	0007883a 	mov	r3,zero
    cb48:	003e9d06 	br	c5c0 <__alt_data_end+0xfffb6e90>
    cb4c:	0007883a 	mov	r3,zero
    cb50:	00800044 	movi	r2,1
    cb54:	003f3706 	br	c834 <__alt_data_end+0xfffb7104>
    cb58:	80bf832e 	bgeu	r16,r2,c968 <__alt_data_end+0xfffb7238>
    cb5c:	8c7fff84 	addi	r17,r17,-2
    cb60:	8721883a 	add	r16,r16,fp
    cb64:	003f8106 	br	c96c <__alt_data_end+0xfffb723c>
    cb68:	48bf6a2e 	bgeu	r9,r2,c914 <__alt_data_end+0xfffb71e4>
    cb6c:	a53fff84 	addi	r20,r20,-2
    cb70:	4f13883a 	add	r9,r9,fp
    cb74:	003f6806 	br	c918 <__alt_data_end+0xfffb71e8>
    cb78:	1827883a 	mov	r19,r3
    cb7c:	003fd106 	br	cac4 <__alt_data_end+0xfffb7394>
    cb80:	182f883a 	mov	r23,r3
    cb84:	003fb906 	br	ca6c <__alt_data_end+0xfffb733c>
    cb88:	843fff84 	addi	r16,r16,-2
    cb8c:	348d883a 	add	r6,r6,r18
    cb90:	003f0c06 	br	c7c4 <__alt_data_end+0xfffb7094>
    cb94:	843fff84 	addi	r16,r16,-2
    cb98:	1c87883a 	add	r3,r3,r18
    cb9c:	003eac06 	br	c650 <__alt_data_end+0xfffb6f20>

0000cba0 <__umoddi3>:
    cba0:	defff404 	addi	sp,sp,-48
    cba4:	dd800815 	stw	r22,32(sp)
    cba8:	dc400315 	stw	r17,12(sp)
    cbac:	dc000215 	stw	r16,8(sp)
    cbb0:	dfc00b15 	stw	ra,44(sp)
    cbb4:	df000a15 	stw	fp,40(sp)
    cbb8:	ddc00915 	stw	r23,36(sp)
    cbbc:	dd400715 	stw	r21,28(sp)
    cbc0:	dd000615 	stw	r20,24(sp)
    cbc4:	dcc00515 	stw	r19,20(sp)
    cbc8:	dc800415 	stw	r18,16(sp)
    cbcc:	2021883a 	mov	r16,r4
    cbd0:	2823883a 	mov	r17,r5
    cbd4:	282d883a 	mov	r22,r5
    cbd8:	38003c1e 	bne	r7,zero,cccc <__umoddi3+0x12c>
    cbdc:	3027883a 	mov	r19,r6
    cbe0:	2029883a 	mov	r20,r4
    cbe4:	2980522e 	bgeu	r5,r6,cd30 <__umoddi3+0x190>
    cbe8:	00bfffd4 	movui	r2,65535
    cbec:	1180a436 	bltu	r2,r6,ce80 <__umoddi3+0x2e0>
    cbf0:	00803fc4 	movi	r2,255
    cbf4:	11815e2e 	bgeu	r2,r6,d170 <__umoddi3+0x5d0>
    cbf8:	01400204 	movi	r5,8
    cbfc:	2805883a 	mov	r2,r5
    cc00:	314ad83a 	srl	r5,r6,r5
    cc04:	00c00074 	movhi	r3,1
    cc08:	18caf404 	addi	r3,r3,11216
    cc0c:	194b883a 	add	r5,r3,r5
    cc10:	29000003 	ldbu	r4,0(r5)
    cc14:	2089883a 	add	r4,r4,r2
    cc18:	00800804 	movi	r2,32
    cc1c:	1105c83a 	sub	r2,r2,r4
    cc20:	10010c26 	beq	r2,zero,d054 <__umoddi3+0x4b4>
    cc24:	88a2983a 	sll	r17,r17,r2
    cc28:	8108d83a 	srl	r4,r16,r4
    cc2c:	30a6983a 	sll	r19,r6,r2
    cc30:	80a8983a 	sll	r20,r16,r2
    cc34:	1025883a 	mov	r18,r2
    cc38:	892cb03a 	or	r22,r17,r4
    cc3c:	9822d43a 	srli	r17,r19,16
    cc40:	b009883a 	mov	r4,r22
    cc44:	9d7fffcc 	andi	r21,r19,65535
    cc48:	880b883a 	mov	r5,r17
    cc4c:	0002ff00 	call	2ff0 <__umodsi3>
    cc50:	b009883a 	mov	r4,r22
    cc54:	880b883a 	mov	r5,r17
    cc58:	102f883a 	mov	r23,r2
    cc5c:	0002fe80 	call	2fe8 <__udivsi3>
    cc60:	1009883a 	mov	r4,r2
    cc64:	a80b883a 	mov	r5,r21
    cc68:	000d1bc0 	call	d1bc <__mulsi3>
    cc6c:	b82e943a 	slli	r23,r23,16
    cc70:	a008d43a 	srli	r4,r20,16
    cc74:	b906b03a 	or	r3,r23,r4
    cc78:	1880042e 	bgeu	r3,r2,cc8c <__umoddi3+0xec>
    cc7c:	1cc7883a 	add	r3,r3,r19
    cc80:	1cc00236 	bltu	r3,r19,cc8c <__umoddi3+0xec>
    cc84:	1880012e 	bgeu	r3,r2,cc8c <__umoddi3+0xec>
    cc88:	1cc7883a 	add	r3,r3,r19
    cc8c:	18a1c83a 	sub	r16,r3,r2
    cc90:	8009883a 	mov	r4,r16
    cc94:	880b883a 	mov	r5,r17
    cc98:	0002ff00 	call	2ff0 <__umodsi3>
    cc9c:	8009883a 	mov	r4,r16
    cca0:	880b883a 	mov	r5,r17
    cca4:	102d883a 	mov	r22,r2
    cca8:	0002fe80 	call	2fe8 <__udivsi3>
    ccac:	1009883a 	mov	r4,r2
    ccb0:	a80b883a 	mov	r5,r21
    ccb4:	b02c943a 	slli	r22,r22,16
    ccb8:	000d1bc0 	call	d1bc <__mulsi3>
    ccbc:	a13fffcc 	andi	r4,r20,65535
    ccc0:	b106b03a 	or	r3,r22,r4
    ccc4:	1880572e 	bgeu	r3,r2,ce24 <__umoddi3+0x284>
    ccc8:	00005206 	br	ce14 <__umoddi3+0x274>
    cccc:	29c05936 	bltu	r5,r7,ce34 <__umoddi3+0x294>
    ccd0:	00bfffd4 	movui	r2,65535
    ccd4:	11c0652e 	bgeu	r2,r7,ce6c <__umoddi3+0x2cc>
    ccd8:	00804034 	movhi	r2,256
    ccdc:	10bfffc4 	addi	r2,r2,-1
    cce0:	11c1172e 	bgeu	r2,r7,d140 <__umoddi3+0x5a0>
    cce4:	01400604 	movi	r5,24
    cce8:	282b883a 	mov	r21,r5
    ccec:	394ad83a 	srl	r5,r7,r5
    ccf0:	00c00074 	movhi	r3,1
    ccf4:	18caf404 	addi	r3,r3,11216
    ccf8:	194b883a 	add	r5,r3,r5
    ccfc:	28800003 	ldbu	r2,0(r5)
    cd00:	00c00804 	movi	r3,32
    cd04:	156b883a 	add	r21,r2,r21
    cd08:	1d69c83a 	sub	r20,r3,r21
    cd0c:	a000671e 	bne	r20,zero,ceac <__umoddi3+0x30c>
    cd10:	3c400136 	bltu	r7,r17,cd18 <__umoddi3+0x178>
    cd14:	81812336 	bltu	r16,r6,d1a4 <__umoddi3+0x604>
    cd18:	8185c83a 	sub	r2,r16,r6
    cd1c:	89e3c83a 	sub	r17,r17,r7
    cd20:	8087803a 	cmpltu	r3,r16,r2
    cd24:	88edc83a 	sub	r22,r17,r3
    cd28:	b007883a 	mov	r3,r22
    cd2c:	00004306 	br	ce3c <__umoddi3+0x29c>
    cd30:	3000041e 	bne	r6,zero,cd44 <__umoddi3+0x1a4>
    cd34:	01000044 	movi	r4,1
    cd38:	000b883a 	mov	r5,zero
    cd3c:	0002fe80 	call	2fe8 <__udivsi3>
    cd40:	1027883a 	mov	r19,r2
    cd44:	00bfffd4 	movui	r2,65535
    cd48:	14c0532e 	bgeu	r2,r19,ce98 <__umoddi3+0x2f8>
    cd4c:	00804034 	movhi	r2,256
    cd50:	10bfffc4 	addi	r2,r2,-1
    cd54:	14c1032e 	bgeu	r2,r19,d164 <__umoddi3+0x5c4>
    cd58:	00800604 	movi	r2,24
    cd5c:	1007883a 	mov	r3,r2
    cd60:	9884d83a 	srl	r2,r19,r2
    cd64:	01000074 	movhi	r4,1
    cd68:	210af404 	addi	r4,r4,11216
    cd6c:	2085883a 	add	r2,r4,r2
    cd70:	11000003 	ldbu	r4,0(r2)
    cd74:	00800804 	movi	r2,32
    cd78:	20c7883a 	add	r3,r4,r3
    cd7c:	10c5c83a 	sub	r2,r2,r3
    cd80:	1000b61e 	bne	r2,zero,d05c <__umoddi3+0x4bc>
    cd84:	982ad43a 	srli	r21,r19,16
    cd88:	8ce3c83a 	sub	r17,r17,r19
    cd8c:	9dbfffcc 	andi	r22,r19,65535
    cd90:	0025883a 	mov	r18,zero
    cd94:	8809883a 	mov	r4,r17
    cd98:	a80b883a 	mov	r5,r21
    cd9c:	0002ff00 	call	2ff0 <__umodsi3>
    cda0:	8809883a 	mov	r4,r17
    cda4:	a80b883a 	mov	r5,r21
    cda8:	102f883a 	mov	r23,r2
    cdac:	0002fe80 	call	2fe8 <__udivsi3>
    cdb0:	1009883a 	mov	r4,r2
    cdb4:	b00b883a 	mov	r5,r22
    cdb8:	000d1bc0 	call	d1bc <__mulsi3>
    cdbc:	b82e943a 	slli	r23,r23,16
    cdc0:	a008d43a 	srli	r4,r20,16
    cdc4:	b906b03a 	or	r3,r23,r4
    cdc8:	1880032e 	bgeu	r3,r2,cdd8 <__umoddi3+0x238>
    cdcc:	1cc7883a 	add	r3,r3,r19
    cdd0:	1cc00136 	bltu	r3,r19,cdd8 <__umoddi3+0x238>
    cdd4:	1880f136 	bltu	r3,r2,d19c <__umoddi3+0x5fc>
    cdd8:	18a1c83a 	sub	r16,r3,r2
    cddc:	8009883a 	mov	r4,r16
    cde0:	a80b883a 	mov	r5,r21
    cde4:	0002ff00 	call	2ff0 <__umodsi3>
    cde8:	8009883a 	mov	r4,r16
    cdec:	a80b883a 	mov	r5,r21
    cdf0:	1023883a 	mov	r17,r2
    cdf4:	0002fe80 	call	2fe8 <__udivsi3>
    cdf8:	1009883a 	mov	r4,r2
    cdfc:	b00b883a 	mov	r5,r22
    ce00:	8822943a 	slli	r17,r17,16
    ce04:	000d1bc0 	call	d1bc <__mulsi3>
    ce08:	a13fffcc 	andi	r4,r20,65535
    ce0c:	8906b03a 	or	r3,r17,r4
    ce10:	1880042e 	bgeu	r3,r2,ce24 <__umoddi3+0x284>
    ce14:	1cc7883a 	add	r3,r3,r19
    ce18:	1cc00236 	bltu	r3,r19,ce24 <__umoddi3+0x284>
    ce1c:	1880012e 	bgeu	r3,r2,ce24 <__umoddi3+0x284>
    ce20:	1cc7883a 	add	r3,r3,r19
    ce24:	1887c83a 	sub	r3,r3,r2
    ce28:	1c84d83a 	srl	r2,r3,r18
    ce2c:	0007883a 	mov	r3,zero
    ce30:	00000206 	br	ce3c <__umoddi3+0x29c>
    ce34:	2005883a 	mov	r2,r4
    ce38:	2807883a 	mov	r3,r5
    ce3c:	dfc00b17 	ldw	ra,44(sp)
    ce40:	df000a17 	ldw	fp,40(sp)
    ce44:	ddc00917 	ldw	r23,36(sp)
    ce48:	dd800817 	ldw	r22,32(sp)
    ce4c:	dd400717 	ldw	r21,28(sp)
    ce50:	dd000617 	ldw	r20,24(sp)
    ce54:	dcc00517 	ldw	r19,20(sp)
    ce58:	dc800417 	ldw	r18,16(sp)
    ce5c:	dc400317 	ldw	r17,12(sp)
    ce60:	dc000217 	ldw	r16,8(sp)
    ce64:	dec00c04 	addi	sp,sp,48
    ce68:	f800283a 	ret
    ce6c:	00803fc4 	movi	r2,255
    ce70:	11c0b02e 	bgeu	r2,r7,d134 <__umoddi3+0x594>
    ce74:	01400204 	movi	r5,8
    ce78:	282b883a 	mov	r21,r5
    ce7c:	003f9b06 	br	ccec <__alt_data_end+0xfffb75bc>
    ce80:	00804034 	movhi	r2,256
    ce84:	10bfffc4 	addi	r2,r2,-1
    ce88:	1180b02e 	bgeu	r2,r6,d14c <__umoddi3+0x5ac>
    ce8c:	01400604 	movi	r5,24
    ce90:	2805883a 	mov	r2,r5
    ce94:	003f5a06 	br	cc00 <__alt_data_end+0xfffb74d0>
    ce98:	00803fc4 	movi	r2,255
    ce9c:	14c0ae2e 	bgeu	r2,r19,d158 <__umoddi3+0x5b8>
    cea0:	00800204 	movi	r2,8
    cea4:	1007883a 	mov	r3,r2
    cea8:	003fad06 	br	cd60 <__alt_data_end+0xfffb7630>
    ceac:	3d0a983a 	sll	r5,r7,r20
    ceb0:	356cd83a 	srl	r22,r6,r21
    ceb4:	8d78d83a 	srl	fp,r17,r21
    ceb8:	8d10983a 	sll	r8,r17,r20
    cebc:	2dacb03a 	or	r22,r5,r22
    cec0:	b02ed43a 	srli	r23,r22,16
    cec4:	8564d83a 	srl	r18,r16,r21
    cec8:	e009883a 	mov	r4,fp
    cecc:	b80b883a 	mov	r5,r23
    ced0:	44a4b03a 	or	r18,r8,r18
    ced4:	3526983a 	sll	r19,r6,r20
    ced8:	0002ff00 	call	2ff0 <__umodsi3>
    cedc:	e009883a 	mov	r4,fp
    cee0:	b80b883a 	mov	r5,r23
    cee4:	b47fffcc 	andi	r17,r22,65535
    cee8:	d8800015 	stw	r2,0(sp)
    ceec:	0002fe80 	call	2fe8 <__udivsi3>
    cef0:	1009883a 	mov	r4,r2
    cef4:	880b883a 	mov	r5,r17
    cef8:	1039883a 	mov	fp,r2
    cefc:	000d1bc0 	call	d1bc <__mulsi3>
    cf00:	d9800017 	ldw	r6,0(sp)
    cf04:	9008d43a 	srli	r4,r18,16
    cf08:	8520983a 	sll	r16,r16,r20
    cf0c:	300c943a 	slli	r6,r6,16
    cf10:	3106b03a 	or	r3,r6,r4
    cf14:	1880042e 	bgeu	r3,r2,cf28 <__umoddi3+0x388>
    cf18:	1d87883a 	add	r3,r3,r22
    cf1c:	e13fffc4 	addi	r4,fp,-1
    cf20:	1d809a2e 	bgeu	r3,r22,d18c <__umoddi3+0x5ec>
    cf24:	2039883a 	mov	fp,r4
    cf28:	1887c83a 	sub	r3,r3,r2
    cf2c:	1809883a 	mov	r4,r3
    cf30:	b80b883a 	mov	r5,r23
    cf34:	d8c00115 	stw	r3,4(sp)
    cf38:	0002ff00 	call	2ff0 <__umodsi3>
    cf3c:	d8c00117 	ldw	r3,4(sp)
    cf40:	b80b883a 	mov	r5,r23
    cf44:	d8800015 	stw	r2,0(sp)
    cf48:	1809883a 	mov	r4,r3
    cf4c:	0002fe80 	call	2fe8 <__udivsi3>
    cf50:	880b883a 	mov	r5,r17
    cf54:	1009883a 	mov	r4,r2
    cf58:	102f883a 	mov	r23,r2
    cf5c:	000d1bc0 	call	d1bc <__mulsi3>
    cf60:	d9800017 	ldw	r6,0(sp)
    cf64:	947fffcc 	andi	r17,r18,65535
    cf68:	300c943a 	slli	r6,r6,16
    cf6c:	3464b03a 	or	r18,r6,r17
    cf70:	9080042e 	bgeu	r18,r2,cf84 <__umoddi3+0x3e4>
    cf74:	95a5883a 	add	r18,r18,r22
    cf78:	b8ffffc4 	addi	r3,r23,-1
    cf7c:	95807f2e 	bgeu	r18,r22,d17c <__umoddi3+0x5dc>
    cf80:	182f883a 	mov	r23,r3
    cf84:	e038943a 	slli	fp,fp,16
    cf88:	980cd43a 	srli	r6,r19,16
    cf8c:	98ffffcc 	andi	r3,r19,65535
    cf90:	bf38b03a 	or	fp,r23,fp
    cf94:	e02ed43a 	srli	r23,fp,16
    cf98:	e73fffcc 	andi	fp,fp,65535
    cf9c:	180b883a 	mov	r5,r3
    cfa0:	e009883a 	mov	r4,fp
    cfa4:	d9800015 	stw	r6,0(sp)
    cfa8:	d8c00115 	stw	r3,4(sp)
    cfac:	90a5c83a 	sub	r18,r18,r2
    cfb0:	000d1bc0 	call	d1bc <__mulsi3>
    cfb4:	d8c00117 	ldw	r3,4(sp)
    cfb8:	b809883a 	mov	r4,r23
    cfbc:	1023883a 	mov	r17,r2
    cfc0:	180b883a 	mov	r5,r3
    cfc4:	000d1bc0 	call	d1bc <__mulsi3>
    cfc8:	d9800017 	ldw	r6,0(sp)
    cfcc:	b809883a 	mov	r4,r23
    cfd0:	d8800115 	stw	r2,4(sp)
    cfd4:	300b883a 	mov	r5,r6
    cfd8:	302f883a 	mov	r23,r6
    cfdc:	000d1bc0 	call	d1bc <__mulsi3>
    cfe0:	e009883a 	mov	r4,fp
    cfe4:	b80b883a 	mov	r5,r23
    cfe8:	d8800015 	stw	r2,0(sp)
    cfec:	000d1bc0 	call	d1bc <__mulsi3>
    cff0:	d8c00117 	ldw	r3,4(sp)
    cff4:	880cd43a 	srli	r6,r17,16
    cff8:	d9c00017 	ldw	r7,0(sp)
    cffc:	1885883a 	add	r2,r3,r2
    d000:	118d883a 	add	r6,r2,r6
    d004:	30c0022e 	bgeu	r6,r3,d010 <__umoddi3+0x470>
    d008:	00800074 	movhi	r2,1
    d00c:	388f883a 	add	r7,r7,r2
    d010:	3006d43a 	srli	r3,r6,16
    d014:	300c943a 	slli	r6,r6,16
    d018:	8c7fffcc 	andi	r17,r17,65535
    d01c:	38c7883a 	add	r3,r7,r3
    d020:	3463883a 	add	r17,r6,r17
    d024:	90c03d36 	bltu	r18,r3,d11c <__umoddi3+0x57c>
    d028:	90c06026 	beq	r18,r3,d1ac <__umoddi3+0x60c>
    d02c:	90c9c83a 	sub	r4,r18,r3
    d030:	880f883a 	mov	r7,r17
    d034:	81cfc83a 	sub	r7,r16,r7
    d038:	81c7803a 	cmpltu	r3,r16,r7
    d03c:	20c7c83a 	sub	r3,r4,r3
    d040:	1d44983a 	sll	r2,r3,r21
    d044:	3d0ed83a 	srl	r7,r7,r20
    d048:	1d06d83a 	srl	r3,r3,r20
    d04c:	11c4b03a 	or	r2,r2,r7
    d050:	003f7a06 	br	ce3c <__alt_data_end+0xfffb770c>
    d054:	0025883a 	mov	r18,zero
    d058:	003ef806 	br	cc3c <__alt_data_end+0xfffb750c>
    d05c:	98a6983a 	sll	r19,r19,r2
    d060:	88e8d83a 	srl	r20,r17,r3
    d064:	80c6d83a 	srl	r3,r16,r3
    d068:	982ad43a 	srli	r21,r19,16
    d06c:	88a2983a 	sll	r17,r17,r2
    d070:	a009883a 	mov	r4,r20
    d074:	a80b883a 	mov	r5,r21
    d078:	88eeb03a 	or	r23,r17,r3
    d07c:	1025883a 	mov	r18,r2
    d080:	0002ff00 	call	2ff0 <__umodsi3>
    d084:	a009883a 	mov	r4,r20
    d088:	a80b883a 	mov	r5,r21
    d08c:	1023883a 	mov	r17,r2
    d090:	9dbfffcc 	andi	r22,r19,65535
    d094:	0002fe80 	call	2fe8 <__udivsi3>
    d098:	1009883a 	mov	r4,r2
    d09c:	b00b883a 	mov	r5,r22
    d0a0:	000d1bc0 	call	d1bc <__mulsi3>
    d0a4:	8822943a 	slli	r17,r17,16
    d0a8:	b808d43a 	srli	r4,r23,16
    d0ac:	84a8983a 	sll	r20,r16,r18
    d0b0:	8906b03a 	or	r3,r17,r4
    d0b4:	1880042e 	bgeu	r3,r2,d0c8 <__umoddi3+0x528>
    d0b8:	1cc7883a 	add	r3,r3,r19
    d0bc:	1cc00236 	bltu	r3,r19,d0c8 <__umoddi3+0x528>
    d0c0:	1880012e 	bgeu	r3,r2,d0c8 <__umoddi3+0x528>
    d0c4:	1cc7883a 	add	r3,r3,r19
    d0c8:	18a1c83a 	sub	r16,r3,r2
    d0cc:	8009883a 	mov	r4,r16
    d0d0:	a80b883a 	mov	r5,r21
    d0d4:	0002ff00 	call	2ff0 <__umodsi3>
    d0d8:	8009883a 	mov	r4,r16
    d0dc:	a80b883a 	mov	r5,r21
    d0e0:	1039883a 	mov	fp,r2
    d0e4:	0002fe80 	call	2fe8 <__udivsi3>
    d0e8:	1009883a 	mov	r4,r2
    d0ec:	b00b883a 	mov	r5,r22
    d0f0:	000d1bc0 	call	d1bc <__mulsi3>
    d0f4:	e006943a 	slli	r3,fp,16
    d0f8:	b93fffcc 	andi	r4,r23,65535
    d0fc:	1906b03a 	or	r3,r3,r4
    d100:	1880042e 	bgeu	r3,r2,d114 <__umoddi3+0x574>
    d104:	1cc7883a 	add	r3,r3,r19
    d108:	1cc00236 	bltu	r3,r19,d114 <__umoddi3+0x574>
    d10c:	1880012e 	bgeu	r3,r2,d114 <__umoddi3+0x574>
    d110:	1cc7883a 	add	r3,r3,r19
    d114:	18a3c83a 	sub	r17,r3,r2
    d118:	003f1e06 	br	cd94 <__alt_data_end+0xfffb7664>
    d11c:	8ccfc83a 	sub	r7,r17,r19
    d120:	1d89c83a 	sub	r4,r3,r22
    d124:	89e3803a 	cmpltu	r17,r17,r7
    d128:	2463c83a 	sub	r17,r4,r17
    d12c:	9449c83a 	sub	r4,r18,r17
    d130:	003fc006 	br	d034 <__alt_data_end+0xfffb7904>
    d134:	000b883a 	mov	r5,zero
    d138:	002b883a 	mov	r21,zero
    d13c:	003eeb06 	br	ccec <__alt_data_end+0xfffb75bc>
    d140:	01400404 	movi	r5,16
    d144:	282b883a 	mov	r21,r5
    d148:	003ee806 	br	ccec <__alt_data_end+0xfffb75bc>
    d14c:	01400404 	movi	r5,16
    d150:	2805883a 	mov	r2,r5
    d154:	003eaa06 	br	cc00 <__alt_data_end+0xfffb74d0>
    d158:	0005883a 	mov	r2,zero
    d15c:	0007883a 	mov	r3,zero
    d160:	003eff06 	br	cd60 <__alt_data_end+0xfffb7630>
    d164:	00800404 	movi	r2,16
    d168:	1007883a 	mov	r3,r2
    d16c:	003efc06 	br	cd60 <__alt_data_end+0xfffb7630>
    d170:	000b883a 	mov	r5,zero
    d174:	0005883a 	mov	r2,zero
    d178:	003ea106 	br	cc00 <__alt_data_end+0xfffb74d0>
    d17c:	90bf802e 	bgeu	r18,r2,cf80 <__alt_data_end+0xfffb7850>
    d180:	bdffff84 	addi	r23,r23,-2
    d184:	95a5883a 	add	r18,r18,r22
    d188:	003f7e06 	br	cf84 <__alt_data_end+0xfffb7854>
    d18c:	18bf652e 	bgeu	r3,r2,cf24 <__alt_data_end+0xfffb77f4>
    d190:	e73fff84 	addi	fp,fp,-2
    d194:	1d87883a 	add	r3,r3,r22
    d198:	003f6306 	br	cf28 <__alt_data_end+0xfffb77f8>
    d19c:	1cc7883a 	add	r3,r3,r19
    d1a0:	003f0d06 	br	cdd8 <__alt_data_end+0xfffb76a8>
    d1a4:	8005883a 	mov	r2,r16
    d1a8:	003edf06 	br	cd28 <__alt_data_end+0xfffb75f8>
    d1ac:	847fdb36 	bltu	r16,r17,d11c <__alt_data_end+0xfffb79ec>
    d1b0:	880f883a 	mov	r7,r17
    d1b4:	0009883a 	mov	r4,zero
    d1b8:	003f9e06 	br	d034 <__alt_data_end+0xfffb7904>

0000d1bc <__mulsi3>:
    d1bc:	0005883a 	mov	r2,zero
    d1c0:	20000726 	beq	r4,zero,d1e0 <__mulsi3+0x24>
    d1c4:	20c0004c 	andi	r3,r4,1
    d1c8:	2008d07a 	srli	r4,r4,1
    d1cc:	18000126 	beq	r3,zero,d1d4 <__mulsi3+0x18>
    d1d0:	1145883a 	add	r2,r2,r5
    d1d4:	294b883a 	add	r5,r5,r5
    d1d8:	203ffa1e 	bne	r4,zero,d1c4 <__alt_data_end+0xfffb7a94>
    d1dc:	f800283a 	ret
    d1e0:	f800283a 	ret

0000d1e4 <__adddf3>:
    d1e4:	02000434 	movhi	r8,16
    d1e8:	423fffc4 	addi	r8,r8,-1
    d1ec:	defffb04 	addi	sp,sp,-20
    d1f0:	2a12703a 	and	r9,r5,r8
    d1f4:	2806d7fa 	srli	r3,r5,31
    d1f8:	3a10703a 	and	r8,r7,r8
    d1fc:	3804d53a 	srli	r2,r7,20
    d200:	3014d77a 	srli	r10,r6,29
    d204:	dc000015 	stw	r16,0(sp)
    d208:	481290fa 	slli	r9,r9,3
    d20c:	2820d53a 	srli	r16,r5,20
    d210:	401090fa 	slli	r8,r8,3
    d214:	200ad77a 	srli	r5,r4,29
    d218:	380ed7fa 	srli	r7,r7,31
    d21c:	dc800215 	stw	r18,8(sp)
    d220:	dc400115 	stw	r17,4(sp)
    d224:	dfc00415 	stw	ra,16(sp)
    d228:	dcc00315 	stw	r19,12(sp)
    d22c:	1c803fcc 	andi	r18,r3,255
    d230:	8401ffcc 	andi	r16,r16,2047
    d234:	494ab03a 	or	r5,r9,r5
    d238:	202290fa 	slli	r17,r4,3
    d23c:	1081ffcc 	andi	r2,r2,2047
    d240:	4290b03a 	or	r8,r8,r10
    d244:	300c90fa 	slli	r6,r6,3
    d248:	91c07026 	beq	r18,r7,d40c <__adddf3+0x228>
    d24c:	8087c83a 	sub	r3,r16,r2
    d250:	00c0b30e 	bge	zero,r3,d520 <__adddf3+0x33c>
    d254:	10002a1e 	bne	r2,zero,d300 <__adddf3+0x11c>
    d258:	4184b03a 	or	r2,r8,r6
    d25c:	1000991e 	bne	r2,zero,d4c4 <__adddf3+0x2e0>
    d260:	888001cc 	andi	r2,r17,7
    d264:	10005b26 	beq	r2,zero,d3d4 <__adddf3+0x1f0>
    d268:	88c003cc 	andi	r3,r17,15
    d26c:	00800104 	movi	r2,4
    d270:	18805826 	beq	r3,r2,d3d4 <__adddf3+0x1f0>
    d274:	89800104 	addi	r6,r17,4
    d278:	3463803a 	cmpltu	r17,r6,r17
    d27c:	2c4b883a 	add	r5,r5,r17
    d280:	2880202c 	andhi	r2,r5,128
    d284:	9007883a 	mov	r3,r18
    d288:	3023883a 	mov	r17,r6
    d28c:	10005426 	beq	r2,zero,d3e0 <__adddf3+0x1fc>
    d290:	84000044 	addi	r16,r16,1
    d294:	0081ffc4 	movi	r2,2047
    d298:	8080c126 	beq	r16,r2,d5a0 <__adddf3+0x3bc>
    d29c:	013fe034 	movhi	r4,65408
    d2a0:	213fffc4 	addi	r4,r4,-1
    d2a4:	290a703a 	and	r5,r5,r4
    d2a8:	2804977a 	slli	r2,r5,29
    d2ac:	280a927a 	slli	r5,r5,9
    d2b0:	8822d0fa 	srli	r17,r17,3
    d2b4:	8401ffcc 	andi	r16,r16,2047
    d2b8:	2808d33a 	srli	r4,r5,12
    d2bc:	1444b03a 	or	r2,r2,r17
    d2c0:	8401ffcc 	andi	r16,r16,2047
    d2c4:	800a953a 	slli	r5,r16,20
    d2c8:	18c03fcc 	andi	r3,r3,255
    d2cc:	04000434 	movhi	r16,16
    d2d0:	180697fa 	slli	r3,r3,31
    d2d4:	843fffc4 	addi	r16,r16,-1
    d2d8:	2420703a 	and	r16,r4,r16
    d2dc:	8160b03a 	or	r16,r16,r5
    d2e0:	80c6b03a 	or	r3,r16,r3
    d2e4:	dfc00417 	ldw	ra,16(sp)
    d2e8:	dcc00317 	ldw	r19,12(sp)
    d2ec:	dc800217 	ldw	r18,8(sp)
    d2f0:	dc400117 	ldw	r17,4(sp)
    d2f4:	dc000017 	ldw	r16,0(sp)
    d2f8:	dec00504 	addi	sp,sp,20
    d2fc:	f800283a 	ret
    d300:	0081ffc4 	movi	r2,2047
    d304:	80bfd626 	beq	r16,r2,d260 <__alt_data_end+0xfffb7b30>
    d308:	42002034 	orhi	r8,r8,128
    d30c:	00800e04 	movi	r2,56
    d310:	10c0a616 	blt	r2,r3,d5ac <__adddf3+0x3c8>
    d314:	008007c4 	movi	r2,31
    d318:	10c0c916 	blt	r2,r3,d640 <__adddf3+0x45c>
    d31c:	00800804 	movi	r2,32
    d320:	10c5c83a 	sub	r2,r2,r3
    d324:	408e983a 	sll	r7,r8,r2
    d328:	30c8d83a 	srl	r4,r6,r3
    d32c:	3084983a 	sll	r2,r6,r2
    d330:	40c6d83a 	srl	r3,r8,r3
    d334:	390cb03a 	or	r6,r7,r4
    d338:	1004c03a 	cmpne	r2,r2,zero
    d33c:	308cb03a 	or	r6,r6,r2
    d340:	898dc83a 	sub	r6,r17,r6
    d344:	89a3803a 	cmpltu	r17,r17,r6
    d348:	28cbc83a 	sub	r5,r5,r3
    d34c:	2c4bc83a 	sub	r5,r5,r17
    d350:	3023883a 	mov	r17,r6
    d354:	2880202c 	andhi	r2,r5,128
    d358:	10006d26 	beq	r2,zero,d510 <__adddf3+0x32c>
    d35c:	04c02034 	movhi	r19,128
    d360:	9cffffc4 	addi	r19,r19,-1
    d364:	2ce6703a 	and	r19,r5,r19
    d368:	98007e26 	beq	r19,zero,d564 <__adddf3+0x380>
    d36c:	9809883a 	mov	r4,r19
    d370:	000f97c0 	call	f97c <__clzsi2>
    d374:	10fffe04 	addi	r3,r2,-8
    d378:	010007c4 	movi	r4,31
    d37c:	20c07f16 	blt	r4,r3,d57c <__adddf3+0x398>
    d380:	01400a04 	movi	r5,40
    d384:	2885c83a 	sub	r2,r5,r2
    d388:	888ad83a 	srl	r5,r17,r2
    d38c:	98e6983a 	sll	r19,r19,r3
    d390:	88e2983a 	sll	r17,r17,r3
    d394:	2ce6b03a 	or	r19,r5,r19
    d398:	1c007c16 	blt	r3,r16,d58c <__adddf3+0x3a8>
    d39c:	1c21c83a 	sub	r16,r3,r16
    d3a0:	81400044 	addi	r5,r16,1
    d3a4:	00c007c4 	movi	r3,31
    d3a8:	19409816 	blt	r3,r5,d60c <__adddf3+0x428>
    d3ac:	1c21c83a 	sub	r16,r3,r16
    d3b0:	8c08983a 	sll	r4,r17,r16
    d3b4:	8946d83a 	srl	r3,r17,r5
    d3b8:	9c20983a 	sll	r16,r19,r16
    d3bc:	2008c03a 	cmpne	r4,r4,zero
    d3c0:	994ad83a 	srl	r5,r19,r5
    d3c4:	1c06b03a 	or	r3,r3,r16
    d3c8:	1922b03a 	or	r17,r3,r4
    d3cc:	0021883a 	mov	r16,zero
    d3d0:	003fa306 	br	d260 <__alt_data_end+0xfffb7b30>
    d3d4:	2880202c 	andhi	r2,r5,128
    d3d8:	9007883a 	mov	r3,r18
    d3dc:	103fac1e 	bne	r2,zero,d290 <__alt_data_end+0xfffb7b60>
    d3e0:	2804977a 	slli	r2,r5,29
    d3e4:	8822d0fa 	srli	r17,r17,3
    d3e8:	0101ffc4 	movi	r4,2047
    d3ec:	280ad0fa 	srli	r5,r5,3
    d3f0:	1444b03a 	or	r2,r2,r17
    d3f4:	81002c26 	beq	r16,r4,d4a8 <__adddf3+0x2c4>
    d3f8:	8120703a 	and	r16,r16,r4
    d3fc:	01000434 	movhi	r4,16
    d400:	213fffc4 	addi	r4,r4,-1
    d404:	2908703a 	and	r4,r5,r4
    d408:	003fad06 	br	d2c0 <__alt_data_end+0xfffb7b90>
    d40c:	8089c83a 	sub	r4,r16,r2
    d410:	01006a0e 	bge	zero,r4,d5bc <__adddf3+0x3d8>
    d414:	10003326 	beq	r2,zero,d4e4 <__adddf3+0x300>
    d418:	0081ffc4 	movi	r2,2047
    d41c:	80bf9026 	beq	r16,r2,d260 <__alt_data_end+0xfffb7b30>
    d420:	42002034 	orhi	r8,r8,128
    d424:	00800e04 	movi	r2,56
    d428:	1100b116 	blt	r2,r4,d6f0 <__adddf3+0x50c>
    d42c:	008007c4 	movi	r2,31
    d430:	1100e216 	blt	r2,r4,d7bc <__adddf3+0x5d8>
    d434:	00800804 	movi	r2,32
    d438:	1105c83a 	sub	r2,r2,r4
    d43c:	4092983a 	sll	r9,r8,r2
    d440:	310ed83a 	srl	r7,r6,r4
    d444:	3084983a 	sll	r2,r6,r2
    d448:	4110d83a 	srl	r8,r8,r4
    d44c:	49ccb03a 	or	r6,r9,r7
    d450:	1004c03a 	cmpne	r2,r2,zero
    d454:	308cb03a 	or	r6,r6,r2
    d458:	344d883a 	add	r6,r6,r17
    d45c:	3463803a 	cmpltu	r17,r6,r17
    d460:	414b883a 	add	r5,r8,r5
    d464:	2c4b883a 	add	r5,r5,r17
    d468:	3023883a 	mov	r17,r6
    d46c:	2880202c 	andhi	r2,r5,128
    d470:	10002726 	beq	r2,zero,d510 <__adddf3+0x32c>
    d474:	84000044 	addi	r16,r16,1
    d478:	0081ffc4 	movi	r2,2047
    d47c:	8080ae26 	beq	r16,r2,d738 <__adddf3+0x554>
    d480:	00bfe034 	movhi	r2,65408
    d484:	10bfffc4 	addi	r2,r2,-1
    d488:	288a703a 	and	r5,r5,r2
    d48c:	880cd07a 	srli	r6,r17,1
    d490:	280897fa 	slli	r4,r5,31
    d494:	88c0004c 	andi	r3,r17,1
    d498:	30e2b03a 	or	r17,r6,r3
    d49c:	280ad07a 	srli	r5,r5,1
    d4a0:	8922b03a 	or	r17,r17,r4
    d4a4:	003f6e06 	br	d260 <__alt_data_end+0xfffb7b30>
    d4a8:	1148b03a 	or	r4,r2,r5
    d4ac:	20003c26 	beq	r4,zero,d5a0 <__adddf3+0x3bc>
    d4b0:	29000234 	orhi	r4,r5,8
    d4b4:	01400434 	movhi	r5,16
    d4b8:	297fffc4 	addi	r5,r5,-1
    d4bc:	2148703a 	and	r4,r4,r5
    d4c0:	003f7f06 	br	d2c0 <__alt_data_end+0xfffb7b90>
    d4c4:	18ffffc4 	addi	r3,r3,-1
    d4c8:	18004d1e 	bne	r3,zero,d600 <__adddf3+0x41c>
    d4cc:	898dc83a 	sub	r6,r17,r6
    d4d0:	89a3803a 	cmpltu	r17,r17,r6
    d4d4:	2a0bc83a 	sub	r5,r5,r8
    d4d8:	2c4bc83a 	sub	r5,r5,r17
    d4dc:	3023883a 	mov	r17,r6
    d4e0:	003f9c06 	br	d354 <__alt_data_end+0xfffb7c24>
    d4e4:	4184b03a 	or	r2,r8,r6
    d4e8:	103f5d26 	beq	r2,zero,d260 <__alt_data_end+0xfffb7b30>
    d4ec:	213fffc4 	addi	r4,r4,-1
    d4f0:	203fd926 	beq	r4,zero,d458 <__alt_data_end+0xfffb7d28>
    d4f4:	0081ffc4 	movi	r2,2047
    d4f8:	80bfca1e 	bne	r16,r2,d424 <__alt_data_end+0xfffb7cf4>
    d4fc:	003f5806 	br	d260 <__alt_data_end+0xfffb7b30>
    d500:	10c8b03a 	or	r4,r2,r3
    d504:	20008b26 	beq	r4,zero,d734 <__adddf3+0x550>
    d508:	100b883a 	mov	r5,r2
    d50c:	1823883a 	mov	r17,r3
    d510:	888001cc 	andi	r2,r17,7
    d514:	103f541e 	bne	r2,zero,d268 <__alt_data_end+0xfffb7b38>
    d518:	9007883a 	mov	r3,r18
    d51c:	003fb006 	br	d3e0 <__alt_data_end+0xfffb7cb0>
    d520:	1800531e 	bne	r3,zero,d670 <__adddf3+0x48c>
    d524:	80800044 	addi	r2,r16,1
    d528:	1081ffcc 	andi	r2,r2,2047
    d52c:	00c00044 	movi	r3,1
    d530:	1880990e 	bge	r3,r2,d798 <__adddf3+0x5b4>
    d534:	8985c83a 	sub	r2,r17,r6
    d538:	8887803a 	cmpltu	r3,r17,r2
    d53c:	2a27c83a 	sub	r19,r5,r8
    d540:	98e7c83a 	sub	r19,r19,r3
    d544:	98c0202c 	andhi	r3,r19,128
    d548:	18006226 	beq	r3,zero,d6d4 <__adddf3+0x4f0>
    d54c:	3463c83a 	sub	r17,r6,r17
    d550:	4151c83a 	sub	r8,r8,r5
    d554:	344d803a 	cmpltu	r6,r6,r17
    d558:	41a7c83a 	sub	r19,r8,r6
    d55c:	3825883a 	mov	r18,r7
    d560:	983f821e 	bne	r19,zero,d36c <__alt_data_end+0xfffb7c3c>
    d564:	8809883a 	mov	r4,r17
    d568:	000f97c0 	call	f97c <__clzsi2>
    d56c:	10800804 	addi	r2,r2,32
    d570:	10fffe04 	addi	r3,r2,-8
    d574:	010007c4 	movi	r4,31
    d578:	20ff810e 	bge	r4,r3,d380 <__alt_data_end+0xfffb7c50>
    d57c:	14fff604 	addi	r19,r2,-40
    d580:	8ce6983a 	sll	r19,r17,r19
    d584:	0023883a 	mov	r17,zero
    d588:	1c3f840e 	bge	r3,r16,d39c <__alt_data_end+0xfffb7c6c>
    d58c:	017fe034 	movhi	r5,65408
    d590:	297fffc4 	addi	r5,r5,-1
    d594:	80e1c83a 	sub	r16,r16,r3
    d598:	994a703a 	and	r5,r19,r5
    d59c:	003f3006 	br	d260 <__alt_data_end+0xfffb7b30>
    d5a0:	0009883a 	mov	r4,zero
    d5a4:	0005883a 	mov	r2,zero
    d5a8:	003f4506 	br	d2c0 <__alt_data_end+0xfffb7b90>
    d5ac:	418cb03a 	or	r6,r8,r6
    d5b0:	300cc03a 	cmpne	r6,r6,zero
    d5b4:	0007883a 	mov	r3,zero
    d5b8:	003f6106 	br	d340 <__alt_data_end+0xfffb7c10>
    d5bc:	2000921e 	bne	r4,zero,d808 <__adddf3+0x624>
    d5c0:	80800044 	addi	r2,r16,1
    d5c4:	11c1ffcc 	andi	r7,r2,2047
    d5c8:	01000044 	movi	r4,1
    d5cc:	21c0610e 	bge	r4,r7,d754 <__adddf3+0x570>
    d5d0:	0101ffc4 	movi	r4,2047
    d5d4:	1100a326 	beq	r2,r4,d864 <__adddf3+0x680>
    d5d8:	344d883a 	add	r6,r6,r17
    d5dc:	3463803a 	cmpltu	r17,r6,r17
    d5e0:	414b883a 	add	r5,r8,r5
    d5e4:	2c4b883a 	add	r5,r5,r17
    d5e8:	282297fa 	slli	r17,r5,31
    d5ec:	300cd07a 	srli	r6,r6,1
    d5f0:	280ad07a 	srli	r5,r5,1
    d5f4:	1021883a 	mov	r16,r2
    d5f8:	89a2b03a 	or	r17,r17,r6
    d5fc:	003f1806 	br	d260 <__alt_data_end+0xfffb7b30>
    d600:	0081ffc4 	movi	r2,2047
    d604:	80bf411e 	bne	r16,r2,d30c <__alt_data_end+0xfffb7bdc>
    d608:	003f1506 	br	d260 <__alt_data_end+0xfffb7b30>
    d60c:	80bff844 	addi	r2,r16,-31
    d610:	00c00804 	movi	r3,32
    d614:	9884d83a 	srl	r2,r19,r2
    d618:	28c04a26 	beq	r5,r3,d744 <__adddf3+0x560>
    d61c:	00c00fc4 	movi	r3,63
    d620:	1c21c83a 	sub	r16,r3,r16
    d624:	9c26983a 	sll	r19,r19,r16
    d628:	9c62b03a 	or	r17,r19,r17
    d62c:	8822c03a 	cmpne	r17,r17,zero
    d630:	88a2b03a 	or	r17,r17,r2
    d634:	000b883a 	mov	r5,zero
    d638:	0021883a 	mov	r16,zero
    d63c:	003fb406 	br	d510 <__alt_data_end+0xfffb7de0>
    d640:	18bff804 	addi	r2,r3,-32
    d644:	01000804 	movi	r4,32
    d648:	4084d83a 	srl	r2,r8,r2
    d64c:	19003f26 	beq	r3,r4,d74c <__adddf3+0x568>
    d650:	01001004 	movi	r4,64
    d654:	20c7c83a 	sub	r3,r4,r3
    d658:	40d0983a 	sll	r8,r8,r3
    d65c:	418cb03a 	or	r6,r8,r6
    d660:	300cc03a 	cmpne	r6,r6,zero
    d664:	308cb03a 	or	r6,r6,r2
    d668:	0007883a 	mov	r3,zero
    d66c:	003f3406 	br	d340 <__alt_data_end+0xfffb7c10>
    d670:	80002326 	beq	r16,zero,d700 <__adddf3+0x51c>
    d674:	0101ffc4 	movi	r4,2047
    d678:	11005e26 	beq	r2,r4,d7f4 <__adddf3+0x610>
    d67c:	00c7c83a 	sub	r3,zero,r3
    d680:	29402034 	orhi	r5,r5,128
    d684:	01000e04 	movi	r4,56
    d688:	20c07216 	blt	r4,r3,d854 <__adddf3+0x670>
    d68c:	010007c4 	movi	r4,31
    d690:	20c0ce16 	blt	r4,r3,d9cc <__adddf3+0x7e8>
    d694:	01000804 	movi	r4,32
    d698:	20c9c83a 	sub	r4,r4,r3
    d69c:	2914983a 	sll	r10,r5,r4
    d6a0:	88d2d83a 	srl	r9,r17,r3
    d6a4:	8908983a 	sll	r4,r17,r4
    d6a8:	28c6d83a 	srl	r3,r5,r3
    d6ac:	5262b03a 	or	r17,r10,r9
    d6b0:	2008c03a 	cmpne	r4,r4,zero
    d6b4:	8922b03a 	or	r17,r17,r4
    d6b8:	3463c83a 	sub	r17,r6,r17
    d6bc:	40c7c83a 	sub	r3,r8,r3
    d6c0:	344d803a 	cmpltu	r6,r6,r17
    d6c4:	198bc83a 	sub	r5,r3,r6
    d6c8:	1021883a 	mov	r16,r2
    d6cc:	3825883a 	mov	r18,r7
    d6d0:	003f2006 	br	d354 <__alt_data_end+0xfffb7c24>
    d6d4:	9886b03a 	or	r3,r19,r2
    d6d8:	1800141e 	bne	r3,zero,d72c <__adddf3+0x548>
    d6dc:	0007883a 	mov	r3,zero
    d6e0:	000b883a 	mov	r5,zero
    d6e4:	0023883a 	mov	r17,zero
    d6e8:	0021883a 	mov	r16,zero
    d6ec:	003f3c06 	br	d3e0 <__alt_data_end+0xfffb7cb0>
    d6f0:	418cb03a 	or	r6,r8,r6
    d6f4:	300cc03a 	cmpne	r6,r6,zero
    d6f8:	0011883a 	mov	r8,zero
    d6fc:	003f5606 	br	d458 <__alt_data_end+0xfffb7d28>
    d700:	2c48b03a 	or	r4,r5,r17
    d704:	20003b26 	beq	r4,zero,d7f4 <__adddf3+0x610>
    d708:	00c6303a 	nor	r3,zero,r3
    d70c:	1800371e 	bne	r3,zero,d7ec <__adddf3+0x608>
    d710:	3463c83a 	sub	r17,r6,r17
    d714:	414bc83a 	sub	r5,r8,r5
    d718:	344d803a 	cmpltu	r6,r6,r17
    d71c:	298bc83a 	sub	r5,r5,r6
    d720:	1021883a 	mov	r16,r2
    d724:	3825883a 	mov	r18,r7
    d728:	003f0a06 	br	d354 <__alt_data_end+0xfffb7c24>
    d72c:	1023883a 	mov	r17,r2
    d730:	003f0d06 	br	d368 <__alt_data_end+0xfffb7c38>
    d734:	0007883a 	mov	r3,zero
    d738:	000b883a 	mov	r5,zero
    d73c:	0023883a 	mov	r17,zero
    d740:	003f2706 	br	d3e0 <__alt_data_end+0xfffb7cb0>
    d744:	0027883a 	mov	r19,zero
    d748:	003fb706 	br	d628 <__alt_data_end+0xfffb7ef8>
    d74c:	0011883a 	mov	r8,zero
    d750:	003fc206 	br	d65c <__alt_data_end+0xfffb7f2c>
    d754:	2c44b03a 	or	r2,r5,r17
    d758:	8000871e 	bne	r16,zero,d978 <__adddf3+0x794>
    d75c:	1000b126 	beq	r2,zero,da24 <__adddf3+0x840>
    d760:	4184b03a 	or	r2,r8,r6
    d764:	103ebe26 	beq	r2,zero,d260 <__alt_data_end+0xfffb7b30>
    d768:	3445883a 	add	r2,r6,r17
    d76c:	1463803a 	cmpltu	r17,r2,r17
    d770:	414b883a 	add	r5,r8,r5
    d774:	2c4b883a 	add	r5,r5,r17
    d778:	28c0202c 	andhi	r3,r5,128
    d77c:	1023883a 	mov	r17,r2
    d780:	183f6326 	beq	r3,zero,d510 <__alt_data_end+0xfffb7de0>
    d784:	00bfe034 	movhi	r2,65408
    d788:	10bfffc4 	addi	r2,r2,-1
    d78c:	2021883a 	mov	r16,r4
    d790:	288a703a 	and	r5,r5,r2
    d794:	003eb206 	br	d260 <__alt_data_end+0xfffb7b30>
    d798:	2c44b03a 	or	r2,r5,r17
    d79c:	8000251e 	bne	r16,zero,d834 <__adddf3+0x650>
    d7a0:	10004b1e 	bne	r2,zero,d8d0 <__adddf3+0x6ec>
    d7a4:	4184b03a 	or	r2,r8,r6
    d7a8:	103fe226 	beq	r2,zero,d734 <__alt_data_end+0xfffb8004>
    d7ac:	400b883a 	mov	r5,r8
    d7b0:	3023883a 	mov	r17,r6
    d7b4:	3825883a 	mov	r18,r7
    d7b8:	003ea906 	br	d260 <__alt_data_end+0xfffb7b30>
    d7bc:	20bff804 	addi	r2,r4,-32
    d7c0:	01c00804 	movi	r7,32
    d7c4:	4084d83a 	srl	r2,r8,r2
    d7c8:	21c07e26 	beq	r4,r7,d9c4 <__adddf3+0x7e0>
    d7cc:	01c01004 	movi	r7,64
    d7d0:	3909c83a 	sub	r4,r7,r4
    d7d4:	4110983a 	sll	r8,r8,r4
    d7d8:	418cb03a 	or	r6,r8,r6
    d7dc:	300cc03a 	cmpne	r6,r6,zero
    d7e0:	308cb03a 	or	r6,r6,r2
    d7e4:	0011883a 	mov	r8,zero
    d7e8:	003f1b06 	br	d458 <__alt_data_end+0xfffb7d28>
    d7ec:	0101ffc4 	movi	r4,2047
    d7f0:	113fa41e 	bne	r2,r4,d684 <__alt_data_end+0xfffb7f54>
    d7f4:	400b883a 	mov	r5,r8
    d7f8:	3023883a 	mov	r17,r6
    d7fc:	1021883a 	mov	r16,r2
    d800:	3825883a 	mov	r18,r7
    d804:	003e9606 	br	d260 <__alt_data_end+0xfffb7b30>
    d808:	80001a1e 	bne	r16,zero,d874 <__adddf3+0x690>
    d80c:	2c4eb03a 	or	r7,r5,r17
    d810:	38005526 	beq	r7,zero,d968 <__adddf3+0x784>
    d814:	0108303a 	nor	r4,zero,r4
    d818:	2000511e 	bne	r4,zero,d960 <__adddf3+0x77c>
    d81c:	89a3883a 	add	r17,r17,r6
    d820:	414b883a 	add	r5,r8,r5
    d824:	898d803a 	cmpltu	r6,r17,r6
    d828:	298b883a 	add	r5,r5,r6
    d82c:	1021883a 	mov	r16,r2
    d830:	003f0e06 	br	d46c <__alt_data_end+0xfffb7d3c>
    d834:	1000341e 	bne	r2,zero,d908 <__adddf3+0x724>
    d838:	4184b03a 	or	r2,r8,r6
    d83c:	10006f26 	beq	r2,zero,d9fc <__adddf3+0x818>
    d840:	400b883a 	mov	r5,r8
    d844:	3023883a 	mov	r17,r6
    d848:	3825883a 	mov	r18,r7
    d84c:	0401ffc4 	movi	r16,2047
    d850:	003e8306 	br	d260 <__alt_data_end+0xfffb7b30>
    d854:	2c62b03a 	or	r17,r5,r17
    d858:	8822c03a 	cmpne	r17,r17,zero
    d85c:	0007883a 	mov	r3,zero
    d860:	003f9506 	br	d6b8 <__alt_data_end+0xfffb7f88>
    d864:	1021883a 	mov	r16,r2
    d868:	000b883a 	mov	r5,zero
    d86c:	0023883a 	mov	r17,zero
    d870:	003edb06 	br	d3e0 <__alt_data_end+0xfffb7cb0>
    d874:	01c1ffc4 	movi	r7,2047
    d878:	11c03b26 	beq	r2,r7,d968 <__adddf3+0x784>
    d87c:	0109c83a 	sub	r4,zero,r4
    d880:	29402034 	orhi	r5,r5,128
    d884:	01c00e04 	movi	r7,56
    d888:	39006216 	blt	r7,r4,da14 <__adddf3+0x830>
    d88c:	01c007c4 	movi	r7,31
    d890:	39006b16 	blt	r7,r4,da40 <__adddf3+0x85c>
    d894:	01c00804 	movi	r7,32
    d898:	390fc83a 	sub	r7,r7,r4
    d89c:	29d4983a 	sll	r10,r5,r7
    d8a0:	8912d83a 	srl	r9,r17,r4
    d8a4:	89ce983a 	sll	r7,r17,r7
    d8a8:	2908d83a 	srl	r4,r5,r4
    d8ac:	5262b03a 	or	r17,r10,r9
    d8b0:	380ac03a 	cmpne	r5,r7,zero
    d8b4:	8962b03a 	or	r17,r17,r5
    d8b8:	89a3883a 	add	r17,r17,r6
    d8bc:	2211883a 	add	r8,r4,r8
    d8c0:	898d803a 	cmpltu	r6,r17,r6
    d8c4:	418b883a 	add	r5,r8,r6
    d8c8:	1021883a 	mov	r16,r2
    d8cc:	003ee706 	br	d46c <__alt_data_end+0xfffb7d3c>
    d8d0:	4184b03a 	or	r2,r8,r6
    d8d4:	103e6226 	beq	r2,zero,d260 <__alt_data_end+0xfffb7b30>
    d8d8:	8987c83a 	sub	r3,r17,r6
    d8dc:	88c9803a 	cmpltu	r4,r17,r3
    d8e0:	2a05c83a 	sub	r2,r5,r8
    d8e4:	1105c83a 	sub	r2,r2,r4
    d8e8:	1100202c 	andhi	r4,r2,128
    d8ec:	203f0426 	beq	r4,zero,d500 <__alt_data_end+0xfffb7dd0>
    d8f0:	3463c83a 	sub	r17,r6,r17
    d8f4:	414bc83a 	sub	r5,r8,r5
    d8f8:	344d803a 	cmpltu	r6,r6,r17
    d8fc:	298bc83a 	sub	r5,r5,r6
    d900:	3825883a 	mov	r18,r7
    d904:	003e5606 	br	d260 <__alt_data_end+0xfffb7b30>
    d908:	4184b03a 	or	r2,r8,r6
    d90c:	10002b26 	beq	r2,zero,d9bc <__adddf3+0x7d8>
    d910:	2804d0fa 	srli	r2,r5,3
    d914:	8822d0fa 	srli	r17,r17,3
    d918:	280a977a 	slli	r5,r5,29
    d91c:	10c0022c 	andhi	r3,r2,8
    d920:	2c62b03a 	or	r17,r5,r17
    d924:	18000826 	beq	r3,zero,d948 <__adddf3+0x764>
    d928:	4008d0fa 	srli	r4,r8,3
    d92c:	20c0022c 	andhi	r3,r4,8
    d930:	1800051e 	bne	r3,zero,d948 <__adddf3+0x764>
    d934:	300cd0fa 	srli	r6,r6,3
    d938:	4010977a 	slli	r8,r8,29
    d93c:	2005883a 	mov	r2,r4
    d940:	3825883a 	mov	r18,r7
    d944:	41a2b03a 	or	r17,r8,r6
    d948:	880ad77a 	srli	r5,r17,29
    d94c:	100490fa 	slli	r2,r2,3
    d950:	882290fa 	slli	r17,r17,3
    d954:	0401ffc4 	movi	r16,2047
    d958:	288ab03a 	or	r5,r5,r2
    d95c:	003e4006 	br	d260 <__alt_data_end+0xfffb7b30>
    d960:	01c1ffc4 	movi	r7,2047
    d964:	11ffc71e 	bne	r2,r7,d884 <__alt_data_end+0xfffb8154>
    d968:	400b883a 	mov	r5,r8
    d96c:	3023883a 	mov	r17,r6
    d970:	1021883a 	mov	r16,r2
    d974:	003e3a06 	br	d260 <__alt_data_end+0xfffb7b30>
    d978:	10002d26 	beq	r2,zero,da30 <__adddf3+0x84c>
    d97c:	4184b03a 	or	r2,r8,r6
    d980:	10000e26 	beq	r2,zero,d9bc <__adddf3+0x7d8>
    d984:	2804d0fa 	srli	r2,r5,3
    d988:	8822d0fa 	srli	r17,r17,3
    d98c:	280a977a 	slli	r5,r5,29
    d990:	10c0022c 	andhi	r3,r2,8
    d994:	2c62b03a 	or	r17,r5,r17
    d998:	183feb26 	beq	r3,zero,d948 <__alt_data_end+0xfffb8218>
    d99c:	4008d0fa 	srli	r4,r8,3
    d9a0:	20c0022c 	andhi	r3,r4,8
    d9a4:	183fe81e 	bne	r3,zero,d948 <__alt_data_end+0xfffb8218>
    d9a8:	300cd0fa 	srli	r6,r6,3
    d9ac:	4010977a 	slli	r8,r8,29
    d9b0:	2005883a 	mov	r2,r4
    d9b4:	41a2b03a 	or	r17,r8,r6
    d9b8:	003fe306 	br	d948 <__alt_data_end+0xfffb8218>
    d9bc:	0401ffc4 	movi	r16,2047
    d9c0:	003e2706 	br	d260 <__alt_data_end+0xfffb7b30>
    d9c4:	0011883a 	mov	r8,zero
    d9c8:	003f8306 	br	d7d8 <__alt_data_end+0xfffb80a8>
    d9cc:	193ff804 	addi	r4,r3,-32
    d9d0:	02400804 	movi	r9,32
    d9d4:	2908d83a 	srl	r4,r5,r4
    d9d8:	1a402526 	beq	r3,r9,da70 <__adddf3+0x88c>
    d9dc:	02401004 	movi	r9,64
    d9e0:	48c7c83a 	sub	r3,r9,r3
    d9e4:	28ca983a 	sll	r5,r5,r3
    d9e8:	2c62b03a 	or	r17,r5,r17
    d9ec:	8822c03a 	cmpne	r17,r17,zero
    d9f0:	8922b03a 	or	r17,r17,r4
    d9f4:	0007883a 	mov	r3,zero
    d9f8:	003f2f06 	br	d6b8 <__alt_data_end+0xfffb7f88>
    d9fc:	01402034 	movhi	r5,128
    da00:	0007883a 	mov	r3,zero
    da04:	297fffc4 	addi	r5,r5,-1
    da08:	047ffe04 	movi	r17,-8
    da0c:	0401ffc4 	movi	r16,2047
    da10:	003e7306 	br	d3e0 <__alt_data_end+0xfffb7cb0>
    da14:	2c62b03a 	or	r17,r5,r17
    da18:	8822c03a 	cmpne	r17,r17,zero
    da1c:	0009883a 	mov	r4,zero
    da20:	003fa506 	br	d8b8 <__alt_data_end+0xfffb8188>
    da24:	400b883a 	mov	r5,r8
    da28:	3023883a 	mov	r17,r6
    da2c:	003e0c06 	br	d260 <__alt_data_end+0xfffb7b30>
    da30:	400b883a 	mov	r5,r8
    da34:	3023883a 	mov	r17,r6
    da38:	0401ffc4 	movi	r16,2047
    da3c:	003e0806 	br	d260 <__alt_data_end+0xfffb7b30>
    da40:	21fff804 	addi	r7,r4,-32
    da44:	02400804 	movi	r9,32
    da48:	29ced83a 	srl	r7,r5,r7
    da4c:	22400a26 	beq	r4,r9,da78 <__adddf3+0x894>
    da50:	02401004 	movi	r9,64
    da54:	4909c83a 	sub	r4,r9,r4
    da58:	290a983a 	sll	r5,r5,r4
    da5c:	2c62b03a 	or	r17,r5,r17
    da60:	8822c03a 	cmpne	r17,r17,zero
    da64:	89e2b03a 	or	r17,r17,r7
    da68:	0009883a 	mov	r4,zero
    da6c:	003f9206 	br	d8b8 <__alt_data_end+0xfffb8188>
    da70:	000b883a 	mov	r5,zero
    da74:	003fdc06 	br	d9e8 <__alt_data_end+0xfffb82b8>
    da78:	000b883a 	mov	r5,zero
    da7c:	003ff706 	br	da5c <__alt_data_end+0xfffb832c>

0000da80 <__divdf3>:
    da80:	defff004 	addi	sp,sp,-64
    da84:	dc800815 	stw	r18,32(sp)
    da88:	2824d53a 	srli	r18,r5,20
    da8c:	dd800c15 	stw	r22,48(sp)
    da90:	282cd7fa 	srli	r22,r5,31
    da94:	dc000615 	stw	r16,24(sp)
    da98:	04000434 	movhi	r16,16
    da9c:	df000e15 	stw	fp,56(sp)
    daa0:	dd000a15 	stw	r20,40(sp)
    daa4:	dcc00915 	stw	r19,36(sp)
    daa8:	dc400715 	stw	r17,28(sp)
    daac:	843fffc4 	addi	r16,r16,-1
    dab0:	dfc00f15 	stw	ra,60(sp)
    dab4:	ddc00d15 	stw	r23,52(sp)
    dab8:	dd400b15 	stw	r21,44(sp)
    dabc:	9481ffcc 	andi	r18,r18,2047
    dac0:	2029883a 	mov	r20,r4
    dac4:	2027883a 	mov	r19,r4
    dac8:	2c22703a 	and	r17,r5,r16
    dacc:	b7003fcc 	andi	fp,r22,255
    dad0:	90005e26 	beq	r18,zero,dc4c <__divdf3+0x1cc>
    dad4:	0081ffc4 	movi	r2,2047
    dad8:	90803526 	beq	r18,r2,dbb0 <__divdf3+0x130>
    dadc:	8c000434 	orhi	r16,r17,16
    dae0:	2004d77a 	srli	r2,r4,29
    dae4:	802090fa 	slli	r16,r16,3
    dae8:	202690fa 	slli	r19,r4,3
    daec:	94bf0044 	addi	r18,r18,-1023
    daf0:	80a2b03a 	or	r17,r16,r2
    daf4:	0029883a 	mov	r20,zero
    daf8:	0011883a 	mov	r8,zero
    dafc:	380ad53a 	srli	r5,r7,20
    db00:	382ed7fa 	srli	r23,r7,31
    db04:	04000434 	movhi	r16,16
    db08:	843fffc4 	addi	r16,r16,-1
    db0c:	2941ffcc 	andi	r5,r5,2047
    db10:	302b883a 	mov	r21,r6
    db14:	3c20703a 	and	r16,r7,r16
    db18:	ba403fcc 	andi	r9,r23,255
    db1c:	28006726 	beq	r5,zero,dcbc <__divdf3+0x23c>
    db20:	0081ffc4 	movi	r2,2047
    db24:	28805f26 	beq	r5,r2,dca4 <__divdf3+0x224>
    db28:	84000434 	orhi	r16,r16,16
    db2c:	3004d77a 	srli	r2,r6,29
    db30:	802090fa 	slli	r16,r16,3
    db34:	302a90fa 	slli	r21,r6,3
    db38:	297f0044 	addi	r5,r5,-1023
    db3c:	80a0b03a 	or	r16,r16,r2
    db40:	000f883a 	mov	r7,zero
    db44:	3d06b03a 	or	r3,r7,r20
    db48:	180690ba 	slli	r3,r3,2
    db4c:	00800074 	movhi	r2,1
    db50:	10b6dc04 	addi	r2,r2,-9360
    db54:	1885883a 	add	r2,r3,r2
    db58:	10800017 	ldw	r2,0(r2)
    db5c:	b5c8f03a 	xor	r4,r22,r23
    db60:	200d883a 	mov	r6,r4
    db64:	25003fcc 	andi	r20,r4,255
    db68:	9165c83a 	sub	r18,r18,r5
    db6c:	1000683a 	jmp	r2
    db70:	0000ddb8 	rdprs	zero,zero,886
    db74:	0000dbe8 	cmpgeui	zero,zero,879
    db78:	0000dd7c 	xorhi	zero,zero,885
    db7c:	0000dbcc 	andi	zero,zero,879
    db80:	0000dd7c 	xorhi	zero,zero,885
    db84:	0000dd50 	cmplti	zero,zero,885
    db88:	0000dd7c 	xorhi	zero,zero,885
    db8c:	0000dbcc 	andi	zero,zero,879
    db90:	0000dbe8 	cmpgeui	zero,zero,879
    db94:	0000dbe8 	cmpgeui	zero,zero,879
    db98:	0000dd50 	cmplti	zero,zero,885
    db9c:	0000dbcc 	andi	zero,zero,879
    dba0:	0000dbdc 	xori	zero,zero,879
    dba4:	0000dbdc 	xori	zero,zero,879
    dba8:	0000dbdc 	xori	zero,zero,879
    dbac:	0000dd8c 	andi	zero,zero,886
    dbb0:	8904b03a 	or	r2,r17,r4
    dbb4:	1000631e 	bne	r2,zero,dd44 <__divdf3+0x2c4>
    dbb8:	05000204 	movi	r20,8
    dbbc:	0023883a 	mov	r17,zero
    dbc0:	0027883a 	mov	r19,zero
    dbc4:	02000084 	movi	r8,2
    dbc8:	003fcc06 	br	dafc <__alt_data_end+0xfffb83cc>
    dbcc:	8023883a 	mov	r17,r16
    dbd0:	a827883a 	mov	r19,r21
    dbd4:	4839883a 	mov	fp,r9
    dbd8:	3811883a 	mov	r8,r7
    dbdc:	00800084 	movi	r2,2
    dbe0:	4081531e 	bne	r8,r2,e130 <__divdf3+0x6b0>
    dbe4:	e029883a 	mov	r20,fp
    dbe8:	a180004c 	andi	r6,r20,1
    dbec:	0201ffc4 	movi	r8,2047
    dbf0:	000b883a 	mov	r5,zero
    dbf4:	0027883a 	mov	r19,zero
    dbf8:	4010953a 	slli	r8,r8,20
    dbfc:	30c03fcc 	andi	r3,r6,255
    dc00:	04000434 	movhi	r16,16
    dc04:	180697fa 	slli	r3,r3,31
    dc08:	843fffc4 	addi	r16,r16,-1
    dc0c:	2c20703a 	and	r16,r5,r16
    dc10:	8220b03a 	or	r16,r16,r8
    dc14:	80c6b03a 	or	r3,r16,r3
    dc18:	9805883a 	mov	r2,r19
    dc1c:	dfc00f17 	ldw	ra,60(sp)
    dc20:	df000e17 	ldw	fp,56(sp)
    dc24:	ddc00d17 	ldw	r23,52(sp)
    dc28:	dd800c17 	ldw	r22,48(sp)
    dc2c:	dd400b17 	ldw	r21,44(sp)
    dc30:	dd000a17 	ldw	r20,40(sp)
    dc34:	dcc00917 	ldw	r19,36(sp)
    dc38:	dc800817 	ldw	r18,32(sp)
    dc3c:	dc400717 	ldw	r17,28(sp)
    dc40:	dc000617 	ldw	r16,24(sp)
    dc44:	dec01004 	addi	sp,sp,64
    dc48:	f800283a 	ret
    dc4c:	8904b03a 	or	r2,r17,r4
    dc50:	10003726 	beq	r2,zero,dd30 <__divdf3+0x2b0>
    dc54:	88014d26 	beq	r17,zero,e18c <__divdf3+0x70c>
    dc58:	8809883a 	mov	r4,r17
    dc5c:	d9800215 	stw	r6,8(sp)
    dc60:	d9c00515 	stw	r7,20(sp)
    dc64:	000f97c0 	call	f97c <__clzsi2>
    dc68:	d9800217 	ldw	r6,8(sp)
    dc6c:	d9c00517 	ldw	r7,20(sp)
    dc70:	1007883a 	mov	r3,r2
    dc74:	01000a04 	movi	r4,40
    dc78:	1cfffe04 	addi	r19,r3,-8
    dc7c:	20c9c83a 	sub	r4,r4,r3
    dc80:	8cca983a 	sll	r5,r17,r19
    dc84:	a108d83a 	srl	r4,r20,r4
    dc88:	a4e6983a 	sll	r19,r20,r19
    dc8c:	2162b03a 	or	r17,r4,r5
    dc90:	04bf0344 	movi	r18,-1011
    dc94:	90e5c83a 	sub	r18,r18,r3
    dc98:	0029883a 	mov	r20,zero
    dc9c:	0011883a 	mov	r8,zero
    dca0:	003f9606 	br	dafc <__alt_data_end+0xfffb83cc>
    dca4:	8184b03a 	or	r2,r16,r6
    dca8:	10001f1e 	bne	r2,zero,dd28 <__divdf3+0x2a8>
    dcac:	0021883a 	mov	r16,zero
    dcb0:	002b883a 	mov	r21,zero
    dcb4:	01c00084 	movi	r7,2
    dcb8:	003fa206 	br	db44 <__alt_data_end+0xfffb8414>
    dcbc:	8184b03a 	or	r2,r16,r6
    dcc0:	10001526 	beq	r2,zero,dd18 <__divdf3+0x298>
    dcc4:	80013d26 	beq	r16,zero,e1bc <__divdf3+0x73c>
    dcc8:	8009883a 	mov	r4,r16
    dccc:	d9800215 	stw	r6,8(sp)
    dcd0:	da000315 	stw	r8,12(sp)
    dcd4:	da400415 	stw	r9,16(sp)
    dcd8:	000f97c0 	call	f97c <__clzsi2>
    dcdc:	d9800217 	ldw	r6,8(sp)
    dce0:	da000317 	ldw	r8,12(sp)
    dce4:	da400417 	ldw	r9,16(sp)
    dce8:	1007883a 	mov	r3,r2
    dcec:	01000a04 	movi	r4,40
    dcf0:	1d7ffe04 	addi	r21,r3,-8
    dcf4:	20c9c83a 	sub	r4,r4,r3
    dcf8:	8560983a 	sll	r16,r16,r21
    dcfc:	3108d83a 	srl	r4,r6,r4
    dd00:	356a983a 	sll	r21,r6,r21
    dd04:	2420b03a 	or	r16,r4,r16
    dd08:	017f0344 	movi	r5,-1011
    dd0c:	28cbc83a 	sub	r5,r5,r3
    dd10:	000f883a 	mov	r7,zero
    dd14:	003f8b06 	br	db44 <__alt_data_end+0xfffb8414>
    dd18:	0021883a 	mov	r16,zero
    dd1c:	002b883a 	mov	r21,zero
    dd20:	01c00044 	movi	r7,1
    dd24:	003f8706 	br	db44 <__alt_data_end+0xfffb8414>
    dd28:	01c000c4 	movi	r7,3
    dd2c:	003f8506 	br	db44 <__alt_data_end+0xfffb8414>
    dd30:	05000104 	movi	r20,4
    dd34:	0023883a 	mov	r17,zero
    dd38:	0027883a 	mov	r19,zero
    dd3c:	02000044 	movi	r8,1
    dd40:	003f6e06 	br	dafc <__alt_data_end+0xfffb83cc>
    dd44:	05000304 	movi	r20,12
    dd48:	020000c4 	movi	r8,3
    dd4c:	003f6b06 	br	dafc <__alt_data_end+0xfffb83cc>
    dd50:	01400434 	movhi	r5,16
    dd54:	000d883a 	mov	r6,zero
    dd58:	297fffc4 	addi	r5,r5,-1
    dd5c:	04ffffc4 	movi	r19,-1
    dd60:	0201ffc4 	movi	r8,2047
    dd64:	003fa406 	br	dbf8 <__alt_data_end+0xfffb84c8>
    dd68:	043f0084 	movi	r16,-1022
    dd6c:	84a1c83a 	sub	r16,r16,r18
    dd70:	00800e04 	movi	r2,56
    dd74:	14014d0e 	bge	r2,r16,e2ac <__divdf3+0x82c>
    dd78:	a180004c 	andi	r6,r20,1
    dd7c:	0011883a 	mov	r8,zero
    dd80:	000b883a 	mov	r5,zero
    dd84:	0027883a 	mov	r19,zero
    dd88:	003f9b06 	br	dbf8 <__alt_data_end+0xfffb84c8>
    dd8c:	8880022c 	andhi	r2,r17,8
    dd90:	1000f026 	beq	r2,zero,e154 <__divdf3+0x6d4>
    dd94:	8080022c 	andhi	r2,r16,8
    dd98:	1000ee1e 	bne	r2,zero,e154 <__divdf3+0x6d4>
    dd9c:	00800434 	movhi	r2,16
    dda0:	81400234 	orhi	r5,r16,8
    dda4:	10bfffc4 	addi	r2,r2,-1
    dda8:	b80d883a 	mov	r6,r23
    ddac:	288a703a 	and	r5,r5,r2
    ddb0:	a827883a 	mov	r19,r21
    ddb4:	003fea06 	br	dd60 <__alt_data_end+0xfffb8630>
    ddb8:	84411c36 	bltu	r16,r17,e22c <__divdf3+0x7ac>
    ddbc:	8c011a26 	beq	r17,r16,e228 <__divdf3+0x7a8>
    ddc0:	94bfffc4 	addi	r18,r18,-1
    ddc4:	dcc00015 	stw	r19,0(sp)
    ddc8:	8811883a 	mov	r8,r17
    ddcc:	002d883a 	mov	r22,zero
    ddd0:	a80cd63a 	srli	r6,r21,24
    ddd4:	8020923a 	slli	r16,r16,8
    ddd8:	a82a923a 	slli	r21,r21,8
    dddc:	4009883a 	mov	r4,r8
    dde0:	342eb03a 	or	r23,r6,r16
    dde4:	dd400115 	stw	r21,4(sp)
    dde8:	b82ad43a 	srli	r21,r23,16
    ddec:	da000315 	stw	r8,12(sp)
    ddf0:	bcffffcc 	andi	r19,r23,65535
    ddf4:	a80b883a 	mov	r5,r21
    ddf8:	0002fe80 	call	2fe8 <__udivsi3>
    ddfc:	1009883a 	mov	r4,r2
    de00:	980b883a 	mov	r5,r19
    de04:	1023883a 	mov	r17,r2
    de08:	000d1bc0 	call	d1bc <__mulsi3>
    de0c:	da000317 	ldw	r8,12(sp)
    de10:	a80b883a 	mov	r5,r21
    de14:	1039883a 	mov	fp,r2
    de18:	4009883a 	mov	r4,r8
    de1c:	0002ff00 	call	2ff0 <__umodsi3>
    de20:	d8c00017 	ldw	r3,0(sp)
    de24:	1004943a 	slli	r2,r2,16
    de28:	1810d43a 	srli	r8,r3,16
    de2c:	120eb03a 	or	r7,r2,r8
    de30:	3f00062e 	bgeu	r7,fp,de4c <__divdf3+0x3cc>
    de34:	3dcf883a 	add	r7,r7,r23
    de38:	88bfffc4 	addi	r2,r17,-1
    de3c:	3dc10a36 	bltu	r7,r23,e268 <__divdf3+0x7e8>
    de40:	3f01092e 	bgeu	r7,fp,e268 <__divdf3+0x7e8>
    de44:	8c7fff84 	addi	r17,r17,-2
    de48:	3dcf883a 	add	r7,r7,r23
    de4c:	3f39c83a 	sub	fp,r7,fp
    de50:	e009883a 	mov	r4,fp
    de54:	a80b883a 	mov	r5,r21
    de58:	0002fe80 	call	2fe8 <__udivsi3>
    de5c:	1009883a 	mov	r4,r2
    de60:	980b883a 	mov	r5,r19
    de64:	1021883a 	mov	r16,r2
    de68:	000d1bc0 	call	d1bc <__mulsi3>
    de6c:	e009883a 	mov	r4,fp
    de70:	a80b883a 	mov	r5,r21
    de74:	d8800315 	stw	r2,12(sp)
    de78:	0002ff00 	call	2ff0 <__umodsi3>
    de7c:	d9000017 	ldw	r4,0(sp)
    de80:	1004943a 	slli	r2,r2,16
    de84:	da000317 	ldw	r8,12(sp)
    de88:	20ffffcc 	andi	r3,r4,65535
    de8c:	10ceb03a 	or	r7,r2,r3
    de90:	3a00062e 	bgeu	r7,r8,deac <__divdf3+0x42c>
    de94:	3dcf883a 	add	r7,r7,r23
    de98:	80bfffc4 	addi	r2,r16,-1
    de9c:	3dc0f036 	bltu	r7,r23,e260 <__divdf3+0x7e0>
    dea0:	3a00ef2e 	bgeu	r7,r8,e260 <__divdf3+0x7e0>
    dea4:	843fff84 	addi	r16,r16,-2
    dea8:	3dcf883a 	add	r7,r7,r23
    deac:	d8c00117 	ldw	r3,4(sp)
    deb0:	8822943a 	slli	r17,r17,16
    deb4:	3a0fc83a 	sub	r7,r7,r8
    deb8:	1806d43a 	srli	r3,r3,16
    debc:	8462b03a 	or	r17,r16,r17
    dec0:	8affffcc 	andi	r11,r17,65535
    dec4:	d8c00015 	stw	r3,0(sp)
    dec8:	d8c00117 	ldw	r3,4(sp)
    decc:	8820d43a 	srli	r16,r17,16
    ded0:	5809883a 	mov	r4,r11
    ded4:	1f3fffcc 	andi	fp,r3,65535
    ded8:	e00b883a 	mov	r5,fp
    dedc:	d9c00515 	stw	r7,20(sp)
    dee0:	dac00215 	stw	r11,8(sp)
    dee4:	000d1bc0 	call	d1bc <__mulsi3>
    dee8:	8009883a 	mov	r4,r16
    deec:	e00b883a 	mov	r5,fp
    def0:	d8800415 	stw	r2,16(sp)
    def4:	000d1bc0 	call	d1bc <__mulsi3>
    def8:	d9400017 	ldw	r5,0(sp)
    defc:	8009883a 	mov	r4,r16
    df00:	d8800315 	stw	r2,12(sp)
    df04:	000d1bc0 	call	d1bc <__mulsi3>
    df08:	dac00217 	ldw	r11,8(sp)
    df0c:	d9400017 	ldw	r5,0(sp)
    df10:	d8800215 	stw	r2,8(sp)
    df14:	5809883a 	mov	r4,r11
    df18:	000d1bc0 	call	d1bc <__mulsi3>
    df1c:	da400417 	ldw	r9,16(sp)
    df20:	da800317 	ldw	r10,12(sp)
    df24:	d9c00517 	ldw	r7,20(sp)
    df28:	480ad43a 	srli	r5,r9,16
    df2c:	5085883a 	add	r2,r10,r2
    df30:	db000217 	ldw	r12,8(sp)
    df34:	1151883a 	add	r8,r2,r5
    df38:	4280022e 	bgeu	r8,r10,df44 <__divdf3+0x4c4>
    df3c:	00800074 	movhi	r2,1
    df40:	6099883a 	add	r12,r12,r2
    df44:	400ad43a 	srli	r5,r8,16
    df48:	4010943a 	slli	r8,r8,16
    df4c:	4c3fffcc 	andi	r16,r9,65535
    df50:	6149883a 	add	r4,r12,r5
    df54:	4411883a 	add	r8,r8,r16
    df58:	3900a736 	bltu	r7,r4,e1f8 <__divdf3+0x778>
    df5c:	3900c426 	beq	r7,r4,e270 <__divdf3+0x7f0>
    df60:	3909c83a 	sub	r4,r7,r4
    df64:	b221c83a 	sub	r16,r22,r8
    df68:	b42d803a 	cmpltu	r22,r22,r16
    df6c:	25adc83a 	sub	r22,r4,r22
    df70:	b5c0c626 	beq	r22,r23,e28c <__divdf3+0x80c>
    df74:	b009883a 	mov	r4,r22
    df78:	a80b883a 	mov	r5,r21
    df7c:	0002fe80 	call	2fe8 <__udivsi3>
    df80:	1009883a 	mov	r4,r2
    df84:	980b883a 	mov	r5,r19
    df88:	d8800315 	stw	r2,12(sp)
    df8c:	000d1bc0 	call	d1bc <__mulsi3>
    df90:	a80b883a 	mov	r5,r21
    df94:	b009883a 	mov	r4,r22
    df98:	d8800415 	stw	r2,16(sp)
    df9c:	0002ff00 	call	2ff0 <__umodsi3>
    dfa0:	1004943a 	slli	r2,r2,16
    dfa4:	800ed43a 	srli	r7,r16,16
    dfa8:	da400417 	ldw	r9,16(sp)
    dfac:	da000317 	ldw	r8,12(sp)
    dfb0:	11cab03a 	or	r5,r2,r7
    dfb4:	2a40062e 	bgeu	r5,r9,dfd0 <__divdf3+0x550>
    dfb8:	2dcb883a 	add	r5,r5,r23
    dfbc:	40bfffc4 	addi	r2,r8,-1
    dfc0:	2dc0b436 	bltu	r5,r23,e294 <__divdf3+0x814>
    dfc4:	2a40b32e 	bgeu	r5,r9,e294 <__divdf3+0x814>
    dfc8:	423fff84 	addi	r8,r8,-2
    dfcc:	2dcb883a 	add	r5,r5,r23
    dfd0:	2a6dc83a 	sub	r22,r5,r9
    dfd4:	b009883a 	mov	r4,r22
    dfd8:	a80b883a 	mov	r5,r21
    dfdc:	da000315 	stw	r8,12(sp)
    dfe0:	0002fe80 	call	2fe8 <__udivsi3>
    dfe4:	980b883a 	mov	r5,r19
    dfe8:	1009883a 	mov	r4,r2
    dfec:	d8800415 	stw	r2,16(sp)
    dff0:	000d1bc0 	call	d1bc <__mulsi3>
    dff4:	b009883a 	mov	r4,r22
    dff8:	a80b883a 	mov	r5,r21
    dffc:	1027883a 	mov	r19,r2
    e000:	0002ff00 	call	2ff0 <__umodsi3>
    e004:	1004943a 	slli	r2,r2,16
    e008:	843fffcc 	andi	r16,r16,65535
    e00c:	da000317 	ldw	r8,12(sp)
    e010:	140eb03a 	or	r7,r2,r16
    e014:	da400417 	ldw	r9,16(sp)
    e018:	3cc0062e 	bgeu	r7,r19,e034 <__divdf3+0x5b4>
    e01c:	3dcf883a 	add	r7,r7,r23
    e020:	48bfffc4 	addi	r2,r9,-1
    e024:	3dc09d36 	bltu	r7,r23,e29c <__divdf3+0x81c>
    e028:	3cc09c2e 	bgeu	r7,r19,e29c <__divdf3+0x81c>
    e02c:	4a7fff84 	addi	r9,r9,-2
    e030:	3dcf883a 	add	r7,r7,r23
    e034:	4010943a 	slli	r8,r8,16
    e038:	3cebc83a 	sub	r21,r7,r19
    e03c:	e00b883a 	mov	r5,fp
    e040:	4a26b03a 	or	r19,r9,r8
    e044:	99ffffcc 	andi	r7,r19,65535
    e048:	9820d43a 	srli	r16,r19,16
    e04c:	3809883a 	mov	r4,r7
    e050:	d9c00515 	stw	r7,20(sp)
    e054:	000d1bc0 	call	d1bc <__mulsi3>
    e058:	8009883a 	mov	r4,r16
    e05c:	e00b883a 	mov	r5,fp
    e060:	102d883a 	mov	r22,r2
    e064:	000d1bc0 	call	d1bc <__mulsi3>
    e068:	d9400017 	ldw	r5,0(sp)
    e06c:	8009883a 	mov	r4,r16
    e070:	1039883a 	mov	fp,r2
    e074:	000d1bc0 	call	d1bc <__mulsi3>
    e078:	d9c00517 	ldw	r7,20(sp)
    e07c:	d9400017 	ldw	r5,0(sp)
    e080:	1021883a 	mov	r16,r2
    e084:	3809883a 	mov	r4,r7
    e088:	000d1bc0 	call	d1bc <__mulsi3>
    e08c:	b008d43a 	srli	r4,r22,16
    e090:	e085883a 	add	r2,fp,r2
    e094:	1109883a 	add	r4,r2,r4
    e098:	2700022e 	bgeu	r4,fp,e0a4 <__divdf3+0x624>
    e09c:	00800074 	movhi	r2,1
    e0a0:	80a1883a 	add	r16,r16,r2
    e0a4:	200ad43a 	srli	r5,r4,16
    e0a8:	2008943a 	slli	r4,r4,16
    e0ac:	b5bfffcc 	andi	r22,r22,65535
    e0b0:	8145883a 	add	r2,r16,r5
    e0b4:	2589883a 	add	r4,r4,r22
    e0b8:	a8802c36 	bltu	r21,r2,e16c <__divdf3+0x6ec>
    e0bc:	a880a426 	beq	r21,r2,e350 <__divdf3+0x8d0>
    e0c0:	9cc00054 	ori	r19,r19,1
    e0c4:	9200ffc4 	addi	r8,r18,1023
    e0c8:	023f270e 	bge	zero,r8,dd68 <__alt_data_end+0xfffb8638>
    e0cc:	988001cc 	andi	r2,r19,7
    e0d0:	10000726 	beq	r2,zero,e0f0 <__divdf3+0x670>
    e0d4:	990003cc 	andi	r4,r19,15
    e0d8:	00800104 	movi	r2,4
    e0dc:	20800426 	beq	r4,r2,e0f0 <__divdf3+0x670>
    e0e0:	9885883a 	add	r2,r19,r2
    e0e4:	14e7803a 	cmpltu	r19,r2,r19
    e0e8:	8ce3883a 	add	r17,r17,r19
    e0ec:	1027883a 	mov	r19,r2
    e0f0:	8880402c 	andhi	r2,r17,256
    e0f4:	10000426 	beq	r2,zero,e108 <__divdf3+0x688>
    e0f8:	00bfc034 	movhi	r2,65280
    e0fc:	10bfffc4 	addi	r2,r2,-1
    e100:	92010004 	addi	r8,r18,1024
    e104:	88a2703a 	and	r17,r17,r2
    e108:	0081ff84 	movi	r2,2046
    e10c:	123eb616 	blt	r2,r8,dbe8 <__alt_data_end+0xfffb84b8>
    e110:	9826d0fa 	srli	r19,r19,3
    e114:	8804977a 	slli	r2,r17,29
    e118:	8820927a 	slli	r16,r17,9
    e11c:	4201ffcc 	andi	r8,r8,2047
    e120:	14e6b03a 	or	r19,r2,r19
    e124:	800ad33a 	srli	r5,r16,12
    e128:	a180004c 	andi	r6,r20,1
    e12c:	003eb206 	br	dbf8 <__alt_data_end+0xfffb84c8>
    e130:	008000c4 	movi	r2,3
    e134:	4080ac26 	beq	r8,r2,e3e8 <__divdf3+0x968>
    e138:	00800044 	movi	r2,1
    e13c:	4080591e 	bne	r8,r2,e2a4 <__divdf3+0x824>
    e140:	e00d883a 	mov	r6,fp
    e144:	0011883a 	mov	r8,zero
    e148:	000b883a 	mov	r5,zero
    e14c:	0027883a 	mov	r19,zero
    e150:	003ea906 	br	dbf8 <__alt_data_end+0xfffb84c8>
    e154:	00800434 	movhi	r2,16
    e158:	89400234 	orhi	r5,r17,8
    e15c:	10bfffc4 	addi	r2,r2,-1
    e160:	b00d883a 	mov	r6,r22
    e164:	288a703a 	and	r5,r5,r2
    e168:	003efd06 	br	dd60 <__alt_data_end+0xfffb8630>
    e16c:	adcf883a 	add	r7,r21,r23
    e170:	997fffc4 	addi	r5,r19,-1
    e174:	3dc0412e 	bgeu	r7,r23,e27c <__divdf3+0x7fc>
    e178:	2827883a 	mov	r19,r5
    e17c:	38bfd01e 	bne	r7,r2,e0c0 <__alt_data_end+0xfffb8990>
    e180:	d8c00117 	ldw	r3,4(sp)
    e184:	193fce1e 	bne	r3,r4,e0c0 <__alt_data_end+0xfffb8990>
    e188:	003fce06 	br	e0c4 <__alt_data_end+0xfffb8994>
    e18c:	d9800215 	stw	r6,8(sp)
    e190:	d9c00515 	stw	r7,20(sp)
    e194:	000f97c0 	call	f97c <__clzsi2>
    e198:	10c00804 	addi	r3,r2,32
    e19c:	010009c4 	movi	r4,39
    e1a0:	d9800217 	ldw	r6,8(sp)
    e1a4:	d9c00517 	ldw	r7,20(sp)
    e1a8:	20feb20e 	bge	r4,r3,dc74 <__alt_data_end+0xfffb8544>
    e1ac:	117ffe04 	addi	r5,r2,-8
    e1b0:	a162983a 	sll	r17,r20,r5
    e1b4:	0027883a 	mov	r19,zero
    e1b8:	003eb506 	br	dc90 <__alt_data_end+0xfffb8560>
    e1bc:	3009883a 	mov	r4,r6
    e1c0:	d9800215 	stw	r6,8(sp)
    e1c4:	da000315 	stw	r8,12(sp)
    e1c8:	da400415 	stw	r9,16(sp)
    e1cc:	000f97c0 	call	f97c <__clzsi2>
    e1d0:	10c00804 	addi	r3,r2,32
    e1d4:	010009c4 	movi	r4,39
    e1d8:	d9800217 	ldw	r6,8(sp)
    e1dc:	da000317 	ldw	r8,12(sp)
    e1e0:	da400417 	ldw	r9,16(sp)
    e1e4:	20fec10e 	bge	r4,r3,dcec <__alt_data_end+0xfffb85bc>
    e1e8:	10bffe04 	addi	r2,r2,-8
    e1ec:	a8a0983a 	sll	r16,r21,r2
    e1f0:	002b883a 	mov	r21,zero
    e1f4:	003ec406 	br	dd08 <__alt_data_end+0xfffb85d8>
    e1f8:	d8c00117 	ldw	r3,4(sp)
    e1fc:	b0ed883a 	add	r22,r22,r3
    e200:	b0c5803a 	cmpltu	r2,r22,r3
    e204:	15c5883a 	add	r2,r2,r23
    e208:	11cf883a 	add	r7,r2,r7
    e20c:	88bfffc4 	addi	r2,r17,-1
    e210:	b9c00d2e 	bgeu	r23,r7,e248 <__divdf3+0x7c8>
    e214:	39003f36 	bltu	r7,r4,e314 <__divdf3+0x894>
    e218:	21c06a26 	beq	r4,r7,e3c4 <__divdf3+0x944>
    e21c:	3909c83a 	sub	r4,r7,r4
    e220:	1023883a 	mov	r17,r2
    e224:	003f4f06 	br	df64 <__alt_data_end+0xfffb8834>
    e228:	9d7ee536 	bltu	r19,r21,ddc0 <__alt_data_end+0xfffb8690>
    e22c:	982ed07a 	srli	r23,r19,1
    e230:	880497fa 	slli	r2,r17,31
    e234:	8810d07a 	srli	r8,r17,1
    e238:	982c97fa 	slli	r22,r19,31
    e23c:	b884b03a 	or	r2,r23,r2
    e240:	d8800015 	stw	r2,0(sp)
    e244:	003ee206 	br	ddd0 <__alt_data_end+0xfffb86a0>
    e248:	3dfff41e 	bne	r7,r23,e21c <__alt_data_end+0xfffb8aec>
    e24c:	d8c00117 	ldw	r3,4(sp)
    e250:	b0fff02e 	bgeu	r22,r3,e214 <__alt_data_end+0xfffb8ae4>
    e254:	b909c83a 	sub	r4,r23,r4
    e258:	1023883a 	mov	r17,r2
    e25c:	003f4106 	br	df64 <__alt_data_end+0xfffb8834>
    e260:	1021883a 	mov	r16,r2
    e264:	003f1106 	br	deac <__alt_data_end+0xfffb877c>
    e268:	1023883a 	mov	r17,r2
    e26c:	003ef706 	br	de4c <__alt_data_end+0xfffb871c>
    e270:	b23fe136 	bltu	r22,r8,e1f8 <__alt_data_end+0xfffb8ac8>
    e274:	0009883a 	mov	r4,zero
    e278:	003f3a06 	br	df64 <__alt_data_end+0xfffb8834>
    e27c:	38802c36 	bltu	r7,r2,e330 <__divdf3+0x8b0>
    e280:	11c05326 	beq	r2,r7,e3d0 <__divdf3+0x950>
    e284:	2827883a 	mov	r19,r5
    e288:	003f8d06 	br	e0c0 <__alt_data_end+0xfffb8990>
    e28c:	04ffffc4 	movi	r19,-1
    e290:	003f8c06 	br	e0c4 <__alt_data_end+0xfffb8994>
    e294:	1011883a 	mov	r8,r2
    e298:	003f4d06 	br	dfd0 <__alt_data_end+0xfffb88a0>
    e29c:	1013883a 	mov	r9,r2
    e2a0:	003f6406 	br	e034 <__alt_data_end+0xfffb8904>
    e2a4:	e029883a 	mov	r20,fp
    e2a8:	003f8606 	br	e0c4 <__alt_data_end+0xfffb8994>
    e2ac:	008007c4 	movi	r2,31
    e2b0:	14002a16 	blt	r2,r16,e35c <__divdf3+0x8dc>
    e2b4:	91410784 	addi	r5,r18,1054
    e2b8:	9c0cd83a 	srl	r6,r19,r16
    e2bc:	8948983a 	sll	r4,r17,r5
    e2c0:	9944983a 	sll	r2,r19,r5
    e2c4:	8c20d83a 	srl	r16,r17,r16
    e2c8:	3108b03a 	or	r4,r6,r4
    e2cc:	1004c03a 	cmpne	r2,r2,zero
    e2d0:	2084b03a 	or	r2,r4,r2
    e2d4:	110001cc 	andi	r4,r2,7
    e2d8:	20000726 	beq	r4,zero,e2f8 <__divdf3+0x878>
    e2dc:	114003cc 	andi	r5,r2,15
    e2e0:	01000104 	movi	r4,4
    e2e4:	29000426 	beq	r5,r4,e2f8 <__divdf3+0x878>
    e2e8:	11000104 	addi	r4,r2,4
    e2ec:	2085803a 	cmpltu	r2,r4,r2
    e2f0:	80a1883a 	add	r16,r16,r2
    e2f4:	2005883a 	mov	r2,r4
    e2f8:	8100202c 	andhi	r4,r16,128
    e2fc:	20002d26 	beq	r4,zero,e3b4 <__divdf3+0x934>
    e300:	a180004c 	andi	r6,r20,1
    e304:	02000044 	movi	r8,1
    e308:	000b883a 	mov	r5,zero
    e30c:	0027883a 	mov	r19,zero
    e310:	003e3906 	br	dbf8 <__alt_data_end+0xfffb84c8>
    e314:	d8c00117 	ldw	r3,4(sp)
    e318:	8c7fff84 	addi	r17,r17,-2
    e31c:	b0ed883a 	add	r22,r22,r3
    e320:	b0c5803a 	cmpltu	r2,r22,r3
    e324:	15c5883a 	add	r2,r2,r23
    e328:	11cf883a 	add	r7,r2,r7
    e32c:	003f0c06 	br	df60 <__alt_data_end+0xfffb8830>
    e330:	d8c00117 	ldw	r3,4(sp)
    e334:	997fff84 	addi	r5,r19,-2
    e338:	18d1883a 	add	r8,r3,r3
    e33c:	40c7803a 	cmpltu	r3,r8,r3
    e340:	1dcd883a 	add	r6,r3,r23
    e344:	398f883a 	add	r7,r7,r6
    e348:	da000115 	stw	r8,4(sp)
    e34c:	003f8a06 	br	e178 <__alt_data_end+0xfffb8a48>
    e350:	203f861e 	bne	r4,zero,e16c <__alt_data_end+0xfffb8a3c>
    e354:	d8000115 	stw	zero,4(sp)
    e358:	003f8906 	br	e180 <__alt_data_end+0xfffb8a50>
    e35c:	00bef884 	movi	r2,-1054
    e360:	1485c83a 	sub	r2,r2,r18
    e364:	01000804 	movi	r4,32
    e368:	8884d83a 	srl	r2,r17,r2
    e36c:	81001c26 	beq	r16,r4,e3e0 <__divdf3+0x960>
    e370:	91010f84 	addi	r4,r18,1086
    e374:	8908983a 	sll	r4,r17,r4
    e378:	24c8b03a 	or	r4,r4,r19
    e37c:	2008c03a 	cmpne	r4,r4,zero
    e380:	2084b03a 	or	r2,r4,r2
    e384:	140001cc 	andi	r16,r2,7
    e388:	8000061e 	bne	r16,zero,e3a4 <__divdf3+0x924>
    e38c:	000b883a 	mov	r5,zero
    e390:	1004d0fa 	srli	r2,r2,3
    e394:	a180004c 	andi	r6,r20,1
    e398:	0011883a 	mov	r8,zero
    e39c:	1426b03a 	or	r19,r2,r16
    e3a0:	003e1506 	br	dbf8 <__alt_data_end+0xfffb84c8>
    e3a4:	114003cc 	andi	r5,r2,15
    e3a8:	01000104 	movi	r4,4
    e3ac:	0021883a 	mov	r16,zero
    e3b0:	293fcd1e 	bne	r5,r4,e2e8 <__alt_data_end+0xfffb8bb8>
    e3b4:	800a927a 	slli	r5,r16,9
    e3b8:	8020977a 	slli	r16,r16,29
    e3bc:	280ad33a 	srli	r5,r5,12
    e3c0:	003ff306 	br	e390 <__alt_data_end+0xfffb8c60>
    e3c4:	b23fd336 	bltu	r22,r8,e314 <__alt_data_end+0xfffb8be4>
    e3c8:	1023883a 	mov	r17,r2
    e3cc:	003fa906 	br	e274 <__alt_data_end+0xfffb8b44>
    e3d0:	d8c00117 	ldw	r3,4(sp)
    e3d4:	193fd636 	bltu	r3,r4,e330 <__alt_data_end+0xfffb8c00>
    e3d8:	2827883a 	mov	r19,r5
    e3dc:	003f6806 	br	e180 <__alt_data_end+0xfffb8a50>
    e3e0:	0009883a 	mov	r4,zero
    e3e4:	003fe406 	br	e378 <__alt_data_end+0xfffb8c48>
    e3e8:	00800434 	movhi	r2,16
    e3ec:	89400234 	orhi	r5,r17,8
    e3f0:	10bfffc4 	addi	r2,r2,-1
    e3f4:	e00d883a 	mov	r6,fp
    e3f8:	288a703a 	and	r5,r5,r2
    e3fc:	003e5806 	br	dd60 <__alt_data_end+0xfffb8630>

0000e400 <__eqdf2>:
    e400:	2804d53a 	srli	r2,r5,20
    e404:	3806d53a 	srli	r3,r7,20
    e408:	02000434 	movhi	r8,16
    e40c:	423fffc4 	addi	r8,r8,-1
    e410:	1081ffcc 	andi	r2,r2,2047
    e414:	0241ffc4 	movi	r9,2047
    e418:	2a14703a 	and	r10,r5,r8
    e41c:	18c1ffcc 	andi	r3,r3,2047
    e420:	3a10703a 	and	r8,r7,r8
    e424:	280ad7fa 	srli	r5,r5,31
    e428:	380ed7fa 	srli	r7,r7,31
    e42c:	12400f26 	beq	r2,r9,e46c <__eqdf2+0x6c>
    e430:	0241ffc4 	movi	r9,2047
    e434:	1a400326 	beq	r3,r9,e444 <__eqdf2+0x44>
    e438:	10c00526 	beq	r2,r3,e450 <__eqdf2+0x50>
    e43c:	00800044 	movi	r2,1
    e440:	f800283a 	ret
    e444:	4192b03a 	or	r9,r8,r6
    e448:	483ffc1e 	bne	r9,zero,e43c <__alt_data_end+0xfffb8d0c>
    e44c:	10fffb1e 	bne	r2,r3,e43c <__alt_data_end+0xfffb8d0c>
    e450:	523ffa1e 	bne	r10,r8,e43c <__alt_data_end+0xfffb8d0c>
    e454:	21bff91e 	bne	r4,r6,e43c <__alt_data_end+0xfffb8d0c>
    e458:	29c00826 	beq	r5,r7,e47c <__eqdf2+0x7c>
    e45c:	103ff71e 	bne	r2,zero,e43c <__alt_data_end+0xfffb8d0c>
    e460:	5104b03a 	or	r2,r10,r4
    e464:	1004c03a 	cmpne	r2,r2,zero
    e468:	f800283a 	ret
    e46c:	5112b03a 	or	r9,r10,r4
    e470:	483fef26 	beq	r9,zero,e430 <__alt_data_end+0xfffb8d00>
    e474:	00800044 	movi	r2,1
    e478:	f800283a 	ret
    e47c:	0005883a 	mov	r2,zero
    e480:	f800283a 	ret

0000e484 <__gedf2>:
    e484:	2804d53a 	srli	r2,r5,20
    e488:	3806d53a 	srli	r3,r7,20
    e48c:	02000434 	movhi	r8,16
    e490:	423fffc4 	addi	r8,r8,-1
    e494:	0241ffc4 	movi	r9,2047
    e498:	1081ffcc 	andi	r2,r2,2047
    e49c:	2a14703a 	and	r10,r5,r8
    e4a0:	1a46703a 	and	r3,r3,r9
    e4a4:	3a10703a 	and	r8,r7,r8
    e4a8:	280ad7fa 	srli	r5,r5,31
    e4ac:	380ed7fa 	srli	r7,r7,31
    e4b0:	12400b26 	beq	r2,r9,e4e0 <__gedf2+0x5c>
    e4b4:	1a401626 	beq	r3,r9,e510 <__gedf2+0x8c>
    e4b8:	10000c1e 	bne	r2,zero,e4ec <__gedf2+0x68>
    e4bc:	5112b03a 	or	r9,r10,r4
    e4c0:	4813003a 	cmpeq	r9,r9,zero
    e4c4:	4817883a 	mov	r11,r9
    e4c8:	18000c1e 	bne	r3,zero,e4fc <__gedf2+0x78>
    e4cc:	4198b03a 	or	r12,r8,r6
    e4d0:	60000a1e 	bne	r12,zero,e4fc <__gedf2+0x78>
    e4d4:	48001326 	beq	r9,zero,e524 <__gedf2+0xa0>
    e4d8:	0005883a 	mov	r2,zero
    e4dc:	f800283a 	ret
    e4e0:	5112b03a 	or	r9,r10,r4
    e4e4:	4800191e 	bne	r9,zero,e54c <__gedf2+0xc8>
    e4e8:	18800926 	beq	r3,r2,e510 <__gedf2+0x8c>
    e4ec:	18000b1e 	bne	r3,zero,e51c <__gedf2+0x98>
    e4f0:	4192b03a 	or	r9,r8,r6
    e4f4:	0017883a 	mov	r11,zero
    e4f8:	48000a26 	beq	r9,zero,e524 <__gedf2+0xa0>
    e4fc:	39c03fcc 	andi	r7,r7,255
    e500:	58000726 	beq	r11,zero,e520 <__gedf2+0x9c>
    e504:	3800081e 	bne	r7,zero,e528 <__gedf2+0xa4>
    e508:	00bfffc4 	movi	r2,-1
    e50c:	f800283a 	ret
    e510:	4192b03a 	or	r9,r8,r6
    e514:	48000d1e 	bne	r9,zero,e54c <__gedf2+0xc8>
    e518:	103fe826 	beq	r2,zero,e4bc <__alt_data_end+0xfffb8d8c>
    e51c:	39c03fcc 	andi	r7,r7,255
    e520:	29c00326 	beq	r5,r7,e530 <__gedf2+0xac>
    e524:	283ff81e 	bne	r5,zero,e508 <__alt_data_end+0xfffb8dd8>
    e528:	00800044 	movi	r2,1
    e52c:	f800283a 	ret
    e530:	18bffc16 	blt	r3,r2,e524 <__alt_data_end+0xfffb8df4>
    e534:	10c00316 	blt	r2,r3,e544 <__gedf2+0xc0>
    e538:	42bffa36 	bltu	r8,r10,e524 <__alt_data_end+0xfffb8df4>
    e53c:	52000526 	beq	r10,r8,e554 <__gedf2+0xd0>
    e540:	523fe52e 	bgeu	r10,r8,e4d8 <__alt_data_end+0xfffb8da8>
    e544:	283ff026 	beq	r5,zero,e508 <__alt_data_end+0xfffb8dd8>
    e548:	003ff706 	br	e528 <__alt_data_end+0xfffb8df8>
    e54c:	00bfff84 	movi	r2,-2
    e550:	f800283a 	ret
    e554:	313ff336 	bltu	r6,r4,e524 <__alt_data_end+0xfffb8df4>
    e558:	21bfdf2e 	bgeu	r4,r6,e4d8 <__alt_data_end+0xfffb8da8>
    e55c:	283fea26 	beq	r5,zero,e508 <__alt_data_end+0xfffb8dd8>
    e560:	003ff106 	br	e528 <__alt_data_end+0xfffb8df8>

0000e564 <__ledf2>:
    e564:	2804d53a 	srli	r2,r5,20
    e568:	3810d53a 	srli	r8,r7,20
    e56c:	00c00434 	movhi	r3,16
    e570:	18ffffc4 	addi	r3,r3,-1
    e574:	0241ffc4 	movi	r9,2047
    e578:	1081ffcc 	andi	r2,r2,2047
    e57c:	28d4703a 	and	r10,r5,r3
    e580:	4250703a 	and	r8,r8,r9
    e584:	38c6703a 	and	r3,r7,r3
    e588:	280ad7fa 	srli	r5,r5,31
    e58c:	380ed7fa 	srli	r7,r7,31
    e590:	12400b26 	beq	r2,r9,e5c0 <__ledf2+0x5c>
    e594:	42401926 	beq	r8,r9,e5fc <__ledf2+0x98>
    e598:	10000c1e 	bne	r2,zero,e5cc <__ledf2+0x68>
    e59c:	5112b03a 	or	r9,r10,r4
    e5a0:	4813003a 	cmpeq	r9,r9,zero
    e5a4:	4817883a 	mov	r11,r9
    e5a8:	40000f26 	beq	r8,zero,e5e8 <__ledf2+0x84>
    e5ac:	39c03fcc 	andi	r7,r7,255
    e5b0:	58001826 	beq	r11,zero,e614 <__ledf2+0xb0>
    e5b4:	38000a1e 	bne	r7,zero,e5e0 <__ledf2+0x7c>
    e5b8:	00bfffc4 	movi	r2,-1
    e5bc:	f800283a 	ret
    e5c0:	5112b03a 	or	r9,r10,r4
    e5c4:	48000f1e 	bne	r9,zero,e604 <__ledf2+0xa0>
    e5c8:	40800c26 	beq	r8,r2,e5fc <__ledf2+0x98>
    e5cc:	4000101e 	bne	r8,zero,e610 <__ledf2+0xac>
    e5d0:	1992b03a 	or	r9,r3,r6
    e5d4:	0017883a 	mov	r11,zero
    e5d8:	483ff41e 	bne	r9,zero,e5ac <__alt_data_end+0xfffb8e7c>
    e5dc:	283ff61e 	bne	r5,zero,e5b8 <__alt_data_end+0xfffb8e88>
    e5e0:	00800044 	movi	r2,1
    e5e4:	f800283a 	ret
    e5e8:	1998b03a 	or	r12,r3,r6
    e5ec:	603fef1e 	bne	r12,zero,e5ac <__alt_data_end+0xfffb8e7c>
    e5f0:	483ffa26 	beq	r9,zero,e5dc <__alt_data_end+0xfffb8eac>
    e5f4:	0005883a 	mov	r2,zero
    e5f8:	f800283a 	ret
    e5fc:	1992b03a 	or	r9,r3,r6
    e600:	48000226 	beq	r9,zero,e60c <__ledf2+0xa8>
    e604:	00800084 	movi	r2,2
    e608:	f800283a 	ret
    e60c:	103fe326 	beq	r2,zero,e59c <__alt_data_end+0xfffb8e6c>
    e610:	39c03fcc 	andi	r7,r7,255
    e614:	29fff11e 	bne	r5,r7,e5dc <__alt_data_end+0xfffb8eac>
    e618:	40bff016 	blt	r8,r2,e5dc <__alt_data_end+0xfffb8eac>
    e61c:	12000316 	blt	r2,r8,e62c <__ledf2+0xc8>
    e620:	1abfee36 	bltu	r3,r10,e5dc <__alt_data_end+0xfffb8eac>
    e624:	50c00326 	beq	r10,r3,e634 <__ledf2+0xd0>
    e628:	50fff22e 	bgeu	r10,r3,e5f4 <__alt_data_end+0xfffb8ec4>
    e62c:	283fe226 	beq	r5,zero,e5b8 <__alt_data_end+0xfffb8e88>
    e630:	003feb06 	br	e5e0 <__alt_data_end+0xfffb8eb0>
    e634:	313fe936 	bltu	r6,r4,e5dc <__alt_data_end+0xfffb8eac>
    e638:	21bfee2e 	bgeu	r4,r6,e5f4 <__alt_data_end+0xfffb8ec4>
    e63c:	283fde26 	beq	r5,zero,e5b8 <__alt_data_end+0xfffb8e88>
    e640:	003fe706 	br	e5e0 <__alt_data_end+0xfffb8eb0>

0000e644 <__muldf3>:
    e644:	deffee04 	addi	sp,sp,-72
    e648:	dd000c15 	stw	r20,48(sp)
    e64c:	2828d53a 	srli	r20,r5,20
    e650:	dd400d15 	stw	r21,52(sp)
    e654:	282ad7fa 	srli	r21,r5,31
    e658:	dc000815 	stw	r16,32(sp)
    e65c:	04000434 	movhi	r16,16
    e660:	ddc00f15 	stw	r23,60(sp)
    e664:	dcc00b15 	stw	r19,44(sp)
    e668:	dc800a15 	stw	r18,40(sp)
    e66c:	843fffc4 	addi	r16,r16,-1
    e670:	dfc01115 	stw	ra,68(sp)
    e674:	df001015 	stw	fp,64(sp)
    e678:	dd800e15 	stw	r22,56(sp)
    e67c:	dc400915 	stw	r17,36(sp)
    e680:	a501ffcc 	andi	r20,r20,2047
    e684:	2025883a 	mov	r18,r4
    e688:	202f883a 	mov	r23,r4
    e68c:	2c20703a 	and	r16,r5,r16
    e690:	a827883a 	mov	r19,r21
    e694:	aa403fcc 	andi	r9,r21,255
    e698:	a0005926 	beq	r20,zero,e800 <__muldf3+0x1bc>
    e69c:	0081ffc4 	movi	r2,2047
    e6a0:	a0803426 	beq	r20,r2,e774 <__muldf3+0x130>
    e6a4:	84000434 	orhi	r16,r16,16
    e6a8:	2004d77a 	srli	r2,r4,29
    e6ac:	802090fa 	slli	r16,r16,3
    e6b0:	202e90fa 	slli	r23,r4,3
    e6b4:	a53f0044 	addi	r20,r20,-1023
    e6b8:	80a0b03a 	or	r16,r16,r2
    e6bc:	000b883a 	mov	r5,zero
    e6c0:	0039883a 	mov	fp,zero
    e6c4:	3806d53a 	srli	r3,r7,20
    e6c8:	382cd7fa 	srli	r22,r7,31
    e6cc:	00800434 	movhi	r2,16
    e6d0:	10bfffc4 	addi	r2,r2,-1
    e6d4:	18c1ffcc 	andi	r3,r3,2047
    e6d8:	3025883a 	mov	r18,r6
    e6dc:	38a2703a 	and	r17,r7,r2
    e6e0:	b2803fcc 	andi	r10,r22,255
    e6e4:	18006426 	beq	r3,zero,e878 <__muldf3+0x234>
    e6e8:	0081ffc4 	movi	r2,2047
    e6ec:	18805c26 	beq	r3,r2,e860 <__muldf3+0x21c>
    e6f0:	8c400434 	orhi	r17,r17,16
    e6f4:	3004d77a 	srli	r2,r6,29
    e6f8:	882290fa 	slli	r17,r17,3
    e6fc:	302490fa 	slli	r18,r6,3
    e700:	18ff0044 	addi	r3,r3,-1023
    e704:	88a2b03a 	or	r17,r17,r2
    e708:	000f883a 	mov	r7,zero
    e70c:	394ab03a 	or	r5,r7,r5
    e710:	280a90ba 	slli	r5,r5,2
    e714:	00800074 	movhi	r2,1
    e718:	10b9cd04 	addi	r2,r2,-6348
    e71c:	288b883a 	add	r5,r5,r2
    e720:	28800017 	ldw	r2,0(r5)
    e724:	a0c7883a 	add	r3,r20,r3
    e728:	b54cf03a 	xor	r6,r22,r21
    e72c:	1a000044 	addi	r8,r3,1
    e730:	1000683a 	jmp	r2
    e734:	0000e978 	rdprs	zero,zero,933
    e738:	0000e964 	muli	zero,zero,933
    e73c:	0000e964 	muli	zero,zero,933
    e740:	0000e950 	cmplti	zero,zero,933
    e744:	0000e790 	cmplti	zero,zero,926
    e748:	0000e790 	cmplti	zero,zero,926
    e74c:	0000e938 	rdprs	zero,zero,932
    e750:	0000e950 	cmplti	zero,zero,933
    e754:	0000e790 	cmplti	zero,zero,926
    e758:	0000e938 	rdprs	zero,zero,932
    e75c:	0000e790 	cmplti	zero,zero,926
    e760:	0000e950 	cmplti	zero,zero,933
    e764:	0000e794 	movui	zero,926
    e768:	0000e794 	movui	zero,926
    e76c:	0000e794 	movui	zero,926
    e770:	0000ecb4 	movhi	zero,946
    e774:	8104b03a 	or	r2,r16,r4
    e778:	10006c1e 	bne	r2,zero,e92c <__muldf3+0x2e8>
    e77c:	01400204 	movi	r5,8
    e780:	0021883a 	mov	r16,zero
    e784:	002f883a 	mov	r23,zero
    e788:	07000084 	movi	fp,2
    e78c:	003fcd06 	br	e6c4 <__alt_data_end+0xfffb8f94>
    e790:	3013883a 	mov	r9,r6
    e794:	00800084 	movi	r2,2
    e798:	e080501e 	bne	fp,r2,e8dc <__muldf3+0x298>
    e79c:	4cc0004c 	andi	r19,r9,1
    e7a0:	0101ffc4 	movi	r4,2047
    e7a4:	0021883a 	mov	r16,zero
    e7a8:	002f883a 	mov	r23,zero
    e7ac:	2008953a 	slli	r4,r4,20
    e7b0:	98c03fcc 	andi	r3,r19,255
    e7b4:	04400434 	movhi	r17,16
    e7b8:	8c7fffc4 	addi	r17,r17,-1
    e7bc:	180697fa 	slli	r3,r3,31
    e7c0:	8460703a 	and	r16,r16,r17
    e7c4:	8120b03a 	or	r16,r16,r4
    e7c8:	80c6b03a 	or	r3,r16,r3
    e7cc:	b805883a 	mov	r2,r23
    e7d0:	dfc01117 	ldw	ra,68(sp)
    e7d4:	df001017 	ldw	fp,64(sp)
    e7d8:	ddc00f17 	ldw	r23,60(sp)
    e7dc:	dd800e17 	ldw	r22,56(sp)
    e7e0:	dd400d17 	ldw	r21,52(sp)
    e7e4:	dd000c17 	ldw	r20,48(sp)
    e7e8:	dcc00b17 	ldw	r19,44(sp)
    e7ec:	dc800a17 	ldw	r18,40(sp)
    e7f0:	dc400917 	ldw	r17,36(sp)
    e7f4:	dc000817 	ldw	r16,32(sp)
    e7f8:	dec01204 	addi	sp,sp,72
    e7fc:	f800283a 	ret
    e800:	8104b03a 	or	r2,r16,r4
    e804:	10004426 	beq	r2,zero,e918 <__muldf3+0x2d4>
    e808:	80014b26 	beq	r16,zero,ed38 <__muldf3+0x6f4>
    e80c:	8009883a 	mov	r4,r16
    e810:	d9800715 	stw	r6,28(sp)
    e814:	d9c00215 	stw	r7,8(sp)
    e818:	da400415 	stw	r9,16(sp)
    e81c:	000f97c0 	call	f97c <__clzsi2>
    e820:	d9800717 	ldw	r6,28(sp)
    e824:	d9c00217 	ldw	r7,8(sp)
    e828:	da400417 	ldw	r9,16(sp)
    e82c:	1007883a 	mov	r3,r2
    e830:	01000a04 	movi	r4,40
    e834:	1dfffe04 	addi	r23,r3,-8
    e838:	20c9c83a 	sub	r4,r4,r3
    e83c:	85e0983a 	sll	r16,r16,r23
    e840:	9108d83a 	srl	r4,r18,r4
    e844:	95ee983a 	sll	r23,r18,r23
    e848:	2420b03a 	or	r16,r4,r16
    e84c:	053f0344 	movi	r20,-1011
    e850:	a0e9c83a 	sub	r20,r20,r3
    e854:	000b883a 	mov	r5,zero
    e858:	0039883a 	mov	fp,zero
    e85c:	003f9906 	br	e6c4 <__alt_data_end+0xfffb8f94>
    e860:	8984b03a 	or	r2,r17,r6
    e864:	10002a1e 	bne	r2,zero,e910 <__muldf3+0x2cc>
    e868:	0023883a 	mov	r17,zero
    e86c:	0025883a 	mov	r18,zero
    e870:	01c00084 	movi	r7,2
    e874:	003fa506 	br	e70c <__alt_data_end+0xfffb8fdc>
    e878:	8984b03a 	or	r2,r17,r6
    e87c:	10002026 	beq	r2,zero,e900 <__muldf3+0x2bc>
    e880:	88011c26 	beq	r17,zero,ecf4 <__muldf3+0x6b0>
    e884:	8809883a 	mov	r4,r17
    e888:	d9400215 	stw	r5,8(sp)
    e88c:	d9800715 	stw	r6,28(sp)
    e890:	da400415 	stw	r9,16(sp)
    e894:	da800315 	stw	r10,12(sp)
    e898:	000f97c0 	call	f97c <__clzsi2>
    e89c:	d9400217 	ldw	r5,8(sp)
    e8a0:	d9800717 	ldw	r6,28(sp)
    e8a4:	da400417 	ldw	r9,16(sp)
    e8a8:	da800317 	ldw	r10,12(sp)
    e8ac:	1007883a 	mov	r3,r2
    e8b0:	01000a04 	movi	r4,40
    e8b4:	1cbffe04 	addi	r18,r3,-8
    e8b8:	20c9c83a 	sub	r4,r4,r3
    e8bc:	8ca2983a 	sll	r17,r17,r18
    e8c0:	3108d83a 	srl	r4,r6,r4
    e8c4:	34a4983a 	sll	r18,r6,r18
    e8c8:	2462b03a 	or	r17,r4,r17
    e8cc:	00bf0344 	movi	r2,-1011
    e8d0:	10c7c83a 	sub	r3,r2,r3
    e8d4:	000f883a 	mov	r7,zero
    e8d8:	003f8c06 	br	e70c <__alt_data_end+0xfffb8fdc>
    e8dc:	008000c4 	movi	r2,3
    e8e0:	e0816d26 	beq	fp,r2,ee98 <__muldf3+0x854>
    e8e4:	00800044 	movi	r2,1
    e8e8:	e081321e 	bne	fp,r2,edb4 <__muldf3+0x770>
    e8ec:	48a6703a 	and	r19,r9,r2
    e8f0:	0009883a 	mov	r4,zero
    e8f4:	0021883a 	mov	r16,zero
    e8f8:	002f883a 	mov	r23,zero
    e8fc:	003fab06 	br	e7ac <__alt_data_end+0xfffb907c>
    e900:	0023883a 	mov	r17,zero
    e904:	0025883a 	mov	r18,zero
    e908:	01c00044 	movi	r7,1
    e90c:	003f7f06 	br	e70c <__alt_data_end+0xfffb8fdc>
    e910:	01c000c4 	movi	r7,3
    e914:	003f7d06 	br	e70c <__alt_data_end+0xfffb8fdc>
    e918:	01400104 	movi	r5,4
    e91c:	0021883a 	mov	r16,zero
    e920:	002f883a 	mov	r23,zero
    e924:	07000044 	movi	fp,1
    e928:	003f6606 	br	e6c4 <__alt_data_end+0xfffb8f94>
    e92c:	01400304 	movi	r5,12
    e930:	070000c4 	movi	fp,3
    e934:	003f6306 	br	e6c4 <__alt_data_end+0xfffb8f94>
    e938:	04000434 	movhi	r16,16
    e93c:	0027883a 	mov	r19,zero
    e940:	843fffc4 	addi	r16,r16,-1
    e944:	05ffffc4 	movi	r23,-1
    e948:	0101ffc4 	movi	r4,2047
    e94c:	003f9706 	br	e7ac <__alt_data_end+0xfffb907c>
    e950:	8821883a 	mov	r16,r17
    e954:	902f883a 	mov	r23,r18
    e958:	5013883a 	mov	r9,r10
    e95c:	3839883a 	mov	fp,r7
    e960:	003f8c06 	br	e794 <__alt_data_end+0xfffb9064>
    e964:	8821883a 	mov	r16,r17
    e968:	902f883a 	mov	r23,r18
    e96c:	3013883a 	mov	r9,r6
    e970:	3839883a 	mov	fp,r7
    e974:	003f8706 	br	e794 <__alt_data_end+0xfffb9064>
    e978:	b82ad43a 	srli	r21,r23,16
    e97c:	9038d43a 	srli	fp,r18,16
    e980:	bdffffcc 	andi	r23,r23,65535
    e984:	94bfffcc 	andi	r18,r18,65535
    e988:	9009883a 	mov	r4,r18
    e98c:	b80b883a 	mov	r5,r23
    e990:	d8c00515 	stw	r3,20(sp)
    e994:	d9800715 	stw	r6,28(sp)
    e998:	da000615 	stw	r8,24(sp)
    e99c:	000d1bc0 	call	d1bc <__mulsi3>
    e9a0:	9009883a 	mov	r4,r18
    e9a4:	a80b883a 	mov	r5,r21
    e9a8:	1029883a 	mov	r20,r2
    e9ac:	000d1bc0 	call	d1bc <__mulsi3>
    e9b0:	e009883a 	mov	r4,fp
    e9b4:	a80b883a 	mov	r5,r21
    e9b8:	102d883a 	mov	r22,r2
    e9bc:	000d1bc0 	call	d1bc <__mulsi3>
    e9c0:	e009883a 	mov	r4,fp
    e9c4:	b80b883a 	mov	r5,r23
    e9c8:	1027883a 	mov	r19,r2
    e9cc:	000d1bc0 	call	d1bc <__mulsi3>
    e9d0:	a008d43a 	srli	r4,r20,16
    e9d4:	b085883a 	add	r2,r22,r2
    e9d8:	d8c00517 	ldw	r3,20(sp)
    e9dc:	110f883a 	add	r7,r2,r4
    e9e0:	d9800717 	ldw	r6,28(sp)
    e9e4:	da000617 	ldw	r8,24(sp)
    e9e8:	3d80022e 	bgeu	r7,r22,e9f4 <__muldf3+0x3b0>
    e9ec:	00800074 	movhi	r2,1
    e9f0:	98a7883a 	add	r19,r19,r2
    e9f4:	3804943a 	slli	r2,r7,16
    e9f8:	380ed43a 	srli	r7,r7,16
    e9fc:	882cd43a 	srli	r22,r17,16
    ea00:	a53fffcc 	andi	r20,r20,65535
    ea04:	8c7fffcc 	andi	r17,r17,65535
    ea08:	1529883a 	add	r20,r2,r20
    ea0c:	8809883a 	mov	r4,r17
    ea10:	b80b883a 	mov	r5,r23
    ea14:	d8c00515 	stw	r3,20(sp)
    ea18:	d9800715 	stw	r6,28(sp)
    ea1c:	da000615 	stw	r8,24(sp)
    ea20:	d9c00015 	stw	r7,0(sp)
    ea24:	dd000115 	stw	r20,4(sp)
    ea28:	000d1bc0 	call	d1bc <__mulsi3>
    ea2c:	a80b883a 	mov	r5,r21
    ea30:	8809883a 	mov	r4,r17
    ea34:	d8800415 	stw	r2,16(sp)
    ea38:	000d1bc0 	call	d1bc <__mulsi3>
    ea3c:	a80b883a 	mov	r5,r21
    ea40:	b009883a 	mov	r4,r22
    ea44:	1029883a 	mov	r20,r2
    ea48:	000d1bc0 	call	d1bc <__mulsi3>
    ea4c:	b009883a 	mov	r4,r22
    ea50:	b80b883a 	mov	r5,r23
    ea54:	102b883a 	mov	r21,r2
    ea58:	000d1bc0 	call	d1bc <__mulsi3>
    ea5c:	da400417 	ldw	r9,16(sp)
    ea60:	a085883a 	add	r2,r20,r2
    ea64:	d8c00517 	ldw	r3,20(sp)
    ea68:	4808d43a 	srli	r4,r9,16
    ea6c:	d9800717 	ldw	r6,28(sp)
    ea70:	da000617 	ldw	r8,24(sp)
    ea74:	1109883a 	add	r4,r2,r4
    ea78:	2500022e 	bgeu	r4,r20,ea84 <__muldf3+0x440>
    ea7c:	00800074 	movhi	r2,1
    ea80:	a8ab883a 	add	r21,r21,r2
    ea84:	200e943a 	slli	r7,r4,16
    ea88:	2004d43a 	srli	r2,r4,16
    ea8c:	802ed43a 	srli	r23,r16,16
    ea90:	843fffcc 	andi	r16,r16,65535
    ea94:	4d3fffcc 	andi	r20,r9,65535
    ea98:	9009883a 	mov	r4,r18
    ea9c:	800b883a 	mov	r5,r16
    eaa0:	3d29883a 	add	r20,r7,r20
    eaa4:	d8c00515 	stw	r3,20(sp)
    eaa8:	d9800715 	stw	r6,28(sp)
    eaac:	da000615 	stw	r8,24(sp)
    eab0:	a8ab883a 	add	r21,r21,r2
    eab4:	000d1bc0 	call	d1bc <__mulsi3>
    eab8:	9009883a 	mov	r4,r18
    eabc:	b80b883a 	mov	r5,r23
    eac0:	d8800315 	stw	r2,12(sp)
    eac4:	000d1bc0 	call	d1bc <__mulsi3>
    eac8:	e009883a 	mov	r4,fp
    eacc:	b80b883a 	mov	r5,r23
    ead0:	1025883a 	mov	r18,r2
    ead4:	000d1bc0 	call	d1bc <__mulsi3>
    ead8:	e009883a 	mov	r4,fp
    eadc:	800b883a 	mov	r5,r16
    eae0:	d8800215 	stw	r2,8(sp)
    eae4:	000d1bc0 	call	d1bc <__mulsi3>
    eae8:	da800317 	ldw	r10,12(sp)
    eaec:	d9400017 	ldw	r5,0(sp)
    eaf0:	9085883a 	add	r2,r18,r2
    eaf4:	5008d43a 	srli	r4,r10,16
    eaf8:	a153883a 	add	r9,r20,r5
    eafc:	d8c00517 	ldw	r3,20(sp)
    eb00:	1109883a 	add	r4,r2,r4
    eb04:	d9800717 	ldw	r6,28(sp)
    eb08:	da000617 	ldw	r8,24(sp)
    eb0c:	dac00217 	ldw	r11,8(sp)
    eb10:	2480022e 	bgeu	r4,r18,eb1c <__muldf3+0x4d8>
    eb14:	00800074 	movhi	r2,1
    eb18:	5897883a 	add	r11,r11,r2
    eb1c:	200e943a 	slli	r7,r4,16
    eb20:	2038d43a 	srli	fp,r4,16
    eb24:	52bfffcc 	andi	r10,r10,65535
    eb28:	3a8f883a 	add	r7,r7,r10
    eb2c:	8809883a 	mov	r4,r17
    eb30:	800b883a 	mov	r5,r16
    eb34:	d8c00515 	stw	r3,20(sp)
    eb38:	d9800715 	stw	r6,28(sp)
    eb3c:	d9c00215 	stw	r7,8(sp)
    eb40:	da000615 	stw	r8,24(sp)
    eb44:	da400415 	stw	r9,16(sp)
    eb48:	5f39883a 	add	fp,r11,fp
    eb4c:	000d1bc0 	call	d1bc <__mulsi3>
    eb50:	8809883a 	mov	r4,r17
    eb54:	b80b883a 	mov	r5,r23
    eb58:	1025883a 	mov	r18,r2
    eb5c:	000d1bc0 	call	d1bc <__mulsi3>
    eb60:	b009883a 	mov	r4,r22
    eb64:	b80b883a 	mov	r5,r23
    eb68:	d8800315 	stw	r2,12(sp)
    eb6c:	000d1bc0 	call	d1bc <__mulsi3>
    eb70:	b009883a 	mov	r4,r22
    eb74:	800b883a 	mov	r5,r16
    eb78:	1023883a 	mov	r17,r2
    eb7c:	000d1bc0 	call	d1bc <__mulsi3>
    eb80:	da800317 	ldw	r10,12(sp)
    eb84:	9008d43a 	srli	r4,r18,16
    eb88:	d8c00517 	ldw	r3,20(sp)
    eb8c:	5085883a 	add	r2,r10,r2
    eb90:	1109883a 	add	r4,r2,r4
    eb94:	d9800717 	ldw	r6,28(sp)
    eb98:	d9c00217 	ldw	r7,8(sp)
    eb9c:	da000617 	ldw	r8,24(sp)
    eba0:	da400417 	ldw	r9,16(sp)
    eba4:	2280022e 	bgeu	r4,r10,ebb0 <__muldf3+0x56c>
    eba8:	00800074 	movhi	r2,1
    ebac:	88a3883a 	add	r17,r17,r2
    ebb0:	2004943a 	slli	r2,r4,16
    ebb4:	94bfffcc 	andi	r18,r18,65535
    ebb8:	4ce7883a 	add	r19,r9,r19
    ebbc:	14a5883a 	add	r18,r2,r18
    ebc0:	9d29803a 	cmpltu	r20,r19,r20
    ebc4:	9565883a 	add	r18,r18,r21
    ebc8:	9505883a 	add	r2,r18,r20
    ebcc:	99e7883a 	add	r19,r19,r7
    ebd0:	99cf803a 	cmpltu	r7,r19,r7
    ebd4:	e08b883a 	add	r5,fp,r2
    ebd8:	2008d43a 	srli	r4,r4,16
    ebdc:	29ef883a 	add	r23,r5,r7
    ebe0:	1529803a 	cmpltu	r20,r2,r20
    ebe4:	956b803a 	cmpltu	r21,r18,r21
    ebe8:	b9cf803a 	cmpltu	r7,r23,r7
    ebec:	a564b03a 	or	r18,r20,r21
    ebf0:	2f39803a 	cmpltu	fp,r5,fp
    ebf4:	9125883a 	add	r18,r18,r4
    ebf8:	3f38b03a 	or	fp,r7,fp
    ebfc:	9725883a 	add	r18,r18,fp
    ec00:	9804927a 	slli	r2,r19,9
    ec04:	9463883a 	add	r17,r18,r17
    ec08:	d9000117 	ldw	r4,4(sp)
    ec0c:	b820d5fa 	srli	r16,r23,23
    ec10:	8822927a 	slli	r17,r17,9
    ec14:	9826d5fa 	srli	r19,r19,23
    ec18:	1104b03a 	or	r2,r2,r4
    ec1c:	b82e927a 	slli	r23,r23,9
    ec20:	1004c03a 	cmpne	r2,r2,zero
    ec24:	8c20b03a 	or	r16,r17,r16
    ec28:	14e6b03a 	or	r19,r2,r19
    ec2c:	8080402c 	andhi	r2,r16,256
    ec30:	9deeb03a 	or	r23,r19,r23
    ec34:	10000726 	beq	r2,zero,ec54 <__muldf3+0x610>
    ec38:	b804d07a 	srli	r2,r23,1
    ec3c:	800697fa 	slli	r3,r16,31
    ec40:	bdc0004c 	andi	r23,r23,1
    ec44:	8020d07a 	srli	r16,r16,1
    ec48:	b8aeb03a 	or	r23,r23,r2
    ec4c:	b8eeb03a 	or	r23,r23,r3
    ec50:	4007883a 	mov	r3,r8
    ec54:	1900ffc4 	addi	r4,r3,1023
    ec58:	01004d0e 	bge	zero,r4,ed90 <__muldf3+0x74c>
    ec5c:	b88001cc 	andi	r2,r23,7
    ec60:	10000726 	beq	r2,zero,ec80 <__muldf3+0x63c>
    ec64:	b94003cc 	andi	r5,r23,15
    ec68:	00800104 	movi	r2,4
    ec6c:	28800426 	beq	r5,r2,ec80 <__muldf3+0x63c>
    ec70:	b885883a 	add	r2,r23,r2
    ec74:	15ef803a 	cmpltu	r23,r2,r23
    ec78:	85e1883a 	add	r16,r16,r23
    ec7c:	102f883a 	mov	r23,r2
    ec80:	8080402c 	andhi	r2,r16,256
    ec84:	10000426 	beq	r2,zero,ec98 <__muldf3+0x654>
    ec88:	00bfc034 	movhi	r2,65280
    ec8c:	10bfffc4 	addi	r2,r2,-1
    ec90:	19010004 	addi	r4,r3,1024
    ec94:	80a0703a 	and	r16,r16,r2
    ec98:	0081ff84 	movi	r2,2046
    ec9c:	1100340e 	bge	r2,r4,ed70 <__muldf3+0x72c>
    eca0:	34c0004c 	andi	r19,r6,1
    eca4:	0101ffc4 	movi	r4,2047
    eca8:	0021883a 	mov	r16,zero
    ecac:	002f883a 	mov	r23,zero
    ecb0:	003ebe06 	br	e7ac <__alt_data_end+0xfffb907c>
    ecb4:	8080022c 	andhi	r2,r16,8
    ecb8:	10000926 	beq	r2,zero,ece0 <__muldf3+0x69c>
    ecbc:	8880022c 	andhi	r2,r17,8
    ecc0:	1000071e 	bne	r2,zero,ece0 <__muldf3+0x69c>
    ecc4:	00800434 	movhi	r2,16
    ecc8:	8c000234 	orhi	r16,r17,8
    eccc:	10bfffc4 	addi	r2,r2,-1
    ecd0:	b027883a 	mov	r19,r22
    ecd4:	80a0703a 	and	r16,r16,r2
    ecd8:	902f883a 	mov	r23,r18
    ecdc:	003f1a06 	br	e948 <__alt_data_end+0xfffb9218>
    ece0:	00800434 	movhi	r2,16
    ece4:	84000234 	orhi	r16,r16,8
    ece8:	10bfffc4 	addi	r2,r2,-1
    ecec:	80a0703a 	and	r16,r16,r2
    ecf0:	003f1506 	br	e948 <__alt_data_end+0xfffb9218>
    ecf4:	3009883a 	mov	r4,r6
    ecf8:	d9400215 	stw	r5,8(sp)
    ecfc:	d9800715 	stw	r6,28(sp)
    ed00:	da400415 	stw	r9,16(sp)
    ed04:	da800315 	stw	r10,12(sp)
    ed08:	000f97c0 	call	f97c <__clzsi2>
    ed0c:	10c00804 	addi	r3,r2,32
    ed10:	010009c4 	movi	r4,39
    ed14:	d9400217 	ldw	r5,8(sp)
    ed18:	d9800717 	ldw	r6,28(sp)
    ed1c:	da400417 	ldw	r9,16(sp)
    ed20:	da800317 	ldw	r10,12(sp)
    ed24:	20fee20e 	bge	r4,r3,e8b0 <__alt_data_end+0xfffb9180>
    ed28:	147ffe04 	addi	r17,r2,-8
    ed2c:	9462983a 	sll	r17,r18,r17
    ed30:	0025883a 	mov	r18,zero
    ed34:	003ee506 	br	e8cc <__alt_data_end+0xfffb919c>
    ed38:	d9800715 	stw	r6,28(sp)
    ed3c:	d9c00215 	stw	r7,8(sp)
    ed40:	da400415 	stw	r9,16(sp)
    ed44:	000f97c0 	call	f97c <__clzsi2>
    ed48:	10c00804 	addi	r3,r2,32
    ed4c:	010009c4 	movi	r4,39
    ed50:	d9800717 	ldw	r6,28(sp)
    ed54:	d9c00217 	ldw	r7,8(sp)
    ed58:	da400417 	ldw	r9,16(sp)
    ed5c:	20feb40e 	bge	r4,r3,e830 <__alt_data_end+0xfffb9100>
    ed60:	143ffe04 	addi	r16,r2,-8
    ed64:	9420983a 	sll	r16,r18,r16
    ed68:	002f883a 	mov	r23,zero
    ed6c:	003eb706 	br	e84c <__alt_data_end+0xfffb911c>
    ed70:	8004977a 	slli	r2,r16,29
    ed74:	b82ed0fa 	srli	r23,r23,3
    ed78:	8020927a 	slli	r16,r16,9
    ed7c:	2101ffcc 	andi	r4,r4,2047
    ed80:	15eeb03a 	or	r23,r2,r23
    ed84:	8020d33a 	srli	r16,r16,12
    ed88:	34c0004c 	andi	r19,r6,1
    ed8c:	003e8706 	br	e7ac <__alt_data_end+0xfffb907c>
    ed90:	00bf0084 	movi	r2,-1022
    ed94:	10c5c83a 	sub	r2,r2,r3
    ed98:	01000e04 	movi	r4,56
    ed9c:	2080080e 	bge	r4,r2,edc0 <__muldf3+0x77c>
    eda0:	34c0004c 	andi	r19,r6,1
    eda4:	0009883a 	mov	r4,zero
    eda8:	0021883a 	mov	r16,zero
    edac:	002f883a 	mov	r23,zero
    edb0:	003e7e06 	br	e7ac <__alt_data_end+0xfffb907c>
    edb4:	4007883a 	mov	r3,r8
    edb8:	480d883a 	mov	r6,r9
    edbc:	003fa506 	br	ec54 <__alt_data_end+0xfffb9524>
    edc0:	010007c4 	movi	r4,31
    edc4:	20801816 	blt	r4,r2,ee28 <__muldf3+0x7e4>
    edc8:	18c10784 	addi	r3,r3,1054
    edcc:	80c8983a 	sll	r4,r16,r3
    edd0:	b88ad83a 	srl	r5,r23,r2
    edd4:	b8c6983a 	sll	r3,r23,r3
    edd8:	80a0d83a 	srl	r16,r16,r2
    eddc:	2908b03a 	or	r4,r5,r4
    ede0:	1804c03a 	cmpne	r2,r3,zero
    ede4:	2088b03a 	or	r4,r4,r2
    ede8:	208001cc 	andi	r2,r4,7
    edec:	10000726 	beq	r2,zero,ee0c <__muldf3+0x7c8>
    edf0:	20c003cc 	andi	r3,r4,15
    edf4:	00800104 	movi	r2,4
    edf8:	18800426 	beq	r3,r2,ee0c <__muldf3+0x7c8>
    edfc:	20c00104 	addi	r3,r4,4
    ee00:	1905803a 	cmpltu	r2,r3,r4
    ee04:	80a1883a 	add	r16,r16,r2
    ee08:	1809883a 	mov	r4,r3
    ee0c:	8080202c 	andhi	r2,r16,128
    ee10:	10001b26 	beq	r2,zero,ee80 <__muldf3+0x83c>
    ee14:	34c0004c 	andi	r19,r6,1
    ee18:	01000044 	movi	r4,1
    ee1c:	0021883a 	mov	r16,zero
    ee20:	002f883a 	mov	r23,zero
    ee24:	003e6106 	br	e7ac <__alt_data_end+0xfffb907c>
    ee28:	013ef884 	movi	r4,-1054
    ee2c:	20c9c83a 	sub	r4,r4,r3
    ee30:	01400804 	movi	r5,32
    ee34:	8108d83a 	srl	r4,r16,r4
    ee38:	11401526 	beq	r2,r5,ee90 <__muldf3+0x84c>
    ee3c:	18c10f84 	addi	r3,r3,1086
    ee40:	80e0983a 	sll	r16,r16,r3
    ee44:	85eeb03a 	or	r23,r16,r23
    ee48:	b804c03a 	cmpne	r2,r23,zero
    ee4c:	1108b03a 	or	r4,r2,r4
    ee50:	20c001cc 	andi	r3,r4,7
    ee54:	1800061e 	bne	r3,zero,ee70 <__muldf3+0x82c>
    ee58:	0021883a 	mov	r16,zero
    ee5c:	202ed0fa 	srli	r23,r4,3
    ee60:	34c0004c 	andi	r19,r6,1
    ee64:	0009883a 	mov	r4,zero
    ee68:	b8eeb03a 	or	r23,r23,r3
    ee6c:	003e4f06 	br	e7ac <__alt_data_end+0xfffb907c>
    ee70:	20c003cc 	andi	r3,r4,15
    ee74:	00800104 	movi	r2,4
    ee78:	0021883a 	mov	r16,zero
    ee7c:	18bfdf1e 	bne	r3,r2,edfc <__alt_data_end+0xfffb96cc>
    ee80:	8004927a 	slli	r2,r16,9
    ee84:	8006977a 	slli	r3,r16,29
    ee88:	1020d33a 	srli	r16,r2,12
    ee8c:	003ff306 	br	ee5c <__alt_data_end+0xfffb972c>
    ee90:	0021883a 	mov	r16,zero
    ee94:	003feb06 	br	ee44 <__alt_data_end+0xfffb9714>
    ee98:	00800434 	movhi	r2,16
    ee9c:	84000234 	orhi	r16,r16,8
    eea0:	10bfffc4 	addi	r2,r2,-1
    eea4:	4cc0004c 	andi	r19,r9,1
    eea8:	80a0703a 	and	r16,r16,r2
    eeac:	003ea606 	br	e948 <__alt_data_end+0xfffb9218>

0000eeb0 <__subdf3>:
    eeb0:	00c00434 	movhi	r3,16
    eeb4:	18ffffc4 	addi	r3,r3,-1
    eeb8:	defffb04 	addi	sp,sp,-20
    eebc:	28d2703a 	and	r9,r5,r3
    eec0:	3814d53a 	srli	r10,r7,20
    eec4:	38c6703a 	and	r3,r7,r3
    eec8:	3004d77a 	srli	r2,r6,29
    eecc:	dc800215 	stw	r18,8(sp)
    eed0:	dc000015 	stw	r16,0(sp)
    eed4:	2824d7fa 	srli	r18,r5,31
    eed8:	2820d53a 	srli	r16,r5,20
    eedc:	481290fa 	slli	r9,r9,3
    eee0:	200ad77a 	srli	r5,r4,29
    eee4:	180690fa 	slli	r3,r3,3
    eee8:	dc400115 	stw	r17,4(sp)
    eeec:	dfc00415 	stw	ra,16(sp)
    eef0:	202290fa 	slli	r17,r4,3
    eef4:	dcc00315 	stw	r19,12(sp)
    eef8:	5281ffcc 	andi	r10,r10,2047
    eefc:	0101ffc4 	movi	r4,2047
    ef00:	9011883a 	mov	r8,r18
    ef04:	8401ffcc 	andi	r16,r16,2047
    ef08:	94803fcc 	andi	r18,r18,255
    ef0c:	494ab03a 	or	r5,r9,r5
    ef10:	380ed7fa 	srli	r7,r7,31
    ef14:	1886b03a 	or	r3,r3,r2
    ef18:	300c90fa 	slli	r6,r6,3
    ef1c:	51009026 	beq	r10,r4,f160 <__subdf3+0x2b0>
    ef20:	39c0005c 	xori	r7,r7,1
    ef24:	8285c83a 	sub	r2,r16,r10
    ef28:	91c06f26 	beq	r18,r7,f0e8 <__subdf3+0x238>
    ef2c:	0080b10e 	bge	zero,r2,f1f4 <__subdf3+0x344>
    ef30:	50002a1e 	bne	r10,zero,efdc <__subdf3+0x12c>
    ef34:	1988b03a 	or	r4,r3,r6
    ef38:	2000941e 	bne	r4,zero,f18c <__subdf3+0x2dc>
    ef3c:	888001cc 	andi	r2,r17,7
    ef40:	10005b26 	beq	r2,zero,f0b0 <__subdf3+0x200>
    ef44:	88c003cc 	andi	r3,r17,15
    ef48:	00800104 	movi	r2,4
    ef4c:	18805826 	beq	r3,r2,f0b0 <__subdf3+0x200>
    ef50:	88c00104 	addi	r3,r17,4
    ef54:	1c63803a 	cmpltu	r17,r3,r17
    ef58:	2c4b883a 	add	r5,r5,r17
    ef5c:	2880202c 	andhi	r2,r5,128
    ef60:	9200004c 	andi	r8,r18,1
    ef64:	1823883a 	mov	r17,r3
    ef68:	10005426 	beq	r2,zero,f0bc <__subdf3+0x20c>
    ef6c:	84000044 	addi	r16,r16,1
    ef70:	0081ffc4 	movi	r2,2047
    ef74:	8080bf26 	beq	r16,r2,f274 <__subdf3+0x3c4>
    ef78:	013fe034 	movhi	r4,65408
    ef7c:	213fffc4 	addi	r4,r4,-1
    ef80:	290a703a 	and	r5,r5,r4
    ef84:	2804977a 	slli	r2,r5,29
    ef88:	280a927a 	slli	r5,r5,9
    ef8c:	8822d0fa 	srli	r17,r17,3
    ef90:	8401ffcc 	andi	r16,r16,2047
    ef94:	2808d33a 	srli	r4,r5,12
    ef98:	1444b03a 	or	r2,r2,r17
    ef9c:	8401ffcc 	andi	r16,r16,2047
    efa0:	800a953a 	slli	r5,r16,20
    efa4:	40c03fcc 	andi	r3,r8,255
    efa8:	04000434 	movhi	r16,16
    efac:	180697fa 	slli	r3,r3,31
    efb0:	843fffc4 	addi	r16,r16,-1
    efb4:	2420703a 	and	r16,r4,r16
    efb8:	8160b03a 	or	r16,r16,r5
    efbc:	80c6b03a 	or	r3,r16,r3
    efc0:	dfc00417 	ldw	ra,16(sp)
    efc4:	dcc00317 	ldw	r19,12(sp)
    efc8:	dc800217 	ldw	r18,8(sp)
    efcc:	dc400117 	ldw	r17,4(sp)
    efd0:	dc000017 	ldw	r16,0(sp)
    efd4:	dec00504 	addi	sp,sp,20
    efd8:	f800283a 	ret
    efdc:	0101ffc4 	movi	r4,2047
    efe0:	813fd626 	beq	r16,r4,ef3c <__alt_data_end+0xfffb980c>
    efe4:	18c02034 	orhi	r3,r3,128
    efe8:	01000e04 	movi	r4,56
    efec:	2080a416 	blt	r4,r2,f280 <__subdf3+0x3d0>
    eff0:	010007c4 	movi	r4,31
    eff4:	2080c716 	blt	r4,r2,f314 <__subdf3+0x464>
    eff8:	01000804 	movi	r4,32
    effc:	2089c83a 	sub	r4,r4,r2
    f000:	1910983a 	sll	r8,r3,r4
    f004:	308ed83a 	srl	r7,r6,r2
    f008:	3108983a 	sll	r4,r6,r4
    f00c:	1884d83a 	srl	r2,r3,r2
    f010:	41ccb03a 	or	r6,r8,r7
    f014:	2008c03a 	cmpne	r4,r4,zero
    f018:	310cb03a 	or	r6,r6,r4
    f01c:	898dc83a 	sub	r6,r17,r6
    f020:	89a3803a 	cmpltu	r17,r17,r6
    f024:	288bc83a 	sub	r5,r5,r2
    f028:	2c4bc83a 	sub	r5,r5,r17
    f02c:	3023883a 	mov	r17,r6
    f030:	2880202c 	andhi	r2,r5,128
    f034:	10006b26 	beq	r2,zero,f1e4 <__subdf3+0x334>
    f038:	04c02034 	movhi	r19,128
    f03c:	9cffffc4 	addi	r19,r19,-1
    f040:	2ce6703a 	and	r19,r5,r19
    f044:	98007c26 	beq	r19,zero,f238 <__subdf3+0x388>
    f048:	9809883a 	mov	r4,r19
    f04c:	000f97c0 	call	f97c <__clzsi2>
    f050:	10fffe04 	addi	r3,r2,-8
    f054:	010007c4 	movi	r4,31
    f058:	20c07d16 	blt	r4,r3,f250 <__subdf3+0x3a0>
    f05c:	01400a04 	movi	r5,40
    f060:	2885c83a 	sub	r2,r5,r2
    f064:	888ad83a 	srl	r5,r17,r2
    f068:	98e6983a 	sll	r19,r19,r3
    f06c:	88e2983a 	sll	r17,r17,r3
    f070:	2ce6b03a 	or	r19,r5,r19
    f074:	1c007a16 	blt	r3,r16,f260 <__subdf3+0x3b0>
    f078:	1c21c83a 	sub	r16,r3,r16
    f07c:	81400044 	addi	r5,r16,1
    f080:	00c007c4 	movi	r3,31
    f084:	19409616 	blt	r3,r5,f2e0 <__subdf3+0x430>
    f088:	1c21c83a 	sub	r16,r3,r16
    f08c:	8c08983a 	sll	r4,r17,r16
    f090:	8946d83a 	srl	r3,r17,r5
    f094:	9c20983a 	sll	r16,r19,r16
    f098:	2008c03a 	cmpne	r4,r4,zero
    f09c:	994ad83a 	srl	r5,r19,r5
    f0a0:	1c06b03a 	or	r3,r3,r16
    f0a4:	1922b03a 	or	r17,r3,r4
    f0a8:	0021883a 	mov	r16,zero
    f0ac:	003fa306 	br	ef3c <__alt_data_end+0xfffb980c>
    f0b0:	2880202c 	andhi	r2,r5,128
    f0b4:	9200004c 	andi	r8,r18,1
    f0b8:	103fac1e 	bne	r2,zero,ef6c <__alt_data_end+0xfffb983c>
    f0bc:	2804977a 	slli	r2,r5,29
    f0c0:	8822d0fa 	srli	r17,r17,3
    f0c4:	00c1ffc4 	movi	r3,2047
    f0c8:	280ad0fa 	srli	r5,r5,3
    f0cc:	1444b03a 	or	r2,r2,r17
    f0d0:	80c02726 	beq	r16,r3,f170 <__subdf3+0x2c0>
    f0d4:	01000434 	movhi	r4,16
    f0d8:	213fffc4 	addi	r4,r4,-1
    f0dc:	80e0703a 	and	r16,r16,r3
    f0e0:	2908703a 	and	r4,r5,r4
    f0e4:	003fad06 	br	ef9c <__alt_data_end+0xfffb986c>
    f0e8:	0080690e 	bge	zero,r2,f290 <__subdf3+0x3e0>
    f0ec:	50002f26 	beq	r10,zero,f1ac <__subdf3+0x2fc>
    f0f0:	0101ffc4 	movi	r4,2047
    f0f4:	813f9126 	beq	r16,r4,ef3c <__alt_data_end+0xfffb980c>
    f0f8:	18c02034 	orhi	r3,r3,128
    f0fc:	01000e04 	movi	r4,56
    f100:	2080b00e 	bge	r4,r2,f3c4 <__subdf3+0x514>
    f104:	198cb03a 	or	r6,r3,r6
    f108:	300ec03a 	cmpne	r7,r6,zero
    f10c:	0005883a 	mov	r2,zero
    f110:	3c4f883a 	add	r7,r7,r17
    f114:	3c63803a 	cmpltu	r17,r7,r17
    f118:	114b883a 	add	r5,r2,r5
    f11c:	2c4b883a 	add	r5,r5,r17
    f120:	3823883a 	mov	r17,r7
    f124:	2880202c 	andhi	r2,r5,128
    f128:	10002e26 	beq	r2,zero,f1e4 <__subdf3+0x334>
    f12c:	84000044 	addi	r16,r16,1
    f130:	0081ffc4 	movi	r2,2047
    f134:	8080de26 	beq	r16,r2,f4b0 <__subdf3+0x600>
    f138:	00bfe034 	movhi	r2,65408
    f13c:	10bfffc4 	addi	r2,r2,-1
    f140:	288a703a 	and	r5,r5,r2
    f144:	880cd07a 	srli	r6,r17,1
    f148:	280897fa 	slli	r4,r5,31
    f14c:	88c0004c 	andi	r3,r17,1
    f150:	30e2b03a 	or	r17,r6,r3
    f154:	280ad07a 	srli	r5,r5,1
    f158:	8922b03a 	or	r17,r17,r4
    f15c:	003f7706 	br	ef3c <__alt_data_end+0xfffb980c>
    f160:	1984b03a 	or	r2,r3,r6
    f164:	103f6e26 	beq	r2,zero,ef20 <__alt_data_end+0xfffb97f0>
    f168:	39c03fcc 	andi	r7,r7,255
    f16c:	003f6d06 	br	ef24 <__alt_data_end+0xfffb97f4>
    f170:	1146b03a 	or	r3,r2,r5
    f174:	18003f26 	beq	r3,zero,f274 <__subdf3+0x3c4>
    f178:	00c00434 	movhi	r3,16
    f17c:	29000234 	orhi	r4,r5,8
    f180:	18ffffc4 	addi	r3,r3,-1
    f184:	20c8703a 	and	r4,r4,r3
    f188:	003f8406 	br	ef9c <__alt_data_end+0xfffb986c>
    f18c:	10bfffc4 	addi	r2,r2,-1
    f190:	1000501e 	bne	r2,zero,f2d4 <__subdf3+0x424>
    f194:	898fc83a 	sub	r7,r17,r6
    f198:	89e3803a 	cmpltu	r17,r17,r7
    f19c:	28cbc83a 	sub	r5,r5,r3
    f1a0:	2c4bc83a 	sub	r5,r5,r17
    f1a4:	3823883a 	mov	r17,r7
    f1a8:	003fa106 	br	f030 <__alt_data_end+0xfffb9900>
    f1ac:	1988b03a 	or	r4,r3,r6
    f1b0:	203f6226 	beq	r4,zero,ef3c <__alt_data_end+0xfffb980c>
    f1b4:	10bfffc4 	addi	r2,r2,-1
    f1b8:	10009b1e 	bne	r2,zero,f428 <__subdf3+0x578>
    f1bc:	344d883a 	add	r6,r6,r17
    f1c0:	3463803a 	cmpltu	r17,r6,r17
    f1c4:	194b883a 	add	r5,r3,r5
    f1c8:	2c4b883a 	add	r5,r5,r17
    f1cc:	3023883a 	mov	r17,r6
    f1d0:	003fd406 	br	f124 <__alt_data_end+0xfffb99f4>
    f1d4:	1106b03a 	or	r3,r2,r4
    f1d8:	1800b426 	beq	r3,zero,f4ac <__subdf3+0x5fc>
    f1dc:	100b883a 	mov	r5,r2
    f1e0:	2023883a 	mov	r17,r4
    f1e4:	888001cc 	andi	r2,r17,7
    f1e8:	103f561e 	bne	r2,zero,ef44 <__alt_data_end+0xfffb9814>
    f1ec:	9200004c 	andi	r8,r18,1
    f1f0:	003fb206 	br	f0bc <__alt_data_end+0xfffb998c>
    f1f4:	1000531e 	bne	r2,zero,f344 <__subdf3+0x494>
    f1f8:	80800044 	addi	r2,r16,1
    f1fc:	1081ffcc 	andi	r2,r2,2047
    f200:	01000044 	movi	r4,1
    f204:	2080a00e 	bge	r4,r2,f488 <__subdf3+0x5d8>
    f208:	8985c83a 	sub	r2,r17,r6
    f20c:	8889803a 	cmpltu	r4,r17,r2
    f210:	28e7c83a 	sub	r19,r5,r3
    f214:	9927c83a 	sub	r19,r19,r4
    f218:	9900202c 	andhi	r4,r19,128
    f21c:	20006226 	beq	r4,zero,f3a8 <__subdf3+0x4f8>
    f220:	3463c83a 	sub	r17,r6,r17
    f224:	194bc83a 	sub	r5,r3,r5
    f228:	344d803a 	cmpltu	r6,r6,r17
    f22c:	29a7c83a 	sub	r19,r5,r6
    f230:	3825883a 	mov	r18,r7
    f234:	983f841e 	bne	r19,zero,f048 <__alt_data_end+0xfffb9918>
    f238:	8809883a 	mov	r4,r17
    f23c:	000f97c0 	call	f97c <__clzsi2>
    f240:	10800804 	addi	r2,r2,32
    f244:	10fffe04 	addi	r3,r2,-8
    f248:	010007c4 	movi	r4,31
    f24c:	20ff830e 	bge	r4,r3,f05c <__alt_data_end+0xfffb992c>
    f250:	14fff604 	addi	r19,r2,-40
    f254:	8ce6983a 	sll	r19,r17,r19
    f258:	0023883a 	mov	r17,zero
    f25c:	1c3f860e 	bge	r3,r16,f078 <__alt_data_end+0xfffb9948>
    f260:	017fe034 	movhi	r5,65408
    f264:	297fffc4 	addi	r5,r5,-1
    f268:	80e1c83a 	sub	r16,r16,r3
    f26c:	994a703a 	and	r5,r19,r5
    f270:	003f3206 	br	ef3c <__alt_data_end+0xfffb980c>
    f274:	0009883a 	mov	r4,zero
    f278:	0005883a 	mov	r2,zero
    f27c:	003f4706 	br	ef9c <__alt_data_end+0xfffb986c>
    f280:	198cb03a 	or	r6,r3,r6
    f284:	300cc03a 	cmpne	r6,r6,zero
    f288:	0005883a 	mov	r2,zero
    f28c:	003f6306 	br	f01c <__alt_data_end+0xfffb98ec>
    f290:	10009d1e 	bne	r2,zero,f508 <__subdf3+0x658>
    f294:	81c00044 	addi	r7,r16,1
    f298:	3881ffcc 	andi	r2,r7,2047
    f29c:	02400044 	movi	r9,1
    f2a0:	4880680e 	bge	r9,r2,f444 <__subdf3+0x594>
    f2a4:	0081ffc4 	movi	r2,2047
    f2a8:	3880ae26 	beq	r7,r2,f564 <__subdf3+0x6b4>
    f2ac:	344d883a 	add	r6,r6,r17
    f2b0:	3463803a 	cmpltu	r17,r6,r17
    f2b4:	194b883a 	add	r5,r3,r5
    f2b8:	2c4b883a 	add	r5,r5,r17
    f2bc:	282297fa 	slli	r17,r5,31
    f2c0:	300cd07a 	srli	r6,r6,1
    f2c4:	280ad07a 	srli	r5,r5,1
    f2c8:	3821883a 	mov	r16,r7
    f2cc:	89a2b03a 	or	r17,r17,r6
    f2d0:	003f1a06 	br	ef3c <__alt_data_end+0xfffb980c>
    f2d4:	0101ffc4 	movi	r4,2047
    f2d8:	813f431e 	bne	r16,r4,efe8 <__alt_data_end+0xfffb98b8>
    f2dc:	003f1706 	br	ef3c <__alt_data_end+0xfffb980c>
    f2e0:	80bff844 	addi	r2,r16,-31
    f2e4:	00c00804 	movi	r3,32
    f2e8:	9884d83a 	srl	r2,r19,r2
    f2ec:	28c05126 	beq	r5,r3,f434 <__subdf3+0x584>
    f2f0:	00c00fc4 	movi	r3,63
    f2f4:	1c21c83a 	sub	r16,r3,r16
    f2f8:	9c26983a 	sll	r19,r19,r16
    f2fc:	9c62b03a 	or	r17,r19,r17
    f300:	8822c03a 	cmpne	r17,r17,zero
    f304:	88a2b03a 	or	r17,r17,r2
    f308:	000b883a 	mov	r5,zero
    f30c:	0021883a 	mov	r16,zero
    f310:	003fb406 	br	f1e4 <__alt_data_end+0xfffb9ab4>
    f314:	113ff804 	addi	r4,r2,-32
    f318:	01c00804 	movi	r7,32
    f31c:	1908d83a 	srl	r4,r3,r4
    f320:	11c04626 	beq	r2,r7,f43c <__subdf3+0x58c>
    f324:	01c01004 	movi	r7,64
    f328:	3885c83a 	sub	r2,r7,r2
    f32c:	1884983a 	sll	r2,r3,r2
    f330:	118cb03a 	or	r6,r2,r6
    f334:	300cc03a 	cmpne	r6,r6,zero
    f338:	310cb03a 	or	r6,r6,r4
    f33c:	0005883a 	mov	r2,zero
    f340:	003f3606 	br	f01c <__alt_data_end+0xfffb98ec>
    f344:	80002b26 	beq	r16,zero,f3f4 <__subdf3+0x544>
    f348:	0101ffc4 	movi	r4,2047
    f34c:	51006926 	beq	r10,r4,f4f4 <__subdf3+0x644>
    f350:	0085c83a 	sub	r2,zero,r2
    f354:	29402034 	orhi	r5,r5,128
    f358:	01000e04 	movi	r4,56
    f35c:	20807d16 	blt	r4,r2,f554 <__subdf3+0x6a4>
    f360:	010007c4 	movi	r4,31
    f364:	2080d916 	blt	r4,r2,f6cc <__subdf3+0x81c>
    f368:	01000804 	movi	r4,32
    f36c:	2089c83a 	sub	r4,r4,r2
    f370:	2912983a 	sll	r9,r5,r4
    f374:	8890d83a 	srl	r8,r17,r2
    f378:	8908983a 	sll	r4,r17,r4
    f37c:	2884d83a 	srl	r2,r5,r2
    f380:	4a22b03a 	or	r17,r9,r8
    f384:	2008c03a 	cmpne	r4,r4,zero
    f388:	8922b03a 	or	r17,r17,r4
    f38c:	3463c83a 	sub	r17,r6,r17
    f390:	1885c83a 	sub	r2,r3,r2
    f394:	344d803a 	cmpltu	r6,r6,r17
    f398:	118bc83a 	sub	r5,r2,r6
    f39c:	5021883a 	mov	r16,r10
    f3a0:	3825883a 	mov	r18,r7
    f3a4:	003f2206 	br	f030 <__alt_data_end+0xfffb9900>
    f3a8:	9886b03a 	or	r3,r19,r2
    f3ac:	18001c1e 	bne	r3,zero,f420 <__subdf3+0x570>
    f3b0:	0011883a 	mov	r8,zero
    f3b4:	000b883a 	mov	r5,zero
    f3b8:	0023883a 	mov	r17,zero
    f3bc:	0021883a 	mov	r16,zero
    f3c0:	003f3e06 	br	f0bc <__alt_data_end+0xfffb998c>
    f3c4:	010007c4 	movi	r4,31
    f3c8:	20803c16 	blt	r4,r2,f4bc <__subdf3+0x60c>
    f3cc:	01000804 	movi	r4,32
    f3d0:	2089c83a 	sub	r4,r4,r2
    f3d4:	1912983a 	sll	r9,r3,r4
    f3d8:	308ed83a 	srl	r7,r6,r2
    f3dc:	3108983a 	sll	r4,r6,r4
    f3e0:	1884d83a 	srl	r2,r3,r2
    f3e4:	49ceb03a 	or	r7,r9,r7
    f3e8:	2008c03a 	cmpne	r4,r4,zero
    f3ec:	390eb03a 	or	r7,r7,r4
    f3f0:	003f4706 	br	f110 <__alt_data_end+0xfffb99e0>
    f3f4:	2c48b03a 	or	r4,r5,r17
    f3f8:	20003e26 	beq	r4,zero,f4f4 <__subdf3+0x644>
    f3fc:	0084303a 	nor	r2,zero,r2
    f400:	10003a1e 	bne	r2,zero,f4ec <__subdf3+0x63c>
    f404:	3463c83a 	sub	r17,r6,r17
    f408:	194bc83a 	sub	r5,r3,r5
    f40c:	344d803a 	cmpltu	r6,r6,r17
    f410:	298bc83a 	sub	r5,r5,r6
    f414:	5021883a 	mov	r16,r10
    f418:	3825883a 	mov	r18,r7
    f41c:	003f0406 	br	f030 <__alt_data_end+0xfffb9900>
    f420:	1023883a 	mov	r17,r2
    f424:	003f0706 	br	f044 <__alt_data_end+0xfffb9914>
    f428:	0101ffc4 	movi	r4,2047
    f42c:	813f331e 	bne	r16,r4,f0fc <__alt_data_end+0xfffb99cc>
    f430:	003ec206 	br	ef3c <__alt_data_end+0xfffb980c>
    f434:	0027883a 	mov	r19,zero
    f438:	003fb006 	br	f2fc <__alt_data_end+0xfffb9bcc>
    f43c:	0005883a 	mov	r2,zero
    f440:	003fbb06 	br	f330 <__alt_data_end+0xfffb9c00>
    f444:	2c44b03a 	or	r2,r5,r17
    f448:	80008b1e 	bne	r16,zero,f678 <__subdf3+0x7c8>
    f44c:	1000b526 	beq	r2,zero,f724 <__subdf3+0x874>
    f450:	1984b03a 	or	r2,r3,r6
    f454:	103eb926 	beq	r2,zero,ef3c <__alt_data_end+0xfffb980c>
    f458:	3449883a 	add	r4,r6,r17
    f45c:	2463803a 	cmpltu	r17,r4,r17
    f460:	194b883a 	add	r5,r3,r5
    f464:	2c4b883a 	add	r5,r5,r17
    f468:	2880202c 	andhi	r2,r5,128
    f46c:	2023883a 	mov	r17,r4
    f470:	103f5c26 	beq	r2,zero,f1e4 <__alt_data_end+0xfffb9ab4>
    f474:	00bfe034 	movhi	r2,65408
    f478:	10bfffc4 	addi	r2,r2,-1
    f47c:	4821883a 	mov	r16,r9
    f480:	288a703a 	and	r5,r5,r2
    f484:	003ead06 	br	ef3c <__alt_data_end+0xfffb980c>
    f488:	2c44b03a 	or	r2,r5,r17
    f48c:	8000291e 	bne	r16,zero,f534 <__subdf3+0x684>
    f490:	10004f1e 	bne	r2,zero,f5d0 <__subdf3+0x720>
    f494:	1984b03a 	or	r2,r3,r6
    f498:	10000426 	beq	r2,zero,f4ac <__subdf3+0x5fc>
    f49c:	180b883a 	mov	r5,r3
    f4a0:	3023883a 	mov	r17,r6
    f4a4:	3825883a 	mov	r18,r7
    f4a8:	003ea406 	br	ef3c <__alt_data_end+0xfffb980c>
    f4ac:	0011883a 	mov	r8,zero
    f4b0:	000b883a 	mov	r5,zero
    f4b4:	0023883a 	mov	r17,zero
    f4b8:	003f0006 	br	f0bc <__alt_data_end+0xfffb998c>
    f4bc:	11fff804 	addi	r7,r2,-32
    f4c0:	19c8d83a 	srl	r4,r3,r7
    f4c4:	01c00804 	movi	r7,32
    f4c8:	11c07e26 	beq	r2,r7,f6c4 <__subdf3+0x814>
    f4cc:	01c01004 	movi	r7,64
    f4d0:	3885c83a 	sub	r2,r7,r2
    f4d4:	1884983a 	sll	r2,r3,r2
    f4d8:	118cb03a 	or	r6,r2,r6
    f4dc:	300ec03a 	cmpne	r7,r6,zero
    f4e0:	390eb03a 	or	r7,r7,r4
    f4e4:	0005883a 	mov	r2,zero
    f4e8:	003f0906 	br	f110 <__alt_data_end+0xfffb99e0>
    f4ec:	0101ffc4 	movi	r4,2047
    f4f0:	513f991e 	bne	r10,r4,f358 <__alt_data_end+0xfffb9c28>
    f4f4:	180b883a 	mov	r5,r3
    f4f8:	3023883a 	mov	r17,r6
    f4fc:	5021883a 	mov	r16,r10
    f500:	3825883a 	mov	r18,r7
    f504:	003e8d06 	br	ef3c <__alt_data_end+0xfffb980c>
    f508:	80001a1e 	bne	r16,zero,f574 <__subdf3+0x6c4>
    f50c:	2c48b03a 	or	r4,r5,r17
    f510:	20005526 	beq	r4,zero,f668 <__subdf3+0x7b8>
    f514:	0084303a 	nor	r2,zero,r2
    f518:	1000511e 	bne	r2,zero,f660 <__subdf3+0x7b0>
    f51c:	89a3883a 	add	r17,r17,r6
    f520:	194b883a 	add	r5,r3,r5
    f524:	898d803a 	cmpltu	r6,r17,r6
    f528:	298b883a 	add	r5,r5,r6
    f52c:	5021883a 	mov	r16,r10
    f530:	003efc06 	br	f124 <__alt_data_end+0xfffb99f4>
    f534:	1000341e 	bne	r2,zero,f608 <__subdf3+0x758>
    f538:	1984b03a 	or	r2,r3,r6
    f53c:	10006f26 	beq	r2,zero,f6fc <__subdf3+0x84c>
    f540:	180b883a 	mov	r5,r3
    f544:	3023883a 	mov	r17,r6
    f548:	3825883a 	mov	r18,r7
    f54c:	0401ffc4 	movi	r16,2047
    f550:	003e7a06 	br	ef3c <__alt_data_end+0xfffb980c>
    f554:	2c62b03a 	or	r17,r5,r17
    f558:	8822c03a 	cmpne	r17,r17,zero
    f55c:	0005883a 	mov	r2,zero
    f560:	003f8a06 	br	f38c <__alt_data_end+0xfffb9c5c>
    f564:	3821883a 	mov	r16,r7
    f568:	000b883a 	mov	r5,zero
    f56c:	0023883a 	mov	r17,zero
    f570:	003ed206 	br	f0bc <__alt_data_end+0xfffb998c>
    f574:	0101ffc4 	movi	r4,2047
    f578:	51003b26 	beq	r10,r4,f668 <__subdf3+0x7b8>
    f57c:	0085c83a 	sub	r2,zero,r2
    f580:	29402034 	orhi	r5,r5,128
    f584:	01000e04 	movi	r4,56
    f588:	20806216 	blt	r4,r2,f714 <__subdf3+0x864>
    f58c:	010007c4 	movi	r4,31
    f590:	20806b16 	blt	r4,r2,f740 <__subdf3+0x890>
    f594:	01000804 	movi	r4,32
    f598:	2089c83a 	sub	r4,r4,r2
    f59c:	2912983a 	sll	r9,r5,r4
    f5a0:	888ed83a 	srl	r7,r17,r2
    f5a4:	8908983a 	sll	r4,r17,r4
    f5a8:	2884d83a 	srl	r2,r5,r2
    f5ac:	49e2b03a 	or	r17,r9,r7
    f5b0:	2008c03a 	cmpne	r4,r4,zero
    f5b4:	8922b03a 	or	r17,r17,r4
    f5b8:	89a3883a 	add	r17,r17,r6
    f5bc:	10c5883a 	add	r2,r2,r3
    f5c0:	898d803a 	cmpltu	r6,r17,r6
    f5c4:	118b883a 	add	r5,r2,r6
    f5c8:	5021883a 	mov	r16,r10
    f5cc:	003ed506 	br	f124 <__alt_data_end+0xfffb99f4>
    f5d0:	1984b03a 	or	r2,r3,r6
    f5d4:	103e5926 	beq	r2,zero,ef3c <__alt_data_end+0xfffb980c>
    f5d8:	8989c83a 	sub	r4,r17,r6
    f5dc:	8911803a 	cmpltu	r8,r17,r4
    f5e0:	28c5c83a 	sub	r2,r5,r3
    f5e4:	1205c83a 	sub	r2,r2,r8
    f5e8:	1200202c 	andhi	r8,r2,128
    f5ec:	403ef926 	beq	r8,zero,f1d4 <__alt_data_end+0xfffb9aa4>
    f5f0:	3463c83a 	sub	r17,r6,r17
    f5f4:	194bc83a 	sub	r5,r3,r5
    f5f8:	344d803a 	cmpltu	r6,r6,r17
    f5fc:	298bc83a 	sub	r5,r5,r6
    f600:	3825883a 	mov	r18,r7
    f604:	003e4d06 	br	ef3c <__alt_data_end+0xfffb980c>
    f608:	1984b03a 	or	r2,r3,r6
    f60c:	10002b26 	beq	r2,zero,f6bc <__subdf3+0x80c>
    f610:	2808d0fa 	srli	r4,r5,3
    f614:	8822d0fa 	srli	r17,r17,3
    f618:	280a977a 	slli	r5,r5,29
    f61c:	2080022c 	andhi	r2,r4,8
    f620:	2c62b03a 	or	r17,r5,r17
    f624:	10000826 	beq	r2,zero,f648 <__subdf3+0x798>
    f628:	1810d0fa 	srli	r8,r3,3
    f62c:	4080022c 	andhi	r2,r8,8
    f630:	1000051e 	bne	r2,zero,f648 <__subdf3+0x798>
    f634:	300cd0fa 	srli	r6,r6,3
    f638:	1804977a 	slli	r2,r3,29
    f63c:	4009883a 	mov	r4,r8
    f640:	3825883a 	mov	r18,r7
    f644:	11a2b03a 	or	r17,r2,r6
    f648:	880ad77a 	srli	r5,r17,29
    f64c:	200890fa 	slli	r4,r4,3
    f650:	882290fa 	slli	r17,r17,3
    f654:	0401ffc4 	movi	r16,2047
    f658:	290ab03a 	or	r5,r5,r4
    f65c:	003e3706 	br	ef3c <__alt_data_end+0xfffb980c>
    f660:	0101ffc4 	movi	r4,2047
    f664:	513fc71e 	bne	r10,r4,f584 <__alt_data_end+0xfffb9e54>
    f668:	180b883a 	mov	r5,r3
    f66c:	3023883a 	mov	r17,r6
    f670:	5021883a 	mov	r16,r10
    f674:	003e3106 	br	ef3c <__alt_data_end+0xfffb980c>
    f678:	10002d26 	beq	r2,zero,f730 <__subdf3+0x880>
    f67c:	1984b03a 	or	r2,r3,r6
    f680:	10000e26 	beq	r2,zero,f6bc <__subdf3+0x80c>
    f684:	2808d0fa 	srli	r4,r5,3
    f688:	8822d0fa 	srli	r17,r17,3
    f68c:	280a977a 	slli	r5,r5,29
    f690:	2080022c 	andhi	r2,r4,8
    f694:	2c62b03a 	or	r17,r5,r17
    f698:	103feb26 	beq	r2,zero,f648 <__alt_data_end+0xfffb9f18>
    f69c:	180ed0fa 	srli	r7,r3,3
    f6a0:	3880022c 	andhi	r2,r7,8
    f6a4:	103fe81e 	bne	r2,zero,f648 <__alt_data_end+0xfffb9f18>
    f6a8:	300cd0fa 	srli	r6,r6,3
    f6ac:	1804977a 	slli	r2,r3,29
    f6b0:	3809883a 	mov	r4,r7
    f6b4:	11a2b03a 	or	r17,r2,r6
    f6b8:	003fe306 	br	f648 <__alt_data_end+0xfffb9f18>
    f6bc:	0401ffc4 	movi	r16,2047
    f6c0:	003e1e06 	br	ef3c <__alt_data_end+0xfffb980c>
    f6c4:	0005883a 	mov	r2,zero
    f6c8:	003f8306 	br	f4d8 <__alt_data_end+0xfffb9da8>
    f6cc:	113ff804 	addi	r4,r2,-32
    f6d0:	02000804 	movi	r8,32
    f6d4:	2908d83a 	srl	r4,r5,r4
    f6d8:	12002526 	beq	r2,r8,f770 <__subdf3+0x8c0>
    f6dc:	02001004 	movi	r8,64
    f6e0:	4085c83a 	sub	r2,r8,r2
    f6e4:	288a983a 	sll	r5,r5,r2
    f6e8:	2c62b03a 	or	r17,r5,r17
    f6ec:	8822c03a 	cmpne	r17,r17,zero
    f6f0:	8922b03a 	or	r17,r17,r4
    f6f4:	0005883a 	mov	r2,zero
    f6f8:	003f2406 	br	f38c <__alt_data_end+0xfffb9c5c>
    f6fc:	01402034 	movhi	r5,128
    f700:	0011883a 	mov	r8,zero
    f704:	297fffc4 	addi	r5,r5,-1
    f708:	047ffe04 	movi	r17,-8
    f70c:	0401ffc4 	movi	r16,2047
    f710:	003e6a06 	br	f0bc <__alt_data_end+0xfffb998c>
    f714:	2c62b03a 	or	r17,r5,r17
    f718:	8822c03a 	cmpne	r17,r17,zero
    f71c:	0005883a 	mov	r2,zero
    f720:	003fa506 	br	f5b8 <__alt_data_end+0xfffb9e88>
    f724:	180b883a 	mov	r5,r3
    f728:	3023883a 	mov	r17,r6
    f72c:	003e0306 	br	ef3c <__alt_data_end+0xfffb980c>
    f730:	180b883a 	mov	r5,r3
    f734:	3023883a 	mov	r17,r6
    f738:	0401ffc4 	movi	r16,2047
    f73c:	003dff06 	br	ef3c <__alt_data_end+0xfffb980c>
    f740:	113ff804 	addi	r4,r2,-32
    f744:	01c00804 	movi	r7,32
    f748:	2908d83a 	srl	r4,r5,r4
    f74c:	11c00a26 	beq	r2,r7,f778 <__subdf3+0x8c8>
    f750:	01c01004 	movi	r7,64
    f754:	3885c83a 	sub	r2,r7,r2
    f758:	288a983a 	sll	r5,r5,r2
    f75c:	2c62b03a 	or	r17,r5,r17
    f760:	8822c03a 	cmpne	r17,r17,zero
    f764:	8922b03a 	or	r17,r17,r4
    f768:	0005883a 	mov	r2,zero
    f76c:	003f9206 	br	f5b8 <__alt_data_end+0xfffb9e88>
    f770:	000b883a 	mov	r5,zero
    f774:	003fdc06 	br	f6e8 <__alt_data_end+0xfffb9fb8>
    f778:	000b883a 	mov	r5,zero
    f77c:	003ff706 	br	f75c <__alt_data_end+0xfffba02c>

0000f780 <__fixdfsi>:
    f780:	2806d53a 	srli	r3,r5,20
    f784:	00800434 	movhi	r2,16
    f788:	10bfffc4 	addi	r2,r2,-1
    f78c:	18c1ffcc 	andi	r3,r3,2047
    f790:	0180ff84 	movi	r6,1022
    f794:	2884703a 	and	r2,r5,r2
    f798:	280ad7fa 	srli	r5,r5,31
    f79c:	30c0130e 	bge	r6,r3,f7ec <__fixdfsi+0x6c>
    f7a0:	01810744 	movi	r6,1053
    f7a4:	30c00d16 	blt	r6,r3,f7dc <__fixdfsi+0x5c>
    f7a8:	01810cc4 	movi	r6,1075
    f7ac:	30cdc83a 	sub	r6,r6,r3
    f7b0:	01c007c4 	movi	r7,31
    f7b4:	10800434 	orhi	r2,r2,16
    f7b8:	39800e0e 	bge	r7,r6,f7f4 <__fixdfsi+0x74>
    f7bc:	010104c4 	movi	r4,1043
    f7c0:	20c7c83a 	sub	r3,r4,r3
    f7c4:	10c6d83a 	srl	r3,r2,r3
    f7c8:	29403fcc 	andi	r5,r5,255
    f7cc:	0145c83a 	sub	r2,zero,r5
    f7d0:	1884f03a 	xor	r2,r3,r2
    f7d4:	1145883a 	add	r2,r2,r5
    f7d8:	f800283a 	ret
    f7dc:	00a00034 	movhi	r2,32768
    f7e0:	10bfffc4 	addi	r2,r2,-1
    f7e4:	2885883a 	add	r2,r5,r2
    f7e8:	f800283a 	ret
    f7ec:	0005883a 	mov	r2,zero
    f7f0:	f800283a 	ret
    f7f4:	18fefb44 	addi	r3,r3,-1043
    f7f8:	2188d83a 	srl	r4,r4,r6
    f7fc:	10c6983a 	sll	r3,r2,r3
    f800:	20c6b03a 	or	r3,r4,r3
    f804:	003ff006 	br	f7c8 <__alt_data_end+0xfffba098>

0000f808 <__floatsidf>:
    f808:	defffd04 	addi	sp,sp,-12
    f80c:	dc400115 	stw	r17,4(sp)
    f810:	dfc00215 	stw	ra,8(sp)
    f814:	dc000015 	stw	r16,0(sp)
    f818:	2023883a 	mov	r17,r4
    f81c:	20001426 	beq	r4,zero,f870 <__floatsidf+0x68>
    f820:	2020d7fa 	srli	r16,r4,31
    f824:	80000126 	beq	r16,zero,f82c <__floatsidf+0x24>
    f828:	0123c83a 	sub	r17,zero,r4
    f82c:	8809883a 	mov	r4,r17
    f830:	000f97c0 	call	f97c <__clzsi2>
    f834:	01410784 	movi	r5,1054
    f838:	00c00284 	movi	r3,10
    f83c:	288bc83a 	sub	r5,r5,r2
    f840:	18801c16 	blt	r3,r2,f8b4 <__floatsidf+0xac>
    f844:	00c002c4 	movi	r3,11
    f848:	1887c83a 	sub	r3,r3,r2
    f84c:	88c8d83a 	srl	r4,r17,r3
    f850:	00c00434 	movhi	r3,16
    f854:	18ffffc4 	addi	r3,r3,-1
    f858:	10800544 	addi	r2,r2,21
    f85c:	20c8703a 	and	r4,r4,r3
    f860:	8884983a 	sll	r2,r17,r2
    f864:	28c1ffcc 	andi	r3,r5,2047
    f868:	800d883a 	mov	r6,r16
    f86c:	00000406 	br	f880 <__floatsidf+0x78>
    f870:	000d883a 	mov	r6,zero
    f874:	0007883a 	mov	r3,zero
    f878:	0009883a 	mov	r4,zero
    f87c:	0005883a 	mov	r2,zero
    f880:	180a953a 	slli	r5,r3,20
    f884:	31803fcc 	andi	r6,r6,255
    f888:	00c00434 	movhi	r3,16
    f88c:	300c97fa 	slli	r6,r6,31
    f890:	18ffffc4 	addi	r3,r3,-1
    f894:	20c6703a 	and	r3,r4,r3
    f898:	1946b03a 	or	r3,r3,r5
    f89c:	1986b03a 	or	r3,r3,r6
    f8a0:	dfc00217 	ldw	ra,8(sp)
    f8a4:	dc400117 	ldw	r17,4(sp)
    f8a8:	dc000017 	ldw	r16,0(sp)
    f8ac:	dec00304 	addi	sp,sp,12
    f8b0:	f800283a 	ret
    f8b4:	10fffd44 	addi	r3,r2,-11
    f8b8:	88c8983a 	sll	r4,r17,r3
    f8bc:	00800434 	movhi	r2,16
    f8c0:	10bfffc4 	addi	r2,r2,-1
    f8c4:	2088703a 	and	r4,r4,r2
    f8c8:	28c1ffcc 	andi	r3,r5,2047
    f8cc:	800d883a 	mov	r6,r16
    f8d0:	0005883a 	mov	r2,zero
    f8d4:	003fea06 	br	f880 <__alt_data_end+0xfffba150>

0000f8d8 <__floatunsidf>:
    f8d8:	defffe04 	addi	sp,sp,-8
    f8dc:	dc000015 	stw	r16,0(sp)
    f8e0:	dfc00115 	stw	ra,4(sp)
    f8e4:	2021883a 	mov	r16,r4
    f8e8:	20001026 	beq	r4,zero,f92c <__floatunsidf+0x54>
    f8ec:	000f97c0 	call	f97c <__clzsi2>
    f8f0:	01410784 	movi	r5,1054
    f8f4:	100d883a 	mov	r6,r2
    f8f8:	288bc83a 	sub	r5,r5,r2
    f8fc:	00800284 	movi	r2,10
    f900:	11801616 	blt	r2,r6,f95c <__floatunsidf+0x84>
    f904:	008002c4 	movi	r2,11
    f908:	1185c83a 	sub	r2,r2,r6
    f90c:	8084d83a 	srl	r2,r16,r2
    f910:	00c00434 	movhi	r3,16
    f914:	31c00544 	addi	r7,r6,21
    f918:	18ffffc4 	addi	r3,r3,-1
    f91c:	81e0983a 	sll	r16,r16,r7
    f920:	10cc703a 	and	r6,r2,r3
    f924:	2941ffcc 	andi	r5,r5,2047
    f928:	00000206 	br	f934 <__floatunsidf+0x5c>
    f92c:	000b883a 	mov	r5,zero
    f930:	000d883a 	mov	r6,zero
    f934:	280a953a 	slli	r5,r5,20
    f938:	00c00434 	movhi	r3,16
    f93c:	18ffffc4 	addi	r3,r3,-1
    f940:	30c6703a 	and	r3,r6,r3
    f944:	8005883a 	mov	r2,r16
    f948:	1946b03a 	or	r3,r3,r5
    f94c:	dfc00117 	ldw	ra,4(sp)
    f950:	dc000017 	ldw	r16,0(sp)
    f954:	dec00204 	addi	sp,sp,8
    f958:	f800283a 	ret
    f95c:	31bffd44 	addi	r6,r6,-11
    f960:	818c983a 	sll	r6,r16,r6
    f964:	00800434 	movhi	r2,16
    f968:	10bfffc4 	addi	r2,r2,-1
    f96c:	2941ffcc 	andi	r5,r5,2047
    f970:	0021883a 	mov	r16,zero
    f974:	308c703a 	and	r6,r6,r2
    f978:	003fee06 	br	f934 <__alt_data_end+0xfffba204>

0000f97c <__clzsi2>:
    f97c:	00bfffd4 	movui	r2,65535
    f980:	11000b36 	bltu	r2,r4,f9b0 <__clzsi2+0x34>
    f984:	00803fc4 	movi	r2,255
    f988:	1100122e 	bgeu	r2,r4,f9d4 <__clzsi2+0x58>
    f98c:	00c00204 	movi	r3,8
    f990:	01400604 	movi	r5,24
    f994:	20c8d83a 	srl	r4,r4,r3
    f998:	00800074 	movhi	r2,1
    f99c:	108af404 	addi	r2,r2,11216
    f9a0:	1109883a 	add	r4,r2,r4
    f9a4:	20800003 	ldbu	r2,0(r4)
    f9a8:	2885c83a 	sub	r2,r5,r2
    f9ac:	f800283a 	ret
    f9b0:	00804034 	movhi	r2,256
    f9b4:	10bfffc4 	addi	r2,r2,-1
    f9b8:	11000336 	bltu	r2,r4,f9c8 <__clzsi2+0x4c>
    f9bc:	00c00404 	movi	r3,16
    f9c0:	180b883a 	mov	r5,r3
    f9c4:	003ff306 	br	f994 <__alt_data_end+0xfffba264>
    f9c8:	00c00604 	movi	r3,24
    f9cc:	01400204 	movi	r5,8
    f9d0:	003ff006 	br	f994 <__alt_data_end+0xfffba264>
    f9d4:	0007883a 	mov	r3,zero
    f9d8:	01400804 	movi	r5,32
    f9dc:	003fed06 	br	f994 <__alt_data_end+0xfffba264>

0000f9e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f9e0:	defffe04 	addi	sp,sp,-8
    f9e4:	dfc00115 	stw	ra,4(sp)
    f9e8:	df000015 	stw	fp,0(sp)
    f9ec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f9f0:	00800074 	movhi	r2,1
    f9f4:	10921104 	addi	r2,r2,18500
    f9f8:	10800017 	ldw	r2,0(r2)
    f9fc:	10000526 	beq	r2,zero,fa14 <alt_get_errno+0x34>
    fa00:	00800074 	movhi	r2,1
    fa04:	10921104 	addi	r2,r2,18500
    fa08:	10800017 	ldw	r2,0(r2)
    fa0c:	103ee83a 	callr	r2
    fa10:	00000206 	br	fa1c <alt_get_errno+0x3c>
    fa14:	00800074 	movhi	r2,1
    fa18:	1098f504 	addi	r2,r2,25556
}
    fa1c:	e037883a 	mov	sp,fp
    fa20:	dfc00117 	ldw	ra,4(sp)
    fa24:	df000017 	ldw	fp,0(sp)
    fa28:	dec00204 	addi	sp,sp,8
    fa2c:	f800283a 	ret

0000fa30 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    fa30:	defffb04 	addi	sp,sp,-20
    fa34:	dfc00415 	stw	ra,16(sp)
    fa38:	df000315 	stw	fp,12(sp)
    fa3c:	df000304 	addi	fp,sp,12
    fa40:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    fa44:	e0bfff17 	ldw	r2,-4(fp)
    fa48:	10000816 	blt	r2,zero,fa6c <close+0x3c>
    fa4c:	e13fff17 	ldw	r4,-4(fp)
    fa50:	01400304 	movi	r5,12
    fa54:	000d1bc0 	call	d1bc <__mulsi3>
    fa58:	1007883a 	mov	r3,r2
    fa5c:	00800074 	movhi	r2,1
    fa60:	108d8e04 	addi	r2,r2,13880
    fa64:	1885883a 	add	r2,r3,r2
    fa68:	00000106 	br	fa70 <close+0x40>
    fa6c:	0005883a 	mov	r2,zero
    fa70:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    fa74:	e0bffd17 	ldw	r2,-12(fp)
    fa78:	10001926 	beq	r2,zero,fae0 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    fa7c:	e0bffd17 	ldw	r2,-12(fp)
    fa80:	10800017 	ldw	r2,0(r2)
    fa84:	10800417 	ldw	r2,16(r2)
    fa88:	10000626 	beq	r2,zero,faa4 <close+0x74>
    fa8c:	e0bffd17 	ldw	r2,-12(fp)
    fa90:	10800017 	ldw	r2,0(r2)
    fa94:	10800417 	ldw	r2,16(r2)
    fa98:	e13ffd17 	ldw	r4,-12(fp)
    fa9c:	103ee83a 	callr	r2
    faa0:	00000106 	br	faa8 <close+0x78>
    faa4:	0005883a 	mov	r2,zero
    faa8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    faac:	e13fff17 	ldw	r4,-4(fp)
    fab0:	00101540 	call	10154 <alt_release_fd>
    if (rval < 0)
    fab4:	e0bffe17 	ldw	r2,-8(fp)
    fab8:	1000070e 	bge	r2,zero,fad8 <close+0xa8>
    {
      ALT_ERRNO = -rval;
    fabc:	000f9e00 	call	f9e0 <alt_get_errno>
    fac0:	1007883a 	mov	r3,r2
    fac4:	e0bffe17 	ldw	r2,-8(fp)
    fac8:	0085c83a 	sub	r2,zero,r2
    facc:	18800015 	stw	r2,0(r3)
      return -1;
    fad0:	00bfffc4 	movi	r2,-1
    fad4:	00000706 	br	faf4 <close+0xc4>
    }
    return 0;
    fad8:	0005883a 	mov	r2,zero
    fadc:	00000506 	br	faf4 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    fae0:	000f9e00 	call	f9e0 <alt_get_errno>
    fae4:	1007883a 	mov	r3,r2
    fae8:	00801444 	movi	r2,81
    faec:	18800015 	stw	r2,0(r3)
    return -1;
    faf0:	00bfffc4 	movi	r2,-1
  }
}
    faf4:	e037883a 	mov	sp,fp
    faf8:	dfc00117 	ldw	ra,4(sp)
    fafc:	df000017 	ldw	fp,0(sp)
    fb00:	dec00204 	addi	sp,sp,8
    fb04:	f800283a 	ret

0000fb08 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    fb08:	defffc04 	addi	sp,sp,-16
    fb0c:	df000315 	stw	fp,12(sp)
    fb10:	df000304 	addi	fp,sp,12
    fb14:	e13ffd15 	stw	r4,-12(fp)
    fb18:	e17ffe15 	stw	r5,-8(fp)
    fb1c:	e1bfff15 	stw	r6,-4(fp)
  return len;
    fb20:	e0bfff17 	ldw	r2,-4(fp)
}
    fb24:	e037883a 	mov	sp,fp
    fb28:	df000017 	ldw	fp,0(sp)
    fb2c:	dec00104 	addi	sp,sp,4
    fb30:	f800283a 	ret

0000fb34 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    fb34:	defffe04 	addi	sp,sp,-8
    fb38:	dfc00115 	stw	ra,4(sp)
    fb3c:	df000015 	stw	fp,0(sp)
    fb40:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    fb44:	00800074 	movhi	r2,1
    fb48:	10921104 	addi	r2,r2,18500
    fb4c:	10800017 	ldw	r2,0(r2)
    fb50:	10000526 	beq	r2,zero,fb68 <alt_get_errno+0x34>
    fb54:	00800074 	movhi	r2,1
    fb58:	10921104 	addi	r2,r2,18500
    fb5c:	10800017 	ldw	r2,0(r2)
    fb60:	103ee83a 	callr	r2
    fb64:	00000206 	br	fb70 <alt_get_errno+0x3c>
    fb68:	00800074 	movhi	r2,1
    fb6c:	1098f504 	addi	r2,r2,25556
}
    fb70:	e037883a 	mov	sp,fp
    fb74:	dfc00117 	ldw	ra,4(sp)
    fb78:	df000017 	ldw	fp,0(sp)
    fb7c:	dec00204 	addi	sp,sp,8
    fb80:	f800283a 	ret

0000fb84 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    fb84:	defffb04 	addi	sp,sp,-20
    fb88:	dfc00415 	stw	ra,16(sp)
    fb8c:	df000315 	stw	fp,12(sp)
    fb90:	df000304 	addi	fp,sp,12
    fb94:	e13ffe15 	stw	r4,-8(fp)
    fb98:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    fb9c:	e0bffe17 	ldw	r2,-8(fp)
    fba0:	10000816 	blt	r2,zero,fbc4 <fstat+0x40>
    fba4:	e13ffe17 	ldw	r4,-8(fp)
    fba8:	01400304 	movi	r5,12
    fbac:	000d1bc0 	call	d1bc <__mulsi3>
    fbb0:	1007883a 	mov	r3,r2
    fbb4:	00800074 	movhi	r2,1
    fbb8:	108d8e04 	addi	r2,r2,13880
    fbbc:	1885883a 	add	r2,r3,r2
    fbc0:	00000106 	br	fbc8 <fstat+0x44>
    fbc4:	0005883a 	mov	r2,zero
    fbc8:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    fbcc:	e0bffd17 	ldw	r2,-12(fp)
    fbd0:	10001026 	beq	r2,zero,fc14 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    fbd4:	e0bffd17 	ldw	r2,-12(fp)
    fbd8:	10800017 	ldw	r2,0(r2)
    fbdc:	10800817 	ldw	r2,32(r2)
    fbe0:	10000726 	beq	r2,zero,fc00 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
    fbe4:	e0bffd17 	ldw	r2,-12(fp)
    fbe8:	10800017 	ldw	r2,0(r2)
    fbec:	10800817 	ldw	r2,32(r2)
    fbf0:	e13ffd17 	ldw	r4,-12(fp)
    fbf4:	e17fff17 	ldw	r5,-4(fp)
    fbf8:	103ee83a 	callr	r2
    fbfc:	00000a06 	br	fc28 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    fc00:	e0bfff17 	ldw	r2,-4(fp)
    fc04:	00c80004 	movi	r3,8192
    fc08:	10c00115 	stw	r3,4(r2)
      return 0;
    fc0c:	0005883a 	mov	r2,zero
    fc10:	00000506 	br	fc28 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    fc14:	000fb340 	call	fb34 <alt_get_errno>
    fc18:	1007883a 	mov	r3,r2
    fc1c:	00801444 	movi	r2,81
    fc20:	18800015 	stw	r2,0(r3)
    return -1;
    fc24:	00bfffc4 	movi	r2,-1
  }
}
    fc28:	e037883a 	mov	sp,fp
    fc2c:	dfc00117 	ldw	ra,4(sp)
    fc30:	df000017 	ldw	fp,0(sp)
    fc34:	dec00204 	addi	sp,sp,8
    fc38:	f800283a 	ret

0000fc3c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    fc3c:	defffe04 	addi	sp,sp,-8
    fc40:	dfc00115 	stw	ra,4(sp)
    fc44:	df000015 	stw	fp,0(sp)
    fc48:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    fc4c:	00800074 	movhi	r2,1
    fc50:	10921104 	addi	r2,r2,18500
    fc54:	10800017 	ldw	r2,0(r2)
    fc58:	10000526 	beq	r2,zero,fc70 <alt_get_errno+0x34>
    fc5c:	00800074 	movhi	r2,1
    fc60:	10921104 	addi	r2,r2,18500
    fc64:	10800017 	ldw	r2,0(r2)
    fc68:	103ee83a 	callr	r2
    fc6c:	00000206 	br	fc78 <alt_get_errno+0x3c>
    fc70:	00800074 	movhi	r2,1
    fc74:	1098f504 	addi	r2,r2,25556
}
    fc78:	e037883a 	mov	sp,fp
    fc7c:	dfc00117 	ldw	ra,4(sp)
    fc80:	df000017 	ldw	fp,0(sp)
    fc84:	dec00204 	addi	sp,sp,8
    fc88:	f800283a 	ret

0000fc8c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    fc8c:	deffed04 	addi	sp,sp,-76
    fc90:	dfc01215 	stw	ra,72(sp)
    fc94:	df001115 	stw	fp,68(sp)
    fc98:	df001104 	addi	fp,sp,68
    fc9c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    fca0:	e0bfff17 	ldw	r2,-4(fp)
    fca4:	10000816 	blt	r2,zero,fcc8 <isatty+0x3c>
    fca8:	e13fff17 	ldw	r4,-4(fp)
    fcac:	01400304 	movi	r5,12
    fcb0:	000d1bc0 	call	d1bc <__mulsi3>
    fcb4:	1007883a 	mov	r3,r2
    fcb8:	00800074 	movhi	r2,1
    fcbc:	108d8e04 	addi	r2,r2,13880
    fcc0:	1885883a 	add	r2,r3,r2
    fcc4:	00000106 	br	fccc <isatty+0x40>
    fcc8:	0005883a 	mov	r2,zero
    fccc:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    fcd0:	e0bfef17 	ldw	r2,-68(fp)
    fcd4:	10000e26 	beq	r2,zero,fd10 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    fcd8:	e0bfef17 	ldw	r2,-68(fp)
    fcdc:	10800017 	ldw	r2,0(r2)
    fce0:	10800817 	ldw	r2,32(r2)
    fce4:	1000021e 	bne	r2,zero,fcf0 <isatty+0x64>
    {
      return 1;
    fce8:	00800044 	movi	r2,1
    fcec:	00000d06 	br	fd24 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    fcf0:	e0bff004 	addi	r2,fp,-64
    fcf4:	e13fff17 	ldw	r4,-4(fp)
    fcf8:	100b883a 	mov	r5,r2
    fcfc:	000fb840 	call	fb84 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    fd00:	e0bff117 	ldw	r2,-60(fp)
    fd04:	10880020 	cmpeqi	r2,r2,8192
    fd08:	10803fcc 	andi	r2,r2,255
    fd0c:	00000506 	br	fd24 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    fd10:	000fc3c0 	call	fc3c <alt_get_errno>
    fd14:	1007883a 	mov	r3,r2
    fd18:	00801444 	movi	r2,81
    fd1c:	18800015 	stw	r2,0(r3)
    return 0;
    fd20:	0005883a 	mov	r2,zero
  }
}
    fd24:	e037883a 	mov	sp,fp
    fd28:	dfc00117 	ldw	ra,4(sp)
    fd2c:	df000017 	ldw	fp,0(sp)
    fd30:	dec00204 	addi	sp,sp,8
    fd34:	f800283a 	ret

0000fd38 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    fd38:	defffc04 	addi	sp,sp,-16
    fd3c:	df000315 	stw	fp,12(sp)
    fd40:	df000304 	addi	fp,sp,12
    fd44:	e13ffd15 	stw	r4,-12(fp)
    fd48:	e17ffe15 	stw	r5,-8(fp)
    fd4c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    fd50:	e0fffe17 	ldw	r3,-8(fp)
    fd54:	e0bffd17 	ldw	r2,-12(fp)
    fd58:	18800c26 	beq	r3,r2,fd8c <alt_load_section+0x54>
  {
    while( to != end )
    fd5c:	00000806 	br	fd80 <alt_load_section+0x48>
    {
      *to++ = *from++;
    fd60:	e0bffe17 	ldw	r2,-8(fp)
    fd64:	10c00104 	addi	r3,r2,4
    fd68:	e0fffe15 	stw	r3,-8(fp)
    fd6c:	e0fffd17 	ldw	r3,-12(fp)
    fd70:	19000104 	addi	r4,r3,4
    fd74:	e13ffd15 	stw	r4,-12(fp)
    fd78:	18c00017 	ldw	r3,0(r3)
    fd7c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    fd80:	e0fffe17 	ldw	r3,-8(fp)
    fd84:	e0bfff17 	ldw	r2,-4(fp)
    fd88:	18bff51e 	bne	r3,r2,fd60 <__alt_data_end+0xfffba630>
    {
      *to++ = *from++;
    }
  }
}
    fd8c:	e037883a 	mov	sp,fp
    fd90:	df000017 	ldw	fp,0(sp)
    fd94:	dec00104 	addi	sp,sp,4
    fd98:	f800283a 	ret

0000fd9c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    fd9c:	defffe04 	addi	sp,sp,-8
    fda0:	dfc00115 	stw	ra,4(sp)
    fda4:	df000015 	stw	fp,0(sp)
    fda8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    fdac:	01000074 	movhi	r4,1
    fdb0:	21121604 	addi	r4,r4,18520
    fdb4:	01400074 	movhi	r5,1
    fdb8:	294b4104 	addi	r5,r5,11524
    fdbc:	01800074 	movhi	r6,1
    fdc0:	31921604 	addi	r6,r6,18520
    fdc4:	000fd380 	call	fd38 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    fdc8:	01000034 	movhi	r4,0
    fdcc:	21000804 	addi	r4,r4,32
    fdd0:	01400034 	movhi	r5,0
    fdd4:	29400804 	addi	r5,r5,32
    fdd8:	01800034 	movhi	r6,0
    fddc:	31808b04 	addi	r6,r6,556
    fde0:	000fd380 	call	fd38 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    fde4:	01000074 	movhi	r4,1
    fde8:	2108b004 	addi	r4,r4,8896
    fdec:	01400074 	movhi	r5,1
    fdf0:	2948b004 	addi	r5,r5,8896
    fdf4:	01800074 	movhi	r6,1
    fdf8:	318b4104 	addi	r6,r6,11524
    fdfc:	000fd380 	call	fd38 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    fe00:	001119c0 	call	1119c <alt_dcache_flush_all>
  alt_icache_flush_all();
    fe04:	00113640 	call	11364 <alt_icache_flush_all>
}
    fe08:	e037883a 	mov	sp,fp
    fe0c:	dfc00117 	ldw	ra,4(sp)
    fe10:	df000017 	ldw	fp,0(sp)
    fe14:	dec00204 	addi	sp,sp,8
    fe18:	f800283a 	ret

0000fe1c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    fe1c:	defffe04 	addi	sp,sp,-8
    fe20:	dfc00115 	stw	ra,4(sp)
    fe24:	df000015 	stw	fp,0(sp)
    fe28:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    fe2c:	00800074 	movhi	r2,1
    fe30:	10921104 	addi	r2,r2,18500
    fe34:	10800017 	ldw	r2,0(r2)
    fe38:	10000526 	beq	r2,zero,fe50 <alt_get_errno+0x34>
    fe3c:	00800074 	movhi	r2,1
    fe40:	10921104 	addi	r2,r2,18500
    fe44:	10800017 	ldw	r2,0(r2)
    fe48:	103ee83a 	callr	r2
    fe4c:	00000206 	br	fe58 <alt_get_errno+0x3c>
    fe50:	00800074 	movhi	r2,1
    fe54:	1098f504 	addi	r2,r2,25556
}
    fe58:	e037883a 	mov	sp,fp
    fe5c:	dfc00117 	ldw	ra,4(sp)
    fe60:	df000017 	ldw	fp,0(sp)
    fe64:	dec00204 	addi	sp,sp,8
    fe68:	f800283a 	ret

0000fe6c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    fe6c:	defff904 	addi	sp,sp,-28
    fe70:	dfc00615 	stw	ra,24(sp)
    fe74:	df000515 	stw	fp,20(sp)
    fe78:	df000504 	addi	fp,sp,20
    fe7c:	e13ffd15 	stw	r4,-12(fp)
    fe80:	e17ffe15 	stw	r5,-8(fp)
    fe84:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    fe88:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    fe8c:	e0bffd17 	ldw	r2,-12(fp)
    fe90:	10000816 	blt	r2,zero,feb4 <lseek+0x48>
    fe94:	e13ffd17 	ldw	r4,-12(fp)
    fe98:	01400304 	movi	r5,12
    fe9c:	000d1bc0 	call	d1bc <__mulsi3>
    fea0:	1007883a 	mov	r3,r2
    fea4:	00800074 	movhi	r2,1
    fea8:	108d8e04 	addi	r2,r2,13880
    feac:	1885883a 	add	r2,r3,r2
    feb0:	00000106 	br	feb8 <lseek+0x4c>
    feb4:	0005883a 	mov	r2,zero
    feb8:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    febc:	e0bffc17 	ldw	r2,-16(fp)
    fec0:	10001026 	beq	r2,zero,ff04 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    fec4:	e0bffc17 	ldw	r2,-16(fp)
    fec8:	10800017 	ldw	r2,0(r2)
    fecc:	10800717 	ldw	r2,28(r2)
    fed0:	10000926 	beq	r2,zero,fef8 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    fed4:	e0bffc17 	ldw	r2,-16(fp)
    fed8:	10800017 	ldw	r2,0(r2)
    fedc:	10800717 	ldw	r2,28(r2)
    fee0:	e13ffc17 	ldw	r4,-16(fp)
    fee4:	e17ffe17 	ldw	r5,-8(fp)
    fee8:	e1bfff17 	ldw	r6,-4(fp)
    feec:	103ee83a 	callr	r2
    fef0:	e0bffb15 	stw	r2,-20(fp)
    fef4:	00000506 	br	ff0c <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    fef8:	00bfde84 	movi	r2,-134
    fefc:	e0bffb15 	stw	r2,-20(fp)
    ff00:	00000206 	br	ff0c <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
    ff04:	00bfebc4 	movi	r2,-81
    ff08:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    ff0c:	e0bffb17 	ldw	r2,-20(fp)
    ff10:	1000070e 	bge	r2,zero,ff30 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
    ff14:	000fe1c0 	call	fe1c <alt_get_errno>
    ff18:	1007883a 	mov	r3,r2
    ff1c:	e0bffb17 	ldw	r2,-20(fp)
    ff20:	0085c83a 	sub	r2,zero,r2
    ff24:	18800015 	stw	r2,0(r3)
    rc = -1;
    ff28:	00bfffc4 	movi	r2,-1
    ff2c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    ff30:	e0bffb17 	ldw	r2,-20(fp)
}
    ff34:	e037883a 	mov	sp,fp
    ff38:	dfc00117 	ldw	ra,4(sp)
    ff3c:	df000017 	ldw	fp,0(sp)
    ff40:	dec00204 	addi	sp,sp,8
    ff44:	f800283a 	ret

0000ff48 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    ff48:	defffd04 	addi	sp,sp,-12
    ff4c:	dfc00215 	stw	ra,8(sp)
    ff50:	df000115 	stw	fp,4(sp)
    ff54:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    ff58:	0009883a 	mov	r4,zero
    ff5c:	001043c0 	call	1043c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    ff60:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    ff64:	00104700 	call	10470 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    ff68:	01000074 	movhi	r4,1
    ff6c:	210b3704 	addi	r4,r4,11484
    ff70:	01400074 	movhi	r5,1
    ff74:	294b3704 	addi	r5,r5,11484
    ff78:	01800074 	movhi	r6,1
    ff7c:	318b3704 	addi	r6,r6,11484
    ff80:	00117300 	call	11730 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    ff84:	00112ac0 	call	112ac <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    ff88:	01000074 	movhi	r4,1
    ff8c:	2104c204 	addi	r4,r4,4872
    ff90:	0011f1c0 	call	11f1c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    ff94:	d126f317 	ldw	r4,-25652(gp)
    ff98:	d0e6f417 	ldw	r3,-25648(gp)
    ff9c:	d0a6f517 	ldw	r2,-25644(gp)
    ffa0:	180b883a 	mov	r5,r3
    ffa4:	100d883a 	mov	r6,r2
    ffa8:	00010ac0 	call	10ac <main>
    ffac:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    ffb0:	01000044 	movi	r4,1
    ffb4:	000fa300 	call	fa30 <close>
  exit (result);
    ffb8:	e13fff17 	ldw	r4,-4(fp)
    ffbc:	0011f300 	call	11f30 <exit>

0000ffc0 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    ffc0:	defffe04 	addi	sp,sp,-8
    ffc4:	df000115 	stw	fp,4(sp)
    ffc8:	df000104 	addi	fp,sp,4
    ffcc:	e13fff15 	stw	r4,-4(fp)
}
    ffd0:	e037883a 	mov	sp,fp
    ffd4:	df000017 	ldw	fp,0(sp)
    ffd8:	dec00104 	addi	sp,sp,4
    ffdc:	f800283a 	ret

0000ffe0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    ffe0:	defffe04 	addi	sp,sp,-8
    ffe4:	df000115 	stw	fp,4(sp)
    ffe8:	df000104 	addi	fp,sp,4
    ffec:	e13fff15 	stw	r4,-4(fp)
}
    fff0:	e037883a 	mov	sp,fp
    fff4:	df000017 	ldw	fp,0(sp)
    fff8:	dec00104 	addi	sp,sp,4
    fffc:	f800283a 	ret

00010000 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10000:	defffe04 	addi	sp,sp,-8
   10004:	dfc00115 	stw	ra,4(sp)
   10008:	df000015 	stw	fp,0(sp)
   1000c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10010:	00800074 	movhi	r2,1
   10014:	10921104 	addi	r2,r2,18500
   10018:	10800017 	ldw	r2,0(r2)
   1001c:	10000526 	beq	r2,zero,10034 <alt_get_errno+0x34>
   10020:	00800074 	movhi	r2,1
   10024:	10921104 	addi	r2,r2,18500
   10028:	10800017 	ldw	r2,0(r2)
   1002c:	103ee83a 	callr	r2
   10030:	00000206 	br	1003c <alt_get_errno+0x3c>
   10034:	00800074 	movhi	r2,1
   10038:	1098f504 	addi	r2,r2,25556
}
   1003c:	e037883a 	mov	sp,fp
   10040:	dfc00117 	ldw	ra,4(sp)
   10044:	df000017 	ldw	fp,0(sp)
   10048:	dec00204 	addi	sp,sp,8
   1004c:	f800283a 	ret

00010050 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   10050:	defff904 	addi	sp,sp,-28
   10054:	dfc00615 	stw	ra,24(sp)
   10058:	df000515 	stw	fp,20(sp)
   1005c:	df000504 	addi	fp,sp,20
   10060:	e13ffd15 	stw	r4,-12(fp)
   10064:	e17ffe15 	stw	r5,-8(fp)
   10068:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1006c:	e0bffd17 	ldw	r2,-12(fp)
   10070:	10000816 	blt	r2,zero,10094 <read+0x44>
   10074:	e13ffd17 	ldw	r4,-12(fp)
   10078:	01400304 	movi	r5,12
   1007c:	000d1bc0 	call	d1bc <__mulsi3>
   10080:	1007883a 	mov	r3,r2
   10084:	00800074 	movhi	r2,1
   10088:	108d8e04 	addi	r2,r2,13880
   1008c:	1885883a 	add	r2,r3,r2
   10090:	00000106 	br	10098 <read+0x48>
   10094:	0005883a 	mov	r2,zero
   10098:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   1009c:	e0bffb17 	ldw	r2,-20(fp)
   100a0:	10002226 	beq	r2,zero,1012c <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   100a4:	e0bffb17 	ldw	r2,-20(fp)
   100a8:	10800217 	ldw	r2,8(r2)
   100ac:	108000cc 	andi	r2,r2,3
   100b0:	10800060 	cmpeqi	r2,r2,1
   100b4:	1000181e 	bne	r2,zero,10118 <read+0xc8>
        (fd->dev->read))
   100b8:	e0bffb17 	ldw	r2,-20(fp)
   100bc:	10800017 	ldw	r2,0(r2)
   100c0:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   100c4:	10001426 	beq	r2,zero,10118 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   100c8:	e0bffb17 	ldw	r2,-20(fp)
   100cc:	10800017 	ldw	r2,0(r2)
   100d0:	10800517 	ldw	r2,20(r2)
   100d4:	e0ffff17 	ldw	r3,-4(fp)
   100d8:	e13ffb17 	ldw	r4,-20(fp)
   100dc:	e17ffe17 	ldw	r5,-8(fp)
   100e0:	180d883a 	mov	r6,r3
   100e4:	103ee83a 	callr	r2
   100e8:	e0bffc15 	stw	r2,-16(fp)
   100ec:	e0bffc17 	ldw	r2,-16(fp)
   100f0:	1000070e 	bge	r2,zero,10110 <read+0xc0>
        {
          ALT_ERRNO = -rval;
   100f4:	00100000 	call	10000 <alt_get_errno>
   100f8:	1007883a 	mov	r3,r2
   100fc:	e0bffc17 	ldw	r2,-16(fp)
   10100:	0085c83a 	sub	r2,zero,r2
   10104:	18800015 	stw	r2,0(r3)
          return -1;
   10108:	00bfffc4 	movi	r2,-1
   1010c:	00000c06 	br	10140 <read+0xf0>
        }
        return rval;
   10110:	e0bffc17 	ldw	r2,-16(fp)
   10114:	00000a06 	br	10140 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   10118:	00100000 	call	10000 <alt_get_errno>
   1011c:	1007883a 	mov	r3,r2
   10120:	00800344 	movi	r2,13
   10124:	18800015 	stw	r2,0(r3)
   10128:	00000406 	br	1013c <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   1012c:	00100000 	call	10000 <alt_get_errno>
   10130:	1007883a 	mov	r3,r2
   10134:	00801444 	movi	r2,81
   10138:	18800015 	stw	r2,0(r3)
  }
  return -1;
   1013c:	00bfffc4 	movi	r2,-1
}
   10140:	e037883a 	mov	sp,fp
   10144:	dfc00117 	ldw	ra,4(sp)
   10148:	df000017 	ldw	fp,0(sp)
   1014c:	dec00204 	addi	sp,sp,8
   10150:	f800283a 	ret

00010154 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   10154:	defffc04 	addi	sp,sp,-16
   10158:	dfc00315 	stw	ra,12(sp)
   1015c:	df000215 	stw	fp,8(sp)
   10160:	dc000115 	stw	r16,4(sp)
   10164:	df000204 	addi	fp,sp,8
   10168:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   1016c:	e0bffe17 	ldw	r2,-8(fp)
   10170:	108000d0 	cmplti	r2,r2,3
   10174:	1000111e 	bne	r2,zero,101bc <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   10178:	04000074 	movhi	r16,1
   1017c:	840d8e04 	addi	r16,r16,13880
   10180:	e0bffe17 	ldw	r2,-8(fp)
   10184:	1009883a 	mov	r4,r2
   10188:	01400304 	movi	r5,12
   1018c:	000d1bc0 	call	d1bc <__mulsi3>
   10190:	8085883a 	add	r2,r16,r2
   10194:	10800204 	addi	r2,r2,8
   10198:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   1019c:	04000074 	movhi	r16,1
   101a0:	840d8e04 	addi	r16,r16,13880
   101a4:	e0bffe17 	ldw	r2,-8(fp)
   101a8:	1009883a 	mov	r4,r2
   101ac:	01400304 	movi	r5,12
   101b0:	000d1bc0 	call	d1bc <__mulsi3>
   101b4:	8085883a 	add	r2,r16,r2
   101b8:	10000015 	stw	zero,0(r2)
  }
}
   101bc:	e6ffff04 	addi	sp,fp,-4
   101c0:	dfc00217 	ldw	ra,8(sp)
   101c4:	df000117 	ldw	fp,4(sp)
   101c8:	dc000017 	ldw	r16,0(sp)
   101cc:	dec00304 	addi	sp,sp,12
   101d0:	f800283a 	ret

000101d4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   101d4:	defff904 	addi	sp,sp,-28
   101d8:	df000615 	stw	fp,24(sp)
   101dc:	df000604 	addi	fp,sp,24
   101e0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   101e4:	0005303a 	rdctl	r2,status
   101e8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   101ec:	e0fffc17 	ldw	r3,-16(fp)
   101f0:	00bfff84 	movi	r2,-2
   101f4:	1884703a 	and	r2,r3,r2
   101f8:	1001703a 	wrctl	status,r2
  
  return context;
   101fc:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   10200:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   10204:	d0a00c17 	ldw	r2,-32720(gp)
   10208:	10c000c4 	addi	r3,r2,3
   1020c:	00bfff04 	movi	r2,-4
   10210:	1884703a 	and	r2,r3,r2
   10214:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   10218:	d0e00c17 	ldw	r3,-32720(gp)
   1021c:	e0bfff17 	ldw	r2,-4(fp)
   10220:	1887883a 	add	r3,r3,r2
   10224:	00800174 	movhi	r2,5
   10228:	1095cc04 	addi	r2,r2,22320
   1022c:	10c0062e 	bgeu	r2,r3,10248 <sbrk+0x74>
   10230:	e0bffa17 	ldw	r2,-24(fp)
   10234:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10238:	e0bffd17 	ldw	r2,-12(fp)
   1023c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   10240:	00bfffc4 	movi	r2,-1
   10244:	00000b06 	br	10274 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   10248:	d0a00c17 	ldw	r2,-32720(gp)
   1024c:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   10250:	d0e00c17 	ldw	r3,-32720(gp)
   10254:	e0bfff17 	ldw	r2,-4(fp)
   10258:	1885883a 	add	r2,r3,r2
   1025c:	d0a00c15 	stw	r2,-32720(gp)
   10260:	e0bffa17 	ldw	r2,-24(fp)
   10264:	e0bffe15 	stw	r2,-8(fp)
   10268:	e0bffe17 	ldw	r2,-8(fp)
   1026c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   10270:	e0bffb17 	ldw	r2,-20(fp)
} 
   10274:	e037883a 	mov	sp,fp
   10278:	df000017 	ldw	fp,0(sp)
   1027c:	dec00104 	addi	sp,sp,4
   10280:	f800283a 	ret

00010284 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   10284:	defffd04 	addi	sp,sp,-12
   10288:	dfc00215 	stw	ra,8(sp)
   1028c:	df000115 	stw	fp,4(sp)
   10290:	df000104 	addi	fp,sp,4
   10294:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   10298:	e13fff17 	ldw	r4,-4(fp)
   1029c:	00110440 	call	11044 <alt_busy_sleep>
}
   102a0:	e037883a 	mov	sp,fp
   102a4:	dfc00117 	ldw	ra,4(sp)
   102a8:	df000017 	ldw	fp,0(sp)
   102ac:	dec00204 	addi	sp,sp,8
   102b0:	f800283a 	ret

000102b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   102b4:	defffe04 	addi	sp,sp,-8
   102b8:	dfc00115 	stw	ra,4(sp)
   102bc:	df000015 	stw	fp,0(sp)
   102c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   102c4:	00800074 	movhi	r2,1
   102c8:	10921104 	addi	r2,r2,18500
   102cc:	10800017 	ldw	r2,0(r2)
   102d0:	10000526 	beq	r2,zero,102e8 <alt_get_errno+0x34>
   102d4:	00800074 	movhi	r2,1
   102d8:	10921104 	addi	r2,r2,18500
   102dc:	10800017 	ldw	r2,0(r2)
   102e0:	103ee83a 	callr	r2
   102e4:	00000206 	br	102f0 <alt_get_errno+0x3c>
   102e8:	00800074 	movhi	r2,1
   102ec:	1098f504 	addi	r2,r2,25556
}
   102f0:	e037883a 	mov	sp,fp
   102f4:	dfc00117 	ldw	ra,4(sp)
   102f8:	df000017 	ldw	fp,0(sp)
   102fc:	dec00204 	addi	sp,sp,8
   10300:	f800283a 	ret

00010304 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   10304:	defff904 	addi	sp,sp,-28
   10308:	dfc00615 	stw	ra,24(sp)
   1030c:	df000515 	stw	fp,20(sp)
   10310:	df000504 	addi	fp,sp,20
   10314:	e13ffd15 	stw	r4,-12(fp)
   10318:	e17ffe15 	stw	r5,-8(fp)
   1031c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   10320:	e0bffd17 	ldw	r2,-12(fp)
   10324:	10000816 	blt	r2,zero,10348 <write+0x44>
   10328:	e13ffd17 	ldw	r4,-12(fp)
   1032c:	01400304 	movi	r5,12
   10330:	000d1bc0 	call	d1bc <__mulsi3>
   10334:	1007883a 	mov	r3,r2
   10338:	00800074 	movhi	r2,1
   1033c:	108d8e04 	addi	r2,r2,13880
   10340:	1885883a 	add	r2,r3,r2
   10344:	00000106 	br	1034c <write+0x48>
   10348:	0005883a 	mov	r2,zero
   1034c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   10350:	e0bffb17 	ldw	r2,-20(fp)
   10354:	10002126 	beq	r2,zero,103dc <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   10358:	e0bffb17 	ldw	r2,-20(fp)
   1035c:	10800217 	ldw	r2,8(r2)
   10360:	108000cc 	andi	r2,r2,3
   10364:	10001826 	beq	r2,zero,103c8 <write+0xc4>
   10368:	e0bffb17 	ldw	r2,-20(fp)
   1036c:	10800017 	ldw	r2,0(r2)
   10370:	10800617 	ldw	r2,24(r2)
   10374:	10001426 	beq	r2,zero,103c8 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   10378:	e0bffb17 	ldw	r2,-20(fp)
   1037c:	10800017 	ldw	r2,0(r2)
   10380:	10800617 	ldw	r2,24(r2)
   10384:	e0ffff17 	ldw	r3,-4(fp)
   10388:	e13ffb17 	ldw	r4,-20(fp)
   1038c:	e17ffe17 	ldw	r5,-8(fp)
   10390:	180d883a 	mov	r6,r3
   10394:	103ee83a 	callr	r2
   10398:	e0bffc15 	stw	r2,-16(fp)
   1039c:	e0bffc17 	ldw	r2,-16(fp)
   103a0:	1000070e 	bge	r2,zero,103c0 <write+0xbc>
      {
        ALT_ERRNO = -rval;
   103a4:	00102b40 	call	102b4 <alt_get_errno>
   103a8:	1007883a 	mov	r3,r2
   103ac:	e0bffc17 	ldw	r2,-16(fp)
   103b0:	0085c83a 	sub	r2,zero,r2
   103b4:	18800015 	stw	r2,0(r3)
        return -1;
   103b8:	00bfffc4 	movi	r2,-1
   103bc:	00000c06 	br	103f0 <write+0xec>
      }
      return rval;
   103c0:	e0bffc17 	ldw	r2,-16(fp)
   103c4:	00000a06 	br	103f0 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   103c8:	00102b40 	call	102b4 <alt_get_errno>
   103cc:	1007883a 	mov	r3,r2
   103d0:	00800344 	movi	r2,13
   103d4:	18800015 	stw	r2,0(r3)
   103d8:	00000406 	br	103ec <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   103dc:	00102b40 	call	102b4 <alt_get_errno>
   103e0:	1007883a 	mov	r3,r2
   103e4:	00801444 	movi	r2,81
   103e8:	18800015 	stw	r2,0(r3)
  }
  return -1;
   103ec:	00bfffc4 	movi	r2,-1
}
   103f0:	e037883a 	mov	sp,fp
   103f4:	dfc00117 	ldw	ra,4(sp)
   103f8:	df000017 	ldw	fp,0(sp)
   103fc:	dec00204 	addi	sp,sp,8
   10400:	f800283a 	ret

00010404 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   10404:	defffd04 	addi	sp,sp,-12
   10408:	dfc00215 	stw	ra,8(sp)
   1040c:	df000115 	stw	fp,4(sp)
   10410:	df000104 	addi	fp,sp,4
   10414:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   10418:	e13fff17 	ldw	r4,-4(fp)
   1041c:	01400074 	movhi	r5,1
   10420:	29520e04 	addi	r5,r5,18488
   10424:	00112080 	call	11208 <alt_dev_llist_insert>
}
   10428:	e037883a 	mov	sp,fp
   1042c:	dfc00117 	ldw	ra,4(sp)
   10430:	df000017 	ldw	fp,0(sp)
   10434:	dec00204 	addi	sp,sp,8
   10438:	f800283a 	ret

0001043c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   1043c:	defffd04 	addi	sp,sp,-12
   10440:	dfc00215 	stw	ra,8(sp)
   10444:	df000115 	stw	fp,4(sp)
   10448:	df000104 	addi	fp,sp,4
   1044c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
   10450:	0011be80 	call	11be8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   10454:	00800044 	movi	r2,1
   10458:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   1045c:	e037883a 	mov	sp,fp
   10460:	dfc00117 	ldw	ra,4(sp)
   10464:	df000017 	ldw	fp,0(sp)
   10468:	dec00204 	addi	sp,sp,8
   1046c:	f800283a 	ret

00010470 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   10470:	defffe04 	addi	sp,sp,-8
   10474:	dfc00115 	stw	ra,4(sp)
   10478:	df000015 	stw	fp,0(sp)
   1047c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   10480:	01000074 	movhi	r4,1
   10484:	210df804 	addi	r4,r4,14304
   10488:	000b883a 	mov	r5,zero
   1048c:	01800144 	movi	r6,5
   10490:	001061c0 	call	1061c <altera_avalon_jtag_uart_init>
   10494:	01000074 	movhi	r4,1
   10498:	210dee04 	addi	r4,r4,14264
   1049c:	00104040 	call	10404 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
   104a0:	0001883a 	nop
}
   104a4:	e037883a 	mov	sp,fp
   104a8:	dfc00117 	ldw	ra,4(sp)
   104ac:	df000017 	ldw	fp,0(sp)
   104b0:	dec00204 	addi	sp,sp,8
   104b4:	f800283a 	ret

000104b8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   104b8:	defffa04 	addi	sp,sp,-24
   104bc:	dfc00515 	stw	ra,20(sp)
   104c0:	df000415 	stw	fp,16(sp)
   104c4:	df000404 	addi	fp,sp,16
   104c8:	e13ffd15 	stw	r4,-12(fp)
   104cc:	e17ffe15 	stw	r5,-8(fp)
   104d0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   104d4:	e0bffd17 	ldw	r2,-12(fp)
   104d8:	10800017 	ldw	r2,0(r2)
   104dc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   104e0:	e0bffc17 	ldw	r2,-16(fp)
   104e4:	10c00a04 	addi	r3,r2,40
   104e8:	e0bffd17 	ldw	r2,-12(fp)
   104ec:	10800217 	ldw	r2,8(r2)
   104f0:	1809883a 	mov	r4,r3
   104f4:	e17ffe17 	ldw	r5,-8(fp)
   104f8:	e1bfff17 	ldw	r6,-4(fp)
   104fc:	100f883a 	mov	r7,r2
   10500:	0010ae00 	call	10ae0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   10504:	e037883a 	mov	sp,fp
   10508:	dfc00117 	ldw	ra,4(sp)
   1050c:	df000017 	ldw	fp,0(sp)
   10510:	dec00204 	addi	sp,sp,8
   10514:	f800283a 	ret

00010518 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   10518:	defffa04 	addi	sp,sp,-24
   1051c:	dfc00515 	stw	ra,20(sp)
   10520:	df000415 	stw	fp,16(sp)
   10524:	df000404 	addi	fp,sp,16
   10528:	e13ffd15 	stw	r4,-12(fp)
   1052c:	e17ffe15 	stw	r5,-8(fp)
   10530:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   10534:	e0bffd17 	ldw	r2,-12(fp)
   10538:	10800017 	ldw	r2,0(r2)
   1053c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   10540:	e0bffc17 	ldw	r2,-16(fp)
   10544:	10c00a04 	addi	r3,r2,40
   10548:	e0bffd17 	ldw	r2,-12(fp)
   1054c:	10800217 	ldw	r2,8(r2)
   10550:	1809883a 	mov	r4,r3
   10554:	e17ffe17 	ldw	r5,-8(fp)
   10558:	e1bfff17 	ldw	r6,-4(fp)
   1055c:	100f883a 	mov	r7,r2
   10560:	0010cec0 	call	10cec <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   10564:	e037883a 	mov	sp,fp
   10568:	dfc00117 	ldw	ra,4(sp)
   1056c:	df000017 	ldw	fp,0(sp)
   10570:	dec00204 	addi	sp,sp,8
   10574:	f800283a 	ret

00010578 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   10578:	defffc04 	addi	sp,sp,-16
   1057c:	dfc00315 	stw	ra,12(sp)
   10580:	df000215 	stw	fp,8(sp)
   10584:	df000204 	addi	fp,sp,8
   10588:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1058c:	e0bfff17 	ldw	r2,-4(fp)
   10590:	10800017 	ldw	r2,0(r2)
   10594:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   10598:	e0bffe17 	ldw	r2,-8(fp)
   1059c:	10c00a04 	addi	r3,r2,40
   105a0:	e0bfff17 	ldw	r2,-4(fp)
   105a4:	10800217 	ldw	r2,8(r2)
   105a8:	1809883a 	mov	r4,r3
   105ac:	100b883a 	mov	r5,r2
   105b0:	001098c0 	call	1098c <altera_avalon_jtag_uart_close>
}
   105b4:	e037883a 	mov	sp,fp
   105b8:	dfc00117 	ldw	ra,4(sp)
   105bc:	df000017 	ldw	fp,0(sp)
   105c0:	dec00204 	addi	sp,sp,8
   105c4:	f800283a 	ret

000105c8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   105c8:	defffa04 	addi	sp,sp,-24
   105cc:	dfc00515 	stw	ra,20(sp)
   105d0:	df000415 	stw	fp,16(sp)
   105d4:	df000404 	addi	fp,sp,16
   105d8:	e13ffd15 	stw	r4,-12(fp)
   105dc:	e17ffe15 	stw	r5,-8(fp)
   105e0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   105e4:	e0bffd17 	ldw	r2,-12(fp)
   105e8:	10800017 	ldw	r2,0(r2)
   105ec:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   105f0:	e0bffc17 	ldw	r2,-16(fp)
   105f4:	10800a04 	addi	r2,r2,40
   105f8:	1009883a 	mov	r4,r2
   105fc:	e17ffe17 	ldw	r5,-8(fp)
   10600:	e1bfff17 	ldw	r6,-4(fp)
   10604:	00109f40 	call	109f4 <altera_avalon_jtag_uart_ioctl>
}
   10608:	e037883a 	mov	sp,fp
   1060c:	dfc00117 	ldw	ra,4(sp)
   10610:	df000017 	ldw	fp,0(sp)
   10614:	dec00204 	addi	sp,sp,8
   10618:	f800283a 	ret

0001061c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   1061c:	defffa04 	addi	sp,sp,-24
   10620:	dfc00515 	stw	ra,20(sp)
   10624:	df000415 	stw	fp,16(sp)
   10628:	df000404 	addi	fp,sp,16
   1062c:	e13ffd15 	stw	r4,-12(fp)
   10630:	e17ffe15 	stw	r5,-8(fp)
   10634:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   10638:	e0bffd17 	ldw	r2,-12(fp)
   1063c:	00c00044 	movi	r3,1
   10640:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   10644:	e0bffd17 	ldw	r2,-12(fp)
   10648:	10800017 	ldw	r2,0(r2)
   1064c:	10800104 	addi	r2,r2,4
   10650:	1007883a 	mov	r3,r2
   10654:	e0bffd17 	ldw	r2,-12(fp)
   10658:	10800817 	ldw	r2,32(r2)
   1065c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   10660:	e0fffe17 	ldw	r3,-8(fp)
   10664:	e0bfff17 	ldw	r2,-4(fp)
   10668:	d8000015 	stw	zero,0(sp)
   1066c:	1809883a 	mov	r4,r3
   10670:	100b883a 	mov	r5,r2
   10674:	01800074 	movhi	r6,1
   10678:	3181b804 	addi	r6,r6,1760
   1067c:	e1fffd17 	ldw	r7,-12(fp)
   10680:	00113800 	call	11380 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   10684:	e0bffd17 	ldw	r2,-12(fp)
   10688:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   1068c:	e0bffd17 	ldw	r2,-12(fp)
   10690:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   10694:	00800074 	movhi	r2,1
   10698:	1098fd04 	addi	r2,r2,25588
   1069c:	10800017 	ldw	r2,0(r2)
   106a0:	1809883a 	mov	r4,r3
   106a4:	100b883a 	mov	r5,r2
   106a8:	01800074 	movhi	r6,1
   106ac:	31823904 	addi	r6,r6,2276
   106b0:	e1fffd17 	ldw	r7,-12(fp)
   106b4:	0010f040 	call	10f04 <alt_alarm_start>
   106b8:	1000040e 	bge	r2,zero,106cc <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   106bc:	e0fffd17 	ldw	r3,-12(fp)
   106c0:	00a00034 	movhi	r2,32768
   106c4:	10bfffc4 	addi	r2,r2,-1
   106c8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   106cc:	e037883a 	mov	sp,fp
   106d0:	dfc00117 	ldw	ra,4(sp)
   106d4:	df000017 	ldw	fp,0(sp)
   106d8:	dec00204 	addi	sp,sp,8
   106dc:	f800283a 	ret

000106e0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   106e0:	defff804 	addi	sp,sp,-32
   106e4:	df000715 	stw	fp,28(sp)
   106e8:	df000704 	addi	fp,sp,28
   106ec:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   106f0:	e0bfff17 	ldw	r2,-4(fp)
   106f4:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   106f8:	e0bffb17 	ldw	r2,-20(fp)
   106fc:	10800017 	ldw	r2,0(r2)
   10700:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   10704:	e0bffc17 	ldw	r2,-16(fp)
   10708:	10800104 	addi	r2,r2,4
   1070c:	10800037 	ldwio	r2,0(r2)
   10710:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   10714:	e0bffd17 	ldw	r2,-12(fp)
   10718:	1080c00c 	andi	r2,r2,768
   1071c:	1000011e 	bne	r2,zero,10724 <altera_avalon_jtag_uart_irq+0x44>
      break;
   10720:	00006c06 	br	108d4 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   10724:	e0bffd17 	ldw	r2,-12(fp)
   10728:	1080400c 	andi	r2,r2,256
   1072c:	10003426 	beq	r2,zero,10800 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   10730:	00800074 	movhi	r2,1
   10734:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   10738:	e0bffb17 	ldw	r2,-20(fp)
   1073c:	10800a17 	ldw	r2,40(r2)
   10740:	10800044 	addi	r2,r2,1
   10744:	1081ffcc 	andi	r2,r2,2047
   10748:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   1074c:	e0bffb17 	ldw	r2,-20(fp)
   10750:	10c00b17 	ldw	r3,44(r2)
   10754:	e0bffe17 	ldw	r2,-8(fp)
   10758:	1880011e 	bne	r3,r2,10760 <altera_avalon_jtag_uart_irq+0x80>
          break;
   1075c:	00001606 	br	107b8 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   10760:	e0bffc17 	ldw	r2,-16(fp)
   10764:	10800037 	ldwio	r2,0(r2)
   10768:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   1076c:	e0bff917 	ldw	r2,-28(fp)
   10770:	10a0000c 	andi	r2,r2,32768
   10774:	1000011e 	bne	r2,zero,1077c <altera_avalon_jtag_uart_irq+0x9c>
          break;
   10778:	00000f06 	br	107b8 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   1077c:	e0bffb17 	ldw	r2,-20(fp)
   10780:	10800a17 	ldw	r2,40(r2)
   10784:	e0fff917 	ldw	r3,-28(fp)
   10788:	1809883a 	mov	r4,r3
   1078c:	e0fffb17 	ldw	r3,-20(fp)
   10790:	1885883a 	add	r2,r3,r2
   10794:	10800e04 	addi	r2,r2,56
   10798:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1079c:	e0bffb17 	ldw	r2,-20(fp)
   107a0:	10800a17 	ldw	r2,40(r2)
   107a4:	10800044 	addi	r2,r2,1
   107a8:	10c1ffcc 	andi	r3,r2,2047
   107ac:	e0bffb17 	ldw	r2,-20(fp)
   107b0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   107b4:	003fe006 	br	10738 <__alt_data_end+0xfffbb008>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   107b8:	e0bff917 	ldw	r2,-28(fp)
   107bc:	10bfffec 	andhi	r2,r2,65535
   107c0:	10000f26 	beq	r2,zero,10800 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   107c4:	e0bffb17 	ldw	r2,-20(fp)
   107c8:	10c00817 	ldw	r3,32(r2)
   107cc:	00bfff84 	movi	r2,-2
   107d0:	1886703a 	and	r3,r3,r2
   107d4:	e0bffb17 	ldw	r2,-20(fp)
   107d8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   107dc:	e0bffc17 	ldw	r2,-16(fp)
   107e0:	10800104 	addi	r2,r2,4
   107e4:	1007883a 	mov	r3,r2
   107e8:	e0bffb17 	ldw	r2,-20(fp)
   107ec:	10800817 	ldw	r2,32(r2)
   107f0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   107f4:	e0bffc17 	ldw	r2,-16(fp)
   107f8:	10800104 	addi	r2,r2,4
   107fc:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   10800:	e0bffd17 	ldw	r2,-12(fp)
   10804:	1080800c 	andi	r2,r2,512
   10808:	10003126 	beq	r2,zero,108d0 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   1080c:	e0bffd17 	ldw	r2,-12(fp)
   10810:	1004d43a 	srli	r2,r2,16
   10814:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   10818:	00001406 	br	1086c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   1081c:	e0bffc17 	ldw	r2,-16(fp)
   10820:	e0fffb17 	ldw	r3,-20(fp)
   10824:	18c00d17 	ldw	r3,52(r3)
   10828:	e13ffb17 	ldw	r4,-20(fp)
   1082c:	20c7883a 	add	r3,r4,r3
   10830:	18c20e04 	addi	r3,r3,2104
   10834:	18c00003 	ldbu	r3,0(r3)
   10838:	18c03fcc 	andi	r3,r3,255
   1083c:	18c0201c 	xori	r3,r3,128
   10840:	18ffe004 	addi	r3,r3,-128
   10844:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   10848:	e0bffb17 	ldw	r2,-20(fp)
   1084c:	10800d17 	ldw	r2,52(r2)
   10850:	10800044 	addi	r2,r2,1
   10854:	10c1ffcc 	andi	r3,r2,2047
   10858:	e0bffb17 	ldw	r2,-20(fp)
   1085c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   10860:	e0bffa17 	ldw	r2,-24(fp)
   10864:	10bfffc4 	addi	r2,r2,-1
   10868:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   1086c:	e0bffa17 	ldw	r2,-24(fp)
   10870:	10000526 	beq	r2,zero,10888 <altera_avalon_jtag_uart_irq+0x1a8>
   10874:	e0bffb17 	ldw	r2,-20(fp)
   10878:	10c00d17 	ldw	r3,52(r2)
   1087c:	e0bffb17 	ldw	r2,-20(fp)
   10880:	10800c17 	ldw	r2,48(r2)
   10884:	18bfe51e 	bne	r3,r2,1081c <__alt_data_end+0xfffbb0ec>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   10888:	e0bffa17 	ldw	r2,-24(fp)
   1088c:	10001026 	beq	r2,zero,108d0 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   10890:	e0bffb17 	ldw	r2,-20(fp)
   10894:	10c00817 	ldw	r3,32(r2)
   10898:	00bfff44 	movi	r2,-3
   1089c:	1886703a 	and	r3,r3,r2
   108a0:	e0bffb17 	ldw	r2,-20(fp)
   108a4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   108a8:	e0bffb17 	ldw	r2,-20(fp)
   108ac:	10800017 	ldw	r2,0(r2)
   108b0:	10800104 	addi	r2,r2,4
   108b4:	1007883a 	mov	r3,r2
   108b8:	e0bffb17 	ldw	r2,-20(fp)
   108bc:	10800817 	ldw	r2,32(r2)
   108c0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   108c4:	e0bffc17 	ldw	r2,-16(fp)
   108c8:	10800104 	addi	r2,r2,4
   108cc:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   108d0:	003f8c06 	br	10704 <__alt_data_end+0xfffbafd4>
}
   108d4:	e037883a 	mov	sp,fp
   108d8:	df000017 	ldw	fp,0(sp)
   108dc:	dec00104 	addi	sp,sp,4
   108e0:	f800283a 	ret

000108e4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   108e4:	defff804 	addi	sp,sp,-32
   108e8:	df000715 	stw	fp,28(sp)
   108ec:	df000704 	addi	fp,sp,28
   108f0:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   108f4:	e0bffb17 	ldw	r2,-20(fp)
   108f8:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   108fc:	e0bff917 	ldw	r2,-28(fp)
   10900:	10800017 	ldw	r2,0(r2)
   10904:	10800104 	addi	r2,r2,4
   10908:	10800037 	ldwio	r2,0(r2)
   1090c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   10910:	e0bffa17 	ldw	r2,-24(fp)
   10914:	1081000c 	andi	r2,r2,1024
   10918:	10000b26 	beq	r2,zero,10948 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   1091c:	e0bff917 	ldw	r2,-28(fp)
   10920:	10800017 	ldw	r2,0(r2)
   10924:	10800104 	addi	r2,r2,4
   10928:	1007883a 	mov	r3,r2
   1092c:	e0bff917 	ldw	r2,-28(fp)
   10930:	10800817 	ldw	r2,32(r2)
   10934:	10810014 	ori	r2,r2,1024
   10938:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   1093c:	e0bff917 	ldw	r2,-28(fp)
   10940:	10000915 	stw	zero,36(r2)
   10944:	00000a06 	br	10970 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   10948:	e0bff917 	ldw	r2,-28(fp)
   1094c:	10c00917 	ldw	r3,36(r2)
   10950:	00a00034 	movhi	r2,32768
   10954:	10bfff04 	addi	r2,r2,-4
   10958:	10c00536 	bltu	r2,r3,10970 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   1095c:	e0bff917 	ldw	r2,-28(fp)
   10960:	10800917 	ldw	r2,36(r2)
   10964:	10c00044 	addi	r3,r2,1
   10968:	e0bff917 	ldw	r2,-28(fp)
   1096c:	10c00915 	stw	r3,36(r2)
   10970:	00800074 	movhi	r2,1
   10974:	1098fd04 	addi	r2,r2,25588
   10978:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   1097c:	e037883a 	mov	sp,fp
   10980:	df000017 	ldw	fp,0(sp)
   10984:	dec00104 	addi	sp,sp,4
   10988:	f800283a 	ret

0001098c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   1098c:	defffd04 	addi	sp,sp,-12
   10990:	df000215 	stw	fp,8(sp)
   10994:	df000204 	addi	fp,sp,8
   10998:	e13ffe15 	stw	r4,-8(fp)
   1099c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   109a0:	00000506 	br	109b8 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   109a4:	e0bfff17 	ldw	r2,-4(fp)
   109a8:	1090000c 	andi	r2,r2,16384
   109ac:	10000226 	beq	r2,zero,109b8 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   109b0:	00bffd44 	movi	r2,-11
   109b4:	00000b06 	br	109e4 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   109b8:	e0bffe17 	ldw	r2,-8(fp)
   109bc:	10c00d17 	ldw	r3,52(r2)
   109c0:	e0bffe17 	ldw	r2,-8(fp)
   109c4:	10800c17 	ldw	r2,48(r2)
   109c8:	18800526 	beq	r3,r2,109e0 <altera_avalon_jtag_uart_close+0x54>
   109cc:	e0bffe17 	ldw	r2,-8(fp)
   109d0:	10c00917 	ldw	r3,36(r2)
   109d4:	e0bffe17 	ldw	r2,-8(fp)
   109d8:	10800117 	ldw	r2,4(r2)
   109dc:	18bff136 	bltu	r3,r2,109a4 <__alt_data_end+0xfffbb274>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   109e0:	0005883a 	mov	r2,zero
}
   109e4:	e037883a 	mov	sp,fp
   109e8:	df000017 	ldw	fp,0(sp)
   109ec:	dec00104 	addi	sp,sp,4
   109f0:	f800283a 	ret

000109f4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   109f4:	defffa04 	addi	sp,sp,-24
   109f8:	df000515 	stw	fp,20(sp)
   109fc:	df000504 	addi	fp,sp,20
   10a00:	e13ffd15 	stw	r4,-12(fp)
   10a04:	e17ffe15 	stw	r5,-8(fp)
   10a08:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   10a0c:	00bff9c4 	movi	r2,-25
   10a10:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   10a14:	e0bffe17 	ldw	r2,-8(fp)
   10a18:	10da8060 	cmpeqi	r3,r2,27137
   10a1c:	1800031e 	bne	r3,zero,10a2c <altera_avalon_jtag_uart_ioctl+0x38>
   10a20:	109a80a0 	cmpeqi	r2,r2,27138
   10a24:	1000191e 	bne	r2,zero,10a8c <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
   10a28:	00002806 	br	10acc <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   10a2c:	e0bffd17 	ldw	r2,-12(fp)
   10a30:	10c00117 	ldw	r3,4(r2)
   10a34:	00a00034 	movhi	r2,32768
   10a38:	10bfffc4 	addi	r2,r2,-1
   10a3c:	18801226 	beq	r3,r2,10a88 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
   10a40:	e0bfff17 	ldw	r2,-4(fp)
   10a44:	10800017 	ldw	r2,0(r2)
   10a48:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   10a4c:	e0bffc17 	ldw	r2,-16(fp)
   10a50:	10800090 	cmplti	r2,r2,2
   10a54:	1000061e 	bne	r2,zero,10a70 <altera_avalon_jtag_uart_ioctl+0x7c>
   10a58:	e0fffc17 	ldw	r3,-16(fp)
   10a5c:	00a00034 	movhi	r2,32768
   10a60:	10bfffc4 	addi	r2,r2,-1
   10a64:	18800226 	beq	r3,r2,10a70 <altera_avalon_jtag_uart_ioctl+0x7c>
   10a68:	e0bffc17 	ldw	r2,-16(fp)
   10a6c:	00000206 	br	10a78 <altera_avalon_jtag_uart_ioctl+0x84>
   10a70:	00a00034 	movhi	r2,32768
   10a74:	10bfff84 	addi	r2,r2,-2
   10a78:	e0fffd17 	ldw	r3,-12(fp)
   10a7c:	18800115 	stw	r2,4(r3)
      rc = 0;
   10a80:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   10a84:	00001106 	br	10acc <altera_avalon_jtag_uart_ioctl+0xd8>
   10a88:	00001006 	br	10acc <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   10a8c:	e0bffd17 	ldw	r2,-12(fp)
   10a90:	10c00117 	ldw	r3,4(r2)
   10a94:	00a00034 	movhi	r2,32768
   10a98:	10bfffc4 	addi	r2,r2,-1
   10a9c:	18800a26 	beq	r3,r2,10ac8 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   10aa0:	e0bffd17 	ldw	r2,-12(fp)
   10aa4:	10c00917 	ldw	r3,36(r2)
   10aa8:	e0bffd17 	ldw	r2,-12(fp)
   10aac:	10800117 	ldw	r2,4(r2)
   10ab0:	1885803a 	cmpltu	r2,r3,r2
   10ab4:	10c03fcc 	andi	r3,r2,255
   10ab8:	e0bfff17 	ldw	r2,-4(fp)
   10abc:	10c00015 	stw	r3,0(r2)
      rc = 0;
   10ac0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   10ac4:	00000006 	br	10ac8 <altera_avalon_jtag_uart_ioctl+0xd4>
   10ac8:	0001883a 	nop

  default:
    break;
  }

  return rc;
   10acc:	e0bffb17 	ldw	r2,-20(fp)
}
   10ad0:	e037883a 	mov	sp,fp
   10ad4:	df000017 	ldw	fp,0(sp)
   10ad8:	dec00104 	addi	sp,sp,4
   10adc:	f800283a 	ret

00010ae0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   10ae0:	defff304 	addi	sp,sp,-52
   10ae4:	dfc00c15 	stw	ra,48(sp)
   10ae8:	df000b15 	stw	fp,44(sp)
   10aec:	df000b04 	addi	fp,sp,44
   10af0:	e13ffc15 	stw	r4,-16(fp)
   10af4:	e17ffd15 	stw	r5,-12(fp)
   10af8:	e1bffe15 	stw	r6,-8(fp)
   10afc:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   10b00:	e0bffd17 	ldw	r2,-12(fp)
   10b04:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   10b08:	00004906 	br	10c30 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   10b0c:	e0bffc17 	ldw	r2,-16(fp)
   10b10:	10800a17 	ldw	r2,40(r2)
   10b14:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   10b18:	e0bffc17 	ldw	r2,-16(fp)
   10b1c:	10800b17 	ldw	r2,44(r2)
   10b20:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   10b24:	e0fff717 	ldw	r3,-36(fp)
   10b28:	e0bff817 	ldw	r2,-32(fp)
   10b2c:	18800536 	bltu	r3,r2,10b44 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   10b30:	e0fff717 	ldw	r3,-36(fp)
   10b34:	e0bff817 	ldw	r2,-32(fp)
   10b38:	1885c83a 	sub	r2,r3,r2
   10b3c:	e0bff615 	stw	r2,-40(fp)
   10b40:	00000406 	br	10b54 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   10b44:	00c20004 	movi	r3,2048
   10b48:	e0bff817 	ldw	r2,-32(fp)
   10b4c:	1885c83a 	sub	r2,r3,r2
   10b50:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   10b54:	e0bff617 	ldw	r2,-40(fp)
   10b58:	1000011e 	bne	r2,zero,10b60 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
   10b5c:	00001d06 	br	10bd4 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
   10b60:	e0fffe17 	ldw	r3,-8(fp)
   10b64:	e0bff617 	ldw	r2,-40(fp)
   10b68:	1880022e 	bgeu	r3,r2,10b74 <altera_avalon_jtag_uart_read+0x94>
        n = space;
   10b6c:	e0bffe17 	ldw	r2,-8(fp)
   10b70:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   10b74:	e0bff817 	ldw	r2,-32(fp)
   10b78:	10800e04 	addi	r2,r2,56
   10b7c:	e0fffc17 	ldw	r3,-16(fp)
   10b80:	1885883a 	add	r2,r3,r2
   10b84:	e13ff517 	ldw	r4,-44(fp)
   10b88:	100b883a 	mov	r5,r2
   10b8c:	e1bff617 	ldw	r6,-40(fp)
   10b90:	00089b80 	call	89b8 <memcpy>
      ptr   += n;
   10b94:	e0fff517 	ldw	r3,-44(fp)
   10b98:	e0bff617 	ldw	r2,-40(fp)
   10b9c:	1885883a 	add	r2,r3,r2
   10ba0:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   10ba4:	e0fffe17 	ldw	r3,-8(fp)
   10ba8:	e0bff617 	ldw	r2,-40(fp)
   10bac:	1885c83a 	sub	r2,r3,r2
   10bb0:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   10bb4:	e0fff817 	ldw	r3,-32(fp)
   10bb8:	e0bff617 	ldw	r2,-40(fp)
   10bbc:	1885883a 	add	r2,r3,r2
   10bc0:	10c1ffcc 	andi	r3,r2,2047
   10bc4:	e0bffc17 	ldw	r2,-16(fp)
   10bc8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   10bcc:	e0bffe17 	ldw	r2,-8(fp)
   10bd0:	00bfce16 	blt	zero,r2,10b0c <__alt_data_end+0xfffbb3dc>

    /* If we read any data then return it */
    if (ptr != buffer)
   10bd4:	e0fff517 	ldw	r3,-44(fp)
   10bd8:	e0bffd17 	ldw	r2,-12(fp)
   10bdc:	18800126 	beq	r3,r2,10be4 <altera_avalon_jtag_uart_read+0x104>
      break;
   10be0:	00001506 	br	10c38 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   10be4:	e0bfff17 	ldw	r2,-4(fp)
   10be8:	1090000c 	andi	r2,r2,16384
   10bec:	10000126 	beq	r2,zero,10bf4 <altera_avalon_jtag_uart_read+0x114>
      break;
   10bf0:	00001106 	br	10c38 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   10bf4:	0001883a 	nop
   10bf8:	e0bffc17 	ldw	r2,-16(fp)
   10bfc:	10c00a17 	ldw	r3,40(r2)
   10c00:	e0bff717 	ldw	r2,-36(fp)
   10c04:	1880051e 	bne	r3,r2,10c1c <altera_avalon_jtag_uart_read+0x13c>
   10c08:	e0bffc17 	ldw	r2,-16(fp)
   10c0c:	10c00917 	ldw	r3,36(r2)
   10c10:	e0bffc17 	ldw	r2,-16(fp)
   10c14:	10800117 	ldw	r2,4(r2)
   10c18:	18bff736 	bltu	r3,r2,10bf8 <__alt_data_end+0xfffbb4c8>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   10c1c:	e0bffc17 	ldw	r2,-16(fp)
   10c20:	10c00a17 	ldw	r3,40(r2)
   10c24:	e0bff717 	ldw	r2,-36(fp)
   10c28:	1880011e 	bne	r3,r2,10c30 <altera_avalon_jtag_uart_read+0x150>
      break;
   10c2c:	00000206 	br	10c38 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   10c30:	e0bffe17 	ldw	r2,-8(fp)
   10c34:	00bfb516 	blt	zero,r2,10b0c <__alt_data_end+0xfffbb3dc>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   10c38:	e0fff517 	ldw	r3,-44(fp)
   10c3c:	e0bffd17 	ldw	r2,-12(fp)
   10c40:	18801826 	beq	r3,r2,10ca4 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10c44:	0005303a 	rdctl	r2,status
   10c48:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10c4c:	e0fffa17 	ldw	r3,-24(fp)
   10c50:	00bfff84 	movi	r2,-2
   10c54:	1884703a 	and	r2,r3,r2
   10c58:	1001703a 	wrctl	status,r2
  
  return context;
   10c5c:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   10c60:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   10c64:	e0bffc17 	ldw	r2,-16(fp)
   10c68:	10800817 	ldw	r2,32(r2)
   10c6c:	10c00054 	ori	r3,r2,1
   10c70:	e0bffc17 	ldw	r2,-16(fp)
   10c74:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   10c78:	e0bffc17 	ldw	r2,-16(fp)
   10c7c:	10800017 	ldw	r2,0(r2)
   10c80:	10800104 	addi	r2,r2,4
   10c84:	1007883a 	mov	r3,r2
   10c88:	e0bffc17 	ldw	r2,-16(fp)
   10c8c:	10800817 	ldw	r2,32(r2)
   10c90:	18800035 	stwio	r2,0(r3)
   10c94:	e0bff917 	ldw	r2,-28(fp)
   10c98:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10c9c:	e0bffb17 	ldw	r2,-20(fp)
   10ca0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   10ca4:	e0fff517 	ldw	r3,-44(fp)
   10ca8:	e0bffd17 	ldw	r2,-12(fp)
   10cac:	18800426 	beq	r3,r2,10cc0 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
   10cb0:	e0fff517 	ldw	r3,-44(fp)
   10cb4:	e0bffd17 	ldw	r2,-12(fp)
   10cb8:	1885c83a 	sub	r2,r3,r2
   10cbc:	00000606 	br	10cd8 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
   10cc0:	e0bfff17 	ldw	r2,-4(fp)
   10cc4:	1090000c 	andi	r2,r2,16384
   10cc8:	10000226 	beq	r2,zero,10cd4 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
   10ccc:	00bffd44 	movi	r2,-11
   10cd0:	00000106 	br	10cd8 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
   10cd4:	00bffec4 	movi	r2,-5
}
   10cd8:	e037883a 	mov	sp,fp
   10cdc:	dfc00117 	ldw	ra,4(sp)
   10ce0:	df000017 	ldw	fp,0(sp)
   10ce4:	dec00204 	addi	sp,sp,8
   10ce8:	f800283a 	ret

00010cec <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   10cec:	defff304 	addi	sp,sp,-52
   10cf0:	dfc00c15 	stw	ra,48(sp)
   10cf4:	df000b15 	stw	fp,44(sp)
   10cf8:	df000b04 	addi	fp,sp,44
   10cfc:	e13ffc15 	stw	r4,-16(fp)
   10d00:	e17ffd15 	stw	r5,-12(fp)
   10d04:	e1bffe15 	stw	r6,-8(fp)
   10d08:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   10d0c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   10d10:	e0bffd17 	ldw	r2,-12(fp)
   10d14:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   10d18:	00003806 	br	10dfc <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   10d1c:	e0bffc17 	ldw	r2,-16(fp)
   10d20:	10800c17 	ldw	r2,48(r2)
   10d24:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
   10d28:	e0bffc17 	ldw	r2,-16(fp)
   10d2c:	10800d17 	ldw	r2,52(r2)
   10d30:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   10d34:	e0fff817 	ldw	r3,-32(fp)
   10d38:	e0bff517 	ldw	r2,-44(fp)
   10d3c:	1880062e 	bgeu	r3,r2,10d58 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   10d40:	e0fff517 	ldw	r3,-44(fp)
   10d44:	e0bff817 	ldw	r2,-32(fp)
   10d48:	1885c83a 	sub	r2,r3,r2
   10d4c:	10bfffc4 	addi	r2,r2,-1
   10d50:	e0bff615 	stw	r2,-40(fp)
   10d54:	00000b06 	br	10d84 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   10d58:	e0bff517 	ldw	r2,-44(fp)
   10d5c:	10000526 	beq	r2,zero,10d74 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   10d60:	00c20004 	movi	r3,2048
   10d64:	e0bff817 	ldw	r2,-32(fp)
   10d68:	1885c83a 	sub	r2,r3,r2
   10d6c:	e0bff615 	stw	r2,-40(fp)
   10d70:	00000406 	br	10d84 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   10d74:	00c1ffc4 	movi	r3,2047
   10d78:	e0bff817 	ldw	r2,-32(fp)
   10d7c:	1885c83a 	sub	r2,r3,r2
   10d80:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   10d84:	e0bff617 	ldw	r2,-40(fp)
   10d88:	1000011e 	bne	r2,zero,10d90 <altera_avalon_jtag_uart_write+0xa4>
        break;
   10d8c:	00001d06 	br	10e04 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
   10d90:	e0fffe17 	ldw	r3,-8(fp)
   10d94:	e0bff617 	ldw	r2,-40(fp)
   10d98:	1880022e 	bgeu	r3,r2,10da4 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
   10d9c:	e0bffe17 	ldw	r2,-8(fp)
   10da0:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   10da4:	e0bff817 	ldw	r2,-32(fp)
   10da8:	10820e04 	addi	r2,r2,2104
   10dac:	e0fffc17 	ldw	r3,-16(fp)
   10db0:	1885883a 	add	r2,r3,r2
   10db4:	1009883a 	mov	r4,r2
   10db8:	e17ffd17 	ldw	r5,-12(fp)
   10dbc:	e1bff617 	ldw	r6,-40(fp)
   10dc0:	00089b80 	call	89b8 <memcpy>
      ptr   += n;
   10dc4:	e0fffd17 	ldw	r3,-12(fp)
   10dc8:	e0bff617 	ldw	r2,-40(fp)
   10dcc:	1885883a 	add	r2,r3,r2
   10dd0:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   10dd4:	e0fffe17 	ldw	r3,-8(fp)
   10dd8:	e0bff617 	ldw	r2,-40(fp)
   10ddc:	1885c83a 	sub	r2,r3,r2
   10de0:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   10de4:	e0fff817 	ldw	r3,-32(fp)
   10de8:	e0bff617 	ldw	r2,-40(fp)
   10dec:	1885883a 	add	r2,r3,r2
   10df0:	10c1ffcc 	andi	r3,r2,2047
   10df4:	e0bffc17 	ldw	r2,-16(fp)
   10df8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   10dfc:	e0bffe17 	ldw	r2,-8(fp)
   10e00:	00bfc616 	blt	zero,r2,10d1c <__alt_data_end+0xfffbb5ec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10e04:	0005303a 	rdctl	r2,status
   10e08:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10e0c:	e0fffa17 	ldw	r3,-24(fp)
   10e10:	00bfff84 	movi	r2,-2
   10e14:	1884703a 	and	r2,r3,r2
   10e18:	1001703a 	wrctl	status,r2
  
  return context;
   10e1c:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   10e20:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   10e24:	e0bffc17 	ldw	r2,-16(fp)
   10e28:	10800817 	ldw	r2,32(r2)
   10e2c:	10c00094 	ori	r3,r2,2
   10e30:	e0bffc17 	ldw	r2,-16(fp)
   10e34:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   10e38:	e0bffc17 	ldw	r2,-16(fp)
   10e3c:	10800017 	ldw	r2,0(r2)
   10e40:	10800104 	addi	r2,r2,4
   10e44:	1007883a 	mov	r3,r2
   10e48:	e0bffc17 	ldw	r2,-16(fp)
   10e4c:	10800817 	ldw	r2,32(r2)
   10e50:	18800035 	stwio	r2,0(r3)
   10e54:	e0bff917 	ldw	r2,-28(fp)
   10e58:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10e5c:	e0bffb17 	ldw	r2,-20(fp)
   10e60:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   10e64:	e0bffe17 	ldw	r2,-8(fp)
   10e68:	0080120e 	bge	zero,r2,10eb4 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
   10e6c:	e0bfff17 	ldw	r2,-4(fp)
   10e70:	1090000c 	andi	r2,r2,16384
   10e74:	10000126 	beq	r2,zero,10e7c <altera_avalon_jtag_uart_write+0x190>
        break;
   10e78:	00001006 	br	10ebc <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   10e7c:	0001883a 	nop
   10e80:	e0bffc17 	ldw	r2,-16(fp)
   10e84:	10c00d17 	ldw	r3,52(r2)
   10e88:	e0bff517 	ldw	r2,-44(fp)
   10e8c:	1880051e 	bne	r3,r2,10ea4 <altera_avalon_jtag_uart_write+0x1b8>
   10e90:	e0bffc17 	ldw	r2,-16(fp)
   10e94:	10c00917 	ldw	r3,36(r2)
   10e98:	e0bffc17 	ldw	r2,-16(fp)
   10e9c:	10800117 	ldw	r2,4(r2)
   10ea0:	18bff736 	bltu	r3,r2,10e80 <__alt_data_end+0xfffbb750>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   10ea4:	e0bffc17 	ldw	r2,-16(fp)
   10ea8:	10800917 	ldw	r2,36(r2)
   10eac:	10000126 	beq	r2,zero,10eb4 <altera_avalon_jtag_uart_write+0x1c8>
         break;
   10eb0:	00000206 	br	10ebc <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
   10eb4:	e0bffe17 	ldw	r2,-8(fp)
   10eb8:	00bf9716 	blt	zero,r2,10d18 <__alt_data_end+0xfffbb5e8>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   10ebc:	e0fffd17 	ldw	r3,-12(fp)
   10ec0:	e0bff717 	ldw	r2,-36(fp)
   10ec4:	18800426 	beq	r3,r2,10ed8 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
   10ec8:	e0fffd17 	ldw	r3,-12(fp)
   10ecc:	e0bff717 	ldw	r2,-36(fp)
   10ed0:	1885c83a 	sub	r2,r3,r2
   10ed4:	00000606 	br	10ef0 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
   10ed8:	e0bfff17 	ldw	r2,-4(fp)
   10edc:	1090000c 	andi	r2,r2,16384
   10ee0:	10000226 	beq	r2,zero,10eec <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
   10ee4:	00bffd44 	movi	r2,-11
   10ee8:	00000106 	br	10ef0 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   10eec:	00bffec4 	movi	r2,-5
}
   10ef0:	e037883a 	mov	sp,fp
   10ef4:	dfc00117 	ldw	ra,4(sp)
   10ef8:	df000017 	ldw	fp,0(sp)
   10efc:	dec00204 	addi	sp,sp,8
   10f00:	f800283a 	ret

00010f04 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   10f04:	defff504 	addi	sp,sp,-44
   10f08:	df000a15 	stw	fp,40(sp)
   10f0c:	df000a04 	addi	fp,sp,40
   10f10:	e13ffc15 	stw	r4,-16(fp)
   10f14:	e17ffd15 	stw	r5,-12(fp)
   10f18:	e1bffe15 	stw	r6,-8(fp)
   10f1c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   10f20:	e03ff615 	stw	zero,-40(fp)
   10f24:	00800074 	movhi	r2,1
   10f28:	1098fd04 	addi	r2,r2,25588
   10f2c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   10f30:	10003f26 	beq	r2,zero,11030 <alt_alarm_start+0x12c>
  {
    if (alarm)
   10f34:	e0bffc17 	ldw	r2,-16(fp)
   10f38:	10003b26 	beq	r2,zero,11028 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   10f3c:	e0bffc17 	ldw	r2,-16(fp)
   10f40:	e0fffe17 	ldw	r3,-8(fp)
   10f44:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   10f48:	e0bffc17 	ldw	r2,-16(fp)
   10f4c:	e0ffff17 	ldw	r3,-4(fp)
   10f50:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10f54:	0005303a 	rdctl	r2,status
   10f58:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10f5c:	e0fff817 	ldw	r3,-32(fp)
   10f60:	00bfff84 	movi	r2,-2
   10f64:	1884703a 	and	r2,r3,r2
   10f68:	1001703a 	wrctl	status,r2
  
  return context;
   10f6c:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   10f70:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   10f74:	00800074 	movhi	r2,1
   10f78:	1098fe04 	addi	r2,r2,25592
   10f7c:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   10f80:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   10f84:	e0fffd17 	ldw	r3,-12(fp)
   10f88:	e0bff617 	ldw	r2,-40(fp)
   10f8c:	1885883a 	add	r2,r3,r2
   10f90:	10c00044 	addi	r3,r2,1
   10f94:	e0bffc17 	ldw	r2,-16(fp)
   10f98:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   10f9c:	e0bffc17 	ldw	r2,-16(fp)
   10fa0:	10c00217 	ldw	r3,8(r2)
   10fa4:	e0bff617 	ldw	r2,-40(fp)
   10fa8:	1880042e 	bgeu	r3,r2,10fbc <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   10fac:	e0bffc17 	ldw	r2,-16(fp)
   10fb0:	00c00044 	movi	r3,1
   10fb4:	10c00405 	stb	r3,16(r2)
   10fb8:	00000206 	br	10fc4 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   10fbc:	e0bffc17 	ldw	r2,-16(fp)
   10fc0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   10fc4:	e0fffc17 	ldw	r3,-16(fp)
   10fc8:	00800074 	movhi	r2,1
   10fcc:	10921404 	addi	r2,r2,18512
   10fd0:	e0bff915 	stw	r2,-28(fp)
   10fd4:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   10fd8:	e0bffa17 	ldw	r2,-24(fp)
   10fdc:	e0fff917 	ldw	r3,-28(fp)
   10fe0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   10fe4:	e0bff917 	ldw	r2,-28(fp)
   10fe8:	10c00017 	ldw	r3,0(r2)
   10fec:	e0bffa17 	ldw	r2,-24(fp)
   10ff0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   10ff4:	e0bff917 	ldw	r2,-28(fp)
   10ff8:	10800017 	ldw	r2,0(r2)
   10ffc:	e0fffa17 	ldw	r3,-24(fp)
   11000:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   11004:	e0bff917 	ldw	r2,-28(fp)
   11008:	e0fffa17 	ldw	r3,-24(fp)
   1100c:	10c00015 	stw	r3,0(r2)
   11010:	e0bff717 	ldw	r2,-36(fp)
   11014:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11018:	e0bffb17 	ldw	r2,-20(fp)
   1101c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   11020:	0005883a 	mov	r2,zero
   11024:	00000306 	br	11034 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   11028:	00bffa84 	movi	r2,-22
   1102c:	00000106 	br	11034 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   11030:	00bfde84 	movi	r2,-134
  }
}
   11034:	e037883a 	mov	sp,fp
   11038:	df000017 	ldw	fp,0(sp)
   1103c:	dec00104 	addi	sp,sp,4
   11040:	f800283a 	ret

00011044 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   11044:	defffa04 	addi	sp,sp,-24
   11048:	dfc00515 	stw	ra,20(sp)
   1104c:	df000415 	stw	fp,16(sp)
   11050:	df000404 	addi	fp,sp,16
   11054:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   11058:	00800244 	movi	r2,9
   1105c:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   11060:	e13ffd17 	ldw	r4,-12(fp)
   11064:	014003f4 	movhi	r5,15
   11068:	29509004 	addi	r5,r5,16960
   1106c:	000d1bc0 	call	d1bc <__mulsi3>
   11070:	0100bef4 	movhi	r4,763
   11074:	213c2004 	addi	r4,r4,-3968
   11078:	100b883a 	mov	r5,r2
   1107c:	0002fe80 	call	2fe8 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   11080:	01200034 	movhi	r4,32768
   11084:	213fffc4 	addi	r4,r4,-1
   11088:	100b883a 	mov	r5,r2
   1108c:	0002fe80 	call	2fe8 <__udivsi3>
   11090:	e13fff17 	ldw	r4,-4(fp)
   11094:	100b883a 	mov	r5,r2
   11098:	0002fe80 	call	2fe8 <__udivsi3>
   1109c:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   110a0:	e0bffe17 	ldw	r2,-8(fp)
   110a4:	10002a26 	beq	r2,zero,11150 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   110a8:	e03ffc15 	stw	zero,-16(fp)
   110ac:	00001706 	br	1110c <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   110b0:	00a00034 	movhi	r2,32768
   110b4:	10bfffc4 	addi	r2,r2,-1
   110b8:	10bfffc4 	addi	r2,r2,-1
   110bc:	103ffe1e 	bne	r2,zero,110b8 <__alt_data_end+0xfffbb988>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   110c0:	e13ffd17 	ldw	r4,-12(fp)
   110c4:	014003f4 	movhi	r5,15
   110c8:	29509004 	addi	r5,r5,16960
   110cc:	000d1bc0 	call	d1bc <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   110d0:	0100bef4 	movhi	r4,763
   110d4:	213c2004 	addi	r4,r4,-3968
   110d8:	100b883a 	mov	r5,r2
   110dc:	0002fe80 	call	2fe8 <__udivsi3>
   110e0:	01200034 	movhi	r4,32768
   110e4:	213fffc4 	addi	r4,r4,-1
   110e8:	100b883a 	mov	r5,r2
   110ec:	0002fe80 	call	2fe8 <__udivsi3>
   110f0:	1007883a 	mov	r3,r2
   110f4:	e0bfff17 	ldw	r2,-4(fp)
   110f8:	10c5c83a 	sub	r2,r2,r3
   110fc:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   11100:	e0bffc17 	ldw	r2,-16(fp)
   11104:	10800044 	addi	r2,r2,1
   11108:	e0bffc15 	stw	r2,-16(fp)
   1110c:	e0fffc17 	ldw	r3,-16(fp)
   11110:	e0bffe17 	ldw	r2,-8(fp)
   11114:	18bfe616 	blt	r3,r2,110b0 <__alt_data_end+0xfffbb980>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   11118:	e13ffd17 	ldw	r4,-12(fp)
   1111c:	014003f4 	movhi	r5,15
   11120:	29509004 	addi	r5,r5,16960
   11124:	000d1bc0 	call	d1bc <__mulsi3>
   11128:	0100bef4 	movhi	r4,763
   1112c:	213c2004 	addi	r4,r4,-3968
   11130:	100b883a 	mov	r5,r2
   11134:	0002fe80 	call	2fe8 <__udivsi3>
   11138:	1009883a 	mov	r4,r2
   1113c:	e17fff17 	ldw	r5,-4(fp)
   11140:	000d1bc0 	call	d1bc <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   11144:	10bfffc4 	addi	r2,r2,-1
   11148:	103ffe1e 	bne	r2,zero,11144 <__alt_data_end+0xfffbba14>
   1114c:	00000d06 	br	11184 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   11150:	e13ffd17 	ldw	r4,-12(fp)
   11154:	014003f4 	movhi	r5,15
   11158:	29509004 	addi	r5,r5,16960
   1115c:	000d1bc0 	call	d1bc <__mulsi3>
   11160:	0100bef4 	movhi	r4,763
   11164:	213c2004 	addi	r4,r4,-3968
   11168:	100b883a 	mov	r5,r2
   1116c:	0002fe80 	call	2fe8 <__udivsi3>
   11170:	1009883a 	mov	r4,r2
   11174:	e17fff17 	ldw	r5,-4(fp)
   11178:	000d1bc0 	call	d1bc <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   1117c:	10bfffc4 	addi	r2,r2,-1
   11180:	00bffe16 	blt	zero,r2,1117c <__alt_data_end+0xfffbba4c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   11184:	0005883a 	mov	r2,zero
}
   11188:	e037883a 	mov	sp,fp
   1118c:	dfc00117 	ldw	ra,4(sp)
   11190:	df000017 	ldw	fp,0(sp)
   11194:	dec00204 	addi	sp,sp,8
   11198:	f800283a 	ret

0001119c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   1119c:	deffff04 	addi	sp,sp,-4
   111a0:	df000015 	stw	fp,0(sp)
   111a4:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   111a8:	e037883a 	mov	sp,fp
   111ac:	df000017 	ldw	fp,0(sp)
   111b0:	dec00104 	addi	sp,sp,4
   111b4:	f800283a 	ret

000111b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   111b8:	defffe04 	addi	sp,sp,-8
   111bc:	dfc00115 	stw	ra,4(sp)
   111c0:	df000015 	stw	fp,0(sp)
   111c4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   111c8:	00800074 	movhi	r2,1
   111cc:	10921104 	addi	r2,r2,18500
   111d0:	10800017 	ldw	r2,0(r2)
   111d4:	10000526 	beq	r2,zero,111ec <alt_get_errno+0x34>
   111d8:	00800074 	movhi	r2,1
   111dc:	10921104 	addi	r2,r2,18500
   111e0:	10800017 	ldw	r2,0(r2)
   111e4:	103ee83a 	callr	r2
   111e8:	00000206 	br	111f4 <alt_get_errno+0x3c>
   111ec:	00800074 	movhi	r2,1
   111f0:	1098f504 	addi	r2,r2,25556
}
   111f4:	e037883a 	mov	sp,fp
   111f8:	dfc00117 	ldw	ra,4(sp)
   111fc:	df000017 	ldw	fp,0(sp)
   11200:	dec00204 	addi	sp,sp,8
   11204:	f800283a 	ret

00011208 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   11208:	defffa04 	addi	sp,sp,-24
   1120c:	dfc00515 	stw	ra,20(sp)
   11210:	df000415 	stw	fp,16(sp)
   11214:	df000404 	addi	fp,sp,16
   11218:	e13ffe15 	stw	r4,-8(fp)
   1121c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   11220:	e0bffe17 	ldw	r2,-8(fp)
   11224:	10000326 	beq	r2,zero,11234 <alt_dev_llist_insert+0x2c>
   11228:	e0bffe17 	ldw	r2,-8(fp)
   1122c:	10800217 	ldw	r2,8(r2)
   11230:	1000061e 	bne	r2,zero,1124c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   11234:	00111b80 	call	111b8 <alt_get_errno>
   11238:	1007883a 	mov	r3,r2
   1123c:	00800584 	movi	r2,22
   11240:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   11244:	00bffa84 	movi	r2,-22
   11248:	00001306 	br	11298 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   1124c:	e0bffe17 	ldw	r2,-8(fp)
   11250:	e0ffff17 	ldw	r3,-4(fp)
   11254:	e0fffc15 	stw	r3,-16(fp)
   11258:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1125c:	e0bffd17 	ldw	r2,-12(fp)
   11260:	e0fffc17 	ldw	r3,-16(fp)
   11264:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   11268:	e0bffc17 	ldw	r2,-16(fp)
   1126c:	10c00017 	ldw	r3,0(r2)
   11270:	e0bffd17 	ldw	r2,-12(fp)
   11274:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   11278:	e0bffc17 	ldw	r2,-16(fp)
   1127c:	10800017 	ldw	r2,0(r2)
   11280:	e0fffd17 	ldw	r3,-12(fp)
   11284:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   11288:	e0bffc17 	ldw	r2,-16(fp)
   1128c:	e0fffd17 	ldw	r3,-12(fp)
   11290:	10c00015 	stw	r3,0(r2)

  return 0;  
   11294:	0005883a 	mov	r2,zero
}
   11298:	e037883a 	mov	sp,fp
   1129c:	dfc00117 	ldw	ra,4(sp)
   112a0:	df000017 	ldw	fp,0(sp)
   112a4:	dec00204 	addi	sp,sp,8
   112a8:	f800283a 	ret

000112ac <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   112ac:	defffd04 	addi	sp,sp,-12
   112b0:	dfc00215 	stw	ra,8(sp)
   112b4:	df000115 	stw	fp,4(sp)
   112b8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   112bc:	00800074 	movhi	r2,1
   112c0:	1088af04 	addi	r2,r2,8892
   112c4:	e0bfff15 	stw	r2,-4(fp)
   112c8:	00000606 	br	112e4 <_do_ctors+0x38>
        (*ctor) (); 
   112cc:	e0bfff17 	ldw	r2,-4(fp)
   112d0:	10800017 	ldw	r2,0(r2)
   112d4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   112d8:	e0bfff17 	ldw	r2,-4(fp)
   112dc:	10bfff04 	addi	r2,r2,-4
   112e0:	e0bfff15 	stw	r2,-4(fp)
   112e4:	e0ffff17 	ldw	r3,-4(fp)
   112e8:	00800074 	movhi	r2,1
   112ec:	1088b004 	addi	r2,r2,8896
   112f0:	18bff62e 	bgeu	r3,r2,112cc <__alt_data_end+0xfffbbb9c>
        (*ctor) (); 
}
   112f4:	e037883a 	mov	sp,fp
   112f8:	dfc00117 	ldw	ra,4(sp)
   112fc:	df000017 	ldw	fp,0(sp)
   11300:	dec00204 	addi	sp,sp,8
   11304:	f800283a 	ret

00011308 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   11308:	defffd04 	addi	sp,sp,-12
   1130c:	dfc00215 	stw	ra,8(sp)
   11310:	df000115 	stw	fp,4(sp)
   11314:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   11318:	00800074 	movhi	r2,1
   1131c:	1088af04 	addi	r2,r2,8892
   11320:	e0bfff15 	stw	r2,-4(fp)
   11324:	00000606 	br	11340 <_do_dtors+0x38>
        (*dtor) (); 
   11328:	e0bfff17 	ldw	r2,-4(fp)
   1132c:	10800017 	ldw	r2,0(r2)
   11330:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   11334:	e0bfff17 	ldw	r2,-4(fp)
   11338:	10bfff04 	addi	r2,r2,-4
   1133c:	e0bfff15 	stw	r2,-4(fp)
   11340:	e0ffff17 	ldw	r3,-4(fp)
   11344:	00800074 	movhi	r2,1
   11348:	1088b004 	addi	r2,r2,8896
   1134c:	18bff62e 	bgeu	r3,r2,11328 <__alt_data_end+0xfffbbbf8>
        (*dtor) (); 
}
   11350:	e037883a 	mov	sp,fp
   11354:	dfc00117 	ldw	ra,4(sp)
   11358:	df000017 	ldw	fp,0(sp)
   1135c:	dec00204 	addi	sp,sp,8
   11360:	f800283a 	ret

00011364 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   11364:	deffff04 	addi	sp,sp,-4
   11368:	df000015 	stw	fp,0(sp)
   1136c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   11370:	e037883a 	mov	sp,fp
   11374:	df000017 	ldw	fp,0(sp)
   11378:	dec00104 	addi	sp,sp,4
   1137c:	f800283a 	ret

00011380 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   11380:	defff904 	addi	sp,sp,-28
   11384:	dfc00615 	stw	ra,24(sp)
   11388:	df000515 	stw	fp,20(sp)
   1138c:	df000504 	addi	fp,sp,20
   11390:	e13ffc15 	stw	r4,-16(fp)
   11394:	e17ffd15 	stw	r5,-12(fp)
   11398:	e1bffe15 	stw	r6,-8(fp)
   1139c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   113a0:	e0800217 	ldw	r2,8(fp)
   113a4:	d8800015 	stw	r2,0(sp)
   113a8:	e13ffc17 	ldw	r4,-16(fp)
   113ac:	e17ffd17 	ldw	r5,-12(fp)
   113b0:	e1bffe17 	ldw	r6,-8(fp)
   113b4:	e1ffff17 	ldw	r7,-4(fp)
   113b8:	00115600 	call	11560 <alt_iic_isr_register>
}  
   113bc:	e037883a 	mov	sp,fp
   113c0:	dfc00117 	ldw	ra,4(sp)
   113c4:	df000017 	ldw	fp,0(sp)
   113c8:	dec00204 	addi	sp,sp,8
   113cc:	f800283a 	ret

000113d0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   113d0:	defff904 	addi	sp,sp,-28
   113d4:	df000615 	stw	fp,24(sp)
   113d8:	df000604 	addi	fp,sp,24
   113dc:	e13ffe15 	stw	r4,-8(fp)
   113e0:	e17fff15 	stw	r5,-4(fp)
   113e4:	e0bfff17 	ldw	r2,-4(fp)
   113e8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   113ec:	0005303a 	rdctl	r2,status
   113f0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   113f4:	e0fffb17 	ldw	r3,-20(fp)
   113f8:	00bfff84 	movi	r2,-2
   113fc:	1884703a 	and	r2,r3,r2
   11400:	1001703a 	wrctl	status,r2
  
  return context;
   11404:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   11408:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   1140c:	e0bffa17 	ldw	r2,-24(fp)
   11410:	00c00044 	movi	r3,1
   11414:	1884983a 	sll	r2,r3,r2
   11418:	1007883a 	mov	r3,r2
   1141c:	00800074 	movhi	r2,1
   11420:	1098fc04 	addi	r2,r2,25584
   11424:	10800017 	ldw	r2,0(r2)
   11428:	1886b03a 	or	r3,r3,r2
   1142c:	00800074 	movhi	r2,1
   11430:	1098fc04 	addi	r2,r2,25584
   11434:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   11438:	00800074 	movhi	r2,1
   1143c:	1098fc04 	addi	r2,r2,25584
   11440:	10800017 	ldw	r2,0(r2)
   11444:	100170fa 	wrctl	ienable,r2
   11448:	e0bffc17 	ldw	r2,-16(fp)
   1144c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11450:	e0bffd17 	ldw	r2,-12(fp)
   11454:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   11458:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   1145c:	0001883a 	nop
}
   11460:	e037883a 	mov	sp,fp
   11464:	df000017 	ldw	fp,0(sp)
   11468:	dec00104 	addi	sp,sp,4
   1146c:	f800283a 	ret

00011470 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   11470:	defff904 	addi	sp,sp,-28
   11474:	df000615 	stw	fp,24(sp)
   11478:	df000604 	addi	fp,sp,24
   1147c:	e13ffe15 	stw	r4,-8(fp)
   11480:	e17fff15 	stw	r5,-4(fp)
   11484:	e0bfff17 	ldw	r2,-4(fp)
   11488:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1148c:	0005303a 	rdctl	r2,status
   11490:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11494:	e0fffb17 	ldw	r3,-20(fp)
   11498:	00bfff84 	movi	r2,-2
   1149c:	1884703a 	and	r2,r3,r2
   114a0:	1001703a 	wrctl	status,r2
  
  return context;
   114a4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   114a8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   114ac:	e0bffa17 	ldw	r2,-24(fp)
   114b0:	00c00044 	movi	r3,1
   114b4:	1884983a 	sll	r2,r3,r2
   114b8:	0084303a 	nor	r2,zero,r2
   114bc:	1007883a 	mov	r3,r2
   114c0:	00800074 	movhi	r2,1
   114c4:	1098fc04 	addi	r2,r2,25584
   114c8:	10800017 	ldw	r2,0(r2)
   114cc:	1886703a 	and	r3,r3,r2
   114d0:	00800074 	movhi	r2,1
   114d4:	1098fc04 	addi	r2,r2,25584
   114d8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   114dc:	00800074 	movhi	r2,1
   114e0:	1098fc04 	addi	r2,r2,25584
   114e4:	10800017 	ldw	r2,0(r2)
   114e8:	100170fa 	wrctl	ienable,r2
   114ec:	e0bffc17 	ldw	r2,-16(fp)
   114f0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   114f4:	e0bffd17 	ldw	r2,-12(fp)
   114f8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   114fc:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   11500:	0001883a 	nop
}
   11504:	e037883a 	mov	sp,fp
   11508:	df000017 	ldw	fp,0(sp)
   1150c:	dec00104 	addi	sp,sp,4
   11510:	f800283a 	ret

00011514 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   11514:	defffc04 	addi	sp,sp,-16
   11518:	df000315 	stw	fp,12(sp)
   1151c:	df000304 	addi	fp,sp,12
   11520:	e13ffe15 	stw	r4,-8(fp)
   11524:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   11528:	000530fa 	rdctl	r2,ienable
   1152c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   11530:	e0bfff17 	ldw	r2,-4(fp)
   11534:	00c00044 	movi	r3,1
   11538:	1884983a 	sll	r2,r3,r2
   1153c:	1007883a 	mov	r3,r2
   11540:	e0bffd17 	ldw	r2,-12(fp)
   11544:	1884703a 	and	r2,r3,r2
   11548:	1004c03a 	cmpne	r2,r2,zero
   1154c:	10803fcc 	andi	r2,r2,255
}
   11550:	e037883a 	mov	sp,fp
   11554:	df000017 	ldw	fp,0(sp)
   11558:	dec00104 	addi	sp,sp,4
   1155c:	f800283a 	ret

00011560 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   11560:	defff504 	addi	sp,sp,-44
   11564:	dfc00a15 	stw	ra,40(sp)
   11568:	df000915 	stw	fp,36(sp)
   1156c:	df000904 	addi	fp,sp,36
   11570:	e13ffc15 	stw	r4,-16(fp)
   11574:	e17ffd15 	stw	r5,-12(fp)
   11578:	e1bffe15 	stw	r6,-8(fp)
   1157c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   11580:	00bffa84 	movi	r2,-22
   11584:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   11588:	e0bffd17 	ldw	r2,-12(fp)
   1158c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   11590:	e0bff817 	ldw	r2,-32(fp)
   11594:	10800808 	cmpgei	r2,r2,32
   11598:	1000271e 	bne	r2,zero,11638 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1159c:	0005303a 	rdctl	r2,status
   115a0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   115a4:	e0fffa17 	ldw	r3,-24(fp)
   115a8:	00bfff84 	movi	r2,-2
   115ac:	1884703a 	and	r2,r3,r2
   115b0:	1001703a 	wrctl	status,r2
  
  return context;
   115b4:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   115b8:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   115bc:	00800074 	movhi	r2,1
   115c0:	10990a04 	addi	r2,r2,25640
   115c4:	e0fff817 	ldw	r3,-32(fp)
   115c8:	180690fa 	slli	r3,r3,3
   115cc:	10c5883a 	add	r2,r2,r3
   115d0:	e0fffe17 	ldw	r3,-8(fp)
   115d4:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   115d8:	00800074 	movhi	r2,1
   115dc:	10990a04 	addi	r2,r2,25640
   115e0:	e0fff817 	ldw	r3,-32(fp)
   115e4:	180690fa 	slli	r3,r3,3
   115e8:	10c5883a 	add	r2,r2,r3
   115ec:	10800104 	addi	r2,r2,4
   115f0:	e0ffff17 	ldw	r3,-4(fp)
   115f4:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   115f8:	e0bffe17 	ldw	r2,-8(fp)
   115fc:	10000526 	beq	r2,zero,11614 <alt_iic_isr_register+0xb4>
   11600:	e0bff817 	ldw	r2,-32(fp)
   11604:	e13ffc17 	ldw	r4,-16(fp)
   11608:	100b883a 	mov	r5,r2
   1160c:	00113d00 	call	113d0 <alt_ic_irq_enable>
   11610:	00000406 	br	11624 <alt_iic_isr_register+0xc4>
   11614:	e0bff817 	ldw	r2,-32(fp)
   11618:	e13ffc17 	ldw	r4,-16(fp)
   1161c:	100b883a 	mov	r5,r2
   11620:	00114700 	call	11470 <alt_ic_irq_disable>
   11624:	e0bff715 	stw	r2,-36(fp)
   11628:	e0bff917 	ldw	r2,-28(fp)
   1162c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11630:	e0bffb17 	ldw	r2,-20(fp)
   11634:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   11638:	e0bff717 	ldw	r2,-36(fp)
}
   1163c:	e037883a 	mov	sp,fp
   11640:	dfc00117 	ldw	ra,4(sp)
   11644:	df000017 	ldw	fp,0(sp)
   11648:	dec00204 	addi	sp,sp,8
   1164c:	f800283a 	ret

00011650 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   11650:	defff804 	addi	sp,sp,-32
   11654:	dfc00715 	stw	ra,28(sp)
   11658:	df000615 	stw	fp,24(sp)
   1165c:	dc000515 	stw	r16,20(sp)
   11660:	df000604 	addi	fp,sp,24
   11664:	e13ffb15 	stw	r4,-20(fp)
   11668:	e17ffc15 	stw	r5,-16(fp)
   1166c:	e1bffd15 	stw	r6,-12(fp)
   11670:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   11674:	e13ffc17 	ldw	r4,-16(fp)
   11678:	e17ffd17 	ldw	r5,-12(fp)
   1167c:	e1bffe17 	ldw	r6,-8(fp)
   11680:	00118ec0 	call	118ec <open>
   11684:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   11688:	e0bffa17 	ldw	r2,-24(fp)
   1168c:	10002216 	blt	r2,zero,11718 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   11690:	04000074 	movhi	r16,1
   11694:	840d8e04 	addi	r16,r16,13880
   11698:	e0bffa17 	ldw	r2,-24(fp)
   1169c:	1009883a 	mov	r4,r2
   116a0:	01400304 	movi	r5,12
   116a4:	000d1bc0 	call	d1bc <__mulsi3>
   116a8:	8085883a 	add	r2,r16,r2
   116ac:	10c00017 	ldw	r3,0(r2)
   116b0:	e0bffb17 	ldw	r2,-20(fp)
   116b4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   116b8:	04000074 	movhi	r16,1
   116bc:	840d8e04 	addi	r16,r16,13880
   116c0:	e0bffa17 	ldw	r2,-24(fp)
   116c4:	1009883a 	mov	r4,r2
   116c8:	01400304 	movi	r5,12
   116cc:	000d1bc0 	call	d1bc <__mulsi3>
   116d0:	8085883a 	add	r2,r16,r2
   116d4:	10800104 	addi	r2,r2,4
   116d8:	10c00017 	ldw	r3,0(r2)
   116dc:	e0bffb17 	ldw	r2,-20(fp)
   116e0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   116e4:	04000074 	movhi	r16,1
   116e8:	840d8e04 	addi	r16,r16,13880
   116ec:	e0bffa17 	ldw	r2,-24(fp)
   116f0:	1009883a 	mov	r4,r2
   116f4:	01400304 	movi	r5,12
   116f8:	000d1bc0 	call	d1bc <__mulsi3>
   116fc:	8085883a 	add	r2,r16,r2
   11700:	10800204 	addi	r2,r2,8
   11704:	10c00017 	ldw	r3,0(r2)
   11708:	e0bffb17 	ldw	r2,-20(fp)
   1170c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   11710:	e13ffa17 	ldw	r4,-24(fp)
   11714:	00101540 	call	10154 <alt_release_fd>
  }
} 
   11718:	e6ffff04 	addi	sp,fp,-4
   1171c:	dfc00217 	ldw	ra,8(sp)
   11720:	df000117 	ldw	fp,4(sp)
   11724:	dc000017 	ldw	r16,0(sp)
   11728:	dec00304 	addi	sp,sp,12
   1172c:	f800283a 	ret

00011730 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   11730:	defffb04 	addi	sp,sp,-20
   11734:	dfc00415 	stw	ra,16(sp)
   11738:	df000315 	stw	fp,12(sp)
   1173c:	df000304 	addi	fp,sp,12
   11740:	e13ffd15 	stw	r4,-12(fp)
   11744:	e17ffe15 	stw	r5,-8(fp)
   11748:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   1174c:	01000074 	movhi	r4,1
   11750:	210d9104 	addi	r4,r4,13892
   11754:	e17ffd17 	ldw	r5,-12(fp)
   11758:	01800044 	movi	r6,1
   1175c:	01c07fc4 	movi	r7,511
   11760:	00116500 	call	11650 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   11764:	01000074 	movhi	r4,1
   11768:	210d8e04 	addi	r4,r4,13880
   1176c:	e17ffe17 	ldw	r5,-8(fp)
   11770:	000d883a 	mov	r6,zero
   11774:	01c07fc4 	movi	r7,511
   11778:	00116500 	call	11650 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   1177c:	01000074 	movhi	r4,1
   11780:	210d9404 	addi	r4,r4,13904
   11784:	e17fff17 	ldw	r5,-4(fp)
   11788:	01800044 	movi	r6,1
   1178c:	01c07fc4 	movi	r7,511
   11790:	00116500 	call	11650 <alt_open_fd>
}  
   11794:	e037883a 	mov	sp,fp
   11798:	dfc00117 	ldw	ra,4(sp)
   1179c:	df000017 	ldw	fp,0(sp)
   117a0:	dec00204 	addi	sp,sp,8
   117a4:	f800283a 	ret

000117a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   117a8:	defffe04 	addi	sp,sp,-8
   117ac:	dfc00115 	stw	ra,4(sp)
   117b0:	df000015 	stw	fp,0(sp)
   117b4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   117b8:	00800074 	movhi	r2,1
   117bc:	10921104 	addi	r2,r2,18500
   117c0:	10800017 	ldw	r2,0(r2)
   117c4:	10000526 	beq	r2,zero,117dc <alt_get_errno+0x34>
   117c8:	00800074 	movhi	r2,1
   117cc:	10921104 	addi	r2,r2,18500
   117d0:	10800017 	ldw	r2,0(r2)
   117d4:	103ee83a 	callr	r2
   117d8:	00000206 	br	117e4 <alt_get_errno+0x3c>
   117dc:	00800074 	movhi	r2,1
   117e0:	1098f504 	addi	r2,r2,25556
}
   117e4:	e037883a 	mov	sp,fp
   117e8:	dfc00117 	ldw	ra,4(sp)
   117ec:	df000017 	ldw	fp,0(sp)
   117f0:	dec00204 	addi	sp,sp,8
   117f4:	f800283a 	ret

000117f8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   117f8:	defffb04 	addi	sp,sp,-20
   117fc:	dfc00415 	stw	ra,16(sp)
   11800:	df000315 	stw	fp,12(sp)
   11804:	dc000215 	stw	r16,8(sp)
   11808:	df000304 	addi	fp,sp,12
   1180c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   11810:	e0bffe17 	ldw	r2,-8(fp)
   11814:	10800217 	ldw	r2,8(r2)
   11818:	10d00034 	orhi	r3,r2,16384
   1181c:	e0bffe17 	ldw	r2,-8(fp)
   11820:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   11824:	e03ffd15 	stw	zero,-12(fp)
   11828:	00002306 	br	118b8 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1182c:	04000074 	movhi	r16,1
   11830:	840d8e04 	addi	r16,r16,13880
   11834:	e0bffd17 	ldw	r2,-12(fp)
   11838:	1009883a 	mov	r4,r2
   1183c:	01400304 	movi	r5,12
   11840:	000d1bc0 	call	d1bc <__mulsi3>
   11844:	8085883a 	add	r2,r16,r2
   11848:	10c00017 	ldw	r3,0(r2)
   1184c:	e0bffe17 	ldw	r2,-8(fp)
   11850:	10800017 	ldw	r2,0(r2)
   11854:	1880151e 	bne	r3,r2,118ac <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   11858:	04000074 	movhi	r16,1
   1185c:	840d8e04 	addi	r16,r16,13880
   11860:	e0bffd17 	ldw	r2,-12(fp)
   11864:	1009883a 	mov	r4,r2
   11868:	01400304 	movi	r5,12
   1186c:	000d1bc0 	call	d1bc <__mulsi3>
   11870:	8085883a 	add	r2,r16,r2
   11874:	10800204 	addi	r2,r2,8
   11878:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1187c:	10000b0e 	bge	r2,zero,118ac <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   11880:	e13ffd17 	ldw	r4,-12(fp)
   11884:	01400304 	movi	r5,12
   11888:	000d1bc0 	call	d1bc <__mulsi3>
   1188c:	1007883a 	mov	r3,r2
   11890:	00800074 	movhi	r2,1
   11894:	108d8e04 	addi	r2,r2,13880
   11898:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1189c:	e0bffe17 	ldw	r2,-8(fp)
   118a0:	18800226 	beq	r3,r2,118ac <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   118a4:	00bffcc4 	movi	r2,-13
   118a8:	00000a06 	br	118d4 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   118ac:	e0bffd17 	ldw	r2,-12(fp)
   118b0:	10800044 	addi	r2,r2,1
   118b4:	e0bffd15 	stw	r2,-12(fp)
   118b8:	00800074 	movhi	r2,1
   118bc:	10921004 	addi	r2,r2,18496
   118c0:	10800017 	ldw	r2,0(r2)
   118c4:	1007883a 	mov	r3,r2
   118c8:	e0bffd17 	ldw	r2,-12(fp)
   118cc:	18bfd72e 	bgeu	r3,r2,1182c <__alt_data_end+0xfffbc0fc>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   118d0:	0005883a 	mov	r2,zero
}
   118d4:	e6ffff04 	addi	sp,fp,-4
   118d8:	dfc00217 	ldw	ra,8(sp)
   118dc:	df000117 	ldw	fp,4(sp)
   118e0:	dc000017 	ldw	r16,0(sp)
   118e4:	dec00304 	addi	sp,sp,12
   118e8:	f800283a 	ret

000118ec <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   118ec:	defff604 	addi	sp,sp,-40
   118f0:	dfc00915 	stw	ra,36(sp)
   118f4:	df000815 	stw	fp,32(sp)
   118f8:	df000804 	addi	fp,sp,32
   118fc:	e13ffd15 	stw	r4,-12(fp)
   11900:	e17ffe15 	stw	r5,-8(fp)
   11904:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   11908:	00bfffc4 	movi	r2,-1
   1190c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   11910:	00bffb44 	movi	r2,-19
   11914:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   11918:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   1191c:	e13ffd17 	ldw	r4,-12(fp)
   11920:	01400074 	movhi	r5,1
   11924:	29520e04 	addi	r5,r5,18488
   11928:	0011c080 	call	11c08 <alt_find_dev>
   1192c:	e0bff815 	stw	r2,-32(fp)
   11930:	e0bff817 	ldw	r2,-32(fp)
   11934:	1000051e 	bne	r2,zero,1194c <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   11938:	e13ffd17 	ldw	r4,-12(fp)
   1193c:	0011c980 	call	11c98 <alt_find_file>
   11940:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   11944:	00800044 	movi	r2,1
   11948:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   1194c:	e0bff817 	ldw	r2,-32(fp)
   11950:	10002b26 	beq	r2,zero,11a00 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
   11954:	e13ff817 	ldw	r4,-32(fp)
   11958:	0011dac0 	call	11dac <alt_get_fd>
   1195c:	e0bff915 	stw	r2,-28(fp)
   11960:	e0bff917 	ldw	r2,-28(fp)
   11964:	1000030e 	bge	r2,zero,11974 <open+0x88>
    {
      status = index;
   11968:	e0bff917 	ldw	r2,-28(fp)
   1196c:	e0bffa15 	stw	r2,-24(fp)
   11970:	00002506 	br	11a08 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
   11974:	e13ff917 	ldw	r4,-28(fp)
   11978:	01400304 	movi	r5,12
   1197c:	000d1bc0 	call	d1bc <__mulsi3>
   11980:	1007883a 	mov	r3,r2
   11984:	00800074 	movhi	r2,1
   11988:	108d8e04 	addi	r2,r2,13880
   1198c:	1885883a 	add	r2,r3,r2
   11990:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   11994:	e0fffe17 	ldw	r3,-8(fp)
   11998:	00900034 	movhi	r2,16384
   1199c:	10bfffc4 	addi	r2,r2,-1
   119a0:	1886703a 	and	r3,r3,r2
   119a4:	e0bffc17 	ldw	r2,-16(fp)
   119a8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   119ac:	e0bffb17 	ldw	r2,-20(fp)
   119b0:	1000051e 	bne	r2,zero,119c8 <open+0xdc>
   119b4:	e13ffc17 	ldw	r4,-16(fp)
   119b8:	00117f80 	call	117f8 <alt_file_locked>
   119bc:	e0bffa15 	stw	r2,-24(fp)
   119c0:	e0bffa17 	ldw	r2,-24(fp)
   119c4:	10001016 	blt	r2,zero,11a08 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   119c8:	e0bff817 	ldw	r2,-32(fp)
   119cc:	10800317 	ldw	r2,12(r2)
   119d0:	10000826 	beq	r2,zero,119f4 <open+0x108>
   119d4:	e0bff817 	ldw	r2,-32(fp)
   119d8:	10800317 	ldw	r2,12(r2)
   119dc:	e13ffc17 	ldw	r4,-16(fp)
   119e0:	e17ffd17 	ldw	r5,-12(fp)
   119e4:	e1bffe17 	ldw	r6,-8(fp)
   119e8:	e1ffff17 	ldw	r7,-4(fp)
   119ec:	103ee83a 	callr	r2
   119f0:	00000106 	br	119f8 <open+0x10c>
   119f4:	0005883a 	mov	r2,zero
   119f8:	e0bffa15 	stw	r2,-24(fp)
   119fc:	00000206 	br	11a08 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   11a00:	00bffb44 	movi	r2,-19
   11a04:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   11a08:	e0bffa17 	ldw	r2,-24(fp)
   11a0c:	1000090e 	bge	r2,zero,11a34 <open+0x148>
  {
    alt_release_fd (index);  
   11a10:	e13ff917 	ldw	r4,-28(fp)
   11a14:	00101540 	call	10154 <alt_release_fd>
    ALT_ERRNO = -status;
   11a18:	00117a80 	call	117a8 <alt_get_errno>
   11a1c:	1007883a 	mov	r3,r2
   11a20:	e0bffa17 	ldw	r2,-24(fp)
   11a24:	0085c83a 	sub	r2,zero,r2
   11a28:	18800015 	stw	r2,0(r3)
    return -1;
   11a2c:	00bfffc4 	movi	r2,-1
   11a30:	00000106 	br	11a38 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
   11a34:	e0bff917 	ldw	r2,-28(fp)
}
   11a38:	e037883a 	mov	sp,fp
   11a3c:	dfc00117 	ldw	ra,4(sp)
   11a40:	df000017 	ldw	fp,0(sp)
   11a44:	dec00204 	addi	sp,sp,8
   11a48:	f800283a 	ret

00011a4c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   11a4c:	defffa04 	addi	sp,sp,-24
   11a50:	df000515 	stw	fp,20(sp)
   11a54:	df000504 	addi	fp,sp,20
   11a58:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11a5c:	0005303a 	rdctl	r2,status
   11a60:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11a64:	e0fffc17 	ldw	r3,-16(fp)
   11a68:	00bfff84 	movi	r2,-2
   11a6c:	1884703a 	and	r2,r3,r2
   11a70:	1001703a 	wrctl	status,r2
  
  return context;
   11a74:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   11a78:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   11a7c:	e0bfff17 	ldw	r2,-4(fp)
   11a80:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   11a84:	e0bffd17 	ldw	r2,-12(fp)
   11a88:	10800017 	ldw	r2,0(r2)
   11a8c:	e0fffd17 	ldw	r3,-12(fp)
   11a90:	18c00117 	ldw	r3,4(r3)
   11a94:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   11a98:	e0bffd17 	ldw	r2,-12(fp)
   11a9c:	10800117 	ldw	r2,4(r2)
   11aa0:	e0fffd17 	ldw	r3,-12(fp)
   11aa4:	18c00017 	ldw	r3,0(r3)
   11aa8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   11aac:	e0bffd17 	ldw	r2,-12(fp)
   11ab0:	e0fffd17 	ldw	r3,-12(fp)
   11ab4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   11ab8:	e0bffd17 	ldw	r2,-12(fp)
   11abc:	e0fffd17 	ldw	r3,-12(fp)
   11ac0:	10c00015 	stw	r3,0(r2)
   11ac4:	e0bffb17 	ldw	r2,-20(fp)
   11ac8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11acc:	e0bffe17 	ldw	r2,-8(fp)
   11ad0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   11ad4:	e037883a 	mov	sp,fp
   11ad8:	df000017 	ldw	fp,0(sp)
   11adc:	dec00104 	addi	sp,sp,4
   11ae0:	f800283a 	ret

00011ae4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   11ae4:	defffb04 	addi	sp,sp,-20
   11ae8:	dfc00415 	stw	ra,16(sp)
   11aec:	df000315 	stw	fp,12(sp)
   11af0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   11af4:	d0a00e17 	ldw	r2,-32712(gp)
   11af8:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   11afc:	d0a6f817 	ldw	r2,-25632(gp)
   11b00:	10800044 	addi	r2,r2,1
   11b04:	d0a6f815 	stw	r2,-25632(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   11b08:	00002e06 	br	11bc4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   11b0c:	e0bffd17 	ldw	r2,-12(fp)
   11b10:	10800017 	ldw	r2,0(r2)
   11b14:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   11b18:	e0bffd17 	ldw	r2,-12(fp)
   11b1c:	10800403 	ldbu	r2,16(r2)
   11b20:	10803fcc 	andi	r2,r2,255
   11b24:	10000426 	beq	r2,zero,11b38 <alt_tick+0x54>
   11b28:	d0a6f817 	ldw	r2,-25632(gp)
   11b2c:	1000021e 	bne	r2,zero,11b38 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   11b30:	e0bffd17 	ldw	r2,-12(fp)
   11b34:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   11b38:	e0bffd17 	ldw	r2,-12(fp)
   11b3c:	10800217 	ldw	r2,8(r2)
   11b40:	d0e6f817 	ldw	r3,-25632(gp)
   11b44:	18801d36 	bltu	r3,r2,11bbc <alt_tick+0xd8>
   11b48:	e0bffd17 	ldw	r2,-12(fp)
   11b4c:	10800403 	ldbu	r2,16(r2)
   11b50:	10803fcc 	andi	r2,r2,255
   11b54:	1000191e 	bne	r2,zero,11bbc <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   11b58:	e0bffd17 	ldw	r2,-12(fp)
   11b5c:	10800317 	ldw	r2,12(r2)
   11b60:	e0fffd17 	ldw	r3,-12(fp)
   11b64:	18c00517 	ldw	r3,20(r3)
   11b68:	1809883a 	mov	r4,r3
   11b6c:	103ee83a 	callr	r2
   11b70:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   11b74:	e0bfff17 	ldw	r2,-4(fp)
   11b78:	1000031e 	bne	r2,zero,11b88 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   11b7c:	e13ffd17 	ldw	r4,-12(fp)
   11b80:	0011a4c0 	call	11a4c <alt_alarm_stop>
   11b84:	00000d06 	br	11bbc <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   11b88:	e0bffd17 	ldw	r2,-12(fp)
   11b8c:	10c00217 	ldw	r3,8(r2)
   11b90:	e0bfff17 	ldw	r2,-4(fp)
   11b94:	1887883a 	add	r3,r3,r2
   11b98:	e0bffd17 	ldw	r2,-12(fp)
   11b9c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   11ba0:	e0bffd17 	ldw	r2,-12(fp)
   11ba4:	10c00217 	ldw	r3,8(r2)
   11ba8:	d0a6f817 	ldw	r2,-25632(gp)
   11bac:	1880032e 	bgeu	r3,r2,11bbc <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   11bb0:	e0bffd17 	ldw	r2,-12(fp)
   11bb4:	00c00044 	movi	r3,1
   11bb8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   11bbc:	e0bffe17 	ldw	r2,-8(fp)
   11bc0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   11bc4:	e0fffd17 	ldw	r3,-12(fp)
   11bc8:	d0a00e04 	addi	r2,gp,-32712
   11bcc:	18bfcf1e 	bne	r3,r2,11b0c <__alt_data_end+0xfffbc3dc>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   11bd0:	0001883a 	nop
}
   11bd4:	e037883a 	mov	sp,fp
   11bd8:	dfc00117 	ldw	ra,4(sp)
   11bdc:	df000017 	ldw	fp,0(sp)
   11be0:	dec00204 	addi	sp,sp,8
   11be4:	f800283a 	ret

00011be8 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   11be8:	deffff04 	addi	sp,sp,-4
   11bec:	df000015 	stw	fp,0(sp)
   11bf0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   11bf4:	000170fa 	wrctl	ienable,zero
}
   11bf8:	e037883a 	mov	sp,fp
   11bfc:	df000017 	ldw	fp,0(sp)
   11c00:	dec00104 	addi	sp,sp,4
   11c04:	f800283a 	ret

00011c08 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   11c08:	defffa04 	addi	sp,sp,-24
   11c0c:	dfc00515 	stw	ra,20(sp)
   11c10:	df000415 	stw	fp,16(sp)
   11c14:	df000404 	addi	fp,sp,16
   11c18:	e13ffe15 	stw	r4,-8(fp)
   11c1c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   11c20:	e0bfff17 	ldw	r2,-4(fp)
   11c24:	10800017 	ldw	r2,0(r2)
   11c28:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   11c2c:	e13ffe17 	ldw	r4,-8(fp)
   11c30:	00039cc0 	call	39cc <strlen>
   11c34:	10800044 	addi	r2,r2,1
   11c38:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   11c3c:	00000d06 	br	11c74 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   11c40:	e0bffc17 	ldw	r2,-16(fp)
   11c44:	10c00217 	ldw	r3,8(r2)
   11c48:	e0bffd17 	ldw	r2,-12(fp)
   11c4c:	1809883a 	mov	r4,r3
   11c50:	e17ffe17 	ldw	r5,-8(fp)
   11c54:	100d883a 	mov	r6,r2
   11c58:	0011f680 	call	11f68 <memcmp>
   11c5c:	1000021e 	bne	r2,zero,11c68 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   11c60:	e0bffc17 	ldw	r2,-16(fp)
   11c64:	00000706 	br	11c84 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   11c68:	e0bffc17 	ldw	r2,-16(fp)
   11c6c:	10800017 	ldw	r2,0(r2)
   11c70:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   11c74:	e0fffc17 	ldw	r3,-16(fp)
   11c78:	e0bfff17 	ldw	r2,-4(fp)
   11c7c:	18bff01e 	bne	r3,r2,11c40 <__alt_data_end+0xfffbc510>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   11c80:	0005883a 	mov	r2,zero
}
   11c84:	e037883a 	mov	sp,fp
   11c88:	dfc00117 	ldw	ra,4(sp)
   11c8c:	df000017 	ldw	fp,0(sp)
   11c90:	dec00204 	addi	sp,sp,8
   11c94:	f800283a 	ret

00011c98 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   11c98:	defffb04 	addi	sp,sp,-20
   11c9c:	dfc00415 	stw	ra,16(sp)
   11ca0:	df000315 	stw	fp,12(sp)
   11ca4:	df000304 	addi	fp,sp,12
   11ca8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   11cac:	00800074 	movhi	r2,1
   11cb0:	10920c04 	addi	r2,r2,18480
   11cb4:	10800017 	ldw	r2,0(r2)
   11cb8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   11cbc:	00003106 	br	11d84 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   11cc0:	e0bffd17 	ldw	r2,-12(fp)
   11cc4:	10800217 	ldw	r2,8(r2)
   11cc8:	1009883a 	mov	r4,r2
   11ccc:	00039cc0 	call	39cc <strlen>
   11cd0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   11cd4:	e0bffd17 	ldw	r2,-12(fp)
   11cd8:	10c00217 	ldw	r3,8(r2)
   11cdc:	e0bffe17 	ldw	r2,-8(fp)
   11ce0:	10bfffc4 	addi	r2,r2,-1
   11ce4:	1885883a 	add	r2,r3,r2
   11ce8:	10800003 	ldbu	r2,0(r2)
   11cec:	10803fcc 	andi	r2,r2,255
   11cf0:	1080201c 	xori	r2,r2,128
   11cf4:	10bfe004 	addi	r2,r2,-128
   11cf8:	10800bd8 	cmpnei	r2,r2,47
   11cfc:	1000031e 	bne	r2,zero,11d0c <alt_find_file+0x74>
    {
      len -= 1;
   11d00:	e0bffe17 	ldw	r2,-8(fp)
   11d04:	10bfffc4 	addi	r2,r2,-1
   11d08:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   11d0c:	e0bffe17 	ldw	r2,-8(fp)
   11d10:	e0ffff17 	ldw	r3,-4(fp)
   11d14:	1885883a 	add	r2,r3,r2
   11d18:	10800003 	ldbu	r2,0(r2)
   11d1c:	10803fcc 	andi	r2,r2,255
   11d20:	1080201c 	xori	r2,r2,128
   11d24:	10bfe004 	addi	r2,r2,-128
   11d28:	10800be0 	cmpeqi	r2,r2,47
   11d2c:	1000081e 	bne	r2,zero,11d50 <alt_find_file+0xb8>
   11d30:	e0bffe17 	ldw	r2,-8(fp)
   11d34:	e0ffff17 	ldw	r3,-4(fp)
   11d38:	1885883a 	add	r2,r3,r2
   11d3c:	10800003 	ldbu	r2,0(r2)
   11d40:	10803fcc 	andi	r2,r2,255
   11d44:	1080201c 	xori	r2,r2,128
   11d48:	10bfe004 	addi	r2,r2,-128
   11d4c:	10000a1e 	bne	r2,zero,11d78 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   11d50:	e0bffd17 	ldw	r2,-12(fp)
   11d54:	10c00217 	ldw	r3,8(r2)
   11d58:	e0bffe17 	ldw	r2,-8(fp)
   11d5c:	1809883a 	mov	r4,r3
   11d60:	e17fff17 	ldw	r5,-4(fp)
   11d64:	100d883a 	mov	r6,r2
   11d68:	0011f680 	call	11f68 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   11d6c:	1000021e 	bne	r2,zero,11d78 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   11d70:	e0bffd17 	ldw	r2,-12(fp)
   11d74:	00000806 	br	11d98 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   11d78:	e0bffd17 	ldw	r2,-12(fp)
   11d7c:	10800017 	ldw	r2,0(r2)
   11d80:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   11d84:	e0fffd17 	ldw	r3,-12(fp)
   11d88:	00800074 	movhi	r2,1
   11d8c:	10920c04 	addi	r2,r2,18480
   11d90:	18bfcb1e 	bne	r3,r2,11cc0 <__alt_data_end+0xfffbc590>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   11d94:	0005883a 	mov	r2,zero
}
   11d98:	e037883a 	mov	sp,fp
   11d9c:	dfc00117 	ldw	ra,4(sp)
   11da0:	df000017 	ldw	fp,0(sp)
   11da4:	dec00204 	addi	sp,sp,8
   11da8:	f800283a 	ret

00011dac <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   11dac:	defffa04 	addi	sp,sp,-24
   11db0:	dfc00515 	stw	ra,20(sp)
   11db4:	df000415 	stw	fp,16(sp)
   11db8:	dc000315 	stw	r16,12(sp)
   11dbc:	df000404 	addi	fp,sp,16
   11dc0:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   11dc4:	00bffa04 	movi	r2,-24
   11dc8:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   11dcc:	e03ffc15 	stw	zero,-16(fp)
   11dd0:	00002106 	br	11e58 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   11dd4:	04000074 	movhi	r16,1
   11dd8:	840d8e04 	addi	r16,r16,13880
   11ddc:	e0bffc17 	ldw	r2,-16(fp)
   11de0:	1009883a 	mov	r4,r2
   11de4:	01400304 	movi	r5,12
   11de8:	000d1bc0 	call	d1bc <__mulsi3>
   11dec:	8085883a 	add	r2,r16,r2
   11df0:	10800017 	ldw	r2,0(r2)
   11df4:	1000151e 	bne	r2,zero,11e4c <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   11df8:	04000074 	movhi	r16,1
   11dfc:	840d8e04 	addi	r16,r16,13880
   11e00:	e0bffc17 	ldw	r2,-16(fp)
   11e04:	1009883a 	mov	r4,r2
   11e08:	01400304 	movi	r5,12
   11e0c:	000d1bc0 	call	d1bc <__mulsi3>
   11e10:	8085883a 	add	r2,r16,r2
   11e14:	e0fffe17 	ldw	r3,-8(fp)
   11e18:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   11e1c:	00800074 	movhi	r2,1
   11e20:	10921004 	addi	r2,r2,18496
   11e24:	10c00017 	ldw	r3,0(r2)
   11e28:	e0bffc17 	ldw	r2,-16(fp)
   11e2c:	1880040e 	bge	r3,r2,11e40 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   11e30:	00800074 	movhi	r2,1
   11e34:	10921004 	addi	r2,r2,18496
   11e38:	e0fffc17 	ldw	r3,-16(fp)
   11e3c:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   11e40:	e0bffc17 	ldw	r2,-16(fp)
   11e44:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   11e48:	00000606 	br	11e64 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   11e4c:	e0bffc17 	ldw	r2,-16(fp)
   11e50:	10800044 	addi	r2,r2,1
   11e54:	e0bffc15 	stw	r2,-16(fp)
   11e58:	e0bffc17 	ldw	r2,-16(fp)
   11e5c:	10800810 	cmplti	r2,r2,32
   11e60:	103fdc1e 	bne	r2,zero,11dd4 <__alt_data_end+0xfffbc6a4>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   11e64:	e0bffd17 	ldw	r2,-12(fp)
}
   11e68:	e6ffff04 	addi	sp,fp,-4
   11e6c:	dfc00217 	ldw	ra,8(sp)
   11e70:	df000117 	ldw	fp,4(sp)
   11e74:	dc000017 	ldw	r16,0(sp)
   11e78:	dec00304 	addi	sp,sp,12
   11e7c:	f800283a 	ret

00011e80 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   11e80:	defffe04 	addi	sp,sp,-8
   11e84:	df000115 	stw	fp,4(sp)
   11e88:	df000104 	addi	fp,sp,4
   11e8c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   11e90:	e0bfff17 	ldw	r2,-4(fp)
   11e94:	10bffe84 	addi	r2,r2,-6
   11e98:	10c00428 	cmpgeui	r3,r2,16
   11e9c:	18001a1e 	bne	r3,zero,11f08 <alt_exception_cause_generated_bad_addr+0x88>
   11ea0:	100690ba 	slli	r3,r2,2
   11ea4:	00800074 	movhi	r2,1
   11ea8:	1087ae04 	addi	r2,r2,7864
   11eac:	1885883a 	add	r2,r3,r2
   11eb0:	10800017 	ldw	r2,0(r2)
   11eb4:	1000683a 	jmp	r2
   11eb8:	00011ef8 	rdprs	zero,zero,1147
   11ebc:	00011ef8 	rdprs	zero,zero,1147
   11ec0:	00011f08 	cmpgei	zero,zero,1148
   11ec4:	00011f08 	cmpgei	zero,zero,1148
   11ec8:	00011f08 	cmpgei	zero,zero,1148
   11ecc:	00011ef8 	rdprs	zero,zero,1147
   11ed0:	00011f00 	call	11f0 <init_players+0x6c>
   11ed4:	00011f08 	cmpgei	zero,zero,1148
   11ed8:	00011ef8 	rdprs	zero,zero,1147
   11edc:	00011ef8 	rdprs	zero,zero,1147
   11ee0:	00011f08 	cmpgei	zero,zero,1148
   11ee4:	00011ef8 	rdprs	zero,zero,1147
   11ee8:	00011f00 	call	11f0 <init_players+0x6c>
   11eec:	00011f08 	cmpgei	zero,zero,1148
   11ef0:	00011f08 	cmpgei	zero,zero,1148
   11ef4:	00011ef8 	rdprs	zero,zero,1147
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   11ef8:	00800044 	movi	r2,1
   11efc:	00000306 	br	11f0c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   11f00:	0005883a 	mov	r2,zero
   11f04:	00000106 	br	11f0c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   11f08:	0005883a 	mov	r2,zero
  }
}
   11f0c:	e037883a 	mov	sp,fp
   11f10:	df000017 	ldw	fp,0(sp)
   11f14:	dec00104 	addi	sp,sp,4
   11f18:	f800283a 	ret

00011f1c <atexit>:
   11f1c:	200b883a 	mov	r5,r4
   11f20:	000d883a 	mov	r6,zero
   11f24:	0009883a 	mov	r4,zero
   11f28:	000f883a 	mov	r7,zero
   11f2c:	0011fe41 	jmpi	11fe4 <__register_exitproc>

00011f30 <exit>:
   11f30:	defffe04 	addi	sp,sp,-8
   11f34:	000b883a 	mov	r5,zero
   11f38:	dc000015 	stw	r16,0(sp)
   11f3c:	dfc00115 	stw	ra,4(sp)
   11f40:	2021883a 	mov	r16,r4
   11f44:	00120f80 	call	120f8 <__call_exitprocs>
   11f48:	00800074 	movhi	r2,1
   11f4c:	10920804 	addi	r2,r2,18464
   11f50:	11000017 	ldw	r4,0(r2)
   11f54:	20800f17 	ldw	r2,60(r4)
   11f58:	10000126 	beq	r2,zero,11f60 <exit+0x30>
   11f5c:	103ee83a 	callr	r2
   11f60:	8009883a 	mov	r4,r16
   11f64:	001228c0 	call	1228c <_exit>

00011f68 <memcmp>:
   11f68:	01c000c4 	movi	r7,3
   11f6c:	3980192e 	bgeu	r7,r6,11fd4 <memcmp+0x6c>
   11f70:	2144b03a 	or	r2,r4,r5
   11f74:	11c4703a 	and	r2,r2,r7
   11f78:	10000f26 	beq	r2,zero,11fb8 <memcmp+0x50>
   11f7c:	20800003 	ldbu	r2,0(r4)
   11f80:	28c00003 	ldbu	r3,0(r5)
   11f84:	10c0151e 	bne	r2,r3,11fdc <memcmp+0x74>
   11f88:	31bfff84 	addi	r6,r6,-2
   11f8c:	01ffffc4 	movi	r7,-1
   11f90:	00000406 	br	11fa4 <memcmp+0x3c>
   11f94:	20800003 	ldbu	r2,0(r4)
   11f98:	28c00003 	ldbu	r3,0(r5)
   11f9c:	31bfffc4 	addi	r6,r6,-1
   11fa0:	10c00e1e 	bne	r2,r3,11fdc <memcmp+0x74>
   11fa4:	21000044 	addi	r4,r4,1
   11fa8:	29400044 	addi	r5,r5,1
   11fac:	31fff91e 	bne	r6,r7,11f94 <__alt_data_end+0xfffbc864>
   11fb0:	0005883a 	mov	r2,zero
   11fb4:	f800283a 	ret
   11fb8:	20c00017 	ldw	r3,0(r4)
   11fbc:	28800017 	ldw	r2,0(r5)
   11fc0:	1880041e 	bne	r3,r2,11fd4 <memcmp+0x6c>
   11fc4:	31bfff04 	addi	r6,r6,-4
   11fc8:	21000104 	addi	r4,r4,4
   11fcc:	29400104 	addi	r5,r5,4
   11fd0:	39bff936 	bltu	r7,r6,11fb8 <__alt_data_end+0xfffbc888>
   11fd4:	303fe91e 	bne	r6,zero,11f7c <__alt_data_end+0xfffbc84c>
   11fd8:	003ff506 	br	11fb0 <__alt_data_end+0xfffbc880>
   11fdc:	10c5c83a 	sub	r2,r2,r3
   11fe0:	f800283a 	ret

00011fe4 <__register_exitproc>:
   11fe4:	00800074 	movhi	r2,1
   11fe8:	defffa04 	addi	sp,sp,-24
   11fec:	10920804 	addi	r2,r2,18464
   11ff0:	dc000315 	stw	r16,12(sp)
   11ff4:	14000017 	ldw	r16,0(r2)
   11ff8:	dc400415 	stw	r17,16(sp)
   11ffc:	dfc00515 	stw	ra,20(sp)
   12000:	80805217 	ldw	r2,328(r16)
   12004:	2023883a 	mov	r17,r4
   12008:	10003626 	beq	r2,zero,120e4 <__register_exitproc+0x100>
   1200c:	10c00117 	ldw	r3,4(r2)
   12010:	010007c4 	movi	r4,31
   12014:	20c00e16 	blt	r4,r3,12050 <__register_exitproc+0x6c>
   12018:	1a400044 	addi	r9,r3,1
   1201c:	8800211e 	bne	r17,zero,120a4 <__register_exitproc+0xc0>
   12020:	18c00084 	addi	r3,r3,2
   12024:	18c7883a 	add	r3,r3,r3
   12028:	18c7883a 	add	r3,r3,r3
   1202c:	12400115 	stw	r9,4(r2)
   12030:	10c7883a 	add	r3,r2,r3
   12034:	19400015 	stw	r5,0(r3)
   12038:	0005883a 	mov	r2,zero
   1203c:	dfc00517 	ldw	ra,20(sp)
   12040:	dc400417 	ldw	r17,16(sp)
   12044:	dc000317 	ldw	r16,12(sp)
   12048:	dec00604 	addi	sp,sp,24
   1204c:	f800283a 	ret
   12050:	00800034 	movhi	r2,0
   12054:	108bfe04 	addi	r2,r2,12280
   12058:	10002526 	beq	r2,zero,120f0 <__register_exitproc+0x10c>
   1205c:	01006404 	movi	r4,400
   12060:	d9400015 	stw	r5,0(sp)
   12064:	d9800115 	stw	r6,4(sp)
   12068:	d9c00215 	stw	r7,8(sp)
   1206c:	0002ff80 	call	2ff8 <malloc>
   12070:	d9400017 	ldw	r5,0(sp)
   12074:	d9800117 	ldw	r6,4(sp)
   12078:	d9c00217 	ldw	r7,8(sp)
   1207c:	10001c26 	beq	r2,zero,120f0 <__register_exitproc+0x10c>
   12080:	80c05217 	ldw	r3,328(r16)
   12084:	10000115 	stw	zero,4(r2)
   12088:	02400044 	movi	r9,1
   1208c:	10c00015 	stw	r3,0(r2)
   12090:	80805215 	stw	r2,328(r16)
   12094:	10006215 	stw	zero,392(r2)
   12098:	10006315 	stw	zero,396(r2)
   1209c:	0007883a 	mov	r3,zero
   120a0:	883fdf26 	beq	r17,zero,12020 <__alt_data_end+0xfffbc8f0>
   120a4:	18d1883a 	add	r8,r3,r3
   120a8:	4211883a 	add	r8,r8,r8
   120ac:	1211883a 	add	r8,r2,r8
   120b0:	41802215 	stw	r6,136(r8)
   120b4:	01000044 	movi	r4,1
   120b8:	11806217 	ldw	r6,392(r2)
   120bc:	20c8983a 	sll	r4,r4,r3
   120c0:	310cb03a 	or	r6,r6,r4
   120c4:	11806215 	stw	r6,392(r2)
   120c8:	41c04215 	stw	r7,264(r8)
   120cc:	01800084 	movi	r6,2
   120d0:	89bfd31e 	bne	r17,r6,12020 <__alt_data_end+0xfffbc8f0>
   120d4:	11806317 	ldw	r6,396(r2)
   120d8:	3108b03a 	or	r4,r6,r4
   120dc:	11006315 	stw	r4,396(r2)
   120e0:	003fcf06 	br	12020 <__alt_data_end+0xfffbc8f0>
   120e4:	80805304 	addi	r2,r16,332
   120e8:	80805215 	stw	r2,328(r16)
   120ec:	003fc706 	br	1200c <__alt_data_end+0xfffbc8dc>
   120f0:	00bfffc4 	movi	r2,-1
   120f4:	003fd106 	br	1203c <__alt_data_end+0xfffbc90c>

000120f8 <__call_exitprocs>:
   120f8:	00800074 	movhi	r2,1
   120fc:	10920804 	addi	r2,r2,18464
   12100:	10800017 	ldw	r2,0(r2)
   12104:	defff404 	addi	sp,sp,-48
   12108:	dd800815 	stw	r22,32(sp)
   1210c:	d8800015 	stw	r2,0(sp)
   12110:	10805204 	addi	r2,r2,328
   12114:	dd000615 	stw	r20,24(sp)
   12118:	dc800415 	stw	r18,16(sp)
   1211c:	dfc00b15 	stw	ra,44(sp)
   12120:	df000a15 	stw	fp,40(sp)
   12124:	ddc00915 	stw	r23,36(sp)
   12128:	dd400715 	stw	r21,28(sp)
   1212c:	dcc00515 	stw	r19,20(sp)
   12130:	dc400315 	stw	r17,12(sp)
   12134:	dc000215 	stw	r16,8(sp)
   12138:	2025883a 	mov	r18,r4
   1213c:	2829883a 	mov	r20,r5
   12140:	d8800115 	stw	r2,4(sp)
   12144:	05bfffc4 	movi	r22,-1
   12148:	d8800017 	ldw	r2,0(sp)
   1214c:	14c05217 	ldw	r19,328(r2)
   12150:	98001d26 	beq	r19,zero,121c8 <__call_exitprocs+0xd0>
   12154:	dd400117 	ldw	r21,4(sp)
   12158:	98800117 	ldw	r2,4(r19)
   1215c:	173fffc4 	addi	fp,r2,-1
   12160:	e0000d16 	blt	fp,zero,12198 <__call_exitprocs+0xa0>
   12164:	14000044 	addi	r16,r2,1
   12168:	8421883a 	add	r16,r16,r16
   1216c:	8421883a 	add	r16,r16,r16
   12170:	84402004 	addi	r17,r16,128
   12174:	9c63883a 	add	r17,r19,r17
   12178:	9c21883a 	add	r16,r19,r16
   1217c:	a0001e26 	beq	r20,zero,121f8 <__call_exitprocs+0x100>
   12180:	80804017 	ldw	r2,256(r16)
   12184:	15001c26 	beq	r2,r20,121f8 <__call_exitprocs+0x100>
   12188:	e73fffc4 	addi	fp,fp,-1
   1218c:	843fff04 	addi	r16,r16,-4
   12190:	8c7fff04 	addi	r17,r17,-4
   12194:	e5bff91e 	bne	fp,r22,1217c <__alt_data_end+0xfffbca4c>
   12198:	00800034 	movhi	r2,0
   1219c:	108c0304 	addi	r2,r2,12300
   121a0:	10000926 	beq	r2,zero,121c8 <__call_exitprocs+0xd0>
   121a4:	98800117 	ldw	r2,4(r19)
   121a8:	1000311e 	bne	r2,zero,12270 <__call_exitprocs+0x178>
   121ac:	98800017 	ldw	r2,0(r19)
   121b0:	10003426 	beq	r2,zero,12284 <__call_exitprocs+0x18c>
   121b4:	9809883a 	mov	r4,r19
   121b8:	a8800015 	stw	r2,0(r21)
   121bc:	000300c0 	call	300c <free>
   121c0:	acc00017 	ldw	r19,0(r21)
   121c4:	983fe41e 	bne	r19,zero,12158 <__alt_data_end+0xfffbca28>
   121c8:	dfc00b17 	ldw	ra,44(sp)
   121cc:	df000a17 	ldw	fp,40(sp)
   121d0:	ddc00917 	ldw	r23,36(sp)
   121d4:	dd800817 	ldw	r22,32(sp)
   121d8:	dd400717 	ldw	r21,28(sp)
   121dc:	dd000617 	ldw	r20,24(sp)
   121e0:	dcc00517 	ldw	r19,20(sp)
   121e4:	dc800417 	ldw	r18,16(sp)
   121e8:	dc400317 	ldw	r17,12(sp)
   121ec:	dc000217 	ldw	r16,8(sp)
   121f0:	dec00c04 	addi	sp,sp,48
   121f4:	f800283a 	ret
   121f8:	98800117 	ldw	r2,4(r19)
   121fc:	80c00017 	ldw	r3,0(r16)
   12200:	10bfffc4 	addi	r2,r2,-1
   12204:	17001526 	beq	r2,fp,1225c <__call_exitprocs+0x164>
   12208:	80000015 	stw	zero,0(r16)
   1220c:	183fde26 	beq	r3,zero,12188 <__alt_data_end+0xfffbca58>
   12210:	00800044 	movi	r2,1
   12214:	1708983a 	sll	r4,r2,fp
   12218:	98806217 	ldw	r2,392(r19)
   1221c:	9dc00117 	ldw	r23,4(r19)
   12220:	2084703a 	and	r2,r4,r2
   12224:	1000061e 	bne	r2,zero,12240 <__call_exitprocs+0x148>
   12228:	183ee83a 	callr	r3
   1222c:	98800117 	ldw	r2,4(r19)
   12230:	15ffc51e 	bne	r2,r23,12148 <__alt_data_end+0xfffbca18>
   12234:	a8800017 	ldw	r2,0(r21)
   12238:	14ffd326 	beq	r2,r19,12188 <__alt_data_end+0xfffbca58>
   1223c:	003fc206 	br	12148 <__alt_data_end+0xfffbca18>
   12240:	98806317 	ldw	r2,396(r19)
   12244:	2084703a 	and	r2,r4,r2
   12248:	1000061e 	bne	r2,zero,12264 <__call_exitprocs+0x16c>
   1224c:	89400017 	ldw	r5,0(r17)
   12250:	9009883a 	mov	r4,r18
   12254:	183ee83a 	callr	r3
   12258:	003ff406 	br	1222c <__alt_data_end+0xfffbcafc>
   1225c:	9f000115 	stw	fp,4(r19)
   12260:	003fea06 	br	1220c <__alt_data_end+0xfffbcadc>
   12264:	89000017 	ldw	r4,0(r17)
   12268:	183ee83a 	callr	r3
   1226c:	003fef06 	br	1222c <__alt_data_end+0xfffbcafc>
   12270:	98800017 	ldw	r2,0(r19)
   12274:	982b883a 	mov	r21,r19
   12278:	1027883a 	mov	r19,r2
   1227c:	983fb61e 	bne	r19,zero,12158 <__alt_data_end+0xfffbca28>
   12280:	003fd106 	br	121c8 <__alt_data_end+0xfffbca98>
   12284:	0005883a 	mov	r2,zero
   12288:	003ffa06 	br	12274 <__alt_data_end+0xfffbcb44>

0001228c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   1228c:	defffd04 	addi	sp,sp,-12
   12290:	df000215 	stw	fp,8(sp)
   12294:	df000204 	addi	fp,sp,8
   12298:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   1229c:	0001883a 	nop
   122a0:	e0bfff17 	ldw	r2,-4(fp)
   122a4:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   122a8:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   122ac:	10000226 	beq	r2,zero,122b8 <_exit+0x2c>
    ALT_SIM_FAIL();
   122b0:	002af070 	cmpltui	zero,zero,43969
   122b4:	00000106 	br	122bc <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   122b8:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   122bc:	003fff06 	br	122bc <__alt_data_end+0xfffbcb8c>
