
Final_Project_Code.elf:     file format elf32-littlenios2
Final_Project_Code.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0000022c

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00013234 memsz 0x00013234 flags r-x
    LOAD off    0x00014254 vaddr 0x00013254 paddr 0x00014db0 align 2**12
         filesz 0x00001b5c memsz 0x00001b5c flags rw-
    LOAD off    0x0001690c vaddr 0x0001690c paddr 0x0001690c align 2**12
         filesz 0x00000000 memsz 0x0000017c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000020c  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000125d0  0000022c  0000022c  0000122c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000a58  000127fc  000127fc  000137fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b5c  00013254  00014db0  00014254  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000017c  0001690c  0001690c  0001690c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00016a88  00016a88  00015db0  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00015db0  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000dd0  00000000  00000000  00015dd8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00025470  00000000  00000000  00016ba8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000096bb  00000000  00000000  0003c018  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000b8c9  00000000  00000000  000456d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000027d0  00000000  00000000  00050f9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003aa8  00000000  00000000  0005376c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00016f01  00000000  00000000  00057214  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  0006e118  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000013c0  00000000  00000000  0006e158  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00072d6c  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00072d6f  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00072d7b  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00072d7c  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00072d7d  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00072d81  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00072d85  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  00072d89  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  00072d94  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  00072d9f  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  00072daa  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000003b  00000000  00000000  00072db5  2**0
                  CONTENTS, READONLY
 29 .jdi          000056ce  00000000  00000000  00072df0  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00083150  00000000  00000000  000784be  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
0000022c l    d  .text	00000000 .text
000127fc l    d  .rodata	00000000 .rodata
00013254 l    d  .rwdata	00000000 .rwdata
0001690c l    d  .bss	00000000 .bss
00016a88 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Final_Project_Code_bsp//obj/HAL/src/crt0.o
00000264 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 io_handler.c
00000000 l    df *ABS*	00000000 keyboard_functions.c
0001690c l     O .bss	00000002 ctl_reg
0001690e l     O .bss	00000002 no_device
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 play_game.c
00000000 l    df *ABS*	00000000 usb.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00003408 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00012f9a l     O .rodata	00000010 zeroes.4181
00012faa l     O .rodata	00000010 blanks.4180
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
000061f0 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00007d98 l     F .text	00000008 __fp_lock
00007da0 l     F .text	00000008 __fp_unlock
00007db4 l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
000136cc l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
00013b10 l     O .rwdata	00000020 lc_ctype_charset
00013af0 l     O .rwdata	00000020 lc_message_charset
00013b30 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00012fdc l     O .rodata	0000000c p05.2678
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0000aae8 l     F .text	000000fc __sprint_r.part.0
00013110 l     O .rodata	00000010 blanks.4125
00013100 l     O .rodata	00000010 zeroes.4126
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0000ff1c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00010044 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00010070 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00010178 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00010274 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00010358 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0001053c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00014da0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
000107f0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00010940 l     F .text	00000038 alt_dev_reg
00013d10 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00010c1c l     F .text	00000204 altera_avalon_jtag_uart_irq
00010e20 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000116f4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00011b8c l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00011ce4 l     F .text	00000050 alt_get_errno
00011d34 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0001695c g     O .bss	00000004 alt_instruction_exception_handler
0000a17c g     F .text	00000074 _mprec_log10
0000a268 g     F .text	0000008c __any_on
0000c514 g     F .text	00000054 _isatty_r
00012fe8 g     O .rodata	00000028 __mprec_tinytens
00010484 g     F .text	00000078 alt_main
00003d6c g     F .text	000000b8 _puts_r
00016988 g     O .bss	00000100 alt_irq
0000c568 g     F .text	0000005c _lseek_r
00014db0 g       *ABS*	00000000 __flash_rwdata_start
0000e93c g     F .text	00000084 .hidden __eqdf2
00016a88 g       *ABS*	00000000 __alt_heap_start
00003d30 g     F .text	0000003c printf
0000c790 g     F .text	0000009c _wcrtomb_r
0001691c g     O .bss	00000002 usb_ctl_val
0000a9e0 g     F .text	0000005c __sseek
000080fc g     F .text	00000010 __sinit
00016914 g     O .bss	00000004 keycode
0000c620 g     F .text	00000154 __swbuf_r
00008b74 g     F .text	0000007c _setlocale_r
00007f54 g     F .text	00000078 __sfmoreglue
0001051c g     F .text	00000020 __malloc_unlock
0000330c g     F .text	00000080 UsbGetRetryCnt
0000902c g     F .text	0000015c memmove
00000268 g     F .text	00000060 IO_init
000080e4 g     F .text	00000018 _cleanup
000092ac g     F .text	000000a8 _Balloc
0000e9c0 g     F .text	000000e0 .hidden __gtdf2
00012124 g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
0000c4bc g     F .text	00000058 _fstat_r
00016934 g     O .bss	00000004 errno
0000a95c g     F .text	00000008 __seofread
00000394 g     F .text	0000030c get_keycode
00016948 g     O .bss	00000004 alt_argv
0001cd70 g       *ABS*	00000000 _gp
000107c0 g     F .text	00000030 usleep
0000153c g     F .text	000000dc delete_enemy
00013b90 g     O .rwdata	00000180 alt_fd_list
00012144 g     F .text	00000090 alt_find_dev
00008ef4 g     F .text	00000138 memcpy
00001e10 g     F .text	000000bc fire_projectile
000019ac g     F .text	0000008c render_shadow
00007da8 g     F .text	0000000c _cleanup_r
0000fd44 g     F .text	000000d0 .hidden __floatsidf
00011c6c g     F .text	00000078 alt_io_redirect
0001691e g     O .bss	00000001 data_size
0000eaa0 g     F .text	000000e0 .hidden __ltdf2
000127fc g       *ABS*	00000000 __DTOR_END__
00003e24 g     F .text	00000014 puts
000123bc g     F .text	0000009c alt_exception_cause_generated_bad_addr
00001740 g     F .text	000000b0 render_enemy
0000a894 g     F .text	00000074 __fpclassifyd
0000a0d8 g     F .text	000000a4 __ratio
0000c020 g     F .text	00000024 __vfiprintf_internal
0001101c g     F .text	0000020c altera_avalon_jtag_uart_read
00003534 g     F .text	00000014 malloc
00003d04 g     F .text	0000002c _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00003524 g     F .text	00000008 .hidden __udivsi3
000101c8 g     F .text	000000ac isatty
00013038 g     O .rodata	000000c8 __mprec_tens
00008bf0 g     F .text	0000000c __locale_charset
000016f0 g     F .text	00000050 render_enemies
00016930 g     O .bss	00000004 __malloc_top_pad
000029ac g     F .text	00000264 UsbGetConfigDesc2
00014d80 g     O .rwdata	00000004 __mb_cur_max
00008c20 g     F .text	0000000c _localeconv_r
00013254 g     O .rwdata	00000070 sizes
000096d4 g     F .text	0000003c __i2b
00008560 g     F .text	000004a4 __sfvwrite_r
00016920 g     O .bss	00000002 intStat
00003eb4 g     F .text	00000054 _sbrk_r
0000c5c4 g     F .text	0000005c _read_r
00014d98 g     O .rwdata	00000004 alt_max_fd
0000c1cc g     F .text	00000100 _fclose_r
00007d68 g     F .text	00000030 fflush
0001692c g     O .bss	00000004 __malloc_max_sbrked_mem
0000147c g     F .text	000000c0 make_enemy
0000190c g     F .text	000000a0 render_shadows
000021a8 g     F .text	0000011c move_enemy
0000d720 g     F .text	0000089c .hidden __adddf3
00009e80 g     F .text	0000011c __b2d
0000d0dc g     F .text	0000061c .hidden __umoddi3
000103a8 g     F .text	000000dc lseek
00014d78 g     O .rwdata	00000004 _global_impure_ptr
0000a2f4 g     F .text	000005a0 _realloc_r
00016a88 g       *ABS*	00000000 __bss_end
00011a9c g     F .text	000000f0 alt_iic_isr_register
00012020 g     F .text	00000104 alt_tick
0000ca9c g     F .text	00000640 .hidden __udivdi3
0000c2e0 g     F .text	00000184 _fputwc_r
00013010 g     O .rodata	00000028 __mprec_bigtens
000094b8 g     F .text	00000104 __s2b
0000fe14 g     F .text	000000a4 .hidden __floatunsidf
00009c28 g     F .text	00000060 __mcmp
0000240c g     F .text	000000fc UsbSetAddress
0000811c g     F .text	00000018 __fp_lock_all
00011a50 g     F .text	0000004c alt_ic_irq_enabled
00011f88 g     F .text	00000098 alt_alarm_stop
00016950 g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	000000d0 alt_irq_handler
00013b68 g     O .rwdata	00000028 alt_dev_null
00001218 g     F .text	000000d4 init_players
000116d8 g     F .text	0000001c alt_dcache_flush_all
000095bc g     F .text	00000068 __hi0bits
00000330 g     F .text	00000064 IO_read
0000fcbc g     F .text	00000088 .hidden __fixdfsi
00014db0 g       *ABS*	00000000 __ram_rwdata_end
00014d90 g     O .rwdata	00000008 alt_dev_list
00010840 g     F .text	00000100 write
00013254 g       *ABS*	00000000 __ram_rodata_end
000100c0 g     F .text	000000b8 fstat
0000eaa0 g     F .text	000000e0 .hidden __ledf2
0000338c g     F .text	0000007c UsbPrintMem
000099a0 g     F .text	00000140 __pow5mult
0000abfc g     F .text	00001424 ___vfiprintf_internal_r
00016940 g     O .bss	00000004 __nlocale_changed
0000352c g     F .text	00000008 .hidden __umodsi3
00001afc g     F .text	00000058 render_player_check
00016a88 g       *ABS*	00000000 end
00010b58 g     F .text	000000c4 altera_avalon_jtag_uart_init
000001cc g     F .exceptions	00000060 alt_instruction_exception_entry
000127fc g       *ABS*	00000000 __CTOR_LIST__
00055730 g       *ABS*	00000000 __alt_stack_pointer
000013d4 g     F .text	000000a8 render_projectile
0000feb8 g     F .text	00000064 .hidden __clzsi2
00011228 g     F .text	00000218 altera_avalon_jtag_uart_write
0000810c g     F .text	00000004 __sfp_lock_acquire
00008e0c g     F .text	000000e8 memchr
00003fa0 g     F .text	000020fc ___vfprintf_internal_r
00002d0c g     F .text	000000fc UsbClassRequest
00008270 g     F .text	000002f0 _free_r
00008bfc g     F .text	00000010 __locale_mb_cur_max
00012634 g     F .text	00000194 __call_exitprocs
0001693c g     O .bss	00000004 __mlocale_changed
00014d70 g     O .rwdata	00000004 __malloc_sbrk_base
0000022c g     F .text	0000003c _start
00016954 g     O .bss	00000004 _alt_tick_rate
00003e50 g     F .text	00000064 rand
00009ae0 g     F .text	00000148 __lshift
00016958 g     O .bss	00000004 _alt_nticks
0001058c g     F .text	00000104 read
000109ac g     F .text	00000048 alt_sys_init
00012520 g     F .text	00000114 __register_exitproc
00009710 g     F .text	00000290 __multiply
00010ec8 g     F .text	00000068 altera_avalon_jtag_uart_close
000017f0 g     F .text	0000011c renderer
0000d6f8 g     F .text	00000028 .hidden __mulsi3
00013254 g       *ABS*	00000000 __ram_rwdata_start
000127fc g       *ABS*	00000000 __ram_rodata_start
00016960 g     O .bss	00000028 __malloc_current_mallinfo
000006a0 g     F .text	00000a0c setup_keyboard
00009f9c g     F .text	0000013c __d2b
00002508 g     F .text	00000144 UsbGetDeviceDesc1
000109f4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00001384 g     F .text	00000050 render_projectiles
000122e8 g     F .text	000000d4 alt_get_fd
00011580 g     F .text	00000158 alt_busy_sleep
0000c0a0 g     F .text	00000054 _close_r
0000208c g     F .text	0000011c move_player
000124a4 g     F .text	0000007c memcmp
00010ab4 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00016a88 g       *ABS*	00000000 __alt_stack_base
00010b04 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00001fa0 g     F .text	000000ec hits_enemy
000060c0 g     F .text	00000130 __swsetup_r
0000dfbc g     F .text	00000980 .hidden __divdf3
00007fcc g     F .text	00000118 __sfp
0000a1f0 g     F .text	00000078 __copybits
000132c4 g     O .rwdata	00000408 __malloc_av_
00008118 g     F .text	00000004 __sinit_lock_release
0000eb80 g     F .text	0000086c .hidden __muldf3
0000a908 g     F .text	00000054 __sread
00003288 g     F .text	00000084 UsbWaitTDListDone
000121d4 g     F .text	00000114 alt_find_file
00011744 g     F .text	000000a4 alt_dev_llist_insert
000104fc g     F .text	00000020 __malloc_lock
00010710 g     F .text	000000b0 sbrk
00007b40 g     F .text	00000228 _fflush_r
0000c0f4 g     F .text	000000d8 _calloc_r
00016922 g     O .bss	00000001 hot_plug_count
0001690c g       *ABS*	00000000 __bss_start
00009188 g     F .text	00000124 memset
000010ac g     F .text	0000016c main
0001694c g     O .bss	00000004 alt_envp
00016928 g     O .bss	00000004 __malloc_max_total_mem
00010a54 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00002c10 g     F .text	000000fc UsbSetConfig
0000c774 g     F .text	0000001c __swbuf
00003e38 g     F .text	00000018 srand
0000aa3c g     F .text	00000008 __sclose
00055730 g       *ABS*	00000000 __alt_heap_limit
0000c2cc g     F .text	00000014 fclose
00006418 g     F .text	00001728 _dtoa_r
0000355c g     F .text	000007a8 _malloc_r
0000c904 g     F .text	00000030 __ascii_wctomb
00014d9c g     O .rwdata	00000004 alt_errno
00008a04 g     F .text	000000b8 _fwalk
00003474 g     F .text	00000054 .hidden __divsi3
0000814c g     F .text	00000124 _malloc_trim_r
00002e08 g     F .text	00000144 UsbGetHidDesc
000127fc g       *ABS*	00000000 __CTOR_END__
0000aa44 g     F .text	000000a4 strcmp
000127fc g       *ABS*	00000000 __flash_rodata_start
000127fc g       *ABS*	00000000 __DTOR_LIST__
0000e93c g     F .text	00000084 .hidden __nedf2
00002318 g     F .text	00000044 UsbRead
00001d9c g     F .text	00000074 parse_keycode
0000133c g     F .text	00000048 move_projectiles
00010978 g     F .text	00000034 alt_irq_init
00010690 g     F .text	00000080 alt_release_fd
00013120 g     O .rodata	00000100 .hidden __clz_tab
00016938 g     O .bss	00000004 _PathLocale
00012458 g     F .text	00000014 atexit
0000c044 g     F .text	0000005c _write_r
00008c2c g     F .text	0000001c setlocale
00014d7c g     O .rwdata	00000004 _impure_ptr
00016944 g     O .bss	00000004 alt_argc
00011844 g     F .text	0000005c _do_dtors
00008c18 g     F .text	00000008 __locale_cjk_lang
00001ecc g     F .text	000000d4 check_projectiles
00000020 g       .exceptions	00000000 alt_irq_entry
00009e20 g     F .text	00000060 __ulp
00008134 g     F .text	00000018 __fp_unlock_all
00016918 g     O .bss	00000001 toggle
00001a38 g     F .text	000000c4 render_players
0000166c g     F .text	00000084 move_enemies
00014d88 g     O .rwdata	00000008 alt_fs_list
00002f4c g     F .text	0000033c UsbGetReportDesc
00000020 g       *ABS*	00000000 __ram_exceptions_start
00008c48 g     F .text	0000000c localeconv
000118bc g     F .text	00000050 alt_ic_isr_register
000012ec g     F .text	00000050 move_projectile
00014db0 g       *ABS*	00000000 _edata
00016a88 g       *ABS*	00000000 _end
000022c4 g     F .text	00000054 UsbWrite
00001618 g     F .text	00000054 count_enemies
0000022c g       *ABS*	00000000 __ram_exceptions_end
00010f30 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
00016924 g     O .bss	00000002 code
000119ac g     F .text	000000a4 alt_ic_irq_disable
0000a964 g     F .text	0000007c __swrite
00014d74 g     O .rwdata	00000004 __malloc_trim_threshold
00008c0c g     F .text	0000000c __locale_msgcharset
00016910 g     O .bss	00000002 fs_device
0001246c g     F .text	00000038 exit
00008abc g     F .text	000000b8 _fwalk_reent
00009c88 g     F .text	00000198 __mdiff
000034c8 g     F .text	0000005c .hidden __modsi3
00055730 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00008110 g     F .text	00000004 __sfp_lock_release
000002c8 g     F .text	00000068 IO_write
000127c8 g     F .text	00000034 _exit
00011440 g     F .text	00000140 alt_alarm_start
0000c990 g     F .text	0000010c .hidden __muldi3
00008c54 g     F .text	000001b8 __smakebuf_r
00003f08 g     F .text	00000098 strlen
00011e28 g     F .text	00000160 open
0000e9c0 g     F .text	000000e0 .hidden __gedf2
00014d84 g     O .rwdata	00000004 __wctomb
0000abe4 g     F .text	00000018 __sprint_r
000118a0 g     F .text	0000001c alt_icache_flush_all
00014da4 g     O .rwdata	00000004 alt_priority_mask
0001190c g     F .text	000000a0 alt_ic_irq_enable
0000609c g     F .text	00000024 __vfprintf_internal
0000c934 g     F .text	0000005c _wctomb_r
0000f3ec g     F .text	000008d0 .hidden __subdf3
00001b54 g     F .text	00000248 keycode_effect
00009624 g     F .text	000000b0 __lo0bits
00002820 g     F .text	0000018c UsbGetConfigDesc1
00014da8 g     O .rwdata	00000008 alt_alarm_list
000117e8 g     F .text	0000005c _do_ctors
0000235c g     F .text	000000b0 UsbSoftReset
0000c82c g     F .text	000000d8 wcrtomb
0000ff6c g     F .text	000000d8 close
0000264c g     F .text	000001d4 UsbGetDeviceDesc2
000102d8 g     F .text	00000080 alt_load
0000c464 g     F .text	00000058 fputwc
00003548 g     F .text	00000014 free
00008114 g     F .text	00000004 __sinit_lock_acquire
0000937c g     F .text	0000013c __multadd
00009354 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08408b14 	ori	at,at,556
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001cc0 	call	1cc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	00800074 	movhi	r2,1
 140:	109a6204 	addi	r2,r2,27016
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	00800074 	movhi	r2,1
 158:	109a6204 	addi	r2,r2,27016
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <__alt_data_end+0xfffaa9fc>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <__alt_data_end+0xfffaa9f0>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0001883a 	nop
}
 1b8:	e037883a 	mov	sp,fp
 1bc:	dfc00117 	ldw	ra,4(sp)
 1c0:	df000017 	ldw	fp,0(sp)
 1c4:	dec00204 	addi	sp,sp,8
 1c8:	f800283a 	ret

000001cc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1cc:	defffb04 	addi	sp,sp,-20
 1d0:	dfc00415 	stw	ra,16(sp)
 1d4:	df000315 	stw	fp,12(sp)
 1d8:	df000304 	addi	fp,sp,12
 1dc:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 1e0:	00bfffc4 	movi	r2,-1
 1e4:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 1e8:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1ec:	d0a6fb17 	ldw	r2,-25620(gp)
 1f0:	10000726 	beq	r2,zero,210 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 1f4:	d0a6fb17 	ldw	r2,-25620(gp)
 1f8:	e0fffd17 	ldw	r3,-12(fp)
 1fc:	1809883a 	mov	r4,r3
 200:	e17fff17 	ldw	r5,-4(fp)
 204:	e1bffe17 	ldw	r6,-8(fp)
 208:	103ee83a 	callr	r2
 20c:	00000206 	br	218 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 210:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 214:	0005883a 	mov	r2,zero
}
 218:	e037883a 	mov	sp,fp
 21c:	dfc00117 	ldw	ra,4(sp)
 220:	df000017 	ldw	fp,0(sp)
 224:	dec00204 	addi	sp,sp,8
 228:	f800283a 	ret

Disassembly of section .text:

0000022c <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     22c:	06c00174 	movhi	sp,5
    ori sp, sp, %lo(__alt_stack_pointer)
     230:	ded5cc14 	ori	sp,sp,22320
    movhi gp, %hi(_gp)
     234:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     238:	d6b35c14 	ori	gp,gp,52592
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     23c:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     240:	109a4314 	ori	r2,r2,26892

    movhi r3, %hi(__bss_end)
     244:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     248:	18daa214 	ori	r3,r3,27272

    beq r2, r3, 1f
     24c:	10c00326 	beq	r2,r3,25c <_start+0x30>

0:
    stw zero, (r2)
     250:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     254:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     258:	10fffd36 	bltu	r2,r3,250 <__alt_data_end+0xfffaab20>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     25c:	00102d80 	call	102d8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     260:	00104840 	call	10484 <alt_main>

00000264 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     264:	003fff06 	br	264 <__alt_data_end+0xfffaab34>

00000268 <IO_init>:
#define otg_hpi_cs			(volatile char*)	OTG_HPI_CS_BASE //FOR SOME REASON CS BASE BEHAVES WEIRDLY MIGHT HAVE TO SET MANUALLY
#define otg_hpi_w			(volatile char*)	OTG_HPI_W_BASE


void IO_init(void)
{
     268:	deffff04 	addi	sp,sp,-4
     26c:	df000015 	stw	fp,0(sp)
     270:	d839883a 	mov	fp,sp
	*otg_hpi_cs = 0;
     274:	00800234 	movhi	r2,8
     278:	10841404 	addi	r2,r2,4176
     27c:	10000005 	stb	zero,0(r2)
	*otg_hpi_r = 1;
     280:	00800234 	movhi	r2,8
     284:	10840804 	addi	r2,r2,4128
     288:	00c00044 	movi	r3,1
     28c:	10c00005 	stb	r3,0(r2)
	*otg_hpi_w = 1;
     290:	00800234 	movhi	r2,8
     294:	10840404 	addi	r2,r2,4112
     298:	00c00044 	movi	r3,1
     29c:	10c00005 	stb	r3,0(r2)
	*otg_hpi_address = 0;
     2a0:	00800234 	movhi	r2,8
     2a4:	10841004 	addi	r2,r2,4160
     2a8:	10000015 	stw	zero,0(r2)
	*otg_hpi_data = 0;
     2ac:	00800234 	movhi	r2,8
     2b0:	10840c04 	addi	r2,r2,4144
     2b4:	10000015 	stw	zero,0(r2)
}
     2b8:	e037883a 	mov	sp,fp
     2bc:	df000017 	ldw	fp,0(sp)
     2c0:	dec00104 	addi	sp,sp,4
     2c4:	f800283a 	ret

000002c8 <IO_write>:

void IO_write(alt_u8 Address, alt_u16 Data)
{
     2c8:	defffd04 	addi	sp,sp,-12
     2cc:	df000215 	stw	fp,8(sp)
     2d0:	df000204 	addi	fp,sp,8
     2d4:	2007883a 	mov	r3,r4
     2d8:	2805883a 	mov	r2,r5
     2dc:	e0fffe05 	stb	r3,-8(fp)
     2e0:	e0bfff0d 	sth	r2,-4(fp)
	*otg_hpi_address = Address;
     2e4:	00800234 	movhi	r2,8
     2e8:	10841004 	addi	r2,r2,4160
     2ec:	e0fffe03 	ldbu	r3,-8(fp)
     2f0:	10c00015 	stw	r3,0(r2)
	*otg_hpi_data = Data;
     2f4:	00800234 	movhi	r2,8
     2f8:	10840c04 	addi	r2,r2,4144
     2fc:	e0ffff0b 	ldhu	r3,-4(fp)
     300:	10c00015 	stw	r3,0(r2)
	*otg_hpi_w = 0;
     304:	00800234 	movhi	r2,8
     308:	10840404 	addi	r2,r2,4112
     30c:	10000005 	stb	zero,0(r2)
	*otg_hpi_w = 1;
     310:	00800234 	movhi	r2,8
     314:	10840404 	addi	r2,r2,4112
     318:	00c00044 	movi	r3,1
     31c:	10c00005 	stb	r3,0(r2)
}
     320:	e037883a 	mov	sp,fp
     324:	df000017 	ldw	fp,0(sp)
     328:	dec00104 	addi	sp,sp,4
     32c:	f800283a 	ret

00000330 <IO_read>:

alt_u16 IO_read(alt_u8 Address)
{
     330:	defffd04 	addi	sp,sp,-12
     334:	df000215 	stw	fp,8(sp)
     338:	df000204 	addi	fp,sp,8
     33c:	2005883a 	mov	r2,r4
     340:	e0bfff05 	stb	r2,-4(fp)
	alt_u16 temp;
	*otg_hpi_address = Address;
     344:	00800234 	movhi	r2,8
     348:	10841004 	addi	r2,r2,4160
     34c:	e0ffff03 	ldbu	r3,-4(fp)
     350:	10c00015 	stw	r3,0(r2)
	*otg_hpi_r = 0;
     354:	00800234 	movhi	r2,8
     358:	10840804 	addi	r2,r2,4128
     35c:	10000005 	stb	zero,0(r2)
	temp = *otg_hpi_data;
     360:	00800234 	movhi	r2,8
     364:	10840c04 	addi	r2,r2,4144
     368:	10800017 	ldw	r2,0(r2)
     36c:	e0bffe0d 	sth	r2,-8(fp)
	*otg_hpi_r = 1;
     370:	00800234 	movhi	r2,8
     374:	10840804 	addi	r2,r2,4128
     378:	00c00044 	movi	r3,1
     37c:	10c00005 	stb	r3,0(r2)

	return temp;
     380:	e0bffe0b 	ldhu	r2,-8(fp)
}
     384:	e037883a 	mov	sp,fp
     388:	df000017 	ldw	fp,0(sp)
     38c:	dec00104 	addi	sp,sp,4
     390:	f800283a 	ret

00000394 <get_keycode>:
alt_u16 code;




int get_keycode(unsigned int *keycode1,unsigned int *keycode2){
     394:	defffc04 	addi	sp,sp,-16
     398:	dfc00315 	stw	ra,12(sp)
     39c:	df000215 	stw	fp,8(sp)
     3a0:	df000204 	addi	fp,sp,8
     3a4:	e13ffe15 	stw	r4,-8(fp)
     3a8:	e17fff15 	stw	r5,-4(fp)
				toggle++;
     3ac:	d0a6ea03 	ldbu	r2,-25688(gp)
     3b0:	10800044 	addi	r2,r2,1
     3b4:	d0a6ea05 	stb	r2,-25688(gp)
				IO_write(HPI_ADDR,0x0500); //the start address
     3b8:	01000084 	movi	r4,2
     3bc:	01414004 	movi	r5,1280
     3c0:	00002c80 	call	2c8 <IO_write>
				//data phase IN-1
				IO_write(HPI_DATA,0x051c); //500
     3c4:	0009883a 	mov	r4,zero
     3c8:	01414704 	movi	r5,1308
     3cc:	00002c80 	call	2c8 <IO_write>

				IO_write(HPI_DATA,0x000f & data_size);//2 data length
     3d0:	d0a6eb83 	ldbu	r2,-25682(gp)
     3d4:	10803fcc 	andi	r2,r2,255
     3d8:	108003cc 	andi	r2,r2,15
     3dc:	0009883a 	mov	r4,zero
     3e0:	100b883a 	mov	r5,r2
     3e4:	00002c80 	call	2c8 <IO_write>

				IO_write(HPI_DATA,0x0291);//4 //endpoint 1
     3e8:	0009883a 	mov	r4,zero
     3ec:	0140a444 	movi	r5,657
     3f0:	00002c80 	call	2c8 <IO_write>
				if(toggle%2)
     3f4:	d0a6ea03 	ldbu	r2,-25688(gp)
     3f8:	1080004c 	andi	r2,r2,1
     3fc:	10803fcc 	andi	r2,r2,255
     400:	10000426 	beq	r2,zero,414 <get_keycode+0x80>
				{
					IO_write(HPI_DATA,0x0001);//6 //data 1
     404:	0009883a 	mov	r4,zero
     408:	01400044 	movi	r5,1
     40c:	00002c80 	call	2c8 <IO_write>
     410:	00000306 	br	420 <get_keycode+0x8c>
				}
				else
				{
					IO_write(HPI_DATA,0x0041);//6 //data 1
     414:	0009883a 	mov	r4,zero
     418:	01401044 	movi	r5,65
     41c:	00002c80 	call	2c8 <IO_write>
				}
				IO_write(HPI_DATA,0x0013);//8
     420:	0009883a 	mov	r4,zero
     424:	014004c4 	movi	r5,19
     428:	00002c80 	call	2c8 <IO_write>
				IO_write(HPI_DATA,0x0000);//a
     42c:	0009883a 	mov	r4,zero
     430:	000b883a 	mov	r5,zero
     434:	00002c80 	call	2c8 <IO_write>
				UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
     438:	01006c04 	movi	r4,432
     43c:	01414004 	movi	r5,1280
     440:	00022c40 	call	22c4 <UsbWrite>

				while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     444:	00002506 	br	4dc <get_keycode+0x148>
				{
					IO_write(HPI_ADDR,0x0500); //the start address
     448:	01000084 	movi	r4,2
     44c:	01414004 	movi	r5,1280
     450:	00002c80 	call	2c8 <IO_write>
					//data phase IN-1
					IO_write(HPI_DATA,0x051c); //500
     454:	0009883a 	mov	r4,zero
     458:	01414704 	movi	r5,1308
     45c:	00002c80 	call	2c8 <IO_write>

					IO_write(HPI_DATA,0x000f & data_size);//2 data length
     460:	d0a6eb83 	ldbu	r2,-25682(gp)
     464:	10803fcc 	andi	r2,r2,255
     468:	108003cc 	andi	r2,r2,15
     46c:	0009883a 	mov	r4,zero
     470:	100b883a 	mov	r5,r2
     474:	00002c80 	call	2c8 <IO_write>

					IO_write(HPI_DATA,0x0291);//4 //endpoint 1
     478:	0009883a 	mov	r4,zero
     47c:	0140a444 	movi	r5,657
     480:	00002c80 	call	2c8 <IO_write>
					if(toggle%2)
     484:	d0a6ea03 	ldbu	r2,-25688(gp)
     488:	1080004c 	andi	r2,r2,1
     48c:	10803fcc 	andi	r2,r2,255
     490:	10000426 	beq	r2,zero,4a4 <get_keycode+0x110>
					{
						IO_write(HPI_DATA,0x0001);//6 //data 1
     494:	0009883a 	mov	r4,zero
     498:	01400044 	movi	r5,1
     49c:	00002c80 	call	2c8 <IO_write>
     4a0:	00000306 	br	4b0 <get_keycode+0x11c>
					}
					else
					{
						IO_write(HPI_DATA,0x0041);//6 //data 1
     4a4:	0009883a 	mov	r4,zero
     4a8:	01401044 	movi	r5,65
     4ac:	00002c80 	call	2c8 <IO_write>
					}
					IO_write(HPI_DATA,0x0013);//8
     4b0:	0009883a 	mov	r4,zero
     4b4:	014004c4 	movi	r5,19
     4b8:	00002c80 	call	2c8 <IO_write>
					IO_write(HPI_DATA,0x0000);//
     4bc:	0009883a 	mov	r4,zero
     4c0:	000b883a 	mov	r5,zero
     4c4:	00002c80 	call	2c8 <IO_write>
					UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
     4c8:	01006c04 	movi	r4,432
     4cc:	01414004 	movi	r5,1280
     4d0:	00022c40 	call	22c4 <UsbWrite>
					usleep(10*1000);
     4d4:	0109c404 	movi	r4,10000
     4d8:	00107c00 	call	107c0 <usleep>
				}
				IO_write(HPI_DATA,0x0013);//8
				IO_write(HPI_DATA,0x0000);//a
				UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr

				while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     4dc:	010000c4 	movi	r4,3
     4e0:	00003300 	call	330 <IO_read>
     4e4:	10bfffcc 	andi	r2,r2,65535
     4e8:	1080040c 	andi	r2,r2,16
     4ec:	103fd626 	beq	r2,zero,448 <__alt_data_end+0xfffaad18>
					usleep(10*1000);
				}//end while



				usb_ctl_val = UsbWaitTDListDone();
     4f0:	00032880 	call	3288 <UsbWaitTDListDone>
     4f4:	d0a6eb0d 	sth	r2,-25684(gp)

				// packet starts from 0x051c, reading third byte
				// TASK: Write the address to read from the memory for byte 3 of the report descriptor to HPI_ADDR.
				IO_write(HPI_ADDR,0x051e); //the start address
     4f8:	01000084 	movi	r4,2
     4fc:	01414784 	movi	r5,1310
     500:	00002c80 	call	2c8 <IO_write>
				*keycode1 = IO_read(HPI_DATA);
     504:	0009883a 	mov	r4,zero
     508:	00003300 	call	330 <IO_read>
     50c:	10ffffcc 	andi	r3,r2,65535
     510:	e0bffe17 	ldw	r2,-8(fp)
     514:	10c00015 	stw	r3,0(r2)
				keycode=*keycode1;
     518:	e0bffe17 	ldw	r2,-8(fp)
     51c:	10800017 	ldw	r2,0(r2)
     520:	d0a6e915 	stw	r2,-25692(gp)


				*keycode2 = IO_read(HPI_DATA);
     524:	0009883a 	mov	r4,zero
     528:	00003300 	call	330 <IO_read>
     52c:	10ffffcc 	andi	r3,r2,65535
     530:	e0bfff17 	ldw	r2,-4(fp)
     534:	10c00015 	stw	r3,0(r2)


				IOWR(KEYCODE_BASE, 0, keycode & 0xff);
     538:	d0a6e917 	ldw	r2,-25692(gp)
     53c:	10c03fcc 	andi	r3,r2,255
     540:	00800234 	movhi	r2,8
     544:	10841804 	addi	r2,r2,4192
     548:	10c00035 	stwio	r3,0(r2)



				usb_ctl_val = UsbRead(ctl_reg);
     54c:	d0a6e70b 	ldhu	r2,-25700(gp)
     550:	10bfffcc 	andi	r2,r2,65535
     554:	1009883a 	mov	r4,r2
     558:	00023180 	call	2318 <UsbRead>
     55c:	d0a6eb0d 	sth	r2,-25684(gp)

				if(!(usb_ctl_val & no_device))
     560:	d0e6eb0b 	ldhu	r3,-25684(gp)
     564:	d0a6e78b 	ldhu	r2,-25698(gp)
     568:	1884703a 	and	r2,r3,r2
     56c:	10bfffcc 	andi	r2,r2,65535
     570:	1000211e 	bne	r2,zero,5f8 <get_keycode+0x264>
				{
					//USB hot plug routine
					for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
     574:	d026ec85 	stb	zero,-25678(gp)
     578:	00001006 	br	5bc <get_keycode+0x228>
					{
						usleep(5*1000);
     57c:	0104e204 	movi	r4,5000
     580:	00107c00 	call	107c0 <usleep>
						usb_ctl_val = UsbRead(ctl_reg);
     584:	d0a6e70b 	ldhu	r2,-25700(gp)
     588:	10bfffcc 	andi	r2,r2,65535
     58c:	1009883a 	mov	r4,r2
     590:	00023180 	call	2318 <UsbRead>
     594:	d0a6eb0d 	sth	r2,-25684(gp)
						if(usb_ctl_val & no_device) break;
     598:	d0e6eb0b 	ldhu	r3,-25684(gp)
     59c:	d0a6e78b 	ldhu	r2,-25698(gp)
     5a0:	1884703a 	and	r2,r3,r2
     5a4:	10bfffcc 	andi	r2,r2,65535
     5a8:	10000126 	beq	r2,zero,5b0 <get_keycode+0x21c>
     5ac:	00000706 	br	5cc <get_keycode+0x238>
				usb_ctl_val = UsbRead(ctl_reg);

				if(!(usb_ctl_val & no_device))
				{
					//USB hot plug routine
					for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
     5b0:	d0a6ec83 	ldbu	r2,-25678(gp)
     5b4:	10800044 	addi	r2,r2,1
     5b8:	d0a6ec85 	stb	r2,-25678(gp)
     5bc:	d0a6ec83 	ldbu	r2,-25678(gp)
     5c0:	10803fcc 	andi	r2,r2,255
     5c4:	108001f0 	cmpltui	r2,r2,7
     5c8:	103fec1e 	bne	r2,zero,57c <__alt_data_end+0xfffaae4c>
					{
						usleep(5*1000);
						usb_ctl_val = UsbRead(ctl_reg);
						if(usb_ctl_val & no_device) break;
					}
					if(!(usb_ctl_val & no_device))
     5cc:	d0e6eb0b 	ldhu	r3,-25684(gp)
     5d0:	d0a6e78b 	ldhu	r2,-25698(gp)
     5d4:	1884703a 	and	r2,r3,r2
     5d8:	10bfffcc 	andi	r2,r2,65535
     5dc:	1000061e 	bne	r2,zero,5f8 <get_keycode+0x264>
					{
						printf("\n[INFO]: the keyboard has been removed!!! \n");
     5e0:	01000074 	movhi	r4,1
     5e4:	2109ff04 	addi	r4,r4,10236
     5e8:	0003e240 	call	3e24 <puts>
						printf("[INFO]: please insert again!!! \n");
     5ec:	01000074 	movhi	r4,1
     5f0:	210a0a04 	addi	r4,r4,10280
     5f4:	0003e240 	call	3e24 <puts>
					}
				}

				while (!(usb_ctl_val & no_device))
     5f8:	00001e06 	br	674 <get_keycode+0x2e0>
				{

					usb_ctl_val = UsbRead(ctl_reg);
     5fc:	d0a6e70b 	ldhu	r2,-25700(gp)
     600:	10bfffcc 	andi	r2,r2,65535
     604:	1009883a 	mov	r4,r2
     608:	00023180 	call	2318 <UsbRead>
     60c:	d0a6eb0d 	sth	r2,-25684(gp)
					usleep(5*1000);
     610:	0104e204 	movi	r4,5000
     614:	00107c00 	call	107c0 <usleep>
					usb_ctl_val = UsbRead(ctl_reg);
     618:	d0a6e70b 	ldhu	r2,-25700(gp)
     61c:	10bfffcc 	andi	r2,r2,65535
     620:	1009883a 	mov	r4,r2
     624:	00023180 	call	2318 <UsbRead>
     628:	d0a6eb0d 	sth	r2,-25684(gp)
					usleep(5*1000);
     62c:	0104e204 	movi	r4,5000
     630:	00107c00 	call	107c0 <usleep>
					usb_ctl_val = UsbRead(ctl_reg);
     634:	d0a6e70b 	ldhu	r2,-25700(gp)
     638:	10bfffcc 	andi	r2,r2,65535
     63c:	1009883a 	mov	r4,r2
     640:	00023180 	call	2318 <UsbRead>
     644:	d0a6eb0d 	sth	r2,-25684(gp)
					usleep(5*1000);
     648:	0104e204 	movi	r4,5000
     64c:	00107c00 	call	107c0 <usleep>

					if(usb_ctl_val & no_device)
     650:	d0e6eb0b 	ldhu	r3,-25684(gp)
     654:	d0a6e78b 	ldhu	r2,-25698(gp)
     658:	1884703a 	and	r2,r3,r2
     65c:	10bfffcc 	andi	r2,r2,65535
     660:	10000226 	beq	r2,zero,66c <get_keycode+0x2d8>
						return -1;
     664:	00bfffc4 	movi	r2,-1
     668:	00000806 	br	68c <get_keycode+0x2f8>

					usleep(200);
     66c:	01003204 	movi	r4,200
     670:	00107c00 	call	107c0 <usleep>
						printf("\n[INFO]: the keyboard has been removed!!! \n");
						printf("[INFO]: please insert again!!! \n");
					}
				}

				while (!(usb_ctl_val & no_device))
     674:	d0e6eb0b 	ldhu	r3,-25684(gp)
     678:	d0a6e78b 	ldhu	r2,-25698(gp)
     67c:	1884703a 	and	r2,r3,r2
     680:	10bfffcc 	andi	r2,r2,65535
     684:	103fdd26 	beq	r2,zero,5fc <__alt_data_end+0xfffaaecc>
					if(usb_ctl_val & no_device)
						return -1;

					usleep(200);
				}
				return 0;
     688:	0005883a 	mov	r2,zero
}
     68c:	e037883a 	mov	sp,fp
     690:	dfc00117 	ldw	ra,4(sp)
     694:	df000017 	ldw	fp,0(sp)
     698:	dec00204 	addi	sp,sp,8
     69c:	f800283a 	ret

000006a0 <setup_keyboard>:


void setup_keyboard()
{
     6a0:	defffe04 	addi	sp,sp,-8
     6a4:	dfc00115 	stw	ra,4(sp)
     6a8:	df000015 	stw	fp,0(sp)
     6ac:	d839883a 	mov	fp,sp
	IO_init();
     6b0:	00002680 	call	268 <IO_init>
		usleep(10*10000);
	}*/



	printf("USB keyboard setup...\n\n");
     6b4:	01000074 	movhi	r4,1
     6b8:	210a1204 	addi	r4,r4,10312
     6bc:	0003e240 	call	3e24 <puts>

	//----------------------------------------SIE1 initial---------------------------------------------------//
	USB_HOT_PLUG:
	UsbSoftReset();
     6c0:	000235c0 	call	235c <UsbSoftReset>

	// STEP 1a:
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
     6c4:	01005104 	movi	r4,324
     6c8:	000b883a 	mov	r5,zero
     6cc:	00022c40 	call	22c4 <UsbWrite>
	UsbWrite (HOST1_STAT_REG, 0xFFFF);
     6d0:	01302414 	movui	r4,49296
     6d4:	017fffd4 	movui	r5,65535
     6d8:	00022c40 	call	22c4 <UsbWrite>

	/* Set HUSB_pEOT time */
	UsbWrite(HUSB_pEOT, 600); // adjust the according to your USB device speed
     6dc:	01006d04 	movi	r4,436
     6e0:	01409604 	movi	r5,600
     6e4:	00022c40 	call	22c4 <UsbWrite>

	usb_ctl_val = SOFEOP1_TO_CPU_EN | RESUME1_TO_HPI_EN;// | SOFEOP1_TO_HPI_EN;
     6e8:	00811004 	movi	r2,1088
     6ec:	d0a6eb0d 	sth	r2,-25684(gp)
	UsbWrite(HPI_IRQ_ROUTING_REG, usb_ctl_val);
     6f0:	d0a6eb0b 	ldhu	r2,-25684(gp)
     6f4:	10bfffcc 	andi	r2,r2,65535
     6f8:	01005084 	movi	r4,322
     6fc:	100b883a 	mov	r5,r2
     700:	00022c40 	call	22c4 <UsbWrite>

	intStat = A_CHG_IRQ_EN | SOF_EOP_IRQ_EN ;
     704:	00808404 	movi	r2,528
     708:	d0a6ec0d 	sth	r2,-25680(gp)
	UsbWrite(HOST1_IRQ_EN_REG, intStat);
     70c:	d0a6ec0b 	ldhu	r2,-25680(gp)
     710:	10bfffcc 	andi	r2,r2,65535
     714:	01302314 	movui	r4,49292
     718:	100b883a 	mov	r5,r2
     71c:	00022c40 	call	22c4 <UsbWrite>
	// STEP 1a end

	// STEP 1b begin
	UsbWrite(COMM_R0,0x0000);//reset time
     720:	01007104 	movi	r4,452
     724:	000b883a 	mov	r5,zero
     728:	00022c40 	call	22c4 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
     72c:	01007184 	movi	r4,454
     730:	000b883a 	mov	r5,zero
     734:	00022c40 	call	22c4 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
     738:	01007204 	movi	r4,456
     73c:	000b883a 	mov	r5,zero
     740:	00022c40 	call	22c4 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
     744:	01007284 	movi	r4,458
     748:	000b883a 	mov	r5,zero
     74c:	00022c40 	call	22c4 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
     750:	01007304 	movi	r4,460
     754:	000b883a 	mov	r5,zero
     758:	00022c40 	call	22c4 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
     75c:	01007384 	movi	r4,462
     760:	000b883a 	mov	r5,zero
     764:	00022c40 	call	22c4 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
     768:	01007404 	movi	r4,464
     76c:	000b883a 	mov	r5,zero
     770:	00022c40 	call	22c4 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
     774:	01007484 	movi	r4,466
     778:	000b883a 	mov	r5,zero
     77c:	00022c40 	call	22c4 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
     780:	01007504 	movi	r4,468
     784:	000b883a 	mov	r5,zero
     788:	00022c40 	call	22c4 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
     78c:	01007584 	movi	r4,470
     790:	000b883a 	mov	r5,zero
     794:	00022c40 	call	22c4 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
     798:	01007604 	movi	r4,472
     79c:	000b883a 	mov	r5,zero
     7a0:	00022c40 	call	22c4 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
     7a4:	01007684 	movi	r4,474
     7a8:	000b883a 	mov	r5,zero
     7ac:	00022c40 	call	22c4 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
     7b0:	01007704 	movi	r4,476
     7b4:	000b883a 	mov	r5,zero
     7b8:	00022c40 	call	22c4 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
     7bc:	01007784 	movi	r4,478
     7c0:	000b883a 	mov	r5,zero
     7c4:	00022c40 	call	22c4 <UsbWrite>
	UsbWrite(COMM_INT_NUM,HUSB_SIE1_INIT_INT); //HUSB_SIE1_INIT_INT
     7c8:	01007084 	movi	r4,450
     7cc:	01401c84 	movi	r5,114
     7d0:	00022c40 	call	22c4 <UsbWrite>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
     7d4:	01000044 	movi	r4,1
     7d8:	01738054 	movui	r5,52737
     7dc:	00002c80 	call	2c8 <IO_write>

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
     7e0:	0001883a 	nop
     7e4:	010000c4 	movi	r4,3
     7e8:	00003300 	call	330 <IO_read>
     7ec:	10bfffcc 	andi	r2,r2,65535
     7f0:	103ffc26 	beq	r2,zero,7e4 <__alt_data_end+0xfffab0b4>
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
     7f4:	0001883a 	nop
     7f8:	01000044 	movi	r4,1
     7fc:	00003300 	call	330 <IO_read>
     800:	10bfffcc 	andi	r2,r2,65535
     804:	1083fb58 	cmpnei	r2,r2,4077
     808:	10000826 	beq	r2,zero,82c <setup_keyboard+0x18c>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
     80c:	01000044 	movi	r4,1
     810:	00003300 	call	330 <IO_read>
     814:	10bfffcc 	andi	r2,r2,65535
     818:	01000074 	movhi	r4,1
     81c:	210a1804 	addi	r4,r4,10336
     820:	100b883a 	mov	r5,r2
     824:	0003d300 	call	3d30 <printf>
		goto USB_HOT_PLUG;
     828:	003fa506 	br	6c0 <__alt_data_end+0xfffaaf90>
	}
	// STEP 1b end

	printf("STEP 1 Complete");
     82c:	01000074 	movhi	r4,1
     830:	210a2104 	addi	r4,r4,10372
     834:	0003d300 	call	3d30 <printf>
	// STEP 2 begin
	UsbWrite(COMM_INT_NUM,HUSB_RESET_INT); //husb reset
     838:	01007084 	movi	r4,450
     83c:	01401d04 	movi	r5,116
     840:	00022c40 	call	22c4 <UsbWrite>
	UsbWrite(COMM_R0,0x003c);//reset time
     844:	01007104 	movi	r4,452
     848:	01400f04 	movi	r5,60
     84c:	00022c40 	call	22c4 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
     850:	01007184 	movi	r4,454
     854:	000b883a 	mov	r5,zero
     858:	00022c40 	call	22c4 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
     85c:	01007204 	movi	r4,456
     860:	000b883a 	mov	r5,zero
     864:	00022c40 	call	22c4 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
     868:	01007284 	movi	r4,458
     86c:	000b883a 	mov	r5,zero
     870:	00022c40 	call	22c4 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
     874:	01007304 	movi	r4,460
     878:	000b883a 	mov	r5,zero
     87c:	00022c40 	call	22c4 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
     880:	01007384 	movi	r4,462
     884:	000b883a 	mov	r5,zero
     888:	00022c40 	call	22c4 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
     88c:	01007404 	movi	r4,464
     890:	000b883a 	mov	r5,zero
     894:	00022c40 	call	22c4 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
     898:	01007484 	movi	r4,466
     89c:	000b883a 	mov	r5,zero
     8a0:	00022c40 	call	22c4 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
     8a4:	01007504 	movi	r4,468
     8a8:	000b883a 	mov	r5,zero
     8ac:	00022c40 	call	22c4 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
     8b0:	01007584 	movi	r4,470
     8b4:	000b883a 	mov	r5,zero
     8b8:	00022c40 	call	22c4 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
     8bc:	01007604 	movi	r4,472
     8c0:	000b883a 	mov	r5,zero
     8c4:	00022c40 	call	22c4 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
     8c8:	01007684 	movi	r4,474
     8cc:	000b883a 	mov	r5,zero
     8d0:	00022c40 	call	22c4 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
     8d4:	01007704 	movi	r4,476
     8d8:	000b883a 	mov	r5,zero
     8dc:	00022c40 	call	22c4 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
     8e0:	01007784 	movi	r4,478
     8e4:	000b883a 	mov	r5,zero
     8e8:	00022c40 	call	22c4 <UsbWrite>

	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
     8ec:	01000044 	movi	r4,1
     8f0:	01738054 	movui	r5,52737
     8f4:	00002c80 	call	2c8 <IO_write>

	while (IO_read(HPI_MAILBOX) != COMM_ACK)
     8f8:	0001883a 	nop
     8fc:	01000044 	movi	r4,1
     900:	00003300 	call	330 <IO_read>
     904:	10bfffcc 	andi	r2,r2,65535
     908:	1083fb58 	cmpnei	r2,r2,4077
     90c:	10000826 	beq	r2,zero,930 <setup_keyboard+0x290>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
     910:	01000044 	movi	r4,1
     914:	00003300 	call	330 <IO_read>
     918:	10bfffcc 	andi	r2,r2,65535
     91c:	01000074 	movhi	r4,1
     920:	210a1804 	addi	r4,r4,10336
     924:	100b883a 	mov	r5,r2
     928:	0003d300 	call	3d30 <printf>
		goto USB_HOT_PLUG;
     92c:	003f6406 	br	6c0 <__alt_data_end+0xfffaaf90>
	}
	// STEP 2 end

	ctl_reg = USB1_CTL_REG;
     930:	00b02284 	movi	r2,-16246
     934:	d0a6e70d 	sth	r2,-25700(gp)
	no_device = (A_DP_STAT | A_DM_STAT);
     938:	008c0004 	movi	r2,12288
     93c:	d0a6e78d 	sth	r2,-25698(gp)
	fs_device = A_DP_STAT;
     940:	00880004 	movi	r2,8192
     944:	d0a6e80d 	sth	r2,-25696(gp)
	usb_ctl_val = UsbRead(ctl_reg);
     948:	d0a6e70b 	ldhu	r2,-25700(gp)
     94c:	10bfffcc 	andi	r2,r2,65535
     950:	1009883a 	mov	r4,r2
     954:	00023180 	call	2318 <UsbRead>
     958:	d0a6eb0d 	sth	r2,-25684(gp)
		}
	}
	else
	{
		 check for low speed or full speed by reading D+ and D- lines */
		if (usb_ctl_val & fs_device)
     95c:	d0e6eb0b 	ldhu	r3,-25684(gp)
     960:	d0a6e80b 	ldhu	r2,-25696(gp)
     964:	1884703a 	and	r2,r3,r2
     968:	10bfffcc 	andi	r2,r2,65535
     96c:	10000426 	beq	r2,zero,980 <setup_keyboard+0x2e0>
		{
			printf("[INFO]: full speed device\n");
     970:	01000074 	movhi	r4,1
     974:	210a2504 	addi	r4,r4,10388
     978:	0003e240 	call	3e24 <puts>
     97c:	00000306 	br	98c <setup_keyboard+0x2ec>
		}
		else
		{
			printf("[INFO]: low speed device\n");
     980:	01000074 	movhi	r4,1
     984:	210a2c04 	addi	r4,r4,10416
     988:	0003e240 	call	3e24 <puts>



	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();
     98c:	000240c0 	call	240c <UsbSetAddress>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     990:	00000306 	br	9a0 <setup_keyboard+0x300>
	{
		UsbSetAddress();
     994:	000240c0 	call	240c <UsbSetAddress>
		usleep(10*1000);
     998:	0109c404 	movi	r4,10000
     99c:	00107c00 	call	107c0 <usleep>

	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     9a0:	010000c4 	movi	r4,3
     9a4:	00003300 	call	330 <IO_read>
     9a8:	10bfffcc 	andi	r2,r2,65535
     9ac:	1080040c 	andi	r2,r2,16
     9b0:	103ff826 	beq	r2,zero,994 <__alt_data_end+0xfffab264>
	{
		UsbSetAddress();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     9b4:	00032880 	call	3288 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506); // i
     9b8:	01000084 	movi	r4,2
     9bc:	01414184 	movi	r5,1286
     9c0:	00002c80 	call	2c8 <IO_write>
	printf("[ENUM PROCESS]:step 3 TD Status Byte is %x\n",IO_read(HPI_DATA));
     9c4:	0009883a 	mov	r4,zero
     9c8:	00003300 	call	330 <IO_read>
     9cc:	10bfffcc 	andi	r2,r2,65535
     9d0:	01000074 	movhi	r4,1
     9d4:	210a3304 	addi	r4,r4,10444
     9d8:	100b883a 	mov	r5,r2
     9dc:	0003d300 	call	3d30 <printf>

	IO_write(HPI_ADDR,0x0508); // n
     9e0:	01000084 	movi	r4,2
     9e4:	01414204 	movi	r5,1288
     9e8:	00002c80 	call	2c8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     9ec:	0009883a 	mov	r4,zero
     9f0:	00003300 	call	330 <IO_read>
     9f4:	d0a6eb0d 	sth	r2,-25684(gp)
	printf("[ENUM PROCESS]:step 3 TD Control Byte is %x\n",usb_ctl_val);
     9f8:	d0a6eb0b 	ldhu	r2,-25684(gp)
     9fc:	10bfffcc 	andi	r2,r2,65535
     a00:	01000074 	movhi	r4,1
     a04:	210a3e04 	addi	r4,r4,10488
     a08:	100b883a 	mov	r5,r2
     a0c:	0003d300 	call	3d30 <printf>
	while (usb_ctl_val != 0x03) // retries occurred
     a10:	0001883a 	nop
     a14:	d0a6eb0b 	ldhu	r2,-25684(gp)
     a18:	10bfffcc 	andi	r2,r2,65535
     a1c:	108000d8 	cmpnei	r2,r2,3
     a20:	10000326 	beq	r2,zero,a30 <setup_keyboard+0x390>
	{
		usb_ctl_val = UsbGetRetryCnt();
     a24:	000330c0 	call	330c <UsbGetRetryCnt>
     a28:	d0a6eb0d 	sth	r2,-25684(gp)

		goto USB_HOT_PLUG;
     a2c:	003f2406 	br	6c0 <__alt_data_end+0xfffaaf90>
	}

	printf("------------[ENUM PROCESS]:set address done!---------------\n");
     a30:	01000074 	movhi	r4,1
     a34:	210a4a04 	addi	r4,r4,10536
     a38:	0003e240 	call	3e24 <puts>

	// STEP 4 begin
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1
     a3c:	00025080 	call	2508 <UsbGetDeviceDesc1>

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     a40:	00000306 	br	a50 <setup_keyboard+0x3b0>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
     a44:	00025080 	call	2508 <UsbGetDeviceDesc1>
		usleep(10*1000);
     a48:	0109c404 	movi	r4,10000
     a4c:	00107c00 	call	107c0 <usleep>
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     a50:	010000c4 	movi	r4,3
     a54:	00003300 	call	330 <IO_read>
     a58:	10bfffcc 	andi	r2,r2,65535
     a5c:	1080040c 	andi	r2,r2,16
     a60:	103ff826 	beq	r2,zero,a44 <__alt_data_end+0xfffab314>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     a64:	00032880 	call	3288 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     a68:	01000084 	movi	r4,2
     a6c:	01414184 	movi	r5,1286
     a70:	00002c80 	call	2c8 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
     a74:	0009883a 	mov	r4,zero
     a78:	00003300 	call	330 <IO_read>
     a7c:	10bfffcc 	andi	r2,r2,65535
     a80:	01000074 	movhi	r4,1
     a84:	210a5904 	addi	r4,r4,10596
     a88:	100b883a 	mov	r5,r2
     a8c:	0003d300 	call	3d30 <printf>

	IO_write(HPI_ADDR,0x0508);
     a90:	01000084 	movi	r4,2
     a94:	01414204 	movi	r5,1288
     a98:	00002c80 	call	2c8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     a9c:	0009883a 	mov	r4,zero
     aa0:	00003300 	call	330 <IO_read>
     aa4:	d0a6eb0d 	sth	r2,-25684(gp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
     aa8:	d0a6eb0b 	ldhu	r2,-25684(gp)
     aac:	10bfffcc 	andi	r2,r2,65535
     ab0:	01000074 	movhi	r4,1
     ab4:	210a6404 	addi	r4,r4,10640
     ab8:	100b883a 	mov	r5,r2
     abc:	0003d300 	call	3d30 <printf>
	while (usb_ctl_val != 0x03)
     ac0:	00000206 	br	acc <setup_keyboard+0x42c>
	{
		usb_ctl_val = UsbGetRetryCnt();
     ac4:	000330c0 	call	330c <UsbGetRetryCnt>
     ac8:	d0a6eb0d 	sth	r2,-25684(gp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
     acc:	d0a6eb0b 	ldhu	r2,-25684(gp)
     ad0:	10bfffcc 	andi	r2,r2,65535
     ad4:	108000d8 	cmpnei	r2,r2,3
     ad8:	103ffa1e 	bne	r2,zero,ac4 <__alt_data_end+0xfffab394>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get device descriptor-1 done!-----------------\n");
     adc:	01000074 	movhi	r4,1
     ae0:	210a7004 	addi	r4,r4,10688
     ae4:	0003e240 	call	3e24 <puts>


	//--------------------------------get device descriptor-2---------------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2
     ae8:	000264c0 	call	264c <UsbGetDeviceDesc2>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     aec:	00000306 	br	afc <setup_keyboard+0x45c>
	{
		//resend the get device descriptor
		//get device descriptor
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
     af0:	000264c0 	call	264c <UsbGetDeviceDesc2>
		usleep(10*1000);
     af4:	0109c404 	movi	r4,10000
     af8:	00107c00 	call	107c0 <usleep>
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     afc:	010000c4 	movi	r4,3
     b00:	00003300 	call	330 <IO_read>
     b04:	10bfffcc 	andi	r2,r2,65535
     b08:	1080040c 	andi	r2,r2,16
     b0c:	103ff826 	beq	r2,zero,af0 <__alt_data_end+0xfffab3c0>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     b10:	00032880 	call	3288 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     b14:	01000084 	movi	r4,2
     b18:	01414184 	movi	r5,1286
     b1c:	00002c80 	call	2c8 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
     b20:	0009883a 	mov	r4,zero
     b24:	00003300 	call	330 <IO_read>
     b28:	10bfffcc 	andi	r2,r2,65535
     b2c:	01000074 	movhi	r4,1
     b30:	210a5904 	addi	r4,r4,10596
     b34:	100b883a 	mov	r5,r2
     b38:	0003d300 	call	3d30 <printf>

	IO_write(HPI_ADDR,0x0508);
     b3c:	01000084 	movi	r4,2
     b40:	01414204 	movi	r5,1288
     b44:	00002c80 	call	2c8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     b48:	0009883a 	mov	r4,zero
     b4c:	00003300 	call	330 <IO_read>
     b50:	d0a6eb0d 	sth	r2,-25684(gp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
     b54:	d0a6eb0b 	ldhu	r2,-25684(gp)
     b58:	10bfffcc 	andi	r2,r2,65535
     b5c:	01000074 	movhi	r4,1
     b60:	210a6404 	addi	r4,r4,10640
     b64:	100b883a 	mov	r5,r2
     b68:	0003d300 	call	3d30 <printf>
	while (usb_ctl_val != 0x03)
     b6c:	00000206 	br	b78 <setup_keyboard+0x4d8>
	{
		usb_ctl_val = UsbGetRetryCnt();
     b70:	000330c0 	call	330c <UsbGetRetryCnt>
     b74:	d0a6eb0d 	sth	r2,-25684(gp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
     b78:	d0a6eb0b 	ldhu	r2,-25684(gp)
     b7c:	10bfffcc 	andi	r2,r2,65535
     b80:	108000d8 	cmpnei	r2,r2,3
     b84:	103ffa1e 	bne	r2,zero,b70 <__alt_data_end+0xfffab440>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get device descriptor-2 done!--------------\n");
     b88:	01000074 	movhi	r4,1
     b8c:	210a8404 	addi	r4,r4,10768
     b90:	0003e240 	call	3e24 <puts>


	// STEP 5 begin
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1
     b94:	00028200 	call	2820 <UsbGetConfigDesc1>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     b98:	00000306 	br	ba8 <setup_keyboard+0x508>
	{
		//resend the get device descriptor
		//get device descriptor

		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
     b9c:	00028200 	call	2820 <UsbGetConfigDesc1>
		usleep(10*1000);
     ba0:	0109c404 	movi	r4,10000
     ba4:	00107c00 	call	107c0 <usleep>
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     ba8:	010000c4 	movi	r4,3
     bac:	00003300 	call	330 <IO_read>
     bb0:	10bfffcc 	andi	r2,r2,65535
     bb4:	1080040c 	andi	r2,r2,16
     bb8:	103ff826 	beq	r2,zero,b9c <__alt_data_end+0xfffab46c>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     bbc:	00032880 	call	3288 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     bc0:	01000084 	movi	r4,2
     bc4:	01414184 	movi	r5,1286
     bc8:	00002c80 	call	2c8 <IO_write>
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));
     bcc:	0009883a 	mov	r4,zero
     bd0:	00003300 	call	330 <IO_read>
     bd4:	10bfffcc 	andi	r2,r2,65535
     bd8:	01000074 	movhi	r4,1
     bdc:	210a9604 	addi	r4,r4,10840
     be0:	100b883a 	mov	r5,r2
     be4:	0003d300 	call	3d30 <printf>

	IO_write(HPI_ADDR,0x0508);
     be8:	01000084 	movi	r4,2
     bec:	01414204 	movi	r5,1288
     bf0:	00002c80 	call	2c8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     bf4:	0009883a 	mov	r4,zero
     bf8:	00003300 	call	330 <IO_read>
     bfc:	d0a6eb0d 	sth	r2,-25684(gp)
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
     c00:	d0a6eb0b 	ldhu	r2,-25684(gp)
     c04:	10bfffcc 	andi	r2,r2,65535
     c08:	01000074 	movhi	r4,1
     c0c:	210aa104 	addi	r4,r4,10884
     c10:	100b883a 	mov	r5,r2
     c14:	0003d300 	call	3d30 <printf>
	while (usb_ctl_val != 0x03)
     c18:	00000206 	br	c24 <setup_keyboard+0x584>
	{
		usb_ctl_val = UsbGetRetryCnt();
     c1c:	000330c0 	call	330c <UsbGetRetryCnt>
     c20:	d0a6eb0d 	sth	r2,-25684(gp)
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
     c24:	d0a6eb0b 	ldhu	r2,-25684(gp)
     c28:	10bfffcc 	andi	r2,r2,65535
     c2c:	108000d8 	cmpnei	r2,r2,3
     c30:	103ffa1e 	bne	r2,zero,c1c <__alt_data_end+0xfffab4ec>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}
	printf("------------[ENUM PROCESS]:get configuration descriptor-1 pass------------\n");
     c34:	01000074 	movhi	r4,1
     c38:	210aad04 	addi	r4,r4,10932
     c3c:	0003e240 	call	3e24 <puts>

	// STEP 6 begin
	//-----------------------------------get configuration descriptor-2------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2
     c40:	00029ac0 	call	29ac <UsbGetConfigDesc2>

	usleep(100*1000);
     c44:	010000b4 	movhi	r4,2
     c48:	2121a804 	addi	r4,r4,-31072
     c4c:	00107c00 	call	107c0 <usleep>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     c50:	00000306 	br	c60 <setup_keyboard+0x5c0>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
     c54:	00029ac0 	call	29ac <UsbGetConfigDesc2>
		usleep(10*1000);
     c58:	0109c404 	movi	r4,10000
     c5c:	00107c00 	call	107c0 <usleep>
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2

	usleep(100*1000);
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     c60:	010000c4 	movi	r4,3
     c64:	00003300 	call	330 <IO_read>
     c68:	10bfffcc 	andi	r2,r2,65535
     c6c:	1080040c 	andi	r2,r2,16
     c70:	103ff826 	beq	r2,zero,c54 <__alt_data_end+0xfffab524>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     c74:	00032880 	call	3288 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     c78:	01000084 	movi	r4,2
     c7c:	01414184 	movi	r5,1286
     c80:	00002c80 	call	2c8 <IO_write>
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));
     c84:	0009883a 	mov	r4,zero
     c88:	00003300 	call	330 <IO_read>
     c8c:	10bfffcc 	andi	r2,r2,65535
     c90:	01000074 	movhi	r4,1
     c94:	210ac004 	addi	r4,r4,11008
     c98:	100b883a 	mov	r5,r2
     c9c:	0003d300 	call	3d30 <printf>

	IO_write(HPI_ADDR,0x0508);
     ca0:	01000084 	movi	r4,2
     ca4:	01414204 	movi	r5,1288
     ca8:	00002c80 	call	2c8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     cac:	0009883a 	mov	r4,zero
     cb0:	00003300 	call	330 <IO_read>
     cb4:	d0a6eb0d 	sth	r2,-25684(gp)
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
     cb8:	d0a6eb0b 	ldhu	r2,-25684(gp)
     cbc:	10bfffcc 	andi	r2,r2,65535
     cc0:	01000074 	movhi	r4,1
     cc4:	210acb04 	addi	r4,r4,11052
     cc8:	100b883a 	mov	r5,r2
     ccc:	0003d300 	call	3d30 <printf>
	while (usb_ctl_val != 0x03)
     cd0:	00000206 	br	cdc <setup_keyboard+0x63c>
	{
		usb_ctl_val = UsbGetRetryCnt();
     cd4:	000330c0 	call	330c <UsbGetRetryCnt>
     cd8:	d0a6eb0d 	sth	r2,-25684(gp)
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
     cdc:	d0a6eb0b 	ldhu	r2,-25684(gp)
     ce0:	10bfffcc 	andi	r2,r2,65535
     ce4:	108000d8 	cmpnei	r2,r2,3
     ce8:	103ffa1e 	bne	r2,zero,cd4 <__alt_data_end+0xfffab5a4>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("-----------[ENUM PROCESS]:get configuration descriptor-2 done!------------\n");
     cec:	01000074 	movhi	r4,1
     cf0:	210ad704 	addi	r4,r4,11100
     cf4:	0003e240 	call	3e24 <puts>


	// ---------------------------------get device info---------------------------------------------//

	// TASK: Write the address to read from the memory for byte 7 of the interface descriptor to HPI_ADDR.
	IO_write(HPI_ADDR,0x056c);
     cf8:	01000084 	movi	r4,2
     cfc:	01415b04 	movi	r5,1388
     d00:	00002c80 	call	2c8 <IO_write>
	code = IO_read(HPI_DATA);
     d04:	0009883a 	mov	r4,zero
     d08:	00003300 	call	330 <IO_read>
     d0c:	d0a6ed0d 	sth	r2,-25676(gp)
	code = code & 0x003;
     d10:	d0a6ed0b 	ldhu	r2,-25676(gp)
     d14:	108000cc 	andi	r2,r2,3
     d18:	d0a6ed0d 	sth	r2,-25676(gp)
	printf("\ncode = %x\n", code);
     d1c:	d0a6ed0b 	ldhu	r2,-25676(gp)
     d20:	10bfffcc 	andi	r2,r2,65535
     d24:	01000074 	movhi	r4,1
     d28:	210aea04 	addi	r4,r4,11176
     d2c:	100b883a 	mov	r5,r2
     d30:	0003d300 	call	3d30 <printf>

	if (code == 0x01)
     d34:	d0a6ed0b 	ldhu	r2,-25676(gp)
     d38:	10bfffcc 	andi	r2,r2,65535
     d3c:	10800058 	cmpnei	r2,r2,1
     d40:	1000041e 	bne	r2,zero,d54 <setup_keyboard+0x6b4>
	{
		printf("\n[INFO]:check TD rec data7 \n[INFO]:Keyboard Detected!!!\n\n");
     d44:	01000074 	movhi	r4,1
     d48:	210aed04 	addi	r4,r4,11188
     d4c:	0003e240 	call	3e24 <puts>
     d50:	00000306 	br	d60 <setup_keyboard+0x6c0>
	}
	else
	{
		printf("\n[INFO]:Keyboard Not Detected!!! \n\n");
     d54:	01000074 	movhi	r4,1
     d58:	210afc04 	addi	r4,r4,11248
     d5c:	0003e240 	call	3e24 <puts>
	}

	// TASK: Write the address to read from the memory for the endpoint descriptor to HPI_ADDR.

	IO_write(HPI_ADDR,0x0576);
     d60:	01000084 	movi	r4,2
     d64:	01415d84 	movi	r5,1398
     d68:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x073F);
     d6c:	0009883a 	mov	r4,zero
     d70:	0141cfc4 	movi	r5,1855
     d74:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x8105);
     d78:	0009883a 	mov	r4,zero
     d7c:	01604154 	movui	r5,33029
     d80:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0003);
     d84:	0009883a 	mov	r4,zero
     d88:	014000c4 	movi	r5,3
     d8c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);
     d90:	0009883a 	mov	r4,zero
     d94:	01400204 	movi	r5,8
     d98:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0xAC0A);
     d9c:	0009883a 	mov	r4,zero
     da0:	016b0294 	movui	r5,44042
     da4:	00002c80 	call	2c8 <IO_write>
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0576); //HUSB_SIE1_pCurrentTDPtr
     da8:	01006c04 	movi	r4,432
     dac:	01415d84 	movi	r5,1398
     db0:	00022c40 	call	22c4 <UsbWrite>

	//data_size = (IO_read(HPI_DATA)>>8)&0x0ff;
	//data_size = 0x08;//(IO_read(HPI_DATA))&0x0ff;
	//UsbPrintMem();
	IO_write(HPI_ADDR,0x057c);
     db4:	01000084 	movi	r4,2
     db8:	01415f04 	movi	r5,1404
     dbc:	00002c80 	call	2c8 <IO_write>
	data_size = (IO_read(HPI_DATA))&0x0ff;
     dc0:	0009883a 	mov	r4,zero
     dc4:	00003300 	call	330 <IO_read>
     dc8:	d0a6eb85 	stb	r2,-25682(gp)
	printf("[ENUM PROCESS]:data packet size is %d\n",data_size);
     dcc:	d0a6eb83 	ldbu	r2,-25682(gp)
     dd0:	10803fcc 	andi	r2,r2,255
     dd4:	01000074 	movhi	r4,1
     dd8:	210b0504 	addi	r4,r4,11284
     ddc:	100b883a 	mov	r5,r2
     de0:	0003d300 	call	3d30 <printf>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration
     de4:	0002c100 	call	2c10 <UsbSetConfig>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     de8:	00000306 	br	df8 <setup_keyboard+0x758>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
     dec:	0002c100 	call	2c10 <UsbSetConfig>
		usleep(10*1000);
     df0:	0109c404 	movi	r4,10000
     df4:	00107c00 	call	107c0 <usleep>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     df8:	010000c4 	movi	r4,3
     dfc:	00003300 	call	330 <IO_read>
     e00:	10bfffcc 	andi	r2,r2,65535
     e04:	1080040c 	andi	r2,r2,16
     e08:	103ff826 	beq	r2,zero,dec <__alt_data_end+0xfffab6bc>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     e0c:	00032880 	call	3288 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     e10:	01000084 	movi	r4,2
     e14:	01414184 	movi	r5,1286
     e18:	00002c80 	call	2c8 <IO_write>
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));
     e1c:	0009883a 	mov	r4,zero
     e20:	00003300 	call	330 <IO_read>
     e24:	10bfffcc 	andi	r2,r2,65535
     e28:	01000074 	movhi	r4,1
     e2c:	210b0f04 	addi	r4,r4,11324
     e30:	100b883a 	mov	r5,r2
     e34:	0003d300 	call	3d30 <printf>

	IO_write(HPI_ADDR,0x0508);
     e38:	01000084 	movi	r4,2
     e3c:	01414204 	movi	r5,1288
     e40:	00002c80 	call	2c8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     e44:	0009883a 	mov	r4,zero
     e48:	00003300 	call	330 <IO_read>
     e4c:	d0a6eb0d 	sth	r2,-25684(gp)
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
     e50:	d0a6eb0b 	ldhu	r2,-25684(gp)
     e54:	10bfffcc 	andi	r2,r2,65535
     e58:	01000074 	movhi	r4,1
     e5c:	210b1a04 	addi	r4,r4,11368
     e60:	100b883a 	mov	r5,r2
     e64:	0003d300 	call	3d30 <printf>
	while (usb_ctl_val != 0x03)
     e68:	00000206 	br	e74 <setup_keyboard+0x7d4>
	{
		usb_ctl_val = UsbGetRetryCnt();
     e6c:	000330c0 	call	330c <UsbGetRetryCnt>
     e70:	d0a6eb0d 	sth	r2,-25684(gp)
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
     e74:	d0a6eb0b 	ldhu	r2,-25684(gp)
     e78:	10bfffcc 	andi	r2,r2,65535
     e7c:	108000d8 	cmpnei	r2,r2,3
     e80:	103ffa1e 	bne	r2,zero,e6c <__alt_data_end+0xfffab73c>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:set configuration done!-------------------\n");
     e84:	01000074 	movhi	r4,1
     e88:	210b2604 	addi	r4,r4,11416
     e8c:	0003e240 	call	3e24 <puts>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();
     e90:	0002d0c0 	call	2d0c <UsbClassRequest>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     e94:	00000306 	br	ea4 <setup_keyboard+0x804>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
     e98:	0002d0c0 	call	2d0c <UsbClassRequest>
		usleep(10*1000);
     e9c:	0109c404 	movi	r4,10000
     ea0:	00107c00 	call	107c0 <usleep>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     ea4:	010000c4 	movi	r4,3
     ea8:	00003300 	call	330 <IO_read>
     eac:	10bfffcc 	andi	r2,r2,65535
     eb0:	1080040c 	andi	r2,r2,16
     eb4:	103ff826 	beq	r2,zero,e98 <__alt_data_end+0xfffab768>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     eb8:	00032880 	call	3288 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     ebc:	01000084 	movi	r4,2
     ec0:	01414184 	movi	r5,1286
     ec4:	00002c80 	call	2c8 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
     ec8:	0009883a 	mov	r4,zero
     ecc:	00003300 	call	330 <IO_read>
     ed0:	10bfffcc 	andi	r2,r2,65535
     ed4:	01000074 	movhi	r4,1
     ed8:	210b3804 	addi	r4,r4,11488
     edc:	100b883a 	mov	r5,r2
     ee0:	0003d300 	call	3d30 <printf>

	IO_write(HPI_ADDR,0x0508);
     ee4:	01000084 	movi	r4,2
     ee8:	01414204 	movi	r5,1288
     eec:	00002c80 	call	2c8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     ef0:	0009883a 	mov	r4,zero
     ef4:	00003300 	call	330 <IO_read>
     ef8:	d0a6eb0d 	sth	r2,-25684(gp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
     efc:	d0a6eb0b 	ldhu	r2,-25684(gp)
     f00:	10bfffcc 	andi	r2,r2,65535
     f04:	01000074 	movhi	r4,1
     f08:	210b4304 	addi	r4,r4,11532
     f0c:	100b883a 	mov	r5,r2
     f10:	0003d300 	call	3d30 <printf>
	while (usb_ctl_val != 0x03)
     f14:	00000206 	br	f20 <setup_keyboard+0x880>
	{
		usb_ctl_val = UsbGetRetryCnt();
     f18:	000330c0 	call	330c <UsbGetRetryCnt>
     f1c:	d0a6eb0d 	sth	r2,-25684(gp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
     f20:	d0a6eb0b 	ldhu	r2,-25684(gp)
     f24:	10bfffcc 	andi	r2,r2,65535
     f28:	108000d8 	cmpnei	r2,r2,3
     f2c:	103ffa1e 	bne	r2,zero,f18 <__alt_data_end+0xfffab7e8>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("------------[ENUM PROCESS]:class request out done!-------------------\n");
     f30:	01000074 	movhi	r4,1
     f34:	210b4f04 	addi	r4,r4,11580
     f38:	0003e240 	call	3e24 <puts>

	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();
     f3c:	0002e080 	call	2e08 <UsbGetHidDesc>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     f40:	00000306 	br	f50 <setup_keyboard+0x8b0>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
     f44:	0002e080 	call	2e08 <UsbGetHidDesc>
		usleep(10*1000);
     f48:	0109c404 	movi	r4,10000
     f4c:	00107c00 	call	107c0 <usleep>
	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     f50:	010000c4 	movi	r4,3
     f54:	00003300 	call	330 <IO_read>
     f58:	10bfffcc 	andi	r2,r2,65535
     f5c:	1080040c 	andi	r2,r2,16
     f60:	103ff826 	beq	r2,zero,f44 <__alt_data_end+0xfffab814>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     f64:	00032880 	call	3288 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     f68:	01000084 	movi	r4,2
     f6c:	01414184 	movi	r5,1286
     f70:	00002c80 	call	2c8 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
     f74:	0009883a 	mov	r4,zero
     f78:	00003300 	call	330 <IO_read>
     f7c:	10bfffcc 	andi	r2,r2,65535
     f80:	01000074 	movhi	r4,1
     f84:	210b3804 	addi	r4,r4,11488
     f88:	100b883a 	mov	r5,r2
     f8c:	0003d300 	call	3d30 <printf>

	IO_write(HPI_ADDR,0x0508);
     f90:	01000084 	movi	r4,2
     f94:	01414204 	movi	r5,1288
     f98:	00002c80 	call	2c8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     f9c:	0009883a 	mov	r4,zero
     fa0:	00003300 	call	330 <IO_read>
     fa4:	d0a6eb0d 	sth	r2,-25684(gp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
     fa8:	d0a6eb0b 	ldhu	r2,-25684(gp)
     fac:	10bfffcc 	andi	r2,r2,65535
     fb0:	01000074 	movhi	r4,1
     fb4:	210b4304 	addi	r4,r4,11532
     fb8:	100b883a 	mov	r5,r2
     fbc:	0003d300 	call	3d30 <printf>
	while (usb_ctl_val != 0x03)
     fc0:	00000206 	br	fcc <setup_keyboard+0x92c>
	{
		usb_ctl_val = UsbGetRetryCnt();
     fc4:	000330c0 	call	330c <UsbGetRetryCnt>
     fc8:	d0a6eb0d 	sth	r2,-25684(gp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
     fcc:	d0a6eb0b 	ldhu	r2,-25684(gp)
     fd0:	10bfffcc 	andi	r2,r2,65535
     fd4:	108000d8 	cmpnei	r2,r2,3
     fd8:	103ffa1e 	bne	r2,zero,fc4 <__alt_data_end+0xfffab894>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get descriptor (class 0x21) done!-------------------\n");
     fdc:	01000074 	movhi	r4,1
     fe0:	210b6104 	addi	r4,r4,11652
     fe4:	0003e240 	call	3e24 <puts>

	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
     fe8:	0002f4c0 	call	2f4c <UsbGetReportDesc>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     fec:	00000306 	br	ffc <setup_keyboard+0x95c>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
     ff0:	0002f4c0 	call	2f4c <UsbGetReportDesc>
		usleep(10*1000);
     ff4:	0109c404 	movi	r4,10000
     ff8:	00107c00 	call	107c0 <usleep>
	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     ffc:	010000c4 	movi	r4,3
    1000:	00003300 	call	330 <IO_read>
    1004:	10bfffcc 	andi	r2,r2,65535
    1008:	1080040c 	andi	r2,r2,16
    100c:	103ff826 	beq	r2,zero,ff0 <__alt_data_end+0xfffab8c0>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
    1010:	00032880 	call	3288 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
    1014:	01000084 	movi	r4,2
    1018:	01414184 	movi	r5,1286
    101c:	00002c80 	call	2c8 <IO_write>
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));
    1020:	0009883a 	mov	r4,zero
    1024:	00003300 	call	330 <IO_read>
    1028:	10bfffcc 	andi	r2,r2,65535
    102c:	01000074 	movhi	r4,1
    1030:	210b7504 	addi	r4,r4,11732
    1034:	100b883a 	mov	r5,r2
    1038:	0003d300 	call	3d30 <printf>

	IO_write(HPI_ADDR,0x0508);
    103c:	01000084 	movi	r4,2
    1040:	01414204 	movi	r5,1288
    1044:	00002c80 	call	2c8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
    1048:	0009883a 	mov	r4,zero
    104c:	00003300 	call	330 <IO_read>
    1050:	d0a6eb0d 	sth	r2,-25684(gp)
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
    1054:	d0a6eb0b 	ldhu	r2,-25684(gp)
    1058:	10bfffcc 	andi	r2,r2,65535
    105c:	01000074 	movhi	r4,1
    1060:	210b8104 	addi	r4,r4,11780
    1064:	100b883a 	mov	r5,r2
    1068:	0003d300 	call	3d30 <printf>
	while (usb_ctl_val != 0x03)
    106c:	00000206 	br	1078 <setup_keyboard+0x9d8>
	{
		usb_ctl_val = UsbGetRetryCnt();
    1070:	000330c0 	call	330c <UsbGetRetryCnt>
    1074:	d0a6eb0d 	sth	r2,-25684(gp)
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
    1078:	d0a6eb0b 	ldhu	r2,-25684(gp)
    107c:	10bfffcc 	andi	r2,r2,65535
    1080:	108000d8 	cmpnei	r2,r2,3
    1084:	103ffa1e 	bne	r2,zero,1070 <__alt_data_end+0xfffab940>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get descriptor (class 0x22) done!----------------\n");
    1088:	01000074 	movhi	r4,1
    108c:	210b8d04 	addi	r4,r4,11828
    1090:	0003e240 	call	3e24 <puts>


	//-----------------------------------get keycode value------------------------------------------------//


	return;
    1094:	0001883a 	nop
}
    1098:	e037883a 	mov	sp,fp
    109c:	dfc00117 	ldw	ra,4(sp)
    10a0:	df000017 	ldw	fp,0(sp)
    10a4:	dec00204 	addi	sp,sp,8
    10a8:	f800283a 	ret

000010ac <main>:
//Hits
player_projectile* check_projectiles(player_projectile *curr, enemy *em);
int hits_enemy(int x, int y, enemy *em);


int main(void){
    10ac:	defff104 	addi	sp,sp,-60
    10b0:	dfc00e15 	stw	ra,56(sp)
    10b4:	df000d15 	stw	fp,52(sp)
    10b8:	df000d04 	addi	fp,sp,52
	setup_keyboard();
    10bc:	00006a00 	call	6a0 <setup_keyboard>
	unsigned int keycode1,keycode2;
	player *first=(player *)malloc(sizeof(player));
    10c0:	01000604 	movi	r4,24
    10c4:	00035340 	call	3534 <malloc>
    10c8:	e0bff615 	stw	r2,-40(fp)
	player *second=(player *)malloc(sizeof(player));
    10cc:	01000604 	movi	r4,24
    10d0:	00035340 	call	3534 <malloc>
    10d4:	e0bff715 	stw	r2,-36(fp)
	int i=0;
    10d8:	e03ff415 	stw	zero,-48(fp)
	int num_of_enemies=0;
    10dc:	e03ff515 	stw	zero,-44(fp)
	enemy *head_enemies=NULL;
    10e0:	e03ffa15 	stw	zero,-24(fp)
	player_projectile *head_bullets=NULL;
    10e4:	e03ffb15 	stw	zero,-20(fp)
	init_players(first,second);
    10e8:	e13ff617 	ldw	r4,-40(fp)
    10ec:	e17ff717 	ldw	r5,-36(fp)
    10f0:	00012180 	call	1218 <init_players>
	render_players(first,second);
    10f4:	e13ff617 	ldw	r4,-40(fp)
    10f8:	e17ff717 	ldw	r5,-36(fp)
    10fc:	0001a380 	call	1a38 <render_players>
	unsigned int arr[4]={0,0,0,0};
    1100:	e03ffc15 	stw	zero,-16(fp)
    1104:	e03ffd15 	stw	zero,-12(fp)
    1108:	e03ffe15 	stw	zero,-8(fp)
    110c:	e03fff15 	stw	zero,-4(fp)
	while(1)
		{
			move_projectiles(head_bullets);
    1110:	e0bffb17 	ldw	r2,-20(fp)
    1114:	1009883a 	mov	r4,r2
    1118:	000133c0 	call	133c <move_projectiles>
			render_projectiles(head_bullets);
    111c:	e0bffb17 	ldw	r2,-20(fp)
    1120:	1009883a 	mov	r4,r2
    1124:	00013840 	call	1384 <render_projectiles>
			if(get_keycode(&keycode1,&keycode2)==0){
    1128:	e0fff804 	addi	r3,fp,-32
    112c:	e0bff904 	addi	r2,fp,-28
    1130:	1809883a 	mov	r4,r3
    1134:	100b883a 	mov	r5,r2
    1138:	00003940 	call	394 <get_keycode>
    113c:	1000181e 	bne	r2,zero,11a0 <main+0xf4>
				parse_keycode(arr,keycode1,keycode2);
    1140:	e0fff817 	ldw	r3,-32(fp)
    1144:	e0bff917 	ldw	r2,-28(fp)
    1148:	e13ffc04 	addi	r4,fp,-16
    114c:	180b883a 	mov	r5,r3
    1150:	100d883a 	mov	r6,r2
    1154:	0001d9c0 	call	1d9c <parse_keycode>
				if(keycode_effect(first,second,arr,&head_bullets,i%5)==1){
    1158:	e0bff417 	ldw	r2,-48(fp)
    115c:	1009883a 	mov	r4,r2
    1160:	01400144 	movi	r5,5
    1164:	00034c80 	call	34c8 <__modsi3>
    1168:	1009883a 	mov	r4,r2
    116c:	e0fffc04 	addi	r3,fp,-16
    1170:	e0bffb04 	addi	r2,fp,-20
    1174:	d9000015 	stw	r4,0(sp)
    1178:	e13ff617 	ldw	r4,-40(fp)
    117c:	e17ff717 	ldw	r5,-36(fp)
    1180:	180d883a 	mov	r6,r3
    1184:	100f883a 	mov	r7,r2
    1188:	0001b540 	call	1b54 <keycode_effect>
    118c:	10800058 	cmpnei	r2,r2,1
    1190:	1000031e 	bne	r2,zero,11a0 <main+0xf4>
				render_players(first,second);
    1194:	e13ff617 	ldw	r4,-40(fp)
    1198:	e17ff717 	ldw	r5,-36(fp)
    119c:	0001a380 	call	1a38 <render_players>
				}
			}
			if(num_of_enemies<3){
    11a0:	e0bff517 	ldw	r2,-44(fp)
    11a4:	108000c8 	cmpgei	r2,r2,3
    11a8:	1000031e 	bne	r2,zero,11b8 <main+0x10c>
				make_enemy(&head_enemies);
    11ac:	e0bffa04 	addi	r2,fp,-24
    11b0:	1009883a 	mov	r4,r2
    11b4:	000147c0 	call	147c <make_enemy>
			}
			render_enemies(head_enemies);
    11b8:	e0bffa17 	ldw	r2,-24(fp)
    11bc:	1009883a 	mov	r4,r2
    11c0:	00016f00 	call	16f0 <render_enemies>
			move_enemies(head_enemies);
    11c4:	e0bffa17 	ldw	r2,-24(fp)
    11c8:	1009883a 	mov	r4,r2
    11cc:	000166c0 	call	166c <move_enemies>
			head_enemies=(enemy *)delete_enemy(head_enemies);
    11d0:	e0bffa17 	ldw	r2,-24(fp)
    11d4:	1009883a 	mov	r4,r2
    11d8:	000153c0 	call	153c <delete_enemy>
    11dc:	e0bffa15 	stw	r2,-24(fp)
			num_of_enemies=count_enemies(head_enemies);
    11e0:	e0bffa17 	ldw	r2,-24(fp)
    11e4:	1009883a 	mov	r4,r2
    11e8:	00016180 	call	1618 <count_enemies>
    11ec:	e0bff515 	stw	r2,-44(fp)
			head_bullets = check_projectiles(head_bullets, head_enemies);
    11f0:	e0fffb17 	ldw	r3,-20(fp)
    11f4:	e0bffa17 	ldw	r2,-24(fp)
    11f8:	1809883a 	mov	r4,r3
    11fc:	100b883a 	mov	r5,r2
    1200:	0001ecc0 	call	1ecc <check_projectiles>
    1204:	e0bffb15 	stw	r2,-20(fp)
			i++;
    1208:	e0bff417 	ldw	r2,-48(fp)
    120c:	10800044 	addi	r2,r2,1
    1210:	e0bff415 	stw	r2,-48(fp)
		}
    1214:	003fbe06 	br	1110 <__alt_data_end+0xfffab9e0>

00001218 <init_players>:
				 {116,137},
				 {105,63},
				 {89,75},
				 {23,32}};			//bullets

void init_players(player *first,player *second){
    1218:	defffc04 	addi	sp,sp,-16
    121c:	dfc00315 	stw	ra,12(sp)
    1220:	df000215 	stw	fp,8(sp)
    1224:	df000204 	addi	fp,sp,8
    1228:	e13ffe15 	stw	r4,-8(fp)
    122c:	e17fff15 	stw	r5,-4(fp)
	if(first==NULL || second ==NULL)
    1230:	e0bffe17 	ldw	r2,-8(fp)
    1234:	10000226 	beq	r2,zero,1240 <init_players+0x28>
    1238:	e0bfff17 	ldw	r2,-4(fp)
    123c:	1000041e 	bne	r2,zero,1250 <init_players+0x38>
	{
		printf("players not instantiated");
    1240:	01000074 	movhi	r4,1
    1244:	210ba104 	addi	r4,r4,11908
    1248:	0003d300 	call	3d30 <printf>
    124c:	00002206 	br	12d8 <init_players+0xc0>
	}
	else{
		first->x_pos = 300,
    1250:	e0bffe17 	ldw	r2,-8(fp)
    1254:	00c04b04 	movi	r3,300
    1258:	10c00015 	stw	r3,0(r2)
		first->y_pos = y_bounds - sizes[player1_sprite][1];
    125c:	00800074 	movhi	r2,1
    1260:	108c9504 	addi	r2,r2,12884
    1264:	10800117 	ldw	r2,4(r2)
    1268:	00c077c4 	movi	r3,479
    126c:	1887c83a 	sub	r3,r3,r2
    1270:	e0bffe17 	ldw	r2,-8(fp)
    1274:	10c00115 	stw	r3,4(r2)
		first->health = 3;
    1278:	e0bffe17 	ldw	r2,-8(fp)
    127c:	00c000c4 	movi	r3,3
    1280:	10c00215 	stw	r3,8(r2)
		first->id=player1_sprite;
    1284:	e0bffe17 	ldw	r2,-8(fp)
    1288:	10000315 	stw	zero,12(r2)
		first->old_x =first->x_pos;
    128c:	e0bffe17 	ldw	r2,-8(fp)
    1290:	10c00017 	ldw	r3,0(r2)
    1294:	e0bffe17 	ldw	r2,-8(fp)
    1298:	10c00415 	stw	r3,16(r2)
		second->x_pos= 200;
    129c:	e0bfff17 	ldw	r2,-4(fp)
    12a0:	00c03204 	movi	r3,200
    12a4:	10c00015 	stw	r3,0(r2)
		second->y_pos= y_bounds - sizes[player1_sprite][1];
    12a8:	00800074 	movhi	r2,1
    12ac:	108c9504 	addi	r2,r2,12884
    12b0:	10800117 	ldw	r2,4(r2)
    12b4:	00c077c4 	movi	r3,479
    12b8:	1887c83a 	sub	r3,r3,r2
    12bc:	e0bfff17 	ldw	r2,-4(fp)
    12c0:	10c00115 	stw	r3,4(r2)
		second->health=3;
    12c4:	e0bfff17 	ldw	r2,-4(fp)
    12c8:	00c000c4 	movi	r3,3
    12cc:	10c00215 	stw	r3,8(r2)
		second->id = player1_sprite;
    12d0:	e0bfff17 	ldw	r2,-4(fp)
    12d4:	10000315 	stw	zero,12(r2)
	}
}
    12d8:	e037883a 	mov	sp,fp
    12dc:	dfc00117 	ldw	ra,4(sp)
    12e0:	df000017 	ldw	fp,0(sp)
    12e4:	dec00204 	addi	sp,sp,8
    12e8:	f800283a 	ret

000012ec <move_projectile>:

void move_projectile(player_projectile *head)
{
    12ec:	defffe04 	addi	sp,sp,-8
    12f0:	df000115 	stw	fp,4(sp)
    12f4:	df000104 	addi	fp,sp,4
    12f8:	e13fff15 	stw	r4,-4(fp)
	if(head->y_pos<8)
    12fc:	e0bfff17 	ldw	r2,-4(fp)
    1300:	10800117 	ldw	r2,4(r2)
    1304:	10800208 	cmpgei	r2,r2,8
    1308:	1000031e 	bne	r2,zero,1318 <move_projectile+0x2c>
		head->y_pos=0;
    130c:	e0bfff17 	ldw	r2,-4(fp)
    1310:	10000115 	stw	zero,4(r2)
    1314:	00000506 	br	132c <move_projectile+0x40>
	else
		head->y_pos-=8;
    1318:	e0bfff17 	ldw	r2,-4(fp)
    131c:	10800117 	ldw	r2,4(r2)
    1320:	10fffe04 	addi	r3,r2,-8
    1324:	e0bfff17 	ldw	r2,-4(fp)
    1328:	10c00115 	stw	r3,4(r2)
}
    132c:	e037883a 	mov	sp,fp
    1330:	df000017 	ldw	fp,0(sp)
    1334:	dec00104 	addi	sp,sp,4
    1338:	f800283a 	ret

0000133c <move_projectiles>:

void move_projectiles(player_projectile *head)
{
    133c:	defffd04 	addi	sp,sp,-12
    1340:	dfc00215 	stw	ra,8(sp)
    1344:	df000115 	stw	fp,4(sp)
    1348:	df000104 	addi	fp,sp,4
    134c:	e13fff15 	stw	r4,-4(fp)
	while(head!=NULL)
    1350:	00000506 	br	1368 <move_projectiles+0x2c>
	{
		move_projectile(head);
    1354:	e13fff17 	ldw	r4,-4(fp)
    1358:	00012ec0 	call	12ec <move_projectile>
		head=head->next;
    135c:	e0bfff17 	ldw	r2,-4(fp)
    1360:	10800417 	ldw	r2,16(r2)
    1364:	e0bfff15 	stw	r2,-4(fp)
		head->y_pos-=8;
}

void move_projectiles(player_projectile *head)
{
	while(head!=NULL)
    1368:	e0bfff17 	ldw	r2,-4(fp)
    136c:	103ff91e 	bne	r2,zero,1354 <__alt_data_end+0xfffabc24>
	{
		move_projectile(head);
		head=head->next;
	}
}
    1370:	e037883a 	mov	sp,fp
    1374:	dfc00117 	ldw	ra,4(sp)
    1378:	df000017 	ldw	fp,0(sp)
    137c:	dec00204 	addi	sp,sp,8
    1380:	f800283a 	ret

00001384 <render_projectiles>:

void render_projectiles(player_projectile *head)
{
    1384:	defffc04 	addi	sp,sp,-16
    1388:	dfc00315 	stw	ra,12(sp)
    138c:	df000215 	stw	fp,8(sp)
    1390:	df000204 	addi	fp,sp,8
    1394:	e13fff15 	stw	r4,-4(fp)
	player_projectile *pr=head;
    1398:	e0bfff17 	ldw	r2,-4(fp)
    139c:	e0bffe15 	stw	r2,-8(fp)
		while(pr!=NULL){
    13a0:	00000506 	br	13b8 <render_projectiles+0x34>
			render_projectile(pr);
    13a4:	e13ffe17 	ldw	r4,-8(fp)
    13a8:	00013d40 	call	13d4 <render_projectile>
			pr=pr->next;
    13ac:	e0bffe17 	ldw	r2,-8(fp)
    13b0:	10800417 	ldw	r2,16(r2)
    13b4:	e0bffe15 	stw	r2,-8(fp)
}

void render_projectiles(player_projectile *head)
{
	player_projectile *pr=head;
		while(pr!=NULL){
    13b8:	e0bffe17 	ldw	r2,-8(fp)
    13bc:	103ff91e 	bne	r2,zero,13a4 <__alt_data_end+0xfffabc74>
			render_projectile(pr);
			pr=pr->next;
		}
}
    13c0:	e037883a 	mov	sp,fp
    13c4:	dfc00117 	ldw	ra,4(sp)
    13c8:	df000017 	ldw	fp,0(sp)
    13cc:	dec00204 	addi	sp,sp,8
    13d0:	f800283a 	ret

000013d4 <render_projectile>:

void render_projectile(player_projectile *pr){
    13d4:	defffd04 	addi	sp,sp,-12
    13d8:	dfc00215 	stw	ra,8(sp)
    13dc:	df000115 	stw	fp,4(sp)
    13e0:	df000104 	addi	fp,sp,4
    13e4:	e13fff15 	stw	r4,-4(fp)
	if(pr==NULL){
    13e8:	e0bfff17 	ldw	r2,-4(fp)
    13ec:	1000041e 	bne	r2,zero,1400 <render_projectile+0x2c>
		printf("bullet not found");
    13f0:	01000074 	movhi	r4,1
    13f4:	210ba804 	addi	r4,r4,11936
    13f8:	0003d300 	call	3d30 <printf>
    13fc:	00001a06 	br	1468 <render_projectile+0x94>
		}
	else{
		renderer(pr->old_x,pr->old_y,13,1);//Shadow First
    1400:	e0bfff17 	ldw	r2,-4(fp)
    1404:	10c00217 	ldw	r3,8(r2)
    1408:	e0bfff17 	ldw	r2,-4(fp)
    140c:	10800317 	ldw	r2,12(r2)
    1410:	1809883a 	mov	r4,r3
    1414:	100b883a 	mov	r5,r2
    1418:	01800344 	movi	r6,13
    141c:	01c00044 	movi	r7,1
    1420:	00017f00 	call	17f0 <renderer>
		renderer(pr->x_pos,pr->y_pos,13,0);
    1424:	e0bfff17 	ldw	r2,-4(fp)
    1428:	10c00017 	ldw	r3,0(r2)
    142c:	e0bfff17 	ldw	r2,-4(fp)
    1430:	10800117 	ldw	r2,4(r2)
    1434:	1809883a 	mov	r4,r3
    1438:	100b883a 	mov	r5,r2
    143c:	01800344 	movi	r6,13
    1440:	000f883a 	mov	r7,zero
    1444:	00017f00 	call	17f0 <renderer>
		pr->old_x=pr->x_pos;
    1448:	e0bfff17 	ldw	r2,-4(fp)
    144c:	10c00017 	ldw	r3,0(r2)
    1450:	e0bfff17 	ldw	r2,-4(fp)
    1454:	10c00215 	stw	r3,8(r2)
		pr->old_y=pr->y_pos;
    1458:	e0bfff17 	ldw	r2,-4(fp)
    145c:	10c00117 	ldw	r3,4(r2)
    1460:	e0bfff17 	ldw	r2,-4(fp)
    1464:	10c00315 	stw	r3,12(r2)
		}
}
    1468:	e037883a 	mov	sp,fp
    146c:	dfc00117 	ldw	ra,4(sp)
    1470:	df000017 	ldw	fp,0(sp)
    1474:	dec00204 	addi	sp,sp,8
    1478:	f800283a 	ret

0000147c <make_enemy>:


void make_enemy(enemy **em){
    147c:	defffc04 	addi	sp,sp,-16
    1480:	dfc00315 	stw	ra,12(sp)
    1484:	df000215 	stw	fp,8(sp)
    1488:	df000204 	addi	fp,sp,8
    148c:	e13fff15 	stw	r4,-4(fp)
	enemy *generated=(enemy *)malloc(sizeof(enemy));
    1490:	01000704 	movi	r4,28
    1494:	00035340 	call	3534 <malloc>
    1498:	e0bffe15 	stw	r2,-8(fp)
	generated->x_pos=rand()%500;
    149c:	0003e500 	call	3e50 <rand>
    14a0:	1009883a 	mov	r4,r2
    14a4:	01407d04 	movi	r5,500
    14a8:	00034c80 	call	34c8 <__modsi3>
    14ac:	1007883a 	mov	r3,r2
    14b0:	e0bffe17 	ldw	r2,-8(fp)
    14b4:	10c00015 	stw	r3,0(r2)
	generated->y_pos=rand()%300;
    14b8:	0003e500 	call	3e50 <rand>
    14bc:	1009883a 	mov	r4,r2
    14c0:	01404b04 	movi	r5,300
    14c4:	00034c80 	call	34c8 <__modsi3>
    14c8:	1007883a 	mov	r3,r2
    14cc:	e0bffe17 	ldw	r2,-8(fp)
    14d0:	10c00115 	stw	r3,4(r2)
	generated->old_x=generated->x_pos;
    14d4:	e0bffe17 	ldw	r2,-8(fp)
    14d8:	10c00017 	ldw	r3,0(r2)
    14dc:	e0bffe17 	ldw	r2,-8(fp)
    14e0:	10c00415 	stw	r3,16(r2)
	generated->old_y=generated->y_pos;
    14e4:	e0bffe17 	ldw	r2,-8(fp)
    14e8:	10c00117 	ldw	r3,4(r2)
    14ec:	e0bffe17 	ldw	r2,-8(fp)
    14f0:	10c00515 	stw	r3,20(r2)
	generated->health = 2;
    14f4:	e0bffe17 	ldw	r2,-8(fp)
    14f8:	00c00084 	movi	r3,2
    14fc:	10c00215 	stw	r3,8(r2)
	generated->id=9;
    1500:	e0bffe17 	ldw	r2,-8(fp)
    1504:	00c00244 	movi	r3,9
    1508:	10c00315 	stw	r3,12(r2)
	generated->next = *em;
    150c:	e0bfff17 	ldw	r2,-4(fp)
    1510:	10c00017 	ldw	r3,0(r2)
    1514:	e0bffe17 	ldw	r2,-8(fp)
    1518:	10c00615 	stw	r3,24(r2)
	*em = generated;
    151c:	e0bfff17 	ldw	r2,-4(fp)
    1520:	e0fffe17 	ldw	r3,-8(fp)
    1524:	10c00015 	stw	r3,0(r2)
}
    1528:	e037883a 	mov	sp,fp
    152c:	dfc00117 	ldw	ra,4(sp)
    1530:	df000017 	ldw	fp,0(sp)
    1534:	dec00204 	addi	sp,sp,8
    1538:	f800283a 	ret

0000153c <delete_enemy>:

enemy * delete_enemy(enemy *curr)
{
    153c:	defffc04 	addi	sp,sp,-16
    1540:	dfc00315 	stw	ra,12(sp)
    1544:	df000215 	stw	fp,8(sp)
    1548:	df000204 	addi	fp,sp,8
    154c:	e13fff15 	stw	r4,-4(fp)
  if (curr == NULL)
    1550:	e0bfff17 	ldw	r2,-4(fp)
    1554:	1000021e 	bne	r2,zero,1560 <delete_enemy+0x24>
    return NULL;
    1558:	0005883a 	mov	r2,zero
    155c:	00002906 	br	1604 <delete_enemy+0xc8>

  if (curr->y_pos + sizes[curr->id][1]>=475 || curr->health==0) {
    1560:	e0bfff17 	ldw	r2,-4(fp)
    1564:	10c00117 	ldw	r3,4(r2)
    1568:	e0bfff17 	ldw	r2,-4(fp)
    156c:	11000317 	ldw	r4,12(r2)
    1570:	00800074 	movhi	r2,1
    1574:	108c9504 	addi	r2,r2,12884
    1578:	200890fa 	slli	r4,r4,3
    157c:	1105883a 	add	r2,r2,r4
    1580:	10800104 	addi	r2,r2,4
    1584:	10800017 	ldw	r2,0(r2)
    1588:	1885883a 	add	r2,r3,r2
    158c:	108076c8 	cmpgei	r2,r2,475
    1590:	1000031e 	bne	r2,zero,15a0 <delete_enemy+0x64>
    1594:	e0bfff17 	ldw	r2,-4(fp)
    1598:	10800217 	ldw	r2,8(r2)
    159c:	1000111e 	bne	r2,zero,15e4 <delete_enemy+0xa8>
    enemy *tempNext;
    tempNext = curr->next;
    15a0:	e0bfff17 	ldw	r2,-4(fp)
    15a4:	10800617 	ldw	r2,24(r2)
    15a8:	e0bffe15 	stw	r2,-8(fp)
    renderer(curr->x_pos,curr->y_pos,curr->id,1);//Render shadow
    15ac:	e0bfff17 	ldw	r2,-4(fp)
    15b0:	11000017 	ldw	r4,0(r2)
    15b4:	e0bfff17 	ldw	r2,-4(fp)
    15b8:	10c00117 	ldw	r3,4(r2)
    15bc:	e0bfff17 	ldw	r2,-4(fp)
    15c0:	10800317 	ldw	r2,12(r2)
    15c4:	180b883a 	mov	r5,r3
    15c8:	100d883a 	mov	r6,r2
    15cc:	01c00044 	movi	r7,1
    15d0:	00017f00 	call	17f0 <renderer>
    free(curr);
    15d4:	e13fff17 	ldw	r4,-4(fp)
    15d8:	00035480 	call	3548 <free>
    return tempNext;
    15dc:	e0bffe17 	ldw	r2,-8(fp)
    15e0:	00000806 	br	1604 <delete_enemy+0xc8>
  }
  curr->next = delete_enemy(curr->next);
    15e4:	e0bfff17 	ldw	r2,-4(fp)
    15e8:	10800617 	ldw	r2,24(r2)
    15ec:	1009883a 	mov	r4,r2
    15f0:	000153c0 	call	153c <delete_enemy>
    15f4:	1007883a 	mov	r3,r2
    15f8:	e0bfff17 	ldw	r2,-4(fp)
    15fc:	10c00615 	stw	r3,24(r2)
  return curr;
    1600:	e0bfff17 	ldw	r2,-4(fp)
}
    1604:	e037883a 	mov	sp,fp
    1608:	dfc00117 	ldw	ra,4(sp)
    160c:	df000017 	ldw	fp,0(sp)
    1610:	dec00204 	addi	sp,sp,8
    1614:	f800283a 	ret

00001618 <count_enemies>:

int count_enemies(enemy *em){
    1618:	defffc04 	addi	sp,sp,-16
    161c:	df000315 	stw	fp,12(sp)
    1620:	df000304 	addi	fp,sp,12
    1624:	e13fff15 	stw	r4,-4(fp)
	int i=0;
    1628:	e03ffd15 	stw	zero,-12(fp)
	enemy *start=em;
    162c:	e0bfff17 	ldw	r2,-4(fp)
    1630:	e0bffe15 	stw	r2,-8(fp)
	while(start!=NULL){
    1634:	00000606 	br	1650 <count_enemies+0x38>
		start=start->next;
    1638:	e0bffe17 	ldw	r2,-8(fp)
    163c:	10800617 	ldw	r2,24(r2)
    1640:	e0bffe15 	stw	r2,-8(fp)
		i++;
    1644:	e0bffd17 	ldw	r2,-12(fp)
    1648:	10800044 	addi	r2,r2,1
    164c:	e0bffd15 	stw	r2,-12(fp)
}

int count_enemies(enemy *em){
	int i=0;
	enemy *start=em;
	while(start!=NULL){
    1650:	e0bffe17 	ldw	r2,-8(fp)
    1654:	103ff81e 	bne	r2,zero,1638 <__alt_data_end+0xfffabf08>
		start=start->next;
		i++;
	}
	return i;
    1658:	e0bffd17 	ldw	r2,-12(fp)
}
    165c:	e037883a 	mov	sp,fp
    1660:	df000017 	ldw	fp,0(sp)
    1664:	dec00104 	addi	sp,sp,4
    1668:	f800283a 	ret

0000166c <move_enemies>:

void move_enemies(enemy *start){
    166c:	defffc04 	addi	sp,sp,-16
    1670:	dfc00315 	stw	ra,12(sp)
    1674:	df000215 	stw	fp,8(sp)
    1678:	df000204 	addi	fp,sp,8
    167c:	e13fff15 	stw	r4,-4(fp)
	if(start==NULL){
    1680:	e0bfff17 	ldw	r2,-4(fp)
    1684:	1000041e 	bne	r2,zero,1698 <move_enemies+0x2c>
		printf("You piece of shit\n");
    1688:	01000074 	movhi	r4,1
    168c:	210bad04 	addi	r4,r4,11956
    1690:	0003e240 	call	3e24 <puts>
    1694:	00001106 	br	16dc <move_enemies+0x70>
	}
	else{
	enemy *em=start;
    1698:	e0bfff17 	ldw	r2,-4(fp)
    169c:	e0bffe15 	stw	r2,-8(fp)
	while(em!=NULL){
    16a0:	00000c06 	br	16d4 <move_enemies+0x68>
		move_enemy(em,em->x_pos,em->y_pos+3);
    16a4:	e0bffe17 	ldw	r2,-8(fp)
    16a8:	10c00017 	ldw	r3,0(r2)
    16ac:	e0bffe17 	ldw	r2,-8(fp)
    16b0:	10800117 	ldw	r2,4(r2)
    16b4:	108000c4 	addi	r2,r2,3
    16b8:	e13ffe17 	ldw	r4,-8(fp)
    16bc:	180b883a 	mov	r5,r3
    16c0:	100d883a 	mov	r6,r2
    16c4:	00021a80 	call	21a8 <move_enemy>
		em=em->next;
    16c8:	e0bffe17 	ldw	r2,-8(fp)
    16cc:	10800617 	ldw	r2,24(r2)
    16d0:	e0bffe15 	stw	r2,-8(fp)
	if(start==NULL){
		printf("You piece of shit\n");
	}
	else{
	enemy *em=start;
	while(em!=NULL){
    16d4:	e0bffe17 	ldw	r2,-8(fp)
    16d8:	103ff21e 	bne	r2,zero,16a4 <__alt_data_end+0xfffabf74>
		move_enemy(em,em->x_pos,em->y_pos+3);
		em=em->next;
		}
	}
}
    16dc:	e037883a 	mov	sp,fp
    16e0:	dfc00117 	ldw	ra,4(sp)
    16e4:	df000017 	ldw	fp,0(sp)
    16e8:	dec00204 	addi	sp,sp,8
    16ec:	f800283a 	ret

000016f0 <render_enemies>:

void render_enemies(enemy *start){
    16f0:	defffc04 	addi	sp,sp,-16
    16f4:	dfc00315 	stw	ra,12(sp)
    16f8:	df000215 	stw	fp,8(sp)
    16fc:	df000204 	addi	fp,sp,8
    1700:	e13fff15 	stw	r4,-4(fp)
	enemy *em=start;
    1704:	e0bfff17 	ldw	r2,-4(fp)
    1708:	e0bffe15 	stw	r2,-8(fp)
	while(em!=NULL){
    170c:	00000506 	br	1724 <render_enemies+0x34>
		render_enemy(em);
    1710:	e13ffe17 	ldw	r4,-8(fp)
    1714:	00017400 	call	1740 <render_enemy>
		em=em->next;
    1718:	e0bffe17 	ldw	r2,-8(fp)
    171c:	10800617 	ldw	r2,24(r2)
    1720:	e0bffe15 	stw	r2,-8(fp)
	}
}

void render_enemies(enemy *start){
	enemy *em=start;
	while(em!=NULL){
    1724:	e0bffe17 	ldw	r2,-8(fp)
    1728:	103ff91e 	bne	r2,zero,1710 <__alt_data_end+0xfffabfe0>
		render_enemy(em);
		em=em->next;
	}
}
    172c:	e037883a 	mov	sp,fp
    1730:	dfc00117 	ldw	ra,4(sp)
    1734:	df000017 	ldw	fp,0(sp)
    1738:	dec00204 	addi	sp,sp,8
    173c:	f800283a 	ret

00001740 <render_enemy>:

void render_enemy(enemy *em){
    1740:	defffd04 	addi	sp,sp,-12
    1744:	dfc00215 	stw	ra,8(sp)
    1748:	df000115 	stw	fp,4(sp)
    174c:	df000104 	addi	fp,sp,4
    1750:	e13fff15 	stw	r4,-4(fp)
	if(em==NULL){
    1754:	e0bfff17 	ldw	r2,-4(fp)
    1758:	1000041e 	bne	r2,zero,176c <render_enemy+0x2c>
		printf("enemy not initialized");
    175c:	01000074 	movhi	r4,1
    1760:	210bb204 	addi	r4,r4,11976
    1764:	0003d300 	call	3d30 <printf>
    1768:	00001c06 	br	17dc <render_enemy+0x9c>
		}
	else{
		renderer(em->old_x,em->old_y,em->id,1);//Shadow First
    176c:	e0bfff17 	ldw	r2,-4(fp)
    1770:	11000417 	ldw	r4,16(r2)
    1774:	e0bfff17 	ldw	r2,-4(fp)
    1778:	10c00517 	ldw	r3,20(r2)
    177c:	e0bfff17 	ldw	r2,-4(fp)
    1780:	10800317 	ldw	r2,12(r2)
    1784:	180b883a 	mov	r5,r3
    1788:	100d883a 	mov	r6,r2
    178c:	01c00044 	movi	r7,1
    1790:	00017f00 	call	17f0 <renderer>
		renderer(em->x_pos,em->y_pos,em->id,0);
    1794:	e0bfff17 	ldw	r2,-4(fp)
    1798:	11000017 	ldw	r4,0(r2)
    179c:	e0bfff17 	ldw	r2,-4(fp)
    17a0:	10c00117 	ldw	r3,4(r2)
    17a4:	e0bfff17 	ldw	r2,-4(fp)
    17a8:	10800317 	ldw	r2,12(r2)
    17ac:	180b883a 	mov	r5,r3
    17b0:	100d883a 	mov	r6,r2
    17b4:	000f883a 	mov	r7,zero
    17b8:	00017f00 	call	17f0 <renderer>
		em->old_x=em->x_pos;
    17bc:	e0bfff17 	ldw	r2,-4(fp)
    17c0:	10c00017 	ldw	r3,0(r2)
    17c4:	e0bfff17 	ldw	r2,-4(fp)
    17c8:	10c00415 	stw	r3,16(r2)
		em->old_y=em->y_pos;
    17cc:	e0bfff17 	ldw	r2,-4(fp)
    17d0:	10c00117 	ldw	r3,4(r2)
    17d4:	e0bfff17 	ldw	r2,-4(fp)
    17d8:	10c00515 	stw	r3,20(r2)
		}
}
    17dc:	e037883a 	mov	sp,fp
    17e0:	dfc00117 	ldw	ra,4(sp)
    17e4:	df000017 	ldw	fp,0(sp)
    17e8:	dec00204 	addi	sp,sp,8
    17ec:	f800283a 	ret

000017f0 <renderer>:


void renderer(int x, int y, int sprite_num, int is_shadow)
{
    17f0:	defffb04 	addi	sp,sp,-20
    17f4:	df000415 	stw	fp,16(sp)
    17f8:	df000404 	addi	fp,sp,16
    17fc:	e13ffc15 	stw	r4,-16(fp)
    1800:	e17ffd15 	stw	r5,-12(fp)
    1804:	e1bffe15 	stw	r6,-8(fp)
    1808:	e1ffff15 	stw	r7,-4(fp)
	if(is_shadow==1)
    180c:	e0bfff17 	ldw	r2,-4(fp)
    1810:	10800058 	cmpnei	r2,r2,1
    1814:	1000051e 	bne	r2,zero,182c <renderer+0x3c>
		*sw_to_hw = 4;
    1818:	00800234 	movhi	r2,8
    181c:	10842004 	addi	r2,r2,4224
    1820:	00c00104 	movi	r3,4
    1824:	10c00015 	stw	r3,0(r2)
    1828:	00000606 	br	1844 <renderer+0x54>
	else
		*sw_to_hw &= 0;
    182c:	00800234 	movhi	r2,8
    1830:	10842004 	addi	r2,r2,4224
    1834:	10800017 	ldw	r2,0(r2)
    1838:	00800234 	movhi	r2,8
    183c:	10842004 	addi	r2,r2,4224
    1840:	10000015 	stw	zero,0(r2)
	*sprite_number = sprite_num;
    1844:	00800234 	movhi	r2,8
    1848:	10842804 	addi	r2,r2,4256
    184c:	e0fffe17 	ldw	r3,-8(fp)
    1850:	10c00015 	stw	r3,0(r2)
	*sprite_xy = 1024*x + y;
    1854:	00800234 	movhi	r2,8
    1858:	10842404 	addi	r2,r2,4240
    185c:	e0fffc17 	ldw	r3,-16(fp)
    1860:	180892ba 	slli	r4,r3,10
    1864:	e0fffd17 	ldw	r3,-12(fp)
    1868:	20c7883a 	add	r3,r4,r3
    186c:	10c00015 	stw	r3,0(r2)
	*sw_to_hw |= 2;
    1870:	00800234 	movhi	r2,8
    1874:	10842004 	addi	r2,r2,4224
    1878:	00c00234 	movhi	r3,8
    187c:	18c42004 	addi	r3,r3,4224
    1880:	18c00017 	ldw	r3,0(r3)
    1884:	18c00094 	ori	r3,r3,2
    1888:	10c00015 	stw	r3,0(r2)
	while(*hw_to_sw%2 != 0)
    188c:	0001883a 	nop
    1890:	00800234 	movhi	r2,8
    1894:	10841c04 	addi	r2,r2,4208
    1898:	10800017 	ldw	r2,0(r2)
    189c:	1080004c 	andi	r2,r2,1
    18a0:	103ffb1e 	bne	r2,zero,1890 <__alt_data_end+0xfffac160>
	{}
	*sw_to_hw &= ~2;
    18a4:	00800234 	movhi	r2,8
    18a8:	10842004 	addi	r2,r2,4224
    18ac:	00c00234 	movhi	r3,8
    18b0:	18c42004 	addi	r3,r3,4224
    18b4:	19000017 	ldw	r4,0(r3)
    18b8:	00ffff44 	movi	r3,-3
    18bc:	20c6703a 	and	r3,r4,r3
    18c0:	10c00015 	stw	r3,0(r2)
	while(*hw_to_sw != 1)
    18c4:	0001883a 	nop
    18c8:	00800234 	movhi	r2,8
    18cc:	10841c04 	addi	r2,r2,4208
    18d0:	10800017 	ldw	r2,0(r2)
    18d4:	10800058 	cmpnei	r2,r2,1
    18d8:	103ffb1e 	bne	r2,zero,18c8 <__alt_data_end+0xfffac198>
	{}
	*sw_to_hw |= 1;
    18dc:	00800234 	movhi	r2,8
    18e0:	10842004 	addi	r2,r2,4224
    18e4:	00c00234 	movhi	r3,8
    18e8:	18c42004 	addi	r3,r3,4224
    18ec:	18c00017 	ldw	r3,0(r3)
    18f0:	18c00054 	ori	r3,r3,1
    18f4:	10c00015 	stw	r3,0(r2)
	return;
    18f8:	0001883a 	nop
}
    18fc:	e037883a 	mov	sp,fp
    1900:	df000017 	ldw	fp,0(sp)
    1904:	dec00104 	addi	sp,sp,4
    1908:	f800283a 	ret

0000190c <render_shadows>:

void render_shadows(player *first,player *second){
    190c:	defffc04 	addi	sp,sp,-16
    1910:	dfc00315 	stw	ra,12(sp)
    1914:	df000215 	stw	fp,8(sp)
    1918:	df000204 	addi	fp,sp,8
    191c:	e13ffe15 	stw	r4,-8(fp)
    1920:	e17fff15 	stw	r5,-4(fp)
	if(first==NULL || second ==NULL){
    1924:	e0bffe17 	ldw	r2,-8(fp)
    1928:	10000226 	beq	r2,zero,1934 <render_shadows+0x28>
    192c:	e0bfff17 	ldw	r2,-4(fp)
    1930:	1000041e 	bne	r2,zero,1944 <render_shadows+0x38>
			printf("players not instantiated");
    1934:	01000074 	movhi	r4,1
    1938:	210ba104 	addi	r4,r4,11908
    193c:	0003d300 	call	3d30 <printf>
    1940:	00001406 	br	1994 <render_shadows+0x88>
	}
	else{
		renderer(first->old_x,first->old_y,first->id,1);
    1944:	e0bffe17 	ldw	r2,-8(fp)
    1948:	11000417 	ldw	r4,16(r2)
    194c:	e0bffe17 	ldw	r2,-8(fp)
    1950:	10c00517 	ldw	r3,20(r2)
    1954:	e0bffe17 	ldw	r2,-8(fp)
    1958:	10800317 	ldw	r2,12(r2)
    195c:	180b883a 	mov	r5,r3
    1960:	100d883a 	mov	r6,r2
    1964:	01c00044 	movi	r7,1
    1968:	00017f00 	call	17f0 <renderer>
		renderer(second->old_x,second->old_y,second->id,1);
    196c:	e0bfff17 	ldw	r2,-4(fp)
    1970:	11000417 	ldw	r4,16(r2)
    1974:	e0bfff17 	ldw	r2,-4(fp)
    1978:	10c00517 	ldw	r3,20(r2)
    197c:	e0bfff17 	ldw	r2,-4(fp)
    1980:	10800317 	ldw	r2,12(r2)
    1984:	180b883a 	mov	r5,r3
    1988:	100d883a 	mov	r6,r2
    198c:	01c00044 	movi	r7,1
    1990:	00017f00 	call	17f0 <renderer>
	}
	return;
    1994:	0001883a 	nop
}
    1998:	e037883a 	mov	sp,fp
    199c:	dfc00117 	ldw	ra,4(sp)
    19a0:	df000017 	ldw	fp,0(sp)
    19a4:	dec00204 	addi	sp,sp,8
    19a8:	f800283a 	ret

000019ac <render_shadow>:
void render_shadow(player *current){
    19ac:	defffd04 	addi	sp,sp,-12
    19b0:	dfc00215 	stw	ra,8(sp)
    19b4:	df000115 	stw	fp,4(sp)
    19b8:	df000104 	addi	fp,sp,4
    19bc:	e13fff15 	stw	r4,-4(fp)
	if(current==NULL){
    19c0:	e0bfff17 	ldw	r2,-4(fp)
    19c4:	1000041e 	bne	r2,zero,19d8 <render_shadow+0x2c>
			printf("players not instantiated");
    19c8:	01000074 	movhi	r4,1
    19cc:	210ba104 	addi	r4,r4,11908
    19d0:	0003d300 	call	3d30 <printf>
    19d4:	00001206 	br	1a20 <render_shadow+0x74>
	}
	else{
		renderer(current->old_x,current->old_y,current->id,1);
    19d8:	e0bfff17 	ldw	r2,-4(fp)
    19dc:	11000417 	ldw	r4,16(r2)
    19e0:	e0bfff17 	ldw	r2,-4(fp)
    19e4:	10c00517 	ldw	r3,20(r2)
    19e8:	e0bfff17 	ldw	r2,-4(fp)
    19ec:	10800317 	ldw	r2,12(r2)
    19f0:	180b883a 	mov	r5,r3
    19f4:	100d883a 	mov	r6,r2
    19f8:	01c00044 	movi	r7,1
    19fc:	00017f00 	call	17f0 <renderer>
		current->old_x=current->x_pos;
    1a00:	e0bfff17 	ldw	r2,-4(fp)
    1a04:	10c00017 	ldw	r3,0(r2)
    1a08:	e0bfff17 	ldw	r2,-4(fp)
    1a0c:	10c00415 	stw	r3,16(r2)
		current->old_y=current->y_pos;
    1a10:	e0bfff17 	ldw	r2,-4(fp)
    1a14:	10c00117 	ldw	r3,4(r2)
    1a18:	e0bfff17 	ldw	r2,-4(fp)
    1a1c:	10c00515 	stw	r3,20(r2)
	}
	return;
    1a20:	0001883a 	nop
}
    1a24:	e037883a 	mov	sp,fp
    1a28:	dfc00117 	ldw	ra,4(sp)
    1a2c:	df000017 	ldw	fp,0(sp)
    1a30:	dec00204 	addi	sp,sp,8
    1a34:	f800283a 	ret

00001a38 <render_players>:

void render_players(player *first,player *second){
    1a38:	defffc04 	addi	sp,sp,-16
    1a3c:	dfc00315 	stw	ra,12(sp)
    1a40:	df000215 	stw	fp,8(sp)
    1a44:	df000204 	addi	fp,sp,8
    1a48:	e13ffe15 	stw	r4,-8(fp)
    1a4c:	e17fff15 	stw	r5,-4(fp)
	if(first==NULL || second ==NULL){
    1a50:	e0bffe17 	ldw	r2,-8(fp)
    1a54:	10000226 	beq	r2,zero,1a60 <render_players+0x28>
    1a58:	e0bfff17 	ldw	r2,-4(fp)
    1a5c:	1000041e 	bne	r2,zero,1a70 <render_players+0x38>
		printf("players not instantiated");
    1a60:	01000074 	movhi	r4,1
    1a64:	210ba104 	addi	r4,r4,11908
    1a68:	0003d300 	call	3d30 <printf>
    1a6c:	00001e06 	br	1ae8 <render_players+0xb0>
	}
	else{
		if(render_player_check(first)==0){
    1a70:	e13ffe17 	ldw	r4,-8(fp)
    1a74:	0001afc0 	call	1afc <render_player_check>
    1a78:	10000c1e 	bne	r2,zero,1aac <render_players+0x74>
			render_shadow(first);
    1a7c:	e13ffe17 	ldw	r4,-8(fp)
    1a80:	00019ac0 	call	19ac <render_shadow>
			renderer(first->x_pos,first->y_pos,first->id,0);
    1a84:	e0bffe17 	ldw	r2,-8(fp)
    1a88:	11000017 	ldw	r4,0(r2)
    1a8c:	e0bffe17 	ldw	r2,-8(fp)
    1a90:	10c00117 	ldw	r3,4(r2)
    1a94:	e0bffe17 	ldw	r2,-8(fp)
    1a98:	10800317 	ldw	r2,12(r2)
    1a9c:	180b883a 	mov	r5,r3
    1aa0:	100d883a 	mov	r6,r2
    1aa4:	000f883a 	mov	r7,zero
    1aa8:	00017f00 	call	17f0 <renderer>

		}
		if(render_player_check(second)==0){
    1aac:	e13fff17 	ldw	r4,-4(fp)
    1ab0:	0001afc0 	call	1afc <render_player_check>
    1ab4:	10000c1e 	bne	r2,zero,1ae8 <render_players+0xb0>
			render_shadow(second);
    1ab8:	e13fff17 	ldw	r4,-4(fp)
    1abc:	00019ac0 	call	19ac <render_shadow>
			renderer(second->x_pos,second->y_pos,second->id,0);
    1ac0:	e0bfff17 	ldw	r2,-4(fp)
    1ac4:	11000017 	ldw	r4,0(r2)
    1ac8:	e0bfff17 	ldw	r2,-4(fp)
    1acc:	10c00117 	ldw	r3,4(r2)
    1ad0:	e0bfff17 	ldw	r2,-4(fp)
    1ad4:	10800317 	ldw	r2,12(r2)
    1ad8:	180b883a 	mov	r5,r3
    1adc:	100d883a 	mov	r6,r2
    1ae0:	000f883a 	mov	r7,zero
    1ae4:	00017f00 	call	17f0 <renderer>

		}
	}
}
    1ae8:	e037883a 	mov	sp,fp
    1aec:	dfc00117 	ldw	ra,4(sp)
    1af0:	df000017 	ldw	fp,0(sp)
    1af4:	dec00204 	addi	sp,sp,8
    1af8:	f800283a 	ret

00001afc <render_player_check>:
int render_player_check(player *current){
    1afc:	defffd04 	addi	sp,sp,-12
    1b00:	df000215 	stw	fp,8(sp)
    1b04:	df000204 	addi	fp,sp,8
    1b08:	e13fff15 	stw	r4,-4(fp)
	int i=0;
    1b0c:	e03ffe15 	stw	zero,-8(fp)
	if(current->x_pos==current->old_x && current->y_pos==current->old_y){
    1b10:	e0bfff17 	ldw	r2,-4(fp)
    1b14:	10c00017 	ldw	r3,0(r2)
    1b18:	e0bfff17 	ldw	r2,-4(fp)
    1b1c:	10800417 	ldw	r2,16(r2)
    1b20:	1880071e 	bne	r3,r2,1b40 <render_player_check+0x44>
    1b24:	e0bfff17 	ldw	r2,-4(fp)
    1b28:	10c00117 	ldw	r3,4(r2)
    1b2c:	e0bfff17 	ldw	r2,-4(fp)
    1b30:	10800517 	ldw	r2,20(r2)
    1b34:	1880021e 	bne	r3,r2,1b40 <render_player_check+0x44>
		i=1;
    1b38:	00800044 	movi	r2,1
    1b3c:	e0bffe15 	stw	r2,-8(fp)
	}
	return i;
    1b40:	e0bffe17 	ldw	r2,-8(fp)
}
    1b44:	e037883a 	mov	sp,fp
    1b48:	df000017 	ldw	fp,0(sp)
    1b4c:	dec00104 	addi	sp,sp,4
    1b50:	f800283a 	ret

00001b54 <keycode_effect>:
//	if(current->x_pos==current->old_x && current->y_pos==current->old_y){
//		i=1;
//	}
//	return i;
//}
int keycode_effect(player *first,player *second,unsigned int *arr, player_projectile **bullets, int can_fire_n){
    1b54:	defff804 	addi	sp,sp,-32
    1b58:	dfc00715 	stw	ra,28(sp)
    1b5c:	df000615 	stw	fp,24(sp)
    1b60:	df000604 	addi	fp,sp,24
    1b64:	e13ffc15 	stw	r4,-16(fp)
    1b68:	e17ffd15 	stw	r5,-12(fp)
    1b6c:	e1bffe15 	stw	r6,-8(fp)
    1b70:	e1ffff15 	stw	r7,-4(fp)
	int i=0;
    1b74:	e03ffa15 	stw	zero,-24(fp)
	int j=0;
    1b78:	e03ffb15 	stw	zero,-20(fp)
	for(i=0;i<4;i++){
    1b7c:	e03ffa15 	stw	zero,-24(fp)
    1b80:	00007d06 	br	1d78 <keycode_effect+0x224>
		if(arr[i]==0x04){
    1b84:	e0bffa17 	ldw	r2,-24(fp)
    1b88:	1085883a 	add	r2,r2,r2
    1b8c:	1085883a 	add	r2,r2,r2
    1b90:	1007883a 	mov	r3,r2
    1b94:	e0bffe17 	ldw	r2,-8(fp)
    1b98:	10c5883a 	add	r2,r2,r3
    1b9c:	10800017 	ldw	r2,0(r2)
    1ba0:	10800118 	cmpnei	r2,r2,4
    1ba4:	10000b1e 	bne	r2,zero,1bd4 <keycode_effect+0x80>
			j=1;
    1ba8:	00800044 	movi	r2,1
    1bac:	e0bffb15 	stw	r2,-20(fp)
			move_player(first,first->x_pos-10,first->y_pos);
    1bb0:	e0bffc17 	ldw	r2,-16(fp)
    1bb4:	10800017 	ldw	r2,0(r2)
    1bb8:	10fffd84 	addi	r3,r2,-10
    1bbc:	e0bffc17 	ldw	r2,-16(fp)
    1bc0:	10800117 	ldw	r2,4(r2)
    1bc4:	e13ffc17 	ldw	r4,-16(fp)
    1bc8:	180b883a 	mov	r5,r3
    1bcc:	100d883a 	mov	r6,r2
    1bd0:	000208c0 	call	208c <move_player>
		}
		if(arr[i]==0x07){
    1bd4:	e0bffa17 	ldw	r2,-24(fp)
    1bd8:	1085883a 	add	r2,r2,r2
    1bdc:	1085883a 	add	r2,r2,r2
    1be0:	1007883a 	mov	r3,r2
    1be4:	e0bffe17 	ldw	r2,-8(fp)
    1be8:	10c5883a 	add	r2,r2,r3
    1bec:	10800017 	ldw	r2,0(r2)
    1bf0:	108001d8 	cmpnei	r2,r2,7
    1bf4:	10000b1e 	bne	r2,zero,1c24 <keycode_effect+0xd0>
			j=1;
    1bf8:	00800044 	movi	r2,1
    1bfc:	e0bffb15 	stw	r2,-20(fp)
			move_player(first,first->x_pos+10,first->y_pos);
    1c00:	e0bffc17 	ldw	r2,-16(fp)
    1c04:	10800017 	ldw	r2,0(r2)
    1c08:	10c00284 	addi	r3,r2,10
    1c0c:	e0bffc17 	ldw	r2,-16(fp)
    1c10:	10800117 	ldw	r2,4(r2)
    1c14:	e13ffc17 	ldw	r4,-16(fp)
    1c18:	180b883a 	mov	r5,r3
    1c1c:	100d883a 	mov	r6,r2
    1c20:	000208c0 	call	208c <move_player>
		}
		if(arr[i]==0x1a){
    1c24:	e0bffa17 	ldw	r2,-24(fp)
    1c28:	1085883a 	add	r2,r2,r2
    1c2c:	1085883a 	add	r2,r2,r2
    1c30:	1007883a 	mov	r3,r2
    1c34:	e0bffe17 	ldw	r2,-8(fp)
    1c38:	10c5883a 	add	r2,r2,r3
    1c3c:	10800017 	ldw	r2,0(r2)
    1c40:	10800698 	cmpnei	r2,r2,26
    1c44:	10000c1e 	bne	r2,zero,1c78 <keycode_effect+0x124>
			if(can_fire_n == 0)
    1c48:	e0800217 	ldw	r2,8(fp)
    1c4c:	10000a1e 	bne	r2,zero,1c78 <keycode_effect+0x124>
			{
				j=1;
    1c50:	00800044 	movi	r2,1
    1c54:	e0bffb15 	stw	r2,-20(fp)
				*bullets = fire_projectile(first, *bullets);
    1c58:	e0bfff17 	ldw	r2,-4(fp)
    1c5c:	10800017 	ldw	r2,0(r2)
    1c60:	e13ffc17 	ldw	r4,-16(fp)
    1c64:	100b883a 	mov	r5,r2
    1c68:	0001e100 	call	1e10 <fire_projectile>
    1c6c:	1007883a 	mov	r3,r2
    1c70:	e0bfff17 	ldw	r2,-4(fp)
    1c74:	10c00015 	stw	r3,0(r2)
			}
		}
		if(arr[i]==0x50){
    1c78:	e0bffa17 	ldw	r2,-24(fp)
    1c7c:	1085883a 	add	r2,r2,r2
    1c80:	1085883a 	add	r2,r2,r2
    1c84:	1007883a 	mov	r3,r2
    1c88:	e0bffe17 	ldw	r2,-8(fp)
    1c8c:	10c5883a 	add	r2,r2,r3
    1c90:	10800017 	ldw	r2,0(r2)
    1c94:	10801418 	cmpnei	r2,r2,80
    1c98:	10000b1e 	bne	r2,zero,1cc8 <keycode_effect+0x174>
			j=1;
    1c9c:	00800044 	movi	r2,1
    1ca0:	e0bffb15 	stw	r2,-20(fp)
			move_player(second,second->x_pos-10,second->y_pos);
    1ca4:	e0bffd17 	ldw	r2,-12(fp)
    1ca8:	10800017 	ldw	r2,0(r2)
    1cac:	10fffd84 	addi	r3,r2,-10
    1cb0:	e0bffd17 	ldw	r2,-12(fp)
    1cb4:	10800117 	ldw	r2,4(r2)
    1cb8:	e13ffd17 	ldw	r4,-12(fp)
    1cbc:	180b883a 	mov	r5,r3
    1cc0:	100d883a 	mov	r6,r2
    1cc4:	000208c0 	call	208c <move_player>
		}
		if(arr[i]==0x4f){
    1cc8:	e0bffa17 	ldw	r2,-24(fp)
    1ccc:	1085883a 	add	r2,r2,r2
    1cd0:	1085883a 	add	r2,r2,r2
    1cd4:	1007883a 	mov	r3,r2
    1cd8:	e0bffe17 	ldw	r2,-8(fp)
    1cdc:	10c5883a 	add	r2,r2,r3
    1ce0:	10800017 	ldw	r2,0(r2)
    1ce4:	108013d8 	cmpnei	r2,r2,79
    1ce8:	10000b1e 	bne	r2,zero,1d18 <keycode_effect+0x1c4>
			j=1;
    1cec:	00800044 	movi	r2,1
    1cf0:	e0bffb15 	stw	r2,-20(fp)
			move_player(second,second->x_pos+10,second->y_pos);
    1cf4:	e0bffd17 	ldw	r2,-12(fp)
    1cf8:	10800017 	ldw	r2,0(r2)
    1cfc:	10c00284 	addi	r3,r2,10
    1d00:	e0bffd17 	ldw	r2,-12(fp)
    1d04:	10800117 	ldw	r2,4(r2)
    1d08:	e13ffd17 	ldw	r4,-12(fp)
    1d0c:	180b883a 	mov	r5,r3
    1d10:	100d883a 	mov	r6,r2
    1d14:	000208c0 	call	208c <move_player>
		}
		if(arr[i]==0x52){
    1d18:	e0bffa17 	ldw	r2,-24(fp)
    1d1c:	1085883a 	add	r2,r2,r2
    1d20:	1085883a 	add	r2,r2,r2
    1d24:	1007883a 	mov	r3,r2
    1d28:	e0bffe17 	ldw	r2,-8(fp)
    1d2c:	10c5883a 	add	r2,r2,r3
    1d30:	10800017 	ldw	r2,0(r2)
    1d34:	10801498 	cmpnei	r2,r2,82
    1d38:	10000c1e 	bne	r2,zero,1d6c <keycode_effect+0x218>
			if(can_fire_n == 0)
    1d3c:	e0800217 	ldw	r2,8(fp)
    1d40:	10000a1e 	bne	r2,zero,1d6c <keycode_effect+0x218>
			{
				j=1;
    1d44:	00800044 	movi	r2,1
    1d48:	e0bffb15 	stw	r2,-20(fp)
				*bullets = fire_projectile(second, *bullets);
    1d4c:	e0bfff17 	ldw	r2,-4(fp)
    1d50:	10800017 	ldw	r2,0(r2)
    1d54:	e13ffd17 	ldw	r4,-12(fp)
    1d58:	100b883a 	mov	r5,r2
    1d5c:	0001e100 	call	1e10 <fire_projectile>
    1d60:	1007883a 	mov	r3,r2
    1d64:	e0bfff17 	ldw	r2,-4(fp)
    1d68:	10c00015 	stw	r3,0(r2)
//	return i;
//}
int keycode_effect(player *first,player *second,unsigned int *arr, player_projectile **bullets, int can_fire_n){
	int i=0;
	int j=0;
	for(i=0;i<4;i++){
    1d6c:	e0bffa17 	ldw	r2,-24(fp)
    1d70:	10800044 	addi	r2,r2,1
    1d74:	e0bffa15 	stw	r2,-24(fp)
    1d78:	e0bffa17 	ldw	r2,-24(fp)
    1d7c:	10800110 	cmplti	r2,r2,4
    1d80:	103f801e 	bne	r2,zero,1b84 <__alt_data_end+0xfffac454>
				j=1;
				*bullets = fire_projectile(second, *bullets);
			}
		}
	}
	return j;
    1d84:	e0bffb17 	ldw	r2,-20(fp)
}
    1d88:	e037883a 	mov	sp,fp
    1d8c:	dfc00117 	ldw	ra,4(sp)
    1d90:	df000017 	ldw	fp,0(sp)
    1d94:	dec00204 	addi	sp,sp,8
    1d98:	f800283a 	ret

00001d9c <parse_keycode>:
void parse_keycode(unsigned int *arr,unsigned int keycode1,unsigned int keycode2){
    1d9c:	defffc04 	addi	sp,sp,-16
    1da0:	df000315 	stw	fp,12(sp)
    1da4:	df000304 	addi	fp,sp,12
    1da8:	e13ffd15 	stw	r4,-12(fp)
    1dac:	e17ffe15 	stw	r5,-8(fp)
    1db0:	e1bfff15 	stw	r6,-4(fp)
	arr[0]=keycode1%256;
    1db4:	e0bffe17 	ldw	r2,-8(fp)
    1db8:	10c03fcc 	andi	r3,r2,255
    1dbc:	e0bffd17 	ldw	r2,-12(fp)
    1dc0:	10c00015 	stw	r3,0(r2)
	arr[1]=keycode1/256;
    1dc4:	e0bffd17 	ldw	r2,-12(fp)
    1dc8:	10800104 	addi	r2,r2,4
    1dcc:	e0fffe17 	ldw	r3,-8(fp)
    1dd0:	1806d23a 	srli	r3,r3,8
    1dd4:	10c00015 	stw	r3,0(r2)
	arr[2]=keycode2%256;
    1dd8:	e0bffd17 	ldw	r2,-12(fp)
    1ddc:	10800204 	addi	r2,r2,8
    1de0:	e0ffff17 	ldw	r3,-4(fp)
    1de4:	18c03fcc 	andi	r3,r3,255
    1de8:	10c00015 	stw	r3,0(r2)
	arr[3]=keycode2/256;
    1dec:	e0bffd17 	ldw	r2,-12(fp)
    1df0:	10800304 	addi	r2,r2,12
    1df4:	e0ffff17 	ldw	r3,-4(fp)
    1df8:	1806d23a 	srli	r3,r3,8
    1dfc:	10c00015 	stw	r3,0(r2)
}
    1e00:	e037883a 	mov	sp,fp
    1e04:	df000017 	ldw	fp,0(sp)
    1e08:	dec00104 	addi	sp,sp,4
    1e0c:	f800283a 	ret

00001e10 <fire_projectile>:


player_projectile* fire_projectile(player *current, player_projectile *head)
{
    1e10:	defffb04 	addi	sp,sp,-20
    1e14:	dfc00415 	stw	ra,16(sp)
    1e18:	df000315 	stw	fp,12(sp)
    1e1c:	df000304 	addi	fp,sp,12
    1e20:	e13ffe15 	stw	r4,-8(fp)
    1e24:	e17fff15 	stw	r5,-4(fp)
	player_projectile *new=(player_projectile*)malloc(sizeof(player_projectile));
    1e28:	01000504 	movi	r4,20
    1e2c:	00035340 	call	3534 <malloc>
    1e30:	e0bffd15 	stw	r2,-12(fp)
	new->x_pos=current->x_pos + ((sizes[current->id][0])/2)-11;
    1e34:	e0bffe17 	ldw	r2,-8(fp)
    1e38:	10c00017 	ldw	r3,0(r2)
    1e3c:	e0bffe17 	ldw	r2,-8(fp)
    1e40:	11000317 	ldw	r4,12(r2)
    1e44:	00800074 	movhi	r2,1
    1e48:	108c9504 	addi	r2,r2,12884
    1e4c:	200890fa 	slli	r4,r4,3
    1e50:	1105883a 	add	r2,r2,r4
    1e54:	10800017 	ldw	r2,0(r2)
    1e58:	1008d7fa 	srli	r4,r2,31
    1e5c:	2085883a 	add	r2,r4,r2
    1e60:	1005d07a 	srai	r2,r2,1
    1e64:	1885883a 	add	r2,r3,r2
    1e68:	10fffd44 	addi	r3,r2,-11
    1e6c:	e0bffd17 	ldw	r2,-12(fp)
    1e70:	10c00015 	stw	r3,0(r2)
	new->y_pos=current->y_pos + 1;
    1e74:	e0bffe17 	ldw	r2,-8(fp)
    1e78:	10800117 	ldw	r2,4(r2)
    1e7c:	10c00044 	addi	r3,r2,1
    1e80:	e0bffd17 	ldw	r2,-12(fp)
    1e84:	10c00115 	stw	r3,4(r2)
	new->old_x = new->x_pos;
    1e88:	e0bffd17 	ldw	r2,-12(fp)
    1e8c:	10c00017 	ldw	r3,0(r2)
    1e90:	e0bffd17 	ldw	r2,-12(fp)
    1e94:	10c00215 	stw	r3,8(r2)
	new->old_y = new->y_pos;
    1e98:	e0bffd17 	ldw	r2,-12(fp)
    1e9c:	10c00117 	ldw	r3,4(r2)
    1ea0:	e0bffd17 	ldw	r2,-12(fp)
    1ea4:	10c00315 	stw	r3,12(r2)
	new->next = head;
    1ea8:	e0bffd17 	ldw	r2,-12(fp)
    1eac:	e0ffff17 	ldw	r3,-4(fp)
    1eb0:	10c00415 	stw	r3,16(r2)
	return new;
    1eb4:	e0bffd17 	ldw	r2,-12(fp)
}
    1eb8:	e037883a 	mov	sp,fp
    1ebc:	dfc00117 	ldw	ra,4(sp)
    1ec0:	df000017 	ldw	fp,0(sp)
    1ec4:	dec00204 	addi	sp,sp,8
    1ec8:	f800283a 	ret

00001ecc <check_projectiles>:

player_projectile * check_projectiles(player_projectile *curr, enemy *em)
{
    1ecc:	defffb04 	addi	sp,sp,-20
    1ed0:	dfc00415 	stw	ra,16(sp)
    1ed4:	df000315 	stw	fp,12(sp)
    1ed8:	df000304 	addi	fp,sp,12
    1edc:	e13ffe15 	stw	r4,-8(fp)
    1ee0:	e17fff15 	stw	r5,-4(fp)
	if (curr == NULL)
    1ee4:	e0bffe17 	ldw	r2,-8(fp)
    1ee8:	1000021e 	bne	r2,zero,1ef4 <check_projectiles+0x28>
	    return NULL;
    1eec:	0005883a 	mov	r2,zero
    1ef0:	00002606 	br	1f8c <check_projectiles+0xc0>

	  if (curr->y_pos==0 || hits_enemy(curr->x_pos,curr->y_pos,em)==1) {
    1ef4:	e0bffe17 	ldw	r2,-8(fp)
    1ef8:	10800117 	ldw	r2,4(r2)
    1efc:	10000a26 	beq	r2,zero,1f28 <check_projectiles+0x5c>
    1f00:	e0bffe17 	ldw	r2,-8(fp)
    1f04:	10c00017 	ldw	r3,0(r2)
    1f08:	e0bffe17 	ldw	r2,-8(fp)
    1f0c:	10800117 	ldw	r2,4(r2)
    1f10:	1809883a 	mov	r4,r3
    1f14:	100b883a 	mov	r5,r2
    1f18:	e1bfff17 	ldw	r6,-4(fp)
    1f1c:	0001fa00 	call	1fa0 <hits_enemy>
    1f20:	10800058 	cmpnei	r2,r2,1
    1f24:	1000101e 	bne	r2,zero,1f68 <check_projectiles+0x9c>
	    player_projectile *tempNext;
	    tempNext = curr->next;
    1f28:	e0bffe17 	ldw	r2,-8(fp)
    1f2c:	10800417 	ldw	r2,16(r2)
    1f30:	e0bffd15 	stw	r2,-12(fp)
	    renderer(curr->x_pos,curr->y_pos,13,1);//Render shadow
    1f34:	e0bffe17 	ldw	r2,-8(fp)
    1f38:	10c00017 	ldw	r3,0(r2)
    1f3c:	e0bffe17 	ldw	r2,-8(fp)
    1f40:	10800117 	ldw	r2,4(r2)
    1f44:	1809883a 	mov	r4,r3
    1f48:	100b883a 	mov	r5,r2
    1f4c:	01800344 	movi	r6,13
    1f50:	01c00044 	movi	r7,1
    1f54:	00017f00 	call	17f0 <renderer>
	    free(curr);
    1f58:	e13ffe17 	ldw	r4,-8(fp)
    1f5c:	00035480 	call	3548 <free>
	    return tempNext;
    1f60:	e0bffd17 	ldw	r2,-12(fp)
    1f64:	00000906 	br	1f8c <check_projectiles+0xc0>
	  }
	  curr->next = check_projectiles(curr->next, em);
    1f68:	e0bffe17 	ldw	r2,-8(fp)
    1f6c:	10800417 	ldw	r2,16(r2)
    1f70:	1009883a 	mov	r4,r2
    1f74:	e17fff17 	ldw	r5,-4(fp)
    1f78:	0001ecc0 	call	1ecc <check_projectiles>
    1f7c:	1007883a 	mov	r3,r2
    1f80:	e0bffe17 	ldw	r2,-8(fp)
    1f84:	10c00415 	stw	r3,16(r2)
	  return curr;
    1f88:	e0bffe17 	ldw	r2,-8(fp)
}
    1f8c:	e037883a 	mov	sp,fp
    1f90:	dfc00117 	ldw	ra,4(sp)
    1f94:	df000017 	ldw	fp,0(sp)
    1f98:	dec00204 	addi	sp,sp,8
    1f9c:	f800283a 	ret

00001fa0 <hits_enemy>:

int hits_enemy(int x, int y, enemy *em)
{
    1fa0:	defffc04 	addi	sp,sp,-16
    1fa4:	df000315 	stw	fp,12(sp)
    1fa8:	df000304 	addi	fp,sp,12
    1fac:	e13ffd15 	stw	r4,-12(fp)
    1fb0:	e17ffe15 	stw	r5,-8(fp)
    1fb4:	e1bfff15 	stw	r6,-4(fp)
	while(em!=NULL)
    1fb8:	00002d06 	br	2070 <hits_enemy+0xd0>
	{
		if(x>(em->x_pos-23)&&x<(em->x_pos+sizes[em->id][0])&&y>(em->y_pos-32)&&y<(em->y_pos+sizes[em->id][1]))
    1fbc:	e0bfff17 	ldw	r2,-4(fp)
    1fc0:	10800017 	ldw	r2,0(r2)
    1fc4:	10fffa44 	addi	r3,r2,-23
    1fc8:	e0bffd17 	ldw	r2,-12(fp)
    1fcc:	1880250e 	bge	r3,r2,2064 <hits_enemy+0xc4>
    1fd0:	e0bfff17 	ldw	r2,-4(fp)
    1fd4:	10c00017 	ldw	r3,0(r2)
    1fd8:	e0bfff17 	ldw	r2,-4(fp)
    1fdc:	11000317 	ldw	r4,12(r2)
    1fe0:	00800074 	movhi	r2,1
    1fe4:	108c9504 	addi	r2,r2,12884
    1fe8:	200890fa 	slli	r4,r4,3
    1fec:	1105883a 	add	r2,r2,r4
    1ff0:	10800017 	ldw	r2,0(r2)
    1ff4:	1885883a 	add	r2,r3,r2
    1ff8:	e0fffd17 	ldw	r3,-12(fp)
    1ffc:	1880190e 	bge	r3,r2,2064 <hits_enemy+0xc4>
    2000:	e0bfff17 	ldw	r2,-4(fp)
    2004:	10800117 	ldw	r2,4(r2)
    2008:	10fff804 	addi	r3,r2,-32
    200c:	e0bffe17 	ldw	r2,-8(fp)
    2010:	1880140e 	bge	r3,r2,2064 <hits_enemy+0xc4>
    2014:	e0bfff17 	ldw	r2,-4(fp)
    2018:	10c00117 	ldw	r3,4(r2)
    201c:	e0bfff17 	ldw	r2,-4(fp)
    2020:	11000317 	ldw	r4,12(r2)
    2024:	00800074 	movhi	r2,1
    2028:	108c9504 	addi	r2,r2,12884
    202c:	200890fa 	slli	r4,r4,3
    2030:	1105883a 	add	r2,r2,r4
    2034:	10800104 	addi	r2,r2,4
    2038:	10800017 	ldw	r2,0(r2)
    203c:	1885883a 	add	r2,r3,r2
    2040:	e0fffe17 	ldw	r3,-8(fp)
    2044:	1880070e 	bge	r3,r2,2064 <hits_enemy+0xc4>
		{
			em->health--;
    2048:	e0bfff17 	ldw	r2,-4(fp)
    204c:	10800217 	ldw	r2,8(r2)
    2050:	10ffffc4 	addi	r3,r2,-1
    2054:	e0bfff17 	ldw	r2,-4(fp)
    2058:	10c00215 	stw	r3,8(r2)
			return 1;
    205c:	00800044 	movi	r2,1
    2060:	00000606 	br	207c <hits_enemy+0xdc>
		}
		else
		{
			em=em->next;
    2064:	e0bfff17 	ldw	r2,-4(fp)
    2068:	10800617 	ldw	r2,24(r2)
    206c:	e0bfff15 	stw	r2,-4(fp)
	  return curr;
}

int hits_enemy(int x, int y, enemy *em)
{
	while(em!=NULL)
    2070:	e0bfff17 	ldw	r2,-4(fp)
    2074:	103fd11e 	bne	r2,zero,1fbc <__alt_data_end+0xfffac88c>
		else
		{
			em=em->next;
		}
	}
	return 0;
    2078:	0005883a 	mov	r2,zero
}
    207c:	e037883a 	mov	sp,fp
    2080:	df000017 	ldw	fp,0(sp)
    2084:	dec00104 	addi	sp,sp,4
    2088:	f800283a 	ret

0000208c <move_player>:

void move_player(player *current, int x_pos, int y_pos){
    208c:	defff904 	addi	sp,sp,-28
    2090:	dfc00615 	stw	ra,24(sp)
    2094:	df000515 	stw	fp,20(sp)
    2098:	df000504 	addi	fp,sp,20
    209c:	e13ffd15 	stw	r4,-12(fp)
    20a0:	e17ffe15 	stw	r5,-8(fp)
    20a4:	e1bfff15 	stw	r6,-4(fp)
	if(current==NULL)
    20a8:	e0bffd17 	ldw	r2,-12(fp)
    20ac:	1000041e 	bne	r2,zero,20c0 <move_player+0x34>
		{
			printf("players not instantiated");
    20b0:	01000074 	movhi	r4,1
    20b4:	210ba104 	addi	r4,r4,11908
    20b8:	0003d300 	call	3d30 <printf>
    20bc:	00003506 	br	2194 <move_player+0x108>
		}
	else{
		int width = sizes[current->id][0];
    20c0:	e0bffd17 	ldw	r2,-12(fp)
    20c4:	10c00317 	ldw	r3,12(r2)
    20c8:	00800074 	movhi	r2,1
    20cc:	108c9504 	addi	r2,r2,12884
    20d0:	180690fa 	slli	r3,r3,3
    20d4:	10c5883a 	add	r2,r2,r3
    20d8:	10800017 	ldw	r2,0(r2)
    20dc:	e0bffb15 	stw	r2,-20(fp)
		int height = sizes[current->id][1];
    20e0:	e0bffd17 	ldw	r2,-12(fp)
    20e4:	10c00317 	ldw	r3,12(r2)
    20e8:	00800074 	movhi	r2,1
    20ec:	108c9504 	addi	r2,r2,12884
    20f0:	180690fa 	slli	r3,r3,3
    20f4:	10c5883a 	add	r2,r2,r3
    20f8:	10800104 	addi	r2,r2,4
    20fc:	10800017 	ldw	r2,0(r2)
    2100:	e0bffc15 	stw	r2,-16(fp)
		current->x_pos = x_pos;
    2104:	e0bffd17 	ldw	r2,-12(fp)
    2108:	e0fffe17 	ldw	r3,-8(fp)
    210c:	10c00015 	stw	r3,0(r2)
		current->y_pos = y_pos;
    2110:	e0bffd17 	ldw	r2,-12(fp)
    2114:	e0ffff17 	ldw	r3,-4(fp)
    2118:	10c00115 	stw	r3,4(r2)
		if((x_pos + width)> x_bounds)
    211c:	e0fffe17 	ldw	r3,-8(fp)
    2120:	e0bffb17 	ldw	r2,-20(fp)
    2124:	1885883a 	add	r2,r3,r2
    2128:	1080a010 	cmplti	r2,r2,640
    212c:	1000061e 	bne	r2,zero,2148 <move_player+0xbc>
			current->x_pos = x_bounds - width;
    2130:	00c09fc4 	movi	r3,639
    2134:	e0bffb17 	ldw	r2,-20(fp)
    2138:	1887c83a 	sub	r3,r3,r2
    213c:	e0bffd17 	ldw	r2,-12(fp)
    2140:	10c00015 	stw	r3,0(r2)
    2144:	00000406 	br	2158 <move_player+0xcc>
		else if(x_pos < 0)
    2148:	e0bffe17 	ldw	r2,-8(fp)
    214c:	1000020e 	bge	r2,zero,2158 <move_player+0xcc>
		{
			current->x_pos = 0;
    2150:	e0bffd17 	ldw	r2,-12(fp)
    2154:	10000015 	stw	zero,0(r2)
		}
		if((y_pos + height) > y_bounds)
    2158:	e0ffff17 	ldw	r3,-4(fp)
    215c:	e0bffc17 	ldw	r2,-16(fp)
    2160:	1885883a 	add	r2,r3,r2
    2164:	10807810 	cmplti	r2,r2,480
    2168:	1000061e 	bne	r2,zero,2184 <move_player+0xf8>
			current->y_pos = y_bounds - height;
    216c:	00c077c4 	movi	r3,479
    2170:	e0bffc17 	ldw	r2,-16(fp)
    2174:	1887c83a 	sub	r3,r3,r2
    2178:	e0bffd17 	ldw	r2,-12(fp)
    217c:	10c00115 	stw	r3,4(r2)
    2180:	00000406 	br	2194 <move_player+0x108>
		else if(y_pos < 0)
    2184:	e0bfff17 	ldw	r2,-4(fp)
    2188:	1000020e 	bge	r2,zero,2194 <move_player+0x108>
		{
			current->y_pos = 0;
    218c:	e0bffd17 	ldw	r2,-12(fp)
    2190:	10000115 	stw	zero,4(r2)
		}
	}
}
    2194:	e037883a 	mov	sp,fp
    2198:	dfc00117 	ldw	ra,4(sp)
    219c:	df000017 	ldw	fp,0(sp)
    21a0:	dec00204 	addi	sp,sp,8
    21a4:	f800283a 	ret

000021a8 <move_enemy>:

void move_enemy(enemy *current, int x_pos, int y_pos){
    21a8:	defff904 	addi	sp,sp,-28
    21ac:	dfc00615 	stw	ra,24(sp)
    21b0:	df000515 	stw	fp,20(sp)
    21b4:	df000504 	addi	fp,sp,20
    21b8:	e13ffd15 	stw	r4,-12(fp)
    21bc:	e17ffe15 	stw	r5,-8(fp)
    21c0:	e1bfff15 	stw	r6,-4(fp)
	if(current==NULL)
    21c4:	e0bffd17 	ldw	r2,-12(fp)
    21c8:	1000041e 	bne	r2,zero,21dc <move_enemy+0x34>
		{
			printf("players not instantiated");
    21cc:	01000074 	movhi	r4,1
    21d0:	210ba104 	addi	r4,r4,11908
    21d4:	0003d300 	call	3d30 <printf>
    21d8:	00003506 	br	22b0 <move_enemy+0x108>
		}
	else{
		int width = sizes[current->id][0];
    21dc:	e0bffd17 	ldw	r2,-12(fp)
    21e0:	10c00317 	ldw	r3,12(r2)
    21e4:	00800074 	movhi	r2,1
    21e8:	108c9504 	addi	r2,r2,12884
    21ec:	180690fa 	slli	r3,r3,3
    21f0:	10c5883a 	add	r2,r2,r3
    21f4:	10800017 	ldw	r2,0(r2)
    21f8:	e0bffb15 	stw	r2,-20(fp)
		int height = sizes[current->id][1];
    21fc:	e0bffd17 	ldw	r2,-12(fp)
    2200:	10c00317 	ldw	r3,12(r2)
    2204:	00800074 	movhi	r2,1
    2208:	108c9504 	addi	r2,r2,12884
    220c:	180690fa 	slli	r3,r3,3
    2210:	10c5883a 	add	r2,r2,r3
    2214:	10800104 	addi	r2,r2,4
    2218:	10800017 	ldw	r2,0(r2)
    221c:	e0bffc15 	stw	r2,-16(fp)
		current->x_pos = x_pos;
    2220:	e0bffd17 	ldw	r2,-12(fp)
    2224:	e0fffe17 	ldw	r3,-8(fp)
    2228:	10c00015 	stw	r3,0(r2)
		current->y_pos = y_pos;
    222c:	e0bffd17 	ldw	r2,-12(fp)
    2230:	e0ffff17 	ldw	r3,-4(fp)
    2234:	10c00115 	stw	r3,4(r2)
		if((x_pos + width)> x_bounds)
    2238:	e0fffe17 	ldw	r3,-8(fp)
    223c:	e0bffb17 	ldw	r2,-20(fp)
    2240:	1885883a 	add	r2,r3,r2
    2244:	1080a010 	cmplti	r2,r2,640
    2248:	1000061e 	bne	r2,zero,2264 <move_enemy+0xbc>
			current->x_pos = x_bounds - width;
    224c:	00c09fc4 	movi	r3,639
    2250:	e0bffb17 	ldw	r2,-20(fp)
    2254:	1887c83a 	sub	r3,r3,r2
    2258:	e0bffd17 	ldw	r2,-12(fp)
    225c:	10c00015 	stw	r3,0(r2)
    2260:	00000406 	br	2274 <move_enemy+0xcc>
		else if(x_pos < 0)
    2264:	e0bffe17 	ldw	r2,-8(fp)
    2268:	1000020e 	bge	r2,zero,2274 <move_enemy+0xcc>
		{
			current->x_pos = 0;
    226c:	e0bffd17 	ldw	r2,-12(fp)
    2270:	10000015 	stw	zero,0(r2)
		}
		if((y_pos + height) > y_bounds)
    2274:	e0ffff17 	ldw	r3,-4(fp)
    2278:	e0bffc17 	ldw	r2,-16(fp)
    227c:	1885883a 	add	r2,r3,r2
    2280:	10807810 	cmplti	r2,r2,480
    2284:	1000061e 	bne	r2,zero,22a0 <move_enemy+0xf8>
			current->y_pos = y_bounds - height;
    2288:	00c077c4 	movi	r3,479
    228c:	e0bffc17 	ldw	r2,-16(fp)
    2290:	1887c83a 	sub	r3,r3,r2
    2294:	e0bffd17 	ldw	r2,-12(fp)
    2298:	10c00115 	stw	r3,4(r2)
    229c:	00000406 	br	22b0 <move_enemy+0x108>
		else if(y_pos < 0)
    22a0:	e0bfff17 	ldw	r2,-4(fp)
    22a4:	1000020e 	bge	r2,zero,22b0 <move_enemy+0x108>
		{
			current->y_pos = 0;
    22a8:	e0bffd17 	ldw	r2,-12(fp)
    22ac:	10000115 	stw	zero,4(r2)
		}
	}
}
    22b0:	e037883a 	mov	sp,fp
    22b4:	dfc00117 	ldw	ra,4(sp)
    22b8:	df000017 	ldw	fp,0(sp)
    22bc:	dec00204 	addi	sp,sp,8
    22c0:	f800283a 	ret

000022c4 <UsbWrite>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbWrite(alt_u16 Address, alt_u16 Data)
{
    22c4:	defffc04 	addi	sp,sp,-16
    22c8:	dfc00315 	stw	ra,12(sp)
    22cc:	df000215 	stw	fp,8(sp)
    22d0:	df000204 	addi	fp,sp,8
    22d4:	2007883a 	mov	r3,r4
    22d8:	2805883a 	mov	r2,r5
    22dc:	e0fffe0d 	sth	r3,-8(fp)
    22e0:	e0bfff0d 	sth	r2,-4(fp)
	IO_write(HPI_ADDR_PORT, Address);
    22e4:	e0bffe0b 	ldhu	r2,-8(fp)
    22e8:	01000084 	movi	r4,2
    22ec:	100b883a 	mov	r5,r2
    22f0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA_PORT, Data);
    22f4:	e0bfff0b 	ldhu	r2,-4(fp)
    22f8:	0009883a 	mov	r4,zero
    22fc:	100b883a 	mov	r5,r2
    2300:	00002c80 	call	2c8 <IO_write>
}
    2304:	e037883a 	mov	sp,fp
    2308:	dfc00117 	ldw	ra,4(sp)
    230c:	df000017 	ldw	fp,0(sp)
    2310:	dec00204 	addi	sp,sp,8
    2314:	f800283a 	ret

00002318 <UsbRead>:
 *
 * @note     None
 *
 ******************************************************************************/
alt_u16 UsbRead(alt_u16 Address)
{
    2318:	defffd04 	addi	sp,sp,-12
    231c:	dfc00215 	stw	ra,8(sp)
    2320:	df000115 	stw	fp,4(sp)
    2324:	df000104 	addi	fp,sp,4
    2328:	2005883a 	mov	r2,r4
    232c:	e0bfff0d 	sth	r2,-4(fp)
	IO_write(HPI_ADDR_PORT, Address);
    2330:	e0bfff0b 	ldhu	r2,-4(fp)
    2334:	01000084 	movi	r4,2
    2338:	100b883a 	mov	r5,r2
    233c:	00002c80 	call	2c8 <IO_write>
	return IO_read(HPI_DATA_PORT);
    2340:	0009883a 	mov	r4,zero
    2344:	00003300 	call	330 <IO_read>
}
    2348:	e037883a 	mov	sp,fp
    234c:	dfc00117 	ldw	ra,4(sp)
    2350:	df000017 	ldw	fp,0(sp)
    2354:	dec00204 	addi	sp,sp,8
    2358:	f800283a 	ret

0000235c <UsbSoftReset>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbSoftReset()
{
    235c:	defffe04 	addi	sp,sp,-8
    2360:	dfc00115 	stw	ra,4(sp)
    2364:	df000015 	stw	fp,0(sp)
    2368:	d839883a 	mov	fp,sp
	//XIo_Out16(USB_MAILBOX, COMM_RESET);
	IO_write(HPI_MAILBOX,COMM_RESET); //COMM_JUMP2CODE
    236c:	01000044 	movi	r4,1
    2370:	017e9414 	movui	r5,64080
    2374:	00002c80 	call	2c8 <IO_write>
	usleep(100000);
    2378:	010000b4 	movhi	r4,2
    237c:	2121a804 	addi	r4,r4,-31072
    2380:	00107c00 	call	107c0 <usleep>
	printf("[USB INIT]:reset finished!\n");
    2384:	01000074 	movhi	r4,1
    2388:	210bb804 	addi	r4,r4,12000
    238c:	0003e240 	call	3e24 <puts>

	usleep(500000);
    2390:	01000234 	movhi	r4,8
    2394:	21284804 	addi	r4,r4,-24288
    2398:	00107c00 	call	107c0 <usleep>
	printf("[USB INIT]:Clear up the interrupt\r\n");
    239c:	01000074 	movhi	r4,1
    23a0:	210bbf04 	addi	r4,r4,12028
    23a4:	0003e240 	call	3e24 <puts>
	IO_read(HPI_MAILBOX);
    23a8:	01000044 	movi	r4,1
    23ac:	00003300 	call	330 <IO_read>
	IO_read(HPI_STATUS);
    23b0:	010000c4 	movi	r4,3
    23b4:	00003300 	call	330 <IO_read>

	// Had to add the write due to a bug in BIOS where they overwrite
	// the mailbox after initialization with garbage.  The read clears
	// any pending interrupts.
	UsbRead (HPI_SIE1_MSG_ADR);
    23b8:	01005104 	movi	r4,324
    23bc:	00023180 	call	2318 <UsbRead>
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
    23c0:	01005104 	movi	r4,324
    23c4:	000b883a 	mov	r5,zero
    23c8:	00022c40 	call	22c4 <UsbWrite>
	UsbRead (HPI_SIE2_MSG_ADR);
    23cc:	01005204 	movi	r4,328
    23d0:	00023180 	call	2318 <UsbRead>
	UsbWrite (HPI_SIE2_MSG_ADR, 0);
    23d4:	01005204 	movi	r4,328
    23d8:	000b883a 	mov	r5,zero
    23dc:	00022c40 	call	22c4 <UsbWrite>


	UsbWrite (HOST1_STAT_REG, 0xFFFF);
    23e0:	01302414 	movui	r4,49296
    23e4:	017fffd4 	movui	r5,65535
    23e8:	00022c40 	call	22c4 <UsbWrite>
	UsbWrite (HOST2_STAT_REG, 0xFFFF);
    23ec:	01302c14 	movui	r4,49328
    23f0:	017fffd4 	movui	r5,65535
    23f4:	00022c40 	call	22c4 <UsbWrite>
}
    23f8:	e037883a 	mov	sp,fp
    23fc:	dfc00117 	ldw	ra,4(sp)
    2400:	df000017 	ldw	fp,0(sp)
    2404:	dec00204 	addi	sp,sp,8
    2408:	f800283a 	ret

0000240c <UsbSetAddress>:


void UsbSetAddress()
{
    240c:	defffe04 	addi	sp,sp,-8
    2410:	dfc00115 	stw	ra,4(sp)
    2414:	df000015 	stw	fp,0(sp)
    2418:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    241c:	01000084 	movi	r4,2
    2420:	01414004 	movi	r5,1280
    2424:	00002c80 	call	2c8 <IO_write>
	// TD #1: 6 writes
	IO_write(HPI_DATA,0x050C);
    2428:	0009883a 	mov	r4,zero
    242c:	01414304 	movi	r5,1292
    2430:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    2434:	0009883a 	mov	r4,zero
    2438:	01400204 	movi	r5,8
    243c:	00002c80 	call	2c8 <IO_write>
	// TASK: Complete with 4 more IOWR functions
	IO_write(HPI_DATA,0x00D0);
    2440:	0009883a 	mov	r4,zero
    2444:	01403404 	movi	r5,208
    2448:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);
    244c:	0009883a 	mov	r4,zero
    2450:	01400044 	movi	r5,1
    2454:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    2458:	0009883a 	mov	r4,zero
    245c:	014004c4 	movi	r5,19
    2460:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0514);
    2464:	0009883a 	mov	r4,zero
    2468:	01414504 	movi	r5,1300
    246c:	00002c80 	call	2c8 <IO_write>
	// TD #2: 4 writes
	// TASK: Complete with 4 IOWR functions
	IO_write(HPI_DATA,0x0500);
    2470:	0009883a 	mov	r4,zero
    2474:	01414004 	movi	r5,1280
    2478:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0002);
    247c:	0009883a 	mov	r4,zero
    2480:	01400084 	movi	r5,2
    2484:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    2488:	0009883a 	mov	r4,zero
    248c:	000b883a 	mov	r5,zero
    2490:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    2494:	0009883a 	mov	r4,zero
    2498:	000b883a 	mov	r5,zero
    249c:	00002c80 	call	2c8 <IO_write>
	// TD #3: 6 writes
	// TASK: Complete with 6 IOWR functions
	IO_write(HPI_DATA,0x0000); //
    24a0:	0009883a 	mov	r4,zero
    24a4:	000b883a 	mov	r5,zero
    24a8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//
    24ac:	0009883a 	mov	r4,zero
    24b0:	000b883a 	mov	r5,zero
    24b4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0090);//
    24b8:	0009883a 	mov	r4,zero
    24bc:	01402404 	movi	r5,144
    24c0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);
    24c4:	0009883a 	mov	r4,zero
    24c8:	01401044 	movi	r5,65
    24cc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    24d0:	0009883a 	mov	r4,zero
    24d4:	014004c4 	movi	r5,19
    24d8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    24dc:	0009883a 	mov	r4,zero
    24e0:	000b883a 	mov	r5,zero
    24e4:	00002c80 	call	2c8 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    24e8:	01006c04 	movi	r4,432
    24ec:	01414004 	movi	r5,1280
    24f0:	00022c40 	call	22c4 <UsbWrite>
}
    24f4:	e037883a 	mov	sp,fp
    24f8:	dfc00117 	ldw	ra,4(sp)
    24fc:	df000017 	ldw	fp,0(sp)
    2500:	dec00204 	addi	sp,sp,8
    2504:	f800283a 	ret

00002508 <UsbGetDeviceDesc1>:


void UsbGetDeviceDesc1()
{
    2508:	defffe04 	addi	sp,sp,-8
    250c:	dfc00115 	stw	ra,4(sp)
    2510:	df000015 	stw	fp,0(sp)
    2514:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    2518:	01000084 	movi	r4,2
    251c:	01414004 	movi	r5,1280
    2520:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x050C);
    2524:	0009883a 	mov	r4,zero
    2528:	01414304 	movi	r5,1292
    252c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    2530:	0009883a 	mov	r4,zero
    2534:	01400204 	movi	r5,8
    2538:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    253c:	0009883a 	mov	r4,zero
    2540:	0140b404 	movi	r5,720
    2544:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);
    2548:	0009883a 	mov	r4,zero
    254c:	01400044 	movi	r5,1
    2550:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    2554:	0009883a 	mov	r4,zero
    2558:	014004c4 	movi	r5,19
    255c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0514);
    2560:	0009883a 	mov	r4,zero
    2564:	01414504 	movi	r5,1300
    2568:	00002c80 	call	2c8 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
    256c:	0009883a 	mov	r4,zero
    2570:	0141a004 	movi	r5,1664
    2574:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0100); //device 0x01
    2578:	0009883a 	mov	r4,zero
    257c:	01404004 	movi	r5,256
    2580:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    2584:	0009883a 	mov	r4,zero
    2588:	000b883a 	mov	r5,zero
    258c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);
    2590:	0009883a 	mov	r4,zero
    2594:	01400204 	movi	r5,8
    2598:	00002c80 	call	2c8 <IO_write>

	//data phase IN
	IO_write(HPI_DATA,0x052C); //
    259c:	0009883a 	mov	r4,zero
    25a0:	01414b04 	movi	r5,1324
    25a4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//
    25a8:	0009883a 	mov	r4,zero
    25ac:	01400204 	movi	r5,8
    25b0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//
    25b4:	0009883a 	mov	r4,zero
    25b8:	0140a404 	movi	r5,656
    25bc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);
    25c0:	0009883a 	mov	r4,zero
    25c4:	01401044 	movi	r5,65
    25c8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    25cc:	0009883a 	mov	r4,zero
    25d0:	014004c4 	movi	r5,19
    25d4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0520);
    25d8:	0009883a 	mov	r4,zero
    25dc:	01414804 	movi	r5,1312
    25e0:	00002c80 	call	2c8 <IO_write>

	//    //status phase
	IO_write(HPI_DATA,0x0000); //don't care
    25e4:	0009883a 	mov	r4,zero
    25e8:	000b883a 	mov	r5,zero
    25ec:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
    25f0:	0009883a 	mov	r4,zero
    25f4:	000b883a 	mov	r5,zero
    25f8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0210);//device address
    25fc:	0009883a 	mov	r4,zero
    2600:	01408404 	movi	r5,528
    2604:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);
    2608:	0009883a 	mov	r4,zero
    260c:	01401044 	movi	r5,65
    2610:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    2614:	0009883a 	mov	r4,zero
    2618:	014004c4 	movi	r5,19
    261c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    2620:	0009883a 	mov	r4,zero
    2624:	000b883a 	mov	r5,zero
    2628:	00002c80 	call	2c8 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    262c:	01006c04 	movi	r4,432
    2630:	01414004 	movi	r5,1280
    2634:	00022c40 	call	22c4 <UsbWrite>
}
    2638:	e037883a 	mov	sp,fp
    263c:	dfc00117 	ldw	ra,4(sp)
    2640:	df000017 	ldw	fp,0(sp)
    2644:	dec00204 	addi	sp,sp,8
    2648:	f800283a 	ret

0000264c <UsbGetDeviceDesc2>:

void UsbGetDeviceDesc2()
{
    264c:	defffe04 	addi	sp,sp,-8
    2650:	dfc00115 	stw	ra,4(sp)
    2654:	df000015 	stw	fp,0(sp)
    2658:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    265c:	01000084 	movi	r4,2
    2660:	01414004 	movi	r5,1280
    2664:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x050C);
    2668:	0009883a 	mov	r4,zero
    266c:	01414304 	movi	r5,1292
    2670:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    2674:	0009883a 	mov	r4,zero
    2678:	01400204 	movi	r5,8
    267c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    2680:	0009883a 	mov	r4,zero
    2684:	0140b404 	movi	r5,720
    2688:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);
    268c:	0009883a 	mov	r4,zero
    2690:	01400044 	movi	r5,1
    2694:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    2698:	0009883a 	mov	r4,zero
    269c:	014004c4 	movi	r5,19
    26a0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0514);
    26a4:	0009883a 	mov	r4,zero
    26a8:	01414504 	movi	r5,1300
    26ac:	00002c80 	call	2c8 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
    26b0:	0009883a 	mov	r4,zero
    26b4:	0141a004 	movi	r5,1664
    26b8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0100);//e //device 0x01
    26bc:	0009883a 	mov	r4,zero
    26c0:	01404004 	movi	r5,256
    26c4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    26c8:	0009883a 	mov	r4,zero
    26cc:	000b883a 	mov	r5,zero
    26d0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0012);//2
    26d4:	0009883a 	mov	r4,zero
    26d8:	01400484 	movi	r5,18
    26dc:	00002c80 	call	2c8 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
    26e0:	0009883a 	mov	r4,zero
    26e4:	01415104 	movi	r5,1348
    26e8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    26ec:	0009883a 	mov	r4,zero
    26f0:	01400204 	movi	r5,8
    26f4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    26f8:	0009883a 	mov	r4,zero
    26fc:	0140a404 	movi	r5,656
    2700:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    2704:	0009883a 	mov	r4,zero
    2708:	01401044 	movi	r5,65
    270c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    2710:	0009883a 	mov	r4,zero
    2714:	014004c4 	movi	r5,19
    2718:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    271c:	0009883a 	mov	r4,zero
    2720:	01414804 	movi	r5,1312
    2724:	00002c80 	call	2c8 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
    2728:	0009883a 	mov	r4,zero
    272c:	01415304 	movi	r5,1356
    2730:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
    2734:	0009883a 	mov	r4,zero
    2738:	01400204 	movi	r5,8
    273c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    2740:	0009883a 	mov	r4,zero
    2744:	0140a404 	movi	r5,656
    2748:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);//6
    274c:	0009883a 	mov	r4,zero
    2750:	01400044 	movi	r5,1
    2754:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    2758:	0009883a 	mov	r4,zero
    275c:	014004c4 	movi	r5,19
    2760:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
    2764:	0009883a 	mov	r4,zero
    2768:	01414b04 	movi	r5,1324
    276c:	00002c80 	call	2c8 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0554); //c
    2770:	0009883a 	mov	r4,zero
    2774:	01415504 	movi	r5,1364
    2778:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0002);//e
    277c:	0009883a 	mov	r4,zero
    2780:	01400084 	movi	r5,2
    2784:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
    2788:	0009883a 	mov	r4,zero
    278c:	0140a404 	movi	r5,656
    2790:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    2794:	0009883a 	mov	r4,zero
    2798:	01401044 	movi	r5,65
    279c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    27a0:	0009883a 	mov	r4,zero
    27a4:	014004c4 	movi	r5,19
    27a8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
    27ac:	0009883a 	mov	r4,zero
    27b0:	01414e04 	movi	r5,1336
    27b4:	00002c80 	call	2c8 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //538
    27b8:	0009883a 	mov	r4,zero
    27bc:	000b883a 	mov	r5,zero
    27c0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
    27c4:	0009883a 	mov	r4,zero
    27c8:	000b883a 	mov	r5,zero
    27cc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0210);//c
    27d0:	0009883a 	mov	r4,zero
    27d4:	01408404 	movi	r5,528
    27d8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//e
    27dc:	0009883a 	mov	r4,zero
    27e0:	01401044 	movi	r5,65
    27e4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
    27e8:	0009883a 	mov	r4,zero
    27ec:	014004c4 	movi	r5,19
    27f0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
    27f4:	0009883a 	mov	r4,zero
    27f8:	000b883a 	mov	r5,zero
    27fc:	00002c80 	call	2c8 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    2800:	01006c04 	movi	r4,432
    2804:	01414004 	movi	r5,1280
    2808:	00022c40 	call	22c4 <UsbWrite>
}
    280c:	e037883a 	mov	sp,fp
    2810:	dfc00117 	ldw	ra,4(sp)
    2814:	df000017 	ldw	fp,0(sp)
    2818:	dec00204 	addi	sp,sp,8
    281c:	f800283a 	ret

00002820 <UsbGetConfigDesc1>:


void UsbGetConfigDesc1()
{
    2820:	defffe04 	addi	sp,sp,-8
    2824:	dfc00115 	stw	ra,4(sp)
    2828:	df000015 	stw	fp,0(sp)
    282c:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    2830:	01000084 	movi	r4,2
    2834:	01414004 	movi	r5,1280
    2838:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x050C);
    283c:	0009883a 	mov	r4,zero
    2840:	01414304 	movi	r5,1292
    2844:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    2848:	0009883a 	mov	r4,zero
    284c:	01400204 	movi	r5,8
    2850:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    2854:	0009883a 	mov	r4,zero
    2858:	0140b404 	movi	r5,720
    285c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);
    2860:	0009883a 	mov	r4,zero
    2864:	01400044 	movi	r5,1
    2868:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    286c:	0009883a 	mov	r4,zero
    2870:	014004c4 	movi	r5,19
    2874:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0514);
    2878:	0009883a 	mov	r4,zero
    287c:	01414504 	movi	r5,1300
    2880:	00002c80 	call	2c8 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
    2884:	0009883a 	mov	r4,zero
    2888:	0141a004 	movi	r5,1664
    288c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
    2890:	0009883a 	mov	r4,zero
    2894:	01408004 	movi	r5,512
    2898:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    289c:	0009883a 	mov	r4,zero
    28a0:	000b883a 	mov	r5,zero
    28a4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0009);//2
    28a8:	0009883a 	mov	r4,zero
    28ac:	01400244 	movi	r5,9
    28b0:	00002c80 	call	2c8 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
    28b4:	0009883a 	mov	r4,zero
    28b8:	01415104 	movi	r5,1348
    28bc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    28c0:	0009883a 	mov	r4,zero
    28c4:	01400204 	movi	r5,8
    28c8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    28cc:	0009883a 	mov	r4,zero
    28d0:	0140a404 	movi	r5,656
    28d4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    28d8:	0009883a 	mov	r4,zero
    28dc:	01401044 	movi	r5,65
    28e0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    28e4:	0009883a 	mov	r4,zero
    28e8:	014004c4 	movi	r5,19
    28ec:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    28f0:	0009883a 	mov	r4,zero
    28f4:	01414804 	movi	r5,1312
    28f8:	00002c80 	call	2c8 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
    28fc:	0009883a 	mov	r4,zero
    2900:	01415304 	movi	r5,1356
    2904:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);//2
    2908:	0009883a 	mov	r4,zero
    290c:	01400044 	movi	r5,1
    2910:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    2914:	0009883a 	mov	r4,zero
    2918:	0140a404 	movi	r5,656
    291c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
    2920:	0009883a 	mov	r4,zero
    2924:	01400044 	movi	r5,1
    2928:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    292c:	0009883a 	mov	r4,zero
    2930:	014004c4 	movi	r5,19
    2934:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
    2938:	0009883a 	mov	r4,zero
    293c:	01414b04 	movi	r5,1324
    2940:	00002c80 	call	2c8 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
    2944:	0009883a 	mov	r4,zero
    2948:	000b883a 	mov	r5,zero
    294c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
    2950:	0009883a 	mov	r4,zero
    2954:	000b883a 	mov	r5,zero
    2958:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
    295c:	0009883a 	mov	r4,zero
    2960:	01408404 	movi	r5,528
    2964:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    2968:	0009883a 	mov	r4,zero
    296c:	01401044 	movi	r5,65
    2970:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    2974:	0009883a 	mov	r4,zero
    2978:	014004c4 	movi	r5,19
    297c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
    2980:	0009883a 	mov	r4,zero
    2984:	000b883a 	mov	r5,zero
    2988:	00002c80 	call	2c8 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    298c:	01006c04 	movi	r4,432
    2990:	01414004 	movi	r5,1280
    2994:	00022c40 	call	22c4 <UsbWrite>
}
    2998:	e037883a 	mov	sp,fp
    299c:	dfc00117 	ldw	ra,4(sp)
    29a0:	df000017 	ldw	fp,0(sp)
    29a4:	dec00204 	addi	sp,sp,8
    29a8:	f800283a 	ret

000029ac <UsbGetConfigDesc2>:


void UsbGetConfigDesc2()
{
    29ac:	defffe04 	addi	sp,sp,-8
    29b0:	dfc00115 	stw	ra,4(sp)
    29b4:	df000015 	stw	fp,0(sp)
    29b8:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    29bc:	01000084 	movi	r4,2
    29c0:	01414004 	movi	r5,1280
    29c4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x050C);
    29c8:	0009883a 	mov	r4,zero
    29cc:	01414304 	movi	r5,1292
    29d0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    29d4:	0009883a 	mov	r4,zero
    29d8:	01400204 	movi	r5,8
    29dc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    29e0:	0009883a 	mov	r4,zero
    29e4:	0140b404 	movi	r5,720
    29e8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);
    29ec:	0009883a 	mov	r4,zero
    29f0:	01400044 	movi	r5,1
    29f4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    29f8:	0009883a 	mov	r4,zero
    29fc:	014004c4 	movi	r5,19
    2a00:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0514);
    2a04:	0009883a 	mov	r4,zero
    2a08:	01414504 	movi	r5,1300
    2a0c:	00002c80 	call	2c8 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
    2a10:	0009883a 	mov	r4,zero
    2a14:	0141a004 	movi	r5,1664
    2a18:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
    2a1c:	0009883a 	mov	r4,zero
    2a20:	01408004 	movi	r5,512
    2a24:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    2a28:	0009883a 	mov	r4,zero
    2a2c:	000b883a 	mov	r5,zero
    2a30:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x00FF);//2
    2a34:	0009883a 	mov	r4,zero
    2a38:	01403fc4 	movi	r5,255
    2a3c:	00002c80 	call	2c8 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x055c); //514
    2a40:	0009883a 	mov	r4,zero
    2a44:	01415704 	movi	r5,1372
    2a48:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    2a4c:	0009883a 	mov	r4,zero
    2a50:	01400204 	movi	r5,8
    2a54:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    2a58:	0009883a 	mov	r4,zero
    2a5c:	0140a404 	movi	r5,656
    2a60:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    2a64:	0009883a 	mov	r4,zero
    2a68:	01401044 	movi	r5,65
    2a6c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    2a70:	0009883a 	mov	r4,zero
    2a74:	014004c4 	movi	r5,19
    2a78:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    2a7c:	0009883a 	mov	r4,zero
    2a80:	01414804 	movi	r5,1312
    2a84:	00002c80 	call	2c8 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0564); //520
    2a88:	0009883a 	mov	r4,zero
    2a8c:	01415904 	movi	r5,1380
    2a90:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
    2a94:	0009883a 	mov	r4,zero
    2a98:	01400204 	movi	r5,8
    2a9c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    2aa0:	0009883a 	mov	r4,zero
    2aa4:	0140a404 	movi	r5,656
    2aa8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
    2aac:	0009883a 	mov	r4,zero
    2ab0:	01400044 	movi	r5,1
    2ab4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    2ab8:	0009883a 	mov	r4,zero
    2abc:	014004c4 	movi	r5,19
    2ac0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
    2ac4:	0009883a 	mov	r4,zero
    2ac8:	01414b04 	movi	r5,1324
    2acc:	00002c80 	call	2c8 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x056c); //52c
    2ad0:	0009883a 	mov	r4,zero
    2ad4:	01415b04 	movi	r5,1388
    2ad8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
    2adc:	0009883a 	mov	r4,zero
    2ae0:	01400204 	movi	r5,8
    2ae4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
    2ae8:	0009883a 	mov	r4,zero
    2aec:	0140a404 	movi	r5,656
    2af0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    2af4:	0009883a 	mov	r4,zero
    2af8:	01401044 	movi	r5,65
    2afc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    2b00:	0009883a 	mov	r4,zero
    2b04:	014004c4 	movi	r5,19
    2b08:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
    2b0c:	0009883a 	mov	r4,zero
    2b10:	01414e04 	movi	r5,1336
    2b14:	00002c80 	call	2c8 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0574); //538
    2b18:	0009883a 	mov	r4,zero
    2b1c:	01415d04 	movi	r5,1396
    2b20:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
    2b24:	0009883a 	mov	r4,zero
    2b28:	01400204 	movi	r5,8
    2b2c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
    2b30:	0009883a 	mov	r4,zero
    2b34:	0140a404 	movi	r5,656
    2b38:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
    2b3c:	0009883a 	mov	r4,zero
    2b40:	01400044 	movi	r5,1
    2b44:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
    2b48:	0009883a 	mov	r4,zero
    2b4c:	014004c4 	movi	r5,19
    2b50:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
    2b54:	0009883a 	mov	r4,zero
    2b58:	01415104 	movi	r5,1348
    2b5c:	00002c80 	call	2c8 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x057c); //544
    2b60:	0009883a 	mov	r4,zero
    2b64:	01415f04 	movi	r5,1404
    2b68:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0002);//6
    2b6c:	0009883a 	mov	r4,zero
    2b70:	01400084 	movi	r5,2
    2b74:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    2b78:	0009883a 	mov	r4,zero
    2b7c:	0140a404 	movi	r5,656
    2b80:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
    2b84:	0009883a 	mov	r4,zero
    2b88:	01401044 	movi	r5,65
    2b8c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    2b90:	0009883a 	mov	r4,zero
    2b94:	014004c4 	movi	r5,19
    2b98:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
    2b9c:	0009883a 	mov	r4,zero
    2ba0:	01415404 	movi	r5,1360
    2ba4:	00002c80 	call	2c8 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //550
    2ba8:	0009883a 	mov	r4,zero
    2bac:	000b883a 	mov	r5,zero
    2bb0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
    2bb4:	0009883a 	mov	r4,zero
    2bb8:	000b883a 	mov	r5,zero
    2bbc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0210);//4
    2bc0:	0009883a 	mov	r4,zero
    2bc4:	01408404 	movi	r5,528
    2bc8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//6
    2bcc:	0009883a 	mov	r4,zero
    2bd0:	01401044 	movi	r5,65
    2bd4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    2bd8:	0009883a 	mov	r4,zero
    2bdc:	014004c4 	movi	r5,19
    2be0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
    2be4:	0009883a 	mov	r4,zero
    2be8:	000b883a 	mov	r5,zero
    2bec:	00002c80 	call	2c8 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    2bf0:	01006c04 	movi	r4,432
    2bf4:	01414004 	movi	r5,1280
    2bf8:	00022c40 	call	22c4 <UsbWrite>
}
    2bfc:	e037883a 	mov	sp,fp
    2c00:	dfc00117 	ldw	ra,4(sp)
    2c04:	df000017 	ldw	fp,0(sp)
    2c08:	dec00204 	addi	sp,sp,8
    2c0c:	f800283a 	ret

00002c10 <UsbSetConfig>:

void UsbSetConfig()
{
    2c10:	defffe04 	addi	sp,sp,-8
    2c14:	dfc00115 	stw	ra,4(sp)
    2c18:	df000015 	stw	fp,0(sp)
    2c1c:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    2c20:	01000084 	movi	r4,2
    2c24:	01414004 	movi	r5,1280
    2c28:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x050C);
    2c2c:	0009883a 	mov	r4,zero
    2c30:	01414304 	movi	r5,1292
    2c34:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    2c38:	0009883a 	mov	r4,zero
    2c3c:	01400204 	movi	r5,8
    2c40:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
    2c44:	0009883a 	mov	r4,zero
    2c48:	0140b404 	movi	r5,720
    2c4c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);
    2c50:	0009883a 	mov	r4,zero
    2c54:	01400044 	movi	r5,1
    2c58:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    2c5c:	0009883a 	mov	r4,zero
    2c60:	014004c4 	movi	r5,19
    2c64:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0514);
    2c68:	0009883a 	mov	r4,zero
    2c6c:	01414504 	movi	r5,1300
    2c70:	00002c80 	call	2c8 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0900);
    2c74:	0009883a 	mov	r4,zero
    2c78:	01424004 	movi	r5,2304
    2c7c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);//device address
    2c80:	0009883a 	mov	r4,zero
    2c84:	01400044 	movi	r5,1
    2c88:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    2c8c:	0009883a 	mov	r4,zero
    2c90:	000b883a 	mov	r5,zero
    2c94:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    2c98:	0009883a 	mov	r4,zero
    2c9c:	000b883a 	mov	r5,zero
    2ca0:	00002c80 	call	2c8 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
    2ca4:	0009883a 	mov	r4,zero
    2ca8:	000b883a 	mov	r5,zero
    2cac:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
    2cb0:	0009883a 	mov	r4,zero
    2cb4:	000b883a 	mov	r5,zero
    2cb8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
    2cbc:	0009883a 	mov	r4,zero
    2cc0:	0140a404 	movi	r5,656
    2cc4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
    2cc8:	0009883a 	mov	r4,zero
    2ccc:	01401044 	movi	r5,65
    2cd0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    2cd4:	0009883a 	mov	r4,zero
    2cd8:	014004c4 	movi	r5,19
    2cdc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    2ce0:	0009883a 	mov	r4,zero
    2ce4:	000b883a 	mov	r5,zero
    2ce8:	00002c80 	call	2c8 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    2cec:	01006c04 	movi	r4,432
    2cf0:	01414004 	movi	r5,1280
    2cf4:	00022c40 	call	22c4 <UsbWrite>

}
    2cf8:	e037883a 	mov	sp,fp
    2cfc:	dfc00117 	ldw	ra,4(sp)
    2d00:	df000017 	ldw	fp,0(sp)
    2d04:	dec00204 	addi	sp,sp,8
    2d08:	f800283a 	ret

00002d0c <UsbClassRequest>:

void UsbClassRequest()
{
    2d0c:	defffe04 	addi	sp,sp,-8
    2d10:	dfc00115 	stw	ra,4(sp)
    2d14:	df000015 	stw	fp,0(sp)
    2d18:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    2d1c:	01000084 	movi	r4,2
    2d20:	01414004 	movi	r5,1280
    2d24:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x050C);
    2d28:	0009883a 	mov	r4,zero
    2d2c:	01414304 	movi	r5,1292
    2d30:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    2d34:	0009883a 	mov	r4,zero
    2d38:	01400204 	movi	r5,8
    2d3c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
    2d40:	0009883a 	mov	r4,zero
    2d44:	0140b404 	movi	r5,720
    2d48:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);
    2d4c:	0009883a 	mov	r4,zero
    2d50:	01400044 	movi	r5,1
    2d54:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    2d58:	0009883a 	mov	r4,zero
    2d5c:	014004c4 	movi	r5,19
    2d60:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0514);
    2d64:	0009883a 	mov	r4,zero
    2d68:	01414504 	movi	r5,1300
    2d6c:	00002c80 	call	2c8 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0A21);
    2d70:	0009883a 	mov	r4,zero
    2d74:	01428844 	movi	r5,2593
    2d78:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//device address
    2d7c:	0009883a 	mov	r4,zero
    2d80:	000b883a 	mov	r5,zero
    2d84:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    2d88:	0009883a 	mov	r4,zero
    2d8c:	000b883a 	mov	r5,zero
    2d90:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    2d94:	0009883a 	mov	r4,zero
    2d98:	000b883a 	mov	r5,zero
    2d9c:	00002c80 	call	2c8 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
    2da0:	0009883a 	mov	r4,zero
    2da4:	000b883a 	mov	r5,zero
    2da8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number /data length
    2dac:	0009883a 	mov	r4,zero
    2db0:	000b883a 	mov	r5,zero
    2db4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
    2db8:	0009883a 	mov	r4,zero
    2dbc:	0140a404 	movi	r5,656
    2dc0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
    2dc4:	0009883a 	mov	r4,zero
    2dc8:	01401044 	movi	r5,65
    2dcc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    2dd0:	0009883a 	mov	r4,zero
    2dd4:	014004c4 	movi	r5,19
    2dd8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    2ddc:	0009883a 	mov	r4,zero
    2de0:	000b883a 	mov	r5,zero
    2de4:	00002c80 	call	2c8 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    2de8:	01006c04 	movi	r4,432
    2dec:	01414004 	movi	r5,1280
    2df0:	00022c40 	call	22c4 <UsbWrite>
}
    2df4:	e037883a 	mov	sp,fp
    2df8:	dfc00117 	ldw	ra,4(sp)
    2dfc:	df000017 	ldw	fp,0(sp)
    2e00:	dec00204 	addi	sp,sp,8
    2e04:	f800283a 	ret

00002e08 <UsbGetHidDesc>:


void UsbGetHidDesc()
{
    2e08:	defffe04 	addi	sp,sp,-8
    2e0c:	dfc00115 	stw	ra,4(sp)
    2e10:	df000015 	stw	fp,0(sp)
    2e14:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    2e18:	01000084 	movi	r4,2
    2e1c:	01414004 	movi	r5,1280
    2e20:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x050C);
    2e24:	0009883a 	mov	r4,zero
    2e28:	01414304 	movi	r5,1292
    2e2c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    2e30:	0009883a 	mov	r4,zero
    2e34:	01400204 	movi	r5,8
    2e38:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
    2e3c:	0009883a 	mov	r4,zero
    2e40:	0140b404 	movi	r5,720
    2e44:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);
    2e48:	0009883a 	mov	r4,zero
    2e4c:	01400044 	movi	r5,1
    2e50:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    2e54:	0009883a 	mov	r4,zero
    2e58:	014004c4 	movi	r5,19
    2e5c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0514);
    2e60:	0009883a 	mov	r4,zero
    2e64:	01414504 	movi	r5,1300
    2e68:	00002c80 	call	2c8 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
    2e6c:	0009883a 	mov	r4,zero
    2e70:	0141a044 	movi	r5,1665
    2e74:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x2100);//e //HID 0x21
    2e78:	0009883a 	mov	r4,zero
    2e7c:	01484004 	movi	r5,8448
    2e80:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    2e84:	0009883a 	mov	r4,zero
    2e88:	000b883a 	mov	r5,zero
    2e8c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
    2e90:	0009883a 	mov	r4,zero
    2e94:	01401ec4 	movi	r5,123
    2e98:	00002c80 	call	2c8 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
    2e9c:	0009883a 	mov	r4,zero
    2ea0:	01415104 	movi	r5,1348
    2ea4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    2ea8:	0009883a 	mov	r4,zero
    2eac:	01400204 	movi	r5,8
    2eb0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    2eb4:	0009883a 	mov	r4,zero
    2eb8:	0140a404 	movi	r5,656
    2ebc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    2ec0:	0009883a 	mov	r4,zero
    2ec4:	01401044 	movi	r5,65
    2ec8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    2ecc:	0009883a 	mov	r4,zero
    2ed0:	014004c4 	movi	r5,19
    2ed4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    2ed8:	0009883a 	mov	r4,zero
    2edc:	01414804 	movi	r5,1312
    2ee0:	00002c80 	call	2c8 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
    2ee4:	0009883a 	mov	r4,zero
    2ee8:	000b883a 	mov	r5,zero
    2eec:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
    2ef0:	0009883a 	mov	r4,zero
    2ef4:	000b883a 	mov	r5,zero
    2ef8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
    2efc:	0009883a 	mov	r4,zero
    2f00:	01408404 	movi	r5,528
    2f04:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    2f08:	0009883a 	mov	r4,zero
    2f0c:	01401044 	movi	r5,65
    2f10:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    2f14:	0009883a 	mov	r4,zero
    2f18:	014004c4 	movi	r5,19
    2f1c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
    2f20:	0009883a 	mov	r4,zero
    2f24:	000b883a 	mov	r5,zero
    2f28:	00002c80 	call	2c8 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    2f2c:	01006c04 	movi	r4,432
    2f30:	01414004 	movi	r5,1280
    2f34:	00022c40 	call	22c4 <UsbWrite>

}
    2f38:	e037883a 	mov	sp,fp
    2f3c:	dfc00117 	ldw	ra,4(sp)
    2f40:	df000017 	ldw	fp,0(sp)
    2f44:	dec00204 	addi	sp,sp,8
    2f48:	f800283a 	ret

00002f4c <UsbGetReportDesc>:


void UsbGetReportDesc()
{
    2f4c:	defffe04 	addi	sp,sp,-8
    2f50:	dfc00115 	stw	ra,4(sp)
    2f54:	df000015 	stw	fp,0(sp)
    2f58:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    2f5c:	01000084 	movi	r4,2
    2f60:	01414004 	movi	r5,1280
    2f64:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x050C);
    2f68:	0009883a 	mov	r4,zero
    2f6c:	01414304 	movi	r5,1292
    2f70:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    2f74:	0009883a 	mov	r4,zero
    2f78:	01400204 	movi	r5,8
    2f7c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    2f80:	0009883a 	mov	r4,zero
    2f84:	0140b404 	movi	r5,720
    2f88:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);
    2f8c:	0009883a 	mov	r4,zero
    2f90:	01400044 	movi	r5,1
    2f94:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    2f98:	0009883a 	mov	r4,zero
    2f9c:	014004c4 	movi	r5,19
    2fa0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0514);
    2fa4:	0009883a 	mov	r4,zero
    2fa8:	01414504 	movi	r5,1300
    2fac:	00002c80 	call	2c8 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
    2fb0:	0009883a 	mov	r4,zero
    2fb4:	0141a044 	movi	r5,1665
    2fb8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x2200);//e //report 0x22
    2fbc:	0009883a 	mov	r4,zero
    2fc0:	01488004 	movi	r5,8704
    2fc4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    2fc8:	0009883a 	mov	r4,zero
    2fcc:	000b883a 	mov	r5,zero
    2fd0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
    2fd4:	0009883a 	mov	r4,zero
    2fd8:	01401ec4 	movi	r5,123
    2fdc:	00002c80 	call	2c8 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0580); //514
    2fe0:	0009883a 	mov	r4,zero
    2fe4:	01416004 	movi	r5,1408
    2fe8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    2fec:	0009883a 	mov	r4,zero
    2ff0:	01400204 	movi	r5,8
    2ff4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    2ff8:	0009883a 	mov	r4,zero
    2ffc:	0140a404 	movi	r5,656
    3000:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    3004:	0009883a 	mov	r4,zero
    3008:	01401044 	movi	r5,65
    300c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    3010:	0009883a 	mov	r4,zero
    3014:	014004c4 	movi	r5,19
    3018:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    301c:	0009883a 	mov	r4,zero
    3020:	01414804 	movi	r5,1312
    3024:	00002c80 	call	2c8 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0588); //520
    3028:	0009883a 	mov	r4,zero
    302c:	01416204 	movi	r5,1416
    3030:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
    3034:	0009883a 	mov	r4,zero
    3038:	01400204 	movi	r5,8
    303c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    3040:	0009883a 	mov	r4,zero
    3044:	0140a404 	movi	r5,656
    3048:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
    304c:	0009883a 	mov	r4,zero
    3050:	01400044 	movi	r5,1
    3054:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    3058:	0009883a 	mov	r4,zero
    305c:	014004c4 	movi	r5,19
    3060:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
    3064:	0009883a 	mov	r4,zero
    3068:	01414b04 	movi	r5,1324
    306c:	00002c80 	call	2c8 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0590); //52c
    3070:	0009883a 	mov	r4,zero
    3074:	01416404 	movi	r5,1424
    3078:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
    307c:	0009883a 	mov	r4,zero
    3080:	01400204 	movi	r5,8
    3084:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
    3088:	0009883a 	mov	r4,zero
    308c:	0140a404 	movi	r5,656
    3090:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    3094:	0009883a 	mov	r4,zero
    3098:	01401044 	movi	r5,65
    309c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    30a0:	0009883a 	mov	r4,zero
    30a4:	014004c4 	movi	r5,19
    30a8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
    30ac:	0009883a 	mov	r4,zero
    30b0:	01414e04 	movi	r5,1336
    30b4:	00002c80 	call	2c8 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0598); //538
    30b8:	0009883a 	mov	r4,zero
    30bc:	01416604 	movi	r5,1432
    30c0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
    30c4:	0009883a 	mov	r4,zero
    30c8:	01400204 	movi	r5,8
    30cc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
    30d0:	0009883a 	mov	r4,zero
    30d4:	0140a404 	movi	r5,656
    30d8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
    30dc:	0009883a 	mov	r4,zero
    30e0:	01400044 	movi	r5,1
    30e4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
    30e8:	0009883a 	mov	r4,zero
    30ec:	014004c4 	movi	r5,19
    30f0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
    30f4:	0009883a 	mov	r4,zero
    30f8:	01415104 	movi	r5,1348
    30fc:	00002c80 	call	2c8 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x05a0); //544
    3100:	0009883a 	mov	r4,zero
    3104:	01416804 	movi	r5,1440
    3108:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    310c:	0009883a 	mov	r4,zero
    3110:	01400204 	movi	r5,8
    3114:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    3118:	0009883a 	mov	r4,zero
    311c:	0140a404 	movi	r5,656
    3120:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
    3124:	0009883a 	mov	r4,zero
    3128:	01401044 	movi	r5,65
    312c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    3130:	0009883a 	mov	r4,zero
    3134:	014004c4 	movi	r5,19
    3138:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
    313c:	0009883a 	mov	r4,zero
    3140:	01415404 	movi	r5,1360
    3144:	00002c80 	call	2c8 <IO_write>

	//data phase IN-6
	IO_write(HPI_DATA,0x05a8); //550
    3148:	0009883a 	mov	r4,zero
    314c:	01416a04 	movi	r5,1448
    3150:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
    3154:	0009883a 	mov	r4,zero
    3158:	01400204 	movi	r5,8
    315c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    3160:	0009883a 	mov	r4,zero
    3164:	0140a404 	movi	r5,656
    3168:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
    316c:	0009883a 	mov	r4,zero
    3170:	01400044 	movi	r5,1
    3174:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    3178:	0009883a 	mov	r4,zero
    317c:	014004c4 	movi	r5,19
    3180:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x055c);//a
    3184:	0009883a 	mov	r4,zero
    3188:	01415704 	movi	r5,1372
    318c:	00002c80 	call	2c8 <IO_write>

	//data phase IN-7
	IO_write(HPI_DATA,0x05b0); //c
    3190:	0009883a 	mov	r4,zero
    3194:	01416c04 	movi	r5,1456
    3198:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
    319c:	0009883a 	mov	r4,zero
    31a0:	01400204 	movi	r5,8
    31a4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//560
    31a8:	0009883a 	mov	r4,zero
    31ac:	0140a404 	movi	r5,656
    31b0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//2 //data1
    31b4:	0009883a 	mov	r4,zero
    31b8:	01401044 	movi	r5,65
    31bc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    31c0:	0009883a 	mov	r4,zero
    31c4:	014004c4 	movi	r5,19
    31c8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0568);//6
    31cc:	0009883a 	mov	r4,zero
    31d0:	01415a04 	movi	r5,1384
    31d4:	00002c80 	call	2c8 <IO_write>

	//data phase IN-8
	IO_write(HPI_DATA,0x05b8); //8
    31d8:	0009883a 	mov	r4,zero
    31dc:	01416e04 	movi	r5,1464
    31e0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0003);//a
    31e4:	0009883a 	mov	r4,zero
    31e8:	014000c4 	movi	r5,3
    31ec:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
    31f0:	0009883a 	mov	r4,zero
    31f4:	0140a404 	movi	r5,656
    31f8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
    31fc:	0009883a 	mov	r4,zero
    3200:	01400044 	movi	r5,1
    3204:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//570
    3208:	0009883a 	mov	r4,zero
    320c:	014004c4 	movi	r5,19
    3210:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0574);//2
    3214:	0009883a 	mov	r4,zero
    3218:	01415d04 	movi	r5,1396
    321c:	00002c80 	call	2c8 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //574
    3220:	0009883a 	mov	r4,zero
    3224:	000b883a 	mov	r5,zero
    3228:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
    322c:	0009883a 	mov	r4,zero
    3230:	000b883a 	mov	r5,zero
    3234:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0210);//8
    3238:	0009883a 	mov	r4,zero
    323c:	01408404 	movi	r5,528
    3240:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    3244:	0009883a 	mov	r4,zero
    3248:	01401044 	movi	r5,65
    324c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    3250:	0009883a 	mov	r4,zero
    3254:	014004c4 	movi	r5,19
    3258:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
    325c:	0009883a 	mov	r4,zero
    3260:	000b883a 	mov	r5,zero
    3264:	00002c80 	call	2c8 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    3268:	01006c04 	movi	r4,432
    326c:	01414004 	movi	r5,1280
    3270:	00022c40 	call	22c4 <UsbWrite>

}
    3274:	e037883a 	mov	sp,fp
    3278:	dfc00117 	ldw	ra,4(sp)
    327c:	df000017 	ldw	fp,0(sp)
    3280:	dec00204 	addi	sp,sp,8
    3284:	f800283a 	ret

00003288 <UsbWaitTDListDone>:


alt_u16 UsbWaitTDListDone()
{
    3288:	defffd04 	addi	sp,sp,-12
    328c:	dfc00215 	stw	ra,8(sp)
    3290:	df000115 	stw	fp,4(sp)
    3294:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
    3298:	01005104 	movi	r4,324
    329c:	00023180 	call	2318 <UsbRead>
    32a0:	e0bfff0d 	sth	r2,-4(fp)
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
    32a4:	01005104 	movi	r4,324
    32a8:	000b883a 	mov	r5,zero
    32ac:	00022c40 	call	22c4 <UsbWrite>
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
    32b0:	00000d06 	br	32e8 <UsbWaitTDListDone+0x60>
	{
		if(usb_ctl_val == 0x0000)
    32b4:	e0bfff0b 	ldhu	r2,-4(fp)
    32b8:	10000526 	beq	r2,zero,32d0 <UsbWaitTDListDone+0x48>
		{
		}
		else
		{
			printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
    32bc:	e0bfff0b 	ldhu	r2,-4(fp)
    32c0:	01000074 	movhi	r4,1
    32c4:	210bc804 	addi	r4,r4,12064
    32c8:	100b883a 	mov	r5,r2
    32cc:	0003d300 	call	3d30 <printf>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    32d0:	01005104 	movi	r4,324
    32d4:	00023180 	call	2318 <UsbRead>
    32d8:	e0bfff0d 	sth	r2,-4(fp)
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
    32dc:	01005104 	movi	r4,324
    32e0:	000b883a 	mov	r5,zero
    32e4:	00022c40 	call	22c4 <UsbWrite>
{
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
    32e8:	e0bfff0b 	ldhu	r2,-4(fp)
    32ec:	10840018 	cmpnei	r2,r2,4096
    32f0:	103ff01e 	bne	r2,zero,32b4 <__alt_data_end+0xfffadb84>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
	}

	return usb_ctl_val;
    32f4:	e0bfff0b 	ldhu	r2,-4(fp)
}
    32f8:	e037883a 	mov	sp,fp
    32fc:	dfc00117 	ldw	ra,4(sp)
    3300:	df000017 	ldw	fp,0(sp)
    3304:	dec00204 	addi	sp,sp,8
    3308:	f800283a 	ret

0000330c <UsbGetRetryCnt>:


alt_u16 UsbGetRetryCnt()
{
    330c:	defffd04 	addi	sp,sp,-12
    3310:	dfc00215 	stw	ra,8(sp)
    3314:	df000115 	stw	fp,4(sp)
    3318:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	IO_read(HPI_STATUS);
    331c:	010000c4 	movi	r4,3
    3320:	00003300 	call	330 <IO_read>
	if(UsbRead(HPI_SIE1_MSG_ADR) == HUSB_TDListDone)
    3324:	01005104 	movi	r4,324
    3328:	00023180 	call	2318 <UsbRead>
    332c:	10bfffcc 	andi	r2,r2,65535
    3330:	10840018 	cmpnei	r2,r2,4096
    3334:	1000091e 	bne	r2,zero,335c <UsbGetRetryCnt+0x50>
	{
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
    3338:	01005104 	movi	r4,324
    333c:	000b883a 	mov	r5,zero
    3340:	00022c40 	call	22c4 <UsbWrite>

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    3344:	0001883a 	nop
    3348:	010000c4 	movi	r4,3
    334c:	00003300 	call	330 <IO_read>
    3350:	10bfffcc 	andi	r2,r2,65535
    3354:	1080040c 	andi	r2,r2,16
    3358:	103ffb26 	beq	r2,zero,3348 <__alt_data_end+0xfffadc18>
		{
		}
	}
	//usleep(1000);
	IO_write(HPI_ADDR,0x0508);
    335c:	01000084 	movi	r4,2
    3360:	01414204 	movi	r5,1288
    3364:	00002c80 	call	2c8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
    3368:	0009883a 	mov	r4,zero
    336c:	00003300 	call	330 <IO_read>
    3370:	e0bfff0d 	sth	r2,-4(fp)

	return usb_ctl_val;
    3374:	e0bfff0b 	ldhu	r2,-4(fp)
}
    3378:	e037883a 	mov	sp,fp
    337c:	dfc00117 	ldw	ra,4(sp)
    3380:	df000017 	ldw	fp,0(sp)
    3384:	dec00204 	addi	sp,sp,8
    3388:	f800283a 	ret

0000338c <UsbPrintMem>:


void UsbPrintMem()
{
    338c:	defffc04 	addi	sp,sp,-16
    3390:	dfc00315 	stw	ra,12(sp)
    3394:	df000215 	stw	fp,8(sp)
    3398:	df000204 	addi	fp,sp,8
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
    339c:	01000084 	movi	r4,2
    33a0:	01414004 	movi	r5,1280
    33a4:	00002c80 	call	2c8 <IO_write>
	for (i = 0; i <= 200; i += 2)
    33a8:	e03ffe15 	stw	zero,-8(fp)
    33ac:	00000e06 	br	33e8 <UsbPrintMem+0x5c>
	{
		code = IO_read(HPI_DATA);
    33b0:	0009883a 	mov	r4,zero
    33b4:	00003300 	call	330 <IO_read>
    33b8:	10bfffcc 	andi	r2,r2,65535
    33bc:	e0bfff15 	stw	r2,-4(fp)
		printf("\naddr %x = %04x\n", 0x0500+i, code);
    33c0:	e0bffe17 	ldw	r2,-8(fp)
    33c4:	10814004 	addi	r2,r2,1280
    33c8:	01000074 	movhi	r4,1
    33cc:	210bd004 	addi	r4,r4,12096
    33d0:	100b883a 	mov	r5,r2
    33d4:	e1bfff17 	ldw	r6,-4(fp)
    33d8:	0003d300 	call	3d30 <printf>

void UsbPrintMem()
{
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
	for (i = 0; i <= 200; i += 2)
    33dc:	e0bffe17 	ldw	r2,-8(fp)
    33e0:	10800084 	addi	r2,r2,2
    33e4:	e0bffe15 	stw	r2,-8(fp)
    33e8:	e0bffe17 	ldw	r2,-8(fp)
    33ec:	10803250 	cmplti	r2,r2,201
    33f0:	103fef1e 	bne	r2,zero,33b0 <__alt_data_end+0xfffadc80>
	{
		code = IO_read(HPI_DATA);
		printf("\naddr %x = %04x\n", 0x0500+i, code);
	}
}
    33f4:	e037883a 	mov	sp,fp
    33f8:	dfc00117 	ldw	ra,4(sp)
    33fc:	df000017 	ldw	fp,0(sp)
    3400:	dec00204 	addi	sp,sp,8
    3404:	f800283a 	ret

00003408 <udivmodsi4>:
    3408:	2900182e 	bgeu	r5,r4,346c <udivmodsi4+0x64>
    340c:	28001716 	blt	r5,zero,346c <udivmodsi4+0x64>
    3410:	00800804 	movi	r2,32
    3414:	00c00044 	movi	r3,1
    3418:	00000206 	br	3424 <udivmodsi4+0x1c>
    341c:	10001126 	beq	r2,zero,3464 <udivmodsi4+0x5c>
    3420:	28000516 	blt	r5,zero,3438 <udivmodsi4+0x30>
    3424:	294b883a 	add	r5,r5,r5
    3428:	10bfffc4 	addi	r2,r2,-1
    342c:	18c7883a 	add	r3,r3,r3
    3430:	293ffa36 	bltu	r5,r4,341c <__alt_data_end+0xfffadcec>
    3434:	18000b26 	beq	r3,zero,3464 <udivmodsi4+0x5c>
    3438:	0005883a 	mov	r2,zero
    343c:	21400236 	bltu	r4,r5,3448 <udivmodsi4+0x40>
    3440:	2149c83a 	sub	r4,r4,r5
    3444:	10c4b03a 	or	r2,r2,r3
    3448:	1806d07a 	srli	r3,r3,1
    344c:	280ad07a 	srli	r5,r5,1
    3450:	183ffa1e 	bne	r3,zero,343c <__alt_data_end+0xfffadd0c>
    3454:	3000011e 	bne	r6,zero,345c <udivmodsi4+0x54>
    3458:	f800283a 	ret
    345c:	2005883a 	mov	r2,r4
    3460:	f800283a 	ret
    3464:	0005883a 	mov	r2,zero
    3468:	003ffa06 	br	3454 <__alt_data_end+0xfffadd24>
    346c:	00c00044 	movi	r3,1
    3470:	003ff106 	br	3438 <__alt_data_end+0xfffadd08>

00003474 <__divsi3>:
    3474:	defffe04 	addi	sp,sp,-8
    3478:	dfc00115 	stw	ra,4(sp)
    347c:	dc000015 	stw	r16,0(sp)
    3480:	20000b16 	blt	r4,zero,34b0 <__divsi3+0x3c>
    3484:	0021883a 	mov	r16,zero
    3488:	28000c16 	blt	r5,zero,34bc <__divsi3+0x48>
    348c:	000d883a 	mov	r6,zero
    3490:	00034080 	call	3408 <udivmodsi4>
    3494:	0407c83a 	sub	r3,zero,r16
    3498:	1884f03a 	xor	r2,r3,r2
    349c:	1405883a 	add	r2,r2,r16
    34a0:	dfc00117 	ldw	ra,4(sp)
    34a4:	dc000017 	ldw	r16,0(sp)
    34a8:	dec00204 	addi	sp,sp,8
    34ac:	f800283a 	ret
    34b0:	0109c83a 	sub	r4,zero,r4
    34b4:	04000044 	movi	r16,1
    34b8:	283ff40e 	bge	r5,zero,348c <__alt_data_end+0xfffadd5c>
    34bc:	014bc83a 	sub	r5,zero,r5
    34c0:	8400005c 	xori	r16,r16,1
    34c4:	003ff106 	br	348c <__alt_data_end+0xfffadd5c>

000034c8 <__modsi3>:
    34c8:	defffd04 	addi	sp,sp,-12
    34cc:	dfc00215 	stw	ra,8(sp)
    34d0:	dc400115 	stw	r17,4(sp)
    34d4:	dc000015 	stw	r16,0(sp)
    34d8:	20000c16 	blt	r4,zero,350c <__modsi3+0x44>
    34dc:	0023883a 	mov	r17,zero
    34e0:	0021883a 	mov	r16,zero
    34e4:	28000d16 	blt	r5,zero,351c <__modsi3+0x54>
    34e8:	01800044 	movi	r6,1
    34ec:	00034080 	call	3408 <udivmodsi4>
    34f0:	1404f03a 	xor	r2,r2,r16
    34f4:	8885883a 	add	r2,r17,r2
    34f8:	dfc00217 	ldw	ra,8(sp)
    34fc:	dc400117 	ldw	r17,4(sp)
    3500:	dc000017 	ldw	r16,0(sp)
    3504:	dec00304 	addi	sp,sp,12
    3508:	f800283a 	ret
    350c:	0109c83a 	sub	r4,zero,r4
    3510:	04400044 	movi	r17,1
    3514:	043fffc4 	movi	r16,-1
    3518:	283ff30e 	bge	r5,zero,34e8 <__alt_data_end+0xfffaddb8>
    351c:	014bc83a 	sub	r5,zero,r5
    3520:	003ff106 	br	34e8 <__alt_data_end+0xfffaddb8>

00003524 <__udivsi3>:
    3524:	000d883a 	mov	r6,zero
    3528:	00034081 	jmpi	3408 <udivmodsi4>

0000352c <__umodsi3>:
    352c:	01800044 	movi	r6,1
    3530:	00034081 	jmpi	3408 <udivmodsi4>

00003534 <malloc>:
    3534:	00800074 	movhi	r2,1
    3538:	10935f04 	addi	r2,r2,19836
    353c:	200b883a 	mov	r5,r4
    3540:	11000017 	ldw	r4,0(r2)
    3544:	000355c1 	jmpi	355c <_malloc_r>

00003548 <free>:
    3548:	00800074 	movhi	r2,1
    354c:	10935f04 	addi	r2,r2,19836
    3550:	200b883a 	mov	r5,r4
    3554:	11000017 	ldw	r4,0(r2)
    3558:	00082701 	jmpi	8270 <_free_r>

0000355c <_malloc_r>:
    355c:	defff504 	addi	sp,sp,-44
    3560:	dc800315 	stw	r18,12(sp)
    3564:	dfc00a15 	stw	ra,40(sp)
    3568:	df000915 	stw	fp,36(sp)
    356c:	ddc00815 	stw	r23,32(sp)
    3570:	dd800715 	stw	r22,28(sp)
    3574:	dd400615 	stw	r21,24(sp)
    3578:	dd000515 	stw	r20,20(sp)
    357c:	dcc00415 	stw	r19,16(sp)
    3580:	dc400215 	stw	r17,8(sp)
    3584:	dc000115 	stw	r16,4(sp)
    3588:	288002c4 	addi	r2,r5,11
    358c:	00c00584 	movi	r3,22
    3590:	2025883a 	mov	r18,r4
    3594:	18802a2e 	bgeu	r3,r2,3640 <_malloc_r+0xe4>
    3598:	047ffe04 	movi	r17,-8
    359c:	1462703a 	and	r17,r2,r17
    35a0:	88009e16 	blt	r17,zero,381c <_malloc_r+0x2c0>
    35a4:	89409d36 	bltu	r17,r5,381c <_malloc_r+0x2c0>
    35a8:	00104fc0 	call	104fc <__malloc_lock>
    35ac:	00807dc4 	movi	r2,503
    35b0:	14402736 	bltu	r2,r17,3650 <_malloc_r+0xf4>
    35b4:	8806d0fa 	srli	r3,r17,3
    35b8:	04c00074 	movhi	r19,1
    35bc:	9cccb104 	addi	r19,r19,12996
    35c0:	18c5883a 	add	r2,r3,r3
    35c4:	1085883a 	add	r2,r2,r2
    35c8:	1085883a 	add	r2,r2,r2
    35cc:	9885883a 	add	r2,r19,r2
    35d0:	14000317 	ldw	r16,12(r2)
    35d4:	80814a26 	beq	r16,r2,3b00 <_malloc_r+0x5a4>
    35d8:	80c00117 	ldw	r3,4(r16)
    35dc:	81000317 	ldw	r4,12(r16)
    35e0:	00bfff04 	movi	r2,-4
    35e4:	1884703a 	and	r2,r3,r2
    35e8:	81400217 	ldw	r5,8(r16)
    35ec:	8085883a 	add	r2,r16,r2
    35f0:	10c00117 	ldw	r3,4(r2)
    35f4:	29000315 	stw	r4,12(r5)
    35f8:	21400215 	stw	r5,8(r4)
    35fc:	18c00054 	ori	r3,r3,1
    3600:	10c00115 	stw	r3,4(r2)
    3604:	9009883a 	mov	r4,r18
    3608:	001051c0 	call	1051c <__malloc_unlock>
    360c:	80800204 	addi	r2,r16,8
    3610:	dfc00a17 	ldw	ra,40(sp)
    3614:	df000917 	ldw	fp,36(sp)
    3618:	ddc00817 	ldw	r23,32(sp)
    361c:	dd800717 	ldw	r22,28(sp)
    3620:	dd400617 	ldw	r21,24(sp)
    3624:	dd000517 	ldw	r20,20(sp)
    3628:	dcc00417 	ldw	r19,16(sp)
    362c:	dc800317 	ldw	r18,12(sp)
    3630:	dc400217 	ldw	r17,8(sp)
    3634:	dc000117 	ldw	r16,4(sp)
    3638:	dec00b04 	addi	sp,sp,44
    363c:	f800283a 	ret
    3640:	04400404 	movi	r17,16
    3644:	89407536 	bltu	r17,r5,381c <_malloc_r+0x2c0>
    3648:	00104fc0 	call	104fc <__malloc_lock>
    364c:	003fd906 	br	35b4 <__alt_data_end+0xfffade84>
    3650:	8806d27a 	srli	r3,r17,9
    3654:	18007526 	beq	r3,zero,382c <_malloc_r+0x2d0>
    3658:	00800104 	movi	r2,4
    365c:	10c0ef36 	bltu	r2,r3,3a1c <_malloc_r+0x4c0>
    3660:	8806d1ba 	srli	r3,r17,6
    3664:	19c00e04 	addi	r7,r3,56
    3668:	39cb883a 	add	r5,r7,r7
    366c:	04c00074 	movhi	r19,1
    3670:	294b883a 	add	r5,r5,r5
    3674:	9cccb104 	addi	r19,r19,12996
    3678:	294b883a 	add	r5,r5,r5
    367c:	994b883a 	add	r5,r19,r5
    3680:	2c000317 	ldw	r16,12(r5)
    3684:	2c000e26 	beq	r5,r16,36c0 <_malloc_r+0x164>
    3688:	80800117 	ldw	r2,4(r16)
    368c:	01bfff04 	movi	r6,-4
    3690:	010003c4 	movi	r4,15
    3694:	1184703a 	and	r2,r2,r6
    3698:	1447c83a 	sub	r3,r2,r17
    369c:	20c00716 	blt	r4,r3,36bc <_malloc_r+0x160>
    36a0:	1800650e 	bge	r3,zero,3838 <_malloc_r+0x2dc>
    36a4:	84000317 	ldw	r16,12(r16)
    36a8:	2c000526 	beq	r5,r16,36c0 <_malloc_r+0x164>
    36ac:	80800117 	ldw	r2,4(r16)
    36b0:	1184703a 	and	r2,r2,r6
    36b4:	1447c83a 	sub	r3,r2,r17
    36b8:	20fff90e 	bge	r4,r3,36a0 <__alt_data_end+0xfffadf70>
    36bc:	39ffffc4 	addi	r7,r7,-1
    36c0:	38c00044 	addi	r3,r7,1
    36c4:	01800074 	movhi	r6,1
    36c8:	9c000417 	ldw	r16,16(r19)
    36cc:	318cb104 	addi	r6,r6,12996
    36d0:	32400204 	addi	r9,r6,8
    36d4:	82410326 	beq	r16,r9,3ae4 <_malloc_r+0x588>
    36d8:	81000117 	ldw	r4,4(r16)
    36dc:	00bfff04 	movi	r2,-4
    36e0:	208e703a 	and	r7,r4,r2
    36e4:	3c45c83a 	sub	r2,r7,r17
    36e8:	010003c4 	movi	r4,15
    36ec:	2080ee16 	blt	r4,r2,3aa8 <_malloc_r+0x54c>
    36f0:	32400515 	stw	r9,20(r6)
    36f4:	32400415 	stw	r9,16(r6)
    36f8:	1000510e 	bge	r2,zero,3840 <_malloc_r+0x2e4>
    36fc:	00807fc4 	movi	r2,511
    3700:	11c0ce36 	bltu	r2,r7,3a3c <_malloc_r+0x4e0>
    3704:	3808d0fa 	srli	r4,r7,3
    3708:	01c00044 	movi	r7,1
    370c:	30800117 	ldw	r2,4(r6)
    3710:	210b883a 	add	r5,r4,r4
    3714:	294b883a 	add	r5,r5,r5
    3718:	2009d0ba 	srai	r4,r4,2
    371c:	294b883a 	add	r5,r5,r5
    3720:	298b883a 	add	r5,r5,r6
    3724:	2a000217 	ldw	r8,8(r5)
    3728:	3908983a 	sll	r4,r7,r4
    372c:	81400315 	stw	r5,12(r16)
    3730:	82000215 	stw	r8,8(r16)
    3734:	2088b03a 	or	r4,r4,r2
    3738:	2c000215 	stw	r16,8(r5)
    373c:	31000115 	stw	r4,4(r6)
    3740:	44000315 	stw	r16,12(r8)
    3744:	1805d0ba 	srai	r2,r3,2
    3748:	01400044 	movi	r5,1
    374c:	288a983a 	sll	r5,r5,r2
    3750:	21404336 	bltu	r4,r5,3860 <_malloc_r+0x304>
    3754:	2144703a 	and	r2,r4,r5
    3758:	10000a1e 	bne	r2,zero,3784 <_malloc_r+0x228>
    375c:	00bfff04 	movi	r2,-4
    3760:	294b883a 	add	r5,r5,r5
    3764:	1886703a 	and	r3,r3,r2
    3768:	2144703a 	and	r2,r4,r5
    376c:	18c00104 	addi	r3,r3,4
    3770:	1000041e 	bne	r2,zero,3784 <_malloc_r+0x228>
    3774:	294b883a 	add	r5,r5,r5
    3778:	2144703a 	and	r2,r4,r5
    377c:	18c00104 	addi	r3,r3,4
    3780:	103ffc26 	beq	r2,zero,3774 <__alt_data_end+0xfffae044>
    3784:	023fff04 	movi	r8,-4
    3788:	01c003c4 	movi	r7,15
    378c:	18c5883a 	add	r2,r3,r3
    3790:	1085883a 	add	r2,r2,r2
    3794:	1085883a 	add	r2,r2,r2
    3798:	9895883a 	add	r10,r19,r2
    379c:	52c00304 	addi	r11,r10,12
    37a0:	1819883a 	mov	r12,r3
    37a4:	5c000017 	ldw	r16,0(r11)
    37a8:	59bffd04 	addi	r6,r11,-12
    37ac:	8180041e 	bne	r16,r6,37c0 <_malloc_r+0x264>
    37b0:	0000ce06 	br	3aec <_malloc_r+0x590>
    37b4:	2000d70e 	bge	r4,zero,3b14 <_malloc_r+0x5b8>
    37b8:	84000317 	ldw	r16,12(r16)
    37bc:	8180cb26 	beq	r16,r6,3aec <_malloc_r+0x590>
    37c0:	80800117 	ldw	r2,4(r16)
    37c4:	1204703a 	and	r2,r2,r8
    37c8:	1449c83a 	sub	r4,r2,r17
    37cc:	393ff90e 	bge	r7,r4,37b4 <__alt_data_end+0xfffae084>
    37d0:	80800317 	ldw	r2,12(r16)
    37d4:	80c00217 	ldw	r3,8(r16)
    37d8:	89400054 	ori	r5,r17,1
    37dc:	81400115 	stw	r5,4(r16)
    37e0:	18800315 	stw	r2,12(r3)
    37e4:	10c00215 	stw	r3,8(r2)
    37e8:	8463883a 	add	r17,r16,r17
    37ec:	9c400515 	stw	r17,20(r19)
    37f0:	9c400415 	stw	r17,16(r19)
    37f4:	20800054 	ori	r2,r4,1
    37f8:	88800115 	stw	r2,4(r17)
    37fc:	8a400315 	stw	r9,12(r17)
    3800:	8a400215 	stw	r9,8(r17)
    3804:	8923883a 	add	r17,r17,r4
    3808:	89000015 	stw	r4,0(r17)
    380c:	9009883a 	mov	r4,r18
    3810:	001051c0 	call	1051c <__malloc_unlock>
    3814:	80800204 	addi	r2,r16,8
    3818:	003f7d06 	br	3610 <__alt_data_end+0xfffadee0>
    381c:	00800304 	movi	r2,12
    3820:	90800015 	stw	r2,0(r18)
    3824:	0005883a 	mov	r2,zero
    3828:	003f7906 	br	3610 <__alt_data_end+0xfffadee0>
    382c:	01401f84 	movi	r5,126
    3830:	01c00fc4 	movi	r7,63
    3834:	003f8d06 	br	366c <__alt_data_end+0xfffadf3c>
    3838:	81000317 	ldw	r4,12(r16)
    383c:	003f6a06 	br	35e8 <__alt_data_end+0xfffadeb8>
    3840:	81c5883a 	add	r2,r16,r7
    3844:	10c00117 	ldw	r3,4(r2)
    3848:	9009883a 	mov	r4,r18
    384c:	18c00054 	ori	r3,r3,1
    3850:	10c00115 	stw	r3,4(r2)
    3854:	001051c0 	call	1051c <__malloc_unlock>
    3858:	80800204 	addi	r2,r16,8
    385c:	003f6c06 	br	3610 <__alt_data_end+0xfffadee0>
    3860:	9c000217 	ldw	r16,8(r19)
    3864:	00bfff04 	movi	r2,-4
    3868:	85800117 	ldw	r22,4(r16)
    386c:	b0ac703a 	and	r22,r22,r2
    3870:	b4400336 	bltu	r22,r17,3880 <_malloc_r+0x324>
    3874:	b445c83a 	sub	r2,r22,r17
    3878:	00c003c4 	movi	r3,15
    387c:	18805d16 	blt	r3,r2,39f4 <_malloc_r+0x498>
    3880:	05c00074 	movhi	r23,1
    3884:	00800074 	movhi	r2,1
    3888:	bdd35c04 	addi	r23,r23,19824
    388c:	109a4c04 	addi	r2,r2,26928
    3890:	15400017 	ldw	r21,0(r2)
    3894:	b9000017 	ldw	r4,0(r23)
    3898:	00ffffc4 	movi	r3,-1
    389c:	858d883a 	add	r6,r16,r22
    38a0:	8d6b883a 	add	r21,r17,r21
    38a4:	20c0e426 	beq	r4,r3,3c38 <_malloc_r+0x6dc>
    38a8:	ad4403c4 	addi	r21,r21,4111
    38ac:	00fc0004 	movi	r3,-4096
    38b0:	a8ea703a 	and	r21,r21,r3
    38b4:	9009883a 	mov	r4,r18
    38b8:	a80b883a 	mov	r5,r21
    38bc:	d9800015 	stw	r6,0(sp)
    38c0:	0003eb40 	call	3eb4 <_sbrk_r>
    38c4:	00ffffc4 	movi	r3,-1
    38c8:	1029883a 	mov	r20,r2
    38cc:	d9800017 	ldw	r6,0(sp)
    38d0:	10c0a426 	beq	r2,r3,3b64 <_malloc_r+0x608>
    38d4:	1180a236 	bltu	r2,r6,3b60 <_malloc_r+0x604>
    38d8:	07000074 	movhi	fp,1
    38dc:	e71a5804 	addi	fp,fp,26976
    38e0:	e0c00017 	ldw	r3,0(fp)
    38e4:	a8c7883a 	add	r3,r21,r3
    38e8:	e0c00015 	stw	r3,0(fp)
    38ec:	3500da26 	beq	r6,r20,3c58 <_malloc_r+0x6fc>
    38f0:	b9000017 	ldw	r4,0(r23)
    38f4:	00bfffc4 	movi	r2,-1
    38f8:	2080e426 	beq	r4,r2,3c8c <_malloc_r+0x730>
    38fc:	a185c83a 	sub	r2,r20,r6
    3900:	1885883a 	add	r2,r3,r2
    3904:	e0800015 	stw	r2,0(fp)
    3908:	a0c001cc 	andi	r3,r20,7
    390c:	1800b526 	beq	r3,zero,3be4 <_malloc_r+0x688>
    3910:	a0e9c83a 	sub	r20,r20,r3
    3914:	00840204 	movi	r2,4104
    3918:	a5000204 	addi	r20,r20,8
    391c:	10c7c83a 	sub	r3,r2,r3
    3920:	a545883a 	add	r2,r20,r21
    3924:	1083ffcc 	andi	r2,r2,4095
    3928:	18abc83a 	sub	r21,r3,r2
    392c:	9009883a 	mov	r4,r18
    3930:	a80b883a 	mov	r5,r21
    3934:	0003eb40 	call	3eb4 <_sbrk_r>
    3938:	00ffffc4 	movi	r3,-1
    393c:	10c0d026 	beq	r2,r3,3c80 <_malloc_r+0x724>
    3940:	1507c83a 	sub	r3,r2,r20
    3944:	a8c7883a 	add	r3,r21,r3
    3948:	18c00054 	ori	r3,r3,1
    394c:	e0800017 	ldw	r2,0(fp)
    3950:	9d000215 	stw	r20,8(r19)
    3954:	a0c00115 	stw	r3,4(r20)
    3958:	a887883a 	add	r3,r21,r2
    395c:	e0c00015 	stw	r3,0(fp)
    3960:	84c00e26 	beq	r16,r19,399c <_malloc_r+0x440>
    3964:	018003c4 	movi	r6,15
    3968:	3580a02e 	bgeu	r6,r22,3bec <_malloc_r+0x690>
    396c:	81400117 	ldw	r5,4(r16)
    3970:	013ffe04 	movi	r4,-8
    3974:	b0bffd04 	addi	r2,r22,-12
    3978:	1104703a 	and	r2,r2,r4
    397c:	2900004c 	andi	r4,r5,1
    3980:	1108b03a 	or	r4,r2,r4
    3984:	81000115 	stw	r4,4(r16)
    3988:	01400144 	movi	r5,5
    398c:	8089883a 	add	r4,r16,r2
    3990:	21400115 	stw	r5,4(r4)
    3994:	21400215 	stw	r5,8(r4)
    3998:	3080c036 	bltu	r6,r2,3c9c <_malloc_r+0x740>
    399c:	00800074 	movhi	r2,1
    39a0:	109a4b04 	addi	r2,r2,26924
    39a4:	11000017 	ldw	r4,0(r2)
    39a8:	20c0012e 	bgeu	r4,r3,39b0 <_malloc_r+0x454>
    39ac:	10c00015 	stw	r3,0(r2)
    39b0:	00800074 	movhi	r2,1
    39b4:	109a4a04 	addi	r2,r2,26920
    39b8:	11000017 	ldw	r4,0(r2)
    39bc:	9c000217 	ldw	r16,8(r19)
    39c0:	20c0012e 	bgeu	r4,r3,39c8 <_malloc_r+0x46c>
    39c4:	10c00015 	stw	r3,0(r2)
    39c8:	80c00117 	ldw	r3,4(r16)
    39cc:	00bfff04 	movi	r2,-4
    39d0:	1886703a 	and	r3,r3,r2
    39d4:	1c45c83a 	sub	r2,r3,r17
    39d8:	1c400236 	bltu	r3,r17,39e4 <_malloc_r+0x488>
    39dc:	00c003c4 	movi	r3,15
    39e0:	18800416 	blt	r3,r2,39f4 <_malloc_r+0x498>
    39e4:	9009883a 	mov	r4,r18
    39e8:	001051c0 	call	1051c <__malloc_unlock>
    39ec:	0005883a 	mov	r2,zero
    39f0:	003f0706 	br	3610 <__alt_data_end+0xfffadee0>
    39f4:	88c00054 	ori	r3,r17,1
    39f8:	80c00115 	stw	r3,4(r16)
    39fc:	8463883a 	add	r17,r16,r17
    3a00:	10800054 	ori	r2,r2,1
    3a04:	9c400215 	stw	r17,8(r19)
    3a08:	88800115 	stw	r2,4(r17)
    3a0c:	9009883a 	mov	r4,r18
    3a10:	001051c0 	call	1051c <__malloc_unlock>
    3a14:	80800204 	addi	r2,r16,8
    3a18:	003efd06 	br	3610 <__alt_data_end+0xfffadee0>
    3a1c:	00800504 	movi	r2,20
    3a20:	10c0482e 	bgeu	r2,r3,3b44 <_malloc_r+0x5e8>
    3a24:	00801504 	movi	r2,84
    3a28:	10c06836 	bltu	r2,r3,3bcc <_malloc_r+0x670>
    3a2c:	8806d33a 	srli	r3,r17,12
    3a30:	19c01b84 	addi	r7,r3,110
    3a34:	39cb883a 	add	r5,r7,r7
    3a38:	003f0c06 	br	366c <__alt_data_end+0xfffadf3c>
    3a3c:	3804d27a 	srli	r2,r7,9
    3a40:	01000104 	movi	r4,4
    3a44:	2080422e 	bgeu	r4,r2,3b50 <_malloc_r+0x5f4>
    3a48:	01000504 	movi	r4,20
    3a4c:	20807c36 	bltu	r4,r2,3c40 <_malloc_r+0x6e4>
    3a50:	110016c4 	addi	r4,r2,91
    3a54:	210b883a 	add	r5,r4,r4
    3a58:	294b883a 	add	r5,r5,r5
    3a5c:	294b883a 	add	r5,r5,r5
    3a60:	994b883a 	add	r5,r19,r5
    3a64:	28800217 	ldw	r2,8(r5)
    3a68:	02000074 	movhi	r8,1
    3a6c:	420cb104 	addi	r8,r8,12996
    3a70:	11406326 	beq	r2,r5,3c00 <_malloc_r+0x6a4>
    3a74:	01bfff04 	movi	r6,-4
    3a78:	11000117 	ldw	r4,4(r2)
    3a7c:	2188703a 	and	r4,r4,r6
    3a80:	3900022e 	bgeu	r7,r4,3a8c <_malloc_r+0x530>
    3a84:	10800217 	ldw	r2,8(r2)
    3a88:	28bffb1e 	bne	r5,r2,3a78 <__alt_data_end+0xfffae348>
    3a8c:	11800317 	ldw	r6,12(r2)
    3a90:	99000117 	ldw	r4,4(r19)
    3a94:	81800315 	stw	r6,12(r16)
    3a98:	80800215 	stw	r2,8(r16)
    3a9c:	34000215 	stw	r16,8(r6)
    3aa0:	14000315 	stw	r16,12(r2)
    3aa4:	003f2706 	br	3744 <__alt_data_end+0xfffae014>
    3aa8:	88c00054 	ori	r3,r17,1
    3aac:	80c00115 	stw	r3,4(r16)
    3ab0:	8463883a 	add	r17,r16,r17
    3ab4:	34400515 	stw	r17,20(r6)
    3ab8:	34400415 	stw	r17,16(r6)
    3abc:	10c00054 	ori	r3,r2,1
    3ac0:	8a400315 	stw	r9,12(r17)
    3ac4:	8a400215 	stw	r9,8(r17)
    3ac8:	88c00115 	stw	r3,4(r17)
    3acc:	88a3883a 	add	r17,r17,r2
    3ad0:	88800015 	stw	r2,0(r17)
    3ad4:	9009883a 	mov	r4,r18
    3ad8:	001051c0 	call	1051c <__malloc_unlock>
    3adc:	80800204 	addi	r2,r16,8
    3ae0:	003ecb06 	br	3610 <__alt_data_end+0xfffadee0>
    3ae4:	31000117 	ldw	r4,4(r6)
    3ae8:	003f1606 	br	3744 <__alt_data_end+0xfffae014>
    3aec:	63000044 	addi	r12,r12,1
    3af0:	608000cc 	andi	r2,r12,3
    3af4:	5ac00204 	addi	r11,r11,8
    3af8:	103f2a1e 	bne	r2,zero,37a4 <__alt_data_end+0xfffae074>
    3afc:	00002106 	br	3b84 <_malloc_r+0x628>
    3b00:	80800204 	addi	r2,r16,8
    3b04:	84000517 	ldw	r16,20(r16)
    3b08:	143eb31e 	bne	r2,r16,35d8 <__alt_data_end+0xfffadea8>
    3b0c:	18c00084 	addi	r3,r3,2
    3b10:	003eec06 	br	36c4 <__alt_data_end+0xfffadf94>
    3b14:	8085883a 	add	r2,r16,r2
    3b18:	10c00117 	ldw	r3,4(r2)
    3b1c:	81000317 	ldw	r4,12(r16)
    3b20:	81400217 	ldw	r5,8(r16)
    3b24:	18c00054 	ori	r3,r3,1
    3b28:	10c00115 	stw	r3,4(r2)
    3b2c:	29000315 	stw	r4,12(r5)
    3b30:	21400215 	stw	r5,8(r4)
    3b34:	9009883a 	mov	r4,r18
    3b38:	001051c0 	call	1051c <__malloc_unlock>
    3b3c:	80800204 	addi	r2,r16,8
    3b40:	003eb306 	br	3610 <__alt_data_end+0xfffadee0>
    3b44:	19c016c4 	addi	r7,r3,91
    3b48:	39cb883a 	add	r5,r7,r7
    3b4c:	003ec706 	br	366c <__alt_data_end+0xfffadf3c>
    3b50:	3804d1ba 	srli	r2,r7,6
    3b54:	11000e04 	addi	r4,r2,56
    3b58:	210b883a 	add	r5,r4,r4
    3b5c:	003fbe06 	br	3a58 <__alt_data_end+0xfffae328>
    3b60:	84ff5d26 	beq	r16,r19,38d8 <__alt_data_end+0xfffae1a8>
    3b64:	9c000217 	ldw	r16,8(r19)
    3b68:	00bfff04 	movi	r2,-4
    3b6c:	80c00117 	ldw	r3,4(r16)
    3b70:	1886703a 	and	r3,r3,r2
    3b74:	003f9706 	br	39d4 <__alt_data_end+0xfffae2a4>
    3b78:	52800017 	ldw	r10,0(r10)
    3b7c:	18ffffc4 	addi	r3,r3,-1
    3b80:	50805c1e 	bne	r10,r2,3cf4 <_malloc_r+0x798>
    3b84:	190000cc 	andi	r4,r3,3
    3b88:	50bffe04 	addi	r2,r10,-8
    3b8c:	203ffa1e 	bne	r4,zero,3b78 <__alt_data_end+0xfffae448>
    3b90:	98800117 	ldw	r2,4(r19)
    3b94:	0146303a 	nor	r3,zero,r5
    3b98:	1884703a 	and	r2,r3,r2
    3b9c:	98800115 	stw	r2,4(r19)
    3ba0:	294b883a 	add	r5,r5,r5
    3ba4:	117f2e36 	bltu	r2,r5,3860 <__alt_data_end+0xfffae130>
    3ba8:	283f2d26 	beq	r5,zero,3860 <__alt_data_end+0xfffae130>
    3bac:	1146703a 	and	r3,r2,r5
    3bb0:	1800521e 	bne	r3,zero,3cfc <_malloc_r+0x7a0>
    3bb4:	6007883a 	mov	r3,r12
    3bb8:	294b883a 	add	r5,r5,r5
    3bbc:	1148703a 	and	r4,r2,r5
    3bc0:	18c00104 	addi	r3,r3,4
    3bc4:	203ffc26 	beq	r4,zero,3bb8 <__alt_data_end+0xfffae488>
    3bc8:	003ef006 	br	378c <__alt_data_end+0xfffae05c>
    3bcc:	00805504 	movi	r2,340
    3bd0:	10c01336 	bltu	r2,r3,3c20 <_malloc_r+0x6c4>
    3bd4:	8806d3fa 	srli	r3,r17,15
    3bd8:	19c01dc4 	addi	r7,r3,119
    3bdc:	39cb883a 	add	r5,r7,r7
    3be0:	003ea206 	br	366c <__alt_data_end+0xfffadf3c>
    3be4:	00c40004 	movi	r3,4096
    3be8:	003f4d06 	br	3920 <__alt_data_end+0xfffae1f0>
    3bec:	00800044 	movi	r2,1
    3bf0:	a0800115 	stw	r2,4(r20)
    3bf4:	a021883a 	mov	r16,r20
    3bf8:	0007883a 	mov	r3,zero
    3bfc:	003f7506 	br	39d4 <__alt_data_end+0xfffae2a4>
    3c00:	200bd0ba 	srai	r5,r4,2
    3c04:	01800044 	movi	r6,1
    3c08:	41000117 	ldw	r4,4(r8)
    3c0c:	314a983a 	sll	r5,r6,r5
    3c10:	100d883a 	mov	r6,r2
    3c14:	2908b03a 	or	r4,r5,r4
    3c18:	41000115 	stw	r4,4(r8)
    3c1c:	003f9d06 	br	3a94 <__alt_data_end+0xfffae364>
    3c20:	00815504 	movi	r2,1364
    3c24:	10c01336 	bltu	r2,r3,3c74 <_malloc_r+0x718>
    3c28:	8806d4ba 	srli	r3,r17,18
    3c2c:	19c01f04 	addi	r7,r3,124
    3c30:	39cb883a 	add	r5,r7,r7
    3c34:	003e8d06 	br	366c <__alt_data_end+0xfffadf3c>
    3c38:	ad400404 	addi	r21,r21,16
    3c3c:	003f1d06 	br	38b4 <__alt_data_end+0xfffae184>
    3c40:	01001504 	movi	r4,84
    3c44:	20801c36 	bltu	r4,r2,3cb8 <_malloc_r+0x75c>
    3c48:	3804d33a 	srli	r2,r7,12
    3c4c:	11001b84 	addi	r4,r2,110
    3c50:	210b883a 	add	r5,r4,r4
    3c54:	003f8006 	br	3a58 <__alt_data_end+0xfffae328>
    3c58:	3083ffcc 	andi	r2,r6,4095
    3c5c:	103f241e 	bne	r2,zero,38f0 <__alt_data_end+0xfffae1c0>
    3c60:	99000217 	ldw	r4,8(r19)
    3c64:	ad85883a 	add	r2,r21,r22
    3c68:	10800054 	ori	r2,r2,1
    3c6c:	20800115 	stw	r2,4(r4)
    3c70:	003f4a06 	br	399c <__alt_data_end+0xfffae26c>
    3c74:	01403f04 	movi	r5,252
    3c78:	01c01f84 	movi	r7,126
    3c7c:	003e7b06 	br	366c <__alt_data_end+0xfffadf3c>
    3c80:	00c00044 	movi	r3,1
    3c84:	002b883a 	mov	r21,zero
    3c88:	003f3006 	br	394c <__alt_data_end+0xfffae21c>
    3c8c:	00800074 	movhi	r2,1
    3c90:	10935c04 	addi	r2,r2,19824
    3c94:	15000015 	stw	r20,0(r2)
    3c98:	003f1b06 	br	3908 <__alt_data_end+0xfffae1d8>
    3c9c:	9009883a 	mov	r4,r18
    3ca0:	81400204 	addi	r5,r16,8
    3ca4:	00082700 	call	8270 <_free_r>
    3ca8:	00800074 	movhi	r2,1
    3cac:	109a5804 	addi	r2,r2,26976
    3cb0:	10c00017 	ldw	r3,0(r2)
    3cb4:	003f3906 	br	399c <__alt_data_end+0xfffae26c>
    3cb8:	01005504 	movi	r4,340
    3cbc:	20800436 	bltu	r4,r2,3cd0 <_malloc_r+0x774>
    3cc0:	3804d3fa 	srli	r2,r7,15
    3cc4:	11001dc4 	addi	r4,r2,119
    3cc8:	210b883a 	add	r5,r4,r4
    3ccc:	003f6206 	br	3a58 <__alt_data_end+0xfffae328>
    3cd0:	01015504 	movi	r4,1364
    3cd4:	20800436 	bltu	r4,r2,3ce8 <_malloc_r+0x78c>
    3cd8:	3804d4ba 	srli	r2,r7,18
    3cdc:	11001f04 	addi	r4,r2,124
    3ce0:	210b883a 	add	r5,r4,r4
    3ce4:	003f5c06 	br	3a58 <__alt_data_end+0xfffae328>
    3ce8:	01403f04 	movi	r5,252
    3cec:	01001f84 	movi	r4,126
    3cf0:	003f5906 	br	3a58 <__alt_data_end+0xfffae328>
    3cf4:	98800117 	ldw	r2,4(r19)
    3cf8:	003fa906 	br	3ba0 <__alt_data_end+0xfffae470>
    3cfc:	6007883a 	mov	r3,r12
    3d00:	003ea206 	br	378c <__alt_data_end+0xfffae05c>

00003d04 <_printf_r>:
    3d04:	defffd04 	addi	sp,sp,-12
    3d08:	dfc00015 	stw	ra,0(sp)
    3d0c:	d9800115 	stw	r6,4(sp)
    3d10:	d9c00215 	stw	r7,8(sp)
    3d14:	280d883a 	mov	r6,r5
    3d18:	21400217 	ldw	r5,8(r4)
    3d1c:	d9c00104 	addi	r7,sp,4
    3d20:	0003fa00 	call	3fa0 <___vfprintf_internal_r>
    3d24:	dfc00017 	ldw	ra,0(sp)
    3d28:	dec00304 	addi	sp,sp,12
    3d2c:	f800283a 	ret

00003d30 <printf>:
    3d30:	defffc04 	addi	sp,sp,-16
    3d34:	dfc00015 	stw	ra,0(sp)
    3d38:	d9400115 	stw	r5,4(sp)
    3d3c:	d9800215 	stw	r6,8(sp)
    3d40:	d9c00315 	stw	r7,12(sp)
    3d44:	00800074 	movhi	r2,1
    3d48:	10935f04 	addi	r2,r2,19836
    3d4c:	10800017 	ldw	r2,0(r2)
    3d50:	200b883a 	mov	r5,r4
    3d54:	d9800104 	addi	r6,sp,4
    3d58:	11000217 	ldw	r4,8(r2)
    3d5c:	000609c0 	call	609c <__vfprintf_internal>
    3d60:	dfc00017 	ldw	ra,0(sp)
    3d64:	dec00404 	addi	sp,sp,16
    3d68:	f800283a 	ret

00003d6c <_puts_r>:
    3d6c:	defff604 	addi	sp,sp,-40
    3d70:	dc000715 	stw	r16,28(sp)
    3d74:	2021883a 	mov	r16,r4
    3d78:	2809883a 	mov	r4,r5
    3d7c:	dc400815 	stw	r17,32(sp)
    3d80:	dfc00915 	stw	ra,36(sp)
    3d84:	2823883a 	mov	r17,r5
    3d88:	0003f080 	call	3f08 <strlen>
    3d8c:	00c00074 	movhi	r3,1
    3d90:	18d35f04 	addi	r3,r3,19836
    3d94:	18c00017 	ldw	r3,0(r3)
    3d98:	11000044 	addi	r4,r2,1
    3d9c:	d8800115 	stw	r2,4(sp)
    3da0:	18c00217 	ldw	r3,8(r3)
    3da4:	01400074 	movhi	r5,1
    3da8:	294bd504 	addi	r5,r5,12116
    3dac:	1880030b 	ldhu	r2,12(r3)
    3db0:	d9400215 	stw	r5,8(sp)
    3db4:	d9000615 	stw	r4,24(sp)
    3db8:	01400044 	movi	r5,1
    3dbc:	01000084 	movi	r4,2
    3dc0:	d9000515 	stw	r4,20(sp)
    3dc4:	dc400015 	stw	r17,0(sp)
    3dc8:	d9400315 	stw	r5,12(sp)
    3dcc:	dec00415 	stw	sp,16(sp)
    3dd0:	1108000c 	andi	r4,r2,8192
    3dd4:	2000061e 	bne	r4,zero,3df0 <_puts_r+0x84>
    3dd8:	19401917 	ldw	r5,100(r3)
    3ddc:	0137ffc4 	movi	r4,-8193
    3de0:	10880014 	ori	r2,r2,8192
    3de4:	2908703a 	and	r4,r5,r4
    3de8:	1880030d 	sth	r2,12(r3)
    3dec:	19001915 	stw	r4,100(r3)
    3df0:	81400217 	ldw	r5,8(r16)
    3df4:	8009883a 	mov	r4,r16
    3df8:	d9800404 	addi	r6,sp,16
    3dfc:	00085600 	call	8560 <__sfvwrite_r>
    3e00:	1000061e 	bne	r2,zero,3e1c <_puts_r+0xb0>
    3e04:	00800284 	movi	r2,10
    3e08:	dfc00917 	ldw	ra,36(sp)
    3e0c:	dc400817 	ldw	r17,32(sp)
    3e10:	dc000717 	ldw	r16,28(sp)
    3e14:	dec00a04 	addi	sp,sp,40
    3e18:	f800283a 	ret
    3e1c:	00bfffc4 	movi	r2,-1
    3e20:	003ff906 	br	3e08 <__alt_data_end+0xfffae6d8>

00003e24 <puts>:
    3e24:	00800074 	movhi	r2,1
    3e28:	10935f04 	addi	r2,r2,19836
    3e2c:	200b883a 	mov	r5,r4
    3e30:	11000017 	ldw	r4,0(r2)
    3e34:	0003d6c1 	jmpi	3d6c <_puts_r>

00003e38 <srand>:
    3e38:	00800074 	movhi	r2,1
    3e3c:	10935f04 	addi	r2,r2,19836
    3e40:	10800017 	ldw	r2,0(r2)
    3e44:	11002915 	stw	r4,164(r2)
    3e48:	10002a15 	stw	zero,168(r2)
    3e4c:	f800283a 	ret

00003e50 <rand>:
    3e50:	00800074 	movhi	r2,1
    3e54:	defffe04 	addi	sp,sp,-8
    3e58:	10935f04 	addi	r2,r2,19836
    3e5c:	dc000015 	stw	r16,0(sp)
    3e60:	14000017 	ldw	r16,0(r2)
    3e64:	dfc00115 	stw	ra,4(sp)
    3e68:	01932574 	movhi	r6,19605
    3e6c:	81002917 	ldw	r4,164(r16)
    3e70:	81402a17 	ldw	r5,168(r16)
    3e74:	01d614b4 	movhi	r7,22610
    3e78:	319fcb44 	addi	r6,r6,32557
    3e7c:	39fd0b44 	addi	r7,r7,-3027
    3e80:	000c9900 	call	c990 <__muldi3>
    3e84:	11000044 	addi	r4,r2,1
    3e88:	2085803a 	cmpltu	r2,r4,r2
    3e8c:	10c7883a 	add	r3,r2,r3
    3e90:	00a00034 	movhi	r2,32768
    3e94:	10bfffc4 	addi	r2,r2,-1
    3e98:	1884703a 	and	r2,r3,r2
    3e9c:	81002915 	stw	r4,164(r16)
    3ea0:	80c02a15 	stw	r3,168(r16)
    3ea4:	dfc00117 	ldw	ra,4(sp)
    3ea8:	dc000017 	ldw	r16,0(sp)
    3eac:	dec00204 	addi	sp,sp,8
    3eb0:	f800283a 	ret

00003eb4 <_sbrk_r>:
    3eb4:	defffd04 	addi	sp,sp,-12
    3eb8:	dc000015 	stw	r16,0(sp)
    3ebc:	04000074 	movhi	r16,1
    3ec0:	dc400115 	stw	r17,4(sp)
    3ec4:	841a4d04 	addi	r16,r16,26932
    3ec8:	2023883a 	mov	r17,r4
    3ecc:	2809883a 	mov	r4,r5
    3ed0:	dfc00215 	stw	ra,8(sp)
    3ed4:	80000015 	stw	zero,0(r16)
    3ed8:	00107100 	call	10710 <sbrk>
    3edc:	00ffffc4 	movi	r3,-1
    3ee0:	10c00526 	beq	r2,r3,3ef8 <_sbrk_r+0x44>
    3ee4:	dfc00217 	ldw	ra,8(sp)
    3ee8:	dc400117 	ldw	r17,4(sp)
    3eec:	dc000017 	ldw	r16,0(sp)
    3ef0:	dec00304 	addi	sp,sp,12
    3ef4:	f800283a 	ret
    3ef8:	80c00017 	ldw	r3,0(r16)
    3efc:	183ff926 	beq	r3,zero,3ee4 <__alt_data_end+0xfffae7b4>
    3f00:	88c00015 	stw	r3,0(r17)
    3f04:	003ff706 	br	3ee4 <__alt_data_end+0xfffae7b4>

00003f08 <strlen>:
    3f08:	208000cc 	andi	r2,r4,3
    3f0c:	10002026 	beq	r2,zero,3f90 <strlen+0x88>
    3f10:	20800007 	ldb	r2,0(r4)
    3f14:	10002026 	beq	r2,zero,3f98 <strlen+0x90>
    3f18:	2005883a 	mov	r2,r4
    3f1c:	00000206 	br	3f28 <strlen+0x20>
    3f20:	10c00007 	ldb	r3,0(r2)
    3f24:	18001826 	beq	r3,zero,3f88 <strlen+0x80>
    3f28:	10800044 	addi	r2,r2,1
    3f2c:	10c000cc 	andi	r3,r2,3
    3f30:	183ffb1e 	bne	r3,zero,3f20 <__alt_data_end+0xfffae7f0>
    3f34:	10c00017 	ldw	r3,0(r2)
    3f38:	01ffbff4 	movhi	r7,65279
    3f3c:	39ffbfc4 	addi	r7,r7,-257
    3f40:	00ca303a 	nor	r5,zero,r3
    3f44:	01a02074 	movhi	r6,32897
    3f48:	19c7883a 	add	r3,r3,r7
    3f4c:	31a02004 	addi	r6,r6,-32640
    3f50:	1946703a 	and	r3,r3,r5
    3f54:	1986703a 	and	r3,r3,r6
    3f58:	1800091e 	bne	r3,zero,3f80 <strlen+0x78>
    3f5c:	10800104 	addi	r2,r2,4
    3f60:	10c00017 	ldw	r3,0(r2)
    3f64:	19cb883a 	add	r5,r3,r7
    3f68:	00c6303a 	nor	r3,zero,r3
    3f6c:	28c6703a 	and	r3,r5,r3
    3f70:	1986703a 	and	r3,r3,r6
    3f74:	183ff926 	beq	r3,zero,3f5c <__alt_data_end+0xfffae82c>
    3f78:	00000106 	br	3f80 <strlen+0x78>
    3f7c:	10800044 	addi	r2,r2,1
    3f80:	10c00007 	ldb	r3,0(r2)
    3f84:	183ffd1e 	bne	r3,zero,3f7c <__alt_data_end+0xfffae84c>
    3f88:	1105c83a 	sub	r2,r2,r4
    3f8c:	f800283a 	ret
    3f90:	2005883a 	mov	r2,r4
    3f94:	003fe706 	br	3f34 <__alt_data_end+0xfffae804>
    3f98:	0005883a 	mov	r2,zero
    3f9c:	f800283a 	ret

00003fa0 <___vfprintf_internal_r>:
    3fa0:	defeb604 	addi	sp,sp,-1320
    3fa4:	dfc14915 	stw	ra,1316(sp)
    3fa8:	ddc14715 	stw	r23,1308(sp)
    3fac:	dd814615 	stw	r22,1304(sp)
    3fb0:	202f883a 	mov	r23,r4
    3fb4:	282d883a 	mov	r22,r5
    3fb8:	d9812a15 	stw	r6,1192(sp)
    3fbc:	d9c12d15 	stw	r7,1204(sp)
    3fc0:	df014815 	stw	fp,1312(sp)
    3fc4:	dd414515 	stw	r21,1300(sp)
    3fc8:	dd014415 	stw	r20,1296(sp)
    3fcc:	dcc14315 	stw	r19,1292(sp)
    3fd0:	dc814215 	stw	r18,1288(sp)
    3fd4:	dc414115 	stw	r17,1284(sp)
    3fd8:	dc014015 	stw	r16,1280(sp)
    3fdc:	0008c200 	call	8c20 <_localeconv_r>
    3fe0:	10800017 	ldw	r2,0(r2)
    3fe4:	1009883a 	mov	r4,r2
    3fe8:	d8813515 	stw	r2,1236(sp)
    3fec:	0003f080 	call	3f08 <strlen>
    3ff0:	d8813815 	stw	r2,1248(sp)
    3ff4:	b8000226 	beq	r23,zero,4000 <___vfprintf_internal_r+0x60>
    3ff8:	b8800e17 	ldw	r2,56(r23)
    3ffc:	10010526 	beq	r2,zero,4414 <___vfprintf_internal_r+0x474>
    4000:	b0c0030b 	ldhu	r3,12(r22)
    4004:	1908000c 	andi	r4,r3,8192
    4008:	1805883a 	mov	r2,r3
    400c:	2000071e 	bne	r4,zero,402c <___vfprintf_internal_r+0x8c>
    4010:	b1001917 	ldw	r4,100(r22)
    4014:	18880014 	ori	r2,r3,8192
    4018:	00f7ffc4 	movi	r3,-8193
    401c:	20c8703a 	and	r4,r4,r3
    4020:	b080030d 	sth	r2,12(r22)
    4024:	1007883a 	mov	r3,r2
    4028:	b1001915 	stw	r4,100(r22)
    402c:	1100020c 	andi	r4,r2,8
    4030:	2000a826 	beq	r4,zero,42d4 <___vfprintf_internal_r+0x334>
    4034:	b1000417 	ldw	r4,16(r22)
    4038:	2000a626 	beq	r4,zero,42d4 <___vfprintf_internal_r+0x334>
    403c:	1080068c 	andi	r2,r2,26
    4040:	01000284 	movi	r4,10
    4044:	1100ac26 	beq	r2,r4,42f8 <___vfprintf_internal_r+0x358>
    4048:	d8c10e04 	addi	r3,sp,1080
    404c:	d9010dc4 	addi	r4,sp,1079
    4050:	d9400404 	addi	r5,sp,16
    4054:	05000074 	movhi	r20,1
    4058:	1905c83a 	sub	r2,r3,r4
    405c:	a50be684 	addi	r20,r20,12186
    4060:	d8c12815 	stw	r3,1184(sp)
    4064:	d9012915 	stw	r4,1188(sp)
    4068:	d9411e15 	stw	r5,1144(sp)
    406c:	d8012015 	stw	zero,1152(sp)
    4070:	d8011f15 	stw	zero,1148(sp)
    4074:	d8013315 	stw	zero,1228(sp)
    4078:	d8013715 	stw	zero,1244(sp)
    407c:	d8013915 	stw	zero,1252(sp)
    4080:	d8013b15 	stw	zero,1260(sp)
    4084:	d8013a15 	stw	zero,1256(sp)
    4088:	d8012f15 	stw	zero,1212(sp)
    408c:	2811883a 	mov	r8,r5
    4090:	d8813c15 	stw	r2,1264(sp)
    4094:	d8c12a17 	ldw	r3,1192(sp)
    4098:	18800007 	ldb	r2,0(r3)
    409c:	10021326 	beq	r2,zero,48ec <___vfprintf_internal_r+0x94c>
    40a0:	00c00944 	movi	r3,37
    40a4:	dc012a17 	ldw	r16,1192(sp)
    40a8:	10c0021e 	bne	r2,r3,40b4 <___vfprintf_internal_r+0x114>
    40ac:	00001606 	br	4108 <___vfprintf_internal_r+0x168>
    40b0:	10c08526 	beq	r2,r3,42c8 <___vfprintf_internal_r+0x328>
    40b4:	84000044 	addi	r16,r16,1
    40b8:	80800007 	ldb	r2,0(r16)
    40bc:	103ffc1e 	bne	r2,zero,40b0 <__alt_data_end+0xfffae980>
    40c0:	d9012a17 	ldw	r4,1192(sp)
    40c4:	8123c83a 	sub	r17,r16,r4
    40c8:	88000f26 	beq	r17,zero,4108 <___vfprintf_internal_r+0x168>
    40cc:	d8812a17 	ldw	r2,1192(sp)
    40d0:	d8c12017 	ldw	r3,1152(sp)
    40d4:	44400115 	stw	r17,4(r8)
    40d8:	40800015 	stw	r2,0(r8)
    40dc:	d8811f17 	ldw	r2,1148(sp)
    40e0:	1c47883a 	add	r3,r3,r17
    40e4:	d8c12015 	stw	r3,1152(sp)
    40e8:	10800044 	addi	r2,r2,1
    40ec:	d8811f15 	stw	r2,1148(sp)
    40f0:	00c001c4 	movi	r3,7
    40f4:	1880b516 	blt	r3,r2,43cc <___vfprintf_internal_r+0x42c>
    40f8:	42000204 	addi	r8,r8,8
    40fc:	d8c12f17 	ldw	r3,1212(sp)
    4100:	1c47883a 	add	r3,r3,r17
    4104:	d8c12f15 	stw	r3,1212(sp)
    4108:	80800007 	ldb	r2,0(r16)
    410c:	1000b626 	beq	r2,zero,43e8 <___vfprintf_internal_r+0x448>
    4110:	80800044 	addi	r2,r16,1
    4114:	84000047 	ldb	r16,1(r16)
    4118:	0027883a 	mov	r19,zero
    411c:	0039883a 	mov	fp,zero
    4120:	dcc12b05 	stb	r19,1196(sp)
    4124:	d8012785 	stb	zero,1182(sp)
    4128:	027fffc4 	movi	r9,-1
    412c:	d8012e15 	stw	zero,1208(sp)
    4130:	04401604 	movi	r17,88
    4134:	04800244 	movi	r18,9
    4138:	da012a15 	stw	r8,1192(sp)
    413c:	e027883a 	mov	r19,fp
    4140:	17000044 	addi	fp,r2,1
    4144:	80bff804 	addi	r2,r16,-32
    4148:	88831236 	bltu	r17,r2,4d94 <___vfprintf_internal_r+0xdf4>
    414c:	100490ba 	slli	r2,r2,2
    4150:	01000034 	movhi	r4,0
    4154:	21105904 	addi	r4,r4,16740
    4158:	1105883a 	add	r2,r2,r4
    415c:	10800017 	ldw	r2,0(r2)
    4160:	1000683a 	jmp	r2
    4164:	00004cb0 	cmpltui	zero,zero,306
    4168:	00004d94 	movui	zero,310
    416c:	00004d94 	movui	zero,310
    4170:	00004ccc 	andi	zero,zero,307
    4174:	00004d94 	movui	zero,310
    4178:	00004d94 	movui	zero,310
    417c:	00004d94 	movui	zero,310
    4180:	00004d94 	movui	zero,310
    4184:	00004d94 	movui	zero,310
    4188:	00004d94 	movui	zero,310
    418c:	00004cdc 	xori	zero,zero,307
    4190:	00004d04 	movi	zero,308
    4194:	00004d94 	movui	zero,310
    4198:	00004420 	cmpeqi	zero,zero,272
    419c:	00004430 	cmpltui	zero,zero,272
    41a0:	00004d94 	movui	zero,310
    41a4:	00004480 	call	448 <get_keycode+0xb4>
    41a8:	00004490 	cmplti	zero,zero,274
    41ac:	00004490 	cmplti	zero,zero,274
    41b0:	00004490 	cmplti	zero,zero,274
    41b4:	00004490 	cmplti	zero,zero,274
    41b8:	00004490 	cmplti	zero,zero,274
    41bc:	00004490 	cmplti	zero,zero,274
    41c0:	00004490 	cmplti	zero,zero,274
    41c4:	00004490 	cmplti	zero,zero,274
    41c8:	00004490 	cmplti	zero,zero,274
    41cc:	00004d94 	movui	zero,310
    41d0:	00004d94 	movui	zero,310
    41d4:	00004d94 	movui	zero,310
    41d8:	00004d94 	movui	zero,310
    41dc:	00004d94 	movui	zero,310
    41e0:	00004d94 	movui	zero,310
    41e4:	00004d94 	movui	zero,310
    41e8:	00004d94 	movui	zero,310
    41ec:	00004d94 	movui	zero,310
    41f0:	00004d94 	movui	zero,310
    41f4:	000044d4 	movui	zero,275
    41f8:	000048f4 	movhi	zero,291
    41fc:	00004d94 	movui	zero,310
    4200:	000048f4 	movhi	zero,291
    4204:	00004d94 	movui	zero,310
    4208:	00004d94 	movui	zero,310
    420c:	00004d94 	movui	zero,310
    4210:	00004d94 	movui	zero,310
    4214:	0000499c 	xori	zero,zero,294
    4218:	00004d94 	movui	zero,310
    421c:	00004d94 	movui	zero,310
    4220:	000049ac 	andhi	zero,zero,294
    4224:	00004d94 	movui	zero,310
    4228:	00004d94 	movui	zero,310
    422c:	00004d94 	movui	zero,310
    4230:	00004d94 	movui	zero,310
    4234:	00004d94 	movui	zero,310
    4238:	000049f0 	cmpltui	zero,zero,295
    423c:	00004d94 	movui	zero,310
    4240:	00004d94 	movui	zero,310
    4244:	00004a28 	cmpgeui	zero,zero,296
    4248:	00004d94 	movui	zero,310
    424c:	00004d94 	movui	zero,310
    4250:	00004d94 	movui	zero,310
    4254:	00004d94 	movui	zero,310
    4258:	00004d94 	movui	zero,310
    425c:	00004d94 	movui	zero,310
    4260:	00004d94 	movui	zero,310
    4264:	00004d94 	movui	zero,310
    4268:	00004d94 	movui	zero,310
    426c:	00004d94 	movui	zero,310
    4270:	00004c64 	muli	zero,zero,305
    4274:	00004c10 	cmplti	zero,zero,304
    4278:	000048f4 	movhi	zero,291
    427c:	000048f4 	movhi	zero,291
    4280:	000048f4 	movhi	zero,291
    4284:	00004c54 	movui	zero,305
    4288:	00004c10 	cmplti	zero,zero,304
    428c:	00004d94 	movui	zero,310
    4290:	00004d94 	movui	zero,310
    4294:	00004b2c 	andhi	zero,zero,300
    4298:	00004d94 	movui	zero,310
    429c:	00004b44 	movi	zero,301
    42a0:	00004b84 	movi	zero,302
    42a4:	00004bc4 	movi	zero,303
    42a8:	00004a90 	cmplti	zero,zero,298
    42ac:	00004d94 	movui	zero,310
    42b0:	00004d18 	cmpnei	zero,zero,308
    42b4:	00004d94 	movui	zero,310
    42b8:	00004aa0 	cmpeqi	zero,zero,298
    42bc:	00004d94 	movui	zero,310
    42c0:	00004d94 	movui	zero,310
    42c4:	00004ae0 	cmpeqi	zero,zero,299
    42c8:	d9412a17 	ldw	r5,1192(sp)
    42cc:	8163c83a 	sub	r17,r16,r5
    42d0:	003f7d06 	br	40c8 <__alt_data_end+0xfffae998>
    42d4:	b809883a 	mov	r4,r23
    42d8:	b00b883a 	mov	r5,r22
    42dc:	00060c00 	call	60c0 <__swsetup_r>
    42e0:	10002d1e 	bne	r2,zero,4398 <___vfprintf_internal_r+0x3f8>
    42e4:	b0c0030b 	ldhu	r3,12(r22)
    42e8:	01000284 	movi	r4,10
    42ec:	1805883a 	mov	r2,r3
    42f0:	1080068c 	andi	r2,r2,26
    42f4:	113f541e 	bne	r2,r4,4048 <__alt_data_end+0xfffae918>
    42f8:	b080038b 	ldhu	r2,14(r22)
    42fc:	113fffcc 	andi	r4,r2,65535
    4300:	2120001c 	xori	r4,r4,32768
    4304:	21200004 	addi	r4,r4,-32768
    4308:	203f4f16 	blt	r4,zero,4048 <__alt_data_end+0xfffae918>
    430c:	b2c01917 	ldw	r11,100(r22)
    4310:	b2800717 	ldw	r10,28(r22)
    4314:	b2400917 	ldw	r9,36(r22)
    4318:	d9812a17 	ldw	r6,1192(sp)
    431c:	d9c12d17 	ldw	r7,1204(sp)
    4320:	02010004 	movi	r8,1024
    4324:	18ffff4c 	andi	r3,r3,65533
    4328:	d881078d 	sth	r2,1054(sp)
    432c:	b809883a 	mov	r4,r23
    4330:	d8800404 	addi	r2,sp,16
    4334:	d9410404 	addi	r5,sp,1040
    4338:	d8c1070d 	sth	r3,1052(sp)
    433c:	dac11d15 	stw	r11,1140(sp)
    4340:	da810b15 	stw	r10,1068(sp)
    4344:	da410d15 	stw	r9,1076(sp)
    4348:	d8810415 	stw	r2,1040(sp)
    434c:	d8810815 	stw	r2,1056(sp)
    4350:	da010615 	stw	r8,1048(sp)
    4354:	da010915 	stw	r8,1060(sp)
    4358:	d8010a15 	stw	zero,1064(sp)
    435c:	0003fa00 	call	3fa0 <___vfprintf_internal_r>
    4360:	1021883a 	mov	r16,r2
    4364:	10000416 	blt	r2,zero,4378 <___vfprintf_internal_r+0x3d8>
    4368:	b809883a 	mov	r4,r23
    436c:	d9410404 	addi	r5,sp,1040
    4370:	0007b400 	call	7b40 <_fflush_r>
    4374:	1007301e 	bne	r2,zero,6038 <___vfprintf_internal_r+0x2098>
    4378:	d881070b 	ldhu	r2,1052(sp)
    437c:	1080100c 	andi	r2,r2,64
    4380:	10000326 	beq	r2,zero,4390 <___vfprintf_internal_r+0x3f0>
    4384:	b080030b 	ldhu	r2,12(r22)
    4388:	10801014 	ori	r2,r2,64
    438c:	b080030d 	sth	r2,12(r22)
    4390:	8005883a 	mov	r2,r16
    4394:	00000106 	br	439c <___vfprintf_internal_r+0x3fc>
    4398:	00bfffc4 	movi	r2,-1
    439c:	dfc14917 	ldw	ra,1316(sp)
    43a0:	df014817 	ldw	fp,1312(sp)
    43a4:	ddc14717 	ldw	r23,1308(sp)
    43a8:	dd814617 	ldw	r22,1304(sp)
    43ac:	dd414517 	ldw	r21,1300(sp)
    43b0:	dd014417 	ldw	r20,1296(sp)
    43b4:	dcc14317 	ldw	r19,1292(sp)
    43b8:	dc814217 	ldw	r18,1288(sp)
    43bc:	dc414117 	ldw	r17,1284(sp)
    43c0:	dc014017 	ldw	r16,1280(sp)
    43c4:	dec14a04 	addi	sp,sp,1320
    43c8:	f800283a 	ret
    43cc:	b809883a 	mov	r4,r23
    43d0:	b00b883a 	mov	r5,r22
    43d4:	d9811e04 	addi	r6,sp,1144
    43d8:	000abe40 	call	abe4 <__sprint_r>
    43dc:	1000081e 	bne	r2,zero,4400 <___vfprintf_internal_r+0x460>
    43e0:	da000404 	addi	r8,sp,16
    43e4:	003f4506 	br	40fc <__alt_data_end+0xfffae9cc>
    43e8:	d8812017 	ldw	r2,1152(sp)
    43ec:	10000426 	beq	r2,zero,4400 <___vfprintf_internal_r+0x460>
    43f0:	b809883a 	mov	r4,r23
    43f4:	b00b883a 	mov	r5,r22
    43f8:	d9811e04 	addi	r6,sp,1144
    43fc:	000abe40 	call	abe4 <__sprint_r>
    4400:	b080030b 	ldhu	r2,12(r22)
    4404:	1080100c 	andi	r2,r2,64
    4408:	103fe31e 	bne	r2,zero,4398 <__alt_data_end+0xfffaec68>
    440c:	d8812f17 	ldw	r2,1212(sp)
    4410:	003fe206 	br	439c <__alt_data_end+0xfffaec6c>
    4414:	b809883a 	mov	r4,r23
    4418:	00080fc0 	call	80fc <__sinit>
    441c:	003ef806 	br	4000 <__alt_data_end+0xfffae8d0>
    4420:	e005883a 	mov	r2,fp
    4424:	9cc00114 	ori	r19,r19,4
    4428:	e4000007 	ldb	r16,0(fp)
    442c:	003f4406 	br	4140 <__alt_data_end+0xfffaea10>
    4430:	e4000007 	ldb	r16,0(fp)
    4434:	01000a84 	movi	r4,42
    4438:	e0800044 	addi	r2,fp,1
    443c:	8106f626 	beq	r16,r4,6018 <___vfprintf_internal_r+0x2078>
    4440:	857ff404 	addi	r21,r16,-48
    4444:	1039883a 	mov	fp,r2
    4448:	0013883a 	mov	r9,zero
    444c:	957f3d36 	bltu	r18,r21,4144 <__alt_data_end+0xfffaea14>
    4450:	0009883a 	mov	r4,zero
    4454:	01400284 	movi	r5,10
    4458:	000d6f80 	call	d6f8 <__mulsi3>
    445c:	e4000007 	ldb	r16,0(fp)
    4460:	a889883a 	add	r4,r21,r2
    4464:	e7000044 	addi	fp,fp,1
    4468:	857ff404 	addi	r21,r16,-48
    446c:	957ff92e 	bgeu	r18,r21,4454 <__alt_data_end+0xfffaed24>
    4470:	2013883a 	mov	r9,r4
    4474:	203f330e 	bge	r4,zero,4144 <__alt_data_end+0xfffaea14>
    4478:	027fffc4 	movi	r9,-1
    447c:	003f3106 	br	4144 <__alt_data_end+0xfffaea14>
    4480:	9cc02014 	ori	r19,r19,128
    4484:	e005883a 	mov	r2,fp
    4488:	e4000007 	ldb	r16,0(fp)
    448c:	003f2c06 	br	4140 <__alt_data_end+0xfffaea10>
    4490:	857ff404 	addi	r21,r16,-48
    4494:	d8012e15 	stw	zero,1208(sp)
    4498:	e021883a 	mov	r16,fp
    449c:	0009883a 	mov	r4,zero
    44a0:	da412c15 	stw	r9,1200(sp)
    44a4:	01400284 	movi	r5,10
    44a8:	000d6f80 	call	d6f8 <__mulsi3>
    44ac:	81400007 	ldb	r5,0(r16)
    44b0:	1549883a 	add	r4,r2,r21
    44b4:	e7000044 	addi	fp,fp,1
    44b8:	2d7ff404 	addi	r21,r5,-48
    44bc:	e021883a 	mov	r16,fp
    44c0:	957ff82e 	bgeu	r18,r21,44a4 <__alt_data_end+0xfffaed74>
    44c4:	2821883a 	mov	r16,r5
    44c8:	d9012e15 	stw	r4,1208(sp)
    44cc:	da412c17 	ldw	r9,1200(sp)
    44d0:	003f1c06 	br	4144 <__alt_data_end+0xfffaea14>
    44d4:	da012a17 	ldw	r8,1192(sp)
    44d8:	df012a15 	stw	fp,1192(sp)
    44dc:	9839883a 	mov	fp,r19
    44e0:	dcc12b03 	ldbu	r19,1196(sp)
    44e4:	e7000414 	ori	fp,fp,16
    44e8:	e080080c 	andi	r2,fp,32
    44ec:	dcc12785 	stb	r19,1182(sp)
    44f0:	d8c12d17 	ldw	r3,1204(sp)
    44f4:	1001ce26 	beq	r2,zero,4c30 <___vfprintf_internal_r+0xc90>
    44f8:	d9012d17 	ldw	r4,1204(sp)
    44fc:	18800117 	ldw	r2,4(r3)
    4500:	1c800017 	ldw	r18,0(r3)
    4504:	21000204 	addi	r4,r4,8
    4508:	d9012d15 	stw	r4,1204(sp)
    450c:	102b883a 	mov	r21,r2
    4510:	10044916 	blt	r2,zero,5638 <___vfprintf_internal_r+0x1698>
    4514:	dcc12783 	ldbu	r19,1182(sp)
    4518:	da413215 	stw	r9,1224(sp)
    451c:	00800044 	movi	r2,1
    4520:	9546b03a 	or	r3,r18,r21
    4524:	48000216 	blt	r9,zero,4530 <___vfprintf_internal_r+0x590>
    4528:	013fdfc4 	movi	r4,-129
    452c:	e138703a 	and	fp,fp,r4
    4530:	1802251e 	bne	r3,zero,4dc8 <___vfprintf_internal_r+0xe28>
    4534:	48031726 	beq	r9,zero,5194 <___vfprintf_internal_r+0x11f4>
    4538:	10803fcc 	andi	r2,r2,255
    453c:	00c00044 	movi	r3,1
    4540:	10c24526 	beq	r2,r3,4e58 <___vfprintf_internal_r+0xeb8>
    4544:	00c00084 	movi	r3,2
    4548:	10c33426 	beq	r2,r3,521c <___vfprintf_internal_r+0x127c>
    454c:	d8c10e04 	addi	r3,sp,1080
    4550:	9008d0fa 	srli	r4,r18,3
    4554:	a80a977a 	slli	r5,r21,29
    4558:	a82ad0fa 	srli	r21,r21,3
    455c:	948001cc 	andi	r18,r18,7
    4560:	90800c04 	addi	r2,r18,48
    4564:	18ffffc4 	addi	r3,r3,-1
    4568:	2924b03a 	or	r18,r5,r4
    456c:	18800005 	stb	r2,0(r3)
    4570:	9548b03a 	or	r4,r18,r21
    4574:	203ff61e 	bne	r4,zero,4550 <__alt_data_end+0xfffaee20>
    4578:	e100004c 	andi	r4,fp,1
    457c:	d8c13115 	stw	r3,1220(sp)
    4580:	20039a1e 	bne	r4,zero,53ec <___vfprintf_internal_r+0x144c>
    4584:	d8812817 	ldw	r2,1184(sp)
    4588:	10e3c83a 	sub	r17,r2,r3
    458c:	8805883a 	mov	r2,r17
    4590:	8a40010e 	bge	r17,r9,4598 <___vfprintf_internal_r+0x5f8>
    4594:	4805883a 	mov	r2,r9
    4598:	d8812b15 	stw	r2,1196(sp)
    459c:	d8013415 	stw	zero,1232(sp)
    45a0:	98803fcc 	andi	r2,r19,255
    45a4:	1080201c 	xori	r2,r2,128
    45a8:	10bfe004 	addi	r2,r2,-128
    45ac:	10000326 	beq	r2,zero,45bc <___vfprintf_internal_r+0x61c>
    45b0:	d8c12b17 	ldw	r3,1196(sp)
    45b4:	18c00044 	addi	r3,r3,1
    45b8:	d8c12b15 	stw	r3,1196(sp)
    45bc:	e0c0008c 	andi	r3,fp,2
    45c0:	d8c12c15 	stw	r3,1200(sp)
    45c4:	18000326 	beq	r3,zero,45d4 <___vfprintf_internal_r+0x634>
    45c8:	d8c12b17 	ldw	r3,1196(sp)
    45cc:	18c00084 	addi	r3,r3,2
    45d0:	d8c12b15 	stw	r3,1196(sp)
    45d4:	e0c0210c 	andi	r3,fp,132
    45d8:	d8c13015 	stw	r3,1216(sp)
    45dc:	1801f81e 	bne	r3,zero,4dc0 <___vfprintf_internal_r+0xe20>
    45e0:	d9012e17 	ldw	r4,1208(sp)
    45e4:	d8c12b17 	ldw	r3,1196(sp)
    45e8:	20ebc83a 	sub	r21,r4,r3
    45ec:	0541f40e 	bge	zero,r21,4dc0 <___vfprintf_internal_r+0xe20>
    45f0:	02400404 	movi	r9,16
    45f4:	d8c12017 	ldw	r3,1152(sp)
    45f8:	d8811f17 	ldw	r2,1148(sp)
    45fc:	4d45750e 	bge	r9,r21,5bd4 <___vfprintf_internal_r+0x1c34>
    4600:	01400074 	movhi	r5,1
    4604:	294bea84 	addi	r5,r5,12202
    4608:	d9413615 	stw	r5,1240(sp)
    460c:	4827883a 	mov	r19,r9
    4610:	048001c4 	movi	r18,7
    4614:	00000306 	br	4624 <___vfprintf_internal_r+0x684>
    4618:	ad7ffc04 	addi	r21,r21,-16
    461c:	42000204 	addi	r8,r8,8
    4620:	9d40130e 	bge	r19,r21,4670 <___vfprintf_internal_r+0x6d0>
    4624:	01000074 	movhi	r4,1
    4628:	18c00404 	addi	r3,r3,16
    462c:	10800044 	addi	r2,r2,1
    4630:	210bea84 	addi	r4,r4,12202
    4634:	41000015 	stw	r4,0(r8)
    4638:	44c00115 	stw	r19,4(r8)
    463c:	d8c12015 	stw	r3,1152(sp)
    4640:	d8811f15 	stw	r2,1148(sp)
    4644:	90bff40e 	bge	r18,r2,4618 <__alt_data_end+0xfffaeee8>
    4648:	b809883a 	mov	r4,r23
    464c:	b00b883a 	mov	r5,r22
    4650:	d9811e04 	addi	r6,sp,1144
    4654:	000abe40 	call	abe4 <__sprint_r>
    4658:	103f691e 	bne	r2,zero,4400 <__alt_data_end+0xfffaecd0>
    465c:	ad7ffc04 	addi	r21,r21,-16
    4660:	d8c12017 	ldw	r3,1152(sp)
    4664:	d8811f17 	ldw	r2,1148(sp)
    4668:	da000404 	addi	r8,sp,16
    466c:	9d7fed16 	blt	r19,r21,4624 <__alt_data_end+0xfffaeef4>
    4670:	d9413617 	ldw	r5,1240(sp)
    4674:	a8c7883a 	add	r3,r21,r3
    4678:	10800044 	addi	r2,r2,1
    467c:	41400015 	stw	r5,0(r8)
    4680:	45400115 	stw	r21,4(r8)
    4684:	d8c12015 	stw	r3,1152(sp)
    4688:	d8811f15 	stw	r2,1148(sp)
    468c:	010001c4 	movi	r4,7
    4690:	20832b16 	blt	r4,r2,5340 <___vfprintf_internal_r+0x13a0>
    4694:	d8812787 	ldb	r2,1182(sp)
    4698:	42000204 	addi	r8,r8,8
    469c:	10000c26 	beq	r2,zero,46d0 <___vfprintf_internal_r+0x730>
    46a0:	d8811f17 	ldw	r2,1148(sp)
    46a4:	d9012784 	addi	r4,sp,1182
    46a8:	18c00044 	addi	r3,r3,1
    46ac:	10800044 	addi	r2,r2,1
    46b0:	41000015 	stw	r4,0(r8)
    46b4:	01000044 	movi	r4,1
    46b8:	41000115 	stw	r4,4(r8)
    46bc:	d8c12015 	stw	r3,1152(sp)
    46c0:	d8811f15 	stw	r2,1148(sp)
    46c4:	010001c4 	movi	r4,7
    46c8:	2082c416 	blt	r4,r2,51dc <___vfprintf_internal_r+0x123c>
    46cc:	42000204 	addi	r8,r8,8
    46d0:	d8812c17 	ldw	r2,1200(sp)
    46d4:	10000c26 	beq	r2,zero,4708 <___vfprintf_internal_r+0x768>
    46d8:	d8811f17 	ldw	r2,1148(sp)
    46dc:	d9012704 	addi	r4,sp,1180
    46e0:	18c00084 	addi	r3,r3,2
    46e4:	10800044 	addi	r2,r2,1
    46e8:	41000015 	stw	r4,0(r8)
    46ec:	01000084 	movi	r4,2
    46f0:	41000115 	stw	r4,4(r8)
    46f4:	d8c12015 	stw	r3,1152(sp)
    46f8:	d8811f15 	stw	r2,1148(sp)
    46fc:	010001c4 	movi	r4,7
    4700:	2082be16 	blt	r4,r2,51fc <___vfprintf_internal_r+0x125c>
    4704:	42000204 	addi	r8,r8,8
    4708:	d9013017 	ldw	r4,1216(sp)
    470c:	00802004 	movi	r2,128
    4710:	20822026 	beq	r4,r2,4f94 <___vfprintf_internal_r+0xff4>
    4714:	d9413217 	ldw	r5,1224(sp)
    4718:	2c67c83a 	sub	r19,r5,r17
    471c:	04c0260e 	bge	zero,r19,47b8 <___vfprintf_internal_r+0x818>
    4720:	05400404 	movi	r21,16
    4724:	d8811f17 	ldw	r2,1148(sp)
    4728:	acc4720e 	bge	r21,r19,58f4 <___vfprintf_internal_r+0x1954>
    472c:	01400074 	movhi	r5,1
    4730:	294be684 	addi	r5,r5,12186
    4734:	d9412c15 	stw	r5,1200(sp)
    4738:	048001c4 	movi	r18,7
    473c:	00000306 	br	474c <___vfprintf_internal_r+0x7ac>
    4740:	9cfffc04 	addi	r19,r19,-16
    4744:	42000204 	addi	r8,r8,8
    4748:	acc0110e 	bge	r21,r19,4790 <___vfprintf_internal_r+0x7f0>
    474c:	18c00404 	addi	r3,r3,16
    4750:	10800044 	addi	r2,r2,1
    4754:	45000015 	stw	r20,0(r8)
    4758:	45400115 	stw	r21,4(r8)
    475c:	d8c12015 	stw	r3,1152(sp)
    4760:	d8811f15 	stw	r2,1148(sp)
    4764:	90bff60e 	bge	r18,r2,4740 <__alt_data_end+0xfffaf010>
    4768:	b809883a 	mov	r4,r23
    476c:	b00b883a 	mov	r5,r22
    4770:	d9811e04 	addi	r6,sp,1144
    4774:	000abe40 	call	abe4 <__sprint_r>
    4778:	103f211e 	bne	r2,zero,4400 <__alt_data_end+0xfffaecd0>
    477c:	9cfffc04 	addi	r19,r19,-16
    4780:	d8c12017 	ldw	r3,1152(sp)
    4784:	d8811f17 	ldw	r2,1148(sp)
    4788:	da000404 	addi	r8,sp,16
    478c:	acffef16 	blt	r21,r19,474c <__alt_data_end+0xfffaf01c>
    4790:	d9012c17 	ldw	r4,1200(sp)
    4794:	1cc7883a 	add	r3,r3,r19
    4798:	10800044 	addi	r2,r2,1
    479c:	41000015 	stw	r4,0(r8)
    47a0:	44c00115 	stw	r19,4(r8)
    47a4:	d8c12015 	stw	r3,1152(sp)
    47a8:	d8811f15 	stw	r2,1148(sp)
    47ac:	010001c4 	movi	r4,7
    47b0:	20828216 	blt	r4,r2,51bc <___vfprintf_internal_r+0x121c>
    47b4:	42000204 	addi	r8,r8,8
    47b8:	e080400c 	andi	r2,fp,256
    47bc:	1001ac1e 	bne	r2,zero,4e70 <___vfprintf_internal_r+0xed0>
    47c0:	d8811f17 	ldw	r2,1148(sp)
    47c4:	d9413117 	ldw	r5,1220(sp)
    47c8:	1c47883a 	add	r3,r3,r17
    47cc:	10800044 	addi	r2,r2,1
    47d0:	41400015 	stw	r5,0(r8)
    47d4:	44400115 	stw	r17,4(r8)
    47d8:	d8c12015 	stw	r3,1152(sp)
    47dc:	d8811f15 	stw	r2,1148(sp)
    47e0:	010001c4 	movi	r4,7
    47e4:	20825d16 	blt	r4,r2,515c <___vfprintf_internal_r+0x11bc>
    47e8:	42000204 	addi	r8,r8,8
    47ec:	e080010c 	andi	r2,fp,4
    47f0:	10003126 	beq	r2,zero,48b8 <___vfprintf_internal_r+0x918>
    47f4:	d8812e17 	ldw	r2,1208(sp)
    47f8:	d9012b17 	ldw	r4,1196(sp)
    47fc:	1121c83a 	sub	r16,r2,r4
    4800:	04002d0e 	bge	zero,r16,48b8 <___vfprintf_internal_r+0x918>
    4804:	04400404 	movi	r17,16
    4808:	d8811f17 	ldw	r2,1148(sp)
    480c:	8c05340e 	bge	r17,r16,5ce0 <___vfprintf_internal_r+0x1d40>
    4810:	01000074 	movhi	r4,1
    4814:	210bea84 	addi	r4,r4,12202
    4818:	d9013615 	stw	r4,1240(sp)
    481c:	048001c4 	movi	r18,7
    4820:	00000306 	br	4830 <___vfprintf_internal_r+0x890>
    4824:	843ffc04 	addi	r16,r16,-16
    4828:	42000204 	addi	r8,r8,8
    482c:	8c00130e 	bge	r17,r16,487c <___vfprintf_internal_r+0x8dc>
    4830:	01400074 	movhi	r5,1
    4834:	18c00404 	addi	r3,r3,16
    4838:	10800044 	addi	r2,r2,1
    483c:	294bea84 	addi	r5,r5,12202
    4840:	41400015 	stw	r5,0(r8)
    4844:	44400115 	stw	r17,4(r8)
    4848:	d8c12015 	stw	r3,1152(sp)
    484c:	d8811f15 	stw	r2,1148(sp)
    4850:	90bff40e 	bge	r18,r2,4824 <__alt_data_end+0xfffaf0f4>
    4854:	b809883a 	mov	r4,r23
    4858:	b00b883a 	mov	r5,r22
    485c:	d9811e04 	addi	r6,sp,1144
    4860:	000abe40 	call	abe4 <__sprint_r>
    4864:	103ee61e 	bne	r2,zero,4400 <__alt_data_end+0xfffaecd0>
    4868:	843ffc04 	addi	r16,r16,-16
    486c:	d8c12017 	ldw	r3,1152(sp)
    4870:	d8811f17 	ldw	r2,1148(sp)
    4874:	da000404 	addi	r8,sp,16
    4878:	8c3fed16 	blt	r17,r16,4830 <__alt_data_end+0xfffaf100>
    487c:	d9013617 	ldw	r4,1240(sp)
    4880:	1c07883a 	add	r3,r3,r16
    4884:	10800044 	addi	r2,r2,1
    4888:	41000015 	stw	r4,0(r8)
    488c:	44000115 	stw	r16,4(r8)
    4890:	d8c12015 	stw	r3,1152(sp)
    4894:	d8811f15 	stw	r2,1148(sp)
    4898:	010001c4 	movi	r4,7
    489c:	2080060e 	bge	r4,r2,48b8 <___vfprintf_internal_r+0x918>
    48a0:	b809883a 	mov	r4,r23
    48a4:	b00b883a 	mov	r5,r22
    48a8:	d9811e04 	addi	r6,sp,1144
    48ac:	000abe40 	call	abe4 <__sprint_r>
    48b0:	103ed31e 	bne	r2,zero,4400 <__alt_data_end+0xfffaecd0>
    48b4:	d8c12017 	ldw	r3,1152(sp)
    48b8:	df012b17 	ldw	fp,1196(sp)
    48bc:	d9412e17 	ldw	r5,1208(sp)
    48c0:	e140010e 	bge	fp,r5,48c8 <___vfprintf_internal_r+0x928>
    48c4:	2839883a 	mov	fp,r5
    48c8:	d8812f17 	ldw	r2,1212(sp)
    48cc:	1705883a 	add	r2,r2,fp
    48d0:	d8812f15 	stw	r2,1212(sp)
    48d4:	1802291e 	bne	r3,zero,517c <___vfprintf_internal_r+0x11dc>
    48d8:	d8c12a17 	ldw	r3,1192(sp)
    48dc:	d8011f15 	stw	zero,1148(sp)
    48e0:	da000404 	addi	r8,sp,16
    48e4:	18800007 	ldb	r2,0(r3)
    48e8:	103ded1e 	bne	r2,zero,40a0 <__alt_data_end+0xfffae970>
    48ec:	dc012a17 	ldw	r16,1192(sp)
    48f0:	003e0506 	br	4108 <__alt_data_end+0xfffae9d8>
    48f4:	d9012d17 	ldw	r4,1204(sp)
    48f8:	d9412d17 	ldw	r5,1204(sp)
    48fc:	da012a17 	ldw	r8,1192(sp)
    4900:	21000017 	ldw	r4,0(r4)
    4904:	29400117 	ldw	r5,4(r5)
    4908:	df012a15 	stw	fp,1192(sp)
    490c:	9839883a 	mov	fp,r19
    4910:	dcc12b03 	ldbu	r19,1196(sp)
    4914:	d9013715 	stw	r4,1244(sp)
    4918:	d9413915 	stw	r5,1252(sp)
    491c:	da013f15 	stw	r8,1276(sp)
    4920:	da413e15 	stw	r9,1272(sp)
    4924:	dcc12785 	stb	r19,1182(sp)
    4928:	000a8940 	call	a894 <__fpclassifyd>
    492c:	d8c12d17 	ldw	r3,1204(sp)
    4930:	04400044 	movi	r17,1
    4934:	da013f17 	ldw	r8,1276(sp)
    4938:	1c800204 	addi	r18,r3,8
    493c:	da413e17 	ldw	r9,1272(sp)
    4940:	d9013717 	ldw	r4,1244(sp)
    4944:	d9413917 	ldw	r5,1252(sp)
    4948:	1443451e 	bne	r2,r17,5660 <___vfprintf_internal_r+0x16c0>
    494c:	000d883a 	mov	r6,zero
    4950:	000f883a 	mov	r7,zero
    4954:	000eaa00 	call	eaa0 <__ledf2>
    4958:	da013f17 	ldw	r8,1276(sp)
    495c:	1004fe16 	blt	r2,zero,5d58 <___vfprintf_internal_r+0x1db8>
    4960:	dcc12783 	ldbu	r19,1182(sp)
    4964:	008011c4 	movi	r2,71
    4968:	14045d0e 	bge	r2,r16,5ae0 <___vfprintf_internal_r+0x1b40>
    496c:	01400074 	movhi	r5,1
    4970:	294bd704 	addi	r5,r5,12124
    4974:	d9413115 	stw	r5,1220(sp)
    4978:	00c000c4 	movi	r3,3
    497c:	00bfdfc4 	movi	r2,-129
    4980:	d8c12b15 	stw	r3,1196(sp)
    4984:	e0b8703a 	and	fp,fp,r2
    4988:	dc812d15 	stw	r18,1204(sp)
    498c:	1823883a 	mov	r17,r3
    4990:	d8013215 	stw	zero,1224(sp)
    4994:	d8013415 	stw	zero,1232(sp)
    4998:	003f0106 	br	45a0 <__alt_data_end+0xfffaee70>
    499c:	9cc00214 	ori	r19,r19,8
    49a0:	e005883a 	mov	r2,fp
    49a4:	e4000007 	ldb	r16,0(fp)
    49a8:	003de506 	br	4140 <__alt_data_end+0xfffaea10>
    49ac:	da012a17 	ldw	r8,1192(sp)
    49b0:	df012a15 	stw	fp,1192(sp)
    49b4:	9f000414 	ori	fp,r19,16
    49b8:	e0c0080c 	andi	r3,fp,32
    49bc:	d8812d17 	ldw	r2,1204(sp)
    49c0:	18007626 	beq	r3,zero,4b9c <___vfprintf_internal_r+0xbfc>
    49c4:	d9412d17 	ldw	r5,1204(sp)
    49c8:	14800017 	ldw	r18,0(r2)
    49cc:	15400117 	ldw	r21,4(r2)
    49d0:	29400204 	addi	r5,r5,8
    49d4:	d9412d15 	stw	r5,1204(sp)
    49d8:	0005883a 	mov	r2,zero
    49dc:	9546b03a 	or	r3,r18,r21
    49e0:	d8012785 	stb	zero,1182(sp)
    49e4:	da413215 	stw	r9,1224(sp)
    49e8:	0027883a 	mov	r19,zero
    49ec:	003ecd06 	br	4524 <__alt_data_end+0xfffaedf4>
    49f0:	da012a17 	ldw	r8,1192(sp)
    49f4:	df012a15 	stw	fp,1192(sp)
    49f8:	9f000414 	ori	fp,r19,16
    49fc:	e0c0080c 	andi	r3,fp,32
    4a00:	d8812d17 	ldw	r2,1204(sp)
    4a04:	18002c26 	beq	r3,zero,4ab8 <___vfprintf_internal_r+0xb18>
    4a08:	d9012d17 	ldw	r4,1204(sp)
    4a0c:	14800017 	ldw	r18,0(r2)
    4a10:	15400117 	ldw	r21,4(r2)
    4a14:	21000204 	addi	r4,r4,8
    4a18:	d9012d15 	stw	r4,1204(sp)
    4a1c:	00800044 	movi	r2,1
    4a20:	9546b03a 	or	r3,r18,r21
    4a24:	003fee06 	br	49e0 <__alt_data_end+0xfffaf2b0>
    4a28:	da012a17 	ldw	r8,1192(sp)
    4a2c:	df012a15 	stw	fp,1192(sp)
    4a30:	9839883a 	mov	fp,r19
    4a34:	dcc12b03 	ldbu	r19,1196(sp)
    4a38:	01400074 	movhi	r5,1
    4a3c:	294bda04 	addi	r5,r5,12136
    4a40:	dcc12785 	stb	r19,1182(sp)
    4a44:	d9413b15 	stw	r5,1260(sp)
    4a48:	e0c0080c 	andi	r3,fp,32
    4a4c:	d8812d17 	ldw	r2,1204(sp)
    4a50:	18002e26 	beq	r3,zero,4b0c <___vfprintf_internal_r+0xb6c>
    4a54:	d9412d17 	ldw	r5,1204(sp)
    4a58:	14800017 	ldw	r18,0(r2)
    4a5c:	15400117 	ldw	r21,4(r2)
    4a60:	29400204 	addi	r5,r5,8
    4a64:	d9412d15 	stw	r5,1204(sp)
    4a68:	e080004c 	andi	r2,fp,1
    4a6c:	10025c26 	beq	r2,zero,53e0 <___vfprintf_internal_r+0x1440>
    4a70:	9546b03a 	or	r3,r18,r21
    4a74:	18038f26 	beq	r3,zero,58b4 <___vfprintf_internal_r+0x1914>
    4a78:	00800c04 	movi	r2,48
    4a7c:	d8812705 	stb	r2,1180(sp)
    4a80:	dc012745 	stb	r16,1181(sp)
    4a84:	e7000094 	ori	fp,fp,2
    4a88:	00800084 	movi	r2,2
    4a8c:	003fd406 	br	49e0 <__alt_data_end+0xfffaf2b0>
    4a90:	9cc00814 	ori	r19,r19,32
    4a94:	e005883a 	mov	r2,fp
    4a98:	e4000007 	ldb	r16,0(fp)
    4a9c:	003da806 	br	4140 <__alt_data_end+0xfffaea10>
    4aa0:	da012a17 	ldw	r8,1192(sp)
    4aa4:	df012a15 	stw	fp,1192(sp)
    4aa8:	9839883a 	mov	fp,r19
    4aac:	e0c0080c 	andi	r3,fp,32
    4ab0:	d8812d17 	ldw	r2,1204(sp)
    4ab4:	183fd41e 	bne	r3,zero,4a08 <__alt_data_end+0xfffaf2d8>
    4ab8:	e0c0040c 	andi	r3,fp,16
    4abc:	18035f26 	beq	r3,zero,583c <___vfprintf_internal_r+0x189c>
    4ac0:	d9412d17 	ldw	r5,1204(sp)
    4ac4:	14800017 	ldw	r18,0(r2)
    4ac8:	002b883a 	mov	r21,zero
    4acc:	29400104 	addi	r5,r5,4
    4ad0:	d9412d15 	stw	r5,1204(sp)
    4ad4:	00800044 	movi	r2,1
    4ad8:	9007883a 	mov	r3,r18
    4adc:	003fc006 	br	49e0 <__alt_data_end+0xfffaf2b0>
    4ae0:	da012a17 	ldw	r8,1192(sp)
    4ae4:	df012a15 	stw	fp,1192(sp)
    4ae8:	9839883a 	mov	fp,r19
    4aec:	dcc12b03 	ldbu	r19,1196(sp)
    4af0:	01000074 	movhi	r4,1
    4af4:	210bdf04 	addi	r4,r4,12156
    4af8:	d9013b15 	stw	r4,1260(sp)
    4afc:	dcc12785 	stb	r19,1182(sp)
    4b00:	e0c0080c 	andi	r3,fp,32
    4b04:	d8812d17 	ldw	r2,1204(sp)
    4b08:	183fd21e 	bne	r3,zero,4a54 <__alt_data_end+0xfffaf324>
    4b0c:	e0c0040c 	andi	r3,fp,16
    4b10:	18035426 	beq	r3,zero,5864 <___vfprintf_internal_r+0x18c4>
    4b14:	d8c12d17 	ldw	r3,1204(sp)
    4b18:	14800017 	ldw	r18,0(r2)
    4b1c:	002b883a 	mov	r21,zero
    4b20:	18c00104 	addi	r3,r3,4
    4b24:	d8c12d15 	stw	r3,1204(sp)
    4b28:	003fcf06 	br	4a68 <__alt_data_end+0xfffaf338>
    4b2c:	e4000007 	ldb	r16,0(fp)
    4b30:	00801b04 	movi	r2,108
    4b34:	8083f726 	beq	r16,r2,5b14 <___vfprintf_internal_r+0x1b74>
    4b38:	9cc00414 	ori	r19,r19,16
    4b3c:	e005883a 	mov	r2,fp
    4b40:	003d7f06 	br	4140 <__alt_data_end+0xfffaea10>
    4b44:	da012a17 	ldw	r8,1192(sp)
    4b48:	df012a15 	stw	fp,1192(sp)
    4b4c:	9839883a 	mov	fp,r19
    4b50:	dcc12b03 	ldbu	r19,1196(sp)
    4b54:	e080080c 	andi	r2,fp,32
    4b58:	dcc12785 	stb	r19,1182(sp)
    4b5c:	10032226 	beq	r2,zero,57e8 <___vfprintf_internal_r+0x1848>
    4b60:	d9412d17 	ldw	r5,1204(sp)
    4b64:	d9012f17 	ldw	r4,1212(sp)
    4b68:	28800017 	ldw	r2,0(r5)
    4b6c:	2007d7fa 	srai	r3,r4,31
    4b70:	29400104 	addi	r5,r5,4
    4b74:	d9412d15 	stw	r5,1204(sp)
    4b78:	11000015 	stw	r4,0(r2)
    4b7c:	10c00115 	stw	r3,4(r2)
    4b80:	003d4406 	br	4094 <__alt_data_end+0xfffae964>
    4b84:	da012a17 	ldw	r8,1192(sp)
    4b88:	df012a15 	stw	fp,1192(sp)
    4b8c:	9839883a 	mov	fp,r19
    4b90:	e0c0080c 	andi	r3,fp,32
    4b94:	d8812d17 	ldw	r2,1204(sp)
    4b98:	183f8a1e 	bne	r3,zero,49c4 <__alt_data_end+0xfffaf294>
    4b9c:	e0c0040c 	andi	r3,fp,16
    4ba0:	18031c26 	beq	r3,zero,5814 <___vfprintf_internal_r+0x1874>
    4ba4:	14800017 	ldw	r18,0(r2)
    4ba8:	d8812d17 	ldw	r2,1204(sp)
    4bac:	002b883a 	mov	r21,zero
    4bb0:	9007883a 	mov	r3,r18
    4bb4:	10800104 	addi	r2,r2,4
    4bb8:	d8812d15 	stw	r2,1204(sp)
    4bbc:	0005883a 	mov	r2,zero
    4bc0:	003f8706 	br	49e0 <__alt_data_end+0xfffaf2b0>
    4bc4:	d9412d17 	ldw	r5,1204(sp)
    4bc8:	00800c04 	movi	r2,48
    4bcc:	d8812705 	stb	r2,1180(sp)
    4bd0:	2c800017 	ldw	r18,0(r5)
    4bd4:	00801e04 	movi	r2,120
    4bd8:	d8812745 	stb	r2,1181(sp)
    4bdc:	00800074 	movhi	r2,1
    4be0:	108bdf04 	addi	r2,r2,12156
    4be4:	29400104 	addi	r5,r5,4
    4be8:	da012a17 	ldw	r8,1192(sp)
    4bec:	d8813b15 	stw	r2,1260(sp)
    4bf0:	df012a15 	stw	fp,1192(sp)
    4bf4:	002b883a 	mov	r21,zero
    4bf8:	9f000094 	ori	fp,r19,2
    4bfc:	d9412d15 	stw	r5,1204(sp)
    4c00:	00800084 	movi	r2,2
    4c04:	04001e04 	movi	r16,120
    4c08:	9007883a 	mov	r3,r18
    4c0c:	003f7406 	br	49e0 <__alt_data_end+0xfffaf2b0>
    4c10:	da012a17 	ldw	r8,1192(sp)
    4c14:	df012a15 	stw	fp,1192(sp)
    4c18:	9839883a 	mov	fp,r19
    4c1c:	dcc12b03 	ldbu	r19,1196(sp)
    4c20:	e080080c 	andi	r2,fp,32
    4c24:	d8c12d17 	ldw	r3,1204(sp)
    4c28:	dcc12785 	stb	r19,1182(sp)
    4c2c:	103e321e 	bne	r2,zero,44f8 <__alt_data_end+0xfffaedc8>
    4c30:	e080040c 	andi	r2,fp,16
    4c34:	10031326 	beq	r2,zero,5884 <___vfprintf_internal_r+0x18e4>
    4c38:	1c800017 	ldw	r18,0(r3)
    4c3c:	d9412d17 	ldw	r5,1204(sp)
    4c40:	902bd7fa 	srai	r21,r18,31
    4c44:	29400104 	addi	r5,r5,4
    4c48:	d9412d15 	stw	r5,1204(sp)
    4c4c:	a805883a 	mov	r2,r21
    4c50:	003e2f06 	br	4510 <__alt_data_end+0xfffaede0>
    4c54:	9cc01014 	ori	r19,r19,64
    4c58:	e005883a 	mov	r2,fp
    4c5c:	e4000007 	ldb	r16,0(fp)
    4c60:	003d3706 	br	4140 <__alt_data_end+0xfffaea10>
    4c64:	d8c12d17 	ldw	r3,1204(sp)
    4c68:	d9012d17 	ldw	r4,1204(sp)
    4c6c:	da012a17 	ldw	r8,1192(sp)
    4c70:	18800017 	ldw	r2,0(r3)
    4c74:	21000104 	addi	r4,r4,4
    4c78:	00c00044 	movi	r3,1
    4c7c:	df012a15 	stw	fp,1192(sp)
    4c80:	d8c12b15 	stw	r3,1196(sp)
    4c84:	9839883a 	mov	fp,r19
    4c88:	d8012785 	stb	zero,1182(sp)
    4c8c:	d8810405 	stb	r2,1040(sp)
    4c90:	d9012d15 	stw	r4,1204(sp)
    4c94:	1823883a 	mov	r17,r3
    4c98:	d8c10404 	addi	r3,sp,1040
    4c9c:	d8013215 	stw	zero,1224(sp)
    4ca0:	d8013415 	stw	zero,1232(sp)
    4ca4:	d8c13115 	stw	r3,1220(sp)
    4ca8:	0005883a 	mov	r2,zero
    4cac:	003e4306 	br	45bc <__alt_data_end+0xfffaee8c>
    4cb0:	d8812b07 	ldb	r2,1196(sp)
    4cb4:	1002fc1e 	bne	r2,zero,58a8 <___vfprintf_internal_r+0x1908>
    4cb8:	00c00804 	movi	r3,32
    4cbc:	d8c12b05 	stb	r3,1196(sp)
    4cc0:	e005883a 	mov	r2,fp
    4cc4:	e4000007 	ldb	r16,0(fp)
    4cc8:	003d1d06 	br	4140 <__alt_data_end+0xfffaea10>
    4ccc:	9cc00054 	ori	r19,r19,1
    4cd0:	e005883a 	mov	r2,fp
    4cd4:	e4000007 	ldb	r16,0(fp)
    4cd8:	003d1906 	br	4140 <__alt_data_end+0xfffaea10>
    4cdc:	d9012d17 	ldw	r4,1204(sp)
    4ce0:	d9412d17 	ldw	r5,1204(sp)
    4ce4:	21000017 	ldw	r4,0(r4)
    4ce8:	28c00104 	addi	r3,r5,4
    4cec:	d9012e15 	stw	r4,1208(sp)
    4cf0:	20038c16 	blt	r4,zero,5b24 <___vfprintf_internal_r+0x1b84>
    4cf4:	d8c12d15 	stw	r3,1204(sp)
    4cf8:	e005883a 	mov	r2,fp
    4cfc:	e4000007 	ldb	r16,0(fp)
    4d00:	003d0f06 	br	4140 <__alt_data_end+0xfffaea10>
    4d04:	00c00ac4 	movi	r3,43
    4d08:	d8c12b05 	stb	r3,1196(sp)
    4d0c:	e005883a 	mov	r2,fp
    4d10:	e4000007 	ldb	r16,0(fp)
    4d14:	003d0a06 	br	4140 <__alt_data_end+0xfffaea10>
    4d18:	d8c12d17 	ldw	r3,1204(sp)
    4d1c:	d9012d17 	ldw	r4,1204(sp)
    4d20:	da012a17 	ldw	r8,1192(sp)
    4d24:	18c00017 	ldw	r3,0(r3)
    4d28:	df012a15 	stw	fp,1192(sp)
    4d2c:	d8012785 	stb	zero,1182(sp)
    4d30:	d8c13115 	stw	r3,1220(sp)
    4d34:	9839883a 	mov	fp,r19
    4d38:	24800104 	addi	r18,r4,4
    4d3c:	1803f726 	beq	r3,zero,5d1c <___vfprintf_internal_r+0x1d7c>
    4d40:	d9013117 	ldw	r4,1220(sp)
    4d44:	48038916 	blt	r9,zero,5b6c <___vfprintf_internal_r+0x1bcc>
    4d48:	480d883a 	mov	r6,r9
    4d4c:	000b883a 	mov	r5,zero
    4d50:	da013f15 	stw	r8,1276(sp)
    4d54:	da413e15 	stw	r9,1272(sp)
    4d58:	0008e0c0 	call	8e0c <memchr>
    4d5c:	da013f17 	ldw	r8,1276(sp)
    4d60:	da413e17 	ldw	r9,1272(sp)
    4d64:	10045926 	beq	r2,zero,5ecc <___vfprintf_internal_r+0x1f2c>
    4d68:	d8c13117 	ldw	r3,1220(sp)
    4d6c:	10e3c83a 	sub	r17,r2,r3
    4d70:	4c433516 	blt	r9,r17,5a48 <___vfprintf_internal_r+0x1aa8>
    4d74:	8805883a 	mov	r2,r17
    4d78:	88038116 	blt	r17,zero,5b80 <___vfprintf_internal_r+0x1be0>
    4d7c:	dcc12783 	ldbu	r19,1182(sp)
    4d80:	d8812b15 	stw	r2,1196(sp)
    4d84:	dc812d15 	stw	r18,1204(sp)
    4d88:	d8013215 	stw	zero,1224(sp)
    4d8c:	d8013415 	stw	zero,1232(sp)
    4d90:	003e0306 	br	45a0 <__alt_data_end+0xfffaee70>
    4d94:	da012a17 	ldw	r8,1192(sp)
    4d98:	df012a15 	stw	fp,1192(sp)
    4d9c:	9839883a 	mov	fp,r19
    4da0:	dcc12b03 	ldbu	r19,1196(sp)
    4da4:	dcc12785 	stb	r19,1182(sp)
    4da8:	803d8f26 	beq	r16,zero,43e8 <__alt_data_end+0xfffaecb8>
    4dac:	00c00044 	movi	r3,1
    4db0:	d8c12b15 	stw	r3,1196(sp)
    4db4:	dc010405 	stb	r16,1040(sp)
    4db8:	d8012785 	stb	zero,1182(sp)
    4dbc:	003fb506 	br	4c94 <__alt_data_end+0xfffaf564>
    4dc0:	d8c12017 	ldw	r3,1152(sp)
    4dc4:	003e3506 	br	469c <__alt_data_end+0xfffaef6c>
    4dc8:	10803fcc 	andi	r2,r2,255
    4dcc:	00c00044 	movi	r3,1
    4dd0:	10fddc1e 	bne	r2,r3,4544 <__alt_data_end+0xfffaee14>
    4dd4:	a800021e 	bne	r21,zero,4de0 <___vfprintf_internal_r+0xe40>
    4dd8:	00800244 	movi	r2,9
    4ddc:	14801e2e 	bgeu	r2,r18,4e58 <___vfprintf_internal_r+0xeb8>
    4de0:	dc012b15 	stw	r16,1196(sp)
    4de4:	dc410e04 	addi	r17,sp,1080
    4de8:	9021883a 	mov	r16,r18
    4dec:	da012c15 	stw	r8,1200(sp)
    4df0:	a825883a 	mov	r18,r21
    4df4:	482b883a 	mov	r21,r9
    4df8:	8009883a 	mov	r4,r16
    4dfc:	900b883a 	mov	r5,r18
    4e00:	01800284 	movi	r6,10
    4e04:	000f883a 	mov	r7,zero
    4e08:	000d0dc0 	call	d0dc <__umoddi3>
    4e0c:	10800c04 	addi	r2,r2,48
    4e10:	8c7fffc4 	addi	r17,r17,-1
    4e14:	8009883a 	mov	r4,r16
    4e18:	900b883a 	mov	r5,r18
    4e1c:	01800284 	movi	r6,10
    4e20:	000f883a 	mov	r7,zero
    4e24:	88800005 	stb	r2,0(r17)
    4e28:	000ca9c0 	call	ca9c <__udivdi3>
    4e2c:	1021883a 	mov	r16,r2
    4e30:	10c4b03a 	or	r2,r2,r3
    4e34:	1825883a 	mov	r18,r3
    4e38:	103fef1e 	bne	r2,zero,4df8 <__alt_data_end+0xfffaf6c8>
    4e3c:	d9012817 	ldw	r4,1184(sp)
    4e40:	dc413115 	stw	r17,1220(sp)
    4e44:	dc012b17 	ldw	r16,1196(sp)
    4e48:	da012c17 	ldw	r8,1200(sp)
    4e4c:	a813883a 	mov	r9,r21
    4e50:	2463c83a 	sub	r17,r4,r17
    4e54:	003dcd06 	br	458c <__alt_data_end+0xfffaee5c>
    4e58:	94800c04 	addi	r18,r18,48
    4e5c:	d8c10dc4 	addi	r3,sp,1079
    4e60:	dc810dc5 	stb	r18,1079(sp)
    4e64:	dc413c17 	ldw	r17,1264(sp)
    4e68:	d8c13115 	stw	r3,1220(sp)
    4e6c:	003dc706 	br	458c <__alt_data_end+0xfffaee5c>
    4e70:	00801944 	movi	r2,101
    4e74:	1400720e 	bge	r2,r16,5040 <___vfprintf_internal_r+0x10a0>
    4e78:	d9013717 	ldw	r4,1244(sp)
    4e7c:	d9413917 	ldw	r5,1252(sp)
    4e80:	000d883a 	mov	r6,zero
    4e84:	000f883a 	mov	r7,zero
    4e88:	d8c13d15 	stw	r3,1268(sp)
    4e8c:	da013f15 	stw	r8,1276(sp)
    4e90:	000e93c0 	call	e93c <__eqdf2>
    4e94:	d8c13d17 	ldw	r3,1268(sp)
    4e98:	da013f17 	ldw	r8,1276(sp)
    4e9c:	1000f41e 	bne	r2,zero,5270 <___vfprintf_internal_r+0x12d0>
    4ea0:	d8811f17 	ldw	r2,1148(sp)
    4ea4:	01000074 	movhi	r4,1
    4ea8:	210be604 	addi	r4,r4,12184
    4eac:	18c00044 	addi	r3,r3,1
    4eb0:	10800044 	addi	r2,r2,1
    4eb4:	41000015 	stw	r4,0(r8)
    4eb8:	01000044 	movi	r4,1
    4ebc:	41000115 	stw	r4,4(r8)
    4ec0:	d8c12015 	stw	r3,1152(sp)
    4ec4:	d8811f15 	stw	r2,1148(sp)
    4ec8:	010001c4 	movi	r4,7
    4ecc:	20828d16 	blt	r4,r2,5904 <___vfprintf_internal_r+0x1964>
    4ed0:	42000204 	addi	r8,r8,8
    4ed4:	d8812617 	ldw	r2,1176(sp)
    4ed8:	d9413317 	ldw	r5,1228(sp)
    4edc:	11400216 	blt	r2,r5,4ee8 <___vfprintf_internal_r+0xf48>
    4ee0:	e080004c 	andi	r2,fp,1
    4ee4:	103e4126 	beq	r2,zero,47ec <__alt_data_end+0xfffaf0bc>
    4ee8:	d8813817 	ldw	r2,1248(sp)
    4eec:	d9013517 	ldw	r4,1236(sp)
    4ef0:	d9413817 	ldw	r5,1248(sp)
    4ef4:	1887883a 	add	r3,r3,r2
    4ef8:	d8811f17 	ldw	r2,1148(sp)
    4efc:	41000015 	stw	r4,0(r8)
    4f00:	41400115 	stw	r5,4(r8)
    4f04:	10800044 	addi	r2,r2,1
    4f08:	d8c12015 	stw	r3,1152(sp)
    4f0c:	d8811f15 	stw	r2,1148(sp)
    4f10:	010001c4 	movi	r4,7
    4f14:	20830916 	blt	r4,r2,5b3c <___vfprintf_internal_r+0x1b9c>
    4f18:	42000204 	addi	r8,r8,8
    4f1c:	d8813317 	ldw	r2,1228(sp)
    4f20:	143fffc4 	addi	r16,r2,-1
    4f24:	043e310e 	bge	zero,r16,47ec <__alt_data_end+0xfffaf0bc>
    4f28:	04400404 	movi	r17,16
    4f2c:	d8811f17 	ldw	r2,1148(sp)
    4f30:	8c007e0e 	bge	r17,r16,512c <___vfprintf_internal_r+0x118c>
    4f34:	01400074 	movhi	r5,1
    4f38:	294be684 	addi	r5,r5,12186
    4f3c:	d9412c15 	stw	r5,1200(sp)
    4f40:	04c001c4 	movi	r19,7
    4f44:	00000306 	br	4f54 <___vfprintf_internal_r+0xfb4>
    4f48:	42000204 	addi	r8,r8,8
    4f4c:	843ffc04 	addi	r16,r16,-16
    4f50:	8c00790e 	bge	r17,r16,5138 <___vfprintf_internal_r+0x1198>
    4f54:	18c00404 	addi	r3,r3,16
    4f58:	10800044 	addi	r2,r2,1
    4f5c:	45000015 	stw	r20,0(r8)
    4f60:	44400115 	stw	r17,4(r8)
    4f64:	d8c12015 	stw	r3,1152(sp)
    4f68:	d8811f15 	stw	r2,1148(sp)
    4f6c:	98bff60e 	bge	r19,r2,4f48 <__alt_data_end+0xfffaf818>
    4f70:	b809883a 	mov	r4,r23
    4f74:	b00b883a 	mov	r5,r22
    4f78:	d9811e04 	addi	r6,sp,1144
    4f7c:	000abe40 	call	abe4 <__sprint_r>
    4f80:	103d1f1e 	bne	r2,zero,4400 <__alt_data_end+0xfffaecd0>
    4f84:	d8c12017 	ldw	r3,1152(sp)
    4f88:	d8811f17 	ldw	r2,1148(sp)
    4f8c:	da000404 	addi	r8,sp,16
    4f90:	003fee06 	br	4f4c <__alt_data_end+0xfffaf81c>
    4f94:	d9412e17 	ldw	r5,1208(sp)
    4f98:	d8812b17 	ldw	r2,1196(sp)
    4f9c:	28a7c83a 	sub	r19,r5,r2
    4fa0:	04fddc0e 	bge	zero,r19,4714 <__alt_data_end+0xfffaefe4>
    4fa4:	05400404 	movi	r21,16
    4fa8:	d8811f17 	ldw	r2,1148(sp)
    4fac:	acc3870e 	bge	r21,r19,5dcc <___vfprintf_internal_r+0x1e2c>
    4fb0:	01400074 	movhi	r5,1
    4fb4:	294be684 	addi	r5,r5,12186
    4fb8:	d9412c15 	stw	r5,1200(sp)
    4fbc:	048001c4 	movi	r18,7
    4fc0:	00000306 	br	4fd0 <___vfprintf_internal_r+0x1030>
    4fc4:	9cfffc04 	addi	r19,r19,-16
    4fc8:	42000204 	addi	r8,r8,8
    4fcc:	acc0110e 	bge	r21,r19,5014 <___vfprintf_internal_r+0x1074>
    4fd0:	18c00404 	addi	r3,r3,16
    4fd4:	10800044 	addi	r2,r2,1
    4fd8:	45000015 	stw	r20,0(r8)
    4fdc:	45400115 	stw	r21,4(r8)
    4fe0:	d8c12015 	stw	r3,1152(sp)
    4fe4:	d8811f15 	stw	r2,1148(sp)
    4fe8:	90bff60e 	bge	r18,r2,4fc4 <__alt_data_end+0xfffaf894>
    4fec:	b809883a 	mov	r4,r23
    4ff0:	b00b883a 	mov	r5,r22
    4ff4:	d9811e04 	addi	r6,sp,1144
    4ff8:	000abe40 	call	abe4 <__sprint_r>
    4ffc:	103d001e 	bne	r2,zero,4400 <__alt_data_end+0xfffaecd0>
    5000:	9cfffc04 	addi	r19,r19,-16
    5004:	d8c12017 	ldw	r3,1152(sp)
    5008:	d8811f17 	ldw	r2,1148(sp)
    500c:	da000404 	addi	r8,sp,16
    5010:	acffef16 	blt	r21,r19,4fd0 <__alt_data_end+0xfffaf8a0>
    5014:	d9012c17 	ldw	r4,1200(sp)
    5018:	1cc7883a 	add	r3,r3,r19
    501c:	10800044 	addi	r2,r2,1
    5020:	41000015 	stw	r4,0(r8)
    5024:	44c00115 	stw	r19,4(r8)
    5028:	d8c12015 	stw	r3,1152(sp)
    502c:	d8811f15 	stw	r2,1148(sp)
    5030:	010001c4 	movi	r4,7
    5034:	20817816 	blt	r4,r2,5618 <___vfprintf_internal_r+0x1678>
    5038:	42000204 	addi	r8,r8,8
    503c:	003db506 	br	4714 <__alt_data_end+0xfffaefe4>
    5040:	d9413317 	ldw	r5,1228(sp)
    5044:	00800044 	movi	r2,1
    5048:	18c00044 	addi	r3,r3,1
    504c:	11413e0e 	bge	r2,r5,5548 <___vfprintf_internal_r+0x15a8>
    5050:	dc011f17 	ldw	r16,1148(sp)
    5054:	d8813117 	ldw	r2,1220(sp)
    5058:	d8c12015 	stw	r3,1152(sp)
    505c:	84000044 	addi	r16,r16,1
    5060:	40800015 	stw	r2,0(r8)
    5064:	00800044 	movi	r2,1
    5068:	40800115 	stw	r2,4(r8)
    506c:	dc011f15 	stw	r16,1148(sp)
    5070:	008001c4 	movi	r2,7
    5074:	14015616 	blt	r2,r16,55d0 <___vfprintf_internal_r+0x1630>
    5078:	42000204 	addi	r8,r8,8
    507c:	d9013817 	ldw	r4,1248(sp)
    5080:	d9413517 	ldw	r5,1236(sp)
    5084:	84000044 	addi	r16,r16,1
    5088:	1907883a 	add	r3,r3,r4
    508c:	41400015 	stw	r5,0(r8)
    5090:	41000115 	stw	r4,4(r8)
    5094:	d8c12015 	stw	r3,1152(sp)
    5098:	dc011f15 	stw	r16,1148(sp)
    509c:	008001c4 	movi	r2,7
    50a0:	14015416 	blt	r2,r16,55f4 <___vfprintf_internal_r+0x1654>
    50a4:	44400204 	addi	r17,r8,8
    50a8:	d9013717 	ldw	r4,1244(sp)
    50ac:	d9413917 	ldw	r5,1252(sp)
    50b0:	000d883a 	mov	r6,zero
    50b4:	000f883a 	mov	r7,zero
    50b8:	d8c13d15 	stw	r3,1268(sp)
    50bc:	000e93c0 	call	e93c <__eqdf2>
    50c0:	d8c13d17 	ldw	r3,1268(sp)
    50c4:	1000a726 	beq	r2,zero,5364 <___vfprintf_internal_r+0x13c4>
    50c8:	d9013317 	ldw	r4,1228(sp)
    50cc:	d9413117 	ldw	r5,1220(sp)
    50d0:	84000044 	addi	r16,r16,1
    50d4:	20bfffc4 	addi	r2,r4,-1
    50d8:	1887883a 	add	r3,r3,r2
    50dc:	29000044 	addi	r4,r5,1
    50e0:	88800115 	stw	r2,4(r17)
    50e4:	89000015 	stw	r4,0(r17)
    50e8:	d8c12015 	stw	r3,1152(sp)
    50ec:	dc011f15 	stw	r16,1148(sp)
    50f0:	008001c4 	movi	r2,7
    50f4:	14012d16 	blt	r2,r16,55ac <___vfprintf_internal_r+0x160c>
    50f8:	8c400204 	addi	r17,r17,8
    50fc:	d9413a17 	ldw	r5,1256(sp)
    5100:	dcc122c4 	addi	r19,sp,1163
    5104:	84000044 	addi	r16,r16,1
    5108:	28c7883a 	add	r3,r5,r3
    510c:	8cc00015 	stw	r19,0(r17)
    5110:	89400115 	stw	r5,4(r17)
    5114:	d8c12015 	stw	r3,1152(sp)
    5118:	dc011f15 	stw	r16,1148(sp)
    511c:	008001c4 	movi	r2,7
    5120:	14000e16 	blt	r2,r16,515c <___vfprintf_internal_r+0x11bc>
    5124:	8a000204 	addi	r8,r17,8
    5128:	003db006 	br	47ec <__alt_data_end+0xfffaf0bc>
    512c:	01000074 	movhi	r4,1
    5130:	210be684 	addi	r4,r4,12186
    5134:	d9012c15 	stw	r4,1200(sp)
    5138:	d9012c17 	ldw	r4,1200(sp)
    513c:	1c07883a 	add	r3,r3,r16
    5140:	44000115 	stw	r16,4(r8)
    5144:	41000015 	stw	r4,0(r8)
    5148:	10800044 	addi	r2,r2,1
    514c:	d8c12015 	stw	r3,1152(sp)
    5150:	d8811f15 	stw	r2,1148(sp)
    5154:	010001c4 	movi	r4,7
    5158:	20bda30e 	bge	r4,r2,47e8 <__alt_data_end+0xfffaf0b8>
    515c:	b809883a 	mov	r4,r23
    5160:	b00b883a 	mov	r5,r22
    5164:	d9811e04 	addi	r6,sp,1144
    5168:	000abe40 	call	abe4 <__sprint_r>
    516c:	103ca41e 	bne	r2,zero,4400 <__alt_data_end+0xfffaecd0>
    5170:	d8c12017 	ldw	r3,1152(sp)
    5174:	da000404 	addi	r8,sp,16
    5178:	003d9c06 	br	47ec <__alt_data_end+0xfffaf0bc>
    517c:	b809883a 	mov	r4,r23
    5180:	b00b883a 	mov	r5,r22
    5184:	d9811e04 	addi	r6,sp,1144
    5188:	000abe40 	call	abe4 <__sprint_r>
    518c:	103dd226 	beq	r2,zero,48d8 <__alt_data_end+0xfffaf1a8>
    5190:	003c9b06 	br	4400 <__alt_data_end+0xfffaecd0>
    5194:	10803fcc 	andi	r2,r2,255
    5198:	1000311e 	bne	r2,zero,5260 <___vfprintf_internal_r+0x12c0>
    519c:	e080004c 	andi	r2,fp,1
    51a0:	10002f26 	beq	r2,zero,5260 <___vfprintf_internal_r+0x12c0>
    51a4:	00800c04 	movi	r2,48
    51a8:	d8c10dc4 	addi	r3,sp,1079
    51ac:	d8810dc5 	stb	r2,1079(sp)
    51b0:	dc413c17 	ldw	r17,1264(sp)
    51b4:	d8c13115 	stw	r3,1220(sp)
    51b8:	003cf406 	br	458c <__alt_data_end+0xfffaee5c>
    51bc:	b809883a 	mov	r4,r23
    51c0:	b00b883a 	mov	r5,r22
    51c4:	d9811e04 	addi	r6,sp,1144
    51c8:	000abe40 	call	abe4 <__sprint_r>
    51cc:	103c8c1e 	bne	r2,zero,4400 <__alt_data_end+0xfffaecd0>
    51d0:	d8c12017 	ldw	r3,1152(sp)
    51d4:	da000404 	addi	r8,sp,16
    51d8:	003d7706 	br	47b8 <__alt_data_end+0xfffaf088>
    51dc:	b809883a 	mov	r4,r23
    51e0:	b00b883a 	mov	r5,r22
    51e4:	d9811e04 	addi	r6,sp,1144
    51e8:	000abe40 	call	abe4 <__sprint_r>
    51ec:	103c841e 	bne	r2,zero,4400 <__alt_data_end+0xfffaecd0>
    51f0:	d8c12017 	ldw	r3,1152(sp)
    51f4:	da000404 	addi	r8,sp,16
    51f8:	003d3506 	br	46d0 <__alt_data_end+0xfffaefa0>
    51fc:	b809883a 	mov	r4,r23
    5200:	b00b883a 	mov	r5,r22
    5204:	d9811e04 	addi	r6,sp,1144
    5208:	000abe40 	call	abe4 <__sprint_r>
    520c:	103c7c1e 	bne	r2,zero,4400 <__alt_data_end+0xfffaecd0>
    5210:	d8c12017 	ldw	r3,1152(sp)
    5214:	da000404 	addi	r8,sp,16
    5218:	003d3b06 	br	4708 <__alt_data_end+0xfffaefd8>
    521c:	d9413b17 	ldw	r5,1260(sp)
    5220:	d8c10e04 	addi	r3,sp,1080
    5224:	908003cc 	andi	r2,r18,15
    5228:	a808973a 	slli	r4,r21,28
    522c:	2885883a 	add	r2,r5,r2
    5230:	9024d13a 	srli	r18,r18,4
    5234:	10800003 	ldbu	r2,0(r2)
    5238:	a82ad13a 	srli	r21,r21,4
    523c:	18ffffc4 	addi	r3,r3,-1
    5240:	24a4b03a 	or	r18,r4,r18
    5244:	18800005 	stb	r2,0(r3)
    5248:	9544b03a 	or	r2,r18,r21
    524c:	103ff51e 	bne	r2,zero,5224 <__alt_data_end+0xfffafaf4>
    5250:	d9412817 	ldw	r5,1184(sp)
    5254:	d8c13115 	stw	r3,1220(sp)
    5258:	28e3c83a 	sub	r17,r5,r3
    525c:	003ccb06 	br	458c <__alt_data_end+0xfffaee5c>
    5260:	d8c10e04 	addi	r3,sp,1080
    5264:	0023883a 	mov	r17,zero
    5268:	d8c13115 	stw	r3,1220(sp)
    526c:	003cc706 	br	458c <__alt_data_end+0xfffaee5c>
    5270:	dc012617 	ldw	r16,1176(sp)
    5274:	0401ab0e 	bge	zero,r16,5924 <___vfprintf_internal_r+0x1984>
    5278:	d8813317 	ldw	r2,1228(sp)
    527c:	d9413117 	ldw	r5,1220(sp)
    5280:	d9013417 	ldw	r4,1232(sp)
    5284:	1023883a 	mov	r17,r2
    5288:	28a1883a 	add	r16,r5,r2
    528c:	2080010e 	bge	r4,r2,5294 <___vfprintf_internal_r+0x12f4>
    5290:	2023883a 	mov	r17,r4
    5294:	04400b0e 	bge	zero,r17,52c4 <___vfprintf_internal_r+0x1324>
    5298:	d8811f17 	ldw	r2,1148(sp)
    529c:	d9413117 	ldw	r5,1220(sp)
    52a0:	1c47883a 	add	r3,r3,r17
    52a4:	10800044 	addi	r2,r2,1
    52a8:	41400015 	stw	r5,0(r8)
    52ac:	44400115 	stw	r17,4(r8)
    52b0:	d8c12015 	stw	r3,1152(sp)
    52b4:	d8811f15 	stw	r2,1148(sp)
    52b8:	010001c4 	movi	r4,7
    52bc:	20826716 	blt	r4,r2,5c5c <___vfprintf_internal_r+0x1cbc>
    52c0:	42000204 	addi	r8,r8,8
    52c4:	88026316 	blt	r17,zero,5c54 <___vfprintf_internal_r+0x1cb4>
    52c8:	d8813417 	ldw	r2,1232(sp)
    52cc:	1463c83a 	sub	r17,r2,r17
    52d0:	0440590e 	bge	zero,r17,5438 <___vfprintf_internal_r+0x1498>
    52d4:	04c00404 	movi	r19,16
    52d8:	d8811f17 	ldw	r2,1148(sp)
    52dc:	9c41770e 	bge	r19,r17,58bc <___vfprintf_internal_r+0x191c>
    52e0:	01400074 	movhi	r5,1
    52e4:	294be684 	addi	r5,r5,12186
    52e8:	d9412c15 	stw	r5,1200(sp)
    52ec:	054001c4 	movi	r21,7
    52f0:	00000306 	br	5300 <___vfprintf_internal_r+0x1360>
    52f4:	42000204 	addi	r8,r8,8
    52f8:	8c7ffc04 	addi	r17,r17,-16
    52fc:	9c41720e 	bge	r19,r17,58c8 <___vfprintf_internal_r+0x1928>
    5300:	18c00404 	addi	r3,r3,16
    5304:	10800044 	addi	r2,r2,1
    5308:	45000015 	stw	r20,0(r8)
    530c:	44c00115 	stw	r19,4(r8)
    5310:	d8c12015 	stw	r3,1152(sp)
    5314:	d8811f15 	stw	r2,1148(sp)
    5318:	a8bff60e 	bge	r21,r2,52f4 <__alt_data_end+0xfffafbc4>
    531c:	b809883a 	mov	r4,r23
    5320:	b00b883a 	mov	r5,r22
    5324:	d9811e04 	addi	r6,sp,1144
    5328:	000abe40 	call	abe4 <__sprint_r>
    532c:	103c341e 	bne	r2,zero,4400 <__alt_data_end+0xfffaecd0>
    5330:	d8c12017 	ldw	r3,1152(sp)
    5334:	d8811f17 	ldw	r2,1148(sp)
    5338:	da000404 	addi	r8,sp,16
    533c:	003fee06 	br	52f8 <__alt_data_end+0xfffafbc8>
    5340:	b809883a 	mov	r4,r23
    5344:	b00b883a 	mov	r5,r22
    5348:	d9811e04 	addi	r6,sp,1144
    534c:	000abe40 	call	abe4 <__sprint_r>
    5350:	103c2b1e 	bne	r2,zero,4400 <__alt_data_end+0xfffaecd0>
    5354:	d8c12017 	ldw	r3,1152(sp)
    5358:	d8812787 	ldb	r2,1182(sp)
    535c:	da000404 	addi	r8,sp,16
    5360:	003cce06 	br	469c <__alt_data_end+0xfffaef6c>
    5364:	d8813317 	ldw	r2,1228(sp)
    5368:	14ffffc4 	addi	r19,r2,-1
    536c:	04ff630e 	bge	zero,r19,50fc <__alt_data_end+0xfffaf9cc>
    5370:	05400404 	movi	r21,16
    5374:	acc0810e 	bge	r21,r19,557c <___vfprintf_internal_r+0x15dc>
    5378:	01400074 	movhi	r5,1
    537c:	294be684 	addi	r5,r5,12186
    5380:	d9412c15 	stw	r5,1200(sp)
    5384:	01c001c4 	movi	r7,7
    5388:	00000306 	br	5398 <___vfprintf_internal_r+0x13f8>
    538c:	8c400204 	addi	r17,r17,8
    5390:	9cfffc04 	addi	r19,r19,-16
    5394:	acc07c0e 	bge	r21,r19,5588 <___vfprintf_internal_r+0x15e8>
    5398:	18c00404 	addi	r3,r3,16
    539c:	84000044 	addi	r16,r16,1
    53a0:	8d000015 	stw	r20,0(r17)
    53a4:	8d400115 	stw	r21,4(r17)
    53a8:	d8c12015 	stw	r3,1152(sp)
    53ac:	dc011f15 	stw	r16,1148(sp)
    53b0:	3c3ff60e 	bge	r7,r16,538c <__alt_data_end+0xfffafc5c>
    53b4:	b809883a 	mov	r4,r23
    53b8:	b00b883a 	mov	r5,r22
    53bc:	d9811e04 	addi	r6,sp,1144
    53c0:	d9c13d15 	stw	r7,1268(sp)
    53c4:	000abe40 	call	abe4 <__sprint_r>
    53c8:	d9c13d17 	ldw	r7,1268(sp)
    53cc:	103c0c1e 	bne	r2,zero,4400 <__alt_data_end+0xfffaecd0>
    53d0:	d8c12017 	ldw	r3,1152(sp)
    53d4:	dc011f17 	ldw	r16,1148(sp)
    53d8:	dc400404 	addi	r17,sp,16
    53dc:	003fec06 	br	5390 <__alt_data_end+0xfffafc60>
    53e0:	00800084 	movi	r2,2
    53e4:	9546b03a 	or	r3,r18,r21
    53e8:	003d7d06 	br	49e0 <__alt_data_end+0xfffaf2b0>
    53ec:	10803fcc 	andi	r2,r2,255
    53f0:	1080201c 	xori	r2,r2,128
    53f4:	10bfe004 	addi	r2,r2,-128
    53f8:	01000c04 	movi	r4,48
    53fc:	1101d726 	beq	r2,r4,5b5c <___vfprintf_internal_r+0x1bbc>
    5400:	d9413117 	ldw	r5,1220(sp)
    5404:	d8812817 	ldw	r2,1184(sp)
    5408:	193fffc5 	stb	r4,-1(r3)
    540c:	297fffc4 	addi	r5,r5,-1
    5410:	d9413115 	stw	r5,1220(sp)
    5414:	1163c83a 	sub	r17,r2,r5
    5418:	003c5c06 	br	458c <__alt_data_end+0xfffaee5c>
    541c:	b809883a 	mov	r4,r23
    5420:	b00b883a 	mov	r5,r22
    5424:	d9811e04 	addi	r6,sp,1144
    5428:	000abe40 	call	abe4 <__sprint_r>
    542c:	103bf41e 	bne	r2,zero,4400 <__alt_data_end+0xfffaecd0>
    5430:	d8c12017 	ldw	r3,1152(sp)
    5434:	da000404 	addi	r8,sp,16
    5438:	d9413117 	ldw	r5,1220(sp)
    543c:	d9013417 	ldw	r4,1232(sp)
    5440:	d8812617 	ldw	r2,1176(sp)
    5444:	2923883a 	add	r17,r5,r4
    5448:	d9413317 	ldw	r5,1228(sp)
    544c:	11400216 	blt	r2,r5,5458 <___vfprintf_internal_r+0x14b8>
    5450:	e100004c 	andi	r4,fp,1
    5454:	20000d26 	beq	r4,zero,548c <___vfprintf_internal_r+0x14ec>
    5458:	d9013817 	ldw	r4,1248(sp)
    545c:	d9413517 	ldw	r5,1236(sp)
    5460:	1907883a 	add	r3,r3,r4
    5464:	d9011f17 	ldw	r4,1148(sp)
    5468:	41400015 	stw	r5,0(r8)
    546c:	d9413817 	ldw	r5,1248(sp)
    5470:	21000044 	addi	r4,r4,1
    5474:	d8c12015 	stw	r3,1152(sp)
    5478:	41400115 	stw	r5,4(r8)
    547c:	d9011f15 	stw	r4,1148(sp)
    5480:	014001c4 	movi	r5,7
    5484:	2901fd16 	blt	r5,r4,5c7c <___vfprintf_internal_r+0x1cdc>
    5488:	42000204 	addi	r8,r8,8
    548c:	d9013317 	ldw	r4,1228(sp)
    5490:	2085c83a 	sub	r2,r4,r2
    5494:	8449c83a 	sub	r4,r16,r17
    5498:	1021883a 	mov	r16,r2
    549c:	2080010e 	bge	r4,r2,54a4 <___vfprintf_internal_r+0x1504>
    54a0:	2021883a 	mov	r16,r4
    54a4:	04000a0e 	bge	zero,r16,54d0 <___vfprintf_internal_r+0x1530>
    54a8:	d9011f17 	ldw	r4,1148(sp)
    54ac:	1c07883a 	add	r3,r3,r16
    54b0:	44400015 	stw	r17,0(r8)
    54b4:	21000044 	addi	r4,r4,1
    54b8:	44000115 	stw	r16,4(r8)
    54bc:	d8c12015 	stw	r3,1152(sp)
    54c0:	d9011f15 	stw	r4,1148(sp)
    54c4:	014001c4 	movi	r5,7
    54c8:	29020916 	blt	r5,r4,5cf0 <___vfprintf_internal_r+0x1d50>
    54cc:	42000204 	addi	r8,r8,8
    54d0:	80020116 	blt	r16,zero,5cd8 <___vfprintf_internal_r+0x1d38>
    54d4:	1421c83a 	sub	r16,r2,r16
    54d8:	043cc40e 	bge	zero,r16,47ec <__alt_data_end+0xfffaf0bc>
    54dc:	04400404 	movi	r17,16
    54e0:	d8811f17 	ldw	r2,1148(sp)
    54e4:	8c3f110e 	bge	r17,r16,512c <__alt_data_end+0xfffaf9fc>
    54e8:	01400074 	movhi	r5,1
    54ec:	294be684 	addi	r5,r5,12186
    54f0:	d9412c15 	stw	r5,1200(sp)
    54f4:	04c001c4 	movi	r19,7
    54f8:	00000306 	br	5508 <___vfprintf_internal_r+0x1568>
    54fc:	42000204 	addi	r8,r8,8
    5500:	843ffc04 	addi	r16,r16,-16
    5504:	8c3f0c0e 	bge	r17,r16,5138 <__alt_data_end+0xfffafa08>
    5508:	18c00404 	addi	r3,r3,16
    550c:	10800044 	addi	r2,r2,1
    5510:	45000015 	stw	r20,0(r8)
    5514:	44400115 	stw	r17,4(r8)
    5518:	d8c12015 	stw	r3,1152(sp)
    551c:	d8811f15 	stw	r2,1148(sp)
    5520:	98bff60e 	bge	r19,r2,54fc <__alt_data_end+0xfffafdcc>
    5524:	b809883a 	mov	r4,r23
    5528:	b00b883a 	mov	r5,r22
    552c:	d9811e04 	addi	r6,sp,1144
    5530:	000abe40 	call	abe4 <__sprint_r>
    5534:	103bb21e 	bne	r2,zero,4400 <__alt_data_end+0xfffaecd0>
    5538:	d8c12017 	ldw	r3,1152(sp)
    553c:	d8811f17 	ldw	r2,1148(sp)
    5540:	da000404 	addi	r8,sp,16
    5544:	003fee06 	br	5500 <__alt_data_end+0xfffafdd0>
    5548:	e088703a 	and	r4,fp,r2
    554c:	203ec01e 	bne	r4,zero,5050 <__alt_data_end+0xfffaf920>
    5550:	dc011f17 	ldw	r16,1148(sp)
    5554:	d9013117 	ldw	r4,1220(sp)
    5558:	40800115 	stw	r2,4(r8)
    555c:	84000044 	addi	r16,r16,1
    5560:	41000015 	stw	r4,0(r8)
    5564:	d8c12015 	stw	r3,1152(sp)
    5568:	dc011f15 	stw	r16,1148(sp)
    556c:	008001c4 	movi	r2,7
    5570:	14000e16 	blt	r2,r16,55ac <___vfprintf_internal_r+0x160c>
    5574:	44400204 	addi	r17,r8,8
    5578:	003ee006 	br	50fc <__alt_data_end+0xfffaf9cc>
    557c:	01000074 	movhi	r4,1
    5580:	210be684 	addi	r4,r4,12186
    5584:	d9012c15 	stw	r4,1200(sp)
    5588:	d8812c17 	ldw	r2,1200(sp)
    558c:	1cc7883a 	add	r3,r3,r19
    5590:	84000044 	addi	r16,r16,1
    5594:	88800015 	stw	r2,0(r17)
    5598:	8cc00115 	stw	r19,4(r17)
    559c:	d8c12015 	stw	r3,1152(sp)
    55a0:	dc011f15 	stw	r16,1148(sp)
    55a4:	008001c4 	movi	r2,7
    55a8:	143ed30e 	bge	r2,r16,50f8 <__alt_data_end+0xfffaf9c8>
    55ac:	b809883a 	mov	r4,r23
    55b0:	b00b883a 	mov	r5,r22
    55b4:	d9811e04 	addi	r6,sp,1144
    55b8:	000abe40 	call	abe4 <__sprint_r>
    55bc:	103b901e 	bne	r2,zero,4400 <__alt_data_end+0xfffaecd0>
    55c0:	d8c12017 	ldw	r3,1152(sp)
    55c4:	dc011f17 	ldw	r16,1148(sp)
    55c8:	dc400404 	addi	r17,sp,16
    55cc:	003ecb06 	br	50fc <__alt_data_end+0xfffaf9cc>
    55d0:	b809883a 	mov	r4,r23
    55d4:	b00b883a 	mov	r5,r22
    55d8:	d9811e04 	addi	r6,sp,1144
    55dc:	000abe40 	call	abe4 <__sprint_r>
    55e0:	103b871e 	bne	r2,zero,4400 <__alt_data_end+0xfffaecd0>
    55e4:	d8c12017 	ldw	r3,1152(sp)
    55e8:	dc011f17 	ldw	r16,1148(sp)
    55ec:	da000404 	addi	r8,sp,16
    55f0:	003ea206 	br	507c <__alt_data_end+0xfffaf94c>
    55f4:	b809883a 	mov	r4,r23
    55f8:	b00b883a 	mov	r5,r22
    55fc:	d9811e04 	addi	r6,sp,1144
    5600:	000abe40 	call	abe4 <__sprint_r>
    5604:	103b7e1e 	bne	r2,zero,4400 <__alt_data_end+0xfffaecd0>
    5608:	d8c12017 	ldw	r3,1152(sp)
    560c:	dc011f17 	ldw	r16,1148(sp)
    5610:	dc400404 	addi	r17,sp,16
    5614:	003ea406 	br	50a8 <__alt_data_end+0xfffaf978>
    5618:	b809883a 	mov	r4,r23
    561c:	b00b883a 	mov	r5,r22
    5620:	d9811e04 	addi	r6,sp,1144
    5624:	000abe40 	call	abe4 <__sprint_r>
    5628:	103b751e 	bne	r2,zero,4400 <__alt_data_end+0xfffaecd0>
    562c:	d8c12017 	ldw	r3,1152(sp)
    5630:	da000404 	addi	r8,sp,16
    5634:	003c3706 	br	4714 <__alt_data_end+0xfffaefe4>
    5638:	04a5c83a 	sub	r18,zero,r18
    563c:	9004c03a 	cmpne	r2,r18,zero
    5640:	056bc83a 	sub	r21,zero,r21
    5644:	a8abc83a 	sub	r21,r21,r2
    5648:	04c00b44 	movi	r19,45
    564c:	dcc12785 	stb	r19,1182(sp)
    5650:	da413215 	stw	r9,1224(sp)
    5654:	00800044 	movi	r2,1
    5658:	9546b03a 	or	r3,r18,r21
    565c:	003bb106 	br	4524 <__alt_data_end+0xfffaedf4>
    5660:	da013f15 	stw	r8,1276(sp)
    5664:	da413e15 	stw	r9,1272(sp)
    5668:	000a8940 	call	a894 <__fpclassifyd>
    566c:	da013f17 	ldw	r8,1276(sp)
    5670:	da413e17 	ldw	r9,1272(sp)
    5674:	1000e526 	beq	r2,zero,5a0c <___vfprintf_internal_r+0x1a6c>
    5678:	04fff7c4 	movi	r19,-33
    567c:	00bfffc4 	movi	r2,-1
    5680:	84e6703a 	and	r19,r16,r19
    5684:	48822926 	beq	r9,r2,5f2c <___vfprintf_internal_r+0x1f8c>
    5688:	008011c4 	movi	r2,71
    568c:	98821626 	beq	r19,r2,5ee8 <___vfprintf_internal_r+0x1f48>
    5690:	d9013917 	ldw	r4,1252(sp)
    5694:	e0c04014 	ori	r3,fp,256
    5698:	d8c12d15 	stw	r3,1204(sp)
    569c:	20021f16 	blt	r4,zero,5f1c <___vfprintf_internal_r+0x1f7c>
    56a0:	dc413917 	ldw	r17,1252(sp)
    56a4:	d8012b05 	stb	zero,1196(sp)
    56a8:	00801984 	movi	r2,102
    56ac:	80814d26 	beq	r16,r2,5be4 <___vfprintf_internal_r+0x1c44>
    56b0:	00801184 	movi	r2,70
    56b4:	80814b26 	beq	r16,r2,5be4 <___vfprintf_internal_r+0x1c44>
    56b8:	00801144 	movi	r2,69
    56bc:	98821d26 	beq	r19,r2,5f34 <___vfprintf_internal_r+0x1f94>
    56c0:	482b883a 	mov	r21,r9
    56c4:	d8812604 	addi	r2,sp,1176
    56c8:	d8800115 	stw	r2,4(sp)
    56cc:	d9413717 	ldw	r5,1244(sp)
    56d0:	d8812504 	addi	r2,sp,1172
    56d4:	d8800215 	stw	r2,8(sp)
    56d8:	d8812104 	addi	r2,sp,1156
    56dc:	dd400015 	stw	r21,0(sp)
    56e0:	d8800315 	stw	r2,12(sp)
    56e4:	b809883a 	mov	r4,r23
    56e8:	880d883a 	mov	r6,r17
    56ec:	01c00084 	movi	r7,2
    56f0:	da013f15 	stw	r8,1276(sp)
    56f4:	da413e15 	stw	r9,1272(sp)
    56f8:	00064180 	call	6418 <_dtoa_r>
    56fc:	d8813115 	stw	r2,1220(sp)
    5700:	008019c4 	movi	r2,103
    5704:	da013f17 	ldw	r8,1276(sp)
    5708:	da413e17 	ldw	r9,1272(sp)
    570c:	80800226 	beq	r16,r2,5718 <___vfprintf_internal_r+0x1778>
    5710:	008011c4 	movi	r2,71
    5714:	8081451e 	bne	r16,r2,5c2c <___vfprintf_internal_r+0x1c8c>
    5718:	e080004c 	andi	r2,fp,1
    571c:	10021e26 	beq	r2,zero,5f98 <___vfprintf_internal_r+0x1ff8>
    5720:	d8c13117 	ldw	r3,1220(sp)
    5724:	1d55883a 	add	r10,r3,r21
    5728:	d9013717 	ldw	r4,1244(sp)
    572c:	880b883a 	mov	r5,r17
    5730:	000d883a 	mov	r6,zero
    5734:	000f883a 	mov	r7,zero
    5738:	da013f15 	stw	r8,1276(sp)
    573c:	da413e15 	stw	r9,1272(sp)
    5740:	da813d15 	stw	r10,1268(sp)
    5744:	000e93c0 	call	e93c <__eqdf2>
    5748:	da013f17 	ldw	r8,1276(sp)
    574c:	da413e17 	ldw	r9,1272(sp)
    5750:	da813d17 	ldw	r10,1268(sp)
    5754:	1001a126 	beq	r2,zero,5ddc <___vfprintf_internal_r+0x1e3c>
    5758:	d8812117 	ldw	r2,1156(sp)
    575c:	1280062e 	bgeu	r2,r10,5778 <___vfprintf_internal_r+0x17d8>
    5760:	01000c04 	movi	r4,48
    5764:	10c00044 	addi	r3,r2,1
    5768:	d8c12115 	stw	r3,1156(sp)
    576c:	11000005 	stb	r4,0(r2)
    5770:	d8812117 	ldw	r2,1156(sp)
    5774:	12bffb36 	bltu	r2,r10,5764 <__alt_data_end+0xfffb0034>
    5778:	d8c13117 	ldw	r3,1220(sp)
    577c:	10c5c83a 	sub	r2,r2,r3
    5780:	d8813315 	stw	r2,1228(sp)
    5784:	008011c4 	movi	r2,71
    5788:	98818926 	beq	r19,r2,5db0 <___vfprintf_internal_r+0x1e10>
    578c:	00801944 	movi	r2,101
    5790:	14023c0e 	bge	r2,r16,6084 <___vfprintf_internal_r+0x20e4>
    5794:	d8c12617 	ldw	r3,1176(sp)
    5798:	00801984 	movi	r2,102
    579c:	d8c13415 	stw	r3,1232(sp)
    57a0:	8081ef26 	beq	r16,r2,5f60 <___vfprintf_internal_r+0x1fc0>
    57a4:	d8c13417 	ldw	r3,1232(sp)
    57a8:	d9013317 	ldw	r4,1228(sp)
    57ac:	1901e316 	blt	r3,r4,5f3c <___vfprintf_internal_r+0x1f9c>
    57b0:	e080004c 	andi	r2,fp,1
    57b4:	1001f426 	beq	r2,zero,5f88 <___vfprintf_internal_r+0x1fe8>
    57b8:	d8c13417 	ldw	r3,1232(sp)
    57bc:	1c400044 	addi	r17,r3,1
    57c0:	8839883a 	mov	fp,r17
    57c4:	8801e416 	blt	r17,zero,5f58 <___vfprintf_internal_r+0x1fb8>
    57c8:	dd412b07 	ldb	r21,1196(sp)
    57cc:	a801701e 	bne	r21,zero,5d90 <___vfprintf_internal_r+0x1df0>
    57d0:	df012b15 	stw	fp,1196(sp)
    57d4:	dcc12783 	ldbu	r19,1182(sp)
    57d8:	df012d17 	ldw	fp,1204(sp)
    57dc:	d8013215 	stw	zero,1224(sp)
    57e0:	dc812d15 	stw	r18,1204(sp)
    57e4:	003b6e06 	br	45a0 <__alt_data_end+0xfffaee70>
    57e8:	e080040c 	andi	r2,fp,16
    57ec:	1000b51e 	bne	r2,zero,5ac4 <___vfprintf_internal_r+0x1b24>
    57f0:	e080100c 	andi	r2,fp,64
    57f4:	10015b26 	beq	r2,zero,5d64 <___vfprintf_internal_r+0x1dc4>
    57f8:	d9012d17 	ldw	r4,1204(sp)
    57fc:	d9412f17 	ldw	r5,1212(sp)
    5800:	20800017 	ldw	r2,0(r4)
    5804:	21000104 	addi	r4,r4,4
    5808:	d9012d15 	stw	r4,1204(sp)
    580c:	1140000d 	sth	r5,0(r2)
    5810:	003a2006 	br	4094 <__alt_data_end+0xfffae964>
    5814:	e0c0100c 	andi	r3,fp,64
    5818:	1800a226 	beq	r3,zero,5aa4 <___vfprintf_internal_r+0x1b04>
    581c:	d8c12d17 	ldw	r3,1204(sp)
    5820:	1480000b 	ldhu	r18,0(r2)
    5824:	002b883a 	mov	r21,zero
    5828:	18c00104 	addi	r3,r3,4
    582c:	d8c12d15 	stw	r3,1204(sp)
    5830:	0005883a 	mov	r2,zero
    5834:	9007883a 	mov	r3,r18
    5838:	003c6906 	br	49e0 <__alt_data_end+0xfffaf2b0>
    583c:	e0c0100c 	andi	r3,fp,64
    5840:	18009026 	beq	r3,zero,5a84 <___vfprintf_internal_r+0x1ae4>
    5844:	1480000b 	ldhu	r18,0(r2)
    5848:	d8812d17 	ldw	r2,1204(sp)
    584c:	002b883a 	mov	r21,zero
    5850:	9007883a 	mov	r3,r18
    5854:	10800104 	addi	r2,r2,4
    5858:	d8812d15 	stw	r2,1204(sp)
    585c:	00800044 	movi	r2,1
    5860:	003c5f06 	br	49e0 <__alt_data_end+0xfffaf2b0>
    5864:	e0c0100c 	andi	r3,fp,64
    5868:	18008026 	beq	r3,zero,5a6c <___vfprintf_internal_r+0x1acc>
    586c:	d9012d17 	ldw	r4,1204(sp)
    5870:	1480000b 	ldhu	r18,0(r2)
    5874:	002b883a 	mov	r21,zero
    5878:	21000104 	addi	r4,r4,4
    587c:	d9012d15 	stw	r4,1204(sp)
    5880:	003c7906 	br	4a68 <__alt_data_end+0xfffaf338>
    5884:	e080100c 	andi	r2,fp,64
    5888:	10007126 	beq	r2,zero,5a50 <___vfprintf_internal_r+0x1ab0>
    588c:	1c80000f 	ldh	r18,0(r3)
    5890:	d8812d17 	ldw	r2,1204(sp)
    5894:	902bd7fa 	srai	r21,r18,31
    5898:	10800104 	addi	r2,r2,4
    589c:	d8812d15 	stw	r2,1204(sp)
    58a0:	a805883a 	mov	r2,r21
    58a4:	003b1a06 	br	4510 <__alt_data_end+0xfffaede0>
    58a8:	e4000007 	ldb	r16,0(fp)
    58ac:	e005883a 	mov	r2,fp
    58b0:	003a2306 	br	4140 <__alt_data_end+0xfffaea10>
    58b4:	00800084 	movi	r2,2
    58b8:	003c4906 	br	49e0 <__alt_data_end+0xfffaf2b0>
    58bc:	01000074 	movhi	r4,1
    58c0:	210be684 	addi	r4,r4,12186
    58c4:	d9012c15 	stw	r4,1200(sp)
    58c8:	d9012c17 	ldw	r4,1200(sp)
    58cc:	1c47883a 	add	r3,r3,r17
    58d0:	10800044 	addi	r2,r2,1
    58d4:	41000015 	stw	r4,0(r8)
    58d8:	44400115 	stw	r17,4(r8)
    58dc:	d8c12015 	stw	r3,1152(sp)
    58e0:	d8811f15 	stw	r2,1148(sp)
    58e4:	010001c4 	movi	r4,7
    58e8:	20becc16 	blt	r4,r2,541c <__alt_data_end+0xfffafcec>
    58ec:	42000204 	addi	r8,r8,8
    58f0:	003ed106 	br	5438 <__alt_data_end+0xfffafd08>
    58f4:	01000074 	movhi	r4,1
    58f8:	210be684 	addi	r4,r4,12186
    58fc:	d9012c15 	stw	r4,1200(sp)
    5900:	003ba306 	br	4790 <__alt_data_end+0xfffaf060>
    5904:	b809883a 	mov	r4,r23
    5908:	b00b883a 	mov	r5,r22
    590c:	d9811e04 	addi	r6,sp,1144
    5910:	000abe40 	call	abe4 <__sprint_r>
    5914:	103aba1e 	bne	r2,zero,4400 <__alt_data_end+0xfffaecd0>
    5918:	d8c12017 	ldw	r3,1152(sp)
    591c:	da000404 	addi	r8,sp,16
    5920:	003d6c06 	br	4ed4 <__alt_data_end+0xfffaf7a4>
    5924:	d8811f17 	ldw	r2,1148(sp)
    5928:	01400074 	movhi	r5,1
    592c:	01000044 	movi	r4,1
    5930:	18c00044 	addi	r3,r3,1
    5934:	10800044 	addi	r2,r2,1
    5938:	294be604 	addi	r5,r5,12184
    593c:	41000115 	stw	r4,4(r8)
    5940:	41400015 	stw	r5,0(r8)
    5944:	d8c12015 	stw	r3,1152(sp)
    5948:	d8811f15 	stw	r2,1148(sp)
    594c:	010001c4 	movi	r4,7
    5950:	20806716 	blt	r4,r2,5af0 <___vfprintf_internal_r+0x1b50>
    5954:	42000204 	addi	r8,r8,8
    5958:	8000041e 	bne	r16,zero,596c <___vfprintf_internal_r+0x19cc>
    595c:	d8813317 	ldw	r2,1228(sp)
    5960:	1000021e 	bne	r2,zero,596c <___vfprintf_internal_r+0x19cc>
    5964:	e080004c 	andi	r2,fp,1
    5968:	103ba026 	beq	r2,zero,47ec <__alt_data_end+0xfffaf0bc>
    596c:	d9013817 	ldw	r4,1248(sp)
    5970:	d8811f17 	ldw	r2,1148(sp)
    5974:	d9413517 	ldw	r5,1236(sp)
    5978:	1907883a 	add	r3,r3,r4
    597c:	10800044 	addi	r2,r2,1
    5980:	41000115 	stw	r4,4(r8)
    5984:	41400015 	stw	r5,0(r8)
    5988:	d8c12015 	stw	r3,1152(sp)
    598c:	d8811f15 	stw	r2,1148(sp)
    5990:	010001c4 	movi	r4,7
    5994:	20815716 	blt	r4,r2,5ef4 <___vfprintf_internal_r+0x1f54>
    5998:	42000204 	addi	r8,r8,8
    599c:	0421c83a 	sub	r16,zero,r16
    59a0:	0400810e 	bge	zero,r16,5ba8 <___vfprintf_internal_r+0x1c08>
    59a4:	04400404 	movi	r17,16
    59a8:	8c00bd0e 	bge	r17,r16,5ca0 <___vfprintf_internal_r+0x1d00>
    59ac:	01400074 	movhi	r5,1
    59b0:	294be684 	addi	r5,r5,12186
    59b4:	d9412c15 	stw	r5,1200(sp)
    59b8:	04c001c4 	movi	r19,7
    59bc:	00000306 	br	59cc <___vfprintf_internal_r+0x1a2c>
    59c0:	42000204 	addi	r8,r8,8
    59c4:	843ffc04 	addi	r16,r16,-16
    59c8:	8c00b80e 	bge	r17,r16,5cac <___vfprintf_internal_r+0x1d0c>
    59cc:	18c00404 	addi	r3,r3,16
    59d0:	10800044 	addi	r2,r2,1
    59d4:	45000015 	stw	r20,0(r8)
    59d8:	44400115 	stw	r17,4(r8)
    59dc:	d8c12015 	stw	r3,1152(sp)
    59e0:	d8811f15 	stw	r2,1148(sp)
    59e4:	98bff60e 	bge	r19,r2,59c0 <__alt_data_end+0xfffb0290>
    59e8:	b809883a 	mov	r4,r23
    59ec:	b00b883a 	mov	r5,r22
    59f0:	d9811e04 	addi	r6,sp,1144
    59f4:	000abe40 	call	abe4 <__sprint_r>
    59f8:	103a811e 	bne	r2,zero,4400 <__alt_data_end+0xfffaecd0>
    59fc:	d8c12017 	ldw	r3,1152(sp)
    5a00:	d8811f17 	ldw	r2,1148(sp)
    5a04:	da000404 	addi	r8,sp,16
    5a08:	003fee06 	br	59c4 <__alt_data_end+0xfffb0294>
    5a0c:	008011c4 	movi	r2,71
    5a10:	1400db16 	blt	r2,r16,5d80 <___vfprintf_internal_r+0x1de0>
    5a14:	01000074 	movhi	r4,1
    5a18:	210bd804 	addi	r4,r4,12128
    5a1c:	d9013115 	stw	r4,1220(sp)
    5a20:	00c000c4 	movi	r3,3
    5a24:	00bfdfc4 	movi	r2,-129
    5a28:	d8c12b15 	stw	r3,1196(sp)
    5a2c:	e0b8703a 	and	fp,fp,r2
    5a30:	dcc12783 	ldbu	r19,1182(sp)
    5a34:	dc812d15 	stw	r18,1204(sp)
    5a38:	1823883a 	mov	r17,r3
    5a3c:	d8013215 	stw	zero,1224(sp)
    5a40:	d8013415 	stw	zero,1232(sp)
    5a44:	003ad606 	br	45a0 <__alt_data_end+0xfffaee70>
    5a48:	4823883a 	mov	r17,r9
    5a4c:	003cc906 	br	4d74 <__alt_data_end+0xfffaf644>
    5a50:	1c800017 	ldw	r18,0(r3)
    5a54:	d8c12d17 	ldw	r3,1204(sp)
    5a58:	902bd7fa 	srai	r21,r18,31
    5a5c:	18c00104 	addi	r3,r3,4
    5a60:	d8c12d15 	stw	r3,1204(sp)
    5a64:	a805883a 	mov	r2,r21
    5a68:	003aa906 	br	4510 <__alt_data_end+0xfffaede0>
    5a6c:	d9412d17 	ldw	r5,1204(sp)
    5a70:	14800017 	ldw	r18,0(r2)
    5a74:	002b883a 	mov	r21,zero
    5a78:	29400104 	addi	r5,r5,4
    5a7c:	d9412d15 	stw	r5,1204(sp)
    5a80:	003bf906 	br	4a68 <__alt_data_end+0xfffaf338>
    5a84:	d8c12d17 	ldw	r3,1204(sp)
    5a88:	14800017 	ldw	r18,0(r2)
    5a8c:	002b883a 	mov	r21,zero
    5a90:	18c00104 	addi	r3,r3,4
    5a94:	d8c12d15 	stw	r3,1204(sp)
    5a98:	00800044 	movi	r2,1
    5a9c:	9007883a 	mov	r3,r18
    5aa0:	003bcf06 	br	49e0 <__alt_data_end+0xfffaf2b0>
    5aa4:	d9012d17 	ldw	r4,1204(sp)
    5aa8:	14800017 	ldw	r18,0(r2)
    5aac:	002b883a 	mov	r21,zero
    5ab0:	21000104 	addi	r4,r4,4
    5ab4:	d9012d15 	stw	r4,1204(sp)
    5ab8:	0005883a 	mov	r2,zero
    5abc:	9007883a 	mov	r3,r18
    5ac0:	003bc706 	br	49e0 <__alt_data_end+0xfffaf2b0>
    5ac4:	d9412d17 	ldw	r5,1204(sp)
    5ac8:	d8c12f17 	ldw	r3,1212(sp)
    5acc:	28800017 	ldw	r2,0(r5)
    5ad0:	29400104 	addi	r5,r5,4
    5ad4:	d9412d15 	stw	r5,1204(sp)
    5ad8:	10c00015 	stw	r3,0(r2)
    5adc:	00396d06 	br	4094 <__alt_data_end+0xfffae964>
    5ae0:	01000074 	movhi	r4,1
    5ae4:	210bd604 	addi	r4,r4,12120
    5ae8:	d9013115 	stw	r4,1220(sp)
    5aec:	003ba206 	br	4978 <__alt_data_end+0xfffaf248>
    5af0:	b809883a 	mov	r4,r23
    5af4:	b00b883a 	mov	r5,r22
    5af8:	d9811e04 	addi	r6,sp,1144
    5afc:	000abe40 	call	abe4 <__sprint_r>
    5b00:	103a3f1e 	bne	r2,zero,4400 <__alt_data_end+0xfffaecd0>
    5b04:	dc012617 	ldw	r16,1176(sp)
    5b08:	d8c12017 	ldw	r3,1152(sp)
    5b0c:	da000404 	addi	r8,sp,16
    5b10:	003f9106 	br	5958 <__alt_data_end+0xfffb0228>
    5b14:	e0800044 	addi	r2,fp,1
    5b18:	9cc00814 	ori	r19,r19,32
    5b1c:	e4000047 	ldb	r16,1(fp)
    5b20:	00398706 	br	4140 <__alt_data_end+0xfffaea10>
    5b24:	d8812e17 	ldw	r2,1208(sp)
    5b28:	d8c12d15 	stw	r3,1204(sp)
    5b2c:	0085c83a 	sub	r2,zero,r2
    5b30:	d8812e15 	stw	r2,1208(sp)
    5b34:	e005883a 	mov	r2,fp
    5b38:	003a3a06 	br	4424 <__alt_data_end+0xfffaecf4>
    5b3c:	b809883a 	mov	r4,r23
    5b40:	b00b883a 	mov	r5,r22
    5b44:	d9811e04 	addi	r6,sp,1144
    5b48:	000abe40 	call	abe4 <__sprint_r>
    5b4c:	103a2c1e 	bne	r2,zero,4400 <__alt_data_end+0xfffaecd0>
    5b50:	d8c12017 	ldw	r3,1152(sp)
    5b54:	da000404 	addi	r8,sp,16
    5b58:	003cf006 	br	4f1c <__alt_data_end+0xfffaf7ec>
    5b5c:	d8c12817 	ldw	r3,1184(sp)
    5b60:	d9013117 	ldw	r4,1220(sp)
    5b64:	1923c83a 	sub	r17,r3,r4
    5b68:	003a8806 	br	458c <__alt_data_end+0xfffaee5c>
    5b6c:	da013f15 	stw	r8,1276(sp)
    5b70:	0003f080 	call	3f08 <strlen>
    5b74:	1023883a 	mov	r17,r2
    5b78:	da013f17 	ldw	r8,1276(sp)
    5b7c:	883c7f0e 	bge	r17,zero,4d7c <__alt_data_end+0xfffaf64c>
    5b80:	0005883a 	mov	r2,zero
    5b84:	003c7d06 	br	4d7c <__alt_data_end+0xfffaf64c>
    5b88:	b809883a 	mov	r4,r23
    5b8c:	b00b883a 	mov	r5,r22
    5b90:	d9811e04 	addi	r6,sp,1144
    5b94:	000abe40 	call	abe4 <__sprint_r>
    5b98:	103a191e 	bne	r2,zero,4400 <__alt_data_end+0xfffaecd0>
    5b9c:	d8c12017 	ldw	r3,1152(sp)
    5ba0:	d8811f17 	ldw	r2,1148(sp)
    5ba4:	da000404 	addi	r8,sp,16
    5ba8:	d9413317 	ldw	r5,1228(sp)
    5bac:	d9013117 	ldw	r4,1220(sp)
    5bb0:	10800044 	addi	r2,r2,1
    5bb4:	28c7883a 	add	r3,r5,r3
    5bb8:	41000015 	stw	r4,0(r8)
    5bbc:	41400115 	stw	r5,4(r8)
    5bc0:	d8c12015 	stw	r3,1152(sp)
    5bc4:	d8811f15 	stw	r2,1148(sp)
    5bc8:	010001c4 	movi	r4,7
    5bcc:	20bb060e 	bge	r4,r2,47e8 <__alt_data_end+0xfffaf0b8>
    5bd0:	003d6206 	br	515c <__alt_data_end+0xfffafa2c>
    5bd4:	01000074 	movhi	r4,1
    5bd8:	210bea84 	addi	r4,r4,12202
    5bdc:	d9013615 	stw	r4,1240(sp)
    5be0:	003aa306 	br	4670 <__alt_data_end+0xfffaef40>
    5be4:	d8812604 	addi	r2,sp,1176
    5be8:	d8800115 	stw	r2,4(sp)
    5bec:	d9413717 	ldw	r5,1244(sp)
    5bf0:	d8812504 	addi	r2,sp,1172
    5bf4:	d8800215 	stw	r2,8(sp)
    5bf8:	d8812104 	addi	r2,sp,1156
    5bfc:	da400015 	stw	r9,0(sp)
    5c00:	d8800315 	stw	r2,12(sp)
    5c04:	b809883a 	mov	r4,r23
    5c08:	880d883a 	mov	r6,r17
    5c0c:	01c000c4 	movi	r7,3
    5c10:	da013f15 	stw	r8,1276(sp)
    5c14:	da413e15 	stw	r9,1272(sp)
    5c18:	00064180 	call	6418 <_dtoa_r>
    5c1c:	da413e17 	ldw	r9,1272(sp)
    5c20:	da013f17 	ldw	r8,1276(sp)
    5c24:	d8813115 	stw	r2,1220(sp)
    5c28:	482b883a 	mov	r21,r9
    5c2c:	d8c13117 	ldw	r3,1220(sp)
    5c30:	00801184 	movi	r2,70
    5c34:	1d55883a 	add	r10,r3,r21
    5c38:	98bebb1e 	bne	r19,r2,5728 <__alt_data_end+0xfffafff8>
    5c3c:	19000007 	ldb	r4,0(r3)
    5c40:	00800c04 	movi	r2,48
    5c44:	2080dd26 	beq	r4,r2,5fbc <___vfprintf_internal_r+0x201c>
    5c48:	d8c12617 	ldw	r3,1176(sp)
    5c4c:	50d5883a 	add	r10,r10,r3
    5c50:	003eb506 	br	5728 <__alt_data_end+0xfffafff8>
    5c54:	0023883a 	mov	r17,zero
    5c58:	003d9b06 	br	52c8 <__alt_data_end+0xfffafb98>
    5c5c:	b809883a 	mov	r4,r23
    5c60:	b00b883a 	mov	r5,r22
    5c64:	d9811e04 	addi	r6,sp,1144
    5c68:	000abe40 	call	abe4 <__sprint_r>
    5c6c:	1039e41e 	bne	r2,zero,4400 <__alt_data_end+0xfffaecd0>
    5c70:	d8c12017 	ldw	r3,1152(sp)
    5c74:	da000404 	addi	r8,sp,16
    5c78:	003d9206 	br	52c4 <__alt_data_end+0xfffafb94>
    5c7c:	b809883a 	mov	r4,r23
    5c80:	b00b883a 	mov	r5,r22
    5c84:	d9811e04 	addi	r6,sp,1144
    5c88:	000abe40 	call	abe4 <__sprint_r>
    5c8c:	1039dc1e 	bne	r2,zero,4400 <__alt_data_end+0xfffaecd0>
    5c90:	d8812617 	ldw	r2,1176(sp)
    5c94:	d8c12017 	ldw	r3,1152(sp)
    5c98:	da000404 	addi	r8,sp,16
    5c9c:	003dfb06 	br	548c <__alt_data_end+0xfffafd5c>
    5ca0:	01000074 	movhi	r4,1
    5ca4:	210be684 	addi	r4,r4,12186
    5ca8:	d9012c15 	stw	r4,1200(sp)
    5cac:	d9012c17 	ldw	r4,1200(sp)
    5cb0:	1c07883a 	add	r3,r3,r16
    5cb4:	10800044 	addi	r2,r2,1
    5cb8:	41000015 	stw	r4,0(r8)
    5cbc:	44000115 	stw	r16,4(r8)
    5cc0:	d8c12015 	stw	r3,1152(sp)
    5cc4:	d8811f15 	stw	r2,1148(sp)
    5cc8:	010001c4 	movi	r4,7
    5ccc:	20bfae16 	blt	r4,r2,5b88 <__alt_data_end+0xfffb0458>
    5cd0:	42000204 	addi	r8,r8,8
    5cd4:	003fb406 	br	5ba8 <__alt_data_end+0xfffb0478>
    5cd8:	0021883a 	mov	r16,zero
    5cdc:	003dfd06 	br	54d4 <__alt_data_end+0xfffafda4>
    5ce0:	01400074 	movhi	r5,1
    5ce4:	294bea84 	addi	r5,r5,12202
    5ce8:	d9413615 	stw	r5,1240(sp)
    5cec:	003ae306 	br	487c <__alt_data_end+0xfffaf14c>
    5cf0:	b809883a 	mov	r4,r23
    5cf4:	b00b883a 	mov	r5,r22
    5cf8:	d9811e04 	addi	r6,sp,1144
    5cfc:	000abe40 	call	abe4 <__sprint_r>
    5d00:	1039bf1e 	bne	r2,zero,4400 <__alt_data_end+0xfffaecd0>
    5d04:	d8812617 	ldw	r2,1176(sp)
    5d08:	d9413317 	ldw	r5,1228(sp)
    5d0c:	d8c12017 	ldw	r3,1152(sp)
    5d10:	da000404 	addi	r8,sp,16
    5d14:	2885c83a 	sub	r2,r5,r2
    5d18:	003ded06 	br	54d0 <__alt_data_end+0xfffafda0>
    5d1c:	00800184 	movi	r2,6
    5d20:	1240012e 	bgeu	r2,r9,5d28 <___vfprintf_internal_r+0x1d88>
    5d24:	1013883a 	mov	r9,r2
    5d28:	4823883a 	mov	r17,r9
    5d2c:	4805883a 	mov	r2,r9
    5d30:	4800b216 	blt	r9,zero,5ffc <___vfprintf_internal_r+0x205c>
    5d34:	01400074 	movhi	r5,1
    5d38:	294be404 	addi	r5,r5,12176
    5d3c:	d8812b15 	stw	r2,1196(sp)
    5d40:	dc812d15 	stw	r18,1204(sp)
    5d44:	d8013215 	stw	zero,1224(sp)
    5d48:	d8013415 	stw	zero,1232(sp)
    5d4c:	d9413115 	stw	r5,1220(sp)
    5d50:	0005883a 	mov	r2,zero
    5d54:	003a1906 	br	45bc <__alt_data_end+0xfffaee8c>
    5d58:	04c00b44 	movi	r19,45
    5d5c:	dcc12785 	stb	r19,1182(sp)
    5d60:	003b0006 	br	4964 <__alt_data_end+0xfffaf234>
    5d64:	d8c12d17 	ldw	r3,1204(sp)
    5d68:	d9012f17 	ldw	r4,1212(sp)
    5d6c:	18800017 	ldw	r2,0(r3)
    5d70:	18c00104 	addi	r3,r3,4
    5d74:	d8c12d15 	stw	r3,1204(sp)
    5d78:	11000015 	stw	r4,0(r2)
    5d7c:	0038c506 	br	4094 <__alt_data_end+0xfffae964>
    5d80:	01400074 	movhi	r5,1
    5d84:	294bd904 	addi	r5,r5,12132
    5d88:	d9413115 	stw	r5,1220(sp)
    5d8c:	003f2406 	br	5a20 <__alt_data_end+0xfffb02f0>
    5d90:	00800b44 	movi	r2,45
    5d94:	d8812785 	stb	r2,1182(sp)
    5d98:	df012b15 	stw	fp,1196(sp)
    5d9c:	d8013215 	stw	zero,1224(sp)
    5da0:	df012d17 	ldw	fp,1204(sp)
    5da4:	00800b44 	movi	r2,45
    5da8:	dc812d15 	stw	r18,1204(sp)
    5dac:	003a0006 	br	45b0 <__alt_data_end+0xfffaee80>
    5db0:	d8c12617 	ldw	r3,1176(sp)
    5db4:	00bfff44 	movi	r2,-3
    5db8:	18800a16 	blt	r3,r2,5de4 <___vfprintf_internal_r+0x1e44>
    5dbc:	48c00916 	blt	r9,r3,5de4 <___vfprintf_internal_r+0x1e44>
    5dc0:	d8c13415 	stw	r3,1232(sp)
    5dc4:	040019c4 	movi	r16,103
    5dc8:	003e7606 	br	57a4 <__alt_data_end+0xfffb0074>
    5dcc:	01000074 	movhi	r4,1
    5dd0:	210be684 	addi	r4,r4,12186
    5dd4:	d9012c15 	stw	r4,1200(sp)
    5dd8:	003c8e06 	br	5014 <__alt_data_end+0xfffaf8e4>
    5ddc:	5005883a 	mov	r2,r10
    5de0:	003e6506 	br	5778 <__alt_data_end+0xfffb0048>
    5de4:	843fff84 	addi	r16,r16,-2
    5de8:	1d7fffc4 	addi	r21,r3,-1
    5dec:	dd412615 	stw	r21,1176(sp)
    5df0:	dc0122c5 	stb	r16,1163(sp)
    5df4:	a8009216 	blt	r21,zero,6040 <___vfprintf_internal_r+0x20a0>
    5df8:	00800ac4 	movi	r2,43
    5dfc:	d8812305 	stb	r2,1164(sp)
    5e00:	00800244 	movi	r2,9
    5e04:	1540660e 	bge	r2,r21,5fa0 <___vfprintf_internal_r+0x2000>
    5e08:	dcc122c4 	addi	r19,sp,1163
    5e0c:	dc012c15 	stw	r16,1200(sp)
    5e10:	4023883a 	mov	r17,r8
    5e14:	9821883a 	mov	r16,r19
    5e18:	a809883a 	mov	r4,r21
    5e1c:	01400284 	movi	r5,10
    5e20:	00034c80 	call	34c8 <__modsi3>
    5e24:	10800c04 	addi	r2,r2,48
    5e28:	843fffc4 	addi	r16,r16,-1
    5e2c:	a809883a 	mov	r4,r21
    5e30:	01400284 	movi	r5,10
    5e34:	80800005 	stb	r2,0(r16)
    5e38:	00034740 	call	3474 <__divsi3>
    5e3c:	01000244 	movi	r4,9
    5e40:	102b883a 	mov	r21,r2
    5e44:	20bff416 	blt	r4,r2,5e18 <__alt_data_end+0xfffb06e8>
    5e48:	8811883a 	mov	r8,r17
    5e4c:	10800c04 	addi	r2,r2,48
    5e50:	8023883a 	mov	r17,r16
    5e54:	897fffc4 	addi	r5,r17,-1
    5e58:	88bfffc5 	stb	r2,-1(r17)
    5e5c:	dc012c17 	ldw	r16,1200(sp)
    5e60:	2cc08a2e 	bgeu	r5,r19,608c <___vfprintf_internal_r+0x20ec>
    5e64:	d9812384 	addi	r6,sp,1166
    5e68:	344dc83a 	sub	r6,r6,r17
    5e6c:	d9012344 	addi	r4,sp,1165
    5e70:	998d883a 	add	r6,r19,r6
    5e74:	00000106 	br	5e7c <___vfprintf_internal_r+0x1edc>
    5e78:	28800003 	ldbu	r2,0(r5)
    5e7c:	20800005 	stb	r2,0(r4)
    5e80:	21000044 	addi	r4,r4,1
    5e84:	29400044 	addi	r5,r5,1
    5e88:	21bffb1e 	bne	r4,r6,5e78 <__alt_data_end+0xfffb0748>
    5e8c:	d8812304 	addi	r2,sp,1164
    5e90:	1445c83a 	sub	r2,r2,r17
    5e94:	d9412344 	addi	r5,sp,1165
    5e98:	2885883a 	add	r2,r5,r2
    5e9c:	14e7c83a 	sub	r19,r2,r19
    5ea0:	d8813317 	ldw	r2,1228(sp)
    5ea4:	d8c13317 	ldw	r3,1228(sp)
    5ea8:	dcc13a15 	stw	r19,1256(sp)
    5eac:	14e3883a 	add	r17,r2,r19
    5eb0:	00800044 	movi	r2,1
    5eb4:	10c0550e 	bge	r2,r3,600c <___vfprintf_internal_r+0x206c>
    5eb8:	8c400044 	addi	r17,r17,1
    5ebc:	8839883a 	mov	fp,r17
    5ec0:	88005016 	blt	r17,zero,6004 <___vfprintf_internal_r+0x2064>
    5ec4:	d8013415 	stw	zero,1232(sp)
    5ec8:	003e3f06 	br	57c8 <__alt_data_end+0xfffb0098>
    5ecc:	da412b15 	stw	r9,1196(sp)
    5ed0:	dcc12783 	ldbu	r19,1182(sp)
    5ed4:	4823883a 	mov	r17,r9
    5ed8:	dc812d15 	stw	r18,1204(sp)
    5edc:	d8013215 	stw	zero,1224(sp)
    5ee0:	d8013415 	stw	zero,1232(sp)
    5ee4:	0039ae06 	br	45a0 <__alt_data_end+0xfffaee70>
    5ee8:	483de91e 	bne	r9,zero,5690 <__alt_data_end+0xfffaff60>
    5eec:	8813883a 	mov	r9,r17
    5ef0:	003de706 	br	5690 <__alt_data_end+0xfffaff60>
    5ef4:	b809883a 	mov	r4,r23
    5ef8:	b00b883a 	mov	r5,r22
    5efc:	d9811e04 	addi	r6,sp,1144
    5f00:	000abe40 	call	abe4 <__sprint_r>
    5f04:	10393e1e 	bne	r2,zero,4400 <__alt_data_end+0xfffaecd0>
    5f08:	dc012617 	ldw	r16,1176(sp)
    5f0c:	d8c12017 	ldw	r3,1152(sp)
    5f10:	d8811f17 	ldw	r2,1148(sp)
    5f14:	da000404 	addi	r8,sp,16
    5f18:	003ea006 	br	599c <__alt_data_end+0xfffb026c>
    5f1c:	00c00b44 	movi	r3,45
    5f20:	2460003c 	xorhi	r17,r4,32768
    5f24:	d8c12b05 	stb	r3,1196(sp)
    5f28:	003ddf06 	br	56a8 <__alt_data_end+0xfffaff78>
    5f2c:	02400184 	movi	r9,6
    5f30:	003dd706 	br	5690 <__alt_data_end+0xfffaff60>
    5f34:	4d400044 	addi	r21,r9,1
    5f38:	003de206 	br	56c4 <__alt_data_end+0xfffaff94>
    5f3c:	d8c13417 	ldw	r3,1232(sp)
    5f40:	00c0490e 	bge	zero,r3,6068 <___vfprintf_internal_r+0x20c8>
    5f44:	04400044 	movi	r17,1
    5f48:	d9013317 	ldw	r4,1228(sp)
    5f4c:	8923883a 	add	r17,r17,r4
    5f50:	8839883a 	mov	fp,r17
    5f54:	883e1c0e 	bge	r17,zero,57c8 <__alt_data_end+0xfffb0098>
    5f58:	0039883a 	mov	fp,zero
    5f5c:	003e1a06 	br	57c8 <__alt_data_end+0xfffb0098>
    5f60:	00c03b0e 	bge	zero,r3,6050 <___vfprintf_internal_r+0x20b0>
    5f64:	4800021e 	bne	r9,zero,5f70 <___vfprintf_internal_r+0x1fd0>
    5f68:	e080004c 	andi	r2,fp,1
    5f6c:	10000626 	beq	r2,zero,5f88 <___vfprintf_internal_r+0x1fe8>
    5f70:	d8c13417 	ldw	r3,1232(sp)
    5f74:	4a400044 	addi	r9,r9,1
    5f78:	1a63883a 	add	r17,r3,r9
    5f7c:	8839883a 	mov	fp,r17
    5f80:	883e110e 	bge	r17,zero,57c8 <__alt_data_end+0xfffb0098>
    5f84:	003ff406 	br	5f58 <__alt_data_end+0xfffb0828>
    5f88:	1839883a 	mov	fp,r3
    5f8c:	18004116 	blt	r3,zero,6094 <___vfprintf_internal_r+0x20f4>
    5f90:	dc413417 	ldw	r17,1232(sp)
    5f94:	003e0c06 	br	57c8 <__alt_data_end+0xfffb0098>
    5f98:	d8812117 	ldw	r2,1156(sp)
    5f9c:	003df606 	br	5778 <__alt_data_end+0xfffb0048>
    5fa0:	00800c04 	movi	r2,48
    5fa4:	a8c00c04 	addi	r3,r21,48
    5fa8:	d8812345 	stb	r2,1165(sp)
    5fac:	d8c12385 	stb	r3,1166(sp)
    5fb0:	d88123c4 	addi	r2,sp,1167
    5fb4:	dcc122c4 	addi	r19,sp,1163
    5fb8:	003fb806 	br	5e9c <__alt_data_end+0xfffb076c>
    5fbc:	d9013717 	ldw	r4,1244(sp)
    5fc0:	880b883a 	mov	r5,r17
    5fc4:	000d883a 	mov	r6,zero
    5fc8:	000f883a 	mov	r7,zero
    5fcc:	da013f15 	stw	r8,1276(sp)
    5fd0:	da413e15 	stw	r9,1272(sp)
    5fd4:	da813d15 	stw	r10,1268(sp)
    5fd8:	000e93c0 	call	e93c <__eqdf2>
    5fdc:	da013f17 	ldw	r8,1276(sp)
    5fe0:	da413e17 	ldw	r9,1272(sp)
    5fe4:	da813d17 	ldw	r10,1268(sp)
    5fe8:	103f1726 	beq	r2,zero,5c48 <__alt_data_end+0xfffb0518>
    5fec:	00800044 	movi	r2,1
    5ff0:	1547c83a 	sub	r3,r2,r21
    5ff4:	d8c12615 	stw	r3,1176(sp)
    5ff8:	003f1406 	br	5c4c <__alt_data_end+0xfffb051c>
    5ffc:	0005883a 	mov	r2,zero
    6000:	003f4c06 	br	5d34 <__alt_data_end+0xfffb0604>
    6004:	0039883a 	mov	fp,zero
    6008:	003fae06 	br	5ec4 <__alt_data_end+0xfffb0794>
    600c:	e084703a 	and	r2,fp,r2
    6010:	103faa26 	beq	r2,zero,5ebc <__alt_data_end+0xfffb078c>
    6014:	003fa806 	br	5eb8 <__alt_data_end+0xfffb0788>
    6018:	d9412d17 	ldw	r5,1204(sp)
    601c:	2a400017 	ldw	r9,0(r5)
    6020:	28c00104 	addi	r3,r5,4
    6024:	d8c12d15 	stw	r3,1204(sp)
    6028:	483ebc0e 	bge	r9,zero,5b1c <__alt_data_end+0xfffb03ec>
    602c:	027fffc4 	movi	r9,-1
    6030:	e4000047 	ldb	r16,1(fp)
    6034:	00384206 	br	4140 <__alt_data_end+0xfffaea10>
    6038:	043fffc4 	movi	r16,-1
    603c:	0038ce06 	br	4378 <__alt_data_end+0xfffaec48>
    6040:	00800b44 	movi	r2,45
    6044:	056bc83a 	sub	r21,zero,r21
    6048:	d8812305 	stb	r2,1164(sp)
    604c:	003f6c06 	br	5e00 <__alt_data_end+0xfffb06d0>
    6050:	4800081e 	bne	r9,zero,6074 <___vfprintf_internal_r+0x20d4>
    6054:	e080004c 	andi	r2,fp,1
    6058:	1000061e 	bne	r2,zero,6074 <___vfprintf_internal_r+0x20d4>
    605c:	07000044 	movi	fp,1
    6060:	e023883a 	mov	r17,fp
    6064:	003dd806 	br	57c8 <__alt_data_end+0xfffb0098>
    6068:	04400084 	movi	r17,2
    606c:	88e3c83a 	sub	r17,r17,r3
    6070:	003fb506 	br	5f48 <__alt_data_end+0xfffb0818>
    6074:	4c400084 	addi	r17,r9,2
    6078:	8839883a 	mov	fp,r17
    607c:	883dd20e 	bge	r17,zero,57c8 <__alt_data_end+0xfffb0098>
    6080:	003fb506 	br	5f58 <__alt_data_end+0xfffb0828>
    6084:	d8c12617 	ldw	r3,1176(sp)
    6088:	003f5706 	br	5de8 <__alt_data_end+0xfffb06b8>
    608c:	d8812344 	addi	r2,sp,1165
    6090:	003f8206 	br	5e9c <__alt_data_end+0xfffb076c>
    6094:	0039883a 	mov	fp,zero
    6098:	003fbd06 	br	5f90 <__alt_data_end+0xfffb0860>

0000609c <__vfprintf_internal>:
    609c:	2007883a 	mov	r3,r4
    60a0:	01000074 	movhi	r4,1
    60a4:	21135f04 	addi	r4,r4,19836
    60a8:	21000017 	ldw	r4,0(r4)
    60ac:	2805883a 	mov	r2,r5
    60b0:	300f883a 	mov	r7,r6
    60b4:	180b883a 	mov	r5,r3
    60b8:	100d883a 	mov	r6,r2
    60bc:	0003fa01 	jmpi	3fa0 <___vfprintf_internal_r>

000060c0 <__swsetup_r>:
    60c0:	00800074 	movhi	r2,1
    60c4:	defffd04 	addi	sp,sp,-12
    60c8:	10935f04 	addi	r2,r2,19836
    60cc:	dc400115 	stw	r17,4(sp)
    60d0:	2023883a 	mov	r17,r4
    60d4:	11000017 	ldw	r4,0(r2)
    60d8:	dc000015 	stw	r16,0(sp)
    60dc:	dfc00215 	stw	ra,8(sp)
    60e0:	2821883a 	mov	r16,r5
    60e4:	20000226 	beq	r4,zero,60f0 <__swsetup_r+0x30>
    60e8:	20c00e17 	ldw	r3,56(r4)
    60ec:	18002e26 	beq	r3,zero,61a8 <__swsetup_r+0xe8>
    60f0:	8080030b 	ldhu	r2,12(r16)
    60f4:	10c0020c 	andi	r3,r2,8
    60f8:	100d883a 	mov	r6,r2
    60fc:	18000f26 	beq	r3,zero,613c <__swsetup_r+0x7c>
    6100:	80c00417 	ldw	r3,16(r16)
    6104:	18001526 	beq	r3,zero,615c <__swsetup_r+0x9c>
    6108:	1100004c 	andi	r4,r2,1
    610c:	20001c1e 	bne	r4,zero,6180 <__swsetup_r+0xc0>
    6110:	1080008c 	andi	r2,r2,2
    6114:	1000261e 	bne	r2,zero,61b0 <__swsetup_r+0xf0>
    6118:	80800517 	ldw	r2,20(r16)
    611c:	80800215 	stw	r2,8(r16)
    6120:	18001c26 	beq	r3,zero,6194 <__swsetup_r+0xd4>
    6124:	0005883a 	mov	r2,zero
    6128:	dfc00217 	ldw	ra,8(sp)
    612c:	dc400117 	ldw	r17,4(sp)
    6130:	dc000017 	ldw	r16,0(sp)
    6134:	dec00304 	addi	sp,sp,12
    6138:	f800283a 	ret
    613c:	3080040c 	andi	r2,r6,16
    6140:	10001726 	beq	r2,zero,61a0 <__swsetup_r+0xe0>
    6144:	3080010c 	andi	r2,r6,4
    6148:	10001b1e 	bne	r2,zero,61b8 <__swsetup_r+0xf8>
    614c:	80c00417 	ldw	r3,16(r16)
    6150:	30800214 	ori	r2,r6,8
    6154:	8080030d 	sth	r2,12(r16)
    6158:	183feb1e 	bne	r3,zero,6108 <__alt_data_end+0xfffb09d8>
    615c:	1140a00c 	andi	r5,r2,640
    6160:	01008004 	movi	r4,512
    6164:	293fe826 	beq	r5,r4,6108 <__alt_data_end+0xfffb09d8>
    6168:	8809883a 	mov	r4,r17
    616c:	800b883a 	mov	r5,r16
    6170:	0008c540 	call	8c54 <__smakebuf_r>
    6174:	8080030b 	ldhu	r2,12(r16)
    6178:	80c00417 	ldw	r3,16(r16)
    617c:	003fe206 	br	6108 <__alt_data_end+0xfffb09d8>
    6180:	80800517 	ldw	r2,20(r16)
    6184:	80000215 	stw	zero,8(r16)
    6188:	0085c83a 	sub	r2,zero,r2
    618c:	80800615 	stw	r2,24(r16)
    6190:	183fe41e 	bne	r3,zero,6124 <__alt_data_end+0xfffb09f4>
    6194:	8080030b 	ldhu	r2,12(r16)
    6198:	1080200c 	andi	r2,r2,128
    619c:	103fe226 	beq	r2,zero,6128 <__alt_data_end+0xfffb09f8>
    61a0:	00bfffc4 	movi	r2,-1
    61a4:	003fe006 	br	6128 <__alt_data_end+0xfffb09f8>
    61a8:	00080fc0 	call	80fc <__sinit>
    61ac:	003fd006 	br	60f0 <__alt_data_end+0xfffb09c0>
    61b0:	0005883a 	mov	r2,zero
    61b4:	003fd906 	br	611c <__alt_data_end+0xfffb09ec>
    61b8:	81400c17 	ldw	r5,48(r16)
    61bc:	28000626 	beq	r5,zero,61d8 <__swsetup_r+0x118>
    61c0:	80801004 	addi	r2,r16,64
    61c4:	28800326 	beq	r5,r2,61d4 <__swsetup_r+0x114>
    61c8:	8809883a 	mov	r4,r17
    61cc:	00082700 	call	8270 <_free_r>
    61d0:	8180030b 	ldhu	r6,12(r16)
    61d4:	80000c15 	stw	zero,48(r16)
    61d8:	80c00417 	ldw	r3,16(r16)
    61dc:	00bff6c4 	movi	r2,-37
    61e0:	118c703a 	and	r6,r2,r6
    61e4:	80000115 	stw	zero,4(r16)
    61e8:	80c00015 	stw	r3,0(r16)
    61ec:	003fd806 	br	6150 <__alt_data_end+0xfffb0a20>

000061f0 <quorem>:
    61f0:	defff204 	addi	sp,sp,-56
    61f4:	ddc00b15 	stw	r23,44(sp)
    61f8:	20800417 	ldw	r2,16(r4)
    61fc:	2dc00417 	ldw	r23,16(r5)
    6200:	dfc00d15 	stw	ra,52(sp)
    6204:	df000c15 	stw	fp,48(sp)
    6208:	dd800a15 	stw	r22,40(sp)
    620c:	dd400915 	stw	r21,36(sp)
    6210:	dd000815 	stw	r20,32(sp)
    6214:	dcc00715 	stw	r19,28(sp)
    6218:	dc800615 	stw	r18,24(sp)
    621c:	dc400515 	stw	r17,20(sp)
    6220:	dc000415 	stw	r16,16(sp)
    6224:	15c07a16 	blt	r2,r23,6410 <quorem+0x220>
    6228:	bdffffc4 	addi	r23,r23,-1
    622c:	bde9883a 	add	r20,r23,r23
    6230:	28c00504 	addi	r3,r5,20
    6234:	a529883a 	add	r20,r20,r20
    6238:	1d39883a 	add	fp,r3,r20
    623c:	24c00504 	addi	r19,r4,20
    6240:	d9400215 	stw	r5,8(sp)
    6244:	9d29883a 	add	r20,r19,r20
    6248:	e1400017 	ldw	r5,0(fp)
    624c:	d9000015 	stw	r4,0(sp)
    6250:	a1000017 	ldw	r4,0(r20)
    6254:	29400044 	addi	r5,r5,1
    6258:	d8c00115 	stw	r3,4(sp)
    625c:	dd000315 	stw	r20,12(sp)
    6260:	00035240 	call	3524 <__udivsi3>
    6264:	1025883a 	mov	r18,r2
    6268:	10003026 	beq	r2,zero,632c <quorem+0x13c>
    626c:	dc400117 	ldw	r17,4(sp)
    6270:	9829883a 	mov	r20,r19
    6274:	002d883a 	mov	r22,zero
    6278:	0021883a 	mov	r16,zero
    627c:	8d400017 	ldw	r21,0(r17)
    6280:	900b883a 	mov	r5,r18
    6284:	8c400104 	addi	r17,r17,4
    6288:	a93fffcc 	andi	r4,r21,65535
    628c:	000d6f80 	call	d6f8 <__mulsi3>
    6290:	a808d43a 	srli	r4,r21,16
    6294:	900b883a 	mov	r5,r18
    6298:	b0ad883a 	add	r22,r22,r2
    629c:	000d6f80 	call	d6f8 <__mulsi3>
    62a0:	a1000017 	ldw	r4,0(r20)
    62a4:	b00cd43a 	srli	r6,r22,16
    62a8:	b0ffffcc 	andi	r3,r22,65535
    62ac:	217fffcc 	andi	r5,r4,65535
    62b0:	2c21883a 	add	r16,r5,r16
    62b4:	80c7c83a 	sub	r3,r16,r3
    62b8:	2008d43a 	srli	r4,r4,16
    62bc:	3085883a 	add	r2,r6,r2
    62c0:	1821d43a 	srai	r16,r3,16
    62c4:	117fffcc 	andi	r5,r2,65535
    62c8:	2149c83a 	sub	r4,r4,r5
    62cc:	2421883a 	add	r16,r4,r16
    62d0:	8008943a 	slli	r4,r16,16
    62d4:	18ffffcc 	andi	r3,r3,65535
    62d8:	102cd43a 	srli	r22,r2,16
    62dc:	20c8b03a 	or	r4,r4,r3
    62e0:	a1000015 	stw	r4,0(r20)
    62e4:	8021d43a 	srai	r16,r16,16
    62e8:	a5000104 	addi	r20,r20,4
    62ec:	e47fe32e 	bgeu	fp,r17,627c <__alt_data_end+0xfffb0b4c>
    62f0:	d8c00317 	ldw	r3,12(sp)
    62f4:	18800017 	ldw	r2,0(r3)
    62f8:	10000c1e 	bne	r2,zero,632c <quorem+0x13c>
    62fc:	18bfff04 	addi	r2,r3,-4
    6300:	9880082e 	bgeu	r19,r2,6324 <quorem+0x134>
    6304:	18ffff17 	ldw	r3,-4(r3)
    6308:	18000326 	beq	r3,zero,6318 <quorem+0x128>
    630c:	00000506 	br	6324 <quorem+0x134>
    6310:	10c00017 	ldw	r3,0(r2)
    6314:	1800031e 	bne	r3,zero,6324 <quorem+0x134>
    6318:	10bfff04 	addi	r2,r2,-4
    631c:	bdffffc4 	addi	r23,r23,-1
    6320:	98bffb36 	bltu	r19,r2,6310 <__alt_data_end+0xfffb0be0>
    6324:	d8c00017 	ldw	r3,0(sp)
    6328:	1dc00415 	stw	r23,16(r3)
    632c:	d9000017 	ldw	r4,0(sp)
    6330:	d9400217 	ldw	r5,8(sp)
    6334:	0009c280 	call	9c28 <__mcmp>
    6338:	10002816 	blt	r2,zero,63dc <quorem+0x1ec>
    633c:	dc400117 	ldw	r17,4(sp)
    6340:	94800044 	addi	r18,r18,1
    6344:	980d883a 	mov	r6,r19
    6348:	0007883a 	mov	r3,zero
    634c:	31000017 	ldw	r4,0(r6)
    6350:	89400017 	ldw	r5,0(r17)
    6354:	31800104 	addi	r6,r6,4
    6358:	20bfffcc 	andi	r2,r4,65535
    635c:	10c7883a 	add	r3,r2,r3
    6360:	28bfffcc 	andi	r2,r5,65535
    6364:	1885c83a 	sub	r2,r3,r2
    6368:	280ad43a 	srli	r5,r5,16
    636c:	2008d43a 	srli	r4,r4,16
    6370:	1007d43a 	srai	r3,r2,16
    6374:	10bfffcc 	andi	r2,r2,65535
    6378:	2149c83a 	sub	r4,r4,r5
    637c:	20c9883a 	add	r4,r4,r3
    6380:	200a943a 	slli	r5,r4,16
    6384:	8c400104 	addi	r17,r17,4
    6388:	2007d43a 	srai	r3,r4,16
    638c:	2884b03a 	or	r2,r5,r2
    6390:	30bfff15 	stw	r2,-4(r6)
    6394:	e47fed2e 	bgeu	fp,r17,634c <__alt_data_end+0xfffb0c1c>
    6398:	bdc5883a 	add	r2,r23,r23
    639c:	1085883a 	add	r2,r2,r2
    63a0:	9887883a 	add	r3,r19,r2
    63a4:	18800017 	ldw	r2,0(r3)
    63a8:	10000c1e 	bne	r2,zero,63dc <quorem+0x1ec>
    63ac:	18bfff04 	addi	r2,r3,-4
    63b0:	9880082e 	bgeu	r19,r2,63d4 <quorem+0x1e4>
    63b4:	18ffff17 	ldw	r3,-4(r3)
    63b8:	18000326 	beq	r3,zero,63c8 <quorem+0x1d8>
    63bc:	00000506 	br	63d4 <quorem+0x1e4>
    63c0:	10c00017 	ldw	r3,0(r2)
    63c4:	1800031e 	bne	r3,zero,63d4 <quorem+0x1e4>
    63c8:	10bfff04 	addi	r2,r2,-4
    63cc:	bdffffc4 	addi	r23,r23,-1
    63d0:	98bffb36 	bltu	r19,r2,63c0 <__alt_data_end+0xfffb0c90>
    63d4:	d8c00017 	ldw	r3,0(sp)
    63d8:	1dc00415 	stw	r23,16(r3)
    63dc:	9005883a 	mov	r2,r18
    63e0:	dfc00d17 	ldw	ra,52(sp)
    63e4:	df000c17 	ldw	fp,48(sp)
    63e8:	ddc00b17 	ldw	r23,44(sp)
    63ec:	dd800a17 	ldw	r22,40(sp)
    63f0:	dd400917 	ldw	r21,36(sp)
    63f4:	dd000817 	ldw	r20,32(sp)
    63f8:	dcc00717 	ldw	r19,28(sp)
    63fc:	dc800617 	ldw	r18,24(sp)
    6400:	dc400517 	ldw	r17,20(sp)
    6404:	dc000417 	ldw	r16,16(sp)
    6408:	dec00e04 	addi	sp,sp,56
    640c:	f800283a 	ret
    6410:	0005883a 	mov	r2,zero
    6414:	003ff206 	br	63e0 <__alt_data_end+0xfffb0cb0>

00006418 <_dtoa_r>:
    6418:	20801017 	ldw	r2,64(r4)
    641c:	deffde04 	addi	sp,sp,-136
    6420:	dd401d15 	stw	r21,116(sp)
    6424:	dcc01b15 	stw	r19,108(sp)
    6428:	dc801a15 	stw	r18,104(sp)
    642c:	dc401915 	stw	r17,100(sp)
    6430:	dc001815 	stw	r16,96(sp)
    6434:	dfc02115 	stw	ra,132(sp)
    6438:	df002015 	stw	fp,128(sp)
    643c:	ddc01f15 	stw	r23,124(sp)
    6440:	dd801e15 	stw	r22,120(sp)
    6444:	dd001c15 	stw	r20,112(sp)
    6448:	d9c00315 	stw	r7,12(sp)
    644c:	2021883a 	mov	r16,r4
    6450:	302b883a 	mov	r21,r6
    6454:	2825883a 	mov	r18,r5
    6458:	dc402417 	ldw	r17,144(sp)
    645c:	3027883a 	mov	r19,r6
    6460:	10000826 	beq	r2,zero,6484 <_dtoa_r+0x6c>
    6464:	21801117 	ldw	r6,68(r4)
    6468:	00c00044 	movi	r3,1
    646c:	100b883a 	mov	r5,r2
    6470:	1986983a 	sll	r3,r3,r6
    6474:	11800115 	stw	r6,4(r2)
    6478:	10c00215 	stw	r3,8(r2)
    647c:	00093540 	call	9354 <_Bfree>
    6480:	80001015 	stw	zero,64(r16)
    6484:	a8002d16 	blt	r21,zero,653c <_dtoa_r+0x124>
    6488:	88000015 	stw	zero,0(r17)
    648c:	a8dffc2c 	andhi	r3,r21,32752
    6490:	009ffc34 	movhi	r2,32752
    6494:	18801b26 	beq	r3,r2,6504 <_dtoa_r+0xec>
    6498:	9009883a 	mov	r4,r18
    649c:	980b883a 	mov	r5,r19
    64a0:	000d883a 	mov	r6,zero
    64a4:	000f883a 	mov	r7,zero
    64a8:	000e93c0 	call	e93c <__eqdf2>
    64ac:	10002a1e 	bne	r2,zero,6558 <_dtoa_r+0x140>
    64b0:	d8c02317 	ldw	r3,140(sp)
    64b4:	d9002517 	ldw	r4,148(sp)
    64b8:	00800044 	movi	r2,1
    64bc:	18800015 	stw	r2,0(r3)
    64c0:	2001a226 	beq	r4,zero,6b4c <_dtoa_r+0x734>
    64c4:	00800074 	movhi	r2,1
    64c8:	108be644 	addi	r2,r2,12185
    64cc:	20800015 	stw	r2,0(r4)
    64d0:	10bfffc4 	addi	r2,r2,-1
    64d4:	dfc02117 	ldw	ra,132(sp)
    64d8:	df002017 	ldw	fp,128(sp)
    64dc:	ddc01f17 	ldw	r23,124(sp)
    64e0:	dd801e17 	ldw	r22,120(sp)
    64e4:	dd401d17 	ldw	r21,116(sp)
    64e8:	dd001c17 	ldw	r20,112(sp)
    64ec:	dcc01b17 	ldw	r19,108(sp)
    64f0:	dc801a17 	ldw	r18,104(sp)
    64f4:	dc401917 	ldw	r17,100(sp)
    64f8:	dc001817 	ldw	r16,96(sp)
    64fc:	dec02204 	addi	sp,sp,136
    6500:	f800283a 	ret
    6504:	d8c02317 	ldw	r3,140(sp)
    6508:	0089c3c4 	movi	r2,9999
    650c:	18800015 	stw	r2,0(r3)
    6510:	90017c26 	beq	r18,zero,6b04 <_dtoa_r+0x6ec>
    6514:	00800074 	movhi	r2,1
    6518:	108bf204 	addi	r2,r2,12232
    651c:	d9002517 	ldw	r4,148(sp)
    6520:	203fec26 	beq	r4,zero,64d4 <__alt_data_end+0xfffb0da4>
    6524:	10c000c7 	ldb	r3,3(r2)
    6528:	18017d1e 	bne	r3,zero,6b20 <_dtoa_r+0x708>
    652c:	10c000c4 	addi	r3,r2,3
    6530:	d9802517 	ldw	r6,148(sp)
    6534:	30c00015 	stw	r3,0(r6)
    6538:	003fe606 	br	64d4 <__alt_data_end+0xfffb0da4>
    653c:	04e00034 	movhi	r19,32768
    6540:	9cffffc4 	addi	r19,r19,-1
    6544:	00800044 	movi	r2,1
    6548:	ace6703a 	and	r19,r21,r19
    654c:	88800015 	stw	r2,0(r17)
    6550:	982b883a 	mov	r21,r19
    6554:	003fcd06 	br	648c <__alt_data_end+0xfffb0d5c>
    6558:	d8800204 	addi	r2,sp,8
    655c:	a822d53a 	srli	r17,r21,20
    6560:	d8800015 	stw	r2,0(sp)
    6564:	8009883a 	mov	r4,r16
    6568:	900b883a 	mov	r5,r18
    656c:	980d883a 	mov	r6,r19
    6570:	d9c00104 	addi	r7,sp,4
    6574:	0009f9c0 	call	9f9c <__d2b>
    6578:	1039883a 	mov	fp,r2
    657c:	88016a1e 	bne	r17,zero,6b28 <_dtoa_r+0x710>
    6580:	dd000217 	ldw	r20,8(sp)
    6584:	dc400117 	ldw	r17,4(sp)
    6588:	00befbc4 	movi	r2,-1041
    658c:	a463883a 	add	r17,r20,r17
    6590:	8882ea16 	blt	r17,r2,713c <_dtoa_r+0xd24>
    6594:	00bf0384 	movi	r2,-1010
    6598:	1445c83a 	sub	r2,r2,r17
    659c:	89010484 	addi	r4,r17,1042
    65a0:	a8aa983a 	sll	r21,r21,r2
    65a4:	9108d83a 	srl	r4,r18,r4
    65a8:	a908b03a 	or	r4,r21,r4
    65ac:	000fe140 	call	fe14 <__floatunsidf>
    65b0:	017f8434 	movhi	r5,65040
    65b4:	01800044 	movi	r6,1
    65b8:	1009883a 	mov	r4,r2
    65bc:	194b883a 	add	r5,r3,r5
    65c0:	8c7fffc4 	addi	r17,r17,-1
    65c4:	d9800f15 	stw	r6,60(sp)
    65c8:	000d883a 	mov	r6,zero
    65cc:	01cffe34 	movhi	r7,16376
    65d0:	000f3ec0 	call	f3ec <__subdf3>
    65d4:	0198dbf4 	movhi	r6,25455
    65d8:	01cff4f4 	movhi	r7,16339
    65dc:	1009883a 	mov	r4,r2
    65e0:	180b883a 	mov	r5,r3
    65e4:	3190d844 	addi	r6,r6,17249
    65e8:	39e1e9c4 	addi	r7,r7,-30809
    65ec:	000eb800 	call	eb80 <__muldf3>
    65f0:	01a2d874 	movhi	r6,35681
    65f4:	01cff1f4 	movhi	r7,16327
    65f8:	180b883a 	mov	r5,r3
    65fc:	31b22cc4 	addi	r6,r6,-14157
    6600:	39e28a04 	addi	r7,r7,-30168
    6604:	1009883a 	mov	r4,r2
    6608:	000d7200 	call	d720 <__adddf3>
    660c:	8809883a 	mov	r4,r17
    6610:	102d883a 	mov	r22,r2
    6614:	182b883a 	mov	r21,r3
    6618:	000fd440 	call	fd44 <__floatsidf>
    661c:	019427f4 	movhi	r6,20639
    6620:	01cff4f4 	movhi	r7,16339
    6624:	1009883a 	mov	r4,r2
    6628:	180b883a 	mov	r5,r3
    662c:	319e7ec4 	addi	r6,r6,31227
    6630:	39d104c4 	addi	r7,r7,17427
    6634:	000eb800 	call	eb80 <__muldf3>
    6638:	b009883a 	mov	r4,r22
    663c:	a80b883a 	mov	r5,r21
    6640:	100d883a 	mov	r6,r2
    6644:	180f883a 	mov	r7,r3
    6648:	000d7200 	call	d720 <__adddf3>
    664c:	1009883a 	mov	r4,r2
    6650:	180b883a 	mov	r5,r3
    6654:	102d883a 	mov	r22,r2
    6658:	182b883a 	mov	r21,r3
    665c:	000fcbc0 	call	fcbc <__fixdfsi>
    6660:	b009883a 	mov	r4,r22
    6664:	a80b883a 	mov	r5,r21
    6668:	000d883a 	mov	r6,zero
    666c:	000f883a 	mov	r7,zero
    6670:	d8800515 	stw	r2,20(sp)
    6674:	000eaa00 	call	eaa0 <__ledf2>
    6678:	10023116 	blt	r2,zero,6f40 <_dtoa_r+0xb28>
    667c:	d8c00517 	ldw	r3,20(sp)
    6680:	00800584 	movi	r2,22
    6684:	10c21f36 	bltu	r2,r3,6f04 <_dtoa_r+0xaec>
    6688:	180490fa 	slli	r2,r3,3
    668c:	00c00074 	movhi	r3,1
    6690:	18cc0e04 	addi	r3,r3,12344
    6694:	1885883a 	add	r2,r3,r2
    6698:	11000017 	ldw	r4,0(r2)
    669c:	11400117 	ldw	r5,4(r2)
    66a0:	900d883a 	mov	r6,r18
    66a4:	980f883a 	mov	r7,r19
    66a8:	000e9c00 	call	e9c0 <__gedf2>
    66ac:	0082a70e 	bge	zero,r2,714c <_dtoa_r+0xd34>
    66b0:	d9000517 	ldw	r4,20(sp)
    66b4:	d8000c15 	stw	zero,48(sp)
    66b8:	213fffc4 	addi	r4,r4,-1
    66bc:	d9000515 	stw	r4,20(sp)
    66c0:	a463c83a 	sub	r17,r20,r17
    66c4:	8dbfffc4 	addi	r22,r17,-1
    66c8:	b0021916 	blt	r22,zero,6f30 <_dtoa_r+0xb18>
    66cc:	d8000815 	stw	zero,32(sp)
    66d0:	d8800517 	ldw	r2,20(sp)
    66d4:	10020e16 	blt	r2,zero,6f10 <_dtoa_r+0xaf8>
    66d8:	b0ad883a 	add	r22,r22,r2
    66dc:	d8800a15 	stw	r2,40(sp)
    66e0:	d8000915 	stw	zero,36(sp)
    66e4:	d8c00317 	ldw	r3,12(sp)
    66e8:	00800244 	movi	r2,9
    66ec:	10c11a36 	bltu	r2,r3,6b58 <_dtoa_r+0x740>
    66f0:	00800144 	movi	r2,5
    66f4:	10c4fc0e 	bge	r2,r3,7ae8 <_dtoa_r+0x16d0>
    66f8:	18ffff04 	addi	r3,r3,-4
    66fc:	d8c00315 	stw	r3,12(sp)
    6700:	0029883a 	mov	r20,zero
    6704:	d9800317 	ldw	r6,12(sp)
    6708:	008000c4 	movi	r2,3
    670c:	3083bd26 	beq	r6,r2,7604 <_dtoa_r+0x11ec>
    6710:	1183670e 	bge	r2,r6,74b0 <_dtoa_r+0x1098>
    6714:	d8c00317 	ldw	r3,12(sp)
    6718:	00800104 	movi	r2,4
    671c:	1882e726 	beq	r3,r2,72bc <_dtoa_r+0xea4>
    6720:	00800144 	movi	r2,5
    6724:	1884f21e 	bne	r3,r2,7af0 <_dtoa_r+0x16d8>
    6728:	00800044 	movi	r2,1
    672c:	d8800b15 	stw	r2,44(sp)
    6730:	d8c02217 	ldw	r3,136(sp)
    6734:	d9000517 	ldw	r4,20(sp)
    6738:	1907883a 	add	r3,r3,r4
    673c:	19800044 	addi	r6,r3,1
    6740:	d8c00d15 	stw	r3,52(sp)
    6744:	d9800615 	stw	r6,24(sp)
    6748:	0183c30e 	bge	zero,r6,7658 <_dtoa_r+0x1240>
    674c:	d9800617 	ldw	r6,24(sp)
    6750:	3023883a 	mov	r17,r6
    6754:	80001115 	stw	zero,68(r16)
    6758:	008005c4 	movi	r2,23
    675c:	1184f62e 	bgeu	r2,r6,7b38 <_dtoa_r+0x1720>
    6760:	00c00044 	movi	r3,1
    6764:	00800104 	movi	r2,4
    6768:	1085883a 	add	r2,r2,r2
    676c:	11000504 	addi	r4,r2,20
    6770:	180b883a 	mov	r5,r3
    6774:	18c00044 	addi	r3,r3,1
    6778:	313ffb2e 	bgeu	r6,r4,6768 <__alt_data_end+0xfffb1038>
    677c:	81401115 	stw	r5,68(r16)
    6780:	8009883a 	mov	r4,r16
    6784:	00092ac0 	call	92ac <_Balloc>
    6788:	d8800715 	stw	r2,28(sp)
    678c:	80801015 	stw	r2,64(r16)
    6790:	00800384 	movi	r2,14
    6794:	1440fd36 	bltu	r2,r17,6b8c <_dtoa_r+0x774>
    6798:	a000fc26 	beq	r20,zero,6b8c <_dtoa_r+0x774>
    679c:	d8800517 	ldw	r2,20(sp)
    67a0:	0083b90e 	bge	zero,r2,7688 <_dtoa_r+0x1270>
    67a4:	d8c00517 	ldw	r3,20(sp)
    67a8:	108003cc 	andi	r2,r2,15
    67ac:	100490fa 	slli	r2,r2,3
    67b0:	182fd13a 	srai	r23,r3,4
    67b4:	00c00074 	movhi	r3,1
    67b8:	18cc0e04 	addi	r3,r3,12344
    67bc:	1885883a 	add	r2,r3,r2
    67c0:	b8c0040c 	andi	r3,r23,16
    67c4:	12c00017 	ldw	r11,0(r2)
    67c8:	12800117 	ldw	r10,4(r2)
    67cc:	18039726 	beq	r3,zero,762c <_dtoa_r+0x1214>
    67d0:	00800074 	movhi	r2,1
    67d4:	108c0404 	addi	r2,r2,12304
    67d8:	11800817 	ldw	r6,32(r2)
    67dc:	11c00917 	ldw	r7,36(r2)
    67e0:	9009883a 	mov	r4,r18
    67e4:	980b883a 	mov	r5,r19
    67e8:	da801615 	stw	r10,88(sp)
    67ec:	dac01515 	stw	r11,84(sp)
    67f0:	000dfbc0 	call	dfbc <__divdf3>
    67f4:	da801617 	ldw	r10,88(sp)
    67f8:	dac01517 	ldw	r11,84(sp)
    67fc:	bdc003cc 	andi	r23,r23,15
    6800:	044000c4 	movi	r17,3
    6804:	d8800e15 	stw	r2,56(sp)
    6808:	182b883a 	mov	r21,r3
    680c:	b8001126 	beq	r23,zero,6854 <_dtoa_r+0x43c>
    6810:	05000074 	movhi	r20,1
    6814:	a50c0404 	addi	r20,r20,12304
    6818:	5805883a 	mov	r2,r11
    681c:	5007883a 	mov	r3,r10
    6820:	b980004c 	andi	r6,r23,1
    6824:	1009883a 	mov	r4,r2
    6828:	b82fd07a 	srai	r23,r23,1
    682c:	180b883a 	mov	r5,r3
    6830:	30000426 	beq	r6,zero,6844 <_dtoa_r+0x42c>
    6834:	a1800017 	ldw	r6,0(r20)
    6838:	a1c00117 	ldw	r7,4(r20)
    683c:	8c400044 	addi	r17,r17,1
    6840:	000eb800 	call	eb80 <__muldf3>
    6844:	a5000204 	addi	r20,r20,8
    6848:	b83ff51e 	bne	r23,zero,6820 <__alt_data_end+0xfffb10f0>
    684c:	1017883a 	mov	r11,r2
    6850:	1815883a 	mov	r10,r3
    6854:	d9000e17 	ldw	r4,56(sp)
    6858:	a80b883a 	mov	r5,r21
    685c:	580d883a 	mov	r6,r11
    6860:	500f883a 	mov	r7,r10
    6864:	000dfbc0 	call	dfbc <__divdf3>
    6868:	1029883a 	mov	r20,r2
    686c:	182b883a 	mov	r21,r3
    6870:	d9800c17 	ldw	r6,48(sp)
    6874:	30000626 	beq	r6,zero,6890 <_dtoa_r+0x478>
    6878:	a009883a 	mov	r4,r20
    687c:	a80b883a 	mov	r5,r21
    6880:	000d883a 	mov	r6,zero
    6884:	01cffc34 	movhi	r7,16368
    6888:	000eaa00 	call	eaa0 <__ledf2>
    688c:	10043216 	blt	r2,zero,7958 <_dtoa_r+0x1540>
    6890:	8809883a 	mov	r4,r17
    6894:	000fd440 	call	fd44 <__floatsidf>
    6898:	1009883a 	mov	r4,r2
    689c:	180b883a 	mov	r5,r3
    68a0:	a00d883a 	mov	r6,r20
    68a4:	a80f883a 	mov	r7,r21
    68a8:	000eb800 	call	eb80 <__muldf3>
    68ac:	000d883a 	mov	r6,zero
    68b0:	1009883a 	mov	r4,r2
    68b4:	180b883a 	mov	r5,r3
    68b8:	01d00734 	movhi	r7,16412
    68bc:	000d7200 	call	d720 <__adddf3>
    68c0:	1023883a 	mov	r17,r2
    68c4:	d9800617 	ldw	r6,24(sp)
    68c8:	00bf3034 	movhi	r2,64704
    68cc:	1885883a 	add	r2,r3,r2
    68d0:	d8800e15 	stw	r2,56(sp)
    68d4:	30032e26 	beq	r6,zero,7590 <_dtoa_r+0x1178>
    68d8:	d8c00517 	ldw	r3,20(sp)
    68dc:	da800617 	ldw	r10,24(sp)
    68e0:	d8c01215 	stw	r3,72(sp)
    68e4:	d9000b17 	ldw	r4,44(sp)
    68e8:	2003b026 	beq	r4,zero,77ac <_dtoa_r+0x1394>
    68ec:	50bfffc4 	addi	r2,r10,-1
    68f0:	100490fa 	slli	r2,r2,3
    68f4:	00c00074 	movhi	r3,1
    68f8:	18cc0e04 	addi	r3,r3,12344
    68fc:	1885883a 	add	r2,r3,r2
    6900:	11800017 	ldw	r6,0(r2)
    6904:	11c00117 	ldw	r7,4(r2)
    6908:	d8800717 	ldw	r2,28(sp)
    690c:	0009883a 	mov	r4,zero
    6910:	014ff834 	movhi	r5,16352
    6914:	da801615 	stw	r10,88(sp)
    6918:	15c00044 	addi	r23,r2,1
    691c:	000dfbc0 	call	dfbc <__divdf3>
    6920:	d9c00e17 	ldw	r7,56(sp)
    6924:	880d883a 	mov	r6,r17
    6928:	1009883a 	mov	r4,r2
    692c:	180b883a 	mov	r5,r3
    6930:	000f3ec0 	call	f3ec <__subdf3>
    6934:	a80b883a 	mov	r5,r21
    6938:	a009883a 	mov	r4,r20
    693c:	d8c01015 	stw	r3,64(sp)
    6940:	d8800e15 	stw	r2,56(sp)
    6944:	000fcbc0 	call	fcbc <__fixdfsi>
    6948:	1009883a 	mov	r4,r2
    694c:	d8801715 	stw	r2,92(sp)
    6950:	000fd440 	call	fd44 <__floatsidf>
    6954:	a009883a 	mov	r4,r20
    6958:	a80b883a 	mov	r5,r21
    695c:	100d883a 	mov	r6,r2
    6960:	180f883a 	mov	r7,r3
    6964:	000f3ec0 	call	f3ec <__subdf3>
    6968:	da001717 	ldw	r8,92(sp)
    696c:	1829883a 	mov	r20,r3
    6970:	d8c00717 	ldw	r3,28(sp)
    6974:	d9000e17 	ldw	r4,56(sp)
    6978:	d9401017 	ldw	r5,64(sp)
    697c:	42000c04 	addi	r8,r8,48
    6980:	1023883a 	mov	r17,r2
    6984:	1a000005 	stb	r8,0(r3)
    6988:	880d883a 	mov	r6,r17
    698c:	a00f883a 	mov	r7,r20
    6990:	402b883a 	mov	r21,r8
    6994:	000e9c00 	call	e9c0 <__gedf2>
    6998:	00844516 	blt	zero,r2,7ab0 <_dtoa_r+0x1698>
    699c:	0009883a 	mov	r4,zero
    69a0:	014ffc34 	movhi	r5,16368
    69a4:	880d883a 	mov	r6,r17
    69a8:	a00f883a 	mov	r7,r20
    69ac:	000f3ec0 	call	f3ec <__subdf3>
    69b0:	d9000e17 	ldw	r4,56(sp)
    69b4:	d9401017 	ldw	r5,64(sp)
    69b8:	100d883a 	mov	r6,r2
    69bc:	180f883a 	mov	r7,r3
    69c0:	000e9c00 	call	e9c0 <__gedf2>
    69c4:	da801617 	ldw	r10,88(sp)
    69c8:	00843616 	blt	zero,r2,7aa4 <_dtoa_r+0x168c>
    69cc:	00800044 	movi	r2,1
    69d0:	12806e0e 	bge	r2,r10,6b8c <_dtoa_r+0x774>
    69d4:	d9000717 	ldw	r4,28(sp)
    69d8:	dd801315 	stw	r22,76(sp)
    69dc:	dc001115 	stw	r16,68(sp)
    69e0:	2295883a 	add	r10,r4,r10
    69e4:	dcc01415 	stw	r19,80(sp)
    69e8:	502d883a 	mov	r22,r10
    69ec:	dcc01017 	ldw	r19,64(sp)
    69f0:	b821883a 	mov	r16,r23
    69f4:	dc801015 	stw	r18,64(sp)
    69f8:	dc800e17 	ldw	r18,56(sp)
    69fc:	00000906 	br	6a24 <_dtoa_r+0x60c>
    6a00:	000f3ec0 	call	f3ec <__subdf3>
    6a04:	1009883a 	mov	r4,r2
    6a08:	180b883a 	mov	r5,r3
    6a0c:	900d883a 	mov	r6,r18
    6a10:	980f883a 	mov	r7,r19
    6a14:	000eaa00 	call	eaa0 <__ledf2>
    6a18:	10040e16 	blt	r2,zero,7a54 <_dtoa_r+0x163c>
    6a1c:	b821883a 	mov	r16,r23
    6a20:	bd841026 	beq	r23,r22,7a64 <_dtoa_r+0x164c>
    6a24:	9009883a 	mov	r4,r18
    6a28:	980b883a 	mov	r5,r19
    6a2c:	000d883a 	mov	r6,zero
    6a30:	01d00934 	movhi	r7,16420
    6a34:	000eb800 	call	eb80 <__muldf3>
    6a38:	000d883a 	mov	r6,zero
    6a3c:	01d00934 	movhi	r7,16420
    6a40:	8809883a 	mov	r4,r17
    6a44:	a00b883a 	mov	r5,r20
    6a48:	1025883a 	mov	r18,r2
    6a4c:	1827883a 	mov	r19,r3
    6a50:	000eb800 	call	eb80 <__muldf3>
    6a54:	180b883a 	mov	r5,r3
    6a58:	1009883a 	mov	r4,r2
    6a5c:	1823883a 	mov	r17,r3
    6a60:	1029883a 	mov	r20,r2
    6a64:	000fcbc0 	call	fcbc <__fixdfsi>
    6a68:	1009883a 	mov	r4,r2
    6a6c:	102b883a 	mov	r21,r2
    6a70:	000fd440 	call	fd44 <__floatsidf>
    6a74:	a009883a 	mov	r4,r20
    6a78:	880b883a 	mov	r5,r17
    6a7c:	100d883a 	mov	r6,r2
    6a80:	180f883a 	mov	r7,r3
    6a84:	000f3ec0 	call	f3ec <__subdf3>
    6a88:	ad400c04 	addi	r21,r21,48
    6a8c:	1009883a 	mov	r4,r2
    6a90:	180b883a 	mov	r5,r3
    6a94:	900d883a 	mov	r6,r18
    6a98:	980f883a 	mov	r7,r19
    6a9c:	85400005 	stb	r21,0(r16)
    6aa0:	1023883a 	mov	r17,r2
    6aa4:	1829883a 	mov	r20,r3
    6aa8:	000eaa00 	call	eaa0 <__ledf2>
    6aac:	bdc00044 	addi	r23,r23,1
    6ab0:	0009883a 	mov	r4,zero
    6ab4:	014ffc34 	movhi	r5,16368
    6ab8:	880d883a 	mov	r6,r17
    6abc:	a00f883a 	mov	r7,r20
    6ac0:	103fcf0e 	bge	r2,zero,6a00 <__alt_data_end+0xfffb12d0>
    6ac4:	d9801217 	ldw	r6,72(sp)
    6ac8:	dc001117 	ldw	r16,68(sp)
    6acc:	d9800515 	stw	r6,20(sp)
    6ad0:	8009883a 	mov	r4,r16
    6ad4:	e00b883a 	mov	r5,fp
    6ad8:	00093540 	call	9354 <_Bfree>
    6adc:	d8c00517 	ldw	r3,20(sp)
    6ae0:	d9002317 	ldw	r4,140(sp)
    6ae4:	d9802517 	ldw	r6,148(sp)
    6ae8:	b8000005 	stb	zero,0(r23)
    6aec:	18800044 	addi	r2,r3,1
    6af0:	20800015 	stw	r2,0(r4)
    6af4:	30027226 	beq	r6,zero,74c0 <_dtoa_r+0x10a8>
    6af8:	35c00015 	stw	r23,0(r6)
    6afc:	d8800717 	ldw	r2,28(sp)
    6b00:	003e7406 	br	64d4 <__alt_data_end+0xfffb0da4>
    6b04:	00800434 	movhi	r2,16
    6b08:	10bfffc4 	addi	r2,r2,-1
    6b0c:	a8aa703a 	and	r21,r21,r2
    6b10:	a83e801e 	bne	r21,zero,6514 <__alt_data_end+0xfffb0de4>
    6b14:	00800074 	movhi	r2,1
    6b18:	108bef04 	addi	r2,r2,12220
    6b1c:	003e7f06 	br	651c <__alt_data_end+0xfffb0dec>
    6b20:	10c00204 	addi	r3,r2,8
    6b24:	003e8206 	br	6530 <__alt_data_end+0xfffb0e00>
    6b28:	01400434 	movhi	r5,16
    6b2c:	297fffc4 	addi	r5,r5,-1
    6b30:	994a703a 	and	r5,r19,r5
    6b34:	9009883a 	mov	r4,r18
    6b38:	8c7f0044 	addi	r17,r17,-1023
    6b3c:	294ffc34 	orhi	r5,r5,16368
    6b40:	dd000217 	ldw	r20,8(sp)
    6b44:	d8000f15 	stw	zero,60(sp)
    6b48:	003e9f06 	br	65c8 <__alt_data_end+0xfffb0e98>
    6b4c:	00800074 	movhi	r2,1
    6b50:	108be604 	addi	r2,r2,12184
    6b54:	003e5f06 	br	64d4 <__alt_data_end+0xfffb0da4>
    6b58:	80001115 	stw	zero,68(r16)
    6b5c:	8009883a 	mov	r4,r16
    6b60:	000b883a 	mov	r5,zero
    6b64:	00092ac0 	call	92ac <_Balloc>
    6b68:	01bfffc4 	movi	r6,-1
    6b6c:	d8800715 	stw	r2,28(sp)
    6b70:	80801015 	stw	r2,64(r16)
    6b74:	00800044 	movi	r2,1
    6b78:	d9800615 	stw	r6,24(sp)
    6b7c:	d8800b15 	stw	r2,44(sp)
    6b80:	d8002215 	stw	zero,136(sp)
    6b84:	d9800d15 	stw	r6,52(sp)
    6b88:	d8000315 	stw	zero,12(sp)
    6b8c:	d8800117 	ldw	r2,4(sp)
    6b90:	10008e16 	blt	r2,zero,6dcc <_dtoa_r+0x9b4>
    6b94:	d9000517 	ldw	r4,20(sp)
    6b98:	00c00384 	movi	r3,14
    6b9c:	19008b16 	blt	r3,r4,6dcc <_dtoa_r+0x9b4>
    6ba0:	200490fa 	slli	r2,r4,3
    6ba4:	00c00074 	movhi	r3,1
    6ba8:	d9802217 	ldw	r6,136(sp)
    6bac:	18cc0e04 	addi	r3,r3,12344
    6bb0:	1885883a 	add	r2,r3,r2
    6bb4:	14400017 	ldw	r17,0(r2)
    6bb8:	15000117 	ldw	r20,4(r2)
    6bbc:	3001c716 	blt	r6,zero,72dc <_dtoa_r+0xec4>
    6bc0:	880d883a 	mov	r6,r17
    6bc4:	a00f883a 	mov	r7,r20
    6bc8:	9009883a 	mov	r4,r18
    6bcc:	980b883a 	mov	r5,r19
    6bd0:	000dfbc0 	call	dfbc <__divdf3>
    6bd4:	180b883a 	mov	r5,r3
    6bd8:	1009883a 	mov	r4,r2
    6bdc:	000fcbc0 	call	fcbc <__fixdfsi>
    6be0:	1009883a 	mov	r4,r2
    6be4:	102d883a 	mov	r22,r2
    6be8:	000fd440 	call	fd44 <__floatsidf>
    6bec:	1009883a 	mov	r4,r2
    6bf0:	180b883a 	mov	r5,r3
    6bf4:	880d883a 	mov	r6,r17
    6bf8:	a00f883a 	mov	r7,r20
    6bfc:	000eb800 	call	eb80 <__muldf3>
    6c00:	9009883a 	mov	r4,r18
    6c04:	980b883a 	mov	r5,r19
    6c08:	100d883a 	mov	r6,r2
    6c0c:	180f883a 	mov	r7,r3
    6c10:	000f3ec0 	call	f3ec <__subdf3>
    6c14:	d9000717 	ldw	r4,28(sp)
    6c18:	d9800617 	ldw	r6,24(sp)
    6c1c:	180b883a 	mov	r5,r3
    6c20:	b0c00c04 	addi	r3,r22,48
    6c24:	20c00005 	stb	r3,0(r4)
    6c28:	25c00044 	addi	r23,r4,1
    6c2c:	01000044 	movi	r4,1
    6c30:	1011883a 	mov	r8,r2
    6c34:	2807883a 	mov	r3,r5
    6c38:	31003d26 	beq	r6,r4,6d30 <_dtoa_r+0x918>
    6c3c:	000d883a 	mov	r6,zero
    6c40:	01d00934 	movhi	r7,16420
    6c44:	1009883a 	mov	r4,r2
    6c48:	000eb800 	call	eb80 <__muldf3>
    6c4c:	1009883a 	mov	r4,r2
    6c50:	180b883a 	mov	r5,r3
    6c54:	000d883a 	mov	r6,zero
    6c58:	000f883a 	mov	r7,zero
    6c5c:	1027883a 	mov	r19,r2
    6c60:	182b883a 	mov	r21,r3
    6c64:	000e93c0 	call	e93c <__eqdf2>
    6c68:	103f9926 	beq	r2,zero,6ad0 <__alt_data_end+0xfffb13a0>
    6c6c:	d8c00617 	ldw	r3,24(sp)
    6c70:	d9000717 	ldw	r4,28(sp)
    6c74:	b825883a 	mov	r18,r23
    6c78:	18bfffc4 	addi	r2,r3,-1
    6c7c:	20ad883a 	add	r22,r4,r2
    6c80:	dc000315 	stw	r16,12(sp)
    6c84:	00000a06 	br	6cb0 <_dtoa_r+0x898>
    6c88:	000eb800 	call	eb80 <__muldf3>
    6c8c:	1009883a 	mov	r4,r2
    6c90:	180b883a 	mov	r5,r3
    6c94:	000d883a 	mov	r6,zero
    6c98:	000f883a 	mov	r7,zero
    6c9c:	1027883a 	mov	r19,r2
    6ca0:	182b883a 	mov	r21,r3
    6ca4:	b825883a 	mov	r18,r23
    6ca8:	000e93c0 	call	e93c <__eqdf2>
    6cac:	10022626 	beq	r2,zero,7548 <_dtoa_r+0x1130>
    6cb0:	880d883a 	mov	r6,r17
    6cb4:	a00f883a 	mov	r7,r20
    6cb8:	9809883a 	mov	r4,r19
    6cbc:	a80b883a 	mov	r5,r21
    6cc0:	000dfbc0 	call	dfbc <__divdf3>
    6cc4:	180b883a 	mov	r5,r3
    6cc8:	1009883a 	mov	r4,r2
    6ccc:	000fcbc0 	call	fcbc <__fixdfsi>
    6cd0:	1009883a 	mov	r4,r2
    6cd4:	1021883a 	mov	r16,r2
    6cd8:	000fd440 	call	fd44 <__floatsidf>
    6cdc:	1009883a 	mov	r4,r2
    6ce0:	180b883a 	mov	r5,r3
    6ce4:	880d883a 	mov	r6,r17
    6ce8:	a00f883a 	mov	r7,r20
    6cec:	000eb800 	call	eb80 <__muldf3>
    6cf0:	9809883a 	mov	r4,r19
    6cf4:	a80b883a 	mov	r5,r21
    6cf8:	100d883a 	mov	r6,r2
    6cfc:	180f883a 	mov	r7,r3
    6d00:	000f3ec0 	call	f3ec <__subdf3>
    6d04:	82000c04 	addi	r8,r16,48
    6d08:	92000005 	stb	r8,0(r18)
    6d0c:	1009883a 	mov	r4,r2
    6d10:	180b883a 	mov	r5,r3
    6d14:	000d883a 	mov	r6,zero
    6d18:	01d00934 	movhi	r7,16420
    6d1c:	1011883a 	mov	r8,r2
    6d20:	bdc00044 	addi	r23,r23,1
    6d24:	95bfd81e 	bne	r18,r22,6c88 <__alt_data_end+0xfffb1558>
    6d28:	802d883a 	mov	r22,r16
    6d2c:	dc000317 	ldw	r16,12(sp)
    6d30:	4009883a 	mov	r4,r8
    6d34:	180b883a 	mov	r5,r3
    6d38:	400d883a 	mov	r6,r8
    6d3c:	180f883a 	mov	r7,r3
    6d40:	000d7200 	call	d720 <__adddf3>
    6d44:	8809883a 	mov	r4,r17
    6d48:	a00b883a 	mov	r5,r20
    6d4c:	100d883a 	mov	r6,r2
    6d50:	180f883a 	mov	r7,r3
    6d54:	1027883a 	mov	r19,r2
    6d58:	1825883a 	mov	r18,r3
    6d5c:	000eaa00 	call	eaa0 <__ledf2>
    6d60:	10000816 	blt	r2,zero,6d84 <_dtoa_r+0x96c>
    6d64:	8809883a 	mov	r4,r17
    6d68:	a00b883a 	mov	r5,r20
    6d6c:	980d883a 	mov	r6,r19
    6d70:	900f883a 	mov	r7,r18
    6d74:	000e93c0 	call	e93c <__eqdf2>
    6d78:	103f551e 	bne	r2,zero,6ad0 <__alt_data_end+0xfffb13a0>
    6d7c:	b580004c 	andi	r22,r22,1
    6d80:	b03f5326 	beq	r22,zero,6ad0 <__alt_data_end+0xfffb13a0>
    6d84:	bd7fffc3 	ldbu	r21,-1(r23)
    6d88:	b8bfffc4 	addi	r2,r23,-1
    6d8c:	1007883a 	mov	r3,r2
    6d90:	01400e44 	movi	r5,57
    6d94:	d9800717 	ldw	r6,28(sp)
    6d98:	00000506 	br	6db0 <_dtoa_r+0x998>
    6d9c:	18ffffc4 	addi	r3,r3,-1
    6da0:	30825e26 	beq	r6,r2,771c <_dtoa_r+0x1304>
    6da4:	1d400003 	ldbu	r21,0(r3)
    6da8:	102f883a 	mov	r23,r2
    6dac:	10bfffc4 	addi	r2,r2,-1
    6db0:	a9003fcc 	andi	r4,r21,255
    6db4:	2100201c 	xori	r4,r4,128
    6db8:	213fe004 	addi	r4,r4,-128
    6dbc:	217ff726 	beq	r4,r5,6d9c <__alt_data_end+0xfffb166c>
    6dc0:	aa000044 	addi	r8,r21,1
    6dc4:	12000005 	stb	r8,0(r2)
    6dc8:	003f4106 	br	6ad0 <__alt_data_end+0xfffb13a0>
    6dcc:	d8c00b17 	ldw	r3,44(sp)
    6dd0:	18006726 	beq	r3,zero,6f70 <_dtoa_r+0xb58>
    6dd4:	d9000317 	ldw	r4,12(sp)
    6dd8:	00c00044 	movi	r3,1
    6ddc:	19016a0e 	bge	r3,r4,7388 <_dtoa_r+0xf70>
    6de0:	d8800617 	ldw	r2,24(sp)
    6de4:	d8c00917 	ldw	r3,36(sp)
    6de8:	157fffc4 	addi	r21,r2,-1
    6dec:	1d420716 	blt	r3,r21,760c <_dtoa_r+0x11f4>
    6df0:	1d6bc83a 	sub	r21,r3,r21
    6df4:	d8800617 	ldw	r2,24(sp)
    6df8:	1002c716 	blt	r2,zero,7918 <_dtoa_r+0x1500>
    6dfc:	dd000817 	ldw	r20,32(sp)
    6e00:	d8800617 	ldw	r2,24(sp)
    6e04:	d9800817 	ldw	r6,32(sp)
    6e08:	8009883a 	mov	r4,r16
    6e0c:	01400044 	movi	r5,1
    6e10:	308d883a 	add	r6,r6,r2
    6e14:	d9800815 	stw	r6,32(sp)
    6e18:	b0ad883a 	add	r22,r22,r2
    6e1c:	00096d40 	call	96d4 <__i2b>
    6e20:	1023883a 	mov	r17,r2
    6e24:	a0000826 	beq	r20,zero,6e48 <_dtoa_r+0xa30>
    6e28:	0580070e 	bge	zero,r22,6e48 <_dtoa_r+0xa30>
    6e2c:	b005883a 	mov	r2,r22
    6e30:	a5812016 	blt	r20,r22,72b4 <_dtoa_r+0xe9c>
    6e34:	d8c00817 	ldw	r3,32(sp)
    6e38:	a0a9c83a 	sub	r20,r20,r2
    6e3c:	b0adc83a 	sub	r22,r22,r2
    6e40:	1887c83a 	sub	r3,r3,r2
    6e44:	d8c00815 	stw	r3,32(sp)
    6e48:	d9000917 	ldw	r4,36(sp)
    6e4c:	0100140e 	bge	zero,r4,6ea0 <_dtoa_r+0xa88>
    6e50:	d9800b17 	ldw	r6,44(sp)
    6e54:	3001e526 	beq	r6,zero,75ec <_dtoa_r+0x11d4>
    6e58:	05400e0e 	bge	zero,r21,6e94 <_dtoa_r+0xa7c>
    6e5c:	880b883a 	mov	r5,r17
    6e60:	8009883a 	mov	r4,r16
    6e64:	a80d883a 	mov	r6,r21
    6e68:	00099a00 	call	99a0 <__pow5mult>
    6e6c:	e00d883a 	mov	r6,fp
    6e70:	8009883a 	mov	r4,r16
    6e74:	100b883a 	mov	r5,r2
    6e78:	1023883a 	mov	r17,r2
    6e7c:	00097100 	call	9710 <__multiply>
    6e80:	102f883a 	mov	r23,r2
    6e84:	e00b883a 	mov	r5,fp
    6e88:	8009883a 	mov	r4,r16
    6e8c:	00093540 	call	9354 <_Bfree>
    6e90:	b839883a 	mov	fp,r23
    6e94:	d8800917 	ldw	r2,36(sp)
    6e98:	154dc83a 	sub	r6,r2,r21
    6e9c:	3001281e 	bne	r6,zero,7340 <_dtoa_r+0xf28>
    6ea0:	05c00044 	movi	r23,1
    6ea4:	8009883a 	mov	r4,r16
    6ea8:	b80b883a 	mov	r5,r23
    6eac:	00096d40 	call	96d4 <__i2b>
    6eb0:	d8c00a17 	ldw	r3,40(sp)
    6eb4:	102b883a 	mov	r21,r2
    6eb8:	00c0310e 	bge	zero,r3,6f80 <_dtoa_r+0xb68>
    6ebc:	8009883a 	mov	r4,r16
    6ec0:	100b883a 	mov	r5,r2
    6ec4:	180d883a 	mov	r6,r3
    6ec8:	00099a00 	call	99a0 <__pow5mult>
    6ecc:	d9000317 	ldw	r4,12(sp)
    6ed0:	102b883a 	mov	r21,r2
    6ed4:	b9011f0e 	bge	r23,r4,7354 <_dtoa_r+0xf3c>
    6ed8:	0027883a 	mov	r19,zero
    6edc:	a8800417 	ldw	r2,16(r21)
    6ee0:	10800104 	addi	r2,r2,4
    6ee4:	1085883a 	add	r2,r2,r2
    6ee8:	1085883a 	add	r2,r2,r2
    6eec:	a885883a 	add	r2,r21,r2
    6ef0:	11000017 	ldw	r4,0(r2)
    6ef4:	00095bc0 	call	95bc <__hi0bits>
    6ef8:	00c00804 	movi	r3,32
    6efc:	1885c83a 	sub	r2,r3,r2
    6f00:	00002506 	br	6f98 <_dtoa_r+0xb80>
    6f04:	01800044 	movi	r6,1
    6f08:	d9800c15 	stw	r6,48(sp)
    6f0c:	003dec06 	br	66c0 <__alt_data_end+0xfffb0f90>
    6f10:	d8c00817 	ldw	r3,32(sp)
    6f14:	d9000517 	ldw	r4,20(sp)
    6f18:	d8000a15 	stw	zero,40(sp)
    6f1c:	1907c83a 	sub	r3,r3,r4
    6f20:	010dc83a 	sub	r6,zero,r4
    6f24:	d8c00815 	stw	r3,32(sp)
    6f28:	d9800915 	stw	r6,36(sp)
    6f2c:	003ded06 	br	66e4 <__alt_data_end+0xfffb0fb4>
    6f30:	05adc83a 	sub	r22,zero,r22
    6f34:	dd800815 	stw	r22,32(sp)
    6f38:	002d883a 	mov	r22,zero
    6f3c:	003de406 	br	66d0 <__alt_data_end+0xfffb0fa0>
    6f40:	d9000517 	ldw	r4,20(sp)
    6f44:	000fd440 	call	fd44 <__floatsidf>
    6f48:	1009883a 	mov	r4,r2
    6f4c:	180b883a 	mov	r5,r3
    6f50:	b00d883a 	mov	r6,r22
    6f54:	a80f883a 	mov	r7,r21
    6f58:	000e93c0 	call	e93c <__eqdf2>
    6f5c:	103dc726 	beq	r2,zero,667c <__alt_data_end+0xfffb0f4c>
    6f60:	d8800517 	ldw	r2,20(sp)
    6f64:	10bfffc4 	addi	r2,r2,-1
    6f68:	d8800515 	stw	r2,20(sp)
    6f6c:	003dc306 	br	667c <__alt_data_end+0xfffb0f4c>
    6f70:	dd400917 	ldw	r21,36(sp)
    6f74:	dd000817 	ldw	r20,32(sp)
    6f78:	0023883a 	mov	r17,zero
    6f7c:	003fa906 	br	6e24 <__alt_data_end+0xfffb16f4>
    6f80:	d9800317 	ldw	r6,12(sp)
    6f84:	b981670e 	bge	r23,r6,7524 <_dtoa_r+0x110c>
    6f88:	0027883a 	mov	r19,zero
    6f8c:	d8c00a17 	ldw	r3,40(sp)
    6f90:	183fd21e 	bne	r3,zero,6edc <__alt_data_end+0xfffb17ac>
    6f94:	00800044 	movi	r2,1
    6f98:	1585883a 	add	r2,r2,r22
    6f9c:	108007cc 	andi	r2,r2,31
    6fa0:	10005f26 	beq	r2,zero,7120 <_dtoa_r+0xd08>
    6fa4:	00c00804 	movi	r3,32
    6fa8:	1887c83a 	sub	r3,r3,r2
    6fac:	01000104 	movi	r4,4
    6fb0:	20c2dd0e 	bge	r4,r3,7b28 <_dtoa_r+0x1710>
    6fb4:	d9000817 	ldw	r4,32(sp)
    6fb8:	00c00704 	movi	r3,28
    6fbc:	1885c83a 	sub	r2,r3,r2
    6fc0:	2089883a 	add	r4,r4,r2
    6fc4:	d9000815 	stw	r4,32(sp)
    6fc8:	a0a9883a 	add	r20,r20,r2
    6fcc:	b0ad883a 	add	r22,r22,r2
    6fd0:	d8800817 	ldw	r2,32(sp)
    6fd4:	0080050e 	bge	zero,r2,6fec <_dtoa_r+0xbd4>
    6fd8:	e00b883a 	mov	r5,fp
    6fdc:	8009883a 	mov	r4,r16
    6fe0:	100d883a 	mov	r6,r2
    6fe4:	0009ae00 	call	9ae0 <__lshift>
    6fe8:	1039883a 	mov	fp,r2
    6fec:	0580050e 	bge	zero,r22,7004 <_dtoa_r+0xbec>
    6ff0:	a80b883a 	mov	r5,r21
    6ff4:	8009883a 	mov	r4,r16
    6ff8:	b00d883a 	mov	r6,r22
    6ffc:	0009ae00 	call	9ae0 <__lshift>
    7000:	102b883a 	mov	r21,r2
    7004:	d8c00c17 	ldw	r3,48(sp)
    7008:	1801161e 	bne	r3,zero,7464 <_dtoa_r+0x104c>
    700c:	d8c00617 	ldw	r3,24(sp)
    7010:	00c12d0e 	bge	zero,r3,74c8 <_dtoa_r+0x10b0>
    7014:	d8c00b17 	ldw	r3,44(sp)
    7018:	1800571e 	bne	r3,zero,7178 <_dtoa_r+0xd60>
    701c:	dc800717 	ldw	r18,28(sp)
    7020:	dcc00617 	ldw	r19,24(sp)
    7024:	9029883a 	mov	r20,r18
    7028:	00000206 	br	7034 <_dtoa_r+0xc1c>
    702c:	000937c0 	call	937c <__multadd>
    7030:	1039883a 	mov	fp,r2
    7034:	e009883a 	mov	r4,fp
    7038:	a80b883a 	mov	r5,r21
    703c:	00061f00 	call	61f0 <quorem>
    7040:	10800c04 	addi	r2,r2,48
    7044:	90800005 	stb	r2,0(r18)
    7048:	94800044 	addi	r18,r18,1
    704c:	9507c83a 	sub	r3,r18,r20
    7050:	8009883a 	mov	r4,r16
    7054:	e00b883a 	mov	r5,fp
    7058:	01800284 	movi	r6,10
    705c:	000f883a 	mov	r7,zero
    7060:	1cfff216 	blt	r3,r19,702c <__alt_data_end+0xfffb18fc>
    7064:	1011883a 	mov	r8,r2
    7068:	d8800617 	ldw	r2,24(sp)
    706c:	00822e0e 	bge	zero,r2,7928 <_dtoa_r+0x1510>
    7070:	d9000717 	ldw	r4,28(sp)
    7074:	0025883a 	mov	r18,zero
    7078:	20af883a 	add	r23,r4,r2
    707c:	e00b883a 	mov	r5,fp
    7080:	01800044 	movi	r6,1
    7084:	8009883a 	mov	r4,r16
    7088:	da001715 	stw	r8,92(sp)
    708c:	0009ae00 	call	9ae0 <__lshift>
    7090:	1009883a 	mov	r4,r2
    7094:	a80b883a 	mov	r5,r21
    7098:	1039883a 	mov	fp,r2
    709c:	0009c280 	call	9c28 <__mcmp>
    70a0:	da001717 	ldw	r8,92(sp)
    70a4:	00816e0e 	bge	zero,r2,7660 <_dtoa_r+0x1248>
    70a8:	b93fffc3 	ldbu	r4,-1(r23)
    70ac:	b8bfffc4 	addi	r2,r23,-1
    70b0:	1007883a 	mov	r3,r2
    70b4:	01800e44 	movi	r6,57
    70b8:	d9c00717 	ldw	r7,28(sp)
    70bc:	00000506 	br	70d4 <_dtoa_r+0xcbc>
    70c0:	18ffffc4 	addi	r3,r3,-1
    70c4:	38811926 	beq	r7,r2,752c <_dtoa_r+0x1114>
    70c8:	19000003 	ldbu	r4,0(r3)
    70cc:	102f883a 	mov	r23,r2
    70d0:	10bfffc4 	addi	r2,r2,-1
    70d4:	21403fcc 	andi	r5,r4,255
    70d8:	2940201c 	xori	r5,r5,128
    70dc:	297fe004 	addi	r5,r5,-128
    70e0:	29bff726 	beq	r5,r6,70c0 <__alt_data_end+0xfffb1990>
    70e4:	21000044 	addi	r4,r4,1
    70e8:	11000005 	stb	r4,0(r2)
    70ec:	8009883a 	mov	r4,r16
    70f0:	a80b883a 	mov	r5,r21
    70f4:	00093540 	call	9354 <_Bfree>
    70f8:	883e7526 	beq	r17,zero,6ad0 <__alt_data_end+0xfffb13a0>
    70fc:	90000426 	beq	r18,zero,7110 <_dtoa_r+0xcf8>
    7100:	94400326 	beq	r18,r17,7110 <_dtoa_r+0xcf8>
    7104:	8009883a 	mov	r4,r16
    7108:	900b883a 	mov	r5,r18
    710c:	00093540 	call	9354 <_Bfree>
    7110:	8009883a 	mov	r4,r16
    7114:	880b883a 	mov	r5,r17
    7118:	00093540 	call	9354 <_Bfree>
    711c:	003e6c06 	br	6ad0 <__alt_data_end+0xfffb13a0>
    7120:	00800704 	movi	r2,28
    7124:	d9800817 	ldw	r6,32(sp)
    7128:	a0a9883a 	add	r20,r20,r2
    712c:	b0ad883a 	add	r22,r22,r2
    7130:	308d883a 	add	r6,r6,r2
    7134:	d9800815 	stw	r6,32(sp)
    7138:	003fa506 	br	6fd0 <__alt_data_end+0xfffb18a0>
    713c:	013efb84 	movi	r4,-1042
    7140:	246bc83a 	sub	r21,r4,r17
    7144:	9548983a 	sll	r4,r18,r21
    7148:	003d1806 	br	65ac <__alt_data_end+0xfffb0e7c>
    714c:	d8000c15 	stw	zero,48(sp)
    7150:	003d5b06 	br	66c0 <__alt_data_end+0xfffb0f90>
    7154:	880b883a 	mov	r5,r17
    7158:	8009883a 	mov	r4,r16
    715c:	01800284 	movi	r6,10
    7160:	000f883a 	mov	r7,zero
    7164:	000937c0 	call	937c <__multadd>
    7168:	1023883a 	mov	r17,r2
    716c:	d8800d17 	ldw	r2,52(sp)
    7170:	0082550e 	bge	zero,r2,7ac8 <_dtoa_r+0x16b0>
    7174:	d8800615 	stw	r2,24(sp)
    7178:	0500050e 	bge	zero,r20,7190 <_dtoa_r+0xd78>
    717c:	880b883a 	mov	r5,r17
    7180:	8009883a 	mov	r4,r16
    7184:	a00d883a 	mov	r6,r20
    7188:	0009ae00 	call	9ae0 <__lshift>
    718c:	1023883a 	mov	r17,r2
    7190:	98016a1e 	bne	r19,zero,773c <_dtoa_r+0x1324>
    7194:	8829883a 	mov	r20,r17
    7198:	d9000617 	ldw	r4,24(sp)
    719c:	dcc00717 	ldw	r19,28(sp)
    71a0:	9480004c 	andi	r18,r18,1
    71a4:	20bfffc4 	addi	r2,r4,-1
    71a8:	9885883a 	add	r2,r19,r2
    71ac:	d8800415 	stw	r2,16(sp)
    71b0:	dc800615 	stw	r18,24(sp)
    71b4:	e009883a 	mov	r4,fp
    71b8:	a80b883a 	mov	r5,r21
    71bc:	00061f00 	call	61f0 <quorem>
    71c0:	e009883a 	mov	r4,fp
    71c4:	880b883a 	mov	r5,r17
    71c8:	102f883a 	mov	r23,r2
    71cc:	0009c280 	call	9c28 <__mcmp>
    71d0:	8009883a 	mov	r4,r16
    71d4:	a80b883a 	mov	r5,r21
    71d8:	a00d883a 	mov	r6,r20
    71dc:	102d883a 	mov	r22,r2
    71e0:	0009c880 	call	9c88 <__mdiff>
    71e4:	1007883a 	mov	r3,r2
    71e8:	10800317 	ldw	r2,12(r2)
    71ec:	bc800c04 	addi	r18,r23,48
    71f0:	1000971e 	bne	r2,zero,7450 <_dtoa_r+0x1038>
    71f4:	180b883a 	mov	r5,r3
    71f8:	e009883a 	mov	r4,fp
    71fc:	d8c01515 	stw	r3,84(sp)
    7200:	0009c280 	call	9c28 <__mcmp>
    7204:	d8c01517 	ldw	r3,84(sp)
    7208:	8009883a 	mov	r4,r16
    720c:	d8801515 	stw	r2,84(sp)
    7210:	180b883a 	mov	r5,r3
    7214:	00093540 	call	9354 <_Bfree>
    7218:	d8801517 	ldw	r2,84(sp)
    721c:	1000041e 	bne	r2,zero,7230 <_dtoa_r+0xe18>
    7220:	d9800317 	ldw	r6,12(sp)
    7224:	3000021e 	bne	r6,zero,7230 <_dtoa_r+0xe18>
    7228:	d8c00617 	ldw	r3,24(sp)
    722c:	18007626 	beq	r3,zero,7408 <_dtoa_r+0xff0>
    7230:	b0005b16 	blt	r22,zero,73a0 <_dtoa_r+0xf88>
    7234:	b000041e 	bne	r22,zero,7248 <_dtoa_r+0xe30>
    7238:	d9000317 	ldw	r4,12(sp)
    723c:	2000021e 	bne	r4,zero,7248 <_dtoa_r+0xe30>
    7240:	d8c00617 	ldw	r3,24(sp)
    7244:	18005626 	beq	r3,zero,73a0 <_dtoa_r+0xf88>
    7248:	00814d16 	blt	zero,r2,7780 <_dtoa_r+0x1368>
    724c:	d8c00417 	ldw	r3,16(sp)
    7250:	9d800044 	addi	r22,r19,1
    7254:	9c800005 	stb	r18,0(r19)
    7258:	b02f883a 	mov	r23,r22
    725c:	98c14c26 	beq	r19,r3,7790 <_dtoa_r+0x1378>
    7260:	e00b883a 	mov	r5,fp
    7264:	8009883a 	mov	r4,r16
    7268:	01800284 	movi	r6,10
    726c:	000f883a 	mov	r7,zero
    7270:	000937c0 	call	937c <__multadd>
    7274:	1039883a 	mov	fp,r2
    7278:	8d006d26 	beq	r17,r20,7430 <_dtoa_r+0x1018>
    727c:	880b883a 	mov	r5,r17
    7280:	01800284 	movi	r6,10
    7284:	000f883a 	mov	r7,zero
    7288:	8009883a 	mov	r4,r16
    728c:	000937c0 	call	937c <__multadd>
    7290:	a00b883a 	mov	r5,r20
    7294:	8009883a 	mov	r4,r16
    7298:	01800284 	movi	r6,10
    729c:	000f883a 	mov	r7,zero
    72a0:	1023883a 	mov	r17,r2
    72a4:	000937c0 	call	937c <__multadd>
    72a8:	1029883a 	mov	r20,r2
    72ac:	b027883a 	mov	r19,r22
    72b0:	003fc006 	br	71b4 <__alt_data_end+0xfffb1a84>
    72b4:	a005883a 	mov	r2,r20
    72b8:	003ede06 	br	6e34 <__alt_data_end+0xfffb1704>
    72bc:	01000044 	movi	r4,1
    72c0:	d9000b15 	stw	r4,44(sp)
    72c4:	d9802217 	ldw	r6,136(sp)
    72c8:	0180dc0e 	bge	zero,r6,763c <_dtoa_r+0x1224>
    72cc:	3023883a 	mov	r17,r6
    72d0:	d9800d15 	stw	r6,52(sp)
    72d4:	d9800615 	stw	r6,24(sp)
    72d8:	003d1e06 	br	6754 <__alt_data_end+0xfffb1024>
    72dc:	d8800617 	ldw	r2,24(sp)
    72e0:	00be3716 	blt	zero,r2,6bc0 <__alt_data_end+0xfffb1490>
    72e4:	1000be1e 	bne	r2,zero,75e0 <_dtoa_r+0x11c8>
    72e8:	8809883a 	mov	r4,r17
    72ec:	a00b883a 	mov	r5,r20
    72f0:	000d883a 	mov	r6,zero
    72f4:	01d00534 	movhi	r7,16404
    72f8:	000eb800 	call	eb80 <__muldf3>
    72fc:	1009883a 	mov	r4,r2
    7300:	180b883a 	mov	r5,r3
    7304:	900d883a 	mov	r6,r18
    7308:	980f883a 	mov	r7,r19
    730c:	000e9c00 	call	e9c0 <__gedf2>
    7310:	002b883a 	mov	r21,zero
    7314:	0023883a 	mov	r17,zero
    7318:	10007a16 	blt	r2,zero,7504 <_dtoa_r+0x10ec>
    731c:	d9002217 	ldw	r4,136(sp)
    7320:	ddc00717 	ldw	r23,28(sp)
    7324:	0108303a 	nor	r4,zero,r4
    7328:	d9000515 	stw	r4,20(sp)
    732c:	8009883a 	mov	r4,r16
    7330:	a80b883a 	mov	r5,r21
    7334:	00093540 	call	9354 <_Bfree>
    7338:	883f751e 	bne	r17,zero,7110 <__alt_data_end+0xfffb19e0>
    733c:	003de406 	br	6ad0 <__alt_data_end+0xfffb13a0>
    7340:	e00b883a 	mov	r5,fp
    7344:	8009883a 	mov	r4,r16
    7348:	00099a00 	call	99a0 <__pow5mult>
    734c:	1039883a 	mov	fp,r2
    7350:	003ed306 	br	6ea0 <__alt_data_end+0xfffb1770>
    7354:	903ee01e 	bne	r18,zero,6ed8 <__alt_data_end+0xfffb17a8>
    7358:	00800434 	movhi	r2,16
    735c:	10bfffc4 	addi	r2,r2,-1
    7360:	9884703a 	and	r2,r19,r2
    7364:	103f081e 	bne	r2,zero,6f88 <__alt_data_end+0xfffb1858>
    7368:	9cdffc2c 	andhi	r19,r19,32752
    736c:	983f0626 	beq	r19,zero,6f88 <__alt_data_end+0xfffb1858>
    7370:	d8800817 	ldw	r2,32(sp)
    7374:	b5800044 	addi	r22,r22,1
    7378:	04c00044 	movi	r19,1
    737c:	10800044 	addi	r2,r2,1
    7380:	d8800815 	stw	r2,32(sp)
    7384:	003f0106 	br	6f8c <__alt_data_end+0xfffb185c>
    7388:	d9800f17 	ldw	r6,60(sp)
    738c:	30016826 	beq	r6,zero,7930 <_dtoa_r+0x1518>
    7390:	10810cc4 	addi	r2,r2,1075
    7394:	dd400917 	ldw	r21,36(sp)
    7398:	dd000817 	ldw	r20,32(sp)
    739c:	003e9906 	br	6e04 <__alt_data_end+0xfffb16d4>
    73a0:	9011883a 	mov	r8,r18
    73a4:	4007883a 	mov	r3,r8
    73a8:	e02d883a 	mov	r22,fp
    73ac:	0080100e 	bge	zero,r2,73f0 <_dtoa_r+0xfd8>
    73b0:	01800044 	movi	r6,1
    73b4:	8009883a 	mov	r4,r16
    73b8:	e00b883a 	mov	r5,fp
    73bc:	da001515 	stw	r8,84(sp)
    73c0:	da001715 	stw	r8,92(sp)
    73c4:	0009ae00 	call	9ae0 <__lshift>
    73c8:	1009883a 	mov	r4,r2
    73cc:	a80b883a 	mov	r5,r21
    73d0:	102d883a 	mov	r22,r2
    73d4:	0009c280 	call	9c28 <__mcmp>
    73d8:	d8c01517 	ldw	r3,84(sp)
    73dc:	da001717 	ldw	r8,92(sp)
    73e0:	0081a50e 	bge	zero,r2,7a78 <_dtoa_r+0x1660>
    73e4:	00800e44 	movi	r2,57
    73e8:	40817b26 	beq	r8,r2,79d8 <_dtoa_r+0x15c0>
    73ec:	40c00044 	addi	r3,r8,1
    73f0:	8825883a 	mov	r18,r17
    73f4:	9dc00044 	addi	r23,r19,1
    73f8:	98c00005 	stb	r3,0(r19)
    73fc:	a023883a 	mov	r17,r20
    7400:	b039883a 	mov	fp,r22
    7404:	003f3906 	br	70ec <__alt_data_end+0xfffb19bc>
    7408:	00800e44 	movi	r2,57
    740c:	9011883a 	mov	r8,r18
    7410:	90817226 	beq	r18,r2,79dc <_dtoa_r+0x15c4>
    7414:	0580010e 	bge	zero,r22,741c <_dtoa_r+0x1004>
    7418:	ba000c44 	addi	r8,r23,49
    741c:	8825883a 	mov	r18,r17
    7420:	9dc00044 	addi	r23,r19,1
    7424:	9a000005 	stb	r8,0(r19)
    7428:	a023883a 	mov	r17,r20
    742c:	003f2f06 	br	70ec <__alt_data_end+0xfffb19bc>
    7430:	880b883a 	mov	r5,r17
    7434:	8009883a 	mov	r4,r16
    7438:	01800284 	movi	r6,10
    743c:	000f883a 	mov	r7,zero
    7440:	000937c0 	call	937c <__multadd>
    7444:	1023883a 	mov	r17,r2
    7448:	1029883a 	mov	r20,r2
    744c:	003f9706 	br	72ac <__alt_data_end+0xfffb1b7c>
    7450:	8009883a 	mov	r4,r16
    7454:	180b883a 	mov	r5,r3
    7458:	00093540 	call	9354 <_Bfree>
    745c:	00800044 	movi	r2,1
    7460:	003f7306 	br	7230 <__alt_data_end+0xfffb1b00>
    7464:	e009883a 	mov	r4,fp
    7468:	a80b883a 	mov	r5,r21
    746c:	0009c280 	call	9c28 <__mcmp>
    7470:	103ee60e 	bge	r2,zero,700c <__alt_data_end+0xfffb18dc>
    7474:	8009883a 	mov	r4,r16
    7478:	e00b883a 	mov	r5,fp
    747c:	01800284 	movi	r6,10
    7480:	000f883a 	mov	r7,zero
    7484:	000937c0 	call	937c <__multadd>
    7488:	d9000517 	ldw	r4,20(sp)
    748c:	d9800b17 	ldw	r6,44(sp)
    7490:	1039883a 	mov	fp,r2
    7494:	213fffc4 	addi	r4,r4,-1
    7498:	d9000515 	stw	r4,20(sp)
    749c:	303f2d1e 	bne	r6,zero,7154 <__alt_data_end+0xfffb1a24>
    74a0:	d9000d17 	ldw	r4,52(sp)
    74a4:	0101780e 	bge	zero,r4,7a88 <_dtoa_r+0x1670>
    74a8:	d9000615 	stw	r4,24(sp)
    74ac:	003edb06 	br	701c <__alt_data_end+0xfffb18ec>
    74b0:	00800084 	movi	r2,2
    74b4:	30818e1e 	bne	r6,r2,7af0 <_dtoa_r+0x16d8>
    74b8:	d8000b15 	stw	zero,44(sp)
    74bc:	003f8106 	br	72c4 <__alt_data_end+0xfffb1b94>
    74c0:	d8800717 	ldw	r2,28(sp)
    74c4:	003c0306 	br	64d4 <__alt_data_end+0xfffb0da4>
    74c8:	d9000317 	ldw	r4,12(sp)
    74cc:	00800084 	movi	r2,2
    74d0:	113ed00e 	bge	r2,r4,7014 <__alt_data_end+0xfffb18e4>
    74d4:	d8c00617 	ldw	r3,24(sp)
    74d8:	183f901e 	bne	r3,zero,731c <__alt_data_end+0xfffb1bec>
    74dc:	a80b883a 	mov	r5,r21
    74e0:	8009883a 	mov	r4,r16
    74e4:	01800144 	movi	r6,5
    74e8:	000f883a 	mov	r7,zero
    74ec:	000937c0 	call	937c <__multadd>
    74f0:	e009883a 	mov	r4,fp
    74f4:	100b883a 	mov	r5,r2
    74f8:	102b883a 	mov	r21,r2
    74fc:	0009c280 	call	9c28 <__mcmp>
    7500:	00bf860e 	bge	zero,r2,731c <__alt_data_end+0xfffb1bec>
    7504:	d9800717 	ldw	r6,28(sp)
    7508:	00800c44 	movi	r2,49
    750c:	30800005 	stb	r2,0(r6)
    7510:	d8800517 	ldw	r2,20(sp)
    7514:	35c00044 	addi	r23,r6,1
    7518:	10800044 	addi	r2,r2,1
    751c:	d8800515 	stw	r2,20(sp)
    7520:	003f8206 	br	732c <__alt_data_end+0xfffb1bfc>
    7524:	903e981e 	bne	r18,zero,6f88 <__alt_data_end+0xfffb1858>
    7528:	003f8b06 	br	7358 <__alt_data_end+0xfffb1c28>
    752c:	d9800517 	ldw	r6,20(sp)
    7530:	d8c00717 	ldw	r3,28(sp)
    7534:	00800c44 	movi	r2,49
    7538:	31800044 	addi	r6,r6,1
    753c:	d9800515 	stw	r6,20(sp)
    7540:	18800005 	stb	r2,0(r3)
    7544:	003ee906 	br	70ec <__alt_data_end+0xfffb19bc>
    7548:	dc000317 	ldw	r16,12(sp)
    754c:	003d6006 	br	6ad0 <__alt_data_end+0xfffb13a0>
    7550:	8809883a 	mov	r4,r17
    7554:	000fd440 	call	fd44 <__floatsidf>
    7558:	a009883a 	mov	r4,r20
    755c:	a80b883a 	mov	r5,r21
    7560:	100d883a 	mov	r6,r2
    7564:	180f883a 	mov	r7,r3
    7568:	000eb800 	call	eb80 <__muldf3>
    756c:	1009883a 	mov	r4,r2
    7570:	180b883a 	mov	r5,r3
    7574:	000d883a 	mov	r6,zero
    7578:	01d00734 	movhi	r7,16412
    757c:	000d7200 	call	d720 <__adddf3>
    7580:	1023883a 	mov	r17,r2
    7584:	00bf3034 	movhi	r2,64704
    7588:	1885883a 	add	r2,r3,r2
    758c:	d8800e15 	stw	r2,56(sp)
    7590:	a009883a 	mov	r4,r20
    7594:	a80b883a 	mov	r5,r21
    7598:	000d883a 	mov	r6,zero
    759c:	01d00534 	movhi	r7,16404
    75a0:	000f3ec0 	call	f3ec <__subdf3>
    75a4:	d9c00e17 	ldw	r7,56(sp)
    75a8:	1009883a 	mov	r4,r2
    75ac:	180b883a 	mov	r5,r3
    75b0:	880d883a 	mov	r6,r17
    75b4:	102b883a 	mov	r21,r2
    75b8:	1829883a 	mov	r20,r3
    75bc:	000e9c00 	call	e9c0 <__gedf2>
    75c0:	00807716 	blt	zero,r2,77a0 <_dtoa_r+0x1388>
    75c4:	d8800e17 	ldw	r2,56(sp)
    75c8:	a809883a 	mov	r4,r21
    75cc:	a00b883a 	mov	r5,r20
    75d0:	11e0003c 	xorhi	r7,r2,32768
    75d4:	880d883a 	mov	r6,r17
    75d8:	000eaa00 	call	eaa0 <__ledf2>
    75dc:	103d6b0e 	bge	r2,zero,6b8c <__alt_data_end+0xfffb145c>
    75e0:	002b883a 	mov	r21,zero
    75e4:	0023883a 	mov	r17,zero
    75e8:	003f4c06 	br	731c <__alt_data_end+0xfffb1bec>
    75ec:	d9800917 	ldw	r6,36(sp)
    75f0:	e00b883a 	mov	r5,fp
    75f4:	8009883a 	mov	r4,r16
    75f8:	00099a00 	call	99a0 <__pow5mult>
    75fc:	1039883a 	mov	fp,r2
    7600:	003e2706 	br	6ea0 <__alt_data_end+0xfffb1770>
    7604:	d8000b15 	stw	zero,44(sp)
    7608:	003c4906 	br	6730 <__alt_data_end+0xfffb1000>
    760c:	d9000917 	ldw	r4,36(sp)
    7610:	d9800a17 	ldw	r6,40(sp)
    7614:	dd400915 	stw	r21,36(sp)
    7618:	a905c83a 	sub	r2,r21,r4
    761c:	308d883a 	add	r6,r6,r2
    7620:	d9800a15 	stw	r6,40(sp)
    7624:	002b883a 	mov	r21,zero
    7628:	003df206 	br	6df4 <__alt_data_end+0xfffb16c4>
    762c:	dc800e15 	stw	r18,56(sp)
    7630:	982b883a 	mov	r21,r19
    7634:	04400084 	movi	r17,2
    7638:	003c7406 	br	680c <__alt_data_end+0xfffb10dc>
    763c:	04400044 	movi	r17,1
    7640:	dc400d15 	stw	r17,52(sp)
    7644:	dc400615 	stw	r17,24(sp)
    7648:	dc402215 	stw	r17,136(sp)
    764c:	80001115 	stw	zero,68(r16)
    7650:	000b883a 	mov	r5,zero
    7654:	003c4a06 	br	6780 <__alt_data_end+0xfffb1050>
    7658:	3023883a 	mov	r17,r6
    765c:	003ffb06 	br	764c <__alt_data_end+0xfffb1f1c>
    7660:	1000021e 	bne	r2,zero,766c <_dtoa_r+0x1254>
    7664:	4200004c 	andi	r8,r8,1
    7668:	403e8f1e 	bne	r8,zero,70a8 <__alt_data_end+0xfffb1978>
    766c:	01000c04 	movi	r4,48
    7670:	00000106 	br	7678 <_dtoa_r+0x1260>
    7674:	102f883a 	mov	r23,r2
    7678:	b8bfffc4 	addi	r2,r23,-1
    767c:	10c00007 	ldb	r3,0(r2)
    7680:	193ffc26 	beq	r3,r4,7674 <__alt_data_end+0xfffb1f44>
    7684:	003e9906 	br	70ec <__alt_data_end+0xfffb19bc>
    7688:	d9000517 	ldw	r4,20(sp)
    768c:	012fc83a 	sub	r23,zero,r4
    7690:	b800ad26 	beq	r23,zero,7948 <_dtoa_r+0x1530>
    7694:	b88003cc 	andi	r2,r23,15
    7698:	100490fa 	slli	r2,r2,3
    769c:	00c00074 	movhi	r3,1
    76a0:	18cc0e04 	addi	r3,r3,12344
    76a4:	1885883a 	add	r2,r3,r2
    76a8:	11800017 	ldw	r6,0(r2)
    76ac:	11c00117 	ldw	r7,4(r2)
    76b0:	b82fd13a 	srai	r23,r23,4
    76b4:	9009883a 	mov	r4,r18
    76b8:	980b883a 	mov	r5,r19
    76bc:	000eb800 	call	eb80 <__muldf3>
    76c0:	1029883a 	mov	r20,r2
    76c4:	182b883a 	mov	r21,r3
    76c8:	b800f426 	beq	r23,zero,7a9c <_dtoa_r+0x1684>
    76cc:	02000074 	movhi	r8,1
    76d0:	420c0404 	addi	r8,r8,12304
    76d4:	8029883a 	mov	r20,r16
    76d8:	04400084 	movi	r17,2
    76dc:	4021883a 	mov	r16,r8
    76e0:	b980004c 	andi	r6,r23,1
    76e4:	1009883a 	mov	r4,r2
    76e8:	b82fd07a 	srai	r23,r23,1
    76ec:	180b883a 	mov	r5,r3
    76f0:	30000426 	beq	r6,zero,7704 <_dtoa_r+0x12ec>
    76f4:	81800017 	ldw	r6,0(r16)
    76f8:	81c00117 	ldw	r7,4(r16)
    76fc:	8c400044 	addi	r17,r17,1
    7700:	000eb800 	call	eb80 <__muldf3>
    7704:	84000204 	addi	r16,r16,8
    7708:	b83ff51e 	bne	r23,zero,76e0 <__alt_data_end+0xfffb1fb0>
    770c:	a021883a 	mov	r16,r20
    7710:	182b883a 	mov	r21,r3
    7714:	1029883a 	mov	r20,r2
    7718:	003c5506 	br	6870 <__alt_data_end+0xfffb1140>
    771c:	d9800517 	ldw	r6,20(sp)
    7720:	d9000717 	ldw	r4,28(sp)
    7724:	00c00c04 	movi	r3,48
    7728:	31800044 	addi	r6,r6,1
    772c:	d9800515 	stw	r6,20(sp)
    7730:	20c00005 	stb	r3,0(r4)
    7734:	02000c44 	movi	r8,49
    7738:	003da206 	br	6dc4 <__alt_data_end+0xfffb1694>
    773c:	89400117 	ldw	r5,4(r17)
    7740:	8009883a 	mov	r4,r16
    7744:	00092ac0 	call	92ac <_Balloc>
    7748:	89800417 	ldw	r6,16(r17)
    774c:	11000304 	addi	r4,r2,12
    7750:	89400304 	addi	r5,r17,12
    7754:	31800084 	addi	r6,r6,2
    7758:	318d883a 	add	r6,r6,r6
    775c:	318d883a 	add	r6,r6,r6
    7760:	1027883a 	mov	r19,r2
    7764:	0008ef40 	call	8ef4 <memcpy>
    7768:	8009883a 	mov	r4,r16
    776c:	980b883a 	mov	r5,r19
    7770:	01800044 	movi	r6,1
    7774:	0009ae00 	call	9ae0 <__lshift>
    7778:	1029883a 	mov	r20,r2
    777c:	003e8606 	br	7198 <__alt_data_end+0xfffb1a68>
    7780:	00800e44 	movi	r2,57
    7784:	90809526 	beq	r18,r2,79dc <_dtoa_r+0x15c4>
    7788:	92000044 	addi	r8,r18,1
    778c:	003f2306 	br	741c <__alt_data_end+0xfffb1cec>
    7790:	9011883a 	mov	r8,r18
    7794:	8825883a 	mov	r18,r17
    7798:	a023883a 	mov	r17,r20
    779c:	003e3706 	br	707c <__alt_data_end+0xfffb194c>
    77a0:	002b883a 	mov	r21,zero
    77a4:	0023883a 	mov	r17,zero
    77a8:	003f5606 	br	7504 <__alt_data_end+0xfffb1dd4>
    77ac:	51bfffc4 	addi	r6,r10,-1
    77b0:	300490fa 	slli	r2,r6,3
    77b4:	00c00074 	movhi	r3,1
    77b8:	18cc0e04 	addi	r3,r3,12344
    77bc:	1885883a 	add	r2,r3,r2
    77c0:	d9c00e17 	ldw	r7,56(sp)
    77c4:	11000017 	ldw	r4,0(r2)
    77c8:	11400117 	ldw	r5,4(r2)
    77cc:	d8800717 	ldw	r2,28(sp)
    77d0:	d9801015 	stw	r6,64(sp)
    77d4:	880d883a 	mov	r6,r17
    77d8:	da801615 	stw	r10,88(sp)
    77dc:	15c00044 	addi	r23,r2,1
    77e0:	000eb800 	call	eb80 <__muldf3>
    77e4:	a80b883a 	mov	r5,r21
    77e8:	a009883a 	mov	r4,r20
    77ec:	d8c01115 	stw	r3,68(sp)
    77f0:	d8800e15 	stw	r2,56(sp)
    77f4:	000fcbc0 	call	fcbc <__fixdfsi>
    77f8:	1009883a 	mov	r4,r2
    77fc:	1023883a 	mov	r17,r2
    7800:	000fd440 	call	fd44 <__floatsidf>
    7804:	a009883a 	mov	r4,r20
    7808:	a80b883a 	mov	r5,r21
    780c:	100d883a 	mov	r6,r2
    7810:	180f883a 	mov	r7,r3
    7814:	000f3ec0 	call	f3ec <__subdf3>
    7818:	1813883a 	mov	r9,r3
    781c:	d8c00717 	ldw	r3,28(sp)
    7820:	8c400c04 	addi	r17,r17,48
    7824:	1011883a 	mov	r8,r2
    7828:	1c400005 	stb	r17,0(r3)
    782c:	da801617 	ldw	r10,88(sp)
    7830:	00800044 	movi	r2,1
    7834:	50802326 	beq	r10,r2,78c4 <_dtoa_r+0x14ac>
    7838:	d8800717 	ldw	r2,28(sp)
    783c:	b82b883a 	mov	r21,r23
    7840:	dc001315 	stw	r16,76(sp)
    7844:	12a9883a 	add	r20,r2,r10
    7848:	4807883a 	mov	r3,r9
    784c:	4005883a 	mov	r2,r8
    7850:	dc801415 	stw	r18,80(sp)
    7854:	000d883a 	mov	r6,zero
    7858:	01d00934 	movhi	r7,16420
    785c:	1009883a 	mov	r4,r2
    7860:	180b883a 	mov	r5,r3
    7864:	000eb800 	call	eb80 <__muldf3>
    7868:	180b883a 	mov	r5,r3
    786c:	1009883a 	mov	r4,r2
    7870:	1821883a 	mov	r16,r3
    7874:	1025883a 	mov	r18,r2
    7878:	000fcbc0 	call	fcbc <__fixdfsi>
    787c:	1009883a 	mov	r4,r2
    7880:	1023883a 	mov	r17,r2
    7884:	000fd440 	call	fd44 <__floatsidf>
    7888:	9009883a 	mov	r4,r18
    788c:	800b883a 	mov	r5,r16
    7890:	100d883a 	mov	r6,r2
    7894:	180f883a 	mov	r7,r3
    7898:	8c400c04 	addi	r17,r17,48
    789c:	000f3ec0 	call	f3ec <__subdf3>
    78a0:	ad400044 	addi	r21,r21,1
    78a4:	ac7fffc5 	stb	r17,-1(r21)
    78a8:	ad3fea1e 	bne	r21,r20,7854 <__alt_data_end+0xfffb2124>
    78ac:	1813883a 	mov	r9,r3
    78b0:	d8c01017 	ldw	r3,64(sp)
    78b4:	dc001317 	ldw	r16,76(sp)
    78b8:	dc801417 	ldw	r18,80(sp)
    78bc:	1011883a 	mov	r8,r2
    78c0:	b8ef883a 	add	r23,r23,r3
    78c4:	d9000e17 	ldw	r4,56(sp)
    78c8:	d9401117 	ldw	r5,68(sp)
    78cc:	000d883a 	mov	r6,zero
    78d0:	01cff834 	movhi	r7,16352
    78d4:	da001715 	stw	r8,92(sp)
    78d8:	da401515 	stw	r9,84(sp)
    78dc:	000d7200 	call	d720 <__adddf3>
    78e0:	da001717 	ldw	r8,92(sp)
    78e4:	da401517 	ldw	r9,84(sp)
    78e8:	1009883a 	mov	r4,r2
    78ec:	400d883a 	mov	r6,r8
    78f0:	480f883a 	mov	r7,r9
    78f4:	180b883a 	mov	r5,r3
    78f8:	000eaa00 	call	eaa0 <__ledf2>
    78fc:	da001717 	ldw	r8,92(sp)
    7900:	da401517 	ldw	r9,84(sp)
    7904:	10003b0e 	bge	r2,zero,79f4 <_dtoa_r+0x15dc>
    7908:	d9001217 	ldw	r4,72(sp)
    790c:	bd7fffc3 	ldbu	r21,-1(r23)
    7910:	d9000515 	stw	r4,20(sp)
    7914:	003d1c06 	br	6d88 <__alt_data_end+0xfffb1658>
    7918:	d8c00817 	ldw	r3,32(sp)
    791c:	18a9c83a 	sub	r20,r3,r2
    7920:	0005883a 	mov	r2,zero
    7924:	003d3706 	br	6e04 <__alt_data_end+0xfffb16d4>
    7928:	00800044 	movi	r2,1
    792c:	003dd006 	br	7070 <__alt_data_end+0xfffb1940>
    7930:	d8c00217 	ldw	r3,8(sp)
    7934:	00800d84 	movi	r2,54
    7938:	dd400917 	ldw	r21,36(sp)
    793c:	10c5c83a 	sub	r2,r2,r3
    7940:	dd000817 	ldw	r20,32(sp)
    7944:	003d2f06 	br	6e04 <__alt_data_end+0xfffb16d4>
    7948:	9029883a 	mov	r20,r18
    794c:	982b883a 	mov	r21,r19
    7950:	04400084 	movi	r17,2
    7954:	003bc606 	br	6870 <__alt_data_end+0xfffb1140>
    7958:	d8800617 	ldw	r2,24(sp)
    795c:	103efc26 	beq	r2,zero,7550 <__alt_data_end+0xfffb1e20>
    7960:	d8c00d17 	ldw	r3,52(sp)
    7964:	00fc890e 	bge	zero,r3,6b8c <__alt_data_end+0xfffb145c>
    7968:	a80b883a 	mov	r5,r21
    796c:	a009883a 	mov	r4,r20
    7970:	000d883a 	mov	r6,zero
    7974:	01d00934 	movhi	r7,16420
    7978:	000eb800 	call	eb80 <__muldf3>
    797c:	89000044 	addi	r4,r17,1
    7980:	1029883a 	mov	r20,r2
    7984:	182b883a 	mov	r21,r3
    7988:	000fd440 	call	fd44 <__floatsidf>
    798c:	a009883a 	mov	r4,r20
    7990:	a80b883a 	mov	r5,r21
    7994:	100d883a 	mov	r6,r2
    7998:	180f883a 	mov	r7,r3
    799c:	000eb800 	call	eb80 <__muldf3>
    79a0:	1009883a 	mov	r4,r2
    79a4:	180b883a 	mov	r5,r3
    79a8:	000d883a 	mov	r6,zero
    79ac:	01d00734 	movhi	r7,16412
    79b0:	000d7200 	call	d720 <__adddf3>
    79b4:	d9000517 	ldw	r4,20(sp)
    79b8:	1023883a 	mov	r17,r2
    79bc:	00bf3034 	movhi	r2,64704
    79c0:	213fffc4 	addi	r4,r4,-1
    79c4:	1885883a 	add	r2,r3,r2
    79c8:	d9001215 	stw	r4,72(sp)
    79cc:	d8800e15 	stw	r2,56(sp)
    79d0:	da800d17 	ldw	r10,52(sp)
    79d4:	003bc306 	br	68e4 <__alt_data_end+0xfffb11b4>
    79d8:	b039883a 	mov	fp,r22
    79dc:	01000e44 	movi	r4,57
    79e0:	8825883a 	mov	r18,r17
    79e4:	9dc00044 	addi	r23,r19,1
    79e8:	99000005 	stb	r4,0(r19)
    79ec:	a023883a 	mov	r17,r20
    79f0:	003dae06 	br	70ac <__alt_data_end+0xfffb197c>
    79f4:	d9800e17 	ldw	r6,56(sp)
    79f8:	d9c01117 	ldw	r7,68(sp)
    79fc:	0009883a 	mov	r4,zero
    7a00:	014ff834 	movhi	r5,16352
    7a04:	da001715 	stw	r8,92(sp)
    7a08:	da401515 	stw	r9,84(sp)
    7a0c:	000f3ec0 	call	f3ec <__subdf3>
    7a10:	da001717 	ldw	r8,92(sp)
    7a14:	da401517 	ldw	r9,84(sp)
    7a18:	1009883a 	mov	r4,r2
    7a1c:	180b883a 	mov	r5,r3
    7a20:	400d883a 	mov	r6,r8
    7a24:	480f883a 	mov	r7,r9
    7a28:	000e9c00 	call	e9c0 <__gedf2>
    7a2c:	00bc570e 	bge	zero,r2,6b8c <__alt_data_end+0xfffb145c>
    7a30:	01000c04 	movi	r4,48
    7a34:	00000106 	br	7a3c <_dtoa_r+0x1624>
    7a38:	102f883a 	mov	r23,r2
    7a3c:	b8bfffc4 	addi	r2,r23,-1
    7a40:	10c00007 	ldb	r3,0(r2)
    7a44:	193ffc26 	beq	r3,r4,7a38 <__alt_data_end+0xfffb2308>
    7a48:	d9801217 	ldw	r6,72(sp)
    7a4c:	d9800515 	stw	r6,20(sp)
    7a50:	003c1f06 	br	6ad0 <__alt_data_end+0xfffb13a0>
    7a54:	d8801217 	ldw	r2,72(sp)
    7a58:	dc001117 	ldw	r16,68(sp)
    7a5c:	d8800515 	stw	r2,20(sp)
    7a60:	003cc906 	br	6d88 <__alt_data_end+0xfffb1658>
    7a64:	dd801317 	ldw	r22,76(sp)
    7a68:	dc001117 	ldw	r16,68(sp)
    7a6c:	dcc01417 	ldw	r19,80(sp)
    7a70:	dc801017 	ldw	r18,64(sp)
    7a74:	003c4506 	br	6b8c <__alt_data_end+0xfffb145c>
    7a78:	103e5d1e 	bne	r2,zero,73f0 <__alt_data_end+0xfffb1cc0>
    7a7c:	4080004c 	andi	r2,r8,1
    7a80:	103e5b26 	beq	r2,zero,73f0 <__alt_data_end+0xfffb1cc0>
    7a84:	003e5706 	br	73e4 <__alt_data_end+0xfffb1cb4>
    7a88:	d8c00317 	ldw	r3,12(sp)
    7a8c:	00800084 	movi	r2,2
    7a90:	10c00a16 	blt	r2,r3,7abc <_dtoa_r+0x16a4>
    7a94:	d9000d17 	ldw	r4,52(sp)
    7a98:	003e8306 	br	74a8 <__alt_data_end+0xfffb1d78>
    7a9c:	04400084 	movi	r17,2
    7aa0:	003b7306 	br	6870 <__alt_data_end+0xfffb1140>
    7aa4:	d9801217 	ldw	r6,72(sp)
    7aa8:	d9800515 	stw	r6,20(sp)
    7aac:	003cb606 	br	6d88 <__alt_data_end+0xfffb1658>
    7ab0:	d9001217 	ldw	r4,72(sp)
    7ab4:	d9000515 	stw	r4,20(sp)
    7ab8:	003c0506 	br	6ad0 <__alt_data_end+0xfffb13a0>
    7abc:	d9800d17 	ldw	r6,52(sp)
    7ac0:	d9800615 	stw	r6,24(sp)
    7ac4:	003e8306 	br	74d4 <__alt_data_end+0xfffb1da4>
    7ac8:	d9800317 	ldw	r6,12(sp)
    7acc:	00800084 	movi	r2,2
    7ad0:	11800216 	blt	r2,r6,7adc <_dtoa_r+0x16c4>
    7ad4:	d8800d17 	ldw	r2,52(sp)
    7ad8:	003da606 	br	7174 <__alt_data_end+0xfffb1a44>
    7adc:	d8800d17 	ldw	r2,52(sp)
    7ae0:	d8800615 	stw	r2,24(sp)
    7ae4:	003e7b06 	br	74d4 <__alt_data_end+0xfffb1da4>
    7ae8:	05000044 	movi	r20,1
    7aec:	003b0506 	br	6704 <__alt_data_end+0xfffb0fd4>
    7af0:	8009883a 	mov	r4,r16
    7af4:	80001115 	stw	zero,68(r16)
    7af8:	000b883a 	mov	r5,zero
    7afc:	00092ac0 	call	92ac <_Balloc>
    7b00:	d8800715 	stw	r2,28(sp)
    7b04:	d8c00717 	ldw	r3,28(sp)
    7b08:	00bfffc4 	movi	r2,-1
    7b0c:	01000044 	movi	r4,1
    7b10:	d8800615 	stw	r2,24(sp)
    7b14:	80c01015 	stw	r3,64(r16)
    7b18:	d9000b15 	stw	r4,44(sp)
    7b1c:	d8002215 	stw	zero,136(sp)
    7b20:	d8800d15 	stw	r2,52(sp)
    7b24:	003c1906 	br	6b8c <__alt_data_end+0xfffb145c>
    7b28:	193d2926 	beq	r3,r4,6fd0 <__alt_data_end+0xfffb18a0>
    7b2c:	00c00f04 	movi	r3,60
    7b30:	1885c83a 	sub	r2,r3,r2
    7b34:	003d7b06 	br	7124 <__alt_data_end+0xfffb19f4>
    7b38:	000b883a 	mov	r5,zero
    7b3c:	003b1006 	br	6780 <__alt_data_end+0xfffb1050>

00007b40 <_fflush_r>:
    7b40:	defffb04 	addi	sp,sp,-20
    7b44:	dcc00315 	stw	r19,12(sp)
    7b48:	dc000015 	stw	r16,0(sp)
    7b4c:	dfc00415 	stw	ra,16(sp)
    7b50:	dc800215 	stw	r18,8(sp)
    7b54:	dc400115 	stw	r17,4(sp)
    7b58:	2027883a 	mov	r19,r4
    7b5c:	2821883a 	mov	r16,r5
    7b60:	20000226 	beq	r4,zero,7b6c <_fflush_r+0x2c>
    7b64:	20800e17 	ldw	r2,56(r4)
    7b68:	10005326 	beq	r2,zero,7cb8 <_fflush_r+0x178>
    7b6c:	8080030b 	ldhu	r2,12(r16)
    7b70:	10ffffcc 	andi	r3,r2,65535
    7b74:	18e0001c 	xori	r3,r3,32768
    7b78:	18e00004 	addi	r3,r3,-32768
    7b7c:	18002c26 	beq	r3,zero,7c30 <_fflush_r+0xf0>
    7b80:	10c0020c 	andi	r3,r2,8
    7b84:	1800321e 	bne	r3,zero,7c50 <_fflush_r+0x110>
    7b88:	80c00117 	ldw	r3,4(r16)
    7b8c:	10820014 	ori	r2,r2,2048
    7b90:	8080030d 	sth	r2,12(r16)
    7b94:	00c0570e 	bge	zero,r3,7cf4 <_fflush_r+0x1b4>
    7b98:	82000a17 	ldw	r8,40(r16)
    7b9c:	40002426 	beq	r8,zero,7c30 <_fflush_r+0xf0>
    7ba0:	9c400017 	ldw	r17,0(r19)
    7ba4:	10c4000c 	andi	r3,r2,4096
    7ba8:	98000015 	stw	zero,0(r19)
    7bac:	18004626 	beq	r3,zero,7cc8 <_fflush_r+0x188>
    7bb0:	81801417 	ldw	r6,80(r16)
    7bb4:	10c0010c 	andi	r3,r2,4
    7bb8:	18000626 	beq	r3,zero,7bd4 <_fflush_r+0x94>
    7bbc:	80c00117 	ldw	r3,4(r16)
    7bc0:	80800c17 	ldw	r2,48(r16)
    7bc4:	30cdc83a 	sub	r6,r6,r3
    7bc8:	10000226 	beq	r2,zero,7bd4 <_fflush_r+0x94>
    7bcc:	80800f17 	ldw	r2,60(r16)
    7bd0:	308dc83a 	sub	r6,r6,r2
    7bd4:	81400717 	ldw	r5,28(r16)
    7bd8:	9809883a 	mov	r4,r19
    7bdc:	000f883a 	mov	r7,zero
    7be0:	403ee83a 	callr	r8
    7be4:	00ffffc4 	movi	r3,-1
    7be8:	10c04526 	beq	r2,r3,7d00 <_fflush_r+0x1c0>
    7bec:	80c0030b 	ldhu	r3,12(r16)
    7bf0:	81000417 	ldw	r4,16(r16)
    7bf4:	80000115 	stw	zero,4(r16)
    7bf8:	197dffcc 	andi	r5,r3,63487
    7bfc:	8140030d 	sth	r5,12(r16)
    7c00:	81000015 	stw	r4,0(r16)
    7c04:	18c4000c 	andi	r3,r3,4096
    7c08:	18000126 	beq	r3,zero,7c10 <_fflush_r+0xd0>
    7c0c:	80801415 	stw	r2,80(r16)
    7c10:	81400c17 	ldw	r5,48(r16)
    7c14:	9c400015 	stw	r17,0(r19)
    7c18:	28000526 	beq	r5,zero,7c30 <_fflush_r+0xf0>
    7c1c:	80801004 	addi	r2,r16,64
    7c20:	28800226 	beq	r5,r2,7c2c <_fflush_r+0xec>
    7c24:	9809883a 	mov	r4,r19
    7c28:	00082700 	call	8270 <_free_r>
    7c2c:	80000c15 	stw	zero,48(r16)
    7c30:	0005883a 	mov	r2,zero
    7c34:	dfc00417 	ldw	ra,16(sp)
    7c38:	dcc00317 	ldw	r19,12(sp)
    7c3c:	dc800217 	ldw	r18,8(sp)
    7c40:	dc400117 	ldw	r17,4(sp)
    7c44:	dc000017 	ldw	r16,0(sp)
    7c48:	dec00504 	addi	sp,sp,20
    7c4c:	f800283a 	ret
    7c50:	84800417 	ldw	r18,16(r16)
    7c54:	903ff626 	beq	r18,zero,7c30 <__alt_data_end+0xfffb2500>
    7c58:	84400017 	ldw	r17,0(r16)
    7c5c:	108000cc 	andi	r2,r2,3
    7c60:	84800015 	stw	r18,0(r16)
    7c64:	8ca3c83a 	sub	r17,r17,r18
    7c68:	10001526 	beq	r2,zero,7cc0 <_fflush_r+0x180>
    7c6c:	0005883a 	mov	r2,zero
    7c70:	80800215 	stw	r2,8(r16)
    7c74:	04400316 	blt	zero,r17,7c84 <_fflush_r+0x144>
    7c78:	003fed06 	br	7c30 <__alt_data_end+0xfffb2500>
    7c7c:	90a5883a 	add	r18,r18,r2
    7c80:	047feb0e 	bge	zero,r17,7c30 <__alt_data_end+0xfffb2500>
    7c84:	80800917 	ldw	r2,36(r16)
    7c88:	81400717 	ldw	r5,28(r16)
    7c8c:	880f883a 	mov	r7,r17
    7c90:	900d883a 	mov	r6,r18
    7c94:	9809883a 	mov	r4,r19
    7c98:	103ee83a 	callr	r2
    7c9c:	88a3c83a 	sub	r17,r17,r2
    7ca0:	00bff616 	blt	zero,r2,7c7c <__alt_data_end+0xfffb254c>
    7ca4:	80c0030b 	ldhu	r3,12(r16)
    7ca8:	00bfffc4 	movi	r2,-1
    7cac:	18c01014 	ori	r3,r3,64
    7cb0:	80c0030d 	sth	r3,12(r16)
    7cb4:	003fdf06 	br	7c34 <__alt_data_end+0xfffb2504>
    7cb8:	00080fc0 	call	80fc <__sinit>
    7cbc:	003fab06 	br	7b6c <__alt_data_end+0xfffb243c>
    7cc0:	80800517 	ldw	r2,20(r16)
    7cc4:	003fea06 	br	7c70 <__alt_data_end+0xfffb2540>
    7cc8:	81400717 	ldw	r5,28(r16)
    7ccc:	000d883a 	mov	r6,zero
    7cd0:	9809883a 	mov	r4,r19
    7cd4:	01c00044 	movi	r7,1
    7cd8:	403ee83a 	callr	r8
    7cdc:	100d883a 	mov	r6,r2
    7ce0:	00bfffc4 	movi	r2,-1
    7ce4:	30801326 	beq	r6,r2,7d34 <_fflush_r+0x1f4>
    7ce8:	8080030b 	ldhu	r2,12(r16)
    7cec:	82000a17 	ldw	r8,40(r16)
    7cf0:	003fb006 	br	7bb4 <__alt_data_end+0xfffb2484>
    7cf4:	80c00f17 	ldw	r3,60(r16)
    7cf8:	00ffa716 	blt	zero,r3,7b98 <__alt_data_end+0xfffb2468>
    7cfc:	003fcc06 	br	7c30 <__alt_data_end+0xfffb2500>
    7d00:	98c00017 	ldw	r3,0(r19)
    7d04:	183fb926 	beq	r3,zero,7bec <__alt_data_end+0xfffb24bc>
    7d08:	01000744 	movi	r4,29
    7d0c:	19000226 	beq	r3,r4,7d18 <_fflush_r+0x1d8>
    7d10:	01000584 	movi	r4,22
    7d14:	1900101e 	bne	r3,r4,7d58 <_fflush_r+0x218>
    7d18:	8080030b 	ldhu	r2,12(r16)
    7d1c:	80c00417 	ldw	r3,16(r16)
    7d20:	80000115 	stw	zero,4(r16)
    7d24:	10bdffcc 	andi	r2,r2,63487
    7d28:	8080030d 	sth	r2,12(r16)
    7d2c:	80c00015 	stw	r3,0(r16)
    7d30:	003fb706 	br	7c10 <__alt_data_end+0xfffb24e0>
    7d34:	98800017 	ldw	r2,0(r19)
    7d38:	103feb26 	beq	r2,zero,7ce8 <__alt_data_end+0xfffb25b8>
    7d3c:	00c00744 	movi	r3,29
    7d40:	10c00226 	beq	r2,r3,7d4c <_fflush_r+0x20c>
    7d44:	00c00584 	movi	r3,22
    7d48:	10ffd61e 	bne	r2,r3,7ca4 <__alt_data_end+0xfffb2574>
    7d4c:	9c400015 	stw	r17,0(r19)
    7d50:	0005883a 	mov	r2,zero
    7d54:	003fb706 	br	7c34 <__alt_data_end+0xfffb2504>
    7d58:	80c0030b 	ldhu	r3,12(r16)
    7d5c:	18c01014 	ori	r3,r3,64
    7d60:	80c0030d 	sth	r3,12(r16)
    7d64:	003fb306 	br	7c34 <__alt_data_end+0xfffb2504>

00007d68 <fflush>:
    7d68:	20000526 	beq	r4,zero,7d80 <fflush+0x18>
    7d6c:	00800074 	movhi	r2,1
    7d70:	10935f04 	addi	r2,r2,19836
    7d74:	200b883a 	mov	r5,r4
    7d78:	11000017 	ldw	r4,0(r2)
    7d7c:	0007b401 	jmpi	7b40 <_fflush_r>
    7d80:	00800074 	movhi	r2,1
    7d84:	10935e04 	addi	r2,r2,19832
    7d88:	11000017 	ldw	r4,0(r2)
    7d8c:	01400034 	movhi	r5,0
    7d90:	295ed004 	addi	r5,r5,31552
    7d94:	0008abc1 	jmpi	8abc <_fwalk_reent>

00007d98 <__fp_lock>:
    7d98:	0005883a 	mov	r2,zero
    7d9c:	f800283a 	ret

00007da0 <__fp_unlock>:
    7da0:	0005883a 	mov	r2,zero
    7da4:	f800283a 	ret

00007da8 <_cleanup_r>:
    7da8:	01400074 	movhi	r5,1
    7dac:	2970b304 	addi	r5,r5,-15668
    7db0:	0008a041 	jmpi	8a04 <_fwalk>

00007db4 <__sinit.part.1>:
    7db4:	defff604 	addi	sp,sp,-40
    7db8:	00c00034 	movhi	r3,0
    7dbc:	dfc00915 	stw	ra,36(sp)
    7dc0:	df000815 	stw	fp,32(sp)
    7dc4:	ddc00715 	stw	r23,28(sp)
    7dc8:	dd800615 	stw	r22,24(sp)
    7dcc:	dd400515 	stw	r21,20(sp)
    7dd0:	dd000415 	stw	r20,16(sp)
    7dd4:	dcc00315 	stw	r19,12(sp)
    7dd8:	dc800215 	stw	r18,8(sp)
    7ddc:	dc400115 	stw	r17,4(sp)
    7de0:	dc000015 	stw	r16,0(sp)
    7de4:	18df6a04 	addi	r3,r3,32168
    7de8:	24000117 	ldw	r16,4(r4)
    7dec:	20c00f15 	stw	r3,60(r4)
    7df0:	07000044 	movi	fp,1
    7df4:	00c000c4 	movi	r3,3
    7df8:	2080bb04 	addi	r2,r4,748
    7dfc:	20c0b915 	stw	r3,740(r4)
    7e00:	27000e15 	stw	fp,56(r4)
    7e04:	2080ba15 	stw	r2,744(r4)
    7e08:	2000b815 	stw	zero,736(r4)
    7e0c:	05c00204 	movi	r23,8
    7e10:	00800104 	movi	r2,4
    7e14:	2025883a 	mov	r18,r4
    7e18:	b80d883a 	mov	r6,r23
    7e1c:	81001704 	addi	r4,r16,92
    7e20:	000b883a 	mov	r5,zero
    7e24:	80000015 	stw	zero,0(r16)
    7e28:	80000115 	stw	zero,4(r16)
    7e2c:	80000215 	stw	zero,8(r16)
    7e30:	8080030d 	sth	r2,12(r16)
    7e34:	80001915 	stw	zero,100(r16)
    7e38:	8000038d 	sth	zero,14(r16)
    7e3c:	80000415 	stw	zero,16(r16)
    7e40:	80000515 	stw	zero,20(r16)
    7e44:	80000615 	stw	zero,24(r16)
    7e48:	00091880 	call	9188 <memset>
    7e4c:	05800074 	movhi	r22,1
    7e50:	94400217 	ldw	r17,8(r18)
    7e54:	05400074 	movhi	r21,1
    7e58:	05000074 	movhi	r20,1
    7e5c:	04c00074 	movhi	r19,1
    7e60:	b5aa4204 	addi	r22,r22,-22264
    7e64:	ad6a5904 	addi	r21,r21,-22172
    7e68:	a52a7804 	addi	r20,r20,-22048
    7e6c:	9cea8f04 	addi	r19,r19,-21956
    7e70:	85800815 	stw	r22,32(r16)
    7e74:	85400915 	stw	r21,36(r16)
    7e78:	85000a15 	stw	r20,40(r16)
    7e7c:	84c00b15 	stw	r19,44(r16)
    7e80:	84000715 	stw	r16,28(r16)
    7e84:	00800284 	movi	r2,10
    7e88:	89001704 	addi	r4,r17,92
    7e8c:	b80d883a 	mov	r6,r23
    7e90:	000b883a 	mov	r5,zero
    7e94:	88000015 	stw	zero,0(r17)
    7e98:	88000115 	stw	zero,4(r17)
    7e9c:	88000215 	stw	zero,8(r17)
    7ea0:	8880030d 	sth	r2,12(r17)
    7ea4:	88001915 	stw	zero,100(r17)
    7ea8:	8f00038d 	sth	fp,14(r17)
    7eac:	88000415 	stw	zero,16(r17)
    7eb0:	88000515 	stw	zero,20(r17)
    7eb4:	88000615 	stw	zero,24(r17)
    7eb8:	00091880 	call	9188 <memset>
    7ebc:	94000317 	ldw	r16,12(r18)
    7ec0:	00800484 	movi	r2,18
    7ec4:	8c400715 	stw	r17,28(r17)
    7ec8:	8d800815 	stw	r22,32(r17)
    7ecc:	8d400915 	stw	r21,36(r17)
    7ed0:	8d000a15 	stw	r20,40(r17)
    7ed4:	8cc00b15 	stw	r19,44(r17)
    7ed8:	8080030d 	sth	r2,12(r16)
    7edc:	00800084 	movi	r2,2
    7ee0:	80000015 	stw	zero,0(r16)
    7ee4:	80000115 	stw	zero,4(r16)
    7ee8:	80000215 	stw	zero,8(r16)
    7eec:	80001915 	stw	zero,100(r16)
    7ef0:	8080038d 	sth	r2,14(r16)
    7ef4:	80000415 	stw	zero,16(r16)
    7ef8:	80000515 	stw	zero,20(r16)
    7efc:	80000615 	stw	zero,24(r16)
    7f00:	81001704 	addi	r4,r16,92
    7f04:	000b883a 	mov	r5,zero
    7f08:	b80d883a 	mov	r6,r23
    7f0c:	00091880 	call	9188 <memset>
    7f10:	84000715 	stw	r16,28(r16)
    7f14:	85800815 	stw	r22,32(r16)
    7f18:	85400915 	stw	r21,36(r16)
    7f1c:	85000a15 	stw	r20,40(r16)
    7f20:	84c00b15 	stw	r19,44(r16)
    7f24:	dfc00917 	ldw	ra,36(sp)
    7f28:	df000817 	ldw	fp,32(sp)
    7f2c:	ddc00717 	ldw	r23,28(sp)
    7f30:	dd800617 	ldw	r22,24(sp)
    7f34:	dd400517 	ldw	r21,20(sp)
    7f38:	dd000417 	ldw	r20,16(sp)
    7f3c:	dcc00317 	ldw	r19,12(sp)
    7f40:	dc800217 	ldw	r18,8(sp)
    7f44:	dc400117 	ldw	r17,4(sp)
    7f48:	dc000017 	ldw	r16,0(sp)
    7f4c:	dec00a04 	addi	sp,sp,40
    7f50:	f800283a 	ret

00007f54 <__sfmoreglue>:
    7f54:	defffc04 	addi	sp,sp,-16
    7f58:	dc800215 	stw	r18,8(sp)
    7f5c:	2825883a 	mov	r18,r5
    7f60:	dc000015 	stw	r16,0(sp)
    7f64:	01401a04 	movi	r5,104
    7f68:	2021883a 	mov	r16,r4
    7f6c:	9009883a 	mov	r4,r18
    7f70:	dfc00315 	stw	ra,12(sp)
    7f74:	dc400115 	stw	r17,4(sp)
    7f78:	000d6f80 	call	d6f8 <__mulsi3>
    7f7c:	8009883a 	mov	r4,r16
    7f80:	11400304 	addi	r5,r2,12
    7f84:	1023883a 	mov	r17,r2
    7f88:	000355c0 	call	355c <_malloc_r>
    7f8c:	1021883a 	mov	r16,r2
    7f90:	10000726 	beq	r2,zero,7fb0 <__sfmoreglue+0x5c>
    7f94:	11000304 	addi	r4,r2,12
    7f98:	10000015 	stw	zero,0(r2)
    7f9c:	14800115 	stw	r18,4(r2)
    7fa0:	11000215 	stw	r4,8(r2)
    7fa4:	000b883a 	mov	r5,zero
    7fa8:	880d883a 	mov	r6,r17
    7fac:	00091880 	call	9188 <memset>
    7fb0:	8005883a 	mov	r2,r16
    7fb4:	dfc00317 	ldw	ra,12(sp)
    7fb8:	dc800217 	ldw	r18,8(sp)
    7fbc:	dc400117 	ldw	r17,4(sp)
    7fc0:	dc000017 	ldw	r16,0(sp)
    7fc4:	dec00404 	addi	sp,sp,16
    7fc8:	f800283a 	ret

00007fcc <__sfp>:
    7fcc:	00800074 	movhi	r2,1
    7fd0:	defffb04 	addi	sp,sp,-20
    7fd4:	10935e04 	addi	r2,r2,19832
    7fd8:	dc800215 	stw	r18,8(sp)
    7fdc:	14800017 	ldw	r18,0(r2)
    7fe0:	dcc00315 	stw	r19,12(sp)
    7fe4:	dfc00415 	stw	ra,16(sp)
    7fe8:	90800e17 	ldw	r2,56(r18)
    7fec:	dc400115 	stw	r17,4(sp)
    7ff0:	dc000015 	stw	r16,0(sp)
    7ff4:	2027883a 	mov	r19,r4
    7ff8:	1000021e 	bne	r2,zero,8004 <__sfp+0x38>
    7ffc:	9009883a 	mov	r4,r18
    8000:	0007db40 	call	7db4 <__sinit.part.1>
    8004:	9480b804 	addi	r18,r18,736
    8008:	047fffc4 	movi	r17,-1
    800c:	91400117 	ldw	r5,4(r18)
    8010:	94000217 	ldw	r16,8(r18)
    8014:	297fffc4 	addi	r5,r5,-1
    8018:	28000a16 	blt	r5,zero,8044 <__sfp+0x78>
    801c:	8080030f 	ldh	r2,12(r16)
    8020:	10000c26 	beq	r2,zero,8054 <__sfp+0x88>
    8024:	80c01d04 	addi	r3,r16,116
    8028:	00000206 	br	8034 <__sfp+0x68>
    802c:	18bfe60f 	ldh	r2,-104(r3)
    8030:	10000826 	beq	r2,zero,8054 <__sfp+0x88>
    8034:	297fffc4 	addi	r5,r5,-1
    8038:	1c3ffd04 	addi	r16,r3,-12
    803c:	18c01a04 	addi	r3,r3,104
    8040:	2c7ffa1e 	bne	r5,r17,802c <__alt_data_end+0xfffb28fc>
    8044:	90800017 	ldw	r2,0(r18)
    8048:	10001d26 	beq	r2,zero,80c0 <__sfp+0xf4>
    804c:	1025883a 	mov	r18,r2
    8050:	003fee06 	br	800c <__alt_data_end+0xfffb28dc>
    8054:	00bfffc4 	movi	r2,-1
    8058:	8080038d 	sth	r2,14(r16)
    805c:	00800044 	movi	r2,1
    8060:	8080030d 	sth	r2,12(r16)
    8064:	80001915 	stw	zero,100(r16)
    8068:	80000015 	stw	zero,0(r16)
    806c:	80000215 	stw	zero,8(r16)
    8070:	80000115 	stw	zero,4(r16)
    8074:	80000415 	stw	zero,16(r16)
    8078:	80000515 	stw	zero,20(r16)
    807c:	80000615 	stw	zero,24(r16)
    8080:	81001704 	addi	r4,r16,92
    8084:	000b883a 	mov	r5,zero
    8088:	01800204 	movi	r6,8
    808c:	00091880 	call	9188 <memset>
    8090:	8005883a 	mov	r2,r16
    8094:	80000c15 	stw	zero,48(r16)
    8098:	80000d15 	stw	zero,52(r16)
    809c:	80001115 	stw	zero,68(r16)
    80a0:	80001215 	stw	zero,72(r16)
    80a4:	dfc00417 	ldw	ra,16(sp)
    80a8:	dcc00317 	ldw	r19,12(sp)
    80ac:	dc800217 	ldw	r18,8(sp)
    80b0:	dc400117 	ldw	r17,4(sp)
    80b4:	dc000017 	ldw	r16,0(sp)
    80b8:	dec00504 	addi	sp,sp,20
    80bc:	f800283a 	ret
    80c0:	9809883a 	mov	r4,r19
    80c4:	01400104 	movi	r5,4
    80c8:	0007f540 	call	7f54 <__sfmoreglue>
    80cc:	90800015 	stw	r2,0(r18)
    80d0:	103fde1e 	bne	r2,zero,804c <__alt_data_end+0xfffb291c>
    80d4:	00800304 	movi	r2,12
    80d8:	98800015 	stw	r2,0(r19)
    80dc:	0005883a 	mov	r2,zero
    80e0:	003ff006 	br	80a4 <__alt_data_end+0xfffb2974>

000080e4 <_cleanup>:
    80e4:	00800074 	movhi	r2,1
    80e8:	10935e04 	addi	r2,r2,19832
    80ec:	11000017 	ldw	r4,0(r2)
    80f0:	01400074 	movhi	r5,1
    80f4:	2970b304 	addi	r5,r5,-15668
    80f8:	0008a041 	jmpi	8a04 <_fwalk>

000080fc <__sinit>:
    80fc:	20800e17 	ldw	r2,56(r4)
    8100:	10000126 	beq	r2,zero,8108 <__sinit+0xc>
    8104:	f800283a 	ret
    8108:	0007db41 	jmpi	7db4 <__sinit.part.1>

0000810c <__sfp_lock_acquire>:
    810c:	f800283a 	ret

00008110 <__sfp_lock_release>:
    8110:	f800283a 	ret

00008114 <__sinit_lock_acquire>:
    8114:	f800283a 	ret

00008118 <__sinit_lock_release>:
    8118:	f800283a 	ret

0000811c <__fp_lock_all>:
    811c:	00800074 	movhi	r2,1
    8120:	10935f04 	addi	r2,r2,19836
    8124:	11000017 	ldw	r4,0(r2)
    8128:	01400034 	movhi	r5,0
    812c:	295f6604 	addi	r5,r5,32152
    8130:	0008a041 	jmpi	8a04 <_fwalk>

00008134 <__fp_unlock_all>:
    8134:	00800074 	movhi	r2,1
    8138:	10935f04 	addi	r2,r2,19836
    813c:	11000017 	ldw	r4,0(r2)
    8140:	01400034 	movhi	r5,0
    8144:	295f6804 	addi	r5,r5,32160
    8148:	0008a041 	jmpi	8a04 <_fwalk>

0000814c <_malloc_trim_r>:
    814c:	defffb04 	addi	sp,sp,-20
    8150:	dcc00315 	stw	r19,12(sp)
    8154:	04c00074 	movhi	r19,1
    8158:	dc800215 	stw	r18,8(sp)
    815c:	dc400115 	stw	r17,4(sp)
    8160:	dc000015 	stw	r16,0(sp)
    8164:	dfc00415 	stw	ra,16(sp)
    8168:	2821883a 	mov	r16,r5
    816c:	9cccb104 	addi	r19,r19,12996
    8170:	2025883a 	mov	r18,r4
    8174:	00104fc0 	call	104fc <__malloc_lock>
    8178:	98800217 	ldw	r2,8(r19)
    817c:	14400117 	ldw	r17,4(r2)
    8180:	00bfff04 	movi	r2,-4
    8184:	88a2703a 	and	r17,r17,r2
    8188:	8c21c83a 	sub	r16,r17,r16
    818c:	8403fbc4 	addi	r16,r16,4079
    8190:	8020d33a 	srli	r16,r16,12
    8194:	0083ffc4 	movi	r2,4095
    8198:	843fffc4 	addi	r16,r16,-1
    819c:	8020933a 	slli	r16,r16,12
    81a0:	1400060e 	bge	r2,r16,81bc <_malloc_trim_r+0x70>
    81a4:	9009883a 	mov	r4,r18
    81a8:	000b883a 	mov	r5,zero
    81ac:	0003eb40 	call	3eb4 <_sbrk_r>
    81b0:	98c00217 	ldw	r3,8(r19)
    81b4:	1c47883a 	add	r3,r3,r17
    81b8:	10c00a26 	beq	r2,r3,81e4 <_malloc_trim_r+0x98>
    81bc:	9009883a 	mov	r4,r18
    81c0:	001051c0 	call	1051c <__malloc_unlock>
    81c4:	0005883a 	mov	r2,zero
    81c8:	dfc00417 	ldw	ra,16(sp)
    81cc:	dcc00317 	ldw	r19,12(sp)
    81d0:	dc800217 	ldw	r18,8(sp)
    81d4:	dc400117 	ldw	r17,4(sp)
    81d8:	dc000017 	ldw	r16,0(sp)
    81dc:	dec00504 	addi	sp,sp,20
    81e0:	f800283a 	ret
    81e4:	9009883a 	mov	r4,r18
    81e8:	040bc83a 	sub	r5,zero,r16
    81ec:	0003eb40 	call	3eb4 <_sbrk_r>
    81f0:	00ffffc4 	movi	r3,-1
    81f4:	10c00d26 	beq	r2,r3,822c <_malloc_trim_r+0xe0>
    81f8:	00c00074 	movhi	r3,1
    81fc:	18da5804 	addi	r3,r3,26976
    8200:	18800017 	ldw	r2,0(r3)
    8204:	99000217 	ldw	r4,8(r19)
    8208:	8c23c83a 	sub	r17,r17,r16
    820c:	8c400054 	ori	r17,r17,1
    8210:	1421c83a 	sub	r16,r2,r16
    8214:	24400115 	stw	r17,4(r4)
    8218:	9009883a 	mov	r4,r18
    821c:	1c000015 	stw	r16,0(r3)
    8220:	001051c0 	call	1051c <__malloc_unlock>
    8224:	00800044 	movi	r2,1
    8228:	003fe706 	br	81c8 <__alt_data_end+0xfffb2a98>
    822c:	9009883a 	mov	r4,r18
    8230:	000b883a 	mov	r5,zero
    8234:	0003eb40 	call	3eb4 <_sbrk_r>
    8238:	99000217 	ldw	r4,8(r19)
    823c:	014003c4 	movi	r5,15
    8240:	1107c83a 	sub	r3,r2,r4
    8244:	28ffdd0e 	bge	r5,r3,81bc <__alt_data_end+0xfffb2a8c>
    8248:	01400074 	movhi	r5,1
    824c:	29535c04 	addi	r5,r5,19824
    8250:	29400017 	ldw	r5,0(r5)
    8254:	18c00054 	ori	r3,r3,1
    8258:	20c00115 	stw	r3,4(r4)
    825c:	00c00074 	movhi	r3,1
    8260:	1145c83a 	sub	r2,r2,r5
    8264:	18da5804 	addi	r3,r3,26976
    8268:	18800015 	stw	r2,0(r3)
    826c:	003fd306 	br	81bc <__alt_data_end+0xfffb2a8c>

00008270 <_free_r>:
    8270:	28004c26 	beq	r5,zero,83a4 <_free_r+0x134>
    8274:	defffd04 	addi	sp,sp,-12
    8278:	dc400115 	stw	r17,4(sp)
    827c:	dc000015 	stw	r16,0(sp)
    8280:	2023883a 	mov	r17,r4
    8284:	2821883a 	mov	r16,r5
    8288:	dfc00215 	stw	ra,8(sp)
    828c:	00104fc0 	call	104fc <__malloc_lock>
    8290:	813fff17 	ldw	r4,-4(r16)
    8294:	00bfff84 	movi	r2,-2
    8298:	02400074 	movhi	r9,1
    829c:	81bffe04 	addi	r6,r16,-8
    82a0:	2084703a 	and	r2,r4,r2
    82a4:	4a4cb104 	addi	r9,r9,12996
    82a8:	308b883a 	add	r5,r6,r2
    82ac:	2a000117 	ldw	r8,4(r5)
    82b0:	49c00217 	ldw	r7,8(r9)
    82b4:	00ffff04 	movi	r3,-4
    82b8:	40c6703a 	and	r3,r8,r3
    82bc:	39405326 	beq	r7,r5,840c <_free_r+0x19c>
    82c0:	28c00115 	stw	r3,4(r5)
    82c4:	2100004c 	andi	r4,r4,1
    82c8:	2000091e 	bne	r4,zero,82f0 <_free_r+0x80>
    82cc:	81fffe17 	ldw	r7,-8(r16)
    82d0:	4a000204 	addi	r8,r9,8
    82d4:	31cdc83a 	sub	r6,r6,r7
    82d8:	31000217 	ldw	r4,8(r6)
    82dc:	11c5883a 	add	r2,r2,r7
    82e0:	22006126 	beq	r4,r8,8468 <_free_r+0x1f8>
    82e4:	31c00317 	ldw	r7,12(r6)
    82e8:	21c00315 	stw	r7,12(r4)
    82ec:	39000215 	stw	r4,8(r7)
    82f0:	28c9883a 	add	r4,r5,r3
    82f4:	21c00117 	ldw	r7,4(r4)
    82f8:	39c0004c 	andi	r7,r7,1
    82fc:	38000d1e 	bne	r7,zero,8334 <_free_r+0xc4>
    8300:	29000217 	ldw	r4,8(r5)
    8304:	10c5883a 	add	r2,r2,r3
    8308:	00c00074 	movhi	r3,1
    830c:	18ccb304 	addi	r3,r3,13004
    8310:	20c07526 	beq	r4,r3,84e8 <_free_r+0x278>
    8314:	29c00317 	ldw	r7,12(r5)
    8318:	11400054 	ori	r5,r2,1
    831c:	3087883a 	add	r3,r6,r2
    8320:	21c00315 	stw	r7,12(r4)
    8324:	39000215 	stw	r4,8(r7)
    8328:	31400115 	stw	r5,4(r6)
    832c:	18800015 	stw	r2,0(r3)
    8330:	00000406 	br	8344 <_free_r+0xd4>
    8334:	10c00054 	ori	r3,r2,1
    8338:	30c00115 	stw	r3,4(r6)
    833c:	3087883a 	add	r3,r6,r2
    8340:	18800015 	stw	r2,0(r3)
    8344:	00c07fc4 	movi	r3,511
    8348:	18801736 	bltu	r3,r2,83a8 <_free_r+0x138>
    834c:	1004d0fa 	srli	r2,r2,3
    8350:	01400044 	movi	r5,1
    8354:	49000117 	ldw	r4,4(r9)
    8358:	1087883a 	add	r3,r2,r2
    835c:	18c7883a 	add	r3,r3,r3
    8360:	1005d0ba 	srai	r2,r2,2
    8364:	18c7883a 	add	r3,r3,r3
    8368:	1a47883a 	add	r3,r3,r9
    836c:	19c00217 	ldw	r7,8(r3)
    8370:	2884983a 	sll	r2,r5,r2
    8374:	30c00315 	stw	r3,12(r6)
    8378:	31c00215 	stw	r7,8(r6)
    837c:	1104b03a 	or	r2,r2,r4
    8380:	19800215 	stw	r6,8(r3)
    8384:	48800115 	stw	r2,4(r9)
    8388:	39800315 	stw	r6,12(r7)
    838c:	8809883a 	mov	r4,r17
    8390:	dfc00217 	ldw	ra,8(sp)
    8394:	dc400117 	ldw	r17,4(sp)
    8398:	dc000017 	ldw	r16,0(sp)
    839c:	dec00304 	addi	sp,sp,12
    83a0:	001051c1 	jmpi	1051c <__malloc_unlock>
    83a4:	f800283a 	ret
    83a8:	1006d27a 	srli	r3,r2,9
    83ac:	01000104 	movi	r4,4
    83b0:	20c04036 	bltu	r4,r3,84b4 <_free_r+0x244>
    83b4:	1006d1ba 	srli	r3,r2,6
    83b8:	19400e04 	addi	r5,r3,56
    83bc:	2947883a 	add	r3,r5,r5
    83c0:	18c7883a 	add	r3,r3,r3
    83c4:	18c7883a 	add	r3,r3,r3
    83c8:	1a49883a 	add	r4,r3,r9
    83cc:	20c00217 	ldw	r3,8(r4)
    83d0:	01c00074 	movhi	r7,1
    83d4:	39ccb104 	addi	r7,r7,12996
    83d8:	19003b26 	beq	r3,r4,84c8 <_free_r+0x258>
    83dc:	01ffff04 	movi	r7,-4
    83e0:	19400117 	ldw	r5,4(r3)
    83e4:	29ca703a 	and	r5,r5,r7
    83e8:	1140022e 	bgeu	r2,r5,83f4 <_free_r+0x184>
    83ec:	18c00217 	ldw	r3,8(r3)
    83f0:	20fffb1e 	bne	r4,r3,83e0 <__alt_data_end+0xfffb2cb0>
    83f4:	18800317 	ldw	r2,12(r3)
    83f8:	30800315 	stw	r2,12(r6)
    83fc:	30c00215 	stw	r3,8(r6)
    8400:	11800215 	stw	r6,8(r2)
    8404:	19800315 	stw	r6,12(r3)
    8408:	003fe006 	br	838c <__alt_data_end+0xfffb2c5c>
    840c:	2100004c 	andi	r4,r4,1
    8410:	1885883a 	add	r2,r3,r2
    8414:	2000071e 	bne	r4,zero,8434 <_free_r+0x1c4>
    8418:	817ffe17 	ldw	r5,-8(r16)
    841c:	314dc83a 	sub	r6,r6,r5
    8420:	30c00317 	ldw	r3,12(r6)
    8424:	31000217 	ldw	r4,8(r6)
    8428:	1145883a 	add	r2,r2,r5
    842c:	20c00315 	stw	r3,12(r4)
    8430:	19000215 	stw	r4,8(r3)
    8434:	10c00054 	ori	r3,r2,1
    8438:	30c00115 	stw	r3,4(r6)
    843c:	00c00074 	movhi	r3,1
    8440:	18d35d04 	addi	r3,r3,19828
    8444:	18c00017 	ldw	r3,0(r3)
    8448:	49800215 	stw	r6,8(r9)
    844c:	10ffcf36 	bltu	r2,r3,838c <__alt_data_end+0xfffb2c5c>
    8450:	00800074 	movhi	r2,1
    8454:	109a4c04 	addi	r2,r2,26928
    8458:	11400017 	ldw	r5,0(r2)
    845c:	8809883a 	mov	r4,r17
    8460:	000814c0 	call	814c <_malloc_trim_r>
    8464:	003fc906 	br	838c <__alt_data_end+0xfffb2c5c>
    8468:	28c9883a 	add	r4,r5,r3
    846c:	21000117 	ldw	r4,4(r4)
    8470:	2100004c 	andi	r4,r4,1
    8474:	20000a1e 	bne	r4,zero,84a0 <_free_r+0x230>
    8478:	29000317 	ldw	r4,12(r5)
    847c:	29400217 	ldw	r5,8(r5)
    8480:	10c5883a 	add	r2,r2,r3
    8484:	10c00054 	ori	r3,r2,1
    8488:	29000315 	stw	r4,12(r5)
    848c:	21400215 	stw	r5,8(r4)
    8490:	30c00115 	stw	r3,4(r6)
    8494:	308d883a 	add	r6,r6,r2
    8498:	30800015 	stw	r2,0(r6)
    849c:	003fbb06 	br	838c <__alt_data_end+0xfffb2c5c>
    84a0:	10c00054 	ori	r3,r2,1
    84a4:	30c00115 	stw	r3,4(r6)
    84a8:	308d883a 	add	r6,r6,r2
    84ac:	30800015 	stw	r2,0(r6)
    84b0:	003fb606 	br	838c <__alt_data_end+0xfffb2c5c>
    84b4:	01000504 	movi	r4,20
    84b8:	20c01436 	bltu	r4,r3,850c <_free_r+0x29c>
    84bc:	194016c4 	addi	r5,r3,91
    84c0:	2947883a 	add	r3,r5,r5
    84c4:	003fbe06 	br	83c0 <__alt_data_end+0xfffb2c90>
    84c8:	280bd0ba 	srai	r5,r5,2
    84cc:	00800044 	movi	r2,1
    84d0:	39000117 	ldw	r4,4(r7)
    84d4:	114a983a 	sll	r5,r2,r5
    84d8:	1805883a 	mov	r2,r3
    84dc:	2908b03a 	or	r4,r5,r4
    84e0:	39000115 	stw	r4,4(r7)
    84e4:	003fc406 	br	83f8 <__alt_data_end+0xfffb2cc8>
    84e8:	49800515 	stw	r6,20(r9)
    84ec:	49800415 	stw	r6,16(r9)
    84f0:	10c00054 	ori	r3,r2,1
    84f4:	31000315 	stw	r4,12(r6)
    84f8:	31000215 	stw	r4,8(r6)
    84fc:	30c00115 	stw	r3,4(r6)
    8500:	308d883a 	add	r6,r6,r2
    8504:	30800015 	stw	r2,0(r6)
    8508:	003fa006 	br	838c <__alt_data_end+0xfffb2c5c>
    850c:	01001504 	movi	r4,84
    8510:	20c00436 	bltu	r4,r3,8524 <_free_r+0x2b4>
    8514:	1006d33a 	srli	r3,r2,12
    8518:	19401b84 	addi	r5,r3,110
    851c:	2947883a 	add	r3,r5,r5
    8520:	003fa706 	br	83c0 <__alt_data_end+0xfffb2c90>
    8524:	01005504 	movi	r4,340
    8528:	20c00436 	bltu	r4,r3,853c <_free_r+0x2cc>
    852c:	1006d3fa 	srli	r3,r2,15
    8530:	19401dc4 	addi	r5,r3,119
    8534:	2947883a 	add	r3,r5,r5
    8538:	003fa106 	br	83c0 <__alt_data_end+0xfffb2c90>
    853c:	01015504 	movi	r4,1364
    8540:	20c00436 	bltu	r4,r3,8554 <_free_r+0x2e4>
    8544:	1006d4ba 	srli	r3,r2,18
    8548:	19401f04 	addi	r5,r3,124
    854c:	2947883a 	add	r3,r5,r5
    8550:	003f9b06 	br	83c0 <__alt_data_end+0xfffb2c90>
    8554:	00c03f04 	movi	r3,252
    8558:	01401f84 	movi	r5,126
    855c:	003f9806 	br	83c0 <__alt_data_end+0xfffb2c90>

00008560 <__sfvwrite_r>:
    8560:	30800217 	ldw	r2,8(r6)
    8564:	10004526 	beq	r2,zero,867c <__sfvwrite_r+0x11c>
    8568:	28c0030b 	ldhu	r3,12(r5)
    856c:	defff404 	addi	sp,sp,-48
    8570:	dd400715 	stw	r21,28(sp)
    8574:	dcc00515 	stw	r19,20(sp)
    8578:	dc000215 	stw	r16,8(sp)
    857c:	dfc00b15 	stw	ra,44(sp)
    8580:	df000a15 	stw	fp,40(sp)
    8584:	ddc00915 	stw	r23,36(sp)
    8588:	dd800815 	stw	r22,32(sp)
    858c:	dd000615 	stw	r20,24(sp)
    8590:	dc800415 	stw	r18,16(sp)
    8594:	dc400315 	stw	r17,12(sp)
    8598:	1880020c 	andi	r2,r3,8
    859c:	2821883a 	mov	r16,r5
    85a0:	202b883a 	mov	r21,r4
    85a4:	3027883a 	mov	r19,r6
    85a8:	10002526 	beq	r2,zero,8640 <__sfvwrite_r+0xe0>
    85ac:	28800417 	ldw	r2,16(r5)
    85b0:	10002326 	beq	r2,zero,8640 <__sfvwrite_r+0xe0>
    85b4:	1880008c 	andi	r2,r3,2
    85b8:	9c400017 	ldw	r17,0(r19)
    85bc:	10003126 	beq	r2,zero,8684 <__sfvwrite_r+0x124>
    85c0:	0029883a 	mov	r20,zero
    85c4:	0025883a 	mov	r18,zero
    85c8:	05810004 	movi	r22,1024
    85cc:	a00d883a 	mov	r6,r20
    85d0:	a809883a 	mov	r4,r21
    85d4:	90002526 	beq	r18,zero,866c <__sfvwrite_r+0x10c>
    85d8:	900f883a 	mov	r7,r18
    85dc:	81400717 	ldw	r5,28(r16)
    85e0:	b480012e 	bgeu	r22,r18,85e8 <__sfvwrite_r+0x88>
    85e4:	01c10004 	movi	r7,1024
    85e8:	80800917 	ldw	r2,36(r16)
    85ec:	103ee83a 	callr	r2
    85f0:	0080510e 	bge	zero,r2,8738 <__sfvwrite_r+0x1d8>
    85f4:	98c00217 	ldw	r3,8(r19)
    85f8:	a0a9883a 	add	r20,r20,r2
    85fc:	90a5c83a 	sub	r18,r18,r2
    8600:	1885c83a 	sub	r2,r3,r2
    8604:	98800215 	stw	r2,8(r19)
    8608:	103ff01e 	bne	r2,zero,85cc <__alt_data_end+0xfffb2e9c>
    860c:	0005883a 	mov	r2,zero
    8610:	dfc00b17 	ldw	ra,44(sp)
    8614:	df000a17 	ldw	fp,40(sp)
    8618:	ddc00917 	ldw	r23,36(sp)
    861c:	dd800817 	ldw	r22,32(sp)
    8620:	dd400717 	ldw	r21,28(sp)
    8624:	dd000617 	ldw	r20,24(sp)
    8628:	dcc00517 	ldw	r19,20(sp)
    862c:	dc800417 	ldw	r18,16(sp)
    8630:	dc400317 	ldw	r17,12(sp)
    8634:	dc000217 	ldw	r16,8(sp)
    8638:	dec00c04 	addi	sp,sp,48
    863c:	f800283a 	ret
    8640:	a809883a 	mov	r4,r21
    8644:	800b883a 	mov	r5,r16
    8648:	00060c00 	call	60c0 <__swsetup_r>
    864c:	80c0030b 	ldhu	r3,12(r16)
    8650:	103fd826 	beq	r2,zero,85b4 <__alt_data_end+0xfffb2e84>
    8654:	18c01014 	ori	r3,r3,64
    8658:	80c0030d 	sth	r3,12(r16)
    865c:	00c00244 	movi	r3,9
    8660:	00bfffc4 	movi	r2,-1
    8664:	a8c00015 	stw	r3,0(r21)
    8668:	003fe906 	br	8610 <__alt_data_end+0xfffb2ee0>
    866c:	8d000017 	ldw	r20,0(r17)
    8670:	8c800117 	ldw	r18,4(r17)
    8674:	8c400204 	addi	r17,r17,8
    8678:	003fd406 	br	85cc <__alt_data_end+0xfffb2e9c>
    867c:	0005883a 	mov	r2,zero
    8680:	f800283a 	ret
    8684:	1880004c 	andi	r2,r3,1
    8688:	1000301e 	bne	r2,zero,874c <__sfvwrite_r+0x1ec>
    868c:	002f883a 	mov	r23,zero
    8690:	0025883a 	mov	r18,zero
    8694:	90001c26 	beq	r18,zero,8708 <__sfvwrite_r+0x1a8>
    8698:	1880800c 	andi	r2,r3,512
    869c:	85000217 	ldw	r20,8(r16)
    86a0:	10006c26 	beq	r2,zero,8854 <__sfvwrite_r+0x2f4>
    86a4:	a02d883a 	mov	r22,r20
    86a8:	95008536 	bltu	r18,r20,88c0 <__sfvwrite_r+0x360>
    86ac:	1881200c 	andi	r2,r3,1152
    86b0:	10009d1e 	bne	r2,zero,8928 <__sfvwrite_r+0x3c8>
    86b4:	81000017 	ldw	r4,0(r16)
    86b8:	a039883a 	mov	fp,r20
    86bc:	9029883a 	mov	r20,r18
    86c0:	b80b883a 	mov	r5,r23
    86c4:	b00d883a 	mov	r6,r22
    86c8:	000902c0 	call	902c <memmove>
    86cc:	80c00217 	ldw	r3,8(r16)
    86d0:	81000017 	ldw	r4,0(r16)
    86d4:	9005883a 	mov	r2,r18
    86d8:	1f39c83a 	sub	fp,r3,fp
    86dc:	258f883a 	add	r7,r4,r22
    86e0:	87000215 	stw	fp,8(r16)
    86e4:	81c00015 	stw	r7,0(r16)
    86e8:	98c00217 	ldw	r3,8(r19)
    86ec:	b8af883a 	add	r23,r23,r2
    86f0:	90a5c83a 	sub	r18,r18,r2
    86f4:	1d05c83a 	sub	r2,r3,r20
    86f8:	98800215 	stw	r2,8(r19)
    86fc:	103fc326 	beq	r2,zero,860c <__alt_data_end+0xfffb2edc>
    8700:	80c0030b 	ldhu	r3,12(r16)
    8704:	903fe41e 	bne	r18,zero,8698 <__alt_data_end+0xfffb2f68>
    8708:	8dc00017 	ldw	r23,0(r17)
    870c:	8c800117 	ldw	r18,4(r17)
    8710:	8c400204 	addi	r17,r17,8
    8714:	003fdf06 	br	8694 <__alt_data_end+0xfffb2f64>
    8718:	000a2f40 	call	a2f4 <_realloc_r>
    871c:	102d883a 	mov	r22,r2
    8720:	1000a01e 	bne	r2,zero,89a4 <__sfvwrite_r+0x444>
    8724:	81400417 	ldw	r5,16(r16)
    8728:	a809883a 	mov	r4,r21
    872c:	00082700 	call	8270 <_free_r>
    8730:	00800304 	movi	r2,12
    8734:	a8800015 	stw	r2,0(r21)
    8738:	80c0030b 	ldhu	r3,12(r16)
    873c:	00bfffc4 	movi	r2,-1
    8740:	18c01014 	ori	r3,r3,64
    8744:	80c0030d 	sth	r3,12(r16)
    8748:	003fb106 	br	8610 <__alt_data_end+0xfffb2ee0>
    874c:	0029883a 	mov	r20,zero
    8750:	0011883a 	mov	r8,zero
    8754:	0039883a 	mov	fp,zero
    8758:	0025883a 	mov	r18,zero
    875c:	90001f26 	beq	r18,zero,87dc <__sfvwrite_r+0x27c>
    8760:	40006826 	beq	r8,zero,8904 <__sfvwrite_r+0x3a4>
    8764:	a02f883a 	mov	r23,r20
    8768:	9500012e 	bgeu	r18,r20,8770 <__sfvwrite_r+0x210>
    876c:	902f883a 	mov	r23,r18
    8770:	81000017 	ldw	r4,0(r16)
    8774:	80800417 	ldw	r2,16(r16)
    8778:	b82d883a 	mov	r22,r23
    877c:	81800217 	ldw	r6,8(r16)
    8780:	81c00517 	ldw	r7,20(r16)
    8784:	1100022e 	bgeu	r2,r4,8790 <__sfvwrite_r+0x230>
    8788:	31c7883a 	add	r3,r6,r7
    878c:	1dc01816 	blt	r3,r23,87f0 <__sfvwrite_r+0x290>
    8790:	b9c03f16 	blt	r23,r7,8890 <__sfvwrite_r+0x330>
    8794:	80800917 	ldw	r2,36(r16)
    8798:	81400717 	ldw	r5,28(r16)
    879c:	a809883a 	mov	r4,r21
    87a0:	da000115 	stw	r8,4(sp)
    87a4:	e00d883a 	mov	r6,fp
    87a8:	103ee83a 	callr	r2
    87ac:	102d883a 	mov	r22,r2
    87b0:	da000117 	ldw	r8,4(sp)
    87b4:	00bfe00e 	bge	zero,r2,8738 <__alt_data_end+0xfffb3008>
    87b8:	a5a9c83a 	sub	r20,r20,r22
    87bc:	a0001f26 	beq	r20,zero,883c <__sfvwrite_r+0x2dc>
    87c0:	98800217 	ldw	r2,8(r19)
    87c4:	e5b9883a 	add	fp,fp,r22
    87c8:	95a5c83a 	sub	r18,r18,r22
    87cc:	15adc83a 	sub	r22,r2,r22
    87d0:	9d800215 	stw	r22,8(r19)
    87d4:	b03f8d26 	beq	r22,zero,860c <__alt_data_end+0xfffb2edc>
    87d8:	903fe11e 	bne	r18,zero,8760 <__alt_data_end+0xfffb3030>
    87dc:	8f000017 	ldw	fp,0(r17)
    87e0:	8c800117 	ldw	r18,4(r17)
    87e4:	0011883a 	mov	r8,zero
    87e8:	8c400204 	addi	r17,r17,8
    87ec:	003fdb06 	br	875c <__alt_data_end+0xfffb302c>
    87f0:	180d883a 	mov	r6,r3
    87f4:	e00b883a 	mov	r5,fp
    87f8:	da000115 	stw	r8,4(sp)
    87fc:	d8c00015 	stw	r3,0(sp)
    8800:	000902c0 	call	902c <memmove>
    8804:	d8c00017 	ldw	r3,0(sp)
    8808:	80800017 	ldw	r2,0(r16)
    880c:	a809883a 	mov	r4,r21
    8810:	800b883a 	mov	r5,r16
    8814:	10c5883a 	add	r2,r2,r3
    8818:	80800015 	stw	r2,0(r16)
    881c:	d8c00015 	stw	r3,0(sp)
    8820:	0007b400 	call	7b40 <_fflush_r>
    8824:	d8c00017 	ldw	r3,0(sp)
    8828:	da000117 	ldw	r8,4(sp)
    882c:	103fc21e 	bne	r2,zero,8738 <__alt_data_end+0xfffb3008>
    8830:	182d883a 	mov	r22,r3
    8834:	a5a9c83a 	sub	r20,r20,r22
    8838:	a03fe11e 	bne	r20,zero,87c0 <__alt_data_end+0xfffb3090>
    883c:	a809883a 	mov	r4,r21
    8840:	800b883a 	mov	r5,r16
    8844:	0007b400 	call	7b40 <_fflush_r>
    8848:	103fbb1e 	bne	r2,zero,8738 <__alt_data_end+0xfffb3008>
    884c:	0011883a 	mov	r8,zero
    8850:	003fdb06 	br	87c0 <__alt_data_end+0xfffb3090>
    8854:	81000017 	ldw	r4,0(r16)
    8858:	80800417 	ldw	r2,16(r16)
    885c:	1100012e 	bgeu	r2,r4,8864 <__sfvwrite_r+0x304>
    8860:	a4805a36 	bltu	r20,r18,89cc <__sfvwrite_r+0x46c>
    8864:	81c00517 	ldw	r7,20(r16)
    8868:	91c01a36 	bltu	r18,r7,88d4 <__sfvwrite_r+0x374>
    886c:	80800917 	ldw	r2,36(r16)
    8870:	81400717 	ldw	r5,28(r16)
    8874:	a809883a 	mov	r4,r21
    8878:	b80d883a 	mov	r6,r23
    887c:	103ee83a 	callr	r2
    8880:	1029883a 	mov	r20,r2
    8884:	00bfac0e 	bge	zero,r2,8738 <__alt_data_end+0xfffb3008>
    8888:	a005883a 	mov	r2,r20
    888c:	003f9606 	br	86e8 <__alt_data_end+0xfffb2fb8>
    8890:	b80d883a 	mov	r6,r23
    8894:	e00b883a 	mov	r5,fp
    8898:	da000115 	stw	r8,4(sp)
    889c:	000902c0 	call	902c <memmove>
    88a0:	80800217 	ldw	r2,8(r16)
    88a4:	80c00017 	ldw	r3,0(r16)
    88a8:	da000117 	ldw	r8,4(sp)
    88ac:	15c5c83a 	sub	r2,r2,r23
    88b0:	1def883a 	add	r23,r3,r23
    88b4:	80800215 	stw	r2,8(r16)
    88b8:	85c00015 	stw	r23,0(r16)
    88bc:	003fbe06 	br	87b8 <__alt_data_end+0xfffb3088>
    88c0:	81000017 	ldw	r4,0(r16)
    88c4:	9039883a 	mov	fp,r18
    88c8:	9029883a 	mov	r20,r18
    88cc:	902d883a 	mov	r22,r18
    88d0:	003f7b06 	br	86c0 <__alt_data_end+0xfffb2f90>
    88d4:	b80b883a 	mov	r5,r23
    88d8:	900d883a 	mov	r6,r18
    88dc:	000902c0 	call	902c <memmove>
    88e0:	80c00217 	ldw	r3,8(r16)
    88e4:	80800017 	ldw	r2,0(r16)
    88e8:	9029883a 	mov	r20,r18
    88ec:	1c87c83a 	sub	r3,r3,r18
    88f0:	1485883a 	add	r2,r2,r18
    88f4:	80800015 	stw	r2,0(r16)
    88f8:	80c00215 	stw	r3,8(r16)
    88fc:	9005883a 	mov	r2,r18
    8900:	003f7906 	br	86e8 <__alt_data_end+0xfffb2fb8>
    8904:	e009883a 	mov	r4,fp
    8908:	01400284 	movi	r5,10
    890c:	900d883a 	mov	r6,r18
    8910:	0008e0c0 	call	8e0c <memchr>
    8914:	10003826 	beq	r2,zero,89f8 <__sfvwrite_r+0x498>
    8918:	10800044 	addi	r2,r2,1
    891c:	1729c83a 	sub	r20,r2,fp
    8920:	02000044 	movi	r8,1
    8924:	003f8f06 	br	8764 <__alt_data_end+0xfffb3034>
    8928:	80800517 	ldw	r2,20(r16)
    892c:	81400417 	ldw	r5,16(r16)
    8930:	87000017 	ldw	fp,0(r16)
    8934:	10a9883a 	add	r20,r2,r2
    8938:	a085883a 	add	r2,r20,r2
    893c:	1028d7fa 	srli	r20,r2,31
    8940:	e179c83a 	sub	fp,fp,r5
    8944:	e1000044 	addi	r4,fp,1
    8948:	a085883a 	add	r2,r20,r2
    894c:	1029d07a 	srai	r20,r2,1
    8950:	2485883a 	add	r2,r4,r18
    8954:	a00d883a 	mov	r6,r20
    8958:	a080022e 	bgeu	r20,r2,8964 <__sfvwrite_r+0x404>
    895c:	1029883a 	mov	r20,r2
    8960:	100d883a 	mov	r6,r2
    8964:	18c1000c 	andi	r3,r3,1024
    8968:	a809883a 	mov	r4,r21
    896c:	183f6a26 	beq	r3,zero,8718 <__alt_data_end+0xfffb2fe8>
    8970:	300b883a 	mov	r5,r6
    8974:	000355c0 	call	355c <_malloc_r>
    8978:	102d883a 	mov	r22,r2
    897c:	103f6c26 	beq	r2,zero,8730 <__alt_data_end+0xfffb3000>
    8980:	81400417 	ldw	r5,16(r16)
    8984:	1009883a 	mov	r4,r2
    8988:	e00d883a 	mov	r6,fp
    898c:	0008ef40 	call	8ef4 <memcpy>
    8990:	8080030b 	ldhu	r2,12(r16)
    8994:	00fedfc4 	movi	r3,-1153
    8998:	10c4703a 	and	r2,r2,r3
    899c:	10802014 	ori	r2,r2,128
    89a0:	8080030d 	sth	r2,12(r16)
    89a4:	b709883a 	add	r4,r22,fp
    89a8:	a707c83a 	sub	r3,r20,fp
    89ac:	85800415 	stw	r22,16(r16)
    89b0:	85000515 	stw	r20,20(r16)
    89b4:	81000015 	stw	r4,0(r16)
    89b8:	9039883a 	mov	fp,r18
    89bc:	80c00215 	stw	r3,8(r16)
    89c0:	9029883a 	mov	r20,r18
    89c4:	902d883a 	mov	r22,r18
    89c8:	003f3d06 	br	86c0 <__alt_data_end+0xfffb2f90>
    89cc:	b80b883a 	mov	r5,r23
    89d0:	a00d883a 	mov	r6,r20
    89d4:	000902c0 	call	902c <memmove>
    89d8:	80800017 	ldw	r2,0(r16)
    89dc:	a809883a 	mov	r4,r21
    89e0:	800b883a 	mov	r5,r16
    89e4:	1505883a 	add	r2,r2,r20
    89e8:	80800015 	stw	r2,0(r16)
    89ec:	0007b400 	call	7b40 <_fflush_r>
    89f0:	103fa526 	beq	r2,zero,8888 <__alt_data_end+0xfffb3158>
    89f4:	003f5006 	br	8738 <__alt_data_end+0xfffb3008>
    89f8:	95000044 	addi	r20,r18,1
    89fc:	02000044 	movi	r8,1
    8a00:	003f5806 	br	8764 <__alt_data_end+0xfffb3034>

00008a04 <_fwalk>:
    8a04:	defff804 	addi	sp,sp,-32
    8a08:	dd400515 	stw	r21,20(sp)
    8a0c:	2540b804 	addi	r21,r4,736
    8a10:	dd800615 	stw	r22,24(sp)
    8a14:	dd000415 	stw	r20,16(sp)
    8a18:	dfc00715 	stw	ra,28(sp)
    8a1c:	dcc00315 	stw	r19,12(sp)
    8a20:	dc800215 	stw	r18,8(sp)
    8a24:	dc400115 	stw	r17,4(sp)
    8a28:	dc000015 	stw	r16,0(sp)
    8a2c:	2829883a 	mov	r20,r5
    8a30:	002d883a 	mov	r22,zero
    8a34:	000810c0 	call	810c <__sfp_lock_acquire>
    8a38:	a8001426 	beq	r21,zero,8a8c <_fwalk+0x88>
    8a3c:	04ffffc4 	movi	r19,-1
    8a40:	ac400117 	ldw	r17,4(r21)
    8a44:	ac800217 	ldw	r18,8(r21)
    8a48:	8c7fffc4 	addi	r17,r17,-1
    8a4c:	88000d16 	blt	r17,zero,8a84 <_fwalk+0x80>
    8a50:	94000304 	addi	r16,r18,12
    8a54:	94800384 	addi	r18,r18,14
    8a58:	80c0000f 	ldh	r3,0(r16)
    8a5c:	8c7fffc4 	addi	r17,r17,-1
    8a60:	813ffd04 	addi	r4,r16,-12
    8a64:	18000426 	beq	r3,zero,8a78 <_fwalk+0x74>
    8a68:	90c0000f 	ldh	r3,0(r18)
    8a6c:	1cc00226 	beq	r3,r19,8a78 <_fwalk+0x74>
    8a70:	a03ee83a 	callr	r20
    8a74:	b0acb03a 	or	r22,r22,r2
    8a78:	84001a04 	addi	r16,r16,104
    8a7c:	94801a04 	addi	r18,r18,104
    8a80:	8cfff51e 	bne	r17,r19,8a58 <__alt_data_end+0xfffb3328>
    8a84:	ad400017 	ldw	r21,0(r21)
    8a88:	a83fed1e 	bne	r21,zero,8a40 <__alt_data_end+0xfffb3310>
    8a8c:	00081100 	call	8110 <__sfp_lock_release>
    8a90:	b005883a 	mov	r2,r22
    8a94:	dfc00717 	ldw	ra,28(sp)
    8a98:	dd800617 	ldw	r22,24(sp)
    8a9c:	dd400517 	ldw	r21,20(sp)
    8aa0:	dd000417 	ldw	r20,16(sp)
    8aa4:	dcc00317 	ldw	r19,12(sp)
    8aa8:	dc800217 	ldw	r18,8(sp)
    8aac:	dc400117 	ldw	r17,4(sp)
    8ab0:	dc000017 	ldw	r16,0(sp)
    8ab4:	dec00804 	addi	sp,sp,32
    8ab8:	f800283a 	ret

00008abc <_fwalk_reent>:
    8abc:	defff804 	addi	sp,sp,-32
    8ac0:	dd400515 	stw	r21,20(sp)
    8ac4:	2540b804 	addi	r21,r4,736
    8ac8:	dd800615 	stw	r22,24(sp)
    8acc:	dd000415 	stw	r20,16(sp)
    8ad0:	dcc00315 	stw	r19,12(sp)
    8ad4:	dfc00715 	stw	ra,28(sp)
    8ad8:	dc800215 	stw	r18,8(sp)
    8adc:	dc400115 	stw	r17,4(sp)
    8ae0:	dc000015 	stw	r16,0(sp)
    8ae4:	2027883a 	mov	r19,r4
    8ae8:	2829883a 	mov	r20,r5
    8aec:	002d883a 	mov	r22,zero
    8af0:	000810c0 	call	810c <__sfp_lock_acquire>
    8af4:	a8001326 	beq	r21,zero,8b44 <_fwalk_reent+0x88>
    8af8:	04bfffc4 	movi	r18,-1
    8afc:	ac400117 	ldw	r17,4(r21)
    8b00:	ac000217 	ldw	r16,8(r21)
    8b04:	8c7fffc4 	addi	r17,r17,-1
    8b08:	88000c16 	blt	r17,zero,8b3c <_fwalk_reent+0x80>
    8b0c:	84000304 	addi	r16,r16,12
    8b10:	80c0000f 	ldh	r3,0(r16)
    8b14:	8c7fffc4 	addi	r17,r17,-1
    8b18:	817ffd04 	addi	r5,r16,-12
    8b1c:	18000526 	beq	r3,zero,8b34 <_fwalk_reent+0x78>
    8b20:	80c0008f 	ldh	r3,2(r16)
    8b24:	9809883a 	mov	r4,r19
    8b28:	1c800226 	beq	r3,r18,8b34 <_fwalk_reent+0x78>
    8b2c:	a03ee83a 	callr	r20
    8b30:	b0acb03a 	or	r22,r22,r2
    8b34:	84001a04 	addi	r16,r16,104
    8b38:	8cbff51e 	bne	r17,r18,8b10 <__alt_data_end+0xfffb33e0>
    8b3c:	ad400017 	ldw	r21,0(r21)
    8b40:	a83fee1e 	bne	r21,zero,8afc <__alt_data_end+0xfffb33cc>
    8b44:	00081100 	call	8110 <__sfp_lock_release>
    8b48:	b005883a 	mov	r2,r22
    8b4c:	dfc00717 	ldw	ra,28(sp)
    8b50:	dd800617 	ldw	r22,24(sp)
    8b54:	dd400517 	ldw	r21,20(sp)
    8b58:	dd000417 	ldw	r20,16(sp)
    8b5c:	dcc00317 	ldw	r19,12(sp)
    8b60:	dc800217 	ldw	r18,8(sp)
    8b64:	dc400117 	ldw	r17,4(sp)
    8b68:	dc000017 	ldw	r16,0(sp)
    8b6c:	dec00804 	addi	sp,sp,32
    8b70:	f800283a 	ret

00008b74 <_setlocale_r>:
    8b74:	30001b26 	beq	r6,zero,8be4 <_setlocale_r+0x70>
    8b78:	01400074 	movhi	r5,1
    8b7c:	defffe04 	addi	sp,sp,-8
    8b80:	294bf404 	addi	r5,r5,12240
    8b84:	3009883a 	mov	r4,r6
    8b88:	dc000015 	stw	r16,0(sp)
    8b8c:	dfc00115 	stw	ra,4(sp)
    8b90:	3021883a 	mov	r16,r6
    8b94:	000aa440 	call	aa44 <strcmp>
    8b98:	1000061e 	bne	r2,zero,8bb4 <_setlocale_r+0x40>
    8b9c:	00800074 	movhi	r2,1
    8ba0:	108bf304 	addi	r2,r2,12236
    8ba4:	dfc00117 	ldw	ra,4(sp)
    8ba8:	dc000017 	ldw	r16,0(sp)
    8bac:	dec00204 	addi	sp,sp,8
    8bb0:	f800283a 	ret
    8bb4:	01400074 	movhi	r5,1
    8bb8:	294bf304 	addi	r5,r5,12236
    8bbc:	8009883a 	mov	r4,r16
    8bc0:	000aa440 	call	aa44 <strcmp>
    8bc4:	103ff526 	beq	r2,zero,8b9c <__alt_data_end+0xfffb346c>
    8bc8:	01400074 	movhi	r5,1
    8bcc:	294bde04 	addi	r5,r5,12152
    8bd0:	8009883a 	mov	r4,r16
    8bd4:	000aa440 	call	aa44 <strcmp>
    8bd8:	103ff026 	beq	r2,zero,8b9c <__alt_data_end+0xfffb346c>
    8bdc:	0005883a 	mov	r2,zero
    8be0:	003ff006 	br	8ba4 <__alt_data_end+0xfffb3474>
    8be4:	00800074 	movhi	r2,1
    8be8:	108bf304 	addi	r2,r2,12236
    8bec:	f800283a 	ret

00008bf0 <__locale_charset>:
    8bf0:	00800074 	movhi	r2,1
    8bf4:	108ec404 	addi	r2,r2,15120
    8bf8:	f800283a 	ret

00008bfc <__locale_mb_cur_max>:
    8bfc:	00800074 	movhi	r2,1
    8c00:	10936004 	addi	r2,r2,19840
    8c04:	10800017 	ldw	r2,0(r2)
    8c08:	f800283a 	ret

00008c0c <__locale_msgcharset>:
    8c0c:	00800074 	movhi	r2,1
    8c10:	108ebc04 	addi	r2,r2,15088
    8c14:	f800283a 	ret

00008c18 <__locale_cjk_lang>:
    8c18:	0005883a 	mov	r2,zero
    8c1c:	f800283a 	ret

00008c20 <_localeconv_r>:
    8c20:	00800074 	movhi	r2,1
    8c24:	108ecc04 	addi	r2,r2,15152
    8c28:	f800283a 	ret

00008c2c <setlocale>:
    8c2c:	00c00074 	movhi	r3,1
    8c30:	18d35f04 	addi	r3,r3,19836
    8c34:	2005883a 	mov	r2,r4
    8c38:	19000017 	ldw	r4,0(r3)
    8c3c:	280d883a 	mov	r6,r5
    8c40:	100b883a 	mov	r5,r2
    8c44:	0008b741 	jmpi	8b74 <_setlocale_r>

00008c48 <localeconv>:
    8c48:	00800074 	movhi	r2,1
    8c4c:	108ecc04 	addi	r2,r2,15152
    8c50:	f800283a 	ret

00008c54 <__smakebuf_r>:
    8c54:	2880030b 	ldhu	r2,12(r5)
    8c58:	10c0008c 	andi	r3,r2,2
    8c5c:	1800401e 	bne	r3,zero,8d60 <__smakebuf_r+0x10c>
    8c60:	deffec04 	addi	sp,sp,-80
    8c64:	dc000f15 	stw	r16,60(sp)
    8c68:	2821883a 	mov	r16,r5
    8c6c:	2940038f 	ldh	r5,14(r5)
    8c70:	dc401015 	stw	r17,64(sp)
    8c74:	dfc01315 	stw	ra,76(sp)
    8c78:	dcc01215 	stw	r19,72(sp)
    8c7c:	dc801115 	stw	r18,68(sp)
    8c80:	2023883a 	mov	r17,r4
    8c84:	28001b16 	blt	r5,zero,8cf4 <__smakebuf_r+0xa0>
    8c88:	d80d883a 	mov	r6,sp
    8c8c:	000c4bc0 	call	c4bc <_fstat_r>
    8c90:	10001716 	blt	r2,zero,8cf0 <__smakebuf_r+0x9c>
    8c94:	d8800117 	ldw	r2,4(sp)
    8c98:	00e00014 	movui	r3,32768
    8c9c:	10bc000c 	andi	r2,r2,61440
    8ca0:	10c03726 	beq	r2,r3,8d80 <__smakebuf_r+0x12c>
    8ca4:	80c0030b 	ldhu	r3,12(r16)
    8ca8:	18c20014 	ori	r3,r3,2048
    8cac:	80c0030d 	sth	r3,12(r16)
    8cb0:	00c80004 	movi	r3,8192
    8cb4:	10c03c1e 	bne	r2,r3,8da8 <__smakebuf_r+0x154>
    8cb8:	8140038f 	ldh	r5,14(r16)
    8cbc:	8809883a 	mov	r4,r17
    8cc0:	000c5140 	call	c514 <_isatty_r>
    8cc4:	10004e26 	beq	r2,zero,8e00 <__smakebuf_r+0x1ac>
    8cc8:	8080030b 	ldhu	r2,12(r16)
    8ccc:	04c00044 	movi	r19,1
    8cd0:	80c010c4 	addi	r3,r16,67
    8cd4:	14c4b03a 	or	r2,r2,r19
    8cd8:	8080030d 	sth	r2,12(r16)
    8cdc:	80c00015 	stw	r3,0(r16)
    8ce0:	80c00415 	stw	r3,16(r16)
    8ce4:	84c00515 	stw	r19,20(r16)
    8ce8:	04810004 	movi	r18,1024
    8cec:	00000706 	br	8d0c <__smakebuf_r+0xb8>
    8cf0:	8080030b 	ldhu	r2,12(r16)
    8cf4:	10c0200c 	andi	r3,r2,128
    8cf8:	18001f1e 	bne	r3,zero,8d78 <__smakebuf_r+0x124>
    8cfc:	04810004 	movi	r18,1024
    8d00:	10820014 	ori	r2,r2,2048
    8d04:	8080030d 	sth	r2,12(r16)
    8d08:	0027883a 	mov	r19,zero
    8d0c:	8809883a 	mov	r4,r17
    8d10:	900b883a 	mov	r5,r18
    8d14:	000355c0 	call	355c <_malloc_r>
    8d18:	10002e26 	beq	r2,zero,8dd4 <__smakebuf_r+0x180>
    8d1c:	80c0030b 	ldhu	r3,12(r16)
    8d20:	01000034 	movhi	r4,0
    8d24:	211f6a04 	addi	r4,r4,32168
    8d28:	89000f15 	stw	r4,60(r17)
    8d2c:	18c02014 	ori	r3,r3,128
    8d30:	80c0030d 	sth	r3,12(r16)
    8d34:	80800015 	stw	r2,0(r16)
    8d38:	80800415 	stw	r2,16(r16)
    8d3c:	84800515 	stw	r18,20(r16)
    8d40:	98001c1e 	bne	r19,zero,8db4 <__smakebuf_r+0x160>
    8d44:	dfc01317 	ldw	ra,76(sp)
    8d48:	dcc01217 	ldw	r19,72(sp)
    8d4c:	dc801117 	ldw	r18,68(sp)
    8d50:	dc401017 	ldw	r17,64(sp)
    8d54:	dc000f17 	ldw	r16,60(sp)
    8d58:	dec01404 	addi	sp,sp,80
    8d5c:	f800283a 	ret
    8d60:	288010c4 	addi	r2,r5,67
    8d64:	28800015 	stw	r2,0(r5)
    8d68:	28800415 	stw	r2,16(r5)
    8d6c:	00800044 	movi	r2,1
    8d70:	28800515 	stw	r2,20(r5)
    8d74:	f800283a 	ret
    8d78:	04801004 	movi	r18,64
    8d7c:	003fe006 	br	8d00 <__alt_data_end+0xfffb35d0>
    8d80:	81000a17 	ldw	r4,40(r16)
    8d84:	00c00074 	movhi	r3,1
    8d88:	18ea7804 	addi	r3,r3,-22048
    8d8c:	20ffc51e 	bne	r4,r3,8ca4 <__alt_data_end+0xfffb3574>
    8d90:	80c0030b 	ldhu	r3,12(r16)
    8d94:	01010004 	movi	r4,1024
    8d98:	81001315 	stw	r4,76(r16)
    8d9c:	1906b03a 	or	r3,r3,r4
    8da0:	80c0030d 	sth	r3,12(r16)
    8da4:	003fc206 	br	8cb0 <__alt_data_end+0xfffb3580>
    8da8:	0027883a 	mov	r19,zero
    8dac:	04810004 	movi	r18,1024
    8db0:	003fd606 	br	8d0c <__alt_data_end+0xfffb35dc>
    8db4:	8140038f 	ldh	r5,14(r16)
    8db8:	8809883a 	mov	r4,r17
    8dbc:	000c5140 	call	c514 <_isatty_r>
    8dc0:	103fe026 	beq	r2,zero,8d44 <__alt_data_end+0xfffb3614>
    8dc4:	8080030b 	ldhu	r2,12(r16)
    8dc8:	10800054 	ori	r2,r2,1
    8dcc:	8080030d 	sth	r2,12(r16)
    8dd0:	003fdc06 	br	8d44 <__alt_data_end+0xfffb3614>
    8dd4:	8080030b 	ldhu	r2,12(r16)
    8dd8:	10c0800c 	andi	r3,r2,512
    8ddc:	183fd91e 	bne	r3,zero,8d44 <__alt_data_end+0xfffb3614>
    8de0:	10800094 	ori	r2,r2,2
    8de4:	80c010c4 	addi	r3,r16,67
    8de8:	8080030d 	sth	r2,12(r16)
    8dec:	00800044 	movi	r2,1
    8df0:	80c00015 	stw	r3,0(r16)
    8df4:	80c00415 	stw	r3,16(r16)
    8df8:	80800515 	stw	r2,20(r16)
    8dfc:	003fd106 	br	8d44 <__alt_data_end+0xfffb3614>
    8e00:	04c00044 	movi	r19,1
    8e04:	04810004 	movi	r18,1024
    8e08:	003fc006 	br	8d0c <__alt_data_end+0xfffb35dc>

00008e0c <memchr>:
    8e0c:	208000cc 	andi	r2,r4,3
    8e10:	280f883a 	mov	r7,r5
    8e14:	10003526 	beq	r2,zero,8eec <memchr+0xe0>
    8e18:	30bfffc4 	addi	r2,r6,-1
    8e1c:	30001b26 	beq	r6,zero,8e8c <memchr+0x80>
    8e20:	21800003 	ldbu	r6,0(r4)
    8e24:	28c03fcc 	andi	r3,r5,255
    8e28:	30c01a26 	beq	r6,r3,8e94 <memchr+0x88>
    8e2c:	180d883a 	mov	r6,r3
    8e30:	00000406 	br	8e44 <memchr+0x38>
    8e34:	10001526 	beq	r2,zero,8e8c <memchr+0x80>
    8e38:	20c00003 	ldbu	r3,0(r4)
    8e3c:	10bfffc4 	addi	r2,r2,-1
    8e40:	19801426 	beq	r3,r6,8e94 <memchr+0x88>
    8e44:	21000044 	addi	r4,r4,1
    8e48:	20c000cc 	andi	r3,r4,3
    8e4c:	183ff91e 	bne	r3,zero,8e34 <__alt_data_end+0xfffb3704>
    8e50:	024000c4 	movi	r9,3
    8e54:	48801136 	bltu	r9,r2,8e9c <memchr+0x90>
    8e58:	10000c26 	beq	r2,zero,8e8c <memchr+0x80>
    8e5c:	20c00003 	ldbu	r3,0(r4)
    8e60:	29403fcc 	andi	r5,r5,255
    8e64:	19400b26 	beq	r3,r5,8e94 <memchr+0x88>
    8e68:	20c00044 	addi	r3,r4,1
    8e6c:	2085883a 	add	r2,r4,r2
    8e70:	39803fcc 	andi	r6,r7,255
    8e74:	00000306 	br	8e84 <memchr+0x78>
    8e78:	18c00044 	addi	r3,r3,1
    8e7c:	197fffc3 	ldbu	r5,-1(r3)
    8e80:	29800426 	beq	r5,r6,8e94 <memchr+0x88>
    8e84:	1809883a 	mov	r4,r3
    8e88:	18bffb1e 	bne	r3,r2,8e78 <__alt_data_end+0xfffb3748>
    8e8c:	0005883a 	mov	r2,zero
    8e90:	f800283a 	ret
    8e94:	2005883a 	mov	r2,r4
    8e98:	f800283a 	ret
    8e9c:	28c03fcc 	andi	r3,r5,255
    8ea0:	1810923a 	slli	r8,r3,8
    8ea4:	02ffbff4 	movhi	r11,65279
    8ea8:	02a02074 	movhi	r10,32897
    8eac:	40c6b03a 	or	r3,r8,r3
    8eb0:	1810943a 	slli	r8,r3,16
    8eb4:	5affbfc4 	addi	r11,r11,-257
    8eb8:	52a02004 	addi	r10,r10,-32640
    8ebc:	40d0b03a 	or	r8,r8,r3
    8ec0:	20c00017 	ldw	r3,0(r4)
    8ec4:	40c6f03a 	xor	r3,r8,r3
    8ec8:	1acd883a 	add	r6,r3,r11
    8ecc:	00c6303a 	nor	r3,zero,r3
    8ed0:	30c6703a 	and	r3,r6,r3
    8ed4:	1a86703a 	and	r3,r3,r10
    8ed8:	183fdf1e 	bne	r3,zero,8e58 <__alt_data_end+0xfffb3728>
    8edc:	10bfff04 	addi	r2,r2,-4
    8ee0:	21000104 	addi	r4,r4,4
    8ee4:	48bff636 	bltu	r9,r2,8ec0 <__alt_data_end+0xfffb3790>
    8ee8:	003fdb06 	br	8e58 <__alt_data_end+0xfffb3728>
    8eec:	3005883a 	mov	r2,r6
    8ef0:	003fd706 	br	8e50 <__alt_data_end+0xfffb3720>

00008ef4 <memcpy>:
    8ef4:	deffff04 	addi	sp,sp,-4
    8ef8:	dc000015 	stw	r16,0(sp)
    8efc:	00c003c4 	movi	r3,15
    8f00:	2005883a 	mov	r2,r4
    8f04:	1980432e 	bgeu	r3,r6,9014 <memcpy+0x120>
    8f08:	2146b03a 	or	r3,r4,r5
    8f0c:	18c000cc 	andi	r3,r3,3
    8f10:	1800421e 	bne	r3,zero,901c <memcpy+0x128>
    8f14:	343ffc04 	addi	r16,r6,-16
    8f18:	8020d13a 	srli	r16,r16,4
    8f1c:	28c00104 	addi	r3,r5,4
    8f20:	23400104 	addi	r13,r4,4
    8f24:	801e913a 	slli	r15,r16,4
    8f28:	2b000204 	addi	r12,r5,8
    8f2c:	22c00204 	addi	r11,r4,8
    8f30:	7bc00504 	addi	r15,r15,20
    8f34:	2a800304 	addi	r10,r5,12
    8f38:	22400304 	addi	r9,r4,12
    8f3c:	2bdf883a 	add	r15,r5,r15
    8f40:	2811883a 	mov	r8,r5
    8f44:	200f883a 	mov	r7,r4
    8f48:	41000017 	ldw	r4,0(r8)
    8f4c:	39c00404 	addi	r7,r7,16
    8f50:	18c00404 	addi	r3,r3,16
    8f54:	393ffc15 	stw	r4,-16(r7)
    8f58:	1bbffc17 	ldw	r14,-16(r3)
    8f5c:	6b400404 	addi	r13,r13,16
    8f60:	5ac00404 	addi	r11,r11,16
    8f64:	6bbffc15 	stw	r14,-16(r13)
    8f68:	63800017 	ldw	r14,0(r12)
    8f6c:	4a400404 	addi	r9,r9,16
    8f70:	42000404 	addi	r8,r8,16
    8f74:	5bbffc15 	stw	r14,-16(r11)
    8f78:	53800017 	ldw	r14,0(r10)
    8f7c:	63000404 	addi	r12,r12,16
    8f80:	52800404 	addi	r10,r10,16
    8f84:	4bbffc15 	stw	r14,-16(r9)
    8f88:	1bffef1e 	bne	r3,r15,8f48 <__alt_data_end+0xfffb3818>
    8f8c:	81c00044 	addi	r7,r16,1
    8f90:	380e913a 	slli	r7,r7,4
    8f94:	310003cc 	andi	r4,r6,15
    8f98:	02c000c4 	movi	r11,3
    8f9c:	11c7883a 	add	r3,r2,r7
    8fa0:	29cb883a 	add	r5,r5,r7
    8fa4:	59001f2e 	bgeu	r11,r4,9024 <memcpy+0x130>
    8fa8:	1813883a 	mov	r9,r3
    8fac:	2811883a 	mov	r8,r5
    8fb0:	200f883a 	mov	r7,r4
    8fb4:	42800017 	ldw	r10,0(r8)
    8fb8:	4a400104 	addi	r9,r9,4
    8fbc:	39ffff04 	addi	r7,r7,-4
    8fc0:	4abfff15 	stw	r10,-4(r9)
    8fc4:	42000104 	addi	r8,r8,4
    8fc8:	59fffa36 	bltu	r11,r7,8fb4 <__alt_data_end+0xfffb3884>
    8fcc:	213fff04 	addi	r4,r4,-4
    8fd0:	2008d0ba 	srli	r4,r4,2
    8fd4:	318000cc 	andi	r6,r6,3
    8fd8:	21000044 	addi	r4,r4,1
    8fdc:	2109883a 	add	r4,r4,r4
    8fe0:	2109883a 	add	r4,r4,r4
    8fe4:	1907883a 	add	r3,r3,r4
    8fe8:	290b883a 	add	r5,r5,r4
    8fec:	30000626 	beq	r6,zero,9008 <memcpy+0x114>
    8ff0:	198d883a 	add	r6,r3,r6
    8ff4:	29c00003 	ldbu	r7,0(r5)
    8ff8:	18c00044 	addi	r3,r3,1
    8ffc:	29400044 	addi	r5,r5,1
    9000:	19ffffc5 	stb	r7,-1(r3)
    9004:	19bffb1e 	bne	r3,r6,8ff4 <__alt_data_end+0xfffb38c4>
    9008:	dc000017 	ldw	r16,0(sp)
    900c:	dec00104 	addi	sp,sp,4
    9010:	f800283a 	ret
    9014:	2007883a 	mov	r3,r4
    9018:	003ff406 	br	8fec <__alt_data_end+0xfffb38bc>
    901c:	2007883a 	mov	r3,r4
    9020:	003ff306 	br	8ff0 <__alt_data_end+0xfffb38c0>
    9024:	200d883a 	mov	r6,r4
    9028:	003ff006 	br	8fec <__alt_data_end+0xfffb38bc>

0000902c <memmove>:
    902c:	2005883a 	mov	r2,r4
    9030:	29000b2e 	bgeu	r5,r4,9060 <memmove+0x34>
    9034:	298f883a 	add	r7,r5,r6
    9038:	21c0092e 	bgeu	r4,r7,9060 <memmove+0x34>
    903c:	2187883a 	add	r3,r4,r6
    9040:	198bc83a 	sub	r5,r3,r6
    9044:	30004b26 	beq	r6,zero,9174 <memmove+0x148>
    9048:	39ffffc4 	addi	r7,r7,-1
    904c:	39000003 	ldbu	r4,0(r7)
    9050:	18ffffc4 	addi	r3,r3,-1
    9054:	19000005 	stb	r4,0(r3)
    9058:	197ffb1e 	bne	r3,r5,9048 <__alt_data_end+0xfffb3918>
    905c:	f800283a 	ret
    9060:	00c003c4 	movi	r3,15
    9064:	1980412e 	bgeu	r3,r6,916c <memmove+0x140>
    9068:	1146b03a 	or	r3,r2,r5
    906c:	18c000cc 	andi	r3,r3,3
    9070:	1800411e 	bne	r3,zero,9178 <memmove+0x14c>
    9074:	33fffc04 	addi	r15,r6,-16
    9078:	781ed13a 	srli	r15,r15,4
    907c:	28c00104 	addi	r3,r5,4
    9080:	13400104 	addi	r13,r2,4
    9084:	781c913a 	slli	r14,r15,4
    9088:	2b000204 	addi	r12,r5,8
    908c:	12c00204 	addi	r11,r2,8
    9090:	73800504 	addi	r14,r14,20
    9094:	2a800304 	addi	r10,r5,12
    9098:	12400304 	addi	r9,r2,12
    909c:	2b9d883a 	add	r14,r5,r14
    90a0:	2811883a 	mov	r8,r5
    90a4:	100f883a 	mov	r7,r2
    90a8:	41000017 	ldw	r4,0(r8)
    90ac:	39c00404 	addi	r7,r7,16
    90b0:	18c00404 	addi	r3,r3,16
    90b4:	393ffc15 	stw	r4,-16(r7)
    90b8:	193ffc17 	ldw	r4,-16(r3)
    90bc:	6b400404 	addi	r13,r13,16
    90c0:	5ac00404 	addi	r11,r11,16
    90c4:	693ffc15 	stw	r4,-16(r13)
    90c8:	61000017 	ldw	r4,0(r12)
    90cc:	4a400404 	addi	r9,r9,16
    90d0:	42000404 	addi	r8,r8,16
    90d4:	593ffc15 	stw	r4,-16(r11)
    90d8:	51000017 	ldw	r4,0(r10)
    90dc:	63000404 	addi	r12,r12,16
    90e0:	52800404 	addi	r10,r10,16
    90e4:	493ffc15 	stw	r4,-16(r9)
    90e8:	1bbfef1e 	bne	r3,r14,90a8 <__alt_data_end+0xfffb3978>
    90ec:	79000044 	addi	r4,r15,1
    90f0:	2008913a 	slli	r4,r4,4
    90f4:	328003cc 	andi	r10,r6,15
    90f8:	02c000c4 	movi	r11,3
    90fc:	1107883a 	add	r3,r2,r4
    9100:	290b883a 	add	r5,r5,r4
    9104:	5a801e2e 	bgeu	r11,r10,9180 <memmove+0x154>
    9108:	1813883a 	mov	r9,r3
    910c:	2811883a 	mov	r8,r5
    9110:	500f883a 	mov	r7,r10
    9114:	41000017 	ldw	r4,0(r8)
    9118:	4a400104 	addi	r9,r9,4
    911c:	39ffff04 	addi	r7,r7,-4
    9120:	493fff15 	stw	r4,-4(r9)
    9124:	42000104 	addi	r8,r8,4
    9128:	59fffa36 	bltu	r11,r7,9114 <__alt_data_end+0xfffb39e4>
    912c:	513fff04 	addi	r4,r10,-4
    9130:	2008d0ba 	srli	r4,r4,2
    9134:	318000cc 	andi	r6,r6,3
    9138:	21000044 	addi	r4,r4,1
    913c:	2109883a 	add	r4,r4,r4
    9140:	2109883a 	add	r4,r4,r4
    9144:	1907883a 	add	r3,r3,r4
    9148:	290b883a 	add	r5,r5,r4
    914c:	30000926 	beq	r6,zero,9174 <memmove+0x148>
    9150:	198d883a 	add	r6,r3,r6
    9154:	29c00003 	ldbu	r7,0(r5)
    9158:	18c00044 	addi	r3,r3,1
    915c:	29400044 	addi	r5,r5,1
    9160:	19ffffc5 	stb	r7,-1(r3)
    9164:	19bffb1e 	bne	r3,r6,9154 <__alt_data_end+0xfffb3a24>
    9168:	f800283a 	ret
    916c:	1007883a 	mov	r3,r2
    9170:	003ff606 	br	914c <__alt_data_end+0xfffb3a1c>
    9174:	f800283a 	ret
    9178:	1007883a 	mov	r3,r2
    917c:	003ff406 	br	9150 <__alt_data_end+0xfffb3a20>
    9180:	500d883a 	mov	r6,r10
    9184:	003ff106 	br	914c <__alt_data_end+0xfffb3a1c>

00009188 <memset>:
    9188:	20c000cc 	andi	r3,r4,3
    918c:	2005883a 	mov	r2,r4
    9190:	18004326 	beq	r3,zero,92a0 <memset+0x118>
    9194:	31ffffc4 	addi	r7,r6,-1
    9198:	30004026 	beq	r6,zero,929c <memset+0x114>
    919c:	2813883a 	mov	r9,r5
    91a0:	200d883a 	mov	r6,r4
    91a4:	2007883a 	mov	r3,r4
    91a8:	00000406 	br	91bc <memset+0x34>
    91ac:	3a3fffc4 	addi	r8,r7,-1
    91b0:	31800044 	addi	r6,r6,1
    91b4:	38003926 	beq	r7,zero,929c <memset+0x114>
    91b8:	400f883a 	mov	r7,r8
    91bc:	18c00044 	addi	r3,r3,1
    91c0:	32400005 	stb	r9,0(r6)
    91c4:	1a0000cc 	andi	r8,r3,3
    91c8:	403ff81e 	bne	r8,zero,91ac <__alt_data_end+0xfffb3a7c>
    91cc:	010000c4 	movi	r4,3
    91d0:	21c02d2e 	bgeu	r4,r7,9288 <memset+0x100>
    91d4:	29803fcc 	andi	r6,r5,255
    91d8:	3008923a 	slli	r4,r6,8
    91dc:	218cb03a 	or	r6,r4,r6
    91e0:	3008943a 	slli	r4,r6,16
    91e4:	218cb03a 	or	r6,r4,r6
    91e8:	010003c4 	movi	r4,15
    91ec:	21c0182e 	bgeu	r4,r7,9250 <memset+0xc8>
    91f0:	3b3ffc04 	addi	r12,r7,-16
    91f4:	6018d13a 	srli	r12,r12,4
    91f8:	1a000104 	addi	r8,r3,4
    91fc:	1ac00204 	addi	r11,r3,8
    9200:	6008913a 	slli	r4,r12,4
    9204:	1a800304 	addi	r10,r3,12
    9208:	1813883a 	mov	r9,r3
    920c:	21000504 	addi	r4,r4,20
    9210:	1909883a 	add	r4,r3,r4
    9214:	49800015 	stw	r6,0(r9)
    9218:	41800015 	stw	r6,0(r8)
    921c:	59800015 	stw	r6,0(r11)
    9220:	51800015 	stw	r6,0(r10)
    9224:	42000404 	addi	r8,r8,16
    9228:	4a400404 	addi	r9,r9,16
    922c:	5ac00404 	addi	r11,r11,16
    9230:	52800404 	addi	r10,r10,16
    9234:	413ff71e 	bne	r8,r4,9214 <__alt_data_end+0xfffb3ae4>
    9238:	63000044 	addi	r12,r12,1
    923c:	6018913a 	slli	r12,r12,4
    9240:	39c003cc 	andi	r7,r7,15
    9244:	010000c4 	movi	r4,3
    9248:	1b07883a 	add	r3,r3,r12
    924c:	21c00e2e 	bgeu	r4,r7,9288 <memset+0x100>
    9250:	1813883a 	mov	r9,r3
    9254:	3811883a 	mov	r8,r7
    9258:	010000c4 	movi	r4,3
    925c:	49800015 	stw	r6,0(r9)
    9260:	423fff04 	addi	r8,r8,-4
    9264:	4a400104 	addi	r9,r9,4
    9268:	223ffc36 	bltu	r4,r8,925c <__alt_data_end+0xfffb3b2c>
    926c:	393fff04 	addi	r4,r7,-4
    9270:	2008d0ba 	srli	r4,r4,2
    9274:	39c000cc 	andi	r7,r7,3
    9278:	21000044 	addi	r4,r4,1
    927c:	2109883a 	add	r4,r4,r4
    9280:	2109883a 	add	r4,r4,r4
    9284:	1907883a 	add	r3,r3,r4
    9288:	38000426 	beq	r7,zero,929c <memset+0x114>
    928c:	19cf883a 	add	r7,r3,r7
    9290:	19400005 	stb	r5,0(r3)
    9294:	18c00044 	addi	r3,r3,1
    9298:	19fffd1e 	bne	r3,r7,9290 <__alt_data_end+0xfffb3b60>
    929c:	f800283a 	ret
    92a0:	2007883a 	mov	r3,r4
    92a4:	300f883a 	mov	r7,r6
    92a8:	003fc806 	br	91cc <__alt_data_end+0xfffb3a9c>

000092ac <_Balloc>:
    92ac:	20801317 	ldw	r2,76(r4)
    92b0:	defffc04 	addi	sp,sp,-16
    92b4:	dc400115 	stw	r17,4(sp)
    92b8:	dc000015 	stw	r16,0(sp)
    92bc:	dfc00315 	stw	ra,12(sp)
    92c0:	dc800215 	stw	r18,8(sp)
    92c4:	2023883a 	mov	r17,r4
    92c8:	2821883a 	mov	r16,r5
    92cc:	10000f26 	beq	r2,zero,930c <_Balloc+0x60>
    92d0:	8407883a 	add	r3,r16,r16
    92d4:	18c7883a 	add	r3,r3,r3
    92d8:	10c7883a 	add	r3,r2,r3
    92dc:	18800017 	ldw	r2,0(r3)
    92e0:	10001126 	beq	r2,zero,9328 <_Balloc+0x7c>
    92e4:	11000017 	ldw	r4,0(r2)
    92e8:	19000015 	stw	r4,0(r3)
    92ec:	10000415 	stw	zero,16(r2)
    92f0:	10000315 	stw	zero,12(r2)
    92f4:	dfc00317 	ldw	ra,12(sp)
    92f8:	dc800217 	ldw	r18,8(sp)
    92fc:	dc400117 	ldw	r17,4(sp)
    9300:	dc000017 	ldw	r16,0(sp)
    9304:	dec00404 	addi	sp,sp,16
    9308:	f800283a 	ret
    930c:	01400104 	movi	r5,4
    9310:	01800844 	movi	r6,33
    9314:	000c0f40 	call	c0f4 <_calloc_r>
    9318:	88801315 	stw	r2,76(r17)
    931c:	103fec1e 	bne	r2,zero,92d0 <__alt_data_end+0xfffb3ba0>
    9320:	0005883a 	mov	r2,zero
    9324:	003ff306 	br	92f4 <__alt_data_end+0xfffb3bc4>
    9328:	01400044 	movi	r5,1
    932c:	2c24983a 	sll	r18,r5,r16
    9330:	8809883a 	mov	r4,r17
    9334:	91800144 	addi	r6,r18,5
    9338:	318d883a 	add	r6,r6,r6
    933c:	318d883a 	add	r6,r6,r6
    9340:	000c0f40 	call	c0f4 <_calloc_r>
    9344:	103ff626 	beq	r2,zero,9320 <__alt_data_end+0xfffb3bf0>
    9348:	14000115 	stw	r16,4(r2)
    934c:	14800215 	stw	r18,8(r2)
    9350:	003fe606 	br	92ec <__alt_data_end+0xfffb3bbc>

00009354 <_Bfree>:
    9354:	28000826 	beq	r5,zero,9378 <_Bfree+0x24>
    9358:	28c00117 	ldw	r3,4(r5)
    935c:	20801317 	ldw	r2,76(r4)
    9360:	18c7883a 	add	r3,r3,r3
    9364:	18c7883a 	add	r3,r3,r3
    9368:	10c5883a 	add	r2,r2,r3
    936c:	10c00017 	ldw	r3,0(r2)
    9370:	28c00015 	stw	r3,0(r5)
    9374:	11400015 	stw	r5,0(r2)
    9378:	f800283a 	ret

0000937c <__multadd>:
    937c:	defff704 	addi	sp,sp,-36
    9380:	dc800215 	stw	r18,8(sp)
    9384:	2c800417 	ldw	r18,16(r5)
    9388:	ddc00715 	stw	r23,28(sp)
    938c:	dd800615 	stw	r22,24(sp)
    9390:	dd000415 	stw	r20,16(sp)
    9394:	dcc00315 	stw	r19,12(sp)
    9398:	dc400115 	stw	r17,4(sp)
    939c:	dc000015 	stw	r16,0(sp)
    93a0:	dfc00815 	stw	ra,32(sp)
    93a4:	dd400515 	stw	r21,20(sp)
    93a8:	2827883a 	mov	r19,r5
    93ac:	2029883a 	mov	r20,r4
    93b0:	3023883a 	mov	r17,r6
    93b4:	3821883a 	mov	r16,r7
    93b8:	2d800504 	addi	r22,r5,20
    93bc:	002f883a 	mov	r23,zero
    93c0:	b5400017 	ldw	r21,0(r22)
    93c4:	880b883a 	mov	r5,r17
    93c8:	bdc00044 	addi	r23,r23,1
    93cc:	a93fffcc 	andi	r4,r21,65535
    93d0:	000d6f80 	call	d6f8 <__mulsi3>
    93d4:	1421883a 	add	r16,r2,r16
    93d8:	a808d43a 	srli	r4,r21,16
    93dc:	802ad43a 	srli	r21,r16,16
    93e0:	880b883a 	mov	r5,r17
    93e4:	000d6f80 	call	d6f8 <__mulsi3>
    93e8:	a88f883a 	add	r7,r21,r2
    93ec:	3804943a 	slli	r2,r7,16
    93f0:	80ffffcc 	andi	r3,r16,65535
    93f4:	b5800104 	addi	r22,r22,4
    93f8:	10c7883a 	add	r3,r2,r3
    93fc:	b0ffff15 	stw	r3,-4(r22)
    9400:	3820d43a 	srli	r16,r7,16
    9404:	bcbfee16 	blt	r23,r18,93c0 <__alt_data_end+0xfffb3c90>
    9408:	80000926 	beq	r16,zero,9430 <__multadd+0xb4>
    940c:	98800217 	ldw	r2,8(r19)
    9410:	9080130e 	bge	r18,r2,9460 <__multadd+0xe4>
    9414:	90800144 	addi	r2,r18,5
    9418:	1085883a 	add	r2,r2,r2
    941c:	1085883a 	add	r2,r2,r2
    9420:	9885883a 	add	r2,r19,r2
    9424:	14000015 	stw	r16,0(r2)
    9428:	94800044 	addi	r18,r18,1
    942c:	9c800415 	stw	r18,16(r19)
    9430:	9805883a 	mov	r2,r19
    9434:	dfc00817 	ldw	ra,32(sp)
    9438:	ddc00717 	ldw	r23,28(sp)
    943c:	dd800617 	ldw	r22,24(sp)
    9440:	dd400517 	ldw	r21,20(sp)
    9444:	dd000417 	ldw	r20,16(sp)
    9448:	dcc00317 	ldw	r19,12(sp)
    944c:	dc800217 	ldw	r18,8(sp)
    9450:	dc400117 	ldw	r17,4(sp)
    9454:	dc000017 	ldw	r16,0(sp)
    9458:	dec00904 	addi	sp,sp,36
    945c:	f800283a 	ret
    9460:	99400117 	ldw	r5,4(r19)
    9464:	a009883a 	mov	r4,r20
    9468:	29400044 	addi	r5,r5,1
    946c:	00092ac0 	call	92ac <_Balloc>
    9470:	99800417 	ldw	r6,16(r19)
    9474:	99400304 	addi	r5,r19,12
    9478:	11000304 	addi	r4,r2,12
    947c:	31800084 	addi	r6,r6,2
    9480:	318d883a 	add	r6,r6,r6
    9484:	318d883a 	add	r6,r6,r6
    9488:	1023883a 	mov	r17,r2
    948c:	0008ef40 	call	8ef4 <memcpy>
    9490:	99000117 	ldw	r4,4(r19)
    9494:	a0c01317 	ldw	r3,76(r20)
    9498:	2109883a 	add	r4,r4,r4
    949c:	2109883a 	add	r4,r4,r4
    94a0:	1907883a 	add	r3,r3,r4
    94a4:	18800017 	ldw	r2,0(r3)
    94a8:	98800015 	stw	r2,0(r19)
    94ac:	1cc00015 	stw	r19,0(r3)
    94b0:	8827883a 	mov	r19,r17
    94b4:	003fd706 	br	9414 <__alt_data_end+0xfffb3ce4>

000094b8 <__s2b>:
    94b8:	defff904 	addi	sp,sp,-28
    94bc:	dc400115 	stw	r17,4(sp)
    94c0:	dc000015 	stw	r16,0(sp)
    94c4:	2023883a 	mov	r17,r4
    94c8:	2821883a 	mov	r16,r5
    94cc:	39000204 	addi	r4,r7,8
    94d0:	01400244 	movi	r5,9
    94d4:	dcc00315 	stw	r19,12(sp)
    94d8:	dc800215 	stw	r18,8(sp)
    94dc:	dfc00615 	stw	ra,24(sp)
    94e0:	dd400515 	stw	r21,20(sp)
    94e4:	dd000415 	stw	r20,16(sp)
    94e8:	3825883a 	mov	r18,r7
    94ec:	3027883a 	mov	r19,r6
    94f0:	00034740 	call	3474 <__divsi3>
    94f4:	00c00044 	movi	r3,1
    94f8:	000b883a 	mov	r5,zero
    94fc:	1880030e 	bge	r3,r2,950c <__s2b+0x54>
    9500:	18c7883a 	add	r3,r3,r3
    9504:	29400044 	addi	r5,r5,1
    9508:	18bffd16 	blt	r3,r2,9500 <__alt_data_end+0xfffb3dd0>
    950c:	8809883a 	mov	r4,r17
    9510:	00092ac0 	call	92ac <_Balloc>
    9514:	d8c00717 	ldw	r3,28(sp)
    9518:	10c00515 	stw	r3,20(r2)
    951c:	00c00044 	movi	r3,1
    9520:	10c00415 	stw	r3,16(r2)
    9524:	00c00244 	movi	r3,9
    9528:	1cc0210e 	bge	r3,r19,95b0 <__s2b+0xf8>
    952c:	80eb883a 	add	r21,r16,r3
    9530:	a829883a 	mov	r20,r21
    9534:	84e1883a 	add	r16,r16,r19
    9538:	a1c00007 	ldb	r7,0(r20)
    953c:	8809883a 	mov	r4,r17
    9540:	a5000044 	addi	r20,r20,1
    9544:	100b883a 	mov	r5,r2
    9548:	01800284 	movi	r6,10
    954c:	39fff404 	addi	r7,r7,-48
    9550:	000937c0 	call	937c <__multadd>
    9554:	a43ff81e 	bne	r20,r16,9538 <__alt_data_end+0xfffb3e08>
    9558:	ace1883a 	add	r16,r21,r19
    955c:	843ffe04 	addi	r16,r16,-8
    9560:	9c800a0e 	bge	r19,r18,958c <__s2b+0xd4>
    9564:	94e5c83a 	sub	r18,r18,r19
    9568:	84a5883a 	add	r18,r16,r18
    956c:	81c00007 	ldb	r7,0(r16)
    9570:	8809883a 	mov	r4,r17
    9574:	84000044 	addi	r16,r16,1
    9578:	100b883a 	mov	r5,r2
    957c:	01800284 	movi	r6,10
    9580:	39fff404 	addi	r7,r7,-48
    9584:	000937c0 	call	937c <__multadd>
    9588:	84bff81e 	bne	r16,r18,956c <__alt_data_end+0xfffb3e3c>
    958c:	dfc00617 	ldw	ra,24(sp)
    9590:	dd400517 	ldw	r21,20(sp)
    9594:	dd000417 	ldw	r20,16(sp)
    9598:	dcc00317 	ldw	r19,12(sp)
    959c:	dc800217 	ldw	r18,8(sp)
    95a0:	dc400117 	ldw	r17,4(sp)
    95a4:	dc000017 	ldw	r16,0(sp)
    95a8:	dec00704 	addi	sp,sp,28
    95ac:	f800283a 	ret
    95b0:	84000284 	addi	r16,r16,10
    95b4:	1827883a 	mov	r19,r3
    95b8:	003fe906 	br	9560 <__alt_data_end+0xfffb3e30>

000095bc <__hi0bits>:
    95bc:	20bfffec 	andhi	r2,r4,65535
    95c0:	1000141e 	bne	r2,zero,9614 <__hi0bits+0x58>
    95c4:	2008943a 	slli	r4,r4,16
    95c8:	00800404 	movi	r2,16
    95cc:	20ffc02c 	andhi	r3,r4,65280
    95d0:	1800021e 	bne	r3,zero,95dc <__hi0bits+0x20>
    95d4:	2008923a 	slli	r4,r4,8
    95d8:	10800204 	addi	r2,r2,8
    95dc:	20fc002c 	andhi	r3,r4,61440
    95e0:	1800021e 	bne	r3,zero,95ec <__hi0bits+0x30>
    95e4:	2008913a 	slli	r4,r4,4
    95e8:	10800104 	addi	r2,r2,4
    95ec:	20f0002c 	andhi	r3,r4,49152
    95f0:	1800031e 	bne	r3,zero,9600 <__hi0bits+0x44>
    95f4:	2109883a 	add	r4,r4,r4
    95f8:	10800084 	addi	r2,r2,2
    95fc:	2109883a 	add	r4,r4,r4
    9600:	20000316 	blt	r4,zero,9610 <__hi0bits+0x54>
    9604:	2110002c 	andhi	r4,r4,16384
    9608:	2000041e 	bne	r4,zero,961c <__hi0bits+0x60>
    960c:	00800804 	movi	r2,32
    9610:	f800283a 	ret
    9614:	0005883a 	mov	r2,zero
    9618:	003fec06 	br	95cc <__alt_data_end+0xfffb3e9c>
    961c:	10800044 	addi	r2,r2,1
    9620:	f800283a 	ret

00009624 <__lo0bits>:
    9624:	20c00017 	ldw	r3,0(r4)
    9628:	188001cc 	andi	r2,r3,7
    962c:	10000826 	beq	r2,zero,9650 <__lo0bits+0x2c>
    9630:	1880004c 	andi	r2,r3,1
    9634:	1000211e 	bne	r2,zero,96bc <__lo0bits+0x98>
    9638:	1880008c 	andi	r2,r3,2
    963c:	1000211e 	bne	r2,zero,96c4 <__lo0bits+0xa0>
    9640:	1806d0ba 	srli	r3,r3,2
    9644:	00800084 	movi	r2,2
    9648:	20c00015 	stw	r3,0(r4)
    964c:	f800283a 	ret
    9650:	18bfffcc 	andi	r2,r3,65535
    9654:	10001326 	beq	r2,zero,96a4 <__lo0bits+0x80>
    9658:	0005883a 	mov	r2,zero
    965c:	19403fcc 	andi	r5,r3,255
    9660:	2800021e 	bne	r5,zero,966c <__lo0bits+0x48>
    9664:	1806d23a 	srli	r3,r3,8
    9668:	10800204 	addi	r2,r2,8
    966c:	194003cc 	andi	r5,r3,15
    9670:	2800021e 	bne	r5,zero,967c <__lo0bits+0x58>
    9674:	1806d13a 	srli	r3,r3,4
    9678:	10800104 	addi	r2,r2,4
    967c:	194000cc 	andi	r5,r3,3
    9680:	2800021e 	bne	r5,zero,968c <__lo0bits+0x68>
    9684:	1806d0ba 	srli	r3,r3,2
    9688:	10800084 	addi	r2,r2,2
    968c:	1940004c 	andi	r5,r3,1
    9690:	2800081e 	bne	r5,zero,96b4 <__lo0bits+0x90>
    9694:	1806d07a 	srli	r3,r3,1
    9698:	1800051e 	bne	r3,zero,96b0 <__lo0bits+0x8c>
    969c:	00800804 	movi	r2,32
    96a0:	f800283a 	ret
    96a4:	1806d43a 	srli	r3,r3,16
    96a8:	00800404 	movi	r2,16
    96ac:	003feb06 	br	965c <__alt_data_end+0xfffb3f2c>
    96b0:	10800044 	addi	r2,r2,1
    96b4:	20c00015 	stw	r3,0(r4)
    96b8:	f800283a 	ret
    96bc:	0005883a 	mov	r2,zero
    96c0:	f800283a 	ret
    96c4:	1806d07a 	srli	r3,r3,1
    96c8:	00800044 	movi	r2,1
    96cc:	20c00015 	stw	r3,0(r4)
    96d0:	f800283a 	ret

000096d4 <__i2b>:
    96d4:	defffd04 	addi	sp,sp,-12
    96d8:	dc000015 	stw	r16,0(sp)
    96dc:	04000044 	movi	r16,1
    96e0:	dc400115 	stw	r17,4(sp)
    96e4:	2823883a 	mov	r17,r5
    96e8:	800b883a 	mov	r5,r16
    96ec:	dfc00215 	stw	ra,8(sp)
    96f0:	00092ac0 	call	92ac <_Balloc>
    96f4:	14400515 	stw	r17,20(r2)
    96f8:	14000415 	stw	r16,16(r2)
    96fc:	dfc00217 	ldw	ra,8(sp)
    9700:	dc400117 	ldw	r17,4(sp)
    9704:	dc000017 	ldw	r16,0(sp)
    9708:	dec00304 	addi	sp,sp,12
    970c:	f800283a 	ret

00009710 <__multiply>:
    9710:	deffef04 	addi	sp,sp,-68
    9714:	dc400815 	stw	r17,32(sp)
    9718:	dc000715 	stw	r16,28(sp)
    971c:	2c400417 	ldw	r17,16(r5)
    9720:	34000417 	ldw	r16,16(r6)
    9724:	dd800d15 	stw	r22,52(sp)
    9728:	dc800915 	stw	r18,36(sp)
    972c:	dfc01015 	stw	ra,64(sp)
    9730:	df000f15 	stw	fp,60(sp)
    9734:	ddc00e15 	stw	r23,56(sp)
    9738:	dd400c15 	stw	r21,48(sp)
    973c:	dd000b15 	stw	r20,44(sp)
    9740:	dcc00a15 	stw	r19,40(sp)
    9744:	2825883a 	mov	r18,r5
    9748:	302d883a 	mov	r22,r6
    974c:	8c009116 	blt	r17,r16,9994 <__multiply+0x284>
    9750:	8005883a 	mov	r2,r16
    9754:	8821883a 	mov	r16,r17
    9758:	1023883a 	mov	r17,r2
    975c:	90800217 	ldw	r2,8(r18)
    9760:	8447883a 	add	r3,r16,r17
    9764:	d8c00215 	stw	r3,8(sp)
    9768:	91400117 	ldw	r5,4(r18)
    976c:	10c0010e 	bge	r2,r3,9774 <__multiply+0x64>
    9770:	29400044 	addi	r5,r5,1
    9774:	00092ac0 	call	92ac <_Balloc>
    9778:	d8c00217 	ldw	r3,8(sp)
    977c:	d8800615 	stw	r2,24(sp)
    9780:	18eb883a 	add	r21,r3,r3
    9784:	ad6b883a 	add	r21,r21,r21
    9788:	10c00504 	addi	r3,r2,20
    978c:	1d6b883a 	add	r21,r3,r21
    9790:	d8c00115 	stw	r3,4(sp)
    9794:	dd400315 	stw	r21,12(sp)
    9798:	1805883a 	mov	r2,r3
    979c:	1d40042e 	bgeu	r3,r21,97b0 <__multiply+0xa0>
    97a0:	d8c00317 	ldw	r3,12(sp)
    97a4:	10000015 	stw	zero,0(r2)
    97a8:	10800104 	addi	r2,r2,4
    97ac:	10fffc36 	bltu	r2,r3,97a0 <__alt_data_end+0xfffb4070>
    97b0:	8c63883a 	add	r17,r17,r17
    97b4:	b5800504 	addi	r22,r22,20
    97b8:	8c63883a 	add	r17,r17,r17
    97bc:	94800504 	addi	r18,r18,20
    97c0:	8421883a 	add	r16,r16,r16
    97c4:	b463883a 	add	r17,r22,r17
    97c8:	8421883a 	add	r16,r16,r16
    97cc:	dd800015 	stw	r22,0(sp)
    97d0:	dc800415 	stw	r18,16(sp)
    97d4:	dc400515 	stw	r17,20(sp)
    97d8:	9429883a 	add	r20,r18,r16
    97dc:	b4404f2e 	bgeu	r22,r17,991c <__multiply+0x20c>
    97e0:	d8c00017 	ldw	r3,0(sp)
    97e4:	1c800017 	ldw	r18,0(r3)
    97e8:	943fffcc 	andi	r16,r18,65535
    97ec:	80001e26 	beq	r16,zero,9868 <__multiply+0x158>
    97f0:	dd800117 	ldw	r22,4(sp)
    97f4:	dd400417 	ldw	r21,16(sp)
    97f8:	0025883a 	mov	r18,zero
    97fc:	adc00017 	ldw	r23,0(r21)
    9800:	b4c00017 	ldw	r19,0(r22)
    9804:	800b883a 	mov	r5,r16
    9808:	b93fffcc 	andi	r4,r23,65535
    980c:	000d6f80 	call	d6f8 <__mulsi3>
    9810:	9c7fffcc 	andi	r17,r19,65535
    9814:	8885883a 	add	r2,r17,r2
    9818:	b808d43a 	srli	r4,r23,16
    981c:	14a3883a 	add	r17,r2,r18
    9820:	9826d43a 	srli	r19,r19,16
    9824:	8824d43a 	srli	r18,r17,16
    9828:	800b883a 	mov	r5,r16
    982c:	000d6f80 	call	d6f8 <__mulsi3>
    9830:	9885883a 	add	r2,r19,r2
    9834:	14a7883a 	add	r19,r2,r18
    9838:	88ffffcc 	andi	r3,r17,65535
    983c:	9822943a 	slli	r17,r19,16
    9840:	ad400104 	addi	r21,r21,4
    9844:	b005883a 	mov	r2,r22
    9848:	88c6b03a 	or	r3,r17,r3
    984c:	b0c00015 	stw	r3,0(r22)
    9850:	9824d43a 	srli	r18,r19,16
    9854:	b5800104 	addi	r22,r22,4
    9858:	ad3fe836 	bltu	r21,r20,97fc <__alt_data_end+0xfffb40cc>
    985c:	d8c00017 	ldw	r3,0(sp)
    9860:	14800115 	stw	r18,4(r2)
    9864:	1c800017 	ldw	r18,0(r3)
    9868:	9024d43a 	srli	r18,r18,16
    986c:	90002226 	beq	r18,zero,98f8 <__multiply+0x1e8>
    9870:	d8c00117 	ldw	r3,4(sp)
    9874:	dd800417 	ldw	r22,16(sp)
    9878:	002f883a 	mov	r23,zero
    987c:	1f000017 	ldw	fp,0(r3)
    9880:	1823883a 	mov	r17,r3
    9884:	182b883a 	mov	r21,r3
    9888:	e021883a 	mov	r16,fp
    988c:	00000106 	br	9894 <__multiply+0x184>
    9890:	982b883a 	mov	r21,r19
    9894:	b100000b 	ldhu	r4,0(r22)
    9898:	8020d43a 	srli	r16,r16,16
    989c:	900b883a 	mov	r5,r18
    98a0:	000d6f80 	call	d6f8 <__mulsi3>
    98a4:	1405883a 	add	r2,r2,r16
    98a8:	15ef883a 	add	r23,r2,r23
    98ac:	b804943a 	slli	r2,r23,16
    98b0:	e0ffffcc 	andi	r3,fp,65535
    98b4:	8c400104 	addi	r17,r17,4
    98b8:	10c6b03a 	or	r3,r2,r3
    98bc:	88ffff15 	stw	r3,-4(r17)
    98c0:	b5800104 	addi	r22,r22,4
    98c4:	b13fff17 	ldw	r4,-4(r22)
    98c8:	acc00104 	addi	r19,r21,4
    98cc:	900b883a 	mov	r5,r18
    98d0:	2008d43a 	srli	r4,r4,16
    98d4:	9c000017 	ldw	r16,0(r19)
    98d8:	000d6f80 	call	d6f8 <__mulsi3>
    98dc:	b806d43a 	srli	r3,r23,16
    98e0:	813fffcc 	andi	r4,r16,65535
    98e4:	1105883a 	add	r2,r2,r4
    98e8:	10f9883a 	add	fp,r2,r3
    98ec:	e02ed43a 	srli	r23,fp,16
    98f0:	b53fe736 	bltu	r22,r20,9890 <__alt_data_end+0xfffb4160>
    98f4:	af000115 	stw	fp,4(r21)
    98f8:	d8c00017 	ldw	r3,0(sp)
    98fc:	d9000517 	ldw	r4,20(sp)
    9900:	18c00104 	addi	r3,r3,4
    9904:	d8c00015 	stw	r3,0(sp)
    9908:	d8c00117 	ldw	r3,4(sp)
    990c:	18c00104 	addi	r3,r3,4
    9910:	d8c00115 	stw	r3,4(sp)
    9914:	d8c00017 	ldw	r3,0(sp)
    9918:	193fb136 	bltu	r3,r4,97e0 <__alt_data_end+0xfffb40b0>
    991c:	d8c00217 	ldw	r3,8(sp)
    9920:	00c00c0e 	bge	zero,r3,9954 <__multiply+0x244>
    9924:	d8c00317 	ldw	r3,12(sp)
    9928:	18bfff17 	ldw	r2,-4(r3)
    992c:	1d7fff04 	addi	r21,r3,-4
    9930:	10000326 	beq	r2,zero,9940 <__multiply+0x230>
    9934:	00000706 	br	9954 <__multiply+0x244>
    9938:	a8800017 	ldw	r2,0(r21)
    993c:	1000051e 	bne	r2,zero,9954 <__multiply+0x244>
    9940:	d8c00217 	ldw	r3,8(sp)
    9944:	ad7fff04 	addi	r21,r21,-4
    9948:	18ffffc4 	addi	r3,r3,-1
    994c:	d8c00215 	stw	r3,8(sp)
    9950:	183ff91e 	bne	r3,zero,9938 <__alt_data_end+0xfffb4208>
    9954:	d8c00617 	ldw	r3,24(sp)
    9958:	d9000217 	ldw	r4,8(sp)
    995c:	1805883a 	mov	r2,r3
    9960:	19000415 	stw	r4,16(r3)
    9964:	dfc01017 	ldw	ra,64(sp)
    9968:	df000f17 	ldw	fp,60(sp)
    996c:	ddc00e17 	ldw	r23,56(sp)
    9970:	dd800d17 	ldw	r22,52(sp)
    9974:	dd400c17 	ldw	r21,48(sp)
    9978:	dd000b17 	ldw	r20,44(sp)
    997c:	dcc00a17 	ldw	r19,40(sp)
    9980:	dc800917 	ldw	r18,36(sp)
    9984:	dc400817 	ldw	r17,32(sp)
    9988:	dc000717 	ldw	r16,28(sp)
    998c:	dec01104 	addi	sp,sp,68
    9990:	f800283a 	ret
    9994:	3025883a 	mov	r18,r6
    9998:	282d883a 	mov	r22,r5
    999c:	003f6f06 	br	975c <__alt_data_end+0xfffb402c>

000099a0 <__pow5mult>:
    99a0:	defffa04 	addi	sp,sp,-24
    99a4:	dcc00315 	stw	r19,12(sp)
    99a8:	dc800215 	stw	r18,8(sp)
    99ac:	dc000015 	stw	r16,0(sp)
    99b0:	dfc00515 	stw	ra,20(sp)
    99b4:	dd000415 	stw	r20,16(sp)
    99b8:	dc400115 	stw	r17,4(sp)
    99bc:	308000cc 	andi	r2,r6,3
    99c0:	3021883a 	mov	r16,r6
    99c4:	2027883a 	mov	r19,r4
    99c8:	2825883a 	mov	r18,r5
    99cc:	10002e1e 	bne	r2,zero,9a88 <__pow5mult+0xe8>
    99d0:	8021d0ba 	srai	r16,r16,2
    99d4:	80001a26 	beq	r16,zero,9a40 <__pow5mult+0xa0>
    99d8:	9c401217 	ldw	r17,72(r19)
    99dc:	8800061e 	bne	r17,zero,99f8 <__pow5mult+0x58>
    99e0:	00003406 	br	9ab4 <__pow5mult+0x114>
    99e4:	8021d07a 	srai	r16,r16,1
    99e8:	80001526 	beq	r16,zero,9a40 <__pow5mult+0xa0>
    99ec:	88800017 	ldw	r2,0(r17)
    99f0:	10001c26 	beq	r2,zero,9a64 <__pow5mult+0xc4>
    99f4:	1023883a 	mov	r17,r2
    99f8:	80c0004c 	andi	r3,r16,1
    99fc:	183ff926 	beq	r3,zero,99e4 <__alt_data_end+0xfffb42b4>
    9a00:	900b883a 	mov	r5,r18
    9a04:	880d883a 	mov	r6,r17
    9a08:	9809883a 	mov	r4,r19
    9a0c:	00097100 	call	9710 <__multiply>
    9a10:	90001b26 	beq	r18,zero,9a80 <__pow5mult+0xe0>
    9a14:	91c00117 	ldw	r7,4(r18)
    9a18:	98c01317 	ldw	r3,76(r19)
    9a1c:	8021d07a 	srai	r16,r16,1
    9a20:	39cf883a 	add	r7,r7,r7
    9a24:	39cf883a 	add	r7,r7,r7
    9a28:	19c7883a 	add	r3,r3,r7
    9a2c:	19000017 	ldw	r4,0(r3)
    9a30:	91000015 	stw	r4,0(r18)
    9a34:	1c800015 	stw	r18,0(r3)
    9a38:	1025883a 	mov	r18,r2
    9a3c:	803feb1e 	bne	r16,zero,99ec <__alt_data_end+0xfffb42bc>
    9a40:	9005883a 	mov	r2,r18
    9a44:	dfc00517 	ldw	ra,20(sp)
    9a48:	dd000417 	ldw	r20,16(sp)
    9a4c:	dcc00317 	ldw	r19,12(sp)
    9a50:	dc800217 	ldw	r18,8(sp)
    9a54:	dc400117 	ldw	r17,4(sp)
    9a58:	dc000017 	ldw	r16,0(sp)
    9a5c:	dec00604 	addi	sp,sp,24
    9a60:	f800283a 	ret
    9a64:	9809883a 	mov	r4,r19
    9a68:	880b883a 	mov	r5,r17
    9a6c:	880d883a 	mov	r6,r17
    9a70:	00097100 	call	9710 <__multiply>
    9a74:	88800015 	stw	r2,0(r17)
    9a78:	10000015 	stw	zero,0(r2)
    9a7c:	003fdd06 	br	99f4 <__alt_data_end+0xfffb42c4>
    9a80:	1025883a 	mov	r18,r2
    9a84:	003fd706 	br	99e4 <__alt_data_end+0xfffb42b4>
    9a88:	10bfffc4 	addi	r2,r2,-1
    9a8c:	1085883a 	add	r2,r2,r2
    9a90:	00c00074 	movhi	r3,1
    9a94:	18cbf704 	addi	r3,r3,12252
    9a98:	1085883a 	add	r2,r2,r2
    9a9c:	1885883a 	add	r2,r3,r2
    9aa0:	11800017 	ldw	r6,0(r2)
    9aa4:	000f883a 	mov	r7,zero
    9aa8:	000937c0 	call	937c <__multadd>
    9aac:	1025883a 	mov	r18,r2
    9ab0:	003fc706 	br	99d0 <__alt_data_end+0xfffb42a0>
    9ab4:	05000044 	movi	r20,1
    9ab8:	9809883a 	mov	r4,r19
    9abc:	a00b883a 	mov	r5,r20
    9ac0:	00092ac0 	call	92ac <_Balloc>
    9ac4:	1023883a 	mov	r17,r2
    9ac8:	00809c44 	movi	r2,625
    9acc:	88800515 	stw	r2,20(r17)
    9ad0:	8d000415 	stw	r20,16(r17)
    9ad4:	9c401215 	stw	r17,72(r19)
    9ad8:	88000015 	stw	zero,0(r17)
    9adc:	003fc606 	br	99f8 <__alt_data_end+0xfffb42c8>

00009ae0 <__lshift>:
    9ae0:	defff904 	addi	sp,sp,-28
    9ae4:	dd000415 	stw	r20,16(sp)
    9ae8:	dcc00315 	stw	r19,12(sp)
    9aec:	3029d17a 	srai	r20,r6,5
    9af0:	2cc00417 	ldw	r19,16(r5)
    9af4:	28800217 	ldw	r2,8(r5)
    9af8:	dd400515 	stw	r21,20(sp)
    9afc:	a4e7883a 	add	r19,r20,r19
    9b00:	dc800215 	stw	r18,8(sp)
    9b04:	dc400115 	stw	r17,4(sp)
    9b08:	dc000015 	stw	r16,0(sp)
    9b0c:	dfc00615 	stw	ra,24(sp)
    9b10:	9c000044 	addi	r16,r19,1
    9b14:	2823883a 	mov	r17,r5
    9b18:	302b883a 	mov	r21,r6
    9b1c:	2025883a 	mov	r18,r4
    9b20:	29400117 	ldw	r5,4(r5)
    9b24:	1400030e 	bge	r2,r16,9b34 <__lshift+0x54>
    9b28:	1085883a 	add	r2,r2,r2
    9b2c:	29400044 	addi	r5,r5,1
    9b30:	143ffd16 	blt	r2,r16,9b28 <__alt_data_end+0xfffb43f8>
    9b34:	9009883a 	mov	r4,r18
    9b38:	00092ac0 	call	92ac <_Balloc>
    9b3c:	11c00504 	addi	r7,r2,20
    9b40:	0500090e 	bge	zero,r20,9b68 <__lshift+0x88>
    9b44:	3811883a 	mov	r8,r7
    9b48:	0007883a 	mov	r3,zero
    9b4c:	40000015 	stw	zero,0(r8)
    9b50:	18c00044 	addi	r3,r3,1
    9b54:	42000104 	addi	r8,r8,4
    9b58:	1d3ffc1e 	bne	r3,r20,9b4c <__alt_data_end+0xfffb441c>
    9b5c:	18c7883a 	add	r3,r3,r3
    9b60:	18c7883a 	add	r3,r3,r3
    9b64:	38cf883a 	add	r7,r7,r3
    9b68:	89000417 	ldw	r4,16(r17)
    9b6c:	88c00504 	addi	r3,r17,20
    9b70:	a98007cc 	andi	r6,r21,31
    9b74:	2109883a 	add	r4,r4,r4
    9b78:	2109883a 	add	r4,r4,r4
    9b7c:	1909883a 	add	r4,r3,r4
    9b80:	30002326 	beq	r6,zero,9c10 <__lshift+0x130>
    9b84:	01400804 	movi	r5,32
    9b88:	298bc83a 	sub	r5,r5,r6
    9b8c:	0013883a 	mov	r9,zero
    9b90:	1a000017 	ldw	r8,0(r3)
    9b94:	3815883a 	mov	r10,r7
    9b98:	39c00104 	addi	r7,r7,4
    9b9c:	4190983a 	sll	r8,r8,r6
    9ba0:	18c00104 	addi	r3,r3,4
    9ba4:	4a10b03a 	or	r8,r9,r8
    9ba8:	3a3fff15 	stw	r8,-4(r7)
    9bac:	1a3fff17 	ldw	r8,-4(r3)
    9bb0:	4152d83a 	srl	r9,r8,r5
    9bb4:	193ff636 	bltu	r3,r4,9b90 <__alt_data_end+0xfffb4460>
    9bb8:	52400115 	stw	r9,4(r10)
    9bbc:	48000126 	beq	r9,zero,9bc4 <__lshift+0xe4>
    9bc0:	9c000084 	addi	r16,r19,2
    9bc4:	89000117 	ldw	r4,4(r17)
    9bc8:	90c01317 	ldw	r3,76(r18)
    9bcc:	843fffc4 	addi	r16,r16,-1
    9bd0:	2109883a 	add	r4,r4,r4
    9bd4:	2109883a 	add	r4,r4,r4
    9bd8:	1907883a 	add	r3,r3,r4
    9bdc:	19000017 	ldw	r4,0(r3)
    9be0:	14000415 	stw	r16,16(r2)
    9be4:	89000015 	stw	r4,0(r17)
    9be8:	1c400015 	stw	r17,0(r3)
    9bec:	dfc00617 	ldw	ra,24(sp)
    9bf0:	dd400517 	ldw	r21,20(sp)
    9bf4:	dd000417 	ldw	r20,16(sp)
    9bf8:	dcc00317 	ldw	r19,12(sp)
    9bfc:	dc800217 	ldw	r18,8(sp)
    9c00:	dc400117 	ldw	r17,4(sp)
    9c04:	dc000017 	ldw	r16,0(sp)
    9c08:	dec00704 	addi	sp,sp,28
    9c0c:	f800283a 	ret
    9c10:	19400017 	ldw	r5,0(r3)
    9c14:	39c00104 	addi	r7,r7,4
    9c18:	18c00104 	addi	r3,r3,4
    9c1c:	397fff15 	stw	r5,-4(r7)
    9c20:	193ffb36 	bltu	r3,r4,9c10 <__alt_data_end+0xfffb44e0>
    9c24:	003fe706 	br	9bc4 <__alt_data_end+0xfffb4494>

00009c28 <__mcmp>:
    9c28:	20800417 	ldw	r2,16(r4)
    9c2c:	28c00417 	ldw	r3,16(r5)
    9c30:	10c5c83a 	sub	r2,r2,r3
    9c34:	1000111e 	bne	r2,zero,9c7c <__mcmp+0x54>
    9c38:	18c7883a 	add	r3,r3,r3
    9c3c:	18c7883a 	add	r3,r3,r3
    9c40:	21000504 	addi	r4,r4,20
    9c44:	29400504 	addi	r5,r5,20
    9c48:	20c5883a 	add	r2,r4,r3
    9c4c:	28cb883a 	add	r5,r5,r3
    9c50:	00000106 	br	9c58 <__mcmp+0x30>
    9c54:	20800a2e 	bgeu	r4,r2,9c80 <__mcmp+0x58>
    9c58:	10bfff04 	addi	r2,r2,-4
    9c5c:	297fff04 	addi	r5,r5,-4
    9c60:	11800017 	ldw	r6,0(r2)
    9c64:	28c00017 	ldw	r3,0(r5)
    9c68:	30fffa26 	beq	r6,r3,9c54 <__alt_data_end+0xfffb4524>
    9c6c:	30c00236 	bltu	r6,r3,9c78 <__mcmp+0x50>
    9c70:	00800044 	movi	r2,1
    9c74:	f800283a 	ret
    9c78:	00bfffc4 	movi	r2,-1
    9c7c:	f800283a 	ret
    9c80:	0005883a 	mov	r2,zero
    9c84:	f800283a 	ret

00009c88 <__mdiff>:
    9c88:	defffb04 	addi	sp,sp,-20
    9c8c:	dc000015 	stw	r16,0(sp)
    9c90:	2821883a 	mov	r16,r5
    9c94:	dcc00315 	stw	r19,12(sp)
    9c98:	300b883a 	mov	r5,r6
    9c9c:	2027883a 	mov	r19,r4
    9ca0:	8009883a 	mov	r4,r16
    9ca4:	dc800215 	stw	r18,8(sp)
    9ca8:	dfc00415 	stw	ra,16(sp)
    9cac:	dc400115 	stw	r17,4(sp)
    9cb0:	3025883a 	mov	r18,r6
    9cb4:	0009c280 	call	9c28 <__mcmp>
    9cb8:	10005226 	beq	r2,zero,9e04 <__mdiff+0x17c>
    9cbc:	10004c16 	blt	r2,zero,9df0 <__mdiff+0x168>
    9cc0:	0023883a 	mov	r17,zero
    9cc4:	81400117 	ldw	r5,4(r16)
    9cc8:	9809883a 	mov	r4,r19
    9ccc:	00092ac0 	call	92ac <_Balloc>
    9cd0:	83400417 	ldw	r13,16(r16)
    9cd4:	93800417 	ldw	r14,16(r18)
    9cd8:	81000504 	addi	r4,r16,20
    9cdc:	6b59883a 	add	r12,r13,r13
    9ce0:	739d883a 	add	r14,r14,r14
    9ce4:	6319883a 	add	r12,r12,r12
    9ce8:	91800504 	addi	r6,r18,20
    9cec:	739d883a 	add	r14,r14,r14
    9cf0:	14400315 	stw	r17,12(r2)
    9cf4:	2319883a 	add	r12,r4,r12
    9cf8:	339d883a 	add	r14,r6,r14
    9cfc:	12400504 	addi	r9,r2,20
    9d00:	0007883a 	mov	r3,zero
    9d04:	22000017 	ldw	r8,0(r4)
    9d08:	32800017 	ldw	r10,0(r6)
    9d0c:	4ac00104 	addi	r11,r9,4
    9d10:	41ffffcc 	andi	r7,r8,65535
    9d14:	38c7883a 	add	r3,r7,r3
    9d18:	51ffffcc 	andi	r7,r10,65535
    9d1c:	19cfc83a 	sub	r7,r3,r7
    9d20:	4010d43a 	srli	r8,r8,16
    9d24:	5014d43a 	srli	r10,r10,16
    9d28:	3807d43a 	srai	r3,r7,16
    9d2c:	39ffffcc 	andi	r7,r7,65535
    9d30:	4291c83a 	sub	r8,r8,r10
    9d34:	40c7883a 	add	r3,r8,r3
    9d38:	1810943a 	slli	r8,r3,16
    9d3c:	31800104 	addi	r6,r6,4
    9d40:	21000104 	addi	r4,r4,4
    9d44:	41ceb03a 	or	r7,r8,r7
    9d48:	49c00015 	stw	r7,0(r9)
    9d4c:	1807d43a 	srai	r3,r3,16
    9d50:	580b883a 	mov	r5,r11
    9d54:	5813883a 	mov	r9,r11
    9d58:	33bfea36 	bltu	r6,r14,9d04 <__alt_data_end+0xfffb45d4>
    9d5c:	2011883a 	mov	r8,r4
    9d60:	2300152e 	bgeu	r4,r12,9db8 <__mdiff+0x130>
    9d64:	21400017 	ldw	r5,0(r4)
    9d68:	4a400104 	addi	r9,r9,4
    9d6c:	21000104 	addi	r4,r4,4
    9d70:	29ffffcc 	andi	r7,r5,65535
    9d74:	38c7883a 	add	r3,r7,r3
    9d78:	280ad43a 	srli	r5,r5,16
    9d7c:	180dd43a 	srai	r6,r3,16
    9d80:	19ffffcc 	andi	r7,r3,65535
    9d84:	3147883a 	add	r3,r6,r5
    9d88:	180a943a 	slli	r5,r3,16
    9d8c:	1807d43a 	srai	r3,r3,16
    9d90:	29ceb03a 	or	r7,r5,r7
    9d94:	49ffff15 	stw	r7,-4(r9)
    9d98:	233ff236 	bltu	r4,r12,9d64 <__alt_data_end+0xfffb4634>
    9d9c:	0206303a 	nor	r3,zero,r8
    9da0:	1b07883a 	add	r3,r3,r12
    9da4:	1806d0ba 	srli	r3,r3,2
    9da8:	18c00044 	addi	r3,r3,1
    9dac:	18c7883a 	add	r3,r3,r3
    9db0:	18c7883a 	add	r3,r3,r3
    9db4:	58cb883a 	add	r5,r11,r3
    9db8:	28ffff04 	addi	r3,r5,-4
    9dbc:	3800041e 	bne	r7,zero,9dd0 <__mdiff+0x148>
    9dc0:	18ffff04 	addi	r3,r3,-4
    9dc4:	19000017 	ldw	r4,0(r3)
    9dc8:	6b7fffc4 	addi	r13,r13,-1
    9dcc:	203ffc26 	beq	r4,zero,9dc0 <__alt_data_end+0xfffb4690>
    9dd0:	13400415 	stw	r13,16(r2)
    9dd4:	dfc00417 	ldw	ra,16(sp)
    9dd8:	dcc00317 	ldw	r19,12(sp)
    9ddc:	dc800217 	ldw	r18,8(sp)
    9de0:	dc400117 	ldw	r17,4(sp)
    9de4:	dc000017 	ldw	r16,0(sp)
    9de8:	dec00504 	addi	sp,sp,20
    9dec:	f800283a 	ret
    9df0:	8005883a 	mov	r2,r16
    9df4:	04400044 	movi	r17,1
    9df8:	9021883a 	mov	r16,r18
    9dfc:	1025883a 	mov	r18,r2
    9e00:	003fb006 	br	9cc4 <__alt_data_end+0xfffb4594>
    9e04:	9809883a 	mov	r4,r19
    9e08:	000b883a 	mov	r5,zero
    9e0c:	00092ac0 	call	92ac <_Balloc>
    9e10:	00c00044 	movi	r3,1
    9e14:	10c00415 	stw	r3,16(r2)
    9e18:	10000515 	stw	zero,20(r2)
    9e1c:	003fed06 	br	9dd4 <__alt_data_end+0xfffb46a4>

00009e20 <__ulp>:
    9e20:	295ffc2c 	andhi	r5,r5,32752
    9e24:	00bf3034 	movhi	r2,64704
    9e28:	2887883a 	add	r3,r5,r2
    9e2c:	00c0020e 	bge	zero,r3,9e38 <__ulp+0x18>
    9e30:	0005883a 	mov	r2,zero
    9e34:	f800283a 	ret
    9e38:	00c7c83a 	sub	r3,zero,r3
    9e3c:	180bd53a 	srai	r5,r3,20
    9e40:	008004c4 	movi	r2,19
    9e44:	11400a0e 	bge	r2,r5,9e70 <__ulp+0x50>
    9e48:	00800c84 	movi	r2,50
    9e4c:	0007883a 	mov	r3,zero
    9e50:	11400516 	blt	r2,r5,9e68 <__ulp+0x48>
    9e54:	00800cc4 	movi	r2,51
    9e58:	114bc83a 	sub	r5,r2,r5
    9e5c:	00800044 	movi	r2,1
    9e60:	1144983a 	sll	r2,r2,r5
    9e64:	f800283a 	ret
    9e68:	00800044 	movi	r2,1
    9e6c:	f800283a 	ret
    9e70:	00800234 	movhi	r2,8
    9e74:	1147d83a 	sra	r3,r2,r5
    9e78:	0005883a 	mov	r2,zero
    9e7c:	f800283a 	ret

00009e80 <__b2d>:
    9e80:	defffa04 	addi	sp,sp,-24
    9e84:	dc000015 	stw	r16,0(sp)
    9e88:	24000417 	ldw	r16,16(r4)
    9e8c:	dc400115 	stw	r17,4(sp)
    9e90:	24400504 	addi	r17,r4,20
    9e94:	8421883a 	add	r16,r16,r16
    9e98:	8421883a 	add	r16,r16,r16
    9e9c:	8c21883a 	add	r16,r17,r16
    9ea0:	dc800215 	stw	r18,8(sp)
    9ea4:	84bfff17 	ldw	r18,-4(r16)
    9ea8:	dd000415 	stw	r20,16(sp)
    9eac:	dcc00315 	stw	r19,12(sp)
    9eb0:	9009883a 	mov	r4,r18
    9eb4:	2829883a 	mov	r20,r5
    9eb8:	dfc00515 	stw	ra,20(sp)
    9ebc:	00095bc0 	call	95bc <__hi0bits>
    9ec0:	00c00804 	movi	r3,32
    9ec4:	1887c83a 	sub	r3,r3,r2
    9ec8:	a0c00015 	stw	r3,0(r20)
    9ecc:	00c00284 	movi	r3,10
    9ed0:	84ffff04 	addi	r19,r16,-4
    9ed4:	18801216 	blt	r3,r2,9f20 <__b2d+0xa0>
    9ed8:	014002c4 	movi	r5,11
    9edc:	2889c83a 	sub	r4,r5,r2
    9ee0:	9106d83a 	srl	r3,r18,r4
    9ee4:	18cffc34 	orhi	r3,r3,16368
    9ee8:	8cc0282e 	bgeu	r17,r19,9f8c <__b2d+0x10c>
    9eec:	817ffe17 	ldw	r5,-8(r16)
    9ef0:	290ad83a 	srl	r5,r5,r4
    9ef4:	10800544 	addi	r2,r2,21
    9ef8:	9084983a 	sll	r2,r18,r2
    9efc:	2884b03a 	or	r2,r5,r2
    9f00:	dfc00517 	ldw	ra,20(sp)
    9f04:	dd000417 	ldw	r20,16(sp)
    9f08:	dcc00317 	ldw	r19,12(sp)
    9f0c:	dc800217 	ldw	r18,8(sp)
    9f10:	dc400117 	ldw	r17,4(sp)
    9f14:	dc000017 	ldw	r16,0(sp)
    9f18:	dec00604 	addi	sp,sp,24
    9f1c:	f800283a 	ret
    9f20:	113ffd44 	addi	r4,r2,-11
    9f24:	8cc00f2e 	bgeu	r17,r19,9f64 <__b2d+0xe4>
    9f28:	81bffe04 	addi	r6,r16,-8
    9f2c:	817ffe17 	ldw	r5,-8(r16)
    9f30:	20001326 	beq	r4,zero,9f80 <__b2d+0x100>
    9f34:	00c00ac4 	movi	r3,43
    9f38:	1885c83a 	sub	r2,r3,r2
    9f3c:	2886d83a 	srl	r3,r5,r2
    9f40:	9124983a 	sll	r18,r18,r4
    9f44:	90e4b03a 	or	r18,r18,r3
    9f48:	90cffc34 	orhi	r3,r18,16368
    9f4c:	8980112e 	bgeu	r17,r6,9f94 <__b2d+0x114>
    9f50:	81bffd17 	ldw	r6,-12(r16)
    9f54:	308cd83a 	srl	r6,r6,r2
    9f58:	2904983a 	sll	r2,r5,r4
    9f5c:	1184b03a 	or	r2,r2,r6
    9f60:	003fe706 	br	9f00 <__alt_data_end+0xfffb47d0>
    9f64:	20000526 	beq	r4,zero,9f7c <__b2d+0xfc>
    9f68:	9124983a 	sll	r18,r18,r4
    9f6c:	000d883a 	mov	r6,zero
    9f70:	000b883a 	mov	r5,zero
    9f74:	90cffc34 	orhi	r3,r18,16368
    9f78:	003ff706 	br	9f58 <__alt_data_end+0xfffb4828>
    9f7c:	000b883a 	mov	r5,zero
    9f80:	90cffc34 	orhi	r3,r18,16368
    9f84:	2805883a 	mov	r2,r5
    9f88:	003fdd06 	br	9f00 <__alt_data_end+0xfffb47d0>
    9f8c:	000b883a 	mov	r5,zero
    9f90:	003fd806 	br	9ef4 <__alt_data_end+0xfffb47c4>
    9f94:	000d883a 	mov	r6,zero
    9f98:	003fef06 	br	9f58 <__alt_data_end+0xfffb4828>

00009f9c <__d2b>:
    9f9c:	defff704 	addi	sp,sp,-36
    9fa0:	dc000215 	stw	r16,8(sp)
    9fa4:	3021883a 	mov	r16,r6
    9fa8:	dc400315 	stw	r17,12(sp)
    9fac:	8022907a 	slli	r17,r16,1
    9fb0:	dd400715 	stw	r21,28(sp)
    9fb4:	282b883a 	mov	r21,r5
    9fb8:	01400044 	movi	r5,1
    9fbc:	dd000615 	stw	r20,24(sp)
    9fc0:	dcc00515 	stw	r19,20(sp)
    9fc4:	dc800415 	stw	r18,16(sp)
    9fc8:	dfc00815 	stw	ra,32(sp)
    9fcc:	3829883a 	mov	r20,r7
    9fd0:	dc800917 	ldw	r18,36(sp)
    9fd4:	8822d57a 	srli	r17,r17,21
    9fd8:	00092ac0 	call	92ac <_Balloc>
    9fdc:	1027883a 	mov	r19,r2
    9fe0:	00800434 	movhi	r2,16
    9fe4:	10bfffc4 	addi	r2,r2,-1
    9fe8:	808c703a 	and	r6,r16,r2
    9fec:	88000126 	beq	r17,zero,9ff4 <__d2b+0x58>
    9ff0:	31800434 	orhi	r6,r6,16
    9ff4:	d9800015 	stw	r6,0(sp)
    9ff8:	a8001f26 	beq	r21,zero,a078 <__d2b+0xdc>
    9ffc:	d9000104 	addi	r4,sp,4
    a000:	dd400115 	stw	r21,4(sp)
    a004:	00096240 	call	9624 <__lo0bits>
    a008:	d8c00017 	ldw	r3,0(sp)
    a00c:	1000291e 	bne	r2,zero,a0b4 <__d2b+0x118>
    a010:	d9000117 	ldw	r4,4(sp)
    a014:	99000515 	stw	r4,20(r19)
    a018:	1820c03a 	cmpne	r16,r3,zero
    a01c:	84000044 	addi	r16,r16,1
    a020:	98c00615 	stw	r3,24(r19)
    a024:	9c000415 	stw	r16,16(r19)
    a028:	88001b1e 	bne	r17,zero,a098 <__d2b+0xfc>
    a02c:	800690ba 	slli	r3,r16,2
    a030:	10bef384 	addi	r2,r2,-1074
    a034:	a0800015 	stw	r2,0(r20)
    a038:	98c5883a 	add	r2,r19,r3
    a03c:	11000417 	ldw	r4,16(r2)
    a040:	8020917a 	slli	r16,r16,5
    a044:	00095bc0 	call	95bc <__hi0bits>
    a048:	8085c83a 	sub	r2,r16,r2
    a04c:	90800015 	stw	r2,0(r18)
    a050:	9805883a 	mov	r2,r19
    a054:	dfc00817 	ldw	ra,32(sp)
    a058:	dd400717 	ldw	r21,28(sp)
    a05c:	dd000617 	ldw	r20,24(sp)
    a060:	dcc00517 	ldw	r19,20(sp)
    a064:	dc800417 	ldw	r18,16(sp)
    a068:	dc400317 	ldw	r17,12(sp)
    a06c:	dc000217 	ldw	r16,8(sp)
    a070:	dec00904 	addi	sp,sp,36
    a074:	f800283a 	ret
    a078:	d809883a 	mov	r4,sp
    a07c:	00096240 	call	9624 <__lo0bits>
    a080:	d8c00017 	ldw	r3,0(sp)
    a084:	04000044 	movi	r16,1
    a088:	9c000415 	stw	r16,16(r19)
    a08c:	98c00515 	stw	r3,20(r19)
    a090:	10800804 	addi	r2,r2,32
    a094:	883fe526 	beq	r17,zero,a02c <__alt_data_end+0xfffb48fc>
    a098:	8c7ef344 	addi	r17,r17,-1075
    a09c:	88a3883a 	add	r17,r17,r2
    a0a0:	00c00d44 	movi	r3,53
    a0a4:	a4400015 	stw	r17,0(r20)
    a0a8:	1885c83a 	sub	r2,r3,r2
    a0ac:	90800015 	stw	r2,0(r18)
    a0b0:	003fe706 	br	a050 <__alt_data_end+0xfffb4920>
    a0b4:	01000804 	movi	r4,32
    a0b8:	2089c83a 	sub	r4,r4,r2
    a0bc:	1908983a 	sll	r4,r3,r4
    a0c0:	d9400117 	ldw	r5,4(sp)
    a0c4:	1886d83a 	srl	r3,r3,r2
    a0c8:	2148b03a 	or	r4,r4,r5
    a0cc:	99000515 	stw	r4,20(r19)
    a0d0:	d8c00015 	stw	r3,0(sp)
    a0d4:	003fd006 	br	a018 <__alt_data_end+0xfffb48e8>

0000a0d8 <__ratio>:
    a0d8:	defff904 	addi	sp,sp,-28
    a0dc:	dc400315 	stw	r17,12(sp)
    a0e0:	2823883a 	mov	r17,r5
    a0e4:	d9400104 	addi	r5,sp,4
    a0e8:	dfc00615 	stw	ra,24(sp)
    a0ec:	dcc00515 	stw	r19,20(sp)
    a0f0:	dc800415 	stw	r18,16(sp)
    a0f4:	2027883a 	mov	r19,r4
    a0f8:	dc000215 	stw	r16,8(sp)
    a0fc:	0009e800 	call	9e80 <__b2d>
    a100:	8809883a 	mov	r4,r17
    a104:	d80b883a 	mov	r5,sp
    a108:	1025883a 	mov	r18,r2
    a10c:	1821883a 	mov	r16,r3
    a110:	0009e800 	call	9e80 <__b2d>
    a114:	8a400417 	ldw	r9,16(r17)
    a118:	9a000417 	ldw	r8,16(r19)
    a11c:	100d883a 	mov	r6,r2
    a120:	d8800017 	ldw	r2,0(sp)
    a124:	4251c83a 	sub	r8,r8,r9
    a128:	4012917a 	slli	r9,r8,5
    a12c:	da000117 	ldw	r8,4(sp)
    a130:	4091c83a 	sub	r8,r8,r2
    a134:	4251883a 	add	r8,r8,r9
    a138:	02000d0e 	bge	zero,r8,a170 <__ratio+0x98>
    a13c:	4010953a 	slli	r8,r8,20
    a140:	4421883a 	add	r16,r8,r16
    a144:	9009883a 	mov	r4,r18
    a148:	800b883a 	mov	r5,r16
    a14c:	180f883a 	mov	r7,r3
    a150:	000dfbc0 	call	dfbc <__divdf3>
    a154:	dfc00617 	ldw	ra,24(sp)
    a158:	dcc00517 	ldw	r19,20(sp)
    a15c:	dc800417 	ldw	r18,16(sp)
    a160:	dc400317 	ldw	r17,12(sp)
    a164:	dc000217 	ldw	r16,8(sp)
    a168:	dec00704 	addi	sp,sp,28
    a16c:	f800283a 	ret
    a170:	4010953a 	slli	r8,r8,20
    a174:	1a07c83a 	sub	r3,r3,r8
    a178:	003ff206 	br	a144 <__alt_data_end+0xfffb4a14>

0000a17c <_mprec_log10>:
    a17c:	defffe04 	addi	sp,sp,-8
    a180:	dc000015 	stw	r16,0(sp)
    a184:	dfc00115 	stw	ra,4(sp)
    a188:	008005c4 	movi	r2,23
    a18c:	2021883a 	mov	r16,r4
    a190:	11000d0e 	bge	r2,r4,a1c8 <_mprec_log10+0x4c>
    a194:	0005883a 	mov	r2,zero
    a198:	00cffc34 	movhi	r3,16368
    a19c:	843fffc4 	addi	r16,r16,-1
    a1a0:	1009883a 	mov	r4,r2
    a1a4:	180b883a 	mov	r5,r3
    a1a8:	000d883a 	mov	r6,zero
    a1ac:	01d00934 	movhi	r7,16420
    a1b0:	000eb800 	call	eb80 <__muldf3>
    a1b4:	803ff91e 	bne	r16,zero,a19c <__alt_data_end+0xfffb4a6c>
    a1b8:	dfc00117 	ldw	ra,4(sp)
    a1bc:	dc000017 	ldw	r16,0(sp)
    a1c0:	dec00204 	addi	sp,sp,8
    a1c4:	f800283a 	ret
    a1c8:	202090fa 	slli	r16,r4,3
    a1cc:	00800074 	movhi	r2,1
    a1d0:	108c0e04 	addi	r2,r2,12344
    a1d4:	1421883a 	add	r16,r2,r16
    a1d8:	80800017 	ldw	r2,0(r16)
    a1dc:	80c00117 	ldw	r3,4(r16)
    a1e0:	dfc00117 	ldw	ra,4(sp)
    a1e4:	dc000017 	ldw	r16,0(sp)
    a1e8:	dec00204 	addi	sp,sp,8
    a1ec:	f800283a 	ret

0000a1f0 <__copybits>:
    a1f0:	297fffc4 	addi	r5,r5,-1
    a1f4:	280fd17a 	srai	r7,r5,5
    a1f8:	30c00417 	ldw	r3,16(r6)
    a1fc:	30800504 	addi	r2,r6,20
    a200:	39c00044 	addi	r7,r7,1
    a204:	18c7883a 	add	r3,r3,r3
    a208:	39cf883a 	add	r7,r7,r7
    a20c:	18c7883a 	add	r3,r3,r3
    a210:	39cf883a 	add	r7,r7,r7
    a214:	10c7883a 	add	r3,r2,r3
    a218:	21cf883a 	add	r7,r4,r7
    a21c:	10c00d2e 	bgeu	r2,r3,a254 <__copybits+0x64>
    a220:	200b883a 	mov	r5,r4
    a224:	12000017 	ldw	r8,0(r2)
    a228:	29400104 	addi	r5,r5,4
    a22c:	10800104 	addi	r2,r2,4
    a230:	2a3fff15 	stw	r8,-4(r5)
    a234:	10fffb36 	bltu	r2,r3,a224 <__alt_data_end+0xfffb4af4>
    a238:	1985c83a 	sub	r2,r3,r6
    a23c:	10bffac4 	addi	r2,r2,-21
    a240:	1004d0ba 	srli	r2,r2,2
    a244:	10800044 	addi	r2,r2,1
    a248:	1085883a 	add	r2,r2,r2
    a24c:	1085883a 	add	r2,r2,r2
    a250:	2089883a 	add	r4,r4,r2
    a254:	21c0032e 	bgeu	r4,r7,a264 <__copybits+0x74>
    a258:	20000015 	stw	zero,0(r4)
    a25c:	21000104 	addi	r4,r4,4
    a260:	21fffd36 	bltu	r4,r7,a258 <__alt_data_end+0xfffb4b28>
    a264:	f800283a 	ret

0000a268 <__any_on>:
    a268:	20c00417 	ldw	r3,16(r4)
    a26c:	2805d17a 	srai	r2,r5,5
    a270:	21000504 	addi	r4,r4,20
    a274:	18800d0e 	bge	r3,r2,a2ac <__any_on+0x44>
    a278:	18c7883a 	add	r3,r3,r3
    a27c:	18c7883a 	add	r3,r3,r3
    a280:	20c7883a 	add	r3,r4,r3
    a284:	20c0192e 	bgeu	r4,r3,a2ec <__any_on+0x84>
    a288:	18bfff17 	ldw	r2,-4(r3)
    a28c:	18ffff04 	addi	r3,r3,-4
    a290:	1000041e 	bne	r2,zero,a2a4 <__any_on+0x3c>
    a294:	20c0142e 	bgeu	r4,r3,a2e8 <__any_on+0x80>
    a298:	18ffff04 	addi	r3,r3,-4
    a29c:	19400017 	ldw	r5,0(r3)
    a2a0:	283ffc26 	beq	r5,zero,a294 <__alt_data_end+0xfffb4b64>
    a2a4:	00800044 	movi	r2,1
    a2a8:	f800283a 	ret
    a2ac:	10c00a0e 	bge	r2,r3,a2d8 <__any_on+0x70>
    a2b0:	1085883a 	add	r2,r2,r2
    a2b4:	1085883a 	add	r2,r2,r2
    a2b8:	294007cc 	andi	r5,r5,31
    a2bc:	2087883a 	add	r3,r4,r2
    a2c0:	283ff026 	beq	r5,zero,a284 <__alt_data_end+0xfffb4b54>
    a2c4:	19800017 	ldw	r6,0(r3)
    a2c8:	3144d83a 	srl	r2,r6,r5
    a2cc:	114a983a 	sll	r5,r2,r5
    a2d0:	29bff41e 	bne	r5,r6,a2a4 <__alt_data_end+0xfffb4b74>
    a2d4:	003feb06 	br	a284 <__alt_data_end+0xfffb4b54>
    a2d8:	1085883a 	add	r2,r2,r2
    a2dc:	1085883a 	add	r2,r2,r2
    a2e0:	2087883a 	add	r3,r4,r2
    a2e4:	003fe706 	br	a284 <__alt_data_end+0xfffb4b54>
    a2e8:	f800283a 	ret
    a2ec:	0005883a 	mov	r2,zero
    a2f0:	f800283a 	ret

0000a2f4 <_realloc_r>:
    a2f4:	defff604 	addi	sp,sp,-40
    a2f8:	dcc00315 	stw	r19,12(sp)
    a2fc:	dc400115 	stw	r17,4(sp)
    a300:	dfc00915 	stw	ra,36(sp)
    a304:	df000815 	stw	fp,32(sp)
    a308:	ddc00715 	stw	r23,28(sp)
    a30c:	dd800615 	stw	r22,24(sp)
    a310:	dd400515 	stw	r21,20(sp)
    a314:	dd000415 	stw	r20,16(sp)
    a318:	dc800215 	stw	r18,8(sp)
    a31c:	dc000015 	stw	r16,0(sp)
    a320:	2827883a 	mov	r19,r5
    a324:	3023883a 	mov	r17,r6
    a328:	2800bf26 	beq	r5,zero,a628 <_realloc_r+0x334>
    a32c:	2025883a 	mov	r18,r4
    a330:	00104fc0 	call	104fc <__malloc_lock>
    a334:	98ffff17 	ldw	r3,-4(r19)
    a338:	01bfff04 	movi	r6,-4
    a33c:	890002c4 	addi	r4,r17,11
    a340:	01c00584 	movi	r7,22
    a344:	9d7ffe04 	addi	r21,r19,-8
    a348:	19a0703a 	and	r16,r3,r6
    a34c:	39003f2e 	bgeu	r7,r4,a44c <_realloc_r+0x158>
    a350:	053ffe04 	movi	r20,-8
    a354:	2528703a 	and	r20,r4,r20
    a358:	a00f883a 	mov	r7,r20
    a35c:	a0008216 	blt	r20,zero,a568 <_realloc_r+0x274>
    a360:	a4408136 	bltu	r20,r17,a568 <_realloc_r+0x274>
    a364:	81c03c0e 	bge	r16,r7,a458 <_realloc_r+0x164>
    a368:	07000074 	movhi	fp,1
    a36c:	e70cb104 	addi	fp,fp,12996
    a370:	e1000217 	ldw	r4,8(fp)
    a374:	ac05883a 	add	r2,r21,r16
    a378:	2080bf26 	beq	r4,r2,a678 <_realloc_r+0x384>
    a37c:	11000117 	ldw	r4,4(r2)
    a380:	023fff84 	movi	r8,-2
    a384:	2210703a 	and	r8,r4,r8
    a388:	1211883a 	add	r8,r2,r8
    a38c:	41400117 	ldw	r5,4(r8)
    a390:	2940004c 	andi	r5,r5,1
    a394:	28004a1e 	bne	r5,zero,a4c0 <_realloc_r+0x1cc>
    a398:	017fff04 	movi	r5,-4
    a39c:	2148703a 	and	r4,r4,r5
    a3a0:	2409883a 	add	r4,r4,r16
    a3a4:	21c0ad0e 	bge	r4,r7,a65c <_realloc_r+0x368>
    a3a8:	18c0004c 	andi	r3,r3,1
    a3ac:	18007f1e 	bne	r3,zero,a5ac <_realloc_r+0x2b8>
    a3b0:	9dfffe17 	ldw	r23,-8(r19)
    a3b4:	adefc83a 	sub	r23,r21,r23
    a3b8:	bd800117 	ldw	r22,4(r23)
    a3bc:	b14a703a 	and	r5,r22,r5
    a3c0:	216d883a 	add	r22,r4,r5
    a3c4:	b1c04516 	blt	r22,r7,a4dc <_realloc_r+0x1e8>
    a3c8:	10c00317 	ldw	r3,12(r2)
    a3cc:	10800217 	ldw	r2,8(r2)
    a3d0:	81bfff04 	addi	r6,r16,-4
    a3d4:	bc400204 	addi	r17,r23,8
    a3d8:	10c00315 	stw	r3,12(r2)
    a3dc:	18800215 	stw	r2,8(r3)
    a3e0:	b9400217 	ldw	r5,8(r23)
    a3e4:	b8c00317 	ldw	r3,12(r23)
    a3e8:	00800904 	movi	r2,36
    a3ec:	28c00315 	stw	r3,12(r5)
    a3f0:	19400215 	stw	r5,8(r3)
    a3f4:	1180ef36 	bltu	r2,r6,a7b4 <_realloc_r+0x4c0>
    a3f8:	008004c4 	movi	r2,19
    a3fc:	1180da2e 	bgeu	r2,r6,a768 <_realloc_r+0x474>
    a400:	98800017 	ldw	r2,0(r19)
    a404:	b8800215 	stw	r2,8(r23)
    a408:	98800117 	ldw	r2,4(r19)
    a40c:	b8800315 	stw	r2,12(r23)
    a410:	008006c4 	movi	r2,27
    a414:	1180fc2e 	bgeu	r2,r6,a808 <_realloc_r+0x514>
    a418:	98800217 	ldw	r2,8(r19)
    a41c:	b8800415 	stw	r2,16(r23)
    a420:	98800317 	ldw	r2,12(r19)
    a424:	b8800515 	stw	r2,20(r23)
    a428:	00800904 	movi	r2,36
    a42c:	3080421e 	bne	r6,r2,a538 <_realloc_r+0x244>
    a430:	98800417 	ldw	r2,16(r19)
    a434:	9cc00604 	addi	r19,r19,24
    a438:	b8c00804 	addi	r3,r23,32
    a43c:	b8800615 	stw	r2,24(r23)
    a440:	98bfff17 	ldw	r2,-4(r19)
    a444:	b8800715 	stw	r2,28(r23)
    a448:	00003d06 	br	a540 <_realloc_r+0x24c>
    a44c:	01c00404 	movi	r7,16
    a450:	3829883a 	mov	r20,r7
    a454:	003fc206 	br	a360 <__alt_data_end+0xfffb4c30>
    a458:	9823883a 	mov	r17,r19
    a45c:	850fc83a 	sub	r7,r16,r20
    a460:	008003c4 	movi	r2,15
    a464:	18c0004c 	andi	r3,r3,1
    a468:	11c04336 	bltu	r2,r7,a578 <_realloc_r+0x284>
    a46c:	1c06b03a 	or	r3,r3,r16
    a470:	a8c00115 	stw	r3,4(r21)
    a474:	ac21883a 	add	r16,r21,r16
    a478:	80c00117 	ldw	r3,4(r16)
    a47c:	18c00054 	ori	r3,r3,1
    a480:	80c00115 	stw	r3,4(r16)
    a484:	9009883a 	mov	r4,r18
    a488:	001051c0 	call	1051c <__malloc_unlock>
    a48c:	8805883a 	mov	r2,r17
    a490:	dfc00917 	ldw	ra,36(sp)
    a494:	df000817 	ldw	fp,32(sp)
    a498:	ddc00717 	ldw	r23,28(sp)
    a49c:	dd800617 	ldw	r22,24(sp)
    a4a0:	dd400517 	ldw	r21,20(sp)
    a4a4:	dd000417 	ldw	r20,16(sp)
    a4a8:	dcc00317 	ldw	r19,12(sp)
    a4ac:	dc800217 	ldw	r18,8(sp)
    a4b0:	dc400117 	ldw	r17,4(sp)
    a4b4:	dc000017 	ldw	r16,0(sp)
    a4b8:	dec00a04 	addi	sp,sp,40
    a4bc:	f800283a 	ret
    a4c0:	18c0004c 	andi	r3,r3,1
    a4c4:	1800391e 	bne	r3,zero,a5ac <_realloc_r+0x2b8>
    a4c8:	9dfffe17 	ldw	r23,-8(r19)
    a4cc:	00bfff04 	movi	r2,-4
    a4d0:	adefc83a 	sub	r23,r21,r23
    a4d4:	b9400117 	ldw	r5,4(r23)
    a4d8:	288a703a 	and	r5,r5,r2
    a4dc:	2c2d883a 	add	r22,r5,r16
    a4e0:	b1c03216 	blt	r22,r7,a5ac <_realloc_r+0x2b8>
    a4e4:	b8800317 	ldw	r2,12(r23)
    a4e8:	b8c00217 	ldw	r3,8(r23)
    a4ec:	81bfff04 	addi	r6,r16,-4
    a4f0:	01000904 	movi	r4,36
    a4f4:	18800315 	stw	r2,12(r3)
    a4f8:	10c00215 	stw	r3,8(r2)
    a4fc:	bc400204 	addi	r17,r23,8
    a500:	2180ac36 	bltu	r4,r6,a7b4 <_realloc_r+0x4c0>
    a504:	008004c4 	movi	r2,19
    a508:	1180972e 	bgeu	r2,r6,a768 <_realloc_r+0x474>
    a50c:	98800017 	ldw	r2,0(r19)
    a510:	b8800215 	stw	r2,8(r23)
    a514:	98800117 	ldw	r2,4(r19)
    a518:	b8800315 	stw	r2,12(r23)
    a51c:	008006c4 	movi	r2,27
    a520:	1180b92e 	bgeu	r2,r6,a808 <_realloc_r+0x514>
    a524:	98800217 	ldw	r2,8(r19)
    a528:	b8800415 	stw	r2,16(r23)
    a52c:	98800317 	ldw	r2,12(r19)
    a530:	b8800515 	stw	r2,20(r23)
    a534:	313fbe26 	beq	r6,r4,a430 <__alt_data_end+0xfffb4d00>
    a538:	b8c00604 	addi	r3,r23,24
    a53c:	9cc00404 	addi	r19,r19,16
    a540:	98800017 	ldw	r2,0(r19)
    a544:	b021883a 	mov	r16,r22
    a548:	b82b883a 	mov	r21,r23
    a54c:	18800015 	stw	r2,0(r3)
    a550:	98800117 	ldw	r2,4(r19)
    a554:	18800115 	stw	r2,4(r3)
    a558:	98800217 	ldw	r2,8(r19)
    a55c:	18800215 	stw	r2,8(r3)
    a560:	b8c00117 	ldw	r3,4(r23)
    a564:	003fbd06 	br	a45c <__alt_data_end+0xfffb4d2c>
    a568:	00800304 	movi	r2,12
    a56c:	90800015 	stw	r2,0(r18)
    a570:	0005883a 	mov	r2,zero
    a574:	003fc606 	br	a490 <__alt_data_end+0xfffb4d60>
    a578:	1d06b03a 	or	r3,r3,r20
    a57c:	ad0b883a 	add	r5,r21,r20
    a580:	a8c00115 	stw	r3,4(r21)
    a584:	38800054 	ori	r2,r7,1
    a588:	28800115 	stw	r2,4(r5)
    a58c:	29cf883a 	add	r7,r5,r7
    a590:	38800117 	ldw	r2,4(r7)
    a594:	9009883a 	mov	r4,r18
    a598:	29400204 	addi	r5,r5,8
    a59c:	10800054 	ori	r2,r2,1
    a5a0:	38800115 	stw	r2,4(r7)
    a5a4:	00082700 	call	8270 <_free_r>
    a5a8:	003fb606 	br	a484 <__alt_data_end+0xfffb4d54>
    a5ac:	880b883a 	mov	r5,r17
    a5b0:	9009883a 	mov	r4,r18
    a5b4:	000355c0 	call	355c <_malloc_r>
    a5b8:	1023883a 	mov	r17,r2
    a5bc:	1000aa26 	beq	r2,zero,a868 <_realloc_r+0x574>
    a5c0:	98ffff17 	ldw	r3,-4(r19)
    a5c4:	113ffe04 	addi	r4,r2,-8
    a5c8:	00bfff84 	movi	r2,-2
    a5cc:	1884703a 	and	r2,r3,r2
    a5d0:	a885883a 	add	r2,r21,r2
    a5d4:	20808626 	beq	r4,r2,a7f0 <_realloc_r+0x4fc>
    a5d8:	81bfff04 	addi	r6,r16,-4
    a5dc:	00800904 	movi	r2,36
    a5e0:	11807036 	bltu	r2,r6,a7a4 <_realloc_r+0x4b0>
    a5e4:	00c004c4 	movi	r3,19
    a5e8:	19805636 	bltu	r3,r6,a744 <_realloc_r+0x450>
    a5ec:	8805883a 	mov	r2,r17
    a5f0:	9807883a 	mov	r3,r19
    a5f4:	19000017 	ldw	r4,0(r3)
    a5f8:	11000015 	stw	r4,0(r2)
    a5fc:	19000117 	ldw	r4,4(r3)
    a600:	11000115 	stw	r4,4(r2)
    a604:	18c00217 	ldw	r3,8(r3)
    a608:	10c00215 	stw	r3,8(r2)
    a60c:	980b883a 	mov	r5,r19
    a610:	9009883a 	mov	r4,r18
    a614:	00082700 	call	8270 <_free_r>
    a618:	9009883a 	mov	r4,r18
    a61c:	001051c0 	call	1051c <__malloc_unlock>
    a620:	8805883a 	mov	r2,r17
    a624:	003f9a06 	br	a490 <__alt_data_end+0xfffb4d60>
    a628:	300b883a 	mov	r5,r6
    a62c:	dfc00917 	ldw	ra,36(sp)
    a630:	df000817 	ldw	fp,32(sp)
    a634:	ddc00717 	ldw	r23,28(sp)
    a638:	dd800617 	ldw	r22,24(sp)
    a63c:	dd400517 	ldw	r21,20(sp)
    a640:	dd000417 	ldw	r20,16(sp)
    a644:	dcc00317 	ldw	r19,12(sp)
    a648:	dc800217 	ldw	r18,8(sp)
    a64c:	dc400117 	ldw	r17,4(sp)
    a650:	dc000017 	ldw	r16,0(sp)
    a654:	dec00a04 	addi	sp,sp,40
    a658:	000355c1 	jmpi	355c <_malloc_r>
    a65c:	11400317 	ldw	r5,12(r2)
    a660:	10800217 	ldw	r2,8(r2)
    a664:	9823883a 	mov	r17,r19
    a668:	2021883a 	mov	r16,r4
    a66c:	11400315 	stw	r5,12(r2)
    a670:	28800215 	stw	r2,8(r5)
    a674:	003f7906 	br	a45c <__alt_data_end+0xfffb4d2c>
    a678:	21000117 	ldw	r4,4(r4)
    a67c:	00bfff04 	movi	r2,-4
    a680:	a1800404 	addi	r6,r20,16
    a684:	2088703a 	and	r4,r4,r2
    a688:	2409883a 	add	r4,r4,r16
    a68c:	2180380e 	bge	r4,r6,a770 <_realloc_r+0x47c>
    a690:	18c0004c 	andi	r3,r3,1
    a694:	183fc51e 	bne	r3,zero,a5ac <__alt_data_end+0xfffb4e7c>
    a698:	9dfffe17 	ldw	r23,-8(r19)
    a69c:	adefc83a 	sub	r23,r21,r23
    a6a0:	b9400117 	ldw	r5,4(r23)
    a6a4:	288a703a 	and	r5,r5,r2
    a6a8:	216d883a 	add	r22,r4,r5
    a6ac:	b1bf8b16 	blt	r22,r6,a4dc <__alt_data_end+0xfffb4dac>
    a6b0:	b8800317 	ldw	r2,12(r23)
    a6b4:	b8c00217 	ldw	r3,8(r23)
    a6b8:	81bfff04 	addi	r6,r16,-4
    a6bc:	01000904 	movi	r4,36
    a6c0:	18800315 	stw	r2,12(r3)
    a6c4:	10c00215 	stw	r3,8(r2)
    a6c8:	bc400204 	addi	r17,r23,8
    a6cc:	21805a36 	bltu	r4,r6,a838 <_realloc_r+0x544>
    a6d0:	008004c4 	movi	r2,19
    a6d4:	1180562e 	bgeu	r2,r6,a830 <_realloc_r+0x53c>
    a6d8:	98800017 	ldw	r2,0(r19)
    a6dc:	b8800215 	stw	r2,8(r23)
    a6e0:	98800117 	ldw	r2,4(r19)
    a6e4:	b8800315 	stw	r2,12(r23)
    a6e8:	008006c4 	movi	r2,27
    a6ec:	11805636 	bltu	r2,r6,a848 <_realloc_r+0x554>
    a6f0:	b8800404 	addi	r2,r23,16
    a6f4:	9cc00204 	addi	r19,r19,8
    a6f8:	98c00017 	ldw	r3,0(r19)
    a6fc:	10c00015 	stw	r3,0(r2)
    a700:	98c00117 	ldw	r3,4(r19)
    a704:	10c00115 	stw	r3,4(r2)
    a708:	98c00217 	ldw	r3,8(r19)
    a70c:	10c00215 	stw	r3,8(r2)
    a710:	bd07883a 	add	r3,r23,r20
    a714:	b505c83a 	sub	r2,r22,r20
    a718:	e0c00215 	stw	r3,8(fp)
    a71c:	10800054 	ori	r2,r2,1
    a720:	18800115 	stw	r2,4(r3)
    a724:	b8800117 	ldw	r2,4(r23)
    a728:	9009883a 	mov	r4,r18
    a72c:	1080004c 	andi	r2,r2,1
    a730:	a0a8b03a 	or	r20,r20,r2
    a734:	bd000115 	stw	r20,4(r23)
    a738:	001051c0 	call	1051c <__malloc_unlock>
    a73c:	8805883a 	mov	r2,r17
    a740:	003f5306 	br	a490 <__alt_data_end+0xfffb4d60>
    a744:	98c00017 	ldw	r3,0(r19)
    a748:	88c00015 	stw	r3,0(r17)
    a74c:	98c00117 	ldw	r3,4(r19)
    a750:	88c00115 	stw	r3,4(r17)
    a754:	00c006c4 	movi	r3,27
    a758:	19801d36 	bltu	r3,r6,a7d0 <_realloc_r+0x4dc>
    a75c:	88800204 	addi	r2,r17,8
    a760:	98c00204 	addi	r3,r19,8
    a764:	003fa306 	br	a5f4 <__alt_data_end+0xfffb4ec4>
    a768:	8807883a 	mov	r3,r17
    a76c:	003f7406 	br	a540 <__alt_data_end+0xfffb4e10>
    a770:	ad2b883a 	add	r21,r21,r20
    a774:	2505c83a 	sub	r2,r4,r20
    a778:	e5400215 	stw	r21,8(fp)
    a77c:	10800054 	ori	r2,r2,1
    a780:	a8800115 	stw	r2,4(r21)
    a784:	98bfff17 	ldw	r2,-4(r19)
    a788:	9009883a 	mov	r4,r18
    a78c:	1080004c 	andi	r2,r2,1
    a790:	a0a8b03a 	or	r20,r20,r2
    a794:	9d3fff15 	stw	r20,-4(r19)
    a798:	001051c0 	call	1051c <__malloc_unlock>
    a79c:	9805883a 	mov	r2,r19
    a7a0:	003f3b06 	br	a490 <__alt_data_end+0xfffb4d60>
    a7a4:	8809883a 	mov	r4,r17
    a7a8:	980b883a 	mov	r5,r19
    a7ac:	000902c0 	call	902c <memmove>
    a7b0:	003f9606 	br	a60c <__alt_data_end+0xfffb4edc>
    a7b4:	8809883a 	mov	r4,r17
    a7b8:	980b883a 	mov	r5,r19
    a7bc:	000902c0 	call	902c <memmove>
    a7c0:	b8c00117 	ldw	r3,4(r23)
    a7c4:	b021883a 	mov	r16,r22
    a7c8:	b82b883a 	mov	r21,r23
    a7cc:	003f2306 	br	a45c <__alt_data_end+0xfffb4d2c>
    a7d0:	98c00217 	ldw	r3,8(r19)
    a7d4:	88c00215 	stw	r3,8(r17)
    a7d8:	98c00317 	ldw	r3,12(r19)
    a7dc:	88c00315 	stw	r3,12(r17)
    a7e0:	30800c26 	beq	r6,r2,a814 <_realloc_r+0x520>
    a7e4:	88800404 	addi	r2,r17,16
    a7e8:	98c00404 	addi	r3,r19,16
    a7ec:	003f8106 	br	a5f4 <__alt_data_end+0xfffb4ec4>
    a7f0:	893fff17 	ldw	r4,-4(r17)
    a7f4:	00bfff04 	movi	r2,-4
    a7f8:	9823883a 	mov	r17,r19
    a7fc:	2084703a 	and	r2,r4,r2
    a800:	80a1883a 	add	r16,r16,r2
    a804:	003f1506 	br	a45c <__alt_data_end+0xfffb4d2c>
    a808:	b8c00404 	addi	r3,r23,16
    a80c:	9cc00204 	addi	r19,r19,8
    a810:	003f4b06 	br	a540 <__alt_data_end+0xfffb4e10>
    a814:	99000417 	ldw	r4,16(r19)
    a818:	88800604 	addi	r2,r17,24
    a81c:	98c00604 	addi	r3,r19,24
    a820:	89000415 	stw	r4,16(r17)
    a824:	99000517 	ldw	r4,20(r19)
    a828:	89000515 	stw	r4,20(r17)
    a82c:	003f7106 	br	a5f4 <__alt_data_end+0xfffb4ec4>
    a830:	8805883a 	mov	r2,r17
    a834:	003fb006 	br	a6f8 <__alt_data_end+0xfffb4fc8>
    a838:	8809883a 	mov	r4,r17
    a83c:	980b883a 	mov	r5,r19
    a840:	000902c0 	call	902c <memmove>
    a844:	003fb206 	br	a710 <__alt_data_end+0xfffb4fe0>
    a848:	98800217 	ldw	r2,8(r19)
    a84c:	b8800415 	stw	r2,16(r23)
    a850:	98800317 	ldw	r2,12(r19)
    a854:	b8800515 	stw	r2,20(r23)
    a858:	31000726 	beq	r6,r4,a878 <_realloc_r+0x584>
    a85c:	b8800604 	addi	r2,r23,24
    a860:	9cc00404 	addi	r19,r19,16
    a864:	003fa406 	br	a6f8 <__alt_data_end+0xfffb4fc8>
    a868:	9009883a 	mov	r4,r18
    a86c:	001051c0 	call	1051c <__malloc_unlock>
    a870:	0005883a 	mov	r2,zero
    a874:	003f0606 	br	a490 <__alt_data_end+0xfffb4d60>
    a878:	98c00417 	ldw	r3,16(r19)
    a87c:	9cc00604 	addi	r19,r19,24
    a880:	b8800804 	addi	r2,r23,32
    a884:	b8c00615 	stw	r3,24(r23)
    a888:	98ffff17 	ldw	r3,-4(r19)
    a88c:	b8c00715 	stw	r3,28(r23)
    a890:	003f9906 	br	a6f8 <__alt_data_end+0xfffb4fc8>

0000a894 <__fpclassifyd>:
    a894:	00a00034 	movhi	r2,32768
    a898:	10bfffc4 	addi	r2,r2,-1
    a89c:	2884703a 	and	r2,r5,r2
    a8a0:	10000726 	beq	r2,zero,a8c0 <__fpclassifyd+0x2c>
    a8a4:	00fffc34 	movhi	r3,65520
    a8a8:	019ff834 	movhi	r6,32736
    a8ac:	28c7883a 	add	r3,r5,r3
    a8b0:	31bfffc4 	addi	r6,r6,-1
    a8b4:	30c00536 	bltu	r6,r3,a8cc <__fpclassifyd+0x38>
    a8b8:	00800104 	movi	r2,4
    a8bc:	f800283a 	ret
    a8c0:	2000021e 	bne	r4,zero,a8cc <__fpclassifyd+0x38>
    a8c4:	00800084 	movi	r2,2
    a8c8:	f800283a 	ret
    a8cc:	00dffc34 	movhi	r3,32752
    a8d0:	019ff834 	movhi	r6,32736
    a8d4:	28cb883a 	add	r5,r5,r3
    a8d8:	31bfffc4 	addi	r6,r6,-1
    a8dc:	317ff62e 	bgeu	r6,r5,a8b8 <__alt_data_end+0xfffb5188>
    a8e0:	01400434 	movhi	r5,16
    a8e4:	297fffc4 	addi	r5,r5,-1
    a8e8:	28800236 	bltu	r5,r2,a8f4 <__fpclassifyd+0x60>
    a8ec:	008000c4 	movi	r2,3
    a8f0:	f800283a 	ret
    a8f4:	10c00226 	beq	r2,r3,a900 <__fpclassifyd+0x6c>
    a8f8:	0005883a 	mov	r2,zero
    a8fc:	f800283a 	ret
    a900:	2005003a 	cmpeq	r2,r4,zero
    a904:	f800283a 	ret

0000a908 <__sread>:
    a908:	defffe04 	addi	sp,sp,-8
    a90c:	dc000015 	stw	r16,0(sp)
    a910:	2821883a 	mov	r16,r5
    a914:	2940038f 	ldh	r5,14(r5)
    a918:	dfc00115 	stw	ra,4(sp)
    a91c:	000c5c40 	call	c5c4 <_read_r>
    a920:	10000716 	blt	r2,zero,a940 <__sread+0x38>
    a924:	80c01417 	ldw	r3,80(r16)
    a928:	1887883a 	add	r3,r3,r2
    a92c:	80c01415 	stw	r3,80(r16)
    a930:	dfc00117 	ldw	ra,4(sp)
    a934:	dc000017 	ldw	r16,0(sp)
    a938:	dec00204 	addi	sp,sp,8
    a93c:	f800283a 	ret
    a940:	80c0030b 	ldhu	r3,12(r16)
    a944:	18fbffcc 	andi	r3,r3,61439
    a948:	80c0030d 	sth	r3,12(r16)
    a94c:	dfc00117 	ldw	ra,4(sp)
    a950:	dc000017 	ldw	r16,0(sp)
    a954:	dec00204 	addi	sp,sp,8
    a958:	f800283a 	ret

0000a95c <__seofread>:
    a95c:	0005883a 	mov	r2,zero
    a960:	f800283a 	ret

0000a964 <__swrite>:
    a964:	2880030b 	ldhu	r2,12(r5)
    a968:	defffb04 	addi	sp,sp,-20
    a96c:	dcc00315 	stw	r19,12(sp)
    a970:	dc800215 	stw	r18,8(sp)
    a974:	dc400115 	stw	r17,4(sp)
    a978:	dc000015 	stw	r16,0(sp)
    a97c:	dfc00415 	stw	ra,16(sp)
    a980:	10c0400c 	andi	r3,r2,256
    a984:	2821883a 	mov	r16,r5
    a988:	2027883a 	mov	r19,r4
    a98c:	3025883a 	mov	r18,r6
    a990:	3823883a 	mov	r17,r7
    a994:	18000526 	beq	r3,zero,a9ac <__swrite+0x48>
    a998:	2940038f 	ldh	r5,14(r5)
    a99c:	000d883a 	mov	r6,zero
    a9a0:	01c00084 	movi	r7,2
    a9a4:	000c5680 	call	c568 <_lseek_r>
    a9a8:	8080030b 	ldhu	r2,12(r16)
    a9ac:	8140038f 	ldh	r5,14(r16)
    a9b0:	10bbffcc 	andi	r2,r2,61439
    a9b4:	9809883a 	mov	r4,r19
    a9b8:	900d883a 	mov	r6,r18
    a9bc:	880f883a 	mov	r7,r17
    a9c0:	8080030d 	sth	r2,12(r16)
    a9c4:	dfc00417 	ldw	ra,16(sp)
    a9c8:	dcc00317 	ldw	r19,12(sp)
    a9cc:	dc800217 	ldw	r18,8(sp)
    a9d0:	dc400117 	ldw	r17,4(sp)
    a9d4:	dc000017 	ldw	r16,0(sp)
    a9d8:	dec00504 	addi	sp,sp,20
    a9dc:	000c0441 	jmpi	c044 <_write_r>

0000a9e0 <__sseek>:
    a9e0:	defffe04 	addi	sp,sp,-8
    a9e4:	dc000015 	stw	r16,0(sp)
    a9e8:	2821883a 	mov	r16,r5
    a9ec:	2940038f 	ldh	r5,14(r5)
    a9f0:	dfc00115 	stw	ra,4(sp)
    a9f4:	000c5680 	call	c568 <_lseek_r>
    a9f8:	00ffffc4 	movi	r3,-1
    a9fc:	10c00826 	beq	r2,r3,aa20 <__sseek+0x40>
    aa00:	80c0030b 	ldhu	r3,12(r16)
    aa04:	80801415 	stw	r2,80(r16)
    aa08:	18c40014 	ori	r3,r3,4096
    aa0c:	80c0030d 	sth	r3,12(r16)
    aa10:	dfc00117 	ldw	ra,4(sp)
    aa14:	dc000017 	ldw	r16,0(sp)
    aa18:	dec00204 	addi	sp,sp,8
    aa1c:	f800283a 	ret
    aa20:	80c0030b 	ldhu	r3,12(r16)
    aa24:	18fbffcc 	andi	r3,r3,61439
    aa28:	80c0030d 	sth	r3,12(r16)
    aa2c:	dfc00117 	ldw	ra,4(sp)
    aa30:	dc000017 	ldw	r16,0(sp)
    aa34:	dec00204 	addi	sp,sp,8
    aa38:	f800283a 	ret

0000aa3c <__sclose>:
    aa3c:	2940038f 	ldh	r5,14(r5)
    aa40:	000c0a01 	jmpi	c0a0 <_close_r>

0000aa44 <strcmp>:
    aa44:	2144b03a 	or	r2,r4,r5
    aa48:	108000cc 	andi	r2,r2,3
    aa4c:	1000171e 	bne	r2,zero,aaac <strcmp+0x68>
    aa50:	20800017 	ldw	r2,0(r4)
    aa54:	28c00017 	ldw	r3,0(r5)
    aa58:	10c0141e 	bne	r2,r3,aaac <strcmp+0x68>
    aa5c:	027fbff4 	movhi	r9,65279
    aa60:	4a7fbfc4 	addi	r9,r9,-257
    aa64:	0086303a 	nor	r3,zero,r2
    aa68:	02202074 	movhi	r8,32897
    aa6c:	1245883a 	add	r2,r2,r9
    aa70:	42202004 	addi	r8,r8,-32640
    aa74:	10c4703a 	and	r2,r2,r3
    aa78:	1204703a 	and	r2,r2,r8
    aa7c:	10000226 	beq	r2,zero,aa88 <strcmp+0x44>
    aa80:	00001706 	br	aae0 <strcmp+0x9c>
    aa84:	1000161e 	bne	r2,zero,aae0 <strcmp+0x9c>
    aa88:	21000104 	addi	r4,r4,4
    aa8c:	20c00017 	ldw	r3,0(r4)
    aa90:	29400104 	addi	r5,r5,4
    aa94:	29800017 	ldw	r6,0(r5)
    aa98:	1a4f883a 	add	r7,r3,r9
    aa9c:	00c4303a 	nor	r2,zero,r3
    aaa0:	3884703a 	and	r2,r7,r2
    aaa4:	1204703a 	and	r2,r2,r8
    aaa8:	19bff626 	beq	r3,r6,aa84 <__alt_data_end+0xfffb5354>
    aaac:	20800007 	ldb	r2,0(r4)
    aab0:	1000051e 	bne	r2,zero,aac8 <strcmp+0x84>
    aab4:	00000606 	br	aad0 <strcmp+0x8c>
    aab8:	21000044 	addi	r4,r4,1
    aabc:	20800007 	ldb	r2,0(r4)
    aac0:	29400044 	addi	r5,r5,1
    aac4:	10000226 	beq	r2,zero,aad0 <strcmp+0x8c>
    aac8:	28c00007 	ldb	r3,0(r5)
    aacc:	10fffa26 	beq	r2,r3,aab8 <__alt_data_end+0xfffb5388>
    aad0:	20800003 	ldbu	r2,0(r4)
    aad4:	28c00003 	ldbu	r3,0(r5)
    aad8:	10c5c83a 	sub	r2,r2,r3
    aadc:	f800283a 	ret
    aae0:	0005883a 	mov	r2,zero
    aae4:	f800283a 	ret

0000aae8 <__sprint_r.part.0>:
    aae8:	28801917 	ldw	r2,100(r5)
    aaec:	defff604 	addi	sp,sp,-40
    aaf0:	dd400515 	stw	r21,20(sp)
    aaf4:	dcc00315 	stw	r19,12(sp)
    aaf8:	dfc00915 	stw	ra,36(sp)
    aafc:	df000815 	stw	fp,32(sp)
    ab00:	ddc00715 	stw	r23,28(sp)
    ab04:	dd800615 	stw	r22,24(sp)
    ab08:	dd000415 	stw	r20,16(sp)
    ab0c:	dc800215 	stw	r18,8(sp)
    ab10:	dc400115 	stw	r17,4(sp)
    ab14:	dc000015 	stw	r16,0(sp)
    ab18:	1088000c 	andi	r2,r2,8192
    ab1c:	2827883a 	mov	r19,r5
    ab20:	302b883a 	mov	r21,r6
    ab24:	10002d26 	beq	r2,zero,abdc <__sprint_r.part.0+0xf4>
    ab28:	30800217 	ldw	r2,8(r6)
    ab2c:	35800017 	ldw	r22,0(r6)
    ab30:	10002826 	beq	r2,zero,abd4 <__sprint_r.part.0+0xec>
    ab34:	2029883a 	mov	r20,r4
    ab38:	b5c00104 	addi	r23,r22,4
    ab3c:	04bfffc4 	movi	r18,-1
    ab40:	bc400017 	ldw	r17,0(r23)
    ab44:	b4000017 	ldw	r16,0(r22)
    ab48:	0039883a 	mov	fp,zero
    ab4c:	8822d0ba 	srli	r17,r17,2
    ab50:	04400316 	blt	zero,r17,ab60 <__sprint_r.part.0+0x78>
    ab54:	00001706 	br	abb4 <__sprint_r.part.0+0xcc>
    ab58:	84000104 	addi	r16,r16,4
    ab5c:	8f001526 	beq	r17,fp,abb4 <__sprint_r.part.0+0xcc>
    ab60:	81400017 	ldw	r5,0(r16)
    ab64:	a009883a 	mov	r4,r20
    ab68:	980d883a 	mov	r6,r19
    ab6c:	000c2e00 	call	c2e0 <_fputwc_r>
    ab70:	e7000044 	addi	fp,fp,1
    ab74:	14bff81e 	bne	r2,r18,ab58 <__alt_data_end+0xfffb5428>
    ab78:	9005883a 	mov	r2,r18
    ab7c:	a8000215 	stw	zero,8(r21)
    ab80:	a8000115 	stw	zero,4(r21)
    ab84:	dfc00917 	ldw	ra,36(sp)
    ab88:	df000817 	ldw	fp,32(sp)
    ab8c:	ddc00717 	ldw	r23,28(sp)
    ab90:	dd800617 	ldw	r22,24(sp)
    ab94:	dd400517 	ldw	r21,20(sp)
    ab98:	dd000417 	ldw	r20,16(sp)
    ab9c:	dcc00317 	ldw	r19,12(sp)
    aba0:	dc800217 	ldw	r18,8(sp)
    aba4:	dc400117 	ldw	r17,4(sp)
    aba8:	dc000017 	ldw	r16,0(sp)
    abac:	dec00a04 	addi	sp,sp,40
    abb0:	f800283a 	ret
    abb4:	a8c00217 	ldw	r3,8(r21)
    abb8:	8c63883a 	add	r17,r17,r17
    abbc:	8c63883a 	add	r17,r17,r17
    abc0:	1c45c83a 	sub	r2,r3,r17
    abc4:	a8800215 	stw	r2,8(r21)
    abc8:	b5800204 	addi	r22,r22,8
    abcc:	bdc00204 	addi	r23,r23,8
    abd0:	103fdb1e 	bne	r2,zero,ab40 <__alt_data_end+0xfffb5410>
    abd4:	0005883a 	mov	r2,zero
    abd8:	003fe806 	br	ab7c <__alt_data_end+0xfffb544c>
    abdc:	00085600 	call	8560 <__sfvwrite_r>
    abe0:	003fe606 	br	ab7c <__alt_data_end+0xfffb544c>

0000abe4 <__sprint_r>:
    abe4:	30c00217 	ldw	r3,8(r6)
    abe8:	18000126 	beq	r3,zero,abf0 <__sprint_r+0xc>
    abec:	000aae81 	jmpi	aae8 <__sprint_r.part.0>
    abf0:	30000115 	stw	zero,4(r6)
    abf4:	0005883a 	mov	r2,zero
    abf8:	f800283a 	ret

0000abfc <___vfiprintf_internal_r>:
    abfc:	defeca04 	addi	sp,sp,-1240
    ac00:	dcc12f15 	stw	r19,1212(sp)
    ac04:	dfc13515 	stw	ra,1236(sp)
    ac08:	df013415 	stw	fp,1232(sp)
    ac0c:	ddc13315 	stw	r23,1228(sp)
    ac10:	dd813215 	stw	r22,1224(sp)
    ac14:	dd413115 	stw	r21,1220(sp)
    ac18:	dd013015 	stw	r20,1216(sp)
    ac1c:	dc812e15 	stw	r18,1208(sp)
    ac20:	dc412d15 	stw	r17,1204(sp)
    ac24:	dc012c15 	stw	r16,1200(sp)
    ac28:	d9012115 	stw	r4,1156(sp)
    ac2c:	d9412015 	stw	r5,1152(sp)
    ac30:	d9c12315 	stw	r7,1164(sp)
    ac34:	3027883a 	mov	r19,r6
    ac38:	20000226 	beq	r4,zero,ac44 <___vfiprintf_internal_r+0x48>
    ac3c:	20800e17 	ldw	r2,56(r4)
    ac40:	1000f726 	beq	r2,zero,b020 <___vfiprintf_internal_r+0x424>
    ac44:	d8812017 	ldw	r2,1152(sp)
    ac48:	10c0030b 	ldhu	r3,12(r2)
    ac4c:	1908000c 	andi	r4,r3,8192
    ac50:	1805883a 	mov	r2,r3
    ac54:	2000081e 	bne	r4,zero,ac78 <___vfiprintf_internal_r+0x7c>
    ac58:	d9412017 	ldw	r5,1152(sp)
    ac5c:	18880014 	ori	r2,r3,8192
    ac60:	00f7ffc4 	movi	r3,-8193
    ac64:	29001917 	ldw	r4,100(r5)
    ac68:	2880030d 	sth	r2,12(r5)
    ac6c:	20c8703a 	and	r4,r4,r3
    ac70:	29001915 	stw	r4,100(r5)
    ac74:	1007883a 	mov	r3,r2
    ac78:	1100020c 	andi	r4,r2,8
    ac7c:	2000a726 	beq	r4,zero,af1c <___vfiprintf_internal_r+0x320>
    ac80:	d9412017 	ldw	r5,1152(sp)
    ac84:	29000417 	ldw	r4,16(r5)
    ac88:	2000a426 	beq	r4,zero,af1c <___vfiprintf_internal_r+0x320>
    ac8c:	1080068c 	andi	r2,r2,26
    ac90:	01000284 	movi	r4,10
    ac94:	1100ab26 	beq	r2,r4,af44 <___vfiprintf_internal_r+0x348>
    ac98:	d9010a04 	addi	r4,sp,1064
    ac9c:	d94109c4 	addi	r5,sp,1063
    aca0:	07000074 	movhi	fp,1
    aca4:	04400074 	movhi	r17,1
    aca8:	2145c83a 	sub	r2,r4,r5
    acac:	e70c4404 	addi	fp,fp,12560
    acb0:	8c4c4004 	addi	r17,r17,12544
    acb4:	d9011e15 	stw	r4,1144(sp)
    acb8:	d9411f15 	stw	r5,1148(sp)
    acbc:	dec11a15 	stw	sp,1128(sp)
    acc0:	d8011c15 	stw	zero,1136(sp)
    acc4:	d8011b15 	stw	zero,1132(sp)
    acc8:	d8012715 	stw	zero,1180(sp)
    accc:	d8012515 	stw	zero,1172(sp)
    acd0:	d811883a 	mov	r8,sp
    acd4:	d8812815 	stw	r2,1184(sp)
    acd8:	982f883a 	mov	r23,r19
    acdc:	b8800007 	ldb	r2,0(r23)
    ace0:	1003b026 	beq	r2,zero,bba4 <___vfiprintf_internal_r+0xfa8>
    ace4:	01000944 	movi	r4,37
    ace8:	1103ae26 	beq	r2,r4,bba4 <___vfiprintf_internal_r+0xfa8>
    acec:	b805883a 	mov	r2,r23
    acf0:	00000106 	br	acf8 <___vfiprintf_internal_r+0xfc>
    acf4:	19000326 	beq	r3,r4,ad04 <___vfiprintf_internal_r+0x108>
    acf8:	10800044 	addi	r2,r2,1
    acfc:	10c00007 	ldb	r3,0(r2)
    ad00:	183ffc1e 	bne	r3,zero,acf4 <__alt_data_end+0xfffb55c4>
    ad04:	15e1c83a 	sub	r16,r2,r23
    ad08:	1029883a 	mov	r20,r2
    ad0c:	80001026 	beq	r16,zero,ad50 <___vfiprintf_internal_r+0x154>
    ad10:	d8c11c17 	ldw	r3,1136(sp)
    ad14:	d8811b17 	ldw	r2,1132(sp)
    ad18:	45c00015 	stw	r23,0(r8)
    ad1c:	80c7883a 	add	r3,r16,r3
    ad20:	10800044 	addi	r2,r2,1
    ad24:	44000115 	stw	r16,4(r8)
    ad28:	d8c11c15 	stw	r3,1136(sp)
    ad2c:	d8811b15 	stw	r2,1132(sp)
    ad30:	010001c4 	movi	r4,7
    ad34:	2080740e 	bge	r4,r2,af08 <___vfiprintf_internal_r+0x30c>
    ad38:	1803a71e 	bne	r3,zero,bbd8 <___vfiprintf_internal_r+0xfdc>
    ad3c:	d8c12517 	ldw	r3,1172(sp)
    ad40:	d8011b15 	stw	zero,1132(sp)
    ad44:	d811883a 	mov	r8,sp
    ad48:	1c07883a 	add	r3,r3,r16
    ad4c:	d8c12515 	stw	r3,1172(sp)
    ad50:	a0800007 	ldb	r2,0(r20)
    ad54:	1002bf26 	beq	r2,zero,b854 <___vfiprintf_internal_r+0xc58>
    ad58:	a5c00044 	addi	r23,r20,1
    ad5c:	a1800047 	ldb	r6,1(r20)
    ad60:	d8011d85 	stb	zero,1142(sp)
    ad64:	d8012205 	stb	zero,1160(sp)
    ad68:	043fffc4 	movi	r16,-1
    ad6c:	d8012415 	stw	zero,1168(sp)
    ad70:	0025883a 	mov	r18,zero
    ad74:	05001604 	movi	r20,88
    ad78:	05400244 	movi	r21,9
    ad7c:	4027883a 	mov	r19,r8
    ad80:	bdc00044 	addi	r23,r23,1
    ad84:	30bff804 	addi	r2,r6,-32
    ad88:	a0825636 	bltu	r20,r2,b6e4 <___vfiprintf_internal_r+0xae8>
    ad8c:	100490ba 	slli	r2,r2,2
    ad90:	01000074 	movhi	r4,1
    ad94:	212b6904 	addi	r4,r4,-21084
    ad98:	1105883a 	add	r2,r2,r4
    ad9c:	10800017 	ldw	r2,0(r2)
    ada0:	1000683a 	jmp	r2
    ada4:	0000b674 	movhi	zero,729
    ada8:	0000b6e4 	muli	zero,zero,731
    adac:	0000b6e4 	muli	zero,zero,731
    adb0:	0000b6d8 	cmpnei	zero,zero,731
    adb4:	0000b6e4 	muli	zero,zero,731
    adb8:	0000b6e4 	muli	zero,zero,731
    adbc:	0000b6e4 	muli	zero,zero,731
    adc0:	0000b6e4 	muli	zero,zero,731
    adc4:	0000b6e4 	muli	zero,zero,731
    adc8:	0000b6e4 	muli	zero,zero,731
    adcc:	0000b464 	muli	zero,zero,721
    add0:	0000b68c 	andi	zero,zero,730
    add4:	0000b6e4 	muli	zero,zero,731
    add8:	0000b038 	rdprs	zero,zero,704
    addc:	0000b488 	cmpgei	zero,zero,722
    ade0:	0000b6e4 	muli	zero,zero,731
    ade4:	0000b044 	movi	zero,705
    ade8:	0000b050 	cmplti	zero,zero,705
    adec:	0000b050 	cmplti	zero,zero,705
    adf0:	0000b050 	cmplti	zero,zero,705
    adf4:	0000b050 	cmplti	zero,zero,705
    adf8:	0000b050 	cmplti	zero,zero,705
    adfc:	0000b050 	cmplti	zero,zero,705
    ae00:	0000b050 	cmplti	zero,zero,705
    ae04:	0000b050 	cmplti	zero,zero,705
    ae08:	0000b050 	cmplti	zero,zero,705
    ae0c:	0000b6e4 	muli	zero,zero,731
    ae10:	0000b6e4 	muli	zero,zero,731
    ae14:	0000b6e4 	muli	zero,zero,731
    ae18:	0000b6e4 	muli	zero,zero,731
    ae1c:	0000b6e4 	muli	zero,zero,731
    ae20:	0000b6e4 	muli	zero,zero,731
    ae24:	0000b6e4 	muli	zero,zero,731
    ae28:	0000b6e4 	muli	zero,zero,731
    ae2c:	0000b6e4 	muli	zero,zero,731
    ae30:	0000b6e4 	muli	zero,zero,731
    ae34:	0000b090 	cmplti	zero,zero,706
    ae38:	0000b6e4 	muli	zero,zero,731
    ae3c:	0000b6e4 	muli	zero,zero,731
    ae40:	0000b6e4 	muli	zero,zero,731
    ae44:	0000b6e4 	muli	zero,zero,731
    ae48:	0000b6e4 	muli	zero,zero,731
    ae4c:	0000b6e4 	muli	zero,zero,731
    ae50:	0000b6e4 	muli	zero,zero,731
    ae54:	0000b6e4 	muli	zero,zero,731
    ae58:	0000b6e4 	muli	zero,zero,731
    ae5c:	0000b6e4 	muli	zero,zero,731
    ae60:	0000b380 	call	b38 <setup_keyboard+0x498>
    ae64:	0000b6e4 	muli	zero,zero,731
    ae68:	0000b6e4 	muli	zero,zero,731
    ae6c:	0000b6e4 	muli	zero,zero,731
    ae70:	0000b6e4 	muli	zero,zero,731
    ae74:	0000b6e4 	muli	zero,zero,731
    ae78:	0000b3c0 	call	b3c <setup_keyboard+0x49c>
    ae7c:	0000b6e4 	muli	zero,zero,731
    ae80:	0000b6e4 	muli	zero,zero,731
    ae84:	0000b404 	movi	zero,720
    ae88:	0000b6e4 	muli	zero,zero,731
    ae8c:	0000b6e4 	muli	zero,zero,731
    ae90:	0000b6e4 	muli	zero,zero,731
    ae94:	0000b6e4 	muli	zero,zero,731
    ae98:	0000b6e4 	muli	zero,zero,731
    ae9c:	0000b6e4 	muli	zero,zero,731
    aea0:	0000b6e4 	muli	zero,zero,731
    aea4:	0000b6e4 	muli	zero,zero,731
    aea8:	0000b6e4 	muli	zero,zero,731
    aeac:	0000b6e4 	muli	zero,zero,731
    aeb0:	0000b34c 	andi	zero,zero,717
    aeb4:	0000b69c 	xori	zero,zero,730
    aeb8:	0000b6e4 	muli	zero,zero,731
    aebc:	0000b6e4 	muli	zero,zero,731
    aec0:	0000b6e4 	muli	zero,zero,731
    aec4:	0000b4d8 	cmpnei	zero,zero,723
    aec8:	0000b69c 	xori	zero,zero,730
    aecc:	0000b6e4 	muli	zero,zero,731
    aed0:	0000b6e4 	muli	zero,zero,731
    aed4:	0000b3f0 	cmpltui	zero,zero,719
    aed8:	0000b6e4 	muli	zero,zero,731
    aedc:	0000b63c 	xorhi	zero,zero,728
    aee0:	0000b5c4 	movi	zero,727
    aee4:	0000b5f8 	rdprs	zero,zero,727
    aee8:	0000b4e4 	muli	zero,zero,723
    aeec:	0000b6e4 	muli	zero,zero,731
    aef0:	0000b4f0 	cmpltui	zero,zero,723
    aef4:	0000b6e4 	muli	zero,zero,731
    aef8:	0000b54c 	andi	zero,zero,725
    aefc:	0000b6e4 	muli	zero,zero,731
    af00:	0000b6e4 	muli	zero,zero,731
    af04:	0000b580 	call	b58 <setup_keyboard+0x4b8>
    af08:	42000204 	addi	r8,r8,8
    af0c:	d8c12517 	ldw	r3,1172(sp)
    af10:	1c07883a 	add	r3,r3,r16
    af14:	d8c12515 	stw	r3,1172(sp)
    af18:	003f8d06 	br	ad50 <__alt_data_end+0xfffb5620>
    af1c:	d9012117 	ldw	r4,1156(sp)
    af20:	d9412017 	ldw	r5,1152(sp)
    af24:	00060c00 	call	60c0 <__swsetup_r>
    af28:	1000301e 	bne	r2,zero,afec <___vfiprintf_internal_r+0x3f0>
    af2c:	d8812017 	ldw	r2,1152(sp)
    af30:	01000284 	movi	r4,10
    af34:	10c0030b 	ldhu	r3,12(r2)
    af38:	1805883a 	mov	r2,r3
    af3c:	1080068c 	andi	r2,r2,26
    af40:	113f551e 	bne	r2,r4,ac98 <__alt_data_end+0xfffb5568>
    af44:	d9012017 	ldw	r4,1152(sp)
    af48:	2080038b 	ldhu	r2,14(r4)
    af4c:	113fffcc 	andi	r4,r2,65535
    af50:	2120001c 	xori	r4,r4,32768
    af54:	21200004 	addi	r4,r4,-32768
    af58:	203f4f16 	blt	r4,zero,ac98 <__alt_data_end+0xfffb5568>
    af5c:	d9412017 	ldw	r5,1152(sp)
    af60:	d9012117 	ldw	r4,1156(sp)
    af64:	d9c12317 	ldw	r7,1164(sp)
    af68:	2b001917 	ldw	r12,100(r5)
    af6c:	2ac00717 	ldw	r11,28(r5)
    af70:	2a800917 	ldw	r10,36(r5)
    af74:	02010004 	movi	r8,1024
    af78:	18ffff4c 	andi	r3,r3,65533
    af7c:	da0b883a 	add	r5,sp,r8
    af80:	980d883a 	mov	r6,r19
    af84:	d8c1030d 	sth	r3,1036(sp)
    af88:	db011915 	stw	r12,1124(sp)
    af8c:	d881038d 	sth	r2,1038(sp)
    af90:	dac10715 	stw	r11,1052(sp)
    af94:	da810915 	stw	r10,1060(sp)
    af98:	dec10015 	stw	sp,1024(sp)
    af9c:	dec10415 	stw	sp,1040(sp)
    afa0:	da010215 	stw	r8,1032(sp)
    afa4:	da010515 	stw	r8,1044(sp)
    afa8:	d8010615 	stw	zero,1048(sp)
    afac:	000abfc0 	call	abfc <___vfiprintf_internal_r>
    afb0:	1021883a 	mov	r16,r2
    afb4:	10000416 	blt	r2,zero,afc8 <___vfiprintf_internal_r+0x3cc>
    afb8:	d9012117 	ldw	r4,1156(sp)
    afbc:	d9410004 	addi	r5,sp,1024
    afc0:	0007b400 	call	7b40 <_fflush_r>
    afc4:	10040f1e 	bne	r2,zero,c004 <___vfiprintf_internal_r+0x1408>
    afc8:	d881030b 	ldhu	r2,1036(sp)
    afcc:	1080100c 	andi	r2,r2,64
    afd0:	10000426 	beq	r2,zero,afe4 <___vfiprintf_internal_r+0x3e8>
    afd4:	d8c12017 	ldw	r3,1152(sp)
    afd8:	1880030b 	ldhu	r2,12(r3)
    afdc:	10801014 	ori	r2,r2,64
    afe0:	1880030d 	sth	r2,12(r3)
    afe4:	8005883a 	mov	r2,r16
    afe8:	00000106 	br	aff0 <___vfiprintf_internal_r+0x3f4>
    afec:	00bfffc4 	movi	r2,-1
    aff0:	dfc13517 	ldw	ra,1236(sp)
    aff4:	df013417 	ldw	fp,1232(sp)
    aff8:	ddc13317 	ldw	r23,1228(sp)
    affc:	dd813217 	ldw	r22,1224(sp)
    b000:	dd413117 	ldw	r21,1220(sp)
    b004:	dd013017 	ldw	r20,1216(sp)
    b008:	dcc12f17 	ldw	r19,1212(sp)
    b00c:	dc812e17 	ldw	r18,1208(sp)
    b010:	dc412d17 	ldw	r17,1204(sp)
    b014:	dc012c17 	ldw	r16,1200(sp)
    b018:	dec13604 	addi	sp,sp,1240
    b01c:	f800283a 	ret
    b020:	00080fc0 	call	80fc <__sinit>
    b024:	003f0706 	br	ac44 <__alt_data_end+0xfffb5514>
    b028:	d8c12417 	ldw	r3,1168(sp)
    b02c:	d8812315 	stw	r2,1164(sp)
    b030:	00c7c83a 	sub	r3,zero,r3
    b034:	d8c12415 	stw	r3,1168(sp)
    b038:	94800114 	ori	r18,r18,4
    b03c:	b9800007 	ldb	r6,0(r23)
    b040:	003f4f06 	br	ad80 <__alt_data_end+0xfffb5650>
    b044:	94802014 	ori	r18,r18,128
    b048:	b9800007 	ldb	r6,0(r23)
    b04c:	003f4c06 	br	ad80 <__alt_data_end+0xfffb5650>
    b050:	dc012615 	stw	r16,1176(sp)
    b054:	d8012415 	stw	zero,1168(sp)
    b058:	35bff404 	addi	r22,r6,-48
    b05c:	0009883a 	mov	r4,zero
    b060:	b821883a 	mov	r16,r23
    b064:	01400284 	movi	r5,10
    b068:	000d6f80 	call	d6f8 <__mulsi3>
    b06c:	81800007 	ldb	r6,0(r16)
    b070:	1589883a 	add	r4,r2,r22
    b074:	bdc00044 	addi	r23,r23,1
    b078:	35bff404 	addi	r22,r6,-48
    b07c:	b821883a 	mov	r16,r23
    b080:	adbff82e 	bgeu	r21,r22,b064 <__alt_data_end+0xfffb5934>
    b084:	d9012415 	stw	r4,1168(sp)
    b088:	dc012617 	ldw	r16,1176(sp)
    b08c:	003f3d06 	br	ad84 <__alt_data_end+0xfffb5654>
    b090:	d8c12203 	ldbu	r3,1160(sp)
    b094:	94800414 	ori	r18,r18,16
    b098:	9080080c 	andi	r2,r18,32
    b09c:	d8c11d85 	stb	r3,1142(sp)
    b0a0:	9811883a 	mov	r8,r19
    b0a4:	d8c12317 	ldw	r3,1164(sp)
    b0a8:	10018226 	beq	r2,zero,b6b4 <___vfiprintf_internal_r+0xab8>
    b0ac:	d9012317 	ldw	r4,1164(sp)
    b0b0:	18800117 	ldw	r2,4(r3)
    b0b4:	1cc00017 	ldw	r19,0(r3)
    b0b8:	21000204 	addi	r4,r4,8
    b0bc:	d9012315 	stw	r4,1164(sp)
    b0c0:	102b883a 	mov	r21,r2
    b0c4:	10030016 	blt	r2,zero,bcc8 <___vfiprintf_internal_r+0x10cc>
    b0c8:	dd811d83 	ldbu	r22,1142(sp)
    b0cc:	8029883a 	mov	r20,r16
    b0d0:	00800044 	movi	r2,1
    b0d4:	9d46b03a 	or	r3,r19,r21
    b0d8:	80000216 	blt	r16,zero,b0e4 <___vfiprintf_internal_r+0x4e8>
    b0dc:	013fdfc4 	movi	r4,-129
    b0e0:	9124703a 	and	r18,r18,r4
    b0e4:	1801b41e 	bne	r3,zero,b7b8 <___vfiprintf_internal_r+0xbbc>
    b0e8:	80028126 	beq	r16,zero,baf0 <___vfiprintf_internal_r+0xef4>
    b0ec:	10803fcc 	andi	r2,r2,255
    b0f0:	00c00044 	movi	r3,1
    b0f4:	10c1d126 	beq	r2,r3,b83c <___vfiprintf_internal_r+0xc40>
    b0f8:	00c00084 	movi	r3,2
    b0fc:	10c28626 	beq	r2,r3,bb18 <___vfiprintf_internal_r+0xf1c>
    b100:	d8c10a04 	addi	r3,sp,1064
    b104:	9808d0fa 	srli	r4,r19,3
    b108:	a80a977a 	slli	r5,r21,29
    b10c:	a82ad0fa 	srli	r21,r21,3
    b110:	9cc001cc 	andi	r19,r19,7
    b114:	98800c04 	addi	r2,r19,48
    b118:	18ffffc4 	addi	r3,r3,-1
    b11c:	2926b03a 	or	r19,r5,r4
    b120:	18800005 	stb	r2,0(r3)
    b124:	9d48b03a 	or	r4,r19,r21
    b128:	203ff61e 	bne	r4,zero,b104 <__alt_data_end+0xfffb59d4>
    b12c:	9100004c 	andi	r4,r18,1
    b130:	d8c12215 	stw	r3,1160(sp)
    b134:	2002b31e 	bne	r4,zero,bc04 <___vfiprintf_internal_r+0x1008>
    b138:	d9411e17 	ldw	r5,1144(sp)
    b13c:	28e9c83a 	sub	r20,r5,r3
    b140:	a02b883a 	mov	r21,r20
    b144:	a400010e 	bge	r20,r16,b14c <___vfiprintf_internal_r+0x550>
    b148:	802b883a 	mov	r21,r16
    b14c:	b5803fcc 	andi	r22,r22,255
    b150:	b580201c 	xori	r22,r22,128
    b154:	b5bfe004 	addi	r22,r22,-128
    b158:	b0000126 	beq	r22,zero,b160 <___vfiprintf_internal_r+0x564>
    b15c:	ad400044 	addi	r21,r21,1
    b160:	9280008c 	andi	r10,r18,2
    b164:	50000126 	beq	r10,zero,b16c <___vfiprintf_internal_r+0x570>
    b168:	ad400084 	addi	r21,r21,2
    b16c:	9580210c 	andi	r22,r18,132
    b170:	b001751e 	bne	r22,zero,b748 <___vfiprintf_internal_r+0xb4c>
    b174:	d9012417 	ldw	r4,1168(sp)
    b178:	2567c83a 	sub	r19,r4,r21
    b17c:	04c1720e 	bge	zero,r19,b748 <___vfiprintf_internal_r+0xb4c>
    b180:	01c00404 	movi	r7,16
    b184:	d8c11c17 	ldw	r3,1136(sp)
    b188:	3cc36b0e 	bge	r7,r19,bf38 <___vfiprintf_internal_r+0x133c>
    b18c:	00800074 	movhi	r2,1
    b190:	108c4404 	addi	r2,r2,12560
    b194:	dc012915 	stw	r16,1188(sp)
    b198:	d9011b17 	ldw	r4,1132(sp)
    b19c:	9821883a 	mov	r16,r19
    b1a0:	d8812615 	stw	r2,1176(sp)
    b1a4:	030001c4 	movi	r12,7
    b1a8:	5027883a 	mov	r19,r10
    b1ac:	00000506 	br	b1c4 <___vfiprintf_internal_r+0x5c8>
    b1b0:	21400084 	addi	r5,r4,2
    b1b4:	42000204 	addi	r8,r8,8
    b1b8:	1009883a 	mov	r4,r2
    b1bc:	843ffc04 	addi	r16,r16,-16
    b1c0:	3c000d0e 	bge	r7,r16,b1f8 <___vfiprintf_internal_r+0x5fc>
    b1c4:	18c00404 	addi	r3,r3,16
    b1c8:	20800044 	addi	r2,r4,1
    b1cc:	47000015 	stw	fp,0(r8)
    b1d0:	41c00115 	stw	r7,4(r8)
    b1d4:	d8c11c15 	stw	r3,1136(sp)
    b1d8:	d8811b15 	stw	r2,1132(sp)
    b1dc:	60bff40e 	bge	r12,r2,b1b0 <__alt_data_end+0xfffb5a80>
    b1e0:	18014b1e 	bne	r3,zero,b710 <___vfiprintf_internal_r+0xb14>
    b1e4:	843ffc04 	addi	r16,r16,-16
    b1e8:	0009883a 	mov	r4,zero
    b1ec:	01400044 	movi	r5,1
    b1f0:	d811883a 	mov	r8,sp
    b1f4:	3c3ff316 	blt	r7,r16,b1c4 <__alt_data_end+0xfffb5a94>
    b1f8:	9815883a 	mov	r10,r19
    b1fc:	8027883a 	mov	r19,r16
    b200:	dc012917 	ldw	r16,1188(sp)
    b204:	d9012617 	ldw	r4,1176(sp)
    b208:	98c7883a 	add	r3,r19,r3
    b20c:	44c00115 	stw	r19,4(r8)
    b210:	41000015 	stw	r4,0(r8)
    b214:	d8c11c15 	stw	r3,1136(sp)
    b218:	d9411b15 	stw	r5,1132(sp)
    b21c:	008001c4 	movi	r2,7
    b220:	11425116 	blt	r2,r5,bb68 <___vfiprintf_internal_r+0xf6c>
    b224:	d9011d87 	ldb	r4,1142(sp)
    b228:	42000204 	addi	r8,r8,8
    b22c:	28800044 	addi	r2,r5,1
    b230:	20014a1e 	bne	r4,zero,b75c <___vfiprintf_internal_r+0xb60>
    b234:	50000c26 	beq	r10,zero,b268 <___vfiprintf_internal_r+0x66c>
    b238:	d9011d04 	addi	r4,sp,1140
    b23c:	18c00084 	addi	r3,r3,2
    b240:	41000015 	stw	r4,0(r8)
    b244:	01000084 	movi	r4,2
    b248:	41000115 	stw	r4,4(r8)
    b24c:	d8c11c15 	stw	r3,1136(sp)
    b250:	d8811b15 	stw	r2,1132(sp)
    b254:	010001c4 	movi	r4,7
    b258:	20822016 	blt	r4,r2,badc <___vfiprintf_internal_r+0xee0>
    b25c:	100b883a 	mov	r5,r2
    b260:	42000204 	addi	r8,r8,8
    b264:	10800044 	addi	r2,r2,1
    b268:	01002004 	movi	r4,128
    b26c:	b101de26 	beq	r22,r4,b9e8 <___vfiprintf_internal_r+0xdec>
    b270:	8521c83a 	sub	r16,r16,r20
    b274:	0400230e 	bge	zero,r16,b304 <___vfiprintf_internal_r+0x708>
    b278:	04c00404 	movi	r19,16
    b27c:	9c030d0e 	bge	r19,r16,beb4 <___vfiprintf_internal_r+0x12b8>
    b280:	00800074 	movhi	r2,1
    b284:	108c4004 	addi	r2,r2,12544
    b288:	d8812615 	stw	r2,1176(sp)
    b28c:	058001c4 	movi	r22,7
    b290:	00000506 	br	b2a8 <___vfiprintf_internal_r+0x6ac>
    b294:	28800084 	addi	r2,r5,2
    b298:	42000204 	addi	r8,r8,8
    b29c:	200b883a 	mov	r5,r4
    b2a0:	843ffc04 	addi	r16,r16,-16
    b2a4:	9c000d0e 	bge	r19,r16,b2dc <___vfiprintf_internal_r+0x6e0>
    b2a8:	18c00404 	addi	r3,r3,16
    b2ac:	29000044 	addi	r4,r5,1
    b2b0:	44400015 	stw	r17,0(r8)
    b2b4:	44c00115 	stw	r19,4(r8)
    b2b8:	d8c11c15 	stw	r3,1136(sp)
    b2bc:	d9011b15 	stw	r4,1132(sp)
    b2c0:	b13ff40e 	bge	r22,r4,b294 <__alt_data_end+0xfffb5b64>
    b2c4:	1801321e 	bne	r3,zero,b790 <___vfiprintf_internal_r+0xb94>
    b2c8:	843ffc04 	addi	r16,r16,-16
    b2cc:	000b883a 	mov	r5,zero
    b2d0:	00800044 	movi	r2,1
    b2d4:	d811883a 	mov	r8,sp
    b2d8:	9c3ff316 	blt	r19,r16,b2a8 <__alt_data_end+0xfffb5b78>
    b2dc:	d9012617 	ldw	r4,1176(sp)
    b2e0:	1c07883a 	add	r3,r3,r16
    b2e4:	44000115 	stw	r16,4(r8)
    b2e8:	41000015 	stw	r4,0(r8)
    b2ec:	d8c11c15 	stw	r3,1136(sp)
    b2f0:	d8811b15 	stw	r2,1132(sp)
    b2f4:	010001c4 	movi	r4,7
    b2f8:	20816216 	blt	r4,r2,b884 <___vfiprintf_internal_r+0xc88>
    b2fc:	42000204 	addi	r8,r8,8
    b300:	10800044 	addi	r2,r2,1
    b304:	d9012217 	ldw	r4,1160(sp)
    b308:	1d07883a 	add	r3,r3,r20
    b30c:	45000115 	stw	r20,4(r8)
    b310:	41000015 	stw	r4,0(r8)
    b314:	d8c11c15 	stw	r3,1136(sp)
    b318:	d8811b15 	stw	r2,1132(sp)
    b31c:	010001c4 	movi	r4,7
    b320:	2081610e 	bge	r4,r2,b8a8 <___vfiprintf_internal_r+0xcac>
    b324:	1802211e 	bne	r3,zero,bbac <___vfiprintf_internal_r+0xfb0>
    b328:	d8011b15 	stw	zero,1132(sp)
    b32c:	9480010c 	andi	r18,r18,4
    b330:	9002171e 	bne	r18,zero,bb90 <___vfiprintf_internal_r+0xf94>
    b334:	d9412417 	ldw	r5,1168(sp)
    b338:	a9433716 	blt	r21,r5,c018 <___vfiprintf_internal_r+0x141c>
    b33c:	d8812517 	ldw	r2,1172(sp)
    b340:	1545883a 	add	r2,r2,r21
    b344:	d8812515 	stw	r2,1172(sp)
    b348:	00019a06 	br	b9b4 <___vfiprintf_internal_r+0xdb8>
    b34c:	d8c12317 	ldw	r3,1164(sp)
    b350:	05400044 	movi	r21,1
    b354:	9811883a 	mov	r8,r19
    b358:	18800017 	ldw	r2,0(r3)
    b35c:	18c00104 	addi	r3,r3,4
    b360:	d8c12315 	stw	r3,1164(sp)
    b364:	d8c10004 	addi	r3,sp,1024
    b368:	d8011d85 	stb	zero,1142(sp)
    b36c:	d8810005 	stb	r2,1024(sp)
    b370:	a829883a 	mov	r20,r21
    b374:	d8c12215 	stw	r3,1160(sp)
    b378:	0021883a 	mov	r16,zero
    b37c:	003f7806 	br	b160 <__alt_data_end+0xfffb5a30>
    b380:	94800414 	ori	r18,r18,16
    b384:	9080080c 	andi	r2,r18,32
    b388:	9811883a 	mov	r8,r19
    b38c:	10009026 	beq	r2,zero,b5d0 <___vfiprintf_internal_r+0x9d4>
    b390:	d8812317 	ldw	r2,1164(sp)
    b394:	d8c12317 	ldw	r3,1164(sp)
    b398:	14c00017 	ldw	r19,0(r2)
    b39c:	15400117 	ldw	r21,4(r2)
    b3a0:	18c00204 	addi	r3,r3,8
    b3a4:	d8c12315 	stw	r3,1164(sp)
    b3a8:	0005883a 	mov	r2,zero
    b3ac:	9d46b03a 	or	r3,r19,r21
    b3b0:	d8011d85 	stb	zero,1142(sp)
    b3b4:	8029883a 	mov	r20,r16
    b3b8:	002d883a 	mov	r22,zero
    b3bc:	003f4606 	br	b0d8 <__alt_data_end+0xfffb59a8>
    b3c0:	94800414 	ori	r18,r18,16
    b3c4:	9080080c 	andi	r2,r18,32
    b3c8:	9811883a 	mov	r8,r19
    b3cc:	10006226 	beq	r2,zero,b558 <___vfiprintf_internal_r+0x95c>
    b3d0:	d9012317 	ldw	r4,1164(sp)
    b3d4:	00800044 	movi	r2,1
    b3d8:	24c00017 	ldw	r19,0(r4)
    b3dc:	25400117 	ldw	r21,4(r4)
    b3e0:	21000204 	addi	r4,r4,8
    b3e4:	d9012315 	stw	r4,1164(sp)
    b3e8:	9d46b03a 	or	r3,r19,r21
    b3ec:	003ff006 	br	b3b0 <__alt_data_end+0xfffb5c80>
    b3f0:	b9800007 	ldb	r6,0(r23)
    b3f4:	00801b04 	movi	r2,108
    b3f8:	3082b226 	beq	r6,r2,bec4 <___vfiprintf_internal_r+0x12c8>
    b3fc:	94800414 	ori	r18,r18,16
    b400:	003e5f06 	br	ad80 <__alt_data_end+0xfffb5650>
    b404:	d8c12203 	ldbu	r3,1160(sp)
    b408:	01000074 	movhi	r4,1
    b40c:	210bda04 	addi	r4,r4,12136
    b410:	d8c11d85 	stb	r3,1142(sp)
    b414:	d9012715 	stw	r4,1180(sp)
    b418:	90c0080c 	andi	r3,r18,32
    b41c:	9811883a 	mov	r8,r19
    b420:	d8812317 	ldw	r2,1164(sp)
    b424:	18005f26 	beq	r3,zero,b5a4 <___vfiprintf_internal_r+0x9a8>
    b428:	d9012317 	ldw	r4,1164(sp)
    b42c:	14c00017 	ldw	r19,0(r2)
    b430:	15400117 	ldw	r21,4(r2)
    b434:	21000204 	addi	r4,r4,8
    b438:	d9012315 	stw	r4,1164(sp)
    b43c:	9080004c 	andi	r2,r18,1
    b440:	1001e226 	beq	r2,zero,bbcc <___vfiprintf_internal_r+0xfd0>
    b444:	9d46b03a 	or	r3,r19,r21
    b448:	18024e26 	beq	r3,zero,bd84 <___vfiprintf_internal_r+0x1188>
    b44c:	00800c04 	movi	r2,48
    b450:	d8811d05 	stb	r2,1140(sp)
    b454:	d9811d45 	stb	r6,1141(sp)
    b458:	94800094 	ori	r18,r18,2
    b45c:	00800084 	movi	r2,2
    b460:	003fd306 	br	b3b0 <__alt_data_end+0xfffb5c80>
    b464:	d9012317 	ldw	r4,1164(sp)
    b468:	d9412317 	ldw	r5,1164(sp)
    b46c:	21000017 	ldw	r4,0(r4)
    b470:	28800104 	addi	r2,r5,4
    b474:	d9012415 	stw	r4,1168(sp)
    b478:	203eeb16 	blt	r4,zero,b028 <__alt_data_end+0xfffb58f8>
    b47c:	d8812315 	stw	r2,1164(sp)
    b480:	b9800007 	ldb	r6,0(r23)
    b484:	003e3e06 	br	ad80 <__alt_data_end+0xfffb5650>
    b488:	b9800007 	ldb	r6,0(r23)
    b48c:	01000a84 	movi	r4,42
    b490:	b8800044 	addi	r2,r23,1
    b494:	3102d226 	beq	r6,r4,bfe0 <___vfiprintf_internal_r+0x13e4>
    b498:	35bff404 	addi	r22,r6,-48
    b49c:	102f883a 	mov	r23,r2
    b4a0:	0021883a 	mov	r16,zero
    b4a4:	adbe3736 	bltu	r21,r22,ad84 <__alt_data_end+0xfffb5654>
    b4a8:	0009883a 	mov	r4,zero
    b4ac:	01400284 	movi	r5,10
    b4b0:	000d6f80 	call	d6f8 <__mulsi3>
    b4b4:	b9800007 	ldb	r6,0(r23)
    b4b8:	b089883a 	add	r4,r22,r2
    b4bc:	bdc00044 	addi	r23,r23,1
    b4c0:	35bff404 	addi	r22,r6,-48
    b4c4:	adbff92e 	bgeu	r21,r22,b4ac <__alt_data_end+0xfffb5d7c>
    b4c8:	2021883a 	mov	r16,r4
    b4cc:	203e2d0e 	bge	r4,zero,ad84 <__alt_data_end+0xfffb5654>
    b4d0:	043fffc4 	movi	r16,-1
    b4d4:	003e2b06 	br	ad84 <__alt_data_end+0xfffb5654>
    b4d8:	94801014 	ori	r18,r18,64
    b4dc:	b9800007 	ldb	r6,0(r23)
    b4e0:	003e2706 	br	ad80 <__alt_data_end+0xfffb5650>
    b4e4:	94800814 	ori	r18,r18,32
    b4e8:	b9800007 	ldb	r6,0(r23)
    b4ec:	003e2406 	br	ad80 <__alt_data_end+0xfffb5650>
    b4f0:	d9412317 	ldw	r5,1164(sp)
    b4f4:	d8812317 	ldw	r2,1164(sp)
    b4f8:	d8011d85 	stb	zero,1142(sp)
    b4fc:	29400017 	ldw	r5,0(r5)
    b500:	9811883a 	mov	r8,r19
    b504:	14c00104 	addi	r19,r2,4
    b508:	d9412215 	stw	r5,1160(sp)
    b50c:	28029026 	beq	r5,zero,bf50 <___vfiprintf_internal_r+0x1354>
    b510:	d9012217 	ldw	r4,1160(sp)
    b514:	80027616 	blt	r16,zero,bef0 <___vfiprintf_internal_r+0x12f4>
    b518:	000b883a 	mov	r5,zero
    b51c:	800d883a 	mov	r6,r16
    b520:	da012a15 	stw	r8,1192(sp)
    b524:	0008e0c0 	call	8e0c <memchr>
    b528:	da012a17 	ldw	r8,1192(sp)
    b52c:	1002a026 	beq	r2,zero,bfb0 <___vfiprintf_internal_r+0x13b4>
    b530:	d8c12217 	ldw	r3,1160(sp)
    b534:	10e9c83a 	sub	r20,r2,r3
    b538:	85023816 	blt	r16,r20,be1c <___vfiprintf_internal_r+0x1220>
    b53c:	dd811d83 	ldbu	r22,1142(sp)
    b540:	dcc12315 	stw	r19,1164(sp)
    b544:	0021883a 	mov	r16,zero
    b548:	003efd06 	br	b140 <__alt_data_end+0xfffb5a10>
    b54c:	9080080c 	andi	r2,r18,32
    b550:	9811883a 	mov	r8,r19
    b554:	103f9e1e 	bne	r2,zero,b3d0 <__alt_data_end+0xfffb5ca0>
    b558:	9080040c 	andi	r2,r18,16
    b55c:	10021726 	beq	r2,zero,bdbc <___vfiprintf_internal_r+0x11c0>
    b560:	d9412317 	ldw	r5,1164(sp)
    b564:	002b883a 	mov	r21,zero
    b568:	00800044 	movi	r2,1
    b56c:	2cc00017 	ldw	r19,0(r5)
    b570:	29400104 	addi	r5,r5,4
    b574:	d9412315 	stw	r5,1164(sp)
    b578:	9807883a 	mov	r3,r19
    b57c:	003f8c06 	br	b3b0 <__alt_data_end+0xfffb5c80>
    b580:	d8c12203 	ldbu	r3,1160(sp)
    b584:	01000074 	movhi	r4,1
    b588:	210bdf04 	addi	r4,r4,12156
    b58c:	d8c11d85 	stb	r3,1142(sp)
    b590:	d9012715 	stw	r4,1180(sp)
    b594:	90c0080c 	andi	r3,r18,32
    b598:	9811883a 	mov	r8,r19
    b59c:	d8812317 	ldw	r2,1164(sp)
    b5a0:	183fa11e 	bne	r3,zero,b428 <__alt_data_end+0xfffb5cf8>
    b5a4:	90c0040c 	andi	r3,r18,16
    b5a8:	1801e526 	beq	r3,zero,bd40 <___vfiprintf_internal_r+0x1144>
    b5ac:	d9412317 	ldw	r5,1164(sp)
    b5b0:	14c00017 	ldw	r19,0(r2)
    b5b4:	002b883a 	mov	r21,zero
    b5b8:	29400104 	addi	r5,r5,4
    b5bc:	d9412315 	stw	r5,1164(sp)
    b5c0:	003f9e06 	br	b43c <__alt_data_end+0xfffb5d0c>
    b5c4:	9080080c 	andi	r2,r18,32
    b5c8:	9811883a 	mov	r8,r19
    b5cc:	103f701e 	bne	r2,zero,b390 <__alt_data_end+0xfffb5c60>
    b5d0:	9080040c 	andi	r2,r18,16
    b5d4:	1001ef26 	beq	r2,zero,bd94 <___vfiprintf_internal_r+0x1198>
    b5d8:	d9012317 	ldw	r4,1164(sp)
    b5dc:	002b883a 	mov	r21,zero
    b5e0:	0005883a 	mov	r2,zero
    b5e4:	24c00017 	ldw	r19,0(r4)
    b5e8:	21000104 	addi	r4,r4,4
    b5ec:	d9012315 	stw	r4,1164(sp)
    b5f0:	9807883a 	mov	r3,r19
    b5f4:	003f6e06 	br	b3b0 <__alt_data_end+0xfffb5c80>
    b5f8:	d8c12317 	ldw	r3,1164(sp)
    b5fc:	9811883a 	mov	r8,r19
    b600:	00800c04 	movi	r2,48
    b604:	1cc00017 	ldw	r19,0(r3)
    b608:	01000074 	movhi	r4,1
    b60c:	18c00104 	addi	r3,r3,4
    b610:	d8811d05 	stb	r2,1140(sp)
    b614:	210bdf04 	addi	r4,r4,12156
    b618:	00801e04 	movi	r2,120
    b61c:	d8811d45 	stb	r2,1141(sp)
    b620:	d8c12315 	stw	r3,1164(sp)
    b624:	002b883a 	mov	r21,zero
    b628:	94800094 	ori	r18,r18,2
    b62c:	d9012715 	stw	r4,1180(sp)
    b630:	00800084 	movi	r2,2
    b634:	9807883a 	mov	r3,r19
    b638:	003f5d06 	br	b3b0 <__alt_data_end+0xfffb5c80>
    b63c:	d8c12203 	ldbu	r3,1160(sp)
    b640:	9080080c 	andi	r2,r18,32
    b644:	9811883a 	mov	r8,r19
    b648:	d8c11d85 	stb	r3,1142(sp)
    b64c:	1001b126 	beq	r2,zero,bd14 <___vfiprintf_internal_r+0x1118>
    b650:	d9012317 	ldw	r4,1164(sp)
    b654:	d9412517 	ldw	r5,1172(sp)
    b658:	20800017 	ldw	r2,0(r4)
    b65c:	2807d7fa 	srai	r3,r5,31
    b660:	21000104 	addi	r4,r4,4
    b664:	d9012315 	stw	r4,1164(sp)
    b668:	11400015 	stw	r5,0(r2)
    b66c:	10c00115 	stw	r3,4(r2)
    b670:	003d9a06 	br	acdc <__alt_data_end+0xfffb55ac>
    b674:	d8812207 	ldb	r2,1160(sp)
    b678:	1001c41e 	bne	r2,zero,bd8c <___vfiprintf_internal_r+0x1190>
    b67c:	00c00804 	movi	r3,32
    b680:	d8c12205 	stb	r3,1160(sp)
    b684:	b9800007 	ldb	r6,0(r23)
    b688:	003dbd06 	br	ad80 <__alt_data_end+0xfffb5650>
    b68c:	00c00ac4 	movi	r3,43
    b690:	d8c12205 	stb	r3,1160(sp)
    b694:	b9800007 	ldb	r6,0(r23)
    b698:	003db906 	br	ad80 <__alt_data_end+0xfffb5650>
    b69c:	d8c12203 	ldbu	r3,1160(sp)
    b6a0:	9080080c 	andi	r2,r18,32
    b6a4:	9811883a 	mov	r8,r19
    b6a8:	d8c11d85 	stb	r3,1142(sp)
    b6ac:	d8c12317 	ldw	r3,1164(sp)
    b6b0:	103e7e1e 	bne	r2,zero,b0ac <__alt_data_end+0xfffb597c>
    b6b4:	9080040c 	andi	r2,r18,16
    b6b8:	1001a926 	beq	r2,zero,bd60 <___vfiprintf_internal_r+0x1164>
    b6bc:	1cc00017 	ldw	r19,0(r3)
    b6c0:	d9412317 	ldw	r5,1164(sp)
    b6c4:	982bd7fa 	srai	r21,r19,31
    b6c8:	29400104 	addi	r5,r5,4
    b6cc:	d9412315 	stw	r5,1164(sp)
    b6d0:	a805883a 	mov	r2,r21
    b6d4:	003e7b06 	br	b0c4 <__alt_data_end+0xfffb5994>
    b6d8:	94800054 	ori	r18,r18,1
    b6dc:	b9800007 	ldb	r6,0(r23)
    b6e0:	003da706 	br	ad80 <__alt_data_end+0xfffb5650>
    b6e4:	d8c12203 	ldbu	r3,1160(sp)
    b6e8:	9811883a 	mov	r8,r19
    b6ec:	d8c11d85 	stb	r3,1142(sp)
    b6f0:	30005826 	beq	r6,zero,b854 <___vfiprintf_internal_r+0xc58>
    b6f4:	05400044 	movi	r21,1
    b6f8:	d8c10004 	addi	r3,sp,1024
    b6fc:	d9810005 	stb	r6,1024(sp)
    b700:	d8011d85 	stb	zero,1142(sp)
    b704:	a829883a 	mov	r20,r21
    b708:	d8c12215 	stw	r3,1160(sp)
    b70c:	003f1a06 	br	b378 <__alt_data_end+0xfffb5c48>
    b710:	d9012117 	ldw	r4,1156(sp)
    b714:	d9412017 	ldw	r5,1152(sp)
    b718:	d9811a04 	addi	r6,sp,1128
    b71c:	d9c12a15 	stw	r7,1192(sp)
    b720:	db012b15 	stw	r12,1196(sp)
    b724:	000aae80 	call	aae8 <__sprint_r.part.0>
    b728:	d9c12a17 	ldw	r7,1192(sp)
    b72c:	db012b17 	ldw	r12,1196(sp)
    b730:	10004e1e 	bne	r2,zero,b86c <___vfiprintf_internal_r+0xc70>
    b734:	d9011b17 	ldw	r4,1132(sp)
    b738:	d8c11c17 	ldw	r3,1136(sp)
    b73c:	d811883a 	mov	r8,sp
    b740:	21400044 	addi	r5,r4,1
    b744:	003e9d06 	br	b1bc <__alt_data_end+0xfffb5a8c>
    b748:	d9411b17 	ldw	r5,1132(sp)
    b74c:	d8c11c17 	ldw	r3,1136(sp)
    b750:	28800044 	addi	r2,r5,1
    b754:	d9011d87 	ldb	r4,1142(sp)
    b758:	203eb626 	beq	r4,zero,b234 <__alt_data_end+0xfffb5b04>
    b75c:	01000044 	movi	r4,1
    b760:	d9411d84 	addi	r5,sp,1142
    b764:	1907883a 	add	r3,r3,r4
    b768:	41400015 	stw	r5,0(r8)
    b76c:	41000115 	stw	r4,4(r8)
    b770:	d8c11c15 	stw	r3,1136(sp)
    b774:	d8811b15 	stw	r2,1132(sp)
    b778:	014001c4 	movi	r5,7
    b77c:	2880ce16 	blt	r5,r2,bab8 <___vfiprintf_internal_r+0xebc>
    b780:	100b883a 	mov	r5,r2
    b784:	42000204 	addi	r8,r8,8
    b788:	10800044 	addi	r2,r2,1
    b78c:	003ea906 	br	b234 <__alt_data_end+0xfffb5b04>
    b790:	d9012117 	ldw	r4,1156(sp)
    b794:	d9412017 	ldw	r5,1152(sp)
    b798:	d9811a04 	addi	r6,sp,1128
    b79c:	000aae80 	call	aae8 <__sprint_r.part.0>
    b7a0:	1000321e 	bne	r2,zero,b86c <___vfiprintf_internal_r+0xc70>
    b7a4:	d9411b17 	ldw	r5,1132(sp)
    b7a8:	d8c11c17 	ldw	r3,1136(sp)
    b7ac:	d811883a 	mov	r8,sp
    b7b0:	28800044 	addi	r2,r5,1
    b7b4:	003eba06 	br	b2a0 <__alt_data_end+0xfffb5b70>
    b7b8:	10803fcc 	andi	r2,r2,255
    b7bc:	00c00044 	movi	r3,1
    b7c0:	10fe4d1e 	bne	r2,r3,b0f8 <__alt_data_end+0xfffb59c8>
    b7c4:	a800021e 	bne	r21,zero,b7d0 <___vfiprintf_internal_r+0xbd4>
    b7c8:	00800244 	movi	r2,9
    b7cc:	14c01b2e 	bgeu	r2,r19,b83c <___vfiprintf_internal_r+0xc40>
    b7d0:	dc012215 	stw	r16,1160(sp)
    b7d4:	dd010a04 	addi	r20,sp,1064
    b7d8:	a821883a 	mov	r16,r21
    b7dc:	402b883a 	mov	r21,r8
    b7e0:	9809883a 	mov	r4,r19
    b7e4:	800b883a 	mov	r5,r16
    b7e8:	01800284 	movi	r6,10
    b7ec:	000f883a 	mov	r7,zero
    b7f0:	000d0dc0 	call	d0dc <__umoddi3>
    b7f4:	10800c04 	addi	r2,r2,48
    b7f8:	a53fffc4 	addi	r20,r20,-1
    b7fc:	9809883a 	mov	r4,r19
    b800:	800b883a 	mov	r5,r16
    b804:	01800284 	movi	r6,10
    b808:	000f883a 	mov	r7,zero
    b80c:	a0800005 	stb	r2,0(r20)
    b810:	000ca9c0 	call	ca9c <__udivdi3>
    b814:	1027883a 	mov	r19,r2
    b818:	10c4b03a 	or	r2,r2,r3
    b81c:	1821883a 	mov	r16,r3
    b820:	103fef1e 	bne	r2,zero,b7e0 <__alt_data_end+0xfffb60b0>
    b824:	d9011e17 	ldw	r4,1144(sp)
    b828:	dc012217 	ldw	r16,1160(sp)
    b82c:	a811883a 	mov	r8,r21
    b830:	dd012215 	stw	r20,1160(sp)
    b834:	2529c83a 	sub	r20,r4,r20
    b838:	003e4106 	br	b140 <__alt_data_end+0xfffb5a10>
    b83c:	9cc00c04 	addi	r19,r19,48
    b840:	d8c109c4 	addi	r3,sp,1063
    b844:	dcc109c5 	stb	r19,1063(sp)
    b848:	dd012817 	ldw	r20,1184(sp)
    b84c:	d8c12215 	stw	r3,1160(sp)
    b850:	003e3b06 	br	b140 <__alt_data_end+0xfffb5a10>
    b854:	d8811c17 	ldw	r2,1136(sp)
    b858:	10000426 	beq	r2,zero,b86c <___vfiprintf_internal_r+0xc70>
    b85c:	d9012117 	ldw	r4,1156(sp)
    b860:	d9412017 	ldw	r5,1152(sp)
    b864:	d9811a04 	addi	r6,sp,1128
    b868:	000aae80 	call	aae8 <__sprint_r.part.0>
    b86c:	d9412017 	ldw	r5,1152(sp)
    b870:	2880030b 	ldhu	r2,12(r5)
    b874:	1080100c 	andi	r2,r2,64
    b878:	103ddc1e 	bne	r2,zero,afec <__alt_data_end+0xfffb58bc>
    b87c:	d8812517 	ldw	r2,1172(sp)
    b880:	003ddb06 	br	aff0 <__alt_data_end+0xfffb58c0>
    b884:	1801061e 	bne	r3,zero,bca0 <___vfiprintf_internal_r+0x10a4>
    b888:	d8c12217 	ldw	r3,1160(sp)
    b88c:	00800044 	movi	r2,1
    b890:	dd000115 	stw	r20,4(sp)
    b894:	d8c00015 	stw	r3,0(sp)
    b898:	dd011c15 	stw	r20,1136(sp)
    b89c:	d8811b15 	stw	r2,1132(sp)
    b8a0:	a007883a 	mov	r3,r20
    b8a4:	d811883a 	mov	r8,sp
    b8a8:	42000204 	addi	r8,r8,8
    b8ac:	9480010c 	andi	r18,r18,4
    b8b0:	90003426 	beq	r18,zero,b984 <___vfiprintf_internal_r+0xd88>
    b8b4:	d9412417 	ldw	r5,1168(sp)
    b8b8:	2d65c83a 	sub	r18,r5,r21
    b8bc:	0480310e 	bge	zero,r18,b984 <___vfiprintf_internal_r+0xd88>
    b8c0:	04000404 	movi	r16,16
    b8c4:	8481ad0e 	bge	r16,r18,bf7c <___vfiprintf_internal_r+0x1380>
    b8c8:	01400074 	movhi	r5,1
    b8cc:	294c4404 	addi	r5,r5,12560
    b8d0:	d9011b17 	ldw	r4,1132(sp)
    b8d4:	d9412615 	stw	r5,1176(sp)
    b8d8:	04c001c4 	movi	r19,7
    b8dc:	dd012117 	ldw	r20,1156(sp)
    b8e0:	dd812017 	ldw	r22,1152(sp)
    b8e4:	00000506 	br	b8fc <___vfiprintf_internal_r+0xd00>
    b8e8:	21400084 	addi	r5,r4,2
    b8ec:	42000204 	addi	r8,r8,8
    b8f0:	1009883a 	mov	r4,r2
    b8f4:	94bffc04 	addi	r18,r18,-16
    b8f8:	84800d0e 	bge	r16,r18,b930 <___vfiprintf_internal_r+0xd34>
    b8fc:	18c00404 	addi	r3,r3,16
    b900:	20800044 	addi	r2,r4,1
    b904:	47000015 	stw	fp,0(r8)
    b908:	44000115 	stw	r16,4(r8)
    b90c:	d8c11c15 	stw	r3,1136(sp)
    b910:	d8811b15 	stw	r2,1132(sp)
    b914:	98bff40e 	bge	r19,r2,b8e8 <__alt_data_end+0xfffb61b8>
    b918:	1800291e 	bne	r3,zero,b9c0 <___vfiprintf_internal_r+0xdc4>
    b91c:	94bffc04 	addi	r18,r18,-16
    b920:	0009883a 	mov	r4,zero
    b924:	01400044 	movi	r5,1
    b928:	d811883a 	mov	r8,sp
    b92c:	84bff316 	blt	r16,r18,b8fc <__alt_data_end+0xfffb61cc>
    b930:	d8812617 	ldw	r2,1176(sp)
    b934:	1c87883a 	add	r3,r3,r18
    b938:	44800115 	stw	r18,4(r8)
    b93c:	40800015 	stw	r2,0(r8)
    b940:	d8c11c15 	stw	r3,1136(sp)
    b944:	d9411b15 	stw	r5,1132(sp)
    b948:	008001c4 	movi	r2,7
    b94c:	11400d0e 	bge	r2,r5,b984 <___vfiprintf_internal_r+0xd88>
    b950:	1800061e 	bne	r3,zero,b96c <___vfiprintf_internal_r+0xd70>
    b954:	d8c12417 	ldw	r3,1168(sp)
    b958:	a8c12e16 	blt	r21,r3,be14 <___vfiprintf_internal_r+0x1218>
    b95c:	d9012517 	ldw	r4,1172(sp)
    b960:	2549883a 	add	r4,r4,r21
    b964:	d9012515 	stw	r4,1172(sp)
    b968:	00001206 	br	b9b4 <___vfiprintf_internal_r+0xdb8>
    b96c:	d9012117 	ldw	r4,1156(sp)
    b970:	d9412017 	ldw	r5,1152(sp)
    b974:	d9811a04 	addi	r6,sp,1128
    b978:	000aae80 	call	aae8 <__sprint_r.part.0>
    b97c:	103fbb1e 	bne	r2,zero,b86c <__alt_data_end+0xfffb613c>
    b980:	d8c11c17 	ldw	r3,1136(sp)
    b984:	d8812417 	ldw	r2,1168(sp)
    b988:	a880010e 	bge	r21,r2,b990 <___vfiprintf_internal_r+0xd94>
    b98c:	102b883a 	mov	r21,r2
    b990:	d9012517 	ldw	r4,1172(sp)
    b994:	2549883a 	add	r4,r4,r21
    b998:	d9012515 	stw	r4,1172(sp)
    b99c:	18000526 	beq	r3,zero,b9b4 <___vfiprintf_internal_r+0xdb8>
    b9a0:	d9012117 	ldw	r4,1156(sp)
    b9a4:	d9412017 	ldw	r5,1152(sp)
    b9a8:	d9811a04 	addi	r6,sp,1128
    b9ac:	000aae80 	call	aae8 <__sprint_r.part.0>
    b9b0:	103fae1e 	bne	r2,zero,b86c <__alt_data_end+0xfffb613c>
    b9b4:	d8011b15 	stw	zero,1132(sp)
    b9b8:	d811883a 	mov	r8,sp
    b9bc:	003cc706 	br	acdc <__alt_data_end+0xfffb55ac>
    b9c0:	a009883a 	mov	r4,r20
    b9c4:	b00b883a 	mov	r5,r22
    b9c8:	d9811a04 	addi	r6,sp,1128
    b9cc:	000aae80 	call	aae8 <__sprint_r.part.0>
    b9d0:	103fa61e 	bne	r2,zero,b86c <__alt_data_end+0xfffb613c>
    b9d4:	d9011b17 	ldw	r4,1132(sp)
    b9d8:	d8c11c17 	ldw	r3,1136(sp)
    b9dc:	d811883a 	mov	r8,sp
    b9e0:	21400044 	addi	r5,r4,1
    b9e4:	003fc306 	br	b8f4 <__alt_data_end+0xfffb61c4>
    b9e8:	d9012417 	ldw	r4,1168(sp)
    b9ec:	256dc83a 	sub	r22,r4,r21
    b9f0:	05be1f0e 	bge	zero,r22,b270 <__alt_data_end+0xfffb5b40>
    b9f4:	04c00404 	movi	r19,16
    b9f8:	9d81720e 	bge	r19,r22,bfc4 <___vfiprintf_internal_r+0x13c8>
    b9fc:	00800074 	movhi	r2,1
    ba00:	108c4004 	addi	r2,r2,12544
    ba04:	d8812615 	stw	r2,1176(sp)
    ba08:	028001c4 	movi	r10,7
    ba0c:	00000506 	br	ba24 <___vfiprintf_internal_r+0xe28>
    ba10:	29000084 	addi	r4,r5,2
    ba14:	42000204 	addi	r8,r8,8
    ba18:	100b883a 	mov	r5,r2
    ba1c:	b5bffc04 	addi	r22,r22,-16
    ba20:	9d800d0e 	bge	r19,r22,ba58 <___vfiprintf_internal_r+0xe5c>
    ba24:	18c00404 	addi	r3,r3,16
    ba28:	28800044 	addi	r2,r5,1
    ba2c:	44400015 	stw	r17,0(r8)
    ba30:	44c00115 	stw	r19,4(r8)
    ba34:	d8c11c15 	stw	r3,1136(sp)
    ba38:	d8811b15 	stw	r2,1132(sp)
    ba3c:	50bff40e 	bge	r10,r2,ba10 <__alt_data_end+0xfffb62e0>
    ba40:	1800111e 	bne	r3,zero,ba88 <___vfiprintf_internal_r+0xe8c>
    ba44:	b5bffc04 	addi	r22,r22,-16
    ba48:	000b883a 	mov	r5,zero
    ba4c:	01000044 	movi	r4,1
    ba50:	d811883a 	mov	r8,sp
    ba54:	9dbff316 	blt	r19,r22,ba24 <__alt_data_end+0xfffb62f4>
    ba58:	d9412617 	ldw	r5,1176(sp)
    ba5c:	1d87883a 	add	r3,r3,r22
    ba60:	45800115 	stw	r22,4(r8)
    ba64:	41400015 	stw	r5,0(r8)
    ba68:	d8c11c15 	stw	r3,1136(sp)
    ba6c:	d9011b15 	stw	r4,1132(sp)
    ba70:	008001c4 	movi	r2,7
    ba74:	11008516 	blt	r2,r4,bc8c <___vfiprintf_internal_r+0x1090>
    ba78:	42000204 	addi	r8,r8,8
    ba7c:	20800044 	addi	r2,r4,1
    ba80:	200b883a 	mov	r5,r4
    ba84:	003dfa06 	br	b270 <__alt_data_end+0xfffb5b40>
    ba88:	d9012117 	ldw	r4,1156(sp)
    ba8c:	d9412017 	ldw	r5,1152(sp)
    ba90:	d9811a04 	addi	r6,sp,1128
    ba94:	da812a15 	stw	r10,1192(sp)
    ba98:	000aae80 	call	aae8 <__sprint_r.part.0>
    ba9c:	da812a17 	ldw	r10,1192(sp)
    baa0:	103f721e 	bne	r2,zero,b86c <__alt_data_end+0xfffb613c>
    baa4:	d9411b17 	ldw	r5,1132(sp)
    baa8:	d8c11c17 	ldw	r3,1136(sp)
    baac:	d811883a 	mov	r8,sp
    bab0:	29000044 	addi	r4,r5,1
    bab4:	003fd906 	br	ba1c <__alt_data_end+0xfffb62ec>
    bab8:	1800681e 	bne	r3,zero,bc5c <___vfiprintf_internal_r+0x1060>
    babc:	50004d26 	beq	r10,zero,bbf4 <___vfiprintf_internal_r+0xff8>
    bac0:	d8811d04 	addi	r2,sp,1140
    bac4:	00c00084 	movi	r3,2
    bac8:	d8800015 	stw	r2,0(sp)
    bacc:	d8c00115 	stw	r3,4(sp)
    bad0:	2005883a 	mov	r2,r4
    bad4:	d811883a 	mov	r8,sp
    bad8:	003de006 	br	b25c <__alt_data_end+0xfffb5b2c>
    badc:	1800551e 	bne	r3,zero,bc34 <___vfiprintf_internal_r+0x1038>
    bae0:	000b883a 	mov	r5,zero
    bae4:	00800044 	movi	r2,1
    bae8:	d811883a 	mov	r8,sp
    baec:	003dde06 	br	b268 <__alt_data_end+0xfffb5b38>
    baf0:	10803fcc 	andi	r2,r2,255
    baf4:	1000191e 	bne	r2,zero,bb5c <___vfiprintf_internal_r+0xf60>
    baf8:	9080004c 	andi	r2,r18,1
    bafc:	10001726 	beq	r2,zero,bb5c <___vfiprintf_internal_r+0xf60>
    bb00:	00800c04 	movi	r2,48
    bb04:	d8c109c4 	addi	r3,sp,1063
    bb08:	d88109c5 	stb	r2,1063(sp)
    bb0c:	dd012817 	ldw	r20,1184(sp)
    bb10:	d8c12215 	stw	r3,1160(sp)
    bb14:	003d8a06 	br	b140 <__alt_data_end+0xfffb5a10>
    bb18:	d9012717 	ldw	r4,1180(sp)
    bb1c:	dd010a04 	addi	r20,sp,1064
    bb20:	988003cc 	andi	r2,r19,15
    bb24:	a806973a 	slli	r3,r21,28
    bb28:	2085883a 	add	r2,r4,r2
    bb2c:	9826d13a 	srli	r19,r19,4
    bb30:	10800003 	ldbu	r2,0(r2)
    bb34:	a82ad13a 	srli	r21,r21,4
    bb38:	a53fffc4 	addi	r20,r20,-1
    bb3c:	1ce6b03a 	or	r19,r3,r19
    bb40:	a0800005 	stb	r2,0(r20)
    bb44:	9d44b03a 	or	r2,r19,r21
    bb48:	103ff51e 	bne	r2,zero,bb20 <__alt_data_end+0xfffb63f0>
    bb4c:	d9411e17 	ldw	r5,1144(sp)
    bb50:	dd012215 	stw	r20,1160(sp)
    bb54:	2d29c83a 	sub	r20,r5,r20
    bb58:	003d7906 	br	b140 <__alt_data_end+0xfffb5a10>
    bb5c:	d8c10a04 	addi	r3,sp,1064
    bb60:	d8c12215 	stw	r3,1160(sp)
    bb64:	003d7606 	br	b140 <__alt_data_end+0xfffb5a10>
    bb68:	18009e1e 	bne	r3,zero,bde4 <___vfiprintf_internal_r+0x11e8>
    bb6c:	d8811d87 	ldb	r2,1142(sp)
    bb70:	10005f26 	beq	r2,zero,bcf0 <___vfiprintf_internal_r+0x10f4>
    bb74:	00c00044 	movi	r3,1
    bb78:	d9011d84 	addi	r4,sp,1142
    bb7c:	1805883a 	mov	r2,r3
    bb80:	d9000015 	stw	r4,0(sp)
    bb84:	d8c00115 	stw	r3,4(sp)
    bb88:	d811883a 	mov	r8,sp
    bb8c:	003efc06 	br	b780 <__alt_data_end+0xfffb6050>
    bb90:	d9412417 	ldw	r5,1168(sp)
    bb94:	d811883a 	mov	r8,sp
    bb98:	2d65c83a 	sub	r18,r5,r21
    bb9c:	04bf4816 	blt	zero,r18,b8c0 <__alt_data_end+0xfffb6190>
    bba0:	003f6c06 	br	b954 <__alt_data_end+0xfffb6224>
    bba4:	b829883a 	mov	r20,r23
    bba8:	003c6906 	br	ad50 <__alt_data_end+0xfffb5620>
    bbac:	d9012117 	ldw	r4,1156(sp)
    bbb0:	d9412017 	ldw	r5,1152(sp)
    bbb4:	d9811a04 	addi	r6,sp,1128
    bbb8:	000aae80 	call	aae8 <__sprint_r.part.0>
    bbbc:	103f2b1e 	bne	r2,zero,b86c <__alt_data_end+0xfffb613c>
    bbc0:	d8c11c17 	ldw	r3,1136(sp)
    bbc4:	d811883a 	mov	r8,sp
    bbc8:	003f3806 	br	b8ac <__alt_data_end+0xfffb617c>
    bbcc:	00800084 	movi	r2,2
    bbd0:	9d46b03a 	or	r3,r19,r21
    bbd4:	003df606 	br	b3b0 <__alt_data_end+0xfffb5c80>
    bbd8:	d9012117 	ldw	r4,1156(sp)
    bbdc:	d9412017 	ldw	r5,1152(sp)
    bbe0:	d9811a04 	addi	r6,sp,1128
    bbe4:	000aae80 	call	aae8 <__sprint_r.part.0>
    bbe8:	103f201e 	bne	r2,zero,b86c <__alt_data_end+0xfffb613c>
    bbec:	d811883a 	mov	r8,sp
    bbf0:	003cc606 	br	af0c <__alt_data_end+0xfffb57dc>
    bbf4:	000b883a 	mov	r5,zero
    bbf8:	2005883a 	mov	r2,r4
    bbfc:	d811883a 	mov	r8,sp
    bc00:	003d9906 	br	b268 <__alt_data_end+0xfffb5b38>
    bc04:	10803fcc 	andi	r2,r2,255
    bc08:	1080201c 	xori	r2,r2,128
    bc0c:	10bfe004 	addi	r2,r2,-128
    bc10:	01000c04 	movi	r4,48
    bc14:	1100b226 	beq	r2,r4,bee0 <___vfiprintf_internal_r+0x12e4>
    bc18:	d9412217 	ldw	r5,1160(sp)
    bc1c:	d8811e17 	ldw	r2,1144(sp)
    bc20:	193fffc5 	stb	r4,-1(r3)
    bc24:	297fffc4 	addi	r5,r5,-1
    bc28:	d9412215 	stw	r5,1160(sp)
    bc2c:	1169c83a 	sub	r20,r2,r5
    bc30:	003d4306 	br	b140 <__alt_data_end+0xfffb5a10>
    bc34:	d9012117 	ldw	r4,1156(sp)
    bc38:	d9412017 	ldw	r5,1152(sp)
    bc3c:	d9811a04 	addi	r6,sp,1128
    bc40:	000aae80 	call	aae8 <__sprint_r.part.0>
    bc44:	103f091e 	bne	r2,zero,b86c <__alt_data_end+0xfffb613c>
    bc48:	d9411b17 	ldw	r5,1132(sp)
    bc4c:	d8c11c17 	ldw	r3,1136(sp)
    bc50:	d811883a 	mov	r8,sp
    bc54:	28800044 	addi	r2,r5,1
    bc58:	003d8306 	br	b268 <__alt_data_end+0xfffb5b38>
    bc5c:	d9012117 	ldw	r4,1156(sp)
    bc60:	d9412017 	ldw	r5,1152(sp)
    bc64:	d9811a04 	addi	r6,sp,1128
    bc68:	da812a15 	stw	r10,1192(sp)
    bc6c:	000aae80 	call	aae8 <__sprint_r.part.0>
    bc70:	da812a17 	ldw	r10,1192(sp)
    bc74:	103efd1e 	bne	r2,zero,b86c <__alt_data_end+0xfffb613c>
    bc78:	d9411b17 	ldw	r5,1132(sp)
    bc7c:	d8c11c17 	ldw	r3,1136(sp)
    bc80:	d811883a 	mov	r8,sp
    bc84:	28800044 	addi	r2,r5,1
    bc88:	003d6a06 	br	b234 <__alt_data_end+0xfffb5b04>
    bc8c:	1800a01e 	bne	r3,zero,bf10 <___vfiprintf_internal_r+0x1314>
    bc90:	000b883a 	mov	r5,zero
    bc94:	00800044 	movi	r2,1
    bc98:	d811883a 	mov	r8,sp
    bc9c:	003d7406 	br	b270 <__alt_data_end+0xfffb5b40>
    bca0:	d9012117 	ldw	r4,1156(sp)
    bca4:	d9412017 	ldw	r5,1152(sp)
    bca8:	d9811a04 	addi	r6,sp,1128
    bcac:	000aae80 	call	aae8 <__sprint_r.part.0>
    bcb0:	103eee1e 	bne	r2,zero,b86c <__alt_data_end+0xfffb613c>
    bcb4:	d8811b17 	ldw	r2,1132(sp)
    bcb8:	d8c11c17 	ldw	r3,1136(sp)
    bcbc:	d811883a 	mov	r8,sp
    bcc0:	10800044 	addi	r2,r2,1
    bcc4:	003d8f06 	br	b304 <__alt_data_end+0xfffb5bd4>
    bcc8:	04e7c83a 	sub	r19,zero,r19
    bccc:	9804c03a 	cmpne	r2,r19,zero
    bcd0:	056bc83a 	sub	r21,zero,r21
    bcd4:	a8abc83a 	sub	r21,r21,r2
    bcd8:	05800b44 	movi	r22,45
    bcdc:	dd811d85 	stb	r22,1142(sp)
    bce0:	8029883a 	mov	r20,r16
    bce4:	00800044 	movi	r2,1
    bce8:	9d46b03a 	or	r3,r19,r21
    bcec:	003cfa06 	br	b0d8 <__alt_data_end+0xfffb59a8>
    bcf0:	000b883a 	mov	r5,zero
    bcf4:	00800044 	movi	r2,1
    bcf8:	d811883a 	mov	r8,sp
    bcfc:	503d5a26 	beq	r10,zero,b268 <__alt_data_end+0xfffb5b38>
    bd00:	00c00084 	movi	r3,2
    bd04:	d9011d04 	addi	r4,sp,1140
    bd08:	d9000015 	stw	r4,0(sp)
    bd0c:	d8c00115 	stw	r3,4(sp)
    bd10:	003d5206 	br	b25c <__alt_data_end+0xfffb5b2c>
    bd14:	9080040c 	andi	r2,r18,16
    bd18:	1000421e 	bne	r2,zero,be24 <___vfiprintf_internal_r+0x1228>
    bd1c:	9480100c 	andi	r18,r18,64
    bd20:	90009c26 	beq	r18,zero,bf94 <___vfiprintf_internal_r+0x1398>
    bd24:	d9412317 	ldw	r5,1164(sp)
    bd28:	d8c12517 	ldw	r3,1172(sp)
    bd2c:	28800017 	ldw	r2,0(r5)
    bd30:	29400104 	addi	r5,r5,4
    bd34:	d9412315 	stw	r5,1164(sp)
    bd38:	10c0000d 	sth	r3,0(r2)
    bd3c:	003be706 	br	acdc <__alt_data_end+0xfffb55ac>
    bd40:	90c0100c 	andi	r3,r18,64
    bd44:	18003e26 	beq	r3,zero,be40 <___vfiprintf_internal_r+0x1244>
    bd48:	d8c12317 	ldw	r3,1164(sp)
    bd4c:	14c0000b 	ldhu	r19,0(r2)
    bd50:	002b883a 	mov	r21,zero
    bd54:	18c00104 	addi	r3,r3,4
    bd58:	d8c12315 	stw	r3,1164(sp)
    bd5c:	003db706 	br	b43c <__alt_data_end+0xfffb5d0c>
    bd60:	9080100c 	andi	r2,r18,64
    bd64:	10004c26 	beq	r2,zero,be98 <___vfiprintf_internal_r+0x129c>
    bd68:	1cc0000f 	ldh	r19,0(r3)
    bd6c:	d8812317 	ldw	r2,1164(sp)
    bd70:	982bd7fa 	srai	r21,r19,31
    bd74:	10800104 	addi	r2,r2,4
    bd78:	d8812315 	stw	r2,1164(sp)
    bd7c:	a805883a 	mov	r2,r21
    bd80:	003cd006 	br	b0c4 <__alt_data_end+0xfffb5994>
    bd84:	00800084 	movi	r2,2
    bd88:	003d8906 	br	b3b0 <__alt_data_end+0xfffb5c80>
    bd8c:	b9800007 	ldb	r6,0(r23)
    bd90:	003bfb06 	br	ad80 <__alt_data_end+0xfffb5650>
    bd94:	9080100c 	andi	r2,r18,64
    bd98:	10003726 	beq	r2,zero,be78 <___vfiprintf_internal_r+0x127c>
    bd9c:	d9412317 	ldw	r5,1164(sp)
    bda0:	002b883a 	mov	r21,zero
    bda4:	0005883a 	mov	r2,zero
    bda8:	2cc0000b 	ldhu	r19,0(r5)
    bdac:	29400104 	addi	r5,r5,4
    bdb0:	d9412315 	stw	r5,1164(sp)
    bdb4:	9807883a 	mov	r3,r19
    bdb8:	003d7d06 	br	b3b0 <__alt_data_end+0xfffb5c80>
    bdbc:	9080100c 	andi	r2,r18,64
    bdc0:	10002526 	beq	r2,zero,be58 <___vfiprintf_internal_r+0x125c>
    bdc4:	d8812317 	ldw	r2,1164(sp)
    bdc8:	002b883a 	mov	r21,zero
    bdcc:	14c0000b 	ldhu	r19,0(r2)
    bdd0:	10800104 	addi	r2,r2,4
    bdd4:	d8812315 	stw	r2,1164(sp)
    bdd8:	9807883a 	mov	r3,r19
    bddc:	00800044 	movi	r2,1
    bde0:	003d7306 	br	b3b0 <__alt_data_end+0xfffb5c80>
    bde4:	d9012117 	ldw	r4,1156(sp)
    bde8:	d9412017 	ldw	r5,1152(sp)
    bdec:	d9811a04 	addi	r6,sp,1128
    bdf0:	da812a15 	stw	r10,1192(sp)
    bdf4:	000aae80 	call	aae8 <__sprint_r.part.0>
    bdf8:	da812a17 	ldw	r10,1192(sp)
    bdfc:	103e9b1e 	bne	r2,zero,b86c <__alt_data_end+0xfffb613c>
    be00:	d9411b17 	ldw	r5,1132(sp)
    be04:	d8c11c17 	ldw	r3,1136(sp)
    be08:	d811883a 	mov	r8,sp
    be0c:	28800044 	addi	r2,r5,1
    be10:	003e5006 	br	b754 <__alt_data_end+0xfffb6024>
    be14:	182b883a 	mov	r21,r3
    be18:	003ed006 	br	b95c <__alt_data_end+0xfffb622c>
    be1c:	8029883a 	mov	r20,r16
    be20:	003dc606 	br	b53c <__alt_data_end+0xfffb5e0c>
    be24:	d8c12317 	ldw	r3,1164(sp)
    be28:	d9012517 	ldw	r4,1172(sp)
    be2c:	18800017 	ldw	r2,0(r3)
    be30:	18c00104 	addi	r3,r3,4
    be34:	d8c12315 	stw	r3,1164(sp)
    be38:	11000015 	stw	r4,0(r2)
    be3c:	003ba706 	br	acdc <__alt_data_end+0xfffb55ac>
    be40:	d9012317 	ldw	r4,1164(sp)
    be44:	14c00017 	ldw	r19,0(r2)
    be48:	002b883a 	mov	r21,zero
    be4c:	21000104 	addi	r4,r4,4
    be50:	d9012315 	stw	r4,1164(sp)
    be54:	003d7906 	br	b43c <__alt_data_end+0xfffb5d0c>
    be58:	d8c12317 	ldw	r3,1164(sp)
    be5c:	002b883a 	mov	r21,zero
    be60:	00800044 	movi	r2,1
    be64:	1cc00017 	ldw	r19,0(r3)
    be68:	18c00104 	addi	r3,r3,4
    be6c:	d8c12315 	stw	r3,1164(sp)
    be70:	9807883a 	mov	r3,r19
    be74:	003d4e06 	br	b3b0 <__alt_data_end+0xfffb5c80>
    be78:	d8812317 	ldw	r2,1164(sp)
    be7c:	002b883a 	mov	r21,zero
    be80:	14c00017 	ldw	r19,0(r2)
    be84:	10800104 	addi	r2,r2,4
    be88:	d8812315 	stw	r2,1164(sp)
    be8c:	9807883a 	mov	r3,r19
    be90:	0005883a 	mov	r2,zero
    be94:	003d4606 	br	b3b0 <__alt_data_end+0xfffb5c80>
    be98:	1cc00017 	ldw	r19,0(r3)
    be9c:	d8c12317 	ldw	r3,1164(sp)
    bea0:	982bd7fa 	srai	r21,r19,31
    bea4:	18c00104 	addi	r3,r3,4
    bea8:	d8c12315 	stw	r3,1164(sp)
    beac:	a805883a 	mov	r2,r21
    beb0:	003c8406 	br	b0c4 <__alt_data_end+0xfffb5994>
    beb4:	01000074 	movhi	r4,1
    beb8:	210c4004 	addi	r4,r4,12544
    bebc:	d9012615 	stw	r4,1176(sp)
    bec0:	003d0606 	br	b2dc <__alt_data_end+0xfffb5bac>
    bec4:	b9800043 	ldbu	r6,1(r23)
    bec8:	94800814 	ori	r18,r18,32
    becc:	bdc00044 	addi	r23,r23,1
    bed0:	31803fcc 	andi	r6,r6,255
    bed4:	3180201c 	xori	r6,r6,128
    bed8:	31bfe004 	addi	r6,r6,-128
    bedc:	003ba806 	br	ad80 <__alt_data_end+0xfffb5650>
    bee0:	d8811e17 	ldw	r2,1144(sp)
    bee4:	d8c12217 	ldw	r3,1160(sp)
    bee8:	10e9c83a 	sub	r20,r2,r3
    beec:	003c9406 	br	b140 <__alt_data_end+0xfffb5a10>
    bef0:	da012a15 	stw	r8,1192(sp)
    bef4:	0003f080 	call	3f08 <strlen>
    bef8:	1029883a 	mov	r20,r2
    befc:	dd811d83 	ldbu	r22,1142(sp)
    bf00:	dcc12315 	stw	r19,1164(sp)
    bf04:	0021883a 	mov	r16,zero
    bf08:	da012a17 	ldw	r8,1192(sp)
    bf0c:	003c8c06 	br	b140 <__alt_data_end+0xfffb5a10>
    bf10:	d9012117 	ldw	r4,1156(sp)
    bf14:	d9412017 	ldw	r5,1152(sp)
    bf18:	d9811a04 	addi	r6,sp,1128
    bf1c:	000aae80 	call	aae8 <__sprint_r.part.0>
    bf20:	103e521e 	bne	r2,zero,b86c <__alt_data_end+0xfffb613c>
    bf24:	d9411b17 	ldw	r5,1132(sp)
    bf28:	d8c11c17 	ldw	r3,1136(sp)
    bf2c:	d811883a 	mov	r8,sp
    bf30:	28800044 	addi	r2,r5,1
    bf34:	003cce06 	br	b270 <__alt_data_end+0xfffb5b40>
    bf38:	01400074 	movhi	r5,1
    bf3c:	294c4404 	addi	r5,r5,12560
    bf40:	d9412615 	stw	r5,1176(sp)
    bf44:	d9411b17 	ldw	r5,1132(sp)
    bf48:	29400044 	addi	r5,r5,1
    bf4c:	003cad06 	br	b204 <__alt_data_end+0xfffb5ad4>
    bf50:	00800184 	movi	r2,6
    bf54:	1400012e 	bgeu	r2,r16,bf5c <___vfiprintf_internal_r+0x1360>
    bf58:	1021883a 	mov	r16,r2
    bf5c:	8029883a 	mov	r20,r16
    bf60:	802b883a 	mov	r21,r16
    bf64:	80001c16 	blt	r16,zero,bfd8 <___vfiprintf_internal_r+0x13dc>
    bf68:	00c00074 	movhi	r3,1
    bf6c:	18cbe404 	addi	r3,r3,12176
    bf70:	dcc12315 	stw	r19,1164(sp)
    bf74:	d8c12215 	stw	r3,1160(sp)
    bf78:	003cff06 	br	b378 <__alt_data_end+0xfffb5c48>
    bf7c:	d9411b17 	ldw	r5,1132(sp)
    bf80:	00800074 	movhi	r2,1
    bf84:	108c4404 	addi	r2,r2,12560
    bf88:	d8812615 	stw	r2,1176(sp)
    bf8c:	29400044 	addi	r5,r5,1
    bf90:	003e6706 	br	b930 <__alt_data_end+0xfffb6200>
    bf94:	d9012317 	ldw	r4,1164(sp)
    bf98:	d9412517 	ldw	r5,1172(sp)
    bf9c:	20800017 	ldw	r2,0(r4)
    bfa0:	21000104 	addi	r4,r4,4
    bfa4:	d9012315 	stw	r4,1164(sp)
    bfa8:	11400015 	stw	r5,0(r2)
    bfac:	003b4b06 	br	acdc <__alt_data_end+0xfffb55ac>
    bfb0:	8029883a 	mov	r20,r16
    bfb4:	dd811d83 	ldbu	r22,1142(sp)
    bfb8:	dcc12315 	stw	r19,1164(sp)
    bfbc:	0021883a 	mov	r16,zero
    bfc0:	003c5f06 	br	b140 <__alt_data_end+0xfffb5a10>
    bfc4:	01000074 	movhi	r4,1
    bfc8:	210c4004 	addi	r4,r4,12544
    bfcc:	d9012615 	stw	r4,1176(sp)
    bfd0:	1009883a 	mov	r4,r2
    bfd4:	003ea006 	br	ba58 <__alt_data_end+0xfffb6328>
    bfd8:	002b883a 	mov	r21,zero
    bfdc:	003fe206 	br	bf68 <__alt_data_end+0xfffb6838>
    bfe0:	d9412317 	ldw	r5,1164(sp)
    bfe4:	b807883a 	mov	r3,r23
    bfe8:	102f883a 	mov	r23,r2
    bfec:	2c000017 	ldw	r16,0(r5)
    bff0:	29000104 	addi	r4,r5,4
    bff4:	d9012315 	stw	r4,1164(sp)
    bff8:	80000416 	blt	r16,zero,c00c <___vfiprintf_internal_r+0x1410>
    bffc:	19800047 	ldb	r6,1(r3)
    c000:	003b5f06 	br	ad80 <__alt_data_end+0xfffb5650>
    c004:	043fffc4 	movi	r16,-1
    c008:	003bef06 	br	afc8 <__alt_data_end+0xfffb5898>
    c00c:	043fffc4 	movi	r16,-1
    c010:	19800047 	ldb	r6,1(r3)
    c014:	003b5a06 	br	ad80 <__alt_data_end+0xfffb5650>
    c018:	282b883a 	mov	r21,r5
    c01c:	003cc706 	br	b33c <__alt_data_end+0xfffb5c0c>

0000c020 <__vfiprintf_internal>:
    c020:	2007883a 	mov	r3,r4
    c024:	01000074 	movhi	r4,1
    c028:	21135f04 	addi	r4,r4,19836
    c02c:	21000017 	ldw	r4,0(r4)
    c030:	2805883a 	mov	r2,r5
    c034:	300f883a 	mov	r7,r6
    c038:	180b883a 	mov	r5,r3
    c03c:	100d883a 	mov	r6,r2
    c040:	000abfc1 	jmpi	abfc <___vfiprintf_internal_r>

0000c044 <_write_r>:
    c044:	defffd04 	addi	sp,sp,-12
    c048:	dc000015 	stw	r16,0(sp)
    c04c:	04000074 	movhi	r16,1
    c050:	dc400115 	stw	r17,4(sp)
    c054:	841a4d04 	addi	r16,r16,26932
    c058:	2023883a 	mov	r17,r4
    c05c:	2809883a 	mov	r4,r5
    c060:	300b883a 	mov	r5,r6
    c064:	380d883a 	mov	r6,r7
    c068:	dfc00215 	stw	ra,8(sp)
    c06c:	80000015 	stw	zero,0(r16)
    c070:	00108400 	call	10840 <write>
    c074:	00ffffc4 	movi	r3,-1
    c078:	10c00526 	beq	r2,r3,c090 <_write_r+0x4c>
    c07c:	dfc00217 	ldw	ra,8(sp)
    c080:	dc400117 	ldw	r17,4(sp)
    c084:	dc000017 	ldw	r16,0(sp)
    c088:	dec00304 	addi	sp,sp,12
    c08c:	f800283a 	ret
    c090:	80c00017 	ldw	r3,0(r16)
    c094:	183ff926 	beq	r3,zero,c07c <__alt_data_end+0xfffb694c>
    c098:	88c00015 	stw	r3,0(r17)
    c09c:	003ff706 	br	c07c <__alt_data_end+0xfffb694c>

0000c0a0 <_close_r>:
    c0a0:	defffd04 	addi	sp,sp,-12
    c0a4:	dc000015 	stw	r16,0(sp)
    c0a8:	04000074 	movhi	r16,1
    c0ac:	dc400115 	stw	r17,4(sp)
    c0b0:	841a4d04 	addi	r16,r16,26932
    c0b4:	2023883a 	mov	r17,r4
    c0b8:	2809883a 	mov	r4,r5
    c0bc:	dfc00215 	stw	ra,8(sp)
    c0c0:	80000015 	stw	zero,0(r16)
    c0c4:	000ff6c0 	call	ff6c <close>
    c0c8:	00ffffc4 	movi	r3,-1
    c0cc:	10c00526 	beq	r2,r3,c0e4 <_close_r+0x44>
    c0d0:	dfc00217 	ldw	ra,8(sp)
    c0d4:	dc400117 	ldw	r17,4(sp)
    c0d8:	dc000017 	ldw	r16,0(sp)
    c0dc:	dec00304 	addi	sp,sp,12
    c0e0:	f800283a 	ret
    c0e4:	80c00017 	ldw	r3,0(r16)
    c0e8:	183ff926 	beq	r3,zero,c0d0 <__alt_data_end+0xfffb69a0>
    c0ec:	88c00015 	stw	r3,0(r17)
    c0f0:	003ff706 	br	c0d0 <__alt_data_end+0xfffb69a0>

0000c0f4 <_calloc_r>:
    c0f4:	defffe04 	addi	sp,sp,-8
    c0f8:	dc000015 	stw	r16,0(sp)
    c0fc:	2021883a 	mov	r16,r4
    c100:	2809883a 	mov	r4,r5
    c104:	300b883a 	mov	r5,r6
    c108:	dfc00115 	stw	ra,4(sp)
    c10c:	000d6f80 	call	d6f8 <__mulsi3>
    c110:	8009883a 	mov	r4,r16
    c114:	100b883a 	mov	r5,r2
    c118:	000355c0 	call	355c <_malloc_r>
    c11c:	1021883a 	mov	r16,r2
    c120:	10002826 	beq	r2,zero,c1c4 <_calloc_r+0xd0>
    c124:	11bfff17 	ldw	r6,-4(r2)
    c128:	00bfff04 	movi	r2,-4
    c12c:	00c00904 	movi	r3,36
    c130:	308c703a 	and	r6,r6,r2
    c134:	308d883a 	add	r6,r6,r2
    c138:	19801436 	bltu	r3,r6,c18c <_calloc_r+0x98>
    c13c:	008004c4 	movi	r2,19
    c140:	11800936 	bltu	r2,r6,c168 <_calloc_r+0x74>
    c144:	8005883a 	mov	r2,r16
    c148:	10000015 	stw	zero,0(r2)
    c14c:	10000115 	stw	zero,4(r2)
    c150:	10000215 	stw	zero,8(r2)
    c154:	8005883a 	mov	r2,r16
    c158:	dfc00117 	ldw	ra,4(sp)
    c15c:	dc000017 	ldw	r16,0(sp)
    c160:	dec00204 	addi	sp,sp,8
    c164:	f800283a 	ret
    c168:	80000015 	stw	zero,0(r16)
    c16c:	80000115 	stw	zero,4(r16)
    c170:	008006c4 	movi	r2,27
    c174:	11800d2e 	bgeu	r2,r6,c1ac <_calloc_r+0xb8>
    c178:	80000215 	stw	zero,8(r16)
    c17c:	80000315 	stw	zero,12(r16)
    c180:	30c00c26 	beq	r6,r3,c1b4 <_calloc_r+0xc0>
    c184:	80800404 	addi	r2,r16,16
    c188:	003fef06 	br	c148 <__alt_data_end+0xfffb6a18>
    c18c:	8009883a 	mov	r4,r16
    c190:	000b883a 	mov	r5,zero
    c194:	00091880 	call	9188 <memset>
    c198:	8005883a 	mov	r2,r16
    c19c:	dfc00117 	ldw	ra,4(sp)
    c1a0:	dc000017 	ldw	r16,0(sp)
    c1a4:	dec00204 	addi	sp,sp,8
    c1a8:	f800283a 	ret
    c1ac:	80800204 	addi	r2,r16,8
    c1b0:	003fe506 	br	c148 <__alt_data_end+0xfffb6a18>
    c1b4:	80000415 	stw	zero,16(r16)
    c1b8:	80800604 	addi	r2,r16,24
    c1bc:	80000515 	stw	zero,20(r16)
    c1c0:	003fe106 	br	c148 <__alt_data_end+0xfffb6a18>
    c1c4:	0005883a 	mov	r2,zero
    c1c8:	003fe306 	br	c158 <__alt_data_end+0xfffb6a28>

0000c1cc <_fclose_r>:
    c1cc:	28003226 	beq	r5,zero,c298 <_fclose_r+0xcc>
    c1d0:	defffc04 	addi	sp,sp,-16
    c1d4:	dc400115 	stw	r17,4(sp)
    c1d8:	2023883a 	mov	r17,r4
    c1dc:	dc000015 	stw	r16,0(sp)
    c1e0:	dfc00315 	stw	ra,12(sp)
    c1e4:	dc800215 	stw	r18,8(sp)
    c1e8:	2821883a 	mov	r16,r5
    c1ec:	000810c0 	call	810c <__sfp_lock_acquire>
    c1f0:	88000226 	beq	r17,zero,c1fc <_fclose_r+0x30>
    c1f4:	88800e17 	ldw	r2,56(r17)
    c1f8:	10002926 	beq	r2,zero,c2a0 <_fclose_r+0xd4>
    c1fc:	8080030f 	ldh	r2,12(r16)
    c200:	10002226 	beq	r2,zero,c28c <_fclose_r+0xc0>
    c204:	8809883a 	mov	r4,r17
    c208:	800b883a 	mov	r5,r16
    c20c:	0007b400 	call	7b40 <_fflush_r>
    c210:	1025883a 	mov	r18,r2
    c214:	80800b17 	ldw	r2,44(r16)
    c218:	10000426 	beq	r2,zero,c22c <_fclose_r+0x60>
    c21c:	81400717 	ldw	r5,28(r16)
    c220:	8809883a 	mov	r4,r17
    c224:	103ee83a 	callr	r2
    c228:	10002616 	blt	r2,zero,c2c4 <_fclose_r+0xf8>
    c22c:	8080030b 	ldhu	r2,12(r16)
    c230:	1080200c 	andi	r2,r2,128
    c234:	10001f1e 	bne	r2,zero,c2b4 <_fclose_r+0xe8>
    c238:	81400c17 	ldw	r5,48(r16)
    c23c:	28000526 	beq	r5,zero,c254 <_fclose_r+0x88>
    c240:	80801004 	addi	r2,r16,64
    c244:	28800226 	beq	r5,r2,c250 <_fclose_r+0x84>
    c248:	8809883a 	mov	r4,r17
    c24c:	00082700 	call	8270 <_free_r>
    c250:	80000c15 	stw	zero,48(r16)
    c254:	81401117 	ldw	r5,68(r16)
    c258:	28000326 	beq	r5,zero,c268 <_fclose_r+0x9c>
    c25c:	8809883a 	mov	r4,r17
    c260:	00082700 	call	8270 <_free_r>
    c264:	80001115 	stw	zero,68(r16)
    c268:	8000030d 	sth	zero,12(r16)
    c26c:	00081100 	call	8110 <__sfp_lock_release>
    c270:	9005883a 	mov	r2,r18
    c274:	dfc00317 	ldw	ra,12(sp)
    c278:	dc800217 	ldw	r18,8(sp)
    c27c:	dc400117 	ldw	r17,4(sp)
    c280:	dc000017 	ldw	r16,0(sp)
    c284:	dec00404 	addi	sp,sp,16
    c288:	f800283a 	ret
    c28c:	00081100 	call	8110 <__sfp_lock_release>
    c290:	0005883a 	mov	r2,zero
    c294:	003ff706 	br	c274 <__alt_data_end+0xfffb6b44>
    c298:	0005883a 	mov	r2,zero
    c29c:	f800283a 	ret
    c2a0:	8809883a 	mov	r4,r17
    c2a4:	00080fc0 	call	80fc <__sinit>
    c2a8:	8080030f 	ldh	r2,12(r16)
    c2ac:	103fd51e 	bne	r2,zero,c204 <__alt_data_end+0xfffb6ad4>
    c2b0:	003ff606 	br	c28c <__alt_data_end+0xfffb6b5c>
    c2b4:	81400417 	ldw	r5,16(r16)
    c2b8:	8809883a 	mov	r4,r17
    c2bc:	00082700 	call	8270 <_free_r>
    c2c0:	003fdd06 	br	c238 <__alt_data_end+0xfffb6b08>
    c2c4:	04bfffc4 	movi	r18,-1
    c2c8:	003fd806 	br	c22c <__alt_data_end+0xfffb6afc>

0000c2cc <fclose>:
    c2cc:	00800074 	movhi	r2,1
    c2d0:	10935f04 	addi	r2,r2,19836
    c2d4:	200b883a 	mov	r5,r4
    c2d8:	11000017 	ldw	r4,0(r2)
    c2dc:	000c1cc1 	jmpi	c1cc <_fclose_r>

0000c2e0 <_fputwc_r>:
    c2e0:	3080030b 	ldhu	r2,12(r6)
    c2e4:	defff804 	addi	sp,sp,-32
    c2e8:	dcc00415 	stw	r19,16(sp)
    c2ec:	dc800315 	stw	r18,12(sp)
    c2f0:	dc000115 	stw	r16,4(sp)
    c2f4:	dfc00715 	stw	ra,28(sp)
    c2f8:	dd400615 	stw	r21,24(sp)
    c2fc:	dd000515 	stw	r20,20(sp)
    c300:	dc400215 	stw	r17,8(sp)
    c304:	10c8000c 	andi	r3,r2,8192
    c308:	3021883a 	mov	r16,r6
    c30c:	2027883a 	mov	r19,r4
    c310:	2825883a 	mov	r18,r5
    c314:	1800051e 	bne	r3,zero,c32c <_fputwc_r+0x4c>
    c318:	30c01917 	ldw	r3,100(r6)
    c31c:	10880014 	ori	r2,r2,8192
    c320:	3080030d 	sth	r2,12(r6)
    c324:	18880014 	ori	r2,r3,8192
    c328:	30801915 	stw	r2,100(r6)
    c32c:	0008bfc0 	call	8bfc <__locale_mb_cur_max>
    c330:	00c00044 	movi	r3,1
    c334:	10c03e26 	beq	r2,r3,c430 <_fputwc_r+0x150>
    c338:	9809883a 	mov	r4,r19
    c33c:	d80b883a 	mov	r5,sp
    c340:	900d883a 	mov	r6,r18
    c344:	81c01704 	addi	r7,r16,92
    c348:	000c7900 	call	c790 <_wcrtomb_r>
    c34c:	1029883a 	mov	r20,r2
    c350:	00bfffc4 	movi	r2,-1
    c354:	a0802026 	beq	r20,r2,c3d8 <_fputwc_r+0xf8>
    c358:	d9400003 	ldbu	r5,0(sp)
    c35c:	a0001c26 	beq	r20,zero,c3d0 <_fputwc_r+0xf0>
    c360:	0023883a 	mov	r17,zero
    c364:	05400284 	movi	r21,10
    c368:	00000906 	br	c390 <_fputwc_r+0xb0>
    c36c:	80800017 	ldw	r2,0(r16)
    c370:	11400005 	stb	r5,0(r2)
    c374:	80c00017 	ldw	r3,0(r16)
    c378:	18c00044 	addi	r3,r3,1
    c37c:	80c00015 	stw	r3,0(r16)
    c380:	8c400044 	addi	r17,r17,1
    c384:	dc45883a 	add	r2,sp,r17
    c388:	8d00112e 	bgeu	r17,r20,c3d0 <_fputwc_r+0xf0>
    c38c:	11400003 	ldbu	r5,0(r2)
    c390:	80c00217 	ldw	r3,8(r16)
    c394:	18ffffc4 	addi	r3,r3,-1
    c398:	80c00215 	stw	r3,8(r16)
    c39c:	183ff30e 	bge	r3,zero,c36c <__alt_data_end+0xfffb6c3c>
    c3a0:	80800617 	ldw	r2,24(r16)
    c3a4:	18801916 	blt	r3,r2,c40c <_fputwc_r+0x12c>
    c3a8:	80800017 	ldw	r2,0(r16)
    c3ac:	11400005 	stb	r5,0(r2)
    c3b0:	80800017 	ldw	r2,0(r16)
    c3b4:	10c00003 	ldbu	r3,0(r2)
    c3b8:	10800044 	addi	r2,r2,1
    c3bc:	1d402326 	beq	r3,r21,c44c <_fputwc_r+0x16c>
    c3c0:	80800015 	stw	r2,0(r16)
    c3c4:	8c400044 	addi	r17,r17,1
    c3c8:	dc45883a 	add	r2,sp,r17
    c3cc:	8d3fef36 	bltu	r17,r20,c38c <__alt_data_end+0xfffb6c5c>
    c3d0:	9005883a 	mov	r2,r18
    c3d4:	00000406 	br	c3e8 <_fputwc_r+0x108>
    c3d8:	80c0030b 	ldhu	r3,12(r16)
    c3dc:	a005883a 	mov	r2,r20
    c3e0:	18c01014 	ori	r3,r3,64
    c3e4:	80c0030d 	sth	r3,12(r16)
    c3e8:	dfc00717 	ldw	ra,28(sp)
    c3ec:	dd400617 	ldw	r21,24(sp)
    c3f0:	dd000517 	ldw	r20,20(sp)
    c3f4:	dcc00417 	ldw	r19,16(sp)
    c3f8:	dc800317 	ldw	r18,12(sp)
    c3fc:	dc400217 	ldw	r17,8(sp)
    c400:	dc000117 	ldw	r16,4(sp)
    c404:	dec00804 	addi	sp,sp,32
    c408:	f800283a 	ret
    c40c:	9809883a 	mov	r4,r19
    c410:	29403fcc 	andi	r5,r5,255
    c414:	800d883a 	mov	r6,r16
    c418:	000c6200 	call	c620 <__swbuf_r>
    c41c:	10bfffe0 	cmpeqi	r2,r2,-1
    c420:	10803fcc 	andi	r2,r2,255
    c424:	103fd626 	beq	r2,zero,c380 <__alt_data_end+0xfffb6c50>
    c428:	00bfffc4 	movi	r2,-1
    c42c:	003fee06 	br	c3e8 <__alt_data_end+0xfffb6cb8>
    c430:	90ffffc4 	addi	r3,r18,-1
    c434:	01003f84 	movi	r4,254
    c438:	20ffbf36 	bltu	r4,r3,c338 <__alt_data_end+0xfffb6c08>
    c43c:	900b883a 	mov	r5,r18
    c440:	dc800005 	stb	r18,0(sp)
    c444:	1029883a 	mov	r20,r2
    c448:	003fc506 	br	c360 <__alt_data_end+0xfffb6c30>
    c44c:	9809883a 	mov	r4,r19
    c450:	a80b883a 	mov	r5,r21
    c454:	800d883a 	mov	r6,r16
    c458:	000c6200 	call	c620 <__swbuf_r>
    c45c:	10bfffe0 	cmpeqi	r2,r2,-1
    c460:	003fef06 	br	c420 <__alt_data_end+0xfffb6cf0>

0000c464 <fputwc>:
    c464:	defffc04 	addi	sp,sp,-16
    c468:	dc000115 	stw	r16,4(sp)
    c46c:	04000074 	movhi	r16,1
    c470:	84135f04 	addi	r16,r16,19836
    c474:	dc400215 	stw	r17,8(sp)
    c478:	2023883a 	mov	r17,r4
    c47c:	81000017 	ldw	r4,0(r16)
    c480:	dfc00315 	stw	ra,12(sp)
    c484:	280d883a 	mov	r6,r5
    c488:	20000626 	beq	r4,zero,c4a4 <fputwc+0x40>
    c48c:	20800e17 	ldw	r2,56(r4)
    c490:	1000041e 	bne	r2,zero,c4a4 <fputwc+0x40>
    c494:	d9400015 	stw	r5,0(sp)
    c498:	00080fc0 	call	80fc <__sinit>
    c49c:	81000017 	ldw	r4,0(r16)
    c4a0:	d9800017 	ldw	r6,0(sp)
    c4a4:	880b883a 	mov	r5,r17
    c4a8:	dfc00317 	ldw	ra,12(sp)
    c4ac:	dc400217 	ldw	r17,8(sp)
    c4b0:	dc000117 	ldw	r16,4(sp)
    c4b4:	dec00404 	addi	sp,sp,16
    c4b8:	000c2e01 	jmpi	c2e0 <_fputwc_r>

0000c4bc <_fstat_r>:
    c4bc:	defffd04 	addi	sp,sp,-12
    c4c0:	dc000015 	stw	r16,0(sp)
    c4c4:	04000074 	movhi	r16,1
    c4c8:	dc400115 	stw	r17,4(sp)
    c4cc:	841a4d04 	addi	r16,r16,26932
    c4d0:	2023883a 	mov	r17,r4
    c4d4:	2809883a 	mov	r4,r5
    c4d8:	300b883a 	mov	r5,r6
    c4dc:	dfc00215 	stw	ra,8(sp)
    c4e0:	80000015 	stw	zero,0(r16)
    c4e4:	00100c00 	call	100c0 <fstat>
    c4e8:	00ffffc4 	movi	r3,-1
    c4ec:	10c00526 	beq	r2,r3,c504 <_fstat_r+0x48>
    c4f0:	dfc00217 	ldw	ra,8(sp)
    c4f4:	dc400117 	ldw	r17,4(sp)
    c4f8:	dc000017 	ldw	r16,0(sp)
    c4fc:	dec00304 	addi	sp,sp,12
    c500:	f800283a 	ret
    c504:	80c00017 	ldw	r3,0(r16)
    c508:	183ff926 	beq	r3,zero,c4f0 <__alt_data_end+0xfffb6dc0>
    c50c:	88c00015 	stw	r3,0(r17)
    c510:	003ff706 	br	c4f0 <__alt_data_end+0xfffb6dc0>

0000c514 <_isatty_r>:
    c514:	defffd04 	addi	sp,sp,-12
    c518:	dc000015 	stw	r16,0(sp)
    c51c:	04000074 	movhi	r16,1
    c520:	dc400115 	stw	r17,4(sp)
    c524:	841a4d04 	addi	r16,r16,26932
    c528:	2023883a 	mov	r17,r4
    c52c:	2809883a 	mov	r4,r5
    c530:	dfc00215 	stw	ra,8(sp)
    c534:	80000015 	stw	zero,0(r16)
    c538:	00101c80 	call	101c8 <isatty>
    c53c:	00ffffc4 	movi	r3,-1
    c540:	10c00526 	beq	r2,r3,c558 <_isatty_r+0x44>
    c544:	dfc00217 	ldw	ra,8(sp)
    c548:	dc400117 	ldw	r17,4(sp)
    c54c:	dc000017 	ldw	r16,0(sp)
    c550:	dec00304 	addi	sp,sp,12
    c554:	f800283a 	ret
    c558:	80c00017 	ldw	r3,0(r16)
    c55c:	183ff926 	beq	r3,zero,c544 <__alt_data_end+0xfffb6e14>
    c560:	88c00015 	stw	r3,0(r17)
    c564:	003ff706 	br	c544 <__alt_data_end+0xfffb6e14>

0000c568 <_lseek_r>:
    c568:	defffd04 	addi	sp,sp,-12
    c56c:	dc000015 	stw	r16,0(sp)
    c570:	04000074 	movhi	r16,1
    c574:	dc400115 	stw	r17,4(sp)
    c578:	841a4d04 	addi	r16,r16,26932
    c57c:	2023883a 	mov	r17,r4
    c580:	2809883a 	mov	r4,r5
    c584:	300b883a 	mov	r5,r6
    c588:	380d883a 	mov	r6,r7
    c58c:	dfc00215 	stw	ra,8(sp)
    c590:	80000015 	stw	zero,0(r16)
    c594:	00103a80 	call	103a8 <lseek>
    c598:	00ffffc4 	movi	r3,-1
    c59c:	10c00526 	beq	r2,r3,c5b4 <_lseek_r+0x4c>
    c5a0:	dfc00217 	ldw	ra,8(sp)
    c5a4:	dc400117 	ldw	r17,4(sp)
    c5a8:	dc000017 	ldw	r16,0(sp)
    c5ac:	dec00304 	addi	sp,sp,12
    c5b0:	f800283a 	ret
    c5b4:	80c00017 	ldw	r3,0(r16)
    c5b8:	183ff926 	beq	r3,zero,c5a0 <__alt_data_end+0xfffb6e70>
    c5bc:	88c00015 	stw	r3,0(r17)
    c5c0:	003ff706 	br	c5a0 <__alt_data_end+0xfffb6e70>

0000c5c4 <_read_r>:
    c5c4:	defffd04 	addi	sp,sp,-12
    c5c8:	dc000015 	stw	r16,0(sp)
    c5cc:	04000074 	movhi	r16,1
    c5d0:	dc400115 	stw	r17,4(sp)
    c5d4:	841a4d04 	addi	r16,r16,26932
    c5d8:	2023883a 	mov	r17,r4
    c5dc:	2809883a 	mov	r4,r5
    c5e0:	300b883a 	mov	r5,r6
    c5e4:	380d883a 	mov	r6,r7
    c5e8:	dfc00215 	stw	ra,8(sp)
    c5ec:	80000015 	stw	zero,0(r16)
    c5f0:	001058c0 	call	1058c <read>
    c5f4:	00ffffc4 	movi	r3,-1
    c5f8:	10c00526 	beq	r2,r3,c610 <_read_r+0x4c>
    c5fc:	dfc00217 	ldw	ra,8(sp)
    c600:	dc400117 	ldw	r17,4(sp)
    c604:	dc000017 	ldw	r16,0(sp)
    c608:	dec00304 	addi	sp,sp,12
    c60c:	f800283a 	ret
    c610:	80c00017 	ldw	r3,0(r16)
    c614:	183ff926 	beq	r3,zero,c5fc <__alt_data_end+0xfffb6ecc>
    c618:	88c00015 	stw	r3,0(r17)
    c61c:	003ff706 	br	c5fc <__alt_data_end+0xfffb6ecc>

0000c620 <__swbuf_r>:
    c620:	defffc04 	addi	sp,sp,-16
    c624:	dc800215 	stw	r18,8(sp)
    c628:	dc400115 	stw	r17,4(sp)
    c62c:	dc000015 	stw	r16,0(sp)
    c630:	dfc00315 	stw	ra,12(sp)
    c634:	2025883a 	mov	r18,r4
    c638:	2823883a 	mov	r17,r5
    c63c:	3021883a 	mov	r16,r6
    c640:	20000226 	beq	r4,zero,c64c <__swbuf_r+0x2c>
    c644:	20800e17 	ldw	r2,56(r4)
    c648:	10004126 	beq	r2,zero,c750 <__swbuf_r+0x130>
    c64c:	80c00617 	ldw	r3,24(r16)
    c650:	8180030b 	ldhu	r6,12(r16)
    c654:	80c00215 	stw	r3,8(r16)
    c658:	30c0020c 	andi	r3,r6,8
    c65c:	18003526 	beq	r3,zero,c734 <__swbuf_r+0x114>
    c660:	80c00417 	ldw	r3,16(r16)
    c664:	18003326 	beq	r3,zero,c734 <__swbuf_r+0x114>
    c668:	3088000c 	andi	r2,r6,8192
    c66c:	8c403fcc 	andi	r17,r17,255
    c670:	10001726 	beq	r2,zero,c6d0 <__swbuf_r+0xb0>
    c674:	80800017 	ldw	r2,0(r16)
    c678:	81000517 	ldw	r4,20(r16)
    c67c:	10c7c83a 	sub	r3,r2,r3
    c680:	19001d0e 	bge	r3,r4,c6f8 <__swbuf_r+0xd8>
    c684:	18c00044 	addi	r3,r3,1
    c688:	81400217 	ldw	r5,8(r16)
    c68c:	11000044 	addi	r4,r2,1
    c690:	81000015 	stw	r4,0(r16)
    c694:	297fffc4 	addi	r5,r5,-1
    c698:	81400215 	stw	r5,8(r16)
    c69c:	14400005 	stb	r17,0(r2)
    c6a0:	80800517 	ldw	r2,20(r16)
    c6a4:	10c01d26 	beq	r2,r3,c71c <__swbuf_r+0xfc>
    c6a8:	8080030b 	ldhu	r2,12(r16)
    c6ac:	1080004c 	andi	r2,r2,1
    c6b0:	1000181e 	bne	r2,zero,c714 <__swbuf_r+0xf4>
    c6b4:	8805883a 	mov	r2,r17
    c6b8:	dfc00317 	ldw	ra,12(sp)
    c6bc:	dc800217 	ldw	r18,8(sp)
    c6c0:	dc400117 	ldw	r17,4(sp)
    c6c4:	dc000017 	ldw	r16,0(sp)
    c6c8:	dec00404 	addi	sp,sp,16
    c6cc:	f800283a 	ret
    c6d0:	81001917 	ldw	r4,100(r16)
    c6d4:	00b7ffc4 	movi	r2,-8193
    c6d8:	31880014 	ori	r6,r6,8192
    c6dc:	2084703a 	and	r2,r4,r2
    c6e0:	80801915 	stw	r2,100(r16)
    c6e4:	80800017 	ldw	r2,0(r16)
    c6e8:	81000517 	ldw	r4,20(r16)
    c6ec:	8180030d 	sth	r6,12(r16)
    c6f0:	10c7c83a 	sub	r3,r2,r3
    c6f4:	193fe316 	blt	r3,r4,c684 <__alt_data_end+0xfffb6f54>
    c6f8:	9009883a 	mov	r4,r18
    c6fc:	800b883a 	mov	r5,r16
    c700:	0007b400 	call	7b40 <_fflush_r>
    c704:	1000091e 	bne	r2,zero,c72c <__swbuf_r+0x10c>
    c708:	80800017 	ldw	r2,0(r16)
    c70c:	00c00044 	movi	r3,1
    c710:	003fdd06 	br	c688 <__alt_data_end+0xfffb6f58>
    c714:	00800284 	movi	r2,10
    c718:	88bfe61e 	bne	r17,r2,c6b4 <__alt_data_end+0xfffb6f84>
    c71c:	9009883a 	mov	r4,r18
    c720:	800b883a 	mov	r5,r16
    c724:	0007b400 	call	7b40 <_fflush_r>
    c728:	103fe226 	beq	r2,zero,c6b4 <__alt_data_end+0xfffb6f84>
    c72c:	00bfffc4 	movi	r2,-1
    c730:	003fe106 	br	c6b8 <__alt_data_end+0xfffb6f88>
    c734:	9009883a 	mov	r4,r18
    c738:	800b883a 	mov	r5,r16
    c73c:	00060c00 	call	60c0 <__swsetup_r>
    c740:	1000051e 	bne	r2,zero,c758 <__swbuf_r+0x138>
    c744:	8180030b 	ldhu	r6,12(r16)
    c748:	80c00417 	ldw	r3,16(r16)
    c74c:	003fc606 	br	c668 <__alt_data_end+0xfffb6f38>
    c750:	00080fc0 	call	80fc <__sinit>
    c754:	003fbd06 	br	c64c <__alt_data_end+0xfffb6f1c>
    c758:	80c0030b 	ldhu	r3,12(r16)
    c75c:	00bfffc4 	movi	r2,-1
    c760:	18c01014 	ori	r3,r3,64
    c764:	80c0030d 	sth	r3,12(r16)
    c768:	00c00244 	movi	r3,9
    c76c:	90c00015 	stw	r3,0(r18)
    c770:	003fd106 	br	c6b8 <__alt_data_end+0xfffb6f88>

0000c774 <__swbuf>:
    c774:	00c00074 	movhi	r3,1
    c778:	18d35f04 	addi	r3,r3,19836
    c77c:	2005883a 	mov	r2,r4
    c780:	19000017 	ldw	r4,0(r3)
    c784:	280d883a 	mov	r6,r5
    c788:	100b883a 	mov	r5,r2
    c78c:	000c6201 	jmpi	c620 <__swbuf_r>

0000c790 <_wcrtomb_r>:
    c790:	defff604 	addi	sp,sp,-40
    c794:	00800074 	movhi	r2,1
    c798:	dc800815 	stw	r18,32(sp)
    c79c:	dc400715 	stw	r17,28(sp)
    c7a0:	dc000615 	stw	r16,24(sp)
    c7a4:	10936104 	addi	r2,r2,19844
    c7a8:	dfc00915 	stw	ra,36(sp)
    c7ac:	2021883a 	mov	r16,r4
    c7b0:	3823883a 	mov	r17,r7
    c7b4:	14800017 	ldw	r18,0(r2)
    c7b8:	28001426 	beq	r5,zero,c80c <_wcrtomb_r+0x7c>
    c7bc:	d9400415 	stw	r5,16(sp)
    c7c0:	d9800515 	stw	r6,20(sp)
    c7c4:	0008bf00 	call	8bf0 <__locale_charset>
    c7c8:	d9400417 	ldw	r5,16(sp)
    c7cc:	d9800517 	ldw	r6,20(sp)
    c7d0:	8009883a 	mov	r4,r16
    c7d4:	dc400015 	stw	r17,0(sp)
    c7d8:	100f883a 	mov	r7,r2
    c7dc:	903ee83a 	callr	r18
    c7e0:	00ffffc4 	movi	r3,-1
    c7e4:	10c0031e 	bne	r2,r3,c7f4 <_wcrtomb_r+0x64>
    c7e8:	88000015 	stw	zero,0(r17)
    c7ec:	00c02284 	movi	r3,138
    c7f0:	80c00015 	stw	r3,0(r16)
    c7f4:	dfc00917 	ldw	ra,36(sp)
    c7f8:	dc800817 	ldw	r18,32(sp)
    c7fc:	dc400717 	ldw	r17,28(sp)
    c800:	dc000617 	ldw	r16,24(sp)
    c804:	dec00a04 	addi	sp,sp,40
    c808:	f800283a 	ret
    c80c:	0008bf00 	call	8bf0 <__locale_charset>
    c810:	8009883a 	mov	r4,r16
    c814:	dc400015 	stw	r17,0(sp)
    c818:	d9400104 	addi	r5,sp,4
    c81c:	000d883a 	mov	r6,zero
    c820:	100f883a 	mov	r7,r2
    c824:	903ee83a 	callr	r18
    c828:	003fed06 	br	c7e0 <__alt_data_end+0xfffb70b0>

0000c82c <wcrtomb>:
    c82c:	defff504 	addi	sp,sp,-44
    c830:	dc400515 	stw	r17,20(sp)
    c834:	dc000415 	stw	r16,16(sp)
    c838:	dfc00a15 	stw	ra,40(sp)
    c83c:	dd400915 	stw	r21,36(sp)
    c840:	dd000815 	stw	r20,32(sp)
    c844:	dcc00715 	stw	r19,28(sp)
    c848:	dc800615 	stw	r18,24(sp)
    c84c:	2021883a 	mov	r16,r4
    c850:	3023883a 	mov	r17,r6
    c854:	20001d26 	beq	r4,zero,c8cc <wcrtomb+0xa0>
    c858:	04800074 	movhi	r18,1
    c85c:	94935f04 	addi	r18,r18,19836
    c860:	00800074 	movhi	r2,1
    c864:	95400017 	ldw	r21,0(r18)
    c868:	10936104 	addi	r2,r2,19844
    c86c:	15000017 	ldw	r20,0(r2)
    c870:	2827883a 	mov	r19,r5
    c874:	0008bf00 	call	8bf0 <__locale_charset>
    c878:	a809883a 	mov	r4,r21
    c87c:	dc400015 	stw	r17,0(sp)
    c880:	800b883a 	mov	r5,r16
    c884:	980d883a 	mov	r6,r19
    c888:	100f883a 	mov	r7,r2
    c88c:	a03ee83a 	callr	r20
    c890:	00ffffc4 	movi	r3,-1
    c894:	10c0041e 	bne	r2,r3,c8a8 <wcrtomb+0x7c>
    c898:	90c00017 	ldw	r3,0(r18)
    c89c:	01002284 	movi	r4,138
    c8a0:	88000015 	stw	zero,0(r17)
    c8a4:	19000015 	stw	r4,0(r3)
    c8a8:	dfc00a17 	ldw	ra,40(sp)
    c8ac:	dd400917 	ldw	r21,36(sp)
    c8b0:	dd000817 	ldw	r20,32(sp)
    c8b4:	dcc00717 	ldw	r19,28(sp)
    c8b8:	dc800617 	ldw	r18,24(sp)
    c8bc:	dc400517 	ldw	r17,20(sp)
    c8c0:	dc000417 	ldw	r16,16(sp)
    c8c4:	dec00b04 	addi	sp,sp,44
    c8c8:	f800283a 	ret
    c8cc:	04800074 	movhi	r18,1
    c8d0:	94935f04 	addi	r18,r18,19836
    c8d4:	00800074 	movhi	r2,1
    c8d8:	94c00017 	ldw	r19,0(r18)
    c8dc:	10936104 	addi	r2,r2,19844
    c8e0:	14000017 	ldw	r16,0(r2)
    c8e4:	0008bf00 	call	8bf0 <__locale_charset>
    c8e8:	9809883a 	mov	r4,r19
    c8ec:	dc400015 	stw	r17,0(sp)
    c8f0:	d9400104 	addi	r5,sp,4
    c8f4:	000d883a 	mov	r6,zero
    c8f8:	100f883a 	mov	r7,r2
    c8fc:	803ee83a 	callr	r16
    c900:	003fe306 	br	c890 <__alt_data_end+0xfffb7160>

0000c904 <__ascii_wctomb>:
    c904:	28000526 	beq	r5,zero,c91c <__ascii_wctomb+0x18>
    c908:	00803fc4 	movi	r2,255
    c90c:	11800536 	bltu	r2,r6,c924 <__ascii_wctomb+0x20>
    c910:	29800005 	stb	r6,0(r5)
    c914:	00800044 	movi	r2,1
    c918:	f800283a 	ret
    c91c:	0005883a 	mov	r2,zero
    c920:	f800283a 	ret
    c924:	00802284 	movi	r2,138
    c928:	20800015 	stw	r2,0(r4)
    c92c:	00bfffc4 	movi	r2,-1
    c930:	f800283a 	ret

0000c934 <_wctomb_r>:
    c934:	00800074 	movhi	r2,1
    c938:	defff904 	addi	sp,sp,-28
    c93c:	10936104 	addi	r2,r2,19844
    c940:	dfc00615 	stw	ra,24(sp)
    c944:	dc400515 	stw	r17,20(sp)
    c948:	dc000415 	stw	r16,16(sp)
    c94c:	3823883a 	mov	r17,r7
    c950:	14000017 	ldw	r16,0(r2)
    c954:	d9000115 	stw	r4,4(sp)
    c958:	d9400215 	stw	r5,8(sp)
    c95c:	d9800315 	stw	r6,12(sp)
    c960:	0008bf00 	call	8bf0 <__locale_charset>
    c964:	d9000117 	ldw	r4,4(sp)
    c968:	d9400217 	ldw	r5,8(sp)
    c96c:	d9800317 	ldw	r6,12(sp)
    c970:	dc400015 	stw	r17,0(sp)
    c974:	100f883a 	mov	r7,r2
    c978:	803ee83a 	callr	r16
    c97c:	dfc00617 	ldw	ra,24(sp)
    c980:	dc400517 	ldw	r17,20(sp)
    c984:	dc000417 	ldw	r16,16(sp)
    c988:	dec00704 	addi	sp,sp,28
    c98c:	f800283a 	ret

0000c990 <__muldi3>:
    c990:	defff604 	addi	sp,sp,-40
    c994:	dd800615 	stw	r22,24(sp)
    c998:	dd400515 	stw	r21,20(sp)
    c99c:	25bfffcc 	andi	r22,r4,65535
    c9a0:	357fffcc 	andi	r21,r6,65535
    c9a4:	dc400115 	stw	r17,4(sp)
    c9a8:	2022d43a 	srli	r17,r4,16
    c9ac:	dcc00315 	stw	r19,12(sp)
    c9b0:	dc800215 	stw	r18,8(sp)
    c9b4:	2027883a 	mov	r19,r4
    c9b8:	2825883a 	mov	r18,r5
    c9bc:	a809883a 	mov	r4,r21
    c9c0:	b00b883a 	mov	r5,r22
    c9c4:	dfc00915 	stw	ra,36(sp)
    c9c8:	df000815 	stw	fp,32(sp)
    c9cc:	ddc00715 	stw	r23,28(sp)
    c9d0:	3839883a 	mov	fp,r7
    c9d4:	302ed43a 	srli	r23,r6,16
    c9d8:	dd000415 	stw	r20,16(sp)
    c9dc:	dc000015 	stw	r16,0(sp)
    c9e0:	3029883a 	mov	r20,r6
    c9e4:	000d6f80 	call	d6f8 <__mulsi3>
    c9e8:	a809883a 	mov	r4,r21
    c9ec:	880b883a 	mov	r5,r17
    c9f0:	1021883a 	mov	r16,r2
    c9f4:	000d6f80 	call	d6f8 <__mulsi3>
    c9f8:	880b883a 	mov	r5,r17
    c9fc:	b809883a 	mov	r4,r23
    ca00:	102b883a 	mov	r21,r2
    ca04:	000d6f80 	call	d6f8 <__mulsi3>
    ca08:	b809883a 	mov	r4,r23
    ca0c:	b00b883a 	mov	r5,r22
    ca10:	1023883a 	mov	r17,r2
    ca14:	000d6f80 	call	d6f8 <__mulsi3>
    ca18:	8012d43a 	srli	r9,r16,16
    ca1c:	a885883a 	add	r2,r21,r2
    ca20:	1251883a 	add	r8,r2,r9
    ca24:	4540022e 	bgeu	r8,r21,ca30 <__muldi3+0xa0>
    ca28:	00800074 	movhi	r2,1
    ca2c:	88a3883a 	add	r17,r17,r2
    ca30:	4006d43a 	srli	r3,r8,16
    ca34:	4010943a 	slli	r8,r8,16
    ca38:	9809883a 	mov	r4,r19
    ca3c:	e00b883a 	mov	r5,fp
    ca40:	843fffcc 	andi	r16,r16,65535
    ca44:	88e3883a 	add	r17,r17,r3
    ca48:	4421883a 	add	r16,r8,r16
    ca4c:	000d6f80 	call	d6f8 <__mulsi3>
    ca50:	a009883a 	mov	r4,r20
    ca54:	900b883a 	mov	r5,r18
    ca58:	1027883a 	mov	r19,r2
    ca5c:	000d6f80 	call	d6f8 <__mulsi3>
    ca60:	9885883a 	add	r2,r19,r2
    ca64:	1447883a 	add	r3,r2,r17
    ca68:	8005883a 	mov	r2,r16
    ca6c:	dfc00917 	ldw	ra,36(sp)
    ca70:	df000817 	ldw	fp,32(sp)
    ca74:	ddc00717 	ldw	r23,28(sp)
    ca78:	dd800617 	ldw	r22,24(sp)
    ca7c:	dd400517 	ldw	r21,20(sp)
    ca80:	dd000417 	ldw	r20,16(sp)
    ca84:	dcc00317 	ldw	r19,12(sp)
    ca88:	dc800217 	ldw	r18,8(sp)
    ca8c:	dc400117 	ldw	r17,4(sp)
    ca90:	dc000017 	ldw	r16,0(sp)
    ca94:	dec00a04 	addi	sp,sp,40
    ca98:	f800283a 	ret

0000ca9c <__udivdi3>:
    ca9c:	defff504 	addi	sp,sp,-44
    caa0:	dcc00415 	stw	r19,16(sp)
    caa4:	dc000115 	stw	r16,4(sp)
    caa8:	dfc00a15 	stw	ra,40(sp)
    caac:	df000915 	stw	fp,36(sp)
    cab0:	ddc00815 	stw	r23,32(sp)
    cab4:	dd800715 	stw	r22,28(sp)
    cab8:	dd400615 	stw	r21,24(sp)
    cabc:	dd000515 	stw	r20,20(sp)
    cac0:	dc800315 	stw	r18,12(sp)
    cac4:	dc400215 	stw	r17,8(sp)
    cac8:	2027883a 	mov	r19,r4
    cacc:	2821883a 	mov	r16,r5
    cad0:	3800471e 	bne	r7,zero,cbf0 <__udivdi3+0x154>
    cad4:	3025883a 	mov	r18,r6
    cad8:	2023883a 	mov	r17,r4
    cadc:	2980592e 	bgeu	r5,r6,cc44 <__udivdi3+0x1a8>
    cae0:	00bfffd4 	movui	r2,65535
    cae4:	2829883a 	mov	r20,r5
    cae8:	1180b236 	bltu	r2,r6,cdb4 <__udivdi3+0x318>
    caec:	00803fc4 	movi	r2,255
    caf0:	1181622e 	bgeu	r2,r6,d07c <__udivdi3+0x5e0>
    caf4:	00800204 	movi	r2,8
    caf8:	1007883a 	mov	r3,r2
    cafc:	3084d83a 	srl	r2,r6,r2
    cb00:	01000074 	movhi	r4,1
    cb04:	210c4804 	addi	r4,r4,12576
    cb08:	2085883a 	add	r2,r4,r2
    cb0c:	11000003 	ldbu	r4,0(r2)
    cb10:	20c9883a 	add	r4,r4,r3
    cb14:	00c00804 	movi	r3,32
    cb18:	1907c83a 	sub	r3,r3,r4
    cb1c:	18000526 	beq	r3,zero,cb34 <__udivdi3+0x98>
    cb20:	80e0983a 	sll	r16,r16,r3
    cb24:	9908d83a 	srl	r4,r19,r4
    cb28:	30e4983a 	sll	r18,r6,r3
    cb2c:	98e2983a 	sll	r17,r19,r3
    cb30:	8128b03a 	or	r20,r16,r4
    cb34:	902ad43a 	srli	r21,r18,16
    cb38:	a009883a 	mov	r4,r20
    cb3c:	95bfffcc 	andi	r22,r18,65535
    cb40:	a80b883a 	mov	r5,r21
    cb44:	000352c0 	call	352c <__umodsi3>
    cb48:	a009883a 	mov	r4,r20
    cb4c:	a80b883a 	mov	r5,r21
    cb50:	102f883a 	mov	r23,r2
    cb54:	00035240 	call	3524 <__udivsi3>
    cb58:	1009883a 	mov	r4,r2
    cb5c:	b00b883a 	mov	r5,r22
    cb60:	1021883a 	mov	r16,r2
    cb64:	000d6f80 	call	d6f8 <__mulsi3>
    cb68:	b82e943a 	slli	r23,r23,16
    cb6c:	8808d43a 	srli	r4,r17,16
    cb70:	b906b03a 	or	r3,r23,r4
    cb74:	1880052e 	bgeu	r3,r2,cb8c <__udivdi3+0xf0>
    cb78:	1c87883a 	add	r3,r3,r18
    cb7c:	813fffc4 	addi	r4,r16,-1
    cb80:	1c800136 	bltu	r3,r18,cb88 <__udivdi3+0xec>
    cb84:	18815236 	bltu	r3,r2,d0d0 <__udivdi3+0x634>
    cb88:	2021883a 	mov	r16,r4
    cb8c:	18a7c83a 	sub	r19,r3,r2
    cb90:	9809883a 	mov	r4,r19
    cb94:	a80b883a 	mov	r5,r21
    cb98:	000352c0 	call	352c <__umodsi3>
    cb9c:	1029883a 	mov	r20,r2
    cba0:	9809883a 	mov	r4,r19
    cba4:	a80b883a 	mov	r5,r21
    cba8:	a028943a 	slli	r20,r20,16
    cbac:	00035240 	call	3524 <__udivsi3>
    cbb0:	1009883a 	mov	r4,r2
    cbb4:	b00b883a 	mov	r5,r22
    cbb8:	8c7fffcc 	andi	r17,r17,65535
    cbbc:	1027883a 	mov	r19,r2
    cbc0:	a462b03a 	or	r17,r20,r17
    cbc4:	000d6f80 	call	d6f8 <__mulsi3>
    cbc8:	8880052e 	bgeu	r17,r2,cbe0 <__udivdi3+0x144>
    cbcc:	8ca3883a 	add	r17,r17,r18
    cbd0:	98ffffc4 	addi	r3,r19,-1
    cbd4:	8c811036 	bltu	r17,r18,d018 <__udivdi3+0x57c>
    cbd8:	88810f2e 	bgeu	r17,r2,d018 <__udivdi3+0x57c>
    cbdc:	9cffff84 	addi	r19,r19,-2
    cbe0:	8020943a 	slli	r16,r16,16
    cbe4:	0007883a 	mov	r3,zero
    cbe8:	9c04b03a 	or	r2,r19,r16
    cbec:	00006006 	br	cd70 <__udivdi3+0x2d4>
    cbf0:	29c05d36 	bltu	r5,r7,cd68 <__udivdi3+0x2cc>
    cbf4:	00bfffd4 	movui	r2,65535
    cbf8:	11c0692e 	bgeu	r2,r7,cda0 <__udivdi3+0x304>
    cbfc:	00804034 	movhi	r2,256
    cc00:	10bfffc4 	addi	r2,r2,-1
    cc04:	11c10e2e 	bgeu	r2,r7,d040 <__udivdi3+0x5a4>
    cc08:	01400604 	movi	r5,24
    cc0c:	2811883a 	mov	r8,r5
    cc10:	394ad83a 	srl	r5,r7,r5
    cc14:	00800074 	movhi	r2,1
    cc18:	108c4804 	addi	r2,r2,12576
    cc1c:	114b883a 	add	r5,r2,r5
    cc20:	29400003 	ldbu	r5,0(r5)
    cc24:	00c00804 	movi	r3,32
    cc28:	2a0b883a 	add	r5,r5,r8
    cc2c:	196fc83a 	sub	r23,r3,r5
    cc30:	b8006b1e 	bne	r23,zero,cde0 <__udivdi3+0x344>
    cc34:	3c011436 	bltu	r7,r16,d088 <__udivdi3+0x5ec>
    cc38:	9985403a 	cmpgeu	r2,r19,r6
    cc3c:	0007883a 	mov	r3,zero
    cc40:	00004b06 	br	cd70 <__udivdi3+0x2d4>
    cc44:	3000041e 	bne	r6,zero,cc58 <__udivdi3+0x1bc>
    cc48:	01000044 	movi	r4,1
    cc4c:	000b883a 	mov	r5,zero
    cc50:	00035240 	call	3524 <__udivsi3>
    cc54:	1025883a 	mov	r18,r2
    cc58:	00bfffd4 	movui	r2,65535
    cc5c:	14805b2e 	bgeu	r2,r18,cdcc <__udivdi3+0x330>
    cc60:	00804034 	movhi	r2,256
    cc64:	10bfffc4 	addi	r2,r2,-1
    cc68:	1480fe2e 	bgeu	r2,r18,d064 <__udivdi3+0x5c8>
    cc6c:	00800604 	movi	r2,24
    cc70:	1007883a 	mov	r3,r2
    cc74:	9084d83a 	srl	r2,r18,r2
    cc78:	01000074 	movhi	r4,1
    cc7c:	210c4804 	addi	r4,r4,12576
    cc80:	2085883a 	add	r2,r4,r2
    cc84:	11800003 	ldbu	r6,0(r2)
    cc88:	01c00804 	movi	r7,32
    cc8c:	30c7883a 	add	r3,r6,r3
    cc90:	38cfc83a 	sub	r7,r7,r3
    cc94:	3800a71e 	bne	r7,zero,cf34 <__udivdi3+0x498>
    cc98:	9028d43a 	srli	r20,r18,16
    cc9c:	84a1c83a 	sub	r16,r16,r18
    cca0:	957fffcc 	andi	r21,r18,65535
    cca4:	00c00044 	movi	r3,1
    cca8:	8009883a 	mov	r4,r16
    ccac:	a00b883a 	mov	r5,r20
    ccb0:	d8c00015 	stw	r3,0(sp)
    ccb4:	000352c0 	call	352c <__umodsi3>
    ccb8:	8009883a 	mov	r4,r16
    ccbc:	a00b883a 	mov	r5,r20
    ccc0:	102d883a 	mov	r22,r2
    ccc4:	00035240 	call	3524 <__udivsi3>
    ccc8:	1009883a 	mov	r4,r2
    cccc:	a80b883a 	mov	r5,r21
    ccd0:	1021883a 	mov	r16,r2
    ccd4:	000d6f80 	call	d6f8 <__mulsi3>
    ccd8:	b02c943a 	slli	r22,r22,16
    ccdc:	880ed43a 	srli	r7,r17,16
    cce0:	d8c00017 	ldw	r3,0(sp)
    cce4:	b1ccb03a 	or	r6,r22,r7
    cce8:	3080052e 	bgeu	r6,r2,cd00 <__udivdi3+0x264>
    ccec:	348d883a 	add	r6,r6,r18
    ccf0:	813fffc4 	addi	r4,r16,-1
    ccf4:	34800136 	bltu	r6,r18,ccfc <__udivdi3+0x260>
    ccf8:	3080f236 	bltu	r6,r2,d0c4 <__udivdi3+0x628>
    ccfc:	2021883a 	mov	r16,r4
    cd00:	30a7c83a 	sub	r19,r6,r2
    cd04:	9809883a 	mov	r4,r19
    cd08:	a00b883a 	mov	r5,r20
    cd0c:	d8c00015 	stw	r3,0(sp)
    cd10:	000352c0 	call	352c <__umodsi3>
    cd14:	102d883a 	mov	r22,r2
    cd18:	9809883a 	mov	r4,r19
    cd1c:	a00b883a 	mov	r5,r20
    cd20:	b02c943a 	slli	r22,r22,16
    cd24:	00035240 	call	3524 <__udivsi3>
    cd28:	1009883a 	mov	r4,r2
    cd2c:	a80b883a 	mov	r5,r21
    cd30:	8c7fffcc 	andi	r17,r17,65535
    cd34:	1027883a 	mov	r19,r2
    cd38:	b462b03a 	or	r17,r22,r17
    cd3c:	000d6f80 	call	d6f8 <__mulsi3>
    cd40:	d8c00017 	ldw	r3,0(sp)
    cd44:	8880052e 	bgeu	r17,r2,cd5c <__udivdi3+0x2c0>
    cd48:	8ca3883a 	add	r17,r17,r18
    cd4c:	993fffc4 	addi	r4,r19,-1
    cd50:	8c80af36 	bltu	r17,r18,d010 <__udivdi3+0x574>
    cd54:	8880ae2e 	bgeu	r17,r2,d010 <__udivdi3+0x574>
    cd58:	9cffff84 	addi	r19,r19,-2
    cd5c:	8020943a 	slli	r16,r16,16
    cd60:	9c04b03a 	or	r2,r19,r16
    cd64:	00000206 	br	cd70 <__udivdi3+0x2d4>
    cd68:	0007883a 	mov	r3,zero
    cd6c:	0005883a 	mov	r2,zero
    cd70:	dfc00a17 	ldw	ra,40(sp)
    cd74:	df000917 	ldw	fp,36(sp)
    cd78:	ddc00817 	ldw	r23,32(sp)
    cd7c:	dd800717 	ldw	r22,28(sp)
    cd80:	dd400617 	ldw	r21,24(sp)
    cd84:	dd000517 	ldw	r20,20(sp)
    cd88:	dcc00417 	ldw	r19,16(sp)
    cd8c:	dc800317 	ldw	r18,12(sp)
    cd90:	dc400217 	ldw	r17,8(sp)
    cd94:	dc000117 	ldw	r16,4(sp)
    cd98:	dec00b04 	addi	sp,sp,44
    cd9c:	f800283a 	ret
    cda0:	00803fc4 	movi	r2,255
    cda4:	11c0a92e 	bgeu	r2,r7,d04c <__udivdi3+0x5b0>
    cda8:	01400204 	movi	r5,8
    cdac:	2811883a 	mov	r8,r5
    cdb0:	003f9706 	br	cc10 <__alt_data_end+0xfffb74e0>
    cdb4:	00804034 	movhi	r2,256
    cdb8:	10bfffc4 	addi	r2,r2,-1
    cdbc:	1180a62e 	bgeu	r2,r6,d058 <__udivdi3+0x5bc>
    cdc0:	00800604 	movi	r2,24
    cdc4:	1007883a 	mov	r3,r2
    cdc8:	003f4c06 	br	cafc <__alt_data_end+0xfffb73cc>
    cdcc:	00803fc4 	movi	r2,255
    cdd0:	1480a72e 	bgeu	r2,r18,d070 <__udivdi3+0x5d4>
    cdd4:	00800204 	movi	r2,8
    cdd8:	1007883a 	mov	r3,r2
    cddc:	003fa506 	br	cc74 <__alt_data_end+0xfffb7544>
    cde0:	3178d83a 	srl	fp,r6,r5
    cde4:	3dce983a 	sll	r7,r7,r23
    cde8:	8168d83a 	srl	r20,r16,r5
    cdec:	9950d83a 	srl	r8,r19,r5
    cdf0:	3f38b03a 	or	fp,r7,fp
    cdf4:	e024d43a 	srli	r18,fp,16
    cdf8:	85e0983a 	sll	r16,r16,r23
    cdfc:	a009883a 	mov	r4,r20
    ce00:	900b883a 	mov	r5,r18
    ce04:	8220b03a 	or	r16,r16,r8
    ce08:	35ea983a 	sll	r21,r6,r23
    ce0c:	000352c0 	call	352c <__umodsi3>
    ce10:	a009883a 	mov	r4,r20
    ce14:	900b883a 	mov	r5,r18
    ce18:	1023883a 	mov	r17,r2
    ce1c:	e5bfffcc 	andi	r22,fp,65535
    ce20:	00035240 	call	3524 <__udivsi3>
    ce24:	1009883a 	mov	r4,r2
    ce28:	b00b883a 	mov	r5,r22
    ce2c:	1029883a 	mov	r20,r2
    ce30:	000d6f80 	call	d6f8 <__mulsi3>
    ce34:	8806943a 	slli	r3,r17,16
    ce38:	8014d43a 	srli	r10,r16,16
    ce3c:	1a92b03a 	or	r9,r3,r10
    ce40:	4880042e 	bgeu	r9,r2,ce54 <__udivdi3+0x3b8>
    ce44:	4f13883a 	add	r9,r9,fp
    ce48:	a0ffffc4 	addi	r3,r20,-1
    ce4c:	4f00952e 	bgeu	r9,fp,d0a4 <__udivdi3+0x608>
    ce50:	1829883a 	mov	r20,r3
    ce54:	48a3c83a 	sub	r17,r9,r2
    ce58:	8809883a 	mov	r4,r17
    ce5c:	900b883a 	mov	r5,r18
    ce60:	000352c0 	call	352c <__umodsi3>
    ce64:	8809883a 	mov	r4,r17
    ce68:	900b883a 	mov	r5,r18
    ce6c:	d8800015 	stw	r2,0(sp)
    ce70:	00035240 	call	3524 <__udivsi3>
    ce74:	1009883a 	mov	r4,r2
    ce78:	b00b883a 	mov	r5,r22
    ce7c:	1023883a 	mov	r17,r2
    ce80:	000d6f80 	call	d6f8 <__mulsi3>
    ce84:	d8c00017 	ldw	r3,0(sp)
    ce88:	823fffcc 	andi	r8,r16,65535
    ce8c:	1806943a 	slli	r3,r3,16
    ce90:	1a20b03a 	or	r16,r3,r8
    ce94:	8080042e 	bgeu	r16,r2,cea8 <__udivdi3+0x40c>
    ce98:	8721883a 	add	r16,r16,fp
    ce9c:	88ffffc4 	addi	r3,r17,-1
    cea0:	87007c2e 	bgeu	r16,fp,d094 <__udivdi3+0x5f8>
    cea4:	1823883a 	mov	r17,r3
    cea8:	a028943a 	slli	r20,r20,16
    ceac:	acbfffcc 	andi	r18,r21,65535
    ceb0:	900b883a 	mov	r5,r18
    ceb4:	8d28b03a 	or	r20,r17,r20
    ceb8:	a022d43a 	srli	r17,r20,16
    cebc:	a5bfffcc 	andi	r22,r20,65535
    cec0:	b009883a 	mov	r4,r22
    cec4:	a82ad43a 	srli	r21,r21,16
    cec8:	80a1c83a 	sub	r16,r16,r2
    cecc:	000d6f80 	call	d6f8 <__mulsi3>
    ced0:	8809883a 	mov	r4,r17
    ced4:	900b883a 	mov	r5,r18
    ced8:	1039883a 	mov	fp,r2
    cedc:	000d6f80 	call	d6f8 <__mulsi3>
    cee0:	8809883a 	mov	r4,r17
    cee4:	a80b883a 	mov	r5,r21
    cee8:	1025883a 	mov	r18,r2
    ceec:	000d6f80 	call	d6f8 <__mulsi3>
    cef0:	b009883a 	mov	r4,r22
    cef4:	a80b883a 	mov	r5,r21
    cef8:	1023883a 	mov	r17,r2
    cefc:	000d6f80 	call	d6f8 <__mulsi3>
    cf00:	e006d43a 	srli	r3,fp,16
    cf04:	9085883a 	add	r2,r18,r2
    cf08:	10c7883a 	add	r3,r2,r3
    cf0c:	1c80022e 	bgeu	r3,r18,cf18 <__udivdi3+0x47c>
    cf10:	00800074 	movhi	r2,1
    cf14:	88a3883a 	add	r17,r17,r2
    cf18:	1808d43a 	srli	r4,r3,16
    cf1c:	8909883a 	add	r4,r17,r4
    cf20:	81004436 	bltu	r16,r4,d034 <__udivdi3+0x598>
    cf24:	81003e26 	beq	r16,r4,d020 <__udivdi3+0x584>
    cf28:	a005883a 	mov	r2,r20
    cf2c:	0007883a 	mov	r3,zero
    cf30:	003f8f06 	br	cd70 <__alt_data_end+0xfffb7640>
    cf34:	91e4983a 	sll	r18,r18,r7
    cf38:	80eed83a 	srl	r23,r16,r3
    cf3c:	81cc983a 	sll	r6,r16,r7
    cf40:	9028d43a 	srli	r20,r18,16
    cf44:	98c6d83a 	srl	r3,r19,r3
    cf48:	b809883a 	mov	r4,r23
    cf4c:	a00b883a 	mov	r5,r20
    cf50:	30ecb03a 	or	r22,r6,r3
    cf54:	99e2983a 	sll	r17,r19,r7
    cf58:	000352c0 	call	352c <__umodsi3>
    cf5c:	b809883a 	mov	r4,r23
    cf60:	a00b883a 	mov	r5,r20
    cf64:	1021883a 	mov	r16,r2
    cf68:	957fffcc 	andi	r21,r18,65535
    cf6c:	00035240 	call	3524 <__udivsi3>
    cf70:	a80b883a 	mov	r5,r21
    cf74:	1009883a 	mov	r4,r2
    cf78:	102f883a 	mov	r23,r2
    cf7c:	000d6f80 	call	d6f8 <__mulsi3>
    cf80:	8020943a 	slli	r16,r16,16
    cf84:	b00ad43a 	srli	r5,r22,16
    cf88:	814cb03a 	or	r6,r16,r5
    cf8c:	3080062e 	bgeu	r6,r2,cfa8 <__udivdi3+0x50c>
    cf90:	348d883a 	add	r6,r6,r18
    cf94:	b8ffffc4 	addi	r3,r23,-1
    cf98:	34804836 	bltu	r6,r18,d0bc <__udivdi3+0x620>
    cf9c:	3080472e 	bgeu	r6,r2,d0bc <__udivdi3+0x620>
    cfa0:	bdffff84 	addi	r23,r23,-2
    cfa4:	348d883a 	add	r6,r6,r18
    cfa8:	30a7c83a 	sub	r19,r6,r2
    cfac:	9809883a 	mov	r4,r19
    cfb0:	a00b883a 	mov	r5,r20
    cfb4:	000352c0 	call	352c <__umodsi3>
    cfb8:	9809883a 	mov	r4,r19
    cfbc:	a00b883a 	mov	r5,r20
    cfc0:	1039883a 	mov	fp,r2
    cfc4:	00035240 	call	3524 <__udivsi3>
    cfc8:	1009883a 	mov	r4,r2
    cfcc:	a80b883a 	mov	r5,r21
    cfd0:	e038943a 	slli	fp,fp,16
    cfd4:	1027883a 	mov	r19,r2
    cfd8:	000d6f80 	call	d6f8 <__mulsi3>
    cfdc:	b1bfffcc 	andi	r6,r22,65535
    cfe0:	e18cb03a 	or	r6,fp,r6
    cfe4:	3080062e 	bgeu	r6,r2,d000 <__udivdi3+0x564>
    cfe8:	348d883a 	add	r6,r6,r18
    cfec:	98ffffc4 	addi	r3,r19,-1
    cff0:	34803036 	bltu	r6,r18,d0b4 <__udivdi3+0x618>
    cff4:	30802f2e 	bgeu	r6,r2,d0b4 <__udivdi3+0x618>
    cff8:	9cffff84 	addi	r19,r19,-2
    cffc:	348d883a 	add	r6,r6,r18
    d000:	b82e943a 	slli	r23,r23,16
    d004:	30a1c83a 	sub	r16,r6,r2
    d008:	9dc6b03a 	or	r3,r19,r23
    d00c:	003f2606 	br	cca8 <__alt_data_end+0xfffb7578>
    d010:	2027883a 	mov	r19,r4
    d014:	003f5106 	br	cd5c <__alt_data_end+0xfffb762c>
    d018:	1827883a 	mov	r19,r3
    d01c:	003ef006 	br	cbe0 <__alt_data_end+0xfffb74b0>
    d020:	1808943a 	slli	r4,r3,16
    d024:	9dc6983a 	sll	r3,r19,r23
    d028:	e73fffcc 	andi	fp,fp,65535
    d02c:	2709883a 	add	r4,r4,fp
    d030:	193fbd2e 	bgeu	r3,r4,cf28 <__alt_data_end+0xfffb77f8>
    d034:	a0bfffc4 	addi	r2,r20,-1
    d038:	0007883a 	mov	r3,zero
    d03c:	003f4c06 	br	cd70 <__alt_data_end+0xfffb7640>
    d040:	01400404 	movi	r5,16
    d044:	2811883a 	mov	r8,r5
    d048:	003ef106 	br	cc10 <__alt_data_end+0xfffb74e0>
    d04c:	000b883a 	mov	r5,zero
    d050:	0011883a 	mov	r8,zero
    d054:	003eee06 	br	cc10 <__alt_data_end+0xfffb74e0>
    d058:	00800404 	movi	r2,16
    d05c:	1007883a 	mov	r3,r2
    d060:	003ea606 	br	cafc <__alt_data_end+0xfffb73cc>
    d064:	00800404 	movi	r2,16
    d068:	1007883a 	mov	r3,r2
    d06c:	003f0106 	br	cc74 <__alt_data_end+0xfffb7544>
    d070:	0005883a 	mov	r2,zero
    d074:	0007883a 	mov	r3,zero
    d078:	003efe06 	br	cc74 <__alt_data_end+0xfffb7544>
    d07c:	0005883a 	mov	r2,zero
    d080:	0007883a 	mov	r3,zero
    d084:	003e9d06 	br	cafc <__alt_data_end+0xfffb73cc>
    d088:	0007883a 	mov	r3,zero
    d08c:	00800044 	movi	r2,1
    d090:	003f3706 	br	cd70 <__alt_data_end+0xfffb7640>
    d094:	80bf832e 	bgeu	r16,r2,cea4 <__alt_data_end+0xfffb7774>
    d098:	8c7fff84 	addi	r17,r17,-2
    d09c:	8721883a 	add	r16,r16,fp
    d0a0:	003f8106 	br	cea8 <__alt_data_end+0xfffb7778>
    d0a4:	48bf6a2e 	bgeu	r9,r2,ce50 <__alt_data_end+0xfffb7720>
    d0a8:	a53fff84 	addi	r20,r20,-2
    d0ac:	4f13883a 	add	r9,r9,fp
    d0b0:	003f6806 	br	ce54 <__alt_data_end+0xfffb7724>
    d0b4:	1827883a 	mov	r19,r3
    d0b8:	003fd106 	br	d000 <__alt_data_end+0xfffb78d0>
    d0bc:	182f883a 	mov	r23,r3
    d0c0:	003fb906 	br	cfa8 <__alt_data_end+0xfffb7878>
    d0c4:	843fff84 	addi	r16,r16,-2
    d0c8:	348d883a 	add	r6,r6,r18
    d0cc:	003f0c06 	br	cd00 <__alt_data_end+0xfffb75d0>
    d0d0:	843fff84 	addi	r16,r16,-2
    d0d4:	1c87883a 	add	r3,r3,r18
    d0d8:	003eac06 	br	cb8c <__alt_data_end+0xfffb745c>

0000d0dc <__umoddi3>:
    d0dc:	defff404 	addi	sp,sp,-48
    d0e0:	dd800815 	stw	r22,32(sp)
    d0e4:	dc400315 	stw	r17,12(sp)
    d0e8:	dc000215 	stw	r16,8(sp)
    d0ec:	dfc00b15 	stw	ra,44(sp)
    d0f0:	df000a15 	stw	fp,40(sp)
    d0f4:	ddc00915 	stw	r23,36(sp)
    d0f8:	dd400715 	stw	r21,28(sp)
    d0fc:	dd000615 	stw	r20,24(sp)
    d100:	dcc00515 	stw	r19,20(sp)
    d104:	dc800415 	stw	r18,16(sp)
    d108:	2021883a 	mov	r16,r4
    d10c:	2823883a 	mov	r17,r5
    d110:	282d883a 	mov	r22,r5
    d114:	38003c1e 	bne	r7,zero,d208 <__umoddi3+0x12c>
    d118:	3027883a 	mov	r19,r6
    d11c:	2029883a 	mov	r20,r4
    d120:	2980522e 	bgeu	r5,r6,d26c <__umoddi3+0x190>
    d124:	00bfffd4 	movui	r2,65535
    d128:	1180a436 	bltu	r2,r6,d3bc <__umoddi3+0x2e0>
    d12c:	00803fc4 	movi	r2,255
    d130:	11815e2e 	bgeu	r2,r6,d6ac <__umoddi3+0x5d0>
    d134:	01400204 	movi	r5,8
    d138:	2805883a 	mov	r2,r5
    d13c:	314ad83a 	srl	r5,r6,r5
    d140:	00c00074 	movhi	r3,1
    d144:	18cc4804 	addi	r3,r3,12576
    d148:	194b883a 	add	r5,r3,r5
    d14c:	29000003 	ldbu	r4,0(r5)
    d150:	2089883a 	add	r4,r4,r2
    d154:	00800804 	movi	r2,32
    d158:	1105c83a 	sub	r2,r2,r4
    d15c:	10010c26 	beq	r2,zero,d590 <__umoddi3+0x4b4>
    d160:	88a2983a 	sll	r17,r17,r2
    d164:	8108d83a 	srl	r4,r16,r4
    d168:	30a6983a 	sll	r19,r6,r2
    d16c:	80a8983a 	sll	r20,r16,r2
    d170:	1025883a 	mov	r18,r2
    d174:	892cb03a 	or	r22,r17,r4
    d178:	9822d43a 	srli	r17,r19,16
    d17c:	b009883a 	mov	r4,r22
    d180:	9d7fffcc 	andi	r21,r19,65535
    d184:	880b883a 	mov	r5,r17
    d188:	000352c0 	call	352c <__umodsi3>
    d18c:	b009883a 	mov	r4,r22
    d190:	880b883a 	mov	r5,r17
    d194:	102f883a 	mov	r23,r2
    d198:	00035240 	call	3524 <__udivsi3>
    d19c:	1009883a 	mov	r4,r2
    d1a0:	a80b883a 	mov	r5,r21
    d1a4:	000d6f80 	call	d6f8 <__mulsi3>
    d1a8:	b82e943a 	slli	r23,r23,16
    d1ac:	a008d43a 	srli	r4,r20,16
    d1b0:	b906b03a 	or	r3,r23,r4
    d1b4:	1880042e 	bgeu	r3,r2,d1c8 <__umoddi3+0xec>
    d1b8:	1cc7883a 	add	r3,r3,r19
    d1bc:	1cc00236 	bltu	r3,r19,d1c8 <__umoddi3+0xec>
    d1c0:	1880012e 	bgeu	r3,r2,d1c8 <__umoddi3+0xec>
    d1c4:	1cc7883a 	add	r3,r3,r19
    d1c8:	18a1c83a 	sub	r16,r3,r2
    d1cc:	8009883a 	mov	r4,r16
    d1d0:	880b883a 	mov	r5,r17
    d1d4:	000352c0 	call	352c <__umodsi3>
    d1d8:	8009883a 	mov	r4,r16
    d1dc:	880b883a 	mov	r5,r17
    d1e0:	102d883a 	mov	r22,r2
    d1e4:	00035240 	call	3524 <__udivsi3>
    d1e8:	1009883a 	mov	r4,r2
    d1ec:	a80b883a 	mov	r5,r21
    d1f0:	b02c943a 	slli	r22,r22,16
    d1f4:	000d6f80 	call	d6f8 <__mulsi3>
    d1f8:	a13fffcc 	andi	r4,r20,65535
    d1fc:	b106b03a 	or	r3,r22,r4
    d200:	1880572e 	bgeu	r3,r2,d360 <__umoddi3+0x284>
    d204:	00005206 	br	d350 <__umoddi3+0x274>
    d208:	29c05936 	bltu	r5,r7,d370 <__umoddi3+0x294>
    d20c:	00bfffd4 	movui	r2,65535
    d210:	11c0652e 	bgeu	r2,r7,d3a8 <__umoddi3+0x2cc>
    d214:	00804034 	movhi	r2,256
    d218:	10bfffc4 	addi	r2,r2,-1
    d21c:	11c1172e 	bgeu	r2,r7,d67c <__umoddi3+0x5a0>
    d220:	01400604 	movi	r5,24
    d224:	282b883a 	mov	r21,r5
    d228:	394ad83a 	srl	r5,r7,r5
    d22c:	00c00074 	movhi	r3,1
    d230:	18cc4804 	addi	r3,r3,12576
    d234:	194b883a 	add	r5,r3,r5
    d238:	28800003 	ldbu	r2,0(r5)
    d23c:	00c00804 	movi	r3,32
    d240:	156b883a 	add	r21,r2,r21
    d244:	1d69c83a 	sub	r20,r3,r21
    d248:	a000671e 	bne	r20,zero,d3e8 <__umoddi3+0x30c>
    d24c:	3c400136 	bltu	r7,r17,d254 <__umoddi3+0x178>
    d250:	81812336 	bltu	r16,r6,d6e0 <__umoddi3+0x604>
    d254:	8185c83a 	sub	r2,r16,r6
    d258:	89e3c83a 	sub	r17,r17,r7
    d25c:	8087803a 	cmpltu	r3,r16,r2
    d260:	88edc83a 	sub	r22,r17,r3
    d264:	b007883a 	mov	r3,r22
    d268:	00004306 	br	d378 <__umoddi3+0x29c>
    d26c:	3000041e 	bne	r6,zero,d280 <__umoddi3+0x1a4>
    d270:	01000044 	movi	r4,1
    d274:	000b883a 	mov	r5,zero
    d278:	00035240 	call	3524 <__udivsi3>
    d27c:	1027883a 	mov	r19,r2
    d280:	00bfffd4 	movui	r2,65535
    d284:	14c0532e 	bgeu	r2,r19,d3d4 <__umoddi3+0x2f8>
    d288:	00804034 	movhi	r2,256
    d28c:	10bfffc4 	addi	r2,r2,-1
    d290:	14c1032e 	bgeu	r2,r19,d6a0 <__umoddi3+0x5c4>
    d294:	00800604 	movi	r2,24
    d298:	1007883a 	mov	r3,r2
    d29c:	9884d83a 	srl	r2,r19,r2
    d2a0:	01000074 	movhi	r4,1
    d2a4:	210c4804 	addi	r4,r4,12576
    d2a8:	2085883a 	add	r2,r4,r2
    d2ac:	11000003 	ldbu	r4,0(r2)
    d2b0:	00800804 	movi	r2,32
    d2b4:	20c7883a 	add	r3,r4,r3
    d2b8:	10c5c83a 	sub	r2,r2,r3
    d2bc:	1000b61e 	bne	r2,zero,d598 <__umoddi3+0x4bc>
    d2c0:	982ad43a 	srli	r21,r19,16
    d2c4:	8ce3c83a 	sub	r17,r17,r19
    d2c8:	9dbfffcc 	andi	r22,r19,65535
    d2cc:	0025883a 	mov	r18,zero
    d2d0:	8809883a 	mov	r4,r17
    d2d4:	a80b883a 	mov	r5,r21
    d2d8:	000352c0 	call	352c <__umodsi3>
    d2dc:	8809883a 	mov	r4,r17
    d2e0:	a80b883a 	mov	r5,r21
    d2e4:	102f883a 	mov	r23,r2
    d2e8:	00035240 	call	3524 <__udivsi3>
    d2ec:	1009883a 	mov	r4,r2
    d2f0:	b00b883a 	mov	r5,r22
    d2f4:	000d6f80 	call	d6f8 <__mulsi3>
    d2f8:	b82e943a 	slli	r23,r23,16
    d2fc:	a008d43a 	srli	r4,r20,16
    d300:	b906b03a 	or	r3,r23,r4
    d304:	1880032e 	bgeu	r3,r2,d314 <__umoddi3+0x238>
    d308:	1cc7883a 	add	r3,r3,r19
    d30c:	1cc00136 	bltu	r3,r19,d314 <__umoddi3+0x238>
    d310:	1880f136 	bltu	r3,r2,d6d8 <__umoddi3+0x5fc>
    d314:	18a1c83a 	sub	r16,r3,r2
    d318:	8009883a 	mov	r4,r16
    d31c:	a80b883a 	mov	r5,r21
    d320:	000352c0 	call	352c <__umodsi3>
    d324:	8009883a 	mov	r4,r16
    d328:	a80b883a 	mov	r5,r21
    d32c:	1023883a 	mov	r17,r2
    d330:	00035240 	call	3524 <__udivsi3>
    d334:	1009883a 	mov	r4,r2
    d338:	b00b883a 	mov	r5,r22
    d33c:	8822943a 	slli	r17,r17,16
    d340:	000d6f80 	call	d6f8 <__mulsi3>
    d344:	a13fffcc 	andi	r4,r20,65535
    d348:	8906b03a 	or	r3,r17,r4
    d34c:	1880042e 	bgeu	r3,r2,d360 <__umoddi3+0x284>
    d350:	1cc7883a 	add	r3,r3,r19
    d354:	1cc00236 	bltu	r3,r19,d360 <__umoddi3+0x284>
    d358:	1880012e 	bgeu	r3,r2,d360 <__umoddi3+0x284>
    d35c:	1cc7883a 	add	r3,r3,r19
    d360:	1887c83a 	sub	r3,r3,r2
    d364:	1c84d83a 	srl	r2,r3,r18
    d368:	0007883a 	mov	r3,zero
    d36c:	00000206 	br	d378 <__umoddi3+0x29c>
    d370:	2005883a 	mov	r2,r4
    d374:	2807883a 	mov	r3,r5
    d378:	dfc00b17 	ldw	ra,44(sp)
    d37c:	df000a17 	ldw	fp,40(sp)
    d380:	ddc00917 	ldw	r23,36(sp)
    d384:	dd800817 	ldw	r22,32(sp)
    d388:	dd400717 	ldw	r21,28(sp)
    d38c:	dd000617 	ldw	r20,24(sp)
    d390:	dcc00517 	ldw	r19,20(sp)
    d394:	dc800417 	ldw	r18,16(sp)
    d398:	dc400317 	ldw	r17,12(sp)
    d39c:	dc000217 	ldw	r16,8(sp)
    d3a0:	dec00c04 	addi	sp,sp,48
    d3a4:	f800283a 	ret
    d3a8:	00803fc4 	movi	r2,255
    d3ac:	11c0b02e 	bgeu	r2,r7,d670 <__umoddi3+0x594>
    d3b0:	01400204 	movi	r5,8
    d3b4:	282b883a 	mov	r21,r5
    d3b8:	003f9b06 	br	d228 <__alt_data_end+0xfffb7af8>
    d3bc:	00804034 	movhi	r2,256
    d3c0:	10bfffc4 	addi	r2,r2,-1
    d3c4:	1180b02e 	bgeu	r2,r6,d688 <__umoddi3+0x5ac>
    d3c8:	01400604 	movi	r5,24
    d3cc:	2805883a 	mov	r2,r5
    d3d0:	003f5a06 	br	d13c <__alt_data_end+0xfffb7a0c>
    d3d4:	00803fc4 	movi	r2,255
    d3d8:	14c0ae2e 	bgeu	r2,r19,d694 <__umoddi3+0x5b8>
    d3dc:	00800204 	movi	r2,8
    d3e0:	1007883a 	mov	r3,r2
    d3e4:	003fad06 	br	d29c <__alt_data_end+0xfffb7b6c>
    d3e8:	3d0a983a 	sll	r5,r7,r20
    d3ec:	356cd83a 	srl	r22,r6,r21
    d3f0:	8d78d83a 	srl	fp,r17,r21
    d3f4:	8d10983a 	sll	r8,r17,r20
    d3f8:	2dacb03a 	or	r22,r5,r22
    d3fc:	b02ed43a 	srli	r23,r22,16
    d400:	8564d83a 	srl	r18,r16,r21
    d404:	e009883a 	mov	r4,fp
    d408:	b80b883a 	mov	r5,r23
    d40c:	44a4b03a 	or	r18,r8,r18
    d410:	3526983a 	sll	r19,r6,r20
    d414:	000352c0 	call	352c <__umodsi3>
    d418:	e009883a 	mov	r4,fp
    d41c:	b80b883a 	mov	r5,r23
    d420:	b47fffcc 	andi	r17,r22,65535
    d424:	d8800015 	stw	r2,0(sp)
    d428:	00035240 	call	3524 <__udivsi3>
    d42c:	1009883a 	mov	r4,r2
    d430:	880b883a 	mov	r5,r17
    d434:	1039883a 	mov	fp,r2
    d438:	000d6f80 	call	d6f8 <__mulsi3>
    d43c:	d9800017 	ldw	r6,0(sp)
    d440:	9008d43a 	srli	r4,r18,16
    d444:	8520983a 	sll	r16,r16,r20
    d448:	300c943a 	slli	r6,r6,16
    d44c:	3106b03a 	or	r3,r6,r4
    d450:	1880042e 	bgeu	r3,r2,d464 <__umoddi3+0x388>
    d454:	1d87883a 	add	r3,r3,r22
    d458:	e13fffc4 	addi	r4,fp,-1
    d45c:	1d809a2e 	bgeu	r3,r22,d6c8 <__umoddi3+0x5ec>
    d460:	2039883a 	mov	fp,r4
    d464:	1887c83a 	sub	r3,r3,r2
    d468:	1809883a 	mov	r4,r3
    d46c:	b80b883a 	mov	r5,r23
    d470:	d8c00115 	stw	r3,4(sp)
    d474:	000352c0 	call	352c <__umodsi3>
    d478:	d8c00117 	ldw	r3,4(sp)
    d47c:	b80b883a 	mov	r5,r23
    d480:	d8800015 	stw	r2,0(sp)
    d484:	1809883a 	mov	r4,r3
    d488:	00035240 	call	3524 <__udivsi3>
    d48c:	880b883a 	mov	r5,r17
    d490:	1009883a 	mov	r4,r2
    d494:	102f883a 	mov	r23,r2
    d498:	000d6f80 	call	d6f8 <__mulsi3>
    d49c:	d9800017 	ldw	r6,0(sp)
    d4a0:	947fffcc 	andi	r17,r18,65535
    d4a4:	300c943a 	slli	r6,r6,16
    d4a8:	3464b03a 	or	r18,r6,r17
    d4ac:	9080042e 	bgeu	r18,r2,d4c0 <__umoddi3+0x3e4>
    d4b0:	95a5883a 	add	r18,r18,r22
    d4b4:	b8ffffc4 	addi	r3,r23,-1
    d4b8:	95807f2e 	bgeu	r18,r22,d6b8 <__umoddi3+0x5dc>
    d4bc:	182f883a 	mov	r23,r3
    d4c0:	e038943a 	slli	fp,fp,16
    d4c4:	980cd43a 	srli	r6,r19,16
    d4c8:	98ffffcc 	andi	r3,r19,65535
    d4cc:	bf38b03a 	or	fp,r23,fp
    d4d0:	e02ed43a 	srli	r23,fp,16
    d4d4:	e73fffcc 	andi	fp,fp,65535
    d4d8:	180b883a 	mov	r5,r3
    d4dc:	e009883a 	mov	r4,fp
    d4e0:	d9800015 	stw	r6,0(sp)
    d4e4:	d8c00115 	stw	r3,4(sp)
    d4e8:	90a5c83a 	sub	r18,r18,r2
    d4ec:	000d6f80 	call	d6f8 <__mulsi3>
    d4f0:	d8c00117 	ldw	r3,4(sp)
    d4f4:	b809883a 	mov	r4,r23
    d4f8:	1023883a 	mov	r17,r2
    d4fc:	180b883a 	mov	r5,r3
    d500:	000d6f80 	call	d6f8 <__mulsi3>
    d504:	d9800017 	ldw	r6,0(sp)
    d508:	b809883a 	mov	r4,r23
    d50c:	d8800115 	stw	r2,4(sp)
    d510:	300b883a 	mov	r5,r6
    d514:	302f883a 	mov	r23,r6
    d518:	000d6f80 	call	d6f8 <__mulsi3>
    d51c:	e009883a 	mov	r4,fp
    d520:	b80b883a 	mov	r5,r23
    d524:	d8800015 	stw	r2,0(sp)
    d528:	000d6f80 	call	d6f8 <__mulsi3>
    d52c:	d8c00117 	ldw	r3,4(sp)
    d530:	880cd43a 	srli	r6,r17,16
    d534:	d9c00017 	ldw	r7,0(sp)
    d538:	1885883a 	add	r2,r3,r2
    d53c:	118d883a 	add	r6,r2,r6
    d540:	30c0022e 	bgeu	r6,r3,d54c <__umoddi3+0x470>
    d544:	00800074 	movhi	r2,1
    d548:	388f883a 	add	r7,r7,r2
    d54c:	3006d43a 	srli	r3,r6,16
    d550:	300c943a 	slli	r6,r6,16
    d554:	8c7fffcc 	andi	r17,r17,65535
    d558:	38c7883a 	add	r3,r7,r3
    d55c:	3463883a 	add	r17,r6,r17
    d560:	90c03d36 	bltu	r18,r3,d658 <__umoddi3+0x57c>
    d564:	90c06026 	beq	r18,r3,d6e8 <__umoddi3+0x60c>
    d568:	90c9c83a 	sub	r4,r18,r3
    d56c:	880f883a 	mov	r7,r17
    d570:	81cfc83a 	sub	r7,r16,r7
    d574:	81c7803a 	cmpltu	r3,r16,r7
    d578:	20c7c83a 	sub	r3,r4,r3
    d57c:	1d44983a 	sll	r2,r3,r21
    d580:	3d0ed83a 	srl	r7,r7,r20
    d584:	1d06d83a 	srl	r3,r3,r20
    d588:	11c4b03a 	or	r2,r2,r7
    d58c:	003f7a06 	br	d378 <__alt_data_end+0xfffb7c48>
    d590:	0025883a 	mov	r18,zero
    d594:	003ef806 	br	d178 <__alt_data_end+0xfffb7a48>
    d598:	98a6983a 	sll	r19,r19,r2
    d59c:	88e8d83a 	srl	r20,r17,r3
    d5a0:	80c6d83a 	srl	r3,r16,r3
    d5a4:	982ad43a 	srli	r21,r19,16
    d5a8:	88a2983a 	sll	r17,r17,r2
    d5ac:	a009883a 	mov	r4,r20
    d5b0:	a80b883a 	mov	r5,r21
    d5b4:	88eeb03a 	or	r23,r17,r3
    d5b8:	1025883a 	mov	r18,r2
    d5bc:	000352c0 	call	352c <__umodsi3>
    d5c0:	a009883a 	mov	r4,r20
    d5c4:	a80b883a 	mov	r5,r21
    d5c8:	1023883a 	mov	r17,r2
    d5cc:	9dbfffcc 	andi	r22,r19,65535
    d5d0:	00035240 	call	3524 <__udivsi3>
    d5d4:	1009883a 	mov	r4,r2
    d5d8:	b00b883a 	mov	r5,r22
    d5dc:	000d6f80 	call	d6f8 <__mulsi3>
    d5e0:	8822943a 	slli	r17,r17,16
    d5e4:	b808d43a 	srli	r4,r23,16
    d5e8:	84a8983a 	sll	r20,r16,r18
    d5ec:	8906b03a 	or	r3,r17,r4
    d5f0:	1880042e 	bgeu	r3,r2,d604 <__umoddi3+0x528>
    d5f4:	1cc7883a 	add	r3,r3,r19
    d5f8:	1cc00236 	bltu	r3,r19,d604 <__umoddi3+0x528>
    d5fc:	1880012e 	bgeu	r3,r2,d604 <__umoddi3+0x528>
    d600:	1cc7883a 	add	r3,r3,r19
    d604:	18a1c83a 	sub	r16,r3,r2
    d608:	8009883a 	mov	r4,r16
    d60c:	a80b883a 	mov	r5,r21
    d610:	000352c0 	call	352c <__umodsi3>
    d614:	8009883a 	mov	r4,r16
    d618:	a80b883a 	mov	r5,r21
    d61c:	1039883a 	mov	fp,r2
    d620:	00035240 	call	3524 <__udivsi3>
    d624:	1009883a 	mov	r4,r2
    d628:	b00b883a 	mov	r5,r22
    d62c:	000d6f80 	call	d6f8 <__mulsi3>
    d630:	e006943a 	slli	r3,fp,16
    d634:	b93fffcc 	andi	r4,r23,65535
    d638:	1906b03a 	or	r3,r3,r4
    d63c:	1880042e 	bgeu	r3,r2,d650 <__umoddi3+0x574>
    d640:	1cc7883a 	add	r3,r3,r19
    d644:	1cc00236 	bltu	r3,r19,d650 <__umoddi3+0x574>
    d648:	1880012e 	bgeu	r3,r2,d650 <__umoddi3+0x574>
    d64c:	1cc7883a 	add	r3,r3,r19
    d650:	18a3c83a 	sub	r17,r3,r2
    d654:	003f1e06 	br	d2d0 <__alt_data_end+0xfffb7ba0>
    d658:	8ccfc83a 	sub	r7,r17,r19
    d65c:	1d89c83a 	sub	r4,r3,r22
    d660:	89e3803a 	cmpltu	r17,r17,r7
    d664:	2463c83a 	sub	r17,r4,r17
    d668:	9449c83a 	sub	r4,r18,r17
    d66c:	003fc006 	br	d570 <__alt_data_end+0xfffb7e40>
    d670:	000b883a 	mov	r5,zero
    d674:	002b883a 	mov	r21,zero
    d678:	003eeb06 	br	d228 <__alt_data_end+0xfffb7af8>
    d67c:	01400404 	movi	r5,16
    d680:	282b883a 	mov	r21,r5
    d684:	003ee806 	br	d228 <__alt_data_end+0xfffb7af8>
    d688:	01400404 	movi	r5,16
    d68c:	2805883a 	mov	r2,r5
    d690:	003eaa06 	br	d13c <__alt_data_end+0xfffb7a0c>
    d694:	0005883a 	mov	r2,zero
    d698:	0007883a 	mov	r3,zero
    d69c:	003eff06 	br	d29c <__alt_data_end+0xfffb7b6c>
    d6a0:	00800404 	movi	r2,16
    d6a4:	1007883a 	mov	r3,r2
    d6a8:	003efc06 	br	d29c <__alt_data_end+0xfffb7b6c>
    d6ac:	000b883a 	mov	r5,zero
    d6b0:	0005883a 	mov	r2,zero
    d6b4:	003ea106 	br	d13c <__alt_data_end+0xfffb7a0c>
    d6b8:	90bf802e 	bgeu	r18,r2,d4bc <__alt_data_end+0xfffb7d8c>
    d6bc:	bdffff84 	addi	r23,r23,-2
    d6c0:	95a5883a 	add	r18,r18,r22
    d6c4:	003f7e06 	br	d4c0 <__alt_data_end+0xfffb7d90>
    d6c8:	18bf652e 	bgeu	r3,r2,d460 <__alt_data_end+0xfffb7d30>
    d6cc:	e73fff84 	addi	fp,fp,-2
    d6d0:	1d87883a 	add	r3,r3,r22
    d6d4:	003f6306 	br	d464 <__alt_data_end+0xfffb7d34>
    d6d8:	1cc7883a 	add	r3,r3,r19
    d6dc:	003f0d06 	br	d314 <__alt_data_end+0xfffb7be4>
    d6e0:	8005883a 	mov	r2,r16
    d6e4:	003edf06 	br	d264 <__alt_data_end+0xfffb7b34>
    d6e8:	847fdb36 	bltu	r16,r17,d658 <__alt_data_end+0xfffb7f28>
    d6ec:	880f883a 	mov	r7,r17
    d6f0:	0009883a 	mov	r4,zero
    d6f4:	003f9e06 	br	d570 <__alt_data_end+0xfffb7e40>

0000d6f8 <__mulsi3>:
    d6f8:	0005883a 	mov	r2,zero
    d6fc:	20000726 	beq	r4,zero,d71c <__mulsi3+0x24>
    d700:	20c0004c 	andi	r3,r4,1
    d704:	2008d07a 	srli	r4,r4,1
    d708:	18000126 	beq	r3,zero,d710 <__mulsi3+0x18>
    d70c:	1145883a 	add	r2,r2,r5
    d710:	294b883a 	add	r5,r5,r5
    d714:	203ffa1e 	bne	r4,zero,d700 <__alt_data_end+0xfffb7fd0>
    d718:	f800283a 	ret
    d71c:	f800283a 	ret

0000d720 <__adddf3>:
    d720:	02000434 	movhi	r8,16
    d724:	423fffc4 	addi	r8,r8,-1
    d728:	defffb04 	addi	sp,sp,-20
    d72c:	2a12703a 	and	r9,r5,r8
    d730:	2806d7fa 	srli	r3,r5,31
    d734:	3a10703a 	and	r8,r7,r8
    d738:	3804d53a 	srli	r2,r7,20
    d73c:	3014d77a 	srli	r10,r6,29
    d740:	dc000015 	stw	r16,0(sp)
    d744:	481290fa 	slli	r9,r9,3
    d748:	2820d53a 	srli	r16,r5,20
    d74c:	401090fa 	slli	r8,r8,3
    d750:	200ad77a 	srli	r5,r4,29
    d754:	380ed7fa 	srli	r7,r7,31
    d758:	dc800215 	stw	r18,8(sp)
    d75c:	dc400115 	stw	r17,4(sp)
    d760:	dfc00415 	stw	ra,16(sp)
    d764:	dcc00315 	stw	r19,12(sp)
    d768:	1c803fcc 	andi	r18,r3,255
    d76c:	8401ffcc 	andi	r16,r16,2047
    d770:	494ab03a 	or	r5,r9,r5
    d774:	202290fa 	slli	r17,r4,3
    d778:	1081ffcc 	andi	r2,r2,2047
    d77c:	4290b03a 	or	r8,r8,r10
    d780:	300c90fa 	slli	r6,r6,3
    d784:	91c07026 	beq	r18,r7,d948 <__adddf3+0x228>
    d788:	8087c83a 	sub	r3,r16,r2
    d78c:	00c0b30e 	bge	zero,r3,da5c <__adddf3+0x33c>
    d790:	10002a1e 	bne	r2,zero,d83c <__adddf3+0x11c>
    d794:	4184b03a 	or	r2,r8,r6
    d798:	1000991e 	bne	r2,zero,da00 <__adddf3+0x2e0>
    d79c:	888001cc 	andi	r2,r17,7
    d7a0:	10005b26 	beq	r2,zero,d910 <__adddf3+0x1f0>
    d7a4:	88c003cc 	andi	r3,r17,15
    d7a8:	00800104 	movi	r2,4
    d7ac:	18805826 	beq	r3,r2,d910 <__adddf3+0x1f0>
    d7b0:	89800104 	addi	r6,r17,4
    d7b4:	3463803a 	cmpltu	r17,r6,r17
    d7b8:	2c4b883a 	add	r5,r5,r17
    d7bc:	2880202c 	andhi	r2,r5,128
    d7c0:	9007883a 	mov	r3,r18
    d7c4:	3023883a 	mov	r17,r6
    d7c8:	10005426 	beq	r2,zero,d91c <__adddf3+0x1fc>
    d7cc:	84000044 	addi	r16,r16,1
    d7d0:	0081ffc4 	movi	r2,2047
    d7d4:	8080c126 	beq	r16,r2,dadc <__adddf3+0x3bc>
    d7d8:	013fe034 	movhi	r4,65408
    d7dc:	213fffc4 	addi	r4,r4,-1
    d7e0:	290a703a 	and	r5,r5,r4
    d7e4:	2804977a 	slli	r2,r5,29
    d7e8:	280a927a 	slli	r5,r5,9
    d7ec:	8822d0fa 	srli	r17,r17,3
    d7f0:	8401ffcc 	andi	r16,r16,2047
    d7f4:	2808d33a 	srli	r4,r5,12
    d7f8:	1444b03a 	or	r2,r2,r17
    d7fc:	8401ffcc 	andi	r16,r16,2047
    d800:	800a953a 	slli	r5,r16,20
    d804:	18c03fcc 	andi	r3,r3,255
    d808:	04000434 	movhi	r16,16
    d80c:	180697fa 	slli	r3,r3,31
    d810:	843fffc4 	addi	r16,r16,-1
    d814:	2420703a 	and	r16,r4,r16
    d818:	8160b03a 	or	r16,r16,r5
    d81c:	80c6b03a 	or	r3,r16,r3
    d820:	dfc00417 	ldw	ra,16(sp)
    d824:	dcc00317 	ldw	r19,12(sp)
    d828:	dc800217 	ldw	r18,8(sp)
    d82c:	dc400117 	ldw	r17,4(sp)
    d830:	dc000017 	ldw	r16,0(sp)
    d834:	dec00504 	addi	sp,sp,20
    d838:	f800283a 	ret
    d83c:	0081ffc4 	movi	r2,2047
    d840:	80bfd626 	beq	r16,r2,d79c <__alt_data_end+0xfffb806c>
    d844:	42002034 	orhi	r8,r8,128
    d848:	00800e04 	movi	r2,56
    d84c:	10c0a616 	blt	r2,r3,dae8 <__adddf3+0x3c8>
    d850:	008007c4 	movi	r2,31
    d854:	10c0c916 	blt	r2,r3,db7c <__adddf3+0x45c>
    d858:	00800804 	movi	r2,32
    d85c:	10c5c83a 	sub	r2,r2,r3
    d860:	408e983a 	sll	r7,r8,r2
    d864:	30c8d83a 	srl	r4,r6,r3
    d868:	3084983a 	sll	r2,r6,r2
    d86c:	40c6d83a 	srl	r3,r8,r3
    d870:	390cb03a 	or	r6,r7,r4
    d874:	1004c03a 	cmpne	r2,r2,zero
    d878:	308cb03a 	or	r6,r6,r2
    d87c:	898dc83a 	sub	r6,r17,r6
    d880:	89a3803a 	cmpltu	r17,r17,r6
    d884:	28cbc83a 	sub	r5,r5,r3
    d888:	2c4bc83a 	sub	r5,r5,r17
    d88c:	3023883a 	mov	r17,r6
    d890:	2880202c 	andhi	r2,r5,128
    d894:	10006d26 	beq	r2,zero,da4c <__adddf3+0x32c>
    d898:	04c02034 	movhi	r19,128
    d89c:	9cffffc4 	addi	r19,r19,-1
    d8a0:	2ce6703a 	and	r19,r5,r19
    d8a4:	98007e26 	beq	r19,zero,daa0 <__adddf3+0x380>
    d8a8:	9809883a 	mov	r4,r19
    d8ac:	000feb80 	call	feb8 <__clzsi2>
    d8b0:	10fffe04 	addi	r3,r2,-8
    d8b4:	010007c4 	movi	r4,31
    d8b8:	20c07f16 	blt	r4,r3,dab8 <__adddf3+0x398>
    d8bc:	01400a04 	movi	r5,40
    d8c0:	2885c83a 	sub	r2,r5,r2
    d8c4:	888ad83a 	srl	r5,r17,r2
    d8c8:	98e6983a 	sll	r19,r19,r3
    d8cc:	88e2983a 	sll	r17,r17,r3
    d8d0:	2ce6b03a 	or	r19,r5,r19
    d8d4:	1c007c16 	blt	r3,r16,dac8 <__adddf3+0x3a8>
    d8d8:	1c21c83a 	sub	r16,r3,r16
    d8dc:	81400044 	addi	r5,r16,1
    d8e0:	00c007c4 	movi	r3,31
    d8e4:	19409816 	blt	r3,r5,db48 <__adddf3+0x428>
    d8e8:	1c21c83a 	sub	r16,r3,r16
    d8ec:	8c08983a 	sll	r4,r17,r16
    d8f0:	8946d83a 	srl	r3,r17,r5
    d8f4:	9c20983a 	sll	r16,r19,r16
    d8f8:	2008c03a 	cmpne	r4,r4,zero
    d8fc:	994ad83a 	srl	r5,r19,r5
    d900:	1c06b03a 	or	r3,r3,r16
    d904:	1922b03a 	or	r17,r3,r4
    d908:	0021883a 	mov	r16,zero
    d90c:	003fa306 	br	d79c <__alt_data_end+0xfffb806c>
    d910:	2880202c 	andhi	r2,r5,128
    d914:	9007883a 	mov	r3,r18
    d918:	103fac1e 	bne	r2,zero,d7cc <__alt_data_end+0xfffb809c>
    d91c:	2804977a 	slli	r2,r5,29
    d920:	8822d0fa 	srli	r17,r17,3
    d924:	0101ffc4 	movi	r4,2047
    d928:	280ad0fa 	srli	r5,r5,3
    d92c:	1444b03a 	or	r2,r2,r17
    d930:	81002c26 	beq	r16,r4,d9e4 <__adddf3+0x2c4>
    d934:	8120703a 	and	r16,r16,r4
    d938:	01000434 	movhi	r4,16
    d93c:	213fffc4 	addi	r4,r4,-1
    d940:	2908703a 	and	r4,r5,r4
    d944:	003fad06 	br	d7fc <__alt_data_end+0xfffb80cc>
    d948:	8089c83a 	sub	r4,r16,r2
    d94c:	01006a0e 	bge	zero,r4,daf8 <__adddf3+0x3d8>
    d950:	10003326 	beq	r2,zero,da20 <__adddf3+0x300>
    d954:	0081ffc4 	movi	r2,2047
    d958:	80bf9026 	beq	r16,r2,d79c <__alt_data_end+0xfffb806c>
    d95c:	42002034 	orhi	r8,r8,128
    d960:	00800e04 	movi	r2,56
    d964:	1100b116 	blt	r2,r4,dc2c <__adddf3+0x50c>
    d968:	008007c4 	movi	r2,31
    d96c:	1100e216 	blt	r2,r4,dcf8 <__adddf3+0x5d8>
    d970:	00800804 	movi	r2,32
    d974:	1105c83a 	sub	r2,r2,r4
    d978:	4092983a 	sll	r9,r8,r2
    d97c:	310ed83a 	srl	r7,r6,r4
    d980:	3084983a 	sll	r2,r6,r2
    d984:	4110d83a 	srl	r8,r8,r4
    d988:	49ccb03a 	or	r6,r9,r7
    d98c:	1004c03a 	cmpne	r2,r2,zero
    d990:	308cb03a 	or	r6,r6,r2
    d994:	344d883a 	add	r6,r6,r17
    d998:	3463803a 	cmpltu	r17,r6,r17
    d99c:	414b883a 	add	r5,r8,r5
    d9a0:	2c4b883a 	add	r5,r5,r17
    d9a4:	3023883a 	mov	r17,r6
    d9a8:	2880202c 	andhi	r2,r5,128
    d9ac:	10002726 	beq	r2,zero,da4c <__adddf3+0x32c>
    d9b0:	84000044 	addi	r16,r16,1
    d9b4:	0081ffc4 	movi	r2,2047
    d9b8:	8080ae26 	beq	r16,r2,dc74 <__adddf3+0x554>
    d9bc:	00bfe034 	movhi	r2,65408
    d9c0:	10bfffc4 	addi	r2,r2,-1
    d9c4:	288a703a 	and	r5,r5,r2
    d9c8:	880cd07a 	srli	r6,r17,1
    d9cc:	280897fa 	slli	r4,r5,31
    d9d0:	88c0004c 	andi	r3,r17,1
    d9d4:	30e2b03a 	or	r17,r6,r3
    d9d8:	280ad07a 	srli	r5,r5,1
    d9dc:	8922b03a 	or	r17,r17,r4
    d9e0:	003f6e06 	br	d79c <__alt_data_end+0xfffb806c>
    d9e4:	1148b03a 	or	r4,r2,r5
    d9e8:	20003c26 	beq	r4,zero,dadc <__adddf3+0x3bc>
    d9ec:	29000234 	orhi	r4,r5,8
    d9f0:	01400434 	movhi	r5,16
    d9f4:	297fffc4 	addi	r5,r5,-1
    d9f8:	2148703a 	and	r4,r4,r5
    d9fc:	003f7f06 	br	d7fc <__alt_data_end+0xfffb80cc>
    da00:	18ffffc4 	addi	r3,r3,-1
    da04:	18004d1e 	bne	r3,zero,db3c <__adddf3+0x41c>
    da08:	898dc83a 	sub	r6,r17,r6
    da0c:	89a3803a 	cmpltu	r17,r17,r6
    da10:	2a0bc83a 	sub	r5,r5,r8
    da14:	2c4bc83a 	sub	r5,r5,r17
    da18:	3023883a 	mov	r17,r6
    da1c:	003f9c06 	br	d890 <__alt_data_end+0xfffb8160>
    da20:	4184b03a 	or	r2,r8,r6
    da24:	103f5d26 	beq	r2,zero,d79c <__alt_data_end+0xfffb806c>
    da28:	213fffc4 	addi	r4,r4,-1
    da2c:	203fd926 	beq	r4,zero,d994 <__alt_data_end+0xfffb8264>
    da30:	0081ffc4 	movi	r2,2047
    da34:	80bfca1e 	bne	r16,r2,d960 <__alt_data_end+0xfffb8230>
    da38:	003f5806 	br	d79c <__alt_data_end+0xfffb806c>
    da3c:	10c8b03a 	or	r4,r2,r3
    da40:	20008b26 	beq	r4,zero,dc70 <__adddf3+0x550>
    da44:	100b883a 	mov	r5,r2
    da48:	1823883a 	mov	r17,r3
    da4c:	888001cc 	andi	r2,r17,7
    da50:	103f541e 	bne	r2,zero,d7a4 <__alt_data_end+0xfffb8074>
    da54:	9007883a 	mov	r3,r18
    da58:	003fb006 	br	d91c <__alt_data_end+0xfffb81ec>
    da5c:	1800531e 	bne	r3,zero,dbac <__adddf3+0x48c>
    da60:	80800044 	addi	r2,r16,1
    da64:	1081ffcc 	andi	r2,r2,2047
    da68:	00c00044 	movi	r3,1
    da6c:	1880990e 	bge	r3,r2,dcd4 <__adddf3+0x5b4>
    da70:	8985c83a 	sub	r2,r17,r6
    da74:	8887803a 	cmpltu	r3,r17,r2
    da78:	2a27c83a 	sub	r19,r5,r8
    da7c:	98e7c83a 	sub	r19,r19,r3
    da80:	98c0202c 	andhi	r3,r19,128
    da84:	18006226 	beq	r3,zero,dc10 <__adddf3+0x4f0>
    da88:	3463c83a 	sub	r17,r6,r17
    da8c:	4151c83a 	sub	r8,r8,r5
    da90:	344d803a 	cmpltu	r6,r6,r17
    da94:	41a7c83a 	sub	r19,r8,r6
    da98:	3825883a 	mov	r18,r7
    da9c:	983f821e 	bne	r19,zero,d8a8 <__alt_data_end+0xfffb8178>
    daa0:	8809883a 	mov	r4,r17
    daa4:	000feb80 	call	feb8 <__clzsi2>
    daa8:	10800804 	addi	r2,r2,32
    daac:	10fffe04 	addi	r3,r2,-8
    dab0:	010007c4 	movi	r4,31
    dab4:	20ff810e 	bge	r4,r3,d8bc <__alt_data_end+0xfffb818c>
    dab8:	14fff604 	addi	r19,r2,-40
    dabc:	8ce6983a 	sll	r19,r17,r19
    dac0:	0023883a 	mov	r17,zero
    dac4:	1c3f840e 	bge	r3,r16,d8d8 <__alt_data_end+0xfffb81a8>
    dac8:	017fe034 	movhi	r5,65408
    dacc:	297fffc4 	addi	r5,r5,-1
    dad0:	80e1c83a 	sub	r16,r16,r3
    dad4:	994a703a 	and	r5,r19,r5
    dad8:	003f3006 	br	d79c <__alt_data_end+0xfffb806c>
    dadc:	0009883a 	mov	r4,zero
    dae0:	0005883a 	mov	r2,zero
    dae4:	003f4506 	br	d7fc <__alt_data_end+0xfffb80cc>
    dae8:	418cb03a 	or	r6,r8,r6
    daec:	300cc03a 	cmpne	r6,r6,zero
    daf0:	0007883a 	mov	r3,zero
    daf4:	003f6106 	br	d87c <__alt_data_end+0xfffb814c>
    daf8:	2000921e 	bne	r4,zero,dd44 <__adddf3+0x624>
    dafc:	80800044 	addi	r2,r16,1
    db00:	11c1ffcc 	andi	r7,r2,2047
    db04:	01000044 	movi	r4,1
    db08:	21c0610e 	bge	r4,r7,dc90 <__adddf3+0x570>
    db0c:	0101ffc4 	movi	r4,2047
    db10:	1100a326 	beq	r2,r4,dda0 <__adddf3+0x680>
    db14:	344d883a 	add	r6,r6,r17
    db18:	3463803a 	cmpltu	r17,r6,r17
    db1c:	414b883a 	add	r5,r8,r5
    db20:	2c4b883a 	add	r5,r5,r17
    db24:	282297fa 	slli	r17,r5,31
    db28:	300cd07a 	srli	r6,r6,1
    db2c:	280ad07a 	srli	r5,r5,1
    db30:	1021883a 	mov	r16,r2
    db34:	89a2b03a 	or	r17,r17,r6
    db38:	003f1806 	br	d79c <__alt_data_end+0xfffb806c>
    db3c:	0081ffc4 	movi	r2,2047
    db40:	80bf411e 	bne	r16,r2,d848 <__alt_data_end+0xfffb8118>
    db44:	003f1506 	br	d79c <__alt_data_end+0xfffb806c>
    db48:	80bff844 	addi	r2,r16,-31
    db4c:	00c00804 	movi	r3,32
    db50:	9884d83a 	srl	r2,r19,r2
    db54:	28c04a26 	beq	r5,r3,dc80 <__adddf3+0x560>
    db58:	00c00fc4 	movi	r3,63
    db5c:	1c21c83a 	sub	r16,r3,r16
    db60:	9c26983a 	sll	r19,r19,r16
    db64:	9c62b03a 	or	r17,r19,r17
    db68:	8822c03a 	cmpne	r17,r17,zero
    db6c:	88a2b03a 	or	r17,r17,r2
    db70:	000b883a 	mov	r5,zero
    db74:	0021883a 	mov	r16,zero
    db78:	003fb406 	br	da4c <__alt_data_end+0xfffb831c>
    db7c:	18bff804 	addi	r2,r3,-32
    db80:	01000804 	movi	r4,32
    db84:	4084d83a 	srl	r2,r8,r2
    db88:	19003f26 	beq	r3,r4,dc88 <__adddf3+0x568>
    db8c:	01001004 	movi	r4,64
    db90:	20c7c83a 	sub	r3,r4,r3
    db94:	40d0983a 	sll	r8,r8,r3
    db98:	418cb03a 	or	r6,r8,r6
    db9c:	300cc03a 	cmpne	r6,r6,zero
    dba0:	308cb03a 	or	r6,r6,r2
    dba4:	0007883a 	mov	r3,zero
    dba8:	003f3406 	br	d87c <__alt_data_end+0xfffb814c>
    dbac:	80002326 	beq	r16,zero,dc3c <__adddf3+0x51c>
    dbb0:	0101ffc4 	movi	r4,2047
    dbb4:	11005e26 	beq	r2,r4,dd30 <__adddf3+0x610>
    dbb8:	00c7c83a 	sub	r3,zero,r3
    dbbc:	29402034 	orhi	r5,r5,128
    dbc0:	01000e04 	movi	r4,56
    dbc4:	20c07216 	blt	r4,r3,dd90 <__adddf3+0x670>
    dbc8:	010007c4 	movi	r4,31
    dbcc:	20c0ce16 	blt	r4,r3,df08 <__adddf3+0x7e8>
    dbd0:	01000804 	movi	r4,32
    dbd4:	20c9c83a 	sub	r4,r4,r3
    dbd8:	2914983a 	sll	r10,r5,r4
    dbdc:	88d2d83a 	srl	r9,r17,r3
    dbe0:	8908983a 	sll	r4,r17,r4
    dbe4:	28c6d83a 	srl	r3,r5,r3
    dbe8:	5262b03a 	or	r17,r10,r9
    dbec:	2008c03a 	cmpne	r4,r4,zero
    dbf0:	8922b03a 	or	r17,r17,r4
    dbf4:	3463c83a 	sub	r17,r6,r17
    dbf8:	40c7c83a 	sub	r3,r8,r3
    dbfc:	344d803a 	cmpltu	r6,r6,r17
    dc00:	198bc83a 	sub	r5,r3,r6
    dc04:	1021883a 	mov	r16,r2
    dc08:	3825883a 	mov	r18,r7
    dc0c:	003f2006 	br	d890 <__alt_data_end+0xfffb8160>
    dc10:	9886b03a 	or	r3,r19,r2
    dc14:	1800141e 	bne	r3,zero,dc68 <__adddf3+0x548>
    dc18:	0007883a 	mov	r3,zero
    dc1c:	000b883a 	mov	r5,zero
    dc20:	0023883a 	mov	r17,zero
    dc24:	0021883a 	mov	r16,zero
    dc28:	003f3c06 	br	d91c <__alt_data_end+0xfffb81ec>
    dc2c:	418cb03a 	or	r6,r8,r6
    dc30:	300cc03a 	cmpne	r6,r6,zero
    dc34:	0011883a 	mov	r8,zero
    dc38:	003f5606 	br	d994 <__alt_data_end+0xfffb8264>
    dc3c:	2c48b03a 	or	r4,r5,r17
    dc40:	20003b26 	beq	r4,zero,dd30 <__adddf3+0x610>
    dc44:	00c6303a 	nor	r3,zero,r3
    dc48:	1800371e 	bne	r3,zero,dd28 <__adddf3+0x608>
    dc4c:	3463c83a 	sub	r17,r6,r17
    dc50:	414bc83a 	sub	r5,r8,r5
    dc54:	344d803a 	cmpltu	r6,r6,r17
    dc58:	298bc83a 	sub	r5,r5,r6
    dc5c:	1021883a 	mov	r16,r2
    dc60:	3825883a 	mov	r18,r7
    dc64:	003f0a06 	br	d890 <__alt_data_end+0xfffb8160>
    dc68:	1023883a 	mov	r17,r2
    dc6c:	003f0d06 	br	d8a4 <__alt_data_end+0xfffb8174>
    dc70:	0007883a 	mov	r3,zero
    dc74:	000b883a 	mov	r5,zero
    dc78:	0023883a 	mov	r17,zero
    dc7c:	003f2706 	br	d91c <__alt_data_end+0xfffb81ec>
    dc80:	0027883a 	mov	r19,zero
    dc84:	003fb706 	br	db64 <__alt_data_end+0xfffb8434>
    dc88:	0011883a 	mov	r8,zero
    dc8c:	003fc206 	br	db98 <__alt_data_end+0xfffb8468>
    dc90:	2c44b03a 	or	r2,r5,r17
    dc94:	8000871e 	bne	r16,zero,deb4 <__adddf3+0x794>
    dc98:	1000b126 	beq	r2,zero,df60 <__adddf3+0x840>
    dc9c:	4184b03a 	or	r2,r8,r6
    dca0:	103ebe26 	beq	r2,zero,d79c <__alt_data_end+0xfffb806c>
    dca4:	3445883a 	add	r2,r6,r17
    dca8:	1463803a 	cmpltu	r17,r2,r17
    dcac:	414b883a 	add	r5,r8,r5
    dcb0:	2c4b883a 	add	r5,r5,r17
    dcb4:	28c0202c 	andhi	r3,r5,128
    dcb8:	1023883a 	mov	r17,r2
    dcbc:	183f6326 	beq	r3,zero,da4c <__alt_data_end+0xfffb831c>
    dcc0:	00bfe034 	movhi	r2,65408
    dcc4:	10bfffc4 	addi	r2,r2,-1
    dcc8:	2021883a 	mov	r16,r4
    dccc:	288a703a 	and	r5,r5,r2
    dcd0:	003eb206 	br	d79c <__alt_data_end+0xfffb806c>
    dcd4:	2c44b03a 	or	r2,r5,r17
    dcd8:	8000251e 	bne	r16,zero,dd70 <__adddf3+0x650>
    dcdc:	10004b1e 	bne	r2,zero,de0c <__adddf3+0x6ec>
    dce0:	4184b03a 	or	r2,r8,r6
    dce4:	103fe226 	beq	r2,zero,dc70 <__alt_data_end+0xfffb8540>
    dce8:	400b883a 	mov	r5,r8
    dcec:	3023883a 	mov	r17,r6
    dcf0:	3825883a 	mov	r18,r7
    dcf4:	003ea906 	br	d79c <__alt_data_end+0xfffb806c>
    dcf8:	20bff804 	addi	r2,r4,-32
    dcfc:	01c00804 	movi	r7,32
    dd00:	4084d83a 	srl	r2,r8,r2
    dd04:	21c07e26 	beq	r4,r7,df00 <__adddf3+0x7e0>
    dd08:	01c01004 	movi	r7,64
    dd0c:	3909c83a 	sub	r4,r7,r4
    dd10:	4110983a 	sll	r8,r8,r4
    dd14:	418cb03a 	or	r6,r8,r6
    dd18:	300cc03a 	cmpne	r6,r6,zero
    dd1c:	308cb03a 	or	r6,r6,r2
    dd20:	0011883a 	mov	r8,zero
    dd24:	003f1b06 	br	d994 <__alt_data_end+0xfffb8264>
    dd28:	0101ffc4 	movi	r4,2047
    dd2c:	113fa41e 	bne	r2,r4,dbc0 <__alt_data_end+0xfffb8490>
    dd30:	400b883a 	mov	r5,r8
    dd34:	3023883a 	mov	r17,r6
    dd38:	1021883a 	mov	r16,r2
    dd3c:	3825883a 	mov	r18,r7
    dd40:	003e9606 	br	d79c <__alt_data_end+0xfffb806c>
    dd44:	80001a1e 	bne	r16,zero,ddb0 <__adddf3+0x690>
    dd48:	2c4eb03a 	or	r7,r5,r17
    dd4c:	38005526 	beq	r7,zero,dea4 <__adddf3+0x784>
    dd50:	0108303a 	nor	r4,zero,r4
    dd54:	2000511e 	bne	r4,zero,de9c <__adddf3+0x77c>
    dd58:	89a3883a 	add	r17,r17,r6
    dd5c:	414b883a 	add	r5,r8,r5
    dd60:	898d803a 	cmpltu	r6,r17,r6
    dd64:	298b883a 	add	r5,r5,r6
    dd68:	1021883a 	mov	r16,r2
    dd6c:	003f0e06 	br	d9a8 <__alt_data_end+0xfffb8278>
    dd70:	1000341e 	bne	r2,zero,de44 <__adddf3+0x724>
    dd74:	4184b03a 	or	r2,r8,r6
    dd78:	10006f26 	beq	r2,zero,df38 <__adddf3+0x818>
    dd7c:	400b883a 	mov	r5,r8
    dd80:	3023883a 	mov	r17,r6
    dd84:	3825883a 	mov	r18,r7
    dd88:	0401ffc4 	movi	r16,2047
    dd8c:	003e8306 	br	d79c <__alt_data_end+0xfffb806c>
    dd90:	2c62b03a 	or	r17,r5,r17
    dd94:	8822c03a 	cmpne	r17,r17,zero
    dd98:	0007883a 	mov	r3,zero
    dd9c:	003f9506 	br	dbf4 <__alt_data_end+0xfffb84c4>
    dda0:	1021883a 	mov	r16,r2
    dda4:	000b883a 	mov	r5,zero
    dda8:	0023883a 	mov	r17,zero
    ddac:	003edb06 	br	d91c <__alt_data_end+0xfffb81ec>
    ddb0:	01c1ffc4 	movi	r7,2047
    ddb4:	11c03b26 	beq	r2,r7,dea4 <__adddf3+0x784>
    ddb8:	0109c83a 	sub	r4,zero,r4
    ddbc:	29402034 	orhi	r5,r5,128
    ddc0:	01c00e04 	movi	r7,56
    ddc4:	39006216 	blt	r7,r4,df50 <__adddf3+0x830>
    ddc8:	01c007c4 	movi	r7,31
    ddcc:	39006b16 	blt	r7,r4,df7c <__adddf3+0x85c>
    ddd0:	01c00804 	movi	r7,32
    ddd4:	390fc83a 	sub	r7,r7,r4
    ddd8:	29d4983a 	sll	r10,r5,r7
    dddc:	8912d83a 	srl	r9,r17,r4
    dde0:	89ce983a 	sll	r7,r17,r7
    dde4:	2908d83a 	srl	r4,r5,r4
    dde8:	5262b03a 	or	r17,r10,r9
    ddec:	380ac03a 	cmpne	r5,r7,zero
    ddf0:	8962b03a 	or	r17,r17,r5
    ddf4:	89a3883a 	add	r17,r17,r6
    ddf8:	2211883a 	add	r8,r4,r8
    ddfc:	898d803a 	cmpltu	r6,r17,r6
    de00:	418b883a 	add	r5,r8,r6
    de04:	1021883a 	mov	r16,r2
    de08:	003ee706 	br	d9a8 <__alt_data_end+0xfffb8278>
    de0c:	4184b03a 	or	r2,r8,r6
    de10:	103e6226 	beq	r2,zero,d79c <__alt_data_end+0xfffb806c>
    de14:	8987c83a 	sub	r3,r17,r6
    de18:	88c9803a 	cmpltu	r4,r17,r3
    de1c:	2a05c83a 	sub	r2,r5,r8
    de20:	1105c83a 	sub	r2,r2,r4
    de24:	1100202c 	andhi	r4,r2,128
    de28:	203f0426 	beq	r4,zero,da3c <__alt_data_end+0xfffb830c>
    de2c:	3463c83a 	sub	r17,r6,r17
    de30:	414bc83a 	sub	r5,r8,r5
    de34:	344d803a 	cmpltu	r6,r6,r17
    de38:	298bc83a 	sub	r5,r5,r6
    de3c:	3825883a 	mov	r18,r7
    de40:	003e5606 	br	d79c <__alt_data_end+0xfffb806c>
    de44:	4184b03a 	or	r2,r8,r6
    de48:	10002b26 	beq	r2,zero,def8 <__adddf3+0x7d8>
    de4c:	2804d0fa 	srli	r2,r5,3
    de50:	8822d0fa 	srli	r17,r17,3
    de54:	280a977a 	slli	r5,r5,29
    de58:	10c0022c 	andhi	r3,r2,8
    de5c:	2c62b03a 	or	r17,r5,r17
    de60:	18000826 	beq	r3,zero,de84 <__adddf3+0x764>
    de64:	4008d0fa 	srli	r4,r8,3
    de68:	20c0022c 	andhi	r3,r4,8
    de6c:	1800051e 	bne	r3,zero,de84 <__adddf3+0x764>
    de70:	300cd0fa 	srli	r6,r6,3
    de74:	4010977a 	slli	r8,r8,29
    de78:	2005883a 	mov	r2,r4
    de7c:	3825883a 	mov	r18,r7
    de80:	41a2b03a 	or	r17,r8,r6
    de84:	880ad77a 	srli	r5,r17,29
    de88:	100490fa 	slli	r2,r2,3
    de8c:	882290fa 	slli	r17,r17,3
    de90:	0401ffc4 	movi	r16,2047
    de94:	288ab03a 	or	r5,r5,r2
    de98:	003e4006 	br	d79c <__alt_data_end+0xfffb806c>
    de9c:	01c1ffc4 	movi	r7,2047
    dea0:	11ffc71e 	bne	r2,r7,ddc0 <__alt_data_end+0xfffb8690>
    dea4:	400b883a 	mov	r5,r8
    dea8:	3023883a 	mov	r17,r6
    deac:	1021883a 	mov	r16,r2
    deb0:	003e3a06 	br	d79c <__alt_data_end+0xfffb806c>
    deb4:	10002d26 	beq	r2,zero,df6c <__adddf3+0x84c>
    deb8:	4184b03a 	or	r2,r8,r6
    debc:	10000e26 	beq	r2,zero,def8 <__adddf3+0x7d8>
    dec0:	2804d0fa 	srli	r2,r5,3
    dec4:	8822d0fa 	srli	r17,r17,3
    dec8:	280a977a 	slli	r5,r5,29
    decc:	10c0022c 	andhi	r3,r2,8
    ded0:	2c62b03a 	or	r17,r5,r17
    ded4:	183feb26 	beq	r3,zero,de84 <__alt_data_end+0xfffb8754>
    ded8:	4008d0fa 	srli	r4,r8,3
    dedc:	20c0022c 	andhi	r3,r4,8
    dee0:	183fe81e 	bne	r3,zero,de84 <__alt_data_end+0xfffb8754>
    dee4:	300cd0fa 	srli	r6,r6,3
    dee8:	4010977a 	slli	r8,r8,29
    deec:	2005883a 	mov	r2,r4
    def0:	41a2b03a 	or	r17,r8,r6
    def4:	003fe306 	br	de84 <__alt_data_end+0xfffb8754>
    def8:	0401ffc4 	movi	r16,2047
    defc:	003e2706 	br	d79c <__alt_data_end+0xfffb806c>
    df00:	0011883a 	mov	r8,zero
    df04:	003f8306 	br	dd14 <__alt_data_end+0xfffb85e4>
    df08:	193ff804 	addi	r4,r3,-32
    df0c:	02400804 	movi	r9,32
    df10:	2908d83a 	srl	r4,r5,r4
    df14:	1a402526 	beq	r3,r9,dfac <__adddf3+0x88c>
    df18:	02401004 	movi	r9,64
    df1c:	48c7c83a 	sub	r3,r9,r3
    df20:	28ca983a 	sll	r5,r5,r3
    df24:	2c62b03a 	or	r17,r5,r17
    df28:	8822c03a 	cmpne	r17,r17,zero
    df2c:	8922b03a 	or	r17,r17,r4
    df30:	0007883a 	mov	r3,zero
    df34:	003f2f06 	br	dbf4 <__alt_data_end+0xfffb84c4>
    df38:	01402034 	movhi	r5,128
    df3c:	0007883a 	mov	r3,zero
    df40:	297fffc4 	addi	r5,r5,-1
    df44:	047ffe04 	movi	r17,-8
    df48:	0401ffc4 	movi	r16,2047
    df4c:	003e7306 	br	d91c <__alt_data_end+0xfffb81ec>
    df50:	2c62b03a 	or	r17,r5,r17
    df54:	8822c03a 	cmpne	r17,r17,zero
    df58:	0009883a 	mov	r4,zero
    df5c:	003fa506 	br	ddf4 <__alt_data_end+0xfffb86c4>
    df60:	400b883a 	mov	r5,r8
    df64:	3023883a 	mov	r17,r6
    df68:	003e0c06 	br	d79c <__alt_data_end+0xfffb806c>
    df6c:	400b883a 	mov	r5,r8
    df70:	3023883a 	mov	r17,r6
    df74:	0401ffc4 	movi	r16,2047
    df78:	003e0806 	br	d79c <__alt_data_end+0xfffb806c>
    df7c:	21fff804 	addi	r7,r4,-32
    df80:	02400804 	movi	r9,32
    df84:	29ced83a 	srl	r7,r5,r7
    df88:	22400a26 	beq	r4,r9,dfb4 <__adddf3+0x894>
    df8c:	02401004 	movi	r9,64
    df90:	4909c83a 	sub	r4,r9,r4
    df94:	290a983a 	sll	r5,r5,r4
    df98:	2c62b03a 	or	r17,r5,r17
    df9c:	8822c03a 	cmpne	r17,r17,zero
    dfa0:	89e2b03a 	or	r17,r17,r7
    dfa4:	0009883a 	mov	r4,zero
    dfa8:	003f9206 	br	ddf4 <__alt_data_end+0xfffb86c4>
    dfac:	000b883a 	mov	r5,zero
    dfb0:	003fdc06 	br	df24 <__alt_data_end+0xfffb87f4>
    dfb4:	000b883a 	mov	r5,zero
    dfb8:	003ff706 	br	df98 <__alt_data_end+0xfffb8868>

0000dfbc <__divdf3>:
    dfbc:	defff004 	addi	sp,sp,-64
    dfc0:	dc800815 	stw	r18,32(sp)
    dfc4:	2824d53a 	srli	r18,r5,20
    dfc8:	dd800c15 	stw	r22,48(sp)
    dfcc:	282cd7fa 	srli	r22,r5,31
    dfd0:	dc000615 	stw	r16,24(sp)
    dfd4:	04000434 	movhi	r16,16
    dfd8:	df000e15 	stw	fp,56(sp)
    dfdc:	dd000a15 	stw	r20,40(sp)
    dfe0:	dcc00915 	stw	r19,36(sp)
    dfe4:	dc400715 	stw	r17,28(sp)
    dfe8:	843fffc4 	addi	r16,r16,-1
    dfec:	dfc00f15 	stw	ra,60(sp)
    dff0:	ddc00d15 	stw	r23,52(sp)
    dff4:	dd400b15 	stw	r21,44(sp)
    dff8:	9481ffcc 	andi	r18,r18,2047
    dffc:	2029883a 	mov	r20,r4
    e000:	2027883a 	mov	r19,r4
    e004:	2c22703a 	and	r17,r5,r16
    e008:	b7003fcc 	andi	fp,r22,255
    e00c:	90005e26 	beq	r18,zero,e188 <__divdf3+0x1cc>
    e010:	0081ffc4 	movi	r2,2047
    e014:	90803526 	beq	r18,r2,e0ec <__divdf3+0x130>
    e018:	8c000434 	orhi	r16,r17,16
    e01c:	2004d77a 	srli	r2,r4,29
    e020:	802090fa 	slli	r16,r16,3
    e024:	202690fa 	slli	r19,r4,3
    e028:	94bf0044 	addi	r18,r18,-1023
    e02c:	80a2b03a 	or	r17,r16,r2
    e030:	0029883a 	mov	r20,zero
    e034:	0011883a 	mov	r8,zero
    e038:	380ad53a 	srli	r5,r7,20
    e03c:	382ed7fa 	srli	r23,r7,31
    e040:	04000434 	movhi	r16,16
    e044:	843fffc4 	addi	r16,r16,-1
    e048:	2941ffcc 	andi	r5,r5,2047
    e04c:	302b883a 	mov	r21,r6
    e050:	3c20703a 	and	r16,r7,r16
    e054:	ba403fcc 	andi	r9,r23,255
    e058:	28006726 	beq	r5,zero,e1f8 <__divdf3+0x23c>
    e05c:	0081ffc4 	movi	r2,2047
    e060:	28805f26 	beq	r5,r2,e1e0 <__divdf3+0x224>
    e064:	84000434 	orhi	r16,r16,16
    e068:	3004d77a 	srli	r2,r6,29
    e06c:	802090fa 	slli	r16,r16,3
    e070:	302a90fa 	slli	r21,r6,3
    e074:	297f0044 	addi	r5,r5,-1023
    e078:	80a0b03a 	or	r16,r16,r2
    e07c:	000f883a 	mov	r7,zero
    e080:	3d06b03a 	or	r3,r7,r20
    e084:	180690ba 	slli	r3,r3,2
    e088:	00800074 	movhi	r2,1
    e08c:	10b82b04 	addi	r2,r2,-8020
    e090:	1885883a 	add	r2,r3,r2
    e094:	10800017 	ldw	r2,0(r2)
    e098:	b5c8f03a 	xor	r4,r22,r23
    e09c:	200d883a 	mov	r6,r4
    e0a0:	25003fcc 	andi	r20,r4,255
    e0a4:	9165c83a 	sub	r18,r18,r5
    e0a8:	1000683a 	jmp	r2
    e0ac:	0000e2f4 	movhi	zero,907
    e0b0:	0000e124 	muli	zero,zero,900
    e0b4:	0000e2b8 	rdprs	zero,zero,906
    e0b8:	0000e108 	cmpgei	zero,zero,900
    e0bc:	0000e2b8 	rdprs	zero,zero,906
    e0c0:	0000e28c 	andi	zero,zero,906
    e0c4:	0000e2b8 	rdprs	zero,zero,906
    e0c8:	0000e108 	cmpgei	zero,zero,900
    e0cc:	0000e124 	muli	zero,zero,900
    e0d0:	0000e124 	muli	zero,zero,900
    e0d4:	0000e28c 	andi	zero,zero,906
    e0d8:	0000e108 	cmpgei	zero,zero,900
    e0dc:	0000e118 	cmpnei	zero,zero,900
    e0e0:	0000e118 	cmpnei	zero,zero,900
    e0e4:	0000e118 	cmpnei	zero,zero,900
    e0e8:	0000e2c8 	cmpgei	zero,zero,907
    e0ec:	8904b03a 	or	r2,r17,r4
    e0f0:	1000631e 	bne	r2,zero,e280 <__divdf3+0x2c4>
    e0f4:	05000204 	movi	r20,8
    e0f8:	0023883a 	mov	r17,zero
    e0fc:	0027883a 	mov	r19,zero
    e100:	02000084 	movi	r8,2
    e104:	003fcc06 	br	e038 <__alt_data_end+0xfffb8908>
    e108:	8023883a 	mov	r17,r16
    e10c:	a827883a 	mov	r19,r21
    e110:	4839883a 	mov	fp,r9
    e114:	3811883a 	mov	r8,r7
    e118:	00800084 	movi	r2,2
    e11c:	4081531e 	bne	r8,r2,e66c <__divdf3+0x6b0>
    e120:	e029883a 	mov	r20,fp
    e124:	a180004c 	andi	r6,r20,1
    e128:	0201ffc4 	movi	r8,2047
    e12c:	000b883a 	mov	r5,zero
    e130:	0027883a 	mov	r19,zero
    e134:	4010953a 	slli	r8,r8,20
    e138:	30c03fcc 	andi	r3,r6,255
    e13c:	04000434 	movhi	r16,16
    e140:	180697fa 	slli	r3,r3,31
    e144:	843fffc4 	addi	r16,r16,-1
    e148:	2c20703a 	and	r16,r5,r16
    e14c:	8220b03a 	or	r16,r16,r8
    e150:	80c6b03a 	or	r3,r16,r3
    e154:	9805883a 	mov	r2,r19
    e158:	dfc00f17 	ldw	ra,60(sp)
    e15c:	df000e17 	ldw	fp,56(sp)
    e160:	ddc00d17 	ldw	r23,52(sp)
    e164:	dd800c17 	ldw	r22,48(sp)
    e168:	dd400b17 	ldw	r21,44(sp)
    e16c:	dd000a17 	ldw	r20,40(sp)
    e170:	dcc00917 	ldw	r19,36(sp)
    e174:	dc800817 	ldw	r18,32(sp)
    e178:	dc400717 	ldw	r17,28(sp)
    e17c:	dc000617 	ldw	r16,24(sp)
    e180:	dec01004 	addi	sp,sp,64
    e184:	f800283a 	ret
    e188:	8904b03a 	or	r2,r17,r4
    e18c:	10003726 	beq	r2,zero,e26c <__divdf3+0x2b0>
    e190:	88014d26 	beq	r17,zero,e6c8 <__divdf3+0x70c>
    e194:	8809883a 	mov	r4,r17
    e198:	d9800215 	stw	r6,8(sp)
    e19c:	d9c00515 	stw	r7,20(sp)
    e1a0:	000feb80 	call	feb8 <__clzsi2>
    e1a4:	d9800217 	ldw	r6,8(sp)
    e1a8:	d9c00517 	ldw	r7,20(sp)
    e1ac:	1007883a 	mov	r3,r2
    e1b0:	01000a04 	movi	r4,40
    e1b4:	1cfffe04 	addi	r19,r3,-8
    e1b8:	20c9c83a 	sub	r4,r4,r3
    e1bc:	8cca983a 	sll	r5,r17,r19
    e1c0:	a108d83a 	srl	r4,r20,r4
    e1c4:	a4e6983a 	sll	r19,r20,r19
    e1c8:	2162b03a 	or	r17,r4,r5
    e1cc:	04bf0344 	movi	r18,-1011
    e1d0:	90e5c83a 	sub	r18,r18,r3
    e1d4:	0029883a 	mov	r20,zero
    e1d8:	0011883a 	mov	r8,zero
    e1dc:	003f9606 	br	e038 <__alt_data_end+0xfffb8908>
    e1e0:	8184b03a 	or	r2,r16,r6
    e1e4:	10001f1e 	bne	r2,zero,e264 <__divdf3+0x2a8>
    e1e8:	0021883a 	mov	r16,zero
    e1ec:	002b883a 	mov	r21,zero
    e1f0:	01c00084 	movi	r7,2
    e1f4:	003fa206 	br	e080 <__alt_data_end+0xfffb8950>
    e1f8:	8184b03a 	or	r2,r16,r6
    e1fc:	10001526 	beq	r2,zero,e254 <__divdf3+0x298>
    e200:	80013d26 	beq	r16,zero,e6f8 <__divdf3+0x73c>
    e204:	8009883a 	mov	r4,r16
    e208:	d9800215 	stw	r6,8(sp)
    e20c:	da000315 	stw	r8,12(sp)
    e210:	da400415 	stw	r9,16(sp)
    e214:	000feb80 	call	feb8 <__clzsi2>
    e218:	d9800217 	ldw	r6,8(sp)
    e21c:	da000317 	ldw	r8,12(sp)
    e220:	da400417 	ldw	r9,16(sp)
    e224:	1007883a 	mov	r3,r2
    e228:	01000a04 	movi	r4,40
    e22c:	1d7ffe04 	addi	r21,r3,-8
    e230:	20c9c83a 	sub	r4,r4,r3
    e234:	8560983a 	sll	r16,r16,r21
    e238:	3108d83a 	srl	r4,r6,r4
    e23c:	356a983a 	sll	r21,r6,r21
    e240:	2420b03a 	or	r16,r4,r16
    e244:	017f0344 	movi	r5,-1011
    e248:	28cbc83a 	sub	r5,r5,r3
    e24c:	000f883a 	mov	r7,zero
    e250:	003f8b06 	br	e080 <__alt_data_end+0xfffb8950>
    e254:	0021883a 	mov	r16,zero
    e258:	002b883a 	mov	r21,zero
    e25c:	01c00044 	movi	r7,1
    e260:	003f8706 	br	e080 <__alt_data_end+0xfffb8950>
    e264:	01c000c4 	movi	r7,3
    e268:	003f8506 	br	e080 <__alt_data_end+0xfffb8950>
    e26c:	05000104 	movi	r20,4
    e270:	0023883a 	mov	r17,zero
    e274:	0027883a 	mov	r19,zero
    e278:	02000044 	movi	r8,1
    e27c:	003f6e06 	br	e038 <__alt_data_end+0xfffb8908>
    e280:	05000304 	movi	r20,12
    e284:	020000c4 	movi	r8,3
    e288:	003f6b06 	br	e038 <__alt_data_end+0xfffb8908>
    e28c:	01400434 	movhi	r5,16
    e290:	000d883a 	mov	r6,zero
    e294:	297fffc4 	addi	r5,r5,-1
    e298:	04ffffc4 	movi	r19,-1
    e29c:	0201ffc4 	movi	r8,2047
    e2a0:	003fa406 	br	e134 <__alt_data_end+0xfffb8a04>
    e2a4:	043f0084 	movi	r16,-1022
    e2a8:	84a1c83a 	sub	r16,r16,r18
    e2ac:	00800e04 	movi	r2,56
    e2b0:	14014d0e 	bge	r2,r16,e7e8 <__divdf3+0x82c>
    e2b4:	a180004c 	andi	r6,r20,1
    e2b8:	0011883a 	mov	r8,zero
    e2bc:	000b883a 	mov	r5,zero
    e2c0:	0027883a 	mov	r19,zero
    e2c4:	003f9b06 	br	e134 <__alt_data_end+0xfffb8a04>
    e2c8:	8880022c 	andhi	r2,r17,8
    e2cc:	1000f026 	beq	r2,zero,e690 <__divdf3+0x6d4>
    e2d0:	8080022c 	andhi	r2,r16,8
    e2d4:	1000ee1e 	bne	r2,zero,e690 <__divdf3+0x6d4>
    e2d8:	00800434 	movhi	r2,16
    e2dc:	81400234 	orhi	r5,r16,8
    e2e0:	10bfffc4 	addi	r2,r2,-1
    e2e4:	b80d883a 	mov	r6,r23
    e2e8:	288a703a 	and	r5,r5,r2
    e2ec:	a827883a 	mov	r19,r21
    e2f0:	003fea06 	br	e29c <__alt_data_end+0xfffb8b6c>
    e2f4:	84411c36 	bltu	r16,r17,e768 <__divdf3+0x7ac>
    e2f8:	8c011a26 	beq	r17,r16,e764 <__divdf3+0x7a8>
    e2fc:	94bfffc4 	addi	r18,r18,-1
    e300:	dcc00015 	stw	r19,0(sp)
    e304:	8811883a 	mov	r8,r17
    e308:	002d883a 	mov	r22,zero
    e30c:	a80cd63a 	srli	r6,r21,24
    e310:	8020923a 	slli	r16,r16,8
    e314:	a82a923a 	slli	r21,r21,8
    e318:	4009883a 	mov	r4,r8
    e31c:	342eb03a 	or	r23,r6,r16
    e320:	dd400115 	stw	r21,4(sp)
    e324:	b82ad43a 	srli	r21,r23,16
    e328:	da000315 	stw	r8,12(sp)
    e32c:	bcffffcc 	andi	r19,r23,65535
    e330:	a80b883a 	mov	r5,r21
    e334:	00035240 	call	3524 <__udivsi3>
    e338:	1009883a 	mov	r4,r2
    e33c:	980b883a 	mov	r5,r19
    e340:	1023883a 	mov	r17,r2
    e344:	000d6f80 	call	d6f8 <__mulsi3>
    e348:	da000317 	ldw	r8,12(sp)
    e34c:	a80b883a 	mov	r5,r21
    e350:	1039883a 	mov	fp,r2
    e354:	4009883a 	mov	r4,r8
    e358:	000352c0 	call	352c <__umodsi3>
    e35c:	d8c00017 	ldw	r3,0(sp)
    e360:	1004943a 	slli	r2,r2,16
    e364:	1810d43a 	srli	r8,r3,16
    e368:	120eb03a 	or	r7,r2,r8
    e36c:	3f00062e 	bgeu	r7,fp,e388 <__divdf3+0x3cc>
    e370:	3dcf883a 	add	r7,r7,r23
    e374:	88bfffc4 	addi	r2,r17,-1
    e378:	3dc10a36 	bltu	r7,r23,e7a4 <__divdf3+0x7e8>
    e37c:	3f01092e 	bgeu	r7,fp,e7a4 <__divdf3+0x7e8>
    e380:	8c7fff84 	addi	r17,r17,-2
    e384:	3dcf883a 	add	r7,r7,r23
    e388:	3f39c83a 	sub	fp,r7,fp
    e38c:	e009883a 	mov	r4,fp
    e390:	a80b883a 	mov	r5,r21
    e394:	00035240 	call	3524 <__udivsi3>
    e398:	1009883a 	mov	r4,r2
    e39c:	980b883a 	mov	r5,r19
    e3a0:	1021883a 	mov	r16,r2
    e3a4:	000d6f80 	call	d6f8 <__mulsi3>
    e3a8:	e009883a 	mov	r4,fp
    e3ac:	a80b883a 	mov	r5,r21
    e3b0:	d8800315 	stw	r2,12(sp)
    e3b4:	000352c0 	call	352c <__umodsi3>
    e3b8:	d9000017 	ldw	r4,0(sp)
    e3bc:	1004943a 	slli	r2,r2,16
    e3c0:	da000317 	ldw	r8,12(sp)
    e3c4:	20ffffcc 	andi	r3,r4,65535
    e3c8:	10ceb03a 	or	r7,r2,r3
    e3cc:	3a00062e 	bgeu	r7,r8,e3e8 <__divdf3+0x42c>
    e3d0:	3dcf883a 	add	r7,r7,r23
    e3d4:	80bfffc4 	addi	r2,r16,-1
    e3d8:	3dc0f036 	bltu	r7,r23,e79c <__divdf3+0x7e0>
    e3dc:	3a00ef2e 	bgeu	r7,r8,e79c <__divdf3+0x7e0>
    e3e0:	843fff84 	addi	r16,r16,-2
    e3e4:	3dcf883a 	add	r7,r7,r23
    e3e8:	d8c00117 	ldw	r3,4(sp)
    e3ec:	8822943a 	slli	r17,r17,16
    e3f0:	3a0fc83a 	sub	r7,r7,r8
    e3f4:	1806d43a 	srli	r3,r3,16
    e3f8:	8462b03a 	or	r17,r16,r17
    e3fc:	8affffcc 	andi	r11,r17,65535
    e400:	d8c00015 	stw	r3,0(sp)
    e404:	d8c00117 	ldw	r3,4(sp)
    e408:	8820d43a 	srli	r16,r17,16
    e40c:	5809883a 	mov	r4,r11
    e410:	1f3fffcc 	andi	fp,r3,65535
    e414:	e00b883a 	mov	r5,fp
    e418:	d9c00515 	stw	r7,20(sp)
    e41c:	dac00215 	stw	r11,8(sp)
    e420:	000d6f80 	call	d6f8 <__mulsi3>
    e424:	8009883a 	mov	r4,r16
    e428:	e00b883a 	mov	r5,fp
    e42c:	d8800415 	stw	r2,16(sp)
    e430:	000d6f80 	call	d6f8 <__mulsi3>
    e434:	d9400017 	ldw	r5,0(sp)
    e438:	8009883a 	mov	r4,r16
    e43c:	d8800315 	stw	r2,12(sp)
    e440:	000d6f80 	call	d6f8 <__mulsi3>
    e444:	dac00217 	ldw	r11,8(sp)
    e448:	d9400017 	ldw	r5,0(sp)
    e44c:	d8800215 	stw	r2,8(sp)
    e450:	5809883a 	mov	r4,r11
    e454:	000d6f80 	call	d6f8 <__mulsi3>
    e458:	da400417 	ldw	r9,16(sp)
    e45c:	da800317 	ldw	r10,12(sp)
    e460:	d9c00517 	ldw	r7,20(sp)
    e464:	480ad43a 	srli	r5,r9,16
    e468:	5085883a 	add	r2,r10,r2
    e46c:	db000217 	ldw	r12,8(sp)
    e470:	1151883a 	add	r8,r2,r5
    e474:	4280022e 	bgeu	r8,r10,e480 <__divdf3+0x4c4>
    e478:	00800074 	movhi	r2,1
    e47c:	6099883a 	add	r12,r12,r2
    e480:	400ad43a 	srli	r5,r8,16
    e484:	4010943a 	slli	r8,r8,16
    e488:	4c3fffcc 	andi	r16,r9,65535
    e48c:	6149883a 	add	r4,r12,r5
    e490:	4411883a 	add	r8,r8,r16
    e494:	3900a736 	bltu	r7,r4,e734 <__divdf3+0x778>
    e498:	3900c426 	beq	r7,r4,e7ac <__divdf3+0x7f0>
    e49c:	3909c83a 	sub	r4,r7,r4
    e4a0:	b221c83a 	sub	r16,r22,r8
    e4a4:	b42d803a 	cmpltu	r22,r22,r16
    e4a8:	25adc83a 	sub	r22,r4,r22
    e4ac:	b5c0c626 	beq	r22,r23,e7c8 <__divdf3+0x80c>
    e4b0:	b009883a 	mov	r4,r22
    e4b4:	a80b883a 	mov	r5,r21
    e4b8:	00035240 	call	3524 <__udivsi3>
    e4bc:	1009883a 	mov	r4,r2
    e4c0:	980b883a 	mov	r5,r19
    e4c4:	d8800315 	stw	r2,12(sp)
    e4c8:	000d6f80 	call	d6f8 <__mulsi3>
    e4cc:	a80b883a 	mov	r5,r21
    e4d0:	b009883a 	mov	r4,r22
    e4d4:	d8800415 	stw	r2,16(sp)
    e4d8:	000352c0 	call	352c <__umodsi3>
    e4dc:	1004943a 	slli	r2,r2,16
    e4e0:	800ed43a 	srli	r7,r16,16
    e4e4:	da400417 	ldw	r9,16(sp)
    e4e8:	da000317 	ldw	r8,12(sp)
    e4ec:	11cab03a 	or	r5,r2,r7
    e4f0:	2a40062e 	bgeu	r5,r9,e50c <__divdf3+0x550>
    e4f4:	2dcb883a 	add	r5,r5,r23
    e4f8:	40bfffc4 	addi	r2,r8,-1
    e4fc:	2dc0b436 	bltu	r5,r23,e7d0 <__divdf3+0x814>
    e500:	2a40b32e 	bgeu	r5,r9,e7d0 <__divdf3+0x814>
    e504:	423fff84 	addi	r8,r8,-2
    e508:	2dcb883a 	add	r5,r5,r23
    e50c:	2a6dc83a 	sub	r22,r5,r9
    e510:	b009883a 	mov	r4,r22
    e514:	a80b883a 	mov	r5,r21
    e518:	da000315 	stw	r8,12(sp)
    e51c:	00035240 	call	3524 <__udivsi3>
    e520:	980b883a 	mov	r5,r19
    e524:	1009883a 	mov	r4,r2
    e528:	d8800415 	stw	r2,16(sp)
    e52c:	000d6f80 	call	d6f8 <__mulsi3>
    e530:	b009883a 	mov	r4,r22
    e534:	a80b883a 	mov	r5,r21
    e538:	1027883a 	mov	r19,r2
    e53c:	000352c0 	call	352c <__umodsi3>
    e540:	1004943a 	slli	r2,r2,16
    e544:	843fffcc 	andi	r16,r16,65535
    e548:	da000317 	ldw	r8,12(sp)
    e54c:	140eb03a 	or	r7,r2,r16
    e550:	da400417 	ldw	r9,16(sp)
    e554:	3cc0062e 	bgeu	r7,r19,e570 <__divdf3+0x5b4>
    e558:	3dcf883a 	add	r7,r7,r23
    e55c:	48bfffc4 	addi	r2,r9,-1
    e560:	3dc09d36 	bltu	r7,r23,e7d8 <__divdf3+0x81c>
    e564:	3cc09c2e 	bgeu	r7,r19,e7d8 <__divdf3+0x81c>
    e568:	4a7fff84 	addi	r9,r9,-2
    e56c:	3dcf883a 	add	r7,r7,r23
    e570:	4010943a 	slli	r8,r8,16
    e574:	3cebc83a 	sub	r21,r7,r19
    e578:	e00b883a 	mov	r5,fp
    e57c:	4a26b03a 	or	r19,r9,r8
    e580:	99ffffcc 	andi	r7,r19,65535
    e584:	9820d43a 	srli	r16,r19,16
    e588:	3809883a 	mov	r4,r7
    e58c:	d9c00515 	stw	r7,20(sp)
    e590:	000d6f80 	call	d6f8 <__mulsi3>
    e594:	8009883a 	mov	r4,r16
    e598:	e00b883a 	mov	r5,fp
    e59c:	102d883a 	mov	r22,r2
    e5a0:	000d6f80 	call	d6f8 <__mulsi3>
    e5a4:	d9400017 	ldw	r5,0(sp)
    e5a8:	8009883a 	mov	r4,r16
    e5ac:	1039883a 	mov	fp,r2
    e5b0:	000d6f80 	call	d6f8 <__mulsi3>
    e5b4:	d9c00517 	ldw	r7,20(sp)
    e5b8:	d9400017 	ldw	r5,0(sp)
    e5bc:	1021883a 	mov	r16,r2
    e5c0:	3809883a 	mov	r4,r7
    e5c4:	000d6f80 	call	d6f8 <__mulsi3>
    e5c8:	b008d43a 	srli	r4,r22,16
    e5cc:	e085883a 	add	r2,fp,r2
    e5d0:	1109883a 	add	r4,r2,r4
    e5d4:	2700022e 	bgeu	r4,fp,e5e0 <__divdf3+0x624>
    e5d8:	00800074 	movhi	r2,1
    e5dc:	80a1883a 	add	r16,r16,r2
    e5e0:	200ad43a 	srli	r5,r4,16
    e5e4:	2008943a 	slli	r4,r4,16
    e5e8:	b5bfffcc 	andi	r22,r22,65535
    e5ec:	8145883a 	add	r2,r16,r5
    e5f0:	2589883a 	add	r4,r4,r22
    e5f4:	a8802c36 	bltu	r21,r2,e6a8 <__divdf3+0x6ec>
    e5f8:	a880a426 	beq	r21,r2,e88c <__divdf3+0x8d0>
    e5fc:	9cc00054 	ori	r19,r19,1
    e600:	9200ffc4 	addi	r8,r18,1023
    e604:	023f270e 	bge	zero,r8,e2a4 <__alt_data_end+0xfffb8b74>
    e608:	988001cc 	andi	r2,r19,7
    e60c:	10000726 	beq	r2,zero,e62c <__divdf3+0x670>
    e610:	990003cc 	andi	r4,r19,15
    e614:	00800104 	movi	r2,4
    e618:	20800426 	beq	r4,r2,e62c <__divdf3+0x670>
    e61c:	9885883a 	add	r2,r19,r2
    e620:	14e7803a 	cmpltu	r19,r2,r19
    e624:	8ce3883a 	add	r17,r17,r19
    e628:	1027883a 	mov	r19,r2
    e62c:	8880402c 	andhi	r2,r17,256
    e630:	10000426 	beq	r2,zero,e644 <__divdf3+0x688>
    e634:	00bfc034 	movhi	r2,65280
    e638:	10bfffc4 	addi	r2,r2,-1
    e63c:	92010004 	addi	r8,r18,1024
    e640:	88a2703a 	and	r17,r17,r2
    e644:	0081ff84 	movi	r2,2046
    e648:	123eb616 	blt	r2,r8,e124 <__alt_data_end+0xfffb89f4>
    e64c:	9826d0fa 	srli	r19,r19,3
    e650:	8804977a 	slli	r2,r17,29
    e654:	8820927a 	slli	r16,r17,9
    e658:	4201ffcc 	andi	r8,r8,2047
    e65c:	14e6b03a 	or	r19,r2,r19
    e660:	800ad33a 	srli	r5,r16,12
    e664:	a180004c 	andi	r6,r20,1
    e668:	003eb206 	br	e134 <__alt_data_end+0xfffb8a04>
    e66c:	008000c4 	movi	r2,3
    e670:	4080ac26 	beq	r8,r2,e924 <__divdf3+0x968>
    e674:	00800044 	movi	r2,1
    e678:	4080591e 	bne	r8,r2,e7e0 <__divdf3+0x824>
    e67c:	e00d883a 	mov	r6,fp
    e680:	0011883a 	mov	r8,zero
    e684:	000b883a 	mov	r5,zero
    e688:	0027883a 	mov	r19,zero
    e68c:	003ea906 	br	e134 <__alt_data_end+0xfffb8a04>
    e690:	00800434 	movhi	r2,16
    e694:	89400234 	orhi	r5,r17,8
    e698:	10bfffc4 	addi	r2,r2,-1
    e69c:	b00d883a 	mov	r6,r22
    e6a0:	288a703a 	and	r5,r5,r2
    e6a4:	003efd06 	br	e29c <__alt_data_end+0xfffb8b6c>
    e6a8:	adcf883a 	add	r7,r21,r23
    e6ac:	997fffc4 	addi	r5,r19,-1
    e6b0:	3dc0412e 	bgeu	r7,r23,e7b8 <__divdf3+0x7fc>
    e6b4:	2827883a 	mov	r19,r5
    e6b8:	38bfd01e 	bne	r7,r2,e5fc <__alt_data_end+0xfffb8ecc>
    e6bc:	d8c00117 	ldw	r3,4(sp)
    e6c0:	193fce1e 	bne	r3,r4,e5fc <__alt_data_end+0xfffb8ecc>
    e6c4:	003fce06 	br	e600 <__alt_data_end+0xfffb8ed0>
    e6c8:	d9800215 	stw	r6,8(sp)
    e6cc:	d9c00515 	stw	r7,20(sp)
    e6d0:	000feb80 	call	feb8 <__clzsi2>
    e6d4:	10c00804 	addi	r3,r2,32
    e6d8:	010009c4 	movi	r4,39
    e6dc:	d9800217 	ldw	r6,8(sp)
    e6e0:	d9c00517 	ldw	r7,20(sp)
    e6e4:	20feb20e 	bge	r4,r3,e1b0 <__alt_data_end+0xfffb8a80>
    e6e8:	117ffe04 	addi	r5,r2,-8
    e6ec:	a162983a 	sll	r17,r20,r5
    e6f0:	0027883a 	mov	r19,zero
    e6f4:	003eb506 	br	e1cc <__alt_data_end+0xfffb8a9c>
    e6f8:	3009883a 	mov	r4,r6
    e6fc:	d9800215 	stw	r6,8(sp)
    e700:	da000315 	stw	r8,12(sp)
    e704:	da400415 	stw	r9,16(sp)
    e708:	000feb80 	call	feb8 <__clzsi2>
    e70c:	10c00804 	addi	r3,r2,32
    e710:	010009c4 	movi	r4,39
    e714:	d9800217 	ldw	r6,8(sp)
    e718:	da000317 	ldw	r8,12(sp)
    e71c:	da400417 	ldw	r9,16(sp)
    e720:	20fec10e 	bge	r4,r3,e228 <__alt_data_end+0xfffb8af8>
    e724:	10bffe04 	addi	r2,r2,-8
    e728:	a8a0983a 	sll	r16,r21,r2
    e72c:	002b883a 	mov	r21,zero
    e730:	003ec406 	br	e244 <__alt_data_end+0xfffb8b14>
    e734:	d8c00117 	ldw	r3,4(sp)
    e738:	b0ed883a 	add	r22,r22,r3
    e73c:	b0c5803a 	cmpltu	r2,r22,r3
    e740:	15c5883a 	add	r2,r2,r23
    e744:	11cf883a 	add	r7,r2,r7
    e748:	88bfffc4 	addi	r2,r17,-1
    e74c:	b9c00d2e 	bgeu	r23,r7,e784 <__divdf3+0x7c8>
    e750:	39003f36 	bltu	r7,r4,e850 <__divdf3+0x894>
    e754:	21c06a26 	beq	r4,r7,e900 <__divdf3+0x944>
    e758:	3909c83a 	sub	r4,r7,r4
    e75c:	1023883a 	mov	r17,r2
    e760:	003f4f06 	br	e4a0 <__alt_data_end+0xfffb8d70>
    e764:	9d7ee536 	bltu	r19,r21,e2fc <__alt_data_end+0xfffb8bcc>
    e768:	982ed07a 	srli	r23,r19,1
    e76c:	880497fa 	slli	r2,r17,31
    e770:	8810d07a 	srli	r8,r17,1
    e774:	982c97fa 	slli	r22,r19,31
    e778:	b884b03a 	or	r2,r23,r2
    e77c:	d8800015 	stw	r2,0(sp)
    e780:	003ee206 	br	e30c <__alt_data_end+0xfffb8bdc>
    e784:	3dfff41e 	bne	r7,r23,e758 <__alt_data_end+0xfffb9028>
    e788:	d8c00117 	ldw	r3,4(sp)
    e78c:	b0fff02e 	bgeu	r22,r3,e750 <__alt_data_end+0xfffb9020>
    e790:	b909c83a 	sub	r4,r23,r4
    e794:	1023883a 	mov	r17,r2
    e798:	003f4106 	br	e4a0 <__alt_data_end+0xfffb8d70>
    e79c:	1021883a 	mov	r16,r2
    e7a0:	003f1106 	br	e3e8 <__alt_data_end+0xfffb8cb8>
    e7a4:	1023883a 	mov	r17,r2
    e7a8:	003ef706 	br	e388 <__alt_data_end+0xfffb8c58>
    e7ac:	b23fe136 	bltu	r22,r8,e734 <__alt_data_end+0xfffb9004>
    e7b0:	0009883a 	mov	r4,zero
    e7b4:	003f3a06 	br	e4a0 <__alt_data_end+0xfffb8d70>
    e7b8:	38802c36 	bltu	r7,r2,e86c <__divdf3+0x8b0>
    e7bc:	11c05326 	beq	r2,r7,e90c <__divdf3+0x950>
    e7c0:	2827883a 	mov	r19,r5
    e7c4:	003f8d06 	br	e5fc <__alt_data_end+0xfffb8ecc>
    e7c8:	04ffffc4 	movi	r19,-1
    e7cc:	003f8c06 	br	e600 <__alt_data_end+0xfffb8ed0>
    e7d0:	1011883a 	mov	r8,r2
    e7d4:	003f4d06 	br	e50c <__alt_data_end+0xfffb8ddc>
    e7d8:	1013883a 	mov	r9,r2
    e7dc:	003f6406 	br	e570 <__alt_data_end+0xfffb8e40>
    e7e0:	e029883a 	mov	r20,fp
    e7e4:	003f8606 	br	e600 <__alt_data_end+0xfffb8ed0>
    e7e8:	008007c4 	movi	r2,31
    e7ec:	14002a16 	blt	r2,r16,e898 <__divdf3+0x8dc>
    e7f0:	91410784 	addi	r5,r18,1054
    e7f4:	9c0cd83a 	srl	r6,r19,r16
    e7f8:	8948983a 	sll	r4,r17,r5
    e7fc:	9944983a 	sll	r2,r19,r5
    e800:	8c20d83a 	srl	r16,r17,r16
    e804:	3108b03a 	or	r4,r6,r4
    e808:	1004c03a 	cmpne	r2,r2,zero
    e80c:	2084b03a 	or	r2,r4,r2
    e810:	110001cc 	andi	r4,r2,7
    e814:	20000726 	beq	r4,zero,e834 <__divdf3+0x878>
    e818:	114003cc 	andi	r5,r2,15
    e81c:	01000104 	movi	r4,4
    e820:	29000426 	beq	r5,r4,e834 <__divdf3+0x878>
    e824:	11000104 	addi	r4,r2,4
    e828:	2085803a 	cmpltu	r2,r4,r2
    e82c:	80a1883a 	add	r16,r16,r2
    e830:	2005883a 	mov	r2,r4
    e834:	8100202c 	andhi	r4,r16,128
    e838:	20002d26 	beq	r4,zero,e8f0 <__divdf3+0x934>
    e83c:	a180004c 	andi	r6,r20,1
    e840:	02000044 	movi	r8,1
    e844:	000b883a 	mov	r5,zero
    e848:	0027883a 	mov	r19,zero
    e84c:	003e3906 	br	e134 <__alt_data_end+0xfffb8a04>
    e850:	d8c00117 	ldw	r3,4(sp)
    e854:	8c7fff84 	addi	r17,r17,-2
    e858:	b0ed883a 	add	r22,r22,r3
    e85c:	b0c5803a 	cmpltu	r2,r22,r3
    e860:	15c5883a 	add	r2,r2,r23
    e864:	11cf883a 	add	r7,r2,r7
    e868:	003f0c06 	br	e49c <__alt_data_end+0xfffb8d6c>
    e86c:	d8c00117 	ldw	r3,4(sp)
    e870:	997fff84 	addi	r5,r19,-2
    e874:	18d1883a 	add	r8,r3,r3
    e878:	40c7803a 	cmpltu	r3,r8,r3
    e87c:	1dcd883a 	add	r6,r3,r23
    e880:	398f883a 	add	r7,r7,r6
    e884:	da000115 	stw	r8,4(sp)
    e888:	003f8a06 	br	e6b4 <__alt_data_end+0xfffb8f84>
    e88c:	203f861e 	bne	r4,zero,e6a8 <__alt_data_end+0xfffb8f78>
    e890:	d8000115 	stw	zero,4(sp)
    e894:	003f8906 	br	e6bc <__alt_data_end+0xfffb8f8c>
    e898:	00bef884 	movi	r2,-1054
    e89c:	1485c83a 	sub	r2,r2,r18
    e8a0:	01000804 	movi	r4,32
    e8a4:	8884d83a 	srl	r2,r17,r2
    e8a8:	81001c26 	beq	r16,r4,e91c <__divdf3+0x960>
    e8ac:	91010f84 	addi	r4,r18,1086
    e8b0:	8908983a 	sll	r4,r17,r4
    e8b4:	24c8b03a 	or	r4,r4,r19
    e8b8:	2008c03a 	cmpne	r4,r4,zero
    e8bc:	2084b03a 	or	r2,r4,r2
    e8c0:	140001cc 	andi	r16,r2,7
    e8c4:	8000061e 	bne	r16,zero,e8e0 <__divdf3+0x924>
    e8c8:	000b883a 	mov	r5,zero
    e8cc:	1004d0fa 	srli	r2,r2,3
    e8d0:	a180004c 	andi	r6,r20,1
    e8d4:	0011883a 	mov	r8,zero
    e8d8:	1426b03a 	or	r19,r2,r16
    e8dc:	003e1506 	br	e134 <__alt_data_end+0xfffb8a04>
    e8e0:	114003cc 	andi	r5,r2,15
    e8e4:	01000104 	movi	r4,4
    e8e8:	0021883a 	mov	r16,zero
    e8ec:	293fcd1e 	bne	r5,r4,e824 <__alt_data_end+0xfffb90f4>
    e8f0:	800a927a 	slli	r5,r16,9
    e8f4:	8020977a 	slli	r16,r16,29
    e8f8:	280ad33a 	srli	r5,r5,12
    e8fc:	003ff306 	br	e8cc <__alt_data_end+0xfffb919c>
    e900:	b23fd336 	bltu	r22,r8,e850 <__alt_data_end+0xfffb9120>
    e904:	1023883a 	mov	r17,r2
    e908:	003fa906 	br	e7b0 <__alt_data_end+0xfffb9080>
    e90c:	d8c00117 	ldw	r3,4(sp)
    e910:	193fd636 	bltu	r3,r4,e86c <__alt_data_end+0xfffb913c>
    e914:	2827883a 	mov	r19,r5
    e918:	003f6806 	br	e6bc <__alt_data_end+0xfffb8f8c>
    e91c:	0009883a 	mov	r4,zero
    e920:	003fe406 	br	e8b4 <__alt_data_end+0xfffb9184>
    e924:	00800434 	movhi	r2,16
    e928:	89400234 	orhi	r5,r17,8
    e92c:	10bfffc4 	addi	r2,r2,-1
    e930:	e00d883a 	mov	r6,fp
    e934:	288a703a 	and	r5,r5,r2
    e938:	003e5806 	br	e29c <__alt_data_end+0xfffb8b6c>

0000e93c <__eqdf2>:
    e93c:	2804d53a 	srli	r2,r5,20
    e940:	3806d53a 	srli	r3,r7,20
    e944:	02000434 	movhi	r8,16
    e948:	423fffc4 	addi	r8,r8,-1
    e94c:	1081ffcc 	andi	r2,r2,2047
    e950:	0241ffc4 	movi	r9,2047
    e954:	2a14703a 	and	r10,r5,r8
    e958:	18c1ffcc 	andi	r3,r3,2047
    e95c:	3a10703a 	and	r8,r7,r8
    e960:	280ad7fa 	srli	r5,r5,31
    e964:	380ed7fa 	srli	r7,r7,31
    e968:	12400f26 	beq	r2,r9,e9a8 <__eqdf2+0x6c>
    e96c:	0241ffc4 	movi	r9,2047
    e970:	1a400326 	beq	r3,r9,e980 <__eqdf2+0x44>
    e974:	10c00526 	beq	r2,r3,e98c <__eqdf2+0x50>
    e978:	00800044 	movi	r2,1
    e97c:	f800283a 	ret
    e980:	4192b03a 	or	r9,r8,r6
    e984:	483ffc1e 	bne	r9,zero,e978 <__alt_data_end+0xfffb9248>
    e988:	10fffb1e 	bne	r2,r3,e978 <__alt_data_end+0xfffb9248>
    e98c:	523ffa1e 	bne	r10,r8,e978 <__alt_data_end+0xfffb9248>
    e990:	21bff91e 	bne	r4,r6,e978 <__alt_data_end+0xfffb9248>
    e994:	29c00826 	beq	r5,r7,e9b8 <__eqdf2+0x7c>
    e998:	103ff71e 	bne	r2,zero,e978 <__alt_data_end+0xfffb9248>
    e99c:	5104b03a 	or	r2,r10,r4
    e9a0:	1004c03a 	cmpne	r2,r2,zero
    e9a4:	f800283a 	ret
    e9a8:	5112b03a 	or	r9,r10,r4
    e9ac:	483fef26 	beq	r9,zero,e96c <__alt_data_end+0xfffb923c>
    e9b0:	00800044 	movi	r2,1
    e9b4:	f800283a 	ret
    e9b8:	0005883a 	mov	r2,zero
    e9bc:	f800283a 	ret

0000e9c0 <__gedf2>:
    e9c0:	2804d53a 	srli	r2,r5,20
    e9c4:	3806d53a 	srli	r3,r7,20
    e9c8:	02000434 	movhi	r8,16
    e9cc:	423fffc4 	addi	r8,r8,-1
    e9d0:	0241ffc4 	movi	r9,2047
    e9d4:	1081ffcc 	andi	r2,r2,2047
    e9d8:	2a14703a 	and	r10,r5,r8
    e9dc:	1a46703a 	and	r3,r3,r9
    e9e0:	3a10703a 	and	r8,r7,r8
    e9e4:	280ad7fa 	srli	r5,r5,31
    e9e8:	380ed7fa 	srli	r7,r7,31
    e9ec:	12400b26 	beq	r2,r9,ea1c <__gedf2+0x5c>
    e9f0:	1a401626 	beq	r3,r9,ea4c <__gedf2+0x8c>
    e9f4:	10000c1e 	bne	r2,zero,ea28 <__gedf2+0x68>
    e9f8:	5112b03a 	or	r9,r10,r4
    e9fc:	4813003a 	cmpeq	r9,r9,zero
    ea00:	4817883a 	mov	r11,r9
    ea04:	18000c1e 	bne	r3,zero,ea38 <__gedf2+0x78>
    ea08:	4198b03a 	or	r12,r8,r6
    ea0c:	60000a1e 	bne	r12,zero,ea38 <__gedf2+0x78>
    ea10:	48001326 	beq	r9,zero,ea60 <__gedf2+0xa0>
    ea14:	0005883a 	mov	r2,zero
    ea18:	f800283a 	ret
    ea1c:	5112b03a 	or	r9,r10,r4
    ea20:	4800191e 	bne	r9,zero,ea88 <__gedf2+0xc8>
    ea24:	18800926 	beq	r3,r2,ea4c <__gedf2+0x8c>
    ea28:	18000b1e 	bne	r3,zero,ea58 <__gedf2+0x98>
    ea2c:	4192b03a 	or	r9,r8,r6
    ea30:	0017883a 	mov	r11,zero
    ea34:	48000a26 	beq	r9,zero,ea60 <__gedf2+0xa0>
    ea38:	39c03fcc 	andi	r7,r7,255
    ea3c:	58000726 	beq	r11,zero,ea5c <__gedf2+0x9c>
    ea40:	3800081e 	bne	r7,zero,ea64 <__gedf2+0xa4>
    ea44:	00bfffc4 	movi	r2,-1
    ea48:	f800283a 	ret
    ea4c:	4192b03a 	or	r9,r8,r6
    ea50:	48000d1e 	bne	r9,zero,ea88 <__gedf2+0xc8>
    ea54:	103fe826 	beq	r2,zero,e9f8 <__alt_data_end+0xfffb92c8>
    ea58:	39c03fcc 	andi	r7,r7,255
    ea5c:	29c00326 	beq	r5,r7,ea6c <__gedf2+0xac>
    ea60:	283ff81e 	bne	r5,zero,ea44 <__alt_data_end+0xfffb9314>
    ea64:	00800044 	movi	r2,1
    ea68:	f800283a 	ret
    ea6c:	18bffc16 	blt	r3,r2,ea60 <__alt_data_end+0xfffb9330>
    ea70:	10c00316 	blt	r2,r3,ea80 <__gedf2+0xc0>
    ea74:	42bffa36 	bltu	r8,r10,ea60 <__alt_data_end+0xfffb9330>
    ea78:	52000526 	beq	r10,r8,ea90 <__gedf2+0xd0>
    ea7c:	523fe52e 	bgeu	r10,r8,ea14 <__alt_data_end+0xfffb92e4>
    ea80:	283ff026 	beq	r5,zero,ea44 <__alt_data_end+0xfffb9314>
    ea84:	003ff706 	br	ea64 <__alt_data_end+0xfffb9334>
    ea88:	00bfff84 	movi	r2,-2
    ea8c:	f800283a 	ret
    ea90:	313ff336 	bltu	r6,r4,ea60 <__alt_data_end+0xfffb9330>
    ea94:	21bfdf2e 	bgeu	r4,r6,ea14 <__alt_data_end+0xfffb92e4>
    ea98:	283fea26 	beq	r5,zero,ea44 <__alt_data_end+0xfffb9314>
    ea9c:	003ff106 	br	ea64 <__alt_data_end+0xfffb9334>

0000eaa0 <__ledf2>:
    eaa0:	2804d53a 	srli	r2,r5,20
    eaa4:	3810d53a 	srli	r8,r7,20
    eaa8:	00c00434 	movhi	r3,16
    eaac:	18ffffc4 	addi	r3,r3,-1
    eab0:	0241ffc4 	movi	r9,2047
    eab4:	1081ffcc 	andi	r2,r2,2047
    eab8:	28d4703a 	and	r10,r5,r3
    eabc:	4250703a 	and	r8,r8,r9
    eac0:	38c6703a 	and	r3,r7,r3
    eac4:	280ad7fa 	srli	r5,r5,31
    eac8:	380ed7fa 	srli	r7,r7,31
    eacc:	12400b26 	beq	r2,r9,eafc <__ledf2+0x5c>
    ead0:	42401926 	beq	r8,r9,eb38 <__ledf2+0x98>
    ead4:	10000c1e 	bne	r2,zero,eb08 <__ledf2+0x68>
    ead8:	5112b03a 	or	r9,r10,r4
    eadc:	4813003a 	cmpeq	r9,r9,zero
    eae0:	4817883a 	mov	r11,r9
    eae4:	40000f26 	beq	r8,zero,eb24 <__ledf2+0x84>
    eae8:	39c03fcc 	andi	r7,r7,255
    eaec:	58001826 	beq	r11,zero,eb50 <__ledf2+0xb0>
    eaf0:	38000a1e 	bne	r7,zero,eb1c <__ledf2+0x7c>
    eaf4:	00bfffc4 	movi	r2,-1
    eaf8:	f800283a 	ret
    eafc:	5112b03a 	or	r9,r10,r4
    eb00:	48000f1e 	bne	r9,zero,eb40 <__ledf2+0xa0>
    eb04:	40800c26 	beq	r8,r2,eb38 <__ledf2+0x98>
    eb08:	4000101e 	bne	r8,zero,eb4c <__ledf2+0xac>
    eb0c:	1992b03a 	or	r9,r3,r6
    eb10:	0017883a 	mov	r11,zero
    eb14:	483ff41e 	bne	r9,zero,eae8 <__alt_data_end+0xfffb93b8>
    eb18:	283ff61e 	bne	r5,zero,eaf4 <__alt_data_end+0xfffb93c4>
    eb1c:	00800044 	movi	r2,1
    eb20:	f800283a 	ret
    eb24:	1998b03a 	or	r12,r3,r6
    eb28:	603fef1e 	bne	r12,zero,eae8 <__alt_data_end+0xfffb93b8>
    eb2c:	483ffa26 	beq	r9,zero,eb18 <__alt_data_end+0xfffb93e8>
    eb30:	0005883a 	mov	r2,zero
    eb34:	f800283a 	ret
    eb38:	1992b03a 	or	r9,r3,r6
    eb3c:	48000226 	beq	r9,zero,eb48 <__ledf2+0xa8>
    eb40:	00800084 	movi	r2,2
    eb44:	f800283a 	ret
    eb48:	103fe326 	beq	r2,zero,ead8 <__alt_data_end+0xfffb93a8>
    eb4c:	39c03fcc 	andi	r7,r7,255
    eb50:	29fff11e 	bne	r5,r7,eb18 <__alt_data_end+0xfffb93e8>
    eb54:	40bff016 	blt	r8,r2,eb18 <__alt_data_end+0xfffb93e8>
    eb58:	12000316 	blt	r2,r8,eb68 <__ledf2+0xc8>
    eb5c:	1abfee36 	bltu	r3,r10,eb18 <__alt_data_end+0xfffb93e8>
    eb60:	50c00326 	beq	r10,r3,eb70 <__ledf2+0xd0>
    eb64:	50fff22e 	bgeu	r10,r3,eb30 <__alt_data_end+0xfffb9400>
    eb68:	283fe226 	beq	r5,zero,eaf4 <__alt_data_end+0xfffb93c4>
    eb6c:	003feb06 	br	eb1c <__alt_data_end+0xfffb93ec>
    eb70:	313fe936 	bltu	r6,r4,eb18 <__alt_data_end+0xfffb93e8>
    eb74:	21bfee2e 	bgeu	r4,r6,eb30 <__alt_data_end+0xfffb9400>
    eb78:	283fde26 	beq	r5,zero,eaf4 <__alt_data_end+0xfffb93c4>
    eb7c:	003fe706 	br	eb1c <__alt_data_end+0xfffb93ec>

0000eb80 <__muldf3>:
    eb80:	deffee04 	addi	sp,sp,-72
    eb84:	dd000c15 	stw	r20,48(sp)
    eb88:	2828d53a 	srli	r20,r5,20
    eb8c:	dd400d15 	stw	r21,52(sp)
    eb90:	282ad7fa 	srli	r21,r5,31
    eb94:	dc000815 	stw	r16,32(sp)
    eb98:	04000434 	movhi	r16,16
    eb9c:	ddc00f15 	stw	r23,60(sp)
    eba0:	dcc00b15 	stw	r19,44(sp)
    eba4:	dc800a15 	stw	r18,40(sp)
    eba8:	843fffc4 	addi	r16,r16,-1
    ebac:	dfc01115 	stw	ra,68(sp)
    ebb0:	df001015 	stw	fp,64(sp)
    ebb4:	dd800e15 	stw	r22,56(sp)
    ebb8:	dc400915 	stw	r17,36(sp)
    ebbc:	a501ffcc 	andi	r20,r20,2047
    ebc0:	2025883a 	mov	r18,r4
    ebc4:	202f883a 	mov	r23,r4
    ebc8:	2c20703a 	and	r16,r5,r16
    ebcc:	a827883a 	mov	r19,r21
    ebd0:	aa403fcc 	andi	r9,r21,255
    ebd4:	a0005926 	beq	r20,zero,ed3c <__muldf3+0x1bc>
    ebd8:	0081ffc4 	movi	r2,2047
    ebdc:	a0803426 	beq	r20,r2,ecb0 <__muldf3+0x130>
    ebe0:	84000434 	orhi	r16,r16,16
    ebe4:	2004d77a 	srli	r2,r4,29
    ebe8:	802090fa 	slli	r16,r16,3
    ebec:	202e90fa 	slli	r23,r4,3
    ebf0:	a53f0044 	addi	r20,r20,-1023
    ebf4:	80a0b03a 	or	r16,r16,r2
    ebf8:	000b883a 	mov	r5,zero
    ebfc:	0039883a 	mov	fp,zero
    ec00:	3806d53a 	srli	r3,r7,20
    ec04:	382cd7fa 	srli	r22,r7,31
    ec08:	00800434 	movhi	r2,16
    ec0c:	10bfffc4 	addi	r2,r2,-1
    ec10:	18c1ffcc 	andi	r3,r3,2047
    ec14:	3025883a 	mov	r18,r6
    ec18:	38a2703a 	and	r17,r7,r2
    ec1c:	b2803fcc 	andi	r10,r22,255
    ec20:	18006426 	beq	r3,zero,edb4 <__muldf3+0x234>
    ec24:	0081ffc4 	movi	r2,2047
    ec28:	18805c26 	beq	r3,r2,ed9c <__muldf3+0x21c>
    ec2c:	8c400434 	orhi	r17,r17,16
    ec30:	3004d77a 	srli	r2,r6,29
    ec34:	882290fa 	slli	r17,r17,3
    ec38:	302490fa 	slli	r18,r6,3
    ec3c:	18ff0044 	addi	r3,r3,-1023
    ec40:	88a2b03a 	or	r17,r17,r2
    ec44:	000f883a 	mov	r7,zero
    ec48:	394ab03a 	or	r5,r7,r5
    ec4c:	280a90ba 	slli	r5,r5,2
    ec50:	00800074 	movhi	r2,1
    ec54:	10bb1c04 	addi	r2,r2,-5008
    ec58:	288b883a 	add	r5,r5,r2
    ec5c:	28800017 	ldw	r2,0(r5)
    ec60:	a0c7883a 	add	r3,r20,r3
    ec64:	b54cf03a 	xor	r6,r22,r21
    ec68:	1a000044 	addi	r8,r3,1
    ec6c:	1000683a 	jmp	r2
    ec70:	0000eeb4 	movhi	zero,954
    ec74:	0000eea0 	cmpeqi	zero,zero,954
    ec78:	0000eea0 	cmpeqi	zero,zero,954
    ec7c:	0000ee8c 	andi	zero,zero,954
    ec80:	0000eccc 	andi	zero,zero,947
    ec84:	0000eccc 	andi	zero,zero,947
    ec88:	0000ee74 	movhi	zero,953
    ec8c:	0000ee8c 	andi	zero,zero,954
    ec90:	0000eccc 	andi	zero,zero,947
    ec94:	0000ee74 	movhi	zero,953
    ec98:	0000eccc 	andi	zero,zero,947
    ec9c:	0000ee8c 	andi	zero,zero,954
    eca0:	0000ecd0 	cmplti	zero,zero,947
    eca4:	0000ecd0 	cmplti	zero,zero,947
    eca8:	0000ecd0 	cmplti	zero,zero,947
    ecac:	0000f1f0 	cmpltui	zero,zero,967
    ecb0:	8104b03a 	or	r2,r16,r4
    ecb4:	10006c1e 	bne	r2,zero,ee68 <__muldf3+0x2e8>
    ecb8:	01400204 	movi	r5,8
    ecbc:	0021883a 	mov	r16,zero
    ecc0:	002f883a 	mov	r23,zero
    ecc4:	07000084 	movi	fp,2
    ecc8:	003fcd06 	br	ec00 <__alt_data_end+0xfffb94d0>
    eccc:	3013883a 	mov	r9,r6
    ecd0:	00800084 	movi	r2,2
    ecd4:	e080501e 	bne	fp,r2,ee18 <__muldf3+0x298>
    ecd8:	4cc0004c 	andi	r19,r9,1
    ecdc:	0101ffc4 	movi	r4,2047
    ece0:	0021883a 	mov	r16,zero
    ece4:	002f883a 	mov	r23,zero
    ece8:	2008953a 	slli	r4,r4,20
    ecec:	98c03fcc 	andi	r3,r19,255
    ecf0:	04400434 	movhi	r17,16
    ecf4:	8c7fffc4 	addi	r17,r17,-1
    ecf8:	180697fa 	slli	r3,r3,31
    ecfc:	8460703a 	and	r16,r16,r17
    ed00:	8120b03a 	or	r16,r16,r4
    ed04:	80c6b03a 	or	r3,r16,r3
    ed08:	b805883a 	mov	r2,r23
    ed0c:	dfc01117 	ldw	ra,68(sp)
    ed10:	df001017 	ldw	fp,64(sp)
    ed14:	ddc00f17 	ldw	r23,60(sp)
    ed18:	dd800e17 	ldw	r22,56(sp)
    ed1c:	dd400d17 	ldw	r21,52(sp)
    ed20:	dd000c17 	ldw	r20,48(sp)
    ed24:	dcc00b17 	ldw	r19,44(sp)
    ed28:	dc800a17 	ldw	r18,40(sp)
    ed2c:	dc400917 	ldw	r17,36(sp)
    ed30:	dc000817 	ldw	r16,32(sp)
    ed34:	dec01204 	addi	sp,sp,72
    ed38:	f800283a 	ret
    ed3c:	8104b03a 	or	r2,r16,r4
    ed40:	10004426 	beq	r2,zero,ee54 <__muldf3+0x2d4>
    ed44:	80014b26 	beq	r16,zero,f274 <__muldf3+0x6f4>
    ed48:	8009883a 	mov	r4,r16
    ed4c:	d9800715 	stw	r6,28(sp)
    ed50:	d9c00215 	stw	r7,8(sp)
    ed54:	da400415 	stw	r9,16(sp)
    ed58:	000feb80 	call	feb8 <__clzsi2>
    ed5c:	d9800717 	ldw	r6,28(sp)
    ed60:	d9c00217 	ldw	r7,8(sp)
    ed64:	da400417 	ldw	r9,16(sp)
    ed68:	1007883a 	mov	r3,r2
    ed6c:	01000a04 	movi	r4,40
    ed70:	1dfffe04 	addi	r23,r3,-8
    ed74:	20c9c83a 	sub	r4,r4,r3
    ed78:	85e0983a 	sll	r16,r16,r23
    ed7c:	9108d83a 	srl	r4,r18,r4
    ed80:	95ee983a 	sll	r23,r18,r23
    ed84:	2420b03a 	or	r16,r4,r16
    ed88:	053f0344 	movi	r20,-1011
    ed8c:	a0e9c83a 	sub	r20,r20,r3
    ed90:	000b883a 	mov	r5,zero
    ed94:	0039883a 	mov	fp,zero
    ed98:	003f9906 	br	ec00 <__alt_data_end+0xfffb94d0>
    ed9c:	8984b03a 	or	r2,r17,r6
    eda0:	10002a1e 	bne	r2,zero,ee4c <__muldf3+0x2cc>
    eda4:	0023883a 	mov	r17,zero
    eda8:	0025883a 	mov	r18,zero
    edac:	01c00084 	movi	r7,2
    edb0:	003fa506 	br	ec48 <__alt_data_end+0xfffb9518>
    edb4:	8984b03a 	or	r2,r17,r6
    edb8:	10002026 	beq	r2,zero,ee3c <__muldf3+0x2bc>
    edbc:	88011c26 	beq	r17,zero,f230 <__muldf3+0x6b0>
    edc0:	8809883a 	mov	r4,r17
    edc4:	d9400215 	stw	r5,8(sp)
    edc8:	d9800715 	stw	r6,28(sp)
    edcc:	da400415 	stw	r9,16(sp)
    edd0:	da800315 	stw	r10,12(sp)
    edd4:	000feb80 	call	feb8 <__clzsi2>
    edd8:	d9400217 	ldw	r5,8(sp)
    eddc:	d9800717 	ldw	r6,28(sp)
    ede0:	da400417 	ldw	r9,16(sp)
    ede4:	da800317 	ldw	r10,12(sp)
    ede8:	1007883a 	mov	r3,r2
    edec:	01000a04 	movi	r4,40
    edf0:	1cbffe04 	addi	r18,r3,-8
    edf4:	20c9c83a 	sub	r4,r4,r3
    edf8:	8ca2983a 	sll	r17,r17,r18
    edfc:	3108d83a 	srl	r4,r6,r4
    ee00:	34a4983a 	sll	r18,r6,r18
    ee04:	2462b03a 	or	r17,r4,r17
    ee08:	00bf0344 	movi	r2,-1011
    ee0c:	10c7c83a 	sub	r3,r2,r3
    ee10:	000f883a 	mov	r7,zero
    ee14:	003f8c06 	br	ec48 <__alt_data_end+0xfffb9518>
    ee18:	008000c4 	movi	r2,3
    ee1c:	e0816d26 	beq	fp,r2,f3d4 <__muldf3+0x854>
    ee20:	00800044 	movi	r2,1
    ee24:	e081321e 	bne	fp,r2,f2f0 <__muldf3+0x770>
    ee28:	48a6703a 	and	r19,r9,r2
    ee2c:	0009883a 	mov	r4,zero
    ee30:	0021883a 	mov	r16,zero
    ee34:	002f883a 	mov	r23,zero
    ee38:	003fab06 	br	ece8 <__alt_data_end+0xfffb95b8>
    ee3c:	0023883a 	mov	r17,zero
    ee40:	0025883a 	mov	r18,zero
    ee44:	01c00044 	movi	r7,1
    ee48:	003f7f06 	br	ec48 <__alt_data_end+0xfffb9518>
    ee4c:	01c000c4 	movi	r7,3
    ee50:	003f7d06 	br	ec48 <__alt_data_end+0xfffb9518>
    ee54:	01400104 	movi	r5,4
    ee58:	0021883a 	mov	r16,zero
    ee5c:	002f883a 	mov	r23,zero
    ee60:	07000044 	movi	fp,1
    ee64:	003f6606 	br	ec00 <__alt_data_end+0xfffb94d0>
    ee68:	01400304 	movi	r5,12
    ee6c:	070000c4 	movi	fp,3
    ee70:	003f6306 	br	ec00 <__alt_data_end+0xfffb94d0>
    ee74:	04000434 	movhi	r16,16
    ee78:	0027883a 	mov	r19,zero
    ee7c:	843fffc4 	addi	r16,r16,-1
    ee80:	05ffffc4 	movi	r23,-1
    ee84:	0101ffc4 	movi	r4,2047
    ee88:	003f9706 	br	ece8 <__alt_data_end+0xfffb95b8>
    ee8c:	8821883a 	mov	r16,r17
    ee90:	902f883a 	mov	r23,r18
    ee94:	5013883a 	mov	r9,r10
    ee98:	3839883a 	mov	fp,r7
    ee9c:	003f8c06 	br	ecd0 <__alt_data_end+0xfffb95a0>
    eea0:	8821883a 	mov	r16,r17
    eea4:	902f883a 	mov	r23,r18
    eea8:	3013883a 	mov	r9,r6
    eeac:	3839883a 	mov	fp,r7
    eeb0:	003f8706 	br	ecd0 <__alt_data_end+0xfffb95a0>
    eeb4:	b82ad43a 	srli	r21,r23,16
    eeb8:	9038d43a 	srli	fp,r18,16
    eebc:	bdffffcc 	andi	r23,r23,65535
    eec0:	94bfffcc 	andi	r18,r18,65535
    eec4:	9009883a 	mov	r4,r18
    eec8:	b80b883a 	mov	r5,r23
    eecc:	d8c00515 	stw	r3,20(sp)
    eed0:	d9800715 	stw	r6,28(sp)
    eed4:	da000615 	stw	r8,24(sp)
    eed8:	000d6f80 	call	d6f8 <__mulsi3>
    eedc:	9009883a 	mov	r4,r18
    eee0:	a80b883a 	mov	r5,r21
    eee4:	1029883a 	mov	r20,r2
    eee8:	000d6f80 	call	d6f8 <__mulsi3>
    eeec:	e009883a 	mov	r4,fp
    eef0:	a80b883a 	mov	r5,r21
    eef4:	102d883a 	mov	r22,r2
    eef8:	000d6f80 	call	d6f8 <__mulsi3>
    eefc:	e009883a 	mov	r4,fp
    ef00:	b80b883a 	mov	r5,r23
    ef04:	1027883a 	mov	r19,r2
    ef08:	000d6f80 	call	d6f8 <__mulsi3>
    ef0c:	a008d43a 	srli	r4,r20,16
    ef10:	b085883a 	add	r2,r22,r2
    ef14:	d8c00517 	ldw	r3,20(sp)
    ef18:	110f883a 	add	r7,r2,r4
    ef1c:	d9800717 	ldw	r6,28(sp)
    ef20:	da000617 	ldw	r8,24(sp)
    ef24:	3d80022e 	bgeu	r7,r22,ef30 <__muldf3+0x3b0>
    ef28:	00800074 	movhi	r2,1
    ef2c:	98a7883a 	add	r19,r19,r2
    ef30:	3804943a 	slli	r2,r7,16
    ef34:	380ed43a 	srli	r7,r7,16
    ef38:	882cd43a 	srli	r22,r17,16
    ef3c:	a53fffcc 	andi	r20,r20,65535
    ef40:	8c7fffcc 	andi	r17,r17,65535
    ef44:	1529883a 	add	r20,r2,r20
    ef48:	8809883a 	mov	r4,r17
    ef4c:	b80b883a 	mov	r5,r23
    ef50:	d8c00515 	stw	r3,20(sp)
    ef54:	d9800715 	stw	r6,28(sp)
    ef58:	da000615 	stw	r8,24(sp)
    ef5c:	d9c00015 	stw	r7,0(sp)
    ef60:	dd000115 	stw	r20,4(sp)
    ef64:	000d6f80 	call	d6f8 <__mulsi3>
    ef68:	a80b883a 	mov	r5,r21
    ef6c:	8809883a 	mov	r4,r17
    ef70:	d8800415 	stw	r2,16(sp)
    ef74:	000d6f80 	call	d6f8 <__mulsi3>
    ef78:	a80b883a 	mov	r5,r21
    ef7c:	b009883a 	mov	r4,r22
    ef80:	1029883a 	mov	r20,r2
    ef84:	000d6f80 	call	d6f8 <__mulsi3>
    ef88:	b009883a 	mov	r4,r22
    ef8c:	b80b883a 	mov	r5,r23
    ef90:	102b883a 	mov	r21,r2
    ef94:	000d6f80 	call	d6f8 <__mulsi3>
    ef98:	da400417 	ldw	r9,16(sp)
    ef9c:	a085883a 	add	r2,r20,r2
    efa0:	d8c00517 	ldw	r3,20(sp)
    efa4:	4808d43a 	srli	r4,r9,16
    efa8:	d9800717 	ldw	r6,28(sp)
    efac:	da000617 	ldw	r8,24(sp)
    efb0:	1109883a 	add	r4,r2,r4
    efb4:	2500022e 	bgeu	r4,r20,efc0 <__muldf3+0x440>
    efb8:	00800074 	movhi	r2,1
    efbc:	a8ab883a 	add	r21,r21,r2
    efc0:	200e943a 	slli	r7,r4,16
    efc4:	2004d43a 	srli	r2,r4,16
    efc8:	802ed43a 	srli	r23,r16,16
    efcc:	843fffcc 	andi	r16,r16,65535
    efd0:	4d3fffcc 	andi	r20,r9,65535
    efd4:	9009883a 	mov	r4,r18
    efd8:	800b883a 	mov	r5,r16
    efdc:	3d29883a 	add	r20,r7,r20
    efe0:	d8c00515 	stw	r3,20(sp)
    efe4:	d9800715 	stw	r6,28(sp)
    efe8:	da000615 	stw	r8,24(sp)
    efec:	a8ab883a 	add	r21,r21,r2
    eff0:	000d6f80 	call	d6f8 <__mulsi3>
    eff4:	9009883a 	mov	r4,r18
    eff8:	b80b883a 	mov	r5,r23
    effc:	d8800315 	stw	r2,12(sp)
    f000:	000d6f80 	call	d6f8 <__mulsi3>
    f004:	e009883a 	mov	r4,fp
    f008:	b80b883a 	mov	r5,r23
    f00c:	1025883a 	mov	r18,r2
    f010:	000d6f80 	call	d6f8 <__mulsi3>
    f014:	e009883a 	mov	r4,fp
    f018:	800b883a 	mov	r5,r16
    f01c:	d8800215 	stw	r2,8(sp)
    f020:	000d6f80 	call	d6f8 <__mulsi3>
    f024:	da800317 	ldw	r10,12(sp)
    f028:	d9400017 	ldw	r5,0(sp)
    f02c:	9085883a 	add	r2,r18,r2
    f030:	5008d43a 	srli	r4,r10,16
    f034:	a153883a 	add	r9,r20,r5
    f038:	d8c00517 	ldw	r3,20(sp)
    f03c:	1109883a 	add	r4,r2,r4
    f040:	d9800717 	ldw	r6,28(sp)
    f044:	da000617 	ldw	r8,24(sp)
    f048:	dac00217 	ldw	r11,8(sp)
    f04c:	2480022e 	bgeu	r4,r18,f058 <__muldf3+0x4d8>
    f050:	00800074 	movhi	r2,1
    f054:	5897883a 	add	r11,r11,r2
    f058:	200e943a 	slli	r7,r4,16
    f05c:	2038d43a 	srli	fp,r4,16
    f060:	52bfffcc 	andi	r10,r10,65535
    f064:	3a8f883a 	add	r7,r7,r10
    f068:	8809883a 	mov	r4,r17
    f06c:	800b883a 	mov	r5,r16
    f070:	d8c00515 	stw	r3,20(sp)
    f074:	d9800715 	stw	r6,28(sp)
    f078:	d9c00215 	stw	r7,8(sp)
    f07c:	da000615 	stw	r8,24(sp)
    f080:	da400415 	stw	r9,16(sp)
    f084:	5f39883a 	add	fp,r11,fp
    f088:	000d6f80 	call	d6f8 <__mulsi3>
    f08c:	8809883a 	mov	r4,r17
    f090:	b80b883a 	mov	r5,r23
    f094:	1025883a 	mov	r18,r2
    f098:	000d6f80 	call	d6f8 <__mulsi3>
    f09c:	b009883a 	mov	r4,r22
    f0a0:	b80b883a 	mov	r5,r23
    f0a4:	d8800315 	stw	r2,12(sp)
    f0a8:	000d6f80 	call	d6f8 <__mulsi3>
    f0ac:	b009883a 	mov	r4,r22
    f0b0:	800b883a 	mov	r5,r16
    f0b4:	1023883a 	mov	r17,r2
    f0b8:	000d6f80 	call	d6f8 <__mulsi3>
    f0bc:	da800317 	ldw	r10,12(sp)
    f0c0:	9008d43a 	srli	r4,r18,16
    f0c4:	d8c00517 	ldw	r3,20(sp)
    f0c8:	5085883a 	add	r2,r10,r2
    f0cc:	1109883a 	add	r4,r2,r4
    f0d0:	d9800717 	ldw	r6,28(sp)
    f0d4:	d9c00217 	ldw	r7,8(sp)
    f0d8:	da000617 	ldw	r8,24(sp)
    f0dc:	da400417 	ldw	r9,16(sp)
    f0e0:	2280022e 	bgeu	r4,r10,f0ec <__muldf3+0x56c>
    f0e4:	00800074 	movhi	r2,1
    f0e8:	88a3883a 	add	r17,r17,r2
    f0ec:	2004943a 	slli	r2,r4,16
    f0f0:	94bfffcc 	andi	r18,r18,65535
    f0f4:	4ce7883a 	add	r19,r9,r19
    f0f8:	14a5883a 	add	r18,r2,r18
    f0fc:	9d29803a 	cmpltu	r20,r19,r20
    f100:	9565883a 	add	r18,r18,r21
    f104:	9505883a 	add	r2,r18,r20
    f108:	99e7883a 	add	r19,r19,r7
    f10c:	99cf803a 	cmpltu	r7,r19,r7
    f110:	e08b883a 	add	r5,fp,r2
    f114:	2008d43a 	srli	r4,r4,16
    f118:	29ef883a 	add	r23,r5,r7
    f11c:	1529803a 	cmpltu	r20,r2,r20
    f120:	956b803a 	cmpltu	r21,r18,r21
    f124:	b9cf803a 	cmpltu	r7,r23,r7
    f128:	a564b03a 	or	r18,r20,r21
    f12c:	2f39803a 	cmpltu	fp,r5,fp
    f130:	9125883a 	add	r18,r18,r4
    f134:	3f38b03a 	or	fp,r7,fp
    f138:	9725883a 	add	r18,r18,fp
    f13c:	9804927a 	slli	r2,r19,9
    f140:	9463883a 	add	r17,r18,r17
    f144:	d9000117 	ldw	r4,4(sp)
    f148:	b820d5fa 	srli	r16,r23,23
    f14c:	8822927a 	slli	r17,r17,9
    f150:	9826d5fa 	srli	r19,r19,23
    f154:	1104b03a 	or	r2,r2,r4
    f158:	b82e927a 	slli	r23,r23,9
    f15c:	1004c03a 	cmpne	r2,r2,zero
    f160:	8c20b03a 	or	r16,r17,r16
    f164:	14e6b03a 	or	r19,r2,r19
    f168:	8080402c 	andhi	r2,r16,256
    f16c:	9deeb03a 	or	r23,r19,r23
    f170:	10000726 	beq	r2,zero,f190 <__muldf3+0x610>
    f174:	b804d07a 	srli	r2,r23,1
    f178:	800697fa 	slli	r3,r16,31
    f17c:	bdc0004c 	andi	r23,r23,1
    f180:	8020d07a 	srli	r16,r16,1
    f184:	b8aeb03a 	or	r23,r23,r2
    f188:	b8eeb03a 	or	r23,r23,r3
    f18c:	4007883a 	mov	r3,r8
    f190:	1900ffc4 	addi	r4,r3,1023
    f194:	01004d0e 	bge	zero,r4,f2cc <__muldf3+0x74c>
    f198:	b88001cc 	andi	r2,r23,7
    f19c:	10000726 	beq	r2,zero,f1bc <__muldf3+0x63c>
    f1a0:	b94003cc 	andi	r5,r23,15
    f1a4:	00800104 	movi	r2,4
    f1a8:	28800426 	beq	r5,r2,f1bc <__muldf3+0x63c>
    f1ac:	b885883a 	add	r2,r23,r2
    f1b0:	15ef803a 	cmpltu	r23,r2,r23
    f1b4:	85e1883a 	add	r16,r16,r23
    f1b8:	102f883a 	mov	r23,r2
    f1bc:	8080402c 	andhi	r2,r16,256
    f1c0:	10000426 	beq	r2,zero,f1d4 <__muldf3+0x654>
    f1c4:	00bfc034 	movhi	r2,65280
    f1c8:	10bfffc4 	addi	r2,r2,-1
    f1cc:	19010004 	addi	r4,r3,1024
    f1d0:	80a0703a 	and	r16,r16,r2
    f1d4:	0081ff84 	movi	r2,2046
    f1d8:	1100340e 	bge	r2,r4,f2ac <__muldf3+0x72c>
    f1dc:	34c0004c 	andi	r19,r6,1
    f1e0:	0101ffc4 	movi	r4,2047
    f1e4:	0021883a 	mov	r16,zero
    f1e8:	002f883a 	mov	r23,zero
    f1ec:	003ebe06 	br	ece8 <__alt_data_end+0xfffb95b8>
    f1f0:	8080022c 	andhi	r2,r16,8
    f1f4:	10000926 	beq	r2,zero,f21c <__muldf3+0x69c>
    f1f8:	8880022c 	andhi	r2,r17,8
    f1fc:	1000071e 	bne	r2,zero,f21c <__muldf3+0x69c>
    f200:	00800434 	movhi	r2,16
    f204:	8c000234 	orhi	r16,r17,8
    f208:	10bfffc4 	addi	r2,r2,-1
    f20c:	b027883a 	mov	r19,r22
    f210:	80a0703a 	and	r16,r16,r2
    f214:	902f883a 	mov	r23,r18
    f218:	003f1a06 	br	ee84 <__alt_data_end+0xfffb9754>
    f21c:	00800434 	movhi	r2,16
    f220:	84000234 	orhi	r16,r16,8
    f224:	10bfffc4 	addi	r2,r2,-1
    f228:	80a0703a 	and	r16,r16,r2
    f22c:	003f1506 	br	ee84 <__alt_data_end+0xfffb9754>
    f230:	3009883a 	mov	r4,r6
    f234:	d9400215 	stw	r5,8(sp)
    f238:	d9800715 	stw	r6,28(sp)
    f23c:	da400415 	stw	r9,16(sp)
    f240:	da800315 	stw	r10,12(sp)
    f244:	000feb80 	call	feb8 <__clzsi2>
    f248:	10c00804 	addi	r3,r2,32
    f24c:	010009c4 	movi	r4,39
    f250:	d9400217 	ldw	r5,8(sp)
    f254:	d9800717 	ldw	r6,28(sp)
    f258:	da400417 	ldw	r9,16(sp)
    f25c:	da800317 	ldw	r10,12(sp)
    f260:	20fee20e 	bge	r4,r3,edec <__alt_data_end+0xfffb96bc>
    f264:	147ffe04 	addi	r17,r2,-8
    f268:	9462983a 	sll	r17,r18,r17
    f26c:	0025883a 	mov	r18,zero
    f270:	003ee506 	br	ee08 <__alt_data_end+0xfffb96d8>
    f274:	d9800715 	stw	r6,28(sp)
    f278:	d9c00215 	stw	r7,8(sp)
    f27c:	da400415 	stw	r9,16(sp)
    f280:	000feb80 	call	feb8 <__clzsi2>
    f284:	10c00804 	addi	r3,r2,32
    f288:	010009c4 	movi	r4,39
    f28c:	d9800717 	ldw	r6,28(sp)
    f290:	d9c00217 	ldw	r7,8(sp)
    f294:	da400417 	ldw	r9,16(sp)
    f298:	20feb40e 	bge	r4,r3,ed6c <__alt_data_end+0xfffb963c>
    f29c:	143ffe04 	addi	r16,r2,-8
    f2a0:	9420983a 	sll	r16,r18,r16
    f2a4:	002f883a 	mov	r23,zero
    f2a8:	003eb706 	br	ed88 <__alt_data_end+0xfffb9658>
    f2ac:	8004977a 	slli	r2,r16,29
    f2b0:	b82ed0fa 	srli	r23,r23,3
    f2b4:	8020927a 	slli	r16,r16,9
    f2b8:	2101ffcc 	andi	r4,r4,2047
    f2bc:	15eeb03a 	or	r23,r2,r23
    f2c0:	8020d33a 	srli	r16,r16,12
    f2c4:	34c0004c 	andi	r19,r6,1
    f2c8:	003e8706 	br	ece8 <__alt_data_end+0xfffb95b8>
    f2cc:	00bf0084 	movi	r2,-1022
    f2d0:	10c5c83a 	sub	r2,r2,r3
    f2d4:	01000e04 	movi	r4,56
    f2d8:	2080080e 	bge	r4,r2,f2fc <__muldf3+0x77c>
    f2dc:	34c0004c 	andi	r19,r6,1
    f2e0:	0009883a 	mov	r4,zero
    f2e4:	0021883a 	mov	r16,zero
    f2e8:	002f883a 	mov	r23,zero
    f2ec:	003e7e06 	br	ece8 <__alt_data_end+0xfffb95b8>
    f2f0:	4007883a 	mov	r3,r8
    f2f4:	480d883a 	mov	r6,r9
    f2f8:	003fa506 	br	f190 <__alt_data_end+0xfffb9a60>
    f2fc:	010007c4 	movi	r4,31
    f300:	20801816 	blt	r4,r2,f364 <__muldf3+0x7e4>
    f304:	18c10784 	addi	r3,r3,1054
    f308:	80c8983a 	sll	r4,r16,r3
    f30c:	b88ad83a 	srl	r5,r23,r2
    f310:	b8c6983a 	sll	r3,r23,r3
    f314:	80a0d83a 	srl	r16,r16,r2
    f318:	2908b03a 	or	r4,r5,r4
    f31c:	1804c03a 	cmpne	r2,r3,zero
    f320:	2088b03a 	or	r4,r4,r2
    f324:	208001cc 	andi	r2,r4,7
    f328:	10000726 	beq	r2,zero,f348 <__muldf3+0x7c8>
    f32c:	20c003cc 	andi	r3,r4,15
    f330:	00800104 	movi	r2,4
    f334:	18800426 	beq	r3,r2,f348 <__muldf3+0x7c8>
    f338:	20c00104 	addi	r3,r4,4
    f33c:	1905803a 	cmpltu	r2,r3,r4
    f340:	80a1883a 	add	r16,r16,r2
    f344:	1809883a 	mov	r4,r3
    f348:	8080202c 	andhi	r2,r16,128
    f34c:	10001b26 	beq	r2,zero,f3bc <__muldf3+0x83c>
    f350:	34c0004c 	andi	r19,r6,1
    f354:	01000044 	movi	r4,1
    f358:	0021883a 	mov	r16,zero
    f35c:	002f883a 	mov	r23,zero
    f360:	003e6106 	br	ece8 <__alt_data_end+0xfffb95b8>
    f364:	013ef884 	movi	r4,-1054
    f368:	20c9c83a 	sub	r4,r4,r3
    f36c:	01400804 	movi	r5,32
    f370:	8108d83a 	srl	r4,r16,r4
    f374:	11401526 	beq	r2,r5,f3cc <__muldf3+0x84c>
    f378:	18c10f84 	addi	r3,r3,1086
    f37c:	80e0983a 	sll	r16,r16,r3
    f380:	85eeb03a 	or	r23,r16,r23
    f384:	b804c03a 	cmpne	r2,r23,zero
    f388:	1108b03a 	or	r4,r2,r4
    f38c:	20c001cc 	andi	r3,r4,7
    f390:	1800061e 	bne	r3,zero,f3ac <__muldf3+0x82c>
    f394:	0021883a 	mov	r16,zero
    f398:	202ed0fa 	srli	r23,r4,3
    f39c:	34c0004c 	andi	r19,r6,1
    f3a0:	0009883a 	mov	r4,zero
    f3a4:	b8eeb03a 	or	r23,r23,r3
    f3a8:	003e4f06 	br	ece8 <__alt_data_end+0xfffb95b8>
    f3ac:	20c003cc 	andi	r3,r4,15
    f3b0:	00800104 	movi	r2,4
    f3b4:	0021883a 	mov	r16,zero
    f3b8:	18bfdf1e 	bne	r3,r2,f338 <__alt_data_end+0xfffb9c08>
    f3bc:	8004927a 	slli	r2,r16,9
    f3c0:	8006977a 	slli	r3,r16,29
    f3c4:	1020d33a 	srli	r16,r2,12
    f3c8:	003ff306 	br	f398 <__alt_data_end+0xfffb9c68>
    f3cc:	0021883a 	mov	r16,zero
    f3d0:	003feb06 	br	f380 <__alt_data_end+0xfffb9c50>
    f3d4:	00800434 	movhi	r2,16
    f3d8:	84000234 	orhi	r16,r16,8
    f3dc:	10bfffc4 	addi	r2,r2,-1
    f3e0:	4cc0004c 	andi	r19,r9,1
    f3e4:	80a0703a 	and	r16,r16,r2
    f3e8:	003ea606 	br	ee84 <__alt_data_end+0xfffb9754>

0000f3ec <__subdf3>:
    f3ec:	00c00434 	movhi	r3,16
    f3f0:	18ffffc4 	addi	r3,r3,-1
    f3f4:	defffb04 	addi	sp,sp,-20
    f3f8:	28d2703a 	and	r9,r5,r3
    f3fc:	3814d53a 	srli	r10,r7,20
    f400:	38c6703a 	and	r3,r7,r3
    f404:	3004d77a 	srli	r2,r6,29
    f408:	dc800215 	stw	r18,8(sp)
    f40c:	dc000015 	stw	r16,0(sp)
    f410:	2824d7fa 	srli	r18,r5,31
    f414:	2820d53a 	srli	r16,r5,20
    f418:	481290fa 	slli	r9,r9,3
    f41c:	200ad77a 	srli	r5,r4,29
    f420:	180690fa 	slli	r3,r3,3
    f424:	dc400115 	stw	r17,4(sp)
    f428:	dfc00415 	stw	ra,16(sp)
    f42c:	202290fa 	slli	r17,r4,3
    f430:	dcc00315 	stw	r19,12(sp)
    f434:	5281ffcc 	andi	r10,r10,2047
    f438:	0101ffc4 	movi	r4,2047
    f43c:	9011883a 	mov	r8,r18
    f440:	8401ffcc 	andi	r16,r16,2047
    f444:	94803fcc 	andi	r18,r18,255
    f448:	494ab03a 	or	r5,r9,r5
    f44c:	380ed7fa 	srli	r7,r7,31
    f450:	1886b03a 	or	r3,r3,r2
    f454:	300c90fa 	slli	r6,r6,3
    f458:	51009026 	beq	r10,r4,f69c <__subdf3+0x2b0>
    f45c:	39c0005c 	xori	r7,r7,1
    f460:	8285c83a 	sub	r2,r16,r10
    f464:	91c06f26 	beq	r18,r7,f624 <__subdf3+0x238>
    f468:	0080b10e 	bge	zero,r2,f730 <__subdf3+0x344>
    f46c:	50002a1e 	bne	r10,zero,f518 <__subdf3+0x12c>
    f470:	1988b03a 	or	r4,r3,r6
    f474:	2000941e 	bne	r4,zero,f6c8 <__subdf3+0x2dc>
    f478:	888001cc 	andi	r2,r17,7
    f47c:	10005b26 	beq	r2,zero,f5ec <__subdf3+0x200>
    f480:	88c003cc 	andi	r3,r17,15
    f484:	00800104 	movi	r2,4
    f488:	18805826 	beq	r3,r2,f5ec <__subdf3+0x200>
    f48c:	88c00104 	addi	r3,r17,4
    f490:	1c63803a 	cmpltu	r17,r3,r17
    f494:	2c4b883a 	add	r5,r5,r17
    f498:	2880202c 	andhi	r2,r5,128
    f49c:	9200004c 	andi	r8,r18,1
    f4a0:	1823883a 	mov	r17,r3
    f4a4:	10005426 	beq	r2,zero,f5f8 <__subdf3+0x20c>
    f4a8:	84000044 	addi	r16,r16,1
    f4ac:	0081ffc4 	movi	r2,2047
    f4b0:	8080bf26 	beq	r16,r2,f7b0 <__subdf3+0x3c4>
    f4b4:	013fe034 	movhi	r4,65408
    f4b8:	213fffc4 	addi	r4,r4,-1
    f4bc:	290a703a 	and	r5,r5,r4
    f4c0:	2804977a 	slli	r2,r5,29
    f4c4:	280a927a 	slli	r5,r5,9
    f4c8:	8822d0fa 	srli	r17,r17,3
    f4cc:	8401ffcc 	andi	r16,r16,2047
    f4d0:	2808d33a 	srli	r4,r5,12
    f4d4:	1444b03a 	or	r2,r2,r17
    f4d8:	8401ffcc 	andi	r16,r16,2047
    f4dc:	800a953a 	slli	r5,r16,20
    f4e0:	40c03fcc 	andi	r3,r8,255
    f4e4:	04000434 	movhi	r16,16
    f4e8:	180697fa 	slli	r3,r3,31
    f4ec:	843fffc4 	addi	r16,r16,-1
    f4f0:	2420703a 	and	r16,r4,r16
    f4f4:	8160b03a 	or	r16,r16,r5
    f4f8:	80c6b03a 	or	r3,r16,r3
    f4fc:	dfc00417 	ldw	ra,16(sp)
    f500:	dcc00317 	ldw	r19,12(sp)
    f504:	dc800217 	ldw	r18,8(sp)
    f508:	dc400117 	ldw	r17,4(sp)
    f50c:	dc000017 	ldw	r16,0(sp)
    f510:	dec00504 	addi	sp,sp,20
    f514:	f800283a 	ret
    f518:	0101ffc4 	movi	r4,2047
    f51c:	813fd626 	beq	r16,r4,f478 <__alt_data_end+0xfffb9d48>
    f520:	18c02034 	orhi	r3,r3,128
    f524:	01000e04 	movi	r4,56
    f528:	2080a416 	blt	r4,r2,f7bc <__subdf3+0x3d0>
    f52c:	010007c4 	movi	r4,31
    f530:	2080c716 	blt	r4,r2,f850 <__subdf3+0x464>
    f534:	01000804 	movi	r4,32
    f538:	2089c83a 	sub	r4,r4,r2
    f53c:	1910983a 	sll	r8,r3,r4
    f540:	308ed83a 	srl	r7,r6,r2
    f544:	3108983a 	sll	r4,r6,r4
    f548:	1884d83a 	srl	r2,r3,r2
    f54c:	41ccb03a 	or	r6,r8,r7
    f550:	2008c03a 	cmpne	r4,r4,zero
    f554:	310cb03a 	or	r6,r6,r4
    f558:	898dc83a 	sub	r6,r17,r6
    f55c:	89a3803a 	cmpltu	r17,r17,r6
    f560:	288bc83a 	sub	r5,r5,r2
    f564:	2c4bc83a 	sub	r5,r5,r17
    f568:	3023883a 	mov	r17,r6
    f56c:	2880202c 	andhi	r2,r5,128
    f570:	10006b26 	beq	r2,zero,f720 <__subdf3+0x334>
    f574:	04c02034 	movhi	r19,128
    f578:	9cffffc4 	addi	r19,r19,-1
    f57c:	2ce6703a 	and	r19,r5,r19
    f580:	98007c26 	beq	r19,zero,f774 <__subdf3+0x388>
    f584:	9809883a 	mov	r4,r19
    f588:	000feb80 	call	feb8 <__clzsi2>
    f58c:	10fffe04 	addi	r3,r2,-8
    f590:	010007c4 	movi	r4,31
    f594:	20c07d16 	blt	r4,r3,f78c <__subdf3+0x3a0>
    f598:	01400a04 	movi	r5,40
    f59c:	2885c83a 	sub	r2,r5,r2
    f5a0:	888ad83a 	srl	r5,r17,r2
    f5a4:	98e6983a 	sll	r19,r19,r3
    f5a8:	88e2983a 	sll	r17,r17,r3
    f5ac:	2ce6b03a 	or	r19,r5,r19
    f5b0:	1c007a16 	blt	r3,r16,f79c <__subdf3+0x3b0>
    f5b4:	1c21c83a 	sub	r16,r3,r16
    f5b8:	81400044 	addi	r5,r16,1
    f5bc:	00c007c4 	movi	r3,31
    f5c0:	19409616 	blt	r3,r5,f81c <__subdf3+0x430>
    f5c4:	1c21c83a 	sub	r16,r3,r16
    f5c8:	8c08983a 	sll	r4,r17,r16
    f5cc:	8946d83a 	srl	r3,r17,r5
    f5d0:	9c20983a 	sll	r16,r19,r16
    f5d4:	2008c03a 	cmpne	r4,r4,zero
    f5d8:	994ad83a 	srl	r5,r19,r5
    f5dc:	1c06b03a 	or	r3,r3,r16
    f5e0:	1922b03a 	or	r17,r3,r4
    f5e4:	0021883a 	mov	r16,zero
    f5e8:	003fa306 	br	f478 <__alt_data_end+0xfffb9d48>
    f5ec:	2880202c 	andhi	r2,r5,128
    f5f0:	9200004c 	andi	r8,r18,1
    f5f4:	103fac1e 	bne	r2,zero,f4a8 <__alt_data_end+0xfffb9d78>
    f5f8:	2804977a 	slli	r2,r5,29
    f5fc:	8822d0fa 	srli	r17,r17,3
    f600:	00c1ffc4 	movi	r3,2047
    f604:	280ad0fa 	srli	r5,r5,3
    f608:	1444b03a 	or	r2,r2,r17
    f60c:	80c02726 	beq	r16,r3,f6ac <__subdf3+0x2c0>
    f610:	01000434 	movhi	r4,16
    f614:	213fffc4 	addi	r4,r4,-1
    f618:	80e0703a 	and	r16,r16,r3
    f61c:	2908703a 	and	r4,r5,r4
    f620:	003fad06 	br	f4d8 <__alt_data_end+0xfffb9da8>
    f624:	0080690e 	bge	zero,r2,f7cc <__subdf3+0x3e0>
    f628:	50002f26 	beq	r10,zero,f6e8 <__subdf3+0x2fc>
    f62c:	0101ffc4 	movi	r4,2047
    f630:	813f9126 	beq	r16,r4,f478 <__alt_data_end+0xfffb9d48>
    f634:	18c02034 	orhi	r3,r3,128
    f638:	01000e04 	movi	r4,56
    f63c:	2080b00e 	bge	r4,r2,f900 <__subdf3+0x514>
    f640:	198cb03a 	or	r6,r3,r6
    f644:	300ec03a 	cmpne	r7,r6,zero
    f648:	0005883a 	mov	r2,zero
    f64c:	3c4f883a 	add	r7,r7,r17
    f650:	3c63803a 	cmpltu	r17,r7,r17
    f654:	114b883a 	add	r5,r2,r5
    f658:	2c4b883a 	add	r5,r5,r17
    f65c:	3823883a 	mov	r17,r7
    f660:	2880202c 	andhi	r2,r5,128
    f664:	10002e26 	beq	r2,zero,f720 <__subdf3+0x334>
    f668:	84000044 	addi	r16,r16,1
    f66c:	0081ffc4 	movi	r2,2047
    f670:	8080de26 	beq	r16,r2,f9ec <__subdf3+0x600>
    f674:	00bfe034 	movhi	r2,65408
    f678:	10bfffc4 	addi	r2,r2,-1
    f67c:	288a703a 	and	r5,r5,r2
    f680:	880cd07a 	srli	r6,r17,1
    f684:	280897fa 	slli	r4,r5,31
    f688:	88c0004c 	andi	r3,r17,1
    f68c:	30e2b03a 	or	r17,r6,r3
    f690:	280ad07a 	srli	r5,r5,1
    f694:	8922b03a 	or	r17,r17,r4
    f698:	003f7706 	br	f478 <__alt_data_end+0xfffb9d48>
    f69c:	1984b03a 	or	r2,r3,r6
    f6a0:	103f6e26 	beq	r2,zero,f45c <__alt_data_end+0xfffb9d2c>
    f6a4:	39c03fcc 	andi	r7,r7,255
    f6a8:	003f6d06 	br	f460 <__alt_data_end+0xfffb9d30>
    f6ac:	1146b03a 	or	r3,r2,r5
    f6b0:	18003f26 	beq	r3,zero,f7b0 <__subdf3+0x3c4>
    f6b4:	00c00434 	movhi	r3,16
    f6b8:	29000234 	orhi	r4,r5,8
    f6bc:	18ffffc4 	addi	r3,r3,-1
    f6c0:	20c8703a 	and	r4,r4,r3
    f6c4:	003f8406 	br	f4d8 <__alt_data_end+0xfffb9da8>
    f6c8:	10bfffc4 	addi	r2,r2,-1
    f6cc:	1000501e 	bne	r2,zero,f810 <__subdf3+0x424>
    f6d0:	898fc83a 	sub	r7,r17,r6
    f6d4:	89e3803a 	cmpltu	r17,r17,r7
    f6d8:	28cbc83a 	sub	r5,r5,r3
    f6dc:	2c4bc83a 	sub	r5,r5,r17
    f6e0:	3823883a 	mov	r17,r7
    f6e4:	003fa106 	br	f56c <__alt_data_end+0xfffb9e3c>
    f6e8:	1988b03a 	or	r4,r3,r6
    f6ec:	203f6226 	beq	r4,zero,f478 <__alt_data_end+0xfffb9d48>
    f6f0:	10bfffc4 	addi	r2,r2,-1
    f6f4:	10009b1e 	bne	r2,zero,f964 <__subdf3+0x578>
    f6f8:	344d883a 	add	r6,r6,r17
    f6fc:	3463803a 	cmpltu	r17,r6,r17
    f700:	194b883a 	add	r5,r3,r5
    f704:	2c4b883a 	add	r5,r5,r17
    f708:	3023883a 	mov	r17,r6
    f70c:	003fd406 	br	f660 <__alt_data_end+0xfffb9f30>
    f710:	1106b03a 	or	r3,r2,r4
    f714:	1800b426 	beq	r3,zero,f9e8 <__subdf3+0x5fc>
    f718:	100b883a 	mov	r5,r2
    f71c:	2023883a 	mov	r17,r4
    f720:	888001cc 	andi	r2,r17,7
    f724:	103f561e 	bne	r2,zero,f480 <__alt_data_end+0xfffb9d50>
    f728:	9200004c 	andi	r8,r18,1
    f72c:	003fb206 	br	f5f8 <__alt_data_end+0xfffb9ec8>
    f730:	1000531e 	bne	r2,zero,f880 <__subdf3+0x494>
    f734:	80800044 	addi	r2,r16,1
    f738:	1081ffcc 	andi	r2,r2,2047
    f73c:	01000044 	movi	r4,1
    f740:	2080a00e 	bge	r4,r2,f9c4 <__subdf3+0x5d8>
    f744:	8985c83a 	sub	r2,r17,r6
    f748:	8889803a 	cmpltu	r4,r17,r2
    f74c:	28e7c83a 	sub	r19,r5,r3
    f750:	9927c83a 	sub	r19,r19,r4
    f754:	9900202c 	andhi	r4,r19,128
    f758:	20006226 	beq	r4,zero,f8e4 <__subdf3+0x4f8>
    f75c:	3463c83a 	sub	r17,r6,r17
    f760:	194bc83a 	sub	r5,r3,r5
    f764:	344d803a 	cmpltu	r6,r6,r17
    f768:	29a7c83a 	sub	r19,r5,r6
    f76c:	3825883a 	mov	r18,r7
    f770:	983f841e 	bne	r19,zero,f584 <__alt_data_end+0xfffb9e54>
    f774:	8809883a 	mov	r4,r17
    f778:	000feb80 	call	feb8 <__clzsi2>
    f77c:	10800804 	addi	r2,r2,32
    f780:	10fffe04 	addi	r3,r2,-8
    f784:	010007c4 	movi	r4,31
    f788:	20ff830e 	bge	r4,r3,f598 <__alt_data_end+0xfffb9e68>
    f78c:	14fff604 	addi	r19,r2,-40
    f790:	8ce6983a 	sll	r19,r17,r19
    f794:	0023883a 	mov	r17,zero
    f798:	1c3f860e 	bge	r3,r16,f5b4 <__alt_data_end+0xfffb9e84>
    f79c:	017fe034 	movhi	r5,65408
    f7a0:	297fffc4 	addi	r5,r5,-1
    f7a4:	80e1c83a 	sub	r16,r16,r3
    f7a8:	994a703a 	and	r5,r19,r5
    f7ac:	003f3206 	br	f478 <__alt_data_end+0xfffb9d48>
    f7b0:	0009883a 	mov	r4,zero
    f7b4:	0005883a 	mov	r2,zero
    f7b8:	003f4706 	br	f4d8 <__alt_data_end+0xfffb9da8>
    f7bc:	198cb03a 	or	r6,r3,r6
    f7c0:	300cc03a 	cmpne	r6,r6,zero
    f7c4:	0005883a 	mov	r2,zero
    f7c8:	003f6306 	br	f558 <__alt_data_end+0xfffb9e28>
    f7cc:	10009d1e 	bne	r2,zero,fa44 <__subdf3+0x658>
    f7d0:	81c00044 	addi	r7,r16,1
    f7d4:	3881ffcc 	andi	r2,r7,2047
    f7d8:	02400044 	movi	r9,1
    f7dc:	4880680e 	bge	r9,r2,f980 <__subdf3+0x594>
    f7e0:	0081ffc4 	movi	r2,2047
    f7e4:	3880ae26 	beq	r7,r2,faa0 <__subdf3+0x6b4>
    f7e8:	344d883a 	add	r6,r6,r17
    f7ec:	3463803a 	cmpltu	r17,r6,r17
    f7f0:	194b883a 	add	r5,r3,r5
    f7f4:	2c4b883a 	add	r5,r5,r17
    f7f8:	282297fa 	slli	r17,r5,31
    f7fc:	300cd07a 	srli	r6,r6,1
    f800:	280ad07a 	srli	r5,r5,1
    f804:	3821883a 	mov	r16,r7
    f808:	89a2b03a 	or	r17,r17,r6
    f80c:	003f1a06 	br	f478 <__alt_data_end+0xfffb9d48>
    f810:	0101ffc4 	movi	r4,2047
    f814:	813f431e 	bne	r16,r4,f524 <__alt_data_end+0xfffb9df4>
    f818:	003f1706 	br	f478 <__alt_data_end+0xfffb9d48>
    f81c:	80bff844 	addi	r2,r16,-31
    f820:	00c00804 	movi	r3,32
    f824:	9884d83a 	srl	r2,r19,r2
    f828:	28c05126 	beq	r5,r3,f970 <__subdf3+0x584>
    f82c:	00c00fc4 	movi	r3,63
    f830:	1c21c83a 	sub	r16,r3,r16
    f834:	9c26983a 	sll	r19,r19,r16
    f838:	9c62b03a 	or	r17,r19,r17
    f83c:	8822c03a 	cmpne	r17,r17,zero
    f840:	88a2b03a 	or	r17,r17,r2
    f844:	000b883a 	mov	r5,zero
    f848:	0021883a 	mov	r16,zero
    f84c:	003fb406 	br	f720 <__alt_data_end+0xfffb9ff0>
    f850:	113ff804 	addi	r4,r2,-32
    f854:	01c00804 	movi	r7,32
    f858:	1908d83a 	srl	r4,r3,r4
    f85c:	11c04626 	beq	r2,r7,f978 <__subdf3+0x58c>
    f860:	01c01004 	movi	r7,64
    f864:	3885c83a 	sub	r2,r7,r2
    f868:	1884983a 	sll	r2,r3,r2
    f86c:	118cb03a 	or	r6,r2,r6
    f870:	300cc03a 	cmpne	r6,r6,zero
    f874:	310cb03a 	or	r6,r6,r4
    f878:	0005883a 	mov	r2,zero
    f87c:	003f3606 	br	f558 <__alt_data_end+0xfffb9e28>
    f880:	80002b26 	beq	r16,zero,f930 <__subdf3+0x544>
    f884:	0101ffc4 	movi	r4,2047
    f888:	51006926 	beq	r10,r4,fa30 <__subdf3+0x644>
    f88c:	0085c83a 	sub	r2,zero,r2
    f890:	29402034 	orhi	r5,r5,128
    f894:	01000e04 	movi	r4,56
    f898:	20807d16 	blt	r4,r2,fa90 <__subdf3+0x6a4>
    f89c:	010007c4 	movi	r4,31
    f8a0:	2080d916 	blt	r4,r2,fc08 <__subdf3+0x81c>
    f8a4:	01000804 	movi	r4,32
    f8a8:	2089c83a 	sub	r4,r4,r2
    f8ac:	2912983a 	sll	r9,r5,r4
    f8b0:	8890d83a 	srl	r8,r17,r2
    f8b4:	8908983a 	sll	r4,r17,r4
    f8b8:	2884d83a 	srl	r2,r5,r2
    f8bc:	4a22b03a 	or	r17,r9,r8
    f8c0:	2008c03a 	cmpne	r4,r4,zero
    f8c4:	8922b03a 	or	r17,r17,r4
    f8c8:	3463c83a 	sub	r17,r6,r17
    f8cc:	1885c83a 	sub	r2,r3,r2
    f8d0:	344d803a 	cmpltu	r6,r6,r17
    f8d4:	118bc83a 	sub	r5,r2,r6
    f8d8:	5021883a 	mov	r16,r10
    f8dc:	3825883a 	mov	r18,r7
    f8e0:	003f2206 	br	f56c <__alt_data_end+0xfffb9e3c>
    f8e4:	9886b03a 	or	r3,r19,r2
    f8e8:	18001c1e 	bne	r3,zero,f95c <__subdf3+0x570>
    f8ec:	0011883a 	mov	r8,zero
    f8f0:	000b883a 	mov	r5,zero
    f8f4:	0023883a 	mov	r17,zero
    f8f8:	0021883a 	mov	r16,zero
    f8fc:	003f3e06 	br	f5f8 <__alt_data_end+0xfffb9ec8>
    f900:	010007c4 	movi	r4,31
    f904:	20803c16 	blt	r4,r2,f9f8 <__subdf3+0x60c>
    f908:	01000804 	movi	r4,32
    f90c:	2089c83a 	sub	r4,r4,r2
    f910:	1912983a 	sll	r9,r3,r4
    f914:	308ed83a 	srl	r7,r6,r2
    f918:	3108983a 	sll	r4,r6,r4
    f91c:	1884d83a 	srl	r2,r3,r2
    f920:	49ceb03a 	or	r7,r9,r7
    f924:	2008c03a 	cmpne	r4,r4,zero
    f928:	390eb03a 	or	r7,r7,r4
    f92c:	003f4706 	br	f64c <__alt_data_end+0xfffb9f1c>
    f930:	2c48b03a 	or	r4,r5,r17
    f934:	20003e26 	beq	r4,zero,fa30 <__subdf3+0x644>
    f938:	0084303a 	nor	r2,zero,r2
    f93c:	10003a1e 	bne	r2,zero,fa28 <__subdf3+0x63c>
    f940:	3463c83a 	sub	r17,r6,r17
    f944:	194bc83a 	sub	r5,r3,r5
    f948:	344d803a 	cmpltu	r6,r6,r17
    f94c:	298bc83a 	sub	r5,r5,r6
    f950:	5021883a 	mov	r16,r10
    f954:	3825883a 	mov	r18,r7
    f958:	003f0406 	br	f56c <__alt_data_end+0xfffb9e3c>
    f95c:	1023883a 	mov	r17,r2
    f960:	003f0706 	br	f580 <__alt_data_end+0xfffb9e50>
    f964:	0101ffc4 	movi	r4,2047
    f968:	813f331e 	bne	r16,r4,f638 <__alt_data_end+0xfffb9f08>
    f96c:	003ec206 	br	f478 <__alt_data_end+0xfffb9d48>
    f970:	0027883a 	mov	r19,zero
    f974:	003fb006 	br	f838 <__alt_data_end+0xfffba108>
    f978:	0005883a 	mov	r2,zero
    f97c:	003fbb06 	br	f86c <__alt_data_end+0xfffba13c>
    f980:	2c44b03a 	or	r2,r5,r17
    f984:	80008b1e 	bne	r16,zero,fbb4 <__subdf3+0x7c8>
    f988:	1000b526 	beq	r2,zero,fc60 <__subdf3+0x874>
    f98c:	1984b03a 	or	r2,r3,r6
    f990:	103eb926 	beq	r2,zero,f478 <__alt_data_end+0xfffb9d48>
    f994:	3449883a 	add	r4,r6,r17
    f998:	2463803a 	cmpltu	r17,r4,r17
    f99c:	194b883a 	add	r5,r3,r5
    f9a0:	2c4b883a 	add	r5,r5,r17
    f9a4:	2880202c 	andhi	r2,r5,128
    f9a8:	2023883a 	mov	r17,r4
    f9ac:	103f5c26 	beq	r2,zero,f720 <__alt_data_end+0xfffb9ff0>
    f9b0:	00bfe034 	movhi	r2,65408
    f9b4:	10bfffc4 	addi	r2,r2,-1
    f9b8:	4821883a 	mov	r16,r9
    f9bc:	288a703a 	and	r5,r5,r2
    f9c0:	003ead06 	br	f478 <__alt_data_end+0xfffb9d48>
    f9c4:	2c44b03a 	or	r2,r5,r17
    f9c8:	8000291e 	bne	r16,zero,fa70 <__subdf3+0x684>
    f9cc:	10004f1e 	bne	r2,zero,fb0c <__subdf3+0x720>
    f9d0:	1984b03a 	or	r2,r3,r6
    f9d4:	10000426 	beq	r2,zero,f9e8 <__subdf3+0x5fc>
    f9d8:	180b883a 	mov	r5,r3
    f9dc:	3023883a 	mov	r17,r6
    f9e0:	3825883a 	mov	r18,r7
    f9e4:	003ea406 	br	f478 <__alt_data_end+0xfffb9d48>
    f9e8:	0011883a 	mov	r8,zero
    f9ec:	000b883a 	mov	r5,zero
    f9f0:	0023883a 	mov	r17,zero
    f9f4:	003f0006 	br	f5f8 <__alt_data_end+0xfffb9ec8>
    f9f8:	11fff804 	addi	r7,r2,-32
    f9fc:	19c8d83a 	srl	r4,r3,r7
    fa00:	01c00804 	movi	r7,32
    fa04:	11c07e26 	beq	r2,r7,fc00 <__subdf3+0x814>
    fa08:	01c01004 	movi	r7,64
    fa0c:	3885c83a 	sub	r2,r7,r2
    fa10:	1884983a 	sll	r2,r3,r2
    fa14:	118cb03a 	or	r6,r2,r6
    fa18:	300ec03a 	cmpne	r7,r6,zero
    fa1c:	390eb03a 	or	r7,r7,r4
    fa20:	0005883a 	mov	r2,zero
    fa24:	003f0906 	br	f64c <__alt_data_end+0xfffb9f1c>
    fa28:	0101ffc4 	movi	r4,2047
    fa2c:	513f991e 	bne	r10,r4,f894 <__alt_data_end+0xfffba164>
    fa30:	180b883a 	mov	r5,r3
    fa34:	3023883a 	mov	r17,r6
    fa38:	5021883a 	mov	r16,r10
    fa3c:	3825883a 	mov	r18,r7
    fa40:	003e8d06 	br	f478 <__alt_data_end+0xfffb9d48>
    fa44:	80001a1e 	bne	r16,zero,fab0 <__subdf3+0x6c4>
    fa48:	2c48b03a 	or	r4,r5,r17
    fa4c:	20005526 	beq	r4,zero,fba4 <__subdf3+0x7b8>
    fa50:	0084303a 	nor	r2,zero,r2
    fa54:	1000511e 	bne	r2,zero,fb9c <__subdf3+0x7b0>
    fa58:	89a3883a 	add	r17,r17,r6
    fa5c:	194b883a 	add	r5,r3,r5
    fa60:	898d803a 	cmpltu	r6,r17,r6
    fa64:	298b883a 	add	r5,r5,r6
    fa68:	5021883a 	mov	r16,r10
    fa6c:	003efc06 	br	f660 <__alt_data_end+0xfffb9f30>
    fa70:	1000341e 	bne	r2,zero,fb44 <__subdf3+0x758>
    fa74:	1984b03a 	or	r2,r3,r6
    fa78:	10006f26 	beq	r2,zero,fc38 <__subdf3+0x84c>
    fa7c:	180b883a 	mov	r5,r3
    fa80:	3023883a 	mov	r17,r6
    fa84:	3825883a 	mov	r18,r7
    fa88:	0401ffc4 	movi	r16,2047
    fa8c:	003e7a06 	br	f478 <__alt_data_end+0xfffb9d48>
    fa90:	2c62b03a 	or	r17,r5,r17
    fa94:	8822c03a 	cmpne	r17,r17,zero
    fa98:	0005883a 	mov	r2,zero
    fa9c:	003f8a06 	br	f8c8 <__alt_data_end+0xfffba198>
    faa0:	3821883a 	mov	r16,r7
    faa4:	000b883a 	mov	r5,zero
    faa8:	0023883a 	mov	r17,zero
    faac:	003ed206 	br	f5f8 <__alt_data_end+0xfffb9ec8>
    fab0:	0101ffc4 	movi	r4,2047
    fab4:	51003b26 	beq	r10,r4,fba4 <__subdf3+0x7b8>
    fab8:	0085c83a 	sub	r2,zero,r2
    fabc:	29402034 	orhi	r5,r5,128
    fac0:	01000e04 	movi	r4,56
    fac4:	20806216 	blt	r4,r2,fc50 <__subdf3+0x864>
    fac8:	010007c4 	movi	r4,31
    facc:	20806b16 	blt	r4,r2,fc7c <__subdf3+0x890>
    fad0:	01000804 	movi	r4,32
    fad4:	2089c83a 	sub	r4,r4,r2
    fad8:	2912983a 	sll	r9,r5,r4
    fadc:	888ed83a 	srl	r7,r17,r2
    fae0:	8908983a 	sll	r4,r17,r4
    fae4:	2884d83a 	srl	r2,r5,r2
    fae8:	49e2b03a 	or	r17,r9,r7
    faec:	2008c03a 	cmpne	r4,r4,zero
    faf0:	8922b03a 	or	r17,r17,r4
    faf4:	89a3883a 	add	r17,r17,r6
    faf8:	10c5883a 	add	r2,r2,r3
    fafc:	898d803a 	cmpltu	r6,r17,r6
    fb00:	118b883a 	add	r5,r2,r6
    fb04:	5021883a 	mov	r16,r10
    fb08:	003ed506 	br	f660 <__alt_data_end+0xfffb9f30>
    fb0c:	1984b03a 	or	r2,r3,r6
    fb10:	103e5926 	beq	r2,zero,f478 <__alt_data_end+0xfffb9d48>
    fb14:	8989c83a 	sub	r4,r17,r6
    fb18:	8911803a 	cmpltu	r8,r17,r4
    fb1c:	28c5c83a 	sub	r2,r5,r3
    fb20:	1205c83a 	sub	r2,r2,r8
    fb24:	1200202c 	andhi	r8,r2,128
    fb28:	403ef926 	beq	r8,zero,f710 <__alt_data_end+0xfffb9fe0>
    fb2c:	3463c83a 	sub	r17,r6,r17
    fb30:	194bc83a 	sub	r5,r3,r5
    fb34:	344d803a 	cmpltu	r6,r6,r17
    fb38:	298bc83a 	sub	r5,r5,r6
    fb3c:	3825883a 	mov	r18,r7
    fb40:	003e4d06 	br	f478 <__alt_data_end+0xfffb9d48>
    fb44:	1984b03a 	or	r2,r3,r6
    fb48:	10002b26 	beq	r2,zero,fbf8 <__subdf3+0x80c>
    fb4c:	2808d0fa 	srli	r4,r5,3
    fb50:	8822d0fa 	srli	r17,r17,3
    fb54:	280a977a 	slli	r5,r5,29
    fb58:	2080022c 	andhi	r2,r4,8
    fb5c:	2c62b03a 	or	r17,r5,r17
    fb60:	10000826 	beq	r2,zero,fb84 <__subdf3+0x798>
    fb64:	1810d0fa 	srli	r8,r3,3
    fb68:	4080022c 	andhi	r2,r8,8
    fb6c:	1000051e 	bne	r2,zero,fb84 <__subdf3+0x798>
    fb70:	300cd0fa 	srli	r6,r6,3
    fb74:	1804977a 	slli	r2,r3,29
    fb78:	4009883a 	mov	r4,r8
    fb7c:	3825883a 	mov	r18,r7
    fb80:	11a2b03a 	or	r17,r2,r6
    fb84:	880ad77a 	srli	r5,r17,29
    fb88:	200890fa 	slli	r4,r4,3
    fb8c:	882290fa 	slli	r17,r17,3
    fb90:	0401ffc4 	movi	r16,2047
    fb94:	290ab03a 	or	r5,r5,r4
    fb98:	003e3706 	br	f478 <__alt_data_end+0xfffb9d48>
    fb9c:	0101ffc4 	movi	r4,2047
    fba0:	513fc71e 	bne	r10,r4,fac0 <__alt_data_end+0xfffba390>
    fba4:	180b883a 	mov	r5,r3
    fba8:	3023883a 	mov	r17,r6
    fbac:	5021883a 	mov	r16,r10
    fbb0:	003e3106 	br	f478 <__alt_data_end+0xfffb9d48>
    fbb4:	10002d26 	beq	r2,zero,fc6c <__subdf3+0x880>
    fbb8:	1984b03a 	or	r2,r3,r6
    fbbc:	10000e26 	beq	r2,zero,fbf8 <__subdf3+0x80c>
    fbc0:	2808d0fa 	srli	r4,r5,3
    fbc4:	8822d0fa 	srli	r17,r17,3
    fbc8:	280a977a 	slli	r5,r5,29
    fbcc:	2080022c 	andhi	r2,r4,8
    fbd0:	2c62b03a 	or	r17,r5,r17
    fbd4:	103feb26 	beq	r2,zero,fb84 <__alt_data_end+0xfffba454>
    fbd8:	180ed0fa 	srli	r7,r3,3
    fbdc:	3880022c 	andhi	r2,r7,8
    fbe0:	103fe81e 	bne	r2,zero,fb84 <__alt_data_end+0xfffba454>
    fbe4:	300cd0fa 	srli	r6,r6,3
    fbe8:	1804977a 	slli	r2,r3,29
    fbec:	3809883a 	mov	r4,r7
    fbf0:	11a2b03a 	or	r17,r2,r6
    fbf4:	003fe306 	br	fb84 <__alt_data_end+0xfffba454>
    fbf8:	0401ffc4 	movi	r16,2047
    fbfc:	003e1e06 	br	f478 <__alt_data_end+0xfffb9d48>
    fc00:	0005883a 	mov	r2,zero
    fc04:	003f8306 	br	fa14 <__alt_data_end+0xfffba2e4>
    fc08:	113ff804 	addi	r4,r2,-32
    fc0c:	02000804 	movi	r8,32
    fc10:	2908d83a 	srl	r4,r5,r4
    fc14:	12002526 	beq	r2,r8,fcac <__subdf3+0x8c0>
    fc18:	02001004 	movi	r8,64
    fc1c:	4085c83a 	sub	r2,r8,r2
    fc20:	288a983a 	sll	r5,r5,r2
    fc24:	2c62b03a 	or	r17,r5,r17
    fc28:	8822c03a 	cmpne	r17,r17,zero
    fc2c:	8922b03a 	or	r17,r17,r4
    fc30:	0005883a 	mov	r2,zero
    fc34:	003f2406 	br	f8c8 <__alt_data_end+0xfffba198>
    fc38:	01402034 	movhi	r5,128
    fc3c:	0011883a 	mov	r8,zero
    fc40:	297fffc4 	addi	r5,r5,-1
    fc44:	047ffe04 	movi	r17,-8
    fc48:	0401ffc4 	movi	r16,2047
    fc4c:	003e6a06 	br	f5f8 <__alt_data_end+0xfffb9ec8>
    fc50:	2c62b03a 	or	r17,r5,r17
    fc54:	8822c03a 	cmpne	r17,r17,zero
    fc58:	0005883a 	mov	r2,zero
    fc5c:	003fa506 	br	faf4 <__alt_data_end+0xfffba3c4>
    fc60:	180b883a 	mov	r5,r3
    fc64:	3023883a 	mov	r17,r6
    fc68:	003e0306 	br	f478 <__alt_data_end+0xfffb9d48>
    fc6c:	180b883a 	mov	r5,r3
    fc70:	3023883a 	mov	r17,r6
    fc74:	0401ffc4 	movi	r16,2047
    fc78:	003dff06 	br	f478 <__alt_data_end+0xfffb9d48>
    fc7c:	113ff804 	addi	r4,r2,-32
    fc80:	01c00804 	movi	r7,32
    fc84:	2908d83a 	srl	r4,r5,r4
    fc88:	11c00a26 	beq	r2,r7,fcb4 <__subdf3+0x8c8>
    fc8c:	01c01004 	movi	r7,64
    fc90:	3885c83a 	sub	r2,r7,r2
    fc94:	288a983a 	sll	r5,r5,r2
    fc98:	2c62b03a 	or	r17,r5,r17
    fc9c:	8822c03a 	cmpne	r17,r17,zero
    fca0:	8922b03a 	or	r17,r17,r4
    fca4:	0005883a 	mov	r2,zero
    fca8:	003f9206 	br	faf4 <__alt_data_end+0xfffba3c4>
    fcac:	000b883a 	mov	r5,zero
    fcb0:	003fdc06 	br	fc24 <__alt_data_end+0xfffba4f4>
    fcb4:	000b883a 	mov	r5,zero
    fcb8:	003ff706 	br	fc98 <__alt_data_end+0xfffba568>

0000fcbc <__fixdfsi>:
    fcbc:	2806d53a 	srli	r3,r5,20
    fcc0:	00800434 	movhi	r2,16
    fcc4:	10bfffc4 	addi	r2,r2,-1
    fcc8:	18c1ffcc 	andi	r3,r3,2047
    fccc:	0180ff84 	movi	r6,1022
    fcd0:	2884703a 	and	r2,r5,r2
    fcd4:	280ad7fa 	srli	r5,r5,31
    fcd8:	30c0130e 	bge	r6,r3,fd28 <__fixdfsi+0x6c>
    fcdc:	01810744 	movi	r6,1053
    fce0:	30c00d16 	blt	r6,r3,fd18 <__fixdfsi+0x5c>
    fce4:	01810cc4 	movi	r6,1075
    fce8:	30cdc83a 	sub	r6,r6,r3
    fcec:	01c007c4 	movi	r7,31
    fcf0:	10800434 	orhi	r2,r2,16
    fcf4:	39800e0e 	bge	r7,r6,fd30 <__fixdfsi+0x74>
    fcf8:	010104c4 	movi	r4,1043
    fcfc:	20c7c83a 	sub	r3,r4,r3
    fd00:	10c6d83a 	srl	r3,r2,r3
    fd04:	29403fcc 	andi	r5,r5,255
    fd08:	0145c83a 	sub	r2,zero,r5
    fd0c:	1884f03a 	xor	r2,r3,r2
    fd10:	1145883a 	add	r2,r2,r5
    fd14:	f800283a 	ret
    fd18:	00a00034 	movhi	r2,32768
    fd1c:	10bfffc4 	addi	r2,r2,-1
    fd20:	2885883a 	add	r2,r5,r2
    fd24:	f800283a 	ret
    fd28:	0005883a 	mov	r2,zero
    fd2c:	f800283a 	ret
    fd30:	18fefb44 	addi	r3,r3,-1043
    fd34:	2188d83a 	srl	r4,r4,r6
    fd38:	10c6983a 	sll	r3,r2,r3
    fd3c:	20c6b03a 	or	r3,r4,r3
    fd40:	003ff006 	br	fd04 <__alt_data_end+0xfffba5d4>

0000fd44 <__floatsidf>:
    fd44:	defffd04 	addi	sp,sp,-12
    fd48:	dc400115 	stw	r17,4(sp)
    fd4c:	dfc00215 	stw	ra,8(sp)
    fd50:	dc000015 	stw	r16,0(sp)
    fd54:	2023883a 	mov	r17,r4
    fd58:	20001426 	beq	r4,zero,fdac <__floatsidf+0x68>
    fd5c:	2020d7fa 	srli	r16,r4,31
    fd60:	80000126 	beq	r16,zero,fd68 <__floatsidf+0x24>
    fd64:	0123c83a 	sub	r17,zero,r4
    fd68:	8809883a 	mov	r4,r17
    fd6c:	000feb80 	call	feb8 <__clzsi2>
    fd70:	01410784 	movi	r5,1054
    fd74:	00c00284 	movi	r3,10
    fd78:	288bc83a 	sub	r5,r5,r2
    fd7c:	18801c16 	blt	r3,r2,fdf0 <__floatsidf+0xac>
    fd80:	00c002c4 	movi	r3,11
    fd84:	1887c83a 	sub	r3,r3,r2
    fd88:	88c8d83a 	srl	r4,r17,r3
    fd8c:	00c00434 	movhi	r3,16
    fd90:	18ffffc4 	addi	r3,r3,-1
    fd94:	10800544 	addi	r2,r2,21
    fd98:	20c8703a 	and	r4,r4,r3
    fd9c:	8884983a 	sll	r2,r17,r2
    fda0:	28c1ffcc 	andi	r3,r5,2047
    fda4:	800d883a 	mov	r6,r16
    fda8:	00000406 	br	fdbc <__floatsidf+0x78>
    fdac:	000d883a 	mov	r6,zero
    fdb0:	0007883a 	mov	r3,zero
    fdb4:	0009883a 	mov	r4,zero
    fdb8:	0005883a 	mov	r2,zero
    fdbc:	180a953a 	slli	r5,r3,20
    fdc0:	31803fcc 	andi	r6,r6,255
    fdc4:	00c00434 	movhi	r3,16
    fdc8:	300c97fa 	slli	r6,r6,31
    fdcc:	18ffffc4 	addi	r3,r3,-1
    fdd0:	20c6703a 	and	r3,r4,r3
    fdd4:	1946b03a 	or	r3,r3,r5
    fdd8:	1986b03a 	or	r3,r3,r6
    fddc:	dfc00217 	ldw	ra,8(sp)
    fde0:	dc400117 	ldw	r17,4(sp)
    fde4:	dc000017 	ldw	r16,0(sp)
    fde8:	dec00304 	addi	sp,sp,12
    fdec:	f800283a 	ret
    fdf0:	10fffd44 	addi	r3,r2,-11
    fdf4:	88c8983a 	sll	r4,r17,r3
    fdf8:	00800434 	movhi	r2,16
    fdfc:	10bfffc4 	addi	r2,r2,-1
    fe00:	2088703a 	and	r4,r4,r2
    fe04:	28c1ffcc 	andi	r3,r5,2047
    fe08:	800d883a 	mov	r6,r16
    fe0c:	0005883a 	mov	r2,zero
    fe10:	003fea06 	br	fdbc <__alt_data_end+0xfffba68c>

0000fe14 <__floatunsidf>:
    fe14:	defffe04 	addi	sp,sp,-8
    fe18:	dc000015 	stw	r16,0(sp)
    fe1c:	dfc00115 	stw	ra,4(sp)
    fe20:	2021883a 	mov	r16,r4
    fe24:	20001026 	beq	r4,zero,fe68 <__floatunsidf+0x54>
    fe28:	000feb80 	call	feb8 <__clzsi2>
    fe2c:	01410784 	movi	r5,1054
    fe30:	100d883a 	mov	r6,r2
    fe34:	288bc83a 	sub	r5,r5,r2
    fe38:	00800284 	movi	r2,10
    fe3c:	11801616 	blt	r2,r6,fe98 <__floatunsidf+0x84>
    fe40:	008002c4 	movi	r2,11
    fe44:	1185c83a 	sub	r2,r2,r6
    fe48:	8084d83a 	srl	r2,r16,r2
    fe4c:	00c00434 	movhi	r3,16
    fe50:	31c00544 	addi	r7,r6,21
    fe54:	18ffffc4 	addi	r3,r3,-1
    fe58:	81e0983a 	sll	r16,r16,r7
    fe5c:	10cc703a 	and	r6,r2,r3
    fe60:	2941ffcc 	andi	r5,r5,2047
    fe64:	00000206 	br	fe70 <__floatunsidf+0x5c>
    fe68:	000b883a 	mov	r5,zero
    fe6c:	000d883a 	mov	r6,zero
    fe70:	280a953a 	slli	r5,r5,20
    fe74:	00c00434 	movhi	r3,16
    fe78:	18ffffc4 	addi	r3,r3,-1
    fe7c:	30c6703a 	and	r3,r6,r3
    fe80:	8005883a 	mov	r2,r16
    fe84:	1946b03a 	or	r3,r3,r5
    fe88:	dfc00117 	ldw	ra,4(sp)
    fe8c:	dc000017 	ldw	r16,0(sp)
    fe90:	dec00204 	addi	sp,sp,8
    fe94:	f800283a 	ret
    fe98:	31bffd44 	addi	r6,r6,-11
    fe9c:	818c983a 	sll	r6,r16,r6
    fea0:	00800434 	movhi	r2,16
    fea4:	10bfffc4 	addi	r2,r2,-1
    fea8:	2941ffcc 	andi	r5,r5,2047
    feac:	0021883a 	mov	r16,zero
    feb0:	308c703a 	and	r6,r6,r2
    feb4:	003fee06 	br	fe70 <__alt_data_end+0xfffba740>

0000feb8 <__clzsi2>:
    feb8:	00bfffd4 	movui	r2,65535
    febc:	11000b36 	bltu	r2,r4,feec <__clzsi2+0x34>
    fec0:	00803fc4 	movi	r2,255
    fec4:	1100122e 	bgeu	r2,r4,ff10 <__clzsi2+0x58>
    fec8:	00c00204 	movi	r3,8
    fecc:	01400604 	movi	r5,24
    fed0:	20c8d83a 	srl	r4,r4,r3
    fed4:	00800074 	movhi	r2,1
    fed8:	108c4804 	addi	r2,r2,12576
    fedc:	1109883a 	add	r4,r2,r4
    fee0:	20800003 	ldbu	r2,0(r4)
    fee4:	2885c83a 	sub	r2,r5,r2
    fee8:	f800283a 	ret
    feec:	00804034 	movhi	r2,256
    fef0:	10bfffc4 	addi	r2,r2,-1
    fef4:	11000336 	bltu	r2,r4,ff04 <__clzsi2+0x4c>
    fef8:	00c00404 	movi	r3,16
    fefc:	180b883a 	mov	r5,r3
    ff00:	003ff306 	br	fed0 <__alt_data_end+0xfffba7a0>
    ff04:	00c00604 	movi	r3,24
    ff08:	01400204 	movi	r5,8
    ff0c:	003ff006 	br	fed0 <__alt_data_end+0xfffba7a0>
    ff10:	0007883a 	mov	r3,zero
    ff14:	01400804 	movi	r5,32
    ff18:	003fed06 	br	fed0 <__alt_data_end+0xfffba7a0>

0000ff1c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ff1c:	defffe04 	addi	sp,sp,-8
    ff20:	dfc00115 	stw	ra,4(sp)
    ff24:	df000015 	stw	fp,0(sp)
    ff28:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ff2c:	00800074 	movhi	r2,1
    ff30:	10936704 	addi	r2,r2,19868
    ff34:	10800017 	ldw	r2,0(r2)
    ff38:	10000526 	beq	r2,zero,ff50 <alt_get_errno+0x34>
    ff3c:	00800074 	movhi	r2,1
    ff40:	10936704 	addi	r2,r2,19868
    ff44:	10800017 	ldw	r2,0(r2)
    ff48:	103ee83a 	callr	r2
    ff4c:	00000206 	br	ff58 <alt_get_errno+0x3c>
    ff50:	00800074 	movhi	r2,1
    ff54:	109a4d04 	addi	r2,r2,26932
}
    ff58:	e037883a 	mov	sp,fp
    ff5c:	dfc00117 	ldw	ra,4(sp)
    ff60:	df000017 	ldw	fp,0(sp)
    ff64:	dec00204 	addi	sp,sp,8
    ff68:	f800283a 	ret

0000ff6c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    ff6c:	defffb04 	addi	sp,sp,-20
    ff70:	dfc00415 	stw	ra,16(sp)
    ff74:	df000315 	stw	fp,12(sp)
    ff78:	df000304 	addi	fp,sp,12
    ff7c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    ff80:	e0bfff17 	ldw	r2,-4(fp)
    ff84:	10000816 	blt	r2,zero,ffa8 <close+0x3c>
    ff88:	e13fff17 	ldw	r4,-4(fp)
    ff8c:	01400304 	movi	r5,12
    ff90:	000d6f80 	call	d6f8 <__mulsi3>
    ff94:	1007883a 	mov	r3,r2
    ff98:	00800074 	movhi	r2,1
    ff9c:	108ee404 	addi	r2,r2,15248
    ffa0:	1885883a 	add	r2,r3,r2
    ffa4:	00000106 	br	ffac <close+0x40>
    ffa8:	0005883a 	mov	r2,zero
    ffac:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    ffb0:	e0bffd17 	ldw	r2,-12(fp)
    ffb4:	10001926 	beq	r2,zero,1001c <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    ffb8:	e0bffd17 	ldw	r2,-12(fp)
    ffbc:	10800017 	ldw	r2,0(r2)
    ffc0:	10800417 	ldw	r2,16(r2)
    ffc4:	10000626 	beq	r2,zero,ffe0 <close+0x74>
    ffc8:	e0bffd17 	ldw	r2,-12(fp)
    ffcc:	10800017 	ldw	r2,0(r2)
    ffd0:	10800417 	ldw	r2,16(r2)
    ffd4:	e13ffd17 	ldw	r4,-12(fp)
    ffd8:	103ee83a 	callr	r2
    ffdc:	00000106 	br	ffe4 <close+0x78>
    ffe0:	0005883a 	mov	r2,zero
    ffe4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    ffe8:	e13fff17 	ldw	r4,-4(fp)
    ffec:	00106900 	call	10690 <alt_release_fd>
    if (rval < 0)
    fff0:	e0bffe17 	ldw	r2,-8(fp)
    fff4:	1000070e 	bge	r2,zero,10014 <close+0xa8>
    {
      ALT_ERRNO = -rval;
    fff8:	000ff1c0 	call	ff1c <alt_get_errno>
    fffc:	1007883a 	mov	r3,r2
   10000:	e0bffe17 	ldw	r2,-8(fp)
   10004:	0085c83a 	sub	r2,zero,r2
   10008:	18800015 	stw	r2,0(r3)
      return -1;
   1000c:	00bfffc4 	movi	r2,-1
   10010:	00000706 	br	10030 <close+0xc4>
    }
    return 0;
   10014:	0005883a 	mov	r2,zero
   10018:	00000506 	br	10030 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   1001c:	000ff1c0 	call	ff1c <alt_get_errno>
   10020:	1007883a 	mov	r3,r2
   10024:	00801444 	movi	r2,81
   10028:	18800015 	stw	r2,0(r3)
    return -1;
   1002c:	00bfffc4 	movi	r2,-1
  }
}
   10030:	e037883a 	mov	sp,fp
   10034:	dfc00117 	ldw	ra,4(sp)
   10038:	df000017 	ldw	fp,0(sp)
   1003c:	dec00204 	addi	sp,sp,8
   10040:	f800283a 	ret

00010044 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   10044:	defffc04 	addi	sp,sp,-16
   10048:	df000315 	stw	fp,12(sp)
   1004c:	df000304 	addi	fp,sp,12
   10050:	e13ffd15 	stw	r4,-12(fp)
   10054:	e17ffe15 	stw	r5,-8(fp)
   10058:	e1bfff15 	stw	r6,-4(fp)
  return len;
   1005c:	e0bfff17 	ldw	r2,-4(fp)
}
   10060:	e037883a 	mov	sp,fp
   10064:	df000017 	ldw	fp,0(sp)
   10068:	dec00104 	addi	sp,sp,4
   1006c:	f800283a 	ret

00010070 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10070:	defffe04 	addi	sp,sp,-8
   10074:	dfc00115 	stw	ra,4(sp)
   10078:	df000015 	stw	fp,0(sp)
   1007c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10080:	00800074 	movhi	r2,1
   10084:	10936704 	addi	r2,r2,19868
   10088:	10800017 	ldw	r2,0(r2)
   1008c:	10000526 	beq	r2,zero,100a4 <alt_get_errno+0x34>
   10090:	00800074 	movhi	r2,1
   10094:	10936704 	addi	r2,r2,19868
   10098:	10800017 	ldw	r2,0(r2)
   1009c:	103ee83a 	callr	r2
   100a0:	00000206 	br	100ac <alt_get_errno+0x3c>
   100a4:	00800074 	movhi	r2,1
   100a8:	109a4d04 	addi	r2,r2,26932
}
   100ac:	e037883a 	mov	sp,fp
   100b0:	dfc00117 	ldw	ra,4(sp)
   100b4:	df000017 	ldw	fp,0(sp)
   100b8:	dec00204 	addi	sp,sp,8
   100bc:	f800283a 	ret

000100c0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   100c0:	defffb04 	addi	sp,sp,-20
   100c4:	dfc00415 	stw	ra,16(sp)
   100c8:	df000315 	stw	fp,12(sp)
   100cc:	df000304 	addi	fp,sp,12
   100d0:	e13ffe15 	stw	r4,-8(fp)
   100d4:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   100d8:	e0bffe17 	ldw	r2,-8(fp)
   100dc:	10000816 	blt	r2,zero,10100 <fstat+0x40>
   100e0:	e13ffe17 	ldw	r4,-8(fp)
   100e4:	01400304 	movi	r5,12
   100e8:	000d6f80 	call	d6f8 <__mulsi3>
   100ec:	1007883a 	mov	r3,r2
   100f0:	00800074 	movhi	r2,1
   100f4:	108ee404 	addi	r2,r2,15248
   100f8:	1885883a 	add	r2,r3,r2
   100fc:	00000106 	br	10104 <fstat+0x44>
   10100:	0005883a 	mov	r2,zero
   10104:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   10108:	e0bffd17 	ldw	r2,-12(fp)
   1010c:	10001026 	beq	r2,zero,10150 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   10110:	e0bffd17 	ldw	r2,-12(fp)
   10114:	10800017 	ldw	r2,0(r2)
   10118:	10800817 	ldw	r2,32(r2)
   1011c:	10000726 	beq	r2,zero,1013c <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   10120:	e0bffd17 	ldw	r2,-12(fp)
   10124:	10800017 	ldw	r2,0(r2)
   10128:	10800817 	ldw	r2,32(r2)
   1012c:	e13ffd17 	ldw	r4,-12(fp)
   10130:	e17fff17 	ldw	r5,-4(fp)
   10134:	103ee83a 	callr	r2
   10138:	00000a06 	br	10164 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   1013c:	e0bfff17 	ldw	r2,-4(fp)
   10140:	00c80004 	movi	r3,8192
   10144:	10c00115 	stw	r3,4(r2)
      return 0;
   10148:	0005883a 	mov	r2,zero
   1014c:	00000506 	br	10164 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   10150:	00100700 	call	10070 <alt_get_errno>
   10154:	1007883a 	mov	r3,r2
   10158:	00801444 	movi	r2,81
   1015c:	18800015 	stw	r2,0(r3)
    return -1;
   10160:	00bfffc4 	movi	r2,-1
  }
}
   10164:	e037883a 	mov	sp,fp
   10168:	dfc00117 	ldw	ra,4(sp)
   1016c:	df000017 	ldw	fp,0(sp)
   10170:	dec00204 	addi	sp,sp,8
   10174:	f800283a 	ret

00010178 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10178:	defffe04 	addi	sp,sp,-8
   1017c:	dfc00115 	stw	ra,4(sp)
   10180:	df000015 	stw	fp,0(sp)
   10184:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10188:	00800074 	movhi	r2,1
   1018c:	10936704 	addi	r2,r2,19868
   10190:	10800017 	ldw	r2,0(r2)
   10194:	10000526 	beq	r2,zero,101ac <alt_get_errno+0x34>
   10198:	00800074 	movhi	r2,1
   1019c:	10936704 	addi	r2,r2,19868
   101a0:	10800017 	ldw	r2,0(r2)
   101a4:	103ee83a 	callr	r2
   101a8:	00000206 	br	101b4 <alt_get_errno+0x3c>
   101ac:	00800074 	movhi	r2,1
   101b0:	109a4d04 	addi	r2,r2,26932
}
   101b4:	e037883a 	mov	sp,fp
   101b8:	dfc00117 	ldw	ra,4(sp)
   101bc:	df000017 	ldw	fp,0(sp)
   101c0:	dec00204 	addi	sp,sp,8
   101c4:	f800283a 	ret

000101c8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   101c8:	deffed04 	addi	sp,sp,-76
   101cc:	dfc01215 	stw	ra,72(sp)
   101d0:	df001115 	stw	fp,68(sp)
   101d4:	df001104 	addi	fp,sp,68
   101d8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   101dc:	e0bfff17 	ldw	r2,-4(fp)
   101e0:	10000816 	blt	r2,zero,10204 <isatty+0x3c>
   101e4:	e13fff17 	ldw	r4,-4(fp)
   101e8:	01400304 	movi	r5,12
   101ec:	000d6f80 	call	d6f8 <__mulsi3>
   101f0:	1007883a 	mov	r3,r2
   101f4:	00800074 	movhi	r2,1
   101f8:	108ee404 	addi	r2,r2,15248
   101fc:	1885883a 	add	r2,r3,r2
   10200:	00000106 	br	10208 <isatty+0x40>
   10204:	0005883a 	mov	r2,zero
   10208:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   1020c:	e0bfef17 	ldw	r2,-68(fp)
   10210:	10000e26 	beq	r2,zero,1024c <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   10214:	e0bfef17 	ldw	r2,-68(fp)
   10218:	10800017 	ldw	r2,0(r2)
   1021c:	10800817 	ldw	r2,32(r2)
   10220:	1000021e 	bne	r2,zero,1022c <isatty+0x64>
    {
      return 1;
   10224:	00800044 	movi	r2,1
   10228:	00000d06 	br	10260 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   1022c:	e0bff004 	addi	r2,fp,-64
   10230:	e13fff17 	ldw	r4,-4(fp)
   10234:	100b883a 	mov	r5,r2
   10238:	00100c00 	call	100c0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   1023c:	e0bff117 	ldw	r2,-60(fp)
   10240:	10880020 	cmpeqi	r2,r2,8192
   10244:	10803fcc 	andi	r2,r2,255
   10248:	00000506 	br	10260 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   1024c:	00101780 	call	10178 <alt_get_errno>
   10250:	1007883a 	mov	r3,r2
   10254:	00801444 	movi	r2,81
   10258:	18800015 	stw	r2,0(r3)
    return 0;
   1025c:	0005883a 	mov	r2,zero
  }
}
   10260:	e037883a 	mov	sp,fp
   10264:	dfc00117 	ldw	ra,4(sp)
   10268:	df000017 	ldw	fp,0(sp)
   1026c:	dec00204 	addi	sp,sp,8
   10270:	f800283a 	ret

00010274 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   10274:	defffc04 	addi	sp,sp,-16
   10278:	df000315 	stw	fp,12(sp)
   1027c:	df000304 	addi	fp,sp,12
   10280:	e13ffd15 	stw	r4,-12(fp)
   10284:	e17ffe15 	stw	r5,-8(fp)
   10288:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   1028c:	e0fffe17 	ldw	r3,-8(fp)
   10290:	e0bffd17 	ldw	r2,-12(fp)
   10294:	18800c26 	beq	r3,r2,102c8 <alt_load_section+0x54>
  {
    while( to != end )
   10298:	00000806 	br	102bc <alt_load_section+0x48>
    {
      *to++ = *from++;
   1029c:	e0bffe17 	ldw	r2,-8(fp)
   102a0:	10c00104 	addi	r3,r2,4
   102a4:	e0fffe15 	stw	r3,-8(fp)
   102a8:	e0fffd17 	ldw	r3,-12(fp)
   102ac:	19000104 	addi	r4,r3,4
   102b0:	e13ffd15 	stw	r4,-12(fp)
   102b4:	18c00017 	ldw	r3,0(r3)
   102b8:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   102bc:	e0fffe17 	ldw	r3,-8(fp)
   102c0:	e0bfff17 	ldw	r2,-4(fp)
   102c4:	18bff51e 	bne	r3,r2,1029c <__alt_data_end+0xfffbab6c>
    {
      *to++ = *from++;
    }
  }
}
   102c8:	e037883a 	mov	sp,fp
   102cc:	df000017 	ldw	fp,0(sp)
   102d0:	dec00104 	addi	sp,sp,4
   102d4:	f800283a 	ret

000102d8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   102d8:	defffe04 	addi	sp,sp,-8
   102dc:	dfc00115 	stw	ra,4(sp)
   102e0:	df000015 	stw	fp,0(sp)
   102e4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   102e8:	01000074 	movhi	r4,1
   102ec:	21136c04 	addi	r4,r4,19888
   102f0:	01400074 	movhi	r5,1
   102f4:	294c9504 	addi	r5,r5,12884
   102f8:	01800074 	movhi	r6,1
   102fc:	31936c04 	addi	r6,r6,19888
   10300:	00102740 	call	10274 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   10304:	01000034 	movhi	r4,0
   10308:	21000804 	addi	r4,r4,32
   1030c:	01400034 	movhi	r5,0
   10310:	29400804 	addi	r5,r5,32
   10314:	01800034 	movhi	r6,0
   10318:	31808b04 	addi	r6,r6,556
   1031c:	00102740 	call	10274 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   10320:	01000074 	movhi	r4,1
   10324:	2109ff04 	addi	r4,r4,10236
   10328:	01400074 	movhi	r5,1
   1032c:	2949ff04 	addi	r5,r5,10236
   10330:	01800074 	movhi	r6,1
   10334:	318c9504 	addi	r6,r6,12884
   10338:	00102740 	call	10274 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   1033c:	00116d80 	call	116d8 <alt_dcache_flush_all>
  alt_icache_flush_all();
   10340:	00118a00 	call	118a0 <alt_icache_flush_all>
}
   10344:	e037883a 	mov	sp,fp
   10348:	dfc00117 	ldw	ra,4(sp)
   1034c:	df000017 	ldw	fp,0(sp)
   10350:	dec00204 	addi	sp,sp,8
   10354:	f800283a 	ret

00010358 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10358:	defffe04 	addi	sp,sp,-8
   1035c:	dfc00115 	stw	ra,4(sp)
   10360:	df000015 	stw	fp,0(sp)
   10364:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10368:	00800074 	movhi	r2,1
   1036c:	10936704 	addi	r2,r2,19868
   10370:	10800017 	ldw	r2,0(r2)
   10374:	10000526 	beq	r2,zero,1038c <alt_get_errno+0x34>
   10378:	00800074 	movhi	r2,1
   1037c:	10936704 	addi	r2,r2,19868
   10380:	10800017 	ldw	r2,0(r2)
   10384:	103ee83a 	callr	r2
   10388:	00000206 	br	10394 <alt_get_errno+0x3c>
   1038c:	00800074 	movhi	r2,1
   10390:	109a4d04 	addi	r2,r2,26932
}
   10394:	e037883a 	mov	sp,fp
   10398:	dfc00117 	ldw	ra,4(sp)
   1039c:	df000017 	ldw	fp,0(sp)
   103a0:	dec00204 	addi	sp,sp,8
   103a4:	f800283a 	ret

000103a8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   103a8:	defff904 	addi	sp,sp,-28
   103ac:	dfc00615 	stw	ra,24(sp)
   103b0:	df000515 	stw	fp,20(sp)
   103b4:	df000504 	addi	fp,sp,20
   103b8:	e13ffd15 	stw	r4,-12(fp)
   103bc:	e17ffe15 	stw	r5,-8(fp)
   103c0:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   103c4:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   103c8:	e0bffd17 	ldw	r2,-12(fp)
   103cc:	10000816 	blt	r2,zero,103f0 <lseek+0x48>
   103d0:	e13ffd17 	ldw	r4,-12(fp)
   103d4:	01400304 	movi	r5,12
   103d8:	000d6f80 	call	d6f8 <__mulsi3>
   103dc:	1007883a 	mov	r3,r2
   103e0:	00800074 	movhi	r2,1
   103e4:	108ee404 	addi	r2,r2,15248
   103e8:	1885883a 	add	r2,r3,r2
   103ec:	00000106 	br	103f4 <lseek+0x4c>
   103f0:	0005883a 	mov	r2,zero
   103f4:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   103f8:	e0bffc17 	ldw	r2,-16(fp)
   103fc:	10001026 	beq	r2,zero,10440 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   10400:	e0bffc17 	ldw	r2,-16(fp)
   10404:	10800017 	ldw	r2,0(r2)
   10408:	10800717 	ldw	r2,28(r2)
   1040c:	10000926 	beq	r2,zero,10434 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   10410:	e0bffc17 	ldw	r2,-16(fp)
   10414:	10800017 	ldw	r2,0(r2)
   10418:	10800717 	ldw	r2,28(r2)
   1041c:	e13ffc17 	ldw	r4,-16(fp)
   10420:	e17ffe17 	ldw	r5,-8(fp)
   10424:	e1bfff17 	ldw	r6,-4(fp)
   10428:	103ee83a 	callr	r2
   1042c:	e0bffb15 	stw	r2,-20(fp)
   10430:	00000506 	br	10448 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   10434:	00bfde84 	movi	r2,-134
   10438:	e0bffb15 	stw	r2,-20(fp)
   1043c:	00000206 	br	10448 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   10440:	00bfebc4 	movi	r2,-81
   10444:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   10448:	e0bffb17 	ldw	r2,-20(fp)
   1044c:	1000070e 	bge	r2,zero,1046c <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   10450:	00103580 	call	10358 <alt_get_errno>
   10454:	1007883a 	mov	r3,r2
   10458:	e0bffb17 	ldw	r2,-20(fp)
   1045c:	0085c83a 	sub	r2,zero,r2
   10460:	18800015 	stw	r2,0(r3)
    rc = -1;
   10464:	00bfffc4 	movi	r2,-1
   10468:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   1046c:	e0bffb17 	ldw	r2,-20(fp)
}
   10470:	e037883a 	mov	sp,fp
   10474:	dfc00117 	ldw	ra,4(sp)
   10478:	df000017 	ldw	fp,0(sp)
   1047c:	dec00204 	addi	sp,sp,8
   10480:	f800283a 	ret

00010484 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   10484:	defffd04 	addi	sp,sp,-12
   10488:	dfc00215 	stw	ra,8(sp)
   1048c:	df000115 	stw	fp,4(sp)
   10490:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   10494:	0009883a 	mov	r4,zero
   10498:	00109780 	call	10978 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   1049c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   104a0:	00109ac0 	call	109ac <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   104a4:	01000074 	movhi	r4,1
   104a8:	210c8b04 	addi	r4,r4,12844
   104ac:	01400074 	movhi	r5,1
   104b0:	294c8b04 	addi	r5,r5,12844
   104b4:	01800074 	movhi	r6,1
   104b8:	318c8b04 	addi	r6,r6,12844
   104bc:	0011c6c0 	call	11c6c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   104c0:	00117e80 	call	117e8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   104c4:	01000074 	movhi	r4,1
   104c8:	21061104 	addi	r4,r4,6212
   104cc:	00124580 	call	12458 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   104d0:	d126f517 	ldw	r4,-25644(gp)
   104d4:	d0e6f617 	ldw	r3,-25640(gp)
   104d8:	d0a6f717 	ldw	r2,-25636(gp)
   104dc:	180b883a 	mov	r5,r3
   104e0:	100d883a 	mov	r6,r2
   104e4:	00010ac0 	call	10ac <main>
   104e8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   104ec:	01000044 	movi	r4,1
   104f0:	000ff6c0 	call	ff6c <close>
  exit (result);
   104f4:	e13fff17 	ldw	r4,-4(fp)
   104f8:	001246c0 	call	1246c <exit>

000104fc <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   104fc:	defffe04 	addi	sp,sp,-8
   10500:	df000115 	stw	fp,4(sp)
   10504:	df000104 	addi	fp,sp,4
   10508:	e13fff15 	stw	r4,-4(fp)
}
   1050c:	e037883a 	mov	sp,fp
   10510:	df000017 	ldw	fp,0(sp)
   10514:	dec00104 	addi	sp,sp,4
   10518:	f800283a 	ret

0001051c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   1051c:	defffe04 	addi	sp,sp,-8
   10520:	df000115 	stw	fp,4(sp)
   10524:	df000104 	addi	fp,sp,4
   10528:	e13fff15 	stw	r4,-4(fp)
}
   1052c:	e037883a 	mov	sp,fp
   10530:	df000017 	ldw	fp,0(sp)
   10534:	dec00104 	addi	sp,sp,4
   10538:	f800283a 	ret

0001053c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1053c:	defffe04 	addi	sp,sp,-8
   10540:	dfc00115 	stw	ra,4(sp)
   10544:	df000015 	stw	fp,0(sp)
   10548:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1054c:	00800074 	movhi	r2,1
   10550:	10936704 	addi	r2,r2,19868
   10554:	10800017 	ldw	r2,0(r2)
   10558:	10000526 	beq	r2,zero,10570 <alt_get_errno+0x34>
   1055c:	00800074 	movhi	r2,1
   10560:	10936704 	addi	r2,r2,19868
   10564:	10800017 	ldw	r2,0(r2)
   10568:	103ee83a 	callr	r2
   1056c:	00000206 	br	10578 <alt_get_errno+0x3c>
   10570:	00800074 	movhi	r2,1
   10574:	109a4d04 	addi	r2,r2,26932
}
   10578:	e037883a 	mov	sp,fp
   1057c:	dfc00117 	ldw	ra,4(sp)
   10580:	df000017 	ldw	fp,0(sp)
   10584:	dec00204 	addi	sp,sp,8
   10588:	f800283a 	ret

0001058c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   1058c:	defff904 	addi	sp,sp,-28
   10590:	dfc00615 	stw	ra,24(sp)
   10594:	df000515 	stw	fp,20(sp)
   10598:	df000504 	addi	fp,sp,20
   1059c:	e13ffd15 	stw	r4,-12(fp)
   105a0:	e17ffe15 	stw	r5,-8(fp)
   105a4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   105a8:	e0bffd17 	ldw	r2,-12(fp)
   105ac:	10000816 	blt	r2,zero,105d0 <read+0x44>
   105b0:	e13ffd17 	ldw	r4,-12(fp)
   105b4:	01400304 	movi	r5,12
   105b8:	000d6f80 	call	d6f8 <__mulsi3>
   105bc:	1007883a 	mov	r3,r2
   105c0:	00800074 	movhi	r2,1
   105c4:	108ee404 	addi	r2,r2,15248
   105c8:	1885883a 	add	r2,r3,r2
   105cc:	00000106 	br	105d4 <read+0x48>
   105d0:	0005883a 	mov	r2,zero
   105d4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   105d8:	e0bffb17 	ldw	r2,-20(fp)
   105dc:	10002226 	beq	r2,zero,10668 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   105e0:	e0bffb17 	ldw	r2,-20(fp)
   105e4:	10800217 	ldw	r2,8(r2)
   105e8:	108000cc 	andi	r2,r2,3
   105ec:	10800060 	cmpeqi	r2,r2,1
   105f0:	1000181e 	bne	r2,zero,10654 <read+0xc8>
        (fd->dev->read))
   105f4:	e0bffb17 	ldw	r2,-20(fp)
   105f8:	10800017 	ldw	r2,0(r2)
   105fc:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   10600:	10001426 	beq	r2,zero,10654 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   10604:	e0bffb17 	ldw	r2,-20(fp)
   10608:	10800017 	ldw	r2,0(r2)
   1060c:	10800517 	ldw	r2,20(r2)
   10610:	e0ffff17 	ldw	r3,-4(fp)
   10614:	e13ffb17 	ldw	r4,-20(fp)
   10618:	e17ffe17 	ldw	r5,-8(fp)
   1061c:	180d883a 	mov	r6,r3
   10620:	103ee83a 	callr	r2
   10624:	e0bffc15 	stw	r2,-16(fp)
   10628:	e0bffc17 	ldw	r2,-16(fp)
   1062c:	1000070e 	bge	r2,zero,1064c <read+0xc0>
        {
          ALT_ERRNO = -rval;
   10630:	001053c0 	call	1053c <alt_get_errno>
   10634:	1007883a 	mov	r3,r2
   10638:	e0bffc17 	ldw	r2,-16(fp)
   1063c:	0085c83a 	sub	r2,zero,r2
   10640:	18800015 	stw	r2,0(r3)
          return -1;
   10644:	00bfffc4 	movi	r2,-1
   10648:	00000c06 	br	1067c <read+0xf0>
        }
        return rval;
   1064c:	e0bffc17 	ldw	r2,-16(fp)
   10650:	00000a06 	br	1067c <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   10654:	001053c0 	call	1053c <alt_get_errno>
   10658:	1007883a 	mov	r3,r2
   1065c:	00800344 	movi	r2,13
   10660:	18800015 	stw	r2,0(r3)
   10664:	00000406 	br	10678 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   10668:	001053c0 	call	1053c <alt_get_errno>
   1066c:	1007883a 	mov	r3,r2
   10670:	00801444 	movi	r2,81
   10674:	18800015 	stw	r2,0(r3)
  }
  return -1;
   10678:	00bfffc4 	movi	r2,-1
}
   1067c:	e037883a 	mov	sp,fp
   10680:	dfc00117 	ldw	ra,4(sp)
   10684:	df000017 	ldw	fp,0(sp)
   10688:	dec00204 	addi	sp,sp,8
   1068c:	f800283a 	ret

00010690 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   10690:	defffc04 	addi	sp,sp,-16
   10694:	dfc00315 	stw	ra,12(sp)
   10698:	df000215 	stw	fp,8(sp)
   1069c:	dc000115 	stw	r16,4(sp)
   106a0:	df000204 	addi	fp,sp,8
   106a4:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   106a8:	e0bffe17 	ldw	r2,-8(fp)
   106ac:	108000d0 	cmplti	r2,r2,3
   106b0:	1000111e 	bne	r2,zero,106f8 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   106b4:	04000074 	movhi	r16,1
   106b8:	840ee404 	addi	r16,r16,15248
   106bc:	e0bffe17 	ldw	r2,-8(fp)
   106c0:	1009883a 	mov	r4,r2
   106c4:	01400304 	movi	r5,12
   106c8:	000d6f80 	call	d6f8 <__mulsi3>
   106cc:	8085883a 	add	r2,r16,r2
   106d0:	10800204 	addi	r2,r2,8
   106d4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   106d8:	04000074 	movhi	r16,1
   106dc:	840ee404 	addi	r16,r16,15248
   106e0:	e0bffe17 	ldw	r2,-8(fp)
   106e4:	1009883a 	mov	r4,r2
   106e8:	01400304 	movi	r5,12
   106ec:	000d6f80 	call	d6f8 <__mulsi3>
   106f0:	8085883a 	add	r2,r16,r2
   106f4:	10000015 	stw	zero,0(r2)
  }
}
   106f8:	e6ffff04 	addi	sp,fp,-4
   106fc:	dfc00217 	ldw	ra,8(sp)
   10700:	df000117 	ldw	fp,4(sp)
   10704:	dc000017 	ldw	r16,0(sp)
   10708:	dec00304 	addi	sp,sp,12
   1070c:	f800283a 	ret

00010710 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   10710:	defff904 	addi	sp,sp,-28
   10714:	df000615 	stw	fp,24(sp)
   10718:	df000604 	addi	fp,sp,24
   1071c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10720:	0005303a 	rdctl	r2,status
   10724:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10728:	e0fffc17 	ldw	r3,-16(fp)
   1072c:	00bfff84 	movi	r2,-2
   10730:	1884703a 	and	r2,r3,r2
   10734:	1001703a 	wrctl	status,r2
  
  return context;
   10738:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   1073c:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   10740:	d0a00c17 	ldw	r2,-32720(gp)
   10744:	10c000c4 	addi	r3,r2,3
   10748:	00bfff04 	movi	r2,-4
   1074c:	1884703a 	and	r2,r3,r2
   10750:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   10754:	d0e00c17 	ldw	r3,-32720(gp)
   10758:	e0bfff17 	ldw	r2,-4(fp)
   1075c:	1887883a 	add	r3,r3,r2
   10760:	00800174 	movhi	r2,5
   10764:	1095cc04 	addi	r2,r2,22320
   10768:	10c0062e 	bgeu	r2,r3,10784 <sbrk+0x74>
   1076c:	e0bffa17 	ldw	r2,-24(fp)
   10770:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10774:	e0bffd17 	ldw	r2,-12(fp)
   10778:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   1077c:	00bfffc4 	movi	r2,-1
   10780:	00000b06 	br	107b0 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   10784:	d0a00c17 	ldw	r2,-32720(gp)
   10788:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   1078c:	d0e00c17 	ldw	r3,-32720(gp)
   10790:	e0bfff17 	ldw	r2,-4(fp)
   10794:	1885883a 	add	r2,r3,r2
   10798:	d0a00c15 	stw	r2,-32720(gp)
   1079c:	e0bffa17 	ldw	r2,-24(fp)
   107a0:	e0bffe15 	stw	r2,-8(fp)
   107a4:	e0bffe17 	ldw	r2,-8(fp)
   107a8:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   107ac:	e0bffb17 	ldw	r2,-20(fp)
} 
   107b0:	e037883a 	mov	sp,fp
   107b4:	df000017 	ldw	fp,0(sp)
   107b8:	dec00104 	addi	sp,sp,4
   107bc:	f800283a 	ret

000107c0 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   107c0:	defffd04 	addi	sp,sp,-12
   107c4:	dfc00215 	stw	ra,8(sp)
   107c8:	df000115 	stw	fp,4(sp)
   107cc:	df000104 	addi	fp,sp,4
   107d0:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   107d4:	e13fff17 	ldw	r4,-4(fp)
   107d8:	00115800 	call	11580 <alt_busy_sleep>
}
   107dc:	e037883a 	mov	sp,fp
   107e0:	dfc00117 	ldw	ra,4(sp)
   107e4:	df000017 	ldw	fp,0(sp)
   107e8:	dec00204 	addi	sp,sp,8
   107ec:	f800283a 	ret

000107f0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   107f0:	defffe04 	addi	sp,sp,-8
   107f4:	dfc00115 	stw	ra,4(sp)
   107f8:	df000015 	stw	fp,0(sp)
   107fc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10800:	00800074 	movhi	r2,1
   10804:	10936704 	addi	r2,r2,19868
   10808:	10800017 	ldw	r2,0(r2)
   1080c:	10000526 	beq	r2,zero,10824 <alt_get_errno+0x34>
   10810:	00800074 	movhi	r2,1
   10814:	10936704 	addi	r2,r2,19868
   10818:	10800017 	ldw	r2,0(r2)
   1081c:	103ee83a 	callr	r2
   10820:	00000206 	br	1082c <alt_get_errno+0x3c>
   10824:	00800074 	movhi	r2,1
   10828:	109a4d04 	addi	r2,r2,26932
}
   1082c:	e037883a 	mov	sp,fp
   10830:	dfc00117 	ldw	ra,4(sp)
   10834:	df000017 	ldw	fp,0(sp)
   10838:	dec00204 	addi	sp,sp,8
   1083c:	f800283a 	ret

00010840 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   10840:	defff904 	addi	sp,sp,-28
   10844:	dfc00615 	stw	ra,24(sp)
   10848:	df000515 	stw	fp,20(sp)
   1084c:	df000504 	addi	fp,sp,20
   10850:	e13ffd15 	stw	r4,-12(fp)
   10854:	e17ffe15 	stw	r5,-8(fp)
   10858:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1085c:	e0bffd17 	ldw	r2,-12(fp)
   10860:	10000816 	blt	r2,zero,10884 <write+0x44>
   10864:	e13ffd17 	ldw	r4,-12(fp)
   10868:	01400304 	movi	r5,12
   1086c:	000d6f80 	call	d6f8 <__mulsi3>
   10870:	1007883a 	mov	r3,r2
   10874:	00800074 	movhi	r2,1
   10878:	108ee404 	addi	r2,r2,15248
   1087c:	1885883a 	add	r2,r3,r2
   10880:	00000106 	br	10888 <write+0x48>
   10884:	0005883a 	mov	r2,zero
   10888:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   1088c:	e0bffb17 	ldw	r2,-20(fp)
   10890:	10002126 	beq	r2,zero,10918 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   10894:	e0bffb17 	ldw	r2,-20(fp)
   10898:	10800217 	ldw	r2,8(r2)
   1089c:	108000cc 	andi	r2,r2,3
   108a0:	10001826 	beq	r2,zero,10904 <write+0xc4>
   108a4:	e0bffb17 	ldw	r2,-20(fp)
   108a8:	10800017 	ldw	r2,0(r2)
   108ac:	10800617 	ldw	r2,24(r2)
   108b0:	10001426 	beq	r2,zero,10904 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   108b4:	e0bffb17 	ldw	r2,-20(fp)
   108b8:	10800017 	ldw	r2,0(r2)
   108bc:	10800617 	ldw	r2,24(r2)
   108c0:	e0ffff17 	ldw	r3,-4(fp)
   108c4:	e13ffb17 	ldw	r4,-20(fp)
   108c8:	e17ffe17 	ldw	r5,-8(fp)
   108cc:	180d883a 	mov	r6,r3
   108d0:	103ee83a 	callr	r2
   108d4:	e0bffc15 	stw	r2,-16(fp)
   108d8:	e0bffc17 	ldw	r2,-16(fp)
   108dc:	1000070e 	bge	r2,zero,108fc <write+0xbc>
      {
        ALT_ERRNO = -rval;
   108e0:	00107f00 	call	107f0 <alt_get_errno>
   108e4:	1007883a 	mov	r3,r2
   108e8:	e0bffc17 	ldw	r2,-16(fp)
   108ec:	0085c83a 	sub	r2,zero,r2
   108f0:	18800015 	stw	r2,0(r3)
        return -1;
   108f4:	00bfffc4 	movi	r2,-1
   108f8:	00000c06 	br	1092c <write+0xec>
      }
      return rval;
   108fc:	e0bffc17 	ldw	r2,-16(fp)
   10900:	00000a06 	br	1092c <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   10904:	00107f00 	call	107f0 <alt_get_errno>
   10908:	1007883a 	mov	r3,r2
   1090c:	00800344 	movi	r2,13
   10910:	18800015 	stw	r2,0(r3)
   10914:	00000406 	br	10928 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   10918:	00107f00 	call	107f0 <alt_get_errno>
   1091c:	1007883a 	mov	r3,r2
   10920:	00801444 	movi	r2,81
   10924:	18800015 	stw	r2,0(r3)
  }
  return -1;
   10928:	00bfffc4 	movi	r2,-1
}
   1092c:	e037883a 	mov	sp,fp
   10930:	dfc00117 	ldw	ra,4(sp)
   10934:	df000017 	ldw	fp,0(sp)
   10938:	dec00204 	addi	sp,sp,8
   1093c:	f800283a 	ret

00010940 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   10940:	defffd04 	addi	sp,sp,-12
   10944:	dfc00215 	stw	ra,8(sp)
   10948:	df000115 	stw	fp,4(sp)
   1094c:	df000104 	addi	fp,sp,4
   10950:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   10954:	e13fff17 	ldw	r4,-4(fp)
   10958:	01400074 	movhi	r5,1
   1095c:	29536404 	addi	r5,r5,19856
   10960:	00117440 	call	11744 <alt_dev_llist_insert>
}
   10964:	e037883a 	mov	sp,fp
   10968:	dfc00117 	ldw	ra,4(sp)
   1096c:	df000017 	ldw	fp,0(sp)
   10970:	dec00204 	addi	sp,sp,8
   10974:	f800283a 	ret

00010978 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   10978:	defffd04 	addi	sp,sp,-12
   1097c:	dfc00215 	stw	ra,8(sp)
   10980:	df000115 	stw	fp,4(sp)
   10984:	df000104 	addi	fp,sp,4
   10988:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
   1098c:	00121240 	call	12124 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   10990:	00800044 	movi	r2,1
   10994:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   10998:	e037883a 	mov	sp,fp
   1099c:	dfc00117 	ldw	ra,4(sp)
   109a0:	df000017 	ldw	fp,0(sp)
   109a4:	dec00204 	addi	sp,sp,8
   109a8:	f800283a 	ret

000109ac <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   109ac:	defffe04 	addi	sp,sp,-8
   109b0:	dfc00115 	stw	ra,4(sp)
   109b4:	df000015 	stw	fp,0(sp)
   109b8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   109bc:	01000074 	movhi	r4,1
   109c0:	210f4e04 	addi	r4,r4,15672
   109c4:	000b883a 	mov	r5,zero
   109c8:	01800144 	movi	r6,5
   109cc:	0010b580 	call	10b58 <altera_avalon_jtag_uart_init>
   109d0:	01000074 	movhi	r4,1
   109d4:	210f4404 	addi	r4,r4,15632
   109d8:	00109400 	call	10940 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
   109dc:	0001883a 	nop
}
   109e0:	e037883a 	mov	sp,fp
   109e4:	dfc00117 	ldw	ra,4(sp)
   109e8:	df000017 	ldw	fp,0(sp)
   109ec:	dec00204 	addi	sp,sp,8
   109f0:	f800283a 	ret

000109f4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   109f4:	defffa04 	addi	sp,sp,-24
   109f8:	dfc00515 	stw	ra,20(sp)
   109fc:	df000415 	stw	fp,16(sp)
   10a00:	df000404 	addi	fp,sp,16
   10a04:	e13ffd15 	stw	r4,-12(fp)
   10a08:	e17ffe15 	stw	r5,-8(fp)
   10a0c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   10a10:	e0bffd17 	ldw	r2,-12(fp)
   10a14:	10800017 	ldw	r2,0(r2)
   10a18:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   10a1c:	e0bffc17 	ldw	r2,-16(fp)
   10a20:	10c00a04 	addi	r3,r2,40
   10a24:	e0bffd17 	ldw	r2,-12(fp)
   10a28:	10800217 	ldw	r2,8(r2)
   10a2c:	1809883a 	mov	r4,r3
   10a30:	e17ffe17 	ldw	r5,-8(fp)
   10a34:	e1bfff17 	ldw	r6,-4(fp)
   10a38:	100f883a 	mov	r7,r2
   10a3c:	001101c0 	call	1101c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   10a40:	e037883a 	mov	sp,fp
   10a44:	dfc00117 	ldw	ra,4(sp)
   10a48:	df000017 	ldw	fp,0(sp)
   10a4c:	dec00204 	addi	sp,sp,8
   10a50:	f800283a 	ret

00010a54 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   10a54:	defffa04 	addi	sp,sp,-24
   10a58:	dfc00515 	stw	ra,20(sp)
   10a5c:	df000415 	stw	fp,16(sp)
   10a60:	df000404 	addi	fp,sp,16
   10a64:	e13ffd15 	stw	r4,-12(fp)
   10a68:	e17ffe15 	stw	r5,-8(fp)
   10a6c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   10a70:	e0bffd17 	ldw	r2,-12(fp)
   10a74:	10800017 	ldw	r2,0(r2)
   10a78:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   10a7c:	e0bffc17 	ldw	r2,-16(fp)
   10a80:	10c00a04 	addi	r3,r2,40
   10a84:	e0bffd17 	ldw	r2,-12(fp)
   10a88:	10800217 	ldw	r2,8(r2)
   10a8c:	1809883a 	mov	r4,r3
   10a90:	e17ffe17 	ldw	r5,-8(fp)
   10a94:	e1bfff17 	ldw	r6,-4(fp)
   10a98:	100f883a 	mov	r7,r2
   10a9c:	00112280 	call	11228 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   10aa0:	e037883a 	mov	sp,fp
   10aa4:	dfc00117 	ldw	ra,4(sp)
   10aa8:	df000017 	ldw	fp,0(sp)
   10aac:	dec00204 	addi	sp,sp,8
   10ab0:	f800283a 	ret

00010ab4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   10ab4:	defffc04 	addi	sp,sp,-16
   10ab8:	dfc00315 	stw	ra,12(sp)
   10abc:	df000215 	stw	fp,8(sp)
   10ac0:	df000204 	addi	fp,sp,8
   10ac4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   10ac8:	e0bfff17 	ldw	r2,-4(fp)
   10acc:	10800017 	ldw	r2,0(r2)
   10ad0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   10ad4:	e0bffe17 	ldw	r2,-8(fp)
   10ad8:	10c00a04 	addi	r3,r2,40
   10adc:	e0bfff17 	ldw	r2,-4(fp)
   10ae0:	10800217 	ldw	r2,8(r2)
   10ae4:	1809883a 	mov	r4,r3
   10ae8:	100b883a 	mov	r5,r2
   10aec:	0010ec80 	call	10ec8 <altera_avalon_jtag_uart_close>
}
   10af0:	e037883a 	mov	sp,fp
   10af4:	dfc00117 	ldw	ra,4(sp)
   10af8:	df000017 	ldw	fp,0(sp)
   10afc:	dec00204 	addi	sp,sp,8
   10b00:	f800283a 	ret

00010b04 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   10b04:	defffa04 	addi	sp,sp,-24
   10b08:	dfc00515 	stw	ra,20(sp)
   10b0c:	df000415 	stw	fp,16(sp)
   10b10:	df000404 	addi	fp,sp,16
   10b14:	e13ffd15 	stw	r4,-12(fp)
   10b18:	e17ffe15 	stw	r5,-8(fp)
   10b1c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   10b20:	e0bffd17 	ldw	r2,-12(fp)
   10b24:	10800017 	ldw	r2,0(r2)
   10b28:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   10b2c:	e0bffc17 	ldw	r2,-16(fp)
   10b30:	10800a04 	addi	r2,r2,40
   10b34:	1009883a 	mov	r4,r2
   10b38:	e17ffe17 	ldw	r5,-8(fp)
   10b3c:	e1bfff17 	ldw	r6,-4(fp)
   10b40:	0010f300 	call	10f30 <altera_avalon_jtag_uart_ioctl>
}
   10b44:	e037883a 	mov	sp,fp
   10b48:	dfc00117 	ldw	ra,4(sp)
   10b4c:	df000017 	ldw	fp,0(sp)
   10b50:	dec00204 	addi	sp,sp,8
   10b54:	f800283a 	ret

00010b58 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   10b58:	defffa04 	addi	sp,sp,-24
   10b5c:	dfc00515 	stw	ra,20(sp)
   10b60:	df000415 	stw	fp,16(sp)
   10b64:	df000404 	addi	fp,sp,16
   10b68:	e13ffd15 	stw	r4,-12(fp)
   10b6c:	e17ffe15 	stw	r5,-8(fp)
   10b70:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   10b74:	e0bffd17 	ldw	r2,-12(fp)
   10b78:	00c00044 	movi	r3,1
   10b7c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   10b80:	e0bffd17 	ldw	r2,-12(fp)
   10b84:	10800017 	ldw	r2,0(r2)
   10b88:	10800104 	addi	r2,r2,4
   10b8c:	1007883a 	mov	r3,r2
   10b90:	e0bffd17 	ldw	r2,-12(fp)
   10b94:	10800817 	ldw	r2,32(r2)
   10b98:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   10b9c:	e0fffe17 	ldw	r3,-8(fp)
   10ba0:	e0bfff17 	ldw	r2,-4(fp)
   10ba4:	d8000015 	stw	zero,0(sp)
   10ba8:	1809883a 	mov	r4,r3
   10bac:	100b883a 	mov	r5,r2
   10bb0:	01800074 	movhi	r6,1
   10bb4:	31830704 	addi	r6,r6,3100
   10bb8:	e1fffd17 	ldw	r7,-12(fp)
   10bbc:	00118bc0 	call	118bc <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   10bc0:	e0bffd17 	ldw	r2,-12(fp)
   10bc4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   10bc8:	e0bffd17 	ldw	r2,-12(fp)
   10bcc:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   10bd0:	00800074 	movhi	r2,1
   10bd4:	109a5504 	addi	r2,r2,26964
   10bd8:	10800017 	ldw	r2,0(r2)
   10bdc:	1809883a 	mov	r4,r3
   10be0:	100b883a 	mov	r5,r2
   10be4:	01800074 	movhi	r6,1
   10be8:	31838804 	addi	r6,r6,3616
   10bec:	e1fffd17 	ldw	r7,-12(fp)
   10bf0:	00114400 	call	11440 <alt_alarm_start>
   10bf4:	1000040e 	bge	r2,zero,10c08 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   10bf8:	e0fffd17 	ldw	r3,-12(fp)
   10bfc:	00a00034 	movhi	r2,32768
   10c00:	10bfffc4 	addi	r2,r2,-1
   10c04:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   10c08:	e037883a 	mov	sp,fp
   10c0c:	dfc00117 	ldw	ra,4(sp)
   10c10:	df000017 	ldw	fp,0(sp)
   10c14:	dec00204 	addi	sp,sp,8
   10c18:	f800283a 	ret

00010c1c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   10c1c:	defff804 	addi	sp,sp,-32
   10c20:	df000715 	stw	fp,28(sp)
   10c24:	df000704 	addi	fp,sp,28
   10c28:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   10c2c:	e0bfff17 	ldw	r2,-4(fp)
   10c30:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   10c34:	e0bffb17 	ldw	r2,-20(fp)
   10c38:	10800017 	ldw	r2,0(r2)
   10c3c:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   10c40:	e0bffc17 	ldw	r2,-16(fp)
   10c44:	10800104 	addi	r2,r2,4
   10c48:	10800037 	ldwio	r2,0(r2)
   10c4c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   10c50:	e0bffd17 	ldw	r2,-12(fp)
   10c54:	1080c00c 	andi	r2,r2,768
   10c58:	1000011e 	bne	r2,zero,10c60 <altera_avalon_jtag_uart_irq+0x44>
      break;
   10c5c:	00006c06 	br	10e10 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   10c60:	e0bffd17 	ldw	r2,-12(fp)
   10c64:	1080400c 	andi	r2,r2,256
   10c68:	10003426 	beq	r2,zero,10d3c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   10c6c:	00800074 	movhi	r2,1
   10c70:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   10c74:	e0bffb17 	ldw	r2,-20(fp)
   10c78:	10800a17 	ldw	r2,40(r2)
   10c7c:	10800044 	addi	r2,r2,1
   10c80:	1081ffcc 	andi	r2,r2,2047
   10c84:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   10c88:	e0bffb17 	ldw	r2,-20(fp)
   10c8c:	10c00b17 	ldw	r3,44(r2)
   10c90:	e0bffe17 	ldw	r2,-8(fp)
   10c94:	1880011e 	bne	r3,r2,10c9c <altera_avalon_jtag_uart_irq+0x80>
          break;
   10c98:	00001606 	br	10cf4 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   10c9c:	e0bffc17 	ldw	r2,-16(fp)
   10ca0:	10800037 	ldwio	r2,0(r2)
   10ca4:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   10ca8:	e0bff917 	ldw	r2,-28(fp)
   10cac:	10a0000c 	andi	r2,r2,32768
   10cb0:	1000011e 	bne	r2,zero,10cb8 <altera_avalon_jtag_uart_irq+0x9c>
          break;
   10cb4:	00000f06 	br	10cf4 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   10cb8:	e0bffb17 	ldw	r2,-20(fp)
   10cbc:	10800a17 	ldw	r2,40(r2)
   10cc0:	e0fff917 	ldw	r3,-28(fp)
   10cc4:	1809883a 	mov	r4,r3
   10cc8:	e0fffb17 	ldw	r3,-20(fp)
   10ccc:	1885883a 	add	r2,r3,r2
   10cd0:	10800e04 	addi	r2,r2,56
   10cd4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   10cd8:	e0bffb17 	ldw	r2,-20(fp)
   10cdc:	10800a17 	ldw	r2,40(r2)
   10ce0:	10800044 	addi	r2,r2,1
   10ce4:	10c1ffcc 	andi	r3,r2,2047
   10ce8:	e0bffb17 	ldw	r2,-20(fp)
   10cec:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   10cf0:	003fe006 	br	10c74 <__alt_data_end+0xfffbb544>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   10cf4:	e0bff917 	ldw	r2,-28(fp)
   10cf8:	10bfffec 	andhi	r2,r2,65535
   10cfc:	10000f26 	beq	r2,zero,10d3c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   10d00:	e0bffb17 	ldw	r2,-20(fp)
   10d04:	10c00817 	ldw	r3,32(r2)
   10d08:	00bfff84 	movi	r2,-2
   10d0c:	1886703a 	and	r3,r3,r2
   10d10:	e0bffb17 	ldw	r2,-20(fp)
   10d14:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   10d18:	e0bffc17 	ldw	r2,-16(fp)
   10d1c:	10800104 	addi	r2,r2,4
   10d20:	1007883a 	mov	r3,r2
   10d24:	e0bffb17 	ldw	r2,-20(fp)
   10d28:	10800817 	ldw	r2,32(r2)
   10d2c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   10d30:	e0bffc17 	ldw	r2,-16(fp)
   10d34:	10800104 	addi	r2,r2,4
   10d38:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   10d3c:	e0bffd17 	ldw	r2,-12(fp)
   10d40:	1080800c 	andi	r2,r2,512
   10d44:	10003126 	beq	r2,zero,10e0c <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   10d48:	e0bffd17 	ldw	r2,-12(fp)
   10d4c:	1004d43a 	srli	r2,r2,16
   10d50:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   10d54:	00001406 	br	10da8 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   10d58:	e0bffc17 	ldw	r2,-16(fp)
   10d5c:	e0fffb17 	ldw	r3,-20(fp)
   10d60:	18c00d17 	ldw	r3,52(r3)
   10d64:	e13ffb17 	ldw	r4,-20(fp)
   10d68:	20c7883a 	add	r3,r4,r3
   10d6c:	18c20e04 	addi	r3,r3,2104
   10d70:	18c00003 	ldbu	r3,0(r3)
   10d74:	18c03fcc 	andi	r3,r3,255
   10d78:	18c0201c 	xori	r3,r3,128
   10d7c:	18ffe004 	addi	r3,r3,-128
   10d80:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   10d84:	e0bffb17 	ldw	r2,-20(fp)
   10d88:	10800d17 	ldw	r2,52(r2)
   10d8c:	10800044 	addi	r2,r2,1
   10d90:	10c1ffcc 	andi	r3,r2,2047
   10d94:	e0bffb17 	ldw	r2,-20(fp)
   10d98:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   10d9c:	e0bffa17 	ldw	r2,-24(fp)
   10da0:	10bfffc4 	addi	r2,r2,-1
   10da4:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   10da8:	e0bffa17 	ldw	r2,-24(fp)
   10dac:	10000526 	beq	r2,zero,10dc4 <altera_avalon_jtag_uart_irq+0x1a8>
   10db0:	e0bffb17 	ldw	r2,-20(fp)
   10db4:	10c00d17 	ldw	r3,52(r2)
   10db8:	e0bffb17 	ldw	r2,-20(fp)
   10dbc:	10800c17 	ldw	r2,48(r2)
   10dc0:	18bfe51e 	bne	r3,r2,10d58 <__alt_data_end+0xfffbb628>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   10dc4:	e0bffa17 	ldw	r2,-24(fp)
   10dc8:	10001026 	beq	r2,zero,10e0c <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   10dcc:	e0bffb17 	ldw	r2,-20(fp)
   10dd0:	10c00817 	ldw	r3,32(r2)
   10dd4:	00bfff44 	movi	r2,-3
   10dd8:	1886703a 	and	r3,r3,r2
   10ddc:	e0bffb17 	ldw	r2,-20(fp)
   10de0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   10de4:	e0bffb17 	ldw	r2,-20(fp)
   10de8:	10800017 	ldw	r2,0(r2)
   10dec:	10800104 	addi	r2,r2,4
   10df0:	1007883a 	mov	r3,r2
   10df4:	e0bffb17 	ldw	r2,-20(fp)
   10df8:	10800817 	ldw	r2,32(r2)
   10dfc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   10e00:	e0bffc17 	ldw	r2,-16(fp)
   10e04:	10800104 	addi	r2,r2,4
   10e08:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   10e0c:	003f8c06 	br	10c40 <__alt_data_end+0xfffbb510>
}
   10e10:	e037883a 	mov	sp,fp
   10e14:	df000017 	ldw	fp,0(sp)
   10e18:	dec00104 	addi	sp,sp,4
   10e1c:	f800283a 	ret

00010e20 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   10e20:	defff804 	addi	sp,sp,-32
   10e24:	df000715 	stw	fp,28(sp)
   10e28:	df000704 	addi	fp,sp,28
   10e2c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   10e30:	e0bffb17 	ldw	r2,-20(fp)
   10e34:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   10e38:	e0bff917 	ldw	r2,-28(fp)
   10e3c:	10800017 	ldw	r2,0(r2)
   10e40:	10800104 	addi	r2,r2,4
   10e44:	10800037 	ldwio	r2,0(r2)
   10e48:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   10e4c:	e0bffa17 	ldw	r2,-24(fp)
   10e50:	1081000c 	andi	r2,r2,1024
   10e54:	10000b26 	beq	r2,zero,10e84 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   10e58:	e0bff917 	ldw	r2,-28(fp)
   10e5c:	10800017 	ldw	r2,0(r2)
   10e60:	10800104 	addi	r2,r2,4
   10e64:	1007883a 	mov	r3,r2
   10e68:	e0bff917 	ldw	r2,-28(fp)
   10e6c:	10800817 	ldw	r2,32(r2)
   10e70:	10810014 	ori	r2,r2,1024
   10e74:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   10e78:	e0bff917 	ldw	r2,-28(fp)
   10e7c:	10000915 	stw	zero,36(r2)
   10e80:	00000a06 	br	10eac <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   10e84:	e0bff917 	ldw	r2,-28(fp)
   10e88:	10c00917 	ldw	r3,36(r2)
   10e8c:	00a00034 	movhi	r2,32768
   10e90:	10bfff04 	addi	r2,r2,-4
   10e94:	10c00536 	bltu	r2,r3,10eac <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   10e98:	e0bff917 	ldw	r2,-28(fp)
   10e9c:	10800917 	ldw	r2,36(r2)
   10ea0:	10c00044 	addi	r3,r2,1
   10ea4:	e0bff917 	ldw	r2,-28(fp)
   10ea8:	10c00915 	stw	r3,36(r2)
   10eac:	00800074 	movhi	r2,1
   10eb0:	109a5504 	addi	r2,r2,26964
   10eb4:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   10eb8:	e037883a 	mov	sp,fp
   10ebc:	df000017 	ldw	fp,0(sp)
   10ec0:	dec00104 	addi	sp,sp,4
   10ec4:	f800283a 	ret

00010ec8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   10ec8:	defffd04 	addi	sp,sp,-12
   10ecc:	df000215 	stw	fp,8(sp)
   10ed0:	df000204 	addi	fp,sp,8
   10ed4:	e13ffe15 	stw	r4,-8(fp)
   10ed8:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   10edc:	00000506 	br	10ef4 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   10ee0:	e0bfff17 	ldw	r2,-4(fp)
   10ee4:	1090000c 	andi	r2,r2,16384
   10ee8:	10000226 	beq	r2,zero,10ef4 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   10eec:	00bffd44 	movi	r2,-11
   10ef0:	00000b06 	br	10f20 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   10ef4:	e0bffe17 	ldw	r2,-8(fp)
   10ef8:	10c00d17 	ldw	r3,52(r2)
   10efc:	e0bffe17 	ldw	r2,-8(fp)
   10f00:	10800c17 	ldw	r2,48(r2)
   10f04:	18800526 	beq	r3,r2,10f1c <altera_avalon_jtag_uart_close+0x54>
   10f08:	e0bffe17 	ldw	r2,-8(fp)
   10f0c:	10c00917 	ldw	r3,36(r2)
   10f10:	e0bffe17 	ldw	r2,-8(fp)
   10f14:	10800117 	ldw	r2,4(r2)
   10f18:	18bff136 	bltu	r3,r2,10ee0 <__alt_data_end+0xfffbb7b0>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   10f1c:	0005883a 	mov	r2,zero
}
   10f20:	e037883a 	mov	sp,fp
   10f24:	df000017 	ldw	fp,0(sp)
   10f28:	dec00104 	addi	sp,sp,4
   10f2c:	f800283a 	ret

00010f30 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   10f30:	defffa04 	addi	sp,sp,-24
   10f34:	df000515 	stw	fp,20(sp)
   10f38:	df000504 	addi	fp,sp,20
   10f3c:	e13ffd15 	stw	r4,-12(fp)
   10f40:	e17ffe15 	stw	r5,-8(fp)
   10f44:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   10f48:	00bff9c4 	movi	r2,-25
   10f4c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   10f50:	e0bffe17 	ldw	r2,-8(fp)
   10f54:	10da8060 	cmpeqi	r3,r2,27137
   10f58:	1800031e 	bne	r3,zero,10f68 <altera_avalon_jtag_uart_ioctl+0x38>
   10f5c:	109a80a0 	cmpeqi	r2,r2,27138
   10f60:	1000191e 	bne	r2,zero,10fc8 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
   10f64:	00002806 	br	11008 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   10f68:	e0bffd17 	ldw	r2,-12(fp)
   10f6c:	10c00117 	ldw	r3,4(r2)
   10f70:	00a00034 	movhi	r2,32768
   10f74:	10bfffc4 	addi	r2,r2,-1
   10f78:	18801226 	beq	r3,r2,10fc4 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
   10f7c:	e0bfff17 	ldw	r2,-4(fp)
   10f80:	10800017 	ldw	r2,0(r2)
   10f84:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   10f88:	e0bffc17 	ldw	r2,-16(fp)
   10f8c:	10800090 	cmplti	r2,r2,2
   10f90:	1000061e 	bne	r2,zero,10fac <altera_avalon_jtag_uart_ioctl+0x7c>
   10f94:	e0fffc17 	ldw	r3,-16(fp)
   10f98:	00a00034 	movhi	r2,32768
   10f9c:	10bfffc4 	addi	r2,r2,-1
   10fa0:	18800226 	beq	r3,r2,10fac <altera_avalon_jtag_uart_ioctl+0x7c>
   10fa4:	e0bffc17 	ldw	r2,-16(fp)
   10fa8:	00000206 	br	10fb4 <altera_avalon_jtag_uart_ioctl+0x84>
   10fac:	00a00034 	movhi	r2,32768
   10fb0:	10bfff84 	addi	r2,r2,-2
   10fb4:	e0fffd17 	ldw	r3,-12(fp)
   10fb8:	18800115 	stw	r2,4(r3)
      rc = 0;
   10fbc:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   10fc0:	00001106 	br	11008 <altera_avalon_jtag_uart_ioctl+0xd8>
   10fc4:	00001006 	br	11008 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   10fc8:	e0bffd17 	ldw	r2,-12(fp)
   10fcc:	10c00117 	ldw	r3,4(r2)
   10fd0:	00a00034 	movhi	r2,32768
   10fd4:	10bfffc4 	addi	r2,r2,-1
   10fd8:	18800a26 	beq	r3,r2,11004 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   10fdc:	e0bffd17 	ldw	r2,-12(fp)
   10fe0:	10c00917 	ldw	r3,36(r2)
   10fe4:	e0bffd17 	ldw	r2,-12(fp)
   10fe8:	10800117 	ldw	r2,4(r2)
   10fec:	1885803a 	cmpltu	r2,r3,r2
   10ff0:	10c03fcc 	andi	r3,r2,255
   10ff4:	e0bfff17 	ldw	r2,-4(fp)
   10ff8:	10c00015 	stw	r3,0(r2)
      rc = 0;
   10ffc:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   11000:	00000006 	br	11004 <altera_avalon_jtag_uart_ioctl+0xd4>
   11004:	0001883a 	nop

  default:
    break;
  }

  return rc;
   11008:	e0bffb17 	ldw	r2,-20(fp)
}
   1100c:	e037883a 	mov	sp,fp
   11010:	df000017 	ldw	fp,0(sp)
   11014:	dec00104 	addi	sp,sp,4
   11018:	f800283a 	ret

0001101c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   1101c:	defff304 	addi	sp,sp,-52
   11020:	dfc00c15 	stw	ra,48(sp)
   11024:	df000b15 	stw	fp,44(sp)
   11028:	df000b04 	addi	fp,sp,44
   1102c:	e13ffc15 	stw	r4,-16(fp)
   11030:	e17ffd15 	stw	r5,-12(fp)
   11034:	e1bffe15 	stw	r6,-8(fp)
   11038:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   1103c:	e0bffd17 	ldw	r2,-12(fp)
   11040:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   11044:	00004906 	br	1116c <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   11048:	e0bffc17 	ldw	r2,-16(fp)
   1104c:	10800a17 	ldw	r2,40(r2)
   11050:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   11054:	e0bffc17 	ldw	r2,-16(fp)
   11058:	10800b17 	ldw	r2,44(r2)
   1105c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   11060:	e0fff717 	ldw	r3,-36(fp)
   11064:	e0bff817 	ldw	r2,-32(fp)
   11068:	18800536 	bltu	r3,r2,11080 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   1106c:	e0fff717 	ldw	r3,-36(fp)
   11070:	e0bff817 	ldw	r2,-32(fp)
   11074:	1885c83a 	sub	r2,r3,r2
   11078:	e0bff615 	stw	r2,-40(fp)
   1107c:	00000406 	br	11090 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   11080:	00c20004 	movi	r3,2048
   11084:	e0bff817 	ldw	r2,-32(fp)
   11088:	1885c83a 	sub	r2,r3,r2
   1108c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   11090:	e0bff617 	ldw	r2,-40(fp)
   11094:	1000011e 	bne	r2,zero,1109c <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
   11098:	00001d06 	br	11110 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
   1109c:	e0fffe17 	ldw	r3,-8(fp)
   110a0:	e0bff617 	ldw	r2,-40(fp)
   110a4:	1880022e 	bgeu	r3,r2,110b0 <altera_avalon_jtag_uart_read+0x94>
        n = space;
   110a8:	e0bffe17 	ldw	r2,-8(fp)
   110ac:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   110b0:	e0bff817 	ldw	r2,-32(fp)
   110b4:	10800e04 	addi	r2,r2,56
   110b8:	e0fffc17 	ldw	r3,-16(fp)
   110bc:	1885883a 	add	r2,r3,r2
   110c0:	e13ff517 	ldw	r4,-44(fp)
   110c4:	100b883a 	mov	r5,r2
   110c8:	e1bff617 	ldw	r6,-40(fp)
   110cc:	0008ef40 	call	8ef4 <memcpy>
      ptr   += n;
   110d0:	e0fff517 	ldw	r3,-44(fp)
   110d4:	e0bff617 	ldw	r2,-40(fp)
   110d8:	1885883a 	add	r2,r3,r2
   110dc:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   110e0:	e0fffe17 	ldw	r3,-8(fp)
   110e4:	e0bff617 	ldw	r2,-40(fp)
   110e8:	1885c83a 	sub	r2,r3,r2
   110ec:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   110f0:	e0fff817 	ldw	r3,-32(fp)
   110f4:	e0bff617 	ldw	r2,-40(fp)
   110f8:	1885883a 	add	r2,r3,r2
   110fc:	10c1ffcc 	andi	r3,r2,2047
   11100:	e0bffc17 	ldw	r2,-16(fp)
   11104:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   11108:	e0bffe17 	ldw	r2,-8(fp)
   1110c:	00bfce16 	blt	zero,r2,11048 <__alt_data_end+0xfffbb918>

    /* If we read any data then return it */
    if (ptr != buffer)
   11110:	e0fff517 	ldw	r3,-44(fp)
   11114:	e0bffd17 	ldw	r2,-12(fp)
   11118:	18800126 	beq	r3,r2,11120 <altera_avalon_jtag_uart_read+0x104>
      break;
   1111c:	00001506 	br	11174 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   11120:	e0bfff17 	ldw	r2,-4(fp)
   11124:	1090000c 	andi	r2,r2,16384
   11128:	10000126 	beq	r2,zero,11130 <altera_avalon_jtag_uart_read+0x114>
      break;
   1112c:	00001106 	br	11174 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   11130:	0001883a 	nop
   11134:	e0bffc17 	ldw	r2,-16(fp)
   11138:	10c00a17 	ldw	r3,40(r2)
   1113c:	e0bff717 	ldw	r2,-36(fp)
   11140:	1880051e 	bne	r3,r2,11158 <altera_avalon_jtag_uart_read+0x13c>
   11144:	e0bffc17 	ldw	r2,-16(fp)
   11148:	10c00917 	ldw	r3,36(r2)
   1114c:	e0bffc17 	ldw	r2,-16(fp)
   11150:	10800117 	ldw	r2,4(r2)
   11154:	18bff736 	bltu	r3,r2,11134 <__alt_data_end+0xfffbba04>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   11158:	e0bffc17 	ldw	r2,-16(fp)
   1115c:	10c00a17 	ldw	r3,40(r2)
   11160:	e0bff717 	ldw	r2,-36(fp)
   11164:	1880011e 	bne	r3,r2,1116c <altera_avalon_jtag_uart_read+0x150>
      break;
   11168:	00000206 	br	11174 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   1116c:	e0bffe17 	ldw	r2,-8(fp)
   11170:	00bfb516 	blt	zero,r2,11048 <__alt_data_end+0xfffbb918>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   11174:	e0fff517 	ldw	r3,-44(fp)
   11178:	e0bffd17 	ldw	r2,-12(fp)
   1117c:	18801826 	beq	r3,r2,111e0 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11180:	0005303a 	rdctl	r2,status
   11184:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11188:	e0fffa17 	ldw	r3,-24(fp)
   1118c:	00bfff84 	movi	r2,-2
   11190:	1884703a 	and	r2,r3,r2
   11194:	1001703a 	wrctl	status,r2
  
  return context;
   11198:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   1119c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   111a0:	e0bffc17 	ldw	r2,-16(fp)
   111a4:	10800817 	ldw	r2,32(r2)
   111a8:	10c00054 	ori	r3,r2,1
   111ac:	e0bffc17 	ldw	r2,-16(fp)
   111b0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   111b4:	e0bffc17 	ldw	r2,-16(fp)
   111b8:	10800017 	ldw	r2,0(r2)
   111bc:	10800104 	addi	r2,r2,4
   111c0:	1007883a 	mov	r3,r2
   111c4:	e0bffc17 	ldw	r2,-16(fp)
   111c8:	10800817 	ldw	r2,32(r2)
   111cc:	18800035 	stwio	r2,0(r3)
   111d0:	e0bff917 	ldw	r2,-28(fp)
   111d4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   111d8:	e0bffb17 	ldw	r2,-20(fp)
   111dc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   111e0:	e0fff517 	ldw	r3,-44(fp)
   111e4:	e0bffd17 	ldw	r2,-12(fp)
   111e8:	18800426 	beq	r3,r2,111fc <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
   111ec:	e0fff517 	ldw	r3,-44(fp)
   111f0:	e0bffd17 	ldw	r2,-12(fp)
   111f4:	1885c83a 	sub	r2,r3,r2
   111f8:	00000606 	br	11214 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
   111fc:	e0bfff17 	ldw	r2,-4(fp)
   11200:	1090000c 	andi	r2,r2,16384
   11204:	10000226 	beq	r2,zero,11210 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
   11208:	00bffd44 	movi	r2,-11
   1120c:	00000106 	br	11214 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
   11210:	00bffec4 	movi	r2,-5
}
   11214:	e037883a 	mov	sp,fp
   11218:	dfc00117 	ldw	ra,4(sp)
   1121c:	df000017 	ldw	fp,0(sp)
   11220:	dec00204 	addi	sp,sp,8
   11224:	f800283a 	ret

00011228 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   11228:	defff304 	addi	sp,sp,-52
   1122c:	dfc00c15 	stw	ra,48(sp)
   11230:	df000b15 	stw	fp,44(sp)
   11234:	df000b04 	addi	fp,sp,44
   11238:	e13ffc15 	stw	r4,-16(fp)
   1123c:	e17ffd15 	stw	r5,-12(fp)
   11240:	e1bffe15 	stw	r6,-8(fp)
   11244:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   11248:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   1124c:	e0bffd17 	ldw	r2,-12(fp)
   11250:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   11254:	00003806 	br	11338 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   11258:	e0bffc17 	ldw	r2,-16(fp)
   1125c:	10800c17 	ldw	r2,48(r2)
   11260:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
   11264:	e0bffc17 	ldw	r2,-16(fp)
   11268:	10800d17 	ldw	r2,52(r2)
   1126c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   11270:	e0fff817 	ldw	r3,-32(fp)
   11274:	e0bff517 	ldw	r2,-44(fp)
   11278:	1880062e 	bgeu	r3,r2,11294 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   1127c:	e0fff517 	ldw	r3,-44(fp)
   11280:	e0bff817 	ldw	r2,-32(fp)
   11284:	1885c83a 	sub	r2,r3,r2
   11288:	10bfffc4 	addi	r2,r2,-1
   1128c:	e0bff615 	stw	r2,-40(fp)
   11290:	00000b06 	br	112c0 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   11294:	e0bff517 	ldw	r2,-44(fp)
   11298:	10000526 	beq	r2,zero,112b0 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   1129c:	00c20004 	movi	r3,2048
   112a0:	e0bff817 	ldw	r2,-32(fp)
   112a4:	1885c83a 	sub	r2,r3,r2
   112a8:	e0bff615 	stw	r2,-40(fp)
   112ac:	00000406 	br	112c0 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   112b0:	00c1ffc4 	movi	r3,2047
   112b4:	e0bff817 	ldw	r2,-32(fp)
   112b8:	1885c83a 	sub	r2,r3,r2
   112bc:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   112c0:	e0bff617 	ldw	r2,-40(fp)
   112c4:	1000011e 	bne	r2,zero,112cc <altera_avalon_jtag_uart_write+0xa4>
        break;
   112c8:	00001d06 	br	11340 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
   112cc:	e0fffe17 	ldw	r3,-8(fp)
   112d0:	e0bff617 	ldw	r2,-40(fp)
   112d4:	1880022e 	bgeu	r3,r2,112e0 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
   112d8:	e0bffe17 	ldw	r2,-8(fp)
   112dc:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   112e0:	e0bff817 	ldw	r2,-32(fp)
   112e4:	10820e04 	addi	r2,r2,2104
   112e8:	e0fffc17 	ldw	r3,-16(fp)
   112ec:	1885883a 	add	r2,r3,r2
   112f0:	1009883a 	mov	r4,r2
   112f4:	e17ffd17 	ldw	r5,-12(fp)
   112f8:	e1bff617 	ldw	r6,-40(fp)
   112fc:	0008ef40 	call	8ef4 <memcpy>
      ptr   += n;
   11300:	e0fffd17 	ldw	r3,-12(fp)
   11304:	e0bff617 	ldw	r2,-40(fp)
   11308:	1885883a 	add	r2,r3,r2
   1130c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   11310:	e0fffe17 	ldw	r3,-8(fp)
   11314:	e0bff617 	ldw	r2,-40(fp)
   11318:	1885c83a 	sub	r2,r3,r2
   1131c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   11320:	e0fff817 	ldw	r3,-32(fp)
   11324:	e0bff617 	ldw	r2,-40(fp)
   11328:	1885883a 	add	r2,r3,r2
   1132c:	10c1ffcc 	andi	r3,r2,2047
   11330:	e0bffc17 	ldw	r2,-16(fp)
   11334:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   11338:	e0bffe17 	ldw	r2,-8(fp)
   1133c:	00bfc616 	blt	zero,r2,11258 <__alt_data_end+0xfffbbb28>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11340:	0005303a 	rdctl	r2,status
   11344:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11348:	e0fffa17 	ldw	r3,-24(fp)
   1134c:	00bfff84 	movi	r2,-2
   11350:	1884703a 	and	r2,r3,r2
   11354:	1001703a 	wrctl	status,r2
  
  return context;
   11358:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   1135c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   11360:	e0bffc17 	ldw	r2,-16(fp)
   11364:	10800817 	ldw	r2,32(r2)
   11368:	10c00094 	ori	r3,r2,2
   1136c:	e0bffc17 	ldw	r2,-16(fp)
   11370:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   11374:	e0bffc17 	ldw	r2,-16(fp)
   11378:	10800017 	ldw	r2,0(r2)
   1137c:	10800104 	addi	r2,r2,4
   11380:	1007883a 	mov	r3,r2
   11384:	e0bffc17 	ldw	r2,-16(fp)
   11388:	10800817 	ldw	r2,32(r2)
   1138c:	18800035 	stwio	r2,0(r3)
   11390:	e0bff917 	ldw	r2,-28(fp)
   11394:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11398:	e0bffb17 	ldw	r2,-20(fp)
   1139c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   113a0:	e0bffe17 	ldw	r2,-8(fp)
   113a4:	0080120e 	bge	zero,r2,113f0 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
   113a8:	e0bfff17 	ldw	r2,-4(fp)
   113ac:	1090000c 	andi	r2,r2,16384
   113b0:	10000126 	beq	r2,zero,113b8 <altera_avalon_jtag_uart_write+0x190>
        break;
   113b4:	00001006 	br	113f8 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   113b8:	0001883a 	nop
   113bc:	e0bffc17 	ldw	r2,-16(fp)
   113c0:	10c00d17 	ldw	r3,52(r2)
   113c4:	e0bff517 	ldw	r2,-44(fp)
   113c8:	1880051e 	bne	r3,r2,113e0 <altera_avalon_jtag_uart_write+0x1b8>
   113cc:	e0bffc17 	ldw	r2,-16(fp)
   113d0:	10c00917 	ldw	r3,36(r2)
   113d4:	e0bffc17 	ldw	r2,-16(fp)
   113d8:	10800117 	ldw	r2,4(r2)
   113dc:	18bff736 	bltu	r3,r2,113bc <__alt_data_end+0xfffbbc8c>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   113e0:	e0bffc17 	ldw	r2,-16(fp)
   113e4:	10800917 	ldw	r2,36(r2)
   113e8:	10000126 	beq	r2,zero,113f0 <altera_avalon_jtag_uart_write+0x1c8>
         break;
   113ec:	00000206 	br	113f8 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
   113f0:	e0bffe17 	ldw	r2,-8(fp)
   113f4:	00bf9716 	blt	zero,r2,11254 <__alt_data_end+0xfffbbb24>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   113f8:	e0fffd17 	ldw	r3,-12(fp)
   113fc:	e0bff717 	ldw	r2,-36(fp)
   11400:	18800426 	beq	r3,r2,11414 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
   11404:	e0fffd17 	ldw	r3,-12(fp)
   11408:	e0bff717 	ldw	r2,-36(fp)
   1140c:	1885c83a 	sub	r2,r3,r2
   11410:	00000606 	br	1142c <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
   11414:	e0bfff17 	ldw	r2,-4(fp)
   11418:	1090000c 	andi	r2,r2,16384
   1141c:	10000226 	beq	r2,zero,11428 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
   11420:	00bffd44 	movi	r2,-11
   11424:	00000106 	br	1142c <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   11428:	00bffec4 	movi	r2,-5
}
   1142c:	e037883a 	mov	sp,fp
   11430:	dfc00117 	ldw	ra,4(sp)
   11434:	df000017 	ldw	fp,0(sp)
   11438:	dec00204 	addi	sp,sp,8
   1143c:	f800283a 	ret

00011440 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   11440:	defff504 	addi	sp,sp,-44
   11444:	df000a15 	stw	fp,40(sp)
   11448:	df000a04 	addi	fp,sp,40
   1144c:	e13ffc15 	stw	r4,-16(fp)
   11450:	e17ffd15 	stw	r5,-12(fp)
   11454:	e1bffe15 	stw	r6,-8(fp)
   11458:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   1145c:	e03ff615 	stw	zero,-40(fp)
   11460:	00800074 	movhi	r2,1
   11464:	109a5504 	addi	r2,r2,26964
   11468:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   1146c:	10003f26 	beq	r2,zero,1156c <alt_alarm_start+0x12c>
  {
    if (alarm)
   11470:	e0bffc17 	ldw	r2,-16(fp)
   11474:	10003b26 	beq	r2,zero,11564 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   11478:	e0bffc17 	ldw	r2,-16(fp)
   1147c:	e0fffe17 	ldw	r3,-8(fp)
   11480:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   11484:	e0bffc17 	ldw	r2,-16(fp)
   11488:	e0ffff17 	ldw	r3,-4(fp)
   1148c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11490:	0005303a 	rdctl	r2,status
   11494:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11498:	e0fff817 	ldw	r3,-32(fp)
   1149c:	00bfff84 	movi	r2,-2
   114a0:	1884703a 	and	r2,r3,r2
   114a4:	1001703a 	wrctl	status,r2
  
  return context;
   114a8:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   114ac:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   114b0:	00800074 	movhi	r2,1
   114b4:	109a5604 	addi	r2,r2,26968
   114b8:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   114bc:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   114c0:	e0fffd17 	ldw	r3,-12(fp)
   114c4:	e0bff617 	ldw	r2,-40(fp)
   114c8:	1885883a 	add	r2,r3,r2
   114cc:	10c00044 	addi	r3,r2,1
   114d0:	e0bffc17 	ldw	r2,-16(fp)
   114d4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   114d8:	e0bffc17 	ldw	r2,-16(fp)
   114dc:	10c00217 	ldw	r3,8(r2)
   114e0:	e0bff617 	ldw	r2,-40(fp)
   114e4:	1880042e 	bgeu	r3,r2,114f8 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   114e8:	e0bffc17 	ldw	r2,-16(fp)
   114ec:	00c00044 	movi	r3,1
   114f0:	10c00405 	stb	r3,16(r2)
   114f4:	00000206 	br	11500 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   114f8:	e0bffc17 	ldw	r2,-16(fp)
   114fc:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   11500:	e0fffc17 	ldw	r3,-16(fp)
   11504:	00800074 	movhi	r2,1
   11508:	10936a04 	addi	r2,r2,19880
   1150c:	e0bff915 	stw	r2,-28(fp)
   11510:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   11514:	e0bffa17 	ldw	r2,-24(fp)
   11518:	e0fff917 	ldw	r3,-28(fp)
   1151c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   11520:	e0bff917 	ldw	r2,-28(fp)
   11524:	10c00017 	ldw	r3,0(r2)
   11528:	e0bffa17 	ldw	r2,-24(fp)
   1152c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   11530:	e0bff917 	ldw	r2,-28(fp)
   11534:	10800017 	ldw	r2,0(r2)
   11538:	e0fffa17 	ldw	r3,-24(fp)
   1153c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   11540:	e0bff917 	ldw	r2,-28(fp)
   11544:	e0fffa17 	ldw	r3,-24(fp)
   11548:	10c00015 	stw	r3,0(r2)
   1154c:	e0bff717 	ldw	r2,-36(fp)
   11550:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11554:	e0bffb17 	ldw	r2,-20(fp)
   11558:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   1155c:	0005883a 	mov	r2,zero
   11560:	00000306 	br	11570 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   11564:	00bffa84 	movi	r2,-22
   11568:	00000106 	br	11570 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   1156c:	00bfde84 	movi	r2,-134
  }
}
   11570:	e037883a 	mov	sp,fp
   11574:	df000017 	ldw	fp,0(sp)
   11578:	dec00104 	addi	sp,sp,4
   1157c:	f800283a 	ret

00011580 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   11580:	defffa04 	addi	sp,sp,-24
   11584:	dfc00515 	stw	ra,20(sp)
   11588:	df000415 	stw	fp,16(sp)
   1158c:	df000404 	addi	fp,sp,16
   11590:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   11594:	00800244 	movi	r2,9
   11598:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   1159c:	e13ffd17 	ldw	r4,-12(fp)
   115a0:	014003f4 	movhi	r5,15
   115a4:	29509004 	addi	r5,r5,16960
   115a8:	000d6f80 	call	d6f8 <__mulsi3>
   115ac:	0100bef4 	movhi	r4,763
   115b0:	213c2004 	addi	r4,r4,-3968
   115b4:	100b883a 	mov	r5,r2
   115b8:	00035240 	call	3524 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   115bc:	01200034 	movhi	r4,32768
   115c0:	213fffc4 	addi	r4,r4,-1
   115c4:	100b883a 	mov	r5,r2
   115c8:	00035240 	call	3524 <__udivsi3>
   115cc:	e13fff17 	ldw	r4,-4(fp)
   115d0:	100b883a 	mov	r5,r2
   115d4:	00035240 	call	3524 <__udivsi3>
   115d8:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   115dc:	e0bffe17 	ldw	r2,-8(fp)
   115e0:	10002a26 	beq	r2,zero,1168c <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   115e4:	e03ffc15 	stw	zero,-16(fp)
   115e8:	00001706 	br	11648 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   115ec:	00a00034 	movhi	r2,32768
   115f0:	10bfffc4 	addi	r2,r2,-1
   115f4:	10bfffc4 	addi	r2,r2,-1
   115f8:	103ffe1e 	bne	r2,zero,115f4 <__alt_data_end+0xfffbbec4>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   115fc:	e13ffd17 	ldw	r4,-12(fp)
   11600:	014003f4 	movhi	r5,15
   11604:	29509004 	addi	r5,r5,16960
   11608:	000d6f80 	call	d6f8 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   1160c:	0100bef4 	movhi	r4,763
   11610:	213c2004 	addi	r4,r4,-3968
   11614:	100b883a 	mov	r5,r2
   11618:	00035240 	call	3524 <__udivsi3>
   1161c:	01200034 	movhi	r4,32768
   11620:	213fffc4 	addi	r4,r4,-1
   11624:	100b883a 	mov	r5,r2
   11628:	00035240 	call	3524 <__udivsi3>
   1162c:	1007883a 	mov	r3,r2
   11630:	e0bfff17 	ldw	r2,-4(fp)
   11634:	10c5c83a 	sub	r2,r2,r3
   11638:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   1163c:	e0bffc17 	ldw	r2,-16(fp)
   11640:	10800044 	addi	r2,r2,1
   11644:	e0bffc15 	stw	r2,-16(fp)
   11648:	e0fffc17 	ldw	r3,-16(fp)
   1164c:	e0bffe17 	ldw	r2,-8(fp)
   11650:	18bfe616 	blt	r3,r2,115ec <__alt_data_end+0xfffbbebc>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   11654:	e13ffd17 	ldw	r4,-12(fp)
   11658:	014003f4 	movhi	r5,15
   1165c:	29509004 	addi	r5,r5,16960
   11660:	000d6f80 	call	d6f8 <__mulsi3>
   11664:	0100bef4 	movhi	r4,763
   11668:	213c2004 	addi	r4,r4,-3968
   1166c:	100b883a 	mov	r5,r2
   11670:	00035240 	call	3524 <__udivsi3>
   11674:	1009883a 	mov	r4,r2
   11678:	e17fff17 	ldw	r5,-4(fp)
   1167c:	000d6f80 	call	d6f8 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   11680:	10bfffc4 	addi	r2,r2,-1
   11684:	103ffe1e 	bne	r2,zero,11680 <__alt_data_end+0xfffbbf50>
   11688:	00000d06 	br	116c0 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   1168c:	e13ffd17 	ldw	r4,-12(fp)
   11690:	014003f4 	movhi	r5,15
   11694:	29509004 	addi	r5,r5,16960
   11698:	000d6f80 	call	d6f8 <__mulsi3>
   1169c:	0100bef4 	movhi	r4,763
   116a0:	213c2004 	addi	r4,r4,-3968
   116a4:	100b883a 	mov	r5,r2
   116a8:	00035240 	call	3524 <__udivsi3>
   116ac:	1009883a 	mov	r4,r2
   116b0:	e17fff17 	ldw	r5,-4(fp)
   116b4:	000d6f80 	call	d6f8 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   116b8:	10bfffc4 	addi	r2,r2,-1
   116bc:	00bffe16 	blt	zero,r2,116b8 <__alt_data_end+0xfffbbf88>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   116c0:	0005883a 	mov	r2,zero
}
   116c4:	e037883a 	mov	sp,fp
   116c8:	dfc00117 	ldw	ra,4(sp)
   116cc:	df000017 	ldw	fp,0(sp)
   116d0:	dec00204 	addi	sp,sp,8
   116d4:	f800283a 	ret

000116d8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   116d8:	deffff04 	addi	sp,sp,-4
   116dc:	df000015 	stw	fp,0(sp)
   116e0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   116e4:	e037883a 	mov	sp,fp
   116e8:	df000017 	ldw	fp,0(sp)
   116ec:	dec00104 	addi	sp,sp,4
   116f0:	f800283a 	ret

000116f4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   116f4:	defffe04 	addi	sp,sp,-8
   116f8:	dfc00115 	stw	ra,4(sp)
   116fc:	df000015 	stw	fp,0(sp)
   11700:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   11704:	00800074 	movhi	r2,1
   11708:	10936704 	addi	r2,r2,19868
   1170c:	10800017 	ldw	r2,0(r2)
   11710:	10000526 	beq	r2,zero,11728 <alt_get_errno+0x34>
   11714:	00800074 	movhi	r2,1
   11718:	10936704 	addi	r2,r2,19868
   1171c:	10800017 	ldw	r2,0(r2)
   11720:	103ee83a 	callr	r2
   11724:	00000206 	br	11730 <alt_get_errno+0x3c>
   11728:	00800074 	movhi	r2,1
   1172c:	109a4d04 	addi	r2,r2,26932
}
   11730:	e037883a 	mov	sp,fp
   11734:	dfc00117 	ldw	ra,4(sp)
   11738:	df000017 	ldw	fp,0(sp)
   1173c:	dec00204 	addi	sp,sp,8
   11740:	f800283a 	ret

00011744 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   11744:	defffa04 	addi	sp,sp,-24
   11748:	dfc00515 	stw	ra,20(sp)
   1174c:	df000415 	stw	fp,16(sp)
   11750:	df000404 	addi	fp,sp,16
   11754:	e13ffe15 	stw	r4,-8(fp)
   11758:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   1175c:	e0bffe17 	ldw	r2,-8(fp)
   11760:	10000326 	beq	r2,zero,11770 <alt_dev_llist_insert+0x2c>
   11764:	e0bffe17 	ldw	r2,-8(fp)
   11768:	10800217 	ldw	r2,8(r2)
   1176c:	1000061e 	bne	r2,zero,11788 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   11770:	00116f40 	call	116f4 <alt_get_errno>
   11774:	1007883a 	mov	r3,r2
   11778:	00800584 	movi	r2,22
   1177c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   11780:	00bffa84 	movi	r2,-22
   11784:	00001306 	br	117d4 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   11788:	e0bffe17 	ldw	r2,-8(fp)
   1178c:	e0ffff17 	ldw	r3,-4(fp)
   11790:	e0fffc15 	stw	r3,-16(fp)
   11794:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   11798:	e0bffd17 	ldw	r2,-12(fp)
   1179c:	e0fffc17 	ldw	r3,-16(fp)
   117a0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   117a4:	e0bffc17 	ldw	r2,-16(fp)
   117a8:	10c00017 	ldw	r3,0(r2)
   117ac:	e0bffd17 	ldw	r2,-12(fp)
   117b0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   117b4:	e0bffc17 	ldw	r2,-16(fp)
   117b8:	10800017 	ldw	r2,0(r2)
   117bc:	e0fffd17 	ldw	r3,-12(fp)
   117c0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   117c4:	e0bffc17 	ldw	r2,-16(fp)
   117c8:	e0fffd17 	ldw	r3,-12(fp)
   117cc:	10c00015 	stw	r3,0(r2)

  return 0;  
   117d0:	0005883a 	mov	r2,zero
}
   117d4:	e037883a 	mov	sp,fp
   117d8:	dfc00117 	ldw	ra,4(sp)
   117dc:	df000017 	ldw	fp,0(sp)
   117e0:	dec00204 	addi	sp,sp,8
   117e4:	f800283a 	ret

000117e8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   117e8:	defffd04 	addi	sp,sp,-12
   117ec:	dfc00215 	stw	ra,8(sp)
   117f0:	df000115 	stw	fp,4(sp)
   117f4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   117f8:	00800074 	movhi	r2,1
   117fc:	1089fe04 	addi	r2,r2,10232
   11800:	e0bfff15 	stw	r2,-4(fp)
   11804:	00000606 	br	11820 <_do_ctors+0x38>
        (*ctor) (); 
   11808:	e0bfff17 	ldw	r2,-4(fp)
   1180c:	10800017 	ldw	r2,0(r2)
   11810:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   11814:	e0bfff17 	ldw	r2,-4(fp)
   11818:	10bfff04 	addi	r2,r2,-4
   1181c:	e0bfff15 	stw	r2,-4(fp)
   11820:	e0ffff17 	ldw	r3,-4(fp)
   11824:	00800074 	movhi	r2,1
   11828:	1089ff04 	addi	r2,r2,10236
   1182c:	18bff62e 	bgeu	r3,r2,11808 <__alt_data_end+0xfffbc0d8>
        (*ctor) (); 
}
   11830:	e037883a 	mov	sp,fp
   11834:	dfc00117 	ldw	ra,4(sp)
   11838:	df000017 	ldw	fp,0(sp)
   1183c:	dec00204 	addi	sp,sp,8
   11840:	f800283a 	ret

00011844 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   11844:	defffd04 	addi	sp,sp,-12
   11848:	dfc00215 	stw	ra,8(sp)
   1184c:	df000115 	stw	fp,4(sp)
   11850:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   11854:	00800074 	movhi	r2,1
   11858:	1089fe04 	addi	r2,r2,10232
   1185c:	e0bfff15 	stw	r2,-4(fp)
   11860:	00000606 	br	1187c <_do_dtors+0x38>
        (*dtor) (); 
   11864:	e0bfff17 	ldw	r2,-4(fp)
   11868:	10800017 	ldw	r2,0(r2)
   1186c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   11870:	e0bfff17 	ldw	r2,-4(fp)
   11874:	10bfff04 	addi	r2,r2,-4
   11878:	e0bfff15 	stw	r2,-4(fp)
   1187c:	e0ffff17 	ldw	r3,-4(fp)
   11880:	00800074 	movhi	r2,1
   11884:	1089ff04 	addi	r2,r2,10236
   11888:	18bff62e 	bgeu	r3,r2,11864 <__alt_data_end+0xfffbc134>
        (*dtor) (); 
}
   1188c:	e037883a 	mov	sp,fp
   11890:	dfc00117 	ldw	ra,4(sp)
   11894:	df000017 	ldw	fp,0(sp)
   11898:	dec00204 	addi	sp,sp,8
   1189c:	f800283a 	ret

000118a0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   118a0:	deffff04 	addi	sp,sp,-4
   118a4:	df000015 	stw	fp,0(sp)
   118a8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   118ac:	e037883a 	mov	sp,fp
   118b0:	df000017 	ldw	fp,0(sp)
   118b4:	dec00104 	addi	sp,sp,4
   118b8:	f800283a 	ret

000118bc <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   118bc:	defff904 	addi	sp,sp,-28
   118c0:	dfc00615 	stw	ra,24(sp)
   118c4:	df000515 	stw	fp,20(sp)
   118c8:	df000504 	addi	fp,sp,20
   118cc:	e13ffc15 	stw	r4,-16(fp)
   118d0:	e17ffd15 	stw	r5,-12(fp)
   118d4:	e1bffe15 	stw	r6,-8(fp)
   118d8:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   118dc:	e0800217 	ldw	r2,8(fp)
   118e0:	d8800015 	stw	r2,0(sp)
   118e4:	e13ffc17 	ldw	r4,-16(fp)
   118e8:	e17ffd17 	ldw	r5,-12(fp)
   118ec:	e1bffe17 	ldw	r6,-8(fp)
   118f0:	e1ffff17 	ldw	r7,-4(fp)
   118f4:	0011a9c0 	call	11a9c <alt_iic_isr_register>
}  
   118f8:	e037883a 	mov	sp,fp
   118fc:	dfc00117 	ldw	ra,4(sp)
   11900:	df000017 	ldw	fp,0(sp)
   11904:	dec00204 	addi	sp,sp,8
   11908:	f800283a 	ret

0001190c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   1190c:	defff904 	addi	sp,sp,-28
   11910:	df000615 	stw	fp,24(sp)
   11914:	df000604 	addi	fp,sp,24
   11918:	e13ffe15 	stw	r4,-8(fp)
   1191c:	e17fff15 	stw	r5,-4(fp)
   11920:	e0bfff17 	ldw	r2,-4(fp)
   11924:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11928:	0005303a 	rdctl	r2,status
   1192c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11930:	e0fffb17 	ldw	r3,-20(fp)
   11934:	00bfff84 	movi	r2,-2
   11938:	1884703a 	and	r2,r3,r2
   1193c:	1001703a 	wrctl	status,r2
  
  return context;
   11940:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   11944:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   11948:	e0bffa17 	ldw	r2,-24(fp)
   1194c:	00c00044 	movi	r3,1
   11950:	1884983a 	sll	r2,r3,r2
   11954:	1007883a 	mov	r3,r2
   11958:	00800074 	movhi	r2,1
   1195c:	109a5404 	addi	r2,r2,26960
   11960:	10800017 	ldw	r2,0(r2)
   11964:	1886b03a 	or	r3,r3,r2
   11968:	00800074 	movhi	r2,1
   1196c:	109a5404 	addi	r2,r2,26960
   11970:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   11974:	00800074 	movhi	r2,1
   11978:	109a5404 	addi	r2,r2,26960
   1197c:	10800017 	ldw	r2,0(r2)
   11980:	100170fa 	wrctl	ienable,r2
   11984:	e0bffc17 	ldw	r2,-16(fp)
   11988:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1198c:	e0bffd17 	ldw	r2,-12(fp)
   11990:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   11994:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   11998:	0001883a 	nop
}
   1199c:	e037883a 	mov	sp,fp
   119a0:	df000017 	ldw	fp,0(sp)
   119a4:	dec00104 	addi	sp,sp,4
   119a8:	f800283a 	ret

000119ac <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   119ac:	defff904 	addi	sp,sp,-28
   119b0:	df000615 	stw	fp,24(sp)
   119b4:	df000604 	addi	fp,sp,24
   119b8:	e13ffe15 	stw	r4,-8(fp)
   119bc:	e17fff15 	stw	r5,-4(fp)
   119c0:	e0bfff17 	ldw	r2,-4(fp)
   119c4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   119c8:	0005303a 	rdctl	r2,status
   119cc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   119d0:	e0fffb17 	ldw	r3,-20(fp)
   119d4:	00bfff84 	movi	r2,-2
   119d8:	1884703a 	and	r2,r3,r2
   119dc:	1001703a 	wrctl	status,r2
  
  return context;
   119e0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   119e4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   119e8:	e0bffa17 	ldw	r2,-24(fp)
   119ec:	00c00044 	movi	r3,1
   119f0:	1884983a 	sll	r2,r3,r2
   119f4:	0084303a 	nor	r2,zero,r2
   119f8:	1007883a 	mov	r3,r2
   119fc:	00800074 	movhi	r2,1
   11a00:	109a5404 	addi	r2,r2,26960
   11a04:	10800017 	ldw	r2,0(r2)
   11a08:	1886703a 	and	r3,r3,r2
   11a0c:	00800074 	movhi	r2,1
   11a10:	109a5404 	addi	r2,r2,26960
   11a14:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   11a18:	00800074 	movhi	r2,1
   11a1c:	109a5404 	addi	r2,r2,26960
   11a20:	10800017 	ldw	r2,0(r2)
   11a24:	100170fa 	wrctl	ienable,r2
   11a28:	e0bffc17 	ldw	r2,-16(fp)
   11a2c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11a30:	e0bffd17 	ldw	r2,-12(fp)
   11a34:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   11a38:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   11a3c:	0001883a 	nop
}
   11a40:	e037883a 	mov	sp,fp
   11a44:	df000017 	ldw	fp,0(sp)
   11a48:	dec00104 	addi	sp,sp,4
   11a4c:	f800283a 	ret

00011a50 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   11a50:	defffc04 	addi	sp,sp,-16
   11a54:	df000315 	stw	fp,12(sp)
   11a58:	df000304 	addi	fp,sp,12
   11a5c:	e13ffe15 	stw	r4,-8(fp)
   11a60:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   11a64:	000530fa 	rdctl	r2,ienable
   11a68:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   11a6c:	e0bfff17 	ldw	r2,-4(fp)
   11a70:	00c00044 	movi	r3,1
   11a74:	1884983a 	sll	r2,r3,r2
   11a78:	1007883a 	mov	r3,r2
   11a7c:	e0bffd17 	ldw	r2,-12(fp)
   11a80:	1884703a 	and	r2,r3,r2
   11a84:	1004c03a 	cmpne	r2,r2,zero
   11a88:	10803fcc 	andi	r2,r2,255
}
   11a8c:	e037883a 	mov	sp,fp
   11a90:	df000017 	ldw	fp,0(sp)
   11a94:	dec00104 	addi	sp,sp,4
   11a98:	f800283a 	ret

00011a9c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   11a9c:	defff504 	addi	sp,sp,-44
   11aa0:	dfc00a15 	stw	ra,40(sp)
   11aa4:	df000915 	stw	fp,36(sp)
   11aa8:	df000904 	addi	fp,sp,36
   11aac:	e13ffc15 	stw	r4,-16(fp)
   11ab0:	e17ffd15 	stw	r5,-12(fp)
   11ab4:	e1bffe15 	stw	r6,-8(fp)
   11ab8:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   11abc:	00bffa84 	movi	r2,-22
   11ac0:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   11ac4:	e0bffd17 	ldw	r2,-12(fp)
   11ac8:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   11acc:	e0bff817 	ldw	r2,-32(fp)
   11ad0:	10800808 	cmpgei	r2,r2,32
   11ad4:	1000271e 	bne	r2,zero,11b74 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11ad8:	0005303a 	rdctl	r2,status
   11adc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11ae0:	e0fffa17 	ldw	r3,-24(fp)
   11ae4:	00bfff84 	movi	r2,-2
   11ae8:	1884703a 	and	r2,r3,r2
   11aec:	1001703a 	wrctl	status,r2
  
  return context;
   11af0:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   11af4:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   11af8:	00800074 	movhi	r2,1
   11afc:	109a6204 	addi	r2,r2,27016
   11b00:	e0fff817 	ldw	r3,-32(fp)
   11b04:	180690fa 	slli	r3,r3,3
   11b08:	10c5883a 	add	r2,r2,r3
   11b0c:	e0fffe17 	ldw	r3,-8(fp)
   11b10:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   11b14:	00800074 	movhi	r2,1
   11b18:	109a6204 	addi	r2,r2,27016
   11b1c:	e0fff817 	ldw	r3,-32(fp)
   11b20:	180690fa 	slli	r3,r3,3
   11b24:	10c5883a 	add	r2,r2,r3
   11b28:	10800104 	addi	r2,r2,4
   11b2c:	e0ffff17 	ldw	r3,-4(fp)
   11b30:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   11b34:	e0bffe17 	ldw	r2,-8(fp)
   11b38:	10000526 	beq	r2,zero,11b50 <alt_iic_isr_register+0xb4>
   11b3c:	e0bff817 	ldw	r2,-32(fp)
   11b40:	e13ffc17 	ldw	r4,-16(fp)
   11b44:	100b883a 	mov	r5,r2
   11b48:	001190c0 	call	1190c <alt_ic_irq_enable>
   11b4c:	00000406 	br	11b60 <alt_iic_isr_register+0xc4>
   11b50:	e0bff817 	ldw	r2,-32(fp)
   11b54:	e13ffc17 	ldw	r4,-16(fp)
   11b58:	100b883a 	mov	r5,r2
   11b5c:	00119ac0 	call	119ac <alt_ic_irq_disable>
   11b60:	e0bff715 	stw	r2,-36(fp)
   11b64:	e0bff917 	ldw	r2,-28(fp)
   11b68:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11b6c:	e0bffb17 	ldw	r2,-20(fp)
   11b70:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   11b74:	e0bff717 	ldw	r2,-36(fp)
}
   11b78:	e037883a 	mov	sp,fp
   11b7c:	dfc00117 	ldw	ra,4(sp)
   11b80:	df000017 	ldw	fp,0(sp)
   11b84:	dec00204 	addi	sp,sp,8
   11b88:	f800283a 	ret

00011b8c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   11b8c:	defff804 	addi	sp,sp,-32
   11b90:	dfc00715 	stw	ra,28(sp)
   11b94:	df000615 	stw	fp,24(sp)
   11b98:	dc000515 	stw	r16,20(sp)
   11b9c:	df000604 	addi	fp,sp,24
   11ba0:	e13ffb15 	stw	r4,-20(fp)
   11ba4:	e17ffc15 	stw	r5,-16(fp)
   11ba8:	e1bffd15 	stw	r6,-12(fp)
   11bac:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   11bb0:	e13ffc17 	ldw	r4,-16(fp)
   11bb4:	e17ffd17 	ldw	r5,-12(fp)
   11bb8:	e1bffe17 	ldw	r6,-8(fp)
   11bbc:	0011e280 	call	11e28 <open>
   11bc0:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   11bc4:	e0bffa17 	ldw	r2,-24(fp)
   11bc8:	10002216 	blt	r2,zero,11c54 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   11bcc:	04000074 	movhi	r16,1
   11bd0:	840ee404 	addi	r16,r16,15248
   11bd4:	e0bffa17 	ldw	r2,-24(fp)
   11bd8:	1009883a 	mov	r4,r2
   11bdc:	01400304 	movi	r5,12
   11be0:	000d6f80 	call	d6f8 <__mulsi3>
   11be4:	8085883a 	add	r2,r16,r2
   11be8:	10c00017 	ldw	r3,0(r2)
   11bec:	e0bffb17 	ldw	r2,-20(fp)
   11bf0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   11bf4:	04000074 	movhi	r16,1
   11bf8:	840ee404 	addi	r16,r16,15248
   11bfc:	e0bffa17 	ldw	r2,-24(fp)
   11c00:	1009883a 	mov	r4,r2
   11c04:	01400304 	movi	r5,12
   11c08:	000d6f80 	call	d6f8 <__mulsi3>
   11c0c:	8085883a 	add	r2,r16,r2
   11c10:	10800104 	addi	r2,r2,4
   11c14:	10c00017 	ldw	r3,0(r2)
   11c18:	e0bffb17 	ldw	r2,-20(fp)
   11c1c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   11c20:	04000074 	movhi	r16,1
   11c24:	840ee404 	addi	r16,r16,15248
   11c28:	e0bffa17 	ldw	r2,-24(fp)
   11c2c:	1009883a 	mov	r4,r2
   11c30:	01400304 	movi	r5,12
   11c34:	000d6f80 	call	d6f8 <__mulsi3>
   11c38:	8085883a 	add	r2,r16,r2
   11c3c:	10800204 	addi	r2,r2,8
   11c40:	10c00017 	ldw	r3,0(r2)
   11c44:	e0bffb17 	ldw	r2,-20(fp)
   11c48:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   11c4c:	e13ffa17 	ldw	r4,-24(fp)
   11c50:	00106900 	call	10690 <alt_release_fd>
  }
} 
   11c54:	e6ffff04 	addi	sp,fp,-4
   11c58:	dfc00217 	ldw	ra,8(sp)
   11c5c:	df000117 	ldw	fp,4(sp)
   11c60:	dc000017 	ldw	r16,0(sp)
   11c64:	dec00304 	addi	sp,sp,12
   11c68:	f800283a 	ret

00011c6c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   11c6c:	defffb04 	addi	sp,sp,-20
   11c70:	dfc00415 	stw	ra,16(sp)
   11c74:	df000315 	stw	fp,12(sp)
   11c78:	df000304 	addi	fp,sp,12
   11c7c:	e13ffd15 	stw	r4,-12(fp)
   11c80:	e17ffe15 	stw	r5,-8(fp)
   11c84:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   11c88:	01000074 	movhi	r4,1
   11c8c:	210ee704 	addi	r4,r4,15260
   11c90:	e17ffd17 	ldw	r5,-12(fp)
   11c94:	01800044 	movi	r6,1
   11c98:	01c07fc4 	movi	r7,511
   11c9c:	0011b8c0 	call	11b8c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   11ca0:	01000074 	movhi	r4,1
   11ca4:	210ee404 	addi	r4,r4,15248
   11ca8:	e17ffe17 	ldw	r5,-8(fp)
   11cac:	000d883a 	mov	r6,zero
   11cb0:	01c07fc4 	movi	r7,511
   11cb4:	0011b8c0 	call	11b8c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   11cb8:	01000074 	movhi	r4,1
   11cbc:	210eea04 	addi	r4,r4,15272
   11cc0:	e17fff17 	ldw	r5,-4(fp)
   11cc4:	01800044 	movi	r6,1
   11cc8:	01c07fc4 	movi	r7,511
   11ccc:	0011b8c0 	call	11b8c <alt_open_fd>
}  
   11cd0:	e037883a 	mov	sp,fp
   11cd4:	dfc00117 	ldw	ra,4(sp)
   11cd8:	df000017 	ldw	fp,0(sp)
   11cdc:	dec00204 	addi	sp,sp,8
   11ce0:	f800283a 	ret

00011ce4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11ce4:	defffe04 	addi	sp,sp,-8
   11ce8:	dfc00115 	stw	ra,4(sp)
   11cec:	df000015 	stw	fp,0(sp)
   11cf0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   11cf4:	00800074 	movhi	r2,1
   11cf8:	10936704 	addi	r2,r2,19868
   11cfc:	10800017 	ldw	r2,0(r2)
   11d00:	10000526 	beq	r2,zero,11d18 <alt_get_errno+0x34>
   11d04:	00800074 	movhi	r2,1
   11d08:	10936704 	addi	r2,r2,19868
   11d0c:	10800017 	ldw	r2,0(r2)
   11d10:	103ee83a 	callr	r2
   11d14:	00000206 	br	11d20 <alt_get_errno+0x3c>
   11d18:	00800074 	movhi	r2,1
   11d1c:	109a4d04 	addi	r2,r2,26932
}
   11d20:	e037883a 	mov	sp,fp
   11d24:	dfc00117 	ldw	ra,4(sp)
   11d28:	df000017 	ldw	fp,0(sp)
   11d2c:	dec00204 	addi	sp,sp,8
   11d30:	f800283a 	ret

00011d34 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   11d34:	defffb04 	addi	sp,sp,-20
   11d38:	dfc00415 	stw	ra,16(sp)
   11d3c:	df000315 	stw	fp,12(sp)
   11d40:	dc000215 	stw	r16,8(sp)
   11d44:	df000304 	addi	fp,sp,12
   11d48:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   11d4c:	e0bffe17 	ldw	r2,-8(fp)
   11d50:	10800217 	ldw	r2,8(r2)
   11d54:	10d00034 	orhi	r3,r2,16384
   11d58:	e0bffe17 	ldw	r2,-8(fp)
   11d5c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   11d60:	e03ffd15 	stw	zero,-12(fp)
   11d64:	00002306 	br	11df4 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   11d68:	04000074 	movhi	r16,1
   11d6c:	840ee404 	addi	r16,r16,15248
   11d70:	e0bffd17 	ldw	r2,-12(fp)
   11d74:	1009883a 	mov	r4,r2
   11d78:	01400304 	movi	r5,12
   11d7c:	000d6f80 	call	d6f8 <__mulsi3>
   11d80:	8085883a 	add	r2,r16,r2
   11d84:	10c00017 	ldw	r3,0(r2)
   11d88:	e0bffe17 	ldw	r2,-8(fp)
   11d8c:	10800017 	ldw	r2,0(r2)
   11d90:	1880151e 	bne	r3,r2,11de8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   11d94:	04000074 	movhi	r16,1
   11d98:	840ee404 	addi	r16,r16,15248
   11d9c:	e0bffd17 	ldw	r2,-12(fp)
   11da0:	1009883a 	mov	r4,r2
   11da4:	01400304 	movi	r5,12
   11da8:	000d6f80 	call	d6f8 <__mulsi3>
   11dac:	8085883a 	add	r2,r16,r2
   11db0:	10800204 	addi	r2,r2,8
   11db4:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   11db8:	10000b0e 	bge	r2,zero,11de8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   11dbc:	e13ffd17 	ldw	r4,-12(fp)
   11dc0:	01400304 	movi	r5,12
   11dc4:	000d6f80 	call	d6f8 <__mulsi3>
   11dc8:	1007883a 	mov	r3,r2
   11dcc:	00800074 	movhi	r2,1
   11dd0:	108ee404 	addi	r2,r2,15248
   11dd4:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   11dd8:	e0bffe17 	ldw	r2,-8(fp)
   11ddc:	18800226 	beq	r3,r2,11de8 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   11de0:	00bffcc4 	movi	r2,-13
   11de4:	00000a06 	br	11e10 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   11de8:	e0bffd17 	ldw	r2,-12(fp)
   11dec:	10800044 	addi	r2,r2,1
   11df0:	e0bffd15 	stw	r2,-12(fp)
   11df4:	00800074 	movhi	r2,1
   11df8:	10936604 	addi	r2,r2,19864
   11dfc:	10800017 	ldw	r2,0(r2)
   11e00:	1007883a 	mov	r3,r2
   11e04:	e0bffd17 	ldw	r2,-12(fp)
   11e08:	18bfd72e 	bgeu	r3,r2,11d68 <__alt_data_end+0xfffbc638>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   11e0c:	0005883a 	mov	r2,zero
}
   11e10:	e6ffff04 	addi	sp,fp,-4
   11e14:	dfc00217 	ldw	ra,8(sp)
   11e18:	df000117 	ldw	fp,4(sp)
   11e1c:	dc000017 	ldw	r16,0(sp)
   11e20:	dec00304 	addi	sp,sp,12
   11e24:	f800283a 	ret

00011e28 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   11e28:	defff604 	addi	sp,sp,-40
   11e2c:	dfc00915 	stw	ra,36(sp)
   11e30:	df000815 	stw	fp,32(sp)
   11e34:	df000804 	addi	fp,sp,32
   11e38:	e13ffd15 	stw	r4,-12(fp)
   11e3c:	e17ffe15 	stw	r5,-8(fp)
   11e40:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   11e44:	00bfffc4 	movi	r2,-1
   11e48:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   11e4c:	00bffb44 	movi	r2,-19
   11e50:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   11e54:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   11e58:	e13ffd17 	ldw	r4,-12(fp)
   11e5c:	01400074 	movhi	r5,1
   11e60:	29536404 	addi	r5,r5,19856
   11e64:	00121440 	call	12144 <alt_find_dev>
   11e68:	e0bff815 	stw	r2,-32(fp)
   11e6c:	e0bff817 	ldw	r2,-32(fp)
   11e70:	1000051e 	bne	r2,zero,11e88 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   11e74:	e13ffd17 	ldw	r4,-12(fp)
   11e78:	00121d40 	call	121d4 <alt_find_file>
   11e7c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   11e80:	00800044 	movi	r2,1
   11e84:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   11e88:	e0bff817 	ldw	r2,-32(fp)
   11e8c:	10002b26 	beq	r2,zero,11f3c <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
   11e90:	e13ff817 	ldw	r4,-32(fp)
   11e94:	00122e80 	call	122e8 <alt_get_fd>
   11e98:	e0bff915 	stw	r2,-28(fp)
   11e9c:	e0bff917 	ldw	r2,-28(fp)
   11ea0:	1000030e 	bge	r2,zero,11eb0 <open+0x88>
    {
      status = index;
   11ea4:	e0bff917 	ldw	r2,-28(fp)
   11ea8:	e0bffa15 	stw	r2,-24(fp)
   11eac:	00002506 	br	11f44 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
   11eb0:	e13ff917 	ldw	r4,-28(fp)
   11eb4:	01400304 	movi	r5,12
   11eb8:	000d6f80 	call	d6f8 <__mulsi3>
   11ebc:	1007883a 	mov	r3,r2
   11ec0:	00800074 	movhi	r2,1
   11ec4:	108ee404 	addi	r2,r2,15248
   11ec8:	1885883a 	add	r2,r3,r2
   11ecc:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   11ed0:	e0fffe17 	ldw	r3,-8(fp)
   11ed4:	00900034 	movhi	r2,16384
   11ed8:	10bfffc4 	addi	r2,r2,-1
   11edc:	1886703a 	and	r3,r3,r2
   11ee0:	e0bffc17 	ldw	r2,-16(fp)
   11ee4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   11ee8:	e0bffb17 	ldw	r2,-20(fp)
   11eec:	1000051e 	bne	r2,zero,11f04 <open+0xdc>
   11ef0:	e13ffc17 	ldw	r4,-16(fp)
   11ef4:	0011d340 	call	11d34 <alt_file_locked>
   11ef8:	e0bffa15 	stw	r2,-24(fp)
   11efc:	e0bffa17 	ldw	r2,-24(fp)
   11f00:	10001016 	blt	r2,zero,11f44 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   11f04:	e0bff817 	ldw	r2,-32(fp)
   11f08:	10800317 	ldw	r2,12(r2)
   11f0c:	10000826 	beq	r2,zero,11f30 <open+0x108>
   11f10:	e0bff817 	ldw	r2,-32(fp)
   11f14:	10800317 	ldw	r2,12(r2)
   11f18:	e13ffc17 	ldw	r4,-16(fp)
   11f1c:	e17ffd17 	ldw	r5,-12(fp)
   11f20:	e1bffe17 	ldw	r6,-8(fp)
   11f24:	e1ffff17 	ldw	r7,-4(fp)
   11f28:	103ee83a 	callr	r2
   11f2c:	00000106 	br	11f34 <open+0x10c>
   11f30:	0005883a 	mov	r2,zero
   11f34:	e0bffa15 	stw	r2,-24(fp)
   11f38:	00000206 	br	11f44 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   11f3c:	00bffb44 	movi	r2,-19
   11f40:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   11f44:	e0bffa17 	ldw	r2,-24(fp)
   11f48:	1000090e 	bge	r2,zero,11f70 <open+0x148>
  {
    alt_release_fd (index);  
   11f4c:	e13ff917 	ldw	r4,-28(fp)
   11f50:	00106900 	call	10690 <alt_release_fd>
    ALT_ERRNO = -status;
   11f54:	0011ce40 	call	11ce4 <alt_get_errno>
   11f58:	1007883a 	mov	r3,r2
   11f5c:	e0bffa17 	ldw	r2,-24(fp)
   11f60:	0085c83a 	sub	r2,zero,r2
   11f64:	18800015 	stw	r2,0(r3)
    return -1;
   11f68:	00bfffc4 	movi	r2,-1
   11f6c:	00000106 	br	11f74 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
   11f70:	e0bff917 	ldw	r2,-28(fp)
}
   11f74:	e037883a 	mov	sp,fp
   11f78:	dfc00117 	ldw	ra,4(sp)
   11f7c:	df000017 	ldw	fp,0(sp)
   11f80:	dec00204 	addi	sp,sp,8
   11f84:	f800283a 	ret

00011f88 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   11f88:	defffa04 	addi	sp,sp,-24
   11f8c:	df000515 	stw	fp,20(sp)
   11f90:	df000504 	addi	fp,sp,20
   11f94:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11f98:	0005303a 	rdctl	r2,status
   11f9c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11fa0:	e0fffc17 	ldw	r3,-16(fp)
   11fa4:	00bfff84 	movi	r2,-2
   11fa8:	1884703a 	and	r2,r3,r2
   11fac:	1001703a 	wrctl	status,r2
  
  return context;
   11fb0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   11fb4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   11fb8:	e0bfff17 	ldw	r2,-4(fp)
   11fbc:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   11fc0:	e0bffd17 	ldw	r2,-12(fp)
   11fc4:	10800017 	ldw	r2,0(r2)
   11fc8:	e0fffd17 	ldw	r3,-12(fp)
   11fcc:	18c00117 	ldw	r3,4(r3)
   11fd0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   11fd4:	e0bffd17 	ldw	r2,-12(fp)
   11fd8:	10800117 	ldw	r2,4(r2)
   11fdc:	e0fffd17 	ldw	r3,-12(fp)
   11fe0:	18c00017 	ldw	r3,0(r3)
   11fe4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   11fe8:	e0bffd17 	ldw	r2,-12(fp)
   11fec:	e0fffd17 	ldw	r3,-12(fp)
   11ff0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   11ff4:	e0bffd17 	ldw	r2,-12(fp)
   11ff8:	e0fffd17 	ldw	r3,-12(fp)
   11ffc:	10c00015 	stw	r3,0(r2)
   12000:	e0bffb17 	ldw	r2,-20(fp)
   12004:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12008:	e0bffe17 	ldw	r2,-8(fp)
   1200c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   12010:	e037883a 	mov	sp,fp
   12014:	df000017 	ldw	fp,0(sp)
   12018:	dec00104 	addi	sp,sp,4
   1201c:	f800283a 	ret

00012020 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   12020:	defffb04 	addi	sp,sp,-20
   12024:	dfc00415 	stw	ra,16(sp)
   12028:	df000315 	stw	fp,12(sp)
   1202c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   12030:	d0a00e17 	ldw	r2,-32712(gp)
   12034:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   12038:	d0a6fa17 	ldw	r2,-25624(gp)
   1203c:	10800044 	addi	r2,r2,1
   12040:	d0a6fa15 	stw	r2,-25624(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   12044:	00002e06 	br	12100 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   12048:	e0bffd17 	ldw	r2,-12(fp)
   1204c:	10800017 	ldw	r2,0(r2)
   12050:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   12054:	e0bffd17 	ldw	r2,-12(fp)
   12058:	10800403 	ldbu	r2,16(r2)
   1205c:	10803fcc 	andi	r2,r2,255
   12060:	10000426 	beq	r2,zero,12074 <alt_tick+0x54>
   12064:	d0a6fa17 	ldw	r2,-25624(gp)
   12068:	1000021e 	bne	r2,zero,12074 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   1206c:	e0bffd17 	ldw	r2,-12(fp)
   12070:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   12074:	e0bffd17 	ldw	r2,-12(fp)
   12078:	10800217 	ldw	r2,8(r2)
   1207c:	d0e6fa17 	ldw	r3,-25624(gp)
   12080:	18801d36 	bltu	r3,r2,120f8 <alt_tick+0xd8>
   12084:	e0bffd17 	ldw	r2,-12(fp)
   12088:	10800403 	ldbu	r2,16(r2)
   1208c:	10803fcc 	andi	r2,r2,255
   12090:	1000191e 	bne	r2,zero,120f8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   12094:	e0bffd17 	ldw	r2,-12(fp)
   12098:	10800317 	ldw	r2,12(r2)
   1209c:	e0fffd17 	ldw	r3,-12(fp)
   120a0:	18c00517 	ldw	r3,20(r3)
   120a4:	1809883a 	mov	r4,r3
   120a8:	103ee83a 	callr	r2
   120ac:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   120b0:	e0bfff17 	ldw	r2,-4(fp)
   120b4:	1000031e 	bne	r2,zero,120c4 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   120b8:	e13ffd17 	ldw	r4,-12(fp)
   120bc:	0011f880 	call	11f88 <alt_alarm_stop>
   120c0:	00000d06 	br	120f8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   120c4:	e0bffd17 	ldw	r2,-12(fp)
   120c8:	10c00217 	ldw	r3,8(r2)
   120cc:	e0bfff17 	ldw	r2,-4(fp)
   120d0:	1887883a 	add	r3,r3,r2
   120d4:	e0bffd17 	ldw	r2,-12(fp)
   120d8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   120dc:	e0bffd17 	ldw	r2,-12(fp)
   120e0:	10c00217 	ldw	r3,8(r2)
   120e4:	d0a6fa17 	ldw	r2,-25624(gp)
   120e8:	1880032e 	bgeu	r3,r2,120f8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   120ec:	e0bffd17 	ldw	r2,-12(fp)
   120f0:	00c00044 	movi	r3,1
   120f4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   120f8:	e0bffe17 	ldw	r2,-8(fp)
   120fc:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   12100:	e0fffd17 	ldw	r3,-12(fp)
   12104:	d0a00e04 	addi	r2,gp,-32712
   12108:	18bfcf1e 	bne	r3,r2,12048 <__alt_data_end+0xfffbc918>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   1210c:	0001883a 	nop
}
   12110:	e037883a 	mov	sp,fp
   12114:	dfc00117 	ldw	ra,4(sp)
   12118:	df000017 	ldw	fp,0(sp)
   1211c:	dec00204 	addi	sp,sp,8
   12120:	f800283a 	ret

00012124 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   12124:	deffff04 	addi	sp,sp,-4
   12128:	df000015 	stw	fp,0(sp)
   1212c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   12130:	000170fa 	wrctl	ienable,zero
}
   12134:	e037883a 	mov	sp,fp
   12138:	df000017 	ldw	fp,0(sp)
   1213c:	dec00104 	addi	sp,sp,4
   12140:	f800283a 	ret

00012144 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   12144:	defffa04 	addi	sp,sp,-24
   12148:	dfc00515 	stw	ra,20(sp)
   1214c:	df000415 	stw	fp,16(sp)
   12150:	df000404 	addi	fp,sp,16
   12154:	e13ffe15 	stw	r4,-8(fp)
   12158:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   1215c:	e0bfff17 	ldw	r2,-4(fp)
   12160:	10800017 	ldw	r2,0(r2)
   12164:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   12168:	e13ffe17 	ldw	r4,-8(fp)
   1216c:	0003f080 	call	3f08 <strlen>
   12170:	10800044 	addi	r2,r2,1
   12174:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   12178:	00000d06 	br	121b0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   1217c:	e0bffc17 	ldw	r2,-16(fp)
   12180:	10c00217 	ldw	r3,8(r2)
   12184:	e0bffd17 	ldw	r2,-12(fp)
   12188:	1809883a 	mov	r4,r3
   1218c:	e17ffe17 	ldw	r5,-8(fp)
   12190:	100d883a 	mov	r6,r2
   12194:	00124a40 	call	124a4 <memcmp>
   12198:	1000021e 	bne	r2,zero,121a4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   1219c:	e0bffc17 	ldw	r2,-16(fp)
   121a0:	00000706 	br	121c0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   121a4:	e0bffc17 	ldw	r2,-16(fp)
   121a8:	10800017 	ldw	r2,0(r2)
   121ac:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   121b0:	e0fffc17 	ldw	r3,-16(fp)
   121b4:	e0bfff17 	ldw	r2,-4(fp)
   121b8:	18bff01e 	bne	r3,r2,1217c <__alt_data_end+0xfffbca4c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   121bc:	0005883a 	mov	r2,zero
}
   121c0:	e037883a 	mov	sp,fp
   121c4:	dfc00117 	ldw	ra,4(sp)
   121c8:	df000017 	ldw	fp,0(sp)
   121cc:	dec00204 	addi	sp,sp,8
   121d0:	f800283a 	ret

000121d4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   121d4:	defffb04 	addi	sp,sp,-20
   121d8:	dfc00415 	stw	ra,16(sp)
   121dc:	df000315 	stw	fp,12(sp)
   121e0:	df000304 	addi	fp,sp,12
   121e4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   121e8:	00800074 	movhi	r2,1
   121ec:	10936204 	addi	r2,r2,19848
   121f0:	10800017 	ldw	r2,0(r2)
   121f4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   121f8:	00003106 	br	122c0 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   121fc:	e0bffd17 	ldw	r2,-12(fp)
   12200:	10800217 	ldw	r2,8(r2)
   12204:	1009883a 	mov	r4,r2
   12208:	0003f080 	call	3f08 <strlen>
   1220c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   12210:	e0bffd17 	ldw	r2,-12(fp)
   12214:	10c00217 	ldw	r3,8(r2)
   12218:	e0bffe17 	ldw	r2,-8(fp)
   1221c:	10bfffc4 	addi	r2,r2,-1
   12220:	1885883a 	add	r2,r3,r2
   12224:	10800003 	ldbu	r2,0(r2)
   12228:	10803fcc 	andi	r2,r2,255
   1222c:	1080201c 	xori	r2,r2,128
   12230:	10bfe004 	addi	r2,r2,-128
   12234:	10800bd8 	cmpnei	r2,r2,47
   12238:	1000031e 	bne	r2,zero,12248 <alt_find_file+0x74>
    {
      len -= 1;
   1223c:	e0bffe17 	ldw	r2,-8(fp)
   12240:	10bfffc4 	addi	r2,r2,-1
   12244:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   12248:	e0bffe17 	ldw	r2,-8(fp)
   1224c:	e0ffff17 	ldw	r3,-4(fp)
   12250:	1885883a 	add	r2,r3,r2
   12254:	10800003 	ldbu	r2,0(r2)
   12258:	10803fcc 	andi	r2,r2,255
   1225c:	1080201c 	xori	r2,r2,128
   12260:	10bfe004 	addi	r2,r2,-128
   12264:	10800be0 	cmpeqi	r2,r2,47
   12268:	1000081e 	bne	r2,zero,1228c <alt_find_file+0xb8>
   1226c:	e0bffe17 	ldw	r2,-8(fp)
   12270:	e0ffff17 	ldw	r3,-4(fp)
   12274:	1885883a 	add	r2,r3,r2
   12278:	10800003 	ldbu	r2,0(r2)
   1227c:	10803fcc 	andi	r2,r2,255
   12280:	1080201c 	xori	r2,r2,128
   12284:	10bfe004 	addi	r2,r2,-128
   12288:	10000a1e 	bne	r2,zero,122b4 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   1228c:	e0bffd17 	ldw	r2,-12(fp)
   12290:	10c00217 	ldw	r3,8(r2)
   12294:	e0bffe17 	ldw	r2,-8(fp)
   12298:	1809883a 	mov	r4,r3
   1229c:	e17fff17 	ldw	r5,-4(fp)
   122a0:	100d883a 	mov	r6,r2
   122a4:	00124a40 	call	124a4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   122a8:	1000021e 	bne	r2,zero,122b4 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   122ac:	e0bffd17 	ldw	r2,-12(fp)
   122b0:	00000806 	br	122d4 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   122b4:	e0bffd17 	ldw	r2,-12(fp)
   122b8:	10800017 	ldw	r2,0(r2)
   122bc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   122c0:	e0fffd17 	ldw	r3,-12(fp)
   122c4:	00800074 	movhi	r2,1
   122c8:	10936204 	addi	r2,r2,19848
   122cc:	18bfcb1e 	bne	r3,r2,121fc <__alt_data_end+0xfffbcacc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   122d0:	0005883a 	mov	r2,zero
}
   122d4:	e037883a 	mov	sp,fp
   122d8:	dfc00117 	ldw	ra,4(sp)
   122dc:	df000017 	ldw	fp,0(sp)
   122e0:	dec00204 	addi	sp,sp,8
   122e4:	f800283a 	ret

000122e8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   122e8:	defffa04 	addi	sp,sp,-24
   122ec:	dfc00515 	stw	ra,20(sp)
   122f0:	df000415 	stw	fp,16(sp)
   122f4:	dc000315 	stw	r16,12(sp)
   122f8:	df000404 	addi	fp,sp,16
   122fc:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   12300:	00bffa04 	movi	r2,-24
   12304:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   12308:	e03ffc15 	stw	zero,-16(fp)
   1230c:	00002106 	br	12394 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   12310:	04000074 	movhi	r16,1
   12314:	840ee404 	addi	r16,r16,15248
   12318:	e0bffc17 	ldw	r2,-16(fp)
   1231c:	1009883a 	mov	r4,r2
   12320:	01400304 	movi	r5,12
   12324:	000d6f80 	call	d6f8 <__mulsi3>
   12328:	8085883a 	add	r2,r16,r2
   1232c:	10800017 	ldw	r2,0(r2)
   12330:	1000151e 	bne	r2,zero,12388 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   12334:	04000074 	movhi	r16,1
   12338:	840ee404 	addi	r16,r16,15248
   1233c:	e0bffc17 	ldw	r2,-16(fp)
   12340:	1009883a 	mov	r4,r2
   12344:	01400304 	movi	r5,12
   12348:	000d6f80 	call	d6f8 <__mulsi3>
   1234c:	8085883a 	add	r2,r16,r2
   12350:	e0fffe17 	ldw	r3,-8(fp)
   12354:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   12358:	00800074 	movhi	r2,1
   1235c:	10936604 	addi	r2,r2,19864
   12360:	10c00017 	ldw	r3,0(r2)
   12364:	e0bffc17 	ldw	r2,-16(fp)
   12368:	1880040e 	bge	r3,r2,1237c <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   1236c:	00800074 	movhi	r2,1
   12370:	10936604 	addi	r2,r2,19864
   12374:	e0fffc17 	ldw	r3,-16(fp)
   12378:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   1237c:	e0bffc17 	ldw	r2,-16(fp)
   12380:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   12384:	00000606 	br	123a0 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   12388:	e0bffc17 	ldw	r2,-16(fp)
   1238c:	10800044 	addi	r2,r2,1
   12390:	e0bffc15 	stw	r2,-16(fp)
   12394:	e0bffc17 	ldw	r2,-16(fp)
   12398:	10800810 	cmplti	r2,r2,32
   1239c:	103fdc1e 	bne	r2,zero,12310 <__alt_data_end+0xfffbcbe0>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   123a0:	e0bffd17 	ldw	r2,-12(fp)
}
   123a4:	e6ffff04 	addi	sp,fp,-4
   123a8:	dfc00217 	ldw	ra,8(sp)
   123ac:	df000117 	ldw	fp,4(sp)
   123b0:	dc000017 	ldw	r16,0(sp)
   123b4:	dec00304 	addi	sp,sp,12
   123b8:	f800283a 	ret

000123bc <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   123bc:	defffe04 	addi	sp,sp,-8
   123c0:	df000115 	stw	fp,4(sp)
   123c4:	df000104 	addi	fp,sp,4
   123c8:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   123cc:	e0bfff17 	ldw	r2,-4(fp)
   123d0:	10bffe84 	addi	r2,r2,-6
   123d4:	10c00428 	cmpgeui	r3,r2,16
   123d8:	18001a1e 	bne	r3,zero,12444 <alt_exception_cause_generated_bad_addr+0x88>
   123dc:	100690ba 	slli	r3,r2,2
   123e0:	00800074 	movhi	r2,1
   123e4:	1088fd04 	addi	r2,r2,9204
   123e8:	1885883a 	add	r2,r3,r2
   123ec:	10800017 	ldw	r2,0(r2)
   123f0:	1000683a 	jmp	r2
   123f4:	00012434 	movhi	zero,1168
   123f8:	00012434 	movhi	zero,1168
   123fc:	00012444 	movi	zero,1169
   12400:	00012444 	movi	zero,1169
   12404:	00012444 	movi	zero,1169
   12408:	00012434 	movhi	zero,1168
   1240c:	0001243c 	xorhi	zero,zero,1168
   12410:	00012444 	movi	zero,1169
   12414:	00012434 	movhi	zero,1168
   12418:	00012434 	movhi	zero,1168
   1241c:	00012444 	movi	zero,1169
   12420:	00012434 	movhi	zero,1168
   12424:	0001243c 	xorhi	zero,zero,1168
   12428:	00012444 	movi	zero,1169
   1242c:	00012444 	movi	zero,1169
   12430:	00012434 	movhi	zero,1168
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   12434:	00800044 	movi	r2,1
   12438:	00000306 	br	12448 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   1243c:	0005883a 	mov	r2,zero
   12440:	00000106 	br	12448 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   12444:	0005883a 	mov	r2,zero
  }
}
   12448:	e037883a 	mov	sp,fp
   1244c:	df000017 	ldw	fp,0(sp)
   12450:	dec00104 	addi	sp,sp,4
   12454:	f800283a 	ret

00012458 <atexit>:
   12458:	200b883a 	mov	r5,r4
   1245c:	000d883a 	mov	r6,zero
   12460:	0009883a 	mov	r4,zero
   12464:	000f883a 	mov	r7,zero
   12468:	00125201 	jmpi	12520 <__register_exitproc>

0001246c <exit>:
   1246c:	defffe04 	addi	sp,sp,-8
   12470:	000b883a 	mov	r5,zero
   12474:	dc000015 	stw	r16,0(sp)
   12478:	dfc00115 	stw	ra,4(sp)
   1247c:	2021883a 	mov	r16,r4
   12480:	00126340 	call	12634 <__call_exitprocs>
   12484:	00800074 	movhi	r2,1
   12488:	10935e04 	addi	r2,r2,19832
   1248c:	11000017 	ldw	r4,0(r2)
   12490:	20800f17 	ldw	r2,60(r4)
   12494:	10000126 	beq	r2,zero,1249c <exit+0x30>
   12498:	103ee83a 	callr	r2
   1249c:	8009883a 	mov	r4,r16
   124a0:	00127c80 	call	127c8 <_exit>

000124a4 <memcmp>:
   124a4:	01c000c4 	movi	r7,3
   124a8:	3980192e 	bgeu	r7,r6,12510 <memcmp+0x6c>
   124ac:	2144b03a 	or	r2,r4,r5
   124b0:	11c4703a 	and	r2,r2,r7
   124b4:	10000f26 	beq	r2,zero,124f4 <memcmp+0x50>
   124b8:	20800003 	ldbu	r2,0(r4)
   124bc:	28c00003 	ldbu	r3,0(r5)
   124c0:	10c0151e 	bne	r2,r3,12518 <memcmp+0x74>
   124c4:	31bfff84 	addi	r6,r6,-2
   124c8:	01ffffc4 	movi	r7,-1
   124cc:	00000406 	br	124e0 <memcmp+0x3c>
   124d0:	20800003 	ldbu	r2,0(r4)
   124d4:	28c00003 	ldbu	r3,0(r5)
   124d8:	31bfffc4 	addi	r6,r6,-1
   124dc:	10c00e1e 	bne	r2,r3,12518 <memcmp+0x74>
   124e0:	21000044 	addi	r4,r4,1
   124e4:	29400044 	addi	r5,r5,1
   124e8:	31fff91e 	bne	r6,r7,124d0 <__alt_data_end+0xfffbcda0>
   124ec:	0005883a 	mov	r2,zero
   124f0:	f800283a 	ret
   124f4:	20c00017 	ldw	r3,0(r4)
   124f8:	28800017 	ldw	r2,0(r5)
   124fc:	1880041e 	bne	r3,r2,12510 <memcmp+0x6c>
   12500:	31bfff04 	addi	r6,r6,-4
   12504:	21000104 	addi	r4,r4,4
   12508:	29400104 	addi	r5,r5,4
   1250c:	39bff936 	bltu	r7,r6,124f4 <__alt_data_end+0xfffbcdc4>
   12510:	303fe91e 	bne	r6,zero,124b8 <__alt_data_end+0xfffbcd88>
   12514:	003ff506 	br	124ec <__alt_data_end+0xfffbcdbc>
   12518:	10c5c83a 	sub	r2,r2,r3
   1251c:	f800283a 	ret

00012520 <__register_exitproc>:
   12520:	00800074 	movhi	r2,1
   12524:	defffa04 	addi	sp,sp,-24
   12528:	10935e04 	addi	r2,r2,19832
   1252c:	dc000315 	stw	r16,12(sp)
   12530:	14000017 	ldw	r16,0(r2)
   12534:	dc400415 	stw	r17,16(sp)
   12538:	dfc00515 	stw	ra,20(sp)
   1253c:	80805217 	ldw	r2,328(r16)
   12540:	2023883a 	mov	r17,r4
   12544:	10003626 	beq	r2,zero,12620 <__register_exitproc+0x100>
   12548:	10c00117 	ldw	r3,4(r2)
   1254c:	010007c4 	movi	r4,31
   12550:	20c00e16 	blt	r4,r3,1258c <__register_exitproc+0x6c>
   12554:	1a400044 	addi	r9,r3,1
   12558:	8800211e 	bne	r17,zero,125e0 <__register_exitproc+0xc0>
   1255c:	18c00084 	addi	r3,r3,2
   12560:	18c7883a 	add	r3,r3,r3
   12564:	18c7883a 	add	r3,r3,r3
   12568:	12400115 	stw	r9,4(r2)
   1256c:	10c7883a 	add	r3,r2,r3
   12570:	19400015 	stw	r5,0(r3)
   12574:	0005883a 	mov	r2,zero
   12578:	dfc00517 	ldw	ra,20(sp)
   1257c:	dc400417 	ldw	r17,16(sp)
   12580:	dc000317 	ldw	r16,12(sp)
   12584:	dec00604 	addi	sp,sp,24
   12588:	f800283a 	ret
   1258c:	00800034 	movhi	r2,0
   12590:	108d4d04 	addi	r2,r2,13620
   12594:	10002526 	beq	r2,zero,1262c <__register_exitproc+0x10c>
   12598:	01006404 	movi	r4,400
   1259c:	d9400015 	stw	r5,0(sp)
   125a0:	d9800115 	stw	r6,4(sp)
   125a4:	d9c00215 	stw	r7,8(sp)
   125a8:	00035340 	call	3534 <malloc>
   125ac:	d9400017 	ldw	r5,0(sp)
   125b0:	d9800117 	ldw	r6,4(sp)
   125b4:	d9c00217 	ldw	r7,8(sp)
   125b8:	10001c26 	beq	r2,zero,1262c <__register_exitproc+0x10c>
   125bc:	80c05217 	ldw	r3,328(r16)
   125c0:	10000115 	stw	zero,4(r2)
   125c4:	02400044 	movi	r9,1
   125c8:	10c00015 	stw	r3,0(r2)
   125cc:	80805215 	stw	r2,328(r16)
   125d0:	10006215 	stw	zero,392(r2)
   125d4:	10006315 	stw	zero,396(r2)
   125d8:	0007883a 	mov	r3,zero
   125dc:	883fdf26 	beq	r17,zero,1255c <__alt_data_end+0xfffbce2c>
   125e0:	18d1883a 	add	r8,r3,r3
   125e4:	4211883a 	add	r8,r8,r8
   125e8:	1211883a 	add	r8,r2,r8
   125ec:	41802215 	stw	r6,136(r8)
   125f0:	01000044 	movi	r4,1
   125f4:	11806217 	ldw	r6,392(r2)
   125f8:	20c8983a 	sll	r4,r4,r3
   125fc:	310cb03a 	or	r6,r6,r4
   12600:	11806215 	stw	r6,392(r2)
   12604:	41c04215 	stw	r7,264(r8)
   12608:	01800084 	movi	r6,2
   1260c:	89bfd31e 	bne	r17,r6,1255c <__alt_data_end+0xfffbce2c>
   12610:	11806317 	ldw	r6,396(r2)
   12614:	3108b03a 	or	r4,r6,r4
   12618:	11006315 	stw	r4,396(r2)
   1261c:	003fcf06 	br	1255c <__alt_data_end+0xfffbce2c>
   12620:	80805304 	addi	r2,r16,332
   12624:	80805215 	stw	r2,328(r16)
   12628:	003fc706 	br	12548 <__alt_data_end+0xfffbce18>
   1262c:	00bfffc4 	movi	r2,-1
   12630:	003fd106 	br	12578 <__alt_data_end+0xfffbce48>

00012634 <__call_exitprocs>:
   12634:	00800074 	movhi	r2,1
   12638:	10935e04 	addi	r2,r2,19832
   1263c:	10800017 	ldw	r2,0(r2)
   12640:	defff404 	addi	sp,sp,-48
   12644:	dd800815 	stw	r22,32(sp)
   12648:	d8800015 	stw	r2,0(sp)
   1264c:	10805204 	addi	r2,r2,328
   12650:	dd000615 	stw	r20,24(sp)
   12654:	dc800415 	stw	r18,16(sp)
   12658:	dfc00b15 	stw	ra,44(sp)
   1265c:	df000a15 	stw	fp,40(sp)
   12660:	ddc00915 	stw	r23,36(sp)
   12664:	dd400715 	stw	r21,28(sp)
   12668:	dcc00515 	stw	r19,20(sp)
   1266c:	dc400315 	stw	r17,12(sp)
   12670:	dc000215 	stw	r16,8(sp)
   12674:	2025883a 	mov	r18,r4
   12678:	2829883a 	mov	r20,r5
   1267c:	d8800115 	stw	r2,4(sp)
   12680:	05bfffc4 	movi	r22,-1
   12684:	d8800017 	ldw	r2,0(sp)
   12688:	14c05217 	ldw	r19,328(r2)
   1268c:	98001d26 	beq	r19,zero,12704 <__call_exitprocs+0xd0>
   12690:	dd400117 	ldw	r21,4(sp)
   12694:	98800117 	ldw	r2,4(r19)
   12698:	173fffc4 	addi	fp,r2,-1
   1269c:	e0000d16 	blt	fp,zero,126d4 <__call_exitprocs+0xa0>
   126a0:	14000044 	addi	r16,r2,1
   126a4:	8421883a 	add	r16,r16,r16
   126a8:	8421883a 	add	r16,r16,r16
   126ac:	84402004 	addi	r17,r16,128
   126b0:	9c63883a 	add	r17,r19,r17
   126b4:	9c21883a 	add	r16,r19,r16
   126b8:	a0001e26 	beq	r20,zero,12734 <__call_exitprocs+0x100>
   126bc:	80804017 	ldw	r2,256(r16)
   126c0:	15001c26 	beq	r2,r20,12734 <__call_exitprocs+0x100>
   126c4:	e73fffc4 	addi	fp,fp,-1
   126c8:	843fff04 	addi	r16,r16,-4
   126cc:	8c7fff04 	addi	r17,r17,-4
   126d0:	e5bff91e 	bne	fp,r22,126b8 <__alt_data_end+0xfffbcf88>
   126d4:	00800034 	movhi	r2,0
   126d8:	108d5204 	addi	r2,r2,13640
   126dc:	10000926 	beq	r2,zero,12704 <__call_exitprocs+0xd0>
   126e0:	98800117 	ldw	r2,4(r19)
   126e4:	1000311e 	bne	r2,zero,127ac <__call_exitprocs+0x178>
   126e8:	98800017 	ldw	r2,0(r19)
   126ec:	10003426 	beq	r2,zero,127c0 <__call_exitprocs+0x18c>
   126f0:	9809883a 	mov	r4,r19
   126f4:	a8800015 	stw	r2,0(r21)
   126f8:	00035480 	call	3548 <free>
   126fc:	acc00017 	ldw	r19,0(r21)
   12700:	983fe41e 	bne	r19,zero,12694 <__alt_data_end+0xfffbcf64>
   12704:	dfc00b17 	ldw	ra,44(sp)
   12708:	df000a17 	ldw	fp,40(sp)
   1270c:	ddc00917 	ldw	r23,36(sp)
   12710:	dd800817 	ldw	r22,32(sp)
   12714:	dd400717 	ldw	r21,28(sp)
   12718:	dd000617 	ldw	r20,24(sp)
   1271c:	dcc00517 	ldw	r19,20(sp)
   12720:	dc800417 	ldw	r18,16(sp)
   12724:	dc400317 	ldw	r17,12(sp)
   12728:	dc000217 	ldw	r16,8(sp)
   1272c:	dec00c04 	addi	sp,sp,48
   12730:	f800283a 	ret
   12734:	98800117 	ldw	r2,4(r19)
   12738:	80c00017 	ldw	r3,0(r16)
   1273c:	10bfffc4 	addi	r2,r2,-1
   12740:	17001526 	beq	r2,fp,12798 <__call_exitprocs+0x164>
   12744:	80000015 	stw	zero,0(r16)
   12748:	183fde26 	beq	r3,zero,126c4 <__alt_data_end+0xfffbcf94>
   1274c:	00800044 	movi	r2,1
   12750:	1708983a 	sll	r4,r2,fp
   12754:	98806217 	ldw	r2,392(r19)
   12758:	9dc00117 	ldw	r23,4(r19)
   1275c:	2084703a 	and	r2,r4,r2
   12760:	1000061e 	bne	r2,zero,1277c <__call_exitprocs+0x148>
   12764:	183ee83a 	callr	r3
   12768:	98800117 	ldw	r2,4(r19)
   1276c:	15ffc51e 	bne	r2,r23,12684 <__alt_data_end+0xfffbcf54>
   12770:	a8800017 	ldw	r2,0(r21)
   12774:	14ffd326 	beq	r2,r19,126c4 <__alt_data_end+0xfffbcf94>
   12778:	003fc206 	br	12684 <__alt_data_end+0xfffbcf54>
   1277c:	98806317 	ldw	r2,396(r19)
   12780:	2084703a 	and	r2,r4,r2
   12784:	1000061e 	bne	r2,zero,127a0 <__call_exitprocs+0x16c>
   12788:	89400017 	ldw	r5,0(r17)
   1278c:	9009883a 	mov	r4,r18
   12790:	183ee83a 	callr	r3
   12794:	003ff406 	br	12768 <__alt_data_end+0xfffbd038>
   12798:	9f000115 	stw	fp,4(r19)
   1279c:	003fea06 	br	12748 <__alt_data_end+0xfffbd018>
   127a0:	89000017 	ldw	r4,0(r17)
   127a4:	183ee83a 	callr	r3
   127a8:	003fef06 	br	12768 <__alt_data_end+0xfffbd038>
   127ac:	98800017 	ldw	r2,0(r19)
   127b0:	982b883a 	mov	r21,r19
   127b4:	1027883a 	mov	r19,r2
   127b8:	983fb61e 	bne	r19,zero,12694 <__alt_data_end+0xfffbcf64>
   127bc:	003fd106 	br	12704 <__alt_data_end+0xfffbcfd4>
   127c0:	0005883a 	mov	r2,zero
   127c4:	003ffa06 	br	127b0 <__alt_data_end+0xfffbd080>

000127c8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   127c8:	defffd04 	addi	sp,sp,-12
   127cc:	df000215 	stw	fp,8(sp)
   127d0:	df000204 	addi	fp,sp,8
   127d4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   127d8:	0001883a 	nop
   127dc:	e0bfff17 	ldw	r2,-4(fp)
   127e0:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   127e4:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   127e8:	10000226 	beq	r2,zero,127f4 <_exit+0x2c>
    ALT_SIM_FAIL();
   127ec:	002af070 	cmpltui	zero,zero,43969
   127f0:	00000106 	br	127f8 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   127f4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   127f8:	003fff06 	br	127f8 <__alt_data_end+0xfffbd0c8>
