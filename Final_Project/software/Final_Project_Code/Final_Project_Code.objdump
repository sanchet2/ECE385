
Final_Project_Code.elf:     file format elf32-littlenios2
Final_Project_Code.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0000022c

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0001361c memsz 0x0001361c flags r-x
    LOAD off    0x0001463c vaddr 0x0001363c paddr 0x00015198 align 2**12
         filesz 0x00001b5c memsz 0x00001b5c flags rw-
    LOAD off    0x00016cf4 vaddr 0x00016cf4 paddr 0x00016cf4 align 2**12
         filesz 0x00000000 memsz 0x0000017c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000020c  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000129b8  0000022c  0000022c  0000122c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000a58  00012be4  00012be4  00013be4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b5c  0001363c  00015198  0001463c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000017c  00016cf4  00016cf4  00016cf4  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00016e70  00016e70  00016198  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00016198  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000dd0  00000000  00000000  000161c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00025473  00000000  00000000  00016f90  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000096bb  00000000  00000000  0003c403  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000b8e9  00000000  00000000  00045abe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000027d0  00000000  00000000  000513a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003aa8  00000000  00000000  00053b78  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00016f01  00000000  00000000  00057620  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  0006e524  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000013c0  00000000  00000000  0006e568  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0007317c  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0007317f  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0007318b  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0007318c  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0007318d  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00073191  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00073195  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  00073199  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  000731a4  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  000731af  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  000731ba  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000003b  00000000  00000000  000731c5  2**0
                  CONTENTS, READONLY
 29 .jdi          000056ce  00000000  00000000  00073200  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00083150  00000000  00000000  000788ce  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
0000022c l    d  .text	00000000 .text
00012be4 l    d  .rodata	00000000 .rodata
0001363c l    d  .rwdata	00000000 .rwdata
00016cf4 l    d  .bss	00000000 .bss
00016e70 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Final_Project_Code_bsp//obj/HAL/src/crt0.o
00000264 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 io_handler.c
00000000 l    df *ABS*	00000000 keyboard_functions.c
00016cf4 l     O .bss	00000002 ctl_reg
00016cf6 l     O .bss	00000002 no_device
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 play_game.c
00000000 l    df *ABS*	00000000 usb.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
000037f0 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00013382 l     O .rodata	00000010 zeroes.4181
00013392 l     O .rodata	00000010 blanks.4180
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
000065d8 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00008180 l     F .text	00000008 __fp_lock
00008188 l     F .text	00000008 __fp_unlock
0000819c l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00013ab4 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
00013ef8 l     O .rwdata	00000020 lc_ctype_charset
00013ed8 l     O .rwdata	00000020 lc_message_charset
00013f18 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
000133c4 l     O .rodata	0000000c p05.2678
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0000aed0 l     F .text	000000fc __sprint_r.part.0
000134f8 l     O .rodata	00000010 blanks.4125
000134e8 l     O .rodata	00000010 zeroes.4126
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
00010304 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0001042c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00010458 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00010560 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0001065c l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00010740 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00010924 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00015188 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00010bd8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00010d28 l     F .text	00000038 alt_dev_reg
000140f8 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00011004 l     F .text	00000204 altera_avalon_jtag_uart_irq
00011208 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00011adc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00011f74 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
000120cc l     F .text	00000050 alt_get_errno
0001211c l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00016d44 g     O .bss	00000004 alt_instruction_exception_handler
0000a564 g     F .text	00000074 _mprec_log10
0000a650 g     F .text	0000008c __any_on
0000c8fc g     F .text	00000054 _isatty_r
000133d0 g     O .rodata	00000028 __mprec_tinytens
0001086c g     F .text	00000078 alt_main
00004154 g     F .text	000000b8 _puts_r
00016d70 g     O .bss	00000100 alt_irq
0000c950 g     F .text	0000005c _lseek_r
00015198 g       *ABS*	00000000 __flash_rwdata_start
0000ed24 g     F .text	00000084 .hidden __eqdf2
00016e70 g       *ABS*	00000000 __alt_heap_start
00004118 g     F .text	0000003c printf
0000cb78 g     F .text	0000009c _wcrtomb_r
00016d04 g     O .bss	00000002 usb_ctl_val
0000adc8 g     F .text	0000005c __sseek
000084e4 g     F .text	00000010 __sinit
00016cfc g     O .bss	00000004 keycode
0000ca08 g     F .text	00000154 __swbuf_r
00008f5c g     F .text	0000007c _setlocale_r
0000833c g     F .text	00000078 __sfmoreglue
00010904 g     F .text	00000020 __malloc_unlock
000036f4 g     F .text	00000080 UsbGetRetryCnt
00009414 g     F .text	0000015c memmove
00000268 g     F .text	00000060 IO_init
000084cc g     F .text	00000018 _cleanup
00009694 g     F .text	000000a8 _Balloc
0000eda8 g     F .text	000000e0 .hidden __gtdf2
0001250c g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
0000c8a4 g     F .text	00000058 _fstat_r
00016d1c g     O .bss	00000004 errno
0000ad44 g     F .text	00000008 __seofread
00000394 g     F .text	0000030c get_keycode
00016d30 g     O .bss	00000004 alt_argv
0001d158 g       *ABS*	00000000 _gp
00010ba8 g     F .text	00000030 usleep
00001570 g     F .text	00000484 delete_enemy
00013f78 g     O .rwdata	00000180 alt_fd_list
0001252c g     F .text	00000090 alt_find_dev
000092dc g     F .text	00000138 memcpy
000021ec g     F .text	000000c8 fire_projectile
00001d88 g     F .text	0000008c render_shadow
00008190 g     F .text	0000000c _cleanup_r
0001012c g     F .text	000000d0 .hidden __floatsidf
00012054 g     F .text	00000078 alt_io_redirect
00016d06 g     O .bss	00000001 data_size
0000ee88 g     F .text	000000e0 .hidden __ltdf2
00012be4 g       *ABS*	00000000 __DTOR_END__
0000420c g     F .text	00000014 puts
000127a4 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00001b1c g     F .text	000000b0 render_enemy
0000ac7c g     F .text	00000074 __fpclassifyd
0000a4c0 g     F .text	000000a4 __ratio
0000c408 g     F .text	00000024 __vfiprintf_internal
00011404 g     F .text	0000020c altera_avalon_jtag_uart_read
0000391c g     F .text	00000014 malloc
000040ec g     F .text	0000002c _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0000390c g     F .text	00000008 .hidden __udivsi3
000105b0 g     F .text	000000ac isatty
00013420 g     O .rodata	000000c8 __mprec_tens
00008fd8 g     F .text	0000000c __locale_charset
00001acc g     F .text	00000050 render_enemies
00016d18 g     O .bss	00000004 __malloc_top_pad
00002d94 g     F .text	00000264 UsbGetConfigDesc2
00015168 g     O .rwdata	00000004 __mb_cur_max
00009008 g     F .text	0000000c _localeconv_r
0001363c g     O .rwdata	00000070 sizes
00009abc g     F .text	0000003c __i2b
00008948 g     F .text	000004a4 __sfvwrite_r
00016d08 g     O .bss	00000002 intStat
0000429c g     F .text	00000054 _sbrk_r
0000c9ac g     F .text	0000005c _read_r
00015180 g     O .rwdata	00000004 alt_max_fd
0000c5b4 g     F .text	00000100 _fclose_r
00008150 g     F .text	00000030 fflush
00016d14 g     O .bss	00000004 __malloc_max_sbrked_mem
00001484 g     F .text	000000ec make_enemy
00001ce8 g     F .text	000000a0 render_shadows
00002590 g     F .text	0000011c move_enemy
0000db08 g     F .text	0000089c .hidden __adddf3
0000a268 g     F .text	0000011c __b2d
0000d4c4 g     F .text	0000061c .hidden __umoddi3
00010790 g     F .text	000000dc lseek
00015160 g     O .rwdata	00000004 _global_impure_ptr
0000a6dc g     F .text	000005a0 _realloc_r
00016e70 g       *ABS*	00000000 __bss_end
00011e84 g     F .text	000000f0 alt_iic_isr_register
00012408 g     F .text	00000104 alt_tick
0000ce84 g     F .text	00000640 .hidden __udivdi3
0000c6c8 g     F .text	00000184 _fputwc_r
000133f8 g     O .rodata	00000028 __mprec_bigtens
000098a0 g     F .text	00000104 __s2b
000101fc g     F .text	000000a4 .hidden __floatunsidf
0000a010 g     F .text	00000060 __mcmp
000027f4 g     F .text	000000fc UsbSetAddress
00008504 g     F .text	00000018 __fp_lock_all
00011e38 g     F .text	0000004c alt_ic_irq_enabled
00012370 g     F .text	00000098 alt_alarm_stop
00016d38 g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	000000d0 alt_irq_handler
00013f50 g     O .rwdata	00000028 alt_dev_null
00001218 g     F .text	000000dc init_players
00011ac0 g     F .text	0000001c alt_dcache_flush_all
000099a4 g     F .text	00000068 __hi0bits
00000330 g     F .text	00000064 IO_read
000100a4 g     F .text	00000088 .hidden __fixdfsi
00015198 g       *ABS*	00000000 __ram_rwdata_end
00015178 g     O .rwdata	00000008 alt_dev_list
00010c28 g     F .text	00000100 write
0001363c g       *ABS*	00000000 __ram_rodata_end
000104a8 g     F .text	000000b8 fstat
0000ee88 g     F .text	000000e0 .hidden __ledf2
00003774 g     F .text	0000007c UsbPrintMem
00009d88 g     F .text	00000140 __pow5mult
0000afe4 g     F .text	00001424 ___vfiprintf_internal_r
00016d28 g     O .bss	00000004 __nlocale_changed
00003914 g     F .text	00000008 .hidden __umodsi3
00001ed8 g     F .text	00000058 render_player_check
00016e70 g       *ABS*	00000000 end
00010f40 g     F .text	000000c4 altera_avalon_jtag_uart_init
000001cc g     F .exceptions	00000060 alt_instruction_exception_entry
00012be4 g       *ABS*	00000000 __CTOR_LIST__
00055730 g       *ABS*	00000000 __alt_stack_pointer
000013dc g     F .text	000000a8 render_projectile
000102a0 g     F .text	00000064 .hidden __clzsi2
00011610 g     F .text	00000218 altera_avalon_jtag_uart_write
000084f4 g     F .text	00000004 __sfp_lock_acquire
000091f4 g     F .text	000000e8 memchr
00004388 g     F .text	000020fc ___vfprintf_internal_r
000030f4 g     F .text	000000fc UsbClassRequest
00008658 g     F .text	000002f0 _free_r
00008fe4 g     F .text	00000010 __locale_mb_cur_max
00012a1c g     F .text	00000194 __call_exitprocs
00016d24 g     O .bss	00000004 __mlocale_changed
00015158 g     O .rwdata	00000004 __malloc_sbrk_base
0000022c g     F .text	0000003c _start
00016d3c g     O .bss	00000004 _alt_tick_rate
00004238 g     F .text	00000064 rand
00009ec8 g     F .text	00000148 __lshift
00016d40 g     O .bss	00000004 _alt_nticks
00010974 g     F .text	00000104 read
00010d94 g     F .text	00000048 alt_sys_init
00012908 g     F .text	00000114 __register_exitproc
00009af8 g     F .text	00000290 __multiply
000112b0 g     F .text	00000068 altera_avalon_jtag_uart_close
00001bcc g     F .text	0000011c renderer
0000dae0 g     F .text	00000028 .hidden __mulsi3
0001363c g       *ABS*	00000000 __ram_rwdata_start
00012be4 g       *ABS*	00000000 __ram_rodata_start
00016d48 g     O .bss	00000028 __malloc_current_mallinfo
000006a0 g     F .text	00000a0c setup_keyboard
0000a384 g     F .text	0000013c __d2b
000028f0 g     F .text	00000144 UsbGetDeviceDesc1
00010ddc g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0000138c g     F .text	00000050 render_projectiles
000126d0 g     F .text	000000d4 alt_get_fd
00011968 g     F .text	00000158 alt_busy_sleep
0000c488 g     F .text	00000054 _close_r
00002474 g     F .text	0000011c move_player
0001288c g     F .text	0000007c memcmp
00010e9c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00016e70 g       *ABS*	00000000 __alt_stack_base
00010eec g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00002388 g     F .text	000000ec hits_enemy
000064a8 g     F .text	00000130 __swsetup_r
0000e3a4 g     F .text	00000980 .hidden __divdf3
000083b4 g     F .text	00000118 __sfp
0000a5d8 g     F .text	00000078 __copybits
000136ac g     O .rwdata	00000408 __malloc_av_
00008500 g     F .text	00000004 __sinit_lock_release
0000ef68 g     F .text	0000086c .hidden __muldf3
0000acf0 g     F .text	00000054 __sread
00003670 g     F .text	00000084 UsbWaitTDListDone
000125bc g     F .text	00000114 alt_find_file
00011b2c g     F .text	000000a4 alt_dev_llist_insert
000108e4 g     F .text	00000020 __malloc_lock
00010af8 g     F .text	000000b0 sbrk
00007f28 g     F .text	00000228 _fflush_r
0000c4dc g     F .text	000000d8 _calloc_r
00016d0a g     O .bss	00000001 hot_plug_count
00016cf4 g       *ABS*	00000000 __bss_start
00009570 g     F .text	00000124 memset
000010ac g     F .text	0000016c main
00016d34 g     O .bss	00000004 alt_envp
00016d10 g     O .bss	00000004 __malloc_max_total_mem
00010e3c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00002ff8 g     F .text	000000fc UsbSetConfig
0000cb5c g     F .text	0000001c __swbuf
00004220 g     F .text	00000018 srand
0000ae24 g     F .text	00000008 __sclose
00055730 g       *ABS*	00000000 __alt_heap_limit
0000c6b4 g     F .text	00000014 fclose
00006800 g     F .text	00001728 _dtoa_r
00003944 g     F .text	000007a8 _malloc_r
0000ccec g     F .text	00000030 __ascii_wctomb
00015184 g     O .rwdata	00000004 alt_errno
00008dec g     F .text	000000b8 _fwalk
0000385c g     F .text	00000054 .hidden __divsi3
00008534 g     F .text	00000124 _malloc_trim_r
000031f0 g     F .text	00000144 UsbGetHidDesc
00012be4 g       *ABS*	00000000 __CTOR_END__
0000ae2c g     F .text	000000a4 strcmp
00012be4 g       *ABS*	00000000 __flash_rodata_start
00012be4 g       *ABS*	00000000 __DTOR_LIST__
0000ed24 g     F .text	00000084 .hidden __nedf2
00002700 g     F .text	00000044 UsbRead
00002178 g     F .text	00000074 parse_keycode
00001344 g     F .text	00000048 move_projectiles
00010d60 g     F .text	00000034 alt_irq_init
00010a78 g     F .text	00000080 alt_release_fd
00013508 g     O .rodata	00000100 .hidden __clz_tab
00016d20 g     O .bss	00000004 _PathLocale
00012840 g     F .text	00000014 atexit
0000c42c g     F .text	0000005c _write_r
00009014 g     F .text	0000001c setlocale
00015164 g     O .rwdata	00000004 _impure_ptr
00016d2c g     O .bss	00000004 alt_argc
00011c2c g     F .text	0000005c _do_dtors
00009000 g     F .text	00000008 __locale_cjk_lang
000022b4 g     F .text	000000d4 check_projectiles
00000020 g       .exceptions	00000000 alt_irq_entry
0000a208 g     F .text	00000060 __ulp
0000851c g     F .text	00000018 __fp_unlock_all
00016d00 g     O .bss	00000001 toggle
00001e14 g     F .text	000000c4 render_players
00001a48 g     F .text	00000084 move_enemies
00015170 g     O .rwdata	00000008 alt_fs_list
00003334 g     F .text	0000033c UsbGetReportDesc
00000020 g       *ABS*	00000000 __ram_exceptions_start
00009030 g     F .text	0000000c localeconv
00011ca4 g     F .text	00000050 alt_ic_isr_register
000012f4 g     F .text	00000050 move_projectile
00015198 g       *ABS*	00000000 _edata
00016e70 g       *ABS*	00000000 _end
000026ac g     F .text	00000054 UsbWrite
000019f4 g     F .text	00000054 count_enemies
0000022c g       *ABS*	00000000 __ram_exceptions_end
00011318 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
00016d0c g     O .bss	00000002 code
00011d94 g     F .text	000000a4 alt_ic_irq_disable
0000ad4c g     F .text	0000007c __swrite
0001515c g     O .rwdata	00000004 __malloc_trim_threshold
00008ff4 g     F .text	0000000c __locale_msgcharset
00016cf8 g     O .bss	00000002 fs_device
00012854 g     F .text	00000038 exit
00008ea4 g     F .text	000000b8 _fwalk_reent
0000a070 g     F .text	00000198 __mdiff
000038b0 g     F .text	0000005c .hidden __modsi3
00055730 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
000084f8 g     F .text	00000004 __sfp_lock_release
000002c8 g     F .text	00000068 IO_write
00012bb0 g     F .text	00000034 _exit
00011828 g     F .text	00000140 alt_alarm_start
0000cd78 g     F .text	0000010c .hidden __muldi3
0000903c g     F .text	000001b8 __smakebuf_r
000042f0 g     F .text	00000098 strlen
00012210 g     F .text	00000160 open
0000eda8 g     F .text	000000e0 .hidden __gedf2
0001516c g     O .rwdata	00000004 __wctomb
0000afcc g     F .text	00000018 __sprint_r
00011c88 g     F .text	0000001c alt_icache_flush_all
0001518c g     O .rwdata	00000004 alt_priority_mask
00011cf4 g     F .text	000000a0 alt_ic_irq_enable
00006484 g     F .text	00000024 __vfprintf_internal
0000cd1c g     F .text	0000005c _wctomb_r
0000f7d4 g     F .text	000008d0 .hidden __subdf3
00001f30 g     F .text	00000248 keycode_effect
00009a0c g     F .text	000000b0 __lo0bits
00002c08 g     F .text	0000018c UsbGetConfigDesc1
00015190 g     O .rwdata	00000008 alt_alarm_list
00011bd0 g     F .text	0000005c _do_ctors
00002744 g     F .text	000000b0 UsbSoftReset
0000cc14 g     F .text	000000d8 wcrtomb
00010354 g     F .text	000000d8 close
00002a34 g     F .text	000001d4 UsbGetDeviceDesc2
000106c0 g     F .text	00000080 alt_load
0000c84c g     F .text	00000058 fputwc
00003930 g     F .text	00000014 free
000084fc g     F .text	00000004 __sinit_lock_acquire
00009764 g     F .text	0000013c __multadd
0000973c g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08408b14 	ori	at,at,556
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001cc0 	call	1cc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	00800074 	movhi	r2,1
 140:	109b5c04 	addi	r2,r2,28016
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	00800074 	movhi	r2,1
 158:	109b5c04 	addi	r2,r2,28016
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <__alt_data_end+0xfffaa9fc>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <__alt_data_end+0xfffaa9f0>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0001883a 	nop
}
 1b8:	e037883a 	mov	sp,fp
 1bc:	dfc00117 	ldw	ra,4(sp)
 1c0:	df000017 	ldw	fp,0(sp)
 1c4:	dec00204 	addi	sp,sp,8
 1c8:	f800283a 	ret

000001cc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1cc:	defffb04 	addi	sp,sp,-20
 1d0:	dfc00415 	stw	ra,16(sp)
 1d4:	df000315 	stw	fp,12(sp)
 1d8:	df000304 	addi	fp,sp,12
 1dc:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 1e0:	00bfffc4 	movi	r2,-1
 1e4:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 1e8:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1ec:	d0a6fb17 	ldw	r2,-25620(gp)
 1f0:	10000726 	beq	r2,zero,210 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 1f4:	d0a6fb17 	ldw	r2,-25620(gp)
 1f8:	e0fffd17 	ldw	r3,-12(fp)
 1fc:	1809883a 	mov	r4,r3
 200:	e17fff17 	ldw	r5,-4(fp)
 204:	e1bffe17 	ldw	r6,-8(fp)
 208:	103ee83a 	callr	r2
 20c:	00000206 	br	218 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 210:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 214:	0005883a 	mov	r2,zero
}
 218:	e037883a 	mov	sp,fp
 21c:	dfc00117 	ldw	ra,4(sp)
 220:	df000017 	ldw	fp,0(sp)
 224:	dec00204 	addi	sp,sp,8
 228:	f800283a 	ret

Disassembly of section .text:

0000022c <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     22c:	06c00174 	movhi	sp,5
    ori sp, sp, %lo(__alt_stack_pointer)
     230:	ded5cc14 	ori	sp,sp,22320
    movhi gp, %hi(_gp)
     234:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     238:	d6b45614 	ori	gp,gp,53592
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     23c:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     240:	109b3d14 	ori	r2,r2,27892

    movhi r3, %hi(__bss_end)
     244:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     248:	18db9c14 	ori	r3,r3,28272

    beq r2, r3, 1f
     24c:	10c00326 	beq	r2,r3,25c <_start+0x30>

0:
    stw zero, (r2)
     250:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     254:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     258:	10fffd36 	bltu	r2,r3,250 <__alt_data_end+0xfffaab20>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     25c:	00106c00 	call	106c0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     260:	001086c0 	call	1086c <alt_main>

00000264 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     264:	003fff06 	br	264 <__alt_data_end+0xfffaab34>

00000268 <IO_init>:
#define otg_hpi_cs			(volatile char*)	OTG_HPI_CS_BASE //FOR SOME REASON CS BASE BEHAVES WEIRDLY MIGHT HAVE TO SET MANUALLY
#define otg_hpi_w			(volatile char*)	OTG_HPI_W_BASE


void IO_init(void)
{
     268:	deffff04 	addi	sp,sp,-4
     26c:	df000015 	stw	fp,0(sp)
     270:	d839883a 	mov	fp,sp
	*otg_hpi_cs = 0;
     274:	00800234 	movhi	r2,8
     278:	10841404 	addi	r2,r2,4176
     27c:	10000005 	stb	zero,0(r2)
	*otg_hpi_r = 1;
     280:	00800234 	movhi	r2,8
     284:	10840804 	addi	r2,r2,4128
     288:	00c00044 	movi	r3,1
     28c:	10c00005 	stb	r3,0(r2)
	*otg_hpi_w = 1;
     290:	00800234 	movhi	r2,8
     294:	10840404 	addi	r2,r2,4112
     298:	00c00044 	movi	r3,1
     29c:	10c00005 	stb	r3,0(r2)
	*otg_hpi_address = 0;
     2a0:	00800234 	movhi	r2,8
     2a4:	10841004 	addi	r2,r2,4160
     2a8:	10000015 	stw	zero,0(r2)
	*otg_hpi_data = 0;
     2ac:	00800234 	movhi	r2,8
     2b0:	10840c04 	addi	r2,r2,4144
     2b4:	10000015 	stw	zero,0(r2)
}
     2b8:	e037883a 	mov	sp,fp
     2bc:	df000017 	ldw	fp,0(sp)
     2c0:	dec00104 	addi	sp,sp,4
     2c4:	f800283a 	ret

000002c8 <IO_write>:

void IO_write(alt_u8 Address, alt_u16 Data)
{
     2c8:	defffd04 	addi	sp,sp,-12
     2cc:	df000215 	stw	fp,8(sp)
     2d0:	df000204 	addi	fp,sp,8
     2d4:	2007883a 	mov	r3,r4
     2d8:	2805883a 	mov	r2,r5
     2dc:	e0fffe05 	stb	r3,-8(fp)
     2e0:	e0bfff0d 	sth	r2,-4(fp)
	*otg_hpi_address = Address;
     2e4:	00800234 	movhi	r2,8
     2e8:	10841004 	addi	r2,r2,4160
     2ec:	e0fffe03 	ldbu	r3,-8(fp)
     2f0:	10c00015 	stw	r3,0(r2)
	*otg_hpi_data = Data;
     2f4:	00800234 	movhi	r2,8
     2f8:	10840c04 	addi	r2,r2,4144
     2fc:	e0ffff0b 	ldhu	r3,-4(fp)
     300:	10c00015 	stw	r3,0(r2)
	*otg_hpi_w = 0;
     304:	00800234 	movhi	r2,8
     308:	10840404 	addi	r2,r2,4112
     30c:	10000005 	stb	zero,0(r2)
	*otg_hpi_w = 1;
     310:	00800234 	movhi	r2,8
     314:	10840404 	addi	r2,r2,4112
     318:	00c00044 	movi	r3,1
     31c:	10c00005 	stb	r3,0(r2)
}
     320:	e037883a 	mov	sp,fp
     324:	df000017 	ldw	fp,0(sp)
     328:	dec00104 	addi	sp,sp,4
     32c:	f800283a 	ret

00000330 <IO_read>:

alt_u16 IO_read(alt_u8 Address)
{
     330:	defffd04 	addi	sp,sp,-12
     334:	df000215 	stw	fp,8(sp)
     338:	df000204 	addi	fp,sp,8
     33c:	2005883a 	mov	r2,r4
     340:	e0bfff05 	stb	r2,-4(fp)
	alt_u16 temp;
	*otg_hpi_address = Address;
     344:	00800234 	movhi	r2,8
     348:	10841004 	addi	r2,r2,4160
     34c:	e0ffff03 	ldbu	r3,-4(fp)
     350:	10c00015 	stw	r3,0(r2)
	*otg_hpi_r = 0;
     354:	00800234 	movhi	r2,8
     358:	10840804 	addi	r2,r2,4128
     35c:	10000005 	stb	zero,0(r2)
	temp = *otg_hpi_data;
     360:	00800234 	movhi	r2,8
     364:	10840c04 	addi	r2,r2,4144
     368:	10800017 	ldw	r2,0(r2)
     36c:	e0bffe0d 	sth	r2,-8(fp)
	*otg_hpi_r = 1;
     370:	00800234 	movhi	r2,8
     374:	10840804 	addi	r2,r2,4128
     378:	00c00044 	movi	r3,1
     37c:	10c00005 	stb	r3,0(r2)

	return temp;
     380:	e0bffe0b 	ldhu	r2,-8(fp)
}
     384:	e037883a 	mov	sp,fp
     388:	df000017 	ldw	fp,0(sp)
     38c:	dec00104 	addi	sp,sp,4
     390:	f800283a 	ret

00000394 <get_keycode>:
alt_u16 code;




int get_keycode(unsigned int *keycode1,unsigned int *keycode2){
     394:	defffc04 	addi	sp,sp,-16
     398:	dfc00315 	stw	ra,12(sp)
     39c:	df000215 	stw	fp,8(sp)
     3a0:	df000204 	addi	fp,sp,8
     3a4:	e13ffe15 	stw	r4,-8(fp)
     3a8:	e17fff15 	stw	r5,-4(fp)
				toggle++;
     3ac:	d0a6ea03 	ldbu	r2,-25688(gp)
     3b0:	10800044 	addi	r2,r2,1
     3b4:	d0a6ea05 	stb	r2,-25688(gp)
				IO_write(HPI_ADDR,0x0500); //the start address
     3b8:	01000084 	movi	r4,2
     3bc:	01414004 	movi	r5,1280
     3c0:	00002c80 	call	2c8 <IO_write>
				//data phase IN-1
				IO_write(HPI_DATA,0x051c); //500
     3c4:	0009883a 	mov	r4,zero
     3c8:	01414704 	movi	r5,1308
     3cc:	00002c80 	call	2c8 <IO_write>

				IO_write(HPI_DATA,0x000f & data_size);//2 data length
     3d0:	d0a6eb83 	ldbu	r2,-25682(gp)
     3d4:	10803fcc 	andi	r2,r2,255
     3d8:	108003cc 	andi	r2,r2,15
     3dc:	0009883a 	mov	r4,zero
     3e0:	100b883a 	mov	r5,r2
     3e4:	00002c80 	call	2c8 <IO_write>

				IO_write(HPI_DATA,0x0291);//4 //endpoint 1
     3e8:	0009883a 	mov	r4,zero
     3ec:	0140a444 	movi	r5,657
     3f0:	00002c80 	call	2c8 <IO_write>
				if(toggle%2)
     3f4:	d0a6ea03 	ldbu	r2,-25688(gp)
     3f8:	1080004c 	andi	r2,r2,1
     3fc:	10803fcc 	andi	r2,r2,255
     400:	10000426 	beq	r2,zero,414 <get_keycode+0x80>
				{
					IO_write(HPI_DATA,0x0001);//6 //data 1
     404:	0009883a 	mov	r4,zero
     408:	01400044 	movi	r5,1
     40c:	00002c80 	call	2c8 <IO_write>
     410:	00000306 	br	420 <get_keycode+0x8c>
				}
				else
				{
					IO_write(HPI_DATA,0x0041);//6 //data 1
     414:	0009883a 	mov	r4,zero
     418:	01401044 	movi	r5,65
     41c:	00002c80 	call	2c8 <IO_write>
				}
				IO_write(HPI_DATA,0x0013);//8
     420:	0009883a 	mov	r4,zero
     424:	014004c4 	movi	r5,19
     428:	00002c80 	call	2c8 <IO_write>
				IO_write(HPI_DATA,0x0000);//a
     42c:	0009883a 	mov	r4,zero
     430:	000b883a 	mov	r5,zero
     434:	00002c80 	call	2c8 <IO_write>
				UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
     438:	01006c04 	movi	r4,432
     43c:	01414004 	movi	r5,1280
     440:	00026ac0 	call	26ac <UsbWrite>

				while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     444:	00002506 	br	4dc <get_keycode+0x148>
				{
					IO_write(HPI_ADDR,0x0500); //the start address
     448:	01000084 	movi	r4,2
     44c:	01414004 	movi	r5,1280
     450:	00002c80 	call	2c8 <IO_write>
					//data phase IN-1
					IO_write(HPI_DATA,0x051c); //500
     454:	0009883a 	mov	r4,zero
     458:	01414704 	movi	r5,1308
     45c:	00002c80 	call	2c8 <IO_write>

					IO_write(HPI_DATA,0x000f & data_size);//2 data length
     460:	d0a6eb83 	ldbu	r2,-25682(gp)
     464:	10803fcc 	andi	r2,r2,255
     468:	108003cc 	andi	r2,r2,15
     46c:	0009883a 	mov	r4,zero
     470:	100b883a 	mov	r5,r2
     474:	00002c80 	call	2c8 <IO_write>

					IO_write(HPI_DATA,0x0291);//4 //endpoint 1
     478:	0009883a 	mov	r4,zero
     47c:	0140a444 	movi	r5,657
     480:	00002c80 	call	2c8 <IO_write>
					if(toggle%2)
     484:	d0a6ea03 	ldbu	r2,-25688(gp)
     488:	1080004c 	andi	r2,r2,1
     48c:	10803fcc 	andi	r2,r2,255
     490:	10000426 	beq	r2,zero,4a4 <get_keycode+0x110>
					{
						IO_write(HPI_DATA,0x0001);//6 //data 1
     494:	0009883a 	mov	r4,zero
     498:	01400044 	movi	r5,1
     49c:	00002c80 	call	2c8 <IO_write>
     4a0:	00000306 	br	4b0 <get_keycode+0x11c>
					}
					else
					{
						IO_write(HPI_DATA,0x0041);//6 //data 1
     4a4:	0009883a 	mov	r4,zero
     4a8:	01401044 	movi	r5,65
     4ac:	00002c80 	call	2c8 <IO_write>
					}
					IO_write(HPI_DATA,0x0013);//8
     4b0:	0009883a 	mov	r4,zero
     4b4:	014004c4 	movi	r5,19
     4b8:	00002c80 	call	2c8 <IO_write>
					IO_write(HPI_DATA,0x0000);//
     4bc:	0009883a 	mov	r4,zero
     4c0:	000b883a 	mov	r5,zero
     4c4:	00002c80 	call	2c8 <IO_write>
					UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
     4c8:	01006c04 	movi	r4,432
     4cc:	01414004 	movi	r5,1280
     4d0:	00026ac0 	call	26ac <UsbWrite>
					usleep(10*1000);
     4d4:	0109c404 	movi	r4,10000
     4d8:	0010ba80 	call	10ba8 <usleep>
				}
				IO_write(HPI_DATA,0x0013);//8
				IO_write(HPI_DATA,0x0000);//a
				UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr

				while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     4dc:	010000c4 	movi	r4,3
     4e0:	00003300 	call	330 <IO_read>
     4e4:	10bfffcc 	andi	r2,r2,65535
     4e8:	1080040c 	andi	r2,r2,16
     4ec:	103fd626 	beq	r2,zero,448 <__alt_data_end+0xfffaad18>
					usleep(10*1000);
				}//end while



				usb_ctl_val = UsbWaitTDListDone();
     4f0:	00036700 	call	3670 <UsbWaitTDListDone>
     4f4:	d0a6eb0d 	sth	r2,-25684(gp)

				// packet starts from 0x051c, reading third byte
				// TASK: Write the address to read from the memory for byte 3 of the report descriptor to HPI_ADDR.
				IO_write(HPI_ADDR,0x051e); //the start address
     4f8:	01000084 	movi	r4,2
     4fc:	01414784 	movi	r5,1310
     500:	00002c80 	call	2c8 <IO_write>
				*keycode1 = IO_read(HPI_DATA);
     504:	0009883a 	mov	r4,zero
     508:	00003300 	call	330 <IO_read>
     50c:	10ffffcc 	andi	r3,r2,65535
     510:	e0bffe17 	ldw	r2,-8(fp)
     514:	10c00015 	stw	r3,0(r2)
				keycode=*keycode1;
     518:	e0bffe17 	ldw	r2,-8(fp)
     51c:	10800017 	ldw	r2,0(r2)
     520:	d0a6e915 	stw	r2,-25692(gp)


				*keycode2 = IO_read(HPI_DATA);
     524:	0009883a 	mov	r4,zero
     528:	00003300 	call	330 <IO_read>
     52c:	10ffffcc 	andi	r3,r2,65535
     530:	e0bfff17 	ldw	r2,-4(fp)
     534:	10c00015 	stw	r3,0(r2)


				IOWR(KEYCODE_BASE, 0, keycode & 0xff);
     538:	d0a6e917 	ldw	r2,-25692(gp)
     53c:	10c03fcc 	andi	r3,r2,255
     540:	00800234 	movhi	r2,8
     544:	10841804 	addi	r2,r2,4192
     548:	10c00035 	stwio	r3,0(r2)



				usb_ctl_val = UsbRead(ctl_reg);
     54c:	d0a6e70b 	ldhu	r2,-25700(gp)
     550:	10bfffcc 	andi	r2,r2,65535
     554:	1009883a 	mov	r4,r2
     558:	00027000 	call	2700 <UsbRead>
     55c:	d0a6eb0d 	sth	r2,-25684(gp)

				if(!(usb_ctl_val & no_device))
     560:	d0e6eb0b 	ldhu	r3,-25684(gp)
     564:	d0a6e78b 	ldhu	r2,-25698(gp)
     568:	1884703a 	and	r2,r3,r2
     56c:	10bfffcc 	andi	r2,r2,65535
     570:	1000211e 	bne	r2,zero,5f8 <get_keycode+0x264>
				{
					//USB hot plug routine
					for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
     574:	d026ec85 	stb	zero,-25678(gp)
     578:	00001006 	br	5bc <get_keycode+0x228>
					{
						usleep(5*1000);
     57c:	0104e204 	movi	r4,5000
     580:	0010ba80 	call	10ba8 <usleep>
						usb_ctl_val = UsbRead(ctl_reg);
     584:	d0a6e70b 	ldhu	r2,-25700(gp)
     588:	10bfffcc 	andi	r2,r2,65535
     58c:	1009883a 	mov	r4,r2
     590:	00027000 	call	2700 <UsbRead>
     594:	d0a6eb0d 	sth	r2,-25684(gp)
						if(usb_ctl_val & no_device) break;
     598:	d0e6eb0b 	ldhu	r3,-25684(gp)
     59c:	d0a6e78b 	ldhu	r2,-25698(gp)
     5a0:	1884703a 	and	r2,r3,r2
     5a4:	10bfffcc 	andi	r2,r2,65535
     5a8:	10000126 	beq	r2,zero,5b0 <get_keycode+0x21c>
     5ac:	00000706 	br	5cc <get_keycode+0x238>
				usb_ctl_val = UsbRead(ctl_reg);

				if(!(usb_ctl_val & no_device))
				{
					//USB hot plug routine
					for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
     5b0:	d0a6ec83 	ldbu	r2,-25678(gp)
     5b4:	10800044 	addi	r2,r2,1
     5b8:	d0a6ec85 	stb	r2,-25678(gp)
     5bc:	d0a6ec83 	ldbu	r2,-25678(gp)
     5c0:	10803fcc 	andi	r2,r2,255
     5c4:	108001f0 	cmpltui	r2,r2,7
     5c8:	103fec1e 	bne	r2,zero,57c <__alt_data_end+0xfffaae4c>
					{
						usleep(5*1000);
						usb_ctl_val = UsbRead(ctl_reg);
						if(usb_ctl_val & no_device) break;
					}
					if(!(usb_ctl_val & no_device))
     5cc:	d0e6eb0b 	ldhu	r3,-25684(gp)
     5d0:	d0a6e78b 	ldhu	r2,-25698(gp)
     5d4:	1884703a 	and	r2,r3,r2
     5d8:	10bfffcc 	andi	r2,r2,65535
     5dc:	1000061e 	bne	r2,zero,5f8 <get_keycode+0x264>
					{
						printf("\n[INFO]: the keyboard has been removed!!! \n");
     5e0:	01000074 	movhi	r4,1
     5e4:	210af904 	addi	r4,r4,11236
     5e8:	000420c0 	call	420c <puts>
						printf("[INFO]: please insert again!!! \n");
     5ec:	01000074 	movhi	r4,1
     5f0:	210b0404 	addi	r4,r4,11280
     5f4:	000420c0 	call	420c <puts>
					}
				}

				while (!(usb_ctl_val & no_device))
     5f8:	00001e06 	br	674 <get_keycode+0x2e0>
				{

					usb_ctl_val = UsbRead(ctl_reg);
     5fc:	d0a6e70b 	ldhu	r2,-25700(gp)
     600:	10bfffcc 	andi	r2,r2,65535
     604:	1009883a 	mov	r4,r2
     608:	00027000 	call	2700 <UsbRead>
     60c:	d0a6eb0d 	sth	r2,-25684(gp)
					usleep(5*1000);
     610:	0104e204 	movi	r4,5000
     614:	0010ba80 	call	10ba8 <usleep>
					usb_ctl_val = UsbRead(ctl_reg);
     618:	d0a6e70b 	ldhu	r2,-25700(gp)
     61c:	10bfffcc 	andi	r2,r2,65535
     620:	1009883a 	mov	r4,r2
     624:	00027000 	call	2700 <UsbRead>
     628:	d0a6eb0d 	sth	r2,-25684(gp)
					usleep(5*1000);
     62c:	0104e204 	movi	r4,5000
     630:	0010ba80 	call	10ba8 <usleep>
					usb_ctl_val = UsbRead(ctl_reg);
     634:	d0a6e70b 	ldhu	r2,-25700(gp)
     638:	10bfffcc 	andi	r2,r2,65535
     63c:	1009883a 	mov	r4,r2
     640:	00027000 	call	2700 <UsbRead>
     644:	d0a6eb0d 	sth	r2,-25684(gp)
					usleep(5*1000);
     648:	0104e204 	movi	r4,5000
     64c:	0010ba80 	call	10ba8 <usleep>

					if(usb_ctl_val & no_device)
     650:	d0e6eb0b 	ldhu	r3,-25684(gp)
     654:	d0a6e78b 	ldhu	r2,-25698(gp)
     658:	1884703a 	and	r2,r3,r2
     65c:	10bfffcc 	andi	r2,r2,65535
     660:	10000226 	beq	r2,zero,66c <get_keycode+0x2d8>
						return -1;
     664:	00bfffc4 	movi	r2,-1
     668:	00000806 	br	68c <get_keycode+0x2f8>

					usleep(200);
     66c:	01003204 	movi	r4,200
     670:	0010ba80 	call	10ba8 <usleep>
						printf("\n[INFO]: the keyboard has been removed!!! \n");
						printf("[INFO]: please insert again!!! \n");
					}
				}

				while (!(usb_ctl_val & no_device))
     674:	d0e6eb0b 	ldhu	r3,-25684(gp)
     678:	d0a6e78b 	ldhu	r2,-25698(gp)
     67c:	1884703a 	and	r2,r3,r2
     680:	10bfffcc 	andi	r2,r2,65535
     684:	103fdd26 	beq	r2,zero,5fc <__alt_data_end+0xfffaaecc>
					if(usb_ctl_val & no_device)
						return -1;

					usleep(200);
				}
				return 0;
     688:	0005883a 	mov	r2,zero
}
     68c:	e037883a 	mov	sp,fp
     690:	dfc00117 	ldw	ra,4(sp)
     694:	df000017 	ldw	fp,0(sp)
     698:	dec00204 	addi	sp,sp,8
     69c:	f800283a 	ret

000006a0 <setup_keyboard>:


void setup_keyboard()
{
     6a0:	defffe04 	addi	sp,sp,-8
     6a4:	dfc00115 	stw	ra,4(sp)
     6a8:	df000015 	stw	fp,0(sp)
     6ac:	d839883a 	mov	fp,sp
	IO_init();
     6b0:	00002680 	call	268 <IO_init>
		usleep(10*10000);
	}*/



	printf("USB keyboard setup...\n\n");
     6b4:	01000074 	movhi	r4,1
     6b8:	210b0c04 	addi	r4,r4,11312
     6bc:	000420c0 	call	420c <puts>

	//----------------------------------------SIE1 initial---------------------------------------------------//
	USB_HOT_PLUG:
	UsbSoftReset();
     6c0:	00027440 	call	2744 <UsbSoftReset>

	// STEP 1a:
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
     6c4:	01005104 	movi	r4,324
     6c8:	000b883a 	mov	r5,zero
     6cc:	00026ac0 	call	26ac <UsbWrite>
	UsbWrite (HOST1_STAT_REG, 0xFFFF);
     6d0:	01302414 	movui	r4,49296
     6d4:	017fffd4 	movui	r5,65535
     6d8:	00026ac0 	call	26ac <UsbWrite>

	/* Set HUSB_pEOT time */
	UsbWrite(HUSB_pEOT, 600); // adjust the according to your USB device speed
     6dc:	01006d04 	movi	r4,436
     6e0:	01409604 	movi	r5,600
     6e4:	00026ac0 	call	26ac <UsbWrite>

	usb_ctl_val = SOFEOP1_TO_CPU_EN | RESUME1_TO_HPI_EN;// | SOFEOP1_TO_HPI_EN;
     6e8:	00811004 	movi	r2,1088
     6ec:	d0a6eb0d 	sth	r2,-25684(gp)
	UsbWrite(HPI_IRQ_ROUTING_REG, usb_ctl_val);
     6f0:	d0a6eb0b 	ldhu	r2,-25684(gp)
     6f4:	10bfffcc 	andi	r2,r2,65535
     6f8:	01005084 	movi	r4,322
     6fc:	100b883a 	mov	r5,r2
     700:	00026ac0 	call	26ac <UsbWrite>

	intStat = A_CHG_IRQ_EN | SOF_EOP_IRQ_EN ;
     704:	00808404 	movi	r2,528
     708:	d0a6ec0d 	sth	r2,-25680(gp)
	UsbWrite(HOST1_IRQ_EN_REG, intStat);
     70c:	d0a6ec0b 	ldhu	r2,-25680(gp)
     710:	10bfffcc 	andi	r2,r2,65535
     714:	01302314 	movui	r4,49292
     718:	100b883a 	mov	r5,r2
     71c:	00026ac0 	call	26ac <UsbWrite>
	// STEP 1a end

	// STEP 1b begin
	UsbWrite(COMM_R0,0x0000);//reset time
     720:	01007104 	movi	r4,452
     724:	000b883a 	mov	r5,zero
     728:	00026ac0 	call	26ac <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
     72c:	01007184 	movi	r4,454
     730:	000b883a 	mov	r5,zero
     734:	00026ac0 	call	26ac <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
     738:	01007204 	movi	r4,456
     73c:	000b883a 	mov	r5,zero
     740:	00026ac0 	call	26ac <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
     744:	01007284 	movi	r4,458
     748:	000b883a 	mov	r5,zero
     74c:	00026ac0 	call	26ac <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
     750:	01007304 	movi	r4,460
     754:	000b883a 	mov	r5,zero
     758:	00026ac0 	call	26ac <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
     75c:	01007384 	movi	r4,462
     760:	000b883a 	mov	r5,zero
     764:	00026ac0 	call	26ac <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
     768:	01007404 	movi	r4,464
     76c:	000b883a 	mov	r5,zero
     770:	00026ac0 	call	26ac <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
     774:	01007484 	movi	r4,466
     778:	000b883a 	mov	r5,zero
     77c:	00026ac0 	call	26ac <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
     780:	01007504 	movi	r4,468
     784:	000b883a 	mov	r5,zero
     788:	00026ac0 	call	26ac <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
     78c:	01007584 	movi	r4,470
     790:	000b883a 	mov	r5,zero
     794:	00026ac0 	call	26ac <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
     798:	01007604 	movi	r4,472
     79c:	000b883a 	mov	r5,zero
     7a0:	00026ac0 	call	26ac <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
     7a4:	01007684 	movi	r4,474
     7a8:	000b883a 	mov	r5,zero
     7ac:	00026ac0 	call	26ac <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
     7b0:	01007704 	movi	r4,476
     7b4:	000b883a 	mov	r5,zero
     7b8:	00026ac0 	call	26ac <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
     7bc:	01007784 	movi	r4,478
     7c0:	000b883a 	mov	r5,zero
     7c4:	00026ac0 	call	26ac <UsbWrite>
	UsbWrite(COMM_INT_NUM,HUSB_SIE1_INIT_INT); //HUSB_SIE1_INIT_INT
     7c8:	01007084 	movi	r4,450
     7cc:	01401c84 	movi	r5,114
     7d0:	00026ac0 	call	26ac <UsbWrite>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
     7d4:	01000044 	movi	r4,1
     7d8:	01738054 	movui	r5,52737
     7dc:	00002c80 	call	2c8 <IO_write>

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
     7e0:	0001883a 	nop
     7e4:	010000c4 	movi	r4,3
     7e8:	00003300 	call	330 <IO_read>
     7ec:	10bfffcc 	andi	r2,r2,65535
     7f0:	103ffc26 	beq	r2,zero,7e4 <__alt_data_end+0xfffab0b4>
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
     7f4:	0001883a 	nop
     7f8:	01000044 	movi	r4,1
     7fc:	00003300 	call	330 <IO_read>
     800:	10bfffcc 	andi	r2,r2,65535
     804:	1083fb58 	cmpnei	r2,r2,4077
     808:	10000826 	beq	r2,zero,82c <setup_keyboard+0x18c>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
     80c:	01000044 	movi	r4,1
     810:	00003300 	call	330 <IO_read>
     814:	10bfffcc 	andi	r2,r2,65535
     818:	01000074 	movhi	r4,1
     81c:	210b1204 	addi	r4,r4,11336
     820:	100b883a 	mov	r5,r2
     824:	00041180 	call	4118 <printf>
		goto USB_HOT_PLUG;
     828:	003fa506 	br	6c0 <__alt_data_end+0xfffaaf90>
	}
	// STEP 1b end

	printf("STEP 1 Complete");
     82c:	01000074 	movhi	r4,1
     830:	210b1b04 	addi	r4,r4,11372
     834:	00041180 	call	4118 <printf>
	// STEP 2 begin
	UsbWrite(COMM_INT_NUM,HUSB_RESET_INT); //husb reset
     838:	01007084 	movi	r4,450
     83c:	01401d04 	movi	r5,116
     840:	00026ac0 	call	26ac <UsbWrite>
	UsbWrite(COMM_R0,0x003c);//reset time
     844:	01007104 	movi	r4,452
     848:	01400f04 	movi	r5,60
     84c:	00026ac0 	call	26ac <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
     850:	01007184 	movi	r4,454
     854:	000b883a 	mov	r5,zero
     858:	00026ac0 	call	26ac <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
     85c:	01007204 	movi	r4,456
     860:	000b883a 	mov	r5,zero
     864:	00026ac0 	call	26ac <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
     868:	01007284 	movi	r4,458
     86c:	000b883a 	mov	r5,zero
     870:	00026ac0 	call	26ac <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
     874:	01007304 	movi	r4,460
     878:	000b883a 	mov	r5,zero
     87c:	00026ac0 	call	26ac <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
     880:	01007384 	movi	r4,462
     884:	000b883a 	mov	r5,zero
     888:	00026ac0 	call	26ac <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
     88c:	01007404 	movi	r4,464
     890:	000b883a 	mov	r5,zero
     894:	00026ac0 	call	26ac <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
     898:	01007484 	movi	r4,466
     89c:	000b883a 	mov	r5,zero
     8a0:	00026ac0 	call	26ac <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
     8a4:	01007504 	movi	r4,468
     8a8:	000b883a 	mov	r5,zero
     8ac:	00026ac0 	call	26ac <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
     8b0:	01007584 	movi	r4,470
     8b4:	000b883a 	mov	r5,zero
     8b8:	00026ac0 	call	26ac <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
     8bc:	01007604 	movi	r4,472
     8c0:	000b883a 	mov	r5,zero
     8c4:	00026ac0 	call	26ac <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
     8c8:	01007684 	movi	r4,474
     8cc:	000b883a 	mov	r5,zero
     8d0:	00026ac0 	call	26ac <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
     8d4:	01007704 	movi	r4,476
     8d8:	000b883a 	mov	r5,zero
     8dc:	00026ac0 	call	26ac <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
     8e0:	01007784 	movi	r4,478
     8e4:	000b883a 	mov	r5,zero
     8e8:	00026ac0 	call	26ac <UsbWrite>

	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
     8ec:	01000044 	movi	r4,1
     8f0:	01738054 	movui	r5,52737
     8f4:	00002c80 	call	2c8 <IO_write>

	while (IO_read(HPI_MAILBOX) != COMM_ACK)
     8f8:	0001883a 	nop
     8fc:	01000044 	movi	r4,1
     900:	00003300 	call	330 <IO_read>
     904:	10bfffcc 	andi	r2,r2,65535
     908:	1083fb58 	cmpnei	r2,r2,4077
     90c:	10000826 	beq	r2,zero,930 <setup_keyboard+0x290>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
     910:	01000044 	movi	r4,1
     914:	00003300 	call	330 <IO_read>
     918:	10bfffcc 	andi	r2,r2,65535
     91c:	01000074 	movhi	r4,1
     920:	210b1204 	addi	r4,r4,11336
     924:	100b883a 	mov	r5,r2
     928:	00041180 	call	4118 <printf>
		goto USB_HOT_PLUG;
     92c:	003f6406 	br	6c0 <__alt_data_end+0xfffaaf90>
	}
	// STEP 2 end

	ctl_reg = USB1_CTL_REG;
     930:	00b02284 	movi	r2,-16246
     934:	d0a6e70d 	sth	r2,-25700(gp)
	no_device = (A_DP_STAT | A_DM_STAT);
     938:	008c0004 	movi	r2,12288
     93c:	d0a6e78d 	sth	r2,-25698(gp)
	fs_device = A_DP_STAT;
     940:	00880004 	movi	r2,8192
     944:	d0a6e80d 	sth	r2,-25696(gp)
	usb_ctl_val = UsbRead(ctl_reg);
     948:	d0a6e70b 	ldhu	r2,-25700(gp)
     94c:	10bfffcc 	andi	r2,r2,65535
     950:	1009883a 	mov	r4,r2
     954:	00027000 	call	2700 <UsbRead>
     958:	d0a6eb0d 	sth	r2,-25684(gp)
		}
	}
	else
	{
		 check for low speed or full speed by reading D+ and D- lines */
		if (usb_ctl_val & fs_device)
     95c:	d0e6eb0b 	ldhu	r3,-25684(gp)
     960:	d0a6e80b 	ldhu	r2,-25696(gp)
     964:	1884703a 	and	r2,r3,r2
     968:	10bfffcc 	andi	r2,r2,65535
     96c:	10000426 	beq	r2,zero,980 <setup_keyboard+0x2e0>
		{
			printf("[INFO]: full speed device\n");
     970:	01000074 	movhi	r4,1
     974:	210b1f04 	addi	r4,r4,11388
     978:	000420c0 	call	420c <puts>
     97c:	00000306 	br	98c <setup_keyboard+0x2ec>
		}
		else
		{
			printf("[INFO]: low speed device\n");
     980:	01000074 	movhi	r4,1
     984:	210b2604 	addi	r4,r4,11416
     988:	000420c0 	call	420c <puts>



	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();
     98c:	00027f40 	call	27f4 <UsbSetAddress>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     990:	00000306 	br	9a0 <setup_keyboard+0x300>
	{
		UsbSetAddress();
     994:	00027f40 	call	27f4 <UsbSetAddress>
		usleep(10*1000);
     998:	0109c404 	movi	r4,10000
     99c:	0010ba80 	call	10ba8 <usleep>

	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     9a0:	010000c4 	movi	r4,3
     9a4:	00003300 	call	330 <IO_read>
     9a8:	10bfffcc 	andi	r2,r2,65535
     9ac:	1080040c 	andi	r2,r2,16
     9b0:	103ff826 	beq	r2,zero,994 <__alt_data_end+0xfffab264>
	{
		UsbSetAddress();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     9b4:	00036700 	call	3670 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506); // i
     9b8:	01000084 	movi	r4,2
     9bc:	01414184 	movi	r5,1286
     9c0:	00002c80 	call	2c8 <IO_write>
	printf("[ENUM PROCESS]:step 3 TD Status Byte is %x\n",IO_read(HPI_DATA));
     9c4:	0009883a 	mov	r4,zero
     9c8:	00003300 	call	330 <IO_read>
     9cc:	10bfffcc 	andi	r2,r2,65535
     9d0:	01000074 	movhi	r4,1
     9d4:	210b2d04 	addi	r4,r4,11444
     9d8:	100b883a 	mov	r5,r2
     9dc:	00041180 	call	4118 <printf>

	IO_write(HPI_ADDR,0x0508); // n
     9e0:	01000084 	movi	r4,2
     9e4:	01414204 	movi	r5,1288
     9e8:	00002c80 	call	2c8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     9ec:	0009883a 	mov	r4,zero
     9f0:	00003300 	call	330 <IO_read>
     9f4:	d0a6eb0d 	sth	r2,-25684(gp)
	printf("[ENUM PROCESS]:step 3 TD Control Byte is %x\n",usb_ctl_val);
     9f8:	d0a6eb0b 	ldhu	r2,-25684(gp)
     9fc:	10bfffcc 	andi	r2,r2,65535
     a00:	01000074 	movhi	r4,1
     a04:	210b3804 	addi	r4,r4,11488
     a08:	100b883a 	mov	r5,r2
     a0c:	00041180 	call	4118 <printf>
	while (usb_ctl_val != 0x03) // retries occurred
     a10:	0001883a 	nop
     a14:	d0a6eb0b 	ldhu	r2,-25684(gp)
     a18:	10bfffcc 	andi	r2,r2,65535
     a1c:	108000d8 	cmpnei	r2,r2,3
     a20:	10000326 	beq	r2,zero,a30 <setup_keyboard+0x390>
	{
		usb_ctl_val = UsbGetRetryCnt();
     a24:	00036f40 	call	36f4 <UsbGetRetryCnt>
     a28:	d0a6eb0d 	sth	r2,-25684(gp)

		goto USB_HOT_PLUG;
     a2c:	003f2406 	br	6c0 <__alt_data_end+0xfffaaf90>
	}

	printf("------------[ENUM PROCESS]:set address done!---------------\n");
     a30:	01000074 	movhi	r4,1
     a34:	210b4404 	addi	r4,r4,11536
     a38:	000420c0 	call	420c <puts>

	// STEP 4 begin
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1
     a3c:	00028f00 	call	28f0 <UsbGetDeviceDesc1>

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     a40:	00000306 	br	a50 <setup_keyboard+0x3b0>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
     a44:	00028f00 	call	28f0 <UsbGetDeviceDesc1>
		usleep(10*1000);
     a48:	0109c404 	movi	r4,10000
     a4c:	0010ba80 	call	10ba8 <usleep>
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     a50:	010000c4 	movi	r4,3
     a54:	00003300 	call	330 <IO_read>
     a58:	10bfffcc 	andi	r2,r2,65535
     a5c:	1080040c 	andi	r2,r2,16
     a60:	103ff826 	beq	r2,zero,a44 <__alt_data_end+0xfffab314>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     a64:	00036700 	call	3670 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     a68:	01000084 	movi	r4,2
     a6c:	01414184 	movi	r5,1286
     a70:	00002c80 	call	2c8 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
     a74:	0009883a 	mov	r4,zero
     a78:	00003300 	call	330 <IO_read>
     a7c:	10bfffcc 	andi	r2,r2,65535
     a80:	01000074 	movhi	r4,1
     a84:	210b5304 	addi	r4,r4,11596
     a88:	100b883a 	mov	r5,r2
     a8c:	00041180 	call	4118 <printf>

	IO_write(HPI_ADDR,0x0508);
     a90:	01000084 	movi	r4,2
     a94:	01414204 	movi	r5,1288
     a98:	00002c80 	call	2c8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     a9c:	0009883a 	mov	r4,zero
     aa0:	00003300 	call	330 <IO_read>
     aa4:	d0a6eb0d 	sth	r2,-25684(gp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
     aa8:	d0a6eb0b 	ldhu	r2,-25684(gp)
     aac:	10bfffcc 	andi	r2,r2,65535
     ab0:	01000074 	movhi	r4,1
     ab4:	210b5e04 	addi	r4,r4,11640
     ab8:	100b883a 	mov	r5,r2
     abc:	00041180 	call	4118 <printf>
	while (usb_ctl_val != 0x03)
     ac0:	00000206 	br	acc <setup_keyboard+0x42c>
	{
		usb_ctl_val = UsbGetRetryCnt();
     ac4:	00036f40 	call	36f4 <UsbGetRetryCnt>
     ac8:	d0a6eb0d 	sth	r2,-25684(gp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
     acc:	d0a6eb0b 	ldhu	r2,-25684(gp)
     ad0:	10bfffcc 	andi	r2,r2,65535
     ad4:	108000d8 	cmpnei	r2,r2,3
     ad8:	103ffa1e 	bne	r2,zero,ac4 <__alt_data_end+0xfffab394>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get device descriptor-1 done!-----------------\n");
     adc:	01000074 	movhi	r4,1
     ae0:	210b6a04 	addi	r4,r4,11688
     ae4:	000420c0 	call	420c <puts>


	//--------------------------------get device descriptor-2---------------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2
     ae8:	0002a340 	call	2a34 <UsbGetDeviceDesc2>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     aec:	00000306 	br	afc <setup_keyboard+0x45c>
	{
		//resend the get device descriptor
		//get device descriptor
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
     af0:	0002a340 	call	2a34 <UsbGetDeviceDesc2>
		usleep(10*1000);
     af4:	0109c404 	movi	r4,10000
     af8:	0010ba80 	call	10ba8 <usleep>
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     afc:	010000c4 	movi	r4,3
     b00:	00003300 	call	330 <IO_read>
     b04:	10bfffcc 	andi	r2,r2,65535
     b08:	1080040c 	andi	r2,r2,16
     b0c:	103ff826 	beq	r2,zero,af0 <__alt_data_end+0xfffab3c0>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     b10:	00036700 	call	3670 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     b14:	01000084 	movi	r4,2
     b18:	01414184 	movi	r5,1286
     b1c:	00002c80 	call	2c8 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
     b20:	0009883a 	mov	r4,zero
     b24:	00003300 	call	330 <IO_read>
     b28:	10bfffcc 	andi	r2,r2,65535
     b2c:	01000074 	movhi	r4,1
     b30:	210b5304 	addi	r4,r4,11596
     b34:	100b883a 	mov	r5,r2
     b38:	00041180 	call	4118 <printf>

	IO_write(HPI_ADDR,0x0508);
     b3c:	01000084 	movi	r4,2
     b40:	01414204 	movi	r5,1288
     b44:	00002c80 	call	2c8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     b48:	0009883a 	mov	r4,zero
     b4c:	00003300 	call	330 <IO_read>
     b50:	d0a6eb0d 	sth	r2,-25684(gp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
     b54:	d0a6eb0b 	ldhu	r2,-25684(gp)
     b58:	10bfffcc 	andi	r2,r2,65535
     b5c:	01000074 	movhi	r4,1
     b60:	210b5e04 	addi	r4,r4,11640
     b64:	100b883a 	mov	r5,r2
     b68:	00041180 	call	4118 <printf>
	while (usb_ctl_val != 0x03)
     b6c:	00000206 	br	b78 <setup_keyboard+0x4d8>
	{
		usb_ctl_val = UsbGetRetryCnt();
     b70:	00036f40 	call	36f4 <UsbGetRetryCnt>
     b74:	d0a6eb0d 	sth	r2,-25684(gp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
     b78:	d0a6eb0b 	ldhu	r2,-25684(gp)
     b7c:	10bfffcc 	andi	r2,r2,65535
     b80:	108000d8 	cmpnei	r2,r2,3
     b84:	103ffa1e 	bne	r2,zero,b70 <__alt_data_end+0xfffab440>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get device descriptor-2 done!--------------\n");
     b88:	01000074 	movhi	r4,1
     b8c:	210b7e04 	addi	r4,r4,11768
     b90:	000420c0 	call	420c <puts>


	// STEP 5 begin
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1
     b94:	0002c080 	call	2c08 <UsbGetConfigDesc1>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     b98:	00000306 	br	ba8 <setup_keyboard+0x508>
	{
		//resend the get device descriptor
		//get device descriptor

		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
     b9c:	0002c080 	call	2c08 <UsbGetConfigDesc1>
		usleep(10*1000);
     ba0:	0109c404 	movi	r4,10000
     ba4:	0010ba80 	call	10ba8 <usleep>
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     ba8:	010000c4 	movi	r4,3
     bac:	00003300 	call	330 <IO_read>
     bb0:	10bfffcc 	andi	r2,r2,65535
     bb4:	1080040c 	andi	r2,r2,16
     bb8:	103ff826 	beq	r2,zero,b9c <__alt_data_end+0xfffab46c>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     bbc:	00036700 	call	3670 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     bc0:	01000084 	movi	r4,2
     bc4:	01414184 	movi	r5,1286
     bc8:	00002c80 	call	2c8 <IO_write>
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));
     bcc:	0009883a 	mov	r4,zero
     bd0:	00003300 	call	330 <IO_read>
     bd4:	10bfffcc 	andi	r2,r2,65535
     bd8:	01000074 	movhi	r4,1
     bdc:	210b9004 	addi	r4,r4,11840
     be0:	100b883a 	mov	r5,r2
     be4:	00041180 	call	4118 <printf>

	IO_write(HPI_ADDR,0x0508);
     be8:	01000084 	movi	r4,2
     bec:	01414204 	movi	r5,1288
     bf0:	00002c80 	call	2c8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     bf4:	0009883a 	mov	r4,zero
     bf8:	00003300 	call	330 <IO_read>
     bfc:	d0a6eb0d 	sth	r2,-25684(gp)
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
     c00:	d0a6eb0b 	ldhu	r2,-25684(gp)
     c04:	10bfffcc 	andi	r2,r2,65535
     c08:	01000074 	movhi	r4,1
     c0c:	210b9b04 	addi	r4,r4,11884
     c10:	100b883a 	mov	r5,r2
     c14:	00041180 	call	4118 <printf>
	while (usb_ctl_val != 0x03)
     c18:	00000206 	br	c24 <setup_keyboard+0x584>
	{
		usb_ctl_val = UsbGetRetryCnt();
     c1c:	00036f40 	call	36f4 <UsbGetRetryCnt>
     c20:	d0a6eb0d 	sth	r2,-25684(gp)
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
     c24:	d0a6eb0b 	ldhu	r2,-25684(gp)
     c28:	10bfffcc 	andi	r2,r2,65535
     c2c:	108000d8 	cmpnei	r2,r2,3
     c30:	103ffa1e 	bne	r2,zero,c1c <__alt_data_end+0xfffab4ec>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}
	printf("------------[ENUM PROCESS]:get configuration descriptor-1 pass------------\n");
     c34:	01000074 	movhi	r4,1
     c38:	210ba704 	addi	r4,r4,11932
     c3c:	000420c0 	call	420c <puts>

	// STEP 6 begin
	//-----------------------------------get configuration descriptor-2------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2
     c40:	0002d940 	call	2d94 <UsbGetConfigDesc2>

	usleep(100*1000);
     c44:	010000b4 	movhi	r4,2
     c48:	2121a804 	addi	r4,r4,-31072
     c4c:	0010ba80 	call	10ba8 <usleep>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     c50:	00000306 	br	c60 <setup_keyboard+0x5c0>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
     c54:	0002d940 	call	2d94 <UsbGetConfigDesc2>
		usleep(10*1000);
     c58:	0109c404 	movi	r4,10000
     c5c:	0010ba80 	call	10ba8 <usleep>
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2

	usleep(100*1000);
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     c60:	010000c4 	movi	r4,3
     c64:	00003300 	call	330 <IO_read>
     c68:	10bfffcc 	andi	r2,r2,65535
     c6c:	1080040c 	andi	r2,r2,16
     c70:	103ff826 	beq	r2,zero,c54 <__alt_data_end+0xfffab524>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     c74:	00036700 	call	3670 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     c78:	01000084 	movi	r4,2
     c7c:	01414184 	movi	r5,1286
     c80:	00002c80 	call	2c8 <IO_write>
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));
     c84:	0009883a 	mov	r4,zero
     c88:	00003300 	call	330 <IO_read>
     c8c:	10bfffcc 	andi	r2,r2,65535
     c90:	01000074 	movhi	r4,1
     c94:	210bba04 	addi	r4,r4,12008
     c98:	100b883a 	mov	r5,r2
     c9c:	00041180 	call	4118 <printf>

	IO_write(HPI_ADDR,0x0508);
     ca0:	01000084 	movi	r4,2
     ca4:	01414204 	movi	r5,1288
     ca8:	00002c80 	call	2c8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     cac:	0009883a 	mov	r4,zero
     cb0:	00003300 	call	330 <IO_read>
     cb4:	d0a6eb0d 	sth	r2,-25684(gp)
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
     cb8:	d0a6eb0b 	ldhu	r2,-25684(gp)
     cbc:	10bfffcc 	andi	r2,r2,65535
     cc0:	01000074 	movhi	r4,1
     cc4:	210bc504 	addi	r4,r4,12052
     cc8:	100b883a 	mov	r5,r2
     ccc:	00041180 	call	4118 <printf>
	while (usb_ctl_val != 0x03)
     cd0:	00000206 	br	cdc <setup_keyboard+0x63c>
	{
		usb_ctl_val = UsbGetRetryCnt();
     cd4:	00036f40 	call	36f4 <UsbGetRetryCnt>
     cd8:	d0a6eb0d 	sth	r2,-25684(gp)
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
     cdc:	d0a6eb0b 	ldhu	r2,-25684(gp)
     ce0:	10bfffcc 	andi	r2,r2,65535
     ce4:	108000d8 	cmpnei	r2,r2,3
     ce8:	103ffa1e 	bne	r2,zero,cd4 <__alt_data_end+0xfffab5a4>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("-----------[ENUM PROCESS]:get configuration descriptor-2 done!------------\n");
     cec:	01000074 	movhi	r4,1
     cf0:	210bd104 	addi	r4,r4,12100
     cf4:	000420c0 	call	420c <puts>


	// ---------------------------------get device info---------------------------------------------//

	// TASK: Write the address to read from the memory for byte 7 of the interface descriptor to HPI_ADDR.
	IO_write(HPI_ADDR,0x056c);
     cf8:	01000084 	movi	r4,2
     cfc:	01415b04 	movi	r5,1388
     d00:	00002c80 	call	2c8 <IO_write>
	code = IO_read(HPI_DATA);
     d04:	0009883a 	mov	r4,zero
     d08:	00003300 	call	330 <IO_read>
     d0c:	d0a6ed0d 	sth	r2,-25676(gp)
	code = code & 0x003;
     d10:	d0a6ed0b 	ldhu	r2,-25676(gp)
     d14:	108000cc 	andi	r2,r2,3
     d18:	d0a6ed0d 	sth	r2,-25676(gp)
	printf("\ncode = %x\n", code);
     d1c:	d0a6ed0b 	ldhu	r2,-25676(gp)
     d20:	10bfffcc 	andi	r2,r2,65535
     d24:	01000074 	movhi	r4,1
     d28:	210be404 	addi	r4,r4,12176
     d2c:	100b883a 	mov	r5,r2
     d30:	00041180 	call	4118 <printf>

	if (code == 0x01)
     d34:	d0a6ed0b 	ldhu	r2,-25676(gp)
     d38:	10bfffcc 	andi	r2,r2,65535
     d3c:	10800058 	cmpnei	r2,r2,1
     d40:	1000041e 	bne	r2,zero,d54 <setup_keyboard+0x6b4>
	{
		printf("\n[INFO]:check TD rec data7 \n[INFO]:Keyboard Detected!!!\n\n");
     d44:	01000074 	movhi	r4,1
     d48:	210be704 	addi	r4,r4,12188
     d4c:	000420c0 	call	420c <puts>
     d50:	00000306 	br	d60 <setup_keyboard+0x6c0>
	}
	else
	{
		printf("\n[INFO]:Keyboard Not Detected!!! \n\n");
     d54:	01000074 	movhi	r4,1
     d58:	210bf604 	addi	r4,r4,12248
     d5c:	000420c0 	call	420c <puts>
	}

	// TASK: Write the address to read from the memory for the endpoint descriptor to HPI_ADDR.

	IO_write(HPI_ADDR,0x0576);
     d60:	01000084 	movi	r4,2
     d64:	01415d84 	movi	r5,1398
     d68:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x073F);
     d6c:	0009883a 	mov	r4,zero
     d70:	0141cfc4 	movi	r5,1855
     d74:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x8105);
     d78:	0009883a 	mov	r4,zero
     d7c:	01604154 	movui	r5,33029
     d80:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0003);
     d84:	0009883a 	mov	r4,zero
     d88:	014000c4 	movi	r5,3
     d8c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);
     d90:	0009883a 	mov	r4,zero
     d94:	01400204 	movi	r5,8
     d98:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0xAC0A);
     d9c:	0009883a 	mov	r4,zero
     da0:	016b0294 	movui	r5,44042
     da4:	00002c80 	call	2c8 <IO_write>
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0576); //HUSB_SIE1_pCurrentTDPtr
     da8:	01006c04 	movi	r4,432
     dac:	01415d84 	movi	r5,1398
     db0:	00026ac0 	call	26ac <UsbWrite>

	//data_size = (IO_read(HPI_DATA)>>8)&0x0ff;
	//data_size = 0x08;//(IO_read(HPI_DATA))&0x0ff;
	//UsbPrintMem();
	IO_write(HPI_ADDR,0x057c);
     db4:	01000084 	movi	r4,2
     db8:	01415f04 	movi	r5,1404
     dbc:	00002c80 	call	2c8 <IO_write>
	data_size = (IO_read(HPI_DATA))&0x0ff;
     dc0:	0009883a 	mov	r4,zero
     dc4:	00003300 	call	330 <IO_read>
     dc8:	d0a6eb85 	stb	r2,-25682(gp)
	printf("[ENUM PROCESS]:data packet size is %d\n",data_size);
     dcc:	d0a6eb83 	ldbu	r2,-25682(gp)
     dd0:	10803fcc 	andi	r2,r2,255
     dd4:	01000074 	movhi	r4,1
     dd8:	210bff04 	addi	r4,r4,12284
     ddc:	100b883a 	mov	r5,r2
     de0:	00041180 	call	4118 <printf>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration
     de4:	0002ff80 	call	2ff8 <UsbSetConfig>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     de8:	00000306 	br	df8 <setup_keyboard+0x758>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
     dec:	0002ff80 	call	2ff8 <UsbSetConfig>
		usleep(10*1000);
     df0:	0109c404 	movi	r4,10000
     df4:	0010ba80 	call	10ba8 <usleep>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     df8:	010000c4 	movi	r4,3
     dfc:	00003300 	call	330 <IO_read>
     e00:	10bfffcc 	andi	r2,r2,65535
     e04:	1080040c 	andi	r2,r2,16
     e08:	103ff826 	beq	r2,zero,dec <__alt_data_end+0xfffab6bc>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     e0c:	00036700 	call	3670 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     e10:	01000084 	movi	r4,2
     e14:	01414184 	movi	r5,1286
     e18:	00002c80 	call	2c8 <IO_write>
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));
     e1c:	0009883a 	mov	r4,zero
     e20:	00003300 	call	330 <IO_read>
     e24:	10bfffcc 	andi	r2,r2,65535
     e28:	01000074 	movhi	r4,1
     e2c:	210c0904 	addi	r4,r4,12324
     e30:	100b883a 	mov	r5,r2
     e34:	00041180 	call	4118 <printf>

	IO_write(HPI_ADDR,0x0508);
     e38:	01000084 	movi	r4,2
     e3c:	01414204 	movi	r5,1288
     e40:	00002c80 	call	2c8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     e44:	0009883a 	mov	r4,zero
     e48:	00003300 	call	330 <IO_read>
     e4c:	d0a6eb0d 	sth	r2,-25684(gp)
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
     e50:	d0a6eb0b 	ldhu	r2,-25684(gp)
     e54:	10bfffcc 	andi	r2,r2,65535
     e58:	01000074 	movhi	r4,1
     e5c:	210c1404 	addi	r4,r4,12368
     e60:	100b883a 	mov	r5,r2
     e64:	00041180 	call	4118 <printf>
	while (usb_ctl_val != 0x03)
     e68:	00000206 	br	e74 <setup_keyboard+0x7d4>
	{
		usb_ctl_val = UsbGetRetryCnt();
     e6c:	00036f40 	call	36f4 <UsbGetRetryCnt>
     e70:	d0a6eb0d 	sth	r2,-25684(gp)
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
     e74:	d0a6eb0b 	ldhu	r2,-25684(gp)
     e78:	10bfffcc 	andi	r2,r2,65535
     e7c:	108000d8 	cmpnei	r2,r2,3
     e80:	103ffa1e 	bne	r2,zero,e6c <__alt_data_end+0xfffab73c>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:set configuration done!-------------------\n");
     e84:	01000074 	movhi	r4,1
     e88:	210c2004 	addi	r4,r4,12416
     e8c:	000420c0 	call	420c <puts>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();
     e90:	00030f40 	call	30f4 <UsbClassRequest>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     e94:	00000306 	br	ea4 <setup_keyboard+0x804>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
     e98:	00030f40 	call	30f4 <UsbClassRequest>
		usleep(10*1000);
     e9c:	0109c404 	movi	r4,10000
     ea0:	0010ba80 	call	10ba8 <usleep>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     ea4:	010000c4 	movi	r4,3
     ea8:	00003300 	call	330 <IO_read>
     eac:	10bfffcc 	andi	r2,r2,65535
     eb0:	1080040c 	andi	r2,r2,16
     eb4:	103ff826 	beq	r2,zero,e98 <__alt_data_end+0xfffab768>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     eb8:	00036700 	call	3670 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     ebc:	01000084 	movi	r4,2
     ec0:	01414184 	movi	r5,1286
     ec4:	00002c80 	call	2c8 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
     ec8:	0009883a 	mov	r4,zero
     ecc:	00003300 	call	330 <IO_read>
     ed0:	10bfffcc 	andi	r2,r2,65535
     ed4:	01000074 	movhi	r4,1
     ed8:	210c3204 	addi	r4,r4,12488
     edc:	100b883a 	mov	r5,r2
     ee0:	00041180 	call	4118 <printf>

	IO_write(HPI_ADDR,0x0508);
     ee4:	01000084 	movi	r4,2
     ee8:	01414204 	movi	r5,1288
     eec:	00002c80 	call	2c8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     ef0:	0009883a 	mov	r4,zero
     ef4:	00003300 	call	330 <IO_read>
     ef8:	d0a6eb0d 	sth	r2,-25684(gp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
     efc:	d0a6eb0b 	ldhu	r2,-25684(gp)
     f00:	10bfffcc 	andi	r2,r2,65535
     f04:	01000074 	movhi	r4,1
     f08:	210c3d04 	addi	r4,r4,12532
     f0c:	100b883a 	mov	r5,r2
     f10:	00041180 	call	4118 <printf>
	while (usb_ctl_val != 0x03)
     f14:	00000206 	br	f20 <setup_keyboard+0x880>
	{
		usb_ctl_val = UsbGetRetryCnt();
     f18:	00036f40 	call	36f4 <UsbGetRetryCnt>
     f1c:	d0a6eb0d 	sth	r2,-25684(gp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
     f20:	d0a6eb0b 	ldhu	r2,-25684(gp)
     f24:	10bfffcc 	andi	r2,r2,65535
     f28:	108000d8 	cmpnei	r2,r2,3
     f2c:	103ffa1e 	bne	r2,zero,f18 <__alt_data_end+0xfffab7e8>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("------------[ENUM PROCESS]:class request out done!-------------------\n");
     f30:	01000074 	movhi	r4,1
     f34:	210c4904 	addi	r4,r4,12580
     f38:	000420c0 	call	420c <puts>

	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();
     f3c:	00031f00 	call	31f0 <UsbGetHidDesc>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     f40:	00000306 	br	f50 <setup_keyboard+0x8b0>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
     f44:	00031f00 	call	31f0 <UsbGetHidDesc>
		usleep(10*1000);
     f48:	0109c404 	movi	r4,10000
     f4c:	0010ba80 	call	10ba8 <usleep>
	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     f50:	010000c4 	movi	r4,3
     f54:	00003300 	call	330 <IO_read>
     f58:	10bfffcc 	andi	r2,r2,65535
     f5c:	1080040c 	andi	r2,r2,16
     f60:	103ff826 	beq	r2,zero,f44 <__alt_data_end+0xfffab814>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     f64:	00036700 	call	3670 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     f68:	01000084 	movi	r4,2
     f6c:	01414184 	movi	r5,1286
     f70:	00002c80 	call	2c8 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
     f74:	0009883a 	mov	r4,zero
     f78:	00003300 	call	330 <IO_read>
     f7c:	10bfffcc 	andi	r2,r2,65535
     f80:	01000074 	movhi	r4,1
     f84:	210c3204 	addi	r4,r4,12488
     f88:	100b883a 	mov	r5,r2
     f8c:	00041180 	call	4118 <printf>

	IO_write(HPI_ADDR,0x0508);
     f90:	01000084 	movi	r4,2
     f94:	01414204 	movi	r5,1288
     f98:	00002c80 	call	2c8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     f9c:	0009883a 	mov	r4,zero
     fa0:	00003300 	call	330 <IO_read>
     fa4:	d0a6eb0d 	sth	r2,-25684(gp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
     fa8:	d0a6eb0b 	ldhu	r2,-25684(gp)
     fac:	10bfffcc 	andi	r2,r2,65535
     fb0:	01000074 	movhi	r4,1
     fb4:	210c3d04 	addi	r4,r4,12532
     fb8:	100b883a 	mov	r5,r2
     fbc:	00041180 	call	4118 <printf>
	while (usb_ctl_val != 0x03)
     fc0:	00000206 	br	fcc <setup_keyboard+0x92c>
	{
		usb_ctl_val = UsbGetRetryCnt();
     fc4:	00036f40 	call	36f4 <UsbGetRetryCnt>
     fc8:	d0a6eb0d 	sth	r2,-25684(gp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
     fcc:	d0a6eb0b 	ldhu	r2,-25684(gp)
     fd0:	10bfffcc 	andi	r2,r2,65535
     fd4:	108000d8 	cmpnei	r2,r2,3
     fd8:	103ffa1e 	bne	r2,zero,fc4 <__alt_data_end+0xfffab894>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get descriptor (class 0x21) done!-------------------\n");
     fdc:	01000074 	movhi	r4,1
     fe0:	210c5b04 	addi	r4,r4,12652
     fe4:	000420c0 	call	420c <puts>

	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
     fe8:	00033340 	call	3334 <UsbGetReportDesc>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     fec:	00000306 	br	ffc <setup_keyboard+0x95c>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
     ff0:	00033340 	call	3334 <UsbGetReportDesc>
		usleep(10*1000);
     ff4:	0109c404 	movi	r4,10000
     ff8:	0010ba80 	call	10ba8 <usleep>
	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     ffc:	010000c4 	movi	r4,3
    1000:	00003300 	call	330 <IO_read>
    1004:	10bfffcc 	andi	r2,r2,65535
    1008:	1080040c 	andi	r2,r2,16
    100c:	103ff826 	beq	r2,zero,ff0 <__alt_data_end+0xfffab8c0>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
    1010:	00036700 	call	3670 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
    1014:	01000084 	movi	r4,2
    1018:	01414184 	movi	r5,1286
    101c:	00002c80 	call	2c8 <IO_write>
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));
    1020:	0009883a 	mov	r4,zero
    1024:	00003300 	call	330 <IO_read>
    1028:	10bfffcc 	andi	r2,r2,65535
    102c:	01000074 	movhi	r4,1
    1030:	210c6f04 	addi	r4,r4,12732
    1034:	100b883a 	mov	r5,r2
    1038:	00041180 	call	4118 <printf>

	IO_write(HPI_ADDR,0x0508);
    103c:	01000084 	movi	r4,2
    1040:	01414204 	movi	r5,1288
    1044:	00002c80 	call	2c8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
    1048:	0009883a 	mov	r4,zero
    104c:	00003300 	call	330 <IO_read>
    1050:	d0a6eb0d 	sth	r2,-25684(gp)
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
    1054:	d0a6eb0b 	ldhu	r2,-25684(gp)
    1058:	10bfffcc 	andi	r2,r2,65535
    105c:	01000074 	movhi	r4,1
    1060:	210c7b04 	addi	r4,r4,12780
    1064:	100b883a 	mov	r5,r2
    1068:	00041180 	call	4118 <printf>
	while (usb_ctl_val != 0x03)
    106c:	00000206 	br	1078 <setup_keyboard+0x9d8>
	{
		usb_ctl_val = UsbGetRetryCnt();
    1070:	00036f40 	call	36f4 <UsbGetRetryCnt>
    1074:	d0a6eb0d 	sth	r2,-25684(gp)
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
    1078:	d0a6eb0b 	ldhu	r2,-25684(gp)
    107c:	10bfffcc 	andi	r2,r2,65535
    1080:	108000d8 	cmpnei	r2,r2,3
    1084:	103ffa1e 	bne	r2,zero,1070 <__alt_data_end+0xfffab940>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get descriptor (class 0x22) done!----------------\n");
    1088:	01000074 	movhi	r4,1
    108c:	210c8704 	addi	r4,r4,12828
    1090:	000420c0 	call	420c <puts>


	//-----------------------------------get keycode value------------------------------------------------//


	return;
    1094:	0001883a 	nop
}
    1098:	e037883a 	mov	sp,fp
    109c:	dfc00117 	ldw	ra,4(sp)
    10a0:	df000017 	ldw	fp,0(sp)
    10a4:	dec00204 	addi	sp,sp,8
    10a8:	f800283a 	ret

000010ac <main>:
//Hits
player_projectile* check_projectiles(player_projectile *curr, enemy *em);
int hits_enemy(int x, int y, enemy *em);


int main(void){
    10ac:	defff104 	addi	sp,sp,-60
    10b0:	dfc00e15 	stw	ra,56(sp)
    10b4:	df000d15 	stw	fp,52(sp)
    10b8:	df000d04 	addi	fp,sp,52
	setup_keyboard();
    10bc:	00006a00 	call	6a0 <setup_keyboard>
	unsigned int keycode1,keycode2;
	player *first=(player *)malloc(sizeof(player));
    10c0:	01000604 	movi	r4,24
    10c4:	000391c0 	call	391c <malloc>
    10c8:	e0bff615 	stw	r2,-40(fp)
	player *second=(player *)malloc(sizeof(player));
    10cc:	01000604 	movi	r4,24
    10d0:	000391c0 	call	391c <malloc>
    10d4:	e0bff715 	stw	r2,-36(fp)
	int i=0;
    10d8:	e03ff415 	stw	zero,-48(fp)
	int num_of_enemies=0;
    10dc:	e03ff515 	stw	zero,-44(fp)
	enemy *head_enemies=NULL;
    10e0:	e03ffa15 	stw	zero,-24(fp)
	player_projectile *head_bullets=NULL;
    10e4:	e03ffb15 	stw	zero,-20(fp)
	init_players(first,second);
    10e8:	e13ff617 	ldw	r4,-40(fp)
    10ec:	e17ff717 	ldw	r5,-36(fp)
    10f0:	00012180 	call	1218 <init_players>
	render_players(first,second);
    10f4:	e13ff617 	ldw	r4,-40(fp)
    10f8:	e17ff717 	ldw	r5,-36(fp)
    10fc:	0001e140 	call	1e14 <render_players>
	unsigned int arr[4]={0,0,0,0};
    1100:	e03ffc15 	stw	zero,-16(fp)
    1104:	e03ffd15 	stw	zero,-12(fp)
    1108:	e03ffe15 	stw	zero,-8(fp)
    110c:	e03fff15 	stw	zero,-4(fp)
	while(1)
		{
			move_projectiles(head_bullets);
    1110:	e0bffb17 	ldw	r2,-20(fp)
    1114:	1009883a 	mov	r4,r2
    1118:	00013440 	call	1344 <move_projectiles>
			render_projectiles(head_bullets);
    111c:	e0bffb17 	ldw	r2,-20(fp)
    1120:	1009883a 	mov	r4,r2
    1124:	000138c0 	call	138c <render_projectiles>
			if(get_keycode(&keycode1,&keycode2)==0){
    1128:	e0fff804 	addi	r3,fp,-32
    112c:	e0bff904 	addi	r2,fp,-28
    1130:	1809883a 	mov	r4,r3
    1134:	100b883a 	mov	r5,r2
    1138:	00003940 	call	394 <get_keycode>
    113c:	1000181e 	bne	r2,zero,11a0 <main+0xf4>
				parse_keycode(arr,keycode1,keycode2);
    1140:	e0fff817 	ldw	r3,-32(fp)
    1144:	e0bff917 	ldw	r2,-28(fp)
    1148:	e13ffc04 	addi	r4,fp,-16
    114c:	180b883a 	mov	r5,r3
    1150:	100d883a 	mov	r6,r2
    1154:	00021780 	call	2178 <parse_keycode>
				if(keycode_effect(first,second,arr,&head_bullets,i%5)==1){
    1158:	e0bff417 	ldw	r2,-48(fp)
    115c:	1009883a 	mov	r4,r2
    1160:	01400144 	movi	r5,5
    1164:	00038b00 	call	38b0 <__modsi3>
    1168:	1009883a 	mov	r4,r2
    116c:	e0fffc04 	addi	r3,fp,-16
    1170:	e0bffb04 	addi	r2,fp,-20
    1174:	d9000015 	stw	r4,0(sp)
    1178:	e13ff617 	ldw	r4,-40(fp)
    117c:	e17ff717 	ldw	r5,-36(fp)
    1180:	180d883a 	mov	r6,r3
    1184:	100f883a 	mov	r7,r2
    1188:	0001f300 	call	1f30 <keycode_effect>
    118c:	10800058 	cmpnei	r2,r2,1
    1190:	1000031e 	bne	r2,zero,11a0 <main+0xf4>
				render_players(first,second);
    1194:	e13ff617 	ldw	r4,-40(fp)
    1198:	e17ff717 	ldw	r5,-36(fp)
    119c:	0001e140 	call	1e14 <render_players>
				}
			}
			if(num_of_enemies<3){
    11a0:	e0bff517 	ldw	r2,-44(fp)
    11a4:	108000c8 	cmpgei	r2,r2,3
    11a8:	1000031e 	bne	r2,zero,11b8 <main+0x10c>
				make_enemy(&head_enemies);
    11ac:	e0bffa04 	addi	r2,fp,-24
    11b0:	1009883a 	mov	r4,r2
    11b4:	00014840 	call	1484 <make_enemy>
			}
			render_enemies(head_enemies);
    11b8:	e0bffa17 	ldw	r2,-24(fp)
    11bc:	1009883a 	mov	r4,r2
    11c0:	0001acc0 	call	1acc <render_enemies>
			move_enemies(head_enemies);
    11c4:	e0bffa17 	ldw	r2,-24(fp)
    11c8:	1009883a 	mov	r4,r2
    11cc:	0001a480 	call	1a48 <move_enemies>
			head_enemies=(enemy *)delete_enemy(head_enemies);
    11d0:	e0bffa17 	ldw	r2,-24(fp)
    11d4:	1009883a 	mov	r4,r2
    11d8:	00015700 	call	1570 <delete_enemy>
    11dc:	e0bffa15 	stw	r2,-24(fp)
			num_of_enemies=count_enemies(head_enemies);
    11e0:	e0bffa17 	ldw	r2,-24(fp)
    11e4:	1009883a 	mov	r4,r2
    11e8:	00019f40 	call	19f4 <count_enemies>
    11ec:	e0bff515 	stw	r2,-44(fp)
			head_bullets = check_projectiles(head_bullets, head_enemies);
    11f0:	e0fffb17 	ldw	r3,-20(fp)
    11f4:	e0bffa17 	ldw	r2,-24(fp)
    11f8:	1809883a 	mov	r4,r3
    11fc:	100b883a 	mov	r5,r2
    1200:	00022b40 	call	22b4 <check_projectiles>
    1204:	e0bffb15 	stw	r2,-20(fp)
			i++;
    1208:	e0bff417 	ldw	r2,-48(fp)
    120c:	10800044 	addi	r2,r2,1
    1210:	e0bff415 	stw	r2,-48(fp)
		}
    1214:	003fbe06 	br	1110 <__alt_data_end+0xfffab9e0>

00001218 <init_players>:
				 {116,137},
				 {105,63},
				 {89,75},
				 {23,32}};			//bullet

void init_players(player *first,player *second){
    1218:	defffc04 	addi	sp,sp,-16
    121c:	dfc00315 	stw	ra,12(sp)
    1220:	df000215 	stw	fp,8(sp)
    1224:	df000204 	addi	fp,sp,8
    1228:	e13ffe15 	stw	r4,-8(fp)
    122c:	e17fff15 	stw	r5,-4(fp)
	if(first==NULL || second ==NULL)
    1230:	e0bffe17 	ldw	r2,-8(fp)
    1234:	10000226 	beq	r2,zero,1240 <init_players+0x28>
    1238:	e0bfff17 	ldw	r2,-4(fp)
    123c:	1000041e 	bne	r2,zero,1250 <init_players+0x38>
	{
		printf("players not instantiated");
    1240:	01000074 	movhi	r4,1
    1244:	210c9b04 	addi	r4,r4,12908
    1248:	00041180 	call	4118 <printf>
    124c:	00002406 	br	12e0 <init_players+0xc8>
	}
	else{
		first->x_pos = 300,
    1250:	e0bffe17 	ldw	r2,-8(fp)
    1254:	00c04b04 	movi	r3,300
    1258:	10c00015 	stw	r3,0(r2)
		first->y_pos = y_bounds - sizes[player2_sprite][1];
    125c:	00800074 	movhi	r2,1
    1260:	108d8f04 	addi	r2,r2,13884
    1264:	10800317 	ldw	r2,12(r2)
    1268:	00c077c4 	movi	r3,479
    126c:	1887c83a 	sub	r3,r3,r2
    1270:	e0bffe17 	ldw	r2,-8(fp)
    1274:	10c00115 	stw	r3,4(r2)
		first->health = 3;
    1278:	e0bffe17 	ldw	r2,-8(fp)
    127c:	00c000c4 	movi	r3,3
    1280:	10c00215 	stw	r3,8(r2)
		first->id=player2_sprite;
    1284:	e0bffe17 	ldw	r2,-8(fp)
    1288:	00c00044 	movi	r3,1
    128c:	10c00315 	stw	r3,12(r2)
		first->old_x =first->x_pos;
    1290:	e0bffe17 	ldw	r2,-8(fp)
    1294:	10c00017 	ldw	r3,0(r2)
    1298:	e0bffe17 	ldw	r2,-8(fp)
    129c:	10c00415 	stw	r3,16(r2)
		second->x_pos= 200;
    12a0:	e0bfff17 	ldw	r2,-4(fp)
    12a4:	00c03204 	movi	r3,200
    12a8:	10c00015 	stw	r3,0(r2)
		second->y_pos= y_bounds - sizes[player2_sprite][1];
    12ac:	00800074 	movhi	r2,1
    12b0:	108d8f04 	addi	r2,r2,13884
    12b4:	10800317 	ldw	r2,12(r2)
    12b8:	00c077c4 	movi	r3,479
    12bc:	1887c83a 	sub	r3,r3,r2
    12c0:	e0bfff17 	ldw	r2,-4(fp)
    12c4:	10c00115 	stw	r3,4(r2)
		second->health=3;
    12c8:	e0bfff17 	ldw	r2,-4(fp)
    12cc:	00c000c4 	movi	r3,3
    12d0:	10c00215 	stw	r3,8(r2)
		second->id = player2_sprite;
    12d4:	e0bfff17 	ldw	r2,-4(fp)
    12d8:	00c00044 	movi	r3,1
    12dc:	10c00315 	stw	r3,12(r2)
	}
}
    12e0:	e037883a 	mov	sp,fp
    12e4:	dfc00117 	ldw	ra,4(sp)
    12e8:	df000017 	ldw	fp,0(sp)
    12ec:	dec00204 	addi	sp,sp,8
    12f0:	f800283a 	ret

000012f4 <move_projectile>:

void move_projectile(player_projectile *head)
{
    12f4:	defffe04 	addi	sp,sp,-8
    12f8:	df000115 	stw	fp,4(sp)
    12fc:	df000104 	addi	fp,sp,4
    1300:	e13fff15 	stw	r4,-4(fp)
	if(head->y_pos<8)
    1304:	e0bfff17 	ldw	r2,-4(fp)
    1308:	10800117 	ldw	r2,4(r2)
    130c:	10800208 	cmpgei	r2,r2,8
    1310:	1000031e 	bne	r2,zero,1320 <move_projectile+0x2c>
		head->y_pos=0;
    1314:	e0bfff17 	ldw	r2,-4(fp)
    1318:	10000115 	stw	zero,4(r2)
    131c:	00000506 	br	1334 <move_projectile+0x40>
	else
		head->y_pos-=8;
    1320:	e0bfff17 	ldw	r2,-4(fp)
    1324:	10800117 	ldw	r2,4(r2)
    1328:	10fffe04 	addi	r3,r2,-8
    132c:	e0bfff17 	ldw	r2,-4(fp)
    1330:	10c00115 	stw	r3,4(r2)
}
    1334:	e037883a 	mov	sp,fp
    1338:	df000017 	ldw	fp,0(sp)
    133c:	dec00104 	addi	sp,sp,4
    1340:	f800283a 	ret

00001344 <move_projectiles>:

void move_projectiles(player_projectile *head)
{
    1344:	defffd04 	addi	sp,sp,-12
    1348:	dfc00215 	stw	ra,8(sp)
    134c:	df000115 	stw	fp,4(sp)
    1350:	df000104 	addi	fp,sp,4
    1354:	e13fff15 	stw	r4,-4(fp)
	while(head!=NULL)
    1358:	00000506 	br	1370 <move_projectiles+0x2c>
	{
		move_projectile(head);
    135c:	e13fff17 	ldw	r4,-4(fp)
    1360:	00012f40 	call	12f4 <move_projectile>
		head=head->next;
    1364:	e0bfff17 	ldw	r2,-4(fp)
    1368:	10800417 	ldw	r2,16(r2)
    136c:	e0bfff15 	stw	r2,-4(fp)
		head->y_pos-=8;
}

void move_projectiles(player_projectile *head)
{
	while(head!=NULL)
    1370:	e0bfff17 	ldw	r2,-4(fp)
    1374:	103ff91e 	bne	r2,zero,135c <__alt_data_end+0xfffabc2c>
	{
		move_projectile(head);
		head=head->next;
	}
}
    1378:	e037883a 	mov	sp,fp
    137c:	dfc00117 	ldw	ra,4(sp)
    1380:	df000017 	ldw	fp,0(sp)
    1384:	dec00204 	addi	sp,sp,8
    1388:	f800283a 	ret

0000138c <render_projectiles>:

void render_projectiles(player_projectile *head)
{
    138c:	defffc04 	addi	sp,sp,-16
    1390:	dfc00315 	stw	ra,12(sp)
    1394:	df000215 	stw	fp,8(sp)
    1398:	df000204 	addi	fp,sp,8
    139c:	e13fff15 	stw	r4,-4(fp)
	player_projectile *pr=head;
    13a0:	e0bfff17 	ldw	r2,-4(fp)
    13a4:	e0bffe15 	stw	r2,-8(fp)
		while(pr!=NULL){
    13a8:	00000506 	br	13c0 <render_projectiles+0x34>
			render_projectile(pr);
    13ac:	e13ffe17 	ldw	r4,-8(fp)
    13b0:	00013dc0 	call	13dc <render_projectile>
			pr=pr->next;
    13b4:	e0bffe17 	ldw	r2,-8(fp)
    13b8:	10800417 	ldw	r2,16(r2)
    13bc:	e0bffe15 	stw	r2,-8(fp)
}

void render_projectiles(player_projectile *head)
{
	player_projectile *pr=head;
		while(pr!=NULL){
    13c0:	e0bffe17 	ldw	r2,-8(fp)
    13c4:	103ff91e 	bne	r2,zero,13ac <__alt_data_end+0xfffabc7c>
			render_projectile(pr);
			pr=pr->next;
		}
}
    13c8:	e037883a 	mov	sp,fp
    13cc:	dfc00117 	ldw	ra,4(sp)
    13d0:	df000017 	ldw	fp,0(sp)
    13d4:	dec00204 	addi	sp,sp,8
    13d8:	f800283a 	ret

000013dc <render_projectile>:

void render_projectile(player_projectile *pr){
    13dc:	defffd04 	addi	sp,sp,-12
    13e0:	dfc00215 	stw	ra,8(sp)
    13e4:	df000115 	stw	fp,4(sp)
    13e8:	df000104 	addi	fp,sp,4
    13ec:	e13fff15 	stw	r4,-4(fp)
	if(pr==NULL){
    13f0:	e0bfff17 	ldw	r2,-4(fp)
    13f4:	1000041e 	bne	r2,zero,1408 <render_projectile+0x2c>
		printf("bullet not found");
    13f8:	01000074 	movhi	r4,1
    13fc:	210ca204 	addi	r4,r4,12936
    1400:	00041180 	call	4118 <printf>
    1404:	00001a06 	br	1470 <render_projectile+0x94>
		}
	else{
		renderer(pr->old_x,pr->old_y,13,1);//Shadow First
    1408:	e0bfff17 	ldw	r2,-4(fp)
    140c:	10c00217 	ldw	r3,8(r2)
    1410:	e0bfff17 	ldw	r2,-4(fp)
    1414:	10800317 	ldw	r2,12(r2)
    1418:	1809883a 	mov	r4,r3
    141c:	100b883a 	mov	r5,r2
    1420:	01800344 	movi	r6,13
    1424:	01c00044 	movi	r7,1
    1428:	0001bcc0 	call	1bcc <renderer>
		renderer(pr->x_pos,pr->y_pos,13,0);
    142c:	e0bfff17 	ldw	r2,-4(fp)
    1430:	10c00017 	ldw	r3,0(r2)
    1434:	e0bfff17 	ldw	r2,-4(fp)
    1438:	10800117 	ldw	r2,4(r2)
    143c:	1809883a 	mov	r4,r3
    1440:	100b883a 	mov	r5,r2
    1444:	01800344 	movi	r6,13
    1448:	000f883a 	mov	r7,zero
    144c:	0001bcc0 	call	1bcc <renderer>
		pr->old_x=pr->x_pos;
    1450:	e0bfff17 	ldw	r2,-4(fp)
    1454:	10c00017 	ldw	r3,0(r2)
    1458:	e0bfff17 	ldw	r2,-4(fp)
    145c:	10c00215 	stw	r3,8(r2)
		pr->old_y=pr->y_pos;
    1460:	e0bfff17 	ldw	r2,-4(fp)
    1464:	10c00117 	ldw	r3,4(r2)
    1468:	e0bfff17 	ldw	r2,-4(fp)
    146c:	10c00315 	stw	r3,12(r2)
		}
}
    1470:	e037883a 	mov	sp,fp
    1474:	dfc00117 	ldw	ra,4(sp)
    1478:	df000017 	ldw	fp,0(sp)
    147c:	dec00204 	addi	sp,sp,8
    1480:	f800283a 	ret

00001484 <make_enemy>:


void make_enemy(enemy **em){
    1484:	defffc04 	addi	sp,sp,-16
    1488:	dfc00315 	stw	ra,12(sp)
    148c:	df000215 	stw	fp,8(sp)
    1490:	df000204 	addi	fp,sp,8
    1494:	e13fff15 	stw	r4,-4(fp)
	enemy *generated=(enemy *)malloc(sizeof(enemy));
    1498:	01000704 	movi	r4,28
    149c:	000391c0 	call	391c <malloc>
    14a0:	e0bffe15 	stw	r2,-8(fp)
	generated->x_pos=rand()%500;
    14a4:	00042380 	call	4238 <rand>
    14a8:	1009883a 	mov	r4,r2
    14ac:	01407d04 	movi	r5,500
    14b0:	00038b00 	call	38b0 <__modsi3>
    14b4:	1007883a 	mov	r3,r2
    14b8:	e0bffe17 	ldw	r2,-8(fp)
    14bc:	10c00015 	stw	r3,0(r2)
	generated->y_pos=rand()%30;
    14c0:	00042380 	call	4238 <rand>
    14c4:	1009883a 	mov	r4,r2
    14c8:	01400784 	movi	r5,30
    14cc:	00038b00 	call	38b0 <__modsi3>
    14d0:	1007883a 	mov	r3,r2
    14d4:	e0bffe17 	ldw	r2,-8(fp)
    14d8:	10c00115 	stw	r3,4(r2)
	generated->old_x=generated->x_pos;
    14dc:	e0bffe17 	ldw	r2,-8(fp)
    14e0:	10c00017 	ldw	r3,0(r2)
    14e4:	e0bffe17 	ldw	r2,-8(fp)
    14e8:	10c00415 	stw	r3,16(r2)
	generated->old_y=generated->y_pos;
    14ec:	e0bffe17 	ldw	r2,-8(fp)
    14f0:	10c00117 	ldw	r3,4(r2)
    14f4:	e0bffe17 	ldw	r2,-8(fp)
    14f8:	10c00515 	stw	r3,20(r2)
	generated->health = 2;
    14fc:	e0bffe17 	ldw	r2,-8(fp)
    1500:	00c00084 	movi	r3,2
    1504:	10c00215 	stw	r3,8(r2)
	generated->id=rand()%10+3;
    1508:	00042380 	call	4238 <rand>
    150c:	1009883a 	mov	r4,r2
    1510:	01400284 	movi	r5,10
    1514:	00038b00 	call	38b0 <__modsi3>
    1518:	10c000c4 	addi	r3,r2,3
    151c:	e0bffe17 	ldw	r2,-8(fp)
    1520:	10c00315 	stw	r3,12(r2)
	if(generated->id==4){
    1524:	e0bffe17 	ldw	r2,-8(fp)
    1528:	10800317 	ldw	r2,12(r2)
    152c:	10800118 	cmpnei	r2,r2,4
    1530:	1000031e 	bne	r2,zero,1540 <make_enemy+0xbc>
		generated->id=5;
    1534:	e0bffe17 	ldw	r2,-8(fp)
    1538:	00c00144 	movi	r3,5
    153c:	10c00315 	stw	r3,12(r2)
	}
	generated->next = *em;
    1540:	e0bfff17 	ldw	r2,-4(fp)
    1544:	10c00017 	ldw	r3,0(r2)
    1548:	e0bffe17 	ldw	r2,-8(fp)
    154c:	10c00615 	stw	r3,24(r2)
	*em = generated;
    1550:	e0bfff17 	ldw	r2,-4(fp)
    1554:	e0fffe17 	ldw	r3,-8(fp)
    1558:	10c00015 	stw	r3,0(r2)
}
    155c:	e037883a 	mov	sp,fp
    1560:	dfc00117 	ldw	ra,4(sp)
    1564:	df000017 	ldw	fp,0(sp)
    1568:	dec00204 	addi	sp,sp,8
    156c:	f800283a 	ret

00001570 <delete_enemy>:

enemy * delete_enemy(enemy *curr)
{
    1570:	defffc04 	addi	sp,sp,-16
    1574:	dfc00315 	stw	ra,12(sp)
    1578:	df000215 	stw	fp,8(sp)
    157c:	df000204 	addi	fp,sp,8
    1580:	e13fff15 	stw	r4,-4(fp)
  if (curr == NULL)
    1584:	e0bfff17 	ldw	r2,-4(fp)
    1588:	1000021e 	bne	r2,zero,1594 <delete_enemy+0x24>
    return NULL;
    158c:	0005883a 	mov	r2,zero
    1590:	00011306 	br	19e0 <delete_enemy+0x470>

  if (curr->y_pos + sizes[curr->id][1]>=475 || curr->health==0) {
    1594:	e0bfff17 	ldw	r2,-4(fp)
    1598:	10c00117 	ldw	r3,4(r2)
    159c:	e0bfff17 	ldw	r2,-4(fp)
    15a0:	11000317 	ldw	r4,12(r2)
    15a4:	00800074 	movhi	r2,1
    15a8:	108d8f04 	addi	r2,r2,13884
    15ac:	200890fa 	slli	r4,r4,3
    15b0:	1105883a 	add	r2,r2,r4
    15b4:	10800104 	addi	r2,r2,4
    15b8:	10800017 	ldw	r2,0(r2)
    15bc:	1885883a 	add	r2,r3,r2
    15c0:	108076c8 	cmpgei	r2,r2,475
    15c4:	1000031e 	bne	r2,zero,15d4 <delete_enemy+0x64>
    15c8:	e0bfff17 	ldw	r2,-4(fp)
    15cc:	10800217 	ldw	r2,8(r2)
    15d0:	1000fb1e 	bne	r2,zero,19c0 <delete_enemy+0x450>
    enemy *tempNext;
    tempNext = curr->next;
    15d4:	e0bfff17 	ldw	r2,-4(fp)
    15d8:	10800617 	ldw	r2,24(r2)
    15dc:	e0bffe15 	stw	r2,-8(fp)
    renderer(curr->x_pos,curr->y_pos,curr->id,1);//Render shadow
    15e0:	e0bfff17 	ldw	r2,-4(fp)
    15e4:	11000017 	ldw	r4,0(r2)
    15e8:	e0bfff17 	ldw	r2,-4(fp)
    15ec:	10c00117 	ldw	r3,4(r2)
    15f0:	e0bfff17 	ldw	r2,-4(fp)
    15f4:	10800317 	ldw	r2,12(r2)
    15f8:	180b883a 	mov	r5,r3
    15fc:	100d883a 	mov	r6,r2
    1600:	01c00044 	movi	r7,1
    1604:	0001bcc0 	call	1bcc <renderer>
    if(curr->health==0)
    1608:	e0bfff17 	ldw	r2,-4(fp)
    160c:	10800217 	ldw	r2,8(r2)
    1610:	1000e71e 	bne	r2,zero,19b0 <delete_enemy+0x440>
    {
    	renderer(curr->x_pos+sizes[curr->id][0]/2-32,curr->y_pos+sizes[curr->id][0]/2-32,14,0);
    1614:	e0bfff17 	ldw	r2,-4(fp)
    1618:	10c00017 	ldw	r3,0(r2)
    161c:	e0bfff17 	ldw	r2,-4(fp)
    1620:	11000317 	ldw	r4,12(r2)
    1624:	00800074 	movhi	r2,1
    1628:	108d8f04 	addi	r2,r2,13884
    162c:	200890fa 	slli	r4,r4,3
    1630:	1105883a 	add	r2,r2,r4
    1634:	10800017 	ldw	r2,0(r2)
    1638:	1008d7fa 	srli	r4,r2,31
    163c:	2085883a 	add	r2,r4,r2
    1640:	1005d07a 	srai	r2,r2,1
    1644:	1885883a 	add	r2,r3,r2
    1648:	117ff804 	addi	r5,r2,-32
    164c:	e0bfff17 	ldw	r2,-4(fp)
    1650:	10c00117 	ldw	r3,4(r2)
    1654:	e0bfff17 	ldw	r2,-4(fp)
    1658:	11000317 	ldw	r4,12(r2)
    165c:	00800074 	movhi	r2,1
    1660:	108d8f04 	addi	r2,r2,13884
    1664:	200890fa 	slli	r4,r4,3
    1668:	1105883a 	add	r2,r2,r4
    166c:	10800017 	ldw	r2,0(r2)
    1670:	1008d7fa 	srli	r4,r2,31
    1674:	2085883a 	add	r2,r4,r2
    1678:	1005d07a 	srai	r2,r2,1
    167c:	1885883a 	add	r2,r3,r2
    1680:	10bff804 	addi	r2,r2,-32
    1684:	2809883a 	mov	r4,r5
    1688:	100b883a 	mov	r5,r2
    168c:	01800384 	movi	r6,14
    1690:	000f883a 	mov	r7,zero
    1694:	0001bcc0 	call	1bcc <renderer>
    	renderer(curr->x_pos+sizes[curr->id][0]/2-32,curr->y_pos+sizes[curr->id][0]/2-32,15,0);
    1698:	e0bfff17 	ldw	r2,-4(fp)
    169c:	10c00017 	ldw	r3,0(r2)
    16a0:	e0bfff17 	ldw	r2,-4(fp)
    16a4:	11000317 	ldw	r4,12(r2)
    16a8:	00800074 	movhi	r2,1
    16ac:	108d8f04 	addi	r2,r2,13884
    16b0:	200890fa 	slli	r4,r4,3
    16b4:	1105883a 	add	r2,r2,r4
    16b8:	10800017 	ldw	r2,0(r2)
    16bc:	1008d7fa 	srli	r4,r2,31
    16c0:	2085883a 	add	r2,r4,r2
    16c4:	1005d07a 	srai	r2,r2,1
    16c8:	1885883a 	add	r2,r3,r2
    16cc:	117ff804 	addi	r5,r2,-32
    16d0:	e0bfff17 	ldw	r2,-4(fp)
    16d4:	10c00117 	ldw	r3,4(r2)
    16d8:	e0bfff17 	ldw	r2,-4(fp)
    16dc:	11000317 	ldw	r4,12(r2)
    16e0:	00800074 	movhi	r2,1
    16e4:	108d8f04 	addi	r2,r2,13884
    16e8:	200890fa 	slli	r4,r4,3
    16ec:	1105883a 	add	r2,r2,r4
    16f0:	10800017 	ldw	r2,0(r2)
    16f4:	1008d7fa 	srli	r4,r2,31
    16f8:	2085883a 	add	r2,r4,r2
    16fc:	1005d07a 	srai	r2,r2,1
    1700:	1885883a 	add	r2,r3,r2
    1704:	10bff804 	addi	r2,r2,-32
    1708:	2809883a 	mov	r4,r5
    170c:	100b883a 	mov	r5,r2
    1710:	018003c4 	movi	r6,15
    1714:	000f883a 	mov	r7,zero
    1718:	0001bcc0 	call	1bcc <renderer>
    	renderer(curr->x_pos+sizes[curr->id][0]/2-32,curr->y_pos+sizes[curr->id][0]/2-32,16,0);
    171c:	e0bfff17 	ldw	r2,-4(fp)
    1720:	10c00017 	ldw	r3,0(r2)
    1724:	e0bfff17 	ldw	r2,-4(fp)
    1728:	11000317 	ldw	r4,12(r2)
    172c:	00800074 	movhi	r2,1
    1730:	108d8f04 	addi	r2,r2,13884
    1734:	200890fa 	slli	r4,r4,3
    1738:	1105883a 	add	r2,r2,r4
    173c:	10800017 	ldw	r2,0(r2)
    1740:	1008d7fa 	srli	r4,r2,31
    1744:	2085883a 	add	r2,r4,r2
    1748:	1005d07a 	srai	r2,r2,1
    174c:	1885883a 	add	r2,r3,r2
    1750:	117ff804 	addi	r5,r2,-32
    1754:	e0bfff17 	ldw	r2,-4(fp)
    1758:	10c00117 	ldw	r3,4(r2)
    175c:	e0bfff17 	ldw	r2,-4(fp)
    1760:	11000317 	ldw	r4,12(r2)
    1764:	00800074 	movhi	r2,1
    1768:	108d8f04 	addi	r2,r2,13884
    176c:	200890fa 	slli	r4,r4,3
    1770:	1105883a 	add	r2,r2,r4
    1774:	10800017 	ldw	r2,0(r2)
    1778:	1008d7fa 	srli	r4,r2,31
    177c:	2085883a 	add	r2,r4,r2
    1780:	1005d07a 	srai	r2,r2,1
    1784:	1885883a 	add	r2,r3,r2
    1788:	10bff804 	addi	r2,r2,-32
    178c:	2809883a 	mov	r4,r5
    1790:	100b883a 	mov	r5,r2
    1794:	01800404 	movi	r6,16
    1798:	000f883a 	mov	r7,zero
    179c:	0001bcc0 	call	1bcc <renderer>
    	renderer(curr->x_pos+sizes[curr->id][0]/2-32,curr->y_pos+sizes[curr->id][0]/2-32,17,0);
    17a0:	e0bfff17 	ldw	r2,-4(fp)
    17a4:	10c00017 	ldw	r3,0(r2)
    17a8:	e0bfff17 	ldw	r2,-4(fp)
    17ac:	11000317 	ldw	r4,12(r2)
    17b0:	00800074 	movhi	r2,1
    17b4:	108d8f04 	addi	r2,r2,13884
    17b8:	200890fa 	slli	r4,r4,3
    17bc:	1105883a 	add	r2,r2,r4
    17c0:	10800017 	ldw	r2,0(r2)
    17c4:	1008d7fa 	srli	r4,r2,31
    17c8:	2085883a 	add	r2,r4,r2
    17cc:	1005d07a 	srai	r2,r2,1
    17d0:	1885883a 	add	r2,r3,r2
    17d4:	117ff804 	addi	r5,r2,-32
    17d8:	e0bfff17 	ldw	r2,-4(fp)
    17dc:	10c00117 	ldw	r3,4(r2)
    17e0:	e0bfff17 	ldw	r2,-4(fp)
    17e4:	11000317 	ldw	r4,12(r2)
    17e8:	00800074 	movhi	r2,1
    17ec:	108d8f04 	addi	r2,r2,13884
    17f0:	200890fa 	slli	r4,r4,3
    17f4:	1105883a 	add	r2,r2,r4
    17f8:	10800017 	ldw	r2,0(r2)
    17fc:	1008d7fa 	srli	r4,r2,31
    1800:	2085883a 	add	r2,r4,r2
    1804:	1005d07a 	srai	r2,r2,1
    1808:	1885883a 	add	r2,r3,r2
    180c:	10bff804 	addi	r2,r2,-32
    1810:	2809883a 	mov	r4,r5
    1814:	100b883a 	mov	r5,r2
    1818:	01800444 	movi	r6,17
    181c:	000f883a 	mov	r7,zero
    1820:	0001bcc0 	call	1bcc <renderer>
    	renderer(curr->x_pos+sizes[curr->id][0]/2-32,curr->y_pos+sizes[curr->id][0]/2-32,18,0);
    1824:	e0bfff17 	ldw	r2,-4(fp)
    1828:	10c00017 	ldw	r3,0(r2)
    182c:	e0bfff17 	ldw	r2,-4(fp)
    1830:	11000317 	ldw	r4,12(r2)
    1834:	00800074 	movhi	r2,1
    1838:	108d8f04 	addi	r2,r2,13884
    183c:	200890fa 	slli	r4,r4,3
    1840:	1105883a 	add	r2,r2,r4
    1844:	10800017 	ldw	r2,0(r2)
    1848:	1008d7fa 	srli	r4,r2,31
    184c:	2085883a 	add	r2,r4,r2
    1850:	1005d07a 	srai	r2,r2,1
    1854:	1885883a 	add	r2,r3,r2
    1858:	117ff804 	addi	r5,r2,-32
    185c:	e0bfff17 	ldw	r2,-4(fp)
    1860:	10c00117 	ldw	r3,4(r2)
    1864:	e0bfff17 	ldw	r2,-4(fp)
    1868:	11000317 	ldw	r4,12(r2)
    186c:	00800074 	movhi	r2,1
    1870:	108d8f04 	addi	r2,r2,13884
    1874:	200890fa 	slli	r4,r4,3
    1878:	1105883a 	add	r2,r2,r4
    187c:	10800017 	ldw	r2,0(r2)
    1880:	1008d7fa 	srli	r4,r2,31
    1884:	2085883a 	add	r2,r4,r2
    1888:	1005d07a 	srai	r2,r2,1
    188c:	1885883a 	add	r2,r3,r2
    1890:	10bff804 	addi	r2,r2,-32
    1894:	2809883a 	mov	r4,r5
    1898:	100b883a 	mov	r5,r2
    189c:	01800484 	movi	r6,18
    18a0:	000f883a 	mov	r7,zero
    18a4:	0001bcc0 	call	1bcc <renderer>
    	renderer(curr->x_pos+sizes[curr->id][0]/2-32,curr->y_pos+sizes[curr->id][0]/2-32,19,0);
    18a8:	e0bfff17 	ldw	r2,-4(fp)
    18ac:	10c00017 	ldw	r3,0(r2)
    18b0:	e0bfff17 	ldw	r2,-4(fp)
    18b4:	11000317 	ldw	r4,12(r2)
    18b8:	00800074 	movhi	r2,1
    18bc:	108d8f04 	addi	r2,r2,13884
    18c0:	200890fa 	slli	r4,r4,3
    18c4:	1105883a 	add	r2,r2,r4
    18c8:	10800017 	ldw	r2,0(r2)
    18cc:	1008d7fa 	srli	r4,r2,31
    18d0:	2085883a 	add	r2,r4,r2
    18d4:	1005d07a 	srai	r2,r2,1
    18d8:	1885883a 	add	r2,r3,r2
    18dc:	117ff804 	addi	r5,r2,-32
    18e0:	e0bfff17 	ldw	r2,-4(fp)
    18e4:	10c00117 	ldw	r3,4(r2)
    18e8:	e0bfff17 	ldw	r2,-4(fp)
    18ec:	11000317 	ldw	r4,12(r2)
    18f0:	00800074 	movhi	r2,1
    18f4:	108d8f04 	addi	r2,r2,13884
    18f8:	200890fa 	slli	r4,r4,3
    18fc:	1105883a 	add	r2,r2,r4
    1900:	10800017 	ldw	r2,0(r2)
    1904:	1008d7fa 	srli	r4,r2,31
    1908:	2085883a 	add	r2,r4,r2
    190c:	1005d07a 	srai	r2,r2,1
    1910:	1885883a 	add	r2,r3,r2
    1914:	10bff804 	addi	r2,r2,-32
    1918:	2809883a 	mov	r4,r5
    191c:	100b883a 	mov	r5,r2
    1920:	018004c4 	movi	r6,19
    1924:	000f883a 	mov	r7,zero
    1928:	0001bcc0 	call	1bcc <renderer>
    	renderer(curr->x_pos+sizes[curr->id][0]/2-32,curr->y_pos+sizes[curr->id][0]/2-32,19,1);
    192c:	e0bfff17 	ldw	r2,-4(fp)
    1930:	10c00017 	ldw	r3,0(r2)
    1934:	e0bfff17 	ldw	r2,-4(fp)
    1938:	11000317 	ldw	r4,12(r2)
    193c:	00800074 	movhi	r2,1
    1940:	108d8f04 	addi	r2,r2,13884
    1944:	200890fa 	slli	r4,r4,3
    1948:	1105883a 	add	r2,r2,r4
    194c:	10800017 	ldw	r2,0(r2)
    1950:	1008d7fa 	srli	r4,r2,31
    1954:	2085883a 	add	r2,r4,r2
    1958:	1005d07a 	srai	r2,r2,1
    195c:	1885883a 	add	r2,r3,r2
    1960:	117ff804 	addi	r5,r2,-32
    1964:	e0bfff17 	ldw	r2,-4(fp)
    1968:	10c00117 	ldw	r3,4(r2)
    196c:	e0bfff17 	ldw	r2,-4(fp)
    1970:	11000317 	ldw	r4,12(r2)
    1974:	00800074 	movhi	r2,1
    1978:	108d8f04 	addi	r2,r2,13884
    197c:	200890fa 	slli	r4,r4,3
    1980:	1105883a 	add	r2,r2,r4
    1984:	10800017 	ldw	r2,0(r2)
    1988:	1008d7fa 	srli	r4,r2,31
    198c:	2085883a 	add	r2,r4,r2
    1990:	1005d07a 	srai	r2,r2,1
    1994:	1885883a 	add	r2,r3,r2
    1998:	10bff804 	addi	r2,r2,-32
    199c:	2809883a 	mov	r4,r5
    19a0:	100b883a 	mov	r5,r2
    19a4:	018004c4 	movi	r6,19
    19a8:	01c00044 	movi	r7,1
    19ac:	0001bcc0 	call	1bcc <renderer>
    }
    free(curr);
    19b0:	e13fff17 	ldw	r4,-4(fp)
    19b4:	00039300 	call	3930 <free>
    return tempNext;
    19b8:	e0bffe17 	ldw	r2,-8(fp)
    19bc:	00000806 	br	19e0 <delete_enemy+0x470>
  }
  curr->next = delete_enemy(curr->next);
    19c0:	e0bfff17 	ldw	r2,-4(fp)
    19c4:	10800617 	ldw	r2,24(r2)
    19c8:	1009883a 	mov	r4,r2
    19cc:	00015700 	call	1570 <delete_enemy>
    19d0:	1007883a 	mov	r3,r2
    19d4:	e0bfff17 	ldw	r2,-4(fp)
    19d8:	10c00615 	stw	r3,24(r2)
  return curr;
    19dc:	e0bfff17 	ldw	r2,-4(fp)
}
    19e0:	e037883a 	mov	sp,fp
    19e4:	dfc00117 	ldw	ra,4(sp)
    19e8:	df000017 	ldw	fp,0(sp)
    19ec:	dec00204 	addi	sp,sp,8
    19f0:	f800283a 	ret

000019f4 <count_enemies>:

int count_enemies(enemy *em){
    19f4:	defffc04 	addi	sp,sp,-16
    19f8:	df000315 	stw	fp,12(sp)
    19fc:	df000304 	addi	fp,sp,12
    1a00:	e13fff15 	stw	r4,-4(fp)
	int i=0;
    1a04:	e03ffd15 	stw	zero,-12(fp)
	enemy *start=em;
    1a08:	e0bfff17 	ldw	r2,-4(fp)
    1a0c:	e0bffe15 	stw	r2,-8(fp)
	while(start!=NULL){
    1a10:	00000606 	br	1a2c <count_enemies+0x38>
		start=start->next;
    1a14:	e0bffe17 	ldw	r2,-8(fp)
    1a18:	10800617 	ldw	r2,24(r2)
    1a1c:	e0bffe15 	stw	r2,-8(fp)
		i++;
    1a20:	e0bffd17 	ldw	r2,-12(fp)
    1a24:	10800044 	addi	r2,r2,1
    1a28:	e0bffd15 	stw	r2,-12(fp)
}

int count_enemies(enemy *em){
	int i=0;
	enemy *start=em;
	while(start!=NULL){
    1a2c:	e0bffe17 	ldw	r2,-8(fp)
    1a30:	103ff81e 	bne	r2,zero,1a14 <__alt_data_end+0xfffac2e4>
		start=start->next;
		i++;
	}
	return i;
    1a34:	e0bffd17 	ldw	r2,-12(fp)
}
    1a38:	e037883a 	mov	sp,fp
    1a3c:	df000017 	ldw	fp,0(sp)
    1a40:	dec00104 	addi	sp,sp,4
    1a44:	f800283a 	ret

00001a48 <move_enemies>:

void move_enemies(enemy *start){
    1a48:	defffc04 	addi	sp,sp,-16
    1a4c:	dfc00315 	stw	ra,12(sp)
    1a50:	df000215 	stw	fp,8(sp)
    1a54:	df000204 	addi	fp,sp,8
    1a58:	e13fff15 	stw	r4,-4(fp)
	if(start==NULL){
    1a5c:	e0bfff17 	ldw	r2,-4(fp)
    1a60:	1000041e 	bne	r2,zero,1a74 <move_enemies+0x2c>
		printf("You piece of shit\n");
    1a64:	01000074 	movhi	r4,1
    1a68:	210ca704 	addi	r4,r4,12956
    1a6c:	000420c0 	call	420c <puts>
    1a70:	00001106 	br	1ab8 <move_enemies+0x70>
	}
	else{
	enemy *em=start;
    1a74:	e0bfff17 	ldw	r2,-4(fp)
    1a78:	e0bffe15 	stw	r2,-8(fp)
	while(em!=NULL){
    1a7c:	00000c06 	br	1ab0 <move_enemies+0x68>
		move_enemy(em,em->x_pos,em->y_pos+3);
    1a80:	e0bffe17 	ldw	r2,-8(fp)
    1a84:	10c00017 	ldw	r3,0(r2)
    1a88:	e0bffe17 	ldw	r2,-8(fp)
    1a8c:	10800117 	ldw	r2,4(r2)
    1a90:	108000c4 	addi	r2,r2,3
    1a94:	e13ffe17 	ldw	r4,-8(fp)
    1a98:	180b883a 	mov	r5,r3
    1a9c:	100d883a 	mov	r6,r2
    1aa0:	00025900 	call	2590 <move_enemy>
		em=em->next;
    1aa4:	e0bffe17 	ldw	r2,-8(fp)
    1aa8:	10800617 	ldw	r2,24(r2)
    1aac:	e0bffe15 	stw	r2,-8(fp)
	if(start==NULL){
		printf("You piece of shit\n");
	}
	else{
	enemy *em=start;
	while(em!=NULL){
    1ab0:	e0bffe17 	ldw	r2,-8(fp)
    1ab4:	103ff21e 	bne	r2,zero,1a80 <__alt_data_end+0xfffac350>
		move_enemy(em,em->x_pos,em->y_pos+3);
		em=em->next;
		}
	}
}
    1ab8:	e037883a 	mov	sp,fp
    1abc:	dfc00117 	ldw	ra,4(sp)
    1ac0:	df000017 	ldw	fp,0(sp)
    1ac4:	dec00204 	addi	sp,sp,8
    1ac8:	f800283a 	ret

00001acc <render_enemies>:

void render_enemies(enemy *start){
    1acc:	defffc04 	addi	sp,sp,-16
    1ad0:	dfc00315 	stw	ra,12(sp)
    1ad4:	df000215 	stw	fp,8(sp)
    1ad8:	df000204 	addi	fp,sp,8
    1adc:	e13fff15 	stw	r4,-4(fp)
	enemy *em=start;
    1ae0:	e0bfff17 	ldw	r2,-4(fp)
    1ae4:	e0bffe15 	stw	r2,-8(fp)
	while(em!=NULL){
    1ae8:	00000506 	br	1b00 <render_enemies+0x34>
		render_enemy(em);
    1aec:	e13ffe17 	ldw	r4,-8(fp)
    1af0:	0001b1c0 	call	1b1c <render_enemy>
		em=em->next;
    1af4:	e0bffe17 	ldw	r2,-8(fp)
    1af8:	10800617 	ldw	r2,24(r2)
    1afc:	e0bffe15 	stw	r2,-8(fp)
	}
}

void render_enemies(enemy *start){
	enemy *em=start;
	while(em!=NULL){
    1b00:	e0bffe17 	ldw	r2,-8(fp)
    1b04:	103ff91e 	bne	r2,zero,1aec <__alt_data_end+0xfffac3bc>
		render_enemy(em);
		em=em->next;
	}
}
    1b08:	e037883a 	mov	sp,fp
    1b0c:	dfc00117 	ldw	ra,4(sp)
    1b10:	df000017 	ldw	fp,0(sp)
    1b14:	dec00204 	addi	sp,sp,8
    1b18:	f800283a 	ret

00001b1c <render_enemy>:

void render_enemy(enemy *em){
    1b1c:	defffd04 	addi	sp,sp,-12
    1b20:	dfc00215 	stw	ra,8(sp)
    1b24:	df000115 	stw	fp,4(sp)
    1b28:	df000104 	addi	fp,sp,4
    1b2c:	e13fff15 	stw	r4,-4(fp)
	if(em==NULL){
    1b30:	e0bfff17 	ldw	r2,-4(fp)
    1b34:	1000041e 	bne	r2,zero,1b48 <render_enemy+0x2c>
		printf("enemy not initialized");
    1b38:	01000074 	movhi	r4,1
    1b3c:	210cac04 	addi	r4,r4,12976
    1b40:	00041180 	call	4118 <printf>
    1b44:	00001c06 	br	1bb8 <render_enemy+0x9c>
		}
	else{
		renderer(em->old_x,em->old_y,em->id,1);//Shadow First
    1b48:	e0bfff17 	ldw	r2,-4(fp)
    1b4c:	11000417 	ldw	r4,16(r2)
    1b50:	e0bfff17 	ldw	r2,-4(fp)
    1b54:	10c00517 	ldw	r3,20(r2)
    1b58:	e0bfff17 	ldw	r2,-4(fp)
    1b5c:	10800317 	ldw	r2,12(r2)
    1b60:	180b883a 	mov	r5,r3
    1b64:	100d883a 	mov	r6,r2
    1b68:	01c00044 	movi	r7,1
    1b6c:	0001bcc0 	call	1bcc <renderer>
		renderer(em->x_pos,em->y_pos,em->id,0);
    1b70:	e0bfff17 	ldw	r2,-4(fp)
    1b74:	11000017 	ldw	r4,0(r2)
    1b78:	e0bfff17 	ldw	r2,-4(fp)
    1b7c:	10c00117 	ldw	r3,4(r2)
    1b80:	e0bfff17 	ldw	r2,-4(fp)
    1b84:	10800317 	ldw	r2,12(r2)
    1b88:	180b883a 	mov	r5,r3
    1b8c:	100d883a 	mov	r6,r2
    1b90:	000f883a 	mov	r7,zero
    1b94:	0001bcc0 	call	1bcc <renderer>
		em->old_x=em->x_pos;
    1b98:	e0bfff17 	ldw	r2,-4(fp)
    1b9c:	10c00017 	ldw	r3,0(r2)
    1ba0:	e0bfff17 	ldw	r2,-4(fp)
    1ba4:	10c00415 	stw	r3,16(r2)
		em->old_y=em->y_pos;
    1ba8:	e0bfff17 	ldw	r2,-4(fp)
    1bac:	10c00117 	ldw	r3,4(r2)
    1bb0:	e0bfff17 	ldw	r2,-4(fp)
    1bb4:	10c00515 	stw	r3,20(r2)
		}
}
    1bb8:	e037883a 	mov	sp,fp
    1bbc:	dfc00117 	ldw	ra,4(sp)
    1bc0:	df000017 	ldw	fp,0(sp)
    1bc4:	dec00204 	addi	sp,sp,8
    1bc8:	f800283a 	ret

00001bcc <renderer>:


void renderer(int x, int y, int sprite_num, int is_shadow)
{
    1bcc:	defffb04 	addi	sp,sp,-20
    1bd0:	df000415 	stw	fp,16(sp)
    1bd4:	df000404 	addi	fp,sp,16
    1bd8:	e13ffc15 	stw	r4,-16(fp)
    1bdc:	e17ffd15 	stw	r5,-12(fp)
    1be0:	e1bffe15 	stw	r6,-8(fp)
    1be4:	e1ffff15 	stw	r7,-4(fp)
	if(is_shadow==1)
    1be8:	e0bfff17 	ldw	r2,-4(fp)
    1bec:	10800058 	cmpnei	r2,r2,1
    1bf0:	1000051e 	bne	r2,zero,1c08 <renderer+0x3c>
		*sw_to_hw = 4;
    1bf4:	00800234 	movhi	r2,8
    1bf8:	10842004 	addi	r2,r2,4224
    1bfc:	00c00104 	movi	r3,4
    1c00:	10c00015 	stw	r3,0(r2)
    1c04:	00000606 	br	1c20 <renderer+0x54>
	else
		*sw_to_hw &= 0;
    1c08:	00800234 	movhi	r2,8
    1c0c:	10842004 	addi	r2,r2,4224
    1c10:	10800017 	ldw	r2,0(r2)
    1c14:	00800234 	movhi	r2,8
    1c18:	10842004 	addi	r2,r2,4224
    1c1c:	10000015 	stw	zero,0(r2)
	*sprite_number = sprite_num;
    1c20:	00800234 	movhi	r2,8
    1c24:	10842804 	addi	r2,r2,4256
    1c28:	e0fffe17 	ldw	r3,-8(fp)
    1c2c:	10c00015 	stw	r3,0(r2)
	*sprite_xy = 1024*x + y;
    1c30:	00800234 	movhi	r2,8
    1c34:	10842404 	addi	r2,r2,4240
    1c38:	e0fffc17 	ldw	r3,-16(fp)
    1c3c:	180892ba 	slli	r4,r3,10
    1c40:	e0fffd17 	ldw	r3,-12(fp)
    1c44:	20c7883a 	add	r3,r4,r3
    1c48:	10c00015 	stw	r3,0(r2)
	*sw_to_hw |= 2;
    1c4c:	00800234 	movhi	r2,8
    1c50:	10842004 	addi	r2,r2,4224
    1c54:	00c00234 	movhi	r3,8
    1c58:	18c42004 	addi	r3,r3,4224
    1c5c:	18c00017 	ldw	r3,0(r3)
    1c60:	18c00094 	ori	r3,r3,2
    1c64:	10c00015 	stw	r3,0(r2)
	while(*hw_to_sw%2 != 0)
    1c68:	0001883a 	nop
    1c6c:	00800234 	movhi	r2,8
    1c70:	10841c04 	addi	r2,r2,4208
    1c74:	10800017 	ldw	r2,0(r2)
    1c78:	1080004c 	andi	r2,r2,1
    1c7c:	103ffb1e 	bne	r2,zero,1c6c <__alt_data_end+0xfffac53c>
	{}
	*sw_to_hw &= ~2;
    1c80:	00800234 	movhi	r2,8
    1c84:	10842004 	addi	r2,r2,4224
    1c88:	00c00234 	movhi	r3,8
    1c8c:	18c42004 	addi	r3,r3,4224
    1c90:	19000017 	ldw	r4,0(r3)
    1c94:	00ffff44 	movi	r3,-3
    1c98:	20c6703a 	and	r3,r4,r3
    1c9c:	10c00015 	stw	r3,0(r2)
	while(*hw_to_sw != 1)
    1ca0:	0001883a 	nop
    1ca4:	00800234 	movhi	r2,8
    1ca8:	10841c04 	addi	r2,r2,4208
    1cac:	10800017 	ldw	r2,0(r2)
    1cb0:	10800058 	cmpnei	r2,r2,1
    1cb4:	103ffb1e 	bne	r2,zero,1ca4 <__alt_data_end+0xfffac574>
	{}
	*sw_to_hw |= 1;
    1cb8:	00800234 	movhi	r2,8
    1cbc:	10842004 	addi	r2,r2,4224
    1cc0:	00c00234 	movhi	r3,8
    1cc4:	18c42004 	addi	r3,r3,4224
    1cc8:	18c00017 	ldw	r3,0(r3)
    1ccc:	18c00054 	ori	r3,r3,1
    1cd0:	10c00015 	stw	r3,0(r2)
	return;
    1cd4:	0001883a 	nop
}
    1cd8:	e037883a 	mov	sp,fp
    1cdc:	df000017 	ldw	fp,0(sp)
    1ce0:	dec00104 	addi	sp,sp,4
    1ce4:	f800283a 	ret

00001ce8 <render_shadows>:

void render_shadows(player *first,player *second){
    1ce8:	defffc04 	addi	sp,sp,-16
    1cec:	dfc00315 	stw	ra,12(sp)
    1cf0:	df000215 	stw	fp,8(sp)
    1cf4:	df000204 	addi	fp,sp,8
    1cf8:	e13ffe15 	stw	r4,-8(fp)
    1cfc:	e17fff15 	stw	r5,-4(fp)
	if(first==NULL || second ==NULL){
    1d00:	e0bffe17 	ldw	r2,-8(fp)
    1d04:	10000226 	beq	r2,zero,1d10 <render_shadows+0x28>
    1d08:	e0bfff17 	ldw	r2,-4(fp)
    1d0c:	1000041e 	bne	r2,zero,1d20 <render_shadows+0x38>
			printf("players not instantiated");
    1d10:	01000074 	movhi	r4,1
    1d14:	210c9b04 	addi	r4,r4,12908
    1d18:	00041180 	call	4118 <printf>
    1d1c:	00001406 	br	1d70 <render_shadows+0x88>
	}
	else{
		renderer(first->old_x,first->old_y,first->id,1);
    1d20:	e0bffe17 	ldw	r2,-8(fp)
    1d24:	11000417 	ldw	r4,16(r2)
    1d28:	e0bffe17 	ldw	r2,-8(fp)
    1d2c:	10c00517 	ldw	r3,20(r2)
    1d30:	e0bffe17 	ldw	r2,-8(fp)
    1d34:	10800317 	ldw	r2,12(r2)
    1d38:	180b883a 	mov	r5,r3
    1d3c:	100d883a 	mov	r6,r2
    1d40:	01c00044 	movi	r7,1
    1d44:	0001bcc0 	call	1bcc <renderer>
		renderer(second->old_x,second->old_y,second->id,1);
    1d48:	e0bfff17 	ldw	r2,-4(fp)
    1d4c:	11000417 	ldw	r4,16(r2)
    1d50:	e0bfff17 	ldw	r2,-4(fp)
    1d54:	10c00517 	ldw	r3,20(r2)
    1d58:	e0bfff17 	ldw	r2,-4(fp)
    1d5c:	10800317 	ldw	r2,12(r2)
    1d60:	180b883a 	mov	r5,r3
    1d64:	100d883a 	mov	r6,r2
    1d68:	01c00044 	movi	r7,1
    1d6c:	0001bcc0 	call	1bcc <renderer>
	}
	return;
    1d70:	0001883a 	nop
}
    1d74:	e037883a 	mov	sp,fp
    1d78:	dfc00117 	ldw	ra,4(sp)
    1d7c:	df000017 	ldw	fp,0(sp)
    1d80:	dec00204 	addi	sp,sp,8
    1d84:	f800283a 	ret

00001d88 <render_shadow>:
void render_shadow(player *current){
    1d88:	defffd04 	addi	sp,sp,-12
    1d8c:	dfc00215 	stw	ra,8(sp)
    1d90:	df000115 	stw	fp,4(sp)
    1d94:	df000104 	addi	fp,sp,4
    1d98:	e13fff15 	stw	r4,-4(fp)
	if(current==NULL){
    1d9c:	e0bfff17 	ldw	r2,-4(fp)
    1da0:	1000041e 	bne	r2,zero,1db4 <render_shadow+0x2c>
			printf("players not instantiated");
    1da4:	01000074 	movhi	r4,1
    1da8:	210c9b04 	addi	r4,r4,12908
    1dac:	00041180 	call	4118 <printf>
    1db0:	00001206 	br	1dfc <render_shadow+0x74>
	}
	else{
		renderer(current->old_x,current->old_y,current->id,1);
    1db4:	e0bfff17 	ldw	r2,-4(fp)
    1db8:	11000417 	ldw	r4,16(r2)
    1dbc:	e0bfff17 	ldw	r2,-4(fp)
    1dc0:	10c00517 	ldw	r3,20(r2)
    1dc4:	e0bfff17 	ldw	r2,-4(fp)
    1dc8:	10800317 	ldw	r2,12(r2)
    1dcc:	180b883a 	mov	r5,r3
    1dd0:	100d883a 	mov	r6,r2
    1dd4:	01c00044 	movi	r7,1
    1dd8:	0001bcc0 	call	1bcc <renderer>
		current->old_x=current->x_pos;
    1ddc:	e0bfff17 	ldw	r2,-4(fp)
    1de0:	10c00017 	ldw	r3,0(r2)
    1de4:	e0bfff17 	ldw	r2,-4(fp)
    1de8:	10c00415 	stw	r3,16(r2)
		current->old_y=current->y_pos;
    1dec:	e0bfff17 	ldw	r2,-4(fp)
    1df0:	10c00117 	ldw	r3,4(r2)
    1df4:	e0bfff17 	ldw	r2,-4(fp)
    1df8:	10c00515 	stw	r3,20(r2)
	}
	return;
    1dfc:	0001883a 	nop
}
    1e00:	e037883a 	mov	sp,fp
    1e04:	dfc00117 	ldw	ra,4(sp)
    1e08:	df000017 	ldw	fp,0(sp)
    1e0c:	dec00204 	addi	sp,sp,8
    1e10:	f800283a 	ret

00001e14 <render_players>:

void render_players(player *first,player *second){
    1e14:	defffc04 	addi	sp,sp,-16
    1e18:	dfc00315 	stw	ra,12(sp)
    1e1c:	df000215 	stw	fp,8(sp)
    1e20:	df000204 	addi	fp,sp,8
    1e24:	e13ffe15 	stw	r4,-8(fp)
    1e28:	e17fff15 	stw	r5,-4(fp)
	if(first==NULL || second ==NULL){
    1e2c:	e0bffe17 	ldw	r2,-8(fp)
    1e30:	10000226 	beq	r2,zero,1e3c <render_players+0x28>
    1e34:	e0bfff17 	ldw	r2,-4(fp)
    1e38:	1000041e 	bne	r2,zero,1e4c <render_players+0x38>
		printf("players not instantiated");
    1e3c:	01000074 	movhi	r4,1
    1e40:	210c9b04 	addi	r4,r4,12908
    1e44:	00041180 	call	4118 <printf>
    1e48:	00001e06 	br	1ec4 <render_players+0xb0>
	}
	else{
		if(render_player_check(first)==0){
    1e4c:	e13ffe17 	ldw	r4,-8(fp)
    1e50:	0001ed80 	call	1ed8 <render_player_check>
    1e54:	10000c1e 	bne	r2,zero,1e88 <render_players+0x74>
			render_shadow(first);
    1e58:	e13ffe17 	ldw	r4,-8(fp)
    1e5c:	0001d880 	call	1d88 <render_shadow>
			renderer(first->x_pos,first->y_pos,first->id,0);
    1e60:	e0bffe17 	ldw	r2,-8(fp)
    1e64:	11000017 	ldw	r4,0(r2)
    1e68:	e0bffe17 	ldw	r2,-8(fp)
    1e6c:	10c00117 	ldw	r3,4(r2)
    1e70:	e0bffe17 	ldw	r2,-8(fp)
    1e74:	10800317 	ldw	r2,12(r2)
    1e78:	180b883a 	mov	r5,r3
    1e7c:	100d883a 	mov	r6,r2
    1e80:	000f883a 	mov	r7,zero
    1e84:	0001bcc0 	call	1bcc <renderer>

		}
		if(render_player_check(second)==0){
    1e88:	e13fff17 	ldw	r4,-4(fp)
    1e8c:	0001ed80 	call	1ed8 <render_player_check>
    1e90:	10000c1e 	bne	r2,zero,1ec4 <render_players+0xb0>
			render_shadow(second);
    1e94:	e13fff17 	ldw	r4,-4(fp)
    1e98:	0001d880 	call	1d88 <render_shadow>
			renderer(second->x_pos,second->y_pos,second->id,0);
    1e9c:	e0bfff17 	ldw	r2,-4(fp)
    1ea0:	11000017 	ldw	r4,0(r2)
    1ea4:	e0bfff17 	ldw	r2,-4(fp)
    1ea8:	10c00117 	ldw	r3,4(r2)
    1eac:	e0bfff17 	ldw	r2,-4(fp)
    1eb0:	10800317 	ldw	r2,12(r2)
    1eb4:	180b883a 	mov	r5,r3
    1eb8:	100d883a 	mov	r6,r2
    1ebc:	000f883a 	mov	r7,zero
    1ec0:	0001bcc0 	call	1bcc <renderer>

		}
	}
}
    1ec4:	e037883a 	mov	sp,fp
    1ec8:	dfc00117 	ldw	ra,4(sp)
    1ecc:	df000017 	ldw	fp,0(sp)
    1ed0:	dec00204 	addi	sp,sp,8
    1ed4:	f800283a 	ret

00001ed8 <render_player_check>:
int render_player_check(player *current){
    1ed8:	defffd04 	addi	sp,sp,-12
    1edc:	df000215 	stw	fp,8(sp)
    1ee0:	df000204 	addi	fp,sp,8
    1ee4:	e13fff15 	stw	r4,-4(fp)
	int i=0;
    1ee8:	e03ffe15 	stw	zero,-8(fp)
	if(current->x_pos==current->old_x && current->y_pos==current->old_y){
    1eec:	e0bfff17 	ldw	r2,-4(fp)
    1ef0:	10c00017 	ldw	r3,0(r2)
    1ef4:	e0bfff17 	ldw	r2,-4(fp)
    1ef8:	10800417 	ldw	r2,16(r2)
    1efc:	1880071e 	bne	r3,r2,1f1c <render_player_check+0x44>
    1f00:	e0bfff17 	ldw	r2,-4(fp)
    1f04:	10c00117 	ldw	r3,4(r2)
    1f08:	e0bfff17 	ldw	r2,-4(fp)
    1f0c:	10800517 	ldw	r2,20(r2)
    1f10:	1880021e 	bne	r3,r2,1f1c <render_player_check+0x44>
		i=1;
    1f14:	00800044 	movi	r2,1
    1f18:	e0bffe15 	stw	r2,-8(fp)
	}
	return i;
    1f1c:	e0bffe17 	ldw	r2,-8(fp)
}
    1f20:	e037883a 	mov	sp,fp
    1f24:	df000017 	ldw	fp,0(sp)
    1f28:	dec00104 	addi	sp,sp,4
    1f2c:	f800283a 	ret

00001f30 <keycode_effect>:
//	if(current->x_pos==current->old_x && current->y_pos==current->old_y){
//		i=1;
//	}
//	return i;
//}
int keycode_effect(player *first,player *second,unsigned int *arr, player_projectile **bullets, int can_fire_n){
    1f30:	defff804 	addi	sp,sp,-32
    1f34:	dfc00715 	stw	ra,28(sp)
    1f38:	df000615 	stw	fp,24(sp)
    1f3c:	df000604 	addi	fp,sp,24
    1f40:	e13ffc15 	stw	r4,-16(fp)
    1f44:	e17ffd15 	stw	r5,-12(fp)
    1f48:	e1bffe15 	stw	r6,-8(fp)
    1f4c:	e1ffff15 	stw	r7,-4(fp)
	int i=0;
    1f50:	e03ffa15 	stw	zero,-24(fp)
	int j=0;
    1f54:	e03ffb15 	stw	zero,-20(fp)
	for(i=0;i<4;i++){
    1f58:	e03ffa15 	stw	zero,-24(fp)
    1f5c:	00007d06 	br	2154 <keycode_effect+0x224>
		if(arr[i]==0x04){
    1f60:	e0bffa17 	ldw	r2,-24(fp)
    1f64:	1085883a 	add	r2,r2,r2
    1f68:	1085883a 	add	r2,r2,r2
    1f6c:	1007883a 	mov	r3,r2
    1f70:	e0bffe17 	ldw	r2,-8(fp)
    1f74:	10c5883a 	add	r2,r2,r3
    1f78:	10800017 	ldw	r2,0(r2)
    1f7c:	10800118 	cmpnei	r2,r2,4
    1f80:	10000b1e 	bne	r2,zero,1fb0 <keycode_effect+0x80>
			j=1;
    1f84:	00800044 	movi	r2,1
    1f88:	e0bffb15 	stw	r2,-20(fp)
			move_player(first,first->x_pos-10,first->y_pos);
    1f8c:	e0bffc17 	ldw	r2,-16(fp)
    1f90:	10800017 	ldw	r2,0(r2)
    1f94:	10fffd84 	addi	r3,r2,-10
    1f98:	e0bffc17 	ldw	r2,-16(fp)
    1f9c:	10800117 	ldw	r2,4(r2)
    1fa0:	e13ffc17 	ldw	r4,-16(fp)
    1fa4:	180b883a 	mov	r5,r3
    1fa8:	100d883a 	mov	r6,r2
    1fac:	00024740 	call	2474 <move_player>
		}
		if(arr[i]==0x07){
    1fb0:	e0bffa17 	ldw	r2,-24(fp)
    1fb4:	1085883a 	add	r2,r2,r2
    1fb8:	1085883a 	add	r2,r2,r2
    1fbc:	1007883a 	mov	r3,r2
    1fc0:	e0bffe17 	ldw	r2,-8(fp)
    1fc4:	10c5883a 	add	r2,r2,r3
    1fc8:	10800017 	ldw	r2,0(r2)
    1fcc:	108001d8 	cmpnei	r2,r2,7
    1fd0:	10000b1e 	bne	r2,zero,2000 <keycode_effect+0xd0>
			j=1;
    1fd4:	00800044 	movi	r2,1
    1fd8:	e0bffb15 	stw	r2,-20(fp)
			move_player(first,first->x_pos+10,first->y_pos);
    1fdc:	e0bffc17 	ldw	r2,-16(fp)
    1fe0:	10800017 	ldw	r2,0(r2)
    1fe4:	10c00284 	addi	r3,r2,10
    1fe8:	e0bffc17 	ldw	r2,-16(fp)
    1fec:	10800117 	ldw	r2,4(r2)
    1ff0:	e13ffc17 	ldw	r4,-16(fp)
    1ff4:	180b883a 	mov	r5,r3
    1ff8:	100d883a 	mov	r6,r2
    1ffc:	00024740 	call	2474 <move_player>
		}
		if(arr[i]==0x1a){
    2000:	e0bffa17 	ldw	r2,-24(fp)
    2004:	1085883a 	add	r2,r2,r2
    2008:	1085883a 	add	r2,r2,r2
    200c:	1007883a 	mov	r3,r2
    2010:	e0bffe17 	ldw	r2,-8(fp)
    2014:	10c5883a 	add	r2,r2,r3
    2018:	10800017 	ldw	r2,0(r2)
    201c:	10800698 	cmpnei	r2,r2,26
    2020:	10000c1e 	bne	r2,zero,2054 <keycode_effect+0x124>
			if(can_fire_n == 0)
    2024:	e0800217 	ldw	r2,8(fp)
    2028:	10000a1e 	bne	r2,zero,2054 <keycode_effect+0x124>
			{
				j=1;
    202c:	00800044 	movi	r2,1
    2030:	e0bffb15 	stw	r2,-20(fp)
				*bullets = fire_projectile(first, *bullets);
    2034:	e0bfff17 	ldw	r2,-4(fp)
    2038:	10800017 	ldw	r2,0(r2)
    203c:	e13ffc17 	ldw	r4,-16(fp)
    2040:	100b883a 	mov	r5,r2
    2044:	00021ec0 	call	21ec <fire_projectile>
    2048:	1007883a 	mov	r3,r2
    204c:	e0bfff17 	ldw	r2,-4(fp)
    2050:	10c00015 	stw	r3,0(r2)
			}
		}
		if(arr[i]==0x50){
    2054:	e0bffa17 	ldw	r2,-24(fp)
    2058:	1085883a 	add	r2,r2,r2
    205c:	1085883a 	add	r2,r2,r2
    2060:	1007883a 	mov	r3,r2
    2064:	e0bffe17 	ldw	r2,-8(fp)
    2068:	10c5883a 	add	r2,r2,r3
    206c:	10800017 	ldw	r2,0(r2)
    2070:	10801418 	cmpnei	r2,r2,80
    2074:	10000b1e 	bne	r2,zero,20a4 <keycode_effect+0x174>
			j=1;
    2078:	00800044 	movi	r2,1
    207c:	e0bffb15 	stw	r2,-20(fp)
			move_player(second,second->x_pos-10,second->y_pos);
    2080:	e0bffd17 	ldw	r2,-12(fp)
    2084:	10800017 	ldw	r2,0(r2)
    2088:	10fffd84 	addi	r3,r2,-10
    208c:	e0bffd17 	ldw	r2,-12(fp)
    2090:	10800117 	ldw	r2,4(r2)
    2094:	e13ffd17 	ldw	r4,-12(fp)
    2098:	180b883a 	mov	r5,r3
    209c:	100d883a 	mov	r6,r2
    20a0:	00024740 	call	2474 <move_player>
		}
		if(arr[i]==0x4f){
    20a4:	e0bffa17 	ldw	r2,-24(fp)
    20a8:	1085883a 	add	r2,r2,r2
    20ac:	1085883a 	add	r2,r2,r2
    20b0:	1007883a 	mov	r3,r2
    20b4:	e0bffe17 	ldw	r2,-8(fp)
    20b8:	10c5883a 	add	r2,r2,r3
    20bc:	10800017 	ldw	r2,0(r2)
    20c0:	108013d8 	cmpnei	r2,r2,79
    20c4:	10000b1e 	bne	r2,zero,20f4 <keycode_effect+0x1c4>
			j=1;
    20c8:	00800044 	movi	r2,1
    20cc:	e0bffb15 	stw	r2,-20(fp)
			move_player(second,second->x_pos+10,second->y_pos);
    20d0:	e0bffd17 	ldw	r2,-12(fp)
    20d4:	10800017 	ldw	r2,0(r2)
    20d8:	10c00284 	addi	r3,r2,10
    20dc:	e0bffd17 	ldw	r2,-12(fp)
    20e0:	10800117 	ldw	r2,4(r2)
    20e4:	e13ffd17 	ldw	r4,-12(fp)
    20e8:	180b883a 	mov	r5,r3
    20ec:	100d883a 	mov	r6,r2
    20f0:	00024740 	call	2474 <move_player>
		}
		if(arr[i]==0x52){
    20f4:	e0bffa17 	ldw	r2,-24(fp)
    20f8:	1085883a 	add	r2,r2,r2
    20fc:	1085883a 	add	r2,r2,r2
    2100:	1007883a 	mov	r3,r2
    2104:	e0bffe17 	ldw	r2,-8(fp)
    2108:	10c5883a 	add	r2,r2,r3
    210c:	10800017 	ldw	r2,0(r2)
    2110:	10801498 	cmpnei	r2,r2,82
    2114:	10000c1e 	bne	r2,zero,2148 <keycode_effect+0x218>
			if(can_fire_n == 0)
    2118:	e0800217 	ldw	r2,8(fp)
    211c:	10000a1e 	bne	r2,zero,2148 <keycode_effect+0x218>
			{
				j=1;
    2120:	00800044 	movi	r2,1
    2124:	e0bffb15 	stw	r2,-20(fp)
				*bullets = fire_projectile(second, *bullets);
    2128:	e0bfff17 	ldw	r2,-4(fp)
    212c:	10800017 	ldw	r2,0(r2)
    2130:	e13ffd17 	ldw	r4,-12(fp)
    2134:	100b883a 	mov	r5,r2
    2138:	00021ec0 	call	21ec <fire_projectile>
    213c:	1007883a 	mov	r3,r2
    2140:	e0bfff17 	ldw	r2,-4(fp)
    2144:	10c00015 	stw	r3,0(r2)
//	return i;
//}
int keycode_effect(player *first,player *second,unsigned int *arr, player_projectile **bullets, int can_fire_n){
	int i=0;
	int j=0;
	for(i=0;i<4;i++){
    2148:	e0bffa17 	ldw	r2,-24(fp)
    214c:	10800044 	addi	r2,r2,1
    2150:	e0bffa15 	stw	r2,-24(fp)
    2154:	e0bffa17 	ldw	r2,-24(fp)
    2158:	10800110 	cmplti	r2,r2,4
    215c:	103f801e 	bne	r2,zero,1f60 <__alt_data_end+0xfffac830>
				j=1;
				*bullets = fire_projectile(second, *bullets);
			}
		}
	}
	return j;
    2160:	e0bffb17 	ldw	r2,-20(fp)
}
    2164:	e037883a 	mov	sp,fp
    2168:	dfc00117 	ldw	ra,4(sp)
    216c:	df000017 	ldw	fp,0(sp)
    2170:	dec00204 	addi	sp,sp,8
    2174:	f800283a 	ret

00002178 <parse_keycode>:
void parse_keycode(unsigned int *arr,unsigned int keycode1,unsigned int keycode2){
    2178:	defffc04 	addi	sp,sp,-16
    217c:	df000315 	stw	fp,12(sp)
    2180:	df000304 	addi	fp,sp,12
    2184:	e13ffd15 	stw	r4,-12(fp)
    2188:	e17ffe15 	stw	r5,-8(fp)
    218c:	e1bfff15 	stw	r6,-4(fp)
	arr[0]=keycode1%256;
    2190:	e0bffe17 	ldw	r2,-8(fp)
    2194:	10c03fcc 	andi	r3,r2,255
    2198:	e0bffd17 	ldw	r2,-12(fp)
    219c:	10c00015 	stw	r3,0(r2)
	arr[1]=keycode1/256;
    21a0:	e0bffd17 	ldw	r2,-12(fp)
    21a4:	10800104 	addi	r2,r2,4
    21a8:	e0fffe17 	ldw	r3,-8(fp)
    21ac:	1806d23a 	srli	r3,r3,8
    21b0:	10c00015 	stw	r3,0(r2)
	arr[2]=keycode2%256;
    21b4:	e0bffd17 	ldw	r2,-12(fp)
    21b8:	10800204 	addi	r2,r2,8
    21bc:	e0ffff17 	ldw	r3,-4(fp)
    21c0:	18c03fcc 	andi	r3,r3,255
    21c4:	10c00015 	stw	r3,0(r2)
	arr[3]=keycode2/256;
    21c8:	e0bffd17 	ldw	r2,-12(fp)
    21cc:	10800304 	addi	r2,r2,12
    21d0:	e0ffff17 	ldw	r3,-4(fp)
    21d4:	1806d23a 	srli	r3,r3,8
    21d8:	10c00015 	stw	r3,0(r2)
}
    21dc:	e037883a 	mov	sp,fp
    21e0:	df000017 	ldw	fp,0(sp)
    21e4:	dec00104 	addi	sp,sp,4
    21e8:	f800283a 	ret

000021ec <fire_projectile>:


player_projectile* fire_projectile(player *current, player_projectile *head)
{
    21ec:	defffb04 	addi	sp,sp,-20
    21f0:	dfc00415 	stw	ra,16(sp)
    21f4:	df000315 	stw	fp,12(sp)
    21f8:	df000304 	addi	fp,sp,12
    21fc:	e13ffe15 	stw	r4,-8(fp)
    2200:	e17fff15 	stw	r5,-4(fp)
	player_projectile *new=(player_projectile*)malloc(sizeof(player_projectile));
    2204:	01000504 	movi	r4,20
    2208:	000391c0 	call	391c <malloc>
    220c:	e0bffd15 	stw	r2,-12(fp)
	new->x_pos=current->x_pos + ((sizes[current->id][0])/2)-11;
    2210:	e0bffe17 	ldw	r2,-8(fp)
    2214:	10c00017 	ldw	r3,0(r2)
    2218:	e0bffe17 	ldw	r2,-8(fp)
    221c:	11000317 	ldw	r4,12(r2)
    2220:	00800074 	movhi	r2,1
    2224:	108d8f04 	addi	r2,r2,13884
    2228:	200890fa 	slli	r4,r4,3
    222c:	1105883a 	add	r2,r2,r4
    2230:	10800017 	ldw	r2,0(r2)
    2234:	1008d7fa 	srli	r4,r2,31
    2238:	2085883a 	add	r2,r4,r2
    223c:	1005d07a 	srai	r2,r2,1
    2240:	1885883a 	add	r2,r3,r2
    2244:	10fffd44 	addi	r3,r2,-11
    2248:	e0bffd17 	ldw	r2,-12(fp)
    224c:	10c00015 	stw	r3,0(r2)
	new->y_pos=current->y_pos - sizes[13][1];
    2250:	e0bffe17 	ldw	r2,-8(fp)
    2254:	10c00117 	ldw	r3,4(r2)
    2258:	00800074 	movhi	r2,1
    225c:	108d8f04 	addi	r2,r2,13884
    2260:	10801b17 	ldw	r2,108(r2)
    2264:	1887c83a 	sub	r3,r3,r2
    2268:	e0bffd17 	ldw	r2,-12(fp)
    226c:	10c00115 	stw	r3,4(r2)
	new->old_x = new->x_pos;
    2270:	e0bffd17 	ldw	r2,-12(fp)
    2274:	10c00017 	ldw	r3,0(r2)
    2278:	e0bffd17 	ldw	r2,-12(fp)
    227c:	10c00215 	stw	r3,8(r2)
	new->old_y = new->y_pos;
    2280:	e0bffd17 	ldw	r2,-12(fp)
    2284:	10c00117 	ldw	r3,4(r2)
    2288:	e0bffd17 	ldw	r2,-12(fp)
    228c:	10c00315 	stw	r3,12(r2)
	new->next = head;
    2290:	e0bffd17 	ldw	r2,-12(fp)
    2294:	e0ffff17 	ldw	r3,-4(fp)
    2298:	10c00415 	stw	r3,16(r2)
	return new;
    229c:	e0bffd17 	ldw	r2,-12(fp)
}
    22a0:	e037883a 	mov	sp,fp
    22a4:	dfc00117 	ldw	ra,4(sp)
    22a8:	df000017 	ldw	fp,0(sp)
    22ac:	dec00204 	addi	sp,sp,8
    22b0:	f800283a 	ret

000022b4 <check_projectiles>:

player_projectile * check_projectiles(player_projectile *curr, enemy *em)
{
    22b4:	defffb04 	addi	sp,sp,-20
    22b8:	dfc00415 	stw	ra,16(sp)
    22bc:	df000315 	stw	fp,12(sp)
    22c0:	df000304 	addi	fp,sp,12
    22c4:	e13ffe15 	stw	r4,-8(fp)
    22c8:	e17fff15 	stw	r5,-4(fp)
	if (curr == NULL)
    22cc:	e0bffe17 	ldw	r2,-8(fp)
    22d0:	1000021e 	bne	r2,zero,22dc <check_projectiles+0x28>
	    return NULL;
    22d4:	0005883a 	mov	r2,zero
    22d8:	00002606 	br	2374 <check_projectiles+0xc0>

	  if (curr->y_pos==0 || hits_enemy(curr->x_pos,curr->y_pos,em)==1) {
    22dc:	e0bffe17 	ldw	r2,-8(fp)
    22e0:	10800117 	ldw	r2,4(r2)
    22e4:	10000a26 	beq	r2,zero,2310 <check_projectiles+0x5c>
    22e8:	e0bffe17 	ldw	r2,-8(fp)
    22ec:	10c00017 	ldw	r3,0(r2)
    22f0:	e0bffe17 	ldw	r2,-8(fp)
    22f4:	10800117 	ldw	r2,4(r2)
    22f8:	1809883a 	mov	r4,r3
    22fc:	100b883a 	mov	r5,r2
    2300:	e1bfff17 	ldw	r6,-4(fp)
    2304:	00023880 	call	2388 <hits_enemy>
    2308:	10800058 	cmpnei	r2,r2,1
    230c:	1000101e 	bne	r2,zero,2350 <check_projectiles+0x9c>
	    player_projectile *tempNext;
	    tempNext = curr->next;
    2310:	e0bffe17 	ldw	r2,-8(fp)
    2314:	10800417 	ldw	r2,16(r2)
    2318:	e0bffd15 	stw	r2,-12(fp)
	    renderer(curr->x_pos,curr->y_pos,13,1);//Render shadow
    231c:	e0bffe17 	ldw	r2,-8(fp)
    2320:	10c00017 	ldw	r3,0(r2)
    2324:	e0bffe17 	ldw	r2,-8(fp)
    2328:	10800117 	ldw	r2,4(r2)
    232c:	1809883a 	mov	r4,r3
    2330:	100b883a 	mov	r5,r2
    2334:	01800344 	movi	r6,13
    2338:	01c00044 	movi	r7,1
    233c:	0001bcc0 	call	1bcc <renderer>
	    free(curr);
    2340:	e13ffe17 	ldw	r4,-8(fp)
    2344:	00039300 	call	3930 <free>
	    return tempNext;
    2348:	e0bffd17 	ldw	r2,-12(fp)
    234c:	00000906 	br	2374 <check_projectiles+0xc0>
	  }
	  curr->next = check_projectiles(curr->next, em);
    2350:	e0bffe17 	ldw	r2,-8(fp)
    2354:	10800417 	ldw	r2,16(r2)
    2358:	1009883a 	mov	r4,r2
    235c:	e17fff17 	ldw	r5,-4(fp)
    2360:	00022b40 	call	22b4 <check_projectiles>
    2364:	1007883a 	mov	r3,r2
    2368:	e0bffe17 	ldw	r2,-8(fp)
    236c:	10c00415 	stw	r3,16(r2)
	  return curr;
    2370:	e0bffe17 	ldw	r2,-8(fp)
}
    2374:	e037883a 	mov	sp,fp
    2378:	dfc00117 	ldw	ra,4(sp)
    237c:	df000017 	ldw	fp,0(sp)
    2380:	dec00204 	addi	sp,sp,8
    2384:	f800283a 	ret

00002388 <hits_enemy>:

int hits_enemy(int x, int y, enemy *em)
{
    2388:	defffc04 	addi	sp,sp,-16
    238c:	df000315 	stw	fp,12(sp)
    2390:	df000304 	addi	fp,sp,12
    2394:	e13ffd15 	stw	r4,-12(fp)
    2398:	e17ffe15 	stw	r5,-8(fp)
    239c:	e1bfff15 	stw	r6,-4(fp)
	while(em!=NULL)
    23a0:	00002d06 	br	2458 <hits_enemy+0xd0>
	{
		if(x>(em->x_pos-23)&&x<(em->x_pos+sizes[em->id][0])&&y>(em->y_pos-32)&&y<(em->y_pos+sizes[em->id][1]))
    23a4:	e0bfff17 	ldw	r2,-4(fp)
    23a8:	10800017 	ldw	r2,0(r2)
    23ac:	10fffa44 	addi	r3,r2,-23
    23b0:	e0bffd17 	ldw	r2,-12(fp)
    23b4:	1880250e 	bge	r3,r2,244c <hits_enemy+0xc4>
    23b8:	e0bfff17 	ldw	r2,-4(fp)
    23bc:	10c00017 	ldw	r3,0(r2)
    23c0:	e0bfff17 	ldw	r2,-4(fp)
    23c4:	11000317 	ldw	r4,12(r2)
    23c8:	00800074 	movhi	r2,1
    23cc:	108d8f04 	addi	r2,r2,13884
    23d0:	200890fa 	slli	r4,r4,3
    23d4:	1105883a 	add	r2,r2,r4
    23d8:	10800017 	ldw	r2,0(r2)
    23dc:	1885883a 	add	r2,r3,r2
    23e0:	e0fffd17 	ldw	r3,-12(fp)
    23e4:	1880190e 	bge	r3,r2,244c <hits_enemy+0xc4>
    23e8:	e0bfff17 	ldw	r2,-4(fp)
    23ec:	10800117 	ldw	r2,4(r2)
    23f0:	10fff804 	addi	r3,r2,-32
    23f4:	e0bffe17 	ldw	r2,-8(fp)
    23f8:	1880140e 	bge	r3,r2,244c <hits_enemy+0xc4>
    23fc:	e0bfff17 	ldw	r2,-4(fp)
    2400:	10c00117 	ldw	r3,4(r2)
    2404:	e0bfff17 	ldw	r2,-4(fp)
    2408:	11000317 	ldw	r4,12(r2)
    240c:	00800074 	movhi	r2,1
    2410:	108d8f04 	addi	r2,r2,13884
    2414:	200890fa 	slli	r4,r4,3
    2418:	1105883a 	add	r2,r2,r4
    241c:	10800104 	addi	r2,r2,4
    2420:	10800017 	ldw	r2,0(r2)
    2424:	1885883a 	add	r2,r3,r2
    2428:	e0fffe17 	ldw	r3,-8(fp)
    242c:	1880070e 	bge	r3,r2,244c <hits_enemy+0xc4>
		{
			em->health--;
    2430:	e0bfff17 	ldw	r2,-4(fp)
    2434:	10800217 	ldw	r2,8(r2)
    2438:	10ffffc4 	addi	r3,r2,-1
    243c:	e0bfff17 	ldw	r2,-4(fp)
    2440:	10c00215 	stw	r3,8(r2)
			return 1;
    2444:	00800044 	movi	r2,1
    2448:	00000606 	br	2464 <hits_enemy+0xdc>
		}
		else
		{
			em=em->next;
    244c:	e0bfff17 	ldw	r2,-4(fp)
    2450:	10800617 	ldw	r2,24(r2)
    2454:	e0bfff15 	stw	r2,-4(fp)
	  return curr;
}

int hits_enemy(int x, int y, enemy *em)
{
	while(em!=NULL)
    2458:	e0bfff17 	ldw	r2,-4(fp)
    245c:	103fd11e 	bne	r2,zero,23a4 <__alt_data_end+0xfffacc74>
		else
		{
			em=em->next;
		}
	}
	return 0;
    2460:	0005883a 	mov	r2,zero
}
    2464:	e037883a 	mov	sp,fp
    2468:	df000017 	ldw	fp,0(sp)
    246c:	dec00104 	addi	sp,sp,4
    2470:	f800283a 	ret

00002474 <move_player>:

void move_player(player *current, int x_pos, int y_pos){
    2474:	defff904 	addi	sp,sp,-28
    2478:	dfc00615 	stw	ra,24(sp)
    247c:	df000515 	stw	fp,20(sp)
    2480:	df000504 	addi	fp,sp,20
    2484:	e13ffd15 	stw	r4,-12(fp)
    2488:	e17ffe15 	stw	r5,-8(fp)
    248c:	e1bfff15 	stw	r6,-4(fp)
	if(current==NULL)
    2490:	e0bffd17 	ldw	r2,-12(fp)
    2494:	1000041e 	bne	r2,zero,24a8 <move_player+0x34>
		{
			printf("players not instantiated");
    2498:	01000074 	movhi	r4,1
    249c:	210c9b04 	addi	r4,r4,12908
    24a0:	00041180 	call	4118 <printf>
    24a4:	00003506 	br	257c <move_player+0x108>
		}
	else{
		int width = sizes[current->id][0];
    24a8:	e0bffd17 	ldw	r2,-12(fp)
    24ac:	10c00317 	ldw	r3,12(r2)
    24b0:	00800074 	movhi	r2,1
    24b4:	108d8f04 	addi	r2,r2,13884
    24b8:	180690fa 	slli	r3,r3,3
    24bc:	10c5883a 	add	r2,r2,r3
    24c0:	10800017 	ldw	r2,0(r2)
    24c4:	e0bffb15 	stw	r2,-20(fp)
		int height = sizes[current->id][1];
    24c8:	e0bffd17 	ldw	r2,-12(fp)
    24cc:	10c00317 	ldw	r3,12(r2)
    24d0:	00800074 	movhi	r2,1
    24d4:	108d8f04 	addi	r2,r2,13884
    24d8:	180690fa 	slli	r3,r3,3
    24dc:	10c5883a 	add	r2,r2,r3
    24e0:	10800104 	addi	r2,r2,4
    24e4:	10800017 	ldw	r2,0(r2)
    24e8:	e0bffc15 	stw	r2,-16(fp)
		current->x_pos = x_pos;
    24ec:	e0bffd17 	ldw	r2,-12(fp)
    24f0:	e0fffe17 	ldw	r3,-8(fp)
    24f4:	10c00015 	stw	r3,0(r2)
		current->y_pos = y_pos;
    24f8:	e0bffd17 	ldw	r2,-12(fp)
    24fc:	e0ffff17 	ldw	r3,-4(fp)
    2500:	10c00115 	stw	r3,4(r2)
		if((x_pos + width)> x_bounds)
    2504:	e0fffe17 	ldw	r3,-8(fp)
    2508:	e0bffb17 	ldw	r2,-20(fp)
    250c:	1885883a 	add	r2,r3,r2
    2510:	1080a010 	cmplti	r2,r2,640
    2514:	1000061e 	bne	r2,zero,2530 <move_player+0xbc>
			current->x_pos = x_bounds - width;
    2518:	00c09fc4 	movi	r3,639
    251c:	e0bffb17 	ldw	r2,-20(fp)
    2520:	1887c83a 	sub	r3,r3,r2
    2524:	e0bffd17 	ldw	r2,-12(fp)
    2528:	10c00015 	stw	r3,0(r2)
    252c:	00000406 	br	2540 <move_player+0xcc>
		else if(x_pos < 0)
    2530:	e0bffe17 	ldw	r2,-8(fp)
    2534:	1000020e 	bge	r2,zero,2540 <move_player+0xcc>
		{
			current->x_pos = 0;
    2538:	e0bffd17 	ldw	r2,-12(fp)
    253c:	10000015 	stw	zero,0(r2)
		}
		if((y_pos + height) > y_bounds)
    2540:	e0ffff17 	ldw	r3,-4(fp)
    2544:	e0bffc17 	ldw	r2,-16(fp)
    2548:	1885883a 	add	r2,r3,r2
    254c:	10807810 	cmplti	r2,r2,480
    2550:	1000061e 	bne	r2,zero,256c <move_player+0xf8>
			current->y_pos = y_bounds - height;
    2554:	00c077c4 	movi	r3,479
    2558:	e0bffc17 	ldw	r2,-16(fp)
    255c:	1887c83a 	sub	r3,r3,r2
    2560:	e0bffd17 	ldw	r2,-12(fp)
    2564:	10c00115 	stw	r3,4(r2)
    2568:	00000406 	br	257c <move_player+0x108>
		else if(y_pos < 0)
    256c:	e0bfff17 	ldw	r2,-4(fp)
    2570:	1000020e 	bge	r2,zero,257c <move_player+0x108>
		{
			current->y_pos = 0;
    2574:	e0bffd17 	ldw	r2,-12(fp)
    2578:	10000115 	stw	zero,4(r2)
		}
	}
}
    257c:	e037883a 	mov	sp,fp
    2580:	dfc00117 	ldw	ra,4(sp)
    2584:	df000017 	ldw	fp,0(sp)
    2588:	dec00204 	addi	sp,sp,8
    258c:	f800283a 	ret

00002590 <move_enemy>:

void move_enemy(enemy *current, int x_pos, int y_pos){
    2590:	defff904 	addi	sp,sp,-28
    2594:	dfc00615 	stw	ra,24(sp)
    2598:	df000515 	stw	fp,20(sp)
    259c:	df000504 	addi	fp,sp,20
    25a0:	e13ffd15 	stw	r4,-12(fp)
    25a4:	e17ffe15 	stw	r5,-8(fp)
    25a8:	e1bfff15 	stw	r6,-4(fp)
	if(current==NULL)
    25ac:	e0bffd17 	ldw	r2,-12(fp)
    25b0:	1000041e 	bne	r2,zero,25c4 <move_enemy+0x34>
		{
			printf("players not instantiated");
    25b4:	01000074 	movhi	r4,1
    25b8:	210c9b04 	addi	r4,r4,12908
    25bc:	00041180 	call	4118 <printf>
    25c0:	00003506 	br	2698 <move_enemy+0x108>
		}
	else{
		int width = sizes[current->id][0];
    25c4:	e0bffd17 	ldw	r2,-12(fp)
    25c8:	10c00317 	ldw	r3,12(r2)
    25cc:	00800074 	movhi	r2,1
    25d0:	108d8f04 	addi	r2,r2,13884
    25d4:	180690fa 	slli	r3,r3,3
    25d8:	10c5883a 	add	r2,r2,r3
    25dc:	10800017 	ldw	r2,0(r2)
    25e0:	e0bffb15 	stw	r2,-20(fp)
		int height = sizes[current->id][1];
    25e4:	e0bffd17 	ldw	r2,-12(fp)
    25e8:	10c00317 	ldw	r3,12(r2)
    25ec:	00800074 	movhi	r2,1
    25f0:	108d8f04 	addi	r2,r2,13884
    25f4:	180690fa 	slli	r3,r3,3
    25f8:	10c5883a 	add	r2,r2,r3
    25fc:	10800104 	addi	r2,r2,4
    2600:	10800017 	ldw	r2,0(r2)
    2604:	e0bffc15 	stw	r2,-16(fp)
		current->x_pos = x_pos;
    2608:	e0bffd17 	ldw	r2,-12(fp)
    260c:	e0fffe17 	ldw	r3,-8(fp)
    2610:	10c00015 	stw	r3,0(r2)
		current->y_pos = y_pos;
    2614:	e0bffd17 	ldw	r2,-12(fp)
    2618:	e0ffff17 	ldw	r3,-4(fp)
    261c:	10c00115 	stw	r3,4(r2)
		if((x_pos + width)> x_bounds)
    2620:	e0fffe17 	ldw	r3,-8(fp)
    2624:	e0bffb17 	ldw	r2,-20(fp)
    2628:	1885883a 	add	r2,r3,r2
    262c:	1080a010 	cmplti	r2,r2,640
    2630:	1000061e 	bne	r2,zero,264c <move_enemy+0xbc>
			current->x_pos = x_bounds - width;
    2634:	00c09fc4 	movi	r3,639
    2638:	e0bffb17 	ldw	r2,-20(fp)
    263c:	1887c83a 	sub	r3,r3,r2
    2640:	e0bffd17 	ldw	r2,-12(fp)
    2644:	10c00015 	stw	r3,0(r2)
    2648:	00000406 	br	265c <move_enemy+0xcc>
		else if(x_pos < 0)
    264c:	e0bffe17 	ldw	r2,-8(fp)
    2650:	1000020e 	bge	r2,zero,265c <move_enemy+0xcc>
		{
			current->x_pos = 0;
    2654:	e0bffd17 	ldw	r2,-12(fp)
    2658:	10000015 	stw	zero,0(r2)
		}
		if((y_pos + height) > y_bounds)
    265c:	e0ffff17 	ldw	r3,-4(fp)
    2660:	e0bffc17 	ldw	r2,-16(fp)
    2664:	1885883a 	add	r2,r3,r2
    2668:	10807810 	cmplti	r2,r2,480
    266c:	1000061e 	bne	r2,zero,2688 <move_enemy+0xf8>
			current->y_pos = y_bounds - height;
    2670:	00c077c4 	movi	r3,479
    2674:	e0bffc17 	ldw	r2,-16(fp)
    2678:	1887c83a 	sub	r3,r3,r2
    267c:	e0bffd17 	ldw	r2,-12(fp)
    2680:	10c00115 	stw	r3,4(r2)
    2684:	00000406 	br	2698 <move_enemy+0x108>
		else if(y_pos < 0)
    2688:	e0bfff17 	ldw	r2,-4(fp)
    268c:	1000020e 	bge	r2,zero,2698 <move_enemy+0x108>
		{
			current->y_pos = 0;
    2690:	e0bffd17 	ldw	r2,-12(fp)
    2694:	10000115 	stw	zero,4(r2)
		}
	}
}
    2698:	e037883a 	mov	sp,fp
    269c:	dfc00117 	ldw	ra,4(sp)
    26a0:	df000017 	ldw	fp,0(sp)
    26a4:	dec00204 	addi	sp,sp,8
    26a8:	f800283a 	ret

000026ac <UsbWrite>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbWrite(alt_u16 Address, alt_u16 Data)
{
    26ac:	defffc04 	addi	sp,sp,-16
    26b0:	dfc00315 	stw	ra,12(sp)
    26b4:	df000215 	stw	fp,8(sp)
    26b8:	df000204 	addi	fp,sp,8
    26bc:	2007883a 	mov	r3,r4
    26c0:	2805883a 	mov	r2,r5
    26c4:	e0fffe0d 	sth	r3,-8(fp)
    26c8:	e0bfff0d 	sth	r2,-4(fp)
	IO_write(HPI_ADDR_PORT, Address);
    26cc:	e0bffe0b 	ldhu	r2,-8(fp)
    26d0:	01000084 	movi	r4,2
    26d4:	100b883a 	mov	r5,r2
    26d8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA_PORT, Data);
    26dc:	e0bfff0b 	ldhu	r2,-4(fp)
    26e0:	0009883a 	mov	r4,zero
    26e4:	100b883a 	mov	r5,r2
    26e8:	00002c80 	call	2c8 <IO_write>
}
    26ec:	e037883a 	mov	sp,fp
    26f0:	dfc00117 	ldw	ra,4(sp)
    26f4:	df000017 	ldw	fp,0(sp)
    26f8:	dec00204 	addi	sp,sp,8
    26fc:	f800283a 	ret

00002700 <UsbRead>:
 *
 * @note     None
 *
 ******************************************************************************/
alt_u16 UsbRead(alt_u16 Address)
{
    2700:	defffd04 	addi	sp,sp,-12
    2704:	dfc00215 	stw	ra,8(sp)
    2708:	df000115 	stw	fp,4(sp)
    270c:	df000104 	addi	fp,sp,4
    2710:	2005883a 	mov	r2,r4
    2714:	e0bfff0d 	sth	r2,-4(fp)
	IO_write(HPI_ADDR_PORT, Address);
    2718:	e0bfff0b 	ldhu	r2,-4(fp)
    271c:	01000084 	movi	r4,2
    2720:	100b883a 	mov	r5,r2
    2724:	00002c80 	call	2c8 <IO_write>
	return IO_read(HPI_DATA_PORT);
    2728:	0009883a 	mov	r4,zero
    272c:	00003300 	call	330 <IO_read>
}
    2730:	e037883a 	mov	sp,fp
    2734:	dfc00117 	ldw	ra,4(sp)
    2738:	df000017 	ldw	fp,0(sp)
    273c:	dec00204 	addi	sp,sp,8
    2740:	f800283a 	ret

00002744 <UsbSoftReset>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbSoftReset()
{
    2744:	defffe04 	addi	sp,sp,-8
    2748:	dfc00115 	stw	ra,4(sp)
    274c:	df000015 	stw	fp,0(sp)
    2750:	d839883a 	mov	fp,sp
	//XIo_Out16(USB_MAILBOX, COMM_RESET);
	IO_write(HPI_MAILBOX,COMM_RESET); //COMM_JUMP2CODE
    2754:	01000044 	movi	r4,1
    2758:	017e9414 	movui	r5,64080
    275c:	00002c80 	call	2c8 <IO_write>
	usleep(100000);
    2760:	010000b4 	movhi	r4,2
    2764:	2121a804 	addi	r4,r4,-31072
    2768:	0010ba80 	call	10ba8 <usleep>
	printf("[USB INIT]:reset finished!\n");
    276c:	01000074 	movhi	r4,1
    2770:	210cb204 	addi	r4,r4,13000
    2774:	000420c0 	call	420c <puts>

	usleep(500000);
    2778:	01000234 	movhi	r4,8
    277c:	21284804 	addi	r4,r4,-24288
    2780:	0010ba80 	call	10ba8 <usleep>
	printf("[USB INIT]:Clear up the interrupt\r\n");
    2784:	01000074 	movhi	r4,1
    2788:	210cb904 	addi	r4,r4,13028
    278c:	000420c0 	call	420c <puts>
	IO_read(HPI_MAILBOX);
    2790:	01000044 	movi	r4,1
    2794:	00003300 	call	330 <IO_read>
	IO_read(HPI_STATUS);
    2798:	010000c4 	movi	r4,3
    279c:	00003300 	call	330 <IO_read>

	// Had to add the write due to a bug in BIOS where they overwrite
	// the mailbox after initialization with garbage.  The read clears
	// any pending interrupts.
	UsbRead (HPI_SIE1_MSG_ADR);
    27a0:	01005104 	movi	r4,324
    27a4:	00027000 	call	2700 <UsbRead>
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
    27a8:	01005104 	movi	r4,324
    27ac:	000b883a 	mov	r5,zero
    27b0:	00026ac0 	call	26ac <UsbWrite>
	UsbRead (HPI_SIE2_MSG_ADR);
    27b4:	01005204 	movi	r4,328
    27b8:	00027000 	call	2700 <UsbRead>
	UsbWrite (HPI_SIE2_MSG_ADR, 0);
    27bc:	01005204 	movi	r4,328
    27c0:	000b883a 	mov	r5,zero
    27c4:	00026ac0 	call	26ac <UsbWrite>


	UsbWrite (HOST1_STAT_REG, 0xFFFF);
    27c8:	01302414 	movui	r4,49296
    27cc:	017fffd4 	movui	r5,65535
    27d0:	00026ac0 	call	26ac <UsbWrite>
	UsbWrite (HOST2_STAT_REG, 0xFFFF);
    27d4:	01302c14 	movui	r4,49328
    27d8:	017fffd4 	movui	r5,65535
    27dc:	00026ac0 	call	26ac <UsbWrite>
}
    27e0:	e037883a 	mov	sp,fp
    27e4:	dfc00117 	ldw	ra,4(sp)
    27e8:	df000017 	ldw	fp,0(sp)
    27ec:	dec00204 	addi	sp,sp,8
    27f0:	f800283a 	ret

000027f4 <UsbSetAddress>:


void UsbSetAddress()
{
    27f4:	defffe04 	addi	sp,sp,-8
    27f8:	dfc00115 	stw	ra,4(sp)
    27fc:	df000015 	stw	fp,0(sp)
    2800:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    2804:	01000084 	movi	r4,2
    2808:	01414004 	movi	r5,1280
    280c:	00002c80 	call	2c8 <IO_write>
	// TD #1: 6 writes
	IO_write(HPI_DATA,0x050C);
    2810:	0009883a 	mov	r4,zero
    2814:	01414304 	movi	r5,1292
    2818:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    281c:	0009883a 	mov	r4,zero
    2820:	01400204 	movi	r5,8
    2824:	00002c80 	call	2c8 <IO_write>
	// TASK: Complete with 4 more IOWR functions
	IO_write(HPI_DATA,0x00D0);
    2828:	0009883a 	mov	r4,zero
    282c:	01403404 	movi	r5,208
    2830:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);
    2834:	0009883a 	mov	r4,zero
    2838:	01400044 	movi	r5,1
    283c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    2840:	0009883a 	mov	r4,zero
    2844:	014004c4 	movi	r5,19
    2848:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0514);
    284c:	0009883a 	mov	r4,zero
    2850:	01414504 	movi	r5,1300
    2854:	00002c80 	call	2c8 <IO_write>
	// TD #2: 4 writes
	// TASK: Complete with 4 IOWR functions
	IO_write(HPI_DATA,0x0500);
    2858:	0009883a 	mov	r4,zero
    285c:	01414004 	movi	r5,1280
    2860:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0002);
    2864:	0009883a 	mov	r4,zero
    2868:	01400084 	movi	r5,2
    286c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    2870:	0009883a 	mov	r4,zero
    2874:	000b883a 	mov	r5,zero
    2878:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    287c:	0009883a 	mov	r4,zero
    2880:	000b883a 	mov	r5,zero
    2884:	00002c80 	call	2c8 <IO_write>
	// TD #3: 6 writes
	// TASK: Complete with 6 IOWR functions
	IO_write(HPI_DATA,0x0000); //
    2888:	0009883a 	mov	r4,zero
    288c:	000b883a 	mov	r5,zero
    2890:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//
    2894:	0009883a 	mov	r4,zero
    2898:	000b883a 	mov	r5,zero
    289c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0090);//
    28a0:	0009883a 	mov	r4,zero
    28a4:	01402404 	movi	r5,144
    28a8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);
    28ac:	0009883a 	mov	r4,zero
    28b0:	01401044 	movi	r5,65
    28b4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    28b8:	0009883a 	mov	r4,zero
    28bc:	014004c4 	movi	r5,19
    28c0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    28c4:	0009883a 	mov	r4,zero
    28c8:	000b883a 	mov	r5,zero
    28cc:	00002c80 	call	2c8 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    28d0:	01006c04 	movi	r4,432
    28d4:	01414004 	movi	r5,1280
    28d8:	00026ac0 	call	26ac <UsbWrite>
}
    28dc:	e037883a 	mov	sp,fp
    28e0:	dfc00117 	ldw	ra,4(sp)
    28e4:	df000017 	ldw	fp,0(sp)
    28e8:	dec00204 	addi	sp,sp,8
    28ec:	f800283a 	ret

000028f0 <UsbGetDeviceDesc1>:


void UsbGetDeviceDesc1()
{
    28f0:	defffe04 	addi	sp,sp,-8
    28f4:	dfc00115 	stw	ra,4(sp)
    28f8:	df000015 	stw	fp,0(sp)
    28fc:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    2900:	01000084 	movi	r4,2
    2904:	01414004 	movi	r5,1280
    2908:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x050C);
    290c:	0009883a 	mov	r4,zero
    2910:	01414304 	movi	r5,1292
    2914:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    2918:	0009883a 	mov	r4,zero
    291c:	01400204 	movi	r5,8
    2920:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    2924:	0009883a 	mov	r4,zero
    2928:	0140b404 	movi	r5,720
    292c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);
    2930:	0009883a 	mov	r4,zero
    2934:	01400044 	movi	r5,1
    2938:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    293c:	0009883a 	mov	r4,zero
    2940:	014004c4 	movi	r5,19
    2944:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0514);
    2948:	0009883a 	mov	r4,zero
    294c:	01414504 	movi	r5,1300
    2950:	00002c80 	call	2c8 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
    2954:	0009883a 	mov	r4,zero
    2958:	0141a004 	movi	r5,1664
    295c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0100); //device 0x01
    2960:	0009883a 	mov	r4,zero
    2964:	01404004 	movi	r5,256
    2968:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    296c:	0009883a 	mov	r4,zero
    2970:	000b883a 	mov	r5,zero
    2974:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);
    2978:	0009883a 	mov	r4,zero
    297c:	01400204 	movi	r5,8
    2980:	00002c80 	call	2c8 <IO_write>

	//data phase IN
	IO_write(HPI_DATA,0x052C); //
    2984:	0009883a 	mov	r4,zero
    2988:	01414b04 	movi	r5,1324
    298c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//
    2990:	0009883a 	mov	r4,zero
    2994:	01400204 	movi	r5,8
    2998:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//
    299c:	0009883a 	mov	r4,zero
    29a0:	0140a404 	movi	r5,656
    29a4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);
    29a8:	0009883a 	mov	r4,zero
    29ac:	01401044 	movi	r5,65
    29b0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    29b4:	0009883a 	mov	r4,zero
    29b8:	014004c4 	movi	r5,19
    29bc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0520);
    29c0:	0009883a 	mov	r4,zero
    29c4:	01414804 	movi	r5,1312
    29c8:	00002c80 	call	2c8 <IO_write>

	//    //status phase
	IO_write(HPI_DATA,0x0000); //don't care
    29cc:	0009883a 	mov	r4,zero
    29d0:	000b883a 	mov	r5,zero
    29d4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
    29d8:	0009883a 	mov	r4,zero
    29dc:	000b883a 	mov	r5,zero
    29e0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0210);//device address
    29e4:	0009883a 	mov	r4,zero
    29e8:	01408404 	movi	r5,528
    29ec:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);
    29f0:	0009883a 	mov	r4,zero
    29f4:	01401044 	movi	r5,65
    29f8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    29fc:	0009883a 	mov	r4,zero
    2a00:	014004c4 	movi	r5,19
    2a04:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    2a08:	0009883a 	mov	r4,zero
    2a0c:	000b883a 	mov	r5,zero
    2a10:	00002c80 	call	2c8 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    2a14:	01006c04 	movi	r4,432
    2a18:	01414004 	movi	r5,1280
    2a1c:	00026ac0 	call	26ac <UsbWrite>
}
    2a20:	e037883a 	mov	sp,fp
    2a24:	dfc00117 	ldw	ra,4(sp)
    2a28:	df000017 	ldw	fp,0(sp)
    2a2c:	dec00204 	addi	sp,sp,8
    2a30:	f800283a 	ret

00002a34 <UsbGetDeviceDesc2>:

void UsbGetDeviceDesc2()
{
    2a34:	defffe04 	addi	sp,sp,-8
    2a38:	dfc00115 	stw	ra,4(sp)
    2a3c:	df000015 	stw	fp,0(sp)
    2a40:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    2a44:	01000084 	movi	r4,2
    2a48:	01414004 	movi	r5,1280
    2a4c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x050C);
    2a50:	0009883a 	mov	r4,zero
    2a54:	01414304 	movi	r5,1292
    2a58:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    2a5c:	0009883a 	mov	r4,zero
    2a60:	01400204 	movi	r5,8
    2a64:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    2a68:	0009883a 	mov	r4,zero
    2a6c:	0140b404 	movi	r5,720
    2a70:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);
    2a74:	0009883a 	mov	r4,zero
    2a78:	01400044 	movi	r5,1
    2a7c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    2a80:	0009883a 	mov	r4,zero
    2a84:	014004c4 	movi	r5,19
    2a88:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0514);
    2a8c:	0009883a 	mov	r4,zero
    2a90:	01414504 	movi	r5,1300
    2a94:	00002c80 	call	2c8 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
    2a98:	0009883a 	mov	r4,zero
    2a9c:	0141a004 	movi	r5,1664
    2aa0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0100);//e //device 0x01
    2aa4:	0009883a 	mov	r4,zero
    2aa8:	01404004 	movi	r5,256
    2aac:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    2ab0:	0009883a 	mov	r4,zero
    2ab4:	000b883a 	mov	r5,zero
    2ab8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0012);//2
    2abc:	0009883a 	mov	r4,zero
    2ac0:	01400484 	movi	r5,18
    2ac4:	00002c80 	call	2c8 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
    2ac8:	0009883a 	mov	r4,zero
    2acc:	01415104 	movi	r5,1348
    2ad0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    2ad4:	0009883a 	mov	r4,zero
    2ad8:	01400204 	movi	r5,8
    2adc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    2ae0:	0009883a 	mov	r4,zero
    2ae4:	0140a404 	movi	r5,656
    2ae8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    2aec:	0009883a 	mov	r4,zero
    2af0:	01401044 	movi	r5,65
    2af4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    2af8:	0009883a 	mov	r4,zero
    2afc:	014004c4 	movi	r5,19
    2b00:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    2b04:	0009883a 	mov	r4,zero
    2b08:	01414804 	movi	r5,1312
    2b0c:	00002c80 	call	2c8 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
    2b10:	0009883a 	mov	r4,zero
    2b14:	01415304 	movi	r5,1356
    2b18:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
    2b1c:	0009883a 	mov	r4,zero
    2b20:	01400204 	movi	r5,8
    2b24:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    2b28:	0009883a 	mov	r4,zero
    2b2c:	0140a404 	movi	r5,656
    2b30:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);//6
    2b34:	0009883a 	mov	r4,zero
    2b38:	01400044 	movi	r5,1
    2b3c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    2b40:	0009883a 	mov	r4,zero
    2b44:	014004c4 	movi	r5,19
    2b48:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
    2b4c:	0009883a 	mov	r4,zero
    2b50:	01414b04 	movi	r5,1324
    2b54:	00002c80 	call	2c8 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0554); //c
    2b58:	0009883a 	mov	r4,zero
    2b5c:	01415504 	movi	r5,1364
    2b60:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0002);//e
    2b64:	0009883a 	mov	r4,zero
    2b68:	01400084 	movi	r5,2
    2b6c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
    2b70:	0009883a 	mov	r4,zero
    2b74:	0140a404 	movi	r5,656
    2b78:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    2b7c:	0009883a 	mov	r4,zero
    2b80:	01401044 	movi	r5,65
    2b84:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    2b88:	0009883a 	mov	r4,zero
    2b8c:	014004c4 	movi	r5,19
    2b90:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
    2b94:	0009883a 	mov	r4,zero
    2b98:	01414e04 	movi	r5,1336
    2b9c:	00002c80 	call	2c8 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //538
    2ba0:	0009883a 	mov	r4,zero
    2ba4:	000b883a 	mov	r5,zero
    2ba8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
    2bac:	0009883a 	mov	r4,zero
    2bb0:	000b883a 	mov	r5,zero
    2bb4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0210);//c
    2bb8:	0009883a 	mov	r4,zero
    2bbc:	01408404 	movi	r5,528
    2bc0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//e
    2bc4:	0009883a 	mov	r4,zero
    2bc8:	01401044 	movi	r5,65
    2bcc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
    2bd0:	0009883a 	mov	r4,zero
    2bd4:	014004c4 	movi	r5,19
    2bd8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
    2bdc:	0009883a 	mov	r4,zero
    2be0:	000b883a 	mov	r5,zero
    2be4:	00002c80 	call	2c8 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    2be8:	01006c04 	movi	r4,432
    2bec:	01414004 	movi	r5,1280
    2bf0:	00026ac0 	call	26ac <UsbWrite>
}
    2bf4:	e037883a 	mov	sp,fp
    2bf8:	dfc00117 	ldw	ra,4(sp)
    2bfc:	df000017 	ldw	fp,0(sp)
    2c00:	dec00204 	addi	sp,sp,8
    2c04:	f800283a 	ret

00002c08 <UsbGetConfigDesc1>:


void UsbGetConfigDesc1()
{
    2c08:	defffe04 	addi	sp,sp,-8
    2c0c:	dfc00115 	stw	ra,4(sp)
    2c10:	df000015 	stw	fp,0(sp)
    2c14:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    2c18:	01000084 	movi	r4,2
    2c1c:	01414004 	movi	r5,1280
    2c20:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x050C);
    2c24:	0009883a 	mov	r4,zero
    2c28:	01414304 	movi	r5,1292
    2c2c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    2c30:	0009883a 	mov	r4,zero
    2c34:	01400204 	movi	r5,8
    2c38:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    2c3c:	0009883a 	mov	r4,zero
    2c40:	0140b404 	movi	r5,720
    2c44:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);
    2c48:	0009883a 	mov	r4,zero
    2c4c:	01400044 	movi	r5,1
    2c50:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    2c54:	0009883a 	mov	r4,zero
    2c58:	014004c4 	movi	r5,19
    2c5c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0514);
    2c60:	0009883a 	mov	r4,zero
    2c64:	01414504 	movi	r5,1300
    2c68:	00002c80 	call	2c8 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
    2c6c:	0009883a 	mov	r4,zero
    2c70:	0141a004 	movi	r5,1664
    2c74:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
    2c78:	0009883a 	mov	r4,zero
    2c7c:	01408004 	movi	r5,512
    2c80:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    2c84:	0009883a 	mov	r4,zero
    2c88:	000b883a 	mov	r5,zero
    2c8c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0009);//2
    2c90:	0009883a 	mov	r4,zero
    2c94:	01400244 	movi	r5,9
    2c98:	00002c80 	call	2c8 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
    2c9c:	0009883a 	mov	r4,zero
    2ca0:	01415104 	movi	r5,1348
    2ca4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    2ca8:	0009883a 	mov	r4,zero
    2cac:	01400204 	movi	r5,8
    2cb0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    2cb4:	0009883a 	mov	r4,zero
    2cb8:	0140a404 	movi	r5,656
    2cbc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    2cc0:	0009883a 	mov	r4,zero
    2cc4:	01401044 	movi	r5,65
    2cc8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    2ccc:	0009883a 	mov	r4,zero
    2cd0:	014004c4 	movi	r5,19
    2cd4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    2cd8:	0009883a 	mov	r4,zero
    2cdc:	01414804 	movi	r5,1312
    2ce0:	00002c80 	call	2c8 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
    2ce4:	0009883a 	mov	r4,zero
    2ce8:	01415304 	movi	r5,1356
    2cec:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);//2
    2cf0:	0009883a 	mov	r4,zero
    2cf4:	01400044 	movi	r5,1
    2cf8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    2cfc:	0009883a 	mov	r4,zero
    2d00:	0140a404 	movi	r5,656
    2d04:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
    2d08:	0009883a 	mov	r4,zero
    2d0c:	01400044 	movi	r5,1
    2d10:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    2d14:	0009883a 	mov	r4,zero
    2d18:	014004c4 	movi	r5,19
    2d1c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
    2d20:	0009883a 	mov	r4,zero
    2d24:	01414b04 	movi	r5,1324
    2d28:	00002c80 	call	2c8 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
    2d2c:	0009883a 	mov	r4,zero
    2d30:	000b883a 	mov	r5,zero
    2d34:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
    2d38:	0009883a 	mov	r4,zero
    2d3c:	000b883a 	mov	r5,zero
    2d40:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
    2d44:	0009883a 	mov	r4,zero
    2d48:	01408404 	movi	r5,528
    2d4c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    2d50:	0009883a 	mov	r4,zero
    2d54:	01401044 	movi	r5,65
    2d58:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    2d5c:	0009883a 	mov	r4,zero
    2d60:	014004c4 	movi	r5,19
    2d64:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
    2d68:	0009883a 	mov	r4,zero
    2d6c:	000b883a 	mov	r5,zero
    2d70:	00002c80 	call	2c8 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    2d74:	01006c04 	movi	r4,432
    2d78:	01414004 	movi	r5,1280
    2d7c:	00026ac0 	call	26ac <UsbWrite>
}
    2d80:	e037883a 	mov	sp,fp
    2d84:	dfc00117 	ldw	ra,4(sp)
    2d88:	df000017 	ldw	fp,0(sp)
    2d8c:	dec00204 	addi	sp,sp,8
    2d90:	f800283a 	ret

00002d94 <UsbGetConfigDesc2>:


void UsbGetConfigDesc2()
{
    2d94:	defffe04 	addi	sp,sp,-8
    2d98:	dfc00115 	stw	ra,4(sp)
    2d9c:	df000015 	stw	fp,0(sp)
    2da0:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    2da4:	01000084 	movi	r4,2
    2da8:	01414004 	movi	r5,1280
    2dac:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x050C);
    2db0:	0009883a 	mov	r4,zero
    2db4:	01414304 	movi	r5,1292
    2db8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    2dbc:	0009883a 	mov	r4,zero
    2dc0:	01400204 	movi	r5,8
    2dc4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    2dc8:	0009883a 	mov	r4,zero
    2dcc:	0140b404 	movi	r5,720
    2dd0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);
    2dd4:	0009883a 	mov	r4,zero
    2dd8:	01400044 	movi	r5,1
    2ddc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    2de0:	0009883a 	mov	r4,zero
    2de4:	014004c4 	movi	r5,19
    2de8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0514);
    2dec:	0009883a 	mov	r4,zero
    2df0:	01414504 	movi	r5,1300
    2df4:	00002c80 	call	2c8 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
    2df8:	0009883a 	mov	r4,zero
    2dfc:	0141a004 	movi	r5,1664
    2e00:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
    2e04:	0009883a 	mov	r4,zero
    2e08:	01408004 	movi	r5,512
    2e0c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    2e10:	0009883a 	mov	r4,zero
    2e14:	000b883a 	mov	r5,zero
    2e18:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x00FF);//2
    2e1c:	0009883a 	mov	r4,zero
    2e20:	01403fc4 	movi	r5,255
    2e24:	00002c80 	call	2c8 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x055c); //514
    2e28:	0009883a 	mov	r4,zero
    2e2c:	01415704 	movi	r5,1372
    2e30:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    2e34:	0009883a 	mov	r4,zero
    2e38:	01400204 	movi	r5,8
    2e3c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    2e40:	0009883a 	mov	r4,zero
    2e44:	0140a404 	movi	r5,656
    2e48:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    2e4c:	0009883a 	mov	r4,zero
    2e50:	01401044 	movi	r5,65
    2e54:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    2e58:	0009883a 	mov	r4,zero
    2e5c:	014004c4 	movi	r5,19
    2e60:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    2e64:	0009883a 	mov	r4,zero
    2e68:	01414804 	movi	r5,1312
    2e6c:	00002c80 	call	2c8 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0564); //520
    2e70:	0009883a 	mov	r4,zero
    2e74:	01415904 	movi	r5,1380
    2e78:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
    2e7c:	0009883a 	mov	r4,zero
    2e80:	01400204 	movi	r5,8
    2e84:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    2e88:	0009883a 	mov	r4,zero
    2e8c:	0140a404 	movi	r5,656
    2e90:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
    2e94:	0009883a 	mov	r4,zero
    2e98:	01400044 	movi	r5,1
    2e9c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    2ea0:	0009883a 	mov	r4,zero
    2ea4:	014004c4 	movi	r5,19
    2ea8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
    2eac:	0009883a 	mov	r4,zero
    2eb0:	01414b04 	movi	r5,1324
    2eb4:	00002c80 	call	2c8 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x056c); //52c
    2eb8:	0009883a 	mov	r4,zero
    2ebc:	01415b04 	movi	r5,1388
    2ec0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
    2ec4:	0009883a 	mov	r4,zero
    2ec8:	01400204 	movi	r5,8
    2ecc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
    2ed0:	0009883a 	mov	r4,zero
    2ed4:	0140a404 	movi	r5,656
    2ed8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    2edc:	0009883a 	mov	r4,zero
    2ee0:	01401044 	movi	r5,65
    2ee4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    2ee8:	0009883a 	mov	r4,zero
    2eec:	014004c4 	movi	r5,19
    2ef0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
    2ef4:	0009883a 	mov	r4,zero
    2ef8:	01414e04 	movi	r5,1336
    2efc:	00002c80 	call	2c8 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0574); //538
    2f00:	0009883a 	mov	r4,zero
    2f04:	01415d04 	movi	r5,1396
    2f08:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
    2f0c:	0009883a 	mov	r4,zero
    2f10:	01400204 	movi	r5,8
    2f14:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
    2f18:	0009883a 	mov	r4,zero
    2f1c:	0140a404 	movi	r5,656
    2f20:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
    2f24:	0009883a 	mov	r4,zero
    2f28:	01400044 	movi	r5,1
    2f2c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
    2f30:	0009883a 	mov	r4,zero
    2f34:	014004c4 	movi	r5,19
    2f38:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
    2f3c:	0009883a 	mov	r4,zero
    2f40:	01415104 	movi	r5,1348
    2f44:	00002c80 	call	2c8 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x057c); //544
    2f48:	0009883a 	mov	r4,zero
    2f4c:	01415f04 	movi	r5,1404
    2f50:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0002);//6
    2f54:	0009883a 	mov	r4,zero
    2f58:	01400084 	movi	r5,2
    2f5c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    2f60:	0009883a 	mov	r4,zero
    2f64:	0140a404 	movi	r5,656
    2f68:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
    2f6c:	0009883a 	mov	r4,zero
    2f70:	01401044 	movi	r5,65
    2f74:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    2f78:	0009883a 	mov	r4,zero
    2f7c:	014004c4 	movi	r5,19
    2f80:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
    2f84:	0009883a 	mov	r4,zero
    2f88:	01415404 	movi	r5,1360
    2f8c:	00002c80 	call	2c8 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //550
    2f90:	0009883a 	mov	r4,zero
    2f94:	000b883a 	mov	r5,zero
    2f98:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
    2f9c:	0009883a 	mov	r4,zero
    2fa0:	000b883a 	mov	r5,zero
    2fa4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0210);//4
    2fa8:	0009883a 	mov	r4,zero
    2fac:	01408404 	movi	r5,528
    2fb0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//6
    2fb4:	0009883a 	mov	r4,zero
    2fb8:	01401044 	movi	r5,65
    2fbc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    2fc0:	0009883a 	mov	r4,zero
    2fc4:	014004c4 	movi	r5,19
    2fc8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
    2fcc:	0009883a 	mov	r4,zero
    2fd0:	000b883a 	mov	r5,zero
    2fd4:	00002c80 	call	2c8 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    2fd8:	01006c04 	movi	r4,432
    2fdc:	01414004 	movi	r5,1280
    2fe0:	00026ac0 	call	26ac <UsbWrite>
}
    2fe4:	e037883a 	mov	sp,fp
    2fe8:	dfc00117 	ldw	ra,4(sp)
    2fec:	df000017 	ldw	fp,0(sp)
    2ff0:	dec00204 	addi	sp,sp,8
    2ff4:	f800283a 	ret

00002ff8 <UsbSetConfig>:

void UsbSetConfig()
{
    2ff8:	defffe04 	addi	sp,sp,-8
    2ffc:	dfc00115 	stw	ra,4(sp)
    3000:	df000015 	stw	fp,0(sp)
    3004:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    3008:	01000084 	movi	r4,2
    300c:	01414004 	movi	r5,1280
    3010:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x050C);
    3014:	0009883a 	mov	r4,zero
    3018:	01414304 	movi	r5,1292
    301c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    3020:	0009883a 	mov	r4,zero
    3024:	01400204 	movi	r5,8
    3028:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
    302c:	0009883a 	mov	r4,zero
    3030:	0140b404 	movi	r5,720
    3034:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);
    3038:	0009883a 	mov	r4,zero
    303c:	01400044 	movi	r5,1
    3040:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    3044:	0009883a 	mov	r4,zero
    3048:	014004c4 	movi	r5,19
    304c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0514);
    3050:	0009883a 	mov	r4,zero
    3054:	01414504 	movi	r5,1300
    3058:	00002c80 	call	2c8 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0900);
    305c:	0009883a 	mov	r4,zero
    3060:	01424004 	movi	r5,2304
    3064:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);//device address
    3068:	0009883a 	mov	r4,zero
    306c:	01400044 	movi	r5,1
    3070:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    3074:	0009883a 	mov	r4,zero
    3078:	000b883a 	mov	r5,zero
    307c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    3080:	0009883a 	mov	r4,zero
    3084:	000b883a 	mov	r5,zero
    3088:	00002c80 	call	2c8 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
    308c:	0009883a 	mov	r4,zero
    3090:	000b883a 	mov	r5,zero
    3094:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
    3098:	0009883a 	mov	r4,zero
    309c:	000b883a 	mov	r5,zero
    30a0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
    30a4:	0009883a 	mov	r4,zero
    30a8:	0140a404 	movi	r5,656
    30ac:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
    30b0:	0009883a 	mov	r4,zero
    30b4:	01401044 	movi	r5,65
    30b8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    30bc:	0009883a 	mov	r4,zero
    30c0:	014004c4 	movi	r5,19
    30c4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    30c8:	0009883a 	mov	r4,zero
    30cc:	000b883a 	mov	r5,zero
    30d0:	00002c80 	call	2c8 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    30d4:	01006c04 	movi	r4,432
    30d8:	01414004 	movi	r5,1280
    30dc:	00026ac0 	call	26ac <UsbWrite>

}
    30e0:	e037883a 	mov	sp,fp
    30e4:	dfc00117 	ldw	ra,4(sp)
    30e8:	df000017 	ldw	fp,0(sp)
    30ec:	dec00204 	addi	sp,sp,8
    30f0:	f800283a 	ret

000030f4 <UsbClassRequest>:

void UsbClassRequest()
{
    30f4:	defffe04 	addi	sp,sp,-8
    30f8:	dfc00115 	stw	ra,4(sp)
    30fc:	df000015 	stw	fp,0(sp)
    3100:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    3104:	01000084 	movi	r4,2
    3108:	01414004 	movi	r5,1280
    310c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x050C);
    3110:	0009883a 	mov	r4,zero
    3114:	01414304 	movi	r5,1292
    3118:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    311c:	0009883a 	mov	r4,zero
    3120:	01400204 	movi	r5,8
    3124:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
    3128:	0009883a 	mov	r4,zero
    312c:	0140b404 	movi	r5,720
    3130:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);
    3134:	0009883a 	mov	r4,zero
    3138:	01400044 	movi	r5,1
    313c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    3140:	0009883a 	mov	r4,zero
    3144:	014004c4 	movi	r5,19
    3148:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0514);
    314c:	0009883a 	mov	r4,zero
    3150:	01414504 	movi	r5,1300
    3154:	00002c80 	call	2c8 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0A21);
    3158:	0009883a 	mov	r4,zero
    315c:	01428844 	movi	r5,2593
    3160:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//device address
    3164:	0009883a 	mov	r4,zero
    3168:	000b883a 	mov	r5,zero
    316c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    3170:	0009883a 	mov	r4,zero
    3174:	000b883a 	mov	r5,zero
    3178:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    317c:	0009883a 	mov	r4,zero
    3180:	000b883a 	mov	r5,zero
    3184:	00002c80 	call	2c8 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
    3188:	0009883a 	mov	r4,zero
    318c:	000b883a 	mov	r5,zero
    3190:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number /data length
    3194:	0009883a 	mov	r4,zero
    3198:	000b883a 	mov	r5,zero
    319c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
    31a0:	0009883a 	mov	r4,zero
    31a4:	0140a404 	movi	r5,656
    31a8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
    31ac:	0009883a 	mov	r4,zero
    31b0:	01401044 	movi	r5,65
    31b4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    31b8:	0009883a 	mov	r4,zero
    31bc:	014004c4 	movi	r5,19
    31c0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    31c4:	0009883a 	mov	r4,zero
    31c8:	000b883a 	mov	r5,zero
    31cc:	00002c80 	call	2c8 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    31d0:	01006c04 	movi	r4,432
    31d4:	01414004 	movi	r5,1280
    31d8:	00026ac0 	call	26ac <UsbWrite>
}
    31dc:	e037883a 	mov	sp,fp
    31e0:	dfc00117 	ldw	ra,4(sp)
    31e4:	df000017 	ldw	fp,0(sp)
    31e8:	dec00204 	addi	sp,sp,8
    31ec:	f800283a 	ret

000031f0 <UsbGetHidDesc>:


void UsbGetHidDesc()
{
    31f0:	defffe04 	addi	sp,sp,-8
    31f4:	dfc00115 	stw	ra,4(sp)
    31f8:	df000015 	stw	fp,0(sp)
    31fc:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    3200:	01000084 	movi	r4,2
    3204:	01414004 	movi	r5,1280
    3208:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x050C);
    320c:	0009883a 	mov	r4,zero
    3210:	01414304 	movi	r5,1292
    3214:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    3218:	0009883a 	mov	r4,zero
    321c:	01400204 	movi	r5,8
    3220:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
    3224:	0009883a 	mov	r4,zero
    3228:	0140b404 	movi	r5,720
    322c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);
    3230:	0009883a 	mov	r4,zero
    3234:	01400044 	movi	r5,1
    3238:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    323c:	0009883a 	mov	r4,zero
    3240:	014004c4 	movi	r5,19
    3244:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0514);
    3248:	0009883a 	mov	r4,zero
    324c:	01414504 	movi	r5,1300
    3250:	00002c80 	call	2c8 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
    3254:	0009883a 	mov	r4,zero
    3258:	0141a044 	movi	r5,1665
    325c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x2100);//e //HID 0x21
    3260:	0009883a 	mov	r4,zero
    3264:	01484004 	movi	r5,8448
    3268:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    326c:	0009883a 	mov	r4,zero
    3270:	000b883a 	mov	r5,zero
    3274:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
    3278:	0009883a 	mov	r4,zero
    327c:	01401ec4 	movi	r5,123
    3280:	00002c80 	call	2c8 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
    3284:	0009883a 	mov	r4,zero
    3288:	01415104 	movi	r5,1348
    328c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    3290:	0009883a 	mov	r4,zero
    3294:	01400204 	movi	r5,8
    3298:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    329c:	0009883a 	mov	r4,zero
    32a0:	0140a404 	movi	r5,656
    32a4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    32a8:	0009883a 	mov	r4,zero
    32ac:	01401044 	movi	r5,65
    32b0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    32b4:	0009883a 	mov	r4,zero
    32b8:	014004c4 	movi	r5,19
    32bc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    32c0:	0009883a 	mov	r4,zero
    32c4:	01414804 	movi	r5,1312
    32c8:	00002c80 	call	2c8 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
    32cc:	0009883a 	mov	r4,zero
    32d0:	000b883a 	mov	r5,zero
    32d4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
    32d8:	0009883a 	mov	r4,zero
    32dc:	000b883a 	mov	r5,zero
    32e0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
    32e4:	0009883a 	mov	r4,zero
    32e8:	01408404 	movi	r5,528
    32ec:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    32f0:	0009883a 	mov	r4,zero
    32f4:	01401044 	movi	r5,65
    32f8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    32fc:	0009883a 	mov	r4,zero
    3300:	014004c4 	movi	r5,19
    3304:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
    3308:	0009883a 	mov	r4,zero
    330c:	000b883a 	mov	r5,zero
    3310:	00002c80 	call	2c8 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    3314:	01006c04 	movi	r4,432
    3318:	01414004 	movi	r5,1280
    331c:	00026ac0 	call	26ac <UsbWrite>

}
    3320:	e037883a 	mov	sp,fp
    3324:	dfc00117 	ldw	ra,4(sp)
    3328:	df000017 	ldw	fp,0(sp)
    332c:	dec00204 	addi	sp,sp,8
    3330:	f800283a 	ret

00003334 <UsbGetReportDesc>:


void UsbGetReportDesc()
{
    3334:	defffe04 	addi	sp,sp,-8
    3338:	dfc00115 	stw	ra,4(sp)
    333c:	df000015 	stw	fp,0(sp)
    3340:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    3344:	01000084 	movi	r4,2
    3348:	01414004 	movi	r5,1280
    334c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x050C);
    3350:	0009883a 	mov	r4,zero
    3354:	01414304 	movi	r5,1292
    3358:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    335c:	0009883a 	mov	r4,zero
    3360:	01400204 	movi	r5,8
    3364:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    3368:	0009883a 	mov	r4,zero
    336c:	0140b404 	movi	r5,720
    3370:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);
    3374:	0009883a 	mov	r4,zero
    3378:	01400044 	movi	r5,1
    337c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    3380:	0009883a 	mov	r4,zero
    3384:	014004c4 	movi	r5,19
    3388:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0514);
    338c:	0009883a 	mov	r4,zero
    3390:	01414504 	movi	r5,1300
    3394:	00002c80 	call	2c8 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
    3398:	0009883a 	mov	r4,zero
    339c:	0141a044 	movi	r5,1665
    33a0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x2200);//e //report 0x22
    33a4:	0009883a 	mov	r4,zero
    33a8:	01488004 	movi	r5,8704
    33ac:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    33b0:	0009883a 	mov	r4,zero
    33b4:	000b883a 	mov	r5,zero
    33b8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
    33bc:	0009883a 	mov	r4,zero
    33c0:	01401ec4 	movi	r5,123
    33c4:	00002c80 	call	2c8 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0580); //514
    33c8:	0009883a 	mov	r4,zero
    33cc:	01416004 	movi	r5,1408
    33d0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    33d4:	0009883a 	mov	r4,zero
    33d8:	01400204 	movi	r5,8
    33dc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    33e0:	0009883a 	mov	r4,zero
    33e4:	0140a404 	movi	r5,656
    33e8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    33ec:	0009883a 	mov	r4,zero
    33f0:	01401044 	movi	r5,65
    33f4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    33f8:	0009883a 	mov	r4,zero
    33fc:	014004c4 	movi	r5,19
    3400:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    3404:	0009883a 	mov	r4,zero
    3408:	01414804 	movi	r5,1312
    340c:	00002c80 	call	2c8 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0588); //520
    3410:	0009883a 	mov	r4,zero
    3414:	01416204 	movi	r5,1416
    3418:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
    341c:	0009883a 	mov	r4,zero
    3420:	01400204 	movi	r5,8
    3424:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    3428:	0009883a 	mov	r4,zero
    342c:	0140a404 	movi	r5,656
    3430:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
    3434:	0009883a 	mov	r4,zero
    3438:	01400044 	movi	r5,1
    343c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    3440:	0009883a 	mov	r4,zero
    3444:	014004c4 	movi	r5,19
    3448:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
    344c:	0009883a 	mov	r4,zero
    3450:	01414b04 	movi	r5,1324
    3454:	00002c80 	call	2c8 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0590); //52c
    3458:	0009883a 	mov	r4,zero
    345c:	01416404 	movi	r5,1424
    3460:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
    3464:	0009883a 	mov	r4,zero
    3468:	01400204 	movi	r5,8
    346c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
    3470:	0009883a 	mov	r4,zero
    3474:	0140a404 	movi	r5,656
    3478:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    347c:	0009883a 	mov	r4,zero
    3480:	01401044 	movi	r5,65
    3484:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    3488:	0009883a 	mov	r4,zero
    348c:	014004c4 	movi	r5,19
    3490:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
    3494:	0009883a 	mov	r4,zero
    3498:	01414e04 	movi	r5,1336
    349c:	00002c80 	call	2c8 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0598); //538
    34a0:	0009883a 	mov	r4,zero
    34a4:	01416604 	movi	r5,1432
    34a8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
    34ac:	0009883a 	mov	r4,zero
    34b0:	01400204 	movi	r5,8
    34b4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
    34b8:	0009883a 	mov	r4,zero
    34bc:	0140a404 	movi	r5,656
    34c0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
    34c4:	0009883a 	mov	r4,zero
    34c8:	01400044 	movi	r5,1
    34cc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
    34d0:	0009883a 	mov	r4,zero
    34d4:	014004c4 	movi	r5,19
    34d8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
    34dc:	0009883a 	mov	r4,zero
    34e0:	01415104 	movi	r5,1348
    34e4:	00002c80 	call	2c8 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x05a0); //544
    34e8:	0009883a 	mov	r4,zero
    34ec:	01416804 	movi	r5,1440
    34f0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    34f4:	0009883a 	mov	r4,zero
    34f8:	01400204 	movi	r5,8
    34fc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    3500:	0009883a 	mov	r4,zero
    3504:	0140a404 	movi	r5,656
    3508:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
    350c:	0009883a 	mov	r4,zero
    3510:	01401044 	movi	r5,65
    3514:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    3518:	0009883a 	mov	r4,zero
    351c:	014004c4 	movi	r5,19
    3520:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
    3524:	0009883a 	mov	r4,zero
    3528:	01415404 	movi	r5,1360
    352c:	00002c80 	call	2c8 <IO_write>

	//data phase IN-6
	IO_write(HPI_DATA,0x05a8); //550
    3530:	0009883a 	mov	r4,zero
    3534:	01416a04 	movi	r5,1448
    3538:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
    353c:	0009883a 	mov	r4,zero
    3540:	01400204 	movi	r5,8
    3544:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    3548:	0009883a 	mov	r4,zero
    354c:	0140a404 	movi	r5,656
    3550:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
    3554:	0009883a 	mov	r4,zero
    3558:	01400044 	movi	r5,1
    355c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    3560:	0009883a 	mov	r4,zero
    3564:	014004c4 	movi	r5,19
    3568:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x055c);//a
    356c:	0009883a 	mov	r4,zero
    3570:	01415704 	movi	r5,1372
    3574:	00002c80 	call	2c8 <IO_write>

	//data phase IN-7
	IO_write(HPI_DATA,0x05b0); //c
    3578:	0009883a 	mov	r4,zero
    357c:	01416c04 	movi	r5,1456
    3580:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
    3584:	0009883a 	mov	r4,zero
    3588:	01400204 	movi	r5,8
    358c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//560
    3590:	0009883a 	mov	r4,zero
    3594:	0140a404 	movi	r5,656
    3598:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//2 //data1
    359c:	0009883a 	mov	r4,zero
    35a0:	01401044 	movi	r5,65
    35a4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    35a8:	0009883a 	mov	r4,zero
    35ac:	014004c4 	movi	r5,19
    35b0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0568);//6
    35b4:	0009883a 	mov	r4,zero
    35b8:	01415a04 	movi	r5,1384
    35bc:	00002c80 	call	2c8 <IO_write>

	//data phase IN-8
	IO_write(HPI_DATA,0x05b8); //8
    35c0:	0009883a 	mov	r4,zero
    35c4:	01416e04 	movi	r5,1464
    35c8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0003);//a
    35cc:	0009883a 	mov	r4,zero
    35d0:	014000c4 	movi	r5,3
    35d4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
    35d8:	0009883a 	mov	r4,zero
    35dc:	0140a404 	movi	r5,656
    35e0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
    35e4:	0009883a 	mov	r4,zero
    35e8:	01400044 	movi	r5,1
    35ec:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//570
    35f0:	0009883a 	mov	r4,zero
    35f4:	014004c4 	movi	r5,19
    35f8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0574);//2
    35fc:	0009883a 	mov	r4,zero
    3600:	01415d04 	movi	r5,1396
    3604:	00002c80 	call	2c8 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //574
    3608:	0009883a 	mov	r4,zero
    360c:	000b883a 	mov	r5,zero
    3610:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
    3614:	0009883a 	mov	r4,zero
    3618:	000b883a 	mov	r5,zero
    361c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0210);//8
    3620:	0009883a 	mov	r4,zero
    3624:	01408404 	movi	r5,528
    3628:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    362c:	0009883a 	mov	r4,zero
    3630:	01401044 	movi	r5,65
    3634:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    3638:	0009883a 	mov	r4,zero
    363c:	014004c4 	movi	r5,19
    3640:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
    3644:	0009883a 	mov	r4,zero
    3648:	000b883a 	mov	r5,zero
    364c:	00002c80 	call	2c8 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    3650:	01006c04 	movi	r4,432
    3654:	01414004 	movi	r5,1280
    3658:	00026ac0 	call	26ac <UsbWrite>

}
    365c:	e037883a 	mov	sp,fp
    3660:	dfc00117 	ldw	ra,4(sp)
    3664:	df000017 	ldw	fp,0(sp)
    3668:	dec00204 	addi	sp,sp,8
    366c:	f800283a 	ret

00003670 <UsbWaitTDListDone>:


alt_u16 UsbWaitTDListDone()
{
    3670:	defffd04 	addi	sp,sp,-12
    3674:	dfc00215 	stw	ra,8(sp)
    3678:	df000115 	stw	fp,4(sp)
    367c:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
    3680:	01005104 	movi	r4,324
    3684:	00027000 	call	2700 <UsbRead>
    3688:	e0bfff0d 	sth	r2,-4(fp)
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
    368c:	01005104 	movi	r4,324
    3690:	000b883a 	mov	r5,zero
    3694:	00026ac0 	call	26ac <UsbWrite>
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
    3698:	00000d06 	br	36d0 <UsbWaitTDListDone+0x60>
	{
		if(usb_ctl_val == 0x0000)
    369c:	e0bfff0b 	ldhu	r2,-4(fp)
    36a0:	10000526 	beq	r2,zero,36b8 <UsbWaitTDListDone+0x48>
		{
		}
		else
		{
			printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
    36a4:	e0bfff0b 	ldhu	r2,-4(fp)
    36a8:	01000074 	movhi	r4,1
    36ac:	210cc204 	addi	r4,r4,13064
    36b0:	100b883a 	mov	r5,r2
    36b4:	00041180 	call	4118 <printf>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    36b8:	01005104 	movi	r4,324
    36bc:	00027000 	call	2700 <UsbRead>
    36c0:	e0bfff0d 	sth	r2,-4(fp)
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
    36c4:	01005104 	movi	r4,324
    36c8:	000b883a 	mov	r5,zero
    36cc:	00026ac0 	call	26ac <UsbWrite>
{
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
    36d0:	e0bfff0b 	ldhu	r2,-4(fp)
    36d4:	10840018 	cmpnei	r2,r2,4096
    36d8:	103ff01e 	bne	r2,zero,369c <__alt_data_end+0xfffadf6c>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
	}

	return usb_ctl_val;
    36dc:	e0bfff0b 	ldhu	r2,-4(fp)
}
    36e0:	e037883a 	mov	sp,fp
    36e4:	dfc00117 	ldw	ra,4(sp)
    36e8:	df000017 	ldw	fp,0(sp)
    36ec:	dec00204 	addi	sp,sp,8
    36f0:	f800283a 	ret

000036f4 <UsbGetRetryCnt>:


alt_u16 UsbGetRetryCnt()
{
    36f4:	defffd04 	addi	sp,sp,-12
    36f8:	dfc00215 	stw	ra,8(sp)
    36fc:	df000115 	stw	fp,4(sp)
    3700:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	IO_read(HPI_STATUS);
    3704:	010000c4 	movi	r4,3
    3708:	00003300 	call	330 <IO_read>
	if(UsbRead(HPI_SIE1_MSG_ADR) == HUSB_TDListDone)
    370c:	01005104 	movi	r4,324
    3710:	00027000 	call	2700 <UsbRead>
    3714:	10bfffcc 	andi	r2,r2,65535
    3718:	10840018 	cmpnei	r2,r2,4096
    371c:	1000091e 	bne	r2,zero,3744 <UsbGetRetryCnt+0x50>
	{
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
    3720:	01005104 	movi	r4,324
    3724:	000b883a 	mov	r5,zero
    3728:	00026ac0 	call	26ac <UsbWrite>

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    372c:	0001883a 	nop
    3730:	010000c4 	movi	r4,3
    3734:	00003300 	call	330 <IO_read>
    3738:	10bfffcc 	andi	r2,r2,65535
    373c:	1080040c 	andi	r2,r2,16
    3740:	103ffb26 	beq	r2,zero,3730 <__alt_data_end+0xfffae000>
		{
		}
	}
	//usleep(1000);
	IO_write(HPI_ADDR,0x0508);
    3744:	01000084 	movi	r4,2
    3748:	01414204 	movi	r5,1288
    374c:	00002c80 	call	2c8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
    3750:	0009883a 	mov	r4,zero
    3754:	00003300 	call	330 <IO_read>
    3758:	e0bfff0d 	sth	r2,-4(fp)

	return usb_ctl_val;
    375c:	e0bfff0b 	ldhu	r2,-4(fp)
}
    3760:	e037883a 	mov	sp,fp
    3764:	dfc00117 	ldw	ra,4(sp)
    3768:	df000017 	ldw	fp,0(sp)
    376c:	dec00204 	addi	sp,sp,8
    3770:	f800283a 	ret

00003774 <UsbPrintMem>:


void UsbPrintMem()
{
    3774:	defffc04 	addi	sp,sp,-16
    3778:	dfc00315 	stw	ra,12(sp)
    377c:	df000215 	stw	fp,8(sp)
    3780:	df000204 	addi	fp,sp,8
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
    3784:	01000084 	movi	r4,2
    3788:	01414004 	movi	r5,1280
    378c:	00002c80 	call	2c8 <IO_write>
	for (i = 0; i <= 200; i += 2)
    3790:	e03ffe15 	stw	zero,-8(fp)
    3794:	00000e06 	br	37d0 <UsbPrintMem+0x5c>
	{
		code = IO_read(HPI_DATA);
    3798:	0009883a 	mov	r4,zero
    379c:	00003300 	call	330 <IO_read>
    37a0:	10bfffcc 	andi	r2,r2,65535
    37a4:	e0bfff15 	stw	r2,-4(fp)
		printf("\naddr %x = %04x\n", 0x0500+i, code);
    37a8:	e0bffe17 	ldw	r2,-8(fp)
    37ac:	10814004 	addi	r2,r2,1280
    37b0:	01000074 	movhi	r4,1
    37b4:	210cca04 	addi	r4,r4,13096
    37b8:	100b883a 	mov	r5,r2
    37bc:	e1bfff17 	ldw	r6,-4(fp)
    37c0:	00041180 	call	4118 <printf>

void UsbPrintMem()
{
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
	for (i = 0; i <= 200; i += 2)
    37c4:	e0bffe17 	ldw	r2,-8(fp)
    37c8:	10800084 	addi	r2,r2,2
    37cc:	e0bffe15 	stw	r2,-8(fp)
    37d0:	e0bffe17 	ldw	r2,-8(fp)
    37d4:	10803250 	cmplti	r2,r2,201
    37d8:	103fef1e 	bne	r2,zero,3798 <__alt_data_end+0xfffae068>
	{
		code = IO_read(HPI_DATA);
		printf("\naddr %x = %04x\n", 0x0500+i, code);
	}
}
    37dc:	e037883a 	mov	sp,fp
    37e0:	dfc00117 	ldw	ra,4(sp)
    37e4:	df000017 	ldw	fp,0(sp)
    37e8:	dec00204 	addi	sp,sp,8
    37ec:	f800283a 	ret

000037f0 <udivmodsi4>:
    37f0:	2900182e 	bgeu	r5,r4,3854 <udivmodsi4+0x64>
    37f4:	28001716 	blt	r5,zero,3854 <udivmodsi4+0x64>
    37f8:	00800804 	movi	r2,32
    37fc:	00c00044 	movi	r3,1
    3800:	00000206 	br	380c <udivmodsi4+0x1c>
    3804:	10001126 	beq	r2,zero,384c <udivmodsi4+0x5c>
    3808:	28000516 	blt	r5,zero,3820 <udivmodsi4+0x30>
    380c:	294b883a 	add	r5,r5,r5
    3810:	10bfffc4 	addi	r2,r2,-1
    3814:	18c7883a 	add	r3,r3,r3
    3818:	293ffa36 	bltu	r5,r4,3804 <__alt_data_end+0xfffae0d4>
    381c:	18000b26 	beq	r3,zero,384c <udivmodsi4+0x5c>
    3820:	0005883a 	mov	r2,zero
    3824:	21400236 	bltu	r4,r5,3830 <udivmodsi4+0x40>
    3828:	2149c83a 	sub	r4,r4,r5
    382c:	10c4b03a 	or	r2,r2,r3
    3830:	1806d07a 	srli	r3,r3,1
    3834:	280ad07a 	srli	r5,r5,1
    3838:	183ffa1e 	bne	r3,zero,3824 <__alt_data_end+0xfffae0f4>
    383c:	3000011e 	bne	r6,zero,3844 <udivmodsi4+0x54>
    3840:	f800283a 	ret
    3844:	2005883a 	mov	r2,r4
    3848:	f800283a 	ret
    384c:	0005883a 	mov	r2,zero
    3850:	003ffa06 	br	383c <__alt_data_end+0xfffae10c>
    3854:	00c00044 	movi	r3,1
    3858:	003ff106 	br	3820 <__alt_data_end+0xfffae0f0>

0000385c <__divsi3>:
    385c:	defffe04 	addi	sp,sp,-8
    3860:	dfc00115 	stw	ra,4(sp)
    3864:	dc000015 	stw	r16,0(sp)
    3868:	20000b16 	blt	r4,zero,3898 <__divsi3+0x3c>
    386c:	0021883a 	mov	r16,zero
    3870:	28000c16 	blt	r5,zero,38a4 <__divsi3+0x48>
    3874:	000d883a 	mov	r6,zero
    3878:	00037f00 	call	37f0 <udivmodsi4>
    387c:	0407c83a 	sub	r3,zero,r16
    3880:	1884f03a 	xor	r2,r3,r2
    3884:	1405883a 	add	r2,r2,r16
    3888:	dfc00117 	ldw	ra,4(sp)
    388c:	dc000017 	ldw	r16,0(sp)
    3890:	dec00204 	addi	sp,sp,8
    3894:	f800283a 	ret
    3898:	0109c83a 	sub	r4,zero,r4
    389c:	04000044 	movi	r16,1
    38a0:	283ff40e 	bge	r5,zero,3874 <__alt_data_end+0xfffae144>
    38a4:	014bc83a 	sub	r5,zero,r5
    38a8:	8400005c 	xori	r16,r16,1
    38ac:	003ff106 	br	3874 <__alt_data_end+0xfffae144>

000038b0 <__modsi3>:
    38b0:	defffd04 	addi	sp,sp,-12
    38b4:	dfc00215 	stw	ra,8(sp)
    38b8:	dc400115 	stw	r17,4(sp)
    38bc:	dc000015 	stw	r16,0(sp)
    38c0:	20000c16 	blt	r4,zero,38f4 <__modsi3+0x44>
    38c4:	0023883a 	mov	r17,zero
    38c8:	0021883a 	mov	r16,zero
    38cc:	28000d16 	blt	r5,zero,3904 <__modsi3+0x54>
    38d0:	01800044 	movi	r6,1
    38d4:	00037f00 	call	37f0 <udivmodsi4>
    38d8:	1404f03a 	xor	r2,r2,r16
    38dc:	8885883a 	add	r2,r17,r2
    38e0:	dfc00217 	ldw	ra,8(sp)
    38e4:	dc400117 	ldw	r17,4(sp)
    38e8:	dc000017 	ldw	r16,0(sp)
    38ec:	dec00304 	addi	sp,sp,12
    38f0:	f800283a 	ret
    38f4:	0109c83a 	sub	r4,zero,r4
    38f8:	04400044 	movi	r17,1
    38fc:	043fffc4 	movi	r16,-1
    3900:	283ff30e 	bge	r5,zero,38d0 <__alt_data_end+0xfffae1a0>
    3904:	014bc83a 	sub	r5,zero,r5
    3908:	003ff106 	br	38d0 <__alt_data_end+0xfffae1a0>

0000390c <__udivsi3>:
    390c:	000d883a 	mov	r6,zero
    3910:	00037f01 	jmpi	37f0 <udivmodsi4>

00003914 <__umodsi3>:
    3914:	01800044 	movi	r6,1
    3918:	00037f01 	jmpi	37f0 <udivmodsi4>

0000391c <malloc>:
    391c:	00800074 	movhi	r2,1
    3920:	10945904 	addi	r2,r2,20836
    3924:	200b883a 	mov	r5,r4
    3928:	11000017 	ldw	r4,0(r2)
    392c:	00039441 	jmpi	3944 <_malloc_r>

00003930 <free>:
    3930:	00800074 	movhi	r2,1
    3934:	10945904 	addi	r2,r2,20836
    3938:	200b883a 	mov	r5,r4
    393c:	11000017 	ldw	r4,0(r2)
    3940:	00086581 	jmpi	8658 <_free_r>

00003944 <_malloc_r>:
    3944:	defff504 	addi	sp,sp,-44
    3948:	dc800315 	stw	r18,12(sp)
    394c:	dfc00a15 	stw	ra,40(sp)
    3950:	df000915 	stw	fp,36(sp)
    3954:	ddc00815 	stw	r23,32(sp)
    3958:	dd800715 	stw	r22,28(sp)
    395c:	dd400615 	stw	r21,24(sp)
    3960:	dd000515 	stw	r20,20(sp)
    3964:	dcc00415 	stw	r19,16(sp)
    3968:	dc400215 	stw	r17,8(sp)
    396c:	dc000115 	stw	r16,4(sp)
    3970:	288002c4 	addi	r2,r5,11
    3974:	00c00584 	movi	r3,22
    3978:	2025883a 	mov	r18,r4
    397c:	18802a2e 	bgeu	r3,r2,3a28 <_malloc_r+0xe4>
    3980:	047ffe04 	movi	r17,-8
    3984:	1462703a 	and	r17,r2,r17
    3988:	88009e16 	blt	r17,zero,3c04 <_malloc_r+0x2c0>
    398c:	89409d36 	bltu	r17,r5,3c04 <_malloc_r+0x2c0>
    3990:	00108e40 	call	108e4 <__malloc_lock>
    3994:	00807dc4 	movi	r2,503
    3998:	14402736 	bltu	r2,r17,3a38 <_malloc_r+0xf4>
    399c:	8806d0fa 	srli	r3,r17,3
    39a0:	04c00074 	movhi	r19,1
    39a4:	9ccdab04 	addi	r19,r19,13996
    39a8:	18c5883a 	add	r2,r3,r3
    39ac:	1085883a 	add	r2,r2,r2
    39b0:	1085883a 	add	r2,r2,r2
    39b4:	9885883a 	add	r2,r19,r2
    39b8:	14000317 	ldw	r16,12(r2)
    39bc:	80814a26 	beq	r16,r2,3ee8 <_malloc_r+0x5a4>
    39c0:	80c00117 	ldw	r3,4(r16)
    39c4:	81000317 	ldw	r4,12(r16)
    39c8:	00bfff04 	movi	r2,-4
    39cc:	1884703a 	and	r2,r3,r2
    39d0:	81400217 	ldw	r5,8(r16)
    39d4:	8085883a 	add	r2,r16,r2
    39d8:	10c00117 	ldw	r3,4(r2)
    39dc:	29000315 	stw	r4,12(r5)
    39e0:	21400215 	stw	r5,8(r4)
    39e4:	18c00054 	ori	r3,r3,1
    39e8:	10c00115 	stw	r3,4(r2)
    39ec:	9009883a 	mov	r4,r18
    39f0:	00109040 	call	10904 <__malloc_unlock>
    39f4:	80800204 	addi	r2,r16,8
    39f8:	dfc00a17 	ldw	ra,40(sp)
    39fc:	df000917 	ldw	fp,36(sp)
    3a00:	ddc00817 	ldw	r23,32(sp)
    3a04:	dd800717 	ldw	r22,28(sp)
    3a08:	dd400617 	ldw	r21,24(sp)
    3a0c:	dd000517 	ldw	r20,20(sp)
    3a10:	dcc00417 	ldw	r19,16(sp)
    3a14:	dc800317 	ldw	r18,12(sp)
    3a18:	dc400217 	ldw	r17,8(sp)
    3a1c:	dc000117 	ldw	r16,4(sp)
    3a20:	dec00b04 	addi	sp,sp,44
    3a24:	f800283a 	ret
    3a28:	04400404 	movi	r17,16
    3a2c:	89407536 	bltu	r17,r5,3c04 <_malloc_r+0x2c0>
    3a30:	00108e40 	call	108e4 <__malloc_lock>
    3a34:	003fd906 	br	399c <__alt_data_end+0xfffae26c>
    3a38:	8806d27a 	srli	r3,r17,9
    3a3c:	18007526 	beq	r3,zero,3c14 <_malloc_r+0x2d0>
    3a40:	00800104 	movi	r2,4
    3a44:	10c0ef36 	bltu	r2,r3,3e04 <_malloc_r+0x4c0>
    3a48:	8806d1ba 	srli	r3,r17,6
    3a4c:	19c00e04 	addi	r7,r3,56
    3a50:	39cb883a 	add	r5,r7,r7
    3a54:	04c00074 	movhi	r19,1
    3a58:	294b883a 	add	r5,r5,r5
    3a5c:	9ccdab04 	addi	r19,r19,13996
    3a60:	294b883a 	add	r5,r5,r5
    3a64:	994b883a 	add	r5,r19,r5
    3a68:	2c000317 	ldw	r16,12(r5)
    3a6c:	2c000e26 	beq	r5,r16,3aa8 <_malloc_r+0x164>
    3a70:	80800117 	ldw	r2,4(r16)
    3a74:	01bfff04 	movi	r6,-4
    3a78:	010003c4 	movi	r4,15
    3a7c:	1184703a 	and	r2,r2,r6
    3a80:	1447c83a 	sub	r3,r2,r17
    3a84:	20c00716 	blt	r4,r3,3aa4 <_malloc_r+0x160>
    3a88:	1800650e 	bge	r3,zero,3c20 <_malloc_r+0x2dc>
    3a8c:	84000317 	ldw	r16,12(r16)
    3a90:	2c000526 	beq	r5,r16,3aa8 <_malloc_r+0x164>
    3a94:	80800117 	ldw	r2,4(r16)
    3a98:	1184703a 	and	r2,r2,r6
    3a9c:	1447c83a 	sub	r3,r2,r17
    3aa0:	20fff90e 	bge	r4,r3,3a88 <__alt_data_end+0xfffae358>
    3aa4:	39ffffc4 	addi	r7,r7,-1
    3aa8:	38c00044 	addi	r3,r7,1
    3aac:	01800074 	movhi	r6,1
    3ab0:	9c000417 	ldw	r16,16(r19)
    3ab4:	318dab04 	addi	r6,r6,13996
    3ab8:	32400204 	addi	r9,r6,8
    3abc:	82410326 	beq	r16,r9,3ecc <_malloc_r+0x588>
    3ac0:	81000117 	ldw	r4,4(r16)
    3ac4:	00bfff04 	movi	r2,-4
    3ac8:	208e703a 	and	r7,r4,r2
    3acc:	3c45c83a 	sub	r2,r7,r17
    3ad0:	010003c4 	movi	r4,15
    3ad4:	2080ee16 	blt	r4,r2,3e90 <_malloc_r+0x54c>
    3ad8:	32400515 	stw	r9,20(r6)
    3adc:	32400415 	stw	r9,16(r6)
    3ae0:	1000510e 	bge	r2,zero,3c28 <_malloc_r+0x2e4>
    3ae4:	00807fc4 	movi	r2,511
    3ae8:	11c0ce36 	bltu	r2,r7,3e24 <_malloc_r+0x4e0>
    3aec:	3808d0fa 	srli	r4,r7,3
    3af0:	01c00044 	movi	r7,1
    3af4:	30800117 	ldw	r2,4(r6)
    3af8:	210b883a 	add	r5,r4,r4
    3afc:	294b883a 	add	r5,r5,r5
    3b00:	2009d0ba 	srai	r4,r4,2
    3b04:	294b883a 	add	r5,r5,r5
    3b08:	298b883a 	add	r5,r5,r6
    3b0c:	2a000217 	ldw	r8,8(r5)
    3b10:	3908983a 	sll	r4,r7,r4
    3b14:	81400315 	stw	r5,12(r16)
    3b18:	82000215 	stw	r8,8(r16)
    3b1c:	2088b03a 	or	r4,r4,r2
    3b20:	2c000215 	stw	r16,8(r5)
    3b24:	31000115 	stw	r4,4(r6)
    3b28:	44000315 	stw	r16,12(r8)
    3b2c:	1805d0ba 	srai	r2,r3,2
    3b30:	01400044 	movi	r5,1
    3b34:	288a983a 	sll	r5,r5,r2
    3b38:	21404336 	bltu	r4,r5,3c48 <_malloc_r+0x304>
    3b3c:	2144703a 	and	r2,r4,r5
    3b40:	10000a1e 	bne	r2,zero,3b6c <_malloc_r+0x228>
    3b44:	00bfff04 	movi	r2,-4
    3b48:	294b883a 	add	r5,r5,r5
    3b4c:	1886703a 	and	r3,r3,r2
    3b50:	2144703a 	and	r2,r4,r5
    3b54:	18c00104 	addi	r3,r3,4
    3b58:	1000041e 	bne	r2,zero,3b6c <_malloc_r+0x228>
    3b5c:	294b883a 	add	r5,r5,r5
    3b60:	2144703a 	and	r2,r4,r5
    3b64:	18c00104 	addi	r3,r3,4
    3b68:	103ffc26 	beq	r2,zero,3b5c <__alt_data_end+0xfffae42c>
    3b6c:	023fff04 	movi	r8,-4
    3b70:	01c003c4 	movi	r7,15
    3b74:	18c5883a 	add	r2,r3,r3
    3b78:	1085883a 	add	r2,r2,r2
    3b7c:	1085883a 	add	r2,r2,r2
    3b80:	9895883a 	add	r10,r19,r2
    3b84:	52c00304 	addi	r11,r10,12
    3b88:	1819883a 	mov	r12,r3
    3b8c:	5c000017 	ldw	r16,0(r11)
    3b90:	59bffd04 	addi	r6,r11,-12
    3b94:	8180041e 	bne	r16,r6,3ba8 <_malloc_r+0x264>
    3b98:	0000ce06 	br	3ed4 <_malloc_r+0x590>
    3b9c:	2000d70e 	bge	r4,zero,3efc <_malloc_r+0x5b8>
    3ba0:	84000317 	ldw	r16,12(r16)
    3ba4:	8180cb26 	beq	r16,r6,3ed4 <_malloc_r+0x590>
    3ba8:	80800117 	ldw	r2,4(r16)
    3bac:	1204703a 	and	r2,r2,r8
    3bb0:	1449c83a 	sub	r4,r2,r17
    3bb4:	393ff90e 	bge	r7,r4,3b9c <__alt_data_end+0xfffae46c>
    3bb8:	80800317 	ldw	r2,12(r16)
    3bbc:	80c00217 	ldw	r3,8(r16)
    3bc0:	89400054 	ori	r5,r17,1
    3bc4:	81400115 	stw	r5,4(r16)
    3bc8:	18800315 	stw	r2,12(r3)
    3bcc:	10c00215 	stw	r3,8(r2)
    3bd0:	8463883a 	add	r17,r16,r17
    3bd4:	9c400515 	stw	r17,20(r19)
    3bd8:	9c400415 	stw	r17,16(r19)
    3bdc:	20800054 	ori	r2,r4,1
    3be0:	88800115 	stw	r2,4(r17)
    3be4:	8a400315 	stw	r9,12(r17)
    3be8:	8a400215 	stw	r9,8(r17)
    3bec:	8923883a 	add	r17,r17,r4
    3bf0:	89000015 	stw	r4,0(r17)
    3bf4:	9009883a 	mov	r4,r18
    3bf8:	00109040 	call	10904 <__malloc_unlock>
    3bfc:	80800204 	addi	r2,r16,8
    3c00:	003f7d06 	br	39f8 <__alt_data_end+0xfffae2c8>
    3c04:	00800304 	movi	r2,12
    3c08:	90800015 	stw	r2,0(r18)
    3c0c:	0005883a 	mov	r2,zero
    3c10:	003f7906 	br	39f8 <__alt_data_end+0xfffae2c8>
    3c14:	01401f84 	movi	r5,126
    3c18:	01c00fc4 	movi	r7,63
    3c1c:	003f8d06 	br	3a54 <__alt_data_end+0xfffae324>
    3c20:	81000317 	ldw	r4,12(r16)
    3c24:	003f6a06 	br	39d0 <__alt_data_end+0xfffae2a0>
    3c28:	81c5883a 	add	r2,r16,r7
    3c2c:	10c00117 	ldw	r3,4(r2)
    3c30:	9009883a 	mov	r4,r18
    3c34:	18c00054 	ori	r3,r3,1
    3c38:	10c00115 	stw	r3,4(r2)
    3c3c:	00109040 	call	10904 <__malloc_unlock>
    3c40:	80800204 	addi	r2,r16,8
    3c44:	003f6c06 	br	39f8 <__alt_data_end+0xfffae2c8>
    3c48:	9c000217 	ldw	r16,8(r19)
    3c4c:	00bfff04 	movi	r2,-4
    3c50:	85800117 	ldw	r22,4(r16)
    3c54:	b0ac703a 	and	r22,r22,r2
    3c58:	b4400336 	bltu	r22,r17,3c68 <_malloc_r+0x324>
    3c5c:	b445c83a 	sub	r2,r22,r17
    3c60:	00c003c4 	movi	r3,15
    3c64:	18805d16 	blt	r3,r2,3ddc <_malloc_r+0x498>
    3c68:	05c00074 	movhi	r23,1
    3c6c:	00800074 	movhi	r2,1
    3c70:	bdd45604 	addi	r23,r23,20824
    3c74:	109b4604 	addi	r2,r2,27928
    3c78:	15400017 	ldw	r21,0(r2)
    3c7c:	b9000017 	ldw	r4,0(r23)
    3c80:	00ffffc4 	movi	r3,-1
    3c84:	858d883a 	add	r6,r16,r22
    3c88:	8d6b883a 	add	r21,r17,r21
    3c8c:	20c0e426 	beq	r4,r3,4020 <_malloc_r+0x6dc>
    3c90:	ad4403c4 	addi	r21,r21,4111
    3c94:	00fc0004 	movi	r3,-4096
    3c98:	a8ea703a 	and	r21,r21,r3
    3c9c:	9009883a 	mov	r4,r18
    3ca0:	a80b883a 	mov	r5,r21
    3ca4:	d9800015 	stw	r6,0(sp)
    3ca8:	000429c0 	call	429c <_sbrk_r>
    3cac:	00ffffc4 	movi	r3,-1
    3cb0:	1029883a 	mov	r20,r2
    3cb4:	d9800017 	ldw	r6,0(sp)
    3cb8:	10c0a426 	beq	r2,r3,3f4c <_malloc_r+0x608>
    3cbc:	1180a236 	bltu	r2,r6,3f48 <_malloc_r+0x604>
    3cc0:	07000074 	movhi	fp,1
    3cc4:	e71b5204 	addi	fp,fp,27976
    3cc8:	e0c00017 	ldw	r3,0(fp)
    3ccc:	a8c7883a 	add	r3,r21,r3
    3cd0:	e0c00015 	stw	r3,0(fp)
    3cd4:	3500da26 	beq	r6,r20,4040 <_malloc_r+0x6fc>
    3cd8:	b9000017 	ldw	r4,0(r23)
    3cdc:	00bfffc4 	movi	r2,-1
    3ce0:	2080e426 	beq	r4,r2,4074 <_malloc_r+0x730>
    3ce4:	a185c83a 	sub	r2,r20,r6
    3ce8:	1885883a 	add	r2,r3,r2
    3cec:	e0800015 	stw	r2,0(fp)
    3cf0:	a0c001cc 	andi	r3,r20,7
    3cf4:	1800b526 	beq	r3,zero,3fcc <_malloc_r+0x688>
    3cf8:	a0e9c83a 	sub	r20,r20,r3
    3cfc:	00840204 	movi	r2,4104
    3d00:	a5000204 	addi	r20,r20,8
    3d04:	10c7c83a 	sub	r3,r2,r3
    3d08:	a545883a 	add	r2,r20,r21
    3d0c:	1083ffcc 	andi	r2,r2,4095
    3d10:	18abc83a 	sub	r21,r3,r2
    3d14:	9009883a 	mov	r4,r18
    3d18:	a80b883a 	mov	r5,r21
    3d1c:	000429c0 	call	429c <_sbrk_r>
    3d20:	00ffffc4 	movi	r3,-1
    3d24:	10c0d026 	beq	r2,r3,4068 <_malloc_r+0x724>
    3d28:	1507c83a 	sub	r3,r2,r20
    3d2c:	a8c7883a 	add	r3,r21,r3
    3d30:	18c00054 	ori	r3,r3,1
    3d34:	e0800017 	ldw	r2,0(fp)
    3d38:	9d000215 	stw	r20,8(r19)
    3d3c:	a0c00115 	stw	r3,4(r20)
    3d40:	a887883a 	add	r3,r21,r2
    3d44:	e0c00015 	stw	r3,0(fp)
    3d48:	84c00e26 	beq	r16,r19,3d84 <_malloc_r+0x440>
    3d4c:	018003c4 	movi	r6,15
    3d50:	3580a02e 	bgeu	r6,r22,3fd4 <_malloc_r+0x690>
    3d54:	81400117 	ldw	r5,4(r16)
    3d58:	013ffe04 	movi	r4,-8
    3d5c:	b0bffd04 	addi	r2,r22,-12
    3d60:	1104703a 	and	r2,r2,r4
    3d64:	2900004c 	andi	r4,r5,1
    3d68:	1108b03a 	or	r4,r2,r4
    3d6c:	81000115 	stw	r4,4(r16)
    3d70:	01400144 	movi	r5,5
    3d74:	8089883a 	add	r4,r16,r2
    3d78:	21400115 	stw	r5,4(r4)
    3d7c:	21400215 	stw	r5,8(r4)
    3d80:	3080c036 	bltu	r6,r2,4084 <_malloc_r+0x740>
    3d84:	00800074 	movhi	r2,1
    3d88:	109b4504 	addi	r2,r2,27924
    3d8c:	11000017 	ldw	r4,0(r2)
    3d90:	20c0012e 	bgeu	r4,r3,3d98 <_malloc_r+0x454>
    3d94:	10c00015 	stw	r3,0(r2)
    3d98:	00800074 	movhi	r2,1
    3d9c:	109b4404 	addi	r2,r2,27920
    3da0:	11000017 	ldw	r4,0(r2)
    3da4:	9c000217 	ldw	r16,8(r19)
    3da8:	20c0012e 	bgeu	r4,r3,3db0 <_malloc_r+0x46c>
    3dac:	10c00015 	stw	r3,0(r2)
    3db0:	80c00117 	ldw	r3,4(r16)
    3db4:	00bfff04 	movi	r2,-4
    3db8:	1886703a 	and	r3,r3,r2
    3dbc:	1c45c83a 	sub	r2,r3,r17
    3dc0:	1c400236 	bltu	r3,r17,3dcc <_malloc_r+0x488>
    3dc4:	00c003c4 	movi	r3,15
    3dc8:	18800416 	blt	r3,r2,3ddc <_malloc_r+0x498>
    3dcc:	9009883a 	mov	r4,r18
    3dd0:	00109040 	call	10904 <__malloc_unlock>
    3dd4:	0005883a 	mov	r2,zero
    3dd8:	003f0706 	br	39f8 <__alt_data_end+0xfffae2c8>
    3ddc:	88c00054 	ori	r3,r17,1
    3de0:	80c00115 	stw	r3,4(r16)
    3de4:	8463883a 	add	r17,r16,r17
    3de8:	10800054 	ori	r2,r2,1
    3dec:	9c400215 	stw	r17,8(r19)
    3df0:	88800115 	stw	r2,4(r17)
    3df4:	9009883a 	mov	r4,r18
    3df8:	00109040 	call	10904 <__malloc_unlock>
    3dfc:	80800204 	addi	r2,r16,8
    3e00:	003efd06 	br	39f8 <__alt_data_end+0xfffae2c8>
    3e04:	00800504 	movi	r2,20
    3e08:	10c0482e 	bgeu	r2,r3,3f2c <_malloc_r+0x5e8>
    3e0c:	00801504 	movi	r2,84
    3e10:	10c06836 	bltu	r2,r3,3fb4 <_malloc_r+0x670>
    3e14:	8806d33a 	srli	r3,r17,12
    3e18:	19c01b84 	addi	r7,r3,110
    3e1c:	39cb883a 	add	r5,r7,r7
    3e20:	003f0c06 	br	3a54 <__alt_data_end+0xfffae324>
    3e24:	3804d27a 	srli	r2,r7,9
    3e28:	01000104 	movi	r4,4
    3e2c:	2080422e 	bgeu	r4,r2,3f38 <_malloc_r+0x5f4>
    3e30:	01000504 	movi	r4,20
    3e34:	20807c36 	bltu	r4,r2,4028 <_malloc_r+0x6e4>
    3e38:	110016c4 	addi	r4,r2,91
    3e3c:	210b883a 	add	r5,r4,r4
    3e40:	294b883a 	add	r5,r5,r5
    3e44:	294b883a 	add	r5,r5,r5
    3e48:	994b883a 	add	r5,r19,r5
    3e4c:	28800217 	ldw	r2,8(r5)
    3e50:	02000074 	movhi	r8,1
    3e54:	420dab04 	addi	r8,r8,13996
    3e58:	11406326 	beq	r2,r5,3fe8 <_malloc_r+0x6a4>
    3e5c:	01bfff04 	movi	r6,-4
    3e60:	11000117 	ldw	r4,4(r2)
    3e64:	2188703a 	and	r4,r4,r6
    3e68:	3900022e 	bgeu	r7,r4,3e74 <_malloc_r+0x530>
    3e6c:	10800217 	ldw	r2,8(r2)
    3e70:	28bffb1e 	bne	r5,r2,3e60 <__alt_data_end+0xfffae730>
    3e74:	11800317 	ldw	r6,12(r2)
    3e78:	99000117 	ldw	r4,4(r19)
    3e7c:	81800315 	stw	r6,12(r16)
    3e80:	80800215 	stw	r2,8(r16)
    3e84:	34000215 	stw	r16,8(r6)
    3e88:	14000315 	stw	r16,12(r2)
    3e8c:	003f2706 	br	3b2c <__alt_data_end+0xfffae3fc>
    3e90:	88c00054 	ori	r3,r17,1
    3e94:	80c00115 	stw	r3,4(r16)
    3e98:	8463883a 	add	r17,r16,r17
    3e9c:	34400515 	stw	r17,20(r6)
    3ea0:	34400415 	stw	r17,16(r6)
    3ea4:	10c00054 	ori	r3,r2,1
    3ea8:	8a400315 	stw	r9,12(r17)
    3eac:	8a400215 	stw	r9,8(r17)
    3eb0:	88c00115 	stw	r3,4(r17)
    3eb4:	88a3883a 	add	r17,r17,r2
    3eb8:	88800015 	stw	r2,0(r17)
    3ebc:	9009883a 	mov	r4,r18
    3ec0:	00109040 	call	10904 <__malloc_unlock>
    3ec4:	80800204 	addi	r2,r16,8
    3ec8:	003ecb06 	br	39f8 <__alt_data_end+0xfffae2c8>
    3ecc:	31000117 	ldw	r4,4(r6)
    3ed0:	003f1606 	br	3b2c <__alt_data_end+0xfffae3fc>
    3ed4:	63000044 	addi	r12,r12,1
    3ed8:	608000cc 	andi	r2,r12,3
    3edc:	5ac00204 	addi	r11,r11,8
    3ee0:	103f2a1e 	bne	r2,zero,3b8c <__alt_data_end+0xfffae45c>
    3ee4:	00002106 	br	3f6c <_malloc_r+0x628>
    3ee8:	80800204 	addi	r2,r16,8
    3eec:	84000517 	ldw	r16,20(r16)
    3ef0:	143eb31e 	bne	r2,r16,39c0 <__alt_data_end+0xfffae290>
    3ef4:	18c00084 	addi	r3,r3,2
    3ef8:	003eec06 	br	3aac <__alt_data_end+0xfffae37c>
    3efc:	8085883a 	add	r2,r16,r2
    3f00:	10c00117 	ldw	r3,4(r2)
    3f04:	81000317 	ldw	r4,12(r16)
    3f08:	81400217 	ldw	r5,8(r16)
    3f0c:	18c00054 	ori	r3,r3,1
    3f10:	10c00115 	stw	r3,4(r2)
    3f14:	29000315 	stw	r4,12(r5)
    3f18:	21400215 	stw	r5,8(r4)
    3f1c:	9009883a 	mov	r4,r18
    3f20:	00109040 	call	10904 <__malloc_unlock>
    3f24:	80800204 	addi	r2,r16,8
    3f28:	003eb306 	br	39f8 <__alt_data_end+0xfffae2c8>
    3f2c:	19c016c4 	addi	r7,r3,91
    3f30:	39cb883a 	add	r5,r7,r7
    3f34:	003ec706 	br	3a54 <__alt_data_end+0xfffae324>
    3f38:	3804d1ba 	srli	r2,r7,6
    3f3c:	11000e04 	addi	r4,r2,56
    3f40:	210b883a 	add	r5,r4,r4
    3f44:	003fbe06 	br	3e40 <__alt_data_end+0xfffae710>
    3f48:	84ff5d26 	beq	r16,r19,3cc0 <__alt_data_end+0xfffae590>
    3f4c:	9c000217 	ldw	r16,8(r19)
    3f50:	00bfff04 	movi	r2,-4
    3f54:	80c00117 	ldw	r3,4(r16)
    3f58:	1886703a 	and	r3,r3,r2
    3f5c:	003f9706 	br	3dbc <__alt_data_end+0xfffae68c>
    3f60:	52800017 	ldw	r10,0(r10)
    3f64:	18ffffc4 	addi	r3,r3,-1
    3f68:	50805c1e 	bne	r10,r2,40dc <_malloc_r+0x798>
    3f6c:	190000cc 	andi	r4,r3,3
    3f70:	50bffe04 	addi	r2,r10,-8
    3f74:	203ffa1e 	bne	r4,zero,3f60 <__alt_data_end+0xfffae830>
    3f78:	98800117 	ldw	r2,4(r19)
    3f7c:	0146303a 	nor	r3,zero,r5
    3f80:	1884703a 	and	r2,r3,r2
    3f84:	98800115 	stw	r2,4(r19)
    3f88:	294b883a 	add	r5,r5,r5
    3f8c:	117f2e36 	bltu	r2,r5,3c48 <__alt_data_end+0xfffae518>
    3f90:	283f2d26 	beq	r5,zero,3c48 <__alt_data_end+0xfffae518>
    3f94:	1146703a 	and	r3,r2,r5
    3f98:	1800521e 	bne	r3,zero,40e4 <_malloc_r+0x7a0>
    3f9c:	6007883a 	mov	r3,r12
    3fa0:	294b883a 	add	r5,r5,r5
    3fa4:	1148703a 	and	r4,r2,r5
    3fa8:	18c00104 	addi	r3,r3,4
    3fac:	203ffc26 	beq	r4,zero,3fa0 <__alt_data_end+0xfffae870>
    3fb0:	003ef006 	br	3b74 <__alt_data_end+0xfffae444>
    3fb4:	00805504 	movi	r2,340
    3fb8:	10c01336 	bltu	r2,r3,4008 <_malloc_r+0x6c4>
    3fbc:	8806d3fa 	srli	r3,r17,15
    3fc0:	19c01dc4 	addi	r7,r3,119
    3fc4:	39cb883a 	add	r5,r7,r7
    3fc8:	003ea206 	br	3a54 <__alt_data_end+0xfffae324>
    3fcc:	00c40004 	movi	r3,4096
    3fd0:	003f4d06 	br	3d08 <__alt_data_end+0xfffae5d8>
    3fd4:	00800044 	movi	r2,1
    3fd8:	a0800115 	stw	r2,4(r20)
    3fdc:	a021883a 	mov	r16,r20
    3fe0:	0007883a 	mov	r3,zero
    3fe4:	003f7506 	br	3dbc <__alt_data_end+0xfffae68c>
    3fe8:	200bd0ba 	srai	r5,r4,2
    3fec:	01800044 	movi	r6,1
    3ff0:	41000117 	ldw	r4,4(r8)
    3ff4:	314a983a 	sll	r5,r6,r5
    3ff8:	100d883a 	mov	r6,r2
    3ffc:	2908b03a 	or	r4,r5,r4
    4000:	41000115 	stw	r4,4(r8)
    4004:	003f9d06 	br	3e7c <__alt_data_end+0xfffae74c>
    4008:	00815504 	movi	r2,1364
    400c:	10c01336 	bltu	r2,r3,405c <_malloc_r+0x718>
    4010:	8806d4ba 	srli	r3,r17,18
    4014:	19c01f04 	addi	r7,r3,124
    4018:	39cb883a 	add	r5,r7,r7
    401c:	003e8d06 	br	3a54 <__alt_data_end+0xfffae324>
    4020:	ad400404 	addi	r21,r21,16
    4024:	003f1d06 	br	3c9c <__alt_data_end+0xfffae56c>
    4028:	01001504 	movi	r4,84
    402c:	20801c36 	bltu	r4,r2,40a0 <_malloc_r+0x75c>
    4030:	3804d33a 	srli	r2,r7,12
    4034:	11001b84 	addi	r4,r2,110
    4038:	210b883a 	add	r5,r4,r4
    403c:	003f8006 	br	3e40 <__alt_data_end+0xfffae710>
    4040:	3083ffcc 	andi	r2,r6,4095
    4044:	103f241e 	bne	r2,zero,3cd8 <__alt_data_end+0xfffae5a8>
    4048:	99000217 	ldw	r4,8(r19)
    404c:	ad85883a 	add	r2,r21,r22
    4050:	10800054 	ori	r2,r2,1
    4054:	20800115 	stw	r2,4(r4)
    4058:	003f4a06 	br	3d84 <__alt_data_end+0xfffae654>
    405c:	01403f04 	movi	r5,252
    4060:	01c01f84 	movi	r7,126
    4064:	003e7b06 	br	3a54 <__alt_data_end+0xfffae324>
    4068:	00c00044 	movi	r3,1
    406c:	002b883a 	mov	r21,zero
    4070:	003f3006 	br	3d34 <__alt_data_end+0xfffae604>
    4074:	00800074 	movhi	r2,1
    4078:	10945604 	addi	r2,r2,20824
    407c:	15000015 	stw	r20,0(r2)
    4080:	003f1b06 	br	3cf0 <__alt_data_end+0xfffae5c0>
    4084:	9009883a 	mov	r4,r18
    4088:	81400204 	addi	r5,r16,8
    408c:	00086580 	call	8658 <_free_r>
    4090:	00800074 	movhi	r2,1
    4094:	109b5204 	addi	r2,r2,27976
    4098:	10c00017 	ldw	r3,0(r2)
    409c:	003f3906 	br	3d84 <__alt_data_end+0xfffae654>
    40a0:	01005504 	movi	r4,340
    40a4:	20800436 	bltu	r4,r2,40b8 <_malloc_r+0x774>
    40a8:	3804d3fa 	srli	r2,r7,15
    40ac:	11001dc4 	addi	r4,r2,119
    40b0:	210b883a 	add	r5,r4,r4
    40b4:	003f6206 	br	3e40 <__alt_data_end+0xfffae710>
    40b8:	01015504 	movi	r4,1364
    40bc:	20800436 	bltu	r4,r2,40d0 <_malloc_r+0x78c>
    40c0:	3804d4ba 	srli	r2,r7,18
    40c4:	11001f04 	addi	r4,r2,124
    40c8:	210b883a 	add	r5,r4,r4
    40cc:	003f5c06 	br	3e40 <__alt_data_end+0xfffae710>
    40d0:	01403f04 	movi	r5,252
    40d4:	01001f84 	movi	r4,126
    40d8:	003f5906 	br	3e40 <__alt_data_end+0xfffae710>
    40dc:	98800117 	ldw	r2,4(r19)
    40e0:	003fa906 	br	3f88 <__alt_data_end+0xfffae858>
    40e4:	6007883a 	mov	r3,r12
    40e8:	003ea206 	br	3b74 <__alt_data_end+0xfffae444>

000040ec <_printf_r>:
    40ec:	defffd04 	addi	sp,sp,-12
    40f0:	dfc00015 	stw	ra,0(sp)
    40f4:	d9800115 	stw	r6,4(sp)
    40f8:	d9c00215 	stw	r7,8(sp)
    40fc:	280d883a 	mov	r6,r5
    4100:	21400217 	ldw	r5,8(r4)
    4104:	d9c00104 	addi	r7,sp,4
    4108:	00043880 	call	4388 <___vfprintf_internal_r>
    410c:	dfc00017 	ldw	ra,0(sp)
    4110:	dec00304 	addi	sp,sp,12
    4114:	f800283a 	ret

00004118 <printf>:
    4118:	defffc04 	addi	sp,sp,-16
    411c:	dfc00015 	stw	ra,0(sp)
    4120:	d9400115 	stw	r5,4(sp)
    4124:	d9800215 	stw	r6,8(sp)
    4128:	d9c00315 	stw	r7,12(sp)
    412c:	00800074 	movhi	r2,1
    4130:	10945904 	addi	r2,r2,20836
    4134:	10800017 	ldw	r2,0(r2)
    4138:	200b883a 	mov	r5,r4
    413c:	d9800104 	addi	r6,sp,4
    4140:	11000217 	ldw	r4,8(r2)
    4144:	00064840 	call	6484 <__vfprintf_internal>
    4148:	dfc00017 	ldw	ra,0(sp)
    414c:	dec00404 	addi	sp,sp,16
    4150:	f800283a 	ret

00004154 <_puts_r>:
    4154:	defff604 	addi	sp,sp,-40
    4158:	dc000715 	stw	r16,28(sp)
    415c:	2021883a 	mov	r16,r4
    4160:	2809883a 	mov	r4,r5
    4164:	dc400815 	stw	r17,32(sp)
    4168:	dfc00915 	stw	ra,36(sp)
    416c:	2823883a 	mov	r17,r5
    4170:	00042f00 	call	42f0 <strlen>
    4174:	00c00074 	movhi	r3,1
    4178:	18d45904 	addi	r3,r3,20836
    417c:	18c00017 	ldw	r3,0(r3)
    4180:	11000044 	addi	r4,r2,1
    4184:	d8800115 	stw	r2,4(sp)
    4188:	18c00217 	ldw	r3,8(r3)
    418c:	01400074 	movhi	r5,1
    4190:	294ccf04 	addi	r5,r5,13116
    4194:	1880030b 	ldhu	r2,12(r3)
    4198:	d9400215 	stw	r5,8(sp)
    419c:	d9000615 	stw	r4,24(sp)
    41a0:	01400044 	movi	r5,1
    41a4:	01000084 	movi	r4,2
    41a8:	d9000515 	stw	r4,20(sp)
    41ac:	dc400015 	stw	r17,0(sp)
    41b0:	d9400315 	stw	r5,12(sp)
    41b4:	dec00415 	stw	sp,16(sp)
    41b8:	1108000c 	andi	r4,r2,8192
    41bc:	2000061e 	bne	r4,zero,41d8 <_puts_r+0x84>
    41c0:	19401917 	ldw	r5,100(r3)
    41c4:	0137ffc4 	movi	r4,-8193
    41c8:	10880014 	ori	r2,r2,8192
    41cc:	2908703a 	and	r4,r5,r4
    41d0:	1880030d 	sth	r2,12(r3)
    41d4:	19001915 	stw	r4,100(r3)
    41d8:	81400217 	ldw	r5,8(r16)
    41dc:	8009883a 	mov	r4,r16
    41e0:	d9800404 	addi	r6,sp,16
    41e4:	00089480 	call	8948 <__sfvwrite_r>
    41e8:	1000061e 	bne	r2,zero,4204 <_puts_r+0xb0>
    41ec:	00800284 	movi	r2,10
    41f0:	dfc00917 	ldw	ra,36(sp)
    41f4:	dc400817 	ldw	r17,32(sp)
    41f8:	dc000717 	ldw	r16,28(sp)
    41fc:	dec00a04 	addi	sp,sp,40
    4200:	f800283a 	ret
    4204:	00bfffc4 	movi	r2,-1
    4208:	003ff906 	br	41f0 <__alt_data_end+0xfffaeac0>

0000420c <puts>:
    420c:	00800074 	movhi	r2,1
    4210:	10945904 	addi	r2,r2,20836
    4214:	200b883a 	mov	r5,r4
    4218:	11000017 	ldw	r4,0(r2)
    421c:	00041541 	jmpi	4154 <_puts_r>

00004220 <srand>:
    4220:	00800074 	movhi	r2,1
    4224:	10945904 	addi	r2,r2,20836
    4228:	10800017 	ldw	r2,0(r2)
    422c:	11002915 	stw	r4,164(r2)
    4230:	10002a15 	stw	zero,168(r2)
    4234:	f800283a 	ret

00004238 <rand>:
    4238:	00800074 	movhi	r2,1
    423c:	defffe04 	addi	sp,sp,-8
    4240:	10945904 	addi	r2,r2,20836
    4244:	dc000015 	stw	r16,0(sp)
    4248:	14000017 	ldw	r16,0(r2)
    424c:	dfc00115 	stw	ra,4(sp)
    4250:	01932574 	movhi	r6,19605
    4254:	81002917 	ldw	r4,164(r16)
    4258:	81402a17 	ldw	r5,168(r16)
    425c:	01d614b4 	movhi	r7,22610
    4260:	319fcb44 	addi	r6,r6,32557
    4264:	39fd0b44 	addi	r7,r7,-3027
    4268:	000cd780 	call	cd78 <__muldi3>
    426c:	11000044 	addi	r4,r2,1
    4270:	2085803a 	cmpltu	r2,r4,r2
    4274:	10c7883a 	add	r3,r2,r3
    4278:	00a00034 	movhi	r2,32768
    427c:	10bfffc4 	addi	r2,r2,-1
    4280:	1884703a 	and	r2,r3,r2
    4284:	81002915 	stw	r4,164(r16)
    4288:	80c02a15 	stw	r3,168(r16)
    428c:	dfc00117 	ldw	ra,4(sp)
    4290:	dc000017 	ldw	r16,0(sp)
    4294:	dec00204 	addi	sp,sp,8
    4298:	f800283a 	ret

0000429c <_sbrk_r>:
    429c:	defffd04 	addi	sp,sp,-12
    42a0:	dc000015 	stw	r16,0(sp)
    42a4:	04000074 	movhi	r16,1
    42a8:	dc400115 	stw	r17,4(sp)
    42ac:	841b4704 	addi	r16,r16,27932
    42b0:	2023883a 	mov	r17,r4
    42b4:	2809883a 	mov	r4,r5
    42b8:	dfc00215 	stw	ra,8(sp)
    42bc:	80000015 	stw	zero,0(r16)
    42c0:	0010af80 	call	10af8 <sbrk>
    42c4:	00ffffc4 	movi	r3,-1
    42c8:	10c00526 	beq	r2,r3,42e0 <_sbrk_r+0x44>
    42cc:	dfc00217 	ldw	ra,8(sp)
    42d0:	dc400117 	ldw	r17,4(sp)
    42d4:	dc000017 	ldw	r16,0(sp)
    42d8:	dec00304 	addi	sp,sp,12
    42dc:	f800283a 	ret
    42e0:	80c00017 	ldw	r3,0(r16)
    42e4:	183ff926 	beq	r3,zero,42cc <__alt_data_end+0xfffaeb9c>
    42e8:	88c00015 	stw	r3,0(r17)
    42ec:	003ff706 	br	42cc <__alt_data_end+0xfffaeb9c>

000042f0 <strlen>:
    42f0:	208000cc 	andi	r2,r4,3
    42f4:	10002026 	beq	r2,zero,4378 <strlen+0x88>
    42f8:	20800007 	ldb	r2,0(r4)
    42fc:	10002026 	beq	r2,zero,4380 <strlen+0x90>
    4300:	2005883a 	mov	r2,r4
    4304:	00000206 	br	4310 <strlen+0x20>
    4308:	10c00007 	ldb	r3,0(r2)
    430c:	18001826 	beq	r3,zero,4370 <strlen+0x80>
    4310:	10800044 	addi	r2,r2,1
    4314:	10c000cc 	andi	r3,r2,3
    4318:	183ffb1e 	bne	r3,zero,4308 <__alt_data_end+0xfffaebd8>
    431c:	10c00017 	ldw	r3,0(r2)
    4320:	01ffbff4 	movhi	r7,65279
    4324:	39ffbfc4 	addi	r7,r7,-257
    4328:	00ca303a 	nor	r5,zero,r3
    432c:	01a02074 	movhi	r6,32897
    4330:	19c7883a 	add	r3,r3,r7
    4334:	31a02004 	addi	r6,r6,-32640
    4338:	1946703a 	and	r3,r3,r5
    433c:	1986703a 	and	r3,r3,r6
    4340:	1800091e 	bne	r3,zero,4368 <strlen+0x78>
    4344:	10800104 	addi	r2,r2,4
    4348:	10c00017 	ldw	r3,0(r2)
    434c:	19cb883a 	add	r5,r3,r7
    4350:	00c6303a 	nor	r3,zero,r3
    4354:	28c6703a 	and	r3,r5,r3
    4358:	1986703a 	and	r3,r3,r6
    435c:	183ff926 	beq	r3,zero,4344 <__alt_data_end+0xfffaec14>
    4360:	00000106 	br	4368 <strlen+0x78>
    4364:	10800044 	addi	r2,r2,1
    4368:	10c00007 	ldb	r3,0(r2)
    436c:	183ffd1e 	bne	r3,zero,4364 <__alt_data_end+0xfffaec34>
    4370:	1105c83a 	sub	r2,r2,r4
    4374:	f800283a 	ret
    4378:	2005883a 	mov	r2,r4
    437c:	003fe706 	br	431c <__alt_data_end+0xfffaebec>
    4380:	0005883a 	mov	r2,zero
    4384:	f800283a 	ret

00004388 <___vfprintf_internal_r>:
    4388:	defeb604 	addi	sp,sp,-1320
    438c:	dfc14915 	stw	ra,1316(sp)
    4390:	ddc14715 	stw	r23,1308(sp)
    4394:	dd814615 	stw	r22,1304(sp)
    4398:	202f883a 	mov	r23,r4
    439c:	282d883a 	mov	r22,r5
    43a0:	d9812a15 	stw	r6,1192(sp)
    43a4:	d9c12d15 	stw	r7,1204(sp)
    43a8:	df014815 	stw	fp,1312(sp)
    43ac:	dd414515 	stw	r21,1300(sp)
    43b0:	dd014415 	stw	r20,1296(sp)
    43b4:	dcc14315 	stw	r19,1292(sp)
    43b8:	dc814215 	stw	r18,1288(sp)
    43bc:	dc414115 	stw	r17,1284(sp)
    43c0:	dc014015 	stw	r16,1280(sp)
    43c4:	00090080 	call	9008 <_localeconv_r>
    43c8:	10800017 	ldw	r2,0(r2)
    43cc:	1009883a 	mov	r4,r2
    43d0:	d8813515 	stw	r2,1236(sp)
    43d4:	00042f00 	call	42f0 <strlen>
    43d8:	d8813815 	stw	r2,1248(sp)
    43dc:	b8000226 	beq	r23,zero,43e8 <___vfprintf_internal_r+0x60>
    43e0:	b8800e17 	ldw	r2,56(r23)
    43e4:	10010526 	beq	r2,zero,47fc <___vfprintf_internal_r+0x474>
    43e8:	b0c0030b 	ldhu	r3,12(r22)
    43ec:	1908000c 	andi	r4,r3,8192
    43f0:	1805883a 	mov	r2,r3
    43f4:	2000071e 	bne	r4,zero,4414 <___vfprintf_internal_r+0x8c>
    43f8:	b1001917 	ldw	r4,100(r22)
    43fc:	18880014 	ori	r2,r3,8192
    4400:	00f7ffc4 	movi	r3,-8193
    4404:	20c8703a 	and	r4,r4,r3
    4408:	b080030d 	sth	r2,12(r22)
    440c:	1007883a 	mov	r3,r2
    4410:	b1001915 	stw	r4,100(r22)
    4414:	1100020c 	andi	r4,r2,8
    4418:	2000a826 	beq	r4,zero,46bc <___vfprintf_internal_r+0x334>
    441c:	b1000417 	ldw	r4,16(r22)
    4420:	2000a626 	beq	r4,zero,46bc <___vfprintf_internal_r+0x334>
    4424:	1080068c 	andi	r2,r2,26
    4428:	01000284 	movi	r4,10
    442c:	1100ac26 	beq	r2,r4,46e0 <___vfprintf_internal_r+0x358>
    4430:	d8c10e04 	addi	r3,sp,1080
    4434:	d9010dc4 	addi	r4,sp,1079
    4438:	d9400404 	addi	r5,sp,16
    443c:	05000074 	movhi	r20,1
    4440:	1905c83a 	sub	r2,r3,r4
    4444:	a50ce084 	addi	r20,r20,13186
    4448:	d8c12815 	stw	r3,1184(sp)
    444c:	d9012915 	stw	r4,1188(sp)
    4450:	d9411e15 	stw	r5,1144(sp)
    4454:	d8012015 	stw	zero,1152(sp)
    4458:	d8011f15 	stw	zero,1148(sp)
    445c:	d8013315 	stw	zero,1228(sp)
    4460:	d8013715 	stw	zero,1244(sp)
    4464:	d8013915 	stw	zero,1252(sp)
    4468:	d8013b15 	stw	zero,1260(sp)
    446c:	d8013a15 	stw	zero,1256(sp)
    4470:	d8012f15 	stw	zero,1212(sp)
    4474:	2811883a 	mov	r8,r5
    4478:	d8813c15 	stw	r2,1264(sp)
    447c:	d8c12a17 	ldw	r3,1192(sp)
    4480:	18800007 	ldb	r2,0(r3)
    4484:	10021326 	beq	r2,zero,4cd4 <___vfprintf_internal_r+0x94c>
    4488:	00c00944 	movi	r3,37
    448c:	dc012a17 	ldw	r16,1192(sp)
    4490:	10c0021e 	bne	r2,r3,449c <___vfprintf_internal_r+0x114>
    4494:	00001606 	br	44f0 <___vfprintf_internal_r+0x168>
    4498:	10c08526 	beq	r2,r3,46b0 <___vfprintf_internal_r+0x328>
    449c:	84000044 	addi	r16,r16,1
    44a0:	80800007 	ldb	r2,0(r16)
    44a4:	103ffc1e 	bne	r2,zero,4498 <__alt_data_end+0xfffaed68>
    44a8:	d9012a17 	ldw	r4,1192(sp)
    44ac:	8123c83a 	sub	r17,r16,r4
    44b0:	88000f26 	beq	r17,zero,44f0 <___vfprintf_internal_r+0x168>
    44b4:	d8812a17 	ldw	r2,1192(sp)
    44b8:	d8c12017 	ldw	r3,1152(sp)
    44bc:	44400115 	stw	r17,4(r8)
    44c0:	40800015 	stw	r2,0(r8)
    44c4:	d8811f17 	ldw	r2,1148(sp)
    44c8:	1c47883a 	add	r3,r3,r17
    44cc:	d8c12015 	stw	r3,1152(sp)
    44d0:	10800044 	addi	r2,r2,1
    44d4:	d8811f15 	stw	r2,1148(sp)
    44d8:	00c001c4 	movi	r3,7
    44dc:	1880b516 	blt	r3,r2,47b4 <___vfprintf_internal_r+0x42c>
    44e0:	42000204 	addi	r8,r8,8
    44e4:	d8c12f17 	ldw	r3,1212(sp)
    44e8:	1c47883a 	add	r3,r3,r17
    44ec:	d8c12f15 	stw	r3,1212(sp)
    44f0:	80800007 	ldb	r2,0(r16)
    44f4:	1000b626 	beq	r2,zero,47d0 <___vfprintf_internal_r+0x448>
    44f8:	80800044 	addi	r2,r16,1
    44fc:	84000047 	ldb	r16,1(r16)
    4500:	0027883a 	mov	r19,zero
    4504:	0039883a 	mov	fp,zero
    4508:	dcc12b05 	stb	r19,1196(sp)
    450c:	d8012785 	stb	zero,1182(sp)
    4510:	027fffc4 	movi	r9,-1
    4514:	d8012e15 	stw	zero,1208(sp)
    4518:	04401604 	movi	r17,88
    451c:	04800244 	movi	r18,9
    4520:	da012a15 	stw	r8,1192(sp)
    4524:	e027883a 	mov	r19,fp
    4528:	17000044 	addi	fp,r2,1
    452c:	80bff804 	addi	r2,r16,-32
    4530:	88831236 	bltu	r17,r2,517c <___vfprintf_internal_r+0xdf4>
    4534:	100490ba 	slli	r2,r2,2
    4538:	01000034 	movhi	r4,0
    453c:	21115304 	addi	r4,r4,17740
    4540:	1105883a 	add	r2,r2,r4
    4544:	10800017 	ldw	r2,0(r2)
    4548:	1000683a 	jmp	r2
    454c:	00005098 	cmpnei	zero,zero,322
    4550:	0000517c 	xorhi	zero,zero,325
    4554:	0000517c 	xorhi	zero,zero,325
    4558:	000050b4 	movhi	zero,322
    455c:	0000517c 	xorhi	zero,zero,325
    4560:	0000517c 	xorhi	zero,zero,325
    4564:	0000517c 	xorhi	zero,zero,325
    4568:	0000517c 	xorhi	zero,zero,325
    456c:	0000517c 	xorhi	zero,zero,325
    4570:	0000517c 	xorhi	zero,zero,325
    4574:	000050c4 	movi	zero,323
    4578:	000050ec 	andhi	zero,zero,323
    457c:	0000517c 	xorhi	zero,zero,325
    4580:	00004808 	cmpgei	zero,zero,288
    4584:	00004818 	cmpnei	zero,zero,288
    4588:	0000517c 	xorhi	zero,zero,325
    458c:	00004868 	cmpgeui	zero,zero,289
    4590:	00004878 	rdprs	zero,zero,289
    4594:	00004878 	rdprs	zero,zero,289
    4598:	00004878 	rdprs	zero,zero,289
    459c:	00004878 	rdprs	zero,zero,289
    45a0:	00004878 	rdprs	zero,zero,289
    45a4:	00004878 	rdprs	zero,zero,289
    45a8:	00004878 	rdprs	zero,zero,289
    45ac:	00004878 	rdprs	zero,zero,289
    45b0:	00004878 	rdprs	zero,zero,289
    45b4:	0000517c 	xorhi	zero,zero,325
    45b8:	0000517c 	xorhi	zero,zero,325
    45bc:	0000517c 	xorhi	zero,zero,325
    45c0:	0000517c 	xorhi	zero,zero,325
    45c4:	0000517c 	xorhi	zero,zero,325
    45c8:	0000517c 	xorhi	zero,zero,325
    45cc:	0000517c 	xorhi	zero,zero,325
    45d0:	0000517c 	xorhi	zero,zero,325
    45d4:	0000517c 	xorhi	zero,zero,325
    45d8:	0000517c 	xorhi	zero,zero,325
    45dc:	000048bc 	xorhi	zero,zero,290
    45e0:	00004cdc 	xori	zero,zero,307
    45e4:	0000517c 	xorhi	zero,zero,325
    45e8:	00004cdc 	xori	zero,zero,307
    45ec:	0000517c 	xorhi	zero,zero,325
    45f0:	0000517c 	xorhi	zero,zero,325
    45f4:	0000517c 	xorhi	zero,zero,325
    45f8:	0000517c 	xorhi	zero,zero,325
    45fc:	00004d84 	movi	zero,310
    4600:	0000517c 	xorhi	zero,zero,325
    4604:	0000517c 	xorhi	zero,zero,325
    4608:	00004d94 	movui	zero,310
    460c:	0000517c 	xorhi	zero,zero,325
    4610:	0000517c 	xorhi	zero,zero,325
    4614:	0000517c 	xorhi	zero,zero,325
    4618:	0000517c 	xorhi	zero,zero,325
    461c:	0000517c 	xorhi	zero,zero,325
    4620:	00004dd8 	cmpnei	zero,zero,311
    4624:	0000517c 	xorhi	zero,zero,325
    4628:	0000517c 	xorhi	zero,zero,325
    462c:	00004e10 	cmplti	zero,zero,312
    4630:	0000517c 	xorhi	zero,zero,325
    4634:	0000517c 	xorhi	zero,zero,325
    4638:	0000517c 	xorhi	zero,zero,325
    463c:	0000517c 	xorhi	zero,zero,325
    4640:	0000517c 	xorhi	zero,zero,325
    4644:	0000517c 	xorhi	zero,zero,325
    4648:	0000517c 	xorhi	zero,zero,325
    464c:	0000517c 	xorhi	zero,zero,325
    4650:	0000517c 	xorhi	zero,zero,325
    4654:	0000517c 	xorhi	zero,zero,325
    4658:	0000504c 	andi	zero,zero,321
    465c:	00004ff8 	rdprs	zero,zero,319
    4660:	00004cdc 	xori	zero,zero,307
    4664:	00004cdc 	xori	zero,zero,307
    4668:	00004cdc 	xori	zero,zero,307
    466c:	0000503c 	xorhi	zero,zero,320
    4670:	00004ff8 	rdprs	zero,zero,319
    4674:	0000517c 	xorhi	zero,zero,325
    4678:	0000517c 	xorhi	zero,zero,325
    467c:	00004f14 	movui	zero,316
    4680:	0000517c 	xorhi	zero,zero,325
    4684:	00004f2c 	andhi	zero,zero,316
    4688:	00004f6c 	andhi	zero,zero,317
    468c:	00004fac 	andhi	zero,zero,318
    4690:	00004e78 	rdprs	zero,zero,313
    4694:	0000517c 	xorhi	zero,zero,325
    4698:	00005100 	call	510 <get_keycode+0x17c>
    469c:	0000517c 	xorhi	zero,zero,325
    46a0:	00004e88 	cmpgei	zero,zero,314
    46a4:	0000517c 	xorhi	zero,zero,325
    46a8:	0000517c 	xorhi	zero,zero,325
    46ac:	00004ec8 	cmpgei	zero,zero,315
    46b0:	d9412a17 	ldw	r5,1192(sp)
    46b4:	8163c83a 	sub	r17,r16,r5
    46b8:	003f7d06 	br	44b0 <__alt_data_end+0xfffaed80>
    46bc:	b809883a 	mov	r4,r23
    46c0:	b00b883a 	mov	r5,r22
    46c4:	00064a80 	call	64a8 <__swsetup_r>
    46c8:	10002d1e 	bne	r2,zero,4780 <___vfprintf_internal_r+0x3f8>
    46cc:	b0c0030b 	ldhu	r3,12(r22)
    46d0:	01000284 	movi	r4,10
    46d4:	1805883a 	mov	r2,r3
    46d8:	1080068c 	andi	r2,r2,26
    46dc:	113f541e 	bne	r2,r4,4430 <__alt_data_end+0xfffaed00>
    46e0:	b080038b 	ldhu	r2,14(r22)
    46e4:	113fffcc 	andi	r4,r2,65535
    46e8:	2120001c 	xori	r4,r4,32768
    46ec:	21200004 	addi	r4,r4,-32768
    46f0:	203f4f16 	blt	r4,zero,4430 <__alt_data_end+0xfffaed00>
    46f4:	b2c01917 	ldw	r11,100(r22)
    46f8:	b2800717 	ldw	r10,28(r22)
    46fc:	b2400917 	ldw	r9,36(r22)
    4700:	d9812a17 	ldw	r6,1192(sp)
    4704:	d9c12d17 	ldw	r7,1204(sp)
    4708:	02010004 	movi	r8,1024
    470c:	18ffff4c 	andi	r3,r3,65533
    4710:	d881078d 	sth	r2,1054(sp)
    4714:	b809883a 	mov	r4,r23
    4718:	d8800404 	addi	r2,sp,16
    471c:	d9410404 	addi	r5,sp,1040
    4720:	d8c1070d 	sth	r3,1052(sp)
    4724:	dac11d15 	stw	r11,1140(sp)
    4728:	da810b15 	stw	r10,1068(sp)
    472c:	da410d15 	stw	r9,1076(sp)
    4730:	d8810415 	stw	r2,1040(sp)
    4734:	d8810815 	stw	r2,1056(sp)
    4738:	da010615 	stw	r8,1048(sp)
    473c:	da010915 	stw	r8,1060(sp)
    4740:	d8010a15 	stw	zero,1064(sp)
    4744:	00043880 	call	4388 <___vfprintf_internal_r>
    4748:	1021883a 	mov	r16,r2
    474c:	10000416 	blt	r2,zero,4760 <___vfprintf_internal_r+0x3d8>
    4750:	b809883a 	mov	r4,r23
    4754:	d9410404 	addi	r5,sp,1040
    4758:	0007f280 	call	7f28 <_fflush_r>
    475c:	1007301e 	bne	r2,zero,6420 <___vfprintf_internal_r+0x2098>
    4760:	d881070b 	ldhu	r2,1052(sp)
    4764:	1080100c 	andi	r2,r2,64
    4768:	10000326 	beq	r2,zero,4778 <___vfprintf_internal_r+0x3f0>
    476c:	b080030b 	ldhu	r2,12(r22)
    4770:	10801014 	ori	r2,r2,64
    4774:	b080030d 	sth	r2,12(r22)
    4778:	8005883a 	mov	r2,r16
    477c:	00000106 	br	4784 <___vfprintf_internal_r+0x3fc>
    4780:	00bfffc4 	movi	r2,-1
    4784:	dfc14917 	ldw	ra,1316(sp)
    4788:	df014817 	ldw	fp,1312(sp)
    478c:	ddc14717 	ldw	r23,1308(sp)
    4790:	dd814617 	ldw	r22,1304(sp)
    4794:	dd414517 	ldw	r21,1300(sp)
    4798:	dd014417 	ldw	r20,1296(sp)
    479c:	dcc14317 	ldw	r19,1292(sp)
    47a0:	dc814217 	ldw	r18,1288(sp)
    47a4:	dc414117 	ldw	r17,1284(sp)
    47a8:	dc014017 	ldw	r16,1280(sp)
    47ac:	dec14a04 	addi	sp,sp,1320
    47b0:	f800283a 	ret
    47b4:	b809883a 	mov	r4,r23
    47b8:	b00b883a 	mov	r5,r22
    47bc:	d9811e04 	addi	r6,sp,1144
    47c0:	000afcc0 	call	afcc <__sprint_r>
    47c4:	1000081e 	bne	r2,zero,47e8 <___vfprintf_internal_r+0x460>
    47c8:	da000404 	addi	r8,sp,16
    47cc:	003f4506 	br	44e4 <__alt_data_end+0xfffaedb4>
    47d0:	d8812017 	ldw	r2,1152(sp)
    47d4:	10000426 	beq	r2,zero,47e8 <___vfprintf_internal_r+0x460>
    47d8:	b809883a 	mov	r4,r23
    47dc:	b00b883a 	mov	r5,r22
    47e0:	d9811e04 	addi	r6,sp,1144
    47e4:	000afcc0 	call	afcc <__sprint_r>
    47e8:	b080030b 	ldhu	r2,12(r22)
    47ec:	1080100c 	andi	r2,r2,64
    47f0:	103fe31e 	bne	r2,zero,4780 <__alt_data_end+0xfffaf050>
    47f4:	d8812f17 	ldw	r2,1212(sp)
    47f8:	003fe206 	br	4784 <__alt_data_end+0xfffaf054>
    47fc:	b809883a 	mov	r4,r23
    4800:	00084e40 	call	84e4 <__sinit>
    4804:	003ef806 	br	43e8 <__alt_data_end+0xfffaecb8>
    4808:	e005883a 	mov	r2,fp
    480c:	9cc00114 	ori	r19,r19,4
    4810:	e4000007 	ldb	r16,0(fp)
    4814:	003f4406 	br	4528 <__alt_data_end+0xfffaedf8>
    4818:	e4000007 	ldb	r16,0(fp)
    481c:	01000a84 	movi	r4,42
    4820:	e0800044 	addi	r2,fp,1
    4824:	8106f626 	beq	r16,r4,6400 <___vfprintf_internal_r+0x2078>
    4828:	857ff404 	addi	r21,r16,-48
    482c:	1039883a 	mov	fp,r2
    4830:	0013883a 	mov	r9,zero
    4834:	957f3d36 	bltu	r18,r21,452c <__alt_data_end+0xfffaedfc>
    4838:	0009883a 	mov	r4,zero
    483c:	01400284 	movi	r5,10
    4840:	000dae00 	call	dae0 <__mulsi3>
    4844:	e4000007 	ldb	r16,0(fp)
    4848:	a889883a 	add	r4,r21,r2
    484c:	e7000044 	addi	fp,fp,1
    4850:	857ff404 	addi	r21,r16,-48
    4854:	957ff92e 	bgeu	r18,r21,483c <__alt_data_end+0xfffaf10c>
    4858:	2013883a 	mov	r9,r4
    485c:	203f330e 	bge	r4,zero,452c <__alt_data_end+0xfffaedfc>
    4860:	027fffc4 	movi	r9,-1
    4864:	003f3106 	br	452c <__alt_data_end+0xfffaedfc>
    4868:	9cc02014 	ori	r19,r19,128
    486c:	e005883a 	mov	r2,fp
    4870:	e4000007 	ldb	r16,0(fp)
    4874:	003f2c06 	br	4528 <__alt_data_end+0xfffaedf8>
    4878:	857ff404 	addi	r21,r16,-48
    487c:	d8012e15 	stw	zero,1208(sp)
    4880:	e021883a 	mov	r16,fp
    4884:	0009883a 	mov	r4,zero
    4888:	da412c15 	stw	r9,1200(sp)
    488c:	01400284 	movi	r5,10
    4890:	000dae00 	call	dae0 <__mulsi3>
    4894:	81400007 	ldb	r5,0(r16)
    4898:	1549883a 	add	r4,r2,r21
    489c:	e7000044 	addi	fp,fp,1
    48a0:	2d7ff404 	addi	r21,r5,-48
    48a4:	e021883a 	mov	r16,fp
    48a8:	957ff82e 	bgeu	r18,r21,488c <__alt_data_end+0xfffaf15c>
    48ac:	2821883a 	mov	r16,r5
    48b0:	d9012e15 	stw	r4,1208(sp)
    48b4:	da412c17 	ldw	r9,1200(sp)
    48b8:	003f1c06 	br	452c <__alt_data_end+0xfffaedfc>
    48bc:	da012a17 	ldw	r8,1192(sp)
    48c0:	df012a15 	stw	fp,1192(sp)
    48c4:	9839883a 	mov	fp,r19
    48c8:	dcc12b03 	ldbu	r19,1196(sp)
    48cc:	e7000414 	ori	fp,fp,16
    48d0:	e080080c 	andi	r2,fp,32
    48d4:	dcc12785 	stb	r19,1182(sp)
    48d8:	d8c12d17 	ldw	r3,1204(sp)
    48dc:	1001ce26 	beq	r2,zero,5018 <___vfprintf_internal_r+0xc90>
    48e0:	d9012d17 	ldw	r4,1204(sp)
    48e4:	18800117 	ldw	r2,4(r3)
    48e8:	1c800017 	ldw	r18,0(r3)
    48ec:	21000204 	addi	r4,r4,8
    48f0:	d9012d15 	stw	r4,1204(sp)
    48f4:	102b883a 	mov	r21,r2
    48f8:	10044916 	blt	r2,zero,5a20 <___vfprintf_internal_r+0x1698>
    48fc:	dcc12783 	ldbu	r19,1182(sp)
    4900:	da413215 	stw	r9,1224(sp)
    4904:	00800044 	movi	r2,1
    4908:	9546b03a 	or	r3,r18,r21
    490c:	48000216 	blt	r9,zero,4918 <___vfprintf_internal_r+0x590>
    4910:	013fdfc4 	movi	r4,-129
    4914:	e138703a 	and	fp,fp,r4
    4918:	1802251e 	bne	r3,zero,51b0 <___vfprintf_internal_r+0xe28>
    491c:	48031726 	beq	r9,zero,557c <___vfprintf_internal_r+0x11f4>
    4920:	10803fcc 	andi	r2,r2,255
    4924:	00c00044 	movi	r3,1
    4928:	10c24526 	beq	r2,r3,5240 <___vfprintf_internal_r+0xeb8>
    492c:	00c00084 	movi	r3,2
    4930:	10c33426 	beq	r2,r3,5604 <___vfprintf_internal_r+0x127c>
    4934:	d8c10e04 	addi	r3,sp,1080
    4938:	9008d0fa 	srli	r4,r18,3
    493c:	a80a977a 	slli	r5,r21,29
    4940:	a82ad0fa 	srli	r21,r21,3
    4944:	948001cc 	andi	r18,r18,7
    4948:	90800c04 	addi	r2,r18,48
    494c:	18ffffc4 	addi	r3,r3,-1
    4950:	2924b03a 	or	r18,r5,r4
    4954:	18800005 	stb	r2,0(r3)
    4958:	9548b03a 	or	r4,r18,r21
    495c:	203ff61e 	bne	r4,zero,4938 <__alt_data_end+0xfffaf208>
    4960:	e100004c 	andi	r4,fp,1
    4964:	d8c13115 	stw	r3,1220(sp)
    4968:	20039a1e 	bne	r4,zero,57d4 <___vfprintf_internal_r+0x144c>
    496c:	d8812817 	ldw	r2,1184(sp)
    4970:	10e3c83a 	sub	r17,r2,r3
    4974:	8805883a 	mov	r2,r17
    4978:	8a40010e 	bge	r17,r9,4980 <___vfprintf_internal_r+0x5f8>
    497c:	4805883a 	mov	r2,r9
    4980:	d8812b15 	stw	r2,1196(sp)
    4984:	d8013415 	stw	zero,1232(sp)
    4988:	98803fcc 	andi	r2,r19,255
    498c:	1080201c 	xori	r2,r2,128
    4990:	10bfe004 	addi	r2,r2,-128
    4994:	10000326 	beq	r2,zero,49a4 <___vfprintf_internal_r+0x61c>
    4998:	d8c12b17 	ldw	r3,1196(sp)
    499c:	18c00044 	addi	r3,r3,1
    49a0:	d8c12b15 	stw	r3,1196(sp)
    49a4:	e0c0008c 	andi	r3,fp,2
    49a8:	d8c12c15 	stw	r3,1200(sp)
    49ac:	18000326 	beq	r3,zero,49bc <___vfprintf_internal_r+0x634>
    49b0:	d8c12b17 	ldw	r3,1196(sp)
    49b4:	18c00084 	addi	r3,r3,2
    49b8:	d8c12b15 	stw	r3,1196(sp)
    49bc:	e0c0210c 	andi	r3,fp,132
    49c0:	d8c13015 	stw	r3,1216(sp)
    49c4:	1801f81e 	bne	r3,zero,51a8 <___vfprintf_internal_r+0xe20>
    49c8:	d9012e17 	ldw	r4,1208(sp)
    49cc:	d8c12b17 	ldw	r3,1196(sp)
    49d0:	20ebc83a 	sub	r21,r4,r3
    49d4:	0541f40e 	bge	zero,r21,51a8 <___vfprintf_internal_r+0xe20>
    49d8:	02400404 	movi	r9,16
    49dc:	d8c12017 	ldw	r3,1152(sp)
    49e0:	d8811f17 	ldw	r2,1148(sp)
    49e4:	4d45750e 	bge	r9,r21,5fbc <___vfprintf_internal_r+0x1c34>
    49e8:	01400074 	movhi	r5,1
    49ec:	294ce484 	addi	r5,r5,13202
    49f0:	d9413615 	stw	r5,1240(sp)
    49f4:	4827883a 	mov	r19,r9
    49f8:	048001c4 	movi	r18,7
    49fc:	00000306 	br	4a0c <___vfprintf_internal_r+0x684>
    4a00:	ad7ffc04 	addi	r21,r21,-16
    4a04:	42000204 	addi	r8,r8,8
    4a08:	9d40130e 	bge	r19,r21,4a58 <___vfprintf_internal_r+0x6d0>
    4a0c:	01000074 	movhi	r4,1
    4a10:	18c00404 	addi	r3,r3,16
    4a14:	10800044 	addi	r2,r2,1
    4a18:	210ce484 	addi	r4,r4,13202
    4a1c:	41000015 	stw	r4,0(r8)
    4a20:	44c00115 	stw	r19,4(r8)
    4a24:	d8c12015 	stw	r3,1152(sp)
    4a28:	d8811f15 	stw	r2,1148(sp)
    4a2c:	90bff40e 	bge	r18,r2,4a00 <__alt_data_end+0xfffaf2d0>
    4a30:	b809883a 	mov	r4,r23
    4a34:	b00b883a 	mov	r5,r22
    4a38:	d9811e04 	addi	r6,sp,1144
    4a3c:	000afcc0 	call	afcc <__sprint_r>
    4a40:	103f691e 	bne	r2,zero,47e8 <__alt_data_end+0xfffaf0b8>
    4a44:	ad7ffc04 	addi	r21,r21,-16
    4a48:	d8c12017 	ldw	r3,1152(sp)
    4a4c:	d8811f17 	ldw	r2,1148(sp)
    4a50:	da000404 	addi	r8,sp,16
    4a54:	9d7fed16 	blt	r19,r21,4a0c <__alt_data_end+0xfffaf2dc>
    4a58:	d9413617 	ldw	r5,1240(sp)
    4a5c:	a8c7883a 	add	r3,r21,r3
    4a60:	10800044 	addi	r2,r2,1
    4a64:	41400015 	stw	r5,0(r8)
    4a68:	45400115 	stw	r21,4(r8)
    4a6c:	d8c12015 	stw	r3,1152(sp)
    4a70:	d8811f15 	stw	r2,1148(sp)
    4a74:	010001c4 	movi	r4,7
    4a78:	20832b16 	blt	r4,r2,5728 <___vfprintf_internal_r+0x13a0>
    4a7c:	d8812787 	ldb	r2,1182(sp)
    4a80:	42000204 	addi	r8,r8,8
    4a84:	10000c26 	beq	r2,zero,4ab8 <___vfprintf_internal_r+0x730>
    4a88:	d8811f17 	ldw	r2,1148(sp)
    4a8c:	d9012784 	addi	r4,sp,1182
    4a90:	18c00044 	addi	r3,r3,1
    4a94:	10800044 	addi	r2,r2,1
    4a98:	41000015 	stw	r4,0(r8)
    4a9c:	01000044 	movi	r4,1
    4aa0:	41000115 	stw	r4,4(r8)
    4aa4:	d8c12015 	stw	r3,1152(sp)
    4aa8:	d8811f15 	stw	r2,1148(sp)
    4aac:	010001c4 	movi	r4,7
    4ab0:	2082c416 	blt	r4,r2,55c4 <___vfprintf_internal_r+0x123c>
    4ab4:	42000204 	addi	r8,r8,8
    4ab8:	d8812c17 	ldw	r2,1200(sp)
    4abc:	10000c26 	beq	r2,zero,4af0 <___vfprintf_internal_r+0x768>
    4ac0:	d8811f17 	ldw	r2,1148(sp)
    4ac4:	d9012704 	addi	r4,sp,1180
    4ac8:	18c00084 	addi	r3,r3,2
    4acc:	10800044 	addi	r2,r2,1
    4ad0:	41000015 	stw	r4,0(r8)
    4ad4:	01000084 	movi	r4,2
    4ad8:	41000115 	stw	r4,4(r8)
    4adc:	d8c12015 	stw	r3,1152(sp)
    4ae0:	d8811f15 	stw	r2,1148(sp)
    4ae4:	010001c4 	movi	r4,7
    4ae8:	2082be16 	blt	r4,r2,55e4 <___vfprintf_internal_r+0x125c>
    4aec:	42000204 	addi	r8,r8,8
    4af0:	d9013017 	ldw	r4,1216(sp)
    4af4:	00802004 	movi	r2,128
    4af8:	20822026 	beq	r4,r2,537c <___vfprintf_internal_r+0xff4>
    4afc:	d9413217 	ldw	r5,1224(sp)
    4b00:	2c67c83a 	sub	r19,r5,r17
    4b04:	04c0260e 	bge	zero,r19,4ba0 <___vfprintf_internal_r+0x818>
    4b08:	05400404 	movi	r21,16
    4b0c:	d8811f17 	ldw	r2,1148(sp)
    4b10:	acc4720e 	bge	r21,r19,5cdc <___vfprintf_internal_r+0x1954>
    4b14:	01400074 	movhi	r5,1
    4b18:	294ce084 	addi	r5,r5,13186
    4b1c:	d9412c15 	stw	r5,1200(sp)
    4b20:	048001c4 	movi	r18,7
    4b24:	00000306 	br	4b34 <___vfprintf_internal_r+0x7ac>
    4b28:	9cfffc04 	addi	r19,r19,-16
    4b2c:	42000204 	addi	r8,r8,8
    4b30:	acc0110e 	bge	r21,r19,4b78 <___vfprintf_internal_r+0x7f0>
    4b34:	18c00404 	addi	r3,r3,16
    4b38:	10800044 	addi	r2,r2,1
    4b3c:	45000015 	stw	r20,0(r8)
    4b40:	45400115 	stw	r21,4(r8)
    4b44:	d8c12015 	stw	r3,1152(sp)
    4b48:	d8811f15 	stw	r2,1148(sp)
    4b4c:	90bff60e 	bge	r18,r2,4b28 <__alt_data_end+0xfffaf3f8>
    4b50:	b809883a 	mov	r4,r23
    4b54:	b00b883a 	mov	r5,r22
    4b58:	d9811e04 	addi	r6,sp,1144
    4b5c:	000afcc0 	call	afcc <__sprint_r>
    4b60:	103f211e 	bne	r2,zero,47e8 <__alt_data_end+0xfffaf0b8>
    4b64:	9cfffc04 	addi	r19,r19,-16
    4b68:	d8c12017 	ldw	r3,1152(sp)
    4b6c:	d8811f17 	ldw	r2,1148(sp)
    4b70:	da000404 	addi	r8,sp,16
    4b74:	acffef16 	blt	r21,r19,4b34 <__alt_data_end+0xfffaf404>
    4b78:	d9012c17 	ldw	r4,1200(sp)
    4b7c:	1cc7883a 	add	r3,r3,r19
    4b80:	10800044 	addi	r2,r2,1
    4b84:	41000015 	stw	r4,0(r8)
    4b88:	44c00115 	stw	r19,4(r8)
    4b8c:	d8c12015 	stw	r3,1152(sp)
    4b90:	d8811f15 	stw	r2,1148(sp)
    4b94:	010001c4 	movi	r4,7
    4b98:	20828216 	blt	r4,r2,55a4 <___vfprintf_internal_r+0x121c>
    4b9c:	42000204 	addi	r8,r8,8
    4ba0:	e080400c 	andi	r2,fp,256
    4ba4:	1001ac1e 	bne	r2,zero,5258 <___vfprintf_internal_r+0xed0>
    4ba8:	d8811f17 	ldw	r2,1148(sp)
    4bac:	d9413117 	ldw	r5,1220(sp)
    4bb0:	1c47883a 	add	r3,r3,r17
    4bb4:	10800044 	addi	r2,r2,1
    4bb8:	41400015 	stw	r5,0(r8)
    4bbc:	44400115 	stw	r17,4(r8)
    4bc0:	d8c12015 	stw	r3,1152(sp)
    4bc4:	d8811f15 	stw	r2,1148(sp)
    4bc8:	010001c4 	movi	r4,7
    4bcc:	20825d16 	blt	r4,r2,5544 <___vfprintf_internal_r+0x11bc>
    4bd0:	42000204 	addi	r8,r8,8
    4bd4:	e080010c 	andi	r2,fp,4
    4bd8:	10003126 	beq	r2,zero,4ca0 <___vfprintf_internal_r+0x918>
    4bdc:	d8812e17 	ldw	r2,1208(sp)
    4be0:	d9012b17 	ldw	r4,1196(sp)
    4be4:	1121c83a 	sub	r16,r2,r4
    4be8:	04002d0e 	bge	zero,r16,4ca0 <___vfprintf_internal_r+0x918>
    4bec:	04400404 	movi	r17,16
    4bf0:	d8811f17 	ldw	r2,1148(sp)
    4bf4:	8c05340e 	bge	r17,r16,60c8 <___vfprintf_internal_r+0x1d40>
    4bf8:	01000074 	movhi	r4,1
    4bfc:	210ce484 	addi	r4,r4,13202
    4c00:	d9013615 	stw	r4,1240(sp)
    4c04:	048001c4 	movi	r18,7
    4c08:	00000306 	br	4c18 <___vfprintf_internal_r+0x890>
    4c0c:	843ffc04 	addi	r16,r16,-16
    4c10:	42000204 	addi	r8,r8,8
    4c14:	8c00130e 	bge	r17,r16,4c64 <___vfprintf_internal_r+0x8dc>
    4c18:	01400074 	movhi	r5,1
    4c1c:	18c00404 	addi	r3,r3,16
    4c20:	10800044 	addi	r2,r2,1
    4c24:	294ce484 	addi	r5,r5,13202
    4c28:	41400015 	stw	r5,0(r8)
    4c2c:	44400115 	stw	r17,4(r8)
    4c30:	d8c12015 	stw	r3,1152(sp)
    4c34:	d8811f15 	stw	r2,1148(sp)
    4c38:	90bff40e 	bge	r18,r2,4c0c <__alt_data_end+0xfffaf4dc>
    4c3c:	b809883a 	mov	r4,r23
    4c40:	b00b883a 	mov	r5,r22
    4c44:	d9811e04 	addi	r6,sp,1144
    4c48:	000afcc0 	call	afcc <__sprint_r>
    4c4c:	103ee61e 	bne	r2,zero,47e8 <__alt_data_end+0xfffaf0b8>
    4c50:	843ffc04 	addi	r16,r16,-16
    4c54:	d8c12017 	ldw	r3,1152(sp)
    4c58:	d8811f17 	ldw	r2,1148(sp)
    4c5c:	da000404 	addi	r8,sp,16
    4c60:	8c3fed16 	blt	r17,r16,4c18 <__alt_data_end+0xfffaf4e8>
    4c64:	d9013617 	ldw	r4,1240(sp)
    4c68:	1c07883a 	add	r3,r3,r16
    4c6c:	10800044 	addi	r2,r2,1
    4c70:	41000015 	stw	r4,0(r8)
    4c74:	44000115 	stw	r16,4(r8)
    4c78:	d8c12015 	stw	r3,1152(sp)
    4c7c:	d8811f15 	stw	r2,1148(sp)
    4c80:	010001c4 	movi	r4,7
    4c84:	2080060e 	bge	r4,r2,4ca0 <___vfprintf_internal_r+0x918>
    4c88:	b809883a 	mov	r4,r23
    4c8c:	b00b883a 	mov	r5,r22
    4c90:	d9811e04 	addi	r6,sp,1144
    4c94:	000afcc0 	call	afcc <__sprint_r>
    4c98:	103ed31e 	bne	r2,zero,47e8 <__alt_data_end+0xfffaf0b8>
    4c9c:	d8c12017 	ldw	r3,1152(sp)
    4ca0:	df012b17 	ldw	fp,1196(sp)
    4ca4:	d9412e17 	ldw	r5,1208(sp)
    4ca8:	e140010e 	bge	fp,r5,4cb0 <___vfprintf_internal_r+0x928>
    4cac:	2839883a 	mov	fp,r5
    4cb0:	d8812f17 	ldw	r2,1212(sp)
    4cb4:	1705883a 	add	r2,r2,fp
    4cb8:	d8812f15 	stw	r2,1212(sp)
    4cbc:	1802291e 	bne	r3,zero,5564 <___vfprintf_internal_r+0x11dc>
    4cc0:	d8c12a17 	ldw	r3,1192(sp)
    4cc4:	d8011f15 	stw	zero,1148(sp)
    4cc8:	da000404 	addi	r8,sp,16
    4ccc:	18800007 	ldb	r2,0(r3)
    4cd0:	103ded1e 	bne	r2,zero,4488 <__alt_data_end+0xfffaed58>
    4cd4:	dc012a17 	ldw	r16,1192(sp)
    4cd8:	003e0506 	br	44f0 <__alt_data_end+0xfffaedc0>
    4cdc:	d9012d17 	ldw	r4,1204(sp)
    4ce0:	d9412d17 	ldw	r5,1204(sp)
    4ce4:	da012a17 	ldw	r8,1192(sp)
    4ce8:	21000017 	ldw	r4,0(r4)
    4cec:	29400117 	ldw	r5,4(r5)
    4cf0:	df012a15 	stw	fp,1192(sp)
    4cf4:	9839883a 	mov	fp,r19
    4cf8:	dcc12b03 	ldbu	r19,1196(sp)
    4cfc:	d9013715 	stw	r4,1244(sp)
    4d00:	d9413915 	stw	r5,1252(sp)
    4d04:	da013f15 	stw	r8,1276(sp)
    4d08:	da413e15 	stw	r9,1272(sp)
    4d0c:	dcc12785 	stb	r19,1182(sp)
    4d10:	000ac7c0 	call	ac7c <__fpclassifyd>
    4d14:	d8c12d17 	ldw	r3,1204(sp)
    4d18:	04400044 	movi	r17,1
    4d1c:	da013f17 	ldw	r8,1276(sp)
    4d20:	1c800204 	addi	r18,r3,8
    4d24:	da413e17 	ldw	r9,1272(sp)
    4d28:	d9013717 	ldw	r4,1244(sp)
    4d2c:	d9413917 	ldw	r5,1252(sp)
    4d30:	1443451e 	bne	r2,r17,5a48 <___vfprintf_internal_r+0x16c0>
    4d34:	000d883a 	mov	r6,zero
    4d38:	000f883a 	mov	r7,zero
    4d3c:	000ee880 	call	ee88 <__ledf2>
    4d40:	da013f17 	ldw	r8,1276(sp)
    4d44:	1004fe16 	blt	r2,zero,6140 <___vfprintf_internal_r+0x1db8>
    4d48:	dcc12783 	ldbu	r19,1182(sp)
    4d4c:	008011c4 	movi	r2,71
    4d50:	14045d0e 	bge	r2,r16,5ec8 <___vfprintf_internal_r+0x1b40>
    4d54:	01400074 	movhi	r5,1
    4d58:	294cd104 	addi	r5,r5,13124
    4d5c:	d9413115 	stw	r5,1220(sp)
    4d60:	00c000c4 	movi	r3,3
    4d64:	00bfdfc4 	movi	r2,-129
    4d68:	d8c12b15 	stw	r3,1196(sp)
    4d6c:	e0b8703a 	and	fp,fp,r2
    4d70:	dc812d15 	stw	r18,1204(sp)
    4d74:	1823883a 	mov	r17,r3
    4d78:	d8013215 	stw	zero,1224(sp)
    4d7c:	d8013415 	stw	zero,1232(sp)
    4d80:	003f0106 	br	4988 <__alt_data_end+0xfffaf258>
    4d84:	9cc00214 	ori	r19,r19,8
    4d88:	e005883a 	mov	r2,fp
    4d8c:	e4000007 	ldb	r16,0(fp)
    4d90:	003de506 	br	4528 <__alt_data_end+0xfffaedf8>
    4d94:	da012a17 	ldw	r8,1192(sp)
    4d98:	df012a15 	stw	fp,1192(sp)
    4d9c:	9f000414 	ori	fp,r19,16
    4da0:	e0c0080c 	andi	r3,fp,32
    4da4:	d8812d17 	ldw	r2,1204(sp)
    4da8:	18007626 	beq	r3,zero,4f84 <___vfprintf_internal_r+0xbfc>
    4dac:	d9412d17 	ldw	r5,1204(sp)
    4db0:	14800017 	ldw	r18,0(r2)
    4db4:	15400117 	ldw	r21,4(r2)
    4db8:	29400204 	addi	r5,r5,8
    4dbc:	d9412d15 	stw	r5,1204(sp)
    4dc0:	0005883a 	mov	r2,zero
    4dc4:	9546b03a 	or	r3,r18,r21
    4dc8:	d8012785 	stb	zero,1182(sp)
    4dcc:	da413215 	stw	r9,1224(sp)
    4dd0:	0027883a 	mov	r19,zero
    4dd4:	003ecd06 	br	490c <__alt_data_end+0xfffaf1dc>
    4dd8:	da012a17 	ldw	r8,1192(sp)
    4ddc:	df012a15 	stw	fp,1192(sp)
    4de0:	9f000414 	ori	fp,r19,16
    4de4:	e0c0080c 	andi	r3,fp,32
    4de8:	d8812d17 	ldw	r2,1204(sp)
    4dec:	18002c26 	beq	r3,zero,4ea0 <___vfprintf_internal_r+0xb18>
    4df0:	d9012d17 	ldw	r4,1204(sp)
    4df4:	14800017 	ldw	r18,0(r2)
    4df8:	15400117 	ldw	r21,4(r2)
    4dfc:	21000204 	addi	r4,r4,8
    4e00:	d9012d15 	stw	r4,1204(sp)
    4e04:	00800044 	movi	r2,1
    4e08:	9546b03a 	or	r3,r18,r21
    4e0c:	003fee06 	br	4dc8 <__alt_data_end+0xfffaf698>
    4e10:	da012a17 	ldw	r8,1192(sp)
    4e14:	df012a15 	stw	fp,1192(sp)
    4e18:	9839883a 	mov	fp,r19
    4e1c:	dcc12b03 	ldbu	r19,1196(sp)
    4e20:	01400074 	movhi	r5,1
    4e24:	294cd404 	addi	r5,r5,13136
    4e28:	dcc12785 	stb	r19,1182(sp)
    4e2c:	d9413b15 	stw	r5,1260(sp)
    4e30:	e0c0080c 	andi	r3,fp,32
    4e34:	d8812d17 	ldw	r2,1204(sp)
    4e38:	18002e26 	beq	r3,zero,4ef4 <___vfprintf_internal_r+0xb6c>
    4e3c:	d9412d17 	ldw	r5,1204(sp)
    4e40:	14800017 	ldw	r18,0(r2)
    4e44:	15400117 	ldw	r21,4(r2)
    4e48:	29400204 	addi	r5,r5,8
    4e4c:	d9412d15 	stw	r5,1204(sp)
    4e50:	e080004c 	andi	r2,fp,1
    4e54:	10025c26 	beq	r2,zero,57c8 <___vfprintf_internal_r+0x1440>
    4e58:	9546b03a 	or	r3,r18,r21
    4e5c:	18038f26 	beq	r3,zero,5c9c <___vfprintf_internal_r+0x1914>
    4e60:	00800c04 	movi	r2,48
    4e64:	d8812705 	stb	r2,1180(sp)
    4e68:	dc012745 	stb	r16,1181(sp)
    4e6c:	e7000094 	ori	fp,fp,2
    4e70:	00800084 	movi	r2,2
    4e74:	003fd406 	br	4dc8 <__alt_data_end+0xfffaf698>
    4e78:	9cc00814 	ori	r19,r19,32
    4e7c:	e005883a 	mov	r2,fp
    4e80:	e4000007 	ldb	r16,0(fp)
    4e84:	003da806 	br	4528 <__alt_data_end+0xfffaedf8>
    4e88:	da012a17 	ldw	r8,1192(sp)
    4e8c:	df012a15 	stw	fp,1192(sp)
    4e90:	9839883a 	mov	fp,r19
    4e94:	e0c0080c 	andi	r3,fp,32
    4e98:	d8812d17 	ldw	r2,1204(sp)
    4e9c:	183fd41e 	bne	r3,zero,4df0 <__alt_data_end+0xfffaf6c0>
    4ea0:	e0c0040c 	andi	r3,fp,16
    4ea4:	18035f26 	beq	r3,zero,5c24 <___vfprintf_internal_r+0x189c>
    4ea8:	d9412d17 	ldw	r5,1204(sp)
    4eac:	14800017 	ldw	r18,0(r2)
    4eb0:	002b883a 	mov	r21,zero
    4eb4:	29400104 	addi	r5,r5,4
    4eb8:	d9412d15 	stw	r5,1204(sp)
    4ebc:	00800044 	movi	r2,1
    4ec0:	9007883a 	mov	r3,r18
    4ec4:	003fc006 	br	4dc8 <__alt_data_end+0xfffaf698>
    4ec8:	da012a17 	ldw	r8,1192(sp)
    4ecc:	df012a15 	stw	fp,1192(sp)
    4ed0:	9839883a 	mov	fp,r19
    4ed4:	dcc12b03 	ldbu	r19,1196(sp)
    4ed8:	01000074 	movhi	r4,1
    4edc:	210cd904 	addi	r4,r4,13156
    4ee0:	d9013b15 	stw	r4,1260(sp)
    4ee4:	dcc12785 	stb	r19,1182(sp)
    4ee8:	e0c0080c 	andi	r3,fp,32
    4eec:	d8812d17 	ldw	r2,1204(sp)
    4ef0:	183fd21e 	bne	r3,zero,4e3c <__alt_data_end+0xfffaf70c>
    4ef4:	e0c0040c 	andi	r3,fp,16
    4ef8:	18035426 	beq	r3,zero,5c4c <___vfprintf_internal_r+0x18c4>
    4efc:	d8c12d17 	ldw	r3,1204(sp)
    4f00:	14800017 	ldw	r18,0(r2)
    4f04:	002b883a 	mov	r21,zero
    4f08:	18c00104 	addi	r3,r3,4
    4f0c:	d8c12d15 	stw	r3,1204(sp)
    4f10:	003fcf06 	br	4e50 <__alt_data_end+0xfffaf720>
    4f14:	e4000007 	ldb	r16,0(fp)
    4f18:	00801b04 	movi	r2,108
    4f1c:	8083f726 	beq	r16,r2,5efc <___vfprintf_internal_r+0x1b74>
    4f20:	9cc00414 	ori	r19,r19,16
    4f24:	e005883a 	mov	r2,fp
    4f28:	003d7f06 	br	4528 <__alt_data_end+0xfffaedf8>
    4f2c:	da012a17 	ldw	r8,1192(sp)
    4f30:	df012a15 	stw	fp,1192(sp)
    4f34:	9839883a 	mov	fp,r19
    4f38:	dcc12b03 	ldbu	r19,1196(sp)
    4f3c:	e080080c 	andi	r2,fp,32
    4f40:	dcc12785 	stb	r19,1182(sp)
    4f44:	10032226 	beq	r2,zero,5bd0 <___vfprintf_internal_r+0x1848>
    4f48:	d9412d17 	ldw	r5,1204(sp)
    4f4c:	d9012f17 	ldw	r4,1212(sp)
    4f50:	28800017 	ldw	r2,0(r5)
    4f54:	2007d7fa 	srai	r3,r4,31
    4f58:	29400104 	addi	r5,r5,4
    4f5c:	d9412d15 	stw	r5,1204(sp)
    4f60:	11000015 	stw	r4,0(r2)
    4f64:	10c00115 	stw	r3,4(r2)
    4f68:	003d4406 	br	447c <__alt_data_end+0xfffaed4c>
    4f6c:	da012a17 	ldw	r8,1192(sp)
    4f70:	df012a15 	stw	fp,1192(sp)
    4f74:	9839883a 	mov	fp,r19
    4f78:	e0c0080c 	andi	r3,fp,32
    4f7c:	d8812d17 	ldw	r2,1204(sp)
    4f80:	183f8a1e 	bne	r3,zero,4dac <__alt_data_end+0xfffaf67c>
    4f84:	e0c0040c 	andi	r3,fp,16
    4f88:	18031c26 	beq	r3,zero,5bfc <___vfprintf_internal_r+0x1874>
    4f8c:	14800017 	ldw	r18,0(r2)
    4f90:	d8812d17 	ldw	r2,1204(sp)
    4f94:	002b883a 	mov	r21,zero
    4f98:	9007883a 	mov	r3,r18
    4f9c:	10800104 	addi	r2,r2,4
    4fa0:	d8812d15 	stw	r2,1204(sp)
    4fa4:	0005883a 	mov	r2,zero
    4fa8:	003f8706 	br	4dc8 <__alt_data_end+0xfffaf698>
    4fac:	d9412d17 	ldw	r5,1204(sp)
    4fb0:	00800c04 	movi	r2,48
    4fb4:	d8812705 	stb	r2,1180(sp)
    4fb8:	2c800017 	ldw	r18,0(r5)
    4fbc:	00801e04 	movi	r2,120
    4fc0:	d8812745 	stb	r2,1181(sp)
    4fc4:	00800074 	movhi	r2,1
    4fc8:	108cd904 	addi	r2,r2,13156
    4fcc:	29400104 	addi	r5,r5,4
    4fd0:	da012a17 	ldw	r8,1192(sp)
    4fd4:	d8813b15 	stw	r2,1260(sp)
    4fd8:	df012a15 	stw	fp,1192(sp)
    4fdc:	002b883a 	mov	r21,zero
    4fe0:	9f000094 	ori	fp,r19,2
    4fe4:	d9412d15 	stw	r5,1204(sp)
    4fe8:	00800084 	movi	r2,2
    4fec:	04001e04 	movi	r16,120
    4ff0:	9007883a 	mov	r3,r18
    4ff4:	003f7406 	br	4dc8 <__alt_data_end+0xfffaf698>
    4ff8:	da012a17 	ldw	r8,1192(sp)
    4ffc:	df012a15 	stw	fp,1192(sp)
    5000:	9839883a 	mov	fp,r19
    5004:	dcc12b03 	ldbu	r19,1196(sp)
    5008:	e080080c 	andi	r2,fp,32
    500c:	d8c12d17 	ldw	r3,1204(sp)
    5010:	dcc12785 	stb	r19,1182(sp)
    5014:	103e321e 	bne	r2,zero,48e0 <__alt_data_end+0xfffaf1b0>
    5018:	e080040c 	andi	r2,fp,16
    501c:	10031326 	beq	r2,zero,5c6c <___vfprintf_internal_r+0x18e4>
    5020:	1c800017 	ldw	r18,0(r3)
    5024:	d9412d17 	ldw	r5,1204(sp)
    5028:	902bd7fa 	srai	r21,r18,31
    502c:	29400104 	addi	r5,r5,4
    5030:	d9412d15 	stw	r5,1204(sp)
    5034:	a805883a 	mov	r2,r21
    5038:	003e2f06 	br	48f8 <__alt_data_end+0xfffaf1c8>
    503c:	9cc01014 	ori	r19,r19,64
    5040:	e005883a 	mov	r2,fp
    5044:	e4000007 	ldb	r16,0(fp)
    5048:	003d3706 	br	4528 <__alt_data_end+0xfffaedf8>
    504c:	d8c12d17 	ldw	r3,1204(sp)
    5050:	d9012d17 	ldw	r4,1204(sp)
    5054:	da012a17 	ldw	r8,1192(sp)
    5058:	18800017 	ldw	r2,0(r3)
    505c:	21000104 	addi	r4,r4,4
    5060:	00c00044 	movi	r3,1
    5064:	df012a15 	stw	fp,1192(sp)
    5068:	d8c12b15 	stw	r3,1196(sp)
    506c:	9839883a 	mov	fp,r19
    5070:	d8012785 	stb	zero,1182(sp)
    5074:	d8810405 	stb	r2,1040(sp)
    5078:	d9012d15 	stw	r4,1204(sp)
    507c:	1823883a 	mov	r17,r3
    5080:	d8c10404 	addi	r3,sp,1040
    5084:	d8013215 	stw	zero,1224(sp)
    5088:	d8013415 	stw	zero,1232(sp)
    508c:	d8c13115 	stw	r3,1220(sp)
    5090:	0005883a 	mov	r2,zero
    5094:	003e4306 	br	49a4 <__alt_data_end+0xfffaf274>
    5098:	d8812b07 	ldb	r2,1196(sp)
    509c:	1002fc1e 	bne	r2,zero,5c90 <___vfprintf_internal_r+0x1908>
    50a0:	00c00804 	movi	r3,32
    50a4:	d8c12b05 	stb	r3,1196(sp)
    50a8:	e005883a 	mov	r2,fp
    50ac:	e4000007 	ldb	r16,0(fp)
    50b0:	003d1d06 	br	4528 <__alt_data_end+0xfffaedf8>
    50b4:	9cc00054 	ori	r19,r19,1
    50b8:	e005883a 	mov	r2,fp
    50bc:	e4000007 	ldb	r16,0(fp)
    50c0:	003d1906 	br	4528 <__alt_data_end+0xfffaedf8>
    50c4:	d9012d17 	ldw	r4,1204(sp)
    50c8:	d9412d17 	ldw	r5,1204(sp)
    50cc:	21000017 	ldw	r4,0(r4)
    50d0:	28c00104 	addi	r3,r5,4
    50d4:	d9012e15 	stw	r4,1208(sp)
    50d8:	20038c16 	blt	r4,zero,5f0c <___vfprintf_internal_r+0x1b84>
    50dc:	d8c12d15 	stw	r3,1204(sp)
    50e0:	e005883a 	mov	r2,fp
    50e4:	e4000007 	ldb	r16,0(fp)
    50e8:	003d0f06 	br	4528 <__alt_data_end+0xfffaedf8>
    50ec:	00c00ac4 	movi	r3,43
    50f0:	d8c12b05 	stb	r3,1196(sp)
    50f4:	e005883a 	mov	r2,fp
    50f8:	e4000007 	ldb	r16,0(fp)
    50fc:	003d0a06 	br	4528 <__alt_data_end+0xfffaedf8>
    5100:	d8c12d17 	ldw	r3,1204(sp)
    5104:	d9012d17 	ldw	r4,1204(sp)
    5108:	da012a17 	ldw	r8,1192(sp)
    510c:	18c00017 	ldw	r3,0(r3)
    5110:	df012a15 	stw	fp,1192(sp)
    5114:	d8012785 	stb	zero,1182(sp)
    5118:	d8c13115 	stw	r3,1220(sp)
    511c:	9839883a 	mov	fp,r19
    5120:	24800104 	addi	r18,r4,4
    5124:	1803f726 	beq	r3,zero,6104 <___vfprintf_internal_r+0x1d7c>
    5128:	d9013117 	ldw	r4,1220(sp)
    512c:	48038916 	blt	r9,zero,5f54 <___vfprintf_internal_r+0x1bcc>
    5130:	480d883a 	mov	r6,r9
    5134:	000b883a 	mov	r5,zero
    5138:	da013f15 	stw	r8,1276(sp)
    513c:	da413e15 	stw	r9,1272(sp)
    5140:	00091f40 	call	91f4 <memchr>
    5144:	da013f17 	ldw	r8,1276(sp)
    5148:	da413e17 	ldw	r9,1272(sp)
    514c:	10045926 	beq	r2,zero,62b4 <___vfprintf_internal_r+0x1f2c>
    5150:	d8c13117 	ldw	r3,1220(sp)
    5154:	10e3c83a 	sub	r17,r2,r3
    5158:	4c433516 	blt	r9,r17,5e30 <___vfprintf_internal_r+0x1aa8>
    515c:	8805883a 	mov	r2,r17
    5160:	88038116 	blt	r17,zero,5f68 <___vfprintf_internal_r+0x1be0>
    5164:	dcc12783 	ldbu	r19,1182(sp)
    5168:	d8812b15 	stw	r2,1196(sp)
    516c:	dc812d15 	stw	r18,1204(sp)
    5170:	d8013215 	stw	zero,1224(sp)
    5174:	d8013415 	stw	zero,1232(sp)
    5178:	003e0306 	br	4988 <__alt_data_end+0xfffaf258>
    517c:	da012a17 	ldw	r8,1192(sp)
    5180:	df012a15 	stw	fp,1192(sp)
    5184:	9839883a 	mov	fp,r19
    5188:	dcc12b03 	ldbu	r19,1196(sp)
    518c:	dcc12785 	stb	r19,1182(sp)
    5190:	803d8f26 	beq	r16,zero,47d0 <__alt_data_end+0xfffaf0a0>
    5194:	00c00044 	movi	r3,1
    5198:	d8c12b15 	stw	r3,1196(sp)
    519c:	dc010405 	stb	r16,1040(sp)
    51a0:	d8012785 	stb	zero,1182(sp)
    51a4:	003fb506 	br	507c <__alt_data_end+0xfffaf94c>
    51a8:	d8c12017 	ldw	r3,1152(sp)
    51ac:	003e3506 	br	4a84 <__alt_data_end+0xfffaf354>
    51b0:	10803fcc 	andi	r2,r2,255
    51b4:	00c00044 	movi	r3,1
    51b8:	10fddc1e 	bne	r2,r3,492c <__alt_data_end+0xfffaf1fc>
    51bc:	a800021e 	bne	r21,zero,51c8 <___vfprintf_internal_r+0xe40>
    51c0:	00800244 	movi	r2,9
    51c4:	14801e2e 	bgeu	r2,r18,5240 <___vfprintf_internal_r+0xeb8>
    51c8:	dc012b15 	stw	r16,1196(sp)
    51cc:	dc410e04 	addi	r17,sp,1080
    51d0:	9021883a 	mov	r16,r18
    51d4:	da012c15 	stw	r8,1200(sp)
    51d8:	a825883a 	mov	r18,r21
    51dc:	482b883a 	mov	r21,r9
    51e0:	8009883a 	mov	r4,r16
    51e4:	900b883a 	mov	r5,r18
    51e8:	01800284 	movi	r6,10
    51ec:	000f883a 	mov	r7,zero
    51f0:	000d4c40 	call	d4c4 <__umoddi3>
    51f4:	10800c04 	addi	r2,r2,48
    51f8:	8c7fffc4 	addi	r17,r17,-1
    51fc:	8009883a 	mov	r4,r16
    5200:	900b883a 	mov	r5,r18
    5204:	01800284 	movi	r6,10
    5208:	000f883a 	mov	r7,zero
    520c:	88800005 	stb	r2,0(r17)
    5210:	000ce840 	call	ce84 <__udivdi3>
    5214:	1021883a 	mov	r16,r2
    5218:	10c4b03a 	or	r2,r2,r3
    521c:	1825883a 	mov	r18,r3
    5220:	103fef1e 	bne	r2,zero,51e0 <__alt_data_end+0xfffafab0>
    5224:	d9012817 	ldw	r4,1184(sp)
    5228:	dc413115 	stw	r17,1220(sp)
    522c:	dc012b17 	ldw	r16,1196(sp)
    5230:	da012c17 	ldw	r8,1200(sp)
    5234:	a813883a 	mov	r9,r21
    5238:	2463c83a 	sub	r17,r4,r17
    523c:	003dcd06 	br	4974 <__alt_data_end+0xfffaf244>
    5240:	94800c04 	addi	r18,r18,48
    5244:	d8c10dc4 	addi	r3,sp,1079
    5248:	dc810dc5 	stb	r18,1079(sp)
    524c:	dc413c17 	ldw	r17,1264(sp)
    5250:	d8c13115 	stw	r3,1220(sp)
    5254:	003dc706 	br	4974 <__alt_data_end+0xfffaf244>
    5258:	00801944 	movi	r2,101
    525c:	1400720e 	bge	r2,r16,5428 <___vfprintf_internal_r+0x10a0>
    5260:	d9013717 	ldw	r4,1244(sp)
    5264:	d9413917 	ldw	r5,1252(sp)
    5268:	000d883a 	mov	r6,zero
    526c:	000f883a 	mov	r7,zero
    5270:	d8c13d15 	stw	r3,1268(sp)
    5274:	da013f15 	stw	r8,1276(sp)
    5278:	000ed240 	call	ed24 <__eqdf2>
    527c:	d8c13d17 	ldw	r3,1268(sp)
    5280:	da013f17 	ldw	r8,1276(sp)
    5284:	1000f41e 	bne	r2,zero,5658 <___vfprintf_internal_r+0x12d0>
    5288:	d8811f17 	ldw	r2,1148(sp)
    528c:	01000074 	movhi	r4,1
    5290:	210ce004 	addi	r4,r4,13184
    5294:	18c00044 	addi	r3,r3,1
    5298:	10800044 	addi	r2,r2,1
    529c:	41000015 	stw	r4,0(r8)
    52a0:	01000044 	movi	r4,1
    52a4:	41000115 	stw	r4,4(r8)
    52a8:	d8c12015 	stw	r3,1152(sp)
    52ac:	d8811f15 	stw	r2,1148(sp)
    52b0:	010001c4 	movi	r4,7
    52b4:	20828d16 	blt	r4,r2,5cec <___vfprintf_internal_r+0x1964>
    52b8:	42000204 	addi	r8,r8,8
    52bc:	d8812617 	ldw	r2,1176(sp)
    52c0:	d9413317 	ldw	r5,1228(sp)
    52c4:	11400216 	blt	r2,r5,52d0 <___vfprintf_internal_r+0xf48>
    52c8:	e080004c 	andi	r2,fp,1
    52cc:	103e4126 	beq	r2,zero,4bd4 <__alt_data_end+0xfffaf4a4>
    52d0:	d8813817 	ldw	r2,1248(sp)
    52d4:	d9013517 	ldw	r4,1236(sp)
    52d8:	d9413817 	ldw	r5,1248(sp)
    52dc:	1887883a 	add	r3,r3,r2
    52e0:	d8811f17 	ldw	r2,1148(sp)
    52e4:	41000015 	stw	r4,0(r8)
    52e8:	41400115 	stw	r5,4(r8)
    52ec:	10800044 	addi	r2,r2,1
    52f0:	d8c12015 	stw	r3,1152(sp)
    52f4:	d8811f15 	stw	r2,1148(sp)
    52f8:	010001c4 	movi	r4,7
    52fc:	20830916 	blt	r4,r2,5f24 <___vfprintf_internal_r+0x1b9c>
    5300:	42000204 	addi	r8,r8,8
    5304:	d8813317 	ldw	r2,1228(sp)
    5308:	143fffc4 	addi	r16,r2,-1
    530c:	043e310e 	bge	zero,r16,4bd4 <__alt_data_end+0xfffaf4a4>
    5310:	04400404 	movi	r17,16
    5314:	d8811f17 	ldw	r2,1148(sp)
    5318:	8c007e0e 	bge	r17,r16,5514 <___vfprintf_internal_r+0x118c>
    531c:	01400074 	movhi	r5,1
    5320:	294ce084 	addi	r5,r5,13186
    5324:	d9412c15 	stw	r5,1200(sp)
    5328:	04c001c4 	movi	r19,7
    532c:	00000306 	br	533c <___vfprintf_internal_r+0xfb4>
    5330:	42000204 	addi	r8,r8,8
    5334:	843ffc04 	addi	r16,r16,-16
    5338:	8c00790e 	bge	r17,r16,5520 <___vfprintf_internal_r+0x1198>
    533c:	18c00404 	addi	r3,r3,16
    5340:	10800044 	addi	r2,r2,1
    5344:	45000015 	stw	r20,0(r8)
    5348:	44400115 	stw	r17,4(r8)
    534c:	d8c12015 	stw	r3,1152(sp)
    5350:	d8811f15 	stw	r2,1148(sp)
    5354:	98bff60e 	bge	r19,r2,5330 <__alt_data_end+0xfffafc00>
    5358:	b809883a 	mov	r4,r23
    535c:	b00b883a 	mov	r5,r22
    5360:	d9811e04 	addi	r6,sp,1144
    5364:	000afcc0 	call	afcc <__sprint_r>
    5368:	103d1f1e 	bne	r2,zero,47e8 <__alt_data_end+0xfffaf0b8>
    536c:	d8c12017 	ldw	r3,1152(sp)
    5370:	d8811f17 	ldw	r2,1148(sp)
    5374:	da000404 	addi	r8,sp,16
    5378:	003fee06 	br	5334 <__alt_data_end+0xfffafc04>
    537c:	d9412e17 	ldw	r5,1208(sp)
    5380:	d8812b17 	ldw	r2,1196(sp)
    5384:	28a7c83a 	sub	r19,r5,r2
    5388:	04fddc0e 	bge	zero,r19,4afc <__alt_data_end+0xfffaf3cc>
    538c:	05400404 	movi	r21,16
    5390:	d8811f17 	ldw	r2,1148(sp)
    5394:	acc3870e 	bge	r21,r19,61b4 <___vfprintf_internal_r+0x1e2c>
    5398:	01400074 	movhi	r5,1
    539c:	294ce084 	addi	r5,r5,13186
    53a0:	d9412c15 	stw	r5,1200(sp)
    53a4:	048001c4 	movi	r18,7
    53a8:	00000306 	br	53b8 <___vfprintf_internal_r+0x1030>
    53ac:	9cfffc04 	addi	r19,r19,-16
    53b0:	42000204 	addi	r8,r8,8
    53b4:	acc0110e 	bge	r21,r19,53fc <___vfprintf_internal_r+0x1074>
    53b8:	18c00404 	addi	r3,r3,16
    53bc:	10800044 	addi	r2,r2,1
    53c0:	45000015 	stw	r20,0(r8)
    53c4:	45400115 	stw	r21,4(r8)
    53c8:	d8c12015 	stw	r3,1152(sp)
    53cc:	d8811f15 	stw	r2,1148(sp)
    53d0:	90bff60e 	bge	r18,r2,53ac <__alt_data_end+0xfffafc7c>
    53d4:	b809883a 	mov	r4,r23
    53d8:	b00b883a 	mov	r5,r22
    53dc:	d9811e04 	addi	r6,sp,1144
    53e0:	000afcc0 	call	afcc <__sprint_r>
    53e4:	103d001e 	bne	r2,zero,47e8 <__alt_data_end+0xfffaf0b8>
    53e8:	9cfffc04 	addi	r19,r19,-16
    53ec:	d8c12017 	ldw	r3,1152(sp)
    53f0:	d8811f17 	ldw	r2,1148(sp)
    53f4:	da000404 	addi	r8,sp,16
    53f8:	acffef16 	blt	r21,r19,53b8 <__alt_data_end+0xfffafc88>
    53fc:	d9012c17 	ldw	r4,1200(sp)
    5400:	1cc7883a 	add	r3,r3,r19
    5404:	10800044 	addi	r2,r2,1
    5408:	41000015 	stw	r4,0(r8)
    540c:	44c00115 	stw	r19,4(r8)
    5410:	d8c12015 	stw	r3,1152(sp)
    5414:	d8811f15 	stw	r2,1148(sp)
    5418:	010001c4 	movi	r4,7
    541c:	20817816 	blt	r4,r2,5a00 <___vfprintf_internal_r+0x1678>
    5420:	42000204 	addi	r8,r8,8
    5424:	003db506 	br	4afc <__alt_data_end+0xfffaf3cc>
    5428:	d9413317 	ldw	r5,1228(sp)
    542c:	00800044 	movi	r2,1
    5430:	18c00044 	addi	r3,r3,1
    5434:	11413e0e 	bge	r2,r5,5930 <___vfprintf_internal_r+0x15a8>
    5438:	dc011f17 	ldw	r16,1148(sp)
    543c:	d8813117 	ldw	r2,1220(sp)
    5440:	d8c12015 	stw	r3,1152(sp)
    5444:	84000044 	addi	r16,r16,1
    5448:	40800015 	stw	r2,0(r8)
    544c:	00800044 	movi	r2,1
    5450:	40800115 	stw	r2,4(r8)
    5454:	dc011f15 	stw	r16,1148(sp)
    5458:	008001c4 	movi	r2,7
    545c:	14015616 	blt	r2,r16,59b8 <___vfprintf_internal_r+0x1630>
    5460:	42000204 	addi	r8,r8,8
    5464:	d9013817 	ldw	r4,1248(sp)
    5468:	d9413517 	ldw	r5,1236(sp)
    546c:	84000044 	addi	r16,r16,1
    5470:	1907883a 	add	r3,r3,r4
    5474:	41400015 	stw	r5,0(r8)
    5478:	41000115 	stw	r4,4(r8)
    547c:	d8c12015 	stw	r3,1152(sp)
    5480:	dc011f15 	stw	r16,1148(sp)
    5484:	008001c4 	movi	r2,7
    5488:	14015416 	blt	r2,r16,59dc <___vfprintf_internal_r+0x1654>
    548c:	44400204 	addi	r17,r8,8
    5490:	d9013717 	ldw	r4,1244(sp)
    5494:	d9413917 	ldw	r5,1252(sp)
    5498:	000d883a 	mov	r6,zero
    549c:	000f883a 	mov	r7,zero
    54a0:	d8c13d15 	stw	r3,1268(sp)
    54a4:	000ed240 	call	ed24 <__eqdf2>
    54a8:	d8c13d17 	ldw	r3,1268(sp)
    54ac:	1000a726 	beq	r2,zero,574c <___vfprintf_internal_r+0x13c4>
    54b0:	d9013317 	ldw	r4,1228(sp)
    54b4:	d9413117 	ldw	r5,1220(sp)
    54b8:	84000044 	addi	r16,r16,1
    54bc:	20bfffc4 	addi	r2,r4,-1
    54c0:	1887883a 	add	r3,r3,r2
    54c4:	29000044 	addi	r4,r5,1
    54c8:	88800115 	stw	r2,4(r17)
    54cc:	89000015 	stw	r4,0(r17)
    54d0:	d8c12015 	stw	r3,1152(sp)
    54d4:	dc011f15 	stw	r16,1148(sp)
    54d8:	008001c4 	movi	r2,7
    54dc:	14012d16 	blt	r2,r16,5994 <___vfprintf_internal_r+0x160c>
    54e0:	8c400204 	addi	r17,r17,8
    54e4:	d9413a17 	ldw	r5,1256(sp)
    54e8:	dcc122c4 	addi	r19,sp,1163
    54ec:	84000044 	addi	r16,r16,1
    54f0:	28c7883a 	add	r3,r5,r3
    54f4:	8cc00015 	stw	r19,0(r17)
    54f8:	89400115 	stw	r5,4(r17)
    54fc:	d8c12015 	stw	r3,1152(sp)
    5500:	dc011f15 	stw	r16,1148(sp)
    5504:	008001c4 	movi	r2,7
    5508:	14000e16 	blt	r2,r16,5544 <___vfprintf_internal_r+0x11bc>
    550c:	8a000204 	addi	r8,r17,8
    5510:	003db006 	br	4bd4 <__alt_data_end+0xfffaf4a4>
    5514:	01000074 	movhi	r4,1
    5518:	210ce084 	addi	r4,r4,13186
    551c:	d9012c15 	stw	r4,1200(sp)
    5520:	d9012c17 	ldw	r4,1200(sp)
    5524:	1c07883a 	add	r3,r3,r16
    5528:	44000115 	stw	r16,4(r8)
    552c:	41000015 	stw	r4,0(r8)
    5530:	10800044 	addi	r2,r2,1
    5534:	d8c12015 	stw	r3,1152(sp)
    5538:	d8811f15 	stw	r2,1148(sp)
    553c:	010001c4 	movi	r4,7
    5540:	20bda30e 	bge	r4,r2,4bd0 <__alt_data_end+0xfffaf4a0>
    5544:	b809883a 	mov	r4,r23
    5548:	b00b883a 	mov	r5,r22
    554c:	d9811e04 	addi	r6,sp,1144
    5550:	000afcc0 	call	afcc <__sprint_r>
    5554:	103ca41e 	bne	r2,zero,47e8 <__alt_data_end+0xfffaf0b8>
    5558:	d8c12017 	ldw	r3,1152(sp)
    555c:	da000404 	addi	r8,sp,16
    5560:	003d9c06 	br	4bd4 <__alt_data_end+0xfffaf4a4>
    5564:	b809883a 	mov	r4,r23
    5568:	b00b883a 	mov	r5,r22
    556c:	d9811e04 	addi	r6,sp,1144
    5570:	000afcc0 	call	afcc <__sprint_r>
    5574:	103dd226 	beq	r2,zero,4cc0 <__alt_data_end+0xfffaf590>
    5578:	003c9b06 	br	47e8 <__alt_data_end+0xfffaf0b8>
    557c:	10803fcc 	andi	r2,r2,255
    5580:	1000311e 	bne	r2,zero,5648 <___vfprintf_internal_r+0x12c0>
    5584:	e080004c 	andi	r2,fp,1
    5588:	10002f26 	beq	r2,zero,5648 <___vfprintf_internal_r+0x12c0>
    558c:	00800c04 	movi	r2,48
    5590:	d8c10dc4 	addi	r3,sp,1079
    5594:	d8810dc5 	stb	r2,1079(sp)
    5598:	dc413c17 	ldw	r17,1264(sp)
    559c:	d8c13115 	stw	r3,1220(sp)
    55a0:	003cf406 	br	4974 <__alt_data_end+0xfffaf244>
    55a4:	b809883a 	mov	r4,r23
    55a8:	b00b883a 	mov	r5,r22
    55ac:	d9811e04 	addi	r6,sp,1144
    55b0:	000afcc0 	call	afcc <__sprint_r>
    55b4:	103c8c1e 	bne	r2,zero,47e8 <__alt_data_end+0xfffaf0b8>
    55b8:	d8c12017 	ldw	r3,1152(sp)
    55bc:	da000404 	addi	r8,sp,16
    55c0:	003d7706 	br	4ba0 <__alt_data_end+0xfffaf470>
    55c4:	b809883a 	mov	r4,r23
    55c8:	b00b883a 	mov	r5,r22
    55cc:	d9811e04 	addi	r6,sp,1144
    55d0:	000afcc0 	call	afcc <__sprint_r>
    55d4:	103c841e 	bne	r2,zero,47e8 <__alt_data_end+0xfffaf0b8>
    55d8:	d8c12017 	ldw	r3,1152(sp)
    55dc:	da000404 	addi	r8,sp,16
    55e0:	003d3506 	br	4ab8 <__alt_data_end+0xfffaf388>
    55e4:	b809883a 	mov	r4,r23
    55e8:	b00b883a 	mov	r5,r22
    55ec:	d9811e04 	addi	r6,sp,1144
    55f0:	000afcc0 	call	afcc <__sprint_r>
    55f4:	103c7c1e 	bne	r2,zero,47e8 <__alt_data_end+0xfffaf0b8>
    55f8:	d8c12017 	ldw	r3,1152(sp)
    55fc:	da000404 	addi	r8,sp,16
    5600:	003d3b06 	br	4af0 <__alt_data_end+0xfffaf3c0>
    5604:	d9413b17 	ldw	r5,1260(sp)
    5608:	d8c10e04 	addi	r3,sp,1080
    560c:	908003cc 	andi	r2,r18,15
    5610:	a808973a 	slli	r4,r21,28
    5614:	2885883a 	add	r2,r5,r2
    5618:	9024d13a 	srli	r18,r18,4
    561c:	10800003 	ldbu	r2,0(r2)
    5620:	a82ad13a 	srli	r21,r21,4
    5624:	18ffffc4 	addi	r3,r3,-1
    5628:	24a4b03a 	or	r18,r4,r18
    562c:	18800005 	stb	r2,0(r3)
    5630:	9544b03a 	or	r2,r18,r21
    5634:	103ff51e 	bne	r2,zero,560c <__alt_data_end+0xfffafedc>
    5638:	d9412817 	ldw	r5,1184(sp)
    563c:	d8c13115 	stw	r3,1220(sp)
    5640:	28e3c83a 	sub	r17,r5,r3
    5644:	003ccb06 	br	4974 <__alt_data_end+0xfffaf244>
    5648:	d8c10e04 	addi	r3,sp,1080
    564c:	0023883a 	mov	r17,zero
    5650:	d8c13115 	stw	r3,1220(sp)
    5654:	003cc706 	br	4974 <__alt_data_end+0xfffaf244>
    5658:	dc012617 	ldw	r16,1176(sp)
    565c:	0401ab0e 	bge	zero,r16,5d0c <___vfprintf_internal_r+0x1984>
    5660:	d8813317 	ldw	r2,1228(sp)
    5664:	d9413117 	ldw	r5,1220(sp)
    5668:	d9013417 	ldw	r4,1232(sp)
    566c:	1023883a 	mov	r17,r2
    5670:	28a1883a 	add	r16,r5,r2
    5674:	2080010e 	bge	r4,r2,567c <___vfprintf_internal_r+0x12f4>
    5678:	2023883a 	mov	r17,r4
    567c:	04400b0e 	bge	zero,r17,56ac <___vfprintf_internal_r+0x1324>
    5680:	d8811f17 	ldw	r2,1148(sp)
    5684:	d9413117 	ldw	r5,1220(sp)
    5688:	1c47883a 	add	r3,r3,r17
    568c:	10800044 	addi	r2,r2,1
    5690:	41400015 	stw	r5,0(r8)
    5694:	44400115 	stw	r17,4(r8)
    5698:	d8c12015 	stw	r3,1152(sp)
    569c:	d8811f15 	stw	r2,1148(sp)
    56a0:	010001c4 	movi	r4,7
    56a4:	20826716 	blt	r4,r2,6044 <___vfprintf_internal_r+0x1cbc>
    56a8:	42000204 	addi	r8,r8,8
    56ac:	88026316 	blt	r17,zero,603c <___vfprintf_internal_r+0x1cb4>
    56b0:	d8813417 	ldw	r2,1232(sp)
    56b4:	1463c83a 	sub	r17,r2,r17
    56b8:	0440590e 	bge	zero,r17,5820 <___vfprintf_internal_r+0x1498>
    56bc:	04c00404 	movi	r19,16
    56c0:	d8811f17 	ldw	r2,1148(sp)
    56c4:	9c41770e 	bge	r19,r17,5ca4 <___vfprintf_internal_r+0x191c>
    56c8:	01400074 	movhi	r5,1
    56cc:	294ce084 	addi	r5,r5,13186
    56d0:	d9412c15 	stw	r5,1200(sp)
    56d4:	054001c4 	movi	r21,7
    56d8:	00000306 	br	56e8 <___vfprintf_internal_r+0x1360>
    56dc:	42000204 	addi	r8,r8,8
    56e0:	8c7ffc04 	addi	r17,r17,-16
    56e4:	9c41720e 	bge	r19,r17,5cb0 <___vfprintf_internal_r+0x1928>
    56e8:	18c00404 	addi	r3,r3,16
    56ec:	10800044 	addi	r2,r2,1
    56f0:	45000015 	stw	r20,0(r8)
    56f4:	44c00115 	stw	r19,4(r8)
    56f8:	d8c12015 	stw	r3,1152(sp)
    56fc:	d8811f15 	stw	r2,1148(sp)
    5700:	a8bff60e 	bge	r21,r2,56dc <__alt_data_end+0xfffaffac>
    5704:	b809883a 	mov	r4,r23
    5708:	b00b883a 	mov	r5,r22
    570c:	d9811e04 	addi	r6,sp,1144
    5710:	000afcc0 	call	afcc <__sprint_r>
    5714:	103c341e 	bne	r2,zero,47e8 <__alt_data_end+0xfffaf0b8>
    5718:	d8c12017 	ldw	r3,1152(sp)
    571c:	d8811f17 	ldw	r2,1148(sp)
    5720:	da000404 	addi	r8,sp,16
    5724:	003fee06 	br	56e0 <__alt_data_end+0xfffaffb0>
    5728:	b809883a 	mov	r4,r23
    572c:	b00b883a 	mov	r5,r22
    5730:	d9811e04 	addi	r6,sp,1144
    5734:	000afcc0 	call	afcc <__sprint_r>
    5738:	103c2b1e 	bne	r2,zero,47e8 <__alt_data_end+0xfffaf0b8>
    573c:	d8c12017 	ldw	r3,1152(sp)
    5740:	d8812787 	ldb	r2,1182(sp)
    5744:	da000404 	addi	r8,sp,16
    5748:	003cce06 	br	4a84 <__alt_data_end+0xfffaf354>
    574c:	d8813317 	ldw	r2,1228(sp)
    5750:	14ffffc4 	addi	r19,r2,-1
    5754:	04ff630e 	bge	zero,r19,54e4 <__alt_data_end+0xfffafdb4>
    5758:	05400404 	movi	r21,16
    575c:	acc0810e 	bge	r21,r19,5964 <___vfprintf_internal_r+0x15dc>
    5760:	01400074 	movhi	r5,1
    5764:	294ce084 	addi	r5,r5,13186
    5768:	d9412c15 	stw	r5,1200(sp)
    576c:	01c001c4 	movi	r7,7
    5770:	00000306 	br	5780 <___vfprintf_internal_r+0x13f8>
    5774:	8c400204 	addi	r17,r17,8
    5778:	9cfffc04 	addi	r19,r19,-16
    577c:	acc07c0e 	bge	r21,r19,5970 <___vfprintf_internal_r+0x15e8>
    5780:	18c00404 	addi	r3,r3,16
    5784:	84000044 	addi	r16,r16,1
    5788:	8d000015 	stw	r20,0(r17)
    578c:	8d400115 	stw	r21,4(r17)
    5790:	d8c12015 	stw	r3,1152(sp)
    5794:	dc011f15 	stw	r16,1148(sp)
    5798:	3c3ff60e 	bge	r7,r16,5774 <__alt_data_end+0xfffb0044>
    579c:	b809883a 	mov	r4,r23
    57a0:	b00b883a 	mov	r5,r22
    57a4:	d9811e04 	addi	r6,sp,1144
    57a8:	d9c13d15 	stw	r7,1268(sp)
    57ac:	000afcc0 	call	afcc <__sprint_r>
    57b0:	d9c13d17 	ldw	r7,1268(sp)
    57b4:	103c0c1e 	bne	r2,zero,47e8 <__alt_data_end+0xfffaf0b8>
    57b8:	d8c12017 	ldw	r3,1152(sp)
    57bc:	dc011f17 	ldw	r16,1148(sp)
    57c0:	dc400404 	addi	r17,sp,16
    57c4:	003fec06 	br	5778 <__alt_data_end+0xfffb0048>
    57c8:	00800084 	movi	r2,2
    57cc:	9546b03a 	or	r3,r18,r21
    57d0:	003d7d06 	br	4dc8 <__alt_data_end+0xfffaf698>
    57d4:	10803fcc 	andi	r2,r2,255
    57d8:	1080201c 	xori	r2,r2,128
    57dc:	10bfe004 	addi	r2,r2,-128
    57e0:	01000c04 	movi	r4,48
    57e4:	1101d726 	beq	r2,r4,5f44 <___vfprintf_internal_r+0x1bbc>
    57e8:	d9413117 	ldw	r5,1220(sp)
    57ec:	d8812817 	ldw	r2,1184(sp)
    57f0:	193fffc5 	stb	r4,-1(r3)
    57f4:	297fffc4 	addi	r5,r5,-1
    57f8:	d9413115 	stw	r5,1220(sp)
    57fc:	1163c83a 	sub	r17,r2,r5
    5800:	003c5c06 	br	4974 <__alt_data_end+0xfffaf244>
    5804:	b809883a 	mov	r4,r23
    5808:	b00b883a 	mov	r5,r22
    580c:	d9811e04 	addi	r6,sp,1144
    5810:	000afcc0 	call	afcc <__sprint_r>
    5814:	103bf41e 	bne	r2,zero,47e8 <__alt_data_end+0xfffaf0b8>
    5818:	d8c12017 	ldw	r3,1152(sp)
    581c:	da000404 	addi	r8,sp,16
    5820:	d9413117 	ldw	r5,1220(sp)
    5824:	d9013417 	ldw	r4,1232(sp)
    5828:	d8812617 	ldw	r2,1176(sp)
    582c:	2923883a 	add	r17,r5,r4
    5830:	d9413317 	ldw	r5,1228(sp)
    5834:	11400216 	blt	r2,r5,5840 <___vfprintf_internal_r+0x14b8>
    5838:	e100004c 	andi	r4,fp,1
    583c:	20000d26 	beq	r4,zero,5874 <___vfprintf_internal_r+0x14ec>
    5840:	d9013817 	ldw	r4,1248(sp)
    5844:	d9413517 	ldw	r5,1236(sp)
    5848:	1907883a 	add	r3,r3,r4
    584c:	d9011f17 	ldw	r4,1148(sp)
    5850:	41400015 	stw	r5,0(r8)
    5854:	d9413817 	ldw	r5,1248(sp)
    5858:	21000044 	addi	r4,r4,1
    585c:	d8c12015 	stw	r3,1152(sp)
    5860:	41400115 	stw	r5,4(r8)
    5864:	d9011f15 	stw	r4,1148(sp)
    5868:	014001c4 	movi	r5,7
    586c:	2901fd16 	blt	r5,r4,6064 <___vfprintf_internal_r+0x1cdc>
    5870:	42000204 	addi	r8,r8,8
    5874:	d9013317 	ldw	r4,1228(sp)
    5878:	2085c83a 	sub	r2,r4,r2
    587c:	8449c83a 	sub	r4,r16,r17
    5880:	1021883a 	mov	r16,r2
    5884:	2080010e 	bge	r4,r2,588c <___vfprintf_internal_r+0x1504>
    5888:	2021883a 	mov	r16,r4
    588c:	04000a0e 	bge	zero,r16,58b8 <___vfprintf_internal_r+0x1530>
    5890:	d9011f17 	ldw	r4,1148(sp)
    5894:	1c07883a 	add	r3,r3,r16
    5898:	44400015 	stw	r17,0(r8)
    589c:	21000044 	addi	r4,r4,1
    58a0:	44000115 	stw	r16,4(r8)
    58a4:	d8c12015 	stw	r3,1152(sp)
    58a8:	d9011f15 	stw	r4,1148(sp)
    58ac:	014001c4 	movi	r5,7
    58b0:	29020916 	blt	r5,r4,60d8 <___vfprintf_internal_r+0x1d50>
    58b4:	42000204 	addi	r8,r8,8
    58b8:	80020116 	blt	r16,zero,60c0 <___vfprintf_internal_r+0x1d38>
    58bc:	1421c83a 	sub	r16,r2,r16
    58c0:	043cc40e 	bge	zero,r16,4bd4 <__alt_data_end+0xfffaf4a4>
    58c4:	04400404 	movi	r17,16
    58c8:	d8811f17 	ldw	r2,1148(sp)
    58cc:	8c3f110e 	bge	r17,r16,5514 <__alt_data_end+0xfffafde4>
    58d0:	01400074 	movhi	r5,1
    58d4:	294ce084 	addi	r5,r5,13186
    58d8:	d9412c15 	stw	r5,1200(sp)
    58dc:	04c001c4 	movi	r19,7
    58e0:	00000306 	br	58f0 <___vfprintf_internal_r+0x1568>
    58e4:	42000204 	addi	r8,r8,8
    58e8:	843ffc04 	addi	r16,r16,-16
    58ec:	8c3f0c0e 	bge	r17,r16,5520 <__alt_data_end+0xfffafdf0>
    58f0:	18c00404 	addi	r3,r3,16
    58f4:	10800044 	addi	r2,r2,1
    58f8:	45000015 	stw	r20,0(r8)
    58fc:	44400115 	stw	r17,4(r8)
    5900:	d8c12015 	stw	r3,1152(sp)
    5904:	d8811f15 	stw	r2,1148(sp)
    5908:	98bff60e 	bge	r19,r2,58e4 <__alt_data_end+0xfffb01b4>
    590c:	b809883a 	mov	r4,r23
    5910:	b00b883a 	mov	r5,r22
    5914:	d9811e04 	addi	r6,sp,1144
    5918:	000afcc0 	call	afcc <__sprint_r>
    591c:	103bb21e 	bne	r2,zero,47e8 <__alt_data_end+0xfffaf0b8>
    5920:	d8c12017 	ldw	r3,1152(sp)
    5924:	d8811f17 	ldw	r2,1148(sp)
    5928:	da000404 	addi	r8,sp,16
    592c:	003fee06 	br	58e8 <__alt_data_end+0xfffb01b8>
    5930:	e088703a 	and	r4,fp,r2
    5934:	203ec01e 	bne	r4,zero,5438 <__alt_data_end+0xfffafd08>
    5938:	dc011f17 	ldw	r16,1148(sp)
    593c:	d9013117 	ldw	r4,1220(sp)
    5940:	40800115 	stw	r2,4(r8)
    5944:	84000044 	addi	r16,r16,1
    5948:	41000015 	stw	r4,0(r8)
    594c:	d8c12015 	stw	r3,1152(sp)
    5950:	dc011f15 	stw	r16,1148(sp)
    5954:	008001c4 	movi	r2,7
    5958:	14000e16 	blt	r2,r16,5994 <___vfprintf_internal_r+0x160c>
    595c:	44400204 	addi	r17,r8,8
    5960:	003ee006 	br	54e4 <__alt_data_end+0xfffafdb4>
    5964:	01000074 	movhi	r4,1
    5968:	210ce084 	addi	r4,r4,13186
    596c:	d9012c15 	stw	r4,1200(sp)
    5970:	d8812c17 	ldw	r2,1200(sp)
    5974:	1cc7883a 	add	r3,r3,r19
    5978:	84000044 	addi	r16,r16,1
    597c:	88800015 	stw	r2,0(r17)
    5980:	8cc00115 	stw	r19,4(r17)
    5984:	d8c12015 	stw	r3,1152(sp)
    5988:	dc011f15 	stw	r16,1148(sp)
    598c:	008001c4 	movi	r2,7
    5990:	143ed30e 	bge	r2,r16,54e0 <__alt_data_end+0xfffafdb0>
    5994:	b809883a 	mov	r4,r23
    5998:	b00b883a 	mov	r5,r22
    599c:	d9811e04 	addi	r6,sp,1144
    59a0:	000afcc0 	call	afcc <__sprint_r>
    59a4:	103b901e 	bne	r2,zero,47e8 <__alt_data_end+0xfffaf0b8>
    59a8:	d8c12017 	ldw	r3,1152(sp)
    59ac:	dc011f17 	ldw	r16,1148(sp)
    59b0:	dc400404 	addi	r17,sp,16
    59b4:	003ecb06 	br	54e4 <__alt_data_end+0xfffafdb4>
    59b8:	b809883a 	mov	r4,r23
    59bc:	b00b883a 	mov	r5,r22
    59c0:	d9811e04 	addi	r6,sp,1144
    59c4:	000afcc0 	call	afcc <__sprint_r>
    59c8:	103b871e 	bne	r2,zero,47e8 <__alt_data_end+0xfffaf0b8>
    59cc:	d8c12017 	ldw	r3,1152(sp)
    59d0:	dc011f17 	ldw	r16,1148(sp)
    59d4:	da000404 	addi	r8,sp,16
    59d8:	003ea206 	br	5464 <__alt_data_end+0xfffafd34>
    59dc:	b809883a 	mov	r4,r23
    59e0:	b00b883a 	mov	r5,r22
    59e4:	d9811e04 	addi	r6,sp,1144
    59e8:	000afcc0 	call	afcc <__sprint_r>
    59ec:	103b7e1e 	bne	r2,zero,47e8 <__alt_data_end+0xfffaf0b8>
    59f0:	d8c12017 	ldw	r3,1152(sp)
    59f4:	dc011f17 	ldw	r16,1148(sp)
    59f8:	dc400404 	addi	r17,sp,16
    59fc:	003ea406 	br	5490 <__alt_data_end+0xfffafd60>
    5a00:	b809883a 	mov	r4,r23
    5a04:	b00b883a 	mov	r5,r22
    5a08:	d9811e04 	addi	r6,sp,1144
    5a0c:	000afcc0 	call	afcc <__sprint_r>
    5a10:	103b751e 	bne	r2,zero,47e8 <__alt_data_end+0xfffaf0b8>
    5a14:	d8c12017 	ldw	r3,1152(sp)
    5a18:	da000404 	addi	r8,sp,16
    5a1c:	003c3706 	br	4afc <__alt_data_end+0xfffaf3cc>
    5a20:	04a5c83a 	sub	r18,zero,r18
    5a24:	9004c03a 	cmpne	r2,r18,zero
    5a28:	056bc83a 	sub	r21,zero,r21
    5a2c:	a8abc83a 	sub	r21,r21,r2
    5a30:	04c00b44 	movi	r19,45
    5a34:	dcc12785 	stb	r19,1182(sp)
    5a38:	da413215 	stw	r9,1224(sp)
    5a3c:	00800044 	movi	r2,1
    5a40:	9546b03a 	or	r3,r18,r21
    5a44:	003bb106 	br	490c <__alt_data_end+0xfffaf1dc>
    5a48:	da013f15 	stw	r8,1276(sp)
    5a4c:	da413e15 	stw	r9,1272(sp)
    5a50:	000ac7c0 	call	ac7c <__fpclassifyd>
    5a54:	da013f17 	ldw	r8,1276(sp)
    5a58:	da413e17 	ldw	r9,1272(sp)
    5a5c:	1000e526 	beq	r2,zero,5df4 <___vfprintf_internal_r+0x1a6c>
    5a60:	04fff7c4 	movi	r19,-33
    5a64:	00bfffc4 	movi	r2,-1
    5a68:	84e6703a 	and	r19,r16,r19
    5a6c:	48822926 	beq	r9,r2,6314 <___vfprintf_internal_r+0x1f8c>
    5a70:	008011c4 	movi	r2,71
    5a74:	98821626 	beq	r19,r2,62d0 <___vfprintf_internal_r+0x1f48>
    5a78:	d9013917 	ldw	r4,1252(sp)
    5a7c:	e0c04014 	ori	r3,fp,256
    5a80:	d8c12d15 	stw	r3,1204(sp)
    5a84:	20021f16 	blt	r4,zero,6304 <___vfprintf_internal_r+0x1f7c>
    5a88:	dc413917 	ldw	r17,1252(sp)
    5a8c:	d8012b05 	stb	zero,1196(sp)
    5a90:	00801984 	movi	r2,102
    5a94:	80814d26 	beq	r16,r2,5fcc <___vfprintf_internal_r+0x1c44>
    5a98:	00801184 	movi	r2,70
    5a9c:	80814b26 	beq	r16,r2,5fcc <___vfprintf_internal_r+0x1c44>
    5aa0:	00801144 	movi	r2,69
    5aa4:	98821d26 	beq	r19,r2,631c <___vfprintf_internal_r+0x1f94>
    5aa8:	482b883a 	mov	r21,r9
    5aac:	d8812604 	addi	r2,sp,1176
    5ab0:	d8800115 	stw	r2,4(sp)
    5ab4:	d9413717 	ldw	r5,1244(sp)
    5ab8:	d8812504 	addi	r2,sp,1172
    5abc:	d8800215 	stw	r2,8(sp)
    5ac0:	d8812104 	addi	r2,sp,1156
    5ac4:	dd400015 	stw	r21,0(sp)
    5ac8:	d8800315 	stw	r2,12(sp)
    5acc:	b809883a 	mov	r4,r23
    5ad0:	880d883a 	mov	r6,r17
    5ad4:	01c00084 	movi	r7,2
    5ad8:	da013f15 	stw	r8,1276(sp)
    5adc:	da413e15 	stw	r9,1272(sp)
    5ae0:	00068000 	call	6800 <_dtoa_r>
    5ae4:	d8813115 	stw	r2,1220(sp)
    5ae8:	008019c4 	movi	r2,103
    5aec:	da013f17 	ldw	r8,1276(sp)
    5af0:	da413e17 	ldw	r9,1272(sp)
    5af4:	80800226 	beq	r16,r2,5b00 <___vfprintf_internal_r+0x1778>
    5af8:	008011c4 	movi	r2,71
    5afc:	8081451e 	bne	r16,r2,6014 <___vfprintf_internal_r+0x1c8c>
    5b00:	e080004c 	andi	r2,fp,1
    5b04:	10021e26 	beq	r2,zero,6380 <___vfprintf_internal_r+0x1ff8>
    5b08:	d8c13117 	ldw	r3,1220(sp)
    5b0c:	1d55883a 	add	r10,r3,r21
    5b10:	d9013717 	ldw	r4,1244(sp)
    5b14:	880b883a 	mov	r5,r17
    5b18:	000d883a 	mov	r6,zero
    5b1c:	000f883a 	mov	r7,zero
    5b20:	da013f15 	stw	r8,1276(sp)
    5b24:	da413e15 	stw	r9,1272(sp)
    5b28:	da813d15 	stw	r10,1268(sp)
    5b2c:	000ed240 	call	ed24 <__eqdf2>
    5b30:	da013f17 	ldw	r8,1276(sp)
    5b34:	da413e17 	ldw	r9,1272(sp)
    5b38:	da813d17 	ldw	r10,1268(sp)
    5b3c:	1001a126 	beq	r2,zero,61c4 <___vfprintf_internal_r+0x1e3c>
    5b40:	d8812117 	ldw	r2,1156(sp)
    5b44:	1280062e 	bgeu	r2,r10,5b60 <___vfprintf_internal_r+0x17d8>
    5b48:	01000c04 	movi	r4,48
    5b4c:	10c00044 	addi	r3,r2,1
    5b50:	d8c12115 	stw	r3,1156(sp)
    5b54:	11000005 	stb	r4,0(r2)
    5b58:	d8812117 	ldw	r2,1156(sp)
    5b5c:	12bffb36 	bltu	r2,r10,5b4c <__alt_data_end+0xfffb041c>
    5b60:	d8c13117 	ldw	r3,1220(sp)
    5b64:	10c5c83a 	sub	r2,r2,r3
    5b68:	d8813315 	stw	r2,1228(sp)
    5b6c:	008011c4 	movi	r2,71
    5b70:	98818926 	beq	r19,r2,6198 <___vfprintf_internal_r+0x1e10>
    5b74:	00801944 	movi	r2,101
    5b78:	14023c0e 	bge	r2,r16,646c <___vfprintf_internal_r+0x20e4>
    5b7c:	d8c12617 	ldw	r3,1176(sp)
    5b80:	00801984 	movi	r2,102
    5b84:	d8c13415 	stw	r3,1232(sp)
    5b88:	8081ef26 	beq	r16,r2,6348 <___vfprintf_internal_r+0x1fc0>
    5b8c:	d8c13417 	ldw	r3,1232(sp)
    5b90:	d9013317 	ldw	r4,1228(sp)
    5b94:	1901e316 	blt	r3,r4,6324 <___vfprintf_internal_r+0x1f9c>
    5b98:	e080004c 	andi	r2,fp,1
    5b9c:	1001f426 	beq	r2,zero,6370 <___vfprintf_internal_r+0x1fe8>
    5ba0:	d8c13417 	ldw	r3,1232(sp)
    5ba4:	1c400044 	addi	r17,r3,1
    5ba8:	8839883a 	mov	fp,r17
    5bac:	8801e416 	blt	r17,zero,6340 <___vfprintf_internal_r+0x1fb8>
    5bb0:	dd412b07 	ldb	r21,1196(sp)
    5bb4:	a801701e 	bne	r21,zero,6178 <___vfprintf_internal_r+0x1df0>
    5bb8:	df012b15 	stw	fp,1196(sp)
    5bbc:	dcc12783 	ldbu	r19,1182(sp)
    5bc0:	df012d17 	ldw	fp,1204(sp)
    5bc4:	d8013215 	stw	zero,1224(sp)
    5bc8:	dc812d15 	stw	r18,1204(sp)
    5bcc:	003b6e06 	br	4988 <__alt_data_end+0xfffaf258>
    5bd0:	e080040c 	andi	r2,fp,16
    5bd4:	1000b51e 	bne	r2,zero,5eac <___vfprintf_internal_r+0x1b24>
    5bd8:	e080100c 	andi	r2,fp,64
    5bdc:	10015b26 	beq	r2,zero,614c <___vfprintf_internal_r+0x1dc4>
    5be0:	d9012d17 	ldw	r4,1204(sp)
    5be4:	d9412f17 	ldw	r5,1212(sp)
    5be8:	20800017 	ldw	r2,0(r4)
    5bec:	21000104 	addi	r4,r4,4
    5bf0:	d9012d15 	stw	r4,1204(sp)
    5bf4:	1140000d 	sth	r5,0(r2)
    5bf8:	003a2006 	br	447c <__alt_data_end+0xfffaed4c>
    5bfc:	e0c0100c 	andi	r3,fp,64
    5c00:	1800a226 	beq	r3,zero,5e8c <___vfprintf_internal_r+0x1b04>
    5c04:	d8c12d17 	ldw	r3,1204(sp)
    5c08:	1480000b 	ldhu	r18,0(r2)
    5c0c:	002b883a 	mov	r21,zero
    5c10:	18c00104 	addi	r3,r3,4
    5c14:	d8c12d15 	stw	r3,1204(sp)
    5c18:	0005883a 	mov	r2,zero
    5c1c:	9007883a 	mov	r3,r18
    5c20:	003c6906 	br	4dc8 <__alt_data_end+0xfffaf698>
    5c24:	e0c0100c 	andi	r3,fp,64
    5c28:	18009026 	beq	r3,zero,5e6c <___vfprintf_internal_r+0x1ae4>
    5c2c:	1480000b 	ldhu	r18,0(r2)
    5c30:	d8812d17 	ldw	r2,1204(sp)
    5c34:	002b883a 	mov	r21,zero
    5c38:	9007883a 	mov	r3,r18
    5c3c:	10800104 	addi	r2,r2,4
    5c40:	d8812d15 	stw	r2,1204(sp)
    5c44:	00800044 	movi	r2,1
    5c48:	003c5f06 	br	4dc8 <__alt_data_end+0xfffaf698>
    5c4c:	e0c0100c 	andi	r3,fp,64
    5c50:	18008026 	beq	r3,zero,5e54 <___vfprintf_internal_r+0x1acc>
    5c54:	d9012d17 	ldw	r4,1204(sp)
    5c58:	1480000b 	ldhu	r18,0(r2)
    5c5c:	002b883a 	mov	r21,zero
    5c60:	21000104 	addi	r4,r4,4
    5c64:	d9012d15 	stw	r4,1204(sp)
    5c68:	003c7906 	br	4e50 <__alt_data_end+0xfffaf720>
    5c6c:	e080100c 	andi	r2,fp,64
    5c70:	10007126 	beq	r2,zero,5e38 <___vfprintf_internal_r+0x1ab0>
    5c74:	1c80000f 	ldh	r18,0(r3)
    5c78:	d8812d17 	ldw	r2,1204(sp)
    5c7c:	902bd7fa 	srai	r21,r18,31
    5c80:	10800104 	addi	r2,r2,4
    5c84:	d8812d15 	stw	r2,1204(sp)
    5c88:	a805883a 	mov	r2,r21
    5c8c:	003b1a06 	br	48f8 <__alt_data_end+0xfffaf1c8>
    5c90:	e4000007 	ldb	r16,0(fp)
    5c94:	e005883a 	mov	r2,fp
    5c98:	003a2306 	br	4528 <__alt_data_end+0xfffaedf8>
    5c9c:	00800084 	movi	r2,2
    5ca0:	003c4906 	br	4dc8 <__alt_data_end+0xfffaf698>
    5ca4:	01000074 	movhi	r4,1
    5ca8:	210ce084 	addi	r4,r4,13186
    5cac:	d9012c15 	stw	r4,1200(sp)
    5cb0:	d9012c17 	ldw	r4,1200(sp)
    5cb4:	1c47883a 	add	r3,r3,r17
    5cb8:	10800044 	addi	r2,r2,1
    5cbc:	41000015 	stw	r4,0(r8)
    5cc0:	44400115 	stw	r17,4(r8)
    5cc4:	d8c12015 	stw	r3,1152(sp)
    5cc8:	d8811f15 	stw	r2,1148(sp)
    5ccc:	010001c4 	movi	r4,7
    5cd0:	20becc16 	blt	r4,r2,5804 <__alt_data_end+0xfffb00d4>
    5cd4:	42000204 	addi	r8,r8,8
    5cd8:	003ed106 	br	5820 <__alt_data_end+0xfffb00f0>
    5cdc:	01000074 	movhi	r4,1
    5ce0:	210ce084 	addi	r4,r4,13186
    5ce4:	d9012c15 	stw	r4,1200(sp)
    5ce8:	003ba306 	br	4b78 <__alt_data_end+0xfffaf448>
    5cec:	b809883a 	mov	r4,r23
    5cf0:	b00b883a 	mov	r5,r22
    5cf4:	d9811e04 	addi	r6,sp,1144
    5cf8:	000afcc0 	call	afcc <__sprint_r>
    5cfc:	103aba1e 	bne	r2,zero,47e8 <__alt_data_end+0xfffaf0b8>
    5d00:	d8c12017 	ldw	r3,1152(sp)
    5d04:	da000404 	addi	r8,sp,16
    5d08:	003d6c06 	br	52bc <__alt_data_end+0xfffafb8c>
    5d0c:	d8811f17 	ldw	r2,1148(sp)
    5d10:	01400074 	movhi	r5,1
    5d14:	01000044 	movi	r4,1
    5d18:	18c00044 	addi	r3,r3,1
    5d1c:	10800044 	addi	r2,r2,1
    5d20:	294ce004 	addi	r5,r5,13184
    5d24:	41000115 	stw	r4,4(r8)
    5d28:	41400015 	stw	r5,0(r8)
    5d2c:	d8c12015 	stw	r3,1152(sp)
    5d30:	d8811f15 	stw	r2,1148(sp)
    5d34:	010001c4 	movi	r4,7
    5d38:	20806716 	blt	r4,r2,5ed8 <___vfprintf_internal_r+0x1b50>
    5d3c:	42000204 	addi	r8,r8,8
    5d40:	8000041e 	bne	r16,zero,5d54 <___vfprintf_internal_r+0x19cc>
    5d44:	d8813317 	ldw	r2,1228(sp)
    5d48:	1000021e 	bne	r2,zero,5d54 <___vfprintf_internal_r+0x19cc>
    5d4c:	e080004c 	andi	r2,fp,1
    5d50:	103ba026 	beq	r2,zero,4bd4 <__alt_data_end+0xfffaf4a4>
    5d54:	d9013817 	ldw	r4,1248(sp)
    5d58:	d8811f17 	ldw	r2,1148(sp)
    5d5c:	d9413517 	ldw	r5,1236(sp)
    5d60:	1907883a 	add	r3,r3,r4
    5d64:	10800044 	addi	r2,r2,1
    5d68:	41000115 	stw	r4,4(r8)
    5d6c:	41400015 	stw	r5,0(r8)
    5d70:	d8c12015 	stw	r3,1152(sp)
    5d74:	d8811f15 	stw	r2,1148(sp)
    5d78:	010001c4 	movi	r4,7
    5d7c:	20815716 	blt	r4,r2,62dc <___vfprintf_internal_r+0x1f54>
    5d80:	42000204 	addi	r8,r8,8
    5d84:	0421c83a 	sub	r16,zero,r16
    5d88:	0400810e 	bge	zero,r16,5f90 <___vfprintf_internal_r+0x1c08>
    5d8c:	04400404 	movi	r17,16
    5d90:	8c00bd0e 	bge	r17,r16,6088 <___vfprintf_internal_r+0x1d00>
    5d94:	01400074 	movhi	r5,1
    5d98:	294ce084 	addi	r5,r5,13186
    5d9c:	d9412c15 	stw	r5,1200(sp)
    5da0:	04c001c4 	movi	r19,7
    5da4:	00000306 	br	5db4 <___vfprintf_internal_r+0x1a2c>
    5da8:	42000204 	addi	r8,r8,8
    5dac:	843ffc04 	addi	r16,r16,-16
    5db0:	8c00b80e 	bge	r17,r16,6094 <___vfprintf_internal_r+0x1d0c>
    5db4:	18c00404 	addi	r3,r3,16
    5db8:	10800044 	addi	r2,r2,1
    5dbc:	45000015 	stw	r20,0(r8)
    5dc0:	44400115 	stw	r17,4(r8)
    5dc4:	d8c12015 	stw	r3,1152(sp)
    5dc8:	d8811f15 	stw	r2,1148(sp)
    5dcc:	98bff60e 	bge	r19,r2,5da8 <__alt_data_end+0xfffb0678>
    5dd0:	b809883a 	mov	r4,r23
    5dd4:	b00b883a 	mov	r5,r22
    5dd8:	d9811e04 	addi	r6,sp,1144
    5ddc:	000afcc0 	call	afcc <__sprint_r>
    5de0:	103a811e 	bne	r2,zero,47e8 <__alt_data_end+0xfffaf0b8>
    5de4:	d8c12017 	ldw	r3,1152(sp)
    5de8:	d8811f17 	ldw	r2,1148(sp)
    5dec:	da000404 	addi	r8,sp,16
    5df0:	003fee06 	br	5dac <__alt_data_end+0xfffb067c>
    5df4:	008011c4 	movi	r2,71
    5df8:	1400db16 	blt	r2,r16,6168 <___vfprintf_internal_r+0x1de0>
    5dfc:	01000074 	movhi	r4,1
    5e00:	210cd204 	addi	r4,r4,13128
    5e04:	d9013115 	stw	r4,1220(sp)
    5e08:	00c000c4 	movi	r3,3
    5e0c:	00bfdfc4 	movi	r2,-129
    5e10:	d8c12b15 	stw	r3,1196(sp)
    5e14:	e0b8703a 	and	fp,fp,r2
    5e18:	dcc12783 	ldbu	r19,1182(sp)
    5e1c:	dc812d15 	stw	r18,1204(sp)
    5e20:	1823883a 	mov	r17,r3
    5e24:	d8013215 	stw	zero,1224(sp)
    5e28:	d8013415 	stw	zero,1232(sp)
    5e2c:	003ad606 	br	4988 <__alt_data_end+0xfffaf258>
    5e30:	4823883a 	mov	r17,r9
    5e34:	003cc906 	br	515c <__alt_data_end+0xfffafa2c>
    5e38:	1c800017 	ldw	r18,0(r3)
    5e3c:	d8c12d17 	ldw	r3,1204(sp)
    5e40:	902bd7fa 	srai	r21,r18,31
    5e44:	18c00104 	addi	r3,r3,4
    5e48:	d8c12d15 	stw	r3,1204(sp)
    5e4c:	a805883a 	mov	r2,r21
    5e50:	003aa906 	br	48f8 <__alt_data_end+0xfffaf1c8>
    5e54:	d9412d17 	ldw	r5,1204(sp)
    5e58:	14800017 	ldw	r18,0(r2)
    5e5c:	002b883a 	mov	r21,zero
    5e60:	29400104 	addi	r5,r5,4
    5e64:	d9412d15 	stw	r5,1204(sp)
    5e68:	003bf906 	br	4e50 <__alt_data_end+0xfffaf720>
    5e6c:	d8c12d17 	ldw	r3,1204(sp)
    5e70:	14800017 	ldw	r18,0(r2)
    5e74:	002b883a 	mov	r21,zero
    5e78:	18c00104 	addi	r3,r3,4
    5e7c:	d8c12d15 	stw	r3,1204(sp)
    5e80:	00800044 	movi	r2,1
    5e84:	9007883a 	mov	r3,r18
    5e88:	003bcf06 	br	4dc8 <__alt_data_end+0xfffaf698>
    5e8c:	d9012d17 	ldw	r4,1204(sp)
    5e90:	14800017 	ldw	r18,0(r2)
    5e94:	002b883a 	mov	r21,zero
    5e98:	21000104 	addi	r4,r4,4
    5e9c:	d9012d15 	stw	r4,1204(sp)
    5ea0:	0005883a 	mov	r2,zero
    5ea4:	9007883a 	mov	r3,r18
    5ea8:	003bc706 	br	4dc8 <__alt_data_end+0xfffaf698>
    5eac:	d9412d17 	ldw	r5,1204(sp)
    5eb0:	d8c12f17 	ldw	r3,1212(sp)
    5eb4:	28800017 	ldw	r2,0(r5)
    5eb8:	29400104 	addi	r5,r5,4
    5ebc:	d9412d15 	stw	r5,1204(sp)
    5ec0:	10c00015 	stw	r3,0(r2)
    5ec4:	00396d06 	br	447c <__alt_data_end+0xfffaed4c>
    5ec8:	01000074 	movhi	r4,1
    5ecc:	210cd004 	addi	r4,r4,13120
    5ed0:	d9013115 	stw	r4,1220(sp)
    5ed4:	003ba206 	br	4d60 <__alt_data_end+0xfffaf630>
    5ed8:	b809883a 	mov	r4,r23
    5edc:	b00b883a 	mov	r5,r22
    5ee0:	d9811e04 	addi	r6,sp,1144
    5ee4:	000afcc0 	call	afcc <__sprint_r>
    5ee8:	103a3f1e 	bne	r2,zero,47e8 <__alt_data_end+0xfffaf0b8>
    5eec:	dc012617 	ldw	r16,1176(sp)
    5ef0:	d8c12017 	ldw	r3,1152(sp)
    5ef4:	da000404 	addi	r8,sp,16
    5ef8:	003f9106 	br	5d40 <__alt_data_end+0xfffb0610>
    5efc:	e0800044 	addi	r2,fp,1
    5f00:	9cc00814 	ori	r19,r19,32
    5f04:	e4000047 	ldb	r16,1(fp)
    5f08:	00398706 	br	4528 <__alt_data_end+0xfffaedf8>
    5f0c:	d8812e17 	ldw	r2,1208(sp)
    5f10:	d8c12d15 	stw	r3,1204(sp)
    5f14:	0085c83a 	sub	r2,zero,r2
    5f18:	d8812e15 	stw	r2,1208(sp)
    5f1c:	e005883a 	mov	r2,fp
    5f20:	003a3a06 	br	480c <__alt_data_end+0xfffaf0dc>
    5f24:	b809883a 	mov	r4,r23
    5f28:	b00b883a 	mov	r5,r22
    5f2c:	d9811e04 	addi	r6,sp,1144
    5f30:	000afcc0 	call	afcc <__sprint_r>
    5f34:	103a2c1e 	bne	r2,zero,47e8 <__alt_data_end+0xfffaf0b8>
    5f38:	d8c12017 	ldw	r3,1152(sp)
    5f3c:	da000404 	addi	r8,sp,16
    5f40:	003cf006 	br	5304 <__alt_data_end+0xfffafbd4>
    5f44:	d8c12817 	ldw	r3,1184(sp)
    5f48:	d9013117 	ldw	r4,1220(sp)
    5f4c:	1923c83a 	sub	r17,r3,r4
    5f50:	003a8806 	br	4974 <__alt_data_end+0xfffaf244>
    5f54:	da013f15 	stw	r8,1276(sp)
    5f58:	00042f00 	call	42f0 <strlen>
    5f5c:	1023883a 	mov	r17,r2
    5f60:	da013f17 	ldw	r8,1276(sp)
    5f64:	883c7f0e 	bge	r17,zero,5164 <__alt_data_end+0xfffafa34>
    5f68:	0005883a 	mov	r2,zero
    5f6c:	003c7d06 	br	5164 <__alt_data_end+0xfffafa34>
    5f70:	b809883a 	mov	r4,r23
    5f74:	b00b883a 	mov	r5,r22
    5f78:	d9811e04 	addi	r6,sp,1144
    5f7c:	000afcc0 	call	afcc <__sprint_r>
    5f80:	103a191e 	bne	r2,zero,47e8 <__alt_data_end+0xfffaf0b8>
    5f84:	d8c12017 	ldw	r3,1152(sp)
    5f88:	d8811f17 	ldw	r2,1148(sp)
    5f8c:	da000404 	addi	r8,sp,16
    5f90:	d9413317 	ldw	r5,1228(sp)
    5f94:	d9013117 	ldw	r4,1220(sp)
    5f98:	10800044 	addi	r2,r2,1
    5f9c:	28c7883a 	add	r3,r5,r3
    5fa0:	41000015 	stw	r4,0(r8)
    5fa4:	41400115 	stw	r5,4(r8)
    5fa8:	d8c12015 	stw	r3,1152(sp)
    5fac:	d8811f15 	stw	r2,1148(sp)
    5fb0:	010001c4 	movi	r4,7
    5fb4:	20bb060e 	bge	r4,r2,4bd0 <__alt_data_end+0xfffaf4a0>
    5fb8:	003d6206 	br	5544 <__alt_data_end+0xfffafe14>
    5fbc:	01000074 	movhi	r4,1
    5fc0:	210ce484 	addi	r4,r4,13202
    5fc4:	d9013615 	stw	r4,1240(sp)
    5fc8:	003aa306 	br	4a58 <__alt_data_end+0xfffaf328>
    5fcc:	d8812604 	addi	r2,sp,1176
    5fd0:	d8800115 	stw	r2,4(sp)
    5fd4:	d9413717 	ldw	r5,1244(sp)
    5fd8:	d8812504 	addi	r2,sp,1172
    5fdc:	d8800215 	stw	r2,8(sp)
    5fe0:	d8812104 	addi	r2,sp,1156
    5fe4:	da400015 	stw	r9,0(sp)
    5fe8:	d8800315 	stw	r2,12(sp)
    5fec:	b809883a 	mov	r4,r23
    5ff0:	880d883a 	mov	r6,r17
    5ff4:	01c000c4 	movi	r7,3
    5ff8:	da013f15 	stw	r8,1276(sp)
    5ffc:	da413e15 	stw	r9,1272(sp)
    6000:	00068000 	call	6800 <_dtoa_r>
    6004:	da413e17 	ldw	r9,1272(sp)
    6008:	da013f17 	ldw	r8,1276(sp)
    600c:	d8813115 	stw	r2,1220(sp)
    6010:	482b883a 	mov	r21,r9
    6014:	d8c13117 	ldw	r3,1220(sp)
    6018:	00801184 	movi	r2,70
    601c:	1d55883a 	add	r10,r3,r21
    6020:	98bebb1e 	bne	r19,r2,5b10 <__alt_data_end+0xfffb03e0>
    6024:	19000007 	ldb	r4,0(r3)
    6028:	00800c04 	movi	r2,48
    602c:	2080dd26 	beq	r4,r2,63a4 <___vfprintf_internal_r+0x201c>
    6030:	d8c12617 	ldw	r3,1176(sp)
    6034:	50d5883a 	add	r10,r10,r3
    6038:	003eb506 	br	5b10 <__alt_data_end+0xfffb03e0>
    603c:	0023883a 	mov	r17,zero
    6040:	003d9b06 	br	56b0 <__alt_data_end+0xfffaff80>
    6044:	b809883a 	mov	r4,r23
    6048:	b00b883a 	mov	r5,r22
    604c:	d9811e04 	addi	r6,sp,1144
    6050:	000afcc0 	call	afcc <__sprint_r>
    6054:	1039e41e 	bne	r2,zero,47e8 <__alt_data_end+0xfffaf0b8>
    6058:	d8c12017 	ldw	r3,1152(sp)
    605c:	da000404 	addi	r8,sp,16
    6060:	003d9206 	br	56ac <__alt_data_end+0xfffaff7c>
    6064:	b809883a 	mov	r4,r23
    6068:	b00b883a 	mov	r5,r22
    606c:	d9811e04 	addi	r6,sp,1144
    6070:	000afcc0 	call	afcc <__sprint_r>
    6074:	1039dc1e 	bne	r2,zero,47e8 <__alt_data_end+0xfffaf0b8>
    6078:	d8812617 	ldw	r2,1176(sp)
    607c:	d8c12017 	ldw	r3,1152(sp)
    6080:	da000404 	addi	r8,sp,16
    6084:	003dfb06 	br	5874 <__alt_data_end+0xfffb0144>
    6088:	01000074 	movhi	r4,1
    608c:	210ce084 	addi	r4,r4,13186
    6090:	d9012c15 	stw	r4,1200(sp)
    6094:	d9012c17 	ldw	r4,1200(sp)
    6098:	1c07883a 	add	r3,r3,r16
    609c:	10800044 	addi	r2,r2,1
    60a0:	41000015 	stw	r4,0(r8)
    60a4:	44000115 	stw	r16,4(r8)
    60a8:	d8c12015 	stw	r3,1152(sp)
    60ac:	d8811f15 	stw	r2,1148(sp)
    60b0:	010001c4 	movi	r4,7
    60b4:	20bfae16 	blt	r4,r2,5f70 <__alt_data_end+0xfffb0840>
    60b8:	42000204 	addi	r8,r8,8
    60bc:	003fb406 	br	5f90 <__alt_data_end+0xfffb0860>
    60c0:	0021883a 	mov	r16,zero
    60c4:	003dfd06 	br	58bc <__alt_data_end+0xfffb018c>
    60c8:	01400074 	movhi	r5,1
    60cc:	294ce484 	addi	r5,r5,13202
    60d0:	d9413615 	stw	r5,1240(sp)
    60d4:	003ae306 	br	4c64 <__alt_data_end+0xfffaf534>
    60d8:	b809883a 	mov	r4,r23
    60dc:	b00b883a 	mov	r5,r22
    60e0:	d9811e04 	addi	r6,sp,1144
    60e4:	000afcc0 	call	afcc <__sprint_r>
    60e8:	1039bf1e 	bne	r2,zero,47e8 <__alt_data_end+0xfffaf0b8>
    60ec:	d8812617 	ldw	r2,1176(sp)
    60f0:	d9413317 	ldw	r5,1228(sp)
    60f4:	d8c12017 	ldw	r3,1152(sp)
    60f8:	da000404 	addi	r8,sp,16
    60fc:	2885c83a 	sub	r2,r5,r2
    6100:	003ded06 	br	58b8 <__alt_data_end+0xfffb0188>
    6104:	00800184 	movi	r2,6
    6108:	1240012e 	bgeu	r2,r9,6110 <___vfprintf_internal_r+0x1d88>
    610c:	1013883a 	mov	r9,r2
    6110:	4823883a 	mov	r17,r9
    6114:	4805883a 	mov	r2,r9
    6118:	4800b216 	blt	r9,zero,63e4 <___vfprintf_internal_r+0x205c>
    611c:	01400074 	movhi	r5,1
    6120:	294cde04 	addi	r5,r5,13176
    6124:	d8812b15 	stw	r2,1196(sp)
    6128:	dc812d15 	stw	r18,1204(sp)
    612c:	d8013215 	stw	zero,1224(sp)
    6130:	d8013415 	stw	zero,1232(sp)
    6134:	d9413115 	stw	r5,1220(sp)
    6138:	0005883a 	mov	r2,zero
    613c:	003a1906 	br	49a4 <__alt_data_end+0xfffaf274>
    6140:	04c00b44 	movi	r19,45
    6144:	dcc12785 	stb	r19,1182(sp)
    6148:	003b0006 	br	4d4c <__alt_data_end+0xfffaf61c>
    614c:	d8c12d17 	ldw	r3,1204(sp)
    6150:	d9012f17 	ldw	r4,1212(sp)
    6154:	18800017 	ldw	r2,0(r3)
    6158:	18c00104 	addi	r3,r3,4
    615c:	d8c12d15 	stw	r3,1204(sp)
    6160:	11000015 	stw	r4,0(r2)
    6164:	0038c506 	br	447c <__alt_data_end+0xfffaed4c>
    6168:	01400074 	movhi	r5,1
    616c:	294cd304 	addi	r5,r5,13132
    6170:	d9413115 	stw	r5,1220(sp)
    6174:	003f2406 	br	5e08 <__alt_data_end+0xfffb06d8>
    6178:	00800b44 	movi	r2,45
    617c:	d8812785 	stb	r2,1182(sp)
    6180:	df012b15 	stw	fp,1196(sp)
    6184:	d8013215 	stw	zero,1224(sp)
    6188:	df012d17 	ldw	fp,1204(sp)
    618c:	00800b44 	movi	r2,45
    6190:	dc812d15 	stw	r18,1204(sp)
    6194:	003a0006 	br	4998 <__alt_data_end+0xfffaf268>
    6198:	d8c12617 	ldw	r3,1176(sp)
    619c:	00bfff44 	movi	r2,-3
    61a0:	18800a16 	blt	r3,r2,61cc <___vfprintf_internal_r+0x1e44>
    61a4:	48c00916 	blt	r9,r3,61cc <___vfprintf_internal_r+0x1e44>
    61a8:	d8c13415 	stw	r3,1232(sp)
    61ac:	040019c4 	movi	r16,103
    61b0:	003e7606 	br	5b8c <__alt_data_end+0xfffb045c>
    61b4:	01000074 	movhi	r4,1
    61b8:	210ce084 	addi	r4,r4,13186
    61bc:	d9012c15 	stw	r4,1200(sp)
    61c0:	003c8e06 	br	53fc <__alt_data_end+0xfffafccc>
    61c4:	5005883a 	mov	r2,r10
    61c8:	003e6506 	br	5b60 <__alt_data_end+0xfffb0430>
    61cc:	843fff84 	addi	r16,r16,-2
    61d0:	1d7fffc4 	addi	r21,r3,-1
    61d4:	dd412615 	stw	r21,1176(sp)
    61d8:	dc0122c5 	stb	r16,1163(sp)
    61dc:	a8009216 	blt	r21,zero,6428 <___vfprintf_internal_r+0x20a0>
    61e0:	00800ac4 	movi	r2,43
    61e4:	d8812305 	stb	r2,1164(sp)
    61e8:	00800244 	movi	r2,9
    61ec:	1540660e 	bge	r2,r21,6388 <___vfprintf_internal_r+0x2000>
    61f0:	dcc122c4 	addi	r19,sp,1163
    61f4:	dc012c15 	stw	r16,1200(sp)
    61f8:	4023883a 	mov	r17,r8
    61fc:	9821883a 	mov	r16,r19
    6200:	a809883a 	mov	r4,r21
    6204:	01400284 	movi	r5,10
    6208:	00038b00 	call	38b0 <__modsi3>
    620c:	10800c04 	addi	r2,r2,48
    6210:	843fffc4 	addi	r16,r16,-1
    6214:	a809883a 	mov	r4,r21
    6218:	01400284 	movi	r5,10
    621c:	80800005 	stb	r2,0(r16)
    6220:	000385c0 	call	385c <__divsi3>
    6224:	01000244 	movi	r4,9
    6228:	102b883a 	mov	r21,r2
    622c:	20bff416 	blt	r4,r2,6200 <__alt_data_end+0xfffb0ad0>
    6230:	8811883a 	mov	r8,r17
    6234:	10800c04 	addi	r2,r2,48
    6238:	8023883a 	mov	r17,r16
    623c:	897fffc4 	addi	r5,r17,-1
    6240:	88bfffc5 	stb	r2,-1(r17)
    6244:	dc012c17 	ldw	r16,1200(sp)
    6248:	2cc08a2e 	bgeu	r5,r19,6474 <___vfprintf_internal_r+0x20ec>
    624c:	d9812384 	addi	r6,sp,1166
    6250:	344dc83a 	sub	r6,r6,r17
    6254:	d9012344 	addi	r4,sp,1165
    6258:	998d883a 	add	r6,r19,r6
    625c:	00000106 	br	6264 <___vfprintf_internal_r+0x1edc>
    6260:	28800003 	ldbu	r2,0(r5)
    6264:	20800005 	stb	r2,0(r4)
    6268:	21000044 	addi	r4,r4,1
    626c:	29400044 	addi	r5,r5,1
    6270:	21bffb1e 	bne	r4,r6,6260 <__alt_data_end+0xfffb0b30>
    6274:	d8812304 	addi	r2,sp,1164
    6278:	1445c83a 	sub	r2,r2,r17
    627c:	d9412344 	addi	r5,sp,1165
    6280:	2885883a 	add	r2,r5,r2
    6284:	14e7c83a 	sub	r19,r2,r19
    6288:	d8813317 	ldw	r2,1228(sp)
    628c:	d8c13317 	ldw	r3,1228(sp)
    6290:	dcc13a15 	stw	r19,1256(sp)
    6294:	14e3883a 	add	r17,r2,r19
    6298:	00800044 	movi	r2,1
    629c:	10c0550e 	bge	r2,r3,63f4 <___vfprintf_internal_r+0x206c>
    62a0:	8c400044 	addi	r17,r17,1
    62a4:	8839883a 	mov	fp,r17
    62a8:	88005016 	blt	r17,zero,63ec <___vfprintf_internal_r+0x2064>
    62ac:	d8013415 	stw	zero,1232(sp)
    62b0:	003e3f06 	br	5bb0 <__alt_data_end+0xfffb0480>
    62b4:	da412b15 	stw	r9,1196(sp)
    62b8:	dcc12783 	ldbu	r19,1182(sp)
    62bc:	4823883a 	mov	r17,r9
    62c0:	dc812d15 	stw	r18,1204(sp)
    62c4:	d8013215 	stw	zero,1224(sp)
    62c8:	d8013415 	stw	zero,1232(sp)
    62cc:	0039ae06 	br	4988 <__alt_data_end+0xfffaf258>
    62d0:	483de91e 	bne	r9,zero,5a78 <__alt_data_end+0xfffb0348>
    62d4:	8813883a 	mov	r9,r17
    62d8:	003de706 	br	5a78 <__alt_data_end+0xfffb0348>
    62dc:	b809883a 	mov	r4,r23
    62e0:	b00b883a 	mov	r5,r22
    62e4:	d9811e04 	addi	r6,sp,1144
    62e8:	000afcc0 	call	afcc <__sprint_r>
    62ec:	10393e1e 	bne	r2,zero,47e8 <__alt_data_end+0xfffaf0b8>
    62f0:	dc012617 	ldw	r16,1176(sp)
    62f4:	d8c12017 	ldw	r3,1152(sp)
    62f8:	d8811f17 	ldw	r2,1148(sp)
    62fc:	da000404 	addi	r8,sp,16
    6300:	003ea006 	br	5d84 <__alt_data_end+0xfffb0654>
    6304:	00c00b44 	movi	r3,45
    6308:	2460003c 	xorhi	r17,r4,32768
    630c:	d8c12b05 	stb	r3,1196(sp)
    6310:	003ddf06 	br	5a90 <__alt_data_end+0xfffb0360>
    6314:	02400184 	movi	r9,6
    6318:	003dd706 	br	5a78 <__alt_data_end+0xfffb0348>
    631c:	4d400044 	addi	r21,r9,1
    6320:	003de206 	br	5aac <__alt_data_end+0xfffb037c>
    6324:	d8c13417 	ldw	r3,1232(sp)
    6328:	00c0490e 	bge	zero,r3,6450 <___vfprintf_internal_r+0x20c8>
    632c:	04400044 	movi	r17,1
    6330:	d9013317 	ldw	r4,1228(sp)
    6334:	8923883a 	add	r17,r17,r4
    6338:	8839883a 	mov	fp,r17
    633c:	883e1c0e 	bge	r17,zero,5bb0 <__alt_data_end+0xfffb0480>
    6340:	0039883a 	mov	fp,zero
    6344:	003e1a06 	br	5bb0 <__alt_data_end+0xfffb0480>
    6348:	00c03b0e 	bge	zero,r3,6438 <___vfprintf_internal_r+0x20b0>
    634c:	4800021e 	bne	r9,zero,6358 <___vfprintf_internal_r+0x1fd0>
    6350:	e080004c 	andi	r2,fp,1
    6354:	10000626 	beq	r2,zero,6370 <___vfprintf_internal_r+0x1fe8>
    6358:	d8c13417 	ldw	r3,1232(sp)
    635c:	4a400044 	addi	r9,r9,1
    6360:	1a63883a 	add	r17,r3,r9
    6364:	8839883a 	mov	fp,r17
    6368:	883e110e 	bge	r17,zero,5bb0 <__alt_data_end+0xfffb0480>
    636c:	003ff406 	br	6340 <__alt_data_end+0xfffb0c10>
    6370:	1839883a 	mov	fp,r3
    6374:	18004116 	blt	r3,zero,647c <___vfprintf_internal_r+0x20f4>
    6378:	dc413417 	ldw	r17,1232(sp)
    637c:	003e0c06 	br	5bb0 <__alt_data_end+0xfffb0480>
    6380:	d8812117 	ldw	r2,1156(sp)
    6384:	003df606 	br	5b60 <__alt_data_end+0xfffb0430>
    6388:	00800c04 	movi	r2,48
    638c:	a8c00c04 	addi	r3,r21,48
    6390:	d8812345 	stb	r2,1165(sp)
    6394:	d8c12385 	stb	r3,1166(sp)
    6398:	d88123c4 	addi	r2,sp,1167
    639c:	dcc122c4 	addi	r19,sp,1163
    63a0:	003fb806 	br	6284 <__alt_data_end+0xfffb0b54>
    63a4:	d9013717 	ldw	r4,1244(sp)
    63a8:	880b883a 	mov	r5,r17
    63ac:	000d883a 	mov	r6,zero
    63b0:	000f883a 	mov	r7,zero
    63b4:	da013f15 	stw	r8,1276(sp)
    63b8:	da413e15 	stw	r9,1272(sp)
    63bc:	da813d15 	stw	r10,1268(sp)
    63c0:	000ed240 	call	ed24 <__eqdf2>
    63c4:	da013f17 	ldw	r8,1276(sp)
    63c8:	da413e17 	ldw	r9,1272(sp)
    63cc:	da813d17 	ldw	r10,1268(sp)
    63d0:	103f1726 	beq	r2,zero,6030 <__alt_data_end+0xfffb0900>
    63d4:	00800044 	movi	r2,1
    63d8:	1547c83a 	sub	r3,r2,r21
    63dc:	d8c12615 	stw	r3,1176(sp)
    63e0:	003f1406 	br	6034 <__alt_data_end+0xfffb0904>
    63e4:	0005883a 	mov	r2,zero
    63e8:	003f4c06 	br	611c <__alt_data_end+0xfffb09ec>
    63ec:	0039883a 	mov	fp,zero
    63f0:	003fae06 	br	62ac <__alt_data_end+0xfffb0b7c>
    63f4:	e084703a 	and	r2,fp,r2
    63f8:	103faa26 	beq	r2,zero,62a4 <__alt_data_end+0xfffb0b74>
    63fc:	003fa806 	br	62a0 <__alt_data_end+0xfffb0b70>
    6400:	d9412d17 	ldw	r5,1204(sp)
    6404:	2a400017 	ldw	r9,0(r5)
    6408:	28c00104 	addi	r3,r5,4
    640c:	d8c12d15 	stw	r3,1204(sp)
    6410:	483ebc0e 	bge	r9,zero,5f04 <__alt_data_end+0xfffb07d4>
    6414:	027fffc4 	movi	r9,-1
    6418:	e4000047 	ldb	r16,1(fp)
    641c:	00384206 	br	4528 <__alt_data_end+0xfffaedf8>
    6420:	043fffc4 	movi	r16,-1
    6424:	0038ce06 	br	4760 <__alt_data_end+0xfffaf030>
    6428:	00800b44 	movi	r2,45
    642c:	056bc83a 	sub	r21,zero,r21
    6430:	d8812305 	stb	r2,1164(sp)
    6434:	003f6c06 	br	61e8 <__alt_data_end+0xfffb0ab8>
    6438:	4800081e 	bne	r9,zero,645c <___vfprintf_internal_r+0x20d4>
    643c:	e080004c 	andi	r2,fp,1
    6440:	1000061e 	bne	r2,zero,645c <___vfprintf_internal_r+0x20d4>
    6444:	07000044 	movi	fp,1
    6448:	e023883a 	mov	r17,fp
    644c:	003dd806 	br	5bb0 <__alt_data_end+0xfffb0480>
    6450:	04400084 	movi	r17,2
    6454:	88e3c83a 	sub	r17,r17,r3
    6458:	003fb506 	br	6330 <__alt_data_end+0xfffb0c00>
    645c:	4c400084 	addi	r17,r9,2
    6460:	8839883a 	mov	fp,r17
    6464:	883dd20e 	bge	r17,zero,5bb0 <__alt_data_end+0xfffb0480>
    6468:	003fb506 	br	6340 <__alt_data_end+0xfffb0c10>
    646c:	d8c12617 	ldw	r3,1176(sp)
    6470:	003f5706 	br	61d0 <__alt_data_end+0xfffb0aa0>
    6474:	d8812344 	addi	r2,sp,1165
    6478:	003f8206 	br	6284 <__alt_data_end+0xfffb0b54>
    647c:	0039883a 	mov	fp,zero
    6480:	003fbd06 	br	6378 <__alt_data_end+0xfffb0c48>

00006484 <__vfprintf_internal>:
    6484:	2007883a 	mov	r3,r4
    6488:	01000074 	movhi	r4,1
    648c:	21145904 	addi	r4,r4,20836
    6490:	21000017 	ldw	r4,0(r4)
    6494:	2805883a 	mov	r2,r5
    6498:	300f883a 	mov	r7,r6
    649c:	180b883a 	mov	r5,r3
    64a0:	100d883a 	mov	r6,r2
    64a4:	00043881 	jmpi	4388 <___vfprintf_internal_r>

000064a8 <__swsetup_r>:
    64a8:	00800074 	movhi	r2,1
    64ac:	defffd04 	addi	sp,sp,-12
    64b0:	10945904 	addi	r2,r2,20836
    64b4:	dc400115 	stw	r17,4(sp)
    64b8:	2023883a 	mov	r17,r4
    64bc:	11000017 	ldw	r4,0(r2)
    64c0:	dc000015 	stw	r16,0(sp)
    64c4:	dfc00215 	stw	ra,8(sp)
    64c8:	2821883a 	mov	r16,r5
    64cc:	20000226 	beq	r4,zero,64d8 <__swsetup_r+0x30>
    64d0:	20c00e17 	ldw	r3,56(r4)
    64d4:	18002e26 	beq	r3,zero,6590 <__swsetup_r+0xe8>
    64d8:	8080030b 	ldhu	r2,12(r16)
    64dc:	10c0020c 	andi	r3,r2,8
    64e0:	100d883a 	mov	r6,r2
    64e4:	18000f26 	beq	r3,zero,6524 <__swsetup_r+0x7c>
    64e8:	80c00417 	ldw	r3,16(r16)
    64ec:	18001526 	beq	r3,zero,6544 <__swsetup_r+0x9c>
    64f0:	1100004c 	andi	r4,r2,1
    64f4:	20001c1e 	bne	r4,zero,6568 <__swsetup_r+0xc0>
    64f8:	1080008c 	andi	r2,r2,2
    64fc:	1000261e 	bne	r2,zero,6598 <__swsetup_r+0xf0>
    6500:	80800517 	ldw	r2,20(r16)
    6504:	80800215 	stw	r2,8(r16)
    6508:	18001c26 	beq	r3,zero,657c <__swsetup_r+0xd4>
    650c:	0005883a 	mov	r2,zero
    6510:	dfc00217 	ldw	ra,8(sp)
    6514:	dc400117 	ldw	r17,4(sp)
    6518:	dc000017 	ldw	r16,0(sp)
    651c:	dec00304 	addi	sp,sp,12
    6520:	f800283a 	ret
    6524:	3080040c 	andi	r2,r6,16
    6528:	10001726 	beq	r2,zero,6588 <__swsetup_r+0xe0>
    652c:	3080010c 	andi	r2,r6,4
    6530:	10001b1e 	bne	r2,zero,65a0 <__swsetup_r+0xf8>
    6534:	80c00417 	ldw	r3,16(r16)
    6538:	30800214 	ori	r2,r6,8
    653c:	8080030d 	sth	r2,12(r16)
    6540:	183feb1e 	bne	r3,zero,64f0 <__alt_data_end+0xfffb0dc0>
    6544:	1140a00c 	andi	r5,r2,640
    6548:	01008004 	movi	r4,512
    654c:	293fe826 	beq	r5,r4,64f0 <__alt_data_end+0xfffb0dc0>
    6550:	8809883a 	mov	r4,r17
    6554:	800b883a 	mov	r5,r16
    6558:	000903c0 	call	903c <__smakebuf_r>
    655c:	8080030b 	ldhu	r2,12(r16)
    6560:	80c00417 	ldw	r3,16(r16)
    6564:	003fe206 	br	64f0 <__alt_data_end+0xfffb0dc0>
    6568:	80800517 	ldw	r2,20(r16)
    656c:	80000215 	stw	zero,8(r16)
    6570:	0085c83a 	sub	r2,zero,r2
    6574:	80800615 	stw	r2,24(r16)
    6578:	183fe41e 	bne	r3,zero,650c <__alt_data_end+0xfffb0ddc>
    657c:	8080030b 	ldhu	r2,12(r16)
    6580:	1080200c 	andi	r2,r2,128
    6584:	103fe226 	beq	r2,zero,6510 <__alt_data_end+0xfffb0de0>
    6588:	00bfffc4 	movi	r2,-1
    658c:	003fe006 	br	6510 <__alt_data_end+0xfffb0de0>
    6590:	00084e40 	call	84e4 <__sinit>
    6594:	003fd006 	br	64d8 <__alt_data_end+0xfffb0da8>
    6598:	0005883a 	mov	r2,zero
    659c:	003fd906 	br	6504 <__alt_data_end+0xfffb0dd4>
    65a0:	81400c17 	ldw	r5,48(r16)
    65a4:	28000626 	beq	r5,zero,65c0 <__swsetup_r+0x118>
    65a8:	80801004 	addi	r2,r16,64
    65ac:	28800326 	beq	r5,r2,65bc <__swsetup_r+0x114>
    65b0:	8809883a 	mov	r4,r17
    65b4:	00086580 	call	8658 <_free_r>
    65b8:	8180030b 	ldhu	r6,12(r16)
    65bc:	80000c15 	stw	zero,48(r16)
    65c0:	80c00417 	ldw	r3,16(r16)
    65c4:	00bff6c4 	movi	r2,-37
    65c8:	118c703a 	and	r6,r2,r6
    65cc:	80000115 	stw	zero,4(r16)
    65d0:	80c00015 	stw	r3,0(r16)
    65d4:	003fd806 	br	6538 <__alt_data_end+0xfffb0e08>

000065d8 <quorem>:
    65d8:	defff204 	addi	sp,sp,-56
    65dc:	ddc00b15 	stw	r23,44(sp)
    65e0:	20800417 	ldw	r2,16(r4)
    65e4:	2dc00417 	ldw	r23,16(r5)
    65e8:	dfc00d15 	stw	ra,52(sp)
    65ec:	df000c15 	stw	fp,48(sp)
    65f0:	dd800a15 	stw	r22,40(sp)
    65f4:	dd400915 	stw	r21,36(sp)
    65f8:	dd000815 	stw	r20,32(sp)
    65fc:	dcc00715 	stw	r19,28(sp)
    6600:	dc800615 	stw	r18,24(sp)
    6604:	dc400515 	stw	r17,20(sp)
    6608:	dc000415 	stw	r16,16(sp)
    660c:	15c07a16 	blt	r2,r23,67f8 <quorem+0x220>
    6610:	bdffffc4 	addi	r23,r23,-1
    6614:	bde9883a 	add	r20,r23,r23
    6618:	28c00504 	addi	r3,r5,20
    661c:	a529883a 	add	r20,r20,r20
    6620:	1d39883a 	add	fp,r3,r20
    6624:	24c00504 	addi	r19,r4,20
    6628:	d9400215 	stw	r5,8(sp)
    662c:	9d29883a 	add	r20,r19,r20
    6630:	e1400017 	ldw	r5,0(fp)
    6634:	d9000015 	stw	r4,0(sp)
    6638:	a1000017 	ldw	r4,0(r20)
    663c:	29400044 	addi	r5,r5,1
    6640:	d8c00115 	stw	r3,4(sp)
    6644:	dd000315 	stw	r20,12(sp)
    6648:	000390c0 	call	390c <__udivsi3>
    664c:	1025883a 	mov	r18,r2
    6650:	10003026 	beq	r2,zero,6714 <quorem+0x13c>
    6654:	dc400117 	ldw	r17,4(sp)
    6658:	9829883a 	mov	r20,r19
    665c:	002d883a 	mov	r22,zero
    6660:	0021883a 	mov	r16,zero
    6664:	8d400017 	ldw	r21,0(r17)
    6668:	900b883a 	mov	r5,r18
    666c:	8c400104 	addi	r17,r17,4
    6670:	a93fffcc 	andi	r4,r21,65535
    6674:	000dae00 	call	dae0 <__mulsi3>
    6678:	a808d43a 	srli	r4,r21,16
    667c:	900b883a 	mov	r5,r18
    6680:	b0ad883a 	add	r22,r22,r2
    6684:	000dae00 	call	dae0 <__mulsi3>
    6688:	a1000017 	ldw	r4,0(r20)
    668c:	b00cd43a 	srli	r6,r22,16
    6690:	b0ffffcc 	andi	r3,r22,65535
    6694:	217fffcc 	andi	r5,r4,65535
    6698:	2c21883a 	add	r16,r5,r16
    669c:	80c7c83a 	sub	r3,r16,r3
    66a0:	2008d43a 	srli	r4,r4,16
    66a4:	3085883a 	add	r2,r6,r2
    66a8:	1821d43a 	srai	r16,r3,16
    66ac:	117fffcc 	andi	r5,r2,65535
    66b0:	2149c83a 	sub	r4,r4,r5
    66b4:	2421883a 	add	r16,r4,r16
    66b8:	8008943a 	slli	r4,r16,16
    66bc:	18ffffcc 	andi	r3,r3,65535
    66c0:	102cd43a 	srli	r22,r2,16
    66c4:	20c8b03a 	or	r4,r4,r3
    66c8:	a1000015 	stw	r4,0(r20)
    66cc:	8021d43a 	srai	r16,r16,16
    66d0:	a5000104 	addi	r20,r20,4
    66d4:	e47fe32e 	bgeu	fp,r17,6664 <__alt_data_end+0xfffb0f34>
    66d8:	d8c00317 	ldw	r3,12(sp)
    66dc:	18800017 	ldw	r2,0(r3)
    66e0:	10000c1e 	bne	r2,zero,6714 <quorem+0x13c>
    66e4:	18bfff04 	addi	r2,r3,-4
    66e8:	9880082e 	bgeu	r19,r2,670c <quorem+0x134>
    66ec:	18ffff17 	ldw	r3,-4(r3)
    66f0:	18000326 	beq	r3,zero,6700 <quorem+0x128>
    66f4:	00000506 	br	670c <quorem+0x134>
    66f8:	10c00017 	ldw	r3,0(r2)
    66fc:	1800031e 	bne	r3,zero,670c <quorem+0x134>
    6700:	10bfff04 	addi	r2,r2,-4
    6704:	bdffffc4 	addi	r23,r23,-1
    6708:	98bffb36 	bltu	r19,r2,66f8 <__alt_data_end+0xfffb0fc8>
    670c:	d8c00017 	ldw	r3,0(sp)
    6710:	1dc00415 	stw	r23,16(r3)
    6714:	d9000017 	ldw	r4,0(sp)
    6718:	d9400217 	ldw	r5,8(sp)
    671c:	000a0100 	call	a010 <__mcmp>
    6720:	10002816 	blt	r2,zero,67c4 <quorem+0x1ec>
    6724:	dc400117 	ldw	r17,4(sp)
    6728:	94800044 	addi	r18,r18,1
    672c:	980d883a 	mov	r6,r19
    6730:	0007883a 	mov	r3,zero
    6734:	31000017 	ldw	r4,0(r6)
    6738:	89400017 	ldw	r5,0(r17)
    673c:	31800104 	addi	r6,r6,4
    6740:	20bfffcc 	andi	r2,r4,65535
    6744:	10c7883a 	add	r3,r2,r3
    6748:	28bfffcc 	andi	r2,r5,65535
    674c:	1885c83a 	sub	r2,r3,r2
    6750:	280ad43a 	srli	r5,r5,16
    6754:	2008d43a 	srli	r4,r4,16
    6758:	1007d43a 	srai	r3,r2,16
    675c:	10bfffcc 	andi	r2,r2,65535
    6760:	2149c83a 	sub	r4,r4,r5
    6764:	20c9883a 	add	r4,r4,r3
    6768:	200a943a 	slli	r5,r4,16
    676c:	8c400104 	addi	r17,r17,4
    6770:	2007d43a 	srai	r3,r4,16
    6774:	2884b03a 	or	r2,r5,r2
    6778:	30bfff15 	stw	r2,-4(r6)
    677c:	e47fed2e 	bgeu	fp,r17,6734 <__alt_data_end+0xfffb1004>
    6780:	bdc5883a 	add	r2,r23,r23
    6784:	1085883a 	add	r2,r2,r2
    6788:	9887883a 	add	r3,r19,r2
    678c:	18800017 	ldw	r2,0(r3)
    6790:	10000c1e 	bne	r2,zero,67c4 <quorem+0x1ec>
    6794:	18bfff04 	addi	r2,r3,-4
    6798:	9880082e 	bgeu	r19,r2,67bc <quorem+0x1e4>
    679c:	18ffff17 	ldw	r3,-4(r3)
    67a0:	18000326 	beq	r3,zero,67b0 <quorem+0x1d8>
    67a4:	00000506 	br	67bc <quorem+0x1e4>
    67a8:	10c00017 	ldw	r3,0(r2)
    67ac:	1800031e 	bne	r3,zero,67bc <quorem+0x1e4>
    67b0:	10bfff04 	addi	r2,r2,-4
    67b4:	bdffffc4 	addi	r23,r23,-1
    67b8:	98bffb36 	bltu	r19,r2,67a8 <__alt_data_end+0xfffb1078>
    67bc:	d8c00017 	ldw	r3,0(sp)
    67c0:	1dc00415 	stw	r23,16(r3)
    67c4:	9005883a 	mov	r2,r18
    67c8:	dfc00d17 	ldw	ra,52(sp)
    67cc:	df000c17 	ldw	fp,48(sp)
    67d0:	ddc00b17 	ldw	r23,44(sp)
    67d4:	dd800a17 	ldw	r22,40(sp)
    67d8:	dd400917 	ldw	r21,36(sp)
    67dc:	dd000817 	ldw	r20,32(sp)
    67e0:	dcc00717 	ldw	r19,28(sp)
    67e4:	dc800617 	ldw	r18,24(sp)
    67e8:	dc400517 	ldw	r17,20(sp)
    67ec:	dc000417 	ldw	r16,16(sp)
    67f0:	dec00e04 	addi	sp,sp,56
    67f4:	f800283a 	ret
    67f8:	0005883a 	mov	r2,zero
    67fc:	003ff206 	br	67c8 <__alt_data_end+0xfffb1098>

00006800 <_dtoa_r>:
    6800:	20801017 	ldw	r2,64(r4)
    6804:	deffde04 	addi	sp,sp,-136
    6808:	dd401d15 	stw	r21,116(sp)
    680c:	dcc01b15 	stw	r19,108(sp)
    6810:	dc801a15 	stw	r18,104(sp)
    6814:	dc401915 	stw	r17,100(sp)
    6818:	dc001815 	stw	r16,96(sp)
    681c:	dfc02115 	stw	ra,132(sp)
    6820:	df002015 	stw	fp,128(sp)
    6824:	ddc01f15 	stw	r23,124(sp)
    6828:	dd801e15 	stw	r22,120(sp)
    682c:	dd001c15 	stw	r20,112(sp)
    6830:	d9c00315 	stw	r7,12(sp)
    6834:	2021883a 	mov	r16,r4
    6838:	302b883a 	mov	r21,r6
    683c:	2825883a 	mov	r18,r5
    6840:	dc402417 	ldw	r17,144(sp)
    6844:	3027883a 	mov	r19,r6
    6848:	10000826 	beq	r2,zero,686c <_dtoa_r+0x6c>
    684c:	21801117 	ldw	r6,68(r4)
    6850:	00c00044 	movi	r3,1
    6854:	100b883a 	mov	r5,r2
    6858:	1986983a 	sll	r3,r3,r6
    685c:	11800115 	stw	r6,4(r2)
    6860:	10c00215 	stw	r3,8(r2)
    6864:	000973c0 	call	973c <_Bfree>
    6868:	80001015 	stw	zero,64(r16)
    686c:	a8002d16 	blt	r21,zero,6924 <_dtoa_r+0x124>
    6870:	88000015 	stw	zero,0(r17)
    6874:	a8dffc2c 	andhi	r3,r21,32752
    6878:	009ffc34 	movhi	r2,32752
    687c:	18801b26 	beq	r3,r2,68ec <_dtoa_r+0xec>
    6880:	9009883a 	mov	r4,r18
    6884:	980b883a 	mov	r5,r19
    6888:	000d883a 	mov	r6,zero
    688c:	000f883a 	mov	r7,zero
    6890:	000ed240 	call	ed24 <__eqdf2>
    6894:	10002a1e 	bne	r2,zero,6940 <_dtoa_r+0x140>
    6898:	d8c02317 	ldw	r3,140(sp)
    689c:	d9002517 	ldw	r4,148(sp)
    68a0:	00800044 	movi	r2,1
    68a4:	18800015 	stw	r2,0(r3)
    68a8:	2001a226 	beq	r4,zero,6f34 <_dtoa_r+0x734>
    68ac:	00800074 	movhi	r2,1
    68b0:	108ce044 	addi	r2,r2,13185
    68b4:	20800015 	stw	r2,0(r4)
    68b8:	10bfffc4 	addi	r2,r2,-1
    68bc:	dfc02117 	ldw	ra,132(sp)
    68c0:	df002017 	ldw	fp,128(sp)
    68c4:	ddc01f17 	ldw	r23,124(sp)
    68c8:	dd801e17 	ldw	r22,120(sp)
    68cc:	dd401d17 	ldw	r21,116(sp)
    68d0:	dd001c17 	ldw	r20,112(sp)
    68d4:	dcc01b17 	ldw	r19,108(sp)
    68d8:	dc801a17 	ldw	r18,104(sp)
    68dc:	dc401917 	ldw	r17,100(sp)
    68e0:	dc001817 	ldw	r16,96(sp)
    68e4:	dec02204 	addi	sp,sp,136
    68e8:	f800283a 	ret
    68ec:	d8c02317 	ldw	r3,140(sp)
    68f0:	0089c3c4 	movi	r2,9999
    68f4:	18800015 	stw	r2,0(r3)
    68f8:	90017c26 	beq	r18,zero,6eec <_dtoa_r+0x6ec>
    68fc:	00800074 	movhi	r2,1
    6900:	108cec04 	addi	r2,r2,13232
    6904:	d9002517 	ldw	r4,148(sp)
    6908:	203fec26 	beq	r4,zero,68bc <__alt_data_end+0xfffb118c>
    690c:	10c000c7 	ldb	r3,3(r2)
    6910:	18017d1e 	bne	r3,zero,6f08 <_dtoa_r+0x708>
    6914:	10c000c4 	addi	r3,r2,3
    6918:	d9802517 	ldw	r6,148(sp)
    691c:	30c00015 	stw	r3,0(r6)
    6920:	003fe606 	br	68bc <__alt_data_end+0xfffb118c>
    6924:	04e00034 	movhi	r19,32768
    6928:	9cffffc4 	addi	r19,r19,-1
    692c:	00800044 	movi	r2,1
    6930:	ace6703a 	and	r19,r21,r19
    6934:	88800015 	stw	r2,0(r17)
    6938:	982b883a 	mov	r21,r19
    693c:	003fcd06 	br	6874 <__alt_data_end+0xfffb1144>
    6940:	d8800204 	addi	r2,sp,8
    6944:	a822d53a 	srli	r17,r21,20
    6948:	d8800015 	stw	r2,0(sp)
    694c:	8009883a 	mov	r4,r16
    6950:	900b883a 	mov	r5,r18
    6954:	980d883a 	mov	r6,r19
    6958:	d9c00104 	addi	r7,sp,4
    695c:	000a3840 	call	a384 <__d2b>
    6960:	1039883a 	mov	fp,r2
    6964:	88016a1e 	bne	r17,zero,6f10 <_dtoa_r+0x710>
    6968:	dd000217 	ldw	r20,8(sp)
    696c:	dc400117 	ldw	r17,4(sp)
    6970:	00befbc4 	movi	r2,-1041
    6974:	a463883a 	add	r17,r20,r17
    6978:	8882ea16 	blt	r17,r2,7524 <_dtoa_r+0xd24>
    697c:	00bf0384 	movi	r2,-1010
    6980:	1445c83a 	sub	r2,r2,r17
    6984:	89010484 	addi	r4,r17,1042
    6988:	a8aa983a 	sll	r21,r21,r2
    698c:	9108d83a 	srl	r4,r18,r4
    6990:	a908b03a 	or	r4,r21,r4
    6994:	00101fc0 	call	101fc <__floatunsidf>
    6998:	017f8434 	movhi	r5,65040
    699c:	01800044 	movi	r6,1
    69a0:	1009883a 	mov	r4,r2
    69a4:	194b883a 	add	r5,r3,r5
    69a8:	8c7fffc4 	addi	r17,r17,-1
    69ac:	d9800f15 	stw	r6,60(sp)
    69b0:	000d883a 	mov	r6,zero
    69b4:	01cffe34 	movhi	r7,16376
    69b8:	000f7d40 	call	f7d4 <__subdf3>
    69bc:	0198dbf4 	movhi	r6,25455
    69c0:	01cff4f4 	movhi	r7,16339
    69c4:	1009883a 	mov	r4,r2
    69c8:	180b883a 	mov	r5,r3
    69cc:	3190d844 	addi	r6,r6,17249
    69d0:	39e1e9c4 	addi	r7,r7,-30809
    69d4:	000ef680 	call	ef68 <__muldf3>
    69d8:	01a2d874 	movhi	r6,35681
    69dc:	01cff1f4 	movhi	r7,16327
    69e0:	180b883a 	mov	r5,r3
    69e4:	31b22cc4 	addi	r6,r6,-14157
    69e8:	39e28a04 	addi	r7,r7,-30168
    69ec:	1009883a 	mov	r4,r2
    69f0:	000db080 	call	db08 <__adddf3>
    69f4:	8809883a 	mov	r4,r17
    69f8:	102d883a 	mov	r22,r2
    69fc:	182b883a 	mov	r21,r3
    6a00:	001012c0 	call	1012c <__floatsidf>
    6a04:	019427f4 	movhi	r6,20639
    6a08:	01cff4f4 	movhi	r7,16339
    6a0c:	1009883a 	mov	r4,r2
    6a10:	180b883a 	mov	r5,r3
    6a14:	319e7ec4 	addi	r6,r6,31227
    6a18:	39d104c4 	addi	r7,r7,17427
    6a1c:	000ef680 	call	ef68 <__muldf3>
    6a20:	b009883a 	mov	r4,r22
    6a24:	a80b883a 	mov	r5,r21
    6a28:	100d883a 	mov	r6,r2
    6a2c:	180f883a 	mov	r7,r3
    6a30:	000db080 	call	db08 <__adddf3>
    6a34:	1009883a 	mov	r4,r2
    6a38:	180b883a 	mov	r5,r3
    6a3c:	102d883a 	mov	r22,r2
    6a40:	182b883a 	mov	r21,r3
    6a44:	00100a40 	call	100a4 <__fixdfsi>
    6a48:	b009883a 	mov	r4,r22
    6a4c:	a80b883a 	mov	r5,r21
    6a50:	000d883a 	mov	r6,zero
    6a54:	000f883a 	mov	r7,zero
    6a58:	d8800515 	stw	r2,20(sp)
    6a5c:	000ee880 	call	ee88 <__ledf2>
    6a60:	10023116 	blt	r2,zero,7328 <_dtoa_r+0xb28>
    6a64:	d8c00517 	ldw	r3,20(sp)
    6a68:	00800584 	movi	r2,22
    6a6c:	10c21f36 	bltu	r2,r3,72ec <_dtoa_r+0xaec>
    6a70:	180490fa 	slli	r2,r3,3
    6a74:	00c00074 	movhi	r3,1
    6a78:	18cd0804 	addi	r3,r3,13344
    6a7c:	1885883a 	add	r2,r3,r2
    6a80:	11000017 	ldw	r4,0(r2)
    6a84:	11400117 	ldw	r5,4(r2)
    6a88:	900d883a 	mov	r6,r18
    6a8c:	980f883a 	mov	r7,r19
    6a90:	000eda80 	call	eda8 <__gedf2>
    6a94:	0082a70e 	bge	zero,r2,7534 <_dtoa_r+0xd34>
    6a98:	d9000517 	ldw	r4,20(sp)
    6a9c:	d8000c15 	stw	zero,48(sp)
    6aa0:	213fffc4 	addi	r4,r4,-1
    6aa4:	d9000515 	stw	r4,20(sp)
    6aa8:	a463c83a 	sub	r17,r20,r17
    6aac:	8dbfffc4 	addi	r22,r17,-1
    6ab0:	b0021916 	blt	r22,zero,7318 <_dtoa_r+0xb18>
    6ab4:	d8000815 	stw	zero,32(sp)
    6ab8:	d8800517 	ldw	r2,20(sp)
    6abc:	10020e16 	blt	r2,zero,72f8 <_dtoa_r+0xaf8>
    6ac0:	b0ad883a 	add	r22,r22,r2
    6ac4:	d8800a15 	stw	r2,40(sp)
    6ac8:	d8000915 	stw	zero,36(sp)
    6acc:	d8c00317 	ldw	r3,12(sp)
    6ad0:	00800244 	movi	r2,9
    6ad4:	10c11a36 	bltu	r2,r3,6f40 <_dtoa_r+0x740>
    6ad8:	00800144 	movi	r2,5
    6adc:	10c4fc0e 	bge	r2,r3,7ed0 <_dtoa_r+0x16d0>
    6ae0:	18ffff04 	addi	r3,r3,-4
    6ae4:	d8c00315 	stw	r3,12(sp)
    6ae8:	0029883a 	mov	r20,zero
    6aec:	d9800317 	ldw	r6,12(sp)
    6af0:	008000c4 	movi	r2,3
    6af4:	3083bd26 	beq	r6,r2,79ec <_dtoa_r+0x11ec>
    6af8:	1183670e 	bge	r2,r6,7898 <_dtoa_r+0x1098>
    6afc:	d8c00317 	ldw	r3,12(sp)
    6b00:	00800104 	movi	r2,4
    6b04:	1882e726 	beq	r3,r2,76a4 <_dtoa_r+0xea4>
    6b08:	00800144 	movi	r2,5
    6b0c:	1884f21e 	bne	r3,r2,7ed8 <_dtoa_r+0x16d8>
    6b10:	00800044 	movi	r2,1
    6b14:	d8800b15 	stw	r2,44(sp)
    6b18:	d8c02217 	ldw	r3,136(sp)
    6b1c:	d9000517 	ldw	r4,20(sp)
    6b20:	1907883a 	add	r3,r3,r4
    6b24:	19800044 	addi	r6,r3,1
    6b28:	d8c00d15 	stw	r3,52(sp)
    6b2c:	d9800615 	stw	r6,24(sp)
    6b30:	0183c30e 	bge	zero,r6,7a40 <_dtoa_r+0x1240>
    6b34:	d9800617 	ldw	r6,24(sp)
    6b38:	3023883a 	mov	r17,r6
    6b3c:	80001115 	stw	zero,68(r16)
    6b40:	008005c4 	movi	r2,23
    6b44:	1184f62e 	bgeu	r2,r6,7f20 <_dtoa_r+0x1720>
    6b48:	00c00044 	movi	r3,1
    6b4c:	00800104 	movi	r2,4
    6b50:	1085883a 	add	r2,r2,r2
    6b54:	11000504 	addi	r4,r2,20
    6b58:	180b883a 	mov	r5,r3
    6b5c:	18c00044 	addi	r3,r3,1
    6b60:	313ffb2e 	bgeu	r6,r4,6b50 <__alt_data_end+0xfffb1420>
    6b64:	81401115 	stw	r5,68(r16)
    6b68:	8009883a 	mov	r4,r16
    6b6c:	00096940 	call	9694 <_Balloc>
    6b70:	d8800715 	stw	r2,28(sp)
    6b74:	80801015 	stw	r2,64(r16)
    6b78:	00800384 	movi	r2,14
    6b7c:	1440fd36 	bltu	r2,r17,6f74 <_dtoa_r+0x774>
    6b80:	a000fc26 	beq	r20,zero,6f74 <_dtoa_r+0x774>
    6b84:	d8800517 	ldw	r2,20(sp)
    6b88:	0083b90e 	bge	zero,r2,7a70 <_dtoa_r+0x1270>
    6b8c:	d8c00517 	ldw	r3,20(sp)
    6b90:	108003cc 	andi	r2,r2,15
    6b94:	100490fa 	slli	r2,r2,3
    6b98:	182fd13a 	srai	r23,r3,4
    6b9c:	00c00074 	movhi	r3,1
    6ba0:	18cd0804 	addi	r3,r3,13344
    6ba4:	1885883a 	add	r2,r3,r2
    6ba8:	b8c0040c 	andi	r3,r23,16
    6bac:	12c00017 	ldw	r11,0(r2)
    6bb0:	12800117 	ldw	r10,4(r2)
    6bb4:	18039726 	beq	r3,zero,7a14 <_dtoa_r+0x1214>
    6bb8:	00800074 	movhi	r2,1
    6bbc:	108cfe04 	addi	r2,r2,13304
    6bc0:	11800817 	ldw	r6,32(r2)
    6bc4:	11c00917 	ldw	r7,36(r2)
    6bc8:	9009883a 	mov	r4,r18
    6bcc:	980b883a 	mov	r5,r19
    6bd0:	da801615 	stw	r10,88(sp)
    6bd4:	dac01515 	stw	r11,84(sp)
    6bd8:	000e3a40 	call	e3a4 <__divdf3>
    6bdc:	da801617 	ldw	r10,88(sp)
    6be0:	dac01517 	ldw	r11,84(sp)
    6be4:	bdc003cc 	andi	r23,r23,15
    6be8:	044000c4 	movi	r17,3
    6bec:	d8800e15 	stw	r2,56(sp)
    6bf0:	182b883a 	mov	r21,r3
    6bf4:	b8001126 	beq	r23,zero,6c3c <_dtoa_r+0x43c>
    6bf8:	05000074 	movhi	r20,1
    6bfc:	a50cfe04 	addi	r20,r20,13304
    6c00:	5805883a 	mov	r2,r11
    6c04:	5007883a 	mov	r3,r10
    6c08:	b980004c 	andi	r6,r23,1
    6c0c:	1009883a 	mov	r4,r2
    6c10:	b82fd07a 	srai	r23,r23,1
    6c14:	180b883a 	mov	r5,r3
    6c18:	30000426 	beq	r6,zero,6c2c <_dtoa_r+0x42c>
    6c1c:	a1800017 	ldw	r6,0(r20)
    6c20:	a1c00117 	ldw	r7,4(r20)
    6c24:	8c400044 	addi	r17,r17,1
    6c28:	000ef680 	call	ef68 <__muldf3>
    6c2c:	a5000204 	addi	r20,r20,8
    6c30:	b83ff51e 	bne	r23,zero,6c08 <__alt_data_end+0xfffb14d8>
    6c34:	1017883a 	mov	r11,r2
    6c38:	1815883a 	mov	r10,r3
    6c3c:	d9000e17 	ldw	r4,56(sp)
    6c40:	a80b883a 	mov	r5,r21
    6c44:	580d883a 	mov	r6,r11
    6c48:	500f883a 	mov	r7,r10
    6c4c:	000e3a40 	call	e3a4 <__divdf3>
    6c50:	1029883a 	mov	r20,r2
    6c54:	182b883a 	mov	r21,r3
    6c58:	d9800c17 	ldw	r6,48(sp)
    6c5c:	30000626 	beq	r6,zero,6c78 <_dtoa_r+0x478>
    6c60:	a009883a 	mov	r4,r20
    6c64:	a80b883a 	mov	r5,r21
    6c68:	000d883a 	mov	r6,zero
    6c6c:	01cffc34 	movhi	r7,16368
    6c70:	000ee880 	call	ee88 <__ledf2>
    6c74:	10043216 	blt	r2,zero,7d40 <_dtoa_r+0x1540>
    6c78:	8809883a 	mov	r4,r17
    6c7c:	001012c0 	call	1012c <__floatsidf>
    6c80:	1009883a 	mov	r4,r2
    6c84:	180b883a 	mov	r5,r3
    6c88:	a00d883a 	mov	r6,r20
    6c8c:	a80f883a 	mov	r7,r21
    6c90:	000ef680 	call	ef68 <__muldf3>
    6c94:	000d883a 	mov	r6,zero
    6c98:	1009883a 	mov	r4,r2
    6c9c:	180b883a 	mov	r5,r3
    6ca0:	01d00734 	movhi	r7,16412
    6ca4:	000db080 	call	db08 <__adddf3>
    6ca8:	1023883a 	mov	r17,r2
    6cac:	d9800617 	ldw	r6,24(sp)
    6cb0:	00bf3034 	movhi	r2,64704
    6cb4:	1885883a 	add	r2,r3,r2
    6cb8:	d8800e15 	stw	r2,56(sp)
    6cbc:	30032e26 	beq	r6,zero,7978 <_dtoa_r+0x1178>
    6cc0:	d8c00517 	ldw	r3,20(sp)
    6cc4:	da800617 	ldw	r10,24(sp)
    6cc8:	d8c01215 	stw	r3,72(sp)
    6ccc:	d9000b17 	ldw	r4,44(sp)
    6cd0:	2003b026 	beq	r4,zero,7b94 <_dtoa_r+0x1394>
    6cd4:	50bfffc4 	addi	r2,r10,-1
    6cd8:	100490fa 	slli	r2,r2,3
    6cdc:	00c00074 	movhi	r3,1
    6ce0:	18cd0804 	addi	r3,r3,13344
    6ce4:	1885883a 	add	r2,r3,r2
    6ce8:	11800017 	ldw	r6,0(r2)
    6cec:	11c00117 	ldw	r7,4(r2)
    6cf0:	d8800717 	ldw	r2,28(sp)
    6cf4:	0009883a 	mov	r4,zero
    6cf8:	014ff834 	movhi	r5,16352
    6cfc:	da801615 	stw	r10,88(sp)
    6d00:	15c00044 	addi	r23,r2,1
    6d04:	000e3a40 	call	e3a4 <__divdf3>
    6d08:	d9c00e17 	ldw	r7,56(sp)
    6d0c:	880d883a 	mov	r6,r17
    6d10:	1009883a 	mov	r4,r2
    6d14:	180b883a 	mov	r5,r3
    6d18:	000f7d40 	call	f7d4 <__subdf3>
    6d1c:	a80b883a 	mov	r5,r21
    6d20:	a009883a 	mov	r4,r20
    6d24:	d8c01015 	stw	r3,64(sp)
    6d28:	d8800e15 	stw	r2,56(sp)
    6d2c:	00100a40 	call	100a4 <__fixdfsi>
    6d30:	1009883a 	mov	r4,r2
    6d34:	d8801715 	stw	r2,92(sp)
    6d38:	001012c0 	call	1012c <__floatsidf>
    6d3c:	a009883a 	mov	r4,r20
    6d40:	a80b883a 	mov	r5,r21
    6d44:	100d883a 	mov	r6,r2
    6d48:	180f883a 	mov	r7,r3
    6d4c:	000f7d40 	call	f7d4 <__subdf3>
    6d50:	da001717 	ldw	r8,92(sp)
    6d54:	1829883a 	mov	r20,r3
    6d58:	d8c00717 	ldw	r3,28(sp)
    6d5c:	d9000e17 	ldw	r4,56(sp)
    6d60:	d9401017 	ldw	r5,64(sp)
    6d64:	42000c04 	addi	r8,r8,48
    6d68:	1023883a 	mov	r17,r2
    6d6c:	1a000005 	stb	r8,0(r3)
    6d70:	880d883a 	mov	r6,r17
    6d74:	a00f883a 	mov	r7,r20
    6d78:	402b883a 	mov	r21,r8
    6d7c:	000eda80 	call	eda8 <__gedf2>
    6d80:	00844516 	blt	zero,r2,7e98 <_dtoa_r+0x1698>
    6d84:	0009883a 	mov	r4,zero
    6d88:	014ffc34 	movhi	r5,16368
    6d8c:	880d883a 	mov	r6,r17
    6d90:	a00f883a 	mov	r7,r20
    6d94:	000f7d40 	call	f7d4 <__subdf3>
    6d98:	d9000e17 	ldw	r4,56(sp)
    6d9c:	d9401017 	ldw	r5,64(sp)
    6da0:	100d883a 	mov	r6,r2
    6da4:	180f883a 	mov	r7,r3
    6da8:	000eda80 	call	eda8 <__gedf2>
    6dac:	da801617 	ldw	r10,88(sp)
    6db0:	00843616 	blt	zero,r2,7e8c <_dtoa_r+0x168c>
    6db4:	00800044 	movi	r2,1
    6db8:	12806e0e 	bge	r2,r10,6f74 <_dtoa_r+0x774>
    6dbc:	d9000717 	ldw	r4,28(sp)
    6dc0:	dd801315 	stw	r22,76(sp)
    6dc4:	dc001115 	stw	r16,68(sp)
    6dc8:	2295883a 	add	r10,r4,r10
    6dcc:	dcc01415 	stw	r19,80(sp)
    6dd0:	502d883a 	mov	r22,r10
    6dd4:	dcc01017 	ldw	r19,64(sp)
    6dd8:	b821883a 	mov	r16,r23
    6ddc:	dc801015 	stw	r18,64(sp)
    6de0:	dc800e17 	ldw	r18,56(sp)
    6de4:	00000906 	br	6e0c <_dtoa_r+0x60c>
    6de8:	000f7d40 	call	f7d4 <__subdf3>
    6dec:	1009883a 	mov	r4,r2
    6df0:	180b883a 	mov	r5,r3
    6df4:	900d883a 	mov	r6,r18
    6df8:	980f883a 	mov	r7,r19
    6dfc:	000ee880 	call	ee88 <__ledf2>
    6e00:	10040e16 	blt	r2,zero,7e3c <_dtoa_r+0x163c>
    6e04:	b821883a 	mov	r16,r23
    6e08:	bd841026 	beq	r23,r22,7e4c <_dtoa_r+0x164c>
    6e0c:	9009883a 	mov	r4,r18
    6e10:	980b883a 	mov	r5,r19
    6e14:	000d883a 	mov	r6,zero
    6e18:	01d00934 	movhi	r7,16420
    6e1c:	000ef680 	call	ef68 <__muldf3>
    6e20:	000d883a 	mov	r6,zero
    6e24:	01d00934 	movhi	r7,16420
    6e28:	8809883a 	mov	r4,r17
    6e2c:	a00b883a 	mov	r5,r20
    6e30:	1025883a 	mov	r18,r2
    6e34:	1827883a 	mov	r19,r3
    6e38:	000ef680 	call	ef68 <__muldf3>
    6e3c:	180b883a 	mov	r5,r3
    6e40:	1009883a 	mov	r4,r2
    6e44:	1823883a 	mov	r17,r3
    6e48:	1029883a 	mov	r20,r2
    6e4c:	00100a40 	call	100a4 <__fixdfsi>
    6e50:	1009883a 	mov	r4,r2
    6e54:	102b883a 	mov	r21,r2
    6e58:	001012c0 	call	1012c <__floatsidf>
    6e5c:	a009883a 	mov	r4,r20
    6e60:	880b883a 	mov	r5,r17
    6e64:	100d883a 	mov	r6,r2
    6e68:	180f883a 	mov	r7,r3
    6e6c:	000f7d40 	call	f7d4 <__subdf3>
    6e70:	ad400c04 	addi	r21,r21,48
    6e74:	1009883a 	mov	r4,r2
    6e78:	180b883a 	mov	r5,r3
    6e7c:	900d883a 	mov	r6,r18
    6e80:	980f883a 	mov	r7,r19
    6e84:	85400005 	stb	r21,0(r16)
    6e88:	1023883a 	mov	r17,r2
    6e8c:	1829883a 	mov	r20,r3
    6e90:	000ee880 	call	ee88 <__ledf2>
    6e94:	bdc00044 	addi	r23,r23,1
    6e98:	0009883a 	mov	r4,zero
    6e9c:	014ffc34 	movhi	r5,16368
    6ea0:	880d883a 	mov	r6,r17
    6ea4:	a00f883a 	mov	r7,r20
    6ea8:	103fcf0e 	bge	r2,zero,6de8 <__alt_data_end+0xfffb16b8>
    6eac:	d9801217 	ldw	r6,72(sp)
    6eb0:	dc001117 	ldw	r16,68(sp)
    6eb4:	d9800515 	stw	r6,20(sp)
    6eb8:	8009883a 	mov	r4,r16
    6ebc:	e00b883a 	mov	r5,fp
    6ec0:	000973c0 	call	973c <_Bfree>
    6ec4:	d8c00517 	ldw	r3,20(sp)
    6ec8:	d9002317 	ldw	r4,140(sp)
    6ecc:	d9802517 	ldw	r6,148(sp)
    6ed0:	b8000005 	stb	zero,0(r23)
    6ed4:	18800044 	addi	r2,r3,1
    6ed8:	20800015 	stw	r2,0(r4)
    6edc:	30027226 	beq	r6,zero,78a8 <_dtoa_r+0x10a8>
    6ee0:	35c00015 	stw	r23,0(r6)
    6ee4:	d8800717 	ldw	r2,28(sp)
    6ee8:	003e7406 	br	68bc <__alt_data_end+0xfffb118c>
    6eec:	00800434 	movhi	r2,16
    6ef0:	10bfffc4 	addi	r2,r2,-1
    6ef4:	a8aa703a 	and	r21,r21,r2
    6ef8:	a83e801e 	bne	r21,zero,68fc <__alt_data_end+0xfffb11cc>
    6efc:	00800074 	movhi	r2,1
    6f00:	108ce904 	addi	r2,r2,13220
    6f04:	003e7f06 	br	6904 <__alt_data_end+0xfffb11d4>
    6f08:	10c00204 	addi	r3,r2,8
    6f0c:	003e8206 	br	6918 <__alt_data_end+0xfffb11e8>
    6f10:	01400434 	movhi	r5,16
    6f14:	297fffc4 	addi	r5,r5,-1
    6f18:	994a703a 	and	r5,r19,r5
    6f1c:	9009883a 	mov	r4,r18
    6f20:	8c7f0044 	addi	r17,r17,-1023
    6f24:	294ffc34 	orhi	r5,r5,16368
    6f28:	dd000217 	ldw	r20,8(sp)
    6f2c:	d8000f15 	stw	zero,60(sp)
    6f30:	003e9f06 	br	69b0 <__alt_data_end+0xfffb1280>
    6f34:	00800074 	movhi	r2,1
    6f38:	108ce004 	addi	r2,r2,13184
    6f3c:	003e5f06 	br	68bc <__alt_data_end+0xfffb118c>
    6f40:	80001115 	stw	zero,68(r16)
    6f44:	8009883a 	mov	r4,r16
    6f48:	000b883a 	mov	r5,zero
    6f4c:	00096940 	call	9694 <_Balloc>
    6f50:	01bfffc4 	movi	r6,-1
    6f54:	d8800715 	stw	r2,28(sp)
    6f58:	80801015 	stw	r2,64(r16)
    6f5c:	00800044 	movi	r2,1
    6f60:	d9800615 	stw	r6,24(sp)
    6f64:	d8800b15 	stw	r2,44(sp)
    6f68:	d8002215 	stw	zero,136(sp)
    6f6c:	d9800d15 	stw	r6,52(sp)
    6f70:	d8000315 	stw	zero,12(sp)
    6f74:	d8800117 	ldw	r2,4(sp)
    6f78:	10008e16 	blt	r2,zero,71b4 <_dtoa_r+0x9b4>
    6f7c:	d9000517 	ldw	r4,20(sp)
    6f80:	00c00384 	movi	r3,14
    6f84:	19008b16 	blt	r3,r4,71b4 <_dtoa_r+0x9b4>
    6f88:	200490fa 	slli	r2,r4,3
    6f8c:	00c00074 	movhi	r3,1
    6f90:	d9802217 	ldw	r6,136(sp)
    6f94:	18cd0804 	addi	r3,r3,13344
    6f98:	1885883a 	add	r2,r3,r2
    6f9c:	14400017 	ldw	r17,0(r2)
    6fa0:	15000117 	ldw	r20,4(r2)
    6fa4:	3001c716 	blt	r6,zero,76c4 <_dtoa_r+0xec4>
    6fa8:	880d883a 	mov	r6,r17
    6fac:	a00f883a 	mov	r7,r20
    6fb0:	9009883a 	mov	r4,r18
    6fb4:	980b883a 	mov	r5,r19
    6fb8:	000e3a40 	call	e3a4 <__divdf3>
    6fbc:	180b883a 	mov	r5,r3
    6fc0:	1009883a 	mov	r4,r2
    6fc4:	00100a40 	call	100a4 <__fixdfsi>
    6fc8:	1009883a 	mov	r4,r2
    6fcc:	102d883a 	mov	r22,r2
    6fd0:	001012c0 	call	1012c <__floatsidf>
    6fd4:	1009883a 	mov	r4,r2
    6fd8:	180b883a 	mov	r5,r3
    6fdc:	880d883a 	mov	r6,r17
    6fe0:	a00f883a 	mov	r7,r20
    6fe4:	000ef680 	call	ef68 <__muldf3>
    6fe8:	9009883a 	mov	r4,r18
    6fec:	980b883a 	mov	r5,r19
    6ff0:	100d883a 	mov	r6,r2
    6ff4:	180f883a 	mov	r7,r3
    6ff8:	000f7d40 	call	f7d4 <__subdf3>
    6ffc:	d9000717 	ldw	r4,28(sp)
    7000:	d9800617 	ldw	r6,24(sp)
    7004:	180b883a 	mov	r5,r3
    7008:	b0c00c04 	addi	r3,r22,48
    700c:	20c00005 	stb	r3,0(r4)
    7010:	25c00044 	addi	r23,r4,1
    7014:	01000044 	movi	r4,1
    7018:	1011883a 	mov	r8,r2
    701c:	2807883a 	mov	r3,r5
    7020:	31003d26 	beq	r6,r4,7118 <_dtoa_r+0x918>
    7024:	000d883a 	mov	r6,zero
    7028:	01d00934 	movhi	r7,16420
    702c:	1009883a 	mov	r4,r2
    7030:	000ef680 	call	ef68 <__muldf3>
    7034:	1009883a 	mov	r4,r2
    7038:	180b883a 	mov	r5,r3
    703c:	000d883a 	mov	r6,zero
    7040:	000f883a 	mov	r7,zero
    7044:	1027883a 	mov	r19,r2
    7048:	182b883a 	mov	r21,r3
    704c:	000ed240 	call	ed24 <__eqdf2>
    7050:	103f9926 	beq	r2,zero,6eb8 <__alt_data_end+0xfffb1788>
    7054:	d8c00617 	ldw	r3,24(sp)
    7058:	d9000717 	ldw	r4,28(sp)
    705c:	b825883a 	mov	r18,r23
    7060:	18bfffc4 	addi	r2,r3,-1
    7064:	20ad883a 	add	r22,r4,r2
    7068:	dc000315 	stw	r16,12(sp)
    706c:	00000a06 	br	7098 <_dtoa_r+0x898>
    7070:	000ef680 	call	ef68 <__muldf3>
    7074:	1009883a 	mov	r4,r2
    7078:	180b883a 	mov	r5,r3
    707c:	000d883a 	mov	r6,zero
    7080:	000f883a 	mov	r7,zero
    7084:	1027883a 	mov	r19,r2
    7088:	182b883a 	mov	r21,r3
    708c:	b825883a 	mov	r18,r23
    7090:	000ed240 	call	ed24 <__eqdf2>
    7094:	10022626 	beq	r2,zero,7930 <_dtoa_r+0x1130>
    7098:	880d883a 	mov	r6,r17
    709c:	a00f883a 	mov	r7,r20
    70a0:	9809883a 	mov	r4,r19
    70a4:	a80b883a 	mov	r5,r21
    70a8:	000e3a40 	call	e3a4 <__divdf3>
    70ac:	180b883a 	mov	r5,r3
    70b0:	1009883a 	mov	r4,r2
    70b4:	00100a40 	call	100a4 <__fixdfsi>
    70b8:	1009883a 	mov	r4,r2
    70bc:	1021883a 	mov	r16,r2
    70c0:	001012c0 	call	1012c <__floatsidf>
    70c4:	1009883a 	mov	r4,r2
    70c8:	180b883a 	mov	r5,r3
    70cc:	880d883a 	mov	r6,r17
    70d0:	a00f883a 	mov	r7,r20
    70d4:	000ef680 	call	ef68 <__muldf3>
    70d8:	9809883a 	mov	r4,r19
    70dc:	a80b883a 	mov	r5,r21
    70e0:	100d883a 	mov	r6,r2
    70e4:	180f883a 	mov	r7,r3
    70e8:	000f7d40 	call	f7d4 <__subdf3>
    70ec:	82000c04 	addi	r8,r16,48
    70f0:	92000005 	stb	r8,0(r18)
    70f4:	1009883a 	mov	r4,r2
    70f8:	180b883a 	mov	r5,r3
    70fc:	000d883a 	mov	r6,zero
    7100:	01d00934 	movhi	r7,16420
    7104:	1011883a 	mov	r8,r2
    7108:	bdc00044 	addi	r23,r23,1
    710c:	95bfd81e 	bne	r18,r22,7070 <__alt_data_end+0xfffb1940>
    7110:	802d883a 	mov	r22,r16
    7114:	dc000317 	ldw	r16,12(sp)
    7118:	4009883a 	mov	r4,r8
    711c:	180b883a 	mov	r5,r3
    7120:	400d883a 	mov	r6,r8
    7124:	180f883a 	mov	r7,r3
    7128:	000db080 	call	db08 <__adddf3>
    712c:	8809883a 	mov	r4,r17
    7130:	a00b883a 	mov	r5,r20
    7134:	100d883a 	mov	r6,r2
    7138:	180f883a 	mov	r7,r3
    713c:	1027883a 	mov	r19,r2
    7140:	1825883a 	mov	r18,r3
    7144:	000ee880 	call	ee88 <__ledf2>
    7148:	10000816 	blt	r2,zero,716c <_dtoa_r+0x96c>
    714c:	8809883a 	mov	r4,r17
    7150:	a00b883a 	mov	r5,r20
    7154:	980d883a 	mov	r6,r19
    7158:	900f883a 	mov	r7,r18
    715c:	000ed240 	call	ed24 <__eqdf2>
    7160:	103f551e 	bne	r2,zero,6eb8 <__alt_data_end+0xfffb1788>
    7164:	b580004c 	andi	r22,r22,1
    7168:	b03f5326 	beq	r22,zero,6eb8 <__alt_data_end+0xfffb1788>
    716c:	bd7fffc3 	ldbu	r21,-1(r23)
    7170:	b8bfffc4 	addi	r2,r23,-1
    7174:	1007883a 	mov	r3,r2
    7178:	01400e44 	movi	r5,57
    717c:	d9800717 	ldw	r6,28(sp)
    7180:	00000506 	br	7198 <_dtoa_r+0x998>
    7184:	18ffffc4 	addi	r3,r3,-1
    7188:	30825e26 	beq	r6,r2,7b04 <_dtoa_r+0x1304>
    718c:	1d400003 	ldbu	r21,0(r3)
    7190:	102f883a 	mov	r23,r2
    7194:	10bfffc4 	addi	r2,r2,-1
    7198:	a9003fcc 	andi	r4,r21,255
    719c:	2100201c 	xori	r4,r4,128
    71a0:	213fe004 	addi	r4,r4,-128
    71a4:	217ff726 	beq	r4,r5,7184 <__alt_data_end+0xfffb1a54>
    71a8:	aa000044 	addi	r8,r21,1
    71ac:	12000005 	stb	r8,0(r2)
    71b0:	003f4106 	br	6eb8 <__alt_data_end+0xfffb1788>
    71b4:	d8c00b17 	ldw	r3,44(sp)
    71b8:	18006726 	beq	r3,zero,7358 <_dtoa_r+0xb58>
    71bc:	d9000317 	ldw	r4,12(sp)
    71c0:	00c00044 	movi	r3,1
    71c4:	19016a0e 	bge	r3,r4,7770 <_dtoa_r+0xf70>
    71c8:	d8800617 	ldw	r2,24(sp)
    71cc:	d8c00917 	ldw	r3,36(sp)
    71d0:	157fffc4 	addi	r21,r2,-1
    71d4:	1d420716 	blt	r3,r21,79f4 <_dtoa_r+0x11f4>
    71d8:	1d6bc83a 	sub	r21,r3,r21
    71dc:	d8800617 	ldw	r2,24(sp)
    71e0:	1002c716 	blt	r2,zero,7d00 <_dtoa_r+0x1500>
    71e4:	dd000817 	ldw	r20,32(sp)
    71e8:	d8800617 	ldw	r2,24(sp)
    71ec:	d9800817 	ldw	r6,32(sp)
    71f0:	8009883a 	mov	r4,r16
    71f4:	01400044 	movi	r5,1
    71f8:	308d883a 	add	r6,r6,r2
    71fc:	d9800815 	stw	r6,32(sp)
    7200:	b0ad883a 	add	r22,r22,r2
    7204:	0009abc0 	call	9abc <__i2b>
    7208:	1023883a 	mov	r17,r2
    720c:	a0000826 	beq	r20,zero,7230 <_dtoa_r+0xa30>
    7210:	0580070e 	bge	zero,r22,7230 <_dtoa_r+0xa30>
    7214:	b005883a 	mov	r2,r22
    7218:	a5812016 	blt	r20,r22,769c <_dtoa_r+0xe9c>
    721c:	d8c00817 	ldw	r3,32(sp)
    7220:	a0a9c83a 	sub	r20,r20,r2
    7224:	b0adc83a 	sub	r22,r22,r2
    7228:	1887c83a 	sub	r3,r3,r2
    722c:	d8c00815 	stw	r3,32(sp)
    7230:	d9000917 	ldw	r4,36(sp)
    7234:	0100140e 	bge	zero,r4,7288 <_dtoa_r+0xa88>
    7238:	d9800b17 	ldw	r6,44(sp)
    723c:	3001e526 	beq	r6,zero,79d4 <_dtoa_r+0x11d4>
    7240:	05400e0e 	bge	zero,r21,727c <_dtoa_r+0xa7c>
    7244:	880b883a 	mov	r5,r17
    7248:	8009883a 	mov	r4,r16
    724c:	a80d883a 	mov	r6,r21
    7250:	0009d880 	call	9d88 <__pow5mult>
    7254:	e00d883a 	mov	r6,fp
    7258:	8009883a 	mov	r4,r16
    725c:	100b883a 	mov	r5,r2
    7260:	1023883a 	mov	r17,r2
    7264:	0009af80 	call	9af8 <__multiply>
    7268:	102f883a 	mov	r23,r2
    726c:	e00b883a 	mov	r5,fp
    7270:	8009883a 	mov	r4,r16
    7274:	000973c0 	call	973c <_Bfree>
    7278:	b839883a 	mov	fp,r23
    727c:	d8800917 	ldw	r2,36(sp)
    7280:	154dc83a 	sub	r6,r2,r21
    7284:	3001281e 	bne	r6,zero,7728 <_dtoa_r+0xf28>
    7288:	05c00044 	movi	r23,1
    728c:	8009883a 	mov	r4,r16
    7290:	b80b883a 	mov	r5,r23
    7294:	0009abc0 	call	9abc <__i2b>
    7298:	d8c00a17 	ldw	r3,40(sp)
    729c:	102b883a 	mov	r21,r2
    72a0:	00c0310e 	bge	zero,r3,7368 <_dtoa_r+0xb68>
    72a4:	8009883a 	mov	r4,r16
    72a8:	100b883a 	mov	r5,r2
    72ac:	180d883a 	mov	r6,r3
    72b0:	0009d880 	call	9d88 <__pow5mult>
    72b4:	d9000317 	ldw	r4,12(sp)
    72b8:	102b883a 	mov	r21,r2
    72bc:	b9011f0e 	bge	r23,r4,773c <_dtoa_r+0xf3c>
    72c0:	0027883a 	mov	r19,zero
    72c4:	a8800417 	ldw	r2,16(r21)
    72c8:	10800104 	addi	r2,r2,4
    72cc:	1085883a 	add	r2,r2,r2
    72d0:	1085883a 	add	r2,r2,r2
    72d4:	a885883a 	add	r2,r21,r2
    72d8:	11000017 	ldw	r4,0(r2)
    72dc:	00099a40 	call	99a4 <__hi0bits>
    72e0:	00c00804 	movi	r3,32
    72e4:	1885c83a 	sub	r2,r3,r2
    72e8:	00002506 	br	7380 <_dtoa_r+0xb80>
    72ec:	01800044 	movi	r6,1
    72f0:	d9800c15 	stw	r6,48(sp)
    72f4:	003dec06 	br	6aa8 <__alt_data_end+0xfffb1378>
    72f8:	d8c00817 	ldw	r3,32(sp)
    72fc:	d9000517 	ldw	r4,20(sp)
    7300:	d8000a15 	stw	zero,40(sp)
    7304:	1907c83a 	sub	r3,r3,r4
    7308:	010dc83a 	sub	r6,zero,r4
    730c:	d8c00815 	stw	r3,32(sp)
    7310:	d9800915 	stw	r6,36(sp)
    7314:	003ded06 	br	6acc <__alt_data_end+0xfffb139c>
    7318:	05adc83a 	sub	r22,zero,r22
    731c:	dd800815 	stw	r22,32(sp)
    7320:	002d883a 	mov	r22,zero
    7324:	003de406 	br	6ab8 <__alt_data_end+0xfffb1388>
    7328:	d9000517 	ldw	r4,20(sp)
    732c:	001012c0 	call	1012c <__floatsidf>
    7330:	1009883a 	mov	r4,r2
    7334:	180b883a 	mov	r5,r3
    7338:	b00d883a 	mov	r6,r22
    733c:	a80f883a 	mov	r7,r21
    7340:	000ed240 	call	ed24 <__eqdf2>
    7344:	103dc726 	beq	r2,zero,6a64 <__alt_data_end+0xfffb1334>
    7348:	d8800517 	ldw	r2,20(sp)
    734c:	10bfffc4 	addi	r2,r2,-1
    7350:	d8800515 	stw	r2,20(sp)
    7354:	003dc306 	br	6a64 <__alt_data_end+0xfffb1334>
    7358:	dd400917 	ldw	r21,36(sp)
    735c:	dd000817 	ldw	r20,32(sp)
    7360:	0023883a 	mov	r17,zero
    7364:	003fa906 	br	720c <__alt_data_end+0xfffb1adc>
    7368:	d9800317 	ldw	r6,12(sp)
    736c:	b981670e 	bge	r23,r6,790c <_dtoa_r+0x110c>
    7370:	0027883a 	mov	r19,zero
    7374:	d8c00a17 	ldw	r3,40(sp)
    7378:	183fd21e 	bne	r3,zero,72c4 <__alt_data_end+0xfffb1b94>
    737c:	00800044 	movi	r2,1
    7380:	1585883a 	add	r2,r2,r22
    7384:	108007cc 	andi	r2,r2,31
    7388:	10005f26 	beq	r2,zero,7508 <_dtoa_r+0xd08>
    738c:	00c00804 	movi	r3,32
    7390:	1887c83a 	sub	r3,r3,r2
    7394:	01000104 	movi	r4,4
    7398:	20c2dd0e 	bge	r4,r3,7f10 <_dtoa_r+0x1710>
    739c:	d9000817 	ldw	r4,32(sp)
    73a0:	00c00704 	movi	r3,28
    73a4:	1885c83a 	sub	r2,r3,r2
    73a8:	2089883a 	add	r4,r4,r2
    73ac:	d9000815 	stw	r4,32(sp)
    73b0:	a0a9883a 	add	r20,r20,r2
    73b4:	b0ad883a 	add	r22,r22,r2
    73b8:	d8800817 	ldw	r2,32(sp)
    73bc:	0080050e 	bge	zero,r2,73d4 <_dtoa_r+0xbd4>
    73c0:	e00b883a 	mov	r5,fp
    73c4:	8009883a 	mov	r4,r16
    73c8:	100d883a 	mov	r6,r2
    73cc:	0009ec80 	call	9ec8 <__lshift>
    73d0:	1039883a 	mov	fp,r2
    73d4:	0580050e 	bge	zero,r22,73ec <_dtoa_r+0xbec>
    73d8:	a80b883a 	mov	r5,r21
    73dc:	8009883a 	mov	r4,r16
    73e0:	b00d883a 	mov	r6,r22
    73e4:	0009ec80 	call	9ec8 <__lshift>
    73e8:	102b883a 	mov	r21,r2
    73ec:	d8c00c17 	ldw	r3,48(sp)
    73f0:	1801161e 	bne	r3,zero,784c <_dtoa_r+0x104c>
    73f4:	d8c00617 	ldw	r3,24(sp)
    73f8:	00c12d0e 	bge	zero,r3,78b0 <_dtoa_r+0x10b0>
    73fc:	d8c00b17 	ldw	r3,44(sp)
    7400:	1800571e 	bne	r3,zero,7560 <_dtoa_r+0xd60>
    7404:	dc800717 	ldw	r18,28(sp)
    7408:	dcc00617 	ldw	r19,24(sp)
    740c:	9029883a 	mov	r20,r18
    7410:	00000206 	br	741c <_dtoa_r+0xc1c>
    7414:	00097640 	call	9764 <__multadd>
    7418:	1039883a 	mov	fp,r2
    741c:	e009883a 	mov	r4,fp
    7420:	a80b883a 	mov	r5,r21
    7424:	00065d80 	call	65d8 <quorem>
    7428:	10800c04 	addi	r2,r2,48
    742c:	90800005 	stb	r2,0(r18)
    7430:	94800044 	addi	r18,r18,1
    7434:	9507c83a 	sub	r3,r18,r20
    7438:	8009883a 	mov	r4,r16
    743c:	e00b883a 	mov	r5,fp
    7440:	01800284 	movi	r6,10
    7444:	000f883a 	mov	r7,zero
    7448:	1cfff216 	blt	r3,r19,7414 <__alt_data_end+0xfffb1ce4>
    744c:	1011883a 	mov	r8,r2
    7450:	d8800617 	ldw	r2,24(sp)
    7454:	00822e0e 	bge	zero,r2,7d10 <_dtoa_r+0x1510>
    7458:	d9000717 	ldw	r4,28(sp)
    745c:	0025883a 	mov	r18,zero
    7460:	20af883a 	add	r23,r4,r2
    7464:	e00b883a 	mov	r5,fp
    7468:	01800044 	movi	r6,1
    746c:	8009883a 	mov	r4,r16
    7470:	da001715 	stw	r8,92(sp)
    7474:	0009ec80 	call	9ec8 <__lshift>
    7478:	1009883a 	mov	r4,r2
    747c:	a80b883a 	mov	r5,r21
    7480:	1039883a 	mov	fp,r2
    7484:	000a0100 	call	a010 <__mcmp>
    7488:	da001717 	ldw	r8,92(sp)
    748c:	00816e0e 	bge	zero,r2,7a48 <_dtoa_r+0x1248>
    7490:	b93fffc3 	ldbu	r4,-1(r23)
    7494:	b8bfffc4 	addi	r2,r23,-1
    7498:	1007883a 	mov	r3,r2
    749c:	01800e44 	movi	r6,57
    74a0:	d9c00717 	ldw	r7,28(sp)
    74a4:	00000506 	br	74bc <_dtoa_r+0xcbc>
    74a8:	18ffffc4 	addi	r3,r3,-1
    74ac:	38811926 	beq	r7,r2,7914 <_dtoa_r+0x1114>
    74b0:	19000003 	ldbu	r4,0(r3)
    74b4:	102f883a 	mov	r23,r2
    74b8:	10bfffc4 	addi	r2,r2,-1
    74bc:	21403fcc 	andi	r5,r4,255
    74c0:	2940201c 	xori	r5,r5,128
    74c4:	297fe004 	addi	r5,r5,-128
    74c8:	29bff726 	beq	r5,r6,74a8 <__alt_data_end+0xfffb1d78>
    74cc:	21000044 	addi	r4,r4,1
    74d0:	11000005 	stb	r4,0(r2)
    74d4:	8009883a 	mov	r4,r16
    74d8:	a80b883a 	mov	r5,r21
    74dc:	000973c0 	call	973c <_Bfree>
    74e0:	883e7526 	beq	r17,zero,6eb8 <__alt_data_end+0xfffb1788>
    74e4:	90000426 	beq	r18,zero,74f8 <_dtoa_r+0xcf8>
    74e8:	94400326 	beq	r18,r17,74f8 <_dtoa_r+0xcf8>
    74ec:	8009883a 	mov	r4,r16
    74f0:	900b883a 	mov	r5,r18
    74f4:	000973c0 	call	973c <_Bfree>
    74f8:	8009883a 	mov	r4,r16
    74fc:	880b883a 	mov	r5,r17
    7500:	000973c0 	call	973c <_Bfree>
    7504:	003e6c06 	br	6eb8 <__alt_data_end+0xfffb1788>
    7508:	00800704 	movi	r2,28
    750c:	d9800817 	ldw	r6,32(sp)
    7510:	a0a9883a 	add	r20,r20,r2
    7514:	b0ad883a 	add	r22,r22,r2
    7518:	308d883a 	add	r6,r6,r2
    751c:	d9800815 	stw	r6,32(sp)
    7520:	003fa506 	br	73b8 <__alt_data_end+0xfffb1c88>
    7524:	013efb84 	movi	r4,-1042
    7528:	246bc83a 	sub	r21,r4,r17
    752c:	9548983a 	sll	r4,r18,r21
    7530:	003d1806 	br	6994 <__alt_data_end+0xfffb1264>
    7534:	d8000c15 	stw	zero,48(sp)
    7538:	003d5b06 	br	6aa8 <__alt_data_end+0xfffb1378>
    753c:	880b883a 	mov	r5,r17
    7540:	8009883a 	mov	r4,r16
    7544:	01800284 	movi	r6,10
    7548:	000f883a 	mov	r7,zero
    754c:	00097640 	call	9764 <__multadd>
    7550:	1023883a 	mov	r17,r2
    7554:	d8800d17 	ldw	r2,52(sp)
    7558:	0082550e 	bge	zero,r2,7eb0 <_dtoa_r+0x16b0>
    755c:	d8800615 	stw	r2,24(sp)
    7560:	0500050e 	bge	zero,r20,7578 <_dtoa_r+0xd78>
    7564:	880b883a 	mov	r5,r17
    7568:	8009883a 	mov	r4,r16
    756c:	a00d883a 	mov	r6,r20
    7570:	0009ec80 	call	9ec8 <__lshift>
    7574:	1023883a 	mov	r17,r2
    7578:	98016a1e 	bne	r19,zero,7b24 <_dtoa_r+0x1324>
    757c:	8829883a 	mov	r20,r17
    7580:	d9000617 	ldw	r4,24(sp)
    7584:	dcc00717 	ldw	r19,28(sp)
    7588:	9480004c 	andi	r18,r18,1
    758c:	20bfffc4 	addi	r2,r4,-1
    7590:	9885883a 	add	r2,r19,r2
    7594:	d8800415 	stw	r2,16(sp)
    7598:	dc800615 	stw	r18,24(sp)
    759c:	e009883a 	mov	r4,fp
    75a0:	a80b883a 	mov	r5,r21
    75a4:	00065d80 	call	65d8 <quorem>
    75a8:	e009883a 	mov	r4,fp
    75ac:	880b883a 	mov	r5,r17
    75b0:	102f883a 	mov	r23,r2
    75b4:	000a0100 	call	a010 <__mcmp>
    75b8:	8009883a 	mov	r4,r16
    75bc:	a80b883a 	mov	r5,r21
    75c0:	a00d883a 	mov	r6,r20
    75c4:	102d883a 	mov	r22,r2
    75c8:	000a0700 	call	a070 <__mdiff>
    75cc:	1007883a 	mov	r3,r2
    75d0:	10800317 	ldw	r2,12(r2)
    75d4:	bc800c04 	addi	r18,r23,48
    75d8:	1000971e 	bne	r2,zero,7838 <_dtoa_r+0x1038>
    75dc:	180b883a 	mov	r5,r3
    75e0:	e009883a 	mov	r4,fp
    75e4:	d8c01515 	stw	r3,84(sp)
    75e8:	000a0100 	call	a010 <__mcmp>
    75ec:	d8c01517 	ldw	r3,84(sp)
    75f0:	8009883a 	mov	r4,r16
    75f4:	d8801515 	stw	r2,84(sp)
    75f8:	180b883a 	mov	r5,r3
    75fc:	000973c0 	call	973c <_Bfree>
    7600:	d8801517 	ldw	r2,84(sp)
    7604:	1000041e 	bne	r2,zero,7618 <_dtoa_r+0xe18>
    7608:	d9800317 	ldw	r6,12(sp)
    760c:	3000021e 	bne	r6,zero,7618 <_dtoa_r+0xe18>
    7610:	d8c00617 	ldw	r3,24(sp)
    7614:	18007626 	beq	r3,zero,77f0 <_dtoa_r+0xff0>
    7618:	b0005b16 	blt	r22,zero,7788 <_dtoa_r+0xf88>
    761c:	b000041e 	bne	r22,zero,7630 <_dtoa_r+0xe30>
    7620:	d9000317 	ldw	r4,12(sp)
    7624:	2000021e 	bne	r4,zero,7630 <_dtoa_r+0xe30>
    7628:	d8c00617 	ldw	r3,24(sp)
    762c:	18005626 	beq	r3,zero,7788 <_dtoa_r+0xf88>
    7630:	00814d16 	blt	zero,r2,7b68 <_dtoa_r+0x1368>
    7634:	d8c00417 	ldw	r3,16(sp)
    7638:	9d800044 	addi	r22,r19,1
    763c:	9c800005 	stb	r18,0(r19)
    7640:	b02f883a 	mov	r23,r22
    7644:	98c14c26 	beq	r19,r3,7b78 <_dtoa_r+0x1378>
    7648:	e00b883a 	mov	r5,fp
    764c:	8009883a 	mov	r4,r16
    7650:	01800284 	movi	r6,10
    7654:	000f883a 	mov	r7,zero
    7658:	00097640 	call	9764 <__multadd>
    765c:	1039883a 	mov	fp,r2
    7660:	8d006d26 	beq	r17,r20,7818 <_dtoa_r+0x1018>
    7664:	880b883a 	mov	r5,r17
    7668:	01800284 	movi	r6,10
    766c:	000f883a 	mov	r7,zero
    7670:	8009883a 	mov	r4,r16
    7674:	00097640 	call	9764 <__multadd>
    7678:	a00b883a 	mov	r5,r20
    767c:	8009883a 	mov	r4,r16
    7680:	01800284 	movi	r6,10
    7684:	000f883a 	mov	r7,zero
    7688:	1023883a 	mov	r17,r2
    768c:	00097640 	call	9764 <__multadd>
    7690:	1029883a 	mov	r20,r2
    7694:	b027883a 	mov	r19,r22
    7698:	003fc006 	br	759c <__alt_data_end+0xfffb1e6c>
    769c:	a005883a 	mov	r2,r20
    76a0:	003ede06 	br	721c <__alt_data_end+0xfffb1aec>
    76a4:	01000044 	movi	r4,1
    76a8:	d9000b15 	stw	r4,44(sp)
    76ac:	d9802217 	ldw	r6,136(sp)
    76b0:	0180dc0e 	bge	zero,r6,7a24 <_dtoa_r+0x1224>
    76b4:	3023883a 	mov	r17,r6
    76b8:	d9800d15 	stw	r6,52(sp)
    76bc:	d9800615 	stw	r6,24(sp)
    76c0:	003d1e06 	br	6b3c <__alt_data_end+0xfffb140c>
    76c4:	d8800617 	ldw	r2,24(sp)
    76c8:	00be3716 	blt	zero,r2,6fa8 <__alt_data_end+0xfffb1878>
    76cc:	1000be1e 	bne	r2,zero,79c8 <_dtoa_r+0x11c8>
    76d0:	8809883a 	mov	r4,r17
    76d4:	a00b883a 	mov	r5,r20
    76d8:	000d883a 	mov	r6,zero
    76dc:	01d00534 	movhi	r7,16404
    76e0:	000ef680 	call	ef68 <__muldf3>
    76e4:	1009883a 	mov	r4,r2
    76e8:	180b883a 	mov	r5,r3
    76ec:	900d883a 	mov	r6,r18
    76f0:	980f883a 	mov	r7,r19
    76f4:	000eda80 	call	eda8 <__gedf2>
    76f8:	002b883a 	mov	r21,zero
    76fc:	0023883a 	mov	r17,zero
    7700:	10007a16 	blt	r2,zero,78ec <_dtoa_r+0x10ec>
    7704:	d9002217 	ldw	r4,136(sp)
    7708:	ddc00717 	ldw	r23,28(sp)
    770c:	0108303a 	nor	r4,zero,r4
    7710:	d9000515 	stw	r4,20(sp)
    7714:	8009883a 	mov	r4,r16
    7718:	a80b883a 	mov	r5,r21
    771c:	000973c0 	call	973c <_Bfree>
    7720:	883f751e 	bne	r17,zero,74f8 <__alt_data_end+0xfffb1dc8>
    7724:	003de406 	br	6eb8 <__alt_data_end+0xfffb1788>
    7728:	e00b883a 	mov	r5,fp
    772c:	8009883a 	mov	r4,r16
    7730:	0009d880 	call	9d88 <__pow5mult>
    7734:	1039883a 	mov	fp,r2
    7738:	003ed306 	br	7288 <__alt_data_end+0xfffb1b58>
    773c:	903ee01e 	bne	r18,zero,72c0 <__alt_data_end+0xfffb1b90>
    7740:	00800434 	movhi	r2,16
    7744:	10bfffc4 	addi	r2,r2,-1
    7748:	9884703a 	and	r2,r19,r2
    774c:	103f081e 	bne	r2,zero,7370 <__alt_data_end+0xfffb1c40>
    7750:	9cdffc2c 	andhi	r19,r19,32752
    7754:	983f0626 	beq	r19,zero,7370 <__alt_data_end+0xfffb1c40>
    7758:	d8800817 	ldw	r2,32(sp)
    775c:	b5800044 	addi	r22,r22,1
    7760:	04c00044 	movi	r19,1
    7764:	10800044 	addi	r2,r2,1
    7768:	d8800815 	stw	r2,32(sp)
    776c:	003f0106 	br	7374 <__alt_data_end+0xfffb1c44>
    7770:	d9800f17 	ldw	r6,60(sp)
    7774:	30016826 	beq	r6,zero,7d18 <_dtoa_r+0x1518>
    7778:	10810cc4 	addi	r2,r2,1075
    777c:	dd400917 	ldw	r21,36(sp)
    7780:	dd000817 	ldw	r20,32(sp)
    7784:	003e9906 	br	71ec <__alt_data_end+0xfffb1abc>
    7788:	9011883a 	mov	r8,r18
    778c:	4007883a 	mov	r3,r8
    7790:	e02d883a 	mov	r22,fp
    7794:	0080100e 	bge	zero,r2,77d8 <_dtoa_r+0xfd8>
    7798:	01800044 	movi	r6,1
    779c:	8009883a 	mov	r4,r16
    77a0:	e00b883a 	mov	r5,fp
    77a4:	da001515 	stw	r8,84(sp)
    77a8:	da001715 	stw	r8,92(sp)
    77ac:	0009ec80 	call	9ec8 <__lshift>
    77b0:	1009883a 	mov	r4,r2
    77b4:	a80b883a 	mov	r5,r21
    77b8:	102d883a 	mov	r22,r2
    77bc:	000a0100 	call	a010 <__mcmp>
    77c0:	d8c01517 	ldw	r3,84(sp)
    77c4:	da001717 	ldw	r8,92(sp)
    77c8:	0081a50e 	bge	zero,r2,7e60 <_dtoa_r+0x1660>
    77cc:	00800e44 	movi	r2,57
    77d0:	40817b26 	beq	r8,r2,7dc0 <_dtoa_r+0x15c0>
    77d4:	40c00044 	addi	r3,r8,1
    77d8:	8825883a 	mov	r18,r17
    77dc:	9dc00044 	addi	r23,r19,1
    77e0:	98c00005 	stb	r3,0(r19)
    77e4:	a023883a 	mov	r17,r20
    77e8:	b039883a 	mov	fp,r22
    77ec:	003f3906 	br	74d4 <__alt_data_end+0xfffb1da4>
    77f0:	00800e44 	movi	r2,57
    77f4:	9011883a 	mov	r8,r18
    77f8:	90817226 	beq	r18,r2,7dc4 <_dtoa_r+0x15c4>
    77fc:	0580010e 	bge	zero,r22,7804 <_dtoa_r+0x1004>
    7800:	ba000c44 	addi	r8,r23,49
    7804:	8825883a 	mov	r18,r17
    7808:	9dc00044 	addi	r23,r19,1
    780c:	9a000005 	stb	r8,0(r19)
    7810:	a023883a 	mov	r17,r20
    7814:	003f2f06 	br	74d4 <__alt_data_end+0xfffb1da4>
    7818:	880b883a 	mov	r5,r17
    781c:	8009883a 	mov	r4,r16
    7820:	01800284 	movi	r6,10
    7824:	000f883a 	mov	r7,zero
    7828:	00097640 	call	9764 <__multadd>
    782c:	1023883a 	mov	r17,r2
    7830:	1029883a 	mov	r20,r2
    7834:	003f9706 	br	7694 <__alt_data_end+0xfffb1f64>
    7838:	8009883a 	mov	r4,r16
    783c:	180b883a 	mov	r5,r3
    7840:	000973c0 	call	973c <_Bfree>
    7844:	00800044 	movi	r2,1
    7848:	003f7306 	br	7618 <__alt_data_end+0xfffb1ee8>
    784c:	e009883a 	mov	r4,fp
    7850:	a80b883a 	mov	r5,r21
    7854:	000a0100 	call	a010 <__mcmp>
    7858:	103ee60e 	bge	r2,zero,73f4 <__alt_data_end+0xfffb1cc4>
    785c:	8009883a 	mov	r4,r16
    7860:	e00b883a 	mov	r5,fp
    7864:	01800284 	movi	r6,10
    7868:	000f883a 	mov	r7,zero
    786c:	00097640 	call	9764 <__multadd>
    7870:	d9000517 	ldw	r4,20(sp)
    7874:	d9800b17 	ldw	r6,44(sp)
    7878:	1039883a 	mov	fp,r2
    787c:	213fffc4 	addi	r4,r4,-1
    7880:	d9000515 	stw	r4,20(sp)
    7884:	303f2d1e 	bne	r6,zero,753c <__alt_data_end+0xfffb1e0c>
    7888:	d9000d17 	ldw	r4,52(sp)
    788c:	0101780e 	bge	zero,r4,7e70 <_dtoa_r+0x1670>
    7890:	d9000615 	stw	r4,24(sp)
    7894:	003edb06 	br	7404 <__alt_data_end+0xfffb1cd4>
    7898:	00800084 	movi	r2,2
    789c:	30818e1e 	bne	r6,r2,7ed8 <_dtoa_r+0x16d8>
    78a0:	d8000b15 	stw	zero,44(sp)
    78a4:	003f8106 	br	76ac <__alt_data_end+0xfffb1f7c>
    78a8:	d8800717 	ldw	r2,28(sp)
    78ac:	003c0306 	br	68bc <__alt_data_end+0xfffb118c>
    78b0:	d9000317 	ldw	r4,12(sp)
    78b4:	00800084 	movi	r2,2
    78b8:	113ed00e 	bge	r2,r4,73fc <__alt_data_end+0xfffb1ccc>
    78bc:	d8c00617 	ldw	r3,24(sp)
    78c0:	183f901e 	bne	r3,zero,7704 <__alt_data_end+0xfffb1fd4>
    78c4:	a80b883a 	mov	r5,r21
    78c8:	8009883a 	mov	r4,r16
    78cc:	01800144 	movi	r6,5
    78d0:	000f883a 	mov	r7,zero
    78d4:	00097640 	call	9764 <__multadd>
    78d8:	e009883a 	mov	r4,fp
    78dc:	100b883a 	mov	r5,r2
    78e0:	102b883a 	mov	r21,r2
    78e4:	000a0100 	call	a010 <__mcmp>
    78e8:	00bf860e 	bge	zero,r2,7704 <__alt_data_end+0xfffb1fd4>
    78ec:	d9800717 	ldw	r6,28(sp)
    78f0:	00800c44 	movi	r2,49
    78f4:	30800005 	stb	r2,0(r6)
    78f8:	d8800517 	ldw	r2,20(sp)
    78fc:	35c00044 	addi	r23,r6,1
    7900:	10800044 	addi	r2,r2,1
    7904:	d8800515 	stw	r2,20(sp)
    7908:	003f8206 	br	7714 <__alt_data_end+0xfffb1fe4>
    790c:	903e981e 	bne	r18,zero,7370 <__alt_data_end+0xfffb1c40>
    7910:	003f8b06 	br	7740 <__alt_data_end+0xfffb2010>
    7914:	d9800517 	ldw	r6,20(sp)
    7918:	d8c00717 	ldw	r3,28(sp)
    791c:	00800c44 	movi	r2,49
    7920:	31800044 	addi	r6,r6,1
    7924:	d9800515 	stw	r6,20(sp)
    7928:	18800005 	stb	r2,0(r3)
    792c:	003ee906 	br	74d4 <__alt_data_end+0xfffb1da4>
    7930:	dc000317 	ldw	r16,12(sp)
    7934:	003d6006 	br	6eb8 <__alt_data_end+0xfffb1788>
    7938:	8809883a 	mov	r4,r17
    793c:	001012c0 	call	1012c <__floatsidf>
    7940:	a009883a 	mov	r4,r20
    7944:	a80b883a 	mov	r5,r21
    7948:	100d883a 	mov	r6,r2
    794c:	180f883a 	mov	r7,r3
    7950:	000ef680 	call	ef68 <__muldf3>
    7954:	1009883a 	mov	r4,r2
    7958:	180b883a 	mov	r5,r3
    795c:	000d883a 	mov	r6,zero
    7960:	01d00734 	movhi	r7,16412
    7964:	000db080 	call	db08 <__adddf3>
    7968:	1023883a 	mov	r17,r2
    796c:	00bf3034 	movhi	r2,64704
    7970:	1885883a 	add	r2,r3,r2
    7974:	d8800e15 	stw	r2,56(sp)
    7978:	a009883a 	mov	r4,r20
    797c:	a80b883a 	mov	r5,r21
    7980:	000d883a 	mov	r6,zero
    7984:	01d00534 	movhi	r7,16404
    7988:	000f7d40 	call	f7d4 <__subdf3>
    798c:	d9c00e17 	ldw	r7,56(sp)
    7990:	1009883a 	mov	r4,r2
    7994:	180b883a 	mov	r5,r3
    7998:	880d883a 	mov	r6,r17
    799c:	102b883a 	mov	r21,r2
    79a0:	1829883a 	mov	r20,r3
    79a4:	000eda80 	call	eda8 <__gedf2>
    79a8:	00807716 	blt	zero,r2,7b88 <_dtoa_r+0x1388>
    79ac:	d8800e17 	ldw	r2,56(sp)
    79b0:	a809883a 	mov	r4,r21
    79b4:	a00b883a 	mov	r5,r20
    79b8:	11e0003c 	xorhi	r7,r2,32768
    79bc:	880d883a 	mov	r6,r17
    79c0:	000ee880 	call	ee88 <__ledf2>
    79c4:	103d6b0e 	bge	r2,zero,6f74 <__alt_data_end+0xfffb1844>
    79c8:	002b883a 	mov	r21,zero
    79cc:	0023883a 	mov	r17,zero
    79d0:	003f4c06 	br	7704 <__alt_data_end+0xfffb1fd4>
    79d4:	d9800917 	ldw	r6,36(sp)
    79d8:	e00b883a 	mov	r5,fp
    79dc:	8009883a 	mov	r4,r16
    79e0:	0009d880 	call	9d88 <__pow5mult>
    79e4:	1039883a 	mov	fp,r2
    79e8:	003e2706 	br	7288 <__alt_data_end+0xfffb1b58>
    79ec:	d8000b15 	stw	zero,44(sp)
    79f0:	003c4906 	br	6b18 <__alt_data_end+0xfffb13e8>
    79f4:	d9000917 	ldw	r4,36(sp)
    79f8:	d9800a17 	ldw	r6,40(sp)
    79fc:	dd400915 	stw	r21,36(sp)
    7a00:	a905c83a 	sub	r2,r21,r4
    7a04:	308d883a 	add	r6,r6,r2
    7a08:	d9800a15 	stw	r6,40(sp)
    7a0c:	002b883a 	mov	r21,zero
    7a10:	003df206 	br	71dc <__alt_data_end+0xfffb1aac>
    7a14:	dc800e15 	stw	r18,56(sp)
    7a18:	982b883a 	mov	r21,r19
    7a1c:	04400084 	movi	r17,2
    7a20:	003c7406 	br	6bf4 <__alt_data_end+0xfffb14c4>
    7a24:	04400044 	movi	r17,1
    7a28:	dc400d15 	stw	r17,52(sp)
    7a2c:	dc400615 	stw	r17,24(sp)
    7a30:	dc402215 	stw	r17,136(sp)
    7a34:	80001115 	stw	zero,68(r16)
    7a38:	000b883a 	mov	r5,zero
    7a3c:	003c4a06 	br	6b68 <__alt_data_end+0xfffb1438>
    7a40:	3023883a 	mov	r17,r6
    7a44:	003ffb06 	br	7a34 <__alt_data_end+0xfffb2304>
    7a48:	1000021e 	bne	r2,zero,7a54 <_dtoa_r+0x1254>
    7a4c:	4200004c 	andi	r8,r8,1
    7a50:	403e8f1e 	bne	r8,zero,7490 <__alt_data_end+0xfffb1d60>
    7a54:	01000c04 	movi	r4,48
    7a58:	00000106 	br	7a60 <_dtoa_r+0x1260>
    7a5c:	102f883a 	mov	r23,r2
    7a60:	b8bfffc4 	addi	r2,r23,-1
    7a64:	10c00007 	ldb	r3,0(r2)
    7a68:	193ffc26 	beq	r3,r4,7a5c <__alt_data_end+0xfffb232c>
    7a6c:	003e9906 	br	74d4 <__alt_data_end+0xfffb1da4>
    7a70:	d9000517 	ldw	r4,20(sp)
    7a74:	012fc83a 	sub	r23,zero,r4
    7a78:	b800ad26 	beq	r23,zero,7d30 <_dtoa_r+0x1530>
    7a7c:	b88003cc 	andi	r2,r23,15
    7a80:	100490fa 	slli	r2,r2,3
    7a84:	00c00074 	movhi	r3,1
    7a88:	18cd0804 	addi	r3,r3,13344
    7a8c:	1885883a 	add	r2,r3,r2
    7a90:	11800017 	ldw	r6,0(r2)
    7a94:	11c00117 	ldw	r7,4(r2)
    7a98:	b82fd13a 	srai	r23,r23,4
    7a9c:	9009883a 	mov	r4,r18
    7aa0:	980b883a 	mov	r5,r19
    7aa4:	000ef680 	call	ef68 <__muldf3>
    7aa8:	1029883a 	mov	r20,r2
    7aac:	182b883a 	mov	r21,r3
    7ab0:	b800f426 	beq	r23,zero,7e84 <_dtoa_r+0x1684>
    7ab4:	02000074 	movhi	r8,1
    7ab8:	420cfe04 	addi	r8,r8,13304
    7abc:	8029883a 	mov	r20,r16
    7ac0:	04400084 	movi	r17,2
    7ac4:	4021883a 	mov	r16,r8
    7ac8:	b980004c 	andi	r6,r23,1
    7acc:	1009883a 	mov	r4,r2
    7ad0:	b82fd07a 	srai	r23,r23,1
    7ad4:	180b883a 	mov	r5,r3
    7ad8:	30000426 	beq	r6,zero,7aec <_dtoa_r+0x12ec>
    7adc:	81800017 	ldw	r6,0(r16)
    7ae0:	81c00117 	ldw	r7,4(r16)
    7ae4:	8c400044 	addi	r17,r17,1
    7ae8:	000ef680 	call	ef68 <__muldf3>
    7aec:	84000204 	addi	r16,r16,8
    7af0:	b83ff51e 	bne	r23,zero,7ac8 <__alt_data_end+0xfffb2398>
    7af4:	a021883a 	mov	r16,r20
    7af8:	182b883a 	mov	r21,r3
    7afc:	1029883a 	mov	r20,r2
    7b00:	003c5506 	br	6c58 <__alt_data_end+0xfffb1528>
    7b04:	d9800517 	ldw	r6,20(sp)
    7b08:	d9000717 	ldw	r4,28(sp)
    7b0c:	00c00c04 	movi	r3,48
    7b10:	31800044 	addi	r6,r6,1
    7b14:	d9800515 	stw	r6,20(sp)
    7b18:	20c00005 	stb	r3,0(r4)
    7b1c:	02000c44 	movi	r8,49
    7b20:	003da206 	br	71ac <__alt_data_end+0xfffb1a7c>
    7b24:	89400117 	ldw	r5,4(r17)
    7b28:	8009883a 	mov	r4,r16
    7b2c:	00096940 	call	9694 <_Balloc>
    7b30:	89800417 	ldw	r6,16(r17)
    7b34:	11000304 	addi	r4,r2,12
    7b38:	89400304 	addi	r5,r17,12
    7b3c:	31800084 	addi	r6,r6,2
    7b40:	318d883a 	add	r6,r6,r6
    7b44:	318d883a 	add	r6,r6,r6
    7b48:	1027883a 	mov	r19,r2
    7b4c:	00092dc0 	call	92dc <memcpy>
    7b50:	8009883a 	mov	r4,r16
    7b54:	980b883a 	mov	r5,r19
    7b58:	01800044 	movi	r6,1
    7b5c:	0009ec80 	call	9ec8 <__lshift>
    7b60:	1029883a 	mov	r20,r2
    7b64:	003e8606 	br	7580 <__alt_data_end+0xfffb1e50>
    7b68:	00800e44 	movi	r2,57
    7b6c:	90809526 	beq	r18,r2,7dc4 <_dtoa_r+0x15c4>
    7b70:	92000044 	addi	r8,r18,1
    7b74:	003f2306 	br	7804 <__alt_data_end+0xfffb20d4>
    7b78:	9011883a 	mov	r8,r18
    7b7c:	8825883a 	mov	r18,r17
    7b80:	a023883a 	mov	r17,r20
    7b84:	003e3706 	br	7464 <__alt_data_end+0xfffb1d34>
    7b88:	002b883a 	mov	r21,zero
    7b8c:	0023883a 	mov	r17,zero
    7b90:	003f5606 	br	78ec <__alt_data_end+0xfffb21bc>
    7b94:	51bfffc4 	addi	r6,r10,-1
    7b98:	300490fa 	slli	r2,r6,3
    7b9c:	00c00074 	movhi	r3,1
    7ba0:	18cd0804 	addi	r3,r3,13344
    7ba4:	1885883a 	add	r2,r3,r2
    7ba8:	d9c00e17 	ldw	r7,56(sp)
    7bac:	11000017 	ldw	r4,0(r2)
    7bb0:	11400117 	ldw	r5,4(r2)
    7bb4:	d8800717 	ldw	r2,28(sp)
    7bb8:	d9801015 	stw	r6,64(sp)
    7bbc:	880d883a 	mov	r6,r17
    7bc0:	da801615 	stw	r10,88(sp)
    7bc4:	15c00044 	addi	r23,r2,1
    7bc8:	000ef680 	call	ef68 <__muldf3>
    7bcc:	a80b883a 	mov	r5,r21
    7bd0:	a009883a 	mov	r4,r20
    7bd4:	d8c01115 	stw	r3,68(sp)
    7bd8:	d8800e15 	stw	r2,56(sp)
    7bdc:	00100a40 	call	100a4 <__fixdfsi>
    7be0:	1009883a 	mov	r4,r2
    7be4:	1023883a 	mov	r17,r2
    7be8:	001012c0 	call	1012c <__floatsidf>
    7bec:	a009883a 	mov	r4,r20
    7bf0:	a80b883a 	mov	r5,r21
    7bf4:	100d883a 	mov	r6,r2
    7bf8:	180f883a 	mov	r7,r3
    7bfc:	000f7d40 	call	f7d4 <__subdf3>
    7c00:	1813883a 	mov	r9,r3
    7c04:	d8c00717 	ldw	r3,28(sp)
    7c08:	8c400c04 	addi	r17,r17,48
    7c0c:	1011883a 	mov	r8,r2
    7c10:	1c400005 	stb	r17,0(r3)
    7c14:	da801617 	ldw	r10,88(sp)
    7c18:	00800044 	movi	r2,1
    7c1c:	50802326 	beq	r10,r2,7cac <_dtoa_r+0x14ac>
    7c20:	d8800717 	ldw	r2,28(sp)
    7c24:	b82b883a 	mov	r21,r23
    7c28:	dc001315 	stw	r16,76(sp)
    7c2c:	12a9883a 	add	r20,r2,r10
    7c30:	4807883a 	mov	r3,r9
    7c34:	4005883a 	mov	r2,r8
    7c38:	dc801415 	stw	r18,80(sp)
    7c3c:	000d883a 	mov	r6,zero
    7c40:	01d00934 	movhi	r7,16420
    7c44:	1009883a 	mov	r4,r2
    7c48:	180b883a 	mov	r5,r3
    7c4c:	000ef680 	call	ef68 <__muldf3>
    7c50:	180b883a 	mov	r5,r3
    7c54:	1009883a 	mov	r4,r2
    7c58:	1821883a 	mov	r16,r3
    7c5c:	1025883a 	mov	r18,r2
    7c60:	00100a40 	call	100a4 <__fixdfsi>
    7c64:	1009883a 	mov	r4,r2
    7c68:	1023883a 	mov	r17,r2
    7c6c:	001012c0 	call	1012c <__floatsidf>
    7c70:	9009883a 	mov	r4,r18
    7c74:	800b883a 	mov	r5,r16
    7c78:	100d883a 	mov	r6,r2
    7c7c:	180f883a 	mov	r7,r3
    7c80:	8c400c04 	addi	r17,r17,48
    7c84:	000f7d40 	call	f7d4 <__subdf3>
    7c88:	ad400044 	addi	r21,r21,1
    7c8c:	ac7fffc5 	stb	r17,-1(r21)
    7c90:	ad3fea1e 	bne	r21,r20,7c3c <__alt_data_end+0xfffb250c>
    7c94:	1813883a 	mov	r9,r3
    7c98:	d8c01017 	ldw	r3,64(sp)
    7c9c:	dc001317 	ldw	r16,76(sp)
    7ca0:	dc801417 	ldw	r18,80(sp)
    7ca4:	1011883a 	mov	r8,r2
    7ca8:	b8ef883a 	add	r23,r23,r3
    7cac:	d9000e17 	ldw	r4,56(sp)
    7cb0:	d9401117 	ldw	r5,68(sp)
    7cb4:	000d883a 	mov	r6,zero
    7cb8:	01cff834 	movhi	r7,16352
    7cbc:	da001715 	stw	r8,92(sp)
    7cc0:	da401515 	stw	r9,84(sp)
    7cc4:	000db080 	call	db08 <__adddf3>
    7cc8:	da001717 	ldw	r8,92(sp)
    7ccc:	da401517 	ldw	r9,84(sp)
    7cd0:	1009883a 	mov	r4,r2
    7cd4:	400d883a 	mov	r6,r8
    7cd8:	480f883a 	mov	r7,r9
    7cdc:	180b883a 	mov	r5,r3
    7ce0:	000ee880 	call	ee88 <__ledf2>
    7ce4:	da001717 	ldw	r8,92(sp)
    7ce8:	da401517 	ldw	r9,84(sp)
    7cec:	10003b0e 	bge	r2,zero,7ddc <_dtoa_r+0x15dc>
    7cf0:	d9001217 	ldw	r4,72(sp)
    7cf4:	bd7fffc3 	ldbu	r21,-1(r23)
    7cf8:	d9000515 	stw	r4,20(sp)
    7cfc:	003d1c06 	br	7170 <__alt_data_end+0xfffb1a40>
    7d00:	d8c00817 	ldw	r3,32(sp)
    7d04:	18a9c83a 	sub	r20,r3,r2
    7d08:	0005883a 	mov	r2,zero
    7d0c:	003d3706 	br	71ec <__alt_data_end+0xfffb1abc>
    7d10:	00800044 	movi	r2,1
    7d14:	003dd006 	br	7458 <__alt_data_end+0xfffb1d28>
    7d18:	d8c00217 	ldw	r3,8(sp)
    7d1c:	00800d84 	movi	r2,54
    7d20:	dd400917 	ldw	r21,36(sp)
    7d24:	10c5c83a 	sub	r2,r2,r3
    7d28:	dd000817 	ldw	r20,32(sp)
    7d2c:	003d2f06 	br	71ec <__alt_data_end+0xfffb1abc>
    7d30:	9029883a 	mov	r20,r18
    7d34:	982b883a 	mov	r21,r19
    7d38:	04400084 	movi	r17,2
    7d3c:	003bc606 	br	6c58 <__alt_data_end+0xfffb1528>
    7d40:	d8800617 	ldw	r2,24(sp)
    7d44:	103efc26 	beq	r2,zero,7938 <__alt_data_end+0xfffb2208>
    7d48:	d8c00d17 	ldw	r3,52(sp)
    7d4c:	00fc890e 	bge	zero,r3,6f74 <__alt_data_end+0xfffb1844>
    7d50:	a80b883a 	mov	r5,r21
    7d54:	a009883a 	mov	r4,r20
    7d58:	000d883a 	mov	r6,zero
    7d5c:	01d00934 	movhi	r7,16420
    7d60:	000ef680 	call	ef68 <__muldf3>
    7d64:	89000044 	addi	r4,r17,1
    7d68:	1029883a 	mov	r20,r2
    7d6c:	182b883a 	mov	r21,r3
    7d70:	001012c0 	call	1012c <__floatsidf>
    7d74:	a009883a 	mov	r4,r20
    7d78:	a80b883a 	mov	r5,r21
    7d7c:	100d883a 	mov	r6,r2
    7d80:	180f883a 	mov	r7,r3
    7d84:	000ef680 	call	ef68 <__muldf3>
    7d88:	1009883a 	mov	r4,r2
    7d8c:	180b883a 	mov	r5,r3
    7d90:	000d883a 	mov	r6,zero
    7d94:	01d00734 	movhi	r7,16412
    7d98:	000db080 	call	db08 <__adddf3>
    7d9c:	d9000517 	ldw	r4,20(sp)
    7da0:	1023883a 	mov	r17,r2
    7da4:	00bf3034 	movhi	r2,64704
    7da8:	213fffc4 	addi	r4,r4,-1
    7dac:	1885883a 	add	r2,r3,r2
    7db0:	d9001215 	stw	r4,72(sp)
    7db4:	d8800e15 	stw	r2,56(sp)
    7db8:	da800d17 	ldw	r10,52(sp)
    7dbc:	003bc306 	br	6ccc <__alt_data_end+0xfffb159c>
    7dc0:	b039883a 	mov	fp,r22
    7dc4:	01000e44 	movi	r4,57
    7dc8:	8825883a 	mov	r18,r17
    7dcc:	9dc00044 	addi	r23,r19,1
    7dd0:	99000005 	stb	r4,0(r19)
    7dd4:	a023883a 	mov	r17,r20
    7dd8:	003dae06 	br	7494 <__alt_data_end+0xfffb1d64>
    7ddc:	d9800e17 	ldw	r6,56(sp)
    7de0:	d9c01117 	ldw	r7,68(sp)
    7de4:	0009883a 	mov	r4,zero
    7de8:	014ff834 	movhi	r5,16352
    7dec:	da001715 	stw	r8,92(sp)
    7df0:	da401515 	stw	r9,84(sp)
    7df4:	000f7d40 	call	f7d4 <__subdf3>
    7df8:	da001717 	ldw	r8,92(sp)
    7dfc:	da401517 	ldw	r9,84(sp)
    7e00:	1009883a 	mov	r4,r2
    7e04:	180b883a 	mov	r5,r3
    7e08:	400d883a 	mov	r6,r8
    7e0c:	480f883a 	mov	r7,r9
    7e10:	000eda80 	call	eda8 <__gedf2>
    7e14:	00bc570e 	bge	zero,r2,6f74 <__alt_data_end+0xfffb1844>
    7e18:	01000c04 	movi	r4,48
    7e1c:	00000106 	br	7e24 <_dtoa_r+0x1624>
    7e20:	102f883a 	mov	r23,r2
    7e24:	b8bfffc4 	addi	r2,r23,-1
    7e28:	10c00007 	ldb	r3,0(r2)
    7e2c:	193ffc26 	beq	r3,r4,7e20 <__alt_data_end+0xfffb26f0>
    7e30:	d9801217 	ldw	r6,72(sp)
    7e34:	d9800515 	stw	r6,20(sp)
    7e38:	003c1f06 	br	6eb8 <__alt_data_end+0xfffb1788>
    7e3c:	d8801217 	ldw	r2,72(sp)
    7e40:	dc001117 	ldw	r16,68(sp)
    7e44:	d8800515 	stw	r2,20(sp)
    7e48:	003cc906 	br	7170 <__alt_data_end+0xfffb1a40>
    7e4c:	dd801317 	ldw	r22,76(sp)
    7e50:	dc001117 	ldw	r16,68(sp)
    7e54:	dcc01417 	ldw	r19,80(sp)
    7e58:	dc801017 	ldw	r18,64(sp)
    7e5c:	003c4506 	br	6f74 <__alt_data_end+0xfffb1844>
    7e60:	103e5d1e 	bne	r2,zero,77d8 <__alt_data_end+0xfffb20a8>
    7e64:	4080004c 	andi	r2,r8,1
    7e68:	103e5b26 	beq	r2,zero,77d8 <__alt_data_end+0xfffb20a8>
    7e6c:	003e5706 	br	77cc <__alt_data_end+0xfffb209c>
    7e70:	d8c00317 	ldw	r3,12(sp)
    7e74:	00800084 	movi	r2,2
    7e78:	10c00a16 	blt	r2,r3,7ea4 <_dtoa_r+0x16a4>
    7e7c:	d9000d17 	ldw	r4,52(sp)
    7e80:	003e8306 	br	7890 <__alt_data_end+0xfffb2160>
    7e84:	04400084 	movi	r17,2
    7e88:	003b7306 	br	6c58 <__alt_data_end+0xfffb1528>
    7e8c:	d9801217 	ldw	r6,72(sp)
    7e90:	d9800515 	stw	r6,20(sp)
    7e94:	003cb606 	br	7170 <__alt_data_end+0xfffb1a40>
    7e98:	d9001217 	ldw	r4,72(sp)
    7e9c:	d9000515 	stw	r4,20(sp)
    7ea0:	003c0506 	br	6eb8 <__alt_data_end+0xfffb1788>
    7ea4:	d9800d17 	ldw	r6,52(sp)
    7ea8:	d9800615 	stw	r6,24(sp)
    7eac:	003e8306 	br	78bc <__alt_data_end+0xfffb218c>
    7eb0:	d9800317 	ldw	r6,12(sp)
    7eb4:	00800084 	movi	r2,2
    7eb8:	11800216 	blt	r2,r6,7ec4 <_dtoa_r+0x16c4>
    7ebc:	d8800d17 	ldw	r2,52(sp)
    7ec0:	003da606 	br	755c <__alt_data_end+0xfffb1e2c>
    7ec4:	d8800d17 	ldw	r2,52(sp)
    7ec8:	d8800615 	stw	r2,24(sp)
    7ecc:	003e7b06 	br	78bc <__alt_data_end+0xfffb218c>
    7ed0:	05000044 	movi	r20,1
    7ed4:	003b0506 	br	6aec <__alt_data_end+0xfffb13bc>
    7ed8:	8009883a 	mov	r4,r16
    7edc:	80001115 	stw	zero,68(r16)
    7ee0:	000b883a 	mov	r5,zero
    7ee4:	00096940 	call	9694 <_Balloc>
    7ee8:	d8800715 	stw	r2,28(sp)
    7eec:	d8c00717 	ldw	r3,28(sp)
    7ef0:	00bfffc4 	movi	r2,-1
    7ef4:	01000044 	movi	r4,1
    7ef8:	d8800615 	stw	r2,24(sp)
    7efc:	80c01015 	stw	r3,64(r16)
    7f00:	d9000b15 	stw	r4,44(sp)
    7f04:	d8002215 	stw	zero,136(sp)
    7f08:	d8800d15 	stw	r2,52(sp)
    7f0c:	003c1906 	br	6f74 <__alt_data_end+0xfffb1844>
    7f10:	193d2926 	beq	r3,r4,73b8 <__alt_data_end+0xfffb1c88>
    7f14:	00c00f04 	movi	r3,60
    7f18:	1885c83a 	sub	r2,r3,r2
    7f1c:	003d7b06 	br	750c <__alt_data_end+0xfffb1ddc>
    7f20:	000b883a 	mov	r5,zero
    7f24:	003b1006 	br	6b68 <__alt_data_end+0xfffb1438>

00007f28 <_fflush_r>:
    7f28:	defffb04 	addi	sp,sp,-20
    7f2c:	dcc00315 	stw	r19,12(sp)
    7f30:	dc000015 	stw	r16,0(sp)
    7f34:	dfc00415 	stw	ra,16(sp)
    7f38:	dc800215 	stw	r18,8(sp)
    7f3c:	dc400115 	stw	r17,4(sp)
    7f40:	2027883a 	mov	r19,r4
    7f44:	2821883a 	mov	r16,r5
    7f48:	20000226 	beq	r4,zero,7f54 <_fflush_r+0x2c>
    7f4c:	20800e17 	ldw	r2,56(r4)
    7f50:	10005326 	beq	r2,zero,80a0 <_fflush_r+0x178>
    7f54:	8080030b 	ldhu	r2,12(r16)
    7f58:	10ffffcc 	andi	r3,r2,65535
    7f5c:	18e0001c 	xori	r3,r3,32768
    7f60:	18e00004 	addi	r3,r3,-32768
    7f64:	18002c26 	beq	r3,zero,8018 <_fflush_r+0xf0>
    7f68:	10c0020c 	andi	r3,r2,8
    7f6c:	1800321e 	bne	r3,zero,8038 <_fflush_r+0x110>
    7f70:	80c00117 	ldw	r3,4(r16)
    7f74:	10820014 	ori	r2,r2,2048
    7f78:	8080030d 	sth	r2,12(r16)
    7f7c:	00c0570e 	bge	zero,r3,80dc <_fflush_r+0x1b4>
    7f80:	82000a17 	ldw	r8,40(r16)
    7f84:	40002426 	beq	r8,zero,8018 <_fflush_r+0xf0>
    7f88:	9c400017 	ldw	r17,0(r19)
    7f8c:	10c4000c 	andi	r3,r2,4096
    7f90:	98000015 	stw	zero,0(r19)
    7f94:	18004626 	beq	r3,zero,80b0 <_fflush_r+0x188>
    7f98:	81801417 	ldw	r6,80(r16)
    7f9c:	10c0010c 	andi	r3,r2,4
    7fa0:	18000626 	beq	r3,zero,7fbc <_fflush_r+0x94>
    7fa4:	80c00117 	ldw	r3,4(r16)
    7fa8:	80800c17 	ldw	r2,48(r16)
    7fac:	30cdc83a 	sub	r6,r6,r3
    7fb0:	10000226 	beq	r2,zero,7fbc <_fflush_r+0x94>
    7fb4:	80800f17 	ldw	r2,60(r16)
    7fb8:	308dc83a 	sub	r6,r6,r2
    7fbc:	81400717 	ldw	r5,28(r16)
    7fc0:	9809883a 	mov	r4,r19
    7fc4:	000f883a 	mov	r7,zero
    7fc8:	403ee83a 	callr	r8
    7fcc:	00ffffc4 	movi	r3,-1
    7fd0:	10c04526 	beq	r2,r3,80e8 <_fflush_r+0x1c0>
    7fd4:	80c0030b 	ldhu	r3,12(r16)
    7fd8:	81000417 	ldw	r4,16(r16)
    7fdc:	80000115 	stw	zero,4(r16)
    7fe0:	197dffcc 	andi	r5,r3,63487
    7fe4:	8140030d 	sth	r5,12(r16)
    7fe8:	81000015 	stw	r4,0(r16)
    7fec:	18c4000c 	andi	r3,r3,4096
    7ff0:	18000126 	beq	r3,zero,7ff8 <_fflush_r+0xd0>
    7ff4:	80801415 	stw	r2,80(r16)
    7ff8:	81400c17 	ldw	r5,48(r16)
    7ffc:	9c400015 	stw	r17,0(r19)
    8000:	28000526 	beq	r5,zero,8018 <_fflush_r+0xf0>
    8004:	80801004 	addi	r2,r16,64
    8008:	28800226 	beq	r5,r2,8014 <_fflush_r+0xec>
    800c:	9809883a 	mov	r4,r19
    8010:	00086580 	call	8658 <_free_r>
    8014:	80000c15 	stw	zero,48(r16)
    8018:	0005883a 	mov	r2,zero
    801c:	dfc00417 	ldw	ra,16(sp)
    8020:	dcc00317 	ldw	r19,12(sp)
    8024:	dc800217 	ldw	r18,8(sp)
    8028:	dc400117 	ldw	r17,4(sp)
    802c:	dc000017 	ldw	r16,0(sp)
    8030:	dec00504 	addi	sp,sp,20
    8034:	f800283a 	ret
    8038:	84800417 	ldw	r18,16(r16)
    803c:	903ff626 	beq	r18,zero,8018 <__alt_data_end+0xfffb28e8>
    8040:	84400017 	ldw	r17,0(r16)
    8044:	108000cc 	andi	r2,r2,3
    8048:	84800015 	stw	r18,0(r16)
    804c:	8ca3c83a 	sub	r17,r17,r18
    8050:	10001526 	beq	r2,zero,80a8 <_fflush_r+0x180>
    8054:	0005883a 	mov	r2,zero
    8058:	80800215 	stw	r2,8(r16)
    805c:	04400316 	blt	zero,r17,806c <_fflush_r+0x144>
    8060:	003fed06 	br	8018 <__alt_data_end+0xfffb28e8>
    8064:	90a5883a 	add	r18,r18,r2
    8068:	047feb0e 	bge	zero,r17,8018 <__alt_data_end+0xfffb28e8>
    806c:	80800917 	ldw	r2,36(r16)
    8070:	81400717 	ldw	r5,28(r16)
    8074:	880f883a 	mov	r7,r17
    8078:	900d883a 	mov	r6,r18
    807c:	9809883a 	mov	r4,r19
    8080:	103ee83a 	callr	r2
    8084:	88a3c83a 	sub	r17,r17,r2
    8088:	00bff616 	blt	zero,r2,8064 <__alt_data_end+0xfffb2934>
    808c:	80c0030b 	ldhu	r3,12(r16)
    8090:	00bfffc4 	movi	r2,-1
    8094:	18c01014 	ori	r3,r3,64
    8098:	80c0030d 	sth	r3,12(r16)
    809c:	003fdf06 	br	801c <__alt_data_end+0xfffb28ec>
    80a0:	00084e40 	call	84e4 <__sinit>
    80a4:	003fab06 	br	7f54 <__alt_data_end+0xfffb2824>
    80a8:	80800517 	ldw	r2,20(r16)
    80ac:	003fea06 	br	8058 <__alt_data_end+0xfffb2928>
    80b0:	81400717 	ldw	r5,28(r16)
    80b4:	000d883a 	mov	r6,zero
    80b8:	9809883a 	mov	r4,r19
    80bc:	01c00044 	movi	r7,1
    80c0:	403ee83a 	callr	r8
    80c4:	100d883a 	mov	r6,r2
    80c8:	00bfffc4 	movi	r2,-1
    80cc:	30801326 	beq	r6,r2,811c <_fflush_r+0x1f4>
    80d0:	8080030b 	ldhu	r2,12(r16)
    80d4:	82000a17 	ldw	r8,40(r16)
    80d8:	003fb006 	br	7f9c <__alt_data_end+0xfffb286c>
    80dc:	80c00f17 	ldw	r3,60(r16)
    80e0:	00ffa716 	blt	zero,r3,7f80 <__alt_data_end+0xfffb2850>
    80e4:	003fcc06 	br	8018 <__alt_data_end+0xfffb28e8>
    80e8:	98c00017 	ldw	r3,0(r19)
    80ec:	183fb926 	beq	r3,zero,7fd4 <__alt_data_end+0xfffb28a4>
    80f0:	01000744 	movi	r4,29
    80f4:	19000226 	beq	r3,r4,8100 <_fflush_r+0x1d8>
    80f8:	01000584 	movi	r4,22
    80fc:	1900101e 	bne	r3,r4,8140 <_fflush_r+0x218>
    8100:	8080030b 	ldhu	r2,12(r16)
    8104:	80c00417 	ldw	r3,16(r16)
    8108:	80000115 	stw	zero,4(r16)
    810c:	10bdffcc 	andi	r2,r2,63487
    8110:	8080030d 	sth	r2,12(r16)
    8114:	80c00015 	stw	r3,0(r16)
    8118:	003fb706 	br	7ff8 <__alt_data_end+0xfffb28c8>
    811c:	98800017 	ldw	r2,0(r19)
    8120:	103feb26 	beq	r2,zero,80d0 <__alt_data_end+0xfffb29a0>
    8124:	00c00744 	movi	r3,29
    8128:	10c00226 	beq	r2,r3,8134 <_fflush_r+0x20c>
    812c:	00c00584 	movi	r3,22
    8130:	10ffd61e 	bne	r2,r3,808c <__alt_data_end+0xfffb295c>
    8134:	9c400015 	stw	r17,0(r19)
    8138:	0005883a 	mov	r2,zero
    813c:	003fb706 	br	801c <__alt_data_end+0xfffb28ec>
    8140:	80c0030b 	ldhu	r3,12(r16)
    8144:	18c01014 	ori	r3,r3,64
    8148:	80c0030d 	sth	r3,12(r16)
    814c:	003fb306 	br	801c <__alt_data_end+0xfffb28ec>

00008150 <fflush>:
    8150:	20000526 	beq	r4,zero,8168 <fflush+0x18>
    8154:	00800074 	movhi	r2,1
    8158:	10945904 	addi	r2,r2,20836
    815c:	200b883a 	mov	r5,r4
    8160:	11000017 	ldw	r4,0(r2)
    8164:	0007f281 	jmpi	7f28 <_fflush_r>
    8168:	00800074 	movhi	r2,1
    816c:	10945804 	addi	r2,r2,20832
    8170:	11000017 	ldw	r4,0(r2)
    8174:	01400034 	movhi	r5,0
    8178:	295fca04 	addi	r5,r5,32552
    817c:	0008ea41 	jmpi	8ea4 <_fwalk_reent>

00008180 <__fp_lock>:
    8180:	0005883a 	mov	r2,zero
    8184:	f800283a 	ret

00008188 <__fp_unlock>:
    8188:	0005883a 	mov	r2,zero
    818c:	f800283a 	ret

00008190 <_cleanup_r>:
    8190:	01400074 	movhi	r5,1
    8194:	2971ad04 	addi	r5,r5,-14668
    8198:	0008dec1 	jmpi	8dec <_fwalk>

0000819c <__sinit.part.1>:
    819c:	defff604 	addi	sp,sp,-40
    81a0:	00c00074 	movhi	r3,1
    81a4:	dfc00915 	stw	ra,36(sp)
    81a8:	df000815 	stw	fp,32(sp)
    81ac:	ddc00715 	stw	r23,28(sp)
    81b0:	dd800615 	stw	r22,24(sp)
    81b4:	dd400515 	stw	r21,20(sp)
    81b8:	dd000415 	stw	r20,16(sp)
    81bc:	dcc00315 	stw	r19,12(sp)
    81c0:	dc800215 	stw	r18,8(sp)
    81c4:	dc400115 	stw	r17,4(sp)
    81c8:	dc000015 	stw	r16,0(sp)
    81cc:	18e06404 	addi	r3,r3,-32368
    81d0:	24000117 	ldw	r16,4(r4)
    81d4:	20c00f15 	stw	r3,60(r4)
    81d8:	07000044 	movi	fp,1
    81dc:	00c000c4 	movi	r3,3
    81e0:	2080bb04 	addi	r2,r4,748
    81e4:	20c0b915 	stw	r3,740(r4)
    81e8:	27000e15 	stw	fp,56(r4)
    81ec:	2080ba15 	stw	r2,744(r4)
    81f0:	2000b815 	stw	zero,736(r4)
    81f4:	05c00204 	movi	r23,8
    81f8:	00800104 	movi	r2,4
    81fc:	2025883a 	mov	r18,r4
    8200:	b80d883a 	mov	r6,r23
    8204:	81001704 	addi	r4,r16,92
    8208:	000b883a 	mov	r5,zero
    820c:	80000015 	stw	zero,0(r16)
    8210:	80000115 	stw	zero,4(r16)
    8214:	80000215 	stw	zero,8(r16)
    8218:	8080030d 	sth	r2,12(r16)
    821c:	80001915 	stw	zero,100(r16)
    8220:	8000038d 	sth	zero,14(r16)
    8224:	80000415 	stw	zero,16(r16)
    8228:	80000515 	stw	zero,20(r16)
    822c:	80000615 	stw	zero,24(r16)
    8230:	00095700 	call	9570 <memset>
    8234:	05800074 	movhi	r22,1
    8238:	94400217 	ldw	r17,8(r18)
    823c:	05400074 	movhi	r21,1
    8240:	05000074 	movhi	r20,1
    8244:	04c00074 	movhi	r19,1
    8248:	b5ab3c04 	addi	r22,r22,-21264
    824c:	ad6b5304 	addi	r21,r21,-21172
    8250:	a52b7204 	addi	r20,r20,-21048
    8254:	9ceb8904 	addi	r19,r19,-20956
    8258:	85800815 	stw	r22,32(r16)
    825c:	85400915 	stw	r21,36(r16)
    8260:	85000a15 	stw	r20,40(r16)
    8264:	84c00b15 	stw	r19,44(r16)
    8268:	84000715 	stw	r16,28(r16)
    826c:	00800284 	movi	r2,10
    8270:	89001704 	addi	r4,r17,92
    8274:	b80d883a 	mov	r6,r23
    8278:	000b883a 	mov	r5,zero
    827c:	88000015 	stw	zero,0(r17)
    8280:	88000115 	stw	zero,4(r17)
    8284:	88000215 	stw	zero,8(r17)
    8288:	8880030d 	sth	r2,12(r17)
    828c:	88001915 	stw	zero,100(r17)
    8290:	8f00038d 	sth	fp,14(r17)
    8294:	88000415 	stw	zero,16(r17)
    8298:	88000515 	stw	zero,20(r17)
    829c:	88000615 	stw	zero,24(r17)
    82a0:	00095700 	call	9570 <memset>
    82a4:	94000317 	ldw	r16,12(r18)
    82a8:	00800484 	movi	r2,18
    82ac:	8c400715 	stw	r17,28(r17)
    82b0:	8d800815 	stw	r22,32(r17)
    82b4:	8d400915 	stw	r21,36(r17)
    82b8:	8d000a15 	stw	r20,40(r17)
    82bc:	8cc00b15 	stw	r19,44(r17)
    82c0:	8080030d 	sth	r2,12(r16)
    82c4:	00800084 	movi	r2,2
    82c8:	80000015 	stw	zero,0(r16)
    82cc:	80000115 	stw	zero,4(r16)
    82d0:	80000215 	stw	zero,8(r16)
    82d4:	80001915 	stw	zero,100(r16)
    82d8:	8080038d 	sth	r2,14(r16)
    82dc:	80000415 	stw	zero,16(r16)
    82e0:	80000515 	stw	zero,20(r16)
    82e4:	80000615 	stw	zero,24(r16)
    82e8:	81001704 	addi	r4,r16,92
    82ec:	000b883a 	mov	r5,zero
    82f0:	b80d883a 	mov	r6,r23
    82f4:	00095700 	call	9570 <memset>
    82f8:	84000715 	stw	r16,28(r16)
    82fc:	85800815 	stw	r22,32(r16)
    8300:	85400915 	stw	r21,36(r16)
    8304:	85000a15 	stw	r20,40(r16)
    8308:	84c00b15 	stw	r19,44(r16)
    830c:	dfc00917 	ldw	ra,36(sp)
    8310:	df000817 	ldw	fp,32(sp)
    8314:	ddc00717 	ldw	r23,28(sp)
    8318:	dd800617 	ldw	r22,24(sp)
    831c:	dd400517 	ldw	r21,20(sp)
    8320:	dd000417 	ldw	r20,16(sp)
    8324:	dcc00317 	ldw	r19,12(sp)
    8328:	dc800217 	ldw	r18,8(sp)
    832c:	dc400117 	ldw	r17,4(sp)
    8330:	dc000017 	ldw	r16,0(sp)
    8334:	dec00a04 	addi	sp,sp,40
    8338:	f800283a 	ret

0000833c <__sfmoreglue>:
    833c:	defffc04 	addi	sp,sp,-16
    8340:	dc800215 	stw	r18,8(sp)
    8344:	2825883a 	mov	r18,r5
    8348:	dc000015 	stw	r16,0(sp)
    834c:	01401a04 	movi	r5,104
    8350:	2021883a 	mov	r16,r4
    8354:	9009883a 	mov	r4,r18
    8358:	dfc00315 	stw	ra,12(sp)
    835c:	dc400115 	stw	r17,4(sp)
    8360:	000dae00 	call	dae0 <__mulsi3>
    8364:	8009883a 	mov	r4,r16
    8368:	11400304 	addi	r5,r2,12
    836c:	1023883a 	mov	r17,r2
    8370:	00039440 	call	3944 <_malloc_r>
    8374:	1021883a 	mov	r16,r2
    8378:	10000726 	beq	r2,zero,8398 <__sfmoreglue+0x5c>
    837c:	11000304 	addi	r4,r2,12
    8380:	10000015 	stw	zero,0(r2)
    8384:	14800115 	stw	r18,4(r2)
    8388:	11000215 	stw	r4,8(r2)
    838c:	000b883a 	mov	r5,zero
    8390:	880d883a 	mov	r6,r17
    8394:	00095700 	call	9570 <memset>
    8398:	8005883a 	mov	r2,r16
    839c:	dfc00317 	ldw	ra,12(sp)
    83a0:	dc800217 	ldw	r18,8(sp)
    83a4:	dc400117 	ldw	r17,4(sp)
    83a8:	dc000017 	ldw	r16,0(sp)
    83ac:	dec00404 	addi	sp,sp,16
    83b0:	f800283a 	ret

000083b4 <__sfp>:
    83b4:	00800074 	movhi	r2,1
    83b8:	defffb04 	addi	sp,sp,-20
    83bc:	10945804 	addi	r2,r2,20832
    83c0:	dc800215 	stw	r18,8(sp)
    83c4:	14800017 	ldw	r18,0(r2)
    83c8:	dcc00315 	stw	r19,12(sp)
    83cc:	dfc00415 	stw	ra,16(sp)
    83d0:	90800e17 	ldw	r2,56(r18)
    83d4:	dc400115 	stw	r17,4(sp)
    83d8:	dc000015 	stw	r16,0(sp)
    83dc:	2027883a 	mov	r19,r4
    83e0:	1000021e 	bne	r2,zero,83ec <__sfp+0x38>
    83e4:	9009883a 	mov	r4,r18
    83e8:	000819c0 	call	819c <__sinit.part.1>
    83ec:	9480b804 	addi	r18,r18,736
    83f0:	047fffc4 	movi	r17,-1
    83f4:	91400117 	ldw	r5,4(r18)
    83f8:	94000217 	ldw	r16,8(r18)
    83fc:	297fffc4 	addi	r5,r5,-1
    8400:	28000a16 	blt	r5,zero,842c <__sfp+0x78>
    8404:	8080030f 	ldh	r2,12(r16)
    8408:	10000c26 	beq	r2,zero,843c <__sfp+0x88>
    840c:	80c01d04 	addi	r3,r16,116
    8410:	00000206 	br	841c <__sfp+0x68>
    8414:	18bfe60f 	ldh	r2,-104(r3)
    8418:	10000826 	beq	r2,zero,843c <__sfp+0x88>
    841c:	297fffc4 	addi	r5,r5,-1
    8420:	1c3ffd04 	addi	r16,r3,-12
    8424:	18c01a04 	addi	r3,r3,104
    8428:	2c7ffa1e 	bne	r5,r17,8414 <__alt_data_end+0xfffb2ce4>
    842c:	90800017 	ldw	r2,0(r18)
    8430:	10001d26 	beq	r2,zero,84a8 <__sfp+0xf4>
    8434:	1025883a 	mov	r18,r2
    8438:	003fee06 	br	83f4 <__alt_data_end+0xfffb2cc4>
    843c:	00bfffc4 	movi	r2,-1
    8440:	8080038d 	sth	r2,14(r16)
    8444:	00800044 	movi	r2,1
    8448:	8080030d 	sth	r2,12(r16)
    844c:	80001915 	stw	zero,100(r16)
    8450:	80000015 	stw	zero,0(r16)
    8454:	80000215 	stw	zero,8(r16)
    8458:	80000115 	stw	zero,4(r16)
    845c:	80000415 	stw	zero,16(r16)
    8460:	80000515 	stw	zero,20(r16)
    8464:	80000615 	stw	zero,24(r16)
    8468:	81001704 	addi	r4,r16,92
    846c:	000b883a 	mov	r5,zero
    8470:	01800204 	movi	r6,8
    8474:	00095700 	call	9570 <memset>
    8478:	8005883a 	mov	r2,r16
    847c:	80000c15 	stw	zero,48(r16)
    8480:	80000d15 	stw	zero,52(r16)
    8484:	80001115 	stw	zero,68(r16)
    8488:	80001215 	stw	zero,72(r16)
    848c:	dfc00417 	ldw	ra,16(sp)
    8490:	dcc00317 	ldw	r19,12(sp)
    8494:	dc800217 	ldw	r18,8(sp)
    8498:	dc400117 	ldw	r17,4(sp)
    849c:	dc000017 	ldw	r16,0(sp)
    84a0:	dec00504 	addi	sp,sp,20
    84a4:	f800283a 	ret
    84a8:	9809883a 	mov	r4,r19
    84ac:	01400104 	movi	r5,4
    84b0:	000833c0 	call	833c <__sfmoreglue>
    84b4:	90800015 	stw	r2,0(r18)
    84b8:	103fde1e 	bne	r2,zero,8434 <__alt_data_end+0xfffb2d04>
    84bc:	00800304 	movi	r2,12
    84c0:	98800015 	stw	r2,0(r19)
    84c4:	0005883a 	mov	r2,zero
    84c8:	003ff006 	br	848c <__alt_data_end+0xfffb2d5c>

000084cc <_cleanup>:
    84cc:	00800074 	movhi	r2,1
    84d0:	10945804 	addi	r2,r2,20832
    84d4:	11000017 	ldw	r4,0(r2)
    84d8:	01400074 	movhi	r5,1
    84dc:	2971ad04 	addi	r5,r5,-14668
    84e0:	0008dec1 	jmpi	8dec <_fwalk>

000084e4 <__sinit>:
    84e4:	20800e17 	ldw	r2,56(r4)
    84e8:	10000126 	beq	r2,zero,84f0 <__sinit+0xc>
    84ec:	f800283a 	ret
    84f0:	000819c1 	jmpi	819c <__sinit.part.1>

000084f4 <__sfp_lock_acquire>:
    84f4:	f800283a 	ret

000084f8 <__sfp_lock_release>:
    84f8:	f800283a 	ret

000084fc <__sinit_lock_acquire>:
    84fc:	f800283a 	ret

00008500 <__sinit_lock_release>:
    8500:	f800283a 	ret

00008504 <__fp_lock_all>:
    8504:	00800074 	movhi	r2,1
    8508:	10945904 	addi	r2,r2,20836
    850c:	11000017 	ldw	r4,0(r2)
    8510:	01400074 	movhi	r5,1
    8514:	29606004 	addi	r5,r5,-32384
    8518:	0008dec1 	jmpi	8dec <_fwalk>

0000851c <__fp_unlock_all>:
    851c:	00800074 	movhi	r2,1
    8520:	10945904 	addi	r2,r2,20836
    8524:	11000017 	ldw	r4,0(r2)
    8528:	01400074 	movhi	r5,1
    852c:	29606204 	addi	r5,r5,-32376
    8530:	0008dec1 	jmpi	8dec <_fwalk>

00008534 <_malloc_trim_r>:
    8534:	defffb04 	addi	sp,sp,-20
    8538:	dcc00315 	stw	r19,12(sp)
    853c:	04c00074 	movhi	r19,1
    8540:	dc800215 	stw	r18,8(sp)
    8544:	dc400115 	stw	r17,4(sp)
    8548:	dc000015 	stw	r16,0(sp)
    854c:	dfc00415 	stw	ra,16(sp)
    8550:	2821883a 	mov	r16,r5
    8554:	9ccdab04 	addi	r19,r19,13996
    8558:	2025883a 	mov	r18,r4
    855c:	00108e40 	call	108e4 <__malloc_lock>
    8560:	98800217 	ldw	r2,8(r19)
    8564:	14400117 	ldw	r17,4(r2)
    8568:	00bfff04 	movi	r2,-4
    856c:	88a2703a 	and	r17,r17,r2
    8570:	8c21c83a 	sub	r16,r17,r16
    8574:	8403fbc4 	addi	r16,r16,4079
    8578:	8020d33a 	srli	r16,r16,12
    857c:	0083ffc4 	movi	r2,4095
    8580:	843fffc4 	addi	r16,r16,-1
    8584:	8020933a 	slli	r16,r16,12
    8588:	1400060e 	bge	r2,r16,85a4 <_malloc_trim_r+0x70>
    858c:	9009883a 	mov	r4,r18
    8590:	000b883a 	mov	r5,zero
    8594:	000429c0 	call	429c <_sbrk_r>
    8598:	98c00217 	ldw	r3,8(r19)
    859c:	1c47883a 	add	r3,r3,r17
    85a0:	10c00a26 	beq	r2,r3,85cc <_malloc_trim_r+0x98>
    85a4:	9009883a 	mov	r4,r18
    85a8:	00109040 	call	10904 <__malloc_unlock>
    85ac:	0005883a 	mov	r2,zero
    85b0:	dfc00417 	ldw	ra,16(sp)
    85b4:	dcc00317 	ldw	r19,12(sp)
    85b8:	dc800217 	ldw	r18,8(sp)
    85bc:	dc400117 	ldw	r17,4(sp)
    85c0:	dc000017 	ldw	r16,0(sp)
    85c4:	dec00504 	addi	sp,sp,20
    85c8:	f800283a 	ret
    85cc:	9009883a 	mov	r4,r18
    85d0:	040bc83a 	sub	r5,zero,r16
    85d4:	000429c0 	call	429c <_sbrk_r>
    85d8:	00ffffc4 	movi	r3,-1
    85dc:	10c00d26 	beq	r2,r3,8614 <_malloc_trim_r+0xe0>
    85e0:	00c00074 	movhi	r3,1
    85e4:	18db5204 	addi	r3,r3,27976
    85e8:	18800017 	ldw	r2,0(r3)
    85ec:	99000217 	ldw	r4,8(r19)
    85f0:	8c23c83a 	sub	r17,r17,r16
    85f4:	8c400054 	ori	r17,r17,1
    85f8:	1421c83a 	sub	r16,r2,r16
    85fc:	24400115 	stw	r17,4(r4)
    8600:	9009883a 	mov	r4,r18
    8604:	1c000015 	stw	r16,0(r3)
    8608:	00109040 	call	10904 <__malloc_unlock>
    860c:	00800044 	movi	r2,1
    8610:	003fe706 	br	85b0 <__alt_data_end+0xfffb2e80>
    8614:	9009883a 	mov	r4,r18
    8618:	000b883a 	mov	r5,zero
    861c:	000429c0 	call	429c <_sbrk_r>
    8620:	99000217 	ldw	r4,8(r19)
    8624:	014003c4 	movi	r5,15
    8628:	1107c83a 	sub	r3,r2,r4
    862c:	28ffdd0e 	bge	r5,r3,85a4 <__alt_data_end+0xfffb2e74>
    8630:	01400074 	movhi	r5,1
    8634:	29545604 	addi	r5,r5,20824
    8638:	29400017 	ldw	r5,0(r5)
    863c:	18c00054 	ori	r3,r3,1
    8640:	20c00115 	stw	r3,4(r4)
    8644:	00c00074 	movhi	r3,1
    8648:	1145c83a 	sub	r2,r2,r5
    864c:	18db5204 	addi	r3,r3,27976
    8650:	18800015 	stw	r2,0(r3)
    8654:	003fd306 	br	85a4 <__alt_data_end+0xfffb2e74>

00008658 <_free_r>:
    8658:	28004c26 	beq	r5,zero,878c <_free_r+0x134>
    865c:	defffd04 	addi	sp,sp,-12
    8660:	dc400115 	stw	r17,4(sp)
    8664:	dc000015 	stw	r16,0(sp)
    8668:	2023883a 	mov	r17,r4
    866c:	2821883a 	mov	r16,r5
    8670:	dfc00215 	stw	ra,8(sp)
    8674:	00108e40 	call	108e4 <__malloc_lock>
    8678:	813fff17 	ldw	r4,-4(r16)
    867c:	00bfff84 	movi	r2,-2
    8680:	02400074 	movhi	r9,1
    8684:	81bffe04 	addi	r6,r16,-8
    8688:	2084703a 	and	r2,r4,r2
    868c:	4a4dab04 	addi	r9,r9,13996
    8690:	308b883a 	add	r5,r6,r2
    8694:	2a000117 	ldw	r8,4(r5)
    8698:	49c00217 	ldw	r7,8(r9)
    869c:	00ffff04 	movi	r3,-4
    86a0:	40c6703a 	and	r3,r8,r3
    86a4:	39405326 	beq	r7,r5,87f4 <_free_r+0x19c>
    86a8:	28c00115 	stw	r3,4(r5)
    86ac:	2100004c 	andi	r4,r4,1
    86b0:	2000091e 	bne	r4,zero,86d8 <_free_r+0x80>
    86b4:	81fffe17 	ldw	r7,-8(r16)
    86b8:	4a000204 	addi	r8,r9,8
    86bc:	31cdc83a 	sub	r6,r6,r7
    86c0:	31000217 	ldw	r4,8(r6)
    86c4:	11c5883a 	add	r2,r2,r7
    86c8:	22006126 	beq	r4,r8,8850 <_free_r+0x1f8>
    86cc:	31c00317 	ldw	r7,12(r6)
    86d0:	21c00315 	stw	r7,12(r4)
    86d4:	39000215 	stw	r4,8(r7)
    86d8:	28c9883a 	add	r4,r5,r3
    86dc:	21c00117 	ldw	r7,4(r4)
    86e0:	39c0004c 	andi	r7,r7,1
    86e4:	38000d1e 	bne	r7,zero,871c <_free_r+0xc4>
    86e8:	29000217 	ldw	r4,8(r5)
    86ec:	10c5883a 	add	r2,r2,r3
    86f0:	00c00074 	movhi	r3,1
    86f4:	18cdad04 	addi	r3,r3,14004
    86f8:	20c07526 	beq	r4,r3,88d0 <_free_r+0x278>
    86fc:	29c00317 	ldw	r7,12(r5)
    8700:	11400054 	ori	r5,r2,1
    8704:	3087883a 	add	r3,r6,r2
    8708:	21c00315 	stw	r7,12(r4)
    870c:	39000215 	stw	r4,8(r7)
    8710:	31400115 	stw	r5,4(r6)
    8714:	18800015 	stw	r2,0(r3)
    8718:	00000406 	br	872c <_free_r+0xd4>
    871c:	10c00054 	ori	r3,r2,1
    8720:	30c00115 	stw	r3,4(r6)
    8724:	3087883a 	add	r3,r6,r2
    8728:	18800015 	stw	r2,0(r3)
    872c:	00c07fc4 	movi	r3,511
    8730:	18801736 	bltu	r3,r2,8790 <_free_r+0x138>
    8734:	1004d0fa 	srli	r2,r2,3
    8738:	01400044 	movi	r5,1
    873c:	49000117 	ldw	r4,4(r9)
    8740:	1087883a 	add	r3,r2,r2
    8744:	18c7883a 	add	r3,r3,r3
    8748:	1005d0ba 	srai	r2,r2,2
    874c:	18c7883a 	add	r3,r3,r3
    8750:	1a47883a 	add	r3,r3,r9
    8754:	19c00217 	ldw	r7,8(r3)
    8758:	2884983a 	sll	r2,r5,r2
    875c:	30c00315 	stw	r3,12(r6)
    8760:	31c00215 	stw	r7,8(r6)
    8764:	1104b03a 	or	r2,r2,r4
    8768:	19800215 	stw	r6,8(r3)
    876c:	48800115 	stw	r2,4(r9)
    8770:	39800315 	stw	r6,12(r7)
    8774:	8809883a 	mov	r4,r17
    8778:	dfc00217 	ldw	ra,8(sp)
    877c:	dc400117 	ldw	r17,4(sp)
    8780:	dc000017 	ldw	r16,0(sp)
    8784:	dec00304 	addi	sp,sp,12
    8788:	00109041 	jmpi	10904 <__malloc_unlock>
    878c:	f800283a 	ret
    8790:	1006d27a 	srli	r3,r2,9
    8794:	01000104 	movi	r4,4
    8798:	20c04036 	bltu	r4,r3,889c <_free_r+0x244>
    879c:	1006d1ba 	srli	r3,r2,6
    87a0:	19400e04 	addi	r5,r3,56
    87a4:	2947883a 	add	r3,r5,r5
    87a8:	18c7883a 	add	r3,r3,r3
    87ac:	18c7883a 	add	r3,r3,r3
    87b0:	1a49883a 	add	r4,r3,r9
    87b4:	20c00217 	ldw	r3,8(r4)
    87b8:	01c00074 	movhi	r7,1
    87bc:	39cdab04 	addi	r7,r7,13996
    87c0:	19003b26 	beq	r3,r4,88b0 <_free_r+0x258>
    87c4:	01ffff04 	movi	r7,-4
    87c8:	19400117 	ldw	r5,4(r3)
    87cc:	29ca703a 	and	r5,r5,r7
    87d0:	1140022e 	bgeu	r2,r5,87dc <_free_r+0x184>
    87d4:	18c00217 	ldw	r3,8(r3)
    87d8:	20fffb1e 	bne	r4,r3,87c8 <__alt_data_end+0xfffb3098>
    87dc:	18800317 	ldw	r2,12(r3)
    87e0:	30800315 	stw	r2,12(r6)
    87e4:	30c00215 	stw	r3,8(r6)
    87e8:	11800215 	stw	r6,8(r2)
    87ec:	19800315 	stw	r6,12(r3)
    87f0:	003fe006 	br	8774 <__alt_data_end+0xfffb3044>
    87f4:	2100004c 	andi	r4,r4,1
    87f8:	1885883a 	add	r2,r3,r2
    87fc:	2000071e 	bne	r4,zero,881c <_free_r+0x1c4>
    8800:	817ffe17 	ldw	r5,-8(r16)
    8804:	314dc83a 	sub	r6,r6,r5
    8808:	30c00317 	ldw	r3,12(r6)
    880c:	31000217 	ldw	r4,8(r6)
    8810:	1145883a 	add	r2,r2,r5
    8814:	20c00315 	stw	r3,12(r4)
    8818:	19000215 	stw	r4,8(r3)
    881c:	10c00054 	ori	r3,r2,1
    8820:	30c00115 	stw	r3,4(r6)
    8824:	00c00074 	movhi	r3,1
    8828:	18d45704 	addi	r3,r3,20828
    882c:	18c00017 	ldw	r3,0(r3)
    8830:	49800215 	stw	r6,8(r9)
    8834:	10ffcf36 	bltu	r2,r3,8774 <__alt_data_end+0xfffb3044>
    8838:	00800074 	movhi	r2,1
    883c:	109b4604 	addi	r2,r2,27928
    8840:	11400017 	ldw	r5,0(r2)
    8844:	8809883a 	mov	r4,r17
    8848:	00085340 	call	8534 <_malloc_trim_r>
    884c:	003fc906 	br	8774 <__alt_data_end+0xfffb3044>
    8850:	28c9883a 	add	r4,r5,r3
    8854:	21000117 	ldw	r4,4(r4)
    8858:	2100004c 	andi	r4,r4,1
    885c:	20000a1e 	bne	r4,zero,8888 <_free_r+0x230>
    8860:	29000317 	ldw	r4,12(r5)
    8864:	29400217 	ldw	r5,8(r5)
    8868:	10c5883a 	add	r2,r2,r3
    886c:	10c00054 	ori	r3,r2,1
    8870:	29000315 	stw	r4,12(r5)
    8874:	21400215 	stw	r5,8(r4)
    8878:	30c00115 	stw	r3,4(r6)
    887c:	308d883a 	add	r6,r6,r2
    8880:	30800015 	stw	r2,0(r6)
    8884:	003fbb06 	br	8774 <__alt_data_end+0xfffb3044>
    8888:	10c00054 	ori	r3,r2,1
    888c:	30c00115 	stw	r3,4(r6)
    8890:	308d883a 	add	r6,r6,r2
    8894:	30800015 	stw	r2,0(r6)
    8898:	003fb606 	br	8774 <__alt_data_end+0xfffb3044>
    889c:	01000504 	movi	r4,20
    88a0:	20c01436 	bltu	r4,r3,88f4 <_free_r+0x29c>
    88a4:	194016c4 	addi	r5,r3,91
    88a8:	2947883a 	add	r3,r5,r5
    88ac:	003fbe06 	br	87a8 <__alt_data_end+0xfffb3078>
    88b0:	280bd0ba 	srai	r5,r5,2
    88b4:	00800044 	movi	r2,1
    88b8:	39000117 	ldw	r4,4(r7)
    88bc:	114a983a 	sll	r5,r2,r5
    88c0:	1805883a 	mov	r2,r3
    88c4:	2908b03a 	or	r4,r5,r4
    88c8:	39000115 	stw	r4,4(r7)
    88cc:	003fc406 	br	87e0 <__alt_data_end+0xfffb30b0>
    88d0:	49800515 	stw	r6,20(r9)
    88d4:	49800415 	stw	r6,16(r9)
    88d8:	10c00054 	ori	r3,r2,1
    88dc:	31000315 	stw	r4,12(r6)
    88e0:	31000215 	stw	r4,8(r6)
    88e4:	30c00115 	stw	r3,4(r6)
    88e8:	308d883a 	add	r6,r6,r2
    88ec:	30800015 	stw	r2,0(r6)
    88f0:	003fa006 	br	8774 <__alt_data_end+0xfffb3044>
    88f4:	01001504 	movi	r4,84
    88f8:	20c00436 	bltu	r4,r3,890c <_free_r+0x2b4>
    88fc:	1006d33a 	srli	r3,r2,12
    8900:	19401b84 	addi	r5,r3,110
    8904:	2947883a 	add	r3,r5,r5
    8908:	003fa706 	br	87a8 <__alt_data_end+0xfffb3078>
    890c:	01005504 	movi	r4,340
    8910:	20c00436 	bltu	r4,r3,8924 <_free_r+0x2cc>
    8914:	1006d3fa 	srli	r3,r2,15
    8918:	19401dc4 	addi	r5,r3,119
    891c:	2947883a 	add	r3,r5,r5
    8920:	003fa106 	br	87a8 <__alt_data_end+0xfffb3078>
    8924:	01015504 	movi	r4,1364
    8928:	20c00436 	bltu	r4,r3,893c <_free_r+0x2e4>
    892c:	1006d4ba 	srli	r3,r2,18
    8930:	19401f04 	addi	r5,r3,124
    8934:	2947883a 	add	r3,r5,r5
    8938:	003f9b06 	br	87a8 <__alt_data_end+0xfffb3078>
    893c:	00c03f04 	movi	r3,252
    8940:	01401f84 	movi	r5,126
    8944:	003f9806 	br	87a8 <__alt_data_end+0xfffb3078>

00008948 <__sfvwrite_r>:
    8948:	30800217 	ldw	r2,8(r6)
    894c:	10004526 	beq	r2,zero,8a64 <__sfvwrite_r+0x11c>
    8950:	28c0030b 	ldhu	r3,12(r5)
    8954:	defff404 	addi	sp,sp,-48
    8958:	dd400715 	stw	r21,28(sp)
    895c:	dcc00515 	stw	r19,20(sp)
    8960:	dc000215 	stw	r16,8(sp)
    8964:	dfc00b15 	stw	ra,44(sp)
    8968:	df000a15 	stw	fp,40(sp)
    896c:	ddc00915 	stw	r23,36(sp)
    8970:	dd800815 	stw	r22,32(sp)
    8974:	dd000615 	stw	r20,24(sp)
    8978:	dc800415 	stw	r18,16(sp)
    897c:	dc400315 	stw	r17,12(sp)
    8980:	1880020c 	andi	r2,r3,8
    8984:	2821883a 	mov	r16,r5
    8988:	202b883a 	mov	r21,r4
    898c:	3027883a 	mov	r19,r6
    8990:	10002526 	beq	r2,zero,8a28 <__sfvwrite_r+0xe0>
    8994:	28800417 	ldw	r2,16(r5)
    8998:	10002326 	beq	r2,zero,8a28 <__sfvwrite_r+0xe0>
    899c:	1880008c 	andi	r2,r3,2
    89a0:	9c400017 	ldw	r17,0(r19)
    89a4:	10003126 	beq	r2,zero,8a6c <__sfvwrite_r+0x124>
    89a8:	0029883a 	mov	r20,zero
    89ac:	0025883a 	mov	r18,zero
    89b0:	05810004 	movi	r22,1024
    89b4:	a00d883a 	mov	r6,r20
    89b8:	a809883a 	mov	r4,r21
    89bc:	90002526 	beq	r18,zero,8a54 <__sfvwrite_r+0x10c>
    89c0:	900f883a 	mov	r7,r18
    89c4:	81400717 	ldw	r5,28(r16)
    89c8:	b480012e 	bgeu	r22,r18,89d0 <__sfvwrite_r+0x88>
    89cc:	01c10004 	movi	r7,1024
    89d0:	80800917 	ldw	r2,36(r16)
    89d4:	103ee83a 	callr	r2
    89d8:	0080510e 	bge	zero,r2,8b20 <__sfvwrite_r+0x1d8>
    89dc:	98c00217 	ldw	r3,8(r19)
    89e0:	a0a9883a 	add	r20,r20,r2
    89e4:	90a5c83a 	sub	r18,r18,r2
    89e8:	1885c83a 	sub	r2,r3,r2
    89ec:	98800215 	stw	r2,8(r19)
    89f0:	103ff01e 	bne	r2,zero,89b4 <__alt_data_end+0xfffb3284>
    89f4:	0005883a 	mov	r2,zero
    89f8:	dfc00b17 	ldw	ra,44(sp)
    89fc:	df000a17 	ldw	fp,40(sp)
    8a00:	ddc00917 	ldw	r23,36(sp)
    8a04:	dd800817 	ldw	r22,32(sp)
    8a08:	dd400717 	ldw	r21,28(sp)
    8a0c:	dd000617 	ldw	r20,24(sp)
    8a10:	dcc00517 	ldw	r19,20(sp)
    8a14:	dc800417 	ldw	r18,16(sp)
    8a18:	dc400317 	ldw	r17,12(sp)
    8a1c:	dc000217 	ldw	r16,8(sp)
    8a20:	dec00c04 	addi	sp,sp,48
    8a24:	f800283a 	ret
    8a28:	a809883a 	mov	r4,r21
    8a2c:	800b883a 	mov	r5,r16
    8a30:	00064a80 	call	64a8 <__swsetup_r>
    8a34:	80c0030b 	ldhu	r3,12(r16)
    8a38:	103fd826 	beq	r2,zero,899c <__alt_data_end+0xfffb326c>
    8a3c:	18c01014 	ori	r3,r3,64
    8a40:	80c0030d 	sth	r3,12(r16)
    8a44:	00c00244 	movi	r3,9
    8a48:	00bfffc4 	movi	r2,-1
    8a4c:	a8c00015 	stw	r3,0(r21)
    8a50:	003fe906 	br	89f8 <__alt_data_end+0xfffb32c8>
    8a54:	8d000017 	ldw	r20,0(r17)
    8a58:	8c800117 	ldw	r18,4(r17)
    8a5c:	8c400204 	addi	r17,r17,8
    8a60:	003fd406 	br	89b4 <__alt_data_end+0xfffb3284>
    8a64:	0005883a 	mov	r2,zero
    8a68:	f800283a 	ret
    8a6c:	1880004c 	andi	r2,r3,1
    8a70:	1000301e 	bne	r2,zero,8b34 <__sfvwrite_r+0x1ec>
    8a74:	002f883a 	mov	r23,zero
    8a78:	0025883a 	mov	r18,zero
    8a7c:	90001c26 	beq	r18,zero,8af0 <__sfvwrite_r+0x1a8>
    8a80:	1880800c 	andi	r2,r3,512
    8a84:	85000217 	ldw	r20,8(r16)
    8a88:	10006c26 	beq	r2,zero,8c3c <__sfvwrite_r+0x2f4>
    8a8c:	a02d883a 	mov	r22,r20
    8a90:	95008536 	bltu	r18,r20,8ca8 <__sfvwrite_r+0x360>
    8a94:	1881200c 	andi	r2,r3,1152
    8a98:	10009d1e 	bne	r2,zero,8d10 <__sfvwrite_r+0x3c8>
    8a9c:	81000017 	ldw	r4,0(r16)
    8aa0:	a039883a 	mov	fp,r20
    8aa4:	9029883a 	mov	r20,r18
    8aa8:	b80b883a 	mov	r5,r23
    8aac:	b00d883a 	mov	r6,r22
    8ab0:	00094140 	call	9414 <memmove>
    8ab4:	80c00217 	ldw	r3,8(r16)
    8ab8:	81000017 	ldw	r4,0(r16)
    8abc:	9005883a 	mov	r2,r18
    8ac0:	1f39c83a 	sub	fp,r3,fp
    8ac4:	258f883a 	add	r7,r4,r22
    8ac8:	87000215 	stw	fp,8(r16)
    8acc:	81c00015 	stw	r7,0(r16)
    8ad0:	98c00217 	ldw	r3,8(r19)
    8ad4:	b8af883a 	add	r23,r23,r2
    8ad8:	90a5c83a 	sub	r18,r18,r2
    8adc:	1d05c83a 	sub	r2,r3,r20
    8ae0:	98800215 	stw	r2,8(r19)
    8ae4:	103fc326 	beq	r2,zero,89f4 <__alt_data_end+0xfffb32c4>
    8ae8:	80c0030b 	ldhu	r3,12(r16)
    8aec:	903fe41e 	bne	r18,zero,8a80 <__alt_data_end+0xfffb3350>
    8af0:	8dc00017 	ldw	r23,0(r17)
    8af4:	8c800117 	ldw	r18,4(r17)
    8af8:	8c400204 	addi	r17,r17,8
    8afc:	003fdf06 	br	8a7c <__alt_data_end+0xfffb334c>
    8b00:	000a6dc0 	call	a6dc <_realloc_r>
    8b04:	102d883a 	mov	r22,r2
    8b08:	1000a01e 	bne	r2,zero,8d8c <__sfvwrite_r+0x444>
    8b0c:	81400417 	ldw	r5,16(r16)
    8b10:	a809883a 	mov	r4,r21
    8b14:	00086580 	call	8658 <_free_r>
    8b18:	00800304 	movi	r2,12
    8b1c:	a8800015 	stw	r2,0(r21)
    8b20:	80c0030b 	ldhu	r3,12(r16)
    8b24:	00bfffc4 	movi	r2,-1
    8b28:	18c01014 	ori	r3,r3,64
    8b2c:	80c0030d 	sth	r3,12(r16)
    8b30:	003fb106 	br	89f8 <__alt_data_end+0xfffb32c8>
    8b34:	0029883a 	mov	r20,zero
    8b38:	0011883a 	mov	r8,zero
    8b3c:	0039883a 	mov	fp,zero
    8b40:	0025883a 	mov	r18,zero
    8b44:	90001f26 	beq	r18,zero,8bc4 <__sfvwrite_r+0x27c>
    8b48:	40006826 	beq	r8,zero,8cec <__sfvwrite_r+0x3a4>
    8b4c:	a02f883a 	mov	r23,r20
    8b50:	9500012e 	bgeu	r18,r20,8b58 <__sfvwrite_r+0x210>
    8b54:	902f883a 	mov	r23,r18
    8b58:	81000017 	ldw	r4,0(r16)
    8b5c:	80800417 	ldw	r2,16(r16)
    8b60:	b82d883a 	mov	r22,r23
    8b64:	81800217 	ldw	r6,8(r16)
    8b68:	81c00517 	ldw	r7,20(r16)
    8b6c:	1100022e 	bgeu	r2,r4,8b78 <__sfvwrite_r+0x230>
    8b70:	31c7883a 	add	r3,r6,r7
    8b74:	1dc01816 	blt	r3,r23,8bd8 <__sfvwrite_r+0x290>
    8b78:	b9c03f16 	blt	r23,r7,8c78 <__sfvwrite_r+0x330>
    8b7c:	80800917 	ldw	r2,36(r16)
    8b80:	81400717 	ldw	r5,28(r16)
    8b84:	a809883a 	mov	r4,r21
    8b88:	da000115 	stw	r8,4(sp)
    8b8c:	e00d883a 	mov	r6,fp
    8b90:	103ee83a 	callr	r2
    8b94:	102d883a 	mov	r22,r2
    8b98:	da000117 	ldw	r8,4(sp)
    8b9c:	00bfe00e 	bge	zero,r2,8b20 <__alt_data_end+0xfffb33f0>
    8ba0:	a5a9c83a 	sub	r20,r20,r22
    8ba4:	a0001f26 	beq	r20,zero,8c24 <__sfvwrite_r+0x2dc>
    8ba8:	98800217 	ldw	r2,8(r19)
    8bac:	e5b9883a 	add	fp,fp,r22
    8bb0:	95a5c83a 	sub	r18,r18,r22
    8bb4:	15adc83a 	sub	r22,r2,r22
    8bb8:	9d800215 	stw	r22,8(r19)
    8bbc:	b03f8d26 	beq	r22,zero,89f4 <__alt_data_end+0xfffb32c4>
    8bc0:	903fe11e 	bne	r18,zero,8b48 <__alt_data_end+0xfffb3418>
    8bc4:	8f000017 	ldw	fp,0(r17)
    8bc8:	8c800117 	ldw	r18,4(r17)
    8bcc:	0011883a 	mov	r8,zero
    8bd0:	8c400204 	addi	r17,r17,8
    8bd4:	003fdb06 	br	8b44 <__alt_data_end+0xfffb3414>
    8bd8:	180d883a 	mov	r6,r3
    8bdc:	e00b883a 	mov	r5,fp
    8be0:	da000115 	stw	r8,4(sp)
    8be4:	d8c00015 	stw	r3,0(sp)
    8be8:	00094140 	call	9414 <memmove>
    8bec:	d8c00017 	ldw	r3,0(sp)
    8bf0:	80800017 	ldw	r2,0(r16)
    8bf4:	a809883a 	mov	r4,r21
    8bf8:	800b883a 	mov	r5,r16
    8bfc:	10c5883a 	add	r2,r2,r3
    8c00:	80800015 	stw	r2,0(r16)
    8c04:	d8c00015 	stw	r3,0(sp)
    8c08:	0007f280 	call	7f28 <_fflush_r>
    8c0c:	d8c00017 	ldw	r3,0(sp)
    8c10:	da000117 	ldw	r8,4(sp)
    8c14:	103fc21e 	bne	r2,zero,8b20 <__alt_data_end+0xfffb33f0>
    8c18:	182d883a 	mov	r22,r3
    8c1c:	a5a9c83a 	sub	r20,r20,r22
    8c20:	a03fe11e 	bne	r20,zero,8ba8 <__alt_data_end+0xfffb3478>
    8c24:	a809883a 	mov	r4,r21
    8c28:	800b883a 	mov	r5,r16
    8c2c:	0007f280 	call	7f28 <_fflush_r>
    8c30:	103fbb1e 	bne	r2,zero,8b20 <__alt_data_end+0xfffb33f0>
    8c34:	0011883a 	mov	r8,zero
    8c38:	003fdb06 	br	8ba8 <__alt_data_end+0xfffb3478>
    8c3c:	81000017 	ldw	r4,0(r16)
    8c40:	80800417 	ldw	r2,16(r16)
    8c44:	1100012e 	bgeu	r2,r4,8c4c <__sfvwrite_r+0x304>
    8c48:	a4805a36 	bltu	r20,r18,8db4 <__sfvwrite_r+0x46c>
    8c4c:	81c00517 	ldw	r7,20(r16)
    8c50:	91c01a36 	bltu	r18,r7,8cbc <__sfvwrite_r+0x374>
    8c54:	80800917 	ldw	r2,36(r16)
    8c58:	81400717 	ldw	r5,28(r16)
    8c5c:	a809883a 	mov	r4,r21
    8c60:	b80d883a 	mov	r6,r23
    8c64:	103ee83a 	callr	r2
    8c68:	1029883a 	mov	r20,r2
    8c6c:	00bfac0e 	bge	zero,r2,8b20 <__alt_data_end+0xfffb33f0>
    8c70:	a005883a 	mov	r2,r20
    8c74:	003f9606 	br	8ad0 <__alt_data_end+0xfffb33a0>
    8c78:	b80d883a 	mov	r6,r23
    8c7c:	e00b883a 	mov	r5,fp
    8c80:	da000115 	stw	r8,4(sp)
    8c84:	00094140 	call	9414 <memmove>
    8c88:	80800217 	ldw	r2,8(r16)
    8c8c:	80c00017 	ldw	r3,0(r16)
    8c90:	da000117 	ldw	r8,4(sp)
    8c94:	15c5c83a 	sub	r2,r2,r23
    8c98:	1def883a 	add	r23,r3,r23
    8c9c:	80800215 	stw	r2,8(r16)
    8ca0:	85c00015 	stw	r23,0(r16)
    8ca4:	003fbe06 	br	8ba0 <__alt_data_end+0xfffb3470>
    8ca8:	81000017 	ldw	r4,0(r16)
    8cac:	9039883a 	mov	fp,r18
    8cb0:	9029883a 	mov	r20,r18
    8cb4:	902d883a 	mov	r22,r18
    8cb8:	003f7b06 	br	8aa8 <__alt_data_end+0xfffb3378>
    8cbc:	b80b883a 	mov	r5,r23
    8cc0:	900d883a 	mov	r6,r18
    8cc4:	00094140 	call	9414 <memmove>
    8cc8:	80c00217 	ldw	r3,8(r16)
    8ccc:	80800017 	ldw	r2,0(r16)
    8cd0:	9029883a 	mov	r20,r18
    8cd4:	1c87c83a 	sub	r3,r3,r18
    8cd8:	1485883a 	add	r2,r2,r18
    8cdc:	80800015 	stw	r2,0(r16)
    8ce0:	80c00215 	stw	r3,8(r16)
    8ce4:	9005883a 	mov	r2,r18
    8ce8:	003f7906 	br	8ad0 <__alt_data_end+0xfffb33a0>
    8cec:	e009883a 	mov	r4,fp
    8cf0:	01400284 	movi	r5,10
    8cf4:	900d883a 	mov	r6,r18
    8cf8:	00091f40 	call	91f4 <memchr>
    8cfc:	10003826 	beq	r2,zero,8de0 <__sfvwrite_r+0x498>
    8d00:	10800044 	addi	r2,r2,1
    8d04:	1729c83a 	sub	r20,r2,fp
    8d08:	02000044 	movi	r8,1
    8d0c:	003f8f06 	br	8b4c <__alt_data_end+0xfffb341c>
    8d10:	80800517 	ldw	r2,20(r16)
    8d14:	81400417 	ldw	r5,16(r16)
    8d18:	87000017 	ldw	fp,0(r16)
    8d1c:	10a9883a 	add	r20,r2,r2
    8d20:	a085883a 	add	r2,r20,r2
    8d24:	1028d7fa 	srli	r20,r2,31
    8d28:	e179c83a 	sub	fp,fp,r5
    8d2c:	e1000044 	addi	r4,fp,1
    8d30:	a085883a 	add	r2,r20,r2
    8d34:	1029d07a 	srai	r20,r2,1
    8d38:	2485883a 	add	r2,r4,r18
    8d3c:	a00d883a 	mov	r6,r20
    8d40:	a080022e 	bgeu	r20,r2,8d4c <__sfvwrite_r+0x404>
    8d44:	1029883a 	mov	r20,r2
    8d48:	100d883a 	mov	r6,r2
    8d4c:	18c1000c 	andi	r3,r3,1024
    8d50:	a809883a 	mov	r4,r21
    8d54:	183f6a26 	beq	r3,zero,8b00 <__alt_data_end+0xfffb33d0>
    8d58:	300b883a 	mov	r5,r6
    8d5c:	00039440 	call	3944 <_malloc_r>
    8d60:	102d883a 	mov	r22,r2
    8d64:	103f6c26 	beq	r2,zero,8b18 <__alt_data_end+0xfffb33e8>
    8d68:	81400417 	ldw	r5,16(r16)
    8d6c:	1009883a 	mov	r4,r2
    8d70:	e00d883a 	mov	r6,fp
    8d74:	00092dc0 	call	92dc <memcpy>
    8d78:	8080030b 	ldhu	r2,12(r16)
    8d7c:	00fedfc4 	movi	r3,-1153
    8d80:	10c4703a 	and	r2,r2,r3
    8d84:	10802014 	ori	r2,r2,128
    8d88:	8080030d 	sth	r2,12(r16)
    8d8c:	b709883a 	add	r4,r22,fp
    8d90:	a707c83a 	sub	r3,r20,fp
    8d94:	85800415 	stw	r22,16(r16)
    8d98:	85000515 	stw	r20,20(r16)
    8d9c:	81000015 	stw	r4,0(r16)
    8da0:	9039883a 	mov	fp,r18
    8da4:	80c00215 	stw	r3,8(r16)
    8da8:	9029883a 	mov	r20,r18
    8dac:	902d883a 	mov	r22,r18
    8db0:	003f3d06 	br	8aa8 <__alt_data_end+0xfffb3378>
    8db4:	b80b883a 	mov	r5,r23
    8db8:	a00d883a 	mov	r6,r20
    8dbc:	00094140 	call	9414 <memmove>
    8dc0:	80800017 	ldw	r2,0(r16)
    8dc4:	a809883a 	mov	r4,r21
    8dc8:	800b883a 	mov	r5,r16
    8dcc:	1505883a 	add	r2,r2,r20
    8dd0:	80800015 	stw	r2,0(r16)
    8dd4:	0007f280 	call	7f28 <_fflush_r>
    8dd8:	103fa526 	beq	r2,zero,8c70 <__alt_data_end+0xfffb3540>
    8ddc:	003f5006 	br	8b20 <__alt_data_end+0xfffb33f0>
    8de0:	95000044 	addi	r20,r18,1
    8de4:	02000044 	movi	r8,1
    8de8:	003f5806 	br	8b4c <__alt_data_end+0xfffb341c>

00008dec <_fwalk>:
    8dec:	defff804 	addi	sp,sp,-32
    8df0:	dd400515 	stw	r21,20(sp)
    8df4:	2540b804 	addi	r21,r4,736
    8df8:	dd800615 	stw	r22,24(sp)
    8dfc:	dd000415 	stw	r20,16(sp)
    8e00:	dfc00715 	stw	ra,28(sp)
    8e04:	dcc00315 	stw	r19,12(sp)
    8e08:	dc800215 	stw	r18,8(sp)
    8e0c:	dc400115 	stw	r17,4(sp)
    8e10:	dc000015 	stw	r16,0(sp)
    8e14:	2829883a 	mov	r20,r5
    8e18:	002d883a 	mov	r22,zero
    8e1c:	00084f40 	call	84f4 <__sfp_lock_acquire>
    8e20:	a8001426 	beq	r21,zero,8e74 <_fwalk+0x88>
    8e24:	04ffffc4 	movi	r19,-1
    8e28:	ac400117 	ldw	r17,4(r21)
    8e2c:	ac800217 	ldw	r18,8(r21)
    8e30:	8c7fffc4 	addi	r17,r17,-1
    8e34:	88000d16 	blt	r17,zero,8e6c <_fwalk+0x80>
    8e38:	94000304 	addi	r16,r18,12
    8e3c:	94800384 	addi	r18,r18,14
    8e40:	80c0000f 	ldh	r3,0(r16)
    8e44:	8c7fffc4 	addi	r17,r17,-1
    8e48:	813ffd04 	addi	r4,r16,-12
    8e4c:	18000426 	beq	r3,zero,8e60 <_fwalk+0x74>
    8e50:	90c0000f 	ldh	r3,0(r18)
    8e54:	1cc00226 	beq	r3,r19,8e60 <_fwalk+0x74>
    8e58:	a03ee83a 	callr	r20
    8e5c:	b0acb03a 	or	r22,r22,r2
    8e60:	84001a04 	addi	r16,r16,104
    8e64:	94801a04 	addi	r18,r18,104
    8e68:	8cfff51e 	bne	r17,r19,8e40 <__alt_data_end+0xfffb3710>
    8e6c:	ad400017 	ldw	r21,0(r21)
    8e70:	a83fed1e 	bne	r21,zero,8e28 <__alt_data_end+0xfffb36f8>
    8e74:	00084f80 	call	84f8 <__sfp_lock_release>
    8e78:	b005883a 	mov	r2,r22
    8e7c:	dfc00717 	ldw	ra,28(sp)
    8e80:	dd800617 	ldw	r22,24(sp)
    8e84:	dd400517 	ldw	r21,20(sp)
    8e88:	dd000417 	ldw	r20,16(sp)
    8e8c:	dcc00317 	ldw	r19,12(sp)
    8e90:	dc800217 	ldw	r18,8(sp)
    8e94:	dc400117 	ldw	r17,4(sp)
    8e98:	dc000017 	ldw	r16,0(sp)
    8e9c:	dec00804 	addi	sp,sp,32
    8ea0:	f800283a 	ret

00008ea4 <_fwalk_reent>:
    8ea4:	defff804 	addi	sp,sp,-32
    8ea8:	dd400515 	stw	r21,20(sp)
    8eac:	2540b804 	addi	r21,r4,736
    8eb0:	dd800615 	stw	r22,24(sp)
    8eb4:	dd000415 	stw	r20,16(sp)
    8eb8:	dcc00315 	stw	r19,12(sp)
    8ebc:	dfc00715 	stw	ra,28(sp)
    8ec0:	dc800215 	stw	r18,8(sp)
    8ec4:	dc400115 	stw	r17,4(sp)
    8ec8:	dc000015 	stw	r16,0(sp)
    8ecc:	2027883a 	mov	r19,r4
    8ed0:	2829883a 	mov	r20,r5
    8ed4:	002d883a 	mov	r22,zero
    8ed8:	00084f40 	call	84f4 <__sfp_lock_acquire>
    8edc:	a8001326 	beq	r21,zero,8f2c <_fwalk_reent+0x88>
    8ee0:	04bfffc4 	movi	r18,-1
    8ee4:	ac400117 	ldw	r17,4(r21)
    8ee8:	ac000217 	ldw	r16,8(r21)
    8eec:	8c7fffc4 	addi	r17,r17,-1
    8ef0:	88000c16 	blt	r17,zero,8f24 <_fwalk_reent+0x80>
    8ef4:	84000304 	addi	r16,r16,12
    8ef8:	80c0000f 	ldh	r3,0(r16)
    8efc:	8c7fffc4 	addi	r17,r17,-1
    8f00:	817ffd04 	addi	r5,r16,-12
    8f04:	18000526 	beq	r3,zero,8f1c <_fwalk_reent+0x78>
    8f08:	80c0008f 	ldh	r3,2(r16)
    8f0c:	9809883a 	mov	r4,r19
    8f10:	1c800226 	beq	r3,r18,8f1c <_fwalk_reent+0x78>
    8f14:	a03ee83a 	callr	r20
    8f18:	b0acb03a 	or	r22,r22,r2
    8f1c:	84001a04 	addi	r16,r16,104
    8f20:	8cbff51e 	bne	r17,r18,8ef8 <__alt_data_end+0xfffb37c8>
    8f24:	ad400017 	ldw	r21,0(r21)
    8f28:	a83fee1e 	bne	r21,zero,8ee4 <__alt_data_end+0xfffb37b4>
    8f2c:	00084f80 	call	84f8 <__sfp_lock_release>
    8f30:	b005883a 	mov	r2,r22
    8f34:	dfc00717 	ldw	ra,28(sp)
    8f38:	dd800617 	ldw	r22,24(sp)
    8f3c:	dd400517 	ldw	r21,20(sp)
    8f40:	dd000417 	ldw	r20,16(sp)
    8f44:	dcc00317 	ldw	r19,12(sp)
    8f48:	dc800217 	ldw	r18,8(sp)
    8f4c:	dc400117 	ldw	r17,4(sp)
    8f50:	dc000017 	ldw	r16,0(sp)
    8f54:	dec00804 	addi	sp,sp,32
    8f58:	f800283a 	ret

00008f5c <_setlocale_r>:
    8f5c:	30001b26 	beq	r6,zero,8fcc <_setlocale_r+0x70>
    8f60:	01400074 	movhi	r5,1
    8f64:	defffe04 	addi	sp,sp,-8
    8f68:	294cee04 	addi	r5,r5,13240
    8f6c:	3009883a 	mov	r4,r6
    8f70:	dc000015 	stw	r16,0(sp)
    8f74:	dfc00115 	stw	ra,4(sp)
    8f78:	3021883a 	mov	r16,r6
    8f7c:	000ae2c0 	call	ae2c <strcmp>
    8f80:	1000061e 	bne	r2,zero,8f9c <_setlocale_r+0x40>
    8f84:	00800074 	movhi	r2,1
    8f88:	108ced04 	addi	r2,r2,13236
    8f8c:	dfc00117 	ldw	ra,4(sp)
    8f90:	dc000017 	ldw	r16,0(sp)
    8f94:	dec00204 	addi	sp,sp,8
    8f98:	f800283a 	ret
    8f9c:	01400074 	movhi	r5,1
    8fa0:	294ced04 	addi	r5,r5,13236
    8fa4:	8009883a 	mov	r4,r16
    8fa8:	000ae2c0 	call	ae2c <strcmp>
    8fac:	103ff526 	beq	r2,zero,8f84 <__alt_data_end+0xfffb3854>
    8fb0:	01400074 	movhi	r5,1
    8fb4:	294cd804 	addi	r5,r5,13152
    8fb8:	8009883a 	mov	r4,r16
    8fbc:	000ae2c0 	call	ae2c <strcmp>
    8fc0:	103ff026 	beq	r2,zero,8f84 <__alt_data_end+0xfffb3854>
    8fc4:	0005883a 	mov	r2,zero
    8fc8:	003ff006 	br	8f8c <__alt_data_end+0xfffb385c>
    8fcc:	00800074 	movhi	r2,1
    8fd0:	108ced04 	addi	r2,r2,13236
    8fd4:	f800283a 	ret

00008fd8 <__locale_charset>:
    8fd8:	00800074 	movhi	r2,1
    8fdc:	108fbe04 	addi	r2,r2,16120
    8fe0:	f800283a 	ret

00008fe4 <__locale_mb_cur_max>:
    8fe4:	00800074 	movhi	r2,1
    8fe8:	10945a04 	addi	r2,r2,20840
    8fec:	10800017 	ldw	r2,0(r2)
    8ff0:	f800283a 	ret

00008ff4 <__locale_msgcharset>:
    8ff4:	00800074 	movhi	r2,1
    8ff8:	108fb604 	addi	r2,r2,16088
    8ffc:	f800283a 	ret

00009000 <__locale_cjk_lang>:
    9000:	0005883a 	mov	r2,zero
    9004:	f800283a 	ret

00009008 <_localeconv_r>:
    9008:	00800074 	movhi	r2,1
    900c:	108fc604 	addi	r2,r2,16152
    9010:	f800283a 	ret

00009014 <setlocale>:
    9014:	00c00074 	movhi	r3,1
    9018:	18d45904 	addi	r3,r3,20836
    901c:	2005883a 	mov	r2,r4
    9020:	19000017 	ldw	r4,0(r3)
    9024:	280d883a 	mov	r6,r5
    9028:	100b883a 	mov	r5,r2
    902c:	0008f5c1 	jmpi	8f5c <_setlocale_r>

00009030 <localeconv>:
    9030:	00800074 	movhi	r2,1
    9034:	108fc604 	addi	r2,r2,16152
    9038:	f800283a 	ret

0000903c <__smakebuf_r>:
    903c:	2880030b 	ldhu	r2,12(r5)
    9040:	10c0008c 	andi	r3,r2,2
    9044:	1800401e 	bne	r3,zero,9148 <__smakebuf_r+0x10c>
    9048:	deffec04 	addi	sp,sp,-80
    904c:	dc000f15 	stw	r16,60(sp)
    9050:	2821883a 	mov	r16,r5
    9054:	2940038f 	ldh	r5,14(r5)
    9058:	dc401015 	stw	r17,64(sp)
    905c:	dfc01315 	stw	ra,76(sp)
    9060:	dcc01215 	stw	r19,72(sp)
    9064:	dc801115 	stw	r18,68(sp)
    9068:	2023883a 	mov	r17,r4
    906c:	28001b16 	blt	r5,zero,90dc <__smakebuf_r+0xa0>
    9070:	d80d883a 	mov	r6,sp
    9074:	000c8a40 	call	c8a4 <_fstat_r>
    9078:	10001716 	blt	r2,zero,90d8 <__smakebuf_r+0x9c>
    907c:	d8800117 	ldw	r2,4(sp)
    9080:	00e00014 	movui	r3,32768
    9084:	10bc000c 	andi	r2,r2,61440
    9088:	10c03726 	beq	r2,r3,9168 <__smakebuf_r+0x12c>
    908c:	80c0030b 	ldhu	r3,12(r16)
    9090:	18c20014 	ori	r3,r3,2048
    9094:	80c0030d 	sth	r3,12(r16)
    9098:	00c80004 	movi	r3,8192
    909c:	10c03c1e 	bne	r2,r3,9190 <__smakebuf_r+0x154>
    90a0:	8140038f 	ldh	r5,14(r16)
    90a4:	8809883a 	mov	r4,r17
    90a8:	000c8fc0 	call	c8fc <_isatty_r>
    90ac:	10004e26 	beq	r2,zero,91e8 <__smakebuf_r+0x1ac>
    90b0:	8080030b 	ldhu	r2,12(r16)
    90b4:	04c00044 	movi	r19,1
    90b8:	80c010c4 	addi	r3,r16,67
    90bc:	14c4b03a 	or	r2,r2,r19
    90c0:	8080030d 	sth	r2,12(r16)
    90c4:	80c00015 	stw	r3,0(r16)
    90c8:	80c00415 	stw	r3,16(r16)
    90cc:	84c00515 	stw	r19,20(r16)
    90d0:	04810004 	movi	r18,1024
    90d4:	00000706 	br	90f4 <__smakebuf_r+0xb8>
    90d8:	8080030b 	ldhu	r2,12(r16)
    90dc:	10c0200c 	andi	r3,r2,128
    90e0:	18001f1e 	bne	r3,zero,9160 <__smakebuf_r+0x124>
    90e4:	04810004 	movi	r18,1024
    90e8:	10820014 	ori	r2,r2,2048
    90ec:	8080030d 	sth	r2,12(r16)
    90f0:	0027883a 	mov	r19,zero
    90f4:	8809883a 	mov	r4,r17
    90f8:	900b883a 	mov	r5,r18
    90fc:	00039440 	call	3944 <_malloc_r>
    9100:	10002e26 	beq	r2,zero,91bc <__smakebuf_r+0x180>
    9104:	80c0030b 	ldhu	r3,12(r16)
    9108:	01000074 	movhi	r4,1
    910c:	21206404 	addi	r4,r4,-32368
    9110:	89000f15 	stw	r4,60(r17)
    9114:	18c02014 	ori	r3,r3,128
    9118:	80c0030d 	sth	r3,12(r16)
    911c:	80800015 	stw	r2,0(r16)
    9120:	80800415 	stw	r2,16(r16)
    9124:	84800515 	stw	r18,20(r16)
    9128:	98001c1e 	bne	r19,zero,919c <__smakebuf_r+0x160>
    912c:	dfc01317 	ldw	ra,76(sp)
    9130:	dcc01217 	ldw	r19,72(sp)
    9134:	dc801117 	ldw	r18,68(sp)
    9138:	dc401017 	ldw	r17,64(sp)
    913c:	dc000f17 	ldw	r16,60(sp)
    9140:	dec01404 	addi	sp,sp,80
    9144:	f800283a 	ret
    9148:	288010c4 	addi	r2,r5,67
    914c:	28800015 	stw	r2,0(r5)
    9150:	28800415 	stw	r2,16(r5)
    9154:	00800044 	movi	r2,1
    9158:	28800515 	stw	r2,20(r5)
    915c:	f800283a 	ret
    9160:	04801004 	movi	r18,64
    9164:	003fe006 	br	90e8 <__alt_data_end+0xfffb39b8>
    9168:	81000a17 	ldw	r4,40(r16)
    916c:	00c00074 	movhi	r3,1
    9170:	18eb7204 	addi	r3,r3,-21048
    9174:	20ffc51e 	bne	r4,r3,908c <__alt_data_end+0xfffb395c>
    9178:	80c0030b 	ldhu	r3,12(r16)
    917c:	01010004 	movi	r4,1024
    9180:	81001315 	stw	r4,76(r16)
    9184:	1906b03a 	or	r3,r3,r4
    9188:	80c0030d 	sth	r3,12(r16)
    918c:	003fc206 	br	9098 <__alt_data_end+0xfffb3968>
    9190:	0027883a 	mov	r19,zero
    9194:	04810004 	movi	r18,1024
    9198:	003fd606 	br	90f4 <__alt_data_end+0xfffb39c4>
    919c:	8140038f 	ldh	r5,14(r16)
    91a0:	8809883a 	mov	r4,r17
    91a4:	000c8fc0 	call	c8fc <_isatty_r>
    91a8:	103fe026 	beq	r2,zero,912c <__alt_data_end+0xfffb39fc>
    91ac:	8080030b 	ldhu	r2,12(r16)
    91b0:	10800054 	ori	r2,r2,1
    91b4:	8080030d 	sth	r2,12(r16)
    91b8:	003fdc06 	br	912c <__alt_data_end+0xfffb39fc>
    91bc:	8080030b 	ldhu	r2,12(r16)
    91c0:	10c0800c 	andi	r3,r2,512
    91c4:	183fd91e 	bne	r3,zero,912c <__alt_data_end+0xfffb39fc>
    91c8:	10800094 	ori	r2,r2,2
    91cc:	80c010c4 	addi	r3,r16,67
    91d0:	8080030d 	sth	r2,12(r16)
    91d4:	00800044 	movi	r2,1
    91d8:	80c00015 	stw	r3,0(r16)
    91dc:	80c00415 	stw	r3,16(r16)
    91e0:	80800515 	stw	r2,20(r16)
    91e4:	003fd106 	br	912c <__alt_data_end+0xfffb39fc>
    91e8:	04c00044 	movi	r19,1
    91ec:	04810004 	movi	r18,1024
    91f0:	003fc006 	br	90f4 <__alt_data_end+0xfffb39c4>

000091f4 <memchr>:
    91f4:	208000cc 	andi	r2,r4,3
    91f8:	280f883a 	mov	r7,r5
    91fc:	10003526 	beq	r2,zero,92d4 <memchr+0xe0>
    9200:	30bfffc4 	addi	r2,r6,-1
    9204:	30001b26 	beq	r6,zero,9274 <memchr+0x80>
    9208:	21800003 	ldbu	r6,0(r4)
    920c:	28c03fcc 	andi	r3,r5,255
    9210:	30c01a26 	beq	r6,r3,927c <memchr+0x88>
    9214:	180d883a 	mov	r6,r3
    9218:	00000406 	br	922c <memchr+0x38>
    921c:	10001526 	beq	r2,zero,9274 <memchr+0x80>
    9220:	20c00003 	ldbu	r3,0(r4)
    9224:	10bfffc4 	addi	r2,r2,-1
    9228:	19801426 	beq	r3,r6,927c <memchr+0x88>
    922c:	21000044 	addi	r4,r4,1
    9230:	20c000cc 	andi	r3,r4,3
    9234:	183ff91e 	bne	r3,zero,921c <__alt_data_end+0xfffb3aec>
    9238:	024000c4 	movi	r9,3
    923c:	48801136 	bltu	r9,r2,9284 <memchr+0x90>
    9240:	10000c26 	beq	r2,zero,9274 <memchr+0x80>
    9244:	20c00003 	ldbu	r3,0(r4)
    9248:	29403fcc 	andi	r5,r5,255
    924c:	19400b26 	beq	r3,r5,927c <memchr+0x88>
    9250:	20c00044 	addi	r3,r4,1
    9254:	2085883a 	add	r2,r4,r2
    9258:	39803fcc 	andi	r6,r7,255
    925c:	00000306 	br	926c <memchr+0x78>
    9260:	18c00044 	addi	r3,r3,1
    9264:	197fffc3 	ldbu	r5,-1(r3)
    9268:	29800426 	beq	r5,r6,927c <memchr+0x88>
    926c:	1809883a 	mov	r4,r3
    9270:	18bffb1e 	bne	r3,r2,9260 <__alt_data_end+0xfffb3b30>
    9274:	0005883a 	mov	r2,zero
    9278:	f800283a 	ret
    927c:	2005883a 	mov	r2,r4
    9280:	f800283a 	ret
    9284:	28c03fcc 	andi	r3,r5,255
    9288:	1810923a 	slli	r8,r3,8
    928c:	02ffbff4 	movhi	r11,65279
    9290:	02a02074 	movhi	r10,32897
    9294:	40c6b03a 	or	r3,r8,r3
    9298:	1810943a 	slli	r8,r3,16
    929c:	5affbfc4 	addi	r11,r11,-257
    92a0:	52a02004 	addi	r10,r10,-32640
    92a4:	40d0b03a 	or	r8,r8,r3
    92a8:	20c00017 	ldw	r3,0(r4)
    92ac:	40c6f03a 	xor	r3,r8,r3
    92b0:	1acd883a 	add	r6,r3,r11
    92b4:	00c6303a 	nor	r3,zero,r3
    92b8:	30c6703a 	and	r3,r6,r3
    92bc:	1a86703a 	and	r3,r3,r10
    92c0:	183fdf1e 	bne	r3,zero,9240 <__alt_data_end+0xfffb3b10>
    92c4:	10bfff04 	addi	r2,r2,-4
    92c8:	21000104 	addi	r4,r4,4
    92cc:	48bff636 	bltu	r9,r2,92a8 <__alt_data_end+0xfffb3b78>
    92d0:	003fdb06 	br	9240 <__alt_data_end+0xfffb3b10>
    92d4:	3005883a 	mov	r2,r6
    92d8:	003fd706 	br	9238 <__alt_data_end+0xfffb3b08>

000092dc <memcpy>:
    92dc:	deffff04 	addi	sp,sp,-4
    92e0:	dc000015 	stw	r16,0(sp)
    92e4:	00c003c4 	movi	r3,15
    92e8:	2005883a 	mov	r2,r4
    92ec:	1980432e 	bgeu	r3,r6,93fc <memcpy+0x120>
    92f0:	2146b03a 	or	r3,r4,r5
    92f4:	18c000cc 	andi	r3,r3,3
    92f8:	1800421e 	bne	r3,zero,9404 <memcpy+0x128>
    92fc:	343ffc04 	addi	r16,r6,-16
    9300:	8020d13a 	srli	r16,r16,4
    9304:	28c00104 	addi	r3,r5,4
    9308:	23400104 	addi	r13,r4,4
    930c:	801e913a 	slli	r15,r16,4
    9310:	2b000204 	addi	r12,r5,8
    9314:	22c00204 	addi	r11,r4,8
    9318:	7bc00504 	addi	r15,r15,20
    931c:	2a800304 	addi	r10,r5,12
    9320:	22400304 	addi	r9,r4,12
    9324:	2bdf883a 	add	r15,r5,r15
    9328:	2811883a 	mov	r8,r5
    932c:	200f883a 	mov	r7,r4
    9330:	41000017 	ldw	r4,0(r8)
    9334:	39c00404 	addi	r7,r7,16
    9338:	18c00404 	addi	r3,r3,16
    933c:	393ffc15 	stw	r4,-16(r7)
    9340:	1bbffc17 	ldw	r14,-16(r3)
    9344:	6b400404 	addi	r13,r13,16
    9348:	5ac00404 	addi	r11,r11,16
    934c:	6bbffc15 	stw	r14,-16(r13)
    9350:	63800017 	ldw	r14,0(r12)
    9354:	4a400404 	addi	r9,r9,16
    9358:	42000404 	addi	r8,r8,16
    935c:	5bbffc15 	stw	r14,-16(r11)
    9360:	53800017 	ldw	r14,0(r10)
    9364:	63000404 	addi	r12,r12,16
    9368:	52800404 	addi	r10,r10,16
    936c:	4bbffc15 	stw	r14,-16(r9)
    9370:	1bffef1e 	bne	r3,r15,9330 <__alt_data_end+0xfffb3c00>
    9374:	81c00044 	addi	r7,r16,1
    9378:	380e913a 	slli	r7,r7,4
    937c:	310003cc 	andi	r4,r6,15
    9380:	02c000c4 	movi	r11,3
    9384:	11c7883a 	add	r3,r2,r7
    9388:	29cb883a 	add	r5,r5,r7
    938c:	59001f2e 	bgeu	r11,r4,940c <memcpy+0x130>
    9390:	1813883a 	mov	r9,r3
    9394:	2811883a 	mov	r8,r5
    9398:	200f883a 	mov	r7,r4
    939c:	42800017 	ldw	r10,0(r8)
    93a0:	4a400104 	addi	r9,r9,4
    93a4:	39ffff04 	addi	r7,r7,-4
    93a8:	4abfff15 	stw	r10,-4(r9)
    93ac:	42000104 	addi	r8,r8,4
    93b0:	59fffa36 	bltu	r11,r7,939c <__alt_data_end+0xfffb3c6c>
    93b4:	213fff04 	addi	r4,r4,-4
    93b8:	2008d0ba 	srli	r4,r4,2
    93bc:	318000cc 	andi	r6,r6,3
    93c0:	21000044 	addi	r4,r4,1
    93c4:	2109883a 	add	r4,r4,r4
    93c8:	2109883a 	add	r4,r4,r4
    93cc:	1907883a 	add	r3,r3,r4
    93d0:	290b883a 	add	r5,r5,r4
    93d4:	30000626 	beq	r6,zero,93f0 <memcpy+0x114>
    93d8:	198d883a 	add	r6,r3,r6
    93dc:	29c00003 	ldbu	r7,0(r5)
    93e0:	18c00044 	addi	r3,r3,1
    93e4:	29400044 	addi	r5,r5,1
    93e8:	19ffffc5 	stb	r7,-1(r3)
    93ec:	19bffb1e 	bne	r3,r6,93dc <__alt_data_end+0xfffb3cac>
    93f0:	dc000017 	ldw	r16,0(sp)
    93f4:	dec00104 	addi	sp,sp,4
    93f8:	f800283a 	ret
    93fc:	2007883a 	mov	r3,r4
    9400:	003ff406 	br	93d4 <__alt_data_end+0xfffb3ca4>
    9404:	2007883a 	mov	r3,r4
    9408:	003ff306 	br	93d8 <__alt_data_end+0xfffb3ca8>
    940c:	200d883a 	mov	r6,r4
    9410:	003ff006 	br	93d4 <__alt_data_end+0xfffb3ca4>

00009414 <memmove>:
    9414:	2005883a 	mov	r2,r4
    9418:	29000b2e 	bgeu	r5,r4,9448 <memmove+0x34>
    941c:	298f883a 	add	r7,r5,r6
    9420:	21c0092e 	bgeu	r4,r7,9448 <memmove+0x34>
    9424:	2187883a 	add	r3,r4,r6
    9428:	198bc83a 	sub	r5,r3,r6
    942c:	30004b26 	beq	r6,zero,955c <memmove+0x148>
    9430:	39ffffc4 	addi	r7,r7,-1
    9434:	39000003 	ldbu	r4,0(r7)
    9438:	18ffffc4 	addi	r3,r3,-1
    943c:	19000005 	stb	r4,0(r3)
    9440:	197ffb1e 	bne	r3,r5,9430 <__alt_data_end+0xfffb3d00>
    9444:	f800283a 	ret
    9448:	00c003c4 	movi	r3,15
    944c:	1980412e 	bgeu	r3,r6,9554 <memmove+0x140>
    9450:	1146b03a 	or	r3,r2,r5
    9454:	18c000cc 	andi	r3,r3,3
    9458:	1800411e 	bne	r3,zero,9560 <memmove+0x14c>
    945c:	33fffc04 	addi	r15,r6,-16
    9460:	781ed13a 	srli	r15,r15,4
    9464:	28c00104 	addi	r3,r5,4
    9468:	13400104 	addi	r13,r2,4
    946c:	781c913a 	slli	r14,r15,4
    9470:	2b000204 	addi	r12,r5,8
    9474:	12c00204 	addi	r11,r2,8
    9478:	73800504 	addi	r14,r14,20
    947c:	2a800304 	addi	r10,r5,12
    9480:	12400304 	addi	r9,r2,12
    9484:	2b9d883a 	add	r14,r5,r14
    9488:	2811883a 	mov	r8,r5
    948c:	100f883a 	mov	r7,r2
    9490:	41000017 	ldw	r4,0(r8)
    9494:	39c00404 	addi	r7,r7,16
    9498:	18c00404 	addi	r3,r3,16
    949c:	393ffc15 	stw	r4,-16(r7)
    94a0:	193ffc17 	ldw	r4,-16(r3)
    94a4:	6b400404 	addi	r13,r13,16
    94a8:	5ac00404 	addi	r11,r11,16
    94ac:	693ffc15 	stw	r4,-16(r13)
    94b0:	61000017 	ldw	r4,0(r12)
    94b4:	4a400404 	addi	r9,r9,16
    94b8:	42000404 	addi	r8,r8,16
    94bc:	593ffc15 	stw	r4,-16(r11)
    94c0:	51000017 	ldw	r4,0(r10)
    94c4:	63000404 	addi	r12,r12,16
    94c8:	52800404 	addi	r10,r10,16
    94cc:	493ffc15 	stw	r4,-16(r9)
    94d0:	1bbfef1e 	bne	r3,r14,9490 <__alt_data_end+0xfffb3d60>
    94d4:	79000044 	addi	r4,r15,1
    94d8:	2008913a 	slli	r4,r4,4
    94dc:	328003cc 	andi	r10,r6,15
    94e0:	02c000c4 	movi	r11,3
    94e4:	1107883a 	add	r3,r2,r4
    94e8:	290b883a 	add	r5,r5,r4
    94ec:	5a801e2e 	bgeu	r11,r10,9568 <memmove+0x154>
    94f0:	1813883a 	mov	r9,r3
    94f4:	2811883a 	mov	r8,r5
    94f8:	500f883a 	mov	r7,r10
    94fc:	41000017 	ldw	r4,0(r8)
    9500:	4a400104 	addi	r9,r9,4
    9504:	39ffff04 	addi	r7,r7,-4
    9508:	493fff15 	stw	r4,-4(r9)
    950c:	42000104 	addi	r8,r8,4
    9510:	59fffa36 	bltu	r11,r7,94fc <__alt_data_end+0xfffb3dcc>
    9514:	513fff04 	addi	r4,r10,-4
    9518:	2008d0ba 	srli	r4,r4,2
    951c:	318000cc 	andi	r6,r6,3
    9520:	21000044 	addi	r4,r4,1
    9524:	2109883a 	add	r4,r4,r4
    9528:	2109883a 	add	r4,r4,r4
    952c:	1907883a 	add	r3,r3,r4
    9530:	290b883a 	add	r5,r5,r4
    9534:	30000926 	beq	r6,zero,955c <memmove+0x148>
    9538:	198d883a 	add	r6,r3,r6
    953c:	29c00003 	ldbu	r7,0(r5)
    9540:	18c00044 	addi	r3,r3,1
    9544:	29400044 	addi	r5,r5,1
    9548:	19ffffc5 	stb	r7,-1(r3)
    954c:	19bffb1e 	bne	r3,r6,953c <__alt_data_end+0xfffb3e0c>
    9550:	f800283a 	ret
    9554:	1007883a 	mov	r3,r2
    9558:	003ff606 	br	9534 <__alt_data_end+0xfffb3e04>
    955c:	f800283a 	ret
    9560:	1007883a 	mov	r3,r2
    9564:	003ff406 	br	9538 <__alt_data_end+0xfffb3e08>
    9568:	500d883a 	mov	r6,r10
    956c:	003ff106 	br	9534 <__alt_data_end+0xfffb3e04>

00009570 <memset>:
    9570:	20c000cc 	andi	r3,r4,3
    9574:	2005883a 	mov	r2,r4
    9578:	18004326 	beq	r3,zero,9688 <memset+0x118>
    957c:	31ffffc4 	addi	r7,r6,-1
    9580:	30004026 	beq	r6,zero,9684 <memset+0x114>
    9584:	2813883a 	mov	r9,r5
    9588:	200d883a 	mov	r6,r4
    958c:	2007883a 	mov	r3,r4
    9590:	00000406 	br	95a4 <memset+0x34>
    9594:	3a3fffc4 	addi	r8,r7,-1
    9598:	31800044 	addi	r6,r6,1
    959c:	38003926 	beq	r7,zero,9684 <memset+0x114>
    95a0:	400f883a 	mov	r7,r8
    95a4:	18c00044 	addi	r3,r3,1
    95a8:	32400005 	stb	r9,0(r6)
    95ac:	1a0000cc 	andi	r8,r3,3
    95b0:	403ff81e 	bne	r8,zero,9594 <__alt_data_end+0xfffb3e64>
    95b4:	010000c4 	movi	r4,3
    95b8:	21c02d2e 	bgeu	r4,r7,9670 <memset+0x100>
    95bc:	29803fcc 	andi	r6,r5,255
    95c0:	3008923a 	slli	r4,r6,8
    95c4:	218cb03a 	or	r6,r4,r6
    95c8:	3008943a 	slli	r4,r6,16
    95cc:	218cb03a 	or	r6,r4,r6
    95d0:	010003c4 	movi	r4,15
    95d4:	21c0182e 	bgeu	r4,r7,9638 <memset+0xc8>
    95d8:	3b3ffc04 	addi	r12,r7,-16
    95dc:	6018d13a 	srli	r12,r12,4
    95e0:	1a000104 	addi	r8,r3,4
    95e4:	1ac00204 	addi	r11,r3,8
    95e8:	6008913a 	slli	r4,r12,4
    95ec:	1a800304 	addi	r10,r3,12
    95f0:	1813883a 	mov	r9,r3
    95f4:	21000504 	addi	r4,r4,20
    95f8:	1909883a 	add	r4,r3,r4
    95fc:	49800015 	stw	r6,0(r9)
    9600:	41800015 	stw	r6,0(r8)
    9604:	59800015 	stw	r6,0(r11)
    9608:	51800015 	stw	r6,0(r10)
    960c:	42000404 	addi	r8,r8,16
    9610:	4a400404 	addi	r9,r9,16
    9614:	5ac00404 	addi	r11,r11,16
    9618:	52800404 	addi	r10,r10,16
    961c:	413ff71e 	bne	r8,r4,95fc <__alt_data_end+0xfffb3ecc>
    9620:	63000044 	addi	r12,r12,1
    9624:	6018913a 	slli	r12,r12,4
    9628:	39c003cc 	andi	r7,r7,15
    962c:	010000c4 	movi	r4,3
    9630:	1b07883a 	add	r3,r3,r12
    9634:	21c00e2e 	bgeu	r4,r7,9670 <memset+0x100>
    9638:	1813883a 	mov	r9,r3
    963c:	3811883a 	mov	r8,r7
    9640:	010000c4 	movi	r4,3
    9644:	49800015 	stw	r6,0(r9)
    9648:	423fff04 	addi	r8,r8,-4
    964c:	4a400104 	addi	r9,r9,4
    9650:	223ffc36 	bltu	r4,r8,9644 <__alt_data_end+0xfffb3f14>
    9654:	393fff04 	addi	r4,r7,-4
    9658:	2008d0ba 	srli	r4,r4,2
    965c:	39c000cc 	andi	r7,r7,3
    9660:	21000044 	addi	r4,r4,1
    9664:	2109883a 	add	r4,r4,r4
    9668:	2109883a 	add	r4,r4,r4
    966c:	1907883a 	add	r3,r3,r4
    9670:	38000426 	beq	r7,zero,9684 <memset+0x114>
    9674:	19cf883a 	add	r7,r3,r7
    9678:	19400005 	stb	r5,0(r3)
    967c:	18c00044 	addi	r3,r3,1
    9680:	19fffd1e 	bne	r3,r7,9678 <__alt_data_end+0xfffb3f48>
    9684:	f800283a 	ret
    9688:	2007883a 	mov	r3,r4
    968c:	300f883a 	mov	r7,r6
    9690:	003fc806 	br	95b4 <__alt_data_end+0xfffb3e84>

00009694 <_Balloc>:
    9694:	20801317 	ldw	r2,76(r4)
    9698:	defffc04 	addi	sp,sp,-16
    969c:	dc400115 	stw	r17,4(sp)
    96a0:	dc000015 	stw	r16,0(sp)
    96a4:	dfc00315 	stw	ra,12(sp)
    96a8:	dc800215 	stw	r18,8(sp)
    96ac:	2023883a 	mov	r17,r4
    96b0:	2821883a 	mov	r16,r5
    96b4:	10000f26 	beq	r2,zero,96f4 <_Balloc+0x60>
    96b8:	8407883a 	add	r3,r16,r16
    96bc:	18c7883a 	add	r3,r3,r3
    96c0:	10c7883a 	add	r3,r2,r3
    96c4:	18800017 	ldw	r2,0(r3)
    96c8:	10001126 	beq	r2,zero,9710 <_Balloc+0x7c>
    96cc:	11000017 	ldw	r4,0(r2)
    96d0:	19000015 	stw	r4,0(r3)
    96d4:	10000415 	stw	zero,16(r2)
    96d8:	10000315 	stw	zero,12(r2)
    96dc:	dfc00317 	ldw	ra,12(sp)
    96e0:	dc800217 	ldw	r18,8(sp)
    96e4:	dc400117 	ldw	r17,4(sp)
    96e8:	dc000017 	ldw	r16,0(sp)
    96ec:	dec00404 	addi	sp,sp,16
    96f0:	f800283a 	ret
    96f4:	01400104 	movi	r5,4
    96f8:	01800844 	movi	r6,33
    96fc:	000c4dc0 	call	c4dc <_calloc_r>
    9700:	88801315 	stw	r2,76(r17)
    9704:	103fec1e 	bne	r2,zero,96b8 <__alt_data_end+0xfffb3f88>
    9708:	0005883a 	mov	r2,zero
    970c:	003ff306 	br	96dc <__alt_data_end+0xfffb3fac>
    9710:	01400044 	movi	r5,1
    9714:	2c24983a 	sll	r18,r5,r16
    9718:	8809883a 	mov	r4,r17
    971c:	91800144 	addi	r6,r18,5
    9720:	318d883a 	add	r6,r6,r6
    9724:	318d883a 	add	r6,r6,r6
    9728:	000c4dc0 	call	c4dc <_calloc_r>
    972c:	103ff626 	beq	r2,zero,9708 <__alt_data_end+0xfffb3fd8>
    9730:	14000115 	stw	r16,4(r2)
    9734:	14800215 	stw	r18,8(r2)
    9738:	003fe606 	br	96d4 <__alt_data_end+0xfffb3fa4>

0000973c <_Bfree>:
    973c:	28000826 	beq	r5,zero,9760 <_Bfree+0x24>
    9740:	28c00117 	ldw	r3,4(r5)
    9744:	20801317 	ldw	r2,76(r4)
    9748:	18c7883a 	add	r3,r3,r3
    974c:	18c7883a 	add	r3,r3,r3
    9750:	10c5883a 	add	r2,r2,r3
    9754:	10c00017 	ldw	r3,0(r2)
    9758:	28c00015 	stw	r3,0(r5)
    975c:	11400015 	stw	r5,0(r2)
    9760:	f800283a 	ret

00009764 <__multadd>:
    9764:	defff704 	addi	sp,sp,-36
    9768:	dc800215 	stw	r18,8(sp)
    976c:	2c800417 	ldw	r18,16(r5)
    9770:	ddc00715 	stw	r23,28(sp)
    9774:	dd800615 	stw	r22,24(sp)
    9778:	dd000415 	stw	r20,16(sp)
    977c:	dcc00315 	stw	r19,12(sp)
    9780:	dc400115 	stw	r17,4(sp)
    9784:	dc000015 	stw	r16,0(sp)
    9788:	dfc00815 	stw	ra,32(sp)
    978c:	dd400515 	stw	r21,20(sp)
    9790:	2827883a 	mov	r19,r5
    9794:	2029883a 	mov	r20,r4
    9798:	3023883a 	mov	r17,r6
    979c:	3821883a 	mov	r16,r7
    97a0:	2d800504 	addi	r22,r5,20
    97a4:	002f883a 	mov	r23,zero
    97a8:	b5400017 	ldw	r21,0(r22)
    97ac:	880b883a 	mov	r5,r17
    97b0:	bdc00044 	addi	r23,r23,1
    97b4:	a93fffcc 	andi	r4,r21,65535
    97b8:	000dae00 	call	dae0 <__mulsi3>
    97bc:	1421883a 	add	r16,r2,r16
    97c0:	a808d43a 	srli	r4,r21,16
    97c4:	802ad43a 	srli	r21,r16,16
    97c8:	880b883a 	mov	r5,r17
    97cc:	000dae00 	call	dae0 <__mulsi3>
    97d0:	a88f883a 	add	r7,r21,r2
    97d4:	3804943a 	slli	r2,r7,16
    97d8:	80ffffcc 	andi	r3,r16,65535
    97dc:	b5800104 	addi	r22,r22,4
    97e0:	10c7883a 	add	r3,r2,r3
    97e4:	b0ffff15 	stw	r3,-4(r22)
    97e8:	3820d43a 	srli	r16,r7,16
    97ec:	bcbfee16 	blt	r23,r18,97a8 <__alt_data_end+0xfffb4078>
    97f0:	80000926 	beq	r16,zero,9818 <__multadd+0xb4>
    97f4:	98800217 	ldw	r2,8(r19)
    97f8:	9080130e 	bge	r18,r2,9848 <__multadd+0xe4>
    97fc:	90800144 	addi	r2,r18,5
    9800:	1085883a 	add	r2,r2,r2
    9804:	1085883a 	add	r2,r2,r2
    9808:	9885883a 	add	r2,r19,r2
    980c:	14000015 	stw	r16,0(r2)
    9810:	94800044 	addi	r18,r18,1
    9814:	9c800415 	stw	r18,16(r19)
    9818:	9805883a 	mov	r2,r19
    981c:	dfc00817 	ldw	ra,32(sp)
    9820:	ddc00717 	ldw	r23,28(sp)
    9824:	dd800617 	ldw	r22,24(sp)
    9828:	dd400517 	ldw	r21,20(sp)
    982c:	dd000417 	ldw	r20,16(sp)
    9830:	dcc00317 	ldw	r19,12(sp)
    9834:	dc800217 	ldw	r18,8(sp)
    9838:	dc400117 	ldw	r17,4(sp)
    983c:	dc000017 	ldw	r16,0(sp)
    9840:	dec00904 	addi	sp,sp,36
    9844:	f800283a 	ret
    9848:	99400117 	ldw	r5,4(r19)
    984c:	a009883a 	mov	r4,r20
    9850:	29400044 	addi	r5,r5,1
    9854:	00096940 	call	9694 <_Balloc>
    9858:	99800417 	ldw	r6,16(r19)
    985c:	99400304 	addi	r5,r19,12
    9860:	11000304 	addi	r4,r2,12
    9864:	31800084 	addi	r6,r6,2
    9868:	318d883a 	add	r6,r6,r6
    986c:	318d883a 	add	r6,r6,r6
    9870:	1023883a 	mov	r17,r2
    9874:	00092dc0 	call	92dc <memcpy>
    9878:	99000117 	ldw	r4,4(r19)
    987c:	a0c01317 	ldw	r3,76(r20)
    9880:	2109883a 	add	r4,r4,r4
    9884:	2109883a 	add	r4,r4,r4
    9888:	1907883a 	add	r3,r3,r4
    988c:	18800017 	ldw	r2,0(r3)
    9890:	98800015 	stw	r2,0(r19)
    9894:	1cc00015 	stw	r19,0(r3)
    9898:	8827883a 	mov	r19,r17
    989c:	003fd706 	br	97fc <__alt_data_end+0xfffb40cc>

000098a0 <__s2b>:
    98a0:	defff904 	addi	sp,sp,-28
    98a4:	dc400115 	stw	r17,4(sp)
    98a8:	dc000015 	stw	r16,0(sp)
    98ac:	2023883a 	mov	r17,r4
    98b0:	2821883a 	mov	r16,r5
    98b4:	39000204 	addi	r4,r7,8
    98b8:	01400244 	movi	r5,9
    98bc:	dcc00315 	stw	r19,12(sp)
    98c0:	dc800215 	stw	r18,8(sp)
    98c4:	dfc00615 	stw	ra,24(sp)
    98c8:	dd400515 	stw	r21,20(sp)
    98cc:	dd000415 	stw	r20,16(sp)
    98d0:	3825883a 	mov	r18,r7
    98d4:	3027883a 	mov	r19,r6
    98d8:	000385c0 	call	385c <__divsi3>
    98dc:	00c00044 	movi	r3,1
    98e0:	000b883a 	mov	r5,zero
    98e4:	1880030e 	bge	r3,r2,98f4 <__s2b+0x54>
    98e8:	18c7883a 	add	r3,r3,r3
    98ec:	29400044 	addi	r5,r5,1
    98f0:	18bffd16 	blt	r3,r2,98e8 <__alt_data_end+0xfffb41b8>
    98f4:	8809883a 	mov	r4,r17
    98f8:	00096940 	call	9694 <_Balloc>
    98fc:	d8c00717 	ldw	r3,28(sp)
    9900:	10c00515 	stw	r3,20(r2)
    9904:	00c00044 	movi	r3,1
    9908:	10c00415 	stw	r3,16(r2)
    990c:	00c00244 	movi	r3,9
    9910:	1cc0210e 	bge	r3,r19,9998 <__s2b+0xf8>
    9914:	80eb883a 	add	r21,r16,r3
    9918:	a829883a 	mov	r20,r21
    991c:	84e1883a 	add	r16,r16,r19
    9920:	a1c00007 	ldb	r7,0(r20)
    9924:	8809883a 	mov	r4,r17
    9928:	a5000044 	addi	r20,r20,1
    992c:	100b883a 	mov	r5,r2
    9930:	01800284 	movi	r6,10
    9934:	39fff404 	addi	r7,r7,-48
    9938:	00097640 	call	9764 <__multadd>
    993c:	a43ff81e 	bne	r20,r16,9920 <__alt_data_end+0xfffb41f0>
    9940:	ace1883a 	add	r16,r21,r19
    9944:	843ffe04 	addi	r16,r16,-8
    9948:	9c800a0e 	bge	r19,r18,9974 <__s2b+0xd4>
    994c:	94e5c83a 	sub	r18,r18,r19
    9950:	84a5883a 	add	r18,r16,r18
    9954:	81c00007 	ldb	r7,0(r16)
    9958:	8809883a 	mov	r4,r17
    995c:	84000044 	addi	r16,r16,1
    9960:	100b883a 	mov	r5,r2
    9964:	01800284 	movi	r6,10
    9968:	39fff404 	addi	r7,r7,-48
    996c:	00097640 	call	9764 <__multadd>
    9970:	84bff81e 	bne	r16,r18,9954 <__alt_data_end+0xfffb4224>
    9974:	dfc00617 	ldw	ra,24(sp)
    9978:	dd400517 	ldw	r21,20(sp)
    997c:	dd000417 	ldw	r20,16(sp)
    9980:	dcc00317 	ldw	r19,12(sp)
    9984:	dc800217 	ldw	r18,8(sp)
    9988:	dc400117 	ldw	r17,4(sp)
    998c:	dc000017 	ldw	r16,0(sp)
    9990:	dec00704 	addi	sp,sp,28
    9994:	f800283a 	ret
    9998:	84000284 	addi	r16,r16,10
    999c:	1827883a 	mov	r19,r3
    99a0:	003fe906 	br	9948 <__alt_data_end+0xfffb4218>

000099a4 <__hi0bits>:
    99a4:	20bfffec 	andhi	r2,r4,65535
    99a8:	1000141e 	bne	r2,zero,99fc <__hi0bits+0x58>
    99ac:	2008943a 	slli	r4,r4,16
    99b0:	00800404 	movi	r2,16
    99b4:	20ffc02c 	andhi	r3,r4,65280
    99b8:	1800021e 	bne	r3,zero,99c4 <__hi0bits+0x20>
    99bc:	2008923a 	slli	r4,r4,8
    99c0:	10800204 	addi	r2,r2,8
    99c4:	20fc002c 	andhi	r3,r4,61440
    99c8:	1800021e 	bne	r3,zero,99d4 <__hi0bits+0x30>
    99cc:	2008913a 	slli	r4,r4,4
    99d0:	10800104 	addi	r2,r2,4
    99d4:	20f0002c 	andhi	r3,r4,49152
    99d8:	1800031e 	bne	r3,zero,99e8 <__hi0bits+0x44>
    99dc:	2109883a 	add	r4,r4,r4
    99e0:	10800084 	addi	r2,r2,2
    99e4:	2109883a 	add	r4,r4,r4
    99e8:	20000316 	blt	r4,zero,99f8 <__hi0bits+0x54>
    99ec:	2110002c 	andhi	r4,r4,16384
    99f0:	2000041e 	bne	r4,zero,9a04 <__hi0bits+0x60>
    99f4:	00800804 	movi	r2,32
    99f8:	f800283a 	ret
    99fc:	0005883a 	mov	r2,zero
    9a00:	003fec06 	br	99b4 <__alt_data_end+0xfffb4284>
    9a04:	10800044 	addi	r2,r2,1
    9a08:	f800283a 	ret

00009a0c <__lo0bits>:
    9a0c:	20c00017 	ldw	r3,0(r4)
    9a10:	188001cc 	andi	r2,r3,7
    9a14:	10000826 	beq	r2,zero,9a38 <__lo0bits+0x2c>
    9a18:	1880004c 	andi	r2,r3,1
    9a1c:	1000211e 	bne	r2,zero,9aa4 <__lo0bits+0x98>
    9a20:	1880008c 	andi	r2,r3,2
    9a24:	1000211e 	bne	r2,zero,9aac <__lo0bits+0xa0>
    9a28:	1806d0ba 	srli	r3,r3,2
    9a2c:	00800084 	movi	r2,2
    9a30:	20c00015 	stw	r3,0(r4)
    9a34:	f800283a 	ret
    9a38:	18bfffcc 	andi	r2,r3,65535
    9a3c:	10001326 	beq	r2,zero,9a8c <__lo0bits+0x80>
    9a40:	0005883a 	mov	r2,zero
    9a44:	19403fcc 	andi	r5,r3,255
    9a48:	2800021e 	bne	r5,zero,9a54 <__lo0bits+0x48>
    9a4c:	1806d23a 	srli	r3,r3,8
    9a50:	10800204 	addi	r2,r2,8
    9a54:	194003cc 	andi	r5,r3,15
    9a58:	2800021e 	bne	r5,zero,9a64 <__lo0bits+0x58>
    9a5c:	1806d13a 	srli	r3,r3,4
    9a60:	10800104 	addi	r2,r2,4
    9a64:	194000cc 	andi	r5,r3,3
    9a68:	2800021e 	bne	r5,zero,9a74 <__lo0bits+0x68>
    9a6c:	1806d0ba 	srli	r3,r3,2
    9a70:	10800084 	addi	r2,r2,2
    9a74:	1940004c 	andi	r5,r3,1
    9a78:	2800081e 	bne	r5,zero,9a9c <__lo0bits+0x90>
    9a7c:	1806d07a 	srli	r3,r3,1
    9a80:	1800051e 	bne	r3,zero,9a98 <__lo0bits+0x8c>
    9a84:	00800804 	movi	r2,32
    9a88:	f800283a 	ret
    9a8c:	1806d43a 	srli	r3,r3,16
    9a90:	00800404 	movi	r2,16
    9a94:	003feb06 	br	9a44 <__alt_data_end+0xfffb4314>
    9a98:	10800044 	addi	r2,r2,1
    9a9c:	20c00015 	stw	r3,0(r4)
    9aa0:	f800283a 	ret
    9aa4:	0005883a 	mov	r2,zero
    9aa8:	f800283a 	ret
    9aac:	1806d07a 	srli	r3,r3,1
    9ab0:	00800044 	movi	r2,1
    9ab4:	20c00015 	stw	r3,0(r4)
    9ab8:	f800283a 	ret

00009abc <__i2b>:
    9abc:	defffd04 	addi	sp,sp,-12
    9ac0:	dc000015 	stw	r16,0(sp)
    9ac4:	04000044 	movi	r16,1
    9ac8:	dc400115 	stw	r17,4(sp)
    9acc:	2823883a 	mov	r17,r5
    9ad0:	800b883a 	mov	r5,r16
    9ad4:	dfc00215 	stw	ra,8(sp)
    9ad8:	00096940 	call	9694 <_Balloc>
    9adc:	14400515 	stw	r17,20(r2)
    9ae0:	14000415 	stw	r16,16(r2)
    9ae4:	dfc00217 	ldw	ra,8(sp)
    9ae8:	dc400117 	ldw	r17,4(sp)
    9aec:	dc000017 	ldw	r16,0(sp)
    9af0:	dec00304 	addi	sp,sp,12
    9af4:	f800283a 	ret

00009af8 <__multiply>:
    9af8:	deffef04 	addi	sp,sp,-68
    9afc:	dc400815 	stw	r17,32(sp)
    9b00:	dc000715 	stw	r16,28(sp)
    9b04:	2c400417 	ldw	r17,16(r5)
    9b08:	34000417 	ldw	r16,16(r6)
    9b0c:	dd800d15 	stw	r22,52(sp)
    9b10:	dc800915 	stw	r18,36(sp)
    9b14:	dfc01015 	stw	ra,64(sp)
    9b18:	df000f15 	stw	fp,60(sp)
    9b1c:	ddc00e15 	stw	r23,56(sp)
    9b20:	dd400c15 	stw	r21,48(sp)
    9b24:	dd000b15 	stw	r20,44(sp)
    9b28:	dcc00a15 	stw	r19,40(sp)
    9b2c:	2825883a 	mov	r18,r5
    9b30:	302d883a 	mov	r22,r6
    9b34:	8c009116 	blt	r17,r16,9d7c <__multiply+0x284>
    9b38:	8005883a 	mov	r2,r16
    9b3c:	8821883a 	mov	r16,r17
    9b40:	1023883a 	mov	r17,r2
    9b44:	90800217 	ldw	r2,8(r18)
    9b48:	8447883a 	add	r3,r16,r17
    9b4c:	d8c00215 	stw	r3,8(sp)
    9b50:	91400117 	ldw	r5,4(r18)
    9b54:	10c0010e 	bge	r2,r3,9b5c <__multiply+0x64>
    9b58:	29400044 	addi	r5,r5,1
    9b5c:	00096940 	call	9694 <_Balloc>
    9b60:	d8c00217 	ldw	r3,8(sp)
    9b64:	d8800615 	stw	r2,24(sp)
    9b68:	18eb883a 	add	r21,r3,r3
    9b6c:	ad6b883a 	add	r21,r21,r21
    9b70:	10c00504 	addi	r3,r2,20
    9b74:	1d6b883a 	add	r21,r3,r21
    9b78:	d8c00115 	stw	r3,4(sp)
    9b7c:	dd400315 	stw	r21,12(sp)
    9b80:	1805883a 	mov	r2,r3
    9b84:	1d40042e 	bgeu	r3,r21,9b98 <__multiply+0xa0>
    9b88:	d8c00317 	ldw	r3,12(sp)
    9b8c:	10000015 	stw	zero,0(r2)
    9b90:	10800104 	addi	r2,r2,4
    9b94:	10fffc36 	bltu	r2,r3,9b88 <__alt_data_end+0xfffb4458>
    9b98:	8c63883a 	add	r17,r17,r17
    9b9c:	b5800504 	addi	r22,r22,20
    9ba0:	8c63883a 	add	r17,r17,r17
    9ba4:	94800504 	addi	r18,r18,20
    9ba8:	8421883a 	add	r16,r16,r16
    9bac:	b463883a 	add	r17,r22,r17
    9bb0:	8421883a 	add	r16,r16,r16
    9bb4:	dd800015 	stw	r22,0(sp)
    9bb8:	dc800415 	stw	r18,16(sp)
    9bbc:	dc400515 	stw	r17,20(sp)
    9bc0:	9429883a 	add	r20,r18,r16
    9bc4:	b4404f2e 	bgeu	r22,r17,9d04 <__multiply+0x20c>
    9bc8:	d8c00017 	ldw	r3,0(sp)
    9bcc:	1c800017 	ldw	r18,0(r3)
    9bd0:	943fffcc 	andi	r16,r18,65535
    9bd4:	80001e26 	beq	r16,zero,9c50 <__multiply+0x158>
    9bd8:	dd800117 	ldw	r22,4(sp)
    9bdc:	dd400417 	ldw	r21,16(sp)
    9be0:	0025883a 	mov	r18,zero
    9be4:	adc00017 	ldw	r23,0(r21)
    9be8:	b4c00017 	ldw	r19,0(r22)
    9bec:	800b883a 	mov	r5,r16
    9bf0:	b93fffcc 	andi	r4,r23,65535
    9bf4:	000dae00 	call	dae0 <__mulsi3>
    9bf8:	9c7fffcc 	andi	r17,r19,65535
    9bfc:	8885883a 	add	r2,r17,r2
    9c00:	b808d43a 	srli	r4,r23,16
    9c04:	14a3883a 	add	r17,r2,r18
    9c08:	9826d43a 	srli	r19,r19,16
    9c0c:	8824d43a 	srli	r18,r17,16
    9c10:	800b883a 	mov	r5,r16
    9c14:	000dae00 	call	dae0 <__mulsi3>
    9c18:	9885883a 	add	r2,r19,r2
    9c1c:	14a7883a 	add	r19,r2,r18
    9c20:	88ffffcc 	andi	r3,r17,65535
    9c24:	9822943a 	slli	r17,r19,16
    9c28:	ad400104 	addi	r21,r21,4
    9c2c:	b005883a 	mov	r2,r22
    9c30:	88c6b03a 	or	r3,r17,r3
    9c34:	b0c00015 	stw	r3,0(r22)
    9c38:	9824d43a 	srli	r18,r19,16
    9c3c:	b5800104 	addi	r22,r22,4
    9c40:	ad3fe836 	bltu	r21,r20,9be4 <__alt_data_end+0xfffb44b4>
    9c44:	d8c00017 	ldw	r3,0(sp)
    9c48:	14800115 	stw	r18,4(r2)
    9c4c:	1c800017 	ldw	r18,0(r3)
    9c50:	9024d43a 	srli	r18,r18,16
    9c54:	90002226 	beq	r18,zero,9ce0 <__multiply+0x1e8>
    9c58:	d8c00117 	ldw	r3,4(sp)
    9c5c:	dd800417 	ldw	r22,16(sp)
    9c60:	002f883a 	mov	r23,zero
    9c64:	1f000017 	ldw	fp,0(r3)
    9c68:	1823883a 	mov	r17,r3
    9c6c:	182b883a 	mov	r21,r3
    9c70:	e021883a 	mov	r16,fp
    9c74:	00000106 	br	9c7c <__multiply+0x184>
    9c78:	982b883a 	mov	r21,r19
    9c7c:	b100000b 	ldhu	r4,0(r22)
    9c80:	8020d43a 	srli	r16,r16,16
    9c84:	900b883a 	mov	r5,r18
    9c88:	000dae00 	call	dae0 <__mulsi3>
    9c8c:	1405883a 	add	r2,r2,r16
    9c90:	15ef883a 	add	r23,r2,r23
    9c94:	b804943a 	slli	r2,r23,16
    9c98:	e0ffffcc 	andi	r3,fp,65535
    9c9c:	8c400104 	addi	r17,r17,4
    9ca0:	10c6b03a 	or	r3,r2,r3
    9ca4:	88ffff15 	stw	r3,-4(r17)
    9ca8:	b5800104 	addi	r22,r22,4
    9cac:	b13fff17 	ldw	r4,-4(r22)
    9cb0:	acc00104 	addi	r19,r21,4
    9cb4:	900b883a 	mov	r5,r18
    9cb8:	2008d43a 	srli	r4,r4,16
    9cbc:	9c000017 	ldw	r16,0(r19)
    9cc0:	000dae00 	call	dae0 <__mulsi3>
    9cc4:	b806d43a 	srli	r3,r23,16
    9cc8:	813fffcc 	andi	r4,r16,65535
    9ccc:	1105883a 	add	r2,r2,r4
    9cd0:	10f9883a 	add	fp,r2,r3
    9cd4:	e02ed43a 	srli	r23,fp,16
    9cd8:	b53fe736 	bltu	r22,r20,9c78 <__alt_data_end+0xfffb4548>
    9cdc:	af000115 	stw	fp,4(r21)
    9ce0:	d8c00017 	ldw	r3,0(sp)
    9ce4:	d9000517 	ldw	r4,20(sp)
    9ce8:	18c00104 	addi	r3,r3,4
    9cec:	d8c00015 	stw	r3,0(sp)
    9cf0:	d8c00117 	ldw	r3,4(sp)
    9cf4:	18c00104 	addi	r3,r3,4
    9cf8:	d8c00115 	stw	r3,4(sp)
    9cfc:	d8c00017 	ldw	r3,0(sp)
    9d00:	193fb136 	bltu	r3,r4,9bc8 <__alt_data_end+0xfffb4498>
    9d04:	d8c00217 	ldw	r3,8(sp)
    9d08:	00c00c0e 	bge	zero,r3,9d3c <__multiply+0x244>
    9d0c:	d8c00317 	ldw	r3,12(sp)
    9d10:	18bfff17 	ldw	r2,-4(r3)
    9d14:	1d7fff04 	addi	r21,r3,-4
    9d18:	10000326 	beq	r2,zero,9d28 <__multiply+0x230>
    9d1c:	00000706 	br	9d3c <__multiply+0x244>
    9d20:	a8800017 	ldw	r2,0(r21)
    9d24:	1000051e 	bne	r2,zero,9d3c <__multiply+0x244>
    9d28:	d8c00217 	ldw	r3,8(sp)
    9d2c:	ad7fff04 	addi	r21,r21,-4
    9d30:	18ffffc4 	addi	r3,r3,-1
    9d34:	d8c00215 	stw	r3,8(sp)
    9d38:	183ff91e 	bne	r3,zero,9d20 <__alt_data_end+0xfffb45f0>
    9d3c:	d8c00617 	ldw	r3,24(sp)
    9d40:	d9000217 	ldw	r4,8(sp)
    9d44:	1805883a 	mov	r2,r3
    9d48:	19000415 	stw	r4,16(r3)
    9d4c:	dfc01017 	ldw	ra,64(sp)
    9d50:	df000f17 	ldw	fp,60(sp)
    9d54:	ddc00e17 	ldw	r23,56(sp)
    9d58:	dd800d17 	ldw	r22,52(sp)
    9d5c:	dd400c17 	ldw	r21,48(sp)
    9d60:	dd000b17 	ldw	r20,44(sp)
    9d64:	dcc00a17 	ldw	r19,40(sp)
    9d68:	dc800917 	ldw	r18,36(sp)
    9d6c:	dc400817 	ldw	r17,32(sp)
    9d70:	dc000717 	ldw	r16,28(sp)
    9d74:	dec01104 	addi	sp,sp,68
    9d78:	f800283a 	ret
    9d7c:	3025883a 	mov	r18,r6
    9d80:	282d883a 	mov	r22,r5
    9d84:	003f6f06 	br	9b44 <__alt_data_end+0xfffb4414>

00009d88 <__pow5mult>:
    9d88:	defffa04 	addi	sp,sp,-24
    9d8c:	dcc00315 	stw	r19,12(sp)
    9d90:	dc800215 	stw	r18,8(sp)
    9d94:	dc000015 	stw	r16,0(sp)
    9d98:	dfc00515 	stw	ra,20(sp)
    9d9c:	dd000415 	stw	r20,16(sp)
    9da0:	dc400115 	stw	r17,4(sp)
    9da4:	308000cc 	andi	r2,r6,3
    9da8:	3021883a 	mov	r16,r6
    9dac:	2027883a 	mov	r19,r4
    9db0:	2825883a 	mov	r18,r5
    9db4:	10002e1e 	bne	r2,zero,9e70 <__pow5mult+0xe8>
    9db8:	8021d0ba 	srai	r16,r16,2
    9dbc:	80001a26 	beq	r16,zero,9e28 <__pow5mult+0xa0>
    9dc0:	9c401217 	ldw	r17,72(r19)
    9dc4:	8800061e 	bne	r17,zero,9de0 <__pow5mult+0x58>
    9dc8:	00003406 	br	9e9c <__pow5mult+0x114>
    9dcc:	8021d07a 	srai	r16,r16,1
    9dd0:	80001526 	beq	r16,zero,9e28 <__pow5mult+0xa0>
    9dd4:	88800017 	ldw	r2,0(r17)
    9dd8:	10001c26 	beq	r2,zero,9e4c <__pow5mult+0xc4>
    9ddc:	1023883a 	mov	r17,r2
    9de0:	80c0004c 	andi	r3,r16,1
    9de4:	183ff926 	beq	r3,zero,9dcc <__alt_data_end+0xfffb469c>
    9de8:	900b883a 	mov	r5,r18
    9dec:	880d883a 	mov	r6,r17
    9df0:	9809883a 	mov	r4,r19
    9df4:	0009af80 	call	9af8 <__multiply>
    9df8:	90001b26 	beq	r18,zero,9e68 <__pow5mult+0xe0>
    9dfc:	91c00117 	ldw	r7,4(r18)
    9e00:	98c01317 	ldw	r3,76(r19)
    9e04:	8021d07a 	srai	r16,r16,1
    9e08:	39cf883a 	add	r7,r7,r7
    9e0c:	39cf883a 	add	r7,r7,r7
    9e10:	19c7883a 	add	r3,r3,r7
    9e14:	19000017 	ldw	r4,0(r3)
    9e18:	91000015 	stw	r4,0(r18)
    9e1c:	1c800015 	stw	r18,0(r3)
    9e20:	1025883a 	mov	r18,r2
    9e24:	803feb1e 	bne	r16,zero,9dd4 <__alt_data_end+0xfffb46a4>
    9e28:	9005883a 	mov	r2,r18
    9e2c:	dfc00517 	ldw	ra,20(sp)
    9e30:	dd000417 	ldw	r20,16(sp)
    9e34:	dcc00317 	ldw	r19,12(sp)
    9e38:	dc800217 	ldw	r18,8(sp)
    9e3c:	dc400117 	ldw	r17,4(sp)
    9e40:	dc000017 	ldw	r16,0(sp)
    9e44:	dec00604 	addi	sp,sp,24
    9e48:	f800283a 	ret
    9e4c:	9809883a 	mov	r4,r19
    9e50:	880b883a 	mov	r5,r17
    9e54:	880d883a 	mov	r6,r17
    9e58:	0009af80 	call	9af8 <__multiply>
    9e5c:	88800015 	stw	r2,0(r17)
    9e60:	10000015 	stw	zero,0(r2)
    9e64:	003fdd06 	br	9ddc <__alt_data_end+0xfffb46ac>
    9e68:	1025883a 	mov	r18,r2
    9e6c:	003fd706 	br	9dcc <__alt_data_end+0xfffb469c>
    9e70:	10bfffc4 	addi	r2,r2,-1
    9e74:	1085883a 	add	r2,r2,r2
    9e78:	00c00074 	movhi	r3,1
    9e7c:	18ccf104 	addi	r3,r3,13252
    9e80:	1085883a 	add	r2,r2,r2
    9e84:	1885883a 	add	r2,r3,r2
    9e88:	11800017 	ldw	r6,0(r2)
    9e8c:	000f883a 	mov	r7,zero
    9e90:	00097640 	call	9764 <__multadd>
    9e94:	1025883a 	mov	r18,r2
    9e98:	003fc706 	br	9db8 <__alt_data_end+0xfffb4688>
    9e9c:	05000044 	movi	r20,1
    9ea0:	9809883a 	mov	r4,r19
    9ea4:	a00b883a 	mov	r5,r20
    9ea8:	00096940 	call	9694 <_Balloc>
    9eac:	1023883a 	mov	r17,r2
    9eb0:	00809c44 	movi	r2,625
    9eb4:	88800515 	stw	r2,20(r17)
    9eb8:	8d000415 	stw	r20,16(r17)
    9ebc:	9c401215 	stw	r17,72(r19)
    9ec0:	88000015 	stw	zero,0(r17)
    9ec4:	003fc606 	br	9de0 <__alt_data_end+0xfffb46b0>

00009ec8 <__lshift>:
    9ec8:	defff904 	addi	sp,sp,-28
    9ecc:	dd000415 	stw	r20,16(sp)
    9ed0:	dcc00315 	stw	r19,12(sp)
    9ed4:	3029d17a 	srai	r20,r6,5
    9ed8:	2cc00417 	ldw	r19,16(r5)
    9edc:	28800217 	ldw	r2,8(r5)
    9ee0:	dd400515 	stw	r21,20(sp)
    9ee4:	a4e7883a 	add	r19,r20,r19
    9ee8:	dc800215 	stw	r18,8(sp)
    9eec:	dc400115 	stw	r17,4(sp)
    9ef0:	dc000015 	stw	r16,0(sp)
    9ef4:	dfc00615 	stw	ra,24(sp)
    9ef8:	9c000044 	addi	r16,r19,1
    9efc:	2823883a 	mov	r17,r5
    9f00:	302b883a 	mov	r21,r6
    9f04:	2025883a 	mov	r18,r4
    9f08:	29400117 	ldw	r5,4(r5)
    9f0c:	1400030e 	bge	r2,r16,9f1c <__lshift+0x54>
    9f10:	1085883a 	add	r2,r2,r2
    9f14:	29400044 	addi	r5,r5,1
    9f18:	143ffd16 	blt	r2,r16,9f10 <__alt_data_end+0xfffb47e0>
    9f1c:	9009883a 	mov	r4,r18
    9f20:	00096940 	call	9694 <_Balloc>
    9f24:	11c00504 	addi	r7,r2,20
    9f28:	0500090e 	bge	zero,r20,9f50 <__lshift+0x88>
    9f2c:	3811883a 	mov	r8,r7
    9f30:	0007883a 	mov	r3,zero
    9f34:	40000015 	stw	zero,0(r8)
    9f38:	18c00044 	addi	r3,r3,1
    9f3c:	42000104 	addi	r8,r8,4
    9f40:	1d3ffc1e 	bne	r3,r20,9f34 <__alt_data_end+0xfffb4804>
    9f44:	18c7883a 	add	r3,r3,r3
    9f48:	18c7883a 	add	r3,r3,r3
    9f4c:	38cf883a 	add	r7,r7,r3
    9f50:	89000417 	ldw	r4,16(r17)
    9f54:	88c00504 	addi	r3,r17,20
    9f58:	a98007cc 	andi	r6,r21,31
    9f5c:	2109883a 	add	r4,r4,r4
    9f60:	2109883a 	add	r4,r4,r4
    9f64:	1909883a 	add	r4,r3,r4
    9f68:	30002326 	beq	r6,zero,9ff8 <__lshift+0x130>
    9f6c:	01400804 	movi	r5,32
    9f70:	298bc83a 	sub	r5,r5,r6
    9f74:	0013883a 	mov	r9,zero
    9f78:	1a000017 	ldw	r8,0(r3)
    9f7c:	3815883a 	mov	r10,r7
    9f80:	39c00104 	addi	r7,r7,4
    9f84:	4190983a 	sll	r8,r8,r6
    9f88:	18c00104 	addi	r3,r3,4
    9f8c:	4a10b03a 	or	r8,r9,r8
    9f90:	3a3fff15 	stw	r8,-4(r7)
    9f94:	1a3fff17 	ldw	r8,-4(r3)
    9f98:	4152d83a 	srl	r9,r8,r5
    9f9c:	193ff636 	bltu	r3,r4,9f78 <__alt_data_end+0xfffb4848>
    9fa0:	52400115 	stw	r9,4(r10)
    9fa4:	48000126 	beq	r9,zero,9fac <__lshift+0xe4>
    9fa8:	9c000084 	addi	r16,r19,2
    9fac:	89000117 	ldw	r4,4(r17)
    9fb0:	90c01317 	ldw	r3,76(r18)
    9fb4:	843fffc4 	addi	r16,r16,-1
    9fb8:	2109883a 	add	r4,r4,r4
    9fbc:	2109883a 	add	r4,r4,r4
    9fc0:	1907883a 	add	r3,r3,r4
    9fc4:	19000017 	ldw	r4,0(r3)
    9fc8:	14000415 	stw	r16,16(r2)
    9fcc:	89000015 	stw	r4,0(r17)
    9fd0:	1c400015 	stw	r17,0(r3)
    9fd4:	dfc00617 	ldw	ra,24(sp)
    9fd8:	dd400517 	ldw	r21,20(sp)
    9fdc:	dd000417 	ldw	r20,16(sp)
    9fe0:	dcc00317 	ldw	r19,12(sp)
    9fe4:	dc800217 	ldw	r18,8(sp)
    9fe8:	dc400117 	ldw	r17,4(sp)
    9fec:	dc000017 	ldw	r16,0(sp)
    9ff0:	dec00704 	addi	sp,sp,28
    9ff4:	f800283a 	ret
    9ff8:	19400017 	ldw	r5,0(r3)
    9ffc:	39c00104 	addi	r7,r7,4
    a000:	18c00104 	addi	r3,r3,4
    a004:	397fff15 	stw	r5,-4(r7)
    a008:	193ffb36 	bltu	r3,r4,9ff8 <__alt_data_end+0xfffb48c8>
    a00c:	003fe706 	br	9fac <__alt_data_end+0xfffb487c>

0000a010 <__mcmp>:
    a010:	20800417 	ldw	r2,16(r4)
    a014:	28c00417 	ldw	r3,16(r5)
    a018:	10c5c83a 	sub	r2,r2,r3
    a01c:	1000111e 	bne	r2,zero,a064 <__mcmp+0x54>
    a020:	18c7883a 	add	r3,r3,r3
    a024:	18c7883a 	add	r3,r3,r3
    a028:	21000504 	addi	r4,r4,20
    a02c:	29400504 	addi	r5,r5,20
    a030:	20c5883a 	add	r2,r4,r3
    a034:	28cb883a 	add	r5,r5,r3
    a038:	00000106 	br	a040 <__mcmp+0x30>
    a03c:	20800a2e 	bgeu	r4,r2,a068 <__mcmp+0x58>
    a040:	10bfff04 	addi	r2,r2,-4
    a044:	297fff04 	addi	r5,r5,-4
    a048:	11800017 	ldw	r6,0(r2)
    a04c:	28c00017 	ldw	r3,0(r5)
    a050:	30fffa26 	beq	r6,r3,a03c <__alt_data_end+0xfffb490c>
    a054:	30c00236 	bltu	r6,r3,a060 <__mcmp+0x50>
    a058:	00800044 	movi	r2,1
    a05c:	f800283a 	ret
    a060:	00bfffc4 	movi	r2,-1
    a064:	f800283a 	ret
    a068:	0005883a 	mov	r2,zero
    a06c:	f800283a 	ret

0000a070 <__mdiff>:
    a070:	defffb04 	addi	sp,sp,-20
    a074:	dc000015 	stw	r16,0(sp)
    a078:	2821883a 	mov	r16,r5
    a07c:	dcc00315 	stw	r19,12(sp)
    a080:	300b883a 	mov	r5,r6
    a084:	2027883a 	mov	r19,r4
    a088:	8009883a 	mov	r4,r16
    a08c:	dc800215 	stw	r18,8(sp)
    a090:	dfc00415 	stw	ra,16(sp)
    a094:	dc400115 	stw	r17,4(sp)
    a098:	3025883a 	mov	r18,r6
    a09c:	000a0100 	call	a010 <__mcmp>
    a0a0:	10005226 	beq	r2,zero,a1ec <__mdiff+0x17c>
    a0a4:	10004c16 	blt	r2,zero,a1d8 <__mdiff+0x168>
    a0a8:	0023883a 	mov	r17,zero
    a0ac:	81400117 	ldw	r5,4(r16)
    a0b0:	9809883a 	mov	r4,r19
    a0b4:	00096940 	call	9694 <_Balloc>
    a0b8:	83400417 	ldw	r13,16(r16)
    a0bc:	93800417 	ldw	r14,16(r18)
    a0c0:	81000504 	addi	r4,r16,20
    a0c4:	6b59883a 	add	r12,r13,r13
    a0c8:	739d883a 	add	r14,r14,r14
    a0cc:	6319883a 	add	r12,r12,r12
    a0d0:	91800504 	addi	r6,r18,20
    a0d4:	739d883a 	add	r14,r14,r14
    a0d8:	14400315 	stw	r17,12(r2)
    a0dc:	2319883a 	add	r12,r4,r12
    a0e0:	339d883a 	add	r14,r6,r14
    a0e4:	12400504 	addi	r9,r2,20
    a0e8:	0007883a 	mov	r3,zero
    a0ec:	22000017 	ldw	r8,0(r4)
    a0f0:	32800017 	ldw	r10,0(r6)
    a0f4:	4ac00104 	addi	r11,r9,4
    a0f8:	41ffffcc 	andi	r7,r8,65535
    a0fc:	38c7883a 	add	r3,r7,r3
    a100:	51ffffcc 	andi	r7,r10,65535
    a104:	19cfc83a 	sub	r7,r3,r7
    a108:	4010d43a 	srli	r8,r8,16
    a10c:	5014d43a 	srli	r10,r10,16
    a110:	3807d43a 	srai	r3,r7,16
    a114:	39ffffcc 	andi	r7,r7,65535
    a118:	4291c83a 	sub	r8,r8,r10
    a11c:	40c7883a 	add	r3,r8,r3
    a120:	1810943a 	slli	r8,r3,16
    a124:	31800104 	addi	r6,r6,4
    a128:	21000104 	addi	r4,r4,4
    a12c:	41ceb03a 	or	r7,r8,r7
    a130:	49c00015 	stw	r7,0(r9)
    a134:	1807d43a 	srai	r3,r3,16
    a138:	580b883a 	mov	r5,r11
    a13c:	5813883a 	mov	r9,r11
    a140:	33bfea36 	bltu	r6,r14,a0ec <__alt_data_end+0xfffb49bc>
    a144:	2011883a 	mov	r8,r4
    a148:	2300152e 	bgeu	r4,r12,a1a0 <__mdiff+0x130>
    a14c:	21400017 	ldw	r5,0(r4)
    a150:	4a400104 	addi	r9,r9,4
    a154:	21000104 	addi	r4,r4,4
    a158:	29ffffcc 	andi	r7,r5,65535
    a15c:	38c7883a 	add	r3,r7,r3
    a160:	280ad43a 	srli	r5,r5,16
    a164:	180dd43a 	srai	r6,r3,16
    a168:	19ffffcc 	andi	r7,r3,65535
    a16c:	3147883a 	add	r3,r6,r5
    a170:	180a943a 	slli	r5,r3,16
    a174:	1807d43a 	srai	r3,r3,16
    a178:	29ceb03a 	or	r7,r5,r7
    a17c:	49ffff15 	stw	r7,-4(r9)
    a180:	233ff236 	bltu	r4,r12,a14c <__alt_data_end+0xfffb4a1c>
    a184:	0206303a 	nor	r3,zero,r8
    a188:	1b07883a 	add	r3,r3,r12
    a18c:	1806d0ba 	srli	r3,r3,2
    a190:	18c00044 	addi	r3,r3,1
    a194:	18c7883a 	add	r3,r3,r3
    a198:	18c7883a 	add	r3,r3,r3
    a19c:	58cb883a 	add	r5,r11,r3
    a1a0:	28ffff04 	addi	r3,r5,-4
    a1a4:	3800041e 	bne	r7,zero,a1b8 <__mdiff+0x148>
    a1a8:	18ffff04 	addi	r3,r3,-4
    a1ac:	19000017 	ldw	r4,0(r3)
    a1b0:	6b7fffc4 	addi	r13,r13,-1
    a1b4:	203ffc26 	beq	r4,zero,a1a8 <__alt_data_end+0xfffb4a78>
    a1b8:	13400415 	stw	r13,16(r2)
    a1bc:	dfc00417 	ldw	ra,16(sp)
    a1c0:	dcc00317 	ldw	r19,12(sp)
    a1c4:	dc800217 	ldw	r18,8(sp)
    a1c8:	dc400117 	ldw	r17,4(sp)
    a1cc:	dc000017 	ldw	r16,0(sp)
    a1d0:	dec00504 	addi	sp,sp,20
    a1d4:	f800283a 	ret
    a1d8:	8005883a 	mov	r2,r16
    a1dc:	04400044 	movi	r17,1
    a1e0:	9021883a 	mov	r16,r18
    a1e4:	1025883a 	mov	r18,r2
    a1e8:	003fb006 	br	a0ac <__alt_data_end+0xfffb497c>
    a1ec:	9809883a 	mov	r4,r19
    a1f0:	000b883a 	mov	r5,zero
    a1f4:	00096940 	call	9694 <_Balloc>
    a1f8:	00c00044 	movi	r3,1
    a1fc:	10c00415 	stw	r3,16(r2)
    a200:	10000515 	stw	zero,20(r2)
    a204:	003fed06 	br	a1bc <__alt_data_end+0xfffb4a8c>

0000a208 <__ulp>:
    a208:	295ffc2c 	andhi	r5,r5,32752
    a20c:	00bf3034 	movhi	r2,64704
    a210:	2887883a 	add	r3,r5,r2
    a214:	00c0020e 	bge	zero,r3,a220 <__ulp+0x18>
    a218:	0005883a 	mov	r2,zero
    a21c:	f800283a 	ret
    a220:	00c7c83a 	sub	r3,zero,r3
    a224:	180bd53a 	srai	r5,r3,20
    a228:	008004c4 	movi	r2,19
    a22c:	11400a0e 	bge	r2,r5,a258 <__ulp+0x50>
    a230:	00800c84 	movi	r2,50
    a234:	0007883a 	mov	r3,zero
    a238:	11400516 	blt	r2,r5,a250 <__ulp+0x48>
    a23c:	00800cc4 	movi	r2,51
    a240:	114bc83a 	sub	r5,r2,r5
    a244:	00800044 	movi	r2,1
    a248:	1144983a 	sll	r2,r2,r5
    a24c:	f800283a 	ret
    a250:	00800044 	movi	r2,1
    a254:	f800283a 	ret
    a258:	00800234 	movhi	r2,8
    a25c:	1147d83a 	sra	r3,r2,r5
    a260:	0005883a 	mov	r2,zero
    a264:	f800283a 	ret

0000a268 <__b2d>:
    a268:	defffa04 	addi	sp,sp,-24
    a26c:	dc000015 	stw	r16,0(sp)
    a270:	24000417 	ldw	r16,16(r4)
    a274:	dc400115 	stw	r17,4(sp)
    a278:	24400504 	addi	r17,r4,20
    a27c:	8421883a 	add	r16,r16,r16
    a280:	8421883a 	add	r16,r16,r16
    a284:	8c21883a 	add	r16,r17,r16
    a288:	dc800215 	stw	r18,8(sp)
    a28c:	84bfff17 	ldw	r18,-4(r16)
    a290:	dd000415 	stw	r20,16(sp)
    a294:	dcc00315 	stw	r19,12(sp)
    a298:	9009883a 	mov	r4,r18
    a29c:	2829883a 	mov	r20,r5
    a2a0:	dfc00515 	stw	ra,20(sp)
    a2a4:	00099a40 	call	99a4 <__hi0bits>
    a2a8:	00c00804 	movi	r3,32
    a2ac:	1887c83a 	sub	r3,r3,r2
    a2b0:	a0c00015 	stw	r3,0(r20)
    a2b4:	00c00284 	movi	r3,10
    a2b8:	84ffff04 	addi	r19,r16,-4
    a2bc:	18801216 	blt	r3,r2,a308 <__b2d+0xa0>
    a2c0:	014002c4 	movi	r5,11
    a2c4:	2889c83a 	sub	r4,r5,r2
    a2c8:	9106d83a 	srl	r3,r18,r4
    a2cc:	18cffc34 	orhi	r3,r3,16368
    a2d0:	8cc0282e 	bgeu	r17,r19,a374 <__b2d+0x10c>
    a2d4:	817ffe17 	ldw	r5,-8(r16)
    a2d8:	290ad83a 	srl	r5,r5,r4
    a2dc:	10800544 	addi	r2,r2,21
    a2e0:	9084983a 	sll	r2,r18,r2
    a2e4:	2884b03a 	or	r2,r5,r2
    a2e8:	dfc00517 	ldw	ra,20(sp)
    a2ec:	dd000417 	ldw	r20,16(sp)
    a2f0:	dcc00317 	ldw	r19,12(sp)
    a2f4:	dc800217 	ldw	r18,8(sp)
    a2f8:	dc400117 	ldw	r17,4(sp)
    a2fc:	dc000017 	ldw	r16,0(sp)
    a300:	dec00604 	addi	sp,sp,24
    a304:	f800283a 	ret
    a308:	113ffd44 	addi	r4,r2,-11
    a30c:	8cc00f2e 	bgeu	r17,r19,a34c <__b2d+0xe4>
    a310:	81bffe04 	addi	r6,r16,-8
    a314:	817ffe17 	ldw	r5,-8(r16)
    a318:	20001326 	beq	r4,zero,a368 <__b2d+0x100>
    a31c:	00c00ac4 	movi	r3,43
    a320:	1885c83a 	sub	r2,r3,r2
    a324:	2886d83a 	srl	r3,r5,r2
    a328:	9124983a 	sll	r18,r18,r4
    a32c:	90e4b03a 	or	r18,r18,r3
    a330:	90cffc34 	orhi	r3,r18,16368
    a334:	8980112e 	bgeu	r17,r6,a37c <__b2d+0x114>
    a338:	81bffd17 	ldw	r6,-12(r16)
    a33c:	308cd83a 	srl	r6,r6,r2
    a340:	2904983a 	sll	r2,r5,r4
    a344:	1184b03a 	or	r2,r2,r6
    a348:	003fe706 	br	a2e8 <__alt_data_end+0xfffb4bb8>
    a34c:	20000526 	beq	r4,zero,a364 <__b2d+0xfc>
    a350:	9124983a 	sll	r18,r18,r4
    a354:	000d883a 	mov	r6,zero
    a358:	000b883a 	mov	r5,zero
    a35c:	90cffc34 	orhi	r3,r18,16368
    a360:	003ff706 	br	a340 <__alt_data_end+0xfffb4c10>
    a364:	000b883a 	mov	r5,zero
    a368:	90cffc34 	orhi	r3,r18,16368
    a36c:	2805883a 	mov	r2,r5
    a370:	003fdd06 	br	a2e8 <__alt_data_end+0xfffb4bb8>
    a374:	000b883a 	mov	r5,zero
    a378:	003fd806 	br	a2dc <__alt_data_end+0xfffb4bac>
    a37c:	000d883a 	mov	r6,zero
    a380:	003fef06 	br	a340 <__alt_data_end+0xfffb4c10>

0000a384 <__d2b>:
    a384:	defff704 	addi	sp,sp,-36
    a388:	dc000215 	stw	r16,8(sp)
    a38c:	3021883a 	mov	r16,r6
    a390:	dc400315 	stw	r17,12(sp)
    a394:	8022907a 	slli	r17,r16,1
    a398:	dd400715 	stw	r21,28(sp)
    a39c:	282b883a 	mov	r21,r5
    a3a0:	01400044 	movi	r5,1
    a3a4:	dd000615 	stw	r20,24(sp)
    a3a8:	dcc00515 	stw	r19,20(sp)
    a3ac:	dc800415 	stw	r18,16(sp)
    a3b0:	dfc00815 	stw	ra,32(sp)
    a3b4:	3829883a 	mov	r20,r7
    a3b8:	dc800917 	ldw	r18,36(sp)
    a3bc:	8822d57a 	srli	r17,r17,21
    a3c0:	00096940 	call	9694 <_Balloc>
    a3c4:	1027883a 	mov	r19,r2
    a3c8:	00800434 	movhi	r2,16
    a3cc:	10bfffc4 	addi	r2,r2,-1
    a3d0:	808c703a 	and	r6,r16,r2
    a3d4:	88000126 	beq	r17,zero,a3dc <__d2b+0x58>
    a3d8:	31800434 	orhi	r6,r6,16
    a3dc:	d9800015 	stw	r6,0(sp)
    a3e0:	a8001f26 	beq	r21,zero,a460 <__d2b+0xdc>
    a3e4:	d9000104 	addi	r4,sp,4
    a3e8:	dd400115 	stw	r21,4(sp)
    a3ec:	0009a0c0 	call	9a0c <__lo0bits>
    a3f0:	d8c00017 	ldw	r3,0(sp)
    a3f4:	1000291e 	bne	r2,zero,a49c <__d2b+0x118>
    a3f8:	d9000117 	ldw	r4,4(sp)
    a3fc:	99000515 	stw	r4,20(r19)
    a400:	1820c03a 	cmpne	r16,r3,zero
    a404:	84000044 	addi	r16,r16,1
    a408:	98c00615 	stw	r3,24(r19)
    a40c:	9c000415 	stw	r16,16(r19)
    a410:	88001b1e 	bne	r17,zero,a480 <__d2b+0xfc>
    a414:	800690ba 	slli	r3,r16,2
    a418:	10bef384 	addi	r2,r2,-1074
    a41c:	a0800015 	stw	r2,0(r20)
    a420:	98c5883a 	add	r2,r19,r3
    a424:	11000417 	ldw	r4,16(r2)
    a428:	8020917a 	slli	r16,r16,5
    a42c:	00099a40 	call	99a4 <__hi0bits>
    a430:	8085c83a 	sub	r2,r16,r2
    a434:	90800015 	stw	r2,0(r18)
    a438:	9805883a 	mov	r2,r19
    a43c:	dfc00817 	ldw	ra,32(sp)
    a440:	dd400717 	ldw	r21,28(sp)
    a444:	dd000617 	ldw	r20,24(sp)
    a448:	dcc00517 	ldw	r19,20(sp)
    a44c:	dc800417 	ldw	r18,16(sp)
    a450:	dc400317 	ldw	r17,12(sp)
    a454:	dc000217 	ldw	r16,8(sp)
    a458:	dec00904 	addi	sp,sp,36
    a45c:	f800283a 	ret
    a460:	d809883a 	mov	r4,sp
    a464:	0009a0c0 	call	9a0c <__lo0bits>
    a468:	d8c00017 	ldw	r3,0(sp)
    a46c:	04000044 	movi	r16,1
    a470:	9c000415 	stw	r16,16(r19)
    a474:	98c00515 	stw	r3,20(r19)
    a478:	10800804 	addi	r2,r2,32
    a47c:	883fe526 	beq	r17,zero,a414 <__alt_data_end+0xfffb4ce4>
    a480:	8c7ef344 	addi	r17,r17,-1075
    a484:	88a3883a 	add	r17,r17,r2
    a488:	00c00d44 	movi	r3,53
    a48c:	a4400015 	stw	r17,0(r20)
    a490:	1885c83a 	sub	r2,r3,r2
    a494:	90800015 	stw	r2,0(r18)
    a498:	003fe706 	br	a438 <__alt_data_end+0xfffb4d08>
    a49c:	01000804 	movi	r4,32
    a4a0:	2089c83a 	sub	r4,r4,r2
    a4a4:	1908983a 	sll	r4,r3,r4
    a4a8:	d9400117 	ldw	r5,4(sp)
    a4ac:	1886d83a 	srl	r3,r3,r2
    a4b0:	2148b03a 	or	r4,r4,r5
    a4b4:	99000515 	stw	r4,20(r19)
    a4b8:	d8c00015 	stw	r3,0(sp)
    a4bc:	003fd006 	br	a400 <__alt_data_end+0xfffb4cd0>

0000a4c0 <__ratio>:
    a4c0:	defff904 	addi	sp,sp,-28
    a4c4:	dc400315 	stw	r17,12(sp)
    a4c8:	2823883a 	mov	r17,r5
    a4cc:	d9400104 	addi	r5,sp,4
    a4d0:	dfc00615 	stw	ra,24(sp)
    a4d4:	dcc00515 	stw	r19,20(sp)
    a4d8:	dc800415 	stw	r18,16(sp)
    a4dc:	2027883a 	mov	r19,r4
    a4e0:	dc000215 	stw	r16,8(sp)
    a4e4:	000a2680 	call	a268 <__b2d>
    a4e8:	8809883a 	mov	r4,r17
    a4ec:	d80b883a 	mov	r5,sp
    a4f0:	1025883a 	mov	r18,r2
    a4f4:	1821883a 	mov	r16,r3
    a4f8:	000a2680 	call	a268 <__b2d>
    a4fc:	8a400417 	ldw	r9,16(r17)
    a500:	9a000417 	ldw	r8,16(r19)
    a504:	100d883a 	mov	r6,r2
    a508:	d8800017 	ldw	r2,0(sp)
    a50c:	4251c83a 	sub	r8,r8,r9
    a510:	4012917a 	slli	r9,r8,5
    a514:	da000117 	ldw	r8,4(sp)
    a518:	4091c83a 	sub	r8,r8,r2
    a51c:	4251883a 	add	r8,r8,r9
    a520:	02000d0e 	bge	zero,r8,a558 <__ratio+0x98>
    a524:	4010953a 	slli	r8,r8,20
    a528:	4421883a 	add	r16,r8,r16
    a52c:	9009883a 	mov	r4,r18
    a530:	800b883a 	mov	r5,r16
    a534:	180f883a 	mov	r7,r3
    a538:	000e3a40 	call	e3a4 <__divdf3>
    a53c:	dfc00617 	ldw	ra,24(sp)
    a540:	dcc00517 	ldw	r19,20(sp)
    a544:	dc800417 	ldw	r18,16(sp)
    a548:	dc400317 	ldw	r17,12(sp)
    a54c:	dc000217 	ldw	r16,8(sp)
    a550:	dec00704 	addi	sp,sp,28
    a554:	f800283a 	ret
    a558:	4010953a 	slli	r8,r8,20
    a55c:	1a07c83a 	sub	r3,r3,r8
    a560:	003ff206 	br	a52c <__alt_data_end+0xfffb4dfc>

0000a564 <_mprec_log10>:
    a564:	defffe04 	addi	sp,sp,-8
    a568:	dc000015 	stw	r16,0(sp)
    a56c:	dfc00115 	stw	ra,4(sp)
    a570:	008005c4 	movi	r2,23
    a574:	2021883a 	mov	r16,r4
    a578:	11000d0e 	bge	r2,r4,a5b0 <_mprec_log10+0x4c>
    a57c:	0005883a 	mov	r2,zero
    a580:	00cffc34 	movhi	r3,16368
    a584:	843fffc4 	addi	r16,r16,-1
    a588:	1009883a 	mov	r4,r2
    a58c:	180b883a 	mov	r5,r3
    a590:	000d883a 	mov	r6,zero
    a594:	01d00934 	movhi	r7,16420
    a598:	000ef680 	call	ef68 <__muldf3>
    a59c:	803ff91e 	bne	r16,zero,a584 <__alt_data_end+0xfffb4e54>
    a5a0:	dfc00117 	ldw	ra,4(sp)
    a5a4:	dc000017 	ldw	r16,0(sp)
    a5a8:	dec00204 	addi	sp,sp,8
    a5ac:	f800283a 	ret
    a5b0:	202090fa 	slli	r16,r4,3
    a5b4:	00800074 	movhi	r2,1
    a5b8:	108d0804 	addi	r2,r2,13344
    a5bc:	1421883a 	add	r16,r2,r16
    a5c0:	80800017 	ldw	r2,0(r16)
    a5c4:	80c00117 	ldw	r3,4(r16)
    a5c8:	dfc00117 	ldw	ra,4(sp)
    a5cc:	dc000017 	ldw	r16,0(sp)
    a5d0:	dec00204 	addi	sp,sp,8
    a5d4:	f800283a 	ret

0000a5d8 <__copybits>:
    a5d8:	297fffc4 	addi	r5,r5,-1
    a5dc:	280fd17a 	srai	r7,r5,5
    a5e0:	30c00417 	ldw	r3,16(r6)
    a5e4:	30800504 	addi	r2,r6,20
    a5e8:	39c00044 	addi	r7,r7,1
    a5ec:	18c7883a 	add	r3,r3,r3
    a5f0:	39cf883a 	add	r7,r7,r7
    a5f4:	18c7883a 	add	r3,r3,r3
    a5f8:	39cf883a 	add	r7,r7,r7
    a5fc:	10c7883a 	add	r3,r2,r3
    a600:	21cf883a 	add	r7,r4,r7
    a604:	10c00d2e 	bgeu	r2,r3,a63c <__copybits+0x64>
    a608:	200b883a 	mov	r5,r4
    a60c:	12000017 	ldw	r8,0(r2)
    a610:	29400104 	addi	r5,r5,4
    a614:	10800104 	addi	r2,r2,4
    a618:	2a3fff15 	stw	r8,-4(r5)
    a61c:	10fffb36 	bltu	r2,r3,a60c <__alt_data_end+0xfffb4edc>
    a620:	1985c83a 	sub	r2,r3,r6
    a624:	10bffac4 	addi	r2,r2,-21
    a628:	1004d0ba 	srli	r2,r2,2
    a62c:	10800044 	addi	r2,r2,1
    a630:	1085883a 	add	r2,r2,r2
    a634:	1085883a 	add	r2,r2,r2
    a638:	2089883a 	add	r4,r4,r2
    a63c:	21c0032e 	bgeu	r4,r7,a64c <__copybits+0x74>
    a640:	20000015 	stw	zero,0(r4)
    a644:	21000104 	addi	r4,r4,4
    a648:	21fffd36 	bltu	r4,r7,a640 <__alt_data_end+0xfffb4f10>
    a64c:	f800283a 	ret

0000a650 <__any_on>:
    a650:	20c00417 	ldw	r3,16(r4)
    a654:	2805d17a 	srai	r2,r5,5
    a658:	21000504 	addi	r4,r4,20
    a65c:	18800d0e 	bge	r3,r2,a694 <__any_on+0x44>
    a660:	18c7883a 	add	r3,r3,r3
    a664:	18c7883a 	add	r3,r3,r3
    a668:	20c7883a 	add	r3,r4,r3
    a66c:	20c0192e 	bgeu	r4,r3,a6d4 <__any_on+0x84>
    a670:	18bfff17 	ldw	r2,-4(r3)
    a674:	18ffff04 	addi	r3,r3,-4
    a678:	1000041e 	bne	r2,zero,a68c <__any_on+0x3c>
    a67c:	20c0142e 	bgeu	r4,r3,a6d0 <__any_on+0x80>
    a680:	18ffff04 	addi	r3,r3,-4
    a684:	19400017 	ldw	r5,0(r3)
    a688:	283ffc26 	beq	r5,zero,a67c <__alt_data_end+0xfffb4f4c>
    a68c:	00800044 	movi	r2,1
    a690:	f800283a 	ret
    a694:	10c00a0e 	bge	r2,r3,a6c0 <__any_on+0x70>
    a698:	1085883a 	add	r2,r2,r2
    a69c:	1085883a 	add	r2,r2,r2
    a6a0:	294007cc 	andi	r5,r5,31
    a6a4:	2087883a 	add	r3,r4,r2
    a6a8:	283ff026 	beq	r5,zero,a66c <__alt_data_end+0xfffb4f3c>
    a6ac:	19800017 	ldw	r6,0(r3)
    a6b0:	3144d83a 	srl	r2,r6,r5
    a6b4:	114a983a 	sll	r5,r2,r5
    a6b8:	29bff41e 	bne	r5,r6,a68c <__alt_data_end+0xfffb4f5c>
    a6bc:	003feb06 	br	a66c <__alt_data_end+0xfffb4f3c>
    a6c0:	1085883a 	add	r2,r2,r2
    a6c4:	1085883a 	add	r2,r2,r2
    a6c8:	2087883a 	add	r3,r4,r2
    a6cc:	003fe706 	br	a66c <__alt_data_end+0xfffb4f3c>
    a6d0:	f800283a 	ret
    a6d4:	0005883a 	mov	r2,zero
    a6d8:	f800283a 	ret

0000a6dc <_realloc_r>:
    a6dc:	defff604 	addi	sp,sp,-40
    a6e0:	dcc00315 	stw	r19,12(sp)
    a6e4:	dc400115 	stw	r17,4(sp)
    a6e8:	dfc00915 	stw	ra,36(sp)
    a6ec:	df000815 	stw	fp,32(sp)
    a6f0:	ddc00715 	stw	r23,28(sp)
    a6f4:	dd800615 	stw	r22,24(sp)
    a6f8:	dd400515 	stw	r21,20(sp)
    a6fc:	dd000415 	stw	r20,16(sp)
    a700:	dc800215 	stw	r18,8(sp)
    a704:	dc000015 	stw	r16,0(sp)
    a708:	2827883a 	mov	r19,r5
    a70c:	3023883a 	mov	r17,r6
    a710:	2800bf26 	beq	r5,zero,aa10 <_realloc_r+0x334>
    a714:	2025883a 	mov	r18,r4
    a718:	00108e40 	call	108e4 <__malloc_lock>
    a71c:	98ffff17 	ldw	r3,-4(r19)
    a720:	01bfff04 	movi	r6,-4
    a724:	890002c4 	addi	r4,r17,11
    a728:	01c00584 	movi	r7,22
    a72c:	9d7ffe04 	addi	r21,r19,-8
    a730:	19a0703a 	and	r16,r3,r6
    a734:	39003f2e 	bgeu	r7,r4,a834 <_realloc_r+0x158>
    a738:	053ffe04 	movi	r20,-8
    a73c:	2528703a 	and	r20,r4,r20
    a740:	a00f883a 	mov	r7,r20
    a744:	a0008216 	blt	r20,zero,a950 <_realloc_r+0x274>
    a748:	a4408136 	bltu	r20,r17,a950 <_realloc_r+0x274>
    a74c:	81c03c0e 	bge	r16,r7,a840 <_realloc_r+0x164>
    a750:	07000074 	movhi	fp,1
    a754:	e70dab04 	addi	fp,fp,13996
    a758:	e1000217 	ldw	r4,8(fp)
    a75c:	ac05883a 	add	r2,r21,r16
    a760:	2080bf26 	beq	r4,r2,aa60 <_realloc_r+0x384>
    a764:	11000117 	ldw	r4,4(r2)
    a768:	023fff84 	movi	r8,-2
    a76c:	2210703a 	and	r8,r4,r8
    a770:	1211883a 	add	r8,r2,r8
    a774:	41400117 	ldw	r5,4(r8)
    a778:	2940004c 	andi	r5,r5,1
    a77c:	28004a1e 	bne	r5,zero,a8a8 <_realloc_r+0x1cc>
    a780:	017fff04 	movi	r5,-4
    a784:	2148703a 	and	r4,r4,r5
    a788:	2409883a 	add	r4,r4,r16
    a78c:	21c0ad0e 	bge	r4,r7,aa44 <_realloc_r+0x368>
    a790:	18c0004c 	andi	r3,r3,1
    a794:	18007f1e 	bne	r3,zero,a994 <_realloc_r+0x2b8>
    a798:	9dfffe17 	ldw	r23,-8(r19)
    a79c:	adefc83a 	sub	r23,r21,r23
    a7a0:	bd800117 	ldw	r22,4(r23)
    a7a4:	b14a703a 	and	r5,r22,r5
    a7a8:	216d883a 	add	r22,r4,r5
    a7ac:	b1c04516 	blt	r22,r7,a8c4 <_realloc_r+0x1e8>
    a7b0:	10c00317 	ldw	r3,12(r2)
    a7b4:	10800217 	ldw	r2,8(r2)
    a7b8:	81bfff04 	addi	r6,r16,-4
    a7bc:	bc400204 	addi	r17,r23,8
    a7c0:	10c00315 	stw	r3,12(r2)
    a7c4:	18800215 	stw	r2,8(r3)
    a7c8:	b9400217 	ldw	r5,8(r23)
    a7cc:	b8c00317 	ldw	r3,12(r23)
    a7d0:	00800904 	movi	r2,36
    a7d4:	28c00315 	stw	r3,12(r5)
    a7d8:	19400215 	stw	r5,8(r3)
    a7dc:	1180ef36 	bltu	r2,r6,ab9c <_realloc_r+0x4c0>
    a7e0:	008004c4 	movi	r2,19
    a7e4:	1180da2e 	bgeu	r2,r6,ab50 <_realloc_r+0x474>
    a7e8:	98800017 	ldw	r2,0(r19)
    a7ec:	b8800215 	stw	r2,8(r23)
    a7f0:	98800117 	ldw	r2,4(r19)
    a7f4:	b8800315 	stw	r2,12(r23)
    a7f8:	008006c4 	movi	r2,27
    a7fc:	1180fc2e 	bgeu	r2,r6,abf0 <_realloc_r+0x514>
    a800:	98800217 	ldw	r2,8(r19)
    a804:	b8800415 	stw	r2,16(r23)
    a808:	98800317 	ldw	r2,12(r19)
    a80c:	b8800515 	stw	r2,20(r23)
    a810:	00800904 	movi	r2,36
    a814:	3080421e 	bne	r6,r2,a920 <_realloc_r+0x244>
    a818:	98800417 	ldw	r2,16(r19)
    a81c:	9cc00604 	addi	r19,r19,24
    a820:	b8c00804 	addi	r3,r23,32
    a824:	b8800615 	stw	r2,24(r23)
    a828:	98bfff17 	ldw	r2,-4(r19)
    a82c:	b8800715 	stw	r2,28(r23)
    a830:	00003d06 	br	a928 <_realloc_r+0x24c>
    a834:	01c00404 	movi	r7,16
    a838:	3829883a 	mov	r20,r7
    a83c:	003fc206 	br	a748 <__alt_data_end+0xfffb5018>
    a840:	9823883a 	mov	r17,r19
    a844:	850fc83a 	sub	r7,r16,r20
    a848:	008003c4 	movi	r2,15
    a84c:	18c0004c 	andi	r3,r3,1
    a850:	11c04336 	bltu	r2,r7,a960 <_realloc_r+0x284>
    a854:	1c06b03a 	or	r3,r3,r16
    a858:	a8c00115 	stw	r3,4(r21)
    a85c:	ac21883a 	add	r16,r21,r16
    a860:	80c00117 	ldw	r3,4(r16)
    a864:	18c00054 	ori	r3,r3,1
    a868:	80c00115 	stw	r3,4(r16)
    a86c:	9009883a 	mov	r4,r18
    a870:	00109040 	call	10904 <__malloc_unlock>
    a874:	8805883a 	mov	r2,r17
    a878:	dfc00917 	ldw	ra,36(sp)
    a87c:	df000817 	ldw	fp,32(sp)
    a880:	ddc00717 	ldw	r23,28(sp)
    a884:	dd800617 	ldw	r22,24(sp)
    a888:	dd400517 	ldw	r21,20(sp)
    a88c:	dd000417 	ldw	r20,16(sp)
    a890:	dcc00317 	ldw	r19,12(sp)
    a894:	dc800217 	ldw	r18,8(sp)
    a898:	dc400117 	ldw	r17,4(sp)
    a89c:	dc000017 	ldw	r16,0(sp)
    a8a0:	dec00a04 	addi	sp,sp,40
    a8a4:	f800283a 	ret
    a8a8:	18c0004c 	andi	r3,r3,1
    a8ac:	1800391e 	bne	r3,zero,a994 <_realloc_r+0x2b8>
    a8b0:	9dfffe17 	ldw	r23,-8(r19)
    a8b4:	00bfff04 	movi	r2,-4
    a8b8:	adefc83a 	sub	r23,r21,r23
    a8bc:	b9400117 	ldw	r5,4(r23)
    a8c0:	288a703a 	and	r5,r5,r2
    a8c4:	2c2d883a 	add	r22,r5,r16
    a8c8:	b1c03216 	blt	r22,r7,a994 <_realloc_r+0x2b8>
    a8cc:	b8800317 	ldw	r2,12(r23)
    a8d0:	b8c00217 	ldw	r3,8(r23)
    a8d4:	81bfff04 	addi	r6,r16,-4
    a8d8:	01000904 	movi	r4,36
    a8dc:	18800315 	stw	r2,12(r3)
    a8e0:	10c00215 	stw	r3,8(r2)
    a8e4:	bc400204 	addi	r17,r23,8
    a8e8:	2180ac36 	bltu	r4,r6,ab9c <_realloc_r+0x4c0>
    a8ec:	008004c4 	movi	r2,19
    a8f0:	1180972e 	bgeu	r2,r6,ab50 <_realloc_r+0x474>
    a8f4:	98800017 	ldw	r2,0(r19)
    a8f8:	b8800215 	stw	r2,8(r23)
    a8fc:	98800117 	ldw	r2,4(r19)
    a900:	b8800315 	stw	r2,12(r23)
    a904:	008006c4 	movi	r2,27
    a908:	1180b92e 	bgeu	r2,r6,abf0 <_realloc_r+0x514>
    a90c:	98800217 	ldw	r2,8(r19)
    a910:	b8800415 	stw	r2,16(r23)
    a914:	98800317 	ldw	r2,12(r19)
    a918:	b8800515 	stw	r2,20(r23)
    a91c:	313fbe26 	beq	r6,r4,a818 <__alt_data_end+0xfffb50e8>
    a920:	b8c00604 	addi	r3,r23,24
    a924:	9cc00404 	addi	r19,r19,16
    a928:	98800017 	ldw	r2,0(r19)
    a92c:	b021883a 	mov	r16,r22
    a930:	b82b883a 	mov	r21,r23
    a934:	18800015 	stw	r2,0(r3)
    a938:	98800117 	ldw	r2,4(r19)
    a93c:	18800115 	stw	r2,4(r3)
    a940:	98800217 	ldw	r2,8(r19)
    a944:	18800215 	stw	r2,8(r3)
    a948:	b8c00117 	ldw	r3,4(r23)
    a94c:	003fbd06 	br	a844 <__alt_data_end+0xfffb5114>
    a950:	00800304 	movi	r2,12
    a954:	90800015 	stw	r2,0(r18)
    a958:	0005883a 	mov	r2,zero
    a95c:	003fc606 	br	a878 <__alt_data_end+0xfffb5148>
    a960:	1d06b03a 	or	r3,r3,r20
    a964:	ad0b883a 	add	r5,r21,r20
    a968:	a8c00115 	stw	r3,4(r21)
    a96c:	38800054 	ori	r2,r7,1
    a970:	28800115 	stw	r2,4(r5)
    a974:	29cf883a 	add	r7,r5,r7
    a978:	38800117 	ldw	r2,4(r7)
    a97c:	9009883a 	mov	r4,r18
    a980:	29400204 	addi	r5,r5,8
    a984:	10800054 	ori	r2,r2,1
    a988:	38800115 	stw	r2,4(r7)
    a98c:	00086580 	call	8658 <_free_r>
    a990:	003fb606 	br	a86c <__alt_data_end+0xfffb513c>
    a994:	880b883a 	mov	r5,r17
    a998:	9009883a 	mov	r4,r18
    a99c:	00039440 	call	3944 <_malloc_r>
    a9a0:	1023883a 	mov	r17,r2
    a9a4:	1000aa26 	beq	r2,zero,ac50 <_realloc_r+0x574>
    a9a8:	98ffff17 	ldw	r3,-4(r19)
    a9ac:	113ffe04 	addi	r4,r2,-8
    a9b0:	00bfff84 	movi	r2,-2
    a9b4:	1884703a 	and	r2,r3,r2
    a9b8:	a885883a 	add	r2,r21,r2
    a9bc:	20808626 	beq	r4,r2,abd8 <_realloc_r+0x4fc>
    a9c0:	81bfff04 	addi	r6,r16,-4
    a9c4:	00800904 	movi	r2,36
    a9c8:	11807036 	bltu	r2,r6,ab8c <_realloc_r+0x4b0>
    a9cc:	00c004c4 	movi	r3,19
    a9d0:	19805636 	bltu	r3,r6,ab2c <_realloc_r+0x450>
    a9d4:	8805883a 	mov	r2,r17
    a9d8:	9807883a 	mov	r3,r19
    a9dc:	19000017 	ldw	r4,0(r3)
    a9e0:	11000015 	stw	r4,0(r2)
    a9e4:	19000117 	ldw	r4,4(r3)
    a9e8:	11000115 	stw	r4,4(r2)
    a9ec:	18c00217 	ldw	r3,8(r3)
    a9f0:	10c00215 	stw	r3,8(r2)
    a9f4:	980b883a 	mov	r5,r19
    a9f8:	9009883a 	mov	r4,r18
    a9fc:	00086580 	call	8658 <_free_r>
    aa00:	9009883a 	mov	r4,r18
    aa04:	00109040 	call	10904 <__malloc_unlock>
    aa08:	8805883a 	mov	r2,r17
    aa0c:	003f9a06 	br	a878 <__alt_data_end+0xfffb5148>
    aa10:	300b883a 	mov	r5,r6
    aa14:	dfc00917 	ldw	ra,36(sp)
    aa18:	df000817 	ldw	fp,32(sp)
    aa1c:	ddc00717 	ldw	r23,28(sp)
    aa20:	dd800617 	ldw	r22,24(sp)
    aa24:	dd400517 	ldw	r21,20(sp)
    aa28:	dd000417 	ldw	r20,16(sp)
    aa2c:	dcc00317 	ldw	r19,12(sp)
    aa30:	dc800217 	ldw	r18,8(sp)
    aa34:	dc400117 	ldw	r17,4(sp)
    aa38:	dc000017 	ldw	r16,0(sp)
    aa3c:	dec00a04 	addi	sp,sp,40
    aa40:	00039441 	jmpi	3944 <_malloc_r>
    aa44:	11400317 	ldw	r5,12(r2)
    aa48:	10800217 	ldw	r2,8(r2)
    aa4c:	9823883a 	mov	r17,r19
    aa50:	2021883a 	mov	r16,r4
    aa54:	11400315 	stw	r5,12(r2)
    aa58:	28800215 	stw	r2,8(r5)
    aa5c:	003f7906 	br	a844 <__alt_data_end+0xfffb5114>
    aa60:	21000117 	ldw	r4,4(r4)
    aa64:	00bfff04 	movi	r2,-4
    aa68:	a1800404 	addi	r6,r20,16
    aa6c:	2088703a 	and	r4,r4,r2
    aa70:	2409883a 	add	r4,r4,r16
    aa74:	2180380e 	bge	r4,r6,ab58 <_realloc_r+0x47c>
    aa78:	18c0004c 	andi	r3,r3,1
    aa7c:	183fc51e 	bne	r3,zero,a994 <__alt_data_end+0xfffb5264>
    aa80:	9dfffe17 	ldw	r23,-8(r19)
    aa84:	adefc83a 	sub	r23,r21,r23
    aa88:	b9400117 	ldw	r5,4(r23)
    aa8c:	288a703a 	and	r5,r5,r2
    aa90:	216d883a 	add	r22,r4,r5
    aa94:	b1bf8b16 	blt	r22,r6,a8c4 <__alt_data_end+0xfffb5194>
    aa98:	b8800317 	ldw	r2,12(r23)
    aa9c:	b8c00217 	ldw	r3,8(r23)
    aaa0:	81bfff04 	addi	r6,r16,-4
    aaa4:	01000904 	movi	r4,36
    aaa8:	18800315 	stw	r2,12(r3)
    aaac:	10c00215 	stw	r3,8(r2)
    aab0:	bc400204 	addi	r17,r23,8
    aab4:	21805a36 	bltu	r4,r6,ac20 <_realloc_r+0x544>
    aab8:	008004c4 	movi	r2,19
    aabc:	1180562e 	bgeu	r2,r6,ac18 <_realloc_r+0x53c>
    aac0:	98800017 	ldw	r2,0(r19)
    aac4:	b8800215 	stw	r2,8(r23)
    aac8:	98800117 	ldw	r2,4(r19)
    aacc:	b8800315 	stw	r2,12(r23)
    aad0:	008006c4 	movi	r2,27
    aad4:	11805636 	bltu	r2,r6,ac30 <_realloc_r+0x554>
    aad8:	b8800404 	addi	r2,r23,16
    aadc:	9cc00204 	addi	r19,r19,8
    aae0:	98c00017 	ldw	r3,0(r19)
    aae4:	10c00015 	stw	r3,0(r2)
    aae8:	98c00117 	ldw	r3,4(r19)
    aaec:	10c00115 	stw	r3,4(r2)
    aaf0:	98c00217 	ldw	r3,8(r19)
    aaf4:	10c00215 	stw	r3,8(r2)
    aaf8:	bd07883a 	add	r3,r23,r20
    aafc:	b505c83a 	sub	r2,r22,r20
    ab00:	e0c00215 	stw	r3,8(fp)
    ab04:	10800054 	ori	r2,r2,1
    ab08:	18800115 	stw	r2,4(r3)
    ab0c:	b8800117 	ldw	r2,4(r23)
    ab10:	9009883a 	mov	r4,r18
    ab14:	1080004c 	andi	r2,r2,1
    ab18:	a0a8b03a 	or	r20,r20,r2
    ab1c:	bd000115 	stw	r20,4(r23)
    ab20:	00109040 	call	10904 <__malloc_unlock>
    ab24:	8805883a 	mov	r2,r17
    ab28:	003f5306 	br	a878 <__alt_data_end+0xfffb5148>
    ab2c:	98c00017 	ldw	r3,0(r19)
    ab30:	88c00015 	stw	r3,0(r17)
    ab34:	98c00117 	ldw	r3,4(r19)
    ab38:	88c00115 	stw	r3,4(r17)
    ab3c:	00c006c4 	movi	r3,27
    ab40:	19801d36 	bltu	r3,r6,abb8 <_realloc_r+0x4dc>
    ab44:	88800204 	addi	r2,r17,8
    ab48:	98c00204 	addi	r3,r19,8
    ab4c:	003fa306 	br	a9dc <__alt_data_end+0xfffb52ac>
    ab50:	8807883a 	mov	r3,r17
    ab54:	003f7406 	br	a928 <__alt_data_end+0xfffb51f8>
    ab58:	ad2b883a 	add	r21,r21,r20
    ab5c:	2505c83a 	sub	r2,r4,r20
    ab60:	e5400215 	stw	r21,8(fp)
    ab64:	10800054 	ori	r2,r2,1
    ab68:	a8800115 	stw	r2,4(r21)
    ab6c:	98bfff17 	ldw	r2,-4(r19)
    ab70:	9009883a 	mov	r4,r18
    ab74:	1080004c 	andi	r2,r2,1
    ab78:	a0a8b03a 	or	r20,r20,r2
    ab7c:	9d3fff15 	stw	r20,-4(r19)
    ab80:	00109040 	call	10904 <__malloc_unlock>
    ab84:	9805883a 	mov	r2,r19
    ab88:	003f3b06 	br	a878 <__alt_data_end+0xfffb5148>
    ab8c:	8809883a 	mov	r4,r17
    ab90:	980b883a 	mov	r5,r19
    ab94:	00094140 	call	9414 <memmove>
    ab98:	003f9606 	br	a9f4 <__alt_data_end+0xfffb52c4>
    ab9c:	8809883a 	mov	r4,r17
    aba0:	980b883a 	mov	r5,r19
    aba4:	00094140 	call	9414 <memmove>
    aba8:	b8c00117 	ldw	r3,4(r23)
    abac:	b021883a 	mov	r16,r22
    abb0:	b82b883a 	mov	r21,r23
    abb4:	003f2306 	br	a844 <__alt_data_end+0xfffb5114>
    abb8:	98c00217 	ldw	r3,8(r19)
    abbc:	88c00215 	stw	r3,8(r17)
    abc0:	98c00317 	ldw	r3,12(r19)
    abc4:	88c00315 	stw	r3,12(r17)
    abc8:	30800c26 	beq	r6,r2,abfc <_realloc_r+0x520>
    abcc:	88800404 	addi	r2,r17,16
    abd0:	98c00404 	addi	r3,r19,16
    abd4:	003f8106 	br	a9dc <__alt_data_end+0xfffb52ac>
    abd8:	893fff17 	ldw	r4,-4(r17)
    abdc:	00bfff04 	movi	r2,-4
    abe0:	9823883a 	mov	r17,r19
    abe4:	2084703a 	and	r2,r4,r2
    abe8:	80a1883a 	add	r16,r16,r2
    abec:	003f1506 	br	a844 <__alt_data_end+0xfffb5114>
    abf0:	b8c00404 	addi	r3,r23,16
    abf4:	9cc00204 	addi	r19,r19,8
    abf8:	003f4b06 	br	a928 <__alt_data_end+0xfffb51f8>
    abfc:	99000417 	ldw	r4,16(r19)
    ac00:	88800604 	addi	r2,r17,24
    ac04:	98c00604 	addi	r3,r19,24
    ac08:	89000415 	stw	r4,16(r17)
    ac0c:	99000517 	ldw	r4,20(r19)
    ac10:	89000515 	stw	r4,20(r17)
    ac14:	003f7106 	br	a9dc <__alt_data_end+0xfffb52ac>
    ac18:	8805883a 	mov	r2,r17
    ac1c:	003fb006 	br	aae0 <__alt_data_end+0xfffb53b0>
    ac20:	8809883a 	mov	r4,r17
    ac24:	980b883a 	mov	r5,r19
    ac28:	00094140 	call	9414 <memmove>
    ac2c:	003fb206 	br	aaf8 <__alt_data_end+0xfffb53c8>
    ac30:	98800217 	ldw	r2,8(r19)
    ac34:	b8800415 	stw	r2,16(r23)
    ac38:	98800317 	ldw	r2,12(r19)
    ac3c:	b8800515 	stw	r2,20(r23)
    ac40:	31000726 	beq	r6,r4,ac60 <_realloc_r+0x584>
    ac44:	b8800604 	addi	r2,r23,24
    ac48:	9cc00404 	addi	r19,r19,16
    ac4c:	003fa406 	br	aae0 <__alt_data_end+0xfffb53b0>
    ac50:	9009883a 	mov	r4,r18
    ac54:	00109040 	call	10904 <__malloc_unlock>
    ac58:	0005883a 	mov	r2,zero
    ac5c:	003f0606 	br	a878 <__alt_data_end+0xfffb5148>
    ac60:	98c00417 	ldw	r3,16(r19)
    ac64:	9cc00604 	addi	r19,r19,24
    ac68:	b8800804 	addi	r2,r23,32
    ac6c:	b8c00615 	stw	r3,24(r23)
    ac70:	98ffff17 	ldw	r3,-4(r19)
    ac74:	b8c00715 	stw	r3,28(r23)
    ac78:	003f9906 	br	aae0 <__alt_data_end+0xfffb53b0>

0000ac7c <__fpclassifyd>:
    ac7c:	00a00034 	movhi	r2,32768
    ac80:	10bfffc4 	addi	r2,r2,-1
    ac84:	2884703a 	and	r2,r5,r2
    ac88:	10000726 	beq	r2,zero,aca8 <__fpclassifyd+0x2c>
    ac8c:	00fffc34 	movhi	r3,65520
    ac90:	019ff834 	movhi	r6,32736
    ac94:	28c7883a 	add	r3,r5,r3
    ac98:	31bfffc4 	addi	r6,r6,-1
    ac9c:	30c00536 	bltu	r6,r3,acb4 <__fpclassifyd+0x38>
    aca0:	00800104 	movi	r2,4
    aca4:	f800283a 	ret
    aca8:	2000021e 	bne	r4,zero,acb4 <__fpclassifyd+0x38>
    acac:	00800084 	movi	r2,2
    acb0:	f800283a 	ret
    acb4:	00dffc34 	movhi	r3,32752
    acb8:	019ff834 	movhi	r6,32736
    acbc:	28cb883a 	add	r5,r5,r3
    acc0:	31bfffc4 	addi	r6,r6,-1
    acc4:	317ff62e 	bgeu	r6,r5,aca0 <__alt_data_end+0xfffb5570>
    acc8:	01400434 	movhi	r5,16
    accc:	297fffc4 	addi	r5,r5,-1
    acd0:	28800236 	bltu	r5,r2,acdc <__fpclassifyd+0x60>
    acd4:	008000c4 	movi	r2,3
    acd8:	f800283a 	ret
    acdc:	10c00226 	beq	r2,r3,ace8 <__fpclassifyd+0x6c>
    ace0:	0005883a 	mov	r2,zero
    ace4:	f800283a 	ret
    ace8:	2005003a 	cmpeq	r2,r4,zero
    acec:	f800283a 	ret

0000acf0 <__sread>:
    acf0:	defffe04 	addi	sp,sp,-8
    acf4:	dc000015 	stw	r16,0(sp)
    acf8:	2821883a 	mov	r16,r5
    acfc:	2940038f 	ldh	r5,14(r5)
    ad00:	dfc00115 	stw	ra,4(sp)
    ad04:	000c9ac0 	call	c9ac <_read_r>
    ad08:	10000716 	blt	r2,zero,ad28 <__sread+0x38>
    ad0c:	80c01417 	ldw	r3,80(r16)
    ad10:	1887883a 	add	r3,r3,r2
    ad14:	80c01415 	stw	r3,80(r16)
    ad18:	dfc00117 	ldw	ra,4(sp)
    ad1c:	dc000017 	ldw	r16,0(sp)
    ad20:	dec00204 	addi	sp,sp,8
    ad24:	f800283a 	ret
    ad28:	80c0030b 	ldhu	r3,12(r16)
    ad2c:	18fbffcc 	andi	r3,r3,61439
    ad30:	80c0030d 	sth	r3,12(r16)
    ad34:	dfc00117 	ldw	ra,4(sp)
    ad38:	dc000017 	ldw	r16,0(sp)
    ad3c:	dec00204 	addi	sp,sp,8
    ad40:	f800283a 	ret

0000ad44 <__seofread>:
    ad44:	0005883a 	mov	r2,zero
    ad48:	f800283a 	ret

0000ad4c <__swrite>:
    ad4c:	2880030b 	ldhu	r2,12(r5)
    ad50:	defffb04 	addi	sp,sp,-20
    ad54:	dcc00315 	stw	r19,12(sp)
    ad58:	dc800215 	stw	r18,8(sp)
    ad5c:	dc400115 	stw	r17,4(sp)
    ad60:	dc000015 	stw	r16,0(sp)
    ad64:	dfc00415 	stw	ra,16(sp)
    ad68:	10c0400c 	andi	r3,r2,256
    ad6c:	2821883a 	mov	r16,r5
    ad70:	2027883a 	mov	r19,r4
    ad74:	3025883a 	mov	r18,r6
    ad78:	3823883a 	mov	r17,r7
    ad7c:	18000526 	beq	r3,zero,ad94 <__swrite+0x48>
    ad80:	2940038f 	ldh	r5,14(r5)
    ad84:	000d883a 	mov	r6,zero
    ad88:	01c00084 	movi	r7,2
    ad8c:	000c9500 	call	c950 <_lseek_r>
    ad90:	8080030b 	ldhu	r2,12(r16)
    ad94:	8140038f 	ldh	r5,14(r16)
    ad98:	10bbffcc 	andi	r2,r2,61439
    ad9c:	9809883a 	mov	r4,r19
    ada0:	900d883a 	mov	r6,r18
    ada4:	880f883a 	mov	r7,r17
    ada8:	8080030d 	sth	r2,12(r16)
    adac:	dfc00417 	ldw	ra,16(sp)
    adb0:	dcc00317 	ldw	r19,12(sp)
    adb4:	dc800217 	ldw	r18,8(sp)
    adb8:	dc400117 	ldw	r17,4(sp)
    adbc:	dc000017 	ldw	r16,0(sp)
    adc0:	dec00504 	addi	sp,sp,20
    adc4:	000c42c1 	jmpi	c42c <_write_r>

0000adc8 <__sseek>:
    adc8:	defffe04 	addi	sp,sp,-8
    adcc:	dc000015 	stw	r16,0(sp)
    add0:	2821883a 	mov	r16,r5
    add4:	2940038f 	ldh	r5,14(r5)
    add8:	dfc00115 	stw	ra,4(sp)
    addc:	000c9500 	call	c950 <_lseek_r>
    ade0:	00ffffc4 	movi	r3,-1
    ade4:	10c00826 	beq	r2,r3,ae08 <__sseek+0x40>
    ade8:	80c0030b 	ldhu	r3,12(r16)
    adec:	80801415 	stw	r2,80(r16)
    adf0:	18c40014 	ori	r3,r3,4096
    adf4:	80c0030d 	sth	r3,12(r16)
    adf8:	dfc00117 	ldw	ra,4(sp)
    adfc:	dc000017 	ldw	r16,0(sp)
    ae00:	dec00204 	addi	sp,sp,8
    ae04:	f800283a 	ret
    ae08:	80c0030b 	ldhu	r3,12(r16)
    ae0c:	18fbffcc 	andi	r3,r3,61439
    ae10:	80c0030d 	sth	r3,12(r16)
    ae14:	dfc00117 	ldw	ra,4(sp)
    ae18:	dc000017 	ldw	r16,0(sp)
    ae1c:	dec00204 	addi	sp,sp,8
    ae20:	f800283a 	ret

0000ae24 <__sclose>:
    ae24:	2940038f 	ldh	r5,14(r5)
    ae28:	000c4881 	jmpi	c488 <_close_r>

0000ae2c <strcmp>:
    ae2c:	2144b03a 	or	r2,r4,r5
    ae30:	108000cc 	andi	r2,r2,3
    ae34:	1000171e 	bne	r2,zero,ae94 <strcmp+0x68>
    ae38:	20800017 	ldw	r2,0(r4)
    ae3c:	28c00017 	ldw	r3,0(r5)
    ae40:	10c0141e 	bne	r2,r3,ae94 <strcmp+0x68>
    ae44:	027fbff4 	movhi	r9,65279
    ae48:	4a7fbfc4 	addi	r9,r9,-257
    ae4c:	0086303a 	nor	r3,zero,r2
    ae50:	02202074 	movhi	r8,32897
    ae54:	1245883a 	add	r2,r2,r9
    ae58:	42202004 	addi	r8,r8,-32640
    ae5c:	10c4703a 	and	r2,r2,r3
    ae60:	1204703a 	and	r2,r2,r8
    ae64:	10000226 	beq	r2,zero,ae70 <strcmp+0x44>
    ae68:	00001706 	br	aec8 <strcmp+0x9c>
    ae6c:	1000161e 	bne	r2,zero,aec8 <strcmp+0x9c>
    ae70:	21000104 	addi	r4,r4,4
    ae74:	20c00017 	ldw	r3,0(r4)
    ae78:	29400104 	addi	r5,r5,4
    ae7c:	29800017 	ldw	r6,0(r5)
    ae80:	1a4f883a 	add	r7,r3,r9
    ae84:	00c4303a 	nor	r2,zero,r3
    ae88:	3884703a 	and	r2,r7,r2
    ae8c:	1204703a 	and	r2,r2,r8
    ae90:	19bff626 	beq	r3,r6,ae6c <__alt_data_end+0xfffb573c>
    ae94:	20800007 	ldb	r2,0(r4)
    ae98:	1000051e 	bne	r2,zero,aeb0 <strcmp+0x84>
    ae9c:	00000606 	br	aeb8 <strcmp+0x8c>
    aea0:	21000044 	addi	r4,r4,1
    aea4:	20800007 	ldb	r2,0(r4)
    aea8:	29400044 	addi	r5,r5,1
    aeac:	10000226 	beq	r2,zero,aeb8 <strcmp+0x8c>
    aeb0:	28c00007 	ldb	r3,0(r5)
    aeb4:	10fffa26 	beq	r2,r3,aea0 <__alt_data_end+0xfffb5770>
    aeb8:	20800003 	ldbu	r2,0(r4)
    aebc:	28c00003 	ldbu	r3,0(r5)
    aec0:	10c5c83a 	sub	r2,r2,r3
    aec4:	f800283a 	ret
    aec8:	0005883a 	mov	r2,zero
    aecc:	f800283a 	ret

0000aed0 <__sprint_r.part.0>:
    aed0:	28801917 	ldw	r2,100(r5)
    aed4:	defff604 	addi	sp,sp,-40
    aed8:	dd400515 	stw	r21,20(sp)
    aedc:	dcc00315 	stw	r19,12(sp)
    aee0:	dfc00915 	stw	ra,36(sp)
    aee4:	df000815 	stw	fp,32(sp)
    aee8:	ddc00715 	stw	r23,28(sp)
    aeec:	dd800615 	stw	r22,24(sp)
    aef0:	dd000415 	stw	r20,16(sp)
    aef4:	dc800215 	stw	r18,8(sp)
    aef8:	dc400115 	stw	r17,4(sp)
    aefc:	dc000015 	stw	r16,0(sp)
    af00:	1088000c 	andi	r2,r2,8192
    af04:	2827883a 	mov	r19,r5
    af08:	302b883a 	mov	r21,r6
    af0c:	10002d26 	beq	r2,zero,afc4 <__sprint_r.part.0+0xf4>
    af10:	30800217 	ldw	r2,8(r6)
    af14:	35800017 	ldw	r22,0(r6)
    af18:	10002826 	beq	r2,zero,afbc <__sprint_r.part.0+0xec>
    af1c:	2029883a 	mov	r20,r4
    af20:	b5c00104 	addi	r23,r22,4
    af24:	04bfffc4 	movi	r18,-1
    af28:	bc400017 	ldw	r17,0(r23)
    af2c:	b4000017 	ldw	r16,0(r22)
    af30:	0039883a 	mov	fp,zero
    af34:	8822d0ba 	srli	r17,r17,2
    af38:	04400316 	blt	zero,r17,af48 <__sprint_r.part.0+0x78>
    af3c:	00001706 	br	af9c <__sprint_r.part.0+0xcc>
    af40:	84000104 	addi	r16,r16,4
    af44:	8f001526 	beq	r17,fp,af9c <__sprint_r.part.0+0xcc>
    af48:	81400017 	ldw	r5,0(r16)
    af4c:	a009883a 	mov	r4,r20
    af50:	980d883a 	mov	r6,r19
    af54:	000c6c80 	call	c6c8 <_fputwc_r>
    af58:	e7000044 	addi	fp,fp,1
    af5c:	14bff81e 	bne	r2,r18,af40 <__alt_data_end+0xfffb5810>
    af60:	9005883a 	mov	r2,r18
    af64:	a8000215 	stw	zero,8(r21)
    af68:	a8000115 	stw	zero,4(r21)
    af6c:	dfc00917 	ldw	ra,36(sp)
    af70:	df000817 	ldw	fp,32(sp)
    af74:	ddc00717 	ldw	r23,28(sp)
    af78:	dd800617 	ldw	r22,24(sp)
    af7c:	dd400517 	ldw	r21,20(sp)
    af80:	dd000417 	ldw	r20,16(sp)
    af84:	dcc00317 	ldw	r19,12(sp)
    af88:	dc800217 	ldw	r18,8(sp)
    af8c:	dc400117 	ldw	r17,4(sp)
    af90:	dc000017 	ldw	r16,0(sp)
    af94:	dec00a04 	addi	sp,sp,40
    af98:	f800283a 	ret
    af9c:	a8c00217 	ldw	r3,8(r21)
    afa0:	8c63883a 	add	r17,r17,r17
    afa4:	8c63883a 	add	r17,r17,r17
    afa8:	1c45c83a 	sub	r2,r3,r17
    afac:	a8800215 	stw	r2,8(r21)
    afb0:	b5800204 	addi	r22,r22,8
    afb4:	bdc00204 	addi	r23,r23,8
    afb8:	103fdb1e 	bne	r2,zero,af28 <__alt_data_end+0xfffb57f8>
    afbc:	0005883a 	mov	r2,zero
    afc0:	003fe806 	br	af64 <__alt_data_end+0xfffb5834>
    afc4:	00089480 	call	8948 <__sfvwrite_r>
    afc8:	003fe606 	br	af64 <__alt_data_end+0xfffb5834>

0000afcc <__sprint_r>:
    afcc:	30c00217 	ldw	r3,8(r6)
    afd0:	18000126 	beq	r3,zero,afd8 <__sprint_r+0xc>
    afd4:	000aed01 	jmpi	aed0 <__sprint_r.part.0>
    afd8:	30000115 	stw	zero,4(r6)
    afdc:	0005883a 	mov	r2,zero
    afe0:	f800283a 	ret

0000afe4 <___vfiprintf_internal_r>:
    afe4:	defeca04 	addi	sp,sp,-1240
    afe8:	dcc12f15 	stw	r19,1212(sp)
    afec:	dfc13515 	stw	ra,1236(sp)
    aff0:	df013415 	stw	fp,1232(sp)
    aff4:	ddc13315 	stw	r23,1228(sp)
    aff8:	dd813215 	stw	r22,1224(sp)
    affc:	dd413115 	stw	r21,1220(sp)
    b000:	dd013015 	stw	r20,1216(sp)
    b004:	dc812e15 	stw	r18,1208(sp)
    b008:	dc412d15 	stw	r17,1204(sp)
    b00c:	dc012c15 	stw	r16,1200(sp)
    b010:	d9012115 	stw	r4,1156(sp)
    b014:	d9412015 	stw	r5,1152(sp)
    b018:	d9c12315 	stw	r7,1164(sp)
    b01c:	3027883a 	mov	r19,r6
    b020:	20000226 	beq	r4,zero,b02c <___vfiprintf_internal_r+0x48>
    b024:	20800e17 	ldw	r2,56(r4)
    b028:	1000f726 	beq	r2,zero,b408 <___vfiprintf_internal_r+0x424>
    b02c:	d8812017 	ldw	r2,1152(sp)
    b030:	10c0030b 	ldhu	r3,12(r2)
    b034:	1908000c 	andi	r4,r3,8192
    b038:	1805883a 	mov	r2,r3
    b03c:	2000081e 	bne	r4,zero,b060 <___vfiprintf_internal_r+0x7c>
    b040:	d9412017 	ldw	r5,1152(sp)
    b044:	18880014 	ori	r2,r3,8192
    b048:	00f7ffc4 	movi	r3,-8193
    b04c:	29001917 	ldw	r4,100(r5)
    b050:	2880030d 	sth	r2,12(r5)
    b054:	20c8703a 	and	r4,r4,r3
    b058:	29001915 	stw	r4,100(r5)
    b05c:	1007883a 	mov	r3,r2
    b060:	1100020c 	andi	r4,r2,8
    b064:	2000a726 	beq	r4,zero,b304 <___vfiprintf_internal_r+0x320>
    b068:	d9412017 	ldw	r5,1152(sp)
    b06c:	29000417 	ldw	r4,16(r5)
    b070:	2000a426 	beq	r4,zero,b304 <___vfiprintf_internal_r+0x320>
    b074:	1080068c 	andi	r2,r2,26
    b078:	01000284 	movi	r4,10
    b07c:	1100ab26 	beq	r2,r4,b32c <___vfiprintf_internal_r+0x348>
    b080:	d9010a04 	addi	r4,sp,1064
    b084:	d94109c4 	addi	r5,sp,1063
    b088:	07000074 	movhi	fp,1
    b08c:	04400074 	movhi	r17,1
    b090:	2145c83a 	sub	r2,r4,r5
    b094:	e70d3e04 	addi	fp,fp,13560
    b098:	8c4d3a04 	addi	r17,r17,13544
    b09c:	d9011e15 	stw	r4,1144(sp)
    b0a0:	d9411f15 	stw	r5,1148(sp)
    b0a4:	dec11a15 	stw	sp,1128(sp)
    b0a8:	d8011c15 	stw	zero,1136(sp)
    b0ac:	d8011b15 	stw	zero,1132(sp)
    b0b0:	d8012715 	stw	zero,1180(sp)
    b0b4:	d8012515 	stw	zero,1172(sp)
    b0b8:	d811883a 	mov	r8,sp
    b0bc:	d8812815 	stw	r2,1184(sp)
    b0c0:	982f883a 	mov	r23,r19
    b0c4:	b8800007 	ldb	r2,0(r23)
    b0c8:	1003b026 	beq	r2,zero,bf8c <___vfiprintf_internal_r+0xfa8>
    b0cc:	01000944 	movi	r4,37
    b0d0:	1103ae26 	beq	r2,r4,bf8c <___vfiprintf_internal_r+0xfa8>
    b0d4:	b805883a 	mov	r2,r23
    b0d8:	00000106 	br	b0e0 <___vfiprintf_internal_r+0xfc>
    b0dc:	19000326 	beq	r3,r4,b0ec <___vfiprintf_internal_r+0x108>
    b0e0:	10800044 	addi	r2,r2,1
    b0e4:	10c00007 	ldb	r3,0(r2)
    b0e8:	183ffc1e 	bne	r3,zero,b0dc <__alt_data_end+0xfffb59ac>
    b0ec:	15e1c83a 	sub	r16,r2,r23
    b0f0:	1029883a 	mov	r20,r2
    b0f4:	80001026 	beq	r16,zero,b138 <___vfiprintf_internal_r+0x154>
    b0f8:	d8c11c17 	ldw	r3,1136(sp)
    b0fc:	d8811b17 	ldw	r2,1132(sp)
    b100:	45c00015 	stw	r23,0(r8)
    b104:	80c7883a 	add	r3,r16,r3
    b108:	10800044 	addi	r2,r2,1
    b10c:	44000115 	stw	r16,4(r8)
    b110:	d8c11c15 	stw	r3,1136(sp)
    b114:	d8811b15 	stw	r2,1132(sp)
    b118:	010001c4 	movi	r4,7
    b11c:	2080740e 	bge	r4,r2,b2f0 <___vfiprintf_internal_r+0x30c>
    b120:	1803a71e 	bne	r3,zero,bfc0 <___vfiprintf_internal_r+0xfdc>
    b124:	d8c12517 	ldw	r3,1172(sp)
    b128:	d8011b15 	stw	zero,1132(sp)
    b12c:	d811883a 	mov	r8,sp
    b130:	1c07883a 	add	r3,r3,r16
    b134:	d8c12515 	stw	r3,1172(sp)
    b138:	a0800007 	ldb	r2,0(r20)
    b13c:	1002bf26 	beq	r2,zero,bc3c <___vfiprintf_internal_r+0xc58>
    b140:	a5c00044 	addi	r23,r20,1
    b144:	a1800047 	ldb	r6,1(r20)
    b148:	d8011d85 	stb	zero,1142(sp)
    b14c:	d8012205 	stb	zero,1160(sp)
    b150:	043fffc4 	movi	r16,-1
    b154:	d8012415 	stw	zero,1168(sp)
    b158:	0025883a 	mov	r18,zero
    b15c:	05001604 	movi	r20,88
    b160:	05400244 	movi	r21,9
    b164:	4027883a 	mov	r19,r8
    b168:	bdc00044 	addi	r23,r23,1
    b16c:	30bff804 	addi	r2,r6,-32
    b170:	a0825636 	bltu	r20,r2,bacc <___vfiprintf_internal_r+0xae8>
    b174:	100490ba 	slli	r2,r2,2
    b178:	01000074 	movhi	r4,1
    b17c:	212c6304 	addi	r4,r4,-20084
    b180:	1105883a 	add	r2,r2,r4
    b184:	10800017 	ldw	r2,0(r2)
    b188:	1000683a 	jmp	r2
    b18c:	0000ba5c 	xori	zero,zero,745
    b190:	0000bacc 	andi	zero,zero,747
    b194:	0000bacc 	andi	zero,zero,747
    b198:	0000bac0 	call	bac <setup_keyboard+0x50c>
    b19c:	0000bacc 	andi	zero,zero,747
    b1a0:	0000bacc 	andi	zero,zero,747
    b1a4:	0000bacc 	andi	zero,zero,747
    b1a8:	0000bacc 	andi	zero,zero,747
    b1ac:	0000bacc 	andi	zero,zero,747
    b1b0:	0000bacc 	andi	zero,zero,747
    b1b4:	0000b84c 	andi	zero,zero,737
    b1b8:	0000ba74 	movhi	zero,745
    b1bc:	0000bacc 	andi	zero,zero,747
    b1c0:	0000b420 	cmpeqi	zero,zero,720
    b1c4:	0000b870 	cmpltui	zero,zero,737
    b1c8:	0000bacc 	andi	zero,zero,747
    b1cc:	0000b42c 	andhi	zero,zero,720
    b1d0:	0000b438 	rdprs	zero,zero,720
    b1d4:	0000b438 	rdprs	zero,zero,720
    b1d8:	0000b438 	rdprs	zero,zero,720
    b1dc:	0000b438 	rdprs	zero,zero,720
    b1e0:	0000b438 	rdprs	zero,zero,720
    b1e4:	0000b438 	rdprs	zero,zero,720
    b1e8:	0000b438 	rdprs	zero,zero,720
    b1ec:	0000b438 	rdprs	zero,zero,720
    b1f0:	0000b438 	rdprs	zero,zero,720
    b1f4:	0000bacc 	andi	zero,zero,747
    b1f8:	0000bacc 	andi	zero,zero,747
    b1fc:	0000bacc 	andi	zero,zero,747
    b200:	0000bacc 	andi	zero,zero,747
    b204:	0000bacc 	andi	zero,zero,747
    b208:	0000bacc 	andi	zero,zero,747
    b20c:	0000bacc 	andi	zero,zero,747
    b210:	0000bacc 	andi	zero,zero,747
    b214:	0000bacc 	andi	zero,zero,747
    b218:	0000bacc 	andi	zero,zero,747
    b21c:	0000b478 	rdprs	zero,zero,721
    b220:	0000bacc 	andi	zero,zero,747
    b224:	0000bacc 	andi	zero,zero,747
    b228:	0000bacc 	andi	zero,zero,747
    b22c:	0000bacc 	andi	zero,zero,747
    b230:	0000bacc 	andi	zero,zero,747
    b234:	0000bacc 	andi	zero,zero,747
    b238:	0000bacc 	andi	zero,zero,747
    b23c:	0000bacc 	andi	zero,zero,747
    b240:	0000bacc 	andi	zero,zero,747
    b244:	0000bacc 	andi	zero,zero,747
    b248:	0000b768 	cmpgeui	zero,zero,733
    b24c:	0000bacc 	andi	zero,zero,747
    b250:	0000bacc 	andi	zero,zero,747
    b254:	0000bacc 	andi	zero,zero,747
    b258:	0000bacc 	andi	zero,zero,747
    b25c:	0000bacc 	andi	zero,zero,747
    b260:	0000b7a8 	cmpgeui	zero,zero,734
    b264:	0000bacc 	andi	zero,zero,747
    b268:	0000bacc 	andi	zero,zero,747
    b26c:	0000b7ec 	andhi	zero,zero,735
    b270:	0000bacc 	andi	zero,zero,747
    b274:	0000bacc 	andi	zero,zero,747
    b278:	0000bacc 	andi	zero,zero,747
    b27c:	0000bacc 	andi	zero,zero,747
    b280:	0000bacc 	andi	zero,zero,747
    b284:	0000bacc 	andi	zero,zero,747
    b288:	0000bacc 	andi	zero,zero,747
    b28c:	0000bacc 	andi	zero,zero,747
    b290:	0000bacc 	andi	zero,zero,747
    b294:	0000bacc 	andi	zero,zero,747
    b298:	0000b734 	movhi	zero,732
    b29c:	0000ba84 	movi	zero,746
    b2a0:	0000bacc 	andi	zero,zero,747
    b2a4:	0000bacc 	andi	zero,zero,747
    b2a8:	0000bacc 	andi	zero,zero,747
    b2ac:	0000b8c0 	call	b8c <setup_keyboard+0x4ec>
    b2b0:	0000ba84 	movi	zero,746
    b2b4:	0000bacc 	andi	zero,zero,747
    b2b8:	0000bacc 	andi	zero,zero,747
    b2bc:	0000b7d8 	cmpnei	zero,zero,735
    b2c0:	0000bacc 	andi	zero,zero,747
    b2c4:	0000ba24 	muli	zero,zero,744
    b2c8:	0000b9ac 	andhi	zero,zero,742
    b2cc:	0000b9e0 	cmpeqi	zero,zero,743
    b2d0:	0000b8cc 	andi	zero,zero,739
    b2d4:	0000bacc 	andi	zero,zero,747
    b2d8:	0000b8d8 	cmpnei	zero,zero,739
    b2dc:	0000bacc 	andi	zero,zero,747
    b2e0:	0000b934 	movhi	zero,740
    b2e4:	0000bacc 	andi	zero,zero,747
    b2e8:	0000bacc 	andi	zero,zero,747
    b2ec:	0000b968 	cmpgeui	zero,zero,741
    b2f0:	42000204 	addi	r8,r8,8
    b2f4:	d8c12517 	ldw	r3,1172(sp)
    b2f8:	1c07883a 	add	r3,r3,r16
    b2fc:	d8c12515 	stw	r3,1172(sp)
    b300:	003f8d06 	br	b138 <__alt_data_end+0xfffb5a08>
    b304:	d9012117 	ldw	r4,1156(sp)
    b308:	d9412017 	ldw	r5,1152(sp)
    b30c:	00064a80 	call	64a8 <__swsetup_r>
    b310:	1000301e 	bne	r2,zero,b3d4 <___vfiprintf_internal_r+0x3f0>
    b314:	d8812017 	ldw	r2,1152(sp)
    b318:	01000284 	movi	r4,10
    b31c:	10c0030b 	ldhu	r3,12(r2)
    b320:	1805883a 	mov	r2,r3
    b324:	1080068c 	andi	r2,r2,26
    b328:	113f551e 	bne	r2,r4,b080 <__alt_data_end+0xfffb5950>
    b32c:	d9012017 	ldw	r4,1152(sp)
    b330:	2080038b 	ldhu	r2,14(r4)
    b334:	113fffcc 	andi	r4,r2,65535
    b338:	2120001c 	xori	r4,r4,32768
    b33c:	21200004 	addi	r4,r4,-32768
    b340:	203f4f16 	blt	r4,zero,b080 <__alt_data_end+0xfffb5950>
    b344:	d9412017 	ldw	r5,1152(sp)
    b348:	d9012117 	ldw	r4,1156(sp)
    b34c:	d9c12317 	ldw	r7,1164(sp)
    b350:	2b001917 	ldw	r12,100(r5)
    b354:	2ac00717 	ldw	r11,28(r5)
    b358:	2a800917 	ldw	r10,36(r5)
    b35c:	02010004 	movi	r8,1024
    b360:	18ffff4c 	andi	r3,r3,65533
    b364:	da0b883a 	add	r5,sp,r8
    b368:	980d883a 	mov	r6,r19
    b36c:	d8c1030d 	sth	r3,1036(sp)
    b370:	db011915 	stw	r12,1124(sp)
    b374:	d881038d 	sth	r2,1038(sp)
    b378:	dac10715 	stw	r11,1052(sp)
    b37c:	da810915 	stw	r10,1060(sp)
    b380:	dec10015 	stw	sp,1024(sp)
    b384:	dec10415 	stw	sp,1040(sp)
    b388:	da010215 	stw	r8,1032(sp)
    b38c:	da010515 	stw	r8,1044(sp)
    b390:	d8010615 	stw	zero,1048(sp)
    b394:	000afe40 	call	afe4 <___vfiprintf_internal_r>
    b398:	1021883a 	mov	r16,r2
    b39c:	10000416 	blt	r2,zero,b3b0 <___vfiprintf_internal_r+0x3cc>
    b3a0:	d9012117 	ldw	r4,1156(sp)
    b3a4:	d9410004 	addi	r5,sp,1024
    b3a8:	0007f280 	call	7f28 <_fflush_r>
    b3ac:	10040f1e 	bne	r2,zero,c3ec <___vfiprintf_internal_r+0x1408>
    b3b0:	d881030b 	ldhu	r2,1036(sp)
    b3b4:	1080100c 	andi	r2,r2,64
    b3b8:	10000426 	beq	r2,zero,b3cc <___vfiprintf_internal_r+0x3e8>
    b3bc:	d8c12017 	ldw	r3,1152(sp)
    b3c0:	1880030b 	ldhu	r2,12(r3)
    b3c4:	10801014 	ori	r2,r2,64
    b3c8:	1880030d 	sth	r2,12(r3)
    b3cc:	8005883a 	mov	r2,r16
    b3d0:	00000106 	br	b3d8 <___vfiprintf_internal_r+0x3f4>
    b3d4:	00bfffc4 	movi	r2,-1
    b3d8:	dfc13517 	ldw	ra,1236(sp)
    b3dc:	df013417 	ldw	fp,1232(sp)
    b3e0:	ddc13317 	ldw	r23,1228(sp)
    b3e4:	dd813217 	ldw	r22,1224(sp)
    b3e8:	dd413117 	ldw	r21,1220(sp)
    b3ec:	dd013017 	ldw	r20,1216(sp)
    b3f0:	dcc12f17 	ldw	r19,1212(sp)
    b3f4:	dc812e17 	ldw	r18,1208(sp)
    b3f8:	dc412d17 	ldw	r17,1204(sp)
    b3fc:	dc012c17 	ldw	r16,1200(sp)
    b400:	dec13604 	addi	sp,sp,1240
    b404:	f800283a 	ret
    b408:	00084e40 	call	84e4 <__sinit>
    b40c:	003f0706 	br	b02c <__alt_data_end+0xfffb58fc>
    b410:	d8c12417 	ldw	r3,1168(sp)
    b414:	d8812315 	stw	r2,1164(sp)
    b418:	00c7c83a 	sub	r3,zero,r3
    b41c:	d8c12415 	stw	r3,1168(sp)
    b420:	94800114 	ori	r18,r18,4
    b424:	b9800007 	ldb	r6,0(r23)
    b428:	003f4f06 	br	b168 <__alt_data_end+0xfffb5a38>
    b42c:	94802014 	ori	r18,r18,128
    b430:	b9800007 	ldb	r6,0(r23)
    b434:	003f4c06 	br	b168 <__alt_data_end+0xfffb5a38>
    b438:	dc012615 	stw	r16,1176(sp)
    b43c:	d8012415 	stw	zero,1168(sp)
    b440:	35bff404 	addi	r22,r6,-48
    b444:	0009883a 	mov	r4,zero
    b448:	b821883a 	mov	r16,r23
    b44c:	01400284 	movi	r5,10
    b450:	000dae00 	call	dae0 <__mulsi3>
    b454:	81800007 	ldb	r6,0(r16)
    b458:	1589883a 	add	r4,r2,r22
    b45c:	bdc00044 	addi	r23,r23,1
    b460:	35bff404 	addi	r22,r6,-48
    b464:	b821883a 	mov	r16,r23
    b468:	adbff82e 	bgeu	r21,r22,b44c <__alt_data_end+0xfffb5d1c>
    b46c:	d9012415 	stw	r4,1168(sp)
    b470:	dc012617 	ldw	r16,1176(sp)
    b474:	003f3d06 	br	b16c <__alt_data_end+0xfffb5a3c>
    b478:	d8c12203 	ldbu	r3,1160(sp)
    b47c:	94800414 	ori	r18,r18,16
    b480:	9080080c 	andi	r2,r18,32
    b484:	d8c11d85 	stb	r3,1142(sp)
    b488:	9811883a 	mov	r8,r19
    b48c:	d8c12317 	ldw	r3,1164(sp)
    b490:	10018226 	beq	r2,zero,ba9c <___vfiprintf_internal_r+0xab8>
    b494:	d9012317 	ldw	r4,1164(sp)
    b498:	18800117 	ldw	r2,4(r3)
    b49c:	1cc00017 	ldw	r19,0(r3)
    b4a0:	21000204 	addi	r4,r4,8
    b4a4:	d9012315 	stw	r4,1164(sp)
    b4a8:	102b883a 	mov	r21,r2
    b4ac:	10030016 	blt	r2,zero,c0b0 <___vfiprintf_internal_r+0x10cc>
    b4b0:	dd811d83 	ldbu	r22,1142(sp)
    b4b4:	8029883a 	mov	r20,r16
    b4b8:	00800044 	movi	r2,1
    b4bc:	9d46b03a 	or	r3,r19,r21
    b4c0:	80000216 	blt	r16,zero,b4cc <___vfiprintf_internal_r+0x4e8>
    b4c4:	013fdfc4 	movi	r4,-129
    b4c8:	9124703a 	and	r18,r18,r4
    b4cc:	1801b41e 	bne	r3,zero,bba0 <___vfiprintf_internal_r+0xbbc>
    b4d0:	80028126 	beq	r16,zero,bed8 <___vfiprintf_internal_r+0xef4>
    b4d4:	10803fcc 	andi	r2,r2,255
    b4d8:	00c00044 	movi	r3,1
    b4dc:	10c1d126 	beq	r2,r3,bc24 <___vfiprintf_internal_r+0xc40>
    b4e0:	00c00084 	movi	r3,2
    b4e4:	10c28626 	beq	r2,r3,bf00 <___vfiprintf_internal_r+0xf1c>
    b4e8:	d8c10a04 	addi	r3,sp,1064
    b4ec:	9808d0fa 	srli	r4,r19,3
    b4f0:	a80a977a 	slli	r5,r21,29
    b4f4:	a82ad0fa 	srli	r21,r21,3
    b4f8:	9cc001cc 	andi	r19,r19,7
    b4fc:	98800c04 	addi	r2,r19,48
    b500:	18ffffc4 	addi	r3,r3,-1
    b504:	2926b03a 	or	r19,r5,r4
    b508:	18800005 	stb	r2,0(r3)
    b50c:	9d48b03a 	or	r4,r19,r21
    b510:	203ff61e 	bne	r4,zero,b4ec <__alt_data_end+0xfffb5dbc>
    b514:	9100004c 	andi	r4,r18,1
    b518:	d8c12215 	stw	r3,1160(sp)
    b51c:	2002b31e 	bne	r4,zero,bfec <___vfiprintf_internal_r+0x1008>
    b520:	d9411e17 	ldw	r5,1144(sp)
    b524:	28e9c83a 	sub	r20,r5,r3
    b528:	a02b883a 	mov	r21,r20
    b52c:	a400010e 	bge	r20,r16,b534 <___vfiprintf_internal_r+0x550>
    b530:	802b883a 	mov	r21,r16
    b534:	b5803fcc 	andi	r22,r22,255
    b538:	b580201c 	xori	r22,r22,128
    b53c:	b5bfe004 	addi	r22,r22,-128
    b540:	b0000126 	beq	r22,zero,b548 <___vfiprintf_internal_r+0x564>
    b544:	ad400044 	addi	r21,r21,1
    b548:	9280008c 	andi	r10,r18,2
    b54c:	50000126 	beq	r10,zero,b554 <___vfiprintf_internal_r+0x570>
    b550:	ad400084 	addi	r21,r21,2
    b554:	9580210c 	andi	r22,r18,132
    b558:	b001751e 	bne	r22,zero,bb30 <___vfiprintf_internal_r+0xb4c>
    b55c:	d9012417 	ldw	r4,1168(sp)
    b560:	2567c83a 	sub	r19,r4,r21
    b564:	04c1720e 	bge	zero,r19,bb30 <___vfiprintf_internal_r+0xb4c>
    b568:	01c00404 	movi	r7,16
    b56c:	d8c11c17 	ldw	r3,1136(sp)
    b570:	3cc36b0e 	bge	r7,r19,c320 <___vfiprintf_internal_r+0x133c>
    b574:	00800074 	movhi	r2,1
    b578:	108d3e04 	addi	r2,r2,13560
    b57c:	dc012915 	stw	r16,1188(sp)
    b580:	d9011b17 	ldw	r4,1132(sp)
    b584:	9821883a 	mov	r16,r19
    b588:	d8812615 	stw	r2,1176(sp)
    b58c:	030001c4 	movi	r12,7
    b590:	5027883a 	mov	r19,r10
    b594:	00000506 	br	b5ac <___vfiprintf_internal_r+0x5c8>
    b598:	21400084 	addi	r5,r4,2
    b59c:	42000204 	addi	r8,r8,8
    b5a0:	1009883a 	mov	r4,r2
    b5a4:	843ffc04 	addi	r16,r16,-16
    b5a8:	3c000d0e 	bge	r7,r16,b5e0 <___vfiprintf_internal_r+0x5fc>
    b5ac:	18c00404 	addi	r3,r3,16
    b5b0:	20800044 	addi	r2,r4,1
    b5b4:	47000015 	stw	fp,0(r8)
    b5b8:	41c00115 	stw	r7,4(r8)
    b5bc:	d8c11c15 	stw	r3,1136(sp)
    b5c0:	d8811b15 	stw	r2,1132(sp)
    b5c4:	60bff40e 	bge	r12,r2,b598 <__alt_data_end+0xfffb5e68>
    b5c8:	18014b1e 	bne	r3,zero,baf8 <___vfiprintf_internal_r+0xb14>
    b5cc:	843ffc04 	addi	r16,r16,-16
    b5d0:	0009883a 	mov	r4,zero
    b5d4:	01400044 	movi	r5,1
    b5d8:	d811883a 	mov	r8,sp
    b5dc:	3c3ff316 	blt	r7,r16,b5ac <__alt_data_end+0xfffb5e7c>
    b5e0:	9815883a 	mov	r10,r19
    b5e4:	8027883a 	mov	r19,r16
    b5e8:	dc012917 	ldw	r16,1188(sp)
    b5ec:	d9012617 	ldw	r4,1176(sp)
    b5f0:	98c7883a 	add	r3,r19,r3
    b5f4:	44c00115 	stw	r19,4(r8)
    b5f8:	41000015 	stw	r4,0(r8)
    b5fc:	d8c11c15 	stw	r3,1136(sp)
    b600:	d9411b15 	stw	r5,1132(sp)
    b604:	008001c4 	movi	r2,7
    b608:	11425116 	blt	r2,r5,bf50 <___vfiprintf_internal_r+0xf6c>
    b60c:	d9011d87 	ldb	r4,1142(sp)
    b610:	42000204 	addi	r8,r8,8
    b614:	28800044 	addi	r2,r5,1
    b618:	20014a1e 	bne	r4,zero,bb44 <___vfiprintf_internal_r+0xb60>
    b61c:	50000c26 	beq	r10,zero,b650 <___vfiprintf_internal_r+0x66c>
    b620:	d9011d04 	addi	r4,sp,1140
    b624:	18c00084 	addi	r3,r3,2
    b628:	41000015 	stw	r4,0(r8)
    b62c:	01000084 	movi	r4,2
    b630:	41000115 	stw	r4,4(r8)
    b634:	d8c11c15 	stw	r3,1136(sp)
    b638:	d8811b15 	stw	r2,1132(sp)
    b63c:	010001c4 	movi	r4,7
    b640:	20822016 	blt	r4,r2,bec4 <___vfiprintf_internal_r+0xee0>
    b644:	100b883a 	mov	r5,r2
    b648:	42000204 	addi	r8,r8,8
    b64c:	10800044 	addi	r2,r2,1
    b650:	01002004 	movi	r4,128
    b654:	b101de26 	beq	r22,r4,bdd0 <___vfiprintf_internal_r+0xdec>
    b658:	8521c83a 	sub	r16,r16,r20
    b65c:	0400230e 	bge	zero,r16,b6ec <___vfiprintf_internal_r+0x708>
    b660:	04c00404 	movi	r19,16
    b664:	9c030d0e 	bge	r19,r16,c29c <___vfiprintf_internal_r+0x12b8>
    b668:	00800074 	movhi	r2,1
    b66c:	108d3a04 	addi	r2,r2,13544
    b670:	d8812615 	stw	r2,1176(sp)
    b674:	058001c4 	movi	r22,7
    b678:	00000506 	br	b690 <___vfiprintf_internal_r+0x6ac>
    b67c:	28800084 	addi	r2,r5,2
    b680:	42000204 	addi	r8,r8,8
    b684:	200b883a 	mov	r5,r4
    b688:	843ffc04 	addi	r16,r16,-16
    b68c:	9c000d0e 	bge	r19,r16,b6c4 <___vfiprintf_internal_r+0x6e0>
    b690:	18c00404 	addi	r3,r3,16
    b694:	29000044 	addi	r4,r5,1
    b698:	44400015 	stw	r17,0(r8)
    b69c:	44c00115 	stw	r19,4(r8)
    b6a0:	d8c11c15 	stw	r3,1136(sp)
    b6a4:	d9011b15 	stw	r4,1132(sp)
    b6a8:	b13ff40e 	bge	r22,r4,b67c <__alt_data_end+0xfffb5f4c>
    b6ac:	1801321e 	bne	r3,zero,bb78 <___vfiprintf_internal_r+0xb94>
    b6b0:	843ffc04 	addi	r16,r16,-16
    b6b4:	000b883a 	mov	r5,zero
    b6b8:	00800044 	movi	r2,1
    b6bc:	d811883a 	mov	r8,sp
    b6c0:	9c3ff316 	blt	r19,r16,b690 <__alt_data_end+0xfffb5f60>
    b6c4:	d9012617 	ldw	r4,1176(sp)
    b6c8:	1c07883a 	add	r3,r3,r16
    b6cc:	44000115 	stw	r16,4(r8)
    b6d0:	41000015 	stw	r4,0(r8)
    b6d4:	d8c11c15 	stw	r3,1136(sp)
    b6d8:	d8811b15 	stw	r2,1132(sp)
    b6dc:	010001c4 	movi	r4,7
    b6e0:	20816216 	blt	r4,r2,bc6c <___vfiprintf_internal_r+0xc88>
    b6e4:	42000204 	addi	r8,r8,8
    b6e8:	10800044 	addi	r2,r2,1
    b6ec:	d9012217 	ldw	r4,1160(sp)
    b6f0:	1d07883a 	add	r3,r3,r20
    b6f4:	45000115 	stw	r20,4(r8)
    b6f8:	41000015 	stw	r4,0(r8)
    b6fc:	d8c11c15 	stw	r3,1136(sp)
    b700:	d8811b15 	stw	r2,1132(sp)
    b704:	010001c4 	movi	r4,7
    b708:	2081610e 	bge	r4,r2,bc90 <___vfiprintf_internal_r+0xcac>
    b70c:	1802211e 	bne	r3,zero,bf94 <___vfiprintf_internal_r+0xfb0>
    b710:	d8011b15 	stw	zero,1132(sp)
    b714:	9480010c 	andi	r18,r18,4
    b718:	9002171e 	bne	r18,zero,bf78 <___vfiprintf_internal_r+0xf94>
    b71c:	d9412417 	ldw	r5,1168(sp)
    b720:	a9433716 	blt	r21,r5,c400 <___vfiprintf_internal_r+0x141c>
    b724:	d8812517 	ldw	r2,1172(sp)
    b728:	1545883a 	add	r2,r2,r21
    b72c:	d8812515 	stw	r2,1172(sp)
    b730:	00019a06 	br	bd9c <___vfiprintf_internal_r+0xdb8>
    b734:	d8c12317 	ldw	r3,1164(sp)
    b738:	05400044 	movi	r21,1
    b73c:	9811883a 	mov	r8,r19
    b740:	18800017 	ldw	r2,0(r3)
    b744:	18c00104 	addi	r3,r3,4
    b748:	d8c12315 	stw	r3,1164(sp)
    b74c:	d8c10004 	addi	r3,sp,1024
    b750:	d8011d85 	stb	zero,1142(sp)
    b754:	d8810005 	stb	r2,1024(sp)
    b758:	a829883a 	mov	r20,r21
    b75c:	d8c12215 	stw	r3,1160(sp)
    b760:	0021883a 	mov	r16,zero
    b764:	003f7806 	br	b548 <__alt_data_end+0xfffb5e18>
    b768:	94800414 	ori	r18,r18,16
    b76c:	9080080c 	andi	r2,r18,32
    b770:	9811883a 	mov	r8,r19
    b774:	10009026 	beq	r2,zero,b9b8 <___vfiprintf_internal_r+0x9d4>
    b778:	d8812317 	ldw	r2,1164(sp)
    b77c:	d8c12317 	ldw	r3,1164(sp)
    b780:	14c00017 	ldw	r19,0(r2)
    b784:	15400117 	ldw	r21,4(r2)
    b788:	18c00204 	addi	r3,r3,8
    b78c:	d8c12315 	stw	r3,1164(sp)
    b790:	0005883a 	mov	r2,zero
    b794:	9d46b03a 	or	r3,r19,r21
    b798:	d8011d85 	stb	zero,1142(sp)
    b79c:	8029883a 	mov	r20,r16
    b7a0:	002d883a 	mov	r22,zero
    b7a4:	003f4606 	br	b4c0 <__alt_data_end+0xfffb5d90>
    b7a8:	94800414 	ori	r18,r18,16
    b7ac:	9080080c 	andi	r2,r18,32
    b7b0:	9811883a 	mov	r8,r19
    b7b4:	10006226 	beq	r2,zero,b940 <___vfiprintf_internal_r+0x95c>
    b7b8:	d9012317 	ldw	r4,1164(sp)
    b7bc:	00800044 	movi	r2,1
    b7c0:	24c00017 	ldw	r19,0(r4)
    b7c4:	25400117 	ldw	r21,4(r4)
    b7c8:	21000204 	addi	r4,r4,8
    b7cc:	d9012315 	stw	r4,1164(sp)
    b7d0:	9d46b03a 	or	r3,r19,r21
    b7d4:	003ff006 	br	b798 <__alt_data_end+0xfffb6068>
    b7d8:	b9800007 	ldb	r6,0(r23)
    b7dc:	00801b04 	movi	r2,108
    b7e0:	3082b226 	beq	r6,r2,c2ac <___vfiprintf_internal_r+0x12c8>
    b7e4:	94800414 	ori	r18,r18,16
    b7e8:	003e5f06 	br	b168 <__alt_data_end+0xfffb5a38>
    b7ec:	d8c12203 	ldbu	r3,1160(sp)
    b7f0:	01000074 	movhi	r4,1
    b7f4:	210cd404 	addi	r4,r4,13136
    b7f8:	d8c11d85 	stb	r3,1142(sp)
    b7fc:	d9012715 	stw	r4,1180(sp)
    b800:	90c0080c 	andi	r3,r18,32
    b804:	9811883a 	mov	r8,r19
    b808:	d8812317 	ldw	r2,1164(sp)
    b80c:	18005f26 	beq	r3,zero,b98c <___vfiprintf_internal_r+0x9a8>
    b810:	d9012317 	ldw	r4,1164(sp)
    b814:	14c00017 	ldw	r19,0(r2)
    b818:	15400117 	ldw	r21,4(r2)
    b81c:	21000204 	addi	r4,r4,8
    b820:	d9012315 	stw	r4,1164(sp)
    b824:	9080004c 	andi	r2,r18,1
    b828:	1001e226 	beq	r2,zero,bfb4 <___vfiprintf_internal_r+0xfd0>
    b82c:	9d46b03a 	or	r3,r19,r21
    b830:	18024e26 	beq	r3,zero,c16c <___vfiprintf_internal_r+0x1188>
    b834:	00800c04 	movi	r2,48
    b838:	d8811d05 	stb	r2,1140(sp)
    b83c:	d9811d45 	stb	r6,1141(sp)
    b840:	94800094 	ori	r18,r18,2
    b844:	00800084 	movi	r2,2
    b848:	003fd306 	br	b798 <__alt_data_end+0xfffb6068>
    b84c:	d9012317 	ldw	r4,1164(sp)
    b850:	d9412317 	ldw	r5,1164(sp)
    b854:	21000017 	ldw	r4,0(r4)
    b858:	28800104 	addi	r2,r5,4
    b85c:	d9012415 	stw	r4,1168(sp)
    b860:	203eeb16 	blt	r4,zero,b410 <__alt_data_end+0xfffb5ce0>
    b864:	d8812315 	stw	r2,1164(sp)
    b868:	b9800007 	ldb	r6,0(r23)
    b86c:	003e3e06 	br	b168 <__alt_data_end+0xfffb5a38>
    b870:	b9800007 	ldb	r6,0(r23)
    b874:	01000a84 	movi	r4,42
    b878:	b8800044 	addi	r2,r23,1
    b87c:	3102d226 	beq	r6,r4,c3c8 <___vfiprintf_internal_r+0x13e4>
    b880:	35bff404 	addi	r22,r6,-48
    b884:	102f883a 	mov	r23,r2
    b888:	0021883a 	mov	r16,zero
    b88c:	adbe3736 	bltu	r21,r22,b16c <__alt_data_end+0xfffb5a3c>
    b890:	0009883a 	mov	r4,zero
    b894:	01400284 	movi	r5,10
    b898:	000dae00 	call	dae0 <__mulsi3>
    b89c:	b9800007 	ldb	r6,0(r23)
    b8a0:	b089883a 	add	r4,r22,r2
    b8a4:	bdc00044 	addi	r23,r23,1
    b8a8:	35bff404 	addi	r22,r6,-48
    b8ac:	adbff92e 	bgeu	r21,r22,b894 <__alt_data_end+0xfffb6164>
    b8b0:	2021883a 	mov	r16,r4
    b8b4:	203e2d0e 	bge	r4,zero,b16c <__alt_data_end+0xfffb5a3c>
    b8b8:	043fffc4 	movi	r16,-1
    b8bc:	003e2b06 	br	b16c <__alt_data_end+0xfffb5a3c>
    b8c0:	94801014 	ori	r18,r18,64
    b8c4:	b9800007 	ldb	r6,0(r23)
    b8c8:	003e2706 	br	b168 <__alt_data_end+0xfffb5a38>
    b8cc:	94800814 	ori	r18,r18,32
    b8d0:	b9800007 	ldb	r6,0(r23)
    b8d4:	003e2406 	br	b168 <__alt_data_end+0xfffb5a38>
    b8d8:	d9412317 	ldw	r5,1164(sp)
    b8dc:	d8812317 	ldw	r2,1164(sp)
    b8e0:	d8011d85 	stb	zero,1142(sp)
    b8e4:	29400017 	ldw	r5,0(r5)
    b8e8:	9811883a 	mov	r8,r19
    b8ec:	14c00104 	addi	r19,r2,4
    b8f0:	d9412215 	stw	r5,1160(sp)
    b8f4:	28029026 	beq	r5,zero,c338 <___vfiprintf_internal_r+0x1354>
    b8f8:	d9012217 	ldw	r4,1160(sp)
    b8fc:	80027616 	blt	r16,zero,c2d8 <___vfiprintf_internal_r+0x12f4>
    b900:	000b883a 	mov	r5,zero
    b904:	800d883a 	mov	r6,r16
    b908:	da012a15 	stw	r8,1192(sp)
    b90c:	00091f40 	call	91f4 <memchr>
    b910:	da012a17 	ldw	r8,1192(sp)
    b914:	1002a026 	beq	r2,zero,c398 <___vfiprintf_internal_r+0x13b4>
    b918:	d8c12217 	ldw	r3,1160(sp)
    b91c:	10e9c83a 	sub	r20,r2,r3
    b920:	85023816 	blt	r16,r20,c204 <___vfiprintf_internal_r+0x1220>
    b924:	dd811d83 	ldbu	r22,1142(sp)
    b928:	dcc12315 	stw	r19,1164(sp)
    b92c:	0021883a 	mov	r16,zero
    b930:	003efd06 	br	b528 <__alt_data_end+0xfffb5df8>
    b934:	9080080c 	andi	r2,r18,32
    b938:	9811883a 	mov	r8,r19
    b93c:	103f9e1e 	bne	r2,zero,b7b8 <__alt_data_end+0xfffb6088>
    b940:	9080040c 	andi	r2,r18,16
    b944:	10021726 	beq	r2,zero,c1a4 <___vfiprintf_internal_r+0x11c0>
    b948:	d9412317 	ldw	r5,1164(sp)
    b94c:	002b883a 	mov	r21,zero
    b950:	00800044 	movi	r2,1
    b954:	2cc00017 	ldw	r19,0(r5)
    b958:	29400104 	addi	r5,r5,4
    b95c:	d9412315 	stw	r5,1164(sp)
    b960:	9807883a 	mov	r3,r19
    b964:	003f8c06 	br	b798 <__alt_data_end+0xfffb6068>
    b968:	d8c12203 	ldbu	r3,1160(sp)
    b96c:	01000074 	movhi	r4,1
    b970:	210cd904 	addi	r4,r4,13156
    b974:	d8c11d85 	stb	r3,1142(sp)
    b978:	d9012715 	stw	r4,1180(sp)
    b97c:	90c0080c 	andi	r3,r18,32
    b980:	9811883a 	mov	r8,r19
    b984:	d8812317 	ldw	r2,1164(sp)
    b988:	183fa11e 	bne	r3,zero,b810 <__alt_data_end+0xfffb60e0>
    b98c:	90c0040c 	andi	r3,r18,16
    b990:	1801e526 	beq	r3,zero,c128 <___vfiprintf_internal_r+0x1144>
    b994:	d9412317 	ldw	r5,1164(sp)
    b998:	14c00017 	ldw	r19,0(r2)
    b99c:	002b883a 	mov	r21,zero
    b9a0:	29400104 	addi	r5,r5,4
    b9a4:	d9412315 	stw	r5,1164(sp)
    b9a8:	003f9e06 	br	b824 <__alt_data_end+0xfffb60f4>
    b9ac:	9080080c 	andi	r2,r18,32
    b9b0:	9811883a 	mov	r8,r19
    b9b4:	103f701e 	bne	r2,zero,b778 <__alt_data_end+0xfffb6048>
    b9b8:	9080040c 	andi	r2,r18,16
    b9bc:	1001ef26 	beq	r2,zero,c17c <___vfiprintf_internal_r+0x1198>
    b9c0:	d9012317 	ldw	r4,1164(sp)
    b9c4:	002b883a 	mov	r21,zero
    b9c8:	0005883a 	mov	r2,zero
    b9cc:	24c00017 	ldw	r19,0(r4)
    b9d0:	21000104 	addi	r4,r4,4
    b9d4:	d9012315 	stw	r4,1164(sp)
    b9d8:	9807883a 	mov	r3,r19
    b9dc:	003f6e06 	br	b798 <__alt_data_end+0xfffb6068>
    b9e0:	d8c12317 	ldw	r3,1164(sp)
    b9e4:	9811883a 	mov	r8,r19
    b9e8:	00800c04 	movi	r2,48
    b9ec:	1cc00017 	ldw	r19,0(r3)
    b9f0:	01000074 	movhi	r4,1
    b9f4:	18c00104 	addi	r3,r3,4
    b9f8:	d8811d05 	stb	r2,1140(sp)
    b9fc:	210cd904 	addi	r4,r4,13156
    ba00:	00801e04 	movi	r2,120
    ba04:	d8811d45 	stb	r2,1141(sp)
    ba08:	d8c12315 	stw	r3,1164(sp)
    ba0c:	002b883a 	mov	r21,zero
    ba10:	94800094 	ori	r18,r18,2
    ba14:	d9012715 	stw	r4,1180(sp)
    ba18:	00800084 	movi	r2,2
    ba1c:	9807883a 	mov	r3,r19
    ba20:	003f5d06 	br	b798 <__alt_data_end+0xfffb6068>
    ba24:	d8c12203 	ldbu	r3,1160(sp)
    ba28:	9080080c 	andi	r2,r18,32
    ba2c:	9811883a 	mov	r8,r19
    ba30:	d8c11d85 	stb	r3,1142(sp)
    ba34:	1001b126 	beq	r2,zero,c0fc <___vfiprintf_internal_r+0x1118>
    ba38:	d9012317 	ldw	r4,1164(sp)
    ba3c:	d9412517 	ldw	r5,1172(sp)
    ba40:	20800017 	ldw	r2,0(r4)
    ba44:	2807d7fa 	srai	r3,r5,31
    ba48:	21000104 	addi	r4,r4,4
    ba4c:	d9012315 	stw	r4,1164(sp)
    ba50:	11400015 	stw	r5,0(r2)
    ba54:	10c00115 	stw	r3,4(r2)
    ba58:	003d9a06 	br	b0c4 <__alt_data_end+0xfffb5994>
    ba5c:	d8812207 	ldb	r2,1160(sp)
    ba60:	1001c41e 	bne	r2,zero,c174 <___vfiprintf_internal_r+0x1190>
    ba64:	00c00804 	movi	r3,32
    ba68:	d8c12205 	stb	r3,1160(sp)
    ba6c:	b9800007 	ldb	r6,0(r23)
    ba70:	003dbd06 	br	b168 <__alt_data_end+0xfffb5a38>
    ba74:	00c00ac4 	movi	r3,43
    ba78:	d8c12205 	stb	r3,1160(sp)
    ba7c:	b9800007 	ldb	r6,0(r23)
    ba80:	003db906 	br	b168 <__alt_data_end+0xfffb5a38>
    ba84:	d8c12203 	ldbu	r3,1160(sp)
    ba88:	9080080c 	andi	r2,r18,32
    ba8c:	9811883a 	mov	r8,r19
    ba90:	d8c11d85 	stb	r3,1142(sp)
    ba94:	d8c12317 	ldw	r3,1164(sp)
    ba98:	103e7e1e 	bne	r2,zero,b494 <__alt_data_end+0xfffb5d64>
    ba9c:	9080040c 	andi	r2,r18,16
    baa0:	1001a926 	beq	r2,zero,c148 <___vfiprintf_internal_r+0x1164>
    baa4:	1cc00017 	ldw	r19,0(r3)
    baa8:	d9412317 	ldw	r5,1164(sp)
    baac:	982bd7fa 	srai	r21,r19,31
    bab0:	29400104 	addi	r5,r5,4
    bab4:	d9412315 	stw	r5,1164(sp)
    bab8:	a805883a 	mov	r2,r21
    babc:	003e7b06 	br	b4ac <__alt_data_end+0xfffb5d7c>
    bac0:	94800054 	ori	r18,r18,1
    bac4:	b9800007 	ldb	r6,0(r23)
    bac8:	003da706 	br	b168 <__alt_data_end+0xfffb5a38>
    bacc:	d8c12203 	ldbu	r3,1160(sp)
    bad0:	9811883a 	mov	r8,r19
    bad4:	d8c11d85 	stb	r3,1142(sp)
    bad8:	30005826 	beq	r6,zero,bc3c <___vfiprintf_internal_r+0xc58>
    badc:	05400044 	movi	r21,1
    bae0:	d8c10004 	addi	r3,sp,1024
    bae4:	d9810005 	stb	r6,1024(sp)
    bae8:	d8011d85 	stb	zero,1142(sp)
    baec:	a829883a 	mov	r20,r21
    baf0:	d8c12215 	stw	r3,1160(sp)
    baf4:	003f1a06 	br	b760 <__alt_data_end+0xfffb6030>
    baf8:	d9012117 	ldw	r4,1156(sp)
    bafc:	d9412017 	ldw	r5,1152(sp)
    bb00:	d9811a04 	addi	r6,sp,1128
    bb04:	d9c12a15 	stw	r7,1192(sp)
    bb08:	db012b15 	stw	r12,1196(sp)
    bb0c:	000aed00 	call	aed0 <__sprint_r.part.0>
    bb10:	d9c12a17 	ldw	r7,1192(sp)
    bb14:	db012b17 	ldw	r12,1196(sp)
    bb18:	10004e1e 	bne	r2,zero,bc54 <___vfiprintf_internal_r+0xc70>
    bb1c:	d9011b17 	ldw	r4,1132(sp)
    bb20:	d8c11c17 	ldw	r3,1136(sp)
    bb24:	d811883a 	mov	r8,sp
    bb28:	21400044 	addi	r5,r4,1
    bb2c:	003e9d06 	br	b5a4 <__alt_data_end+0xfffb5e74>
    bb30:	d9411b17 	ldw	r5,1132(sp)
    bb34:	d8c11c17 	ldw	r3,1136(sp)
    bb38:	28800044 	addi	r2,r5,1
    bb3c:	d9011d87 	ldb	r4,1142(sp)
    bb40:	203eb626 	beq	r4,zero,b61c <__alt_data_end+0xfffb5eec>
    bb44:	01000044 	movi	r4,1
    bb48:	d9411d84 	addi	r5,sp,1142
    bb4c:	1907883a 	add	r3,r3,r4
    bb50:	41400015 	stw	r5,0(r8)
    bb54:	41000115 	stw	r4,4(r8)
    bb58:	d8c11c15 	stw	r3,1136(sp)
    bb5c:	d8811b15 	stw	r2,1132(sp)
    bb60:	014001c4 	movi	r5,7
    bb64:	2880ce16 	blt	r5,r2,bea0 <___vfiprintf_internal_r+0xebc>
    bb68:	100b883a 	mov	r5,r2
    bb6c:	42000204 	addi	r8,r8,8
    bb70:	10800044 	addi	r2,r2,1
    bb74:	003ea906 	br	b61c <__alt_data_end+0xfffb5eec>
    bb78:	d9012117 	ldw	r4,1156(sp)
    bb7c:	d9412017 	ldw	r5,1152(sp)
    bb80:	d9811a04 	addi	r6,sp,1128
    bb84:	000aed00 	call	aed0 <__sprint_r.part.0>
    bb88:	1000321e 	bne	r2,zero,bc54 <___vfiprintf_internal_r+0xc70>
    bb8c:	d9411b17 	ldw	r5,1132(sp)
    bb90:	d8c11c17 	ldw	r3,1136(sp)
    bb94:	d811883a 	mov	r8,sp
    bb98:	28800044 	addi	r2,r5,1
    bb9c:	003eba06 	br	b688 <__alt_data_end+0xfffb5f58>
    bba0:	10803fcc 	andi	r2,r2,255
    bba4:	00c00044 	movi	r3,1
    bba8:	10fe4d1e 	bne	r2,r3,b4e0 <__alt_data_end+0xfffb5db0>
    bbac:	a800021e 	bne	r21,zero,bbb8 <___vfiprintf_internal_r+0xbd4>
    bbb0:	00800244 	movi	r2,9
    bbb4:	14c01b2e 	bgeu	r2,r19,bc24 <___vfiprintf_internal_r+0xc40>
    bbb8:	dc012215 	stw	r16,1160(sp)
    bbbc:	dd010a04 	addi	r20,sp,1064
    bbc0:	a821883a 	mov	r16,r21
    bbc4:	402b883a 	mov	r21,r8
    bbc8:	9809883a 	mov	r4,r19
    bbcc:	800b883a 	mov	r5,r16
    bbd0:	01800284 	movi	r6,10
    bbd4:	000f883a 	mov	r7,zero
    bbd8:	000d4c40 	call	d4c4 <__umoddi3>
    bbdc:	10800c04 	addi	r2,r2,48
    bbe0:	a53fffc4 	addi	r20,r20,-1
    bbe4:	9809883a 	mov	r4,r19
    bbe8:	800b883a 	mov	r5,r16
    bbec:	01800284 	movi	r6,10
    bbf0:	000f883a 	mov	r7,zero
    bbf4:	a0800005 	stb	r2,0(r20)
    bbf8:	000ce840 	call	ce84 <__udivdi3>
    bbfc:	1027883a 	mov	r19,r2
    bc00:	10c4b03a 	or	r2,r2,r3
    bc04:	1821883a 	mov	r16,r3
    bc08:	103fef1e 	bne	r2,zero,bbc8 <__alt_data_end+0xfffb6498>
    bc0c:	d9011e17 	ldw	r4,1144(sp)
    bc10:	dc012217 	ldw	r16,1160(sp)
    bc14:	a811883a 	mov	r8,r21
    bc18:	dd012215 	stw	r20,1160(sp)
    bc1c:	2529c83a 	sub	r20,r4,r20
    bc20:	003e4106 	br	b528 <__alt_data_end+0xfffb5df8>
    bc24:	9cc00c04 	addi	r19,r19,48
    bc28:	d8c109c4 	addi	r3,sp,1063
    bc2c:	dcc109c5 	stb	r19,1063(sp)
    bc30:	dd012817 	ldw	r20,1184(sp)
    bc34:	d8c12215 	stw	r3,1160(sp)
    bc38:	003e3b06 	br	b528 <__alt_data_end+0xfffb5df8>
    bc3c:	d8811c17 	ldw	r2,1136(sp)
    bc40:	10000426 	beq	r2,zero,bc54 <___vfiprintf_internal_r+0xc70>
    bc44:	d9012117 	ldw	r4,1156(sp)
    bc48:	d9412017 	ldw	r5,1152(sp)
    bc4c:	d9811a04 	addi	r6,sp,1128
    bc50:	000aed00 	call	aed0 <__sprint_r.part.0>
    bc54:	d9412017 	ldw	r5,1152(sp)
    bc58:	2880030b 	ldhu	r2,12(r5)
    bc5c:	1080100c 	andi	r2,r2,64
    bc60:	103ddc1e 	bne	r2,zero,b3d4 <__alt_data_end+0xfffb5ca4>
    bc64:	d8812517 	ldw	r2,1172(sp)
    bc68:	003ddb06 	br	b3d8 <__alt_data_end+0xfffb5ca8>
    bc6c:	1801061e 	bne	r3,zero,c088 <___vfiprintf_internal_r+0x10a4>
    bc70:	d8c12217 	ldw	r3,1160(sp)
    bc74:	00800044 	movi	r2,1
    bc78:	dd000115 	stw	r20,4(sp)
    bc7c:	d8c00015 	stw	r3,0(sp)
    bc80:	dd011c15 	stw	r20,1136(sp)
    bc84:	d8811b15 	stw	r2,1132(sp)
    bc88:	a007883a 	mov	r3,r20
    bc8c:	d811883a 	mov	r8,sp
    bc90:	42000204 	addi	r8,r8,8
    bc94:	9480010c 	andi	r18,r18,4
    bc98:	90003426 	beq	r18,zero,bd6c <___vfiprintf_internal_r+0xd88>
    bc9c:	d9412417 	ldw	r5,1168(sp)
    bca0:	2d65c83a 	sub	r18,r5,r21
    bca4:	0480310e 	bge	zero,r18,bd6c <___vfiprintf_internal_r+0xd88>
    bca8:	04000404 	movi	r16,16
    bcac:	8481ad0e 	bge	r16,r18,c364 <___vfiprintf_internal_r+0x1380>
    bcb0:	01400074 	movhi	r5,1
    bcb4:	294d3e04 	addi	r5,r5,13560
    bcb8:	d9011b17 	ldw	r4,1132(sp)
    bcbc:	d9412615 	stw	r5,1176(sp)
    bcc0:	04c001c4 	movi	r19,7
    bcc4:	dd012117 	ldw	r20,1156(sp)
    bcc8:	dd812017 	ldw	r22,1152(sp)
    bccc:	00000506 	br	bce4 <___vfiprintf_internal_r+0xd00>
    bcd0:	21400084 	addi	r5,r4,2
    bcd4:	42000204 	addi	r8,r8,8
    bcd8:	1009883a 	mov	r4,r2
    bcdc:	94bffc04 	addi	r18,r18,-16
    bce0:	84800d0e 	bge	r16,r18,bd18 <___vfiprintf_internal_r+0xd34>
    bce4:	18c00404 	addi	r3,r3,16
    bce8:	20800044 	addi	r2,r4,1
    bcec:	47000015 	stw	fp,0(r8)
    bcf0:	44000115 	stw	r16,4(r8)
    bcf4:	d8c11c15 	stw	r3,1136(sp)
    bcf8:	d8811b15 	stw	r2,1132(sp)
    bcfc:	98bff40e 	bge	r19,r2,bcd0 <__alt_data_end+0xfffb65a0>
    bd00:	1800291e 	bne	r3,zero,bda8 <___vfiprintf_internal_r+0xdc4>
    bd04:	94bffc04 	addi	r18,r18,-16
    bd08:	0009883a 	mov	r4,zero
    bd0c:	01400044 	movi	r5,1
    bd10:	d811883a 	mov	r8,sp
    bd14:	84bff316 	blt	r16,r18,bce4 <__alt_data_end+0xfffb65b4>
    bd18:	d8812617 	ldw	r2,1176(sp)
    bd1c:	1c87883a 	add	r3,r3,r18
    bd20:	44800115 	stw	r18,4(r8)
    bd24:	40800015 	stw	r2,0(r8)
    bd28:	d8c11c15 	stw	r3,1136(sp)
    bd2c:	d9411b15 	stw	r5,1132(sp)
    bd30:	008001c4 	movi	r2,7
    bd34:	11400d0e 	bge	r2,r5,bd6c <___vfiprintf_internal_r+0xd88>
    bd38:	1800061e 	bne	r3,zero,bd54 <___vfiprintf_internal_r+0xd70>
    bd3c:	d8c12417 	ldw	r3,1168(sp)
    bd40:	a8c12e16 	blt	r21,r3,c1fc <___vfiprintf_internal_r+0x1218>
    bd44:	d9012517 	ldw	r4,1172(sp)
    bd48:	2549883a 	add	r4,r4,r21
    bd4c:	d9012515 	stw	r4,1172(sp)
    bd50:	00001206 	br	bd9c <___vfiprintf_internal_r+0xdb8>
    bd54:	d9012117 	ldw	r4,1156(sp)
    bd58:	d9412017 	ldw	r5,1152(sp)
    bd5c:	d9811a04 	addi	r6,sp,1128
    bd60:	000aed00 	call	aed0 <__sprint_r.part.0>
    bd64:	103fbb1e 	bne	r2,zero,bc54 <__alt_data_end+0xfffb6524>
    bd68:	d8c11c17 	ldw	r3,1136(sp)
    bd6c:	d8812417 	ldw	r2,1168(sp)
    bd70:	a880010e 	bge	r21,r2,bd78 <___vfiprintf_internal_r+0xd94>
    bd74:	102b883a 	mov	r21,r2
    bd78:	d9012517 	ldw	r4,1172(sp)
    bd7c:	2549883a 	add	r4,r4,r21
    bd80:	d9012515 	stw	r4,1172(sp)
    bd84:	18000526 	beq	r3,zero,bd9c <___vfiprintf_internal_r+0xdb8>
    bd88:	d9012117 	ldw	r4,1156(sp)
    bd8c:	d9412017 	ldw	r5,1152(sp)
    bd90:	d9811a04 	addi	r6,sp,1128
    bd94:	000aed00 	call	aed0 <__sprint_r.part.0>
    bd98:	103fae1e 	bne	r2,zero,bc54 <__alt_data_end+0xfffb6524>
    bd9c:	d8011b15 	stw	zero,1132(sp)
    bda0:	d811883a 	mov	r8,sp
    bda4:	003cc706 	br	b0c4 <__alt_data_end+0xfffb5994>
    bda8:	a009883a 	mov	r4,r20
    bdac:	b00b883a 	mov	r5,r22
    bdb0:	d9811a04 	addi	r6,sp,1128
    bdb4:	000aed00 	call	aed0 <__sprint_r.part.0>
    bdb8:	103fa61e 	bne	r2,zero,bc54 <__alt_data_end+0xfffb6524>
    bdbc:	d9011b17 	ldw	r4,1132(sp)
    bdc0:	d8c11c17 	ldw	r3,1136(sp)
    bdc4:	d811883a 	mov	r8,sp
    bdc8:	21400044 	addi	r5,r4,1
    bdcc:	003fc306 	br	bcdc <__alt_data_end+0xfffb65ac>
    bdd0:	d9012417 	ldw	r4,1168(sp)
    bdd4:	256dc83a 	sub	r22,r4,r21
    bdd8:	05be1f0e 	bge	zero,r22,b658 <__alt_data_end+0xfffb5f28>
    bddc:	04c00404 	movi	r19,16
    bde0:	9d81720e 	bge	r19,r22,c3ac <___vfiprintf_internal_r+0x13c8>
    bde4:	00800074 	movhi	r2,1
    bde8:	108d3a04 	addi	r2,r2,13544
    bdec:	d8812615 	stw	r2,1176(sp)
    bdf0:	028001c4 	movi	r10,7
    bdf4:	00000506 	br	be0c <___vfiprintf_internal_r+0xe28>
    bdf8:	29000084 	addi	r4,r5,2
    bdfc:	42000204 	addi	r8,r8,8
    be00:	100b883a 	mov	r5,r2
    be04:	b5bffc04 	addi	r22,r22,-16
    be08:	9d800d0e 	bge	r19,r22,be40 <___vfiprintf_internal_r+0xe5c>
    be0c:	18c00404 	addi	r3,r3,16
    be10:	28800044 	addi	r2,r5,1
    be14:	44400015 	stw	r17,0(r8)
    be18:	44c00115 	stw	r19,4(r8)
    be1c:	d8c11c15 	stw	r3,1136(sp)
    be20:	d8811b15 	stw	r2,1132(sp)
    be24:	50bff40e 	bge	r10,r2,bdf8 <__alt_data_end+0xfffb66c8>
    be28:	1800111e 	bne	r3,zero,be70 <___vfiprintf_internal_r+0xe8c>
    be2c:	b5bffc04 	addi	r22,r22,-16
    be30:	000b883a 	mov	r5,zero
    be34:	01000044 	movi	r4,1
    be38:	d811883a 	mov	r8,sp
    be3c:	9dbff316 	blt	r19,r22,be0c <__alt_data_end+0xfffb66dc>
    be40:	d9412617 	ldw	r5,1176(sp)
    be44:	1d87883a 	add	r3,r3,r22
    be48:	45800115 	stw	r22,4(r8)
    be4c:	41400015 	stw	r5,0(r8)
    be50:	d8c11c15 	stw	r3,1136(sp)
    be54:	d9011b15 	stw	r4,1132(sp)
    be58:	008001c4 	movi	r2,7
    be5c:	11008516 	blt	r2,r4,c074 <___vfiprintf_internal_r+0x1090>
    be60:	42000204 	addi	r8,r8,8
    be64:	20800044 	addi	r2,r4,1
    be68:	200b883a 	mov	r5,r4
    be6c:	003dfa06 	br	b658 <__alt_data_end+0xfffb5f28>
    be70:	d9012117 	ldw	r4,1156(sp)
    be74:	d9412017 	ldw	r5,1152(sp)
    be78:	d9811a04 	addi	r6,sp,1128
    be7c:	da812a15 	stw	r10,1192(sp)
    be80:	000aed00 	call	aed0 <__sprint_r.part.0>
    be84:	da812a17 	ldw	r10,1192(sp)
    be88:	103f721e 	bne	r2,zero,bc54 <__alt_data_end+0xfffb6524>
    be8c:	d9411b17 	ldw	r5,1132(sp)
    be90:	d8c11c17 	ldw	r3,1136(sp)
    be94:	d811883a 	mov	r8,sp
    be98:	29000044 	addi	r4,r5,1
    be9c:	003fd906 	br	be04 <__alt_data_end+0xfffb66d4>
    bea0:	1800681e 	bne	r3,zero,c044 <___vfiprintf_internal_r+0x1060>
    bea4:	50004d26 	beq	r10,zero,bfdc <___vfiprintf_internal_r+0xff8>
    bea8:	d8811d04 	addi	r2,sp,1140
    beac:	00c00084 	movi	r3,2
    beb0:	d8800015 	stw	r2,0(sp)
    beb4:	d8c00115 	stw	r3,4(sp)
    beb8:	2005883a 	mov	r2,r4
    bebc:	d811883a 	mov	r8,sp
    bec0:	003de006 	br	b644 <__alt_data_end+0xfffb5f14>
    bec4:	1800551e 	bne	r3,zero,c01c <___vfiprintf_internal_r+0x1038>
    bec8:	000b883a 	mov	r5,zero
    becc:	00800044 	movi	r2,1
    bed0:	d811883a 	mov	r8,sp
    bed4:	003dde06 	br	b650 <__alt_data_end+0xfffb5f20>
    bed8:	10803fcc 	andi	r2,r2,255
    bedc:	1000191e 	bne	r2,zero,bf44 <___vfiprintf_internal_r+0xf60>
    bee0:	9080004c 	andi	r2,r18,1
    bee4:	10001726 	beq	r2,zero,bf44 <___vfiprintf_internal_r+0xf60>
    bee8:	00800c04 	movi	r2,48
    beec:	d8c109c4 	addi	r3,sp,1063
    bef0:	d88109c5 	stb	r2,1063(sp)
    bef4:	dd012817 	ldw	r20,1184(sp)
    bef8:	d8c12215 	stw	r3,1160(sp)
    befc:	003d8a06 	br	b528 <__alt_data_end+0xfffb5df8>
    bf00:	d9012717 	ldw	r4,1180(sp)
    bf04:	dd010a04 	addi	r20,sp,1064
    bf08:	988003cc 	andi	r2,r19,15
    bf0c:	a806973a 	slli	r3,r21,28
    bf10:	2085883a 	add	r2,r4,r2
    bf14:	9826d13a 	srli	r19,r19,4
    bf18:	10800003 	ldbu	r2,0(r2)
    bf1c:	a82ad13a 	srli	r21,r21,4
    bf20:	a53fffc4 	addi	r20,r20,-1
    bf24:	1ce6b03a 	or	r19,r3,r19
    bf28:	a0800005 	stb	r2,0(r20)
    bf2c:	9d44b03a 	or	r2,r19,r21
    bf30:	103ff51e 	bne	r2,zero,bf08 <__alt_data_end+0xfffb67d8>
    bf34:	d9411e17 	ldw	r5,1144(sp)
    bf38:	dd012215 	stw	r20,1160(sp)
    bf3c:	2d29c83a 	sub	r20,r5,r20
    bf40:	003d7906 	br	b528 <__alt_data_end+0xfffb5df8>
    bf44:	d8c10a04 	addi	r3,sp,1064
    bf48:	d8c12215 	stw	r3,1160(sp)
    bf4c:	003d7606 	br	b528 <__alt_data_end+0xfffb5df8>
    bf50:	18009e1e 	bne	r3,zero,c1cc <___vfiprintf_internal_r+0x11e8>
    bf54:	d8811d87 	ldb	r2,1142(sp)
    bf58:	10005f26 	beq	r2,zero,c0d8 <___vfiprintf_internal_r+0x10f4>
    bf5c:	00c00044 	movi	r3,1
    bf60:	d9011d84 	addi	r4,sp,1142
    bf64:	1805883a 	mov	r2,r3
    bf68:	d9000015 	stw	r4,0(sp)
    bf6c:	d8c00115 	stw	r3,4(sp)
    bf70:	d811883a 	mov	r8,sp
    bf74:	003efc06 	br	bb68 <__alt_data_end+0xfffb6438>
    bf78:	d9412417 	ldw	r5,1168(sp)
    bf7c:	d811883a 	mov	r8,sp
    bf80:	2d65c83a 	sub	r18,r5,r21
    bf84:	04bf4816 	blt	zero,r18,bca8 <__alt_data_end+0xfffb6578>
    bf88:	003f6c06 	br	bd3c <__alt_data_end+0xfffb660c>
    bf8c:	b829883a 	mov	r20,r23
    bf90:	003c6906 	br	b138 <__alt_data_end+0xfffb5a08>
    bf94:	d9012117 	ldw	r4,1156(sp)
    bf98:	d9412017 	ldw	r5,1152(sp)
    bf9c:	d9811a04 	addi	r6,sp,1128
    bfa0:	000aed00 	call	aed0 <__sprint_r.part.0>
    bfa4:	103f2b1e 	bne	r2,zero,bc54 <__alt_data_end+0xfffb6524>
    bfa8:	d8c11c17 	ldw	r3,1136(sp)
    bfac:	d811883a 	mov	r8,sp
    bfb0:	003f3806 	br	bc94 <__alt_data_end+0xfffb6564>
    bfb4:	00800084 	movi	r2,2
    bfb8:	9d46b03a 	or	r3,r19,r21
    bfbc:	003df606 	br	b798 <__alt_data_end+0xfffb6068>
    bfc0:	d9012117 	ldw	r4,1156(sp)
    bfc4:	d9412017 	ldw	r5,1152(sp)
    bfc8:	d9811a04 	addi	r6,sp,1128
    bfcc:	000aed00 	call	aed0 <__sprint_r.part.0>
    bfd0:	103f201e 	bne	r2,zero,bc54 <__alt_data_end+0xfffb6524>
    bfd4:	d811883a 	mov	r8,sp
    bfd8:	003cc606 	br	b2f4 <__alt_data_end+0xfffb5bc4>
    bfdc:	000b883a 	mov	r5,zero
    bfe0:	2005883a 	mov	r2,r4
    bfe4:	d811883a 	mov	r8,sp
    bfe8:	003d9906 	br	b650 <__alt_data_end+0xfffb5f20>
    bfec:	10803fcc 	andi	r2,r2,255
    bff0:	1080201c 	xori	r2,r2,128
    bff4:	10bfe004 	addi	r2,r2,-128
    bff8:	01000c04 	movi	r4,48
    bffc:	1100b226 	beq	r2,r4,c2c8 <___vfiprintf_internal_r+0x12e4>
    c000:	d9412217 	ldw	r5,1160(sp)
    c004:	d8811e17 	ldw	r2,1144(sp)
    c008:	193fffc5 	stb	r4,-1(r3)
    c00c:	297fffc4 	addi	r5,r5,-1
    c010:	d9412215 	stw	r5,1160(sp)
    c014:	1169c83a 	sub	r20,r2,r5
    c018:	003d4306 	br	b528 <__alt_data_end+0xfffb5df8>
    c01c:	d9012117 	ldw	r4,1156(sp)
    c020:	d9412017 	ldw	r5,1152(sp)
    c024:	d9811a04 	addi	r6,sp,1128
    c028:	000aed00 	call	aed0 <__sprint_r.part.0>
    c02c:	103f091e 	bne	r2,zero,bc54 <__alt_data_end+0xfffb6524>
    c030:	d9411b17 	ldw	r5,1132(sp)
    c034:	d8c11c17 	ldw	r3,1136(sp)
    c038:	d811883a 	mov	r8,sp
    c03c:	28800044 	addi	r2,r5,1
    c040:	003d8306 	br	b650 <__alt_data_end+0xfffb5f20>
    c044:	d9012117 	ldw	r4,1156(sp)
    c048:	d9412017 	ldw	r5,1152(sp)
    c04c:	d9811a04 	addi	r6,sp,1128
    c050:	da812a15 	stw	r10,1192(sp)
    c054:	000aed00 	call	aed0 <__sprint_r.part.0>
    c058:	da812a17 	ldw	r10,1192(sp)
    c05c:	103efd1e 	bne	r2,zero,bc54 <__alt_data_end+0xfffb6524>
    c060:	d9411b17 	ldw	r5,1132(sp)
    c064:	d8c11c17 	ldw	r3,1136(sp)
    c068:	d811883a 	mov	r8,sp
    c06c:	28800044 	addi	r2,r5,1
    c070:	003d6a06 	br	b61c <__alt_data_end+0xfffb5eec>
    c074:	1800a01e 	bne	r3,zero,c2f8 <___vfiprintf_internal_r+0x1314>
    c078:	000b883a 	mov	r5,zero
    c07c:	00800044 	movi	r2,1
    c080:	d811883a 	mov	r8,sp
    c084:	003d7406 	br	b658 <__alt_data_end+0xfffb5f28>
    c088:	d9012117 	ldw	r4,1156(sp)
    c08c:	d9412017 	ldw	r5,1152(sp)
    c090:	d9811a04 	addi	r6,sp,1128
    c094:	000aed00 	call	aed0 <__sprint_r.part.0>
    c098:	103eee1e 	bne	r2,zero,bc54 <__alt_data_end+0xfffb6524>
    c09c:	d8811b17 	ldw	r2,1132(sp)
    c0a0:	d8c11c17 	ldw	r3,1136(sp)
    c0a4:	d811883a 	mov	r8,sp
    c0a8:	10800044 	addi	r2,r2,1
    c0ac:	003d8f06 	br	b6ec <__alt_data_end+0xfffb5fbc>
    c0b0:	04e7c83a 	sub	r19,zero,r19
    c0b4:	9804c03a 	cmpne	r2,r19,zero
    c0b8:	056bc83a 	sub	r21,zero,r21
    c0bc:	a8abc83a 	sub	r21,r21,r2
    c0c0:	05800b44 	movi	r22,45
    c0c4:	dd811d85 	stb	r22,1142(sp)
    c0c8:	8029883a 	mov	r20,r16
    c0cc:	00800044 	movi	r2,1
    c0d0:	9d46b03a 	or	r3,r19,r21
    c0d4:	003cfa06 	br	b4c0 <__alt_data_end+0xfffb5d90>
    c0d8:	000b883a 	mov	r5,zero
    c0dc:	00800044 	movi	r2,1
    c0e0:	d811883a 	mov	r8,sp
    c0e4:	503d5a26 	beq	r10,zero,b650 <__alt_data_end+0xfffb5f20>
    c0e8:	00c00084 	movi	r3,2
    c0ec:	d9011d04 	addi	r4,sp,1140
    c0f0:	d9000015 	stw	r4,0(sp)
    c0f4:	d8c00115 	stw	r3,4(sp)
    c0f8:	003d5206 	br	b644 <__alt_data_end+0xfffb5f14>
    c0fc:	9080040c 	andi	r2,r18,16
    c100:	1000421e 	bne	r2,zero,c20c <___vfiprintf_internal_r+0x1228>
    c104:	9480100c 	andi	r18,r18,64
    c108:	90009c26 	beq	r18,zero,c37c <___vfiprintf_internal_r+0x1398>
    c10c:	d9412317 	ldw	r5,1164(sp)
    c110:	d8c12517 	ldw	r3,1172(sp)
    c114:	28800017 	ldw	r2,0(r5)
    c118:	29400104 	addi	r5,r5,4
    c11c:	d9412315 	stw	r5,1164(sp)
    c120:	10c0000d 	sth	r3,0(r2)
    c124:	003be706 	br	b0c4 <__alt_data_end+0xfffb5994>
    c128:	90c0100c 	andi	r3,r18,64
    c12c:	18003e26 	beq	r3,zero,c228 <___vfiprintf_internal_r+0x1244>
    c130:	d8c12317 	ldw	r3,1164(sp)
    c134:	14c0000b 	ldhu	r19,0(r2)
    c138:	002b883a 	mov	r21,zero
    c13c:	18c00104 	addi	r3,r3,4
    c140:	d8c12315 	stw	r3,1164(sp)
    c144:	003db706 	br	b824 <__alt_data_end+0xfffb60f4>
    c148:	9080100c 	andi	r2,r18,64
    c14c:	10004c26 	beq	r2,zero,c280 <___vfiprintf_internal_r+0x129c>
    c150:	1cc0000f 	ldh	r19,0(r3)
    c154:	d8812317 	ldw	r2,1164(sp)
    c158:	982bd7fa 	srai	r21,r19,31
    c15c:	10800104 	addi	r2,r2,4
    c160:	d8812315 	stw	r2,1164(sp)
    c164:	a805883a 	mov	r2,r21
    c168:	003cd006 	br	b4ac <__alt_data_end+0xfffb5d7c>
    c16c:	00800084 	movi	r2,2
    c170:	003d8906 	br	b798 <__alt_data_end+0xfffb6068>
    c174:	b9800007 	ldb	r6,0(r23)
    c178:	003bfb06 	br	b168 <__alt_data_end+0xfffb5a38>
    c17c:	9080100c 	andi	r2,r18,64
    c180:	10003726 	beq	r2,zero,c260 <___vfiprintf_internal_r+0x127c>
    c184:	d9412317 	ldw	r5,1164(sp)
    c188:	002b883a 	mov	r21,zero
    c18c:	0005883a 	mov	r2,zero
    c190:	2cc0000b 	ldhu	r19,0(r5)
    c194:	29400104 	addi	r5,r5,4
    c198:	d9412315 	stw	r5,1164(sp)
    c19c:	9807883a 	mov	r3,r19
    c1a0:	003d7d06 	br	b798 <__alt_data_end+0xfffb6068>
    c1a4:	9080100c 	andi	r2,r18,64
    c1a8:	10002526 	beq	r2,zero,c240 <___vfiprintf_internal_r+0x125c>
    c1ac:	d8812317 	ldw	r2,1164(sp)
    c1b0:	002b883a 	mov	r21,zero
    c1b4:	14c0000b 	ldhu	r19,0(r2)
    c1b8:	10800104 	addi	r2,r2,4
    c1bc:	d8812315 	stw	r2,1164(sp)
    c1c0:	9807883a 	mov	r3,r19
    c1c4:	00800044 	movi	r2,1
    c1c8:	003d7306 	br	b798 <__alt_data_end+0xfffb6068>
    c1cc:	d9012117 	ldw	r4,1156(sp)
    c1d0:	d9412017 	ldw	r5,1152(sp)
    c1d4:	d9811a04 	addi	r6,sp,1128
    c1d8:	da812a15 	stw	r10,1192(sp)
    c1dc:	000aed00 	call	aed0 <__sprint_r.part.0>
    c1e0:	da812a17 	ldw	r10,1192(sp)
    c1e4:	103e9b1e 	bne	r2,zero,bc54 <__alt_data_end+0xfffb6524>
    c1e8:	d9411b17 	ldw	r5,1132(sp)
    c1ec:	d8c11c17 	ldw	r3,1136(sp)
    c1f0:	d811883a 	mov	r8,sp
    c1f4:	28800044 	addi	r2,r5,1
    c1f8:	003e5006 	br	bb3c <__alt_data_end+0xfffb640c>
    c1fc:	182b883a 	mov	r21,r3
    c200:	003ed006 	br	bd44 <__alt_data_end+0xfffb6614>
    c204:	8029883a 	mov	r20,r16
    c208:	003dc606 	br	b924 <__alt_data_end+0xfffb61f4>
    c20c:	d8c12317 	ldw	r3,1164(sp)
    c210:	d9012517 	ldw	r4,1172(sp)
    c214:	18800017 	ldw	r2,0(r3)
    c218:	18c00104 	addi	r3,r3,4
    c21c:	d8c12315 	stw	r3,1164(sp)
    c220:	11000015 	stw	r4,0(r2)
    c224:	003ba706 	br	b0c4 <__alt_data_end+0xfffb5994>
    c228:	d9012317 	ldw	r4,1164(sp)
    c22c:	14c00017 	ldw	r19,0(r2)
    c230:	002b883a 	mov	r21,zero
    c234:	21000104 	addi	r4,r4,4
    c238:	d9012315 	stw	r4,1164(sp)
    c23c:	003d7906 	br	b824 <__alt_data_end+0xfffb60f4>
    c240:	d8c12317 	ldw	r3,1164(sp)
    c244:	002b883a 	mov	r21,zero
    c248:	00800044 	movi	r2,1
    c24c:	1cc00017 	ldw	r19,0(r3)
    c250:	18c00104 	addi	r3,r3,4
    c254:	d8c12315 	stw	r3,1164(sp)
    c258:	9807883a 	mov	r3,r19
    c25c:	003d4e06 	br	b798 <__alt_data_end+0xfffb6068>
    c260:	d8812317 	ldw	r2,1164(sp)
    c264:	002b883a 	mov	r21,zero
    c268:	14c00017 	ldw	r19,0(r2)
    c26c:	10800104 	addi	r2,r2,4
    c270:	d8812315 	stw	r2,1164(sp)
    c274:	9807883a 	mov	r3,r19
    c278:	0005883a 	mov	r2,zero
    c27c:	003d4606 	br	b798 <__alt_data_end+0xfffb6068>
    c280:	1cc00017 	ldw	r19,0(r3)
    c284:	d8c12317 	ldw	r3,1164(sp)
    c288:	982bd7fa 	srai	r21,r19,31
    c28c:	18c00104 	addi	r3,r3,4
    c290:	d8c12315 	stw	r3,1164(sp)
    c294:	a805883a 	mov	r2,r21
    c298:	003c8406 	br	b4ac <__alt_data_end+0xfffb5d7c>
    c29c:	01000074 	movhi	r4,1
    c2a0:	210d3a04 	addi	r4,r4,13544
    c2a4:	d9012615 	stw	r4,1176(sp)
    c2a8:	003d0606 	br	b6c4 <__alt_data_end+0xfffb5f94>
    c2ac:	b9800043 	ldbu	r6,1(r23)
    c2b0:	94800814 	ori	r18,r18,32
    c2b4:	bdc00044 	addi	r23,r23,1
    c2b8:	31803fcc 	andi	r6,r6,255
    c2bc:	3180201c 	xori	r6,r6,128
    c2c0:	31bfe004 	addi	r6,r6,-128
    c2c4:	003ba806 	br	b168 <__alt_data_end+0xfffb5a38>
    c2c8:	d8811e17 	ldw	r2,1144(sp)
    c2cc:	d8c12217 	ldw	r3,1160(sp)
    c2d0:	10e9c83a 	sub	r20,r2,r3
    c2d4:	003c9406 	br	b528 <__alt_data_end+0xfffb5df8>
    c2d8:	da012a15 	stw	r8,1192(sp)
    c2dc:	00042f00 	call	42f0 <strlen>
    c2e0:	1029883a 	mov	r20,r2
    c2e4:	dd811d83 	ldbu	r22,1142(sp)
    c2e8:	dcc12315 	stw	r19,1164(sp)
    c2ec:	0021883a 	mov	r16,zero
    c2f0:	da012a17 	ldw	r8,1192(sp)
    c2f4:	003c8c06 	br	b528 <__alt_data_end+0xfffb5df8>
    c2f8:	d9012117 	ldw	r4,1156(sp)
    c2fc:	d9412017 	ldw	r5,1152(sp)
    c300:	d9811a04 	addi	r6,sp,1128
    c304:	000aed00 	call	aed0 <__sprint_r.part.0>
    c308:	103e521e 	bne	r2,zero,bc54 <__alt_data_end+0xfffb6524>
    c30c:	d9411b17 	ldw	r5,1132(sp)
    c310:	d8c11c17 	ldw	r3,1136(sp)
    c314:	d811883a 	mov	r8,sp
    c318:	28800044 	addi	r2,r5,1
    c31c:	003cce06 	br	b658 <__alt_data_end+0xfffb5f28>
    c320:	01400074 	movhi	r5,1
    c324:	294d3e04 	addi	r5,r5,13560
    c328:	d9412615 	stw	r5,1176(sp)
    c32c:	d9411b17 	ldw	r5,1132(sp)
    c330:	29400044 	addi	r5,r5,1
    c334:	003cad06 	br	b5ec <__alt_data_end+0xfffb5ebc>
    c338:	00800184 	movi	r2,6
    c33c:	1400012e 	bgeu	r2,r16,c344 <___vfiprintf_internal_r+0x1360>
    c340:	1021883a 	mov	r16,r2
    c344:	8029883a 	mov	r20,r16
    c348:	802b883a 	mov	r21,r16
    c34c:	80001c16 	blt	r16,zero,c3c0 <___vfiprintf_internal_r+0x13dc>
    c350:	00c00074 	movhi	r3,1
    c354:	18ccde04 	addi	r3,r3,13176
    c358:	dcc12315 	stw	r19,1164(sp)
    c35c:	d8c12215 	stw	r3,1160(sp)
    c360:	003cff06 	br	b760 <__alt_data_end+0xfffb6030>
    c364:	d9411b17 	ldw	r5,1132(sp)
    c368:	00800074 	movhi	r2,1
    c36c:	108d3e04 	addi	r2,r2,13560
    c370:	d8812615 	stw	r2,1176(sp)
    c374:	29400044 	addi	r5,r5,1
    c378:	003e6706 	br	bd18 <__alt_data_end+0xfffb65e8>
    c37c:	d9012317 	ldw	r4,1164(sp)
    c380:	d9412517 	ldw	r5,1172(sp)
    c384:	20800017 	ldw	r2,0(r4)
    c388:	21000104 	addi	r4,r4,4
    c38c:	d9012315 	stw	r4,1164(sp)
    c390:	11400015 	stw	r5,0(r2)
    c394:	003b4b06 	br	b0c4 <__alt_data_end+0xfffb5994>
    c398:	8029883a 	mov	r20,r16
    c39c:	dd811d83 	ldbu	r22,1142(sp)
    c3a0:	dcc12315 	stw	r19,1164(sp)
    c3a4:	0021883a 	mov	r16,zero
    c3a8:	003c5f06 	br	b528 <__alt_data_end+0xfffb5df8>
    c3ac:	01000074 	movhi	r4,1
    c3b0:	210d3a04 	addi	r4,r4,13544
    c3b4:	d9012615 	stw	r4,1176(sp)
    c3b8:	1009883a 	mov	r4,r2
    c3bc:	003ea006 	br	be40 <__alt_data_end+0xfffb6710>
    c3c0:	002b883a 	mov	r21,zero
    c3c4:	003fe206 	br	c350 <__alt_data_end+0xfffb6c20>
    c3c8:	d9412317 	ldw	r5,1164(sp)
    c3cc:	b807883a 	mov	r3,r23
    c3d0:	102f883a 	mov	r23,r2
    c3d4:	2c000017 	ldw	r16,0(r5)
    c3d8:	29000104 	addi	r4,r5,4
    c3dc:	d9012315 	stw	r4,1164(sp)
    c3e0:	80000416 	blt	r16,zero,c3f4 <___vfiprintf_internal_r+0x1410>
    c3e4:	19800047 	ldb	r6,1(r3)
    c3e8:	003b5f06 	br	b168 <__alt_data_end+0xfffb5a38>
    c3ec:	043fffc4 	movi	r16,-1
    c3f0:	003bef06 	br	b3b0 <__alt_data_end+0xfffb5c80>
    c3f4:	043fffc4 	movi	r16,-1
    c3f8:	19800047 	ldb	r6,1(r3)
    c3fc:	003b5a06 	br	b168 <__alt_data_end+0xfffb5a38>
    c400:	282b883a 	mov	r21,r5
    c404:	003cc706 	br	b724 <__alt_data_end+0xfffb5ff4>

0000c408 <__vfiprintf_internal>:
    c408:	2007883a 	mov	r3,r4
    c40c:	01000074 	movhi	r4,1
    c410:	21145904 	addi	r4,r4,20836
    c414:	21000017 	ldw	r4,0(r4)
    c418:	2805883a 	mov	r2,r5
    c41c:	300f883a 	mov	r7,r6
    c420:	180b883a 	mov	r5,r3
    c424:	100d883a 	mov	r6,r2
    c428:	000afe41 	jmpi	afe4 <___vfiprintf_internal_r>

0000c42c <_write_r>:
    c42c:	defffd04 	addi	sp,sp,-12
    c430:	dc000015 	stw	r16,0(sp)
    c434:	04000074 	movhi	r16,1
    c438:	dc400115 	stw	r17,4(sp)
    c43c:	841b4704 	addi	r16,r16,27932
    c440:	2023883a 	mov	r17,r4
    c444:	2809883a 	mov	r4,r5
    c448:	300b883a 	mov	r5,r6
    c44c:	380d883a 	mov	r6,r7
    c450:	dfc00215 	stw	ra,8(sp)
    c454:	80000015 	stw	zero,0(r16)
    c458:	0010c280 	call	10c28 <write>
    c45c:	00ffffc4 	movi	r3,-1
    c460:	10c00526 	beq	r2,r3,c478 <_write_r+0x4c>
    c464:	dfc00217 	ldw	ra,8(sp)
    c468:	dc400117 	ldw	r17,4(sp)
    c46c:	dc000017 	ldw	r16,0(sp)
    c470:	dec00304 	addi	sp,sp,12
    c474:	f800283a 	ret
    c478:	80c00017 	ldw	r3,0(r16)
    c47c:	183ff926 	beq	r3,zero,c464 <__alt_data_end+0xfffb6d34>
    c480:	88c00015 	stw	r3,0(r17)
    c484:	003ff706 	br	c464 <__alt_data_end+0xfffb6d34>

0000c488 <_close_r>:
    c488:	defffd04 	addi	sp,sp,-12
    c48c:	dc000015 	stw	r16,0(sp)
    c490:	04000074 	movhi	r16,1
    c494:	dc400115 	stw	r17,4(sp)
    c498:	841b4704 	addi	r16,r16,27932
    c49c:	2023883a 	mov	r17,r4
    c4a0:	2809883a 	mov	r4,r5
    c4a4:	dfc00215 	stw	ra,8(sp)
    c4a8:	80000015 	stw	zero,0(r16)
    c4ac:	00103540 	call	10354 <close>
    c4b0:	00ffffc4 	movi	r3,-1
    c4b4:	10c00526 	beq	r2,r3,c4cc <_close_r+0x44>
    c4b8:	dfc00217 	ldw	ra,8(sp)
    c4bc:	dc400117 	ldw	r17,4(sp)
    c4c0:	dc000017 	ldw	r16,0(sp)
    c4c4:	dec00304 	addi	sp,sp,12
    c4c8:	f800283a 	ret
    c4cc:	80c00017 	ldw	r3,0(r16)
    c4d0:	183ff926 	beq	r3,zero,c4b8 <__alt_data_end+0xfffb6d88>
    c4d4:	88c00015 	stw	r3,0(r17)
    c4d8:	003ff706 	br	c4b8 <__alt_data_end+0xfffb6d88>

0000c4dc <_calloc_r>:
    c4dc:	defffe04 	addi	sp,sp,-8
    c4e0:	dc000015 	stw	r16,0(sp)
    c4e4:	2021883a 	mov	r16,r4
    c4e8:	2809883a 	mov	r4,r5
    c4ec:	300b883a 	mov	r5,r6
    c4f0:	dfc00115 	stw	ra,4(sp)
    c4f4:	000dae00 	call	dae0 <__mulsi3>
    c4f8:	8009883a 	mov	r4,r16
    c4fc:	100b883a 	mov	r5,r2
    c500:	00039440 	call	3944 <_malloc_r>
    c504:	1021883a 	mov	r16,r2
    c508:	10002826 	beq	r2,zero,c5ac <_calloc_r+0xd0>
    c50c:	11bfff17 	ldw	r6,-4(r2)
    c510:	00bfff04 	movi	r2,-4
    c514:	00c00904 	movi	r3,36
    c518:	308c703a 	and	r6,r6,r2
    c51c:	308d883a 	add	r6,r6,r2
    c520:	19801436 	bltu	r3,r6,c574 <_calloc_r+0x98>
    c524:	008004c4 	movi	r2,19
    c528:	11800936 	bltu	r2,r6,c550 <_calloc_r+0x74>
    c52c:	8005883a 	mov	r2,r16
    c530:	10000015 	stw	zero,0(r2)
    c534:	10000115 	stw	zero,4(r2)
    c538:	10000215 	stw	zero,8(r2)
    c53c:	8005883a 	mov	r2,r16
    c540:	dfc00117 	ldw	ra,4(sp)
    c544:	dc000017 	ldw	r16,0(sp)
    c548:	dec00204 	addi	sp,sp,8
    c54c:	f800283a 	ret
    c550:	80000015 	stw	zero,0(r16)
    c554:	80000115 	stw	zero,4(r16)
    c558:	008006c4 	movi	r2,27
    c55c:	11800d2e 	bgeu	r2,r6,c594 <_calloc_r+0xb8>
    c560:	80000215 	stw	zero,8(r16)
    c564:	80000315 	stw	zero,12(r16)
    c568:	30c00c26 	beq	r6,r3,c59c <_calloc_r+0xc0>
    c56c:	80800404 	addi	r2,r16,16
    c570:	003fef06 	br	c530 <__alt_data_end+0xfffb6e00>
    c574:	8009883a 	mov	r4,r16
    c578:	000b883a 	mov	r5,zero
    c57c:	00095700 	call	9570 <memset>
    c580:	8005883a 	mov	r2,r16
    c584:	dfc00117 	ldw	ra,4(sp)
    c588:	dc000017 	ldw	r16,0(sp)
    c58c:	dec00204 	addi	sp,sp,8
    c590:	f800283a 	ret
    c594:	80800204 	addi	r2,r16,8
    c598:	003fe506 	br	c530 <__alt_data_end+0xfffb6e00>
    c59c:	80000415 	stw	zero,16(r16)
    c5a0:	80800604 	addi	r2,r16,24
    c5a4:	80000515 	stw	zero,20(r16)
    c5a8:	003fe106 	br	c530 <__alt_data_end+0xfffb6e00>
    c5ac:	0005883a 	mov	r2,zero
    c5b0:	003fe306 	br	c540 <__alt_data_end+0xfffb6e10>

0000c5b4 <_fclose_r>:
    c5b4:	28003226 	beq	r5,zero,c680 <_fclose_r+0xcc>
    c5b8:	defffc04 	addi	sp,sp,-16
    c5bc:	dc400115 	stw	r17,4(sp)
    c5c0:	2023883a 	mov	r17,r4
    c5c4:	dc000015 	stw	r16,0(sp)
    c5c8:	dfc00315 	stw	ra,12(sp)
    c5cc:	dc800215 	stw	r18,8(sp)
    c5d0:	2821883a 	mov	r16,r5
    c5d4:	00084f40 	call	84f4 <__sfp_lock_acquire>
    c5d8:	88000226 	beq	r17,zero,c5e4 <_fclose_r+0x30>
    c5dc:	88800e17 	ldw	r2,56(r17)
    c5e0:	10002926 	beq	r2,zero,c688 <_fclose_r+0xd4>
    c5e4:	8080030f 	ldh	r2,12(r16)
    c5e8:	10002226 	beq	r2,zero,c674 <_fclose_r+0xc0>
    c5ec:	8809883a 	mov	r4,r17
    c5f0:	800b883a 	mov	r5,r16
    c5f4:	0007f280 	call	7f28 <_fflush_r>
    c5f8:	1025883a 	mov	r18,r2
    c5fc:	80800b17 	ldw	r2,44(r16)
    c600:	10000426 	beq	r2,zero,c614 <_fclose_r+0x60>
    c604:	81400717 	ldw	r5,28(r16)
    c608:	8809883a 	mov	r4,r17
    c60c:	103ee83a 	callr	r2
    c610:	10002616 	blt	r2,zero,c6ac <_fclose_r+0xf8>
    c614:	8080030b 	ldhu	r2,12(r16)
    c618:	1080200c 	andi	r2,r2,128
    c61c:	10001f1e 	bne	r2,zero,c69c <_fclose_r+0xe8>
    c620:	81400c17 	ldw	r5,48(r16)
    c624:	28000526 	beq	r5,zero,c63c <_fclose_r+0x88>
    c628:	80801004 	addi	r2,r16,64
    c62c:	28800226 	beq	r5,r2,c638 <_fclose_r+0x84>
    c630:	8809883a 	mov	r4,r17
    c634:	00086580 	call	8658 <_free_r>
    c638:	80000c15 	stw	zero,48(r16)
    c63c:	81401117 	ldw	r5,68(r16)
    c640:	28000326 	beq	r5,zero,c650 <_fclose_r+0x9c>
    c644:	8809883a 	mov	r4,r17
    c648:	00086580 	call	8658 <_free_r>
    c64c:	80001115 	stw	zero,68(r16)
    c650:	8000030d 	sth	zero,12(r16)
    c654:	00084f80 	call	84f8 <__sfp_lock_release>
    c658:	9005883a 	mov	r2,r18
    c65c:	dfc00317 	ldw	ra,12(sp)
    c660:	dc800217 	ldw	r18,8(sp)
    c664:	dc400117 	ldw	r17,4(sp)
    c668:	dc000017 	ldw	r16,0(sp)
    c66c:	dec00404 	addi	sp,sp,16
    c670:	f800283a 	ret
    c674:	00084f80 	call	84f8 <__sfp_lock_release>
    c678:	0005883a 	mov	r2,zero
    c67c:	003ff706 	br	c65c <__alt_data_end+0xfffb6f2c>
    c680:	0005883a 	mov	r2,zero
    c684:	f800283a 	ret
    c688:	8809883a 	mov	r4,r17
    c68c:	00084e40 	call	84e4 <__sinit>
    c690:	8080030f 	ldh	r2,12(r16)
    c694:	103fd51e 	bne	r2,zero,c5ec <__alt_data_end+0xfffb6ebc>
    c698:	003ff606 	br	c674 <__alt_data_end+0xfffb6f44>
    c69c:	81400417 	ldw	r5,16(r16)
    c6a0:	8809883a 	mov	r4,r17
    c6a4:	00086580 	call	8658 <_free_r>
    c6a8:	003fdd06 	br	c620 <__alt_data_end+0xfffb6ef0>
    c6ac:	04bfffc4 	movi	r18,-1
    c6b0:	003fd806 	br	c614 <__alt_data_end+0xfffb6ee4>

0000c6b4 <fclose>:
    c6b4:	00800074 	movhi	r2,1
    c6b8:	10945904 	addi	r2,r2,20836
    c6bc:	200b883a 	mov	r5,r4
    c6c0:	11000017 	ldw	r4,0(r2)
    c6c4:	000c5b41 	jmpi	c5b4 <_fclose_r>

0000c6c8 <_fputwc_r>:
    c6c8:	3080030b 	ldhu	r2,12(r6)
    c6cc:	defff804 	addi	sp,sp,-32
    c6d0:	dcc00415 	stw	r19,16(sp)
    c6d4:	dc800315 	stw	r18,12(sp)
    c6d8:	dc000115 	stw	r16,4(sp)
    c6dc:	dfc00715 	stw	ra,28(sp)
    c6e0:	dd400615 	stw	r21,24(sp)
    c6e4:	dd000515 	stw	r20,20(sp)
    c6e8:	dc400215 	stw	r17,8(sp)
    c6ec:	10c8000c 	andi	r3,r2,8192
    c6f0:	3021883a 	mov	r16,r6
    c6f4:	2027883a 	mov	r19,r4
    c6f8:	2825883a 	mov	r18,r5
    c6fc:	1800051e 	bne	r3,zero,c714 <_fputwc_r+0x4c>
    c700:	30c01917 	ldw	r3,100(r6)
    c704:	10880014 	ori	r2,r2,8192
    c708:	3080030d 	sth	r2,12(r6)
    c70c:	18880014 	ori	r2,r3,8192
    c710:	30801915 	stw	r2,100(r6)
    c714:	0008fe40 	call	8fe4 <__locale_mb_cur_max>
    c718:	00c00044 	movi	r3,1
    c71c:	10c03e26 	beq	r2,r3,c818 <_fputwc_r+0x150>
    c720:	9809883a 	mov	r4,r19
    c724:	d80b883a 	mov	r5,sp
    c728:	900d883a 	mov	r6,r18
    c72c:	81c01704 	addi	r7,r16,92
    c730:	000cb780 	call	cb78 <_wcrtomb_r>
    c734:	1029883a 	mov	r20,r2
    c738:	00bfffc4 	movi	r2,-1
    c73c:	a0802026 	beq	r20,r2,c7c0 <_fputwc_r+0xf8>
    c740:	d9400003 	ldbu	r5,0(sp)
    c744:	a0001c26 	beq	r20,zero,c7b8 <_fputwc_r+0xf0>
    c748:	0023883a 	mov	r17,zero
    c74c:	05400284 	movi	r21,10
    c750:	00000906 	br	c778 <_fputwc_r+0xb0>
    c754:	80800017 	ldw	r2,0(r16)
    c758:	11400005 	stb	r5,0(r2)
    c75c:	80c00017 	ldw	r3,0(r16)
    c760:	18c00044 	addi	r3,r3,1
    c764:	80c00015 	stw	r3,0(r16)
    c768:	8c400044 	addi	r17,r17,1
    c76c:	dc45883a 	add	r2,sp,r17
    c770:	8d00112e 	bgeu	r17,r20,c7b8 <_fputwc_r+0xf0>
    c774:	11400003 	ldbu	r5,0(r2)
    c778:	80c00217 	ldw	r3,8(r16)
    c77c:	18ffffc4 	addi	r3,r3,-1
    c780:	80c00215 	stw	r3,8(r16)
    c784:	183ff30e 	bge	r3,zero,c754 <__alt_data_end+0xfffb7024>
    c788:	80800617 	ldw	r2,24(r16)
    c78c:	18801916 	blt	r3,r2,c7f4 <_fputwc_r+0x12c>
    c790:	80800017 	ldw	r2,0(r16)
    c794:	11400005 	stb	r5,0(r2)
    c798:	80800017 	ldw	r2,0(r16)
    c79c:	10c00003 	ldbu	r3,0(r2)
    c7a0:	10800044 	addi	r2,r2,1
    c7a4:	1d402326 	beq	r3,r21,c834 <_fputwc_r+0x16c>
    c7a8:	80800015 	stw	r2,0(r16)
    c7ac:	8c400044 	addi	r17,r17,1
    c7b0:	dc45883a 	add	r2,sp,r17
    c7b4:	8d3fef36 	bltu	r17,r20,c774 <__alt_data_end+0xfffb7044>
    c7b8:	9005883a 	mov	r2,r18
    c7bc:	00000406 	br	c7d0 <_fputwc_r+0x108>
    c7c0:	80c0030b 	ldhu	r3,12(r16)
    c7c4:	a005883a 	mov	r2,r20
    c7c8:	18c01014 	ori	r3,r3,64
    c7cc:	80c0030d 	sth	r3,12(r16)
    c7d0:	dfc00717 	ldw	ra,28(sp)
    c7d4:	dd400617 	ldw	r21,24(sp)
    c7d8:	dd000517 	ldw	r20,20(sp)
    c7dc:	dcc00417 	ldw	r19,16(sp)
    c7e0:	dc800317 	ldw	r18,12(sp)
    c7e4:	dc400217 	ldw	r17,8(sp)
    c7e8:	dc000117 	ldw	r16,4(sp)
    c7ec:	dec00804 	addi	sp,sp,32
    c7f0:	f800283a 	ret
    c7f4:	9809883a 	mov	r4,r19
    c7f8:	29403fcc 	andi	r5,r5,255
    c7fc:	800d883a 	mov	r6,r16
    c800:	000ca080 	call	ca08 <__swbuf_r>
    c804:	10bfffe0 	cmpeqi	r2,r2,-1
    c808:	10803fcc 	andi	r2,r2,255
    c80c:	103fd626 	beq	r2,zero,c768 <__alt_data_end+0xfffb7038>
    c810:	00bfffc4 	movi	r2,-1
    c814:	003fee06 	br	c7d0 <__alt_data_end+0xfffb70a0>
    c818:	90ffffc4 	addi	r3,r18,-1
    c81c:	01003f84 	movi	r4,254
    c820:	20ffbf36 	bltu	r4,r3,c720 <__alt_data_end+0xfffb6ff0>
    c824:	900b883a 	mov	r5,r18
    c828:	dc800005 	stb	r18,0(sp)
    c82c:	1029883a 	mov	r20,r2
    c830:	003fc506 	br	c748 <__alt_data_end+0xfffb7018>
    c834:	9809883a 	mov	r4,r19
    c838:	a80b883a 	mov	r5,r21
    c83c:	800d883a 	mov	r6,r16
    c840:	000ca080 	call	ca08 <__swbuf_r>
    c844:	10bfffe0 	cmpeqi	r2,r2,-1
    c848:	003fef06 	br	c808 <__alt_data_end+0xfffb70d8>

0000c84c <fputwc>:
    c84c:	defffc04 	addi	sp,sp,-16
    c850:	dc000115 	stw	r16,4(sp)
    c854:	04000074 	movhi	r16,1
    c858:	84145904 	addi	r16,r16,20836
    c85c:	dc400215 	stw	r17,8(sp)
    c860:	2023883a 	mov	r17,r4
    c864:	81000017 	ldw	r4,0(r16)
    c868:	dfc00315 	stw	ra,12(sp)
    c86c:	280d883a 	mov	r6,r5
    c870:	20000626 	beq	r4,zero,c88c <fputwc+0x40>
    c874:	20800e17 	ldw	r2,56(r4)
    c878:	1000041e 	bne	r2,zero,c88c <fputwc+0x40>
    c87c:	d9400015 	stw	r5,0(sp)
    c880:	00084e40 	call	84e4 <__sinit>
    c884:	81000017 	ldw	r4,0(r16)
    c888:	d9800017 	ldw	r6,0(sp)
    c88c:	880b883a 	mov	r5,r17
    c890:	dfc00317 	ldw	ra,12(sp)
    c894:	dc400217 	ldw	r17,8(sp)
    c898:	dc000117 	ldw	r16,4(sp)
    c89c:	dec00404 	addi	sp,sp,16
    c8a0:	000c6c81 	jmpi	c6c8 <_fputwc_r>

0000c8a4 <_fstat_r>:
    c8a4:	defffd04 	addi	sp,sp,-12
    c8a8:	dc000015 	stw	r16,0(sp)
    c8ac:	04000074 	movhi	r16,1
    c8b0:	dc400115 	stw	r17,4(sp)
    c8b4:	841b4704 	addi	r16,r16,27932
    c8b8:	2023883a 	mov	r17,r4
    c8bc:	2809883a 	mov	r4,r5
    c8c0:	300b883a 	mov	r5,r6
    c8c4:	dfc00215 	stw	ra,8(sp)
    c8c8:	80000015 	stw	zero,0(r16)
    c8cc:	00104a80 	call	104a8 <fstat>
    c8d0:	00ffffc4 	movi	r3,-1
    c8d4:	10c00526 	beq	r2,r3,c8ec <_fstat_r+0x48>
    c8d8:	dfc00217 	ldw	ra,8(sp)
    c8dc:	dc400117 	ldw	r17,4(sp)
    c8e0:	dc000017 	ldw	r16,0(sp)
    c8e4:	dec00304 	addi	sp,sp,12
    c8e8:	f800283a 	ret
    c8ec:	80c00017 	ldw	r3,0(r16)
    c8f0:	183ff926 	beq	r3,zero,c8d8 <__alt_data_end+0xfffb71a8>
    c8f4:	88c00015 	stw	r3,0(r17)
    c8f8:	003ff706 	br	c8d8 <__alt_data_end+0xfffb71a8>

0000c8fc <_isatty_r>:
    c8fc:	defffd04 	addi	sp,sp,-12
    c900:	dc000015 	stw	r16,0(sp)
    c904:	04000074 	movhi	r16,1
    c908:	dc400115 	stw	r17,4(sp)
    c90c:	841b4704 	addi	r16,r16,27932
    c910:	2023883a 	mov	r17,r4
    c914:	2809883a 	mov	r4,r5
    c918:	dfc00215 	stw	ra,8(sp)
    c91c:	80000015 	stw	zero,0(r16)
    c920:	00105b00 	call	105b0 <isatty>
    c924:	00ffffc4 	movi	r3,-1
    c928:	10c00526 	beq	r2,r3,c940 <_isatty_r+0x44>
    c92c:	dfc00217 	ldw	ra,8(sp)
    c930:	dc400117 	ldw	r17,4(sp)
    c934:	dc000017 	ldw	r16,0(sp)
    c938:	dec00304 	addi	sp,sp,12
    c93c:	f800283a 	ret
    c940:	80c00017 	ldw	r3,0(r16)
    c944:	183ff926 	beq	r3,zero,c92c <__alt_data_end+0xfffb71fc>
    c948:	88c00015 	stw	r3,0(r17)
    c94c:	003ff706 	br	c92c <__alt_data_end+0xfffb71fc>

0000c950 <_lseek_r>:
    c950:	defffd04 	addi	sp,sp,-12
    c954:	dc000015 	stw	r16,0(sp)
    c958:	04000074 	movhi	r16,1
    c95c:	dc400115 	stw	r17,4(sp)
    c960:	841b4704 	addi	r16,r16,27932
    c964:	2023883a 	mov	r17,r4
    c968:	2809883a 	mov	r4,r5
    c96c:	300b883a 	mov	r5,r6
    c970:	380d883a 	mov	r6,r7
    c974:	dfc00215 	stw	ra,8(sp)
    c978:	80000015 	stw	zero,0(r16)
    c97c:	00107900 	call	10790 <lseek>
    c980:	00ffffc4 	movi	r3,-1
    c984:	10c00526 	beq	r2,r3,c99c <_lseek_r+0x4c>
    c988:	dfc00217 	ldw	ra,8(sp)
    c98c:	dc400117 	ldw	r17,4(sp)
    c990:	dc000017 	ldw	r16,0(sp)
    c994:	dec00304 	addi	sp,sp,12
    c998:	f800283a 	ret
    c99c:	80c00017 	ldw	r3,0(r16)
    c9a0:	183ff926 	beq	r3,zero,c988 <__alt_data_end+0xfffb7258>
    c9a4:	88c00015 	stw	r3,0(r17)
    c9a8:	003ff706 	br	c988 <__alt_data_end+0xfffb7258>

0000c9ac <_read_r>:
    c9ac:	defffd04 	addi	sp,sp,-12
    c9b0:	dc000015 	stw	r16,0(sp)
    c9b4:	04000074 	movhi	r16,1
    c9b8:	dc400115 	stw	r17,4(sp)
    c9bc:	841b4704 	addi	r16,r16,27932
    c9c0:	2023883a 	mov	r17,r4
    c9c4:	2809883a 	mov	r4,r5
    c9c8:	300b883a 	mov	r5,r6
    c9cc:	380d883a 	mov	r6,r7
    c9d0:	dfc00215 	stw	ra,8(sp)
    c9d4:	80000015 	stw	zero,0(r16)
    c9d8:	00109740 	call	10974 <read>
    c9dc:	00ffffc4 	movi	r3,-1
    c9e0:	10c00526 	beq	r2,r3,c9f8 <_read_r+0x4c>
    c9e4:	dfc00217 	ldw	ra,8(sp)
    c9e8:	dc400117 	ldw	r17,4(sp)
    c9ec:	dc000017 	ldw	r16,0(sp)
    c9f0:	dec00304 	addi	sp,sp,12
    c9f4:	f800283a 	ret
    c9f8:	80c00017 	ldw	r3,0(r16)
    c9fc:	183ff926 	beq	r3,zero,c9e4 <__alt_data_end+0xfffb72b4>
    ca00:	88c00015 	stw	r3,0(r17)
    ca04:	003ff706 	br	c9e4 <__alt_data_end+0xfffb72b4>

0000ca08 <__swbuf_r>:
    ca08:	defffc04 	addi	sp,sp,-16
    ca0c:	dc800215 	stw	r18,8(sp)
    ca10:	dc400115 	stw	r17,4(sp)
    ca14:	dc000015 	stw	r16,0(sp)
    ca18:	dfc00315 	stw	ra,12(sp)
    ca1c:	2025883a 	mov	r18,r4
    ca20:	2823883a 	mov	r17,r5
    ca24:	3021883a 	mov	r16,r6
    ca28:	20000226 	beq	r4,zero,ca34 <__swbuf_r+0x2c>
    ca2c:	20800e17 	ldw	r2,56(r4)
    ca30:	10004126 	beq	r2,zero,cb38 <__swbuf_r+0x130>
    ca34:	80c00617 	ldw	r3,24(r16)
    ca38:	8180030b 	ldhu	r6,12(r16)
    ca3c:	80c00215 	stw	r3,8(r16)
    ca40:	30c0020c 	andi	r3,r6,8
    ca44:	18003526 	beq	r3,zero,cb1c <__swbuf_r+0x114>
    ca48:	80c00417 	ldw	r3,16(r16)
    ca4c:	18003326 	beq	r3,zero,cb1c <__swbuf_r+0x114>
    ca50:	3088000c 	andi	r2,r6,8192
    ca54:	8c403fcc 	andi	r17,r17,255
    ca58:	10001726 	beq	r2,zero,cab8 <__swbuf_r+0xb0>
    ca5c:	80800017 	ldw	r2,0(r16)
    ca60:	81000517 	ldw	r4,20(r16)
    ca64:	10c7c83a 	sub	r3,r2,r3
    ca68:	19001d0e 	bge	r3,r4,cae0 <__swbuf_r+0xd8>
    ca6c:	18c00044 	addi	r3,r3,1
    ca70:	81400217 	ldw	r5,8(r16)
    ca74:	11000044 	addi	r4,r2,1
    ca78:	81000015 	stw	r4,0(r16)
    ca7c:	297fffc4 	addi	r5,r5,-1
    ca80:	81400215 	stw	r5,8(r16)
    ca84:	14400005 	stb	r17,0(r2)
    ca88:	80800517 	ldw	r2,20(r16)
    ca8c:	10c01d26 	beq	r2,r3,cb04 <__swbuf_r+0xfc>
    ca90:	8080030b 	ldhu	r2,12(r16)
    ca94:	1080004c 	andi	r2,r2,1
    ca98:	1000181e 	bne	r2,zero,cafc <__swbuf_r+0xf4>
    ca9c:	8805883a 	mov	r2,r17
    caa0:	dfc00317 	ldw	ra,12(sp)
    caa4:	dc800217 	ldw	r18,8(sp)
    caa8:	dc400117 	ldw	r17,4(sp)
    caac:	dc000017 	ldw	r16,0(sp)
    cab0:	dec00404 	addi	sp,sp,16
    cab4:	f800283a 	ret
    cab8:	81001917 	ldw	r4,100(r16)
    cabc:	00b7ffc4 	movi	r2,-8193
    cac0:	31880014 	ori	r6,r6,8192
    cac4:	2084703a 	and	r2,r4,r2
    cac8:	80801915 	stw	r2,100(r16)
    cacc:	80800017 	ldw	r2,0(r16)
    cad0:	81000517 	ldw	r4,20(r16)
    cad4:	8180030d 	sth	r6,12(r16)
    cad8:	10c7c83a 	sub	r3,r2,r3
    cadc:	193fe316 	blt	r3,r4,ca6c <__alt_data_end+0xfffb733c>
    cae0:	9009883a 	mov	r4,r18
    cae4:	800b883a 	mov	r5,r16
    cae8:	0007f280 	call	7f28 <_fflush_r>
    caec:	1000091e 	bne	r2,zero,cb14 <__swbuf_r+0x10c>
    caf0:	80800017 	ldw	r2,0(r16)
    caf4:	00c00044 	movi	r3,1
    caf8:	003fdd06 	br	ca70 <__alt_data_end+0xfffb7340>
    cafc:	00800284 	movi	r2,10
    cb00:	88bfe61e 	bne	r17,r2,ca9c <__alt_data_end+0xfffb736c>
    cb04:	9009883a 	mov	r4,r18
    cb08:	800b883a 	mov	r5,r16
    cb0c:	0007f280 	call	7f28 <_fflush_r>
    cb10:	103fe226 	beq	r2,zero,ca9c <__alt_data_end+0xfffb736c>
    cb14:	00bfffc4 	movi	r2,-1
    cb18:	003fe106 	br	caa0 <__alt_data_end+0xfffb7370>
    cb1c:	9009883a 	mov	r4,r18
    cb20:	800b883a 	mov	r5,r16
    cb24:	00064a80 	call	64a8 <__swsetup_r>
    cb28:	1000051e 	bne	r2,zero,cb40 <__swbuf_r+0x138>
    cb2c:	8180030b 	ldhu	r6,12(r16)
    cb30:	80c00417 	ldw	r3,16(r16)
    cb34:	003fc606 	br	ca50 <__alt_data_end+0xfffb7320>
    cb38:	00084e40 	call	84e4 <__sinit>
    cb3c:	003fbd06 	br	ca34 <__alt_data_end+0xfffb7304>
    cb40:	80c0030b 	ldhu	r3,12(r16)
    cb44:	00bfffc4 	movi	r2,-1
    cb48:	18c01014 	ori	r3,r3,64
    cb4c:	80c0030d 	sth	r3,12(r16)
    cb50:	00c00244 	movi	r3,9
    cb54:	90c00015 	stw	r3,0(r18)
    cb58:	003fd106 	br	caa0 <__alt_data_end+0xfffb7370>

0000cb5c <__swbuf>:
    cb5c:	00c00074 	movhi	r3,1
    cb60:	18d45904 	addi	r3,r3,20836
    cb64:	2005883a 	mov	r2,r4
    cb68:	19000017 	ldw	r4,0(r3)
    cb6c:	280d883a 	mov	r6,r5
    cb70:	100b883a 	mov	r5,r2
    cb74:	000ca081 	jmpi	ca08 <__swbuf_r>

0000cb78 <_wcrtomb_r>:
    cb78:	defff604 	addi	sp,sp,-40
    cb7c:	00800074 	movhi	r2,1
    cb80:	dc800815 	stw	r18,32(sp)
    cb84:	dc400715 	stw	r17,28(sp)
    cb88:	dc000615 	stw	r16,24(sp)
    cb8c:	10945b04 	addi	r2,r2,20844
    cb90:	dfc00915 	stw	ra,36(sp)
    cb94:	2021883a 	mov	r16,r4
    cb98:	3823883a 	mov	r17,r7
    cb9c:	14800017 	ldw	r18,0(r2)
    cba0:	28001426 	beq	r5,zero,cbf4 <_wcrtomb_r+0x7c>
    cba4:	d9400415 	stw	r5,16(sp)
    cba8:	d9800515 	stw	r6,20(sp)
    cbac:	0008fd80 	call	8fd8 <__locale_charset>
    cbb0:	d9400417 	ldw	r5,16(sp)
    cbb4:	d9800517 	ldw	r6,20(sp)
    cbb8:	8009883a 	mov	r4,r16
    cbbc:	dc400015 	stw	r17,0(sp)
    cbc0:	100f883a 	mov	r7,r2
    cbc4:	903ee83a 	callr	r18
    cbc8:	00ffffc4 	movi	r3,-1
    cbcc:	10c0031e 	bne	r2,r3,cbdc <_wcrtomb_r+0x64>
    cbd0:	88000015 	stw	zero,0(r17)
    cbd4:	00c02284 	movi	r3,138
    cbd8:	80c00015 	stw	r3,0(r16)
    cbdc:	dfc00917 	ldw	ra,36(sp)
    cbe0:	dc800817 	ldw	r18,32(sp)
    cbe4:	dc400717 	ldw	r17,28(sp)
    cbe8:	dc000617 	ldw	r16,24(sp)
    cbec:	dec00a04 	addi	sp,sp,40
    cbf0:	f800283a 	ret
    cbf4:	0008fd80 	call	8fd8 <__locale_charset>
    cbf8:	8009883a 	mov	r4,r16
    cbfc:	dc400015 	stw	r17,0(sp)
    cc00:	d9400104 	addi	r5,sp,4
    cc04:	000d883a 	mov	r6,zero
    cc08:	100f883a 	mov	r7,r2
    cc0c:	903ee83a 	callr	r18
    cc10:	003fed06 	br	cbc8 <__alt_data_end+0xfffb7498>

0000cc14 <wcrtomb>:
    cc14:	defff504 	addi	sp,sp,-44
    cc18:	dc400515 	stw	r17,20(sp)
    cc1c:	dc000415 	stw	r16,16(sp)
    cc20:	dfc00a15 	stw	ra,40(sp)
    cc24:	dd400915 	stw	r21,36(sp)
    cc28:	dd000815 	stw	r20,32(sp)
    cc2c:	dcc00715 	stw	r19,28(sp)
    cc30:	dc800615 	stw	r18,24(sp)
    cc34:	2021883a 	mov	r16,r4
    cc38:	3023883a 	mov	r17,r6
    cc3c:	20001d26 	beq	r4,zero,ccb4 <wcrtomb+0xa0>
    cc40:	04800074 	movhi	r18,1
    cc44:	94945904 	addi	r18,r18,20836
    cc48:	00800074 	movhi	r2,1
    cc4c:	95400017 	ldw	r21,0(r18)
    cc50:	10945b04 	addi	r2,r2,20844
    cc54:	15000017 	ldw	r20,0(r2)
    cc58:	2827883a 	mov	r19,r5
    cc5c:	0008fd80 	call	8fd8 <__locale_charset>
    cc60:	a809883a 	mov	r4,r21
    cc64:	dc400015 	stw	r17,0(sp)
    cc68:	800b883a 	mov	r5,r16
    cc6c:	980d883a 	mov	r6,r19
    cc70:	100f883a 	mov	r7,r2
    cc74:	a03ee83a 	callr	r20
    cc78:	00ffffc4 	movi	r3,-1
    cc7c:	10c0041e 	bne	r2,r3,cc90 <wcrtomb+0x7c>
    cc80:	90c00017 	ldw	r3,0(r18)
    cc84:	01002284 	movi	r4,138
    cc88:	88000015 	stw	zero,0(r17)
    cc8c:	19000015 	stw	r4,0(r3)
    cc90:	dfc00a17 	ldw	ra,40(sp)
    cc94:	dd400917 	ldw	r21,36(sp)
    cc98:	dd000817 	ldw	r20,32(sp)
    cc9c:	dcc00717 	ldw	r19,28(sp)
    cca0:	dc800617 	ldw	r18,24(sp)
    cca4:	dc400517 	ldw	r17,20(sp)
    cca8:	dc000417 	ldw	r16,16(sp)
    ccac:	dec00b04 	addi	sp,sp,44
    ccb0:	f800283a 	ret
    ccb4:	04800074 	movhi	r18,1
    ccb8:	94945904 	addi	r18,r18,20836
    ccbc:	00800074 	movhi	r2,1
    ccc0:	94c00017 	ldw	r19,0(r18)
    ccc4:	10945b04 	addi	r2,r2,20844
    ccc8:	14000017 	ldw	r16,0(r2)
    cccc:	0008fd80 	call	8fd8 <__locale_charset>
    ccd0:	9809883a 	mov	r4,r19
    ccd4:	dc400015 	stw	r17,0(sp)
    ccd8:	d9400104 	addi	r5,sp,4
    ccdc:	000d883a 	mov	r6,zero
    cce0:	100f883a 	mov	r7,r2
    cce4:	803ee83a 	callr	r16
    cce8:	003fe306 	br	cc78 <__alt_data_end+0xfffb7548>

0000ccec <__ascii_wctomb>:
    ccec:	28000526 	beq	r5,zero,cd04 <__ascii_wctomb+0x18>
    ccf0:	00803fc4 	movi	r2,255
    ccf4:	11800536 	bltu	r2,r6,cd0c <__ascii_wctomb+0x20>
    ccf8:	29800005 	stb	r6,0(r5)
    ccfc:	00800044 	movi	r2,1
    cd00:	f800283a 	ret
    cd04:	0005883a 	mov	r2,zero
    cd08:	f800283a 	ret
    cd0c:	00802284 	movi	r2,138
    cd10:	20800015 	stw	r2,0(r4)
    cd14:	00bfffc4 	movi	r2,-1
    cd18:	f800283a 	ret

0000cd1c <_wctomb_r>:
    cd1c:	00800074 	movhi	r2,1
    cd20:	defff904 	addi	sp,sp,-28
    cd24:	10945b04 	addi	r2,r2,20844
    cd28:	dfc00615 	stw	ra,24(sp)
    cd2c:	dc400515 	stw	r17,20(sp)
    cd30:	dc000415 	stw	r16,16(sp)
    cd34:	3823883a 	mov	r17,r7
    cd38:	14000017 	ldw	r16,0(r2)
    cd3c:	d9000115 	stw	r4,4(sp)
    cd40:	d9400215 	stw	r5,8(sp)
    cd44:	d9800315 	stw	r6,12(sp)
    cd48:	0008fd80 	call	8fd8 <__locale_charset>
    cd4c:	d9000117 	ldw	r4,4(sp)
    cd50:	d9400217 	ldw	r5,8(sp)
    cd54:	d9800317 	ldw	r6,12(sp)
    cd58:	dc400015 	stw	r17,0(sp)
    cd5c:	100f883a 	mov	r7,r2
    cd60:	803ee83a 	callr	r16
    cd64:	dfc00617 	ldw	ra,24(sp)
    cd68:	dc400517 	ldw	r17,20(sp)
    cd6c:	dc000417 	ldw	r16,16(sp)
    cd70:	dec00704 	addi	sp,sp,28
    cd74:	f800283a 	ret

0000cd78 <__muldi3>:
    cd78:	defff604 	addi	sp,sp,-40
    cd7c:	dd800615 	stw	r22,24(sp)
    cd80:	dd400515 	stw	r21,20(sp)
    cd84:	25bfffcc 	andi	r22,r4,65535
    cd88:	357fffcc 	andi	r21,r6,65535
    cd8c:	dc400115 	stw	r17,4(sp)
    cd90:	2022d43a 	srli	r17,r4,16
    cd94:	dcc00315 	stw	r19,12(sp)
    cd98:	dc800215 	stw	r18,8(sp)
    cd9c:	2027883a 	mov	r19,r4
    cda0:	2825883a 	mov	r18,r5
    cda4:	a809883a 	mov	r4,r21
    cda8:	b00b883a 	mov	r5,r22
    cdac:	dfc00915 	stw	ra,36(sp)
    cdb0:	df000815 	stw	fp,32(sp)
    cdb4:	ddc00715 	stw	r23,28(sp)
    cdb8:	3839883a 	mov	fp,r7
    cdbc:	302ed43a 	srli	r23,r6,16
    cdc0:	dd000415 	stw	r20,16(sp)
    cdc4:	dc000015 	stw	r16,0(sp)
    cdc8:	3029883a 	mov	r20,r6
    cdcc:	000dae00 	call	dae0 <__mulsi3>
    cdd0:	a809883a 	mov	r4,r21
    cdd4:	880b883a 	mov	r5,r17
    cdd8:	1021883a 	mov	r16,r2
    cddc:	000dae00 	call	dae0 <__mulsi3>
    cde0:	880b883a 	mov	r5,r17
    cde4:	b809883a 	mov	r4,r23
    cde8:	102b883a 	mov	r21,r2
    cdec:	000dae00 	call	dae0 <__mulsi3>
    cdf0:	b809883a 	mov	r4,r23
    cdf4:	b00b883a 	mov	r5,r22
    cdf8:	1023883a 	mov	r17,r2
    cdfc:	000dae00 	call	dae0 <__mulsi3>
    ce00:	8012d43a 	srli	r9,r16,16
    ce04:	a885883a 	add	r2,r21,r2
    ce08:	1251883a 	add	r8,r2,r9
    ce0c:	4540022e 	bgeu	r8,r21,ce18 <__muldi3+0xa0>
    ce10:	00800074 	movhi	r2,1
    ce14:	88a3883a 	add	r17,r17,r2
    ce18:	4006d43a 	srli	r3,r8,16
    ce1c:	4010943a 	slli	r8,r8,16
    ce20:	9809883a 	mov	r4,r19
    ce24:	e00b883a 	mov	r5,fp
    ce28:	843fffcc 	andi	r16,r16,65535
    ce2c:	88e3883a 	add	r17,r17,r3
    ce30:	4421883a 	add	r16,r8,r16
    ce34:	000dae00 	call	dae0 <__mulsi3>
    ce38:	a009883a 	mov	r4,r20
    ce3c:	900b883a 	mov	r5,r18
    ce40:	1027883a 	mov	r19,r2
    ce44:	000dae00 	call	dae0 <__mulsi3>
    ce48:	9885883a 	add	r2,r19,r2
    ce4c:	1447883a 	add	r3,r2,r17
    ce50:	8005883a 	mov	r2,r16
    ce54:	dfc00917 	ldw	ra,36(sp)
    ce58:	df000817 	ldw	fp,32(sp)
    ce5c:	ddc00717 	ldw	r23,28(sp)
    ce60:	dd800617 	ldw	r22,24(sp)
    ce64:	dd400517 	ldw	r21,20(sp)
    ce68:	dd000417 	ldw	r20,16(sp)
    ce6c:	dcc00317 	ldw	r19,12(sp)
    ce70:	dc800217 	ldw	r18,8(sp)
    ce74:	dc400117 	ldw	r17,4(sp)
    ce78:	dc000017 	ldw	r16,0(sp)
    ce7c:	dec00a04 	addi	sp,sp,40
    ce80:	f800283a 	ret

0000ce84 <__udivdi3>:
    ce84:	defff504 	addi	sp,sp,-44
    ce88:	dcc00415 	stw	r19,16(sp)
    ce8c:	dc000115 	stw	r16,4(sp)
    ce90:	dfc00a15 	stw	ra,40(sp)
    ce94:	df000915 	stw	fp,36(sp)
    ce98:	ddc00815 	stw	r23,32(sp)
    ce9c:	dd800715 	stw	r22,28(sp)
    cea0:	dd400615 	stw	r21,24(sp)
    cea4:	dd000515 	stw	r20,20(sp)
    cea8:	dc800315 	stw	r18,12(sp)
    ceac:	dc400215 	stw	r17,8(sp)
    ceb0:	2027883a 	mov	r19,r4
    ceb4:	2821883a 	mov	r16,r5
    ceb8:	3800471e 	bne	r7,zero,cfd8 <__udivdi3+0x154>
    cebc:	3025883a 	mov	r18,r6
    cec0:	2023883a 	mov	r17,r4
    cec4:	2980592e 	bgeu	r5,r6,d02c <__udivdi3+0x1a8>
    cec8:	00bfffd4 	movui	r2,65535
    cecc:	2829883a 	mov	r20,r5
    ced0:	1180b236 	bltu	r2,r6,d19c <__udivdi3+0x318>
    ced4:	00803fc4 	movi	r2,255
    ced8:	1181622e 	bgeu	r2,r6,d464 <__udivdi3+0x5e0>
    cedc:	00800204 	movi	r2,8
    cee0:	1007883a 	mov	r3,r2
    cee4:	3084d83a 	srl	r2,r6,r2
    cee8:	01000074 	movhi	r4,1
    ceec:	210d4204 	addi	r4,r4,13576
    cef0:	2085883a 	add	r2,r4,r2
    cef4:	11000003 	ldbu	r4,0(r2)
    cef8:	20c9883a 	add	r4,r4,r3
    cefc:	00c00804 	movi	r3,32
    cf00:	1907c83a 	sub	r3,r3,r4
    cf04:	18000526 	beq	r3,zero,cf1c <__udivdi3+0x98>
    cf08:	80e0983a 	sll	r16,r16,r3
    cf0c:	9908d83a 	srl	r4,r19,r4
    cf10:	30e4983a 	sll	r18,r6,r3
    cf14:	98e2983a 	sll	r17,r19,r3
    cf18:	8128b03a 	or	r20,r16,r4
    cf1c:	902ad43a 	srli	r21,r18,16
    cf20:	a009883a 	mov	r4,r20
    cf24:	95bfffcc 	andi	r22,r18,65535
    cf28:	a80b883a 	mov	r5,r21
    cf2c:	00039140 	call	3914 <__umodsi3>
    cf30:	a009883a 	mov	r4,r20
    cf34:	a80b883a 	mov	r5,r21
    cf38:	102f883a 	mov	r23,r2
    cf3c:	000390c0 	call	390c <__udivsi3>
    cf40:	1009883a 	mov	r4,r2
    cf44:	b00b883a 	mov	r5,r22
    cf48:	1021883a 	mov	r16,r2
    cf4c:	000dae00 	call	dae0 <__mulsi3>
    cf50:	b82e943a 	slli	r23,r23,16
    cf54:	8808d43a 	srli	r4,r17,16
    cf58:	b906b03a 	or	r3,r23,r4
    cf5c:	1880052e 	bgeu	r3,r2,cf74 <__udivdi3+0xf0>
    cf60:	1c87883a 	add	r3,r3,r18
    cf64:	813fffc4 	addi	r4,r16,-1
    cf68:	1c800136 	bltu	r3,r18,cf70 <__udivdi3+0xec>
    cf6c:	18815236 	bltu	r3,r2,d4b8 <__udivdi3+0x634>
    cf70:	2021883a 	mov	r16,r4
    cf74:	18a7c83a 	sub	r19,r3,r2
    cf78:	9809883a 	mov	r4,r19
    cf7c:	a80b883a 	mov	r5,r21
    cf80:	00039140 	call	3914 <__umodsi3>
    cf84:	1029883a 	mov	r20,r2
    cf88:	9809883a 	mov	r4,r19
    cf8c:	a80b883a 	mov	r5,r21
    cf90:	a028943a 	slli	r20,r20,16
    cf94:	000390c0 	call	390c <__udivsi3>
    cf98:	1009883a 	mov	r4,r2
    cf9c:	b00b883a 	mov	r5,r22
    cfa0:	8c7fffcc 	andi	r17,r17,65535
    cfa4:	1027883a 	mov	r19,r2
    cfa8:	a462b03a 	or	r17,r20,r17
    cfac:	000dae00 	call	dae0 <__mulsi3>
    cfb0:	8880052e 	bgeu	r17,r2,cfc8 <__udivdi3+0x144>
    cfb4:	8ca3883a 	add	r17,r17,r18
    cfb8:	98ffffc4 	addi	r3,r19,-1
    cfbc:	8c811036 	bltu	r17,r18,d400 <__udivdi3+0x57c>
    cfc0:	88810f2e 	bgeu	r17,r2,d400 <__udivdi3+0x57c>
    cfc4:	9cffff84 	addi	r19,r19,-2
    cfc8:	8020943a 	slli	r16,r16,16
    cfcc:	0007883a 	mov	r3,zero
    cfd0:	9c04b03a 	or	r2,r19,r16
    cfd4:	00006006 	br	d158 <__udivdi3+0x2d4>
    cfd8:	29c05d36 	bltu	r5,r7,d150 <__udivdi3+0x2cc>
    cfdc:	00bfffd4 	movui	r2,65535
    cfe0:	11c0692e 	bgeu	r2,r7,d188 <__udivdi3+0x304>
    cfe4:	00804034 	movhi	r2,256
    cfe8:	10bfffc4 	addi	r2,r2,-1
    cfec:	11c10e2e 	bgeu	r2,r7,d428 <__udivdi3+0x5a4>
    cff0:	01400604 	movi	r5,24
    cff4:	2811883a 	mov	r8,r5
    cff8:	394ad83a 	srl	r5,r7,r5
    cffc:	00800074 	movhi	r2,1
    d000:	108d4204 	addi	r2,r2,13576
    d004:	114b883a 	add	r5,r2,r5
    d008:	29400003 	ldbu	r5,0(r5)
    d00c:	00c00804 	movi	r3,32
    d010:	2a0b883a 	add	r5,r5,r8
    d014:	196fc83a 	sub	r23,r3,r5
    d018:	b8006b1e 	bne	r23,zero,d1c8 <__udivdi3+0x344>
    d01c:	3c011436 	bltu	r7,r16,d470 <__udivdi3+0x5ec>
    d020:	9985403a 	cmpgeu	r2,r19,r6
    d024:	0007883a 	mov	r3,zero
    d028:	00004b06 	br	d158 <__udivdi3+0x2d4>
    d02c:	3000041e 	bne	r6,zero,d040 <__udivdi3+0x1bc>
    d030:	01000044 	movi	r4,1
    d034:	000b883a 	mov	r5,zero
    d038:	000390c0 	call	390c <__udivsi3>
    d03c:	1025883a 	mov	r18,r2
    d040:	00bfffd4 	movui	r2,65535
    d044:	14805b2e 	bgeu	r2,r18,d1b4 <__udivdi3+0x330>
    d048:	00804034 	movhi	r2,256
    d04c:	10bfffc4 	addi	r2,r2,-1
    d050:	1480fe2e 	bgeu	r2,r18,d44c <__udivdi3+0x5c8>
    d054:	00800604 	movi	r2,24
    d058:	1007883a 	mov	r3,r2
    d05c:	9084d83a 	srl	r2,r18,r2
    d060:	01000074 	movhi	r4,1
    d064:	210d4204 	addi	r4,r4,13576
    d068:	2085883a 	add	r2,r4,r2
    d06c:	11800003 	ldbu	r6,0(r2)
    d070:	01c00804 	movi	r7,32
    d074:	30c7883a 	add	r3,r6,r3
    d078:	38cfc83a 	sub	r7,r7,r3
    d07c:	3800a71e 	bne	r7,zero,d31c <__udivdi3+0x498>
    d080:	9028d43a 	srli	r20,r18,16
    d084:	84a1c83a 	sub	r16,r16,r18
    d088:	957fffcc 	andi	r21,r18,65535
    d08c:	00c00044 	movi	r3,1
    d090:	8009883a 	mov	r4,r16
    d094:	a00b883a 	mov	r5,r20
    d098:	d8c00015 	stw	r3,0(sp)
    d09c:	00039140 	call	3914 <__umodsi3>
    d0a0:	8009883a 	mov	r4,r16
    d0a4:	a00b883a 	mov	r5,r20
    d0a8:	102d883a 	mov	r22,r2
    d0ac:	000390c0 	call	390c <__udivsi3>
    d0b0:	1009883a 	mov	r4,r2
    d0b4:	a80b883a 	mov	r5,r21
    d0b8:	1021883a 	mov	r16,r2
    d0bc:	000dae00 	call	dae0 <__mulsi3>
    d0c0:	b02c943a 	slli	r22,r22,16
    d0c4:	880ed43a 	srli	r7,r17,16
    d0c8:	d8c00017 	ldw	r3,0(sp)
    d0cc:	b1ccb03a 	or	r6,r22,r7
    d0d0:	3080052e 	bgeu	r6,r2,d0e8 <__udivdi3+0x264>
    d0d4:	348d883a 	add	r6,r6,r18
    d0d8:	813fffc4 	addi	r4,r16,-1
    d0dc:	34800136 	bltu	r6,r18,d0e4 <__udivdi3+0x260>
    d0e0:	3080f236 	bltu	r6,r2,d4ac <__udivdi3+0x628>
    d0e4:	2021883a 	mov	r16,r4
    d0e8:	30a7c83a 	sub	r19,r6,r2
    d0ec:	9809883a 	mov	r4,r19
    d0f0:	a00b883a 	mov	r5,r20
    d0f4:	d8c00015 	stw	r3,0(sp)
    d0f8:	00039140 	call	3914 <__umodsi3>
    d0fc:	102d883a 	mov	r22,r2
    d100:	9809883a 	mov	r4,r19
    d104:	a00b883a 	mov	r5,r20
    d108:	b02c943a 	slli	r22,r22,16
    d10c:	000390c0 	call	390c <__udivsi3>
    d110:	1009883a 	mov	r4,r2
    d114:	a80b883a 	mov	r5,r21
    d118:	8c7fffcc 	andi	r17,r17,65535
    d11c:	1027883a 	mov	r19,r2
    d120:	b462b03a 	or	r17,r22,r17
    d124:	000dae00 	call	dae0 <__mulsi3>
    d128:	d8c00017 	ldw	r3,0(sp)
    d12c:	8880052e 	bgeu	r17,r2,d144 <__udivdi3+0x2c0>
    d130:	8ca3883a 	add	r17,r17,r18
    d134:	993fffc4 	addi	r4,r19,-1
    d138:	8c80af36 	bltu	r17,r18,d3f8 <__udivdi3+0x574>
    d13c:	8880ae2e 	bgeu	r17,r2,d3f8 <__udivdi3+0x574>
    d140:	9cffff84 	addi	r19,r19,-2
    d144:	8020943a 	slli	r16,r16,16
    d148:	9c04b03a 	or	r2,r19,r16
    d14c:	00000206 	br	d158 <__udivdi3+0x2d4>
    d150:	0007883a 	mov	r3,zero
    d154:	0005883a 	mov	r2,zero
    d158:	dfc00a17 	ldw	ra,40(sp)
    d15c:	df000917 	ldw	fp,36(sp)
    d160:	ddc00817 	ldw	r23,32(sp)
    d164:	dd800717 	ldw	r22,28(sp)
    d168:	dd400617 	ldw	r21,24(sp)
    d16c:	dd000517 	ldw	r20,20(sp)
    d170:	dcc00417 	ldw	r19,16(sp)
    d174:	dc800317 	ldw	r18,12(sp)
    d178:	dc400217 	ldw	r17,8(sp)
    d17c:	dc000117 	ldw	r16,4(sp)
    d180:	dec00b04 	addi	sp,sp,44
    d184:	f800283a 	ret
    d188:	00803fc4 	movi	r2,255
    d18c:	11c0a92e 	bgeu	r2,r7,d434 <__udivdi3+0x5b0>
    d190:	01400204 	movi	r5,8
    d194:	2811883a 	mov	r8,r5
    d198:	003f9706 	br	cff8 <__alt_data_end+0xfffb78c8>
    d19c:	00804034 	movhi	r2,256
    d1a0:	10bfffc4 	addi	r2,r2,-1
    d1a4:	1180a62e 	bgeu	r2,r6,d440 <__udivdi3+0x5bc>
    d1a8:	00800604 	movi	r2,24
    d1ac:	1007883a 	mov	r3,r2
    d1b0:	003f4c06 	br	cee4 <__alt_data_end+0xfffb77b4>
    d1b4:	00803fc4 	movi	r2,255
    d1b8:	1480a72e 	bgeu	r2,r18,d458 <__udivdi3+0x5d4>
    d1bc:	00800204 	movi	r2,8
    d1c0:	1007883a 	mov	r3,r2
    d1c4:	003fa506 	br	d05c <__alt_data_end+0xfffb792c>
    d1c8:	3178d83a 	srl	fp,r6,r5
    d1cc:	3dce983a 	sll	r7,r7,r23
    d1d0:	8168d83a 	srl	r20,r16,r5
    d1d4:	9950d83a 	srl	r8,r19,r5
    d1d8:	3f38b03a 	or	fp,r7,fp
    d1dc:	e024d43a 	srli	r18,fp,16
    d1e0:	85e0983a 	sll	r16,r16,r23
    d1e4:	a009883a 	mov	r4,r20
    d1e8:	900b883a 	mov	r5,r18
    d1ec:	8220b03a 	or	r16,r16,r8
    d1f0:	35ea983a 	sll	r21,r6,r23
    d1f4:	00039140 	call	3914 <__umodsi3>
    d1f8:	a009883a 	mov	r4,r20
    d1fc:	900b883a 	mov	r5,r18
    d200:	1023883a 	mov	r17,r2
    d204:	e5bfffcc 	andi	r22,fp,65535
    d208:	000390c0 	call	390c <__udivsi3>
    d20c:	1009883a 	mov	r4,r2
    d210:	b00b883a 	mov	r5,r22
    d214:	1029883a 	mov	r20,r2
    d218:	000dae00 	call	dae0 <__mulsi3>
    d21c:	8806943a 	slli	r3,r17,16
    d220:	8014d43a 	srli	r10,r16,16
    d224:	1a92b03a 	or	r9,r3,r10
    d228:	4880042e 	bgeu	r9,r2,d23c <__udivdi3+0x3b8>
    d22c:	4f13883a 	add	r9,r9,fp
    d230:	a0ffffc4 	addi	r3,r20,-1
    d234:	4f00952e 	bgeu	r9,fp,d48c <__udivdi3+0x608>
    d238:	1829883a 	mov	r20,r3
    d23c:	48a3c83a 	sub	r17,r9,r2
    d240:	8809883a 	mov	r4,r17
    d244:	900b883a 	mov	r5,r18
    d248:	00039140 	call	3914 <__umodsi3>
    d24c:	8809883a 	mov	r4,r17
    d250:	900b883a 	mov	r5,r18
    d254:	d8800015 	stw	r2,0(sp)
    d258:	000390c0 	call	390c <__udivsi3>
    d25c:	1009883a 	mov	r4,r2
    d260:	b00b883a 	mov	r5,r22
    d264:	1023883a 	mov	r17,r2
    d268:	000dae00 	call	dae0 <__mulsi3>
    d26c:	d8c00017 	ldw	r3,0(sp)
    d270:	823fffcc 	andi	r8,r16,65535
    d274:	1806943a 	slli	r3,r3,16
    d278:	1a20b03a 	or	r16,r3,r8
    d27c:	8080042e 	bgeu	r16,r2,d290 <__udivdi3+0x40c>
    d280:	8721883a 	add	r16,r16,fp
    d284:	88ffffc4 	addi	r3,r17,-1
    d288:	87007c2e 	bgeu	r16,fp,d47c <__udivdi3+0x5f8>
    d28c:	1823883a 	mov	r17,r3
    d290:	a028943a 	slli	r20,r20,16
    d294:	acbfffcc 	andi	r18,r21,65535
    d298:	900b883a 	mov	r5,r18
    d29c:	8d28b03a 	or	r20,r17,r20
    d2a0:	a022d43a 	srli	r17,r20,16
    d2a4:	a5bfffcc 	andi	r22,r20,65535
    d2a8:	b009883a 	mov	r4,r22
    d2ac:	a82ad43a 	srli	r21,r21,16
    d2b0:	80a1c83a 	sub	r16,r16,r2
    d2b4:	000dae00 	call	dae0 <__mulsi3>
    d2b8:	8809883a 	mov	r4,r17
    d2bc:	900b883a 	mov	r5,r18
    d2c0:	1039883a 	mov	fp,r2
    d2c4:	000dae00 	call	dae0 <__mulsi3>
    d2c8:	8809883a 	mov	r4,r17
    d2cc:	a80b883a 	mov	r5,r21
    d2d0:	1025883a 	mov	r18,r2
    d2d4:	000dae00 	call	dae0 <__mulsi3>
    d2d8:	b009883a 	mov	r4,r22
    d2dc:	a80b883a 	mov	r5,r21
    d2e0:	1023883a 	mov	r17,r2
    d2e4:	000dae00 	call	dae0 <__mulsi3>
    d2e8:	e006d43a 	srli	r3,fp,16
    d2ec:	9085883a 	add	r2,r18,r2
    d2f0:	10c7883a 	add	r3,r2,r3
    d2f4:	1c80022e 	bgeu	r3,r18,d300 <__udivdi3+0x47c>
    d2f8:	00800074 	movhi	r2,1
    d2fc:	88a3883a 	add	r17,r17,r2
    d300:	1808d43a 	srli	r4,r3,16
    d304:	8909883a 	add	r4,r17,r4
    d308:	81004436 	bltu	r16,r4,d41c <__udivdi3+0x598>
    d30c:	81003e26 	beq	r16,r4,d408 <__udivdi3+0x584>
    d310:	a005883a 	mov	r2,r20
    d314:	0007883a 	mov	r3,zero
    d318:	003f8f06 	br	d158 <__alt_data_end+0xfffb7a28>
    d31c:	91e4983a 	sll	r18,r18,r7
    d320:	80eed83a 	srl	r23,r16,r3
    d324:	81cc983a 	sll	r6,r16,r7
    d328:	9028d43a 	srli	r20,r18,16
    d32c:	98c6d83a 	srl	r3,r19,r3
    d330:	b809883a 	mov	r4,r23
    d334:	a00b883a 	mov	r5,r20
    d338:	30ecb03a 	or	r22,r6,r3
    d33c:	99e2983a 	sll	r17,r19,r7
    d340:	00039140 	call	3914 <__umodsi3>
    d344:	b809883a 	mov	r4,r23
    d348:	a00b883a 	mov	r5,r20
    d34c:	1021883a 	mov	r16,r2
    d350:	957fffcc 	andi	r21,r18,65535
    d354:	000390c0 	call	390c <__udivsi3>
    d358:	a80b883a 	mov	r5,r21
    d35c:	1009883a 	mov	r4,r2
    d360:	102f883a 	mov	r23,r2
    d364:	000dae00 	call	dae0 <__mulsi3>
    d368:	8020943a 	slli	r16,r16,16
    d36c:	b00ad43a 	srli	r5,r22,16
    d370:	814cb03a 	or	r6,r16,r5
    d374:	3080062e 	bgeu	r6,r2,d390 <__udivdi3+0x50c>
    d378:	348d883a 	add	r6,r6,r18
    d37c:	b8ffffc4 	addi	r3,r23,-1
    d380:	34804836 	bltu	r6,r18,d4a4 <__udivdi3+0x620>
    d384:	3080472e 	bgeu	r6,r2,d4a4 <__udivdi3+0x620>
    d388:	bdffff84 	addi	r23,r23,-2
    d38c:	348d883a 	add	r6,r6,r18
    d390:	30a7c83a 	sub	r19,r6,r2
    d394:	9809883a 	mov	r4,r19
    d398:	a00b883a 	mov	r5,r20
    d39c:	00039140 	call	3914 <__umodsi3>
    d3a0:	9809883a 	mov	r4,r19
    d3a4:	a00b883a 	mov	r5,r20
    d3a8:	1039883a 	mov	fp,r2
    d3ac:	000390c0 	call	390c <__udivsi3>
    d3b0:	1009883a 	mov	r4,r2
    d3b4:	a80b883a 	mov	r5,r21
    d3b8:	e038943a 	slli	fp,fp,16
    d3bc:	1027883a 	mov	r19,r2
    d3c0:	000dae00 	call	dae0 <__mulsi3>
    d3c4:	b1bfffcc 	andi	r6,r22,65535
    d3c8:	e18cb03a 	or	r6,fp,r6
    d3cc:	3080062e 	bgeu	r6,r2,d3e8 <__udivdi3+0x564>
    d3d0:	348d883a 	add	r6,r6,r18
    d3d4:	98ffffc4 	addi	r3,r19,-1
    d3d8:	34803036 	bltu	r6,r18,d49c <__udivdi3+0x618>
    d3dc:	30802f2e 	bgeu	r6,r2,d49c <__udivdi3+0x618>
    d3e0:	9cffff84 	addi	r19,r19,-2
    d3e4:	348d883a 	add	r6,r6,r18
    d3e8:	b82e943a 	slli	r23,r23,16
    d3ec:	30a1c83a 	sub	r16,r6,r2
    d3f0:	9dc6b03a 	or	r3,r19,r23
    d3f4:	003f2606 	br	d090 <__alt_data_end+0xfffb7960>
    d3f8:	2027883a 	mov	r19,r4
    d3fc:	003f5106 	br	d144 <__alt_data_end+0xfffb7a14>
    d400:	1827883a 	mov	r19,r3
    d404:	003ef006 	br	cfc8 <__alt_data_end+0xfffb7898>
    d408:	1808943a 	slli	r4,r3,16
    d40c:	9dc6983a 	sll	r3,r19,r23
    d410:	e73fffcc 	andi	fp,fp,65535
    d414:	2709883a 	add	r4,r4,fp
    d418:	193fbd2e 	bgeu	r3,r4,d310 <__alt_data_end+0xfffb7be0>
    d41c:	a0bfffc4 	addi	r2,r20,-1
    d420:	0007883a 	mov	r3,zero
    d424:	003f4c06 	br	d158 <__alt_data_end+0xfffb7a28>
    d428:	01400404 	movi	r5,16
    d42c:	2811883a 	mov	r8,r5
    d430:	003ef106 	br	cff8 <__alt_data_end+0xfffb78c8>
    d434:	000b883a 	mov	r5,zero
    d438:	0011883a 	mov	r8,zero
    d43c:	003eee06 	br	cff8 <__alt_data_end+0xfffb78c8>
    d440:	00800404 	movi	r2,16
    d444:	1007883a 	mov	r3,r2
    d448:	003ea606 	br	cee4 <__alt_data_end+0xfffb77b4>
    d44c:	00800404 	movi	r2,16
    d450:	1007883a 	mov	r3,r2
    d454:	003f0106 	br	d05c <__alt_data_end+0xfffb792c>
    d458:	0005883a 	mov	r2,zero
    d45c:	0007883a 	mov	r3,zero
    d460:	003efe06 	br	d05c <__alt_data_end+0xfffb792c>
    d464:	0005883a 	mov	r2,zero
    d468:	0007883a 	mov	r3,zero
    d46c:	003e9d06 	br	cee4 <__alt_data_end+0xfffb77b4>
    d470:	0007883a 	mov	r3,zero
    d474:	00800044 	movi	r2,1
    d478:	003f3706 	br	d158 <__alt_data_end+0xfffb7a28>
    d47c:	80bf832e 	bgeu	r16,r2,d28c <__alt_data_end+0xfffb7b5c>
    d480:	8c7fff84 	addi	r17,r17,-2
    d484:	8721883a 	add	r16,r16,fp
    d488:	003f8106 	br	d290 <__alt_data_end+0xfffb7b60>
    d48c:	48bf6a2e 	bgeu	r9,r2,d238 <__alt_data_end+0xfffb7b08>
    d490:	a53fff84 	addi	r20,r20,-2
    d494:	4f13883a 	add	r9,r9,fp
    d498:	003f6806 	br	d23c <__alt_data_end+0xfffb7b0c>
    d49c:	1827883a 	mov	r19,r3
    d4a0:	003fd106 	br	d3e8 <__alt_data_end+0xfffb7cb8>
    d4a4:	182f883a 	mov	r23,r3
    d4a8:	003fb906 	br	d390 <__alt_data_end+0xfffb7c60>
    d4ac:	843fff84 	addi	r16,r16,-2
    d4b0:	348d883a 	add	r6,r6,r18
    d4b4:	003f0c06 	br	d0e8 <__alt_data_end+0xfffb79b8>
    d4b8:	843fff84 	addi	r16,r16,-2
    d4bc:	1c87883a 	add	r3,r3,r18
    d4c0:	003eac06 	br	cf74 <__alt_data_end+0xfffb7844>

0000d4c4 <__umoddi3>:
    d4c4:	defff404 	addi	sp,sp,-48
    d4c8:	dd800815 	stw	r22,32(sp)
    d4cc:	dc400315 	stw	r17,12(sp)
    d4d0:	dc000215 	stw	r16,8(sp)
    d4d4:	dfc00b15 	stw	ra,44(sp)
    d4d8:	df000a15 	stw	fp,40(sp)
    d4dc:	ddc00915 	stw	r23,36(sp)
    d4e0:	dd400715 	stw	r21,28(sp)
    d4e4:	dd000615 	stw	r20,24(sp)
    d4e8:	dcc00515 	stw	r19,20(sp)
    d4ec:	dc800415 	stw	r18,16(sp)
    d4f0:	2021883a 	mov	r16,r4
    d4f4:	2823883a 	mov	r17,r5
    d4f8:	282d883a 	mov	r22,r5
    d4fc:	38003c1e 	bne	r7,zero,d5f0 <__umoddi3+0x12c>
    d500:	3027883a 	mov	r19,r6
    d504:	2029883a 	mov	r20,r4
    d508:	2980522e 	bgeu	r5,r6,d654 <__umoddi3+0x190>
    d50c:	00bfffd4 	movui	r2,65535
    d510:	1180a436 	bltu	r2,r6,d7a4 <__umoddi3+0x2e0>
    d514:	00803fc4 	movi	r2,255
    d518:	11815e2e 	bgeu	r2,r6,da94 <__umoddi3+0x5d0>
    d51c:	01400204 	movi	r5,8
    d520:	2805883a 	mov	r2,r5
    d524:	314ad83a 	srl	r5,r6,r5
    d528:	00c00074 	movhi	r3,1
    d52c:	18cd4204 	addi	r3,r3,13576
    d530:	194b883a 	add	r5,r3,r5
    d534:	29000003 	ldbu	r4,0(r5)
    d538:	2089883a 	add	r4,r4,r2
    d53c:	00800804 	movi	r2,32
    d540:	1105c83a 	sub	r2,r2,r4
    d544:	10010c26 	beq	r2,zero,d978 <__umoddi3+0x4b4>
    d548:	88a2983a 	sll	r17,r17,r2
    d54c:	8108d83a 	srl	r4,r16,r4
    d550:	30a6983a 	sll	r19,r6,r2
    d554:	80a8983a 	sll	r20,r16,r2
    d558:	1025883a 	mov	r18,r2
    d55c:	892cb03a 	or	r22,r17,r4
    d560:	9822d43a 	srli	r17,r19,16
    d564:	b009883a 	mov	r4,r22
    d568:	9d7fffcc 	andi	r21,r19,65535
    d56c:	880b883a 	mov	r5,r17
    d570:	00039140 	call	3914 <__umodsi3>
    d574:	b009883a 	mov	r4,r22
    d578:	880b883a 	mov	r5,r17
    d57c:	102f883a 	mov	r23,r2
    d580:	000390c0 	call	390c <__udivsi3>
    d584:	1009883a 	mov	r4,r2
    d588:	a80b883a 	mov	r5,r21
    d58c:	000dae00 	call	dae0 <__mulsi3>
    d590:	b82e943a 	slli	r23,r23,16
    d594:	a008d43a 	srli	r4,r20,16
    d598:	b906b03a 	or	r3,r23,r4
    d59c:	1880042e 	bgeu	r3,r2,d5b0 <__umoddi3+0xec>
    d5a0:	1cc7883a 	add	r3,r3,r19
    d5a4:	1cc00236 	bltu	r3,r19,d5b0 <__umoddi3+0xec>
    d5a8:	1880012e 	bgeu	r3,r2,d5b0 <__umoddi3+0xec>
    d5ac:	1cc7883a 	add	r3,r3,r19
    d5b0:	18a1c83a 	sub	r16,r3,r2
    d5b4:	8009883a 	mov	r4,r16
    d5b8:	880b883a 	mov	r5,r17
    d5bc:	00039140 	call	3914 <__umodsi3>
    d5c0:	8009883a 	mov	r4,r16
    d5c4:	880b883a 	mov	r5,r17
    d5c8:	102d883a 	mov	r22,r2
    d5cc:	000390c0 	call	390c <__udivsi3>
    d5d0:	1009883a 	mov	r4,r2
    d5d4:	a80b883a 	mov	r5,r21
    d5d8:	b02c943a 	slli	r22,r22,16
    d5dc:	000dae00 	call	dae0 <__mulsi3>
    d5e0:	a13fffcc 	andi	r4,r20,65535
    d5e4:	b106b03a 	or	r3,r22,r4
    d5e8:	1880572e 	bgeu	r3,r2,d748 <__umoddi3+0x284>
    d5ec:	00005206 	br	d738 <__umoddi3+0x274>
    d5f0:	29c05936 	bltu	r5,r7,d758 <__umoddi3+0x294>
    d5f4:	00bfffd4 	movui	r2,65535
    d5f8:	11c0652e 	bgeu	r2,r7,d790 <__umoddi3+0x2cc>
    d5fc:	00804034 	movhi	r2,256
    d600:	10bfffc4 	addi	r2,r2,-1
    d604:	11c1172e 	bgeu	r2,r7,da64 <__umoddi3+0x5a0>
    d608:	01400604 	movi	r5,24
    d60c:	282b883a 	mov	r21,r5
    d610:	394ad83a 	srl	r5,r7,r5
    d614:	00c00074 	movhi	r3,1
    d618:	18cd4204 	addi	r3,r3,13576
    d61c:	194b883a 	add	r5,r3,r5
    d620:	28800003 	ldbu	r2,0(r5)
    d624:	00c00804 	movi	r3,32
    d628:	156b883a 	add	r21,r2,r21
    d62c:	1d69c83a 	sub	r20,r3,r21
    d630:	a000671e 	bne	r20,zero,d7d0 <__umoddi3+0x30c>
    d634:	3c400136 	bltu	r7,r17,d63c <__umoddi3+0x178>
    d638:	81812336 	bltu	r16,r6,dac8 <__umoddi3+0x604>
    d63c:	8185c83a 	sub	r2,r16,r6
    d640:	89e3c83a 	sub	r17,r17,r7
    d644:	8087803a 	cmpltu	r3,r16,r2
    d648:	88edc83a 	sub	r22,r17,r3
    d64c:	b007883a 	mov	r3,r22
    d650:	00004306 	br	d760 <__umoddi3+0x29c>
    d654:	3000041e 	bne	r6,zero,d668 <__umoddi3+0x1a4>
    d658:	01000044 	movi	r4,1
    d65c:	000b883a 	mov	r5,zero
    d660:	000390c0 	call	390c <__udivsi3>
    d664:	1027883a 	mov	r19,r2
    d668:	00bfffd4 	movui	r2,65535
    d66c:	14c0532e 	bgeu	r2,r19,d7bc <__umoddi3+0x2f8>
    d670:	00804034 	movhi	r2,256
    d674:	10bfffc4 	addi	r2,r2,-1
    d678:	14c1032e 	bgeu	r2,r19,da88 <__umoddi3+0x5c4>
    d67c:	00800604 	movi	r2,24
    d680:	1007883a 	mov	r3,r2
    d684:	9884d83a 	srl	r2,r19,r2
    d688:	01000074 	movhi	r4,1
    d68c:	210d4204 	addi	r4,r4,13576
    d690:	2085883a 	add	r2,r4,r2
    d694:	11000003 	ldbu	r4,0(r2)
    d698:	00800804 	movi	r2,32
    d69c:	20c7883a 	add	r3,r4,r3
    d6a0:	10c5c83a 	sub	r2,r2,r3
    d6a4:	1000b61e 	bne	r2,zero,d980 <__umoddi3+0x4bc>
    d6a8:	982ad43a 	srli	r21,r19,16
    d6ac:	8ce3c83a 	sub	r17,r17,r19
    d6b0:	9dbfffcc 	andi	r22,r19,65535
    d6b4:	0025883a 	mov	r18,zero
    d6b8:	8809883a 	mov	r4,r17
    d6bc:	a80b883a 	mov	r5,r21
    d6c0:	00039140 	call	3914 <__umodsi3>
    d6c4:	8809883a 	mov	r4,r17
    d6c8:	a80b883a 	mov	r5,r21
    d6cc:	102f883a 	mov	r23,r2
    d6d0:	000390c0 	call	390c <__udivsi3>
    d6d4:	1009883a 	mov	r4,r2
    d6d8:	b00b883a 	mov	r5,r22
    d6dc:	000dae00 	call	dae0 <__mulsi3>
    d6e0:	b82e943a 	slli	r23,r23,16
    d6e4:	a008d43a 	srli	r4,r20,16
    d6e8:	b906b03a 	or	r3,r23,r4
    d6ec:	1880032e 	bgeu	r3,r2,d6fc <__umoddi3+0x238>
    d6f0:	1cc7883a 	add	r3,r3,r19
    d6f4:	1cc00136 	bltu	r3,r19,d6fc <__umoddi3+0x238>
    d6f8:	1880f136 	bltu	r3,r2,dac0 <__umoddi3+0x5fc>
    d6fc:	18a1c83a 	sub	r16,r3,r2
    d700:	8009883a 	mov	r4,r16
    d704:	a80b883a 	mov	r5,r21
    d708:	00039140 	call	3914 <__umodsi3>
    d70c:	8009883a 	mov	r4,r16
    d710:	a80b883a 	mov	r5,r21
    d714:	1023883a 	mov	r17,r2
    d718:	000390c0 	call	390c <__udivsi3>
    d71c:	1009883a 	mov	r4,r2
    d720:	b00b883a 	mov	r5,r22
    d724:	8822943a 	slli	r17,r17,16
    d728:	000dae00 	call	dae0 <__mulsi3>
    d72c:	a13fffcc 	andi	r4,r20,65535
    d730:	8906b03a 	or	r3,r17,r4
    d734:	1880042e 	bgeu	r3,r2,d748 <__umoddi3+0x284>
    d738:	1cc7883a 	add	r3,r3,r19
    d73c:	1cc00236 	bltu	r3,r19,d748 <__umoddi3+0x284>
    d740:	1880012e 	bgeu	r3,r2,d748 <__umoddi3+0x284>
    d744:	1cc7883a 	add	r3,r3,r19
    d748:	1887c83a 	sub	r3,r3,r2
    d74c:	1c84d83a 	srl	r2,r3,r18
    d750:	0007883a 	mov	r3,zero
    d754:	00000206 	br	d760 <__umoddi3+0x29c>
    d758:	2005883a 	mov	r2,r4
    d75c:	2807883a 	mov	r3,r5
    d760:	dfc00b17 	ldw	ra,44(sp)
    d764:	df000a17 	ldw	fp,40(sp)
    d768:	ddc00917 	ldw	r23,36(sp)
    d76c:	dd800817 	ldw	r22,32(sp)
    d770:	dd400717 	ldw	r21,28(sp)
    d774:	dd000617 	ldw	r20,24(sp)
    d778:	dcc00517 	ldw	r19,20(sp)
    d77c:	dc800417 	ldw	r18,16(sp)
    d780:	dc400317 	ldw	r17,12(sp)
    d784:	dc000217 	ldw	r16,8(sp)
    d788:	dec00c04 	addi	sp,sp,48
    d78c:	f800283a 	ret
    d790:	00803fc4 	movi	r2,255
    d794:	11c0b02e 	bgeu	r2,r7,da58 <__umoddi3+0x594>
    d798:	01400204 	movi	r5,8
    d79c:	282b883a 	mov	r21,r5
    d7a0:	003f9b06 	br	d610 <__alt_data_end+0xfffb7ee0>
    d7a4:	00804034 	movhi	r2,256
    d7a8:	10bfffc4 	addi	r2,r2,-1
    d7ac:	1180b02e 	bgeu	r2,r6,da70 <__umoddi3+0x5ac>
    d7b0:	01400604 	movi	r5,24
    d7b4:	2805883a 	mov	r2,r5
    d7b8:	003f5a06 	br	d524 <__alt_data_end+0xfffb7df4>
    d7bc:	00803fc4 	movi	r2,255
    d7c0:	14c0ae2e 	bgeu	r2,r19,da7c <__umoddi3+0x5b8>
    d7c4:	00800204 	movi	r2,8
    d7c8:	1007883a 	mov	r3,r2
    d7cc:	003fad06 	br	d684 <__alt_data_end+0xfffb7f54>
    d7d0:	3d0a983a 	sll	r5,r7,r20
    d7d4:	356cd83a 	srl	r22,r6,r21
    d7d8:	8d78d83a 	srl	fp,r17,r21
    d7dc:	8d10983a 	sll	r8,r17,r20
    d7e0:	2dacb03a 	or	r22,r5,r22
    d7e4:	b02ed43a 	srli	r23,r22,16
    d7e8:	8564d83a 	srl	r18,r16,r21
    d7ec:	e009883a 	mov	r4,fp
    d7f0:	b80b883a 	mov	r5,r23
    d7f4:	44a4b03a 	or	r18,r8,r18
    d7f8:	3526983a 	sll	r19,r6,r20
    d7fc:	00039140 	call	3914 <__umodsi3>
    d800:	e009883a 	mov	r4,fp
    d804:	b80b883a 	mov	r5,r23
    d808:	b47fffcc 	andi	r17,r22,65535
    d80c:	d8800015 	stw	r2,0(sp)
    d810:	000390c0 	call	390c <__udivsi3>
    d814:	1009883a 	mov	r4,r2
    d818:	880b883a 	mov	r5,r17
    d81c:	1039883a 	mov	fp,r2
    d820:	000dae00 	call	dae0 <__mulsi3>
    d824:	d9800017 	ldw	r6,0(sp)
    d828:	9008d43a 	srli	r4,r18,16
    d82c:	8520983a 	sll	r16,r16,r20
    d830:	300c943a 	slli	r6,r6,16
    d834:	3106b03a 	or	r3,r6,r4
    d838:	1880042e 	bgeu	r3,r2,d84c <__umoddi3+0x388>
    d83c:	1d87883a 	add	r3,r3,r22
    d840:	e13fffc4 	addi	r4,fp,-1
    d844:	1d809a2e 	bgeu	r3,r22,dab0 <__umoddi3+0x5ec>
    d848:	2039883a 	mov	fp,r4
    d84c:	1887c83a 	sub	r3,r3,r2
    d850:	1809883a 	mov	r4,r3
    d854:	b80b883a 	mov	r5,r23
    d858:	d8c00115 	stw	r3,4(sp)
    d85c:	00039140 	call	3914 <__umodsi3>
    d860:	d8c00117 	ldw	r3,4(sp)
    d864:	b80b883a 	mov	r5,r23
    d868:	d8800015 	stw	r2,0(sp)
    d86c:	1809883a 	mov	r4,r3
    d870:	000390c0 	call	390c <__udivsi3>
    d874:	880b883a 	mov	r5,r17
    d878:	1009883a 	mov	r4,r2
    d87c:	102f883a 	mov	r23,r2
    d880:	000dae00 	call	dae0 <__mulsi3>
    d884:	d9800017 	ldw	r6,0(sp)
    d888:	947fffcc 	andi	r17,r18,65535
    d88c:	300c943a 	slli	r6,r6,16
    d890:	3464b03a 	or	r18,r6,r17
    d894:	9080042e 	bgeu	r18,r2,d8a8 <__umoddi3+0x3e4>
    d898:	95a5883a 	add	r18,r18,r22
    d89c:	b8ffffc4 	addi	r3,r23,-1
    d8a0:	95807f2e 	bgeu	r18,r22,daa0 <__umoddi3+0x5dc>
    d8a4:	182f883a 	mov	r23,r3
    d8a8:	e038943a 	slli	fp,fp,16
    d8ac:	980cd43a 	srli	r6,r19,16
    d8b0:	98ffffcc 	andi	r3,r19,65535
    d8b4:	bf38b03a 	or	fp,r23,fp
    d8b8:	e02ed43a 	srli	r23,fp,16
    d8bc:	e73fffcc 	andi	fp,fp,65535
    d8c0:	180b883a 	mov	r5,r3
    d8c4:	e009883a 	mov	r4,fp
    d8c8:	d9800015 	stw	r6,0(sp)
    d8cc:	d8c00115 	stw	r3,4(sp)
    d8d0:	90a5c83a 	sub	r18,r18,r2
    d8d4:	000dae00 	call	dae0 <__mulsi3>
    d8d8:	d8c00117 	ldw	r3,4(sp)
    d8dc:	b809883a 	mov	r4,r23
    d8e0:	1023883a 	mov	r17,r2
    d8e4:	180b883a 	mov	r5,r3
    d8e8:	000dae00 	call	dae0 <__mulsi3>
    d8ec:	d9800017 	ldw	r6,0(sp)
    d8f0:	b809883a 	mov	r4,r23
    d8f4:	d8800115 	stw	r2,4(sp)
    d8f8:	300b883a 	mov	r5,r6
    d8fc:	302f883a 	mov	r23,r6
    d900:	000dae00 	call	dae0 <__mulsi3>
    d904:	e009883a 	mov	r4,fp
    d908:	b80b883a 	mov	r5,r23
    d90c:	d8800015 	stw	r2,0(sp)
    d910:	000dae00 	call	dae0 <__mulsi3>
    d914:	d8c00117 	ldw	r3,4(sp)
    d918:	880cd43a 	srli	r6,r17,16
    d91c:	d9c00017 	ldw	r7,0(sp)
    d920:	1885883a 	add	r2,r3,r2
    d924:	118d883a 	add	r6,r2,r6
    d928:	30c0022e 	bgeu	r6,r3,d934 <__umoddi3+0x470>
    d92c:	00800074 	movhi	r2,1
    d930:	388f883a 	add	r7,r7,r2
    d934:	3006d43a 	srli	r3,r6,16
    d938:	300c943a 	slli	r6,r6,16
    d93c:	8c7fffcc 	andi	r17,r17,65535
    d940:	38c7883a 	add	r3,r7,r3
    d944:	3463883a 	add	r17,r6,r17
    d948:	90c03d36 	bltu	r18,r3,da40 <__umoddi3+0x57c>
    d94c:	90c06026 	beq	r18,r3,dad0 <__umoddi3+0x60c>
    d950:	90c9c83a 	sub	r4,r18,r3
    d954:	880f883a 	mov	r7,r17
    d958:	81cfc83a 	sub	r7,r16,r7
    d95c:	81c7803a 	cmpltu	r3,r16,r7
    d960:	20c7c83a 	sub	r3,r4,r3
    d964:	1d44983a 	sll	r2,r3,r21
    d968:	3d0ed83a 	srl	r7,r7,r20
    d96c:	1d06d83a 	srl	r3,r3,r20
    d970:	11c4b03a 	or	r2,r2,r7
    d974:	003f7a06 	br	d760 <__alt_data_end+0xfffb8030>
    d978:	0025883a 	mov	r18,zero
    d97c:	003ef806 	br	d560 <__alt_data_end+0xfffb7e30>
    d980:	98a6983a 	sll	r19,r19,r2
    d984:	88e8d83a 	srl	r20,r17,r3
    d988:	80c6d83a 	srl	r3,r16,r3
    d98c:	982ad43a 	srli	r21,r19,16
    d990:	88a2983a 	sll	r17,r17,r2
    d994:	a009883a 	mov	r4,r20
    d998:	a80b883a 	mov	r5,r21
    d99c:	88eeb03a 	or	r23,r17,r3
    d9a0:	1025883a 	mov	r18,r2
    d9a4:	00039140 	call	3914 <__umodsi3>
    d9a8:	a009883a 	mov	r4,r20
    d9ac:	a80b883a 	mov	r5,r21
    d9b0:	1023883a 	mov	r17,r2
    d9b4:	9dbfffcc 	andi	r22,r19,65535
    d9b8:	000390c0 	call	390c <__udivsi3>
    d9bc:	1009883a 	mov	r4,r2
    d9c0:	b00b883a 	mov	r5,r22
    d9c4:	000dae00 	call	dae0 <__mulsi3>
    d9c8:	8822943a 	slli	r17,r17,16
    d9cc:	b808d43a 	srli	r4,r23,16
    d9d0:	84a8983a 	sll	r20,r16,r18
    d9d4:	8906b03a 	or	r3,r17,r4
    d9d8:	1880042e 	bgeu	r3,r2,d9ec <__umoddi3+0x528>
    d9dc:	1cc7883a 	add	r3,r3,r19
    d9e0:	1cc00236 	bltu	r3,r19,d9ec <__umoddi3+0x528>
    d9e4:	1880012e 	bgeu	r3,r2,d9ec <__umoddi3+0x528>
    d9e8:	1cc7883a 	add	r3,r3,r19
    d9ec:	18a1c83a 	sub	r16,r3,r2
    d9f0:	8009883a 	mov	r4,r16
    d9f4:	a80b883a 	mov	r5,r21
    d9f8:	00039140 	call	3914 <__umodsi3>
    d9fc:	8009883a 	mov	r4,r16
    da00:	a80b883a 	mov	r5,r21
    da04:	1039883a 	mov	fp,r2
    da08:	000390c0 	call	390c <__udivsi3>
    da0c:	1009883a 	mov	r4,r2
    da10:	b00b883a 	mov	r5,r22
    da14:	000dae00 	call	dae0 <__mulsi3>
    da18:	e006943a 	slli	r3,fp,16
    da1c:	b93fffcc 	andi	r4,r23,65535
    da20:	1906b03a 	or	r3,r3,r4
    da24:	1880042e 	bgeu	r3,r2,da38 <__umoddi3+0x574>
    da28:	1cc7883a 	add	r3,r3,r19
    da2c:	1cc00236 	bltu	r3,r19,da38 <__umoddi3+0x574>
    da30:	1880012e 	bgeu	r3,r2,da38 <__umoddi3+0x574>
    da34:	1cc7883a 	add	r3,r3,r19
    da38:	18a3c83a 	sub	r17,r3,r2
    da3c:	003f1e06 	br	d6b8 <__alt_data_end+0xfffb7f88>
    da40:	8ccfc83a 	sub	r7,r17,r19
    da44:	1d89c83a 	sub	r4,r3,r22
    da48:	89e3803a 	cmpltu	r17,r17,r7
    da4c:	2463c83a 	sub	r17,r4,r17
    da50:	9449c83a 	sub	r4,r18,r17
    da54:	003fc006 	br	d958 <__alt_data_end+0xfffb8228>
    da58:	000b883a 	mov	r5,zero
    da5c:	002b883a 	mov	r21,zero
    da60:	003eeb06 	br	d610 <__alt_data_end+0xfffb7ee0>
    da64:	01400404 	movi	r5,16
    da68:	282b883a 	mov	r21,r5
    da6c:	003ee806 	br	d610 <__alt_data_end+0xfffb7ee0>
    da70:	01400404 	movi	r5,16
    da74:	2805883a 	mov	r2,r5
    da78:	003eaa06 	br	d524 <__alt_data_end+0xfffb7df4>
    da7c:	0005883a 	mov	r2,zero
    da80:	0007883a 	mov	r3,zero
    da84:	003eff06 	br	d684 <__alt_data_end+0xfffb7f54>
    da88:	00800404 	movi	r2,16
    da8c:	1007883a 	mov	r3,r2
    da90:	003efc06 	br	d684 <__alt_data_end+0xfffb7f54>
    da94:	000b883a 	mov	r5,zero
    da98:	0005883a 	mov	r2,zero
    da9c:	003ea106 	br	d524 <__alt_data_end+0xfffb7df4>
    daa0:	90bf802e 	bgeu	r18,r2,d8a4 <__alt_data_end+0xfffb8174>
    daa4:	bdffff84 	addi	r23,r23,-2
    daa8:	95a5883a 	add	r18,r18,r22
    daac:	003f7e06 	br	d8a8 <__alt_data_end+0xfffb8178>
    dab0:	18bf652e 	bgeu	r3,r2,d848 <__alt_data_end+0xfffb8118>
    dab4:	e73fff84 	addi	fp,fp,-2
    dab8:	1d87883a 	add	r3,r3,r22
    dabc:	003f6306 	br	d84c <__alt_data_end+0xfffb811c>
    dac0:	1cc7883a 	add	r3,r3,r19
    dac4:	003f0d06 	br	d6fc <__alt_data_end+0xfffb7fcc>
    dac8:	8005883a 	mov	r2,r16
    dacc:	003edf06 	br	d64c <__alt_data_end+0xfffb7f1c>
    dad0:	847fdb36 	bltu	r16,r17,da40 <__alt_data_end+0xfffb8310>
    dad4:	880f883a 	mov	r7,r17
    dad8:	0009883a 	mov	r4,zero
    dadc:	003f9e06 	br	d958 <__alt_data_end+0xfffb8228>

0000dae0 <__mulsi3>:
    dae0:	0005883a 	mov	r2,zero
    dae4:	20000726 	beq	r4,zero,db04 <__mulsi3+0x24>
    dae8:	20c0004c 	andi	r3,r4,1
    daec:	2008d07a 	srli	r4,r4,1
    daf0:	18000126 	beq	r3,zero,daf8 <__mulsi3+0x18>
    daf4:	1145883a 	add	r2,r2,r5
    daf8:	294b883a 	add	r5,r5,r5
    dafc:	203ffa1e 	bne	r4,zero,dae8 <__alt_data_end+0xfffb83b8>
    db00:	f800283a 	ret
    db04:	f800283a 	ret

0000db08 <__adddf3>:
    db08:	02000434 	movhi	r8,16
    db0c:	423fffc4 	addi	r8,r8,-1
    db10:	defffb04 	addi	sp,sp,-20
    db14:	2a12703a 	and	r9,r5,r8
    db18:	2806d7fa 	srli	r3,r5,31
    db1c:	3a10703a 	and	r8,r7,r8
    db20:	3804d53a 	srli	r2,r7,20
    db24:	3014d77a 	srli	r10,r6,29
    db28:	dc000015 	stw	r16,0(sp)
    db2c:	481290fa 	slli	r9,r9,3
    db30:	2820d53a 	srli	r16,r5,20
    db34:	401090fa 	slli	r8,r8,3
    db38:	200ad77a 	srli	r5,r4,29
    db3c:	380ed7fa 	srli	r7,r7,31
    db40:	dc800215 	stw	r18,8(sp)
    db44:	dc400115 	stw	r17,4(sp)
    db48:	dfc00415 	stw	ra,16(sp)
    db4c:	dcc00315 	stw	r19,12(sp)
    db50:	1c803fcc 	andi	r18,r3,255
    db54:	8401ffcc 	andi	r16,r16,2047
    db58:	494ab03a 	or	r5,r9,r5
    db5c:	202290fa 	slli	r17,r4,3
    db60:	1081ffcc 	andi	r2,r2,2047
    db64:	4290b03a 	or	r8,r8,r10
    db68:	300c90fa 	slli	r6,r6,3
    db6c:	91c07026 	beq	r18,r7,dd30 <__adddf3+0x228>
    db70:	8087c83a 	sub	r3,r16,r2
    db74:	00c0b30e 	bge	zero,r3,de44 <__adddf3+0x33c>
    db78:	10002a1e 	bne	r2,zero,dc24 <__adddf3+0x11c>
    db7c:	4184b03a 	or	r2,r8,r6
    db80:	1000991e 	bne	r2,zero,dde8 <__adddf3+0x2e0>
    db84:	888001cc 	andi	r2,r17,7
    db88:	10005b26 	beq	r2,zero,dcf8 <__adddf3+0x1f0>
    db8c:	88c003cc 	andi	r3,r17,15
    db90:	00800104 	movi	r2,4
    db94:	18805826 	beq	r3,r2,dcf8 <__adddf3+0x1f0>
    db98:	89800104 	addi	r6,r17,4
    db9c:	3463803a 	cmpltu	r17,r6,r17
    dba0:	2c4b883a 	add	r5,r5,r17
    dba4:	2880202c 	andhi	r2,r5,128
    dba8:	9007883a 	mov	r3,r18
    dbac:	3023883a 	mov	r17,r6
    dbb0:	10005426 	beq	r2,zero,dd04 <__adddf3+0x1fc>
    dbb4:	84000044 	addi	r16,r16,1
    dbb8:	0081ffc4 	movi	r2,2047
    dbbc:	8080c126 	beq	r16,r2,dec4 <__adddf3+0x3bc>
    dbc0:	013fe034 	movhi	r4,65408
    dbc4:	213fffc4 	addi	r4,r4,-1
    dbc8:	290a703a 	and	r5,r5,r4
    dbcc:	2804977a 	slli	r2,r5,29
    dbd0:	280a927a 	slli	r5,r5,9
    dbd4:	8822d0fa 	srli	r17,r17,3
    dbd8:	8401ffcc 	andi	r16,r16,2047
    dbdc:	2808d33a 	srli	r4,r5,12
    dbe0:	1444b03a 	or	r2,r2,r17
    dbe4:	8401ffcc 	andi	r16,r16,2047
    dbe8:	800a953a 	slli	r5,r16,20
    dbec:	18c03fcc 	andi	r3,r3,255
    dbf0:	04000434 	movhi	r16,16
    dbf4:	180697fa 	slli	r3,r3,31
    dbf8:	843fffc4 	addi	r16,r16,-1
    dbfc:	2420703a 	and	r16,r4,r16
    dc00:	8160b03a 	or	r16,r16,r5
    dc04:	80c6b03a 	or	r3,r16,r3
    dc08:	dfc00417 	ldw	ra,16(sp)
    dc0c:	dcc00317 	ldw	r19,12(sp)
    dc10:	dc800217 	ldw	r18,8(sp)
    dc14:	dc400117 	ldw	r17,4(sp)
    dc18:	dc000017 	ldw	r16,0(sp)
    dc1c:	dec00504 	addi	sp,sp,20
    dc20:	f800283a 	ret
    dc24:	0081ffc4 	movi	r2,2047
    dc28:	80bfd626 	beq	r16,r2,db84 <__alt_data_end+0xfffb8454>
    dc2c:	42002034 	orhi	r8,r8,128
    dc30:	00800e04 	movi	r2,56
    dc34:	10c0a616 	blt	r2,r3,ded0 <__adddf3+0x3c8>
    dc38:	008007c4 	movi	r2,31
    dc3c:	10c0c916 	blt	r2,r3,df64 <__adddf3+0x45c>
    dc40:	00800804 	movi	r2,32
    dc44:	10c5c83a 	sub	r2,r2,r3
    dc48:	408e983a 	sll	r7,r8,r2
    dc4c:	30c8d83a 	srl	r4,r6,r3
    dc50:	3084983a 	sll	r2,r6,r2
    dc54:	40c6d83a 	srl	r3,r8,r3
    dc58:	390cb03a 	or	r6,r7,r4
    dc5c:	1004c03a 	cmpne	r2,r2,zero
    dc60:	308cb03a 	or	r6,r6,r2
    dc64:	898dc83a 	sub	r6,r17,r6
    dc68:	89a3803a 	cmpltu	r17,r17,r6
    dc6c:	28cbc83a 	sub	r5,r5,r3
    dc70:	2c4bc83a 	sub	r5,r5,r17
    dc74:	3023883a 	mov	r17,r6
    dc78:	2880202c 	andhi	r2,r5,128
    dc7c:	10006d26 	beq	r2,zero,de34 <__adddf3+0x32c>
    dc80:	04c02034 	movhi	r19,128
    dc84:	9cffffc4 	addi	r19,r19,-1
    dc88:	2ce6703a 	and	r19,r5,r19
    dc8c:	98007e26 	beq	r19,zero,de88 <__adddf3+0x380>
    dc90:	9809883a 	mov	r4,r19
    dc94:	00102a00 	call	102a0 <__clzsi2>
    dc98:	10fffe04 	addi	r3,r2,-8
    dc9c:	010007c4 	movi	r4,31
    dca0:	20c07f16 	blt	r4,r3,dea0 <__adddf3+0x398>
    dca4:	01400a04 	movi	r5,40
    dca8:	2885c83a 	sub	r2,r5,r2
    dcac:	888ad83a 	srl	r5,r17,r2
    dcb0:	98e6983a 	sll	r19,r19,r3
    dcb4:	88e2983a 	sll	r17,r17,r3
    dcb8:	2ce6b03a 	or	r19,r5,r19
    dcbc:	1c007c16 	blt	r3,r16,deb0 <__adddf3+0x3a8>
    dcc0:	1c21c83a 	sub	r16,r3,r16
    dcc4:	81400044 	addi	r5,r16,1
    dcc8:	00c007c4 	movi	r3,31
    dccc:	19409816 	blt	r3,r5,df30 <__adddf3+0x428>
    dcd0:	1c21c83a 	sub	r16,r3,r16
    dcd4:	8c08983a 	sll	r4,r17,r16
    dcd8:	8946d83a 	srl	r3,r17,r5
    dcdc:	9c20983a 	sll	r16,r19,r16
    dce0:	2008c03a 	cmpne	r4,r4,zero
    dce4:	994ad83a 	srl	r5,r19,r5
    dce8:	1c06b03a 	or	r3,r3,r16
    dcec:	1922b03a 	or	r17,r3,r4
    dcf0:	0021883a 	mov	r16,zero
    dcf4:	003fa306 	br	db84 <__alt_data_end+0xfffb8454>
    dcf8:	2880202c 	andhi	r2,r5,128
    dcfc:	9007883a 	mov	r3,r18
    dd00:	103fac1e 	bne	r2,zero,dbb4 <__alt_data_end+0xfffb8484>
    dd04:	2804977a 	slli	r2,r5,29
    dd08:	8822d0fa 	srli	r17,r17,3
    dd0c:	0101ffc4 	movi	r4,2047
    dd10:	280ad0fa 	srli	r5,r5,3
    dd14:	1444b03a 	or	r2,r2,r17
    dd18:	81002c26 	beq	r16,r4,ddcc <__adddf3+0x2c4>
    dd1c:	8120703a 	and	r16,r16,r4
    dd20:	01000434 	movhi	r4,16
    dd24:	213fffc4 	addi	r4,r4,-1
    dd28:	2908703a 	and	r4,r5,r4
    dd2c:	003fad06 	br	dbe4 <__alt_data_end+0xfffb84b4>
    dd30:	8089c83a 	sub	r4,r16,r2
    dd34:	01006a0e 	bge	zero,r4,dee0 <__adddf3+0x3d8>
    dd38:	10003326 	beq	r2,zero,de08 <__adddf3+0x300>
    dd3c:	0081ffc4 	movi	r2,2047
    dd40:	80bf9026 	beq	r16,r2,db84 <__alt_data_end+0xfffb8454>
    dd44:	42002034 	orhi	r8,r8,128
    dd48:	00800e04 	movi	r2,56
    dd4c:	1100b116 	blt	r2,r4,e014 <__adddf3+0x50c>
    dd50:	008007c4 	movi	r2,31
    dd54:	1100e216 	blt	r2,r4,e0e0 <__adddf3+0x5d8>
    dd58:	00800804 	movi	r2,32
    dd5c:	1105c83a 	sub	r2,r2,r4
    dd60:	4092983a 	sll	r9,r8,r2
    dd64:	310ed83a 	srl	r7,r6,r4
    dd68:	3084983a 	sll	r2,r6,r2
    dd6c:	4110d83a 	srl	r8,r8,r4
    dd70:	49ccb03a 	or	r6,r9,r7
    dd74:	1004c03a 	cmpne	r2,r2,zero
    dd78:	308cb03a 	or	r6,r6,r2
    dd7c:	344d883a 	add	r6,r6,r17
    dd80:	3463803a 	cmpltu	r17,r6,r17
    dd84:	414b883a 	add	r5,r8,r5
    dd88:	2c4b883a 	add	r5,r5,r17
    dd8c:	3023883a 	mov	r17,r6
    dd90:	2880202c 	andhi	r2,r5,128
    dd94:	10002726 	beq	r2,zero,de34 <__adddf3+0x32c>
    dd98:	84000044 	addi	r16,r16,1
    dd9c:	0081ffc4 	movi	r2,2047
    dda0:	8080ae26 	beq	r16,r2,e05c <__adddf3+0x554>
    dda4:	00bfe034 	movhi	r2,65408
    dda8:	10bfffc4 	addi	r2,r2,-1
    ddac:	288a703a 	and	r5,r5,r2
    ddb0:	880cd07a 	srli	r6,r17,1
    ddb4:	280897fa 	slli	r4,r5,31
    ddb8:	88c0004c 	andi	r3,r17,1
    ddbc:	30e2b03a 	or	r17,r6,r3
    ddc0:	280ad07a 	srli	r5,r5,1
    ddc4:	8922b03a 	or	r17,r17,r4
    ddc8:	003f6e06 	br	db84 <__alt_data_end+0xfffb8454>
    ddcc:	1148b03a 	or	r4,r2,r5
    ddd0:	20003c26 	beq	r4,zero,dec4 <__adddf3+0x3bc>
    ddd4:	29000234 	orhi	r4,r5,8
    ddd8:	01400434 	movhi	r5,16
    dddc:	297fffc4 	addi	r5,r5,-1
    dde0:	2148703a 	and	r4,r4,r5
    dde4:	003f7f06 	br	dbe4 <__alt_data_end+0xfffb84b4>
    dde8:	18ffffc4 	addi	r3,r3,-1
    ddec:	18004d1e 	bne	r3,zero,df24 <__adddf3+0x41c>
    ddf0:	898dc83a 	sub	r6,r17,r6
    ddf4:	89a3803a 	cmpltu	r17,r17,r6
    ddf8:	2a0bc83a 	sub	r5,r5,r8
    ddfc:	2c4bc83a 	sub	r5,r5,r17
    de00:	3023883a 	mov	r17,r6
    de04:	003f9c06 	br	dc78 <__alt_data_end+0xfffb8548>
    de08:	4184b03a 	or	r2,r8,r6
    de0c:	103f5d26 	beq	r2,zero,db84 <__alt_data_end+0xfffb8454>
    de10:	213fffc4 	addi	r4,r4,-1
    de14:	203fd926 	beq	r4,zero,dd7c <__alt_data_end+0xfffb864c>
    de18:	0081ffc4 	movi	r2,2047
    de1c:	80bfca1e 	bne	r16,r2,dd48 <__alt_data_end+0xfffb8618>
    de20:	003f5806 	br	db84 <__alt_data_end+0xfffb8454>
    de24:	10c8b03a 	or	r4,r2,r3
    de28:	20008b26 	beq	r4,zero,e058 <__adddf3+0x550>
    de2c:	100b883a 	mov	r5,r2
    de30:	1823883a 	mov	r17,r3
    de34:	888001cc 	andi	r2,r17,7
    de38:	103f541e 	bne	r2,zero,db8c <__alt_data_end+0xfffb845c>
    de3c:	9007883a 	mov	r3,r18
    de40:	003fb006 	br	dd04 <__alt_data_end+0xfffb85d4>
    de44:	1800531e 	bne	r3,zero,df94 <__adddf3+0x48c>
    de48:	80800044 	addi	r2,r16,1
    de4c:	1081ffcc 	andi	r2,r2,2047
    de50:	00c00044 	movi	r3,1
    de54:	1880990e 	bge	r3,r2,e0bc <__adddf3+0x5b4>
    de58:	8985c83a 	sub	r2,r17,r6
    de5c:	8887803a 	cmpltu	r3,r17,r2
    de60:	2a27c83a 	sub	r19,r5,r8
    de64:	98e7c83a 	sub	r19,r19,r3
    de68:	98c0202c 	andhi	r3,r19,128
    de6c:	18006226 	beq	r3,zero,dff8 <__adddf3+0x4f0>
    de70:	3463c83a 	sub	r17,r6,r17
    de74:	4151c83a 	sub	r8,r8,r5
    de78:	344d803a 	cmpltu	r6,r6,r17
    de7c:	41a7c83a 	sub	r19,r8,r6
    de80:	3825883a 	mov	r18,r7
    de84:	983f821e 	bne	r19,zero,dc90 <__alt_data_end+0xfffb8560>
    de88:	8809883a 	mov	r4,r17
    de8c:	00102a00 	call	102a0 <__clzsi2>
    de90:	10800804 	addi	r2,r2,32
    de94:	10fffe04 	addi	r3,r2,-8
    de98:	010007c4 	movi	r4,31
    de9c:	20ff810e 	bge	r4,r3,dca4 <__alt_data_end+0xfffb8574>
    dea0:	14fff604 	addi	r19,r2,-40
    dea4:	8ce6983a 	sll	r19,r17,r19
    dea8:	0023883a 	mov	r17,zero
    deac:	1c3f840e 	bge	r3,r16,dcc0 <__alt_data_end+0xfffb8590>
    deb0:	017fe034 	movhi	r5,65408
    deb4:	297fffc4 	addi	r5,r5,-1
    deb8:	80e1c83a 	sub	r16,r16,r3
    debc:	994a703a 	and	r5,r19,r5
    dec0:	003f3006 	br	db84 <__alt_data_end+0xfffb8454>
    dec4:	0009883a 	mov	r4,zero
    dec8:	0005883a 	mov	r2,zero
    decc:	003f4506 	br	dbe4 <__alt_data_end+0xfffb84b4>
    ded0:	418cb03a 	or	r6,r8,r6
    ded4:	300cc03a 	cmpne	r6,r6,zero
    ded8:	0007883a 	mov	r3,zero
    dedc:	003f6106 	br	dc64 <__alt_data_end+0xfffb8534>
    dee0:	2000921e 	bne	r4,zero,e12c <__adddf3+0x624>
    dee4:	80800044 	addi	r2,r16,1
    dee8:	11c1ffcc 	andi	r7,r2,2047
    deec:	01000044 	movi	r4,1
    def0:	21c0610e 	bge	r4,r7,e078 <__adddf3+0x570>
    def4:	0101ffc4 	movi	r4,2047
    def8:	1100a326 	beq	r2,r4,e188 <__adddf3+0x680>
    defc:	344d883a 	add	r6,r6,r17
    df00:	3463803a 	cmpltu	r17,r6,r17
    df04:	414b883a 	add	r5,r8,r5
    df08:	2c4b883a 	add	r5,r5,r17
    df0c:	282297fa 	slli	r17,r5,31
    df10:	300cd07a 	srli	r6,r6,1
    df14:	280ad07a 	srli	r5,r5,1
    df18:	1021883a 	mov	r16,r2
    df1c:	89a2b03a 	or	r17,r17,r6
    df20:	003f1806 	br	db84 <__alt_data_end+0xfffb8454>
    df24:	0081ffc4 	movi	r2,2047
    df28:	80bf411e 	bne	r16,r2,dc30 <__alt_data_end+0xfffb8500>
    df2c:	003f1506 	br	db84 <__alt_data_end+0xfffb8454>
    df30:	80bff844 	addi	r2,r16,-31
    df34:	00c00804 	movi	r3,32
    df38:	9884d83a 	srl	r2,r19,r2
    df3c:	28c04a26 	beq	r5,r3,e068 <__adddf3+0x560>
    df40:	00c00fc4 	movi	r3,63
    df44:	1c21c83a 	sub	r16,r3,r16
    df48:	9c26983a 	sll	r19,r19,r16
    df4c:	9c62b03a 	or	r17,r19,r17
    df50:	8822c03a 	cmpne	r17,r17,zero
    df54:	88a2b03a 	or	r17,r17,r2
    df58:	000b883a 	mov	r5,zero
    df5c:	0021883a 	mov	r16,zero
    df60:	003fb406 	br	de34 <__alt_data_end+0xfffb8704>
    df64:	18bff804 	addi	r2,r3,-32
    df68:	01000804 	movi	r4,32
    df6c:	4084d83a 	srl	r2,r8,r2
    df70:	19003f26 	beq	r3,r4,e070 <__adddf3+0x568>
    df74:	01001004 	movi	r4,64
    df78:	20c7c83a 	sub	r3,r4,r3
    df7c:	40d0983a 	sll	r8,r8,r3
    df80:	418cb03a 	or	r6,r8,r6
    df84:	300cc03a 	cmpne	r6,r6,zero
    df88:	308cb03a 	or	r6,r6,r2
    df8c:	0007883a 	mov	r3,zero
    df90:	003f3406 	br	dc64 <__alt_data_end+0xfffb8534>
    df94:	80002326 	beq	r16,zero,e024 <__adddf3+0x51c>
    df98:	0101ffc4 	movi	r4,2047
    df9c:	11005e26 	beq	r2,r4,e118 <__adddf3+0x610>
    dfa0:	00c7c83a 	sub	r3,zero,r3
    dfa4:	29402034 	orhi	r5,r5,128
    dfa8:	01000e04 	movi	r4,56
    dfac:	20c07216 	blt	r4,r3,e178 <__adddf3+0x670>
    dfb0:	010007c4 	movi	r4,31
    dfb4:	20c0ce16 	blt	r4,r3,e2f0 <__adddf3+0x7e8>
    dfb8:	01000804 	movi	r4,32
    dfbc:	20c9c83a 	sub	r4,r4,r3
    dfc0:	2914983a 	sll	r10,r5,r4
    dfc4:	88d2d83a 	srl	r9,r17,r3
    dfc8:	8908983a 	sll	r4,r17,r4
    dfcc:	28c6d83a 	srl	r3,r5,r3
    dfd0:	5262b03a 	or	r17,r10,r9
    dfd4:	2008c03a 	cmpne	r4,r4,zero
    dfd8:	8922b03a 	or	r17,r17,r4
    dfdc:	3463c83a 	sub	r17,r6,r17
    dfe0:	40c7c83a 	sub	r3,r8,r3
    dfe4:	344d803a 	cmpltu	r6,r6,r17
    dfe8:	198bc83a 	sub	r5,r3,r6
    dfec:	1021883a 	mov	r16,r2
    dff0:	3825883a 	mov	r18,r7
    dff4:	003f2006 	br	dc78 <__alt_data_end+0xfffb8548>
    dff8:	9886b03a 	or	r3,r19,r2
    dffc:	1800141e 	bne	r3,zero,e050 <__adddf3+0x548>
    e000:	0007883a 	mov	r3,zero
    e004:	000b883a 	mov	r5,zero
    e008:	0023883a 	mov	r17,zero
    e00c:	0021883a 	mov	r16,zero
    e010:	003f3c06 	br	dd04 <__alt_data_end+0xfffb85d4>
    e014:	418cb03a 	or	r6,r8,r6
    e018:	300cc03a 	cmpne	r6,r6,zero
    e01c:	0011883a 	mov	r8,zero
    e020:	003f5606 	br	dd7c <__alt_data_end+0xfffb864c>
    e024:	2c48b03a 	or	r4,r5,r17
    e028:	20003b26 	beq	r4,zero,e118 <__adddf3+0x610>
    e02c:	00c6303a 	nor	r3,zero,r3
    e030:	1800371e 	bne	r3,zero,e110 <__adddf3+0x608>
    e034:	3463c83a 	sub	r17,r6,r17
    e038:	414bc83a 	sub	r5,r8,r5
    e03c:	344d803a 	cmpltu	r6,r6,r17
    e040:	298bc83a 	sub	r5,r5,r6
    e044:	1021883a 	mov	r16,r2
    e048:	3825883a 	mov	r18,r7
    e04c:	003f0a06 	br	dc78 <__alt_data_end+0xfffb8548>
    e050:	1023883a 	mov	r17,r2
    e054:	003f0d06 	br	dc8c <__alt_data_end+0xfffb855c>
    e058:	0007883a 	mov	r3,zero
    e05c:	000b883a 	mov	r5,zero
    e060:	0023883a 	mov	r17,zero
    e064:	003f2706 	br	dd04 <__alt_data_end+0xfffb85d4>
    e068:	0027883a 	mov	r19,zero
    e06c:	003fb706 	br	df4c <__alt_data_end+0xfffb881c>
    e070:	0011883a 	mov	r8,zero
    e074:	003fc206 	br	df80 <__alt_data_end+0xfffb8850>
    e078:	2c44b03a 	or	r2,r5,r17
    e07c:	8000871e 	bne	r16,zero,e29c <__adddf3+0x794>
    e080:	1000b126 	beq	r2,zero,e348 <__adddf3+0x840>
    e084:	4184b03a 	or	r2,r8,r6
    e088:	103ebe26 	beq	r2,zero,db84 <__alt_data_end+0xfffb8454>
    e08c:	3445883a 	add	r2,r6,r17
    e090:	1463803a 	cmpltu	r17,r2,r17
    e094:	414b883a 	add	r5,r8,r5
    e098:	2c4b883a 	add	r5,r5,r17
    e09c:	28c0202c 	andhi	r3,r5,128
    e0a0:	1023883a 	mov	r17,r2
    e0a4:	183f6326 	beq	r3,zero,de34 <__alt_data_end+0xfffb8704>
    e0a8:	00bfe034 	movhi	r2,65408
    e0ac:	10bfffc4 	addi	r2,r2,-1
    e0b0:	2021883a 	mov	r16,r4
    e0b4:	288a703a 	and	r5,r5,r2
    e0b8:	003eb206 	br	db84 <__alt_data_end+0xfffb8454>
    e0bc:	2c44b03a 	or	r2,r5,r17
    e0c0:	8000251e 	bne	r16,zero,e158 <__adddf3+0x650>
    e0c4:	10004b1e 	bne	r2,zero,e1f4 <__adddf3+0x6ec>
    e0c8:	4184b03a 	or	r2,r8,r6
    e0cc:	103fe226 	beq	r2,zero,e058 <__alt_data_end+0xfffb8928>
    e0d0:	400b883a 	mov	r5,r8
    e0d4:	3023883a 	mov	r17,r6
    e0d8:	3825883a 	mov	r18,r7
    e0dc:	003ea906 	br	db84 <__alt_data_end+0xfffb8454>
    e0e0:	20bff804 	addi	r2,r4,-32
    e0e4:	01c00804 	movi	r7,32
    e0e8:	4084d83a 	srl	r2,r8,r2
    e0ec:	21c07e26 	beq	r4,r7,e2e8 <__adddf3+0x7e0>
    e0f0:	01c01004 	movi	r7,64
    e0f4:	3909c83a 	sub	r4,r7,r4
    e0f8:	4110983a 	sll	r8,r8,r4
    e0fc:	418cb03a 	or	r6,r8,r6
    e100:	300cc03a 	cmpne	r6,r6,zero
    e104:	308cb03a 	or	r6,r6,r2
    e108:	0011883a 	mov	r8,zero
    e10c:	003f1b06 	br	dd7c <__alt_data_end+0xfffb864c>
    e110:	0101ffc4 	movi	r4,2047
    e114:	113fa41e 	bne	r2,r4,dfa8 <__alt_data_end+0xfffb8878>
    e118:	400b883a 	mov	r5,r8
    e11c:	3023883a 	mov	r17,r6
    e120:	1021883a 	mov	r16,r2
    e124:	3825883a 	mov	r18,r7
    e128:	003e9606 	br	db84 <__alt_data_end+0xfffb8454>
    e12c:	80001a1e 	bne	r16,zero,e198 <__adddf3+0x690>
    e130:	2c4eb03a 	or	r7,r5,r17
    e134:	38005526 	beq	r7,zero,e28c <__adddf3+0x784>
    e138:	0108303a 	nor	r4,zero,r4
    e13c:	2000511e 	bne	r4,zero,e284 <__adddf3+0x77c>
    e140:	89a3883a 	add	r17,r17,r6
    e144:	414b883a 	add	r5,r8,r5
    e148:	898d803a 	cmpltu	r6,r17,r6
    e14c:	298b883a 	add	r5,r5,r6
    e150:	1021883a 	mov	r16,r2
    e154:	003f0e06 	br	dd90 <__alt_data_end+0xfffb8660>
    e158:	1000341e 	bne	r2,zero,e22c <__adddf3+0x724>
    e15c:	4184b03a 	or	r2,r8,r6
    e160:	10006f26 	beq	r2,zero,e320 <__adddf3+0x818>
    e164:	400b883a 	mov	r5,r8
    e168:	3023883a 	mov	r17,r6
    e16c:	3825883a 	mov	r18,r7
    e170:	0401ffc4 	movi	r16,2047
    e174:	003e8306 	br	db84 <__alt_data_end+0xfffb8454>
    e178:	2c62b03a 	or	r17,r5,r17
    e17c:	8822c03a 	cmpne	r17,r17,zero
    e180:	0007883a 	mov	r3,zero
    e184:	003f9506 	br	dfdc <__alt_data_end+0xfffb88ac>
    e188:	1021883a 	mov	r16,r2
    e18c:	000b883a 	mov	r5,zero
    e190:	0023883a 	mov	r17,zero
    e194:	003edb06 	br	dd04 <__alt_data_end+0xfffb85d4>
    e198:	01c1ffc4 	movi	r7,2047
    e19c:	11c03b26 	beq	r2,r7,e28c <__adddf3+0x784>
    e1a0:	0109c83a 	sub	r4,zero,r4
    e1a4:	29402034 	orhi	r5,r5,128
    e1a8:	01c00e04 	movi	r7,56
    e1ac:	39006216 	blt	r7,r4,e338 <__adddf3+0x830>
    e1b0:	01c007c4 	movi	r7,31
    e1b4:	39006b16 	blt	r7,r4,e364 <__adddf3+0x85c>
    e1b8:	01c00804 	movi	r7,32
    e1bc:	390fc83a 	sub	r7,r7,r4
    e1c0:	29d4983a 	sll	r10,r5,r7
    e1c4:	8912d83a 	srl	r9,r17,r4
    e1c8:	89ce983a 	sll	r7,r17,r7
    e1cc:	2908d83a 	srl	r4,r5,r4
    e1d0:	5262b03a 	or	r17,r10,r9
    e1d4:	380ac03a 	cmpne	r5,r7,zero
    e1d8:	8962b03a 	or	r17,r17,r5
    e1dc:	89a3883a 	add	r17,r17,r6
    e1e0:	2211883a 	add	r8,r4,r8
    e1e4:	898d803a 	cmpltu	r6,r17,r6
    e1e8:	418b883a 	add	r5,r8,r6
    e1ec:	1021883a 	mov	r16,r2
    e1f0:	003ee706 	br	dd90 <__alt_data_end+0xfffb8660>
    e1f4:	4184b03a 	or	r2,r8,r6
    e1f8:	103e6226 	beq	r2,zero,db84 <__alt_data_end+0xfffb8454>
    e1fc:	8987c83a 	sub	r3,r17,r6
    e200:	88c9803a 	cmpltu	r4,r17,r3
    e204:	2a05c83a 	sub	r2,r5,r8
    e208:	1105c83a 	sub	r2,r2,r4
    e20c:	1100202c 	andhi	r4,r2,128
    e210:	203f0426 	beq	r4,zero,de24 <__alt_data_end+0xfffb86f4>
    e214:	3463c83a 	sub	r17,r6,r17
    e218:	414bc83a 	sub	r5,r8,r5
    e21c:	344d803a 	cmpltu	r6,r6,r17
    e220:	298bc83a 	sub	r5,r5,r6
    e224:	3825883a 	mov	r18,r7
    e228:	003e5606 	br	db84 <__alt_data_end+0xfffb8454>
    e22c:	4184b03a 	or	r2,r8,r6
    e230:	10002b26 	beq	r2,zero,e2e0 <__adddf3+0x7d8>
    e234:	2804d0fa 	srli	r2,r5,3
    e238:	8822d0fa 	srli	r17,r17,3
    e23c:	280a977a 	slli	r5,r5,29
    e240:	10c0022c 	andhi	r3,r2,8
    e244:	2c62b03a 	or	r17,r5,r17
    e248:	18000826 	beq	r3,zero,e26c <__adddf3+0x764>
    e24c:	4008d0fa 	srli	r4,r8,3
    e250:	20c0022c 	andhi	r3,r4,8
    e254:	1800051e 	bne	r3,zero,e26c <__adddf3+0x764>
    e258:	300cd0fa 	srli	r6,r6,3
    e25c:	4010977a 	slli	r8,r8,29
    e260:	2005883a 	mov	r2,r4
    e264:	3825883a 	mov	r18,r7
    e268:	41a2b03a 	or	r17,r8,r6
    e26c:	880ad77a 	srli	r5,r17,29
    e270:	100490fa 	slli	r2,r2,3
    e274:	882290fa 	slli	r17,r17,3
    e278:	0401ffc4 	movi	r16,2047
    e27c:	288ab03a 	or	r5,r5,r2
    e280:	003e4006 	br	db84 <__alt_data_end+0xfffb8454>
    e284:	01c1ffc4 	movi	r7,2047
    e288:	11ffc71e 	bne	r2,r7,e1a8 <__alt_data_end+0xfffb8a78>
    e28c:	400b883a 	mov	r5,r8
    e290:	3023883a 	mov	r17,r6
    e294:	1021883a 	mov	r16,r2
    e298:	003e3a06 	br	db84 <__alt_data_end+0xfffb8454>
    e29c:	10002d26 	beq	r2,zero,e354 <__adddf3+0x84c>
    e2a0:	4184b03a 	or	r2,r8,r6
    e2a4:	10000e26 	beq	r2,zero,e2e0 <__adddf3+0x7d8>
    e2a8:	2804d0fa 	srli	r2,r5,3
    e2ac:	8822d0fa 	srli	r17,r17,3
    e2b0:	280a977a 	slli	r5,r5,29
    e2b4:	10c0022c 	andhi	r3,r2,8
    e2b8:	2c62b03a 	or	r17,r5,r17
    e2bc:	183feb26 	beq	r3,zero,e26c <__alt_data_end+0xfffb8b3c>
    e2c0:	4008d0fa 	srli	r4,r8,3
    e2c4:	20c0022c 	andhi	r3,r4,8
    e2c8:	183fe81e 	bne	r3,zero,e26c <__alt_data_end+0xfffb8b3c>
    e2cc:	300cd0fa 	srli	r6,r6,3
    e2d0:	4010977a 	slli	r8,r8,29
    e2d4:	2005883a 	mov	r2,r4
    e2d8:	41a2b03a 	or	r17,r8,r6
    e2dc:	003fe306 	br	e26c <__alt_data_end+0xfffb8b3c>
    e2e0:	0401ffc4 	movi	r16,2047
    e2e4:	003e2706 	br	db84 <__alt_data_end+0xfffb8454>
    e2e8:	0011883a 	mov	r8,zero
    e2ec:	003f8306 	br	e0fc <__alt_data_end+0xfffb89cc>
    e2f0:	193ff804 	addi	r4,r3,-32
    e2f4:	02400804 	movi	r9,32
    e2f8:	2908d83a 	srl	r4,r5,r4
    e2fc:	1a402526 	beq	r3,r9,e394 <__adddf3+0x88c>
    e300:	02401004 	movi	r9,64
    e304:	48c7c83a 	sub	r3,r9,r3
    e308:	28ca983a 	sll	r5,r5,r3
    e30c:	2c62b03a 	or	r17,r5,r17
    e310:	8822c03a 	cmpne	r17,r17,zero
    e314:	8922b03a 	or	r17,r17,r4
    e318:	0007883a 	mov	r3,zero
    e31c:	003f2f06 	br	dfdc <__alt_data_end+0xfffb88ac>
    e320:	01402034 	movhi	r5,128
    e324:	0007883a 	mov	r3,zero
    e328:	297fffc4 	addi	r5,r5,-1
    e32c:	047ffe04 	movi	r17,-8
    e330:	0401ffc4 	movi	r16,2047
    e334:	003e7306 	br	dd04 <__alt_data_end+0xfffb85d4>
    e338:	2c62b03a 	or	r17,r5,r17
    e33c:	8822c03a 	cmpne	r17,r17,zero
    e340:	0009883a 	mov	r4,zero
    e344:	003fa506 	br	e1dc <__alt_data_end+0xfffb8aac>
    e348:	400b883a 	mov	r5,r8
    e34c:	3023883a 	mov	r17,r6
    e350:	003e0c06 	br	db84 <__alt_data_end+0xfffb8454>
    e354:	400b883a 	mov	r5,r8
    e358:	3023883a 	mov	r17,r6
    e35c:	0401ffc4 	movi	r16,2047
    e360:	003e0806 	br	db84 <__alt_data_end+0xfffb8454>
    e364:	21fff804 	addi	r7,r4,-32
    e368:	02400804 	movi	r9,32
    e36c:	29ced83a 	srl	r7,r5,r7
    e370:	22400a26 	beq	r4,r9,e39c <__adddf3+0x894>
    e374:	02401004 	movi	r9,64
    e378:	4909c83a 	sub	r4,r9,r4
    e37c:	290a983a 	sll	r5,r5,r4
    e380:	2c62b03a 	or	r17,r5,r17
    e384:	8822c03a 	cmpne	r17,r17,zero
    e388:	89e2b03a 	or	r17,r17,r7
    e38c:	0009883a 	mov	r4,zero
    e390:	003f9206 	br	e1dc <__alt_data_end+0xfffb8aac>
    e394:	000b883a 	mov	r5,zero
    e398:	003fdc06 	br	e30c <__alt_data_end+0xfffb8bdc>
    e39c:	000b883a 	mov	r5,zero
    e3a0:	003ff706 	br	e380 <__alt_data_end+0xfffb8c50>

0000e3a4 <__divdf3>:
    e3a4:	defff004 	addi	sp,sp,-64
    e3a8:	dc800815 	stw	r18,32(sp)
    e3ac:	2824d53a 	srli	r18,r5,20
    e3b0:	dd800c15 	stw	r22,48(sp)
    e3b4:	282cd7fa 	srli	r22,r5,31
    e3b8:	dc000615 	stw	r16,24(sp)
    e3bc:	04000434 	movhi	r16,16
    e3c0:	df000e15 	stw	fp,56(sp)
    e3c4:	dd000a15 	stw	r20,40(sp)
    e3c8:	dcc00915 	stw	r19,36(sp)
    e3cc:	dc400715 	stw	r17,28(sp)
    e3d0:	843fffc4 	addi	r16,r16,-1
    e3d4:	dfc00f15 	stw	ra,60(sp)
    e3d8:	ddc00d15 	stw	r23,52(sp)
    e3dc:	dd400b15 	stw	r21,44(sp)
    e3e0:	9481ffcc 	andi	r18,r18,2047
    e3e4:	2029883a 	mov	r20,r4
    e3e8:	2027883a 	mov	r19,r4
    e3ec:	2c22703a 	and	r17,r5,r16
    e3f0:	b7003fcc 	andi	fp,r22,255
    e3f4:	90005e26 	beq	r18,zero,e570 <__divdf3+0x1cc>
    e3f8:	0081ffc4 	movi	r2,2047
    e3fc:	90803526 	beq	r18,r2,e4d4 <__divdf3+0x130>
    e400:	8c000434 	orhi	r16,r17,16
    e404:	2004d77a 	srli	r2,r4,29
    e408:	802090fa 	slli	r16,r16,3
    e40c:	202690fa 	slli	r19,r4,3
    e410:	94bf0044 	addi	r18,r18,-1023
    e414:	80a2b03a 	or	r17,r16,r2
    e418:	0029883a 	mov	r20,zero
    e41c:	0011883a 	mov	r8,zero
    e420:	380ad53a 	srli	r5,r7,20
    e424:	382ed7fa 	srli	r23,r7,31
    e428:	04000434 	movhi	r16,16
    e42c:	843fffc4 	addi	r16,r16,-1
    e430:	2941ffcc 	andi	r5,r5,2047
    e434:	302b883a 	mov	r21,r6
    e438:	3c20703a 	and	r16,r7,r16
    e43c:	ba403fcc 	andi	r9,r23,255
    e440:	28006726 	beq	r5,zero,e5e0 <__divdf3+0x23c>
    e444:	0081ffc4 	movi	r2,2047
    e448:	28805f26 	beq	r5,r2,e5c8 <__divdf3+0x224>
    e44c:	84000434 	orhi	r16,r16,16
    e450:	3004d77a 	srli	r2,r6,29
    e454:	802090fa 	slli	r16,r16,3
    e458:	302a90fa 	slli	r21,r6,3
    e45c:	297f0044 	addi	r5,r5,-1023
    e460:	80a0b03a 	or	r16,r16,r2
    e464:	000f883a 	mov	r7,zero
    e468:	3d06b03a 	or	r3,r7,r20
    e46c:	180690ba 	slli	r3,r3,2
    e470:	00800074 	movhi	r2,1
    e474:	10b92504 	addi	r2,r2,-7020
    e478:	1885883a 	add	r2,r3,r2
    e47c:	10800017 	ldw	r2,0(r2)
    e480:	b5c8f03a 	xor	r4,r22,r23
    e484:	200d883a 	mov	r6,r4
    e488:	25003fcc 	andi	r20,r4,255
    e48c:	9165c83a 	sub	r18,r18,r5
    e490:	1000683a 	jmp	r2
    e494:	0000e6dc 	xori	zero,zero,923
    e498:	0000e50c 	andi	zero,zero,916
    e49c:	0000e6a0 	cmpeqi	zero,zero,922
    e4a0:	0000e4f0 	cmpltui	zero,zero,915
    e4a4:	0000e6a0 	cmpeqi	zero,zero,922
    e4a8:	0000e674 	movhi	zero,921
    e4ac:	0000e6a0 	cmpeqi	zero,zero,922
    e4b0:	0000e4f0 	cmpltui	zero,zero,915
    e4b4:	0000e50c 	andi	zero,zero,916
    e4b8:	0000e50c 	andi	zero,zero,916
    e4bc:	0000e674 	movhi	zero,921
    e4c0:	0000e4f0 	cmpltui	zero,zero,915
    e4c4:	0000e500 	call	e50 <setup_keyboard+0x7b0>
    e4c8:	0000e500 	call	e50 <setup_keyboard+0x7b0>
    e4cc:	0000e500 	call	e50 <setup_keyboard+0x7b0>
    e4d0:	0000e6b0 	cmpltui	zero,zero,922
    e4d4:	8904b03a 	or	r2,r17,r4
    e4d8:	1000631e 	bne	r2,zero,e668 <__divdf3+0x2c4>
    e4dc:	05000204 	movi	r20,8
    e4e0:	0023883a 	mov	r17,zero
    e4e4:	0027883a 	mov	r19,zero
    e4e8:	02000084 	movi	r8,2
    e4ec:	003fcc06 	br	e420 <__alt_data_end+0xfffb8cf0>
    e4f0:	8023883a 	mov	r17,r16
    e4f4:	a827883a 	mov	r19,r21
    e4f8:	4839883a 	mov	fp,r9
    e4fc:	3811883a 	mov	r8,r7
    e500:	00800084 	movi	r2,2
    e504:	4081531e 	bne	r8,r2,ea54 <__divdf3+0x6b0>
    e508:	e029883a 	mov	r20,fp
    e50c:	a180004c 	andi	r6,r20,1
    e510:	0201ffc4 	movi	r8,2047
    e514:	000b883a 	mov	r5,zero
    e518:	0027883a 	mov	r19,zero
    e51c:	4010953a 	slli	r8,r8,20
    e520:	30c03fcc 	andi	r3,r6,255
    e524:	04000434 	movhi	r16,16
    e528:	180697fa 	slli	r3,r3,31
    e52c:	843fffc4 	addi	r16,r16,-1
    e530:	2c20703a 	and	r16,r5,r16
    e534:	8220b03a 	or	r16,r16,r8
    e538:	80c6b03a 	or	r3,r16,r3
    e53c:	9805883a 	mov	r2,r19
    e540:	dfc00f17 	ldw	ra,60(sp)
    e544:	df000e17 	ldw	fp,56(sp)
    e548:	ddc00d17 	ldw	r23,52(sp)
    e54c:	dd800c17 	ldw	r22,48(sp)
    e550:	dd400b17 	ldw	r21,44(sp)
    e554:	dd000a17 	ldw	r20,40(sp)
    e558:	dcc00917 	ldw	r19,36(sp)
    e55c:	dc800817 	ldw	r18,32(sp)
    e560:	dc400717 	ldw	r17,28(sp)
    e564:	dc000617 	ldw	r16,24(sp)
    e568:	dec01004 	addi	sp,sp,64
    e56c:	f800283a 	ret
    e570:	8904b03a 	or	r2,r17,r4
    e574:	10003726 	beq	r2,zero,e654 <__divdf3+0x2b0>
    e578:	88014d26 	beq	r17,zero,eab0 <__divdf3+0x70c>
    e57c:	8809883a 	mov	r4,r17
    e580:	d9800215 	stw	r6,8(sp)
    e584:	d9c00515 	stw	r7,20(sp)
    e588:	00102a00 	call	102a0 <__clzsi2>
    e58c:	d9800217 	ldw	r6,8(sp)
    e590:	d9c00517 	ldw	r7,20(sp)
    e594:	1007883a 	mov	r3,r2
    e598:	01000a04 	movi	r4,40
    e59c:	1cfffe04 	addi	r19,r3,-8
    e5a0:	20c9c83a 	sub	r4,r4,r3
    e5a4:	8cca983a 	sll	r5,r17,r19
    e5a8:	a108d83a 	srl	r4,r20,r4
    e5ac:	a4e6983a 	sll	r19,r20,r19
    e5b0:	2162b03a 	or	r17,r4,r5
    e5b4:	04bf0344 	movi	r18,-1011
    e5b8:	90e5c83a 	sub	r18,r18,r3
    e5bc:	0029883a 	mov	r20,zero
    e5c0:	0011883a 	mov	r8,zero
    e5c4:	003f9606 	br	e420 <__alt_data_end+0xfffb8cf0>
    e5c8:	8184b03a 	or	r2,r16,r6
    e5cc:	10001f1e 	bne	r2,zero,e64c <__divdf3+0x2a8>
    e5d0:	0021883a 	mov	r16,zero
    e5d4:	002b883a 	mov	r21,zero
    e5d8:	01c00084 	movi	r7,2
    e5dc:	003fa206 	br	e468 <__alt_data_end+0xfffb8d38>
    e5e0:	8184b03a 	or	r2,r16,r6
    e5e4:	10001526 	beq	r2,zero,e63c <__divdf3+0x298>
    e5e8:	80013d26 	beq	r16,zero,eae0 <__divdf3+0x73c>
    e5ec:	8009883a 	mov	r4,r16
    e5f0:	d9800215 	stw	r6,8(sp)
    e5f4:	da000315 	stw	r8,12(sp)
    e5f8:	da400415 	stw	r9,16(sp)
    e5fc:	00102a00 	call	102a0 <__clzsi2>
    e600:	d9800217 	ldw	r6,8(sp)
    e604:	da000317 	ldw	r8,12(sp)
    e608:	da400417 	ldw	r9,16(sp)
    e60c:	1007883a 	mov	r3,r2
    e610:	01000a04 	movi	r4,40
    e614:	1d7ffe04 	addi	r21,r3,-8
    e618:	20c9c83a 	sub	r4,r4,r3
    e61c:	8560983a 	sll	r16,r16,r21
    e620:	3108d83a 	srl	r4,r6,r4
    e624:	356a983a 	sll	r21,r6,r21
    e628:	2420b03a 	or	r16,r4,r16
    e62c:	017f0344 	movi	r5,-1011
    e630:	28cbc83a 	sub	r5,r5,r3
    e634:	000f883a 	mov	r7,zero
    e638:	003f8b06 	br	e468 <__alt_data_end+0xfffb8d38>
    e63c:	0021883a 	mov	r16,zero
    e640:	002b883a 	mov	r21,zero
    e644:	01c00044 	movi	r7,1
    e648:	003f8706 	br	e468 <__alt_data_end+0xfffb8d38>
    e64c:	01c000c4 	movi	r7,3
    e650:	003f8506 	br	e468 <__alt_data_end+0xfffb8d38>
    e654:	05000104 	movi	r20,4
    e658:	0023883a 	mov	r17,zero
    e65c:	0027883a 	mov	r19,zero
    e660:	02000044 	movi	r8,1
    e664:	003f6e06 	br	e420 <__alt_data_end+0xfffb8cf0>
    e668:	05000304 	movi	r20,12
    e66c:	020000c4 	movi	r8,3
    e670:	003f6b06 	br	e420 <__alt_data_end+0xfffb8cf0>
    e674:	01400434 	movhi	r5,16
    e678:	000d883a 	mov	r6,zero
    e67c:	297fffc4 	addi	r5,r5,-1
    e680:	04ffffc4 	movi	r19,-1
    e684:	0201ffc4 	movi	r8,2047
    e688:	003fa406 	br	e51c <__alt_data_end+0xfffb8dec>
    e68c:	043f0084 	movi	r16,-1022
    e690:	84a1c83a 	sub	r16,r16,r18
    e694:	00800e04 	movi	r2,56
    e698:	14014d0e 	bge	r2,r16,ebd0 <__divdf3+0x82c>
    e69c:	a180004c 	andi	r6,r20,1
    e6a0:	0011883a 	mov	r8,zero
    e6a4:	000b883a 	mov	r5,zero
    e6a8:	0027883a 	mov	r19,zero
    e6ac:	003f9b06 	br	e51c <__alt_data_end+0xfffb8dec>
    e6b0:	8880022c 	andhi	r2,r17,8
    e6b4:	1000f026 	beq	r2,zero,ea78 <__divdf3+0x6d4>
    e6b8:	8080022c 	andhi	r2,r16,8
    e6bc:	1000ee1e 	bne	r2,zero,ea78 <__divdf3+0x6d4>
    e6c0:	00800434 	movhi	r2,16
    e6c4:	81400234 	orhi	r5,r16,8
    e6c8:	10bfffc4 	addi	r2,r2,-1
    e6cc:	b80d883a 	mov	r6,r23
    e6d0:	288a703a 	and	r5,r5,r2
    e6d4:	a827883a 	mov	r19,r21
    e6d8:	003fea06 	br	e684 <__alt_data_end+0xfffb8f54>
    e6dc:	84411c36 	bltu	r16,r17,eb50 <__divdf3+0x7ac>
    e6e0:	8c011a26 	beq	r17,r16,eb4c <__divdf3+0x7a8>
    e6e4:	94bfffc4 	addi	r18,r18,-1
    e6e8:	dcc00015 	stw	r19,0(sp)
    e6ec:	8811883a 	mov	r8,r17
    e6f0:	002d883a 	mov	r22,zero
    e6f4:	a80cd63a 	srli	r6,r21,24
    e6f8:	8020923a 	slli	r16,r16,8
    e6fc:	a82a923a 	slli	r21,r21,8
    e700:	4009883a 	mov	r4,r8
    e704:	342eb03a 	or	r23,r6,r16
    e708:	dd400115 	stw	r21,4(sp)
    e70c:	b82ad43a 	srli	r21,r23,16
    e710:	da000315 	stw	r8,12(sp)
    e714:	bcffffcc 	andi	r19,r23,65535
    e718:	a80b883a 	mov	r5,r21
    e71c:	000390c0 	call	390c <__udivsi3>
    e720:	1009883a 	mov	r4,r2
    e724:	980b883a 	mov	r5,r19
    e728:	1023883a 	mov	r17,r2
    e72c:	000dae00 	call	dae0 <__mulsi3>
    e730:	da000317 	ldw	r8,12(sp)
    e734:	a80b883a 	mov	r5,r21
    e738:	1039883a 	mov	fp,r2
    e73c:	4009883a 	mov	r4,r8
    e740:	00039140 	call	3914 <__umodsi3>
    e744:	d8c00017 	ldw	r3,0(sp)
    e748:	1004943a 	slli	r2,r2,16
    e74c:	1810d43a 	srli	r8,r3,16
    e750:	120eb03a 	or	r7,r2,r8
    e754:	3f00062e 	bgeu	r7,fp,e770 <__divdf3+0x3cc>
    e758:	3dcf883a 	add	r7,r7,r23
    e75c:	88bfffc4 	addi	r2,r17,-1
    e760:	3dc10a36 	bltu	r7,r23,eb8c <__divdf3+0x7e8>
    e764:	3f01092e 	bgeu	r7,fp,eb8c <__divdf3+0x7e8>
    e768:	8c7fff84 	addi	r17,r17,-2
    e76c:	3dcf883a 	add	r7,r7,r23
    e770:	3f39c83a 	sub	fp,r7,fp
    e774:	e009883a 	mov	r4,fp
    e778:	a80b883a 	mov	r5,r21
    e77c:	000390c0 	call	390c <__udivsi3>
    e780:	1009883a 	mov	r4,r2
    e784:	980b883a 	mov	r5,r19
    e788:	1021883a 	mov	r16,r2
    e78c:	000dae00 	call	dae0 <__mulsi3>
    e790:	e009883a 	mov	r4,fp
    e794:	a80b883a 	mov	r5,r21
    e798:	d8800315 	stw	r2,12(sp)
    e79c:	00039140 	call	3914 <__umodsi3>
    e7a0:	d9000017 	ldw	r4,0(sp)
    e7a4:	1004943a 	slli	r2,r2,16
    e7a8:	da000317 	ldw	r8,12(sp)
    e7ac:	20ffffcc 	andi	r3,r4,65535
    e7b0:	10ceb03a 	or	r7,r2,r3
    e7b4:	3a00062e 	bgeu	r7,r8,e7d0 <__divdf3+0x42c>
    e7b8:	3dcf883a 	add	r7,r7,r23
    e7bc:	80bfffc4 	addi	r2,r16,-1
    e7c0:	3dc0f036 	bltu	r7,r23,eb84 <__divdf3+0x7e0>
    e7c4:	3a00ef2e 	bgeu	r7,r8,eb84 <__divdf3+0x7e0>
    e7c8:	843fff84 	addi	r16,r16,-2
    e7cc:	3dcf883a 	add	r7,r7,r23
    e7d0:	d8c00117 	ldw	r3,4(sp)
    e7d4:	8822943a 	slli	r17,r17,16
    e7d8:	3a0fc83a 	sub	r7,r7,r8
    e7dc:	1806d43a 	srli	r3,r3,16
    e7e0:	8462b03a 	or	r17,r16,r17
    e7e4:	8affffcc 	andi	r11,r17,65535
    e7e8:	d8c00015 	stw	r3,0(sp)
    e7ec:	d8c00117 	ldw	r3,4(sp)
    e7f0:	8820d43a 	srli	r16,r17,16
    e7f4:	5809883a 	mov	r4,r11
    e7f8:	1f3fffcc 	andi	fp,r3,65535
    e7fc:	e00b883a 	mov	r5,fp
    e800:	d9c00515 	stw	r7,20(sp)
    e804:	dac00215 	stw	r11,8(sp)
    e808:	000dae00 	call	dae0 <__mulsi3>
    e80c:	8009883a 	mov	r4,r16
    e810:	e00b883a 	mov	r5,fp
    e814:	d8800415 	stw	r2,16(sp)
    e818:	000dae00 	call	dae0 <__mulsi3>
    e81c:	d9400017 	ldw	r5,0(sp)
    e820:	8009883a 	mov	r4,r16
    e824:	d8800315 	stw	r2,12(sp)
    e828:	000dae00 	call	dae0 <__mulsi3>
    e82c:	dac00217 	ldw	r11,8(sp)
    e830:	d9400017 	ldw	r5,0(sp)
    e834:	d8800215 	stw	r2,8(sp)
    e838:	5809883a 	mov	r4,r11
    e83c:	000dae00 	call	dae0 <__mulsi3>
    e840:	da400417 	ldw	r9,16(sp)
    e844:	da800317 	ldw	r10,12(sp)
    e848:	d9c00517 	ldw	r7,20(sp)
    e84c:	480ad43a 	srli	r5,r9,16
    e850:	5085883a 	add	r2,r10,r2
    e854:	db000217 	ldw	r12,8(sp)
    e858:	1151883a 	add	r8,r2,r5
    e85c:	4280022e 	bgeu	r8,r10,e868 <__divdf3+0x4c4>
    e860:	00800074 	movhi	r2,1
    e864:	6099883a 	add	r12,r12,r2
    e868:	400ad43a 	srli	r5,r8,16
    e86c:	4010943a 	slli	r8,r8,16
    e870:	4c3fffcc 	andi	r16,r9,65535
    e874:	6149883a 	add	r4,r12,r5
    e878:	4411883a 	add	r8,r8,r16
    e87c:	3900a736 	bltu	r7,r4,eb1c <__divdf3+0x778>
    e880:	3900c426 	beq	r7,r4,eb94 <__divdf3+0x7f0>
    e884:	3909c83a 	sub	r4,r7,r4
    e888:	b221c83a 	sub	r16,r22,r8
    e88c:	b42d803a 	cmpltu	r22,r22,r16
    e890:	25adc83a 	sub	r22,r4,r22
    e894:	b5c0c626 	beq	r22,r23,ebb0 <__divdf3+0x80c>
    e898:	b009883a 	mov	r4,r22
    e89c:	a80b883a 	mov	r5,r21
    e8a0:	000390c0 	call	390c <__udivsi3>
    e8a4:	1009883a 	mov	r4,r2
    e8a8:	980b883a 	mov	r5,r19
    e8ac:	d8800315 	stw	r2,12(sp)
    e8b0:	000dae00 	call	dae0 <__mulsi3>
    e8b4:	a80b883a 	mov	r5,r21
    e8b8:	b009883a 	mov	r4,r22
    e8bc:	d8800415 	stw	r2,16(sp)
    e8c0:	00039140 	call	3914 <__umodsi3>
    e8c4:	1004943a 	slli	r2,r2,16
    e8c8:	800ed43a 	srli	r7,r16,16
    e8cc:	da400417 	ldw	r9,16(sp)
    e8d0:	da000317 	ldw	r8,12(sp)
    e8d4:	11cab03a 	or	r5,r2,r7
    e8d8:	2a40062e 	bgeu	r5,r9,e8f4 <__divdf3+0x550>
    e8dc:	2dcb883a 	add	r5,r5,r23
    e8e0:	40bfffc4 	addi	r2,r8,-1
    e8e4:	2dc0b436 	bltu	r5,r23,ebb8 <__divdf3+0x814>
    e8e8:	2a40b32e 	bgeu	r5,r9,ebb8 <__divdf3+0x814>
    e8ec:	423fff84 	addi	r8,r8,-2
    e8f0:	2dcb883a 	add	r5,r5,r23
    e8f4:	2a6dc83a 	sub	r22,r5,r9
    e8f8:	b009883a 	mov	r4,r22
    e8fc:	a80b883a 	mov	r5,r21
    e900:	da000315 	stw	r8,12(sp)
    e904:	000390c0 	call	390c <__udivsi3>
    e908:	980b883a 	mov	r5,r19
    e90c:	1009883a 	mov	r4,r2
    e910:	d8800415 	stw	r2,16(sp)
    e914:	000dae00 	call	dae0 <__mulsi3>
    e918:	b009883a 	mov	r4,r22
    e91c:	a80b883a 	mov	r5,r21
    e920:	1027883a 	mov	r19,r2
    e924:	00039140 	call	3914 <__umodsi3>
    e928:	1004943a 	slli	r2,r2,16
    e92c:	843fffcc 	andi	r16,r16,65535
    e930:	da000317 	ldw	r8,12(sp)
    e934:	140eb03a 	or	r7,r2,r16
    e938:	da400417 	ldw	r9,16(sp)
    e93c:	3cc0062e 	bgeu	r7,r19,e958 <__divdf3+0x5b4>
    e940:	3dcf883a 	add	r7,r7,r23
    e944:	48bfffc4 	addi	r2,r9,-1
    e948:	3dc09d36 	bltu	r7,r23,ebc0 <__divdf3+0x81c>
    e94c:	3cc09c2e 	bgeu	r7,r19,ebc0 <__divdf3+0x81c>
    e950:	4a7fff84 	addi	r9,r9,-2
    e954:	3dcf883a 	add	r7,r7,r23
    e958:	4010943a 	slli	r8,r8,16
    e95c:	3cebc83a 	sub	r21,r7,r19
    e960:	e00b883a 	mov	r5,fp
    e964:	4a26b03a 	or	r19,r9,r8
    e968:	99ffffcc 	andi	r7,r19,65535
    e96c:	9820d43a 	srli	r16,r19,16
    e970:	3809883a 	mov	r4,r7
    e974:	d9c00515 	stw	r7,20(sp)
    e978:	000dae00 	call	dae0 <__mulsi3>
    e97c:	8009883a 	mov	r4,r16
    e980:	e00b883a 	mov	r5,fp
    e984:	102d883a 	mov	r22,r2
    e988:	000dae00 	call	dae0 <__mulsi3>
    e98c:	d9400017 	ldw	r5,0(sp)
    e990:	8009883a 	mov	r4,r16
    e994:	1039883a 	mov	fp,r2
    e998:	000dae00 	call	dae0 <__mulsi3>
    e99c:	d9c00517 	ldw	r7,20(sp)
    e9a0:	d9400017 	ldw	r5,0(sp)
    e9a4:	1021883a 	mov	r16,r2
    e9a8:	3809883a 	mov	r4,r7
    e9ac:	000dae00 	call	dae0 <__mulsi3>
    e9b0:	b008d43a 	srli	r4,r22,16
    e9b4:	e085883a 	add	r2,fp,r2
    e9b8:	1109883a 	add	r4,r2,r4
    e9bc:	2700022e 	bgeu	r4,fp,e9c8 <__divdf3+0x624>
    e9c0:	00800074 	movhi	r2,1
    e9c4:	80a1883a 	add	r16,r16,r2
    e9c8:	200ad43a 	srli	r5,r4,16
    e9cc:	2008943a 	slli	r4,r4,16
    e9d0:	b5bfffcc 	andi	r22,r22,65535
    e9d4:	8145883a 	add	r2,r16,r5
    e9d8:	2589883a 	add	r4,r4,r22
    e9dc:	a8802c36 	bltu	r21,r2,ea90 <__divdf3+0x6ec>
    e9e0:	a880a426 	beq	r21,r2,ec74 <__divdf3+0x8d0>
    e9e4:	9cc00054 	ori	r19,r19,1
    e9e8:	9200ffc4 	addi	r8,r18,1023
    e9ec:	023f270e 	bge	zero,r8,e68c <__alt_data_end+0xfffb8f5c>
    e9f0:	988001cc 	andi	r2,r19,7
    e9f4:	10000726 	beq	r2,zero,ea14 <__divdf3+0x670>
    e9f8:	990003cc 	andi	r4,r19,15
    e9fc:	00800104 	movi	r2,4
    ea00:	20800426 	beq	r4,r2,ea14 <__divdf3+0x670>
    ea04:	9885883a 	add	r2,r19,r2
    ea08:	14e7803a 	cmpltu	r19,r2,r19
    ea0c:	8ce3883a 	add	r17,r17,r19
    ea10:	1027883a 	mov	r19,r2
    ea14:	8880402c 	andhi	r2,r17,256
    ea18:	10000426 	beq	r2,zero,ea2c <__divdf3+0x688>
    ea1c:	00bfc034 	movhi	r2,65280
    ea20:	10bfffc4 	addi	r2,r2,-1
    ea24:	92010004 	addi	r8,r18,1024
    ea28:	88a2703a 	and	r17,r17,r2
    ea2c:	0081ff84 	movi	r2,2046
    ea30:	123eb616 	blt	r2,r8,e50c <__alt_data_end+0xfffb8ddc>
    ea34:	9826d0fa 	srli	r19,r19,3
    ea38:	8804977a 	slli	r2,r17,29
    ea3c:	8820927a 	slli	r16,r17,9
    ea40:	4201ffcc 	andi	r8,r8,2047
    ea44:	14e6b03a 	or	r19,r2,r19
    ea48:	800ad33a 	srli	r5,r16,12
    ea4c:	a180004c 	andi	r6,r20,1
    ea50:	003eb206 	br	e51c <__alt_data_end+0xfffb8dec>
    ea54:	008000c4 	movi	r2,3
    ea58:	4080ac26 	beq	r8,r2,ed0c <__divdf3+0x968>
    ea5c:	00800044 	movi	r2,1
    ea60:	4080591e 	bne	r8,r2,ebc8 <__divdf3+0x824>
    ea64:	e00d883a 	mov	r6,fp
    ea68:	0011883a 	mov	r8,zero
    ea6c:	000b883a 	mov	r5,zero
    ea70:	0027883a 	mov	r19,zero
    ea74:	003ea906 	br	e51c <__alt_data_end+0xfffb8dec>
    ea78:	00800434 	movhi	r2,16
    ea7c:	89400234 	orhi	r5,r17,8
    ea80:	10bfffc4 	addi	r2,r2,-1
    ea84:	b00d883a 	mov	r6,r22
    ea88:	288a703a 	and	r5,r5,r2
    ea8c:	003efd06 	br	e684 <__alt_data_end+0xfffb8f54>
    ea90:	adcf883a 	add	r7,r21,r23
    ea94:	997fffc4 	addi	r5,r19,-1
    ea98:	3dc0412e 	bgeu	r7,r23,eba0 <__divdf3+0x7fc>
    ea9c:	2827883a 	mov	r19,r5
    eaa0:	38bfd01e 	bne	r7,r2,e9e4 <__alt_data_end+0xfffb92b4>
    eaa4:	d8c00117 	ldw	r3,4(sp)
    eaa8:	193fce1e 	bne	r3,r4,e9e4 <__alt_data_end+0xfffb92b4>
    eaac:	003fce06 	br	e9e8 <__alt_data_end+0xfffb92b8>
    eab0:	d9800215 	stw	r6,8(sp)
    eab4:	d9c00515 	stw	r7,20(sp)
    eab8:	00102a00 	call	102a0 <__clzsi2>
    eabc:	10c00804 	addi	r3,r2,32
    eac0:	010009c4 	movi	r4,39
    eac4:	d9800217 	ldw	r6,8(sp)
    eac8:	d9c00517 	ldw	r7,20(sp)
    eacc:	20feb20e 	bge	r4,r3,e598 <__alt_data_end+0xfffb8e68>
    ead0:	117ffe04 	addi	r5,r2,-8
    ead4:	a162983a 	sll	r17,r20,r5
    ead8:	0027883a 	mov	r19,zero
    eadc:	003eb506 	br	e5b4 <__alt_data_end+0xfffb8e84>
    eae0:	3009883a 	mov	r4,r6
    eae4:	d9800215 	stw	r6,8(sp)
    eae8:	da000315 	stw	r8,12(sp)
    eaec:	da400415 	stw	r9,16(sp)
    eaf0:	00102a00 	call	102a0 <__clzsi2>
    eaf4:	10c00804 	addi	r3,r2,32
    eaf8:	010009c4 	movi	r4,39
    eafc:	d9800217 	ldw	r6,8(sp)
    eb00:	da000317 	ldw	r8,12(sp)
    eb04:	da400417 	ldw	r9,16(sp)
    eb08:	20fec10e 	bge	r4,r3,e610 <__alt_data_end+0xfffb8ee0>
    eb0c:	10bffe04 	addi	r2,r2,-8
    eb10:	a8a0983a 	sll	r16,r21,r2
    eb14:	002b883a 	mov	r21,zero
    eb18:	003ec406 	br	e62c <__alt_data_end+0xfffb8efc>
    eb1c:	d8c00117 	ldw	r3,4(sp)
    eb20:	b0ed883a 	add	r22,r22,r3
    eb24:	b0c5803a 	cmpltu	r2,r22,r3
    eb28:	15c5883a 	add	r2,r2,r23
    eb2c:	11cf883a 	add	r7,r2,r7
    eb30:	88bfffc4 	addi	r2,r17,-1
    eb34:	b9c00d2e 	bgeu	r23,r7,eb6c <__divdf3+0x7c8>
    eb38:	39003f36 	bltu	r7,r4,ec38 <__divdf3+0x894>
    eb3c:	21c06a26 	beq	r4,r7,ece8 <__divdf3+0x944>
    eb40:	3909c83a 	sub	r4,r7,r4
    eb44:	1023883a 	mov	r17,r2
    eb48:	003f4f06 	br	e888 <__alt_data_end+0xfffb9158>
    eb4c:	9d7ee536 	bltu	r19,r21,e6e4 <__alt_data_end+0xfffb8fb4>
    eb50:	982ed07a 	srli	r23,r19,1
    eb54:	880497fa 	slli	r2,r17,31
    eb58:	8810d07a 	srli	r8,r17,1
    eb5c:	982c97fa 	slli	r22,r19,31
    eb60:	b884b03a 	or	r2,r23,r2
    eb64:	d8800015 	stw	r2,0(sp)
    eb68:	003ee206 	br	e6f4 <__alt_data_end+0xfffb8fc4>
    eb6c:	3dfff41e 	bne	r7,r23,eb40 <__alt_data_end+0xfffb9410>
    eb70:	d8c00117 	ldw	r3,4(sp)
    eb74:	b0fff02e 	bgeu	r22,r3,eb38 <__alt_data_end+0xfffb9408>
    eb78:	b909c83a 	sub	r4,r23,r4
    eb7c:	1023883a 	mov	r17,r2
    eb80:	003f4106 	br	e888 <__alt_data_end+0xfffb9158>
    eb84:	1021883a 	mov	r16,r2
    eb88:	003f1106 	br	e7d0 <__alt_data_end+0xfffb90a0>
    eb8c:	1023883a 	mov	r17,r2
    eb90:	003ef706 	br	e770 <__alt_data_end+0xfffb9040>
    eb94:	b23fe136 	bltu	r22,r8,eb1c <__alt_data_end+0xfffb93ec>
    eb98:	0009883a 	mov	r4,zero
    eb9c:	003f3a06 	br	e888 <__alt_data_end+0xfffb9158>
    eba0:	38802c36 	bltu	r7,r2,ec54 <__divdf3+0x8b0>
    eba4:	11c05326 	beq	r2,r7,ecf4 <__divdf3+0x950>
    eba8:	2827883a 	mov	r19,r5
    ebac:	003f8d06 	br	e9e4 <__alt_data_end+0xfffb92b4>
    ebb0:	04ffffc4 	movi	r19,-1
    ebb4:	003f8c06 	br	e9e8 <__alt_data_end+0xfffb92b8>
    ebb8:	1011883a 	mov	r8,r2
    ebbc:	003f4d06 	br	e8f4 <__alt_data_end+0xfffb91c4>
    ebc0:	1013883a 	mov	r9,r2
    ebc4:	003f6406 	br	e958 <__alt_data_end+0xfffb9228>
    ebc8:	e029883a 	mov	r20,fp
    ebcc:	003f8606 	br	e9e8 <__alt_data_end+0xfffb92b8>
    ebd0:	008007c4 	movi	r2,31
    ebd4:	14002a16 	blt	r2,r16,ec80 <__divdf3+0x8dc>
    ebd8:	91410784 	addi	r5,r18,1054
    ebdc:	9c0cd83a 	srl	r6,r19,r16
    ebe0:	8948983a 	sll	r4,r17,r5
    ebe4:	9944983a 	sll	r2,r19,r5
    ebe8:	8c20d83a 	srl	r16,r17,r16
    ebec:	3108b03a 	or	r4,r6,r4
    ebf0:	1004c03a 	cmpne	r2,r2,zero
    ebf4:	2084b03a 	or	r2,r4,r2
    ebf8:	110001cc 	andi	r4,r2,7
    ebfc:	20000726 	beq	r4,zero,ec1c <__divdf3+0x878>
    ec00:	114003cc 	andi	r5,r2,15
    ec04:	01000104 	movi	r4,4
    ec08:	29000426 	beq	r5,r4,ec1c <__divdf3+0x878>
    ec0c:	11000104 	addi	r4,r2,4
    ec10:	2085803a 	cmpltu	r2,r4,r2
    ec14:	80a1883a 	add	r16,r16,r2
    ec18:	2005883a 	mov	r2,r4
    ec1c:	8100202c 	andhi	r4,r16,128
    ec20:	20002d26 	beq	r4,zero,ecd8 <__divdf3+0x934>
    ec24:	a180004c 	andi	r6,r20,1
    ec28:	02000044 	movi	r8,1
    ec2c:	000b883a 	mov	r5,zero
    ec30:	0027883a 	mov	r19,zero
    ec34:	003e3906 	br	e51c <__alt_data_end+0xfffb8dec>
    ec38:	d8c00117 	ldw	r3,4(sp)
    ec3c:	8c7fff84 	addi	r17,r17,-2
    ec40:	b0ed883a 	add	r22,r22,r3
    ec44:	b0c5803a 	cmpltu	r2,r22,r3
    ec48:	15c5883a 	add	r2,r2,r23
    ec4c:	11cf883a 	add	r7,r2,r7
    ec50:	003f0c06 	br	e884 <__alt_data_end+0xfffb9154>
    ec54:	d8c00117 	ldw	r3,4(sp)
    ec58:	997fff84 	addi	r5,r19,-2
    ec5c:	18d1883a 	add	r8,r3,r3
    ec60:	40c7803a 	cmpltu	r3,r8,r3
    ec64:	1dcd883a 	add	r6,r3,r23
    ec68:	398f883a 	add	r7,r7,r6
    ec6c:	da000115 	stw	r8,4(sp)
    ec70:	003f8a06 	br	ea9c <__alt_data_end+0xfffb936c>
    ec74:	203f861e 	bne	r4,zero,ea90 <__alt_data_end+0xfffb9360>
    ec78:	d8000115 	stw	zero,4(sp)
    ec7c:	003f8906 	br	eaa4 <__alt_data_end+0xfffb9374>
    ec80:	00bef884 	movi	r2,-1054
    ec84:	1485c83a 	sub	r2,r2,r18
    ec88:	01000804 	movi	r4,32
    ec8c:	8884d83a 	srl	r2,r17,r2
    ec90:	81001c26 	beq	r16,r4,ed04 <__divdf3+0x960>
    ec94:	91010f84 	addi	r4,r18,1086
    ec98:	8908983a 	sll	r4,r17,r4
    ec9c:	24c8b03a 	or	r4,r4,r19
    eca0:	2008c03a 	cmpne	r4,r4,zero
    eca4:	2084b03a 	or	r2,r4,r2
    eca8:	140001cc 	andi	r16,r2,7
    ecac:	8000061e 	bne	r16,zero,ecc8 <__divdf3+0x924>
    ecb0:	000b883a 	mov	r5,zero
    ecb4:	1004d0fa 	srli	r2,r2,3
    ecb8:	a180004c 	andi	r6,r20,1
    ecbc:	0011883a 	mov	r8,zero
    ecc0:	1426b03a 	or	r19,r2,r16
    ecc4:	003e1506 	br	e51c <__alt_data_end+0xfffb8dec>
    ecc8:	114003cc 	andi	r5,r2,15
    eccc:	01000104 	movi	r4,4
    ecd0:	0021883a 	mov	r16,zero
    ecd4:	293fcd1e 	bne	r5,r4,ec0c <__alt_data_end+0xfffb94dc>
    ecd8:	800a927a 	slli	r5,r16,9
    ecdc:	8020977a 	slli	r16,r16,29
    ece0:	280ad33a 	srli	r5,r5,12
    ece4:	003ff306 	br	ecb4 <__alt_data_end+0xfffb9584>
    ece8:	b23fd336 	bltu	r22,r8,ec38 <__alt_data_end+0xfffb9508>
    ecec:	1023883a 	mov	r17,r2
    ecf0:	003fa906 	br	eb98 <__alt_data_end+0xfffb9468>
    ecf4:	d8c00117 	ldw	r3,4(sp)
    ecf8:	193fd636 	bltu	r3,r4,ec54 <__alt_data_end+0xfffb9524>
    ecfc:	2827883a 	mov	r19,r5
    ed00:	003f6806 	br	eaa4 <__alt_data_end+0xfffb9374>
    ed04:	0009883a 	mov	r4,zero
    ed08:	003fe406 	br	ec9c <__alt_data_end+0xfffb956c>
    ed0c:	00800434 	movhi	r2,16
    ed10:	89400234 	orhi	r5,r17,8
    ed14:	10bfffc4 	addi	r2,r2,-1
    ed18:	e00d883a 	mov	r6,fp
    ed1c:	288a703a 	and	r5,r5,r2
    ed20:	003e5806 	br	e684 <__alt_data_end+0xfffb8f54>

0000ed24 <__eqdf2>:
    ed24:	2804d53a 	srli	r2,r5,20
    ed28:	3806d53a 	srli	r3,r7,20
    ed2c:	02000434 	movhi	r8,16
    ed30:	423fffc4 	addi	r8,r8,-1
    ed34:	1081ffcc 	andi	r2,r2,2047
    ed38:	0241ffc4 	movi	r9,2047
    ed3c:	2a14703a 	and	r10,r5,r8
    ed40:	18c1ffcc 	andi	r3,r3,2047
    ed44:	3a10703a 	and	r8,r7,r8
    ed48:	280ad7fa 	srli	r5,r5,31
    ed4c:	380ed7fa 	srli	r7,r7,31
    ed50:	12400f26 	beq	r2,r9,ed90 <__eqdf2+0x6c>
    ed54:	0241ffc4 	movi	r9,2047
    ed58:	1a400326 	beq	r3,r9,ed68 <__eqdf2+0x44>
    ed5c:	10c00526 	beq	r2,r3,ed74 <__eqdf2+0x50>
    ed60:	00800044 	movi	r2,1
    ed64:	f800283a 	ret
    ed68:	4192b03a 	or	r9,r8,r6
    ed6c:	483ffc1e 	bne	r9,zero,ed60 <__alt_data_end+0xfffb9630>
    ed70:	10fffb1e 	bne	r2,r3,ed60 <__alt_data_end+0xfffb9630>
    ed74:	523ffa1e 	bne	r10,r8,ed60 <__alt_data_end+0xfffb9630>
    ed78:	21bff91e 	bne	r4,r6,ed60 <__alt_data_end+0xfffb9630>
    ed7c:	29c00826 	beq	r5,r7,eda0 <__eqdf2+0x7c>
    ed80:	103ff71e 	bne	r2,zero,ed60 <__alt_data_end+0xfffb9630>
    ed84:	5104b03a 	or	r2,r10,r4
    ed88:	1004c03a 	cmpne	r2,r2,zero
    ed8c:	f800283a 	ret
    ed90:	5112b03a 	or	r9,r10,r4
    ed94:	483fef26 	beq	r9,zero,ed54 <__alt_data_end+0xfffb9624>
    ed98:	00800044 	movi	r2,1
    ed9c:	f800283a 	ret
    eda0:	0005883a 	mov	r2,zero
    eda4:	f800283a 	ret

0000eda8 <__gedf2>:
    eda8:	2804d53a 	srli	r2,r5,20
    edac:	3806d53a 	srli	r3,r7,20
    edb0:	02000434 	movhi	r8,16
    edb4:	423fffc4 	addi	r8,r8,-1
    edb8:	0241ffc4 	movi	r9,2047
    edbc:	1081ffcc 	andi	r2,r2,2047
    edc0:	2a14703a 	and	r10,r5,r8
    edc4:	1a46703a 	and	r3,r3,r9
    edc8:	3a10703a 	and	r8,r7,r8
    edcc:	280ad7fa 	srli	r5,r5,31
    edd0:	380ed7fa 	srli	r7,r7,31
    edd4:	12400b26 	beq	r2,r9,ee04 <__gedf2+0x5c>
    edd8:	1a401626 	beq	r3,r9,ee34 <__gedf2+0x8c>
    eddc:	10000c1e 	bne	r2,zero,ee10 <__gedf2+0x68>
    ede0:	5112b03a 	or	r9,r10,r4
    ede4:	4813003a 	cmpeq	r9,r9,zero
    ede8:	4817883a 	mov	r11,r9
    edec:	18000c1e 	bne	r3,zero,ee20 <__gedf2+0x78>
    edf0:	4198b03a 	or	r12,r8,r6
    edf4:	60000a1e 	bne	r12,zero,ee20 <__gedf2+0x78>
    edf8:	48001326 	beq	r9,zero,ee48 <__gedf2+0xa0>
    edfc:	0005883a 	mov	r2,zero
    ee00:	f800283a 	ret
    ee04:	5112b03a 	or	r9,r10,r4
    ee08:	4800191e 	bne	r9,zero,ee70 <__gedf2+0xc8>
    ee0c:	18800926 	beq	r3,r2,ee34 <__gedf2+0x8c>
    ee10:	18000b1e 	bne	r3,zero,ee40 <__gedf2+0x98>
    ee14:	4192b03a 	or	r9,r8,r6
    ee18:	0017883a 	mov	r11,zero
    ee1c:	48000a26 	beq	r9,zero,ee48 <__gedf2+0xa0>
    ee20:	39c03fcc 	andi	r7,r7,255
    ee24:	58000726 	beq	r11,zero,ee44 <__gedf2+0x9c>
    ee28:	3800081e 	bne	r7,zero,ee4c <__gedf2+0xa4>
    ee2c:	00bfffc4 	movi	r2,-1
    ee30:	f800283a 	ret
    ee34:	4192b03a 	or	r9,r8,r6
    ee38:	48000d1e 	bne	r9,zero,ee70 <__gedf2+0xc8>
    ee3c:	103fe826 	beq	r2,zero,ede0 <__alt_data_end+0xfffb96b0>
    ee40:	39c03fcc 	andi	r7,r7,255
    ee44:	29c00326 	beq	r5,r7,ee54 <__gedf2+0xac>
    ee48:	283ff81e 	bne	r5,zero,ee2c <__alt_data_end+0xfffb96fc>
    ee4c:	00800044 	movi	r2,1
    ee50:	f800283a 	ret
    ee54:	18bffc16 	blt	r3,r2,ee48 <__alt_data_end+0xfffb9718>
    ee58:	10c00316 	blt	r2,r3,ee68 <__gedf2+0xc0>
    ee5c:	42bffa36 	bltu	r8,r10,ee48 <__alt_data_end+0xfffb9718>
    ee60:	52000526 	beq	r10,r8,ee78 <__gedf2+0xd0>
    ee64:	523fe52e 	bgeu	r10,r8,edfc <__alt_data_end+0xfffb96cc>
    ee68:	283ff026 	beq	r5,zero,ee2c <__alt_data_end+0xfffb96fc>
    ee6c:	003ff706 	br	ee4c <__alt_data_end+0xfffb971c>
    ee70:	00bfff84 	movi	r2,-2
    ee74:	f800283a 	ret
    ee78:	313ff336 	bltu	r6,r4,ee48 <__alt_data_end+0xfffb9718>
    ee7c:	21bfdf2e 	bgeu	r4,r6,edfc <__alt_data_end+0xfffb96cc>
    ee80:	283fea26 	beq	r5,zero,ee2c <__alt_data_end+0xfffb96fc>
    ee84:	003ff106 	br	ee4c <__alt_data_end+0xfffb971c>

0000ee88 <__ledf2>:
    ee88:	2804d53a 	srli	r2,r5,20
    ee8c:	3810d53a 	srli	r8,r7,20
    ee90:	00c00434 	movhi	r3,16
    ee94:	18ffffc4 	addi	r3,r3,-1
    ee98:	0241ffc4 	movi	r9,2047
    ee9c:	1081ffcc 	andi	r2,r2,2047
    eea0:	28d4703a 	and	r10,r5,r3
    eea4:	4250703a 	and	r8,r8,r9
    eea8:	38c6703a 	and	r3,r7,r3
    eeac:	280ad7fa 	srli	r5,r5,31
    eeb0:	380ed7fa 	srli	r7,r7,31
    eeb4:	12400b26 	beq	r2,r9,eee4 <__ledf2+0x5c>
    eeb8:	42401926 	beq	r8,r9,ef20 <__ledf2+0x98>
    eebc:	10000c1e 	bne	r2,zero,eef0 <__ledf2+0x68>
    eec0:	5112b03a 	or	r9,r10,r4
    eec4:	4813003a 	cmpeq	r9,r9,zero
    eec8:	4817883a 	mov	r11,r9
    eecc:	40000f26 	beq	r8,zero,ef0c <__ledf2+0x84>
    eed0:	39c03fcc 	andi	r7,r7,255
    eed4:	58001826 	beq	r11,zero,ef38 <__ledf2+0xb0>
    eed8:	38000a1e 	bne	r7,zero,ef04 <__ledf2+0x7c>
    eedc:	00bfffc4 	movi	r2,-1
    eee0:	f800283a 	ret
    eee4:	5112b03a 	or	r9,r10,r4
    eee8:	48000f1e 	bne	r9,zero,ef28 <__ledf2+0xa0>
    eeec:	40800c26 	beq	r8,r2,ef20 <__ledf2+0x98>
    eef0:	4000101e 	bne	r8,zero,ef34 <__ledf2+0xac>
    eef4:	1992b03a 	or	r9,r3,r6
    eef8:	0017883a 	mov	r11,zero
    eefc:	483ff41e 	bne	r9,zero,eed0 <__alt_data_end+0xfffb97a0>
    ef00:	283ff61e 	bne	r5,zero,eedc <__alt_data_end+0xfffb97ac>
    ef04:	00800044 	movi	r2,1
    ef08:	f800283a 	ret
    ef0c:	1998b03a 	or	r12,r3,r6
    ef10:	603fef1e 	bne	r12,zero,eed0 <__alt_data_end+0xfffb97a0>
    ef14:	483ffa26 	beq	r9,zero,ef00 <__alt_data_end+0xfffb97d0>
    ef18:	0005883a 	mov	r2,zero
    ef1c:	f800283a 	ret
    ef20:	1992b03a 	or	r9,r3,r6
    ef24:	48000226 	beq	r9,zero,ef30 <__ledf2+0xa8>
    ef28:	00800084 	movi	r2,2
    ef2c:	f800283a 	ret
    ef30:	103fe326 	beq	r2,zero,eec0 <__alt_data_end+0xfffb9790>
    ef34:	39c03fcc 	andi	r7,r7,255
    ef38:	29fff11e 	bne	r5,r7,ef00 <__alt_data_end+0xfffb97d0>
    ef3c:	40bff016 	blt	r8,r2,ef00 <__alt_data_end+0xfffb97d0>
    ef40:	12000316 	blt	r2,r8,ef50 <__ledf2+0xc8>
    ef44:	1abfee36 	bltu	r3,r10,ef00 <__alt_data_end+0xfffb97d0>
    ef48:	50c00326 	beq	r10,r3,ef58 <__ledf2+0xd0>
    ef4c:	50fff22e 	bgeu	r10,r3,ef18 <__alt_data_end+0xfffb97e8>
    ef50:	283fe226 	beq	r5,zero,eedc <__alt_data_end+0xfffb97ac>
    ef54:	003feb06 	br	ef04 <__alt_data_end+0xfffb97d4>
    ef58:	313fe936 	bltu	r6,r4,ef00 <__alt_data_end+0xfffb97d0>
    ef5c:	21bfee2e 	bgeu	r4,r6,ef18 <__alt_data_end+0xfffb97e8>
    ef60:	283fde26 	beq	r5,zero,eedc <__alt_data_end+0xfffb97ac>
    ef64:	003fe706 	br	ef04 <__alt_data_end+0xfffb97d4>

0000ef68 <__muldf3>:
    ef68:	deffee04 	addi	sp,sp,-72
    ef6c:	dd000c15 	stw	r20,48(sp)
    ef70:	2828d53a 	srli	r20,r5,20
    ef74:	dd400d15 	stw	r21,52(sp)
    ef78:	282ad7fa 	srli	r21,r5,31
    ef7c:	dc000815 	stw	r16,32(sp)
    ef80:	04000434 	movhi	r16,16
    ef84:	ddc00f15 	stw	r23,60(sp)
    ef88:	dcc00b15 	stw	r19,44(sp)
    ef8c:	dc800a15 	stw	r18,40(sp)
    ef90:	843fffc4 	addi	r16,r16,-1
    ef94:	dfc01115 	stw	ra,68(sp)
    ef98:	df001015 	stw	fp,64(sp)
    ef9c:	dd800e15 	stw	r22,56(sp)
    efa0:	dc400915 	stw	r17,36(sp)
    efa4:	a501ffcc 	andi	r20,r20,2047
    efa8:	2025883a 	mov	r18,r4
    efac:	202f883a 	mov	r23,r4
    efb0:	2c20703a 	and	r16,r5,r16
    efb4:	a827883a 	mov	r19,r21
    efb8:	aa403fcc 	andi	r9,r21,255
    efbc:	a0005926 	beq	r20,zero,f124 <__muldf3+0x1bc>
    efc0:	0081ffc4 	movi	r2,2047
    efc4:	a0803426 	beq	r20,r2,f098 <__muldf3+0x130>
    efc8:	84000434 	orhi	r16,r16,16
    efcc:	2004d77a 	srli	r2,r4,29
    efd0:	802090fa 	slli	r16,r16,3
    efd4:	202e90fa 	slli	r23,r4,3
    efd8:	a53f0044 	addi	r20,r20,-1023
    efdc:	80a0b03a 	or	r16,r16,r2
    efe0:	000b883a 	mov	r5,zero
    efe4:	0039883a 	mov	fp,zero
    efe8:	3806d53a 	srli	r3,r7,20
    efec:	382cd7fa 	srli	r22,r7,31
    eff0:	00800434 	movhi	r2,16
    eff4:	10bfffc4 	addi	r2,r2,-1
    eff8:	18c1ffcc 	andi	r3,r3,2047
    effc:	3025883a 	mov	r18,r6
    f000:	38a2703a 	and	r17,r7,r2
    f004:	b2803fcc 	andi	r10,r22,255
    f008:	18006426 	beq	r3,zero,f19c <__muldf3+0x234>
    f00c:	0081ffc4 	movi	r2,2047
    f010:	18805c26 	beq	r3,r2,f184 <__muldf3+0x21c>
    f014:	8c400434 	orhi	r17,r17,16
    f018:	3004d77a 	srli	r2,r6,29
    f01c:	882290fa 	slli	r17,r17,3
    f020:	302490fa 	slli	r18,r6,3
    f024:	18ff0044 	addi	r3,r3,-1023
    f028:	88a2b03a 	or	r17,r17,r2
    f02c:	000f883a 	mov	r7,zero
    f030:	394ab03a 	or	r5,r7,r5
    f034:	280a90ba 	slli	r5,r5,2
    f038:	00800074 	movhi	r2,1
    f03c:	10bc1604 	addi	r2,r2,-4008
    f040:	288b883a 	add	r5,r5,r2
    f044:	28800017 	ldw	r2,0(r5)
    f048:	a0c7883a 	add	r3,r20,r3
    f04c:	b54cf03a 	xor	r6,r22,r21
    f050:	1a000044 	addi	r8,r3,1
    f054:	1000683a 	jmp	r2
    f058:	0000f29c 	xori	zero,zero,970
    f05c:	0000f288 	cmpgei	zero,zero,970
    f060:	0000f288 	cmpgei	zero,zero,970
    f064:	0000f274 	movhi	zero,969
    f068:	0000f0b4 	movhi	zero,962
    f06c:	0000f0b4 	movhi	zero,962
    f070:	0000f25c 	xori	zero,zero,969
    f074:	0000f274 	movhi	zero,969
    f078:	0000f0b4 	movhi	zero,962
    f07c:	0000f25c 	xori	zero,zero,969
    f080:	0000f0b4 	movhi	zero,962
    f084:	0000f274 	movhi	zero,969
    f088:	0000f0b8 	rdprs	zero,zero,962
    f08c:	0000f0b8 	rdprs	zero,zero,962
    f090:	0000f0b8 	rdprs	zero,zero,962
    f094:	0000f5d8 	cmpnei	zero,zero,983
    f098:	8104b03a 	or	r2,r16,r4
    f09c:	10006c1e 	bne	r2,zero,f250 <__muldf3+0x2e8>
    f0a0:	01400204 	movi	r5,8
    f0a4:	0021883a 	mov	r16,zero
    f0a8:	002f883a 	mov	r23,zero
    f0ac:	07000084 	movi	fp,2
    f0b0:	003fcd06 	br	efe8 <__alt_data_end+0xfffb98b8>
    f0b4:	3013883a 	mov	r9,r6
    f0b8:	00800084 	movi	r2,2
    f0bc:	e080501e 	bne	fp,r2,f200 <__muldf3+0x298>
    f0c0:	4cc0004c 	andi	r19,r9,1
    f0c4:	0101ffc4 	movi	r4,2047
    f0c8:	0021883a 	mov	r16,zero
    f0cc:	002f883a 	mov	r23,zero
    f0d0:	2008953a 	slli	r4,r4,20
    f0d4:	98c03fcc 	andi	r3,r19,255
    f0d8:	04400434 	movhi	r17,16
    f0dc:	8c7fffc4 	addi	r17,r17,-1
    f0e0:	180697fa 	slli	r3,r3,31
    f0e4:	8460703a 	and	r16,r16,r17
    f0e8:	8120b03a 	or	r16,r16,r4
    f0ec:	80c6b03a 	or	r3,r16,r3
    f0f0:	b805883a 	mov	r2,r23
    f0f4:	dfc01117 	ldw	ra,68(sp)
    f0f8:	df001017 	ldw	fp,64(sp)
    f0fc:	ddc00f17 	ldw	r23,60(sp)
    f100:	dd800e17 	ldw	r22,56(sp)
    f104:	dd400d17 	ldw	r21,52(sp)
    f108:	dd000c17 	ldw	r20,48(sp)
    f10c:	dcc00b17 	ldw	r19,44(sp)
    f110:	dc800a17 	ldw	r18,40(sp)
    f114:	dc400917 	ldw	r17,36(sp)
    f118:	dc000817 	ldw	r16,32(sp)
    f11c:	dec01204 	addi	sp,sp,72
    f120:	f800283a 	ret
    f124:	8104b03a 	or	r2,r16,r4
    f128:	10004426 	beq	r2,zero,f23c <__muldf3+0x2d4>
    f12c:	80014b26 	beq	r16,zero,f65c <__muldf3+0x6f4>
    f130:	8009883a 	mov	r4,r16
    f134:	d9800715 	stw	r6,28(sp)
    f138:	d9c00215 	stw	r7,8(sp)
    f13c:	da400415 	stw	r9,16(sp)
    f140:	00102a00 	call	102a0 <__clzsi2>
    f144:	d9800717 	ldw	r6,28(sp)
    f148:	d9c00217 	ldw	r7,8(sp)
    f14c:	da400417 	ldw	r9,16(sp)
    f150:	1007883a 	mov	r3,r2
    f154:	01000a04 	movi	r4,40
    f158:	1dfffe04 	addi	r23,r3,-8
    f15c:	20c9c83a 	sub	r4,r4,r3
    f160:	85e0983a 	sll	r16,r16,r23
    f164:	9108d83a 	srl	r4,r18,r4
    f168:	95ee983a 	sll	r23,r18,r23
    f16c:	2420b03a 	or	r16,r4,r16
    f170:	053f0344 	movi	r20,-1011
    f174:	a0e9c83a 	sub	r20,r20,r3
    f178:	000b883a 	mov	r5,zero
    f17c:	0039883a 	mov	fp,zero
    f180:	003f9906 	br	efe8 <__alt_data_end+0xfffb98b8>
    f184:	8984b03a 	or	r2,r17,r6
    f188:	10002a1e 	bne	r2,zero,f234 <__muldf3+0x2cc>
    f18c:	0023883a 	mov	r17,zero
    f190:	0025883a 	mov	r18,zero
    f194:	01c00084 	movi	r7,2
    f198:	003fa506 	br	f030 <__alt_data_end+0xfffb9900>
    f19c:	8984b03a 	or	r2,r17,r6
    f1a0:	10002026 	beq	r2,zero,f224 <__muldf3+0x2bc>
    f1a4:	88011c26 	beq	r17,zero,f618 <__muldf3+0x6b0>
    f1a8:	8809883a 	mov	r4,r17
    f1ac:	d9400215 	stw	r5,8(sp)
    f1b0:	d9800715 	stw	r6,28(sp)
    f1b4:	da400415 	stw	r9,16(sp)
    f1b8:	da800315 	stw	r10,12(sp)
    f1bc:	00102a00 	call	102a0 <__clzsi2>
    f1c0:	d9400217 	ldw	r5,8(sp)
    f1c4:	d9800717 	ldw	r6,28(sp)
    f1c8:	da400417 	ldw	r9,16(sp)
    f1cc:	da800317 	ldw	r10,12(sp)
    f1d0:	1007883a 	mov	r3,r2
    f1d4:	01000a04 	movi	r4,40
    f1d8:	1cbffe04 	addi	r18,r3,-8
    f1dc:	20c9c83a 	sub	r4,r4,r3
    f1e0:	8ca2983a 	sll	r17,r17,r18
    f1e4:	3108d83a 	srl	r4,r6,r4
    f1e8:	34a4983a 	sll	r18,r6,r18
    f1ec:	2462b03a 	or	r17,r4,r17
    f1f0:	00bf0344 	movi	r2,-1011
    f1f4:	10c7c83a 	sub	r3,r2,r3
    f1f8:	000f883a 	mov	r7,zero
    f1fc:	003f8c06 	br	f030 <__alt_data_end+0xfffb9900>
    f200:	008000c4 	movi	r2,3
    f204:	e0816d26 	beq	fp,r2,f7bc <__muldf3+0x854>
    f208:	00800044 	movi	r2,1
    f20c:	e081321e 	bne	fp,r2,f6d8 <__muldf3+0x770>
    f210:	48a6703a 	and	r19,r9,r2
    f214:	0009883a 	mov	r4,zero
    f218:	0021883a 	mov	r16,zero
    f21c:	002f883a 	mov	r23,zero
    f220:	003fab06 	br	f0d0 <__alt_data_end+0xfffb99a0>
    f224:	0023883a 	mov	r17,zero
    f228:	0025883a 	mov	r18,zero
    f22c:	01c00044 	movi	r7,1
    f230:	003f7f06 	br	f030 <__alt_data_end+0xfffb9900>
    f234:	01c000c4 	movi	r7,3
    f238:	003f7d06 	br	f030 <__alt_data_end+0xfffb9900>
    f23c:	01400104 	movi	r5,4
    f240:	0021883a 	mov	r16,zero
    f244:	002f883a 	mov	r23,zero
    f248:	07000044 	movi	fp,1
    f24c:	003f6606 	br	efe8 <__alt_data_end+0xfffb98b8>
    f250:	01400304 	movi	r5,12
    f254:	070000c4 	movi	fp,3
    f258:	003f6306 	br	efe8 <__alt_data_end+0xfffb98b8>
    f25c:	04000434 	movhi	r16,16
    f260:	0027883a 	mov	r19,zero
    f264:	843fffc4 	addi	r16,r16,-1
    f268:	05ffffc4 	movi	r23,-1
    f26c:	0101ffc4 	movi	r4,2047
    f270:	003f9706 	br	f0d0 <__alt_data_end+0xfffb99a0>
    f274:	8821883a 	mov	r16,r17
    f278:	902f883a 	mov	r23,r18
    f27c:	5013883a 	mov	r9,r10
    f280:	3839883a 	mov	fp,r7
    f284:	003f8c06 	br	f0b8 <__alt_data_end+0xfffb9988>
    f288:	8821883a 	mov	r16,r17
    f28c:	902f883a 	mov	r23,r18
    f290:	3013883a 	mov	r9,r6
    f294:	3839883a 	mov	fp,r7
    f298:	003f8706 	br	f0b8 <__alt_data_end+0xfffb9988>
    f29c:	b82ad43a 	srli	r21,r23,16
    f2a0:	9038d43a 	srli	fp,r18,16
    f2a4:	bdffffcc 	andi	r23,r23,65535
    f2a8:	94bfffcc 	andi	r18,r18,65535
    f2ac:	9009883a 	mov	r4,r18
    f2b0:	b80b883a 	mov	r5,r23
    f2b4:	d8c00515 	stw	r3,20(sp)
    f2b8:	d9800715 	stw	r6,28(sp)
    f2bc:	da000615 	stw	r8,24(sp)
    f2c0:	000dae00 	call	dae0 <__mulsi3>
    f2c4:	9009883a 	mov	r4,r18
    f2c8:	a80b883a 	mov	r5,r21
    f2cc:	1029883a 	mov	r20,r2
    f2d0:	000dae00 	call	dae0 <__mulsi3>
    f2d4:	e009883a 	mov	r4,fp
    f2d8:	a80b883a 	mov	r5,r21
    f2dc:	102d883a 	mov	r22,r2
    f2e0:	000dae00 	call	dae0 <__mulsi3>
    f2e4:	e009883a 	mov	r4,fp
    f2e8:	b80b883a 	mov	r5,r23
    f2ec:	1027883a 	mov	r19,r2
    f2f0:	000dae00 	call	dae0 <__mulsi3>
    f2f4:	a008d43a 	srli	r4,r20,16
    f2f8:	b085883a 	add	r2,r22,r2
    f2fc:	d8c00517 	ldw	r3,20(sp)
    f300:	110f883a 	add	r7,r2,r4
    f304:	d9800717 	ldw	r6,28(sp)
    f308:	da000617 	ldw	r8,24(sp)
    f30c:	3d80022e 	bgeu	r7,r22,f318 <__muldf3+0x3b0>
    f310:	00800074 	movhi	r2,1
    f314:	98a7883a 	add	r19,r19,r2
    f318:	3804943a 	slli	r2,r7,16
    f31c:	380ed43a 	srli	r7,r7,16
    f320:	882cd43a 	srli	r22,r17,16
    f324:	a53fffcc 	andi	r20,r20,65535
    f328:	8c7fffcc 	andi	r17,r17,65535
    f32c:	1529883a 	add	r20,r2,r20
    f330:	8809883a 	mov	r4,r17
    f334:	b80b883a 	mov	r5,r23
    f338:	d8c00515 	stw	r3,20(sp)
    f33c:	d9800715 	stw	r6,28(sp)
    f340:	da000615 	stw	r8,24(sp)
    f344:	d9c00015 	stw	r7,0(sp)
    f348:	dd000115 	stw	r20,4(sp)
    f34c:	000dae00 	call	dae0 <__mulsi3>
    f350:	a80b883a 	mov	r5,r21
    f354:	8809883a 	mov	r4,r17
    f358:	d8800415 	stw	r2,16(sp)
    f35c:	000dae00 	call	dae0 <__mulsi3>
    f360:	a80b883a 	mov	r5,r21
    f364:	b009883a 	mov	r4,r22
    f368:	1029883a 	mov	r20,r2
    f36c:	000dae00 	call	dae0 <__mulsi3>
    f370:	b009883a 	mov	r4,r22
    f374:	b80b883a 	mov	r5,r23
    f378:	102b883a 	mov	r21,r2
    f37c:	000dae00 	call	dae0 <__mulsi3>
    f380:	da400417 	ldw	r9,16(sp)
    f384:	a085883a 	add	r2,r20,r2
    f388:	d8c00517 	ldw	r3,20(sp)
    f38c:	4808d43a 	srli	r4,r9,16
    f390:	d9800717 	ldw	r6,28(sp)
    f394:	da000617 	ldw	r8,24(sp)
    f398:	1109883a 	add	r4,r2,r4
    f39c:	2500022e 	bgeu	r4,r20,f3a8 <__muldf3+0x440>
    f3a0:	00800074 	movhi	r2,1
    f3a4:	a8ab883a 	add	r21,r21,r2
    f3a8:	200e943a 	slli	r7,r4,16
    f3ac:	2004d43a 	srli	r2,r4,16
    f3b0:	802ed43a 	srli	r23,r16,16
    f3b4:	843fffcc 	andi	r16,r16,65535
    f3b8:	4d3fffcc 	andi	r20,r9,65535
    f3bc:	9009883a 	mov	r4,r18
    f3c0:	800b883a 	mov	r5,r16
    f3c4:	3d29883a 	add	r20,r7,r20
    f3c8:	d8c00515 	stw	r3,20(sp)
    f3cc:	d9800715 	stw	r6,28(sp)
    f3d0:	da000615 	stw	r8,24(sp)
    f3d4:	a8ab883a 	add	r21,r21,r2
    f3d8:	000dae00 	call	dae0 <__mulsi3>
    f3dc:	9009883a 	mov	r4,r18
    f3e0:	b80b883a 	mov	r5,r23
    f3e4:	d8800315 	stw	r2,12(sp)
    f3e8:	000dae00 	call	dae0 <__mulsi3>
    f3ec:	e009883a 	mov	r4,fp
    f3f0:	b80b883a 	mov	r5,r23
    f3f4:	1025883a 	mov	r18,r2
    f3f8:	000dae00 	call	dae0 <__mulsi3>
    f3fc:	e009883a 	mov	r4,fp
    f400:	800b883a 	mov	r5,r16
    f404:	d8800215 	stw	r2,8(sp)
    f408:	000dae00 	call	dae0 <__mulsi3>
    f40c:	da800317 	ldw	r10,12(sp)
    f410:	d9400017 	ldw	r5,0(sp)
    f414:	9085883a 	add	r2,r18,r2
    f418:	5008d43a 	srli	r4,r10,16
    f41c:	a153883a 	add	r9,r20,r5
    f420:	d8c00517 	ldw	r3,20(sp)
    f424:	1109883a 	add	r4,r2,r4
    f428:	d9800717 	ldw	r6,28(sp)
    f42c:	da000617 	ldw	r8,24(sp)
    f430:	dac00217 	ldw	r11,8(sp)
    f434:	2480022e 	bgeu	r4,r18,f440 <__muldf3+0x4d8>
    f438:	00800074 	movhi	r2,1
    f43c:	5897883a 	add	r11,r11,r2
    f440:	200e943a 	slli	r7,r4,16
    f444:	2038d43a 	srli	fp,r4,16
    f448:	52bfffcc 	andi	r10,r10,65535
    f44c:	3a8f883a 	add	r7,r7,r10
    f450:	8809883a 	mov	r4,r17
    f454:	800b883a 	mov	r5,r16
    f458:	d8c00515 	stw	r3,20(sp)
    f45c:	d9800715 	stw	r6,28(sp)
    f460:	d9c00215 	stw	r7,8(sp)
    f464:	da000615 	stw	r8,24(sp)
    f468:	da400415 	stw	r9,16(sp)
    f46c:	5f39883a 	add	fp,r11,fp
    f470:	000dae00 	call	dae0 <__mulsi3>
    f474:	8809883a 	mov	r4,r17
    f478:	b80b883a 	mov	r5,r23
    f47c:	1025883a 	mov	r18,r2
    f480:	000dae00 	call	dae0 <__mulsi3>
    f484:	b009883a 	mov	r4,r22
    f488:	b80b883a 	mov	r5,r23
    f48c:	d8800315 	stw	r2,12(sp)
    f490:	000dae00 	call	dae0 <__mulsi3>
    f494:	b009883a 	mov	r4,r22
    f498:	800b883a 	mov	r5,r16
    f49c:	1023883a 	mov	r17,r2
    f4a0:	000dae00 	call	dae0 <__mulsi3>
    f4a4:	da800317 	ldw	r10,12(sp)
    f4a8:	9008d43a 	srli	r4,r18,16
    f4ac:	d8c00517 	ldw	r3,20(sp)
    f4b0:	5085883a 	add	r2,r10,r2
    f4b4:	1109883a 	add	r4,r2,r4
    f4b8:	d9800717 	ldw	r6,28(sp)
    f4bc:	d9c00217 	ldw	r7,8(sp)
    f4c0:	da000617 	ldw	r8,24(sp)
    f4c4:	da400417 	ldw	r9,16(sp)
    f4c8:	2280022e 	bgeu	r4,r10,f4d4 <__muldf3+0x56c>
    f4cc:	00800074 	movhi	r2,1
    f4d0:	88a3883a 	add	r17,r17,r2
    f4d4:	2004943a 	slli	r2,r4,16
    f4d8:	94bfffcc 	andi	r18,r18,65535
    f4dc:	4ce7883a 	add	r19,r9,r19
    f4e0:	14a5883a 	add	r18,r2,r18
    f4e4:	9d29803a 	cmpltu	r20,r19,r20
    f4e8:	9565883a 	add	r18,r18,r21
    f4ec:	9505883a 	add	r2,r18,r20
    f4f0:	99e7883a 	add	r19,r19,r7
    f4f4:	99cf803a 	cmpltu	r7,r19,r7
    f4f8:	e08b883a 	add	r5,fp,r2
    f4fc:	2008d43a 	srli	r4,r4,16
    f500:	29ef883a 	add	r23,r5,r7
    f504:	1529803a 	cmpltu	r20,r2,r20
    f508:	956b803a 	cmpltu	r21,r18,r21
    f50c:	b9cf803a 	cmpltu	r7,r23,r7
    f510:	a564b03a 	or	r18,r20,r21
    f514:	2f39803a 	cmpltu	fp,r5,fp
    f518:	9125883a 	add	r18,r18,r4
    f51c:	3f38b03a 	or	fp,r7,fp
    f520:	9725883a 	add	r18,r18,fp
    f524:	9804927a 	slli	r2,r19,9
    f528:	9463883a 	add	r17,r18,r17
    f52c:	d9000117 	ldw	r4,4(sp)
    f530:	b820d5fa 	srli	r16,r23,23
    f534:	8822927a 	slli	r17,r17,9
    f538:	9826d5fa 	srli	r19,r19,23
    f53c:	1104b03a 	or	r2,r2,r4
    f540:	b82e927a 	slli	r23,r23,9
    f544:	1004c03a 	cmpne	r2,r2,zero
    f548:	8c20b03a 	or	r16,r17,r16
    f54c:	14e6b03a 	or	r19,r2,r19
    f550:	8080402c 	andhi	r2,r16,256
    f554:	9deeb03a 	or	r23,r19,r23
    f558:	10000726 	beq	r2,zero,f578 <__muldf3+0x610>
    f55c:	b804d07a 	srli	r2,r23,1
    f560:	800697fa 	slli	r3,r16,31
    f564:	bdc0004c 	andi	r23,r23,1
    f568:	8020d07a 	srli	r16,r16,1
    f56c:	b8aeb03a 	or	r23,r23,r2
    f570:	b8eeb03a 	or	r23,r23,r3
    f574:	4007883a 	mov	r3,r8
    f578:	1900ffc4 	addi	r4,r3,1023
    f57c:	01004d0e 	bge	zero,r4,f6b4 <__muldf3+0x74c>
    f580:	b88001cc 	andi	r2,r23,7
    f584:	10000726 	beq	r2,zero,f5a4 <__muldf3+0x63c>
    f588:	b94003cc 	andi	r5,r23,15
    f58c:	00800104 	movi	r2,4
    f590:	28800426 	beq	r5,r2,f5a4 <__muldf3+0x63c>
    f594:	b885883a 	add	r2,r23,r2
    f598:	15ef803a 	cmpltu	r23,r2,r23
    f59c:	85e1883a 	add	r16,r16,r23
    f5a0:	102f883a 	mov	r23,r2
    f5a4:	8080402c 	andhi	r2,r16,256
    f5a8:	10000426 	beq	r2,zero,f5bc <__muldf3+0x654>
    f5ac:	00bfc034 	movhi	r2,65280
    f5b0:	10bfffc4 	addi	r2,r2,-1
    f5b4:	19010004 	addi	r4,r3,1024
    f5b8:	80a0703a 	and	r16,r16,r2
    f5bc:	0081ff84 	movi	r2,2046
    f5c0:	1100340e 	bge	r2,r4,f694 <__muldf3+0x72c>
    f5c4:	34c0004c 	andi	r19,r6,1
    f5c8:	0101ffc4 	movi	r4,2047
    f5cc:	0021883a 	mov	r16,zero
    f5d0:	002f883a 	mov	r23,zero
    f5d4:	003ebe06 	br	f0d0 <__alt_data_end+0xfffb99a0>
    f5d8:	8080022c 	andhi	r2,r16,8
    f5dc:	10000926 	beq	r2,zero,f604 <__muldf3+0x69c>
    f5e0:	8880022c 	andhi	r2,r17,8
    f5e4:	1000071e 	bne	r2,zero,f604 <__muldf3+0x69c>
    f5e8:	00800434 	movhi	r2,16
    f5ec:	8c000234 	orhi	r16,r17,8
    f5f0:	10bfffc4 	addi	r2,r2,-1
    f5f4:	b027883a 	mov	r19,r22
    f5f8:	80a0703a 	and	r16,r16,r2
    f5fc:	902f883a 	mov	r23,r18
    f600:	003f1a06 	br	f26c <__alt_data_end+0xfffb9b3c>
    f604:	00800434 	movhi	r2,16
    f608:	84000234 	orhi	r16,r16,8
    f60c:	10bfffc4 	addi	r2,r2,-1
    f610:	80a0703a 	and	r16,r16,r2
    f614:	003f1506 	br	f26c <__alt_data_end+0xfffb9b3c>
    f618:	3009883a 	mov	r4,r6
    f61c:	d9400215 	stw	r5,8(sp)
    f620:	d9800715 	stw	r6,28(sp)
    f624:	da400415 	stw	r9,16(sp)
    f628:	da800315 	stw	r10,12(sp)
    f62c:	00102a00 	call	102a0 <__clzsi2>
    f630:	10c00804 	addi	r3,r2,32
    f634:	010009c4 	movi	r4,39
    f638:	d9400217 	ldw	r5,8(sp)
    f63c:	d9800717 	ldw	r6,28(sp)
    f640:	da400417 	ldw	r9,16(sp)
    f644:	da800317 	ldw	r10,12(sp)
    f648:	20fee20e 	bge	r4,r3,f1d4 <__alt_data_end+0xfffb9aa4>
    f64c:	147ffe04 	addi	r17,r2,-8
    f650:	9462983a 	sll	r17,r18,r17
    f654:	0025883a 	mov	r18,zero
    f658:	003ee506 	br	f1f0 <__alt_data_end+0xfffb9ac0>
    f65c:	d9800715 	stw	r6,28(sp)
    f660:	d9c00215 	stw	r7,8(sp)
    f664:	da400415 	stw	r9,16(sp)
    f668:	00102a00 	call	102a0 <__clzsi2>
    f66c:	10c00804 	addi	r3,r2,32
    f670:	010009c4 	movi	r4,39
    f674:	d9800717 	ldw	r6,28(sp)
    f678:	d9c00217 	ldw	r7,8(sp)
    f67c:	da400417 	ldw	r9,16(sp)
    f680:	20feb40e 	bge	r4,r3,f154 <__alt_data_end+0xfffb9a24>
    f684:	143ffe04 	addi	r16,r2,-8
    f688:	9420983a 	sll	r16,r18,r16
    f68c:	002f883a 	mov	r23,zero
    f690:	003eb706 	br	f170 <__alt_data_end+0xfffb9a40>
    f694:	8004977a 	slli	r2,r16,29
    f698:	b82ed0fa 	srli	r23,r23,3
    f69c:	8020927a 	slli	r16,r16,9
    f6a0:	2101ffcc 	andi	r4,r4,2047
    f6a4:	15eeb03a 	or	r23,r2,r23
    f6a8:	8020d33a 	srli	r16,r16,12
    f6ac:	34c0004c 	andi	r19,r6,1
    f6b0:	003e8706 	br	f0d0 <__alt_data_end+0xfffb99a0>
    f6b4:	00bf0084 	movi	r2,-1022
    f6b8:	10c5c83a 	sub	r2,r2,r3
    f6bc:	01000e04 	movi	r4,56
    f6c0:	2080080e 	bge	r4,r2,f6e4 <__muldf3+0x77c>
    f6c4:	34c0004c 	andi	r19,r6,1
    f6c8:	0009883a 	mov	r4,zero
    f6cc:	0021883a 	mov	r16,zero
    f6d0:	002f883a 	mov	r23,zero
    f6d4:	003e7e06 	br	f0d0 <__alt_data_end+0xfffb99a0>
    f6d8:	4007883a 	mov	r3,r8
    f6dc:	480d883a 	mov	r6,r9
    f6e0:	003fa506 	br	f578 <__alt_data_end+0xfffb9e48>
    f6e4:	010007c4 	movi	r4,31
    f6e8:	20801816 	blt	r4,r2,f74c <__muldf3+0x7e4>
    f6ec:	18c10784 	addi	r3,r3,1054
    f6f0:	80c8983a 	sll	r4,r16,r3
    f6f4:	b88ad83a 	srl	r5,r23,r2
    f6f8:	b8c6983a 	sll	r3,r23,r3
    f6fc:	80a0d83a 	srl	r16,r16,r2
    f700:	2908b03a 	or	r4,r5,r4
    f704:	1804c03a 	cmpne	r2,r3,zero
    f708:	2088b03a 	or	r4,r4,r2
    f70c:	208001cc 	andi	r2,r4,7
    f710:	10000726 	beq	r2,zero,f730 <__muldf3+0x7c8>
    f714:	20c003cc 	andi	r3,r4,15
    f718:	00800104 	movi	r2,4
    f71c:	18800426 	beq	r3,r2,f730 <__muldf3+0x7c8>
    f720:	20c00104 	addi	r3,r4,4
    f724:	1905803a 	cmpltu	r2,r3,r4
    f728:	80a1883a 	add	r16,r16,r2
    f72c:	1809883a 	mov	r4,r3
    f730:	8080202c 	andhi	r2,r16,128
    f734:	10001b26 	beq	r2,zero,f7a4 <__muldf3+0x83c>
    f738:	34c0004c 	andi	r19,r6,1
    f73c:	01000044 	movi	r4,1
    f740:	0021883a 	mov	r16,zero
    f744:	002f883a 	mov	r23,zero
    f748:	003e6106 	br	f0d0 <__alt_data_end+0xfffb99a0>
    f74c:	013ef884 	movi	r4,-1054
    f750:	20c9c83a 	sub	r4,r4,r3
    f754:	01400804 	movi	r5,32
    f758:	8108d83a 	srl	r4,r16,r4
    f75c:	11401526 	beq	r2,r5,f7b4 <__muldf3+0x84c>
    f760:	18c10f84 	addi	r3,r3,1086
    f764:	80e0983a 	sll	r16,r16,r3
    f768:	85eeb03a 	or	r23,r16,r23
    f76c:	b804c03a 	cmpne	r2,r23,zero
    f770:	1108b03a 	or	r4,r2,r4
    f774:	20c001cc 	andi	r3,r4,7
    f778:	1800061e 	bne	r3,zero,f794 <__muldf3+0x82c>
    f77c:	0021883a 	mov	r16,zero
    f780:	202ed0fa 	srli	r23,r4,3
    f784:	34c0004c 	andi	r19,r6,1
    f788:	0009883a 	mov	r4,zero
    f78c:	b8eeb03a 	or	r23,r23,r3
    f790:	003e4f06 	br	f0d0 <__alt_data_end+0xfffb99a0>
    f794:	20c003cc 	andi	r3,r4,15
    f798:	00800104 	movi	r2,4
    f79c:	0021883a 	mov	r16,zero
    f7a0:	18bfdf1e 	bne	r3,r2,f720 <__alt_data_end+0xfffb9ff0>
    f7a4:	8004927a 	slli	r2,r16,9
    f7a8:	8006977a 	slli	r3,r16,29
    f7ac:	1020d33a 	srli	r16,r2,12
    f7b0:	003ff306 	br	f780 <__alt_data_end+0xfffba050>
    f7b4:	0021883a 	mov	r16,zero
    f7b8:	003feb06 	br	f768 <__alt_data_end+0xfffba038>
    f7bc:	00800434 	movhi	r2,16
    f7c0:	84000234 	orhi	r16,r16,8
    f7c4:	10bfffc4 	addi	r2,r2,-1
    f7c8:	4cc0004c 	andi	r19,r9,1
    f7cc:	80a0703a 	and	r16,r16,r2
    f7d0:	003ea606 	br	f26c <__alt_data_end+0xfffb9b3c>

0000f7d4 <__subdf3>:
    f7d4:	00c00434 	movhi	r3,16
    f7d8:	18ffffc4 	addi	r3,r3,-1
    f7dc:	defffb04 	addi	sp,sp,-20
    f7e0:	28d2703a 	and	r9,r5,r3
    f7e4:	3814d53a 	srli	r10,r7,20
    f7e8:	38c6703a 	and	r3,r7,r3
    f7ec:	3004d77a 	srli	r2,r6,29
    f7f0:	dc800215 	stw	r18,8(sp)
    f7f4:	dc000015 	stw	r16,0(sp)
    f7f8:	2824d7fa 	srli	r18,r5,31
    f7fc:	2820d53a 	srli	r16,r5,20
    f800:	481290fa 	slli	r9,r9,3
    f804:	200ad77a 	srli	r5,r4,29
    f808:	180690fa 	slli	r3,r3,3
    f80c:	dc400115 	stw	r17,4(sp)
    f810:	dfc00415 	stw	ra,16(sp)
    f814:	202290fa 	slli	r17,r4,3
    f818:	dcc00315 	stw	r19,12(sp)
    f81c:	5281ffcc 	andi	r10,r10,2047
    f820:	0101ffc4 	movi	r4,2047
    f824:	9011883a 	mov	r8,r18
    f828:	8401ffcc 	andi	r16,r16,2047
    f82c:	94803fcc 	andi	r18,r18,255
    f830:	494ab03a 	or	r5,r9,r5
    f834:	380ed7fa 	srli	r7,r7,31
    f838:	1886b03a 	or	r3,r3,r2
    f83c:	300c90fa 	slli	r6,r6,3
    f840:	51009026 	beq	r10,r4,fa84 <__subdf3+0x2b0>
    f844:	39c0005c 	xori	r7,r7,1
    f848:	8285c83a 	sub	r2,r16,r10
    f84c:	91c06f26 	beq	r18,r7,fa0c <__subdf3+0x238>
    f850:	0080b10e 	bge	zero,r2,fb18 <__subdf3+0x344>
    f854:	50002a1e 	bne	r10,zero,f900 <__subdf3+0x12c>
    f858:	1988b03a 	or	r4,r3,r6
    f85c:	2000941e 	bne	r4,zero,fab0 <__subdf3+0x2dc>
    f860:	888001cc 	andi	r2,r17,7
    f864:	10005b26 	beq	r2,zero,f9d4 <__subdf3+0x200>
    f868:	88c003cc 	andi	r3,r17,15
    f86c:	00800104 	movi	r2,4
    f870:	18805826 	beq	r3,r2,f9d4 <__subdf3+0x200>
    f874:	88c00104 	addi	r3,r17,4
    f878:	1c63803a 	cmpltu	r17,r3,r17
    f87c:	2c4b883a 	add	r5,r5,r17
    f880:	2880202c 	andhi	r2,r5,128
    f884:	9200004c 	andi	r8,r18,1
    f888:	1823883a 	mov	r17,r3
    f88c:	10005426 	beq	r2,zero,f9e0 <__subdf3+0x20c>
    f890:	84000044 	addi	r16,r16,1
    f894:	0081ffc4 	movi	r2,2047
    f898:	8080bf26 	beq	r16,r2,fb98 <__subdf3+0x3c4>
    f89c:	013fe034 	movhi	r4,65408
    f8a0:	213fffc4 	addi	r4,r4,-1
    f8a4:	290a703a 	and	r5,r5,r4
    f8a8:	2804977a 	slli	r2,r5,29
    f8ac:	280a927a 	slli	r5,r5,9
    f8b0:	8822d0fa 	srli	r17,r17,3
    f8b4:	8401ffcc 	andi	r16,r16,2047
    f8b8:	2808d33a 	srli	r4,r5,12
    f8bc:	1444b03a 	or	r2,r2,r17
    f8c0:	8401ffcc 	andi	r16,r16,2047
    f8c4:	800a953a 	slli	r5,r16,20
    f8c8:	40c03fcc 	andi	r3,r8,255
    f8cc:	04000434 	movhi	r16,16
    f8d0:	180697fa 	slli	r3,r3,31
    f8d4:	843fffc4 	addi	r16,r16,-1
    f8d8:	2420703a 	and	r16,r4,r16
    f8dc:	8160b03a 	or	r16,r16,r5
    f8e0:	80c6b03a 	or	r3,r16,r3
    f8e4:	dfc00417 	ldw	ra,16(sp)
    f8e8:	dcc00317 	ldw	r19,12(sp)
    f8ec:	dc800217 	ldw	r18,8(sp)
    f8f0:	dc400117 	ldw	r17,4(sp)
    f8f4:	dc000017 	ldw	r16,0(sp)
    f8f8:	dec00504 	addi	sp,sp,20
    f8fc:	f800283a 	ret
    f900:	0101ffc4 	movi	r4,2047
    f904:	813fd626 	beq	r16,r4,f860 <__alt_data_end+0xfffba130>
    f908:	18c02034 	orhi	r3,r3,128
    f90c:	01000e04 	movi	r4,56
    f910:	2080a416 	blt	r4,r2,fba4 <__subdf3+0x3d0>
    f914:	010007c4 	movi	r4,31
    f918:	2080c716 	blt	r4,r2,fc38 <__subdf3+0x464>
    f91c:	01000804 	movi	r4,32
    f920:	2089c83a 	sub	r4,r4,r2
    f924:	1910983a 	sll	r8,r3,r4
    f928:	308ed83a 	srl	r7,r6,r2
    f92c:	3108983a 	sll	r4,r6,r4
    f930:	1884d83a 	srl	r2,r3,r2
    f934:	41ccb03a 	or	r6,r8,r7
    f938:	2008c03a 	cmpne	r4,r4,zero
    f93c:	310cb03a 	or	r6,r6,r4
    f940:	898dc83a 	sub	r6,r17,r6
    f944:	89a3803a 	cmpltu	r17,r17,r6
    f948:	288bc83a 	sub	r5,r5,r2
    f94c:	2c4bc83a 	sub	r5,r5,r17
    f950:	3023883a 	mov	r17,r6
    f954:	2880202c 	andhi	r2,r5,128
    f958:	10006b26 	beq	r2,zero,fb08 <__subdf3+0x334>
    f95c:	04c02034 	movhi	r19,128
    f960:	9cffffc4 	addi	r19,r19,-1
    f964:	2ce6703a 	and	r19,r5,r19
    f968:	98007c26 	beq	r19,zero,fb5c <__subdf3+0x388>
    f96c:	9809883a 	mov	r4,r19
    f970:	00102a00 	call	102a0 <__clzsi2>
    f974:	10fffe04 	addi	r3,r2,-8
    f978:	010007c4 	movi	r4,31
    f97c:	20c07d16 	blt	r4,r3,fb74 <__subdf3+0x3a0>
    f980:	01400a04 	movi	r5,40
    f984:	2885c83a 	sub	r2,r5,r2
    f988:	888ad83a 	srl	r5,r17,r2
    f98c:	98e6983a 	sll	r19,r19,r3
    f990:	88e2983a 	sll	r17,r17,r3
    f994:	2ce6b03a 	or	r19,r5,r19
    f998:	1c007a16 	blt	r3,r16,fb84 <__subdf3+0x3b0>
    f99c:	1c21c83a 	sub	r16,r3,r16
    f9a0:	81400044 	addi	r5,r16,1
    f9a4:	00c007c4 	movi	r3,31
    f9a8:	19409616 	blt	r3,r5,fc04 <__subdf3+0x430>
    f9ac:	1c21c83a 	sub	r16,r3,r16
    f9b0:	8c08983a 	sll	r4,r17,r16
    f9b4:	8946d83a 	srl	r3,r17,r5
    f9b8:	9c20983a 	sll	r16,r19,r16
    f9bc:	2008c03a 	cmpne	r4,r4,zero
    f9c0:	994ad83a 	srl	r5,r19,r5
    f9c4:	1c06b03a 	or	r3,r3,r16
    f9c8:	1922b03a 	or	r17,r3,r4
    f9cc:	0021883a 	mov	r16,zero
    f9d0:	003fa306 	br	f860 <__alt_data_end+0xfffba130>
    f9d4:	2880202c 	andhi	r2,r5,128
    f9d8:	9200004c 	andi	r8,r18,1
    f9dc:	103fac1e 	bne	r2,zero,f890 <__alt_data_end+0xfffba160>
    f9e0:	2804977a 	slli	r2,r5,29
    f9e4:	8822d0fa 	srli	r17,r17,3
    f9e8:	00c1ffc4 	movi	r3,2047
    f9ec:	280ad0fa 	srli	r5,r5,3
    f9f0:	1444b03a 	or	r2,r2,r17
    f9f4:	80c02726 	beq	r16,r3,fa94 <__subdf3+0x2c0>
    f9f8:	01000434 	movhi	r4,16
    f9fc:	213fffc4 	addi	r4,r4,-1
    fa00:	80e0703a 	and	r16,r16,r3
    fa04:	2908703a 	and	r4,r5,r4
    fa08:	003fad06 	br	f8c0 <__alt_data_end+0xfffba190>
    fa0c:	0080690e 	bge	zero,r2,fbb4 <__subdf3+0x3e0>
    fa10:	50002f26 	beq	r10,zero,fad0 <__subdf3+0x2fc>
    fa14:	0101ffc4 	movi	r4,2047
    fa18:	813f9126 	beq	r16,r4,f860 <__alt_data_end+0xfffba130>
    fa1c:	18c02034 	orhi	r3,r3,128
    fa20:	01000e04 	movi	r4,56
    fa24:	2080b00e 	bge	r4,r2,fce8 <__subdf3+0x514>
    fa28:	198cb03a 	or	r6,r3,r6
    fa2c:	300ec03a 	cmpne	r7,r6,zero
    fa30:	0005883a 	mov	r2,zero
    fa34:	3c4f883a 	add	r7,r7,r17
    fa38:	3c63803a 	cmpltu	r17,r7,r17
    fa3c:	114b883a 	add	r5,r2,r5
    fa40:	2c4b883a 	add	r5,r5,r17
    fa44:	3823883a 	mov	r17,r7
    fa48:	2880202c 	andhi	r2,r5,128
    fa4c:	10002e26 	beq	r2,zero,fb08 <__subdf3+0x334>
    fa50:	84000044 	addi	r16,r16,1
    fa54:	0081ffc4 	movi	r2,2047
    fa58:	8080de26 	beq	r16,r2,fdd4 <__subdf3+0x600>
    fa5c:	00bfe034 	movhi	r2,65408
    fa60:	10bfffc4 	addi	r2,r2,-1
    fa64:	288a703a 	and	r5,r5,r2
    fa68:	880cd07a 	srli	r6,r17,1
    fa6c:	280897fa 	slli	r4,r5,31
    fa70:	88c0004c 	andi	r3,r17,1
    fa74:	30e2b03a 	or	r17,r6,r3
    fa78:	280ad07a 	srli	r5,r5,1
    fa7c:	8922b03a 	or	r17,r17,r4
    fa80:	003f7706 	br	f860 <__alt_data_end+0xfffba130>
    fa84:	1984b03a 	or	r2,r3,r6
    fa88:	103f6e26 	beq	r2,zero,f844 <__alt_data_end+0xfffba114>
    fa8c:	39c03fcc 	andi	r7,r7,255
    fa90:	003f6d06 	br	f848 <__alt_data_end+0xfffba118>
    fa94:	1146b03a 	or	r3,r2,r5
    fa98:	18003f26 	beq	r3,zero,fb98 <__subdf3+0x3c4>
    fa9c:	00c00434 	movhi	r3,16
    faa0:	29000234 	orhi	r4,r5,8
    faa4:	18ffffc4 	addi	r3,r3,-1
    faa8:	20c8703a 	and	r4,r4,r3
    faac:	003f8406 	br	f8c0 <__alt_data_end+0xfffba190>
    fab0:	10bfffc4 	addi	r2,r2,-1
    fab4:	1000501e 	bne	r2,zero,fbf8 <__subdf3+0x424>
    fab8:	898fc83a 	sub	r7,r17,r6
    fabc:	89e3803a 	cmpltu	r17,r17,r7
    fac0:	28cbc83a 	sub	r5,r5,r3
    fac4:	2c4bc83a 	sub	r5,r5,r17
    fac8:	3823883a 	mov	r17,r7
    facc:	003fa106 	br	f954 <__alt_data_end+0xfffba224>
    fad0:	1988b03a 	or	r4,r3,r6
    fad4:	203f6226 	beq	r4,zero,f860 <__alt_data_end+0xfffba130>
    fad8:	10bfffc4 	addi	r2,r2,-1
    fadc:	10009b1e 	bne	r2,zero,fd4c <__subdf3+0x578>
    fae0:	344d883a 	add	r6,r6,r17
    fae4:	3463803a 	cmpltu	r17,r6,r17
    fae8:	194b883a 	add	r5,r3,r5
    faec:	2c4b883a 	add	r5,r5,r17
    faf0:	3023883a 	mov	r17,r6
    faf4:	003fd406 	br	fa48 <__alt_data_end+0xfffba318>
    faf8:	1106b03a 	or	r3,r2,r4
    fafc:	1800b426 	beq	r3,zero,fdd0 <__subdf3+0x5fc>
    fb00:	100b883a 	mov	r5,r2
    fb04:	2023883a 	mov	r17,r4
    fb08:	888001cc 	andi	r2,r17,7
    fb0c:	103f561e 	bne	r2,zero,f868 <__alt_data_end+0xfffba138>
    fb10:	9200004c 	andi	r8,r18,1
    fb14:	003fb206 	br	f9e0 <__alt_data_end+0xfffba2b0>
    fb18:	1000531e 	bne	r2,zero,fc68 <__subdf3+0x494>
    fb1c:	80800044 	addi	r2,r16,1
    fb20:	1081ffcc 	andi	r2,r2,2047
    fb24:	01000044 	movi	r4,1
    fb28:	2080a00e 	bge	r4,r2,fdac <__subdf3+0x5d8>
    fb2c:	8985c83a 	sub	r2,r17,r6
    fb30:	8889803a 	cmpltu	r4,r17,r2
    fb34:	28e7c83a 	sub	r19,r5,r3
    fb38:	9927c83a 	sub	r19,r19,r4
    fb3c:	9900202c 	andhi	r4,r19,128
    fb40:	20006226 	beq	r4,zero,fccc <__subdf3+0x4f8>
    fb44:	3463c83a 	sub	r17,r6,r17
    fb48:	194bc83a 	sub	r5,r3,r5
    fb4c:	344d803a 	cmpltu	r6,r6,r17
    fb50:	29a7c83a 	sub	r19,r5,r6
    fb54:	3825883a 	mov	r18,r7
    fb58:	983f841e 	bne	r19,zero,f96c <__alt_data_end+0xfffba23c>
    fb5c:	8809883a 	mov	r4,r17
    fb60:	00102a00 	call	102a0 <__clzsi2>
    fb64:	10800804 	addi	r2,r2,32
    fb68:	10fffe04 	addi	r3,r2,-8
    fb6c:	010007c4 	movi	r4,31
    fb70:	20ff830e 	bge	r4,r3,f980 <__alt_data_end+0xfffba250>
    fb74:	14fff604 	addi	r19,r2,-40
    fb78:	8ce6983a 	sll	r19,r17,r19
    fb7c:	0023883a 	mov	r17,zero
    fb80:	1c3f860e 	bge	r3,r16,f99c <__alt_data_end+0xfffba26c>
    fb84:	017fe034 	movhi	r5,65408
    fb88:	297fffc4 	addi	r5,r5,-1
    fb8c:	80e1c83a 	sub	r16,r16,r3
    fb90:	994a703a 	and	r5,r19,r5
    fb94:	003f3206 	br	f860 <__alt_data_end+0xfffba130>
    fb98:	0009883a 	mov	r4,zero
    fb9c:	0005883a 	mov	r2,zero
    fba0:	003f4706 	br	f8c0 <__alt_data_end+0xfffba190>
    fba4:	198cb03a 	or	r6,r3,r6
    fba8:	300cc03a 	cmpne	r6,r6,zero
    fbac:	0005883a 	mov	r2,zero
    fbb0:	003f6306 	br	f940 <__alt_data_end+0xfffba210>
    fbb4:	10009d1e 	bne	r2,zero,fe2c <__subdf3+0x658>
    fbb8:	81c00044 	addi	r7,r16,1
    fbbc:	3881ffcc 	andi	r2,r7,2047
    fbc0:	02400044 	movi	r9,1
    fbc4:	4880680e 	bge	r9,r2,fd68 <__subdf3+0x594>
    fbc8:	0081ffc4 	movi	r2,2047
    fbcc:	3880ae26 	beq	r7,r2,fe88 <__subdf3+0x6b4>
    fbd0:	344d883a 	add	r6,r6,r17
    fbd4:	3463803a 	cmpltu	r17,r6,r17
    fbd8:	194b883a 	add	r5,r3,r5
    fbdc:	2c4b883a 	add	r5,r5,r17
    fbe0:	282297fa 	slli	r17,r5,31
    fbe4:	300cd07a 	srli	r6,r6,1
    fbe8:	280ad07a 	srli	r5,r5,1
    fbec:	3821883a 	mov	r16,r7
    fbf0:	89a2b03a 	or	r17,r17,r6
    fbf4:	003f1a06 	br	f860 <__alt_data_end+0xfffba130>
    fbf8:	0101ffc4 	movi	r4,2047
    fbfc:	813f431e 	bne	r16,r4,f90c <__alt_data_end+0xfffba1dc>
    fc00:	003f1706 	br	f860 <__alt_data_end+0xfffba130>
    fc04:	80bff844 	addi	r2,r16,-31
    fc08:	00c00804 	movi	r3,32
    fc0c:	9884d83a 	srl	r2,r19,r2
    fc10:	28c05126 	beq	r5,r3,fd58 <__subdf3+0x584>
    fc14:	00c00fc4 	movi	r3,63
    fc18:	1c21c83a 	sub	r16,r3,r16
    fc1c:	9c26983a 	sll	r19,r19,r16
    fc20:	9c62b03a 	or	r17,r19,r17
    fc24:	8822c03a 	cmpne	r17,r17,zero
    fc28:	88a2b03a 	or	r17,r17,r2
    fc2c:	000b883a 	mov	r5,zero
    fc30:	0021883a 	mov	r16,zero
    fc34:	003fb406 	br	fb08 <__alt_data_end+0xfffba3d8>
    fc38:	113ff804 	addi	r4,r2,-32
    fc3c:	01c00804 	movi	r7,32
    fc40:	1908d83a 	srl	r4,r3,r4
    fc44:	11c04626 	beq	r2,r7,fd60 <__subdf3+0x58c>
    fc48:	01c01004 	movi	r7,64
    fc4c:	3885c83a 	sub	r2,r7,r2
    fc50:	1884983a 	sll	r2,r3,r2
    fc54:	118cb03a 	or	r6,r2,r6
    fc58:	300cc03a 	cmpne	r6,r6,zero
    fc5c:	310cb03a 	or	r6,r6,r4
    fc60:	0005883a 	mov	r2,zero
    fc64:	003f3606 	br	f940 <__alt_data_end+0xfffba210>
    fc68:	80002b26 	beq	r16,zero,fd18 <__subdf3+0x544>
    fc6c:	0101ffc4 	movi	r4,2047
    fc70:	51006926 	beq	r10,r4,fe18 <__subdf3+0x644>
    fc74:	0085c83a 	sub	r2,zero,r2
    fc78:	29402034 	orhi	r5,r5,128
    fc7c:	01000e04 	movi	r4,56
    fc80:	20807d16 	blt	r4,r2,fe78 <__subdf3+0x6a4>
    fc84:	010007c4 	movi	r4,31
    fc88:	2080d916 	blt	r4,r2,fff0 <__subdf3+0x81c>
    fc8c:	01000804 	movi	r4,32
    fc90:	2089c83a 	sub	r4,r4,r2
    fc94:	2912983a 	sll	r9,r5,r4
    fc98:	8890d83a 	srl	r8,r17,r2
    fc9c:	8908983a 	sll	r4,r17,r4
    fca0:	2884d83a 	srl	r2,r5,r2
    fca4:	4a22b03a 	or	r17,r9,r8
    fca8:	2008c03a 	cmpne	r4,r4,zero
    fcac:	8922b03a 	or	r17,r17,r4
    fcb0:	3463c83a 	sub	r17,r6,r17
    fcb4:	1885c83a 	sub	r2,r3,r2
    fcb8:	344d803a 	cmpltu	r6,r6,r17
    fcbc:	118bc83a 	sub	r5,r2,r6
    fcc0:	5021883a 	mov	r16,r10
    fcc4:	3825883a 	mov	r18,r7
    fcc8:	003f2206 	br	f954 <__alt_data_end+0xfffba224>
    fccc:	9886b03a 	or	r3,r19,r2
    fcd0:	18001c1e 	bne	r3,zero,fd44 <__subdf3+0x570>
    fcd4:	0011883a 	mov	r8,zero
    fcd8:	000b883a 	mov	r5,zero
    fcdc:	0023883a 	mov	r17,zero
    fce0:	0021883a 	mov	r16,zero
    fce4:	003f3e06 	br	f9e0 <__alt_data_end+0xfffba2b0>
    fce8:	010007c4 	movi	r4,31
    fcec:	20803c16 	blt	r4,r2,fde0 <__subdf3+0x60c>
    fcf0:	01000804 	movi	r4,32
    fcf4:	2089c83a 	sub	r4,r4,r2
    fcf8:	1912983a 	sll	r9,r3,r4
    fcfc:	308ed83a 	srl	r7,r6,r2
    fd00:	3108983a 	sll	r4,r6,r4
    fd04:	1884d83a 	srl	r2,r3,r2
    fd08:	49ceb03a 	or	r7,r9,r7
    fd0c:	2008c03a 	cmpne	r4,r4,zero
    fd10:	390eb03a 	or	r7,r7,r4
    fd14:	003f4706 	br	fa34 <__alt_data_end+0xfffba304>
    fd18:	2c48b03a 	or	r4,r5,r17
    fd1c:	20003e26 	beq	r4,zero,fe18 <__subdf3+0x644>
    fd20:	0084303a 	nor	r2,zero,r2
    fd24:	10003a1e 	bne	r2,zero,fe10 <__subdf3+0x63c>
    fd28:	3463c83a 	sub	r17,r6,r17
    fd2c:	194bc83a 	sub	r5,r3,r5
    fd30:	344d803a 	cmpltu	r6,r6,r17
    fd34:	298bc83a 	sub	r5,r5,r6
    fd38:	5021883a 	mov	r16,r10
    fd3c:	3825883a 	mov	r18,r7
    fd40:	003f0406 	br	f954 <__alt_data_end+0xfffba224>
    fd44:	1023883a 	mov	r17,r2
    fd48:	003f0706 	br	f968 <__alt_data_end+0xfffba238>
    fd4c:	0101ffc4 	movi	r4,2047
    fd50:	813f331e 	bne	r16,r4,fa20 <__alt_data_end+0xfffba2f0>
    fd54:	003ec206 	br	f860 <__alt_data_end+0xfffba130>
    fd58:	0027883a 	mov	r19,zero
    fd5c:	003fb006 	br	fc20 <__alt_data_end+0xfffba4f0>
    fd60:	0005883a 	mov	r2,zero
    fd64:	003fbb06 	br	fc54 <__alt_data_end+0xfffba524>
    fd68:	2c44b03a 	or	r2,r5,r17
    fd6c:	80008b1e 	bne	r16,zero,ff9c <__subdf3+0x7c8>
    fd70:	1000b526 	beq	r2,zero,10048 <__subdf3+0x874>
    fd74:	1984b03a 	or	r2,r3,r6
    fd78:	103eb926 	beq	r2,zero,f860 <__alt_data_end+0xfffba130>
    fd7c:	3449883a 	add	r4,r6,r17
    fd80:	2463803a 	cmpltu	r17,r4,r17
    fd84:	194b883a 	add	r5,r3,r5
    fd88:	2c4b883a 	add	r5,r5,r17
    fd8c:	2880202c 	andhi	r2,r5,128
    fd90:	2023883a 	mov	r17,r4
    fd94:	103f5c26 	beq	r2,zero,fb08 <__alt_data_end+0xfffba3d8>
    fd98:	00bfe034 	movhi	r2,65408
    fd9c:	10bfffc4 	addi	r2,r2,-1
    fda0:	4821883a 	mov	r16,r9
    fda4:	288a703a 	and	r5,r5,r2
    fda8:	003ead06 	br	f860 <__alt_data_end+0xfffba130>
    fdac:	2c44b03a 	or	r2,r5,r17
    fdb0:	8000291e 	bne	r16,zero,fe58 <__subdf3+0x684>
    fdb4:	10004f1e 	bne	r2,zero,fef4 <__subdf3+0x720>
    fdb8:	1984b03a 	or	r2,r3,r6
    fdbc:	10000426 	beq	r2,zero,fdd0 <__subdf3+0x5fc>
    fdc0:	180b883a 	mov	r5,r3
    fdc4:	3023883a 	mov	r17,r6
    fdc8:	3825883a 	mov	r18,r7
    fdcc:	003ea406 	br	f860 <__alt_data_end+0xfffba130>
    fdd0:	0011883a 	mov	r8,zero
    fdd4:	000b883a 	mov	r5,zero
    fdd8:	0023883a 	mov	r17,zero
    fddc:	003f0006 	br	f9e0 <__alt_data_end+0xfffba2b0>
    fde0:	11fff804 	addi	r7,r2,-32
    fde4:	19c8d83a 	srl	r4,r3,r7
    fde8:	01c00804 	movi	r7,32
    fdec:	11c07e26 	beq	r2,r7,ffe8 <__subdf3+0x814>
    fdf0:	01c01004 	movi	r7,64
    fdf4:	3885c83a 	sub	r2,r7,r2
    fdf8:	1884983a 	sll	r2,r3,r2
    fdfc:	118cb03a 	or	r6,r2,r6
    fe00:	300ec03a 	cmpne	r7,r6,zero
    fe04:	390eb03a 	or	r7,r7,r4
    fe08:	0005883a 	mov	r2,zero
    fe0c:	003f0906 	br	fa34 <__alt_data_end+0xfffba304>
    fe10:	0101ffc4 	movi	r4,2047
    fe14:	513f991e 	bne	r10,r4,fc7c <__alt_data_end+0xfffba54c>
    fe18:	180b883a 	mov	r5,r3
    fe1c:	3023883a 	mov	r17,r6
    fe20:	5021883a 	mov	r16,r10
    fe24:	3825883a 	mov	r18,r7
    fe28:	003e8d06 	br	f860 <__alt_data_end+0xfffba130>
    fe2c:	80001a1e 	bne	r16,zero,fe98 <__subdf3+0x6c4>
    fe30:	2c48b03a 	or	r4,r5,r17
    fe34:	20005526 	beq	r4,zero,ff8c <__subdf3+0x7b8>
    fe38:	0084303a 	nor	r2,zero,r2
    fe3c:	1000511e 	bne	r2,zero,ff84 <__subdf3+0x7b0>
    fe40:	89a3883a 	add	r17,r17,r6
    fe44:	194b883a 	add	r5,r3,r5
    fe48:	898d803a 	cmpltu	r6,r17,r6
    fe4c:	298b883a 	add	r5,r5,r6
    fe50:	5021883a 	mov	r16,r10
    fe54:	003efc06 	br	fa48 <__alt_data_end+0xfffba318>
    fe58:	1000341e 	bne	r2,zero,ff2c <__subdf3+0x758>
    fe5c:	1984b03a 	or	r2,r3,r6
    fe60:	10006f26 	beq	r2,zero,10020 <__subdf3+0x84c>
    fe64:	180b883a 	mov	r5,r3
    fe68:	3023883a 	mov	r17,r6
    fe6c:	3825883a 	mov	r18,r7
    fe70:	0401ffc4 	movi	r16,2047
    fe74:	003e7a06 	br	f860 <__alt_data_end+0xfffba130>
    fe78:	2c62b03a 	or	r17,r5,r17
    fe7c:	8822c03a 	cmpne	r17,r17,zero
    fe80:	0005883a 	mov	r2,zero
    fe84:	003f8a06 	br	fcb0 <__alt_data_end+0xfffba580>
    fe88:	3821883a 	mov	r16,r7
    fe8c:	000b883a 	mov	r5,zero
    fe90:	0023883a 	mov	r17,zero
    fe94:	003ed206 	br	f9e0 <__alt_data_end+0xfffba2b0>
    fe98:	0101ffc4 	movi	r4,2047
    fe9c:	51003b26 	beq	r10,r4,ff8c <__subdf3+0x7b8>
    fea0:	0085c83a 	sub	r2,zero,r2
    fea4:	29402034 	orhi	r5,r5,128
    fea8:	01000e04 	movi	r4,56
    feac:	20806216 	blt	r4,r2,10038 <__subdf3+0x864>
    feb0:	010007c4 	movi	r4,31
    feb4:	20806b16 	blt	r4,r2,10064 <__subdf3+0x890>
    feb8:	01000804 	movi	r4,32
    febc:	2089c83a 	sub	r4,r4,r2
    fec0:	2912983a 	sll	r9,r5,r4
    fec4:	888ed83a 	srl	r7,r17,r2
    fec8:	8908983a 	sll	r4,r17,r4
    fecc:	2884d83a 	srl	r2,r5,r2
    fed0:	49e2b03a 	or	r17,r9,r7
    fed4:	2008c03a 	cmpne	r4,r4,zero
    fed8:	8922b03a 	or	r17,r17,r4
    fedc:	89a3883a 	add	r17,r17,r6
    fee0:	10c5883a 	add	r2,r2,r3
    fee4:	898d803a 	cmpltu	r6,r17,r6
    fee8:	118b883a 	add	r5,r2,r6
    feec:	5021883a 	mov	r16,r10
    fef0:	003ed506 	br	fa48 <__alt_data_end+0xfffba318>
    fef4:	1984b03a 	or	r2,r3,r6
    fef8:	103e5926 	beq	r2,zero,f860 <__alt_data_end+0xfffba130>
    fefc:	8989c83a 	sub	r4,r17,r6
    ff00:	8911803a 	cmpltu	r8,r17,r4
    ff04:	28c5c83a 	sub	r2,r5,r3
    ff08:	1205c83a 	sub	r2,r2,r8
    ff0c:	1200202c 	andhi	r8,r2,128
    ff10:	403ef926 	beq	r8,zero,faf8 <__alt_data_end+0xfffba3c8>
    ff14:	3463c83a 	sub	r17,r6,r17
    ff18:	194bc83a 	sub	r5,r3,r5
    ff1c:	344d803a 	cmpltu	r6,r6,r17
    ff20:	298bc83a 	sub	r5,r5,r6
    ff24:	3825883a 	mov	r18,r7
    ff28:	003e4d06 	br	f860 <__alt_data_end+0xfffba130>
    ff2c:	1984b03a 	or	r2,r3,r6
    ff30:	10002b26 	beq	r2,zero,ffe0 <__subdf3+0x80c>
    ff34:	2808d0fa 	srli	r4,r5,3
    ff38:	8822d0fa 	srli	r17,r17,3
    ff3c:	280a977a 	slli	r5,r5,29
    ff40:	2080022c 	andhi	r2,r4,8
    ff44:	2c62b03a 	or	r17,r5,r17
    ff48:	10000826 	beq	r2,zero,ff6c <__subdf3+0x798>
    ff4c:	1810d0fa 	srli	r8,r3,3
    ff50:	4080022c 	andhi	r2,r8,8
    ff54:	1000051e 	bne	r2,zero,ff6c <__subdf3+0x798>
    ff58:	300cd0fa 	srli	r6,r6,3
    ff5c:	1804977a 	slli	r2,r3,29
    ff60:	4009883a 	mov	r4,r8
    ff64:	3825883a 	mov	r18,r7
    ff68:	11a2b03a 	or	r17,r2,r6
    ff6c:	880ad77a 	srli	r5,r17,29
    ff70:	200890fa 	slli	r4,r4,3
    ff74:	882290fa 	slli	r17,r17,3
    ff78:	0401ffc4 	movi	r16,2047
    ff7c:	290ab03a 	or	r5,r5,r4
    ff80:	003e3706 	br	f860 <__alt_data_end+0xfffba130>
    ff84:	0101ffc4 	movi	r4,2047
    ff88:	513fc71e 	bne	r10,r4,fea8 <__alt_data_end+0xfffba778>
    ff8c:	180b883a 	mov	r5,r3
    ff90:	3023883a 	mov	r17,r6
    ff94:	5021883a 	mov	r16,r10
    ff98:	003e3106 	br	f860 <__alt_data_end+0xfffba130>
    ff9c:	10002d26 	beq	r2,zero,10054 <__subdf3+0x880>
    ffa0:	1984b03a 	or	r2,r3,r6
    ffa4:	10000e26 	beq	r2,zero,ffe0 <__subdf3+0x80c>
    ffa8:	2808d0fa 	srli	r4,r5,3
    ffac:	8822d0fa 	srli	r17,r17,3
    ffb0:	280a977a 	slli	r5,r5,29
    ffb4:	2080022c 	andhi	r2,r4,8
    ffb8:	2c62b03a 	or	r17,r5,r17
    ffbc:	103feb26 	beq	r2,zero,ff6c <__alt_data_end+0xfffba83c>
    ffc0:	180ed0fa 	srli	r7,r3,3
    ffc4:	3880022c 	andhi	r2,r7,8
    ffc8:	103fe81e 	bne	r2,zero,ff6c <__alt_data_end+0xfffba83c>
    ffcc:	300cd0fa 	srli	r6,r6,3
    ffd0:	1804977a 	slli	r2,r3,29
    ffd4:	3809883a 	mov	r4,r7
    ffd8:	11a2b03a 	or	r17,r2,r6
    ffdc:	003fe306 	br	ff6c <__alt_data_end+0xfffba83c>
    ffe0:	0401ffc4 	movi	r16,2047
    ffe4:	003e1e06 	br	f860 <__alt_data_end+0xfffba130>
    ffe8:	0005883a 	mov	r2,zero
    ffec:	003f8306 	br	fdfc <__alt_data_end+0xfffba6cc>
    fff0:	113ff804 	addi	r4,r2,-32
    fff4:	02000804 	movi	r8,32
    fff8:	2908d83a 	srl	r4,r5,r4
    fffc:	12002526 	beq	r2,r8,10094 <__subdf3+0x8c0>
   10000:	02001004 	movi	r8,64
   10004:	4085c83a 	sub	r2,r8,r2
   10008:	288a983a 	sll	r5,r5,r2
   1000c:	2c62b03a 	or	r17,r5,r17
   10010:	8822c03a 	cmpne	r17,r17,zero
   10014:	8922b03a 	or	r17,r17,r4
   10018:	0005883a 	mov	r2,zero
   1001c:	003f2406 	br	fcb0 <__alt_data_end+0xfffba580>
   10020:	01402034 	movhi	r5,128
   10024:	0011883a 	mov	r8,zero
   10028:	297fffc4 	addi	r5,r5,-1
   1002c:	047ffe04 	movi	r17,-8
   10030:	0401ffc4 	movi	r16,2047
   10034:	003e6a06 	br	f9e0 <__alt_data_end+0xfffba2b0>
   10038:	2c62b03a 	or	r17,r5,r17
   1003c:	8822c03a 	cmpne	r17,r17,zero
   10040:	0005883a 	mov	r2,zero
   10044:	003fa506 	br	fedc <__alt_data_end+0xfffba7ac>
   10048:	180b883a 	mov	r5,r3
   1004c:	3023883a 	mov	r17,r6
   10050:	003e0306 	br	f860 <__alt_data_end+0xfffba130>
   10054:	180b883a 	mov	r5,r3
   10058:	3023883a 	mov	r17,r6
   1005c:	0401ffc4 	movi	r16,2047
   10060:	003dff06 	br	f860 <__alt_data_end+0xfffba130>
   10064:	113ff804 	addi	r4,r2,-32
   10068:	01c00804 	movi	r7,32
   1006c:	2908d83a 	srl	r4,r5,r4
   10070:	11c00a26 	beq	r2,r7,1009c <__subdf3+0x8c8>
   10074:	01c01004 	movi	r7,64
   10078:	3885c83a 	sub	r2,r7,r2
   1007c:	288a983a 	sll	r5,r5,r2
   10080:	2c62b03a 	or	r17,r5,r17
   10084:	8822c03a 	cmpne	r17,r17,zero
   10088:	8922b03a 	or	r17,r17,r4
   1008c:	0005883a 	mov	r2,zero
   10090:	003f9206 	br	fedc <__alt_data_end+0xfffba7ac>
   10094:	000b883a 	mov	r5,zero
   10098:	003fdc06 	br	1000c <__alt_data_end+0xfffba8dc>
   1009c:	000b883a 	mov	r5,zero
   100a0:	003ff706 	br	10080 <__alt_data_end+0xfffba950>

000100a4 <__fixdfsi>:
   100a4:	2806d53a 	srli	r3,r5,20
   100a8:	00800434 	movhi	r2,16
   100ac:	10bfffc4 	addi	r2,r2,-1
   100b0:	18c1ffcc 	andi	r3,r3,2047
   100b4:	0180ff84 	movi	r6,1022
   100b8:	2884703a 	and	r2,r5,r2
   100bc:	280ad7fa 	srli	r5,r5,31
   100c0:	30c0130e 	bge	r6,r3,10110 <__fixdfsi+0x6c>
   100c4:	01810744 	movi	r6,1053
   100c8:	30c00d16 	blt	r6,r3,10100 <__fixdfsi+0x5c>
   100cc:	01810cc4 	movi	r6,1075
   100d0:	30cdc83a 	sub	r6,r6,r3
   100d4:	01c007c4 	movi	r7,31
   100d8:	10800434 	orhi	r2,r2,16
   100dc:	39800e0e 	bge	r7,r6,10118 <__fixdfsi+0x74>
   100e0:	010104c4 	movi	r4,1043
   100e4:	20c7c83a 	sub	r3,r4,r3
   100e8:	10c6d83a 	srl	r3,r2,r3
   100ec:	29403fcc 	andi	r5,r5,255
   100f0:	0145c83a 	sub	r2,zero,r5
   100f4:	1884f03a 	xor	r2,r3,r2
   100f8:	1145883a 	add	r2,r2,r5
   100fc:	f800283a 	ret
   10100:	00a00034 	movhi	r2,32768
   10104:	10bfffc4 	addi	r2,r2,-1
   10108:	2885883a 	add	r2,r5,r2
   1010c:	f800283a 	ret
   10110:	0005883a 	mov	r2,zero
   10114:	f800283a 	ret
   10118:	18fefb44 	addi	r3,r3,-1043
   1011c:	2188d83a 	srl	r4,r4,r6
   10120:	10c6983a 	sll	r3,r2,r3
   10124:	20c6b03a 	or	r3,r4,r3
   10128:	003ff006 	br	100ec <__alt_data_end+0xfffba9bc>

0001012c <__floatsidf>:
   1012c:	defffd04 	addi	sp,sp,-12
   10130:	dc400115 	stw	r17,4(sp)
   10134:	dfc00215 	stw	ra,8(sp)
   10138:	dc000015 	stw	r16,0(sp)
   1013c:	2023883a 	mov	r17,r4
   10140:	20001426 	beq	r4,zero,10194 <__floatsidf+0x68>
   10144:	2020d7fa 	srli	r16,r4,31
   10148:	80000126 	beq	r16,zero,10150 <__floatsidf+0x24>
   1014c:	0123c83a 	sub	r17,zero,r4
   10150:	8809883a 	mov	r4,r17
   10154:	00102a00 	call	102a0 <__clzsi2>
   10158:	01410784 	movi	r5,1054
   1015c:	00c00284 	movi	r3,10
   10160:	288bc83a 	sub	r5,r5,r2
   10164:	18801c16 	blt	r3,r2,101d8 <__floatsidf+0xac>
   10168:	00c002c4 	movi	r3,11
   1016c:	1887c83a 	sub	r3,r3,r2
   10170:	88c8d83a 	srl	r4,r17,r3
   10174:	00c00434 	movhi	r3,16
   10178:	18ffffc4 	addi	r3,r3,-1
   1017c:	10800544 	addi	r2,r2,21
   10180:	20c8703a 	and	r4,r4,r3
   10184:	8884983a 	sll	r2,r17,r2
   10188:	28c1ffcc 	andi	r3,r5,2047
   1018c:	800d883a 	mov	r6,r16
   10190:	00000406 	br	101a4 <__floatsidf+0x78>
   10194:	000d883a 	mov	r6,zero
   10198:	0007883a 	mov	r3,zero
   1019c:	0009883a 	mov	r4,zero
   101a0:	0005883a 	mov	r2,zero
   101a4:	180a953a 	slli	r5,r3,20
   101a8:	31803fcc 	andi	r6,r6,255
   101ac:	00c00434 	movhi	r3,16
   101b0:	300c97fa 	slli	r6,r6,31
   101b4:	18ffffc4 	addi	r3,r3,-1
   101b8:	20c6703a 	and	r3,r4,r3
   101bc:	1946b03a 	or	r3,r3,r5
   101c0:	1986b03a 	or	r3,r3,r6
   101c4:	dfc00217 	ldw	ra,8(sp)
   101c8:	dc400117 	ldw	r17,4(sp)
   101cc:	dc000017 	ldw	r16,0(sp)
   101d0:	dec00304 	addi	sp,sp,12
   101d4:	f800283a 	ret
   101d8:	10fffd44 	addi	r3,r2,-11
   101dc:	88c8983a 	sll	r4,r17,r3
   101e0:	00800434 	movhi	r2,16
   101e4:	10bfffc4 	addi	r2,r2,-1
   101e8:	2088703a 	and	r4,r4,r2
   101ec:	28c1ffcc 	andi	r3,r5,2047
   101f0:	800d883a 	mov	r6,r16
   101f4:	0005883a 	mov	r2,zero
   101f8:	003fea06 	br	101a4 <__alt_data_end+0xfffbaa74>

000101fc <__floatunsidf>:
   101fc:	defffe04 	addi	sp,sp,-8
   10200:	dc000015 	stw	r16,0(sp)
   10204:	dfc00115 	stw	ra,4(sp)
   10208:	2021883a 	mov	r16,r4
   1020c:	20001026 	beq	r4,zero,10250 <__floatunsidf+0x54>
   10210:	00102a00 	call	102a0 <__clzsi2>
   10214:	01410784 	movi	r5,1054
   10218:	100d883a 	mov	r6,r2
   1021c:	288bc83a 	sub	r5,r5,r2
   10220:	00800284 	movi	r2,10
   10224:	11801616 	blt	r2,r6,10280 <__floatunsidf+0x84>
   10228:	008002c4 	movi	r2,11
   1022c:	1185c83a 	sub	r2,r2,r6
   10230:	8084d83a 	srl	r2,r16,r2
   10234:	00c00434 	movhi	r3,16
   10238:	31c00544 	addi	r7,r6,21
   1023c:	18ffffc4 	addi	r3,r3,-1
   10240:	81e0983a 	sll	r16,r16,r7
   10244:	10cc703a 	and	r6,r2,r3
   10248:	2941ffcc 	andi	r5,r5,2047
   1024c:	00000206 	br	10258 <__floatunsidf+0x5c>
   10250:	000b883a 	mov	r5,zero
   10254:	000d883a 	mov	r6,zero
   10258:	280a953a 	slli	r5,r5,20
   1025c:	00c00434 	movhi	r3,16
   10260:	18ffffc4 	addi	r3,r3,-1
   10264:	30c6703a 	and	r3,r6,r3
   10268:	8005883a 	mov	r2,r16
   1026c:	1946b03a 	or	r3,r3,r5
   10270:	dfc00117 	ldw	ra,4(sp)
   10274:	dc000017 	ldw	r16,0(sp)
   10278:	dec00204 	addi	sp,sp,8
   1027c:	f800283a 	ret
   10280:	31bffd44 	addi	r6,r6,-11
   10284:	818c983a 	sll	r6,r16,r6
   10288:	00800434 	movhi	r2,16
   1028c:	10bfffc4 	addi	r2,r2,-1
   10290:	2941ffcc 	andi	r5,r5,2047
   10294:	0021883a 	mov	r16,zero
   10298:	308c703a 	and	r6,r6,r2
   1029c:	003fee06 	br	10258 <__alt_data_end+0xfffbab28>

000102a0 <__clzsi2>:
   102a0:	00bfffd4 	movui	r2,65535
   102a4:	11000b36 	bltu	r2,r4,102d4 <__clzsi2+0x34>
   102a8:	00803fc4 	movi	r2,255
   102ac:	1100122e 	bgeu	r2,r4,102f8 <__clzsi2+0x58>
   102b0:	00c00204 	movi	r3,8
   102b4:	01400604 	movi	r5,24
   102b8:	20c8d83a 	srl	r4,r4,r3
   102bc:	00800074 	movhi	r2,1
   102c0:	108d4204 	addi	r2,r2,13576
   102c4:	1109883a 	add	r4,r2,r4
   102c8:	20800003 	ldbu	r2,0(r4)
   102cc:	2885c83a 	sub	r2,r5,r2
   102d0:	f800283a 	ret
   102d4:	00804034 	movhi	r2,256
   102d8:	10bfffc4 	addi	r2,r2,-1
   102dc:	11000336 	bltu	r2,r4,102ec <__clzsi2+0x4c>
   102e0:	00c00404 	movi	r3,16
   102e4:	180b883a 	mov	r5,r3
   102e8:	003ff306 	br	102b8 <__alt_data_end+0xfffbab88>
   102ec:	00c00604 	movi	r3,24
   102f0:	01400204 	movi	r5,8
   102f4:	003ff006 	br	102b8 <__alt_data_end+0xfffbab88>
   102f8:	0007883a 	mov	r3,zero
   102fc:	01400804 	movi	r5,32
   10300:	003fed06 	br	102b8 <__alt_data_end+0xfffbab88>

00010304 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10304:	defffe04 	addi	sp,sp,-8
   10308:	dfc00115 	stw	ra,4(sp)
   1030c:	df000015 	stw	fp,0(sp)
   10310:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10314:	00800074 	movhi	r2,1
   10318:	10946104 	addi	r2,r2,20868
   1031c:	10800017 	ldw	r2,0(r2)
   10320:	10000526 	beq	r2,zero,10338 <alt_get_errno+0x34>
   10324:	00800074 	movhi	r2,1
   10328:	10946104 	addi	r2,r2,20868
   1032c:	10800017 	ldw	r2,0(r2)
   10330:	103ee83a 	callr	r2
   10334:	00000206 	br	10340 <alt_get_errno+0x3c>
   10338:	00800074 	movhi	r2,1
   1033c:	109b4704 	addi	r2,r2,27932
}
   10340:	e037883a 	mov	sp,fp
   10344:	dfc00117 	ldw	ra,4(sp)
   10348:	df000017 	ldw	fp,0(sp)
   1034c:	dec00204 	addi	sp,sp,8
   10350:	f800283a 	ret

00010354 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   10354:	defffb04 	addi	sp,sp,-20
   10358:	dfc00415 	stw	ra,16(sp)
   1035c:	df000315 	stw	fp,12(sp)
   10360:	df000304 	addi	fp,sp,12
   10364:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   10368:	e0bfff17 	ldw	r2,-4(fp)
   1036c:	10000816 	blt	r2,zero,10390 <close+0x3c>
   10370:	e13fff17 	ldw	r4,-4(fp)
   10374:	01400304 	movi	r5,12
   10378:	000dae00 	call	dae0 <__mulsi3>
   1037c:	1007883a 	mov	r3,r2
   10380:	00800074 	movhi	r2,1
   10384:	108fde04 	addi	r2,r2,16248
   10388:	1885883a 	add	r2,r3,r2
   1038c:	00000106 	br	10394 <close+0x40>
   10390:	0005883a 	mov	r2,zero
   10394:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   10398:	e0bffd17 	ldw	r2,-12(fp)
   1039c:	10001926 	beq	r2,zero,10404 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   103a0:	e0bffd17 	ldw	r2,-12(fp)
   103a4:	10800017 	ldw	r2,0(r2)
   103a8:	10800417 	ldw	r2,16(r2)
   103ac:	10000626 	beq	r2,zero,103c8 <close+0x74>
   103b0:	e0bffd17 	ldw	r2,-12(fp)
   103b4:	10800017 	ldw	r2,0(r2)
   103b8:	10800417 	ldw	r2,16(r2)
   103bc:	e13ffd17 	ldw	r4,-12(fp)
   103c0:	103ee83a 	callr	r2
   103c4:	00000106 	br	103cc <close+0x78>
   103c8:	0005883a 	mov	r2,zero
   103cc:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   103d0:	e13fff17 	ldw	r4,-4(fp)
   103d4:	0010a780 	call	10a78 <alt_release_fd>
    if (rval < 0)
   103d8:	e0bffe17 	ldw	r2,-8(fp)
   103dc:	1000070e 	bge	r2,zero,103fc <close+0xa8>
    {
      ALT_ERRNO = -rval;
   103e0:	00103040 	call	10304 <alt_get_errno>
   103e4:	1007883a 	mov	r3,r2
   103e8:	e0bffe17 	ldw	r2,-8(fp)
   103ec:	0085c83a 	sub	r2,zero,r2
   103f0:	18800015 	stw	r2,0(r3)
      return -1;
   103f4:	00bfffc4 	movi	r2,-1
   103f8:	00000706 	br	10418 <close+0xc4>
    }
    return 0;
   103fc:	0005883a 	mov	r2,zero
   10400:	00000506 	br	10418 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   10404:	00103040 	call	10304 <alt_get_errno>
   10408:	1007883a 	mov	r3,r2
   1040c:	00801444 	movi	r2,81
   10410:	18800015 	stw	r2,0(r3)
    return -1;
   10414:	00bfffc4 	movi	r2,-1
  }
}
   10418:	e037883a 	mov	sp,fp
   1041c:	dfc00117 	ldw	ra,4(sp)
   10420:	df000017 	ldw	fp,0(sp)
   10424:	dec00204 	addi	sp,sp,8
   10428:	f800283a 	ret

0001042c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   1042c:	defffc04 	addi	sp,sp,-16
   10430:	df000315 	stw	fp,12(sp)
   10434:	df000304 	addi	fp,sp,12
   10438:	e13ffd15 	stw	r4,-12(fp)
   1043c:	e17ffe15 	stw	r5,-8(fp)
   10440:	e1bfff15 	stw	r6,-4(fp)
  return len;
   10444:	e0bfff17 	ldw	r2,-4(fp)
}
   10448:	e037883a 	mov	sp,fp
   1044c:	df000017 	ldw	fp,0(sp)
   10450:	dec00104 	addi	sp,sp,4
   10454:	f800283a 	ret

00010458 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10458:	defffe04 	addi	sp,sp,-8
   1045c:	dfc00115 	stw	ra,4(sp)
   10460:	df000015 	stw	fp,0(sp)
   10464:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10468:	00800074 	movhi	r2,1
   1046c:	10946104 	addi	r2,r2,20868
   10470:	10800017 	ldw	r2,0(r2)
   10474:	10000526 	beq	r2,zero,1048c <alt_get_errno+0x34>
   10478:	00800074 	movhi	r2,1
   1047c:	10946104 	addi	r2,r2,20868
   10480:	10800017 	ldw	r2,0(r2)
   10484:	103ee83a 	callr	r2
   10488:	00000206 	br	10494 <alt_get_errno+0x3c>
   1048c:	00800074 	movhi	r2,1
   10490:	109b4704 	addi	r2,r2,27932
}
   10494:	e037883a 	mov	sp,fp
   10498:	dfc00117 	ldw	ra,4(sp)
   1049c:	df000017 	ldw	fp,0(sp)
   104a0:	dec00204 	addi	sp,sp,8
   104a4:	f800283a 	ret

000104a8 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   104a8:	defffb04 	addi	sp,sp,-20
   104ac:	dfc00415 	stw	ra,16(sp)
   104b0:	df000315 	stw	fp,12(sp)
   104b4:	df000304 	addi	fp,sp,12
   104b8:	e13ffe15 	stw	r4,-8(fp)
   104bc:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   104c0:	e0bffe17 	ldw	r2,-8(fp)
   104c4:	10000816 	blt	r2,zero,104e8 <fstat+0x40>
   104c8:	e13ffe17 	ldw	r4,-8(fp)
   104cc:	01400304 	movi	r5,12
   104d0:	000dae00 	call	dae0 <__mulsi3>
   104d4:	1007883a 	mov	r3,r2
   104d8:	00800074 	movhi	r2,1
   104dc:	108fde04 	addi	r2,r2,16248
   104e0:	1885883a 	add	r2,r3,r2
   104e4:	00000106 	br	104ec <fstat+0x44>
   104e8:	0005883a 	mov	r2,zero
   104ec:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   104f0:	e0bffd17 	ldw	r2,-12(fp)
   104f4:	10001026 	beq	r2,zero,10538 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   104f8:	e0bffd17 	ldw	r2,-12(fp)
   104fc:	10800017 	ldw	r2,0(r2)
   10500:	10800817 	ldw	r2,32(r2)
   10504:	10000726 	beq	r2,zero,10524 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   10508:	e0bffd17 	ldw	r2,-12(fp)
   1050c:	10800017 	ldw	r2,0(r2)
   10510:	10800817 	ldw	r2,32(r2)
   10514:	e13ffd17 	ldw	r4,-12(fp)
   10518:	e17fff17 	ldw	r5,-4(fp)
   1051c:	103ee83a 	callr	r2
   10520:	00000a06 	br	1054c <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   10524:	e0bfff17 	ldw	r2,-4(fp)
   10528:	00c80004 	movi	r3,8192
   1052c:	10c00115 	stw	r3,4(r2)
      return 0;
   10530:	0005883a 	mov	r2,zero
   10534:	00000506 	br	1054c <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   10538:	00104580 	call	10458 <alt_get_errno>
   1053c:	1007883a 	mov	r3,r2
   10540:	00801444 	movi	r2,81
   10544:	18800015 	stw	r2,0(r3)
    return -1;
   10548:	00bfffc4 	movi	r2,-1
  }
}
   1054c:	e037883a 	mov	sp,fp
   10550:	dfc00117 	ldw	ra,4(sp)
   10554:	df000017 	ldw	fp,0(sp)
   10558:	dec00204 	addi	sp,sp,8
   1055c:	f800283a 	ret

00010560 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10560:	defffe04 	addi	sp,sp,-8
   10564:	dfc00115 	stw	ra,4(sp)
   10568:	df000015 	stw	fp,0(sp)
   1056c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10570:	00800074 	movhi	r2,1
   10574:	10946104 	addi	r2,r2,20868
   10578:	10800017 	ldw	r2,0(r2)
   1057c:	10000526 	beq	r2,zero,10594 <alt_get_errno+0x34>
   10580:	00800074 	movhi	r2,1
   10584:	10946104 	addi	r2,r2,20868
   10588:	10800017 	ldw	r2,0(r2)
   1058c:	103ee83a 	callr	r2
   10590:	00000206 	br	1059c <alt_get_errno+0x3c>
   10594:	00800074 	movhi	r2,1
   10598:	109b4704 	addi	r2,r2,27932
}
   1059c:	e037883a 	mov	sp,fp
   105a0:	dfc00117 	ldw	ra,4(sp)
   105a4:	df000017 	ldw	fp,0(sp)
   105a8:	dec00204 	addi	sp,sp,8
   105ac:	f800283a 	ret

000105b0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   105b0:	deffed04 	addi	sp,sp,-76
   105b4:	dfc01215 	stw	ra,72(sp)
   105b8:	df001115 	stw	fp,68(sp)
   105bc:	df001104 	addi	fp,sp,68
   105c0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   105c4:	e0bfff17 	ldw	r2,-4(fp)
   105c8:	10000816 	blt	r2,zero,105ec <isatty+0x3c>
   105cc:	e13fff17 	ldw	r4,-4(fp)
   105d0:	01400304 	movi	r5,12
   105d4:	000dae00 	call	dae0 <__mulsi3>
   105d8:	1007883a 	mov	r3,r2
   105dc:	00800074 	movhi	r2,1
   105e0:	108fde04 	addi	r2,r2,16248
   105e4:	1885883a 	add	r2,r3,r2
   105e8:	00000106 	br	105f0 <isatty+0x40>
   105ec:	0005883a 	mov	r2,zero
   105f0:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   105f4:	e0bfef17 	ldw	r2,-68(fp)
   105f8:	10000e26 	beq	r2,zero,10634 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   105fc:	e0bfef17 	ldw	r2,-68(fp)
   10600:	10800017 	ldw	r2,0(r2)
   10604:	10800817 	ldw	r2,32(r2)
   10608:	1000021e 	bne	r2,zero,10614 <isatty+0x64>
    {
      return 1;
   1060c:	00800044 	movi	r2,1
   10610:	00000d06 	br	10648 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   10614:	e0bff004 	addi	r2,fp,-64
   10618:	e13fff17 	ldw	r4,-4(fp)
   1061c:	100b883a 	mov	r5,r2
   10620:	00104a80 	call	104a8 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   10624:	e0bff117 	ldw	r2,-60(fp)
   10628:	10880020 	cmpeqi	r2,r2,8192
   1062c:	10803fcc 	andi	r2,r2,255
   10630:	00000506 	br	10648 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   10634:	00105600 	call	10560 <alt_get_errno>
   10638:	1007883a 	mov	r3,r2
   1063c:	00801444 	movi	r2,81
   10640:	18800015 	stw	r2,0(r3)
    return 0;
   10644:	0005883a 	mov	r2,zero
  }
}
   10648:	e037883a 	mov	sp,fp
   1064c:	dfc00117 	ldw	ra,4(sp)
   10650:	df000017 	ldw	fp,0(sp)
   10654:	dec00204 	addi	sp,sp,8
   10658:	f800283a 	ret

0001065c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   1065c:	defffc04 	addi	sp,sp,-16
   10660:	df000315 	stw	fp,12(sp)
   10664:	df000304 	addi	fp,sp,12
   10668:	e13ffd15 	stw	r4,-12(fp)
   1066c:	e17ffe15 	stw	r5,-8(fp)
   10670:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   10674:	e0fffe17 	ldw	r3,-8(fp)
   10678:	e0bffd17 	ldw	r2,-12(fp)
   1067c:	18800c26 	beq	r3,r2,106b0 <alt_load_section+0x54>
  {
    while( to != end )
   10680:	00000806 	br	106a4 <alt_load_section+0x48>
    {
      *to++ = *from++;
   10684:	e0bffe17 	ldw	r2,-8(fp)
   10688:	10c00104 	addi	r3,r2,4
   1068c:	e0fffe15 	stw	r3,-8(fp)
   10690:	e0fffd17 	ldw	r3,-12(fp)
   10694:	19000104 	addi	r4,r3,4
   10698:	e13ffd15 	stw	r4,-12(fp)
   1069c:	18c00017 	ldw	r3,0(r3)
   106a0:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   106a4:	e0fffe17 	ldw	r3,-8(fp)
   106a8:	e0bfff17 	ldw	r2,-4(fp)
   106ac:	18bff51e 	bne	r3,r2,10684 <__alt_data_end+0xfffbaf54>
    {
      *to++ = *from++;
    }
  }
}
   106b0:	e037883a 	mov	sp,fp
   106b4:	df000017 	ldw	fp,0(sp)
   106b8:	dec00104 	addi	sp,sp,4
   106bc:	f800283a 	ret

000106c0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   106c0:	defffe04 	addi	sp,sp,-8
   106c4:	dfc00115 	stw	ra,4(sp)
   106c8:	df000015 	stw	fp,0(sp)
   106cc:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   106d0:	01000074 	movhi	r4,1
   106d4:	21146604 	addi	r4,r4,20888
   106d8:	01400074 	movhi	r5,1
   106dc:	294d8f04 	addi	r5,r5,13884
   106e0:	01800074 	movhi	r6,1
   106e4:	31946604 	addi	r6,r6,20888
   106e8:	001065c0 	call	1065c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   106ec:	01000034 	movhi	r4,0
   106f0:	21000804 	addi	r4,r4,32
   106f4:	01400034 	movhi	r5,0
   106f8:	29400804 	addi	r5,r5,32
   106fc:	01800034 	movhi	r6,0
   10700:	31808b04 	addi	r6,r6,556
   10704:	001065c0 	call	1065c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   10708:	01000074 	movhi	r4,1
   1070c:	210af904 	addi	r4,r4,11236
   10710:	01400074 	movhi	r5,1
   10714:	294af904 	addi	r5,r5,11236
   10718:	01800074 	movhi	r6,1
   1071c:	318d8f04 	addi	r6,r6,13884
   10720:	001065c0 	call	1065c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   10724:	0011ac00 	call	11ac0 <alt_dcache_flush_all>
  alt_icache_flush_all();
   10728:	0011c880 	call	11c88 <alt_icache_flush_all>
}
   1072c:	e037883a 	mov	sp,fp
   10730:	dfc00117 	ldw	ra,4(sp)
   10734:	df000017 	ldw	fp,0(sp)
   10738:	dec00204 	addi	sp,sp,8
   1073c:	f800283a 	ret

00010740 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10740:	defffe04 	addi	sp,sp,-8
   10744:	dfc00115 	stw	ra,4(sp)
   10748:	df000015 	stw	fp,0(sp)
   1074c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10750:	00800074 	movhi	r2,1
   10754:	10946104 	addi	r2,r2,20868
   10758:	10800017 	ldw	r2,0(r2)
   1075c:	10000526 	beq	r2,zero,10774 <alt_get_errno+0x34>
   10760:	00800074 	movhi	r2,1
   10764:	10946104 	addi	r2,r2,20868
   10768:	10800017 	ldw	r2,0(r2)
   1076c:	103ee83a 	callr	r2
   10770:	00000206 	br	1077c <alt_get_errno+0x3c>
   10774:	00800074 	movhi	r2,1
   10778:	109b4704 	addi	r2,r2,27932
}
   1077c:	e037883a 	mov	sp,fp
   10780:	dfc00117 	ldw	ra,4(sp)
   10784:	df000017 	ldw	fp,0(sp)
   10788:	dec00204 	addi	sp,sp,8
   1078c:	f800283a 	ret

00010790 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   10790:	defff904 	addi	sp,sp,-28
   10794:	dfc00615 	stw	ra,24(sp)
   10798:	df000515 	stw	fp,20(sp)
   1079c:	df000504 	addi	fp,sp,20
   107a0:	e13ffd15 	stw	r4,-12(fp)
   107a4:	e17ffe15 	stw	r5,-8(fp)
   107a8:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   107ac:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   107b0:	e0bffd17 	ldw	r2,-12(fp)
   107b4:	10000816 	blt	r2,zero,107d8 <lseek+0x48>
   107b8:	e13ffd17 	ldw	r4,-12(fp)
   107bc:	01400304 	movi	r5,12
   107c0:	000dae00 	call	dae0 <__mulsi3>
   107c4:	1007883a 	mov	r3,r2
   107c8:	00800074 	movhi	r2,1
   107cc:	108fde04 	addi	r2,r2,16248
   107d0:	1885883a 	add	r2,r3,r2
   107d4:	00000106 	br	107dc <lseek+0x4c>
   107d8:	0005883a 	mov	r2,zero
   107dc:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   107e0:	e0bffc17 	ldw	r2,-16(fp)
   107e4:	10001026 	beq	r2,zero,10828 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   107e8:	e0bffc17 	ldw	r2,-16(fp)
   107ec:	10800017 	ldw	r2,0(r2)
   107f0:	10800717 	ldw	r2,28(r2)
   107f4:	10000926 	beq	r2,zero,1081c <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   107f8:	e0bffc17 	ldw	r2,-16(fp)
   107fc:	10800017 	ldw	r2,0(r2)
   10800:	10800717 	ldw	r2,28(r2)
   10804:	e13ffc17 	ldw	r4,-16(fp)
   10808:	e17ffe17 	ldw	r5,-8(fp)
   1080c:	e1bfff17 	ldw	r6,-4(fp)
   10810:	103ee83a 	callr	r2
   10814:	e0bffb15 	stw	r2,-20(fp)
   10818:	00000506 	br	10830 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   1081c:	00bfde84 	movi	r2,-134
   10820:	e0bffb15 	stw	r2,-20(fp)
   10824:	00000206 	br	10830 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   10828:	00bfebc4 	movi	r2,-81
   1082c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   10830:	e0bffb17 	ldw	r2,-20(fp)
   10834:	1000070e 	bge	r2,zero,10854 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   10838:	00107400 	call	10740 <alt_get_errno>
   1083c:	1007883a 	mov	r3,r2
   10840:	e0bffb17 	ldw	r2,-20(fp)
   10844:	0085c83a 	sub	r2,zero,r2
   10848:	18800015 	stw	r2,0(r3)
    rc = -1;
   1084c:	00bfffc4 	movi	r2,-1
   10850:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   10854:	e0bffb17 	ldw	r2,-20(fp)
}
   10858:	e037883a 	mov	sp,fp
   1085c:	dfc00117 	ldw	ra,4(sp)
   10860:	df000017 	ldw	fp,0(sp)
   10864:	dec00204 	addi	sp,sp,8
   10868:	f800283a 	ret

0001086c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   1086c:	defffd04 	addi	sp,sp,-12
   10870:	dfc00215 	stw	ra,8(sp)
   10874:	df000115 	stw	fp,4(sp)
   10878:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   1087c:	0009883a 	mov	r4,zero
   10880:	0010d600 	call	10d60 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   10884:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   10888:	0010d940 	call	10d94 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   1088c:	01000074 	movhi	r4,1
   10890:	210d8504 	addi	r4,r4,13844
   10894:	01400074 	movhi	r5,1
   10898:	294d8504 	addi	r5,r5,13844
   1089c:	01800074 	movhi	r6,1
   108a0:	318d8504 	addi	r6,r6,13844
   108a4:	00120540 	call	12054 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   108a8:	0011bd00 	call	11bd0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   108ac:	01000074 	movhi	r4,1
   108b0:	21070b04 	addi	r4,r4,7212
   108b4:	00128400 	call	12840 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   108b8:	d126f517 	ldw	r4,-25644(gp)
   108bc:	d0e6f617 	ldw	r3,-25640(gp)
   108c0:	d0a6f717 	ldw	r2,-25636(gp)
   108c4:	180b883a 	mov	r5,r3
   108c8:	100d883a 	mov	r6,r2
   108cc:	00010ac0 	call	10ac <main>
   108d0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   108d4:	01000044 	movi	r4,1
   108d8:	00103540 	call	10354 <close>
  exit (result);
   108dc:	e13fff17 	ldw	r4,-4(fp)
   108e0:	00128540 	call	12854 <exit>

000108e4 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   108e4:	defffe04 	addi	sp,sp,-8
   108e8:	df000115 	stw	fp,4(sp)
   108ec:	df000104 	addi	fp,sp,4
   108f0:	e13fff15 	stw	r4,-4(fp)
}
   108f4:	e037883a 	mov	sp,fp
   108f8:	df000017 	ldw	fp,0(sp)
   108fc:	dec00104 	addi	sp,sp,4
   10900:	f800283a 	ret

00010904 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   10904:	defffe04 	addi	sp,sp,-8
   10908:	df000115 	stw	fp,4(sp)
   1090c:	df000104 	addi	fp,sp,4
   10910:	e13fff15 	stw	r4,-4(fp)
}
   10914:	e037883a 	mov	sp,fp
   10918:	df000017 	ldw	fp,0(sp)
   1091c:	dec00104 	addi	sp,sp,4
   10920:	f800283a 	ret

00010924 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10924:	defffe04 	addi	sp,sp,-8
   10928:	dfc00115 	stw	ra,4(sp)
   1092c:	df000015 	stw	fp,0(sp)
   10930:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10934:	00800074 	movhi	r2,1
   10938:	10946104 	addi	r2,r2,20868
   1093c:	10800017 	ldw	r2,0(r2)
   10940:	10000526 	beq	r2,zero,10958 <alt_get_errno+0x34>
   10944:	00800074 	movhi	r2,1
   10948:	10946104 	addi	r2,r2,20868
   1094c:	10800017 	ldw	r2,0(r2)
   10950:	103ee83a 	callr	r2
   10954:	00000206 	br	10960 <alt_get_errno+0x3c>
   10958:	00800074 	movhi	r2,1
   1095c:	109b4704 	addi	r2,r2,27932
}
   10960:	e037883a 	mov	sp,fp
   10964:	dfc00117 	ldw	ra,4(sp)
   10968:	df000017 	ldw	fp,0(sp)
   1096c:	dec00204 	addi	sp,sp,8
   10970:	f800283a 	ret

00010974 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   10974:	defff904 	addi	sp,sp,-28
   10978:	dfc00615 	stw	ra,24(sp)
   1097c:	df000515 	stw	fp,20(sp)
   10980:	df000504 	addi	fp,sp,20
   10984:	e13ffd15 	stw	r4,-12(fp)
   10988:	e17ffe15 	stw	r5,-8(fp)
   1098c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   10990:	e0bffd17 	ldw	r2,-12(fp)
   10994:	10000816 	blt	r2,zero,109b8 <read+0x44>
   10998:	e13ffd17 	ldw	r4,-12(fp)
   1099c:	01400304 	movi	r5,12
   109a0:	000dae00 	call	dae0 <__mulsi3>
   109a4:	1007883a 	mov	r3,r2
   109a8:	00800074 	movhi	r2,1
   109ac:	108fde04 	addi	r2,r2,16248
   109b0:	1885883a 	add	r2,r3,r2
   109b4:	00000106 	br	109bc <read+0x48>
   109b8:	0005883a 	mov	r2,zero
   109bc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   109c0:	e0bffb17 	ldw	r2,-20(fp)
   109c4:	10002226 	beq	r2,zero,10a50 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   109c8:	e0bffb17 	ldw	r2,-20(fp)
   109cc:	10800217 	ldw	r2,8(r2)
   109d0:	108000cc 	andi	r2,r2,3
   109d4:	10800060 	cmpeqi	r2,r2,1
   109d8:	1000181e 	bne	r2,zero,10a3c <read+0xc8>
        (fd->dev->read))
   109dc:	e0bffb17 	ldw	r2,-20(fp)
   109e0:	10800017 	ldw	r2,0(r2)
   109e4:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   109e8:	10001426 	beq	r2,zero,10a3c <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   109ec:	e0bffb17 	ldw	r2,-20(fp)
   109f0:	10800017 	ldw	r2,0(r2)
   109f4:	10800517 	ldw	r2,20(r2)
   109f8:	e0ffff17 	ldw	r3,-4(fp)
   109fc:	e13ffb17 	ldw	r4,-20(fp)
   10a00:	e17ffe17 	ldw	r5,-8(fp)
   10a04:	180d883a 	mov	r6,r3
   10a08:	103ee83a 	callr	r2
   10a0c:	e0bffc15 	stw	r2,-16(fp)
   10a10:	e0bffc17 	ldw	r2,-16(fp)
   10a14:	1000070e 	bge	r2,zero,10a34 <read+0xc0>
        {
          ALT_ERRNO = -rval;
   10a18:	00109240 	call	10924 <alt_get_errno>
   10a1c:	1007883a 	mov	r3,r2
   10a20:	e0bffc17 	ldw	r2,-16(fp)
   10a24:	0085c83a 	sub	r2,zero,r2
   10a28:	18800015 	stw	r2,0(r3)
          return -1;
   10a2c:	00bfffc4 	movi	r2,-1
   10a30:	00000c06 	br	10a64 <read+0xf0>
        }
        return rval;
   10a34:	e0bffc17 	ldw	r2,-16(fp)
   10a38:	00000a06 	br	10a64 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   10a3c:	00109240 	call	10924 <alt_get_errno>
   10a40:	1007883a 	mov	r3,r2
   10a44:	00800344 	movi	r2,13
   10a48:	18800015 	stw	r2,0(r3)
   10a4c:	00000406 	br	10a60 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   10a50:	00109240 	call	10924 <alt_get_errno>
   10a54:	1007883a 	mov	r3,r2
   10a58:	00801444 	movi	r2,81
   10a5c:	18800015 	stw	r2,0(r3)
  }
  return -1;
   10a60:	00bfffc4 	movi	r2,-1
}
   10a64:	e037883a 	mov	sp,fp
   10a68:	dfc00117 	ldw	ra,4(sp)
   10a6c:	df000017 	ldw	fp,0(sp)
   10a70:	dec00204 	addi	sp,sp,8
   10a74:	f800283a 	ret

00010a78 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   10a78:	defffc04 	addi	sp,sp,-16
   10a7c:	dfc00315 	stw	ra,12(sp)
   10a80:	df000215 	stw	fp,8(sp)
   10a84:	dc000115 	stw	r16,4(sp)
   10a88:	df000204 	addi	fp,sp,8
   10a8c:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   10a90:	e0bffe17 	ldw	r2,-8(fp)
   10a94:	108000d0 	cmplti	r2,r2,3
   10a98:	1000111e 	bne	r2,zero,10ae0 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   10a9c:	04000074 	movhi	r16,1
   10aa0:	840fde04 	addi	r16,r16,16248
   10aa4:	e0bffe17 	ldw	r2,-8(fp)
   10aa8:	1009883a 	mov	r4,r2
   10aac:	01400304 	movi	r5,12
   10ab0:	000dae00 	call	dae0 <__mulsi3>
   10ab4:	8085883a 	add	r2,r16,r2
   10ab8:	10800204 	addi	r2,r2,8
   10abc:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   10ac0:	04000074 	movhi	r16,1
   10ac4:	840fde04 	addi	r16,r16,16248
   10ac8:	e0bffe17 	ldw	r2,-8(fp)
   10acc:	1009883a 	mov	r4,r2
   10ad0:	01400304 	movi	r5,12
   10ad4:	000dae00 	call	dae0 <__mulsi3>
   10ad8:	8085883a 	add	r2,r16,r2
   10adc:	10000015 	stw	zero,0(r2)
  }
}
   10ae0:	e6ffff04 	addi	sp,fp,-4
   10ae4:	dfc00217 	ldw	ra,8(sp)
   10ae8:	df000117 	ldw	fp,4(sp)
   10aec:	dc000017 	ldw	r16,0(sp)
   10af0:	dec00304 	addi	sp,sp,12
   10af4:	f800283a 	ret

00010af8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   10af8:	defff904 	addi	sp,sp,-28
   10afc:	df000615 	stw	fp,24(sp)
   10b00:	df000604 	addi	fp,sp,24
   10b04:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10b08:	0005303a 	rdctl	r2,status
   10b0c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10b10:	e0fffc17 	ldw	r3,-16(fp)
   10b14:	00bfff84 	movi	r2,-2
   10b18:	1884703a 	and	r2,r3,r2
   10b1c:	1001703a 	wrctl	status,r2
  
  return context;
   10b20:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   10b24:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   10b28:	d0a00c17 	ldw	r2,-32720(gp)
   10b2c:	10c000c4 	addi	r3,r2,3
   10b30:	00bfff04 	movi	r2,-4
   10b34:	1884703a 	and	r2,r3,r2
   10b38:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   10b3c:	d0e00c17 	ldw	r3,-32720(gp)
   10b40:	e0bfff17 	ldw	r2,-4(fp)
   10b44:	1887883a 	add	r3,r3,r2
   10b48:	00800174 	movhi	r2,5
   10b4c:	1095cc04 	addi	r2,r2,22320
   10b50:	10c0062e 	bgeu	r2,r3,10b6c <sbrk+0x74>
   10b54:	e0bffa17 	ldw	r2,-24(fp)
   10b58:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10b5c:	e0bffd17 	ldw	r2,-12(fp)
   10b60:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   10b64:	00bfffc4 	movi	r2,-1
   10b68:	00000b06 	br	10b98 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   10b6c:	d0a00c17 	ldw	r2,-32720(gp)
   10b70:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   10b74:	d0e00c17 	ldw	r3,-32720(gp)
   10b78:	e0bfff17 	ldw	r2,-4(fp)
   10b7c:	1885883a 	add	r2,r3,r2
   10b80:	d0a00c15 	stw	r2,-32720(gp)
   10b84:	e0bffa17 	ldw	r2,-24(fp)
   10b88:	e0bffe15 	stw	r2,-8(fp)
   10b8c:	e0bffe17 	ldw	r2,-8(fp)
   10b90:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   10b94:	e0bffb17 	ldw	r2,-20(fp)
} 
   10b98:	e037883a 	mov	sp,fp
   10b9c:	df000017 	ldw	fp,0(sp)
   10ba0:	dec00104 	addi	sp,sp,4
   10ba4:	f800283a 	ret

00010ba8 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   10ba8:	defffd04 	addi	sp,sp,-12
   10bac:	dfc00215 	stw	ra,8(sp)
   10bb0:	df000115 	stw	fp,4(sp)
   10bb4:	df000104 	addi	fp,sp,4
   10bb8:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   10bbc:	e13fff17 	ldw	r4,-4(fp)
   10bc0:	00119680 	call	11968 <alt_busy_sleep>
}
   10bc4:	e037883a 	mov	sp,fp
   10bc8:	dfc00117 	ldw	ra,4(sp)
   10bcc:	df000017 	ldw	fp,0(sp)
   10bd0:	dec00204 	addi	sp,sp,8
   10bd4:	f800283a 	ret

00010bd8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10bd8:	defffe04 	addi	sp,sp,-8
   10bdc:	dfc00115 	stw	ra,4(sp)
   10be0:	df000015 	stw	fp,0(sp)
   10be4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10be8:	00800074 	movhi	r2,1
   10bec:	10946104 	addi	r2,r2,20868
   10bf0:	10800017 	ldw	r2,0(r2)
   10bf4:	10000526 	beq	r2,zero,10c0c <alt_get_errno+0x34>
   10bf8:	00800074 	movhi	r2,1
   10bfc:	10946104 	addi	r2,r2,20868
   10c00:	10800017 	ldw	r2,0(r2)
   10c04:	103ee83a 	callr	r2
   10c08:	00000206 	br	10c14 <alt_get_errno+0x3c>
   10c0c:	00800074 	movhi	r2,1
   10c10:	109b4704 	addi	r2,r2,27932
}
   10c14:	e037883a 	mov	sp,fp
   10c18:	dfc00117 	ldw	ra,4(sp)
   10c1c:	df000017 	ldw	fp,0(sp)
   10c20:	dec00204 	addi	sp,sp,8
   10c24:	f800283a 	ret

00010c28 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   10c28:	defff904 	addi	sp,sp,-28
   10c2c:	dfc00615 	stw	ra,24(sp)
   10c30:	df000515 	stw	fp,20(sp)
   10c34:	df000504 	addi	fp,sp,20
   10c38:	e13ffd15 	stw	r4,-12(fp)
   10c3c:	e17ffe15 	stw	r5,-8(fp)
   10c40:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   10c44:	e0bffd17 	ldw	r2,-12(fp)
   10c48:	10000816 	blt	r2,zero,10c6c <write+0x44>
   10c4c:	e13ffd17 	ldw	r4,-12(fp)
   10c50:	01400304 	movi	r5,12
   10c54:	000dae00 	call	dae0 <__mulsi3>
   10c58:	1007883a 	mov	r3,r2
   10c5c:	00800074 	movhi	r2,1
   10c60:	108fde04 	addi	r2,r2,16248
   10c64:	1885883a 	add	r2,r3,r2
   10c68:	00000106 	br	10c70 <write+0x48>
   10c6c:	0005883a 	mov	r2,zero
   10c70:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   10c74:	e0bffb17 	ldw	r2,-20(fp)
   10c78:	10002126 	beq	r2,zero,10d00 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   10c7c:	e0bffb17 	ldw	r2,-20(fp)
   10c80:	10800217 	ldw	r2,8(r2)
   10c84:	108000cc 	andi	r2,r2,3
   10c88:	10001826 	beq	r2,zero,10cec <write+0xc4>
   10c8c:	e0bffb17 	ldw	r2,-20(fp)
   10c90:	10800017 	ldw	r2,0(r2)
   10c94:	10800617 	ldw	r2,24(r2)
   10c98:	10001426 	beq	r2,zero,10cec <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   10c9c:	e0bffb17 	ldw	r2,-20(fp)
   10ca0:	10800017 	ldw	r2,0(r2)
   10ca4:	10800617 	ldw	r2,24(r2)
   10ca8:	e0ffff17 	ldw	r3,-4(fp)
   10cac:	e13ffb17 	ldw	r4,-20(fp)
   10cb0:	e17ffe17 	ldw	r5,-8(fp)
   10cb4:	180d883a 	mov	r6,r3
   10cb8:	103ee83a 	callr	r2
   10cbc:	e0bffc15 	stw	r2,-16(fp)
   10cc0:	e0bffc17 	ldw	r2,-16(fp)
   10cc4:	1000070e 	bge	r2,zero,10ce4 <write+0xbc>
      {
        ALT_ERRNO = -rval;
   10cc8:	0010bd80 	call	10bd8 <alt_get_errno>
   10ccc:	1007883a 	mov	r3,r2
   10cd0:	e0bffc17 	ldw	r2,-16(fp)
   10cd4:	0085c83a 	sub	r2,zero,r2
   10cd8:	18800015 	stw	r2,0(r3)
        return -1;
   10cdc:	00bfffc4 	movi	r2,-1
   10ce0:	00000c06 	br	10d14 <write+0xec>
      }
      return rval;
   10ce4:	e0bffc17 	ldw	r2,-16(fp)
   10ce8:	00000a06 	br	10d14 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   10cec:	0010bd80 	call	10bd8 <alt_get_errno>
   10cf0:	1007883a 	mov	r3,r2
   10cf4:	00800344 	movi	r2,13
   10cf8:	18800015 	stw	r2,0(r3)
   10cfc:	00000406 	br	10d10 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   10d00:	0010bd80 	call	10bd8 <alt_get_errno>
   10d04:	1007883a 	mov	r3,r2
   10d08:	00801444 	movi	r2,81
   10d0c:	18800015 	stw	r2,0(r3)
  }
  return -1;
   10d10:	00bfffc4 	movi	r2,-1
}
   10d14:	e037883a 	mov	sp,fp
   10d18:	dfc00117 	ldw	ra,4(sp)
   10d1c:	df000017 	ldw	fp,0(sp)
   10d20:	dec00204 	addi	sp,sp,8
   10d24:	f800283a 	ret

00010d28 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   10d28:	defffd04 	addi	sp,sp,-12
   10d2c:	dfc00215 	stw	ra,8(sp)
   10d30:	df000115 	stw	fp,4(sp)
   10d34:	df000104 	addi	fp,sp,4
   10d38:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   10d3c:	e13fff17 	ldw	r4,-4(fp)
   10d40:	01400074 	movhi	r5,1
   10d44:	29545e04 	addi	r5,r5,20856
   10d48:	0011b2c0 	call	11b2c <alt_dev_llist_insert>
}
   10d4c:	e037883a 	mov	sp,fp
   10d50:	dfc00117 	ldw	ra,4(sp)
   10d54:	df000017 	ldw	fp,0(sp)
   10d58:	dec00204 	addi	sp,sp,8
   10d5c:	f800283a 	ret

00010d60 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   10d60:	defffd04 	addi	sp,sp,-12
   10d64:	dfc00215 	stw	ra,8(sp)
   10d68:	df000115 	stw	fp,4(sp)
   10d6c:	df000104 	addi	fp,sp,4
   10d70:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
   10d74:	001250c0 	call	1250c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   10d78:	00800044 	movi	r2,1
   10d7c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   10d80:	e037883a 	mov	sp,fp
   10d84:	dfc00117 	ldw	ra,4(sp)
   10d88:	df000017 	ldw	fp,0(sp)
   10d8c:	dec00204 	addi	sp,sp,8
   10d90:	f800283a 	ret

00010d94 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   10d94:	defffe04 	addi	sp,sp,-8
   10d98:	dfc00115 	stw	ra,4(sp)
   10d9c:	df000015 	stw	fp,0(sp)
   10da0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   10da4:	01000074 	movhi	r4,1
   10da8:	21104804 	addi	r4,r4,16672
   10dac:	000b883a 	mov	r5,zero
   10db0:	01800144 	movi	r6,5
   10db4:	0010f400 	call	10f40 <altera_avalon_jtag_uart_init>
   10db8:	01000074 	movhi	r4,1
   10dbc:	21103e04 	addi	r4,r4,16632
   10dc0:	0010d280 	call	10d28 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
   10dc4:	0001883a 	nop
}
   10dc8:	e037883a 	mov	sp,fp
   10dcc:	dfc00117 	ldw	ra,4(sp)
   10dd0:	df000017 	ldw	fp,0(sp)
   10dd4:	dec00204 	addi	sp,sp,8
   10dd8:	f800283a 	ret

00010ddc <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   10ddc:	defffa04 	addi	sp,sp,-24
   10de0:	dfc00515 	stw	ra,20(sp)
   10de4:	df000415 	stw	fp,16(sp)
   10de8:	df000404 	addi	fp,sp,16
   10dec:	e13ffd15 	stw	r4,-12(fp)
   10df0:	e17ffe15 	stw	r5,-8(fp)
   10df4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   10df8:	e0bffd17 	ldw	r2,-12(fp)
   10dfc:	10800017 	ldw	r2,0(r2)
   10e00:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   10e04:	e0bffc17 	ldw	r2,-16(fp)
   10e08:	10c00a04 	addi	r3,r2,40
   10e0c:	e0bffd17 	ldw	r2,-12(fp)
   10e10:	10800217 	ldw	r2,8(r2)
   10e14:	1809883a 	mov	r4,r3
   10e18:	e17ffe17 	ldw	r5,-8(fp)
   10e1c:	e1bfff17 	ldw	r6,-4(fp)
   10e20:	100f883a 	mov	r7,r2
   10e24:	00114040 	call	11404 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   10e28:	e037883a 	mov	sp,fp
   10e2c:	dfc00117 	ldw	ra,4(sp)
   10e30:	df000017 	ldw	fp,0(sp)
   10e34:	dec00204 	addi	sp,sp,8
   10e38:	f800283a 	ret

00010e3c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   10e3c:	defffa04 	addi	sp,sp,-24
   10e40:	dfc00515 	stw	ra,20(sp)
   10e44:	df000415 	stw	fp,16(sp)
   10e48:	df000404 	addi	fp,sp,16
   10e4c:	e13ffd15 	stw	r4,-12(fp)
   10e50:	e17ffe15 	stw	r5,-8(fp)
   10e54:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   10e58:	e0bffd17 	ldw	r2,-12(fp)
   10e5c:	10800017 	ldw	r2,0(r2)
   10e60:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   10e64:	e0bffc17 	ldw	r2,-16(fp)
   10e68:	10c00a04 	addi	r3,r2,40
   10e6c:	e0bffd17 	ldw	r2,-12(fp)
   10e70:	10800217 	ldw	r2,8(r2)
   10e74:	1809883a 	mov	r4,r3
   10e78:	e17ffe17 	ldw	r5,-8(fp)
   10e7c:	e1bfff17 	ldw	r6,-4(fp)
   10e80:	100f883a 	mov	r7,r2
   10e84:	00116100 	call	11610 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   10e88:	e037883a 	mov	sp,fp
   10e8c:	dfc00117 	ldw	ra,4(sp)
   10e90:	df000017 	ldw	fp,0(sp)
   10e94:	dec00204 	addi	sp,sp,8
   10e98:	f800283a 	ret

00010e9c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   10e9c:	defffc04 	addi	sp,sp,-16
   10ea0:	dfc00315 	stw	ra,12(sp)
   10ea4:	df000215 	stw	fp,8(sp)
   10ea8:	df000204 	addi	fp,sp,8
   10eac:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   10eb0:	e0bfff17 	ldw	r2,-4(fp)
   10eb4:	10800017 	ldw	r2,0(r2)
   10eb8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   10ebc:	e0bffe17 	ldw	r2,-8(fp)
   10ec0:	10c00a04 	addi	r3,r2,40
   10ec4:	e0bfff17 	ldw	r2,-4(fp)
   10ec8:	10800217 	ldw	r2,8(r2)
   10ecc:	1809883a 	mov	r4,r3
   10ed0:	100b883a 	mov	r5,r2
   10ed4:	00112b00 	call	112b0 <altera_avalon_jtag_uart_close>
}
   10ed8:	e037883a 	mov	sp,fp
   10edc:	dfc00117 	ldw	ra,4(sp)
   10ee0:	df000017 	ldw	fp,0(sp)
   10ee4:	dec00204 	addi	sp,sp,8
   10ee8:	f800283a 	ret

00010eec <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   10eec:	defffa04 	addi	sp,sp,-24
   10ef0:	dfc00515 	stw	ra,20(sp)
   10ef4:	df000415 	stw	fp,16(sp)
   10ef8:	df000404 	addi	fp,sp,16
   10efc:	e13ffd15 	stw	r4,-12(fp)
   10f00:	e17ffe15 	stw	r5,-8(fp)
   10f04:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   10f08:	e0bffd17 	ldw	r2,-12(fp)
   10f0c:	10800017 	ldw	r2,0(r2)
   10f10:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   10f14:	e0bffc17 	ldw	r2,-16(fp)
   10f18:	10800a04 	addi	r2,r2,40
   10f1c:	1009883a 	mov	r4,r2
   10f20:	e17ffe17 	ldw	r5,-8(fp)
   10f24:	e1bfff17 	ldw	r6,-4(fp)
   10f28:	00113180 	call	11318 <altera_avalon_jtag_uart_ioctl>
}
   10f2c:	e037883a 	mov	sp,fp
   10f30:	dfc00117 	ldw	ra,4(sp)
   10f34:	df000017 	ldw	fp,0(sp)
   10f38:	dec00204 	addi	sp,sp,8
   10f3c:	f800283a 	ret

00010f40 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   10f40:	defffa04 	addi	sp,sp,-24
   10f44:	dfc00515 	stw	ra,20(sp)
   10f48:	df000415 	stw	fp,16(sp)
   10f4c:	df000404 	addi	fp,sp,16
   10f50:	e13ffd15 	stw	r4,-12(fp)
   10f54:	e17ffe15 	stw	r5,-8(fp)
   10f58:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   10f5c:	e0bffd17 	ldw	r2,-12(fp)
   10f60:	00c00044 	movi	r3,1
   10f64:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   10f68:	e0bffd17 	ldw	r2,-12(fp)
   10f6c:	10800017 	ldw	r2,0(r2)
   10f70:	10800104 	addi	r2,r2,4
   10f74:	1007883a 	mov	r3,r2
   10f78:	e0bffd17 	ldw	r2,-12(fp)
   10f7c:	10800817 	ldw	r2,32(r2)
   10f80:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   10f84:	e0fffe17 	ldw	r3,-8(fp)
   10f88:	e0bfff17 	ldw	r2,-4(fp)
   10f8c:	d8000015 	stw	zero,0(sp)
   10f90:	1809883a 	mov	r4,r3
   10f94:	100b883a 	mov	r5,r2
   10f98:	01800074 	movhi	r6,1
   10f9c:	31840104 	addi	r6,r6,4100
   10fa0:	e1fffd17 	ldw	r7,-12(fp)
   10fa4:	0011ca40 	call	11ca4 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   10fa8:	e0bffd17 	ldw	r2,-12(fp)
   10fac:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   10fb0:	e0bffd17 	ldw	r2,-12(fp)
   10fb4:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   10fb8:	00800074 	movhi	r2,1
   10fbc:	109b4f04 	addi	r2,r2,27964
   10fc0:	10800017 	ldw	r2,0(r2)
   10fc4:	1809883a 	mov	r4,r3
   10fc8:	100b883a 	mov	r5,r2
   10fcc:	01800074 	movhi	r6,1
   10fd0:	31848204 	addi	r6,r6,4616
   10fd4:	e1fffd17 	ldw	r7,-12(fp)
   10fd8:	00118280 	call	11828 <alt_alarm_start>
   10fdc:	1000040e 	bge	r2,zero,10ff0 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   10fe0:	e0fffd17 	ldw	r3,-12(fp)
   10fe4:	00a00034 	movhi	r2,32768
   10fe8:	10bfffc4 	addi	r2,r2,-1
   10fec:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   10ff0:	e037883a 	mov	sp,fp
   10ff4:	dfc00117 	ldw	ra,4(sp)
   10ff8:	df000017 	ldw	fp,0(sp)
   10ffc:	dec00204 	addi	sp,sp,8
   11000:	f800283a 	ret

00011004 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   11004:	defff804 	addi	sp,sp,-32
   11008:	df000715 	stw	fp,28(sp)
   1100c:	df000704 	addi	fp,sp,28
   11010:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   11014:	e0bfff17 	ldw	r2,-4(fp)
   11018:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   1101c:	e0bffb17 	ldw	r2,-20(fp)
   11020:	10800017 	ldw	r2,0(r2)
   11024:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   11028:	e0bffc17 	ldw	r2,-16(fp)
   1102c:	10800104 	addi	r2,r2,4
   11030:	10800037 	ldwio	r2,0(r2)
   11034:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   11038:	e0bffd17 	ldw	r2,-12(fp)
   1103c:	1080c00c 	andi	r2,r2,768
   11040:	1000011e 	bne	r2,zero,11048 <altera_avalon_jtag_uart_irq+0x44>
      break;
   11044:	00006c06 	br	111f8 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   11048:	e0bffd17 	ldw	r2,-12(fp)
   1104c:	1080400c 	andi	r2,r2,256
   11050:	10003426 	beq	r2,zero,11124 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   11054:	00800074 	movhi	r2,1
   11058:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1105c:	e0bffb17 	ldw	r2,-20(fp)
   11060:	10800a17 	ldw	r2,40(r2)
   11064:	10800044 	addi	r2,r2,1
   11068:	1081ffcc 	andi	r2,r2,2047
   1106c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   11070:	e0bffb17 	ldw	r2,-20(fp)
   11074:	10c00b17 	ldw	r3,44(r2)
   11078:	e0bffe17 	ldw	r2,-8(fp)
   1107c:	1880011e 	bne	r3,r2,11084 <altera_avalon_jtag_uart_irq+0x80>
          break;
   11080:	00001606 	br	110dc <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   11084:	e0bffc17 	ldw	r2,-16(fp)
   11088:	10800037 	ldwio	r2,0(r2)
   1108c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   11090:	e0bff917 	ldw	r2,-28(fp)
   11094:	10a0000c 	andi	r2,r2,32768
   11098:	1000011e 	bne	r2,zero,110a0 <altera_avalon_jtag_uart_irq+0x9c>
          break;
   1109c:	00000f06 	br	110dc <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   110a0:	e0bffb17 	ldw	r2,-20(fp)
   110a4:	10800a17 	ldw	r2,40(r2)
   110a8:	e0fff917 	ldw	r3,-28(fp)
   110ac:	1809883a 	mov	r4,r3
   110b0:	e0fffb17 	ldw	r3,-20(fp)
   110b4:	1885883a 	add	r2,r3,r2
   110b8:	10800e04 	addi	r2,r2,56
   110bc:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   110c0:	e0bffb17 	ldw	r2,-20(fp)
   110c4:	10800a17 	ldw	r2,40(r2)
   110c8:	10800044 	addi	r2,r2,1
   110cc:	10c1ffcc 	andi	r3,r2,2047
   110d0:	e0bffb17 	ldw	r2,-20(fp)
   110d4:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   110d8:	003fe006 	br	1105c <__alt_data_end+0xfffbb92c>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   110dc:	e0bff917 	ldw	r2,-28(fp)
   110e0:	10bfffec 	andhi	r2,r2,65535
   110e4:	10000f26 	beq	r2,zero,11124 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   110e8:	e0bffb17 	ldw	r2,-20(fp)
   110ec:	10c00817 	ldw	r3,32(r2)
   110f0:	00bfff84 	movi	r2,-2
   110f4:	1886703a 	and	r3,r3,r2
   110f8:	e0bffb17 	ldw	r2,-20(fp)
   110fc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   11100:	e0bffc17 	ldw	r2,-16(fp)
   11104:	10800104 	addi	r2,r2,4
   11108:	1007883a 	mov	r3,r2
   1110c:	e0bffb17 	ldw	r2,-20(fp)
   11110:	10800817 	ldw	r2,32(r2)
   11114:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   11118:	e0bffc17 	ldw	r2,-16(fp)
   1111c:	10800104 	addi	r2,r2,4
   11120:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   11124:	e0bffd17 	ldw	r2,-12(fp)
   11128:	1080800c 	andi	r2,r2,512
   1112c:	10003126 	beq	r2,zero,111f4 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   11130:	e0bffd17 	ldw	r2,-12(fp)
   11134:	1004d43a 	srli	r2,r2,16
   11138:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   1113c:	00001406 	br	11190 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   11140:	e0bffc17 	ldw	r2,-16(fp)
   11144:	e0fffb17 	ldw	r3,-20(fp)
   11148:	18c00d17 	ldw	r3,52(r3)
   1114c:	e13ffb17 	ldw	r4,-20(fp)
   11150:	20c7883a 	add	r3,r4,r3
   11154:	18c20e04 	addi	r3,r3,2104
   11158:	18c00003 	ldbu	r3,0(r3)
   1115c:	18c03fcc 	andi	r3,r3,255
   11160:	18c0201c 	xori	r3,r3,128
   11164:	18ffe004 	addi	r3,r3,-128
   11168:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1116c:	e0bffb17 	ldw	r2,-20(fp)
   11170:	10800d17 	ldw	r2,52(r2)
   11174:	10800044 	addi	r2,r2,1
   11178:	10c1ffcc 	andi	r3,r2,2047
   1117c:	e0bffb17 	ldw	r2,-20(fp)
   11180:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   11184:	e0bffa17 	ldw	r2,-24(fp)
   11188:	10bfffc4 	addi	r2,r2,-1
   1118c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   11190:	e0bffa17 	ldw	r2,-24(fp)
   11194:	10000526 	beq	r2,zero,111ac <altera_avalon_jtag_uart_irq+0x1a8>
   11198:	e0bffb17 	ldw	r2,-20(fp)
   1119c:	10c00d17 	ldw	r3,52(r2)
   111a0:	e0bffb17 	ldw	r2,-20(fp)
   111a4:	10800c17 	ldw	r2,48(r2)
   111a8:	18bfe51e 	bne	r3,r2,11140 <__alt_data_end+0xfffbba10>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   111ac:	e0bffa17 	ldw	r2,-24(fp)
   111b0:	10001026 	beq	r2,zero,111f4 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   111b4:	e0bffb17 	ldw	r2,-20(fp)
   111b8:	10c00817 	ldw	r3,32(r2)
   111bc:	00bfff44 	movi	r2,-3
   111c0:	1886703a 	and	r3,r3,r2
   111c4:	e0bffb17 	ldw	r2,-20(fp)
   111c8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   111cc:	e0bffb17 	ldw	r2,-20(fp)
   111d0:	10800017 	ldw	r2,0(r2)
   111d4:	10800104 	addi	r2,r2,4
   111d8:	1007883a 	mov	r3,r2
   111dc:	e0bffb17 	ldw	r2,-20(fp)
   111e0:	10800817 	ldw	r2,32(r2)
   111e4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   111e8:	e0bffc17 	ldw	r2,-16(fp)
   111ec:	10800104 	addi	r2,r2,4
   111f0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   111f4:	003f8c06 	br	11028 <__alt_data_end+0xfffbb8f8>
}
   111f8:	e037883a 	mov	sp,fp
   111fc:	df000017 	ldw	fp,0(sp)
   11200:	dec00104 	addi	sp,sp,4
   11204:	f800283a 	ret

00011208 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   11208:	defff804 	addi	sp,sp,-32
   1120c:	df000715 	stw	fp,28(sp)
   11210:	df000704 	addi	fp,sp,28
   11214:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   11218:	e0bffb17 	ldw	r2,-20(fp)
   1121c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   11220:	e0bff917 	ldw	r2,-28(fp)
   11224:	10800017 	ldw	r2,0(r2)
   11228:	10800104 	addi	r2,r2,4
   1122c:	10800037 	ldwio	r2,0(r2)
   11230:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   11234:	e0bffa17 	ldw	r2,-24(fp)
   11238:	1081000c 	andi	r2,r2,1024
   1123c:	10000b26 	beq	r2,zero,1126c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   11240:	e0bff917 	ldw	r2,-28(fp)
   11244:	10800017 	ldw	r2,0(r2)
   11248:	10800104 	addi	r2,r2,4
   1124c:	1007883a 	mov	r3,r2
   11250:	e0bff917 	ldw	r2,-28(fp)
   11254:	10800817 	ldw	r2,32(r2)
   11258:	10810014 	ori	r2,r2,1024
   1125c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   11260:	e0bff917 	ldw	r2,-28(fp)
   11264:	10000915 	stw	zero,36(r2)
   11268:	00000a06 	br	11294 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   1126c:	e0bff917 	ldw	r2,-28(fp)
   11270:	10c00917 	ldw	r3,36(r2)
   11274:	00a00034 	movhi	r2,32768
   11278:	10bfff04 	addi	r2,r2,-4
   1127c:	10c00536 	bltu	r2,r3,11294 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   11280:	e0bff917 	ldw	r2,-28(fp)
   11284:	10800917 	ldw	r2,36(r2)
   11288:	10c00044 	addi	r3,r2,1
   1128c:	e0bff917 	ldw	r2,-28(fp)
   11290:	10c00915 	stw	r3,36(r2)
   11294:	00800074 	movhi	r2,1
   11298:	109b4f04 	addi	r2,r2,27964
   1129c:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   112a0:	e037883a 	mov	sp,fp
   112a4:	df000017 	ldw	fp,0(sp)
   112a8:	dec00104 	addi	sp,sp,4
   112ac:	f800283a 	ret

000112b0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   112b0:	defffd04 	addi	sp,sp,-12
   112b4:	df000215 	stw	fp,8(sp)
   112b8:	df000204 	addi	fp,sp,8
   112bc:	e13ffe15 	stw	r4,-8(fp)
   112c0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   112c4:	00000506 	br	112dc <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   112c8:	e0bfff17 	ldw	r2,-4(fp)
   112cc:	1090000c 	andi	r2,r2,16384
   112d0:	10000226 	beq	r2,zero,112dc <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   112d4:	00bffd44 	movi	r2,-11
   112d8:	00000b06 	br	11308 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   112dc:	e0bffe17 	ldw	r2,-8(fp)
   112e0:	10c00d17 	ldw	r3,52(r2)
   112e4:	e0bffe17 	ldw	r2,-8(fp)
   112e8:	10800c17 	ldw	r2,48(r2)
   112ec:	18800526 	beq	r3,r2,11304 <altera_avalon_jtag_uart_close+0x54>
   112f0:	e0bffe17 	ldw	r2,-8(fp)
   112f4:	10c00917 	ldw	r3,36(r2)
   112f8:	e0bffe17 	ldw	r2,-8(fp)
   112fc:	10800117 	ldw	r2,4(r2)
   11300:	18bff136 	bltu	r3,r2,112c8 <__alt_data_end+0xfffbbb98>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   11304:	0005883a 	mov	r2,zero
}
   11308:	e037883a 	mov	sp,fp
   1130c:	df000017 	ldw	fp,0(sp)
   11310:	dec00104 	addi	sp,sp,4
   11314:	f800283a 	ret

00011318 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   11318:	defffa04 	addi	sp,sp,-24
   1131c:	df000515 	stw	fp,20(sp)
   11320:	df000504 	addi	fp,sp,20
   11324:	e13ffd15 	stw	r4,-12(fp)
   11328:	e17ffe15 	stw	r5,-8(fp)
   1132c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   11330:	00bff9c4 	movi	r2,-25
   11334:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   11338:	e0bffe17 	ldw	r2,-8(fp)
   1133c:	10da8060 	cmpeqi	r3,r2,27137
   11340:	1800031e 	bne	r3,zero,11350 <altera_avalon_jtag_uart_ioctl+0x38>
   11344:	109a80a0 	cmpeqi	r2,r2,27138
   11348:	1000191e 	bne	r2,zero,113b0 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
   1134c:	00002806 	br	113f0 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   11350:	e0bffd17 	ldw	r2,-12(fp)
   11354:	10c00117 	ldw	r3,4(r2)
   11358:	00a00034 	movhi	r2,32768
   1135c:	10bfffc4 	addi	r2,r2,-1
   11360:	18801226 	beq	r3,r2,113ac <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
   11364:	e0bfff17 	ldw	r2,-4(fp)
   11368:	10800017 	ldw	r2,0(r2)
   1136c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   11370:	e0bffc17 	ldw	r2,-16(fp)
   11374:	10800090 	cmplti	r2,r2,2
   11378:	1000061e 	bne	r2,zero,11394 <altera_avalon_jtag_uart_ioctl+0x7c>
   1137c:	e0fffc17 	ldw	r3,-16(fp)
   11380:	00a00034 	movhi	r2,32768
   11384:	10bfffc4 	addi	r2,r2,-1
   11388:	18800226 	beq	r3,r2,11394 <altera_avalon_jtag_uart_ioctl+0x7c>
   1138c:	e0bffc17 	ldw	r2,-16(fp)
   11390:	00000206 	br	1139c <altera_avalon_jtag_uart_ioctl+0x84>
   11394:	00a00034 	movhi	r2,32768
   11398:	10bfff84 	addi	r2,r2,-2
   1139c:	e0fffd17 	ldw	r3,-12(fp)
   113a0:	18800115 	stw	r2,4(r3)
      rc = 0;
   113a4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   113a8:	00001106 	br	113f0 <altera_avalon_jtag_uart_ioctl+0xd8>
   113ac:	00001006 	br	113f0 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   113b0:	e0bffd17 	ldw	r2,-12(fp)
   113b4:	10c00117 	ldw	r3,4(r2)
   113b8:	00a00034 	movhi	r2,32768
   113bc:	10bfffc4 	addi	r2,r2,-1
   113c0:	18800a26 	beq	r3,r2,113ec <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   113c4:	e0bffd17 	ldw	r2,-12(fp)
   113c8:	10c00917 	ldw	r3,36(r2)
   113cc:	e0bffd17 	ldw	r2,-12(fp)
   113d0:	10800117 	ldw	r2,4(r2)
   113d4:	1885803a 	cmpltu	r2,r3,r2
   113d8:	10c03fcc 	andi	r3,r2,255
   113dc:	e0bfff17 	ldw	r2,-4(fp)
   113e0:	10c00015 	stw	r3,0(r2)
      rc = 0;
   113e4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   113e8:	00000006 	br	113ec <altera_avalon_jtag_uart_ioctl+0xd4>
   113ec:	0001883a 	nop

  default:
    break;
  }

  return rc;
   113f0:	e0bffb17 	ldw	r2,-20(fp)
}
   113f4:	e037883a 	mov	sp,fp
   113f8:	df000017 	ldw	fp,0(sp)
   113fc:	dec00104 	addi	sp,sp,4
   11400:	f800283a 	ret

00011404 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   11404:	defff304 	addi	sp,sp,-52
   11408:	dfc00c15 	stw	ra,48(sp)
   1140c:	df000b15 	stw	fp,44(sp)
   11410:	df000b04 	addi	fp,sp,44
   11414:	e13ffc15 	stw	r4,-16(fp)
   11418:	e17ffd15 	stw	r5,-12(fp)
   1141c:	e1bffe15 	stw	r6,-8(fp)
   11420:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   11424:	e0bffd17 	ldw	r2,-12(fp)
   11428:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   1142c:	00004906 	br	11554 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   11430:	e0bffc17 	ldw	r2,-16(fp)
   11434:	10800a17 	ldw	r2,40(r2)
   11438:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   1143c:	e0bffc17 	ldw	r2,-16(fp)
   11440:	10800b17 	ldw	r2,44(r2)
   11444:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   11448:	e0fff717 	ldw	r3,-36(fp)
   1144c:	e0bff817 	ldw	r2,-32(fp)
   11450:	18800536 	bltu	r3,r2,11468 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   11454:	e0fff717 	ldw	r3,-36(fp)
   11458:	e0bff817 	ldw	r2,-32(fp)
   1145c:	1885c83a 	sub	r2,r3,r2
   11460:	e0bff615 	stw	r2,-40(fp)
   11464:	00000406 	br	11478 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   11468:	00c20004 	movi	r3,2048
   1146c:	e0bff817 	ldw	r2,-32(fp)
   11470:	1885c83a 	sub	r2,r3,r2
   11474:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   11478:	e0bff617 	ldw	r2,-40(fp)
   1147c:	1000011e 	bne	r2,zero,11484 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
   11480:	00001d06 	br	114f8 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
   11484:	e0fffe17 	ldw	r3,-8(fp)
   11488:	e0bff617 	ldw	r2,-40(fp)
   1148c:	1880022e 	bgeu	r3,r2,11498 <altera_avalon_jtag_uart_read+0x94>
        n = space;
   11490:	e0bffe17 	ldw	r2,-8(fp)
   11494:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   11498:	e0bff817 	ldw	r2,-32(fp)
   1149c:	10800e04 	addi	r2,r2,56
   114a0:	e0fffc17 	ldw	r3,-16(fp)
   114a4:	1885883a 	add	r2,r3,r2
   114a8:	e13ff517 	ldw	r4,-44(fp)
   114ac:	100b883a 	mov	r5,r2
   114b0:	e1bff617 	ldw	r6,-40(fp)
   114b4:	00092dc0 	call	92dc <memcpy>
      ptr   += n;
   114b8:	e0fff517 	ldw	r3,-44(fp)
   114bc:	e0bff617 	ldw	r2,-40(fp)
   114c0:	1885883a 	add	r2,r3,r2
   114c4:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   114c8:	e0fffe17 	ldw	r3,-8(fp)
   114cc:	e0bff617 	ldw	r2,-40(fp)
   114d0:	1885c83a 	sub	r2,r3,r2
   114d4:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   114d8:	e0fff817 	ldw	r3,-32(fp)
   114dc:	e0bff617 	ldw	r2,-40(fp)
   114e0:	1885883a 	add	r2,r3,r2
   114e4:	10c1ffcc 	andi	r3,r2,2047
   114e8:	e0bffc17 	ldw	r2,-16(fp)
   114ec:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   114f0:	e0bffe17 	ldw	r2,-8(fp)
   114f4:	00bfce16 	blt	zero,r2,11430 <__alt_data_end+0xfffbbd00>

    /* If we read any data then return it */
    if (ptr != buffer)
   114f8:	e0fff517 	ldw	r3,-44(fp)
   114fc:	e0bffd17 	ldw	r2,-12(fp)
   11500:	18800126 	beq	r3,r2,11508 <altera_avalon_jtag_uart_read+0x104>
      break;
   11504:	00001506 	br	1155c <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   11508:	e0bfff17 	ldw	r2,-4(fp)
   1150c:	1090000c 	andi	r2,r2,16384
   11510:	10000126 	beq	r2,zero,11518 <altera_avalon_jtag_uart_read+0x114>
      break;
   11514:	00001106 	br	1155c <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   11518:	0001883a 	nop
   1151c:	e0bffc17 	ldw	r2,-16(fp)
   11520:	10c00a17 	ldw	r3,40(r2)
   11524:	e0bff717 	ldw	r2,-36(fp)
   11528:	1880051e 	bne	r3,r2,11540 <altera_avalon_jtag_uart_read+0x13c>
   1152c:	e0bffc17 	ldw	r2,-16(fp)
   11530:	10c00917 	ldw	r3,36(r2)
   11534:	e0bffc17 	ldw	r2,-16(fp)
   11538:	10800117 	ldw	r2,4(r2)
   1153c:	18bff736 	bltu	r3,r2,1151c <__alt_data_end+0xfffbbdec>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   11540:	e0bffc17 	ldw	r2,-16(fp)
   11544:	10c00a17 	ldw	r3,40(r2)
   11548:	e0bff717 	ldw	r2,-36(fp)
   1154c:	1880011e 	bne	r3,r2,11554 <altera_avalon_jtag_uart_read+0x150>
      break;
   11550:	00000206 	br	1155c <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   11554:	e0bffe17 	ldw	r2,-8(fp)
   11558:	00bfb516 	blt	zero,r2,11430 <__alt_data_end+0xfffbbd00>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   1155c:	e0fff517 	ldw	r3,-44(fp)
   11560:	e0bffd17 	ldw	r2,-12(fp)
   11564:	18801826 	beq	r3,r2,115c8 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11568:	0005303a 	rdctl	r2,status
   1156c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11570:	e0fffa17 	ldw	r3,-24(fp)
   11574:	00bfff84 	movi	r2,-2
   11578:	1884703a 	and	r2,r3,r2
   1157c:	1001703a 	wrctl	status,r2
  
  return context;
   11580:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   11584:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   11588:	e0bffc17 	ldw	r2,-16(fp)
   1158c:	10800817 	ldw	r2,32(r2)
   11590:	10c00054 	ori	r3,r2,1
   11594:	e0bffc17 	ldw	r2,-16(fp)
   11598:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1159c:	e0bffc17 	ldw	r2,-16(fp)
   115a0:	10800017 	ldw	r2,0(r2)
   115a4:	10800104 	addi	r2,r2,4
   115a8:	1007883a 	mov	r3,r2
   115ac:	e0bffc17 	ldw	r2,-16(fp)
   115b0:	10800817 	ldw	r2,32(r2)
   115b4:	18800035 	stwio	r2,0(r3)
   115b8:	e0bff917 	ldw	r2,-28(fp)
   115bc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   115c0:	e0bffb17 	ldw	r2,-20(fp)
   115c4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   115c8:	e0fff517 	ldw	r3,-44(fp)
   115cc:	e0bffd17 	ldw	r2,-12(fp)
   115d0:	18800426 	beq	r3,r2,115e4 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
   115d4:	e0fff517 	ldw	r3,-44(fp)
   115d8:	e0bffd17 	ldw	r2,-12(fp)
   115dc:	1885c83a 	sub	r2,r3,r2
   115e0:	00000606 	br	115fc <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
   115e4:	e0bfff17 	ldw	r2,-4(fp)
   115e8:	1090000c 	andi	r2,r2,16384
   115ec:	10000226 	beq	r2,zero,115f8 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
   115f0:	00bffd44 	movi	r2,-11
   115f4:	00000106 	br	115fc <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
   115f8:	00bffec4 	movi	r2,-5
}
   115fc:	e037883a 	mov	sp,fp
   11600:	dfc00117 	ldw	ra,4(sp)
   11604:	df000017 	ldw	fp,0(sp)
   11608:	dec00204 	addi	sp,sp,8
   1160c:	f800283a 	ret

00011610 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   11610:	defff304 	addi	sp,sp,-52
   11614:	dfc00c15 	stw	ra,48(sp)
   11618:	df000b15 	stw	fp,44(sp)
   1161c:	df000b04 	addi	fp,sp,44
   11620:	e13ffc15 	stw	r4,-16(fp)
   11624:	e17ffd15 	stw	r5,-12(fp)
   11628:	e1bffe15 	stw	r6,-8(fp)
   1162c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   11630:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   11634:	e0bffd17 	ldw	r2,-12(fp)
   11638:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   1163c:	00003806 	br	11720 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   11640:	e0bffc17 	ldw	r2,-16(fp)
   11644:	10800c17 	ldw	r2,48(r2)
   11648:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
   1164c:	e0bffc17 	ldw	r2,-16(fp)
   11650:	10800d17 	ldw	r2,52(r2)
   11654:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   11658:	e0fff817 	ldw	r3,-32(fp)
   1165c:	e0bff517 	ldw	r2,-44(fp)
   11660:	1880062e 	bgeu	r3,r2,1167c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   11664:	e0fff517 	ldw	r3,-44(fp)
   11668:	e0bff817 	ldw	r2,-32(fp)
   1166c:	1885c83a 	sub	r2,r3,r2
   11670:	10bfffc4 	addi	r2,r2,-1
   11674:	e0bff615 	stw	r2,-40(fp)
   11678:	00000b06 	br	116a8 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   1167c:	e0bff517 	ldw	r2,-44(fp)
   11680:	10000526 	beq	r2,zero,11698 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   11684:	00c20004 	movi	r3,2048
   11688:	e0bff817 	ldw	r2,-32(fp)
   1168c:	1885c83a 	sub	r2,r3,r2
   11690:	e0bff615 	stw	r2,-40(fp)
   11694:	00000406 	br	116a8 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   11698:	00c1ffc4 	movi	r3,2047
   1169c:	e0bff817 	ldw	r2,-32(fp)
   116a0:	1885c83a 	sub	r2,r3,r2
   116a4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   116a8:	e0bff617 	ldw	r2,-40(fp)
   116ac:	1000011e 	bne	r2,zero,116b4 <altera_avalon_jtag_uart_write+0xa4>
        break;
   116b0:	00001d06 	br	11728 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
   116b4:	e0fffe17 	ldw	r3,-8(fp)
   116b8:	e0bff617 	ldw	r2,-40(fp)
   116bc:	1880022e 	bgeu	r3,r2,116c8 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
   116c0:	e0bffe17 	ldw	r2,-8(fp)
   116c4:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   116c8:	e0bff817 	ldw	r2,-32(fp)
   116cc:	10820e04 	addi	r2,r2,2104
   116d0:	e0fffc17 	ldw	r3,-16(fp)
   116d4:	1885883a 	add	r2,r3,r2
   116d8:	1009883a 	mov	r4,r2
   116dc:	e17ffd17 	ldw	r5,-12(fp)
   116e0:	e1bff617 	ldw	r6,-40(fp)
   116e4:	00092dc0 	call	92dc <memcpy>
      ptr   += n;
   116e8:	e0fffd17 	ldw	r3,-12(fp)
   116ec:	e0bff617 	ldw	r2,-40(fp)
   116f0:	1885883a 	add	r2,r3,r2
   116f4:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   116f8:	e0fffe17 	ldw	r3,-8(fp)
   116fc:	e0bff617 	ldw	r2,-40(fp)
   11700:	1885c83a 	sub	r2,r3,r2
   11704:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   11708:	e0fff817 	ldw	r3,-32(fp)
   1170c:	e0bff617 	ldw	r2,-40(fp)
   11710:	1885883a 	add	r2,r3,r2
   11714:	10c1ffcc 	andi	r3,r2,2047
   11718:	e0bffc17 	ldw	r2,-16(fp)
   1171c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   11720:	e0bffe17 	ldw	r2,-8(fp)
   11724:	00bfc616 	blt	zero,r2,11640 <__alt_data_end+0xfffbbf10>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11728:	0005303a 	rdctl	r2,status
   1172c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11730:	e0fffa17 	ldw	r3,-24(fp)
   11734:	00bfff84 	movi	r2,-2
   11738:	1884703a 	and	r2,r3,r2
   1173c:	1001703a 	wrctl	status,r2
  
  return context;
   11740:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   11744:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   11748:	e0bffc17 	ldw	r2,-16(fp)
   1174c:	10800817 	ldw	r2,32(r2)
   11750:	10c00094 	ori	r3,r2,2
   11754:	e0bffc17 	ldw	r2,-16(fp)
   11758:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1175c:	e0bffc17 	ldw	r2,-16(fp)
   11760:	10800017 	ldw	r2,0(r2)
   11764:	10800104 	addi	r2,r2,4
   11768:	1007883a 	mov	r3,r2
   1176c:	e0bffc17 	ldw	r2,-16(fp)
   11770:	10800817 	ldw	r2,32(r2)
   11774:	18800035 	stwio	r2,0(r3)
   11778:	e0bff917 	ldw	r2,-28(fp)
   1177c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11780:	e0bffb17 	ldw	r2,-20(fp)
   11784:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   11788:	e0bffe17 	ldw	r2,-8(fp)
   1178c:	0080120e 	bge	zero,r2,117d8 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
   11790:	e0bfff17 	ldw	r2,-4(fp)
   11794:	1090000c 	andi	r2,r2,16384
   11798:	10000126 	beq	r2,zero,117a0 <altera_avalon_jtag_uart_write+0x190>
        break;
   1179c:	00001006 	br	117e0 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   117a0:	0001883a 	nop
   117a4:	e0bffc17 	ldw	r2,-16(fp)
   117a8:	10c00d17 	ldw	r3,52(r2)
   117ac:	e0bff517 	ldw	r2,-44(fp)
   117b0:	1880051e 	bne	r3,r2,117c8 <altera_avalon_jtag_uart_write+0x1b8>
   117b4:	e0bffc17 	ldw	r2,-16(fp)
   117b8:	10c00917 	ldw	r3,36(r2)
   117bc:	e0bffc17 	ldw	r2,-16(fp)
   117c0:	10800117 	ldw	r2,4(r2)
   117c4:	18bff736 	bltu	r3,r2,117a4 <__alt_data_end+0xfffbc074>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   117c8:	e0bffc17 	ldw	r2,-16(fp)
   117cc:	10800917 	ldw	r2,36(r2)
   117d0:	10000126 	beq	r2,zero,117d8 <altera_avalon_jtag_uart_write+0x1c8>
         break;
   117d4:	00000206 	br	117e0 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
   117d8:	e0bffe17 	ldw	r2,-8(fp)
   117dc:	00bf9716 	blt	zero,r2,1163c <__alt_data_end+0xfffbbf0c>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   117e0:	e0fffd17 	ldw	r3,-12(fp)
   117e4:	e0bff717 	ldw	r2,-36(fp)
   117e8:	18800426 	beq	r3,r2,117fc <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
   117ec:	e0fffd17 	ldw	r3,-12(fp)
   117f0:	e0bff717 	ldw	r2,-36(fp)
   117f4:	1885c83a 	sub	r2,r3,r2
   117f8:	00000606 	br	11814 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
   117fc:	e0bfff17 	ldw	r2,-4(fp)
   11800:	1090000c 	andi	r2,r2,16384
   11804:	10000226 	beq	r2,zero,11810 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
   11808:	00bffd44 	movi	r2,-11
   1180c:	00000106 	br	11814 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   11810:	00bffec4 	movi	r2,-5
}
   11814:	e037883a 	mov	sp,fp
   11818:	dfc00117 	ldw	ra,4(sp)
   1181c:	df000017 	ldw	fp,0(sp)
   11820:	dec00204 	addi	sp,sp,8
   11824:	f800283a 	ret

00011828 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   11828:	defff504 	addi	sp,sp,-44
   1182c:	df000a15 	stw	fp,40(sp)
   11830:	df000a04 	addi	fp,sp,40
   11834:	e13ffc15 	stw	r4,-16(fp)
   11838:	e17ffd15 	stw	r5,-12(fp)
   1183c:	e1bffe15 	stw	r6,-8(fp)
   11840:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   11844:	e03ff615 	stw	zero,-40(fp)
   11848:	00800074 	movhi	r2,1
   1184c:	109b4f04 	addi	r2,r2,27964
   11850:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   11854:	10003f26 	beq	r2,zero,11954 <alt_alarm_start+0x12c>
  {
    if (alarm)
   11858:	e0bffc17 	ldw	r2,-16(fp)
   1185c:	10003b26 	beq	r2,zero,1194c <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   11860:	e0bffc17 	ldw	r2,-16(fp)
   11864:	e0fffe17 	ldw	r3,-8(fp)
   11868:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   1186c:	e0bffc17 	ldw	r2,-16(fp)
   11870:	e0ffff17 	ldw	r3,-4(fp)
   11874:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11878:	0005303a 	rdctl	r2,status
   1187c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11880:	e0fff817 	ldw	r3,-32(fp)
   11884:	00bfff84 	movi	r2,-2
   11888:	1884703a 	and	r2,r3,r2
   1188c:	1001703a 	wrctl	status,r2
  
  return context;
   11890:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   11894:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   11898:	00800074 	movhi	r2,1
   1189c:	109b5004 	addi	r2,r2,27968
   118a0:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   118a4:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   118a8:	e0fffd17 	ldw	r3,-12(fp)
   118ac:	e0bff617 	ldw	r2,-40(fp)
   118b0:	1885883a 	add	r2,r3,r2
   118b4:	10c00044 	addi	r3,r2,1
   118b8:	e0bffc17 	ldw	r2,-16(fp)
   118bc:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   118c0:	e0bffc17 	ldw	r2,-16(fp)
   118c4:	10c00217 	ldw	r3,8(r2)
   118c8:	e0bff617 	ldw	r2,-40(fp)
   118cc:	1880042e 	bgeu	r3,r2,118e0 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   118d0:	e0bffc17 	ldw	r2,-16(fp)
   118d4:	00c00044 	movi	r3,1
   118d8:	10c00405 	stb	r3,16(r2)
   118dc:	00000206 	br	118e8 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   118e0:	e0bffc17 	ldw	r2,-16(fp)
   118e4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   118e8:	e0fffc17 	ldw	r3,-16(fp)
   118ec:	00800074 	movhi	r2,1
   118f0:	10946404 	addi	r2,r2,20880
   118f4:	e0bff915 	stw	r2,-28(fp)
   118f8:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   118fc:	e0bffa17 	ldw	r2,-24(fp)
   11900:	e0fff917 	ldw	r3,-28(fp)
   11904:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   11908:	e0bff917 	ldw	r2,-28(fp)
   1190c:	10c00017 	ldw	r3,0(r2)
   11910:	e0bffa17 	ldw	r2,-24(fp)
   11914:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   11918:	e0bff917 	ldw	r2,-28(fp)
   1191c:	10800017 	ldw	r2,0(r2)
   11920:	e0fffa17 	ldw	r3,-24(fp)
   11924:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   11928:	e0bff917 	ldw	r2,-28(fp)
   1192c:	e0fffa17 	ldw	r3,-24(fp)
   11930:	10c00015 	stw	r3,0(r2)
   11934:	e0bff717 	ldw	r2,-36(fp)
   11938:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1193c:	e0bffb17 	ldw	r2,-20(fp)
   11940:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   11944:	0005883a 	mov	r2,zero
   11948:	00000306 	br	11958 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   1194c:	00bffa84 	movi	r2,-22
   11950:	00000106 	br	11958 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   11954:	00bfde84 	movi	r2,-134
  }
}
   11958:	e037883a 	mov	sp,fp
   1195c:	df000017 	ldw	fp,0(sp)
   11960:	dec00104 	addi	sp,sp,4
   11964:	f800283a 	ret

00011968 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   11968:	defffa04 	addi	sp,sp,-24
   1196c:	dfc00515 	stw	ra,20(sp)
   11970:	df000415 	stw	fp,16(sp)
   11974:	df000404 	addi	fp,sp,16
   11978:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   1197c:	00800244 	movi	r2,9
   11980:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   11984:	e13ffd17 	ldw	r4,-12(fp)
   11988:	014003f4 	movhi	r5,15
   1198c:	29509004 	addi	r5,r5,16960
   11990:	000dae00 	call	dae0 <__mulsi3>
   11994:	0100bef4 	movhi	r4,763
   11998:	213c2004 	addi	r4,r4,-3968
   1199c:	100b883a 	mov	r5,r2
   119a0:	000390c0 	call	390c <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   119a4:	01200034 	movhi	r4,32768
   119a8:	213fffc4 	addi	r4,r4,-1
   119ac:	100b883a 	mov	r5,r2
   119b0:	000390c0 	call	390c <__udivsi3>
   119b4:	e13fff17 	ldw	r4,-4(fp)
   119b8:	100b883a 	mov	r5,r2
   119bc:	000390c0 	call	390c <__udivsi3>
   119c0:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   119c4:	e0bffe17 	ldw	r2,-8(fp)
   119c8:	10002a26 	beq	r2,zero,11a74 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   119cc:	e03ffc15 	stw	zero,-16(fp)
   119d0:	00001706 	br	11a30 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   119d4:	00a00034 	movhi	r2,32768
   119d8:	10bfffc4 	addi	r2,r2,-1
   119dc:	10bfffc4 	addi	r2,r2,-1
   119e0:	103ffe1e 	bne	r2,zero,119dc <__alt_data_end+0xfffbc2ac>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   119e4:	e13ffd17 	ldw	r4,-12(fp)
   119e8:	014003f4 	movhi	r5,15
   119ec:	29509004 	addi	r5,r5,16960
   119f0:	000dae00 	call	dae0 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   119f4:	0100bef4 	movhi	r4,763
   119f8:	213c2004 	addi	r4,r4,-3968
   119fc:	100b883a 	mov	r5,r2
   11a00:	000390c0 	call	390c <__udivsi3>
   11a04:	01200034 	movhi	r4,32768
   11a08:	213fffc4 	addi	r4,r4,-1
   11a0c:	100b883a 	mov	r5,r2
   11a10:	000390c0 	call	390c <__udivsi3>
   11a14:	1007883a 	mov	r3,r2
   11a18:	e0bfff17 	ldw	r2,-4(fp)
   11a1c:	10c5c83a 	sub	r2,r2,r3
   11a20:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   11a24:	e0bffc17 	ldw	r2,-16(fp)
   11a28:	10800044 	addi	r2,r2,1
   11a2c:	e0bffc15 	stw	r2,-16(fp)
   11a30:	e0fffc17 	ldw	r3,-16(fp)
   11a34:	e0bffe17 	ldw	r2,-8(fp)
   11a38:	18bfe616 	blt	r3,r2,119d4 <__alt_data_end+0xfffbc2a4>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   11a3c:	e13ffd17 	ldw	r4,-12(fp)
   11a40:	014003f4 	movhi	r5,15
   11a44:	29509004 	addi	r5,r5,16960
   11a48:	000dae00 	call	dae0 <__mulsi3>
   11a4c:	0100bef4 	movhi	r4,763
   11a50:	213c2004 	addi	r4,r4,-3968
   11a54:	100b883a 	mov	r5,r2
   11a58:	000390c0 	call	390c <__udivsi3>
   11a5c:	1009883a 	mov	r4,r2
   11a60:	e17fff17 	ldw	r5,-4(fp)
   11a64:	000dae00 	call	dae0 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   11a68:	10bfffc4 	addi	r2,r2,-1
   11a6c:	103ffe1e 	bne	r2,zero,11a68 <__alt_data_end+0xfffbc338>
   11a70:	00000d06 	br	11aa8 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   11a74:	e13ffd17 	ldw	r4,-12(fp)
   11a78:	014003f4 	movhi	r5,15
   11a7c:	29509004 	addi	r5,r5,16960
   11a80:	000dae00 	call	dae0 <__mulsi3>
   11a84:	0100bef4 	movhi	r4,763
   11a88:	213c2004 	addi	r4,r4,-3968
   11a8c:	100b883a 	mov	r5,r2
   11a90:	000390c0 	call	390c <__udivsi3>
   11a94:	1009883a 	mov	r4,r2
   11a98:	e17fff17 	ldw	r5,-4(fp)
   11a9c:	000dae00 	call	dae0 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   11aa0:	10bfffc4 	addi	r2,r2,-1
   11aa4:	00bffe16 	blt	zero,r2,11aa0 <__alt_data_end+0xfffbc370>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   11aa8:	0005883a 	mov	r2,zero
}
   11aac:	e037883a 	mov	sp,fp
   11ab0:	dfc00117 	ldw	ra,4(sp)
   11ab4:	df000017 	ldw	fp,0(sp)
   11ab8:	dec00204 	addi	sp,sp,8
   11abc:	f800283a 	ret

00011ac0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   11ac0:	deffff04 	addi	sp,sp,-4
   11ac4:	df000015 	stw	fp,0(sp)
   11ac8:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   11acc:	e037883a 	mov	sp,fp
   11ad0:	df000017 	ldw	fp,0(sp)
   11ad4:	dec00104 	addi	sp,sp,4
   11ad8:	f800283a 	ret

00011adc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11adc:	defffe04 	addi	sp,sp,-8
   11ae0:	dfc00115 	stw	ra,4(sp)
   11ae4:	df000015 	stw	fp,0(sp)
   11ae8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   11aec:	00800074 	movhi	r2,1
   11af0:	10946104 	addi	r2,r2,20868
   11af4:	10800017 	ldw	r2,0(r2)
   11af8:	10000526 	beq	r2,zero,11b10 <alt_get_errno+0x34>
   11afc:	00800074 	movhi	r2,1
   11b00:	10946104 	addi	r2,r2,20868
   11b04:	10800017 	ldw	r2,0(r2)
   11b08:	103ee83a 	callr	r2
   11b0c:	00000206 	br	11b18 <alt_get_errno+0x3c>
   11b10:	00800074 	movhi	r2,1
   11b14:	109b4704 	addi	r2,r2,27932
}
   11b18:	e037883a 	mov	sp,fp
   11b1c:	dfc00117 	ldw	ra,4(sp)
   11b20:	df000017 	ldw	fp,0(sp)
   11b24:	dec00204 	addi	sp,sp,8
   11b28:	f800283a 	ret

00011b2c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   11b2c:	defffa04 	addi	sp,sp,-24
   11b30:	dfc00515 	stw	ra,20(sp)
   11b34:	df000415 	stw	fp,16(sp)
   11b38:	df000404 	addi	fp,sp,16
   11b3c:	e13ffe15 	stw	r4,-8(fp)
   11b40:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   11b44:	e0bffe17 	ldw	r2,-8(fp)
   11b48:	10000326 	beq	r2,zero,11b58 <alt_dev_llist_insert+0x2c>
   11b4c:	e0bffe17 	ldw	r2,-8(fp)
   11b50:	10800217 	ldw	r2,8(r2)
   11b54:	1000061e 	bne	r2,zero,11b70 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   11b58:	0011adc0 	call	11adc <alt_get_errno>
   11b5c:	1007883a 	mov	r3,r2
   11b60:	00800584 	movi	r2,22
   11b64:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   11b68:	00bffa84 	movi	r2,-22
   11b6c:	00001306 	br	11bbc <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   11b70:	e0bffe17 	ldw	r2,-8(fp)
   11b74:	e0ffff17 	ldw	r3,-4(fp)
   11b78:	e0fffc15 	stw	r3,-16(fp)
   11b7c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   11b80:	e0bffd17 	ldw	r2,-12(fp)
   11b84:	e0fffc17 	ldw	r3,-16(fp)
   11b88:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   11b8c:	e0bffc17 	ldw	r2,-16(fp)
   11b90:	10c00017 	ldw	r3,0(r2)
   11b94:	e0bffd17 	ldw	r2,-12(fp)
   11b98:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   11b9c:	e0bffc17 	ldw	r2,-16(fp)
   11ba0:	10800017 	ldw	r2,0(r2)
   11ba4:	e0fffd17 	ldw	r3,-12(fp)
   11ba8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   11bac:	e0bffc17 	ldw	r2,-16(fp)
   11bb0:	e0fffd17 	ldw	r3,-12(fp)
   11bb4:	10c00015 	stw	r3,0(r2)

  return 0;  
   11bb8:	0005883a 	mov	r2,zero
}
   11bbc:	e037883a 	mov	sp,fp
   11bc0:	dfc00117 	ldw	ra,4(sp)
   11bc4:	df000017 	ldw	fp,0(sp)
   11bc8:	dec00204 	addi	sp,sp,8
   11bcc:	f800283a 	ret

00011bd0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   11bd0:	defffd04 	addi	sp,sp,-12
   11bd4:	dfc00215 	stw	ra,8(sp)
   11bd8:	df000115 	stw	fp,4(sp)
   11bdc:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   11be0:	00800074 	movhi	r2,1
   11be4:	108af804 	addi	r2,r2,11232
   11be8:	e0bfff15 	stw	r2,-4(fp)
   11bec:	00000606 	br	11c08 <_do_ctors+0x38>
        (*ctor) (); 
   11bf0:	e0bfff17 	ldw	r2,-4(fp)
   11bf4:	10800017 	ldw	r2,0(r2)
   11bf8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   11bfc:	e0bfff17 	ldw	r2,-4(fp)
   11c00:	10bfff04 	addi	r2,r2,-4
   11c04:	e0bfff15 	stw	r2,-4(fp)
   11c08:	e0ffff17 	ldw	r3,-4(fp)
   11c0c:	00800074 	movhi	r2,1
   11c10:	108af904 	addi	r2,r2,11236
   11c14:	18bff62e 	bgeu	r3,r2,11bf0 <__alt_data_end+0xfffbc4c0>
        (*ctor) (); 
}
   11c18:	e037883a 	mov	sp,fp
   11c1c:	dfc00117 	ldw	ra,4(sp)
   11c20:	df000017 	ldw	fp,0(sp)
   11c24:	dec00204 	addi	sp,sp,8
   11c28:	f800283a 	ret

00011c2c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   11c2c:	defffd04 	addi	sp,sp,-12
   11c30:	dfc00215 	stw	ra,8(sp)
   11c34:	df000115 	stw	fp,4(sp)
   11c38:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   11c3c:	00800074 	movhi	r2,1
   11c40:	108af804 	addi	r2,r2,11232
   11c44:	e0bfff15 	stw	r2,-4(fp)
   11c48:	00000606 	br	11c64 <_do_dtors+0x38>
        (*dtor) (); 
   11c4c:	e0bfff17 	ldw	r2,-4(fp)
   11c50:	10800017 	ldw	r2,0(r2)
   11c54:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   11c58:	e0bfff17 	ldw	r2,-4(fp)
   11c5c:	10bfff04 	addi	r2,r2,-4
   11c60:	e0bfff15 	stw	r2,-4(fp)
   11c64:	e0ffff17 	ldw	r3,-4(fp)
   11c68:	00800074 	movhi	r2,1
   11c6c:	108af904 	addi	r2,r2,11236
   11c70:	18bff62e 	bgeu	r3,r2,11c4c <__alt_data_end+0xfffbc51c>
        (*dtor) (); 
}
   11c74:	e037883a 	mov	sp,fp
   11c78:	dfc00117 	ldw	ra,4(sp)
   11c7c:	df000017 	ldw	fp,0(sp)
   11c80:	dec00204 	addi	sp,sp,8
   11c84:	f800283a 	ret

00011c88 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   11c88:	deffff04 	addi	sp,sp,-4
   11c8c:	df000015 	stw	fp,0(sp)
   11c90:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   11c94:	e037883a 	mov	sp,fp
   11c98:	df000017 	ldw	fp,0(sp)
   11c9c:	dec00104 	addi	sp,sp,4
   11ca0:	f800283a 	ret

00011ca4 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   11ca4:	defff904 	addi	sp,sp,-28
   11ca8:	dfc00615 	stw	ra,24(sp)
   11cac:	df000515 	stw	fp,20(sp)
   11cb0:	df000504 	addi	fp,sp,20
   11cb4:	e13ffc15 	stw	r4,-16(fp)
   11cb8:	e17ffd15 	stw	r5,-12(fp)
   11cbc:	e1bffe15 	stw	r6,-8(fp)
   11cc0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   11cc4:	e0800217 	ldw	r2,8(fp)
   11cc8:	d8800015 	stw	r2,0(sp)
   11ccc:	e13ffc17 	ldw	r4,-16(fp)
   11cd0:	e17ffd17 	ldw	r5,-12(fp)
   11cd4:	e1bffe17 	ldw	r6,-8(fp)
   11cd8:	e1ffff17 	ldw	r7,-4(fp)
   11cdc:	0011e840 	call	11e84 <alt_iic_isr_register>
}  
   11ce0:	e037883a 	mov	sp,fp
   11ce4:	dfc00117 	ldw	ra,4(sp)
   11ce8:	df000017 	ldw	fp,0(sp)
   11cec:	dec00204 	addi	sp,sp,8
   11cf0:	f800283a 	ret

00011cf4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   11cf4:	defff904 	addi	sp,sp,-28
   11cf8:	df000615 	stw	fp,24(sp)
   11cfc:	df000604 	addi	fp,sp,24
   11d00:	e13ffe15 	stw	r4,-8(fp)
   11d04:	e17fff15 	stw	r5,-4(fp)
   11d08:	e0bfff17 	ldw	r2,-4(fp)
   11d0c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11d10:	0005303a 	rdctl	r2,status
   11d14:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11d18:	e0fffb17 	ldw	r3,-20(fp)
   11d1c:	00bfff84 	movi	r2,-2
   11d20:	1884703a 	and	r2,r3,r2
   11d24:	1001703a 	wrctl	status,r2
  
  return context;
   11d28:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   11d2c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   11d30:	e0bffa17 	ldw	r2,-24(fp)
   11d34:	00c00044 	movi	r3,1
   11d38:	1884983a 	sll	r2,r3,r2
   11d3c:	1007883a 	mov	r3,r2
   11d40:	00800074 	movhi	r2,1
   11d44:	109b4e04 	addi	r2,r2,27960
   11d48:	10800017 	ldw	r2,0(r2)
   11d4c:	1886b03a 	or	r3,r3,r2
   11d50:	00800074 	movhi	r2,1
   11d54:	109b4e04 	addi	r2,r2,27960
   11d58:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   11d5c:	00800074 	movhi	r2,1
   11d60:	109b4e04 	addi	r2,r2,27960
   11d64:	10800017 	ldw	r2,0(r2)
   11d68:	100170fa 	wrctl	ienable,r2
   11d6c:	e0bffc17 	ldw	r2,-16(fp)
   11d70:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11d74:	e0bffd17 	ldw	r2,-12(fp)
   11d78:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   11d7c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   11d80:	0001883a 	nop
}
   11d84:	e037883a 	mov	sp,fp
   11d88:	df000017 	ldw	fp,0(sp)
   11d8c:	dec00104 	addi	sp,sp,4
   11d90:	f800283a 	ret

00011d94 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   11d94:	defff904 	addi	sp,sp,-28
   11d98:	df000615 	stw	fp,24(sp)
   11d9c:	df000604 	addi	fp,sp,24
   11da0:	e13ffe15 	stw	r4,-8(fp)
   11da4:	e17fff15 	stw	r5,-4(fp)
   11da8:	e0bfff17 	ldw	r2,-4(fp)
   11dac:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11db0:	0005303a 	rdctl	r2,status
   11db4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11db8:	e0fffb17 	ldw	r3,-20(fp)
   11dbc:	00bfff84 	movi	r2,-2
   11dc0:	1884703a 	and	r2,r3,r2
   11dc4:	1001703a 	wrctl	status,r2
  
  return context;
   11dc8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   11dcc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   11dd0:	e0bffa17 	ldw	r2,-24(fp)
   11dd4:	00c00044 	movi	r3,1
   11dd8:	1884983a 	sll	r2,r3,r2
   11ddc:	0084303a 	nor	r2,zero,r2
   11de0:	1007883a 	mov	r3,r2
   11de4:	00800074 	movhi	r2,1
   11de8:	109b4e04 	addi	r2,r2,27960
   11dec:	10800017 	ldw	r2,0(r2)
   11df0:	1886703a 	and	r3,r3,r2
   11df4:	00800074 	movhi	r2,1
   11df8:	109b4e04 	addi	r2,r2,27960
   11dfc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   11e00:	00800074 	movhi	r2,1
   11e04:	109b4e04 	addi	r2,r2,27960
   11e08:	10800017 	ldw	r2,0(r2)
   11e0c:	100170fa 	wrctl	ienable,r2
   11e10:	e0bffc17 	ldw	r2,-16(fp)
   11e14:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11e18:	e0bffd17 	ldw	r2,-12(fp)
   11e1c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   11e20:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   11e24:	0001883a 	nop
}
   11e28:	e037883a 	mov	sp,fp
   11e2c:	df000017 	ldw	fp,0(sp)
   11e30:	dec00104 	addi	sp,sp,4
   11e34:	f800283a 	ret

00011e38 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   11e38:	defffc04 	addi	sp,sp,-16
   11e3c:	df000315 	stw	fp,12(sp)
   11e40:	df000304 	addi	fp,sp,12
   11e44:	e13ffe15 	stw	r4,-8(fp)
   11e48:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   11e4c:	000530fa 	rdctl	r2,ienable
   11e50:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   11e54:	e0bfff17 	ldw	r2,-4(fp)
   11e58:	00c00044 	movi	r3,1
   11e5c:	1884983a 	sll	r2,r3,r2
   11e60:	1007883a 	mov	r3,r2
   11e64:	e0bffd17 	ldw	r2,-12(fp)
   11e68:	1884703a 	and	r2,r3,r2
   11e6c:	1004c03a 	cmpne	r2,r2,zero
   11e70:	10803fcc 	andi	r2,r2,255
}
   11e74:	e037883a 	mov	sp,fp
   11e78:	df000017 	ldw	fp,0(sp)
   11e7c:	dec00104 	addi	sp,sp,4
   11e80:	f800283a 	ret

00011e84 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   11e84:	defff504 	addi	sp,sp,-44
   11e88:	dfc00a15 	stw	ra,40(sp)
   11e8c:	df000915 	stw	fp,36(sp)
   11e90:	df000904 	addi	fp,sp,36
   11e94:	e13ffc15 	stw	r4,-16(fp)
   11e98:	e17ffd15 	stw	r5,-12(fp)
   11e9c:	e1bffe15 	stw	r6,-8(fp)
   11ea0:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   11ea4:	00bffa84 	movi	r2,-22
   11ea8:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   11eac:	e0bffd17 	ldw	r2,-12(fp)
   11eb0:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   11eb4:	e0bff817 	ldw	r2,-32(fp)
   11eb8:	10800808 	cmpgei	r2,r2,32
   11ebc:	1000271e 	bne	r2,zero,11f5c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11ec0:	0005303a 	rdctl	r2,status
   11ec4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11ec8:	e0fffa17 	ldw	r3,-24(fp)
   11ecc:	00bfff84 	movi	r2,-2
   11ed0:	1884703a 	and	r2,r3,r2
   11ed4:	1001703a 	wrctl	status,r2
  
  return context;
   11ed8:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   11edc:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   11ee0:	00800074 	movhi	r2,1
   11ee4:	109b5c04 	addi	r2,r2,28016
   11ee8:	e0fff817 	ldw	r3,-32(fp)
   11eec:	180690fa 	slli	r3,r3,3
   11ef0:	10c5883a 	add	r2,r2,r3
   11ef4:	e0fffe17 	ldw	r3,-8(fp)
   11ef8:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   11efc:	00800074 	movhi	r2,1
   11f00:	109b5c04 	addi	r2,r2,28016
   11f04:	e0fff817 	ldw	r3,-32(fp)
   11f08:	180690fa 	slli	r3,r3,3
   11f0c:	10c5883a 	add	r2,r2,r3
   11f10:	10800104 	addi	r2,r2,4
   11f14:	e0ffff17 	ldw	r3,-4(fp)
   11f18:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   11f1c:	e0bffe17 	ldw	r2,-8(fp)
   11f20:	10000526 	beq	r2,zero,11f38 <alt_iic_isr_register+0xb4>
   11f24:	e0bff817 	ldw	r2,-32(fp)
   11f28:	e13ffc17 	ldw	r4,-16(fp)
   11f2c:	100b883a 	mov	r5,r2
   11f30:	0011cf40 	call	11cf4 <alt_ic_irq_enable>
   11f34:	00000406 	br	11f48 <alt_iic_isr_register+0xc4>
   11f38:	e0bff817 	ldw	r2,-32(fp)
   11f3c:	e13ffc17 	ldw	r4,-16(fp)
   11f40:	100b883a 	mov	r5,r2
   11f44:	0011d940 	call	11d94 <alt_ic_irq_disable>
   11f48:	e0bff715 	stw	r2,-36(fp)
   11f4c:	e0bff917 	ldw	r2,-28(fp)
   11f50:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11f54:	e0bffb17 	ldw	r2,-20(fp)
   11f58:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   11f5c:	e0bff717 	ldw	r2,-36(fp)
}
   11f60:	e037883a 	mov	sp,fp
   11f64:	dfc00117 	ldw	ra,4(sp)
   11f68:	df000017 	ldw	fp,0(sp)
   11f6c:	dec00204 	addi	sp,sp,8
   11f70:	f800283a 	ret

00011f74 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   11f74:	defff804 	addi	sp,sp,-32
   11f78:	dfc00715 	stw	ra,28(sp)
   11f7c:	df000615 	stw	fp,24(sp)
   11f80:	dc000515 	stw	r16,20(sp)
   11f84:	df000604 	addi	fp,sp,24
   11f88:	e13ffb15 	stw	r4,-20(fp)
   11f8c:	e17ffc15 	stw	r5,-16(fp)
   11f90:	e1bffd15 	stw	r6,-12(fp)
   11f94:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   11f98:	e13ffc17 	ldw	r4,-16(fp)
   11f9c:	e17ffd17 	ldw	r5,-12(fp)
   11fa0:	e1bffe17 	ldw	r6,-8(fp)
   11fa4:	00122100 	call	12210 <open>
   11fa8:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   11fac:	e0bffa17 	ldw	r2,-24(fp)
   11fb0:	10002216 	blt	r2,zero,1203c <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   11fb4:	04000074 	movhi	r16,1
   11fb8:	840fde04 	addi	r16,r16,16248
   11fbc:	e0bffa17 	ldw	r2,-24(fp)
   11fc0:	1009883a 	mov	r4,r2
   11fc4:	01400304 	movi	r5,12
   11fc8:	000dae00 	call	dae0 <__mulsi3>
   11fcc:	8085883a 	add	r2,r16,r2
   11fd0:	10c00017 	ldw	r3,0(r2)
   11fd4:	e0bffb17 	ldw	r2,-20(fp)
   11fd8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   11fdc:	04000074 	movhi	r16,1
   11fe0:	840fde04 	addi	r16,r16,16248
   11fe4:	e0bffa17 	ldw	r2,-24(fp)
   11fe8:	1009883a 	mov	r4,r2
   11fec:	01400304 	movi	r5,12
   11ff0:	000dae00 	call	dae0 <__mulsi3>
   11ff4:	8085883a 	add	r2,r16,r2
   11ff8:	10800104 	addi	r2,r2,4
   11ffc:	10c00017 	ldw	r3,0(r2)
   12000:	e0bffb17 	ldw	r2,-20(fp)
   12004:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   12008:	04000074 	movhi	r16,1
   1200c:	840fde04 	addi	r16,r16,16248
   12010:	e0bffa17 	ldw	r2,-24(fp)
   12014:	1009883a 	mov	r4,r2
   12018:	01400304 	movi	r5,12
   1201c:	000dae00 	call	dae0 <__mulsi3>
   12020:	8085883a 	add	r2,r16,r2
   12024:	10800204 	addi	r2,r2,8
   12028:	10c00017 	ldw	r3,0(r2)
   1202c:	e0bffb17 	ldw	r2,-20(fp)
   12030:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   12034:	e13ffa17 	ldw	r4,-24(fp)
   12038:	0010a780 	call	10a78 <alt_release_fd>
  }
} 
   1203c:	e6ffff04 	addi	sp,fp,-4
   12040:	dfc00217 	ldw	ra,8(sp)
   12044:	df000117 	ldw	fp,4(sp)
   12048:	dc000017 	ldw	r16,0(sp)
   1204c:	dec00304 	addi	sp,sp,12
   12050:	f800283a 	ret

00012054 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   12054:	defffb04 	addi	sp,sp,-20
   12058:	dfc00415 	stw	ra,16(sp)
   1205c:	df000315 	stw	fp,12(sp)
   12060:	df000304 	addi	fp,sp,12
   12064:	e13ffd15 	stw	r4,-12(fp)
   12068:	e17ffe15 	stw	r5,-8(fp)
   1206c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   12070:	01000074 	movhi	r4,1
   12074:	210fe104 	addi	r4,r4,16260
   12078:	e17ffd17 	ldw	r5,-12(fp)
   1207c:	01800044 	movi	r6,1
   12080:	01c07fc4 	movi	r7,511
   12084:	0011f740 	call	11f74 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   12088:	01000074 	movhi	r4,1
   1208c:	210fde04 	addi	r4,r4,16248
   12090:	e17ffe17 	ldw	r5,-8(fp)
   12094:	000d883a 	mov	r6,zero
   12098:	01c07fc4 	movi	r7,511
   1209c:	0011f740 	call	11f74 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   120a0:	01000074 	movhi	r4,1
   120a4:	210fe404 	addi	r4,r4,16272
   120a8:	e17fff17 	ldw	r5,-4(fp)
   120ac:	01800044 	movi	r6,1
   120b0:	01c07fc4 	movi	r7,511
   120b4:	0011f740 	call	11f74 <alt_open_fd>
}  
   120b8:	e037883a 	mov	sp,fp
   120bc:	dfc00117 	ldw	ra,4(sp)
   120c0:	df000017 	ldw	fp,0(sp)
   120c4:	dec00204 	addi	sp,sp,8
   120c8:	f800283a 	ret

000120cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   120cc:	defffe04 	addi	sp,sp,-8
   120d0:	dfc00115 	stw	ra,4(sp)
   120d4:	df000015 	stw	fp,0(sp)
   120d8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   120dc:	00800074 	movhi	r2,1
   120e0:	10946104 	addi	r2,r2,20868
   120e4:	10800017 	ldw	r2,0(r2)
   120e8:	10000526 	beq	r2,zero,12100 <alt_get_errno+0x34>
   120ec:	00800074 	movhi	r2,1
   120f0:	10946104 	addi	r2,r2,20868
   120f4:	10800017 	ldw	r2,0(r2)
   120f8:	103ee83a 	callr	r2
   120fc:	00000206 	br	12108 <alt_get_errno+0x3c>
   12100:	00800074 	movhi	r2,1
   12104:	109b4704 	addi	r2,r2,27932
}
   12108:	e037883a 	mov	sp,fp
   1210c:	dfc00117 	ldw	ra,4(sp)
   12110:	df000017 	ldw	fp,0(sp)
   12114:	dec00204 	addi	sp,sp,8
   12118:	f800283a 	ret

0001211c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   1211c:	defffb04 	addi	sp,sp,-20
   12120:	dfc00415 	stw	ra,16(sp)
   12124:	df000315 	stw	fp,12(sp)
   12128:	dc000215 	stw	r16,8(sp)
   1212c:	df000304 	addi	fp,sp,12
   12130:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   12134:	e0bffe17 	ldw	r2,-8(fp)
   12138:	10800217 	ldw	r2,8(r2)
   1213c:	10d00034 	orhi	r3,r2,16384
   12140:	e0bffe17 	ldw	r2,-8(fp)
   12144:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   12148:	e03ffd15 	stw	zero,-12(fp)
   1214c:	00002306 	br	121dc <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   12150:	04000074 	movhi	r16,1
   12154:	840fde04 	addi	r16,r16,16248
   12158:	e0bffd17 	ldw	r2,-12(fp)
   1215c:	1009883a 	mov	r4,r2
   12160:	01400304 	movi	r5,12
   12164:	000dae00 	call	dae0 <__mulsi3>
   12168:	8085883a 	add	r2,r16,r2
   1216c:	10c00017 	ldw	r3,0(r2)
   12170:	e0bffe17 	ldw	r2,-8(fp)
   12174:	10800017 	ldw	r2,0(r2)
   12178:	1880151e 	bne	r3,r2,121d0 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1217c:	04000074 	movhi	r16,1
   12180:	840fde04 	addi	r16,r16,16248
   12184:	e0bffd17 	ldw	r2,-12(fp)
   12188:	1009883a 	mov	r4,r2
   1218c:	01400304 	movi	r5,12
   12190:	000dae00 	call	dae0 <__mulsi3>
   12194:	8085883a 	add	r2,r16,r2
   12198:	10800204 	addi	r2,r2,8
   1219c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   121a0:	10000b0e 	bge	r2,zero,121d0 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   121a4:	e13ffd17 	ldw	r4,-12(fp)
   121a8:	01400304 	movi	r5,12
   121ac:	000dae00 	call	dae0 <__mulsi3>
   121b0:	1007883a 	mov	r3,r2
   121b4:	00800074 	movhi	r2,1
   121b8:	108fde04 	addi	r2,r2,16248
   121bc:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   121c0:	e0bffe17 	ldw	r2,-8(fp)
   121c4:	18800226 	beq	r3,r2,121d0 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   121c8:	00bffcc4 	movi	r2,-13
   121cc:	00000a06 	br	121f8 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   121d0:	e0bffd17 	ldw	r2,-12(fp)
   121d4:	10800044 	addi	r2,r2,1
   121d8:	e0bffd15 	stw	r2,-12(fp)
   121dc:	00800074 	movhi	r2,1
   121e0:	10946004 	addi	r2,r2,20864
   121e4:	10800017 	ldw	r2,0(r2)
   121e8:	1007883a 	mov	r3,r2
   121ec:	e0bffd17 	ldw	r2,-12(fp)
   121f0:	18bfd72e 	bgeu	r3,r2,12150 <__alt_data_end+0xfffbca20>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   121f4:	0005883a 	mov	r2,zero
}
   121f8:	e6ffff04 	addi	sp,fp,-4
   121fc:	dfc00217 	ldw	ra,8(sp)
   12200:	df000117 	ldw	fp,4(sp)
   12204:	dc000017 	ldw	r16,0(sp)
   12208:	dec00304 	addi	sp,sp,12
   1220c:	f800283a 	ret

00012210 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   12210:	defff604 	addi	sp,sp,-40
   12214:	dfc00915 	stw	ra,36(sp)
   12218:	df000815 	stw	fp,32(sp)
   1221c:	df000804 	addi	fp,sp,32
   12220:	e13ffd15 	stw	r4,-12(fp)
   12224:	e17ffe15 	stw	r5,-8(fp)
   12228:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   1222c:	00bfffc4 	movi	r2,-1
   12230:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   12234:	00bffb44 	movi	r2,-19
   12238:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   1223c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   12240:	e13ffd17 	ldw	r4,-12(fp)
   12244:	01400074 	movhi	r5,1
   12248:	29545e04 	addi	r5,r5,20856
   1224c:	001252c0 	call	1252c <alt_find_dev>
   12250:	e0bff815 	stw	r2,-32(fp)
   12254:	e0bff817 	ldw	r2,-32(fp)
   12258:	1000051e 	bne	r2,zero,12270 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   1225c:	e13ffd17 	ldw	r4,-12(fp)
   12260:	00125bc0 	call	125bc <alt_find_file>
   12264:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   12268:	00800044 	movi	r2,1
   1226c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   12270:	e0bff817 	ldw	r2,-32(fp)
   12274:	10002b26 	beq	r2,zero,12324 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
   12278:	e13ff817 	ldw	r4,-32(fp)
   1227c:	00126d00 	call	126d0 <alt_get_fd>
   12280:	e0bff915 	stw	r2,-28(fp)
   12284:	e0bff917 	ldw	r2,-28(fp)
   12288:	1000030e 	bge	r2,zero,12298 <open+0x88>
    {
      status = index;
   1228c:	e0bff917 	ldw	r2,-28(fp)
   12290:	e0bffa15 	stw	r2,-24(fp)
   12294:	00002506 	br	1232c <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
   12298:	e13ff917 	ldw	r4,-28(fp)
   1229c:	01400304 	movi	r5,12
   122a0:	000dae00 	call	dae0 <__mulsi3>
   122a4:	1007883a 	mov	r3,r2
   122a8:	00800074 	movhi	r2,1
   122ac:	108fde04 	addi	r2,r2,16248
   122b0:	1885883a 	add	r2,r3,r2
   122b4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   122b8:	e0fffe17 	ldw	r3,-8(fp)
   122bc:	00900034 	movhi	r2,16384
   122c0:	10bfffc4 	addi	r2,r2,-1
   122c4:	1886703a 	and	r3,r3,r2
   122c8:	e0bffc17 	ldw	r2,-16(fp)
   122cc:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   122d0:	e0bffb17 	ldw	r2,-20(fp)
   122d4:	1000051e 	bne	r2,zero,122ec <open+0xdc>
   122d8:	e13ffc17 	ldw	r4,-16(fp)
   122dc:	001211c0 	call	1211c <alt_file_locked>
   122e0:	e0bffa15 	stw	r2,-24(fp)
   122e4:	e0bffa17 	ldw	r2,-24(fp)
   122e8:	10001016 	blt	r2,zero,1232c <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   122ec:	e0bff817 	ldw	r2,-32(fp)
   122f0:	10800317 	ldw	r2,12(r2)
   122f4:	10000826 	beq	r2,zero,12318 <open+0x108>
   122f8:	e0bff817 	ldw	r2,-32(fp)
   122fc:	10800317 	ldw	r2,12(r2)
   12300:	e13ffc17 	ldw	r4,-16(fp)
   12304:	e17ffd17 	ldw	r5,-12(fp)
   12308:	e1bffe17 	ldw	r6,-8(fp)
   1230c:	e1ffff17 	ldw	r7,-4(fp)
   12310:	103ee83a 	callr	r2
   12314:	00000106 	br	1231c <open+0x10c>
   12318:	0005883a 	mov	r2,zero
   1231c:	e0bffa15 	stw	r2,-24(fp)
   12320:	00000206 	br	1232c <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   12324:	00bffb44 	movi	r2,-19
   12328:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   1232c:	e0bffa17 	ldw	r2,-24(fp)
   12330:	1000090e 	bge	r2,zero,12358 <open+0x148>
  {
    alt_release_fd (index);  
   12334:	e13ff917 	ldw	r4,-28(fp)
   12338:	0010a780 	call	10a78 <alt_release_fd>
    ALT_ERRNO = -status;
   1233c:	00120cc0 	call	120cc <alt_get_errno>
   12340:	1007883a 	mov	r3,r2
   12344:	e0bffa17 	ldw	r2,-24(fp)
   12348:	0085c83a 	sub	r2,zero,r2
   1234c:	18800015 	stw	r2,0(r3)
    return -1;
   12350:	00bfffc4 	movi	r2,-1
   12354:	00000106 	br	1235c <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
   12358:	e0bff917 	ldw	r2,-28(fp)
}
   1235c:	e037883a 	mov	sp,fp
   12360:	dfc00117 	ldw	ra,4(sp)
   12364:	df000017 	ldw	fp,0(sp)
   12368:	dec00204 	addi	sp,sp,8
   1236c:	f800283a 	ret

00012370 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   12370:	defffa04 	addi	sp,sp,-24
   12374:	df000515 	stw	fp,20(sp)
   12378:	df000504 	addi	fp,sp,20
   1237c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12380:	0005303a 	rdctl	r2,status
   12384:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12388:	e0fffc17 	ldw	r3,-16(fp)
   1238c:	00bfff84 	movi	r2,-2
   12390:	1884703a 	and	r2,r3,r2
   12394:	1001703a 	wrctl	status,r2
  
  return context;
   12398:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   1239c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   123a0:	e0bfff17 	ldw	r2,-4(fp)
   123a4:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   123a8:	e0bffd17 	ldw	r2,-12(fp)
   123ac:	10800017 	ldw	r2,0(r2)
   123b0:	e0fffd17 	ldw	r3,-12(fp)
   123b4:	18c00117 	ldw	r3,4(r3)
   123b8:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   123bc:	e0bffd17 	ldw	r2,-12(fp)
   123c0:	10800117 	ldw	r2,4(r2)
   123c4:	e0fffd17 	ldw	r3,-12(fp)
   123c8:	18c00017 	ldw	r3,0(r3)
   123cc:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   123d0:	e0bffd17 	ldw	r2,-12(fp)
   123d4:	e0fffd17 	ldw	r3,-12(fp)
   123d8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   123dc:	e0bffd17 	ldw	r2,-12(fp)
   123e0:	e0fffd17 	ldw	r3,-12(fp)
   123e4:	10c00015 	stw	r3,0(r2)
   123e8:	e0bffb17 	ldw	r2,-20(fp)
   123ec:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   123f0:	e0bffe17 	ldw	r2,-8(fp)
   123f4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   123f8:	e037883a 	mov	sp,fp
   123fc:	df000017 	ldw	fp,0(sp)
   12400:	dec00104 	addi	sp,sp,4
   12404:	f800283a 	ret

00012408 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   12408:	defffb04 	addi	sp,sp,-20
   1240c:	dfc00415 	stw	ra,16(sp)
   12410:	df000315 	stw	fp,12(sp)
   12414:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   12418:	d0a00e17 	ldw	r2,-32712(gp)
   1241c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   12420:	d0a6fa17 	ldw	r2,-25624(gp)
   12424:	10800044 	addi	r2,r2,1
   12428:	d0a6fa15 	stw	r2,-25624(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1242c:	00002e06 	br	124e8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   12430:	e0bffd17 	ldw	r2,-12(fp)
   12434:	10800017 	ldw	r2,0(r2)
   12438:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   1243c:	e0bffd17 	ldw	r2,-12(fp)
   12440:	10800403 	ldbu	r2,16(r2)
   12444:	10803fcc 	andi	r2,r2,255
   12448:	10000426 	beq	r2,zero,1245c <alt_tick+0x54>
   1244c:	d0a6fa17 	ldw	r2,-25624(gp)
   12450:	1000021e 	bne	r2,zero,1245c <alt_tick+0x54>
    {
      alarm->rollover = 0;
   12454:	e0bffd17 	ldw	r2,-12(fp)
   12458:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   1245c:	e0bffd17 	ldw	r2,-12(fp)
   12460:	10800217 	ldw	r2,8(r2)
   12464:	d0e6fa17 	ldw	r3,-25624(gp)
   12468:	18801d36 	bltu	r3,r2,124e0 <alt_tick+0xd8>
   1246c:	e0bffd17 	ldw	r2,-12(fp)
   12470:	10800403 	ldbu	r2,16(r2)
   12474:	10803fcc 	andi	r2,r2,255
   12478:	1000191e 	bne	r2,zero,124e0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   1247c:	e0bffd17 	ldw	r2,-12(fp)
   12480:	10800317 	ldw	r2,12(r2)
   12484:	e0fffd17 	ldw	r3,-12(fp)
   12488:	18c00517 	ldw	r3,20(r3)
   1248c:	1809883a 	mov	r4,r3
   12490:	103ee83a 	callr	r2
   12494:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   12498:	e0bfff17 	ldw	r2,-4(fp)
   1249c:	1000031e 	bne	r2,zero,124ac <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   124a0:	e13ffd17 	ldw	r4,-12(fp)
   124a4:	00123700 	call	12370 <alt_alarm_stop>
   124a8:	00000d06 	br	124e0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   124ac:	e0bffd17 	ldw	r2,-12(fp)
   124b0:	10c00217 	ldw	r3,8(r2)
   124b4:	e0bfff17 	ldw	r2,-4(fp)
   124b8:	1887883a 	add	r3,r3,r2
   124bc:	e0bffd17 	ldw	r2,-12(fp)
   124c0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   124c4:	e0bffd17 	ldw	r2,-12(fp)
   124c8:	10c00217 	ldw	r3,8(r2)
   124cc:	d0a6fa17 	ldw	r2,-25624(gp)
   124d0:	1880032e 	bgeu	r3,r2,124e0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   124d4:	e0bffd17 	ldw	r2,-12(fp)
   124d8:	00c00044 	movi	r3,1
   124dc:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   124e0:	e0bffe17 	ldw	r2,-8(fp)
   124e4:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   124e8:	e0fffd17 	ldw	r3,-12(fp)
   124ec:	d0a00e04 	addi	r2,gp,-32712
   124f0:	18bfcf1e 	bne	r3,r2,12430 <__alt_data_end+0xfffbcd00>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   124f4:	0001883a 	nop
}
   124f8:	e037883a 	mov	sp,fp
   124fc:	dfc00117 	ldw	ra,4(sp)
   12500:	df000017 	ldw	fp,0(sp)
   12504:	dec00204 	addi	sp,sp,8
   12508:	f800283a 	ret

0001250c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   1250c:	deffff04 	addi	sp,sp,-4
   12510:	df000015 	stw	fp,0(sp)
   12514:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   12518:	000170fa 	wrctl	ienable,zero
}
   1251c:	e037883a 	mov	sp,fp
   12520:	df000017 	ldw	fp,0(sp)
   12524:	dec00104 	addi	sp,sp,4
   12528:	f800283a 	ret

0001252c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   1252c:	defffa04 	addi	sp,sp,-24
   12530:	dfc00515 	stw	ra,20(sp)
   12534:	df000415 	stw	fp,16(sp)
   12538:	df000404 	addi	fp,sp,16
   1253c:	e13ffe15 	stw	r4,-8(fp)
   12540:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   12544:	e0bfff17 	ldw	r2,-4(fp)
   12548:	10800017 	ldw	r2,0(r2)
   1254c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   12550:	e13ffe17 	ldw	r4,-8(fp)
   12554:	00042f00 	call	42f0 <strlen>
   12558:	10800044 	addi	r2,r2,1
   1255c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   12560:	00000d06 	br	12598 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   12564:	e0bffc17 	ldw	r2,-16(fp)
   12568:	10c00217 	ldw	r3,8(r2)
   1256c:	e0bffd17 	ldw	r2,-12(fp)
   12570:	1809883a 	mov	r4,r3
   12574:	e17ffe17 	ldw	r5,-8(fp)
   12578:	100d883a 	mov	r6,r2
   1257c:	001288c0 	call	1288c <memcmp>
   12580:	1000021e 	bne	r2,zero,1258c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   12584:	e0bffc17 	ldw	r2,-16(fp)
   12588:	00000706 	br	125a8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   1258c:	e0bffc17 	ldw	r2,-16(fp)
   12590:	10800017 	ldw	r2,0(r2)
   12594:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   12598:	e0fffc17 	ldw	r3,-16(fp)
   1259c:	e0bfff17 	ldw	r2,-4(fp)
   125a0:	18bff01e 	bne	r3,r2,12564 <__alt_data_end+0xfffbce34>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   125a4:	0005883a 	mov	r2,zero
}
   125a8:	e037883a 	mov	sp,fp
   125ac:	dfc00117 	ldw	ra,4(sp)
   125b0:	df000017 	ldw	fp,0(sp)
   125b4:	dec00204 	addi	sp,sp,8
   125b8:	f800283a 	ret

000125bc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   125bc:	defffb04 	addi	sp,sp,-20
   125c0:	dfc00415 	stw	ra,16(sp)
   125c4:	df000315 	stw	fp,12(sp)
   125c8:	df000304 	addi	fp,sp,12
   125cc:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   125d0:	00800074 	movhi	r2,1
   125d4:	10945c04 	addi	r2,r2,20848
   125d8:	10800017 	ldw	r2,0(r2)
   125dc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   125e0:	00003106 	br	126a8 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   125e4:	e0bffd17 	ldw	r2,-12(fp)
   125e8:	10800217 	ldw	r2,8(r2)
   125ec:	1009883a 	mov	r4,r2
   125f0:	00042f00 	call	42f0 <strlen>
   125f4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   125f8:	e0bffd17 	ldw	r2,-12(fp)
   125fc:	10c00217 	ldw	r3,8(r2)
   12600:	e0bffe17 	ldw	r2,-8(fp)
   12604:	10bfffc4 	addi	r2,r2,-1
   12608:	1885883a 	add	r2,r3,r2
   1260c:	10800003 	ldbu	r2,0(r2)
   12610:	10803fcc 	andi	r2,r2,255
   12614:	1080201c 	xori	r2,r2,128
   12618:	10bfe004 	addi	r2,r2,-128
   1261c:	10800bd8 	cmpnei	r2,r2,47
   12620:	1000031e 	bne	r2,zero,12630 <alt_find_file+0x74>
    {
      len -= 1;
   12624:	e0bffe17 	ldw	r2,-8(fp)
   12628:	10bfffc4 	addi	r2,r2,-1
   1262c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   12630:	e0bffe17 	ldw	r2,-8(fp)
   12634:	e0ffff17 	ldw	r3,-4(fp)
   12638:	1885883a 	add	r2,r3,r2
   1263c:	10800003 	ldbu	r2,0(r2)
   12640:	10803fcc 	andi	r2,r2,255
   12644:	1080201c 	xori	r2,r2,128
   12648:	10bfe004 	addi	r2,r2,-128
   1264c:	10800be0 	cmpeqi	r2,r2,47
   12650:	1000081e 	bne	r2,zero,12674 <alt_find_file+0xb8>
   12654:	e0bffe17 	ldw	r2,-8(fp)
   12658:	e0ffff17 	ldw	r3,-4(fp)
   1265c:	1885883a 	add	r2,r3,r2
   12660:	10800003 	ldbu	r2,0(r2)
   12664:	10803fcc 	andi	r2,r2,255
   12668:	1080201c 	xori	r2,r2,128
   1266c:	10bfe004 	addi	r2,r2,-128
   12670:	10000a1e 	bne	r2,zero,1269c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   12674:	e0bffd17 	ldw	r2,-12(fp)
   12678:	10c00217 	ldw	r3,8(r2)
   1267c:	e0bffe17 	ldw	r2,-8(fp)
   12680:	1809883a 	mov	r4,r3
   12684:	e17fff17 	ldw	r5,-4(fp)
   12688:	100d883a 	mov	r6,r2
   1268c:	001288c0 	call	1288c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   12690:	1000021e 	bne	r2,zero,1269c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   12694:	e0bffd17 	ldw	r2,-12(fp)
   12698:	00000806 	br	126bc <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   1269c:	e0bffd17 	ldw	r2,-12(fp)
   126a0:	10800017 	ldw	r2,0(r2)
   126a4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   126a8:	e0fffd17 	ldw	r3,-12(fp)
   126ac:	00800074 	movhi	r2,1
   126b0:	10945c04 	addi	r2,r2,20848
   126b4:	18bfcb1e 	bne	r3,r2,125e4 <__alt_data_end+0xfffbceb4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   126b8:	0005883a 	mov	r2,zero
}
   126bc:	e037883a 	mov	sp,fp
   126c0:	dfc00117 	ldw	ra,4(sp)
   126c4:	df000017 	ldw	fp,0(sp)
   126c8:	dec00204 	addi	sp,sp,8
   126cc:	f800283a 	ret

000126d0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   126d0:	defffa04 	addi	sp,sp,-24
   126d4:	dfc00515 	stw	ra,20(sp)
   126d8:	df000415 	stw	fp,16(sp)
   126dc:	dc000315 	stw	r16,12(sp)
   126e0:	df000404 	addi	fp,sp,16
   126e4:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   126e8:	00bffa04 	movi	r2,-24
   126ec:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   126f0:	e03ffc15 	stw	zero,-16(fp)
   126f4:	00002106 	br	1277c <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   126f8:	04000074 	movhi	r16,1
   126fc:	840fde04 	addi	r16,r16,16248
   12700:	e0bffc17 	ldw	r2,-16(fp)
   12704:	1009883a 	mov	r4,r2
   12708:	01400304 	movi	r5,12
   1270c:	000dae00 	call	dae0 <__mulsi3>
   12710:	8085883a 	add	r2,r16,r2
   12714:	10800017 	ldw	r2,0(r2)
   12718:	1000151e 	bne	r2,zero,12770 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   1271c:	04000074 	movhi	r16,1
   12720:	840fde04 	addi	r16,r16,16248
   12724:	e0bffc17 	ldw	r2,-16(fp)
   12728:	1009883a 	mov	r4,r2
   1272c:	01400304 	movi	r5,12
   12730:	000dae00 	call	dae0 <__mulsi3>
   12734:	8085883a 	add	r2,r16,r2
   12738:	e0fffe17 	ldw	r3,-8(fp)
   1273c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   12740:	00800074 	movhi	r2,1
   12744:	10946004 	addi	r2,r2,20864
   12748:	10c00017 	ldw	r3,0(r2)
   1274c:	e0bffc17 	ldw	r2,-16(fp)
   12750:	1880040e 	bge	r3,r2,12764 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   12754:	00800074 	movhi	r2,1
   12758:	10946004 	addi	r2,r2,20864
   1275c:	e0fffc17 	ldw	r3,-16(fp)
   12760:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   12764:	e0bffc17 	ldw	r2,-16(fp)
   12768:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   1276c:	00000606 	br	12788 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   12770:	e0bffc17 	ldw	r2,-16(fp)
   12774:	10800044 	addi	r2,r2,1
   12778:	e0bffc15 	stw	r2,-16(fp)
   1277c:	e0bffc17 	ldw	r2,-16(fp)
   12780:	10800810 	cmplti	r2,r2,32
   12784:	103fdc1e 	bne	r2,zero,126f8 <__alt_data_end+0xfffbcfc8>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   12788:	e0bffd17 	ldw	r2,-12(fp)
}
   1278c:	e6ffff04 	addi	sp,fp,-4
   12790:	dfc00217 	ldw	ra,8(sp)
   12794:	df000117 	ldw	fp,4(sp)
   12798:	dc000017 	ldw	r16,0(sp)
   1279c:	dec00304 	addi	sp,sp,12
   127a0:	f800283a 	ret

000127a4 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   127a4:	defffe04 	addi	sp,sp,-8
   127a8:	df000115 	stw	fp,4(sp)
   127ac:	df000104 	addi	fp,sp,4
   127b0:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   127b4:	e0bfff17 	ldw	r2,-4(fp)
   127b8:	10bffe84 	addi	r2,r2,-6
   127bc:	10c00428 	cmpgeui	r3,r2,16
   127c0:	18001a1e 	bne	r3,zero,1282c <alt_exception_cause_generated_bad_addr+0x88>
   127c4:	100690ba 	slli	r3,r2,2
   127c8:	00800074 	movhi	r2,1
   127cc:	1089f704 	addi	r2,r2,10204
   127d0:	1885883a 	add	r2,r3,r2
   127d4:	10800017 	ldw	r2,0(r2)
   127d8:	1000683a 	jmp	r2
   127dc:	0001281c 	xori	zero,zero,1184
   127e0:	0001281c 	xori	zero,zero,1184
   127e4:	0001282c 	andhi	zero,zero,1184
   127e8:	0001282c 	andhi	zero,zero,1184
   127ec:	0001282c 	andhi	zero,zero,1184
   127f0:	0001281c 	xori	zero,zero,1184
   127f4:	00012824 	muli	zero,zero,1184
   127f8:	0001282c 	andhi	zero,zero,1184
   127fc:	0001281c 	xori	zero,zero,1184
   12800:	0001281c 	xori	zero,zero,1184
   12804:	0001282c 	andhi	zero,zero,1184
   12808:	0001281c 	xori	zero,zero,1184
   1280c:	00012824 	muli	zero,zero,1184
   12810:	0001282c 	andhi	zero,zero,1184
   12814:	0001282c 	andhi	zero,zero,1184
   12818:	0001281c 	xori	zero,zero,1184
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   1281c:	00800044 	movi	r2,1
   12820:	00000306 	br	12830 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   12824:	0005883a 	mov	r2,zero
   12828:	00000106 	br	12830 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   1282c:	0005883a 	mov	r2,zero
  }
}
   12830:	e037883a 	mov	sp,fp
   12834:	df000017 	ldw	fp,0(sp)
   12838:	dec00104 	addi	sp,sp,4
   1283c:	f800283a 	ret

00012840 <atexit>:
   12840:	200b883a 	mov	r5,r4
   12844:	000d883a 	mov	r6,zero
   12848:	0009883a 	mov	r4,zero
   1284c:	000f883a 	mov	r7,zero
   12850:	00129081 	jmpi	12908 <__register_exitproc>

00012854 <exit>:
   12854:	defffe04 	addi	sp,sp,-8
   12858:	000b883a 	mov	r5,zero
   1285c:	dc000015 	stw	r16,0(sp)
   12860:	dfc00115 	stw	ra,4(sp)
   12864:	2021883a 	mov	r16,r4
   12868:	0012a1c0 	call	12a1c <__call_exitprocs>
   1286c:	00800074 	movhi	r2,1
   12870:	10945804 	addi	r2,r2,20832
   12874:	11000017 	ldw	r4,0(r2)
   12878:	20800f17 	ldw	r2,60(r4)
   1287c:	10000126 	beq	r2,zero,12884 <exit+0x30>
   12880:	103ee83a 	callr	r2
   12884:	8009883a 	mov	r4,r16
   12888:	0012bb00 	call	12bb0 <_exit>

0001288c <memcmp>:
   1288c:	01c000c4 	movi	r7,3
   12890:	3980192e 	bgeu	r7,r6,128f8 <memcmp+0x6c>
   12894:	2144b03a 	or	r2,r4,r5
   12898:	11c4703a 	and	r2,r2,r7
   1289c:	10000f26 	beq	r2,zero,128dc <memcmp+0x50>
   128a0:	20800003 	ldbu	r2,0(r4)
   128a4:	28c00003 	ldbu	r3,0(r5)
   128a8:	10c0151e 	bne	r2,r3,12900 <memcmp+0x74>
   128ac:	31bfff84 	addi	r6,r6,-2
   128b0:	01ffffc4 	movi	r7,-1
   128b4:	00000406 	br	128c8 <memcmp+0x3c>
   128b8:	20800003 	ldbu	r2,0(r4)
   128bc:	28c00003 	ldbu	r3,0(r5)
   128c0:	31bfffc4 	addi	r6,r6,-1
   128c4:	10c00e1e 	bne	r2,r3,12900 <memcmp+0x74>
   128c8:	21000044 	addi	r4,r4,1
   128cc:	29400044 	addi	r5,r5,1
   128d0:	31fff91e 	bne	r6,r7,128b8 <__alt_data_end+0xfffbd188>
   128d4:	0005883a 	mov	r2,zero
   128d8:	f800283a 	ret
   128dc:	20c00017 	ldw	r3,0(r4)
   128e0:	28800017 	ldw	r2,0(r5)
   128e4:	1880041e 	bne	r3,r2,128f8 <memcmp+0x6c>
   128e8:	31bfff04 	addi	r6,r6,-4
   128ec:	21000104 	addi	r4,r4,4
   128f0:	29400104 	addi	r5,r5,4
   128f4:	39bff936 	bltu	r7,r6,128dc <__alt_data_end+0xfffbd1ac>
   128f8:	303fe91e 	bne	r6,zero,128a0 <__alt_data_end+0xfffbd170>
   128fc:	003ff506 	br	128d4 <__alt_data_end+0xfffbd1a4>
   12900:	10c5c83a 	sub	r2,r2,r3
   12904:	f800283a 	ret

00012908 <__register_exitproc>:
   12908:	00800074 	movhi	r2,1
   1290c:	defffa04 	addi	sp,sp,-24
   12910:	10945804 	addi	r2,r2,20832
   12914:	dc000315 	stw	r16,12(sp)
   12918:	14000017 	ldw	r16,0(r2)
   1291c:	dc400415 	stw	r17,16(sp)
   12920:	dfc00515 	stw	ra,20(sp)
   12924:	80805217 	ldw	r2,328(r16)
   12928:	2023883a 	mov	r17,r4
   1292c:	10003626 	beq	r2,zero,12a08 <__register_exitproc+0x100>
   12930:	10c00117 	ldw	r3,4(r2)
   12934:	010007c4 	movi	r4,31
   12938:	20c00e16 	blt	r4,r3,12974 <__register_exitproc+0x6c>
   1293c:	1a400044 	addi	r9,r3,1
   12940:	8800211e 	bne	r17,zero,129c8 <__register_exitproc+0xc0>
   12944:	18c00084 	addi	r3,r3,2
   12948:	18c7883a 	add	r3,r3,r3
   1294c:	18c7883a 	add	r3,r3,r3
   12950:	12400115 	stw	r9,4(r2)
   12954:	10c7883a 	add	r3,r2,r3
   12958:	19400015 	stw	r5,0(r3)
   1295c:	0005883a 	mov	r2,zero
   12960:	dfc00517 	ldw	ra,20(sp)
   12964:	dc400417 	ldw	r17,16(sp)
   12968:	dc000317 	ldw	r16,12(sp)
   1296c:	dec00604 	addi	sp,sp,24
   12970:	f800283a 	ret
   12974:	00800034 	movhi	r2,0
   12978:	108e4704 	addi	r2,r2,14620
   1297c:	10002526 	beq	r2,zero,12a14 <__register_exitproc+0x10c>
   12980:	01006404 	movi	r4,400
   12984:	d9400015 	stw	r5,0(sp)
   12988:	d9800115 	stw	r6,4(sp)
   1298c:	d9c00215 	stw	r7,8(sp)
   12990:	000391c0 	call	391c <malloc>
   12994:	d9400017 	ldw	r5,0(sp)
   12998:	d9800117 	ldw	r6,4(sp)
   1299c:	d9c00217 	ldw	r7,8(sp)
   129a0:	10001c26 	beq	r2,zero,12a14 <__register_exitproc+0x10c>
   129a4:	80c05217 	ldw	r3,328(r16)
   129a8:	10000115 	stw	zero,4(r2)
   129ac:	02400044 	movi	r9,1
   129b0:	10c00015 	stw	r3,0(r2)
   129b4:	80805215 	stw	r2,328(r16)
   129b8:	10006215 	stw	zero,392(r2)
   129bc:	10006315 	stw	zero,396(r2)
   129c0:	0007883a 	mov	r3,zero
   129c4:	883fdf26 	beq	r17,zero,12944 <__alt_data_end+0xfffbd214>
   129c8:	18d1883a 	add	r8,r3,r3
   129cc:	4211883a 	add	r8,r8,r8
   129d0:	1211883a 	add	r8,r2,r8
   129d4:	41802215 	stw	r6,136(r8)
   129d8:	01000044 	movi	r4,1
   129dc:	11806217 	ldw	r6,392(r2)
   129e0:	20c8983a 	sll	r4,r4,r3
   129e4:	310cb03a 	or	r6,r6,r4
   129e8:	11806215 	stw	r6,392(r2)
   129ec:	41c04215 	stw	r7,264(r8)
   129f0:	01800084 	movi	r6,2
   129f4:	89bfd31e 	bne	r17,r6,12944 <__alt_data_end+0xfffbd214>
   129f8:	11806317 	ldw	r6,396(r2)
   129fc:	3108b03a 	or	r4,r6,r4
   12a00:	11006315 	stw	r4,396(r2)
   12a04:	003fcf06 	br	12944 <__alt_data_end+0xfffbd214>
   12a08:	80805304 	addi	r2,r16,332
   12a0c:	80805215 	stw	r2,328(r16)
   12a10:	003fc706 	br	12930 <__alt_data_end+0xfffbd200>
   12a14:	00bfffc4 	movi	r2,-1
   12a18:	003fd106 	br	12960 <__alt_data_end+0xfffbd230>

00012a1c <__call_exitprocs>:
   12a1c:	00800074 	movhi	r2,1
   12a20:	10945804 	addi	r2,r2,20832
   12a24:	10800017 	ldw	r2,0(r2)
   12a28:	defff404 	addi	sp,sp,-48
   12a2c:	dd800815 	stw	r22,32(sp)
   12a30:	d8800015 	stw	r2,0(sp)
   12a34:	10805204 	addi	r2,r2,328
   12a38:	dd000615 	stw	r20,24(sp)
   12a3c:	dc800415 	stw	r18,16(sp)
   12a40:	dfc00b15 	stw	ra,44(sp)
   12a44:	df000a15 	stw	fp,40(sp)
   12a48:	ddc00915 	stw	r23,36(sp)
   12a4c:	dd400715 	stw	r21,28(sp)
   12a50:	dcc00515 	stw	r19,20(sp)
   12a54:	dc400315 	stw	r17,12(sp)
   12a58:	dc000215 	stw	r16,8(sp)
   12a5c:	2025883a 	mov	r18,r4
   12a60:	2829883a 	mov	r20,r5
   12a64:	d8800115 	stw	r2,4(sp)
   12a68:	05bfffc4 	movi	r22,-1
   12a6c:	d8800017 	ldw	r2,0(sp)
   12a70:	14c05217 	ldw	r19,328(r2)
   12a74:	98001d26 	beq	r19,zero,12aec <__call_exitprocs+0xd0>
   12a78:	dd400117 	ldw	r21,4(sp)
   12a7c:	98800117 	ldw	r2,4(r19)
   12a80:	173fffc4 	addi	fp,r2,-1
   12a84:	e0000d16 	blt	fp,zero,12abc <__call_exitprocs+0xa0>
   12a88:	14000044 	addi	r16,r2,1
   12a8c:	8421883a 	add	r16,r16,r16
   12a90:	8421883a 	add	r16,r16,r16
   12a94:	84402004 	addi	r17,r16,128
   12a98:	9c63883a 	add	r17,r19,r17
   12a9c:	9c21883a 	add	r16,r19,r16
   12aa0:	a0001e26 	beq	r20,zero,12b1c <__call_exitprocs+0x100>
   12aa4:	80804017 	ldw	r2,256(r16)
   12aa8:	15001c26 	beq	r2,r20,12b1c <__call_exitprocs+0x100>
   12aac:	e73fffc4 	addi	fp,fp,-1
   12ab0:	843fff04 	addi	r16,r16,-4
   12ab4:	8c7fff04 	addi	r17,r17,-4
   12ab8:	e5bff91e 	bne	fp,r22,12aa0 <__alt_data_end+0xfffbd370>
   12abc:	00800034 	movhi	r2,0
   12ac0:	108e4c04 	addi	r2,r2,14640
   12ac4:	10000926 	beq	r2,zero,12aec <__call_exitprocs+0xd0>
   12ac8:	98800117 	ldw	r2,4(r19)
   12acc:	1000311e 	bne	r2,zero,12b94 <__call_exitprocs+0x178>
   12ad0:	98800017 	ldw	r2,0(r19)
   12ad4:	10003426 	beq	r2,zero,12ba8 <__call_exitprocs+0x18c>
   12ad8:	9809883a 	mov	r4,r19
   12adc:	a8800015 	stw	r2,0(r21)
   12ae0:	00039300 	call	3930 <free>
   12ae4:	acc00017 	ldw	r19,0(r21)
   12ae8:	983fe41e 	bne	r19,zero,12a7c <__alt_data_end+0xfffbd34c>
   12aec:	dfc00b17 	ldw	ra,44(sp)
   12af0:	df000a17 	ldw	fp,40(sp)
   12af4:	ddc00917 	ldw	r23,36(sp)
   12af8:	dd800817 	ldw	r22,32(sp)
   12afc:	dd400717 	ldw	r21,28(sp)
   12b00:	dd000617 	ldw	r20,24(sp)
   12b04:	dcc00517 	ldw	r19,20(sp)
   12b08:	dc800417 	ldw	r18,16(sp)
   12b0c:	dc400317 	ldw	r17,12(sp)
   12b10:	dc000217 	ldw	r16,8(sp)
   12b14:	dec00c04 	addi	sp,sp,48
   12b18:	f800283a 	ret
   12b1c:	98800117 	ldw	r2,4(r19)
   12b20:	80c00017 	ldw	r3,0(r16)
   12b24:	10bfffc4 	addi	r2,r2,-1
   12b28:	17001526 	beq	r2,fp,12b80 <__call_exitprocs+0x164>
   12b2c:	80000015 	stw	zero,0(r16)
   12b30:	183fde26 	beq	r3,zero,12aac <__alt_data_end+0xfffbd37c>
   12b34:	00800044 	movi	r2,1
   12b38:	1708983a 	sll	r4,r2,fp
   12b3c:	98806217 	ldw	r2,392(r19)
   12b40:	9dc00117 	ldw	r23,4(r19)
   12b44:	2084703a 	and	r2,r4,r2
   12b48:	1000061e 	bne	r2,zero,12b64 <__call_exitprocs+0x148>
   12b4c:	183ee83a 	callr	r3
   12b50:	98800117 	ldw	r2,4(r19)
   12b54:	15ffc51e 	bne	r2,r23,12a6c <__alt_data_end+0xfffbd33c>
   12b58:	a8800017 	ldw	r2,0(r21)
   12b5c:	14ffd326 	beq	r2,r19,12aac <__alt_data_end+0xfffbd37c>
   12b60:	003fc206 	br	12a6c <__alt_data_end+0xfffbd33c>
   12b64:	98806317 	ldw	r2,396(r19)
   12b68:	2084703a 	and	r2,r4,r2
   12b6c:	1000061e 	bne	r2,zero,12b88 <__call_exitprocs+0x16c>
   12b70:	89400017 	ldw	r5,0(r17)
   12b74:	9009883a 	mov	r4,r18
   12b78:	183ee83a 	callr	r3
   12b7c:	003ff406 	br	12b50 <__alt_data_end+0xfffbd420>
   12b80:	9f000115 	stw	fp,4(r19)
   12b84:	003fea06 	br	12b30 <__alt_data_end+0xfffbd400>
   12b88:	89000017 	ldw	r4,0(r17)
   12b8c:	183ee83a 	callr	r3
   12b90:	003fef06 	br	12b50 <__alt_data_end+0xfffbd420>
   12b94:	98800017 	ldw	r2,0(r19)
   12b98:	982b883a 	mov	r21,r19
   12b9c:	1027883a 	mov	r19,r2
   12ba0:	983fb61e 	bne	r19,zero,12a7c <__alt_data_end+0xfffbd34c>
   12ba4:	003fd106 	br	12aec <__alt_data_end+0xfffbd3bc>
   12ba8:	0005883a 	mov	r2,zero
   12bac:	003ffa06 	br	12b98 <__alt_data_end+0xfffbd468>

00012bb0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   12bb0:	defffd04 	addi	sp,sp,-12
   12bb4:	df000215 	stw	fp,8(sp)
   12bb8:	df000204 	addi	fp,sp,8
   12bbc:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   12bc0:	0001883a 	nop
   12bc4:	e0bfff17 	ldw	r2,-4(fp)
   12bc8:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   12bcc:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   12bd0:	10000226 	beq	r2,zero,12bdc <_exit+0x2c>
    ALT_SIM_FAIL();
   12bd4:	002af070 	cmpltui	zero,zero,43969
   12bd8:	00000106 	br	12be0 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   12bdc:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   12be0:	003fff06 	br	12be0 <__alt_data_end+0xfffbd4b0>
