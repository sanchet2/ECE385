
Final_Project_Code.elf:     file format elf32-littlenios2
Final_Project_Code.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0000022c

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00011e8c memsz 0x00011e8c flags r-x
    LOAD off    0x00012eac vaddr 0x00011eac paddr 0x00013998 align 2**12
         filesz 0x00001aec memsz 0x00001aec flags rw-
    LOAD off    0x00015484 vaddr 0x00015484 paddr 0x00015484 align 2**12
         filesz 0x00000000 memsz 0x0000017c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000020c  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00011278  0000022c  0000022c  0000122c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000a08  000114a4  000114a4  000124a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aec  00011eac  00013998  00012eac  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000017c  00015484  00015484  00015484  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00015600  00015600  00014998  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00014998  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000d70  00000000  00000000  000149c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00023962  00000000  00000000  00015730  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00009095  00000000  00000000  00039092  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000b279  00000000  00000000  00042127  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002388  00000000  00000000  0004d3a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000380f  00000000  00000000  0004f728  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00016d4c  00000000  00000000  00052f37  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00069c84  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001388  00000000  00000000  00069cc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0006e532  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0006e535  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0006e541  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0006e542  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0006e543  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0006e547  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0006e54b  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  0006e54f  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  0006e55a  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  0006e565  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  0006e570  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000003b  00000000  00000000  0006e57b  2**0
                  CONTENTS, READONLY
 29 .jdi          0000444b  00000000  00000000  0006e5b6  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00083150  00000000  00000000  00072a01  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
0000022c l    d  .text	00000000 .text
000114a4 l    d  .rodata	00000000 .rodata
00011eac l    d  .rwdata	00000000 .rwdata
00015484 l    d  .bss	00000000 .bss
00015600 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Final_Project_Code_bsp//obj/HAL/src/crt0.o
00000264 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 io_handler.c
00000000 l    df *ABS*	00000000 keyboard_functions.c
00015484 l     O .bss	00000002 ctl_reg
00015486 l     O .bss	00000002 no_device
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 usb.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00011bf2 l     O .rodata	00000010 zeroes.4181
00011c02 l     O .rodata	00000010 blanks.4180
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0000467c l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00006224 l     F .text	00000008 __fp_lock
0000622c l     F .text	00000008 __fp_unlock
00006240 l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00011eac l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
000122f0 l     O .rwdata	00000020 lc_ctype_charset
000122d0 l     O .rwdata	00000020 lc_message_charset
00012310 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00011c34 l     O .rodata	0000000c p05.2678
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00009770 l     F .text	000000fc __sprint_r.part.0
00011d68 l     O .rodata	00000010 blanks.4125
00011d58 l     O .rodata	00000010 zeroes.4126
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0000c274 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0000ebc4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000ecec l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000ed18 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000ee20 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000ef1c l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000f000 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000f1e4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00013988 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0000f498 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000f5e8 l     F .text	00000038 alt_dev_reg
000128f8 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000f8c4 l     F .text	00000204 altera_avalon_jtag_uart_irq
0000fac8 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0001039c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00010834 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0001098c l     F .text	00000050 alt_get_errno
000109dc l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
000154d4 g     O .bss	00000004 alt_instruction_exception_handler
00008db0 g     F .text	00000074 _mprec_log10
00008e9c g     F .text	0000008c __any_on
0000b19c g     F .text	00000054 _isatty_r
00011c40 g     O .rodata	00000028 __mprec_tinytens
0000f12c g     F .text	00000078 alt_main
000022c8 g     F .text	000000b8 _puts_r
00015500 g     O .bss	00000100 alt_irq
0000b1f0 g     F .text	0000005c _lseek_r
00013998 g       *ABS*	00000000 __flash_rwdata_start
0000d5e4 g     F .text	00000084 .hidden __eqdf2
00015600 g       *ABS*	00000000 __alt_heap_start
0000228c g     F .text	0000003c printf
0000b418 g     F .text	0000009c _wcrtomb_r
00015494 g     O .bss	00000002 usb_ctl_val
00009668 g     F .text	0000005c __sseek
00006588 g     F .text	00000010 __sinit
0001548c g     O .bss	00000004 keycode
0000b2a8 g     F .text	00000154 __swbuf_r
00007000 g     F .text	0000007c _setlocale_r
000063e0 g     F .text	00000078 __sfmoreglue
0000f1c4 g     F .text	00000020 __malloc_unlock
00002164 g     F .text	00000080 UsbGetRetryCnt
00007c60 g     F .text	0000015c memmove
00000268 g     F .text	00000060 IO_init
00006570 g     F .text	00000018 _cleanup
00007ee0 g     F .text	000000a8 _Balloc
0000d668 g     F .text	000000e0 .hidden __gtdf2
00010dcc g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
0000b144 g     F .text	00000058 _fstat_r
000154b8 g     O .bss	00000004 errno
000095e4 g     F .text	00000008 __seofread
00000394 g     F .text	0000030c get_keycode
000154c0 g     O .bss	00000004 alt_argv
0001b958 g       *ABS*	00000000 _gp
0000f468 g     F .text	00000030 usleep
00012778 g     O .rwdata	00000180 alt_fd_list
00010dec g     F .text	00000090 alt_find_dev
00007b28 g     F .text	00000138 memcpy
00006234 g     F .text	0000000c _cleanup_r
0000e9ec g     F .text	000000d0 .hidden __floatsidf
00010914 g     F .text	00000078 alt_io_redirect
00015496 g     O .bss	00000001 data_size
0000d748 g     F .text	000000e0 .hidden __ltdf2
000114a4 g       *ABS*	00000000 __DTOR_END__
00002380 g     F .text	00000014 puts
00011064 g     F .text	0000009c alt_exception_cause_generated_bad_addr
000094c8 g     F .text	00000074 __fpclassifyd
00008d0c g     F .text	000000a4 __ratio
0000aca8 g     F .text	00000024 __vfiprintf_internal
0000fcc4 g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00002260 g     F .text	0000002c _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0000c390 g     F .text	00000008 .hidden __udivsi3
0000ee70 g     F .text	000000ac isatty
00011c90 g     O .rodata	000000c8 __mprec_tens
0000707c g     F .text	0000000c __locale_charset
000154b4 g     O .bss	00000004 __malloc_top_pad
00001804 g     F .text	00000264 UsbGetConfigDesc2
00013960 g     O .rwdata	00000004 __mb_cur_max
000070ac g     F .text	0000000c _localeconv_r
00008308 g     F .text	0000003c __i2b
000069ec g     F .text	000004a4 __sfvwrite_r
00015498 g     O .bss	00000002 intStat
0000953c g     F .text	00000054 _sbrk_r
0000b24c g     F .text	0000005c _read_r
00013980 g     O .rwdata	00000004 alt_max_fd
0000ae54 g     F .text	00000100 _fclose_r
000061f4 g     F .text	00000030 fflush
000154b0 g     O .bss	00000004 __malloc_max_sbrked_mem
0000c3c8 g     F .text	0000089c .hidden __adddf3
00008ab4 g     F .text	0000011c __b2d
0000bc58 g     F .text	0000061c .hidden __umoddi3
0000f050 g     F .text	000000dc lseek
00013958 g     O .rwdata	00000004 _global_impure_ptr
00008f28 g     F .text	000005a0 _realloc_r
00015600 g       *ABS*	00000000 __bss_end
00010744 g     F .text	000000f0 alt_iic_isr_register
00010cc8 g     F .text	00000104 alt_tick
0000b618 g     F .text	00000640 .hidden __udivdi3
0000af68 g     F .text	00000184 _fputwc_r
00011c68 g     O .rodata	00000028 __mprec_bigtens
000080ec g     F .text	00000104 __s2b
0000eabc g     F .text	000000a4 .hidden __floatunsidf
0000885c g     F .text	00000060 __mcmp
00001264 g     F .text	000000fc UsbSetAddress
000065a8 g     F .text	00000018 __fp_lock_all
000106f8 g     F .text	0000004c alt_ic_irq_enabled
00010c30 g     F .text	00000098 alt_alarm_stop
000154c8 g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	000000d0 alt_irq_handler
00012750 g     O .rwdata	00000028 alt_dev_null
00010380 g     F .text	0000001c alt_dcache_flush_all
000081f0 g     F .text	00000068 __hi0bits
00000330 g     F .text	00000064 IO_read
0000e964 g     F .text	00000088 .hidden __fixdfsi
00013998 g       *ABS*	00000000 __ram_rwdata_end
00013978 g     O .rwdata	00000008 alt_dev_list
0000f4e8 g     F .text	00000100 write
00011eac g       *ABS*	00000000 __ram_rodata_end
0000ed68 g     F .text	000000b8 fstat
0000d748 g     F .text	000000e0 .hidden __ledf2
000021e4 g     F .text	0000007c UsbPrintMem
000085d4 g     F .text	00000140 __pow5mult
00009884 g     F .text	00001424 ___vfiprintf_internal_r
000154a8 g     O .bss	00000004 __nlocale_changed
0000c398 g     F .text	00000008 .hidden __umodsi3
00015600 g       *ABS*	00000000 end
0000f800 g     F .text	000000c4 altera_avalon_jtag_uart_init
000001cc g     F .exceptions	00000060 alt_instruction_exception_entry
000114a4 g       *ABS*	00000000 __CTOR_LIST__
00055730 g       *ABS*	00000000 __alt_stack_pointer
0000eb60 g     F .text	00000064 .hidden __clzsi2
0000fed0 g     F .text	00000218 altera_avalon_jtag_uart_write
00006598 g     F .text	00000004 __sfp_lock_acquire
00007a40 g     F .text	000000e8 memchr
0000242c g     F .text	000020fc ___vfprintf_internal_r
00001b64 g     F .text	000000fc UsbClassRequest
000066fc g     F .text	000002f0 _free_r
00007088 g     F .text	00000010 __locale_mb_cur_max
000112dc g     F .text	00000194 __call_exitprocs
000154a4 g     O .bss	00000004 __mlocale_changed
00013964 g     O .rwdata	00000004 __malloc_sbrk_base
0000022c g     F .text	0000003c _start
000154cc g     O .bss	00000004 _alt_tick_rate
00008714 g     F .text	00000148 __lshift
000154d0 g     O .bss	00000004 _alt_nticks
0000f234 g     F .text	00000104 read
0000f654 g     F .text	00000048 alt_sys_init
000111c8 g     F .text	00000114 __register_exitproc
00008344 g     F .text	00000290 __multiply
0000fb70 g     F .text	00000068 altera_avalon_jtag_uart_close
0000c3a0 g     F .text	00000028 .hidden __mulsi3
00011eac g       *ABS*	00000000 __ram_rwdata_start
000114a4 g       *ABS*	00000000 __ram_rodata_start
000154d8 g     O .bss	00000028 __malloc_current_mallinfo
000006a0 g     F .text	00000a0c setup_keyboard
00008bd0 g     F .text	0000013c __d2b
00001360 g     F .text	00000144 UsbGetDeviceDesc1
0000f69c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00010f90 g     F .text	000000d4 alt_get_fd
00010228 g     F .text	00000158 alt_busy_sleep
0000ad28 g     F .text	00000054 _close_r
0001114c g     F .text	0000007c memcmp
0000f75c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00015600 g       *ABS*	00000000 __alt_stack_base
0000f7ac g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0000454c g     F .text	00000130 __swsetup_r
0000cc64 g     F .text	00000980 .hidden __divdf3
00006458 g     F .text	00000118 __sfp
00008e24 g     F .text	00000078 __copybits
00012348 g     O .rwdata	00000408 __malloc_av_
000065a4 g     F .text	00000004 __sinit_lock_release
0000d828 g     F .text	0000086c .hidden __muldf3
00009590 g     F .text	00000054 __sread
000020e0 g     F .text	00000084 UsbWaitTDListDone
00010e7c g     F .text	00000114 alt_find_file
000103ec g     F .text	000000a4 alt_dev_llist_insert
0000f1a4 g     F .text	00000020 __malloc_lock
0000f3b8 g     F .text	000000b0 sbrk
00005fcc g     F .text	00000228 _fflush_r
0000ad7c g     F .text	000000d8 _calloc_r
0001549a g     O .bss	00000001 hot_plug_count
00015484 g       *ABS*	00000000 __bss_start
00007dbc g     F .text	00000124 memset
000010ac g     F .text	00000070 main
000154c4 g     O .bss	00000004 alt_envp
000154ac g     O .bss	00000004 __malloc_max_total_mem
0000f6fc g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00001a68 g     F .text	000000fc UsbSetConfig
0000b3fc g     F .text	0000001c __swbuf
000096c4 g     F .text	00000008 __sclose
00055730 g       *ABS*	00000000 __alt_heap_limit
0000af54 g     F .text	00000014 fclose
000048a4 g     F .text	00001728 _dtoa_r
00007298 g     F .text	000007a8 _malloc_r
0000b58c g     F .text	00000030 __ascii_wctomb
00013984 g     O .rwdata	00000004 alt_errno
00006e90 g     F .text	000000b8 _fwalk
0000c2e0 g     F .text	00000054 .hidden __divsi3
000065d8 g     F .text	00000124 _malloc_trim_r
00001c60 g     F .text	00000144 UsbGetHidDesc
000114a4 g       *ABS*	00000000 __CTOR_END__
000096cc g     F .text	000000a4 strcmp
000114a4 g       *ABS*	00000000 __flash_rodata_start
000114a4 g       *ABS*	00000000 __DTOR_LIST__
0000d5e4 g     F .text	00000084 .hidden __nedf2
00001170 g     F .text	00000044 UsbRead
0000f620 g     F .text	00000034 alt_irq_init
0000f338 g     F .text	00000080 alt_release_fd
00011d78 g     O .rodata	00000100 .hidden __clz_tab
000154a0 g     O .bss	00000004 _PathLocale
00011100 g     F .text	00000014 atexit
0000accc g     F .text	0000005c _write_r
000070b8 g     F .text	0000001c setlocale
0001395c g     O .rwdata	00000004 _impure_ptr
000154bc g     O .bss	00000004 alt_argc
000104ec g     F .text	0000005c _do_dtors
000070a4 g     F .text	00000008 __locale_cjk_lang
00000020 g       .exceptions	00000000 alt_irq_entry
00008a54 g     F .text	00000060 __ulp
000065c0 g     F .text	00000018 __fp_unlock_all
00015490 g     O .bss	00000001 toggle
00013970 g     O .rwdata	00000008 alt_fs_list
00001da4 g     F .text	0000033c UsbGetReportDesc
00000020 g       *ABS*	00000000 __ram_exceptions_start
000070d4 g     F .text	0000000c localeconv
00010564 g     F .text	00000050 alt_ic_isr_register
00013998 g       *ABS*	00000000 _edata
00015600 g       *ABS*	00000000 _end
0000111c g     F .text	00000054 UsbWrite
0000022c g       *ABS*	00000000 __ram_exceptions_end
0000fbd8 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
0001549c g     O .bss	00000002 code
00010654 g     F .text	000000a4 alt_ic_irq_disable
000095ec g     F .text	0000007c __swrite
00013968 g     O .rwdata	00000004 __malloc_trim_threshold
00007098 g     F .text	0000000c __locale_msgcharset
00015488 g     O .bss	00000002 fs_device
00011114 g     F .text	00000038 exit
00006f48 g     F .text	000000b8 _fwalk_reent
000088bc g     F .text	00000198 __mdiff
0000c334 g     F .text	0000005c .hidden __modsi3
00055730 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
0000659c g     F .text	00000004 __sfp_lock_release
000002c8 g     F .text	00000068 IO_write
00011470 g     F .text	00000034 _exit
000100e8 g     F .text	00000140 alt_alarm_start
000070e0 g     F .text	000001b8 __smakebuf_r
00002394 g     F .text	00000098 strlen
00010ad0 g     F .text	00000160 open
0000d668 g     F .text	000000e0 .hidden __gedf2
0001396c g     O .rwdata	00000004 __wctomb
0000986c g     F .text	00000018 __sprint_r
00010548 g     F .text	0000001c alt_icache_flush_all
0001398c g     O .rwdata	00000004 alt_priority_mask
000105b4 g     F .text	000000a0 alt_ic_irq_enable
00004528 g     F .text	00000024 __vfprintf_internal
0000b5bc g     F .text	0000005c _wctomb_r
0000e094 g     F .text	000008d0 .hidden __subdf3
00008258 g     F .text	000000b0 __lo0bits
00001678 g     F .text	0000018c UsbGetConfigDesc1
00013990 g     O .rwdata	00000008 alt_alarm_list
00010490 g     F .text	0000005c _do_ctors
000011b4 g     F .text	000000b0 UsbSoftReset
0000b4b4 g     F .text	000000d8 wcrtomb
0000ec14 g     F .text	000000d8 close
000014a4 g     F .text	000001d4 UsbGetDeviceDesc2
0000ef80 g     F .text	00000080 alt_load
0000b0ec g     F .text	00000058 fputwc
00000000  w      *UND*	00000000 free
000065a0 g     F .text	00000004 __sinit_lock_acquire
00007fb0 g     F .text	0000013c __multadd
00007f88 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08408b14 	ori	at,at,556
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001cc0 	call	1cc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	00800074 	movhi	r2,1
 140:	10954004 	addi	r2,r2,21760
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	00800074 	movhi	r2,1
 158:	10954004 	addi	r2,r2,21760
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <__alt_data_end+0xfffaa9fc>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <__alt_data_end+0xfffaa9f0>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0001883a 	nop
}
 1b8:	e037883a 	mov	sp,fp
 1bc:	dfc00117 	ldw	ra,4(sp)
 1c0:	df000017 	ldw	fp,0(sp)
 1c4:	dec00204 	addi	sp,sp,8
 1c8:	f800283a 	ret

000001cc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1cc:	defffb04 	addi	sp,sp,-20
 1d0:	dfc00415 	stw	ra,16(sp)
 1d4:	df000315 	stw	fp,12(sp)
 1d8:	df000304 	addi	fp,sp,12
 1dc:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 1e0:	00bfffc4 	movi	r2,-1
 1e4:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 1e8:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1ec:	d0a6df17 	ldw	r2,-25732(gp)
 1f0:	10000726 	beq	r2,zero,210 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 1f4:	d0a6df17 	ldw	r2,-25732(gp)
 1f8:	e0fffd17 	ldw	r3,-12(fp)
 1fc:	1809883a 	mov	r4,r3
 200:	e17fff17 	ldw	r5,-4(fp)
 204:	e1bffe17 	ldw	r6,-8(fp)
 208:	103ee83a 	callr	r2
 20c:	00000206 	br	218 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 210:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 214:	0005883a 	mov	r2,zero
}
 218:	e037883a 	mov	sp,fp
 21c:	dfc00117 	ldw	ra,4(sp)
 220:	df000017 	ldw	fp,0(sp)
 224:	dec00204 	addi	sp,sp,8
 228:	f800283a 	ret

Disassembly of section .text:

0000022c <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     22c:	06c00174 	movhi	sp,5
    ori sp, sp, %lo(__alt_stack_pointer)
     230:	ded5cc14 	ori	sp,sp,22320
    movhi gp, %hi(_gp)
     234:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     238:	d6ae5614 	ori	gp,gp,47448
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     23c:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     240:	10952114 	ori	r2,r2,21636

    movhi r3, %hi(__bss_end)
     244:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     248:	18d58014 	ori	r3,r3,22016

    beq r2, r3, 1f
     24c:	10c00326 	beq	r2,r3,25c <_start+0x30>

0:
    stw zero, (r2)
     250:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     254:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     258:	10fffd36 	bltu	r2,r3,250 <__alt_data_end+0xfffaab20>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     25c:	000ef800 	call	ef80 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     260:	000f12c0 	call	f12c <alt_main>

00000264 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     264:	003fff06 	br	264 <__alt_data_end+0xfffaab34>

00000268 <IO_init>:
#define otg_hpi_cs			(volatile char*)	OTG_HPI_CS_BASE //FOR SOME REASON CS BASE BEHAVES WEIRDLY MIGHT HAVE TO SET MANUALLY
#define otg_hpi_w			(volatile char*)	OTG_HPI_W_BASE


void IO_init(void)
{
     268:	deffff04 	addi	sp,sp,-4
     26c:	df000015 	stw	fp,0(sp)
     270:	d839883a 	mov	fp,sp
	*otg_hpi_cs = 0;
     274:	00800234 	movhi	r2,8
     278:	10841404 	addi	r2,r2,4176
     27c:	10000005 	stb	zero,0(r2)
	*otg_hpi_r = 1;
     280:	00800234 	movhi	r2,8
     284:	10840804 	addi	r2,r2,4128
     288:	00c00044 	movi	r3,1
     28c:	10c00005 	stb	r3,0(r2)
	*otg_hpi_w = 1;
     290:	00800234 	movhi	r2,8
     294:	10840404 	addi	r2,r2,4112
     298:	00c00044 	movi	r3,1
     29c:	10c00005 	stb	r3,0(r2)
	*otg_hpi_address = 0;
     2a0:	00800234 	movhi	r2,8
     2a4:	10841004 	addi	r2,r2,4160
     2a8:	10000015 	stw	zero,0(r2)
	*otg_hpi_data = 0;
     2ac:	00800234 	movhi	r2,8
     2b0:	10840c04 	addi	r2,r2,4144
     2b4:	10000015 	stw	zero,0(r2)
}
     2b8:	e037883a 	mov	sp,fp
     2bc:	df000017 	ldw	fp,0(sp)
     2c0:	dec00104 	addi	sp,sp,4
     2c4:	f800283a 	ret

000002c8 <IO_write>:

void IO_write(alt_u8 Address, alt_u16 Data)
{
     2c8:	defffd04 	addi	sp,sp,-12
     2cc:	df000215 	stw	fp,8(sp)
     2d0:	df000204 	addi	fp,sp,8
     2d4:	2007883a 	mov	r3,r4
     2d8:	2805883a 	mov	r2,r5
     2dc:	e0fffe05 	stb	r3,-8(fp)
     2e0:	e0bfff0d 	sth	r2,-4(fp)
	*otg_hpi_address = Address;
     2e4:	00800234 	movhi	r2,8
     2e8:	10841004 	addi	r2,r2,4160
     2ec:	e0fffe03 	ldbu	r3,-8(fp)
     2f0:	10c00015 	stw	r3,0(r2)
	*otg_hpi_data = Data;
     2f4:	00800234 	movhi	r2,8
     2f8:	10840c04 	addi	r2,r2,4144
     2fc:	e0ffff0b 	ldhu	r3,-4(fp)
     300:	10c00015 	stw	r3,0(r2)
	*otg_hpi_w = 0;
     304:	00800234 	movhi	r2,8
     308:	10840404 	addi	r2,r2,4112
     30c:	10000005 	stb	zero,0(r2)
	*otg_hpi_w = 1;
     310:	00800234 	movhi	r2,8
     314:	10840404 	addi	r2,r2,4112
     318:	00c00044 	movi	r3,1
     31c:	10c00005 	stb	r3,0(r2)
}
     320:	e037883a 	mov	sp,fp
     324:	df000017 	ldw	fp,0(sp)
     328:	dec00104 	addi	sp,sp,4
     32c:	f800283a 	ret

00000330 <IO_read>:

alt_u16 IO_read(alt_u8 Address)
{
     330:	defffd04 	addi	sp,sp,-12
     334:	df000215 	stw	fp,8(sp)
     338:	df000204 	addi	fp,sp,8
     33c:	2005883a 	mov	r2,r4
     340:	e0bfff05 	stb	r2,-4(fp)
	alt_u16 temp;
	*otg_hpi_address = Address;
     344:	00800234 	movhi	r2,8
     348:	10841004 	addi	r2,r2,4160
     34c:	e0ffff03 	ldbu	r3,-4(fp)
     350:	10c00015 	stw	r3,0(r2)
	*otg_hpi_r = 0;
     354:	00800234 	movhi	r2,8
     358:	10840804 	addi	r2,r2,4128
     35c:	10000005 	stb	zero,0(r2)
	temp = *otg_hpi_data;
     360:	00800234 	movhi	r2,8
     364:	10840c04 	addi	r2,r2,4144
     368:	10800017 	ldw	r2,0(r2)
     36c:	e0bffe0d 	sth	r2,-8(fp)
	*otg_hpi_r = 1;
     370:	00800234 	movhi	r2,8
     374:	10840804 	addi	r2,r2,4128
     378:	00c00044 	movi	r3,1
     37c:	10c00005 	stb	r3,0(r2)

	return temp;
     380:	e0bffe0b 	ldhu	r2,-8(fp)
}
     384:	e037883a 	mov	sp,fp
     388:	df000017 	ldw	fp,0(sp)
     38c:	dec00104 	addi	sp,sp,4
     390:	f800283a 	ret

00000394 <get_keycode>:
alt_u16 code;




int get_keycode(unsigned int *keycode1,unsigned int *keycode2){
     394:	defffc04 	addi	sp,sp,-16
     398:	dfc00315 	stw	ra,12(sp)
     39c:	df000215 	stw	fp,8(sp)
     3a0:	df000204 	addi	fp,sp,8
     3a4:	e13ffe15 	stw	r4,-8(fp)
     3a8:	e17fff15 	stw	r5,-4(fp)
				toggle++;
     3ac:	d0a6ce03 	ldbu	r2,-25800(gp)
     3b0:	10800044 	addi	r2,r2,1
     3b4:	d0a6ce05 	stb	r2,-25800(gp)
				IO_write(HPI_ADDR,0x0500); //the start address
     3b8:	01000084 	movi	r4,2
     3bc:	01414004 	movi	r5,1280
     3c0:	00002c80 	call	2c8 <IO_write>
				//data phase IN-1
				IO_write(HPI_DATA,0x051c); //500
     3c4:	0009883a 	mov	r4,zero
     3c8:	01414704 	movi	r5,1308
     3cc:	00002c80 	call	2c8 <IO_write>

				IO_write(HPI_DATA,0x000f & data_size);//2 data length
     3d0:	d0a6cf83 	ldbu	r2,-25794(gp)
     3d4:	10803fcc 	andi	r2,r2,255
     3d8:	108003cc 	andi	r2,r2,15
     3dc:	0009883a 	mov	r4,zero
     3e0:	100b883a 	mov	r5,r2
     3e4:	00002c80 	call	2c8 <IO_write>

				IO_write(HPI_DATA,0x0291);//4 //endpoint 1
     3e8:	0009883a 	mov	r4,zero
     3ec:	0140a444 	movi	r5,657
     3f0:	00002c80 	call	2c8 <IO_write>
				if(toggle%2)
     3f4:	d0a6ce03 	ldbu	r2,-25800(gp)
     3f8:	1080004c 	andi	r2,r2,1
     3fc:	10803fcc 	andi	r2,r2,255
     400:	10000426 	beq	r2,zero,414 <get_keycode+0x80>
				{
					IO_write(HPI_DATA,0x0001);//6 //data 1
     404:	0009883a 	mov	r4,zero
     408:	01400044 	movi	r5,1
     40c:	00002c80 	call	2c8 <IO_write>
     410:	00000306 	br	420 <get_keycode+0x8c>
				}
				else
				{
					IO_write(HPI_DATA,0x0041);//6 //data 1
     414:	0009883a 	mov	r4,zero
     418:	01401044 	movi	r5,65
     41c:	00002c80 	call	2c8 <IO_write>
				}
				IO_write(HPI_DATA,0x0013);//8
     420:	0009883a 	mov	r4,zero
     424:	014004c4 	movi	r5,19
     428:	00002c80 	call	2c8 <IO_write>
				IO_write(HPI_DATA,0x0000);//a
     42c:	0009883a 	mov	r4,zero
     430:	000b883a 	mov	r5,zero
     434:	00002c80 	call	2c8 <IO_write>
				UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
     438:	01006c04 	movi	r4,432
     43c:	01414004 	movi	r5,1280
     440:	000111c0 	call	111c <UsbWrite>

				while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     444:	00002506 	br	4dc <get_keycode+0x148>
				{
					IO_write(HPI_ADDR,0x0500); //the start address
     448:	01000084 	movi	r4,2
     44c:	01414004 	movi	r5,1280
     450:	00002c80 	call	2c8 <IO_write>
					//data phase IN-1
					IO_write(HPI_DATA,0x051c); //500
     454:	0009883a 	mov	r4,zero
     458:	01414704 	movi	r5,1308
     45c:	00002c80 	call	2c8 <IO_write>

					IO_write(HPI_DATA,0x000f & data_size);//2 data length
     460:	d0a6cf83 	ldbu	r2,-25794(gp)
     464:	10803fcc 	andi	r2,r2,255
     468:	108003cc 	andi	r2,r2,15
     46c:	0009883a 	mov	r4,zero
     470:	100b883a 	mov	r5,r2
     474:	00002c80 	call	2c8 <IO_write>

					IO_write(HPI_DATA,0x0291);//4 //endpoint 1
     478:	0009883a 	mov	r4,zero
     47c:	0140a444 	movi	r5,657
     480:	00002c80 	call	2c8 <IO_write>
					if(toggle%2)
     484:	d0a6ce03 	ldbu	r2,-25800(gp)
     488:	1080004c 	andi	r2,r2,1
     48c:	10803fcc 	andi	r2,r2,255
     490:	10000426 	beq	r2,zero,4a4 <get_keycode+0x110>
					{
						IO_write(HPI_DATA,0x0001);//6 //data 1
     494:	0009883a 	mov	r4,zero
     498:	01400044 	movi	r5,1
     49c:	00002c80 	call	2c8 <IO_write>
     4a0:	00000306 	br	4b0 <get_keycode+0x11c>
					}
					else
					{
						IO_write(HPI_DATA,0x0041);//6 //data 1
     4a4:	0009883a 	mov	r4,zero
     4a8:	01401044 	movi	r5,65
     4ac:	00002c80 	call	2c8 <IO_write>
					}
					IO_write(HPI_DATA,0x0013);//8
     4b0:	0009883a 	mov	r4,zero
     4b4:	014004c4 	movi	r5,19
     4b8:	00002c80 	call	2c8 <IO_write>
					IO_write(HPI_DATA,0x0000);//
     4bc:	0009883a 	mov	r4,zero
     4c0:	000b883a 	mov	r5,zero
     4c4:	00002c80 	call	2c8 <IO_write>
					UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
     4c8:	01006c04 	movi	r4,432
     4cc:	01414004 	movi	r5,1280
     4d0:	000111c0 	call	111c <UsbWrite>
					usleep(10*1000);
     4d4:	0109c404 	movi	r4,10000
     4d8:	000f4680 	call	f468 <usleep>
				}
				IO_write(HPI_DATA,0x0013);//8
				IO_write(HPI_DATA,0x0000);//a
				UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr

				while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     4dc:	010000c4 	movi	r4,3
     4e0:	00003300 	call	330 <IO_read>
     4e4:	10bfffcc 	andi	r2,r2,65535
     4e8:	1080040c 	andi	r2,r2,16
     4ec:	103fd626 	beq	r2,zero,448 <__alt_data_end+0xfffaad18>
					usleep(10*1000);
				}//end while



				usb_ctl_val = UsbWaitTDListDone();
     4f0:	00020e00 	call	20e0 <UsbWaitTDListDone>
     4f4:	d0a6cf0d 	sth	r2,-25796(gp)

				// packet starts from 0x051c, reading third byte
				// TASK: Write the address to read from the memory for byte 3 of the report descriptor to HPI_ADDR.
				IO_write(HPI_ADDR,0x051e); //the start address
     4f8:	01000084 	movi	r4,2
     4fc:	01414784 	movi	r5,1310
     500:	00002c80 	call	2c8 <IO_write>
				*keycode1 = IO_read(HPI_DATA);
     504:	0009883a 	mov	r4,zero
     508:	00003300 	call	330 <IO_read>
     50c:	10ffffcc 	andi	r3,r2,65535
     510:	e0bffe17 	ldw	r2,-8(fp)
     514:	10c00015 	stw	r3,0(r2)
				keycode=*keycode1;
     518:	e0bffe17 	ldw	r2,-8(fp)
     51c:	10800017 	ldw	r2,0(r2)
     520:	d0a6cd15 	stw	r2,-25804(gp)


				*keycode2 = IO_read(HPI_DATA);
     524:	0009883a 	mov	r4,zero
     528:	00003300 	call	330 <IO_read>
     52c:	10ffffcc 	andi	r3,r2,65535
     530:	e0bfff17 	ldw	r2,-4(fp)
     534:	10c00015 	stw	r3,0(r2)


				IOWR(KEYCODE_BASE, 0, keycode & 0xff);
     538:	d0a6cd17 	ldw	r2,-25804(gp)
     53c:	10c03fcc 	andi	r3,r2,255
     540:	00800234 	movhi	r2,8
     544:	10841804 	addi	r2,r2,4192
     548:	10c00035 	stwio	r3,0(r2)



				usb_ctl_val = UsbRead(ctl_reg);
     54c:	d0a6cb0b 	ldhu	r2,-25812(gp)
     550:	10bfffcc 	andi	r2,r2,65535
     554:	1009883a 	mov	r4,r2
     558:	00011700 	call	1170 <UsbRead>
     55c:	d0a6cf0d 	sth	r2,-25796(gp)

				if(!(usb_ctl_val & no_device))
     560:	d0e6cf0b 	ldhu	r3,-25796(gp)
     564:	d0a6cb8b 	ldhu	r2,-25810(gp)
     568:	1884703a 	and	r2,r3,r2
     56c:	10bfffcc 	andi	r2,r2,65535
     570:	1000211e 	bne	r2,zero,5f8 <get_keycode+0x264>
				{
					//USB hot plug routine
					for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
     574:	d026d085 	stb	zero,-25790(gp)
     578:	00001006 	br	5bc <get_keycode+0x228>
					{
						usleep(5*1000);
     57c:	0104e204 	movi	r4,5000
     580:	000f4680 	call	f468 <usleep>
						usb_ctl_val = UsbRead(ctl_reg);
     584:	d0a6cb0b 	ldhu	r2,-25812(gp)
     588:	10bfffcc 	andi	r2,r2,65535
     58c:	1009883a 	mov	r4,r2
     590:	00011700 	call	1170 <UsbRead>
     594:	d0a6cf0d 	sth	r2,-25796(gp)
						if(usb_ctl_val & no_device) break;
     598:	d0e6cf0b 	ldhu	r3,-25796(gp)
     59c:	d0a6cb8b 	ldhu	r2,-25810(gp)
     5a0:	1884703a 	and	r2,r3,r2
     5a4:	10bfffcc 	andi	r2,r2,65535
     5a8:	10000126 	beq	r2,zero,5b0 <get_keycode+0x21c>
     5ac:	00000706 	br	5cc <get_keycode+0x238>
				usb_ctl_val = UsbRead(ctl_reg);

				if(!(usb_ctl_val & no_device))
				{
					//USB hot plug routine
					for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
     5b0:	d0a6d083 	ldbu	r2,-25790(gp)
     5b4:	10800044 	addi	r2,r2,1
     5b8:	d0a6d085 	stb	r2,-25790(gp)
     5bc:	d0a6d083 	ldbu	r2,-25790(gp)
     5c0:	10803fcc 	andi	r2,r2,255
     5c4:	108001f0 	cmpltui	r2,r2,7
     5c8:	103fec1e 	bne	r2,zero,57c <__alt_data_end+0xfffaae4c>
					{
						usleep(5*1000);
						usb_ctl_val = UsbRead(ctl_reg);
						if(usb_ctl_val & no_device) break;
					}
					if(!(usb_ctl_val & no_device))
     5cc:	d0e6cf0b 	ldhu	r3,-25796(gp)
     5d0:	d0a6cb8b 	ldhu	r2,-25810(gp)
     5d4:	1884703a 	and	r2,r3,r2
     5d8:	10bfffcc 	andi	r2,r2,65535
     5dc:	1000061e 	bne	r2,zero,5f8 <get_keycode+0x264>
					{
						printf("\n[INFO]: the keyboard has been removed!!! \n");
     5e0:	01000074 	movhi	r4,1
     5e4:	21052904 	addi	r4,r4,5284
     5e8:	00023800 	call	2380 <puts>
						printf("[INFO]: please insert again!!! \n");
     5ec:	01000074 	movhi	r4,1
     5f0:	21053404 	addi	r4,r4,5328
     5f4:	00023800 	call	2380 <puts>
					}
				}

				while (!(usb_ctl_val & no_device))
     5f8:	00001e06 	br	674 <get_keycode+0x2e0>
				{

					usb_ctl_val = UsbRead(ctl_reg);
     5fc:	d0a6cb0b 	ldhu	r2,-25812(gp)
     600:	10bfffcc 	andi	r2,r2,65535
     604:	1009883a 	mov	r4,r2
     608:	00011700 	call	1170 <UsbRead>
     60c:	d0a6cf0d 	sth	r2,-25796(gp)
					usleep(5*1000);
     610:	0104e204 	movi	r4,5000
     614:	000f4680 	call	f468 <usleep>
					usb_ctl_val = UsbRead(ctl_reg);
     618:	d0a6cb0b 	ldhu	r2,-25812(gp)
     61c:	10bfffcc 	andi	r2,r2,65535
     620:	1009883a 	mov	r4,r2
     624:	00011700 	call	1170 <UsbRead>
     628:	d0a6cf0d 	sth	r2,-25796(gp)
					usleep(5*1000);
     62c:	0104e204 	movi	r4,5000
     630:	000f4680 	call	f468 <usleep>
					usb_ctl_val = UsbRead(ctl_reg);
     634:	d0a6cb0b 	ldhu	r2,-25812(gp)
     638:	10bfffcc 	andi	r2,r2,65535
     63c:	1009883a 	mov	r4,r2
     640:	00011700 	call	1170 <UsbRead>
     644:	d0a6cf0d 	sth	r2,-25796(gp)
					usleep(5*1000);
     648:	0104e204 	movi	r4,5000
     64c:	000f4680 	call	f468 <usleep>

					if(usb_ctl_val & no_device)
     650:	d0e6cf0b 	ldhu	r3,-25796(gp)
     654:	d0a6cb8b 	ldhu	r2,-25810(gp)
     658:	1884703a 	and	r2,r3,r2
     65c:	10bfffcc 	andi	r2,r2,65535
     660:	10000226 	beq	r2,zero,66c <get_keycode+0x2d8>
						return -1;
     664:	00bfffc4 	movi	r2,-1
     668:	00000806 	br	68c <get_keycode+0x2f8>

					usleep(200);
     66c:	01003204 	movi	r4,200
     670:	000f4680 	call	f468 <usleep>
						printf("\n[INFO]: the keyboard has been removed!!! \n");
						printf("[INFO]: please insert again!!! \n");
					}
				}

				while (!(usb_ctl_val & no_device))
     674:	d0e6cf0b 	ldhu	r3,-25796(gp)
     678:	d0a6cb8b 	ldhu	r2,-25810(gp)
     67c:	1884703a 	and	r2,r3,r2
     680:	10bfffcc 	andi	r2,r2,65535
     684:	103fdd26 	beq	r2,zero,5fc <__alt_data_end+0xfffaaecc>
					if(usb_ctl_val & no_device)
						return -1;

					usleep(200);
				}
				return 0;
     688:	0005883a 	mov	r2,zero
}
     68c:	e037883a 	mov	sp,fp
     690:	dfc00117 	ldw	ra,4(sp)
     694:	df000017 	ldw	fp,0(sp)
     698:	dec00204 	addi	sp,sp,8
     69c:	f800283a 	ret

000006a0 <setup_keyboard>:


void setup_keyboard()
{
     6a0:	defffe04 	addi	sp,sp,-8
     6a4:	dfc00115 	stw	ra,4(sp)
     6a8:	df000015 	stw	fp,0(sp)
     6ac:	d839883a 	mov	fp,sp
	IO_init();
     6b0:	00002680 	call	268 <IO_init>
		usleep(10*10000);
	}*/



	printf("USB keyboard setup...\n\n");
     6b4:	01000074 	movhi	r4,1
     6b8:	21053c04 	addi	r4,r4,5360
     6bc:	00023800 	call	2380 <puts>

	//----------------------------------------SIE1 initial---------------------------------------------------//
	USB_HOT_PLUG:
	UsbSoftReset();
     6c0:	00011b40 	call	11b4 <UsbSoftReset>

	// STEP 1a:
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
     6c4:	01005104 	movi	r4,324
     6c8:	000b883a 	mov	r5,zero
     6cc:	000111c0 	call	111c <UsbWrite>
	UsbWrite (HOST1_STAT_REG, 0xFFFF);
     6d0:	01302414 	movui	r4,49296
     6d4:	017fffd4 	movui	r5,65535
     6d8:	000111c0 	call	111c <UsbWrite>

	/* Set HUSB_pEOT time */
	UsbWrite(HUSB_pEOT, 600); // adjust the according to your USB device speed
     6dc:	01006d04 	movi	r4,436
     6e0:	01409604 	movi	r5,600
     6e4:	000111c0 	call	111c <UsbWrite>

	usb_ctl_val = SOFEOP1_TO_CPU_EN | RESUME1_TO_HPI_EN;// | SOFEOP1_TO_HPI_EN;
     6e8:	00811004 	movi	r2,1088
     6ec:	d0a6cf0d 	sth	r2,-25796(gp)
	UsbWrite(HPI_IRQ_ROUTING_REG, usb_ctl_val);
     6f0:	d0a6cf0b 	ldhu	r2,-25796(gp)
     6f4:	10bfffcc 	andi	r2,r2,65535
     6f8:	01005084 	movi	r4,322
     6fc:	100b883a 	mov	r5,r2
     700:	000111c0 	call	111c <UsbWrite>

	intStat = A_CHG_IRQ_EN | SOF_EOP_IRQ_EN ;
     704:	00808404 	movi	r2,528
     708:	d0a6d00d 	sth	r2,-25792(gp)
	UsbWrite(HOST1_IRQ_EN_REG, intStat);
     70c:	d0a6d00b 	ldhu	r2,-25792(gp)
     710:	10bfffcc 	andi	r2,r2,65535
     714:	01302314 	movui	r4,49292
     718:	100b883a 	mov	r5,r2
     71c:	000111c0 	call	111c <UsbWrite>
	// STEP 1a end

	// STEP 1b begin
	UsbWrite(COMM_R0,0x0000);//reset time
     720:	01007104 	movi	r4,452
     724:	000b883a 	mov	r5,zero
     728:	000111c0 	call	111c <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
     72c:	01007184 	movi	r4,454
     730:	000b883a 	mov	r5,zero
     734:	000111c0 	call	111c <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
     738:	01007204 	movi	r4,456
     73c:	000b883a 	mov	r5,zero
     740:	000111c0 	call	111c <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
     744:	01007284 	movi	r4,458
     748:	000b883a 	mov	r5,zero
     74c:	000111c0 	call	111c <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
     750:	01007304 	movi	r4,460
     754:	000b883a 	mov	r5,zero
     758:	000111c0 	call	111c <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
     75c:	01007384 	movi	r4,462
     760:	000b883a 	mov	r5,zero
     764:	000111c0 	call	111c <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
     768:	01007404 	movi	r4,464
     76c:	000b883a 	mov	r5,zero
     770:	000111c0 	call	111c <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
     774:	01007484 	movi	r4,466
     778:	000b883a 	mov	r5,zero
     77c:	000111c0 	call	111c <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
     780:	01007504 	movi	r4,468
     784:	000b883a 	mov	r5,zero
     788:	000111c0 	call	111c <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
     78c:	01007584 	movi	r4,470
     790:	000b883a 	mov	r5,zero
     794:	000111c0 	call	111c <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
     798:	01007604 	movi	r4,472
     79c:	000b883a 	mov	r5,zero
     7a0:	000111c0 	call	111c <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
     7a4:	01007684 	movi	r4,474
     7a8:	000b883a 	mov	r5,zero
     7ac:	000111c0 	call	111c <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
     7b0:	01007704 	movi	r4,476
     7b4:	000b883a 	mov	r5,zero
     7b8:	000111c0 	call	111c <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
     7bc:	01007784 	movi	r4,478
     7c0:	000b883a 	mov	r5,zero
     7c4:	000111c0 	call	111c <UsbWrite>
	UsbWrite(COMM_INT_NUM,HUSB_SIE1_INIT_INT); //HUSB_SIE1_INIT_INT
     7c8:	01007084 	movi	r4,450
     7cc:	01401c84 	movi	r5,114
     7d0:	000111c0 	call	111c <UsbWrite>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
     7d4:	01000044 	movi	r4,1
     7d8:	01738054 	movui	r5,52737
     7dc:	00002c80 	call	2c8 <IO_write>

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
     7e0:	0001883a 	nop
     7e4:	010000c4 	movi	r4,3
     7e8:	00003300 	call	330 <IO_read>
     7ec:	10bfffcc 	andi	r2,r2,65535
     7f0:	103ffc26 	beq	r2,zero,7e4 <__alt_data_end+0xfffab0b4>
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
     7f4:	0001883a 	nop
     7f8:	01000044 	movi	r4,1
     7fc:	00003300 	call	330 <IO_read>
     800:	10bfffcc 	andi	r2,r2,65535
     804:	1083fb58 	cmpnei	r2,r2,4077
     808:	10000826 	beq	r2,zero,82c <setup_keyboard+0x18c>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
     80c:	01000044 	movi	r4,1
     810:	00003300 	call	330 <IO_read>
     814:	10bfffcc 	andi	r2,r2,65535
     818:	01000074 	movhi	r4,1
     81c:	21054204 	addi	r4,r4,5384
     820:	100b883a 	mov	r5,r2
     824:	000228c0 	call	228c <printf>
		goto USB_HOT_PLUG;
     828:	003fa506 	br	6c0 <__alt_data_end+0xfffaaf90>
	}
	// STEP 1b end

	printf("STEP 1 Complete");
     82c:	01000074 	movhi	r4,1
     830:	21054b04 	addi	r4,r4,5420
     834:	000228c0 	call	228c <printf>
	// STEP 2 begin
	UsbWrite(COMM_INT_NUM,HUSB_RESET_INT); //husb reset
     838:	01007084 	movi	r4,450
     83c:	01401d04 	movi	r5,116
     840:	000111c0 	call	111c <UsbWrite>
	UsbWrite(COMM_R0,0x003c);//reset time
     844:	01007104 	movi	r4,452
     848:	01400f04 	movi	r5,60
     84c:	000111c0 	call	111c <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
     850:	01007184 	movi	r4,454
     854:	000b883a 	mov	r5,zero
     858:	000111c0 	call	111c <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
     85c:	01007204 	movi	r4,456
     860:	000b883a 	mov	r5,zero
     864:	000111c0 	call	111c <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
     868:	01007284 	movi	r4,458
     86c:	000b883a 	mov	r5,zero
     870:	000111c0 	call	111c <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
     874:	01007304 	movi	r4,460
     878:	000b883a 	mov	r5,zero
     87c:	000111c0 	call	111c <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
     880:	01007384 	movi	r4,462
     884:	000b883a 	mov	r5,zero
     888:	000111c0 	call	111c <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
     88c:	01007404 	movi	r4,464
     890:	000b883a 	mov	r5,zero
     894:	000111c0 	call	111c <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
     898:	01007484 	movi	r4,466
     89c:	000b883a 	mov	r5,zero
     8a0:	000111c0 	call	111c <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
     8a4:	01007504 	movi	r4,468
     8a8:	000b883a 	mov	r5,zero
     8ac:	000111c0 	call	111c <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
     8b0:	01007584 	movi	r4,470
     8b4:	000b883a 	mov	r5,zero
     8b8:	000111c0 	call	111c <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
     8bc:	01007604 	movi	r4,472
     8c0:	000b883a 	mov	r5,zero
     8c4:	000111c0 	call	111c <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
     8c8:	01007684 	movi	r4,474
     8cc:	000b883a 	mov	r5,zero
     8d0:	000111c0 	call	111c <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
     8d4:	01007704 	movi	r4,476
     8d8:	000b883a 	mov	r5,zero
     8dc:	000111c0 	call	111c <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
     8e0:	01007784 	movi	r4,478
     8e4:	000b883a 	mov	r5,zero
     8e8:	000111c0 	call	111c <UsbWrite>

	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
     8ec:	01000044 	movi	r4,1
     8f0:	01738054 	movui	r5,52737
     8f4:	00002c80 	call	2c8 <IO_write>

	while (IO_read(HPI_MAILBOX) != COMM_ACK)
     8f8:	0001883a 	nop
     8fc:	01000044 	movi	r4,1
     900:	00003300 	call	330 <IO_read>
     904:	10bfffcc 	andi	r2,r2,65535
     908:	1083fb58 	cmpnei	r2,r2,4077
     90c:	10000826 	beq	r2,zero,930 <setup_keyboard+0x290>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
     910:	01000044 	movi	r4,1
     914:	00003300 	call	330 <IO_read>
     918:	10bfffcc 	andi	r2,r2,65535
     91c:	01000074 	movhi	r4,1
     920:	21054204 	addi	r4,r4,5384
     924:	100b883a 	mov	r5,r2
     928:	000228c0 	call	228c <printf>
		goto USB_HOT_PLUG;
     92c:	003f6406 	br	6c0 <__alt_data_end+0xfffaaf90>
	}
	// STEP 2 end

	ctl_reg = USB1_CTL_REG;
     930:	00b02284 	movi	r2,-16246
     934:	d0a6cb0d 	sth	r2,-25812(gp)
	no_device = (A_DP_STAT | A_DM_STAT);
     938:	008c0004 	movi	r2,12288
     93c:	d0a6cb8d 	sth	r2,-25810(gp)
	fs_device = A_DP_STAT;
     940:	00880004 	movi	r2,8192
     944:	d0a6cc0d 	sth	r2,-25808(gp)
	usb_ctl_val = UsbRead(ctl_reg);
     948:	d0a6cb0b 	ldhu	r2,-25812(gp)
     94c:	10bfffcc 	andi	r2,r2,65535
     950:	1009883a 	mov	r4,r2
     954:	00011700 	call	1170 <UsbRead>
     958:	d0a6cf0d 	sth	r2,-25796(gp)
		}
	}
	else
	{
		 check for low speed or full speed by reading D+ and D- lines */
		if (usb_ctl_val & fs_device)
     95c:	d0e6cf0b 	ldhu	r3,-25796(gp)
     960:	d0a6cc0b 	ldhu	r2,-25808(gp)
     964:	1884703a 	and	r2,r3,r2
     968:	10bfffcc 	andi	r2,r2,65535
     96c:	10000426 	beq	r2,zero,980 <setup_keyboard+0x2e0>
		{
			printf("[INFO]: full speed device\n");
     970:	01000074 	movhi	r4,1
     974:	21054f04 	addi	r4,r4,5436
     978:	00023800 	call	2380 <puts>
     97c:	00000306 	br	98c <setup_keyboard+0x2ec>
		}
		else
		{
			printf("[INFO]: low speed device\n");
     980:	01000074 	movhi	r4,1
     984:	21055604 	addi	r4,r4,5464
     988:	00023800 	call	2380 <puts>



	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();
     98c:	00012640 	call	1264 <UsbSetAddress>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     990:	00000306 	br	9a0 <setup_keyboard+0x300>
	{
		UsbSetAddress();
     994:	00012640 	call	1264 <UsbSetAddress>
		usleep(10*1000);
     998:	0109c404 	movi	r4,10000
     99c:	000f4680 	call	f468 <usleep>

	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     9a0:	010000c4 	movi	r4,3
     9a4:	00003300 	call	330 <IO_read>
     9a8:	10bfffcc 	andi	r2,r2,65535
     9ac:	1080040c 	andi	r2,r2,16
     9b0:	103ff826 	beq	r2,zero,994 <__alt_data_end+0xfffab264>
	{
		UsbSetAddress();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     9b4:	00020e00 	call	20e0 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506); // i
     9b8:	01000084 	movi	r4,2
     9bc:	01414184 	movi	r5,1286
     9c0:	00002c80 	call	2c8 <IO_write>
	printf("[ENUM PROCESS]:step 3 TD Status Byte is %x\n",IO_read(HPI_DATA));
     9c4:	0009883a 	mov	r4,zero
     9c8:	00003300 	call	330 <IO_read>
     9cc:	10bfffcc 	andi	r2,r2,65535
     9d0:	01000074 	movhi	r4,1
     9d4:	21055d04 	addi	r4,r4,5492
     9d8:	100b883a 	mov	r5,r2
     9dc:	000228c0 	call	228c <printf>

	IO_write(HPI_ADDR,0x0508); // n
     9e0:	01000084 	movi	r4,2
     9e4:	01414204 	movi	r5,1288
     9e8:	00002c80 	call	2c8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     9ec:	0009883a 	mov	r4,zero
     9f0:	00003300 	call	330 <IO_read>
     9f4:	d0a6cf0d 	sth	r2,-25796(gp)
	printf("[ENUM PROCESS]:step 3 TD Control Byte is %x\n",usb_ctl_val);
     9f8:	d0a6cf0b 	ldhu	r2,-25796(gp)
     9fc:	10bfffcc 	andi	r2,r2,65535
     a00:	01000074 	movhi	r4,1
     a04:	21056804 	addi	r4,r4,5536
     a08:	100b883a 	mov	r5,r2
     a0c:	000228c0 	call	228c <printf>
	while (usb_ctl_val != 0x03) // retries occurred
     a10:	0001883a 	nop
     a14:	d0a6cf0b 	ldhu	r2,-25796(gp)
     a18:	10bfffcc 	andi	r2,r2,65535
     a1c:	108000d8 	cmpnei	r2,r2,3
     a20:	10000326 	beq	r2,zero,a30 <setup_keyboard+0x390>
	{
		usb_ctl_val = UsbGetRetryCnt();
     a24:	00021640 	call	2164 <UsbGetRetryCnt>
     a28:	d0a6cf0d 	sth	r2,-25796(gp)

		goto USB_HOT_PLUG;
     a2c:	003f2406 	br	6c0 <__alt_data_end+0xfffaaf90>
	}

	printf("------------[ENUM PROCESS]:set address done!---------------\n");
     a30:	01000074 	movhi	r4,1
     a34:	21057404 	addi	r4,r4,5584
     a38:	00023800 	call	2380 <puts>

	// STEP 4 begin
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1
     a3c:	00013600 	call	1360 <UsbGetDeviceDesc1>

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     a40:	00000306 	br	a50 <setup_keyboard+0x3b0>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
     a44:	00013600 	call	1360 <UsbGetDeviceDesc1>
		usleep(10*1000);
     a48:	0109c404 	movi	r4,10000
     a4c:	000f4680 	call	f468 <usleep>
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     a50:	010000c4 	movi	r4,3
     a54:	00003300 	call	330 <IO_read>
     a58:	10bfffcc 	andi	r2,r2,65535
     a5c:	1080040c 	andi	r2,r2,16
     a60:	103ff826 	beq	r2,zero,a44 <__alt_data_end+0xfffab314>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     a64:	00020e00 	call	20e0 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     a68:	01000084 	movi	r4,2
     a6c:	01414184 	movi	r5,1286
     a70:	00002c80 	call	2c8 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
     a74:	0009883a 	mov	r4,zero
     a78:	00003300 	call	330 <IO_read>
     a7c:	10bfffcc 	andi	r2,r2,65535
     a80:	01000074 	movhi	r4,1
     a84:	21058304 	addi	r4,r4,5644
     a88:	100b883a 	mov	r5,r2
     a8c:	000228c0 	call	228c <printf>

	IO_write(HPI_ADDR,0x0508);
     a90:	01000084 	movi	r4,2
     a94:	01414204 	movi	r5,1288
     a98:	00002c80 	call	2c8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     a9c:	0009883a 	mov	r4,zero
     aa0:	00003300 	call	330 <IO_read>
     aa4:	d0a6cf0d 	sth	r2,-25796(gp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
     aa8:	d0a6cf0b 	ldhu	r2,-25796(gp)
     aac:	10bfffcc 	andi	r2,r2,65535
     ab0:	01000074 	movhi	r4,1
     ab4:	21058e04 	addi	r4,r4,5688
     ab8:	100b883a 	mov	r5,r2
     abc:	000228c0 	call	228c <printf>
	while (usb_ctl_val != 0x03)
     ac0:	00000206 	br	acc <setup_keyboard+0x42c>
	{
		usb_ctl_val = UsbGetRetryCnt();
     ac4:	00021640 	call	2164 <UsbGetRetryCnt>
     ac8:	d0a6cf0d 	sth	r2,-25796(gp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
     acc:	d0a6cf0b 	ldhu	r2,-25796(gp)
     ad0:	10bfffcc 	andi	r2,r2,65535
     ad4:	108000d8 	cmpnei	r2,r2,3
     ad8:	103ffa1e 	bne	r2,zero,ac4 <__alt_data_end+0xfffab394>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get device descriptor-1 done!-----------------\n");
     adc:	01000074 	movhi	r4,1
     ae0:	21059a04 	addi	r4,r4,5736
     ae4:	00023800 	call	2380 <puts>


	//--------------------------------get device descriptor-2---------------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2
     ae8:	00014a40 	call	14a4 <UsbGetDeviceDesc2>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     aec:	00000306 	br	afc <setup_keyboard+0x45c>
	{
		//resend the get device descriptor
		//get device descriptor
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
     af0:	00014a40 	call	14a4 <UsbGetDeviceDesc2>
		usleep(10*1000);
     af4:	0109c404 	movi	r4,10000
     af8:	000f4680 	call	f468 <usleep>
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     afc:	010000c4 	movi	r4,3
     b00:	00003300 	call	330 <IO_read>
     b04:	10bfffcc 	andi	r2,r2,65535
     b08:	1080040c 	andi	r2,r2,16
     b0c:	103ff826 	beq	r2,zero,af0 <__alt_data_end+0xfffab3c0>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     b10:	00020e00 	call	20e0 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     b14:	01000084 	movi	r4,2
     b18:	01414184 	movi	r5,1286
     b1c:	00002c80 	call	2c8 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
     b20:	0009883a 	mov	r4,zero
     b24:	00003300 	call	330 <IO_read>
     b28:	10bfffcc 	andi	r2,r2,65535
     b2c:	01000074 	movhi	r4,1
     b30:	21058304 	addi	r4,r4,5644
     b34:	100b883a 	mov	r5,r2
     b38:	000228c0 	call	228c <printf>

	IO_write(HPI_ADDR,0x0508);
     b3c:	01000084 	movi	r4,2
     b40:	01414204 	movi	r5,1288
     b44:	00002c80 	call	2c8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     b48:	0009883a 	mov	r4,zero
     b4c:	00003300 	call	330 <IO_read>
     b50:	d0a6cf0d 	sth	r2,-25796(gp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
     b54:	d0a6cf0b 	ldhu	r2,-25796(gp)
     b58:	10bfffcc 	andi	r2,r2,65535
     b5c:	01000074 	movhi	r4,1
     b60:	21058e04 	addi	r4,r4,5688
     b64:	100b883a 	mov	r5,r2
     b68:	000228c0 	call	228c <printf>
	while (usb_ctl_val != 0x03)
     b6c:	00000206 	br	b78 <setup_keyboard+0x4d8>
	{
		usb_ctl_val = UsbGetRetryCnt();
     b70:	00021640 	call	2164 <UsbGetRetryCnt>
     b74:	d0a6cf0d 	sth	r2,-25796(gp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
     b78:	d0a6cf0b 	ldhu	r2,-25796(gp)
     b7c:	10bfffcc 	andi	r2,r2,65535
     b80:	108000d8 	cmpnei	r2,r2,3
     b84:	103ffa1e 	bne	r2,zero,b70 <__alt_data_end+0xfffab440>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get device descriptor-2 done!--------------\n");
     b88:	01000074 	movhi	r4,1
     b8c:	2105ae04 	addi	r4,r4,5816
     b90:	00023800 	call	2380 <puts>


	// STEP 5 begin
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1
     b94:	00016780 	call	1678 <UsbGetConfigDesc1>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     b98:	00000306 	br	ba8 <setup_keyboard+0x508>
	{
		//resend the get device descriptor
		//get device descriptor

		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
     b9c:	00016780 	call	1678 <UsbGetConfigDesc1>
		usleep(10*1000);
     ba0:	0109c404 	movi	r4,10000
     ba4:	000f4680 	call	f468 <usleep>
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     ba8:	010000c4 	movi	r4,3
     bac:	00003300 	call	330 <IO_read>
     bb0:	10bfffcc 	andi	r2,r2,65535
     bb4:	1080040c 	andi	r2,r2,16
     bb8:	103ff826 	beq	r2,zero,b9c <__alt_data_end+0xfffab46c>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     bbc:	00020e00 	call	20e0 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     bc0:	01000084 	movi	r4,2
     bc4:	01414184 	movi	r5,1286
     bc8:	00002c80 	call	2c8 <IO_write>
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));
     bcc:	0009883a 	mov	r4,zero
     bd0:	00003300 	call	330 <IO_read>
     bd4:	10bfffcc 	andi	r2,r2,65535
     bd8:	01000074 	movhi	r4,1
     bdc:	2105c004 	addi	r4,r4,5888
     be0:	100b883a 	mov	r5,r2
     be4:	000228c0 	call	228c <printf>

	IO_write(HPI_ADDR,0x0508);
     be8:	01000084 	movi	r4,2
     bec:	01414204 	movi	r5,1288
     bf0:	00002c80 	call	2c8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     bf4:	0009883a 	mov	r4,zero
     bf8:	00003300 	call	330 <IO_read>
     bfc:	d0a6cf0d 	sth	r2,-25796(gp)
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
     c00:	d0a6cf0b 	ldhu	r2,-25796(gp)
     c04:	10bfffcc 	andi	r2,r2,65535
     c08:	01000074 	movhi	r4,1
     c0c:	2105cb04 	addi	r4,r4,5932
     c10:	100b883a 	mov	r5,r2
     c14:	000228c0 	call	228c <printf>
	while (usb_ctl_val != 0x03)
     c18:	00000206 	br	c24 <setup_keyboard+0x584>
	{
		usb_ctl_val = UsbGetRetryCnt();
     c1c:	00021640 	call	2164 <UsbGetRetryCnt>
     c20:	d0a6cf0d 	sth	r2,-25796(gp)
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
     c24:	d0a6cf0b 	ldhu	r2,-25796(gp)
     c28:	10bfffcc 	andi	r2,r2,65535
     c2c:	108000d8 	cmpnei	r2,r2,3
     c30:	103ffa1e 	bne	r2,zero,c1c <__alt_data_end+0xfffab4ec>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}
	printf("------------[ENUM PROCESS]:get configuration descriptor-1 pass------------\n");
     c34:	01000074 	movhi	r4,1
     c38:	2105d704 	addi	r4,r4,5980
     c3c:	00023800 	call	2380 <puts>

	// STEP 6 begin
	//-----------------------------------get configuration descriptor-2------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2
     c40:	00018040 	call	1804 <UsbGetConfigDesc2>

	usleep(100*1000);
     c44:	010000b4 	movhi	r4,2
     c48:	2121a804 	addi	r4,r4,-31072
     c4c:	000f4680 	call	f468 <usleep>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     c50:	00000306 	br	c60 <setup_keyboard+0x5c0>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
     c54:	00018040 	call	1804 <UsbGetConfigDesc2>
		usleep(10*1000);
     c58:	0109c404 	movi	r4,10000
     c5c:	000f4680 	call	f468 <usleep>
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2

	usleep(100*1000);
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     c60:	010000c4 	movi	r4,3
     c64:	00003300 	call	330 <IO_read>
     c68:	10bfffcc 	andi	r2,r2,65535
     c6c:	1080040c 	andi	r2,r2,16
     c70:	103ff826 	beq	r2,zero,c54 <__alt_data_end+0xfffab524>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     c74:	00020e00 	call	20e0 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     c78:	01000084 	movi	r4,2
     c7c:	01414184 	movi	r5,1286
     c80:	00002c80 	call	2c8 <IO_write>
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));
     c84:	0009883a 	mov	r4,zero
     c88:	00003300 	call	330 <IO_read>
     c8c:	10bfffcc 	andi	r2,r2,65535
     c90:	01000074 	movhi	r4,1
     c94:	2105ea04 	addi	r4,r4,6056
     c98:	100b883a 	mov	r5,r2
     c9c:	000228c0 	call	228c <printf>

	IO_write(HPI_ADDR,0x0508);
     ca0:	01000084 	movi	r4,2
     ca4:	01414204 	movi	r5,1288
     ca8:	00002c80 	call	2c8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     cac:	0009883a 	mov	r4,zero
     cb0:	00003300 	call	330 <IO_read>
     cb4:	d0a6cf0d 	sth	r2,-25796(gp)
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
     cb8:	d0a6cf0b 	ldhu	r2,-25796(gp)
     cbc:	10bfffcc 	andi	r2,r2,65535
     cc0:	01000074 	movhi	r4,1
     cc4:	2105f504 	addi	r4,r4,6100
     cc8:	100b883a 	mov	r5,r2
     ccc:	000228c0 	call	228c <printf>
	while (usb_ctl_val != 0x03)
     cd0:	00000206 	br	cdc <setup_keyboard+0x63c>
	{
		usb_ctl_val = UsbGetRetryCnt();
     cd4:	00021640 	call	2164 <UsbGetRetryCnt>
     cd8:	d0a6cf0d 	sth	r2,-25796(gp)
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
     cdc:	d0a6cf0b 	ldhu	r2,-25796(gp)
     ce0:	10bfffcc 	andi	r2,r2,65535
     ce4:	108000d8 	cmpnei	r2,r2,3
     ce8:	103ffa1e 	bne	r2,zero,cd4 <__alt_data_end+0xfffab5a4>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("-----------[ENUM PROCESS]:get configuration descriptor-2 done!------------\n");
     cec:	01000074 	movhi	r4,1
     cf0:	21060104 	addi	r4,r4,6148
     cf4:	00023800 	call	2380 <puts>


	// ---------------------------------get device info---------------------------------------------//

	// TASK: Write the address to read from the memory for byte 7 of the interface descriptor to HPI_ADDR.
	IO_write(HPI_ADDR,0x056c);
     cf8:	01000084 	movi	r4,2
     cfc:	01415b04 	movi	r5,1388
     d00:	00002c80 	call	2c8 <IO_write>
	code = IO_read(HPI_DATA);
     d04:	0009883a 	mov	r4,zero
     d08:	00003300 	call	330 <IO_read>
     d0c:	d0a6d10d 	sth	r2,-25788(gp)
	code = code & 0x003;
     d10:	d0a6d10b 	ldhu	r2,-25788(gp)
     d14:	108000cc 	andi	r2,r2,3
     d18:	d0a6d10d 	sth	r2,-25788(gp)
	printf("\ncode = %x\n", code);
     d1c:	d0a6d10b 	ldhu	r2,-25788(gp)
     d20:	10bfffcc 	andi	r2,r2,65535
     d24:	01000074 	movhi	r4,1
     d28:	21061404 	addi	r4,r4,6224
     d2c:	100b883a 	mov	r5,r2
     d30:	000228c0 	call	228c <printf>

	if (code == 0x01)
     d34:	d0a6d10b 	ldhu	r2,-25788(gp)
     d38:	10bfffcc 	andi	r2,r2,65535
     d3c:	10800058 	cmpnei	r2,r2,1
     d40:	1000041e 	bne	r2,zero,d54 <setup_keyboard+0x6b4>
	{
		printf("\n[INFO]:check TD rec data7 \n[INFO]:Keyboard Detected!!!\n\n");
     d44:	01000074 	movhi	r4,1
     d48:	21061704 	addi	r4,r4,6236
     d4c:	00023800 	call	2380 <puts>
     d50:	00000306 	br	d60 <setup_keyboard+0x6c0>
	}
	else
	{
		printf("\n[INFO]:Keyboard Not Detected!!! \n\n");
     d54:	01000074 	movhi	r4,1
     d58:	21062604 	addi	r4,r4,6296
     d5c:	00023800 	call	2380 <puts>
	}

	// TASK: Write the address to read from the memory for the endpoint descriptor to HPI_ADDR.

	IO_write(HPI_ADDR,0x0576);
     d60:	01000084 	movi	r4,2
     d64:	01415d84 	movi	r5,1398
     d68:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x073F);
     d6c:	0009883a 	mov	r4,zero
     d70:	0141cfc4 	movi	r5,1855
     d74:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x8105);
     d78:	0009883a 	mov	r4,zero
     d7c:	01604154 	movui	r5,33029
     d80:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0003);
     d84:	0009883a 	mov	r4,zero
     d88:	014000c4 	movi	r5,3
     d8c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);
     d90:	0009883a 	mov	r4,zero
     d94:	01400204 	movi	r5,8
     d98:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0xAC0A);
     d9c:	0009883a 	mov	r4,zero
     da0:	016b0294 	movui	r5,44042
     da4:	00002c80 	call	2c8 <IO_write>
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0576); //HUSB_SIE1_pCurrentTDPtr
     da8:	01006c04 	movi	r4,432
     dac:	01415d84 	movi	r5,1398
     db0:	000111c0 	call	111c <UsbWrite>

	//data_size = (IO_read(HPI_DATA)>>8)&0x0ff;
	//data_size = 0x08;//(IO_read(HPI_DATA))&0x0ff;
	//UsbPrintMem();
	IO_write(HPI_ADDR,0x057c);
     db4:	01000084 	movi	r4,2
     db8:	01415f04 	movi	r5,1404
     dbc:	00002c80 	call	2c8 <IO_write>
	data_size = (IO_read(HPI_DATA))&0x0ff;
     dc0:	0009883a 	mov	r4,zero
     dc4:	00003300 	call	330 <IO_read>
     dc8:	d0a6cf85 	stb	r2,-25794(gp)
	printf("[ENUM PROCESS]:data packet size is %d\n",data_size);
     dcc:	d0a6cf83 	ldbu	r2,-25794(gp)
     dd0:	10803fcc 	andi	r2,r2,255
     dd4:	01000074 	movhi	r4,1
     dd8:	21062f04 	addi	r4,r4,6332
     ddc:	100b883a 	mov	r5,r2
     de0:	000228c0 	call	228c <printf>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration
     de4:	0001a680 	call	1a68 <UsbSetConfig>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     de8:	00000306 	br	df8 <setup_keyboard+0x758>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
     dec:	0001a680 	call	1a68 <UsbSetConfig>
		usleep(10*1000);
     df0:	0109c404 	movi	r4,10000
     df4:	000f4680 	call	f468 <usleep>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     df8:	010000c4 	movi	r4,3
     dfc:	00003300 	call	330 <IO_read>
     e00:	10bfffcc 	andi	r2,r2,65535
     e04:	1080040c 	andi	r2,r2,16
     e08:	103ff826 	beq	r2,zero,dec <__alt_data_end+0xfffab6bc>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     e0c:	00020e00 	call	20e0 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     e10:	01000084 	movi	r4,2
     e14:	01414184 	movi	r5,1286
     e18:	00002c80 	call	2c8 <IO_write>
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));
     e1c:	0009883a 	mov	r4,zero
     e20:	00003300 	call	330 <IO_read>
     e24:	10bfffcc 	andi	r2,r2,65535
     e28:	01000074 	movhi	r4,1
     e2c:	21063904 	addi	r4,r4,6372
     e30:	100b883a 	mov	r5,r2
     e34:	000228c0 	call	228c <printf>

	IO_write(HPI_ADDR,0x0508);
     e38:	01000084 	movi	r4,2
     e3c:	01414204 	movi	r5,1288
     e40:	00002c80 	call	2c8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     e44:	0009883a 	mov	r4,zero
     e48:	00003300 	call	330 <IO_read>
     e4c:	d0a6cf0d 	sth	r2,-25796(gp)
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
     e50:	d0a6cf0b 	ldhu	r2,-25796(gp)
     e54:	10bfffcc 	andi	r2,r2,65535
     e58:	01000074 	movhi	r4,1
     e5c:	21064404 	addi	r4,r4,6416
     e60:	100b883a 	mov	r5,r2
     e64:	000228c0 	call	228c <printf>
	while (usb_ctl_val != 0x03)
     e68:	00000206 	br	e74 <setup_keyboard+0x7d4>
	{
		usb_ctl_val = UsbGetRetryCnt();
     e6c:	00021640 	call	2164 <UsbGetRetryCnt>
     e70:	d0a6cf0d 	sth	r2,-25796(gp)
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
     e74:	d0a6cf0b 	ldhu	r2,-25796(gp)
     e78:	10bfffcc 	andi	r2,r2,65535
     e7c:	108000d8 	cmpnei	r2,r2,3
     e80:	103ffa1e 	bne	r2,zero,e6c <__alt_data_end+0xfffab73c>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:set configuration done!-------------------\n");
     e84:	01000074 	movhi	r4,1
     e88:	21065004 	addi	r4,r4,6464
     e8c:	00023800 	call	2380 <puts>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();
     e90:	0001b640 	call	1b64 <UsbClassRequest>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     e94:	00000306 	br	ea4 <setup_keyboard+0x804>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
     e98:	0001b640 	call	1b64 <UsbClassRequest>
		usleep(10*1000);
     e9c:	0109c404 	movi	r4,10000
     ea0:	000f4680 	call	f468 <usleep>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     ea4:	010000c4 	movi	r4,3
     ea8:	00003300 	call	330 <IO_read>
     eac:	10bfffcc 	andi	r2,r2,65535
     eb0:	1080040c 	andi	r2,r2,16
     eb4:	103ff826 	beq	r2,zero,e98 <__alt_data_end+0xfffab768>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     eb8:	00020e00 	call	20e0 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     ebc:	01000084 	movi	r4,2
     ec0:	01414184 	movi	r5,1286
     ec4:	00002c80 	call	2c8 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
     ec8:	0009883a 	mov	r4,zero
     ecc:	00003300 	call	330 <IO_read>
     ed0:	10bfffcc 	andi	r2,r2,65535
     ed4:	01000074 	movhi	r4,1
     ed8:	21066204 	addi	r4,r4,6536
     edc:	100b883a 	mov	r5,r2
     ee0:	000228c0 	call	228c <printf>

	IO_write(HPI_ADDR,0x0508);
     ee4:	01000084 	movi	r4,2
     ee8:	01414204 	movi	r5,1288
     eec:	00002c80 	call	2c8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     ef0:	0009883a 	mov	r4,zero
     ef4:	00003300 	call	330 <IO_read>
     ef8:	d0a6cf0d 	sth	r2,-25796(gp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
     efc:	d0a6cf0b 	ldhu	r2,-25796(gp)
     f00:	10bfffcc 	andi	r2,r2,65535
     f04:	01000074 	movhi	r4,1
     f08:	21066d04 	addi	r4,r4,6580
     f0c:	100b883a 	mov	r5,r2
     f10:	000228c0 	call	228c <printf>
	while (usb_ctl_val != 0x03)
     f14:	00000206 	br	f20 <setup_keyboard+0x880>
	{
		usb_ctl_val = UsbGetRetryCnt();
     f18:	00021640 	call	2164 <UsbGetRetryCnt>
     f1c:	d0a6cf0d 	sth	r2,-25796(gp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
     f20:	d0a6cf0b 	ldhu	r2,-25796(gp)
     f24:	10bfffcc 	andi	r2,r2,65535
     f28:	108000d8 	cmpnei	r2,r2,3
     f2c:	103ffa1e 	bne	r2,zero,f18 <__alt_data_end+0xfffab7e8>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("------------[ENUM PROCESS]:class request out done!-------------------\n");
     f30:	01000074 	movhi	r4,1
     f34:	21067904 	addi	r4,r4,6628
     f38:	00023800 	call	2380 <puts>

	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();
     f3c:	0001c600 	call	1c60 <UsbGetHidDesc>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     f40:	00000306 	br	f50 <setup_keyboard+0x8b0>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
     f44:	0001c600 	call	1c60 <UsbGetHidDesc>
		usleep(10*1000);
     f48:	0109c404 	movi	r4,10000
     f4c:	000f4680 	call	f468 <usleep>
	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     f50:	010000c4 	movi	r4,3
     f54:	00003300 	call	330 <IO_read>
     f58:	10bfffcc 	andi	r2,r2,65535
     f5c:	1080040c 	andi	r2,r2,16
     f60:	103ff826 	beq	r2,zero,f44 <__alt_data_end+0xfffab814>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     f64:	00020e00 	call	20e0 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     f68:	01000084 	movi	r4,2
     f6c:	01414184 	movi	r5,1286
     f70:	00002c80 	call	2c8 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
     f74:	0009883a 	mov	r4,zero
     f78:	00003300 	call	330 <IO_read>
     f7c:	10bfffcc 	andi	r2,r2,65535
     f80:	01000074 	movhi	r4,1
     f84:	21066204 	addi	r4,r4,6536
     f88:	100b883a 	mov	r5,r2
     f8c:	000228c0 	call	228c <printf>

	IO_write(HPI_ADDR,0x0508);
     f90:	01000084 	movi	r4,2
     f94:	01414204 	movi	r5,1288
     f98:	00002c80 	call	2c8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     f9c:	0009883a 	mov	r4,zero
     fa0:	00003300 	call	330 <IO_read>
     fa4:	d0a6cf0d 	sth	r2,-25796(gp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
     fa8:	d0a6cf0b 	ldhu	r2,-25796(gp)
     fac:	10bfffcc 	andi	r2,r2,65535
     fb0:	01000074 	movhi	r4,1
     fb4:	21066d04 	addi	r4,r4,6580
     fb8:	100b883a 	mov	r5,r2
     fbc:	000228c0 	call	228c <printf>
	while (usb_ctl_val != 0x03)
     fc0:	00000206 	br	fcc <setup_keyboard+0x92c>
	{
		usb_ctl_val = UsbGetRetryCnt();
     fc4:	00021640 	call	2164 <UsbGetRetryCnt>
     fc8:	d0a6cf0d 	sth	r2,-25796(gp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
     fcc:	d0a6cf0b 	ldhu	r2,-25796(gp)
     fd0:	10bfffcc 	andi	r2,r2,65535
     fd4:	108000d8 	cmpnei	r2,r2,3
     fd8:	103ffa1e 	bne	r2,zero,fc4 <__alt_data_end+0xfffab894>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get descriptor (class 0x21) done!-------------------\n");
     fdc:	01000074 	movhi	r4,1
     fe0:	21068b04 	addi	r4,r4,6700
     fe4:	00023800 	call	2380 <puts>

	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
     fe8:	0001da40 	call	1da4 <UsbGetReportDesc>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     fec:	00000306 	br	ffc <setup_keyboard+0x95c>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
     ff0:	0001da40 	call	1da4 <UsbGetReportDesc>
		usleep(10*1000);
     ff4:	0109c404 	movi	r4,10000
     ff8:	000f4680 	call	f468 <usleep>
	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     ffc:	010000c4 	movi	r4,3
    1000:	00003300 	call	330 <IO_read>
    1004:	10bfffcc 	andi	r2,r2,65535
    1008:	1080040c 	andi	r2,r2,16
    100c:	103ff826 	beq	r2,zero,ff0 <__alt_data_end+0xfffab8c0>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
    1010:	00020e00 	call	20e0 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
    1014:	01000084 	movi	r4,2
    1018:	01414184 	movi	r5,1286
    101c:	00002c80 	call	2c8 <IO_write>
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));
    1020:	0009883a 	mov	r4,zero
    1024:	00003300 	call	330 <IO_read>
    1028:	10bfffcc 	andi	r2,r2,65535
    102c:	01000074 	movhi	r4,1
    1030:	21069f04 	addi	r4,r4,6780
    1034:	100b883a 	mov	r5,r2
    1038:	000228c0 	call	228c <printf>

	IO_write(HPI_ADDR,0x0508);
    103c:	01000084 	movi	r4,2
    1040:	01414204 	movi	r5,1288
    1044:	00002c80 	call	2c8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
    1048:	0009883a 	mov	r4,zero
    104c:	00003300 	call	330 <IO_read>
    1050:	d0a6cf0d 	sth	r2,-25796(gp)
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
    1054:	d0a6cf0b 	ldhu	r2,-25796(gp)
    1058:	10bfffcc 	andi	r2,r2,65535
    105c:	01000074 	movhi	r4,1
    1060:	2106ab04 	addi	r4,r4,6828
    1064:	100b883a 	mov	r5,r2
    1068:	000228c0 	call	228c <printf>
	while (usb_ctl_val != 0x03)
    106c:	00000206 	br	1078 <setup_keyboard+0x9d8>
	{
		usb_ctl_val = UsbGetRetryCnt();
    1070:	00021640 	call	2164 <UsbGetRetryCnt>
    1074:	d0a6cf0d 	sth	r2,-25796(gp)
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
    1078:	d0a6cf0b 	ldhu	r2,-25796(gp)
    107c:	10bfffcc 	andi	r2,r2,65535
    1080:	108000d8 	cmpnei	r2,r2,3
    1084:	103ffa1e 	bne	r2,zero,1070 <__alt_data_end+0xfffab940>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get descriptor (class 0x22) done!----------------\n");
    1088:	01000074 	movhi	r4,1
    108c:	2106b704 	addi	r4,r4,6876
    1090:	00023800 	call	2380 <puts>


	//-----------------------------------get keycode value------------------------------------------------//


	return;
    1094:	0001883a 	nop
}
    1098:	e037883a 	mov	sp,fp
    109c:	dfc00117 	ldw	ra,4(sp)
    10a0:	df000017 	ldw	fp,0(sp)
    10a4:	dec00204 	addi	sp,sp,8
    10a8:	f800283a 	ret

000010ac <main>:
#include <stdlib.h>

#include "keyboard_functions.h"


int main(void){
    10ac:	defffb04 	addi	sp,sp,-20
    10b0:	dfc00415 	stw	ra,16(sp)
    10b4:	df000315 	stw	fp,12(sp)
    10b8:	df000304 	addi	fp,sp,12
	setup_keyboard();
    10bc:	00006a00 	call	6a0 <setup_keyboard>
	unsigned int keycode1;
	unsigned int keycode2;
	int i=0;
    10c0:	e03ffd15 	stw	zero,-12(fp)
	while(1)
		{
			if(get_keycode(&keycode1,&keycode2)==0){
    10c4:	e0fffe04 	addi	r3,fp,-8
    10c8:	e0bfff04 	addi	r2,fp,-4
    10cc:	1809883a 	mov	r4,r3
    10d0:	100b883a 	mov	r5,r2
    10d4:	00003940 	call	394 <get_keycode>
    10d8:	10000f1e 	bne	r2,zero,1118 <main+0x6c>
				printf("%04x %04x\n",keycode1,keycode2);
    10dc:	e0fffe17 	ldw	r3,-8(fp)
    10e0:	e0bfff17 	ldw	r2,-4(fp)
    10e4:	01000074 	movhi	r4,1
    10e8:	2106cb04 	addi	r4,r4,6956
    10ec:	180b883a 	mov	r5,r3
    10f0:	100d883a 	mov	r6,r2
    10f4:	000228c0 	call	228c <printf>
				for(i=0;i<10000;i++);
    10f8:	e03ffd15 	stw	zero,-12(fp)
    10fc:	00000306 	br	110c <main+0x60>
    1100:	e0bffd17 	ldw	r2,-12(fp)
    1104:	10800044 	addi	r2,r2,1
    1108:	e0bffd15 	stw	r2,-12(fp)
    110c:	e0bffd17 	ldw	r2,-12(fp)
    1110:	1089c410 	cmplti	r2,r2,10000
    1114:	103ffa1e 	bne	r2,zero,1100 <__alt_data_end+0xfffab9d0>
			}

		}
    1118:	003fea06 	br	10c4 <__alt_data_end+0xfffab994>

0000111c <UsbWrite>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbWrite(alt_u16 Address, alt_u16 Data)
{
    111c:	defffc04 	addi	sp,sp,-16
    1120:	dfc00315 	stw	ra,12(sp)
    1124:	df000215 	stw	fp,8(sp)
    1128:	df000204 	addi	fp,sp,8
    112c:	2007883a 	mov	r3,r4
    1130:	2805883a 	mov	r2,r5
    1134:	e0fffe0d 	sth	r3,-8(fp)
    1138:	e0bfff0d 	sth	r2,-4(fp)
	IO_write(HPI_ADDR_PORT, Address);
    113c:	e0bffe0b 	ldhu	r2,-8(fp)
    1140:	01000084 	movi	r4,2
    1144:	100b883a 	mov	r5,r2
    1148:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA_PORT, Data);
    114c:	e0bfff0b 	ldhu	r2,-4(fp)
    1150:	0009883a 	mov	r4,zero
    1154:	100b883a 	mov	r5,r2
    1158:	00002c80 	call	2c8 <IO_write>
}
    115c:	e037883a 	mov	sp,fp
    1160:	dfc00117 	ldw	ra,4(sp)
    1164:	df000017 	ldw	fp,0(sp)
    1168:	dec00204 	addi	sp,sp,8
    116c:	f800283a 	ret

00001170 <UsbRead>:
 *
 * @note     None
 *
 ******************************************************************************/
alt_u16 UsbRead(alt_u16 Address)
{
    1170:	defffd04 	addi	sp,sp,-12
    1174:	dfc00215 	stw	ra,8(sp)
    1178:	df000115 	stw	fp,4(sp)
    117c:	df000104 	addi	fp,sp,4
    1180:	2005883a 	mov	r2,r4
    1184:	e0bfff0d 	sth	r2,-4(fp)
	IO_write(HPI_ADDR_PORT, Address);
    1188:	e0bfff0b 	ldhu	r2,-4(fp)
    118c:	01000084 	movi	r4,2
    1190:	100b883a 	mov	r5,r2
    1194:	00002c80 	call	2c8 <IO_write>
	return IO_read(HPI_DATA_PORT);
    1198:	0009883a 	mov	r4,zero
    119c:	00003300 	call	330 <IO_read>
}
    11a0:	e037883a 	mov	sp,fp
    11a4:	dfc00117 	ldw	ra,4(sp)
    11a8:	df000017 	ldw	fp,0(sp)
    11ac:	dec00204 	addi	sp,sp,8
    11b0:	f800283a 	ret

000011b4 <UsbSoftReset>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbSoftReset()
{
    11b4:	defffe04 	addi	sp,sp,-8
    11b8:	dfc00115 	stw	ra,4(sp)
    11bc:	df000015 	stw	fp,0(sp)
    11c0:	d839883a 	mov	fp,sp
	//XIo_Out16(USB_MAILBOX, COMM_RESET);
	IO_write(HPI_MAILBOX,COMM_RESET); //COMM_JUMP2CODE
    11c4:	01000044 	movi	r4,1
    11c8:	017e9414 	movui	r5,64080
    11cc:	00002c80 	call	2c8 <IO_write>
	usleep(100000);
    11d0:	010000b4 	movhi	r4,2
    11d4:	2121a804 	addi	r4,r4,-31072
    11d8:	000f4680 	call	f468 <usleep>
	printf("[USB INIT]:reset finished!\n");
    11dc:	01000074 	movhi	r4,1
    11e0:	2106ce04 	addi	r4,r4,6968
    11e4:	00023800 	call	2380 <puts>

	usleep(500000);
    11e8:	01000234 	movhi	r4,8
    11ec:	21284804 	addi	r4,r4,-24288
    11f0:	000f4680 	call	f468 <usleep>
	printf("[USB INIT]:Clear up the interrupt\r\n");
    11f4:	01000074 	movhi	r4,1
    11f8:	2106d504 	addi	r4,r4,6996
    11fc:	00023800 	call	2380 <puts>
	IO_read(HPI_MAILBOX);
    1200:	01000044 	movi	r4,1
    1204:	00003300 	call	330 <IO_read>
	IO_read(HPI_STATUS);
    1208:	010000c4 	movi	r4,3
    120c:	00003300 	call	330 <IO_read>

	// Had to add the write due to a bug in BIOS where they overwrite
	// the mailbox after initialization with garbage.  The read clears
	// any pending interrupts.
	UsbRead (HPI_SIE1_MSG_ADR);
    1210:	01005104 	movi	r4,324
    1214:	00011700 	call	1170 <UsbRead>
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
    1218:	01005104 	movi	r4,324
    121c:	000b883a 	mov	r5,zero
    1220:	000111c0 	call	111c <UsbWrite>
	UsbRead (HPI_SIE2_MSG_ADR);
    1224:	01005204 	movi	r4,328
    1228:	00011700 	call	1170 <UsbRead>
	UsbWrite (HPI_SIE2_MSG_ADR, 0);
    122c:	01005204 	movi	r4,328
    1230:	000b883a 	mov	r5,zero
    1234:	000111c0 	call	111c <UsbWrite>


	UsbWrite (HOST1_STAT_REG, 0xFFFF);
    1238:	01302414 	movui	r4,49296
    123c:	017fffd4 	movui	r5,65535
    1240:	000111c0 	call	111c <UsbWrite>
	UsbWrite (HOST2_STAT_REG, 0xFFFF);
    1244:	01302c14 	movui	r4,49328
    1248:	017fffd4 	movui	r5,65535
    124c:	000111c0 	call	111c <UsbWrite>
}
    1250:	e037883a 	mov	sp,fp
    1254:	dfc00117 	ldw	ra,4(sp)
    1258:	df000017 	ldw	fp,0(sp)
    125c:	dec00204 	addi	sp,sp,8
    1260:	f800283a 	ret

00001264 <UsbSetAddress>:


void UsbSetAddress()
{
    1264:	defffe04 	addi	sp,sp,-8
    1268:	dfc00115 	stw	ra,4(sp)
    126c:	df000015 	stw	fp,0(sp)
    1270:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    1274:	01000084 	movi	r4,2
    1278:	01414004 	movi	r5,1280
    127c:	00002c80 	call	2c8 <IO_write>
	// TD #1: 6 writes
	IO_write(HPI_DATA,0x050C);
    1280:	0009883a 	mov	r4,zero
    1284:	01414304 	movi	r5,1292
    1288:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    128c:	0009883a 	mov	r4,zero
    1290:	01400204 	movi	r5,8
    1294:	00002c80 	call	2c8 <IO_write>
	// TASK: Complete with 4 more IOWR functions
	IO_write(HPI_DATA,0x00D0);
    1298:	0009883a 	mov	r4,zero
    129c:	01403404 	movi	r5,208
    12a0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);
    12a4:	0009883a 	mov	r4,zero
    12a8:	01400044 	movi	r5,1
    12ac:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    12b0:	0009883a 	mov	r4,zero
    12b4:	014004c4 	movi	r5,19
    12b8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0514);
    12bc:	0009883a 	mov	r4,zero
    12c0:	01414504 	movi	r5,1300
    12c4:	00002c80 	call	2c8 <IO_write>
	// TD #2: 4 writes
	// TASK: Complete with 4 IOWR functions
	IO_write(HPI_DATA,0x0500);
    12c8:	0009883a 	mov	r4,zero
    12cc:	01414004 	movi	r5,1280
    12d0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0002);
    12d4:	0009883a 	mov	r4,zero
    12d8:	01400084 	movi	r5,2
    12dc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    12e0:	0009883a 	mov	r4,zero
    12e4:	000b883a 	mov	r5,zero
    12e8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    12ec:	0009883a 	mov	r4,zero
    12f0:	000b883a 	mov	r5,zero
    12f4:	00002c80 	call	2c8 <IO_write>
	// TD #3: 6 writes
	// TASK: Complete with 6 IOWR functions
	IO_write(HPI_DATA,0x0000); //
    12f8:	0009883a 	mov	r4,zero
    12fc:	000b883a 	mov	r5,zero
    1300:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//
    1304:	0009883a 	mov	r4,zero
    1308:	000b883a 	mov	r5,zero
    130c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0090);//
    1310:	0009883a 	mov	r4,zero
    1314:	01402404 	movi	r5,144
    1318:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);
    131c:	0009883a 	mov	r4,zero
    1320:	01401044 	movi	r5,65
    1324:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    1328:	0009883a 	mov	r4,zero
    132c:	014004c4 	movi	r5,19
    1330:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    1334:	0009883a 	mov	r4,zero
    1338:	000b883a 	mov	r5,zero
    133c:	00002c80 	call	2c8 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    1340:	01006c04 	movi	r4,432
    1344:	01414004 	movi	r5,1280
    1348:	000111c0 	call	111c <UsbWrite>
}
    134c:	e037883a 	mov	sp,fp
    1350:	dfc00117 	ldw	ra,4(sp)
    1354:	df000017 	ldw	fp,0(sp)
    1358:	dec00204 	addi	sp,sp,8
    135c:	f800283a 	ret

00001360 <UsbGetDeviceDesc1>:


void UsbGetDeviceDesc1()
{
    1360:	defffe04 	addi	sp,sp,-8
    1364:	dfc00115 	stw	ra,4(sp)
    1368:	df000015 	stw	fp,0(sp)
    136c:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    1370:	01000084 	movi	r4,2
    1374:	01414004 	movi	r5,1280
    1378:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x050C);
    137c:	0009883a 	mov	r4,zero
    1380:	01414304 	movi	r5,1292
    1384:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    1388:	0009883a 	mov	r4,zero
    138c:	01400204 	movi	r5,8
    1390:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    1394:	0009883a 	mov	r4,zero
    1398:	0140b404 	movi	r5,720
    139c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);
    13a0:	0009883a 	mov	r4,zero
    13a4:	01400044 	movi	r5,1
    13a8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    13ac:	0009883a 	mov	r4,zero
    13b0:	014004c4 	movi	r5,19
    13b4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0514);
    13b8:	0009883a 	mov	r4,zero
    13bc:	01414504 	movi	r5,1300
    13c0:	00002c80 	call	2c8 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
    13c4:	0009883a 	mov	r4,zero
    13c8:	0141a004 	movi	r5,1664
    13cc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0100); //device 0x01
    13d0:	0009883a 	mov	r4,zero
    13d4:	01404004 	movi	r5,256
    13d8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    13dc:	0009883a 	mov	r4,zero
    13e0:	000b883a 	mov	r5,zero
    13e4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);
    13e8:	0009883a 	mov	r4,zero
    13ec:	01400204 	movi	r5,8
    13f0:	00002c80 	call	2c8 <IO_write>

	//data phase IN
	IO_write(HPI_DATA,0x052C); //
    13f4:	0009883a 	mov	r4,zero
    13f8:	01414b04 	movi	r5,1324
    13fc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//
    1400:	0009883a 	mov	r4,zero
    1404:	01400204 	movi	r5,8
    1408:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//
    140c:	0009883a 	mov	r4,zero
    1410:	0140a404 	movi	r5,656
    1414:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);
    1418:	0009883a 	mov	r4,zero
    141c:	01401044 	movi	r5,65
    1420:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    1424:	0009883a 	mov	r4,zero
    1428:	014004c4 	movi	r5,19
    142c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0520);
    1430:	0009883a 	mov	r4,zero
    1434:	01414804 	movi	r5,1312
    1438:	00002c80 	call	2c8 <IO_write>

	//    //status phase
	IO_write(HPI_DATA,0x0000); //don't care
    143c:	0009883a 	mov	r4,zero
    1440:	000b883a 	mov	r5,zero
    1444:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
    1448:	0009883a 	mov	r4,zero
    144c:	000b883a 	mov	r5,zero
    1450:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0210);//device address
    1454:	0009883a 	mov	r4,zero
    1458:	01408404 	movi	r5,528
    145c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);
    1460:	0009883a 	mov	r4,zero
    1464:	01401044 	movi	r5,65
    1468:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    146c:	0009883a 	mov	r4,zero
    1470:	014004c4 	movi	r5,19
    1474:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    1478:	0009883a 	mov	r4,zero
    147c:	000b883a 	mov	r5,zero
    1480:	00002c80 	call	2c8 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    1484:	01006c04 	movi	r4,432
    1488:	01414004 	movi	r5,1280
    148c:	000111c0 	call	111c <UsbWrite>
}
    1490:	e037883a 	mov	sp,fp
    1494:	dfc00117 	ldw	ra,4(sp)
    1498:	df000017 	ldw	fp,0(sp)
    149c:	dec00204 	addi	sp,sp,8
    14a0:	f800283a 	ret

000014a4 <UsbGetDeviceDesc2>:

void UsbGetDeviceDesc2()
{
    14a4:	defffe04 	addi	sp,sp,-8
    14a8:	dfc00115 	stw	ra,4(sp)
    14ac:	df000015 	stw	fp,0(sp)
    14b0:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    14b4:	01000084 	movi	r4,2
    14b8:	01414004 	movi	r5,1280
    14bc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x050C);
    14c0:	0009883a 	mov	r4,zero
    14c4:	01414304 	movi	r5,1292
    14c8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    14cc:	0009883a 	mov	r4,zero
    14d0:	01400204 	movi	r5,8
    14d4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    14d8:	0009883a 	mov	r4,zero
    14dc:	0140b404 	movi	r5,720
    14e0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);
    14e4:	0009883a 	mov	r4,zero
    14e8:	01400044 	movi	r5,1
    14ec:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    14f0:	0009883a 	mov	r4,zero
    14f4:	014004c4 	movi	r5,19
    14f8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0514);
    14fc:	0009883a 	mov	r4,zero
    1500:	01414504 	movi	r5,1300
    1504:	00002c80 	call	2c8 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
    1508:	0009883a 	mov	r4,zero
    150c:	0141a004 	movi	r5,1664
    1510:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0100);//e //device 0x01
    1514:	0009883a 	mov	r4,zero
    1518:	01404004 	movi	r5,256
    151c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    1520:	0009883a 	mov	r4,zero
    1524:	000b883a 	mov	r5,zero
    1528:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0012);//2
    152c:	0009883a 	mov	r4,zero
    1530:	01400484 	movi	r5,18
    1534:	00002c80 	call	2c8 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
    1538:	0009883a 	mov	r4,zero
    153c:	01415104 	movi	r5,1348
    1540:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    1544:	0009883a 	mov	r4,zero
    1548:	01400204 	movi	r5,8
    154c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    1550:	0009883a 	mov	r4,zero
    1554:	0140a404 	movi	r5,656
    1558:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    155c:	0009883a 	mov	r4,zero
    1560:	01401044 	movi	r5,65
    1564:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    1568:	0009883a 	mov	r4,zero
    156c:	014004c4 	movi	r5,19
    1570:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    1574:	0009883a 	mov	r4,zero
    1578:	01414804 	movi	r5,1312
    157c:	00002c80 	call	2c8 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
    1580:	0009883a 	mov	r4,zero
    1584:	01415304 	movi	r5,1356
    1588:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
    158c:	0009883a 	mov	r4,zero
    1590:	01400204 	movi	r5,8
    1594:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    1598:	0009883a 	mov	r4,zero
    159c:	0140a404 	movi	r5,656
    15a0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);//6
    15a4:	0009883a 	mov	r4,zero
    15a8:	01400044 	movi	r5,1
    15ac:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    15b0:	0009883a 	mov	r4,zero
    15b4:	014004c4 	movi	r5,19
    15b8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
    15bc:	0009883a 	mov	r4,zero
    15c0:	01414b04 	movi	r5,1324
    15c4:	00002c80 	call	2c8 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0554); //c
    15c8:	0009883a 	mov	r4,zero
    15cc:	01415504 	movi	r5,1364
    15d0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0002);//e
    15d4:	0009883a 	mov	r4,zero
    15d8:	01400084 	movi	r5,2
    15dc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
    15e0:	0009883a 	mov	r4,zero
    15e4:	0140a404 	movi	r5,656
    15e8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    15ec:	0009883a 	mov	r4,zero
    15f0:	01401044 	movi	r5,65
    15f4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    15f8:	0009883a 	mov	r4,zero
    15fc:	014004c4 	movi	r5,19
    1600:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
    1604:	0009883a 	mov	r4,zero
    1608:	01414e04 	movi	r5,1336
    160c:	00002c80 	call	2c8 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //538
    1610:	0009883a 	mov	r4,zero
    1614:	000b883a 	mov	r5,zero
    1618:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
    161c:	0009883a 	mov	r4,zero
    1620:	000b883a 	mov	r5,zero
    1624:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0210);//c
    1628:	0009883a 	mov	r4,zero
    162c:	01408404 	movi	r5,528
    1630:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//e
    1634:	0009883a 	mov	r4,zero
    1638:	01401044 	movi	r5,65
    163c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
    1640:	0009883a 	mov	r4,zero
    1644:	014004c4 	movi	r5,19
    1648:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
    164c:	0009883a 	mov	r4,zero
    1650:	000b883a 	mov	r5,zero
    1654:	00002c80 	call	2c8 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    1658:	01006c04 	movi	r4,432
    165c:	01414004 	movi	r5,1280
    1660:	000111c0 	call	111c <UsbWrite>
}
    1664:	e037883a 	mov	sp,fp
    1668:	dfc00117 	ldw	ra,4(sp)
    166c:	df000017 	ldw	fp,0(sp)
    1670:	dec00204 	addi	sp,sp,8
    1674:	f800283a 	ret

00001678 <UsbGetConfigDesc1>:


void UsbGetConfigDesc1()
{
    1678:	defffe04 	addi	sp,sp,-8
    167c:	dfc00115 	stw	ra,4(sp)
    1680:	df000015 	stw	fp,0(sp)
    1684:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    1688:	01000084 	movi	r4,2
    168c:	01414004 	movi	r5,1280
    1690:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x050C);
    1694:	0009883a 	mov	r4,zero
    1698:	01414304 	movi	r5,1292
    169c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    16a0:	0009883a 	mov	r4,zero
    16a4:	01400204 	movi	r5,8
    16a8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    16ac:	0009883a 	mov	r4,zero
    16b0:	0140b404 	movi	r5,720
    16b4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);
    16b8:	0009883a 	mov	r4,zero
    16bc:	01400044 	movi	r5,1
    16c0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    16c4:	0009883a 	mov	r4,zero
    16c8:	014004c4 	movi	r5,19
    16cc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0514);
    16d0:	0009883a 	mov	r4,zero
    16d4:	01414504 	movi	r5,1300
    16d8:	00002c80 	call	2c8 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
    16dc:	0009883a 	mov	r4,zero
    16e0:	0141a004 	movi	r5,1664
    16e4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
    16e8:	0009883a 	mov	r4,zero
    16ec:	01408004 	movi	r5,512
    16f0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    16f4:	0009883a 	mov	r4,zero
    16f8:	000b883a 	mov	r5,zero
    16fc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0009);//2
    1700:	0009883a 	mov	r4,zero
    1704:	01400244 	movi	r5,9
    1708:	00002c80 	call	2c8 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
    170c:	0009883a 	mov	r4,zero
    1710:	01415104 	movi	r5,1348
    1714:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    1718:	0009883a 	mov	r4,zero
    171c:	01400204 	movi	r5,8
    1720:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    1724:	0009883a 	mov	r4,zero
    1728:	0140a404 	movi	r5,656
    172c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    1730:	0009883a 	mov	r4,zero
    1734:	01401044 	movi	r5,65
    1738:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    173c:	0009883a 	mov	r4,zero
    1740:	014004c4 	movi	r5,19
    1744:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    1748:	0009883a 	mov	r4,zero
    174c:	01414804 	movi	r5,1312
    1750:	00002c80 	call	2c8 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
    1754:	0009883a 	mov	r4,zero
    1758:	01415304 	movi	r5,1356
    175c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);//2
    1760:	0009883a 	mov	r4,zero
    1764:	01400044 	movi	r5,1
    1768:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    176c:	0009883a 	mov	r4,zero
    1770:	0140a404 	movi	r5,656
    1774:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
    1778:	0009883a 	mov	r4,zero
    177c:	01400044 	movi	r5,1
    1780:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    1784:	0009883a 	mov	r4,zero
    1788:	014004c4 	movi	r5,19
    178c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
    1790:	0009883a 	mov	r4,zero
    1794:	01414b04 	movi	r5,1324
    1798:	00002c80 	call	2c8 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
    179c:	0009883a 	mov	r4,zero
    17a0:	000b883a 	mov	r5,zero
    17a4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
    17a8:	0009883a 	mov	r4,zero
    17ac:	000b883a 	mov	r5,zero
    17b0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
    17b4:	0009883a 	mov	r4,zero
    17b8:	01408404 	movi	r5,528
    17bc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    17c0:	0009883a 	mov	r4,zero
    17c4:	01401044 	movi	r5,65
    17c8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    17cc:	0009883a 	mov	r4,zero
    17d0:	014004c4 	movi	r5,19
    17d4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
    17d8:	0009883a 	mov	r4,zero
    17dc:	000b883a 	mov	r5,zero
    17e0:	00002c80 	call	2c8 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    17e4:	01006c04 	movi	r4,432
    17e8:	01414004 	movi	r5,1280
    17ec:	000111c0 	call	111c <UsbWrite>
}
    17f0:	e037883a 	mov	sp,fp
    17f4:	dfc00117 	ldw	ra,4(sp)
    17f8:	df000017 	ldw	fp,0(sp)
    17fc:	dec00204 	addi	sp,sp,8
    1800:	f800283a 	ret

00001804 <UsbGetConfigDesc2>:


void UsbGetConfigDesc2()
{
    1804:	defffe04 	addi	sp,sp,-8
    1808:	dfc00115 	stw	ra,4(sp)
    180c:	df000015 	stw	fp,0(sp)
    1810:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    1814:	01000084 	movi	r4,2
    1818:	01414004 	movi	r5,1280
    181c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x050C);
    1820:	0009883a 	mov	r4,zero
    1824:	01414304 	movi	r5,1292
    1828:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    182c:	0009883a 	mov	r4,zero
    1830:	01400204 	movi	r5,8
    1834:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    1838:	0009883a 	mov	r4,zero
    183c:	0140b404 	movi	r5,720
    1840:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);
    1844:	0009883a 	mov	r4,zero
    1848:	01400044 	movi	r5,1
    184c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    1850:	0009883a 	mov	r4,zero
    1854:	014004c4 	movi	r5,19
    1858:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0514);
    185c:	0009883a 	mov	r4,zero
    1860:	01414504 	movi	r5,1300
    1864:	00002c80 	call	2c8 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
    1868:	0009883a 	mov	r4,zero
    186c:	0141a004 	movi	r5,1664
    1870:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
    1874:	0009883a 	mov	r4,zero
    1878:	01408004 	movi	r5,512
    187c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    1880:	0009883a 	mov	r4,zero
    1884:	000b883a 	mov	r5,zero
    1888:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x00FF);//2
    188c:	0009883a 	mov	r4,zero
    1890:	01403fc4 	movi	r5,255
    1894:	00002c80 	call	2c8 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x055c); //514
    1898:	0009883a 	mov	r4,zero
    189c:	01415704 	movi	r5,1372
    18a0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    18a4:	0009883a 	mov	r4,zero
    18a8:	01400204 	movi	r5,8
    18ac:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    18b0:	0009883a 	mov	r4,zero
    18b4:	0140a404 	movi	r5,656
    18b8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    18bc:	0009883a 	mov	r4,zero
    18c0:	01401044 	movi	r5,65
    18c4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    18c8:	0009883a 	mov	r4,zero
    18cc:	014004c4 	movi	r5,19
    18d0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    18d4:	0009883a 	mov	r4,zero
    18d8:	01414804 	movi	r5,1312
    18dc:	00002c80 	call	2c8 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0564); //520
    18e0:	0009883a 	mov	r4,zero
    18e4:	01415904 	movi	r5,1380
    18e8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
    18ec:	0009883a 	mov	r4,zero
    18f0:	01400204 	movi	r5,8
    18f4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    18f8:	0009883a 	mov	r4,zero
    18fc:	0140a404 	movi	r5,656
    1900:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
    1904:	0009883a 	mov	r4,zero
    1908:	01400044 	movi	r5,1
    190c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    1910:	0009883a 	mov	r4,zero
    1914:	014004c4 	movi	r5,19
    1918:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
    191c:	0009883a 	mov	r4,zero
    1920:	01414b04 	movi	r5,1324
    1924:	00002c80 	call	2c8 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x056c); //52c
    1928:	0009883a 	mov	r4,zero
    192c:	01415b04 	movi	r5,1388
    1930:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
    1934:	0009883a 	mov	r4,zero
    1938:	01400204 	movi	r5,8
    193c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
    1940:	0009883a 	mov	r4,zero
    1944:	0140a404 	movi	r5,656
    1948:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    194c:	0009883a 	mov	r4,zero
    1950:	01401044 	movi	r5,65
    1954:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    1958:	0009883a 	mov	r4,zero
    195c:	014004c4 	movi	r5,19
    1960:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
    1964:	0009883a 	mov	r4,zero
    1968:	01414e04 	movi	r5,1336
    196c:	00002c80 	call	2c8 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0574); //538
    1970:	0009883a 	mov	r4,zero
    1974:	01415d04 	movi	r5,1396
    1978:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
    197c:	0009883a 	mov	r4,zero
    1980:	01400204 	movi	r5,8
    1984:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
    1988:	0009883a 	mov	r4,zero
    198c:	0140a404 	movi	r5,656
    1990:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
    1994:	0009883a 	mov	r4,zero
    1998:	01400044 	movi	r5,1
    199c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
    19a0:	0009883a 	mov	r4,zero
    19a4:	014004c4 	movi	r5,19
    19a8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
    19ac:	0009883a 	mov	r4,zero
    19b0:	01415104 	movi	r5,1348
    19b4:	00002c80 	call	2c8 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x057c); //544
    19b8:	0009883a 	mov	r4,zero
    19bc:	01415f04 	movi	r5,1404
    19c0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0002);//6
    19c4:	0009883a 	mov	r4,zero
    19c8:	01400084 	movi	r5,2
    19cc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    19d0:	0009883a 	mov	r4,zero
    19d4:	0140a404 	movi	r5,656
    19d8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
    19dc:	0009883a 	mov	r4,zero
    19e0:	01401044 	movi	r5,65
    19e4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    19e8:	0009883a 	mov	r4,zero
    19ec:	014004c4 	movi	r5,19
    19f0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
    19f4:	0009883a 	mov	r4,zero
    19f8:	01415404 	movi	r5,1360
    19fc:	00002c80 	call	2c8 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //550
    1a00:	0009883a 	mov	r4,zero
    1a04:	000b883a 	mov	r5,zero
    1a08:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
    1a0c:	0009883a 	mov	r4,zero
    1a10:	000b883a 	mov	r5,zero
    1a14:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0210);//4
    1a18:	0009883a 	mov	r4,zero
    1a1c:	01408404 	movi	r5,528
    1a20:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//6
    1a24:	0009883a 	mov	r4,zero
    1a28:	01401044 	movi	r5,65
    1a2c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    1a30:	0009883a 	mov	r4,zero
    1a34:	014004c4 	movi	r5,19
    1a38:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
    1a3c:	0009883a 	mov	r4,zero
    1a40:	000b883a 	mov	r5,zero
    1a44:	00002c80 	call	2c8 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    1a48:	01006c04 	movi	r4,432
    1a4c:	01414004 	movi	r5,1280
    1a50:	000111c0 	call	111c <UsbWrite>
}
    1a54:	e037883a 	mov	sp,fp
    1a58:	dfc00117 	ldw	ra,4(sp)
    1a5c:	df000017 	ldw	fp,0(sp)
    1a60:	dec00204 	addi	sp,sp,8
    1a64:	f800283a 	ret

00001a68 <UsbSetConfig>:

void UsbSetConfig()
{
    1a68:	defffe04 	addi	sp,sp,-8
    1a6c:	dfc00115 	stw	ra,4(sp)
    1a70:	df000015 	stw	fp,0(sp)
    1a74:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    1a78:	01000084 	movi	r4,2
    1a7c:	01414004 	movi	r5,1280
    1a80:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x050C);
    1a84:	0009883a 	mov	r4,zero
    1a88:	01414304 	movi	r5,1292
    1a8c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    1a90:	0009883a 	mov	r4,zero
    1a94:	01400204 	movi	r5,8
    1a98:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
    1a9c:	0009883a 	mov	r4,zero
    1aa0:	0140b404 	movi	r5,720
    1aa4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);
    1aa8:	0009883a 	mov	r4,zero
    1aac:	01400044 	movi	r5,1
    1ab0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    1ab4:	0009883a 	mov	r4,zero
    1ab8:	014004c4 	movi	r5,19
    1abc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0514);
    1ac0:	0009883a 	mov	r4,zero
    1ac4:	01414504 	movi	r5,1300
    1ac8:	00002c80 	call	2c8 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0900);
    1acc:	0009883a 	mov	r4,zero
    1ad0:	01424004 	movi	r5,2304
    1ad4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);//device address
    1ad8:	0009883a 	mov	r4,zero
    1adc:	01400044 	movi	r5,1
    1ae0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    1ae4:	0009883a 	mov	r4,zero
    1ae8:	000b883a 	mov	r5,zero
    1aec:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    1af0:	0009883a 	mov	r4,zero
    1af4:	000b883a 	mov	r5,zero
    1af8:	00002c80 	call	2c8 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
    1afc:	0009883a 	mov	r4,zero
    1b00:	000b883a 	mov	r5,zero
    1b04:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
    1b08:	0009883a 	mov	r4,zero
    1b0c:	000b883a 	mov	r5,zero
    1b10:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
    1b14:	0009883a 	mov	r4,zero
    1b18:	0140a404 	movi	r5,656
    1b1c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
    1b20:	0009883a 	mov	r4,zero
    1b24:	01401044 	movi	r5,65
    1b28:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    1b2c:	0009883a 	mov	r4,zero
    1b30:	014004c4 	movi	r5,19
    1b34:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    1b38:	0009883a 	mov	r4,zero
    1b3c:	000b883a 	mov	r5,zero
    1b40:	00002c80 	call	2c8 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    1b44:	01006c04 	movi	r4,432
    1b48:	01414004 	movi	r5,1280
    1b4c:	000111c0 	call	111c <UsbWrite>

}
    1b50:	e037883a 	mov	sp,fp
    1b54:	dfc00117 	ldw	ra,4(sp)
    1b58:	df000017 	ldw	fp,0(sp)
    1b5c:	dec00204 	addi	sp,sp,8
    1b60:	f800283a 	ret

00001b64 <UsbClassRequest>:

void UsbClassRequest()
{
    1b64:	defffe04 	addi	sp,sp,-8
    1b68:	dfc00115 	stw	ra,4(sp)
    1b6c:	df000015 	stw	fp,0(sp)
    1b70:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    1b74:	01000084 	movi	r4,2
    1b78:	01414004 	movi	r5,1280
    1b7c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x050C);
    1b80:	0009883a 	mov	r4,zero
    1b84:	01414304 	movi	r5,1292
    1b88:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    1b8c:	0009883a 	mov	r4,zero
    1b90:	01400204 	movi	r5,8
    1b94:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
    1b98:	0009883a 	mov	r4,zero
    1b9c:	0140b404 	movi	r5,720
    1ba0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);
    1ba4:	0009883a 	mov	r4,zero
    1ba8:	01400044 	movi	r5,1
    1bac:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    1bb0:	0009883a 	mov	r4,zero
    1bb4:	014004c4 	movi	r5,19
    1bb8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0514);
    1bbc:	0009883a 	mov	r4,zero
    1bc0:	01414504 	movi	r5,1300
    1bc4:	00002c80 	call	2c8 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0A21);
    1bc8:	0009883a 	mov	r4,zero
    1bcc:	01428844 	movi	r5,2593
    1bd0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//device address
    1bd4:	0009883a 	mov	r4,zero
    1bd8:	000b883a 	mov	r5,zero
    1bdc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    1be0:	0009883a 	mov	r4,zero
    1be4:	000b883a 	mov	r5,zero
    1be8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    1bec:	0009883a 	mov	r4,zero
    1bf0:	000b883a 	mov	r5,zero
    1bf4:	00002c80 	call	2c8 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
    1bf8:	0009883a 	mov	r4,zero
    1bfc:	000b883a 	mov	r5,zero
    1c00:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number /data length
    1c04:	0009883a 	mov	r4,zero
    1c08:	000b883a 	mov	r5,zero
    1c0c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
    1c10:	0009883a 	mov	r4,zero
    1c14:	0140a404 	movi	r5,656
    1c18:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
    1c1c:	0009883a 	mov	r4,zero
    1c20:	01401044 	movi	r5,65
    1c24:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    1c28:	0009883a 	mov	r4,zero
    1c2c:	014004c4 	movi	r5,19
    1c30:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    1c34:	0009883a 	mov	r4,zero
    1c38:	000b883a 	mov	r5,zero
    1c3c:	00002c80 	call	2c8 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    1c40:	01006c04 	movi	r4,432
    1c44:	01414004 	movi	r5,1280
    1c48:	000111c0 	call	111c <UsbWrite>
}
    1c4c:	e037883a 	mov	sp,fp
    1c50:	dfc00117 	ldw	ra,4(sp)
    1c54:	df000017 	ldw	fp,0(sp)
    1c58:	dec00204 	addi	sp,sp,8
    1c5c:	f800283a 	ret

00001c60 <UsbGetHidDesc>:


void UsbGetHidDesc()
{
    1c60:	defffe04 	addi	sp,sp,-8
    1c64:	dfc00115 	stw	ra,4(sp)
    1c68:	df000015 	stw	fp,0(sp)
    1c6c:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    1c70:	01000084 	movi	r4,2
    1c74:	01414004 	movi	r5,1280
    1c78:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x050C);
    1c7c:	0009883a 	mov	r4,zero
    1c80:	01414304 	movi	r5,1292
    1c84:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    1c88:	0009883a 	mov	r4,zero
    1c8c:	01400204 	movi	r5,8
    1c90:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
    1c94:	0009883a 	mov	r4,zero
    1c98:	0140b404 	movi	r5,720
    1c9c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);
    1ca0:	0009883a 	mov	r4,zero
    1ca4:	01400044 	movi	r5,1
    1ca8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    1cac:	0009883a 	mov	r4,zero
    1cb0:	014004c4 	movi	r5,19
    1cb4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0514);
    1cb8:	0009883a 	mov	r4,zero
    1cbc:	01414504 	movi	r5,1300
    1cc0:	00002c80 	call	2c8 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
    1cc4:	0009883a 	mov	r4,zero
    1cc8:	0141a044 	movi	r5,1665
    1ccc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x2100);//e //HID 0x21
    1cd0:	0009883a 	mov	r4,zero
    1cd4:	01484004 	movi	r5,8448
    1cd8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    1cdc:	0009883a 	mov	r4,zero
    1ce0:	000b883a 	mov	r5,zero
    1ce4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
    1ce8:	0009883a 	mov	r4,zero
    1cec:	01401ec4 	movi	r5,123
    1cf0:	00002c80 	call	2c8 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
    1cf4:	0009883a 	mov	r4,zero
    1cf8:	01415104 	movi	r5,1348
    1cfc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    1d00:	0009883a 	mov	r4,zero
    1d04:	01400204 	movi	r5,8
    1d08:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    1d0c:	0009883a 	mov	r4,zero
    1d10:	0140a404 	movi	r5,656
    1d14:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    1d18:	0009883a 	mov	r4,zero
    1d1c:	01401044 	movi	r5,65
    1d20:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    1d24:	0009883a 	mov	r4,zero
    1d28:	014004c4 	movi	r5,19
    1d2c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    1d30:	0009883a 	mov	r4,zero
    1d34:	01414804 	movi	r5,1312
    1d38:	00002c80 	call	2c8 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
    1d3c:	0009883a 	mov	r4,zero
    1d40:	000b883a 	mov	r5,zero
    1d44:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
    1d48:	0009883a 	mov	r4,zero
    1d4c:	000b883a 	mov	r5,zero
    1d50:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
    1d54:	0009883a 	mov	r4,zero
    1d58:	01408404 	movi	r5,528
    1d5c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    1d60:	0009883a 	mov	r4,zero
    1d64:	01401044 	movi	r5,65
    1d68:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    1d6c:	0009883a 	mov	r4,zero
    1d70:	014004c4 	movi	r5,19
    1d74:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
    1d78:	0009883a 	mov	r4,zero
    1d7c:	000b883a 	mov	r5,zero
    1d80:	00002c80 	call	2c8 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    1d84:	01006c04 	movi	r4,432
    1d88:	01414004 	movi	r5,1280
    1d8c:	000111c0 	call	111c <UsbWrite>

}
    1d90:	e037883a 	mov	sp,fp
    1d94:	dfc00117 	ldw	ra,4(sp)
    1d98:	df000017 	ldw	fp,0(sp)
    1d9c:	dec00204 	addi	sp,sp,8
    1da0:	f800283a 	ret

00001da4 <UsbGetReportDesc>:


void UsbGetReportDesc()
{
    1da4:	defffe04 	addi	sp,sp,-8
    1da8:	dfc00115 	stw	ra,4(sp)
    1dac:	df000015 	stw	fp,0(sp)
    1db0:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    1db4:	01000084 	movi	r4,2
    1db8:	01414004 	movi	r5,1280
    1dbc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x050C);
    1dc0:	0009883a 	mov	r4,zero
    1dc4:	01414304 	movi	r5,1292
    1dc8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    1dcc:	0009883a 	mov	r4,zero
    1dd0:	01400204 	movi	r5,8
    1dd4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    1dd8:	0009883a 	mov	r4,zero
    1ddc:	0140b404 	movi	r5,720
    1de0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);
    1de4:	0009883a 	mov	r4,zero
    1de8:	01400044 	movi	r5,1
    1dec:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    1df0:	0009883a 	mov	r4,zero
    1df4:	014004c4 	movi	r5,19
    1df8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0514);
    1dfc:	0009883a 	mov	r4,zero
    1e00:	01414504 	movi	r5,1300
    1e04:	00002c80 	call	2c8 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
    1e08:	0009883a 	mov	r4,zero
    1e0c:	0141a044 	movi	r5,1665
    1e10:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x2200);//e //report 0x22
    1e14:	0009883a 	mov	r4,zero
    1e18:	01488004 	movi	r5,8704
    1e1c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    1e20:	0009883a 	mov	r4,zero
    1e24:	000b883a 	mov	r5,zero
    1e28:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
    1e2c:	0009883a 	mov	r4,zero
    1e30:	01401ec4 	movi	r5,123
    1e34:	00002c80 	call	2c8 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0580); //514
    1e38:	0009883a 	mov	r4,zero
    1e3c:	01416004 	movi	r5,1408
    1e40:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    1e44:	0009883a 	mov	r4,zero
    1e48:	01400204 	movi	r5,8
    1e4c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    1e50:	0009883a 	mov	r4,zero
    1e54:	0140a404 	movi	r5,656
    1e58:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    1e5c:	0009883a 	mov	r4,zero
    1e60:	01401044 	movi	r5,65
    1e64:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    1e68:	0009883a 	mov	r4,zero
    1e6c:	014004c4 	movi	r5,19
    1e70:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    1e74:	0009883a 	mov	r4,zero
    1e78:	01414804 	movi	r5,1312
    1e7c:	00002c80 	call	2c8 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0588); //520
    1e80:	0009883a 	mov	r4,zero
    1e84:	01416204 	movi	r5,1416
    1e88:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
    1e8c:	0009883a 	mov	r4,zero
    1e90:	01400204 	movi	r5,8
    1e94:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    1e98:	0009883a 	mov	r4,zero
    1e9c:	0140a404 	movi	r5,656
    1ea0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
    1ea4:	0009883a 	mov	r4,zero
    1ea8:	01400044 	movi	r5,1
    1eac:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    1eb0:	0009883a 	mov	r4,zero
    1eb4:	014004c4 	movi	r5,19
    1eb8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
    1ebc:	0009883a 	mov	r4,zero
    1ec0:	01414b04 	movi	r5,1324
    1ec4:	00002c80 	call	2c8 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0590); //52c
    1ec8:	0009883a 	mov	r4,zero
    1ecc:	01416404 	movi	r5,1424
    1ed0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
    1ed4:	0009883a 	mov	r4,zero
    1ed8:	01400204 	movi	r5,8
    1edc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
    1ee0:	0009883a 	mov	r4,zero
    1ee4:	0140a404 	movi	r5,656
    1ee8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    1eec:	0009883a 	mov	r4,zero
    1ef0:	01401044 	movi	r5,65
    1ef4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    1ef8:	0009883a 	mov	r4,zero
    1efc:	014004c4 	movi	r5,19
    1f00:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
    1f04:	0009883a 	mov	r4,zero
    1f08:	01414e04 	movi	r5,1336
    1f0c:	00002c80 	call	2c8 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0598); //538
    1f10:	0009883a 	mov	r4,zero
    1f14:	01416604 	movi	r5,1432
    1f18:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
    1f1c:	0009883a 	mov	r4,zero
    1f20:	01400204 	movi	r5,8
    1f24:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
    1f28:	0009883a 	mov	r4,zero
    1f2c:	0140a404 	movi	r5,656
    1f30:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
    1f34:	0009883a 	mov	r4,zero
    1f38:	01400044 	movi	r5,1
    1f3c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
    1f40:	0009883a 	mov	r4,zero
    1f44:	014004c4 	movi	r5,19
    1f48:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
    1f4c:	0009883a 	mov	r4,zero
    1f50:	01415104 	movi	r5,1348
    1f54:	00002c80 	call	2c8 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x05a0); //544
    1f58:	0009883a 	mov	r4,zero
    1f5c:	01416804 	movi	r5,1440
    1f60:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    1f64:	0009883a 	mov	r4,zero
    1f68:	01400204 	movi	r5,8
    1f6c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    1f70:	0009883a 	mov	r4,zero
    1f74:	0140a404 	movi	r5,656
    1f78:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
    1f7c:	0009883a 	mov	r4,zero
    1f80:	01401044 	movi	r5,65
    1f84:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    1f88:	0009883a 	mov	r4,zero
    1f8c:	014004c4 	movi	r5,19
    1f90:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
    1f94:	0009883a 	mov	r4,zero
    1f98:	01415404 	movi	r5,1360
    1f9c:	00002c80 	call	2c8 <IO_write>

	//data phase IN-6
	IO_write(HPI_DATA,0x05a8); //550
    1fa0:	0009883a 	mov	r4,zero
    1fa4:	01416a04 	movi	r5,1448
    1fa8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
    1fac:	0009883a 	mov	r4,zero
    1fb0:	01400204 	movi	r5,8
    1fb4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    1fb8:	0009883a 	mov	r4,zero
    1fbc:	0140a404 	movi	r5,656
    1fc0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
    1fc4:	0009883a 	mov	r4,zero
    1fc8:	01400044 	movi	r5,1
    1fcc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    1fd0:	0009883a 	mov	r4,zero
    1fd4:	014004c4 	movi	r5,19
    1fd8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x055c);//a
    1fdc:	0009883a 	mov	r4,zero
    1fe0:	01415704 	movi	r5,1372
    1fe4:	00002c80 	call	2c8 <IO_write>

	//data phase IN-7
	IO_write(HPI_DATA,0x05b0); //c
    1fe8:	0009883a 	mov	r4,zero
    1fec:	01416c04 	movi	r5,1456
    1ff0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
    1ff4:	0009883a 	mov	r4,zero
    1ff8:	01400204 	movi	r5,8
    1ffc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//560
    2000:	0009883a 	mov	r4,zero
    2004:	0140a404 	movi	r5,656
    2008:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//2 //data1
    200c:	0009883a 	mov	r4,zero
    2010:	01401044 	movi	r5,65
    2014:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    2018:	0009883a 	mov	r4,zero
    201c:	014004c4 	movi	r5,19
    2020:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0568);//6
    2024:	0009883a 	mov	r4,zero
    2028:	01415a04 	movi	r5,1384
    202c:	00002c80 	call	2c8 <IO_write>

	//data phase IN-8
	IO_write(HPI_DATA,0x05b8); //8
    2030:	0009883a 	mov	r4,zero
    2034:	01416e04 	movi	r5,1464
    2038:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0003);//a
    203c:	0009883a 	mov	r4,zero
    2040:	014000c4 	movi	r5,3
    2044:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
    2048:	0009883a 	mov	r4,zero
    204c:	0140a404 	movi	r5,656
    2050:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
    2054:	0009883a 	mov	r4,zero
    2058:	01400044 	movi	r5,1
    205c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//570
    2060:	0009883a 	mov	r4,zero
    2064:	014004c4 	movi	r5,19
    2068:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0574);//2
    206c:	0009883a 	mov	r4,zero
    2070:	01415d04 	movi	r5,1396
    2074:	00002c80 	call	2c8 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //574
    2078:	0009883a 	mov	r4,zero
    207c:	000b883a 	mov	r5,zero
    2080:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
    2084:	0009883a 	mov	r4,zero
    2088:	000b883a 	mov	r5,zero
    208c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0210);//8
    2090:	0009883a 	mov	r4,zero
    2094:	01408404 	movi	r5,528
    2098:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    209c:	0009883a 	mov	r4,zero
    20a0:	01401044 	movi	r5,65
    20a4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    20a8:	0009883a 	mov	r4,zero
    20ac:	014004c4 	movi	r5,19
    20b0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
    20b4:	0009883a 	mov	r4,zero
    20b8:	000b883a 	mov	r5,zero
    20bc:	00002c80 	call	2c8 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    20c0:	01006c04 	movi	r4,432
    20c4:	01414004 	movi	r5,1280
    20c8:	000111c0 	call	111c <UsbWrite>

}
    20cc:	e037883a 	mov	sp,fp
    20d0:	dfc00117 	ldw	ra,4(sp)
    20d4:	df000017 	ldw	fp,0(sp)
    20d8:	dec00204 	addi	sp,sp,8
    20dc:	f800283a 	ret

000020e0 <UsbWaitTDListDone>:


alt_u16 UsbWaitTDListDone()
{
    20e0:	defffd04 	addi	sp,sp,-12
    20e4:	dfc00215 	stw	ra,8(sp)
    20e8:	df000115 	stw	fp,4(sp)
    20ec:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
    20f0:	01005104 	movi	r4,324
    20f4:	00011700 	call	1170 <UsbRead>
    20f8:	e0bfff0d 	sth	r2,-4(fp)
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
    20fc:	01005104 	movi	r4,324
    2100:	000b883a 	mov	r5,zero
    2104:	000111c0 	call	111c <UsbWrite>
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
    2108:	00000d06 	br	2140 <UsbWaitTDListDone+0x60>
	{
		if(usb_ctl_val == 0x0000)
    210c:	e0bfff0b 	ldhu	r2,-4(fp)
    2110:	10000526 	beq	r2,zero,2128 <UsbWaitTDListDone+0x48>
		{
		}
		else
		{
			printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
    2114:	e0bfff0b 	ldhu	r2,-4(fp)
    2118:	01000074 	movhi	r4,1
    211c:	2106de04 	addi	r4,r4,7032
    2120:	100b883a 	mov	r5,r2
    2124:	000228c0 	call	228c <printf>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    2128:	01005104 	movi	r4,324
    212c:	00011700 	call	1170 <UsbRead>
    2130:	e0bfff0d 	sth	r2,-4(fp)
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
    2134:	01005104 	movi	r4,324
    2138:	000b883a 	mov	r5,zero
    213c:	000111c0 	call	111c <UsbWrite>
{
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
    2140:	e0bfff0b 	ldhu	r2,-4(fp)
    2144:	10840018 	cmpnei	r2,r2,4096
    2148:	103ff01e 	bne	r2,zero,210c <__alt_data_end+0xfffac9dc>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
	}

	return usb_ctl_val;
    214c:	e0bfff0b 	ldhu	r2,-4(fp)
}
    2150:	e037883a 	mov	sp,fp
    2154:	dfc00117 	ldw	ra,4(sp)
    2158:	df000017 	ldw	fp,0(sp)
    215c:	dec00204 	addi	sp,sp,8
    2160:	f800283a 	ret

00002164 <UsbGetRetryCnt>:


alt_u16 UsbGetRetryCnt()
{
    2164:	defffd04 	addi	sp,sp,-12
    2168:	dfc00215 	stw	ra,8(sp)
    216c:	df000115 	stw	fp,4(sp)
    2170:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	IO_read(HPI_STATUS);
    2174:	010000c4 	movi	r4,3
    2178:	00003300 	call	330 <IO_read>
	if(UsbRead(HPI_SIE1_MSG_ADR) == HUSB_TDListDone)
    217c:	01005104 	movi	r4,324
    2180:	00011700 	call	1170 <UsbRead>
    2184:	10bfffcc 	andi	r2,r2,65535
    2188:	10840018 	cmpnei	r2,r2,4096
    218c:	1000091e 	bne	r2,zero,21b4 <UsbGetRetryCnt+0x50>
	{
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
    2190:	01005104 	movi	r4,324
    2194:	000b883a 	mov	r5,zero
    2198:	000111c0 	call	111c <UsbWrite>

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    219c:	0001883a 	nop
    21a0:	010000c4 	movi	r4,3
    21a4:	00003300 	call	330 <IO_read>
    21a8:	10bfffcc 	andi	r2,r2,65535
    21ac:	1080040c 	andi	r2,r2,16
    21b0:	103ffb26 	beq	r2,zero,21a0 <__alt_data_end+0xfffaca70>
		{
		}
	}
	//usleep(1000);
	IO_write(HPI_ADDR,0x0508);
    21b4:	01000084 	movi	r4,2
    21b8:	01414204 	movi	r5,1288
    21bc:	00002c80 	call	2c8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
    21c0:	0009883a 	mov	r4,zero
    21c4:	00003300 	call	330 <IO_read>
    21c8:	e0bfff0d 	sth	r2,-4(fp)

	return usb_ctl_val;
    21cc:	e0bfff0b 	ldhu	r2,-4(fp)
}
    21d0:	e037883a 	mov	sp,fp
    21d4:	dfc00117 	ldw	ra,4(sp)
    21d8:	df000017 	ldw	fp,0(sp)
    21dc:	dec00204 	addi	sp,sp,8
    21e0:	f800283a 	ret

000021e4 <UsbPrintMem>:


void UsbPrintMem()
{
    21e4:	defffc04 	addi	sp,sp,-16
    21e8:	dfc00315 	stw	ra,12(sp)
    21ec:	df000215 	stw	fp,8(sp)
    21f0:	df000204 	addi	fp,sp,8
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
    21f4:	01000084 	movi	r4,2
    21f8:	01414004 	movi	r5,1280
    21fc:	00002c80 	call	2c8 <IO_write>
	for (i = 0; i <= 200; i += 2)
    2200:	e03ffe15 	stw	zero,-8(fp)
    2204:	00000e06 	br	2240 <UsbPrintMem+0x5c>
	{
		code = IO_read(HPI_DATA);
    2208:	0009883a 	mov	r4,zero
    220c:	00003300 	call	330 <IO_read>
    2210:	10bfffcc 	andi	r2,r2,65535
    2214:	e0bfff15 	stw	r2,-4(fp)
		printf("\naddr %x = %04x\n", 0x0500+i, code);
    2218:	e0bffe17 	ldw	r2,-8(fp)
    221c:	10814004 	addi	r2,r2,1280
    2220:	01000074 	movhi	r4,1
    2224:	2106e604 	addi	r4,r4,7064
    2228:	100b883a 	mov	r5,r2
    222c:	e1bfff17 	ldw	r6,-4(fp)
    2230:	000228c0 	call	228c <printf>

void UsbPrintMem()
{
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
	for (i = 0; i <= 200; i += 2)
    2234:	e0bffe17 	ldw	r2,-8(fp)
    2238:	10800084 	addi	r2,r2,2
    223c:	e0bffe15 	stw	r2,-8(fp)
    2240:	e0bffe17 	ldw	r2,-8(fp)
    2244:	10803250 	cmplti	r2,r2,201
    2248:	103fef1e 	bne	r2,zero,2208 <__alt_data_end+0xfffacad8>
	{
		code = IO_read(HPI_DATA);
		printf("\naddr %x = %04x\n", 0x0500+i, code);
	}
}
    224c:	e037883a 	mov	sp,fp
    2250:	dfc00117 	ldw	ra,4(sp)
    2254:	df000017 	ldw	fp,0(sp)
    2258:	dec00204 	addi	sp,sp,8
    225c:	f800283a 	ret

00002260 <_printf_r>:
    2260:	defffd04 	addi	sp,sp,-12
    2264:	dfc00015 	stw	ra,0(sp)
    2268:	d9800115 	stw	r6,4(sp)
    226c:	d9c00215 	stw	r7,8(sp)
    2270:	280d883a 	mov	r6,r5
    2274:	21400217 	ldw	r5,8(r4)
    2278:	d9c00104 	addi	r7,sp,4
    227c:	000242c0 	call	242c <___vfprintf_internal_r>
    2280:	dfc00017 	ldw	ra,0(sp)
    2284:	dec00304 	addi	sp,sp,12
    2288:	f800283a 	ret

0000228c <printf>:
    228c:	defffc04 	addi	sp,sp,-16
    2290:	dfc00015 	stw	ra,0(sp)
    2294:	d9400115 	stw	r5,4(sp)
    2298:	d9800215 	stw	r6,8(sp)
    229c:	d9c00315 	stw	r7,12(sp)
    22a0:	00800074 	movhi	r2,1
    22a4:	108e5704 	addi	r2,r2,14684
    22a8:	10800017 	ldw	r2,0(r2)
    22ac:	200b883a 	mov	r5,r4
    22b0:	d9800104 	addi	r6,sp,4
    22b4:	11000217 	ldw	r4,8(r2)
    22b8:	00045280 	call	4528 <__vfprintf_internal>
    22bc:	dfc00017 	ldw	ra,0(sp)
    22c0:	dec00404 	addi	sp,sp,16
    22c4:	f800283a 	ret

000022c8 <_puts_r>:
    22c8:	defff604 	addi	sp,sp,-40
    22cc:	dc000715 	stw	r16,28(sp)
    22d0:	2021883a 	mov	r16,r4
    22d4:	2809883a 	mov	r4,r5
    22d8:	dc400815 	stw	r17,32(sp)
    22dc:	dfc00915 	stw	ra,36(sp)
    22e0:	2823883a 	mov	r17,r5
    22e4:	00023940 	call	2394 <strlen>
    22e8:	00c00074 	movhi	r3,1
    22ec:	18ce5704 	addi	r3,r3,14684
    22f0:	18c00017 	ldw	r3,0(r3)
    22f4:	11000044 	addi	r4,r2,1
    22f8:	d8800115 	stw	r2,4(sp)
    22fc:	18c00217 	ldw	r3,8(r3)
    2300:	01400074 	movhi	r5,1
    2304:	2946eb04 	addi	r5,r5,7084
    2308:	1880030b 	ldhu	r2,12(r3)
    230c:	d9400215 	stw	r5,8(sp)
    2310:	d9000615 	stw	r4,24(sp)
    2314:	01400044 	movi	r5,1
    2318:	01000084 	movi	r4,2
    231c:	d9000515 	stw	r4,20(sp)
    2320:	dc400015 	stw	r17,0(sp)
    2324:	d9400315 	stw	r5,12(sp)
    2328:	dec00415 	stw	sp,16(sp)
    232c:	1108000c 	andi	r4,r2,8192
    2330:	2000061e 	bne	r4,zero,234c <_puts_r+0x84>
    2334:	19401917 	ldw	r5,100(r3)
    2338:	0137ffc4 	movi	r4,-8193
    233c:	10880014 	ori	r2,r2,8192
    2340:	2908703a 	and	r4,r5,r4
    2344:	1880030d 	sth	r2,12(r3)
    2348:	19001915 	stw	r4,100(r3)
    234c:	81400217 	ldw	r5,8(r16)
    2350:	8009883a 	mov	r4,r16
    2354:	d9800404 	addi	r6,sp,16
    2358:	00069ec0 	call	69ec <__sfvwrite_r>
    235c:	1000061e 	bne	r2,zero,2378 <_puts_r+0xb0>
    2360:	00800284 	movi	r2,10
    2364:	dfc00917 	ldw	ra,36(sp)
    2368:	dc400817 	ldw	r17,32(sp)
    236c:	dc000717 	ldw	r16,28(sp)
    2370:	dec00a04 	addi	sp,sp,40
    2374:	f800283a 	ret
    2378:	00bfffc4 	movi	r2,-1
    237c:	003ff906 	br	2364 <__alt_data_end+0xfffacc34>

00002380 <puts>:
    2380:	00800074 	movhi	r2,1
    2384:	108e5704 	addi	r2,r2,14684
    2388:	200b883a 	mov	r5,r4
    238c:	11000017 	ldw	r4,0(r2)
    2390:	00022c81 	jmpi	22c8 <_puts_r>

00002394 <strlen>:
    2394:	208000cc 	andi	r2,r4,3
    2398:	10002026 	beq	r2,zero,241c <strlen+0x88>
    239c:	20800007 	ldb	r2,0(r4)
    23a0:	10002026 	beq	r2,zero,2424 <strlen+0x90>
    23a4:	2005883a 	mov	r2,r4
    23a8:	00000206 	br	23b4 <strlen+0x20>
    23ac:	10c00007 	ldb	r3,0(r2)
    23b0:	18001826 	beq	r3,zero,2414 <strlen+0x80>
    23b4:	10800044 	addi	r2,r2,1
    23b8:	10c000cc 	andi	r3,r2,3
    23bc:	183ffb1e 	bne	r3,zero,23ac <__alt_data_end+0xfffacc7c>
    23c0:	10c00017 	ldw	r3,0(r2)
    23c4:	01ffbff4 	movhi	r7,65279
    23c8:	39ffbfc4 	addi	r7,r7,-257
    23cc:	00ca303a 	nor	r5,zero,r3
    23d0:	01a02074 	movhi	r6,32897
    23d4:	19c7883a 	add	r3,r3,r7
    23d8:	31a02004 	addi	r6,r6,-32640
    23dc:	1946703a 	and	r3,r3,r5
    23e0:	1986703a 	and	r3,r3,r6
    23e4:	1800091e 	bne	r3,zero,240c <strlen+0x78>
    23e8:	10800104 	addi	r2,r2,4
    23ec:	10c00017 	ldw	r3,0(r2)
    23f0:	19cb883a 	add	r5,r3,r7
    23f4:	00c6303a 	nor	r3,zero,r3
    23f8:	28c6703a 	and	r3,r5,r3
    23fc:	1986703a 	and	r3,r3,r6
    2400:	183ff926 	beq	r3,zero,23e8 <__alt_data_end+0xfffaccb8>
    2404:	00000106 	br	240c <strlen+0x78>
    2408:	10800044 	addi	r2,r2,1
    240c:	10c00007 	ldb	r3,0(r2)
    2410:	183ffd1e 	bne	r3,zero,2408 <__alt_data_end+0xfffaccd8>
    2414:	1105c83a 	sub	r2,r2,r4
    2418:	f800283a 	ret
    241c:	2005883a 	mov	r2,r4
    2420:	003fe706 	br	23c0 <__alt_data_end+0xfffacc90>
    2424:	0005883a 	mov	r2,zero
    2428:	f800283a 	ret

0000242c <___vfprintf_internal_r>:
    242c:	defeb604 	addi	sp,sp,-1320
    2430:	dfc14915 	stw	ra,1316(sp)
    2434:	ddc14715 	stw	r23,1308(sp)
    2438:	dd814615 	stw	r22,1304(sp)
    243c:	202f883a 	mov	r23,r4
    2440:	282d883a 	mov	r22,r5
    2444:	d9812a15 	stw	r6,1192(sp)
    2448:	d9c12d15 	stw	r7,1204(sp)
    244c:	df014815 	stw	fp,1312(sp)
    2450:	dd414515 	stw	r21,1300(sp)
    2454:	dd014415 	stw	r20,1296(sp)
    2458:	dcc14315 	stw	r19,1292(sp)
    245c:	dc814215 	stw	r18,1288(sp)
    2460:	dc414115 	stw	r17,1284(sp)
    2464:	dc014015 	stw	r16,1280(sp)
    2468:	00070ac0 	call	70ac <_localeconv_r>
    246c:	10800017 	ldw	r2,0(r2)
    2470:	1009883a 	mov	r4,r2
    2474:	d8813515 	stw	r2,1236(sp)
    2478:	00023940 	call	2394 <strlen>
    247c:	d8813815 	stw	r2,1248(sp)
    2480:	b8000226 	beq	r23,zero,248c <___vfprintf_internal_r+0x60>
    2484:	b8800e17 	ldw	r2,56(r23)
    2488:	10010526 	beq	r2,zero,28a0 <___vfprintf_internal_r+0x474>
    248c:	b0c0030b 	ldhu	r3,12(r22)
    2490:	1908000c 	andi	r4,r3,8192
    2494:	1805883a 	mov	r2,r3
    2498:	2000071e 	bne	r4,zero,24b8 <___vfprintf_internal_r+0x8c>
    249c:	b1001917 	ldw	r4,100(r22)
    24a0:	18880014 	ori	r2,r3,8192
    24a4:	00f7ffc4 	movi	r3,-8193
    24a8:	20c8703a 	and	r4,r4,r3
    24ac:	b080030d 	sth	r2,12(r22)
    24b0:	1007883a 	mov	r3,r2
    24b4:	b1001915 	stw	r4,100(r22)
    24b8:	1100020c 	andi	r4,r2,8
    24bc:	2000a826 	beq	r4,zero,2760 <___vfprintf_internal_r+0x334>
    24c0:	b1000417 	ldw	r4,16(r22)
    24c4:	2000a626 	beq	r4,zero,2760 <___vfprintf_internal_r+0x334>
    24c8:	1080068c 	andi	r2,r2,26
    24cc:	01000284 	movi	r4,10
    24d0:	1100ac26 	beq	r2,r4,2784 <___vfprintf_internal_r+0x358>
    24d4:	d8c10e04 	addi	r3,sp,1080
    24d8:	d9010dc4 	addi	r4,sp,1079
    24dc:	d9400404 	addi	r5,sp,16
    24e0:	05000074 	movhi	r20,1
    24e4:	1905c83a 	sub	r2,r3,r4
    24e8:	a506fc84 	addi	r20,r20,7154
    24ec:	d8c12815 	stw	r3,1184(sp)
    24f0:	d9012915 	stw	r4,1188(sp)
    24f4:	d9411e15 	stw	r5,1144(sp)
    24f8:	d8012015 	stw	zero,1152(sp)
    24fc:	d8011f15 	stw	zero,1148(sp)
    2500:	d8013315 	stw	zero,1228(sp)
    2504:	d8013715 	stw	zero,1244(sp)
    2508:	d8013915 	stw	zero,1252(sp)
    250c:	d8013b15 	stw	zero,1260(sp)
    2510:	d8013a15 	stw	zero,1256(sp)
    2514:	d8012f15 	stw	zero,1212(sp)
    2518:	2811883a 	mov	r8,r5
    251c:	d8813c15 	stw	r2,1264(sp)
    2520:	d8c12a17 	ldw	r3,1192(sp)
    2524:	18800007 	ldb	r2,0(r3)
    2528:	10021326 	beq	r2,zero,2d78 <___vfprintf_internal_r+0x94c>
    252c:	00c00944 	movi	r3,37
    2530:	dc012a17 	ldw	r16,1192(sp)
    2534:	10c0021e 	bne	r2,r3,2540 <___vfprintf_internal_r+0x114>
    2538:	00001606 	br	2594 <___vfprintf_internal_r+0x168>
    253c:	10c08526 	beq	r2,r3,2754 <___vfprintf_internal_r+0x328>
    2540:	84000044 	addi	r16,r16,1
    2544:	80800007 	ldb	r2,0(r16)
    2548:	103ffc1e 	bne	r2,zero,253c <__alt_data_end+0xffface0c>
    254c:	d9012a17 	ldw	r4,1192(sp)
    2550:	8123c83a 	sub	r17,r16,r4
    2554:	88000f26 	beq	r17,zero,2594 <___vfprintf_internal_r+0x168>
    2558:	d8812a17 	ldw	r2,1192(sp)
    255c:	d8c12017 	ldw	r3,1152(sp)
    2560:	44400115 	stw	r17,4(r8)
    2564:	40800015 	stw	r2,0(r8)
    2568:	d8811f17 	ldw	r2,1148(sp)
    256c:	1c47883a 	add	r3,r3,r17
    2570:	d8c12015 	stw	r3,1152(sp)
    2574:	10800044 	addi	r2,r2,1
    2578:	d8811f15 	stw	r2,1148(sp)
    257c:	00c001c4 	movi	r3,7
    2580:	1880b516 	blt	r3,r2,2858 <___vfprintf_internal_r+0x42c>
    2584:	42000204 	addi	r8,r8,8
    2588:	d8c12f17 	ldw	r3,1212(sp)
    258c:	1c47883a 	add	r3,r3,r17
    2590:	d8c12f15 	stw	r3,1212(sp)
    2594:	80800007 	ldb	r2,0(r16)
    2598:	1000b626 	beq	r2,zero,2874 <___vfprintf_internal_r+0x448>
    259c:	80800044 	addi	r2,r16,1
    25a0:	84000047 	ldb	r16,1(r16)
    25a4:	0027883a 	mov	r19,zero
    25a8:	0039883a 	mov	fp,zero
    25ac:	dcc12b05 	stb	r19,1196(sp)
    25b0:	d8012785 	stb	zero,1182(sp)
    25b4:	027fffc4 	movi	r9,-1
    25b8:	d8012e15 	stw	zero,1208(sp)
    25bc:	04401604 	movi	r17,88
    25c0:	04800244 	movi	r18,9
    25c4:	da012a15 	stw	r8,1192(sp)
    25c8:	e027883a 	mov	r19,fp
    25cc:	17000044 	addi	fp,r2,1
    25d0:	80bff804 	addi	r2,r16,-32
    25d4:	88831236 	bltu	r17,r2,3220 <___vfprintf_internal_r+0xdf4>
    25d8:	100490ba 	slli	r2,r2,2
    25dc:	01000034 	movhi	r4,0
    25e0:	21097c04 	addi	r4,r4,9712
    25e4:	1105883a 	add	r2,r2,r4
    25e8:	10800017 	ldw	r2,0(r2)
    25ec:	1000683a 	jmp	r2
    25f0:	0000313c 	xorhi	zero,zero,196
    25f4:	00003220 	cmpeqi	zero,zero,200
    25f8:	00003220 	cmpeqi	zero,zero,200
    25fc:	00003158 	cmpnei	zero,zero,197
    2600:	00003220 	cmpeqi	zero,zero,200
    2604:	00003220 	cmpeqi	zero,zero,200
    2608:	00003220 	cmpeqi	zero,zero,200
    260c:	00003220 	cmpeqi	zero,zero,200
    2610:	00003220 	cmpeqi	zero,zero,200
    2614:	00003220 	cmpeqi	zero,zero,200
    2618:	00003168 	cmpgeui	zero,zero,197
    261c:	00003190 	cmplti	zero,zero,198
    2620:	00003220 	cmpeqi	zero,zero,200
    2624:	000028ac 	andhi	zero,zero,162
    2628:	000028bc 	xorhi	zero,zero,162
    262c:	00003220 	cmpeqi	zero,zero,200
    2630:	0000290c 	andi	zero,zero,164
    2634:	0000291c 	xori	zero,zero,164
    2638:	0000291c 	xori	zero,zero,164
    263c:	0000291c 	xori	zero,zero,164
    2640:	0000291c 	xori	zero,zero,164
    2644:	0000291c 	xori	zero,zero,164
    2648:	0000291c 	xori	zero,zero,164
    264c:	0000291c 	xori	zero,zero,164
    2650:	0000291c 	xori	zero,zero,164
    2654:	0000291c 	xori	zero,zero,164
    2658:	00003220 	cmpeqi	zero,zero,200
    265c:	00003220 	cmpeqi	zero,zero,200
    2660:	00003220 	cmpeqi	zero,zero,200
    2664:	00003220 	cmpeqi	zero,zero,200
    2668:	00003220 	cmpeqi	zero,zero,200
    266c:	00003220 	cmpeqi	zero,zero,200
    2670:	00003220 	cmpeqi	zero,zero,200
    2674:	00003220 	cmpeqi	zero,zero,200
    2678:	00003220 	cmpeqi	zero,zero,200
    267c:	00003220 	cmpeqi	zero,zero,200
    2680:	00002960 	cmpeqi	zero,zero,165
    2684:	00002d80 	call	2d8 <IO_write+0x10>
    2688:	00003220 	cmpeqi	zero,zero,200
    268c:	00002d80 	call	2d8 <IO_write+0x10>
    2690:	00003220 	cmpeqi	zero,zero,200
    2694:	00003220 	cmpeqi	zero,zero,200
    2698:	00003220 	cmpeqi	zero,zero,200
    269c:	00003220 	cmpeqi	zero,zero,200
    26a0:	00002e28 	cmpgeui	zero,zero,184
    26a4:	00003220 	cmpeqi	zero,zero,200
    26a8:	00003220 	cmpeqi	zero,zero,200
    26ac:	00002e38 	rdprs	zero,zero,184
    26b0:	00003220 	cmpeqi	zero,zero,200
    26b4:	00003220 	cmpeqi	zero,zero,200
    26b8:	00003220 	cmpeqi	zero,zero,200
    26bc:	00003220 	cmpeqi	zero,zero,200
    26c0:	00003220 	cmpeqi	zero,zero,200
    26c4:	00002e7c 	xorhi	zero,zero,185
    26c8:	00003220 	cmpeqi	zero,zero,200
    26cc:	00003220 	cmpeqi	zero,zero,200
    26d0:	00002eb4 	movhi	zero,186
    26d4:	00003220 	cmpeqi	zero,zero,200
    26d8:	00003220 	cmpeqi	zero,zero,200
    26dc:	00003220 	cmpeqi	zero,zero,200
    26e0:	00003220 	cmpeqi	zero,zero,200
    26e4:	00003220 	cmpeqi	zero,zero,200
    26e8:	00003220 	cmpeqi	zero,zero,200
    26ec:	00003220 	cmpeqi	zero,zero,200
    26f0:	00003220 	cmpeqi	zero,zero,200
    26f4:	00003220 	cmpeqi	zero,zero,200
    26f8:	00003220 	cmpeqi	zero,zero,200
    26fc:	000030f0 	cmpltui	zero,zero,195
    2700:	0000309c 	xori	zero,zero,194
    2704:	00002d80 	call	2d8 <IO_write+0x10>
    2708:	00002d80 	call	2d8 <IO_write+0x10>
    270c:	00002d80 	call	2d8 <IO_write+0x10>
    2710:	000030e0 	cmpeqi	zero,zero,195
    2714:	0000309c 	xori	zero,zero,194
    2718:	00003220 	cmpeqi	zero,zero,200
    271c:	00003220 	cmpeqi	zero,zero,200
    2720:	00002fb8 	rdprs	zero,zero,190
    2724:	00003220 	cmpeqi	zero,zero,200
    2728:	00002fd0 	cmplti	zero,zero,191
    272c:	00003010 	cmplti	zero,zero,192
    2730:	00003050 	cmplti	zero,zero,193
    2734:	00002f1c 	xori	zero,zero,188
    2738:	00003220 	cmpeqi	zero,zero,200
    273c:	000031a4 	muli	zero,zero,198
    2740:	00003220 	cmpeqi	zero,zero,200
    2744:	00002f2c 	andhi	zero,zero,188
    2748:	00003220 	cmpeqi	zero,zero,200
    274c:	00003220 	cmpeqi	zero,zero,200
    2750:	00002f6c 	andhi	zero,zero,189
    2754:	d9412a17 	ldw	r5,1192(sp)
    2758:	8163c83a 	sub	r17,r16,r5
    275c:	003f7d06 	br	2554 <__alt_data_end+0xffface24>
    2760:	b809883a 	mov	r4,r23
    2764:	b00b883a 	mov	r5,r22
    2768:	000454c0 	call	454c <__swsetup_r>
    276c:	10002d1e 	bne	r2,zero,2824 <___vfprintf_internal_r+0x3f8>
    2770:	b0c0030b 	ldhu	r3,12(r22)
    2774:	01000284 	movi	r4,10
    2778:	1805883a 	mov	r2,r3
    277c:	1080068c 	andi	r2,r2,26
    2780:	113f541e 	bne	r2,r4,24d4 <__alt_data_end+0xfffacda4>
    2784:	b080038b 	ldhu	r2,14(r22)
    2788:	113fffcc 	andi	r4,r2,65535
    278c:	2120001c 	xori	r4,r4,32768
    2790:	21200004 	addi	r4,r4,-32768
    2794:	203f4f16 	blt	r4,zero,24d4 <__alt_data_end+0xfffacda4>
    2798:	b2c01917 	ldw	r11,100(r22)
    279c:	b2800717 	ldw	r10,28(r22)
    27a0:	b2400917 	ldw	r9,36(r22)
    27a4:	d9812a17 	ldw	r6,1192(sp)
    27a8:	d9c12d17 	ldw	r7,1204(sp)
    27ac:	02010004 	movi	r8,1024
    27b0:	18ffff4c 	andi	r3,r3,65533
    27b4:	d881078d 	sth	r2,1054(sp)
    27b8:	b809883a 	mov	r4,r23
    27bc:	d8800404 	addi	r2,sp,16
    27c0:	d9410404 	addi	r5,sp,1040
    27c4:	d8c1070d 	sth	r3,1052(sp)
    27c8:	dac11d15 	stw	r11,1140(sp)
    27cc:	da810b15 	stw	r10,1068(sp)
    27d0:	da410d15 	stw	r9,1076(sp)
    27d4:	d8810415 	stw	r2,1040(sp)
    27d8:	d8810815 	stw	r2,1056(sp)
    27dc:	da010615 	stw	r8,1048(sp)
    27e0:	da010915 	stw	r8,1060(sp)
    27e4:	d8010a15 	stw	zero,1064(sp)
    27e8:	000242c0 	call	242c <___vfprintf_internal_r>
    27ec:	1021883a 	mov	r16,r2
    27f0:	10000416 	blt	r2,zero,2804 <___vfprintf_internal_r+0x3d8>
    27f4:	b809883a 	mov	r4,r23
    27f8:	d9410404 	addi	r5,sp,1040
    27fc:	0005fcc0 	call	5fcc <_fflush_r>
    2800:	1007301e 	bne	r2,zero,44c4 <___vfprintf_internal_r+0x2098>
    2804:	d881070b 	ldhu	r2,1052(sp)
    2808:	1080100c 	andi	r2,r2,64
    280c:	10000326 	beq	r2,zero,281c <___vfprintf_internal_r+0x3f0>
    2810:	b080030b 	ldhu	r2,12(r22)
    2814:	10801014 	ori	r2,r2,64
    2818:	b080030d 	sth	r2,12(r22)
    281c:	8005883a 	mov	r2,r16
    2820:	00000106 	br	2828 <___vfprintf_internal_r+0x3fc>
    2824:	00bfffc4 	movi	r2,-1
    2828:	dfc14917 	ldw	ra,1316(sp)
    282c:	df014817 	ldw	fp,1312(sp)
    2830:	ddc14717 	ldw	r23,1308(sp)
    2834:	dd814617 	ldw	r22,1304(sp)
    2838:	dd414517 	ldw	r21,1300(sp)
    283c:	dd014417 	ldw	r20,1296(sp)
    2840:	dcc14317 	ldw	r19,1292(sp)
    2844:	dc814217 	ldw	r18,1288(sp)
    2848:	dc414117 	ldw	r17,1284(sp)
    284c:	dc014017 	ldw	r16,1280(sp)
    2850:	dec14a04 	addi	sp,sp,1320
    2854:	f800283a 	ret
    2858:	b809883a 	mov	r4,r23
    285c:	b00b883a 	mov	r5,r22
    2860:	d9811e04 	addi	r6,sp,1144
    2864:	000986c0 	call	986c <__sprint_r>
    2868:	1000081e 	bne	r2,zero,288c <___vfprintf_internal_r+0x460>
    286c:	da000404 	addi	r8,sp,16
    2870:	003f4506 	br	2588 <__alt_data_end+0xffface58>
    2874:	d8812017 	ldw	r2,1152(sp)
    2878:	10000426 	beq	r2,zero,288c <___vfprintf_internal_r+0x460>
    287c:	b809883a 	mov	r4,r23
    2880:	b00b883a 	mov	r5,r22
    2884:	d9811e04 	addi	r6,sp,1144
    2888:	000986c0 	call	986c <__sprint_r>
    288c:	b080030b 	ldhu	r2,12(r22)
    2890:	1080100c 	andi	r2,r2,64
    2894:	103fe31e 	bne	r2,zero,2824 <__alt_data_end+0xfffad0f4>
    2898:	d8812f17 	ldw	r2,1212(sp)
    289c:	003fe206 	br	2828 <__alt_data_end+0xfffad0f8>
    28a0:	b809883a 	mov	r4,r23
    28a4:	00065880 	call	6588 <__sinit>
    28a8:	003ef806 	br	248c <__alt_data_end+0xfffacd5c>
    28ac:	e005883a 	mov	r2,fp
    28b0:	9cc00114 	ori	r19,r19,4
    28b4:	e4000007 	ldb	r16,0(fp)
    28b8:	003f4406 	br	25cc <__alt_data_end+0xffface9c>
    28bc:	e4000007 	ldb	r16,0(fp)
    28c0:	01000a84 	movi	r4,42
    28c4:	e0800044 	addi	r2,fp,1
    28c8:	8106f626 	beq	r16,r4,44a4 <___vfprintf_internal_r+0x2078>
    28cc:	857ff404 	addi	r21,r16,-48
    28d0:	1039883a 	mov	fp,r2
    28d4:	0013883a 	mov	r9,zero
    28d8:	957f3d36 	bltu	r18,r21,25d0 <__alt_data_end+0xfffacea0>
    28dc:	0009883a 	mov	r4,zero
    28e0:	01400284 	movi	r5,10
    28e4:	000c3a00 	call	c3a0 <__mulsi3>
    28e8:	e4000007 	ldb	r16,0(fp)
    28ec:	a889883a 	add	r4,r21,r2
    28f0:	e7000044 	addi	fp,fp,1
    28f4:	857ff404 	addi	r21,r16,-48
    28f8:	957ff92e 	bgeu	r18,r21,28e0 <__alt_data_end+0xfffad1b0>
    28fc:	2013883a 	mov	r9,r4
    2900:	203f330e 	bge	r4,zero,25d0 <__alt_data_end+0xfffacea0>
    2904:	027fffc4 	movi	r9,-1
    2908:	003f3106 	br	25d0 <__alt_data_end+0xfffacea0>
    290c:	9cc02014 	ori	r19,r19,128
    2910:	e005883a 	mov	r2,fp
    2914:	e4000007 	ldb	r16,0(fp)
    2918:	003f2c06 	br	25cc <__alt_data_end+0xffface9c>
    291c:	857ff404 	addi	r21,r16,-48
    2920:	d8012e15 	stw	zero,1208(sp)
    2924:	e021883a 	mov	r16,fp
    2928:	0009883a 	mov	r4,zero
    292c:	da412c15 	stw	r9,1200(sp)
    2930:	01400284 	movi	r5,10
    2934:	000c3a00 	call	c3a0 <__mulsi3>
    2938:	81400007 	ldb	r5,0(r16)
    293c:	1549883a 	add	r4,r2,r21
    2940:	e7000044 	addi	fp,fp,1
    2944:	2d7ff404 	addi	r21,r5,-48
    2948:	e021883a 	mov	r16,fp
    294c:	957ff82e 	bgeu	r18,r21,2930 <__alt_data_end+0xfffad200>
    2950:	2821883a 	mov	r16,r5
    2954:	d9012e15 	stw	r4,1208(sp)
    2958:	da412c17 	ldw	r9,1200(sp)
    295c:	003f1c06 	br	25d0 <__alt_data_end+0xfffacea0>
    2960:	da012a17 	ldw	r8,1192(sp)
    2964:	df012a15 	stw	fp,1192(sp)
    2968:	9839883a 	mov	fp,r19
    296c:	dcc12b03 	ldbu	r19,1196(sp)
    2970:	e7000414 	ori	fp,fp,16
    2974:	e080080c 	andi	r2,fp,32
    2978:	dcc12785 	stb	r19,1182(sp)
    297c:	d8c12d17 	ldw	r3,1204(sp)
    2980:	1001ce26 	beq	r2,zero,30bc <___vfprintf_internal_r+0xc90>
    2984:	d9012d17 	ldw	r4,1204(sp)
    2988:	18800117 	ldw	r2,4(r3)
    298c:	1c800017 	ldw	r18,0(r3)
    2990:	21000204 	addi	r4,r4,8
    2994:	d9012d15 	stw	r4,1204(sp)
    2998:	102b883a 	mov	r21,r2
    299c:	10044916 	blt	r2,zero,3ac4 <___vfprintf_internal_r+0x1698>
    29a0:	dcc12783 	ldbu	r19,1182(sp)
    29a4:	da413215 	stw	r9,1224(sp)
    29a8:	00800044 	movi	r2,1
    29ac:	9546b03a 	or	r3,r18,r21
    29b0:	48000216 	blt	r9,zero,29bc <___vfprintf_internal_r+0x590>
    29b4:	013fdfc4 	movi	r4,-129
    29b8:	e138703a 	and	fp,fp,r4
    29bc:	1802251e 	bne	r3,zero,3254 <___vfprintf_internal_r+0xe28>
    29c0:	48031726 	beq	r9,zero,3620 <___vfprintf_internal_r+0x11f4>
    29c4:	10803fcc 	andi	r2,r2,255
    29c8:	00c00044 	movi	r3,1
    29cc:	10c24526 	beq	r2,r3,32e4 <___vfprintf_internal_r+0xeb8>
    29d0:	00c00084 	movi	r3,2
    29d4:	10c33426 	beq	r2,r3,36a8 <___vfprintf_internal_r+0x127c>
    29d8:	d8c10e04 	addi	r3,sp,1080
    29dc:	9008d0fa 	srli	r4,r18,3
    29e0:	a80a977a 	slli	r5,r21,29
    29e4:	a82ad0fa 	srli	r21,r21,3
    29e8:	948001cc 	andi	r18,r18,7
    29ec:	90800c04 	addi	r2,r18,48
    29f0:	18ffffc4 	addi	r3,r3,-1
    29f4:	2924b03a 	or	r18,r5,r4
    29f8:	18800005 	stb	r2,0(r3)
    29fc:	9548b03a 	or	r4,r18,r21
    2a00:	203ff61e 	bne	r4,zero,29dc <__alt_data_end+0xfffad2ac>
    2a04:	e100004c 	andi	r4,fp,1
    2a08:	d8c13115 	stw	r3,1220(sp)
    2a0c:	20039a1e 	bne	r4,zero,3878 <___vfprintf_internal_r+0x144c>
    2a10:	d8812817 	ldw	r2,1184(sp)
    2a14:	10e3c83a 	sub	r17,r2,r3
    2a18:	8805883a 	mov	r2,r17
    2a1c:	8a40010e 	bge	r17,r9,2a24 <___vfprintf_internal_r+0x5f8>
    2a20:	4805883a 	mov	r2,r9
    2a24:	d8812b15 	stw	r2,1196(sp)
    2a28:	d8013415 	stw	zero,1232(sp)
    2a2c:	98803fcc 	andi	r2,r19,255
    2a30:	1080201c 	xori	r2,r2,128
    2a34:	10bfe004 	addi	r2,r2,-128
    2a38:	10000326 	beq	r2,zero,2a48 <___vfprintf_internal_r+0x61c>
    2a3c:	d8c12b17 	ldw	r3,1196(sp)
    2a40:	18c00044 	addi	r3,r3,1
    2a44:	d8c12b15 	stw	r3,1196(sp)
    2a48:	e0c0008c 	andi	r3,fp,2
    2a4c:	d8c12c15 	stw	r3,1200(sp)
    2a50:	18000326 	beq	r3,zero,2a60 <___vfprintf_internal_r+0x634>
    2a54:	d8c12b17 	ldw	r3,1196(sp)
    2a58:	18c00084 	addi	r3,r3,2
    2a5c:	d8c12b15 	stw	r3,1196(sp)
    2a60:	e0c0210c 	andi	r3,fp,132
    2a64:	d8c13015 	stw	r3,1216(sp)
    2a68:	1801f81e 	bne	r3,zero,324c <___vfprintf_internal_r+0xe20>
    2a6c:	d9012e17 	ldw	r4,1208(sp)
    2a70:	d8c12b17 	ldw	r3,1196(sp)
    2a74:	20ebc83a 	sub	r21,r4,r3
    2a78:	0541f40e 	bge	zero,r21,324c <___vfprintf_internal_r+0xe20>
    2a7c:	02400404 	movi	r9,16
    2a80:	d8c12017 	ldw	r3,1152(sp)
    2a84:	d8811f17 	ldw	r2,1148(sp)
    2a88:	4d45750e 	bge	r9,r21,4060 <___vfprintf_internal_r+0x1c34>
    2a8c:	01400074 	movhi	r5,1
    2a90:	29470084 	addi	r5,r5,7170
    2a94:	d9413615 	stw	r5,1240(sp)
    2a98:	4827883a 	mov	r19,r9
    2a9c:	048001c4 	movi	r18,7
    2aa0:	00000306 	br	2ab0 <___vfprintf_internal_r+0x684>
    2aa4:	ad7ffc04 	addi	r21,r21,-16
    2aa8:	42000204 	addi	r8,r8,8
    2aac:	9d40130e 	bge	r19,r21,2afc <___vfprintf_internal_r+0x6d0>
    2ab0:	01000074 	movhi	r4,1
    2ab4:	18c00404 	addi	r3,r3,16
    2ab8:	10800044 	addi	r2,r2,1
    2abc:	21070084 	addi	r4,r4,7170
    2ac0:	41000015 	stw	r4,0(r8)
    2ac4:	44c00115 	stw	r19,4(r8)
    2ac8:	d8c12015 	stw	r3,1152(sp)
    2acc:	d8811f15 	stw	r2,1148(sp)
    2ad0:	90bff40e 	bge	r18,r2,2aa4 <__alt_data_end+0xfffad374>
    2ad4:	b809883a 	mov	r4,r23
    2ad8:	b00b883a 	mov	r5,r22
    2adc:	d9811e04 	addi	r6,sp,1144
    2ae0:	000986c0 	call	986c <__sprint_r>
    2ae4:	103f691e 	bne	r2,zero,288c <__alt_data_end+0xfffad15c>
    2ae8:	ad7ffc04 	addi	r21,r21,-16
    2aec:	d8c12017 	ldw	r3,1152(sp)
    2af0:	d8811f17 	ldw	r2,1148(sp)
    2af4:	da000404 	addi	r8,sp,16
    2af8:	9d7fed16 	blt	r19,r21,2ab0 <__alt_data_end+0xfffad380>
    2afc:	d9413617 	ldw	r5,1240(sp)
    2b00:	a8c7883a 	add	r3,r21,r3
    2b04:	10800044 	addi	r2,r2,1
    2b08:	41400015 	stw	r5,0(r8)
    2b0c:	45400115 	stw	r21,4(r8)
    2b10:	d8c12015 	stw	r3,1152(sp)
    2b14:	d8811f15 	stw	r2,1148(sp)
    2b18:	010001c4 	movi	r4,7
    2b1c:	20832b16 	blt	r4,r2,37cc <___vfprintf_internal_r+0x13a0>
    2b20:	d8812787 	ldb	r2,1182(sp)
    2b24:	42000204 	addi	r8,r8,8
    2b28:	10000c26 	beq	r2,zero,2b5c <___vfprintf_internal_r+0x730>
    2b2c:	d8811f17 	ldw	r2,1148(sp)
    2b30:	d9012784 	addi	r4,sp,1182
    2b34:	18c00044 	addi	r3,r3,1
    2b38:	10800044 	addi	r2,r2,1
    2b3c:	41000015 	stw	r4,0(r8)
    2b40:	01000044 	movi	r4,1
    2b44:	41000115 	stw	r4,4(r8)
    2b48:	d8c12015 	stw	r3,1152(sp)
    2b4c:	d8811f15 	stw	r2,1148(sp)
    2b50:	010001c4 	movi	r4,7
    2b54:	2082c416 	blt	r4,r2,3668 <___vfprintf_internal_r+0x123c>
    2b58:	42000204 	addi	r8,r8,8
    2b5c:	d8812c17 	ldw	r2,1200(sp)
    2b60:	10000c26 	beq	r2,zero,2b94 <___vfprintf_internal_r+0x768>
    2b64:	d8811f17 	ldw	r2,1148(sp)
    2b68:	d9012704 	addi	r4,sp,1180
    2b6c:	18c00084 	addi	r3,r3,2
    2b70:	10800044 	addi	r2,r2,1
    2b74:	41000015 	stw	r4,0(r8)
    2b78:	01000084 	movi	r4,2
    2b7c:	41000115 	stw	r4,4(r8)
    2b80:	d8c12015 	stw	r3,1152(sp)
    2b84:	d8811f15 	stw	r2,1148(sp)
    2b88:	010001c4 	movi	r4,7
    2b8c:	2082be16 	blt	r4,r2,3688 <___vfprintf_internal_r+0x125c>
    2b90:	42000204 	addi	r8,r8,8
    2b94:	d9013017 	ldw	r4,1216(sp)
    2b98:	00802004 	movi	r2,128
    2b9c:	20822026 	beq	r4,r2,3420 <___vfprintf_internal_r+0xff4>
    2ba0:	d9413217 	ldw	r5,1224(sp)
    2ba4:	2c67c83a 	sub	r19,r5,r17
    2ba8:	04c0260e 	bge	zero,r19,2c44 <___vfprintf_internal_r+0x818>
    2bac:	05400404 	movi	r21,16
    2bb0:	d8811f17 	ldw	r2,1148(sp)
    2bb4:	acc4720e 	bge	r21,r19,3d80 <___vfprintf_internal_r+0x1954>
    2bb8:	01400074 	movhi	r5,1
    2bbc:	2946fc84 	addi	r5,r5,7154
    2bc0:	d9412c15 	stw	r5,1200(sp)
    2bc4:	048001c4 	movi	r18,7
    2bc8:	00000306 	br	2bd8 <___vfprintf_internal_r+0x7ac>
    2bcc:	9cfffc04 	addi	r19,r19,-16
    2bd0:	42000204 	addi	r8,r8,8
    2bd4:	acc0110e 	bge	r21,r19,2c1c <___vfprintf_internal_r+0x7f0>
    2bd8:	18c00404 	addi	r3,r3,16
    2bdc:	10800044 	addi	r2,r2,1
    2be0:	45000015 	stw	r20,0(r8)
    2be4:	45400115 	stw	r21,4(r8)
    2be8:	d8c12015 	stw	r3,1152(sp)
    2bec:	d8811f15 	stw	r2,1148(sp)
    2bf0:	90bff60e 	bge	r18,r2,2bcc <__alt_data_end+0xfffad49c>
    2bf4:	b809883a 	mov	r4,r23
    2bf8:	b00b883a 	mov	r5,r22
    2bfc:	d9811e04 	addi	r6,sp,1144
    2c00:	000986c0 	call	986c <__sprint_r>
    2c04:	103f211e 	bne	r2,zero,288c <__alt_data_end+0xfffad15c>
    2c08:	9cfffc04 	addi	r19,r19,-16
    2c0c:	d8c12017 	ldw	r3,1152(sp)
    2c10:	d8811f17 	ldw	r2,1148(sp)
    2c14:	da000404 	addi	r8,sp,16
    2c18:	acffef16 	blt	r21,r19,2bd8 <__alt_data_end+0xfffad4a8>
    2c1c:	d9012c17 	ldw	r4,1200(sp)
    2c20:	1cc7883a 	add	r3,r3,r19
    2c24:	10800044 	addi	r2,r2,1
    2c28:	41000015 	stw	r4,0(r8)
    2c2c:	44c00115 	stw	r19,4(r8)
    2c30:	d8c12015 	stw	r3,1152(sp)
    2c34:	d8811f15 	stw	r2,1148(sp)
    2c38:	010001c4 	movi	r4,7
    2c3c:	20828216 	blt	r4,r2,3648 <___vfprintf_internal_r+0x121c>
    2c40:	42000204 	addi	r8,r8,8
    2c44:	e080400c 	andi	r2,fp,256
    2c48:	1001ac1e 	bne	r2,zero,32fc <___vfprintf_internal_r+0xed0>
    2c4c:	d8811f17 	ldw	r2,1148(sp)
    2c50:	d9413117 	ldw	r5,1220(sp)
    2c54:	1c47883a 	add	r3,r3,r17
    2c58:	10800044 	addi	r2,r2,1
    2c5c:	41400015 	stw	r5,0(r8)
    2c60:	44400115 	stw	r17,4(r8)
    2c64:	d8c12015 	stw	r3,1152(sp)
    2c68:	d8811f15 	stw	r2,1148(sp)
    2c6c:	010001c4 	movi	r4,7
    2c70:	20825d16 	blt	r4,r2,35e8 <___vfprintf_internal_r+0x11bc>
    2c74:	42000204 	addi	r8,r8,8
    2c78:	e080010c 	andi	r2,fp,4
    2c7c:	10003126 	beq	r2,zero,2d44 <___vfprintf_internal_r+0x918>
    2c80:	d8812e17 	ldw	r2,1208(sp)
    2c84:	d9012b17 	ldw	r4,1196(sp)
    2c88:	1121c83a 	sub	r16,r2,r4
    2c8c:	04002d0e 	bge	zero,r16,2d44 <___vfprintf_internal_r+0x918>
    2c90:	04400404 	movi	r17,16
    2c94:	d8811f17 	ldw	r2,1148(sp)
    2c98:	8c05340e 	bge	r17,r16,416c <___vfprintf_internal_r+0x1d40>
    2c9c:	01000074 	movhi	r4,1
    2ca0:	21070084 	addi	r4,r4,7170
    2ca4:	d9013615 	stw	r4,1240(sp)
    2ca8:	048001c4 	movi	r18,7
    2cac:	00000306 	br	2cbc <___vfprintf_internal_r+0x890>
    2cb0:	843ffc04 	addi	r16,r16,-16
    2cb4:	42000204 	addi	r8,r8,8
    2cb8:	8c00130e 	bge	r17,r16,2d08 <___vfprintf_internal_r+0x8dc>
    2cbc:	01400074 	movhi	r5,1
    2cc0:	18c00404 	addi	r3,r3,16
    2cc4:	10800044 	addi	r2,r2,1
    2cc8:	29470084 	addi	r5,r5,7170
    2ccc:	41400015 	stw	r5,0(r8)
    2cd0:	44400115 	stw	r17,4(r8)
    2cd4:	d8c12015 	stw	r3,1152(sp)
    2cd8:	d8811f15 	stw	r2,1148(sp)
    2cdc:	90bff40e 	bge	r18,r2,2cb0 <__alt_data_end+0xfffad580>
    2ce0:	b809883a 	mov	r4,r23
    2ce4:	b00b883a 	mov	r5,r22
    2ce8:	d9811e04 	addi	r6,sp,1144
    2cec:	000986c0 	call	986c <__sprint_r>
    2cf0:	103ee61e 	bne	r2,zero,288c <__alt_data_end+0xfffad15c>
    2cf4:	843ffc04 	addi	r16,r16,-16
    2cf8:	d8c12017 	ldw	r3,1152(sp)
    2cfc:	d8811f17 	ldw	r2,1148(sp)
    2d00:	da000404 	addi	r8,sp,16
    2d04:	8c3fed16 	blt	r17,r16,2cbc <__alt_data_end+0xfffad58c>
    2d08:	d9013617 	ldw	r4,1240(sp)
    2d0c:	1c07883a 	add	r3,r3,r16
    2d10:	10800044 	addi	r2,r2,1
    2d14:	41000015 	stw	r4,0(r8)
    2d18:	44000115 	stw	r16,4(r8)
    2d1c:	d8c12015 	stw	r3,1152(sp)
    2d20:	d8811f15 	stw	r2,1148(sp)
    2d24:	010001c4 	movi	r4,7
    2d28:	2080060e 	bge	r4,r2,2d44 <___vfprintf_internal_r+0x918>
    2d2c:	b809883a 	mov	r4,r23
    2d30:	b00b883a 	mov	r5,r22
    2d34:	d9811e04 	addi	r6,sp,1144
    2d38:	000986c0 	call	986c <__sprint_r>
    2d3c:	103ed31e 	bne	r2,zero,288c <__alt_data_end+0xfffad15c>
    2d40:	d8c12017 	ldw	r3,1152(sp)
    2d44:	df012b17 	ldw	fp,1196(sp)
    2d48:	d9412e17 	ldw	r5,1208(sp)
    2d4c:	e140010e 	bge	fp,r5,2d54 <___vfprintf_internal_r+0x928>
    2d50:	2839883a 	mov	fp,r5
    2d54:	d8812f17 	ldw	r2,1212(sp)
    2d58:	1705883a 	add	r2,r2,fp
    2d5c:	d8812f15 	stw	r2,1212(sp)
    2d60:	1802291e 	bne	r3,zero,3608 <___vfprintf_internal_r+0x11dc>
    2d64:	d8c12a17 	ldw	r3,1192(sp)
    2d68:	d8011f15 	stw	zero,1148(sp)
    2d6c:	da000404 	addi	r8,sp,16
    2d70:	18800007 	ldb	r2,0(r3)
    2d74:	103ded1e 	bne	r2,zero,252c <__alt_data_end+0xfffacdfc>
    2d78:	dc012a17 	ldw	r16,1192(sp)
    2d7c:	003e0506 	br	2594 <__alt_data_end+0xffface64>
    2d80:	d9012d17 	ldw	r4,1204(sp)
    2d84:	d9412d17 	ldw	r5,1204(sp)
    2d88:	da012a17 	ldw	r8,1192(sp)
    2d8c:	21000017 	ldw	r4,0(r4)
    2d90:	29400117 	ldw	r5,4(r5)
    2d94:	df012a15 	stw	fp,1192(sp)
    2d98:	9839883a 	mov	fp,r19
    2d9c:	dcc12b03 	ldbu	r19,1196(sp)
    2da0:	d9013715 	stw	r4,1244(sp)
    2da4:	d9413915 	stw	r5,1252(sp)
    2da8:	da013f15 	stw	r8,1276(sp)
    2dac:	da413e15 	stw	r9,1272(sp)
    2db0:	dcc12785 	stb	r19,1182(sp)
    2db4:	00094c80 	call	94c8 <__fpclassifyd>
    2db8:	d8c12d17 	ldw	r3,1204(sp)
    2dbc:	04400044 	movi	r17,1
    2dc0:	da013f17 	ldw	r8,1276(sp)
    2dc4:	1c800204 	addi	r18,r3,8
    2dc8:	da413e17 	ldw	r9,1272(sp)
    2dcc:	d9013717 	ldw	r4,1244(sp)
    2dd0:	d9413917 	ldw	r5,1252(sp)
    2dd4:	1443451e 	bne	r2,r17,3aec <___vfprintf_internal_r+0x16c0>
    2dd8:	000d883a 	mov	r6,zero
    2ddc:	000f883a 	mov	r7,zero
    2de0:	000d7480 	call	d748 <__ledf2>
    2de4:	da013f17 	ldw	r8,1276(sp)
    2de8:	1004fe16 	blt	r2,zero,41e4 <___vfprintf_internal_r+0x1db8>
    2dec:	dcc12783 	ldbu	r19,1182(sp)
    2df0:	008011c4 	movi	r2,71
    2df4:	14045d0e 	bge	r2,r16,3f6c <___vfprintf_internal_r+0x1b40>
    2df8:	01400074 	movhi	r5,1
    2dfc:	2946ed04 	addi	r5,r5,7092
    2e00:	d9413115 	stw	r5,1220(sp)
    2e04:	00c000c4 	movi	r3,3
    2e08:	00bfdfc4 	movi	r2,-129
    2e0c:	d8c12b15 	stw	r3,1196(sp)
    2e10:	e0b8703a 	and	fp,fp,r2
    2e14:	dc812d15 	stw	r18,1204(sp)
    2e18:	1823883a 	mov	r17,r3
    2e1c:	d8013215 	stw	zero,1224(sp)
    2e20:	d8013415 	stw	zero,1232(sp)
    2e24:	003f0106 	br	2a2c <__alt_data_end+0xfffad2fc>
    2e28:	9cc00214 	ori	r19,r19,8
    2e2c:	e005883a 	mov	r2,fp
    2e30:	e4000007 	ldb	r16,0(fp)
    2e34:	003de506 	br	25cc <__alt_data_end+0xffface9c>
    2e38:	da012a17 	ldw	r8,1192(sp)
    2e3c:	df012a15 	stw	fp,1192(sp)
    2e40:	9f000414 	ori	fp,r19,16
    2e44:	e0c0080c 	andi	r3,fp,32
    2e48:	d8812d17 	ldw	r2,1204(sp)
    2e4c:	18007626 	beq	r3,zero,3028 <___vfprintf_internal_r+0xbfc>
    2e50:	d9412d17 	ldw	r5,1204(sp)
    2e54:	14800017 	ldw	r18,0(r2)
    2e58:	15400117 	ldw	r21,4(r2)
    2e5c:	29400204 	addi	r5,r5,8
    2e60:	d9412d15 	stw	r5,1204(sp)
    2e64:	0005883a 	mov	r2,zero
    2e68:	9546b03a 	or	r3,r18,r21
    2e6c:	d8012785 	stb	zero,1182(sp)
    2e70:	da413215 	stw	r9,1224(sp)
    2e74:	0027883a 	mov	r19,zero
    2e78:	003ecd06 	br	29b0 <__alt_data_end+0xfffad280>
    2e7c:	da012a17 	ldw	r8,1192(sp)
    2e80:	df012a15 	stw	fp,1192(sp)
    2e84:	9f000414 	ori	fp,r19,16
    2e88:	e0c0080c 	andi	r3,fp,32
    2e8c:	d8812d17 	ldw	r2,1204(sp)
    2e90:	18002c26 	beq	r3,zero,2f44 <___vfprintf_internal_r+0xb18>
    2e94:	d9012d17 	ldw	r4,1204(sp)
    2e98:	14800017 	ldw	r18,0(r2)
    2e9c:	15400117 	ldw	r21,4(r2)
    2ea0:	21000204 	addi	r4,r4,8
    2ea4:	d9012d15 	stw	r4,1204(sp)
    2ea8:	00800044 	movi	r2,1
    2eac:	9546b03a 	or	r3,r18,r21
    2eb0:	003fee06 	br	2e6c <__alt_data_end+0xfffad73c>
    2eb4:	da012a17 	ldw	r8,1192(sp)
    2eb8:	df012a15 	stw	fp,1192(sp)
    2ebc:	9839883a 	mov	fp,r19
    2ec0:	dcc12b03 	ldbu	r19,1196(sp)
    2ec4:	01400074 	movhi	r5,1
    2ec8:	2946f004 	addi	r5,r5,7104
    2ecc:	dcc12785 	stb	r19,1182(sp)
    2ed0:	d9413b15 	stw	r5,1260(sp)
    2ed4:	e0c0080c 	andi	r3,fp,32
    2ed8:	d8812d17 	ldw	r2,1204(sp)
    2edc:	18002e26 	beq	r3,zero,2f98 <___vfprintf_internal_r+0xb6c>
    2ee0:	d9412d17 	ldw	r5,1204(sp)
    2ee4:	14800017 	ldw	r18,0(r2)
    2ee8:	15400117 	ldw	r21,4(r2)
    2eec:	29400204 	addi	r5,r5,8
    2ef0:	d9412d15 	stw	r5,1204(sp)
    2ef4:	e080004c 	andi	r2,fp,1
    2ef8:	10025c26 	beq	r2,zero,386c <___vfprintf_internal_r+0x1440>
    2efc:	9546b03a 	or	r3,r18,r21
    2f00:	18038f26 	beq	r3,zero,3d40 <___vfprintf_internal_r+0x1914>
    2f04:	00800c04 	movi	r2,48
    2f08:	d8812705 	stb	r2,1180(sp)
    2f0c:	dc012745 	stb	r16,1181(sp)
    2f10:	e7000094 	ori	fp,fp,2
    2f14:	00800084 	movi	r2,2
    2f18:	003fd406 	br	2e6c <__alt_data_end+0xfffad73c>
    2f1c:	9cc00814 	ori	r19,r19,32
    2f20:	e005883a 	mov	r2,fp
    2f24:	e4000007 	ldb	r16,0(fp)
    2f28:	003da806 	br	25cc <__alt_data_end+0xffface9c>
    2f2c:	da012a17 	ldw	r8,1192(sp)
    2f30:	df012a15 	stw	fp,1192(sp)
    2f34:	9839883a 	mov	fp,r19
    2f38:	e0c0080c 	andi	r3,fp,32
    2f3c:	d8812d17 	ldw	r2,1204(sp)
    2f40:	183fd41e 	bne	r3,zero,2e94 <__alt_data_end+0xfffad764>
    2f44:	e0c0040c 	andi	r3,fp,16
    2f48:	18035f26 	beq	r3,zero,3cc8 <___vfprintf_internal_r+0x189c>
    2f4c:	d9412d17 	ldw	r5,1204(sp)
    2f50:	14800017 	ldw	r18,0(r2)
    2f54:	002b883a 	mov	r21,zero
    2f58:	29400104 	addi	r5,r5,4
    2f5c:	d9412d15 	stw	r5,1204(sp)
    2f60:	00800044 	movi	r2,1
    2f64:	9007883a 	mov	r3,r18
    2f68:	003fc006 	br	2e6c <__alt_data_end+0xfffad73c>
    2f6c:	da012a17 	ldw	r8,1192(sp)
    2f70:	df012a15 	stw	fp,1192(sp)
    2f74:	9839883a 	mov	fp,r19
    2f78:	dcc12b03 	ldbu	r19,1196(sp)
    2f7c:	01000074 	movhi	r4,1
    2f80:	2106f504 	addi	r4,r4,7124
    2f84:	d9013b15 	stw	r4,1260(sp)
    2f88:	dcc12785 	stb	r19,1182(sp)
    2f8c:	e0c0080c 	andi	r3,fp,32
    2f90:	d8812d17 	ldw	r2,1204(sp)
    2f94:	183fd21e 	bne	r3,zero,2ee0 <__alt_data_end+0xfffad7b0>
    2f98:	e0c0040c 	andi	r3,fp,16
    2f9c:	18035426 	beq	r3,zero,3cf0 <___vfprintf_internal_r+0x18c4>
    2fa0:	d8c12d17 	ldw	r3,1204(sp)
    2fa4:	14800017 	ldw	r18,0(r2)
    2fa8:	002b883a 	mov	r21,zero
    2fac:	18c00104 	addi	r3,r3,4
    2fb0:	d8c12d15 	stw	r3,1204(sp)
    2fb4:	003fcf06 	br	2ef4 <__alt_data_end+0xfffad7c4>
    2fb8:	e4000007 	ldb	r16,0(fp)
    2fbc:	00801b04 	movi	r2,108
    2fc0:	8083f726 	beq	r16,r2,3fa0 <___vfprintf_internal_r+0x1b74>
    2fc4:	9cc00414 	ori	r19,r19,16
    2fc8:	e005883a 	mov	r2,fp
    2fcc:	003d7f06 	br	25cc <__alt_data_end+0xffface9c>
    2fd0:	da012a17 	ldw	r8,1192(sp)
    2fd4:	df012a15 	stw	fp,1192(sp)
    2fd8:	9839883a 	mov	fp,r19
    2fdc:	dcc12b03 	ldbu	r19,1196(sp)
    2fe0:	e080080c 	andi	r2,fp,32
    2fe4:	dcc12785 	stb	r19,1182(sp)
    2fe8:	10032226 	beq	r2,zero,3c74 <___vfprintf_internal_r+0x1848>
    2fec:	d9412d17 	ldw	r5,1204(sp)
    2ff0:	d9012f17 	ldw	r4,1212(sp)
    2ff4:	28800017 	ldw	r2,0(r5)
    2ff8:	2007d7fa 	srai	r3,r4,31
    2ffc:	29400104 	addi	r5,r5,4
    3000:	d9412d15 	stw	r5,1204(sp)
    3004:	11000015 	stw	r4,0(r2)
    3008:	10c00115 	stw	r3,4(r2)
    300c:	003d4406 	br	2520 <__alt_data_end+0xfffacdf0>
    3010:	da012a17 	ldw	r8,1192(sp)
    3014:	df012a15 	stw	fp,1192(sp)
    3018:	9839883a 	mov	fp,r19
    301c:	e0c0080c 	andi	r3,fp,32
    3020:	d8812d17 	ldw	r2,1204(sp)
    3024:	183f8a1e 	bne	r3,zero,2e50 <__alt_data_end+0xfffad720>
    3028:	e0c0040c 	andi	r3,fp,16
    302c:	18031c26 	beq	r3,zero,3ca0 <___vfprintf_internal_r+0x1874>
    3030:	14800017 	ldw	r18,0(r2)
    3034:	d8812d17 	ldw	r2,1204(sp)
    3038:	002b883a 	mov	r21,zero
    303c:	9007883a 	mov	r3,r18
    3040:	10800104 	addi	r2,r2,4
    3044:	d8812d15 	stw	r2,1204(sp)
    3048:	0005883a 	mov	r2,zero
    304c:	003f8706 	br	2e6c <__alt_data_end+0xfffad73c>
    3050:	d9412d17 	ldw	r5,1204(sp)
    3054:	00800c04 	movi	r2,48
    3058:	d8812705 	stb	r2,1180(sp)
    305c:	2c800017 	ldw	r18,0(r5)
    3060:	00801e04 	movi	r2,120
    3064:	d8812745 	stb	r2,1181(sp)
    3068:	00800074 	movhi	r2,1
    306c:	1086f504 	addi	r2,r2,7124
    3070:	29400104 	addi	r5,r5,4
    3074:	da012a17 	ldw	r8,1192(sp)
    3078:	d8813b15 	stw	r2,1260(sp)
    307c:	df012a15 	stw	fp,1192(sp)
    3080:	002b883a 	mov	r21,zero
    3084:	9f000094 	ori	fp,r19,2
    3088:	d9412d15 	stw	r5,1204(sp)
    308c:	00800084 	movi	r2,2
    3090:	04001e04 	movi	r16,120
    3094:	9007883a 	mov	r3,r18
    3098:	003f7406 	br	2e6c <__alt_data_end+0xfffad73c>
    309c:	da012a17 	ldw	r8,1192(sp)
    30a0:	df012a15 	stw	fp,1192(sp)
    30a4:	9839883a 	mov	fp,r19
    30a8:	dcc12b03 	ldbu	r19,1196(sp)
    30ac:	e080080c 	andi	r2,fp,32
    30b0:	d8c12d17 	ldw	r3,1204(sp)
    30b4:	dcc12785 	stb	r19,1182(sp)
    30b8:	103e321e 	bne	r2,zero,2984 <__alt_data_end+0xfffad254>
    30bc:	e080040c 	andi	r2,fp,16
    30c0:	10031326 	beq	r2,zero,3d10 <___vfprintf_internal_r+0x18e4>
    30c4:	1c800017 	ldw	r18,0(r3)
    30c8:	d9412d17 	ldw	r5,1204(sp)
    30cc:	902bd7fa 	srai	r21,r18,31
    30d0:	29400104 	addi	r5,r5,4
    30d4:	d9412d15 	stw	r5,1204(sp)
    30d8:	a805883a 	mov	r2,r21
    30dc:	003e2f06 	br	299c <__alt_data_end+0xfffad26c>
    30e0:	9cc01014 	ori	r19,r19,64
    30e4:	e005883a 	mov	r2,fp
    30e8:	e4000007 	ldb	r16,0(fp)
    30ec:	003d3706 	br	25cc <__alt_data_end+0xffface9c>
    30f0:	d8c12d17 	ldw	r3,1204(sp)
    30f4:	d9012d17 	ldw	r4,1204(sp)
    30f8:	da012a17 	ldw	r8,1192(sp)
    30fc:	18800017 	ldw	r2,0(r3)
    3100:	21000104 	addi	r4,r4,4
    3104:	00c00044 	movi	r3,1
    3108:	df012a15 	stw	fp,1192(sp)
    310c:	d8c12b15 	stw	r3,1196(sp)
    3110:	9839883a 	mov	fp,r19
    3114:	d8012785 	stb	zero,1182(sp)
    3118:	d8810405 	stb	r2,1040(sp)
    311c:	d9012d15 	stw	r4,1204(sp)
    3120:	1823883a 	mov	r17,r3
    3124:	d8c10404 	addi	r3,sp,1040
    3128:	d8013215 	stw	zero,1224(sp)
    312c:	d8013415 	stw	zero,1232(sp)
    3130:	d8c13115 	stw	r3,1220(sp)
    3134:	0005883a 	mov	r2,zero
    3138:	003e4306 	br	2a48 <__alt_data_end+0xfffad318>
    313c:	d8812b07 	ldb	r2,1196(sp)
    3140:	1002fc1e 	bne	r2,zero,3d34 <___vfprintf_internal_r+0x1908>
    3144:	00c00804 	movi	r3,32
    3148:	d8c12b05 	stb	r3,1196(sp)
    314c:	e005883a 	mov	r2,fp
    3150:	e4000007 	ldb	r16,0(fp)
    3154:	003d1d06 	br	25cc <__alt_data_end+0xffface9c>
    3158:	9cc00054 	ori	r19,r19,1
    315c:	e005883a 	mov	r2,fp
    3160:	e4000007 	ldb	r16,0(fp)
    3164:	003d1906 	br	25cc <__alt_data_end+0xffface9c>
    3168:	d9012d17 	ldw	r4,1204(sp)
    316c:	d9412d17 	ldw	r5,1204(sp)
    3170:	21000017 	ldw	r4,0(r4)
    3174:	28c00104 	addi	r3,r5,4
    3178:	d9012e15 	stw	r4,1208(sp)
    317c:	20038c16 	blt	r4,zero,3fb0 <___vfprintf_internal_r+0x1b84>
    3180:	d8c12d15 	stw	r3,1204(sp)
    3184:	e005883a 	mov	r2,fp
    3188:	e4000007 	ldb	r16,0(fp)
    318c:	003d0f06 	br	25cc <__alt_data_end+0xffface9c>
    3190:	00c00ac4 	movi	r3,43
    3194:	d8c12b05 	stb	r3,1196(sp)
    3198:	e005883a 	mov	r2,fp
    319c:	e4000007 	ldb	r16,0(fp)
    31a0:	003d0a06 	br	25cc <__alt_data_end+0xffface9c>
    31a4:	d8c12d17 	ldw	r3,1204(sp)
    31a8:	d9012d17 	ldw	r4,1204(sp)
    31ac:	da012a17 	ldw	r8,1192(sp)
    31b0:	18c00017 	ldw	r3,0(r3)
    31b4:	df012a15 	stw	fp,1192(sp)
    31b8:	d8012785 	stb	zero,1182(sp)
    31bc:	d8c13115 	stw	r3,1220(sp)
    31c0:	9839883a 	mov	fp,r19
    31c4:	24800104 	addi	r18,r4,4
    31c8:	1803f726 	beq	r3,zero,41a8 <___vfprintf_internal_r+0x1d7c>
    31cc:	d9013117 	ldw	r4,1220(sp)
    31d0:	48038916 	blt	r9,zero,3ff8 <___vfprintf_internal_r+0x1bcc>
    31d4:	480d883a 	mov	r6,r9
    31d8:	000b883a 	mov	r5,zero
    31dc:	da013f15 	stw	r8,1276(sp)
    31e0:	da413e15 	stw	r9,1272(sp)
    31e4:	0007a400 	call	7a40 <memchr>
    31e8:	da013f17 	ldw	r8,1276(sp)
    31ec:	da413e17 	ldw	r9,1272(sp)
    31f0:	10045926 	beq	r2,zero,4358 <___vfprintf_internal_r+0x1f2c>
    31f4:	d8c13117 	ldw	r3,1220(sp)
    31f8:	10e3c83a 	sub	r17,r2,r3
    31fc:	4c433516 	blt	r9,r17,3ed4 <___vfprintf_internal_r+0x1aa8>
    3200:	8805883a 	mov	r2,r17
    3204:	88038116 	blt	r17,zero,400c <___vfprintf_internal_r+0x1be0>
    3208:	dcc12783 	ldbu	r19,1182(sp)
    320c:	d8812b15 	stw	r2,1196(sp)
    3210:	dc812d15 	stw	r18,1204(sp)
    3214:	d8013215 	stw	zero,1224(sp)
    3218:	d8013415 	stw	zero,1232(sp)
    321c:	003e0306 	br	2a2c <__alt_data_end+0xfffad2fc>
    3220:	da012a17 	ldw	r8,1192(sp)
    3224:	df012a15 	stw	fp,1192(sp)
    3228:	9839883a 	mov	fp,r19
    322c:	dcc12b03 	ldbu	r19,1196(sp)
    3230:	dcc12785 	stb	r19,1182(sp)
    3234:	803d8f26 	beq	r16,zero,2874 <__alt_data_end+0xfffad144>
    3238:	00c00044 	movi	r3,1
    323c:	d8c12b15 	stw	r3,1196(sp)
    3240:	dc010405 	stb	r16,1040(sp)
    3244:	d8012785 	stb	zero,1182(sp)
    3248:	003fb506 	br	3120 <__alt_data_end+0xfffad9f0>
    324c:	d8c12017 	ldw	r3,1152(sp)
    3250:	003e3506 	br	2b28 <__alt_data_end+0xfffad3f8>
    3254:	10803fcc 	andi	r2,r2,255
    3258:	00c00044 	movi	r3,1
    325c:	10fddc1e 	bne	r2,r3,29d0 <__alt_data_end+0xfffad2a0>
    3260:	a800021e 	bne	r21,zero,326c <___vfprintf_internal_r+0xe40>
    3264:	00800244 	movi	r2,9
    3268:	14801e2e 	bgeu	r2,r18,32e4 <___vfprintf_internal_r+0xeb8>
    326c:	dc012b15 	stw	r16,1196(sp)
    3270:	dc410e04 	addi	r17,sp,1080
    3274:	9021883a 	mov	r16,r18
    3278:	da012c15 	stw	r8,1200(sp)
    327c:	a825883a 	mov	r18,r21
    3280:	482b883a 	mov	r21,r9
    3284:	8009883a 	mov	r4,r16
    3288:	900b883a 	mov	r5,r18
    328c:	01800284 	movi	r6,10
    3290:	000f883a 	mov	r7,zero
    3294:	000bc580 	call	bc58 <__umoddi3>
    3298:	10800c04 	addi	r2,r2,48
    329c:	8c7fffc4 	addi	r17,r17,-1
    32a0:	8009883a 	mov	r4,r16
    32a4:	900b883a 	mov	r5,r18
    32a8:	01800284 	movi	r6,10
    32ac:	000f883a 	mov	r7,zero
    32b0:	88800005 	stb	r2,0(r17)
    32b4:	000b6180 	call	b618 <__udivdi3>
    32b8:	1021883a 	mov	r16,r2
    32bc:	10c4b03a 	or	r2,r2,r3
    32c0:	1825883a 	mov	r18,r3
    32c4:	103fef1e 	bne	r2,zero,3284 <__alt_data_end+0xfffadb54>
    32c8:	d9012817 	ldw	r4,1184(sp)
    32cc:	dc413115 	stw	r17,1220(sp)
    32d0:	dc012b17 	ldw	r16,1196(sp)
    32d4:	da012c17 	ldw	r8,1200(sp)
    32d8:	a813883a 	mov	r9,r21
    32dc:	2463c83a 	sub	r17,r4,r17
    32e0:	003dcd06 	br	2a18 <__alt_data_end+0xfffad2e8>
    32e4:	94800c04 	addi	r18,r18,48
    32e8:	d8c10dc4 	addi	r3,sp,1079
    32ec:	dc810dc5 	stb	r18,1079(sp)
    32f0:	dc413c17 	ldw	r17,1264(sp)
    32f4:	d8c13115 	stw	r3,1220(sp)
    32f8:	003dc706 	br	2a18 <__alt_data_end+0xfffad2e8>
    32fc:	00801944 	movi	r2,101
    3300:	1400720e 	bge	r2,r16,34cc <___vfprintf_internal_r+0x10a0>
    3304:	d9013717 	ldw	r4,1244(sp)
    3308:	d9413917 	ldw	r5,1252(sp)
    330c:	000d883a 	mov	r6,zero
    3310:	000f883a 	mov	r7,zero
    3314:	d8c13d15 	stw	r3,1268(sp)
    3318:	da013f15 	stw	r8,1276(sp)
    331c:	000d5e40 	call	d5e4 <__eqdf2>
    3320:	d8c13d17 	ldw	r3,1268(sp)
    3324:	da013f17 	ldw	r8,1276(sp)
    3328:	1000f41e 	bne	r2,zero,36fc <___vfprintf_internal_r+0x12d0>
    332c:	d8811f17 	ldw	r2,1148(sp)
    3330:	01000074 	movhi	r4,1
    3334:	2106fc04 	addi	r4,r4,7152
    3338:	18c00044 	addi	r3,r3,1
    333c:	10800044 	addi	r2,r2,1
    3340:	41000015 	stw	r4,0(r8)
    3344:	01000044 	movi	r4,1
    3348:	41000115 	stw	r4,4(r8)
    334c:	d8c12015 	stw	r3,1152(sp)
    3350:	d8811f15 	stw	r2,1148(sp)
    3354:	010001c4 	movi	r4,7
    3358:	20828d16 	blt	r4,r2,3d90 <___vfprintf_internal_r+0x1964>
    335c:	42000204 	addi	r8,r8,8
    3360:	d8812617 	ldw	r2,1176(sp)
    3364:	d9413317 	ldw	r5,1228(sp)
    3368:	11400216 	blt	r2,r5,3374 <___vfprintf_internal_r+0xf48>
    336c:	e080004c 	andi	r2,fp,1
    3370:	103e4126 	beq	r2,zero,2c78 <__alt_data_end+0xfffad548>
    3374:	d8813817 	ldw	r2,1248(sp)
    3378:	d9013517 	ldw	r4,1236(sp)
    337c:	d9413817 	ldw	r5,1248(sp)
    3380:	1887883a 	add	r3,r3,r2
    3384:	d8811f17 	ldw	r2,1148(sp)
    3388:	41000015 	stw	r4,0(r8)
    338c:	41400115 	stw	r5,4(r8)
    3390:	10800044 	addi	r2,r2,1
    3394:	d8c12015 	stw	r3,1152(sp)
    3398:	d8811f15 	stw	r2,1148(sp)
    339c:	010001c4 	movi	r4,7
    33a0:	20830916 	blt	r4,r2,3fc8 <___vfprintf_internal_r+0x1b9c>
    33a4:	42000204 	addi	r8,r8,8
    33a8:	d8813317 	ldw	r2,1228(sp)
    33ac:	143fffc4 	addi	r16,r2,-1
    33b0:	043e310e 	bge	zero,r16,2c78 <__alt_data_end+0xfffad548>
    33b4:	04400404 	movi	r17,16
    33b8:	d8811f17 	ldw	r2,1148(sp)
    33bc:	8c007e0e 	bge	r17,r16,35b8 <___vfprintf_internal_r+0x118c>
    33c0:	01400074 	movhi	r5,1
    33c4:	2946fc84 	addi	r5,r5,7154
    33c8:	d9412c15 	stw	r5,1200(sp)
    33cc:	04c001c4 	movi	r19,7
    33d0:	00000306 	br	33e0 <___vfprintf_internal_r+0xfb4>
    33d4:	42000204 	addi	r8,r8,8
    33d8:	843ffc04 	addi	r16,r16,-16
    33dc:	8c00790e 	bge	r17,r16,35c4 <___vfprintf_internal_r+0x1198>
    33e0:	18c00404 	addi	r3,r3,16
    33e4:	10800044 	addi	r2,r2,1
    33e8:	45000015 	stw	r20,0(r8)
    33ec:	44400115 	stw	r17,4(r8)
    33f0:	d8c12015 	stw	r3,1152(sp)
    33f4:	d8811f15 	stw	r2,1148(sp)
    33f8:	98bff60e 	bge	r19,r2,33d4 <__alt_data_end+0xfffadca4>
    33fc:	b809883a 	mov	r4,r23
    3400:	b00b883a 	mov	r5,r22
    3404:	d9811e04 	addi	r6,sp,1144
    3408:	000986c0 	call	986c <__sprint_r>
    340c:	103d1f1e 	bne	r2,zero,288c <__alt_data_end+0xfffad15c>
    3410:	d8c12017 	ldw	r3,1152(sp)
    3414:	d8811f17 	ldw	r2,1148(sp)
    3418:	da000404 	addi	r8,sp,16
    341c:	003fee06 	br	33d8 <__alt_data_end+0xfffadca8>
    3420:	d9412e17 	ldw	r5,1208(sp)
    3424:	d8812b17 	ldw	r2,1196(sp)
    3428:	28a7c83a 	sub	r19,r5,r2
    342c:	04fddc0e 	bge	zero,r19,2ba0 <__alt_data_end+0xfffad470>
    3430:	05400404 	movi	r21,16
    3434:	d8811f17 	ldw	r2,1148(sp)
    3438:	acc3870e 	bge	r21,r19,4258 <___vfprintf_internal_r+0x1e2c>
    343c:	01400074 	movhi	r5,1
    3440:	2946fc84 	addi	r5,r5,7154
    3444:	d9412c15 	stw	r5,1200(sp)
    3448:	048001c4 	movi	r18,7
    344c:	00000306 	br	345c <___vfprintf_internal_r+0x1030>
    3450:	9cfffc04 	addi	r19,r19,-16
    3454:	42000204 	addi	r8,r8,8
    3458:	acc0110e 	bge	r21,r19,34a0 <___vfprintf_internal_r+0x1074>
    345c:	18c00404 	addi	r3,r3,16
    3460:	10800044 	addi	r2,r2,1
    3464:	45000015 	stw	r20,0(r8)
    3468:	45400115 	stw	r21,4(r8)
    346c:	d8c12015 	stw	r3,1152(sp)
    3470:	d8811f15 	stw	r2,1148(sp)
    3474:	90bff60e 	bge	r18,r2,3450 <__alt_data_end+0xfffadd20>
    3478:	b809883a 	mov	r4,r23
    347c:	b00b883a 	mov	r5,r22
    3480:	d9811e04 	addi	r6,sp,1144
    3484:	000986c0 	call	986c <__sprint_r>
    3488:	103d001e 	bne	r2,zero,288c <__alt_data_end+0xfffad15c>
    348c:	9cfffc04 	addi	r19,r19,-16
    3490:	d8c12017 	ldw	r3,1152(sp)
    3494:	d8811f17 	ldw	r2,1148(sp)
    3498:	da000404 	addi	r8,sp,16
    349c:	acffef16 	blt	r21,r19,345c <__alt_data_end+0xfffadd2c>
    34a0:	d9012c17 	ldw	r4,1200(sp)
    34a4:	1cc7883a 	add	r3,r3,r19
    34a8:	10800044 	addi	r2,r2,1
    34ac:	41000015 	stw	r4,0(r8)
    34b0:	44c00115 	stw	r19,4(r8)
    34b4:	d8c12015 	stw	r3,1152(sp)
    34b8:	d8811f15 	stw	r2,1148(sp)
    34bc:	010001c4 	movi	r4,7
    34c0:	20817816 	blt	r4,r2,3aa4 <___vfprintf_internal_r+0x1678>
    34c4:	42000204 	addi	r8,r8,8
    34c8:	003db506 	br	2ba0 <__alt_data_end+0xfffad470>
    34cc:	d9413317 	ldw	r5,1228(sp)
    34d0:	00800044 	movi	r2,1
    34d4:	18c00044 	addi	r3,r3,1
    34d8:	11413e0e 	bge	r2,r5,39d4 <___vfprintf_internal_r+0x15a8>
    34dc:	dc011f17 	ldw	r16,1148(sp)
    34e0:	d8813117 	ldw	r2,1220(sp)
    34e4:	d8c12015 	stw	r3,1152(sp)
    34e8:	84000044 	addi	r16,r16,1
    34ec:	40800015 	stw	r2,0(r8)
    34f0:	00800044 	movi	r2,1
    34f4:	40800115 	stw	r2,4(r8)
    34f8:	dc011f15 	stw	r16,1148(sp)
    34fc:	008001c4 	movi	r2,7
    3500:	14015616 	blt	r2,r16,3a5c <___vfprintf_internal_r+0x1630>
    3504:	42000204 	addi	r8,r8,8
    3508:	d9013817 	ldw	r4,1248(sp)
    350c:	d9413517 	ldw	r5,1236(sp)
    3510:	84000044 	addi	r16,r16,1
    3514:	1907883a 	add	r3,r3,r4
    3518:	41400015 	stw	r5,0(r8)
    351c:	41000115 	stw	r4,4(r8)
    3520:	d8c12015 	stw	r3,1152(sp)
    3524:	dc011f15 	stw	r16,1148(sp)
    3528:	008001c4 	movi	r2,7
    352c:	14015416 	blt	r2,r16,3a80 <___vfprintf_internal_r+0x1654>
    3530:	44400204 	addi	r17,r8,8
    3534:	d9013717 	ldw	r4,1244(sp)
    3538:	d9413917 	ldw	r5,1252(sp)
    353c:	000d883a 	mov	r6,zero
    3540:	000f883a 	mov	r7,zero
    3544:	d8c13d15 	stw	r3,1268(sp)
    3548:	000d5e40 	call	d5e4 <__eqdf2>
    354c:	d8c13d17 	ldw	r3,1268(sp)
    3550:	1000a726 	beq	r2,zero,37f0 <___vfprintf_internal_r+0x13c4>
    3554:	d9013317 	ldw	r4,1228(sp)
    3558:	d9413117 	ldw	r5,1220(sp)
    355c:	84000044 	addi	r16,r16,1
    3560:	20bfffc4 	addi	r2,r4,-1
    3564:	1887883a 	add	r3,r3,r2
    3568:	29000044 	addi	r4,r5,1
    356c:	88800115 	stw	r2,4(r17)
    3570:	89000015 	stw	r4,0(r17)
    3574:	d8c12015 	stw	r3,1152(sp)
    3578:	dc011f15 	stw	r16,1148(sp)
    357c:	008001c4 	movi	r2,7
    3580:	14012d16 	blt	r2,r16,3a38 <___vfprintf_internal_r+0x160c>
    3584:	8c400204 	addi	r17,r17,8
    3588:	d9413a17 	ldw	r5,1256(sp)
    358c:	dcc122c4 	addi	r19,sp,1163
    3590:	84000044 	addi	r16,r16,1
    3594:	28c7883a 	add	r3,r5,r3
    3598:	8cc00015 	stw	r19,0(r17)
    359c:	89400115 	stw	r5,4(r17)
    35a0:	d8c12015 	stw	r3,1152(sp)
    35a4:	dc011f15 	stw	r16,1148(sp)
    35a8:	008001c4 	movi	r2,7
    35ac:	14000e16 	blt	r2,r16,35e8 <___vfprintf_internal_r+0x11bc>
    35b0:	8a000204 	addi	r8,r17,8
    35b4:	003db006 	br	2c78 <__alt_data_end+0xfffad548>
    35b8:	01000074 	movhi	r4,1
    35bc:	2106fc84 	addi	r4,r4,7154
    35c0:	d9012c15 	stw	r4,1200(sp)
    35c4:	d9012c17 	ldw	r4,1200(sp)
    35c8:	1c07883a 	add	r3,r3,r16
    35cc:	44000115 	stw	r16,4(r8)
    35d0:	41000015 	stw	r4,0(r8)
    35d4:	10800044 	addi	r2,r2,1
    35d8:	d8c12015 	stw	r3,1152(sp)
    35dc:	d8811f15 	stw	r2,1148(sp)
    35e0:	010001c4 	movi	r4,7
    35e4:	20bda30e 	bge	r4,r2,2c74 <__alt_data_end+0xfffad544>
    35e8:	b809883a 	mov	r4,r23
    35ec:	b00b883a 	mov	r5,r22
    35f0:	d9811e04 	addi	r6,sp,1144
    35f4:	000986c0 	call	986c <__sprint_r>
    35f8:	103ca41e 	bne	r2,zero,288c <__alt_data_end+0xfffad15c>
    35fc:	d8c12017 	ldw	r3,1152(sp)
    3600:	da000404 	addi	r8,sp,16
    3604:	003d9c06 	br	2c78 <__alt_data_end+0xfffad548>
    3608:	b809883a 	mov	r4,r23
    360c:	b00b883a 	mov	r5,r22
    3610:	d9811e04 	addi	r6,sp,1144
    3614:	000986c0 	call	986c <__sprint_r>
    3618:	103dd226 	beq	r2,zero,2d64 <__alt_data_end+0xfffad634>
    361c:	003c9b06 	br	288c <__alt_data_end+0xfffad15c>
    3620:	10803fcc 	andi	r2,r2,255
    3624:	1000311e 	bne	r2,zero,36ec <___vfprintf_internal_r+0x12c0>
    3628:	e080004c 	andi	r2,fp,1
    362c:	10002f26 	beq	r2,zero,36ec <___vfprintf_internal_r+0x12c0>
    3630:	00800c04 	movi	r2,48
    3634:	d8c10dc4 	addi	r3,sp,1079
    3638:	d8810dc5 	stb	r2,1079(sp)
    363c:	dc413c17 	ldw	r17,1264(sp)
    3640:	d8c13115 	stw	r3,1220(sp)
    3644:	003cf406 	br	2a18 <__alt_data_end+0xfffad2e8>
    3648:	b809883a 	mov	r4,r23
    364c:	b00b883a 	mov	r5,r22
    3650:	d9811e04 	addi	r6,sp,1144
    3654:	000986c0 	call	986c <__sprint_r>
    3658:	103c8c1e 	bne	r2,zero,288c <__alt_data_end+0xfffad15c>
    365c:	d8c12017 	ldw	r3,1152(sp)
    3660:	da000404 	addi	r8,sp,16
    3664:	003d7706 	br	2c44 <__alt_data_end+0xfffad514>
    3668:	b809883a 	mov	r4,r23
    366c:	b00b883a 	mov	r5,r22
    3670:	d9811e04 	addi	r6,sp,1144
    3674:	000986c0 	call	986c <__sprint_r>
    3678:	103c841e 	bne	r2,zero,288c <__alt_data_end+0xfffad15c>
    367c:	d8c12017 	ldw	r3,1152(sp)
    3680:	da000404 	addi	r8,sp,16
    3684:	003d3506 	br	2b5c <__alt_data_end+0xfffad42c>
    3688:	b809883a 	mov	r4,r23
    368c:	b00b883a 	mov	r5,r22
    3690:	d9811e04 	addi	r6,sp,1144
    3694:	000986c0 	call	986c <__sprint_r>
    3698:	103c7c1e 	bne	r2,zero,288c <__alt_data_end+0xfffad15c>
    369c:	d8c12017 	ldw	r3,1152(sp)
    36a0:	da000404 	addi	r8,sp,16
    36a4:	003d3b06 	br	2b94 <__alt_data_end+0xfffad464>
    36a8:	d9413b17 	ldw	r5,1260(sp)
    36ac:	d8c10e04 	addi	r3,sp,1080
    36b0:	908003cc 	andi	r2,r18,15
    36b4:	a808973a 	slli	r4,r21,28
    36b8:	2885883a 	add	r2,r5,r2
    36bc:	9024d13a 	srli	r18,r18,4
    36c0:	10800003 	ldbu	r2,0(r2)
    36c4:	a82ad13a 	srli	r21,r21,4
    36c8:	18ffffc4 	addi	r3,r3,-1
    36cc:	24a4b03a 	or	r18,r4,r18
    36d0:	18800005 	stb	r2,0(r3)
    36d4:	9544b03a 	or	r2,r18,r21
    36d8:	103ff51e 	bne	r2,zero,36b0 <__alt_data_end+0xfffadf80>
    36dc:	d9412817 	ldw	r5,1184(sp)
    36e0:	d8c13115 	stw	r3,1220(sp)
    36e4:	28e3c83a 	sub	r17,r5,r3
    36e8:	003ccb06 	br	2a18 <__alt_data_end+0xfffad2e8>
    36ec:	d8c10e04 	addi	r3,sp,1080
    36f0:	0023883a 	mov	r17,zero
    36f4:	d8c13115 	stw	r3,1220(sp)
    36f8:	003cc706 	br	2a18 <__alt_data_end+0xfffad2e8>
    36fc:	dc012617 	ldw	r16,1176(sp)
    3700:	0401ab0e 	bge	zero,r16,3db0 <___vfprintf_internal_r+0x1984>
    3704:	d8813317 	ldw	r2,1228(sp)
    3708:	d9413117 	ldw	r5,1220(sp)
    370c:	d9013417 	ldw	r4,1232(sp)
    3710:	1023883a 	mov	r17,r2
    3714:	28a1883a 	add	r16,r5,r2
    3718:	2080010e 	bge	r4,r2,3720 <___vfprintf_internal_r+0x12f4>
    371c:	2023883a 	mov	r17,r4
    3720:	04400b0e 	bge	zero,r17,3750 <___vfprintf_internal_r+0x1324>
    3724:	d8811f17 	ldw	r2,1148(sp)
    3728:	d9413117 	ldw	r5,1220(sp)
    372c:	1c47883a 	add	r3,r3,r17
    3730:	10800044 	addi	r2,r2,1
    3734:	41400015 	stw	r5,0(r8)
    3738:	44400115 	stw	r17,4(r8)
    373c:	d8c12015 	stw	r3,1152(sp)
    3740:	d8811f15 	stw	r2,1148(sp)
    3744:	010001c4 	movi	r4,7
    3748:	20826716 	blt	r4,r2,40e8 <___vfprintf_internal_r+0x1cbc>
    374c:	42000204 	addi	r8,r8,8
    3750:	88026316 	blt	r17,zero,40e0 <___vfprintf_internal_r+0x1cb4>
    3754:	d8813417 	ldw	r2,1232(sp)
    3758:	1463c83a 	sub	r17,r2,r17
    375c:	0440590e 	bge	zero,r17,38c4 <___vfprintf_internal_r+0x1498>
    3760:	04c00404 	movi	r19,16
    3764:	d8811f17 	ldw	r2,1148(sp)
    3768:	9c41770e 	bge	r19,r17,3d48 <___vfprintf_internal_r+0x191c>
    376c:	01400074 	movhi	r5,1
    3770:	2946fc84 	addi	r5,r5,7154
    3774:	d9412c15 	stw	r5,1200(sp)
    3778:	054001c4 	movi	r21,7
    377c:	00000306 	br	378c <___vfprintf_internal_r+0x1360>
    3780:	42000204 	addi	r8,r8,8
    3784:	8c7ffc04 	addi	r17,r17,-16
    3788:	9c41720e 	bge	r19,r17,3d54 <___vfprintf_internal_r+0x1928>
    378c:	18c00404 	addi	r3,r3,16
    3790:	10800044 	addi	r2,r2,1
    3794:	45000015 	stw	r20,0(r8)
    3798:	44c00115 	stw	r19,4(r8)
    379c:	d8c12015 	stw	r3,1152(sp)
    37a0:	d8811f15 	stw	r2,1148(sp)
    37a4:	a8bff60e 	bge	r21,r2,3780 <__alt_data_end+0xfffae050>
    37a8:	b809883a 	mov	r4,r23
    37ac:	b00b883a 	mov	r5,r22
    37b0:	d9811e04 	addi	r6,sp,1144
    37b4:	000986c0 	call	986c <__sprint_r>
    37b8:	103c341e 	bne	r2,zero,288c <__alt_data_end+0xfffad15c>
    37bc:	d8c12017 	ldw	r3,1152(sp)
    37c0:	d8811f17 	ldw	r2,1148(sp)
    37c4:	da000404 	addi	r8,sp,16
    37c8:	003fee06 	br	3784 <__alt_data_end+0xfffae054>
    37cc:	b809883a 	mov	r4,r23
    37d0:	b00b883a 	mov	r5,r22
    37d4:	d9811e04 	addi	r6,sp,1144
    37d8:	000986c0 	call	986c <__sprint_r>
    37dc:	103c2b1e 	bne	r2,zero,288c <__alt_data_end+0xfffad15c>
    37e0:	d8c12017 	ldw	r3,1152(sp)
    37e4:	d8812787 	ldb	r2,1182(sp)
    37e8:	da000404 	addi	r8,sp,16
    37ec:	003cce06 	br	2b28 <__alt_data_end+0xfffad3f8>
    37f0:	d8813317 	ldw	r2,1228(sp)
    37f4:	14ffffc4 	addi	r19,r2,-1
    37f8:	04ff630e 	bge	zero,r19,3588 <__alt_data_end+0xfffade58>
    37fc:	05400404 	movi	r21,16
    3800:	acc0810e 	bge	r21,r19,3a08 <___vfprintf_internal_r+0x15dc>
    3804:	01400074 	movhi	r5,1
    3808:	2946fc84 	addi	r5,r5,7154
    380c:	d9412c15 	stw	r5,1200(sp)
    3810:	01c001c4 	movi	r7,7
    3814:	00000306 	br	3824 <___vfprintf_internal_r+0x13f8>
    3818:	8c400204 	addi	r17,r17,8
    381c:	9cfffc04 	addi	r19,r19,-16
    3820:	acc07c0e 	bge	r21,r19,3a14 <___vfprintf_internal_r+0x15e8>
    3824:	18c00404 	addi	r3,r3,16
    3828:	84000044 	addi	r16,r16,1
    382c:	8d000015 	stw	r20,0(r17)
    3830:	8d400115 	stw	r21,4(r17)
    3834:	d8c12015 	stw	r3,1152(sp)
    3838:	dc011f15 	stw	r16,1148(sp)
    383c:	3c3ff60e 	bge	r7,r16,3818 <__alt_data_end+0xfffae0e8>
    3840:	b809883a 	mov	r4,r23
    3844:	b00b883a 	mov	r5,r22
    3848:	d9811e04 	addi	r6,sp,1144
    384c:	d9c13d15 	stw	r7,1268(sp)
    3850:	000986c0 	call	986c <__sprint_r>
    3854:	d9c13d17 	ldw	r7,1268(sp)
    3858:	103c0c1e 	bne	r2,zero,288c <__alt_data_end+0xfffad15c>
    385c:	d8c12017 	ldw	r3,1152(sp)
    3860:	dc011f17 	ldw	r16,1148(sp)
    3864:	dc400404 	addi	r17,sp,16
    3868:	003fec06 	br	381c <__alt_data_end+0xfffae0ec>
    386c:	00800084 	movi	r2,2
    3870:	9546b03a 	or	r3,r18,r21
    3874:	003d7d06 	br	2e6c <__alt_data_end+0xfffad73c>
    3878:	10803fcc 	andi	r2,r2,255
    387c:	1080201c 	xori	r2,r2,128
    3880:	10bfe004 	addi	r2,r2,-128
    3884:	01000c04 	movi	r4,48
    3888:	1101d726 	beq	r2,r4,3fe8 <___vfprintf_internal_r+0x1bbc>
    388c:	d9413117 	ldw	r5,1220(sp)
    3890:	d8812817 	ldw	r2,1184(sp)
    3894:	193fffc5 	stb	r4,-1(r3)
    3898:	297fffc4 	addi	r5,r5,-1
    389c:	d9413115 	stw	r5,1220(sp)
    38a0:	1163c83a 	sub	r17,r2,r5
    38a4:	003c5c06 	br	2a18 <__alt_data_end+0xfffad2e8>
    38a8:	b809883a 	mov	r4,r23
    38ac:	b00b883a 	mov	r5,r22
    38b0:	d9811e04 	addi	r6,sp,1144
    38b4:	000986c0 	call	986c <__sprint_r>
    38b8:	103bf41e 	bne	r2,zero,288c <__alt_data_end+0xfffad15c>
    38bc:	d8c12017 	ldw	r3,1152(sp)
    38c0:	da000404 	addi	r8,sp,16
    38c4:	d9413117 	ldw	r5,1220(sp)
    38c8:	d9013417 	ldw	r4,1232(sp)
    38cc:	d8812617 	ldw	r2,1176(sp)
    38d0:	2923883a 	add	r17,r5,r4
    38d4:	d9413317 	ldw	r5,1228(sp)
    38d8:	11400216 	blt	r2,r5,38e4 <___vfprintf_internal_r+0x14b8>
    38dc:	e100004c 	andi	r4,fp,1
    38e0:	20000d26 	beq	r4,zero,3918 <___vfprintf_internal_r+0x14ec>
    38e4:	d9013817 	ldw	r4,1248(sp)
    38e8:	d9413517 	ldw	r5,1236(sp)
    38ec:	1907883a 	add	r3,r3,r4
    38f0:	d9011f17 	ldw	r4,1148(sp)
    38f4:	41400015 	stw	r5,0(r8)
    38f8:	d9413817 	ldw	r5,1248(sp)
    38fc:	21000044 	addi	r4,r4,1
    3900:	d8c12015 	stw	r3,1152(sp)
    3904:	41400115 	stw	r5,4(r8)
    3908:	d9011f15 	stw	r4,1148(sp)
    390c:	014001c4 	movi	r5,7
    3910:	2901fd16 	blt	r5,r4,4108 <___vfprintf_internal_r+0x1cdc>
    3914:	42000204 	addi	r8,r8,8
    3918:	d9013317 	ldw	r4,1228(sp)
    391c:	2085c83a 	sub	r2,r4,r2
    3920:	8449c83a 	sub	r4,r16,r17
    3924:	1021883a 	mov	r16,r2
    3928:	2080010e 	bge	r4,r2,3930 <___vfprintf_internal_r+0x1504>
    392c:	2021883a 	mov	r16,r4
    3930:	04000a0e 	bge	zero,r16,395c <___vfprintf_internal_r+0x1530>
    3934:	d9011f17 	ldw	r4,1148(sp)
    3938:	1c07883a 	add	r3,r3,r16
    393c:	44400015 	stw	r17,0(r8)
    3940:	21000044 	addi	r4,r4,1
    3944:	44000115 	stw	r16,4(r8)
    3948:	d8c12015 	stw	r3,1152(sp)
    394c:	d9011f15 	stw	r4,1148(sp)
    3950:	014001c4 	movi	r5,7
    3954:	29020916 	blt	r5,r4,417c <___vfprintf_internal_r+0x1d50>
    3958:	42000204 	addi	r8,r8,8
    395c:	80020116 	blt	r16,zero,4164 <___vfprintf_internal_r+0x1d38>
    3960:	1421c83a 	sub	r16,r2,r16
    3964:	043cc40e 	bge	zero,r16,2c78 <__alt_data_end+0xfffad548>
    3968:	04400404 	movi	r17,16
    396c:	d8811f17 	ldw	r2,1148(sp)
    3970:	8c3f110e 	bge	r17,r16,35b8 <__alt_data_end+0xfffade88>
    3974:	01400074 	movhi	r5,1
    3978:	2946fc84 	addi	r5,r5,7154
    397c:	d9412c15 	stw	r5,1200(sp)
    3980:	04c001c4 	movi	r19,7
    3984:	00000306 	br	3994 <___vfprintf_internal_r+0x1568>
    3988:	42000204 	addi	r8,r8,8
    398c:	843ffc04 	addi	r16,r16,-16
    3990:	8c3f0c0e 	bge	r17,r16,35c4 <__alt_data_end+0xfffade94>
    3994:	18c00404 	addi	r3,r3,16
    3998:	10800044 	addi	r2,r2,1
    399c:	45000015 	stw	r20,0(r8)
    39a0:	44400115 	stw	r17,4(r8)
    39a4:	d8c12015 	stw	r3,1152(sp)
    39a8:	d8811f15 	stw	r2,1148(sp)
    39ac:	98bff60e 	bge	r19,r2,3988 <__alt_data_end+0xfffae258>
    39b0:	b809883a 	mov	r4,r23
    39b4:	b00b883a 	mov	r5,r22
    39b8:	d9811e04 	addi	r6,sp,1144
    39bc:	000986c0 	call	986c <__sprint_r>
    39c0:	103bb21e 	bne	r2,zero,288c <__alt_data_end+0xfffad15c>
    39c4:	d8c12017 	ldw	r3,1152(sp)
    39c8:	d8811f17 	ldw	r2,1148(sp)
    39cc:	da000404 	addi	r8,sp,16
    39d0:	003fee06 	br	398c <__alt_data_end+0xfffae25c>
    39d4:	e088703a 	and	r4,fp,r2
    39d8:	203ec01e 	bne	r4,zero,34dc <__alt_data_end+0xfffaddac>
    39dc:	dc011f17 	ldw	r16,1148(sp)
    39e0:	d9013117 	ldw	r4,1220(sp)
    39e4:	40800115 	stw	r2,4(r8)
    39e8:	84000044 	addi	r16,r16,1
    39ec:	41000015 	stw	r4,0(r8)
    39f0:	d8c12015 	stw	r3,1152(sp)
    39f4:	dc011f15 	stw	r16,1148(sp)
    39f8:	008001c4 	movi	r2,7
    39fc:	14000e16 	blt	r2,r16,3a38 <___vfprintf_internal_r+0x160c>
    3a00:	44400204 	addi	r17,r8,8
    3a04:	003ee006 	br	3588 <__alt_data_end+0xfffade58>
    3a08:	01000074 	movhi	r4,1
    3a0c:	2106fc84 	addi	r4,r4,7154
    3a10:	d9012c15 	stw	r4,1200(sp)
    3a14:	d8812c17 	ldw	r2,1200(sp)
    3a18:	1cc7883a 	add	r3,r3,r19
    3a1c:	84000044 	addi	r16,r16,1
    3a20:	88800015 	stw	r2,0(r17)
    3a24:	8cc00115 	stw	r19,4(r17)
    3a28:	d8c12015 	stw	r3,1152(sp)
    3a2c:	dc011f15 	stw	r16,1148(sp)
    3a30:	008001c4 	movi	r2,7
    3a34:	143ed30e 	bge	r2,r16,3584 <__alt_data_end+0xfffade54>
    3a38:	b809883a 	mov	r4,r23
    3a3c:	b00b883a 	mov	r5,r22
    3a40:	d9811e04 	addi	r6,sp,1144
    3a44:	000986c0 	call	986c <__sprint_r>
    3a48:	103b901e 	bne	r2,zero,288c <__alt_data_end+0xfffad15c>
    3a4c:	d8c12017 	ldw	r3,1152(sp)
    3a50:	dc011f17 	ldw	r16,1148(sp)
    3a54:	dc400404 	addi	r17,sp,16
    3a58:	003ecb06 	br	3588 <__alt_data_end+0xfffade58>
    3a5c:	b809883a 	mov	r4,r23
    3a60:	b00b883a 	mov	r5,r22
    3a64:	d9811e04 	addi	r6,sp,1144
    3a68:	000986c0 	call	986c <__sprint_r>
    3a6c:	103b871e 	bne	r2,zero,288c <__alt_data_end+0xfffad15c>
    3a70:	d8c12017 	ldw	r3,1152(sp)
    3a74:	dc011f17 	ldw	r16,1148(sp)
    3a78:	da000404 	addi	r8,sp,16
    3a7c:	003ea206 	br	3508 <__alt_data_end+0xfffaddd8>
    3a80:	b809883a 	mov	r4,r23
    3a84:	b00b883a 	mov	r5,r22
    3a88:	d9811e04 	addi	r6,sp,1144
    3a8c:	000986c0 	call	986c <__sprint_r>
    3a90:	103b7e1e 	bne	r2,zero,288c <__alt_data_end+0xfffad15c>
    3a94:	d8c12017 	ldw	r3,1152(sp)
    3a98:	dc011f17 	ldw	r16,1148(sp)
    3a9c:	dc400404 	addi	r17,sp,16
    3aa0:	003ea406 	br	3534 <__alt_data_end+0xfffade04>
    3aa4:	b809883a 	mov	r4,r23
    3aa8:	b00b883a 	mov	r5,r22
    3aac:	d9811e04 	addi	r6,sp,1144
    3ab0:	000986c0 	call	986c <__sprint_r>
    3ab4:	103b751e 	bne	r2,zero,288c <__alt_data_end+0xfffad15c>
    3ab8:	d8c12017 	ldw	r3,1152(sp)
    3abc:	da000404 	addi	r8,sp,16
    3ac0:	003c3706 	br	2ba0 <__alt_data_end+0xfffad470>
    3ac4:	04a5c83a 	sub	r18,zero,r18
    3ac8:	9004c03a 	cmpne	r2,r18,zero
    3acc:	056bc83a 	sub	r21,zero,r21
    3ad0:	a8abc83a 	sub	r21,r21,r2
    3ad4:	04c00b44 	movi	r19,45
    3ad8:	dcc12785 	stb	r19,1182(sp)
    3adc:	da413215 	stw	r9,1224(sp)
    3ae0:	00800044 	movi	r2,1
    3ae4:	9546b03a 	or	r3,r18,r21
    3ae8:	003bb106 	br	29b0 <__alt_data_end+0xfffad280>
    3aec:	da013f15 	stw	r8,1276(sp)
    3af0:	da413e15 	stw	r9,1272(sp)
    3af4:	00094c80 	call	94c8 <__fpclassifyd>
    3af8:	da013f17 	ldw	r8,1276(sp)
    3afc:	da413e17 	ldw	r9,1272(sp)
    3b00:	1000e526 	beq	r2,zero,3e98 <___vfprintf_internal_r+0x1a6c>
    3b04:	04fff7c4 	movi	r19,-33
    3b08:	00bfffc4 	movi	r2,-1
    3b0c:	84e6703a 	and	r19,r16,r19
    3b10:	48822926 	beq	r9,r2,43b8 <___vfprintf_internal_r+0x1f8c>
    3b14:	008011c4 	movi	r2,71
    3b18:	98821626 	beq	r19,r2,4374 <___vfprintf_internal_r+0x1f48>
    3b1c:	d9013917 	ldw	r4,1252(sp)
    3b20:	e0c04014 	ori	r3,fp,256
    3b24:	d8c12d15 	stw	r3,1204(sp)
    3b28:	20021f16 	blt	r4,zero,43a8 <___vfprintf_internal_r+0x1f7c>
    3b2c:	dc413917 	ldw	r17,1252(sp)
    3b30:	d8012b05 	stb	zero,1196(sp)
    3b34:	00801984 	movi	r2,102
    3b38:	80814d26 	beq	r16,r2,4070 <___vfprintf_internal_r+0x1c44>
    3b3c:	00801184 	movi	r2,70
    3b40:	80814b26 	beq	r16,r2,4070 <___vfprintf_internal_r+0x1c44>
    3b44:	00801144 	movi	r2,69
    3b48:	98821d26 	beq	r19,r2,43c0 <___vfprintf_internal_r+0x1f94>
    3b4c:	482b883a 	mov	r21,r9
    3b50:	d8812604 	addi	r2,sp,1176
    3b54:	d8800115 	stw	r2,4(sp)
    3b58:	d9413717 	ldw	r5,1244(sp)
    3b5c:	d8812504 	addi	r2,sp,1172
    3b60:	d8800215 	stw	r2,8(sp)
    3b64:	d8812104 	addi	r2,sp,1156
    3b68:	dd400015 	stw	r21,0(sp)
    3b6c:	d8800315 	stw	r2,12(sp)
    3b70:	b809883a 	mov	r4,r23
    3b74:	880d883a 	mov	r6,r17
    3b78:	01c00084 	movi	r7,2
    3b7c:	da013f15 	stw	r8,1276(sp)
    3b80:	da413e15 	stw	r9,1272(sp)
    3b84:	00048a40 	call	48a4 <_dtoa_r>
    3b88:	d8813115 	stw	r2,1220(sp)
    3b8c:	008019c4 	movi	r2,103
    3b90:	da013f17 	ldw	r8,1276(sp)
    3b94:	da413e17 	ldw	r9,1272(sp)
    3b98:	80800226 	beq	r16,r2,3ba4 <___vfprintf_internal_r+0x1778>
    3b9c:	008011c4 	movi	r2,71
    3ba0:	8081451e 	bne	r16,r2,40b8 <___vfprintf_internal_r+0x1c8c>
    3ba4:	e080004c 	andi	r2,fp,1
    3ba8:	10021e26 	beq	r2,zero,4424 <___vfprintf_internal_r+0x1ff8>
    3bac:	d8c13117 	ldw	r3,1220(sp)
    3bb0:	1d55883a 	add	r10,r3,r21
    3bb4:	d9013717 	ldw	r4,1244(sp)
    3bb8:	880b883a 	mov	r5,r17
    3bbc:	000d883a 	mov	r6,zero
    3bc0:	000f883a 	mov	r7,zero
    3bc4:	da013f15 	stw	r8,1276(sp)
    3bc8:	da413e15 	stw	r9,1272(sp)
    3bcc:	da813d15 	stw	r10,1268(sp)
    3bd0:	000d5e40 	call	d5e4 <__eqdf2>
    3bd4:	da013f17 	ldw	r8,1276(sp)
    3bd8:	da413e17 	ldw	r9,1272(sp)
    3bdc:	da813d17 	ldw	r10,1268(sp)
    3be0:	1001a126 	beq	r2,zero,4268 <___vfprintf_internal_r+0x1e3c>
    3be4:	d8812117 	ldw	r2,1156(sp)
    3be8:	1280062e 	bgeu	r2,r10,3c04 <___vfprintf_internal_r+0x17d8>
    3bec:	01000c04 	movi	r4,48
    3bf0:	10c00044 	addi	r3,r2,1
    3bf4:	d8c12115 	stw	r3,1156(sp)
    3bf8:	11000005 	stb	r4,0(r2)
    3bfc:	d8812117 	ldw	r2,1156(sp)
    3c00:	12bffb36 	bltu	r2,r10,3bf0 <__alt_data_end+0xfffae4c0>
    3c04:	d8c13117 	ldw	r3,1220(sp)
    3c08:	10c5c83a 	sub	r2,r2,r3
    3c0c:	d8813315 	stw	r2,1228(sp)
    3c10:	008011c4 	movi	r2,71
    3c14:	98818926 	beq	r19,r2,423c <___vfprintf_internal_r+0x1e10>
    3c18:	00801944 	movi	r2,101
    3c1c:	14023c0e 	bge	r2,r16,4510 <___vfprintf_internal_r+0x20e4>
    3c20:	d8c12617 	ldw	r3,1176(sp)
    3c24:	00801984 	movi	r2,102
    3c28:	d8c13415 	stw	r3,1232(sp)
    3c2c:	8081ef26 	beq	r16,r2,43ec <___vfprintf_internal_r+0x1fc0>
    3c30:	d8c13417 	ldw	r3,1232(sp)
    3c34:	d9013317 	ldw	r4,1228(sp)
    3c38:	1901e316 	blt	r3,r4,43c8 <___vfprintf_internal_r+0x1f9c>
    3c3c:	e080004c 	andi	r2,fp,1
    3c40:	1001f426 	beq	r2,zero,4414 <___vfprintf_internal_r+0x1fe8>
    3c44:	d8c13417 	ldw	r3,1232(sp)
    3c48:	1c400044 	addi	r17,r3,1
    3c4c:	8839883a 	mov	fp,r17
    3c50:	8801e416 	blt	r17,zero,43e4 <___vfprintf_internal_r+0x1fb8>
    3c54:	dd412b07 	ldb	r21,1196(sp)
    3c58:	a801701e 	bne	r21,zero,421c <___vfprintf_internal_r+0x1df0>
    3c5c:	df012b15 	stw	fp,1196(sp)
    3c60:	dcc12783 	ldbu	r19,1182(sp)
    3c64:	df012d17 	ldw	fp,1204(sp)
    3c68:	d8013215 	stw	zero,1224(sp)
    3c6c:	dc812d15 	stw	r18,1204(sp)
    3c70:	003b6e06 	br	2a2c <__alt_data_end+0xfffad2fc>
    3c74:	e080040c 	andi	r2,fp,16
    3c78:	1000b51e 	bne	r2,zero,3f50 <___vfprintf_internal_r+0x1b24>
    3c7c:	e080100c 	andi	r2,fp,64
    3c80:	10015b26 	beq	r2,zero,41f0 <___vfprintf_internal_r+0x1dc4>
    3c84:	d9012d17 	ldw	r4,1204(sp)
    3c88:	d9412f17 	ldw	r5,1212(sp)
    3c8c:	20800017 	ldw	r2,0(r4)
    3c90:	21000104 	addi	r4,r4,4
    3c94:	d9012d15 	stw	r4,1204(sp)
    3c98:	1140000d 	sth	r5,0(r2)
    3c9c:	003a2006 	br	2520 <__alt_data_end+0xfffacdf0>
    3ca0:	e0c0100c 	andi	r3,fp,64
    3ca4:	1800a226 	beq	r3,zero,3f30 <___vfprintf_internal_r+0x1b04>
    3ca8:	d8c12d17 	ldw	r3,1204(sp)
    3cac:	1480000b 	ldhu	r18,0(r2)
    3cb0:	002b883a 	mov	r21,zero
    3cb4:	18c00104 	addi	r3,r3,4
    3cb8:	d8c12d15 	stw	r3,1204(sp)
    3cbc:	0005883a 	mov	r2,zero
    3cc0:	9007883a 	mov	r3,r18
    3cc4:	003c6906 	br	2e6c <__alt_data_end+0xfffad73c>
    3cc8:	e0c0100c 	andi	r3,fp,64
    3ccc:	18009026 	beq	r3,zero,3f10 <___vfprintf_internal_r+0x1ae4>
    3cd0:	1480000b 	ldhu	r18,0(r2)
    3cd4:	d8812d17 	ldw	r2,1204(sp)
    3cd8:	002b883a 	mov	r21,zero
    3cdc:	9007883a 	mov	r3,r18
    3ce0:	10800104 	addi	r2,r2,4
    3ce4:	d8812d15 	stw	r2,1204(sp)
    3ce8:	00800044 	movi	r2,1
    3cec:	003c5f06 	br	2e6c <__alt_data_end+0xfffad73c>
    3cf0:	e0c0100c 	andi	r3,fp,64
    3cf4:	18008026 	beq	r3,zero,3ef8 <___vfprintf_internal_r+0x1acc>
    3cf8:	d9012d17 	ldw	r4,1204(sp)
    3cfc:	1480000b 	ldhu	r18,0(r2)
    3d00:	002b883a 	mov	r21,zero
    3d04:	21000104 	addi	r4,r4,4
    3d08:	d9012d15 	stw	r4,1204(sp)
    3d0c:	003c7906 	br	2ef4 <__alt_data_end+0xfffad7c4>
    3d10:	e080100c 	andi	r2,fp,64
    3d14:	10007126 	beq	r2,zero,3edc <___vfprintf_internal_r+0x1ab0>
    3d18:	1c80000f 	ldh	r18,0(r3)
    3d1c:	d8812d17 	ldw	r2,1204(sp)
    3d20:	902bd7fa 	srai	r21,r18,31
    3d24:	10800104 	addi	r2,r2,4
    3d28:	d8812d15 	stw	r2,1204(sp)
    3d2c:	a805883a 	mov	r2,r21
    3d30:	003b1a06 	br	299c <__alt_data_end+0xfffad26c>
    3d34:	e4000007 	ldb	r16,0(fp)
    3d38:	e005883a 	mov	r2,fp
    3d3c:	003a2306 	br	25cc <__alt_data_end+0xffface9c>
    3d40:	00800084 	movi	r2,2
    3d44:	003c4906 	br	2e6c <__alt_data_end+0xfffad73c>
    3d48:	01000074 	movhi	r4,1
    3d4c:	2106fc84 	addi	r4,r4,7154
    3d50:	d9012c15 	stw	r4,1200(sp)
    3d54:	d9012c17 	ldw	r4,1200(sp)
    3d58:	1c47883a 	add	r3,r3,r17
    3d5c:	10800044 	addi	r2,r2,1
    3d60:	41000015 	stw	r4,0(r8)
    3d64:	44400115 	stw	r17,4(r8)
    3d68:	d8c12015 	stw	r3,1152(sp)
    3d6c:	d8811f15 	stw	r2,1148(sp)
    3d70:	010001c4 	movi	r4,7
    3d74:	20becc16 	blt	r4,r2,38a8 <__alt_data_end+0xfffae178>
    3d78:	42000204 	addi	r8,r8,8
    3d7c:	003ed106 	br	38c4 <__alt_data_end+0xfffae194>
    3d80:	01000074 	movhi	r4,1
    3d84:	2106fc84 	addi	r4,r4,7154
    3d88:	d9012c15 	stw	r4,1200(sp)
    3d8c:	003ba306 	br	2c1c <__alt_data_end+0xfffad4ec>
    3d90:	b809883a 	mov	r4,r23
    3d94:	b00b883a 	mov	r5,r22
    3d98:	d9811e04 	addi	r6,sp,1144
    3d9c:	000986c0 	call	986c <__sprint_r>
    3da0:	103aba1e 	bne	r2,zero,288c <__alt_data_end+0xfffad15c>
    3da4:	d8c12017 	ldw	r3,1152(sp)
    3da8:	da000404 	addi	r8,sp,16
    3dac:	003d6c06 	br	3360 <__alt_data_end+0xfffadc30>
    3db0:	d8811f17 	ldw	r2,1148(sp)
    3db4:	01400074 	movhi	r5,1
    3db8:	01000044 	movi	r4,1
    3dbc:	18c00044 	addi	r3,r3,1
    3dc0:	10800044 	addi	r2,r2,1
    3dc4:	2946fc04 	addi	r5,r5,7152
    3dc8:	41000115 	stw	r4,4(r8)
    3dcc:	41400015 	stw	r5,0(r8)
    3dd0:	d8c12015 	stw	r3,1152(sp)
    3dd4:	d8811f15 	stw	r2,1148(sp)
    3dd8:	010001c4 	movi	r4,7
    3ddc:	20806716 	blt	r4,r2,3f7c <___vfprintf_internal_r+0x1b50>
    3de0:	42000204 	addi	r8,r8,8
    3de4:	8000041e 	bne	r16,zero,3df8 <___vfprintf_internal_r+0x19cc>
    3de8:	d8813317 	ldw	r2,1228(sp)
    3dec:	1000021e 	bne	r2,zero,3df8 <___vfprintf_internal_r+0x19cc>
    3df0:	e080004c 	andi	r2,fp,1
    3df4:	103ba026 	beq	r2,zero,2c78 <__alt_data_end+0xfffad548>
    3df8:	d9013817 	ldw	r4,1248(sp)
    3dfc:	d8811f17 	ldw	r2,1148(sp)
    3e00:	d9413517 	ldw	r5,1236(sp)
    3e04:	1907883a 	add	r3,r3,r4
    3e08:	10800044 	addi	r2,r2,1
    3e0c:	41000115 	stw	r4,4(r8)
    3e10:	41400015 	stw	r5,0(r8)
    3e14:	d8c12015 	stw	r3,1152(sp)
    3e18:	d8811f15 	stw	r2,1148(sp)
    3e1c:	010001c4 	movi	r4,7
    3e20:	20815716 	blt	r4,r2,4380 <___vfprintf_internal_r+0x1f54>
    3e24:	42000204 	addi	r8,r8,8
    3e28:	0421c83a 	sub	r16,zero,r16
    3e2c:	0400810e 	bge	zero,r16,4034 <___vfprintf_internal_r+0x1c08>
    3e30:	04400404 	movi	r17,16
    3e34:	8c00bd0e 	bge	r17,r16,412c <___vfprintf_internal_r+0x1d00>
    3e38:	01400074 	movhi	r5,1
    3e3c:	2946fc84 	addi	r5,r5,7154
    3e40:	d9412c15 	stw	r5,1200(sp)
    3e44:	04c001c4 	movi	r19,7
    3e48:	00000306 	br	3e58 <___vfprintf_internal_r+0x1a2c>
    3e4c:	42000204 	addi	r8,r8,8
    3e50:	843ffc04 	addi	r16,r16,-16
    3e54:	8c00b80e 	bge	r17,r16,4138 <___vfprintf_internal_r+0x1d0c>
    3e58:	18c00404 	addi	r3,r3,16
    3e5c:	10800044 	addi	r2,r2,1
    3e60:	45000015 	stw	r20,0(r8)
    3e64:	44400115 	stw	r17,4(r8)
    3e68:	d8c12015 	stw	r3,1152(sp)
    3e6c:	d8811f15 	stw	r2,1148(sp)
    3e70:	98bff60e 	bge	r19,r2,3e4c <__alt_data_end+0xfffae71c>
    3e74:	b809883a 	mov	r4,r23
    3e78:	b00b883a 	mov	r5,r22
    3e7c:	d9811e04 	addi	r6,sp,1144
    3e80:	000986c0 	call	986c <__sprint_r>
    3e84:	103a811e 	bne	r2,zero,288c <__alt_data_end+0xfffad15c>
    3e88:	d8c12017 	ldw	r3,1152(sp)
    3e8c:	d8811f17 	ldw	r2,1148(sp)
    3e90:	da000404 	addi	r8,sp,16
    3e94:	003fee06 	br	3e50 <__alt_data_end+0xfffae720>
    3e98:	008011c4 	movi	r2,71
    3e9c:	1400db16 	blt	r2,r16,420c <___vfprintf_internal_r+0x1de0>
    3ea0:	01000074 	movhi	r4,1
    3ea4:	2106ee04 	addi	r4,r4,7096
    3ea8:	d9013115 	stw	r4,1220(sp)
    3eac:	00c000c4 	movi	r3,3
    3eb0:	00bfdfc4 	movi	r2,-129
    3eb4:	d8c12b15 	stw	r3,1196(sp)
    3eb8:	e0b8703a 	and	fp,fp,r2
    3ebc:	dcc12783 	ldbu	r19,1182(sp)
    3ec0:	dc812d15 	stw	r18,1204(sp)
    3ec4:	1823883a 	mov	r17,r3
    3ec8:	d8013215 	stw	zero,1224(sp)
    3ecc:	d8013415 	stw	zero,1232(sp)
    3ed0:	003ad606 	br	2a2c <__alt_data_end+0xfffad2fc>
    3ed4:	4823883a 	mov	r17,r9
    3ed8:	003cc906 	br	3200 <__alt_data_end+0xfffadad0>
    3edc:	1c800017 	ldw	r18,0(r3)
    3ee0:	d8c12d17 	ldw	r3,1204(sp)
    3ee4:	902bd7fa 	srai	r21,r18,31
    3ee8:	18c00104 	addi	r3,r3,4
    3eec:	d8c12d15 	stw	r3,1204(sp)
    3ef0:	a805883a 	mov	r2,r21
    3ef4:	003aa906 	br	299c <__alt_data_end+0xfffad26c>
    3ef8:	d9412d17 	ldw	r5,1204(sp)
    3efc:	14800017 	ldw	r18,0(r2)
    3f00:	002b883a 	mov	r21,zero
    3f04:	29400104 	addi	r5,r5,4
    3f08:	d9412d15 	stw	r5,1204(sp)
    3f0c:	003bf906 	br	2ef4 <__alt_data_end+0xfffad7c4>
    3f10:	d8c12d17 	ldw	r3,1204(sp)
    3f14:	14800017 	ldw	r18,0(r2)
    3f18:	002b883a 	mov	r21,zero
    3f1c:	18c00104 	addi	r3,r3,4
    3f20:	d8c12d15 	stw	r3,1204(sp)
    3f24:	00800044 	movi	r2,1
    3f28:	9007883a 	mov	r3,r18
    3f2c:	003bcf06 	br	2e6c <__alt_data_end+0xfffad73c>
    3f30:	d9012d17 	ldw	r4,1204(sp)
    3f34:	14800017 	ldw	r18,0(r2)
    3f38:	002b883a 	mov	r21,zero
    3f3c:	21000104 	addi	r4,r4,4
    3f40:	d9012d15 	stw	r4,1204(sp)
    3f44:	0005883a 	mov	r2,zero
    3f48:	9007883a 	mov	r3,r18
    3f4c:	003bc706 	br	2e6c <__alt_data_end+0xfffad73c>
    3f50:	d9412d17 	ldw	r5,1204(sp)
    3f54:	d8c12f17 	ldw	r3,1212(sp)
    3f58:	28800017 	ldw	r2,0(r5)
    3f5c:	29400104 	addi	r5,r5,4
    3f60:	d9412d15 	stw	r5,1204(sp)
    3f64:	10c00015 	stw	r3,0(r2)
    3f68:	00396d06 	br	2520 <__alt_data_end+0xfffacdf0>
    3f6c:	01000074 	movhi	r4,1
    3f70:	2106ec04 	addi	r4,r4,7088
    3f74:	d9013115 	stw	r4,1220(sp)
    3f78:	003ba206 	br	2e04 <__alt_data_end+0xfffad6d4>
    3f7c:	b809883a 	mov	r4,r23
    3f80:	b00b883a 	mov	r5,r22
    3f84:	d9811e04 	addi	r6,sp,1144
    3f88:	000986c0 	call	986c <__sprint_r>
    3f8c:	103a3f1e 	bne	r2,zero,288c <__alt_data_end+0xfffad15c>
    3f90:	dc012617 	ldw	r16,1176(sp)
    3f94:	d8c12017 	ldw	r3,1152(sp)
    3f98:	da000404 	addi	r8,sp,16
    3f9c:	003f9106 	br	3de4 <__alt_data_end+0xfffae6b4>
    3fa0:	e0800044 	addi	r2,fp,1
    3fa4:	9cc00814 	ori	r19,r19,32
    3fa8:	e4000047 	ldb	r16,1(fp)
    3fac:	00398706 	br	25cc <__alt_data_end+0xffface9c>
    3fb0:	d8812e17 	ldw	r2,1208(sp)
    3fb4:	d8c12d15 	stw	r3,1204(sp)
    3fb8:	0085c83a 	sub	r2,zero,r2
    3fbc:	d8812e15 	stw	r2,1208(sp)
    3fc0:	e005883a 	mov	r2,fp
    3fc4:	003a3a06 	br	28b0 <__alt_data_end+0xfffad180>
    3fc8:	b809883a 	mov	r4,r23
    3fcc:	b00b883a 	mov	r5,r22
    3fd0:	d9811e04 	addi	r6,sp,1144
    3fd4:	000986c0 	call	986c <__sprint_r>
    3fd8:	103a2c1e 	bne	r2,zero,288c <__alt_data_end+0xfffad15c>
    3fdc:	d8c12017 	ldw	r3,1152(sp)
    3fe0:	da000404 	addi	r8,sp,16
    3fe4:	003cf006 	br	33a8 <__alt_data_end+0xfffadc78>
    3fe8:	d8c12817 	ldw	r3,1184(sp)
    3fec:	d9013117 	ldw	r4,1220(sp)
    3ff0:	1923c83a 	sub	r17,r3,r4
    3ff4:	003a8806 	br	2a18 <__alt_data_end+0xfffad2e8>
    3ff8:	da013f15 	stw	r8,1276(sp)
    3ffc:	00023940 	call	2394 <strlen>
    4000:	1023883a 	mov	r17,r2
    4004:	da013f17 	ldw	r8,1276(sp)
    4008:	883c7f0e 	bge	r17,zero,3208 <__alt_data_end+0xfffadad8>
    400c:	0005883a 	mov	r2,zero
    4010:	003c7d06 	br	3208 <__alt_data_end+0xfffadad8>
    4014:	b809883a 	mov	r4,r23
    4018:	b00b883a 	mov	r5,r22
    401c:	d9811e04 	addi	r6,sp,1144
    4020:	000986c0 	call	986c <__sprint_r>
    4024:	103a191e 	bne	r2,zero,288c <__alt_data_end+0xfffad15c>
    4028:	d8c12017 	ldw	r3,1152(sp)
    402c:	d8811f17 	ldw	r2,1148(sp)
    4030:	da000404 	addi	r8,sp,16
    4034:	d9413317 	ldw	r5,1228(sp)
    4038:	d9013117 	ldw	r4,1220(sp)
    403c:	10800044 	addi	r2,r2,1
    4040:	28c7883a 	add	r3,r5,r3
    4044:	41000015 	stw	r4,0(r8)
    4048:	41400115 	stw	r5,4(r8)
    404c:	d8c12015 	stw	r3,1152(sp)
    4050:	d8811f15 	stw	r2,1148(sp)
    4054:	010001c4 	movi	r4,7
    4058:	20bb060e 	bge	r4,r2,2c74 <__alt_data_end+0xfffad544>
    405c:	003d6206 	br	35e8 <__alt_data_end+0xfffadeb8>
    4060:	01000074 	movhi	r4,1
    4064:	21070084 	addi	r4,r4,7170
    4068:	d9013615 	stw	r4,1240(sp)
    406c:	003aa306 	br	2afc <__alt_data_end+0xfffad3cc>
    4070:	d8812604 	addi	r2,sp,1176
    4074:	d8800115 	stw	r2,4(sp)
    4078:	d9413717 	ldw	r5,1244(sp)
    407c:	d8812504 	addi	r2,sp,1172
    4080:	d8800215 	stw	r2,8(sp)
    4084:	d8812104 	addi	r2,sp,1156
    4088:	da400015 	stw	r9,0(sp)
    408c:	d8800315 	stw	r2,12(sp)
    4090:	b809883a 	mov	r4,r23
    4094:	880d883a 	mov	r6,r17
    4098:	01c000c4 	movi	r7,3
    409c:	da013f15 	stw	r8,1276(sp)
    40a0:	da413e15 	stw	r9,1272(sp)
    40a4:	00048a40 	call	48a4 <_dtoa_r>
    40a8:	da413e17 	ldw	r9,1272(sp)
    40ac:	da013f17 	ldw	r8,1276(sp)
    40b0:	d8813115 	stw	r2,1220(sp)
    40b4:	482b883a 	mov	r21,r9
    40b8:	d8c13117 	ldw	r3,1220(sp)
    40bc:	00801184 	movi	r2,70
    40c0:	1d55883a 	add	r10,r3,r21
    40c4:	98bebb1e 	bne	r19,r2,3bb4 <__alt_data_end+0xfffae484>
    40c8:	19000007 	ldb	r4,0(r3)
    40cc:	00800c04 	movi	r2,48
    40d0:	2080dd26 	beq	r4,r2,4448 <___vfprintf_internal_r+0x201c>
    40d4:	d8c12617 	ldw	r3,1176(sp)
    40d8:	50d5883a 	add	r10,r10,r3
    40dc:	003eb506 	br	3bb4 <__alt_data_end+0xfffae484>
    40e0:	0023883a 	mov	r17,zero
    40e4:	003d9b06 	br	3754 <__alt_data_end+0xfffae024>
    40e8:	b809883a 	mov	r4,r23
    40ec:	b00b883a 	mov	r5,r22
    40f0:	d9811e04 	addi	r6,sp,1144
    40f4:	000986c0 	call	986c <__sprint_r>
    40f8:	1039e41e 	bne	r2,zero,288c <__alt_data_end+0xfffad15c>
    40fc:	d8c12017 	ldw	r3,1152(sp)
    4100:	da000404 	addi	r8,sp,16
    4104:	003d9206 	br	3750 <__alt_data_end+0xfffae020>
    4108:	b809883a 	mov	r4,r23
    410c:	b00b883a 	mov	r5,r22
    4110:	d9811e04 	addi	r6,sp,1144
    4114:	000986c0 	call	986c <__sprint_r>
    4118:	1039dc1e 	bne	r2,zero,288c <__alt_data_end+0xfffad15c>
    411c:	d8812617 	ldw	r2,1176(sp)
    4120:	d8c12017 	ldw	r3,1152(sp)
    4124:	da000404 	addi	r8,sp,16
    4128:	003dfb06 	br	3918 <__alt_data_end+0xfffae1e8>
    412c:	01000074 	movhi	r4,1
    4130:	2106fc84 	addi	r4,r4,7154
    4134:	d9012c15 	stw	r4,1200(sp)
    4138:	d9012c17 	ldw	r4,1200(sp)
    413c:	1c07883a 	add	r3,r3,r16
    4140:	10800044 	addi	r2,r2,1
    4144:	41000015 	stw	r4,0(r8)
    4148:	44000115 	stw	r16,4(r8)
    414c:	d8c12015 	stw	r3,1152(sp)
    4150:	d8811f15 	stw	r2,1148(sp)
    4154:	010001c4 	movi	r4,7
    4158:	20bfae16 	blt	r4,r2,4014 <__alt_data_end+0xfffae8e4>
    415c:	42000204 	addi	r8,r8,8
    4160:	003fb406 	br	4034 <__alt_data_end+0xfffae904>
    4164:	0021883a 	mov	r16,zero
    4168:	003dfd06 	br	3960 <__alt_data_end+0xfffae230>
    416c:	01400074 	movhi	r5,1
    4170:	29470084 	addi	r5,r5,7170
    4174:	d9413615 	stw	r5,1240(sp)
    4178:	003ae306 	br	2d08 <__alt_data_end+0xfffad5d8>
    417c:	b809883a 	mov	r4,r23
    4180:	b00b883a 	mov	r5,r22
    4184:	d9811e04 	addi	r6,sp,1144
    4188:	000986c0 	call	986c <__sprint_r>
    418c:	1039bf1e 	bne	r2,zero,288c <__alt_data_end+0xfffad15c>
    4190:	d8812617 	ldw	r2,1176(sp)
    4194:	d9413317 	ldw	r5,1228(sp)
    4198:	d8c12017 	ldw	r3,1152(sp)
    419c:	da000404 	addi	r8,sp,16
    41a0:	2885c83a 	sub	r2,r5,r2
    41a4:	003ded06 	br	395c <__alt_data_end+0xfffae22c>
    41a8:	00800184 	movi	r2,6
    41ac:	1240012e 	bgeu	r2,r9,41b4 <___vfprintf_internal_r+0x1d88>
    41b0:	1013883a 	mov	r9,r2
    41b4:	4823883a 	mov	r17,r9
    41b8:	4805883a 	mov	r2,r9
    41bc:	4800b216 	blt	r9,zero,4488 <___vfprintf_internal_r+0x205c>
    41c0:	01400074 	movhi	r5,1
    41c4:	2946fa04 	addi	r5,r5,7144
    41c8:	d8812b15 	stw	r2,1196(sp)
    41cc:	dc812d15 	stw	r18,1204(sp)
    41d0:	d8013215 	stw	zero,1224(sp)
    41d4:	d8013415 	stw	zero,1232(sp)
    41d8:	d9413115 	stw	r5,1220(sp)
    41dc:	0005883a 	mov	r2,zero
    41e0:	003a1906 	br	2a48 <__alt_data_end+0xfffad318>
    41e4:	04c00b44 	movi	r19,45
    41e8:	dcc12785 	stb	r19,1182(sp)
    41ec:	003b0006 	br	2df0 <__alt_data_end+0xfffad6c0>
    41f0:	d8c12d17 	ldw	r3,1204(sp)
    41f4:	d9012f17 	ldw	r4,1212(sp)
    41f8:	18800017 	ldw	r2,0(r3)
    41fc:	18c00104 	addi	r3,r3,4
    4200:	d8c12d15 	stw	r3,1204(sp)
    4204:	11000015 	stw	r4,0(r2)
    4208:	0038c506 	br	2520 <__alt_data_end+0xfffacdf0>
    420c:	01400074 	movhi	r5,1
    4210:	2946ef04 	addi	r5,r5,7100
    4214:	d9413115 	stw	r5,1220(sp)
    4218:	003f2406 	br	3eac <__alt_data_end+0xfffae77c>
    421c:	00800b44 	movi	r2,45
    4220:	d8812785 	stb	r2,1182(sp)
    4224:	df012b15 	stw	fp,1196(sp)
    4228:	d8013215 	stw	zero,1224(sp)
    422c:	df012d17 	ldw	fp,1204(sp)
    4230:	00800b44 	movi	r2,45
    4234:	dc812d15 	stw	r18,1204(sp)
    4238:	003a0006 	br	2a3c <__alt_data_end+0xfffad30c>
    423c:	d8c12617 	ldw	r3,1176(sp)
    4240:	00bfff44 	movi	r2,-3
    4244:	18800a16 	blt	r3,r2,4270 <___vfprintf_internal_r+0x1e44>
    4248:	48c00916 	blt	r9,r3,4270 <___vfprintf_internal_r+0x1e44>
    424c:	d8c13415 	stw	r3,1232(sp)
    4250:	040019c4 	movi	r16,103
    4254:	003e7606 	br	3c30 <__alt_data_end+0xfffae500>
    4258:	01000074 	movhi	r4,1
    425c:	2106fc84 	addi	r4,r4,7154
    4260:	d9012c15 	stw	r4,1200(sp)
    4264:	003c8e06 	br	34a0 <__alt_data_end+0xfffadd70>
    4268:	5005883a 	mov	r2,r10
    426c:	003e6506 	br	3c04 <__alt_data_end+0xfffae4d4>
    4270:	843fff84 	addi	r16,r16,-2
    4274:	1d7fffc4 	addi	r21,r3,-1
    4278:	dd412615 	stw	r21,1176(sp)
    427c:	dc0122c5 	stb	r16,1163(sp)
    4280:	a8009216 	blt	r21,zero,44cc <___vfprintf_internal_r+0x20a0>
    4284:	00800ac4 	movi	r2,43
    4288:	d8812305 	stb	r2,1164(sp)
    428c:	00800244 	movi	r2,9
    4290:	1540660e 	bge	r2,r21,442c <___vfprintf_internal_r+0x2000>
    4294:	dcc122c4 	addi	r19,sp,1163
    4298:	dc012c15 	stw	r16,1200(sp)
    429c:	4023883a 	mov	r17,r8
    42a0:	9821883a 	mov	r16,r19
    42a4:	a809883a 	mov	r4,r21
    42a8:	01400284 	movi	r5,10
    42ac:	000c3340 	call	c334 <__modsi3>
    42b0:	10800c04 	addi	r2,r2,48
    42b4:	843fffc4 	addi	r16,r16,-1
    42b8:	a809883a 	mov	r4,r21
    42bc:	01400284 	movi	r5,10
    42c0:	80800005 	stb	r2,0(r16)
    42c4:	000c2e00 	call	c2e0 <__divsi3>
    42c8:	01000244 	movi	r4,9
    42cc:	102b883a 	mov	r21,r2
    42d0:	20bff416 	blt	r4,r2,42a4 <__alt_data_end+0xfffaeb74>
    42d4:	8811883a 	mov	r8,r17
    42d8:	10800c04 	addi	r2,r2,48
    42dc:	8023883a 	mov	r17,r16
    42e0:	897fffc4 	addi	r5,r17,-1
    42e4:	88bfffc5 	stb	r2,-1(r17)
    42e8:	dc012c17 	ldw	r16,1200(sp)
    42ec:	2cc08a2e 	bgeu	r5,r19,4518 <___vfprintf_internal_r+0x20ec>
    42f0:	d9812384 	addi	r6,sp,1166
    42f4:	344dc83a 	sub	r6,r6,r17
    42f8:	d9012344 	addi	r4,sp,1165
    42fc:	998d883a 	add	r6,r19,r6
    4300:	00000106 	br	4308 <___vfprintf_internal_r+0x1edc>
    4304:	28800003 	ldbu	r2,0(r5)
    4308:	20800005 	stb	r2,0(r4)
    430c:	21000044 	addi	r4,r4,1
    4310:	29400044 	addi	r5,r5,1
    4314:	21bffb1e 	bne	r4,r6,4304 <__alt_data_end+0xfffaebd4>
    4318:	d8812304 	addi	r2,sp,1164
    431c:	1445c83a 	sub	r2,r2,r17
    4320:	d9412344 	addi	r5,sp,1165
    4324:	2885883a 	add	r2,r5,r2
    4328:	14e7c83a 	sub	r19,r2,r19
    432c:	d8813317 	ldw	r2,1228(sp)
    4330:	d8c13317 	ldw	r3,1228(sp)
    4334:	dcc13a15 	stw	r19,1256(sp)
    4338:	14e3883a 	add	r17,r2,r19
    433c:	00800044 	movi	r2,1
    4340:	10c0550e 	bge	r2,r3,4498 <___vfprintf_internal_r+0x206c>
    4344:	8c400044 	addi	r17,r17,1
    4348:	8839883a 	mov	fp,r17
    434c:	88005016 	blt	r17,zero,4490 <___vfprintf_internal_r+0x2064>
    4350:	d8013415 	stw	zero,1232(sp)
    4354:	003e3f06 	br	3c54 <__alt_data_end+0xfffae524>
    4358:	da412b15 	stw	r9,1196(sp)
    435c:	dcc12783 	ldbu	r19,1182(sp)
    4360:	4823883a 	mov	r17,r9
    4364:	dc812d15 	stw	r18,1204(sp)
    4368:	d8013215 	stw	zero,1224(sp)
    436c:	d8013415 	stw	zero,1232(sp)
    4370:	0039ae06 	br	2a2c <__alt_data_end+0xfffad2fc>
    4374:	483de91e 	bne	r9,zero,3b1c <__alt_data_end+0xfffae3ec>
    4378:	8813883a 	mov	r9,r17
    437c:	003de706 	br	3b1c <__alt_data_end+0xfffae3ec>
    4380:	b809883a 	mov	r4,r23
    4384:	b00b883a 	mov	r5,r22
    4388:	d9811e04 	addi	r6,sp,1144
    438c:	000986c0 	call	986c <__sprint_r>
    4390:	10393e1e 	bne	r2,zero,288c <__alt_data_end+0xfffad15c>
    4394:	dc012617 	ldw	r16,1176(sp)
    4398:	d8c12017 	ldw	r3,1152(sp)
    439c:	d8811f17 	ldw	r2,1148(sp)
    43a0:	da000404 	addi	r8,sp,16
    43a4:	003ea006 	br	3e28 <__alt_data_end+0xfffae6f8>
    43a8:	00c00b44 	movi	r3,45
    43ac:	2460003c 	xorhi	r17,r4,32768
    43b0:	d8c12b05 	stb	r3,1196(sp)
    43b4:	003ddf06 	br	3b34 <__alt_data_end+0xfffae404>
    43b8:	02400184 	movi	r9,6
    43bc:	003dd706 	br	3b1c <__alt_data_end+0xfffae3ec>
    43c0:	4d400044 	addi	r21,r9,1
    43c4:	003de206 	br	3b50 <__alt_data_end+0xfffae420>
    43c8:	d8c13417 	ldw	r3,1232(sp)
    43cc:	00c0490e 	bge	zero,r3,44f4 <___vfprintf_internal_r+0x20c8>
    43d0:	04400044 	movi	r17,1
    43d4:	d9013317 	ldw	r4,1228(sp)
    43d8:	8923883a 	add	r17,r17,r4
    43dc:	8839883a 	mov	fp,r17
    43e0:	883e1c0e 	bge	r17,zero,3c54 <__alt_data_end+0xfffae524>
    43e4:	0039883a 	mov	fp,zero
    43e8:	003e1a06 	br	3c54 <__alt_data_end+0xfffae524>
    43ec:	00c03b0e 	bge	zero,r3,44dc <___vfprintf_internal_r+0x20b0>
    43f0:	4800021e 	bne	r9,zero,43fc <___vfprintf_internal_r+0x1fd0>
    43f4:	e080004c 	andi	r2,fp,1
    43f8:	10000626 	beq	r2,zero,4414 <___vfprintf_internal_r+0x1fe8>
    43fc:	d8c13417 	ldw	r3,1232(sp)
    4400:	4a400044 	addi	r9,r9,1
    4404:	1a63883a 	add	r17,r3,r9
    4408:	8839883a 	mov	fp,r17
    440c:	883e110e 	bge	r17,zero,3c54 <__alt_data_end+0xfffae524>
    4410:	003ff406 	br	43e4 <__alt_data_end+0xfffaecb4>
    4414:	1839883a 	mov	fp,r3
    4418:	18004116 	blt	r3,zero,4520 <___vfprintf_internal_r+0x20f4>
    441c:	dc413417 	ldw	r17,1232(sp)
    4420:	003e0c06 	br	3c54 <__alt_data_end+0xfffae524>
    4424:	d8812117 	ldw	r2,1156(sp)
    4428:	003df606 	br	3c04 <__alt_data_end+0xfffae4d4>
    442c:	00800c04 	movi	r2,48
    4430:	a8c00c04 	addi	r3,r21,48
    4434:	d8812345 	stb	r2,1165(sp)
    4438:	d8c12385 	stb	r3,1166(sp)
    443c:	d88123c4 	addi	r2,sp,1167
    4440:	dcc122c4 	addi	r19,sp,1163
    4444:	003fb806 	br	4328 <__alt_data_end+0xfffaebf8>
    4448:	d9013717 	ldw	r4,1244(sp)
    444c:	880b883a 	mov	r5,r17
    4450:	000d883a 	mov	r6,zero
    4454:	000f883a 	mov	r7,zero
    4458:	da013f15 	stw	r8,1276(sp)
    445c:	da413e15 	stw	r9,1272(sp)
    4460:	da813d15 	stw	r10,1268(sp)
    4464:	000d5e40 	call	d5e4 <__eqdf2>
    4468:	da013f17 	ldw	r8,1276(sp)
    446c:	da413e17 	ldw	r9,1272(sp)
    4470:	da813d17 	ldw	r10,1268(sp)
    4474:	103f1726 	beq	r2,zero,40d4 <__alt_data_end+0xfffae9a4>
    4478:	00800044 	movi	r2,1
    447c:	1547c83a 	sub	r3,r2,r21
    4480:	d8c12615 	stw	r3,1176(sp)
    4484:	003f1406 	br	40d8 <__alt_data_end+0xfffae9a8>
    4488:	0005883a 	mov	r2,zero
    448c:	003f4c06 	br	41c0 <__alt_data_end+0xfffaea90>
    4490:	0039883a 	mov	fp,zero
    4494:	003fae06 	br	4350 <__alt_data_end+0xfffaec20>
    4498:	e084703a 	and	r2,fp,r2
    449c:	103faa26 	beq	r2,zero,4348 <__alt_data_end+0xfffaec18>
    44a0:	003fa806 	br	4344 <__alt_data_end+0xfffaec14>
    44a4:	d9412d17 	ldw	r5,1204(sp)
    44a8:	2a400017 	ldw	r9,0(r5)
    44ac:	28c00104 	addi	r3,r5,4
    44b0:	d8c12d15 	stw	r3,1204(sp)
    44b4:	483ebc0e 	bge	r9,zero,3fa8 <__alt_data_end+0xfffae878>
    44b8:	027fffc4 	movi	r9,-1
    44bc:	e4000047 	ldb	r16,1(fp)
    44c0:	00384206 	br	25cc <__alt_data_end+0xffface9c>
    44c4:	043fffc4 	movi	r16,-1
    44c8:	0038ce06 	br	2804 <__alt_data_end+0xfffad0d4>
    44cc:	00800b44 	movi	r2,45
    44d0:	056bc83a 	sub	r21,zero,r21
    44d4:	d8812305 	stb	r2,1164(sp)
    44d8:	003f6c06 	br	428c <__alt_data_end+0xfffaeb5c>
    44dc:	4800081e 	bne	r9,zero,4500 <___vfprintf_internal_r+0x20d4>
    44e0:	e080004c 	andi	r2,fp,1
    44e4:	1000061e 	bne	r2,zero,4500 <___vfprintf_internal_r+0x20d4>
    44e8:	07000044 	movi	fp,1
    44ec:	e023883a 	mov	r17,fp
    44f0:	003dd806 	br	3c54 <__alt_data_end+0xfffae524>
    44f4:	04400084 	movi	r17,2
    44f8:	88e3c83a 	sub	r17,r17,r3
    44fc:	003fb506 	br	43d4 <__alt_data_end+0xfffaeca4>
    4500:	4c400084 	addi	r17,r9,2
    4504:	8839883a 	mov	fp,r17
    4508:	883dd20e 	bge	r17,zero,3c54 <__alt_data_end+0xfffae524>
    450c:	003fb506 	br	43e4 <__alt_data_end+0xfffaecb4>
    4510:	d8c12617 	ldw	r3,1176(sp)
    4514:	003f5706 	br	4274 <__alt_data_end+0xfffaeb44>
    4518:	d8812344 	addi	r2,sp,1165
    451c:	003f8206 	br	4328 <__alt_data_end+0xfffaebf8>
    4520:	0039883a 	mov	fp,zero
    4524:	003fbd06 	br	441c <__alt_data_end+0xfffaecec>

00004528 <__vfprintf_internal>:
    4528:	2007883a 	mov	r3,r4
    452c:	01000074 	movhi	r4,1
    4530:	210e5704 	addi	r4,r4,14684
    4534:	21000017 	ldw	r4,0(r4)
    4538:	2805883a 	mov	r2,r5
    453c:	300f883a 	mov	r7,r6
    4540:	180b883a 	mov	r5,r3
    4544:	100d883a 	mov	r6,r2
    4548:	000242c1 	jmpi	242c <___vfprintf_internal_r>

0000454c <__swsetup_r>:
    454c:	00800074 	movhi	r2,1
    4550:	defffd04 	addi	sp,sp,-12
    4554:	108e5704 	addi	r2,r2,14684
    4558:	dc400115 	stw	r17,4(sp)
    455c:	2023883a 	mov	r17,r4
    4560:	11000017 	ldw	r4,0(r2)
    4564:	dc000015 	stw	r16,0(sp)
    4568:	dfc00215 	stw	ra,8(sp)
    456c:	2821883a 	mov	r16,r5
    4570:	20000226 	beq	r4,zero,457c <__swsetup_r+0x30>
    4574:	20c00e17 	ldw	r3,56(r4)
    4578:	18002e26 	beq	r3,zero,4634 <__swsetup_r+0xe8>
    457c:	8080030b 	ldhu	r2,12(r16)
    4580:	10c0020c 	andi	r3,r2,8
    4584:	100d883a 	mov	r6,r2
    4588:	18000f26 	beq	r3,zero,45c8 <__swsetup_r+0x7c>
    458c:	80c00417 	ldw	r3,16(r16)
    4590:	18001526 	beq	r3,zero,45e8 <__swsetup_r+0x9c>
    4594:	1100004c 	andi	r4,r2,1
    4598:	20001c1e 	bne	r4,zero,460c <__swsetup_r+0xc0>
    459c:	1080008c 	andi	r2,r2,2
    45a0:	1000261e 	bne	r2,zero,463c <__swsetup_r+0xf0>
    45a4:	80800517 	ldw	r2,20(r16)
    45a8:	80800215 	stw	r2,8(r16)
    45ac:	18001c26 	beq	r3,zero,4620 <__swsetup_r+0xd4>
    45b0:	0005883a 	mov	r2,zero
    45b4:	dfc00217 	ldw	ra,8(sp)
    45b8:	dc400117 	ldw	r17,4(sp)
    45bc:	dc000017 	ldw	r16,0(sp)
    45c0:	dec00304 	addi	sp,sp,12
    45c4:	f800283a 	ret
    45c8:	3080040c 	andi	r2,r6,16
    45cc:	10001726 	beq	r2,zero,462c <__swsetup_r+0xe0>
    45d0:	3080010c 	andi	r2,r6,4
    45d4:	10001b1e 	bne	r2,zero,4644 <__swsetup_r+0xf8>
    45d8:	80c00417 	ldw	r3,16(r16)
    45dc:	30800214 	ori	r2,r6,8
    45e0:	8080030d 	sth	r2,12(r16)
    45e4:	183feb1e 	bne	r3,zero,4594 <__alt_data_end+0xfffaee64>
    45e8:	1140a00c 	andi	r5,r2,640
    45ec:	01008004 	movi	r4,512
    45f0:	293fe826 	beq	r5,r4,4594 <__alt_data_end+0xfffaee64>
    45f4:	8809883a 	mov	r4,r17
    45f8:	800b883a 	mov	r5,r16
    45fc:	00070e00 	call	70e0 <__smakebuf_r>
    4600:	8080030b 	ldhu	r2,12(r16)
    4604:	80c00417 	ldw	r3,16(r16)
    4608:	003fe206 	br	4594 <__alt_data_end+0xfffaee64>
    460c:	80800517 	ldw	r2,20(r16)
    4610:	80000215 	stw	zero,8(r16)
    4614:	0085c83a 	sub	r2,zero,r2
    4618:	80800615 	stw	r2,24(r16)
    461c:	183fe41e 	bne	r3,zero,45b0 <__alt_data_end+0xfffaee80>
    4620:	8080030b 	ldhu	r2,12(r16)
    4624:	1080200c 	andi	r2,r2,128
    4628:	103fe226 	beq	r2,zero,45b4 <__alt_data_end+0xfffaee84>
    462c:	00bfffc4 	movi	r2,-1
    4630:	003fe006 	br	45b4 <__alt_data_end+0xfffaee84>
    4634:	00065880 	call	6588 <__sinit>
    4638:	003fd006 	br	457c <__alt_data_end+0xfffaee4c>
    463c:	0005883a 	mov	r2,zero
    4640:	003fd906 	br	45a8 <__alt_data_end+0xfffaee78>
    4644:	81400c17 	ldw	r5,48(r16)
    4648:	28000626 	beq	r5,zero,4664 <__swsetup_r+0x118>
    464c:	80801004 	addi	r2,r16,64
    4650:	28800326 	beq	r5,r2,4660 <__swsetup_r+0x114>
    4654:	8809883a 	mov	r4,r17
    4658:	00066fc0 	call	66fc <_free_r>
    465c:	8180030b 	ldhu	r6,12(r16)
    4660:	80000c15 	stw	zero,48(r16)
    4664:	80c00417 	ldw	r3,16(r16)
    4668:	00bff6c4 	movi	r2,-37
    466c:	118c703a 	and	r6,r2,r6
    4670:	80000115 	stw	zero,4(r16)
    4674:	80c00015 	stw	r3,0(r16)
    4678:	003fd806 	br	45dc <__alt_data_end+0xfffaeeac>

0000467c <quorem>:
    467c:	defff204 	addi	sp,sp,-56
    4680:	ddc00b15 	stw	r23,44(sp)
    4684:	20800417 	ldw	r2,16(r4)
    4688:	2dc00417 	ldw	r23,16(r5)
    468c:	dfc00d15 	stw	ra,52(sp)
    4690:	df000c15 	stw	fp,48(sp)
    4694:	dd800a15 	stw	r22,40(sp)
    4698:	dd400915 	stw	r21,36(sp)
    469c:	dd000815 	stw	r20,32(sp)
    46a0:	dcc00715 	stw	r19,28(sp)
    46a4:	dc800615 	stw	r18,24(sp)
    46a8:	dc400515 	stw	r17,20(sp)
    46ac:	dc000415 	stw	r16,16(sp)
    46b0:	15c07a16 	blt	r2,r23,489c <quorem+0x220>
    46b4:	bdffffc4 	addi	r23,r23,-1
    46b8:	bde9883a 	add	r20,r23,r23
    46bc:	28c00504 	addi	r3,r5,20
    46c0:	a529883a 	add	r20,r20,r20
    46c4:	1d39883a 	add	fp,r3,r20
    46c8:	24c00504 	addi	r19,r4,20
    46cc:	d9400215 	stw	r5,8(sp)
    46d0:	9d29883a 	add	r20,r19,r20
    46d4:	e1400017 	ldw	r5,0(fp)
    46d8:	d9000015 	stw	r4,0(sp)
    46dc:	a1000017 	ldw	r4,0(r20)
    46e0:	29400044 	addi	r5,r5,1
    46e4:	d8c00115 	stw	r3,4(sp)
    46e8:	dd000315 	stw	r20,12(sp)
    46ec:	000c3900 	call	c390 <__udivsi3>
    46f0:	1025883a 	mov	r18,r2
    46f4:	10003026 	beq	r2,zero,47b8 <quorem+0x13c>
    46f8:	dc400117 	ldw	r17,4(sp)
    46fc:	9829883a 	mov	r20,r19
    4700:	002d883a 	mov	r22,zero
    4704:	0021883a 	mov	r16,zero
    4708:	8d400017 	ldw	r21,0(r17)
    470c:	900b883a 	mov	r5,r18
    4710:	8c400104 	addi	r17,r17,4
    4714:	a93fffcc 	andi	r4,r21,65535
    4718:	000c3a00 	call	c3a0 <__mulsi3>
    471c:	a808d43a 	srli	r4,r21,16
    4720:	900b883a 	mov	r5,r18
    4724:	b0ad883a 	add	r22,r22,r2
    4728:	000c3a00 	call	c3a0 <__mulsi3>
    472c:	a1000017 	ldw	r4,0(r20)
    4730:	b00cd43a 	srli	r6,r22,16
    4734:	b0ffffcc 	andi	r3,r22,65535
    4738:	217fffcc 	andi	r5,r4,65535
    473c:	2c21883a 	add	r16,r5,r16
    4740:	80c7c83a 	sub	r3,r16,r3
    4744:	2008d43a 	srli	r4,r4,16
    4748:	3085883a 	add	r2,r6,r2
    474c:	1821d43a 	srai	r16,r3,16
    4750:	117fffcc 	andi	r5,r2,65535
    4754:	2149c83a 	sub	r4,r4,r5
    4758:	2421883a 	add	r16,r4,r16
    475c:	8008943a 	slli	r4,r16,16
    4760:	18ffffcc 	andi	r3,r3,65535
    4764:	102cd43a 	srli	r22,r2,16
    4768:	20c8b03a 	or	r4,r4,r3
    476c:	a1000015 	stw	r4,0(r20)
    4770:	8021d43a 	srai	r16,r16,16
    4774:	a5000104 	addi	r20,r20,4
    4778:	e47fe32e 	bgeu	fp,r17,4708 <__alt_data_end+0xfffaefd8>
    477c:	d8c00317 	ldw	r3,12(sp)
    4780:	18800017 	ldw	r2,0(r3)
    4784:	10000c1e 	bne	r2,zero,47b8 <quorem+0x13c>
    4788:	18bfff04 	addi	r2,r3,-4
    478c:	9880082e 	bgeu	r19,r2,47b0 <quorem+0x134>
    4790:	18ffff17 	ldw	r3,-4(r3)
    4794:	18000326 	beq	r3,zero,47a4 <quorem+0x128>
    4798:	00000506 	br	47b0 <quorem+0x134>
    479c:	10c00017 	ldw	r3,0(r2)
    47a0:	1800031e 	bne	r3,zero,47b0 <quorem+0x134>
    47a4:	10bfff04 	addi	r2,r2,-4
    47a8:	bdffffc4 	addi	r23,r23,-1
    47ac:	98bffb36 	bltu	r19,r2,479c <__alt_data_end+0xfffaf06c>
    47b0:	d8c00017 	ldw	r3,0(sp)
    47b4:	1dc00415 	stw	r23,16(r3)
    47b8:	d9000017 	ldw	r4,0(sp)
    47bc:	d9400217 	ldw	r5,8(sp)
    47c0:	000885c0 	call	885c <__mcmp>
    47c4:	10002816 	blt	r2,zero,4868 <quorem+0x1ec>
    47c8:	dc400117 	ldw	r17,4(sp)
    47cc:	94800044 	addi	r18,r18,1
    47d0:	980d883a 	mov	r6,r19
    47d4:	0007883a 	mov	r3,zero
    47d8:	31000017 	ldw	r4,0(r6)
    47dc:	89400017 	ldw	r5,0(r17)
    47e0:	31800104 	addi	r6,r6,4
    47e4:	20bfffcc 	andi	r2,r4,65535
    47e8:	10c7883a 	add	r3,r2,r3
    47ec:	28bfffcc 	andi	r2,r5,65535
    47f0:	1885c83a 	sub	r2,r3,r2
    47f4:	280ad43a 	srli	r5,r5,16
    47f8:	2008d43a 	srli	r4,r4,16
    47fc:	1007d43a 	srai	r3,r2,16
    4800:	10bfffcc 	andi	r2,r2,65535
    4804:	2149c83a 	sub	r4,r4,r5
    4808:	20c9883a 	add	r4,r4,r3
    480c:	200a943a 	slli	r5,r4,16
    4810:	8c400104 	addi	r17,r17,4
    4814:	2007d43a 	srai	r3,r4,16
    4818:	2884b03a 	or	r2,r5,r2
    481c:	30bfff15 	stw	r2,-4(r6)
    4820:	e47fed2e 	bgeu	fp,r17,47d8 <__alt_data_end+0xfffaf0a8>
    4824:	bdc5883a 	add	r2,r23,r23
    4828:	1085883a 	add	r2,r2,r2
    482c:	9887883a 	add	r3,r19,r2
    4830:	18800017 	ldw	r2,0(r3)
    4834:	10000c1e 	bne	r2,zero,4868 <quorem+0x1ec>
    4838:	18bfff04 	addi	r2,r3,-4
    483c:	9880082e 	bgeu	r19,r2,4860 <quorem+0x1e4>
    4840:	18ffff17 	ldw	r3,-4(r3)
    4844:	18000326 	beq	r3,zero,4854 <quorem+0x1d8>
    4848:	00000506 	br	4860 <quorem+0x1e4>
    484c:	10c00017 	ldw	r3,0(r2)
    4850:	1800031e 	bne	r3,zero,4860 <quorem+0x1e4>
    4854:	10bfff04 	addi	r2,r2,-4
    4858:	bdffffc4 	addi	r23,r23,-1
    485c:	98bffb36 	bltu	r19,r2,484c <__alt_data_end+0xfffaf11c>
    4860:	d8c00017 	ldw	r3,0(sp)
    4864:	1dc00415 	stw	r23,16(r3)
    4868:	9005883a 	mov	r2,r18
    486c:	dfc00d17 	ldw	ra,52(sp)
    4870:	df000c17 	ldw	fp,48(sp)
    4874:	ddc00b17 	ldw	r23,44(sp)
    4878:	dd800a17 	ldw	r22,40(sp)
    487c:	dd400917 	ldw	r21,36(sp)
    4880:	dd000817 	ldw	r20,32(sp)
    4884:	dcc00717 	ldw	r19,28(sp)
    4888:	dc800617 	ldw	r18,24(sp)
    488c:	dc400517 	ldw	r17,20(sp)
    4890:	dc000417 	ldw	r16,16(sp)
    4894:	dec00e04 	addi	sp,sp,56
    4898:	f800283a 	ret
    489c:	0005883a 	mov	r2,zero
    48a0:	003ff206 	br	486c <__alt_data_end+0xfffaf13c>

000048a4 <_dtoa_r>:
    48a4:	20801017 	ldw	r2,64(r4)
    48a8:	deffde04 	addi	sp,sp,-136
    48ac:	dd401d15 	stw	r21,116(sp)
    48b0:	dcc01b15 	stw	r19,108(sp)
    48b4:	dc801a15 	stw	r18,104(sp)
    48b8:	dc401915 	stw	r17,100(sp)
    48bc:	dc001815 	stw	r16,96(sp)
    48c0:	dfc02115 	stw	ra,132(sp)
    48c4:	df002015 	stw	fp,128(sp)
    48c8:	ddc01f15 	stw	r23,124(sp)
    48cc:	dd801e15 	stw	r22,120(sp)
    48d0:	dd001c15 	stw	r20,112(sp)
    48d4:	d9c00315 	stw	r7,12(sp)
    48d8:	2021883a 	mov	r16,r4
    48dc:	302b883a 	mov	r21,r6
    48e0:	2825883a 	mov	r18,r5
    48e4:	dc402417 	ldw	r17,144(sp)
    48e8:	3027883a 	mov	r19,r6
    48ec:	10000826 	beq	r2,zero,4910 <_dtoa_r+0x6c>
    48f0:	21801117 	ldw	r6,68(r4)
    48f4:	00c00044 	movi	r3,1
    48f8:	100b883a 	mov	r5,r2
    48fc:	1986983a 	sll	r3,r3,r6
    4900:	11800115 	stw	r6,4(r2)
    4904:	10c00215 	stw	r3,8(r2)
    4908:	0007f880 	call	7f88 <_Bfree>
    490c:	80001015 	stw	zero,64(r16)
    4910:	a8002d16 	blt	r21,zero,49c8 <_dtoa_r+0x124>
    4914:	88000015 	stw	zero,0(r17)
    4918:	a8dffc2c 	andhi	r3,r21,32752
    491c:	009ffc34 	movhi	r2,32752
    4920:	18801b26 	beq	r3,r2,4990 <_dtoa_r+0xec>
    4924:	9009883a 	mov	r4,r18
    4928:	980b883a 	mov	r5,r19
    492c:	000d883a 	mov	r6,zero
    4930:	000f883a 	mov	r7,zero
    4934:	000d5e40 	call	d5e4 <__eqdf2>
    4938:	10002a1e 	bne	r2,zero,49e4 <_dtoa_r+0x140>
    493c:	d8c02317 	ldw	r3,140(sp)
    4940:	d9002517 	ldw	r4,148(sp)
    4944:	00800044 	movi	r2,1
    4948:	18800015 	stw	r2,0(r3)
    494c:	2001a226 	beq	r4,zero,4fd8 <_dtoa_r+0x734>
    4950:	00800074 	movhi	r2,1
    4954:	1086fc44 	addi	r2,r2,7153
    4958:	20800015 	stw	r2,0(r4)
    495c:	10bfffc4 	addi	r2,r2,-1
    4960:	dfc02117 	ldw	ra,132(sp)
    4964:	df002017 	ldw	fp,128(sp)
    4968:	ddc01f17 	ldw	r23,124(sp)
    496c:	dd801e17 	ldw	r22,120(sp)
    4970:	dd401d17 	ldw	r21,116(sp)
    4974:	dd001c17 	ldw	r20,112(sp)
    4978:	dcc01b17 	ldw	r19,108(sp)
    497c:	dc801a17 	ldw	r18,104(sp)
    4980:	dc401917 	ldw	r17,100(sp)
    4984:	dc001817 	ldw	r16,96(sp)
    4988:	dec02204 	addi	sp,sp,136
    498c:	f800283a 	ret
    4990:	d8c02317 	ldw	r3,140(sp)
    4994:	0089c3c4 	movi	r2,9999
    4998:	18800015 	stw	r2,0(r3)
    499c:	90017c26 	beq	r18,zero,4f90 <_dtoa_r+0x6ec>
    49a0:	00800074 	movhi	r2,1
    49a4:	10870804 	addi	r2,r2,7200
    49a8:	d9002517 	ldw	r4,148(sp)
    49ac:	203fec26 	beq	r4,zero,4960 <__alt_data_end+0xfffaf230>
    49b0:	10c000c7 	ldb	r3,3(r2)
    49b4:	18017d1e 	bne	r3,zero,4fac <_dtoa_r+0x708>
    49b8:	10c000c4 	addi	r3,r2,3
    49bc:	d9802517 	ldw	r6,148(sp)
    49c0:	30c00015 	stw	r3,0(r6)
    49c4:	003fe606 	br	4960 <__alt_data_end+0xfffaf230>
    49c8:	04e00034 	movhi	r19,32768
    49cc:	9cffffc4 	addi	r19,r19,-1
    49d0:	00800044 	movi	r2,1
    49d4:	ace6703a 	and	r19,r21,r19
    49d8:	88800015 	stw	r2,0(r17)
    49dc:	982b883a 	mov	r21,r19
    49e0:	003fcd06 	br	4918 <__alt_data_end+0xfffaf1e8>
    49e4:	d8800204 	addi	r2,sp,8
    49e8:	a822d53a 	srli	r17,r21,20
    49ec:	d8800015 	stw	r2,0(sp)
    49f0:	8009883a 	mov	r4,r16
    49f4:	900b883a 	mov	r5,r18
    49f8:	980d883a 	mov	r6,r19
    49fc:	d9c00104 	addi	r7,sp,4
    4a00:	0008bd00 	call	8bd0 <__d2b>
    4a04:	1039883a 	mov	fp,r2
    4a08:	88016a1e 	bne	r17,zero,4fb4 <_dtoa_r+0x710>
    4a0c:	dd000217 	ldw	r20,8(sp)
    4a10:	dc400117 	ldw	r17,4(sp)
    4a14:	00befbc4 	movi	r2,-1041
    4a18:	a463883a 	add	r17,r20,r17
    4a1c:	8882ea16 	blt	r17,r2,55c8 <_dtoa_r+0xd24>
    4a20:	00bf0384 	movi	r2,-1010
    4a24:	1445c83a 	sub	r2,r2,r17
    4a28:	89010484 	addi	r4,r17,1042
    4a2c:	a8aa983a 	sll	r21,r21,r2
    4a30:	9108d83a 	srl	r4,r18,r4
    4a34:	a908b03a 	or	r4,r21,r4
    4a38:	000eabc0 	call	eabc <__floatunsidf>
    4a3c:	017f8434 	movhi	r5,65040
    4a40:	01800044 	movi	r6,1
    4a44:	1009883a 	mov	r4,r2
    4a48:	194b883a 	add	r5,r3,r5
    4a4c:	8c7fffc4 	addi	r17,r17,-1
    4a50:	d9800f15 	stw	r6,60(sp)
    4a54:	000d883a 	mov	r6,zero
    4a58:	01cffe34 	movhi	r7,16376
    4a5c:	000e0940 	call	e094 <__subdf3>
    4a60:	0198dbf4 	movhi	r6,25455
    4a64:	01cff4f4 	movhi	r7,16339
    4a68:	1009883a 	mov	r4,r2
    4a6c:	180b883a 	mov	r5,r3
    4a70:	3190d844 	addi	r6,r6,17249
    4a74:	39e1e9c4 	addi	r7,r7,-30809
    4a78:	000d8280 	call	d828 <__muldf3>
    4a7c:	01a2d874 	movhi	r6,35681
    4a80:	01cff1f4 	movhi	r7,16327
    4a84:	180b883a 	mov	r5,r3
    4a88:	31b22cc4 	addi	r6,r6,-14157
    4a8c:	39e28a04 	addi	r7,r7,-30168
    4a90:	1009883a 	mov	r4,r2
    4a94:	000c3c80 	call	c3c8 <__adddf3>
    4a98:	8809883a 	mov	r4,r17
    4a9c:	102d883a 	mov	r22,r2
    4aa0:	182b883a 	mov	r21,r3
    4aa4:	000e9ec0 	call	e9ec <__floatsidf>
    4aa8:	019427f4 	movhi	r6,20639
    4aac:	01cff4f4 	movhi	r7,16339
    4ab0:	1009883a 	mov	r4,r2
    4ab4:	180b883a 	mov	r5,r3
    4ab8:	319e7ec4 	addi	r6,r6,31227
    4abc:	39d104c4 	addi	r7,r7,17427
    4ac0:	000d8280 	call	d828 <__muldf3>
    4ac4:	b009883a 	mov	r4,r22
    4ac8:	a80b883a 	mov	r5,r21
    4acc:	100d883a 	mov	r6,r2
    4ad0:	180f883a 	mov	r7,r3
    4ad4:	000c3c80 	call	c3c8 <__adddf3>
    4ad8:	1009883a 	mov	r4,r2
    4adc:	180b883a 	mov	r5,r3
    4ae0:	102d883a 	mov	r22,r2
    4ae4:	182b883a 	mov	r21,r3
    4ae8:	000e9640 	call	e964 <__fixdfsi>
    4aec:	b009883a 	mov	r4,r22
    4af0:	a80b883a 	mov	r5,r21
    4af4:	000d883a 	mov	r6,zero
    4af8:	000f883a 	mov	r7,zero
    4afc:	d8800515 	stw	r2,20(sp)
    4b00:	000d7480 	call	d748 <__ledf2>
    4b04:	10023116 	blt	r2,zero,53cc <_dtoa_r+0xb28>
    4b08:	d8c00517 	ldw	r3,20(sp)
    4b0c:	00800584 	movi	r2,22
    4b10:	10c21f36 	bltu	r2,r3,5390 <_dtoa_r+0xaec>
    4b14:	180490fa 	slli	r2,r3,3
    4b18:	00c00074 	movhi	r3,1
    4b1c:	18c72404 	addi	r3,r3,7312
    4b20:	1885883a 	add	r2,r3,r2
    4b24:	11000017 	ldw	r4,0(r2)
    4b28:	11400117 	ldw	r5,4(r2)
    4b2c:	900d883a 	mov	r6,r18
    4b30:	980f883a 	mov	r7,r19
    4b34:	000d6680 	call	d668 <__gedf2>
    4b38:	0082a70e 	bge	zero,r2,55d8 <_dtoa_r+0xd34>
    4b3c:	d9000517 	ldw	r4,20(sp)
    4b40:	d8000c15 	stw	zero,48(sp)
    4b44:	213fffc4 	addi	r4,r4,-1
    4b48:	d9000515 	stw	r4,20(sp)
    4b4c:	a463c83a 	sub	r17,r20,r17
    4b50:	8dbfffc4 	addi	r22,r17,-1
    4b54:	b0021916 	blt	r22,zero,53bc <_dtoa_r+0xb18>
    4b58:	d8000815 	stw	zero,32(sp)
    4b5c:	d8800517 	ldw	r2,20(sp)
    4b60:	10020e16 	blt	r2,zero,539c <_dtoa_r+0xaf8>
    4b64:	b0ad883a 	add	r22,r22,r2
    4b68:	d8800a15 	stw	r2,40(sp)
    4b6c:	d8000915 	stw	zero,36(sp)
    4b70:	d8c00317 	ldw	r3,12(sp)
    4b74:	00800244 	movi	r2,9
    4b78:	10c11a36 	bltu	r2,r3,4fe4 <_dtoa_r+0x740>
    4b7c:	00800144 	movi	r2,5
    4b80:	10c4fc0e 	bge	r2,r3,5f74 <_dtoa_r+0x16d0>
    4b84:	18ffff04 	addi	r3,r3,-4
    4b88:	d8c00315 	stw	r3,12(sp)
    4b8c:	0029883a 	mov	r20,zero
    4b90:	d9800317 	ldw	r6,12(sp)
    4b94:	008000c4 	movi	r2,3
    4b98:	3083bd26 	beq	r6,r2,5a90 <_dtoa_r+0x11ec>
    4b9c:	1183670e 	bge	r2,r6,593c <_dtoa_r+0x1098>
    4ba0:	d8c00317 	ldw	r3,12(sp)
    4ba4:	00800104 	movi	r2,4
    4ba8:	1882e726 	beq	r3,r2,5748 <_dtoa_r+0xea4>
    4bac:	00800144 	movi	r2,5
    4bb0:	1884f21e 	bne	r3,r2,5f7c <_dtoa_r+0x16d8>
    4bb4:	00800044 	movi	r2,1
    4bb8:	d8800b15 	stw	r2,44(sp)
    4bbc:	d8c02217 	ldw	r3,136(sp)
    4bc0:	d9000517 	ldw	r4,20(sp)
    4bc4:	1907883a 	add	r3,r3,r4
    4bc8:	19800044 	addi	r6,r3,1
    4bcc:	d8c00d15 	stw	r3,52(sp)
    4bd0:	d9800615 	stw	r6,24(sp)
    4bd4:	0183c30e 	bge	zero,r6,5ae4 <_dtoa_r+0x1240>
    4bd8:	d9800617 	ldw	r6,24(sp)
    4bdc:	3023883a 	mov	r17,r6
    4be0:	80001115 	stw	zero,68(r16)
    4be4:	008005c4 	movi	r2,23
    4be8:	1184f62e 	bgeu	r2,r6,5fc4 <_dtoa_r+0x1720>
    4bec:	00c00044 	movi	r3,1
    4bf0:	00800104 	movi	r2,4
    4bf4:	1085883a 	add	r2,r2,r2
    4bf8:	11000504 	addi	r4,r2,20
    4bfc:	180b883a 	mov	r5,r3
    4c00:	18c00044 	addi	r3,r3,1
    4c04:	313ffb2e 	bgeu	r6,r4,4bf4 <__alt_data_end+0xfffaf4c4>
    4c08:	81401115 	stw	r5,68(r16)
    4c0c:	8009883a 	mov	r4,r16
    4c10:	0007ee00 	call	7ee0 <_Balloc>
    4c14:	d8800715 	stw	r2,28(sp)
    4c18:	80801015 	stw	r2,64(r16)
    4c1c:	00800384 	movi	r2,14
    4c20:	1440fd36 	bltu	r2,r17,5018 <_dtoa_r+0x774>
    4c24:	a000fc26 	beq	r20,zero,5018 <_dtoa_r+0x774>
    4c28:	d8800517 	ldw	r2,20(sp)
    4c2c:	0083b90e 	bge	zero,r2,5b14 <_dtoa_r+0x1270>
    4c30:	d8c00517 	ldw	r3,20(sp)
    4c34:	108003cc 	andi	r2,r2,15
    4c38:	100490fa 	slli	r2,r2,3
    4c3c:	182fd13a 	srai	r23,r3,4
    4c40:	00c00074 	movhi	r3,1
    4c44:	18c72404 	addi	r3,r3,7312
    4c48:	1885883a 	add	r2,r3,r2
    4c4c:	b8c0040c 	andi	r3,r23,16
    4c50:	12c00017 	ldw	r11,0(r2)
    4c54:	12800117 	ldw	r10,4(r2)
    4c58:	18039726 	beq	r3,zero,5ab8 <_dtoa_r+0x1214>
    4c5c:	00800074 	movhi	r2,1
    4c60:	10871a04 	addi	r2,r2,7272
    4c64:	11800817 	ldw	r6,32(r2)
    4c68:	11c00917 	ldw	r7,36(r2)
    4c6c:	9009883a 	mov	r4,r18
    4c70:	980b883a 	mov	r5,r19
    4c74:	da801615 	stw	r10,88(sp)
    4c78:	dac01515 	stw	r11,84(sp)
    4c7c:	000cc640 	call	cc64 <__divdf3>
    4c80:	da801617 	ldw	r10,88(sp)
    4c84:	dac01517 	ldw	r11,84(sp)
    4c88:	bdc003cc 	andi	r23,r23,15
    4c8c:	044000c4 	movi	r17,3
    4c90:	d8800e15 	stw	r2,56(sp)
    4c94:	182b883a 	mov	r21,r3
    4c98:	b8001126 	beq	r23,zero,4ce0 <_dtoa_r+0x43c>
    4c9c:	05000074 	movhi	r20,1
    4ca0:	a5071a04 	addi	r20,r20,7272
    4ca4:	5805883a 	mov	r2,r11
    4ca8:	5007883a 	mov	r3,r10
    4cac:	b980004c 	andi	r6,r23,1
    4cb0:	1009883a 	mov	r4,r2
    4cb4:	b82fd07a 	srai	r23,r23,1
    4cb8:	180b883a 	mov	r5,r3
    4cbc:	30000426 	beq	r6,zero,4cd0 <_dtoa_r+0x42c>
    4cc0:	a1800017 	ldw	r6,0(r20)
    4cc4:	a1c00117 	ldw	r7,4(r20)
    4cc8:	8c400044 	addi	r17,r17,1
    4ccc:	000d8280 	call	d828 <__muldf3>
    4cd0:	a5000204 	addi	r20,r20,8
    4cd4:	b83ff51e 	bne	r23,zero,4cac <__alt_data_end+0xfffaf57c>
    4cd8:	1017883a 	mov	r11,r2
    4cdc:	1815883a 	mov	r10,r3
    4ce0:	d9000e17 	ldw	r4,56(sp)
    4ce4:	a80b883a 	mov	r5,r21
    4ce8:	580d883a 	mov	r6,r11
    4cec:	500f883a 	mov	r7,r10
    4cf0:	000cc640 	call	cc64 <__divdf3>
    4cf4:	1029883a 	mov	r20,r2
    4cf8:	182b883a 	mov	r21,r3
    4cfc:	d9800c17 	ldw	r6,48(sp)
    4d00:	30000626 	beq	r6,zero,4d1c <_dtoa_r+0x478>
    4d04:	a009883a 	mov	r4,r20
    4d08:	a80b883a 	mov	r5,r21
    4d0c:	000d883a 	mov	r6,zero
    4d10:	01cffc34 	movhi	r7,16368
    4d14:	000d7480 	call	d748 <__ledf2>
    4d18:	10043216 	blt	r2,zero,5de4 <_dtoa_r+0x1540>
    4d1c:	8809883a 	mov	r4,r17
    4d20:	000e9ec0 	call	e9ec <__floatsidf>
    4d24:	1009883a 	mov	r4,r2
    4d28:	180b883a 	mov	r5,r3
    4d2c:	a00d883a 	mov	r6,r20
    4d30:	a80f883a 	mov	r7,r21
    4d34:	000d8280 	call	d828 <__muldf3>
    4d38:	000d883a 	mov	r6,zero
    4d3c:	1009883a 	mov	r4,r2
    4d40:	180b883a 	mov	r5,r3
    4d44:	01d00734 	movhi	r7,16412
    4d48:	000c3c80 	call	c3c8 <__adddf3>
    4d4c:	1023883a 	mov	r17,r2
    4d50:	d9800617 	ldw	r6,24(sp)
    4d54:	00bf3034 	movhi	r2,64704
    4d58:	1885883a 	add	r2,r3,r2
    4d5c:	d8800e15 	stw	r2,56(sp)
    4d60:	30032e26 	beq	r6,zero,5a1c <_dtoa_r+0x1178>
    4d64:	d8c00517 	ldw	r3,20(sp)
    4d68:	da800617 	ldw	r10,24(sp)
    4d6c:	d8c01215 	stw	r3,72(sp)
    4d70:	d9000b17 	ldw	r4,44(sp)
    4d74:	2003b026 	beq	r4,zero,5c38 <_dtoa_r+0x1394>
    4d78:	50bfffc4 	addi	r2,r10,-1
    4d7c:	100490fa 	slli	r2,r2,3
    4d80:	00c00074 	movhi	r3,1
    4d84:	18c72404 	addi	r3,r3,7312
    4d88:	1885883a 	add	r2,r3,r2
    4d8c:	11800017 	ldw	r6,0(r2)
    4d90:	11c00117 	ldw	r7,4(r2)
    4d94:	d8800717 	ldw	r2,28(sp)
    4d98:	0009883a 	mov	r4,zero
    4d9c:	014ff834 	movhi	r5,16352
    4da0:	da801615 	stw	r10,88(sp)
    4da4:	15c00044 	addi	r23,r2,1
    4da8:	000cc640 	call	cc64 <__divdf3>
    4dac:	d9c00e17 	ldw	r7,56(sp)
    4db0:	880d883a 	mov	r6,r17
    4db4:	1009883a 	mov	r4,r2
    4db8:	180b883a 	mov	r5,r3
    4dbc:	000e0940 	call	e094 <__subdf3>
    4dc0:	a80b883a 	mov	r5,r21
    4dc4:	a009883a 	mov	r4,r20
    4dc8:	d8c01015 	stw	r3,64(sp)
    4dcc:	d8800e15 	stw	r2,56(sp)
    4dd0:	000e9640 	call	e964 <__fixdfsi>
    4dd4:	1009883a 	mov	r4,r2
    4dd8:	d8801715 	stw	r2,92(sp)
    4ddc:	000e9ec0 	call	e9ec <__floatsidf>
    4de0:	a009883a 	mov	r4,r20
    4de4:	a80b883a 	mov	r5,r21
    4de8:	100d883a 	mov	r6,r2
    4dec:	180f883a 	mov	r7,r3
    4df0:	000e0940 	call	e094 <__subdf3>
    4df4:	da001717 	ldw	r8,92(sp)
    4df8:	1829883a 	mov	r20,r3
    4dfc:	d8c00717 	ldw	r3,28(sp)
    4e00:	d9000e17 	ldw	r4,56(sp)
    4e04:	d9401017 	ldw	r5,64(sp)
    4e08:	42000c04 	addi	r8,r8,48
    4e0c:	1023883a 	mov	r17,r2
    4e10:	1a000005 	stb	r8,0(r3)
    4e14:	880d883a 	mov	r6,r17
    4e18:	a00f883a 	mov	r7,r20
    4e1c:	402b883a 	mov	r21,r8
    4e20:	000d6680 	call	d668 <__gedf2>
    4e24:	00844516 	blt	zero,r2,5f3c <_dtoa_r+0x1698>
    4e28:	0009883a 	mov	r4,zero
    4e2c:	014ffc34 	movhi	r5,16368
    4e30:	880d883a 	mov	r6,r17
    4e34:	a00f883a 	mov	r7,r20
    4e38:	000e0940 	call	e094 <__subdf3>
    4e3c:	d9000e17 	ldw	r4,56(sp)
    4e40:	d9401017 	ldw	r5,64(sp)
    4e44:	100d883a 	mov	r6,r2
    4e48:	180f883a 	mov	r7,r3
    4e4c:	000d6680 	call	d668 <__gedf2>
    4e50:	da801617 	ldw	r10,88(sp)
    4e54:	00843616 	blt	zero,r2,5f30 <_dtoa_r+0x168c>
    4e58:	00800044 	movi	r2,1
    4e5c:	12806e0e 	bge	r2,r10,5018 <_dtoa_r+0x774>
    4e60:	d9000717 	ldw	r4,28(sp)
    4e64:	dd801315 	stw	r22,76(sp)
    4e68:	dc001115 	stw	r16,68(sp)
    4e6c:	2295883a 	add	r10,r4,r10
    4e70:	dcc01415 	stw	r19,80(sp)
    4e74:	502d883a 	mov	r22,r10
    4e78:	dcc01017 	ldw	r19,64(sp)
    4e7c:	b821883a 	mov	r16,r23
    4e80:	dc801015 	stw	r18,64(sp)
    4e84:	dc800e17 	ldw	r18,56(sp)
    4e88:	00000906 	br	4eb0 <_dtoa_r+0x60c>
    4e8c:	000e0940 	call	e094 <__subdf3>
    4e90:	1009883a 	mov	r4,r2
    4e94:	180b883a 	mov	r5,r3
    4e98:	900d883a 	mov	r6,r18
    4e9c:	980f883a 	mov	r7,r19
    4ea0:	000d7480 	call	d748 <__ledf2>
    4ea4:	10040e16 	blt	r2,zero,5ee0 <_dtoa_r+0x163c>
    4ea8:	b821883a 	mov	r16,r23
    4eac:	bd841026 	beq	r23,r22,5ef0 <_dtoa_r+0x164c>
    4eb0:	9009883a 	mov	r4,r18
    4eb4:	980b883a 	mov	r5,r19
    4eb8:	000d883a 	mov	r6,zero
    4ebc:	01d00934 	movhi	r7,16420
    4ec0:	000d8280 	call	d828 <__muldf3>
    4ec4:	000d883a 	mov	r6,zero
    4ec8:	01d00934 	movhi	r7,16420
    4ecc:	8809883a 	mov	r4,r17
    4ed0:	a00b883a 	mov	r5,r20
    4ed4:	1025883a 	mov	r18,r2
    4ed8:	1827883a 	mov	r19,r3
    4edc:	000d8280 	call	d828 <__muldf3>
    4ee0:	180b883a 	mov	r5,r3
    4ee4:	1009883a 	mov	r4,r2
    4ee8:	1823883a 	mov	r17,r3
    4eec:	1029883a 	mov	r20,r2
    4ef0:	000e9640 	call	e964 <__fixdfsi>
    4ef4:	1009883a 	mov	r4,r2
    4ef8:	102b883a 	mov	r21,r2
    4efc:	000e9ec0 	call	e9ec <__floatsidf>
    4f00:	a009883a 	mov	r4,r20
    4f04:	880b883a 	mov	r5,r17
    4f08:	100d883a 	mov	r6,r2
    4f0c:	180f883a 	mov	r7,r3
    4f10:	000e0940 	call	e094 <__subdf3>
    4f14:	ad400c04 	addi	r21,r21,48
    4f18:	1009883a 	mov	r4,r2
    4f1c:	180b883a 	mov	r5,r3
    4f20:	900d883a 	mov	r6,r18
    4f24:	980f883a 	mov	r7,r19
    4f28:	85400005 	stb	r21,0(r16)
    4f2c:	1023883a 	mov	r17,r2
    4f30:	1829883a 	mov	r20,r3
    4f34:	000d7480 	call	d748 <__ledf2>
    4f38:	bdc00044 	addi	r23,r23,1
    4f3c:	0009883a 	mov	r4,zero
    4f40:	014ffc34 	movhi	r5,16368
    4f44:	880d883a 	mov	r6,r17
    4f48:	a00f883a 	mov	r7,r20
    4f4c:	103fcf0e 	bge	r2,zero,4e8c <__alt_data_end+0xfffaf75c>
    4f50:	d9801217 	ldw	r6,72(sp)
    4f54:	dc001117 	ldw	r16,68(sp)
    4f58:	d9800515 	stw	r6,20(sp)
    4f5c:	8009883a 	mov	r4,r16
    4f60:	e00b883a 	mov	r5,fp
    4f64:	0007f880 	call	7f88 <_Bfree>
    4f68:	d8c00517 	ldw	r3,20(sp)
    4f6c:	d9002317 	ldw	r4,140(sp)
    4f70:	d9802517 	ldw	r6,148(sp)
    4f74:	b8000005 	stb	zero,0(r23)
    4f78:	18800044 	addi	r2,r3,1
    4f7c:	20800015 	stw	r2,0(r4)
    4f80:	30027226 	beq	r6,zero,594c <_dtoa_r+0x10a8>
    4f84:	35c00015 	stw	r23,0(r6)
    4f88:	d8800717 	ldw	r2,28(sp)
    4f8c:	003e7406 	br	4960 <__alt_data_end+0xfffaf230>
    4f90:	00800434 	movhi	r2,16
    4f94:	10bfffc4 	addi	r2,r2,-1
    4f98:	a8aa703a 	and	r21,r21,r2
    4f9c:	a83e801e 	bne	r21,zero,49a0 <__alt_data_end+0xfffaf270>
    4fa0:	00800074 	movhi	r2,1
    4fa4:	10870504 	addi	r2,r2,7188
    4fa8:	003e7f06 	br	49a8 <__alt_data_end+0xfffaf278>
    4fac:	10c00204 	addi	r3,r2,8
    4fb0:	003e8206 	br	49bc <__alt_data_end+0xfffaf28c>
    4fb4:	01400434 	movhi	r5,16
    4fb8:	297fffc4 	addi	r5,r5,-1
    4fbc:	994a703a 	and	r5,r19,r5
    4fc0:	9009883a 	mov	r4,r18
    4fc4:	8c7f0044 	addi	r17,r17,-1023
    4fc8:	294ffc34 	orhi	r5,r5,16368
    4fcc:	dd000217 	ldw	r20,8(sp)
    4fd0:	d8000f15 	stw	zero,60(sp)
    4fd4:	003e9f06 	br	4a54 <__alt_data_end+0xfffaf324>
    4fd8:	00800074 	movhi	r2,1
    4fdc:	1086fc04 	addi	r2,r2,7152
    4fe0:	003e5f06 	br	4960 <__alt_data_end+0xfffaf230>
    4fe4:	80001115 	stw	zero,68(r16)
    4fe8:	8009883a 	mov	r4,r16
    4fec:	000b883a 	mov	r5,zero
    4ff0:	0007ee00 	call	7ee0 <_Balloc>
    4ff4:	01bfffc4 	movi	r6,-1
    4ff8:	d8800715 	stw	r2,28(sp)
    4ffc:	80801015 	stw	r2,64(r16)
    5000:	00800044 	movi	r2,1
    5004:	d9800615 	stw	r6,24(sp)
    5008:	d8800b15 	stw	r2,44(sp)
    500c:	d8002215 	stw	zero,136(sp)
    5010:	d9800d15 	stw	r6,52(sp)
    5014:	d8000315 	stw	zero,12(sp)
    5018:	d8800117 	ldw	r2,4(sp)
    501c:	10008e16 	blt	r2,zero,5258 <_dtoa_r+0x9b4>
    5020:	d9000517 	ldw	r4,20(sp)
    5024:	00c00384 	movi	r3,14
    5028:	19008b16 	blt	r3,r4,5258 <_dtoa_r+0x9b4>
    502c:	200490fa 	slli	r2,r4,3
    5030:	00c00074 	movhi	r3,1
    5034:	d9802217 	ldw	r6,136(sp)
    5038:	18c72404 	addi	r3,r3,7312
    503c:	1885883a 	add	r2,r3,r2
    5040:	14400017 	ldw	r17,0(r2)
    5044:	15000117 	ldw	r20,4(r2)
    5048:	3001c716 	blt	r6,zero,5768 <_dtoa_r+0xec4>
    504c:	880d883a 	mov	r6,r17
    5050:	a00f883a 	mov	r7,r20
    5054:	9009883a 	mov	r4,r18
    5058:	980b883a 	mov	r5,r19
    505c:	000cc640 	call	cc64 <__divdf3>
    5060:	180b883a 	mov	r5,r3
    5064:	1009883a 	mov	r4,r2
    5068:	000e9640 	call	e964 <__fixdfsi>
    506c:	1009883a 	mov	r4,r2
    5070:	102d883a 	mov	r22,r2
    5074:	000e9ec0 	call	e9ec <__floatsidf>
    5078:	1009883a 	mov	r4,r2
    507c:	180b883a 	mov	r5,r3
    5080:	880d883a 	mov	r6,r17
    5084:	a00f883a 	mov	r7,r20
    5088:	000d8280 	call	d828 <__muldf3>
    508c:	9009883a 	mov	r4,r18
    5090:	980b883a 	mov	r5,r19
    5094:	100d883a 	mov	r6,r2
    5098:	180f883a 	mov	r7,r3
    509c:	000e0940 	call	e094 <__subdf3>
    50a0:	d9000717 	ldw	r4,28(sp)
    50a4:	d9800617 	ldw	r6,24(sp)
    50a8:	180b883a 	mov	r5,r3
    50ac:	b0c00c04 	addi	r3,r22,48
    50b0:	20c00005 	stb	r3,0(r4)
    50b4:	25c00044 	addi	r23,r4,1
    50b8:	01000044 	movi	r4,1
    50bc:	1011883a 	mov	r8,r2
    50c0:	2807883a 	mov	r3,r5
    50c4:	31003d26 	beq	r6,r4,51bc <_dtoa_r+0x918>
    50c8:	000d883a 	mov	r6,zero
    50cc:	01d00934 	movhi	r7,16420
    50d0:	1009883a 	mov	r4,r2
    50d4:	000d8280 	call	d828 <__muldf3>
    50d8:	1009883a 	mov	r4,r2
    50dc:	180b883a 	mov	r5,r3
    50e0:	000d883a 	mov	r6,zero
    50e4:	000f883a 	mov	r7,zero
    50e8:	1027883a 	mov	r19,r2
    50ec:	182b883a 	mov	r21,r3
    50f0:	000d5e40 	call	d5e4 <__eqdf2>
    50f4:	103f9926 	beq	r2,zero,4f5c <__alt_data_end+0xfffaf82c>
    50f8:	d8c00617 	ldw	r3,24(sp)
    50fc:	d9000717 	ldw	r4,28(sp)
    5100:	b825883a 	mov	r18,r23
    5104:	18bfffc4 	addi	r2,r3,-1
    5108:	20ad883a 	add	r22,r4,r2
    510c:	dc000315 	stw	r16,12(sp)
    5110:	00000a06 	br	513c <_dtoa_r+0x898>
    5114:	000d8280 	call	d828 <__muldf3>
    5118:	1009883a 	mov	r4,r2
    511c:	180b883a 	mov	r5,r3
    5120:	000d883a 	mov	r6,zero
    5124:	000f883a 	mov	r7,zero
    5128:	1027883a 	mov	r19,r2
    512c:	182b883a 	mov	r21,r3
    5130:	b825883a 	mov	r18,r23
    5134:	000d5e40 	call	d5e4 <__eqdf2>
    5138:	10022626 	beq	r2,zero,59d4 <_dtoa_r+0x1130>
    513c:	880d883a 	mov	r6,r17
    5140:	a00f883a 	mov	r7,r20
    5144:	9809883a 	mov	r4,r19
    5148:	a80b883a 	mov	r5,r21
    514c:	000cc640 	call	cc64 <__divdf3>
    5150:	180b883a 	mov	r5,r3
    5154:	1009883a 	mov	r4,r2
    5158:	000e9640 	call	e964 <__fixdfsi>
    515c:	1009883a 	mov	r4,r2
    5160:	1021883a 	mov	r16,r2
    5164:	000e9ec0 	call	e9ec <__floatsidf>
    5168:	1009883a 	mov	r4,r2
    516c:	180b883a 	mov	r5,r3
    5170:	880d883a 	mov	r6,r17
    5174:	a00f883a 	mov	r7,r20
    5178:	000d8280 	call	d828 <__muldf3>
    517c:	9809883a 	mov	r4,r19
    5180:	a80b883a 	mov	r5,r21
    5184:	100d883a 	mov	r6,r2
    5188:	180f883a 	mov	r7,r3
    518c:	000e0940 	call	e094 <__subdf3>
    5190:	82000c04 	addi	r8,r16,48
    5194:	92000005 	stb	r8,0(r18)
    5198:	1009883a 	mov	r4,r2
    519c:	180b883a 	mov	r5,r3
    51a0:	000d883a 	mov	r6,zero
    51a4:	01d00934 	movhi	r7,16420
    51a8:	1011883a 	mov	r8,r2
    51ac:	bdc00044 	addi	r23,r23,1
    51b0:	95bfd81e 	bne	r18,r22,5114 <__alt_data_end+0xfffaf9e4>
    51b4:	802d883a 	mov	r22,r16
    51b8:	dc000317 	ldw	r16,12(sp)
    51bc:	4009883a 	mov	r4,r8
    51c0:	180b883a 	mov	r5,r3
    51c4:	400d883a 	mov	r6,r8
    51c8:	180f883a 	mov	r7,r3
    51cc:	000c3c80 	call	c3c8 <__adddf3>
    51d0:	8809883a 	mov	r4,r17
    51d4:	a00b883a 	mov	r5,r20
    51d8:	100d883a 	mov	r6,r2
    51dc:	180f883a 	mov	r7,r3
    51e0:	1027883a 	mov	r19,r2
    51e4:	1825883a 	mov	r18,r3
    51e8:	000d7480 	call	d748 <__ledf2>
    51ec:	10000816 	blt	r2,zero,5210 <_dtoa_r+0x96c>
    51f0:	8809883a 	mov	r4,r17
    51f4:	a00b883a 	mov	r5,r20
    51f8:	980d883a 	mov	r6,r19
    51fc:	900f883a 	mov	r7,r18
    5200:	000d5e40 	call	d5e4 <__eqdf2>
    5204:	103f551e 	bne	r2,zero,4f5c <__alt_data_end+0xfffaf82c>
    5208:	b580004c 	andi	r22,r22,1
    520c:	b03f5326 	beq	r22,zero,4f5c <__alt_data_end+0xfffaf82c>
    5210:	bd7fffc3 	ldbu	r21,-1(r23)
    5214:	b8bfffc4 	addi	r2,r23,-1
    5218:	1007883a 	mov	r3,r2
    521c:	01400e44 	movi	r5,57
    5220:	d9800717 	ldw	r6,28(sp)
    5224:	00000506 	br	523c <_dtoa_r+0x998>
    5228:	18ffffc4 	addi	r3,r3,-1
    522c:	30825e26 	beq	r6,r2,5ba8 <_dtoa_r+0x1304>
    5230:	1d400003 	ldbu	r21,0(r3)
    5234:	102f883a 	mov	r23,r2
    5238:	10bfffc4 	addi	r2,r2,-1
    523c:	a9003fcc 	andi	r4,r21,255
    5240:	2100201c 	xori	r4,r4,128
    5244:	213fe004 	addi	r4,r4,-128
    5248:	217ff726 	beq	r4,r5,5228 <__alt_data_end+0xfffafaf8>
    524c:	aa000044 	addi	r8,r21,1
    5250:	12000005 	stb	r8,0(r2)
    5254:	003f4106 	br	4f5c <__alt_data_end+0xfffaf82c>
    5258:	d8c00b17 	ldw	r3,44(sp)
    525c:	18006726 	beq	r3,zero,53fc <_dtoa_r+0xb58>
    5260:	d9000317 	ldw	r4,12(sp)
    5264:	00c00044 	movi	r3,1
    5268:	19016a0e 	bge	r3,r4,5814 <_dtoa_r+0xf70>
    526c:	d8800617 	ldw	r2,24(sp)
    5270:	d8c00917 	ldw	r3,36(sp)
    5274:	157fffc4 	addi	r21,r2,-1
    5278:	1d420716 	blt	r3,r21,5a98 <_dtoa_r+0x11f4>
    527c:	1d6bc83a 	sub	r21,r3,r21
    5280:	d8800617 	ldw	r2,24(sp)
    5284:	1002c716 	blt	r2,zero,5da4 <_dtoa_r+0x1500>
    5288:	dd000817 	ldw	r20,32(sp)
    528c:	d8800617 	ldw	r2,24(sp)
    5290:	d9800817 	ldw	r6,32(sp)
    5294:	8009883a 	mov	r4,r16
    5298:	01400044 	movi	r5,1
    529c:	308d883a 	add	r6,r6,r2
    52a0:	d9800815 	stw	r6,32(sp)
    52a4:	b0ad883a 	add	r22,r22,r2
    52a8:	00083080 	call	8308 <__i2b>
    52ac:	1023883a 	mov	r17,r2
    52b0:	a0000826 	beq	r20,zero,52d4 <_dtoa_r+0xa30>
    52b4:	0580070e 	bge	zero,r22,52d4 <_dtoa_r+0xa30>
    52b8:	b005883a 	mov	r2,r22
    52bc:	a5812016 	blt	r20,r22,5740 <_dtoa_r+0xe9c>
    52c0:	d8c00817 	ldw	r3,32(sp)
    52c4:	a0a9c83a 	sub	r20,r20,r2
    52c8:	b0adc83a 	sub	r22,r22,r2
    52cc:	1887c83a 	sub	r3,r3,r2
    52d0:	d8c00815 	stw	r3,32(sp)
    52d4:	d9000917 	ldw	r4,36(sp)
    52d8:	0100140e 	bge	zero,r4,532c <_dtoa_r+0xa88>
    52dc:	d9800b17 	ldw	r6,44(sp)
    52e0:	3001e526 	beq	r6,zero,5a78 <_dtoa_r+0x11d4>
    52e4:	05400e0e 	bge	zero,r21,5320 <_dtoa_r+0xa7c>
    52e8:	880b883a 	mov	r5,r17
    52ec:	8009883a 	mov	r4,r16
    52f0:	a80d883a 	mov	r6,r21
    52f4:	00085d40 	call	85d4 <__pow5mult>
    52f8:	e00d883a 	mov	r6,fp
    52fc:	8009883a 	mov	r4,r16
    5300:	100b883a 	mov	r5,r2
    5304:	1023883a 	mov	r17,r2
    5308:	00083440 	call	8344 <__multiply>
    530c:	102f883a 	mov	r23,r2
    5310:	e00b883a 	mov	r5,fp
    5314:	8009883a 	mov	r4,r16
    5318:	0007f880 	call	7f88 <_Bfree>
    531c:	b839883a 	mov	fp,r23
    5320:	d8800917 	ldw	r2,36(sp)
    5324:	154dc83a 	sub	r6,r2,r21
    5328:	3001281e 	bne	r6,zero,57cc <_dtoa_r+0xf28>
    532c:	05c00044 	movi	r23,1
    5330:	8009883a 	mov	r4,r16
    5334:	b80b883a 	mov	r5,r23
    5338:	00083080 	call	8308 <__i2b>
    533c:	d8c00a17 	ldw	r3,40(sp)
    5340:	102b883a 	mov	r21,r2
    5344:	00c0310e 	bge	zero,r3,540c <_dtoa_r+0xb68>
    5348:	8009883a 	mov	r4,r16
    534c:	100b883a 	mov	r5,r2
    5350:	180d883a 	mov	r6,r3
    5354:	00085d40 	call	85d4 <__pow5mult>
    5358:	d9000317 	ldw	r4,12(sp)
    535c:	102b883a 	mov	r21,r2
    5360:	b9011f0e 	bge	r23,r4,57e0 <_dtoa_r+0xf3c>
    5364:	0027883a 	mov	r19,zero
    5368:	a8800417 	ldw	r2,16(r21)
    536c:	10800104 	addi	r2,r2,4
    5370:	1085883a 	add	r2,r2,r2
    5374:	1085883a 	add	r2,r2,r2
    5378:	a885883a 	add	r2,r21,r2
    537c:	11000017 	ldw	r4,0(r2)
    5380:	00081f00 	call	81f0 <__hi0bits>
    5384:	00c00804 	movi	r3,32
    5388:	1885c83a 	sub	r2,r3,r2
    538c:	00002506 	br	5424 <_dtoa_r+0xb80>
    5390:	01800044 	movi	r6,1
    5394:	d9800c15 	stw	r6,48(sp)
    5398:	003dec06 	br	4b4c <__alt_data_end+0xfffaf41c>
    539c:	d8c00817 	ldw	r3,32(sp)
    53a0:	d9000517 	ldw	r4,20(sp)
    53a4:	d8000a15 	stw	zero,40(sp)
    53a8:	1907c83a 	sub	r3,r3,r4
    53ac:	010dc83a 	sub	r6,zero,r4
    53b0:	d8c00815 	stw	r3,32(sp)
    53b4:	d9800915 	stw	r6,36(sp)
    53b8:	003ded06 	br	4b70 <__alt_data_end+0xfffaf440>
    53bc:	05adc83a 	sub	r22,zero,r22
    53c0:	dd800815 	stw	r22,32(sp)
    53c4:	002d883a 	mov	r22,zero
    53c8:	003de406 	br	4b5c <__alt_data_end+0xfffaf42c>
    53cc:	d9000517 	ldw	r4,20(sp)
    53d0:	000e9ec0 	call	e9ec <__floatsidf>
    53d4:	1009883a 	mov	r4,r2
    53d8:	180b883a 	mov	r5,r3
    53dc:	b00d883a 	mov	r6,r22
    53e0:	a80f883a 	mov	r7,r21
    53e4:	000d5e40 	call	d5e4 <__eqdf2>
    53e8:	103dc726 	beq	r2,zero,4b08 <__alt_data_end+0xfffaf3d8>
    53ec:	d8800517 	ldw	r2,20(sp)
    53f0:	10bfffc4 	addi	r2,r2,-1
    53f4:	d8800515 	stw	r2,20(sp)
    53f8:	003dc306 	br	4b08 <__alt_data_end+0xfffaf3d8>
    53fc:	dd400917 	ldw	r21,36(sp)
    5400:	dd000817 	ldw	r20,32(sp)
    5404:	0023883a 	mov	r17,zero
    5408:	003fa906 	br	52b0 <__alt_data_end+0xfffafb80>
    540c:	d9800317 	ldw	r6,12(sp)
    5410:	b981670e 	bge	r23,r6,59b0 <_dtoa_r+0x110c>
    5414:	0027883a 	mov	r19,zero
    5418:	d8c00a17 	ldw	r3,40(sp)
    541c:	183fd21e 	bne	r3,zero,5368 <__alt_data_end+0xfffafc38>
    5420:	00800044 	movi	r2,1
    5424:	1585883a 	add	r2,r2,r22
    5428:	108007cc 	andi	r2,r2,31
    542c:	10005f26 	beq	r2,zero,55ac <_dtoa_r+0xd08>
    5430:	00c00804 	movi	r3,32
    5434:	1887c83a 	sub	r3,r3,r2
    5438:	01000104 	movi	r4,4
    543c:	20c2dd0e 	bge	r4,r3,5fb4 <_dtoa_r+0x1710>
    5440:	d9000817 	ldw	r4,32(sp)
    5444:	00c00704 	movi	r3,28
    5448:	1885c83a 	sub	r2,r3,r2
    544c:	2089883a 	add	r4,r4,r2
    5450:	d9000815 	stw	r4,32(sp)
    5454:	a0a9883a 	add	r20,r20,r2
    5458:	b0ad883a 	add	r22,r22,r2
    545c:	d8800817 	ldw	r2,32(sp)
    5460:	0080050e 	bge	zero,r2,5478 <_dtoa_r+0xbd4>
    5464:	e00b883a 	mov	r5,fp
    5468:	8009883a 	mov	r4,r16
    546c:	100d883a 	mov	r6,r2
    5470:	00087140 	call	8714 <__lshift>
    5474:	1039883a 	mov	fp,r2
    5478:	0580050e 	bge	zero,r22,5490 <_dtoa_r+0xbec>
    547c:	a80b883a 	mov	r5,r21
    5480:	8009883a 	mov	r4,r16
    5484:	b00d883a 	mov	r6,r22
    5488:	00087140 	call	8714 <__lshift>
    548c:	102b883a 	mov	r21,r2
    5490:	d8c00c17 	ldw	r3,48(sp)
    5494:	1801161e 	bne	r3,zero,58f0 <_dtoa_r+0x104c>
    5498:	d8c00617 	ldw	r3,24(sp)
    549c:	00c12d0e 	bge	zero,r3,5954 <_dtoa_r+0x10b0>
    54a0:	d8c00b17 	ldw	r3,44(sp)
    54a4:	1800571e 	bne	r3,zero,5604 <_dtoa_r+0xd60>
    54a8:	dc800717 	ldw	r18,28(sp)
    54ac:	dcc00617 	ldw	r19,24(sp)
    54b0:	9029883a 	mov	r20,r18
    54b4:	00000206 	br	54c0 <_dtoa_r+0xc1c>
    54b8:	0007fb00 	call	7fb0 <__multadd>
    54bc:	1039883a 	mov	fp,r2
    54c0:	e009883a 	mov	r4,fp
    54c4:	a80b883a 	mov	r5,r21
    54c8:	000467c0 	call	467c <quorem>
    54cc:	10800c04 	addi	r2,r2,48
    54d0:	90800005 	stb	r2,0(r18)
    54d4:	94800044 	addi	r18,r18,1
    54d8:	9507c83a 	sub	r3,r18,r20
    54dc:	8009883a 	mov	r4,r16
    54e0:	e00b883a 	mov	r5,fp
    54e4:	01800284 	movi	r6,10
    54e8:	000f883a 	mov	r7,zero
    54ec:	1cfff216 	blt	r3,r19,54b8 <__alt_data_end+0xfffafd88>
    54f0:	1011883a 	mov	r8,r2
    54f4:	d8800617 	ldw	r2,24(sp)
    54f8:	00822e0e 	bge	zero,r2,5db4 <_dtoa_r+0x1510>
    54fc:	d9000717 	ldw	r4,28(sp)
    5500:	0025883a 	mov	r18,zero
    5504:	20af883a 	add	r23,r4,r2
    5508:	e00b883a 	mov	r5,fp
    550c:	01800044 	movi	r6,1
    5510:	8009883a 	mov	r4,r16
    5514:	da001715 	stw	r8,92(sp)
    5518:	00087140 	call	8714 <__lshift>
    551c:	1009883a 	mov	r4,r2
    5520:	a80b883a 	mov	r5,r21
    5524:	1039883a 	mov	fp,r2
    5528:	000885c0 	call	885c <__mcmp>
    552c:	da001717 	ldw	r8,92(sp)
    5530:	00816e0e 	bge	zero,r2,5aec <_dtoa_r+0x1248>
    5534:	b93fffc3 	ldbu	r4,-1(r23)
    5538:	b8bfffc4 	addi	r2,r23,-1
    553c:	1007883a 	mov	r3,r2
    5540:	01800e44 	movi	r6,57
    5544:	d9c00717 	ldw	r7,28(sp)
    5548:	00000506 	br	5560 <_dtoa_r+0xcbc>
    554c:	18ffffc4 	addi	r3,r3,-1
    5550:	38811926 	beq	r7,r2,59b8 <_dtoa_r+0x1114>
    5554:	19000003 	ldbu	r4,0(r3)
    5558:	102f883a 	mov	r23,r2
    555c:	10bfffc4 	addi	r2,r2,-1
    5560:	21403fcc 	andi	r5,r4,255
    5564:	2940201c 	xori	r5,r5,128
    5568:	297fe004 	addi	r5,r5,-128
    556c:	29bff726 	beq	r5,r6,554c <__alt_data_end+0xfffafe1c>
    5570:	21000044 	addi	r4,r4,1
    5574:	11000005 	stb	r4,0(r2)
    5578:	8009883a 	mov	r4,r16
    557c:	a80b883a 	mov	r5,r21
    5580:	0007f880 	call	7f88 <_Bfree>
    5584:	883e7526 	beq	r17,zero,4f5c <__alt_data_end+0xfffaf82c>
    5588:	90000426 	beq	r18,zero,559c <_dtoa_r+0xcf8>
    558c:	94400326 	beq	r18,r17,559c <_dtoa_r+0xcf8>
    5590:	8009883a 	mov	r4,r16
    5594:	900b883a 	mov	r5,r18
    5598:	0007f880 	call	7f88 <_Bfree>
    559c:	8009883a 	mov	r4,r16
    55a0:	880b883a 	mov	r5,r17
    55a4:	0007f880 	call	7f88 <_Bfree>
    55a8:	003e6c06 	br	4f5c <__alt_data_end+0xfffaf82c>
    55ac:	00800704 	movi	r2,28
    55b0:	d9800817 	ldw	r6,32(sp)
    55b4:	a0a9883a 	add	r20,r20,r2
    55b8:	b0ad883a 	add	r22,r22,r2
    55bc:	308d883a 	add	r6,r6,r2
    55c0:	d9800815 	stw	r6,32(sp)
    55c4:	003fa506 	br	545c <__alt_data_end+0xfffafd2c>
    55c8:	013efb84 	movi	r4,-1042
    55cc:	246bc83a 	sub	r21,r4,r17
    55d0:	9548983a 	sll	r4,r18,r21
    55d4:	003d1806 	br	4a38 <__alt_data_end+0xfffaf308>
    55d8:	d8000c15 	stw	zero,48(sp)
    55dc:	003d5b06 	br	4b4c <__alt_data_end+0xfffaf41c>
    55e0:	880b883a 	mov	r5,r17
    55e4:	8009883a 	mov	r4,r16
    55e8:	01800284 	movi	r6,10
    55ec:	000f883a 	mov	r7,zero
    55f0:	0007fb00 	call	7fb0 <__multadd>
    55f4:	1023883a 	mov	r17,r2
    55f8:	d8800d17 	ldw	r2,52(sp)
    55fc:	0082550e 	bge	zero,r2,5f54 <_dtoa_r+0x16b0>
    5600:	d8800615 	stw	r2,24(sp)
    5604:	0500050e 	bge	zero,r20,561c <_dtoa_r+0xd78>
    5608:	880b883a 	mov	r5,r17
    560c:	8009883a 	mov	r4,r16
    5610:	a00d883a 	mov	r6,r20
    5614:	00087140 	call	8714 <__lshift>
    5618:	1023883a 	mov	r17,r2
    561c:	98016a1e 	bne	r19,zero,5bc8 <_dtoa_r+0x1324>
    5620:	8829883a 	mov	r20,r17
    5624:	d9000617 	ldw	r4,24(sp)
    5628:	dcc00717 	ldw	r19,28(sp)
    562c:	9480004c 	andi	r18,r18,1
    5630:	20bfffc4 	addi	r2,r4,-1
    5634:	9885883a 	add	r2,r19,r2
    5638:	d8800415 	stw	r2,16(sp)
    563c:	dc800615 	stw	r18,24(sp)
    5640:	e009883a 	mov	r4,fp
    5644:	a80b883a 	mov	r5,r21
    5648:	000467c0 	call	467c <quorem>
    564c:	e009883a 	mov	r4,fp
    5650:	880b883a 	mov	r5,r17
    5654:	102f883a 	mov	r23,r2
    5658:	000885c0 	call	885c <__mcmp>
    565c:	8009883a 	mov	r4,r16
    5660:	a80b883a 	mov	r5,r21
    5664:	a00d883a 	mov	r6,r20
    5668:	102d883a 	mov	r22,r2
    566c:	00088bc0 	call	88bc <__mdiff>
    5670:	1007883a 	mov	r3,r2
    5674:	10800317 	ldw	r2,12(r2)
    5678:	bc800c04 	addi	r18,r23,48
    567c:	1000971e 	bne	r2,zero,58dc <_dtoa_r+0x1038>
    5680:	180b883a 	mov	r5,r3
    5684:	e009883a 	mov	r4,fp
    5688:	d8c01515 	stw	r3,84(sp)
    568c:	000885c0 	call	885c <__mcmp>
    5690:	d8c01517 	ldw	r3,84(sp)
    5694:	8009883a 	mov	r4,r16
    5698:	d8801515 	stw	r2,84(sp)
    569c:	180b883a 	mov	r5,r3
    56a0:	0007f880 	call	7f88 <_Bfree>
    56a4:	d8801517 	ldw	r2,84(sp)
    56a8:	1000041e 	bne	r2,zero,56bc <_dtoa_r+0xe18>
    56ac:	d9800317 	ldw	r6,12(sp)
    56b0:	3000021e 	bne	r6,zero,56bc <_dtoa_r+0xe18>
    56b4:	d8c00617 	ldw	r3,24(sp)
    56b8:	18007626 	beq	r3,zero,5894 <_dtoa_r+0xff0>
    56bc:	b0005b16 	blt	r22,zero,582c <_dtoa_r+0xf88>
    56c0:	b000041e 	bne	r22,zero,56d4 <_dtoa_r+0xe30>
    56c4:	d9000317 	ldw	r4,12(sp)
    56c8:	2000021e 	bne	r4,zero,56d4 <_dtoa_r+0xe30>
    56cc:	d8c00617 	ldw	r3,24(sp)
    56d0:	18005626 	beq	r3,zero,582c <_dtoa_r+0xf88>
    56d4:	00814d16 	blt	zero,r2,5c0c <_dtoa_r+0x1368>
    56d8:	d8c00417 	ldw	r3,16(sp)
    56dc:	9d800044 	addi	r22,r19,1
    56e0:	9c800005 	stb	r18,0(r19)
    56e4:	b02f883a 	mov	r23,r22
    56e8:	98c14c26 	beq	r19,r3,5c1c <_dtoa_r+0x1378>
    56ec:	e00b883a 	mov	r5,fp
    56f0:	8009883a 	mov	r4,r16
    56f4:	01800284 	movi	r6,10
    56f8:	000f883a 	mov	r7,zero
    56fc:	0007fb00 	call	7fb0 <__multadd>
    5700:	1039883a 	mov	fp,r2
    5704:	8d006d26 	beq	r17,r20,58bc <_dtoa_r+0x1018>
    5708:	880b883a 	mov	r5,r17
    570c:	01800284 	movi	r6,10
    5710:	000f883a 	mov	r7,zero
    5714:	8009883a 	mov	r4,r16
    5718:	0007fb00 	call	7fb0 <__multadd>
    571c:	a00b883a 	mov	r5,r20
    5720:	8009883a 	mov	r4,r16
    5724:	01800284 	movi	r6,10
    5728:	000f883a 	mov	r7,zero
    572c:	1023883a 	mov	r17,r2
    5730:	0007fb00 	call	7fb0 <__multadd>
    5734:	1029883a 	mov	r20,r2
    5738:	b027883a 	mov	r19,r22
    573c:	003fc006 	br	5640 <__alt_data_end+0xfffaff10>
    5740:	a005883a 	mov	r2,r20
    5744:	003ede06 	br	52c0 <__alt_data_end+0xfffafb90>
    5748:	01000044 	movi	r4,1
    574c:	d9000b15 	stw	r4,44(sp)
    5750:	d9802217 	ldw	r6,136(sp)
    5754:	0180dc0e 	bge	zero,r6,5ac8 <_dtoa_r+0x1224>
    5758:	3023883a 	mov	r17,r6
    575c:	d9800d15 	stw	r6,52(sp)
    5760:	d9800615 	stw	r6,24(sp)
    5764:	003d1e06 	br	4be0 <__alt_data_end+0xfffaf4b0>
    5768:	d8800617 	ldw	r2,24(sp)
    576c:	00be3716 	blt	zero,r2,504c <__alt_data_end+0xfffaf91c>
    5770:	1000be1e 	bne	r2,zero,5a6c <_dtoa_r+0x11c8>
    5774:	8809883a 	mov	r4,r17
    5778:	a00b883a 	mov	r5,r20
    577c:	000d883a 	mov	r6,zero
    5780:	01d00534 	movhi	r7,16404
    5784:	000d8280 	call	d828 <__muldf3>
    5788:	1009883a 	mov	r4,r2
    578c:	180b883a 	mov	r5,r3
    5790:	900d883a 	mov	r6,r18
    5794:	980f883a 	mov	r7,r19
    5798:	000d6680 	call	d668 <__gedf2>
    579c:	002b883a 	mov	r21,zero
    57a0:	0023883a 	mov	r17,zero
    57a4:	10007a16 	blt	r2,zero,5990 <_dtoa_r+0x10ec>
    57a8:	d9002217 	ldw	r4,136(sp)
    57ac:	ddc00717 	ldw	r23,28(sp)
    57b0:	0108303a 	nor	r4,zero,r4
    57b4:	d9000515 	stw	r4,20(sp)
    57b8:	8009883a 	mov	r4,r16
    57bc:	a80b883a 	mov	r5,r21
    57c0:	0007f880 	call	7f88 <_Bfree>
    57c4:	883f751e 	bne	r17,zero,559c <__alt_data_end+0xfffafe6c>
    57c8:	003de406 	br	4f5c <__alt_data_end+0xfffaf82c>
    57cc:	e00b883a 	mov	r5,fp
    57d0:	8009883a 	mov	r4,r16
    57d4:	00085d40 	call	85d4 <__pow5mult>
    57d8:	1039883a 	mov	fp,r2
    57dc:	003ed306 	br	532c <__alt_data_end+0xfffafbfc>
    57e0:	903ee01e 	bne	r18,zero,5364 <__alt_data_end+0xfffafc34>
    57e4:	00800434 	movhi	r2,16
    57e8:	10bfffc4 	addi	r2,r2,-1
    57ec:	9884703a 	and	r2,r19,r2
    57f0:	103f081e 	bne	r2,zero,5414 <__alt_data_end+0xfffafce4>
    57f4:	9cdffc2c 	andhi	r19,r19,32752
    57f8:	983f0626 	beq	r19,zero,5414 <__alt_data_end+0xfffafce4>
    57fc:	d8800817 	ldw	r2,32(sp)
    5800:	b5800044 	addi	r22,r22,1
    5804:	04c00044 	movi	r19,1
    5808:	10800044 	addi	r2,r2,1
    580c:	d8800815 	stw	r2,32(sp)
    5810:	003f0106 	br	5418 <__alt_data_end+0xfffafce8>
    5814:	d9800f17 	ldw	r6,60(sp)
    5818:	30016826 	beq	r6,zero,5dbc <_dtoa_r+0x1518>
    581c:	10810cc4 	addi	r2,r2,1075
    5820:	dd400917 	ldw	r21,36(sp)
    5824:	dd000817 	ldw	r20,32(sp)
    5828:	003e9906 	br	5290 <__alt_data_end+0xfffafb60>
    582c:	9011883a 	mov	r8,r18
    5830:	4007883a 	mov	r3,r8
    5834:	e02d883a 	mov	r22,fp
    5838:	0080100e 	bge	zero,r2,587c <_dtoa_r+0xfd8>
    583c:	01800044 	movi	r6,1
    5840:	8009883a 	mov	r4,r16
    5844:	e00b883a 	mov	r5,fp
    5848:	da001515 	stw	r8,84(sp)
    584c:	da001715 	stw	r8,92(sp)
    5850:	00087140 	call	8714 <__lshift>
    5854:	1009883a 	mov	r4,r2
    5858:	a80b883a 	mov	r5,r21
    585c:	102d883a 	mov	r22,r2
    5860:	000885c0 	call	885c <__mcmp>
    5864:	d8c01517 	ldw	r3,84(sp)
    5868:	da001717 	ldw	r8,92(sp)
    586c:	0081a50e 	bge	zero,r2,5f04 <_dtoa_r+0x1660>
    5870:	00800e44 	movi	r2,57
    5874:	40817b26 	beq	r8,r2,5e64 <_dtoa_r+0x15c0>
    5878:	40c00044 	addi	r3,r8,1
    587c:	8825883a 	mov	r18,r17
    5880:	9dc00044 	addi	r23,r19,1
    5884:	98c00005 	stb	r3,0(r19)
    5888:	a023883a 	mov	r17,r20
    588c:	b039883a 	mov	fp,r22
    5890:	003f3906 	br	5578 <__alt_data_end+0xfffafe48>
    5894:	00800e44 	movi	r2,57
    5898:	9011883a 	mov	r8,r18
    589c:	90817226 	beq	r18,r2,5e68 <_dtoa_r+0x15c4>
    58a0:	0580010e 	bge	zero,r22,58a8 <_dtoa_r+0x1004>
    58a4:	ba000c44 	addi	r8,r23,49
    58a8:	8825883a 	mov	r18,r17
    58ac:	9dc00044 	addi	r23,r19,1
    58b0:	9a000005 	stb	r8,0(r19)
    58b4:	a023883a 	mov	r17,r20
    58b8:	003f2f06 	br	5578 <__alt_data_end+0xfffafe48>
    58bc:	880b883a 	mov	r5,r17
    58c0:	8009883a 	mov	r4,r16
    58c4:	01800284 	movi	r6,10
    58c8:	000f883a 	mov	r7,zero
    58cc:	0007fb00 	call	7fb0 <__multadd>
    58d0:	1023883a 	mov	r17,r2
    58d4:	1029883a 	mov	r20,r2
    58d8:	003f9706 	br	5738 <__alt_data_end+0xfffb0008>
    58dc:	8009883a 	mov	r4,r16
    58e0:	180b883a 	mov	r5,r3
    58e4:	0007f880 	call	7f88 <_Bfree>
    58e8:	00800044 	movi	r2,1
    58ec:	003f7306 	br	56bc <__alt_data_end+0xfffaff8c>
    58f0:	e009883a 	mov	r4,fp
    58f4:	a80b883a 	mov	r5,r21
    58f8:	000885c0 	call	885c <__mcmp>
    58fc:	103ee60e 	bge	r2,zero,5498 <__alt_data_end+0xfffafd68>
    5900:	8009883a 	mov	r4,r16
    5904:	e00b883a 	mov	r5,fp
    5908:	01800284 	movi	r6,10
    590c:	000f883a 	mov	r7,zero
    5910:	0007fb00 	call	7fb0 <__multadd>
    5914:	d9000517 	ldw	r4,20(sp)
    5918:	d9800b17 	ldw	r6,44(sp)
    591c:	1039883a 	mov	fp,r2
    5920:	213fffc4 	addi	r4,r4,-1
    5924:	d9000515 	stw	r4,20(sp)
    5928:	303f2d1e 	bne	r6,zero,55e0 <__alt_data_end+0xfffafeb0>
    592c:	d9000d17 	ldw	r4,52(sp)
    5930:	0101780e 	bge	zero,r4,5f14 <_dtoa_r+0x1670>
    5934:	d9000615 	stw	r4,24(sp)
    5938:	003edb06 	br	54a8 <__alt_data_end+0xfffafd78>
    593c:	00800084 	movi	r2,2
    5940:	30818e1e 	bne	r6,r2,5f7c <_dtoa_r+0x16d8>
    5944:	d8000b15 	stw	zero,44(sp)
    5948:	003f8106 	br	5750 <__alt_data_end+0xfffb0020>
    594c:	d8800717 	ldw	r2,28(sp)
    5950:	003c0306 	br	4960 <__alt_data_end+0xfffaf230>
    5954:	d9000317 	ldw	r4,12(sp)
    5958:	00800084 	movi	r2,2
    595c:	113ed00e 	bge	r2,r4,54a0 <__alt_data_end+0xfffafd70>
    5960:	d8c00617 	ldw	r3,24(sp)
    5964:	183f901e 	bne	r3,zero,57a8 <__alt_data_end+0xfffb0078>
    5968:	a80b883a 	mov	r5,r21
    596c:	8009883a 	mov	r4,r16
    5970:	01800144 	movi	r6,5
    5974:	000f883a 	mov	r7,zero
    5978:	0007fb00 	call	7fb0 <__multadd>
    597c:	e009883a 	mov	r4,fp
    5980:	100b883a 	mov	r5,r2
    5984:	102b883a 	mov	r21,r2
    5988:	000885c0 	call	885c <__mcmp>
    598c:	00bf860e 	bge	zero,r2,57a8 <__alt_data_end+0xfffb0078>
    5990:	d9800717 	ldw	r6,28(sp)
    5994:	00800c44 	movi	r2,49
    5998:	30800005 	stb	r2,0(r6)
    599c:	d8800517 	ldw	r2,20(sp)
    59a0:	35c00044 	addi	r23,r6,1
    59a4:	10800044 	addi	r2,r2,1
    59a8:	d8800515 	stw	r2,20(sp)
    59ac:	003f8206 	br	57b8 <__alt_data_end+0xfffb0088>
    59b0:	903e981e 	bne	r18,zero,5414 <__alt_data_end+0xfffafce4>
    59b4:	003f8b06 	br	57e4 <__alt_data_end+0xfffb00b4>
    59b8:	d9800517 	ldw	r6,20(sp)
    59bc:	d8c00717 	ldw	r3,28(sp)
    59c0:	00800c44 	movi	r2,49
    59c4:	31800044 	addi	r6,r6,1
    59c8:	d9800515 	stw	r6,20(sp)
    59cc:	18800005 	stb	r2,0(r3)
    59d0:	003ee906 	br	5578 <__alt_data_end+0xfffafe48>
    59d4:	dc000317 	ldw	r16,12(sp)
    59d8:	003d6006 	br	4f5c <__alt_data_end+0xfffaf82c>
    59dc:	8809883a 	mov	r4,r17
    59e0:	000e9ec0 	call	e9ec <__floatsidf>
    59e4:	a009883a 	mov	r4,r20
    59e8:	a80b883a 	mov	r5,r21
    59ec:	100d883a 	mov	r6,r2
    59f0:	180f883a 	mov	r7,r3
    59f4:	000d8280 	call	d828 <__muldf3>
    59f8:	1009883a 	mov	r4,r2
    59fc:	180b883a 	mov	r5,r3
    5a00:	000d883a 	mov	r6,zero
    5a04:	01d00734 	movhi	r7,16412
    5a08:	000c3c80 	call	c3c8 <__adddf3>
    5a0c:	1023883a 	mov	r17,r2
    5a10:	00bf3034 	movhi	r2,64704
    5a14:	1885883a 	add	r2,r3,r2
    5a18:	d8800e15 	stw	r2,56(sp)
    5a1c:	a009883a 	mov	r4,r20
    5a20:	a80b883a 	mov	r5,r21
    5a24:	000d883a 	mov	r6,zero
    5a28:	01d00534 	movhi	r7,16404
    5a2c:	000e0940 	call	e094 <__subdf3>
    5a30:	d9c00e17 	ldw	r7,56(sp)
    5a34:	1009883a 	mov	r4,r2
    5a38:	180b883a 	mov	r5,r3
    5a3c:	880d883a 	mov	r6,r17
    5a40:	102b883a 	mov	r21,r2
    5a44:	1829883a 	mov	r20,r3
    5a48:	000d6680 	call	d668 <__gedf2>
    5a4c:	00807716 	blt	zero,r2,5c2c <_dtoa_r+0x1388>
    5a50:	d8800e17 	ldw	r2,56(sp)
    5a54:	a809883a 	mov	r4,r21
    5a58:	a00b883a 	mov	r5,r20
    5a5c:	11e0003c 	xorhi	r7,r2,32768
    5a60:	880d883a 	mov	r6,r17
    5a64:	000d7480 	call	d748 <__ledf2>
    5a68:	103d6b0e 	bge	r2,zero,5018 <__alt_data_end+0xfffaf8e8>
    5a6c:	002b883a 	mov	r21,zero
    5a70:	0023883a 	mov	r17,zero
    5a74:	003f4c06 	br	57a8 <__alt_data_end+0xfffb0078>
    5a78:	d9800917 	ldw	r6,36(sp)
    5a7c:	e00b883a 	mov	r5,fp
    5a80:	8009883a 	mov	r4,r16
    5a84:	00085d40 	call	85d4 <__pow5mult>
    5a88:	1039883a 	mov	fp,r2
    5a8c:	003e2706 	br	532c <__alt_data_end+0xfffafbfc>
    5a90:	d8000b15 	stw	zero,44(sp)
    5a94:	003c4906 	br	4bbc <__alt_data_end+0xfffaf48c>
    5a98:	d9000917 	ldw	r4,36(sp)
    5a9c:	d9800a17 	ldw	r6,40(sp)
    5aa0:	dd400915 	stw	r21,36(sp)
    5aa4:	a905c83a 	sub	r2,r21,r4
    5aa8:	308d883a 	add	r6,r6,r2
    5aac:	d9800a15 	stw	r6,40(sp)
    5ab0:	002b883a 	mov	r21,zero
    5ab4:	003df206 	br	5280 <__alt_data_end+0xfffafb50>
    5ab8:	dc800e15 	stw	r18,56(sp)
    5abc:	982b883a 	mov	r21,r19
    5ac0:	04400084 	movi	r17,2
    5ac4:	003c7406 	br	4c98 <__alt_data_end+0xfffaf568>
    5ac8:	04400044 	movi	r17,1
    5acc:	dc400d15 	stw	r17,52(sp)
    5ad0:	dc400615 	stw	r17,24(sp)
    5ad4:	dc402215 	stw	r17,136(sp)
    5ad8:	80001115 	stw	zero,68(r16)
    5adc:	000b883a 	mov	r5,zero
    5ae0:	003c4a06 	br	4c0c <__alt_data_end+0xfffaf4dc>
    5ae4:	3023883a 	mov	r17,r6
    5ae8:	003ffb06 	br	5ad8 <__alt_data_end+0xfffb03a8>
    5aec:	1000021e 	bne	r2,zero,5af8 <_dtoa_r+0x1254>
    5af0:	4200004c 	andi	r8,r8,1
    5af4:	403e8f1e 	bne	r8,zero,5534 <__alt_data_end+0xfffafe04>
    5af8:	01000c04 	movi	r4,48
    5afc:	00000106 	br	5b04 <_dtoa_r+0x1260>
    5b00:	102f883a 	mov	r23,r2
    5b04:	b8bfffc4 	addi	r2,r23,-1
    5b08:	10c00007 	ldb	r3,0(r2)
    5b0c:	193ffc26 	beq	r3,r4,5b00 <__alt_data_end+0xfffb03d0>
    5b10:	003e9906 	br	5578 <__alt_data_end+0xfffafe48>
    5b14:	d9000517 	ldw	r4,20(sp)
    5b18:	012fc83a 	sub	r23,zero,r4
    5b1c:	b800ad26 	beq	r23,zero,5dd4 <_dtoa_r+0x1530>
    5b20:	b88003cc 	andi	r2,r23,15
    5b24:	100490fa 	slli	r2,r2,3
    5b28:	00c00074 	movhi	r3,1
    5b2c:	18c72404 	addi	r3,r3,7312
    5b30:	1885883a 	add	r2,r3,r2
    5b34:	11800017 	ldw	r6,0(r2)
    5b38:	11c00117 	ldw	r7,4(r2)
    5b3c:	b82fd13a 	srai	r23,r23,4
    5b40:	9009883a 	mov	r4,r18
    5b44:	980b883a 	mov	r5,r19
    5b48:	000d8280 	call	d828 <__muldf3>
    5b4c:	1029883a 	mov	r20,r2
    5b50:	182b883a 	mov	r21,r3
    5b54:	b800f426 	beq	r23,zero,5f28 <_dtoa_r+0x1684>
    5b58:	02000074 	movhi	r8,1
    5b5c:	42071a04 	addi	r8,r8,7272
    5b60:	8029883a 	mov	r20,r16
    5b64:	04400084 	movi	r17,2
    5b68:	4021883a 	mov	r16,r8
    5b6c:	b980004c 	andi	r6,r23,1
    5b70:	1009883a 	mov	r4,r2
    5b74:	b82fd07a 	srai	r23,r23,1
    5b78:	180b883a 	mov	r5,r3
    5b7c:	30000426 	beq	r6,zero,5b90 <_dtoa_r+0x12ec>
    5b80:	81800017 	ldw	r6,0(r16)
    5b84:	81c00117 	ldw	r7,4(r16)
    5b88:	8c400044 	addi	r17,r17,1
    5b8c:	000d8280 	call	d828 <__muldf3>
    5b90:	84000204 	addi	r16,r16,8
    5b94:	b83ff51e 	bne	r23,zero,5b6c <__alt_data_end+0xfffb043c>
    5b98:	a021883a 	mov	r16,r20
    5b9c:	182b883a 	mov	r21,r3
    5ba0:	1029883a 	mov	r20,r2
    5ba4:	003c5506 	br	4cfc <__alt_data_end+0xfffaf5cc>
    5ba8:	d9800517 	ldw	r6,20(sp)
    5bac:	d9000717 	ldw	r4,28(sp)
    5bb0:	00c00c04 	movi	r3,48
    5bb4:	31800044 	addi	r6,r6,1
    5bb8:	d9800515 	stw	r6,20(sp)
    5bbc:	20c00005 	stb	r3,0(r4)
    5bc0:	02000c44 	movi	r8,49
    5bc4:	003da206 	br	5250 <__alt_data_end+0xfffafb20>
    5bc8:	89400117 	ldw	r5,4(r17)
    5bcc:	8009883a 	mov	r4,r16
    5bd0:	0007ee00 	call	7ee0 <_Balloc>
    5bd4:	89800417 	ldw	r6,16(r17)
    5bd8:	11000304 	addi	r4,r2,12
    5bdc:	89400304 	addi	r5,r17,12
    5be0:	31800084 	addi	r6,r6,2
    5be4:	318d883a 	add	r6,r6,r6
    5be8:	318d883a 	add	r6,r6,r6
    5bec:	1027883a 	mov	r19,r2
    5bf0:	0007b280 	call	7b28 <memcpy>
    5bf4:	8009883a 	mov	r4,r16
    5bf8:	980b883a 	mov	r5,r19
    5bfc:	01800044 	movi	r6,1
    5c00:	00087140 	call	8714 <__lshift>
    5c04:	1029883a 	mov	r20,r2
    5c08:	003e8606 	br	5624 <__alt_data_end+0xfffafef4>
    5c0c:	00800e44 	movi	r2,57
    5c10:	90809526 	beq	r18,r2,5e68 <_dtoa_r+0x15c4>
    5c14:	92000044 	addi	r8,r18,1
    5c18:	003f2306 	br	58a8 <__alt_data_end+0xfffb0178>
    5c1c:	9011883a 	mov	r8,r18
    5c20:	8825883a 	mov	r18,r17
    5c24:	a023883a 	mov	r17,r20
    5c28:	003e3706 	br	5508 <__alt_data_end+0xfffafdd8>
    5c2c:	002b883a 	mov	r21,zero
    5c30:	0023883a 	mov	r17,zero
    5c34:	003f5606 	br	5990 <__alt_data_end+0xfffb0260>
    5c38:	51bfffc4 	addi	r6,r10,-1
    5c3c:	300490fa 	slli	r2,r6,3
    5c40:	00c00074 	movhi	r3,1
    5c44:	18c72404 	addi	r3,r3,7312
    5c48:	1885883a 	add	r2,r3,r2
    5c4c:	d9c00e17 	ldw	r7,56(sp)
    5c50:	11000017 	ldw	r4,0(r2)
    5c54:	11400117 	ldw	r5,4(r2)
    5c58:	d8800717 	ldw	r2,28(sp)
    5c5c:	d9801015 	stw	r6,64(sp)
    5c60:	880d883a 	mov	r6,r17
    5c64:	da801615 	stw	r10,88(sp)
    5c68:	15c00044 	addi	r23,r2,1
    5c6c:	000d8280 	call	d828 <__muldf3>
    5c70:	a80b883a 	mov	r5,r21
    5c74:	a009883a 	mov	r4,r20
    5c78:	d8c01115 	stw	r3,68(sp)
    5c7c:	d8800e15 	stw	r2,56(sp)
    5c80:	000e9640 	call	e964 <__fixdfsi>
    5c84:	1009883a 	mov	r4,r2
    5c88:	1023883a 	mov	r17,r2
    5c8c:	000e9ec0 	call	e9ec <__floatsidf>
    5c90:	a009883a 	mov	r4,r20
    5c94:	a80b883a 	mov	r5,r21
    5c98:	100d883a 	mov	r6,r2
    5c9c:	180f883a 	mov	r7,r3
    5ca0:	000e0940 	call	e094 <__subdf3>
    5ca4:	1813883a 	mov	r9,r3
    5ca8:	d8c00717 	ldw	r3,28(sp)
    5cac:	8c400c04 	addi	r17,r17,48
    5cb0:	1011883a 	mov	r8,r2
    5cb4:	1c400005 	stb	r17,0(r3)
    5cb8:	da801617 	ldw	r10,88(sp)
    5cbc:	00800044 	movi	r2,1
    5cc0:	50802326 	beq	r10,r2,5d50 <_dtoa_r+0x14ac>
    5cc4:	d8800717 	ldw	r2,28(sp)
    5cc8:	b82b883a 	mov	r21,r23
    5ccc:	dc001315 	stw	r16,76(sp)
    5cd0:	12a9883a 	add	r20,r2,r10
    5cd4:	4807883a 	mov	r3,r9
    5cd8:	4005883a 	mov	r2,r8
    5cdc:	dc801415 	stw	r18,80(sp)
    5ce0:	000d883a 	mov	r6,zero
    5ce4:	01d00934 	movhi	r7,16420
    5ce8:	1009883a 	mov	r4,r2
    5cec:	180b883a 	mov	r5,r3
    5cf0:	000d8280 	call	d828 <__muldf3>
    5cf4:	180b883a 	mov	r5,r3
    5cf8:	1009883a 	mov	r4,r2
    5cfc:	1821883a 	mov	r16,r3
    5d00:	1025883a 	mov	r18,r2
    5d04:	000e9640 	call	e964 <__fixdfsi>
    5d08:	1009883a 	mov	r4,r2
    5d0c:	1023883a 	mov	r17,r2
    5d10:	000e9ec0 	call	e9ec <__floatsidf>
    5d14:	9009883a 	mov	r4,r18
    5d18:	800b883a 	mov	r5,r16
    5d1c:	100d883a 	mov	r6,r2
    5d20:	180f883a 	mov	r7,r3
    5d24:	8c400c04 	addi	r17,r17,48
    5d28:	000e0940 	call	e094 <__subdf3>
    5d2c:	ad400044 	addi	r21,r21,1
    5d30:	ac7fffc5 	stb	r17,-1(r21)
    5d34:	ad3fea1e 	bne	r21,r20,5ce0 <__alt_data_end+0xfffb05b0>
    5d38:	1813883a 	mov	r9,r3
    5d3c:	d8c01017 	ldw	r3,64(sp)
    5d40:	dc001317 	ldw	r16,76(sp)
    5d44:	dc801417 	ldw	r18,80(sp)
    5d48:	1011883a 	mov	r8,r2
    5d4c:	b8ef883a 	add	r23,r23,r3
    5d50:	d9000e17 	ldw	r4,56(sp)
    5d54:	d9401117 	ldw	r5,68(sp)
    5d58:	000d883a 	mov	r6,zero
    5d5c:	01cff834 	movhi	r7,16352
    5d60:	da001715 	stw	r8,92(sp)
    5d64:	da401515 	stw	r9,84(sp)
    5d68:	000c3c80 	call	c3c8 <__adddf3>
    5d6c:	da001717 	ldw	r8,92(sp)
    5d70:	da401517 	ldw	r9,84(sp)
    5d74:	1009883a 	mov	r4,r2
    5d78:	400d883a 	mov	r6,r8
    5d7c:	480f883a 	mov	r7,r9
    5d80:	180b883a 	mov	r5,r3
    5d84:	000d7480 	call	d748 <__ledf2>
    5d88:	da001717 	ldw	r8,92(sp)
    5d8c:	da401517 	ldw	r9,84(sp)
    5d90:	10003b0e 	bge	r2,zero,5e80 <_dtoa_r+0x15dc>
    5d94:	d9001217 	ldw	r4,72(sp)
    5d98:	bd7fffc3 	ldbu	r21,-1(r23)
    5d9c:	d9000515 	stw	r4,20(sp)
    5da0:	003d1c06 	br	5214 <__alt_data_end+0xfffafae4>
    5da4:	d8c00817 	ldw	r3,32(sp)
    5da8:	18a9c83a 	sub	r20,r3,r2
    5dac:	0005883a 	mov	r2,zero
    5db0:	003d3706 	br	5290 <__alt_data_end+0xfffafb60>
    5db4:	00800044 	movi	r2,1
    5db8:	003dd006 	br	54fc <__alt_data_end+0xfffafdcc>
    5dbc:	d8c00217 	ldw	r3,8(sp)
    5dc0:	00800d84 	movi	r2,54
    5dc4:	dd400917 	ldw	r21,36(sp)
    5dc8:	10c5c83a 	sub	r2,r2,r3
    5dcc:	dd000817 	ldw	r20,32(sp)
    5dd0:	003d2f06 	br	5290 <__alt_data_end+0xfffafb60>
    5dd4:	9029883a 	mov	r20,r18
    5dd8:	982b883a 	mov	r21,r19
    5ddc:	04400084 	movi	r17,2
    5de0:	003bc606 	br	4cfc <__alt_data_end+0xfffaf5cc>
    5de4:	d8800617 	ldw	r2,24(sp)
    5de8:	103efc26 	beq	r2,zero,59dc <__alt_data_end+0xfffb02ac>
    5dec:	d8c00d17 	ldw	r3,52(sp)
    5df0:	00fc890e 	bge	zero,r3,5018 <__alt_data_end+0xfffaf8e8>
    5df4:	a80b883a 	mov	r5,r21
    5df8:	a009883a 	mov	r4,r20
    5dfc:	000d883a 	mov	r6,zero
    5e00:	01d00934 	movhi	r7,16420
    5e04:	000d8280 	call	d828 <__muldf3>
    5e08:	89000044 	addi	r4,r17,1
    5e0c:	1029883a 	mov	r20,r2
    5e10:	182b883a 	mov	r21,r3
    5e14:	000e9ec0 	call	e9ec <__floatsidf>
    5e18:	a009883a 	mov	r4,r20
    5e1c:	a80b883a 	mov	r5,r21
    5e20:	100d883a 	mov	r6,r2
    5e24:	180f883a 	mov	r7,r3
    5e28:	000d8280 	call	d828 <__muldf3>
    5e2c:	1009883a 	mov	r4,r2
    5e30:	180b883a 	mov	r5,r3
    5e34:	000d883a 	mov	r6,zero
    5e38:	01d00734 	movhi	r7,16412
    5e3c:	000c3c80 	call	c3c8 <__adddf3>
    5e40:	d9000517 	ldw	r4,20(sp)
    5e44:	1023883a 	mov	r17,r2
    5e48:	00bf3034 	movhi	r2,64704
    5e4c:	213fffc4 	addi	r4,r4,-1
    5e50:	1885883a 	add	r2,r3,r2
    5e54:	d9001215 	stw	r4,72(sp)
    5e58:	d8800e15 	stw	r2,56(sp)
    5e5c:	da800d17 	ldw	r10,52(sp)
    5e60:	003bc306 	br	4d70 <__alt_data_end+0xfffaf640>
    5e64:	b039883a 	mov	fp,r22
    5e68:	01000e44 	movi	r4,57
    5e6c:	8825883a 	mov	r18,r17
    5e70:	9dc00044 	addi	r23,r19,1
    5e74:	99000005 	stb	r4,0(r19)
    5e78:	a023883a 	mov	r17,r20
    5e7c:	003dae06 	br	5538 <__alt_data_end+0xfffafe08>
    5e80:	d9800e17 	ldw	r6,56(sp)
    5e84:	d9c01117 	ldw	r7,68(sp)
    5e88:	0009883a 	mov	r4,zero
    5e8c:	014ff834 	movhi	r5,16352
    5e90:	da001715 	stw	r8,92(sp)
    5e94:	da401515 	stw	r9,84(sp)
    5e98:	000e0940 	call	e094 <__subdf3>
    5e9c:	da001717 	ldw	r8,92(sp)
    5ea0:	da401517 	ldw	r9,84(sp)
    5ea4:	1009883a 	mov	r4,r2
    5ea8:	180b883a 	mov	r5,r3
    5eac:	400d883a 	mov	r6,r8
    5eb0:	480f883a 	mov	r7,r9
    5eb4:	000d6680 	call	d668 <__gedf2>
    5eb8:	00bc570e 	bge	zero,r2,5018 <__alt_data_end+0xfffaf8e8>
    5ebc:	01000c04 	movi	r4,48
    5ec0:	00000106 	br	5ec8 <_dtoa_r+0x1624>
    5ec4:	102f883a 	mov	r23,r2
    5ec8:	b8bfffc4 	addi	r2,r23,-1
    5ecc:	10c00007 	ldb	r3,0(r2)
    5ed0:	193ffc26 	beq	r3,r4,5ec4 <__alt_data_end+0xfffb0794>
    5ed4:	d9801217 	ldw	r6,72(sp)
    5ed8:	d9800515 	stw	r6,20(sp)
    5edc:	003c1f06 	br	4f5c <__alt_data_end+0xfffaf82c>
    5ee0:	d8801217 	ldw	r2,72(sp)
    5ee4:	dc001117 	ldw	r16,68(sp)
    5ee8:	d8800515 	stw	r2,20(sp)
    5eec:	003cc906 	br	5214 <__alt_data_end+0xfffafae4>
    5ef0:	dd801317 	ldw	r22,76(sp)
    5ef4:	dc001117 	ldw	r16,68(sp)
    5ef8:	dcc01417 	ldw	r19,80(sp)
    5efc:	dc801017 	ldw	r18,64(sp)
    5f00:	003c4506 	br	5018 <__alt_data_end+0xfffaf8e8>
    5f04:	103e5d1e 	bne	r2,zero,587c <__alt_data_end+0xfffb014c>
    5f08:	4080004c 	andi	r2,r8,1
    5f0c:	103e5b26 	beq	r2,zero,587c <__alt_data_end+0xfffb014c>
    5f10:	003e5706 	br	5870 <__alt_data_end+0xfffb0140>
    5f14:	d8c00317 	ldw	r3,12(sp)
    5f18:	00800084 	movi	r2,2
    5f1c:	10c00a16 	blt	r2,r3,5f48 <_dtoa_r+0x16a4>
    5f20:	d9000d17 	ldw	r4,52(sp)
    5f24:	003e8306 	br	5934 <__alt_data_end+0xfffb0204>
    5f28:	04400084 	movi	r17,2
    5f2c:	003b7306 	br	4cfc <__alt_data_end+0xfffaf5cc>
    5f30:	d9801217 	ldw	r6,72(sp)
    5f34:	d9800515 	stw	r6,20(sp)
    5f38:	003cb606 	br	5214 <__alt_data_end+0xfffafae4>
    5f3c:	d9001217 	ldw	r4,72(sp)
    5f40:	d9000515 	stw	r4,20(sp)
    5f44:	003c0506 	br	4f5c <__alt_data_end+0xfffaf82c>
    5f48:	d9800d17 	ldw	r6,52(sp)
    5f4c:	d9800615 	stw	r6,24(sp)
    5f50:	003e8306 	br	5960 <__alt_data_end+0xfffb0230>
    5f54:	d9800317 	ldw	r6,12(sp)
    5f58:	00800084 	movi	r2,2
    5f5c:	11800216 	blt	r2,r6,5f68 <_dtoa_r+0x16c4>
    5f60:	d8800d17 	ldw	r2,52(sp)
    5f64:	003da606 	br	5600 <__alt_data_end+0xfffafed0>
    5f68:	d8800d17 	ldw	r2,52(sp)
    5f6c:	d8800615 	stw	r2,24(sp)
    5f70:	003e7b06 	br	5960 <__alt_data_end+0xfffb0230>
    5f74:	05000044 	movi	r20,1
    5f78:	003b0506 	br	4b90 <__alt_data_end+0xfffaf460>
    5f7c:	8009883a 	mov	r4,r16
    5f80:	80001115 	stw	zero,68(r16)
    5f84:	000b883a 	mov	r5,zero
    5f88:	0007ee00 	call	7ee0 <_Balloc>
    5f8c:	d8800715 	stw	r2,28(sp)
    5f90:	d8c00717 	ldw	r3,28(sp)
    5f94:	00bfffc4 	movi	r2,-1
    5f98:	01000044 	movi	r4,1
    5f9c:	d8800615 	stw	r2,24(sp)
    5fa0:	80c01015 	stw	r3,64(r16)
    5fa4:	d9000b15 	stw	r4,44(sp)
    5fa8:	d8002215 	stw	zero,136(sp)
    5fac:	d8800d15 	stw	r2,52(sp)
    5fb0:	003c1906 	br	5018 <__alt_data_end+0xfffaf8e8>
    5fb4:	193d2926 	beq	r3,r4,545c <__alt_data_end+0xfffafd2c>
    5fb8:	00c00f04 	movi	r3,60
    5fbc:	1885c83a 	sub	r2,r3,r2
    5fc0:	003d7b06 	br	55b0 <__alt_data_end+0xfffafe80>
    5fc4:	000b883a 	mov	r5,zero
    5fc8:	003b1006 	br	4c0c <__alt_data_end+0xfffaf4dc>

00005fcc <_fflush_r>:
    5fcc:	defffb04 	addi	sp,sp,-20
    5fd0:	dcc00315 	stw	r19,12(sp)
    5fd4:	dc000015 	stw	r16,0(sp)
    5fd8:	dfc00415 	stw	ra,16(sp)
    5fdc:	dc800215 	stw	r18,8(sp)
    5fe0:	dc400115 	stw	r17,4(sp)
    5fe4:	2027883a 	mov	r19,r4
    5fe8:	2821883a 	mov	r16,r5
    5fec:	20000226 	beq	r4,zero,5ff8 <_fflush_r+0x2c>
    5ff0:	20800e17 	ldw	r2,56(r4)
    5ff4:	10005326 	beq	r2,zero,6144 <_fflush_r+0x178>
    5ff8:	8080030b 	ldhu	r2,12(r16)
    5ffc:	10ffffcc 	andi	r3,r2,65535
    6000:	18e0001c 	xori	r3,r3,32768
    6004:	18e00004 	addi	r3,r3,-32768
    6008:	18002c26 	beq	r3,zero,60bc <_fflush_r+0xf0>
    600c:	10c0020c 	andi	r3,r2,8
    6010:	1800321e 	bne	r3,zero,60dc <_fflush_r+0x110>
    6014:	80c00117 	ldw	r3,4(r16)
    6018:	10820014 	ori	r2,r2,2048
    601c:	8080030d 	sth	r2,12(r16)
    6020:	00c0570e 	bge	zero,r3,6180 <_fflush_r+0x1b4>
    6024:	82000a17 	ldw	r8,40(r16)
    6028:	40002426 	beq	r8,zero,60bc <_fflush_r+0xf0>
    602c:	9c400017 	ldw	r17,0(r19)
    6030:	10c4000c 	andi	r3,r2,4096
    6034:	98000015 	stw	zero,0(r19)
    6038:	18004626 	beq	r3,zero,6154 <_fflush_r+0x188>
    603c:	81801417 	ldw	r6,80(r16)
    6040:	10c0010c 	andi	r3,r2,4
    6044:	18000626 	beq	r3,zero,6060 <_fflush_r+0x94>
    6048:	80c00117 	ldw	r3,4(r16)
    604c:	80800c17 	ldw	r2,48(r16)
    6050:	30cdc83a 	sub	r6,r6,r3
    6054:	10000226 	beq	r2,zero,6060 <_fflush_r+0x94>
    6058:	80800f17 	ldw	r2,60(r16)
    605c:	308dc83a 	sub	r6,r6,r2
    6060:	81400717 	ldw	r5,28(r16)
    6064:	9809883a 	mov	r4,r19
    6068:	000f883a 	mov	r7,zero
    606c:	403ee83a 	callr	r8
    6070:	00ffffc4 	movi	r3,-1
    6074:	10c04526 	beq	r2,r3,618c <_fflush_r+0x1c0>
    6078:	80c0030b 	ldhu	r3,12(r16)
    607c:	81000417 	ldw	r4,16(r16)
    6080:	80000115 	stw	zero,4(r16)
    6084:	197dffcc 	andi	r5,r3,63487
    6088:	8140030d 	sth	r5,12(r16)
    608c:	81000015 	stw	r4,0(r16)
    6090:	18c4000c 	andi	r3,r3,4096
    6094:	18000126 	beq	r3,zero,609c <_fflush_r+0xd0>
    6098:	80801415 	stw	r2,80(r16)
    609c:	81400c17 	ldw	r5,48(r16)
    60a0:	9c400015 	stw	r17,0(r19)
    60a4:	28000526 	beq	r5,zero,60bc <_fflush_r+0xf0>
    60a8:	80801004 	addi	r2,r16,64
    60ac:	28800226 	beq	r5,r2,60b8 <_fflush_r+0xec>
    60b0:	9809883a 	mov	r4,r19
    60b4:	00066fc0 	call	66fc <_free_r>
    60b8:	80000c15 	stw	zero,48(r16)
    60bc:	0005883a 	mov	r2,zero
    60c0:	dfc00417 	ldw	ra,16(sp)
    60c4:	dcc00317 	ldw	r19,12(sp)
    60c8:	dc800217 	ldw	r18,8(sp)
    60cc:	dc400117 	ldw	r17,4(sp)
    60d0:	dc000017 	ldw	r16,0(sp)
    60d4:	dec00504 	addi	sp,sp,20
    60d8:	f800283a 	ret
    60dc:	84800417 	ldw	r18,16(r16)
    60e0:	903ff626 	beq	r18,zero,60bc <__alt_data_end+0xfffb098c>
    60e4:	84400017 	ldw	r17,0(r16)
    60e8:	108000cc 	andi	r2,r2,3
    60ec:	84800015 	stw	r18,0(r16)
    60f0:	8ca3c83a 	sub	r17,r17,r18
    60f4:	10001526 	beq	r2,zero,614c <_fflush_r+0x180>
    60f8:	0005883a 	mov	r2,zero
    60fc:	80800215 	stw	r2,8(r16)
    6100:	04400316 	blt	zero,r17,6110 <_fflush_r+0x144>
    6104:	003fed06 	br	60bc <__alt_data_end+0xfffb098c>
    6108:	90a5883a 	add	r18,r18,r2
    610c:	047feb0e 	bge	zero,r17,60bc <__alt_data_end+0xfffb098c>
    6110:	80800917 	ldw	r2,36(r16)
    6114:	81400717 	ldw	r5,28(r16)
    6118:	880f883a 	mov	r7,r17
    611c:	900d883a 	mov	r6,r18
    6120:	9809883a 	mov	r4,r19
    6124:	103ee83a 	callr	r2
    6128:	88a3c83a 	sub	r17,r17,r2
    612c:	00bff616 	blt	zero,r2,6108 <__alt_data_end+0xfffb09d8>
    6130:	80c0030b 	ldhu	r3,12(r16)
    6134:	00bfffc4 	movi	r2,-1
    6138:	18c01014 	ori	r3,r3,64
    613c:	80c0030d 	sth	r3,12(r16)
    6140:	003fdf06 	br	60c0 <__alt_data_end+0xfffb0990>
    6144:	00065880 	call	6588 <__sinit>
    6148:	003fab06 	br	5ff8 <__alt_data_end+0xfffb08c8>
    614c:	80800517 	ldw	r2,20(r16)
    6150:	003fea06 	br	60fc <__alt_data_end+0xfffb09cc>
    6154:	81400717 	ldw	r5,28(r16)
    6158:	000d883a 	mov	r6,zero
    615c:	9809883a 	mov	r4,r19
    6160:	01c00044 	movi	r7,1
    6164:	403ee83a 	callr	r8
    6168:	100d883a 	mov	r6,r2
    616c:	00bfffc4 	movi	r2,-1
    6170:	30801326 	beq	r6,r2,61c0 <_fflush_r+0x1f4>
    6174:	8080030b 	ldhu	r2,12(r16)
    6178:	82000a17 	ldw	r8,40(r16)
    617c:	003fb006 	br	6040 <__alt_data_end+0xfffb0910>
    6180:	80c00f17 	ldw	r3,60(r16)
    6184:	00ffa716 	blt	zero,r3,6024 <__alt_data_end+0xfffb08f4>
    6188:	003fcc06 	br	60bc <__alt_data_end+0xfffb098c>
    618c:	98c00017 	ldw	r3,0(r19)
    6190:	183fb926 	beq	r3,zero,6078 <__alt_data_end+0xfffb0948>
    6194:	01000744 	movi	r4,29
    6198:	19000226 	beq	r3,r4,61a4 <_fflush_r+0x1d8>
    619c:	01000584 	movi	r4,22
    61a0:	1900101e 	bne	r3,r4,61e4 <_fflush_r+0x218>
    61a4:	8080030b 	ldhu	r2,12(r16)
    61a8:	80c00417 	ldw	r3,16(r16)
    61ac:	80000115 	stw	zero,4(r16)
    61b0:	10bdffcc 	andi	r2,r2,63487
    61b4:	8080030d 	sth	r2,12(r16)
    61b8:	80c00015 	stw	r3,0(r16)
    61bc:	003fb706 	br	609c <__alt_data_end+0xfffb096c>
    61c0:	98800017 	ldw	r2,0(r19)
    61c4:	103feb26 	beq	r2,zero,6174 <__alt_data_end+0xfffb0a44>
    61c8:	00c00744 	movi	r3,29
    61cc:	10c00226 	beq	r2,r3,61d8 <_fflush_r+0x20c>
    61d0:	00c00584 	movi	r3,22
    61d4:	10ffd61e 	bne	r2,r3,6130 <__alt_data_end+0xfffb0a00>
    61d8:	9c400015 	stw	r17,0(r19)
    61dc:	0005883a 	mov	r2,zero
    61e0:	003fb706 	br	60c0 <__alt_data_end+0xfffb0990>
    61e4:	80c0030b 	ldhu	r3,12(r16)
    61e8:	18c01014 	ori	r3,r3,64
    61ec:	80c0030d 	sth	r3,12(r16)
    61f0:	003fb306 	br	60c0 <__alt_data_end+0xfffb0990>

000061f4 <fflush>:
    61f4:	20000526 	beq	r4,zero,620c <fflush+0x18>
    61f8:	00800074 	movhi	r2,1
    61fc:	108e5704 	addi	r2,r2,14684
    6200:	200b883a 	mov	r5,r4
    6204:	11000017 	ldw	r4,0(r2)
    6208:	0005fcc1 	jmpi	5fcc <_fflush_r>
    620c:	00800074 	movhi	r2,1
    6210:	108e5604 	addi	r2,r2,14680
    6214:	11000017 	ldw	r4,0(r2)
    6218:	01400034 	movhi	r5,0
    621c:	2957f304 	addi	r5,r5,24524
    6220:	0006f481 	jmpi	6f48 <_fwalk_reent>

00006224 <__fp_lock>:
    6224:	0005883a 	mov	r2,zero
    6228:	f800283a 	ret

0000622c <__fp_unlock>:
    622c:	0005883a 	mov	r2,zero
    6230:	f800283a 	ret

00006234 <_cleanup_r>:
    6234:	01400074 	movhi	r5,1
    6238:	296bd504 	addi	r5,r5,-20652
    623c:	0006e901 	jmpi	6e90 <_fwalk>

00006240 <__sinit.part.1>:
    6240:	defff604 	addi	sp,sp,-40
    6244:	00c00034 	movhi	r3,0
    6248:	dfc00915 	stw	ra,36(sp)
    624c:	df000815 	stw	fp,32(sp)
    6250:	ddc00715 	stw	r23,28(sp)
    6254:	dd800615 	stw	r22,24(sp)
    6258:	dd400515 	stw	r21,20(sp)
    625c:	dd000415 	stw	r20,16(sp)
    6260:	dcc00315 	stw	r19,12(sp)
    6264:	dc800215 	stw	r18,8(sp)
    6268:	dc400115 	stw	r17,4(sp)
    626c:	dc000015 	stw	r16,0(sp)
    6270:	18d88d04 	addi	r3,r3,25140
    6274:	24000117 	ldw	r16,4(r4)
    6278:	20c00f15 	stw	r3,60(r4)
    627c:	07000044 	movi	fp,1
    6280:	00c000c4 	movi	r3,3
    6284:	2080bb04 	addi	r2,r4,748
    6288:	20c0b915 	stw	r3,740(r4)
    628c:	27000e15 	stw	fp,56(r4)
    6290:	2080ba15 	stw	r2,744(r4)
    6294:	2000b815 	stw	zero,736(r4)
    6298:	05c00204 	movi	r23,8
    629c:	00800104 	movi	r2,4
    62a0:	2025883a 	mov	r18,r4
    62a4:	b80d883a 	mov	r6,r23
    62a8:	81001704 	addi	r4,r16,92
    62ac:	000b883a 	mov	r5,zero
    62b0:	80000015 	stw	zero,0(r16)
    62b4:	80000115 	stw	zero,4(r16)
    62b8:	80000215 	stw	zero,8(r16)
    62bc:	8080030d 	sth	r2,12(r16)
    62c0:	80001915 	stw	zero,100(r16)
    62c4:	8000038d 	sth	zero,14(r16)
    62c8:	80000415 	stw	zero,16(r16)
    62cc:	80000515 	stw	zero,20(r16)
    62d0:	80000615 	stw	zero,24(r16)
    62d4:	0007dbc0 	call	7dbc <memset>
    62d8:	05800074 	movhi	r22,1
    62dc:	94400217 	ldw	r17,8(r18)
    62e0:	05400074 	movhi	r21,1
    62e4:	05000074 	movhi	r20,1
    62e8:	04c00074 	movhi	r19,1
    62ec:	b5a56404 	addi	r22,r22,-27248
    62f0:	ad657b04 	addi	r21,r21,-27156
    62f4:	a5259a04 	addi	r20,r20,-27032
    62f8:	9ce5b104 	addi	r19,r19,-26940
    62fc:	85800815 	stw	r22,32(r16)
    6300:	85400915 	stw	r21,36(r16)
    6304:	85000a15 	stw	r20,40(r16)
    6308:	84c00b15 	stw	r19,44(r16)
    630c:	84000715 	stw	r16,28(r16)
    6310:	00800284 	movi	r2,10
    6314:	89001704 	addi	r4,r17,92
    6318:	b80d883a 	mov	r6,r23
    631c:	000b883a 	mov	r5,zero
    6320:	88000015 	stw	zero,0(r17)
    6324:	88000115 	stw	zero,4(r17)
    6328:	88000215 	stw	zero,8(r17)
    632c:	8880030d 	sth	r2,12(r17)
    6330:	88001915 	stw	zero,100(r17)
    6334:	8f00038d 	sth	fp,14(r17)
    6338:	88000415 	stw	zero,16(r17)
    633c:	88000515 	stw	zero,20(r17)
    6340:	88000615 	stw	zero,24(r17)
    6344:	0007dbc0 	call	7dbc <memset>
    6348:	94000317 	ldw	r16,12(r18)
    634c:	00800484 	movi	r2,18
    6350:	8c400715 	stw	r17,28(r17)
    6354:	8d800815 	stw	r22,32(r17)
    6358:	8d400915 	stw	r21,36(r17)
    635c:	8d000a15 	stw	r20,40(r17)
    6360:	8cc00b15 	stw	r19,44(r17)
    6364:	8080030d 	sth	r2,12(r16)
    6368:	00800084 	movi	r2,2
    636c:	80000015 	stw	zero,0(r16)
    6370:	80000115 	stw	zero,4(r16)
    6374:	80000215 	stw	zero,8(r16)
    6378:	80001915 	stw	zero,100(r16)
    637c:	8080038d 	sth	r2,14(r16)
    6380:	80000415 	stw	zero,16(r16)
    6384:	80000515 	stw	zero,20(r16)
    6388:	80000615 	stw	zero,24(r16)
    638c:	81001704 	addi	r4,r16,92
    6390:	000b883a 	mov	r5,zero
    6394:	b80d883a 	mov	r6,r23
    6398:	0007dbc0 	call	7dbc <memset>
    639c:	84000715 	stw	r16,28(r16)
    63a0:	85800815 	stw	r22,32(r16)
    63a4:	85400915 	stw	r21,36(r16)
    63a8:	85000a15 	stw	r20,40(r16)
    63ac:	84c00b15 	stw	r19,44(r16)
    63b0:	dfc00917 	ldw	ra,36(sp)
    63b4:	df000817 	ldw	fp,32(sp)
    63b8:	ddc00717 	ldw	r23,28(sp)
    63bc:	dd800617 	ldw	r22,24(sp)
    63c0:	dd400517 	ldw	r21,20(sp)
    63c4:	dd000417 	ldw	r20,16(sp)
    63c8:	dcc00317 	ldw	r19,12(sp)
    63cc:	dc800217 	ldw	r18,8(sp)
    63d0:	dc400117 	ldw	r17,4(sp)
    63d4:	dc000017 	ldw	r16,0(sp)
    63d8:	dec00a04 	addi	sp,sp,40
    63dc:	f800283a 	ret

000063e0 <__sfmoreglue>:
    63e0:	defffc04 	addi	sp,sp,-16
    63e4:	dc800215 	stw	r18,8(sp)
    63e8:	2825883a 	mov	r18,r5
    63ec:	dc000015 	stw	r16,0(sp)
    63f0:	01401a04 	movi	r5,104
    63f4:	2021883a 	mov	r16,r4
    63f8:	9009883a 	mov	r4,r18
    63fc:	dfc00315 	stw	ra,12(sp)
    6400:	dc400115 	stw	r17,4(sp)
    6404:	000c3a00 	call	c3a0 <__mulsi3>
    6408:	8009883a 	mov	r4,r16
    640c:	11400304 	addi	r5,r2,12
    6410:	1023883a 	mov	r17,r2
    6414:	00072980 	call	7298 <_malloc_r>
    6418:	1021883a 	mov	r16,r2
    641c:	10000726 	beq	r2,zero,643c <__sfmoreglue+0x5c>
    6420:	11000304 	addi	r4,r2,12
    6424:	10000015 	stw	zero,0(r2)
    6428:	14800115 	stw	r18,4(r2)
    642c:	11000215 	stw	r4,8(r2)
    6430:	000b883a 	mov	r5,zero
    6434:	880d883a 	mov	r6,r17
    6438:	0007dbc0 	call	7dbc <memset>
    643c:	8005883a 	mov	r2,r16
    6440:	dfc00317 	ldw	ra,12(sp)
    6444:	dc800217 	ldw	r18,8(sp)
    6448:	dc400117 	ldw	r17,4(sp)
    644c:	dc000017 	ldw	r16,0(sp)
    6450:	dec00404 	addi	sp,sp,16
    6454:	f800283a 	ret

00006458 <__sfp>:
    6458:	00800074 	movhi	r2,1
    645c:	defffb04 	addi	sp,sp,-20
    6460:	108e5604 	addi	r2,r2,14680
    6464:	dc800215 	stw	r18,8(sp)
    6468:	14800017 	ldw	r18,0(r2)
    646c:	dcc00315 	stw	r19,12(sp)
    6470:	dfc00415 	stw	ra,16(sp)
    6474:	90800e17 	ldw	r2,56(r18)
    6478:	dc400115 	stw	r17,4(sp)
    647c:	dc000015 	stw	r16,0(sp)
    6480:	2027883a 	mov	r19,r4
    6484:	1000021e 	bne	r2,zero,6490 <__sfp+0x38>
    6488:	9009883a 	mov	r4,r18
    648c:	00062400 	call	6240 <__sinit.part.1>
    6490:	9480b804 	addi	r18,r18,736
    6494:	047fffc4 	movi	r17,-1
    6498:	91400117 	ldw	r5,4(r18)
    649c:	94000217 	ldw	r16,8(r18)
    64a0:	297fffc4 	addi	r5,r5,-1
    64a4:	28000a16 	blt	r5,zero,64d0 <__sfp+0x78>
    64a8:	8080030f 	ldh	r2,12(r16)
    64ac:	10000c26 	beq	r2,zero,64e0 <__sfp+0x88>
    64b0:	80c01d04 	addi	r3,r16,116
    64b4:	00000206 	br	64c0 <__sfp+0x68>
    64b8:	18bfe60f 	ldh	r2,-104(r3)
    64bc:	10000826 	beq	r2,zero,64e0 <__sfp+0x88>
    64c0:	297fffc4 	addi	r5,r5,-1
    64c4:	1c3ffd04 	addi	r16,r3,-12
    64c8:	18c01a04 	addi	r3,r3,104
    64cc:	2c7ffa1e 	bne	r5,r17,64b8 <__alt_data_end+0xfffb0d88>
    64d0:	90800017 	ldw	r2,0(r18)
    64d4:	10001d26 	beq	r2,zero,654c <__sfp+0xf4>
    64d8:	1025883a 	mov	r18,r2
    64dc:	003fee06 	br	6498 <__alt_data_end+0xfffb0d68>
    64e0:	00bfffc4 	movi	r2,-1
    64e4:	8080038d 	sth	r2,14(r16)
    64e8:	00800044 	movi	r2,1
    64ec:	8080030d 	sth	r2,12(r16)
    64f0:	80001915 	stw	zero,100(r16)
    64f4:	80000015 	stw	zero,0(r16)
    64f8:	80000215 	stw	zero,8(r16)
    64fc:	80000115 	stw	zero,4(r16)
    6500:	80000415 	stw	zero,16(r16)
    6504:	80000515 	stw	zero,20(r16)
    6508:	80000615 	stw	zero,24(r16)
    650c:	81001704 	addi	r4,r16,92
    6510:	000b883a 	mov	r5,zero
    6514:	01800204 	movi	r6,8
    6518:	0007dbc0 	call	7dbc <memset>
    651c:	8005883a 	mov	r2,r16
    6520:	80000c15 	stw	zero,48(r16)
    6524:	80000d15 	stw	zero,52(r16)
    6528:	80001115 	stw	zero,68(r16)
    652c:	80001215 	stw	zero,72(r16)
    6530:	dfc00417 	ldw	ra,16(sp)
    6534:	dcc00317 	ldw	r19,12(sp)
    6538:	dc800217 	ldw	r18,8(sp)
    653c:	dc400117 	ldw	r17,4(sp)
    6540:	dc000017 	ldw	r16,0(sp)
    6544:	dec00504 	addi	sp,sp,20
    6548:	f800283a 	ret
    654c:	9809883a 	mov	r4,r19
    6550:	01400104 	movi	r5,4
    6554:	00063e00 	call	63e0 <__sfmoreglue>
    6558:	90800015 	stw	r2,0(r18)
    655c:	103fde1e 	bne	r2,zero,64d8 <__alt_data_end+0xfffb0da8>
    6560:	00800304 	movi	r2,12
    6564:	98800015 	stw	r2,0(r19)
    6568:	0005883a 	mov	r2,zero
    656c:	003ff006 	br	6530 <__alt_data_end+0xfffb0e00>

00006570 <_cleanup>:
    6570:	00800074 	movhi	r2,1
    6574:	108e5604 	addi	r2,r2,14680
    6578:	11000017 	ldw	r4,0(r2)
    657c:	01400074 	movhi	r5,1
    6580:	296bd504 	addi	r5,r5,-20652
    6584:	0006e901 	jmpi	6e90 <_fwalk>

00006588 <__sinit>:
    6588:	20800e17 	ldw	r2,56(r4)
    658c:	10000126 	beq	r2,zero,6594 <__sinit+0xc>
    6590:	f800283a 	ret
    6594:	00062401 	jmpi	6240 <__sinit.part.1>

00006598 <__sfp_lock_acquire>:
    6598:	f800283a 	ret

0000659c <__sfp_lock_release>:
    659c:	f800283a 	ret

000065a0 <__sinit_lock_acquire>:
    65a0:	f800283a 	ret

000065a4 <__sinit_lock_release>:
    65a4:	f800283a 	ret

000065a8 <__fp_lock_all>:
    65a8:	00800074 	movhi	r2,1
    65ac:	108e5704 	addi	r2,r2,14684
    65b0:	11000017 	ldw	r4,0(r2)
    65b4:	01400034 	movhi	r5,0
    65b8:	29588904 	addi	r5,r5,25124
    65bc:	0006e901 	jmpi	6e90 <_fwalk>

000065c0 <__fp_unlock_all>:
    65c0:	00800074 	movhi	r2,1
    65c4:	108e5704 	addi	r2,r2,14684
    65c8:	11000017 	ldw	r4,0(r2)
    65cc:	01400034 	movhi	r5,0
    65d0:	29588b04 	addi	r5,r5,25132
    65d4:	0006e901 	jmpi	6e90 <_fwalk>

000065d8 <_malloc_trim_r>:
    65d8:	defffb04 	addi	sp,sp,-20
    65dc:	dcc00315 	stw	r19,12(sp)
    65e0:	04c00074 	movhi	r19,1
    65e4:	dc800215 	stw	r18,8(sp)
    65e8:	dc400115 	stw	r17,4(sp)
    65ec:	dc000015 	stw	r16,0(sp)
    65f0:	dfc00415 	stw	ra,16(sp)
    65f4:	2821883a 	mov	r16,r5
    65f8:	9cc8d204 	addi	r19,r19,9032
    65fc:	2025883a 	mov	r18,r4
    6600:	000f1a40 	call	f1a4 <__malloc_lock>
    6604:	98800217 	ldw	r2,8(r19)
    6608:	14400117 	ldw	r17,4(r2)
    660c:	00bfff04 	movi	r2,-4
    6610:	88a2703a 	and	r17,r17,r2
    6614:	8c21c83a 	sub	r16,r17,r16
    6618:	8403fbc4 	addi	r16,r16,4079
    661c:	8020d33a 	srli	r16,r16,12
    6620:	0083ffc4 	movi	r2,4095
    6624:	843fffc4 	addi	r16,r16,-1
    6628:	8020933a 	slli	r16,r16,12
    662c:	1400060e 	bge	r2,r16,6648 <_malloc_trim_r+0x70>
    6630:	9009883a 	mov	r4,r18
    6634:	000b883a 	mov	r5,zero
    6638:	000953c0 	call	953c <_sbrk_r>
    663c:	98c00217 	ldw	r3,8(r19)
    6640:	1c47883a 	add	r3,r3,r17
    6644:	10c00a26 	beq	r2,r3,6670 <_malloc_trim_r+0x98>
    6648:	9009883a 	mov	r4,r18
    664c:	000f1c40 	call	f1c4 <__malloc_unlock>
    6650:	0005883a 	mov	r2,zero
    6654:	dfc00417 	ldw	ra,16(sp)
    6658:	dcc00317 	ldw	r19,12(sp)
    665c:	dc800217 	ldw	r18,8(sp)
    6660:	dc400117 	ldw	r17,4(sp)
    6664:	dc000017 	ldw	r16,0(sp)
    6668:	dec00504 	addi	sp,sp,20
    666c:	f800283a 	ret
    6670:	9009883a 	mov	r4,r18
    6674:	040bc83a 	sub	r5,zero,r16
    6678:	000953c0 	call	953c <_sbrk_r>
    667c:	00ffffc4 	movi	r3,-1
    6680:	10c00d26 	beq	r2,r3,66b8 <_malloc_trim_r+0xe0>
    6684:	00c00074 	movhi	r3,1
    6688:	18d53604 	addi	r3,r3,21720
    668c:	18800017 	ldw	r2,0(r3)
    6690:	99000217 	ldw	r4,8(r19)
    6694:	8c23c83a 	sub	r17,r17,r16
    6698:	8c400054 	ori	r17,r17,1
    669c:	1421c83a 	sub	r16,r2,r16
    66a0:	24400115 	stw	r17,4(r4)
    66a4:	9009883a 	mov	r4,r18
    66a8:	1c000015 	stw	r16,0(r3)
    66ac:	000f1c40 	call	f1c4 <__malloc_unlock>
    66b0:	00800044 	movi	r2,1
    66b4:	003fe706 	br	6654 <__alt_data_end+0xfffb0f24>
    66b8:	9009883a 	mov	r4,r18
    66bc:	000b883a 	mov	r5,zero
    66c0:	000953c0 	call	953c <_sbrk_r>
    66c4:	99000217 	ldw	r4,8(r19)
    66c8:	014003c4 	movi	r5,15
    66cc:	1107c83a 	sub	r3,r2,r4
    66d0:	28ffdd0e 	bge	r5,r3,6648 <__alt_data_end+0xfffb0f18>
    66d4:	01400074 	movhi	r5,1
    66d8:	294e5904 	addi	r5,r5,14692
    66dc:	29400017 	ldw	r5,0(r5)
    66e0:	18c00054 	ori	r3,r3,1
    66e4:	20c00115 	stw	r3,4(r4)
    66e8:	00c00074 	movhi	r3,1
    66ec:	1145c83a 	sub	r2,r2,r5
    66f0:	18d53604 	addi	r3,r3,21720
    66f4:	18800015 	stw	r2,0(r3)
    66f8:	003fd306 	br	6648 <__alt_data_end+0xfffb0f18>

000066fc <_free_r>:
    66fc:	28004c26 	beq	r5,zero,6830 <_free_r+0x134>
    6700:	defffd04 	addi	sp,sp,-12
    6704:	dc400115 	stw	r17,4(sp)
    6708:	dc000015 	stw	r16,0(sp)
    670c:	2023883a 	mov	r17,r4
    6710:	2821883a 	mov	r16,r5
    6714:	dfc00215 	stw	ra,8(sp)
    6718:	000f1a40 	call	f1a4 <__malloc_lock>
    671c:	813fff17 	ldw	r4,-4(r16)
    6720:	00bfff84 	movi	r2,-2
    6724:	02400074 	movhi	r9,1
    6728:	81bffe04 	addi	r6,r16,-8
    672c:	2084703a 	and	r2,r4,r2
    6730:	4a48d204 	addi	r9,r9,9032
    6734:	308b883a 	add	r5,r6,r2
    6738:	2a000117 	ldw	r8,4(r5)
    673c:	49c00217 	ldw	r7,8(r9)
    6740:	00ffff04 	movi	r3,-4
    6744:	40c6703a 	and	r3,r8,r3
    6748:	39405326 	beq	r7,r5,6898 <_free_r+0x19c>
    674c:	28c00115 	stw	r3,4(r5)
    6750:	2100004c 	andi	r4,r4,1
    6754:	2000091e 	bne	r4,zero,677c <_free_r+0x80>
    6758:	81fffe17 	ldw	r7,-8(r16)
    675c:	4a000204 	addi	r8,r9,8
    6760:	31cdc83a 	sub	r6,r6,r7
    6764:	31000217 	ldw	r4,8(r6)
    6768:	11c5883a 	add	r2,r2,r7
    676c:	22006126 	beq	r4,r8,68f4 <_free_r+0x1f8>
    6770:	31c00317 	ldw	r7,12(r6)
    6774:	21c00315 	stw	r7,12(r4)
    6778:	39000215 	stw	r4,8(r7)
    677c:	28c9883a 	add	r4,r5,r3
    6780:	21c00117 	ldw	r7,4(r4)
    6784:	39c0004c 	andi	r7,r7,1
    6788:	38000d1e 	bne	r7,zero,67c0 <_free_r+0xc4>
    678c:	29000217 	ldw	r4,8(r5)
    6790:	10c5883a 	add	r2,r2,r3
    6794:	00c00074 	movhi	r3,1
    6798:	18c8d404 	addi	r3,r3,9040
    679c:	20c07526 	beq	r4,r3,6974 <_free_r+0x278>
    67a0:	29c00317 	ldw	r7,12(r5)
    67a4:	11400054 	ori	r5,r2,1
    67a8:	3087883a 	add	r3,r6,r2
    67ac:	21c00315 	stw	r7,12(r4)
    67b0:	39000215 	stw	r4,8(r7)
    67b4:	31400115 	stw	r5,4(r6)
    67b8:	18800015 	stw	r2,0(r3)
    67bc:	00000406 	br	67d0 <_free_r+0xd4>
    67c0:	10c00054 	ori	r3,r2,1
    67c4:	30c00115 	stw	r3,4(r6)
    67c8:	3087883a 	add	r3,r6,r2
    67cc:	18800015 	stw	r2,0(r3)
    67d0:	00c07fc4 	movi	r3,511
    67d4:	18801736 	bltu	r3,r2,6834 <_free_r+0x138>
    67d8:	1004d0fa 	srli	r2,r2,3
    67dc:	01400044 	movi	r5,1
    67e0:	49000117 	ldw	r4,4(r9)
    67e4:	1087883a 	add	r3,r2,r2
    67e8:	18c7883a 	add	r3,r3,r3
    67ec:	1005d0ba 	srai	r2,r2,2
    67f0:	18c7883a 	add	r3,r3,r3
    67f4:	1a47883a 	add	r3,r3,r9
    67f8:	19c00217 	ldw	r7,8(r3)
    67fc:	2884983a 	sll	r2,r5,r2
    6800:	30c00315 	stw	r3,12(r6)
    6804:	31c00215 	stw	r7,8(r6)
    6808:	1104b03a 	or	r2,r2,r4
    680c:	19800215 	stw	r6,8(r3)
    6810:	48800115 	stw	r2,4(r9)
    6814:	39800315 	stw	r6,12(r7)
    6818:	8809883a 	mov	r4,r17
    681c:	dfc00217 	ldw	ra,8(sp)
    6820:	dc400117 	ldw	r17,4(sp)
    6824:	dc000017 	ldw	r16,0(sp)
    6828:	dec00304 	addi	sp,sp,12
    682c:	000f1c41 	jmpi	f1c4 <__malloc_unlock>
    6830:	f800283a 	ret
    6834:	1006d27a 	srli	r3,r2,9
    6838:	01000104 	movi	r4,4
    683c:	20c04036 	bltu	r4,r3,6940 <_free_r+0x244>
    6840:	1006d1ba 	srli	r3,r2,6
    6844:	19400e04 	addi	r5,r3,56
    6848:	2947883a 	add	r3,r5,r5
    684c:	18c7883a 	add	r3,r3,r3
    6850:	18c7883a 	add	r3,r3,r3
    6854:	1a49883a 	add	r4,r3,r9
    6858:	20c00217 	ldw	r3,8(r4)
    685c:	01c00074 	movhi	r7,1
    6860:	39c8d204 	addi	r7,r7,9032
    6864:	19003b26 	beq	r3,r4,6954 <_free_r+0x258>
    6868:	01ffff04 	movi	r7,-4
    686c:	19400117 	ldw	r5,4(r3)
    6870:	29ca703a 	and	r5,r5,r7
    6874:	1140022e 	bgeu	r2,r5,6880 <_free_r+0x184>
    6878:	18c00217 	ldw	r3,8(r3)
    687c:	20fffb1e 	bne	r4,r3,686c <__alt_data_end+0xfffb113c>
    6880:	18800317 	ldw	r2,12(r3)
    6884:	30800315 	stw	r2,12(r6)
    6888:	30c00215 	stw	r3,8(r6)
    688c:	11800215 	stw	r6,8(r2)
    6890:	19800315 	stw	r6,12(r3)
    6894:	003fe006 	br	6818 <__alt_data_end+0xfffb10e8>
    6898:	2100004c 	andi	r4,r4,1
    689c:	1885883a 	add	r2,r3,r2
    68a0:	2000071e 	bne	r4,zero,68c0 <_free_r+0x1c4>
    68a4:	817ffe17 	ldw	r5,-8(r16)
    68a8:	314dc83a 	sub	r6,r6,r5
    68ac:	30c00317 	ldw	r3,12(r6)
    68b0:	31000217 	ldw	r4,8(r6)
    68b4:	1145883a 	add	r2,r2,r5
    68b8:	20c00315 	stw	r3,12(r4)
    68bc:	19000215 	stw	r4,8(r3)
    68c0:	10c00054 	ori	r3,r2,1
    68c4:	30c00115 	stw	r3,4(r6)
    68c8:	00c00074 	movhi	r3,1
    68cc:	18ce5a04 	addi	r3,r3,14696
    68d0:	18c00017 	ldw	r3,0(r3)
    68d4:	49800215 	stw	r6,8(r9)
    68d8:	10ffcf36 	bltu	r2,r3,6818 <__alt_data_end+0xfffb10e8>
    68dc:	00800074 	movhi	r2,1
    68e0:	10952d04 	addi	r2,r2,21684
    68e4:	11400017 	ldw	r5,0(r2)
    68e8:	8809883a 	mov	r4,r17
    68ec:	00065d80 	call	65d8 <_malloc_trim_r>
    68f0:	003fc906 	br	6818 <__alt_data_end+0xfffb10e8>
    68f4:	28c9883a 	add	r4,r5,r3
    68f8:	21000117 	ldw	r4,4(r4)
    68fc:	2100004c 	andi	r4,r4,1
    6900:	20000a1e 	bne	r4,zero,692c <_free_r+0x230>
    6904:	29000317 	ldw	r4,12(r5)
    6908:	29400217 	ldw	r5,8(r5)
    690c:	10c5883a 	add	r2,r2,r3
    6910:	10c00054 	ori	r3,r2,1
    6914:	29000315 	stw	r4,12(r5)
    6918:	21400215 	stw	r5,8(r4)
    691c:	30c00115 	stw	r3,4(r6)
    6920:	308d883a 	add	r6,r6,r2
    6924:	30800015 	stw	r2,0(r6)
    6928:	003fbb06 	br	6818 <__alt_data_end+0xfffb10e8>
    692c:	10c00054 	ori	r3,r2,1
    6930:	30c00115 	stw	r3,4(r6)
    6934:	308d883a 	add	r6,r6,r2
    6938:	30800015 	stw	r2,0(r6)
    693c:	003fb606 	br	6818 <__alt_data_end+0xfffb10e8>
    6940:	01000504 	movi	r4,20
    6944:	20c01436 	bltu	r4,r3,6998 <_free_r+0x29c>
    6948:	194016c4 	addi	r5,r3,91
    694c:	2947883a 	add	r3,r5,r5
    6950:	003fbe06 	br	684c <__alt_data_end+0xfffb111c>
    6954:	280bd0ba 	srai	r5,r5,2
    6958:	00800044 	movi	r2,1
    695c:	39000117 	ldw	r4,4(r7)
    6960:	114a983a 	sll	r5,r2,r5
    6964:	1805883a 	mov	r2,r3
    6968:	2908b03a 	or	r4,r5,r4
    696c:	39000115 	stw	r4,4(r7)
    6970:	003fc406 	br	6884 <__alt_data_end+0xfffb1154>
    6974:	49800515 	stw	r6,20(r9)
    6978:	49800415 	stw	r6,16(r9)
    697c:	10c00054 	ori	r3,r2,1
    6980:	31000315 	stw	r4,12(r6)
    6984:	31000215 	stw	r4,8(r6)
    6988:	30c00115 	stw	r3,4(r6)
    698c:	308d883a 	add	r6,r6,r2
    6990:	30800015 	stw	r2,0(r6)
    6994:	003fa006 	br	6818 <__alt_data_end+0xfffb10e8>
    6998:	01001504 	movi	r4,84
    699c:	20c00436 	bltu	r4,r3,69b0 <_free_r+0x2b4>
    69a0:	1006d33a 	srli	r3,r2,12
    69a4:	19401b84 	addi	r5,r3,110
    69a8:	2947883a 	add	r3,r5,r5
    69ac:	003fa706 	br	684c <__alt_data_end+0xfffb111c>
    69b0:	01005504 	movi	r4,340
    69b4:	20c00436 	bltu	r4,r3,69c8 <_free_r+0x2cc>
    69b8:	1006d3fa 	srli	r3,r2,15
    69bc:	19401dc4 	addi	r5,r3,119
    69c0:	2947883a 	add	r3,r5,r5
    69c4:	003fa106 	br	684c <__alt_data_end+0xfffb111c>
    69c8:	01015504 	movi	r4,1364
    69cc:	20c00436 	bltu	r4,r3,69e0 <_free_r+0x2e4>
    69d0:	1006d4ba 	srli	r3,r2,18
    69d4:	19401f04 	addi	r5,r3,124
    69d8:	2947883a 	add	r3,r5,r5
    69dc:	003f9b06 	br	684c <__alt_data_end+0xfffb111c>
    69e0:	00c03f04 	movi	r3,252
    69e4:	01401f84 	movi	r5,126
    69e8:	003f9806 	br	684c <__alt_data_end+0xfffb111c>

000069ec <__sfvwrite_r>:
    69ec:	30800217 	ldw	r2,8(r6)
    69f0:	10004526 	beq	r2,zero,6b08 <__sfvwrite_r+0x11c>
    69f4:	28c0030b 	ldhu	r3,12(r5)
    69f8:	defff404 	addi	sp,sp,-48
    69fc:	dd400715 	stw	r21,28(sp)
    6a00:	dcc00515 	stw	r19,20(sp)
    6a04:	dc000215 	stw	r16,8(sp)
    6a08:	dfc00b15 	stw	ra,44(sp)
    6a0c:	df000a15 	stw	fp,40(sp)
    6a10:	ddc00915 	stw	r23,36(sp)
    6a14:	dd800815 	stw	r22,32(sp)
    6a18:	dd000615 	stw	r20,24(sp)
    6a1c:	dc800415 	stw	r18,16(sp)
    6a20:	dc400315 	stw	r17,12(sp)
    6a24:	1880020c 	andi	r2,r3,8
    6a28:	2821883a 	mov	r16,r5
    6a2c:	202b883a 	mov	r21,r4
    6a30:	3027883a 	mov	r19,r6
    6a34:	10002526 	beq	r2,zero,6acc <__sfvwrite_r+0xe0>
    6a38:	28800417 	ldw	r2,16(r5)
    6a3c:	10002326 	beq	r2,zero,6acc <__sfvwrite_r+0xe0>
    6a40:	1880008c 	andi	r2,r3,2
    6a44:	9c400017 	ldw	r17,0(r19)
    6a48:	10003126 	beq	r2,zero,6b10 <__sfvwrite_r+0x124>
    6a4c:	0029883a 	mov	r20,zero
    6a50:	0025883a 	mov	r18,zero
    6a54:	05810004 	movi	r22,1024
    6a58:	a00d883a 	mov	r6,r20
    6a5c:	a809883a 	mov	r4,r21
    6a60:	90002526 	beq	r18,zero,6af8 <__sfvwrite_r+0x10c>
    6a64:	900f883a 	mov	r7,r18
    6a68:	81400717 	ldw	r5,28(r16)
    6a6c:	b480012e 	bgeu	r22,r18,6a74 <__sfvwrite_r+0x88>
    6a70:	01c10004 	movi	r7,1024
    6a74:	80800917 	ldw	r2,36(r16)
    6a78:	103ee83a 	callr	r2
    6a7c:	0080510e 	bge	zero,r2,6bc4 <__sfvwrite_r+0x1d8>
    6a80:	98c00217 	ldw	r3,8(r19)
    6a84:	a0a9883a 	add	r20,r20,r2
    6a88:	90a5c83a 	sub	r18,r18,r2
    6a8c:	1885c83a 	sub	r2,r3,r2
    6a90:	98800215 	stw	r2,8(r19)
    6a94:	103ff01e 	bne	r2,zero,6a58 <__alt_data_end+0xfffb1328>
    6a98:	0005883a 	mov	r2,zero
    6a9c:	dfc00b17 	ldw	ra,44(sp)
    6aa0:	df000a17 	ldw	fp,40(sp)
    6aa4:	ddc00917 	ldw	r23,36(sp)
    6aa8:	dd800817 	ldw	r22,32(sp)
    6aac:	dd400717 	ldw	r21,28(sp)
    6ab0:	dd000617 	ldw	r20,24(sp)
    6ab4:	dcc00517 	ldw	r19,20(sp)
    6ab8:	dc800417 	ldw	r18,16(sp)
    6abc:	dc400317 	ldw	r17,12(sp)
    6ac0:	dc000217 	ldw	r16,8(sp)
    6ac4:	dec00c04 	addi	sp,sp,48
    6ac8:	f800283a 	ret
    6acc:	a809883a 	mov	r4,r21
    6ad0:	800b883a 	mov	r5,r16
    6ad4:	000454c0 	call	454c <__swsetup_r>
    6ad8:	80c0030b 	ldhu	r3,12(r16)
    6adc:	103fd826 	beq	r2,zero,6a40 <__alt_data_end+0xfffb1310>
    6ae0:	18c01014 	ori	r3,r3,64
    6ae4:	80c0030d 	sth	r3,12(r16)
    6ae8:	00c00244 	movi	r3,9
    6aec:	00bfffc4 	movi	r2,-1
    6af0:	a8c00015 	stw	r3,0(r21)
    6af4:	003fe906 	br	6a9c <__alt_data_end+0xfffb136c>
    6af8:	8d000017 	ldw	r20,0(r17)
    6afc:	8c800117 	ldw	r18,4(r17)
    6b00:	8c400204 	addi	r17,r17,8
    6b04:	003fd406 	br	6a58 <__alt_data_end+0xfffb1328>
    6b08:	0005883a 	mov	r2,zero
    6b0c:	f800283a 	ret
    6b10:	1880004c 	andi	r2,r3,1
    6b14:	1000301e 	bne	r2,zero,6bd8 <__sfvwrite_r+0x1ec>
    6b18:	002f883a 	mov	r23,zero
    6b1c:	0025883a 	mov	r18,zero
    6b20:	90001c26 	beq	r18,zero,6b94 <__sfvwrite_r+0x1a8>
    6b24:	1880800c 	andi	r2,r3,512
    6b28:	85000217 	ldw	r20,8(r16)
    6b2c:	10006c26 	beq	r2,zero,6ce0 <__sfvwrite_r+0x2f4>
    6b30:	a02d883a 	mov	r22,r20
    6b34:	95008536 	bltu	r18,r20,6d4c <__sfvwrite_r+0x360>
    6b38:	1881200c 	andi	r2,r3,1152
    6b3c:	10009d1e 	bne	r2,zero,6db4 <__sfvwrite_r+0x3c8>
    6b40:	81000017 	ldw	r4,0(r16)
    6b44:	a039883a 	mov	fp,r20
    6b48:	9029883a 	mov	r20,r18
    6b4c:	b80b883a 	mov	r5,r23
    6b50:	b00d883a 	mov	r6,r22
    6b54:	0007c600 	call	7c60 <memmove>
    6b58:	80c00217 	ldw	r3,8(r16)
    6b5c:	81000017 	ldw	r4,0(r16)
    6b60:	9005883a 	mov	r2,r18
    6b64:	1f39c83a 	sub	fp,r3,fp
    6b68:	258f883a 	add	r7,r4,r22
    6b6c:	87000215 	stw	fp,8(r16)
    6b70:	81c00015 	stw	r7,0(r16)
    6b74:	98c00217 	ldw	r3,8(r19)
    6b78:	b8af883a 	add	r23,r23,r2
    6b7c:	90a5c83a 	sub	r18,r18,r2
    6b80:	1d05c83a 	sub	r2,r3,r20
    6b84:	98800215 	stw	r2,8(r19)
    6b88:	103fc326 	beq	r2,zero,6a98 <__alt_data_end+0xfffb1368>
    6b8c:	80c0030b 	ldhu	r3,12(r16)
    6b90:	903fe41e 	bne	r18,zero,6b24 <__alt_data_end+0xfffb13f4>
    6b94:	8dc00017 	ldw	r23,0(r17)
    6b98:	8c800117 	ldw	r18,4(r17)
    6b9c:	8c400204 	addi	r17,r17,8
    6ba0:	003fdf06 	br	6b20 <__alt_data_end+0xfffb13f0>
    6ba4:	0008f280 	call	8f28 <_realloc_r>
    6ba8:	102d883a 	mov	r22,r2
    6bac:	1000a01e 	bne	r2,zero,6e30 <__sfvwrite_r+0x444>
    6bb0:	81400417 	ldw	r5,16(r16)
    6bb4:	a809883a 	mov	r4,r21
    6bb8:	00066fc0 	call	66fc <_free_r>
    6bbc:	00800304 	movi	r2,12
    6bc0:	a8800015 	stw	r2,0(r21)
    6bc4:	80c0030b 	ldhu	r3,12(r16)
    6bc8:	00bfffc4 	movi	r2,-1
    6bcc:	18c01014 	ori	r3,r3,64
    6bd0:	80c0030d 	sth	r3,12(r16)
    6bd4:	003fb106 	br	6a9c <__alt_data_end+0xfffb136c>
    6bd8:	0029883a 	mov	r20,zero
    6bdc:	0011883a 	mov	r8,zero
    6be0:	0039883a 	mov	fp,zero
    6be4:	0025883a 	mov	r18,zero
    6be8:	90001f26 	beq	r18,zero,6c68 <__sfvwrite_r+0x27c>
    6bec:	40006826 	beq	r8,zero,6d90 <__sfvwrite_r+0x3a4>
    6bf0:	a02f883a 	mov	r23,r20
    6bf4:	9500012e 	bgeu	r18,r20,6bfc <__sfvwrite_r+0x210>
    6bf8:	902f883a 	mov	r23,r18
    6bfc:	81000017 	ldw	r4,0(r16)
    6c00:	80800417 	ldw	r2,16(r16)
    6c04:	b82d883a 	mov	r22,r23
    6c08:	81800217 	ldw	r6,8(r16)
    6c0c:	81c00517 	ldw	r7,20(r16)
    6c10:	1100022e 	bgeu	r2,r4,6c1c <__sfvwrite_r+0x230>
    6c14:	31c7883a 	add	r3,r6,r7
    6c18:	1dc01816 	blt	r3,r23,6c7c <__sfvwrite_r+0x290>
    6c1c:	b9c03f16 	blt	r23,r7,6d1c <__sfvwrite_r+0x330>
    6c20:	80800917 	ldw	r2,36(r16)
    6c24:	81400717 	ldw	r5,28(r16)
    6c28:	a809883a 	mov	r4,r21
    6c2c:	da000115 	stw	r8,4(sp)
    6c30:	e00d883a 	mov	r6,fp
    6c34:	103ee83a 	callr	r2
    6c38:	102d883a 	mov	r22,r2
    6c3c:	da000117 	ldw	r8,4(sp)
    6c40:	00bfe00e 	bge	zero,r2,6bc4 <__alt_data_end+0xfffb1494>
    6c44:	a5a9c83a 	sub	r20,r20,r22
    6c48:	a0001f26 	beq	r20,zero,6cc8 <__sfvwrite_r+0x2dc>
    6c4c:	98800217 	ldw	r2,8(r19)
    6c50:	e5b9883a 	add	fp,fp,r22
    6c54:	95a5c83a 	sub	r18,r18,r22
    6c58:	15adc83a 	sub	r22,r2,r22
    6c5c:	9d800215 	stw	r22,8(r19)
    6c60:	b03f8d26 	beq	r22,zero,6a98 <__alt_data_end+0xfffb1368>
    6c64:	903fe11e 	bne	r18,zero,6bec <__alt_data_end+0xfffb14bc>
    6c68:	8f000017 	ldw	fp,0(r17)
    6c6c:	8c800117 	ldw	r18,4(r17)
    6c70:	0011883a 	mov	r8,zero
    6c74:	8c400204 	addi	r17,r17,8
    6c78:	003fdb06 	br	6be8 <__alt_data_end+0xfffb14b8>
    6c7c:	180d883a 	mov	r6,r3
    6c80:	e00b883a 	mov	r5,fp
    6c84:	da000115 	stw	r8,4(sp)
    6c88:	d8c00015 	stw	r3,0(sp)
    6c8c:	0007c600 	call	7c60 <memmove>
    6c90:	d8c00017 	ldw	r3,0(sp)
    6c94:	80800017 	ldw	r2,0(r16)
    6c98:	a809883a 	mov	r4,r21
    6c9c:	800b883a 	mov	r5,r16
    6ca0:	10c5883a 	add	r2,r2,r3
    6ca4:	80800015 	stw	r2,0(r16)
    6ca8:	d8c00015 	stw	r3,0(sp)
    6cac:	0005fcc0 	call	5fcc <_fflush_r>
    6cb0:	d8c00017 	ldw	r3,0(sp)
    6cb4:	da000117 	ldw	r8,4(sp)
    6cb8:	103fc21e 	bne	r2,zero,6bc4 <__alt_data_end+0xfffb1494>
    6cbc:	182d883a 	mov	r22,r3
    6cc0:	a5a9c83a 	sub	r20,r20,r22
    6cc4:	a03fe11e 	bne	r20,zero,6c4c <__alt_data_end+0xfffb151c>
    6cc8:	a809883a 	mov	r4,r21
    6ccc:	800b883a 	mov	r5,r16
    6cd0:	0005fcc0 	call	5fcc <_fflush_r>
    6cd4:	103fbb1e 	bne	r2,zero,6bc4 <__alt_data_end+0xfffb1494>
    6cd8:	0011883a 	mov	r8,zero
    6cdc:	003fdb06 	br	6c4c <__alt_data_end+0xfffb151c>
    6ce0:	81000017 	ldw	r4,0(r16)
    6ce4:	80800417 	ldw	r2,16(r16)
    6ce8:	1100012e 	bgeu	r2,r4,6cf0 <__sfvwrite_r+0x304>
    6cec:	a4805a36 	bltu	r20,r18,6e58 <__sfvwrite_r+0x46c>
    6cf0:	81c00517 	ldw	r7,20(r16)
    6cf4:	91c01a36 	bltu	r18,r7,6d60 <__sfvwrite_r+0x374>
    6cf8:	80800917 	ldw	r2,36(r16)
    6cfc:	81400717 	ldw	r5,28(r16)
    6d00:	a809883a 	mov	r4,r21
    6d04:	b80d883a 	mov	r6,r23
    6d08:	103ee83a 	callr	r2
    6d0c:	1029883a 	mov	r20,r2
    6d10:	00bfac0e 	bge	zero,r2,6bc4 <__alt_data_end+0xfffb1494>
    6d14:	a005883a 	mov	r2,r20
    6d18:	003f9606 	br	6b74 <__alt_data_end+0xfffb1444>
    6d1c:	b80d883a 	mov	r6,r23
    6d20:	e00b883a 	mov	r5,fp
    6d24:	da000115 	stw	r8,4(sp)
    6d28:	0007c600 	call	7c60 <memmove>
    6d2c:	80800217 	ldw	r2,8(r16)
    6d30:	80c00017 	ldw	r3,0(r16)
    6d34:	da000117 	ldw	r8,4(sp)
    6d38:	15c5c83a 	sub	r2,r2,r23
    6d3c:	1def883a 	add	r23,r3,r23
    6d40:	80800215 	stw	r2,8(r16)
    6d44:	85c00015 	stw	r23,0(r16)
    6d48:	003fbe06 	br	6c44 <__alt_data_end+0xfffb1514>
    6d4c:	81000017 	ldw	r4,0(r16)
    6d50:	9039883a 	mov	fp,r18
    6d54:	9029883a 	mov	r20,r18
    6d58:	902d883a 	mov	r22,r18
    6d5c:	003f7b06 	br	6b4c <__alt_data_end+0xfffb141c>
    6d60:	b80b883a 	mov	r5,r23
    6d64:	900d883a 	mov	r6,r18
    6d68:	0007c600 	call	7c60 <memmove>
    6d6c:	80c00217 	ldw	r3,8(r16)
    6d70:	80800017 	ldw	r2,0(r16)
    6d74:	9029883a 	mov	r20,r18
    6d78:	1c87c83a 	sub	r3,r3,r18
    6d7c:	1485883a 	add	r2,r2,r18
    6d80:	80800015 	stw	r2,0(r16)
    6d84:	80c00215 	stw	r3,8(r16)
    6d88:	9005883a 	mov	r2,r18
    6d8c:	003f7906 	br	6b74 <__alt_data_end+0xfffb1444>
    6d90:	e009883a 	mov	r4,fp
    6d94:	01400284 	movi	r5,10
    6d98:	900d883a 	mov	r6,r18
    6d9c:	0007a400 	call	7a40 <memchr>
    6da0:	10003826 	beq	r2,zero,6e84 <__sfvwrite_r+0x498>
    6da4:	10800044 	addi	r2,r2,1
    6da8:	1729c83a 	sub	r20,r2,fp
    6dac:	02000044 	movi	r8,1
    6db0:	003f8f06 	br	6bf0 <__alt_data_end+0xfffb14c0>
    6db4:	80800517 	ldw	r2,20(r16)
    6db8:	81400417 	ldw	r5,16(r16)
    6dbc:	87000017 	ldw	fp,0(r16)
    6dc0:	10a9883a 	add	r20,r2,r2
    6dc4:	a085883a 	add	r2,r20,r2
    6dc8:	1028d7fa 	srli	r20,r2,31
    6dcc:	e179c83a 	sub	fp,fp,r5
    6dd0:	e1000044 	addi	r4,fp,1
    6dd4:	a085883a 	add	r2,r20,r2
    6dd8:	1029d07a 	srai	r20,r2,1
    6ddc:	2485883a 	add	r2,r4,r18
    6de0:	a00d883a 	mov	r6,r20
    6de4:	a080022e 	bgeu	r20,r2,6df0 <__sfvwrite_r+0x404>
    6de8:	1029883a 	mov	r20,r2
    6dec:	100d883a 	mov	r6,r2
    6df0:	18c1000c 	andi	r3,r3,1024
    6df4:	a809883a 	mov	r4,r21
    6df8:	183f6a26 	beq	r3,zero,6ba4 <__alt_data_end+0xfffb1474>
    6dfc:	300b883a 	mov	r5,r6
    6e00:	00072980 	call	7298 <_malloc_r>
    6e04:	102d883a 	mov	r22,r2
    6e08:	103f6c26 	beq	r2,zero,6bbc <__alt_data_end+0xfffb148c>
    6e0c:	81400417 	ldw	r5,16(r16)
    6e10:	1009883a 	mov	r4,r2
    6e14:	e00d883a 	mov	r6,fp
    6e18:	0007b280 	call	7b28 <memcpy>
    6e1c:	8080030b 	ldhu	r2,12(r16)
    6e20:	00fedfc4 	movi	r3,-1153
    6e24:	10c4703a 	and	r2,r2,r3
    6e28:	10802014 	ori	r2,r2,128
    6e2c:	8080030d 	sth	r2,12(r16)
    6e30:	b709883a 	add	r4,r22,fp
    6e34:	a707c83a 	sub	r3,r20,fp
    6e38:	85800415 	stw	r22,16(r16)
    6e3c:	85000515 	stw	r20,20(r16)
    6e40:	81000015 	stw	r4,0(r16)
    6e44:	9039883a 	mov	fp,r18
    6e48:	80c00215 	stw	r3,8(r16)
    6e4c:	9029883a 	mov	r20,r18
    6e50:	902d883a 	mov	r22,r18
    6e54:	003f3d06 	br	6b4c <__alt_data_end+0xfffb141c>
    6e58:	b80b883a 	mov	r5,r23
    6e5c:	a00d883a 	mov	r6,r20
    6e60:	0007c600 	call	7c60 <memmove>
    6e64:	80800017 	ldw	r2,0(r16)
    6e68:	a809883a 	mov	r4,r21
    6e6c:	800b883a 	mov	r5,r16
    6e70:	1505883a 	add	r2,r2,r20
    6e74:	80800015 	stw	r2,0(r16)
    6e78:	0005fcc0 	call	5fcc <_fflush_r>
    6e7c:	103fa526 	beq	r2,zero,6d14 <__alt_data_end+0xfffb15e4>
    6e80:	003f5006 	br	6bc4 <__alt_data_end+0xfffb1494>
    6e84:	95000044 	addi	r20,r18,1
    6e88:	02000044 	movi	r8,1
    6e8c:	003f5806 	br	6bf0 <__alt_data_end+0xfffb14c0>

00006e90 <_fwalk>:
    6e90:	defff804 	addi	sp,sp,-32
    6e94:	dd400515 	stw	r21,20(sp)
    6e98:	2540b804 	addi	r21,r4,736
    6e9c:	dd800615 	stw	r22,24(sp)
    6ea0:	dd000415 	stw	r20,16(sp)
    6ea4:	dfc00715 	stw	ra,28(sp)
    6ea8:	dcc00315 	stw	r19,12(sp)
    6eac:	dc800215 	stw	r18,8(sp)
    6eb0:	dc400115 	stw	r17,4(sp)
    6eb4:	dc000015 	stw	r16,0(sp)
    6eb8:	2829883a 	mov	r20,r5
    6ebc:	002d883a 	mov	r22,zero
    6ec0:	00065980 	call	6598 <__sfp_lock_acquire>
    6ec4:	a8001426 	beq	r21,zero,6f18 <_fwalk+0x88>
    6ec8:	04ffffc4 	movi	r19,-1
    6ecc:	ac400117 	ldw	r17,4(r21)
    6ed0:	ac800217 	ldw	r18,8(r21)
    6ed4:	8c7fffc4 	addi	r17,r17,-1
    6ed8:	88000d16 	blt	r17,zero,6f10 <_fwalk+0x80>
    6edc:	94000304 	addi	r16,r18,12
    6ee0:	94800384 	addi	r18,r18,14
    6ee4:	80c0000f 	ldh	r3,0(r16)
    6ee8:	8c7fffc4 	addi	r17,r17,-1
    6eec:	813ffd04 	addi	r4,r16,-12
    6ef0:	18000426 	beq	r3,zero,6f04 <_fwalk+0x74>
    6ef4:	90c0000f 	ldh	r3,0(r18)
    6ef8:	1cc00226 	beq	r3,r19,6f04 <_fwalk+0x74>
    6efc:	a03ee83a 	callr	r20
    6f00:	b0acb03a 	or	r22,r22,r2
    6f04:	84001a04 	addi	r16,r16,104
    6f08:	94801a04 	addi	r18,r18,104
    6f0c:	8cfff51e 	bne	r17,r19,6ee4 <__alt_data_end+0xfffb17b4>
    6f10:	ad400017 	ldw	r21,0(r21)
    6f14:	a83fed1e 	bne	r21,zero,6ecc <__alt_data_end+0xfffb179c>
    6f18:	000659c0 	call	659c <__sfp_lock_release>
    6f1c:	b005883a 	mov	r2,r22
    6f20:	dfc00717 	ldw	ra,28(sp)
    6f24:	dd800617 	ldw	r22,24(sp)
    6f28:	dd400517 	ldw	r21,20(sp)
    6f2c:	dd000417 	ldw	r20,16(sp)
    6f30:	dcc00317 	ldw	r19,12(sp)
    6f34:	dc800217 	ldw	r18,8(sp)
    6f38:	dc400117 	ldw	r17,4(sp)
    6f3c:	dc000017 	ldw	r16,0(sp)
    6f40:	dec00804 	addi	sp,sp,32
    6f44:	f800283a 	ret

00006f48 <_fwalk_reent>:
    6f48:	defff804 	addi	sp,sp,-32
    6f4c:	dd400515 	stw	r21,20(sp)
    6f50:	2540b804 	addi	r21,r4,736
    6f54:	dd800615 	stw	r22,24(sp)
    6f58:	dd000415 	stw	r20,16(sp)
    6f5c:	dcc00315 	stw	r19,12(sp)
    6f60:	dfc00715 	stw	ra,28(sp)
    6f64:	dc800215 	stw	r18,8(sp)
    6f68:	dc400115 	stw	r17,4(sp)
    6f6c:	dc000015 	stw	r16,0(sp)
    6f70:	2027883a 	mov	r19,r4
    6f74:	2829883a 	mov	r20,r5
    6f78:	002d883a 	mov	r22,zero
    6f7c:	00065980 	call	6598 <__sfp_lock_acquire>
    6f80:	a8001326 	beq	r21,zero,6fd0 <_fwalk_reent+0x88>
    6f84:	04bfffc4 	movi	r18,-1
    6f88:	ac400117 	ldw	r17,4(r21)
    6f8c:	ac000217 	ldw	r16,8(r21)
    6f90:	8c7fffc4 	addi	r17,r17,-1
    6f94:	88000c16 	blt	r17,zero,6fc8 <_fwalk_reent+0x80>
    6f98:	84000304 	addi	r16,r16,12
    6f9c:	80c0000f 	ldh	r3,0(r16)
    6fa0:	8c7fffc4 	addi	r17,r17,-1
    6fa4:	817ffd04 	addi	r5,r16,-12
    6fa8:	18000526 	beq	r3,zero,6fc0 <_fwalk_reent+0x78>
    6fac:	80c0008f 	ldh	r3,2(r16)
    6fb0:	9809883a 	mov	r4,r19
    6fb4:	1c800226 	beq	r3,r18,6fc0 <_fwalk_reent+0x78>
    6fb8:	a03ee83a 	callr	r20
    6fbc:	b0acb03a 	or	r22,r22,r2
    6fc0:	84001a04 	addi	r16,r16,104
    6fc4:	8cbff51e 	bne	r17,r18,6f9c <__alt_data_end+0xfffb186c>
    6fc8:	ad400017 	ldw	r21,0(r21)
    6fcc:	a83fee1e 	bne	r21,zero,6f88 <__alt_data_end+0xfffb1858>
    6fd0:	000659c0 	call	659c <__sfp_lock_release>
    6fd4:	b005883a 	mov	r2,r22
    6fd8:	dfc00717 	ldw	ra,28(sp)
    6fdc:	dd800617 	ldw	r22,24(sp)
    6fe0:	dd400517 	ldw	r21,20(sp)
    6fe4:	dd000417 	ldw	r20,16(sp)
    6fe8:	dcc00317 	ldw	r19,12(sp)
    6fec:	dc800217 	ldw	r18,8(sp)
    6ff0:	dc400117 	ldw	r17,4(sp)
    6ff4:	dc000017 	ldw	r16,0(sp)
    6ff8:	dec00804 	addi	sp,sp,32
    6ffc:	f800283a 	ret

00007000 <_setlocale_r>:
    7000:	30001b26 	beq	r6,zero,7070 <_setlocale_r+0x70>
    7004:	01400074 	movhi	r5,1
    7008:	defffe04 	addi	sp,sp,-8
    700c:	29470a04 	addi	r5,r5,7208
    7010:	3009883a 	mov	r4,r6
    7014:	dc000015 	stw	r16,0(sp)
    7018:	dfc00115 	stw	ra,4(sp)
    701c:	3021883a 	mov	r16,r6
    7020:	00096cc0 	call	96cc <strcmp>
    7024:	1000061e 	bne	r2,zero,7040 <_setlocale_r+0x40>
    7028:	00800074 	movhi	r2,1
    702c:	10870904 	addi	r2,r2,7204
    7030:	dfc00117 	ldw	ra,4(sp)
    7034:	dc000017 	ldw	r16,0(sp)
    7038:	dec00204 	addi	sp,sp,8
    703c:	f800283a 	ret
    7040:	01400074 	movhi	r5,1
    7044:	29470904 	addi	r5,r5,7204
    7048:	8009883a 	mov	r4,r16
    704c:	00096cc0 	call	96cc <strcmp>
    7050:	103ff526 	beq	r2,zero,7028 <__alt_data_end+0xfffb18f8>
    7054:	01400074 	movhi	r5,1
    7058:	2946f404 	addi	r5,r5,7120
    705c:	8009883a 	mov	r4,r16
    7060:	00096cc0 	call	96cc <strcmp>
    7064:	103ff026 	beq	r2,zero,7028 <__alt_data_end+0xfffb18f8>
    7068:	0005883a 	mov	r2,zero
    706c:	003ff006 	br	7030 <__alt_data_end+0xfffb1900>
    7070:	00800074 	movhi	r2,1
    7074:	10870904 	addi	r2,r2,7204
    7078:	f800283a 	ret

0000707c <__locale_charset>:
    707c:	00800074 	movhi	r2,1
    7080:	1088bc04 	addi	r2,r2,8944
    7084:	f800283a 	ret

00007088 <__locale_mb_cur_max>:
    7088:	00800074 	movhi	r2,1
    708c:	108e5804 	addi	r2,r2,14688
    7090:	10800017 	ldw	r2,0(r2)
    7094:	f800283a 	ret

00007098 <__locale_msgcharset>:
    7098:	00800074 	movhi	r2,1
    709c:	1088b404 	addi	r2,r2,8912
    70a0:	f800283a 	ret

000070a4 <__locale_cjk_lang>:
    70a4:	0005883a 	mov	r2,zero
    70a8:	f800283a 	ret

000070ac <_localeconv_r>:
    70ac:	00800074 	movhi	r2,1
    70b0:	1088c404 	addi	r2,r2,8976
    70b4:	f800283a 	ret

000070b8 <setlocale>:
    70b8:	00c00074 	movhi	r3,1
    70bc:	18ce5704 	addi	r3,r3,14684
    70c0:	2005883a 	mov	r2,r4
    70c4:	19000017 	ldw	r4,0(r3)
    70c8:	280d883a 	mov	r6,r5
    70cc:	100b883a 	mov	r5,r2
    70d0:	00070001 	jmpi	7000 <_setlocale_r>

000070d4 <localeconv>:
    70d4:	00800074 	movhi	r2,1
    70d8:	1088c404 	addi	r2,r2,8976
    70dc:	f800283a 	ret

000070e0 <__smakebuf_r>:
    70e0:	2880030b 	ldhu	r2,12(r5)
    70e4:	10c0008c 	andi	r3,r2,2
    70e8:	1800401e 	bne	r3,zero,71ec <__smakebuf_r+0x10c>
    70ec:	deffec04 	addi	sp,sp,-80
    70f0:	dc000f15 	stw	r16,60(sp)
    70f4:	2821883a 	mov	r16,r5
    70f8:	2940038f 	ldh	r5,14(r5)
    70fc:	dc401015 	stw	r17,64(sp)
    7100:	dfc01315 	stw	ra,76(sp)
    7104:	dcc01215 	stw	r19,72(sp)
    7108:	dc801115 	stw	r18,68(sp)
    710c:	2023883a 	mov	r17,r4
    7110:	28001b16 	blt	r5,zero,7180 <__smakebuf_r+0xa0>
    7114:	d80d883a 	mov	r6,sp
    7118:	000b1440 	call	b144 <_fstat_r>
    711c:	10001716 	blt	r2,zero,717c <__smakebuf_r+0x9c>
    7120:	d8800117 	ldw	r2,4(sp)
    7124:	00e00014 	movui	r3,32768
    7128:	10bc000c 	andi	r2,r2,61440
    712c:	10c03726 	beq	r2,r3,720c <__smakebuf_r+0x12c>
    7130:	80c0030b 	ldhu	r3,12(r16)
    7134:	18c20014 	ori	r3,r3,2048
    7138:	80c0030d 	sth	r3,12(r16)
    713c:	00c80004 	movi	r3,8192
    7140:	10c03c1e 	bne	r2,r3,7234 <__smakebuf_r+0x154>
    7144:	8140038f 	ldh	r5,14(r16)
    7148:	8809883a 	mov	r4,r17
    714c:	000b19c0 	call	b19c <_isatty_r>
    7150:	10004e26 	beq	r2,zero,728c <__smakebuf_r+0x1ac>
    7154:	8080030b 	ldhu	r2,12(r16)
    7158:	04c00044 	movi	r19,1
    715c:	80c010c4 	addi	r3,r16,67
    7160:	14c4b03a 	or	r2,r2,r19
    7164:	8080030d 	sth	r2,12(r16)
    7168:	80c00015 	stw	r3,0(r16)
    716c:	80c00415 	stw	r3,16(r16)
    7170:	84c00515 	stw	r19,20(r16)
    7174:	04810004 	movi	r18,1024
    7178:	00000706 	br	7198 <__smakebuf_r+0xb8>
    717c:	8080030b 	ldhu	r2,12(r16)
    7180:	10c0200c 	andi	r3,r2,128
    7184:	18001f1e 	bne	r3,zero,7204 <__smakebuf_r+0x124>
    7188:	04810004 	movi	r18,1024
    718c:	10820014 	ori	r2,r2,2048
    7190:	8080030d 	sth	r2,12(r16)
    7194:	0027883a 	mov	r19,zero
    7198:	8809883a 	mov	r4,r17
    719c:	900b883a 	mov	r5,r18
    71a0:	00072980 	call	7298 <_malloc_r>
    71a4:	10002e26 	beq	r2,zero,7260 <__smakebuf_r+0x180>
    71a8:	80c0030b 	ldhu	r3,12(r16)
    71ac:	01000034 	movhi	r4,0
    71b0:	21188d04 	addi	r4,r4,25140
    71b4:	89000f15 	stw	r4,60(r17)
    71b8:	18c02014 	ori	r3,r3,128
    71bc:	80c0030d 	sth	r3,12(r16)
    71c0:	80800015 	stw	r2,0(r16)
    71c4:	80800415 	stw	r2,16(r16)
    71c8:	84800515 	stw	r18,20(r16)
    71cc:	98001c1e 	bne	r19,zero,7240 <__smakebuf_r+0x160>
    71d0:	dfc01317 	ldw	ra,76(sp)
    71d4:	dcc01217 	ldw	r19,72(sp)
    71d8:	dc801117 	ldw	r18,68(sp)
    71dc:	dc401017 	ldw	r17,64(sp)
    71e0:	dc000f17 	ldw	r16,60(sp)
    71e4:	dec01404 	addi	sp,sp,80
    71e8:	f800283a 	ret
    71ec:	288010c4 	addi	r2,r5,67
    71f0:	28800015 	stw	r2,0(r5)
    71f4:	28800415 	stw	r2,16(r5)
    71f8:	00800044 	movi	r2,1
    71fc:	28800515 	stw	r2,20(r5)
    7200:	f800283a 	ret
    7204:	04801004 	movi	r18,64
    7208:	003fe006 	br	718c <__alt_data_end+0xfffb1a5c>
    720c:	81000a17 	ldw	r4,40(r16)
    7210:	00c00074 	movhi	r3,1
    7214:	18e59a04 	addi	r3,r3,-27032
    7218:	20ffc51e 	bne	r4,r3,7130 <__alt_data_end+0xfffb1a00>
    721c:	80c0030b 	ldhu	r3,12(r16)
    7220:	01010004 	movi	r4,1024
    7224:	81001315 	stw	r4,76(r16)
    7228:	1906b03a 	or	r3,r3,r4
    722c:	80c0030d 	sth	r3,12(r16)
    7230:	003fc206 	br	713c <__alt_data_end+0xfffb1a0c>
    7234:	0027883a 	mov	r19,zero
    7238:	04810004 	movi	r18,1024
    723c:	003fd606 	br	7198 <__alt_data_end+0xfffb1a68>
    7240:	8140038f 	ldh	r5,14(r16)
    7244:	8809883a 	mov	r4,r17
    7248:	000b19c0 	call	b19c <_isatty_r>
    724c:	103fe026 	beq	r2,zero,71d0 <__alt_data_end+0xfffb1aa0>
    7250:	8080030b 	ldhu	r2,12(r16)
    7254:	10800054 	ori	r2,r2,1
    7258:	8080030d 	sth	r2,12(r16)
    725c:	003fdc06 	br	71d0 <__alt_data_end+0xfffb1aa0>
    7260:	8080030b 	ldhu	r2,12(r16)
    7264:	10c0800c 	andi	r3,r2,512
    7268:	183fd91e 	bne	r3,zero,71d0 <__alt_data_end+0xfffb1aa0>
    726c:	10800094 	ori	r2,r2,2
    7270:	80c010c4 	addi	r3,r16,67
    7274:	8080030d 	sth	r2,12(r16)
    7278:	00800044 	movi	r2,1
    727c:	80c00015 	stw	r3,0(r16)
    7280:	80c00415 	stw	r3,16(r16)
    7284:	80800515 	stw	r2,20(r16)
    7288:	003fd106 	br	71d0 <__alt_data_end+0xfffb1aa0>
    728c:	04c00044 	movi	r19,1
    7290:	04810004 	movi	r18,1024
    7294:	003fc006 	br	7198 <__alt_data_end+0xfffb1a68>

00007298 <_malloc_r>:
    7298:	defff504 	addi	sp,sp,-44
    729c:	dc800315 	stw	r18,12(sp)
    72a0:	dfc00a15 	stw	ra,40(sp)
    72a4:	df000915 	stw	fp,36(sp)
    72a8:	ddc00815 	stw	r23,32(sp)
    72ac:	dd800715 	stw	r22,28(sp)
    72b0:	dd400615 	stw	r21,24(sp)
    72b4:	dd000515 	stw	r20,20(sp)
    72b8:	dcc00415 	stw	r19,16(sp)
    72bc:	dc400215 	stw	r17,8(sp)
    72c0:	dc000115 	stw	r16,4(sp)
    72c4:	288002c4 	addi	r2,r5,11
    72c8:	00c00584 	movi	r3,22
    72cc:	2025883a 	mov	r18,r4
    72d0:	18802a2e 	bgeu	r3,r2,737c <_malloc_r+0xe4>
    72d4:	047ffe04 	movi	r17,-8
    72d8:	1462703a 	and	r17,r2,r17
    72dc:	88009e16 	blt	r17,zero,7558 <_malloc_r+0x2c0>
    72e0:	89409d36 	bltu	r17,r5,7558 <_malloc_r+0x2c0>
    72e4:	000f1a40 	call	f1a4 <__malloc_lock>
    72e8:	00807dc4 	movi	r2,503
    72ec:	14402736 	bltu	r2,r17,738c <_malloc_r+0xf4>
    72f0:	8806d0fa 	srli	r3,r17,3
    72f4:	04c00074 	movhi	r19,1
    72f8:	9cc8d204 	addi	r19,r19,9032
    72fc:	18c5883a 	add	r2,r3,r3
    7300:	1085883a 	add	r2,r2,r2
    7304:	1085883a 	add	r2,r2,r2
    7308:	9885883a 	add	r2,r19,r2
    730c:	14000317 	ldw	r16,12(r2)
    7310:	80814a26 	beq	r16,r2,783c <_malloc_r+0x5a4>
    7314:	80c00117 	ldw	r3,4(r16)
    7318:	81000317 	ldw	r4,12(r16)
    731c:	00bfff04 	movi	r2,-4
    7320:	1884703a 	and	r2,r3,r2
    7324:	81400217 	ldw	r5,8(r16)
    7328:	8085883a 	add	r2,r16,r2
    732c:	10c00117 	ldw	r3,4(r2)
    7330:	29000315 	stw	r4,12(r5)
    7334:	21400215 	stw	r5,8(r4)
    7338:	18c00054 	ori	r3,r3,1
    733c:	10c00115 	stw	r3,4(r2)
    7340:	9009883a 	mov	r4,r18
    7344:	000f1c40 	call	f1c4 <__malloc_unlock>
    7348:	80800204 	addi	r2,r16,8
    734c:	dfc00a17 	ldw	ra,40(sp)
    7350:	df000917 	ldw	fp,36(sp)
    7354:	ddc00817 	ldw	r23,32(sp)
    7358:	dd800717 	ldw	r22,28(sp)
    735c:	dd400617 	ldw	r21,24(sp)
    7360:	dd000517 	ldw	r20,20(sp)
    7364:	dcc00417 	ldw	r19,16(sp)
    7368:	dc800317 	ldw	r18,12(sp)
    736c:	dc400217 	ldw	r17,8(sp)
    7370:	dc000117 	ldw	r16,4(sp)
    7374:	dec00b04 	addi	sp,sp,44
    7378:	f800283a 	ret
    737c:	04400404 	movi	r17,16
    7380:	89407536 	bltu	r17,r5,7558 <_malloc_r+0x2c0>
    7384:	000f1a40 	call	f1a4 <__malloc_lock>
    7388:	003fd906 	br	72f0 <__alt_data_end+0xfffb1bc0>
    738c:	8806d27a 	srli	r3,r17,9
    7390:	18007526 	beq	r3,zero,7568 <_malloc_r+0x2d0>
    7394:	00800104 	movi	r2,4
    7398:	10c0ef36 	bltu	r2,r3,7758 <_malloc_r+0x4c0>
    739c:	8806d1ba 	srli	r3,r17,6
    73a0:	19c00e04 	addi	r7,r3,56
    73a4:	39cb883a 	add	r5,r7,r7
    73a8:	04c00074 	movhi	r19,1
    73ac:	294b883a 	add	r5,r5,r5
    73b0:	9cc8d204 	addi	r19,r19,9032
    73b4:	294b883a 	add	r5,r5,r5
    73b8:	994b883a 	add	r5,r19,r5
    73bc:	2c000317 	ldw	r16,12(r5)
    73c0:	2c000e26 	beq	r5,r16,73fc <_malloc_r+0x164>
    73c4:	80800117 	ldw	r2,4(r16)
    73c8:	01bfff04 	movi	r6,-4
    73cc:	010003c4 	movi	r4,15
    73d0:	1184703a 	and	r2,r2,r6
    73d4:	1447c83a 	sub	r3,r2,r17
    73d8:	20c00716 	blt	r4,r3,73f8 <_malloc_r+0x160>
    73dc:	1800650e 	bge	r3,zero,7574 <_malloc_r+0x2dc>
    73e0:	84000317 	ldw	r16,12(r16)
    73e4:	2c000526 	beq	r5,r16,73fc <_malloc_r+0x164>
    73e8:	80800117 	ldw	r2,4(r16)
    73ec:	1184703a 	and	r2,r2,r6
    73f0:	1447c83a 	sub	r3,r2,r17
    73f4:	20fff90e 	bge	r4,r3,73dc <__alt_data_end+0xfffb1cac>
    73f8:	39ffffc4 	addi	r7,r7,-1
    73fc:	38c00044 	addi	r3,r7,1
    7400:	01800074 	movhi	r6,1
    7404:	9c000417 	ldw	r16,16(r19)
    7408:	3188d204 	addi	r6,r6,9032
    740c:	32400204 	addi	r9,r6,8
    7410:	82410326 	beq	r16,r9,7820 <_malloc_r+0x588>
    7414:	81000117 	ldw	r4,4(r16)
    7418:	00bfff04 	movi	r2,-4
    741c:	208e703a 	and	r7,r4,r2
    7420:	3c45c83a 	sub	r2,r7,r17
    7424:	010003c4 	movi	r4,15
    7428:	2080ee16 	blt	r4,r2,77e4 <_malloc_r+0x54c>
    742c:	32400515 	stw	r9,20(r6)
    7430:	32400415 	stw	r9,16(r6)
    7434:	1000510e 	bge	r2,zero,757c <_malloc_r+0x2e4>
    7438:	00807fc4 	movi	r2,511
    743c:	11c0ce36 	bltu	r2,r7,7778 <_malloc_r+0x4e0>
    7440:	3808d0fa 	srli	r4,r7,3
    7444:	01c00044 	movi	r7,1
    7448:	30800117 	ldw	r2,4(r6)
    744c:	210b883a 	add	r5,r4,r4
    7450:	294b883a 	add	r5,r5,r5
    7454:	2009d0ba 	srai	r4,r4,2
    7458:	294b883a 	add	r5,r5,r5
    745c:	298b883a 	add	r5,r5,r6
    7460:	2a000217 	ldw	r8,8(r5)
    7464:	3908983a 	sll	r4,r7,r4
    7468:	81400315 	stw	r5,12(r16)
    746c:	82000215 	stw	r8,8(r16)
    7470:	2088b03a 	or	r4,r4,r2
    7474:	2c000215 	stw	r16,8(r5)
    7478:	31000115 	stw	r4,4(r6)
    747c:	44000315 	stw	r16,12(r8)
    7480:	1805d0ba 	srai	r2,r3,2
    7484:	01400044 	movi	r5,1
    7488:	288a983a 	sll	r5,r5,r2
    748c:	21404336 	bltu	r4,r5,759c <_malloc_r+0x304>
    7490:	2144703a 	and	r2,r4,r5
    7494:	10000a1e 	bne	r2,zero,74c0 <_malloc_r+0x228>
    7498:	00bfff04 	movi	r2,-4
    749c:	294b883a 	add	r5,r5,r5
    74a0:	1886703a 	and	r3,r3,r2
    74a4:	2144703a 	and	r2,r4,r5
    74a8:	18c00104 	addi	r3,r3,4
    74ac:	1000041e 	bne	r2,zero,74c0 <_malloc_r+0x228>
    74b0:	294b883a 	add	r5,r5,r5
    74b4:	2144703a 	and	r2,r4,r5
    74b8:	18c00104 	addi	r3,r3,4
    74bc:	103ffc26 	beq	r2,zero,74b0 <__alt_data_end+0xfffb1d80>
    74c0:	023fff04 	movi	r8,-4
    74c4:	01c003c4 	movi	r7,15
    74c8:	18c5883a 	add	r2,r3,r3
    74cc:	1085883a 	add	r2,r2,r2
    74d0:	1085883a 	add	r2,r2,r2
    74d4:	9895883a 	add	r10,r19,r2
    74d8:	52c00304 	addi	r11,r10,12
    74dc:	1819883a 	mov	r12,r3
    74e0:	5c000017 	ldw	r16,0(r11)
    74e4:	59bffd04 	addi	r6,r11,-12
    74e8:	8180041e 	bne	r16,r6,74fc <_malloc_r+0x264>
    74ec:	0000ce06 	br	7828 <_malloc_r+0x590>
    74f0:	2000d70e 	bge	r4,zero,7850 <_malloc_r+0x5b8>
    74f4:	84000317 	ldw	r16,12(r16)
    74f8:	8180cb26 	beq	r16,r6,7828 <_malloc_r+0x590>
    74fc:	80800117 	ldw	r2,4(r16)
    7500:	1204703a 	and	r2,r2,r8
    7504:	1449c83a 	sub	r4,r2,r17
    7508:	393ff90e 	bge	r7,r4,74f0 <__alt_data_end+0xfffb1dc0>
    750c:	80800317 	ldw	r2,12(r16)
    7510:	80c00217 	ldw	r3,8(r16)
    7514:	89400054 	ori	r5,r17,1
    7518:	81400115 	stw	r5,4(r16)
    751c:	18800315 	stw	r2,12(r3)
    7520:	10c00215 	stw	r3,8(r2)
    7524:	8463883a 	add	r17,r16,r17
    7528:	9c400515 	stw	r17,20(r19)
    752c:	9c400415 	stw	r17,16(r19)
    7530:	20800054 	ori	r2,r4,1
    7534:	88800115 	stw	r2,4(r17)
    7538:	8a400315 	stw	r9,12(r17)
    753c:	8a400215 	stw	r9,8(r17)
    7540:	8923883a 	add	r17,r17,r4
    7544:	89000015 	stw	r4,0(r17)
    7548:	9009883a 	mov	r4,r18
    754c:	000f1c40 	call	f1c4 <__malloc_unlock>
    7550:	80800204 	addi	r2,r16,8
    7554:	003f7d06 	br	734c <__alt_data_end+0xfffb1c1c>
    7558:	00800304 	movi	r2,12
    755c:	90800015 	stw	r2,0(r18)
    7560:	0005883a 	mov	r2,zero
    7564:	003f7906 	br	734c <__alt_data_end+0xfffb1c1c>
    7568:	01401f84 	movi	r5,126
    756c:	01c00fc4 	movi	r7,63
    7570:	003f8d06 	br	73a8 <__alt_data_end+0xfffb1c78>
    7574:	81000317 	ldw	r4,12(r16)
    7578:	003f6a06 	br	7324 <__alt_data_end+0xfffb1bf4>
    757c:	81c5883a 	add	r2,r16,r7
    7580:	10c00117 	ldw	r3,4(r2)
    7584:	9009883a 	mov	r4,r18
    7588:	18c00054 	ori	r3,r3,1
    758c:	10c00115 	stw	r3,4(r2)
    7590:	000f1c40 	call	f1c4 <__malloc_unlock>
    7594:	80800204 	addi	r2,r16,8
    7598:	003f6c06 	br	734c <__alt_data_end+0xfffb1c1c>
    759c:	9c000217 	ldw	r16,8(r19)
    75a0:	00bfff04 	movi	r2,-4
    75a4:	85800117 	ldw	r22,4(r16)
    75a8:	b0ac703a 	and	r22,r22,r2
    75ac:	b4400336 	bltu	r22,r17,75bc <_malloc_r+0x324>
    75b0:	b445c83a 	sub	r2,r22,r17
    75b4:	00c003c4 	movi	r3,15
    75b8:	18805d16 	blt	r3,r2,7730 <_malloc_r+0x498>
    75bc:	05c00074 	movhi	r23,1
    75c0:	00800074 	movhi	r2,1
    75c4:	bdce5904 	addi	r23,r23,14692
    75c8:	10952d04 	addi	r2,r2,21684
    75cc:	15400017 	ldw	r21,0(r2)
    75d0:	b9000017 	ldw	r4,0(r23)
    75d4:	00ffffc4 	movi	r3,-1
    75d8:	858d883a 	add	r6,r16,r22
    75dc:	8d6b883a 	add	r21,r17,r21
    75e0:	20c0e426 	beq	r4,r3,7974 <_malloc_r+0x6dc>
    75e4:	ad4403c4 	addi	r21,r21,4111
    75e8:	00fc0004 	movi	r3,-4096
    75ec:	a8ea703a 	and	r21,r21,r3
    75f0:	9009883a 	mov	r4,r18
    75f4:	a80b883a 	mov	r5,r21
    75f8:	d9800015 	stw	r6,0(sp)
    75fc:	000953c0 	call	953c <_sbrk_r>
    7600:	00ffffc4 	movi	r3,-1
    7604:	1029883a 	mov	r20,r2
    7608:	d9800017 	ldw	r6,0(sp)
    760c:	10c0a426 	beq	r2,r3,78a0 <_malloc_r+0x608>
    7610:	1180a236 	bltu	r2,r6,789c <_malloc_r+0x604>
    7614:	07000074 	movhi	fp,1
    7618:	e7153604 	addi	fp,fp,21720
    761c:	e0c00017 	ldw	r3,0(fp)
    7620:	a8c7883a 	add	r3,r21,r3
    7624:	e0c00015 	stw	r3,0(fp)
    7628:	3500da26 	beq	r6,r20,7994 <_malloc_r+0x6fc>
    762c:	b9000017 	ldw	r4,0(r23)
    7630:	00bfffc4 	movi	r2,-1
    7634:	2080e426 	beq	r4,r2,79c8 <_malloc_r+0x730>
    7638:	a185c83a 	sub	r2,r20,r6
    763c:	1885883a 	add	r2,r3,r2
    7640:	e0800015 	stw	r2,0(fp)
    7644:	a0c001cc 	andi	r3,r20,7
    7648:	1800b526 	beq	r3,zero,7920 <_malloc_r+0x688>
    764c:	a0e9c83a 	sub	r20,r20,r3
    7650:	00840204 	movi	r2,4104
    7654:	a5000204 	addi	r20,r20,8
    7658:	10c7c83a 	sub	r3,r2,r3
    765c:	a545883a 	add	r2,r20,r21
    7660:	1083ffcc 	andi	r2,r2,4095
    7664:	18abc83a 	sub	r21,r3,r2
    7668:	9009883a 	mov	r4,r18
    766c:	a80b883a 	mov	r5,r21
    7670:	000953c0 	call	953c <_sbrk_r>
    7674:	00ffffc4 	movi	r3,-1
    7678:	10c0d026 	beq	r2,r3,79bc <_malloc_r+0x724>
    767c:	1507c83a 	sub	r3,r2,r20
    7680:	a8c7883a 	add	r3,r21,r3
    7684:	18c00054 	ori	r3,r3,1
    7688:	e0800017 	ldw	r2,0(fp)
    768c:	9d000215 	stw	r20,8(r19)
    7690:	a0c00115 	stw	r3,4(r20)
    7694:	a887883a 	add	r3,r21,r2
    7698:	e0c00015 	stw	r3,0(fp)
    769c:	84c00e26 	beq	r16,r19,76d8 <_malloc_r+0x440>
    76a0:	018003c4 	movi	r6,15
    76a4:	3580a02e 	bgeu	r6,r22,7928 <_malloc_r+0x690>
    76a8:	81400117 	ldw	r5,4(r16)
    76ac:	013ffe04 	movi	r4,-8
    76b0:	b0bffd04 	addi	r2,r22,-12
    76b4:	1104703a 	and	r2,r2,r4
    76b8:	2900004c 	andi	r4,r5,1
    76bc:	1108b03a 	or	r4,r2,r4
    76c0:	81000115 	stw	r4,4(r16)
    76c4:	01400144 	movi	r5,5
    76c8:	8089883a 	add	r4,r16,r2
    76cc:	21400115 	stw	r5,4(r4)
    76d0:	21400215 	stw	r5,8(r4)
    76d4:	3080c036 	bltu	r6,r2,79d8 <_malloc_r+0x740>
    76d8:	00800074 	movhi	r2,1
    76dc:	10952c04 	addi	r2,r2,21680
    76e0:	11000017 	ldw	r4,0(r2)
    76e4:	20c0012e 	bgeu	r4,r3,76ec <_malloc_r+0x454>
    76e8:	10c00015 	stw	r3,0(r2)
    76ec:	00800074 	movhi	r2,1
    76f0:	10952b04 	addi	r2,r2,21676
    76f4:	11000017 	ldw	r4,0(r2)
    76f8:	9c000217 	ldw	r16,8(r19)
    76fc:	20c0012e 	bgeu	r4,r3,7704 <_malloc_r+0x46c>
    7700:	10c00015 	stw	r3,0(r2)
    7704:	80c00117 	ldw	r3,4(r16)
    7708:	00bfff04 	movi	r2,-4
    770c:	1886703a 	and	r3,r3,r2
    7710:	1c45c83a 	sub	r2,r3,r17
    7714:	1c400236 	bltu	r3,r17,7720 <_malloc_r+0x488>
    7718:	00c003c4 	movi	r3,15
    771c:	18800416 	blt	r3,r2,7730 <_malloc_r+0x498>
    7720:	9009883a 	mov	r4,r18
    7724:	000f1c40 	call	f1c4 <__malloc_unlock>
    7728:	0005883a 	mov	r2,zero
    772c:	003f0706 	br	734c <__alt_data_end+0xfffb1c1c>
    7730:	88c00054 	ori	r3,r17,1
    7734:	80c00115 	stw	r3,4(r16)
    7738:	8463883a 	add	r17,r16,r17
    773c:	10800054 	ori	r2,r2,1
    7740:	9c400215 	stw	r17,8(r19)
    7744:	88800115 	stw	r2,4(r17)
    7748:	9009883a 	mov	r4,r18
    774c:	000f1c40 	call	f1c4 <__malloc_unlock>
    7750:	80800204 	addi	r2,r16,8
    7754:	003efd06 	br	734c <__alt_data_end+0xfffb1c1c>
    7758:	00800504 	movi	r2,20
    775c:	10c0482e 	bgeu	r2,r3,7880 <_malloc_r+0x5e8>
    7760:	00801504 	movi	r2,84
    7764:	10c06836 	bltu	r2,r3,7908 <_malloc_r+0x670>
    7768:	8806d33a 	srli	r3,r17,12
    776c:	19c01b84 	addi	r7,r3,110
    7770:	39cb883a 	add	r5,r7,r7
    7774:	003f0c06 	br	73a8 <__alt_data_end+0xfffb1c78>
    7778:	3804d27a 	srli	r2,r7,9
    777c:	01000104 	movi	r4,4
    7780:	2080422e 	bgeu	r4,r2,788c <_malloc_r+0x5f4>
    7784:	01000504 	movi	r4,20
    7788:	20807c36 	bltu	r4,r2,797c <_malloc_r+0x6e4>
    778c:	110016c4 	addi	r4,r2,91
    7790:	210b883a 	add	r5,r4,r4
    7794:	294b883a 	add	r5,r5,r5
    7798:	294b883a 	add	r5,r5,r5
    779c:	994b883a 	add	r5,r19,r5
    77a0:	28800217 	ldw	r2,8(r5)
    77a4:	02000074 	movhi	r8,1
    77a8:	4208d204 	addi	r8,r8,9032
    77ac:	11406326 	beq	r2,r5,793c <_malloc_r+0x6a4>
    77b0:	01bfff04 	movi	r6,-4
    77b4:	11000117 	ldw	r4,4(r2)
    77b8:	2188703a 	and	r4,r4,r6
    77bc:	3900022e 	bgeu	r7,r4,77c8 <_malloc_r+0x530>
    77c0:	10800217 	ldw	r2,8(r2)
    77c4:	28bffb1e 	bne	r5,r2,77b4 <__alt_data_end+0xfffb2084>
    77c8:	11800317 	ldw	r6,12(r2)
    77cc:	99000117 	ldw	r4,4(r19)
    77d0:	81800315 	stw	r6,12(r16)
    77d4:	80800215 	stw	r2,8(r16)
    77d8:	34000215 	stw	r16,8(r6)
    77dc:	14000315 	stw	r16,12(r2)
    77e0:	003f2706 	br	7480 <__alt_data_end+0xfffb1d50>
    77e4:	88c00054 	ori	r3,r17,1
    77e8:	80c00115 	stw	r3,4(r16)
    77ec:	8463883a 	add	r17,r16,r17
    77f0:	34400515 	stw	r17,20(r6)
    77f4:	34400415 	stw	r17,16(r6)
    77f8:	10c00054 	ori	r3,r2,1
    77fc:	8a400315 	stw	r9,12(r17)
    7800:	8a400215 	stw	r9,8(r17)
    7804:	88c00115 	stw	r3,4(r17)
    7808:	88a3883a 	add	r17,r17,r2
    780c:	88800015 	stw	r2,0(r17)
    7810:	9009883a 	mov	r4,r18
    7814:	000f1c40 	call	f1c4 <__malloc_unlock>
    7818:	80800204 	addi	r2,r16,8
    781c:	003ecb06 	br	734c <__alt_data_end+0xfffb1c1c>
    7820:	31000117 	ldw	r4,4(r6)
    7824:	003f1606 	br	7480 <__alt_data_end+0xfffb1d50>
    7828:	63000044 	addi	r12,r12,1
    782c:	608000cc 	andi	r2,r12,3
    7830:	5ac00204 	addi	r11,r11,8
    7834:	103f2a1e 	bne	r2,zero,74e0 <__alt_data_end+0xfffb1db0>
    7838:	00002106 	br	78c0 <_malloc_r+0x628>
    783c:	80800204 	addi	r2,r16,8
    7840:	84000517 	ldw	r16,20(r16)
    7844:	143eb31e 	bne	r2,r16,7314 <__alt_data_end+0xfffb1be4>
    7848:	18c00084 	addi	r3,r3,2
    784c:	003eec06 	br	7400 <__alt_data_end+0xfffb1cd0>
    7850:	8085883a 	add	r2,r16,r2
    7854:	10c00117 	ldw	r3,4(r2)
    7858:	81000317 	ldw	r4,12(r16)
    785c:	81400217 	ldw	r5,8(r16)
    7860:	18c00054 	ori	r3,r3,1
    7864:	10c00115 	stw	r3,4(r2)
    7868:	29000315 	stw	r4,12(r5)
    786c:	21400215 	stw	r5,8(r4)
    7870:	9009883a 	mov	r4,r18
    7874:	000f1c40 	call	f1c4 <__malloc_unlock>
    7878:	80800204 	addi	r2,r16,8
    787c:	003eb306 	br	734c <__alt_data_end+0xfffb1c1c>
    7880:	19c016c4 	addi	r7,r3,91
    7884:	39cb883a 	add	r5,r7,r7
    7888:	003ec706 	br	73a8 <__alt_data_end+0xfffb1c78>
    788c:	3804d1ba 	srli	r2,r7,6
    7890:	11000e04 	addi	r4,r2,56
    7894:	210b883a 	add	r5,r4,r4
    7898:	003fbe06 	br	7794 <__alt_data_end+0xfffb2064>
    789c:	84ff5d26 	beq	r16,r19,7614 <__alt_data_end+0xfffb1ee4>
    78a0:	9c000217 	ldw	r16,8(r19)
    78a4:	00bfff04 	movi	r2,-4
    78a8:	80c00117 	ldw	r3,4(r16)
    78ac:	1886703a 	and	r3,r3,r2
    78b0:	003f9706 	br	7710 <__alt_data_end+0xfffb1fe0>
    78b4:	52800017 	ldw	r10,0(r10)
    78b8:	18ffffc4 	addi	r3,r3,-1
    78bc:	50805c1e 	bne	r10,r2,7a30 <_malloc_r+0x798>
    78c0:	190000cc 	andi	r4,r3,3
    78c4:	50bffe04 	addi	r2,r10,-8
    78c8:	203ffa1e 	bne	r4,zero,78b4 <__alt_data_end+0xfffb2184>
    78cc:	98800117 	ldw	r2,4(r19)
    78d0:	0146303a 	nor	r3,zero,r5
    78d4:	1884703a 	and	r2,r3,r2
    78d8:	98800115 	stw	r2,4(r19)
    78dc:	294b883a 	add	r5,r5,r5
    78e0:	117f2e36 	bltu	r2,r5,759c <__alt_data_end+0xfffb1e6c>
    78e4:	283f2d26 	beq	r5,zero,759c <__alt_data_end+0xfffb1e6c>
    78e8:	1146703a 	and	r3,r2,r5
    78ec:	1800521e 	bne	r3,zero,7a38 <_malloc_r+0x7a0>
    78f0:	6007883a 	mov	r3,r12
    78f4:	294b883a 	add	r5,r5,r5
    78f8:	1148703a 	and	r4,r2,r5
    78fc:	18c00104 	addi	r3,r3,4
    7900:	203ffc26 	beq	r4,zero,78f4 <__alt_data_end+0xfffb21c4>
    7904:	003ef006 	br	74c8 <__alt_data_end+0xfffb1d98>
    7908:	00805504 	movi	r2,340
    790c:	10c01336 	bltu	r2,r3,795c <_malloc_r+0x6c4>
    7910:	8806d3fa 	srli	r3,r17,15
    7914:	19c01dc4 	addi	r7,r3,119
    7918:	39cb883a 	add	r5,r7,r7
    791c:	003ea206 	br	73a8 <__alt_data_end+0xfffb1c78>
    7920:	00c40004 	movi	r3,4096
    7924:	003f4d06 	br	765c <__alt_data_end+0xfffb1f2c>
    7928:	00800044 	movi	r2,1
    792c:	a0800115 	stw	r2,4(r20)
    7930:	a021883a 	mov	r16,r20
    7934:	0007883a 	mov	r3,zero
    7938:	003f7506 	br	7710 <__alt_data_end+0xfffb1fe0>
    793c:	200bd0ba 	srai	r5,r4,2
    7940:	01800044 	movi	r6,1
    7944:	41000117 	ldw	r4,4(r8)
    7948:	314a983a 	sll	r5,r6,r5
    794c:	100d883a 	mov	r6,r2
    7950:	2908b03a 	or	r4,r5,r4
    7954:	41000115 	stw	r4,4(r8)
    7958:	003f9d06 	br	77d0 <__alt_data_end+0xfffb20a0>
    795c:	00815504 	movi	r2,1364
    7960:	10c01336 	bltu	r2,r3,79b0 <_malloc_r+0x718>
    7964:	8806d4ba 	srli	r3,r17,18
    7968:	19c01f04 	addi	r7,r3,124
    796c:	39cb883a 	add	r5,r7,r7
    7970:	003e8d06 	br	73a8 <__alt_data_end+0xfffb1c78>
    7974:	ad400404 	addi	r21,r21,16
    7978:	003f1d06 	br	75f0 <__alt_data_end+0xfffb1ec0>
    797c:	01001504 	movi	r4,84
    7980:	20801c36 	bltu	r4,r2,79f4 <_malloc_r+0x75c>
    7984:	3804d33a 	srli	r2,r7,12
    7988:	11001b84 	addi	r4,r2,110
    798c:	210b883a 	add	r5,r4,r4
    7990:	003f8006 	br	7794 <__alt_data_end+0xfffb2064>
    7994:	3083ffcc 	andi	r2,r6,4095
    7998:	103f241e 	bne	r2,zero,762c <__alt_data_end+0xfffb1efc>
    799c:	99000217 	ldw	r4,8(r19)
    79a0:	ad85883a 	add	r2,r21,r22
    79a4:	10800054 	ori	r2,r2,1
    79a8:	20800115 	stw	r2,4(r4)
    79ac:	003f4a06 	br	76d8 <__alt_data_end+0xfffb1fa8>
    79b0:	01403f04 	movi	r5,252
    79b4:	01c01f84 	movi	r7,126
    79b8:	003e7b06 	br	73a8 <__alt_data_end+0xfffb1c78>
    79bc:	00c00044 	movi	r3,1
    79c0:	002b883a 	mov	r21,zero
    79c4:	003f3006 	br	7688 <__alt_data_end+0xfffb1f58>
    79c8:	00800074 	movhi	r2,1
    79cc:	108e5904 	addi	r2,r2,14692
    79d0:	15000015 	stw	r20,0(r2)
    79d4:	003f1b06 	br	7644 <__alt_data_end+0xfffb1f14>
    79d8:	9009883a 	mov	r4,r18
    79dc:	81400204 	addi	r5,r16,8
    79e0:	00066fc0 	call	66fc <_free_r>
    79e4:	00800074 	movhi	r2,1
    79e8:	10953604 	addi	r2,r2,21720
    79ec:	10c00017 	ldw	r3,0(r2)
    79f0:	003f3906 	br	76d8 <__alt_data_end+0xfffb1fa8>
    79f4:	01005504 	movi	r4,340
    79f8:	20800436 	bltu	r4,r2,7a0c <_malloc_r+0x774>
    79fc:	3804d3fa 	srli	r2,r7,15
    7a00:	11001dc4 	addi	r4,r2,119
    7a04:	210b883a 	add	r5,r4,r4
    7a08:	003f6206 	br	7794 <__alt_data_end+0xfffb2064>
    7a0c:	01015504 	movi	r4,1364
    7a10:	20800436 	bltu	r4,r2,7a24 <_malloc_r+0x78c>
    7a14:	3804d4ba 	srli	r2,r7,18
    7a18:	11001f04 	addi	r4,r2,124
    7a1c:	210b883a 	add	r5,r4,r4
    7a20:	003f5c06 	br	7794 <__alt_data_end+0xfffb2064>
    7a24:	01403f04 	movi	r5,252
    7a28:	01001f84 	movi	r4,126
    7a2c:	003f5906 	br	7794 <__alt_data_end+0xfffb2064>
    7a30:	98800117 	ldw	r2,4(r19)
    7a34:	003fa906 	br	78dc <__alt_data_end+0xfffb21ac>
    7a38:	6007883a 	mov	r3,r12
    7a3c:	003ea206 	br	74c8 <__alt_data_end+0xfffb1d98>

00007a40 <memchr>:
    7a40:	208000cc 	andi	r2,r4,3
    7a44:	280f883a 	mov	r7,r5
    7a48:	10003526 	beq	r2,zero,7b20 <memchr+0xe0>
    7a4c:	30bfffc4 	addi	r2,r6,-1
    7a50:	30001b26 	beq	r6,zero,7ac0 <memchr+0x80>
    7a54:	21800003 	ldbu	r6,0(r4)
    7a58:	28c03fcc 	andi	r3,r5,255
    7a5c:	30c01a26 	beq	r6,r3,7ac8 <memchr+0x88>
    7a60:	180d883a 	mov	r6,r3
    7a64:	00000406 	br	7a78 <memchr+0x38>
    7a68:	10001526 	beq	r2,zero,7ac0 <memchr+0x80>
    7a6c:	20c00003 	ldbu	r3,0(r4)
    7a70:	10bfffc4 	addi	r2,r2,-1
    7a74:	19801426 	beq	r3,r6,7ac8 <memchr+0x88>
    7a78:	21000044 	addi	r4,r4,1
    7a7c:	20c000cc 	andi	r3,r4,3
    7a80:	183ff91e 	bne	r3,zero,7a68 <__alt_data_end+0xfffb2338>
    7a84:	024000c4 	movi	r9,3
    7a88:	48801136 	bltu	r9,r2,7ad0 <memchr+0x90>
    7a8c:	10000c26 	beq	r2,zero,7ac0 <memchr+0x80>
    7a90:	20c00003 	ldbu	r3,0(r4)
    7a94:	29403fcc 	andi	r5,r5,255
    7a98:	19400b26 	beq	r3,r5,7ac8 <memchr+0x88>
    7a9c:	20c00044 	addi	r3,r4,1
    7aa0:	2085883a 	add	r2,r4,r2
    7aa4:	39803fcc 	andi	r6,r7,255
    7aa8:	00000306 	br	7ab8 <memchr+0x78>
    7aac:	18c00044 	addi	r3,r3,1
    7ab0:	197fffc3 	ldbu	r5,-1(r3)
    7ab4:	29800426 	beq	r5,r6,7ac8 <memchr+0x88>
    7ab8:	1809883a 	mov	r4,r3
    7abc:	18bffb1e 	bne	r3,r2,7aac <__alt_data_end+0xfffb237c>
    7ac0:	0005883a 	mov	r2,zero
    7ac4:	f800283a 	ret
    7ac8:	2005883a 	mov	r2,r4
    7acc:	f800283a 	ret
    7ad0:	28c03fcc 	andi	r3,r5,255
    7ad4:	1810923a 	slli	r8,r3,8
    7ad8:	02ffbff4 	movhi	r11,65279
    7adc:	02a02074 	movhi	r10,32897
    7ae0:	40c6b03a 	or	r3,r8,r3
    7ae4:	1810943a 	slli	r8,r3,16
    7ae8:	5affbfc4 	addi	r11,r11,-257
    7aec:	52a02004 	addi	r10,r10,-32640
    7af0:	40d0b03a 	or	r8,r8,r3
    7af4:	20c00017 	ldw	r3,0(r4)
    7af8:	40c6f03a 	xor	r3,r8,r3
    7afc:	1acd883a 	add	r6,r3,r11
    7b00:	00c6303a 	nor	r3,zero,r3
    7b04:	30c6703a 	and	r3,r6,r3
    7b08:	1a86703a 	and	r3,r3,r10
    7b0c:	183fdf1e 	bne	r3,zero,7a8c <__alt_data_end+0xfffb235c>
    7b10:	10bfff04 	addi	r2,r2,-4
    7b14:	21000104 	addi	r4,r4,4
    7b18:	48bff636 	bltu	r9,r2,7af4 <__alt_data_end+0xfffb23c4>
    7b1c:	003fdb06 	br	7a8c <__alt_data_end+0xfffb235c>
    7b20:	3005883a 	mov	r2,r6
    7b24:	003fd706 	br	7a84 <__alt_data_end+0xfffb2354>

00007b28 <memcpy>:
    7b28:	deffff04 	addi	sp,sp,-4
    7b2c:	dc000015 	stw	r16,0(sp)
    7b30:	00c003c4 	movi	r3,15
    7b34:	2005883a 	mov	r2,r4
    7b38:	1980432e 	bgeu	r3,r6,7c48 <memcpy+0x120>
    7b3c:	2146b03a 	or	r3,r4,r5
    7b40:	18c000cc 	andi	r3,r3,3
    7b44:	1800421e 	bne	r3,zero,7c50 <memcpy+0x128>
    7b48:	343ffc04 	addi	r16,r6,-16
    7b4c:	8020d13a 	srli	r16,r16,4
    7b50:	28c00104 	addi	r3,r5,4
    7b54:	23400104 	addi	r13,r4,4
    7b58:	801e913a 	slli	r15,r16,4
    7b5c:	2b000204 	addi	r12,r5,8
    7b60:	22c00204 	addi	r11,r4,8
    7b64:	7bc00504 	addi	r15,r15,20
    7b68:	2a800304 	addi	r10,r5,12
    7b6c:	22400304 	addi	r9,r4,12
    7b70:	2bdf883a 	add	r15,r5,r15
    7b74:	2811883a 	mov	r8,r5
    7b78:	200f883a 	mov	r7,r4
    7b7c:	41000017 	ldw	r4,0(r8)
    7b80:	39c00404 	addi	r7,r7,16
    7b84:	18c00404 	addi	r3,r3,16
    7b88:	393ffc15 	stw	r4,-16(r7)
    7b8c:	1bbffc17 	ldw	r14,-16(r3)
    7b90:	6b400404 	addi	r13,r13,16
    7b94:	5ac00404 	addi	r11,r11,16
    7b98:	6bbffc15 	stw	r14,-16(r13)
    7b9c:	63800017 	ldw	r14,0(r12)
    7ba0:	4a400404 	addi	r9,r9,16
    7ba4:	42000404 	addi	r8,r8,16
    7ba8:	5bbffc15 	stw	r14,-16(r11)
    7bac:	53800017 	ldw	r14,0(r10)
    7bb0:	63000404 	addi	r12,r12,16
    7bb4:	52800404 	addi	r10,r10,16
    7bb8:	4bbffc15 	stw	r14,-16(r9)
    7bbc:	1bffef1e 	bne	r3,r15,7b7c <__alt_data_end+0xfffb244c>
    7bc0:	81c00044 	addi	r7,r16,1
    7bc4:	380e913a 	slli	r7,r7,4
    7bc8:	310003cc 	andi	r4,r6,15
    7bcc:	02c000c4 	movi	r11,3
    7bd0:	11c7883a 	add	r3,r2,r7
    7bd4:	29cb883a 	add	r5,r5,r7
    7bd8:	59001f2e 	bgeu	r11,r4,7c58 <memcpy+0x130>
    7bdc:	1813883a 	mov	r9,r3
    7be0:	2811883a 	mov	r8,r5
    7be4:	200f883a 	mov	r7,r4
    7be8:	42800017 	ldw	r10,0(r8)
    7bec:	4a400104 	addi	r9,r9,4
    7bf0:	39ffff04 	addi	r7,r7,-4
    7bf4:	4abfff15 	stw	r10,-4(r9)
    7bf8:	42000104 	addi	r8,r8,4
    7bfc:	59fffa36 	bltu	r11,r7,7be8 <__alt_data_end+0xfffb24b8>
    7c00:	213fff04 	addi	r4,r4,-4
    7c04:	2008d0ba 	srli	r4,r4,2
    7c08:	318000cc 	andi	r6,r6,3
    7c0c:	21000044 	addi	r4,r4,1
    7c10:	2109883a 	add	r4,r4,r4
    7c14:	2109883a 	add	r4,r4,r4
    7c18:	1907883a 	add	r3,r3,r4
    7c1c:	290b883a 	add	r5,r5,r4
    7c20:	30000626 	beq	r6,zero,7c3c <memcpy+0x114>
    7c24:	198d883a 	add	r6,r3,r6
    7c28:	29c00003 	ldbu	r7,0(r5)
    7c2c:	18c00044 	addi	r3,r3,1
    7c30:	29400044 	addi	r5,r5,1
    7c34:	19ffffc5 	stb	r7,-1(r3)
    7c38:	19bffb1e 	bne	r3,r6,7c28 <__alt_data_end+0xfffb24f8>
    7c3c:	dc000017 	ldw	r16,0(sp)
    7c40:	dec00104 	addi	sp,sp,4
    7c44:	f800283a 	ret
    7c48:	2007883a 	mov	r3,r4
    7c4c:	003ff406 	br	7c20 <__alt_data_end+0xfffb24f0>
    7c50:	2007883a 	mov	r3,r4
    7c54:	003ff306 	br	7c24 <__alt_data_end+0xfffb24f4>
    7c58:	200d883a 	mov	r6,r4
    7c5c:	003ff006 	br	7c20 <__alt_data_end+0xfffb24f0>

00007c60 <memmove>:
    7c60:	2005883a 	mov	r2,r4
    7c64:	29000b2e 	bgeu	r5,r4,7c94 <memmove+0x34>
    7c68:	298f883a 	add	r7,r5,r6
    7c6c:	21c0092e 	bgeu	r4,r7,7c94 <memmove+0x34>
    7c70:	2187883a 	add	r3,r4,r6
    7c74:	198bc83a 	sub	r5,r3,r6
    7c78:	30004b26 	beq	r6,zero,7da8 <memmove+0x148>
    7c7c:	39ffffc4 	addi	r7,r7,-1
    7c80:	39000003 	ldbu	r4,0(r7)
    7c84:	18ffffc4 	addi	r3,r3,-1
    7c88:	19000005 	stb	r4,0(r3)
    7c8c:	197ffb1e 	bne	r3,r5,7c7c <__alt_data_end+0xfffb254c>
    7c90:	f800283a 	ret
    7c94:	00c003c4 	movi	r3,15
    7c98:	1980412e 	bgeu	r3,r6,7da0 <memmove+0x140>
    7c9c:	1146b03a 	or	r3,r2,r5
    7ca0:	18c000cc 	andi	r3,r3,3
    7ca4:	1800411e 	bne	r3,zero,7dac <memmove+0x14c>
    7ca8:	33fffc04 	addi	r15,r6,-16
    7cac:	781ed13a 	srli	r15,r15,4
    7cb0:	28c00104 	addi	r3,r5,4
    7cb4:	13400104 	addi	r13,r2,4
    7cb8:	781c913a 	slli	r14,r15,4
    7cbc:	2b000204 	addi	r12,r5,8
    7cc0:	12c00204 	addi	r11,r2,8
    7cc4:	73800504 	addi	r14,r14,20
    7cc8:	2a800304 	addi	r10,r5,12
    7ccc:	12400304 	addi	r9,r2,12
    7cd0:	2b9d883a 	add	r14,r5,r14
    7cd4:	2811883a 	mov	r8,r5
    7cd8:	100f883a 	mov	r7,r2
    7cdc:	41000017 	ldw	r4,0(r8)
    7ce0:	39c00404 	addi	r7,r7,16
    7ce4:	18c00404 	addi	r3,r3,16
    7ce8:	393ffc15 	stw	r4,-16(r7)
    7cec:	193ffc17 	ldw	r4,-16(r3)
    7cf0:	6b400404 	addi	r13,r13,16
    7cf4:	5ac00404 	addi	r11,r11,16
    7cf8:	693ffc15 	stw	r4,-16(r13)
    7cfc:	61000017 	ldw	r4,0(r12)
    7d00:	4a400404 	addi	r9,r9,16
    7d04:	42000404 	addi	r8,r8,16
    7d08:	593ffc15 	stw	r4,-16(r11)
    7d0c:	51000017 	ldw	r4,0(r10)
    7d10:	63000404 	addi	r12,r12,16
    7d14:	52800404 	addi	r10,r10,16
    7d18:	493ffc15 	stw	r4,-16(r9)
    7d1c:	1bbfef1e 	bne	r3,r14,7cdc <__alt_data_end+0xfffb25ac>
    7d20:	79000044 	addi	r4,r15,1
    7d24:	2008913a 	slli	r4,r4,4
    7d28:	328003cc 	andi	r10,r6,15
    7d2c:	02c000c4 	movi	r11,3
    7d30:	1107883a 	add	r3,r2,r4
    7d34:	290b883a 	add	r5,r5,r4
    7d38:	5a801e2e 	bgeu	r11,r10,7db4 <memmove+0x154>
    7d3c:	1813883a 	mov	r9,r3
    7d40:	2811883a 	mov	r8,r5
    7d44:	500f883a 	mov	r7,r10
    7d48:	41000017 	ldw	r4,0(r8)
    7d4c:	4a400104 	addi	r9,r9,4
    7d50:	39ffff04 	addi	r7,r7,-4
    7d54:	493fff15 	stw	r4,-4(r9)
    7d58:	42000104 	addi	r8,r8,4
    7d5c:	59fffa36 	bltu	r11,r7,7d48 <__alt_data_end+0xfffb2618>
    7d60:	513fff04 	addi	r4,r10,-4
    7d64:	2008d0ba 	srli	r4,r4,2
    7d68:	318000cc 	andi	r6,r6,3
    7d6c:	21000044 	addi	r4,r4,1
    7d70:	2109883a 	add	r4,r4,r4
    7d74:	2109883a 	add	r4,r4,r4
    7d78:	1907883a 	add	r3,r3,r4
    7d7c:	290b883a 	add	r5,r5,r4
    7d80:	30000926 	beq	r6,zero,7da8 <memmove+0x148>
    7d84:	198d883a 	add	r6,r3,r6
    7d88:	29c00003 	ldbu	r7,0(r5)
    7d8c:	18c00044 	addi	r3,r3,1
    7d90:	29400044 	addi	r5,r5,1
    7d94:	19ffffc5 	stb	r7,-1(r3)
    7d98:	19bffb1e 	bne	r3,r6,7d88 <__alt_data_end+0xfffb2658>
    7d9c:	f800283a 	ret
    7da0:	1007883a 	mov	r3,r2
    7da4:	003ff606 	br	7d80 <__alt_data_end+0xfffb2650>
    7da8:	f800283a 	ret
    7dac:	1007883a 	mov	r3,r2
    7db0:	003ff406 	br	7d84 <__alt_data_end+0xfffb2654>
    7db4:	500d883a 	mov	r6,r10
    7db8:	003ff106 	br	7d80 <__alt_data_end+0xfffb2650>

00007dbc <memset>:
    7dbc:	20c000cc 	andi	r3,r4,3
    7dc0:	2005883a 	mov	r2,r4
    7dc4:	18004326 	beq	r3,zero,7ed4 <memset+0x118>
    7dc8:	31ffffc4 	addi	r7,r6,-1
    7dcc:	30004026 	beq	r6,zero,7ed0 <memset+0x114>
    7dd0:	2813883a 	mov	r9,r5
    7dd4:	200d883a 	mov	r6,r4
    7dd8:	2007883a 	mov	r3,r4
    7ddc:	00000406 	br	7df0 <memset+0x34>
    7de0:	3a3fffc4 	addi	r8,r7,-1
    7de4:	31800044 	addi	r6,r6,1
    7de8:	38003926 	beq	r7,zero,7ed0 <memset+0x114>
    7dec:	400f883a 	mov	r7,r8
    7df0:	18c00044 	addi	r3,r3,1
    7df4:	32400005 	stb	r9,0(r6)
    7df8:	1a0000cc 	andi	r8,r3,3
    7dfc:	403ff81e 	bne	r8,zero,7de0 <__alt_data_end+0xfffb26b0>
    7e00:	010000c4 	movi	r4,3
    7e04:	21c02d2e 	bgeu	r4,r7,7ebc <memset+0x100>
    7e08:	29803fcc 	andi	r6,r5,255
    7e0c:	3008923a 	slli	r4,r6,8
    7e10:	218cb03a 	or	r6,r4,r6
    7e14:	3008943a 	slli	r4,r6,16
    7e18:	218cb03a 	or	r6,r4,r6
    7e1c:	010003c4 	movi	r4,15
    7e20:	21c0182e 	bgeu	r4,r7,7e84 <memset+0xc8>
    7e24:	3b3ffc04 	addi	r12,r7,-16
    7e28:	6018d13a 	srli	r12,r12,4
    7e2c:	1a000104 	addi	r8,r3,4
    7e30:	1ac00204 	addi	r11,r3,8
    7e34:	6008913a 	slli	r4,r12,4
    7e38:	1a800304 	addi	r10,r3,12
    7e3c:	1813883a 	mov	r9,r3
    7e40:	21000504 	addi	r4,r4,20
    7e44:	1909883a 	add	r4,r3,r4
    7e48:	49800015 	stw	r6,0(r9)
    7e4c:	41800015 	stw	r6,0(r8)
    7e50:	59800015 	stw	r6,0(r11)
    7e54:	51800015 	stw	r6,0(r10)
    7e58:	42000404 	addi	r8,r8,16
    7e5c:	4a400404 	addi	r9,r9,16
    7e60:	5ac00404 	addi	r11,r11,16
    7e64:	52800404 	addi	r10,r10,16
    7e68:	413ff71e 	bne	r8,r4,7e48 <__alt_data_end+0xfffb2718>
    7e6c:	63000044 	addi	r12,r12,1
    7e70:	6018913a 	slli	r12,r12,4
    7e74:	39c003cc 	andi	r7,r7,15
    7e78:	010000c4 	movi	r4,3
    7e7c:	1b07883a 	add	r3,r3,r12
    7e80:	21c00e2e 	bgeu	r4,r7,7ebc <memset+0x100>
    7e84:	1813883a 	mov	r9,r3
    7e88:	3811883a 	mov	r8,r7
    7e8c:	010000c4 	movi	r4,3
    7e90:	49800015 	stw	r6,0(r9)
    7e94:	423fff04 	addi	r8,r8,-4
    7e98:	4a400104 	addi	r9,r9,4
    7e9c:	223ffc36 	bltu	r4,r8,7e90 <__alt_data_end+0xfffb2760>
    7ea0:	393fff04 	addi	r4,r7,-4
    7ea4:	2008d0ba 	srli	r4,r4,2
    7ea8:	39c000cc 	andi	r7,r7,3
    7eac:	21000044 	addi	r4,r4,1
    7eb0:	2109883a 	add	r4,r4,r4
    7eb4:	2109883a 	add	r4,r4,r4
    7eb8:	1907883a 	add	r3,r3,r4
    7ebc:	38000426 	beq	r7,zero,7ed0 <memset+0x114>
    7ec0:	19cf883a 	add	r7,r3,r7
    7ec4:	19400005 	stb	r5,0(r3)
    7ec8:	18c00044 	addi	r3,r3,1
    7ecc:	19fffd1e 	bne	r3,r7,7ec4 <__alt_data_end+0xfffb2794>
    7ed0:	f800283a 	ret
    7ed4:	2007883a 	mov	r3,r4
    7ed8:	300f883a 	mov	r7,r6
    7edc:	003fc806 	br	7e00 <__alt_data_end+0xfffb26d0>

00007ee0 <_Balloc>:
    7ee0:	20801317 	ldw	r2,76(r4)
    7ee4:	defffc04 	addi	sp,sp,-16
    7ee8:	dc400115 	stw	r17,4(sp)
    7eec:	dc000015 	stw	r16,0(sp)
    7ef0:	dfc00315 	stw	ra,12(sp)
    7ef4:	dc800215 	stw	r18,8(sp)
    7ef8:	2023883a 	mov	r17,r4
    7efc:	2821883a 	mov	r16,r5
    7f00:	10000f26 	beq	r2,zero,7f40 <_Balloc+0x60>
    7f04:	8407883a 	add	r3,r16,r16
    7f08:	18c7883a 	add	r3,r3,r3
    7f0c:	10c7883a 	add	r3,r2,r3
    7f10:	18800017 	ldw	r2,0(r3)
    7f14:	10001126 	beq	r2,zero,7f5c <_Balloc+0x7c>
    7f18:	11000017 	ldw	r4,0(r2)
    7f1c:	19000015 	stw	r4,0(r3)
    7f20:	10000415 	stw	zero,16(r2)
    7f24:	10000315 	stw	zero,12(r2)
    7f28:	dfc00317 	ldw	ra,12(sp)
    7f2c:	dc800217 	ldw	r18,8(sp)
    7f30:	dc400117 	ldw	r17,4(sp)
    7f34:	dc000017 	ldw	r16,0(sp)
    7f38:	dec00404 	addi	sp,sp,16
    7f3c:	f800283a 	ret
    7f40:	01400104 	movi	r5,4
    7f44:	01800844 	movi	r6,33
    7f48:	000ad7c0 	call	ad7c <_calloc_r>
    7f4c:	88801315 	stw	r2,76(r17)
    7f50:	103fec1e 	bne	r2,zero,7f04 <__alt_data_end+0xfffb27d4>
    7f54:	0005883a 	mov	r2,zero
    7f58:	003ff306 	br	7f28 <__alt_data_end+0xfffb27f8>
    7f5c:	01400044 	movi	r5,1
    7f60:	2c24983a 	sll	r18,r5,r16
    7f64:	8809883a 	mov	r4,r17
    7f68:	91800144 	addi	r6,r18,5
    7f6c:	318d883a 	add	r6,r6,r6
    7f70:	318d883a 	add	r6,r6,r6
    7f74:	000ad7c0 	call	ad7c <_calloc_r>
    7f78:	103ff626 	beq	r2,zero,7f54 <__alt_data_end+0xfffb2824>
    7f7c:	14000115 	stw	r16,4(r2)
    7f80:	14800215 	stw	r18,8(r2)
    7f84:	003fe606 	br	7f20 <__alt_data_end+0xfffb27f0>

00007f88 <_Bfree>:
    7f88:	28000826 	beq	r5,zero,7fac <_Bfree+0x24>
    7f8c:	28c00117 	ldw	r3,4(r5)
    7f90:	20801317 	ldw	r2,76(r4)
    7f94:	18c7883a 	add	r3,r3,r3
    7f98:	18c7883a 	add	r3,r3,r3
    7f9c:	10c5883a 	add	r2,r2,r3
    7fa0:	10c00017 	ldw	r3,0(r2)
    7fa4:	28c00015 	stw	r3,0(r5)
    7fa8:	11400015 	stw	r5,0(r2)
    7fac:	f800283a 	ret

00007fb0 <__multadd>:
    7fb0:	defff704 	addi	sp,sp,-36
    7fb4:	dc800215 	stw	r18,8(sp)
    7fb8:	2c800417 	ldw	r18,16(r5)
    7fbc:	ddc00715 	stw	r23,28(sp)
    7fc0:	dd800615 	stw	r22,24(sp)
    7fc4:	dd000415 	stw	r20,16(sp)
    7fc8:	dcc00315 	stw	r19,12(sp)
    7fcc:	dc400115 	stw	r17,4(sp)
    7fd0:	dc000015 	stw	r16,0(sp)
    7fd4:	dfc00815 	stw	ra,32(sp)
    7fd8:	dd400515 	stw	r21,20(sp)
    7fdc:	2827883a 	mov	r19,r5
    7fe0:	2029883a 	mov	r20,r4
    7fe4:	3023883a 	mov	r17,r6
    7fe8:	3821883a 	mov	r16,r7
    7fec:	2d800504 	addi	r22,r5,20
    7ff0:	002f883a 	mov	r23,zero
    7ff4:	b5400017 	ldw	r21,0(r22)
    7ff8:	880b883a 	mov	r5,r17
    7ffc:	bdc00044 	addi	r23,r23,1
    8000:	a93fffcc 	andi	r4,r21,65535
    8004:	000c3a00 	call	c3a0 <__mulsi3>
    8008:	1421883a 	add	r16,r2,r16
    800c:	a808d43a 	srli	r4,r21,16
    8010:	802ad43a 	srli	r21,r16,16
    8014:	880b883a 	mov	r5,r17
    8018:	000c3a00 	call	c3a0 <__mulsi3>
    801c:	a88f883a 	add	r7,r21,r2
    8020:	3804943a 	slli	r2,r7,16
    8024:	80ffffcc 	andi	r3,r16,65535
    8028:	b5800104 	addi	r22,r22,4
    802c:	10c7883a 	add	r3,r2,r3
    8030:	b0ffff15 	stw	r3,-4(r22)
    8034:	3820d43a 	srli	r16,r7,16
    8038:	bcbfee16 	blt	r23,r18,7ff4 <__alt_data_end+0xfffb28c4>
    803c:	80000926 	beq	r16,zero,8064 <__multadd+0xb4>
    8040:	98800217 	ldw	r2,8(r19)
    8044:	9080130e 	bge	r18,r2,8094 <__multadd+0xe4>
    8048:	90800144 	addi	r2,r18,5
    804c:	1085883a 	add	r2,r2,r2
    8050:	1085883a 	add	r2,r2,r2
    8054:	9885883a 	add	r2,r19,r2
    8058:	14000015 	stw	r16,0(r2)
    805c:	94800044 	addi	r18,r18,1
    8060:	9c800415 	stw	r18,16(r19)
    8064:	9805883a 	mov	r2,r19
    8068:	dfc00817 	ldw	ra,32(sp)
    806c:	ddc00717 	ldw	r23,28(sp)
    8070:	dd800617 	ldw	r22,24(sp)
    8074:	dd400517 	ldw	r21,20(sp)
    8078:	dd000417 	ldw	r20,16(sp)
    807c:	dcc00317 	ldw	r19,12(sp)
    8080:	dc800217 	ldw	r18,8(sp)
    8084:	dc400117 	ldw	r17,4(sp)
    8088:	dc000017 	ldw	r16,0(sp)
    808c:	dec00904 	addi	sp,sp,36
    8090:	f800283a 	ret
    8094:	99400117 	ldw	r5,4(r19)
    8098:	a009883a 	mov	r4,r20
    809c:	29400044 	addi	r5,r5,1
    80a0:	0007ee00 	call	7ee0 <_Balloc>
    80a4:	99800417 	ldw	r6,16(r19)
    80a8:	99400304 	addi	r5,r19,12
    80ac:	11000304 	addi	r4,r2,12
    80b0:	31800084 	addi	r6,r6,2
    80b4:	318d883a 	add	r6,r6,r6
    80b8:	318d883a 	add	r6,r6,r6
    80bc:	1023883a 	mov	r17,r2
    80c0:	0007b280 	call	7b28 <memcpy>
    80c4:	99000117 	ldw	r4,4(r19)
    80c8:	a0c01317 	ldw	r3,76(r20)
    80cc:	2109883a 	add	r4,r4,r4
    80d0:	2109883a 	add	r4,r4,r4
    80d4:	1907883a 	add	r3,r3,r4
    80d8:	18800017 	ldw	r2,0(r3)
    80dc:	98800015 	stw	r2,0(r19)
    80e0:	1cc00015 	stw	r19,0(r3)
    80e4:	8827883a 	mov	r19,r17
    80e8:	003fd706 	br	8048 <__alt_data_end+0xfffb2918>

000080ec <__s2b>:
    80ec:	defff904 	addi	sp,sp,-28
    80f0:	dc400115 	stw	r17,4(sp)
    80f4:	dc000015 	stw	r16,0(sp)
    80f8:	2023883a 	mov	r17,r4
    80fc:	2821883a 	mov	r16,r5
    8100:	39000204 	addi	r4,r7,8
    8104:	01400244 	movi	r5,9
    8108:	dcc00315 	stw	r19,12(sp)
    810c:	dc800215 	stw	r18,8(sp)
    8110:	dfc00615 	stw	ra,24(sp)
    8114:	dd400515 	stw	r21,20(sp)
    8118:	dd000415 	stw	r20,16(sp)
    811c:	3825883a 	mov	r18,r7
    8120:	3027883a 	mov	r19,r6
    8124:	000c2e00 	call	c2e0 <__divsi3>
    8128:	00c00044 	movi	r3,1
    812c:	000b883a 	mov	r5,zero
    8130:	1880030e 	bge	r3,r2,8140 <__s2b+0x54>
    8134:	18c7883a 	add	r3,r3,r3
    8138:	29400044 	addi	r5,r5,1
    813c:	18bffd16 	blt	r3,r2,8134 <__alt_data_end+0xfffb2a04>
    8140:	8809883a 	mov	r4,r17
    8144:	0007ee00 	call	7ee0 <_Balloc>
    8148:	d8c00717 	ldw	r3,28(sp)
    814c:	10c00515 	stw	r3,20(r2)
    8150:	00c00044 	movi	r3,1
    8154:	10c00415 	stw	r3,16(r2)
    8158:	00c00244 	movi	r3,9
    815c:	1cc0210e 	bge	r3,r19,81e4 <__s2b+0xf8>
    8160:	80eb883a 	add	r21,r16,r3
    8164:	a829883a 	mov	r20,r21
    8168:	84e1883a 	add	r16,r16,r19
    816c:	a1c00007 	ldb	r7,0(r20)
    8170:	8809883a 	mov	r4,r17
    8174:	a5000044 	addi	r20,r20,1
    8178:	100b883a 	mov	r5,r2
    817c:	01800284 	movi	r6,10
    8180:	39fff404 	addi	r7,r7,-48
    8184:	0007fb00 	call	7fb0 <__multadd>
    8188:	a43ff81e 	bne	r20,r16,816c <__alt_data_end+0xfffb2a3c>
    818c:	ace1883a 	add	r16,r21,r19
    8190:	843ffe04 	addi	r16,r16,-8
    8194:	9c800a0e 	bge	r19,r18,81c0 <__s2b+0xd4>
    8198:	94e5c83a 	sub	r18,r18,r19
    819c:	84a5883a 	add	r18,r16,r18
    81a0:	81c00007 	ldb	r7,0(r16)
    81a4:	8809883a 	mov	r4,r17
    81a8:	84000044 	addi	r16,r16,1
    81ac:	100b883a 	mov	r5,r2
    81b0:	01800284 	movi	r6,10
    81b4:	39fff404 	addi	r7,r7,-48
    81b8:	0007fb00 	call	7fb0 <__multadd>
    81bc:	84bff81e 	bne	r16,r18,81a0 <__alt_data_end+0xfffb2a70>
    81c0:	dfc00617 	ldw	ra,24(sp)
    81c4:	dd400517 	ldw	r21,20(sp)
    81c8:	dd000417 	ldw	r20,16(sp)
    81cc:	dcc00317 	ldw	r19,12(sp)
    81d0:	dc800217 	ldw	r18,8(sp)
    81d4:	dc400117 	ldw	r17,4(sp)
    81d8:	dc000017 	ldw	r16,0(sp)
    81dc:	dec00704 	addi	sp,sp,28
    81e0:	f800283a 	ret
    81e4:	84000284 	addi	r16,r16,10
    81e8:	1827883a 	mov	r19,r3
    81ec:	003fe906 	br	8194 <__alt_data_end+0xfffb2a64>

000081f0 <__hi0bits>:
    81f0:	20bfffec 	andhi	r2,r4,65535
    81f4:	1000141e 	bne	r2,zero,8248 <__hi0bits+0x58>
    81f8:	2008943a 	slli	r4,r4,16
    81fc:	00800404 	movi	r2,16
    8200:	20ffc02c 	andhi	r3,r4,65280
    8204:	1800021e 	bne	r3,zero,8210 <__hi0bits+0x20>
    8208:	2008923a 	slli	r4,r4,8
    820c:	10800204 	addi	r2,r2,8
    8210:	20fc002c 	andhi	r3,r4,61440
    8214:	1800021e 	bne	r3,zero,8220 <__hi0bits+0x30>
    8218:	2008913a 	slli	r4,r4,4
    821c:	10800104 	addi	r2,r2,4
    8220:	20f0002c 	andhi	r3,r4,49152
    8224:	1800031e 	bne	r3,zero,8234 <__hi0bits+0x44>
    8228:	2109883a 	add	r4,r4,r4
    822c:	10800084 	addi	r2,r2,2
    8230:	2109883a 	add	r4,r4,r4
    8234:	20000316 	blt	r4,zero,8244 <__hi0bits+0x54>
    8238:	2110002c 	andhi	r4,r4,16384
    823c:	2000041e 	bne	r4,zero,8250 <__hi0bits+0x60>
    8240:	00800804 	movi	r2,32
    8244:	f800283a 	ret
    8248:	0005883a 	mov	r2,zero
    824c:	003fec06 	br	8200 <__alt_data_end+0xfffb2ad0>
    8250:	10800044 	addi	r2,r2,1
    8254:	f800283a 	ret

00008258 <__lo0bits>:
    8258:	20c00017 	ldw	r3,0(r4)
    825c:	188001cc 	andi	r2,r3,7
    8260:	10000826 	beq	r2,zero,8284 <__lo0bits+0x2c>
    8264:	1880004c 	andi	r2,r3,1
    8268:	1000211e 	bne	r2,zero,82f0 <__lo0bits+0x98>
    826c:	1880008c 	andi	r2,r3,2
    8270:	1000211e 	bne	r2,zero,82f8 <__lo0bits+0xa0>
    8274:	1806d0ba 	srli	r3,r3,2
    8278:	00800084 	movi	r2,2
    827c:	20c00015 	stw	r3,0(r4)
    8280:	f800283a 	ret
    8284:	18bfffcc 	andi	r2,r3,65535
    8288:	10001326 	beq	r2,zero,82d8 <__lo0bits+0x80>
    828c:	0005883a 	mov	r2,zero
    8290:	19403fcc 	andi	r5,r3,255
    8294:	2800021e 	bne	r5,zero,82a0 <__lo0bits+0x48>
    8298:	1806d23a 	srli	r3,r3,8
    829c:	10800204 	addi	r2,r2,8
    82a0:	194003cc 	andi	r5,r3,15
    82a4:	2800021e 	bne	r5,zero,82b0 <__lo0bits+0x58>
    82a8:	1806d13a 	srli	r3,r3,4
    82ac:	10800104 	addi	r2,r2,4
    82b0:	194000cc 	andi	r5,r3,3
    82b4:	2800021e 	bne	r5,zero,82c0 <__lo0bits+0x68>
    82b8:	1806d0ba 	srli	r3,r3,2
    82bc:	10800084 	addi	r2,r2,2
    82c0:	1940004c 	andi	r5,r3,1
    82c4:	2800081e 	bne	r5,zero,82e8 <__lo0bits+0x90>
    82c8:	1806d07a 	srli	r3,r3,1
    82cc:	1800051e 	bne	r3,zero,82e4 <__lo0bits+0x8c>
    82d0:	00800804 	movi	r2,32
    82d4:	f800283a 	ret
    82d8:	1806d43a 	srli	r3,r3,16
    82dc:	00800404 	movi	r2,16
    82e0:	003feb06 	br	8290 <__alt_data_end+0xfffb2b60>
    82e4:	10800044 	addi	r2,r2,1
    82e8:	20c00015 	stw	r3,0(r4)
    82ec:	f800283a 	ret
    82f0:	0005883a 	mov	r2,zero
    82f4:	f800283a 	ret
    82f8:	1806d07a 	srli	r3,r3,1
    82fc:	00800044 	movi	r2,1
    8300:	20c00015 	stw	r3,0(r4)
    8304:	f800283a 	ret

00008308 <__i2b>:
    8308:	defffd04 	addi	sp,sp,-12
    830c:	dc000015 	stw	r16,0(sp)
    8310:	04000044 	movi	r16,1
    8314:	dc400115 	stw	r17,4(sp)
    8318:	2823883a 	mov	r17,r5
    831c:	800b883a 	mov	r5,r16
    8320:	dfc00215 	stw	ra,8(sp)
    8324:	0007ee00 	call	7ee0 <_Balloc>
    8328:	14400515 	stw	r17,20(r2)
    832c:	14000415 	stw	r16,16(r2)
    8330:	dfc00217 	ldw	ra,8(sp)
    8334:	dc400117 	ldw	r17,4(sp)
    8338:	dc000017 	ldw	r16,0(sp)
    833c:	dec00304 	addi	sp,sp,12
    8340:	f800283a 	ret

00008344 <__multiply>:
    8344:	deffef04 	addi	sp,sp,-68
    8348:	dc400815 	stw	r17,32(sp)
    834c:	dc000715 	stw	r16,28(sp)
    8350:	2c400417 	ldw	r17,16(r5)
    8354:	34000417 	ldw	r16,16(r6)
    8358:	dd800d15 	stw	r22,52(sp)
    835c:	dc800915 	stw	r18,36(sp)
    8360:	dfc01015 	stw	ra,64(sp)
    8364:	df000f15 	stw	fp,60(sp)
    8368:	ddc00e15 	stw	r23,56(sp)
    836c:	dd400c15 	stw	r21,48(sp)
    8370:	dd000b15 	stw	r20,44(sp)
    8374:	dcc00a15 	stw	r19,40(sp)
    8378:	2825883a 	mov	r18,r5
    837c:	302d883a 	mov	r22,r6
    8380:	8c009116 	blt	r17,r16,85c8 <__multiply+0x284>
    8384:	8005883a 	mov	r2,r16
    8388:	8821883a 	mov	r16,r17
    838c:	1023883a 	mov	r17,r2
    8390:	90800217 	ldw	r2,8(r18)
    8394:	8447883a 	add	r3,r16,r17
    8398:	d8c00215 	stw	r3,8(sp)
    839c:	91400117 	ldw	r5,4(r18)
    83a0:	10c0010e 	bge	r2,r3,83a8 <__multiply+0x64>
    83a4:	29400044 	addi	r5,r5,1
    83a8:	0007ee00 	call	7ee0 <_Balloc>
    83ac:	d8c00217 	ldw	r3,8(sp)
    83b0:	d8800615 	stw	r2,24(sp)
    83b4:	18eb883a 	add	r21,r3,r3
    83b8:	ad6b883a 	add	r21,r21,r21
    83bc:	10c00504 	addi	r3,r2,20
    83c0:	1d6b883a 	add	r21,r3,r21
    83c4:	d8c00115 	stw	r3,4(sp)
    83c8:	dd400315 	stw	r21,12(sp)
    83cc:	1805883a 	mov	r2,r3
    83d0:	1d40042e 	bgeu	r3,r21,83e4 <__multiply+0xa0>
    83d4:	d8c00317 	ldw	r3,12(sp)
    83d8:	10000015 	stw	zero,0(r2)
    83dc:	10800104 	addi	r2,r2,4
    83e0:	10fffc36 	bltu	r2,r3,83d4 <__alt_data_end+0xfffb2ca4>
    83e4:	8c63883a 	add	r17,r17,r17
    83e8:	b5800504 	addi	r22,r22,20
    83ec:	8c63883a 	add	r17,r17,r17
    83f0:	94800504 	addi	r18,r18,20
    83f4:	8421883a 	add	r16,r16,r16
    83f8:	b463883a 	add	r17,r22,r17
    83fc:	8421883a 	add	r16,r16,r16
    8400:	dd800015 	stw	r22,0(sp)
    8404:	dc800415 	stw	r18,16(sp)
    8408:	dc400515 	stw	r17,20(sp)
    840c:	9429883a 	add	r20,r18,r16
    8410:	b4404f2e 	bgeu	r22,r17,8550 <__multiply+0x20c>
    8414:	d8c00017 	ldw	r3,0(sp)
    8418:	1c800017 	ldw	r18,0(r3)
    841c:	943fffcc 	andi	r16,r18,65535
    8420:	80001e26 	beq	r16,zero,849c <__multiply+0x158>
    8424:	dd800117 	ldw	r22,4(sp)
    8428:	dd400417 	ldw	r21,16(sp)
    842c:	0025883a 	mov	r18,zero
    8430:	adc00017 	ldw	r23,0(r21)
    8434:	b4c00017 	ldw	r19,0(r22)
    8438:	800b883a 	mov	r5,r16
    843c:	b93fffcc 	andi	r4,r23,65535
    8440:	000c3a00 	call	c3a0 <__mulsi3>
    8444:	9c7fffcc 	andi	r17,r19,65535
    8448:	8885883a 	add	r2,r17,r2
    844c:	b808d43a 	srli	r4,r23,16
    8450:	14a3883a 	add	r17,r2,r18
    8454:	9826d43a 	srli	r19,r19,16
    8458:	8824d43a 	srli	r18,r17,16
    845c:	800b883a 	mov	r5,r16
    8460:	000c3a00 	call	c3a0 <__mulsi3>
    8464:	9885883a 	add	r2,r19,r2
    8468:	14a7883a 	add	r19,r2,r18
    846c:	88ffffcc 	andi	r3,r17,65535
    8470:	9822943a 	slli	r17,r19,16
    8474:	ad400104 	addi	r21,r21,4
    8478:	b005883a 	mov	r2,r22
    847c:	88c6b03a 	or	r3,r17,r3
    8480:	b0c00015 	stw	r3,0(r22)
    8484:	9824d43a 	srli	r18,r19,16
    8488:	b5800104 	addi	r22,r22,4
    848c:	ad3fe836 	bltu	r21,r20,8430 <__alt_data_end+0xfffb2d00>
    8490:	d8c00017 	ldw	r3,0(sp)
    8494:	14800115 	stw	r18,4(r2)
    8498:	1c800017 	ldw	r18,0(r3)
    849c:	9024d43a 	srli	r18,r18,16
    84a0:	90002226 	beq	r18,zero,852c <__multiply+0x1e8>
    84a4:	d8c00117 	ldw	r3,4(sp)
    84a8:	dd800417 	ldw	r22,16(sp)
    84ac:	002f883a 	mov	r23,zero
    84b0:	1f000017 	ldw	fp,0(r3)
    84b4:	1823883a 	mov	r17,r3
    84b8:	182b883a 	mov	r21,r3
    84bc:	e021883a 	mov	r16,fp
    84c0:	00000106 	br	84c8 <__multiply+0x184>
    84c4:	982b883a 	mov	r21,r19
    84c8:	b100000b 	ldhu	r4,0(r22)
    84cc:	8020d43a 	srli	r16,r16,16
    84d0:	900b883a 	mov	r5,r18
    84d4:	000c3a00 	call	c3a0 <__mulsi3>
    84d8:	1405883a 	add	r2,r2,r16
    84dc:	15ef883a 	add	r23,r2,r23
    84e0:	b804943a 	slli	r2,r23,16
    84e4:	e0ffffcc 	andi	r3,fp,65535
    84e8:	8c400104 	addi	r17,r17,4
    84ec:	10c6b03a 	or	r3,r2,r3
    84f0:	88ffff15 	stw	r3,-4(r17)
    84f4:	b5800104 	addi	r22,r22,4
    84f8:	b13fff17 	ldw	r4,-4(r22)
    84fc:	acc00104 	addi	r19,r21,4
    8500:	900b883a 	mov	r5,r18
    8504:	2008d43a 	srli	r4,r4,16
    8508:	9c000017 	ldw	r16,0(r19)
    850c:	000c3a00 	call	c3a0 <__mulsi3>
    8510:	b806d43a 	srli	r3,r23,16
    8514:	813fffcc 	andi	r4,r16,65535
    8518:	1105883a 	add	r2,r2,r4
    851c:	10f9883a 	add	fp,r2,r3
    8520:	e02ed43a 	srli	r23,fp,16
    8524:	b53fe736 	bltu	r22,r20,84c4 <__alt_data_end+0xfffb2d94>
    8528:	af000115 	stw	fp,4(r21)
    852c:	d8c00017 	ldw	r3,0(sp)
    8530:	d9000517 	ldw	r4,20(sp)
    8534:	18c00104 	addi	r3,r3,4
    8538:	d8c00015 	stw	r3,0(sp)
    853c:	d8c00117 	ldw	r3,4(sp)
    8540:	18c00104 	addi	r3,r3,4
    8544:	d8c00115 	stw	r3,4(sp)
    8548:	d8c00017 	ldw	r3,0(sp)
    854c:	193fb136 	bltu	r3,r4,8414 <__alt_data_end+0xfffb2ce4>
    8550:	d8c00217 	ldw	r3,8(sp)
    8554:	00c00c0e 	bge	zero,r3,8588 <__multiply+0x244>
    8558:	d8c00317 	ldw	r3,12(sp)
    855c:	18bfff17 	ldw	r2,-4(r3)
    8560:	1d7fff04 	addi	r21,r3,-4
    8564:	10000326 	beq	r2,zero,8574 <__multiply+0x230>
    8568:	00000706 	br	8588 <__multiply+0x244>
    856c:	a8800017 	ldw	r2,0(r21)
    8570:	1000051e 	bne	r2,zero,8588 <__multiply+0x244>
    8574:	d8c00217 	ldw	r3,8(sp)
    8578:	ad7fff04 	addi	r21,r21,-4
    857c:	18ffffc4 	addi	r3,r3,-1
    8580:	d8c00215 	stw	r3,8(sp)
    8584:	183ff91e 	bne	r3,zero,856c <__alt_data_end+0xfffb2e3c>
    8588:	d8c00617 	ldw	r3,24(sp)
    858c:	d9000217 	ldw	r4,8(sp)
    8590:	1805883a 	mov	r2,r3
    8594:	19000415 	stw	r4,16(r3)
    8598:	dfc01017 	ldw	ra,64(sp)
    859c:	df000f17 	ldw	fp,60(sp)
    85a0:	ddc00e17 	ldw	r23,56(sp)
    85a4:	dd800d17 	ldw	r22,52(sp)
    85a8:	dd400c17 	ldw	r21,48(sp)
    85ac:	dd000b17 	ldw	r20,44(sp)
    85b0:	dcc00a17 	ldw	r19,40(sp)
    85b4:	dc800917 	ldw	r18,36(sp)
    85b8:	dc400817 	ldw	r17,32(sp)
    85bc:	dc000717 	ldw	r16,28(sp)
    85c0:	dec01104 	addi	sp,sp,68
    85c4:	f800283a 	ret
    85c8:	3025883a 	mov	r18,r6
    85cc:	282d883a 	mov	r22,r5
    85d0:	003f6f06 	br	8390 <__alt_data_end+0xfffb2c60>

000085d4 <__pow5mult>:
    85d4:	defffa04 	addi	sp,sp,-24
    85d8:	dcc00315 	stw	r19,12(sp)
    85dc:	dc800215 	stw	r18,8(sp)
    85e0:	dc000015 	stw	r16,0(sp)
    85e4:	dfc00515 	stw	ra,20(sp)
    85e8:	dd000415 	stw	r20,16(sp)
    85ec:	dc400115 	stw	r17,4(sp)
    85f0:	308000cc 	andi	r2,r6,3
    85f4:	3021883a 	mov	r16,r6
    85f8:	2027883a 	mov	r19,r4
    85fc:	2825883a 	mov	r18,r5
    8600:	10002e1e 	bne	r2,zero,86bc <__pow5mult+0xe8>
    8604:	8021d0ba 	srai	r16,r16,2
    8608:	80001a26 	beq	r16,zero,8674 <__pow5mult+0xa0>
    860c:	9c401217 	ldw	r17,72(r19)
    8610:	8800061e 	bne	r17,zero,862c <__pow5mult+0x58>
    8614:	00003406 	br	86e8 <__pow5mult+0x114>
    8618:	8021d07a 	srai	r16,r16,1
    861c:	80001526 	beq	r16,zero,8674 <__pow5mult+0xa0>
    8620:	88800017 	ldw	r2,0(r17)
    8624:	10001c26 	beq	r2,zero,8698 <__pow5mult+0xc4>
    8628:	1023883a 	mov	r17,r2
    862c:	80c0004c 	andi	r3,r16,1
    8630:	183ff926 	beq	r3,zero,8618 <__alt_data_end+0xfffb2ee8>
    8634:	900b883a 	mov	r5,r18
    8638:	880d883a 	mov	r6,r17
    863c:	9809883a 	mov	r4,r19
    8640:	00083440 	call	8344 <__multiply>
    8644:	90001b26 	beq	r18,zero,86b4 <__pow5mult+0xe0>
    8648:	91c00117 	ldw	r7,4(r18)
    864c:	98c01317 	ldw	r3,76(r19)
    8650:	8021d07a 	srai	r16,r16,1
    8654:	39cf883a 	add	r7,r7,r7
    8658:	39cf883a 	add	r7,r7,r7
    865c:	19c7883a 	add	r3,r3,r7
    8660:	19000017 	ldw	r4,0(r3)
    8664:	91000015 	stw	r4,0(r18)
    8668:	1c800015 	stw	r18,0(r3)
    866c:	1025883a 	mov	r18,r2
    8670:	803feb1e 	bne	r16,zero,8620 <__alt_data_end+0xfffb2ef0>
    8674:	9005883a 	mov	r2,r18
    8678:	dfc00517 	ldw	ra,20(sp)
    867c:	dd000417 	ldw	r20,16(sp)
    8680:	dcc00317 	ldw	r19,12(sp)
    8684:	dc800217 	ldw	r18,8(sp)
    8688:	dc400117 	ldw	r17,4(sp)
    868c:	dc000017 	ldw	r16,0(sp)
    8690:	dec00604 	addi	sp,sp,24
    8694:	f800283a 	ret
    8698:	9809883a 	mov	r4,r19
    869c:	880b883a 	mov	r5,r17
    86a0:	880d883a 	mov	r6,r17
    86a4:	00083440 	call	8344 <__multiply>
    86a8:	88800015 	stw	r2,0(r17)
    86ac:	10000015 	stw	zero,0(r2)
    86b0:	003fdd06 	br	8628 <__alt_data_end+0xfffb2ef8>
    86b4:	1025883a 	mov	r18,r2
    86b8:	003fd706 	br	8618 <__alt_data_end+0xfffb2ee8>
    86bc:	10bfffc4 	addi	r2,r2,-1
    86c0:	1085883a 	add	r2,r2,r2
    86c4:	00c00074 	movhi	r3,1
    86c8:	18c70d04 	addi	r3,r3,7220
    86cc:	1085883a 	add	r2,r2,r2
    86d0:	1885883a 	add	r2,r3,r2
    86d4:	11800017 	ldw	r6,0(r2)
    86d8:	000f883a 	mov	r7,zero
    86dc:	0007fb00 	call	7fb0 <__multadd>
    86e0:	1025883a 	mov	r18,r2
    86e4:	003fc706 	br	8604 <__alt_data_end+0xfffb2ed4>
    86e8:	05000044 	movi	r20,1
    86ec:	9809883a 	mov	r4,r19
    86f0:	a00b883a 	mov	r5,r20
    86f4:	0007ee00 	call	7ee0 <_Balloc>
    86f8:	1023883a 	mov	r17,r2
    86fc:	00809c44 	movi	r2,625
    8700:	88800515 	stw	r2,20(r17)
    8704:	8d000415 	stw	r20,16(r17)
    8708:	9c401215 	stw	r17,72(r19)
    870c:	88000015 	stw	zero,0(r17)
    8710:	003fc606 	br	862c <__alt_data_end+0xfffb2efc>

00008714 <__lshift>:
    8714:	defff904 	addi	sp,sp,-28
    8718:	dd000415 	stw	r20,16(sp)
    871c:	dcc00315 	stw	r19,12(sp)
    8720:	3029d17a 	srai	r20,r6,5
    8724:	2cc00417 	ldw	r19,16(r5)
    8728:	28800217 	ldw	r2,8(r5)
    872c:	dd400515 	stw	r21,20(sp)
    8730:	a4e7883a 	add	r19,r20,r19
    8734:	dc800215 	stw	r18,8(sp)
    8738:	dc400115 	stw	r17,4(sp)
    873c:	dc000015 	stw	r16,0(sp)
    8740:	dfc00615 	stw	ra,24(sp)
    8744:	9c000044 	addi	r16,r19,1
    8748:	2823883a 	mov	r17,r5
    874c:	302b883a 	mov	r21,r6
    8750:	2025883a 	mov	r18,r4
    8754:	29400117 	ldw	r5,4(r5)
    8758:	1400030e 	bge	r2,r16,8768 <__lshift+0x54>
    875c:	1085883a 	add	r2,r2,r2
    8760:	29400044 	addi	r5,r5,1
    8764:	143ffd16 	blt	r2,r16,875c <__alt_data_end+0xfffb302c>
    8768:	9009883a 	mov	r4,r18
    876c:	0007ee00 	call	7ee0 <_Balloc>
    8770:	11c00504 	addi	r7,r2,20
    8774:	0500090e 	bge	zero,r20,879c <__lshift+0x88>
    8778:	3811883a 	mov	r8,r7
    877c:	0007883a 	mov	r3,zero
    8780:	40000015 	stw	zero,0(r8)
    8784:	18c00044 	addi	r3,r3,1
    8788:	42000104 	addi	r8,r8,4
    878c:	1d3ffc1e 	bne	r3,r20,8780 <__alt_data_end+0xfffb3050>
    8790:	18c7883a 	add	r3,r3,r3
    8794:	18c7883a 	add	r3,r3,r3
    8798:	38cf883a 	add	r7,r7,r3
    879c:	89000417 	ldw	r4,16(r17)
    87a0:	88c00504 	addi	r3,r17,20
    87a4:	a98007cc 	andi	r6,r21,31
    87a8:	2109883a 	add	r4,r4,r4
    87ac:	2109883a 	add	r4,r4,r4
    87b0:	1909883a 	add	r4,r3,r4
    87b4:	30002326 	beq	r6,zero,8844 <__lshift+0x130>
    87b8:	01400804 	movi	r5,32
    87bc:	298bc83a 	sub	r5,r5,r6
    87c0:	0013883a 	mov	r9,zero
    87c4:	1a000017 	ldw	r8,0(r3)
    87c8:	3815883a 	mov	r10,r7
    87cc:	39c00104 	addi	r7,r7,4
    87d0:	4190983a 	sll	r8,r8,r6
    87d4:	18c00104 	addi	r3,r3,4
    87d8:	4a10b03a 	or	r8,r9,r8
    87dc:	3a3fff15 	stw	r8,-4(r7)
    87e0:	1a3fff17 	ldw	r8,-4(r3)
    87e4:	4152d83a 	srl	r9,r8,r5
    87e8:	193ff636 	bltu	r3,r4,87c4 <__alt_data_end+0xfffb3094>
    87ec:	52400115 	stw	r9,4(r10)
    87f0:	48000126 	beq	r9,zero,87f8 <__lshift+0xe4>
    87f4:	9c000084 	addi	r16,r19,2
    87f8:	89000117 	ldw	r4,4(r17)
    87fc:	90c01317 	ldw	r3,76(r18)
    8800:	843fffc4 	addi	r16,r16,-1
    8804:	2109883a 	add	r4,r4,r4
    8808:	2109883a 	add	r4,r4,r4
    880c:	1907883a 	add	r3,r3,r4
    8810:	19000017 	ldw	r4,0(r3)
    8814:	14000415 	stw	r16,16(r2)
    8818:	89000015 	stw	r4,0(r17)
    881c:	1c400015 	stw	r17,0(r3)
    8820:	dfc00617 	ldw	ra,24(sp)
    8824:	dd400517 	ldw	r21,20(sp)
    8828:	dd000417 	ldw	r20,16(sp)
    882c:	dcc00317 	ldw	r19,12(sp)
    8830:	dc800217 	ldw	r18,8(sp)
    8834:	dc400117 	ldw	r17,4(sp)
    8838:	dc000017 	ldw	r16,0(sp)
    883c:	dec00704 	addi	sp,sp,28
    8840:	f800283a 	ret
    8844:	19400017 	ldw	r5,0(r3)
    8848:	39c00104 	addi	r7,r7,4
    884c:	18c00104 	addi	r3,r3,4
    8850:	397fff15 	stw	r5,-4(r7)
    8854:	193ffb36 	bltu	r3,r4,8844 <__alt_data_end+0xfffb3114>
    8858:	003fe706 	br	87f8 <__alt_data_end+0xfffb30c8>

0000885c <__mcmp>:
    885c:	20800417 	ldw	r2,16(r4)
    8860:	28c00417 	ldw	r3,16(r5)
    8864:	10c5c83a 	sub	r2,r2,r3
    8868:	1000111e 	bne	r2,zero,88b0 <__mcmp+0x54>
    886c:	18c7883a 	add	r3,r3,r3
    8870:	18c7883a 	add	r3,r3,r3
    8874:	21000504 	addi	r4,r4,20
    8878:	29400504 	addi	r5,r5,20
    887c:	20c5883a 	add	r2,r4,r3
    8880:	28cb883a 	add	r5,r5,r3
    8884:	00000106 	br	888c <__mcmp+0x30>
    8888:	20800a2e 	bgeu	r4,r2,88b4 <__mcmp+0x58>
    888c:	10bfff04 	addi	r2,r2,-4
    8890:	297fff04 	addi	r5,r5,-4
    8894:	11800017 	ldw	r6,0(r2)
    8898:	28c00017 	ldw	r3,0(r5)
    889c:	30fffa26 	beq	r6,r3,8888 <__alt_data_end+0xfffb3158>
    88a0:	30c00236 	bltu	r6,r3,88ac <__mcmp+0x50>
    88a4:	00800044 	movi	r2,1
    88a8:	f800283a 	ret
    88ac:	00bfffc4 	movi	r2,-1
    88b0:	f800283a 	ret
    88b4:	0005883a 	mov	r2,zero
    88b8:	f800283a 	ret

000088bc <__mdiff>:
    88bc:	defffb04 	addi	sp,sp,-20
    88c0:	dc000015 	stw	r16,0(sp)
    88c4:	2821883a 	mov	r16,r5
    88c8:	dcc00315 	stw	r19,12(sp)
    88cc:	300b883a 	mov	r5,r6
    88d0:	2027883a 	mov	r19,r4
    88d4:	8009883a 	mov	r4,r16
    88d8:	dc800215 	stw	r18,8(sp)
    88dc:	dfc00415 	stw	ra,16(sp)
    88e0:	dc400115 	stw	r17,4(sp)
    88e4:	3025883a 	mov	r18,r6
    88e8:	000885c0 	call	885c <__mcmp>
    88ec:	10005226 	beq	r2,zero,8a38 <__mdiff+0x17c>
    88f0:	10004c16 	blt	r2,zero,8a24 <__mdiff+0x168>
    88f4:	0023883a 	mov	r17,zero
    88f8:	81400117 	ldw	r5,4(r16)
    88fc:	9809883a 	mov	r4,r19
    8900:	0007ee00 	call	7ee0 <_Balloc>
    8904:	83400417 	ldw	r13,16(r16)
    8908:	93800417 	ldw	r14,16(r18)
    890c:	81000504 	addi	r4,r16,20
    8910:	6b59883a 	add	r12,r13,r13
    8914:	739d883a 	add	r14,r14,r14
    8918:	6319883a 	add	r12,r12,r12
    891c:	91800504 	addi	r6,r18,20
    8920:	739d883a 	add	r14,r14,r14
    8924:	14400315 	stw	r17,12(r2)
    8928:	2319883a 	add	r12,r4,r12
    892c:	339d883a 	add	r14,r6,r14
    8930:	12400504 	addi	r9,r2,20
    8934:	0007883a 	mov	r3,zero
    8938:	22000017 	ldw	r8,0(r4)
    893c:	32800017 	ldw	r10,0(r6)
    8940:	4ac00104 	addi	r11,r9,4
    8944:	41ffffcc 	andi	r7,r8,65535
    8948:	38c7883a 	add	r3,r7,r3
    894c:	51ffffcc 	andi	r7,r10,65535
    8950:	19cfc83a 	sub	r7,r3,r7
    8954:	4010d43a 	srli	r8,r8,16
    8958:	5014d43a 	srli	r10,r10,16
    895c:	3807d43a 	srai	r3,r7,16
    8960:	39ffffcc 	andi	r7,r7,65535
    8964:	4291c83a 	sub	r8,r8,r10
    8968:	40c7883a 	add	r3,r8,r3
    896c:	1810943a 	slli	r8,r3,16
    8970:	31800104 	addi	r6,r6,4
    8974:	21000104 	addi	r4,r4,4
    8978:	41ceb03a 	or	r7,r8,r7
    897c:	49c00015 	stw	r7,0(r9)
    8980:	1807d43a 	srai	r3,r3,16
    8984:	580b883a 	mov	r5,r11
    8988:	5813883a 	mov	r9,r11
    898c:	33bfea36 	bltu	r6,r14,8938 <__alt_data_end+0xfffb3208>
    8990:	2011883a 	mov	r8,r4
    8994:	2300152e 	bgeu	r4,r12,89ec <__mdiff+0x130>
    8998:	21400017 	ldw	r5,0(r4)
    899c:	4a400104 	addi	r9,r9,4
    89a0:	21000104 	addi	r4,r4,4
    89a4:	29ffffcc 	andi	r7,r5,65535
    89a8:	38c7883a 	add	r3,r7,r3
    89ac:	280ad43a 	srli	r5,r5,16
    89b0:	180dd43a 	srai	r6,r3,16
    89b4:	19ffffcc 	andi	r7,r3,65535
    89b8:	3147883a 	add	r3,r6,r5
    89bc:	180a943a 	slli	r5,r3,16
    89c0:	1807d43a 	srai	r3,r3,16
    89c4:	29ceb03a 	or	r7,r5,r7
    89c8:	49ffff15 	stw	r7,-4(r9)
    89cc:	233ff236 	bltu	r4,r12,8998 <__alt_data_end+0xfffb3268>
    89d0:	0206303a 	nor	r3,zero,r8
    89d4:	1b07883a 	add	r3,r3,r12
    89d8:	1806d0ba 	srli	r3,r3,2
    89dc:	18c00044 	addi	r3,r3,1
    89e0:	18c7883a 	add	r3,r3,r3
    89e4:	18c7883a 	add	r3,r3,r3
    89e8:	58cb883a 	add	r5,r11,r3
    89ec:	28ffff04 	addi	r3,r5,-4
    89f0:	3800041e 	bne	r7,zero,8a04 <__mdiff+0x148>
    89f4:	18ffff04 	addi	r3,r3,-4
    89f8:	19000017 	ldw	r4,0(r3)
    89fc:	6b7fffc4 	addi	r13,r13,-1
    8a00:	203ffc26 	beq	r4,zero,89f4 <__alt_data_end+0xfffb32c4>
    8a04:	13400415 	stw	r13,16(r2)
    8a08:	dfc00417 	ldw	ra,16(sp)
    8a0c:	dcc00317 	ldw	r19,12(sp)
    8a10:	dc800217 	ldw	r18,8(sp)
    8a14:	dc400117 	ldw	r17,4(sp)
    8a18:	dc000017 	ldw	r16,0(sp)
    8a1c:	dec00504 	addi	sp,sp,20
    8a20:	f800283a 	ret
    8a24:	8005883a 	mov	r2,r16
    8a28:	04400044 	movi	r17,1
    8a2c:	9021883a 	mov	r16,r18
    8a30:	1025883a 	mov	r18,r2
    8a34:	003fb006 	br	88f8 <__alt_data_end+0xfffb31c8>
    8a38:	9809883a 	mov	r4,r19
    8a3c:	000b883a 	mov	r5,zero
    8a40:	0007ee00 	call	7ee0 <_Balloc>
    8a44:	00c00044 	movi	r3,1
    8a48:	10c00415 	stw	r3,16(r2)
    8a4c:	10000515 	stw	zero,20(r2)
    8a50:	003fed06 	br	8a08 <__alt_data_end+0xfffb32d8>

00008a54 <__ulp>:
    8a54:	295ffc2c 	andhi	r5,r5,32752
    8a58:	00bf3034 	movhi	r2,64704
    8a5c:	2887883a 	add	r3,r5,r2
    8a60:	00c0020e 	bge	zero,r3,8a6c <__ulp+0x18>
    8a64:	0005883a 	mov	r2,zero
    8a68:	f800283a 	ret
    8a6c:	00c7c83a 	sub	r3,zero,r3
    8a70:	180bd53a 	srai	r5,r3,20
    8a74:	008004c4 	movi	r2,19
    8a78:	11400a0e 	bge	r2,r5,8aa4 <__ulp+0x50>
    8a7c:	00800c84 	movi	r2,50
    8a80:	0007883a 	mov	r3,zero
    8a84:	11400516 	blt	r2,r5,8a9c <__ulp+0x48>
    8a88:	00800cc4 	movi	r2,51
    8a8c:	114bc83a 	sub	r5,r2,r5
    8a90:	00800044 	movi	r2,1
    8a94:	1144983a 	sll	r2,r2,r5
    8a98:	f800283a 	ret
    8a9c:	00800044 	movi	r2,1
    8aa0:	f800283a 	ret
    8aa4:	00800234 	movhi	r2,8
    8aa8:	1147d83a 	sra	r3,r2,r5
    8aac:	0005883a 	mov	r2,zero
    8ab0:	f800283a 	ret

00008ab4 <__b2d>:
    8ab4:	defffa04 	addi	sp,sp,-24
    8ab8:	dc000015 	stw	r16,0(sp)
    8abc:	24000417 	ldw	r16,16(r4)
    8ac0:	dc400115 	stw	r17,4(sp)
    8ac4:	24400504 	addi	r17,r4,20
    8ac8:	8421883a 	add	r16,r16,r16
    8acc:	8421883a 	add	r16,r16,r16
    8ad0:	8c21883a 	add	r16,r17,r16
    8ad4:	dc800215 	stw	r18,8(sp)
    8ad8:	84bfff17 	ldw	r18,-4(r16)
    8adc:	dd000415 	stw	r20,16(sp)
    8ae0:	dcc00315 	stw	r19,12(sp)
    8ae4:	9009883a 	mov	r4,r18
    8ae8:	2829883a 	mov	r20,r5
    8aec:	dfc00515 	stw	ra,20(sp)
    8af0:	00081f00 	call	81f0 <__hi0bits>
    8af4:	00c00804 	movi	r3,32
    8af8:	1887c83a 	sub	r3,r3,r2
    8afc:	a0c00015 	stw	r3,0(r20)
    8b00:	00c00284 	movi	r3,10
    8b04:	84ffff04 	addi	r19,r16,-4
    8b08:	18801216 	blt	r3,r2,8b54 <__b2d+0xa0>
    8b0c:	014002c4 	movi	r5,11
    8b10:	2889c83a 	sub	r4,r5,r2
    8b14:	9106d83a 	srl	r3,r18,r4
    8b18:	18cffc34 	orhi	r3,r3,16368
    8b1c:	8cc0282e 	bgeu	r17,r19,8bc0 <__b2d+0x10c>
    8b20:	817ffe17 	ldw	r5,-8(r16)
    8b24:	290ad83a 	srl	r5,r5,r4
    8b28:	10800544 	addi	r2,r2,21
    8b2c:	9084983a 	sll	r2,r18,r2
    8b30:	2884b03a 	or	r2,r5,r2
    8b34:	dfc00517 	ldw	ra,20(sp)
    8b38:	dd000417 	ldw	r20,16(sp)
    8b3c:	dcc00317 	ldw	r19,12(sp)
    8b40:	dc800217 	ldw	r18,8(sp)
    8b44:	dc400117 	ldw	r17,4(sp)
    8b48:	dc000017 	ldw	r16,0(sp)
    8b4c:	dec00604 	addi	sp,sp,24
    8b50:	f800283a 	ret
    8b54:	113ffd44 	addi	r4,r2,-11
    8b58:	8cc00f2e 	bgeu	r17,r19,8b98 <__b2d+0xe4>
    8b5c:	81bffe04 	addi	r6,r16,-8
    8b60:	817ffe17 	ldw	r5,-8(r16)
    8b64:	20001326 	beq	r4,zero,8bb4 <__b2d+0x100>
    8b68:	00c00ac4 	movi	r3,43
    8b6c:	1885c83a 	sub	r2,r3,r2
    8b70:	2886d83a 	srl	r3,r5,r2
    8b74:	9124983a 	sll	r18,r18,r4
    8b78:	90e4b03a 	or	r18,r18,r3
    8b7c:	90cffc34 	orhi	r3,r18,16368
    8b80:	8980112e 	bgeu	r17,r6,8bc8 <__b2d+0x114>
    8b84:	81bffd17 	ldw	r6,-12(r16)
    8b88:	308cd83a 	srl	r6,r6,r2
    8b8c:	2904983a 	sll	r2,r5,r4
    8b90:	1184b03a 	or	r2,r2,r6
    8b94:	003fe706 	br	8b34 <__alt_data_end+0xfffb3404>
    8b98:	20000526 	beq	r4,zero,8bb0 <__b2d+0xfc>
    8b9c:	9124983a 	sll	r18,r18,r4
    8ba0:	000d883a 	mov	r6,zero
    8ba4:	000b883a 	mov	r5,zero
    8ba8:	90cffc34 	orhi	r3,r18,16368
    8bac:	003ff706 	br	8b8c <__alt_data_end+0xfffb345c>
    8bb0:	000b883a 	mov	r5,zero
    8bb4:	90cffc34 	orhi	r3,r18,16368
    8bb8:	2805883a 	mov	r2,r5
    8bbc:	003fdd06 	br	8b34 <__alt_data_end+0xfffb3404>
    8bc0:	000b883a 	mov	r5,zero
    8bc4:	003fd806 	br	8b28 <__alt_data_end+0xfffb33f8>
    8bc8:	000d883a 	mov	r6,zero
    8bcc:	003fef06 	br	8b8c <__alt_data_end+0xfffb345c>

00008bd0 <__d2b>:
    8bd0:	defff704 	addi	sp,sp,-36
    8bd4:	dc000215 	stw	r16,8(sp)
    8bd8:	3021883a 	mov	r16,r6
    8bdc:	dc400315 	stw	r17,12(sp)
    8be0:	8022907a 	slli	r17,r16,1
    8be4:	dd400715 	stw	r21,28(sp)
    8be8:	282b883a 	mov	r21,r5
    8bec:	01400044 	movi	r5,1
    8bf0:	dd000615 	stw	r20,24(sp)
    8bf4:	dcc00515 	stw	r19,20(sp)
    8bf8:	dc800415 	stw	r18,16(sp)
    8bfc:	dfc00815 	stw	ra,32(sp)
    8c00:	3829883a 	mov	r20,r7
    8c04:	dc800917 	ldw	r18,36(sp)
    8c08:	8822d57a 	srli	r17,r17,21
    8c0c:	0007ee00 	call	7ee0 <_Balloc>
    8c10:	1027883a 	mov	r19,r2
    8c14:	00800434 	movhi	r2,16
    8c18:	10bfffc4 	addi	r2,r2,-1
    8c1c:	808c703a 	and	r6,r16,r2
    8c20:	88000126 	beq	r17,zero,8c28 <__d2b+0x58>
    8c24:	31800434 	orhi	r6,r6,16
    8c28:	d9800015 	stw	r6,0(sp)
    8c2c:	a8001f26 	beq	r21,zero,8cac <__d2b+0xdc>
    8c30:	d9000104 	addi	r4,sp,4
    8c34:	dd400115 	stw	r21,4(sp)
    8c38:	00082580 	call	8258 <__lo0bits>
    8c3c:	d8c00017 	ldw	r3,0(sp)
    8c40:	1000291e 	bne	r2,zero,8ce8 <__d2b+0x118>
    8c44:	d9000117 	ldw	r4,4(sp)
    8c48:	99000515 	stw	r4,20(r19)
    8c4c:	1820c03a 	cmpne	r16,r3,zero
    8c50:	84000044 	addi	r16,r16,1
    8c54:	98c00615 	stw	r3,24(r19)
    8c58:	9c000415 	stw	r16,16(r19)
    8c5c:	88001b1e 	bne	r17,zero,8ccc <__d2b+0xfc>
    8c60:	800690ba 	slli	r3,r16,2
    8c64:	10bef384 	addi	r2,r2,-1074
    8c68:	a0800015 	stw	r2,0(r20)
    8c6c:	98c5883a 	add	r2,r19,r3
    8c70:	11000417 	ldw	r4,16(r2)
    8c74:	8020917a 	slli	r16,r16,5
    8c78:	00081f00 	call	81f0 <__hi0bits>
    8c7c:	8085c83a 	sub	r2,r16,r2
    8c80:	90800015 	stw	r2,0(r18)
    8c84:	9805883a 	mov	r2,r19
    8c88:	dfc00817 	ldw	ra,32(sp)
    8c8c:	dd400717 	ldw	r21,28(sp)
    8c90:	dd000617 	ldw	r20,24(sp)
    8c94:	dcc00517 	ldw	r19,20(sp)
    8c98:	dc800417 	ldw	r18,16(sp)
    8c9c:	dc400317 	ldw	r17,12(sp)
    8ca0:	dc000217 	ldw	r16,8(sp)
    8ca4:	dec00904 	addi	sp,sp,36
    8ca8:	f800283a 	ret
    8cac:	d809883a 	mov	r4,sp
    8cb0:	00082580 	call	8258 <__lo0bits>
    8cb4:	d8c00017 	ldw	r3,0(sp)
    8cb8:	04000044 	movi	r16,1
    8cbc:	9c000415 	stw	r16,16(r19)
    8cc0:	98c00515 	stw	r3,20(r19)
    8cc4:	10800804 	addi	r2,r2,32
    8cc8:	883fe526 	beq	r17,zero,8c60 <__alt_data_end+0xfffb3530>
    8ccc:	8c7ef344 	addi	r17,r17,-1075
    8cd0:	88a3883a 	add	r17,r17,r2
    8cd4:	00c00d44 	movi	r3,53
    8cd8:	a4400015 	stw	r17,0(r20)
    8cdc:	1885c83a 	sub	r2,r3,r2
    8ce0:	90800015 	stw	r2,0(r18)
    8ce4:	003fe706 	br	8c84 <__alt_data_end+0xfffb3554>
    8ce8:	01000804 	movi	r4,32
    8cec:	2089c83a 	sub	r4,r4,r2
    8cf0:	1908983a 	sll	r4,r3,r4
    8cf4:	d9400117 	ldw	r5,4(sp)
    8cf8:	1886d83a 	srl	r3,r3,r2
    8cfc:	2148b03a 	or	r4,r4,r5
    8d00:	99000515 	stw	r4,20(r19)
    8d04:	d8c00015 	stw	r3,0(sp)
    8d08:	003fd006 	br	8c4c <__alt_data_end+0xfffb351c>

00008d0c <__ratio>:
    8d0c:	defff904 	addi	sp,sp,-28
    8d10:	dc400315 	stw	r17,12(sp)
    8d14:	2823883a 	mov	r17,r5
    8d18:	d9400104 	addi	r5,sp,4
    8d1c:	dfc00615 	stw	ra,24(sp)
    8d20:	dcc00515 	stw	r19,20(sp)
    8d24:	dc800415 	stw	r18,16(sp)
    8d28:	2027883a 	mov	r19,r4
    8d2c:	dc000215 	stw	r16,8(sp)
    8d30:	0008ab40 	call	8ab4 <__b2d>
    8d34:	8809883a 	mov	r4,r17
    8d38:	d80b883a 	mov	r5,sp
    8d3c:	1025883a 	mov	r18,r2
    8d40:	1821883a 	mov	r16,r3
    8d44:	0008ab40 	call	8ab4 <__b2d>
    8d48:	8a400417 	ldw	r9,16(r17)
    8d4c:	9a000417 	ldw	r8,16(r19)
    8d50:	100d883a 	mov	r6,r2
    8d54:	d8800017 	ldw	r2,0(sp)
    8d58:	4251c83a 	sub	r8,r8,r9
    8d5c:	4012917a 	slli	r9,r8,5
    8d60:	da000117 	ldw	r8,4(sp)
    8d64:	4091c83a 	sub	r8,r8,r2
    8d68:	4251883a 	add	r8,r8,r9
    8d6c:	02000d0e 	bge	zero,r8,8da4 <__ratio+0x98>
    8d70:	4010953a 	slli	r8,r8,20
    8d74:	4421883a 	add	r16,r8,r16
    8d78:	9009883a 	mov	r4,r18
    8d7c:	800b883a 	mov	r5,r16
    8d80:	180f883a 	mov	r7,r3
    8d84:	000cc640 	call	cc64 <__divdf3>
    8d88:	dfc00617 	ldw	ra,24(sp)
    8d8c:	dcc00517 	ldw	r19,20(sp)
    8d90:	dc800417 	ldw	r18,16(sp)
    8d94:	dc400317 	ldw	r17,12(sp)
    8d98:	dc000217 	ldw	r16,8(sp)
    8d9c:	dec00704 	addi	sp,sp,28
    8da0:	f800283a 	ret
    8da4:	4010953a 	slli	r8,r8,20
    8da8:	1a07c83a 	sub	r3,r3,r8
    8dac:	003ff206 	br	8d78 <__alt_data_end+0xfffb3648>

00008db0 <_mprec_log10>:
    8db0:	defffe04 	addi	sp,sp,-8
    8db4:	dc000015 	stw	r16,0(sp)
    8db8:	dfc00115 	stw	ra,4(sp)
    8dbc:	008005c4 	movi	r2,23
    8dc0:	2021883a 	mov	r16,r4
    8dc4:	11000d0e 	bge	r2,r4,8dfc <_mprec_log10+0x4c>
    8dc8:	0005883a 	mov	r2,zero
    8dcc:	00cffc34 	movhi	r3,16368
    8dd0:	843fffc4 	addi	r16,r16,-1
    8dd4:	1009883a 	mov	r4,r2
    8dd8:	180b883a 	mov	r5,r3
    8ddc:	000d883a 	mov	r6,zero
    8de0:	01d00934 	movhi	r7,16420
    8de4:	000d8280 	call	d828 <__muldf3>
    8de8:	803ff91e 	bne	r16,zero,8dd0 <__alt_data_end+0xfffb36a0>
    8dec:	dfc00117 	ldw	ra,4(sp)
    8df0:	dc000017 	ldw	r16,0(sp)
    8df4:	dec00204 	addi	sp,sp,8
    8df8:	f800283a 	ret
    8dfc:	202090fa 	slli	r16,r4,3
    8e00:	00800074 	movhi	r2,1
    8e04:	10872404 	addi	r2,r2,7312
    8e08:	1421883a 	add	r16,r2,r16
    8e0c:	80800017 	ldw	r2,0(r16)
    8e10:	80c00117 	ldw	r3,4(r16)
    8e14:	dfc00117 	ldw	ra,4(sp)
    8e18:	dc000017 	ldw	r16,0(sp)
    8e1c:	dec00204 	addi	sp,sp,8
    8e20:	f800283a 	ret

00008e24 <__copybits>:
    8e24:	297fffc4 	addi	r5,r5,-1
    8e28:	280fd17a 	srai	r7,r5,5
    8e2c:	30c00417 	ldw	r3,16(r6)
    8e30:	30800504 	addi	r2,r6,20
    8e34:	39c00044 	addi	r7,r7,1
    8e38:	18c7883a 	add	r3,r3,r3
    8e3c:	39cf883a 	add	r7,r7,r7
    8e40:	18c7883a 	add	r3,r3,r3
    8e44:	39cf883a 	add	r7,r7,r7
    8e48:	10c7883a 	add	r3,r2,r3
    8e4c:	21cf883a 	add	r7,r4,r7
    8e50:	10c00d2e 	bgeu	r2,r3,8e88 <__copybits+0x64>
    8e54:	200b883a 	mov	r5,r4
    8e58:	12000017 	ldw	r8,0(r2)
    8e5c:	29400104 	addi	r5,r5,4
    8e60:	10800104 	addi	r2,r2,4
    8e64:	2a3fff15 	stw	r8,-4(r5)
    8e68:	10fffb36 	bltu	r2,r3,8e58 <__alt_data_end+0xfffb3728>
    8e6c:	1985c83a 	sub	r2,r3,r6
    8e70:	10bffac4 	addi	r2,r2,-21
    8e74:	1004d0ba 	srli	r2,r2,2
    8e78:	10800044 	addi	r2,r2,1
    8e7c:	1085883a 	add	r2,r2,r2
    8e80:	1085883a 	add	r2,r2,r2
    8e84:	2089883a 	add	r4,r4,r2
    8e88:	21c0032e 	bgeu	r4,r7,8e98 <__copybits+0x74>
    8e8c:	20000015 	stw	zero,0(r4)
    8e90:	21000104 	addi	r4,r4,4
    8e94:	21fffd36 	bltu	r4,r7,8e8c <__alt_data_end+0xfffb375c>
    8e98:	f800283a 	ret

00008e9c <__any_on>:
    8e9c:	20c00417 	ldw	r3,16(r4)
    8ea0:	2805d17a 	srai	r2,r5,5
    8ea4:	21000504 	addi	r4,r4,20
    8ea8:	18800d0e 	bge	r3,r2,8ee0 <__any_on+0x44>
    8eac:	18c7883a 	add	r3,r3,r3
    8eb0:	18c7883a 	add	r3,r3,r3
    8eb4:	20c7883a 	add	r3,r4,r3
    8eb8:	20c0192e 	bgeu	r4,r3,8f20 <__any_on+0x84>
    8ebc:	18bfff17 	ldw	r2,-4(r3)
    8ec0:	18ffff04 	addi	r3,r3,-4
    8ec4:	1000041e 	bne	r2,zero,8ed8 <__any_on+0x3c>
    8ec8:	20c0142e 	bgeu	r4,r3,8f1c <__any_on+0x80>
    8ecc:	18ffff04 	addi	r3,r3,-4
    8ed0:	19400017 	ldw	r5,0(r3)
    8ed4:	283ffc26 	beq	r5,zero,8ec8 <__alt_data_end+0xfffb3798>
    8ed8:	00800044 	movi	r2,1
    8edc:	f800283a 	ret
    8ee0:	10c00a0e 	bge	r2,r3,8f0c <__any_on+0x70>
    8ee4:	1085883a 	add	r2,r2,r2
    8ee8:	1085883a 	add	r2,r2,r2
    8eec:	294007cc 	andi	r5,r5,31
    8ef0:	2087883a 	add	r3,r4,r2
    8ef4:	283ff026 	beq	r5,zero,8eb8 <__alt_data_end+0xfffb3788>
    8ef8:	19800017 	ldw	r6,0(r3)
    8efc:	3144d83a 	srl	r2,r6,r5
    8f00:	114a983a 	sll	r5,r2,r5
    8f04:	29bff41e 	bne	r5,r6,8ed8 <__alt_data_end+0xfffb37a8>
    8f08:	003feb06 	br	8eb8 <__alt_data_end+0xfffb3788>
    8f0c:	1085883a 	add	r2,r2,r2
    8f10:	1085883a 	add	r2,r2,r2
    8f14:	2087883a 	add	r3,r4,r2
    8f18:	003fe706 	br	8eb8 <__alt_data_end+0xfffb3788>
    8f1c:	f800283a 	ret
    8f20:	0005883a 	mov	r2,zero
    8f24:	f800283a 	ret

00008f28 <_realloc_r>:
    8f28:	defff604 	addi	sp,sp,-40
    8f2c:	dcc00315 	stw	r19,12(sp)
    8f30:	dc400115 	stw	r17,4(sp)
    8f34:	dfc00915 	stw	ra,36(sp)
    8f38:	df000815 	stw	fp,32(sp)
    8f3c:	ddc00715 	stw	r23,28(sp)
    8f40:	dd800615 	stw	r22,24(sp)
    8f44:	dd400515 	stw	r21,20(sp)
    8f48:	dd000415 	stw	r20,16(sp)
    8f4c:	dc800215 	stw	r18,8(sp)
    8f50:	dc000015 	stw	r16,0(sp)
    8f54:	2827883a 	mov	r19,r5
    8f58:	3023883a 	mov	r17,r6
    8f5c:	2800bf26 	beq	r5,zero,925c <_realloc_r+0x334>
    8f60:	2025883a 	mov	r18,r4
    8f64:	000f1a40 	call	f1a4 <__malloc_lock>
    8f68:	98ffff17 	ldw	r3,-4(r19)
    8f6c:	01bfff04 	movi	r6,-4
    8f70:	890002c4 	addi	r4,r17,11
    8f74:	01c00584 	movi	r7,22
    8f78:	9d7ffe04 	addi	r21,r19,-8
    8f7c:	19a0703a 	and	r16,r3,r6
    8f80:	39003f2e 	bgeu	r7,r4,9080 <_realloc_r+0x158>
    8f84:	053ffe04 	movi	r20,-8
    8f88:	2528703a 	and	r20,r4,r20
    8f8c:	a00f883a 	mov	r7,r20
    8f90:	a0008216 	blt	r20,zero,919c <_realloc_r+0x274>
    8f94:	a4408136 	bltu	r20,r17,919c <_realloc_r+0x274>
    8f98:	81c03c0e 	bge	r16,r7,908c <_realloc_r+0x164>
    8f9c:	07000074 	movhi	fp,1
    8fa0:	e708d204 	addi	fp,fp,9032
    8fa4:	e1000217 	ldw	r4,8(fp)
    8fa8:	ac05883a 	add	r2,r21,r16
    8fac:	2080bf26 	beq	r4,r2,92ac <_realloc_r+0x384>
    8fb0:	11000117 	ldw	r4,4(r2)
    8fb4:	023fff84 	movi	r8,-2
    8fb8:	2210703a 	and	r8,r4,r8
    8fbc:	1211883a 	add	r8,r2,r8
    8fc0:	41400117 	ldw	r5,4(r8)
    8fc4:	2940004c 	andi	r5,r5,1
    8fc8:	28004a1e 	bne	r5,zero,90f4 <_realloc_r+0x1cc>
    8fcc:	017fff04 	movi	r5,-4
    8fd0:	2148703a 	and	r4,r4,r5
    8fd4:	2409883a 	add	r4,r4,r16
    8fd8:	21c0ad0e 	bge	r4,r7,9290 <_realloc_r+0x368>
    8fdc:	18c0004c 	andi	r3,r3,1
    8fe0:	18007f1e 	bne	r3,zero,91e0 <_realloc_r+0x2b8>
    8fe4:	9dfffe17 	ldw	r23,-8(r19)
    8fe8:	adefc83a 	sub	r23,r21,r23
    8fec:	bd800117 	ldw	r22,4(r23)
    8ff0:	b14a703a 	and	r5,r22,r5
    8ff4:	216d883a 	add	r22,r4,r5
    8ff8:	b1c04516 	blt	r22,r7,9110 <_realloc_r+0x1e8>
    8ffc:	10c00317 	ldw	r3,12(r2)
    9000:	10800217 	ldw	r2,8(r2)
    9004:	81bfff04 	addi	r6,r16,-4
    9008:	bc400204 	addi	r17,r23,8
    900c:	10c00315 	stw	r3,12(r2)
    9010:	18800215 	stw	r2,8(r3)
    9014:	b9400217 	ldw	r5,8(r23)
    9018:	b8c00317 	ldw	r3,12(r23)
    901c:	00800904 	movi	r2,36
    9020:	28c00315 	stw	r3,12(r5)
    9024:	19400215 	stw	r5,8(r3)
    9028:	1180ef36 	bltu	r2,r6,93e8 <_realloc_r+0x4c0>
    902c:	008004c4 	movi	r2,19
    9030:	1180da2e 	bgeu	r2,r6,939c <_realloc_r+0x474>
    9034:	98800017 	ldw	r2,0(r19)
    9038:	b8800215 	stw	r2,8(r23)
    903c:	98800117 	ldw	r2,4(r19)
    9040:	b8800315 	stw	r2,12(r23)
    9044:	008006c4 	movi	r2,27
    9048:	1180fc2e 	bgeu	r2,r6,943c <_realloc_r+0x514>
    904c:	98800217 	ldw	r2,8(r19)
    9050:	b8800415 	stw	r2,16(r23)
    9054:	98800317 	ldw	r2,12(r19)
    9058:	b8800515 	stw	r2,20(r23)
    905c:	00800904 	movi	r2,36
    9060:	3080421e 	bne	r6,r2,916c <_realloc_r+0x244>
    9064:	98800417 	ldw	r2,16(r19)
    9068:	9cc00604 	addi	r19,r19,24
    906c:	b8c00804 	addi	r3,r23,32
    9070:	b8800615 	stw	r2,24(r23)
    9074:	98bfff17 	ldw	r2,-4(r19)
    9078:	b8800715 	stw	r2,28(r23)
    907c:	00003d06 	br	9174 <_realloc_r+0x24c>
    9080:	01c00404 	movi	r7,16
    9084:	3829883a 	mov	r20,r7
    9088:	003fc206 	br	8f94 <__alt_data_end+0xfffb3864>
    908c:	9823883a 	mov	r17,r19
    9090:	850fc83a 	sub	r7,r16,r20
    9094:	008003c4 	movi	r2,15
    9098:	18c0004c 	andi	r3,r3,1
    909c:	11c04336 	bltu	r2,r7,91ac <_realloc_r+0x284>
    90a0:	1c06b03a 	or	r3,r3,r16
    90a4:	a8c00115 	stw	r3,4(r21)
    90a8:	ac21883a 	add	r16,r21,r16
    90ac:	80c00117 	ldw	r3,4(r16)
    90b0:	18c00054 	ori	r3,r3,1
    90b4:	80c00115 	stw	r3,4(r16)
    90b8:	9009883a 	mov	r4,r18
    90bc:	000f1c40 	call	f1c4 <__malloc_unlock>
    90c0:	8805883a 	mov	r2,r17
    90c4:	dfc00917 	ldw	ra,36(sp)
    90c8:	df000817 	ldw	fp,32(sp)
    90cc:	ddc00717 	ldw	r23,28(sp)
    90d0:	dd800617 	ldw	r22,24(sp)
    90d4:	dd400517 	ldw	r21,20(sp)
    90d8:	dd000417 	ldw	r20,16(sp)
    90dc:	dcc00317 	ldw	r19,12(sp)
    90e0:	dc800217 	ldw	r18,8(sp)
    90e4:	dc400117 	ldw	r17,4(sp)
    90e8:	dc000017 	ldw	r16,0(sp)
    90ec:	dec00a04 	addi	sp,sp,40
    90f0:	f800283a 	ret
    90f4:	18c0004c 	andi	r3,r3,1
    90f8:	1800391e 	bne	r3,zero,91e0 <_realloc_r+0x2b8>
    90fc:	9dfffe17 	ldw	r23,-8(r19)
    9100:	00bfff04 	movi	r2,-4
    9104:	adefc83a 	sub	r23,r21,r23
    9108:	b9400117 	ldw	r5,4(r23)
    910c:	288a703a 	and	r5,r5,r2
    9110:	2c2d883a 	add	r22,r5,r16
    9114:	b1c03216 	blt	r22,r7,91e0 <_realloc_r+0x2b8>
    9118:	b8800317 	ldw	r2,12(r23)
    911c:	b8c00217 	ldw	r3,8(r23)
    9120:	81bfff04 	addi	r6,r16,-4
    9124:	01000904 	movi	r4,36
    9128:	18800315 	stw	r2,12(r3)
    912c:	10c00215 	stw	r3,8(r2)
    9130:	bc400204 	addi	r17,r23,8
    9134:	2180ac36 	bltu	r4,r6,93e8 <_realloc_r+0x4c0>
    9138:	008004c4 	movi	r2,19
    913c:	1180972e 	bgeu	r2,r6,939c <_realloc_r+0x474>
    9140:	98800017 	ldw	r2,0(r19)
    9144:	b8800215 	stw	r2,8(r23)
    9148:	98800117 	ldw	r2,4(r19)
    914c:	b8800315 	stw	r2,12(r23)
    9150:	008006c4 	movi	r2,27
    9154:	1180b92e 	bgeu	r2,r6,943c <_realloc_r+0x514>
    9158:	98800217 	ldw	r2,8(r19)
    915c:	b8800415 	stw	r2,16(r23)
    9160:	98800317 	ldw	r2,12(r19)
    9164:	b8800515 	stw	r2,20(r23)
    9168:	313fbe26 	beq	r6,r4,9064 <__alt_data_end+0xfffb3934>
    916c:	b8c00604 	addi	r3,r23,24
    9170:	9cc00404 	addi	r19,r19,16
    9174:	98800017 	ldw	r2,0(r19)
    9178:	b021883a 	mov	r16,r22
    917c:	b82b883a 	mov	r21,r23
    9180:	18800015 	stw	r2,0(r3)
    9184:	98800117 	ldw	r2,4(r19)
    9188:	18800115 	stw	r2,4(r3)
    918c:	98800217 	ldw	r2,8(r19)
    9190:	18800215 	stw	r2,8(r3)
    9194:	b8c00117 	ldw	r3,4(r23)
    9198:	003fbd06 	br	9090 <__alt_data_end+0xfffb3960>
    919c:	00800304 	movi	r2,12
    91a0:	90800015 	stw	r2,0(r18)
    91a4:	0005883a 	mov	r2,zero
    91a8:	003fc606 	br	90c4 <__alt_data_end+0xfffb3994>
    91ac:	1d06b03a 	or	r3,r3,r20
    91b0:	ad0b883a 	add	r5,r21,r20
    91b4:	a8c00115 	stw	r3,4(r21)
    91b8:	38800054 	ori	r2,r7,1
    91bc:	28800115 	stw	r2,4(r5)
    91c0:	29cf883a 	add	r7,r5,r7
    91c4:	38800117 	ldw	r2,4(r7)
    91c8:	9009883a 	mov	r4,r18
    91cc:	29400204 	addi	r5,r5,8
    91d0:	10800054 	ori	r2,r2,1
    91d4:	38800115 	stw	r2,4(r7)
    91d8:	00066fc0 	call	66fc <_free_r>
    91dc:	003fb606 	br	90b8 <__alt_data_end+0xfffb3988>
    91e0:	880b883a 	mov	r5,r17
    91e4:	9009883a 	mov	r4,r18
    91e8:	00072980 	call	7298 <_malloc_r>
    91ec:	1023883a 	mov	r17,r2
    91f0:	1000aa26 	beq	r2,zero,949c <_realloc_r+0x574>
    91f4:	98ffff17 	ldw	r3,-4(r19)
    91f8:	113ffe04 	addi	r4,r2,-8
    91fc:	00bfff84 	movi	r2,-2
    9200:	1884703a 	and	r2,r3,r2
    9204:	a885883a 	add	r2,r21,r2
    9208:	20808626 	beq	r4,r2,9424 <_realloc_r+0x4fc>
    920c:	81bfff04 	addi	r6,r16,-4
    9210:	00800904 	movi	r2,36
    9214:	11807036 	bltu	r2,r6,93d8 <_realloc_r+0x4b0>
    9218:	00c004c4 	movi	r3,19
    921c:	19805636 	bltu	r3,r6,9378 <_realloc_r+0x450>
    9220:	8805883a 	mov	r2,r17
    9224:	9807883a 	mov	r3,r19
    9228:	19000017 	ldw	r4,0(r3)
    922c:	11000015 	stw	r4,0(r2)
    9230:	19000117 	ldw	r4,4(r3)
    9234:	11000115 	stw	r4,4(r2)
    9238:	18c00217 	ldw	r3,8(r3)
    923c:	10c00215 	stw	r3,8(r2)
    9240:	980b883a 	mov	r5,r19
    9244:	9009883a 	mov	r4,r18
    9248:	00066fc0 	call	66fc <_free_r>
    924c:	9009883a 	mov	r4,r18
    9250:	000f1c40 	call	f1c4 <__malloc_unlock>
    9254:	8805883a 	mov	r2,r17
    9258:	003f9a06 	br	90c4 <__alt_data_end+0xfffb3994>
    925c:	300b883a 	mov	r5,r6
    9260:	dfc00917 	ldw	ra,36(sp)
    9264:	df000817 	ldw	fp,32(sp)
    9268:	ddc00717 	ldw	r23,28(sp)
    926c:	dd800617 	ldw	r22,24(sp)
    9270:	dd400517 	ldw	r21,20(sp)
    9274:	dd000417 	ldw	r20,16(sp)
    9278:	dcc00317 	ldw	r19,12(sp)
    927c:	dc800217 	ldw	r18,8(sp)
    9280:	dc400117 	ldw	r17,4(sp)
    9284:	dc000017 	ldw	r16,0(sp)
    9288:	dec00a04 	addi	sp,sp,40
    928c:	00072981 	jmpi	7298 <_malloc_r>
    9290:	11400317 	ldw	r5,12(r2)
    9294:	10800217 	ldw	r2,8(r2)
    9298:	9823883a 	mov	r17,r19
    929c:	2021883a 	mov	r16,r4
    92a0:	11400315 	stw	r5,12(r2)
    92a4:	28800215 	stw	r2,8(r5)
    92a8:	003f7906 	br	9090 <__alt_data_end+0xfffb3960>
    92ac:	21000117 	ldw	r4,4(r4)
    92b0:	00bfff04 	movi	r2,-4
    92b4:	a1800404 	addi	r6,r20,16
    92b8:	2088703a 	and	r4,r4,r2
    92bc:	2409883a 	add	r4,r4,r16
    92c0:	2180380e 	bge	r4,r6,93a4 <_realloc_r+0x47c>
    92c4:	18c0004c 	andi	r3,r3,1
    92c8:	183fc51e 	bne	r3,zero,91e0 <__alt_data_end+0xfffb3ab0>
    92cc:	9dfffe17 	ldw	r23,-8(r19)
    92d0:	adefc83a 	sub	r23,r21,r23
    92d4:	b9400117 	ldw	r5,4(r23)
    92d8:	288a703a 	and	r5,r5,r2
    92dc:	216d883a 	add	r22,r4,r5
    92e0:	b1bf8b16 	blt	r22,r6,9110 <__alt_data_end+0xfffb39e0>
    92e4:	b8800317 	ldw	r2,12(r23)
    92e8:	b8c00217 	ldw	r3,8(r23)
    92ec:	81bfff04 	addi	r6,r16,-4
    92f0:	01000904 	movi	r4,36
    92f4:	18800315 	stw	r2,12(r3)
    92f8:	10c00215 	stw	r3,8(r2)
    92fc:	bc400204 	addi	r17,r23,8
    9300:	21805a36 	bltu	r4,r6,946c <_realloc_r+0x544>
    9304:	008004c4 	movi	r2,19
    9308:	1180562e 	bgeu	r2,r6,9464 <_realloc_r+0x53c>
    930c:	98800017 	ldw	r2,0(r19)
    9310:	b8800215 	stw	r2,8(r23)
    9314:	98800117 	ldw	r2,4(r19)
    9318:	b8800315 	stw	r2,12(r23)
    931c:	008006c4 	movi	r2,27
    9320:	11805636 	bltu	r2,r6,947c <_realloc_r+0x554>
    9324:	b8800404 	addi	r2,r23,16
    9328:	9cc00204 	addi	r19,r19,8
    932c:	98c00017 	ldw	r3,0(r19)
    9330:	10c00015 	stw	r3,0(r2)
    9334:	98c00117 	ldw	r3,4(r19)
    9338:	10c00115 	stw	r3,4(r2)
    933c:	98c00217 	ldw	r3,8(r19)
    9340:	10c00215 	stw	r3,8(r2)
    9344:	bd07883a 	add	r3,r23,r20
    9348:	b505c83a 	sub	r2,r22,r20
    934c:	e0c00215 	stw	r3,8(fp)
    9350:	10800054 	ori	r2,r2,1
    9354:	18800115 	stw	r2,4(r3)
    9358:	b8800117 	ldw	r2,4(r23)
    935c:	9009883a 	mov	r4,r18
    9360:	1080004c 	andi	r2,r2,1
    9364:	a0a8b03a 	or	r20,r20,r2
    9368:	bd000115 	stw	r20,4(r23)
    936c:	000f1c40 	call	f1c4 <__malloc_unlock>
    9370:	8805883a 	mov	r2,r17
    9374:	003f5306 	br	90c4 <__alt_data_end+0xfffb3994>
    9378:	98c00017 	ldw	r3,0(r19)
    937c:	88c00015 	stw	r3,0(r17)
    9380:	98c00117 	ldw	r3,4(r19)
    9384:	88c00115 	stw	r3,4(r17)
    9388:	00c006c4 	movi	r3,27
    938c:	19801d36 	bltu	r3,r6,9404 <_realloc_r+0x4dc>
    9390:	88800204 	addi	r2,r17,8
    9394:	98c00204 	addi	r3,r19,8
    9398:	003fa306 	br	9228 <__alt_data_end+0xfffb3af8>
    939c:	8807883a 	mov	r3,r17
    93a0:	003f7406 	br	9174 <__alt_data_end+0xfffb3a44>
    93a4:	ad2b883a 	add	r21,r21,r20
    93a8:	2505c83a 	sub	r2,r4,r20
    93ac:	e5400215 	stw	r21,8(fp)
    93b0:	10800054 	ori	r2,r2,1
    93b4:	a8800115 	stw	r2,4(r21)
    93b8:	98bfff17 	ldw	r2,-4(r19)
    93bc:	9009883a 	mov	r4,r18
    93c0:	1080004c 	andi	r2,r2,1
    93c4:	a0a8b03a 	or	r20,r20,r2
    93c8:	9d3fff15 	stw	r20,-4(r19)
    93cc:	000f1c40 	call	f1c4 <__malloc_unlock>
    93d0:	9805883a 	mov	r2,r19
    93d4:	003f3b06 	br	90c4 <__alt_data_end+0xfffb3994>
    93d8:	8809883a 	mov	r4,r17
    93dc:	980b883a 	mov	r5,r19
    93e0:	0007c600 	call	7c60 <memmove>
    93e4:	003f9606 	br	9240 <__alt_data_end+0xfffb3b10>
    93e8:	8809883a 	mov	r4,r17
    93ec:	980b883a 	mov	r5,r19
    93f0:	0007c600 	call	7c60 <memmove>
    93f4:	b8c00117 	ldw	r3,4(r23)
    93f8:	b021883a 	mov	r16,r22
    93fc:	b82b883a 	mov	r21,r23
    9400:	003f2306 	br	9090 <__alt_data_end+0xfffb3960>
    9404:	98c00217 	ldw	r3,8(r19)
    9408:	88c00215 	stw	r3,8(r17)
    940c:	98c00317 	ldw	r3,12(r19)
    9410:	88c00315 	stw	r3,12(r17)
    9414:	30800c26 	beq	r6,r2,9448 <_realloc_r+0x520>
    9418:	88800404 	addi	r2,r17,16
    941c:	98c00404 	addi	r3,r19,16
    9420:	003f8106 	br	9228 <__alt_data_end+0xfffb3af8>
    9424:	893fff17 	ldw	r4,-4(r17)
    9428:	00bfff04 	movi	r2,-4
    942c:	9823883a 	mov	r17,r19
    9430:	2084703a 	and	r2,r4,r2
    9434:	80a1883a 	add	r16,r16,r2
    9438:	003f1506 	br	9090 <__alt_data_end+0xfffb3960>
    943c:	b8c00404 	addi	r3,r23,16
    9440:	9cc00204 	addi	r19,r19,8
    9444:	003f4b06 	br	9174 <__alt_data_end+0xfffb3a44>
    9448:	99000417 	ldw	r4,16(r19)
    944c:	88800604 	addi	r2,r17,24
    9450:	98c00604 	addi	r3,r19,24
    9454:	89000415 	stw	r4,16(r17)
    9458:	99000517 	ldw	r4,20(r19)
    945c:	89000515 	stw	r4,20(r17)
    9460:	003f7106 	br	9228 <__alt_data_end+0xfffb3af8>
    9464:	8805883a 	mov	r2,r17
    9468:	003fb006 	br	932c <__alt_data_end+0xfffb3bfc>
    946c:	8809883a 	mov	r4,r17
    9470:	980b883a 	mov	r5,r19
    9474:	0007c600 	call	7c60 <memmove>
    9478:	003fb206 	br	9344 <__alt_data_end+0xfffb3c14>
    947c:	98800217 	ldw	r2,8(r19)
    9480:	b8800415 	stw	r2,16(r23)
    9484:	98800317 	ldw	r2,12(r19)
    9488:	b8800515 	stw	r2,20(r23)
    948c:	31000726 	beq	r6,r4,94ac <_realloc_r+0x584>
    9490:	b8800604 	addi	r2,r23,24
    9494:	9cc00404 	addi	r19,r19,16
    9498:	003fa406 	br	932c <__alt_data_end+0xfffb3bfc>
    949c:	9009883a 	mov	r4,r18
    94a0:	000f1c40 	call	f1c4 <__malloc_unlock>
    94a4:	0005883a 	mov	r2,zero
    94a8:	003f0606 	br	90c4 <__alt_data_end+0xfffb3994>
    94ac:	98c00417 	ldw	r3,16(r19)
    94b0:	9cc00604 	addi	r19,r19,24
    94b4:	b8800804 	addi	r2,r23,32
    94b8:	b8c00615 	stw	r3,24(r23)
    94bc:	98ffff17 	ldw	r3,-4(r19)
    94c0:	b8c00715 	stw	r3,28(r23)
    94c4:	003f9906 	br	932c <__alt_data_end+0xfffb3bfc>

000094c8 <__fpclassifyd>:
    94c8:	00a00034 	movhi	r2,32768
    94cc:	10bfffc4 	addi	r2,r2,-1
    94d0:	2884703a 	and	r2,r5,r2
    94d4:	10000726 	beq	r2,zero,94f4 <__fpclassifyd+0x2c>
    94d8:	00fffc34 	movhi	r3,65520
    94dc:	019ff834 	movhi	r6,32736
    94e0:	28c7883a 	add	r3,r5,r3
    94e4:	31bfffc4 	addi	r6,r6,-1
    94e8:	30c00536 	bltu	r6,r3,9500 <__fpclassifyd+0x38>
    94ec:	00800104 	movi	r2,4
    94f0:	f800283a 	ret
    94f4:	2000021e 	bne	r4,zero,9500 <__fpclassifyd+0x38>
    94f8:	00800084 	movi	r2,2
    94fc:	f800283a 	ret
    9500:	00dffc34 	movhi	r3,32752
    9504:	019ff834 	movhi	r6,32736
    9508:	28cb883a 	add	r5,r5,r3
    950c:	31bfffc4 	addi	r6,r6,-1
    9510:	317ff62e 	bgeu	r6,r5,94ec <__alt_data_end+0xfffb3dbc>
    9514:	01400434 	movhi	r5,16
    9518:	297fffc4 	addi	r5,r5,-1
    951c:	28800236 	bltu	r5,r2,9528 <__fpclassifyd+0x60>
    9520:	008000c4 	movi	r2,3
    9524:	f800283a 	ret
    9528:	10c00226 	beq	r2,r3,9534 <__fpclassifyd+0x6c>
    952c:	0005883a 	mov	r2,zero
    9530:	f800283a 	ret
    9534:	2005003a 	cmpeq	r2,r4,zero
    9538:	f800283a 	ret

0000953c <_sbrk_r>:
    953c:	defffd04 	addi	sp,sp,-12
    9540:	dc000015 	stw	r16,0(sp)
    9544:	04000074 	movhi	r16,1
    9548:	dc400115 	stw	r17,4(sp)
    954c:	84152e04 	addi	r16,r16,21688
    9550:	2023883a 	mov	r17,r4
    9554:	2809883a 	mov	r4,r5
    9558:	dfc00215 	stw	ra,8(sp)
    955c:	80000015 	stw	zero,0(r16)
    9560:	000f3b80 	call	f3b8 <sbrk>
    9564:	00ffffc4 	movi	r3,-1
    9568:	10c00526 	beq	r2,r3,9580 <_sbrk_r+0x44>
    956c:	dfc00217 	ldw	ra,8(sp)
    9570:	dc400117 	ldw	r17,4(sp)
    9574:	dc000017 	ldw	r16,0(sp)
    9578:	dec00304 	addi	sp,sp,12
    957c:	f800283a 	ret
    9580:	80c00017 	ldw	r3,0(r16)
    9584:	183ff926 	beq	r3,zero,956c <__alt_data_end+0xfffb3e3c>
    9588:	88c00015 	stw	r3,0(r17)
    958c:	003ff706 	br	956c <__alt_data_end+0xfffb3e3c>

00009590 <__sread>:
    9590:	defffe04 	addi	sp,sp,-8
    9594:	dc000015 	stw	r16,0(sp)
    9598:	2821883a 	mov	r16,r5
    959c:	2940038f 	ldh	r5,14(r5)
    95a0:	dfc00115 	stw	ra,4(sp)
    95a4:	000b24c0 	call	b24c <_read_r>
    95a8:	10000716 	blt	r2,zero,95c8 <__sread+0x38>
    95ac:	80c01417 	ldw	r3,80(r16)
    95b0:	1887883a 	add	r3,r3,r2
    95b4:	80c01415 	stw	r3,80(r16)
    95b8:	dfc00117 	ldw	ra,4(sp)
    95bc:	dc000017 	ldw	r16,0(sp)
    95c0:	dec00204 	addi	sp,sp,8
    95c4:	f800283a 	ret
    95c8:	80c0030b 	ldhu	r3,12(r16)
    95cc:	18fbffcc 	andi	r3,r3,61439
    95d0:	80c0030d 	sth	r3,12(r16)
    95d4:	dfc00117 	ldw	ra,4(sp)
    95d8:	dc000017 	ldw	r16,0(sp)
    95dc:	dec00204 	addi	sp,sp,8
    95e0:	f800283a 	ret

000095e4 <__seofread>:
    95e4:	0005883a 	mov	r2,zero
    95e8:	f800283a 	ret

000095ec <__swrite>:
    95ec:	2880030b 	ldhu	r2,12(r5)
    95f0:	defffb04 	addi	sp,sp,-20
    95f4:	dcc00315 	stw	r19,12(sp)
    95f8:	dc800215 	stw	r18,8(sp)
    95fc:	dc400115 	stw	r17,4(sp)
    9600:	dc000015 	stw	r16,0(sp)
    9604:	dfc00415 	stw	ra,16(sp)
    9608:	10c0400c 	andi	r3,r2,256
    960c:	2821883a 	mov	r16,r5
    9610:	2027883a 	mov	r19,r4
    9614:	3025883a 	mov	r18,r6
    9618:	3823883a 	mov	r17,r7
    961c:	18000526 	beq	r3,zero,9634 <__swrite+0x48>
    9620:	2940038f 	ldh	r5,14(r5)
    9624:	000d883a 	mov	r6,zero
    9628:	01c00084 	movi	r7,2
    962c:	000b1f00 	call	b1f0 <_lseek_r>
    9630:	8080030b 	ldhu	r2,12(r16)
    9634:	8140038f 	ldh	r5,14(r16)
    9638:	10bbffcc 	andi	r2,r2,61439
    963c:	9809883a 	mov	r4,r19
    9640:	900d883a 	mov	r6,r18
    9644:	880f883a 	mov	r7,r17
    9648:	8080030d 	sth	r2,12(r16)
    964c:	dfc00417 	ldw	ra,16(sp)
    9650:	dcc00317 	ldw	r19,12(sp)
    9654:	dc800217 	ldw	r18,8(sp)
    9658:	dc400117 	ldw	r17,4(sp)
    965c:	dc000017 	ldw	r16,0(sp)
    9660:	dec00504 	addi	sp,sp,20
    9664:	000accc1 	jmpi	accc <_write_r>

00009668 <__sseek>:
    9668:	defffe04 	addi	sp,sp,-8
    966c:	dc000015 	stw	r16,0(sp)
    9670:	2821883a 	mov	r16,r5
    9674:	2940038f 	ldh	r5,14(r5)
    9678:	dfc00115 	stw	ra,4(sp)
    967c:	000b1f00 	call	b1f0 <_lseek_r>
    9680:	00ffffc4 	movi	r3,-1
    9684:	10c00826 	beq	r2,r3,96a8 <__sseek+0x40>
    9688:	80c0030b 	ldhu	r3,12(r16)
    968c:	80801415 	stw	r2,80(r16)
    9690:	18c40014 	ori	r3,r3,4096
    9694:	80c0030d 	sth	r3,12(r16)
    9698:	dfc00117 	ldw	ra,4(sp)
    969c:	dc000017 	ldw	r16,0(sp)
    96a0:	dec00204 	addi	sp,sp,8
    96a4:	f800283a 	ret
    96a8:	80c0030b 	ldhu	r3,12(r16)
    96ac:	18fbffcc 	andi	r3,r3,61439
    96b0:	80c0030d 	sth	r3,12(r16)
    96b4:	dfc00117 	ldw	ra,4(sp)
    96b8:	dc000017 	ldw	r16,0(sp)
    96bc:	dec00204 	addi	sp,sp,8
    96c0:	f800283a 	ret

000096c4 <__sclose>:
    96c4:	2940038f 	ldh	r5,14(r5)
    96c8:	000ad281 	jmpi	ad28 <_close_r>

000096cc <strcmp>:
    96cc:	2144b03a 	or	r2,r4,r5
    96d0:	108000cc 	andi	r2,r2,3
    96d4:	1000171e 	bne	r2,zero,9734 <strcmp+0x68>
    96d8:	20800017 	ldw	r2,0(r4)
    96dc:	28c00017 	ldw	r3,0(r5)
    96e0:	10c0141e 	bne	r2,r3,9734 <strcmp+0x68>
    96e4:	027fbff4 	movhi	r9,65279
    96e8:	4a7fbfc4 	addi	r9,r9,-257
    96ec:	0086303a 	nor	r3,zero,r2
    96f0:	02202074 	movhi	r8,32897
    96f4:	1245883a 	add	r2,r2,r9
    96f8:	42202004 	addi	r8,r8,-32640
    96fc:	10c4703a 	and	r2,r2,r3
    9700:	1204703a 	and	r2,r2,r8
    9704:	10000226 	beq	r2,zero,9710 <strcmp+0x44>
    9708:	00001706 	br	9768 <strcmp+0x9c>
    970c:	1000161e 	bne	r2,zero,9768 <strcmp+0x9c>
    9710:	21000104 	addi	r4,r4,4
    9714:	20c00017 	ldw	r3,0(r4)
    9718:	29400104 	addi	r5,r5,4
    971c:	29800017 	ldw	r6,0(r5)
    9720:	1a4f883a 	add	r7,r3,r9
    9724:	00c4303a 	nor	r2,zero,r3
    9728:	3884703a 	and	r2,r7,r2
    972c:	1204703a 	and	r2,r2,r8
    9730:	19bff626 	beq	r3,r6,970c <__alt_data_end+0xfffb3fdc>
    9734:	20800007 	ldb	r2,0(r4)
    9738:	1000051e 	bne	r2,zero,9750 <strcmp+0x84>
    973c:	00000606 	br	9758 <strcmp+0x8c>
    9740:	21000044 	addi	r4,r4,1
    9744:	20800007 	ldb	r2,0(r4)
    9748:	29400044 	addi	r5,r5,1
    974c:	10000226 	beq	r2,zero,9758 <strcmp+0x8c>
    9750:	28c00007 	ldb	r3,0(r5)
    9754:	10fffa26 	beq	r2,r3,9740 <__alt_data_end+0xfffb4010>
    9758:	20800003 	ldbu	r2,0(r4)
    975c:	28c00003 	ldbu	r3,0(r5)
    9760:	10c5c83a 	sub	r2,r2,r3
    9764:	f800283a 	ret
    9768:	0005883a 	mov	r2,zero
    976c:	f800283a 	ret

00009770 <__sprint_r.part.0>:
    9770:	28801917 	ldw	r2,100(r5)
    9774:	defff604 	addi	sp,sp,-40
    9778:	dd400515 	stw	r21,20(sp)
    977c:	dcc00315 	stw	r19,12(sp)
    9780:	dfc00915 	stw	ra,36(sp)
    9784:	df000815 	stw	fp,32(sp)
    9788:	ddc00715 	stw	r23,28(sp)
    978c:	dd800615 	stw	r22,24(sp)
    9790:	dd000415 	stw	r20,16(sp)
    9794:	dc800215 	stw	r18,8(sp)
    9798:	dc400115 	stw	r17,4(sp)
    979c:	dc000015 	stw	r16,0(sp)
    97a0:	1088000c 	andi	r2,r2,8192
    97a4:	2827883a 	mov	r19,r5
    97a8:	302b883a 	mov	r21,r6
    97ac:	10002d26 	beq	r2,zero,9864 <__sprint_r.part.0+0xf4>
    97b0:	30800217 	ldw	r2,8(r6)
    97b4:	35800017 	ldw	r22,0(r6)
    97b8:	10002826 	beq	r2,zero,985c <__sprint_r.part.0+0xec>
    97bc:	2029883a 	mov	r20,r4
    97c0:	b5c00104 	addi	r23,r22,4
    97c4:	04bfffc4 	movi	r18,-1
    97c8:	bc400017 	ldw	r17,0(r23)
    97cc:	b4000017 	ldw	r16,0(r22)
    97d0:	0039883a 	mov	fp,zero
    97d4:	8822d0ba 	srli	r17,r17,2
    97d8:	04400316 	blt	zero,r17,97e8 <__sprint_r.part.0+0x78>
    97dc:	00001706 	br	983c <__sprint_r.part.0+0xcc>
    97e0:	84000104 	addi	r16,r16,4
    97e4:	8f001526 	beq	r17,fp,983c <__sprint_r.part.0+0xcc>
    97e8:	81400017 	ldw	r5,0(r16)
    97ec:	a009883a 	mov	r4,r20
    97f0:	980d883a 	mov	r6,r19
    97f4:	000af680 	call	af68 <_fputwc_r>
    97f8:	e7000044 	addi	fp,fp,1
    97fc:	14bff81e 	bne	r2,r18,97e0 <__alt_data_end+0xfffb40b0>
    9800:	9005883a 	mov	r2,r18
    9804:	a8000215 	stw	zero,8(r21)
    9808:	a8000115 	stw	zero,4(r21)
    980c:	dfc00917 	ldw	ra,36(sp)
    9810:	df000817 	ldw	fp,32(sp)
    9814:	ddc00717 	ldw	r23,28(sp)
    9818:	dd800617 	ldw	r22,24(sp)
    981c:	dd400517 	ldw	r21,20(sp)
    9820:	dd000417 	ldw	r20,16(sp)
    9824:	dcc00317 	ldw	r19,12(sp)
    9828:	dc800217 	ldw	r18,8(sp)
    982c:	dc400117 	ldw	r17,4(sp)
    9830:	dc000017 	ldw	r16,0(sp)
    9834:	dec00a04 	addi	sp,sp,40
    9838:	f800283a 	ret
    983c:	a8c00217 	ldw	r3,8(r21)
    9840:	8c63883a 	add	r17,r17,r17
    9844:	8c63883a 	add	r17,r17,r17
    9848:	1c45c83a 	sub	r2,r3,r17
    984c:	a8800215 	stw	r2,8(r21)
    9850:	b5800204 	addi	r22,r22,8
    9854:	bdc00204 	addi	r23,r23,8
    9858:	103fdb1e 	bne	r2,zero,97c8 <__alt_data_end+0xfffb4098>
    985c:	0005883a 	mov	r2,zero
    9860:	003fe806 	br	9804 <__alt_data_end+0xfffb40d4>
    9864:	00069ec0 	call	69ec <__sfvwrite_r>
    9868:	003fe606 	br	9804 <__alt_data_end+0xfffb40d4>

0000986c <__sprint_r>:
    986c:	30c00217 	ldw	r3,8(r6)
    9870:	18000126 	beq	r3,zero,9878 <__sprint_r+0xc>
    9874:	00097701 	jmpi	9770 <__sprint_r.part.0>
    9878:	30000115 	stw	zero,4(r6)
    987c:	0005883a 	mov	r2,zero
    9880:	f800283a 	ret

00009884 <___vfiprintf_internal_r>:
    9884:	defeca04 	addi	sp,sp,-1240
    9888:	dcc12f15 	stw	r19,1212(sp)
    988c:	dfc13515 	stw	ra,1236(sp)
    9890:	df013415 	stw	fp,1232(sp)
    9894:	ddc13315 	stw	r23,1228(sp)
    9898:	dd813215 	stw	r22,1224(sp)
    989c:	dd413115 	stw	r21,1220(sp)
    98a0:	dd013015 	stw	r20,1216(sp)
    98a4:	dc812e15 	stw	r18,1208(sp)
    98a8:	dc412d15 	stw	r17,1204(sp)
    98ac:	dc012c15 	stw	r16,1200(sp)
    98b0:	d9012115 	stw	r4,1156(sp)
    98b4:	d9412015 	stw	r5,1152(sp)
    98b8:	d9c12315 	stw	r7,1164(sp)
    98bc:	3027883a 	mov	r19,r6
    98c0:	20000226 	beq	r4,zero,98cc <___vfiprintf_internal_r+0x48>
    98c4:	20800e17 	ldw	r2,56(r4)
    98c8:	1000f726 	beq	r2,zero,9ca8 <___vfiprintf_internal_r+0x424>
    98cc:	d8812017 	ldw	r2,1152(sp)
    98d0:	10c0030b 	ldhu	r3,12(r2)
    98d4:	1908000c 	andi	r4,r3,8192
    98d8:	1805883a 	mov	r2,r3
    98dc:	2000081e 	bne	r4,zero,9900 <___vfiprintf_internal_r+0x7c>
    98e0:	d9412017 	ldw	r5,1152(sp)
    98e4:	18880014 	ori	r2,r3,8192
    98e8:	00f7ffc4 	movi	r3,-8193
    98ec:	29001917 	ldw	r4,100(r5)
    98f0:	2880030d 	sth	r2,12(r5)
    98f4:	20c8703a 	and	r4,r4,r3
    98f8:	29001915 	stw	r4,100(r5)
    98fc:	1007883a 	mov	r3,r2
    9900:	1100020c 	andi	r4,r2,8
    9904:	2000a726 	beq	r4,zero,9ba4 <___vfiprintf_internal_r+0x320>
    9908:	d9412017 	ldw	r5,1152(sp)
    990c:	29000417 	ldw	r4,16(r5)
    9910:	2000a426 	beq	r4,zero,9ba4 <___vfiprintf_internal_r+0x320>
    9914:	1080068c 	andi	r2,r2,26
    9918:	01000284 	movi	r4,10
    991c:	1100ab26 	beq	r2,r4,9bcc <___vfiprintf_internal_r+0x348>
    9920:	d9010a04 	addi	r4,sp,1064
    9924:	d94109c4 	addi	r5,sp,1063
    9928:	07000074 	movhi	fp,1
    992c:	04400074 	movhi	r17,1
    9930:	2145c83a 	sub	r2,r4,r5
    9934:	e7075a04 	addi	fp,fp,7528
    9938:	8c475604 	addi	r17,r17,7512
    993c:	d9011e15 	stw	r4,1144(sp)
    9940:	d9411f15 	stw	r5,1148(sp)
    9944:	dec11a15 	stw	sp,1128(sp)
    9948:	d8011c15 	stw	zero,1136(sp)
    994c:	d8011b15 	stw	zero,1132(sp)
    9950:	d8012715 	stw	zero,1180(sp)
    9954:	d8012515 	stw	zero,1172(sp)
    9958:	d811883a 	mov	r8,sp
    995c:	d8812815 	stw	r2,1184(sp)
    9960:	982f883a 	mov	r23,r19
    9964:	b8800007 	ldb	r2,0(r23)
    9968:	1003b026 	beq	r2,zero,a82c <___vfiprintf_internal_r+0xfa8>
    996c:	01000944 	movi	r4,37
    9970:	1103ae26 	beq	r2,r4,a82c <___vfiprintf_internal_r+0xfa8>
    9974:	b805883a 	mov	r2,r23
    9978:	00000106 	br	9980 <___vfiprintf_internal_r+0xfc>
    997c:	19000326 	beq	r3,r4,998c <___vfiprintf_internal_r+0x108>
    9980:	10800044 	addi	r2,r2,1
    9984:	10c00007 	ldb	r3,0(r2)
    9988:	183ffc1e 	bne	r3,zero,997c <__alt_data_end+0xfffb424c>
    998c:	15e1c83a 	sub	r16,r2,r23
    9990:	1029883a 	mov	r20,r2
    9994:	80001026 	beq	r16,zero,99d8 <___vfiprintf_internal_r+0x154>
    9998:	d8c11c17 	ldw	r3,1136(sp)
    999c:	d8811b17 	ldw	r2,1132(sp)
    99a0:	45c00015 	stw	r23,0(r8)
    99a4:	80c7883a 	add	r3,r16,r3
    99a8:	10800044 	addi	r2,r2,1
    99ac:	44000115 	stw	r16,4(r8)
    99b0:	d8c11c15 	stw	r3,1136(sp)
    99b4:	d8811b15 	stw	r2,1132(sp)
    99b8:	010001c4 	movi	r4,7
    99bc:	2080740e 	bge	r4,r2,9b90 <___vfiprintf_internal_r+0x30c>
    99c0:	1803a71e 	bne	r3,zero,a860 <___vfiprintf_internal_r+0xfdc>
    99c4:	d8c12517 	ldw	r3,1172(sp)
    99c8:	d8011b15 	stw	zero,1132(sp)
    99cc:	d811883a 	mov	r8,sp
    99d0:	1c07883a 	add	r3,r3,r16
    99d4:	d8c12515 	stw	r3,1172(sp)
    99d8:	a0800007 	ldb	r2,0(r20)
    99dc:	1002bf26 	beq	r2,zero,a4dc <___vfiprintf_internal_r+0xc58>
    99e0:	a5c00044 	addi	r23,r20,1
    99e4:	a1800047 	ldb	r6,1(r20)
    99e8:	d8011d85 	stb	zero,1142(sp)
    99ec:	d8012205 	stb	zero,1160(sp)
    99f0:	043fffc4 	movi	r16,-1
    99f4:	d8012415 	stw	zero,1168(sp)
    99f8:	0025883a 	mov	r18,zero
    99fc:	05001604 	movi	r20,88
    9a00:	05400244 	movi	r21,9
    9a04:	4027883a 	mov	r19,r8
    9a08:	bdc00044 	addi	r23,r23,1
    9a0c:	30bff804 	addi	r2,r6,-32
    9a10:	a0825636 	bltu	r20,r2,a36c <___vfiprintf_internal_r+0xae8>
    9a14:	100490ba 	slli	r2,r2,2
    9a18:	01000074 	movhi	r4,1
    9a1c:	21268b04 	addi	r4,r4,-26068
    9a20:	1105883a 	add	r2,r2,r4
    9a24:	10800017 	ldw	r2,0(r2)
    9a28:	1000683a 	jmp	r2
    9a2c:	0000a2fc 	xorhi	zero,zero,651
    9a30:	0000a36c 	andhi	zero,zero,653
    9a34:	0000a36c 	andhi	zero,zero,653
    9a38:	0000a360 	cmpeqi	zero,zero,653
    9a3c:	0000a36c 	andhi	zero,zero,653
    9a40:	0000a36c 	andhi	zero,zero,653
    9a44:	0000a36c 	andhi	zero,zero,653
    9a48:	0000a36c 	andhi	zero,zero,653
    9a4c:	0000a36c 	andhi	zero,zero,653
    9a50:	0000a36c 	andhi	zero,zero,653
    9a54:	0000a0ec 	andhi	zero,zero,643
    9a58:	0000a314 	movui	zero,652
    9a5c:	0000a36c 	andhi	zero,zero,653
    9a60:	00009cc0 	call	9cc <setup_keyboard+0x32c>
    9a64:	0000a110 	cmplti	zero,zero,644
    9a68:	0000a36c 	andhi	zero,zero,653
    9a6c:	00009ccc 	andi	zero,zero,627
    9a70:	00009cd8 	cmpnei	zero,zero,627
    9a74:	00009cd8 	cmpnei	zero,zero,627
    9a78:	00009cd8 	cmpnei	zero,zero,627
    9a7c:	00009cd8 	cmpnei	zero,zero,627
    9a80:	00009cd8 	cmpnei	zero,zero,627
    9a84:	00009cd8 	cmpnei	zero,zero,627
    9a88:	00009cd8 	cmpnei	zero,zero,627
    9a8c:	00009cd8 	cmpnei	zero,zero,627
    9a90:	00009cd8 	cmpnei	zero,zero,627
    9a94:	0000a36c 	andhi	zero,zero,653
    9a98:	0000a36c 	andhi	zero,zero,653
    9a9c:	0000a36c 	andhi	zero,zero,653
    9aa0:	0000a36c 	andhi	zero,zero,653
    9aa4:	0000a36c 	andhi	zero,zero,653
    9aa8:	0000a36c 	andhi	zero,zero,653
    9aac:	0000a36c 	andhi	zero,zero,653
    9ab0:	0000a36c 	andhi	zero,zero,653
    9ab4:	0000a36c 	andhi	zero,zero,653
    9ab8:	0000a36c 	andhi	zero,zero,653
    9abc:	00009d18 	cmpnei	zero,zero,628
    9ac0:	0000a36c 	andhi	zero,zero,653
    9ac4:	0000a36c 	andhi	zero,zero,653
    9ac8:	0000a36c 	andhi	zero,zero,653
    9acc:	0000a36c 	andhi	zero,zero,653
    9ad0:	0000a36c 	andhi	zero,zero,653
    9ad4:	0000a36c 	andhi	zero,zero,653
    9ad8:	0000a36c 	andhi	zero,zero,653
    9adc:	0000a36c 	andhi	zero,zero,653
    9ae0:	0000a36c 	andhi	zero,zero,653
    9ae4:	0000a36c 	andhi	zero,zero,653
    9ae8:	0000a008 	cmpgei	zero,zero,640
    9aec:	0000a36c 	andhi	zero,zero,653
    9af0:	0000a36c 	andhi	zero,zero,653
    9af4:	0000a36c 	andhi	zero,zero,653
    9af8:	0000a36c 	andhi	zero,zero,653
    9afc:	0000a36c 	andhi	zero,zero,653
    9b00:	0000a048 	cmpgei	zero,zero,641
    9b04:	0000a36c 	andhi	zero,zero,653
    9b08:	0000a36c 	andhi	zero,zero,653
    9b0c:	0000a08c 	andi	zero,zero,642
    9b10:	0000a36c 	andhi	zero,zero,653
    9b14:	0000a36c 	andhi	zero,zero,653
    9b18:	0000a36c 	andhi	zero,zero,653
    9b1c:	0000a36c 	andhi	zero,zero,653
    9b20:	0000a36c 	andhi	zero,zero,653
    9b24:	0000a36c 	andhi	zero,zero,653
    9b28:	0000a36c 	andhi	zero,zero,653
    9b2c:	0000a36c 	andhi	zero,zero,653
    9b30:	0000a36c 	andhi	zero,zero,653
    9b34:	0000a36c 	andhi	zero,zero,653
    9b38:	00009fd4 	movui	zero,639
    9b3c:	0000a324 	muli	zero,zero,652
    9b40:	0000a36c 	andhi	zero,zero,653
    9b44:	0000a36c 	andhi	zero,zero,653
    9b48:	0000a36c 	andhi	zero,zero,653
    9b4c:	0000a160 	cmpeqi	zero,zero,645
    9b50:	0000a324 	muli	zero,zero,652
    9b54:	0000a36c 	andhi	zero,zero,653
    9b58:	0000a36c 	andhi	zero,zero,653
    9b5c:	0000a078 	rdprs	zero,zero,641
    9b60:	0000a36c 	andhi	zero,zero,653
    9b64:	0000a2c4 	movi	zero,651
    9b68:	0000a24c 	andi	zero,zero,649
    9b6c:	0000a280 	call	a28 <setup_keyboard+0x388>
    9b70:	0000a16c 	andhi	zero,zero,645
    9b74:	0000a36c 	andhi	zero,zero,653
    9b78:	0000a178 	rdprs	zero,zero,645
    9b7c:	0000a36c 	andhi	zero,zero,653
    9b80:	0000a1d4 	movui	zero,647
    9b84:	0000a36c 	andhi	zero,zero,653
    9b88:	0000a36c 	andhi	zero,zero,653
    9b8c:	0000a208 	cmpgei	zero,zero,648
    9b90:	42000204 	addi	r8,r8,8
    9b94:	d8c12517 	ldw	r3,1172(sp)
    9b98:	1c07883a 	add	r3,r3,r16
    9b9c:	d8c12515 	stw	r3,1172(sp)
    9ba0:	003f8d06 	br	99d8 <__alt_data_end+0xfffb42a8>
    9ba4:	d9012117 	ldw	r4,1156(sp)
    9ba8:	d9412017 	ldw	r5,1152(sp)
    9bac:	000454c0 	call	454c <__swsetup_r>
    9bb0:	1000301e 	bne	r2,zero,9c74 <___vfiprintf_internal_r+0x3f0>
    9bb4:	d8812017 	ldw	r2,1152(sp)
    9bb8:	01000284 	movi	r4,10
    9bbc:	10c0030b 	ldhu	r3,12(r2)
    9bc0:	1805883a 	mov	r2,r3
    9bc4:	1080068c 	andi	r2,r2,26
    9bc8:	113f551e 	bne	r2,r4,9920 <__alt_data_end+0xfffb41f0>
    9bcc:	d9012017 	ldw	r4,1152(sp)
    9bd0:	2080038b 	ldhu	r2,14(r4)
    9bd4:	113fffcc 	andi	r4,r2,65535
    9bd8:	2120001c 	xori	r4,r4,32768
    9bdc:	21200004 	addi	r4,r4,-32768
    9be0:	203f4f16 	blt	r4,zero,9920 <__alt_data_end+0xfffb41f0>
    9be4:	d9412017 	ldw	r5,1152(sp)
    9be8:	d9012117 	ldw	r4,1156(sp)
    9bec:	d9c12317 	ldw	r7,1164(sp)
    9bf0:	2b001917 	ldw	r12,100(r5)
    9bf4:	2ac00717 	ldw	r11,28(r5)
    9bf8:	2a800917 	ldw	r10,36(r5)
    9bfc:	02010004 	movi	r8,1024
    9c00:	18ffff4c 	andi	r3,r3,65533
    9c04:	da0b883a 	add	r5,sp,r8
    9c08:	980d883a 	mov	r6,r19
    9c0c:	d8c1030d 	sth	r3,1036(sp)
    9c10:	db011915 	stw	r12,1124(sp)
    9c14:	d881038d 	sth	r2,1038(sp)
    9c18:	dac10715 	stw	r11,1052(sp)
    9c1c:	da810915 	stw	r10,1060(sp)
    9c20:	dec10015 	stw	sp,1024(sp)
    9c24:	dec10415 	stw	sp,1040(sp)
    9c28:	da010215 	stw	r8,1032(sp)
    9c2c:	da010515 	stw	r8,1044(sp)
    9c30:	d8010615 	stw	zero,1048(sp)
    9c34:	00098840 	call	9884 <___vfiprintf_internal_r>
    9c38:	1021883a 	mov	r16,r2
    9c3c:	10000416 	blt	r2,zero,9c50 <___vfiprintf_internal_r+0x3cc>
    9c40:	d9012117 	ldw	r4,1156(sp)
    9c44:	d9410004 	addi	r5,sp,1024
    9c48:	0005fcc0 	call	5fcc <_fflush_r>
    9c4c:	10040f1e 	bne	r2,zero,ac8c <___vfiprintf_internal_r+0x1408>
    9c50:	d881030b 	ldhu	r2,1036(sp)
    9c54:	1080100c 	andi	r2,r2,64
    9c58:	10000426 	beq	r2,zero,9c6c <___vfiprintf_internal_r+0x3e8>
    9c5c:	d8c12017 	ldw	r3,1152(sp)
    9c60:	1880030b 	ldhu	r2,12(r3)
    9c64:	10801014 	ori	r2,r2,64
    9c68:	1880030d 	sth	r2,12(r3)
    9c6c:	8005883a 	mov	r2,r16
    9c70:	00000106 	br	9c78 <___vfiprintf_internal_r+0x3f4>
    9c74:	00bfffc4 	movi	r2,-1
    9c78:	dfc13517 	ldw	ra,1236(sp)
    9c7c:	df013417 	ldw	fp,1232(sp)
    9c80:	ddc13317 	ldw	r23,1228(sp)
    9c84:	dd813217 	ldw	r22,1224(sp)
    9c88:	dd413117 	ldw	r21,1220(sp)
    9c8c:	dd013017 	ldw	r20,1216(sp)
    9c90:	dcc12f17 	ldw	r19,1212(sp)
    9c94:	dc812e17 	ldw	r18,1208(sp)
    9c98:	dc412d17 	ldw	r17,1204(sp)
    9c9c:	dc012c17 	ldw	r16,1200(sp)
    9ca0:	dec13604 	addi	sp,sp,1240
    9ca4:	f800283a 	ret
    9ca8:	00065880 	call	6588 <__sinit>
    9cac:	003f0706 	br	98cc <__alt_data_end+0xfffb419c>
    9cb0:	d8c12417 	ldw	r3,1168(sp)
    9cb4:	d8812315 	stw	r2,1164(sp)
    9cb8:	00c7c83a 	sub	r3,zero,r3
    9cbc:	d8c12415 	stw	r3,1168(sp)
    9cc0:	94800114 	ori	r18,r18,4
    9cc4:	b9800007 	ldb	r6,0(r23)
    9cc8:	003f4f06 	br	9a08 <__alt_data_end+0xfffb42d8>
    9ccc:	94802014 	ori	r18,r18,128
    9cd0:	b9800007 	ldb	r6,0(r23)
    9cd4:	003f4c06 	br	9a08 <__alt_data_end+0xfffb42d8>
    9cd8:	dc012615 	stw	r16,1176(sp)
    9cdc:	d8012415 	stw	zero,1168(sp)
    9ce0:	35bff404 	addi	r22,r6,-48
    9ce4:	0009883a 	mov	r4,zero
    9ce8:	b821883a 	mov	r16,r23
    9cec:	01400284 	movi	r5,10
    9cf0:	000c3a00 	call	c3a0 <__mulsi3>
    9cf4:	81800007 	ldb	r6,0(r16)
    9cf8:	1589883a 	add	r4,r2,r22
    9cfc:	bdc00044 	addi	r23,r23,1
    9d00:	35bff404 	addi	r22,r6,-48
    9d04:	b821883a 	mov	r16,r23
    9d08:	adbff82e 	bgeu	r21,r22,9cec <__alt_data_end+0xfffb45bc>
    9d0c:	d9012415 	stw	r4,1168(sp)
    9d10:	dc012617 	ldw	r16,1176(sp)
    9d14:	003f3d06 	br	9a0c <__alt_data_end+0xfffb42dc>
    9d18:	d8c12203 	ldbu	r3,1160(sp)
    9d1c:	94800414 	ori	r18,r18,16
    9d20:	9080080c 	andi	r2,r18,32
    9d24:	d8c11d85 	stb	r3,1142(sp)
    9d28:	9811883a 	mov	r8,r19
    9d2c:	d8c12317 	ldw	r3,1164(sp)
    9d30:	10018226 	beq	r2,zero,a33c <___vfiprintf_internal_r+0xab8>
    9d34:	d9012317 	ldw	r4,1164(sp)
    9d38:	18800117 	ldw	r2,4(r3)
    9d3c:	1cc00017 	ldw	r19,0(r3)
    9d40:	21000204 	addi	r4,r4,8
    9d44:	d9012315 	stw	r4,1164(sp)
    9d48:	102b883a 	mov	r21,r2
    9d4c:	10030016 	blt	r2,zero,a950 <___vfiprintf_internal_r+0x10cc>
    9d50:	dd811d83 	ldbu	r22,1142(sp)
    9d54:	8029883a 	mov	r20,r16
    9d58:	00800044 	movi	r2,1
    9d5c:	9d46b03a 	or	r3,r19,r21
    9d60:	80000216 	blt	r16,zero,9d6c <___vfiprintf_internal_r+0x4e8>
    9d64:	013fdfc4 	movi	r4,-129
    9d68:	9124703a 	and	r18,r18,r4
    9d6c:	1801b41e 	bne	r3,zero,a440 <___vfiprintf_internal_r+0xbbc>
    9d70:	80028126 	beq	r16,zero,a778 <___vfiprintf_internal_r+0xef4>
    9d74:	10803fcc 	andi	r2,r2,255
    9d78:	00c00044 	movi	r3,1
    9d7c:	10c1d126 	beq	r2,r3,a4c4 <___vfiprintf_internal_r+0xc40>
    9d80:	00c00084 	movi	r3,2
    9d84:	10c28626 	beq	r2,r3,a7a0 <___vfiprintf_internal_r+0xf1c>
    9d88:	d8c10a04 	addi	r3,sp,1064
    9d8c:	9808d0fa 	srli	r4,r19,3
    9d90:	a80a977a 	slli	r5,r21,29
    9d94:	a82ad0fa 	srli	r21,r21,3
    9d98:	9cc001cc 	andi	r19,r19,7
    9d9c:	98800c04 	addi	r2,r19,48
    9da0:	18ffffc4 	addi	r3,r3,-1
    9da4:	2926b03a 	or	r19,r5,r4
    9da8:	18800005 	stb	r2,0(r3)
    9dac:	9d48b03a 	or	r4,r19,r21
    9db0:	203ff61e 	bne	r4,zero,9d8c <__alt_data_end+0xfffb465c>
    9db4:	9100004c 	andi	r4,r18,1
    9db8:	d8c12215 	stw	r3,1160(sp)
    9dbc:	2002b31e 	bne	r4,zero,a88c <___vfiprintf_internal_r+0x1008>
    9dc0:	d9411e17 	ldw	r5,1144(sp)
    9dc4:	28e9c83a 	sub	r20,r5,r3
    9dc8:	a02b883a 	mov	r21,r20
    9dcc:	a400010e 	bge	r20,r16,9dd4 <___vfiprintf_internal_r+0x550>
    9dd0:	802b883a 	mov	r21,r16
    9dd4:	b5803fcc 	andi	r22,r22,255
    9dd8:	b580201c 	xori	r22,r22,128
    9ddc:	b5bfe004 	addi	r22,r22,-128
    9de0:	b0000126 	beq	r22,zero,9de8 <___vfiprintf_internal_r+0x564>
    9de4:	ad400044 	addi	r21,r21,1
    9de8:	9280008c 	andi	r10,r18,2
    9dec:	50000126 	beq	r10,zero,9df4 <___vfiprintf_internal_r+0x570>
    9df0:	ad400084 	addi	r21,r21,2
    9df4:	9580210c 	andi	r22,r18,132
    9df8:	b001751e 	bne	r22,zero,a3d0 <___vfiprintf_internal_r+0xb4c>
    9dfc:	d9012417 	ldw	r4,1168(sp)
    9e00:	2567c83a 	sub	r19,r4,r21
    9e04:	04c1720e 	bge	zero,r19,a3d0 <___vfiprintf_internal_r+0xb4c>
    9e08:	01c00404 	movi	r7,16
    9e0c:	d8c11c17 	ldw	r3,1136(sp)
    9e10:	3cc36b0e 	bge	r7,r19,abc0 <___vfiprintf_internal_r+0x133c>
    9e14:	00800074 	movhi	r2,1
    9e18:	10875a04 	addi	r2,r2,7528
    9e1c:	dc012915 	stw	r16,1188(sp)
    9e20:	d9011b17 	ldw	r4,1132(sp)
    9e24:	9821883a 	mov	r16,r19
    9e28:	d8812615 	stw	r2,1176(sp)
    9e2c:	030001c4 	movi	r12,7
    9e30:	5027883a 	mov	r19,r10
    9e34:	00000506 	br	9e4c <___vfiprintf_internal_r+0x5c8>
    9e38:	21400084 	addi	r5,r4,2
    9e3c:	42000204 	addi	r8,r8,8
    9e40:	1009883a 	mov	r4,r2
    9e44:	843ffc04 	addi	r16,r16,-16
    9e48:	3c000d0e 	bge	r7,r16,9e80 <___vfiprintf_internal_r+0x5fc>
    9e4c:	18c00404 	addi	r3,r3,16
    9e50:	20800044 	addi	r2,r4,1
    9e54:	47000015 	stw	fp,0(r8)
    9e58:	41c00115 	stw	r7,4(r8)
    9e5c:	d8c11c15 	stw	r3,1136(sp)
    9e60:	d8811b15 	stw	r2,1132(sp)
    9e64:	60bff40e 	bge	r12,r2,9e38 <__alt_data_end+0xfffb4708>
    9e68:	18014b1e 	bne	r3,zero,a398 <___vfiprintf_internal_r+0xb14>
    9e6c:	843ffc04 	addi	r16,r16,-16
    9e70:	0009883a 	mov	r4,zero
    9e74:	01400044 	movi	r5,1
    9e78:	d811883a 	mov	r8,sp
    9e7c:	3c3ff316 	blt	r7,r16,9e4c <__alt_data_end+0xfffb471c>
    9e80:	9815883a 	mov	r10,r19
    9e84:	8027883a 	mov	r19,r16
    9e88:	dc012917 	ldw	r16,1188(sp)
    9e8c:	d9012617 	ldw	r4,1176(sp)
    9e90:	98c7883a 	add	r3,r19,r3
    9e94:	44c00115 	stw	r19,4(r8)
    9e98:	41000015 	stw	r4,0(r8)
    9e9c:	d8c11c15 	stw	r3,1136(sp)
    9ea0:	d9411b15 	stw	r5,1132(sp)
    9ea4:	008001c4 	movi	r2,7
    9ea8:	11425116 	blt	r2,r5,a7f0 <___vfiprintf_internal_r+0xf6c>
    9eac:	d9011d87 	ldb	r4,1142(sp)
    9eb0:	42000204 	addi	r8,r8,8
    9eb4:	28800044 	addi	r2,r5,1
    9eb8:	20014a1e 	bne	r4,zero,a3e4 <___vfiprintf_internal_r+0xb60>
    9ebc:	50000c26 	beq	r10,zero,9ef0 <___vfiprintf_internal_r+0x66c>
    9ec0:	d9011d04 	addi	r4,sp,1140
    9ec4:	18c00084 	addi	r3,r3,2
    9ec8:	41000015 	stw	r4,0(r8)
    9ecc:	01000084 	movi	r4,2
    9ed0:	41000115 	stw	r4,4(r8)
    9ed4:	d8c11c15 	stw	r3,1136(sp)
    9ed8:	d8811b15 	stw	r2,1132(sp)
    9edc:	010001c4 	movi	r4,7
    9ee0:	20822016 	blt	r4,r2,a764 <___vfiprintf_internal_r+0xee0>
    9ee4:	100b883a 	mov	r5,r2
    9ee8:	42000204 	addi	r8,r8,8
    9eec:	10800044 	addi	r2,r2,1
    9ef0:	01002004 	movi	r4,128
    9ef4:	b101de26 	beq	r22,r4,a670 <___vfiprintf_internal_r+0xdec>
    9ef8:	8521c83a 	sub	r16,r16,r20
    9efc:	0400230e 	bge	zero,r16,9f8c <___vfiprintf_internal_r+0x708>
    9f00:	04c00404 	movi	r19,16
    9f04:	9c030d0e 	bge	r19,r16,ab3c <___vfiprintf_internal_r+0x12b8>
    9f08:	00800074 	movhi	r2,1
    9f0c:	10875604 	addi	r2,r2,7512
    9f10:	d8812615 	stw	r2,1176(sp)
    9f14:	058001c4 	movi	r22,7
    9f18:	00000506 	br	9f30 <___vfiprintf_internal_r+0x6ac>
    9f1c:	28800084 	addi	r2,r5,2
    9f20:	42000204 	addi	r8,r8,8
    9f24:	200b883a 	mov	r5,r4
    9f28:	843ffc04 	addi	r16,r16,-16
    9f2c:	9c000d0e 	bge	r19,r16,9f64 <___vfiprintf_internal_r+0x6e0>
    9f30:	18c00404 	addi	r3,r3,16
    9f34:	29000044 	addi	r4,r5,1
    9f38:	44400015 	stw	r17,0(r8)
    9f3c:	44c00115 	stw	r19,4(r8)
    9f40:	d8c11c15 	stw	r3,1136(sp)
    9f44:	d9011b15 	stw	r4,1132(sp)
    9f48:	b13ff40e 	bge	r22,r4,9f1c <__alt_data_end+0xfffb47ec>
    9f4c:	1801321e 	bne	r3,zero,a418 <___vfiprintf_internal_r+0xb94>
    9f50:	843ffc04 	addi	r16,r16,-16
    9f54:	000b883a 	mov	r5,zero
    9f58:	00800044 	movi	r2,1
    9f5c:	d811883a 	mov	r8,sp
    9f60:	9c3ff316 	blt	r19,r16,9f30 <__alt_data_end+0xfffb4800>
    9f64:	d9012617 	ldw	r4,1176(sp)
    9f68:	1c07883a 	add	r3,r3,r16
    9f6c:	44000115 	stw	r16,4(r8)
    9f70:	41000015 	stw	r4,0(r8)
    9f74:	d8c11c15 	stw	r3,1136(sp)
    9f78:	d8811b15 	stw	r2,1132(sp)
    9f7c:	010001c4 	movi	r4,7
    9f80:	20816216 	blt	r4,r2,a50c <___vfiprintf_internal_r+0xc88>
    9f84:	42000204 	addi	r8,r8,8
    9f88:	10800044 	addi	r2,r2,1
    9f8c:	d9012217 	ldw	r4,1160(sp)
    9f90:	1d07883a 	add	r3,r3,r20
    9f94:	45000115 	stw	r20,4(r8)
    9f98:	41000015 	stw	r4,0(r8)
    9f9c:	d8c11c15 	stw	r3,1136(sp)
    9fa0:	d8811b15 	stw	r2,1132(sp)
    9fa4:	010001c4 	movi	r4,7
    9fa8:	2081610e 	bge	r4,r2,a530 <___vfiprintf_internal_r+0xcac>
    9fac:	1802211e 	bne	r3,zero,a834 <___vfiprintf_internal_r+0xfb0>
    9fb0:	d8011b15 	stw	zero,1132(sp)
    9fb4:	9480010c 	andi	r18,r18,4
    9fb8:	9002171e 	bne	r18,zero,a818 <___vfiprintf_internal_r+0xf94>
    9fbc:	d9412417 	ldw	r5,1168(sp)
    9fc0:	a9433716 	blt	r21,r5,aca0 <___vfiprintf_internal_r+0x141c>
    9fc4:	d8812517 	ldw	r2,1172(sp)
    9fc8:	1545883a 	add	r2,r2,r21
    9fcc:	d8812515 	stw	r2,1172(sp)
    9fd0:	00019a06 	br	a63c <___vfiprintf_internal_r+0xdb8>
    9fd4:	d8c12317 	ldw	r3,1164(sp)
    9fd8:	05400044 	movi	r21,1
    9fdc:	9811883a 	mov	r8,r19
    9fe0:	18800017 	ldw	r2,0(r3)
    9fe4:	18c00104 	addi	r3,r3,4
    9fe8:	d8c12315 	stw	r3,1164(sp)
    9fec:	d8c10004 	addi	r3,sp,1024
    9ff0:	d8011d85 	stb	zero,1142(sp)
    9ff4:	d8810005 	stb	r2,1024(sp)
    9ff8:	a829883a 	mov	r20,r21
    9ffc:	d8c12215 	stw	r3,1160(sp)
    a000:	0021883a 	mov	r16,zero
    a004:	003f7806 	br	9de8 <__alt_data_end+0xfffb46b8>
    a008:	94800414 	ori	r18,r18,16
    a00c:	9080080c 	andi	r2,r18,32
    a010:	9811883a 	mov	r8,r19
    a014:	10009026 	beq	r2,zero,a258 <___vfiprintf_internal_r+0x9d4>
    a018:	d8812317 	ldw	r2,1164(sp)
    a01c:	d8c12317 	ldw	r3,1164(sp)
    a020:	14c00017 	ldw	r19,0(r2)
    a024:	15400117 	ldw	r21,4(r2)
    a028:	18c00204 	addi	r3,r3,8
    a02c:	d8c12315 	stw	r3,1164(sp)
    a030:	0005883a 	mov	r2,zero
    a034:	9d46b03a 	or	r3,r19,r21
    a038:	d8011d85 	stb	zero,1142(sp)
    a03c:	8029883a 	mov	r20,r16
    a040:	002d883a 	mov	r22,zero
    a044:	003f4606 	br	9d60 <__alt_data_end+0xfffb4630>
    a048:	94800414 	ori	r18,r18,16
    a04c:	9080080c 	andi	r2,r18,32
    a050:	9811883a 	mov	r8,r19
    a054:	10006226 	beq	r2,zero,a1e0 <___vfiprintf_internal_r+0x95c>
    a058:	d9012317 	ldw	r4,1164(sp)
    a05c:	00800044 	movi	r2,1
    a060:	24c00017 	ldw	r19,0(r4)
    a064:	25400117 	ldw	r21,4(r4)
    a068:	21000204 	addi	r4,r4,8
    a06c:	d9012315 	stw	r4,1164(sp)
    a070:	9d46b03a 	or	r3,r19,r21
    a074:	003ff006 	br	a038 <__alt_data_end+0xfffb4908>
    a078:	b9800007 	ldb	r6,0(r23)
    a07c:	00801b04 	movi	r2,108
    a080:	3082b226 	beq	r6,r2,ab4c <___vfiprintf_internal_r+0x12c8>
    a084:	94800414 	ori	r18,r18,16
    a088:	003e5f06 	br	9a08 <__alt_data_end+0xfffb42d8>
    a08c:	d8c12203 	ldbu	r3,1160(sp)
    a090:	01000074 	movhi	r4,1
    a094:	2106f004 	addi	r4,r4,7104
    a098:	d8c11d85 	stb	r3,1142(sp)
    a09c:	d9012715 	stw	r4,1180(sp)
    a0a0:	90c0080c 	andi	r3,r18,32
    a0a4:	9811883a 	mov	r8,r19
    a0a8:	d8812317 	ldw	r2,1164(sp)
    a0ac:	18005f26 	beq	r3,zero,a22c <___vfiprintf_internal_r+0x9a8>
    a0b0:	d9012317 	ldw	r4,1164(sp)
    a0b4:	14c00017 	ldw	r19,0(r2)
    a0b8:	15400117 	ldw	r21,4(r2)
    a0bc:	21000204 	addi	r4,r4,8
    a0c0:	d9012315 	stw	r4,1164(sp)
    a0c4:	9080004c 	andi	r2,r18,1
    a0c8:	1001e226 	beq	r2,zero,a854 <___vfiprintf_internal_r+0xfd0>
    a0cc:	9d46b03a 	or	r3,r19,r21
    a0d0:	18024e26 	beq	r3,zero,aa0c <___vfiprintf_internal_r+0x1188>
    a0d4:	00800c04 	movi	r2,48
    a0d8:	d8811d05 	stb	r2,1140(sp)
    a0dc:	d9811d45 	stb	r6,1141(sp)
    a0e0:	94800094 	ori	r18,r18,2
    a0e4:	00800084 	movi	r2,2
    a0e8:	003fd306 	br	a038 <__alt_data_end+0xfffb4908>
    a0ec:	d9012317 	ldw	r4,1164(sp)
    a0f0:	d9412317 	ldw	r5,1164(sp)
    a0f4:	21000017 	ldw	r4,0(r4)
    a0f8:	28800104 	addi	r2,r5,4
    a0fc:	d9012415 	stw	r4,1168(sp)
    a100:	203eeb16 	blt	r4,zero,9cb0 <__alt_data_end+0xfffb4580>
    a104:	d8812315 	stw	r2,1164(sp)
    a108:	b9800007 	ldb	r6,0(r23)
    a10c:	003e3e06 	br	9a08 <__alt_data_end+0xfffb42d8>
    a110:	b9800007 	ldb	r6,0(r23)
    a114:	01000a84 	movi	r4,42
    a118:	b8800044 	addi	r2,r23,1
    a11c:	3102d226 	beq	r6,r4,ac68 <___vfiprintf_internal_r+0x13e4>
    a120:	35bff404 	addi	r22,r6,-48
    a124:	102f883a 	mov	r23,r2
    a128:	0021883a 	mov	r16,zero
    a12c:	adbe3736 	bltu	r21,r22,9a0c <__alt_data_end+0xfffb42dc>
    a130:	0009883a 	mov	r4,zero
    a134:	01400284 	movi	r5,10
    a138:	000c3a00 	call	c3a0 <__mulsi3>
    a13c:	b9800007 	ldb	r6,0(r23)
    a140:	b089883a 	add	r4,r22,r2
    a144:	bdc00044 	addi	r23,r23,1
    a148:	35bff404 	addi	r22,r6,-48
    a14c:	adbff92e 	bgeu	r21,r22,a134 <__alt_data_end+0xfffb4a04>
    a150:	2021883a 	mov	r16,r4
    a154:	203e2d0e 	bge	r4,zero,9a0c <__alt_data_end+0xfffb42dc>
    a158:	043fffc4 	movi	r16,-1
    a15c:	003e2b06 	br	9a0c <__alt_data_end+0xfffb42dc>
    a160:	94801014 	ori	r18,r18,64
    a164:	b9800007 	ldb	r6,0(r23)
    a168:	003e2706 	br	9a08 <__alt_data_end+0xfffb42d8>
    a16c:	94800814 	ori	r18,r18,32
    a170:	b9800007 	ldb	r6,0(r23)
    a174:	003e2406 	br	9a08 <__alt_data_end+0xfffb42d8>
    a178:	d9412317 	ldw	r5,1164(sp)
    a17c:	d8812317 	ldw	r2,1164(sp)
    a180:	d8011d85 	stb	zero,1142(sp)
    a184:	29400017 	ldw	r5,0(r5)
    a188:	9811883a 	mov	r8,r19
    a18c:	14c00104 	addi	r19,r2,4
    a190:	d9412215 	stw	r5,1160(sp)
    a194:	28029026 	beq	r5,zero,abd8 <___vfiprintf_internal_r+0x1354>
    a198:	d9012217 	ldw	r4,1160(sp)
    a19c:	80027616 	blt	r16,zero,ab78 <___vfiprintf_internal_r+0x12f4>
    a1a0:	000b883a 	mov	r5,zero
    a1a4:	800d883a 	mov	r6,r16
    a1a8:	da012a15 	stw	r8,1192(sp)
    a1ac:	0007a400 	call	7a40 <memchr>
    a1b0:	da012a17 	ldw	r8,1192(sp)
    a1b4:	1002a026 	beq	r2,zero,ac38 <___vfiprintf_internal_r+0x13b4>
    a1b8:	d8c12217 	ldw	r3,1160(sp)
    a1bc:	10e9c83a 	sub	r20,r2,r3
    a1c0:	85023816 	blt	r16,r20,aaa4 <___vfiprintf_internal_r+0x1220>
    a1c4:	dd811d83 	ldbu	r22,1142(sp)
    a1c8:	dcc12315 	stw	r19,1164(sp)
    a1cc:	0021883a 	mov	r16,zero
    a1d0:	003efd06 	br	9dc8 <__alt_data_end+0xfffb4698>
    a1d4:	9080080c 	andi	r2,r18,32
    a1d8:	9811883a 	mov	r8,r19
    a1dc:	103f9e1e 	bne	r2,zero,a058 <__alt_data_end+0xfffb4928>
    a1e0:	9080040c 	andi	r2,r18,16
    a1e4:	10021726 	beq	r2,zero,aa44 <___vfiprintf_internal_r+0x11c0>
    a1e8:	d9412317 	ldw	r5,1164(sp)
    a1ec:	002b883a 	mov	r21,zero
    a1f0:	00800044 	movi	r2,1
    a1f4:	2cc00017 	ldw	r19,0(r5)
    a1f8:	29400104 	addi	r5,r5,4
    a1fc:	d9412315 	stw	r5,1164(sp)
    a200:	9807883a 	mov	r3,r19
    a204:	003f8c06 	br	a038 <__alt_data_end+0xfffb4908>
    a208:	d8c12203 	ldbu	r3,1160(sp)
    a20c:	01000074 	movhi	r4,1
    a210:	2106f504 	addi	r4,r4,7124
    a214:	d8c11d85 	stb	r3,1142(sp)
    a218:	d9012715 	stw	r4,1180(sp)
    a21c:	90c0080c 	andi	r3,r18,32
    a220:	9811883a 	mov	r8,r19
    a224:	d8812317 	ldw	r2,1164(sp)
    a228:	183fa11e 	bne	r3,zero,a0b0 <__alt_data_end+0xfffb4980>
    a22c:	90c0040c 	andi	r3,r18,16
    a230:	1801e526 	beq	r3,zero,a9c8 <___vfiprintf_internal_r+0x1144>
    a234:	d9412317 	ldw	r5,1164(sp)
    a238:	14c00017 	ldw	r19,0(r2)
    a23c:	002b883a 	mov	r21,zero
    a240:	29400104 	addi	r5,r5,4
    a244:	d9412315 	stw	r5,1164(sp)
    a248:	003f9e06 	br	a0c4 <__alt_data_end+0xfffb4994>
    a24c:	9080080c 	andi	r2,r18,32
    a250:	9811883a 	mov	r8,r19
    a254:	103f701e 	bne	r2,zero,a018 <__alt_data_end+0xfffb48e8>
    a258:	9080040c 	andi	r2,r18,16
    a25c:	1001ef26 	beq	r2,zero,aa1c <___vfiprintf_internal_r+0x1198>
    a260:	d9012317 	ldw	r4,1164(sp)
    a264:	002b883a 	mov	r21,zero
    a268:	0005883a 	mov	r2,zero
    a26c:	24c00017 	ldw	r19,0(r4)
    a270:	21000104 	addi	r4,r4,4
    a274:	d9012315 	stw	r4,1164(sp)
    a278:	9807883a 	mov	r3,r19
    a27c:	003f6e06 	br	a038 <__alt_data_end+0xfffb4908>
    a280:	d8c12317 	ldw	r3,1164(sp)
    a284:	9811883a 	mov	r8,r19
    a288:	00800c04 	movi	r2,48
    a28c:	1cc00017 	ldw	r19,0(r3)
    a290:	01000074 	movhi	r4,1
    a294:	18c00104 	addi	r3,r3,4
    a298:	d8811d05 	stb	r2,1140(sp)
    a29c:	2106f504 	addi	r4,r4,7124
    a2a0:	00801e04 	movi	r2,120
    a2a4:	d8811d45 	stb	r2,1141(sp)
    a2a8:	d8c12315 	stw	r3,1164(sp)
    a2ac:	002b883a 	mov	r21,zero
    a2b0:	94800094 	ori	r18,r18,2
    a2b4:	d9012715 	stw	r4,1180(sp)
    a2b8:	00800084 	movi	r2,2
    a2bc:	9807883a 	mov	r3,r19
    a2c0:	003f5d06 	br	a038 <__alt_data_end+0xfffb4908>
    a2c4:	d8c12203 	ldbu	r3,1160(sp)
    a2c8:	9080080c 	andi	r2,r18,32
    a2cc:	9811883a 	mov	r8,r19
    a2d0:	d8c11d85 	stb	r3,1142(sp)
    a2d4:	1001b126 	beq	r2,zero,a99c <___vfiprintf_internal_r+0x1118>
    a2d8:	d9012317 	ldw	r4,1164(sp)
    a2dc:	d9412517 	ldw	r5,1172(sp)
    a2e0:	20800017 	ldw	r2,0(r4)
    a2e4:	2807d7fa 	srai	r3,r5,31
    a2e8:	21000104 	addi	r4,r4,4
    a2ec:	d9012315 	stw	r4,1164(sp)
    a2f0:	11400015 	stw	r5,0(r2)
    a2f4:	10c00115 	stw	r3,4(r2)
    a2f8:	003d9a06 	br	9964 <__alt_data_end+0xfffb4234>
    a2fc:	d8812207 	ldb	r2,1160(sp)
    a300:	1001c41e 	bne	r2,zero,aa14 <___vfiprintf_internal_r+0x1190>
    a304:	00c00804 	movi	r3,32
    a308:	d8c12205 	stb	r3,1160(sp)
    a30c:	b9800007 	ldb	r6,0(r23)
    a310:	003dbd06 	br	9a08 <__alt_data_end+0xfffb42d8>
    a314:	00c00ac4 	movi	r3,43
    a318:	d8c12205 	stb	r3,1160(sp)
    a31c:	b9800007 	ldb	r6,0(r23)
    a320:	003db906 	br	9a08 <__alt_data_end+0xfffb42d8>
    a324:	d8c12203 	ldbu	r3,1160(sp)
    a328:	9080080c 	andi	r2,r18,32
    a32c:	9811883a 	mov	r8,r19
    a330:	d8c11d85 	stb	r3,1142(sp)
    a334:	d8c12317 	ldw	r3,1164(sp)
    a338:	103e7e1e 	bne	r2,zero,9d34 <__alt_data_end+0xfffb4604>
    a33c:	9080040c 	andi	r2,r18,16
    a340:	1001a926 	beq	r2,zero,a9e8 <___vfiprintf_internal_r+0x1164>
    a344:	1cc00017 	ldw	r19,0(r3)
    a348:	d9412317 	ldw	r5,1164(sp)
    a34c:	982bd7fa 	srai	r21,r19,31
    a350:	29400104 	addi	r5,r5,4
    a354:	d9412315 	stw	r5,1164(sp)
    a358:	a805883a 	mov	r2,r21
    a35c:	003e7b06 	br	9d4c <__alt_data_end+0xfffb461c>
    a360:	94800054 	ori	r18,r18,1
    a364:	b9800007 	ldb	r6,0(r23)
    a368:	003da706 	br	9a08 <__alt_data_end+0xfffb42d8>
    a36c:	d8c12203 	ldbu	r3,1160(sp)
    a370:	9811883a 	mov	r8,r19
    a374:	d8c11d85 	stb	r3,1142(sp)
    a378:	30005826 	beq	r6,zero,a4dc <___vfiprintf_internal_r+0xc58>
    a37c:	05400044 	movi	r21,1
    a380:	d8c10004 	addi	r3,sp,1024
    a384:	d9810005 	stb	r6,1024(sp)
    a388:	d8011d85 	stb	zero,1142(sp)
    a38c:	a829883a 	mov	r20,r21
    a390:	d8c12215 	stw	r3,1160(sp)
    a394:	003f1a06 	br	a000 <__alt_data_end+0xfffb48d0>
    a398:	d9012117 	ldw	r4,1156(sp)
    a39c:	d9412017 	ldw	r5,1152(sp)
    a3a0:	d9811a04 	addi	r6,sp,1128
    a3a4:	d9c12a15 	stw	r7,1192(sp)
    a3a8:	db012b15 	stw	r12,1196(sp)
    a3ac:	00097700 	call	9770 <__sprint_r.part.0>
    a3b0:	d9c12a17 	ldw	r7,1192(sp)
    a3b4:	db012b17 	ldw	r12,1196(sp)
    a3b8:	10004e1e 	bne	r2,zero,a4f4 <___vfiprintf_internal_r+0xc70>
    a3bc:	d9011b17 	ldw	r4,1132(sp)
    a3c0:	d8c11c17 	ldw	r3,1136(sp)
    a3c4:	d811883a 	mov	r8,sp
    a3c8:	21400044 	addi	r5,r4,1
    a3cc:	003e9d06 	br	9e44 <__alt_data_end+0xfffb4714>
    a3d0:	d9411b17 	ldw	r5,1132(sp)
    a3d4:	d8c11c17 	ldw	r3,1136(sp)
    a3d8:	28800044 	addi	r2,r5,1
    a3dc:	d9011d87 	ldb	r4,1142(sp)
    a3e0:	203eb626 	beq	r4,zero,9ebc <__alt_data_end+0xfffb478c>
    a3e4:	01000044 	movi	r4,1
    a3e8:	d9411d84 	addi	r5,sp,1142
    a3ec:	1907883a 	add	r3,r3,r4
    a3f0:	41400015 	stw	r5,0(r8)
    a3f4:	41000115 	stw	r4,4(r8)
    a3f8:	d8c11c15 	stw	r3,1136(sp)
    a3fc:	d8811b15 	stw	r2,1132(sp)
    a400:	014001c4 	movi	r5,7
    a404:	2880ce16 	blt	r5,r2,a740 <___vfiprintf_internal_r+0xebc>
    a408:	100b883a 	mov	r5,r2
    a40c:	42000204 	addi	r8,r8,8
    a410:	10800044 	addi	r2,r2,1
    a414:	003ea906 	br	9ebc <__alt_data_end+0xfffb478c>
    a418:	d9012117 	ldw	r4,1156(sp)
    a41c:	d9412017 	ldw	r5,1152(sp)
    a420:	d9811a04 	addi	r6,sp,1128
    a424:	00097700 	call	9770 <__sprint_r.part.0>
    a428:	1000321e 	bne	r2,zero,a4f4 <___vfiprintf_internal_r+0xc70>
    a42c:	d9411b17 	ldw	r5,1132(sp)
    a430:	d8c11c17 	ldw	r3,1136(sp)
    a434:	d811883a 	mov	r8,sp
    a438:	28800044 	addi	r2,r5,1
    a43c:	003eba06 	br	9f28 <__alt_data_end+0xfffb47f8>
    a440:	10803fcc 	andi	r2,r2,255
    a444:	00c00044 	movi	r3,1
    a448:	10fe4d1e 	bne	r2,r3,9d80 <__alt_data_end+0xfffb4650>
    a44c:	a800021e 	bne	r21,zero,a458 <___vfiprintf_internal_r+0xbd4>
    a450:	00800244 	movi	r2,9
    a454:	14c01b2e 	bgeu	r2,r19,a4c4 <___vfiprintf_internal_r+0xc40>
    a458:	dc012215 	stw	r16,1160(sp)
    a45c:	dd010a04 	addi	r20,sp,1064
    a460:	a821883a 	mov	r16,r21
    a464:	402b883a 	mov	r21,r8
    a468:	9809883a 	mov	r4,r19
    a46c:	800b883a 	mov	r5,r16
    a470:	01800284 	movi	r6,10
    a474:	000f883a 	mov	r7,zero
    a478:	000bc580 	call	bc58 <__umoddi3>
    a47c:	10800c04 	addi	r2,r2,48
    a480:	a53fffc4 	addi	r20,r20,-1
    a484:	9809883a 	mov	r4,r19
    a488:	800b883a 	mov	r5,r16
    a48c:	01800284 	movi	r6,10
    a490:	000f883a 	mov	r7,zero
    a494:	a0800005 	stb	r2,0(r20)
    a498:	000b6180 	call	b618 <__udivdi3>
    a49c:	1027883a 	mov	r19,r2
    a4a0:	10c4b03a 	or	r2,r2,r3
    a4a4:	1821883a 	mov	r16,r3
    a4a8:	103fef1e 	bne	r2,zero,a468 <__alt_data_end+0xfffb4d38>
    a4ac:	d9011e17 	ldw	r4,1144(sp)
    a4b0:	dc012217 	ldw	r16,1160(sp)
    a4b4:	a811883a 	mov	r8,r21
    a4b8:	dd012215 	stw	r20,1160(sp)
    a4bc:	2529c83a 	sub	r20,r4,r20
    a4c0:	003e4106 	br	9dc8 <__alt_data_end+0xfffb4698>
    a4c4:	9cc00c04 	addi	r19,r19,48
    a4c8:	d8c109c4 	addi	r3,sp,1063
    a4cc:	dcc109c5 	stb	r19,1063(sp)
    a4d0:	dd012817 	ldw	r20,1184(sp)
    a4d4:	d8c12215 	stw	r3,1160(sp)
    a4d8:	003e3b06 	br	9dc8 <__alt_data_end+0xfffb4698>
    a4dc:	d8811c17 	ldw	r2,1136(sp)
    a4e0:	10000426 	beq	r2,zero,a4f4 <___vfiprintf_internal_r+0xc70>
    a4e4:	d9012117 	ldw	r4,1156(sp)
    a4e8:	d9412017 	ldw	r5,1152(sp)
    a4ec:	d9811a04 	addi	r6,sp,1128
    a4f0:	00097700 	call	9770 <__sprint_r.part.0>
    a4f4:	d9412017 	ldw	r5,1152(sp)
    a4f8:	2880030b 	ldhu	r2,12(r5)
    a4fc:	1080100c 	andi	r2,r2,64
    a500:	103ddc1e 	bne	r2,zero,9c74 <__alt_data_end+0xfffb4544>
    a504:	d8812517 	ldw	r2,1172(sp)
    a508:	003ddb06 	br	9c78 <__alt_data_end+0xfffb4548>
    a50c:	1801061e 	bne	r3,zero,a928 <___vfiprintf_internal_r+0x10a4>
    a510:	d8c12217 	ldw	r3,1160(sp)
    a514:	00800044 	movi	r2,1
    a518:	dd000115 	stw	r20,4(sp)
    a51c:	d8c00015 	stw	r3,0(sp)
    a520:	dd011c15 	stw	r20,1136(sp)
    a524:	d8811b15 	stw	r2,1132(sp)
    a528:	a007883a 	mov	r3,r20
    a52c:	d811883a 	mov	r8,sp
    a530:	42000204 	addi	r8,r8,8
    a534:	9480010c 	andi	r18,r18,4
    a538:	90003426 	beq	r18,zero,a60c <___vfiprintf_internal_r+0xd88>
    a53c:	d9412417 	ldw	r5,1168(sp)
    a540:	2d65c83a 	sub	r18,r5,r21
    a544:	0480310e 	bge	zero,r18,a60c <___vfiprintf_internal_r+0xd88>
    a548:	04000404 	movi	r16,16
    a54c:	8481ad0e 	bge	r16,r18,ac04 <___vfiprintf_internal_r+0x1380>
    a550:	01400074 	movhi	r5,1
    a554:	29475a04 	addi	r5,r5,7528
    a558:	d9011b17 	ldw	r4,1132(sp)
    a55c:	d9412615 	stw	r5,1176(sp)
    a560:	04c001c4 	movi	r19,7
    a564:	dd012117 	ldw	r20,1156(sp)
    a568:	dd812017 	ldw	r22,1152(sp)
    a56c:	00000506 	br	a584 <___vfiprintf_internal_r+0xd00>
    a570:	21400084 	addi	r5,r4,2
    a574:	42000204 	addi	r8,r8,8
    a578:	1009883a 	mov	r4,r2
    a57c:	94bffc04 	addi	r18,r18,-16
    a580:	84800d0e 	bge	r16,r18,a5b8 <___vfiprintf_internal_r+0xd34>
    a584:	18c00404 	addi	r3,r3,16
    a588:	20800044 	addi	r2,r4,1
    a58c:	47000015 	stw	fp,0(r8)
    a590:	44000115 	stw	r16,4(r8)
    a594:	d8c11c15 	stw	r3,1136(sp)
    a598:	d8811b15 	stw	r2,1132(sp)
    a59c:	98bff40e 	bge	r19,r2,a570 <__alt_data_end+0xfffb4e40>
    a5a0:	1800291e 	bne	r3,zero,a648 <___vfiprintf_internal_r+0xdc4>
    a5a4:	94bffc04 	addi	r18,r18,-16
    a5a8:	0009883a 	mov	r4,zero
    a5ac:	01400044 	movi	r5,1
    a5b0:	d811883a 	mov	r8,sp
    a5b4:	84bff316 	blt	r16,r18,a584 <__alt_data_end+0xfffb4e54>
    a5b8:	d8812617 	ldw	r2,1176(sp)
    a5bc:	1c87883a 	add	r3,r3,r18
    a5c0:	44800115 	stw	r18,4(r8)
    a5c4:	40800015 	stw	r2,0(r8)
    a5c8:	d8c11c15 	stw	r3,1136(sp)
    a5cc:	d9411b15 	stw	r5,1132(sp)
    a5d0:	008001c4 	movi	r2,7
    a5d4:	11400d0e 	bge	r2,r5,a60c <___vfiprintf_internal_r+0xd88>
    a5d8:	1800061e 	bne	r3,zero,a5f4 <___vfiprintf_internal_r+0xd70>
    a5dc:	d8c12417 	ldw	r3,1168(sp)
    a5e0:	a8c12e16 	blt	r21,r3,aa9c <___vfiprintf_internal_r+0x1218>
    a5e4:	d9012517 	ldw	r4,1172(sp)
    a5e8:	2549883a 	add	r4,r4,r21
    a5ec:	d9012515 	stw	r4,1172(sp)
    a5f0:	00001206 	br	a63c <___vfiprintf_internal_r+0xdb8>
    a5f4:	d9012117 	ldw	r4,1156(sp)
    a5f8:	d9412017 	ldw	r5,1152(sp)
    a5fc:	d9811a04 	addi	r6,sp,1128
    a600:	00097700 	call	9770 <__sprint_r.part.0>
    a604:	103fbb1e 	bne	r2,zero,a4f4 <__alt_data_end+0xfffb4dc4>
    a608:	d8c11c17 	ldw	r3,1136(sp)
    a60c:	d8812417 	ldw	r2,1168(sp)
    a610:	a880010e 	bge	r21,r2,a618 <___vfiprintf_internal_r+0xd94>
    a614:	102b883a 	mov	r21,r2
    a618:	d9012517 	ldw	r4,1172(sp)
    a61c:	2549883a 	add	r4,r4,r21
    a620:	d9012515 	stw	r4,1172(sp)
    a624:	18000526 	beq	r3,zero,a63c <___vfiprintf_internal_r+0xdb8>
    a628:	d9012117 	ldw	r4,1156(sp)
    a62c:	d9412017 	ldw	r5,1152(sp)
    a630:	d9811a04 	addi	r6,sp,1128
    a634:	00097700 	call	9770 <__sprint_r.part.0>
    a638:	103fae1e 	bne	r2,zero,a4f4 <__alt_data_end+0xfffb4dc4>
    a63c:	d8011b15 	stw	zero,1132(sp)
    a640:	d811883a 	mov	r8,sp
    a644:	003cc706 	br	9964 <__alt_data_end+0xfffb4234>
    a648:	a009883a 	mov	r4,r20
    a64c:	b00b883a 	mov	r5,r22
    a650:	d9811a04 	addi	r6,sp,1128
    a654:	00097700 	call	9770 <__sprint_r.part.0>
    a658:	103fa61e 	bne	r2,zero,a4f4 <__alt_data_end+0xfffb4dc4>
    a65c:	d9011b17 	ldw	r4,1132(sp)
    a660:	d8c11c17 	ldw	r3,1136(sp)
    a664:	d811883a 	mov	r8,sp
    a668:	21400044 	addi	r5,r4,1
    a66c:	003fc306 	br	a57c <__alt_data_end+0xfffb4e4c>
    a670:	d9012417 	ldw	r4,1168(sp)
    a674:	256dc83a 	sub	r22,r4,r21
    a678:	05be1f0e 	bge	zero,r22,9ef8 <__alt_data_end+0xfffb47c8>
    a67c:	04c00404 	movi	r19,16
    a680:	9d81720e 	bge	r19,r22,ac4c <___vfiprintf_internal_r+0x13c8>
    a684:	00800074 	movhi	r2,1
    a688:	10875604 	addi	r2,r2,7512
    a68c:	d8812615 	stw	r2,1176(sp)
    a690:	028001c4 	movi	r10,7
    a694:	00000506 	br	a6ac <___vfiprintf_internal_r+0xe28>
    a698:	29000084 	addi	r4,r5,2
    a69c:	42000204 	addi	r8,r8,8
    a6a0:	100b883a 	mov	r5,r2
    a6a4:	b5bffc04 	addi	r22,r22,-16
    a6a8:	9d800d0e 	bge	r19,r22,a6e0 <___vfiprintf_internal_r+0xe5c>
    a6ac:	18c00404 	addi	r3,r3,16
    a6b0:	28800044 	addi	r2,r5,1
    a6b4:	44400015 	stw	r17,0(r8)
    a6b8:	44c00115 	stw	r19,4(r8)
    a6bc:	d8c11c15 	stw	r3,1136(sp)
    a6c0:	d8811b15 	stw	r2,1132(sp)
    a6c4:	50bff40e 	bge	r10,r2,a698 <__alt_data_end+0xfffb4f68>
    a6c8:	1800111e 	bne	r3,zero,a710 <___vfiprintf_internal_r+0xe8c>
    a6cc:	b5bffc04 	addi	r22,r22,-16
    a6d0:	000b883a 	mov	r5,zero
    a6d4:	01000044 	movi	r4,1
    a6d8:	d811883a 	mov	r8,sp
    a6dc:	9dbff316 	blt	r19,r22,a6ac <__alt_data_end+0xfffb4f7c>
    a6e0:	d9412617 	ldw	r5,1176(sp)
    a6e4:	1d87883a 	add	r3,r3,r22
    a6e8:	45800115 	stw	r22,4(r8)
    a6ec:	41400015 	stw	r5,0(r8)
    a6f0:	d8c11c15 	stw	r3,1136(sp)
    a6f4:	d9011b15 	stw	r4,1132(sp)
    a6f8:	008001c4 	movi	r2,7
    a6fc:	11008516 	blt	r2,r4,a914 <___vfiprintf_internal_r+0x1090>
    a700:	42000204 	addi	r8,r8,8
    a704:	20800044 	addi	r2,r4,1
    a708:	200b883a 	mov	r5,r4
    a70c:	003dfa06 	br	9ef8 <__alt_data_end+0xfffb47c8>
    a710:	d9012117 	ldw	r4,1156(sp)
    a714:	d9412017 	ldw	r5,1152(sp)
    a718:	d9811a04 	addi	r6,sp,1128
    a71c:	da812a15 	stw	r10,1192(sp)
    a720:	00097700 	call	9770 <__sprint_r.part.0>
    a724:	da812a17 	ldw	r10,1192(sp)
    a728:	103f721e 	bne	r2,zero,a4f4 <__alt_data_end+0xfffb4dc4>
    a72c:	d9411b17 	ldw	r5,1132(sp)
    a730:	d8c11c17 	ldw	r3,1136(sp)
    a734:	d811883a 	mov	r8,sp
    a738:	29000044 	addi	r4,r5,1
    a73c:	003fd906 	br	a6a4 <__alt_data_end+0xfffb4f74>
    a740:	1800681e 	bne	r3,zero,a8e4 <___vfiprintf_internal_r+0x1060>
    a744:	50004d26 	beq	r10,zero,a87c <___vfiprintf_internal_r+0xff8>
    a748:	d8811d04 	addi	r2,sp,1140
    a74c:	00c00084 	movi	r3,2
    a750:	d8800015 	stw	r2,0(sp)
    a754:	d8c00115 	stw	r3,4(sp)
    a758:	2005883a 	mov	r2,r4
    a75c:	d811883a 	mov	r8,sp
    a760:	003de006 	br	9ee4 <__alt_data_end+0xfffb47b4>
    a764:	1800551e 	bne	r3,zero,a8bc <___vfiprintf_internal_r+0x1038>
    a768:	000b883a 	mov	r5,zero
    a76c:	00800044 	movi	r2,1
    a770:	d811883a 	mov	r8,sp
    a774:	003dde06 	br	9ef0 <__alt_data_end+0xfffb47c0>
    a778:	10803fcc 	andi	r2,r2,255
    a77c:	1000191e 	bne	r2,zero,a7e4 <___vfiprintf_internal_r+0xf60>
    a780:	9080004c 	andi	r2,r18,1
    a784:	10001726 	beq	r2,zero,a7e4 <___vfiprintf_internal_r+0xf60>
    a788:	00800c04 	movi	r2,48
    a78c:	d8c109c4 	addi	r3,sp,1063
    a790:	d88109c5 	stb	r2,1063(sp)
    a794:	dd012817 	ldw	r20,1184(sp)
    a798:	d8c12215 	stw	r3,1160(sp)
    a79c:	003d8a06 	br	9dc8 <__alt_data_end+0xfffb4698>
    a7a0:	d9012717 	ldw	r4,1180(sp)
    a7a4:	dd010a04 	addi	r20,sp,1064
    a7a8:	988003cc 	andi	r2,r19,15
    a7ac:	a806973a 	slli	r3,r21,28
    a7b0:	2085883a 	add	r2,r4,r2
    a7b4:	9826d13a 	srli	r19,r19,4
    a7b8:	10800003 	ldbu	r2,0(r2)
    a7bc:	a82ad13a 	srli	r21,r21,4
    a7c0:	a53fffc4 	addi	r20,r20,-1
    a7c4:	1ce6b03a 	or	r19,r3,r19
    a7c8:	a0800005 	stb	r2,0(r20)
    a7cc:	9d44b03a 	or	r2,r19,r21
    a7d0:	103ff51e 	bne	r2,zero,a7a8 <__alt_data_end+0xfffb5078>
    a7d4:	d9411e17 	ldw	r5,1144(sp)
    a7d8:	dd012215 	stw	r20,1160(sp)
    a7dc:	2d29c83a 	sub	r20,r5,r20
    a7e0:	003d7906 	br	9dc8 <__alt_data_end+0xfffb4698>
    a7e4:	d8c10a04 	addi	r3,sp,1064
    a7e8:	d8c12215 	stw	r3,1160(sp)
    a7ec:	003d7606 	br	9dc8 <__alt_data_end+0xfffb4698>
    a7f0:	18009e1e 	bne	r3,zero,aa6c <___vfiprintf_internal_r+0x11e8>
    a7f4:	d8811d87 	ldb	r2,1142(sp)
    a7f8:	10005f26 	beq	r2,zero,a978 <___vfiprintf_internal_r+0x10f4>
    a7fc:	00c00044 	movi	r3,1
    a800:	d9011d84 	addi	r4,sp,1142
    a804:	1805883a 	mov	r2,r3
    a808:	d9000015 	stw	r4,0(sp)
    a80c:	d8c00115 	stw	r3,4(sp)
    a810:	d811883a 	mov	r8,sp
    a814:	003efc06 	br	a408 <__alt_data_end+0xfffb4cd8>
    a818:	d9412417 	ldw	r5,1168(sp)
    a81c:	d811883a 	mov	r8,sp
    a820:	2d65c83a 	sub	r18,r5,r21
    a824:	04bf4816 	blt	zero,r18,a548 <__alt_data_end+0xfffb4e18>
    a828:	003f6c06 	br	a5dc <__alt_data_end+0xfffb4eac>
    a82c:	b829883a 	mov	r20,r23
    a830:	003c6906 	br	99d8 <__alt_data_end+0xfffb42a8>
    a834:	d9012117 	ldw	r4,1156(sp)
    a838:	d9412017 	ldw	r5,1152(sp)
    a83c:	d9811a04 	addi	r6,sp,1128
    a840:	00097700 	call	9770 <__sprint_r.part.0>
    a844:	103f2b1e 	bne	r2,zero,a4f4 <__alt_data_end+0xfffb4dc4>
    a848:	d8c11c17 	ldw	r3,1136(sp)
    a84c:	d811883a 	mov	r8,sp
    a850:	003f3806 	br	a534 <__alt_data_end+0xfffb4e04>
    a854:	00800084 	movi	r2,2
    a858:	9d46b03a 	or	r3,r19,r21
    a85c:	003df606 	br	a038 <__alt_data_end+0xfffb4908>
    a860:	d9012117 	ldw	r4,1156(sp)
    a864:	d9412017 	ldw	r5,1152(sp)
    a868:	d9811a04 	addi	r6,sp,1128
    a86c:	00097700 	call	9770 <__sprint_r.part.0>
    a870:	103f201e 	bne	r2,zero,a4f4 <__alt_data_end+0xfffb4dc4>
    a874:	d811883a 	mov	r8,sp
    a878:	003cc606 	br	9b94 <__alt_data_end+0xfffb4464>
    a87c:	000b883a 	mov	r5,zero
    a880:	2005883a 	mov	r2,r4
    a884:	d811883a 	mov	r8,sp
    a888:	003d9906 	br	9ef0 <__alt_data_end+0xfffb47c0>
    a88c:	10803fcc 	andi	r2,r2,255
    a890:	1080201c 	xori	r2,r2,128
    a894:	10bfe004 	addi	r2,r2,-128
    a898:	01000c04 	movi	r4,48
    a89c:	1100b226 	beq	r2,r4,ab68 <___vfiprintf_internal_r+0x12e4>
    a8a0:	d9412217 	ldw	r5,1160(sp)
    a8a4:	d8811e17 	ldw	r2,1144(sp)
    a8a8:	193fffc5 	stb	r4,-1(r3)
    a8ac:	297fffc4 	addi	r5,r5,-1
    a8b0:	d9412215 	stw	r5,1160(sp)
    a8b4:	1169c83a 	sub	r20,r2,r5
    a8b8:	003d4306 	br	9dc8 <__alt_data_end+0xfffb4698>
    a8bc:	d9012117 	ldw	r4,1156(sp)
    a8c0:	d9412017 	ldw	r5,1152(sp)
    a8c4:	d9811a04 	addi	r6,sp,1128
    a8c8:	00097700 	call	9770 <__sprint_r.part.0>
    a8cc:	103f091e 	bne	r2,zero,a4f4 <__alt_data_end+0xfffb4dc4>
    a8d0:	d9411b17 	ldw	r5,1132(sp)
    a8d4:	d8c11c17 	ldw	r3,1136(sp)
    a8d8:	d811883a 	mov	r8,sp
    a8dc:	28800044 	addi	r2,r5,1
    a8e0:	003d8306 	br	9ef0 <__alt_data_end+0xfffb47c0>
    a8e4:	d9012117 	ldw	r4,1156(sp)
    a8e8:	d9412017 	ldw	r5,1152(sp)
    a8ec:	d9811a04 	addi	r6,sp,1128
    a8f0:	da812a15 	stw	r10,1192(sp)
    a8f4:	00097700 	call	9770 <__sprint_r.part.0>
    a8f8:	da812a17 	ldw	r10,1192(sp)
    a8fc:	103efd1e 	bne	r2,zero,a4f4 <__alt_data_end+0xfffb4dc4>
    a900:	d9411b17 	ldw	r5,1132(sp)
    a904:	d8c11c17 	ldw	r3,1136(sp)
    a908:	d811883a 	mov	r8,sp
    a90c:	28800044 	addi	r2,r5,1
    a910:	003d6a06 	br	9ebc <__alt_data_end+0xfffb478c>
    a914:	1800a01e 	bne	r3,zero,ab98 <___vfiprintf_internal_r+0x1314>
    a918:	000b883a 	mov	r5,zero
    a91c:	00800044 	movi	r2,1
    a920:	d811883a 	mov	r8,sp
    a924:	003d7406 	br	9ef8 <__alt_data_end+0xfffb47c8>
    a928:	d9012117 	ldw	r4,1156(sp)
    a92c:	d9412017 	ldw	r5,1152(sp)
    a930:	d9811a04 	addi	r6,sp,1128
    a934:	00097700 	call	9770 <__sprint_r.part.0>
    a938:	103eee1e 	bne	r2,zero,a4f4 <__alt_data_end+0xfffb4dc4>
    a93c:	d8811b17 	ldw	r2,1132(sp)
    a940:	d8c11c17 	ldw	r3,1136(sp)
    a944:	d811883a 	mov	r8,sp
    a948:	10800044 	addi	r2,r2,1
    a94c:	003d8f06 	br	9f8c <__alt_data_end+0xfffb485c>
    a950:	04e7c83a 	sub	r19,zero,r19
    a954:	9804c03a 	cmpne	r2,r19,zero
    a958:	056bc83a 	sub	r21,zero,r21
    a95c:	a8abc83a 	sub	r21,r21,r2
    a960:	05800b44 	movi	r22,45
    a964:	dd811d85 	stb	r22,1142(sp)
    a968:	8029883a 	mov	r20,r16
    a96c:	00800044 	movi	r2,1
    a970:	9d46b03a 	or	r3,r19,r21
    a974:	003cfa06 	br	9d60 <__alt_data_end+0xfffb4630>
    a978:	000b883a 	mov	r5,zero
    a97c:	00800044 	movi	r2,1
    a980:	d811883a 	mov	r8,sp
    a984:	503d5a26 	beq	r10,zero,9ef0 <__alt_data_end+0xfffb47c0>
    a988:	00c00084 	movi	r3,2
    a98c:	d9011d04 	addi	r4,sp,1140
    a990:	d9000015 	stw	r4,0(sp)
    a994:	d8c00115 	stw	r3,4(sp)
    a998:	003d5206 	br	9ee4 <__alt_data_end+0xfffb47b4>
    a99c:	9080040c 	andi	r2,r18,16
    a9a0:	1000421e 	bne	r2,zero,aaac <___vfiprintf_internal_r+0x1228>
    a9a4:	9480100c 	andi	r18,r18,64
    a9a8:	90009c26 	beq	r18,zero,ac1c <___vfiprintf_internal_r+0x1398>
    a9ac:	d9412317 	ldw	r5,1164(sp)
    a9b0:	d8c12517 	ldw	r3,1172(sp)
    a9b4:	28800017 	ldw	r2,0(r5)
    a9b8:	29400104 	addi	r5,r5,4
    a9bc:	d9412315 	stw	r5,1164(sp)
    a9c0:	10c0000d 	sth	r3,0(r2)
    a9c4:	003be706 	br	9964 <__alt_data_end+0xfffb4234>
    a9c8:	90c0100c 	andi	r3,r18,64
    a9cc:	18003e26 	beq	r3,zero,aac8 <___vfiprintf_internal_r+0x1244>
    a9d0:	d8c12317 	ldw	r3,1164(sp)
    a9d4:	14c0000b 	ldhu	r19,0(r2)
    a9d8:	002b883a 	mov	r21,zero
    a9dc:	18c00104 	addi	r3,r3,4
    a9e0:	d8c12315 	stw	r3,1164(sp)
    a9e4:	003db706 	br	a0c4 <__alt_data_end+0xfffb4994>
    a9e8:	9080100c 	andi	r2,r18,64
    a9ec:	10004c26 	beq	r2,zero,ab20 <___vfiprintf_internal_r+0x129c>
    a9f0:	1cc0000f 	ldh	r19,0(r3)
    a9f4:	d8812317 	ldw	r2,1164(sp)
    a9f8:	982bd7fa 	srai	r21,r19,31
    a9fc:	10800104 	addi	r2,r2,4
    aa00:	d8812315 	stw	r2,1164(sp)
    aa04:	a805883a 	mov	r2,r21
    aa08:	003cd006 	br	9d4c <__alt_data_end+0xfffb461c>
    aa0c:	00800084 	movi	r2,2
    aa10:	003d8906 	br	a038 <__alt_data_end+0xfffb4908>
    aa14:	b9800007 	ldb	r6,0(r23)
    aa18:	003bfb06 	br	9a08 <__alt_data_end+0xfffb42d8>
    aa1c:	9080100c 	andi	r2,r18,64
    aa20:	10003726 	beq	r2,zero,ab00 <___vfiprintf_internal_r+0x127c>
    aa24:	d9412317 	ldw	r5,1164(sp)
    aa28:	002b883a 	mov	r21,zero
    aa2c:	0005883a 	mov	r2,zero
    aa30:	2cc0000b 	ldhu	r19,0(r5)
    aa34:	29400104 	addi	r5,r5,4
    aa38:	d9412315 	stw	r5,1164(sp)
    aa3c:	9807883a 	mov	r3,r19
    aa40:	003d7d06 	br	a038 <__alt_data_end+0xfffb4908>
    aa44:	9080100c 	andi	r2,r18,64
    aa48:	10002526 	beq	r2,zero,aae0 <___vfiprintf_internal_r+0x125c>
    aa4c:	d8812317 	ldw	r2,1164(sp)
    aa50:	002b883a 	mov	r21,zero
    aa54:	14c0000b 	ldhu	r19,0(r2)
    aa58:	10800104 	addi	r2,r2,4
    aa5c:	d8812315 	stw	r2,1164(sp)
    aa60:	9807883a 	mov	r3,r19
    aa64:	00800044 	movi	r2,1
    aa68:	003d7306 	br	a038 <__alt_data_end+0xfffb4908>
    aa6c:	d9012117 	ldw	r4,1156(sp)
    aa70:	d9412017 	ldw	r5,1152(sp)
    aa74:	d9811a04 	addi	r6,sp,1128
    aa78:	da812a15 	stw	r10,1192(sp)
    aa7c:	00097700 	call	9770 <__sprint_r.part.0>
    aa80:	da812a17 	ldw	r10,1192(sp)
    aa84:	103e9b1e 	bne	r2,zero,a4f4 <__alt_data_end+0xfffb4dc4>
    aa88:	d9411b17 	ldw	r5,1132(sp)
    aa8c:	d8c11c17 	ldw	r3,1136(sp)
    aa90:	d811883a 	mov	r8,sp
    aa94:	28800044 	addi	r2,r5,1
    aa98:	003e5006 	br	a3dc <__alt_data_end+0xfffb4cac>
    aa9c:	182b883a 	mov	r21,r3
    aaa0:	003ed006 	br	a5e4 <__alt_data_end+0xfffb4eb4>
    aaa4:	8029883a 	mov	r20,r16
    aaa8:	003dc606 	br	a1c4 <__alt_data_end+0xfffb4a94>
    aaac:	d8c12317 	ldw	r3,1164(sp)
    aab0:	d9012517 	ldw	r4,1172(sp)
    aab4:	18800017 	ldw	r2,0(r3)
    aab8:	18c00104 	addi	r3,r3,4
    aabc:	d8c12315 	stw	r3,1164(sp)
    aac0:	11000015 	stw	r4,0(r2)
    aac4:	003ba706 	br	9964 <__alt_data_end+0xfffb4234>
    aac8:	d9012317 	ldw	r4,1164(sp)
    aacc:	14c00017 	ldw	r19,0(r2)
    aad0:	002b883a 	mov	r21,zero
    aad4:	21000104 	addi	r4,r4,4
    aad8:	d9012315 	stw	r4,1164(sp)
    aadc:	003d7906 	br	a0c4 <__alt_data_end+0xfffb4994>
    aae0:	d8c12317 	ldw	r3,1164(sp)
    aae4:	002b883a 	mov	r21,zero
    aae8:	00800044 	movi	r2,1
    aaec:	1cc00017 	ldw	r19,0(r3)
    aaf0:	18c00104 	addi	r3,r3,4
    aaf4:	d8c12315 	stw	r3,1164(sp)
    aaf8:	9807883a 	mov	r3,r19
    aafc:	003d4e06 	br	a038 <__alt_data_end+0xfffb4908>
    ab00:	d8812317 	ldw	r2,1164(sp)
    ab04:	002b883a 	mov	r21,zero
    ab08:	14c00017 	ldw	r19,0(r2)
    ab0c:	10800104 	addi	r2,r2,4
    ab10:	d8812315 	stw	r2,1164(sp)
    ab14:	9807883a 	mov	r3,r19
    ab18:	0005883a 	mov	r2,zero
    ab1c:	003d4606 	br	a038 <__alt_data_end+0xfffb4908>
    ab20:	1cc00017 	ldw	r19,0(r3)
    ab24:	d8c12317 	ldw	r3,1164(sp)
    ab28:	982bd7fa 	srai	r21,r19,31
    ab2c:	18c00104 	addi	r3,r3,4
    ab30:	d8c12315 	stw	r3,1164(sp)
    ab34:	a805883a 	mov	r2,r21
    ab38:	003c8406 	br	9d4c <__alt_data_end+0xfffb461c>
    ab3c:	01000074 	movhi	r4,1
    ab40:	21075604 	addi	r4,r4,7512
    ab44:	d9012615 	stw	r4,1176(sp)
    ab48:	003d0606 	br	9f64 <__alt_data_end+0xfffb4834>
    ab4c:	b9800043 	ldbu	r6,1(r23)
    ab50:	94800814 	ori	r18,r18,32
    ab54:	bdc00044 	addi	r23,r23,1
    ab58:	31803fcc 	andi	r6,r6,255
    ab5c:	3180201c 	xori	r6,r6,128
    ab60:	31bfe004 	addi	r6,r6,-128
    ab64:	003ba806 	br	9a08 <__alt_data_end+0xfffb42d8>
    ab68:	d8811e17 	ldw	r2,1144(sp)
    ab6c:	d8c12217 	ldw	r3,1160(sp)
    ab70:	10e9c83a 	sub	r20,r2,r3
    ab74:	003c9406 	br	9dc8 <__alt_data_end+0xfffb4698>
    ab78:	da012a15 	stw	r8,1192(sp)
    ab7c:	00023940 	call	2394 <strlen>
    ab80:	1029883a 	mov	r20,r2
    ab84:	dd811d83 	ldbu	r22,1142(sp)
    ab88:	dcc12315 	stw	r19,1164(sp)
    ab8c:	0021883a 	mov	r16,zero
    ab90:	da012a17 	ldw	r8,1192(sp)
    ab94:	003c8c06 	br	9dc8 <__alt_data_end+0xfffb4698>
    ab98:	d9012117 	ldw	r4,1156(sp)
    ab9c:	d9412017 	ldw	r5,1152(sp)
    aba0:	d9811a04 	addi	r6,sp,1128
    aba4:	00097700 	call	9770 <__sprint_r.part.0>
    aba8:	103e521e 	bne	r2,zero,a4f4 <__alt_data_end+0xfffb4dc4>
    abac:	d9411b17 	ldw	r5,1132(sp)
    abb0:	d8c11c17 	ldw	r3,1136(sp)
    abb4:	d811883a 	mov	r8,sp
    abb8:	28800044 	addi	r2,r5,1
    abbc:	003cce06 	br	9ef8 <__alt_data_end+0xfffb47c8>
    abc0:	01400074 	movhi	r5,1
    abc4:	29475a04 	addi	r5,r5,7528
    abc8:	d9412615 	stw	r5,1176(sp)
    abcc:	d9411b17 	ldw	r5,1132(sp)
    abd0:	29400044 	addi	r5,r5,1
    abd4:	003cad06 	br	9e8c <__alt_data_end+0xfffb475c>
    abd8:	00800184 	movi	r2,6
    abdc:	1400012e 	bgeu	r2,r16,abe4 <___vfiprintf_internal_r+0x1360>
    abe0:	1021883a 	mov	r16,r2
    abe4:	8029883a 	mov	r20,r16
    abe8:	802b883a 	mov	r21,r16
    abec:	80001c16 	blt	r16,zero,ac60 <___vfiprintf_internal_r+0x13dc>
    abf0:	00c00074 	movhi	r3,1
    abf4:	18c6fa04 	addi	r3,r3,7144
    abf8:	dcc12315 	stw	r19,1164(sp)
    abfc:	d8c12215 	stw	r3,1160(sp)
    ac00:	003cff06 	br	a000 <__alt_data_end+0xfffb48d0>
    ac04:	d9411b17 	ldw	r5,1132(sp)
    ac08:	00800074 	movhi	r2,1
    ac0c:	10875a04 	addi	r2,r2,7528
    ac10:	d8812615 	stw	r2,1176(sp)
    ac14:	29400044 	addi	r5,r5,1
    ac18:	003e6706 	br	a5b8 <__alt_data_end+0xfffb4e88>
    ac1c:	d9012317 	ldw	r4,1164(sp)
    ac20:	d9412517 	ldw	r5,1172(sp)
    ac24:	20800017 	ldw	r2,0(r4)
    ac28:	21000104 	addi	r4,r4,4
    ac2c:	d9012315 	stw	r4,1164(sp)
    ac30:	11400015 	stw	r5,0(r2)
    ac34:	003b4b06 	br	9964 <__alt_data_end+0xfffb4234>
    ac38:	8029883a 	mov	r20,r16
    ac3c:	dd811d83 	ldbu	r22,1142(sp)
    ac40:	dcc12315 	stw	r19,1164(sp)
    ac44:	0021883a 	mov	r16,zero
    ac48:	003c5f06 	br	9dc8 <__alt_data_end+0xfffb4698>
    ac4c:	01000074 	movhi	r4,1
    ac50:	21075604 	addi	r4,r4,7512
    ac54:	d9012615 	stw	r4,1176(sp)
    ac58:	1009883a 	mov	r4,r2
    ac5c:	003ea006 	br	a6e0 <__alt_data_end+0xfffb4fb0>
    ac60:	002b883a 	mov	r21,zero
    ac64:	003fe206 	br	abf0 <__alt_data_end+0xfffb54c0>
    ac68:	d9412317 	ldw	r5,1164(sp)
    ac6c:	b807883a 	mov	r3,r23
    ac70:	102f883a 	mov	r23,r2
    ac74:	2c000017 	ldw	r16,0(r5)
    ac78:	29000104 	addi	r4,r5,4
    ac7c:	d9012315 	stw	r4,1164(sp)
    ac80:	80000416 	blt	r16,zero,ac94 <___vfiprintf_internal_r+0x1410>
    ac84:	19800047 	ldb	r6,1(r3)
    ac88:	003b5f06 	br	9a08 <__alt_data_end+0xfffb42d8>
    ac8c:	043fffc4 	movi	r16,-1
    ac90:	003bef06 	br	9c50 <__alt_data_end+0xfffb4520>
    ac94:	043fffc4 	movi	r16,-1
    ac98:	19800047 	ldb	r6,1(r3)
    ac9c:	003b5a06 	br	9a08 <__alt_data_end+0xfffb42d8>
    aca0:	282b883a 	mov	r21,r5
    aca4:	003cc706 	br	9fc4 <__alt_data_end+0xfffb4894>

0000aca8 <__vfiprintf_internal>:
    aca8:	2007883a 	mov	r3,r4
    acac:	01000074 	movhi	r4,1
    acb0:	210e5704 	addi	r4,r4,14684
    acb4:	21000017 	ldw	r4,0(r4)
    acb8:	2805883a 	mov	r2,r5
    acbc:	300f883a 	mov	r7,r6
    acc0:	180b883a 	mov	r5,r3
    acc4:	100d883a 	mov	r6,r2
    acc8:	00098841 	jmpi	9884 <___vfiprintf_internal_r>

0000accc <_write_r>:
    accc:	defffd04 	addi	sp,sp,-12
    acd0:	dc000015 	stw	r16,0(sp)
    acd4:	04000074 	movhi	r16,1
    acd8:	dc400115 	stw	r17,4(sp)
    acdc:	84152e04 	addi	r16,r16,21688
    ace0:	2023883a 	mov	r17,r4
    ace4:	2809883a 	mov	r4,r5
    ace8:	300b883a 	mov	r5,r6
    acec:	380d883a 	mov	r6,r7
    acf0:	dfc00215 	stw	ra,8(sp)
    acf4:	80000015 	stw	zero,0(r16)
    acf8:	000f4e80 	call	f4e8 <write>
    acfc:	00ffffc4 	movi	r3,-1
    ad00:	10c00526 	beq	r2,r3,ad18 <_write_r+0x4c>
    ad04:	dfc00217 	ldw	ra,8(sp)
    ad08:	dc400117 	ldw	r17,4(sp)
    ad0c:	dc000017 	ldw	r16,0(sp)
    ad10:	dec00304 	addi	sp,sp,12
    ad14:	f800283a 	ret
    ad18:	80c00017 	ldw	r3,0(r16)
    ad1c:	183ff926 	beq	r3,zero,ad04 <__alt_data_end+0xfffb55d4>
    ad20:	88c00015 	stw	r3,0(r17)
    ad24:	003ff706 	br	ad04 <__alt_data_end+0xfffb55d4>

0000ad28 <_close_r>:
    ad28:	defffd04 	addi	sp,sp,-12
    ad2c:	dc000015 	stw	r16,0(sp)
    ad30:	04000074 	movhi	r16,1
    ad34:	dc400115 	stw	r17,4(sp)
    ad38:	84152e04 	addi	r16,r16,21688
    ad3c:	2023883a 	mov	r17,r4
    ad40:	2809883a 	mov	r4,r5
    ad44:	dfc00215 	stw	ra,8(sp)
    ad48:	80000015 	stw	zero,0(r16)
    ad4c:	000ec140 	call	ec14 <close>
    ad50:	00ffffc4 	movi	r3,-1
    ad54:	10c00526 	beq	r2,r3,ad6c <_close_r+0x44>
    ad58:	dfc00217 	ldw	ra,8(sp)
    ad5c:	dc400117 	ldw	r17,4(sp)
    ad60:	dc000017 	ldw	r16,0(sp)
    ad64:	dec00304 	addi	sp,sp,12
    ad68:	f800283a 	ret
    ad6c:	80c00017 	ldw	r3,0(r16)
    ad70:	183ff926 	beq	r3,zero,ad58 <__alt_data_end+0xfffb5628>
    ad74:	88c00015 	stw	r3,0(r17)
    ad78:	003ff706 	br	ad58 <__alt_data_end+0xfffb5628>

0000ad7c <_calloc_r>:
    ad7c:	defffe04 	addi	sp,sp,-8
    ad80:	dc000015 	stw	r16,0(sp)
    ad84:	2021883a 	mov	r16,r4
    ad88:	2809883a 	mov	r4,r5
    ad8c:	300b883a 	mov	r5,r6
    ad90:	dfc00115 	stw	ra,4(sp)
    ad94:	000c3a00 	call	c3a0 <__mulsi3>
    ad98:	8009883a 	mov	r4,r16
    ad9c:	100b883a 	mov	r5,r2
    ada0:	00072980 	call	7298 <_malloc_r>
    ada4:	1021883a 	mov	r16,r2
    ada8:	10002826 	beq	r2,zero,ae4c <_calloc_r+0xd0>
    adac:	11bfff17 	ldw	r6,-4(r2)
    adb0:	00bfff04 	movi	r2,-4
    adb4:	00c00904 	movi	r3,36
    adb8:	308c703a 	and	r6,r6,r2
    adbc:	308d883a 	add	r6,r6,r2
    adc0:	19801436 	bltu	r3,r6,ae14 <_calloc_r+0x98>
    adc4:	008004c4 	movi	r2,19
    adc8:	11800936 	bltu	r2,r6,adf0 <_calloc_r+0x74>
    adcc:	8005883a 	mov	r2,r16
    add0:	10000015 	stw	zero,0(r2)
    add4:	10000115 	stw	zero,4(r2)
    add8:	10000215 	stw	zero,8(r2)
    addc:	8005883a 	mov	r2,r16
    ade0:	dfc00117 	ldw	ra,4(sp)
    ade4:	dc000017 	ldw	r16,0(sp)
    ade8:	dec00204 	addi	sp,sp,8
    adec:	f800283a 	ret
    adf0:	80000015 	stw	zero,0(r16)
    adf4:	80000115 	stw	zero,4(r16)
    adf8:	008006c4 	movi	r2,27
    adfc:	11800d2e 	bgeu	r2,r6,ae34 <_calloc_r+0xb8>
    ae00:	80000215 	stw	zero,8(r16)
    ae04:	80000315 	stw	zero,12(r16)
    ae08:	30c00c26 	beq	r6,r3,ae3c <_calloc_r+0xc0>
    ae0c:	80800404 	addi	r2,r16,16
    ae10:	003fef06 	br	add0 <__alt_data_end+0xfffb56a0>
    ae14:	8009883a 	mov	r4,r16
    ae18:	000b883a 	mov	r5,zero
    ae1c:	0007dbc0 	call	7dbc <memset>
    ae20:	8005883a 	mov	r2,r16
    ae24:	dfc00117 	ldw	ra,4(sp)
    ae28:	dc000017 	ldw	r16,0(sp)
    ae2c:	dec00204 	addi	sp,sp,8
    ae30:	f800283a 	ret
    ae34:	80800204 	addi	r2,r16,8
    ae38:	003fe506 	br	add0 <__alt_data_end+0xfffb56a0>
    ae3c:	80000415 	stw	zero,16(r16)
    ae40:	80800604 	addi	r2,r16,24
    ae44:	80000515 	stw	zero,20(r16)
    ae48:	003fe106 	br	add0 <__alt_data_end+0xfffb56a0>
    ae4c:	0005883a 	mov	r2,zero
    ae50:	003fe306 	br	ade0 <__alt_data_end+0xfffb56b0>

0000ae54 <_fclose_r>:
    ae54:	28003226 	beq	r5,zero,af20 <_fclose_r+0xcc>
    ae58:	defffc04 	addi	sp,sp,-16
    ae5c:	dc400115 	stw	r17,4(sp)
    ae60:	2023883a 	mov	r17,r4
    ae64:	dc000015 	stw	r16,0(sp)
    ae68:	dfc00315 	stw	ra,12(sp)
    ae6c:	dc800215 	stw	r18,8(sp)
    ae70:	2821883a 	mov	r16,r5
    ae74:	00065980 	call	6598 <__sfp_lock_acquire>
    ae78:	88000226 	beq	r17,zero,ae84 <_fclose_r+0x30>
    ae7c:	88800e17 	ldw	r2,56(r17)
    ae80:	10002926 	beq	r2,zero,af28 <_fclose_r+0xd4>
    ae84:	8080030f 	ldh	r2,12(r16)
    ae88:	10002226 	beq	r2,zero,af14 <_fclose_r+0xc0>
    ae8c:	8809883a 	mov	r4,r17
    ae90:	800b883a 	mov	r5,r16
    ae94:	0005fcc0 	call	5fcc <_fflush_r>
    ae98:	1025883a 	mov	r18,r2
    ae9c:	80800b17 	ldw	r2,44(r16)
    aea0:	10000426 	beq	r2,zero,aeb4 <_fclose_r+0x60>
    aea4:	81400717 	ldw	r5,28(r16)
    aea8:	8809883a 	mov	r4,r17
    aeac:	103ee83a 	callr	r2
    aeb0:	10002616 	blt	r2,zero,af4c <_fclose_r+0xf8>
    aeb4:	8080030b 	ldhu	r2,12(r16)
    aeb8:	1080200c 	andi	r2,r2,128
    aebc:	10001f1e 	bne	r2,zero,af3c <_fclose_r+0xe8>
    aec0:	81400c17 	ldw	r5,48(r16)
    aec4:	28000526 	beq	r5,zero,aedc <_fclose_r+0x88>
    aec8:	80801004 	addi	r2,r16,64
    aecc:	28800226 	beq	r5,r2,aed8 <_fclose_r+0x84>
    aed0:	8809883a 	mov	r4,r17
    aed4:	00066fc0 	call	66fc <_free_r>
    aed8:	80000c15 	stw	zero,48(r16)
    aedc:	81401117 	ldw	r5,68(r16)
    aee0:	28000326 	beq	r5,zero,aef0 <_fclose_r+0x9c>
    aee4:	8809883a 	mov	r4,r17
    aee8:	00066fc0 	call	66fc <_free_r>
    aeec:	80001115 	stw	zero,68(r16)
    aef0:	8000030d 	sth	zero,12(r16)
    aef4:	000659c0 	call	659c <__sfp_lock_release>
    aef8:	9005883a 	mov	r2,r18
    aefc:	dfc00317 	ldw	ra,12(sp)
    af00:	dc800217 	ldw	r18,8(sp)
    af04:	dc400117 	ldw	r17,4(sp)
    af08:	dc000017 	ldw	r16,0(sp)
    af0c:	dec00404 	addi	sp,sp,16
    af10:	f800283a 	ret
    af14:	000659c0 	call	659c <__sfp_lock_release>
    af18:	0005883a 	mov	r2,zero
    af1c:	003ff706 	br	aefc <__alt_data_end+0xfffb57cc>
    af20:	0005883a 	mov	r2,zero
    af24:	f800283a 	ret
    af28:	8809883a 	mov	r4,r17
    af2c:	00065880 	call	6588 <__sinit>
    af30:	8080030f 	ldh	r2,12(r16)
    af34:	103fd51e 	bne	r2,zero,ae8c <__alt_data_end+0xfffb575c>
    af38:	003ff606 	br	af14 <__alt_data_end+0xfffb57e4>
    af3c:	81400417 	ldw	r5,16(r16)
    af40:	8809883a 	mov	r4,r17
    af44:	00066fc0 	call	66fc <_free_r>
    af48:	003fdd06 	br	aec0 <__alt_data_end+0xfffb5790>
    af4c:	04bfffc4 	movi	r18,-1
    af50:	003fd806 	br	aeb4 <__alt_data_end+0xfffb5784>

0000af54 <fclose>:
    af54:	00800074 	movhi	r2,1
    af58:	108e5704 	addi	r2,r2,14684
    af5c:	200b883a 	mov	r5,r4
    af60:	11000017 	ldw	r4,0(r2)
    af64:	000ae541 	jmpi	ae54 <_fclose_r>

0000af68 <_fputwc_r>:
    af68:	3080030b 	ldhu	r2,12(r6)
    af6c:	defff804 	addi	sp,sp,-32
    af70:	dcc00415 	stw	r19,16(sp)
    af74:	dc800315 	stw	r18,12(sp)
    af78:	dc000115 	stw	r16,4(sp)
    af7c:	dfc00715 	stw	ra,28(sp)
    af80:	dd400615 	stw	r21,24(sp)
    af84:	dd000515 	stw	r20,20(sp)
    af88:	dc400215 	stw	r17,8(sp)
    af8c:	10c8000c 	andi	r3,r2,8192
    af90:	3021883a 	mov	r16,r6
    af94:	2027883a 	mov	r19,r4
    af98:	2825883a 	mov	r18,r5
    af9c:	1800051e 	bne	r3,zero,afb4 <_fputwc_r+0x4c>
    afa0:	30c01917 	ldw	r3,100(r6)
    afa4:	10880014 	ori	r2,r2,8192
    afa8:	3080030d 	sth	r2,12(r6)
    afac:	18880014 	ori	r2,r3,8192
    afb0:	30801915 	stw	r2,100(r6)
    afb4:	00070880 	call	7088 <__locale_mb_cur_max>
    afb8:	00c00044 	movi	r3,1
    afbc:	10c03e26 	beq	r2,r3,b0b8 <_fputwc_r+0x150>
    afc0:	9809883a 	mov	r4,r19
    afc4:	d80b883a 	mov	r5,sp
    afc8:	900d883a 	mov	r6,r18
    afcc:	81c01704 	addi	r7,r16,92
    afd0:	000b4180 	call	b418 <_wcrtomb_r>
    afd4:	1029883a 	mov	r20,r2
    afd8:	00bfffc4 	movi	r2,-1
    afdc:	a0802026 	beq	r20,r2,b060 <_fputwc_r+0xf8>
    afe0:	d9400003 	ldbu	r5,0(sp)
    afe4:	a0001c26 	beq	r20,zero,b058 <_fputwc_r+0xf0>
    afe8:	0023883a 	mov	r17,zero
    afec:	05400284 	movi	r21,10
    aff0:	00000906 	br	b018 <_fputwc_r+0xb0>
    aff4:	80800017 	ldw	r2,0(r16)
    aff8:	11400005 	stb	r5,0(r2)
    affc:	80c00017 	ldw	r3,0(r16)
    b000:	18c00044 	addi	r3,r3,1
    b004:	80c00015 	stw	r3,0(r16)
    b008:	8c400044 	addi	r17,r17,1
    b00c:	dc45883a 	add	r2,sp,r17
    b010:	8d00112e 	bgeu	r17,r20,b058 <_fputwc_r+0xf0>
    b014:	11400003 	ldbu	r5,0(r2)
    b018:	80c00217 	ldw	r3,8(r16)
    b01c:	18ffffc4 	addi	r3,r3,-1
    b020:	80c00215 	stw	r3,8(r16)
    b024:	183ff30e 	bge	r3,zero,aff4 <__alt_data_end+0xfffb58c4>
    b028:	80800617 	ldw	r2,24(r16)
    b02c:	18801916 	blt	r3,r2,b094 <_fputwc_r+0x12c>
    b030:	80800017 	ldw	r2,0(r16)
    b034:	11400005 	stb	r5,0(r2)
    b038:	80800017 	ldw	r2,0(r16)
    b03c:	10c00003 	ldbu	r3,0(r2)
    b040:	10800044 	addi	r2,r2,1
    b044:	1d402326 	beq	r3,r21,b0d4 <_fputwc_r+0x16c>
    b048:	80800015 	stw	r2,0(r16)
    b04c:	8c400044 	addi	r17,r17,1
    b050:	dc45883a 	add	r2,sp,r17
    b054:	8d3fef36 	bltu	r17,r20,b014 <__alt_data_end+0xfffb58e4>
    b058:	9005883a 	mov	r2,r18
    b05c:	00000406 	br	b070 <_fputwc_r+0x108>
    b060:	80c0030b 	ldhu	r3,12(r16)
    b064:	a005883a 	mov	r2,r20
    b068:	18c01014 	ori	r3,r3,64
    b06c:	80c0030d 	sth	r3,12(r16)
    b070:	dfc00717 	ldw	ra,28(sp)
    b074:	dd400617 	ldw	r21,24(sp)
    b078:	dd000517 	ldw	r20,20(sp)
    b07c:	dcc00417 	ldw	r19,16(sp)
    b080:	dc800317 	ldw	r18,12(sp)
    b084:	dc400217 	ldw	r17,8(sp)
    b088:	dc000117 	ldw	r16,4(sp)
    b08c:	dec00804 	addi	sp,sp,32
    b090:	f800283a 	ret
    b094:	9809883a 	mov	r4,r19
    b098:	29403fcc 	andi	r5,r5,255
    b09c:	800d883a 	mov	r6,r16
    b0a0:	000b2a80 	call	b2a8 <__swbuf_r>
    b0a4:	10bfffe0 	cmpeqi	r2,r2,-1
    b0a8:	10803fcc 	andi	r2,r2,255
    b0ac:	103fd626 	beq	r2,zero,b008 <__alt_data_end+0xfffb58d8>
    b0b0:	00bfffc4 	movi	r2,-1
    b0b4:	003fee06 	br	b070 <__alt_data_end+0xfffb5940>
    b0b8:	90ffffc4 	addi	r3,r18,-1
    b0bc:	01003f84 	movi	r4,254
    b0c0:	20ffbf36 	bltu	r4,r3,afc0 <__alt_data_end+0xfffb5890>
    b0c4:	900b883a 	mov	r5,r18
    b0c8:	dc800005 	stb	r18,0(sp)
    b0cc:	1029883a 	mov	r20,r2
    b0d0:	003fc506 	br	afe8 <__alt_data_end+0xfffb58b8>
    b0d4:	9809883a 	mov	r4,r19
    b0d8:	a80b883a 	mov	r5,r21
    b0dc:	800d883a 	mov	r6,r16
    b0e0:	000b2a80 	call	b2a8 <__swbuf_r>
    b0e4:	10bfffe0 	cmpeqi	r2,r2,-1
    b0e8:	003fef06 	br	b0a8 <__alt_data_end+0xfffb5978>

0000b0ec <fputwc>:
    b0ec:	defffc04 	addi	sp,sp,-16
    b0f0:	dc000115 	stw	r16,4(sp)
    b0f4:	04000074 	movhi	r16,1
    b0f8:	840e5704 	addi	r16,r16,14684
    b0fc:	dc400215 	stw	r17,8(sp)
    b100:	2023883a 	mov	r17,r4
    b104:	81000017 	ldw	r4,0(r16)
    b108:	dfc00315 	stw	ra,12(sp)
    b10c:	280d883a 	mov	r6,r5
    b110:	20000626 	beq	r4,zero,b12c <fputwc+0x40>
    b114:	20800e17 	ldw	r2,56(r4)
    b118:	1000041e 	bne	r2,zero,b12c <fputwc+0x40>
    b11c:	d9400015 	stw	r5,0(sp)
    b120:	00065880 	call	6588 <__sinit>
    b124:	81000017 	ldw	r4,0(r16)
    b128:	d9800017 	ldw	r6,0(sp)
    b12c:	880b883a 	mov	r5,r17
    b130:	dfc00317 	ldw	ra,12(sp)
    b134:	dc400217 	ldw	r17,8(sp)
    b138:	dc000117 	ldw	r16,4(sp)
    b13c:	dec00404 	addi	sp,sp,16
    b140:	000af681 	jmpi	af68 <_fputwc_r>

0000b144 <_fstat_r>:
    b144:	defffd04 	addi	sp,sp,-12
    b148:	dc000015 	stw	r16,0(sp)
    b14c:	04000074 	movhi	r16,1
    b150:	dc400115 	stw	r17,4(sp)
    b154:	84152e04 	addi	r16,r16,21688
    b158:	2023883a 	mov	r17,r4
    b15c:	2809883a 	mov	r4,r5
    b160:	300b883a 	mov	r5,r6
    b164:	dfc00215 	stw	ra,8(sp)
    b168:	80000015 	stw	zero,0(r16)
    b16c:	000ed680 	call	ed68 <fstat>
    b170:	00ffffc4 	movi	r3,-1
    b174:	10c00526 	beq	r2,r3,b18c <_fstat_r+0x48>
    b178:	dfc00217 	ldw	ra,8(sp)
    b17c:	dc400117 	ldw	r17,4(sp)
    b180:	dc000017 	ldw	r16,0(sp)
    b184:	dec00304 	addi	sp,sp,12
    b188:	f800283a 	ret
    b18c:	80c00017 	ldw	r3,0(r16)
    b190:	183ff926 	beq	r3,zero,b178 <__alt_data_end+0xfffb5a48>
    b194:	88c00015 	stw	r3,0(r17)
    b198:	003ff706 	br	b178 <__alt_data_end+0xfffb5a48>

0000b19c <_isatty_r>:
    b19c:	defffd04 	addi	sp,sp,-12
    b1a0:	dc000015 	stw	r16,0(sp)
    b1a4:	04000074 	movhi	r16,1
    b1a8:	dc400115 	stw	r17,4(sp)
    b1ac:	84152e04 	addi	r16,r16,21688
    b1b0:	2023883a 	mov	r17,r4
    b1b4:	2809883a 	mov	r4,r5
    b1b8:	dfc00215 	stw	ra,8(sp)
    b1bc:	80000015 	stw	zero,0(r16)
    b1c0:	000ee700 	call	ee70 <isatty>
    b1c4:	00ffffc4 	movi	r3,-1
    b1c8:	10c00526 	beq	r2,r3,b1e0 <_isatty_r+0x44>
    b1cc:	dfc00217 	ldw	ra,8(sp)
    b1d0:	dc400117 	ldw	r17,4(sp)
    b1d4:	dc000017 	ldw	r16,0(sp)
    b1d8:	dec00304 	addi	sp,sp,12
    b1dc:	f800283a 	ret
    b1e0:	80c00017 	ldw	r3,0(r16)
    b1e4:	183ff926 	beq	r3,zero,b1cc <__alt_data_end+0xfffb5a9c>
    b1e8:	88c00015 	stw	r3,0(r17)
    b1ec:	003ff706 	br	b1cc <__alt_data_end+0xfffb5a9c>

0000b1f0 <_lseek_r>:
    b1f0:	defffd04 	addi	sp,sp,-12
    b1f4:	dc000015 	stw	r16,0(sp)
    b1f8:	04000074 	movhi	r16,1
    b1fc:	dc400115 	stw	r17,4(sp)
    b200:	84152e04 	addi	r16,r16,21688
    b204:	2023883a 	mov	r17,r4
    b208:	2809883a 	mov	r4,r5
    b20c:	300b883a 	mov	r5,r6
    b210:	380d883a 	mov	r6,r7
    b214:	dfc00215 	stw	ra,8(sp)
    b218:	80000015 	stw	zero,0(r16)
    b21c:	000f0500 	call	f050 <lseek>
    b220:	00ffffc4 	movi	r3,-1
    b224:	10c00526 	beq	r2,r3,b23c <_lseek_r+0x4c>
    b228:	dfc00217 	ldw	ra,8(sp)
    b22c:	dc400117 	ldw	r17,4(sp)
    b230:	dc000017 	ldw	r16,0(sp)
    b234:	dec00304 	addi	sp,sp,12
    b238:	f800283a 	ret
    b23c:	80c00017 	ldw	r3,0(r16)
    b240:	183ff926 	beq	r3,zero,b228 <__alt_data_end+0xfffb5af8>
    b244:	88c00015 	stw	r3,0(r17)
    b248:	003ff706 	br	b228 <__alt_data_end+0xfffb5af8>

0000b24c <_read_r>:
    b24c:	defffd04 	addi	sp,sp,-12
    b250:	dc000015 	stw	r16,0(sp)
    b254:	04000074 	movhi	r16,1
    b258:	dc400115 	stw	r17,4(sp)
    b25c:	84152e04 	addi	r16,r16,21688
    b260:	2023883a 	mov	r17,r4
    b264:	2809883a 	mov	r4,r5
    b268:	300b883a 	mov	r5,r6
    b26c:	380d883a 	mov	r6,r7
    b270:	dfc00215 	stw	ra,8(sp)
    b274:	80000015 	stw	zero,0(r16)
    b278:	000f2340 	call	f234 <read>
    b27c:	00ffffc4 	movi	r3,-1
    b280:	10c00526 	beq	r2,r3,b298 <_read_r+0x4c>
    b284:	dfc00217 	ldw	ra,8(sp)
    b288:	dc400117 	ldw	r17,4(sp)
    b28c:	dc000017 	ldw	r16,0(sp)
    b290:	dec00304 	addi	sp,sp,12
    b294:	f800283a 	ret
    b298:	80c00017 	ldw	r3,0(r16)
    b29c:	183ff926 	beq	r3,zero,b284 <__alt_data_end+0xfffb5b54>
    b2a0:	88c00015 	stw	r3,0(r17)
    b2a4:	003ff706 	br	b284 <__alt_data_end+0xfffb5b54>

0000b2a8 <__swbuf_r>:
    b2a8:	defffc04 	addi	sp,sp,-16
    b2ac:	dc800215 	stw	r18,8(sp)
    b2b0:	dc400115 	stw	r17,4(sp)
    b2b4:	dc000015 	stw	r16,0(sp)
    b2b8:	dfc00315 	stw	ra,12(sp)
    b2bc:	2025883a 	mov	r18,r4
    b2c0:	2823883a 	mov	r17,r5
    b2c4:	3021883a 	mov	r16,r6
    b2c8:	20000226 	beq	r4,zero,b2d4 <__swbuf_r+0x2c>
    b2cc:	20800e17 	ldw	r2,56(r4)
    b2d0:	10004126 	beq	r2,zero,b3d8 <__swbuf_r+0x130>
    b2d4:	80c00617 	ldw	r3,24(r16)
    b2d8:	8180030b 	ldhu	r6,12(r16)
    b2dc:	80c00215 	stw	r3,8(r16)
    b2e0:	30c0020c 	andi	r3,r6,8
    b2e4:	18003526 	beq	r3,zero,b3bc <__swbuf_r+0x114>
    b2e8:	80c00417 	ldw	r3,16(r16)
    b2ec:	18003326 	beq	r3,zero,b3bc <__swbuf_r+0x114>
    b2f0:	3088000c 	andi	r2,r6,8192
    b2f4:	8c403fcc 	andi	r17,r17,255
    b2f8:	10001726 	beq	r2,zero,b358 <__swbuf_r+0xb0>
    b2fc:	80800017 	ldw	r2,0(r16)
    b300:	81000517 	ldw	r4,20(r16)
    b304:	10c7c83a 	sub	r3,r2,r3
    b308:	19001d0e 	bge	r3,r4,b380 <__swbuf_r+0xd8>
    b30c:	18c00044 	addi	r3,r3,1
    b310:	81400217 	ldw	r5,8(r16)
    b314:	11000044 	addi	r4,r2,1
    b318:	81000015 	stw	r4,0(r16)
    b31c:	297fffc4 	addi	r5,r5,-1
    b320:	81400215 	stw	r5,8(r16)
    b324:	14400005 	stb	r17,0(r2)
    b328:	80800517 	ldw	r2,20(r16)
    b32c:	10c01d26 	beq	r2,r3,b3a4 <__swbuf_r+0xfc>
    b330:	8080030b 	ldhu	r2,12(r16)
    b334:	1080004c 	andi	r2,r2,1
    b338:	1000181e 	bne	r2,zero,b39c <__swbuf_r+0xf4>
    b33c:	8805883a 	mov	r2,r17
    b340:	dfc00317 	ldw	ra,12(sp)
    b344:	dc800217 	ldw	r18,8(sp)
    b348:	dc400117 	ldw	r17,4(sp)
    b34c:	dc000017 	ldw	r16,0(sp)
    b350:	dec00404 	addi	sp,sp,16
    b354:	f800283a 	ret
    b358:	81001917 	ldw	r4,100(r16)
    b35c:	00b7ffc4 	movi	r2,-8193
    b360:	31880014 	ori	r6,r6,8192
    b364:	2084703a 	and	r2,r4,r2
    b368:	80801915 	stw	r2,100(r16)
    b36c:	80800017 	ldw	r2,0(r16)
    b370:	81000517 	ldw	r4,20(r16)
    b374:	8180030d 	sth	r6,12(r16)
    b378:	10c7c83a 	sub	r3,r2,r3
    b37c:	193fe316 	blt	r3,r4,b30c <__alt_data_end+0xfffb5bdc>
    b380:	9009883a 	mov	r4,r18
    b384:	800b883a 	mov	r5,r16
    b388:	0005fcc0 	call	5fcc <_fflush_r>
    b38c:	1000091e 	bne	r2,zero,b3b4 <__swbuf_r+0x10c>
    b390:	80800017 	ldw	r2,0(r16)
    b394:	00c00044 	movi	r3,1
    b398:	003fdd06 	br	b310 <__alt_data_end+0xfffb5be0>
    b39c:	00800284 	movi	r2,10
    b3a0:	88bfe61e 	bne	r17,r2,b33c <__alt_data_end+0xfffb5c0c>
    b3a4:	9009883a 	mov	r4,r18
    b3a8:	800b883a 	mov	r5,r16
    b3ac:	0005fcc0 	call	5fcc <_fflush_r>
    b3b0:	103fe226 	beq	r2,zero,b33c <__alt_data_end+0xfffb5c0c>
    b3b4:	00bfffc4 	movi	r2,-1
    b3b8:	003fe106 	br	b340 <__alt_data_end+0xfffb5c10>
    b3bc:	9009883a 	mov	r4,r18
    b3c0:	800b883a 	mov	r5,r16
    b3c4:	000454c0 	call	454c <__swsetup_r>
    b3c8:	1000051e 	bne	r2,zero,b3e0 <__swbuf_r+0x138>
    b3cc:	8180030b 	ldhu	r6,12(r16)
    b3d0:	80c00417 	ldw	r3,16(r16)
    b3d4:	003fc606 	br	b2f0 <__alt_data_end+0xfffb5bc0>
    b3d8:	00065880 	call	6588 <__sinit>
    b3dc:	003fbd06 	br	b2d4 <__alt_data_end+0xfffb5ba4>
    b3e0:	80c0030b 	ldhu	r3,12(r16)
    b3e4:	00bfffc4 	movi	r2,-1
    b3e8:	18c01014 	ori	r3,r3,64
    b3ec:	80c0030d 	sth	r3,12(r16)
    b3f0:	00c00244 	movi	r3,9
    b3f4:	90c00015 	stw	r3,0(r18)
    b3f8:	003fd106 	br	b340 <__alt_data_end+0xfffb5c10>

0000b3fc <__swbuf>:
    b3fc:	00c00074 	movhi	r3,1
    b400:	18ce5704 	addi	r3,r3,14684
    b404:	2005883a 	mov	r2,r4
    b408:	19000017 	ldw	r4,0(r3)
    b40c:	280d883a 	mov	r6,r5
    b410:	100b883a 	mov	r5,r2
    b414:	000b2a81 	jmpi	b2a8 <__swbuf_r>

0000b418 <_wcrtomb_r>:
    b418:	defff604 	addi	sp,sp,-40
    b41c:	00800074 	movhi	r2,1
    b420:	dc800815 	stw	r18,32(sp)
    b424:	dc400715 	stw	r17,28(sp)
    b428:	dc000615 	stw	r16,24(sp)
    b42c:	108e5b04 	addi	r2,r2,14700
    b430:	dfc00915 	stw	ra,36(sp)
    b434:	2021883a 	mov	r16,r4
    b438:	3823883a 	mov	r17,r7
    b43c:	14800017 	ldw	r18,0(r2)
    b440:	28001426 	beq	r5,zero,b494 <_wcrtomb_r+0x7c>
    b444:	d9400415 	stw	r5,16(sp)
    b448:	d9800515 	stw	r6,20(sp)
    b44c:	000707c0 	call	707c <__locale_charset>
    b450:	d9400417 	ldw	r5,16(sp)
    b454:	d9800517 	ldw	r6,20(sp)
    b458:	8009883a 	mov	r4,r16
    b45c:	dc400015 	stw	r17,0(sp)
    b460:	100f883a 	mov	r7,r2
    b464:	903ee83a 	callr	r18
    b468:	00ffffc4 	movi	r3,-1
    b46c:	10c0031e 	bne	r2,r3,b47c <_wcrtomb_r+0x64>
    b470:	88000015 	stw	zero,0(r17)
    b474:	00c02284 	movi	r3,138
    b478:	80c00015 	stw	r3,0(r16)
    b47c:	dfc00917 	ldw	ra,36(sp)
    b480:	dc800817 	ldw	r18,32(sp)
    b484:	dc400717 	ldw	r17,28(sp)
    b488:	dc000617 	ldw	r16,24(sp)
    b48c:	dec00a04 	addi	sp,sp,40
    b490:	f800283a 	ret
    b494:	000707c0 	call	707c <__locale_charset>
    b498:	8009883a 	mov	r4,r16
    b49c:	dc400015 	stw	r17,0(sp)
    b4a0:	d9400104 	addi	r5,sp,4
    b4a4:	000d883a 	mov	r6,zero
    b4a8:	100f883a 	mov	r7,r2
    b4ac:	903ee83a 	callr	r18
    b4b0:	003fed06 	br	b468 <__alt_data_end+0xfffb5d38>

0000b4b4 <wcrtomb>:
    b4b4:	defff504 	addi	sp,sp,-44
    b4b8:	dc400515 	stw	r17,20(sp)
    b4bc:	dc000415 	stw	r16,16(sp)
    b4c0:	dfc00a15 	stw	ra,40(sp)
    b4c4:	dd400915 	stw	r21,36(sp)
    b4c8:	dd000815 	stw	r20,32(sp)
    b4cc:	dcc00715 	stw	r19,28(sp)
    b4d0:	dc800615 	stw	r18,24(sp)
    b4d4:	2021883a 	mov	r16,r4
    b4d8:	3023883a 	mov	r17,r6
    b4dc:	20001d26 	beq	r4,zero,b554 <wcrtomb+0xa0>
    b4e0:	04800074 	movhi	r18,1
    b4e4:	948e5704 	addi	r18,r18,14684
    b4e8:	00800074 	movhi	r2,1
    b4ec:	95400017 	ldw	r21,0(r18)
    b4f0:	108e5b04 	addi	r2,r2,14700
    b4f4:	15000017 	ldw	r20,0(r2)
    b4f8:	2827883a 	mov	r19,r5
    b4fc:	000707c0 	call	707c <__locale_charset>
    b500:	a809883a 	mov	r4,r21
    b504:	dc400015 	stw	r17,0(sp)
    b508:	800b883a 	mov	r5,r16
    b50c:	980d883a 	mov	r6,r19
    b510:	100f883a 	mov	r7,r2
    b514:	a03ee83a 	callr	r20
    b518:	00ffffc4 	movi	r3,-1
    b51c:	10c0041e 	bne	r2,r3,b530 <wcrtomb+0x7c>
    b520:	90c00017 	ldw	r3,0(r18)
    b524:	01002284 	movi	r4,138
    b528:	88000015 	stw	zero,0(r17)
    b52c:	19000015 	stw	r4,0(r3)
    b530:	dfc00a17 	ldw	ra,40(sp)
    b534:	dd400917 	ldw	r21,36(sp)
    b538:	dd000817 	ldw	r20,32(sp)
    b53c:	dcc00717 	ldw	r19,28(sp)
    b540:	dc800617 	ldw	r18,24(sp)
    b544:	dc400517 	ldw	r17,20(sp)
    b548:	dc000417 	ldw	r16,16(sp)
    b54c:	dec00b04 	addi	sp,sp,44
    b550:	f800283a 	ret
    b554:	04800074 	movhi	r18,1
    b558:	948e5704 	addi	r18,r18,14684
    b55c:	00800074 	movhi	r2,1
    b560:	94c00017 	ldw	r19,0(r18)
    b564:	108e5b04 	addi	r2,r2,14700
    b568:	14000017 	ldw	r16,0(r2)
    b56c:	000707c0 	call	707c <__locale_charset>
    b570:	9809883a 	mov	r4,r19
    b574:	dc400015 	stw	r17,0(sp)
    b578:	d9400104 	addi	r5,sp,4
    b57c:	000d883a 	mov	r6,zero
    b580:	100f883a 	mov	r7,r2
    b584:	803ee83a 	callr	r16
    b588:	003fe306 	br	b518 <__alt_data_end+0xfffb5de8>

0000b58c <__ascii_wctomb>:
    b58c:	28000526 	beq	r5,zero,b5a4 <__ascii_wctomb+0x18>
    b590:	00803fc4 	movi	r2,255
    b594:	11800536 	bltu	r2,r6,b5ac <__ascii_wctomb+0x20>
    b598:	29800005 	stb	r6,0(r5)
    b59c:	00800044 	movi	r2,1
    b5a0:	f800283a 	ret
    b5a4:	0005883a 	mov	r2,zero
    b5a8:	f800283a 	ret
    b5ac:	00802284 	movi	r2,138
    b5b0:	20800015 	stw	r2,0(r4)
    b5b4:	00bfffc4 	movi	r2,-1
    b5b8:	f800283a 	ret

0000b5bc <_wctomb_r>:
    b5bc:	00800074 	movhi	r2,1
    b5c0:	defff904 	addi	sp,sp,-28
    b5c4:	108e5b04 	addi	r2,r2,14700
    b5c8:	dfc00615 	stw	ra,24(sp)
    b5cc:	dc400515 	stw	r17,20(sp)
    b5d0:	dc000415 	stw	r16,16(sp)
    b5d4:	3823883a 	mov	r17,r7
    b5d8:	14000017 	ldw	r16,0(r2)
    b5dc:	d9000115 	stw	r4,4(sp)
    b5e0:	d9400215 	stw	r5,8(sp)
    b5e4:	d9800315 	stw	r6,12(sp)
    b5e8:	000707c0 	call	707c <__locale_charset>
    b5ec:	d9000117 	ldw	r4,4(sp)
    b5f0:	d9400217 	ldw	r5,8(sp)
    b5f4:	d9800317 	ldw	r6,12(sp)
    b5f8:	dc400015 	stw	r17,0(sp)
    b5fc:	100f883a 	mov	r7,r2
    b600:	803ee83a 	callr	r16
    b604:	dfc00617 	ldw	ra,24(sp)
    b608:	dc400517 	ldw	r17,20(sp)
    b60c:	dc000417 	ldw	r16,16(sp)
    b610:	dec00704 	addi	sp,sp,28
    b614:	f800283a 	ret

0000b618 <__udivdi3>:
    b618:	defff504 	addi	sp,sp,-44
    b61c:	dcc00415 	stw	r19,16(sp)
    b620:	dc000115 	stw	r16,4(sp)
    b624:	dfc00a15 	stw	ra,40(sp)
    b628:	df000915 	stw	fp,36(sp)
    b62c:	ddc00815 	stw	r23,32(sp)
    b630:	dd800715 	stw	r22,28(sp)
    b634:	dd400615 	stw	r21,24(sp)
    b638:	dd000515 	stw	r20,20(sp)
    b63c:	dc800315 	stw	r18,12(sp)
    b640:	dc400215 	stw	r17,8(sp)
    b644:	2027883a 	mov	r19,r4
    b648:	2821883a 	mov	r16,r5
    b64c:	3800471e 	bne	r7,zero,b76c <__udivdi3+0x154>
    b650:	3025883a 	mov	r18,r6
    b654:	2023883a 	mov	r17,r4
    b658:	2980592e 	bgeu	r5,r6,b7c0 <__udivdi3+0x1a8>
    b65c:	00bfffd4 	movui	r2,65535
    b660:	2829883a 	mov	r20,r5
    b664:	1180b236 	bltu	r2,r6,b930 <__udivdi3+0x318>
    b668:	00803fc4 	movi	r2,255
    b66c:	1181622e 	bgeu	r2,r6,bbf8 <__udivdi3+0x5e0>
    b670:	00800204 	movi	r2,8
    b674:	1007883a 	mov	r3,r2
    b678:	3084d83a 	srl	r2,r6,r2
    b67c:	01000074 	movhi	r4,1
    b680:	21075e04 	addi	r4,r4,7544
    b684:	2085883a 	add	r2,r4,r2
    b688:	11000003 	ldbu	r4,0(r2)
    b68c:	20c9883a 	add	r4,r4,r3
    b690:	00c00804 	movi	r3,32
    b694:	1907c83a 	sub	r3,r3,r4
    b698:	18000526 	beq	r3,zero,b6b0 <__udivdi3+0x98>
    b69c:	80e0983a 	sll	r16,r16,r3
    b6a0:	9908d83a 	srl	r4,r19,r4
    b6a4:	30e4983a 	sll	r18,r6,r3
    b6a8:	98e2983a 	sll	r17,r19,r3
    b6ac:	8128b03a 	or	r20,r16,r4
    b6b0:	902ad43a 	srli	r21,r18,16
    b6b4:	a009883a 	mov	r4,r20
    b6b8:	95bfffcc 	andi	r22,r18,65535
    b6bc:	a80b883a 	mov	r5,r21
    b6c0:	000c3980 	call	c398 <__umodsi3>
    b6c4:	a009883a 	mov	r4,r20
    b6c8:	a80b883a 	mov	r5,r21
    b6cc:	102f883a 	mov	r23,r2
    b6d0:	000c3900 	call	c390 <__udivsi3>
    b6d4:	1009883a 	mov	r4,r2
    b6d8:	b00b883a 	mov	r5,r22
    b6dc:	1021883a 	mov	r16,r2
    b6e0:	000c3a00 	call	c3a0 <__mulsi3>
    b6e4:	b82e943a 	slli	r23,r23,16
    b6e8:	8808d43a 	srli	r4,r17,16
    b6ec:	b906b03a 	or	r3,r23,r4
    b6f0:	1880052e 	bgeu	r3,r2,b708 <__udivdi3+0xf0>
    b6f4:	1c87883a 	add	r3,r3,r18
    b6f8:	813fffc4 	addi	r4,r16,-1
    b6fc:	1c800136 	bltu	r3,r18,b704 <__udivdi3+0xec>
    b700:	18815236 	bltu	r3,r2,bc4c <__udivdi3+0x634>
    b704:	2021883a 	mov	r16,r4
    b708:	18a7c83a 	sub	r19,r3,r2
    b70c:	9809883a 	mov	r4,r19
    b710:	a80b883a 	mov	r5,r21
    b714:	000c3980 	call	c398 <__umodsi3>
    b718:	1029883a 	mov	r20,r2
    b71c:	9809883a 	mov	r4,r19
    b720:	a80b883a 	mov	r5,r21
    b724:	a028943a 	slli	r20,r20,16
    b728:	000c3900 	call	c390 <__udivsi3>
    b72c:	1009883a 	mov	r4,r2
    b730:	b00b883a 	mov	r5,r22
    b734:	8c7fffcc 	andi	r17,r17,65535
    b738:	1027883a 	mov	r19,r2
    b73c:	a462b03a 	or	r17,r20,r17
    b740:	000c3a00 	call	c3a0 <__mulsi3>
    b744:	8880052e 	bgeu	r17,r2,b75c <__udivdi3+0x144>
    b748:	8ca3883a 	add	r17,r17,r18
    b74c:	98ffffc4 	addi	r3,r19,-1
    b750:	8c811036 	bltu	r17,r18,bb94 <__udivdi3+0x57c>
    b754:	88810f2e 	bgeu	r17,r2,bb94 <__udivdi3+0x57c>
    b758:	9cffff84 	addi	r19,r19,-2
    b75c:	8020943a 	slli	r16,r16,16
    b760:	0007883a 	mov	r3,zero
    b764:	9c04b03a 	or	r2,r19,r16
    b768:	00006006 	br	b8ec <__udivdi3+0x2d4>
    b76c:	29c05d36 	bltu	r5,r7,b8e4 <__udivdi3+0x2cc>
    b770:	00bfffd4 	movui	r2,65535
    b774:	11c0692e 	bgeu	r2,r7,b91c <__udivdi3+0x304>
    b778:	00804034 	movhi	r2,256
    b77c:	10bfffc4 	addi	r2,r2,-1
    b780:	11c10e2e 	bgeu	r2,r7,bbbc <__udivdi3+0x5a4>
    b784:	01400604 	movi	r5,24
    b788:	2811883a 	mov	r8,r5
    b78c:	394ad83a 	srl	r5,r7,r5
    b790:	00800074 	movhi	r2,1
    b794:	10875e04 	addi	r2,r2,7544
    b798:	114b883a 	add	r5,r2,r5
    b79c:	29400003 	ldbu	r5,0(r5)
    b7a0:	00c00804 	movi	r3,32
    b7a4:	2a0b883a 	add	r5,r5,r8
    b7a8:	196fc83a 	sub	r23,r3,r5
    b7ac:	b8006b1e 	bne	r23,zero,b95c <__udivdi3+0x344>
    b7b0:	3c011436 	bltu	r7,r16,bc04 <__udivdi3+0x5ec>
    b7b4:	9985403a 	cmpgeu	r2,r19,r6
    b7b8:	0007883a 	mov	r3,zero
    b7bc:	00004b06 	br	b8ec <__udivdi3+0x2d4>
    b7c0:	3000041e 	bne	r6,zero,b7d4 <__udivdi3+0x1bc>
    b7c4:	01000044 	movi	r4,1
    b7c8:	000b883a 	mov	r5,zero
    b7cc:	000c3900 	call	c390 <__udivsi3>
    b7d0:	1025883a 	mov	r18,r2
    b7d4:	00bfffd4 	movui	r2,65535
    b7d8:	14805b2e 	bgeu	r2,r18,b948 <__udivdi3+0x330>
    b7dc:	00804034 	movhi	r2,256
    b7e0:	10bfffc4 	addi	r2,r2,-1
    b7e4:	1480fe2e 	bgeu	r2,r18,bbe0 <__udivdi3+0x5c8>
    b7e8:	00800604 	movi	r2,24
    b7ec:	1007883a 	mov	r3,r2
    b7f0:	9084d83a 	srl	r2,r18,r2
    b7f4:	01000074 	movhi	r4,1
    b7f8:	21075e04 	addi	r4,r4,7544
    b7fc:	2085883a 	add	r2,r4,r2
    b800:	11800003 	ldbu	r6,0(r2)
    b804:	01c00804 	movi	r7,32
    b808:	30c7883a 	add	r3,r6,r3
    b80c:	38cfc83a 	sub	r7,r7,r3
    b810:	3800a71e 	bne	r7,zero,bab0 <__udivdi3+0x498>
    b814:	9028d43a 	srli	r20,r18,16
    b818:	84a1c83a 	sub	r16,r16,r18
    b81c:	957fffcc 	andi	r21,r18,65535
    b820:	00c00044 	movi	r3,1
    b824:	8009883a 	mov	r4,r16
    b828:	a00b883a 	mov	r5,r20
    b82c:	d8c00015 	stw	r3,0(sp)
    b830:	000c3980 	call	c398 <__umodsi3>
    b834:	8009883a 	mov	r4,r16
    b838:	a00b883a 	mov	r5,r20
    b83c:	102d883a 	mov	r22,r2
    b840:	000c3900 	call	c390 <__udivsi3>
    b844:	1009883a 	mov	r4,r2
    b848:	a80b883a 	mov	r5,r21
    b84c:	1021883a 	mov	r16,r2
    b850:	000c3a00 	call	c3a0 <__mulsi3>
    b854:	b02c943a 	slli	r22,r22,16
    b858:	880ed43a 	srli	r7,r17,16
    b85c:	d8c00017 	ldw	r3,0(sp)
    b860:	b1ccb03a 	or	r6,r22,r7
    b864:	3080052e 	bgeu	r6,r2,b87c <__udivdi3+0x264>
    b868:	348d883a 	add	r6,r6,r18
    b86c:	813fffc4 	addi	r4,r16,-1
    b870:	34800136 	bltu	r6,r18,b878 <__udivdi3+0x260>
    b874:	3080f236 	bltu	r6,r2,bc40 <__udivdi3+0x628>
    b878:	2021883a 	mov	r16,r4
    b87c:	30a7c83a 	sub	r19,r6,r2
    b880:	9809883a 	mov	r4,r19
    b884:	a00b883a 	mov	r5,r20
    b888:	d8c00015 	stw	r3,0(sp)
    b88c:	000c3980 	call	c398 <__umodsi3>
    b890:	102d883a 	mov	r22,r2
    b894:	9809883a 	mov	r4,r19
    b898:	a00b883a 	mov	r5,r20
    b89c:	b02c943a 	slli	r22,r22,16
    b8a0:	000c3900 	call	c390 <__udivsi3>
    b8a4:	1009883a 	mov	r4,r2
    b8a8:	a80b883a 	mov	r5,r21
    b8ac:	8c7fffcc 	andi	r17,r17,65535
    b8b0:	1027883a 	mov	r19,r2
    b8b4:	b462b03a 	or	r17,r22,r17
    b8b8:	000c3a00 	call	c3a0 <__mulsi3>
    b8bc:	d8c00017 	ldw	r3,0(sp)
    b8c0:	8880052e 	bgeu	r17,r2,b8d8 <__udivdi3+0x2c0>
    b8c4:	8ca3883a 	add	r17,r17,r18
    b8c8:	993fffc4 	addi	r4,r19,-1
    b8cc:	8c80af36 	bltu	r17,r18,bb8c <__udivdi3+0x574>
    b8d0:	8880ae2e 	bgeu	r17,r2,bb8c <__udivdi3+0x574>
    b8d4:	9cffff84 	addi	r19,r19,-2
    b8d8:	8020943a 	slli	r16,r16,16
    b8dc:	9c04b03a 	or	r2,r19,r16
    b8e0:	00000206 	br	b8ec <__udivdi3+0x2d4>
    b8e4:	0007883a 	mov	r3,zero
    b8e8:	0005883a 	mov	r2,zero
    b8ec:	dfc00a17 	ldw	ra,40(sp)
    b8f0:	df000917 	ldw	fp,36(sp)
    b8f4:	ddc00817 	ldw	r23,32(sp)
    b8f8:	dd800717 	ldw	r22,28(sp)
    b8fc:	dd400617 	ldw	r21,24(sp)
    b900:	dd000517 	ldw	r20,20(sp)
    b904:	dcc00417 	ldw	r19,16(sp)
    b908:	dc800317 	ldw	r18,12(sp)
    b90c:	dc400217 	ldw	r17,8(sp)
    b910:	dc000117 	ldw	r16,4(sp)
    b914:	dec00b04 	addi	sp,sp,44
    b918:	f800283a 	ret
    b91c:	00803fc4 	movi	r2,255
    b920:	11c0a92e 	bgeu	r2,r7,bbc8 <__udivdi3+0x5b0>
    b924:	01400204 	movi	r5,8
    b928:	2811883a 	mov	r8,r5
    b92c:	003f9706 	br	b78c <__alt_data_end+0xfffb605c>
    b930:	00804034 	movhi	r2,256
    b934:	10bfffc4 	addi	r2,r2,-1
    b938:	1180a62e 	bgeu	r2,r6,bbd4 <__udivdi3+0x5bc>
    b93c:	00800604 	movi	r2,24
    b940:	1007883a 	mov	r3,r2
    b944:	003f4c06 	br	b678 <__alt_data_end+0xfffb5f48>
    b948:	00803fc4 	movi	r2,255
    b94c:	1480a72e 	bgeu	r2,r18,bbec <__udivdi3+0x5d4>
    b950:	00800204 	movi	r2,8
    b954:	1007883a 	mov	r3,r2
    b958:	003fa506 	br	b7f0 <__alt_data_end+0xfffb60c0>
    b95c:	3178d83a 	srl	fp,r6,r5
    b960:	3dce983a 	sll	r7,r7,r23
    b964:	8168d83a 	srl	r20,r16,r5
    b968:	9950d83a 	srl	r8,r19,r5
    b96c:	3f38b03a 	or	fp,r7,fp
    b970:	e024d43a 	srli	r18,fp,16
    b974:	85e0983a 	sll	r16,r16,r23
    b978:	a009883a 	mov	r4,r20
    b97c:	900b883a 	mov	r5,r18
    b980:	8220b03a 	or	r16,r16,r8
    b984:	35ea983a 	sll	r21,r6,r23
    b988:	000c3980 	call	c398 <__umodsi3>
    b98c:	a009883a 	mov	r4,r20
    b990:	900b883a 	mov	r5,r18
    b994:	1023883a 	mov	r17,r2
    b998:	e5bfffcc 	andi	r22,fp,65535
    b99c:	000c3900 	call	c390 <__udivsi3>
    b9a0:	1009883a 	mov	r4,r2
    b9a4:	b00b883a 	mov	r5,r22
    b9a8:	1029883a 	mov	r20,r2
    b9ac:	000c3a00 	call	c3a0 <__mulsi3>
    b9b0:	8806943a 	slli	r3,r17,16
    b9b4:	8014d43a 	srli	r10,r16,16
    b9b8:	1a92b03a 	or	r9,r3,r10
    b9bc:	4880042e 	bgeu	r9,r2,b9d0 <__udivdi3+0x3b8>
    b9c0:	4f13883a 	add	r9,r9,fp
    b9c4:	a0ffffc4 	addi	r3,r20,-1
    b9c8:	4f00952e 	bgeu	r9,fp,bc20 <__udivdi3+0x608>
    b9cc:	1829883a 	mov	r20,r3
    b9d0:	48a3c83a 	sub	r17,r9,r2
    b9d4:	8809883a 	mov	r4,r17
    b9d8:	900b883a 	mov	r5,r18
    b9dc:	000c3980 	call	c398 <__umodsi3>
    b9e0:	8809883a 	mov	r4,r17
    b9e4:	900b883a 	mov	r5,r18
    b9e8:	d8800015 	stw	r2,0(sp)
    b9ec:	000c3900 	call	c390 <__udivsi3>
    b9f0:	1009883a 	mov	r4,r2
    b9f4:	b00b883a 	mov	r5,r22
    b9f8:	1023883a 	mov	r17,r2
    b9fc:	000c3a00 	call	c3a0 <__mulsi3>
    ba00:	d8c00017 	ldw	r3,0(sp)
    ba04:	823fffcc 	andi	r8,r16,65535
    ba08:	1806943a 	slli	r3,r3,16
    ba0c:	1a20b03a 	or	r16,r3,r8
    ba10:	8080042e 	bgeu	r16,r2,ba24 <__udivdi3+0x40c>
    ba14:	8721883a 	add	r16,r16,fp
    ba18:	88ffffc4 	addi	r3,r17,-1
    ba1c:	87007c2e 	bgeu	r16,fp,bc10 <__udivdi3+0x5f8>
    ba20:	1823883a 	mov	r17,r3
    ba24:	a028943a 	slli	r20,r20,16
    ba28:	acbfffcc 	andi	r18,r21,65535
    ba2c:	900b883a 	mov	r5,r18
    ba30:	8d28b03a 	or	r20,r17,r20
    ba34:	a022d43a 	srli	r17,r20,16
    ba38:	a5bfffcc 	andi	r22,r20,65535
    ba3c:	b009883a 	mov	r4,r22
    ba40:	a82ad43a 	srli	r21,r21,16
    ba44:	80a1c83a 	sub	r16,r16,r2
    ba48:	000c3a00 	call	c3a0 <__mulsi3>
    ba4c:	8809883a 	mov	r4,r17
    ba50:	900b883a 	mov	r5,r18
    ba54:	1039883a 	mov	fp,r2
    ba58:	000c3a00 	call	c3a0 <__mulsi3>
    ba5c:	8809883a 	mov	r4,r17
    ba60:	a80b883a 	mov	r5,r21
    ba64:	1025883a 	mov	r18,r2
    ba68:	000c3a00 	call	c3a0 <__mulsi3>
    ba6c:	b009883a 	mov	r4,r22
    ba70:	a80b883a 	mov	r5,r21
    ba74:	1023883a 	mov	r17,r2
    ba78:	000c3a00 	call	c3a0 <__mulsi3>
    ba7c:	e006d43a 	srli	r3,fp,16
    ba80:	9085883a 	add	r2,r18,r2
    ba84:	10c7883a 	add	r3,r2,r3
    ba88:	1c80022e 	bgeu	r3,r18,ba94 <__udivdi3+0x47c>
    ba8c:	00800074 	movhi	r2,1
    ba90:	88a3883a 	add	r17,r17,r2
    ba94:	1808d43a 	srli	r4,r3,16
    ba98:	8909883a 	add	r4,r17,r4
    ba9c:	81004436 	bltu	r16,r4,bbb0 <__udivdi3+0x598>
    baa0:	81003e26 	beq	r16,r4,bb9c <__udivdi3+0x584>
    baa4:	a005883a 	mov	r2,r20
    baa8:	0007883a 	mov	r3,zero
    baac:	003f8f06 	br	b8ec <__alt_data_end+0xfffb61bc>
    bab0:	91e4983a 	sll	r18,r18,r7
    bab4:	80eed83a 	srl	r23,r16,r3
    bab8:	81cc983a 	sll	r6,r16,r7
    babc:	9028d43a 	srli	r20,r18,16
    bac0:	98c6d83a 	srl	r3,r19,r3
    bac4:	b809883a 	mov	r4,r23
    bac8:	a00b883a 	mov	r5,r20
    bacc:	30ecb03a 	or	r22,r6,r3
    bad0:	99e2983a 	sll	r17,r19,r7
    bad4:	000c3980 	call	c398 <__umodsi3>
    bad8:	b809883a 	mov	r4,r23
    badc:	a00b883a 	mov	r5,r20
    bae0:	1021883a 	mov	r16,r2
    bae4:	957fffcc 	andi	r21,r18,65535
    bae8:	000c3900 	call	c390 <__udivsi3>
    baec:	a80b883a 	mov	r5,r21
    baf0:	1009883a 	mov	r4,r2
    baf4:	102f883a 	mov	r23,r2
    baf8:	000c3a00 	call	c3a0 <__mulsi3>
    bafc:	8020943a 	slli	r16,r16,16
    bb00:	b00ad43a 	srli	r5,r22,16
    bb04:	814cb03a 	or	r6,r16,r5
    bb08:	3080062e 	bgeu	r6,r2,bb24 <__udivdi3+0x50c>
    bb0c:	348d883a 	add	r6,r6,r18
    bb10:	b8ffffc4 	addi	r3,r23,-1
    bb14:	34804836 	bltu	r6,r18,bc38 <__udivdi3+0x620>
    bb18:	3080472e 	bgeu	r6,r2,bc38 <__udivdi3+0x620>
    bb1c:	bdffff84 	addi	r23,r23,-2
    bb20:	348d883a 	add	r6,r6,r18
    bb24:	30a7c83a 	sub	r19,r6,r2
    bb28:	9809883a 	mov	r4,r19
    bb2c:	a00b883a 	mov	r5,r20
    bb30:	000c3980 	call	c398 <__umodsi3>
    bb34:	9809883a 	mov	r4,r19
    bb38:	a00b883a 	mov	r5,r20
    bb3c:	1039883a 	mov	fp,r2
    bb40:	000c3900 	call	c390 <__udivsi3>
    bb44:	1009883a 	mov	r4,r2
    bb48:	a80b883a 	mov	r5,r21
    bb4c:	e038943a 	slli	fp,fp,16
    bb50:	1027883a 	mov	r19,r2
    bb54:	000c3a00 	call	c3a0 <__mulsi3>
    bb58:	b1bfffcc 	andi	r6,r22,65535
    bb5c:	e18cb03a 	or	r6,fp,r6
    bb60:	3080062e 	bgeu	r6,r2,bb7c <__udivdi3+0x564>
    bb64:	348d883a 	add	r6,r6,r18
    bb68:	98ffffc4 	addi	r3,r19,-1
    bb6c:	34803036 	bltu	r6,r18,bc30 <__udivdi3+0x618>
    bb70:	30802f2e 	bgeu	r6,r2,bc30 <__udivdi3+0x618>
    bb74:	9cffff84 	addi	r19,r19,-2
    bb78:	348d883a 	add	r6,r6,r18
    bb7c:	b82e943a 	slli	r23,r23,16
    bb80:	30a1c83a 	sub	r16,r6,r2
    bb84:	9dc6b03a 	or	r3,r19,r23
    bb88:	003f2606 	br	b824 <__alt_data_end+0xfffb60f4>
    bb8c:	2027883a 	mov	r19,r4
    bb90:	003f5106 	br	b8d8 <__alt_data_end+0xfffb61a8>
    bb94:	1827883a 	mov	r19,r3
    bb98:	003ef006 	br	b75c <__alt_data_end+0xfffb602c>
    bb9c:	1808943a 	slli	r4,r3,16
    bba0:	9dc6983a 	sll	r3,r19,r23
    bba4:	e73fffcc 	andi	fp,fp,65535
    bba8:	2709883a 	add	r4,r4,fp
    bbac:	193fbd2e 	bgeu	r3,r4,baa4 <__alt_data_end+0xfffb6374>
    bbb0:	a0bfffc4 	addi	r2,r20,-1
    bbb4:	0007883a 	mov	r3,zero
    bbb8:	003f4c06 	br	b8ec <__alt_data_end+0xfffb61bc>
    bbbc:	01400404 	movi	r5,16
    bbc0:	2811883a 	mov	r8,r5
    bbc4:	003ef106 	br	b78c <__alt_data_end+0xfffb605c>
    bbc8:	000b883a 	mov	r5,zero
    bbcc:	0011883a 	mov	r8,zero
    bbd0:	003eee06 	br	b78c <__alt_data_end+0xfffb605c>
    bbd4:	00800404 	movi	r2,16
    bbd8:	1007883a 	mov	r3,r2
    bbdc:	003ea606 	br	b678 <__alt_data_end+0xfffb5f48>
    bbe0:	00800404 	movi	r2,16
    bbe4:	1007883a 	mov	r3,r2
    bbe8:	003f0106 	br	b7f0 <__alt_data_end+0xfffb60c0>
    bbec:	0005883a 	mov	r2,zero
    bbf0:	0007883a 	mov	r3,zero
    bbf4:	003efe06 	br	b7f0 <__alt_data_end+0xfffb60c0>
    bbf8:	0005883a 	mov	r2,zero
    bbfc:	0007883a 	mov	r3,zero
    bc00:	003e9d06 	br	b678 <__alt_data_end+0xfffb5f48>
    bc04:	0007883a 	mov	r3,zero
    bc08:	00800044 	movi	r2,1
    bc0c:	003f3706 	br	b8ec <__alt_data_end+0xfffb61bc>
    bc10:	80bf832e 	bgeu	r16,r2,ba20 <__alt_data_end+0xfffb62f0>
    bc14:	8c7fff84 	addi	r17,r17,-2
    bc18:	8721883a 	add	r16,r16,fp
    bc1c:	003f8106 	br	ba24 <__alt_data_end+0xfffb62f4>
    bc20:	48bf6a2e 	bgeu	r9,r2,b9cc <__alt_data_end+0xfffb629c>
    bc24:	a53fff84 	addi	r20,r20,-2
    bc28:	4f13883a 	add	r9,r9,fp
    bc2c:	003f6806 	br	b9d0 <__alt_data_end+0xfffb62a0>
    bc30:	1827883a 	mov	r19,r3
    bc34:	003fd106 	br	bb7c <__alt_data_end+0xfffb644c>
    bc38:	182f883a 	mov	r23,r3
    bc3c:	003fb906 	br	bb24 <__alt_data_end+0xfffb63f4>
    bc40:	843fff84 	addi	r16,r16,-2
    bc44:	348d883a 	add	r6,r6,r18
    bc48:	003f0c06 	br	b87c <__alt_data_end+0xfffb614c>
    bc4c:	843fff84 	addi	r16,r16,-2
    bc50:	1c87883a 	add	r3,r3,r18
    bc54:	003eac06 	br	b708 <__alt_data_end+0xfffb5fd8>

0000bc58 <__umoddi3>:
    bc58:	defff404 	addi	sp,sp,-48
    bc5c:	dd800815 	stw	r22,32(sp)
    bc60:	dc400315 	stw	r17,12(sp)
    bc64:	dc000215 	stw	r16,8(sp)
    bc68:	dfc00b15 	stw	ra,44(sp)
    bc6c:	df000a15 	stw	fp,40(sp)
    bc70:	ddc00915 	stw	r23,36(sp)
    bc74:	dd400715 	stw	r21,28(sp)
    bc78:	dd000615 	stw	r20,24(sp)
    bc7c:	dcc00515 	stw	r19,20(sp)
    bc80:	dc800415 	stw	r18,16(sp)
    bc84:	2021883a 	mov	r16,r4
    bc88:	2823883a 	mov	r17,r5
    bc8c:	282d883a 	mov	r22,r5
    bc90:	38003c1e 	bne	r7,zero,bd84 <__umoddi3+0x12c>
    bc94:	3027883a 	mov	r19,r6
    bc98:	2029883a 	mov	r20,r4
    bc9c:	2980522e 	bgeu	r5,r6,bde8 <__umoddi3+0x190>
    bca0:	00bfffd4 	movui	r2,65535
    bca4:	1180a436 	bltu	r2,r6,bf38 <__umoddi3+0x2e0>
    bca8:	00803fc4 	movi	r2,255
    bcac:	11815e2e 	bgeu	r2,r6,c228 <__umoddi3+0x5d0>
    bcb0:	01400204 	movi	r5,8
    bcb4:	2805883a 	mov	r2,r5
    bcb8:	314ad83a 	srl	r5,r6,r5
    bcbc:	00c00074 	movhi	r3,1
    bcc0:	18c75e04 	addi	r3,r3,7544
    bcc4:	194b883a 	add	r5,r3,r5
    bcc8:	29000003 	ldbu	r4,0(r5)
    bccc:	2089883a 	add	r4,r4,r2
    bcd0:	00800804 	movi	r2,32
    bcd4:	1105c83a 	sub	r2,r2,r4
    bcd8:	10010c26 	beq	r2,zero,c10c <__umoddi3+0x4b4>
    bcdc:	88a2983a 	sll	r17,r17,r2
    bce0:	8108d83a 	srl	r4,r16,r4
    bce4:	30a6983a 	sll	r19,r6,r2
    bce8:	80a8983a 	sll	r20,r16,r2
    bcec:	1025883a 	mov	r18,r2
    bcf0:	892cb03a 	or	r22,r17,r4
    bcf4:	9822d43a 	srli	r17,r19,16
    bcf8:	b009883a 	mov	r4,r22
    bcfc:	9d7fffcc 	andi	r21,r19,65535
    bd00:	880b883a 	mov	r5,r17
    bd04:	000c3980 	call	c398 <__umodsi3>
    bd08:	b009883a 	mov	r4,r22
    bd0c:	880b883a 	mov	r5,r17
    bd10:	102f883a 	mov	r23,r2
    bd14:	000c3900 	call	c390 <__udivsi3>
    bd18:	1009883a 	mov	r4,r2
    bd1c:	a80b883a 	mov	r5,r21
    bd20:	000c3a00 	call	c3a0 <__mulsi3>
    bd24:	b82e943a 	slli	r23,r23,16
    bd28:	a008d43a 	srli	r4,r20,16
    bd2c:	b906b03a 	or	r3,r23,r4
    bd30:	1880042e 	bgeu	r3,r2,bd44 <__umoddi3+0xec>
    bd34:	1cc7883a 	add	r3,r3,r19
    bd38:	1cc00236 	bltu	r3,r19,bd44 <__umoddi3+0xec>
    bd3c:	1880012e 	bgeu	r3,r2,bd44 <__umoddi3+0xec>
    bd40:	1cc7883a 	add	r3,r3,r19
    bd44:	18a1c83a 	sub	r16,r3,r2
    bd48:	8009883a 	mov	r4,r16
    bd4c:	880b883a 	mov	r5,r17
    bd50:	000c3980 	call	c398 <__umodsi3>
    bd54:	8009883a 	mov	r4,r16
    bd58:	880b883a 	mov	r5,r17
    bd5c:	102d883a 	mov	r22,r2
    bd60:	000c3900 	call	c390 <__udivsi3>
    bd64:	1009883a 	mov	r4,r2
    bd68:	a80b883a 	mov	r5,r21
    bd6c:	b02c943a 	slli	r22,r22,16
    bd70:	000c3a00 	call	c3a0 <__mulsi3>
    bd74:	a13fffcc 	andi	r4,r20,65535
    bd78:	b106b03a 	or	r3,r22,r4
    bd7c:	1880572e 	bgeu	r3,r2,bedc <__umoddi3+0x284>
    bd80:	00005206 	br	becc <__umoddi3+0x274>
    bd84:	29c05936 	bltu	r5,r7,beec <__umoddi3+0x294>
    bd88:	00bfffd4 	movui	r2,65535
    bd8c:	11c0652e 	bgeu	r2,r7,bf24 <__umoddi3+0x2cc>
    bd90:	00804034 	movhi	r2,256
    bd94:	10bfffc4 	addi	r2,r2,-1
    bd98:	11c1172e 	bgeu	r2,r7,c1f8 <__umoddi3+0x5a0>
    bd9c:	01400604 	movi	r5,24
    bda0:	282b883a 	mov	r21,r5
    bda4:	394ad83a 	srl	r5,r7,r5
    bda8:	00c00074 	movhi	r3,1
    bdac:	18c75e04 	addi	r3,r3,7544
    bdb0:	194b883a 	add	r5,r3,r5
    bdb4:	28800003 	ldbu	r2,0(r5)
    bdb8:	00c00804 	movi	r3,32
    bdbc:	156b883a 	add	r21,r2,r21
    bdc0:	1d69c83a 	sub	r20,r3,r21
    bdc4:	a000671e 	bne	r20,zero,bf64 <__umoddi3+0x30c>
    bdc8:	3c400136 	bltu	r7,r17,bdd0 <__umoddi3+0x178>
    bdcc:	81812336 	bltu	r16,r6,c25c <__umoddi3+0x604>
    bdd0:	8185c83a 	sub	r2,r16,r6
    bdd4:	89e3c83a 	sub	r17,r17,r7
    bdd8:	8087803a 	cmpltu	r3,r16,r2
    bddc:	88edc83a 	sub	r22,r17,r3
    bde0:	b007883a 	mov	r3,r22
    bde4:	00004306 	br	bef4 <__umoddi3+0x29c>
    bde8:	3000041e 	bne	r6,zero,bdfc <__umoddi3+0x1a4>
    bdec:	01000044 	movi	r4,1
    bdf0:	000b883a 	mov	r5,zero
    bdf4:	000c3900 	call	c390 <__udivsi3>
    bdf8:	1027883a 	mov	r19,r2
    bdfc:	00bfffd4 	movui	r2,65535
    be00:	14c0532e 	bgeu	r2,r19,bf50 <__umoddi3+0x2f8>
    be04:	00804034 	movhi	r2,256
    be08:	10bfffc4 	addi	r2,r2,-1
    be0c:	14c1032e 	bgeu	r2,r19,c21c <__umoddi3+0x5c4>
    be10:	00800604 	movi	r2,24
    be14:	1007883a 	mov	r3,r2
    be18:	9884d83a 	srl	r2,r19,r2
    be1c:	01000074 	movhi	r4,1
    be20:	21075e04 	addi	r4,r4,7544
    be24:	2085883a 	add	r2,r4,r2
    be28:	11000003 	ldbu	r4,0(r2)
    be2c:	00800804 	movi	r2,32
    be30:	20c7883a 	add	r3,r4,r3
    be34:	10c5c83a 	sub	r2,r2,r3
    be38:	1000b61e 	bne	r2,zero,c114 <__umoddi3+0x4bc>
    be3c:	982ad43a 	srli	r21,r19,16
    be40:	8ce3c83a 	sub	r17,r17,r19
    be44:	9dbfffcc 	andi	r22,r19,65535
    be48:	0025883a 	mov	r18,zero
    be4c:	8809883a 	mov	r4,r17
    be50:	a80b883a 	mov	r5,r21
    be54:	000c3980 	call	c398 <__umodsi3>
    be58:	8809883a 	mov	r4,r17
    be5c:	a80b883a 	mov	r5,r21
    be60:	102f883a 	mov	r23,r2
    be64:	000c3900 	call	c390 <__udivsi3>
    be68:	1009883a 	mov	r4,r2
    be6c:	b00b883a 	mov	r5,r22
    be70:	000c3a00 	call	c3a0 <__mulsi3>
    be74:	b82e943a 	slli	r23,r23,16
    be78:	a008d43a 	srli	r4,r20,16
    be7c:	b906b03a 	or	r3,r23,r4
    be80:	1880032e 	bgeu	r3,r2,be90 <__umoddi3+0x238>
    be84:	1cc7883a 	add	r3,r3,r19
    be88:	1cc00136 	bltu	r3,r19,be90 <__umoddi3+0x238>
    be8c:	1880f136 	bltu	r3,r2,c254 <__umoddi3+0x5fc>
    be90:	18a1c83a 	sub	r16,r3,r2
    be94:	8009883a 	mov	r4,r16
    be98:	a80b883a 	mov	r5,r21
    be9c:	000c3980 	call	c398 <__umodsi3>
    bea0:	8009883a 	mov	r4,r16
    bea4:	a80b883a 	mov	r5,r21
    bea8:	1023883a 	mov	r17,r2
    beac:	000c3900 	call	c390 <__udivsi3>
    beb0:	1009883a 	mov	r4,r2
    beb4:	b00b883a 	mov	r5,r22
    beb8:	8822943a 	slli	r17,r17,16
    bebc:	000c3a00 	call	c3a0 <__mulsi3>
    bec0:	a13fffcc 	andi	r4,r20,65535
    bec4:	8906b03a 	or	r3,r17,r4
    bec8:	1880042e 	bgeu	r3,r2,bedc <__umoddi3+0x284>
    becc:	1cc7883a 	add	r3,r3,r19
    bed0:	1cc00236 	bltu	r3,r19,bedc <__umoddi3+0x284>
    bed4:	1880012e 	bgeu	r3,r2,bedc <__umoddi3+0x284>
    bed8:	1cc7883a 	add	r3,r3,r19
    bedc:	1887c83a 	sub	r3,r3,r2
    bee0:	1c84d83a 	srl	r2,r3,r18
    bee4:	0007883a 	mov	r3,zero
    bee8:	00000206 	br	bef4 <__umoddi3+0x29c>
    beec:	2005883a 	mov	r2,r4
    bef0:	2807883a 	mov	r3,r5
    bef4:	dfc00b17 	ldw	ra,44(sp)
    bef8:	df000a17 	ldw	fp,40(sp)
    befc:	ddc00917 	ldw	r23,36(sp)
    bf00:	dd800817 	ldw	r22,32(sp)
    bf04:	dd400717 	ldw	r21,28(sp)
    bf08:	dd000617 	ldw	r20,24(sp)
    bf0c:	dcc00517 	ldw	r19,20(sp)
    bf10:	dc800417 	ldw	r18,16(sp)
    bf14:	dc400317 	ldw	r17,12(sp)
    bf18:	dc000217 	ldw	r16,8(sp)
    bf1c:	dec00c04 	addi	sp,sp,48
    bf20:	f800283a 	ret
    bf24:	00803fc4 	movi	r2,255
    bf28:	11c0b02e 	bgeu	r2,r7,c1ec <__umoddi3+0x594>
    bf2c:	01400204 	movi	r5,8
    bf30:	282b883a 	mov	r21,r5
    bf34:	003f9b06 	br	bda4 <__alt_data_end+0xfffb6674>
    bf38:	00804034 	movhi	r2,256
    bf3c:	10bfffc4 	addi	r2,r2,-1
    bf40:	1180b02e 	bgeu	r2,r6,c204 <__umoddi3+0x5ac>
    bf44:	01400604 	movi	r5,24
    bf48:	2805883a 	mov	r2,r5
    bf4c:	003f5a06 	br	bcb8 <__alt_data_end+0xfffb6588>
    bf50:	00803fc4 	movi	r2,255
    bf54:	14c0ae2e 	bgeu	r2,r19,c210 <__umoddi3+0x5b8>
    bf58:	00800204 	movi	r2,8
    bf5c:	1007883a 	mov	r3,r2
    bf60:	003fad06 	br	be18 <__alt_data_end+0xfffb66e8>
    bf64:	3d0a983a 	sll	r5,r7,r20
    bf68:	356cd83a 	srl	r22,r6,r21
    bf6c:	8d78d83a 	srl	fp,r17,r21
    bf70:	8d10983a 	sll	r8,r17,r20
    bf74:	2dacb03a 	or	r22,r5,r22
    bf78:	b02ed43a 	srli	r23,r22,16
    bf7c:	8564d83a 	srl	r18,r16,r21
    bf80:	e009883a 	mov	r4,fp
    bf84:	b80b883a 	mov	r5,r23
    bf88:	44a4b03a 	or	r18,r8,r18
    bf8c:	3526983a 	sll	r19,r6,r20
    bf90:	000c3980 	call	c398 <__umodsi3>
    bf94:	e009883a 	mov	r4,fp
    bf98:	b80b883a 	mov	r5,r23
    bf9c:	b47fffcc 	andi	r17,r22,65535
    bfa0:	d8800015 	stw	r2,0(sp)
    bfa4:	000c3900 	call	c390 <__udivsi3>
    bfa8:	1009883a 	mov	r4,r2
    bfac:	880b883a 	mov	r5,r17
    bfb0:	1039883a 	mov	fp,r2
    bfb4:	000c3a00 	call	c3a0 <__mulsi3>
    bfb8:	d9800017 	ldw	r6,0(sp)
    bfbc:	9008d43a 	srli	r4,r18,16
    bfc0:	8520983a 	sll	r16,r16,r20
    bfc4:	300c943a 	slli	r6,r6,16
    bfc8:	3106b03a 	or	r3,r6,r4
    bfcc:	1880042e 	bgeu	r3,r2,bfe0 <__umoddi3+0x388>
    bfd0:	1d87883a 	add	r3,r3,r22
    bfd4:	e13fffc4 	addi	r4,fp,-1
    bfd8:	1d809a2e 	bgeu	r3,r22,c244 <__umoddi3+0x5ec>
    bfdc:	2039883a 	mov	fp,r4
    bfe0:	1887c83a 	sub	r3,r3,r2
    bfe4:	1809883a 	mov	r4,r3
    bfe8:	b80b883a 	mov	r5,r23
    bfec:	d8c00115 	stw	r3,4(sp)
    bff0:	000c3980 	call	c398 <__umodsi3>
    bff4:	d8c00117 	ldw	r3,4(sp)
    bff8:	b80b883a 	mov	r5,r23
    bffc:	d8800015 	stw	r2,0(sp)
    c000:	1809883a 	mov	r4,r3
    c004:	000c3900 	call	c390 <__udivsi3>
    c008:	880b883a 	mov	r5,r17
    c00c:	1009883a 	mov	r4,r2
    c010:	102f883a 	mov	r23,r2
    c014:	000c3a00 	call	c3a0 <__mulsi3>
    c018:	d9800017 	ldw	r6,0(sp)
    c01c:	947fffcc 	andi	r17,r18,65535
    c020:	300c943a 	slli	r6,r6,16
    c024:	3464b03a 	or	r18,r6,r17
    c028:	9080042e 	bgeu	r18,r2,c03c <__umoddi3+0x3e4>
    c02c:	95a5883a 	add	r18,r18,r22
    c030:	b8ffffc4 	addi	r3,r23,-1
    c034:	95807f2e 	bgeu	r18,r22,c234 <__umoddi3+0x5dc>
    c038:	182f883a 	mov	r23,r3
    c03c:	e038943a 	slli	fp,fp,16
    c040:	980cd43a 	srli	r6,r19,16
    c044:	98ffffcc 	andi	r3,r19,65535
    c048:	bf38b03a 	or	fp,r23,fp
    c04c:	e02ed43a 	srli	r23,fp,16
    c050:	e73fffcc 	andi	fp,fp,65535
    c054:	180b883a 	mov	r5,r3
    c058:	e009883a 	mov	r4,fp
    c05c:	d9800015 	stw	r6,0(sp)
    c060:	d8c00115 	stw	r3,4(sp)
    c064:	90a5c83a 	sub	r18,r18,r2
    c068:	000c3a00 	call	c3a0 <__mulsi3>
    c06c:	d8c00117 	ldw	r3,4(sp)
    c070:	b809883a 	mov	r4,r23
    c074:	1023883a 	mov	r17,r2
    c078:	180b883a 	mov	r5,r3
    c07c:	000c3a00 	call	c3a0 <__mulsi3>
    c080:	d9800017 	ldw	r6,0(sp)
    c084:	b809883a 	mov	r4,r23
    c088:	d8800115 	stw	r2,4(sp)
    c08c:	300b883a 	mov	r5,r6
    c090:	302f883a 	mov	r23,r6
    c094:	000c3a00 	call	c3a0 <__mulsi3>
    c098:	e009883a 	mov	r4,fp
    c09c:	b80b883a 	mov	r5,r23
    c0a0:	d8800015 	stw	r2,0(sp)
    c0a4:	000c3a00 	call	c3a0 <__mulsi3>
    c0a8:	d8c00117 	ldw	r3,4(sp)
    c0ac:	880cd43a 	srli	r6,r17,16
    c0b0:	d9c00017 	ldw	r7,0(sp)
    c0b4:	1885883a 	add	r2,r3,r2
    c0b8:	118d883a 	add	r6,r2,r6
    c0bc:	30c0022e 	bgeu	r6,r3,c0c8 <__umoddi3+0x470>
    c0c0:	00800074 	movhi	r2,1
    c0c4:	388f883a 	add	r7,r7,r2
    c0c8:	3006d43a 	srli	r3,r6,16
    c0cc:	300c943a 	slli	r6,r6,16
    c0d0:	8c7fffcc 	andi	r17,r17,65535
    c0d4:	38c7883a 	add	r3,r7,r3
    c0d8:	3463883a 	add	r17,r6,r17
    c0dc:	90c03d36 	bltu	r18,r3,c1d4 <__umoddi3+0x57c>
    c0e0:	90c06026 	beq	r18,r3,c264 <__umoddi3+0x60c>
    c0e4:	90c9c83a 	sub	r4,r18,r3
    c0e8:	880f883a 	mov	r7,r17
    c0ec:	81cfc83a 	sub	r7,r16,r7
    c0f0:	81c7803a 	cmpltu	r3,r16,r7
    c0f4:	20c7c83a 	sub	r3,r4,r3
    c0f8:	1d44983a 	sll	r2,r3,r21
    c0fc:	3d0ed83a 	srl	r7,r7,r20
    c100:	1d06d83a 	srl	r3,r3,r20
    c104:	11c4b03a 	or	r2,r2,r7
    c108:	003f7a06 	br	bef4 <__alt_data_end+0xfffb67c4>
    c10c:	0025883a 	mov	r18,zero
    c110:	003ef806 	br	bcf4 <__alt_data_end+0xfffb65c4>
    c114:	98a6983a 	sll	r19,r19,r2
    c118:	88e8d83a 	srl	r20,r17,r3
    c11c:	80c6d83a 	srl	r3,r16,r3
    c120:	982ad43a 	srli	r21,r19,16
    c124:	88a2983a 	sll	r17,r17,r2
    c128:	a009883a 	mov	r4,r20
    c12c:	a80b883a 	mov	r5,r21
    c130:	88eeb03a 	or	r23,r17,r3
    c134:	1025883a 	mov	r18,r2
    c138:	000c3980 	call	c398 <__umodsi3>
    c13c:	a009883a 	mov	r4,r20
    c140:	a80b883a 	mov	r5,r21
    c144:	1023883a 	mov	r17,r2
    c148:	9dbfffcc 	andi	r22,r19,65535
    c14c:	000c3900 	call	c390 <__udivsi3>
    c150:	1009883a 	mov	r4,r2
    c154:	b00b883a 	mov	r5,r22
    c158:	000c3a00 	call	c3a0 <__mulsi3>
    c15c:	8822943a 	slli	r17,r17,16
    c160:	b808d43a 	srli	r4,r23,16
    c164:	84a8983a 	sll	r20,r16,r18
    c168:	8906b03a 	or	r3,r17,r4
    c16c:	1880042e 	bgeu	r3,r2,c180 <__umoddi3+0x528>
    c170:	1cc7883a 	add	r3,r3,r19
    c174:	1cc00236 	bltu	r3,r19,c180 <__umoddi3+0x528>
    c178:	1880012e 	bgeu	r3,r2,c180 <__umoddi3+0x528>
    c17c:	1cc7883a 	add	r3,r3,r19
    c180:	18a1c83a 	sub	r16,r3,r2
    c184:	8009883a 	mov	r4,r16
    c188:	a80b883a 	mov	r5,r21
    c18c:	000c3980 	call	c398 <__umodsi3>
    c190:	8009883a 	mov	r4,r16
    c194:	a80b883a 	mov	r5,r21
    c198:	1039883a 	mov	fp,r2
    c19c:	000c3900 	call	c390 <__udivsi3>
    c1a0:	1009883a 	mov	r4,r2
    c1a4:	b00b883a 	mov	r5,r22
    c1a8:	000c3a00 	call	c3a0 <__mulsi3>
    c1ac:	e006943a 	slli	r3,fp,16
    c1b0:	b93fffcc 	andi	r4,r23,65535
    c1b4:	1906b03a 	or	r3,r3,r4
    c1b8:	1880042e 	bgeu	r3,r2,c1cc <__umoddi3+0x574>
    c1bc:	1cc7883a 	add	r3,r3,r19
    c1c0:	1cc00236 	bltu	r3,r19,c1cc <__umoddi3+0x574>
    c1c4:	1880012e 	bgeu	r3,r2,c1cc <__umoddi3+0x574>
    c1c8:	1cc7883a 	add	r3,r3,r19
    c1cc:	18a3c83a 	sub	r17,r3,r2
    c1d0:	003f1e06 	br	be4c <__alt_data_end+0xfffb671c>
    c1d4:	8ccfc83a 	sub	r7,r17,r19
    c1d8:	1d89c83a 	sub	r4,r3,r22
    c1dc:	89e3803a 	cmpltu	r17,r17,r7
    c1e0:	2463c83a 	sub	r17,r4,r17
    c1e4:	9449c83a 	sub	r4,r18,r17
    c1e8:	003fc006 	br	c0ec <__alt_data_end+0xfffb69bc>
    c1ec:	000b883a 	mov	r5,zero
    c1f0:	002b883a 	mov	r21,zero
    c1f4:	003eeb06 	br	bda4 <__alt_data_end+0xfffb6674>
    c1f8:	01400404 	movi	r5,16
    c1fc:	282b883a 	mov	r21,r5
    c200:	003ee806 	br	bda4 <__alt_data_end+0xfffb6674>
    c204:	01400404 	movi	r5,16
    c208:	2805883a 	mov	r2,r5
    c20c:	003eaa06 	br	bcb8 <__alt_data_end+0xfffb6588>
    c210:	0005883a 	mov	r2,zero
    c214:	0007883a 	mov	r3,zero
    c218:	003eff06 	br	be18 <__alt_data_end+0xfffb66e8>
    c21c:	00800404 	movi	r2,16
    c220:	1007883a 	mov	r3,r2
    c224:	003efc06 	br	be18 <__alt_data_end+0xfffb66e8>
    c228:	000b883a 	mov	r5,zero
    c22c:	0005883a 	mov	r2,zero
    c230:	003ea106 	br	bcb8 <__alt_data_end+0xfffb6588>
    c234:	90bf802e 	bgeu	r18,r2,c038 <__alt_data_end+0xfffb6908>
    c238:	bdffff84 	addi	r23,r23,-2
    c23c:	95a5883a 	add	r18,r18,r22
    c240:	003f7e06 	br	c03c <__alt_data_end+0xfffb690c>
    c244:	18bf652e 	bgeu	r3,r2,bfdc <__alt_data_end+0xfffb68ac>
    c248:	e73fff84 	addi	fp,fp,-2
    c24c:	1d87883a 	add	r3,r3,r22
    c250:	003f6306 	br	bfe0 <__alt_data_end+0xfffb68b0>
    c254:	1cc7883a 	add	r3,r3,r19
    c258:	003f0d06 	br	be90 <__alt_data_end+0xfffb6760>
    c25c:	8005883a 	mov	r2,r16
    c260:	003edf06 	br	bde0 <__alt_data_end+0xfffb66b0>
    c264:	847fdb36 	bltu	r16,r17,c1d4 <__alt_data_end+0xfffb6aa4>
    c268:	880f883a 	mov	r7,r17
    c26c:	0009883a 	mov	r4,zero
    c270:	003f9e06 	br	c0ec <__alt_data_end+0xfffb69bc>

0000c274 <udivmodsi4>:
    c274:	2900182e 	bgeu	r5,r4,c2d8 <udivmodsi4+0x64>
    c278:	28001716 	blt	r5,zero,c2d8 <udivmodsi4+0x64>
    c27c:	00800804 	movi	r2,32
    c280:	00c00044 	movi	r3,1
    c284:	00000206 	br	c290 <udivmodsi4+0x1c>
    c288:	10001126 	beq	r2,zero,c2d0 <udivmodsi4+0x5c>
    c28c:	28000516 	blt	r5,zero,c2a4 <udivmodsi4+0x30>
    c290:	294b883a 	add	r5,r5,r5
    c294:	10bfffc4 	addi	r2,r2,-1
    c298:	18c7883a 	add	r3,r3,r3
    c29c:	293ffa36 	bltu	r5,r4,c288 <__alt_data_end+0xfffb6b58>
    c2a0:	18000b26 	beq	r3,zero,c2d0 <udivmodsi4+0x5c>
    c2a4:	0005883a 	mov	r2,zero
    c2a8:	21400236 	bltu	r4,r5,c2b4 <udivmodsi4+0x40>
    c2ac:	2149c83a 	sub	r4,r4,r5
    c2b0:	10c4b03a 	or	r2,r2,r3
    c2b4:	1806d07a 	srli	r3,r3,1
    c2b8:	280ad07a 	srli	r5,r5,1
    c2bc:	183ffa1e 	bne	r3,zero,c2a8 <__alt_data_end+0xfffb6b78>
    c2c0:	3000011e 	bne	r6,zero,c2c8 <udivmodsi4+0x54>
    c2c4:	f800283a 	ret
    c2c8:	2005883a 	mov	r2,r4
    c2cc:	f800283a 	ret
    c2d0:	0005883a 	mov	r2,zero
    c2d4:	003ffa06 	br	c2c0 <__alt_data_end+0xfffb6b90>
    c2d8:	00c00044 	movi	r3,1
    c2dc:	003ff106 	br	c2a4 <__alt_data_end+0xfffb6b74>

0000c2e0 <__divsi3>:
    c2e0:	defffe04 	addi	sp,sp,-8
    c2e4:	dfc00115 	stw	ra,4(sp)
    c2e8:	dc000015 	stw	r16,0(sp)
    c2ec:	20000b16 	blt	r4,zero,c31c <__divsi3+0x3c>
    c2f0:	0021883a 	mov	r16,zero
    c2f4:	28000c16 	blt	r5,zero,c328 <__divsi3+0x48>
    c2f8:	000d883a 	mov	r6,zero
    c2fc:	000c2740 	call	c274 <udivmodsi4>
    c300:	0407c83a 	sub	r3,zero,r16
    c304:	1884f03a 	xor	r2,r3,r2
    c308:	1405883a 	add	r2,r2,r16
    c30c:	dfc00117 	ldw	ra,4(sp)
    c310:	dc000017 	ldw	r16,0(sp)
    c314:	dec00204 	addi	sp,sp,8
    c318:	f800283a 	ret
    c31c:	0109c83a 	sub	r4,zero,r4
    c320:	04000044 	movi	r16,1
    c324:	283ff40e 	bge	r5,zero,c2f8 <__alt_data_end+0xfffb6bc8>
    c328:	014bc83a 	sub	r5,zero,r5
    c32c:	8400005c 	xori	r16,r16,1
    c330:	003ff106 	br	c2f8 <__alt_data_end+0xfffb6bc8>

0000c334 <__modsi3>:
    c334:	defffd04 	addi	sp,sp,-12
    c338:	dfc00215 	stw	ra,8(sp)
    c33c:	dc400115 	stw	r17,4(sp)
    c340:	dc000015 	stw	r16,0(sp)
    c344:	20000c16 	blt	r4,zero,c378 <__modsi3+0x44>
    c348:	0023883a 	mov	r17,zero
    c34c:	0021883a 	mov	r16,zero
    c350:	28000d16 	blt	r5,zero,c388 <__modsi3+0x54>
    c354:	01800044 	movi	r6,1
    c358:	000c2740 	call	c274 <udivmodsi4>
    c35c:	1404f03a 	xor	r2,r2,r16
    c360:	8885883a 	add	r2,r17,r2
    c364:	dfc00217 	ldw	ra,8(sp)
    c368:	dc400117 	ldw	r17,4(sp)
    c36c:	dc000017 	ldw	r16,0(sp)
    c370:	dec00304 	addi	sp,sp,12
    c374:	f800283a 	ret
    c378:	0109c83a 	sub	r4,zero,r4
    c37c:	04400044 	movi	r17,1
    c380:	043fffc4 	movi	r16,-1
    c384:	283ff30e 	bge	r5,zero,c354 <__alt_data_end+0xfffb6c24>
    c388:	014bc83a 	sub	r5,zero,r5
    c38c:	003ff106 	br	c354 <__alt_data_end+0xfffb6c24>

0000c390 <__udivsi3>:
    c390:	000d883a 	mov	r6,zero
    c394:	000c2741 	jmpi	c274 <udivmodsi4>

0000c398 <__umodsi3>:
    c398:	01800044 	movi	r6,1
    c39c:	000c2741 	jmpi	c274 <udivmodsi4>

0000c3a0 <__mulsi3>:
    c3a0:	0005883a 	mov	r2,zero
    c3a4:	20000726 	beq	r4,zero,c3c4 <__mulsi3+0x24>
    c3a8:	20c0004c 	andi	r3,r4,1
    c3ac:	2008d07a 	srli	r4,r4,1
    c3b0:	18000126 	beq	r3,zero,c3b8 <__mulsi3+0x18>
    c3b4:	1145883a 	add	r2,r2,r5
    c3b8:	294b883a 	add	r5,r5,r5
    c3bc:	203ffa1e 	bne	r4,zero,c3a8 <__alt_data_end+0xfffb6c78>
    c3c0:	f800283a 	ret
    c3c4:	f800283a 	ret

0000c3c8 <__adddf3>:
    c3c8:	02000434 	movhi	r8,16
    c3cc:	423fffc4 	addi	r8,r8,-1
    c3d0:	defffb04 	addi	sp,sp,-20
    c3d4:	2a12703a 	and	r9,r5,r8
    c3d8:	2806d7fa 	srli	r3,r5,31
    c3dc:	3a10703a 	and	r8,r7,r8
    c3e0:	3804d53a 	srli	r2,r7,20
    c3e4:	3014d77a 	srli	r10,r6,29
    c3e8:	dc000015 	stw	r16,0(sp)
    c3ec:	481290fa 	slli	r9,r9,3
    c3f0:	2820d53a 	srli	r16,r5,20
    c3f4:	401090fa 	slli	r8,r8,3
    c3f8:	200ad77a 	srli	r5,r4,29
    c3fc:	380ed7fa 	srli	r7,r7,31
    c400:	dc800215 	stw	r18,8(sp)
    c404:	dc400115 	stw	r17,4(sp)
    c408:	dfc00415 	stw	ra,16(sp)
    c40c:	dcc00315 	stw	r19,12(sp)
    c410:	1c803fcc 	andi	r18,r3,255
    c414:	8401ffcc 	andi	r16,r16,2047
    c418:	494ab03a 	or	r5,r9,r5
    c41c:	202290fa 	slli	r17,r4,3
    c420:	1081ffcc 	andi	r2,r2,2047
    c424:	4290b03a 	or	r8,r8,r10
    c428:	300c90fa 	slli	r6,r6,3
    c42c:	91c07026 	beq	r18,r7,c5f0 <__adddf3+0x228>
    c430:	8087c83a 	sub	r3,r16,r2
    c434:	00c0b30e 	bge	zero,r3,c704 <__adddf3+0x33c>
    c438:	10002a1e 	bne	r2,zero,c4e4 <__adddf3+0x11c>
    c43c:	4184b03a 	or	r2,r8,r6
    c440:	1000991e 	bne	r2,zero,c6a8 <__adddf3+0x2e0>
    c444:	888001cc 	andi	r2,r17,7
    c448:	10005b26 	beq	r2,zero,c5b8 <__adddf3+0x1f0>
    c44c:	88c003cc 	andi	r3,r17,15
    c450:	00800104 	movi	r2,4
    c454:	18805826 	beq	r3,r2,c5b8 <__adddf3+0x1f0>
    c458:	89800104 	addi	r6,r17,4
    c45c:	3463803a 	cmpltu	r17,r6,r17
    c460:	2c4b883a 	add	r5,r5,r17
    c464:	2880202c 	andhi	r2,r5,128
    c468:	9007883a 	mov	r3,r18
    c46c:	3023883a 	mov	r17,r6
    c470:	10005426 	beq	r2,zero,c5c4 <__adddf3+0x1fc>
    c474:	84000044 	addi	r16,r16,1
    c478:	0081ffc4 	movi	r2,2047
    c47c:	8080c126 	beq	r16,r2,c784 <__adddf3+0x3bc>
    c480:	013fe034 	movhi	r4,65408
    c484:	213fffc4 	addi	r4,r4,-1
    c488:	290a703a 	and	r5,r5,r4
    c48c:	2804977a 	slli	r2,r5,29
    c490:	280a927a 	slli	r5,r5,9
    c494:	8822d0fa 	srli	r17,r17,3
    c498:	8401ffcc 	andi	r16,r16,2047
    c49c:	2808d33a 	srli	r4,r5,12
    c4a0:	1444b03a 	or	r2,r2,r17
    c4a4:	8401ffcc 	andi	r16,r16,2047
    c4a8:	800a953a 	slli	r5,r16,20
    c4ac:	18c03fcc 	andi	r3,r3,255
    c4b0:	04000434 	movhi	r16,16
    c4b4:	180697fa 	slli	r3,r3,31
    c4b8:	843fffc4 	addi	r16,r16,-1
    c4bc:	2420703a 	and	r16,r4,r16
    c4c0:	8160b03a 	or	r16,r16,r5
    c4c4:	80c6b03a 	or	r3,r16,r3
    c4c8:	dfc00417 	ldw	ra,16(sp)
    c4cc:	dcc00317 	ldw	r19,12(sp)
    c4d0:	dc800217 	ldw	r18,8(sp)
    c4d4:	dc400117 	ldw	r17,4(sp)
    c4d8:	dc000017 	ldw	r16,0(sp)
    c4dc:	dec00504 	addi	sp,sp,20
    c4e0:	f800283a 	ret
    c4e4:	0081ffc4 	movi	r2,2047
    c4e8:	80bfd626 	beq	r16,r2,c444 <__alt_data_end+0xfffb6d14>
    c4ec:	42002034 	orhi	r8,r8,128
    c4f0:	00800e04 	movi	r2,56
    c4f4:	10c0a616 	blt	r2,r3,c790 <__adddf3+0x3c8>
    c4f8:	008007c4 	movi	r2,31
    c4fc:	10c0c916 	blt	r2,r3,c824 <__adddf3+0x45c>
    c500:	00800804 	movi	r2,32
    c504:	10c5c83a 	sub	r2,r2,r3
    c508:	408e983a 	sll	r7,r8,r2
    c50c:	30c8d83a 	srl	r4,r6,r3
    c510:	3084983a 	sll	r2,r6,r2
    c514:	40c6d83a 	srl	r3,r8,r3
    c518:	390cb03a 	or	r6,r7,r4
    c51c:	1004c03a 	cmpne	r2,r2,zero
    c520:	308cb03a 	or	r6,r6,r2
    c524:	898dc83a 	sub	r6,r17,r6
    c528:	89a3803a 	cmpltu	r17,r17,r6
    c52c:	28cbc83a 	sub	r5,r5,r3
    c530:	2c4bc83a 	sub	r5,r5,r17
    c534:	3023883a 	mov	r17,r6
    c538:	2880202c 	andhi	r2,r5,128
    c53c:	10006d26 	beq	r2,zero,c6f4 <__adddf3+0x32c>
    c540:	04c02034 	movhi	r19,128
    c544:	9cffffc4 	addi	r19,r19,-1
    c548:	2ce6703a 	and	r19,r5,r19
    c54c:	98007e26 	beq	r19,zero,c748 <__adddf3+0x380>
    c550:	9809883a 	mov	r4,r19
    c554:	000eb600 	call	eb60 <__clzsi2>
    c558:	10fffe04 	addi	r3,r2,-8
    c55c:	010007c4 	movi	r4,31
    c560:	20c07f16 	blt	r4,r3,c760 <__adddf3+0x398>
    c564:	01400a04 	movi	r5,40
    c568:	2885c83a 	sub	r2,r5,r2
    c56c:	888ad83a 	srl	r5,r17,r2
    c570:	98e6983a 	sll	r19,r19,r3
    c574:	88e2983a 	sll	r17,r17,r3
    c578:	2ce6b03a 	or	r19,r5,r19
    c57c:	1c007c16 	blt	r3,r16,c770 <__adddf3+0x3a8>
    c580:	1c21c83a 	sub	r16,r3,r16
    c584:	81400044 	addi	r5,r16,1
    c588:	00c007c4 	movi	r3,31
    c58c:	19409816 	blt	r3,r5,c7f0 <__adddf3+0x428>
    c590:	1c21c83a 	sub	r16,r3,r16
    c594:	8c08983a 	sll	r4,r17,r16
    c598:	8946d83a 	srl	r3,r17,r5
    c59c:	9c20983a 	sll	r16,r19,r16
    c5a0:	2008c03a 	cmpne	r4,r4,zero
    c5a4:	994ad83a 	srl	r5,r19,r5
    c5a8:	1c06b03a 	or	r3,r3,r16
    c5ac:	1922b03a 	or	r17,r3,r4
    c5b0:	0021883a 	mov	r16,zero
    c5b4:	003fa306 	br	c444 <__alt_data_end+0xfffb6d14>
    c5b8:	2880202c 	andhi	r2,r5,128
    c5bc:	9007883a 	mov	r3,r18
    c5c0:	103fac1e 	bne	r2,zero,c474 <__alt_data_end+0xfffb6d44>
    c5c4:	2804977a 	slli	r2,r5,29
    c5c8:	8822d0fa 	srli	r17,r17,3
    c5cc:	0101ffc4 	movi	r4,2047
    c5d0:	280ad0fa 	srli	r5,r5,3
    c5d4:	1444b03a 	or	r2,r2,r17
    c5d8:	81002c26 	beq	r16,r4,c68c <__adddf3+0x2c4>
    c5dc:	8120703a 	and	r16,r16,r4
    c5e0:	01000434 	movhi	r4,16
    c5e4:	213fffc4 	addi	r4,r4,-1
    c5e8:	2908703a 	and	r4,r5,r4
    c5ec:	003fad06 	br	c4a4 <__alt_data_end+0xfffb6d74>
    c5f0:	8089c83a 	sub	r4,r16,r2
    c5f4:	01006a0e 	bge	zero,r4,c7a0 <__adddf3+0x3d8>
    c5f8:	10003326 	beq	r2,zero,c6c8 <__adddf3+0x300>
    c5fc:	0081ffc4 	movi	r2,2047
    c600:	80bf9026 	beq	r16,r2,c444 <__alt_data_end+0xfffb6d14>
    c604:	42002034 	orhi	r8,r8,128
    c608:	00800e04 	movi	r2,56
    c60c:	1100b116 	blt	r2,r4,c8d4 <__adddf3+0x50c>
    c610:	008007c4 	movi	r2,31
    c614:	1100e216 	blt	r2,r4,c9a0 <__adddf3+0x5d8>
    c618:	00800804 	movi	r2,32
    c61c:	1105c83a 	sub	r2,r2,r4
    c620:	4092983a 	sll	r9,r8,r2
    c624:	310ed83a 	srl	r7,r6,r4
    c628:	3084983a 	sll	r2,r6,r2
    c62c:	4110d83a 	srl	r8,r8,r4
    c630:	49ccb03a 	or	r6,r9,r7
    c634:	1004c03a 	cmpne	r2,r2,zero
    c638:	308cb03a 	or	r6,r6,r2
    c63c:	344d883a 	add	r6,r6,r17
    c640:	3463803a 	cmpltu	r17,r6,r17
    c644:	414b883a 	add	r5,r8,r5
    c648:	2c4b883a 	add	r5,r5,r17
    c64c:	3023883a 	mov	r17,r6
    c650:	2880202c 	andhi	r2,r5,128
    c654:	10002726 	beq	r2,zero,c6f4 <__adddf3+0x32c>
    c658:	84000044 	addi	r16,r16,1
    c65c:	0081ffc4 	movi	r2,2047
    c660:	8080ae26 	beq	r16,r2,c91c <__adddf3+0x554>
    c664:	00bfe034 	movhi	r2,65408
    c668:	10bfffc4 	addi	r2,r2,-1
    c66c:	288a703a 	and	r5,r5,r2
    c670:	880cd07a 	srli	r6,r17,1
    c674:	280897fa 	slli	r4,r5,31
    c678:	88c0004c 	andi	r3,r17,1
    c67c:	30e2b03a 	or	r17,r6,r3
    c680:	280ad07a 	srli	r5,r5,1
    c684:	8922b03a 	or	r17,r17,r4
    c688:	003f6e06 	br	c444 <__alt_data_end+0xfffb6d14>
    c68c:	1148b03a 	or	r4,r2,r5
    c690:	20003c26 	beq	r4,zero,c784 <__adddf3+0x3bc>
    c694:	29000234 	orhi	r4,r5,8
    c698:	01400434 	movhi	r5,16
    c69c:	297fffc4 	addi	r5,r5,-1
    c6a0:	2148703a 	and	r4,r4,r5
    c6a4:	003f7f06 	br	c4a4 <__alt_data_end+0xfffb6d74>
    c6a8:	18ffffc4 	addi	r3,r3,-1
    c6ac:	18004d1e 	bne	r3,zero,c7e4 <__adddf3+0x41c>
    c6b0:	898dc83a 	sub	r6,r17,r6
    c6b4:	89a3803a 	cmpltu	r17,r17,r6
    c6b8:	2a0bc83a 	sub	r5,r5,r8
    c6bc:	2c4bc83a 	sub	r5,r5,r17
    c6c0:	3023883a 	mov	r17,r6
    c6c4:	003f9c06 	br	c538 <__alt_data_end+0xfffb6e08>
    c6c8:	4184b03a 	or	r2,r8,r6
    c6cc:	103f5d26 	beq	r2,zero,c444 <__alt_data_end+0xfffb6d14>
    c6d0:	213fffc4 	addi	r4,r4,-1
    c6d4:	203fd926 	beq	r4,zero,c63c <__alt_data_end+0xfffb6f0c>
    c6d8:	0081ffc4 	movi	r2,2047
    c6dc:	80bfca1e 	bne	r16,r2,c608 <__alt_data_end+0xfffb6ed8>
    c6e0:	003f5806 	br	c444 <__alt_data_end+0xfffb6d14>
    c6e4:	10c8b03a 	or	r4,r2,r3
    c6e8:	20008b26 	beq	r4,zero,c918 <__adddf3+0x550>
    c6ec:	100b883a 	mov	r5,r2
    c6f0:	1823883a 	mov	r17,r3
    c6f4:	888001cc 	andi	r2,r17,7
    c6f8:	103f541e 	bne	r2,zero,c44c <__alt_data_end+0xfffb6d1c>
    c6fc:	9007883a 	mov	r3,r18
    c700:	003fb006 	br	c5c4 <__alt_data_end+0xfffb6e94>
    c704:	1800531e 	bne	r3,zero,c854 <__adddf3+0x48c>
    c708:	80800044 	addi	r2,r16,1
    c70c:	1081ffcc 	andi	r2,r2,2047
    c710:	00c00044 	movi	r3,1
    c714:	1880990e 	bge	r3,r2,c97c <__adddf3+0x5b4>
    c718:	8985c83a 	sub	r2,r17,r6
    c71c:	8887803a 	cmpltu	r3,r17,r2
    c720:	2a27c83a 	sub	r19,r5,r8
    c724:	98e7c83a 	sub	r19,r19,r3
    c728:	98c0202c 	andhi	r3,r19,128
    c72c:	18006226 	beq	r3,zero,c8b8 <__adddf3+0x4f0>
    c730:	3463c83a 	sub	r17,r6,r17
    c734:	4151c83a 	sub	r8,r8,r5
    c738:	344d803a 	cmpltu	r6,r6,r17
    c73c:	41a7c83a 	sub	r19,r8,r6
    c740:	3825883a 	mov	r18,r7
    c744:	983f821e 	bne	r19,zero,c550 <__alt_data_end+0xfffb6e20>
    c748:	8809883a 	mov	r4,r17
    c74c:	000eb600 	call	eb60 <__clzsi2>
    c750:	10800804 	addi	r2,r2,32
    c754:	10fffe04 	addi	r3,r2,-8
    c758:	010007c4 	movi	r4,31
    c75c:	20ff810e 	bge	r4,r3,c564 <__alt_data_end+0xfffb6e34>
    c760:	14fff604 	addi	r19,r2,-40
    c764:	8ce6983a 	sll	r19,r17,r19
    c768:	0023883a 	mov	r17,zero
    c76c:	1c3f840e 	bge	r3,r16,c580 <__alt_data_end+0xfffb6e50>
    c770:	017fe034 	movhi	r5,65408
    c774:	297fffc4 	addi	r5,r5,-1
    c778:	80e1c83a 	sub	r16,r16,r3
    c77c:	994a703a 	and	r5,r19,r5
    c780:	003f3006 	br	c444 <__alt_data_end+0xfffb6d14>
    c784:	0009883a 	mov	r4,zero
    c788:	0005883a 	mov	r2,zero
    c78c:	003f4506 	br	c4a4 <__alt_data_end+0xfffb6d74>
    c790:	418cb03a 	or	r6,r8,r6
    c794:	300cc03a 	cmpne	r6,r6,zero
    c798:	0007883a 	mov	r3,zero
    c79c:	003f6106 	br	c524 <__alt_data_end+0xfffb6df4>
    c7a0:	2000921e 	bne	r4,zero,c9ec <__adddf3+0x624>
    c7a4:	80800044 	addi	r2,r16,1
    c7a8:	11c1ffcc 	andi	r7,r2,2047
    c7ac:	01000044 	movi	r4,1
    c7b0:	21c0610e 	bge	r4,r7,c938 <__adddf3+0x570>
    c7b4:	0101ffc4 	movi	r4,2047
    c7b8:	1100a326 	beq	r2,r4,ca48 <__adddf3+0x680>
    c7bc:	344d883a 	add	r6,r6,r17
    c7c0:	3463803a 	cmpltu	r17,r6,r17
    c7c4:	414b883a 	add	r5,r8,r5
    c7c8:	2c4b883a 	add	r5,r5,r17
    c7cc:	282297fa 	slli	r17,r5,31
    c7d0:	300cd07a 	srli	r6,r6,1
    c7d4:	280ad07a 	srli	r5,r5,1
    c7d8:	1021883a 	mov	r16,r2
    c7dc:	89a2b03a 	or	r17,r17,r6
    c7e0:	003f1806 	br	c444 <__alt_data_end+0xfffb6d14>
    c7e4:	0081ffc4 	movi	r2,2047
    c7e8:	80bf411e 	bne	r16,r2,c4f0 <__alt_data_end+0xfffb6dc0>
    c7ec:	003f1506 	br	c444 <__alt_data_end+0xfffb6d14>
    c7f0:	80bff844 	addi	r2,r16,-31
    c7f4:	00c00804 	movi	r3,32
    c7f8:	9884d83a 	srl	r2,r19,r2
    c7fc:	28c04a26 	beq	r5,r3,c928 <__adddf3+0x560>
    c800:	00c00fc4 	movi	r3,63
    c804:	1c21c83a 	sub	r16,r3,r16
    c808:	9c26983a 	sll	r19,r19,r16
    c80c:	9c62b03a 	or	r17,r19,r17
    c810:	8822c03a 	cmpne	r17,r17,zero
    c814:	88a2b03a 	or	r17,r17,r2
    c818:	000b883a 	mov	r5,zero
    c81c:	0021883a 	mov	r16,zero
    c820:	003fb406 	br	c6f4 <__alt_data_end+0xfffb6fc4>
    c824:	18bff804 	addi	r2,r3,-32
    c828:	01000804 	movi	r4,32
    c82c:	4084d83a 	srl	r2,r8,r2
    c830:	19003f26 	beq	r3,r4,c930 <__adddf3+0x568>
    c834:	01001004 	movi	r4,64
    c838:	20c7c83a 	sub	r3,r4,r3
    c83c:	40d0983a 	sll	r8,r8,r3
    c840:	418cb03a 	or	r6,r8,r6
    c844:	300cc03a 	cmpne	r6,r6,zero
    c848:	308cb03a 	or	r6,r6,r2
    c84c:	0007883a 	mov	r3,zero
    c850:	003f3406 	br	c524 <__alt_data_end+0xfffb6df4>
    c854:	80002326 	beq	r16,zero,c8e4 <__adddf3+0x51c>
    c858:	0101ffc4 	movi	r4,2047
    c85c:	11005e26 	beq	r2,r4,c9d8 <__adddf3+0x610>
    c860:	00c7c83a 	sub	r3,zero,r3
    c864:	29402034 	orhi	r5,r5,128
    c868:	01000e04 	movi	r4,56
    c86c:	20c07216 	blt	r4,r3,ca38 <__adddf3+0x670>
    c870:	010007c4 	movi	r4,31
    c874:	20c0ce16 	blt	r4,r3,cbb0 <__adddf3+0x7e8>
    c878:	01000804 	movi	r4,32
    c87c:	20c9c83a 	sub	r4,r4,r3
    c880:	2914983a 	sll	r10,r5,r4
    c884:	88d2d83a 	srl	r9,r17,r3
    c888:	8908983a 	sll	r4,r17,r4
    c88c:	28c6d83a 	srl	r3,r5,r3
    c890:	5262b03a 	or	r17,r10,r9
    c894:	2008c03a 	cmpne	r4,r4,zero
    c898:	8922b03a 	or	r17,r17,r4
    c89c:	3463c83a 	sub	r17,r6,r17
    c8a0:	40c7c83a 	sub	r3,r8,r3
    c8a4:	344d803a 	cmpltu	r6,r6,r17
    c8a8:	198bc83a 	sub	r5,r3,r6
    c8ac:	1021883a 	mov	r16,r2
    c8b0:	3825883a 	mov	r18,r7
    c8b4:	003f2006 	br	c538 <__alt_data_end+0xfffb6e08>
    c8b8:	9886b03a 	or	r3,r19,r2
    c8bc:	1800141e 	bne	r3,zero,c910 <__adddf3+0x548>
    c8c0:	0007883a 	mov	r3,zero
    c8c4:	000b883a 	mov	r5,zero
    c8c8:	0023883a 	mov	r17,zero
    c8cc:	0021883a 	mov	r16,zero
    c8d0:	003f3c06 	br	c5c4 <__alt_data_end+0xfffb6e94>
    c8d4:	418cb03a 	or	r6,r8,r6
    c8d8:	300cc03a 	cmpne	r6,r6,zero
    c8dc:	0011883a 	mov	r8,zero
    c8e0:	003f5606 	br	c63c <__alt_data_end+0xfffb6f0c>
    c8e4:	2c48b03a 	or	r4,r5,r17
    c8e8:	20003b26 	beq	r4,zero,c9d8 <__adddf3+0x610>
    c8ec:	00c6303a 	nor	r3,zero,r3
    c8f0:	1800371e 	bne	r3,zero,c9d0 <__adddf3+0x608>
    c8f4:	3463c83a 	sub	r17,r6,r17
    c8f8:	414bc83a 	sub	r5,r8,r5
    c8fc:	344d803a 	cmpltu	r6,r6,r17
    c900:	298bc83a 	sub	r5,r5,r6
    c904:	1021883a 	mov	r16,r2
    c908:	3825883a 	mov	r18,r7
    c90c:	003f0a06 	br	c538 <__alt_data_end+0xfffb6e08>
    c910:	1023883a 	mov	r17,r2
    c914:	003f0d06 	br	c54c <__alt_data_end+0xfffb6e1c>
    c918:	0007883a 	mov	r3,zero
    c91c:	000b883a 	mov	r5,zero
    c920:	0023883a 	mov	r17,zero
    c924:	003f2706 	br	c5c4 <__alt_data_end+0xfffb6e94>
    c928:	0027883a 	mov	r19,zero
    c92c:	003fb706 	br	c80c <__alt_data_end+0xfffb70dc>
    c930:	0011883a 	mov	r8,zero
    c934:	003fc206 	br	c840 <__alt_data_end+0xfffb7110>
    c938:	2c44b03a 	or	r2,r5,r17
    c93c:	8000871e 	bne	r16,zero,cb5c <__adddf3+0x794>
    c940:	1000b126 	beq	r2,zero,cc08 <__adddf3+0x840>
    c944:	4184b03a 	or	r2,r8,r6
    c948:	103ebe26 	beq	r2,zero,c444 <__alt_data_end+0xfffb6d14>
    c94c:	3445883a 	add	r2,r6,r17
    c950:	1463803a 	cmpltu	r17,r2,r17
    c954:	414b883a 	add	r5,r8,r5
    c958:	2c4b883a 	add	r5,r5,r17
    c95c:	28c0202c 	andhi	r3,r5,128
    c960:	1023883a 	mov	r17,r2
    c964:	183f6326 	beq	r3,zero,c6f4 <__alt_data_end+0xfffb6fc4>
    c968:	00bfe034 	movhi	r2,65408
    c96c:	10bfffc4 	addi	r2,r2,-1
    c970:	2021883a 	mov	r16,r4
    c974:	288a703a 	and	r5,r5,r2
    c978:	003eb206 	br	c444 <__alt_data_end+0xfffb6d14>
    c97c:	2c44b03a 	or	r2,r5,r17
    c980:	8000251e 	bne	r16,zero,ca18 <__adddf3+0x650>
    c984:	10004b1e 	bne	r2,zero,cab4 <__adddf3+0x6ec>
    c988:	4184b03a 	or	r2,r8,r6
    c98c:	103fe226 	beq	r2,zero,c918 <__alt_data_end+0xfffb71e8>
    c990:	400b883a 	mov	r5,r8
    c994:	3023883a 	mov	r17,r6
    c998:	3825883a 	mov	r18,r7
    c99c:	003ea906 	br	c444 <__alt_data_end+0xfffb6d14>
    c9a0:	20bff804 	addi	r2,r4,-32
    c9a4:	01c00804 	movi	r7,32
    c9a8:	4084d83a 	srl	r2,r8,r2
    c9ac:	21c07e26 	beq	r4,r7,cba8 <__adddf3+0x7e0>
    c9b0:	01c01004 	movi	r7,64
    c9b4:	3909c83a 	sub	r4,r7,r4
    c9b8:	4110983a 	sll	r8,r8,r4
    c9bc:	418cb03a 	or	r6,r8,r6
    c9c0:	300cc03a 	cmpne	r6,r6,zero
    c9c4:	308cb03a 	or	r6,r6,r2
    c9c8:	0011883a 	mov	r8,zero
    c9cc:	003f1b06 	br	c63c <__alt_data_end+0xfffb6f0c>
    c9d0:	0101ffc4 	movi	r4,2047
    c9d4:	113fa41e 	bne	r2,r4,c868 <__alt_data_end+0xfffb7138>
    c9d8:	400b883a 	mov	r5,r8
    c9dc:	3023883a 	mov	r17,r6
    c9e0:	1021883a 	mov	r16,r2
    c9e4:	3825883a 	mov	r18,r7
    c9e8:	003e9606 	br	c444 <__alt_data_end+0xfffb6d14>
    c9ec:	80001a1e 	bne	r16,zero,ca58 <__adddf3+0x690>
    c9f0:	2c4eb03a 	or	r7,r5,r17
    c9f4:	38005526 	beq	r7,zero,cb4c <__adddf3+0x784>
    c9f8:	0108303a 	nor	r4,zero,r4
    c9fc:	2000511e 	bne	r4,zero,cb44 <__adddf3+0x77c>
    ca00:	89a3883a 	add	r17,r17,r6
    ca04:	414b883a 	add	r5,r8,r5
    ca08:	898d803a 	cmpltu	r6,r17,r6
    ca0c:	298b883a 	add	r5,r5,r6
    ca10:	1021883a 	mov	r16,r2
    ca14:	003f0e06 	br	c650 <__alt_data_end+0xfffb6f20>
    ca18:	1000341e 	bne	r2,zero,caec <__adddf3+0x724>
    ca1c:	4184b03a 	or	r2,r8,r6
    ca20:	10006f26 	beq	r2,zero,cbe0 <__adddf3+0x818>
    ca24:	400b883a 	mov	r5,r8
    ca28:	3023883a 	mov	r17,r6
    ca2c:	3825883a 	mov	r18,r7
    ca30:	0401ffc4 	movi	r16,2047
    ca34:	003e8306 	br	c444 <__alt_data_end+0xfffb6d14>
    ca38:	2c62b03a 	or	r17,r5,r17
    ca3c:	8822c03a 	cmpne	r17,r17,zero
    ca40:	0007883a 	mov	r3,zero
    ca44:	003f9506 	br	c89c <__alt_data_end+0xfffb716c>
    ca48:	1021883a 	mov	r16,r2
    ca4c:	000b883a 	mov	r5,zero
    ca50:	0023883a 	mov	r17,zero
    ca54:	003edb06 	br	c5c4 <__alt_data_end+0xfffb6e94>
    ca58:	01c1ffc4 	movi	r7,2047
    ca5c:	11c03b26 	beq	r2,r7,cb4c <__adddf3+0x784>
    ca60:	0109c83a 	sub	r4,zero,r4
    ca64:	29402034 	orhi	r5,r5,128
    ca68:	01c00e04 	movi	r7,56
    ca6c:	39006216 	blt	r7,r4,cbf8 <__adddf3+0x830>
    ca70:	01c007c4 	movi	r7,31
    ca74:	39006b16 	blt	r7,r4,cc24 <__adddf3+0x85c>
    ca78:	01c00804 	movi	r7,32
    ca7c:	390fc83a 	sub	r7,r7,r4
    ca80:	29d4983a 	sll	r10,r5,r7
    ca84:	8912d83a 	srl	r9,r17,r4
    ca88:	89ce983a 	sll	r7,r17,r7
    ca8c:	2908d83a 	srl	r4,r5,r4
    ca90:	5262b03a 	or	r17,r10,r9
    ca94:	380ac03a 	cmpne	r5,r7,zero
    ca98:	8962b03a 	or	r17,r17,r5
    ca9c:	89a3883a 	add	r17,r17,r6
    caa0:	2211883a 	add	r8,r4,r8
    caa4:	898d803a 	cmpltu	r6,r17,r6
    caa8:	418b883a 	add	r5,r8,r6
    caac:	1021883a 	mov	r16,r2
    cab0:	003ee706 	br	c650 <__alt_data_end+0xfffb6f20>
    cab4:	4184b03a 	or	r2,r8,r6
    cab8:	103e6226 	beq	r2,zero,c444 <__alt_data_end+0xfffb6d14>
    cabc:	8987c83a 	sub	r3,r17,r6
    cac0:	88c9803a 	cmpltu	r4,r17,r3
    cac4:	2a05c83a 	sub	r2,r5,r8
    cac8:	1105c83a 	sub	r2,r2,r4
    cacc:	1100202c 	andhi	r4,r2,128
    cad0:	203f0426 	beq	r4,zero,c6e4 <__alt_data_end+0xfffb6fb4>
    cad4:	3463c83a 	sub	r17,r6,r17
    cad8:	414bc83a 	sub	r5,r8,r5
    cadc:	344d803a 	cmpltu	r6,r6,r17
    cae0:	298bc83a 	sub	r5,r5,r6
    cae4:	3825883a 	mov	r18,r7
    cae8:	003e5606 	br	c444 <__alt_data_end+0xfffb6d14>
    caec:	4184b03a 	or	r2,r8,r6
    caf0:	10002b26 	beq	r2,zero,cba0 <__adddf3+0x7d8>
    caf4:	2804d0fa 	srli	r2,r5,3
    caf8:	8822d0fa 	srli	r17,r17,3
    cafc:	280a977a 	slli	r5,r5,29
    cb00:	10c0022c 	andhi	r3,r2,8
    cb04:	2c62b03a 	or	r17,r5,r17
    cb08:	18000826 	beq	r3,zero,cb2c <__adddf3+0x764>
    cb0c:	4008d0fa 	srli	r4,r8,3
    cb10:	20c0022c 	andhi	r3,r4,8
    cb14:	1800051e 	bne	r3,zero,cb2c <__adddf3+0x764>
    cb18:	300cd0fa 	srli	r6,r6,3
    cb1c:	4010977a 	slli	r8,r8,29
    cb20:	2005883a 	mov	r2,r4
    cb24:	3825883a 	mov	r18,r7
    cb28:	41a2b03a 	or	r17,r8,r6
    cb2c:	880ad77a 	srli	r5,r17,29
    cb30:	100490fa 	slli	r2,r2,3
    cb34:	882290fa 	slli	r17,r17,3
    cb38:	0401ffc4 	movi	r16,2047
    cb3c:	288ab03a 	or	r5,r5,r2
    cb40:	003e4006 	br	c444 <__alt_data_end+0xfffb6d14>
    cb44:	01c1ffc4 	movi	r7,2047
    cb48:	11ffc71e 	bne	r2,r7,ca68 <__alt_data_end+0xfffb7338>
    cb4c:	400b883a 	mov	r5,r8
    cb50:	3023883a 	mov	r17,r6
    cb54:	1021883a 	mov	r16,r2
    cb58:	003e3a06 	br	c444 <__alt_data_end+0xfffb6d14>
    cb5c:	10002d26 	beq	r2,zero,cc14 <__adddf3+0x84c>
    cb60:	4184b03a 	or	r2,r8,r6
    cb64:	10000e26 	beq	r2,zero,cba0 <__adddf3+0x7d8>
    cb68:	2804d0fa 	srli	r2,r5,3
    cb6c:	8822d0fa 	srli	r17,r17,3
    cb70:	280a977a 	slli	r5,r5,29
    cb74:	10c0022c 	andhi	r3,r2,8
    cb78:	2c62b03a 	or	r17,r5,r17
    cb7c:	183feb26 	beq	r3,zero,cb2c <__alt_data_end+0xfffb73fc>
    cb80:	4008d0fa 	srli	r4,r8,3
    cb84:	20c0022c 	andhi	r3,r4,8
    cb88:	183fe81e 	bne	r3,zero,cb2c <__alt_data_end+0xfffb73fc>
    cb8c:	300cd0fa 	srli	r6,r6,3
    cb90:	4010977a 	slli	r8,r8,29
    cb94:	2005883a 	mov	r2,r4
    cb98:	41a2b03a 	or	r17,r8,r6
    cb9c:	003fe306 	br	cb2c <__alt_data_end+0xfffb73fc>
    cba0:	0401ffc4 	movi	r16,2047
    cba4:	003e2706 	br	c444 <__alt_data_end+0xfffb6d14>
    cba8:	0011883a 	mov	r8,zero
    cbac:	003f8306 	br	c9bc <__alt_data_end+0xfffb728c>
    cbb0:	193ff804 	addi	r4,r3,-32
    cbb4:	02400804 	movi	r9,32
    cbb8:	2908d83a 	srl	r4,r5,r4
    cbbc:	1a402526 	beq	r3,r9,cc54 <__adddf3+0x88c>
    cbc0:	02401004 	movi	r9,64
    cbc4:	48c7c83a 	sub	r3,r9,r3
    cbc8:	28ca983a 	sll	r5,r5,r3
    cbcc:	2c62b03a 	or	r17,r5,r17
    cbd0:	8822c03a 	cmpne	r17,r17,zero
    cbd4:	8922b03a 	or	r17,r17,r4
    cbd8:	0007883a 	mov	r3,zero
    cbdc:	003f2f06 	br	c89c <__alt_data_end+0xfffb716c>
    cbe0:	01402034 	movhi	r5,128
    cbe4:	0007883a 	mov	r3,zero
    cbe8:	297fffc4 	addi	r5,r5,-1
    cbec:	047ffe04 	movi	r17,-8
    cbf0:	0401ffc4 	movi	r16,2047
    cbf4:	003e7306 	br	c5c4 <__alt_data_end+0xfffb6e94>
    cbf8:	2c62b03a 	or	r17,r5,r17
    cbfc:	8822c03a 	cmpne	r17,r17,zero
    cc00:	0009883a 	mov	r4,zero
    cc04:	003fa506 	br	ca9c <__alt_data_end+0xfffb736c>
    cc08:	400b883a 	mov	r5,r8
    cc0c:	3023883a 	mov	r17,r6
    cc10:	003e0c06 	br	c444 <__alt_data_end+0xfffb6d14>
    cc14:	400b883a 	mov	r5,r8
    cc18:	3023883a 	mov	r17,r6
    cc1c:	0401ffc4 	movi	r16,2047
    cc20:	003e0806 	br	c444 <__alt_data_end+0xfffb6d14>
    cc24:	21fff804 	addi	r7,r4,-32
    cc28:	02400804 	movi	r9,32
    cc2c:	29ced83a 	srl	r7,r5,r7
    cc30:	22400a26 	beq	r4,r9,cc5c <__adddf3+0x894>
    cc34:	02401004 	movi	r9,64
    cc38:	4909c83a 	sub	r4,r9,r4
    cc3c:	290a983a 	sll	r5,r5,r4
    cc40:	2c62b03a 	or	r17,r5,r17
    cc44:	8822c03a 	cmpne	r17,r17,zero
    cc48:	89e2b03a 	or	r17,r17,r7
    cc4c:	0009883a 	mov	r4,zero
    cc50:	003f9206 	br	ca9c <__alt_data_end+0xfffb736c>
    cc54:	000b883a 	mov	r5,zero
    cc58:	003fdc06 	br	cbcc <__alt_data_end+0xfffb749c>
    cc5c:	000b883a 	mov	r5,zero
    cc60:	003ff706 	br	cc40 <__alt_data_end+0xfffb7510>

0000cc64 <__divdf3>:
    cc64:	defff004 	addi	sp,sp,-64
    cc68:	dc800815 	stw	r18,32(sp)
    cc6c:	2824d53a 	srli	r18,r5,20
    cc70:	dd800c15 	stw	r22,48(sp)
    cc74:	282cd7fa 	srli	r22,r5,31
    cc78:	dc000615 	stw	r16,24(sp)
    cc7c:	04000434 	movhi	r16,16
    cc80:	df000e15 	stw	fp,56(sp)
    cc84:	dd000a15 	stw	r20,40(sp)
    cc88:	dcc00915 	stw	r19,36(sp)
    cc8c:	dc400715 	stw	r17,28(sp)
    cc90:	843fffc4 	addi	r16,r16,-1
    cc94:	dfc00f15 	stw	ra,60(sp)
    cc98:	ddc00d15 	stw	r23,52(sp)
    cc9c:	dd400b15 	stw	r21,44(sp)
    cca0:	9481ffcc 	andi	r18,r18,2047
    cca4:	2029883a 	mov	r20,r4
    cca8:	2027883a 	mov	r19,r4
    ccac:	2c22703a 	and	r17,r5,r16
    ccb0:	b7003fcc 	andi	fp,r22,255
    ccb4:	90005e26 	beq	r18,zero,ce30 <__divdf3+0x1cc>
    ccb8:	0081ffc4 	movi	r2,2047
    ccbc:	90803526 	beq	r18,r2,cd94 <__divdf3+0x130>
    ccc0:	8c000434 	orhi	r16,r17,16
    ccc4:	2004d77a 	srli	r2,r4,29
    ccc8:	802090fa 	slli	r16,r16,3
    cccc:	202690fa 	slli	r19,r4,3
    ccd0:	94bf0044 	addi	r18,r18,-1023
    ccd4:	80a2b03a 	or	r17,r16,r2
    ccd8:	0029883a 	mov	r20,zero
    ccdc:	0011883a 	mov	r8,zero
    cce0:	380ad53a 	srli	r5,r7,20
    cce4:	382ed7fa 	srli	r23,r7,31
    cce8:	04000434 	movhi	r16,16
    ccec:	843fffc4 	addi	r16,r16,-1
    ccf0:	2941ffcc 	andi	r5,r5,2047
    ccf4:	302b883a 	mov	r21,r6
    ccf8:	3c20703a 	and	r16,r7,r16
    ccfc:	ba403fcc 	andi	r9,r23,255
    cd00:	28006726 	beq	r5,zero,cea0 <__divdf3+0x23c>
    cd04:	0081ffc4 	movi	r2,2047
    cd08:	28805f26 	beq	r5,r2,ce88 <__divdf3+0x224>
    cd0c:	84000434 	orhi	r16,r16,16
    cd10:	3004d77a 	srli	r2,r6,29
    cd14:	802090fa 	slli	r16,r16,3
    cd18:	302a90fa 	slli	r21,r6,3
    cd1c:	297f0044 	addi	r5,r5,-1023
    cd20:	80a0b03a 	or	r16,r16,r2
    cd24:	000f883a 	mov	r7,zero
    cd28:	3d06b03a 	or	r3,r7,r20
    cd2c:	180690ba 	slli	r3,r3,2
    cd30:	00800074 	movhi	r2,1
    cd34:	10b35504 	addi	r2,r2,-12972
    cd38:	1885883a 	add	r2,r3,r2
    cd3c:	10800017 	ldw	r2,0(r2)
    cd40:	b5c8f03a 	xor	r4,r22,r23
    cd44:	200d883a 	mov	r6,r4
    cd48:	25003fcc 	andi	r20,r4,255
    cd4c:	9165c83a 	sub	r18,r18,r5
    cd50:	1000683a 	jmp	r2
    cd54:	0000cf9c 	xori	zero,zero,830
    cd58:	0000cdcc 	andi	zero,zero,823
    cd5c:	0000cf60 	cmpeqi	zero,zero,829
    cd60:	0000cdb0 	cmpltui	zero,zero,822
    cd64:	0000cf60 	cmpeqi	zero,zero,829
    cd68:	0000cf34 	movhi	zero,828
    cd6c:	0000cf60 	cmpeqi	zero,zero,829
    cd70:	0000cdb0 	cmpltui	zero,zero,822
    cd74:	0000cdcc 	andi	zero,zero,823
    cd78:	0000cdcc 	andi	zero,zero,823
    cd7c:	0000cf34 	movhi	zero,828
    cd80:	0000cdb0 	cmpltui	zero,zero,822
    cd84:	0000cdc0 	call	cdc <setup_keyboard+0x63c>
    cd88:	0000cdc0 	call	cdc <setup_keyboard+0x63c>
    cd8c:	0000cdc0 	call	cdc <setup_keyboard+0x63c>
    cd90:	0000cf70 	cmpltui	zero,zero,829
    cd94:	8904b03a 	or	r2,r17,r4
    cd98:	1000631e 	bne	r2,zero,cf28 <__divdf3+0x2c4>
    cd9c:	05000204 	movi	r20,8
    cda0:	0023883a 	mov	r17,zero
    cda4:	0027883a 	mov	r19,zero
    cda8:	02000084 	movi	r8,2
    cdac:	003fcc06 	br	cce0 <__alt_data_end+0xfffb75b0>
    cdb0:	8023883a 	mov	r17,r16
    cdb4:	a827883a 	mov	r19,r21
    cdb8:	4839883a 	mov	fp,r9
    cdbc:	3811883a 	mov	r8,r7
    cdc0:	00800084 	movi	r2,2
    cdc4:	4081531e 	bne	r8,r2,d314 <__divdf3+0x6b0>
    cdc8:	e029883a 	mov	r20,fp
    cdcc:	a180004c 	andi	r6,r20,1
    cdd0:	0201ffc4 	movi	r8,2047
    cdd4:	000b883a 	mov	r5,zero
    cdd8:	0027883a 	mov	r19,zero
    cddc:	4010953a 	slli	r8,r8,20
    cde0:	30c03fcc 	andi	r3,r6,255
    cde4:	04000434 	movhi	r16,16
    cde8:	180697fa 	slli	r3,r3,31
    cdec:	843fffc4 	addi	r16,r16,-1
    cdf0:	2c20703a 	and	r16,r5,r16
    cdf4:	8220b03a 	or	r16,r16,r8
    cdf8:	80c6b03a 	or	r3,r16,r3
    cdfc:	9805883a 	mov	r2,r19
    ce00:	dfc00f17 	ldw	ra,60(sp)
    ce04:	df000e17 	ldw	fp,56(sp)
    ce08:	ddc00d17 	ldw	r23,52(sp)
    ce0c:	dd800c17 	ldw	r22,48(sp)
    ce10:	dd400b17 	ldw	r21,44(sp)
    ce14:	dd000a17 	ldw	r20,40(sp)
    ce18:	dcc00917 	ldw	r19,36(sp)
    ce1c:	dc800817 	ldw	r18,32(sp)
    ce20:	dc400717 	ldw	r17,28(sp)
    ce24:	dc000617 	ldw	r16,24(sp)
    ce28:	dec01004 	addi	sp,sp,64
    ce2c:	f800283a 	ret
    ce30:	8904b03a 	or	r2,r17,r4
    ce34:	10003726 	beq	r2,zero,cf14 <__divdf3+0x2b0>
    ce38:	88014d26 	beq	r17,zero,d370 <__divdf3+0x70c>
    ce3c:	8809883a 	mov	r4,r17
    ce40:	d9800215 	stw	r6,8(sp)
    ce44:	d9c00515 	stw	r7,20(sp)
    ce48:	000eb600 	call	eb60 <__clzsi2>
    ce4c:	d9800217 	ldw	r6,8(sp)
    ce50:	d9c00517 	ldw	r7,20(sp)
    ce54:	1007883a 	mov	r3,r2
    ce58:	01000a04 	movi	r4,40
    ce5c:	1cfffe04 	addi	r19,r3,-8
    ce60:	20c9c83a 	sub	r4,r4,r3
    ce64:	8cca983a 	sll	r5,r17,r19
    ce68:	a108d83a 	srl	r4,r20,r4
    ce6c:	a4e6983a 	sll	r19,r20,r19
    ce70:	2162b03a 	or	r17,r4,r5
    ce74:	04bf0344 	movi	r18,-1011
    ce78:	90e5c83a 	sub	r18,r18,r3
    ce7c:	0029883a 	mov	r20,zero
    ce80:	0011883a 	mov	r8,zero
    ce84:	003f9606 	br	cce0 <__alt_data_end+0xfffb75b0>
    ce88:	8184b03a 	or	r2,r16,r6
    ce8c:	10001f1e 	bne	r2,zero,cf0c <__divdf3+0x2a8>
    ce90:	0021883a 	mov	r16,zero
    ce94:	002b883a 	mov	r21,zero
    ce98:	01c00084 	movi	r7,2
    ce9c:	003fa206 	br	cd28 <__alt_data_end+0xfffb75f8>
    cea0:	8184b03a 	or	r2,r16,r6
    cea4:	10001526 	beq	r2,zero,cefc <__divdf3+0x298>
    cea8:	80013d26 	beq	r16,zero,d3a0 <__divdf3+0x73c>
    ceac:	8009883a 	mov	r4,r16
    ceb0:	d9800215 	stw	r6,8(sp)
    ceb4:	da000315 	stw	r8,12(sp)
    ceb8:	da400415 	stw	r9,16(sp)
    cebc:	000eb600 	call	eb60 <__clzsi2>
    cec0:	d9800217 	ldw	r6,8(sp)
    cec4:	da000317 	ldw	r8,12(sp)
    cec8:	da400417 	ldw	r9,16(sp)
    cecc:	1007883a 	mov	r3,r2
    ced0:	01000a04 	movi	r4,40
    ced4:	1d7ffe04 	addi	r21,r3,-8
    ced8:	20c9c83a 	sub	r4,r4,r3
    cedc:	8560983a 	sll	r16,r16,r21
    cee0:	3108d83a 	srl	r4,r6,r4
    cee4:	356a983a 	sll	r21,r6,r21
    cee8:	2420b03a 	or	r16,r4,r16
    ceec:	017f0344 	movi	r5,-1011
    cef0:	28cbc83a 	sub	r5,r5,r3
    cef4:	000f883a 	mov	r7,zero
    cef8:	003f8b06 	br	cd28 <__alt_data_end+0xfffb75f8>
    cefc:	0021883a 	mov	r16,zero
    cf00:	002b883a 	mov	r21,zero
    cf04:	01c00044 	movi	r7,1
    cf08:	003f8706 	br	cd28 <__alt_data_end+0xfffb75f8>
    cf0c:	01c000c4 	movi	r7,3
    cf10:	003f8506 	br	cd28 <__alt_data_end+0xfffb75f8>
    cf14:	05000104 	movi	r20,4
    cf18:	0023883a 	mov	r17,zero
    cf1c:	0027883a 	mov	r19,zero
    cf20:	02000044 	movi	r8,1
    cf24:	003f6e06 	br	cce0 <__alt_data_end+0xfffb75b0>
    cf28:	05000304 	movi	r20,12
    cf2c:	020000c4 	movi	r8,3
    cf30:	003f6b06 	br	cce0 <__alt_data_end+0xfffb75b0>
    cf34:	01400434 	movhi	r5,16
    cf38:	000d883a 	mov	r6,zero
    cf3c:	297fffc4 	addi	r5,r5,-1
    cf40:	04ffffc4 	movi	r19,-1
    cf44:	0201ffc4 	movi	r8,2047
    cf48:	003fa406 	br	cddc <__alt_data_end+0xfffb76ac>
    cf4c:	043f0084 	movi	r16,-1022
    cf50:	84a1c83a 	sub	r16,r16,r18
    cf54:	00800e04 	movi	r2,56
    cf58:	14014d0e 	bge	r2,r16,d490 <__divdf3+0x82c>
    cf5c:	a180004c 	andi	r6,r20,1
    cf60:	0011883a 	mov	r8,zero
    cf64:	000b883a 	mov	r5,zero
    cf68:	0027883a 	mov	r19,zero
    cf6c:	003f9b06 	br	cddc <__alt_data_end+0xfffb76ac>
    cf70:	8880022c 	andhi	r2,r17,8
    cf74:	1000f026 	beq	r2,zero,d338 <__divdf3+0x6d4>
    cf78:	8080022c 	andhi	r2,r16,8
    cf7c:	1000ee1e 	bne	r2,zero,d338 <__divdf3+0x6d4>
    cf80:	00800434 	movhi	r2,16
    cf84:	81400234 	orhi	r5,r16,8
    cf88:	10bfffc4 	addi	r2,r2,-1
    cf8c:	b80d883a 	mov	r6,r23
    cf90:	288a703a 	and	r5,r5,r2
    cf94:	a827883a 	mov	r19,r21
    cf98:	003fea06 	br	cf44 <__alt_data_end+0xfffb7814>
    cf9c:	84411c36 	bltu	r16,r17,d410 <__divdf3+0x7ac>
    cfa0:	8c011a26 	beq	r17,r16,d40c <__divdf3+0x7a8>
    cfa4:	94bfffc4 	addi	r18,r18,-1
    cfa8:	dcc00015 	stw	r19,0(sp)
    cfac:	8811883a 	mov	r8,r17
    cfb0:	002d883a 	mov	r22,zero
    cfb4:	a80cd63a 	srli	r6,r21,24
    cfb8:	8020923a 	slli	r16,r16,8
    cfbc:	a82a923a 	slli	r21,r21,8
    cfc0:	4009883a 	mov	r4,r8
    cfc4:	342eb03a 	or	r23,r6,r16
    cfc8:	dd400115 	stw	r21,4(sp)
    cfcc:	b82ad43a 	srli	r21,r23,16
    cfd0:	da000315 	stw	r8,12(sp)
    cfd4:	bcffffcc 	andi	r19,r23,65535
    cfd8:	a80b883a 	mov	r5,r21
    cfdc:	000c3900 	call	c390 <__udivsi3>
    cfe0:	1009883a 	mov	r4,r2
    cfe4:	980b883a 	mov	r5,r19
    cfe8:	1023883a 	mov	r17,r2
    cfec:	000c3a00 	call	c3a0 <__mulsi3>
    cff0:	da000317 	ldw	r8,12(sp)
    cff4:	a80b883a 	mov	r5,r21
    cff8:	1039883a 	mov	fp,r2
    cffc:	4009883a 	mov	r4,r8
    d000:	000c3980 	call	c398 <__umodsi3>
    d004:	d8c00017 	ldw	r3,0(sp)
    d008:	1004943a 	slli	r2,r2,16
    d00c:	1810d43a 	srli	r8,r3,16
    d010:	120eb03a 	or	r7,r2,r8
    d014:	3f00062e 	bgeu	r7,fp,d030 <__divdf3+0x3cc>
    d018:	3dcf883a 	add	r7,r7,r23
    d01c:	88bfffc4 	addi	r2,r17,-1
    d020:	3dc10a36 	bltu	r7,r23,d44c <__divdf3+0x7e8>
    d024:	3f01092e 	bgeu	r7,fp,d44c <__divdf3+0x7e8>
    d028:	8c7fff84 	addi	r17,r17,-2
    d02c:	3dcf883a 	add	r7,r7,r23
    d030:	3f39c83a 	sub	fp,r7,fp
    d034:	e009883a 	mov	r4,fp
    d038:	a80b883a 	mov	r5,r21
    d03c:	000c3900 	call	c390 <__udivsi3>
    d040:	1009883a 	mov	r4,r2
    d044:	980b883a 	mov	r5,r19
    d048:	1021883a 	mov	r16,r2
    d04c:	000c3a00 	call	c3a0 <__mulsi3>
    d050:	e009883a 	mov	r4,fp
    d054:	a80b883a 	mov	r5,r21
    d058:	d8800315 	stw	r2,12(sp)
    d05c:	000c3980 	call	c398 <__umodsi3>
    d060:	d9000017 	ldw	r4,0(sp)
    d064:	1004943a 	slli	r2,r2,16
    d068:	da000317 	ldw	r8,12(sp)
    d06c:	20ffffcc 	andi	r3,r4,65535
    d070:	10ceb03a 	or	r7,r2,r3
    d074:	3a00062e 	bgeu	r7,r8,d090 <__divdf3+0x42c>
    d078:	3dcf883a 	add	r7,r7,r23
    d07c:	80bfffc4 	addi	r2,r16,-1
    d080:	3dc0f036 	bltu	r7,r23,d444 <__divdf3+0x7e0>
    d084:	3a00ef2e 	bgeu	r7,r8,d444 <__divdf3+0x7e0>
    d088:	843fff84 	addi	r16,r16,-2
    d08c:	3dcf883a 	add	r7,r7,r23
    d090:	d8c00117 	ldw	r3,4(sp)
    d094:	8822943a 	slli	r17,r17,16
    d098:	3a0fc83a 	sub	r7,r7,r8
    d09c:	1806d43a 	srli	r3,r3,16
    d0a0:	8462b03a 	or	r17,r16,r17
    d0a4:	8affffcc 	andi	r11,r17,65535
    d0a8:	d8c00015 	stw	r3,0(sp)
    d0ac:	d8c00117 	ldw	r3,4(sp)
    d0b0:	8820d43a 	srli	r16,r17,16
    d0b4:	5809883a 	mov	r4,r11
    d0b8:	1f3fffcc 	andi	fp,r3,65535
    d0bc:	e00b883a 	mov	r5,fp
    d0c0:	d9c00515 	stw	r7,20(sp)
    d0c4:	dac00215 	stw	r11,8(sp)
    d0c8:	000c3a00 	call	c3a0 <__mulsi3>
    d0cc:	8009883a 	mov	r4,r16
    d0d0:	e00b883a 	mov	r5,fp
    d0d4:	d8800415 	stw	r2,16(sp)
    d0d8:	000c3a00 	call	c3a0 <__mulsi3>
    d0dc:	d9400017 	ldw	r5,0(sp)
    d0e0:	8009883a 	mov	r4,r16
    d0e4:	d8800315 	stw	r2,12(sp)
    d0e8:	000c3a00 	call	c3a0 <__mulsi3>
    d0ec:	dac00217 	ldw	r11,8(sp)
    d0f0:	d9400017 	ldw	r5,0(sp)
    d0f4:	d8800215 	stw	r2,8(sp)
    d0f8:	5809883a 	mov	r4,r11
    d0fc:	000c3a00 	call	c3a0 <__mulsi3>
    d100:	da400417 	ldw	r9,16(sp)
    d104:	da800317 	ldw	r10,12(sp)
    d108:	d9c00517 	ldw	r7,20(sp)
    d10c:	480ad43a 	srli	r5,r9,16
    d110:	5085883a 	add	r2,r10,r2
    d114:	db000217 	ldw	r12,8(sp)
    d118:	1151883a 	add	r8,r2,r5
    d11c:	4280022e 	bgeu	r8,r10,d128 <__divdf3+0x4c4>
    d120:	00800074 	movhi	r2,1
    d124:	6099883a 	add	r12,r12,r2
    d128:	400ad43a 	srli	r5,r8,16
    d12c:	4010943a 	slli	r8,r8,16
    d130:	4c3fffcc 	andi	r16,r9,65535
    d134:	6149883a 	add	r4,r12,r5
    d138:	4411883a 	add	r8,r8,r16
    d13c:	3900a736 	bltu	r7,r4,d3dc <__divdf3+0x778>
    d140:	3900c426 	beq	r7,r4,d454 <__divdf3+0x7f0>
    d144:	3909c83a 	sub	r4,r7,r4
    d148:	b221c83a 	sub	r16,r22,r8
    d14c:	b42d803a 	cmpltu	r22,r22,r16
    d150:	25adc83a 	sub	r22,r4,r22
    d154:	b5c0c626 	beq	r22,r23,d470 <__divdf3+0x80c>
    d158:	b009883a 	mov	r4,r22
    d15c:	a80b883a 	mov	r5,r21
    d160:	000c3900 	call	c390 <__udivsi3>
    d164:	1009883a 	mov	r4,r2
    d168:	980b883a 	mov	r5,r19
    d16c:	d8800315 	stw	r2,12(sp)
    d170:	000c3a00 	call	c3a0 <__mulsi3>
    d174:	a80b883a 	mov	r5,r21
    d178:	b009883a 	mov	r4,r22
    d17c:	d8800415 	stw	r2,16(sp)
    d180:	000c3980 	call	c398 <__umodsi3>
    d184:	1004943a 	slli	r2,r2,16
    d188:	800ed43a 	srli	r7,r16,16
    d18c:	da400417 	ldw	r9,16(sp)
    d190:	da000317 	ldw	r8,12(sp)
    d194:	11cab03a 	or	r5,r2,r7
    d198:	2a40062e 	bgeu	r5,r9,d1b4 <__divdf3+0x550>
    d19c:	2dcb883a 	add	r5,r5,r23
    d1a0:	40bfffc4 	addi	r2,r8,-1
    d1a4:	2dc0b436 	bltu	r5,r23,d478 <__divdf3+0x814>
    d1a8:	2a40b32e 	bgeu	r5,r9,d478 <__divdf3+0x814>
    d1ac:	423fff84 	addi	r8,r8,-2
    d1b0:	2dcb883a 	add	r5,r5,r23
    d1b4:	2a6dc83a 	sub	r22,r5,r9
    d1b8:	b009883a 	mov	r4,r22
    d1bc:	a80b883a 	mov	r5,r21
    d1c0:	da000315 	stw	r8,12(sp)
    d1c4:	000c3900 	call	c390 <__udivsi3>
    d1c8:	980b883a 	mov	r5,r19
    d1cc:	1009883a 	mov	r4,r2
    d1d0:	d8800415 	stw	r2,16(sp)
    d1d4:	000c3a00 	call	c3a0 <__mulsi3>
    d1d8:	b009883a 	mov	r4,r22
    d1dc:	a80b883a 	mov	r5,r21
    d1e0:	1027883a 	mov	r19,r2
    d1e4:	000c3980 	call	c398 <__umodsi3>
    d1e8:	1004943a 	slli	r2,r2,16
    d1ec:	843fffcc 	andi	r16,r16,65535
    d1f0:	da000317 	ldw	r8,12(sp)
    d1f4:	140eb03a 	or	r7,r2,r16
    d1f8:	da400417 	ldw	r9,16(sp)
    d1fc:	3cc0062e 	bgeu	r7,r19,d218 <__divdf3+0x5b4>
    d200:	3dcf883a 	add	r7,r7,r23
    d204:	48bfffc4 	addi	r2,r9,-1
    d208:	3dc09d36 	bltu	r7,r23,d480 <__divdf3+0x81c>
    d20c:	3cc09c2e 	bgeu	r7,r19,d480 <__divdf3+0x81c>
    d210:	4a7fff84 	addi	r9,r9,-2
    d214:	3dcf883a 	add	r7,r7,r23
    d218:	4010943a 	slli	r8,r8,16
    d21c:	3cebc83a 	sub	r21,r7,r19
    d220:	e00b883a 	mov	r5,fp
    d224:	4a26b03a 	or	r19,r9,r8
    d228:	99ffffcc 	andi	r7,r19,65535
    d22c:	9820d43a 	srli	r16,r19,16
    d230:	3809883a 	mov	r4,r7
    d234:	d9c00515 	stw	r7,20(sp)
    d238:	000c3a00 	call	c3a0 <__mulsi3>
    d23c:	8009883a 	mov	r4,r16
    d240:	e00b883a 	mov	r5,fp
    d244:	102d883a 	mov	r22,r2
    d248:	000c3a00 	call	c3a0 <__mulsi3>
    d24c:	d9400017 	ldw	r5,0(sp)
    d250:	8009883a 	mov	r4,r16
    d254:	1039883a 	mov	fp,r2
    d258:	000c3a00 	call	c3a0 <__mulsi3>
    d25c:	d9c00517 	ldw	r7,20(sp)
    d260:	d9400017 	ldw	r5,0(sp)
    d264:	1021883a 	mov	r16,r2
    d268:	3809883a 	mov	r4,r7
    d26c:	000c3a00 	call	c3a0 <__mulsi3>
    d270:	b008d43a 	srli	r4,r22,16
    d274:	e085883a 	add	r2,fp,r2
    d278:	1109883a 	add	r4,r2,r4
    d27c:	2700022e 	bgeu	r4,fp,d288 <__divdf3+0x624>
    d280:	00800074 	movhi	r2,1
    d284:	80a1883a 	add	r16,r16,r2
    d288:	200ad43a 	srli	r5,r4,16
    d28c:	2008943a 	slli	r4,r4,16
    d290:	b5bfffcc 	andi	r22,r22,65535
    d294:	8145883a 	add	r2,r16,r5
    d298:	2589883a 	add	r4,r4,r22
    d29c:	a8802c36 	bltu	r21,r2,d350 <__divdf3+0x6ec>
    d2a0:	a880a426 	beq	r21,r2,d534 <__divdf3+0x8d0>
    d2a4:	9cc00054 	ori	r19,r19,1
    d2a8:	9200ffc4 	addi	r8,r18,1023
    d2ac:	023f270e 	bge	zero,r8,cf4c <__alt_data_end+0xfffb781c>
    d2b0:	988001cc 	andi	r2,r19,7
    d2b4:	10000726 	beq	r2,zero,d2d4 <__divdf3+0x670>
    d2b8:	990003cc 	andi	r4,r19,15
    d2bc:	00800104 	movi	r2,4
    d2c0:	20800426 	beq	r4,r2,d2d4 <__divdf3+0x670>
    d2c4:	9885883a 	add	r2,r19,r2
    d2c8:	14e7803a 	cmpltu	r19,r2,r19
    d2cc:	8ce3883a 	add	r17,r17,r19
    d2d0:	1027883a 	mov	r19,r2
    d2d4:	8880402c 	andhi	r2,r17,256
    d2d8:	10000426 	beq	r2,zero,d2ec <__divdf3+0x688>
    d2dc:	00bfc034 	movhi	r2,65280
    d2e0:	10bfffc4 	addi	r2,r2,-1
    d2e4:	92010004 	addi	r8,r18,1024
    d2e8:	88a2703a 	and	r17,r17,r2
    d2ec:	0081ff84 	movi	r2,2046
    d2f0:	123eb616 	blt	r2,r8,cdcc <__alt_data_end+0xfffb769c>
    d2f4:	9826d0fa 	srli	r19,r19,3
    d2f8:	8804977a 	slli	r2,r17,29
    d2fc:	8820927a 	slli	r16,r17,9
    d300:	4201ffcc 	andi	r8,r8,2047
    d304:	14e6b03a 	or	r19,r2,r19
    d308:	800ad33a 	srli	r5,r16,12
    d30c:	a180004c 	andi	r6,r20,1
    d310:	003eb206 	br	cddc <__alt_data_end+0xfffb76ac>
    d314:	008000c4 	movi	r2,3
    d318:	4080ac26 	beq	r8,r2,d5cc <__divdf3+0x968>
    d31c:	00800044 	movi	r2,1
    d320:	4080591e 	bne	r8,r2,d488 <__divdf3+0x824>
    d324:	e00d883a 	mov	r6,fp
    d328:	0011883a 	mov	r8,zero
    d32c:	000b883a 	mov	r5,zero
    d330:	0027883a 	mov	r19,zero
    d334:	003ea906 	br	cddc <__alt_data_end+0xfffb76ac>
    d338:	00800434 	movhi	r2,16
    d33c:	89400234 	orhi	r5,r17,8
    d340:	10bfffc4 	addi	r2,r2,-1
    d344:	b00d883a 	mov	r6,r22
    d348:	288a703a 	and	r5,r5,r2
    d34c:	003efd06 	br	cf44 <__alt_data_end+0xfffb7814>
    d350:	adcf883a 	add	r7,r21,r23
    d354:	997fffc4 	addi	r5,r19,-1
    d358:	3dc0412e 	bgeu	r7,r23,d460 <__divdf3+0x7fc>
    d35c:	2827883a 	mov	r19,r5
    d360:	38bfd01e 	bne	r7,r2,d2a4 <__alt_data_end+0xfffb7b74>
    d364:	d8c00117 	ldw	r3,4(sp)
    d368:	193fce1e 	bne	r3,r4,d2a4 <__alt_data_end+0xfffb7b74>
    d36c:	003fce06 	br	d2a8 <__alt_data_end+0xfffb7b78>
    d370:	d9800215 	stw	r6,8(sp)
    d374:	d9c00515 	stw	r7,20(sp)
    d378:	000eb600 	call	eb60 <__clzsi2>
    d37c:	10c00804 	addi	r3,r2,32
    d380:	010009c4 	movi	r4,39
    d384:	d9800217 	ldw	r6,8(sp)
    d388:	d9c00517 	ldw	r7,20(sp)
    d38c:	20feb20e 	bge	r4,r3,ce58 <__alt_data_end+0xfffb7728>
    d390:	117ffe04 	addi	r5,r2,-8
    d394:	a162983a 	sll	r17,r20,r5
    d398:	0027883a 	mov	r19,zero
    d39c:	003eb506 	br	ce74 <__alt_data_end+0xfffb7744>
    d3a0:	3009883a 	mov	r4,r6
    d3a4:	d9800215 	stw	r6,8(sp)
    d3a8:	da000315 	stw	r8,12(sp)
    d3ac:	da400415 	stw	r9,16(sp)
    d3b0:	000eb600 	call	eb60 <__clzsi2>
    d3b4:	10c00804 	addi	r3,r2,32
    d3b8:	010009c4 	movi	r4,39
    d3bc:	d9800217 	ldw	r6,8(sp)
    d3c0:	da000317 	ldw	r8,12(sp)
    d3c4:	da400417 	ldw	r9,16(sp)
    d3c8:	20fec10e 	bge	r4,r3,ced0 <__alt_data_end+0xfffb77a0>
    d3cc:	10bffe04 	addi	r2,r2,-8
    d3d0:	a8a0983a 	sll	r16,r21,r2
    d3d4:	002b883a 	mov	r21,zero
    d3d8:	003ec406 	br	ceec <__alt_data_end+0xfffb77bc>
    d3dc:	d8c00117 	ldw	r3,4(sp)
    d3e0:	b0ed883a 	add	r22,r22,r3
    d3e4:	b0c5803a 	cmpltu	r2,r22,r3
    d3e8:	15c5883a 	add	r2,r2,r23
    d3ec:	11cf883a 	add	r7,r2,r7
    d3f0:	88bfffc4 	addi	r2,r17,-1
    d3f4:	b9c00d2e 	bgeu	r23,r7,d42c <__divdf3+0x7c8>
    d3f8:	39003f36 	bltu	r7,r4,d4f8 <__divdf3+0x894>
    d3fc:	21c06a26 	beq	r4,r7,d5a8 <__divdf3+0x944>
    d400:	3909c83a 	sub	r4,r7,r4
    d404:	1023883a 	mov	r17,r2
    d408:	003f4f06 	br	d148 <__alt_data_end+0xfffb7a18>
    d40c:	9d7ee536 	bltu	r19,r21,cfa4 <__alt_data_end+0xfffb7874>
    d410:	982ed07a 	srli	r23,r19,1
    d414:	880497fa 	slli	r2,r17,31
    d418:	8810d07a 	srli	r8,r17,1
    d41c:	982c97fa 	slli	r22,r19,31
    d420:	b884b03a 	or	r2,r23,r2
    d424:	d8800015 	stw	r2,0(sp)
    d428:	003ee206 	br	cfb4 <__alt_data_end+0xfffb7884>
    d42c:	3dfff41e 	bne	r7,r23,d400 <__alt_data_end+0xfffb7cd0>
    d430:	d8c00117 	ldw	r3,4(sp)
    d434:	b0fff02e 	bgeu	r22,r3,d3f8 <__alt_data_end+0xfffb7cc8>
    d438:	b909c83a 	sub	r4,r23,r4
    d43c:	1023883a 	mov	r17,r2
    d440:	003f4106 	br	d148 <__alt_data_end+0xfffb7a18>
    d444:	1021883a 	mov	r16,r2
    d448:	003f1106 	br	d090 <__alt_data_end+0xfffb7960>
    d44c:	1023883a 	mov	r17,r2
    d450:	003ef706 	br	d030 <__alt_data_end+0xfffb7900>
    d454:	b23fe136 	bltu	r22,r8,d3dc <__alt_data_end+0xfffb7cac>
    d458:	0009883a 	mov	r4,zero
    d45c:	003f3a06 	br	d148 <__alt_data_end+0xfffb7a18>
    d460:	38802c36 	bltu	r7,r2,d514 <__divdf3+0x8b0>
    d464:	11c05326 	beq	r2,r7,d5b4 <__divdf3+0x950>
    d468:	2827883a 	mov	r19,r5
    d46c:	003f8d06 	br	d2a4 <__alt_data_end+0xfffb7b74>
    d470:	04ffffc4 	movi	r19,-1
    d474:	003f8c06 	br	d2a8 <__alt_data_end+0xfffb7b78>
    d478:	1011883a 	mov	r8,r2
    d47c:	003f4d06 	br	d1b4 <__alt_data_end+0xfffb7a84>
    d480:	1013883a 	mov	r9,r2
    d484:	003f6406 	br	d218 <__alt_data_end+0xfffb7ae8>
    d488:	e029883a 	mov	r20,fp
    d48c:	003f8606 	br	d2a8 <__alt_data_end+0xfffb7b78>
    d490:	008007c4 	movi	r2,31
    d494:	14002a16 	blt	r2,r16,d540 <__divdf3+0x8dc>
    d498:	91410784 	addi	r5,r18,1054
    d49c:	9c0cd83a 	srl	r6,r19,r16
    d4a0:	8948983a 	sll	r4,r17,r5
    d4a4:	9944983a 	sll	r2,r19,r5
    d4a8:	8c20d83a 	srl	r16,r17,r16
    d4ac:	3108b03a 	or	r4,r6,r4
    d4b0:	1004c03a 	cmpne	r2,r2,zero
    d4b4:	2084b03a 	or	r2,r4,r2
    d4b8:	110001cc 	andi	r4,r2,7
    d4bc:	20000726 	beq	r4,zero,d4dc <__divdf3+0x878>
    d4c0:	114003cc 	andi	r5,r2,15
    d4c4:	01000104 	movi	r4,4
    d4c8:	29000426 	beq	r5,r4,d4dc <__divdf3+0x878>
    d4cc:	11000104 	addi	r4,r2,4
    d4d0:	2085803a 	cmpltu	r2,r4,r2
    d4d4:	80a1883a 	add	r16,r16,r2
    d4d8:	2005883a 	mov	r2,r4
    d4dc:	8100202c 	andhi	r4,r16,128
    d4e0:	20002d26 	beq	r4,zero,d598 <__divdf3+0x934>
    d4e4:	a180004c 	andi	r6,r20,1
    d4e8:	02000044 	movi	r8,1
    d4ec:	000b883a 	mov	r5,zero
    d4f0:	0027883a 	mov	r19,zero
    d4f4:	003e3906 	br	cddc <__alt_data_end+0xfffb76ac>
    d4f8:	d8c00117 	ldw	r3,4(sp)
    d4fc:	8c7fff84 	addi	r17,r17,-2
    d500:	b0ed883a 	add	r22,r22,r3
    d504:	b0c5803a 	cmpltu	r2,r22,r3
    d508:	15c5883a 	add	r2,r2,r23
    d50c:	11cf883a 	add	r7,r2,r7
    d510:	003f0c06 	br	d144 <__alt_data_end+0xfffb7a14>
    d514:	d8c00117 	ldw	r3,4(sp)
    d518:	997fff84 	addi	r5,r19,-2
    d51c:	18d1883a 	add	r8,r3,r3
    d520:	40c7803a 	cmpltu	r3,r8,r3
    d524:	1dcd883a 	add	r6,r3,r23
    d528:	398f883a 	add	r7,r7,r6
    d52c:	da000115 	stw	r8,4(sp)
    d530:	003f8a06 	br	d35c <__alt_data_end+0xfffb7c2c>
    d534:	203f861e 	bne	r4,zero,d350 <__alt_data_end+0xfffb7c20>
    d538:	d8000115 	stw	zero,4(sp)
    d53c:	003f8906 	br	d364 <__alt_data_end+0xfffb7c34>
    d540:	00bef884 	movi	r2,-1054
    d544:	1485c83a 	sub	r2,r2,r18
    d548:	01000804 	movi	r4,32
    d54c:	8884d83a 	srl	r2,r17,r2
    d550:	81001c26 	beq	r16,r4,d5c4 <__divdf3+0x960>
    d554:	91010f84 	addi	r4,r18,1086
    d558:	8908983a 	sll	r4,r17,r4
    d55c:	24c8b03a 	or	r4,r4,r19
    d560:	2008c03a 	cmpne	r4,r4,zero
    d564:	2084b03a 	or	r2,r4,r2
    d568:	140001cc 	andi	r16,r2,7
    d56c:	8000061e 	bne	r16,zero,d588 <__divdf3+0x924>
    d570:	000b883a 	mov	r5,zero
    d574:	1004d0fa 	srli	r2,r2,3
    d578:	a180004c 	andi	r6,r20,1
    d57c:	0011883a 	mov	r8,zero
    d580:	1426b03a 	or	r19,r2,r16
    d584:	003e1506 	br	cddc <__alt_data_end+0xfffb76ac>
    d588:	114003cc 	andi	r5,r2,15
    d58c:	01000104 	movi	r4,4
    d590:	0021883a 	mov	r16,zero
    d594:	293fcd1e 	bne	r5,r4,d4cc <__alt_data_end+0xfffb7d9c>
    d598:	800a927a 	slli	r5,r16,9
    d59c:	8020977a 	slli	r16,r16,29
    d5a0:	280ad33a 	srli	r5,r5,12
    d5a4:	003ff306 	br	d574 <__alt_data_end+0xfffb7e44>
    d5a8:	b23fd336 	bltu	r22,r8,d4f8 <__alt_data_end+0xfffb7dc8>
    d5ac:	1023883a 	mov	r17,r2
    d5b0:	003fa906 	br	d458 <__alt_data_end+0xfffb7d28>
    d5b4:	d8c00117 	ldw	r3,4(sp)
    d5b8:	193fd636 	bltu	r3,r4,d514 <__alt_data_end+0xfffb7de4>
    d5bc:	2827883a 	mov	r19,r5
    d5c0:	003f6806 	br	d364 <__alt_data_end+0xfffb7c34>
    d5c4:	0009883a 	mov	r4,zero
    d5c8:	003fe406 	br	d55c <__alt_data_end+0xfffb7e2c>
    d5cc:	00800434 	movhi	r2,16
    d5d0:	89400234 	orhi	r5,r17,8
    d5d4:	10bfffc4 	addi	r2,r2,-1
    d5d8:	e00d883a 	mov	r6,fp
    d5dc:	288a703a 	and	r5,r5,r2
    d5e0:	003e5806 	br	cf44 <__alt_data_end+0xfffb7814>

0000d5e4 <__eqdf2>:
    d5e4:	2804d53a 	srli	r2,r5,20
    d5e8:	3806d53a 	srli	r3,r7,20
    d5ec:	02000434 	movhi	r8,16
    d5f0:	423fffc4 	addi	r8,r8,-1
    d5f4:	1081ffcc 	andi	r2,r2,2047
    d5f8:	0241ffc4 	movi	r9,2047
    d5fc:	2a14703a 	and	r10,r5,r8
    d600:	18c1ffcc 	andi	r3,r3,2047
    d604:	3a10703a 	and	r8,r7,r8
    d608:	280ad7fa 	srli	r5,r5,31
    d60c:	380ed7fa 	srli	r7,r7,31
    d610:	12400f26 	beq	r2,r9,d650 <__eqdf2+0x6c>
    d614:	0241ffc4 	movi	r9,2047
    d618:	1a400326 	beq	r3,r9,d628 <__eqdf2+0x44>
    d61c:	10c00526 	beq	r2,r3,d634 <__eqdf2+0x50>
    d620:	00800044 	movi	r2,1
    d624:	f800283a 	ret
    d628:	4192b03a 	or	r9,r8,r6
    d62c:	483ffc1e 	bne	r9,zero,d620 <__alt_data_end+0xfffb7ef0>
    d630:	10fffb1e 	bne	r2,r3,d620 <__alt_data_end+0xfffb7ef0>
    d634:	523ffa1e 	bne	r10,r8,d620 <__alt_data_end+0xfffb7ef0>
    d638:	21bff91e 	bne	r4,r6,d620 <__alt_data_end+0xfffb7ef0>
    d63c:	29c00826 	beq	r5,r7,d660 <__eqdf2+0x7c>
    d640:	103ff71e 	bne	r2,zero,d620 <__alt_data_end+0xfffb7ef0>
    d644:	5104b03a 	or	r2,r10,r4
    d648:	1004c03a 	cmpne	r2,r2,zero
    d64c:	f800283a 	ret
    d650:	5112b03a 	or	r9,r10,r4
    d654:	483fef26 	beq	r9,zero,d614 <__alt_data_end+0xfffb7ee4>
    d658:	00800044 	movi	r2,1
    d65c:	f800283a 	ret
    d660:	0005883a 	mov	r2,zero
    d664:	f800283a 	ret

0000d668 <__gedf2>:
    d668:	2804d53a 	srli	r2,r5,20
    d66c:	3806d53a 	srli	r3,r7,20
    d670:	02000434 	movhi	r8,16
    d674:	423fffc4 	addi	r8,r8,-1
    d678:	0241ffc4 	movi	r9,2047
    d67c:	1081ffcc 	andi	r2,r2,2047
    d680:	2a14703a 	and	r10,r5,r8
    d684:	1a46703a 	and	r3,r3,r9
    d688:	3a10703a 	and	r8,r7,r8
    d68c:	280ad7fa 	srli	r5,r5,31
    d690:	380ed7fa 	srli	r7,r7,31
    d694:	12400b26 	beq	r2,r9,d6c4 <__gedf2+0x5c>
    d698:	1a401626 	beq	r3,r9,d6f4 <__gedf2+0x8c>
    d69c:	10000c1e 	bne	r2,zero,d6d0 <__gedf2+0x68>
    d6a0:	5112b03a 	or	r9,r10,r4
    d6a4:	4813003a 	cmpeq	r9,r9,zero
    d6a8:	4817883a 	mov	r11,r9
    d6ac:	18000c1e 	bne	r3,zero,d6e0 <__gedf2+0x78>
    d6b0:	4198b03a 	or	r12,r8,r6
    d6b4:	60000a1e 	bne	r12,zero,d6e0 <__gedf2+0x78>
    d6b8:	48001326 	beq	r9,zero,d708 <__gedf2+0xa0>
    d6bc:	0005883a 	mov	r2,zero
    d6c0:	f800283a 	ret
    d6c4:	5112b03a 	or	r9,r10,r4
    d6c8:	4800191e 	bne	r9,zero,d730 <__gedf2+0xc8>
    d6cc:	18800926 	beq	r3,r2,d6f4 <__gedf2+0x8c>
    d6d0:	18000b1e 	bne	r3,zero,d700 <__gedf2+0x98>
    d6d4:	4192b03a 	or	r9,r8,r6
    d6d8:	0017883a 	mov	r11,zero
    d6dc:	48000a26 	beq	r9,zero,d708 <__gedf2+0xa0>
    d6e0:	39c03fcc 	andi	r7,r7,255
    d6e4:	58000726 	beq	r11,zero,d704 <__gedf2+0x9c>
    d6e8:	3800081e 	bne	r7,zero,d70c <__gedf2+0xa4>
    d6ec:	00bfffc4 	movi	r2,-1
    d6f0:	f800283a 	ret
    d6f4:	4192b03a 	or	r9,r8,r6
    d6f8:	48000d1e 	bne	r9,zero,d730 <__gedf2+0xc8>
    d6fc:	103fe826 	beq	r2,zero,d6a0 <__alt_data_end+0xfffb7f70>
    d700:	39c03fcc 	andi	r7,r7,255
    d704:	29c00326 	beq	r5,r7,d714 <__gedf2+0xac>
    d708:	283ff81e 	bne	r5,zero,d6ec <__alt_data_end+0xfffb7fbc>
    d70c:	00800044 	movi	r2,1
    d710:	f800283a 	ret
    d714:	18bffc16 	blt	r3,r2,d708 <__alt_data_end+0xfffb7fd8>
    d718:	10c00316 	blt	r2,r3,d728 <__gedf2+0xc0>
    d71c:	42bffa36 	bltu	r8,r10,d708 <__alt_data_end+0xfffb7fd8>
    d720:	52000526 	beq	r10,r8,d738 <__gedf2+0xd0>
    d724:	523fe52e 	bgeu	r10,r8,d6bc <__alt_data_end+0xfffb7f8c>
    d728:	283ff026 	beq	r5,zero,d6ec <__alt_data_end+0xfffb7fbc>
    d72c:	003ff706 	br	d70c <__alt_data_end+0xfffb7fdc>
    d730:	00bfff84 	movi	r2,-2
    d734:	f800283a 	ret
    d738:	313ff336 	bltu	r6,r4,d708 <__alt_data_end+0xfffb7fd8>
    d73c:	21bfdf2e 	bgeu	r4,r6,d6bc <__alt_data_end+0xfffb7f8c>
    d740:	283fea26 	beq	r5,zero,d6ec <__alt_data_end+0xfffb7fbc>
    d744:	003ff106 	br	d70c <__alt_data_end+0xfffb7fdc>

0000d748 <__ledf2>:
    d748:	2804d53a 	srli	r2,r5,20
    d74c:	3810d53a 	srli	r8,r7,20
    d750:	00c00434 	movhi	r3,16
    d754:	18ffffc4 	addi	r3,r3,-1
    d758:	0241ffc4 	movi	r9,2047
    d75c:	1081ffcc 	andi	r2,r2,2047
    d760:	28d4703a 	and	r10,r5,r3
    d764:	4250703a 	and	r8,r8,r9
    d768:	38c6703a 	and	r3,r7,r3
    d76c:	280ad7fa 	srli	r5,r5,31
    d770:	380ed7fa 	srli	r7,r7,31
    d774:	12400b26 	beq	r2,r9,d7a4 <__ledf2+0x5c>
    d778:	42401926 	beq	r8,r9,d7e0 <__ledf2+0x98>
    d77c:	10000c1e 	bne	r2,zero,d7b0 <__ledf2+0x68>
    d780:	5112b03a 	or	r9,r10,r4
    d784:	4813003a 	cmpeq	r9,r9,zero
    d788:	4817883a 	mov	r11,r9
    d78c:	40000f26 	beq	r8,zero,d7cc <__ledf2+0x84>
    d790:	39c03fcc 	andi	r7,r7,255
    d794:	58001826 	beq	r11,zero,d7f8 <__ledf2+0xb0>
    d798:	38000a1e 	bne	r7,zero,d7c4 <__ledf2+0x7c>
    d79c:	00bfffc4 	movi	r2,-1
    d7a0:	f800283a 	ret
    d7a4:	5112b03a 	or	r9,r10,r4
    d7a8:	48000f1e 	bne	r9,zero,d7e8 <__ledf2+0xa0>
    d7ac:	40800c26 	beq	r8,r2,d7e0 <__ledf2+0x98>
    d7b0:	4000101e 	bne	r8,zero,d7f4 <__ledf2+0xac>
    d7b4:	1992b03a 	or	r9,r3,r6
    d7b8:	0017883a 	mov	r11,zero
    d7bc:	483ff41e 	bne	r9,zero,d790 <__alt_data_end+0xfffb8060>
    d7c0:	283ff61e 	bne	r5,zero,d79c <__alt_data_end+0xfffb806c>
    d7c4:	00800044 	movi	r2,1
    d7c8:	f800283a 	ret
    d7cc:	1998b03a 	or	r12,r3,r6
    d7d0:	603fef1e 	bne	r12,zero,d790 <__alt_data_end+0xfffb8060>
    d7d4:	483ffa26 	beq	r9,zero,d7c0 <__alt_data_end+0xfffb8090>
    d7d8:	0005883a 	mov	r2,zero
    d7dc:	f800283a 	ret
    d7e0:	1992b03a 	or	r9,r3,r6
    d7e4:	48000226 	beq	r9,zero,d7f0 <__ledf2+0xa8>
    d7e8:	00800084 	movi	r2,2
    d7ec:	f800283a 	ret
    d7f0:	103fe326 	beq	r2,zero,d780 <__alt_data_end+0xfffb8050>
    d7f4:	39c03fcc 	andi	r7,r7,255
    d7f8:	29fff11e 	bne	r5,r7,d7c0 <__alt_data_end+0xfffb8090>
    d7fc:	40bff016 	blt	r8,r2,d7c0 <__alt_data_end+0xfffb8090>
    d800:	12000316 	blt	r2,r8,d810 <__ledf2+0xc8>
    d804:	1abfee36 	bltu	r3,r10,d7c0 <__alt_data_end+0xfffb8090>
    d808:	50c00326 	beq	r10,r3,d818 <__ledf2+0xd0>
    d80c:	50fff22e 	bgeu	r10,r3,d7d8 <__alt_data_end+0xfffb80a8>
    d810:	283fe226 	beq	r5,zero,d79c <__alt_data_end+0xfffb806c>
    d814:	003feb06 	br	d7c4 <__alt_data_end+0xfffb8094>
    d818:	313fe936 	bltu	r6,r4,d7c0 <__alt_data_end+0xfffb8090>
    d81c:	21bfee2e 	bgeu	r4,r6,d7d8 <__alt_data_end+0xfffb80a8>
    d820:	283fde26 	beq	r5,zero,d79c <__alt_data_end+0xfffb806c>
    d824:	003fe706 	br	d7c4 <__alt_data_end+0xfffb8094>

0000d828 <__muldf3>:
    d828:	deffee04 	addi	sp,sp,-72
    d82c:	dd000c15 	stw	r20,48(sp)
    d830:	2828d53a 	srli	r20,r5,20
    d834:	dd400d15 	stw	r21,52(sp)
    d838:	282ad7fa 	srli	r21,r5,31
    d83c:	dc000815 	stw	r16,32(sp)
    d840:	04000434 	movhi	r16,16
    d844:	ddc00f15 	stw	r23,60(sp)
    d848:	dcc00b15 	stw	r19,44(sp)
    d84c:	dc800a15 	stw	r18,40(sp)
    d850:	843fffc4 	addi	r16,r16,-1
    d854:	dfc01115 	stw	ra,68(sp)
    d858:	df001015 	stw	fp,64(sp)
    d85c:	dd800e15 	stw	r22,56(sp)
    d860:	dc400915 	stw	r17,36(sp)
    d864:	a501ffcc 	andi	r20,r20,2047
    d868:	2025883a 	mov	r18,r4
    d86c:	202f883a 	mov	r23,r4
    d870:	2c20703a 	and	r16,r5,r16
    d874:	a827883a 	mov	r19,r21
    d878:	aa403fcc 	andi	r9,r21,255
    d87c:	a0005926 	beq	r20,zero,d9e4 <__muldf3+0x1bc>
    d880:	0081ffc4 	movi	r2,2047
    d884:	a0803426 	beq	r20,r2,d958 <__muldf3+0x130>
    d888:	84000434 	orhi	r16,r16,16
    d88c:	2004d77a 	srli	r2,r4,29
    d890:	802090fa 	slli	r16,r16,3
    d894:	202e90fa 	slli	r23,r4,3
    d898:	a53f0044 	addi	r20,r20,-1023
    d89c:	80a0b03a 	or	r16,r16,r2
    d8a0:	000b883a 	mov	r5,zero
    d8a4:	0039883a 	mov	fp,zero
    d8a8:	3806d53a 	srli	r3,r7,20
    d8ac:	382cd7fa 	srli	r22,r7,31
    d8b0:	00800434 	movhi	r2,16
    d8b4:	10bfffc4 	addi	r2,r2,-1
    d8b8:	18c1ffcc 	andi	r3,r3,2047
    d8bc:	3025883a 	mov	r18,r6
    d8c0:	38a2703a 	and	r17,r7,r2
    d8c4:	b2803fcc 	andi	r10,r22,255
    d8c8:	18006426 	beq	r3,zero,da5c <__muldf3+0x234>
    d8cc:	0081ffc4 	movi	r2,2047
    d8d0:	18805c26 	beq	r3,r2,da44 <__muldf3+0x21c>
    d8d4:	8c400434 	orhi	r17,r17,16
    d8d8:	3004d77a 	srli	r2,r6,29
    d8dc:	882290fa 	slli	r17,r17,3
    d8e0:	302490fa 	slli	r18,r6,3
    d8e4:	18ff0044 	addi	r3,r3,-1023
    d8e8:	88a2b03a 	or	r17,r17,r2
    d8ec:	000f883a 	mov	r7,zero
    d8f0:	394ab03a 	or	r5,r7,r5
    d8f4:	280a90ba 	slli	r5,r5,2
    d8f8:	00800074 	movhi	r2,1
    d8fc:	10b64604 	addi	r2,r2,-9960
    d900:	288b883a 	add	r5,r5,r2
    d904:	28800017 	ldw	r2,0(r5)
    d908:	a0c7883a 	add	r3,r20,r3
    d90c:	b54cf03a 	xor	r6,r22,r21
    d910:	1a000044 	addi	r8,r3,1
    d914:	1000683a 	jmp	r2
    d918:	0000db5c 	xori	zero,zero,877
    d91c:	0000db48 	cmpgei	zero,zero,877
    d920:	0000db48 	cmpgei	zero,zero,877
    d924:	0000db34 	movhi	zero,876
    d928:	0000d974 	movhi	zero,869
    d92c:	0000d974 	movhi	zero,869
    d930:	0000db1c 	xori	zero,zero,876
    d934:	0000db34 	movhi	zero,876
    d938:	0000d974 	movhi	zero,869
    d93c:	0000db1c 	xori	zero,zero,876
    d940:	0000d974 	movhi	zero,869
    d944:	0000db34 	movhi	zero,876
    d948:	0000d978 	rdprs	zero,zero,869
    d94c:	0000d978 	rdprs	zero,zero,869
    d950:	0000d978 	rdprs	zero,zero,869
    d954:	0000de98 	cmpnei	zero,zero,890
    d958:	8104b03a 	or	r2,r16,r4
    d95c:	10006c1e 	bne	r2,zero,db10 <__muldf3+0x2e8>
    d960:	01400204 	movi	r5,8
    d964:	0021883a 	mov	r16,zero
    d968:	002f883a 	mov	r23,zero
    d96c:	07000084 	movi	fp,2
    d970:	003fcd06 	br	d8a8 <__alt_data_end+0xfffb8178>
    d974:	3013883a 	mov	r9,r6
    d978:	00800084 	movi	r2,2
    d97c:	e080501e 	bne	fp,r2,dac0 <__muldf3+0x298>
    d980:	4cc0004c 	andi	r19,r9,1
    d984:	0101ffc4 	movi	r4,2047
    d988:	0021883a 	mov	r16,zero
    d98c:	002f883a 	mov	r23,zero
    d990:	2008953a 	slli	r4,r4,20
    d994:	98c03fcc 	andi	r3,r19,255
    d998:	04400434 	movhi	r17,16
    d99c:	8c7fffc4 	addi	r17,r17,-1
    d9a0:	180697fa 	slli	r3,r3,31
    d9a4:	8460703a 	and	r16,r16,r17
    d9a8:	8120b03a 	or	r16,r16,r4
    d9ac:	80c6b03a 	or	r3,r16,r3
    d9b0:	b805883a 	mov	r2,r23
    d9b4:	dfc01117 	ldw	ra,68(sp)
    d9b8:	df001017 	ldw	fp,64(sp)
    d9bc:	ddc00f17 	ldw	r23,60(sp)
    d9c0:	dd800e17 	ldw	r22,56(sp)
    d9c4:	dd400d17 	ldw	r21,52(sp)
    d9c8:	dd000c17 	ldw	r20,48(sp)
    d9cc:	dcc00b17 	ldw	r19,44(sp)
    d9d0:	dc800a17 	ldw	r18,40(sp)
    d9d4:	dc400917 	ldw	r17,36(sp)
    d9d8:	dc000817 	ldw	r16,32(sp)
    d9dc:	dec01204 	addi	sp,sp,72
    d9e0:	f800283a 	ret
    d9e4:	8104b03a 	or	r2,r16,r4
    d9e8:	10004426 	beq	r2,zero,dafc <__muldf3+0x2d4>
    d9ec:	80014b26 	beq	r16,zero,df1c <__muldf3+0x6f4>
    d9f0:	8009883a 	mov	r4,r16
    d9f4:	d9800715 	stw	r6,28(sp)
    d9f8:	d9c00215 	stw	r7,8(sp)
    d9fc:	da400415 	stw	r9,16(sp)
    da00:	000eb600 	call	eb60 <__clzsi2>
    da04:	d9800717 	ldw	r6,28(sp)
    da08:	d9c00217 	ldw	r7,8(sp)
    da0c:	da400417 	ldw	r9,16(sp)
    da10:	1007883a 	mov	r3,r2
    da14:	01000a04 	movi	r4,40
    da18:	1dfffe04 	addi	r23,r3,-8
    da1c:	20c9c83a 	sub	r4,r4,r3
    da20:	85e0983a 	sll	r16,r16,r23
    da24:	9108d83a 	srl	r4,r18,r4
    da28:	95ee983a 	sll	r23,r18,r23
    da2c:	2420b03a 	or	r16,r4,r16
    da30:	053f0344 	movi	r20,-1011
    da34:	a0e9c83a 	sub	r20,r20,r3
    da38:	000b883a 	mov	r5,zero
    da3c:	0039883a 	mov	fp,zero
    da40:	003f9906 	br	d8a8 <__alt_data_end+0xfffb8178>
    da44:	8984b03a 	or	r2,r17,r6
    da48:	10002a1e 	bne	r2,zero,daf4 <__muldf3+0x2cc>
    da4c:	0023883a 	mov	r17,zero
    da50:	0025883a 	mov	r18,zero
    da54:	01c00084 	movi	r7,2
    da58:	003fa506 	br	d8f0 <__alt_data_end+0xfffb81c0>
    da5c:	8984b03a 	or	r2,r17,r6
    da60:	10002026 	beq	r2,zero,dae4 <__muldf3+0x2bc>
    da64:	88011c26 	beq	r17,zero,ded8 <__muldf3+0x6b0>
    da68:	8809883a 	mov	r4,r17
    da6c:	d9400215 	stw	r5,8(sp)
    da70:	d9800715 	stw	r6,28(sp)
    da74:	da400415 	stw	r9,16(sp)
    da78:	da800315 	stw	r10,12(sp)
    da7c:	000eb600 	call	eb60 <__clzsi2>
    da80:	d9400217 	ldw	r5,8(sp)
    da84:	d9800717 	ldw	r6,28(sp)
    da88:	da400417 	ldw	r9,16(sp)
    da8c:	da800317 	ldw	r10,12(sp)
    da90:	1007883a 	mov	r3,r2
    da94:	01000a04 	movi	r4,40
    da98:	1cbffe04 	addi	r18,r3,-8
    da9c:	20c9c83a 	sub	r4,r4,r3
    daa0:	8ca2983a 	sll	r17,r17,r18
    daa4:	3108d83a 	srl	r4,r6,r4
    daa8:	34a4983a 	sll	r18,r6,r18
    daac:	2462b03a 	or	r17,r4,r17
    dab0:	00bf0344 	movi	r2,-1011
    dab4:	10c7c83a 	sub	r3,r2,r3
    dab8:	000f883a 	mov	r7,zero
    dabc:	003f8c06 	br	d8f0 <__alt_data_end+0xfffb81c0>
    dac0:	008000c4 	movi	r2,3
    dac4:	e0816d26 	beq	fp,r2,e07c <__muldf3+0x854>
    dac8:	00800044 	movi	r2,1
    dacc:	e081321e 	bne	fp,r2,df98 <__muldf3+0x770>
    dad0:	48a6703a 	and	r19,r9,r2
    dad4:	0009883a 	mov	r4,zero
    dad8:	0021883a 	mov	r16,zero
    dadc:	002f883a 	mov	r23,zero
    dae0:	003fab06 	br	d990 <__alt_data_end+0xfffb8260>
    dae4:	0023883a 	mov	r17,zero
    dae8:	0025883a 	mov	r18,zero
    daec:	01c00044 	movi	r7,1
    daf0:	003f7f06 	br	d8f0 <__alt_data_end+0xfffb81c0>
    daf4:	01c000c4 	movi	r7,3
    daf8:	003f7d06 	br	d8f0 <__alt_data_end+0xfffb81c0>
    dafc:	01400104 	movi	r5,4
    db00:	0021883a 	mov	r16,zero
    db04:	002f883a 	mov	r23,zero
    db08:	07000044 	movi	fp,1
    db0c:	003f6606 	br	d8a8 <__alt_data_end+0xfffb8178>
    db10:	01400304 	movi	r5,12
    db14:	070000c4 	movi	fp,3
    db18:	003f6306 	br	d8a8 <__alt_data_end+0xfffb8178>
    db1c:	04000434 	movhi	r16,16
    db20:	0027883a 	mov	r19,zero
    db24:	843fffc4 	addi	r16,r16,-1
    db28:	05ffffc4 	movi	r23,-1
    db2c:	0101ffc4 	movi	r4,2047
    db30:	003f9706 	br	d990 <__alt_data_end+0xfffb8260>
    db34:	8821883a 	mov	r16,r17
    db38:	902f883a 	mov	r23,r18
    db3c:	5013883a 	mov	r9,r10
    db40:	3839883a 	mov	fp,r7
    db44:	003f8c06 	br	d978 <__alt_data_end+0xfffb8248>
    db48:	8821883a 	mov	r16,r17
    db4c:	902f883a 	mov	r23,r18
    db50:	3013883a 	mov	r9,r6
    db54:	3839883a 	mov	fp,r7
    db58:	003f8706 	br	d978 <__alt_data_end+0xfffb8248>
    db5c:	b82ad43a 	srli	r21,r23,16
    db60:	9038d43a 	srli	fp,r18,16
    db64:	bdffffcc 	andi	r23,r23,65535
    db68:	94bfffcc 	andi	r18,r18,65535
    db6c:	9009883a 	mov	r4,r18
    db70:	b80b883a 	mov	r5,r23
    db74:	d8c00515 	stw	r3,20(sp)
    db78:	d9800715 	stw	r6,28(sp)
    db7c:	da000615 	stw	r8,24(sp)
    db80:	000c3a00 	call	c3a0 <__mulsi3>
    db84:	9009883a 	mov	r4,r18
    db88:	a80b883a 	mov	r5,r21
    db8c:	1029883a 	mov	r20,r2
    db90:	000c3a00 	call	c3a0 <__mulsi3>
    db94:	e009883a 	mov	r4,fp
    db98:	a80b883a 	mov	r5,r21
    db9c:	102d883a 	mov	r22,r2
    dba0:	000c3a00 	call	c3a0 <__mulsi3>
    dba4:	e009883a 	mov	r4,fp
    dba8:	b80b883a 	mov	r5,r23
    dbac:	1027883a 	mov	r19,r2
    dbb0:	000c3a00 	call	c3a0 <__mulsi3>
    dbb4:	a008d43a 	srli	r4,r20,16
    dbb8:	b085883a 	add	r2,r22,r2
    dbbc:	d8c00517 	ldw	r3,20(sp)
    dbc0:	110f883a 	add	r7,r2,r4
    dbc4:	d9800717 	ldw	r6,28(sp)
    dbc8:	da000617 	ldw	r8,24(sp)
    dbcc:	3d80022e 	bgeu	r7,r22,dbd8 <__muldf3+0x3b0>
    dbd0:	00800074 	movhi	r2,1
    dbd4:	98a7883a 	add	r19,r19,r2
    dbd8:	3804943a 	slli	r2,r7,16
    dbdc:	380ed43a 	srli	r7,r7,16
    dbe0:	882cd43a 	srli	r22,r17,16
    dbe4:	a53fffcc 	andi	r20,r20,65535
    dbe8:	8c7fffcc 	andi	r17,r17,65535
    dbec:	1529883a 	add	r20,r2,r20
    dbf0:	8809883a 	mov	r4,r17
    dbf4:	b80b883a 	mov	r5,r23
    dbf8:	d8c00515 	stw	r3,20(sp)
    dbfc:	d9800715 	stw	r6,28(sp)
    dc00:	da000615 	stw	r8,24(sp)
    dc04:	d9c00015 	stw	r7,0(sp)
    dc08:	dd000115 	stw	r20,4(sp)
    dc0c:	000c3a00 	call	c3a0 <__mulsi3>
    dc10:	a80b883a 	mov	r5,r21
    dc14:	8809883a 	mov	r4,r17
    dc18:	d8800415 	stw	r2,16(sp)
    dc1c:	000c3a00 	call	c3a0 <__mulsi3>
    dc20:	a80b883a 	mov	r5,r21
    dc24:	b009883a 	mov	r4,r22
    dc28:	1029883a 	mov	r20,r2
    dc2c:	000c3a00 	call	c3a0 <__mulsi3>
    dc30:	b009883a 	mov	r4,r22
    dc34:	b80b883a 	mov	r5,r23
    dc38:	102b883a 	mov	r21,r2
    dc3c:	000c3a00 	call	c3a0 <__mulsi3>
    dc40:	da400417 	ldw	r9,16(sp)
    dc44:	a085883a 	add	r2,r20,r2
    dc48:	d8c00517 	ldw	r3,20(sp)
    dc4c:	4808d43a 	srli	r4,r9,16
    dc50:	d9800717 	ldw	r6,28(sp)
    dc54:	da000617 	ldw	r8,24(sp)
    dc58:	1109883a 	add	r4,r2,r4
    dc5c:	2500022e 	bgeu	r4,r20,dc68 <__muldf3+0x440>
    dc60:	00800074 	movhi	r2,1
    dc64:	a8ab883a 	add	r21,r21,r2
    dc68:	200e943a 	slli	r7,r4,16
    dc6c:	2004d43a 	srli	r2,r4,16
    dc70:	802ed43a 	srli	r23,r16,16
    dc74:	843fffcc 	andi	r16,r16,65535
    dc78:	4d3fffcc 	andi	r20,r9,65535
    dc7c:	9009883a 	mov	r4,r18
    dc80:	800b883a 	mov	r5,r16
    dc84:	3d29883a 	add	r20,r7,r20
    dc88:	d8c00515 	stw	r3,20(sp)
    dc8c:	d9800715 	stw	r6,28(sp)
    dc90:	da000615 	stw	r8,24(sp)
    dc94:	a8ab883a 	add	r21,r21,r2
    dc98:	000c3a00 	call	c3a0 <__mulsi3>
    dc9c:	9009883a 	mov	r4,r18
    dca0:	b80b883a 	mov	r5,r23
    dca4:	d8800315 	stw	r2,12(sp)
    dca8:	000c3a00 	call	c3a0 <__mulsi3>
    dcac:	e009883a 	mov	r4,fp
    dcb0:	b80b883a 	mov	r5,r23
    dcb4:	1025883a 	mov	r18,r2
    dcb8:	000c3a00 	call	c3a0 <__mulsi3>
    dcbc:	e009883a 	mov	r4,fp
    dcc0:	800b883a 	mov	r5,r16
    dcc4:	d8800215 	stw	r2,8(sp)
    dcc8:	000c3a00 	call	c3a0 <__mulsi3>
    dccc:	da800317 	ldw	r10,12(sp)
    dcd0:	d9400017 	ldw	r5,0(sp)
    dcd4:	9085883a 	add	r2,r18,r2
    dcd8:	5008d43a 	srli	r4,r10,16
    dcdc:	a153883a 	add	r9,r20,r5
    dce0:	d8c00517 	ldw	r3,20(sp)
    dce4:	1109883a 	add	r4,r2,r4
    dce8:	d9800717 	ldw	r6,28(sp)
    dcec:	da000617 	ldw	r8,24(sp)
    dcf0:	dac00217 	ldw	r11,8(sp)
    dcf4:	2480022e 	bgeu	r4,r18,dd00 <__muldf3+0x4d8>
    dcf8:	00800074 	movhi	r2,1
    dcfc:	5897883a 	add	r11,r11,r2
    dd00:	200e943a 	slli	r7,r4,16
    dd04:	2038d43a 	srli	fp,r4,16
    dd08:	52bfffcc 	andi	r10,r10,65535
    dd0c:	3a8f883a 	add	r7,r7,r10
    dd10:	8809883a 	mov	r4,r17
    dd14:	800b883a 	mov	r5,r16
    dd18:	d8c00515 	stw	r3,20(sp)
    dd1c:	d9800715 	stw	r6,28(sp)
    dd20:	d9c00215 	stw	r7,8(sp)
    dd24:	da000615 	stw	r8,24(sp)
    dd28:	da400415 	stw	r9,16(sp)
    dd2c:	5f39883a 	add	fp,r11,fp
    dd30:	000c3a00 	call	c3a0 <__mulsi3>
    dd34:	8809883a 	mov	r4,r17
    dd38:	b80b883a 	mov	r5,r23
    dd3c:	1025883a 	mov	r18,r2
    dd40:	000c3a00 	call	c3a0 <__mulsi3>
    dd44:	b009883a 	mov	r4,r22
    dd48:	b80b883a 	mov	r5,r23
    dd4c:	d8800315 	stw	r2,12(sp)
    dd50:	000c3a00 	call	c3a0 <__mulsi3>
    dd54:	b009883a 	mov	r4,r22
    dd58:	800b883a 	mov	r5,r16
    dd5c:	1023883a 	mov	r17,r2
    dd60:	000c3a00 	call	c3a0 <__mulsi3>
    dd64:	da800317 	ldw	r10,12(sp)
    dd68:	9008d43a 	srli	r4,r18,16
    dd6c:	d8c00517 	ldw	r3,20(sp)
    dd70:	5085883a 	add	r2,r10,r2
    dd74:	1109883a 	add	r4,r2,r4
    dd78:	d9800717 	ldw	r6,28(sp)
    dd7c:	d9c00217 	ldw	r7,8(sp)
    dd80:	da000617 	ldw	r8,24(sp)
    dd84:	da400417 	ldw	r9,16(sp)
    dd88:	2280022e 	bgeu	r4,r10,dd94 <__muldf3+0x56c>
    dd8c:	00800074 	movhi	r2,1
    dd90:	88a3883a 	add	r17,r17,r2
    dd94:	2004943a 	slli	r2,r4,16
    dd98:	94bfffcc 	andi	r18,r18,65535
    dd9c:	4ce7883a 	add	r19,r9,r19
    dda0:	14a5883a 	add	r18,r2,r18
    dda4:	9d29803a 	cmpltu	r20,r19,r20
    dda8:	9565883a 	add	r18,r18,r21
    ddac:	9505883a 	add	r2,r18,r20
    ddb0:	99e7883a 	add	r19,r19,r7
    ddb4:	99cf803a 	cmpltu	r7,r19,r7
    ddb8:	e08b883a 	add	r5,fp,r2
    ddbc:	2008d43a 	srli	r4,r4,16
    ddc0:	29ef883a 	add	r23,r5,r7
    ddc4:	1529803a 	cmpltu	r20,r2,r20
    ddc8:	956b803a 	cmpltu	r21,r18,r21
    ddcc:	b9cf803a 	cmpltu	r7,r23,r7
    ddd0:	a564b03a 	or	r18,r20,r21
    ddd4:	2f39803a 	cmpltu	fp,r5,fp
    ddd8:	9125883a 	add	r18,r18,r4
    dddc:	3f38b03a 	or	fp,r7,fp
    dde0:	9725883a 	add	r18,r18,fp
    dde4:	9804927a 	slli	r2,r19,9
    dde8:	9463883a 	add	r17,r18,r17
    ddec:	d9000117 	ldw	r4,4(sp)
    ddf0:	b820d5fa 	srli	r16,r23,23
    ddf4:	8822927a 	slli	r17,r17,9
    ddf8:	9826d5fa 	srli	r19,r19,23
    ddfc:	1104b03a 	or	r2,r2,r4
    de00:	b82e927a 	slli	r23,r23,9
    de04:	1004c03a 	cmpne	r2,r2,zero
    de08:	8c20b03a 	or	r16,r17,r16
    de0c:	14e6b03a 	or	r19,r2,r19
    de10:	8080402c 	andhi	r2,r16,256
    de14:	9deeb03a 	or	r23,r19,r23
    de18:	10000726 	beq	r2,zero,de38 <__muldf3+0x610>
    de1c:	b804d07a 	srli	r2,r23,1
    de20:	800697fa 	slli	r3,r16,31
    de24:	bdc0004c 	andi	r23,r23,1
    de28:	8020d07a 	srli	r16,r16,1
    de2c:	b8aeb03a 	or	r23,r23,r2
    de30:	b8eeb03a 	or	r23,r23,r3
    de34:	4007883a 	mov	r3,r8
    de38:	1900ffc4 	addi	r4,r3,1023
    de3c:	01004d0e 	bge	zero,r4,df74 <__muldf3+0x74c>
    de40:	b88001cc 	andi	r2,r23,7
    de44:	10000726 	beq	r2,zero,de64 <__muldf3+0x63c>
    de48:	b94003cc 	andi	r5,r23,15
    de4c:	00800104 	movi	r2,4
    de50:	28800426 	beq	r5,r2,de64 <__muldf3+0x63c>
    de54:	b885883a 	add	r2,r23,r2
    de58:	15ef803a 	cmpltu	r23,r2,r23
    de5c:	85e1883a 	add	r16,r16,r23
    de60:	102f883a 	mov	r23,r2
    de64:	8080402c 	andhi	r2,r16,256
    de68:	10000426 	beq	r2,zero,de7c <__muldf3+0x654>
    de6c:	00bfc034 	movhi	r2,65280
    de70:	10bfffc4 	addi	r2,r2,-1
    de74:	19010004 	addi	r4,r3,1024
    de78:	80a0703a 	and	r16,r16,r2
    de7c:	0081ff84 	movi	r2,2046
    de80:	1100340e 	bge	r2,r4,df54 <__muldf3+0x72c>
    de84:	34c0004c 	andi	r19,r6,1
    de88:	0101ffc4 	movi	r4,2047
    de8c:	0021883a 	mov	r16,zero
    de90:	002f883a 	mov	r23,zero
    de94:	003ebe06 	br	d990 <__alt_data_end+0xfffb8260>
    de98:	8080022c 	andhi	r2,r16,8
    de9c:	10000926 	beq	r2,zero,dec4 <__muldf3+0x69c>
    dea0:	8880022c 	andhi	r2,r17,8
    dea4:	1000071e 	bne	r2,zero,dec4 <__muldf3+0x69c>
    dea8:	00800434 	movhi	r2,16
    deac:	8c000234 	orhi	r16,r17,8
    deb0:	10bfffc4 	addi	r2,r2,-1
    deb4:	b027883a 	mov	r19,r22
    deb8:	80a0703a 	and	r16,r16,r2
    debc:	902f883a 	mov	r23,r18
    dec0:	003f1a06 	br	db2c <__alt_data_end+0xfffb83fc>
    dec4:	00800434 	movhi	r2,16
    dec8:	84000234 	orhi	r16,r16,8
    decc:	10bfffc4 	addi	r2,r2,-1
    ded0:	80a0703a 	and	r16,r16,r2
    ded4:	003f1506 	br	db2c <__alt_data_end+0xfffb83fc>
    ded8:	3009883a 	mov	r4,r6
    dedc:	d9400215 	stw	r5,8(sp)
    dee0:	d9800715 	stw	r6,28(sp)
    dee4:	da400415 	stw	r9,16(sp)
    dee8:	da800315 	stw	r10,12(sp)
    deec:	000eb600 	call	eb60 <__clzsi2>
    def0:	10c00804 	addi	r3,r2,32
    def4:	010009c4 	movi	r4,39
    def8:	d9400217 	ldw	r5,8(sp)
    defc:	d9800717 	ldw	r6,28(sp)
    df00:	da400417 	ldw	r9,16(sp)
    df04:	da800317 	ldw	r10,12(sp)
    df08:	20fee20e 	bge	r4,r3,da94 <__alt_data_end+0xfffb8364>
    df0c:	147ffe04 	addi	r17,r2,-8
    df10:	9462983a 	sll	r17,r18,r17
    df14:	0025883a 	mov	r18,zero
    df18:	003ee506 	br	dab0 <__alt_data_end+0xfffb8380>
    df1c:	d9800715 	stw	r6,28(sp)
    df20:	d9c00215 	stw	r7,8(sp)
    df24:	da400415 	stw	r9,16(sp)
    df28:	000eb600 	call	eb60 <__clzsi2>
    df2c:	10c00804 	addi	r3,r2,32
    df30:	010009c4 	movi	r4,39
    df34:	d9800717 	ldw	r6,28(sp)
    df38:	d9c00217 	ldw	r7,8(sp)
    df3c:	da400417 	ldw	r9,16(sp)
    df40:	20feb40e 	bge	r4,r3,da14 <__alt_data_end+0xfffb82e4>
    df44:	143ffe04 	addi	r16,r2,-8
    df48:	9420983a 	sll	r16,r18,r16
    df4c:	002f883a 	mov	r23,zero
    df50:	003eb706 	br	da30 <__alt_data_end+0xfffb8300>
    df54:	8004977a 	slli	r2,r16,29
    df58:	b82ed0fa 	srli	r23,r23,3
    df5c:	8020927a 	slli	r16,r16,9
    df60:	2101ffcc 	andi	r4,r4,2047
    df64:	15eeb03a 	or	r23,r2,r23
    df68:	8020d33a 	srli	r16,r16,12
    df6c:	34c0004c 	andi	r19,r6,1
    df70:	003e8706 	br	d990 <__alt_data_end+0xfffb8260>
    df74:	00bf0084 	movi	r2,-1022
    df78:	10c5c83a 	sub	r2,r2,r3
    df7c:	01000e04 	movi	r4,56
    df80:	2080080e 	bge	r4,r2,dfa4 <__muldf3+0x77c>
    df84:	34c0004c 	andi	r19,r6,1
    df88:	0009883a 	mov	r4,zero
    df8c:	0021883a 	mov	r16,zero
    df90:	002f883a 	mov	r23,zero
    df94:	003e7e06 	br	d990 <__alt_data_end+0xfffb8260>
    df98:	4007883a 	mov	r3,r8
    df9c:	480d883a 	mov	r6,r9
    dfa0:	003fa506 	br	de38 <__alt_data_end+0xfffb8708>
    dfa4:	010007c4 	movi	r4,31
    dfa8:	20801816 	blt	r4,r2,e00c <__muldf3+0x7e4>
    dfac:	18c10784 	addi	r3,r3,1054
    dfb0:	80c8983a 	sll	r4,r16,r3
    dfb4:	b88ad83a 	srl	r5,r23,r2
    dfb8:	b8c6983a 	sll	r3,r23,r3
    dfbc:	80a0d83a 	srl	r16,r16,r2
    dfc0:	2908b03a 	or	r4,r5,r4
    dfc4:	1804c03a 	cmpne	r2,r3,zero
    dfc8:	2088b03a 	or	r4,r4,r2
    dfcc:	208001cc 	andi	r2,r4,7
    dfd0:	10000726 	beq	r2,zero,dff0 <__muldf3+0x7c8>
    dfd4:	20c003cc 	andi	r3,r4,15
    dfd8:	00800104 	movi	r2,4
    dfdc:	18800426 	beq	r3,r2,dff0 <__muldf3+0x7c8>
    dfe0:	20c00104 	addi	r3,r4,4
    dfe4:	1905803a 	cmpltu	r2,r3,r4
    dfe8:	80a1883a 	add	r16,r16,r2
    dfec:	1809883a 	mov	r4,r3
    dff0:	8080202c 	andhi	r2,r16,128
    dff4:	10001b26 	beq	r2,zero,e064 <__muldf3+0x83c>
    dff8:	34c0004c 	andi	r19,r6,1
    dffc:	01000044 	movi	r4,1
    e000:	0021883a 	mov	r16,zero
    e004:	002f883a 	mov	r23,zero
    e008:	003e6106 	br	d990 <__alt_data_end+0xfffb8260>
    e00c:	013ef884 	movi	r4,-1054
    e010:	20c9c83a 	sub	r4,r4,r3
    e014:	01400804 	movi	r5,32
    e018:	8108d83a 	srl	r4,r16,r4
    e01c:	11401526 	beq	r2,r5,e074 <__muldf3+0x84c>
    e020:	18c10f84 	addi	r3,r3,1086
    e024:	80e0983a 	sll	r16,r16,r3
    e028:	85eeb03a 	or	r23,r16,r23
    e02c:	b804c03a 	cmpne	r2,r23,zero
    e030:	1108b03a 	or	r4,r2,r4
    e034:	20c001cc 	andi	r3,r4,7
    e038:	1800061e 	bne	r3,zero,e054 <__muldf3+0x82c>
    e03c:	0021883a 	mov	r16,zero
    e040:	202ed0fa 	srli	r23,r4,3
    e044:	34c0004c 	andi	r19,r6,1
    e048:	0009883a 	mov	r4,zero
    e04c:	b8eeb03a 	or	r23,r23,r3
    e050:	003e4f06 	br	d990 <__alt_data_end+0xfffb8260>
    e054:	20c003cc 	andi	r3,r4,15
    e058:	00800104 	movi	r2,4
    e05c:	0021883a 	mov	r16,zero
    e060:	18bfdf1e 	bne	r3,r2,dfe0 <__alt_data_end+0xfffb88b0>
    e064:	8004927a 	slli	r2,r16,9
    e068:	8006977a 	slli	r3,r16,29
    e06c:	1020d33a 	srli	r16,r2,12
    e070:	003ff306 	br	e040 <__alt_data_end+0xfffb8910>
    e074:	0021883a 	mov	r16,zero
    e078:	003feb06 	br	e028 <__alt_data_end+0xfffb88f8>
    e07c:	00800434 	movhi	r2,16
    e080:	84000234 	orhi	r16,r16,8
    e084:	10bfffc4 	addi	r2,r2,-1
    e088:	4cc0004c 	andi	r19,r9,1
    e08c:	80a0703a 	and	r16,r16,r2
    e090:	003ea606 	br	db2c <__alt_data_end+0xfffb83fc>

0000e094 <__subdf3>:
    e094:	00c00434 	movhi	r3,16
    e098:	18ffffc4 	addi	r3,r3,-1
    e09c:	defffb04 	addi	sp,sp,-20
    e0a0:	28d2703a 	and	r9,r5,r3
    e0a4:	3814d53a 	srli	r10,r7,20
    e0a8:	38c6703a 	and	r3,r7,r3
    e0ac:	3004d77a 	srli	r2,r6,29
    e0b0:	dc800215 	stw	r18,8(sp)
    e0b4:	dc000015 	stw	r16,0(sp)
    e0b8:	2824d7fa 	srli	r18,r5,31
    e0bc:	2820d53a 	srli	r16,r5,20
    e0c0:	481290fa 	slli	r9,r9,3
    e0c4:	200ad77a 	srli	r5,r4,29
    e0c8:	180690fa 	slli	r3,r3,3
    e0cc:	dc400115 	stw	r17,4(sp)
    e0d0:	dfc00415 	stw	ra,16(sp)
    e0d4:	202290fa 	slli	r17,r4,3
    e0d8:	dcc00315 	stw	r19,12(sp)
    e0dc:	5281ffcc 	andi	r10,r10,2047
    e0e0:	0101ffc4 	movi	r4,2047
    e0e4:	9011883a 	mov	r8,r18
    e0e8:	8401ffcc 	andi	r16,r16,2047
    e0ec:	94803fcc 	andi	r18,r18,255
    e0f0:	494ab03a 	or	r5,r9,r5
    e0f4:	380ed7fa 	srli	r7,r7,31
    e0f8:	1886b03a 	or	r3,r3,r2
    e0fc:	300c90fa 	slli	r6,r6,3
    e100:	51009026 	beq	r10,r4,e344 <__subdf3+0x2b0>
    e104:	39c0005c 	xori	r7,r7,1
    e108:	8285c83a 	sub	r2,r16,r10
    e10c:	91c06f26 	beq	r18,r7,e2cc <__subdf3+0x238>
    e110:	0080b10e 	bge	zero,r2,e3d8 <__subdf3+0x344>
    e114:	50002a1e 	bne	r10,zero,e1c0 <__subdf3+0x12c>
    e118:	1988b03a 	or	r4,r3,r6
    e11c:	2000941e 	bne	r4,zero,e370 <__subdf3+0x2dc>
    e120:	888001cc 	andi	r2,r17,7
    e124:	10005b26 	beq	r2,zero,e294 <__subdf3+0x200>
    e128:	88c003cc 	andi	r3,r17,15
    e12c:	00800104 	movi	r2,4
    e130:	18805826 	beq	r3,r2,e294 <__subdf3+0x200>
    e134:	88c00104 	addi	r3,r17,4
    e138:	1c63803a 	cmpltu	r17,r3,r17
    e13c:	2c4b883a 	add	r5,r5,r17
    e140:	2880202c 	andhi	r2,r5,128
    e144:	9200004c 	andi	r8,r18,1
    e148:	1823883a 	mov	r17,r3
    e14c:	10005426 	beq	r2,zero,e2a0 <__subdf3+0x20c>
    e150:	84000044 	addi	r16,r16,1
    e154:	0081ffc4 	movi	r2,2047
    e158:	8080bf26 	beq	r16,r2,e458 <__subdf3+0x3c4>
    e15c:	013fe034 	movhi	r4,65408
    e160:	213fffc4 	addi	r4,r4,-1
    e164:	290a703a 	and	r5,r5,r4
    e168:	2804977a 	slli	r2,r5,29
    e16c:	280a927a 	slli	r5,r5,9
    e170:	8822d0fa 	srli	r17,r17,3
    e174:	8401ffcc 	andi	r16,r16,2047
    e178:	2808d33a 	srli	r4,r5,12
    e17c:	1444b03a 	or	r2,r2,r17
    e180:	8401ffcc 	andi	r16,r16,2047
    e184:	800a953a 	slli	r5,r16,20
    e188:	40c03fcc 	andi	r3,r8,255
    e18c:	04000434 	movhi	r16,16
    e190:	180697fa 	slli	r3,r3,31
    e194:	843fffc4 	addi	r16,r16,-1
    e198:	2420703a 	and	r16,r4,r16
    e19c:	8160b03a 	or	r16,r16,r5
    e1a0:	80c6b03a 	or	r3,r16,r3
    e1a4:	dfc00417 	ldw	ra,16(sp)
    e1a8:	dcc00317 	ldw	r19,12(sp)
    e1ac:	dc800217 	ldw	r18,8(sp)
    e1b0:	dc400117 	ldw	r17,4(sp)
    e1b4:	dc000017 	ldw	r16,0(sp)
    e1b8:	dec00504 	addi	sp,sp,20
    e1bc:	f800283a 	ret
    e1c0:	0101ffc4 	movi	r4,2047
    e1c4:	813fd626 	beq	r16,r4,e120 <__alt_data_end+0xfffb89f0>
    e1c8:	18c02034 	orhi	r3,r3,128
    e1cc:	01000e04 	movi	r4,56
    e1d0:	2080a416 	blt	r4,r2,e464 <__subdf3+0x3d0>
    e1d4:	010007c4 	movi	r4,31
    e1d8:	2080c716 	blt	r4,r2,e4f8 <__subdf3+0x464>
    e1dc:	01000804 	movi	r4,32
    e1e0:	2089c83a 	sub	r4,r4,r2
    e1e4:	1910983a 	sll	r8,r3,r4
    e1e8:	308ed83a 	srl	r7,r6,r2
    e1ec:	3108983a 	sll	r4,r6,r4
    e1f0:	1884d83a 	srl	r2,r3,r2
    e1f4:	41ccb03a 	or	r6,r8,r7
    e1f8:	2008c03a 	cmpne	r4,r4,zero
    e1fc:	310cb03a 	or	r6,r6,r4
    e200:	898dc83a 	sub	r6,r17,r6
    e204:	89a3803a 	cmpltu	r17,r17,r6
    e208:	288bc83a 	sub	r5,r5,r2
    e20c:	2c4bc83a 	sub	r5,r5,r17
    e210:	3023883a 	mov	r17,r6
    e214:	2880202c 	andhi	r2,r5,128
    e218:	10006b26 	beq	r2,zero,e3c8 <__subdf3+0x334>
    e21c:	04c02034 	movhi	r19,128
    e220:	9cffffc4 	addi	r19,r19,-1
    e224:	2ce6703a 	and	r19,r5,r19
    e228:	98007c26 	beq	r19,zero,e41c <__subdf3+0x388>
    e22c:	9809883a 	mov	r4,r19
    e230:	000eb600 	call	eb60 <__clzsi2>
    e234:	10fffe04 	addi	r3,r2,-8
    e238:	010007c4 	movi	r4,31
    e23c:	20c07d16 	blt	r4,r3,e434 <__subdf3+0x3a0>
    e240:	01400a04 	movi	r5,40
    e244:	2885c83a 	sub	r2,r5,r2
    e248:	888ad83a 	srl	r5,r17,r2
    e24c:	98e6983a 	sll	r19,r19,r3
    e250:	88e2983a 	sll	r17,r17,r3
    e254:	2ce6b03a 	or	r19,r5,r19
    e258:	1c007a16 	blt	r3,r16,e444 <__subdf3+0x3b0>
    e25c:	1c21c83a 	sub	r16,r3,r16
    e260:	81400044 	addi	r5,r16,1
    e264:	00c007c4 	movi	r3,31
    e268:	19409616 	blt	r3,r5,e4c4 <__subdf3+0x430>
    e26c:	1c21c83a 	sub	r16,r3,r16
    e270:	8c08983a 	sll	r4,r17,r16
    e274:	8946d83a 	srl	r3,r17,r5
    e278:	9c20983a 	sll	r16,r19,r16
    e27c:	2008c03a 	cmpne	r4,r4,zero
    e280:	994ad83a 	srl	r5,r19,r5
    e284:	1c06b03a 	or	r3,r3,r16
    e288:	1922b03a 	or	r17,r3,r4
    e28c:	0021883a 	mov	r16,zero
    e290:	003fa306 	br	e120 <__alt_data_end+0xfffb89f0>
    e294:	2880202c 	andhi	r2,r5,128
    e298:	9200004c 	andi	r8,r18,1
    e29c:	103fac1e 	bne	r2,zero,e150 <__alt_data_end+0xfffb8a20>
    e2a0:	2804977a 	slli	r2,r5,29
    e2a4:	8822d0fa 	srli	r17,r17,3
    e2a8:	00c1ffc4 	movi	r3,2047
    e2ac:	280ad0fa 	srli	r5,r5,3
    e2b0:	1444b03a 	or	r2,r2,r17
    e2b4:	80c02726 	beq	r16,r3,e354 <__subdf3+0x2c0>
    e2b8:	01000434 	movhi	r4,16
    e2bc:	213fffc4 	addi	r4,r4,-1
    e2c0:	80e0703a 	and	r16,r16,r3
    e2c4:	2908703a 	and	r4,r5,r4
    e2c8:	003fad06 	br	e180 <__alt_data_end+0xfffb8a50>
    e2cc:	0080690e 	bge	zero,r2,e474 <__subdf3+0x3e0>
    e2d0:	50002f26 	beq	r10,zero,e390 <__subdf3+0x2fc>
    e2d4:	0101ffc4 	movi	r4,2047
    e2d8:	813f9126 	beq	r16,r4,e120 <__alt_data_end+0xfffb89f0>
    e2dc:	18c02034 	orhi	r3,r3,128
    e2e0:	01000e04 	movi	r4,56
    e2e4:	2080b00e 	bge	r4,r2,e5a8 <__subdf3+0x514>
    e2e8:	198cb03a 	or	r6,r3,r6
    e2ec:	300ec03a 	cmpne	r7,r6,zero
    e2f0:	0005883a 	mov	r2,zero
    e2f4:	3c4f883a 	add	r7,r7,r17
    e2f8:	3c63803a 	cmpltu	r17,r7,r17
    e2fc:	114b883a 	add	r5,r2,r5
    e300:	2c4b883a 	add	r5,r5,r17
    e304:	3823883a 	mov	r17,r7
    e308:	2880202c 	andhi	r2,r5,128
    e30c:	10002e26 	beq	r2,zero,e3c8 <__subdf3+0x334>
    e310:	84000044 	addi	r16,r16,1
    e314:	0081ffc4 	movi	r2,2047
    e318:	8080de26 	beq	r16,r2,e694 <__subdf3+0x600>
    e31c:	00bfe034 	movhi	r2,65408
    e320:	10bfffc4 	addi	r2,r2,-1
    e324:	288a703a 	and	r5,r5,r2
    e328:	880cd07a 	srli	r6,r17,1
    e32c:	280897fa 	slli	r4,r5,31
    e330:	88c0004c 	andi	r3,r17,1
    e334:	30e2b03a 	or	r17,r6,r3
    e338:	280ad07a 	srli	r5,r5,1
    e33c:	8922b03a 	or	r17,r17,r4
    e340:	003f7706 	br	e120 <__alt_data_end+0xfffb89f0>
    e344:	1984b03a 	or	r2,r3,r6
    e348:	103f6e26 	beq	r2,zero,e104 <__alt_data_end+0xfffb89d4>
    e34c:	39c03fcc 	andi	r7,r7,255
    e350:	003f6d06 	br	e108 <__alt_data_end+0xfffb89d8>
    e354:	1146b03a 	or	r3,r2,r5
    e358:	18003f26 	beq	r3,zero,e458 <__subdf3+0x3c4>
    e35c:	00c00434 	movhi	r3,16
    e360:	29000234 	orhi	r4,r5,8
    e364:	18ffffc4 	addi	r3,r3,-1
    e368:	20c8703a 	and	r4,r4,r3
    e36c:	003f8406 	br	e180 <__alt_data_end+0xfffb8a50>
    e370:	10bfffc4 	addi	r2,r2,-1
    e374:	1000501e 	bne	r2,zero,e4b8 <__subdf3+0x424>
    e378:	898fc83a 	sub	r7,r17,r6
    e37c:	89e3803a 	cmpltu	r17,r17,r7
    e380:	28cbc83a 	sub	r5,r5,r3
    e384:	2c4bc83a 	sub	r5,r5,r17
    e388:	3823883a 	mov	r17,r7
    e38c:	003fa106 	br	e214 <__alt_data_end+0xfffb8ae4>
    e390:	1988b03a 	or	r4,r3,r6
    e394:	203f6226 	beq	r4,zero,e120 <__alt_data_end+0xfffb89f0>
    e398:	10bfffc4 	addi	r2,r2,-1
    e39c:	10009b1e 	bne	r2,zero,e60c <__subdf3+0x578>
    e3a0:	344d883a 	add	r6,r6,r17
    e3a4:	3463803a 	cmpltu	r17,r6,r17
    e3a8:	194b883a 	add	r5,r3,r5
    e3ac:	2c4b883a 	add	r5,r5,r17
    e3b0:	3023883a 	mov	r17,r6
    e3b4:	003fd406 	br	e308 <__alt_data_end+0xfffb8bd8>
    e3b8:	1106b03a 	or	r3,r2,r4
    e3bc:	1800b426 	beq	r3,zero,e690 <__subdf3+0x5fc>
    e3c0:	100b883a 	mov	r5,r2
    e3c4:	2023883a 	mov	r17,r4
    e3c8:	888001cc 	andi	r2,r17,7
    e3cc:	103f561e 	bne	r2,zero,e128 <__alt_data_end+0xfffb89f8>
    e3d0:	9200004c 	andi	r8,r18,1
    e3d4:	003fb206 	br	e2a0 <__alt_data_end+0xfffb8b70>
    e3d8:	1000531e 	bne	r2,zero,e528 <__subdf3+0x494>
    e3dc:	80800044 	addi	r2,r16,1
    e3e0:	1081ffcc 	andi	r2,r2,2047
    e3e4:	01000044 	movi	r4,1
    e3e8:	2080a00e 	bge	r4,r2,e66c <__subdf3+0x5d8>
    e3ec:	8985c83a 	sub	r2,r17,r6
    e3f0:	8889803a 	cmpltu	r4,r17,r2
    e3f4:	28e7c83a 	sub	r19,r5,r3
    e3f8:	9927c83a 	sub	r19,r19,r4
    e3fc:	9900202c 	andhi	r4,r19,128
    e400:	20006226 	beq	r4,zero,e58c <__subdf3+0x4f8>
    e404:	3463c83a 	sub	r17,r6,r17
    e408:	194bc83a 	sub	r5,r3,r5
    e40c:	344d803a 	cmpltu	r6,r6,r17
    e410:	29a7c83a 	sub	r19,r5,r6
    e414:	3825883a 	mov	r18,r7
    e418:	983f841e 	bne	r19,zero,e22c <__alt_data_end+0xfffb8afc>
    e41c:	8809883a 	mov	r4,r17
    e420:	000eb600 	call	eb60 <__clzsi2>
    e424:	10800804 	addi	r2,r2,32
    e428:	10fffe04 	addi	r3,r2,-8
    e42c:	010007c4 	movi	r4,31
    e430:	20ff830e 	bge	r4,r3,e240 <__alt_data_end+0xfffb8b10>
    e434:	14fff604 	addi	r19,r2,-40
    e438:	8ce6983a 	sll	r19,r17,r19
    e43c:	0023883a 	mov	r17,zero
    e440:	1c3f860e 	bge	r3,r16,e25c <__alt_data_end+0xfffb8b2c>
    e444:	017fe034 	movhi	r5,65408
    e448:	297fffc4 	addi	r5,r5,-1
    e44c:	80e1c83a 	sub	r16,r16,r3
    e450:	994a703a 	and	r5,r19,r5
    e454:	003f3206 	br	e120 <__alt_data_end+0xfffb89f0>
    e458:	0009883a 	mov	r4,zero
    e45c:	0005883a 	mov	r2,zero
    e460:	003f4706 	br	e180 <__alt_data_end+0xfffb8a50>
    e464:	198cb03a 	or	r6,r3,r6
    e468:	300cc03a 	cmpne	r6,r6,zero
    e46c:	0005883a 	mov	r2,zero
    e470:	003f6306 	br	e200 <__alt_data_end+0xfffb8ad0>
    e474:	10009d1e 	bne	r2,zero,e6ec <__subdf3+0x658>
    e478:	81c00044 	addi	r7,r16,1
    e47c:	3881ffcc 	andi	r2,r7,2047
    e480:	02400044 	movi	r9,1
    e484:	4880680e 	bge	r9,r2,e628 <__subdf3+0x594>
    e488:	0081ffc4 	movi	r2,2047
    e48c:	3880ae26 	beq	r7,r2,e748 <__subdf3+0x6b4>
    e490:	344d883a 	add	r6,r6,r17
    e494:	3463803a 	cmpltu	r17,r6,r17
    e498:	194b883a 	add	r5,r3,r5
    e49c:	2c4b883a 	add	r5,r5,r17
    e4a0:	282297fa 	slli	r17,r5,31
    e4a4:	300cd07a 	srli	r6,r6,1
    e4a8:	280ad07a 	srli	r5,r5,1
    e4ac:	3821883a 	mov	r16,r7
    e4b0:	89a2b03a 	or	r17,r17,r6
    e4b4:	003f1a06 	br	e120 <__alt_data_end+0xfffb89f0>
    e4b8:	0101ffc4 	movi	r4,2047
    e4bc:	813f431e 	bne	r16,r4,e1cc <__alt_data_end+0xfffb8a9c>
    e4c0:	003f1706 	br	e120 <__alt_data_end+0xfffb89f0>
    e4c4:	80bff844 	addi	r2,r16,-31
    e4c8:	00c00804 	movi	r3,32
    e4cc:	9884d83a 	srl	r2,r19,r2
    e4d0:	28c05126 	beq	r5,r3,e618 <__subdf3+0x584>
    e4d4:	00c00fc4 	movi	r3,63
    e4d8:	1c21c83a 	sub	r16,r3,r16
    e4dc:	9c26983a 	sll	r19,r19,r16
    e4e0:	9c62b03a 	or	r17,r19,r17
    e4e4:	8822c03a 	cmpne	r17,r17,zero
    e4e8:	88a2b03a 	or	r17,r17,r2
    e4ec:	000b883a 	mov	r5,zero
    e4f0:	0021883a 	mov	r16,zero
    e4f4:	003fb406 	br	e3c8 <__alt_data_end+0xfffb8c98>
    e4f8:	113ff804 	addi	r4,r2,-32
    e4fc:	01c00804 	movi	r7,32
    e500:	1908d83a 	srl	r4,r3,r4
    e504:	11c04626 	beq	r2,r7,e620 <__subdf3+0x58c>
    e508:	01c01004 	movi	r7,64
    e50c:	3885c83a 	sub	r2,r7,r2
    e510:	1884983a 	sll	r2,r3,r2
    e514:	118cb03a 	or	r6,r2,r6
    e518:	300cc03a 	cmpne	r6,r6,zero
    e51c:	310cb03a 	or	r6,r6,r4
    e520:	0005883a 	mov	r2,zero
    e524:	003f3606 	br	e200 <__alt_data_end+0xfffb8ad0>
    e528:	80002b26 	beq	r16,zero,e5d8 <__subdf3+0x544>
    e52c:	0101ffc4 	movi	r4,2047
    e530:	51006926 	beq	r10,r4,e6d8 <__subdf3+0x644>
    e534:	0085c83a 	sub	r2,zero,r2
    e538:	29402034 	orhi	r5,r5,128
    e53c:	01000e04 	movi	r4,56
    e540:	20807d16 	blt	r4,r2,e738 <__subdf3+0x6a4>
    e544:	010007c4 	movi	r4,31
    e548:	2080d916 	blt	r4,r2,e8b0 <__subdf3+0x81c>
    e54c:	01000804 	movi	r4,32
    e550:	2089c83a 	sub	r4,r4,r2
    e554:	2912983a 	sll	r9,r5,r4
    e558:	8890d83a 	srl	r8,r17,r2
    e55c:	8908983a 	sll	r4,r17,r4
    e560:	2884d83a 	srl	r2,r5,r2
    e564:	4a22b03a 	or	r17,r9,r8
    e568:	2008c03a 	cmpne	r4,r4,zero
    e56c:	8922b03a 	or	r17,r17,r4
    e570:	3463c83a 	sub	r17,r6,r17
    e574:	1885c83a 	sub	r2,r3,r2
    e578:	344d803a 	cmpltu	r6,r6,r17
    e57c:	118bc83a 	sub	r5,r2,r6
    e580:	5021883a 	mov	r16,r10
    e584:	3825883a 	mov	r18,r7
    e588:	003f2206 	br	e214 <__alt_data_end+0xfffb8ae4>
    e58c:	9886b03a 	or	r3,r19,r2
    e590:	18001c1e 	bne	r3,zero,e604 <__subdf3+0x570>
    e594:	0011883a 	mov	r8,zero
    e598:	000b883a 	mov	r5,zero
    e59c:	0023883a 	mov	r17,zero
    e5a0:	0021883a 	mov	r16,zero
    e5a4:	003f3e06 	br	e2a0 <__alt_data_end+0xfffb8b70>
    e5a8:	010007c4 	movi	r4,31
    e5ac:	20803c16 	blt	r4,r2,e6a0 <__subdf3+0x60c>
    e5b0:	01000804 	movi	r4,32
    e5b4:	2089c83a 	sub	r4,r4,r2
    e5b8:	1912983a 	sll	r9,r3,r4
    e5bc:	308ed83a 	srl	r7,r6,r2
    e5c0:	3108983a 	sll	r4,r6,r4
    e5c4:	1884d83a 	srl	r2,r3,r2
    e5c8:	49ceb03a 	or	r7,r9,r7
    e5cc:	2008c03a 	cmpne	r4,r4,zero
    e5d0:	390eb03a 	or	r7,r7,r4
    e5d4:	003f4706 	br	e2f4 <__alt_data_end+0xfffb8bc4>
    e5d8:	2c48b03a 	or	r4,r5,r17
    e5dc:	20003e26 	beq	r4,zero,e6d8 <__subdf3+0x644>
    e5e0:	0084303a 	nor	r2,zero,r2
    e5e4:	10003a1e 	bne	r2,zero,e6d0 <__subdf3+0x63c>
    e5e8:	3463c83a 	sub	r17,r6,r17
    e5ec:	194bc83a 	sub	r5,r3,r5
    e5f0:	344d803a 	cmpltu	r6,r6,r17
    e5f4:	298bc83a 	sub	r5,r5,r6
    e5f8:	5021883a 	mov	r16,r10
    e5fc:	3825883a 	mov	r18,r7
    e600:	003f0406 	br	e214 <__alt_data_end+0xfffb8ae4>
    e604:	1023883a 	mov	r17,r2
    e608:	003f0706 	br	e228 <__alt_data_end+0xfffb8af8>
    e60c:	0101ffc4 	movi	r4,2047
    e610:	813f331e 	bne	r16,r4,e2e0 <__alt_data_end+0xfffb8bb0>
    e614:	003ec206 	br	e120 <__alt_data_end+0xfffb89f0>
    e618:	0027883a 	mov	r19,zero
    e61c:	003fb006 	br	e4e0 <__alt_data_end+0xfffb8db0>
    e620:	0005883a 	mov	r2,zero
    e624:	003fbb06 	br	e514 <__alt_data_end+0xfffb8de4>
    e628:	2c44b03a 	or	r2,r5,r17
    e62c:	80008b1e 	bne	r16,zero,e85c <__subdf3+0x7c8>
    e630:	1000b526 	beq	r2,zero,e908 <__subdf3+0x874>
    e634:	1984b03a 	or	r2,r3,r6
    e638:	103eb926 	beq	r2,zero,e120 <__alt_data_end+0xfffb89f0>
    e63c:	3449883a 	add	r4,r6,r17
    e640:	2463803a 	cmpltu	r17,r4,r17
    e644:	194b883a 	add	r5,r3,r5
    e648:	2c4b883a 	add	r5,r5,r17
    e64c:	2880202c 	andhi	r2,r5,128
    e650:	2023883a 	mov	r17,r4
    e654:	103f5c26 	beq	r2,zero,e3c8 <__alt_data_end+0xfffb8c98>
    e658:	00bfe034 	movhi	r2,65408
    e65c:	10bfffc4 	addi	r2,r2,-1
    e660:	4821883a 	mov	r16,r9
    e664:	288a703a 	and	r5,r5,r2
    e668:	003ead06 	br	e120 <__alt_data_end+0xfffb89f0>
    e66c:	2c44b03a 	or	r2,r5,r17
    e670:	8000291e 	bne	r16,zero,e718 <__subdf3+0x684>
    e674:	10004f1e 	bne	r2,zero,e7b4 <__subdf3+0x720>
    e678:	1984b03a 	or	r2,r3,r6
    e67c:	10000426 	beq	r2,zero,e690 <__subdf3+0x5fc>
    e680:	180b883a 	mov	r5,r3
    e684:	3023883a 	mov	r17,r6
    e688:	3825883a 	mov	r18,r7
    e68c:	003ea406 	br	e120 <__alt_data_end+0xfffb89f0>
    e690:	0011883a 	mov	r8,zero
    e694:	000b883a 	mov	r5,zero
    e698:	0023883a 	mov	r17,zero
    e69c:	003f0006 	br	e2a0 <__alt_data_end+0xfffb8b70>
    e6a0:	11fff804 	addi	r7,r2,-32
    e6a4:	19c8d83a 	srl	r4,r3,r7
    e6a8:	01c00804 	movi	r7,32
    e6ac:	11c07e26 	beq	r2,r7,e8a8 <__subdf3+0x814>
    e6b0:	01c01004 	movi	r7,64
    e6b4:	3885c83a 	sub	r2,r7,r2
    e6b8:	1884983a 	sll	r2,r3,r2
    e6bc:	118cb03a 	or	r6,r2,r6
    e6c0:	300ec03a 	cmpne	r7,r6,zero
    e6c4:	390eb03a 	or	r7,r7,r4
    e6c8:	0005883a 	mov	r2,zero
    e6cc:	003f0906 	br	e2f4 <__alt_data_end+0xfffb8bc4>
    e6d0:	0101ffc4 	movi	r4,2047
    e6d4:	513f991e 	bne	r10,r4,e53c <__alt_data_end+0xfffb8e0c>
    e6d8:	180b883a 	mov	r5,r3
    e6dc:	3023883a 	mov	r17,r6
    e6e0:	5021883a 	mov	r16,r10
    e6e4:	3825883a 	mov	r18,r7
    e6e8:	003e8d06 	br	e120 <__alt_data_end+0xfffb89f0>
    e6ec:	80001a1e 	bne	r16,zero,e758 <__subdf3+0x6c4>
    e6f0:	2c48b03a 	or	r4,r5,r17
    e6f4:	20005526 	beq	r4,zero,e84c <__subdf3+0x7b8>
    e6f8:	0084303a 	nor	r2,zero,r2
    e6fc:	1000511e 	bne	r2,zero,e844 <__subdf3+0x7b0>
    e700:	89a3883a 	add	r17,r17,r6
    e704:	194b883a 	add	r5,r3,r5
    e708:	898d803a 	cmpltu	r6,r17,r6
    e70c:	298b883a 	add	r5,r5,r6
    e710:	5021883a 	mov	r16,r10
    e714:	003efc06 	br	e308 <__alt_data_end+0xfffb8bd8>
    e718:	1000341e 	bne	r2,zero,e7ec <__subdf3+0x758>
    e71c:	1984b03a 	or	r2,r3,r6
    e720:	10006f26 	beq	r2,zero,e8e0 <__subdf3+0x84c>
    e724:	180b883a 	mov	r5,r3
    e728:	3023883a 	mov	r17,r6
    e72c:	3825883a 	mov	r18,r7
    e730:	0401ffc4 	movi	r16,2047
    e734:	003e7a06 	br	e120 <__alt_data_end+0xfffb89f0>
    e738:	2c62b03a 	or	r17,r5,r17
    e73c:	8822c03a 	cmpne	r17,r17,zero
    e740:	0005883a 	mov	r2,zero
    e744:	003f8a06 	br	e570 <__alt_data_end+0xfffb8e40>
    e748:	3821883a 	mov	r16,r7
    e74c:	000b883a 	mov	r5,zero
    e750:	0023883a 	mov	r17,zero
    e754:	003ed206 	br	e2a0 <__alt_data_end+0xfffb8b70>
    e758:	0101ffc4 	movi	r4,2047
    e75c:	51003b26 	beq	r10,r4,e84c <__subdf3+0x7b8>
    e760:	0085c83a 	sub	r2,zero,r2
    e764:	29402034 	orhi	r5,r5,128
    e768:	01000e04 	movi	r4,56
    e76c:	20806216 	blt	r4,r2,e8f8 <__subdf3+0x864>
    e770:	010007c4 	movi	r4,31
    e774:	20806b16 	blt	r4,r2,e924 <__subdf3+0x890>
    e778:	01000804 	movi	r4,32
    e77c:	2089c83a 	sub	r4,r4,r2
    e780:	2912983a 	sll	r9,r5,r4
    e784:	888ed83a 	srl	r7,r17,r2
    e788:	8908983a 	sll	r4,r17,r4
    e78c:	2884d83a 	srl	r2,r5,r2
    e790:	49e2b03a 	or	r17,r9,r7
    e794:	2008c03a 	cmpne	r4,r4,zero
    e798:	8922b03a 	or	r17,r17,r4
    e79c:	89a3883a 	add	r17,r17,r6
    e7a0:	10c5883a 	add	r2,r2,r3
    e7a4:	898d803a 	cmpltu	r6,r17,r6
    e7a8:	118b883a 	add	r5,r2,r6
    e7ac:	5021883a 	mov	r16,r10
    e7b0:	003ed506 	br	e308 <__alt_data_end+0xfffb8bd8>
    e7b4:	1984b03a 	or	r2,r3,r6
    e7b8:	103e5926 	beq	r2,zero,e120 <__alt_data_end+0xfffb89f0>
    e7bc:	8989c83a 	sub	r4,r17,r6
    e7c0:	8911803a 	cmpltu	r8,r17,r4
    e7c4:	28c5c83a 	sub	r2,r5,r3
    e7c8:	1205c83a 	sub	r2,r2,r8
    e7cc:	1200202c 	andhi	r8,r2,128
    e7d0:	403ef926 	beq	r8,zero,e3b8 <__alt_data_end+0xfffb8c88>
    e7d4:	3463c83a 	sub	r17,r6,r17
    e7d8:	194bc83a 	sub	r5,r3,r5
    e7dc:	344d803a 	cmpltu	r6,r6,r17
    e7e0:	298bc83a 	sub	r5,r5,r6
    e7e4:	3825883a 	mov	r18,r7
    e7e8:	003e4d06 	br	e120 <__alt_data_end+0xfffb89f0>
    e7ec:	1984b03a 	or	r2,r3,r6
    e7f0:	10002b26 	beq	r2,zero,e8a0 <__subdf3+0x80c>
    e7f4:	2808d0fa 	srli	r4,r5,3
    e7f8:	8822d0fa 	srli	r17,r17,3
    e7fc:	280a977a 	slli	r5,r5,29
    e800:	2080022c 	andhi	r2,r4,8
    e804:	2c62b03a 	or	r17,r5,r17
    e808:	10000826 	beq	r2,zero,e82c <__subdf3+0x798>
    e80c:	1810d0fa 	srli	r8,r3,3
    e810:	4080022c 	andhi	r2,r8,8
    e814:	1000051e 	bne	r2,zero,e82c <__subdf3+0x798>
    e818:	300cd0fa 	srli	r6,r6,3
    e81c:	1804977a 	slli	r2,r3,29
    e820:	4009883a 	mov	r4,r8
    e824:	3825883a 	mov	r18,r7
    e828:	11a2b03a 	or	r17,r2,r6
    e82c:	880ad77a 	srli	r5,r17,29
    e830:	200890fa 	slli	r4,r4,3
    e834:	882290fa 	slli	r17,r17,3
    e838:	0401ffc4 	movi	r16,2047
    e83c:	290ab03a 	or	r5,r5,r4
    e840:	003e3706 	br	e120 <__alt_data_end+0xfffb89f0>
    e844:	0101ffc4 	movi	r4,2047
    e848:	513fc71e 	bne	r10,r4,e768 <__alt_data_end+0xfffb9038>
    e84c:	180b883a 	mov	r5,r3
    e850:	3023883a 	mov	r17,r6
    e854:	5021883a 	mov	r16,r10
    e858:	003e3106 	br	e120 <__alt_data_end+0xfffb89f0>
    e85c:	10002d26 	beq	r2,zero,e914 <__subdf3+0x880>
    e860:	1984b03a 	or	r2,r3,r6
    e864:	10000e26 	beq	r2,zero,e8a0 <__subdf3+0x80c>
    e868:	2808d0fa 	srli	r4,r5,3
    e86c:	8822d0fa 	srli	r17,r17,3
    e870:	280a977a 	slli	r5,r5,29
    e874:	2080022c 	andhi	r2,r4,8
    e878:	2c62b03a 	or	r17,r5,r17
    e87c:	103feb26 	beq	r2,zero,e82c <__alt_data_end+0xfffb90fc>
    e880:	180ed0fa 	srli	r7,r3,3
    e884:	3880022c 	andhi	r2,r7,8
    e888:	103fe81e 	bne	r2,zero,e82c <__alt_data_end+0xfffb90fc>
    e88c:	300cd0fa 	srli	r6,r6,3
    e890:	1804977a 	slli	r2,r3,29
    e894:	3809883a 	mov	r4,r7
    e898:	11a2b03a 	or	r17,r2,r6
    e89c:	003fe306 	br	e82c <__alt_data_end+0xfffb90fc>
    e8a0:	0401ffc4 	movi	r16,2047
    e8a4:	003e1e06 	br	e120 <__alt_data_end+0xfffb89f0>
    e8a8:	0005883a 	mov	r2,zero
    e8ac:	003f8306 	br	e6bc <__alt_data_end+0xfffb8f8c>
    e8b0:	113ff804 	addi	r4,r2,-32
    e8b4:	02000804 	movi	r8,32
    e8b8:	2908d83a 	srl	r4,r5,r4
    e8bc:	12002526 	beq	r2,r8,e954 <__subdf3+0x8c0>
    e8c0:	02001004 	movi	r8,64
    e8c4:	4085c83a 	sub	r2,r8,r2
    e8c8:	288a983a 	sll	r5,r5,r2
    e8cc:	2c62b03a 	or	r17,r5,r17
    e8d0:	8822c03a 	cmpne	r17,r17,zero
    e8d4:	8922b03a 	or	r17,r17,r4
    e8d8:	0005883a 	mov	r2,zero
    e8dc:	003f2406 	br	e570 <__alt_data_end+0xfffb8e40>
    e8e0:	01402034 	movhi	r5,128
    e8e4:	0011883a 	mov	r8,zero
    e8e8:	297fffc4 	addi	r5,r5,-1
    e8ec:	047ffe04 	movi	r17,-8
    e8f0:	0401ffc4 	movi	r16,2047
    e8f4:	003e6a06 	br	e2a0 <__alt_data_end+0xfffb8b70>
    e8f8:	2c62b03a 	or	r17,r5,r17
    e8fc:	8822c03a 	cmpne	r17,r17,zero
    e900:	0005883a 	mov	r2,zero
    e904:	003fa506 	br	e79c <__alt_data_end+0xfffb906c>
    e908:	180b883a 	mov	r5,r3
    e90c:	3023883a 	mov	r17,r6
    e910:	003e0306 	br	e120 <__alt_data_end+0xfffb89f0>
    e914:	180b883a 	mov	r5,r3
    e918:	3023883a 	mov	r17,r6
    e91c:	0401ffc4 	movi	r16,2047
    e920:	003dff06 	br	e120 <__alt_data_end+0xfffb89f0>
    e924:	113ff804 	addi	r4,r2,-32
    e928:	01c00804 	movi	r7,32
    e92c:	2908d83a 	srl	r4,r5,r4
    e930:	11c00a26 	beq	r2,r7,e95c <__subdf3+0x8c8>
    e934:	01c01004 	movi	r7,64
    e938:	3885c83a 	sub	r2,r7,r2
    e93c:	288a983a 	sll	r5,r5,r2
    e940:	2c62b03a 	or	r17,r5,r17
    e944:	8822c03a 	cmpne	r17,r17,zero
    e948:	8922b03a 	or	r17,r17,r4
    e94c:	0005883a 	mov	r2,zero
    e950:	003f9206 	br	e79c <__alt_data_end+0xfffb906c>
    e954:	000b883a 	mov	r5,zero
    e958:	003fdc06 	br	e8cc <__alt_data_end+0xfffb919c>
    e95c:	000b883a 	mov	r5,zero
    e960:	003ff706 	br	e940 <__alt_data_end+0xfffb9210>

0000e964 <__fixdfsi>:
    e964:	2806d53a 	srli	r3,r5,20
    e968:	00800434 	movhi	r2,16
    e96c:	10bfffc4 	addi	r2,r2,-1
    e970:	18c1ffcc 	andi	r3,r3,2047
    e974:	0180ff84 	movi	r6,1022
    e978:	2884703a 	and	r2,r5,r2
    e97c:	280ad7fa 	srli	r5,r5,31
    e980:	30c0130e 	bge	r6,r3,e9d0 <__fixdfsi+0x6c>
    e984:	01810744 	movi	r6,1053
    e988:	30c00d16 	blt	r6,r3,e9c0 <__fixdfsi+0x5c>
    e98c:	01810cc4 	movi	r6,1075
    e990:	30cdc83a 	sub	r6,r6,r3
    e994:	01c007c4 	movi	r7,31
    e998:	10800434 	orhi	r2,r2,16
    e99c:	39800e0e 	bge	r7,r6,e9d8 <__fixdfsi+0x74>
    e9a0:	010104c4 	movi	r4,1043
    e9a4:	20c7c83a 	sub	r3,r4,r3
    e9a8:	10c6d83a 	srl	r3,r2,r3
    e9ac:	29403fcc 	andi	r5,r5,255
    e9b0:	0145c83a 	sub	r2,zero,r5
    e9b4:	1884f03a 	xor	r2,r3,r2
    e9b8:	1145883a 	add	r2,r2,r5
    e9bc:	f800283a 	ret
    e9c0:	00a00034 	movhi	r2,32768
    e9c4:	10bfffc4 	addi	r2,r2,-1
    e9c8:	2885883a 	add	r2,r5,r2
    e9cc:	f800283a 	ret
    e9d0:	0005883a 	mov	r2,zero
    e9d4:	f800283a 	ret
    e9d8:	18fefb44 	addi	r3,r3,-1043
    e9dc:	2188d83a 	srl	r4,r4,r6
    e9e0:	10c6983a 	sll	r3,r2,r3
    e9e4:	20c6b03a 	or	r3,r4,r3
    e9e8:	003ff006 	br	e9ac <__alt_data_end+0xfffb927c>

0000e9ec <__floatsidf>:
    e9ec:	defffd04 	addi	sp,sp,-12
    e9f0:	dc400115 	stw	r17,4(sp)
    e9f4:	dfc00215 	stw	ra,8(sp)
    e9f8:	dc000015 	stw	r16,0(sp)
    e9fc:	2023883a 	mov	r17,r4
    ea00:	20001426 	beq	r4,zero,ea54 <__floatsidf+0x68>
    ea04:	2020d7fa 	srli	r16,r4,31
    ea08:	80000126 	beq	r16,zero,ea10 <__floatsidf+0x24>
    ea0c:	0123c83a 	sub	r17,zero,r4
    ea10:	8809883a 	mov	r4,r17
    ea14:	000eb600 	call	eb60 <__clzsi2>
    ea18:	01410784 	movi	r5,1054
    ea1c:	00c00284 	movi	r3,10
    ea20:	288bc83a 	sub	r5,r5,r2
    ea24:	18801c16 	blt	r3,r2,ea98 <__floatsidf+0xac>
    ea28:	00c002c4 	movi	r3,11
    ea2c:	1887c83a 	sub	r3,r3,r2
    ea30:	88c8d83a 	srl	r4,r17,r3
    ea34:	00c00434 	movhi	r3,16
    ea38:	18ffffc4 	addi	r3,r3,-1
    ea3c:	10800544 	addi	r2,r2,21
    ea40:	20c8703a 	and	r4,r4,r3
    ea44:	8884983a 	sll	r2,r17,r2
    ea48:	28c1ffcc 	andi	r3,r5,2047
    ea4c:	800d883a 	mov	r6,r16
    ea50:	00000406 	br	ea64 <__floatsidf+0x78>
    ea54:	000d883a 	mov	r6,zero
    ea58:	0007883a 	mov	r3,zero
    ea5c:	0009883a 	mov	r4,zero
    ea60:	0005883a 	mov	r2,zero
    ea64:	180a953a 	slli	r5,r3,20
    ea68:	31803fcc 	andi	r6,r6,255
    ea6c:	00c00434 	movhi	r3,16
    ea70:	300c97fa 	slli	r6,r6,31
    ea74:	18ffffc4 	addi	r3,r3,-1
    ea78:	20c6703a 	and	r3,r4,r3
    ea7c:	1946b03a 	or	r3,r3,r5
    ea80:	1986b03a 	or	r3,r3,r6
    ea84:	dfc00217 	ldw	ra,8(sp)
    ea88:	dc400117 	ldw	r17,4(sp)
    ea8c:	dc000017 	ldw	r16,0(sp)
    ea90:	dec00304 	addi	sp,sp,12
    ea94:	f800283a 	ret
    ea98:	10fffd44 	addi	r3,r2,-11
    ea9c:	88c8983a 	sll	r4,r17,r3
    eaa0:	00800434 	movhi	r2,16
    eaa4:	10bfffc4 	addi	r2,r2,-1
    eaa8:	2088703a 	and	r4,r4,r2
    eaac:	28c1ffcc 	andi	r3,r5,2047
    eab0:	800d883a 	mov	r6,r16
    eab4:	0005883a 	mov	r2,zero
    eab8:	003fea06 	br	ea64 <__alt_data_end+0xfffb9334>

0000eabc <__floatunsidf>:
    eabc:	defffe04 	addi	sp,sp,-8
    eac0:	dc000015 	stw	r16,0(sp)
    eac4:	dfc00115 	stw	ra,4(sp)
    eac8:	2021883a 	mov	r16,r4
    eacc:	20001026 	beq	r4,zero,eb10 <__floatunsidf+0x54>
    ead0:	000eb600 	call	eb60 <__clzsi2>
    ead4:	01410784 	movi	r5,1054
    ead8:	100d883a 	mov	r6,r2
    eadc:	288bc83a 	sub	r5,r5,r2
    eae0:	00800284 	movi	r2,10
    eae4:	11801616 	blt	r2,r6,eb40 <__floatunsidf+0x84>
    eae8:	008002c4 	movi	r2,11
    eaec:	1185c83a 	sub	r2,r2,r6
    eaf0:	8084d83a 	srl	r2,r16,r2
    eaf4:	00c00434 	movhi	r3,16
    eaf8:	31c00544 	addi	r7,r6,21
    eafc:	18ffffc4 	addi	r3,r3,-1
    eb00:	81e0983a 	sll	r16,r16,r7
    eb04:	10cc703a 	and	r6,r2,r3
    eb08:	2941ffcc 	andi	r5,r5,2047
    eb0c:	00000206 	br	eb18 <__floatunsidf+0x5c>
    eb10:	000b883a 	mov	r5,zero
    eb14:	000d883a 	mov	r6,zero
    eb18:	280a953a 	slli	r5,r5,20
    eb1c:	00c00434 	movhi	r3,16
    eb20:	18ffffc4 	addi	r3,r3,-1
    eb24:	30c6703a 	and	r3,r6,r3
    eb28:	8005883a 	mov	r2,r16
    eb2c:	1946b03a 	or	r3,r3,r5
    eb30:	dfc00117 	ldw	ra,4(sp)
    eb34:	dc000017 	ldw	r16,0(sp)
    eb38:	dec00204 	addi	sp,sp,8
    eb3c:	f800283a 	ret
    eb40:	31bffd44 	addi	r6,r6,-11
    eb44:	818c983a 	sll	r6,r16,r6
    eb48:	00800434 	movhi	r2,16
    eb4c:	10bfffc4 	addi	r2,r2,-1
    eb50:	2941ffcc 	andi	r5,r5,2047
    eb54:	0021883a 	mov	r16,zero
    eb58:	308c703a 	and	r6,r6,r2
    eb5c:	003fee06 	br	eb18 <__alt_data_end+0xfffb93e8>

0000eb60 <__clzsi2>:
    eb60:	00bfffd4 	movui	r2,65535
    eb64:	11000b36 	bltu	r2,r4,eb94 <__clzsi2+0x34>
    eb68:	00803fc4 	movi	r2,255
    eb6c:	1100122e 	bgeu	r2,r4,ebb8 <__clzsi2+0x58>
    eb70:	00c00204 	movi	r3,8
    eb74:	01400604 	movi	r5,24
    eb78:	20c8d83a 	srl	r4,r4,r3
    eb7c:	00800074 	movhi	r2,1
    eb80:	10875e04 	addi	r2,r2,7544
    eb84:	1109883a 	add	r4,r2,r4
    eb88:	20800003 	ldbu	r2,0(r4)
    eb8c:	2885c83a 	sub	r2,r5,r2
    eb90:	f800283a 	ret
    eb94:	00804034 	movhi	r2,256
    eb98:	10bfffc4 	addi	r2,r2,-1
    eb9c:	11000336 	bltu	r2,r4,ebac <__clzsi2+0x4c>
    eba0:	00c00404 	movi	r3,16
    eba4:	180b883a 	mov	r5,r3
    eba8:	003ff306 	br	eb78 <__alt_data_end+0xfffb9448>
    ebac:	00c00604 	movi	r3,24
    ebb0:	01400204 	movi	r5,8
    ebb4:	003ff006 	br	eb78 <__alt_data_end+0xfffb9448>
    ebb8:	0007883a 	mov	r3,zero
    ebbc:	01400804 	movi	r5,32
    ebc0:	003fed06 	br	eb78 <__alt_data_end+0xfffb9448>

0000ebc4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ebc4:	defffe04 	addi	sp,sp,-8
    ebc8:	dfc00115 	stw	ra,4(sp)
    ebcc:	df000015 	stw	fp,0(sp)
    ebd0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ebd4:	00800074 	movhi	r2,1
    ebd8:	108e6104 	addi	r2,r2,14724
    ebdc:	10800017 	ldw	r2,0(r2)
    ebe0:	10000526 	beq	r2,zero,ebf8 <alt_get_errno+0x34>
    ebe4:	00800074 	movhi	r2,1
    ebe8:	108e6104 	addi	r2,r2,14724
    ebec:	10800017 	ldw	r2,0(r2)
    ebf0:	103ee83a 	callr	r2
    ebf4:	00000206 	br	ec00 <alt_get_errno+0x3c>
    ebf8:	00800074 	movhi	r2,1
    ebfc:	10952e04 	addi	r2,r2,21688
}
    ec00:	e037883a 	mov	sp,fp
    ec04:	dfc00117 	ldw	ra,4(sp)
    ec08:	df000017 	ldw	fp,0(sp)
    ec0c:	dec00204 	addi	sp,sp,8
    ec10:	f800283a 	ret

0000ec14 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    ec14:	defffb04 	addi	sp,sp,-20
    ec18:	dfc00415 	stw	ra,16(sp)
    ec1c:	df000315 	stw	fp,12(sp)
    ec20:	df000304 	addi	fp,sp,12
    ec24:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    ec28:	e0bfff17 	ldw	r2,-4(fp)
    ec2c:	10000816 	blt	r2,zero,ec50 <close+0x3c>
    ec30:	e13fff17 	ldw	r4,-4(fp)
    ec34:	01400304 	movi	r5,12
    ec38:	000c3a00 	call	c3a0 <__mulsi3>
    ec3c:	1007883a 	mov	r3,r2
    ec40:	00800074 	movhi	r2,1
    ec44:	1089de04 	addi	r2,r2,10104
    ec48:	1885883a 	add	r2,r3,r2
    ec4c:	00000106 	br	ec54 <close+0x40>
    ec50:	0005883a 	mov	r2,zero
    ec54:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    ec58:	e0bffd17 	ldw	r2,-12(fp)
    ec5c:	10001926 	beq	r2,zero,ecc4 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    ec60:	e0bffd17 	ldw	r2,-12(fp)
    ec64:	10800017 	ldw	r2,0(r2)
    ec68:	10800417 	ldw	r2,16(r2)
    ec6c:	10000626 	beq	r2,zero,ec88 <close+0x74>
    ec70:	e0bffd17 	ldw	r2,-12(fp)
    ec74:	10800017 	ldw	r2,0(r2)
    ec78:	10800417 	ldw	r2,16(r2)
    ec7c:	e13ffd17 	ldw	r4,-12(fp)
    ec80:	103ee83a 	callr	r2
    ec84:	00000106 	br	ec8c <close+0x78>
    ec88:	0005883a 	mov	r2,zero
    ec8c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    ec90:	e13fff17 	ldw	r4,-4(fp)
    ec94:	000f3380 	call	f338 <alt_release_fd>
    if (rval < 0)
    ec98:	e0bffe17 	ldw	r2,-8(fp)
    ec9c:	1000070e 	bge	r2,zero,ecbc <close+0xa8>
    {
      ALT_ERRNO = -rval;
    eca0:	000ebc40 	call	ebc4 <alt_get_errno>
    eca4:	1007883a 	mov	r3,r2
    eca8:	e0bffe17 	ldw	r2,-8(fp)
    ecac:	0085c83a 	sub	r2,zero,r2
    ecb0:	18800015 	stw	r2,0(r3)
      return -1;
    ecb4:	00bfffc4 	movi	r2,-1
    ecb8:	00000706 	br	ecd8 <close+0xc4>
    }
    return 0;
    ecbc:	0005883a 	mov	r2,zero
    ecc0:	00000506 	br	ecd8 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    ecc4:	000ebc40 	call	ebc4 <alt_get_errno>
    ecc8:	1007883a 	mov	r3,r2
    eccc:	00801444 	movi	r2,81
    ecd0:	18800015 	stw	r2,0(r3)
    return -1;
    ecd4:	00bfffc4 	movi	r2,-1
  }
}
    ecd8:	e037883a 	mov	sp,fp
    ecdc:	dfc00117 	ldw	ra,4(sp)
    ece0:	df000017 	ldw	fp,0(sp)
    ece4:	dec00204 	addi	sp,sp,8
    ece8:	f800283a 	ret

0000ecec <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    ecec:	defffc04 	addi	sp,sp,-16
    ecf0:	df000315 	stw	fp,12(sp)
    ecf4:	df000304 	addi	fp,sp,12
    ecf8:	e13ffd15 	stw	r4,-12(fp)
    ecfc:	e17ffe15 	stw	r5,-8(fp)
    ed00:	e1bfff15 	stw	r6,-4(fp)
  return len;
    ed04:	e0bfff17 	ldw	r2,-4(fp)
}
    ed08:	e037883a 	mov	sp,fp
    ed0c:	df000017 	ldw	fp,0(sp)
    ed10:	dec00104 	addi	sp,sp,4
    ed14:	f800283a 	ret

0000ed18 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ed18:	defffe04 	addi	sp,sp,-8
    ed1c:	dfc00115 	stw	ra,4(sp)
    ed20:	df000015 	stw	fp,0(sp)
    ed24:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ed28:	00800074 	movhi	r2,1
    ed2c:	108e6104 	addi	r2,r2,14724
    ed30:	10800017 	ldw	r2,0(r2)
    ed34:	10000526 	beq	r2,zero,ed4c <alt_get_errno+0x34>
    ed38:	00800074 	movhi	r2,1
    ed3c:	108e6104 	addi	r2,r2,14724
    ed40:	10800017 	ldw	r2,0(r2)
    ed44:	103ee83a 	callr	r2
    ed48:	00000206 	br	ed54 <alt_get_errno+0x3c>
    ed4c:	00800074 	movhi	r2,1
    ed50:	10952e04 	addi	r2,r2,21688
}
    ed54:	e037883a 	mov	sp,fp
    ed58:	dfc00117 	ldw	ra,4(sp)
    ed5c:	df000017 	ldw	fp,0(sp)
    ed60:	dec00204 	addi	sp,sp,8
    ed64:	f800283a 	ret

0000ed68 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    ed68:	defffb04 	addi	sp,sp,-20
    ed6c:	dfc00415 	stw	ra,16(sp)
    ed70:	df000315 	stw	fp,12(sp)
    ed74:	df000304 	addi	fp,sp,12
    ed78:	e13ffe15 	stw	r4,-8(fp)
    ed7c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    ed80:	e0bffe17 	ldw	r2,-8(fp)
    ed84:	10000816 	blt	r2,zero,eda8 <fstat+0x40>
    ed88:	e13ffe17 	ldw	r4,-8(fp)
    ed8c:	01400304 	movi	r5,12
    ed90:	000c3a00 	call	c3a0 <__mulsi3>
    ed94:	1007883a 	mov	r3,r2
    ed98:	00800074 	movhi	r2,1
    ed9c:	1089de04 	addi	r2,r2,10104
    eda0:	1885883a 	add	r2,r3,r2
    eda4:	00000106 	br	edac <fstat+0x44>
    eda8:	0005883a 	mov	r2,zero
    edac:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    edb0:	e0bffd17 	ldw	r2,-12(fp)
    edb4:	10001026 	beq	r2,zero,edf8 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    edb8:	e0bffd17 	ldw	r2,-12(fp)
    edbc:	10800017 	ldw	r2,0(r2)
    edc0:	10800817 	ldw	r2,32(r2)
    edc4:	10000726 	beq	r2,zero,ede4 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
    edc8:	e0bffd17 	ldw	r2,-12(fp)
    edcc:	10800017 	ldw	r2,0(r2)
    edd0:	10800817 	ldw	r2,32(r2)
    edd4:	e13ffd17 	ldw	r4,-12(fp)
    edd8:	e17fff17 	ldw	r5,-4(fp)
    eddc:	103ee83a 	callr	r2
    ede0:	00000a06 	br	ee0c <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    ede4:	e0bfff17 	ldw	r2,-4(fp)
    ede8:	00c80004 	movi	r3,8192
    edec:	10c00115 	stw	r3,4(r2)
      return 0;
    edf0:	0005883a 	mov	r2,zero
    edf4:	00000506 	br	ee0c <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    edf8:	000ed180 	call	ed18 <alt_get_errno>
    edfc:	1007883a 	mov	r3,r2
    ee00:	00801444 	movi	r2,81
    ee04:	18800015 	stw	r2,0(r3)
    return -1;
    ee08:	00bfffc4 	movi	r2,-1
  }
}
    ee0c:	e037883a 	mov	sp,fp
    ee10:	dfc00117 	ldw	ra,4(sp)
    ee14:	df000017 	ldw	fp,0(sp)
    ee18:	dec00204 	addi	sp,sp,8
    ee1c:	f800283a 	ret

0000ee20 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ee20:	defffe04 	addi	sp,sp,-8
    ee24:	dfc00115 	stw	ra,4(sp)
    ee28:	df000015 	stw	fp,0(sp)
    ee2c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ee30:	00800074 	movhi	r2,1
    ee34:	108e6104 	addi	r2,r2,14724
    ee38:	10800017 	ldw	r2,0(r2)
    ee3c:	10000526 	beq	r2,zero,ee54 <alt_get_errno+0x34>
    ee40:	00800074 	movhi	r2,1
    ee44:	108e6104 	addi	r2,r2,14724
    ee48:	10800017 	ldw	r2,0(r2)
    ee4c:	103ee83a 	callr	r2
    ee50:	00000206 	br	ee5c <alt_get_errno+0x3c>
    ee54:	00800074 	movhi	r2,1
    ee58:	10952e04 	addi	r2,r2,21688
}
    ee5c:	e037883a 	mov	sp,fp
    ee60:	dfc00117 	ldw	ra,4(sp)
    ee64:	df000017 	ldw	fp,0(sp)
    ee68:	dec00204 	addi	sp,sp,8
    ee6c:	f800283a 	ret

0000ee70 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    ee70:	deffed04 	addi	sp,sp,-76
    ee74:	dfc01215 	stw	ra,72(sp)
    ee78:	df001115 	stw	fp,68(sp)
    ee7c:	df001104 	addi	fp,sp,68
    ee80:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    ee84:	e0bfff17 	ldw	r2,-4(fp)
    ee88:	10000816 	blt	r2,zero,eeac <isatty+0x3c>
    ee8c:	e13fff17 	ldw	r4,-4(fp)
    ee90:	01400304 	movi	r5,12
    ee94:	000c3a00 	call	c3a0 <__mulsi3>
    ee98:	1007883a 	mov	r3,r2
    ee9c:	00800074 	movhi	r2,1
    eea0:	1089de04 	addi	r2,r2,10104
    eea4:	1885883a 	add	r2,r3,r2
    eea8:	00000106 	br	eeb0 <isatty+0x40>
    eeac:	0005883a 	mov	r2,zero
    eeb0:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    eeb4:	e0bfef17 	ldw	r2,-68(fp)
    eeb8:	10000e26 	beq	r2,zero,eef4 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    eebc:	e0bfef17 	ldw	r2,-68(fp)
    eec0:	10800017 	ldw	r2,0(r2)
    eec4:	10800817 	ldw	r2,32(r2)
    eec8:	1000021e 	bne	r2,zero,eed4 <isatty+0x64>
    {
      return 1;
    eecc:	00800044 	movi	r2,1
    eed0:	00000d06 	br	ef08 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    eed4:	e0bff004 	addi	r2,fp,-64
    eed8:	e13fff17 	ldw	r4,-4(fp)
    eedc:	100b883a 	mov	r5,r2
    eee0:	000ed680 	call	ed68 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    eee4:	e0bff117 	ldw	r2,-60(fp)
    eee8:	10880020 	cmpeqi	r2,r2,8192
    eeec:	10803fcc 	andi	r2,r2,255
    eef0:	00000506 	br	ef08 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    eef4:	000ee200 	call	ee20 <alt_get_errno>
    eef8:	1007883a 	mov	r3,r2
    eefc:	00801444 	movi	r2,81
    ef00:	18800015 	stw	r2,0(r3)
    return 0;
    ef04:	0005883a 	mov	r2,zero
  }
}
    ef08:	e037883a 	mov	sp,fp
    ef0c:	dfc00117 	ldw	ra,4(sp)
    ef10:	df000017 	ldw	fp,0(sp)
    ef14:	dec00204 	addi	sp,sp,8
    ef18:	f800283a 	ret

0000ef1c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    ef1c:	defffc04 	addi	sp,sp,-16
    ef20:	df000315 	stw	fp,12(sp)
    ef24:	df000304 	addi	fp,sp,12
    ef28:	e13ffd15 	stw	r4,-12(fp)
    ef2c:	e17ffe15 	stw	r5,-8(fp)
    ef30:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    ef34:	e0fffe17 	ldw	r3,-8(fp)
    ef38:	e0bffd17 	ldw	r2,-12(fp)
    ef3c:	18800c26 	beq	r3,r2,ef70 <alt_load_section+0x54>
  {
    while( to != end )
    ef40:	00000806 	br	ef64 <alt_load_section+0x48>
    {
      *to++ = *from++;
    ef44:	e0bffe17 	ldw	r2,-8(fp)
    ef48:	10c00104 	addi	r3,r2,4
    ef4c:	e0fffe15 	stw	r3,-8(fp)
    ef50:	e0fffd17 	ldw	r3,-12(fp)
    ef54:	19000104 	addi	r4,r3,4
    ef58:	e13ffd15 	stw	r4,-12(fp)
    ef5c:	18c00017 	ldw	r3,0(r3)
    ef60:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    ef64:	e0fffe17 	ldw	r3,-8(fp)
    ef68:	e0bfff17 	ldw	r2,-4(fp)
    ef6c:	18bff51e 	bne	r3,r2,ef44 <__alt_data_end+0xfffb9814>
    {
      *to++ = *from++;
    }
  }
}
    ef70:	e037883a 	mov	sp,fp
    ef74:	df000017 	ldw	fp,0(sp)
    ef78:	dec00104 	addi	sp,sp,4
    ef7c:	f800283a 	ret

0000ef80 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    ef80:	defffe04 	addi	sp,sp,-8
    ef84:	dfc00115 	stw	ra,4(sp)
    ef88:	df000015 	stw	fp,0(sp)
    ef8c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    ef90:	01000074 	movhi	r4,1
    ef94:	210e6604 	addi	r4,r4,14744
    ef98:	01400074 	movhi	r5,1
    ef9c:	2947ab04 	addi	r5,r5,7852
    efa0:	01800074 	movhi	r6,1
    efa4:	318e6604 	addi	r6,r6,14744
    efa8:	000ef1c0 	call	ef1c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    efac:	01000034 	movhi	r4,0
    efb0:	21000804 	addi	r4,r4,32
    efb4:	01400034 	movhi	r5,0
    efb8:	29400804 	addi	r5,r5,32
    efbc:	01800034 	movhi	r6,0
    efc0:	31808b04 	addi	r6,r6,556
    efc4:	000ef1c0 	call	ef1c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    efc8:	01000074 	movhi	r4,1
    efcc:	21052904 	addi	r4,r4,5284
    efd0:	01400074 	movhi	r5,1
    efd4:	29452904 	addi	r5,r5,5284
    efd8:	01800074 	movhi	r6,1
    efdc:	3187ab04 	addi	r6,r6,7852
    efe0:	000ef1c0 	call	ef1c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    efe4:	00103800 	call	10380 <alt_dcache_flush_all>
  alt_icache_flush_all();
    efe8:	00105480 	call	10548 <alt_icache_flush_all>
}
    efec:	e037883a 	mov	sp,fp
    eff0:	dfc00117 	ldw	ra,4(sp)
    eff4:	df000017 	ldw	fp,0(sp)
    eff8:	dec00204 	addi	sp,sp,8
    effc:	f800283a 	ret

0000f000 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f000:	defffe04 	addi	sp,sp,-8
    f004:	dfc00115 	stw	ra,4(sp)
    f008:	df000015 	stw	fp,0(sp)
    f00c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f010:	00800074 	movhi	r2,1
    f014:	108e6104 	addi	r2,r2,14724
    f018:	10800017 	ldw	r2,0(r2)
    f01c:	10000526 	beq	r2,zero,f034 <alt_get_errno+0x34>
    f020:	00800074 	movhi	r2,1
    f024:	108e6104 	addi	r2,r2,14724
    f028:	10800017 	ldw	r2,0(r2)
    f02c:	103ee83a 	callr	r2
    f030:	00000206 	br	f03c <alt_get_errno+0x3c>
    f034:	00800074 	movhi	r2,1
    f038:	10952e04 	addi	r2,r2,21688
}
    f03c:	e037883a 	mov	sp,fp
    f040:	dfc00117 	ldw	ra,4(sp)
    f044:	df000017 	ldw	fp,0(sp)
    f048:	dec00204 	addi	sp,sp,8
    f04c:	f800283a 	ret

0000f050 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    f050:	defff904 	addi	sp,sp,-28
    f054:	dfc00615 	stw	ra,24(sp)
    f058:	df000515 	stw	fp,20(sp)
    f05c:	df000504 	addi	fp,sp,20
    f060:	e13ffd15 	stw	r4,-12(fp)
    f064:	e17ffe15 	stw	r5,-8(fp)
    f068:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    f06c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f070:	e0bffd17 	ldw	r2,-12(fp)
    f074:	10000816 	blt	r2,zero,f098 <lseek+0x48>
    f078:	e13ffd17 	ldw	r4,-12(fp)
    f07c:	01400304 	movi	r5,12
    f080:	000c3a00 	call	c3a0 <__mulsi3>
    f084:	1007883a 	mov	r3,r2
    f088:	00800074 	movhi	r2,1
    f08c:	1089de04 	addi	r2,r2,10104
    f090:	1885883a 	add	r2,r3,r2
    f094:	00000106 	br	f09c <lseek+0x4c>
    f098:	0005883a 	mov	r2,zero
    f09c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    f0a0:	e0bffc17 	ldw	r2,-16(fp)
    f0a4:	10001026 	beq	r2,zero,f0e8 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    f0a8:	e0bffc17 	ldw	r2,-16(fp)
    f0ac:	10800017 	ldw	r2,0(r2)
    f0b0:	10800717 	ldw	r2,28(r2)
    f0b4:	10000926 	beq	r2,zero,f0dc <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    f0b8:	e0bffc17 	ldw	r2,-16(fp)
    f0bc:	10800017 	ldw	r2,0(r2)
    f0c0:	10800717 	ldw	r2,28(r2)
    f0c4:	e13ffc17 	ldw	r4,-16(fp)
    f0c8:	e17ffe17 	ldw	r5,-8(fp)
    f0cc:	e1bfff17 	ldw	r6,-4(fp)
    f0d0:	103ee83a 	callr	r2
    f0d4:	e0bffb15 	stw	r2,-20(fp)
    f0d8:	00000506 	br	f0f0 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    f0dc:	00bfde84 	movi	r2,-134
    f0e0:	e0bffb15 	stw	r2,-20(fp)
    f0e4:	00000206 	br	f0f0 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
    f0e8:	00bfebc4 	movi	r2,-81
    f0ec:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    f0f0:	e0bffb17 	ldw	r2,-20(fp)
    f0f4:	1000070e 	bge	r2,zero,f114 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
    f0f8:	000f0000 	call	f000 <alt_get_errno>
    f0fc:	1007883a 	mov	r3,r2
    f100:	e0bffb17 	ldw	r2,-20(fp)
    f104:	0085c83a 	sub	r2,zero,r2
    f108:	18800015 	stw	r2,0(r3)
    rc = -1;
    f10c:	00bfffc4 	movi	r2,-1
    f110:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    f114:	e0bffb17 	ldw	r2,-20(fp)
}
    f118:	e037883a 	mov	sp,fp
    f11c:	dfc00117 	ldw	ra,4(sp)
    f120:	df000017 	ldw	fp,0(sp)
    f124:	dec00204 	addi	sp,sp,8
    f128:	f800283a 	ret

0000f12c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    f12c:	defffd04 	addi	sp,sp,-12
    f130:	dfc00215 	stw	ra,8(sp)
    f134:	df000115 	stw	fp,4(sp)
    f138:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    f13c:	0009883a 	mov	r4,zero
    f140:	000f6200 	call	f620 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    f144:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    f148:	000f6540 	call	f654 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    f14c:	01000074 	movhi	r4,1
    f150:	2107a104 	addi	r4,r4,7812
    f154:	01400074 	movhi	r5,1
    f158:	2947a104 	addi	r5,r5,7812
    f15c:	01800074 	movhi	r6,1
    f160:	3187a104 	addi	r6,r6,7812
    f164:	00109140 	call	10914 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    f168:	00104900 	call	10490 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    f16c:	01000074 	movhi	r4,1
    f170:	21013b04 	addi	r4,r4,1260
    f174:	00111000 	call	11100 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    f178:	d126d917 	ldw	r4,-25756(gp)
    f17c:	d0e6da17 	ldw	r3,-25752(gp)
    f180:	d0a6db17 	ldw	r2,-25748(gp)
    f184:	180b883a 	mov	r5,r3
    f188:	100d883a 	mov	r6,r2
    f18c:	00010ac0 	call	10ac <main>
    f190:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    f194:	01000044 	movi	r4,1
    f198:	000ec140 	call	ec14 <close>
  exit (result);
    f19c:	e13fff17 	ldw	r4,-4(fp)
    f1a0:	00111140 	call	11114 <exit>

0000f1a4 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    f1a4:	defffe04 	addi	sp,sp,-8
    f1a8:	df000115 	stw	fp,4(sp)
    f1ac:	df000104 	addi	fp,sp,4
    f1b0:	e13fff15 	stw	r4,-4(fp)
}
    f1b4:	e037883a 	mov	sp,fp
    f1b8:	df000017 	ldw	fp,0(sp)
    f1bc:	dec00104 	addi	sp,sp,4
    f1c0:	f800283a 	ret

0000f1c4 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    f1c4:	defffe04 	addi	sp,sp,-8
    f1c8:	df000115 	stw	fp,4(sp)
    f1cc:	df000104 	addi	fp,sp,4
    f1d0:	e13fff15 	stw	r4,-4(fp)
}
    f1d4:	e037883a 	mov	sp,fp
    f1d8:	df000017 	ldw	fp,0(sp)
    f1dc:	dec00104 	addi	sp,sp,4
    f1e0:	f800283a 	ret

0000f1e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f1e4:	defffe04 	addi	sp,sp,-8
    f1e8:	dfc00115 	stw	ra,4(sp)
    f1ec:	df000015 	stw	fp,0(sp)
    f1f0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f1f4:	00800074 	movhi	r2,1
    f1f8:	108e6104 	addi	r2,r2,14724
    f1fc:	10800017 	ldw	r2,0(r2)
    f200:	10000526 	beq	r2,zero,f218 <alt_get_errno+0x34>
    f204:	00800074 	movhi	r2,1
    f208:	108e6104 	addi	r2,r2,14724
    f20c:	10800017 	ldw	r2,0(r2)
    f210:	103ee83a 	callr	r2
    f214:	00000206 	br	f220 <alt_get_errno+0x3c>
    f218:	00800074 	movhi	r2,1
    f21c:	10952e04 	addi	r2,r2,21688
}
    f220:	e037883a 	mov	sp,fp
    f224:	dfc00117 	ldw	ra,4(sp)
    f228:	df000017 	ldw	fp,0(sp)
    f22c:	dec00204 	addi	sp,sp,8
    f230:	f800283a 	ret

0000f234 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    f234:	defff904 	addi	sp,sp,-28
    f238:	dfc00615 	stw	ra,24(sp)
    f23c:	df000515 	stw	fp,20(sp)
    f240:	df000504 	addi	fp,sp,20
    f244:	e13ffd15 	stw	r4,-12(fp)
    f248:	e17ffe15 	stw	r5,-8(fp)
    f24c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f250:	e0bffd17 	ldw	r2,-12(fp)
    f254:	10000816 	blt	r2,zero,f278 <read+0x44>
    f258:	e13ffd17 	ldw	r4,-12(fp)
    f25c:	01400304 	movi	r5,12
    f260:	000c3a00 	call	c3a0 <__mulsi3>
    f264:	1007883a 	mov	r3,r2
    f268:	00800074 	movhi	r2,1
    f26c:	1089de04 	addi	r2,r2,10104
    f270:	1885883a 	add	r2,r3,r2
    f274:	00000106 	br	f27c <read+0x48>
    f278:	0005883a 	mov	r2,zero
    f27c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    f280:	e0bffb17 	ldw	r2,-20(fp)
    f284:	10002226 	beq	r2,zero,f310 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    f288:	e0bffb17 	ldw	r2,-20(fp)
    f28c:	10800217 	ldw	r2,8(r2)
    f290:	108000cc 	andi	r2,r2,3
    f294:	10800060 	cmpeqi	r2,r2,1
    f298:	1000181e 	bne	r2,zero,f2fc <read+0xc8>
        (fd->dev->read))
    f29c:	e0bffb17 	ldw	r2,-20(fp)
    f2a0:	10800017 	ldw	r2,0(r2)
    f2a4:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    f2a8:	10001426 	beq	r2,zero,f2fc <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    f2ac:	e0bffb17 	ldw	r2,-20(fp)
    f2b0:	10800017 	ldw	r2,0(r2)
    f2b4:	10800517 	ldw	r2,20(r2)
    f2b8:	e0ffff17 	ldw	r3,-4(fp)
    f2bc:	e13ffb17 	ldw	r4,-20(fp)
    f2c0:	e17ffe17 	ldw	r5,-8(fp)
    f2c4:	180d883a 	mov	r6,r3
    f2c8:	103ee83a 	callr	r2
    f2cc:	e0bffc15 	stw	r2,-16(fp)
    f2d0:	e0bffc17 	ldw	r2,-16(fp)
    f2d4:	1000070e 	bge	r2,zero,f2f4 <read+0xc0>
        {
          ALT_ERRNO = -rval;
    f2d8:	000f1e40 	call	f1e4 <alt_get_errno>
    f2dc:	1007883a 	mov	r3,r2
    f2e0:	e0bffc17 	ldw	r2,-16(fp)
    f2e4:	0085c83a 	sub	r2,zero,r2
    f2e8:	18800015 	stw	r2,0(r3)
          return -1;
    f2ec:	00bfffc4 	movi	r2,-1
    f2f0:	00000c06 	br	f324 <read+0xf0>
        }
        return rval;
    f2f4:	e0bffc17 	ldw	r2,-16(fp)
    f2f8:	00000a06 	br	f324 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
    f2fc:	000f1e40 	call	f1e4 <alt_get_errno>
    f300:	1007883a 	mov	r3,r2
    f304:	00800344 	movi	r2,13
    f308:	18800015 	stw	r2,0(r3)
    f30c:	00000406 	br	f320 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    f310:	000f1e40 	call	f1e4 <alt_get_errno>
    f314:	1007883a 	mov	r3,r2
    f318:	00801444 	movi	r2,81
    f31c:	18800015 	stw	r2,0(r3)
  }
  return -1;
    f320:	00bfffc4 	movi	r2,-1
}
    f324:	e037883a 	mov	sp,fp
    f328:	dfc00117 	ldw	ra,4(sp)
    f32c:	df000017 	ldw	fp,0(sp)
    f330:	dec00204 	addi	sp,sp,8
    f334:	f800283a 	ret

0000f338 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    f338:	defffc04 	addi	sp,sp,-16
    f33c:	dfc00315 	stw	ra,12(sp)
    f340:	df000215 	stw	fp,8(sp)
    f344:	dc000115 	stw	r16,4(sp)
    f348:	df000204 	addi	fp,sp,8
    f34c:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
    f350:	e0bffe17 	ldw	r2,-8(fp)
    f354:	108000d0 	cmplti	r2,r2,3
    f358:	1000111e 	bne	r2,zero,f3a0 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    f35c:	04000074 	movhi	r16,1
    f360:	8409de04 	addi	r16,r16,10104
    f364:	e0bffe17 	ldw	r2,-8(fp)
    f368:	1009883a 	mov	r4,r2
    f36c:	01400304 	movi	r5,12
    f370:	000c3a00 	call	c3a0 <__mulsi3>
    f374:	8085883a 	add	r2,r16,r2
    f378:	10800204 	addi	r2,r2,8
    f37c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    f380:	04000074 	movhi	r16,1
    f384:	8409de04 	addi	r16,r16,10104
    f388:	e0bffe17 	ldw	r2,-8(fp)
    f38c:	1009883a 	mov	r4,r2
    f390:	01400304 	movi	r5,12
    f394:	000c3a00 	call	c3a0 <__mulsi3>
    f398:	8085883a 	add	r2,r16,r2
    f39c:	10000015 	stw	zero,0(r2)
  }
}
    f3a0:	e6ffff04 	addi	sp,fp,-4
    f3a4:	dfc00217 	ldw	ra,8(sp)
    f3a8:	df000117 	ldw	fp,4(sp)
    f3ac:	dc000017 	ldw	r16,0(sp)
    f3b0:	dec00304 	addi	sp,sp,12
    f3b4:	f800283a 	ret

0000f3b8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    f3b8:	defff904 	addi	sp,sp,-28
    f3bc:	df000615 	stw	fp,24(sp)
    f3c0:	df000604 	addi	fp,sp,24
    f3c4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f3c8:	0005303a 	rdctl	r2,status
    f3cc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f3d0:	e0fffc17 	ldw	r3,-16(fp)
    f3d4:	00bfff84 	movi	r2,-2
    f3d8:	1884703a 	and	r2,r3,r2
    f3dc:	1001703a 	wrctl	status,r2
  
  return context;
    f3e0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    f3e4:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    f3e8:	d0a00c17 	ldw	r2,-32720(gp)
    f3ec:	10c000c4 	addi	r3,r2,3
    f3f0:	00bfff04 	movi	r2,-4
    f3f4:	1884703a 	and	r2,r3,r2
    f3f8:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    f3fc:	d0e00c17 	ldw	r3,-32720(gp)
    f400:	e0bfff17 	ldw	r2,-4(fp)
    f404:	1887883a 	add	r3,r3,r2
    f408:	00800174 	movhi	r2,5
    f40c:	1095cc04 	addi	r2,r2,22320
    f410:	10c0062e 	bgeu	r2,r3,f42c <sbrk+0x74>
    f414:	e0bffa17 	ldw	r2,-24(fp)
    f418:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f41c:	e0bffd17 	ldw	r2,-12(fp)
    f420:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    f424:	00bfffc4 	movi	r2,-1
    f428:	00000b06 	br	f458 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    f42c:	d0a00c17 	ldw	r2,-32720(gp)
    f430:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
    f434:	d0e00c17 	ldw	r3,-32720(gp)
    f438:	e0bfff17 	ldw	r2,-4(fp)
    f43c:	1885883a 	add	r2,r3,r2
    f440:	d0a00c15 	stw	r2,-32720(gp)
    f444:	e0bffa17 	ldw	r2,-24(fp)
    f448:	e0bffe15 	stw	r2,-8(fp)
    f44c:	e0bffe17 	ldw	r2,-8(fp)
    f450:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    f454:	e0bffb17 	ldw	r2,-20(fp)
} 
    f458:	e037883a 	mov	sp,fp
    f45c:	df000017 	ldw	fp,0(sp)
    f460:	dec00104 	addi	sp,sp,4
    f464:	f800283a 	ret

0000f468 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    f468:	defffd04 	addi	sp,sp,-12
    f46c:	dfc00215 	stw	ra,8(sp)
    f470:	df000115 	stw	fp,4(sp)
    f474:	df000104 	addi	fp,sp,4
    f478:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    f47c:	e13fff17 	ldw	r4,-4(fp)
    f480:	00102280 	call	10228 <alt_busy_sleep>
}
    f484:	e037883a 	mov	sp,fp
    f488:	dfc00117 	ldw	ra,4(sp)
    f48c:	df000017 	ldw	fp,0(sp)
    f490:	dec00204 	addi	sp,sp,8
    f494:	f800283a 	ret

0000f498 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f498:	defffe04 	addi	sp,sp,-8
    f49c:	dfc00115 	stw	ra,4(sp)
    f4a0:	df000015 	stw	fp,0(sp)
    f4a4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f4a8:	00800074 	movhi	r2,1
    f4ac:	108e6104 	addi	r2,r2,14724
    f4b0:	10800017 	ldw	r2,0(r2)
    f4b4:	10000526 	beq	r2,zero,f4cc <alt_get_errno+0x34>
    f4b8:	00800074 	movhi	r2,1
    f4bc:	108e6104 	addi	r2,r2,14724
    f4c0:	10800017 	ldw	r2,0(r2)
    f4c4:	103ee83a 	callr	r2
    f4c8:	00000206 	br	f4d4 <alt_get_errno+0x3c>
    f4cc:	00800074 	movhi	r2,1
    f4d0:	10952e04 	addi	r2,r2,21688
}
    f4d4:	e037883a 	mov	sp,fp
    f4d8:	dfc00117 	ldw	ra,4(sp)
    f4dc:	df000017 	ldw	fp,0(sp)
    f4e0:	dec00204 	addi	sp,sp,8
    f4e4:	f800283a 	ret

0000f4e8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    f4e8:	defff904 	addi	sp,sp,-28
    f4ec:	dfc00615 	stw	ra,24(sp)
    f4f0:	df000515 	stw	fp,20(sp)
    f4f4:	df000504 	addi	fp,sp,20
    f4f8:	e13ffd15 	stw	r4,-12(fp)
    f4fc:	e17ffe15 	stw	r5,-8(fp)
    f500:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f504:	e0bffd17 	ldw	r2,-12(fp)
    f508:	10000816 	blt	r2,zero,f52c <write+0x44>
    f50c:	e13ffd17 	ldw	r4,-12(fp)
    f510:	01400304 	movi	r5,12
    f514:	000c3a00 	call	c3a0 <__mulsi3>
    f518:	1007883a 	mov	r3,r2
    f51c:	00800074 	movhi	r2,1
    f520:	1089de04 	addi	r2,r2,10104
    f524:	1885883a 	add	r2,r3,r2
    f528:	00000106 	br	f530 <write+0x48>
    f52c:	0005883a 	mov	r2,zero
    f530:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    f534:	e0bffb17 	ldw	r2,-20(fp)
    f538:	10002126 	beq	r2,zero,f5c0 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    f53c:	e0bffb17 	ldw	r2,-20(fp)
    f540:	10800217 	ldw	r2,8(r2)
    f544:	108000cc 	andi	r2,r2,3
    f548:	10001826 	beq	r2,zero,f5ac <write+0xc4>
    f54c:	e0bffb17 	ldw	r2,-20(fp)
    f550:	10800017 	ldw	r2,0(r2)
    f554:	10800617 	ldw	r2,24(r2)
    f558:	10001426 	beq	r2,zero,f5ac <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    f55c:	e0bffb17 	ldw	r2,-20(fp)
    f560:	10800017 	ldw	r2,0(r2)
    f564:	10800617 	ldw	r2,24(r2)
    f568:	e0ffff17 	ldw	r3,-4(fp)
    f56c:	e13ffb17 	ldw	r4,-20(fp)
    f570:	e17ffe17 	ldw	r5,-8(fp)
    f574:	180d883a 	mov	r6,r3
    f578:	103ee83a 	callr	r2
    f57c:	e0bffc15 	stw	r2,-16(fp)
    f580:	e0bffc17 	ldw	r2,-16(fp)
    f584:	1000070e 	bge	r2,zero,f5a4 <write+0xbc>
      {
        ALT_ERRNO = -rval;
    f588:	000f4980 	call	f498 <alt_get_errno>
    f58c:	1007883a 	mov	r3,r2
    f590:	e0bffc17 	ldw	r2,-16(fp)
    f594:	0085c83a 	sub	r2,zero,r2
    f598:	18800015 	stw	r2,0(r3)
        return -1;
    f59c:	00bfffc4 	movi	r2,-1
    f5a0:	00000c06 	br	f5d4 <write+0xec>
      }
      return rval;
    f5a4:	e0bffc17 	ldw	r2,-16(fp)
    f5a8:	00000a06 	br	f5d4 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
    f5ac:	000f4980 	call	f498 <alt_get_errno>
    f5b0:	1007883a 	mov	r3,r2
    f5b4:	00800344 	movi	r2,13
    f5b8:	18800015 	stw	r2,0(r3)
    f5bc:	00000406 	br	f5d0 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    f5c0:	000f4980 	call	f498 <alt_get_errno>
    f5c4:	1007883a 	mov	r3,r2
    f5c8:	00801444 	movi	r2,81
    f5cc:	18800015 	stw	r2,0(r3)
  }
  return -1;
    f5d0:	00bfffc4 	movi	r2,-1
}
    f5d4:	e037883a 	mov	sp,fp
    f5d8:	dfc00117 	ldw	ra,4(sp)
    f5dc:	df000017 	ldw	fp,0(sp)
    f5e0:	dec00204 	addi	sp,sp,8
    f5e4:	f800283a 	ret

0000f5e8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    f5e8:	defffd04 	addi	sp,sp,-12
    f5ec:	dfc00215 	stw	ra,8(sp)
    f5f0:	df000115 	stw	fp,4(sp)
    f5f4:	df000104 	addi	fp,sp,4
    f5f8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    f5fc:	e13fff17 	ldw	r4,-4(fp)
    f600:	01400074 	movhi	r5,1
    f604:	294e5e04 	addi	r5,r5,14712
    f608:	00103ec0 	call	103ec <alt_dev_llist_insert>
}
    f60c:	e037883a 	mov	sp,fp
    f610:	dfc00117 	ldw	ra,4(sp)
    f614:	df000017 	ldw	fp,0(sp)
    f618:	dec00204 	addi	sp,sp,8
    f61c:	f800283a 	ret

0000f620 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    f620:	defffd04 	addi	sp,sp,-12
    f624:	dfc00215 	stw	ra,8(sp)
    f628:	df000115 	stw	fp,4(sp)
    f62c:	df000104 	addi	fp,sp,4
    f630:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
    f634:	0010dcc0 	call	10dcc <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    f638:	00800044 	movi	r2,1
    f63c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    f640:	e037883a 	mov	sp,fp
    f644:	dfc00117 	ldw	ra,4(sp)
    f648:	df000017 	ldw	fp,0(sp)
    f64c:	dec00204 	addi	sp,sp,8
    f650:	f800283a 	ret

0000f654 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    f654:	defffe04 	addi	sp,sp,-8
    f658:	dfc00115 	stw	ra,4(sp)
    f65c:	df000015 	stw	fp,0(sp)
    f660:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    f664:	01000074 	movhi	r4,1
    f668:	210a4804 	addi	r4,r4,10528
    f66c:	000b883a 	mov	r5,zero
    f670:	01800144 	movi	r6,5
    f674:	000f8000 	call	f800 <altera_avalon_jtag_uart_init>
    f678:	01000074 	movhi	r4,1
    f67c:	210a3e04 	addi	r4,r4,10488
    f680:	000f5e80 	call	f5e8 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
    f684:	0001883a 	nop
}
    f688:	e037883a 	mov	sp,fp
    f68c:	dfc00117 	ldw	ra,4(sp)
    f690:	df000017 	ldw	fp,0(sp)
    f694:	dec00204 	addi	sp,sp,8
    f698:	f800283a 	ret

0000f69c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    f69c:	defffa04 	addi	sp,sp,-24
    f6a0:	dfc00515 	stw	ra,20(sp)
    f6a4:	df000415 	stw	fp,16(sp)
    f6a8:	df000404 	addi	fp,sp,16
    f6ac:	e13ffd15 	stw	r4,-12(fp)
    f6b0:	e17ffe15 	stw	r5,-8(fp)
    f6b4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    f6b8:	e0bffd17 	ldw	r2,-12(fp)
    f6bc:	10800017 	ldw	r2,0(r2)
    f6c0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    f6c4:	e0bffc17 	ldw	r2,-16(fp)
    f6c8:	10c00a04 	addi	r3,r2,40
    f6cc:	e0bffd17 	ldw	r2,-12(fp)
    f6d0:	10800217 	ldw	r2,8(r2)
    f6d4:	1809883a 	mov	r4,r3
    f6d8:	e17ffe17 	ldw	r5,-8(fp)
    f6dc:	e1bfff17 	ldw	r6,-4(fp)
    f6e0:	100f883a 	mov	r7,r2
    f6e4:	000fcc40 	call	fcc4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    f6e8:	e037883a 	mov	sp,fp
    f6ec:	dfc00117 	ldw	ra,4(sp)
    f6f0:	df000017 	ldw	fp,0(sp)
    f6f4:	dec00204 	addi	sp,sp,8
    f6f8:	f800283a 	ret

0000f6fc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    f6fc:	defffa04 	addi	sp,sp,-24
    f700:	dfc00515 	stw	ra,20(sp)
    f704:	df000415 	stw	fp,16(sp)
    f708:	df000404 	addi	fp,sp,16
    f70c:	e13ffd15 	stw	r4,-12(fp)
    f710:	e17ffe15 	stw	r5,-8(fp)
    f714:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    f718:	e0bffd17 	ldw	r2,-12(fp)
    f71c:	10800017 	ldw	r2,0(r2)
    f720:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    f724:	e0bffc17 	ldw	r2,-16(fp)
    f728:	10c00a04 	addi	r3,r2,40
    f72c:	e0bffd17 	ldw	r2,-12(fp)
    f730:	10800217 	ldw	r2,8(r2)
    f734:	1809883a 	mov	r4,r3
    f738:	e17ffe17 	ldw	r5,-8(fp)
    f73c:	e1bfff17 	ldw	r6,-4(fp)
    f740:	100f883a 	mov	r7,r2
    f744:	000fed00 	call	fed0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    f748:	e037883a 	mov	sp,fp
    f74c:	dfc00117 	ldw	ra,4(sp)
    f750:	df000017 	ldw	fp,0(sp)
    f754:	dec00204 	addi	sp,sp,8
    f758:	f800283a 	ret

0000f75c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    f75c:	defffc04 	addi	sp,sp,-16
    f760:	dfc00315 	stw	ra,12(sp)
    f764:	df000215 	stw	fp,8(sp)
    f768:	df000204 	addi	fp,sp,8
    f76c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    f770:	e0bfff17 	ldw	r2,-4(fp)
    f774:	10800017 	ldw	r2,0(r2)
    f778:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    f77c:	e0bffe17 	ldw	r2,-8(fp)
    f780:	10c00a04 	addi	r3,r2,40
    f784:	e0bfff17 	ldw	r2,-4(fp)
    f788:	10800217 	ldw	r2,8(r2)
    f78c:	1809883a 	mov	r4,r3
    f790:	100b883a 	mov	r5,r2
    f794:	000fb700 	call	fb70 <altera_avalon_jtag_uart_close>
}
    f798:	e037883a 	mov	sp,fp
    f79c:	dfc00117 	ldw	ra,4(sp)
    f7a0:	df000017 	ldw	fp,0(sp)
    f7a4:	dec00204 	addi	sp,sp,8
    f7a8:	f800283a 	ret

0000f7ac <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    f7ac:	defffa04 	addi	sp,sp,-24
    f7b0:	dfc00515 	stw	ra,20(sp)
    f7b4:	df000415 	stw	fp,16(sp)
    f7b8:	df000404 	addi	fp,sp,16
    f7bc:	e13ffd15 	stw	r4,-12(fp)
    f7c0:	e17ffe15 	stw	r5,-8(fp)
    f7c4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    f7c8:	e0bffd17 	ldw	r2,-12(fp)
    f7cc:	10800017 	ldw	r2,0(r2)
    f7d0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    f7d4:	e0bffc17 	ldw	r2,-16(fp)
    f7d8:	10800a04 	addi	r2,r2,40
    f7dc:	1009883a 	mov	r4,r2
    f7e0:	e17ffe17 	ldw	r5,-8(fp)
    f7e4:	e1bfff17 	ldw	r6,-4(fp)
    f7e8:	000fbd80 	call	fbd8 <altera_avalon_jtag_uart_ioctl>
}
    f7ec:	e037883a 	mov	sp,fp
    f7f0:	dfc00117 	ldw	ra,4(sp)
    f7f4:	df000017 	ldw	fp,0(sp)
    f7f8:	dec00204 	addi	sp,sp,8
    f7fc:	f800283a 	ret

0000f800 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    f800:	defffa04 	addi	sp,sp,-24
    f804:	dfc00515 	stw	ra,20(sp)
    f808:	df000415 	stw	fp,16(sp)
    f80c:	df000404 	addi	fp,sp,16
    f810:	e13ffd15 	stw	r4,-12(fp)
    f814:	e17ffe15 	stw	r5,-8(fp)
    f818:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    f81c:	e0bffd17 	ldw	r2,-12(fp)
    f820:	00c00044 	movi	r3,1
    f824:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    f828:	e0bffd17 	ldw	r2,-12(fp)
    f82c:	10800017 	ldw	r2,0(r2)
    f830:	10800104 	addi	r2,r2,4
    f834:	1007883a 	mov	r3,r2
    f838:	e0bffd17 	ldw	r2,-12(fp)
    f83c:	10800817 	ldw	r2,32(r2)
    f840:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    f844:	e0fffe17 	ldw	r3,-8(fp)
    f848:	e0bfff17 	ldw	r2,-4(fp)
    f84c:	d8000015 	stw	zero,0(sp)
    f850:	1809883a 	mov	r4,r3
    f854:	100b883a 	mov	r5,r2
    f858:	01800074 	movhi	r6,1
    f85c:	31be3104 	addi	r6,r6,-1852
    f860:	e1fffd17 	ldw	r7,-12(fp)
    f864:	00105640 	call	10564 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    f868:	e0bffd17 	ldw	r2,-12(fp)
    f86c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    f870:	e0bffd17 	ldw	r2,-12(fp)
    f874:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    f878:	00800074 	movhi	r2,1
    f87c:	10953304 	addi	r2,r2,21708
    f880:	10800017 	ldw	r2,0(r2)
    f884:	1809883a 	mov	r4,r3
    f888:	100b883a 	mov	r5,r2
    f88c:	01800074 	movhi	r6,1
    f890:	31beb204 	addi	r6,r6,-1336
    f894:	e1fffd17 	ldw	r7,-12(fp)
    f898:	00100e80 	call	100e8 <alt_alarm_start>
    f89c:	1000040e 	bge	r2,zero,f8b0 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    f8a0:	e0fffd17 	ldw	r3,-12(fp)
    f8a4:	00a00034 	movhi	r2,32768
    f8a8:	10bfffc4 	addi	r2,r2,-1
    f8ac:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    f8b0:	e037883a 	mov	sp,fp
    f8b4:	dfc00117 	ldw	ra,4(sp)
    f8b8:	df000017 	ldw	fp,0(sp)
    f8bc:	dec00204 	addi	sp,sp,8
    f8c0:	f800283a 	ret

0000f8c4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    f8c4:	defff804 	addi	sp,sp,-32
    f8c8:	df000715 	stw	fp,28(sp)
    f8cc:	df000704 	addi	fp,sp,28
    f8d0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    f8d4:	e0bfff17 	ldw	r2,-4(fp)
    f8d8:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
    f8dc:	e0bffb17 	ldw	r2,-20(fp)
    f8e0:	10800017 	ldw	r2,0(r2)
    f8e4:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    f8e8:	e0bffc17 	ldw	r2,-16(fp)
    f8ec:	10800104 	addi	r2,r2,4
    f8f0:	10800037 	ldwio	r2,0(r2)
    f8f4:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    f8f8:	e0bffd17 	ldw	r2,-12(fp)
    f8fc:	1080c00c 	andi	r2,r2,768
    f900:	1000011e 	bne	r2,zero,f908 <altera_avalon_jtag_uart_irq+0x44>
      break;
    f904:	00006c06 	br	fab8 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    f908:	e0bffd17 	ldw	r2,-12(fp)
    f90c:	1080400c 	andi	r2,r2,256
    f910:	10003426 	beq	r2,zero,f9e4 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    f914:	00800074 	movhi	r2,1
    f918:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f91c:	e0bffb17 	ldw	r2,-20(fp)
    f920:	10800a17 	ldw	r2,40(r2)
    f924:	10800044 	addi	r2,r2,1
    f928:	1081ffcc 	andi	r2,r2,2047
    f92c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
    f930:	e0bffb17 	ldw	r2,-20(fp)
    f934:	10c00b17 	ldw	r3,44(r2)
    f938:	e0bffe17 	ldw	r2,-8(fp)
    f93c:	1880011e 	bne	r3,r2,f944 <altera_avalon_jtag_uart_irq+0x80>
          break;
    f940:	00001606 	br	f99c <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    f944:	e0bffc17 	ldw	r2,-16(fp)
    f948:	10800037 	ldwio	r2,0(r2)
    f94c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    f950:	e0bff917 	ldw	r2,-28(fp)
    f954:	10a0000c 	andi	r2,r2,32768
    f958:	1000011e 	bne	r2,zero,f960 <altera_avalon_jtag_uart_irq+0x9c>
          break;
    f95c:	00000f06 	br	f99c <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    f960:	e0bffb17 	ldw	r2,-20(fp)
    f964:	10800a17 	ldw	r2,40(r2)
    f968:	e0fff917 	ldw	r3,-28(fp)
    f96c:	1809883a 	mov	r4,r3
    f970:	e0fffb17 	ldw	r3,-20(fp)
    f974:	1885883a 	add	r2,r3,r2
    f978:	10800e04 	addi	r2,r2,56
    f97c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f980:	e0bffb17 	ldw	r2,-20(fp)
    f984:	10800a17 	ldw	r2,40(r2)
    f988:	10800044 	addi	r2,r2,1
    f98c:	10c1ffcc 	andi	r3,r2,2047
    f990:	e0bffb17 	ldw	r2,-20(fp)
    f994:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    f998:	003fe006 	br	f91c <__alt_data_end+0xfffba1ec>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    f99c:	e0bff917 	ldw	r2,-28(fp)
    f9a0:	10bfffec 	andhi	r2,r2,65535
    f9a4:	10000f26 	beq	r2,zero,f9e4 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    f9a8:	e0bffb17 	ldw	r2,-20(fp)
    f9ac:	10c00817 	ldw	r3,32(r2)
    f9b0:	00bfff84 	movi	r2,-2
    f9b4:	1886703a 	and	r3,r3,r2
    f9b8:	e0bffb17 	ldw	r2,-20(fp)
    f9bc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    f9c0:	e0bffc17 	ldw	r2,-16(fp)
    f9c4:	10800104 	addi	r2,r2,4
    f9c8:	1007883a 	mov	r3,r2
    f9cc:	e0bffb17 	ldw	r2,-20(fp)
    f9d0:	10800817 	ldw	r2,32(r2)
    f9d4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    f9d8:	e0bffc17 	ldw	r2,-16(fp)
    f9dc:	10800104 	addi	r2,r2,4
    f9e0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    f9e4:	e0bffd17 	ldw	r2,-12(fp)
    f9e8:	1080800c 	andi	r2,r2,512
    f9ec:	10003126 	beq	r2,zero,fab4 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    f9f0:	e0bffd17 	ldw	r2,-12(fp)
    f9f4:	1004d43a 	srli	r2,r2,16
    f9f8:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    f9fc:	00001406 	br	fa50 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    fa00:	e0bffc17 	ldw	r2,-16(fp)
    fa04:	e0fffb17 	ldw	r3,-20(fp)
    fa08:	18c00d17 	ldw	r3,52(r3)
    fa0c:	e13ffb17 	ldw	r4,-20(fp)
    fa10:	20c7883a 	add	r3,r4,r3
    fa14:	18c20e04 	addi	r3,r3,2104
    fa18:	18c00003 	ldbu	r3,0(r3)
    fa1c:	18c03fcc 	andi	r3,r3,255
    fa20:	18c0201c 	xori	r3,r3,128
    fa24:	18ffe004 	addi	r3,r3,-128
    fa28:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    fa2c:	e0bffb17 	ldw	r2,-20(fp)
    fa30:	10800d17 	ldw	r2,52(r2)
    fa34:	10800044 	addi	r2,r2,1
    fa38:	10c1ffcc 	andi	r3,r2,2047
    fa3c:	e0bffb17 	ldw	r2,-20(fp)
    fa40:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    fa44:	e0bffa17 	ldw	r2,-24(fp)
    fa48:	10bfffc4 	addi	r2,r2,-1
    fa4c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    fa50:	e0bffa17 	ldw	r2,-24(fp)
    fa54:	10000526 	beq	r2,zero,fa6c <altera_avalon_jtag_uart_irq+0x1a8>
    fa58:	e0bffb17 	ldw	r2,-20(fp)
    fa5c:	10c00d17 	ldw	r3,52(r2)
    fa60:	e0bffb17 	ldw	r2,-20(fp)
    fa64:	10800c17 	ldw	r2,48(r2)
    fa68:	18bfe51e 	bne	r3,r2,fa00 <__alt_data_end+0xfffba2d0>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    fa6c:	e0bffa17 	ldw	r2,-24(fp)
    fa70:	10001026 	beq	r2,zero,fab4 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    fa74:	e0bffb17 	ldw	r2,-20(fp)
    fa78:	10c00817 	ldw	r3,32(r2)
    fa7c:	00bfff44 	movi	r2,-3
    fa80:	1886703a 	and	r3,r3,r2
    fa84:	e0bffb17 	ldw	r2,-20(fp)
    fa88:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    fa8c:	e0bffb17 	ldw	r2,-20(fp)
    fa90:	10800017 	ldw	r2,0(r2)
    fa94:	10800104 	addi	r2,r2,4
    fa98:	1007883a 	mov	r3,r2
    fa9c:	e0bffb17 	ldw	r2,-20(fp)
    faa0:	10800817 	ldw	r2,32(r2)
    faa4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    faa8:	e0bffc17 	ldw	r2,-16(fp)
    faac:	10800104 	addi	r2,r2,4
    fab0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    fab4:	003f8c06 	br	f8e8 <__alt_data_end+0xfffba1b8>
}
    fab8:	e037883a 	mov	sp,fp
    fabc:	df000017 	ldw	fp,0(sp)
    fac0:	dec00104 	addi	sp,sp,4
    fac4:	f800283a 	ret

0000fac8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    fac8:	defff804 	addi	sp,sp,-32
    facc:	df000715 	stw	fp,28(sp)
    fad0:	df000704 	addi	fp,sp,28
    fad4:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    fad8:	e0bffb17 	ldw	r2,-20(fp)
    fadc:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    fae0:	e0bff917 	ldw	r2,-28(fp)
    fae4:	10800017 	ldw	r2,0(r2)
    fae8:	10800104 	addi	r2,r2,4
    faec:	10800037 	ldwio	r2,0(r2)
    faf0:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    faf4:	e0bffa17 	ldw	r2,-24(fp)
    faf8:	1081000c 	andi	r2,r2,1024
    fafc:	10000b26 	beq	r2,zero,fb2c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    fb00:	e0bff917 	ldw	r2,-28(fp)
    fb04:	10800017 	ldw	r2,0(r2)
    fb08:	10800104 	addi	r2,r2,4
    fb0c:	1007883a 	mov	r3,r2
    fb10:	e0bff917 	ldw	r2,-28(fp)
    fb14:	10800817 	ldw	r2,32(r2)
    fb18:	10810014 	ori	r2,r2,1024
    fb1c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    fb20:	e0bff917 	ldw	r2,-28(fp)
    fb24:	10000915 	stw	zero,36(r2)
    fb28:	00000a06 	br	fb54 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    fb2c:	e0bff917 	ldw	r2,-28(fp)
    fb30:	10c00917 	ldw	r3,36(r2)
    fb34:	00a00034 	movhi	r2,32768
    fb38:	10bfff04 	addi	r2,r2,-4
    fb3c:	10c00536 	bltu	r2,r3,fb54 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
    fb40:	e0bff917 	ldw	r2,-28(fp)
    fb44:	10800917 	ldw	r2,36(r2)
    fb48:	10c00044 	addi	r3,r2,1
    fb4c:	e0bff917 	ldw	r2,-28(fp)
    fb50:	10c00915 	stw	r3,36(r2)
    fb54:	00800074 	movhi	r2,1
    fb58:	10953304 	addi	r2,r2,21708
    fb5c:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    fb60:	e037883a 	mov	sp,fp
    fb64:	df000017 	ldw	fp,0(sp)
    fb68:	dec00104 	addi	sp,sp,4
    fb6c:	f800283a 	ret

0000fb70 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    fb70:	defffd04 	addi	sp,sp,-12
    fb74:	df000215 	stw	fp,8(sp)
    fb78:	df000204 	addi	fp,sp,8
    fb7c:	e13ffe15 	stw	r4,-8(fp)
    fb80:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    fb84:	00000506 	br	fb9c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    fb88:	e0bfff17 	ldw	r2,-4(fp)
    fb8c:	1090000c 	andi	r2,r2,16384
    fb90:	10000226 	beq	r2,zero,fb9c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    fb94:	00bffd44 	movi	r2,-11
    fb98:	00000b06 	br	fbc8 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    fb9c:	e0bffe17 	ldw	r2,-8(fp)
    fba0:	10c00d17 	ldw	r3,52(r2)
    fba4:	e0bffe17 	ldw	r2,-8(fp)
    fba8:	10800c17 	ldw	r2,48(r2)
    fbac:	18800526 	beq	r3,r2,fbc4 <altera_avalon_jtag_uart_close+0x54>
    fbb0:	e0bffe17 	ldw	r2,-8(fp)
    fbb4:	10c00917 	ldw	r3,36(r2)
    fbb8:	e0bffe17 	ldw	r2,-8(fp)
    fbbc:	10800117 	ldw	r2,4(r2)
    fbc0:	18bff136 	bltu	r3,r2,fb88 <__alt_data_end+0xfffba458>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    fbc4:	0005883a 	mov	r2,zero
}
    fbc8:	e037883a 	mov	sp,fp
    fbcc:	df000017 	ldw	fp,0(sp)
    fbd0:	dec00104 	addi	sp,sp,4
    fbd4:	f800283a 	ret

0000fbd8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    fbd8:	defffa04 	addi	sp,sp,-24
    fbdc:	df000515 	stw	fp,20(sp)
    fbe0:	df000504 	addi	fp,sp,20
    fbe4:	e13ffd15 	stw	r4,-12(fp)
    fbe8:	e17ffe15 	stw	r5,-8(fp)
    fbec:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    fbf0:	00bff9c4 	movi	r2,-25
    fbf4:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    fbf8:	e0bffe17 	ldw	r2,-8(fp)
    fbfc:	10da8060 	cmpeqi	r3,r2,27137
    fc00:	1800031e 	bne	r3,zero,fc10 <altera_avalon_jtag_uart_ioctl+0x38>
    fc04:	109a80a0 	cmpeqi	r2,r2,27138
    fc08:	1000191e 	bne	r2,zero,fc70 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
    fc0c:	00002806 	br	fcb0 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    fc10:	e0bffd17 	ldw	r2,-12(fp)
    fc14:	10c00117 	ldw	r3,4(r2)
    fc18:	00a00034 	movhi	r2,32768
    fc1c:	10bfffc4 	addi	r2,r2,-1
    fc20:	18801226 	beq	r3,r2,fc6c <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
    fc24:	e0bfff17 	ldw	r2,-4(fp)
    fc28:	10800017 	ldw	r2,0(r2)
    fc2c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    fc30:	e0bffc17 	ldw	r2,-16(fp)
    fc34:	10800090 	cmplti	r2,r2,2
    fc38:	1000061e 	bne	r2,zero,fc54 <altera_avalon_jtag_uart_ioctl+0x7c>
    fc3c:	e0fffc17 	ldw	r3,-16(fp)
    fc40:	00a00034 	movhi	r2,32768
    fc44:	10bfffc4 	addi	r2,r2,-1
    fc48:	18800226 	beq	r3,r2,fc54 <altera_avalon_jtag_uart_ioctl+0x7c>
    fc4c:	e0bffc17 	ldw	r2,-16(fp)
    fc50:	00000206 	br	fc5c <altera_avalon_jtag_uart_ioctl+0x84>
    fc54:	00a00034 	movhi	r2,32768
    fc58:	10bfff84 	addi	r2,r2,-2
    fc5c:	e0fffd17 	ldw	r3,-12(fp)
    fc60:	18800115 	stw	r2,4(r3)
      rc = 0;
    fc64:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    fc68:	00001106 	br	fcb0 <altera_avalon_jtag_uart_ioctl+0xd8>
    fc6c:	00001006 	br	fcb0 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    fc70:	e0bffd17 	ldw	r2,-12(fp)
    fc74:	10c00117 	ldw	r3,4(r2)
    fc78:	00a00034 	movhi	r2,32768
    fc7c:	10bfffc4 	addi	r2,r2,-1
    fc80:	18800a26 	beq	r3,r2,fcac <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    fc84:	e0bffd17 	ldw	r2,-12(fp)
    fc88:	10c00917 	ldw	r3,36(r2)
    fc8c:	e0bffd17 	ldw	r2,-12(fp)
    fc90:	10800117 	ldw	r2,4(r2)
    fc94:	1885803a 	cmpltu	r2,r3,r2
    fc98:	10c03fcc 	andi	r3,r2,255
    fc9c:	e0bfff17 	ldw	r2,-4(fp)
    fca0:	10c00015 	stw	r3,0(r2)
      rc = 0;
    fca4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    fca8:	00000006 	br	fcac <altera_avalon_jtag_uart_ioctl+0xd4>
    fcac:	0001883a 	nop

  default:
    break;
  }

  return rc;
    fcb0:	e0bffb17 	ldw	r2,-20(fp)
}
    fcb4:	e037883a 	mov	sp,fp
    fcb8:	df000017 	ldw	fp,0(sp)
    fcbc:	dec00104 	addi	sp,sp,4
    fcc0:	f800283a 	ret

0000fcc4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    fcc4:	defff304 	addi	sp,sp,-52
    fcc8:	dfc00c15 	stw	ra,48(sp)
    fccc:	df000b15 	stw	fp,44(sp)
    fcd0:	df000b04 	addi	fp,sp,44
    fcd4:	e13ffc15 	stw	r4,-16(fp)
    fcd8:	e17ffd15 	stw	r5,-12(fp)
    fcdc:	e1bffe15 	stw	r6,-8(fp)
    fce0:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    fce4:	e0bffd17 	ldw	r2,-12(fp)
    fce8:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    fcec:	00004906 	br	fe14 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    fcf0:	e0bffc17 	ldw	r2,-16(fp)
    fcf4:	10800a17 	ldw	r2,40(r2)
    fcf8:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    fcfc:	e0bffc17 	ldw	r2,-16(fp)
    fd00:	10800b17 	ldw	r2,44(r2)
    fd04:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
    fd08:	e0fff717 	ldw	r3,-36(fp)
    fd0c:	e0bff817 	ldw	r2,-32(fp)
    fd10:	18800536 	bltu	r3,r2,fd28 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    fd14:	e0fff717 	ldw	r3,-36(fp)
    fd18:	e0bff817 	ldw	r2,-32(fp)
    fd1c:	1885c83a 	sub	r2,r3,r2
    fd20:	e0bff615 	stw	r2,-40(fp)
    fd24:	00000406 	br	fd38 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    fd28:	00c20004 	movi	r3,2048
    fd2c:	e0bff817 	ldw	r2,-32(fp)
    fd30:	1885c83a 	sub	r2,r3,r2
    fd34:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    fd38:	e0bff617 	ldw	r2,-40(fp)
    fd3c:	1000011e 	bne	r2,zero,fd44 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
    fd40:	00001d06 	br	fdb8 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
    fd44:	e0fffe17 	ldw	r3,-8(fp)
    fd48:	e0bff617 	ldw	r2,-40(fp)
    fd4c:	1880022e 	bgeu	r3,r2,fd58 <altera_avalon_jtag_uart_read+0x94>
        n = space;
    fd50:	e0bffe17 	ldw	r2,-8(fp)
    fd54:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    fd58:	e0bff817 	ldw	r2,-32(fp)
    fd5c:	10800e04 	addi	r2,r2,56
    fd60:	e0fffc17 	ldw	r3,-16(fp)
    fd64:	1885883a 	add	r2,r3,r2
    fd68:	e13ff517 	ldw	r4,-44(fp)
    fd6c:	100b883a 	mov	r5,r2
    fd70:	e1bff617 	ldw	r6,-40(fp)
    fd74:	0007b280 	call	7b28 <memcpy>
      ptr   += n;
    fd78:	e0fff517 	ldw	r3,-44(fp)
    fd7c:	e0bff617 	ldw	r2,-40(fp)
    fd80:	1885883a 	add	r2,r3,r2
    fd84:	e0bff515 	stw	r2,-44(fp)
      space -= n;
    fd88:	e0fffe17 	ldw	r3,-8(fp)
    fd8c:	e0bff617 	ldw	r2,-40(fp)
    fd90:	1885c83a 	sub	r2,r3,r2
    fd94:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    fd98:	e0fff817 	ldw	r3,-32(fp)
    fd9c:	e0bff617 	ldw	r2,-40(fp)
    fda0:	1885883a 	add	r2,r3,r2
    fda4:	10c1ffcc 	andi	r3,r2,2047
    fda8:	e0bffc17 	ldw	r2,-16(fp)
    fdac:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    fdb0:	e0bffe17 	ldw	r2,-8(fp)
    fdb4:	00bfce16 	blt	zero,r2,fcf0 <__alt_data_end+0xfffba5c0>

    /* If we read any data then return it */
    if (ptr != buffer)
    fdb8:	e0fff517 	ldw	r3,-44(fp)
    fdbc:	e0bffd17 	ldw	r2,-12(fp)
    fdc0:	18800126 	beq	r3,r2,fdc8 <altera_avalon_jtag_uart_read+0x104>
      break;
    fdc4:	00001506 	br	fe1c <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    fdc8:	e0bfff17 	ldw	r2,-4(fp)
    fdcc:	1090000c 	andi	r2,r2,16384
    fdd0:	10000126 	beq	r2,zero,fdd8 <altera_avalon_jtag_uart_read+0x114>
      break;
    fdd4:	00001106 	br	fe1c <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    fdd8:	0001883a 	nop
    fddc:	e0bffc17 	ldw	r2,-16(fp)
    fde0:	10c00a17 	ldw	r3,40(r2)
    fde4:	e0bff717 	ldw	r2,-36(fp)
    fde8:	1880051e 	bne	r3,r2,fe00 <altera_avalon_jtag_uart_read+0x13c>
    fdec:	e0bffc17 	ldw	r2,-16(fp)
    fdf0:	10c00917 	ldw	r3,36(r2)
    fdf4:	e0bffc17 	ldw	r2,-16(fp)
    fdf8:	10800117 	ldw	r2,4(r2)
    fdfc:	18bff736 	bltu	r3,r2,fddc <__alt_data_end+0xfffba6ac>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    fe00:	e0bffc17 	ldw	r2,-16(fp)
    fe04:	10c00a17 	ldw	r3,40(r2)
    fe08:	e0bff717 	ldw	r2,-36(fp)
    fe0c:	1880011e 	bne	r3,r2,fe14 <altera_avalon_jtag_uart_read+0x150>
      break;
    fe10:	00000206 	br	fe1c <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    fe14:	e0bffe17 	ldw	r2,-8(fp)
    fe18:	00bfb516 	blt	zero,r2,fcf0 <__alt_data_end+0xfffba5c0>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    fe1c:	e0fff517 	ldw	r3,-44(fp)
    fe20:	e0bffd17 	ldw	r2,-12(fp)
    fe24:	18801826 	beq	r3,r2,fe88 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fe28:	0005303a 	rdctl	r2,status
    fe2c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fe30:	e0fffa17 	ldw	r3,-24(fp)
    fe34:	00bfff84 	movi	r2,-2
    fe38:	1884703a 	and	r2,r3,r2
    fe3c:	1001703a 	wrctl	status,r2
  
  return context;
    fe40:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    fe44:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    fe48:	e0bffc17 	ldw	r2,-16(fp)
    fe4c:	10800817 	ldw	r2,32(r2)
    fe50:	10c00054 	ori	r3,r2,1
    fe54:	e0bffc17 	ldw	r2,-16(fp)
    fe58:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    fe5c:	e0bffc17 	ldw	r2,-16(fp)
    fe60:	10800017 	ldw	r2,0(r2)
    fe64:	10800104 	addi	r2,r2,4
    fe68:	1007883a 	mov	r3,r2
    fe6c:	e0bffc17 	ldw	r2,-16(fp)
    fe70:	10800817 	ldw	r2,32(r2)
    fe74:	18800035 	stwio	r2,0(r3)
    fe78:	e0bff917 	ldw	r2,-28(fp)
    fe7c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fe80:	e0bffb17 	ldw	r2,-20(fp)
    fe84:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    fe88:	e0fff517 	ldw	r3,-44(fp)
    fe8c:	e0bffd17 	ldw	r2,-12(fp)
    fe90:	18800426 	beq	r3,r2,fea4 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
    fe94:	e0fff517 	ldw	r3,-44(fp)
    fe98:	e0bffd17 	ldw	r2,-12(fp)
    fe9c:	1885c83a 	sub	r2,r3,r2
    fea0:	00000606 	br	febc <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
    fea4:	e0bfff17 	ldw	r2,-4(fp)
    fea8:	1090000c 	andi	r2,r2,16384
    feac:	10000226 	beq	r2,zero,feb8 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
    feb0:	00bffd44 	movi	r2,-11
    feb4:	00000106 	br	febc <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
    feb8:	00bffec4 	movi	r2,-5
}
    febc:	e037883a 	mov	sp,fp
    fec0:	dfc00117 	ldw	ra,4(sp)
    fec4:	df000017 	ldw	fp,0(sp)
    fec8:	dec00204 	addi	sp,sp,8
    fecc:	f800283a 	ret

0000fed0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    fed0:	defff304 	addi	sp,sp,-52
    fed4:	dfc00c15 	stw	ra,48(sp)
    fed8:	df000b15 	stw	fp,44(sp)
    fedc:	df000b04 	addi	fp,sp,44
    fee0:	e13ffc15 	stw	r4,-16(fp)
    fee4:	e17ffd15 	stw	r5,-12(fp)
    fee8:	e1bffe15 	stw	r6,-8(fp)
    feec:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    fef0:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    fef4:	e0bffd17 	ldw	r2,-12(fp)
    fef8:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    fefc:	00003806 	br	ffe0 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    ff00:	e0bffc17 	ldw	r2,-16(fp)
    ff04:	10800c17 	ldw	r2,48(r2)
    ff08:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
    ff0c:	e0bffc17 	ldw	r2,-16(fp)
    ff10:	10800d17 	ldw	r2,52(r2)
    ff14:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
    ff18:	e0fff817 	ldw	r3,-32(fp)
    ff1c:	e0bff517 	ldw	r2,-44(fp)
    ff20:	1880062e 	bgeu	r3,r2,ff3c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    ff24:	e0fff517 	ldw	r3,-44(fp)
    ff28:	e0bff817 	ldw	r2,-32(fp)
    ff2c:	1885c83a 	sub	r2,r3,r2
    ff30:	10bfffc4 	addi	r2,r2,-1
    ff34:	e0bff615 	stw	r2,-40(fp)
    ff38:	00000b06 	br	ff68 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
    ff3c:	e0bff517 	ldw	r2,-44(fp)
    ff40:	10000526 	beq	r2,zero,ff58 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    ff44:	00c20004 	movi	r3,2048
    ff48:	e0bff817 	ldw	r2,-32(fp)
    ff4c:	1885c83a 	sub	r2,r3,r2
    ff50:	e0bff615 	stw	r2,-40(fp)
    ff54:	00000406 	br	ff68 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    ff58:	00c1ffc4 	movi	r3,2047
    ff5c:	e0bff817 	ldw	r2,-32(fp)
    ff60:	1885c83a 	sub	r2,r3,r2
    ff64:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    ff68:	e0bff617 	ldw	r2,-40(fp)
    ff6c:	1000011e 	bne	r2,zero,ff74 <altera_avalon_jtag_uart_write+0xa4>
        break;
    ff70:	00001d06 	br	ffe8 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
    ff74:	e0fffe17 	ldw	r3,-8(fp)
    ff78:	e0bff617 	ldw	r2,-40(fp)
    ff7c:	1880022e 	bgeu	r3,r2,ff88 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
    ff80:	e0bffe17 	ldw	r2,-8(fp)
    ff84:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    ff88:	e0bff817 	ldw	r2,-32(fp)
    ff8c:	10820e04 	addi	r2,r2,2104
    ff90:	e0fffc17 	ldw	r3,-16(fp)
    ff94:	1885883a 	add	r2,r3,r2
    ff98:	1009883a 	mov	r4,r2
    ff9c:	e17ffd17 	ldw	r5,-12(fp)
    ffa0:	e1bff617 	ldw	r6,-40(fp)
    ffa4:	0007b280 	call	7b28 <memcpy>
      ptr   += n;
    ffa8:	e0fffd17 	ldw	r3,-12(fp)
    ffac:	e0bff617 	ldw	r2,-40(fp)
    ffb0:	1885883a 	add	r2,r3,r2
    ffb4:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    ffb8:	e0fffe17 	ldw	r3,-8(fp)
    ffbc:	e0bff617 	ldw	r2,-40(fp)
    ffc0:	1885c83a 	sub	r2,r3,r2
    ffc4:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ffc8:	e0fff817 	ldw	r3,-32(fp)
    ffcc:	e0bff617 	ldw	r2,-40(fp)
    ffd0:	1885883a 	add	r2,r3,r2
    ffd4:	10c1ffcc 	andi	r3,r2,2047
    ffd8:	e0bffc17 	ldw	r2,-16(fp)
    ffdc:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    ffe0:	e0bffe17 	ldw	r2,-8(fp)
    ffe4:	00bfc616 	blt	zero,r2,ff00 <__alt_data_end+0xfffba7d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ffe8:	0005303a 	rdctl	r2,status
    ffec:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fff0:	e0fffa17 	ldw	r3,-24(fp)
    fff4:	00bfff84 	movi	r2,-2
    fff8:	1884703a 	and	r2,r3,r2
    fffc:	1001703a 	wrctl	status,r2
  
  return context;
   10000:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   10004:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   10008:	e0bffc17 	ldw	r2,-16(fp)
   1000c:	10800817 	ldw	r2,32(r2)
   10010:	10c00094 	ori	r3,r2,2
   10014:	e0bffc17 	ldw	r2,-16(fp)
   10018:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1001c:	e0bffc17 	ldw	r2,-16(fp)
   10020:	10800017 	ldw	r2,0(r2)
   10024:	10800104 	addi	r2,r2,4
   10028:	1007883a 	mov	r3,r2
   1002c:	e0bffc17 	ldw	r2,-16(fp)
   10030:	10800817 	ldw	r2,32(r2)
   10034:	18800035 	stwio	r2,0(r3)
   10038:	e0bff917 	ldw	r2,-28(fp)
   1003c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10040:	e0bffb17 	ldw	r2,-20(fp)
   10044:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   10048:	e0bffe17 	ldw	r2,-8(fp)
   1004c:	0080120e 	bge	zero,r2,10098 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
   10050:	e0bfff17 	ldw	r2,-4(fp)
   10054:	1090000c 	andi	r2,r2,16384
   10058:	10000126 	beq	r2,zero,10060 <altera_avalon_jtag_uart_write+0x190>
        break;
   1005c:	00001006 	br	100a0 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   10060:	0001883a 	nop
   10064:	e0bffc17 	ldw	r2,-16(fp)
   10068:	10c00d17 	ldw	r3,52(r2)
   1006c:	e0bff517 	ldw	r2,-44(fp)
   10070:	1880051e 	bne	r3,r2,10088 <altera_avalon_jtag_uart_write+0x1b8>
   10074:	e0bffc17 	ldw	r2,-16(fp)
   10078:	10c00917 	ldw	r3,36(r2)
   1007c:	e0bffc17 	ldw	r2,-16(fp)
   10080:	10800117 	ldw	r2,4(r2)
   10084:	18bff736 	bltu	r3,r2,10064 <__alt_data_end+0xfffba934>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   10088:	e0bffc17 	ldw	r2,-16(fp)
   1008c:	10800917 	ldw	r2,36(r2)
   10090:	10000126 	beq	r2,zero,10098 <altera_avalon_jtag_uart_write+0x1c8>
         break;
   10094:	00000206 	br	100a0 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
   10098:	e0bffe17 	ldw	r2,-8(fp)
   1009c:	00bf9716 	blt	zero,r2,fefc <__alt_data_end+0xfffba7cc>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   100a0:	e0fffd17 	ldw	r3,-12(fp)
   100a4:	e0bff717 	ldw	r2,-36(fp)
   100a8:	18800426 	beq	r3,r2,100bc <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
   100ac:	e0fffd17 	ldw	r3,-12(fp)
   100b0:	e0bff717 	ldw	r2,-36(fp)
   100b4:	1885c83a 	sub	r2,r3,r2
   100b8:	00000606 	br	100d4 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
   100bc:	e0bfff17 	ldw	r2,-4(fp)
   100c0:	1090000c 	andi	r2,r2,16384
   100c4:	10000226 	beq	r2,zero,100d0 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
   100c8:	00bffd44 	movi	r2,-11
   100cc:	00000106 	br	100d4 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   100d0:	00bffec4 	movi	r2,-5
}
   100d4:	e037883a 	mov	sp,fp
   100d8:	dfc00117 	ldw	ra,4(sp)
   100dc:	df000017 	ldw	fp,0(sp)
   100e0:	dec00204 	addi	sp,sp,8
   100e4:	f800283a 	ret

000100e8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   100e8:	defff504 	addi	sp,sp,-44
   100ec:	df000a15 	stw	fp,40(sp)
   100f0:	df000a04 	addi	fp,sp,40
   100f4:	e13ffc15 	stw	r4,-16(fp)
   100f8:	e17ffd15 	stw	r5,-12(fp)
   100fc:	e1bffe15 	stw	r6,-8(fp)
   10100:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   10104:	e03ff615 	stw	zero,-40(fp)
   10108:	00800074 	movhi	r2,1
   1010c:	10953304 	addi	r2,r2,21708
   10110:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   10114:	10003f26 	beq	r2,zero,10214 <alt_alarm_start+0x12c>
  {
    if (alarm)
   10118:	e0bffc17 	ldw	r2,-16(fp)
   1011c:	10003b26 	beq	r2,zero,1020c <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   10120:	e0bffc17 	ldw	r2,-16(fp)
   10124:	e0fffe17 	ldw	r3,-8(fp)
   10128:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   1012c:	e0bffc17 	ldw	r2,-16(fp)
   10130:	e0ffff17 	ldw	r3,-4(fp)
   10134:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10138:	0005303a 	rdctl	r2,status
   1013c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10140:	e0fff817 	ldw	r3,-32(fp)
   10144:	00bfff84 	movi	r2,-2
   10148:	1884703a 	and	r2,r3,r2
   1014c:	1001703a 	wrctl	status,r2
  
  return context;
   10150:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   10154:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   10158:	00800074 	movhi	r2,1
   1015c:	10953404 	addi	r2,r2,21712
   10160:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   10164:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   10168:	e0fffd17 	ldw	r3,-12(fp)
   1016c:	e0bff617 	ldw	r2,-40(fp)
   10170:	1885883a 	add	r2,r3,r2
   10174:	10c00044 	addi	r3,r2,1
   10178:	e0bffc17 	ldw	r2,-16(fp)
   1017c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   10180:	e0bffc17 	ldw	r2,-16(fp)
   10184:	10c00217 	ldw	r3,8(r2)
   10188:	e0bff617 	ldw	r2,-40(fp)
   1018c:	1880042e 	bgeu	r3,r2,101a0 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   10190:	e0bffc17 	ldw	r2,-16(fp)
   10194:	00c00044 	movi	r3,1
   10198:	10c00405 	stb	r3,16(r2)
   1019c:	00000206 	br	101a8 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   101a0:	e0bffc17 	ldw	r2,-16(fp)
   101a4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   101a8:	e0fffc17 	ldw	r3,-16(fp)
   101ac:	00800074 	movhi	r2,1
   101b0:	108e6404 	addi	r2,r2,14736
   101b4:	e0bff915 	stw	r2,-28(fp)
   101b8:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   101bc:	e0bffa17 	ldw	r2,-24(fp)
   101c0:	e0fff917 	ldw	r3,-28(fp)
   101c4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   101c8:	e0bff917 	ldw	r2,-28(fp)
   101cc:	10c00017 	ldw	r3,0(r2)
   101d0:	e0bffa17 	ldw	r2,-24(fp)
   101d4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   101d8:	e0bff917 	ldw	r2,-28(fp)
   101dc:	10800017 	ldw	r2,0(r2)
   101e0:	e0fffa17 	ldw	r3,-24(fp)
   101e4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   101e8:	e0bff917 	ldw	r2,-28(fp)
   101ec:	e0fffa17 	ldw	r3,-24(fp)
   101f0:	10c00015 	stw	r3,0(r2)
   101f4:	e0bff717 	ldw	r2,-36(fp)
   101f8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   101fc:	e0bffb17 	ldw	r2,-20(fp)
   10200:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   10204:	0005883a 	mov	r2,zero
   10208:	00000306 	br	10218 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   1020c:	00bffa84 	movi	r2,-22
   10210:	00000106 	br	10218 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   10214:	00bfde84 	movi	r2,-134
  }
}
   10218:	e037883a 	mov	sp,fp
   1021c:	df000017 	ldw	fp,0(sp)
   10220:	dec00104 	addi	sp,sp,4
   10224:	f800283a 	ret

00010228 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   10228:	defffa04 	addi	sp,sp,-24
   1022c:	dfc00515 	stw	ra,20(sp)
   10230:	df000415 	stw	fp,16(sp)
   10234:	df000404 	addi	fp,sp,16
   10238:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   1023c:	00800244 	movi	r2,9
   10240:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   10244:	e13ffd17 	ldw	r4,-12(fp)
   10248:	014003f4 	movhi	r5,15
   1024c:	29509004 	addi	r5,r5,16960
   10250:	000c3a00 	call	c3a0 <__mulsi3>
   10254:	0100bef4 	movhi	r4,763
   10258:	213c2004 	addi	r4,r4,-3968
   1025c:	100b883a 	mov	r5,r2
   10260:	000c3900 	call	c390 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   10264:	01200034 	movhi	r4,32768
   10268:	213fffc4 	addi	r4,r4,-1
   1026c:	100b883a 	mov	r5,r2
   10270:	000c3900 	call	c390 <__udivsi3>
   10274:	e13fff17 	ldw	r4,-4(fp)
   10278:	100b883a 	mov	r5,r2
   1027c:	000c3900 	call	c390 <__udivsi3>
   10280:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   10284:	e0bffe17 	ldw	r2,-8(fp)
   10288:	10002a26 	beq	r2,zero,10334 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   1028c:	e03ffc15 	stw	zero,-16(fp)
   10290:	00001706 	br	102f0 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   10294:	00a00034 	movhi	r2,32768
   10298:	10bfffc4 	addi	r2,r2,-1
   1029c:	10bfffc4 	addi	r2,r2,-1
   102a0:	103ffe1e 	bne	r2,zero,1029c <__alt_data_end+0xfffbab6c>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   102a4:	e13ffd17 	ldw	r4,-12(fp)
   102a8:	014003f4 	movhi	r5,15
   102ac:	29509004 	addi	r5,r5,16960
   102b0:	000c3a00 	call	c3a0 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   102b4:	0100bef4 	movhi	r4,763
   102b8:	213c2004 	addi	r4,r4,-3968
   102bc:	100b883a 	mov	r5,r2
   102c0:	000c3900 	call	c390 <__udivsi3>
   102c4:	01200034 	movhi	r4,32768
   102c8:	213fffc4 	addi	r4,r4,-1
   102cc:	100b883a 	mov	r5,r2
   102d0:	000c3900 	call	c390 <__udivsi3>
   102d4:	1007883a 	mov	r3,r2
   102d8:	e0bfff17 	ldw	r2,-4(fp)
   102dc:	10c5c83a 	sub	r2,r2,r3
   102e0:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   102e4:	e0bffc17 	ldw	r2,-16(fp)
   102e8:	10800044 	addi	r2,r2,1
   102ec:	e0bffc15 	stw	r2,-16(fp)
   102f0:	e0fffc17 	ldw	r3,-16(fp)
   102f4:	e0bffe17 	ldw	r2,-8(fp)
   102f8:	18bfe616 	blt	r3,r2,10294 <__alt_data_end+0xfffbab64>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   102fc:	e13ffd17 	ldw	r4,-12(fp)
   10300:	014003f4 	movhi	r5,15
   10304:	29509004 	addi	r5,r5,16960
   10308:	000c3a00 	call	c3a0 <__mulsi3>
   1030c:	0100bef4 	movhi	r4,763
   10310:	213c2004 	addi	r4,r4,-3968
   10314:	100b883a 	mov	r5,r2
   10318:	000c3900 	call	c390 <__udivsi3>
   1031c:	1009883a 	mov	r4,r2
   10320:	e17fff17 	ldw	r5,-4(fp)
   10324:	000c3a00 	call	c3a0 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   10328:	10bfffc4 	addi	r2,r2,-1
   1032c:	103ffe1e 	bne	r2,zero,10328 <__alt_data_end+0xfffbabf8>
   10330:	00000d06 	br	10368 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   10334:	e13ffd17 	ldw	r4,-12(fp)
   10338:	014003f4 	movhi	r5,15
   1033c:	29509004 	addi	r5,r5,16960
   10340:	000c3a00 	call	c3a0 <__mulsi3>
   10344:	0100bef4 	movhi	r4,763
   10348:	213c2004 	addi	r4,r4,-3968
   1034c:	100b883a 	mov	r5,r2
   10350:	000c3900 	call	c390 <__udivsi3>
   10354:	1009883a 	mov	r4,r2
   10358:	e17fff17 	ldw	r5,-4(fp)
   1035c:	000c3a00 	call	c3a0 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   10360:	10bfffc4 	addi	r2,r2,-1
   10364:	00bffe16 	blt	zero,r2,10360 <__alt_data_end+0xfffbac30>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   10368:	0005883a 	mov	r2,zero
}
   1036c:	e037883a 	mov	sp,fp
   10370:	dfc00117 	ldw	ra,4(sp)
   10374:	df000017 	ldw	fp,0(sp)
   10378:	dec00204 	addi	sp,sp,8
   1037c:	f800283a 	ret

00010380 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   10380:	deffff04 	addi	sp,sp,-4
   10384:	df000015 	stw	fp,0(sp)
   10388:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   1038c:	e037883a 	mov	sp,fp
   10390:	df000017 	ldw	fp,0(sp)
   10394:	dec00104 	addi	sp,sp,4
   10398:	f800283a 	ret

0001039c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1039c:	defffe04 	addi	sp,sp,-8
   103a0:	dfc00115 	stw	ra,4(sp)
   103a4:	df000015 	stw	fp,0(sp)
   103a8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   103ac:	00800074 	movhi	r2,1
   103b0:	108e6104 	addi	r2,r2,14724
   103b4:	10800017 	ldw	r2,0(r2)
   103b8:	10000526 	beq	r2,zero,103d0 <alt_get_errno+0x34>
   103bc:	00800074 	movhi	r2,1
   103c0:	108e6104 	addi	r2,r2,14724
   103c4:	10800017 	ldw	r2,0(r2)
   103c8:	103ee83a 	callr	r2
   103cc:	00000206 	br	103d8 <alt_get_errno+0x3c>
   103d0:	00800074 	movhi	r2,1
   103d4:	10952e04 	addi	r2,r2,21688
}
   103d8:	e037883a 	mov	sp,fp
   103dc:	dfc00117 	ldw	ra,4(sp)
   103e0:	df000017 	ldw	fp,0(sp)
   103e4:	dec00204 	addi	sp,sp,8
   103e8:	f800283a 	ret

000103ec <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   103ec:	defffa04 	addi	sp,sp,-24
   103f0:	dfc00515 	stw	ra,20(sp)
   103f4:	df000415 	stw	fp,16(sp)
   103f8:	df000404 	addi	fp,sp,16
   103fc:	e13ffe15 	stw	r4,-8(fp)
   10400:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   10404:	e0bffe17 	ldw	r2,-8(fp)
   10408:	10000326 	beq	r2,zero,10418 <alt_dev_llist_insert+0x2c>
   1040c:	e0bffe17 	ldw	r2,-8(fp)
   10410:	10800217 	ldw	r2,8(r2)
   10414:	1000061e 	bne	r2,zero,10430 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   10418:	001039c0 	call	1039c <alt_get_errno>
   1041c:	1007883a 	mov	r3,r2
   10420:	00800584 	movi	r2,22
   10424:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   10428:	00bffa84 	movi	r2,-22
   1042c:	00001306 	br	1047c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   10430:	e0bffe17 	ldw	r2,-8(fp)
   10434:	e0ffff17 	ldw	r3,-4(fp)
   10438:	e0fffc15 	stw	r3,-16(fp)
   1043c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   10440:	e0bffd17 	ldw	r2,-12(fp)
   10444:	e0fffc17 	ldw	r3,-16(fp)
   10448:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   1044c:	e0bffc17 	ldw	r2,-16(fp)
   10450:	10c00017 	ldw	r3,0(r2)
   10454:	e0bffd17 	ldw	r2,-12(fp)
   10458:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1045c:	e0bffc17 	ldw	r2,-16(fp)
   10460:	10800017 	ldw	r2,0(r2)
   10464:	e0fffd17 	ldw	r3,-12(fp)
   10468:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   1046c:	e0bffc17 	ldw	r2,-16(fp)
   10470:	e0fffd17 	ldw	r3,-12(fp)
   10474:	10c00015 	stw	r3,0(r2)

  return 0;  
   10478:	0005883a 	mov	r2,zero
}
   1047c:	e037883a 	mov	sp,fp
   10480:	dfc00117 	ldw	ra,4(sp)
   10484:	df000017 	ldw	fp,0(sp)
   10488:	dec00204 	addi	sp,sp,8
   1048c:	f800283a 	ret

00010490 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   10490:	defffd04 	addi	sp,sp,-12
   10494:	dfc00215 	stw	ra,8(sp)
   10498:	df000115 	stw	fp,4(sp)
   1049c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   104a0:	00800074 	movhi	r2,1
   104a4:	10852804 	addi	r2,r2,5280
   104a8:	e0bfff15 	stw	r2,-4(fp)
   104ac:	00000606 	br	104c8 <_do_ctors+0x38>
        (*ctor) (); 
   104b0:	e0bfff17 	ldw	r2,-4(fp)
   104b4:	10800017 	ldw	r2,0(r2)
   104b8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   104bc:	e0bfff17 	ldw	r2,-4(fp)
   104c0:	10bfff04 	addi	r2,r2,-4
   104c4:	e0bfff15 	stw	r2,-4(fp)
   104c8:	e0ffff17 	ldw	r3,-4(fp)
   104cc:	00800074 	movhi	r2,1
   104d0:	10852904 	addi	r2,r2,5284
   104d4:	18bff62e 	bgeu	r3,r2,104b0 <__alt_data_end+0xfffbad80>
        (*ctor) (); 
}
   104d8:	e037883a 	mov	sp,fp
   104dc:	dfc00117 	ldw	ra,4(sp)
   104e0:	df000017 	ldw	fp,0(sp)
   104e4:	dec00204 	addi	sp,sp,8
   104e8:	f800283a 	ret

000104ec <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   104ec:	defffd04 	addi	sp,sp,-12
   104f0:	dfc00215 	stw	ra,8(sp)
   104f4:	df000115 	stw	fp,4(sp)
   104f8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   104fc:	00800074 	movhi	r2,1
   10500:	10852804 	addi	r2,r2,5280
   10504:	e0bfff15 	stw	r2,-4(fp)
   10508:	00000606 	br	10524 <_do_dtors+0x38>
        (*dtor) (); 
   1050c:	e0bfff17 	ldw	r2,-4(fp)
   10510:	10800017 	ldw	r2,0(r2)
   10514:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   10518:	e0bfff17 	ldw	r2,-4(fp)
   1051c:	10bfff04 	addi	r2,r2,-4
   10520:	e0bfff15 	stw	r2,-4(fp)
   10524:	e0ffff17 	ldw	r3,-4(fp)
   10528:	00800074 	movhi	r2,1
   1052c:	10852904 	addi	r2,r2,5284
   10530:	18bff62e 	bgeu	r3,r2,1050c <__alt_data_end+0xfffbaddc>
        (*dtor) (); 
}
   10534:	e037883a 	mov	sp,fp
   10538:	dfc00117 	ldw	ra,4(sp)
   1053c:	df000017 	ldw	fp,0(sp)
   10540:	dec00204 	addi	sp,sp,8
   10544:	f800283a 	ret

00010548 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   10548:	deffff04 	addi	sp,sp,-4
   1054c:	df000015 	stw	fp,0(sp)
   10550:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   10554:	e037883a 	mov	sp,fp
   10558:	df000017 	ldw	fp,0(sp)
   1055c:	dec00104 	addi	sp,sp,4
   10560:	f800283a 	ret

00010564 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   10564:	defff904 	addi	sp,sp,-28
   10568:	dfc00615 	stw	ra,24(sp)
   1056c:	df000515 	stw	fp,20(sp)
   10570:	df000504 	addi	fp,sp,20
   10574:	e13ffc15 	stw	r4,-16(fp)
   10578:	e17ffd15 	stw	r5,-12(fp)
   1057c:	e1bffe15 	stw	r6,-8(fp)
   10580:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   10584:	e0800217 	ldw	r2,8(fp)
   10588:	d8800015 	stw	r2,0(sp)
   1058c:	e13ffc17 	ldw	r4,-16(fp)
   10590:	e17ffd17 	ldw	r5,-12(fp)
   10594:	e1bffe17 	ldw	r6,-8(fp)
   10598:	e1ffff17 	ldw	r7,-4(fp)
   1059c:	00107440 	call	10744 <alt_iic_isr_register>
}  
   105a0:	e037883a 	mov	sp,fp
   105a4:	dfc00117 	ldw	ra,4(sp)
   105a8:	df000017 	ldw	fp,0(sp)
   105ac:	dec00204 	addi	sp,sp,8
   105b0:	f800283a 	ret

000105b4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   105b4:	defff904 	addi	sp,sp,-28
   105b8:	df000615 	stw	fp,24(sp)
   105bc:	df000604 	addi	fp,sp,24
   105c0:	e13ffe15 	stw	r4,-8(fp)
   105c4:	e17fff15 	stw	r5,-4(fp)
   105c8:	e0bfff17 	ldw	r2,-4(fp)
   105cc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   105d0:	0005303a 	rdctl	r2,status
   105d4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   105d8:	e0fffb17 	ldw	r3,-20(fp)
   105dc:	00bfff84 	movi	r2,-2
   105e0:	1884703a 	and	r2,r3,r2
   105e4:	1001703a 	wrctl	status,r2
  
  return context;
   105e8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   105ec:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   105f0:	e0bffa17 	ldw	r2,-24(fp)
   105f4:	00c00044 	movi	r3,1
   105f8:	1884983a 	sll	r2,r3,r2
   105fc:	1007883a 	mov	r3,r2
   10600:	00800074 	movhi	r2,1
   10604:	10953204 	addi	r2,r2,21704
   10608:	10800017 	ldw	r2,0(r2)
   1060c:	1886b03a 	or	r3,r3,r2
   10610:	00800074 	movhi	r2,1
   10614:	10953204 	addi	r2,r2,21704
   10618:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1061c:	00800074 	movhi	r2,1
   10620:	10953204 	addi	r2,r2,21704
   10624:	10800017 	ldw	r2,0(r2)
   10628:	100170fa 	wrctl	ienable,r2
   1062c:	e0bffc17 	ldw	r2,-16(fp)
   10630:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10634:	e0bffd17 	ldw	r2,-12(fp)
   10638:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   1063c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   10640:	0001883a 	nop
}
   10644:	e037883a 	mov	sp,fp
   10648:	df000017 	ldw	fp,0(sp)
   1064c:	dec00104 	addi	sp,sp,4
   10650:	f800283a 	ret

00010654 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   10654:	defff904 	addi	sp,sp,-28
   10658:	df000615 	stw	fp,24(sp)
   1065c:	df000604 	addi	fp,sp,24
   10660:	e13ffe15 	stw	r4,-8(fp)
   10664:	e17fff15 	stw	r5,-4(fp)
   10668:	e0bfff17 	ldw	r2,-4(fp)
   1066c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10670:	0005303a 	rdctl	r2,status
   10674:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10678:	e0fffb17 	ldw	r3,-20(fp)
   1067c:	00bfff84 	movi	r2,-2
   10680:	1884703a 	and	r2,r3,r2
   10684:	1001703a 	wrctl	status,r2
  
  return context;
   10688:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1068c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   10690:	e0bffa17 	ldw	r2,-24(fp)
   10694:	00c00044 	movi	r3,1
   10698:	1884983a 	sll	r2,r3,r2
   1069c:	0084303a 	nor	r2,zero,r2
   106a0:	1007883a 	mov	r3,r2
   106a4:	00800074 	movhi	r2,1
   106a8:	10953204 	addi	r2,r2,21704
   106ac:	10800017 	ldw	r2,0(r2)
   106b0:	1886703a 	and	r3,r3,r2
   106b4:	00800074 	movhi	r2,1
   106b8:	10953204 	addi	r2,r2,21704
   106bc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   106c0:	00800074 	movhi	r2,1
   106c4:	10953204 	addi	r2,r2,21704
   106c8:	10800017 	ldw	r2,0(r2)
   106cc:	100170fa 	wrctl	ienable,r2
   106d0:	e0bffc17 	ldw	r2,-16(fp)
   106d4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   106d8:	e0bffd17 	ldw	r2,-12(fp)
   106dc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   106e0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   106e4:	0001883a 	nop
}
   106e8:	e037883a 	mov	sp,fp
   106ec:	df000017 	ldw	fp,0(sp)
   106f0:	dec00104 	addi	sp,sp,4
   106f4:	f800283a 	ret

000106f8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   106f8:	defffc04 	addi	sp,sp,-16
   106fc:	df000315 	stw	fp,12(sp)
   10700:	df000304 	addi	fp,sp,12
   10704:	e13ffe15 	stw	r4,-8(fp)
   10708:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   1070c:	000530fa 	rdctl	r2,ienable
   10710:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   10714:	e0bfff17 	ldw	r2,-4(fp)
   10718:	00c00044 	movi	r3,1
   1071c:	1884983a 	sll	r2,r3,r2
   10720:	1007883a 	mov	r3,r2
   10724:	e0bffd17 	ldw	r2,-12(fp)
   10728:	1884703a 	and	r2,r3,r2
   1072c:	1004c03a 	cmpne	r2,r2,zero
   10730:	10803fcc 	andi	r2,r2,255
}
   10734:	e037883a 	mov	sp,fp
   10738:	df000017 	ldw	fp,0(sp)
   1073c:	dec00104 	addi	sp,sp,4
   10740:	f800283a 	ret

00010744 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   10744:	defff504 	addi	sp,sp,-44
   10748:	dfc00a15 	stw	ra,40(sp)
   1074c:	df000915 	stw	fp,36(sp)
   10750:	df000904 	addi	fp,sp,36
   10754:	e13ffc15 	stw	r4,-16(fp)
   10758:	e17ffd15 	stw	r5,-12(fp)
   1075c:	e1bffe15 	stw	r6,-8(fp)
   10760:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   10764:	00bffa84 	movi	r2,-22
   10768:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   1076c:	e0bffd17 	ldw	r2,-12(fp)
   10770:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   10774:	e0bff817 	ldw	r2,-32(fp)
   10778:	10800808 	cmpgei	r2,r2,32
   1077c:	1000271e 	bne	r2,zero,1081c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10780:	0005303a 	rdctl	r2,status
   10784:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10788:	e0fffa17 	ldw	r3,-24(fp)
   1078c:	00bfff84 	movi	r2,-2
   10790:	1884703a 	and	r2,r3,r2
   10794:	1001703a 	wrctl	status,r2
  
  return context;
   10798:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   1079c:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   107a0:	00800074 	movhi	r2,1
   107a4:	10954004 	addi	r2,r2,21760
   107a8:	e0fff817 	ldw	r3,-32(fp)
   107ac:	180690fa 	slli	r3,r3,3
   107b0:	10c5883a 	add	r2,r2,r3
   107b4:	e0fffe17 	ldw	r3,-8(fp)
   107b8:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   107bc:	00800074 	movhi	r2,1
   107c0:	10954004 	addi	r2,r2,21760
   107c4:	e0fff817 	ldw	r3,-32(fp)
   107c8:	180690fa 	slli	r3,r3,3
   107cc:	10c5883a 	add	r2,r2,r3
   107d0:	10800104 	addi	r2,r2,4
   107d4:	e0ffff17 	ldw	r3,-4(fp)
   107d8:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   107dc:	e0bffe17 	ldw	r2,-8(fp)
   107e0:	10000526 	beq	r2,zero,107f8 <alt_iic_isr_register+0xb4>
   107e4:	e0bff817 	ldw	r2,-32(fp)
   107e8:	e13ffc17 	ldw	r4,-16(fp)
   107ec:	100b883a 	mov	r5,r2
   107f0:	00105b40 	call	105b4 <alt_ic_irq_enable>
   107f4:	00000406 	br	10808 <alt_iic_isr_register+0xc4>
   107f8:	e0bff817 	ldw	r2,-32(fp)
   107fc:	e13ffc17 	ldw	r4,-16(fp)
   10800:	100b883a 	mov	r5,r2
   10804:	00106540 	call	10654 <alt_ic_irq_disable>
   10808:	e0bff715 	stw	r2,-36(fp)
   1080c:	e0bff917 	ldw	r2,-28(fp)
   10810:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10814:	e0bffb17 	ldw	r2,-20(fp)
   10818:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   1081c:	e0bff717 	ldw	r2,-36(fp)
}
   10820:	e037883a 	mov	sp,fp
   10824:	dfc00117 	ldw	ra,4(sp)
   10828:	df000017 	ldw	fp,0(sp)
   1082c:	dec00204 	addi	sp,sp,8
   10830:	f800283a 	ret

00010834 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   10834:	defff804 	addi	sp,sp,-32
   10838:	dfc00715 	stw	ra,28(sp)
   1083c:	df000615 	stw	fp,24(sp)
   10840:	dc000515 	stw	r16,20(sp)
   10844:	df000604 	addi	fp,sp,24
   10848:	e13ffb15 	stw	r4,-20(fp)
   1084c:	e17ffc15 	stw	r5,-16(fp)
   10850:	e1bffd15 	stw	r6,-12(fp)
   10854:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   10858:	e13ffc17 	ldw	r4,-16(fp)
   1085c:	e17ffd17 	ldw	r5,-12(fp)
   10860:	e1bffe17 	ldw	r6,-8(fp)
   10864:	0010ad00 	call	10ad0 <open>
   10868:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   1086c:	e0bffa17 	ldw	r2,-24(fp)
   10870:	10002216 	blt	r2,zero,108fc <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   10874:	04000074 	movhi	r16,1
   10878:	8409de04 	addi	r16,r16,10104
   1087c:	e0bffa17 	ldw	r2,-24(fp)
   10880:	1009883a 	mov	r4,r2
   10884:	01400304 	movi	r5,12
   10888:	000c3a00 	call	c3a0 <__mulsi3>
   1088c:	8085883a 	add	r2,r16,r2
   10890:	10c00017 	ldw	r3,0(r2)
   10894:	e0bffb17 	ldw	r2,-20(fp)
   10898:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   1089c:	04000074 	movhi	r16,1
   108a0:	8409de04 	addi	r16,r16,10104
   108a4:	e0bffa17 	ldw	r2,-24(fp)
   108a8:	1009883a 	mov	r4,r2
   108ac:	01400304 	movi	r5,12
   108b0:	000c3a00 	call	c3a0 <__mulsi3>
   108b4:	8085883a 	add	r2,r16,r2
   108b8:	10800104 	addi	r2,r2,4
   108bc:	10c00017 	ldw	r3,0(r2)
   108c0:	e0bffb17 	ldw	r2,-20(fp)
   108c4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   108c8:	04000074 	movhi	r16,1
   108cc:	8409de04 	addi	r16,r16,10104
   108d0:	e0bffa17 	ldw	r2,-24(fp)
   108d4:	1009883a 	mov	r4,r2
   108d8:	01400304 	movi	r5,12
   108dc:	000c3a00 	call	c3a0 <__mulsi3>
   108e0:	8085883a 	add	r2,r16,r2
   108e4:	10800204 	addi	r2,r2,8
   108e8:	10c00017 	ldw	r3,0(r2)
   108ec:	e0bffb17 	ldw	r2,-20(fp)
   108f0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   108f4:	e13ffa17 	ldw	r4,-24(fp)
   108f8:	000f3380 	call	f338 <alt_release_fd>
  }
} 
   108fc:	e6ffff04 	addi	sp,fp,-4
   10900:	dfc00217 	ldw	ra,8(sp)
   10904:	df000117 	ldw	fp,4(sp)
   10908:	dc000017 	ldw	r16,0(sp)
   1090c:	dec00304 	addi	sp,sp,12
   10910:	f800283a 	ret

00010914 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   10914:	defffb04 	addi	sp,sp,-20
   10918:	dfc00415 	stw	ra,16(sp)
   1091c:	df000315 	stw	fp,12(sp)
   10920:	df000304 	addi	fp,sp,12
   10924:	e13ffd15 	stw	r4,-12(fp)
   10928:	e17ffe15 	stw	r5,-8(fp)
   1092c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   10930:	01000074 	movhi	r4,1
   10934:	2109e104 	addi	r4,r4,10116
   10938:	e17ffd17 	ldw	r5,-12(fp)
   1093c:	01800044 	movi	r6,1
   10940:	01c07fc4 	movi	r7,511
   10944:	00108340 	call	10834 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   10948:	01000074 	movhi	r4,1
   1094c:	2109de04 	addi	r4,r4,10104
   10950:	e17ffe17 	ldw	r5,-8(fp)
   10954:	000d883a 	mov	r6,zero
   10958:	01c07fc4 	movi	r7,511
   1095c:	00108340 	call	10834 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   10960:	01000074 	movhi	r4,1
   10964:	2109e404 	addi	r4,r4,10128
   10968:	e17fff17 	ldw	r5,-4(fp)
   1096c:	01800044 	movi	r6,1
   10970:	01c07fc4 	movi	r7,511
   10974:	00108340 	call	10834 <alt_open_fd>
}  
   10978:	e037883a 	mov	sp,fp
   1097c:	dfc00117 	ldw	ra,4(sp)
   10980:	df000017 	ldw	fp,0(sp)
   10984:	dec00204 	addi	sp,sp,8
   10988:	f800283a 	ret

0001098c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1098c:	defffe04 	addi	sp,sp,-8
   10990:	dfc00115 	stw	ra,4(sp)
   10994:	df000015 	stw	fp,0(sp)
   10998:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1099c:	00800074 	movhi	r2,1
   109a0:	108e6104 	addi	r2,r2,14724
   109a4:	10800017 	ldw	r2,0(r2)
   109a8:	10000526 	beq	r2,zero,109c0 <alt_get_errno+0x34>
   109ac:	00800074 	movhi	r2,1
   109b0:	108e6104 	addi	r2,r2,14724
   109b4:	10800017 	ldw	r2,0(r2)
   109b8:	103ee83a 	callr	r2
   109bc:	00000206 	br	109c8 <alt_get_errno+0x3c>
   109c0:	00800074 	movhi	r2,1
   109c4:	10952e04 	addi	r2,r2,21688
}
   109c8:	e037883a 	mov	sp,fp
   109cc:	dfc00117 	ldw	ra,4(sp)
   109d0:	df000017 	ldw	fp,0(sp)
   109d4:	dec00204 	addi	sp,sp,8
   109d8:	f800283a 	ret

000109dc <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   109dc:	defffb04 	addi	sp,sp,-20
   109e0:	dfc00415 	stw	ra,16(sp)
   109e4:	df000315 	stw	fp,12(sp)
   109e8:	dc000215 	stw	r16,8(sp)
   109ec:	df000304 	addi	fp,sp,12
   109f0:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   109f4:	e0bffe17 	ldw	r2,-8(fp)
   109f8:	10800217 	ldw	r2,8(r2)
   109fc:	10d00034 	orhi	r3,r2,16384
   10a00:	e0bffe17 	ldw	r2,-8(fp)
   10a04:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   10a08:	e03ffd15 	stw	zero,-12(fp)
   10a0c:	00002306 	br	10a9c <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   10a10:	04000074 	movhi	r16,1
   10a14:	8409de04 	addi	r16,r16,10104
   10a18:	e0bffd17 	ldw	r2,-12(fp)
   10a1c:	1009883a 	mov	r4,r2
   10a20:	01400304 	movi	r5,12
   10a24:	000c3a00 	call	c3a0 <__mulsi3>
   10a28:	8085883a 	add	r2,r16,r2
   10a2c:	10c00017 	ldw	r3,0(r2)
   10a30:	e0bffe17 	ldw	r2,-8(fp)
   10a34:	10800017 	ldw	r2,0(r2)
   10a38:	1880151e 	bne	r3,r2,10a90 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   10a3c:	04000074 	movhi	r16,1
   10a40:	8409de04 	addi	r16,r16,10104
   10a44:	e0bffd17 	ldw	r2,-12(fp)
   10a48:	1009883a 	mov	r4,r2
   10a4c:	01400304 	movi	r5,12
   10a50:	000c3a00 	call	c3a0 <__mulsi3>
   10a54:	8085883a 	add	r2,r16,r2
   10a58:	10800204 	addi	r2,r2,8
   10a5c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   10a60:	10000b0e 	bge	r2,zero,10a90 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   10a64:	e13ffd17 	ldw	r4,-12(fp)
   10a68:	01400304 	movi	r5,12
   10a6c:	000c3a00 	call	c3a0 <__mulsi3>
   10a70:	1007883a 	mov	r3,r2
   10a74:	00800074 	movhi	r2,1
   10a78:	1089de04 	addi	r2,r2,10104
   10a7c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   10a80:	e0bffe17 	ldw	r2,-8(fp)
   10a84:	18800226 	beq	r3,r2,10a90 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   10a88:	00bffcc4 	movi	r2,-13
   10a8c:	00000a06 	br	10ab8 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   10a90:	e0bffd17 	ldw	r2,-12(fp)
   10a94:	10800044 	addi	r2,r2,1
   10a98:	e0bffd15 	stw	r2,-12(fp)
   10a9c:	00800074 	movhi	r2,1
   10aa0:	108e6004 	addi	r2,r2,14720
   10aa4:	10800017 	ldw	r2,0(r2)
   10aa8:	1007883a 	mov	r3,r2
   10aac:	e0bffd17 	ldw	r2,-12(fp)
   10ab0:	18bfd72e 	bgeu	r3,r2,10a10 <__alt_data_end+0xfffbb2e0>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   10ab4:	0005883a 	mov	r2,zero
}
   10ab8:	e6ffff04 	addi	sp,fp,-4
   10abc:	dfc00217 	ldw	ra,8(sp)
   10ac0:	df000117 	ldw	fp,4(sp)
   10ac4:	dc000017 	ldw	r16,0(sp)
   10ac8:	dec00304 	addi	sp,sp,12
   10acc:	f800283a 	ret

00010ad0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   10ad0:	defff604 	addi	sp,sp,-40
   10ad4:	dfc00915 	stw	ra,36(sp)
   10ad8:	df000815 	stw	fp,32(sp)
   10adc:	df000804 	addi	fp,sp,32
   10ae0:	e13ffd15 	stw	r4,-12(fp)
   10ae4:	e17ffe15 	stw	r5,-8(fp)
   10ae8:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   10aec:	00bfffc4 	movi	r2,-1
   10af0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   10af4:	00bffb44 	movi	r2,-19
   10af8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   10afc:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   10b00:	e13ffd17 	ldw	r4,-12(fp)
   10b04:	01400074 	movhi	r5,1
   10b08:	294e5e04 	addi	r5,r5,14712
   10b0c:	0010dec0 	call	10dec <alt_find_dev>
   10b10:	e0bff815 	stw	r2,-32(fp)
   10b14:	e0bff817 	ldw	r2,-32(fp)
   10b18:	1000051e 	bne	r2,zero,10b30 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   10b1c:	e13ffd17 	ldw	r4,-12(fp)
   10b20:	0010e7c0 	call	10e7c <alt_find_file>
   10b24:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   10b28:	00800044 	movi	r2,1
   10b2c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   10b30:	e0bff817 	ldw	r2,-32(fp)
   10b34:	10002b26 	beq	r2,zero,10be4 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
   10b38:	e13ff817 	ldw	r4,-32(fp)
   10b3c:	0010f900 	call	10f90 <alt_get_fd>
   10b40:	e0bff915 	stw	r2,-28(fp)
   10b44:	e0bff917 	ldw	r2,-28(fp)
   10b48:	1000030e 	bge	r2,zero,10b58 <open+0x88>
    {
      status = index;
   10b4c:	e0bff917 	ldw	r2,-28(fp)
   10b50:	e0bffa15 	stw	r2,-24(fp)
   10b54:	00002506 	br	10bec <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
   10b58:	e13ff917 	ldw	r4,-28(fp)
   10b5c:	01400304 	movi	r5,12
   10b60:	000c3a00 	call	c3a0 <__mulsi3>
   10b64:	1007883a 	mov	r3,r2
   10b68:	00800074 	movhi	r2,1
   10b6c:	1089de04 	addi	r2,r2,10104
   10b70:	1885883a 	add	r2,r3,r2
   10b74:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   10b78:	e0fffe17 	ldw	r3,-8(fp)
   10b7c:	00900034 	movhi	r2,16384
   10b80:	10bfffc4 	addi	r2,r2,-1
   10b84:	1886703a 	and	r3,r3,r2
   10b88:	e0bffc17 	ldw	r2,-16(fp)
   10b8c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   10b90:	e0bffb17 	ldw	r2,-20(fp)
   10b94:	1000051e 	bne	r2,zero,10bac <open+0xdc>
   10b98:	e13ffc17 	ldw	r4,-16(fp)
   10b9c:	00109dc0 	call	109dc <alt_file_locked>
   10ba0:	e0bffa15 	stw	r2,-24(fp)
   10ba4:	e0bffa17 	ldw	r2,-24(fp)
   10ba8:	10001016 	blt	r2,zero,10bec <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   10bac:	e0bff817 	ldw	r2,-32(fp)
   10bb0:	10800317 	ldw	r2,12(r2)
   10bb4:	10000826 	beq	r2,zero,10bd8 <open+0x108>
   10bb8:	e0bff817 	ldw	r2,-32(fp)
   10bbc:	10800317 	ldw	r2,12(r2)
   10bc0:	e13ffc17 	ldw	r4,-16(fp)
   10bc4:	e17ffd17 	ldw	r5,-12(fp)
   10bc8:	e1bffe17 	ldw	r6,-8(fp)
   10bcc:	e1ffff17 	ldw	r7,-4(fp)
   10bd0:	103ee83a 	callr	r2
   10bd4:	00000106 	br	10bdc <open+0x10c>
   10bd8:	0005883a 	mov	r2,zero
   10bdc:	e0bffa15 	stw	r2,-24(fp)
   10be0:	00000206 	br	10bec <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   10be4:	00bffb44 	movi	r2,-19
   10be8:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   10bec:	e0bffa17 	ldw	r2,-24(fp)
   10bf0:	1000090e 	bge	r2,zero,10c18 <open+0x148>
  {
    alt_release_fd (index);  
   10bf4:	e13ff917 	ldw	r4,-28(fp)
   10bf8:	000f3380 	call	f338 <alt_release_fd>
    ALT_ERRNO = -status;
   10bfc:	001098c0 	call	1098c <alt_get_errno>
   10c00:	1007883a 	mov	r3,r2
   10c04:	e0bffa17 	ldw	r2,-24(fp)
   10c08:	0085c83a 	sub	r2,zero,r2
   10c0c:	18800015 	stw	r2,0(r3)
    return -1;
   10c10:	00bfffc4 	movi	r2,-1
   10c14:	00000106 	br	10c1c <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
   10c18:	e0bff917 	ldw	r2,-28(fp)
}
   10c1c:	e037883a 	mov	sp,fp
   10c20:	dfc00117 	ldw	ra,4(sp)
   10c24:	df000017 	ldw	fp,0(sp)
   10c28:	dec00204 	addi	sp,sp,8
   10c2c:	f800283a 	ret

00010c30 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   10c30:	defffa04 	addi	sp,sp,-24
   10c34:	df000515 	stw	fp,20(sp)
   10c38:	df000504 	addi	fp,sp,20
   10c3c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10c40:	0005303a 	rdctl	r2,status
   10c44:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10c48:	e0fffc17 	ldw	r3,-16(fp)
   10c4c:	00bfff84 	movi	r2,-2
   10c50:	1884703a 	and	r2,r3,r2
   10c54:	1001703a 	wrctl	status,r2
  
  return context;
   10c58:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   10c5c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   10c60:	e0bfff17 	ldw	r2,-4(fp)
   10c64:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   10c68:	e0bffd17 	ldw	r2,-12(fp)
   10c6c:	10800017 	ldw	r2,0(r2)
   10c70:	e0fffd17 	ldw	r3,-12(fp)
   10c74:	18c00117 	ldw	r3,4(r3)
   10c78:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   10c7c:	e0bffd17 	ldw	r2,-12(fp)
   10c80:	10800117 	ldw	r2,4(r2)
   10c84:	e0fffd17 	ldw	r3,-12(fp)
   10c88:	18c00017 	ldw	r3,0(r3)
   10c8c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   10c90:	e0bffd17 	ldw	r2,-12(fp)
   10c94:	e0fffd17 	ldw	r3,-12(fp)
   10c98:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   10c9c:	e0bffd17 	ldw	r2,-12(fp)
   10ca0:	e0fffd17 	ldw	r3,-12(fp)
   10ca4:	10c00015 	stw	r3,0(r2)
   10ca8:	e0bffb17 	ldw	r2,-20(fp)
   10cac:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10cb0:	e0bffe17 	ldw	r2,-8(fp)
   10cb4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   10cb8:	e037883a 	mov	sp,fp
   10cbc:	df000017 	ldw	fp,0(sp)
   10cc0:	dec00104 	addi	sp,sp,4
   10cc4:	f800283a 	ret

00010cc8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   10cc8:	defffb04 	addi	sp,sp,-20
   10ccc:	dfc00415 	stw	ra,16(sp)
   10cd0:	df000315 	stw	fp,12(sp)
   10cd4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   10cd8:	d0a00e17 	ldw	r2,-32712(gp)
   10cdc:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   10ce0:	d0a6de17 	ldw	r2,-25736(gp)
   10ce4:	10800044 	addi	r2,r2,1
   10ce8:	d0a6de15 	stw	r2,-25736(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   10cec:	00002e06 	br	10da8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   10cf0:	e0bffd17 	ldw	r2,-12(fp)
   10cf4:	10800017 	ldw	r2,0(r2)
   10cf8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   10cfc:	e0bffd17 	ldw	r2,-12(fp)
   10d00:	10800403 	ldbu	r2,16(r2)
   10d04:	10803fcc 	andi	r2,r2,255
   10d08:	10000426 	beq	r2,zero,10d1c <alt_tick+0x54>
   10d0c:	d0a6de17 	ldw	r2,-25736(gp)
   10d10:	1000021e 	bne	r2,zero,10d1c <alt_tick+0x54>
    {
      alarm->rollover = 0;
   10d14:	e0bffd17 	ldw	r2,-12(fp)
   10d18:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   10d1c:	e0bffd17 	ldw	r2,-12(fp)
   10d20:	10800217 	ldw	r2,8(r2)
   10d24:	d0e6de17 	ldw	r3,-25736(gp)
   10d28:	18801d36 	bltu	r3,r2,10da0 <alt_tick+0xd8>
   10d2c:	e0bffd17 	ldw	r2,-12(fp)
   10d30:	10800403 	ldbu	r2,16(r2)
   10d34:	10803fcc 	andi	r2,r2,255
   10d38:	1000191e 	bne	r2,zero,10da0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   10d3c:	e0bffd17 	ldw	r2,-12(fp)
   10d40:	10800317 	ldw	r2,12(r2)
   10d44:	e0fffd17 	ldw	r3,-12(fp)
   10d48:	18c00517 	ldw	r3,20(r3)
   10d4c:	1809883a 	mov	r4,r3
   10d50:	103ee83a 	callr	r2
   10d54:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   10d58:	e0bfff17 	ldw	r2,-4(fp)
   10d5c:	1000031e 	bne	r2,zero,10d6c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   10d60:	e13ffd17 	ldw	r4,-12(fp)
   10d64:	0010c300 	call	10c30 <alt_alarm_stop>
   10d68:	00000d06 	br	10da0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   10d6c:	e0bffd17 	ldw	r2,-12(fp)
   10d70:	10c00217 	ldw	r3,8(r2)
   10d74:	e0bfff17 	ldw	r2,-4(fp)
   10d78:	1887883a 	add	r3,r3,r2
   10d7c:	e0bffd17 	ldw	r2,-12(fp)
   10d80:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   10d84:	e0bffd17 	ldw	r2,-12(fp)
   10d88:	10c00217 	ldw	r3,8(r2)
   10d8c:	d0a6de17 	ldw	r2,-25736(gp)
   10d90:	1880032e 	bgeu	r3,r2,10da0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   10d94:	e0bffd17 	ldw	r2,-12(fp)
   10d98:	00c00044 	movi	r3,1
   10d9c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   10da0:	e0bffe17 	ldw	r2,-8(fp)
   10da4:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   10da8:	e0fffd17 	ldw	r3,-12(fp)
   10dac:	d0a00e04 	addi	r2,gp,-32712
   10db0:	18bfcf1e 	bne	r3,r2,10cf0 <__alt_data_end+0xfffbb5c0>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   10db4:	0001883a 	nop
}
   10db8:	e037883a 	mov	sp,fp
   10dbc:	dfc00117 	ldw	ra,4(sp)
   10dc0:	df000017 	ldw	fp,0(sp)
   10dc4:	dec00204 	addi	sp,sp,8
   10dc8:	f800283a 	ret

00010dcc <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   10dcc:	deffff04 	addi	sp,sp,-4
   10dd0:	df000015 	stw	fp,0(sp)
   10dd4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   10dd8:	000170fa 	wrctl	ienable,zero
}
   10ddc:	e037883a 	mov	sp,fp
   10de0:	df000017 	ldw	fp,0(sp)
   10de4:	dec00104 	addi	sp,sp,4
   10de8:	f800283a 	ret

00010dec <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   10dec:	defffa04 	addi	sp,sp,-24
   10df0:	dfc00515 	stw	ra,20(sp)
   10df4:	df000415 	stw	fp,16(sp)
   10df8:	df000404 	addi	fp,sp,16
   10dfc:	e13ffe15 	stw	r4,-8(fp)
   10e00:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   10e04:	e0bfff17 	ldw	r2,-4(fp)
   10e08:	10800017 	ldw	r2,0(r2)
   10e0c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   10e10:	e13ffe17 	ldw	r4,-8(fp)
   10e14:	00023940 	call	2394 <strlen>
   10e18:	10800044 	addi	r2,r2,1
   10e1c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   10e20:	00000d06 	br	10e58 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   10e24:	e0bffc17 	ldw	r2,-16(fp)
   10e28:	10c00217 	ldw	r3,8(r2)
   10e2c:	e0bffd17 	ldw	r2,-12(fp)
   10e30:	1809883a 	mov	r4,r3
   10e34:	e17ffe17 	ldw	r5,-8(fp)
   10e38:	100d883a 	mov	r6,r2
   10e3c:	001114c0 	call	1114c <memcmp>
   10e40:	1000021e 	bne	r2,zero,10e4c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   10e44:	e0bffc17 	ldw	r2,-16(fp)
   10e48:	00000706 	br	10e68 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   10e4c:	e0bffc17 	ldw	r2,-16(fp)
   10e50:	10800017 	ldw	r2,0(r2)
   10e54:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   10e58:	e0fffc17 	ldw	r3,-16(fp)
   10e5c:	e0bfff17 	ldw	r2,-4(fp)
   10e60:	18bff01e 	bne	r3,r2,10e24 <__alt_data_end+0xfffbb6f4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   10e64:	0005883a 	mov	r2,zero
}
   10e68:	e037883a 	mov	sp,fp
   10e6c:	dfc00117 	ldw	ra,4(sp)
   10e70:	df000017 	ldw	fp,0(sp)
   10e74:	dec00204 	addi	sp,sp,8
   10e78:	f800283a 	ret

00010e7c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   10e7c:	defffb04 	addi	sp,sp,-20
   10e80:	dfc00415 	stw	ra,16(sp)
   10e84:	df000315 	stw	fp,12(sp)
   10e88:	df000304 	addi	fp,sp,12
   10e8c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   10e90:	00800074 	movhi	r2,1
   10e94:	108e5c04 	addi	r2,r2,14704
   10e98:	10800017 	ldw	r2,0(r2)
   10e9c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   10ea0:	00003106 	br	10f68 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   10ea4:	e0bffd17 	ldw	r2,-12(fp)
   10ea8:	10800217 	ldw	r2,8(r2)
   10eac:	1009883a 	mov	r4,r2
   10eb0:	00023940 	call	2394 <strlen>
   10eb4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   10eb8:	e0bffd17 	ldw	r2,-12(fp)
   10ebc:	10c00217 	ldw	r3,8(r2)
   10ec0:	e0bffe17 	ldw	r2,-8(fp)
   10ec4:	10bfffc4 	addi	r2,r2,-1
   10ec8:	1885883a 	add	r2,r3,r2
   10ecc:	10800003 	ldbu	r2,0(r2)
   10ed0:	10803fcc 	andi	r2,r2,255
   10ed4:	1080201c 	xori	r2,r2,128
   10ed8:	10bfe004 	addi	r2,r2,-128
   10edc:	10800bd8 	cmpnei	r2,r2,47
   10ee0:	1000031e 	bne	r2,zero,10ef0 <alt_find_file+0x74>
    {
      len -= 1;
   10ee4:	e0bffe17 	ldw	r2,-8(fp)
   10ee8:	10bfffc4 	addi	r2,r2,-1
   10eec:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   10ef0:	e0bffe17 	ldw	r2,-8(fp)
   10ef4:	e0ffff17 	ldw	r3,-4(fp)
   10ef8:	1885883a 	add	r2,r3,r2
   10efc:	10800003 	ldbu	r2,0(r2)
   10f00:	10803fcc 	andi	r2,r2,255
   10f04:	1080201c 	xori	r2,r2,128
   10f08:	10bfe004 	addi	r2,r2,-128
   10f0c:	10800be0 	cmpeqi	r2,r2,47
   10f10:	1000081e 	bne	r2,zero,10f34 <alt_find_file+0xb8>
   10f14:	e0bffe17 	ldw	r2,-8(fp)
   10f18:	e0ffff17 	ldw	r3,-4(fp)
   10f1c:	1885883a 	add	r2,r3,r2
   10f20:	10800003 	ldbu	r2,0(r2)
   10f24:	10803fcc 	andi	r2,r2,255
   10f28:	1080201c 	xori	r2,r2,128
   10f2c:	10bfe004 	addi	r2,r2,-128
   10f30:	10000a1e 	bne	r2,zero,10f5c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   10f34:	e0bffd17 	ldw	r2,-12(fp)
   10f38:	10c00217 	ldw	r3,8(r2)
   10f3c:	e0bffe17 	ldw	r2,-8(fp)
   10f40:	1809883a 	mov	r4,r3
   10f44:	e17fff17 	ldw	r5,-4(fp)
   10f48:	100d883a 	mov	r6,r2
   10f4c:	001114c0 	call	1114c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   10f50:	1000021e 	bne	r2,zero,10f5c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   10f54:	e0bffd17 	ldw	r2,-12(fp)
   10f58:	00000806 	br	10f7c <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   10f5c:	e0bffd17 	ldw	r2,-12(fp)
   10f60:	10800017 	ldw	r2,0(r2)
   10f64:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   10f68:	e0fffd17 	ldw	r3,-12(fp)
   10f6c:	00800074 	movhi	r2,1
   10f70:	108e5c04 	addi	r2,r2,14704
   10f74:	18bfcb1e 	bne	r3,r2,10ea4 <__alt_data_end+0xfffbb774>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   10f78:	0005883a 	mov	r2,zero
}
   10f7c:	e037883a 	mov	sp,fp
   10f80:	dfc00117 	ldw	ra,4(sp)
   10f84:	df000017 	ldw	fp,0(sp)
   10f88:	dec00204 	addi	sp,sp,8
   10f8c:	f800283a 	ret

00010f90 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   10f90:	defffa04 	addi	sp,sp,-24
   10f94:	dfc00515 	stw	ra,20(sp)
   10f98:	df000415 	stw	fp,16(sp)
   10f9c:	dc000315 	stw	r16,12(sp)
   10fa0:	df000404 	addi	fp,sp,16
   10fa4:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   10fa8:	00bffa04 	movi	r2,-24
   10fac:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   10fb0:	e03ffc15 	stw	zero,-16(fp)
   10fb4:	00002106 	br	1103c <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   10fb8:	04000074 	movhi	r16,1
   10fbc:	8409de04 	addi	r16,r16,10104
   10fc0:	e0bffc17 	ldw	r2,-16(fp)
   10fc4:	1009883a 	mov	r4,r2
   10fc8:	01400304 	movi	r5,12
   10fcc:	000c3a00 	call	c3a0 <__mulsi3>
   10fd0:	8085883a 	add	r2,r16,r2
   10fd4:	10800017 	ldw	r2,0(r2)
   10fd8:	1000151e 	bne	r2,zero,11030 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   10fdc:	04000074 	movhi	r16,1
   10fe0:	8409de04 	addi	r16,r16,10104
   10fe4:	e0bffc17 	ldw	r2,-16(fp)
   10fe8:	1009883a 	mov	r4,r2
   10fec:	01400304 	movi	r5,12
   10ff0:	000c3a00 	call	c3a0 <__mulsi3>
   10ff4:	8085883a 	add	r2,r16,r2
   10ff8:	e0fffe17 	ldw	r3,-8(fp)
   10ffc:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   11000:	00800074 	movhi	r2,1
   11004:	108e6004 	addi	r2,r2,14720
   11008:	10c00017 	ldw	r3,0(r2)
   1100c:	e0bffc17 	ldw	r2,-16(fp)
   11010:	1880040e 	bge	r3,r2,11024 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   11014:	00800074 	movhi	r2,1
   11018:	108e6004 	addi	r2,r2,14720
   1101c:	e0fffc17 	ldw	r3,-16(fp)
   11020:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   11024:	e0bffc17 	ldw	r2,-16(fp)
   11028:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   1102c:	00000606 	br	11048 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   11030:	e0bffc17 	ldw	r2,-16(fp)
   11034:	10800044 	addi	r2,r2,1
   11038:	e0bffc15 	stw	r2,-16(fp)
   1103c:	e0bffc17 	ldw	r2,-16(fp)
   11040:	10800810 	cmplti	r2,r2,32
   11044:	103fdc1e 	bne	r2,zero,10fb8 <__alt_data_end+0xfffbb888>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   11048:	e0bffd17 	ldw	r2,-12(fp)
}
   1104c:	e6ffff04 	addi	sp,fp,-4
   11050:	dfc00217 	ldw	ra,8(sp)
   11054:	df000117 	ldw	fp,4(sp)
   11058:	dc000017 	ldw	r16,0(sp)
   1105c:	dec00304 	addi	sp,sp,12
   11060:	f800283a 	ret

00011064 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   11064:	defffe04 	addi	sp,sp,-8
   11068:	df000115 	stw	fp,4(sp)
   1106c:	df000104 	addi	fp,sp,4
   11070:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   11074:	e0bfff17 	ldw	r2,-4(fp)
   11078:	10bffe84 	addi	r2,r2,-6
   1107c:	10c00428 	cmpgeui	r3,r2,16
   11080:	18001a1e 	bne	r3,zero,110ec <alt_exception_cause_generated_bad_addr+0x88>
   11084:	100690ba 	slli	r3,r2,2
   11088:	00800074 	movhi	r2,1
   1108c:	10842704 	addi	r2,r2,4252
   11090:	1885883a 	add	r2,r3,r2
   11094:	10800017 	ldw	r2,0(r2)
   11098:	1000683a 	jmp	r2
   1109c:	000110dc 	xori	zero,zero,1091
   110a0:	000110dc 	xori	zero,zero,1091
   110a4:	000110ec 	andhi	zero,zero,1091
   110a8:	000110ec 	andhi	zero,zero,1091
   110ac:	000110ec 	andhi	zero,zero,1091
   110b0:	000110dc 	xori	zero,zero,1091
   110b4:	000110e4 	muli	zero,zero,1091
   110b8:	000110ec 	andhi	zero,zero,1091
   110bc:	000110dc 	xori	zero,zero,1091
   110c0:	000110dc 	xori	zero,zero,1091
   110c4:	000110ec 	andhi	zero,zero,1091
   110c8:	000110dc 	xori	zero,zero,1091
   110cc:	000110e4 	muli	zero,zero,1091
   110d0:	000110ec 	andhi	zero,zero,1091
   110d4:	000110ec 	andhi	zero,zero,1091
   110d8:	000110dc 	xori	zero,zero,1091
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   110dc:	00800044 	movi	r2,1
   110e0:	00000306 	br	110f0 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   110e4:	0005883a 	mov	r2,zero
   110e8:	00000106 	br	110f0 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   110ec:	0005883a 	mov	r2,zero
  }
}
   110f0:	e037883a 	mov	sp,fp
   110f4:	df000017 	ldw	fp,0(sp)
   110f8:	dec00104 	addi	sp,sp,4
   110fc:	f800283a 	ret

00011100 <atexit>:
   11100:	200b883a 	mov	r5,r4
   11104:	000d883a 	mov	r6,zero
   11108:	0009883a 	mov	r4,zero
   1110c:	000f883a 	mov	r7,zero
   11110:	00111c81 	jmpi	111c8 <__register_exitproc>

00011114 <exit>:
   11114:	defffe04 	addi	sp,sp,-8
   11118:	000b883a 	mov	r5,zero
   1111c:	dc000015 	stw	r16,0(sp)
   11120:	dfc00115 	stw	ra,4(sp)
   11124:	2021883a 	mov	r16,r4
   11128:	00112dc0 	call	112dc <__call_exitprocs>
   1112c:	00800074 	movhi	r2,1
   11130:	108e5604 	addi	r2,r2,14680
   11134:	11000017 	ldw	r4,0(r2)
   11138:	20800f17 	ldw	r2,60(r4)
   1113c:	10000126 	beq	r2,zero,11144 <exit+0x30>
   11140:	103ee83a 	callr	r2
   11144:	8009883a 	mov	r4,r16
   11148:	00114700 	call	11470 <_exit>

0001114c <memcmp>:
   1114c:	01c000c4 	movi	r7,3
   11150:	3980192e 	bgeu	r7,r6,111b8 <memcmp+0x6c>
   11154:	2144b03a 	or	r2,r4,r5
   11158:	11c4703a 	and	r2,r2,r7
   1115c:	10000f26 	beq	r2,zero,1119c <memcmp+0x50>
   11160:	20800003 	ldbu	r2,0(r4)
   11164:	28c00003 	ldbu	r3,0(r5)
   11168:	10c0151e 	bne	r2,r3,111c0 <memcmp+0x74>
   1116c:	31bfff84 	addi	r6,r6,-2
   11170:	01ffffc4 	movi	r7,-1
   11174:	00000406 	br	11188 <memcmp+0x3c>
   11178:	20800003 	ldbu	r2,0(r4)
   1117c:	28c00003 	ldbu	r3,0(r5)
   11180:	31bfffc4 	addi	r6,r6,-1
   11184:	10c00e1e 	bne	r2,r3,111c0 <memcmp+0x74>
   11188:	21000044 	addi	r4,r4,1
   1118c:	29400044 	addi	r5,r5,1
   11190:	31fff91e 	bne	r6,r7,11178 <__alt_data_end+0xfffbba48>
   11194:	0005883a 	mov	r2,zero
   11198:	f800283a 	ret
   1119c:	20c00017 	ldw	r3,0(r4)
   111a0:	28800017 	ldw	r2,0(r5)
   111a4:	1880041e 	bne	r3,r2,111b8 <memcmp+0x6c>
   111a8:	31bfff04 	addi	r6,r6,-4
   111ac:	21000104 	addi	r4,r4,4
   111b0:	29400104 	addi	r5,r5,4
   111b4:	39bff936 	bltu	r7,r6,1119c <__alt_data_end+0xfffbba6c>
   111b8:	303fe91e 	bne	r6,zero,11160 <__alt_data_end+0xfffbba30>
   111bc:	003ff506 	br	11194 <__alt_data_end+0xfffbba64>
   111c0:	10c5c83a 	sub	r2,r2,r3
   111c4:	f800283a 	ret

000111c8 <__register_exitproc>:
   111c8:	00800074 	movhi	r2,1
   111cc:	defffa04 	addi	sp,sp,-24
   111d0:	108e5604 	addi	r2,r2,14680
   111d4:	dc000315 	stw	r16,12(sp)
   111d8:	14000017 	ldw	r16,0(r2)
   111dc:	dc400415 	stw	r17,16(sp)
   111e0:	dfc00515 	stw	ra,20(sp)
   111e4:	80805217 	ldw	r2,328(r16)
   111e8:	2023883a 	mov	r17,r4
   111ec:	10003626 	beq	r2,zero,112c8 <__register_exitproc+0x100>
   111f0:	10c00117 	ldw	r3,4(r2)
   111f4:	010007c4 	movi	r4,31
   111f8:	20c00e16 	blt	r4,r3,11234 <__register_exitproc+0x6c>
   111fc:	1a400044 	addi	r9,r3,1
   11200:	8800211e 	bne	r17,zero,11288 <__register_exitproc+0xc0>
   11204:	18c00084 	addi	r3,r3,2
   11208:	18c7883a 	add	r3,r3,r3
   1120c:	18c7883a 	add	r3,r3,r3
   11210:	12400115 	stw	r9,4(r2)
   11214:	10c7883a 	add	r3,r2,r3
   11218:	19400015 	stw	r5,0(r3)
   1121c:	0005883a 	mov	r2,zero
   11220:	dfc00517 	ldw	ra,20(sp)
   11224:	dc400417 	ldw	r17,16(sp)
   11228:	dc000317 	ldw	r16,12(sp)
   1122c:	dec00604 	addi	sp,sp,24
   11230:	f800283a 	ret
   11234:	00800034 	movhi	r2,0
   11238:	10800004 	addi	r2,r2,0
   1123c:	10002526 	beq	r2,zero,112d4 <__register_exitproc+0x10c>
   11240:	01006404 	movi	r4,400
   11244:	d9400015 	stw	r5,0(sp)
   11248:	d9800115 	stw	r6,4(sp)
   1124c:	d9c00215 	stw	r7,8(sp)
   11250:	00000000 	call	0 <__reset>
   11254:	d9400017 	ldw	r5,0(sp)
   11258:	d9800117 	ldw	r6,4(sp)
   1125c:	d9c00217 	ldw	r7,8(sp)
   11260:	10001c26 	beq	r2,zero,112d4 <__register_exitproc+0x10c>
   11264:	80c05217 	ldw	r3,328(r16)
   11268:	10000115 	stw	zero,4(r2)
   1126c:	02400044 	movi	r9,1
   11270:	10c00015 	stw	r3,0(r2)
   11274:	80805215 	stw	r2,328(r16)
   11278:	10006215 	stw	zero,392(r2)
   1127c:	10006315 	stw	zero,396(r2)
   11280:	0007883a 	mov	r3,zero
   11284:	883fdf26 	beq	r17,zero,11204 <__alt_data_end+0xfffbbad4>
   11288:	18d1883a 	add	r8,r3,r3
   1128c:	4211883a 	add	r8,r8,r8
   11290:	1211883a 	add	r8,r2,r8
   11294:	41802215 	stw	r6,136(r8)
   11298:	01000044 	movi	r4,1
   1129c:	11806217 	ldw	r6,392(r2)
   112a0:	20c8983a 	sll	r4,r4,r3
   112a4:	310cb03a 	or	r6,r6,r4
   112a8:	11806215 	stw	r6,392(r2)
   112ac:	41c04215 	stw	r7,264(r8)
   112b0:	01800084 	movi	r6,2
   112b4:	89bfd31e 	bne	r17,r6,11204 <__alt_data_end+0xfffbbad4>
   112b8:	11806317 	ldw	r6,396(r2)
   112bc:	3108b03a 	or	r4,r6,r4
   112c0:	11006315 	stw	r4,396(r2)
   112c4:	003fcf06 	br	11204 <__alt_data_end+0xfffbbad4>
   112c8:	80805304 	addi	r2,r16,332
   112cc:	80805215 	stw	r2,328(r16)
   112d0:	003fc706 	br	111f0 <__alt_data_end+0xfffbbac0>
   112d4:	00bfffc4 	movi	r2,-1
   112d8:	003fd106 	br	11220 <__alt_data_end+0xfffbbaf0>

000112dc <__call_exitprocs>:
   112dc:	00800074 	movhi	r2,1
   112e0:	108e5604 	addi	r2,r2,14680
   112e4:	10800017 	ldw	r2,0(r2)
   112e8:	defff404 	addi	sp,sp,-48
   112ec:	dd800815 	stw	r22,32(sp)
   112f0:	d8800015 	stw	r2,0(sp)
   112f4:	10805204 	addi	r2,r2,328
   112f8:	dd000615 	stw	r20,24(sp)
   112fc:	dc800415 	stw	r18,16(sp)
   11300:	dfc00b15 	stw	ra,44(sp)
   11304:	df000a15 	stw	fp,40(sp)
   11308:	ddc00915 	stw	r23,36(sp)
   1130c:	dd400715 	stw	r21,28(sp)
   11310:	dcc00515 	stw	r19,20(sp)
   11314:	dc400315 	stw	r17,12(sp)
   11318:	dc000215 	stw	r16,8(sp)
   1131c:	2025883a 	mov	r18,r4
   11320:	2829883a 	mov	r20,r5
   11324:	d8800115 	stw	r2,4(sp)
   11328:	05bfffc4 	movi	r22,-1
   1132c:	d8800017 	ldw	r2,0(sp)
   11330:	14c05217 	ldw	r19,328(r2)
   11334:	98001d26 	beq	r19,zero,113ac <__call_exitprocs+0xd0>
   11338:	dd400117 	ldw	r21,4(sp)
   1133c:	98800117 	ldw	r2,4(r19)
   11340:	173fffc4 	addi	fp,r2,-1
   11344:	e0000d16 	blt	fp,zero,1137c <__call_exitprocs+0xa0>
   11348:	14000044 	addi	r16,r2,1
   1134c:	8421883a 	add	r16,r16,r16
   11350:	8421883a 	add	r16,r16,r16
   11354:	84402004 	addi	r17,r16,128
   11358:	9c63883a 	add	r17,r19,r17
   1135c:	9c21883a 	add	r16,r19,r16
   11360:	a0001e26 	beq	r20,zero,113dc <__call_exitprocs+0x100>
   11364:	80804017 	ldw	r2,256(r16)
   11368:	15001c26 	beq	r2,r20,113dc <__call_exitprocs+0x100>
   1136c:	e73fffc4 	addi	fp,fp,-1
   11370:	843fff04 	addi	r16,r16,-4
   11374:	8c7fff04 	addi	r17,r17,-4
   11378:	e5bff91e 	bne	fp,r22,11360 <__alt_data_end+0xfffbbc30>
   1137c:	00800034 	movhi	r2,0
   11380:	10800004 	addi	r2,r2,0
   11384:	10000926 	beq	r2,zero,113ac <__call_exitprocs+0xd0>
   11388:	98800117 	ldw	r2,4(r19)
   1138c:	1000311e 	bne	r2,zero,11454 <__call_exitprocs+0x178>
   11390:	98800017 	ldw	r2,0(r19)
   11394:	10003426 	beq	r2,zero,11468 <__call_exitprocs+0x18c>
   11398:	9809883a 	mov	r4,r19
   1139c:	a8800015 	stw	r2,0(r21)
   113a0:	00000000 	call	0 <__reset>
   113a4:	acc00017 	ldw	r19,0(r21)
   113a8:	983fe41e 	bne	r19,zero,1133c <__alt_data_end+0xfffbbc0c>
   113ac:	dfc00b17 	ldw	ra,44(sp)
   113b0:	df000a17 	ldw	fp,40(sp)
   113b4:	ddc00917 	ldw	r23,36(sp)
   113b8:	dd800817 	ldw	r22,32(sp)
   113bc:	dd400717 	ldw	r21,28(sp)
   113c0:	dd000617 	ldw	r20,24(sp)
   113c4:	dcc00517 	ldw	r19,20(sp)
   113c8:	dc800417 	ldw	r18,16(sp)
   113cc:	dc400317 	ldw	r17,12(sp)
   113d0:	dc000217 	ldw	r16,8(sp)
   113d4:	dec00c04 	addi	sp,sp,48
   113d8:	f800283a 	ret
   113dc:	98800117 	ldw	r2,4(r19)
   113e0:	80c00017 	ldw	r3,0(r16)
   113e4:	10bfffc4 	addi	r2,r2,-1
   113e8:	17001526 	beq	r2,fp,11440 <__call_exitprocs+0x164>
   113ec:	80000015 	stw	zero,0(r16)
   113f0:	183fde26 	beq	r3,zero,1136c <__alt_data_end+0xfffbbc3c>
   113f4:	00800044 	movi	r2,1
   113f8:	1708983a 	sll	r4,r2,fp
   113fc:	98806217 	ldw	r2,392(r19)
   11400:	9dc00117 	ldw	r23,4(r19)
   11404:	2084703a 	and	r2,r4,r2
   11408:	1000061e 	bne	r2,zero,11424 <__call_exitprocs+0x148>
   1140c:	183ee83a 	callr	r3
   11410:	98800117 	ldw	r2,4(r19)
   11414:	15ffc51e 	bne	r2,r23,1132c <__alt_data_end+0xfffbbbfc>
   11418:	a8800017 	ldw	r2,0(r21)
   1141c:	14ffd326 	beq	r2,r19,1136c <__alt_data_end+0xfffbbc3c>
   11420:	003fc206 	br	1132c <__alt_data_end+0xfffbbbfc>
   11424:	98806317 	ldw	r2,396(r19)
   11428:	2084703a 	and	r2,r4,r2
   1142c:	1000061e 	bne	r2,zero,11448 <__call_exitprocs+0x16c>
   11430:	89400017 	ldw	r5,0(r17)
   11434:	9009883a 	mov	r4,r18
   11438:	183ee83a 	callr	r3
   1143c:	003ff406 	br	11410 <__alt_data_end+0xfffbbce0>
   11440:	9f000115 	stw	fp,4(r19)
   11444:	003fea06 	br	113f0 <__alt_data_end+0xfffbbcc0>
   11448:	89000017 	ldw	r4,0(r17)
   1144c:	183ee83a 	callr	r3
   11450:	003fef06 	br	11410 <__alt_data_end+0xfffbbce0>
   11454:	98800017 	ldw	r2,0(r19)
   11458:	982b883a 	mov	r21,r19
   1145c:	1027883a 	mov	r19,r2
   11460:	983fb61e 	bne	r19,zero,1133c <__alt_data_end+0xfffbbc0c>
   11464:	003fd106 	br	113ac <__alt_data_end+0xfffbbc7c>
   11468:	0005883a 	mov	r2,zero
   1146c:	003ffa06 	br	11458 <__alt_data_end+0xfffbbd28>

00011470 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   11470:	defffd04 	addi	sp,sp,-12
   11474:	df000215 	stw	fp,8(sp)
   11478:	df000204 	addi	fp,sp,8
   1147c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   11480:	0001883a 	nop
   11484:	e0bfff17 	ldw	r2,-4(fp)
   11488:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   1148c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   11490:	10000226 	beq	r2,zero,1149c <_exit+0x2c>
    ALT_SIM_FAIL();
   11494:	002af070 	cmpltui	zero,zero,43969
   11498:	00000106 	br	114a0 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   1149c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   114a0:	003fff06 	br	114a0 <__alt_data_end+0xfffbbd70>
