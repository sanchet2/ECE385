
Final_Project_Code.elf:     file format elf32-littlenios2
Final_Project_Code.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0000022c

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x000126ac memsz 0x000126ac flags r-x
    LOAD off    0x000136cc vaddr 0x000126cc paddr 0x000141b8 align 2**12
         filesz 0x00001aec memsz 0x00001aec flags rw-
    LOAD off    0x00015ca4 vaddr 0x00015ca4 paddr 0x00015ca4 align 2**12
         filesz 0x00000000 memsz 0x00000180 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000020c  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00011a88  0000022c  0000022c  0000122c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000a18  00011cb4  00011cb4  00012cb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aec  000126cc  000141b8  000136cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000180  00015ca4  00015ca4  00015ca4  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00015e24  00015e24  000151b8  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000151b8  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000d90  00000000  00000000  000151e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000245ea  00000000  00000000  00015f70  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00009396  00000000  00000000  0003a55a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000b54a  00000000  00000000  000438f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002560  00000000  00000000  0004ee3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000394d  00000000  00000000  0005139c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00016da4  00000000  00000000  00054ce9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  0006ba90  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001388  00000000  00000000  0006bad0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000704d5  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  000704d8  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000704e4  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000704e5  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000704e6  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000704ea  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000704ee  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  000704f2  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  000704fd  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  00070508  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  00070513  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000003b  00000000  00000000  0007051e  2**0
                  CONTENTS, READONLY
 29 .jdi          000056ce  00000000  00000000  00070559  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00087aca  00000000  00000000  00075c27  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
0000022c l    d  .text	00000000 .text
00011cb4 l    d  .rodata	00000000 .rodata
000126cc l    d  .rwdata	00000000 .rwdata
00015ca4 l    d  .bss	00000000 .bss
00015e24 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Final_Project_Code_bsp//obj/HAL/src/crt0.o
00000264 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 io_handler.c
00000000 l    df *ABS*	00000000 keyboard_functions.c
00015ca4 l     O .bss	00000002 ctl_reg
00015ca6 l     O .bss	00000002 no_device
00000000 l    df *ABS*	00000000 main.c
00015cc0 l     O .bss	00000004 projectiles
00000000 l    df *ABS*	00000000 play_game.c
00000000 l    df *ABS*	00000000 usb.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00012412 l     O .rodata	00000010 zeroes.4181
00012422 l     O .rodata	00000010 blanks.4180
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00005688 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00007230 l     F .text	00000008 __fp_lock
00007238 l     F .text	00000008 __fp_unlock
0000724c l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00012ad4 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
00012f18 l     O .rwdata	00000020 lc_ctype_charset
00012ef8 l     O .rwdata	00000020 lc_message_charset
00012f38 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00012454 l     O .rodata	0000000c p05.2678
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00009f80 l     F .text	000000fc __sprint_r.part.0
00012588 l     O .rodata	00000010 blanks.4125
00012578 l     O .rodata	00000010 zeroes.4126
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0000ca84 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0000f3d4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000f4fc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000f528 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000f630 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000f72c l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000f810 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000f9f4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000141a8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0000fca8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000fdf8 l     F .text	00000038 alt_dev_reg
00013118 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
000100d4 l     F .text	00000204 altera_avalon_jtag_uart_irq
000102d8 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00010bac l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00011044 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0001119c l     F .text	00000050 alt_get_errno
000111ec l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00015cf8 g     O .bss	00000004 alt_instruction_exception_handler
00009614 g     F .text	00000074 _mprec_log10
00009700 g     F .text	0000008c __any_on
0000b9ac g     F .text	00000054 _isatty_r
00012460 g     O .rodata	00000028 __mprec_tinytens
0000f93c g     F .text	00000078 alt_main
00003280 g     F .text	000000b8 _puts_r
00015d24 g     O .bss	00000100 alt_irq
0000ba00 g     F .text	0000005c _lseek_r
000141b8 g       *ABS*	00000000 __flash_rwdata_start
0000ddf4 g     F .text	00000084 .hidden __eqdf2
00015e24 g       *ABS*	00000000 __alt_heap_start
00003244 g     F .text	0000003c printf
0000bc28 g     F .text	0000009c _wcrtomb_r
00015cb4 g     O .bss	00000002 usb_ctl_val
00009e78 g     F .text	0000005c __sseek
00007594 g     F .text	00000010 __sinit
00015cac g     O .bss	00000004 keycode
0000bab8 g     F .text	00000154 __swbuf_r
0000800c g     F .text	0000007c _setlocale_r
000073ec g     F .text	00000078 __sfmoreglue
0000f9d4 g     F .text	00000020 __malloc_unlock
0000294c g     F .text	00000080 UsbGetRetryCnt
000084c4 g     F .text	0000015c memmove
00000268 g     F .text	00000060 IO_init
0000757c g     F .text	00000018 _cleanup
00008744 g     F .text	000000a8 _Balloc
0000de78 g     F .text	000000e0 .hidden __gtdf2
000115dc g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
0000b954 g     F .text	00000058 _fstat_r
00015cd0 g     O .bss	00000004 errno
00009df4 g     F .text	00000008 __seofread
00000394 g     F .text	0000030c get_keycode
00015ce4 g     O .bss	00000004 alt_argv
0001c178 g       *ABS*	00000000 _gp
0000fc78 g     F .text	00000030 usleep
00012f98 g     O .rwdata	00000180 alt_fd_list
000013b8 g     F .text	00000058 render_check
000115fc g     F .text	00000090 alt_find_dev
0000838c g     F .text	00000138 memcpy
00001688 g     F .text	00000080 fire_projectile
00001268 g     F .text	0000008c render_shadow
00007240 g     F .text	0000000c _cleanup_r
0000f1fc g     F .text	000000d0 .hidden __floatsidf
00011124 g     F .text	00000078 alt_io_redirect
00015cb6 g     O .bss	00000001 data_size
0000df58 g     F .text	000000e0 .hidden __ltdf2
00011cb4 g       *ABS*	00000000 __DTOR_END__
00003338 g     F .text	00000014 puts
00011874 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00009d2c g     F .text	00000074 __fpclassifyd
00009570 g     F .text	000000a4 __ratio
0000b4b8 g     F .text	00000024 __vfiprintf_internal
000104d4 g     F .text	0000020c altera_avalon_jtag_uart_read
00002a48 g     F .text	00000014 malloc
00003218 g     F .text	0000002c _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0000cba0 g     F .text	00000008 .hidden __udivsi3
0000f680 g     F .text	000000ac isatty
000124b0 g     O .rodata	000000c8 __mprec_tens
00008088 g     F .text	0000000c __locale_charset
00015ccc g     O .bss	00000004 __malloc_top_pad
00001fec g     F .text	00000264 UsbGetConfigDesc2
00014188 g     O .rwdata	00000004 __mb_cur_max
000080b8 g     F .text	0000000c _localeconv_r
00008b6c g     F .text	0000003c __i2b
000079f8 g     F .text	000004a4 __sfvwrite_r
00015cb8 g     O .bss	00000002 intStat
0000334c g     F .text	00000054 _sbrk_r
0000ba5c g     F .text	0000005c _read_r
000141a0 g     O .rwdata	00000004 alt_max_fd
0000b664 g     F .text	00000100 _fclose_r
00007200 g     F .text	00000030 fflush
00015cc8 g     O .bss	00000004 __malloc_max_sbrked_mem
000011c8 g     F .text	000000a0 render_shadows
0000cbd8 g     F .text	0000089c .hidden __adddf3
00009318 g     F .text	0000011c __b2d
0000c468 g     F .text	0000061c .hidden __umoddi3
0000f860 g     F .text	000000dc lseek
00014180 g     O .rwdata	00000004 _global_impure_ptr
0000978c g     F .text	000005a0 _realloc_r
00015e24 g       *ABS*	00000000 __bss_end
00010f54 g     F .text	000000f0 alt_iic_isr_register
000114d8 g     F .text	00000104 alt_tick
0000be28 g     F .text	00000640 .hidden __udivdi3
0000b778 g     F .text	00000184 _fputwc_r
00012488 g     O .rodata	00000028 __mprec_bigtens
00008950 g     F .text	00000104 __s2b
0000f2cc g     F .text	000000a4 .hidden __floatunsidf
000090c0 g     F .text	00000060 __mcmp
00001a4c g     F .text	000000fc UsbSetAddress
000075b4 g     F .text	00000018 __fp_lock_all
00010f08 g     F .text	0000004c alt_ic_irq_enabled
00011440 g     F .text	00000098 alt_alarm_stop
00015cec g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	000000d0 alt_irq_handler
00012f70 g     O .rwdata	00000028 alt_dev_null
00001724 g     F .text	000000ac init_players
00010b90 g     F .text	0000001c alt_dcache_flush_all
00008a54 g     F .text	00000068 __hi0bits
00000330 g     F .text	00000064 IO_read
0000f174 g     F .text	00000088 .hidden __fixdfsi
000141b8 g       *ABS*	00000000 __ram_rwdata_end
00014198 g     O .rwdata	00000008 alt_dev_list
0000fcf8 g     F .text	00000100 write
000126cc g       *ABS*	00000000 __ram_rodata_end
0000f578 g     F .text	000000b8 fstat
0000df58 g     F .text	000000e0 .hidden __ledf2
000029cc g     F .text	0000007c UsbPrintMem
00008e38 g     F .text	00000140 __pow5mult
0000a094 g     F .text	00001424 ___vfiprintf_internal_r
00015cdc g     O .bss	00000004 __nlocale_changed
0000cba8 g     F .text	00000008 .hidden __umodsi3
00015e24 g       *ABS*	00000000 end
00010010 g     F .text	000000c4 altera_avalon_jtag_uart_init
000001cc g     F .exceptions	00000060 alt_instruction_exception_entry
00011cb4 g       *ABS*	00000000 __CTOR_LIST__
00055730 g       *ABS*	00000000 __alt_stack_pointer
0000f370 g     F .text	00000064 .hidden __clzsi2
000106e0 g     F .text	00000218 altera_avalon_jtag_uart_write
000075a4 g     F .text	00000004 __sfp_lock_acquire
000082a4 g     F .text	000000e8 memchr
00003438 g     F .text	000020fc ___vfprintf_internal_r
0000234c g     F .text	000000fc UsbClassRequest
00007708 g     F .text	000002f0 _free_r
00008094 g     F .text	00000010 __locale_mb_cur_max
00011aec g     F .text	00000194 __call_exitprocs
00015cd8 g     O .bss	00000004 __mlocale_changed
00014178 g     O .rwdata	00000004 __malloc_sbrk_base
0000022c g     F .text	0000003c _start
00015cf0 g     O .bss	00000004 _alt_tick_rate
00008f78 g     F .text	00000148 __lshift
00015cf4 g     O .bss	00000004 _alt_nticks
0000fa44 g     F .text	00000104 read
0000fe64 g     F .text	00000048 alt_sys_init
000119d8 g     F .text	00000114 __register_exitproc
00008ba8 g     F .text	00000290 __multiply
00010380 g     F .text	00000068 altera_avalon_jtag_uart_close
000010ac g     F .text	0000011c renderer
0000cbb0 g     F .text	00000028 .hidden __mulsi3
000126cc g       *ABS*	00000000 __ram_rwdata_start
00011cb4 g       *ABS*	00000000 __ram_rodata_start
00015cfc g     O .bss	00000028 __malloc_current_mallinfo
000006a0 g     F .text	00000a0c setup_keyboard
00009434 g     F .text	0000013c __d2b
00001b48 g     F .text	00000144 UsbGetDeviceDesc1
0000feac g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000117a0 g     F .text	000000d4 alt_get_fd
00010a38 g     F .text	00000158 alt_busy_sleep
0000b538 g     F .text	00000054 _close_r
000017d0 g     F .text	00000090 move_player
0001195c g     F .text	0000007c memcmp
0000ff6c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00015e24 g       *ABS*	00000000 __alt_stack_base
0000ffbc g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00005558 g     F .text	00000130 __swsetup_r
0000d474 g     F .text	00000980 .hidden __divdf3
00007464 g     F .text	00000118 __sfp
00009688 g     F .text	00000078 __copybits
000126cc g     O .rwdata	00000408 __malloc_av_
000075b0 g     F .text	00000004 __sinit_lock_release
0000e038 g     F .text	0000086c .hidden __muldf3
00009da0 g     F .text	00000054 __sread
000028c8 g     F .text	00000084 UsbWaitTDListDone
0001168c g     F .text	00000114 alt_find_file
00010bfc g     F .text	000000a4 alt_dev_llist_insert
0000f9b4 g     F .text	00000020 __malloc_lock
0000fbc8 g     F .text	000000b0 sbrk
00006fd8 g     F .text	00000228 _fflush_r
0000b58c g     F .text	000000d8 _calloc_r
00015cba g     O .bss	00000001 hot_plug_count
00015ca4 g       *ABS*	00000000 __bss_start
00008620 g     F .text	00000124 memset
00001860 g     F .text	000000a4 main
00015ce8 g     O .bss	00000004 alt_envp
00015cc4 g     O .bss	00000004 __malloc_max_total_mem
0000ff0c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00002250 g     F .text	000000fc UsbSetConfig
0000bc0c g     F .text	0000001c __swbuf
00009ed4 g     F .text	00000008 __sclose
00055730 g       *ABS*	00000000 __alt_heap_limit
0000b764 g     F .text	00000014 fclose
000058b0 g     F .text	00001728 _dtoa_r
00002a70 g     F .text	000007a8 _malloc_r
0000bd9c g     F .text	00000030 __ascii_wctomb
000141a4 g     O .rwdata	00000004 alt_errno
00007e9c g     F .text	000000b8 _fwalk
0000caf0 g     F .text	00000054 .hidden __divsi3
000075e4 g     F .text	00000124 _malloc_trim_r
00002448 g     F .text	00000144 UsbGetHidDesc
00011cb4 g       *ABS*	00000000 __CTOR_END__
00009edc g     F .text	000000a4 strcmp
00011cb4 g       *ABS*	00000000 __flash_rodata_start
00011cb4 g       *ABS*	00000000 __DTOR_LIST__
0000ddf4 g     F .text	00000084 .hidden __nedf2
00001958 g     F .text	00000044 UsbRead
00001614 g     F .text	00000074 parse_keycode
0000fe30 g     F .text	00000034 alt_irq_init
0000fb48 g     F .text	00000080 alt_release_fd
00012598 g     O .rodata	00000100 .hidden __clz_tab
00015cd4 g     O .bss	00000004 _PathLocale
00011910 g     F .text	00000014 atexit
0000b4dc g     F .text	0000005c _write_r
000080c4 g     F .text	0000001c setlocale
00014184 g     O .rwdata	00000004 _impure_ptr
00015ce0 g     O .bss	00000004 alt_argc
00010cfc g     F .text	0000005c _do_dtors
000080b0 g     F .text	00000008 __locale_cjk_lang
00001708 g     F .text	0000001c check_projectiles
00000020 g       .exceptions	00000000 alt_irq_entry
000092b8 g     F .text	00000060 __ulp
000075cc g     F .text	00000018 __fp_unlock_all
00015cb0 g     O .bss	00000001 toggle
000012f4 g     F .text	000000c4 render_players
00014190 g     O .rwdata	00000008 alt_fs_list
0000258c g     F .text	0000033c UsbGetReportDesc
00000020 g       *ABS*	00000000 __ram_exceptions_start
000080e0 g     F .text	0000000c localeconv
00010d74 g     F .text	00000050 alt_ic_isr_register
000141b8 g       *ABS*	00000000 _edata
00015e24 g       *ABS*	00000000 _end
00001904 g     F .text	00000054 UsbWrite
0000022c g       *ABS*	00000000 __ram_exceptions_end
000103e8 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
00015cbc g     O .bss	00000002 code
00010e64 g     F .text	000000a4 alt_ic_irq_disable
00009dfc g     F .text	0000007c __swrite
0001417c g     O .rwdata	00000004 __malloc_trim_threshold
000080a4 g     F .text	0000000c __locale_msgcharset
00015ca8 g     O .bss	00000002 fs_device
00011924 g     F .text	00000038 exit
00007f54 g     F .text	000000b8 _fwalk_reent
00009120 g     F .text	00000198 __mdiff
0000cb44 g     F .text	0000005c .hidden __modsi3
00055730 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
000075a8 g     F .text	00000004 __sfp_lock_release
000002c8 g     F .text	00000068 IO_write
00011c80 g     F .text	00000034 _exit
000108f8 g     F .text	00000140 alt_alarm_start
000080ec g     F .text	000001b8 __smakebuf_r
000033a0 g     F .text	00000098 strlen
000112e0 g     F .text	00000160 open
0000de78 g     F .text	000000e0 .hidden __gedf2
0001418c g     O .rwdata	00000004 __wctomb
0000a07c g     F .text	00000018 __sprint_r
00010d58 g     F .text	0000001c alt_icache_flush_all
000141ac g     O .rwdata	00000004 alt_priority_mask
00010dc4 g     F .text	000000a0 alt_ic_irq_enable
00005534 g     F .text	00000024 __vfprintf_internal
0000bdcc g     F .text	0000005c _wctomb_r
0000e8a4 g     F .text	000008d0 .hidden __subdf3
00001410 g     F .text	00000204 keycode_effect
00008abc g     F .text	000000b0 __lo0bits
00001e60 g     F .text	0000018c UsbGetConfigDesc1
000141b0 g     O .rwdata	00000008 alt_alarm_list
00010ca0 g     F .text	0000005c _do_ctors
0000199c g     F .text	000000b0 UsbSoftReset
0000bcc4 g     F .text	000000d8 wcrtomb
0000f424 g     F .text	000000d8 close
00001c8c g     F .text	000001d4 UsbGetDeviceDesc2
0000f790 g     F .text	00000080 alt_load
0000b8fc g     F .text	00000058 fputwc
00002a5c g     F .text	00000014 free
000075ac g     F .text	00000004 __sinit_lock_acquire
00008814 g     F .text	0000013c __multadd
000087ec g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08408b14 	ori	at,at,556
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001cc0 	call	1cc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	00800074 	movhi	r2,1
 140:	10974904 	addi	r2,r2,23844
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	00800074 	movhi	r2,1
 158:	10974904 	addi	r2,r2,23844
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <__alt_data_end+0xfffaa9fc>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <__alt_data_end+0xfffaa9f0>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0001883a 	nop
}
 1b8:	e037883a 	mov	sp,fp
 1bc:	dfc00117 	ldw	ra,4(sp)
 1c0:	df000017 	ldw	fp,0(sp)
 1c4:	dec00204 	addi	sp,sp,8
 1c8:	f800283a 	ret

000001cc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1cc:	defffb04 	addi	sp,sp,-20
 1d0:	dfc00415 	stw	ra,16(sp)
 1d4:	df000315 	stw	fp,12(sp)
 1d8:	df000304 	addi	fp,sp,12
 1dc:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 1e0:	00bfffc4 	movi	r2,-1
 1e4:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 1e8:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1ec:	d0a6e017 	ldw	r2,-25728(gp)
 1f0:	10000726 	beq	r2,zero,210 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 1f4:	d0a6e017 	ldw	r2,-25728(gp)
 1f8:	e0fffd17 	ldw	r3,-12(fp)
 1fc:	1809883a 	mov	r4,r3
 200:	e17fff17 	ldw	r5,-4(fp)
 204:	e1bffe17 	ldw	r6,-8(fp)
 208:	103ee83a 	callr	r2
 20c:	00000206 	br	218 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 210:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 214:	0005883a 	mov	r2,zero
}
 218:	e037883a 	mov	sp,fp
 21c:	dfc00117 	ldw	ra,4(sp)
 220:	df000017 	ldw	fp,0(sp)
 224:	dec00204 	addi	sp,sp,8
 228:	f800283a 	ret

Disassembly of section .text:

0000022c <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     22c:	06c00174 	movhi	sp,5
    ori sp, sp, %lo(__alt_stack_pointer)
     230:	ded5cc14 	ori	sp,sp,22320
    movhi gp, %hi(_gp)
     234:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     238:	d6b05e14 	ori	gp,gp,49528
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     23c:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     240:	10972914 	ori	r2,r2,23716

    movhi r3, %hi(__bss_end)
     244:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     248:	18d78914 	ori	r3,r3,24100

    beq r2, r3, 1f
     24c:	10c00326 	beq	r2,r3,25c <_start+0x30>

0:
    stw zero, (r2)
     250:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     254:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     258:	10fffd36 	bltu	r2,r3,250 <__alt_data_end+0xfffaab20>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     25c:	000f7900 	call	f790 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     260:	000f93c0 	call	f93c <alt_main>

00000264 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     264:	003fff06 	br	264 <__alt_data_end+0xfffaab34>

00000268 <IO_init>:
#define otg_hpi_cs			(volatile char*)	OTG_HPI_CS_BASE //FOR SOME REASON CS BASE BEHAVES WEIRDLY MIGHT HAVE TO SET MANUALLY
#define otg_hpi_w			(volatile char*)	OTG_HPI_W_BASE


void IO_init(void)
{
     268:	deffff04 	addi	sp,sp,-4
     26c:	df000015 	stw	fp,0(sp)
     270:	d839883a 	mov	fp,sp
	*otg_hpi_cs = 0;
     274:	00800234 	movhi	r2,8
     278:	10841404 	addi	r2,r2,4176
     27c:	10000005 	stb	zero,0(r2)
	*otg_hpi_r = 1;
     280:	00800234 	movhi	r2,8
     284:	10840804 	addi	r2,r2,4128
     288:	00c00044 	movi	r3,1
     28c:	10c00005 	stb	r3,0(r2)
	*otg_hpi_w = 1;
     290:	00800234 	movhi	r2,8
     294:	10840404 	addi	r2,r2,4112
     298:	00c00044 	movi	r3,1
     29c:	10c00005 	stb	r3,0(r2)
	*otg_hpi_address = 0;
     2a0:	00800234 	movhi	r2,8
     2a4:	10841004 	addi	r2,r2,4160
     2a8:	10000015 	stw	zero,0(r2)
	*otg_hpi_data = 0;
     2ac:	00800234 	movhi	r2,8
     2b0:	10840c04 	addi	r2,r2,4144
     2b4:	10000015 	stw	zero,0(r2)
}
     2b8:	e037883a 	mov	sp,fp
     2bc:	df000017 	ldw	fp,0(sp)
     2c0:	dec00104 	addi	sp,sp,4
     2c4:	f800283a 	ret

000002c8 <IO_write>:

void IO_write(alt_u8 Address, alt_u16 Data)
{
     2c8:	defffd04 	addi	sp,sp,-12
     2cc:	df000215 	stw	fp,8(sp)
     2d0:	df000204 	addi	fp,sp,8
     2d4:	2007883a 	mov	r3,r4
     2d8:	2805883a 	mov	r2,r5
     2dc:	e0fffe05 	stb	r3,-8(fp)
     2e0:	e0bfff0d 	sth	r2,-4(fp)
	*otg_hpi_address = Address;
     2e4:	00800234 	movhi	r2,8
     2e8:	10841004 	addi	r2,r2,4160
     2ec:	e0fffe03 	ldbu	r3,-8(fp)
     2f0:	10c00015 	stw	r3,0(r2)
	*otg_hpi_data = Data;
     2f4:	00800234 	movhi	r2,8
     2f8:	10840c04 	addi	r2,r2,4144
     2fc:	e0ffff0b 	ldhu	r3,-4(fp)
     300:	10c00015 	stw	r3,0(r2)
	*otg_hpi_w = 0;
     304:	00800234 	movhi	r2,8
     308:	10840404 	addi	r2,r2,4112
     30c:	10000005 	stb	zero,0(r2)
	*otg_hpi_w = 1;
     310:	00800234 	movhi	r2,8
     314:	10840404 	addi	r2,r2,4112
     318:	00c00044 	movi	r3,1
     31c:	10c00005 	stb	r3,0(r2)
}
     320:	e037883a 	mov	sp,fp
     324:	df000017 	ldw	fp,0(sp)
     328:	dec00104 	addi	sp,sp,4
     32c:	f800283a 	ret

00000330 <IO_read>:

alt_u16 IO_read(alt_u8 Address)
{
     330:	defffd04 	addi	sp,sp,-12
     334:	df000215 	stw	fp,8(sp)
     338:	df000204 	addi	fp,sp,8
     33c:	2005883a 	mov	r2,r4
     340:	e0bfff05 	stb	r2,-4(fp)
	alt_u16 temp;
	*otg_hpi_address = Address;
     344:	00800234 	movhi	r2,8
     348:	10841004 	addi	r2,r2,4160
     34c:	e0ffff03 	ldbu	r3,-4(fp)
     350:	10c00015 	stw	r3,0(r2)
	*otg_hpi_r = 0;
     354:	00800234 	movhi	r2,8
     358:	10840804 	addi	r2,r2,4128
     35c:	10000005 	stb	zero,0(r2)
	temp = *otg_hpi_data;
     360:	00800234 	movhi	r2,8
     364:	10840c04 	addi	r2,r2,4144
     368:	10800017 	ldw	r2,0(r2)
     36c:	e0bffe0d 	sth	r2,-8(fp)
	*otg_hpi_r = 1;
     370:	00800234 	movhi	r2,8
     374:	10840804 	addi	r2,r2,4128
     378:	00c00044 	movi	r3,1
     37c:	10c00005 	stb	r3,0(r2)

	return temp;
     380:	e0bffe0b 	ldhu	r2,-8(fp)
}
     384:	e037883a 	mov	sp,fp
     388:	df000017 	ldw	fp,0(sp)
     38c:	dec00104 	addi	sp,sp,4
     390:	f800283a 	ret

00000394 <get_keycode>:
alt_u16 code;




int get_keycode(unsigned int *keycode1,unsigned int *keycode2){
     394:	defffc04 	addi	sp,sp,-16
     398:	dfc00315 	stw	ra,12(sp)
     39c:	df000215 	stw	fp,8(sp)
     3a0:	df000204 	addi	fp,sp,8
     3a4:	e13ffe15 	stw	r4,-8(fp)
     3a8:	e17fff15 	stw	r5,-4(fp)
				toggle++;
     3ac:	d0a6ce03 	ldbu	r2,-25800(gp)
     3b0:	10800044 	addi	r2,r2,1
     3b4:	d0a6ce05 	stb	r2,-25800(gp)
				IO_write(HPI_ADDR,0x0500); //the start address
     3b8:	01000084 	movi	r4,2
     3bc:	01414004 	movi	r5,1280
     3c0:	00002c80 	call	2c8 <IO_write>
				//data phase IN-1
				IO_write(HPI_DATA,0x051c); //500
     3c4:	0009883a 	mov	r4,zero
     3c8:	01414704 	movi	r5,1308
     3cc:	00002c80 	call	2c8 <IO_write>

				IO_write(HPI_DATA,0x000f & data_size);//2 data length
     3d0:	d0a6cf83 	ldbu	r2,-25794(gp)
     3d4:	10803fcc 	andi	r2,r2,255
     3d8:	108003cc 	andi	r2,r2,15
     3dc:	0009883a 	mov	r4,zero
     3e0:	100b883a 	mov	r5,r2
     3e4:	00002c80 	call	2c8 <IO_write>

				IO_write(HPI_DATA,0x0291);//4 //endpoint 1
     3e8:	0009883a 	mov	r4,zero
     3ec:	0140a444 	movi	r5,657
     3f0:	00002c80 	call	2c8 <IO_write>
				if(toggle%2)
     3f4:	d0a6ce03 	ldbu	r2,-25800(gp)
     3f8:	1080004c 	andi	r2,r2,1
     3fc:	10803fcc 	andi	r2,r2,255
     400:	10000426 	beq	r2,zero,414 <get_keycode+0x80>
				{
					IO_write(HPI_DATA,0x0001);//6 //data 1
     404:	0009883a 	mov	r4,zero
     408:	01400044 	movi	r5,1
     40c:	00002c80 	call	2c8 <IO_write>
     410:	00000306 	br	420 <get_keycode+0x8c>
				}
				else
				{
					IO_write(HPI_DATA,0x0041);//6 //data 1
     414:	0009883a 	mov	r4,zero
     418:	01401044 	movi	r5,65
     41c:	00002c80 	call	2c8 <IO_write>
				}
				IO_write(HPI_DATA,0x0013);//8
     420:	0009883a 	mov	r4,zero
     424:	014004c4 	movi	r5,19
     428:	00002c80 	call	2c8 <IO_write>
				IO_write(HPI_DATA,0x0000);//a
     42c:	0009883a 	mov	r4,zero
     430:	000b883a 	mov	r5,zero
     434:	00002c80 	call	2c8 <IO_write>
				UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
     438:	01006c04 	movi	r4,432
     43c:	01414004 	movi	r5,1280
     440:	00019040 	call	1904 <UsbWrite>

				while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     444:	00002506 	br	4dc <get_keycode+0x148>
				{
					IO_write(HPI_ADDR,0x0500); //the start address
     448:	01000084 	movi	r4,2
     44c:	01414004 	movi	r5,1280
     450:	00002c80 	call	2c8 <IO_write>
					//data phase IN-1
					IO_write(HPI_DATA,0x051c); //500
     454:	0009883a 	mov	r4,zero
     458:	01414704 	movi	r5,1308
     45c:	00002c80 	call	2c8 <IO_write>

					IO_write(HPI_DATA,0x000f & data_size);//2 data length
     460:	d0a6cf83 	ldbu	r2,-25794(gp)
     464:	10803fcc 	andi	r2,r2,255
     468:	108003cc 	andi	r2,r2,15
     46c:	0009883a 	mov	r4,zero
     470:	100b883a 	mov	r5,r2
     474:	00002c80 	call	2c8 <IO_write>

					IO_write(HPI_DATA,0x0291);//4 //endpoint 1
     478:	0009883a 	mov	r4,zero
     47c:	0140a444 	movi	r5,657
     480:	00002c80 	call	2c8 <IO_write>
					if(toggle%2)
     484:	d0a6ce03 	ldbu	r2,-25800(gp)
     488:	1080004c 	andi	r2,r2,1
     48c:	10803fcc 	andi	r2,r2,255
     490:	10000426 	beq	r2,zero,4a4 <get_keycode+0x110>
					{
						IO_write(HPI_DATA,0x0001);//6 //data 1
     494:	0009883a 	mov	r4,zero
     498:	01400044 	movi	r5,1
     49c:	00002c80 	call	2c8 <IO_write>
     4a0:	00000306 	br	4b0 <get_keycode+0x11c>
					}
					else
					{
						IO_write(HPI_DATA,0x0041);//6 //data 1
     4a4:	0009883a 	mov	r4,zero
     4a8:	01401044 	movi	r5,65
     4ac:	00002c80 	call	2c8 <IO_write>
					}
					IO_write(HPI_DATA,0x0013);//8
     4b0:	0009883a 	mov	r4,zero
     4b4:	014004c4 	movi	r5,19
     4b8:	00002c80 	call	2c8 <IO_write>
					IO_write(HPI_DATA,0x0000);//
     4bc:	0009883a 	mov	r4,zero
     4c0:	000b883a 	mov	r5,zero
     4c4:	00002c80 	call	2c8 <IO_write>
					UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
     4c8:	01006c04 	movi	r4,432
     4cc:	01414004 	movi	r5,1280
     4d0:	00019040 	call	1904 <UsbWrite>
					usleep(10*1000);
     4d4:	0109c404 	movi	r4,10000
     4d8:	000fc780 	call	fc78 <usleep>
				}
				IO_write(HPI_DATA,0x0013);//8
				IO_write(HPI_DATA,0x0000);//a
				UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr

				while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     4dc:	010000c4 	movi	r4,3
     4e0:	00003300 	call	330 <IO_read>
     4e4:	10bfffcc 	andi	r2,r2,65535
     4e8:	1080040c 	andi	r2,r2,16
     4ec:	103fd626 	beq	r2,zero,448 <__alt_data_end+0xfffaad18>
					usleep(10*1000);
				}//end while



				usb_ctl_val = UsbWaitTDListDone();
     4f0:	00028c80 	call	28c8 <UsbWaitTDListDone>
     4f4:	d0a6cf0d 	sth	r2,-25796(gp)

				// packet starts from 0x051c, reading third byte
				// TASK: Write the address to read from the memory for byte 3 of the report descriptor to HPI_ADDR.
				IO_write(HPI_ADDR,0x051e); //the start address
     4f8:	01000084 	movi	r4,2
     4fc:	01414784 	movi	r5,1310
     500:	00002c80 	call	2c8 <IO_write>
				*keycode1 = IO_read(HPI_DATA);
     504:	0009883a 	mov	r4,zero
     508:	00003300 	call	330 <IO_read>
     50c:	10ffffcc 	andi	r3,r2,65535
     510:	e0bffe17 	ldw	r2,-8(fp)
     514:	10c00015 	stw	r3,0(r2)
				keycode=*keycode1;
     518:	e0bffe17 	ldw	r2,-8(fp)
     51c:	10800017 	ldw	r2,0(r2)
     520:	d0a6cd15 	stw	r2,-25804(gp)


				*keycode2 = IO_read(HPI_DATA);
     524:	0009883a 	mov	r4,zero
     528:	00003300 	call	330 <IO_read>
     52c:	10ffffcc 	andi	r3,r2,65535
     530:	e0bfff17 	ldw	r2,-4(fp)
     534:	10c00015 	stw	r3,0(r2)


				IOWR(KEYCODE_BASE, 0, keycode & 0xff);
     538:	d0a6cd17 	ldw	r2,-25804(gp)
     53c:	10c03fcc 	andi	r3,r2,255
     540:	00800234 	movhi	r2,8
     544:	10841804 	addi	r2,r2,4192
     548:	10c00035 	stwio	r3,0(r2)



				usb_ctl_val = UsbRead(ctl_reg);
     54c:	d0a6cb0b 	ldhu	r2,-25812(gp)
     550:	10bfffcc 	andi	r2,r2,65535
     554:	1009883a 	mov	r4,r2
     558:	00019580 	call	1958 <UsbRead>
     55c:	d0a6cf0d 	sth	r2,-25796(gp)

				if(!(usb_ctl_val & no_device))
     560:	d0e6cf0b 	ldhu	r3,-25796(gp)
     564:	d0a6cb8b 	ldhu	r2,-25810(gp)
     568:	1884703a 	and	r2,r3,r2
     56c:	10bfffcc 	andi	r2,r2,65535
     570:	1000211e 	bne	r2,zero,5f8 <get_keycode+0x264>
				{
					//USB hot plug routine
					for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
     574:	d026d085 	stb	zero,-25790(gp)
     578:	00001006 	br	5bc <get_keycode+0x228>
					{
						usleep(5*1000);
     57c:	0104e204 	movi	r4,5000
     580:	000fc780 	call	fc78 <usleep>
						usb_ctl_val = UsbRead(ctl_reg);
     584:	d0a6cb0b 	ldhu	r2,-25812(gp)
     588:	10bfffcc 	andi	r2,r2,65535
     58c:	1009883a 	mov	r4,r2
     590:	00019580 	call	1958 <UsbRead>
     594:	d0a6cf0d 	sth	r2,-25796(gp)
						if(usb_ctl_val & no_device) break;
     598:	d0e6cf0b 	ldhu	r3,-25796(gp)
     59c:	d0a6cb8b 	ldhu	r2,-25810(gp)
     5a0:	1884703a 	and	r2,r3,r2
     5a4:	10bfffcc 	andi	r2,r2,65535
     5a8:	10000126 	beq	r2,zero,5b0 <get_keycode+0x21c>
     5ac:	00000706 	br	5cc <get_keycode+0x238>
				usb_ctl_val = UsbRead(ctl_reg);

				if(!(usb_ctl_val & no_device))
				{
					//USB hot plug routine
					for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
     5b0:	d0a6d083 	ldbu	r2,-25790(gp)
     5b4:	10800044 	addi	r2,r2,1
     5b8:	d0a6d085 	stb	r2,-25790(gp)
     5bc:	d0a6d083 	ldbu	r2,-25790(gp)
     5c0:	10803fcc 	andi	r2,r2,255
     5c4:	108001f0 	cmpltui	r2,r2,7
     5c8:	103fec1e 	bne	r2,zero,57c <__alt_data_end+0xfffaae4c>
					{
						usleep(5*1000);
						usb_ctl_val = UsbRead(ctl_reg);
						if(usb_ctl_val & no_device) break;
					}
					if(!(usb_ctl_val & no_device))
     5cc:	d0e6cf0b 	ldhu	r3,-25796(gp)
     5d0:	d0a6cb8b 	ldhu	r2,-25810(gp)
     5d4:	1884703a 	and	r2,r3,r2
     5d8:	10bfffcc 	andi	r2,r2,65535
     5dc:	1000061e 	bne	r2,zero,5f8 <get_keycode+0x264>
					{
						printf("\n[INFO]: the keyboard has been removed!!! \n");
     5e0:	01000074 	movhi	r4,1
     5e4:	21072d04 	addi	r4,r4,7348
     5e8:	00033380 	call	3338 <puts>
						printf("[INFO]: please insert again!!! \n");
     5ec:	01000074 	movhi	r4,1
     5f0:	21073804 	addi	r4,r4,7392
     5f4:	00033380 	call	3338 <puts>
					}
				}

				while (!(usb_ctl_val & no_device))
     5f8:	00001e06 	br	674 <get_keycode+0x2e0>
				{

					usb_ctl_val = UsbRead(ctl_reg);
     5fc:	d0a6cb0b 	ldhu	r2,-25812(gp)
     600:	10bfffcc 	andi	r2,r2,65535
     604:	1009883a 	mov	r4,r2
     608:	00019580 	call	1958 <UsbRead>
     60c:	d0a6cf0d 	sth	r2,-25796(gp)
					usleep(5*1000);
     610:	0104e204 	movi	r4,5000
     614:	000fc780 	call	fc78 <usleep>
					usb_ctl_val = UsbRead(ctl_reg);
     618:	d0a6cb0b 	ldhu	r2,-25812(gp)
     61c:	10bfffcc 	andi	r2,r2,65535
     620:	1009883a 	mov	r4,r2
     624:	00019580 	call	1958 <UsbRead>
     628:	d0a6cf0d 	sth	r2,-25796(gp)
					usleep(5*1000);
     62c:	0104e204 	movi	r4,5000
     630:	000fc780 	call	fc78 <usleep>
					usb_ctl_val = UsbRead(ctl_reg);
     634:	d0a6cb0b 	ldhu	r2,-25812(gp)
     638:	10bfffcc 	andi	r2,r2,65535
     63c:	1009883a 	mov	r4,r2
     640:	00019580 	call	1958 <UsbRead>
     644:	d0a6cf0d 	sth	r2,-25796(gp)
					usleep(5*1000);
     648:	0104e204 	movi	r4,5000
     64c:	000fc780 	call	fc78 <usleep>

					if(usb_ctl_val & no_device)
     650:	d0e6cf0b 	ldhu	r3,-25796(gp)
     654:	d0a6cb8b 	ldhu	r2,-25810(gp)
     658:	1884703a 	and	r2,r3,r2
     65c:	10bfffcc 	andi	r2,r2,65535
     660:	10000226 	beq	r2,zero,66c <get_keycode+0x2d8>
						return -1;
     664:	00bfffc4 	movi	r2,-1
     668:	00000806 	br	68c <get_keycode+0x2f8>

					usleep(200);
     66c:	01003204 	movi	r4,200
     670:	000fc780 	call	fc78 <usleep>
						printf("\n[INFO]: the keyboard has been removed!!! \n");
						printf("[INFO]: please insert again!!! \n");
					}
				}

				while (!(usb_ctl_val & no_device))
     674:	d0e6cf0b 	ldhu	r3,-25796(gp)
     678:	d0a6cb8b 	ldhu	r2,-25810(gp)
     67c:	1884703a 	and	r2,r3,r2
     680:	10bfffcc 	andi	r2,r2,65535
     684:	103fdd26 	beq	r2,zero,5fc <__alt_data_end+0xfffaaecc>
					if(usb_ctl_val & no_device)
						return -1;

					usleep(200);
				}
				return 0;
     688:	0005883a 	mov	r2,zero
}
     68c:	e037883a 	mov	sp,fp
     690:	dfc00117 	ldw	ra,4(sp)
     694:	df000017 	ldw	fp,0(sp)
     698:	dec00204 	addi	sp,sp,8
     69c:	f800283a 	ret

000006a0 <setup_keyboard>:


void setup_keyboard()
{
     6a0:	defffe04 	addi	sp,sp,-8
     6a4:	dfc00115 	stw	ra,4(sp)
     6a8:	df000015 	stw	fp,0(sp)
     6ac:	d839883a 	mov	fp,sp
	IO_init();
     6b0:	00002680 	call	268 <IO_init>
		usleep(10*10000);
	}*/



	printf("USB keyboard setup...\n\n");
     6b4:	01000074 	movhi	r4,1
     6b8:	21074004 	addi	r4,r4,7424
     6bc:	00033380 	call	3338 <puts>

	//----------------------------------------SIE1 initial---------------------------------------------------//
	USB_HOT_PLUG:
	UsbSoftReset();
     6c0:	000199c0 	call	199c <UsbSoftReset>

	// STEP 1a:
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
     6c4:	01005104 	movi	r4,324
     6c8:	000b883a 	mov	r5,zero
     6cc:	00019040 	call	1904 <UsbWrite>
	UsbWrite (HOST1_STAT_REG, 0xFFFF);
     6d0:	01302414 	movui	r4,49296
     6d4:	017fffd4 	movui	r5,65535
     6d8:	00019040 	call	1904 <UsbWrite>

	/* Set HUSB_pEOT time */
	UsbWrite(HUSB_pEOT, 600); // adjust the according to your USB device speed
     6dc:	01006d04 	movi	r4,436
     6e0:	01409604 	movi	r5,600
     6e4:	00019040 	call	1904 <UsbWrite>

	usb_ctl_val = SOFEOP1_TO_CPU_EN | RESUME1_TO_HPI_EN;// | SOFEOP1_TO_HPI_EN;
     6e8:	00811004 	movi	r2,1088
     6ec:	d0a6cf0d 	sth	r2,-25796(gp)
	UsbWrite(HPI_IRQ_ROUTING_REG, usb_ctl_val);
     6f0:	d0a6cf0b 	ldhu	r2,-25796(gp)
     6f4:	10bfffcc 	andi	r2,r2,65535
     6f8:	01005084 	movi	r4,322
     6fc:	100b883a 	mov	r5,r2
     700:	00019040 	call	1904 <UsbWrite>

	intStat = A_CHG_IRQ_EN | SOF_EOP_IRQ_EN ;
     704:	00808404 	movi	r2,528
     708:	d0a6d00d 	sth	r2,-25792(gp)
	UsbWrite(HOST1_IRQ_EN_REG, intStat);
     70c:	d0a6d00b 	ldhu	r2,-25792(gp)
     710:	10bfffcc 	andi	r2,r2,65535
     714:	01302314 	movui	r4,49292
     718:	100b883a 	mov	r5,r2
     71c:	00019040 	call	1904 <UsbWrite>
	// STEP 1a end

	// STEP 1b begin
	UsbWrite(COMM_R0,0x0000);//reset time
     720:	01007104 	movi	r4,452
     724:	000b883a 	mov	r5,zero
     728:	00019040 	call	1904 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
     72c:	01007184 	movi	r4,454
     730:	000b883a 	mov	r5,zero
     734:	00019040 	call	1904 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
     738:	01007204 	movi	r4,456
     73c:	000b883a 	mov	r5,zero
     740:	00019040 	call	1904 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
     744:	01007284 	movi	r4,458
     748:	000b883a 	mov	r5,zero
     74c:	00019040 	call	1904 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
     750:	01007304 	movi	r4,460
     754:	000b883a 	mov	r5,zero
     758:	00019040 	call	1904 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
     75c:	01007384 	movi	r4,462
     760:	000b883a 	mov	r5,zero
     764:	00019040 	call	1904 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
     768:	01007404 	movi	r4,464
     76c:	000b883a 	mov	r5,zero
     770:	00019040 	call	1904 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
     774:	01007484 	movi	r4,466
     778:	000b883a 	mov	r5,zero
     77c:	00019040 	call	1904 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
     780:	01007504 	movi	r4,468
     784:	000b883a 	mov	r5,zero
     788:	00019040 	call	1904 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
     78c:	01007584 	movi	r4,470
     790:	000b883a 	mov	r5,zero
     794:	00019040 	call	1904 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
     798:	01007604 	movi	r4,472
     79c:	000b883a 	mov	r5,zero
     7a0:	00019040 	call	1904 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
     7a4:	01007684 	movi	r4,474
     7a8:	000b883a 	mov	r5,zero
     7ac:	00019040 	call	1904 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
     7b0:	01007704 	movi	r4,476
     7b4:	000b883a 	mov	r5,zero
     7b8:	00019040 	call	1904 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
     7bc:	01007784 	movi	r4,478
     7c0:	000b883a 	mov	r5,zero
     7c4:	00019040 	call	1904 <UsbWrite>
	UsbWrite(COMM_INT_NUM,HUSB_SIE1_INIT_INT); //HUSB_SIE1_INIT_INT
     7c8:	01007084 	movi	r4,450
     7cc:	01401c84 	movi	r5,114
     7d0:	00019040 	call	1904 <UsbWrite>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
     7d4:	01000044 	movi	r4,1
     7d8:	01738054 	movui	r5,52737
     7dc:	00002c80 	call	2c8 <IO_write>

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
     7e0:	0001883a 	nop
     7e4:	010000c4 	movi	r4,3
     7e8:	00003300 	call	330 <IO_read>
     7ec:	10bfffcc 	andi	r2,r2,65535
     7f0:	103ffc26 	beq	r2,zero,7e4 <__alt_data_end+0xfffab0b4>
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
     7f4:	0001883a 	nop
     7f8:	01000044 	movi	r4,1
     7fc:	00003300 	call	330 <IO_read>
     800:	10bfffcc 	andi	r2,r2,65535
     804:	1083fb58 	cmpnei	r2,r2,4077
     808:	10000826 	beq	r2,zero,82c <setup_keyboard+0x18c>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
     80c:	01000044 	movi	r4,1
     810:	00003300 	call	330 <IO_read>
     814:	10bfffcc 	andi	r2,r2,65535
     818:	01000074 	movhi	r4,1
     81c:	21074604 	addi	r4,r4,7448
     820:	100b883a 	mov	r5,r2
     824:	00032440 	call	3244 <printf>
		goto USB_HOT_PLUG;
     828:	003fa506 	br	6c0 <__alt_data_end+0xfffaaf90>
	}
	// STEP 1b end

	printf("STEP 1 Complete");
     82c:	01000074 	movhi	r4,1
     830:	21074f04 	addi	r4,r4,7484
     834:	00032440 	call	3244 <printf>
	// STEP 2 begin
	UsbWrite(COMM_INT_NUM,HUSB_RESET_INT); //husb reset
     838:	01007084 	movi	r4,450
     83c:	01401d04 	movi	r5,116
     840:	00019040 	call	1904 <UsbWrite>
	UsbWrite(COMM_R0,0x003c);//reset time
     844:	01007104 	movi	r4,452
     848:	01400f04 	movi	r5,60
     84c:	00019040 	call	1904 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
     850:	01007184 	movi	r4,454
     854:	000b883a 	mov	r5,zero
     858:	00019040 	call	1904 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
     85c:	01007204 	movi	r4,456
     860:	000b883a 	mov	r5,zero
     864:	00019040 	call	1904 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
     868:	01007284 	movi	r4,458
     86c:	000b883a 	mov	r5,zero
     870:	00019040 	call	1904 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
     874:	01007304 	movi	r4,460
     878:	000b883a 	mov	r5,zero
     87c:	00019040 	call	1904 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
     880:	01007384 	movi	r4,462
     884:	000b883a 	mov	r5,zero
     888:	00019040 	call	1904 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
     88c:	01007404 	movi	r4,464
     890:	000b883a 	mov	r5,zero
     894:	00019040 	call	1904 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
     898:	01007484 	movi	r4,466
     89c:	000b883a 	mov	r5,zero
     8a0:	00019040 	call	1904 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
     8a4:	01007504 	movi	r4,468
     8a8:	000b883a 	mov	r5,zero
     8ac:	00019040 	call	1904 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
     8b0:	01007584 	movi	r4,470
     8b4:	000b883a 	mov	r5,zero
     8b8:	00019040 	call	1904 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
     8bc:	01007604 	movi	r4,472
     8c0:	000b883a 	mov	r5,zero
     8c4:	00019040 	call	1904 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
     8c8:	01007684 	movi	r4,474
     8cc:	000b883a 	mov	r5,zero
     8d0:	00019040 	call	1904 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
     8d4:	01007704 	movi	r4,476
     8d8:	000b883a 	mov	r5,zero
     8dc:	00019040 	call	1904 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
     8e0:	01007784 	movi	r4,478
     8e4:	000b883a 	mov	r5,zero
     8e8:	00019040 	call	1904 <UsbWrite>

	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
     8ec:	01000044 	movi	r4,1
     8f0:	01738054 	movui	r5,52737
     8f4:	00002c80 	call	2c8 <IO_write>

	while (IO_read(HPI_MAILBOX) != COMM_ACK)
     8f8:	0001883a 	nop
     8fc:	01000044 	movi	r4,1
     900:	00003300 	call	330 <IO_read>
     904:	10bfffcc 	andi	r2,r2,65535
     908:	1083fb58 	cmpnei	r2,r2,4077
     90c:	10000826 	beq	r2,zero,930 <setup_keyboard+0x290>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
     910:	01000044 	movi	r4,1
     914:	00003300 	call	330 <IO_read>
     918:	10bfffcc 	andi	r2,r2,65535
     91c:	01000074 	movhi	r4,1
     920:	21074604 	addi	r4,r4,7448
     924:	100b883a 	mov	r5,r2
     928:	00032440 	call	3244 <printf>
		goto USB_HOT_PLUG;
     92c:	003f6406 	br	6c0 <__alt_data_end+0xfffaaf90>
	}
	// STEP 2 end

	ctl_reg = USB1_CTL_REG;
     930:	00b02284 	movi	r2,-16246
     934:	d0a6cb0d 	sth	r2,-25812(gp)
	no_device = (A_DP_STAT | A_DM_STAT);
     938:	008c0004 	movi	r2,12288
     93c:	d0a6cb8d 	sth	r2,-25810(gp)
	fs_device = A_DP_STAT;
     940:	00880004 	movi	r2,8192
     944:	d0a6cc0d 	sth	r2,-25808(gp)
	usb_ctl_val = UsbRead(ctl_reg);
     948:	d0a6cb0b 	ldhu	r2,-25812(gp)
     94c:	10bfffcc 	andi	r2,r2,65535
     950:	1009883a 	mov	r4,r2
     954:	00019580 	call	1958 <UsbRead>
     958:	d0a6cf0d 	sth	r2,-25796(gp)
		}
	}
	else
	{
		 check for low speed or full speed by reading D+ and D- lines */
		if (usb_ctl_val & fs_device)
     95c:	d0e6cf0b 	ldhu	r3,-25796(gp)
     960:	d0a6cc0b 	ldhu	r2,-25808(gp)
     964:	1884703a 	and	r2,r3,r2
     968:	10bfffcc 	andi	r2,r2,65535
     96c:	10000426 	beq	r2,zero,980 <setup_keyboard+0x2e0>
		{
			printf("[INFO]: full speed device\n");
     970:	01000074 	movhi	r4,1
     974:	21075304 	addi	r4,r4,7500
     978:	00033380 	call	3338 <puts>
     97c:	00000306 	br	98c <setup_keyboard+0x2ec>
		}
		else
		{
			printf("[INFO]: low speed device\n");
     980:	01000074 	movhi	r4,1
     984:	21075a04 	addi	r4,r4,7528
     988:	00033380 	call	3338 <puts>



	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();
     98c:	0001a4c0 	call	1a4c <UsbSetAddress>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     990:	00000306 	br	9a0 <setup_keyboard+0x300>
	{
		UsbSetAddress();
     994:	0001a4c0 	call	1a4c <UsbSetAddress>
		usleep(10*1000);
     998:	0109c404 	movi	r4,10000
     99c:	000fc780 	call	fc78 <usleep>

	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     9a0:	010000c4 	movi	r4,3
     9a4:	00003300 	call	330 <IO_read>
     9a8:	10bfffcc 	andi	r2,r2,65535
     9ac:	1080040c 	andi	r2,r2,16
     9b0:	103ff826 	beq	r2,zero,994 <__alt_data_end+0xfffab264>
	{
		UsbSetAddress();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     9b4:	00028c80 	call	28c8 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506); // i
     9b8:	01000084 	movi	r4,2
     9bc:	01414184 	movi	r5,1286
     9c0:	00002c80 	call	2c8 <IO_write>
	printf("[ENUM PROCESS]:step 3 TD Status Byte is %x\n",IO_read(HPI_DATA));
     9c4:	0009883a 	mov	r4,zero
     9c8:	00003300 	call	330 <IO_read>
     9cc:	10bfffcc 	andi	r2,r2,65535
     9d0:	01000074 	movhi	r4,1
     9d4:	21076104 	addi	r4,r4,7556
     9d8:	100b883a 	mov	r5,r2
     9dc:	00032440 	call	3244 <printf>

	IO_write(HPI_ADDR,0x0508); // n
     9e0:	01000084 	movi	r4,2
     9e4:	01414204 	movi	r5,1288
     9e8:	00002c80 	call	2c8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     9ec:	0009883a 	mov	r4,zero
     9f0:	00003300 	call	330 <IO_read>
     9f4:	d0a6cf0d 	sth	r2,-25796(gp)
	printf("[ENUM PROCESS]:step 3 TD Control Byte is %x\n",usb_ctl_val);
     9f8:	d0a6cf0b 	ldhu	r2,-25796(gp)
     9fc:	10bfffcc 	andi	r2,r2,65535
     a00:	01000074 	movhi	r4,1
     a04:	21076c04 	addi	r4,r4,7600
     a08:	100b883a 	mov	r5,r2
     a0c:	00032440 	call	3244 <printf>
	while (usb_ctl_val != 0x03) // retries occurred
     a10:	0001883a 	nop
     a14:	d0a6cf0b 	ldhu	r2,-25796(gp)
     a18:	10bfffcc 	andi	r2,r2,65535
     a1c:	108000d8 	cmpnei	r2,r2,3
     a20:	10000326 	beq	r2,zero,a30 <setup_keyboard+0x390>
	{
		usb_ctl_val = UsbGetRetryCnt();
     a24:	000294c0 	call	294c <UsbGetRetryCnt>
     a28:	d0a6cf0d 	sth	r2,-25796(gp)

		goto USB_HOT_PLUG;
     a2c:	003f2406 	br	6c0 <__alt_data_end+0xfffaaf90>
	}

	printf("------------[ENUM PROCESS]:set address done!---------------\n");
     a30:	01000074 	movhi	r4,1
     a34:	21077804 	addi	r4,r4,7648
     a38:	00033380 	call	3338 <puts>

	// STEP 4 begin
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1
     a3c:	0001b480 	call	1b48 <UsbGetDeviceDesc1>

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     a40:	00000306 	br	a50 <setup_keyboard+0x3b0>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
     a44:	0001b480 	call	1b48 <UsbGetDeviceDesc1>
		usleep(10*1000);
     a48:	0109c404 	movi	r4,10000
     a4c:	000fc780 	call	fc78 <usleep>
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     a50:	010000c4 	movi	r4,3
     a54:	00003300 	call	330 <IO_read>
     a58:	10bfffcc 	andi	r2,r2,65535
     a5c:	1080040c 	andi	r2,r2,16
     a60:	103ff826 	beq	r2,zero,a44 <__alt_data_end+0xfffab314>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     a64:	00028c80 	call	28c8 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     a68:	01000084 	movi	r4,2
     a6c:	01414184 	movi	r5,1286
     a70:	00002c80 	call	2c8 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
     a74:	0009883a 	mov	r4,zero
     a78:	00003300 	call	330 <IO_read>
     a7c:	10bfffcc 	andi	r2,r2,65535
     a80:	01000074 	movhi	r4,1
     a84:	21078704 	addi	r4,r4,7708
     a88:	100b883a 	mov	r5,r2
     a8c:	00032440 	call	3244 <printf>

	IO_write(HPI_ADDR,0x0508);
     a90:	01000084 	movi	r4,2
     a94:	01414204 	movi	r5,1288
     a98:	00002c80 	call	2c8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     a9c:	0009883a 	mov	r4,zero
     aa0:	00003300 	call	330 <IO_read>
     aa4:	d0a6cf0d 	sth	r2,-25796(gp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
     aa8:	d0a6cf0b 	ldhu	r2,-25796(gp)
     aac:	10bfffcc 	andi	r2,r2,65535
     ab0:	01000074 	movhi	r4,1
     ab4:	21079204 	addi	r4,r4,7752
     ab8:	100b883a 	mov	r5,r2
     abc:	00032440 	call	3244 <printf>
	while (usb_ctl_val != 0x03)
     ac0:	00000206 	br	acc <setup_keyboard+0x42c>
	{
		usb_ctl_val = UsbGetRetryCnt();
     ac4:	000294c0 	call	294c <UsbGetRetryCnt>
     ac8:	d0a6cf0d 	sth	r2,-25796(gp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
     acc:	d0a6cf0b 	ldhu	r2,-25796(gp)
     ad0:	10bfffcc 	andi	r2,r2,65535
     ad4:	108000d8 	cmpnei	r2,r2,3
     ad8:	103ffa1e 	bne	r2,zero,ac4 <__alt_data_end+0xfffab394>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get device descriptor-1 done!-----------------\n");
     adc:	01000074 	movhi	r4,1
     ae0:	21079e04 	addi	r4,r4,7800
     ae4:	00033380 	call	3338 <puts>


	//--------------------------------get device descriptor-2---------------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2
     ae8:	0001c8c0 	call	1c8c <UsbGetDeviceDesc2>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     aec:	00000306 	br	afc <setup_keyboard+0x45c>
	{
		//resend the get device descriptor
		//get device descriptor
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
     af0:	0001c8c0 	call	1c8c <UsbGetDeviceDesc2>
		usleep(10*1000);
     af4:	0109c404 	movi	r4,10000
     af8:	000fc780 	call	fc78 <usleep>
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     afc:	010000c4 	movi	r4,3
     b00:	00003300 	call	330 <IO_read>
     b04:	10bfffcc 	andi	r2,r2,65535
     b08:	1080040c 	andi	r2,r2,16
     b0c:	103ff826 	beq	r2,zero,af0 <__alt_data_end+0xfffab3c0>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     b10:	00028c80 	call	28c8 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     b14:	01000084 	movi	r4,2
     b18:	01414184 	movi	r5,1286
     b1c:	00002c80 	call	2c8 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
     b20:	0009883a 	mov	r4,zero
     b24:	00003300 	call	330 <IO_read>
     b28:	10bfffcc 	andi	r2,r2,65535
     b2c:	01000074 	movhi	r4,1
     b30:	21078704 	addi	r4,r4,7708
     b34:	100b883a 	mov	r5,r2
     b38:	00032440 	call	3244 <printf>

	IO_write(HPI_ADDR,0x0508);
     b3c:	01000084 	movi	r4,2
     b40:	01414204 	movi	r5,1288
     b44:	00002c80 	call	2c8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     b48:	0009883a 	mov	r4,zero
     b4c:	00003300 	call	330 <IO_read>
     b50:	d0a6cf0d 	sth	r2,-25796(gp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
     b54:	d0a6cf0b 	ldhu	r2,-25796(gp)
     b58:	10bfffcc 	andi	r2,r2,65535
     b5c:	01000074 	movhi	r4,1
     b60:	21079204 	addi	r4,r4,7752
     b64:	100b883a 	mov	r5,r2
     b68:	00032440 	call	3244 <printf>
	while (usb_ctl_val != 0x03)
     b6c:	00000206 	br	b78 <setup_keyboard+0x4d8>
	{
		usb_ctl_val = UsbGetRetryCnt();
     b70:	000294c0 	call	294c <UsbGetRetryCnt>
     b74:	d0a6cf0d 	sth	r2,-25796(gp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
     b78:	d0a6cf0b 	ldhu	r2,-25796(gp)
     b7c:	10bfffcc 	andi	r2,r2,65535
     b80:	108000d8 	cmpnei	r2,r2,3
     b84:	103ffa1e 	bne	r2,zero,b70 <__alt_data_end+0xfffab440>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get device descriptor-2 done!--------------\n");
     b88:	01000074 	movhi	r4,1
     b8c:	2107b204 	addi	r4,r4,7880
     b90:	00033380 	call	3338 <puts>


	// STEP 5 begin
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1
     b94:	0001e600 	call	1e60 <UsbGetConfigDesc1>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     b98:	00000306 	br	ba8 <setup_keyboard+0x508>
	{
		//resend the get device descriptor
		//get device descriptor

		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
     b9c:	0001e600 	call	1e60 <UsbGetConfigDesc1>
		usleep(10*1000);
     ba0:	0109c404 	movi	r4,10000
     ba4:	000fc780 	call	fc78 <usleep>
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     ba8:	010000c4 	movi	r4,3
     bac:	00003300 	call	330 <IO_read>
     bb0:	10bfffcc 	andi	r2,r2,65535
     bb4:	1080040c 	andi	r2,r2,16
     bb8:	103ff826 	beq	r2,zero,b9c <__alt_data_end+0xfffab46c>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     bbc:	00028c80 	call	28c8 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     bc0:	01000084 	movi	r4,2
     bc4:	01414184 	movi	r5,1286
     bc8:	00002c80 	call	2c8 <IO_write>
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));
     bcc:	0009883a 	mov	r4,zero
     bd0:	00003300 	call	330 <IO_read>
     bd4:	10bfffcc 	andi	r2,r2,65535
     bd8:	01000074 	movhi	r4,1
     bdc:	2107c404 	addi	r4,r4,7952
     be0:	100b883a 	mov	r5,r2
     be4:	00032440 	call	3244 <printf>

	IO_write(HPI_ADDR,0x0508);
     be8:	01000084 	movi	r4,2
     bec:	01414204 	movi	r5,1288
     bf0:	00002c80 	call	2c8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     bf4:	0009883a 	mov	r4,zero
     bf8:	00003300 	call	330 <IO_read>
     bfc:	d0a6cf0d 	sth	r2,-25796(gp)
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
     c00:	d0a6cf0b 	ldhu	r2,-25796(gp)
     c04:	10bfffcc 	andi	r2,r2,65535
     c08:	01000074 	movhi	r4,1
     c0c:	2107cf04 	addi	r4,r4,7996
     c10:	100b883a 	mov	r5,r2
     c14:	00032440 	call	3244 <printf>
	while (usb_ctl_val != 0x03)
     c18:	00000206 	br	c24 <setup_keyboard+0x584>
	{
		usb_ctl_val = UsbGetRetryCnt();
     c1c:	000294c0 	call	294c <UsbGetRetryCnt>
     c20:	d0a6cf0d 	sth	r2,-25796(gp)
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
     c24:	d0a6cf0b 	ldhu	r2,-25796(gp)
     c28:	10bfffcc 	andi	r2,r2,65535
     c2c:	108000d8 	cmpnei	r2,r2,3
     c30:	103ffa1e 	bne	r2,zero,c1c <__alt_data_end+0xfffab4ec>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}
	printf("------------[ENUM PROCESS]:get configuration descriptor-1 pass------------\n");
     c34:	01000074 	movhi	r4,1
     c38:	2107db04 	addi	r4,r4,8044
     c3c:	00033380 	call	3338 <puts>

	// STEP 6 begin
	//-----------------------------------get configuration descriptor-2------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2
     c40:	0001fec0 	call	1fec <UsbGetConfigDesc2>

	usleep(100*1000);
     c44:	010000b4 	movhi	r4,2
     c48:	2121a804 	addi	r4,r4,-31072
     c4c:	000fc780 	call	fc78 <usleep>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     c50:	00000306 	br	c60 <setup_keyboard+0x5c0>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
     c54:	0001fec0 	call	1fec <UsbGetConfigDesc2>
		usleep(10*1000);
     c58:	0109c404 	movi	r4,10000
     c5c:	000fc780 	call	fc78 <usleep>
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2

	usleep(100*1000);
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     c60:	010000c4 	movi	r4,3
     c64:	00003300 	call	330 <IO_read>
     c68:	10bfffcc 	andi	r2,r2,65535
     c6c:	1080040c 	andi	r2,r2,16
     c70:	103ff826 	beq	r2,zero,c54 <__alt_data_end+0xfffab524>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     c74:	00028c80 	call	28c8 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     c78:	01000084 	movi	r4,2
     c7c:	01414184 	movi	r5,1286
     c80:	00002c80 	call	2c8 <IO_write>
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));
     c84:	0009883a 	mov	r4,zero
     c88:	00003300 	call	330 <IO_read>
     c8c:	10bfffcc 	andi	r2,r2,65535
     c90:	01000074 	movhi	r4,1
     c94:	2107ee04 	addi	r4,r4,8120
     c98:	100b883a 	mov	r5,r2
     c9c:	00032440 	call	3244 <printf>

	IO_write(HPI_ADDR,0x0508);
     ca0:	01000084 	movi	r4,2
     ca4:	01414204 	movi	r5,1288
     ca8:	00002c80 	call	2c8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     cac:	0009883a 	mov	r4,zero
     cb0:	00003300 	call	330 <IO_read>
     cb4:	d0a6cf0d 	sth	r2,-25796(gp)
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
     cb8:	d0a6cf0b 	ldhu	r2,-25796(gp)
     cbc:	10bfffcc 	andi	r2,r2,65535
     cc0:	01000074 	movhi	r4,1
     cc4:	2107f904 	addi	r4,r4,8164
     cc8:	100b883a 	mov	r5,r2
     ccc:	00032440 	call	3244 <printf>
	while (usb_ctl_val != 0x03)
     cd0:	00000206 	br	cdc <setup_keyboard+0x63c>
	{
		usb_ctl_val = UsbGetRetryCnt();
     cd4:	000294c0 	call	294c <UsbGetRetryCnt>
     cd8:	d0a6cf0d 	sth	r2,-25796(gp)
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
     cdc:	d0a6cf0b 	ldhu	r2,-25796(gp)
     ce0:	10bfffcc 	andi	r2,r2,65535
     ce4:	108000d8 	cmpnei	r2,r2,3
     ce8:	103ffa1e 	bne	r2,zero,cd4 <__alt_data_end+0xfffab5a4>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("-----------[ENUM PROCESS]:get configuration descriptor-2 done!------------\n");
     cec:	01000074 	movhi	r4,1
     cf0:	21080504 	addi	r4,r4,8212
     cf4:	00033380 	call	3338 <puts>


	// ---------------------------------get device info---------------------------------------------//

	// TASK: Write the address to read from the memory for byte 7 of the interface descriptor to HPI_ADDR.
	IO_write(HPI_ADDR,0x056c);
     cf8:	01000084 	movi	r4,2
     cfc:	01415b04 	movi	r5,1388
     d00:	00002c80 	call	2c8 <IO_write>
	code = IO_read(HPI_DATA);
     d04:	0009883a 	mov	r4,zero
     d08:	00003300 	call	330 <IO_read>
     d0c:	d0a6d10d 	sth	r2,-25788(gp)
	code = code & 0x003;
     d10:	d0a6d10b 	ldhu	r2,-25788(gp)
     d14:	108000cc 	andi	r2,r2,3
     d18:	d0a6d10d 	sth	r2,-25788(gp)
	printf("\ncode = %x\n", code);
     d1c:	d0a6d10b 	ldhu	r2,-25788(gp)
     d20:	10bfffcc 	andi	r2,r2,65535
     d24:	01000074 	movhi	r4,1
     d28:	21081804 	addi	r4,r4,8288
     d2c:	100b883a 	mov	r5,r2
     d30:	00032440 	call	3244 <printf>

	if (code == 0x01)
     d34:	d0a6d10b 	ldhu	r2,-25788(gp)
     d38:	10bfffcc 	andi	r2,r2,65535
     d3c:	10800058 	cmpnei	r2,r2,1
     d40:	1000041e 	bne	r2,zero,d54 <setup_keyboard+0x6b4>
	{
		printf("\n[INFO]:check TD rec data7 \n[INFO]:Keyboard Detected!!!\n\n");
     d44:	01000074 	movhi	r4,1
     d48:	21081b04 	addi	r4,r4,8300
     d4c:	00033380 	call	3338 <puts>
     d50:	00000306 	br	d60 <setup_keyboard+0x6c0>
	}
	else
	{
		printf("\n[INFO]:Keyboard Not Detected!!! \n\n");
     d54:	01000074 	movhi	r4,1
     d58:	21082a04 	addi	r4,r4,8360
     d5c:	00033380 	call	3338 <puts>
	}

	// TASK: Write the address to read from the memory for the endpoint descriptor to HPI_ADDR.

	IO_write(HPI_ADDR,0x0576);
     d60:	01000084 	movi	r4,2
     d64:	01415d84 	movi	r5,1398
     d68:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x073F);
     d6c:	0009883a 	mov	r4,zero
     d70:	0141cfc4 	movi	r5,1855
     d74:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x8105);
     d78:	0009883a 	mov	r4,zero
     d7c:	01604154 	movui	r5,33029
     d80:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0003);
     d84:	0009883a 	mov	r4,zero
     d88:	014000c4 	movi	r5,3
     d8c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);
     d90:	0009883a 	mov	r4,zero
     d94:	01400204 	movi	r5,8
     d98:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0xAC0A);
     d9c:	0009883a 	mov	r4,zero
     da0:	016b0294 	movui	r5,44042
     da4:	00002c80 	call	2c8 <IO_write>
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0576); //HUSB_SIE1_pCurrentTDPtr
     da8:	01006c04 	movi	r4,432
     dac:	01415d84 	movi	r5,1398
     db0:	00019040 	call	1904 <UsbWrite>

	//data_size = (IO_read(HPI_DATA)>>8)&0x0ff;
	//data_size = 0x08;//(IO_read(HPI_DATA))&0x0ff;
	//UsbPrintMem();
	IO_write(HPI_ADDR,0x057c);
     db4:	01000084 	movi	r4,2
     db8:	01415f04 	movi	r5,1404
     dbc:	00002c80 	call	2c8 <IO_write>
	data_size = (IO_read(HPI_DATA))&0x0ff;
     dc0:	0009883a 	mov	r4,zero
     dc4:	00003300 	call	330 <IO_read>
     dc8:	d0a6cf85 	stb	r2,-25794(gp)
	printf("[ENUM PROCESS]:data packet size is %d\n",data_size);
     dcc:	d0a6cf83 	ldbu	r2,-25794(gp)
     dd0:	10803fcc 	andi	r2,r2,255
     dd4:	01000074 	movhi	r4,1
     dd8:	21083304 	addi	r4,r4,8396
     ddc:	100b883a 	mov	r5,r2
     de0:	00032440 	call	3244 <printf>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration
     de4:	00022500 	call	2250 <UsbSetConfig>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     de8:	00000306 	br	df8 <setup_keyboard+0x758>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
     dec:	00022500 	call	2250 <UsbSetConfig>
		usleep(10*1000);
     df0:	0109c404 	movi	r4,10000
     df4:	000fc780 	call	fc78 <usleep>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     df8:	010000c4 	movi	r4,3
     dfc:	00003300 	call	330 <IO_read>
     e00:	10bfffcc 	andi	r2,r2,65535
     e04:	1080040c 	andi	r2,r2,16
     e08:	103ff826 	beq	r2,zero,dec <__alt_data_end+0xfffab6bc>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     e0c:	00028c80 	call	28c8 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     e10:	01000084 	movi	r4,2
     e14:	01414184 	movi	r5,1286
     e18:	00002c80 	call	2c8 <IO_write>
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));
     e1c:	0009883a 	mov	r4,zero
     e20:	00003300 	call	330 <IO_read>
     e24:	10bfffcc 	andi	r2,r2,65535
     e28:	01000074 	movhi	r4,1
     e2c:	21083d04 	addi	r4,r4,8436
     e30:	100b883a 	mov	r5,r2
     e34:	00032440 	call	3244 <printf>

	IO_write(HPI_ADDR,0x0508);
     e38:	01000084 	movi	r4,2
     e3c:	01414204 	movi	r5,1288
     e40:	00002c80 	call	2c8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     e44:	0009883a 	mov	r4,zero
     e48:	00003300 	call	330 <IO_read>
     e4c:	d0a6cf0d 	sth	r2,-25796(gp)
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
     e50:	d0a6cf0b 	ldhu	r2,-25796(gp)
     e54:	10bfffcc 	andi	r2,r2,65535
     e58:	01000074 	movhi	r4,1
     e5c:	21084804 	addi	r4,r4,8480
     e60:	100b883a 	mov	r5,r2
     e64:	00032440 	call	3244 <printf>
	while (usb_ctl_val != 0x03)
     e68:	00000206 	br	e74 <setup_keyboard+0x7d4>
	{
		usb_ctl_val = UsbGetRetryCnt();
     e6c:	000294c0 	call	294c <UsbGetRetryCnt>
     e70:	d0a6cf0d 	sth	r2,-25796(gp)
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
     e74:	d0a6cf0b 	ldhu	r2,-25796(gp)
     e78:	10bfffcc 	andi	r2,r2,65535
     e7c:	108000d8 	cmpnei	r2,r2,3
     e80:	103ffa1e 	bne	r2,zero,e6c <__alt_data_end+0xfffab73c>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:set configuration done!-------------------\n");
     e84:	01000074 	movhi	r4,1
     e88:	21085404 	addi	r4,r4,8528
     e8c:	00033380 	call	3338 <puts>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();
     e90:	000234c0 	call	234c <UsbClassRequest>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     e94:	00000306 	br	ea4 <setup_keyboard+0x804>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
     e98:	000234c0 	call	234c <UsbClassRequest>
		usleep(10*1000);
     e9c:	0109c404 	movi	r4,10000
     ea0:	000fc780 	call	fc78 <usleep>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     ea4:	010000c4 	movi	r4,3
     ea8:	00003300 	call	330 <IO_read>
     eac:	10bfffcc 	andi	r2,r2,65535
     eb0:	1080040c 	andi	r2,r2,16
     eb4:	103ff826 	beq	r2,zero,e98 <__alt_data_end+0xfffab768>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     eb8:	00028c80 	call	28c8 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     ebc:	01000084 	movi	r4,2
     ec0:	01414184 	movi	r5,1286
     ec4:	00002c80 	call	2c8 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
     ec8:	0009883a 	mov	r4,zero
     ecc:	00003300 	call	330 <IO_read>
     ed0:	10bfffcc 	andi	r2,r2,65535
     ed4:	01000074 	movhi	r4,1
     ed8:	21086604 	addi	r4,r4,8600
     edc:	100b883a 	mov	r5,r2
     ee0:	00032440 	call	3244 <printf>

	IO_write(HPI_ADDR,0x0508);
     ee4:	01000084 	movi	r4,2
     ee8:	01414204 	movi	r5,1288
     eec:	00002c80 	call	2c8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     ef0:	0009883a 	mov	r4,zero
     ef4:	00003300 	call	330 <IO_read>
     ef8:	d0a6cf0d 	sth	r2,-25796(gp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
     efc:	d0a6cf0b 	ldhu	r2,-25796(gp)
     f00:	10bfffcc 	andi	r2,r2,65535
     f04:	01000074 	movhi	r4,1
     f08:	21087104 	addi	r4,r4,8644
     f0c:	100b883a 	mov	r5,r2
     f10:	00032440 	call	3244 <printf>
	while (usb_ctl_val != 0x03)
     f14:	00000206 	br	f20 <setup_keyboard+0x880>
	{
		usb_ctl_val = UsbGetRetryCnt();
     f18:	000294c0 	call	294c <UsbGetRetryCnt>
     f1c:	d0a6cf0d 	sth	r2,-25796(gp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
     f20:	d0a6cf0b 	ldhu	r2,-25796(gp)
     f24:	10bfffcc 	andi	r2,r2,65535
     f28:	108000d8 	cmpnei	r2,r2,3
     f2c:	103ffa1e 	bne	r2,zero,f18 <__alt_data_end+0xfffab7e8>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("------------[ENUM PROCESS]:class request out done!-------------------\n");
     f30:	01000074 	movhi	r4,1
     f34:	21087d04 	addi	r4,r4,8692
     f38:	00033380 	call	3338 <puts>

	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();
     f3c:	00024480 	call	2448 <UsbGetHidDesc>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     f40:	00000306 	br	f50 <setup_keyboard+0x8b0>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
     f44:	00024480 	call	2448 <UsbGetHidDesc>
		usleep(10*1000);
     f48:	0109c404 	movi	r4,10000
     f4c:	000fc780 	call	fc78 <usleep>
	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     f50:	010000c4 	movi	r4,3
     f54:	00003300 	call	330 <IO_read>
     f58:	10bfffcc 	andi	r2,r2,65535
     f5c:	1080040c 	andi	r2,r2,16
     f60:	103ff826 	beq	r2,zero,f44 <__alt_data_end+0xfffab814>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     f64:	00028c80 	call	28c8 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     f68:	01000084 	movi	r4,2
     f6c:	01414184 	movi	r5,1286
     f70:	00002c80 	call	2c8 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
     f74:	0009883a 	mov	r4,zero
     f78:	00003300 	call	330 <IO_read>
     f7c:	10bfffcc 	andi	r2,r2,65535
     f80:	01000074 	movhi	r4,1
     f84:	21086604 	addi	r4,r4,8600
     f88:	100b883a 	mov	r5,r2
     f8c:	00032440 	call	3244 <printf>

	IO_write(HPI_ADDR,0x0508);
     f90:	01000084 	movi	r4,2
     f94:	01414204 	movi	r5,1288
     f98:	00002c80 	call	2c8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     f9c:	0009883a 	mov	r4,zero
     fa0:	00003300 	call	330 <IO_read>
     fa4:	d0a6cf0d 	sth	r2,-25796(gp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
     fa8:	d0a6cf0b 	ldhu	r2,-25796(gp)
     fac:	10bfffcc 	andi	r2,r2,65535
     fb0:	01000074 	movhi	r4,1
     fb4:	21087104 	addi	r4,r4,8644
     fb8:	100b883a 	mov	r5,r2
     fbc:	00032440 	call	3244 <printf>
	while (usb_ctl_val != 0x03)
     fc0:	00000206 	br	fcc <setup_keyboard+0x92c>
	{
		usb_ctl_val = UsbGetRetryCnt();
     fc4:	000294c0 	call	294c <UsbGetRetryCnt>
     fc8:	d0a6cf0d 	sth	r2,-25796(gp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
     fcc:	d0a6cf0b 	ldhu	r2,-25796(gp)
     fd0:	10bfffcc 	andi	r2,r2,65535
     fd4:	108000d8 	cmpnei	r2,r2,3
     fd8:	103ffa1e 	bne	r2,zero,fc4 <__alt_data_end+0xfffab894>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get descriptor (class 0x21) done!-------------------\n");
     fdc:	01000074 	movhi	r4,1
     fe0:	21088f04 	addi	r4,r4,8764
     fe4:	00033380 	call	3338 <puts>

	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
     fe8:	000258c0 	call	258c <UsbGetReportDesc>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     fec:	00000306 	br	ffc <setup_keyboard+0x95c>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
     ff0:	000258c0 	call	258c <UsbGetReportDesc>
		usleep(10*1000);
     ff4:	0109c404 	movi	r4,10000
     ff8:	000fc780 	call	fc78 <usleep>
	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     ffc:	010000c4 	movi	r4,3
    1000:	00003300 	call	330 <IO_read>
    1004:	10bfffcc 	andi	r2,r2,65535
    1008:	1080040c 	andi	r2,r2,16
    100c:	103ff826 	beq	r2,zero,ff0 <__alt_data_end+0xfffab8c0>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
    1010:	00028c80 	call	28c8 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
    1014:	01000084 	movi	r4,2
    1018:	01414184 	movi	r5,1286
    101c:	00002c80 	call	2c8 <IO_write>
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));
    1020:	0009883a 	mov	r4,zero
    1024:	00003300 	call	330 <IO_read>
    1028:	10bfffcc 	andi	r2,r2,65535
    102c:	01000074 	movhi	r4,1
    1030:	2108a304 	addi	r4,r4,8844
    1034:	100b883a 	mov	r5,r2
    1038:	00032440 	call	3244 <printf>

	IO_write(HPI_ADDR,0x0508);
    103c:	01000084 	movi	r4,2
    1040:	01414204 	movi	r5,1288
    1044:	00002c80 	call	2c8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
    1048:	0009883a 	mov	r4,zero
    104c:	00003300 	call	330 <IO_read>
    1050:	d0a6cf0d 	sth	r2,-25796(gp)
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
    1054:	d0a6cf0b 	ldhu	r2,-25796(gp)
    1058:	10bfffcc 	andi	r2,r2,65535
    105c:	01000074 	movhi	r4,1
    1060:	2108af04 	addi	r4,r4,8892
    1064:	100b883a 	mov	r5,r2
    1068:	00032440 	call	3244 <printf>
	while (usb_ctl_val != 0x03)
    106c:	00000206 	br	1078 <setup_keyboard+0x9d8>
	{
		usb_ctl_val = UsbGetRetryCnt();
    1070:	000294c0 	call	294c <UsbGetRetryCnt>
    1074:	d0a6cf0d 	sth	r2,-25796(gp)
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
    1078:	d0a6cf0b 	ldhu	r2,-25796(gp)
    107c:	10bfffcc 	andi	r2,r2,65535
    1080:	108000d8 	cmpnei	r2,r2,3
    1084:	103ffa1e 	bne	r2,zero,1070 <__alt_data_end+0xfffab940>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get descriptor (class 0x22) done!----------------\n");
    1088:	01000074 	movhi	r4,1
    108c:	2108bb04 	addi	r4,r4,8940
    1090:	00033380 	call	3338 <puts>


	//-----------------------------------get keycode value------------------------------------------------//


	return;
    1094:	0001883a 	nop
}
    1098:	e037883a 	mov	sp,fp
    109c:	dfc00117 	ldw	ra,4(sp)
    10a0:	df000017 	ldw	fp,0(sp)
    10a4:	dec00204 	addi	sp,sp,8
    10a8:	f800283a 	ret

000010ac <renderer>:

void move_player(player *current, int x_pos, int y_pos);
void fire_projectile(player *current);

void renderer(int x, int y, int sprite_num, int is_shadow)
{
    10ac:	defffb04 	addi	sp,sp,-20
    10b0:	df000415 	stw	fp,16(sp)
    10b4:	df000404 	addi	fp,sp,16
    10b8:	e13ffc15 	stw	r4,-16(fp)
    10bc:	e17ffd15 	stw	r5,-12(fp)
    10c0:	e1bffe15 	stw	r6,-8(fp)
    10c4:	e1ffff15 	stw	r7,-4(fp)
	if(is_shadow==1)
    10c8:	e0bfff17 	ldw	r2,-4(fp)
    10cc:	10800058 	cmpnei	r2,r2,1
    10d0:	1000051e 	bne	r2,zero,10e8 <renderer+0x3c>
		*sw_to_hw = 4;
    10d4:	00800234 	movhi	r2,8
    10d8:	10842004 	addi	r2,r2,4224
    10dc:	00c00104 	movi	r3,4
    10e0:	10c00015 	stw	r3,0(r2)
    10e4:	00000606 	br	1100 <renderer+0x54>
	else
		*sw_to_hw &= 0;
    10e8:	00800234 	movhi	r2,8
    10ec:	10842004 	addi	r2,r2,4224
    10f0:	10800017 	ldw	r2,0(r2)
    10f4:	00800234 	movhi	r2,8
    10f8:	10842004 	addi	r2,r2,4224
    10fc:	10000015 	stw	zero,0(r2)
	*sprite_number = sprite_num;
    1100:	00800234 	movhi	r2,8
    1104:	10842804 	addi	r2,r2,4256
    1108:	e0fffe17 	ldw	r3,-8(fp)
    110c:	10c00015 	stw	r3,0(r2)
	*sprite_xy = 1024*x + y;
    1110:	00800234 	movhi	r2,8
    1114:	10842404 	addi	r2,r2,4240
    1118:	e0fffc17 	ldw	r3,-16(fp)
    111c:	180892ba 	slli	r4,r3,10
    1120:	e0fffd17 	ldw	r3,-12(fp)
    1124:	20c7883a 	add	r3,r4,r3
    1128:	10c00015 	stw	r3,0(r2)
	*sw_to_hw |= 2;
    112c:	00800234 	movhi	r2,8
    1130:	10842004 	addi	r2,r2,4224
    1134:	00c00234 	movhi	r3,8
    1138:	18c42004 	addi	r3,r3,4224
    113c:	18c00017 	ldw	r3,0(r3)
    1140:	18c00094 	ori	r3,r3,2
    1144:	10c00015 	stw	r3,0(r2)
	while(*hw_to_sw%2 != 0)
    1148:	0001883a 	nop
    114c:	00800234 	movhi	r2,8
    1150:	10841c04 	addi	r2,r2,4208
    1154:	10800017 	ldw	r2,0(r2)
    1158:	1080004c 	andi	r2,r2,1
    115c:	103ffb1e 	bne	r2,zero,114c <__alt_data_end+0xfffaba1c>
	{}
	*sw_to_hw &= ~2;
    1160:	00800234 	movhi	r2,8
    1164:	10842004 	addi	r2,r2,4224
    1168:	00c00234 	movhi	r3,8
    116c:	18c42004 	addi	r3,r3,4224
    1170:	19000017 	ldw	r4,0(r3)
    1174:	00ffff44 	movi	r3,-3
    1178:	20c6703a 	and	r3,r4,r3
    117c:	10c00015 	stw	r3,0(r2)
	while(*hw_to_sw != 1)
    1180:	0001883a 	nop
    1184:	00800234 	movhi	r2,8
    1188:	10841c04 	addi	r2,r2,4208
    118c:	10800017 	ldw	r2,0(r2)
    1190:	10800058 	cmpnei	r2,r2,1
    1194:	103ffb1e 	bne	r2,zero,1184 <__alt_data_end+0xfffaba54>
	{}
	*sw_to_hw |= 1;
    1198:	00800234 	movhi	r2,8
    119c:	10842004 	addi	r2,r2,4224
    11a0:	00c00234 	movhi	r3,8
    11a4:	18c42004 	addi	r3,r3,4224
    11a8:	18c00017 	ldw	r3,0(r3)
    11ac:	18c00054 	ori	r3,r3,1
    11b0:	10c00015 	stw	r3,0(r2)
	return;
    11b4:	0001883a 	nop
}
    11b8:	e037883a 	mov	sp,fp
    11bc:	df000017 	ldw	fp,0(sp)
    11c0:	dec00104 	addi	sp,sp,4
    11c4:	f800283a 	ret

000011c8 <render_shadows>:

void render_shadows(player *first,player *second){
    11c8:	defffc04 	addi	sp,sp,-16
    11cc:	dfc00315 	stw	ra,12(sp)
    11d0:	df000215 	stw	fp,8(sp)
    11d4:	df000204 	addi	fp,sp,8
    11d8:	e13ffe15 	stw	r4,-8(fp)
    11dc:	e17fff15 	stw	r5,-4(fp)
	if(first==NULL || second ==NULL){
    11e0:	e0bffe17 	ldw	r2,-8(fp)
    11e4:	10000226 	beq	r2,zero,11f0 <render_shadows+0x28>
    11e8:	e0bfff17 	ldw	r2,-4(fp)
    11ec:	1000041e 	bne	r2,zero,1200 <render_shadows+0x38>
			printf("players not instantiated");
    11f0:	01000074 	movhi	r4,1
    11f4:	2108cf04 	addi	r4,r4,9020
    11f8:	00032440 	call	3244 <printf>
    11fc:	00001406 	br	1250 <render_shadows+0x88>
	}
	else{
		renderer(first->old_x,first->old_y,first->id,1);
    1200:	e0bffe17 	ldw	r2,-8(fp)
    1204:	11000417 	ldw	r4,16(r2)
    1208:	e0bffe17 	ldw	r2,-8(fp)
    120c:	10c00517 	ldw	r3,20(r2)
    1210:	e0bffe17 	ldw	r2,-8(fp)
    1214:	10800317 	ldw	r2,12(r2)
    1218:	180b883a 	mov	r5,r3
    121c:	100d883a 	mov	r6,r2
    1220:	01c00044 	movi	r7,1
    1224:	00010ac0 	call	10ac <renderer>
		renderer(second->old_x,second->old_y,second->id,1);
    1228:	e0bfff17 	ldw	r2,-4(fp)
    122c:	11000417 	ldw	r4,16(r2)
    1230:	e0bfff17 	ldw	r2,-4(fp)
    1234:	10c00517 	ldw	r3,20(r2)
    1238:	e0bfff17 	ldw	r2,-4(fp)
    123c:	10800317 	ldw	r2,12(r2)
    1240:	180b883a 	mov	r5,r3
    1244:	100d883a 	mov	r6,r2
    1248:	01c00044 	movi	r7,1
    124c:	00010ac0 	call	10ac <renderer>
	}
	return;
    1250:	0001883a 	nop
}
    1254:	e037883a 	mov	sp,fp
    1258:	dfc00117 	ldw	ra,4(sp)
    125c:	df000017 	ldw	fp,0(sp)
    1260:	dec00204 	addi	sp,sp,8
    1264:	f800283a 	ret

00001268 <render_shadow>:
void render_shadow(player *current){
    1268:	defffd04 	addi	sp,sp,-12
    126c:	dfc00215 	stw	ra,8(sp)
    1270:	df000115 	stw	fp,4(sp)
    1274:	df000104 	addi	fp,sp,4
    1278:	e13fff15 	stw	r4,-4(fp)
	if(current==NULL){
    127c:	e0bfff17 	ldw	r2,-4(fp)
    1280:	1000041e 	bne	r2,zero,1294 <render_shadow+0x2c>
			printf("players not instantiated");
    1284:	01000074 	movhi	r4,1
    1288:	2108cf04 	addi	r4,r4,9020
    128c:	00032440 	call	3244 <printf>
    1290:	00001206 	br	12dc <render_shadow+0x74>
	}
	else{
		renderer(current->old_x,current->old_y,current->id,1);
    1294:	e0bfff17 	ldw	r2,-4(fp)
    1298:	11000417 	ldw	r4,16(r2)
    129c:	e0bfff17 	ldw	r2,-4(fp)
    12a0:	10c00517 	ldw	r3,20(r2)
    12a4:	e0bfff17 	ldw	r2,-4(fp)
    12a8:	10800317 	ldw	r2,12(r2)
    12ac:	180b883a 	mov	r5,r3
    12b0:	100d883a 	mov	r6,r2
    12b4:	01c00044 	movi	r7,1
    12b8:	00010ac0 	call	10ac <renderer>
		current->old_x=current->x_pos;
    12bc:	e0bfff17 	ldw	r2,-4(fp)
    12c0:	10c00017 	ldw	r3,0(r2)
    12c4:	e0bfff17 	ldw	r2,-4(fp)
    12c8:	10c00415 	stw	r3,16(r2)
		current->old_y=current->y_pos;
    12cc:	e0bfff17 	ldw	r2,-4(fp)
    12d0:	10c00117 	ldw	r3,4(r2)
    12d4:	e0bfff17 	ldw	r2,-4(fp)
    12d8:	10c00515 	stw	r3,20(r2)
	}
	return;
    12dc:	0001883a 	nop
}
    12e0:	e037883a 	mov	sp,fp
    12e4:	dfc00117 	ldw	ra,4(sp)
    12e8:	df000017 	ldw	fp,0(sp)
    12ec:	dec00204 	addi	sp,sp,8
    12f0:	f800283a 	ret

000012f4 <render_players>:

void render_players(player *first,player *second){
    12f4:	defffc04 	addi	sp,sp,-16
    12f8:	dfc00315 	stw	ra,12(sp)
    12fc:	df000215 	stw	fp,8(sp)
    1300:	df000204 	addi	fp,sp,8
    1304:	e13ffe15 	stw	r4,-8(fp)
    1308:	e17fff15 	stw	r5,-4(fp)
	if(first==NULL || second ==NULL){
    130c:	e0bffe17 	ldw	r2,-8(fp)
    1310:	10000226 	beq	r2,zero,131c <render_players+0x28>
    1314:	e0bfff17 	ldw	r2,-4(fp)
    1318:	1000041e 	bne	r2,zero,132c <render_players+0x38>
		printf("players not instantiated");
    131c:	01000074 	movhi	r4,1
    1320:	2108cf04 	addi	r4,r4,9020
    1324:	00032440 	call	3244 <printf>
    1328:	00001e06 	br	13a4 <render_players+0xb0>
	}
	else{
		if(render_check(first)==0){
    132c:	e13ffe17 	ldw	r4,-8(fp)
    1330:	00013b80 	call	13b8 <render_check>
    1334:	10000c1e 	bne	r2,zero,1368 <render_players+0x74>
			render_shadow(first);
    1338:	e13ffe17 	ldw	r4,-8(fp)
    133c:	00012680 	call	1268 <render_shadow>
			renderer(first->x_pos,first->y_pos,first->id,0);
    1340:	e0bffe17 	ldw	r2,-8(fp)
    1344:	11000017 	ldw	r4,0(r2)
    1348:	e0bffe17 	ldw	r2,-8(fp)
    134c:	10c00117 	ldw	r3,4(r2)
    1350:	e0bffe17 	ldw	r2,-8(fp)
    1354:	10800317 	ldw	r2,12(r2)
    1358:	180b883a 	mov	r5,r3
    135c:	100d883a 	mov	r6,r2
    1360:	000f883a 	mov	r7,zero
    1364:	00010ac0 	call	10ac <renderer>

		}
		if(render_check(second)==0){
    1368:	e13fff17 	ldw	r4,-4(fp)
    136c:	00013b80 	call	13b8 <render_check>
    1370:	10000c1e 	bne	r2,zero,13a4 <render_players+0xb0>
			render_shadow(second);
    1374:	e13fff17 	ldw	r4,-4(fp)
    1378:	00012680 	call	1268 <render_shadow>
			renderer(second->x_pos,second->y_pos,second->id,0);
    137c:	e0bfff17 	ldw	r2,-4(fp)
    1380:	11000017 	ldw	r4,0(r2)
    1384:	e0bfff17 	ldw	r2,-4(fp)
    1388:	10c00117 	ldw	r3,4(r2)
    138c:	e0bfff17 	ldw	r2,-4(fp)
    1390:	10800317 	ldw	r2,12(r2)
    1394:	180b883a 	mov	r5,r3
    1398:	100d883a 	mov	r6,r2
    139c:	000f883a 	mov	r7,zero
    13a0:	00010ac0 	call	10ac <renderer>

		}
	}
}
    13a4:	e037883a 	mov	sp,fp
    13a8:	dfc00117 	ldw	ra,4(sp)
    13ac:	df000017 	ldw	fp,0(sp)
    13b0:	dec00204 	addi	sp,sp,8
    13b4:	f800283a 	ret

000013b8 <render_check>:
int render_check(player *current){
    13b8:	defffd04 	addi	sp,sp,-12
    13bc:	df000215 	stw	fp,8(sp)
    13c0:	df000204 	addi	fp,sp,8
    13c4:	e13fff15 	stw	r4,-4(fp)
	int i=0;
    13c8:	e03ffe15 	stw	zero,-8(fp)
	if(current->x_pos==current->old_x && current->y_pos==current->old_y){
    13cc:	e0bfff17 	ldw	r2,-4(fp)
    13d0:	10c00017 	ldw	r3,0(r2)
    13d4:	e0bfff17 	ldw	r2,-4(fp)
    13d8:	10800417 	ldw	r2,16(r2)
    13dc:	1880071e 	bne	r3,r2,13fc <render_check+0x44>
    13e0:	e0bfff17 	ldw	r2,-4(fp)
    13e4:	10c00117 	ldw	r3,4(r2)
    13e8:	e0bfff17 	ldw	r2,-4(fp)
    13ec:	10800517 	ldw	r2,20(r2)
    13f0:	1880021e 	bne	r3,r2,13fc <render_check+0x44>
		i=1;
    13f4:	00800044 	movi	r2,1
    13f8:	e0bffe15 	stw	r2,-8(fp)
	}
	return i;
    13fc:	e0bffe17 	ldw	r2,-8(fp)
}
    1400:	e037883a 	mov	sp,fp
    1404:	df000017 	ldw	fp,0(sp)
    1408:	dec00104 	addi	sp,sp,4
    140c:	f800283a 	ret

00001410 <keycode_effect>:
int keycode_effect(player *first,player *second,unsigned int *arr){
    1410:	defff904 	addi	sp,sp,-28
    1414:	dfc00615 	stw	ra,24(sp)
    1418:	df000515 	stw	fp,20(sp)
    141c:	df000504 	addi	fp,sp,20
    1420:	e13ffd15 	stw	r4,-12(fp)
    1424:	e17ffe15 	stw	r5,-8(fp)
    1428:	e1bfff15 	stw	r6,-4(fp)
	int i=0;
    142c:	e03ffb15 	stw	zero,-20(fp)
	int j=0;
    1430:	e03ffc15 	stw	zero,-16(fp)
	for(i=0;i<4;i++){
    1434:	e03ffb15 	stw	zero,-20(fp)
    1438:	00006d06 	br	15f0 <keycode_effect+0x1e0>
		if(arr[i]==0x04){
    143c:	e0bffb17 	ldw	r2,-20(fp)
    1440:	1085883a 	add	r2,r2,r2
    1444:	1085883a 	add	r2,r2,r2
    1448:	1007883a 	mov	r3,r2
    144c:	e0bfff17 	ldw	r2,-4(fp)
    1450:	10c5883a 	add	r2,r2,r3
    1454:	10800017 	ldw	r2,0(r2)
    1458:	10800118 	cmpnei	r2,r2,4
    145c:	10000b1e 	bne	r2,zero,148c <keycode_effect+0x7c>
			j=1;
    1460:	00800044 	movi	r2,1
    1464:	e0bffc15 	stw	r2,-16(fp)
			move_player(first,first->x_pos-5,first->y_pos);
    1468:	e0bffd17 	ldw	r2,-12(fp)
    146c:	10800017 	ldw	r2,0(r2)
    1470:	10fffec4 	addi	r3,r2,-5
    1474:	e0bffd17 	ldw	r2,-12(fp)
    1478:	10800117 	ldw	r2,4(r2)
    147c:	e13ffd17 	ldw	r4,-12(fp)
    1480:	180b883a 	mov	r5,r3
    1484:	100d883a 	mov	r6,r2
    1488:	00017d00 	call	17d0 <move_player>
		}
		if(arr[i]==0x07){
    148c:	e0bffb17 	ldw	r2,-20(fp)
    1490:	1085883a 	add	r2,r2,r2
    1494:	1085883a 	add	r2,r2,r2
    1498:	1007883a 	mov	r3,r2
    149c:	e0bfff17 	ldw	r2,-4(fp)
    14a0:	10c5883a 	add	r2,r2,r3
    14a4:	10800017 	ldw	r2,0(r2)
    14a8:	108001d8 	cmpnei	r2,r2,7
    14ac:	10000b1e 	bne	r2,zero,14dc <keycode_effect+0xcc>
			j=1;
    14b0:	00800044 	movi	r2,1
    14b4:	e0bffc15 	stw	r2,-16(fp)
			move_player(first,first->x_pos+5,first->y_pos);
    14b8:	e0bffd17 	ldw	r2,-12(fp)
    14bc:	10800017 	ldw	r2,0(r2)
    14c0:	10c00144 	addi	r3,r2,5
    14c4:	e0bffd17 	ldw	r2,-12(fp)
    14c8:	10800117 	ldw	r2,4(r2)
    14cc:	e13ffd17 	ldw	r4,-12(fp)
    14d0:	180b883a 	mov	r5,r3
    14d4:	100d883a 	mov	r6,r2
    14d8:	00017d00 	call	17d0 <move_player>
		}
		if(arr[i]==0x1a){
    14dc:	e0bffb17 	ldw	r2,-20(fp)
    14e0:	1085883a 	add	r2,r2,r2
    14e4:	1085883a 	add	r2,r2,r2
    14e8:	1007883a 	mov	r3,r2
    14ec:	e0bfff17 	ldw	r2,-4(fp)
    14f0:	10c5883a 	add	r2,r2,r3
    14f4:	10800017 	ldw	r2,0(r2)
    14f8:	10800698 	cmpnei	r2,r2,26
    14fc:	1000041e 	bne	r2,zero,1510 <keycode_effect+0x100>
			j=1;
    1500:	00800044 	movi	r2,1
    1504:	e0bffc15 	stw	r2,-16(fp)
			fire_projectile(first);
    1508:	e13ffd17 	ldw	r4,-12(fp)
    150c:	00016880 	call	1688 <fire_projectile>
		}
		if(arr[i]==0x50){
    1510:	e0bffb17 	ldw	r2,-20(fp)
    1514:	1085883a 	add	r2,r2,r2
    1518:	1085883a 	add	r2,r2,r2
    151c:	1007883a 	mov	r3,r2
    1520:	e0bfff17 	ldw	r2,-4(fp)
    1524:	10c5883a 	add	r2,r2,r3
    1528:	10800017 	ldw	r2,0(r2)
    152c:	10801418 	cmpnei	r2,r2,80
    1530:	10000b1e 	bne	r2,zero,1560 <keycode_effect+0x150>
			j=1;
    1534:	00800044 	movi	r2,1
    1538:	e0bffc15 	stw	r2,-16(fp)
			move_player(second,second->x_pos-5,second->y_pos);
    153c:	e0bffe17 	ldw	r2,-8(fp)
    1540:	10800017 	ldw	r2,0(r2)
    1544:	10fffec4 	addi	r3,r2,-5
    1548:	e0bffe17 	ldw	r2,-8(fp)
    154c:	10800117 	ldw	r2,4(r2)
    1550:	e13ffe17 	ldw	r4,-8(fp)
    1554:	180b883a 	mov	r5,r3
    1558:	100d883a 	mov	r6,r2
    155c:	00017d00 	call	17d0 <move_player>
		}
		if(arr[i]==0x4f){
    1560:	e0bffb17 	ldw	r2,-20(fp)
    1564:	1085883a 	add	r2,r2,r2
    1568:	1085883a 	add	r2,r2,r2
    156c:	1007883a 	mov	r3,r2
    1570:	e0bfff17 	ldw	r2,-4(fp)
    1574:	10c5883a 	add	r2,r2,r3
    1578:	10800017 	ldw	r2,0(r2)
    157c:	108013d8 	cmpnei	r2,r2,79
    1580:	10000b1e 	bne	r2,zero,15b0 <keycode_effect+0x1a0>
			j=1;
    1584:	00800044 	movi	r2,1
    1588:	e0bffc15 	stw	r2,-16(fp)
			move_player(second,second->x_pos+5,second->y_pos);
    158c:	e0bffe17 	ldw	r2,-8(fp)
    1590:	10800017 	ldw	r2,0(r2)
    1594:	10c00144 	addi	r3,r2,5
    1598:	e0bffe17 	ldw	r2,-8(fp)
    159c:	10800117 	ldw	r2,4(r2)
    15a0:	e13ffe17 	ldw	r4,-8(fp)
    15a4:	180b883a 	mov	r5,r3
    15a8:	100d883a 	mov	r6,r2
    15ac:	00017d00 	call	17d0 <move_player>
		}
		if(arr[i]==0x52){
    15b0:	e0bffb17 	ldw	r2,-20(fp)
    15b4:	1085883a 	add	r2,r2,r2
    15b8:	1085883a 	add	r2,r2,r2
    15bc:	1007883a 	mov	r3,r2
    15c0:	e0bfff17 	ldw	r2,-4(fp)
    15c4:	10c5883a 	add	r2,r2,r3
    15c8:	10800017 	ldw	r2,0(r2)
    15cc:	10801498 	cmpnei	r2,r2,82
    15d0:	1000041e 	bne	r2,zero,15e4 <keycode_effect+0x1d4>
			j=1;
    15d4:	00800044 	movi	r2,1
    15d8:	e0bffc15 	stw	r2,-16(fp)
			fire_projectile(second);
    15dc:	e13ffe17 	ldw	r4,-8(fp)
    15e0:	00016880 	call	1688 <fire_projectile>
	return i;
}
int keycode_effect(player *first,player *second,unsigned int *arr){
	int i=0;
	int j=0;
	for(i=0;i<4;i++){
    15e4:	e0bffb17 	ldw	r2,-20(fp)
    15e8:	10800044 	addi	r2,r2,1
    15ec:	e0bffb15 	stw	r2,-20(fp)
    15f0:	e0bffb17 	ldw	r2,-20(fp)
    15f4:	10800110 	cmplti	r2,r2,4
    15f8:	103f901e 	bne	r2,zero,143c <__alt_data_end+0xfffabd0c>
		if(arr[i]==0x52){
			j=1;
			fire_projectile(second);
		}
	}
	return j;
    15fc:	e0bffc17 	ldw	r2,-16(fp)
}
    1600:	e037883a 	mov	sp,fp
    1604:	dfc00117 	ldw	ra,4(sp)
    1608:	df000017 	ldw	fp,0(sp)
    160c:	dec00204 	addi	sp,sp,8
    1610:	f800283a 	ret

00001614 <parse_keycode>:
void parse_keycode(unsigned int *arr,unsigned int keycode1,unsigned int keycode2){
    1614:	defffc04 	addi	sp,sp,-16
    1618:	df000315 	stw	fp,12(sp)
    161c:	df000304 	addi	fp,sp,12
    1620:	e13ffd15 	stw	r4,-12(fp)
    1624:	e17ffe15 	stw	r5,-8(fp)
    1628:	e1bfff15 	stw	r6,-4(fp)
	arr[0]=keycode1%256;
    162c:	e0bffe17 	ldw	r2,-8(fp)
    1630:	10c03fcc 	andi	r3,r2,255
    1634:	e0bffd17 	ldw	r2,-12(fp)
    1638:	10c00015 	stw	r3,0(r2)
	arr[1]=keycode1/256;
    163c:	e0bffd17 	ldw	r2,-12(fp)
    1640:	10800104 	addi	r2,r2,4
    1644:	e0fffe17 	ldw	r3,-8(fp)
    1648:	1806d23a 	srli	r3,r3,8
    164c:	10c00015 	stw	r3,0(r2)
	arr[2]=keycode2%256;
    1650:	e0bffd17 	ldw	r2,-12(fp)
    1654:	10800204 	addi	r2,r2,8
    1658:	e0ffff17 	ldw	r3,-4(fp)
    165c:	18c03fcc 	andi	r3,r3,255
    1660:	10c00015 	stw	r3,0(r2)
	arr[3]=keycode2/256;
    1664:	e0bffd17 	ldw	r2,-12(fp)
    1668:	10800304 	addi	r2,r2,12
    166c:	e0ffff17 	ldw	r3,-4(fp)
    1670:	1806d23a 	srli	r3,r3,8
    1674:	10c00015 	stw	r3,0(r2)
}
    1678:	e037883a 	mov	sp,fp
    167c:	df000017 	ldw	fp,0(sp)
    1680:	dec00104 	addi	sp,sp,4
    1684:	f800283a 	ret

00001688 <fire_projectile>:


void fire_projectile(player *current)
{
    1688:	defffc04 	addi	sp,sp,-16
    168c:	dfc00315 	stw	ra,12(sp)
    1690:	df000215 	stw	fp,8(sp)
    1694:	df000204 	addi	fp,sp,8
    1698:	e13fff15 	stw	r4,-4(fp)
	player_projectile *new=(player_projectile*)malloc(sizeof(player_projectile));
    169c:	01000504 	movi	r4,20
    16a0:	0002a480 	call	2a48 <malloc>
    16a4:	e0bffe15 	stw	r2,-8(fp)
	new->x_pos=current->x_pos;//TODO: Refine start point
    16a8:	e0bfff17 	ldw	r2,-4(fp)
    16ac:	10c00017 	ldw	r3,0(r2)
    16b0:	e0bffe17 	ldw	r2,-8(fp)
    16b4:	10c00015 	stw	r3,0(r2)
	new->y_pos=current->y_pos -20;
    16b8:	e0bfff17 	ldw	r2,-4(fp)
    16bc:	10800117 	ldw	r2,4(r2)
    16c0:	10fffb04 	addi	r3,r2,-20
    16c4:	e0bffe17 	ldw	r2,-8(fp)
    16c8:	10c00115 	stw	r3,4(r2)
	if(projectiles==NULL){
    16cc:	d0a6d217 	ldw	r2,-25784(gp)
    16d0:	1000031e 	bne	r2,zero,16e0 <fire_projectile+0x58>
		projectiles=new;
    16d4:	e0bffe17 	ldw	r2,-8(fp)
    16d8:	d0a6d215 	stw	r2,-25784(gp)
    16dc:	00000506 	br	16f4 <fire_projectile+0x6c>
	}
	else{
		new->next=projectiles;
    16e0:	d0e6d217 	ldw	r3,-25784(gp)
    16e4:	e0bffe17 	ldw	r2,-8(fp)
    16e8:	10c00415 	stw	r3,16(r2)
		projectiles=new;
    16ec:	e0bffe17 	ldw	r2,-8(fp)
    16f0:	d0a6d215 	stw	r2,-25784(gp)
	}
}
    16f4:	e037883a 	mov	sp,fp
    16f8:	dfc00117 	ldw	ra,4(sp)
    16fc:	df000017 	ldw	fp,0(sp)
    1700:	dec00204 	addi	sp,sp,8
    1704:	f800283a 	ret

00001708 <check_projectiles>:

void check_projectiles()
{
    1708:	deffff04 	addi	sp,sp,-4
    170c:	df000015 	stw	fp,0(sp)
    1710:	d839883a 	mov	fp,sp

}
    1714:	e037883a 	mov	sp,fp
    1718:	df000017 	ldw	fp,0(sp)
    171c:	dec00104 	addi	sp,sp,4
    1720:	f800283a 	ret

00001724 <init_players>:



void init_players(player *first,player *second){
    1724:	defffc04 	addi	sp,sp,-16
    1728:	dfc00315 	stw	ra,12(sp)
    172c:	df000215 	stw	fp,8(sp)
    1730:	df000204 	addi	fp,sp,8
    1734:	e13ffe15 	stw	r4,-8(fp)
    1738:	e17fff15 	stw	r5,-4(fp)
	if(first==NULL || second ==NULL)
    173c:	e0bffe17 	ldw	r2,-8(fp)
    1740:	10000226 	beq	r2,zero,174c <init_players+0x28>
    1744:	e0bfff17 	ldw	r2,-4(fp)
    1748:	1000041e 	bne	r2,zero,175c <init_players+0x38>
	{
		printf("players not instantiated");
    174c:	01000074 	movhi	r4,1
    1750:	2108cf04 	addi	r4,r4,9020
    1754:	00032440 	call	3244 <printf>
    1758:	00001806 	br	17bc <init_players+0x98>
	}
	else{
		first->x_pos = 300,
    175c:	e0bffe17 	ldw	r2,-8(fp)
    1760:	00c04b04 	movi	r3,300
    1764:	10c00015 	stw	r3,0(r2)
		first->y_pos = 400;
    1768:	e0bffe17 	ldw	r2,-8(fp)
    176c:	00c06404 	movi	r3,400
    1770:	10c00115 	stw	r3,4(r2)
		first->health = 3;
    1774:	e0bffe17 	ldw	r2,-8(fp)
    1778:	00c000c4 	movi	r3,3
    177c:	10c00215 	stw	r3,8(r2)
		first->id=player_sprite1;
    1780:	e0bffe17 	ldw	r2,-8(fp)
    1784:	00c00084 	movi	r3,2
    1788:	10c00315 	stw	r3,12(r2)
		second->x_pos= 200;
    178c:	e0bfff17 	ldw	r2,-4(fp)
    1790:	00c03204 	movi	r3,200
    1794:	10c00015 	stw	r3,0(r2)
		second->y_pos= 200;
    1798:	e0bfff17 	ldw	r2,-4(fp)
    179c:	00c03204 	movi	r3,200
    17a0:	10c00115 	stw	r3,4(r2)
		second->health=3;
    17a4:	e0bfff17 	ldw	r2,-4(fp)
    17a8:	00c000c4 	movi	r3,3
    17ac:	10c00215 	stw	r3,8(r2)
		second->id = player_sprite1;
    17b0:	e0bfff17 	ldw	r2,-4(fp)
    17b4:	00c00084 	movi	r3,2
    17b8:	10c00315 	stw	r3,12(r2)
	}
}
    17bc:	e037883a 	mov	sp,fp
    17c0:	dfc00117 	ldw	ra,4(sp)
    17c4:	df000017 	ldw	fp,0(sp)
    17c8:	dec00204 	addi	sp,sp,8
    17cc:	f800283a 	ret

000017d0 <move_player>:



void move_player(player *current, int x_pos, int y_pos){
    17d0:	defffb04 	addi	sp,sp,-20
    17d4:	dfc00415 	stw	ra,16(sp)
    17d8:	df000315 	stw	fp,12(sp)
    17dc:	df000304 	addi	fp,sp,12
    17e0:	e13ffd15 	stw	r4,-12(fp)
    17e4:	e17ffe15 	stw	r5,-8(fp)
    17e8:	e1bfff15 	stw	r6,-4(fp)
	if(current==NULL)
    17ec:	e0bffd17 	ldw	r2,-12(fp)
    17f0:	1000041e 	bne	r2,zero,1804 <move_player+0x34>
		{
			printf("players not instantiated");
    17f4:	01000074 	movhi	r4,1
    17f8:	2108cf04 	addi	r4,r4,9020
    17fc:	00032440 	call	3244 <printf>
    1800:	00001206 	br	184c <move_player+0x7c>
		}
	else{
		if((x_pos+64) < x_bounds && x_pos > 0 && y_pos > 0 && (y_pos+64)<y_bounds){
    1804:	e0bffe17 	ldw	r2,-8(fp)
    1808:	10801004 	addi	r2,r2,64
    180c:	1080a008 	cmpgei	r2,r2,640
    1810:	10000e1e 	bne	r2,zero,184c <move_player+0x7c>
    1814:	e0bffe17 	ldw	r2,-8(fp)
    1818:	00800c0e 	bge	zero,r2,184c <move_player+0x7c>
    181c:	e0bfff17 	ldw	r2,-4(fp)
    1820:	00800a0e 	bge	zero,r2,184c <move_player+0x7c>
    1824:	e0bfff17 	ldw	r2,-4(fp)
    1828:	10801004 	addi	r2,r2,64
    182c:	10807808 	cmpgei	r2,r2,480
    1830:	1000061e 	bne	r2,zero,184c <move_player+0x7c>
			current->x_pos = x_pos;
    1834:	e0bffd17 	ldw	r2,-12(fp)
    1838:	e0fffe17 	ldw	r3,-8(fp)
    183c:	10c00015 	stw	r3,0(r2)
			current->y_pos = y_pos;
    1840:	e0bffd17 	ldw	r2,-12(fp)
    1844:	e0ffff17 	ldw	r3,-4(fp)
    1848:	10c00115 	stw	r3,4(r2)
		}
	}
}
    184c:	e037883a 	mov	sp,fp
    1850:	dfc00117 	ldw	ra,4(sp)
    1854:	df000017 	ldw	fp,0(sp)
    1858:	dec00204 	addi	sp,sp,8
    185c:	f800283a 	ret

00001860 <main>:



int main(void){
    1860:	defff604 	addi	sp,sp,-40
    1864:	dfc00915 	stw	ra,36(sp)
    1868:	df000815 	stw	fp,32(sp)
    186c:	df000804 	addi	fp,sp,32
	setup_keyboard();
    1870:	00006a00 	call	6a0 <setup_keyboard>
	unsigned int keycode1,keycode2;
	player *first=(player *)malloc(sizeof(player));
    1874:	01000604 	movi	r4,24
    1878:	0002a480 	call	2a48 <malloc>
    187c:	e0bff815 	stw	r2,-32(fp)
	player *second=(player *)malloc(sizeof(player));
    1880:	01000604 	movi	r4,24
    1884:	0002a480 	call	2a48 <malloc>
    1888:	e0bff915 	stw	r2,-28(fp)
	init_players(first,second);
    188c:	e13ff817 	ldw	r4,-32(fp)
    1890:	e17ff917 	ldw	r5,-28(fp)
    1894:	00017240 	call	1724 <init_players>
	unsigned int arr[4]={0,0,0,0};
    1898:	e03ffc15 	stw	zero,-16(fp)
    189c:	e03ffd15 	stw	zero,-12(fp)
    18a0:	e03ffe15 	stw	zero,-8(fp)
    18a4:	e03fff15 	stw	zero,-4(fp)
	while(1)
		{
			if(get_keycode(&keycode1,&keycode2)==0){
    18a8:	e0fffa04 	addi	r3,fp,-24
    18ac:	e0bffb04 	addi	r2,fp,-20
    18b0:	1809883a 	mov	r4,r3
    18b4:	100b883a 	mov	r5,r2
    18b8:	00003940 	call	394 <get_keycode>
    18bc:	1000101e 	bne	r2,zero,1900 <main+0xa0>
				parse_keycode(arr,keycode1,keycode2);
    18c0:	e0fffa17 	ldw	r3,-24(fp)
    18c4:	e0bffb17 	ldw	r2,-20(fp)
    18c8:	e13ffc04 	addi	r4,fp,-16
    18cc:	180b883a 	mov	r5,r3
    18d0:	100d883a 	mov	r6,r2
    18d4:	00016140 	call	1614 <parse_keycode>
				if(keycode_effect(first,second,arr)==1){
    18d8:	e0bffc04 	addi	r2,fp,-16
    18dc:	e13ff817 	ldw	r4,-32(fp)
    18e0:	e17ff917 	ldw	r5,-28(fp)
    18e4:	100d883a 	mov	r6,r2
    18e8:	00014100 	call	1410 <keycode_effect>
    18ec:	10800058 	cmpnei	r2,r2,1
    18f0:	1000031e 	bne	r2,zero,1900 <main+0xa0>
				render_players(first,second);
    18f4:	e13ff817 	ldw	r4,-32(fp)
    18f8:	e17ff917 	ldw	r5,-28(fp)
    18fc:	00012f40 	call	12f4 <render_players>
				}
			}

		}
    1900:	003fe906 	br	18a8 <__alt_data_end+0xfffac178>

00001904 <UsbWrite>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbWrite(alt_u16 Address, alt_u16 Data)
{
    1904:	defffc04 	addi	sp,sp,-16
    1908:	dfc00315 	stw	ra,12(sp)
    190c:	df000215 	stw	fp,8(sp)
    1910:	df000204 	addi	fp,sp,8
    1914:	2007883a 	mov	r3,r4
    1918:	2805883a 	mov	r2,r5
    191c:	e0fffe0d 	sth	r3,-8(fp)
    1920:	e0bfff0d 	sth	r2,-4(fp)
	IO_write(HPI_ADDR_PORT, Address);
    1924:	e0bffe0b 	ldhu	r2,-8(fp)
    1928:	01000084 	movi	r4,2
    192c:	100b883a 	mov	r5,r2
    1930:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA_PORT, Data);
    1934:	e0bfff0b 	ldhu	r2,-4(fp)
    1938:	0009883a 	mov	r4,zero
    193c:	100b883a 	mov	r5,r2
    1940:	00002c80 	call	2c8 <IO_write>
}
    1944:	e037883a 	mov	sp,fp
    1948:	dfc00117 	ldw	ra,4(sp)
    194c:	df000017 	ldw	fp,0(sp)
    1950:	dec00204 	addi	sp,sp,8
    1954:	f800283a 	ret

00001958 <UsbRead>:
 *
 * @note     None
 *
 ******************************************************************************/
alt_u16 UsbRead(alt_u16 Address)
{
    1958:	defffd04 	addi	sp,sp,-12
    195c:	dfc00215 	stw	ra,8(sp)
    1960:	df000115 	stw	fp,4(sp)
    1964:	df000104 	addi	fp,sp,4
    1968:	2005883a 	mov	r2,r4
    196c:	e0bfff0d 	sth	r2,-4(fp)
	IO_write(HPI_ADDR_PORT, Address);
    1970:	e0bfff0b 	ldhu	r2,-4(fp)
    1974:	01000084 	movi	r4,2
    1978:	100b883a 	mov	r5,r2
    197c:	00002c80 	call	2c8 <IO_write>
	return IO_read(HPI_DATA_PORT);
    1980:	0009883a 	mov	r4,zero
    1984:	00003300 	call	330 <IO_read>
}
    1988:	e037883a 	mov	sp,fp
    198c:	dfc00117 	ldw	ra,4(sp)
    1990:	df000017 	ldw	fp,0(sp)
    1994:	dec00204 	addi	sp,sp,8
    1998:	f800283a 	ret

0000199c <UsbSoftReset>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbSoftReset()
{
    199c:	defffe04 	addi	sp,sp,-8
    19a0:	dfc00115 	stw	ra,4(sp)
    19a4:	df000015 	stw	fp,0(sp)
    19a8:	d839883a 	mov	fp,sp
	//XIo_Out16(USB_MAILBOX, COMM_RESET);
	IO_write(HPI_MAILBOX,COMM_RESET); //COMM_JUMP2CODE
    19ac:	01000044 	movi	r4,1
    19b0:	017e9414 	movui	r5,64080
    19b4:	00002c80 	call	2c8 <IO_write>
	usleep(100000);
    19b8:	010000b4 	movhi	r4,2
    19bc:	2121a804 	addi	r4,r4,-31072
    19c0:	000fc780 	call	fc78 <usleep>
	printf("[USB INIT]:reset finished!\n");
    19c4:	01000074 	movhi	r4,1
    19c8:	2108d604 	addi	r4,r4,9048
    19cc:	00033380 	call	3338 <puts>

	usleep(500000);
    19d0:	01000234 	movhi	r4,8
    19d4:	21284804 	addi	r4,r4,-24288
    19d8:	000fc780 	call	fc78 <usleep>
	printf("[USB INIT]:Clear up the interrupt\r\n");
    19dc:	01000074 	movhi	r4,1
    19e0:	2108dd04 	addi	r4,r4,9076
    19e4:	00033380 	call	3338 <puts>
	IO_read(HPI_MAILBOX);
    19e8:	01000044 	movi	r4,1
    19ec:	00003300 	call	330 <IO_read>
	IO_read(HPI_STATUS);
    19f0:	010000c4 	movi	r4,3
    19f4:	00003300 	call	330 <IO_read>

	// Had to add the write due to a bug in BIOS where they overwrite
	// the mailbox after initialization with garbage.  The read clears
	// any pending interrupts.
	UsbRead (HPI_SIE1_MSG_ADR);
    19f8:	01005104 	movi	r4,324
    19fc:	00019580 	call	1958 <UsbRead>
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
    1a00:	01005104 	movi	r4,324
    1a04:	000b883a 	mov	r5,zero
    1a08:	00019040 	call	1904 <UsbWrite>
	UsbRead (HPI_SIE2_MSG_ADR);
    1a0c:	01005204 	movi	r4,328
    1a10:	00019580 	call	1958 <UsbRead>
	UsbWrite (HPI_SIE2_MSG_ADR, 0);
    1a14:	01005204 	movi	r4,328
    1a18:	000b883a 	mov	r5,zero
    1a1c:	00019040 	call	1904 <UsbWrite>


	UsbWrite (HOST1_STAT_REG, 0xFFFF);
    1a20:	01302414 	movui	r4,49296
    1a24:	017fffd4 	movui	r5,65535
    1a28:	00019040 	call	1904 <UsbWrite>
	UsbWrite (HOST2_STAT_REG, 0xFFFF);
    1a2c:	01302c14 	movui	r4,49328
    1a30:	017fffd4 	movui	r5,65535
    1a34:	00019040 	call	1904 <UsbWrite>
}
    1a38:	e037883a 	mov	sp,fp
    1a3c:	dfc00117 	ldw	ra,4(sp)
    1a40:	df000017 	ldw	fp,0(sp)
    1a44:	dec00204 	addi	sp,sp,8
    1a48:	f800283a 	ret

00001a4c <UsbSetAddress>:


void UsbSetAddress()
{
    1a4c:	defffe04 	addi	sp,sp,-8
    1a50:	dfc00115 	stw	ra,4(sp)
    1a54:	df000015 	stw	fp,0(sp)
    1a58:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    1a5c:	01000084 	movi	r4,2
    1a60:	01414004 	movi	r5,1280
    1a64:	00002c80 	call	2c8 <IO_write>
	// TD #1: 6 writes
	IO_write(HPI_DATA,0x050C);
    1a68:	0009883a 	mov	r4,zero
    1a6c:	01414304 	movi	r5,1292
    1a70:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    1a74:	0009883a 	mov	r4,zero
    1a78:	01400204 	movi	r5,8
    1a7c:	00002c80 	call	2c8 <IO_write>
	// TASK: Complete with 4 more IOWR functions
	IO_write(HPI_DATA,0x00D0);
    1a80:	0009883a 	mov	r4,zero
    1a84:	01403404 	movi	r5,208
    1a88:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);
    1a8c:	0009883a 	mov	r4,zero
    1a90:	01400044 	movi	r5,1
    1a94:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    1a98:	0009883a 	mov	r4,zero
    1a9c:	014004c4 	movi	r5,19
    1aa0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0514);
    1aa4:	0009883a 	mov	r4,zero
    1aa8:	01414504 	movi	r5,1300
    1aac:	00002c80 	call	2c8 <IO_write>
	// TD #2: 4 writes
	// TASK: Complete with 4 IOWR functions
	IO_write(HPI_DATA,0x0500);
    1ab0:	0009883a 	mov	r4,zero
    1ab4:	01414004 	movi	r5,1280
    1ab8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0002);
    1abc:	0009883a 	mov	r4,zero
    1ac0:	01400084 	movi	r5,2
    1ac4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    1ac8:	0009883a 	mov	r4,zero
    1acc:	000b883a 	mov	r5,zero
    1ad0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    1ad4:	0009883a 	mov	r4,zero
    1ad8:	000b883a 	mov	r5,zero
    1adc:	00002c80 	call	2c8 <IO_write>
	// TD #3: 6 writes
	// TASK: Complete with 6 IOWR functions
	IO_write(HPI_DATA,0x0000); //
    1ae0:	0009883a 	mov	r4,zero
    1ae4:	000b883a 	mov	r5,zero
    1ae8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//
    1aec:	0009883a 	mov	r4,zero
    1af0:	000b883a 	mov	r5,zero
    1af4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0090);//
    1af8:	0009883a 	mov	r4,zero
    1afc:	01402404 	movi	r5,144
    1b00:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);
    1b04:	0009883a 	mov	r4,zero
    1b08:	01401044 	movi	r5,65
    1b0c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    1b10:	0009883a 	mov	r4,zero
    1b14:	014004c4 	movi	r5,19
    1b18:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    1b1c:	0009883a 	mov	r4,zero
    1b20:	000b883a 	mov	r5,zero
    1b24:	00002c80 	call	2c8 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    1b28:	01006c04 	movi	r4,432
    1b2c:	01414004 	movi	r5,1280
    1b30:	00019040 	call	1904 <UsbWrite>
}
    1b34:	e037883a 	mov	sp,fp
    1b38:	dfc00117 	ldw	ra,4(sp)
    1b3c:	df000017 	ldw	fp,0(sp)
    1b40:	dec00204 	addi	sp,sp,8
    1b44:	f800283a 	ret

00001b48 <UsbGetDeviceDesc1>:


void UsbGetDeviceDesc1()
{
    1b48:	defffe04 	addi	sp,sp,-8
    1b4c:	dfc00115 	stw	ra,4(sp)
    1b50:	df000015 	stw	fp,0(sp)
    1b54:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    1b58:	01000084 	movi	r4,2
    1b5c:	01414004 	movi	r5,1280
    1b60:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x050C);
    1b64:	0009883a 	mov	r4,zero
    1b68:	01414304 	movi	r5,1292
    1b6c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    1b70:	0009883a 	mov	r4,zero
    1b74:	01400204 	movi	r5,8
    1b78:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    1b7c:	0009883a 	mov	r4,zero
    1b80:	0140b404 	movi	r5,720
    1b84:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);
    1b88:	0009883a 	mov	r4,zero
    1b8c:	01400044 	movi	r5,1
    1b90:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    1b94:	0009883a 	mov	r4,zero
    1b98:	014004c4 	movi	r5,19
    1b9c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0514);
    1ba0:	0009883a 	mov	r4,zero
    1ba4:	01414504 	movi	r5,1300
    1ba8:	00002c80 	call	2c8 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
    1bac:	0009883a 	mov	r4,zero
    1bb0:	0141a004 	movi	r5,1664
    1bb4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0100); //device 0x01
    1bb8:	0009883a 	mov	r4,zero
    1bbc:	01404004 	movi	r5,256
    1bc0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    1bc4:	0009883a 	mov	r4,zero
    1bc8:	000b883a 	mov	r5,zero
    1bcc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);
    1bd0:	0009883a 	mov	r4,zero
    1bd4:	01400204 	movi	r5,8
    1bd8:	00002c80 	call	2c8 <IO_write>

	//data phase IN
	IO_write(HPI_DATA,0x052C); //
    1bdc:	0009883a 	mov	r4,zero
    1be0:	01414b04 	movi	r5,1324
    1be4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//
    1be8:	0009883a 	mov	r4,zero
    1bec:	01400204 	movi	r5,8
    1bf0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//
    1bf4:	0009883a 	mov	r4,zero
    1bf8:	0140a404 	movi	r5,656
    1bfc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);
    1c00:	0009883a 	mov	r4,zero
    1c04:	01401044 	movi	r5,65
    1c08:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    1c0c:	0009883a 	mov	r4,zero
    1c10:	014004c4 	movi	r5,19
    1c14:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0520);
    1c18:	0009883a 	mov	r4,zero
    1c1c:	01414804 	movi	r5,1312
    1c20:	00002c80 	call	2c8 <IO_write>

	//    //status phase
	IO_write(HPI_DATA,0x0000); //don't care
    1c24:	0009883a 	mov	r4,zero
    1c28:	000b883a 	mov	r5,zero
    1c2c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
    1c30:	0009883a 	mov	r4,zero
    1c34:	000b883a 	mov	r5,zero
    1c38:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0210);//device address
    1c3c:	0009883a 	mov	r4,zero
    1c40:	01408404 	movi	r5,528
    1c44:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);
    1c48:	0009883a 	mov	r4,zero
    1c4c:	01401044 	movi	r5,65
    1c50:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    1c54:	0009883a 	mov	r4,zero
    1c58:	014004c4 	movi	r5,19
    1c5c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    1c60:	0009883a 	mov	r4,zero
    1c64:	000b883a 	mov	r5,zero
    1c68:	00002c80 	call	2c8 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    1c6c:	01006c04 	movi	r4,432
    1c70:	01414004 	movi	r5,1280
    1c74:	00019040 	call	1904 <UsbWrite>
}
    1c78:	e037883a 	mov	sp,fp
    1c7c:	dfc00117 	ldw	ra,4(sp)
    1c80:	df000017 	ldw	fp,0(sp)
    1c84:	dec00204 	addi	sp,sp,8
    1c88:	f800283a 	ret

00001c8c <UsbGetDeviceDesc2>:

void UsbGetDeviceDesc2()
{
    1c8c:	defffe04 	addi	sp,sp,-8
    1c90:	dfc00115 	stw	ra,4(sp)
    1c94:	df000015 	stw	fp,0(sp)
    1c98:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    1c9c:	01000084 	movi	r4,2
    1ca0:	01414004 	movi	r5,1280
    1ca4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x050C);
    1ca8:	0009883a 	mov	r4,zero
    1cac:	01414304 	movi	r5,1292
    1cb0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    1cb4:	0009883a 	mov	r4,zero
    1cb8:	01400204 	movi	r5,8
    1cbc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    1cc0:	0009883a 	mov	r4,zero
    1cc4:	0140b404 	movi	r5,720
    1cc8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);
    1ccc:	0009883a 	mov	r4,zero
    1cd0:	01400044 	movi	r5,1
    1cd4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    1cd8:	0009883a 	mov	r4,zero
    1cdc:	014004c4 	movi	r5,19
    1ce0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0514);
    1ce4:	0009883a 	mov	r4,zero
    1ce8:	01414504 	movi	r5,1300
    1cec:	00002c80 	call	2c8 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
    1cf0:	0009883a 	mov	r4,zero
    1cf4:	0141a004 	movi	r5,1664
    1cf8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0100);//e //device 0x01
    1cfc:	0009883a 	mov	r4,zero
    1d00:	01404004 	movi	r5,256
    1d04:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    1d08:	0009883a 	mov	r4,zero
    1d0c:	000b883a 	mov	r5,zero
    1d10:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0012);//2
    1d14:	0009883a 	mov	r4,zero
    1d18:	01400484 	movi	r5,18
    1d1c:	00002c80 	call	2c8 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
    1d20:	0009883a 	mov	r4,zero
    1d24:	01415104 	movi	r5,1348
    1d28:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    1d2c:	0009883a 	mov	r4,zero
    1d30:	01400204 	movi	r5,8
    1d34:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    1d38:	0009883a 	mov	r4,zero
    1d3c:	0140a404 	movi	r5,656
    1d40:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    1d44:	0009883a 	mov	r4,zero
    1d48:	01401044 	movi	r5,65
    1d4c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    1d50:	0009883a 	mov	r4,zero
    1d54:	014004c4 	movi	r5,19
    1d58:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    1d5c:	0009883a 	mov	r4,zero
    1d60:	01414804 	movi	r5,1312
    1d64:	00002c80 	call	2c8 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
    1d68:	0009883a 	mov	r4,zero
    1d6c:	01415304 	movi	r5,1356
    1d70:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
    1d74:	0009883a 	mov	r4,zero
    1d78:	01400204 	movi	r5,8
    1d7c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    1d80:	0009883a 	mov	r4,zero
    1d84:	0140a404 	movi	r5,656
    1d88:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);//6
    1d8c:	0009883a 	mov	r4,zero
    1d90:	01400044 	movi	r5,1
    1d94:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    1d98:	0009883a 	mov	r4,zero
    1d9c:	014004c4 	movi	r5,19
    1da0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
    1da4:	0009883a 	mov	r4,zero
    1da8:	01414b04 	movi	r5,1324
    1dac:	00002c80 	call	2c8 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0554); //c
    1db0:	0009883a 	mov	r4,zero
    1db4:	01415504 	movi	r5,1364
    1db8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0002);//e
    1dbc:	0009883a 	mov	r4,zero
    1dc0:	01400084 	movi	r5,2
    1dc4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
    1dc8:	0009883a 	mov	r4,zero
    1dcc:	0140a404 	movi	r5,656
    1dd0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    1dd4:	0009883a 	mov	r4,zero
    1dd8:	01401044 	movi	r5,65
    1ddc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    1de0:	0009883a 	mov	r4,zero
    1de4:	014004c4 	movi	r5,19
    1de8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
    1dec:	0009883a 	mov	r4,zero
    1df0:	01414e04 	movi	r5,1336
    1df4:	00002c80 	call	2c8 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //538
    1df8:	0009883a 	mov	r4,zero
    1dfc:	000b883a 	mov	r5,zero
    1e00:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
    1e04:	0009883a 	mov	r4,zero
    1e08:	000b883a 	mov	r5,zero
    1e0c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0210);//c
    1e10:	0009883a 	mov	r4,zero
    1e14:	01408404 	movi	r5,528
    1e18:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//e
    1e1c:	0009883a 	mov	r4,zero
    1e20:	01401044 	movi	r5,65
    1e24:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
    1e28:	0009883a 	mov	r4,zero
    1e2c:	014004c4 	movi	r5,19
    1e30:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
    1e34:	0009883a 	mov	r4,zero
    1e38:	000b883a 	mov	r5,zero
    1e3c:	00002c80 	call	2c8 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    1e40:	01006c04 	movi	r4,432
    1e44:	01414004 	movi	r5,1280
    1e48:	00019040 	call	1904 <UsbWrite>
}
    1e4c:	e037883a 	mov	sp,fp
    1e50:	dfc00117 	ldw	ra,4(sp)
    1e54:	df000017 	ldw	fp,0(sp)
    1e58:	dec00204 	addi	sp,sp,8
    1e5c:	f800283a 	ret

00001e60 <UsbGetConfigDesc1>:


void UsbGetConfigDesc1()
{
    1e60:	defffe04 	addi	sp,sp,-8
    1e64:	dfc00115 	stw	ra,4(sp)
    1e68:	df000015 	stw	fp,0(sp)
    1e6c:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    1e70:	01000084 	movi	r4,2
    1e74:	01414004 	movi	r5,1280
    1e78:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x050C);
    1e7c:	0009883a 	mov	r4,zero
    1e80:	01414304 	movi	r5,1292
    1e84:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    1e88:	0009883a 	mov	r4,zero
    1e8c:	01400204 	movi	r5,8
    1e90:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    1e94:	0009883a 	mov	r4,zero
    1e98:	0140b404 	movi	r5,720
    1e9c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);
    1ea0:	0009883a 	mov	r4,zero
    1ea4:	01400044 	movi	r5,1
    1ea8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    1eac:	0009883a 	mov	r4,zero
    1eb0:	014004c4 	movi	r5,19
    1eb4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0514);
    1eb8:	0009883a 	mov	r4,zero
    1ebc:	01414504 	movi	r5,1300
    1ec0:	00002c80 	call	2c8 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
    1ec4:	0009883a 	mov	r4,zero
    1ec8:	0141a004 	movi	r5,1664
    1ecc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
    1ed0:	0009883a 	mov	r4,zero
    1ed4:	01408004 	movi	r5,512
    1ed8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    1edc:	0009883a 	mov	r4,zero
    1ee0:	000b883a 	mov	r5,zero
    1ee4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0009);//2
    1ee8:	0009883a 	mov	r4,zero
    1eec:	01400244 	movi	r5,9
    1ef0:	00002c80 	call	2c8 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
    1ef4:	0009883a 	mov	r4,zero
    1ef8:	01415104 	movi	r5,1348
    1efc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    1f00:	0009883a 	mov	r4,zero
    1f04:	01400204 	movi	r5,8
    1f08:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    1f0c:	0009883a 	mov	r4,zero
    1f10:	0140a404 	movi	r5,656
    1f14:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    1f18:	0009883a 	mov	r4,zero
    1f1c:	01401044 	movi	r5,65
    1f20:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    1f24:	0009883a 	mov	r4,zero
    1f28:	014004c4 	movi	r5,19
    1f2c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    1f30:	0009883a 	mov	r4,zero
    1f34:	01414804 	movi	r5,1312
    1f38:	00002c80 	call	2c8 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
    1f3c:	0009883a 	mov	r4,zero
    1f40:	01415304 	movi	r5,1356
    1f44:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);//2
    1f48:	0009883a 	mov	r4,zero
    1f4c:	01400044 	movi	r5,1
    1f50:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    1f54:	0009883a 	mov	r4,zero
    1f58:	0140a404 	movi	r5,656
    1f5c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
    1f60:	0009883a 	mov	r4,zero
    1f64:	01400044 	movi	r5,1
    1f68:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    1f6c:	0009883a 	mov	r4,zero
    1f70:	014004c4 	movi	r5,19
    1f74:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
    1f78:	0009883a 	mov	r4,zero
    1f7c:	01414b04 	movi	r5,1324
    1f80:	00002c80 	call	2c8 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
    1f84:	0009883a 	mov	r4,zero
    1f88:	000b883a 	mov	r5,zero
    1f8c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
    1f90:	0009883a 	mov	r4,zero
    1f94:	000b883a 	mov	r5,zero
    1f98:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
    1f9c:	0009883a 	mov	r4,zero
    1fa0:	01408404 	movi	r5,528
    1fa4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    1fa8:	0009883a 	mov	r4,zero
    1fac:	01401044 	movi	r5,65
    1fb0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    1fb4:	0009883a 	mov	r4,zero
    1fb8:	014004c4 	movi	r5,19
    1fbc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
    1fc0:	0009883a 	mov	r4,zero
    1fc4:	000b883a 	mov	r5,zero
    1fc8:	00002c80 	call	2c8 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    1fcc:	01006c04 	movi	r4,432
    1fd0:	01414004 	movi	r5,1280
    1fd4:	00019040 	call	1904 <UsbWrite>
}
    1fd8:	e037883a 	mov	sp,fp
    1fdc:	dfc00117 	ldw	ra,4(sp)
    1fe0:	df000017 	ldw	fp,0(sp)
    1fe4:	dec00204 	addi	sp,sp,8
    1fe8:	f800283a 	ret

00001fec <UsbGetConfigDesc2>:


void UsbGetConfigDesc2()
{
    1fec:	defffe04 	addi	sp,sp,-8
    1ff0:	dfc00115 	stw	ra,4(sp)
    1ff4:	df000015 	stw	fp,0(sp)
    1ff8:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    1ffc:	01000084 	movi	r4,2
    2000:	01414004 	movi	r5,1280
    2004:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x050C);
    2008:	0009883a 	mov	r4,zero
    200c:	01414304 	movi	r5,1292
    2010:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    2014:	0009883a 	mov	r4,zero
    2018:	01400204 	movi	r5,8
    201c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    2020:	0009883a 	mov	r4,zero
    2024:	0140b404 	movi	r5,720
    2028:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);
    202c:	0009883a 	mov	r4,zero
    2030:	01400044 	movi	r5,1
    2034:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    2038:	0009883a 	mov	r4,zero
    203c:	014004c4 	movi	r5,19
    2040:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0514);
    2044:	0009883a 	mov	r4,zero
    2048:	01414504 	movi	r5,1300
    204c:	00002c80 	call	2c8 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
    2050:	0009883a 	mov	r4,zero
    2054:	0141a004 	movi	r5,1664
    2058:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
    205c:	0009883a 	mov	r4,zero
    2060:	01408004 	movi	r5,512
    2064:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    2068:	0009883a 	mov	r4,zero
    206c:	000b883a 	mov	r5,zero
    2070:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x00FF);//2
    2074:	0009883a 	mov	r4,zero
    2078:	01403fc4 	movi	r5,255
    207c:	00002c80 	call	2c8 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x055c); //514
    2080:	0009883a 	mov	r4,zero
    2084:	01415704 	movi	r5,1372
    2088:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    208c:	0009883a 	mov	r4,zero
    2090:	01400204 	movi	r5,8
    2094:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    2098:	0009883a 	mov	r4,zero
    209c:	0140a404 	movi	r5,656
    20a0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    20a4:	0009883a 	mov	r4,zero
    20a8:	01401044 	movi	r5,65
    20ac:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    20b0:	0009883a 	mov	r4,zero
    20b4:	014004c4 	movi	r5,19
    20b8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    20bc:	0009883a 	mov	r4,zero
    20c0:	01414804 	movi	r5,1312
    20c4:	00002c80 	call	2c8 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0564); //520
    20c8:	0009883a 	mov	r4,zero
    20cc:	01415904 	movi	r5,1380
    20d0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
    20d4:	0009883a 	mov	r4,zero
    20d8:	01400204 	movi	r5,8
    20dc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    20e0:	0009883a 	mov	r4,zero
    20e4:	0140a404 	movi	r5,656
    20e8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
    20ec:	0009883a 	mov	r4,zero
    20f0:	01400044 	movi	r5,1
    20f4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    20f8:	0009883a 	mov	r4,zero
    20fc:	014004c4 	movi	r5,19
    2100:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
    2104:	0009883a 	mov	r4,zero
    2108:	01414b04 	movi	r5,1324
    210c:	00002c80 	call	2c8 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x056c); //52c
    2110:	0009883a 	mov	r4,zero
    2114:	01415b04 	movi	r5,1388
    2118:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
    211c:	0009883a 	mov	r4,zero
    2120:	01400204 	movi	r5,8
    2124:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
    2128:	0009883a 	mov	r4,zero
    212c:	0140a404 	movi	r5,656
    2130:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    2134:	0009883a 	mov	r4,zero
    2138:	01401044 	movi	r5,65
    213c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    2140:	0009883a 	mov	r4,zero
    2144:	014004c4 	movi	r5,19
    2148:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
    214c:	0009883a 	mov	r4,zero
    2150:	01414e04 	movi	r5,1336
    2154:	00002c80 	call	2c8 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0574); //538
    2158:	0009883a 	mov	r4,zero
    215c:	01415d04 	movi	r5,1396
    2160:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
    2164:	0009883a 	mov	r4,zero
    2168:	01400204 	movi	r5,8
    216c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
    2170:	0009883a 	mov	r4,zero
    2174:	0140a404 	movi	r5,656
    2178:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
    217c:	0009883a 	mov	r4,zero
    2180:	01400044 	movi	r5,1
    2184:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
    2188:	0009883a 	mov	r4,zero
    218c:	014004c4 	movi	r5,19
    2190:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
    2194:	0009883a 	mov	r4,zero
    2198:	01415104 	movi	r5,1348
    219c:	00002c80 	call	2c8 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x057c); //544
    21a0:	0009883a 	mov	r4,zero
    21a4:	01415f04 	movi	r5,1404
    21a8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0002);//6
    21ac:	0009883a 	mov	r4,zero
    21b0:	01400084 	movi	r5,2
    21b4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    21b8:	0009883a 	mov	r4,zero
    21bc:	0140a404 	movi	r5,656
    21c0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
    21c4:	0009883a 	mov	r4,zero
    21c8:	01401044 	movi	r5,65
    21cc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    21d0:	0009883a 	mov	r4,zero
    21d4:	014004c4 	movi	r5,19
    21d8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
    21dc:	0009883a 	mov	r4,zero
    21e0:	01415404 	movi	r5,1360
    21e4:	00002c80 	call	2c8 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //550
    21e8:	0009883a 	mov	r4,zero
    21ec:	000b883a 	mov	r5,zero
    21f0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
    21f4:	0009883a 	mov	r4,zero
    21f8:	000b883a 	mov	r5,zero
    21fc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0210);//4
    2200:	0009883a 	mov	r4,zero
    2204:	01408404 	movi	r5,528
    2208:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//6
    220c:	0009883a 	mov	r4,zero
    2210:	01401044 	movi	r5,65
    2214:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    2218:	0009883a 	mov	r4,zero
    221c:	014004c4 	movi	r5,19
    2220:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
    2224:	0009883a 	mov	r4,zero
    2228:	000b883a 	mov	r5,zero
    222c:	00002c80 	call	2c8 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    2230:	01006c04 	movi	r4,432
    2234:	01414004 	movi	r5,1280
    2238:	00019040 	call	1904 <UsbWrite>
}
    223c:	e037883a 	mov	sp,fp
    2240:	dfc00117 	ldw	ra,4(sp)
    2244:	df000017 	ldw	fp,0(sp)
    2248:	dec00204 	addi	sp,sp,8
    224c:	f800283a 	ret

00002250 <UsbSetConfig>:

void UsbSetConfig()
{
    2250:	defffe04 	addi	sp,sp,-8
    2254:	dfc00115 	stw	ra,4(sp)
    2258:	df000015 	stw	fp,0(sp)
    225c:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    2260:	01000084 	movi	r4,2
    2264:	01414004 	movi	r5,1280
    2268:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x050C);
    226c:	0009883a 	mov	r4,zero
    2270:	01414304 	movi	r5,1292
    2274:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    2278:	0009883a 	mov	r4,zero
    227c:	01400204 	movi	r5,8
    2280:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
    2284:	0009883a 	mov	r4,zero
    2288:	0140b404 	movi	r5,720
    228c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);
    2290:	0009883a 	mov	r4,zero
    2294:	01400044 	movi	r5,1
    2298:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    229c:	0009883a 	mov	r4,zero
    22a0:	014004c4 	movi	r5,19
    22a4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0514);
    22a8:	0009883a 	mov	r4,zero
    22ac:	01414504 	movi	r5,1300
    22b0:	00002c80 	call	2c8 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0900);
    22b4:	0009883a 	mov	r4,zero
    22b8:	01424004 	movi	r5,2304
    22bc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);//device address
    22c0:	0009883a 	mov	r4,zero
    22c4:	01400044 	movi	r5,1
    22c8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    22cc:	0009883a 	mov	r4,zero
    22d0:	000b883a 	mov	r5,zero
    22d4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    22d8:	0009883a 	mov	r4,zero
    22dc:	000b883a 	mov	r5,zero
    22e0:	00002c80 	call	2c8 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
    22e4:	0009883a 	mov	r4,zero
    22e8:	000b883a 	mov	r5,zero
    22ec:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
    22f0:	0009883a 	mov	r4,zero
    22f4:	000b883a 	mov	r5,zero
    22f8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
    22fc:	0009883a 	mov	r4,zero
    2300:	0140a404 	movi	r5,656
    2304:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
    2308:	0009883a 	mov	r4,zero
    230c:	01401044 	movi	r5,65
    2310:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    2314:	0009883a 	mov	r4,zero
    2318:	014004c4 	movi	r5,19
    231c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    2320:	0009883a 	mov	r4,zero
    2324:	000b883a 	mov	r5,zero
    2328:	00002c80 	call	2c8 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    232c:	01006c04 	movi	r4,432
    2330:	01414004 	movi	r5,1280
    2334:	00019040 	call	1904 <UsbWrite>

}
    2338:	e037883a 	mov	sp,fp
    233c:	dfc00117 	ldw	ra,4(sp)
    2340:	df000017 	ldw	fp,0(sp)
    2344:	dec00204 	addi	sp,sp,8
    2348:	f800283a 	ret

0000234c <UsbClassRequest>:

void UsbClassRequest()
{
    234c:	defffe04 	addi	sp,sp,-8
    2350:	dfc00115 	stw	ra,4(sp)
    2354:	df000015 	stw	fp,0(sp)
    2358:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    235c:	01000084 	movi	r4,2
    2360:	01414004 	movi	r5,1280
    2364:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x050C);
    2368:	0009883a 	mov	r4,zero
    236c:	01414304 	movi	r5,1292
    2370:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    2374:	0009883a 	mov	r4,zero
    2378:	01400204 	movi	r5,8
    237c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
    2380:	0009883a 	mov	r4,zero
    2384:	0140b404 	movi	r5,720
    2388:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);
    238c:	0009883a 	mov	r4,zero
    2390:	01400044 	movi	r5,1
    2394:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    2398:	0009883a 	mov	r4,zero
    239c:	014004c4 	movi	r5,19
    23a0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0514);
    23a4:	0009883a 	mov	r4,zero
    23a8:	01414504 	movi	r5,1300
    23ac:	00002c80 	call	2c8 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0A21);
    23b0:	0009883a 	mov	r4,zero
    23b4:	01428844 	movi	r5,2593
    23b8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//device address
    23bc:	0009883a 	mov	r4,zero
    23c0:	000b883a 	mov	r5,zero
    23c4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    23c8:	0009883a 	mov	r4,zero
    23cc:	000b883a 	mov	r5,zero
    23d0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    23d4:	0009883a 	mov	r4,zero
    23d8:	000b883a 	mov	r5,zero
    23dc:	00002c80 	call	2c8 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
    23e0:	0009883a 	mov	r4,zero
    23e4:	000b883a 	mov	r5,zero
    23e8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number /data length
    23ec:	0009883a 	mov	r4,zero
    23f0:	000b883a 	mov	r5,zero
    23f4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
    23f8:	0009883a 	mov	r4,zero
    23fc:	0140a404 	movi	r5,656
    2400:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
    2404:	0009883a 	mov	r4,zero
    2408:	01401044 	movi	r5,65
    240c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    2410:	0009883a 	mov	r4,zero
    2414:	014004c4 	movi	r5,19
    2418:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    241c:	0009883a 	mov	r4,zero
    2420:	000b883a 	mov	r5,zero
    2424:	00002c80 	call	2c8 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    2428:	01006c04 	movi	r4,432
    242c:	01414004 	movi	r5,1280
    2430:	00019040 	call	1904 <UsbWrite>
}
    2434:	e037883a 	mov	sp,fp
    2438:	dfc00117 	ldw	ra,4(sp)
    243c:	df000017 	ldw	fp,0(sp)
    2440:	dec00204 	addi	sp,sp,8
    2444:	f800283a 	ret

00002448 <UsbGetHidDesc>:


void UsbGetHidDesc()
{
    2448:	defffe04 	addi	sp,sp,-8
    244c:	dfc00115 	stw	ra,4(sp)
    2450:	df000015 	stw	fp,0(sp)
    2454:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    2458:	01000084 	movi	r4,2
    245c:	01414004 	movi	r5,1280
    2460:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x050C);
    2464:	0009883a 	mov	r4,zero
    2468:	01414304 	movi	r5,1292
    246c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    2470:	0009883a 	mov	r4,zero
    2474:	01400204 	movi	r5,8
    2478:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
    247c:	0009883a 	mov	r4,zero
    2480:	0140b404 	movi	r5,720
    2484:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);
    2488:	0009883a 	mov	r4,zero
    248c:	01400044 	movi	r5,1
    2490:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    2494:	0009883a 	mov	r4,zero
    2498:	014004c4 	movi	r5,19
    249c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0514);
    24a0:	0009883a 	mov	r4,zero
    24a4:	01414504 	movi	r5,1300
    24a8:	00002c80 	call	2c8 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
    24ac:	0009883a 	mov	r4,zero
    24b0:	0141a044 	movi	r5,1665
    24b4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x2100);//e //HID 0x21
    24b8:	0009883a 	mov	r4,zero
    24bc:	01484004 	movi	r5,8448
    24c0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    24c4:	0009883a 	mov	r4,zero
    24c8:	000b883a 	mov	r5,zero
    24cc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
    24d0:	0009883a 	mov	r4,zero
    24d4:	01401ec4 	movi	r5,123
    24d8:	00002c80 	call	2c8 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
    24dc:	0009883a 	mov	r4,zero
    24e0:	01415104 	movi	r5,1348
    24e4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    24e8:	0009883a 	mov	r4,zero
    24ec:	01400204 	movi	r5,8
    24f0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    24f4:	0009883a 	mov	r4,zero
    24f8:	0140a404 	movi	r5,656
    24fc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    2500:	0009883a 	mov	r4,zero
    2504:	01401044 	movi	r5,65
    2508:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    250c:	0009883a 	mov	r4,zero
    2510:	014004c4 	movi	r5,19
    2514:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    2518:	0009883a 	mov	r4,zero
    251c:	01414804 	movi	r5,1312
    2520:	00002c80 	call	2c8 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
    2524:	0009883a 	mov	r4,zero
    2528:	000b883a 	mov	r5,zero
    252c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
    2530:	0009883a 	mov	r4,zero
    2534:	000b883a 	mov	r5,zero
    2538:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
    253c:	0009883a 	mov	r4,zero
    2540:	01408404 	movi	r5,528
    2544:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    2548:	0009883a 	mov	r4,zero
    254c:	01401044 	movi	r5,65
    2550:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    2554:	0009883a 	mov	r4,zero
    2558:	014004c4 	movi	r5,19
    255c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
    2560:	0009883a 	mov	r4,zero
    2564:	000b883a 	mov	r5,zero
    2568:	00002c80 	call	2c8 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    256c:	01006c04 	movi	r4,432
    2570:	01414004 	movi	r5,1280
    2574:	00019040 	call	1904 <UsbWrite>

}
    2578:	e037883a 	mov	sp,fp
    257c:	dfc00117 	ldw	ra,4(sp)
    2580:	df000017 	ldw	fp,0(sp)
    2584:	dec00204 	addi	sp,sp,8
    2588:	f800283a 	ret

0000258c <UsbGetReportDesc>:


void UsbGetReportDesc()
{
    258c:	defffe04 	addi	sp,sp,-8
    2590:	dfc00115 	stw	ra,4(sp)
    2594:	df000015 	stw	fp,0(sp)
    2598:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    259c:	01000084 	movi	r4,2
    25a0:	01414004 	movi	r5,1280
    25a4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x050C);
    25a8:	0009883a 	mov	r4,zero
    25ac:	01414304 	movi	r5,1292
    25b0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    25b4:	0009883a 	mov	r4,zero
    25b8:	01400204 	movi	r5,8
    25bc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    25c0:	0009883a 	mov	r4,zero
    25c4:	0140b404 	movi	r5,720
    25c8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);
    25cc:	0009883a 	mov	r4,zero
    25d0:	01400044 	movi	r5,1
    25d4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    25d8:	0009883a 	mov	r4,zero
    25dc:	014004c4 	movi	r5,19
    25e0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0514);
    25e4:	0009883a 	mov	r4,zero
    25e8:	01414504 	movi	r5,1300
    25ec:	00002c80 	call	2c8 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
    25f0:	0009883a 	mov	r4,zero
    25f4:	0141a044 	movi	r5,1665
    25f8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x2200);//e //report 0x22
    25fc:	0009883a 	mov	r4,zero
    2600:	01488004 	movi	r5,8704
    2604:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    2608:	0009883a 	mov	r4,zero
    260c:	000b883a 	mov	r5,zero
    2610:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
    2614:	0009883a 	mov	r4,zero
    2618:	01401ec4 	movi	r5,123
    261c:	00002c80 	call	2c8 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0580); //514
    2620:	0009883a 	mov	r4,zero
    2624:	01416004 	movi	r5,1408
    2628:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    262c:	0009883a 	mov	r4,zero
    2630:	01400204 	movi	r5,8
    2634:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    2638:	0009883a 	mov	r4,zero
    263c:	0140a404 	movi	r5,656
    2640:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    2644:	0009883a 	mov	r4,zero
    2648:	01401044 	movi	r5,65
    264c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    2650:	0009883a 	mov	r4,zero
    2654:	014004c4 	movi	r5,19
    2658:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    265c:	0009883a 	mov	r4,zero
    2660:	01414804 	movi	r5,1312
    2664:	00002c80 	call	2c8 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0588); //520
    2668:	0009883a 	mov	r4,zero
    266c:	01416204 	movi	r5,1416
    2670:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
    2674:	0009883a 	mov	r4,zero
    2678:	01400204 	movi	r5,8
    267c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    2680:	0009883a 	mov	r4,zero
    2684:	0140a404 	movi	r5,656
    2688:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
    268c:	0009883a 	mov	r4,zero
    2690:	01400044 	movi	r5,1
    2694:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    2698:	0009883a 	mov	r4,zero
    269c:	014004c4 	movi	r5,19
    26a0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
    26a4:	0009883a 	mov	r4,zero
    26a8:	01414b04 	movi	r5,1324
    26ac:	00002c80 	call	2c8 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0590); //52c
    26b0:	0009883a 	mov	r4,zero
    26b4:	01416404 	movi	r5,1424
    26b8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
    26bc:	0009883a 	mov	r4,zero
    26c0:	01400204 	movi	r5,8
    26c4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
    26c8:	0009883a 	mov	r4,zero
    26cc:	0140a404 	movi	r5,656
    26d0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    26d4:	0009883a 	mov	r4,zero
    26d8:	01401044 	movi	r5,65
    26dc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    26e0:	0009883a 	mov	r4,zero
    26e4:	014004c4 	movi	r5,19
    26e8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
    26ec:	0009883a 	mov	r4,zero
    26f0:	01414e04 	movi	r5,1336
    26f4:	00002c80 	call	2c8 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0598); //538
    26f8:	0009883a 	mov	r4,zero
    26fc:	01416604 	movi	r5,1432
    2700:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
    2704:	0009883a 	mov	r4,zero
    2708:	01400204 	movi	r5,8
    270c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
    2710:	0009883a 	mov	r4,zero
    2714:	0140a404 	movi	r5,656
    2718:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
    271c:	0009883a 	mov	r4,zero
    2720:	01400044 	movi	r5,1
    2724:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
    2728:	0009883a 	mov	r4,zero
    272c:	014004c4 	movi	r5,19
    2730:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
    2734:	0009883a 	mov	r4,zero
    2738:	01415104 	movi	r5,1348
    273c:	00002c80 	call	2c8 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x05a0); //544
    2740:	0009883a 	mov	r4,zero
    2744:	01416804 	movi	r5,1440
    2748:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    274c:	0009883a 	mov	r4,zero
    2750:	01400204 	movi	r5,8
    2754:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    2758:	0009883a 	mov	r4,zero
    275c:	0140a404 	movi	r5,656
    2760:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
    2764:	0009883a 	mov	r4,zero
    2768:	01401044 	movi	r5,65
    276c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    2770:	0009883a 	mov	r4,zero
    2774:	014004c4 	movi	r5,19
    2778:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
    277c:	0009883a 	mov	r4,zero
    2780:	01415404 	movi	r5,1360
    2784:	00002c80 	call	2c8 <IO_write>

	//data phase IN-6
	IO_write(HPI_DATA,0x05a8); //550
    2788:	0009883a 	mov	r4,zero
    278c:	01416a04 	movi	r5,1448
    2790:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
    2794:	0009883a 	mov	r4,zero
    2798:	01400204 	movi	r5,8
    279c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    27a0:	0009883a 	mov	r4,zero
    27a4:	0140a404 	movi	r5,656
    27a8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
    27ac:	0009883a 	mov	r4,zero
    27b0:	01400044 	movi	r5,1
    27b4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    27b8:	0009883a 	mov	r4,zero
    27bc:	014004c4 	movi	r5,19
    27c0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x055c);//a
    27c4:	0009883a 	mov	r4,zero
    27c8:	01415704 	movi	r5,1372
    27cc:	00002c80 	call	2c8 <IO_write>

	//data phase IN-7
	IO_write(HPI_DATA,0x05b0); //c
    27d0:	0009883a 	mov	r4,zero
    27d4:	01416c04 	movi	r5,1456
    27d8:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
    27dc:	0009883a 	mov	r4,zero
    27e0:	01400204 	movi	r5,8
    27e4:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//560
    27e8:	0009883a 	mov	r4,zero
    27ec:	0140a404 	movi	r5,656
    27f0:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//2 //data1
    27f4:	0009883a 	mov	r4,zero
    27f8:	01401044 	movi	r5,65
    27fc:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    2800:	0009883a 	mov	r4,zero
    2804:	014004c4 	movi	r5,19
    2808:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0568);//6
    280c:	0009883a 	mov	r4,zero
    2810:	01415a04 	movi	r5,1384
    2814:	00002c80 	call	2c8 <IO_write>

	//data phase IN-8
	IO_write(HPI_DATA,0x05b8); //8
    2818:	0009883a 	mov	r4,zero
    281c:	01416e04 	movi	r5,1464
    2820:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0003);//a
    2824:	0009883a 	mov	r4,zero
    2828:	014000c4 	movi	r5,3
    282c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
    2830:	0009883a 	mov	r4,zero
    2834:	0140a404 	movi	r5,656
    2838:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
    283c:	0009883a 	mov	r4,zero
    2840:	01400044 	movi	r5,1
    2844:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//570
    2848:	0009883a 	mov	r4,zero
    284c:	014004c4 	movi	r5,19
    2850:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0574);//2
    2854:	0009883a 	mov	r4,zero
    2858:	01415d04 	movi	r5,1396
    285c:	00002c80 	call	2c8 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //574
    2860:	0009883a 	mov	r4,zero
    2864:	000b883a 	mov	r5,zero
    2868:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
    286c:	0009883a 	mov	r4,zero
    2870:	000b883a 	mov	r5,zero
    2874:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0210);//8
    2878:	0009883a 	mov	r4,zero
    287c:	01408404 	movi	r5,528
    2880:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    2884:	0009883a 	mov	r4,zero
    2888:	01401044 	movi	r5,65
    288c:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    2890:	0009883a 	mov	r4,zero
    2894:	014004c4 	movi	r5,19
    2898:	00002c80 	call	2c8 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
    289c:	0009883a 	mov	r4,zero
    28a0:	000b883a 	mov	r5,zero
    28a4:	00002c80 	call	2c8 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    28a8:	01006c04 	movi	r4,432
    28ac:	01414004 	movi	r5,1280
    28b0:	00019040 	call	1904 <UsbWrite>

}
    28b4:	e037883a 	mov	sp,fp
    28b8:	dfc00117 	ldw	ra,4(sp)
    28bc:	df000017 	ldw	fp,0(sp)
    28c0:	dec00204 	addi	sp,sp,8
    28c4:	f800283a 	ret

000028c8 <UsbWaitTDListDone>:


alt_u16 UsbWaitTDListDone()
{
    28c8:	defffd04 	addi	sp,sp,-12
    28cc:	dfc00215 	stw	ra,8(sp)
    28d0:	df000115 	stw	fp,4(sp)
    28d4:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
    28d8:	01005104 	movi	r4,324
    28dc:	00019580 	call	1958 <UsbRead>
    28e0:	e0bfff0d 	sth	r2,-4(fp)
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
    28e4:	01005104 	movi	r4,324
    28e8:	000b883a 	mov	r5,zero
    28ec:	00019040 	call	1904 <UsbWrite>
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
    28f0:	00000d06 	br	2928 <UsbWaitTDListDone+0x60>
	{
		if(usb_ctl_val == 0x0000)
    28f4:	e0bfff0b 	ldhu	r2,-4(fp)
    28f8:	10000526 	beq	r2,zero,2910 <UsbWaitTDListDone+0x48>
		{
		}
		else
		{
			printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
    28fc:	e0bfff0b 	ldhu	r2,-4(fp)
    2900:	01000074 	movhi	r4,1
    2904:	2108e604 	addi	r4,r4,9112
    2908:	100b883a 	mov	r5,r2
    290c:	00032440 	call	3244 <printf>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    2910:	01005104 	movi	r4,324
    2914:	00019580 	call	1958 <UsbRead>
    2918:	e0bfff0d 	sth	r2,-4(fp)
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
    291c:	01005104 	movi	r4,324
    2920:	000b883a 	mov	r5,zero
    2924:	00019040 	call	1904 <UsbWrite>
{
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
    2928:	e0bfff0b 	ldhu	r2,-4(fp)
    292c:	10840018 	cmpnei	r2,r2,4096
    2930:	103ff01e 	bne	r2,zero,28f4 <__alt_data_end+0xfffad1c4>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
	}

	return usb_ctl_val;
    2934:	e0bfff0b 	ldhu	r2,-4(fp)
}
    2938:	e037883a 	mov	sp,fp
    293c:	dfc00117 	ldw	ra,4(sp)
    2940:	df000017 	ldw	fp,0(sp)
    2944:	dec00204 	addi	sp,sp,8
    2948:	f800283a 	ret

0000294c <UsbGetRetryCnt>:


alt_u16 UsbGetRetryCnt()
{
    294c:	defffd04 	addi	sp,sp,-12
    2950:	dfc00215 	stw	ra,8(sp)
    2954:	df000115 	stw	fp,4(sp)
    2958:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	IO_read(HPI_STATUS);
    295c:	010000c4 	movi	r4,3
    2960:	00003300 	call	330 <IO_read>
	if(UsbRead(HPI_SIE1_MSG_ADR) == HUSB_TDListDone)
    2964:	01005104 	movi	r4,324
    2968:	00019580 	call	1958 <UsbRead>
    296c:	10bfffcc 	andi	r2,r2,65535
    2970:	10840018 	cmpnei	r2,r2,4096
    2974:	1000091e 	bne	r2,zero,299c <UsbGetRetryCnt+0x50>
	{
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
    2978:	01005104 	movi	r4,324
    297c:	000b883a 	mov	r5,zero
    2980:	00019040 	call	1904 <UsbWrite>

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    2984:	0001883a 	nop
    2988:	010000c4 	movi	r4,3
    298c:	00003300 	call	330 <IO_read>
    2990:	10bfffcc 	andi	r2,r2,65535
    2994:	1080040c 	andi	r2,r2,16
    2998:	103ffb26 	beq	r2,zero,2988 <__alt_data_end+0xfffad258>
		{
		}
	}
	//usleep(1000);
	IO_write(HPI_ADDR,0x0508);
    299c:	01000084 	movi	r4,2
    29a0:	01414204 	movi	r5,1288
    29a4:	00002c80 	call	2c8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
    29a8:	0009883a 	mov	r4,zero
    29ac:	00003300 	call	330 <IO_read>
    29b0:	e0bfff0d 	sth	r2,-4(fp)

	return usb_ctl_val;
    29b4:	e0bfff0b 	ldhu	r2,-4(fp)
}
    29b8:	e037883a 	mov	sp,fp
    29bc:	dfc00117 	ldw	ra,4(sp)
    29c0:	df000017 	ldw	fp,0(sp)
    29c4:	dec00204 	addi	sp,sp,8
    29c8:	f800283a 	ret

000029cc <UsbPrintMem>:


void UsbPrintMem()
{
    29cc:	defffc04 	addi	sp,sp,-16
    29d0:	dfc00315 	stw	ra,12(sp)
    29d4:	df000215 	stw	fp,8(sp)
    29d8:	df000204 	addi	fp,sp,8
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
    29dc:	01000084 	movi	r4,2
    29e0:	01414004 	movi	r5,1280
    29e4:	00002c80 	call	2c8 <IO_write>
	for (i = 0; i <= 200; i += 2)
    29e8:	e03ffe15 	stw	zero,-8(fp)
    29ec:	00000e06 	br	2a28 <UsbPrintMem+0x5c>
	{
		code = IO_read(HPI_DATA);
    29f0:	0009883a 	mov	r4,zero
    29f4:	00003300 	call	330 <IO_read>
    29f8:	10bfffcc 	andi	r2,r2,65535
    29fc:	e0bfff15 	stw	r2,-4(fp)
		printf("\naddr %x = %04x\n", 0x0500+i, code);
    2a00:	e0bffe17 	ldw	r2,-8(fp)
    2a04:	10814004 	addi	r2,r2,1280
    2a08:	01000074 	movhi	r4,1
    2a0c:	2108ee04 	addi	r4,r4,9144
    2a10:	100b883a 	mov	r5,r2
    2a14:	e1bfff17 	ldw	r6,-4(fp)
    2a18:	00032440 	call	3244 <printf>

void UsbPrintMem()
{
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
	for (i = 0; i <= 200; i += 2)
    2a1c:	e0bffe17 	ldw	r2,-8(fp)
    2a20:	10800084 	addi	r2,r2,2
    2a24:	e0bffe15 	stw	r2,-8(fp)
    2a28:	e0bffe17 	ldw	r2,-8(fp)
    2a2c:	10803250 	cmplti	r2,r2,201
    2a30:	103fef1e 	bne	r2,zero,29f0 <__alt_data_end+0xfffad2c0>
	{
		code = IO_read(HPI_DATA);
		printf("\naddr %x = %04x\n", 0x0500+i, code);
	}
}
    2a34:	e037883a 	mov	sp,fp
    2a38:	dfc00117 	ldw	ra,4(sp)
    2a3c:	df000017 	ldw	fp,0(sp)
    2a40:	dec00204 	addi	sp,sp,8
    2a44:	f800283a 	ret

00002a48 <malloc>:
    2a48:	00800074 	movhi	r2,1
    2a4c:	10906104 	addi	r2,r2,16772
    2a50:	200b883a 	mov	r5,r4
    2a54:	11000017 	ldw	r4,0(r2)
    2a58:	0002a701 	jmpi	2a70 <_malloc_r>

00002a5c <free>:
    2a5c:	00800074 	movhi	r2,1
    2a60:	10906104 	addi	r2,r2,16772
    2a64:	200b883a 	mov	r5,r4
    2a68:	11000017 	ldw	r4,0(r2)
    2a6c:	00077081 	jmpi	7708 <_free_r>

00002a70 <_malloc_r>:
    2a70:	defff504 	addi	sp,sp,-44
    2a74:	dc800315 	stw	r18,12(sp)
    2a78:	dfc00a15 	stw	ra,40(sp)
    2a7c:	df000915 	stw	fp,36(sp)
    2a80:	ddc00815 	stw	r23,32(sp)
    2a84:	dd800715 	stw	r22,28(sp)
    2a88:	dd400615 	stw	r21,24(sp)
    2a8c:	dd000515 	stw	r20,20(sp)
    2a90:	dcc00415 	stw	r19,16(sp)
    2a94:	dc400215 	stw	r17,8(sp)
    2a98:	dc000115 	stw	r16,4(sp)
    2a9c:	288002c4 	addi	r2,r5,11
    2aa0:	00c00584 	movi	r3,22
    2aa4:	2025883a 	mov	r18,r4
    2aa8:	18802a2e 	bgeu	r3,r2,2b54 <_malloc_r+0xe4>
    2aac:	047ffe04 	movi	r17,-8
    2ab0:	1462703a 	and	r17,r2,r17
    2ab4:	88009e16 	blt	r17,zero,2d30 <_malloc_r+0x2c0>
    2ab8:	89409d36 	bltu	r17,r5,2d30 <_malloc_r+0x2c0>
    2abc:	000f9b40 	call	f9b4 <__malloc_lock>
    2ac0:	00807dc4 	movi	r2,503
    2ac4:	14402736 	bltu	r2,r17,2b64 <_malloc_r+0xf4>
    2ac8:	8806d0fa 	srli	r3,r17,3
    2acc:	04c00074 	movhi	r19,1
    2ad0:	9cc9b304 	addi	r19,r19,9932
    2ad4:	18c5883a 	add	r2,r3,r3
    2ad8:	1085883a 	add	r2,r2,r2
    2adc:	1085883a 	add	r2,r2,r2
    2ae0:	9885883a 	add	r2,r19,r2
    2ae4:	14000317 	ldw	r16,12(r2)
    2ae8:	80814a26 	beq	r16,r2,3014 <_malloc_r+0x5a4>
    2aec:	80c00117 	ldw	r3,4(r16)
    2af0:	81000317 	ldw	r4,12(r16)
    2af4:	00bfff04 	movi	r2,-4
    2af8:	1884703a 	and	r2,r3,r2
    2afc:	81400217 	ldw	r5,8(r16)
    2b00:	8085883a 	add	r2,r16,r2
    2b04:	10c00117 	ldw	r3,4(r2)
    2b08:	29000315 	stw	r4,12(r5)
    2b0c:	21400215 	stw	r5,8(r4)
    2b10:	18c00054 	ori	r3,r3,1
    2b14:	10c00115 	stw	r3,4(r2)
    2b18:	9009883a 	mov	r4,r18
    2b1c:	000f9d40 	call	f9d4 <__malloc_unlock>
    2b20:	80800204 	addi	r2,r16,8
    2b24:	dfc00a17 	ldw	ra,40(sp)
    2b28:	df000917 	ldw	fp,36(sp)
    2b2c:	ddc00817 	ldw	r23,32(sp)
    2b30:	dd800717 	ldw	r22,28(sp)
    2b34:	dd400617 	ldw	r21,24(sp)
    2b38:	dd000517 	ldw	r20,20(sp)
    2b3c:	dcc00417 	ldw	r19,16(sp)
    2b40:	dc800317 	ldw	r18,12(sp)
    2b44:	dc400217 	ldw	r17,8(sp)
    2b48:	dc000117 	ldw	r16,4(sp)
    2b4c:	dec00b04 	addi	sp,sp,44
    2b50:	f800283a 	ret
    2b54:	04400404 	movi	r17,16
    2b58:	89407536 	bltu	r17,r5,2d30 <_malloc_r+0x2c0>
    2b5c:	000f9b40 	call	f9b4 <__malloc_lock>
    2b60:	003fd906 	br	2ac8 <__alt_data_end+0xfffad398>
    2b64:	8806d27a 	srli	r3,r17,9
    2b68:	18007526 	beq	r3,zero,2d40 <_malloc_r+0x2d0>
    2b6c:	00800104 	movi	r2,4
    2b70:	10c0ef36 	bltu	r2,r3,2f30 <_malloc_r+0x4c0>
    2b74:	8806d1ba 	srli	r3,r17,6
    2b78:	19c00e04 	addi	r7,r3,56
    2b7c:	39cb883a 	add	r5,r7,r7
    2b80:	04c00074 	movhi	r19,1
    2b84:	294b883a 	add	r5,r5,r5
    2b88:	9cc9b304 	addi	r19,r19,9932
    2b8c:	294b883a 	add	r5,r5,r5
    2b90:	994b883a 	add	r5,r19,r5
    2b94:	2c000317 	ldw	r16,12(r5)
    2b98:	2c000e26 	beq	r5,r16,2bd4 <_malloc_r+0x164>
    2b9c:	80800117 	ldw	r2,4(r16)
    2ba0:	01bfff04 	movi	r6,-4
    2ba4:	010003c4 	movi	r4,15
    2ba8:	1184703a 	and	r2,r2,r6
    2bac:	1447c83a 	sub	r3,r2,r17
    2bb0:	20c00716 	blt	r4,r3,2bd0 <_malloc_r+0x160>
    2bb4:	1800650e 	bge	r3,zero,2d4c <_malloc_r+0x2dc>
    2bb8:	84000317 	ldw	r16,12(r16)
    2bbc:	2c000526 	beq	r5,r16,2bd4 <_malloc_r+0x164>
    2bc0:	80800117 	ldw	r2,4(r16)
    2bc4:	1184703a 	and	r2,r2,r6
    2bc8:	1447c83a 	sub	r3,r2,r17
    2bcc:	20fff90e 	bge	r4,r3,2bb4 <__alt_data_end+0xfffad484>
    2bd0:	39ffffc4 	addi	r7,r7,-1
    2bd4:	38c00044 	addi	r3,r7,1
    2bd8:	01800074 	movhi	r6,1
    2bdc:	9c000417 	ldw	r16,16(r19)
    2be0:	3189b304 	addi	r6,r6,9932
    2be4:	32400204 	addi	r9,r6,8
    2be8:	82410326 	beq	r16,r9,2ff8 <_malloc_r+0x588>
    2bec:	81000117 	ldw	r4,4(r16)
    2bf0:	00bfff04 	movi	r2,-4
    2bf4:	208e703a 	and	r7,r4,r2
    2bf8:	3c45c83a 	sub	r2,r7,r17
    2bfc:	010003c4 	movi	r4,15
    2c00:	2080ee16 	blt	r4,r2,2fbc <_malloc_r+0x54c>
    2c04:	32400515 	stw	r9,20(r6)
    2c08:	32400415 	stw	r9,16(r6)
    2c0c:	1000510e 	bge	r2,zero,2d54 <_malloc_r+0x2e4>
    2c10:	00807fc4 	movi	r2,511
    2c14:	11c0ce36 	bltu	r2,r7,2f50 <_malloc_r+0x4e0>
    2c18:	3808d0fa 	srli	r4,r7,3
    2c1c:	01c00044 	movi	r7,1
    2c20:	30800117 	ldw	r2,4(r6)
    2c24:	210b883a 	add	r5,r4,r4
    2c28:	294b883a 	add	r5,r5,r5
    2c2c:	2009d0ba 	srai	r4,r4,2
    2c30:	294b883a 	add	r5,r5,r5
    2c34:	298b883a 	add	r5,r5,r6
    2c38:	2a000217 	ldw	r8,8(r5)
    2c3c:	3908983a 	sll	r4,r7,r4
    2c40:	81400315 	stw	r5,12(r16)
    2c44:	82000215 	stw	r8,8(r16)
    2c48:	2088b03a 	or	r4,r4,r2
    2c4c:	2c000215 	stw	r16,8(r5)
    2c50:	31000115 	stw	r4,4(r6)
    2c54:	44000315 	stw	r16,12(r8)
    2c58:	1805d0ba 	srai	r2,r3,2
    2c5c:	01400044 	movi	r5,1
    2c60:	288a983a 	sll	r5,r5,r2
    2c64:	21404336 	bltu	r4,r5,2d74 <_malloc_r+0x304>
    2c68:	2144703a 	and	r2,r4,r5
    2c6c:	10000a1e 	bne	r2,zero,2c98 <_malloc_r+0x228>
    2c70:	00bfff04 	movi	r2,-4
    2c74:	294b883a 	add	r5,r5,r5
    2c78:	1886703a 	and	r3,r3,r2
    2c7c:	2144703a 	and	r2,r4,r5
    2c80:	18c00104 	addi	r3,r3,4
    2c84:	1000041e 	bne	r2,zero,2c98 <_malloc_r+0x228>
    2c88:	294b883a 	add	r5,r5,r5
    2c8c:	2144703a 	and	r2,r4,r5
    2c90:	18c00104 	addi	r3,r3,4
    2c94:	103ffc26 	beq	r2,zero,2c88 <__alt_data_end+0xfffad558>
    2c98:	023fff04 	movi	r8,-4
    2c9c:	01c003c4 	movi	r7,15
    2ca0:	18c5883a 	add	r2,r3,r3
    2ca4:	1085883a 	add	r2,r2,r2
    2ca8:	1085883a 	add	r2,r2,r2
    2cac:	9895883a 	add	r10,r19,r2
    2cb0:	52c00304 	addi	r11,r10,12
    2cb4:	1819883a 	mov	r12,r3
    2cb8:	5c000017 	ldw	r16,0(r11)
    2cbc:	59bffd04 	addi	r6,r11,-12
    2cc0:	8180041e 	bne	r16,r6,2cd4 <_malloc_r+0x264>
    2cc4:	0000ce06 	br	3000 <_malloc_r+0x590>
    2cc8:	2000d70e 	bge	r4,zero,3028 <_malloc_r+0x5b8>
    2ccc:	84000317 	ldw	r16,12(r16)
    2cd0:	8180cb26 	beq	r16,r6,3000 <_malloc_r+0x590>
    2cd4:	80800117 	ldw	r2,4(r16)
    2cd8:	1204703a 	and	r2,r2,r8
    2cdc:	1449c83a 	sub	r4,r2,r17
    2ce0:	393ff90e 	bge	r7,r4,2cc8 <__alt_data_end+0xfffad598>
    2ce4:	80800317 	ldw	r2,12(r16)
    2ce8:	80c00217 	ldw	r3,8(r16)
    2cec:	89400054 	ori	r5,r17,1
    2cf0:	81400115 	stw	r5,4(r16)
    2cf4:	18800315 	stw	r2,12(r3)
    2cf8:	10c00215 	stw	r3,8(r2)
    2cfc:	8463883a 	add	r17,r16,r17
    2d00:	9c400515 	stw	r17,20(r19)
    2d04:	9c400415 	stw	r17,16(r19)
    2d08:	20800054 	ori	r2,r4,1
    2d0c:	88800115 	stw	r2,4(r17)
    2d10:	8a400315 	stw	r9,12(r17)
    2d14:	8a400215 	stw	r9,8(r17)
    2d18:	8923883a 	add	r17,r17,r4
    2d1c:	89000015 	stw	r4,0(r17)
    2d20:	9009883a 	mov	r4,r18
    2d24:	000f9d40 	call	f9d4 <__malloc_unlock>
    2d28:	80800204 	addi	r2,r16,8
    2d2c:	003f7d06 	br	2b24 <__alt_data_end+0xfffad3f4>
    2d30:	00800304 	movi	r2,12
    2d34:	90800015 	stw	r2,0(r18)
    2d38:	0005883a 	mov	r2,zero
    2d3c:	003f7906 	br	2b24 <__alt_data_end+0xfffad3f4>
    2d40:	01401f84 	movi	r5,126
    2d44:	01c00fc4 	movi	r7,63
    2d48:	003f8d06 	br	2b80 <__alt_data_end+0xfffad450>
    2d4c:	81000317 	ldw	r4,12(r16)
    2d50:	003f6a06 	br	2afc <__alt_data_end+0xfffad3cc>
    2d54:	81c5883a 	add	r2,r16,r7
    2d58:	10c00117 	ldw	r3,4(r2)
    2d5c:	9009883a 	mov	r4,r18
    2d60:	18c00054 	ori	r3,r3,1
    2d64:	10c00115 	stw	r3,4(r2)
    2d68:	000f9d40 	call	f9d4 <__malloc_unlock>
    2d6c:	80800204 	addi	r2,r16,8
    2d70:	003f6c06 	br	2b24 <__alt_data_end+0xfffad3f4>
    2d74:	9c000217 	ldw	r16,8(r19)
    2d78:	00bfff04 	movi	r2,-4
    2d7c:	85800117 	ldw	r22,4(r16)
    2d80:	b0ac703a 	and	r22,r22,r2
    2d84:	b4400336 	bltu	r22,r17,2d94 <_malloc_r+0x324>
    2d88:	b445c83a 	sub	r2,r22,r17
    2d8c:	00c003c4 	movi	r3,15
    2d90:	18805d16 	blt	r3,r2,2f08 <_malloc_r+0x498>
    2d94:	05c00074 	movhi	r23,1
    2d98:	00800074 	movhi	r2,1
    2d9c:	bdd05e04 	addi	r23,r23,16760
    2da0:	10973304 	addi	r2,r2,23756
    2da4:	15400017 	ldw	r21,0(r2)
    2da8:	b9000017 	ldw	r4,0(r23)
    2dac:	00ffffc4 	movi	r3,-1
    2db0:	858d883a 	add	r6,r16,r22
    2db4:	8d6b883a 	add	r21,r17,r21
    2db8:	20c0e426 	beq	r4,r3,314c <_malloc_r+0x6dc>
    2dbc:	ad4403c4 	addi	r21,r21,4111
    2dc0:	00fc0004 	movi	r3,-4096
    2dc4:	a8ea703a 	and	r21,r21,r3
    2dc8:	9009883a 	mov	r4,r18
    2dcc:	a80b883a 	mov	r5,r21
    2dd0:	d9800015 	stw	r6,0(sp)
    2dd4:	000334c0 	call	334c <_sbrk_r>
    2dd8:	00ffffc4 	movi	r3,-1
    2ddc:	1029883a 	mov	r20,r2
    2de0:	d9800017 	ldw	r6,0(sp)
    2de4:	10c0a426 	beq	r2,r3,3078 <_malloc_r+0x608>
    2de8:	1180a236 	bltu	r2,r6,3074 <_malloc_r+0x604>
    2dec:	07000074 	movhi	fp,1
    2df0:	e7173f04 	addi	fp,fp,23804
    2df4:	e0c00017 	ldw	r3,0(fp)
    2df8:	a8c7883a 	add	r3,r21,r3
    2dfc:	e0c00015 	stw	r3,0(fp)
    2e00:	3500da26 	beq	r6,r20,316c <_malloc_r+0x6fc>
    2e04:	b9000017 	ldw	r4,0(r23)
    2e08:	00bfffc4 	movi	r2,-1
    2e0c:	2080e426 	beq	r4,r2,31a0 <_malloc_r+0x730>
    2e10:	a185c83a 	sub	r2,r20,r6
    2e14:	1885883a 	add	r2,r3,r2
    2e18:	e0800015 	stw	r2,0(fp)
    2e1c:	a0c001cc 	andi	r3,r20,7
    2e20:	1800b526 	beq	r3,zero,30f8 <_malloc_r+0x688>
    2e24:	a0e9c83a 	sub	r20,r20,r3
    2e28:	00840204 	movi	r2,4104
    2e2c:	a5000204 	addi	r20,r20,8
    2e30:	10c7c83a 	sub	r3,r2,r3
    2e34:	a545883a 	add	r2,r20,r21
    2e38:	1083ffcc 	andi	r2,r2,4095
    2e3c:	18abc83a 	sub	r21,r3,r2
    2e40:	9009883a 	mov	r4,r18
    2e44:	a80b883a 	mov	r5,r21
    2e48:	000334c0 	call	334c <_sbrk_r>
    2e4c:	00ffffc4 	movi	r3,-1
    2e50:	10c0d026 	beq	r2,r3,3194 <_malloc_r+0x724>
    2e54:	1507c83a 	sub	r3,r2,r20
    2e58:	a8c7883a 	add	r3,r21,r3
    2e5c:	18c00054 	ori	r3,r3,1
    2e60:	e0800017 	ldw	r2,0(fp)
    2e64:	9d000215 	stw	r20,8(r19)
    2e68:	a0c00115 	stw	r3,4(r20)
    2e6c:	a887883a 	add	r3,r21,r2
    2e70:	e0c00015 	stw	r3,0(fp)
    2e74:	84c00e26 	beq	r16,r19,2eb0 <_malloc_r+0x440>
    2e78:	018003c4 	movi	r6,15
    2e7c:	3580a02e 	bgeu	r6,r22,3100 <_malloc_r+0x690>
    2e80:	81400117 	ldw	r5,4(r16)
    2e84:	013ffe04 	movi	r4,-8
    2e88:	b0bffd04 	addi	r2,r22,-12
    2e8c:	1104703a 	and	r2,r2,r4
    2e90:	2900004c 	andi	r4,r5,1
    2e94:	1108b03a 	or	r4,r2,r4
    2e98:	81000115 	stw	r4,4(r16)
    2e9c:	01400144 	movi	r5,5
    2ea0:	8089883a 	add	r4,r16,r2
    2ea4:	21400115 	stw	r5,4(r4)
    2ea8:	21400215 	stw	r5,8(r4)
    2eac:	3080c036 	bltu	r6,r2,31b0 <_malloc_r+0x740>
    2eb0:	00800074 	movhi	r2,1
    2eb4:	10973204 	addi	r2,r2,23752
    2eb8:	11000017 	ldw	r4,0(r2)
    2ebc:	20c0012e 	bgeu	r4,r3,2ec4 <_malloc_r+0x454>
    2ec0:	10c00015 	stw	r3,0(r2)
    2ec4:	00800074 	movhi	r2,1
    2ec8:	10973104 	addi	r2,r2,23748
    2ecc:	11000017 	ldw	r4,0(r2)
    2ed0:	9c000217 	ldw	r16,8(r19)
    2ed4:	20c0012e 	bgeu	r4,r3,2edc <_malloc_r+0x46c>
    2ed8:	10c00015 	stw	r3,0(r2)
    2edc:	80c00117 	ldw	r3,4(r16)
    2ee0:	00bfff04 	movi	r2,-4
    2ee4:	1886703a 	and	r3,r3,r2
    2ee8:	1c45c83a 	sub	r2,r3,r17
    2eec:	1c400236 	bltu	r3,r17,2ef8 <_malloc_r+0x488>
    2ef0:	00c003c4 	movi	r3,15
    2ef4:	18800416 	blt	r3,r2,2f08 <_malloc_r+0x498>
    2ef8:	9009883a 	mov	r4,r18
    2efc:	000f9d40 	call	f9d4 <__malloc_unlock>
    2f00:	0005883a 	mov	r2,zero
    2f04:	003f0706 	br	2b24 <__alt_data_end+0xfffad3f4>
    2f08:	88c00054 	ori	r3,r17,1
    2f0c:	80c00115 	stw	r3,4(r16)
    2f10:	8463883a 	add	r17,r16,r17
    2f14:	10800054 	ori	r2,r2,1
    2f18:	9c400215 	stw	r17,8(r19)
    2f1c:	88800115 	stw	r2,4(r17)
    2f20:	9009883a 	mov	r4,r18
    2f24:	000f9d40 	call	f9d4 <__malloc_unlock>
    2f28:	80800204 	addi	r2,r16,8
    2f2c:	003efd06 	br	2b24 <__alt_data_end+0xfffad3f4>
    2f30:	00800504 	movi	r2,20
    2f34:	10c0482e 	bgeu	r2,r3,3058 <_malloc_r+0x5e8>
    2f38:	00801504 	movi	r2,84
    2f3c:	10c06836 	bltu	r2,r3,30e0 <_malloc_r+0x670>
    2f40:	8806d33a 	srli	r3,r17,12
    2f44:	19c01b84 	addi	r7,r3,110
    2f48:	39cb883a 	add	r5,r7,r7
    2f4c:	003f0c06 	br	2b80 <__alt_data_end+0xfffad450>
    2f50:	3804d27a 	srli	r2,r7,9
    2f54:	01000104 	movi	r4,4
    2f58:	2080422e 	bgeu	r4,r2,3064 <_malloc_r+0x5f4>
    2f5c:	01000504 	movi	r4,20
    2f60:	20807c36 	bltu	r4,r2,3154 <_malloc_r+0x6e4>
    2f64:	110016c4 	addi	r4,r2,91
    2f68:	210b883a 	add	r5,r4,r4
    2f6c:	294b883a 	add	r5,r5,r5
    2f70:	294b883a 	add	r5,r5,r5
    2f74:	994b883a 	add	r5,r19,r5
    2f78:	28800217 	ldw	r2,8(r5)
    2f7c:	02000074 	movhi	r8,1
    2f80:	4209b304 	addi	r8,r8,9932
    2f84:	11406326 	beq	r2,r5,3114 <_malloc_r+0x6a4>
    2f88:	01bfff04 	movi	r6,-4
    2f8c:	11000117 	ldw	r4,4(r2)
    2f90:	2188703a 	and	r4,r4,r6
    2f94:	3900022e 	bgeu	r7,r4,2fa0 <_malloc_r+0x530>
    2f98:	10800217 	ldw	r2,8(r2)
    2f9c:	28bffb1e 	bne	r5,r2,2f8c <__alt_data_end+0xfffad85c>
    2fa0:	11800317 	ldw	r6,12(r2)
    2fa4:	99000117 	ldw	r4,4(r19)
    2fa8:	81800315 	stw	r6,12(r16)
    2fac:	80800215 	stw	r2,8(r16)
    2fb0:	34000215 	stw	r16,8(r6)
    2fb4:	14000315 	stw	r16,12(r2)
    2fb8:	003f2706 	br	2c58 <__alt_data_end+0xfffad528>
    2fbc:	88c00054 	ori	r3,r17,1
    2fc0:	80c00115 	stw	r3,4(r16)
    2fc4:	8463883a 	add	r17,r16,r17
    2fc8:	34400515 	stw	r17,20(r6)
    2fcc:	34400415 	stw	r17,16(r6)
    2fd0:	10c00054 	ori	r3,r2,1
    2fd4:	8a400315 	stw	r9,12(r17)
    2fd8:	8a400215 	stw	r9,8(r17)
    2fdc:	88c00115 	stw	r3,4(r17)
    2fe0:	88a3883a 	add	r17,r17,r2
    2fe4:	88800015 	stw	r2,0(r17)
    2fe8:	9009883a 	mov	r4,r18
    2fec:	000f9d40 	call	f9d4 <__malloc_unlock>
    2ff0:	80800204 	addi	r2,r16,8
    2ff4:	003ecb06 	br	2b24 <__alt_data_end+0xfffad3f4>
    2ff8:	31000117 	ldw	r4,4(r6)
    2ffc:	003f1606 	br	2c58 <__alt_data_end+0xfffad528>
    3000:	63000044 	addi	r12,r12,1
    3004:	608000cc 	andi	r2,r12,3
    3008:	5ac00204 	addi	r11,r11,8
    300c:	103f2a1e 	bne	r2,zero,2cb8 <__alt_data_end+0xfffad588>
    3010:	00002106 	br	3098 <_malloc_r+0x628>
    3014:	80800204 	addi	r2,r16,8
    3018:	84000517 	ldw	r16,20(r16)
    301c:	143eb31e 	bne	r2,r16,2aec <__alt_data_end+0xfffad3bc>
    3020:	18c00084 	addi	r3,r3,2
    3024:	003eec06 	br	2bd8 <__alt_data_end+0xfffad4a8>
    3028:	8085883a 	add	r2,r16,r2
    302c:	10c00117 	ldw	r3,4(r2)
    3030:	81000317 	ldw	r4,12(r16)
    3034:	81400217 	ldw	r5,8(r16)
    3038:	18c00054 	ori	r3,r3,1
    303c:	10c00115 	stw	r3,4(r2)
    3040:	29000315 	stw	r4,12(r5)
    3044:	21400215 	stw	r5,8(r4)
    3048:	9009883a 	mov	r4,r18
    304c:	000f9d40 	call	f9d4 <__malloc_unlock>
    3050:	80800204 	addi	r2,r16,8
    3054:	003eb306 	br	2b24 <__alt_data_end+0xfffad3f4>
    3058:	19c016c4 	addi	r7,r3,91
    305c:	39cb883a 	add	r5,r7,r7
    3060:	003ec706 	br	2b80 <__alt_data_end+0xfffad450>
    3064:	3804d1ba 	srli	r2,r7,6
    3068:	11000e04 	addi	r4,r2,56
    306c:	210b883a 	add	r5,r4,r4
    3070:	003fbe06 	br	2f6c <__alt_data_end+0xfffad83c>
    3074:	84ff5d26 	beq	r16,r19,2dec <__alt_data_end+0xfffad6bc>
    3078:	9c000217 	ldw	r16,8(r19)
    307c:	00bfff04 	movi	r2,-4
    3080:	80c00117 	ldw	r3,4(r16)
    3084:	1886703a 	and	r3,r3,r2
    3088:	003f9706 	br	2ee8 <__alt_data_end+0xfffad7b8>
    308c:	52800017 	ldw	r10,0(r10)
    3090:	18ffffc4 	addi	r3,r3,-1
    3094:	50805c1e 	bne	r10,r2,3208 <_malloc_r+0x798>
    3098:	190000cc 	andi	r4,r3,3
    309c:	50bffe04 	addi	r2,r10,-8
    30a0:	203ffa1e 	bne	r4,zero,308c <__alt_data_end+0xfffad95c>
    30a4:	98800117 	ldw	r2,4(r19)
    30a8:	0146303a 	nor	r3,zero,r5
    30ac:	1884703a 	and	r2,r3,r2
    30b0:	98800115 	stw	r2,4(r19)
    30b4:	294b883a 	add	r5,r5,r5
    30b8:	117f2e36 	bltu	r2,r5,2d74 <__alt_data_end+0xfffad644>
    30bc:	283f2d26 	beq	r5,zero,2d74 <__alt_data_end+0xfffad644>
    30c0:	1146703a 	and	r3,r2,r5
    30c4:	1800521e 	bne	r3,zero,3210 <_malloc_r+0x7a0>
    30c8:	6007883a 	mov	r3,r12
    30cc:	294b883a 	add	r5,r5,r5
    30d0:	1148703a 	and	r4,r2,r5
    30d4:	18c00104 	addi	r3,r3,4
    30d8:	203ffc26 	beq	r4,zero,30cc <__alt_data_end+0xfffad99c>
    30dc:	003ef006 	br	2ca0 <__alt_data_end+0xfffad570>
    30e0:	00805504 	movi	r2,340
    30e4:	10c01336 	bltu	r2,r3,3134 <_malloc_r+0x6c4>
    30e8:	8806d3fa 	srli	r3,r17,15
    30ec:	19c01dc4 	addi	r7,r3,119
    30f0:	39cb883a 	add	r5,r7,r7
    30f4:	003ea206 	br	2b80 <__alt_data_end+0xfffad450>
    30f8:	00c40004 	movi	r3,4096
    30fc:	003f4d06 	br	2e34 <__alt_data_end+0xfffad704>
    3100:	00800044 	movi	r2,1
    3104:	a0800115 	stw	r2,4(r20)
    3108:	a021883a 	mov	r16,r20
    310c:	0007883a 	mov	r3,zero
    3110:	003f7506 	br	2ee8 <__alt_data_end+0xfffad7b8>
    3114:	200bd0ba 	srai	r5,r4,2
    3118:	01800044 	movi	r6,1
    311c:	41000117 	ldw	r4,4(r8)
    3120:	314a983a 	sll	r5,r6,r5
    3124:	100d883a 	mov	r6,r2
    3128:	2908b03a 	or	r4,r5,r4
    312c:	41000115 	stw	r4,4(r8)
    3130:	003f9d06 	br	2fa8 <__alt_data_end+0xfffad878>
    3134:	00815504 	movi	r2,1364
    3138:	10c01336 	bltu	r2,r3,3188 <_malloc_r+0x718>
    313c:	8806d4ba 	srli	r3,r17,18
    3140:	19c01f04 	addi	r7,r3,124
    3144:	39cb883a 	add	r5,r7,r7
    3148:	003e8d06 	br	2b80 <__alt_data_end+0xfffad450>
    314c:	ad400404 	addi	r21,r21,16
    3150:	003f1d06 	br	2dc8 <__alt_data_end+0xfffad698>
    3154:	01001504 	movi	r4,84
    3158:	20801c36 	bltu	r4,r2,31cc <_malloc_r+0x75c>
    315c:	3804d33a 	srli	r2,r7,12
    3160:	11001b84 	addi	r4,r2,110
    3164:	210b883a 	add	r5,r4,r4
    3168:	003f8006 	br	2f6c <__alt_data_end+0xfffad83c>
    316c:	3083ffcc 	andi	r2,r6,4095
    3170:	103f241e 	bne	r2,zero,2e04 <__alt_data_end+0xfffad6d4>
    3174:	99000217 	ldw	r4,8(r19)
    3178:	ad85883a 	add	r2,r21,r22
    317c:	10800054 	ori	r2,r2,1
    3180:	20800115 	stw	r2,4(r4)
    3184:	003f4a06 	br	2eb0 <__alt_data_end+0xfffad780>
    3188:	01403f04 	movi	r5,252
    318c:	01c01f84 	movi	r7,126
    3190:	003e7b06 	br	2b80 <__alt_data_end+0xfffad450>
    3194:	00c00044 	movi	r3,1
    3198:	002b883a 	mov	r21,zero
    319c:	003f3006 	br	2e60 <__alt_data_end+0xfffad730>
    31a0:	00800074 	movhi	r2,1
    31a4:	10905e04 	addi	r2,r2,16760
    31a8:	15000015 	stw	r20,0(r2)
    31ac:	003f1b06 	br	2e1c <__alt_data_end+0xfffad6ec>
    31b0:	9009883a 	mov	r4,r18
    31b4:	81400204 	addi	r5,r16,8
    31b8:	00077080 	call	7708 <_free_r>
    31bc:	00800074 	movhi	r2,1
    31c0:	10973f04 	addi	r2,r2,23804
    31c4:	10c00017 	ldw	r3,0(r2)
    31c8:	003f3906 	br	2eb0 <__alt_data_end+0xfffad780>
    31cc:	01005504 	movi	r4,340
    31d0:	20800436 	bltu	r4,r2,31e4 <_malloc_r+0x774>
    31d4:	3804d3fa 	srli	r2,r7,15
    31d8:	11001dc4 	addi	r4,r2,119
    31dc:	210b883a 	add	r5,r4,r4
    31e0:	003f6206 	br	2f6c <__alt_data_end+0xfffad83c>
    31e4:	01015504 	movi	r4,1364
    31e8:	20800436 	bltu	r4,r2,31fc <_malloc_r+0x78c>
    31ec:	3804d4ba 	srli	r2,r7,18
    31f0:	11001f04 	addi	r4,r2,124
    31f4:	210b883a 	add	r5,r4,r4
    31f8:	003f5c06 	br	2f6c <__alt_data_end+0xfffad83c>
    31fc:	01403f04 	movi	r5,252
    3200:	01001f84 	movi	r4,126
    3204:	003f5906 	br	2f6c <__alt_data_end+0xfffad83c>
    3208:	98800117 	ldw	r2,4(r19)
    320c:	003fa906 	br	30b4 <__alt_data_end+0xfffad984>
    3210:	6007883a 	mov	r3,r12
    3214:	003ea206 	br	2ca0 <__alt_data_end+0xfffad570>

00003218 <_printf_r>:
    3218:	defffd04 	addi	sp,sp,-12
    321c:	dfc00015 	stw	ra,0(sp)
    3220:	d9800115 	stw	r6,4(sp)
    3224:	d9c00215 	stw	r7,8(sp)
    3228:	280d883a 	mov	r6,r5
    322c:	21400217 	ldw	r5,8(r4)
    3230:	d9c00104 	addi	r7,sp,4
    3234:	00034380 	call	3438 <___vfprintf_internal_r>
    3238:	dfc00017 	ldw	ra,0(sp)
    323c:	dec00304 	addi	sp,sp,12
    3240:	f800283a 	ret

00003244 <printf>:
    3244:	defffc04 	addi	sp,sp,-16
    3248:	dfc00015 	stw	ra,0(sp)
    324c:	d9400115 	stw	r5,4(sp)
    3250:	d9800215 	stw	r6,8(sp)
    3254:	d9c00315 	stw	r7,12(sp)
    3258:	00800074 	movhi	r2,1
    325c:	10906104 	addi	r2,r2,16772
    3260:	10800017 	ldw	r2,0(r2)
    3264:	200b883a 	mov	r5,r4
    3268:	d9800104 	addi	r6,sp,4
    326c:	11000217 	ldw	r4,8(r2)
    3270:	00055340 	call	5534 <__vfprintf_internal>
    3274:	dfc00017 	ldw	ra,0(sp)
    3278:	dec00404 	addi	sp,sp,16
    327c:	f800283a 	ret

00003280 <_puts_r>:
    3280:	defff604 	addi	sp,sp,-40
    3284:	dc000715 	stw	r16,28(sp)
    3288:	2021883a 	mov	r16,r4
    328c:	2809883a 	mov	r4,r5
    3290:	dc400815 	stw	r17,32(sp)
    3294:	dfc00915 	stw	ra,36(sp)
    3298:	2823883a 	mov	r17,r5
    329c:	00033a00 	call	33a0 <strlen>
    32a0:	00c00074 	movhi	r3,1
    32a4:	18d06104 	addi	r3,r3,16772
    32a8:	18c00017 	ldw	r3,0(r3)
    32ac:	11000044 	addi	r4,r2,1
    32b0:	d8800115 	stw	r2,4(sp)
    32b4:	18c00217 	ldw	r3,8(r3)
    32b8:	01400074 	movhi	r5,1
    32bc:	2948f304 	addi	r5,r5,9164
    32c0:	1880030b 	ldhu	r2,12(r3)
    32c4:	d9400215 	stw	r5,8(sp)
    32c8:	d9000615 	stw	r4,24(sp)
    32cc:	01400044 	movi	r5,1
    32d0:	01000084 	movi	r4,2
    32d4:	d9000515 	stw	r4,20(sp)
    32d8:	dc400015 	stw	r17,0(sp)
    32dc:	d9400315 	stw	r5,12(sp)
    32e0:	dec00415 	stw	sp,16(sp)
    32e4:	1108000c 	andi	r4,r2,8192
    32e8:	2000061e 	bne	r4,zero,3304 <_puts_r+0x84>
    32ec:	19401917 	ldw	r5,100(r3)
    32f0:	0137ffc4 	movi	r4,-8193
    32f4:	10880014 	ori	r2,r2,8192
    32f8:	2908703a 	and	r4,r5,r4
    32fc:	1880030d 	sth	r2,12(r3)
    3300:	19001915 	stw	r4,100(r3)
    3304:	81400217 	ldw	r5,8(r16)
    3308:	8009883a 	mov	r4,r16
    330c:	d9800404 	addi	r6,sp,16
    3310:	00079f80 	call	79f8 <__sfvwrite_r>
    3314:	1000061e 	bne	r2,zero,3330 <_puts_r+0xb0>
    3318:	00800284 	movi	r2,10
    331c:	dfc00917 	ldw	ra,36(sp)
    3320:	dc400817 	ldw	r17,32(sp)
    3324:	dc000717 	ldw	r16,28(sp)
    3328:	dec00a04 	addi	sp,sp,40
    332c:	f800283a 	ret
    3330:	00bfffc4 	movi	r2,-1
    3334:	003ff906 	br	331c <__alt_data_end+0xfffadbec>

00003338 <puts>:
    3338:	00800074 	movhi	r2,1
    333c:	10906104 	addi	r2,r2,16772
    3340:	200b883a 	mov	r5,r4
    3344:	11000017 	ldw	r4,0(r2)
    3348:	00032801 	jmpi	3280 <_puts_r>

0000334c <_sbrk_r>:
    334c:	defffd04 	addi	sp,sp,-12
    3350:	dc000015 	stw	r16,0(sp)
    3354:	04000074 	movhi	r16,1
    3358:	dc400115 	stw	r17,4(sp)
    335c:	84173404 	addi	r16,r16,23760
    3360:	2023883a 	mov	r17,r4
    3364:	2809883a 	mov	r4,r5
    3368:	dfc00215 	stw	ra,8(sp)
    336c:	80000015 	stw	zero,0(r16)
    3370:	000fbc80 	call	fbc8 <sbrk>
    3374:	00ffffc4 	movi	r3,-1
    3378:	10c00526 	beq	r2,r3,3390 <_sbrk_r+0x44>
    337c:	dfc00217 	ldw	ra,8(sp)
    3380:	dc400117 	ldw	r17,4(sp)
    3384:	dc000017 	ldw	r16,0(sp)
    3388:	dec00304 	addi	sp,sp,12
    338c:	f800283a 	ret
    3390:	80c00017 	ldw	r3,0(r16)
    3394:	183ff926 	beq	r3,zero,337c <__alt_data_end+0xfffadc4c>
    3398:	88c00015 	stw	r3,0(r17)
    339c:	003ff706 	br	337c <__alt_data_end+0xfffadc4c>

000033a0 <strlen>:
    33a0:	208000cc 	andi	r2,r4,3
    33a4:	10002026 	beq	r2,zero,3428 <strlen+0x88>
    33a8:	20800007 	ldb	r2,0(r4)
    33ac:	10002026 	beq	r2,zero,3430 <strlen+0x90>
    33b0:	2005883a 	mov	r2,r4
    33b4:	00000206 	br	33c0 <strlen+0x20>
    33b8:	10c00007 	ldb	r3,0(r2)
    33bc:	18001826 	beq	r3,zero,3420 <strlen+0x80>
    33c0:	10800044 	addi	r2,r2,1
    33c4:	10c000cc 	andi	r3,r2,3
    33c8:	183ffb1e 	bne	r3,zero,33b8 <__alt_data_end+0xfffadc88>
    33cc:	10c00017 	ldw	r3,0(r2)
    33d0:	01ffbff4 	movhi	r7,65279
    33d4:	39ffbfc4 	addi	r7,r7,-257
    33d8:	00ca303a 	nor	r5,zero,r3
    33dc:	01a02074 	movhi	r6,32897
    33e0:	19c7883a 	add	r3,r3,r7
    33e4:	31a02004 	addi	r6,r6,-32640
    33e8:	1946703a 	and	r3,r3,r5
    33ec:	1986703a 	and	r3,r3,r6
    33f0:	1800091e 	bne	r3,zero,3418 <strlen+0x78>
    33f4:	10800104 	addi	r2,r2,4
    33f8:	10c00017 	ldw	r3,0(r2)
    33fc:	19cb883a 	add	r5,r3,r7
    3400:	00c6303a 	nor	r3,zero,r3
    3404:	28c6703a 	and	r3,r5,r3
    3408:	1986703a 	and	r3,r3,r6
    340c:	183ff926 	beq	r3,zero,33f4 <__alt_data_end+0xfffadcc4>
    3410:	00000106 	br	3418 <strlen+0x78>
    3414:	10800044 	addi	r2,r2,1
    3418:	10c00007 	ldb	r3,0(r2)
    341c:	183ffd1e 	bne	r3,zero,3414 <__alt_data_end+0xfffadce4>
    3420:	1105c83a 	sub	r2,r2,r4
    3424:	f800283a 	ret
    3428:	2005883a 	mov	r2,r4
    342c:	003fe706 	br	33cc <__alt_data_end+0xfffadc9c>
    3430:	0005883a 	mov	r2,zero
    3434:	f800283a 	ret

00003438 <___vfprintf_internal_r>:
    3438:	defeb604 	addi	sp,sp,-1320
    343c:	dfc14915 	stw	ra,1316(sp)
    3440:	ddc14715 	stw	r23,1308(sp)
    3444:	dd814615 	stw	r22,1304(sp)
    3448:	202f883a 	mov	r23,r4
    344c:	282d883a 	mov	r22,r5
    3450:	d9812a15 	stw	r6,1192(sp)
    3454:	d9c12d15 	stw	r7,1204(sp)
    3458:	df014815 	stw	fp,1312(sp)
    345c:	dd414515 	stw	r21,1300(sp)
    3460:	dd014415 	stw	r20,1296(sp)
    3464:	dcc14315 	stw	r19,1292(sp)
    3468:	dc814215 	stw	r18,1288(sp)
    346c:	dc414115 	stw	r17,1284(sp)
    3470:	dc014015 	stw	r16,1280(sp)
    3474:	00080b80 	call	80b8 <_localeconv_r>
    3478:	10800017 	ldw	r2,0(r2)
    347c:	1009883a 	mov	r4,r2
    3480:	d8813515 	stw	r2,1236(sp)
    3484:	00033a00 	call	33a0 <strlen>
    3488:	d8813815 	stw	r2,1248(sp)
    348c:	b8000226 	beq	r23,zero,3498 <___vfprintf_internal_r+0x60>
    3490:	b8800e17 	ldw	r2,56(r23)
    3494:	10010526 	beq	r2,zero,38ac <___vfprintf_internal_r+0x474>
    3498:	b0c0030b 	ldhu	r3,12(r22)
    349c:	1908000c 	andi	r4,r3,8192
    34a0:	1805883a 	mov	r2,r3
    34a4:	2000071e 	bne	r4,zero,34c4 <___vfprintf_internal_r+0x8c>
    34a8:	b1001917 	ldw	r4,100(r22)
    34ac:	18880014 	ori	r2,r3,8192
    34b0:	00f7ffc4 	movi	r3,-8193
    34b4:	20c8703a 	and	r4,r4,r3
    34b8:	b080030d 	sth	r2,12(r22)
    34bc:	1007883a 	mov	r3,r2
    34c0:	b1001915 	stw	r4,100(r22)
    34c4:	1100020c 	andi	r4,r2,8
    34c8:	2000a826 	beq	r4,zero,376c <___vfprintf_internal_r+0x334>
    34cc:	b1000417 	ldw	r4,16(r22)
    34d0:	2000a626 	beq	r4,zero,376c <___vfprintf_internal_r+0x334>
    34d4:	1080068c 	andi	r2,r2,26
    34d8:	01000284 	movi	r4,10
    34dc:	1100ac26 	beq	r2,r4,3790 <___vfprintf_internal_r+0x358>
    34e0:	d8c10e04 	addi	r3,sp,1080
    34e4:	d9010dc4 	addi	r4,sp,1079
    34e8:	d9400404 	addi	r5,sp,16
    34ec:	05000074 	movhi	r20,1
    34f0:	1905c83a 	sub	r2,r3,r4
    34f4:	a5090484 	addi	r20,r20,9234
    34f8:	d8c12815 	stw	r3,1184(sp)
    34fc:	d9012915 	stw	r4,1188(sp)
    3500:	d9411e15 	stw	r5,1144(sp)
    3504:	d8012015 	stw	zero,1152(sp)
    3508:	d8011f15 	stw	zero,1148(sp)
    350c:	d8013315 	stw	zero,1228(sp)
    3510:	d8013715 	stw	zero,1244(sp)
    3514:	d8013915 	stw	zero,1252(sp)
    3518:	d8013b15 	stw	zero,1260(sp)
    351c:	d8013a15 	stw	zero,1256(sp)
    3520:	d8012f15 	stw	zero,1212(sp)
    3524:	2811883a 	mov	r8,r5
    3528:	d8813c15 	stw	r2,1264(sp)
    352c:	d8c12a17 	ldw	r3,1192(sp)
    3530:	18800007 	ldb	r2,0(r3)
    3534:	10021326 	beq	r2,zero,3d84 <___vfprintf_internal_r+0x94c>
    3538:	00c00944 	movi	r3,37
    353c:	dc012a17 	ldw	r16,1192(sp)
    3540:	10c0021e 	bne	r2,r3,354c <___vfprintf_internal_r+0x114>
    3544:	00001606 	br	35a0 <___vfprintf_internal_r+0x168>
    3548:	10c08526 	beq	r2,r3,3760 <___vfprintf_internal_r+0x328>
    354c:	84000044 	addi	r16,r16,1
    3550:	80800007 	ldb	r2,0(r16)
    3554:	103ffc1e 	bne	r2,zero,3548 <__alt_data_end+0xfffade18>
    3558:	d9012a17 	ldw	r4,1192(sp)
    355c:	8123c83a 	sub	r17,r16,r4
    3560:	88000f26 	beq	r17,zero,35a0 <___vfprintf_internal_r+0x168>
    3564:	d8812a17 	ldw	r2,1192(sp)
    3568:	d8c12017 	ldw	r3,1152(sp)
    356c:	44400115 	stw	r17,4(r8)
    3570:	40800015 	stw	r2,0(r8)
    3574:	d8811f17 	ldw	r2,1148(sp)
    3578:	1c47883a 	add	r3,r3,r17
    357c:	d8c12015 	stw	r3,1152(sp)
    3580:	10800044 	addi	r2,r2,1
    3584:	d8811f15 	stw	r2,1148(sp)
    3588:	00c001c4 	movi	r3,7
    358c:	1880b516 	blt	r3,r2,3864 <___vfprintf_internal_r+0x42c>
    3590:	42000204 	addi	r8,r8,8
    3594:	d8c12f17 	ldw	r3,1212(sp)
    3598:	1c47883a 	add	r3,r3,r17
    359c:	d8c12f15 	stw	r3,1212(sp)
    35a0:	80800007 	ldb	r2,0(r16)
    35a4:	1000b626 	beq	r2,zero,3880 <___vfprintf_internal_r+0x448>
    35a8:	80800044 	addi	r2,r16,1
    35ac:	84000047 	ldb	r16,1(r16)
    35b0:	0027883a 	mov	r19,zero
    35b4:	0039883a 	mov	fp,zero
    35b8:	dcc12b05 	stb	r19,1196(sp)
    35bc:	d8012785 	stb	zero,1182(sp)
    35c0:	027fffc4 	movi	r9,-1
    35c4:	d8012e15 	stw	zero,1208(sp)
    35c8:	04401604 	movi	r17,88
    35cc:	04800244 	movi	r18,9
    35d0:	da012a15 	stw	r8,1192(sp)
    35d4:	e027883a 	mov	r19,fp
    35d8:	17000044 	addi	fp,r2,1
    35dc:	80bff804 	addi	r2,r16,-32
    35e0:	88831236 	bltu	r17,r2,422c <___vfprintf_internal_r+0xdf4>
    35e4:	100490ba 	slli	r2,r2,2
    35e8:	01000034 	movhi	r4,0
    35ec:	210d7f04 	addi	r4,r4,13820
    35f0:	1105883a 	add	r2,r2,r4
    35f4:	10800017 	ldw	r2,0(r2)
    35f8:	1000683a 	jmp	r2
    35fc:	00004148 	cmpgei	zero,zero,261
    3600:	0000422c 	andhi	zero,zero,264
    3604:	0000422c 	andhi	zero,zero,264
    3608:	00004164 	muli	zero,zero,261
    360c:	0000422c 	andhi	zero,zero,264
    3610:	0000422c 	andhi	zero,zero,264
    3614:	0000422c 	andhi	zero,zero,264
    3618:	0000422c 	andhi	zero,zero,264
    361c:	0000422c 	andhi	zero,zero,264
    3620:	0000422c 	andhi	zero,zero,264
    3624:	00004174 	movhi	zero,261
    3628:	0000419c 	xori	zero,zero,262
    362c:	0000422c 	andhi	zero,zero,264
    3630:	000038b8 	rdprs	zero,zero,226
    3634:	000038c8 	cmpgei	zero,zero,227
    3638:	0000422c 	andhi	zero,zero,264
    363c:	00003918 	cmpnei	zero,zero,228
    3640:	00003928 	cmpgeui	zero,zero,228
    3644:	00003928 	cmpgeui	zero,zero,228
    3648:	00003928 	cmpgeui	zero,zero,228
    364c:	00003928 	cmpgeui	zero,zero,228
    3650:	00003928 	cmpgeui	zero,zero,228
    3654:	00003928 	cmpgeui	zero,zero,228
    3658:	00003928 	cmpgeui	zero,zero,228
    365c:	00003928 	cmpgeui	zero,zero,228
    3660:	00003928 	cmpgeui	zero,zero,228
    3664:	0000422c 	andhi	zero,zero,264
    3668:	0000422c 	andhi	zero,zero,264
    366c:	0000422c 	andhi	zero,zero,264
    3670:	0000422c 	andhi	zero,zero,264
    3674:	0000422c 	andhi	zero,zero,264
    3678:	0000422c 	andhi	zero,zero,264
    367c:	0000422c 	andhi	zero,zero,264
    3680:	0000422c 	andhi	zero,zero,264
    3684:	0000422c 	andhi	zero,zero,264
    3688:	0000422c 	andhi	zero,zero,264
    368c:	0000396c 	andhi	zero,zero,229
    3690:	00003d8c 	andi	zero,zero,246
    3694:	0000422c 	andhi	zero,zero,264
    3698:	00003d8c 	andi	zero,zero,246
    369c:	0000422c 	andhi	zero,zero,264
    36a0:	0000422c 	andhi	zero,zero,264
    36a4:	0000422c 	andhi	zero,zero,264
    36a8:	0000422c 	andhi	zero,zero,264
    36ac:	00003e34 	movhi	zero,248
    36b0:	0000422c 	andhi	zero,zero,264
    36b4:	0000422c 	andhi	zero,zero,264
    36b8:	00003e44 	movi	zero,249
    36bc:	0000422c 	andhi	zero,zero,264
    36c0:	0000422c 	andhi	zero,zero,264
    36c4:	0000422c 	andhi	zero,zero,264
    36c8:	0000422c 	andhi	zero,zero,264
    36cc:	0000422c 	andhi	zero,zero,264
    36d0:	00003e88 	cmpgei	zero,zero,250
    36d4:	0000422c 	andhi	zero,zero,264
    36d8:	0000422c 	andhi	zero,zero,264
    36dc:	00003ec0 	call	3ec <get_keycode+0x58>
    36e0:	0000422c 	andhi	zero,zero,264
    36e4:	0000422c 	andhi	zero,zero,264
    36e8:	0000422c 	andhi	zero,zero,264
    36ec:	0000422c 	andhi	zero,zero,264
    36f0:	0000422c 	andhi	zero,zero,264
    36f4:	0000422c 	andhi	zero,zero,264
    36f8:	0000422c 	andhi	zero,zero,264
    36fc:	0000422c 	andhi	zero,zero,264
    3700:	0000422c 	andhi	zero,zero,264
    3704:	0000422c 	andhi	zero,zero,264
    3708:	000040fc 	xorhi	zero,zero,259
    370c:	000040a8 	cmpgeui	zero,zero,258
    3710:	00003d8c 	andi	zero,zero,246
    3714:	00003d8c 	andi	zero,zero,246
    3718:	00003d8c 	andi	zero,zero,246
    371c:	000040ec 	andhi	zero,zero,259
    3720:	000040a8 	cmpgeui	zero,zero,258
    3724:	0000422c 	andhi	zero,zero,264
    3728:	0000422c 	andhi	zero,zero,264
    372c:	00003fc4 	movi	zero,255
    3730:	0000422c 	andhi	zero,zero,264
    3734:	00003fdc 	xori	zero,zero,255
    3738:	0000401c 	xori	zero,zero,256
    373c:	0000405c 	xori	zero,zero,257
    3740:	00003f28 	cmpgeui	zero,zero,252
    3744:	0000422c 	andhi	zero,zero,264
    3748:	000041b0 	cmpltui	zero,zero,262
    374c:	0000422c 	andhi	zero,zero,264
    3750:	00003f38 	rdprs	zero,zero,252
    3754:	0000422c 	andhi	zero,zero,264
    3758:	0000422c 	andhi	zero,zero,264
    375c:	00003f78 	rdprs	zero,zero,253
    3760:	d9412a17 	ldw	r5,1192(sp)
    3764:	8163c83a 	sub	r17,r16,r5
    3768:	003f7d06 	br	3560 <__alt_data_end+0xfffade30>
    376c:	b809883a 	mov	r4,r23
    3770:	b00b883a 	mov	r5,r22
    3774:	00055580 	call	5558 <__swsetup_r>
    3778:	10002d1e 	bne	r2,zero,3830 <___vfprintf_internal_r+0x3f8>
    377c:	b0c0030b 	ldhu	r3,12(r22)
    3780:	01000284 	movi	r4,10
    3784:	1805883a 	mov	r2,r3
    3788:	1080068c 	andi	r2,r2,26
    378c:	113f541e 	bne	r2,r4,34e0 <__alt_data_end+0xfffaddb0>
    3790:	b080038b 	ldhu	r2,14(r22)
    3794:	113fffcc 	andi	r4,r2,65535
    3798:	2120001c 	xori	r4,r4,32768
    379c:	21200004 	addi	r4,r4,-32768
    37a0:	203f4f16 	blt	r4,zero,34e0 <__alt_data_end+0xfffaddb0>
    37a4:	b2c01917 	ldw	r11,100(r22)
    37a8:	b2800717 	ldw	r10,28(r22)
    37ac:	b2400917 	ldw	r9,36(r22)
    37b0:	d9812a17 	ldw	r6,1192(sp)
    37b4:	d9c12d17 	ldw	r7,1204(sp)
    37b8:	02010004 	movi	r8,1024
    37bc:	18ffff4c 	andi	r3,r3,65533
    37c0:	d881078d 	sth	r2,1054(sp)
    37c4:	b809883a 	mov	r4,r23
    37c8:	d8800404 	addi	r2,sp,16
    37cc:	d9410404 	addi	r5,sp,1040
    37d0:	d8c1070d 	sth	r3,1052(sp)
    37d4:	dac11d15 	stw	r11,1140(sp)
    37d8:	da810b15 	stw	r10,1068(sp)
    37dc:	da410d15 	stw	r9,1076(sp)
    37e0:	d8810415 	stw	r2,1040(sp)
    37e4:	d8810815 	stw	r2,1056(sp)
    37e8:	da010615 	stw	r8,1048(sp)
    37ec:	da010915 	stw	r8,1060(sp)
    37f0:	d8010a15 	stw	zero,1064(sp)
    37f4:	00034380 	call	3438 <___vfprintf_internal_r>
    37f8:	1021883a 	mov	r16,r2
    37fc:	10000416 	blt	r2,zero,3810 <___vfprintf_internal_r+0x3d8>
    3800:	b809883a 	mov	r4,r23
    3804:	d9410404 	addi	r5,sp,1040
    3808:	0006fd80 	call	6fd8 <_fflush_r>
    380c:	1007301e 	bne	r2,zero,54d0 <___vfprintf_internal_r+0x2098>
    3810:	d881070b 	ldhu	r2,1052(sp)
    3814:	1080100c 	andi	r2,r2,64
    3818:	10000326 	beq	r2,zero,3828 <___vfprintf_internal_r+0x3f0>
    381c:	b080030b 	ldhu	r2,12(r22)
    3820:	10801014 	ori	r2,r2,64
    3824:	b080030d 	sth	r2,12(r22)
    3828:	8005883a 	mov	r2,r16
    382c:	00000106 	br	3834 <___vfprintf_internal_r+0x3fc>
    3830:	00bfffc4 	movi	r2,-1
    3834:	dfc14917 	ldw	ra,1316(sp)
    3838:	df014817 	ldw	fp,1312(sp)
    383c:	ddc14717 	ldw	r23,1308(sp)
    3840:	dd814617 	ldw	r22,1304(sp)
    3844:	dd414517 	ldw	r21,1300(sp)
    3848:	dd014417 	ldw	r20,1296(sp)
    384c:	dcc14317 	ldw	r19,1292(sp)
    3850:	dc814217 	ldw	r18,1288(sp)
    3854:	dc414117 	ldw	r17,1284(sp)
    3858:	dc014017 	ldw	r16,1280(sp)
    385c:	dec14a04 	addi	sp,sp,1320
    3860:	f800283a 	ret
    3864:	b809883a 	mov	r4,r23
    3868:	b00b883a 	mov	r5,r22
    386c:	d9811e04 	addi	r6,sp,1144
    3870:	000a07c0 	call	a07c <__sprint_r>
    3874:	1000081e 	bne	r2,zero,3898 <___vfprintf_internal_r+0x460>
    3878:	da000404 	addi	r8,sp,16
    387c:	003f4506 	br	3594 <__alt_data_end+0xfffade64>
    3880:	d8812017 	ldw	r2,1152(sp)
    3884:	10000426 	beq	r2,zero,3898 <___vfprintf_internal_r+0x460>
    3888:	b809883a 	mov	r4,r23
    388c:	b00b883a 	mov	r5,r22
    3890:	d9811e04 	addi	r6,sp,1144
    3894:	000a07c0 	call	a07c <__sprint_r>
    3898:	b080030b 	ldhu	r2,12(r22)
    389c:	1080100c 	andi	r2,r2,64
    38a0:	103fe31e 	bne	r2,zero,3830 <__alt_data_end+0xfffae100>
    38a4:	d8812f17 	ldw	r2,1212(sp)
    38a8:	003fe206 	br	3834 <__alt_data_end+0xfffae104>
    38ac:	b809883a 	mov	r4,r23
    38b0:	00075940 	call	7594 <__sinit>
    38b4:	003ef806 	br	3498 <__alt_data_end+0xfffadd68>
    38b8:	e005883a 	mov	r2,fp
    38bc:	9cc00114 	ori	r19,r19,4
    38c0:	e4000007 	ldb	r16,0(fp)
    38c4:	003f4406 	br	35d8 <__alt_data_end+0xfffadea8>
    38c8:	e4000007 	ldb	r16,0(fp)
    38cc:	01000a84 	movi	r4,42
    38d0:	e0800044 	addi	r2,fp,1
    38d4:	8106f626 	beq	r16,r4,54b0 <___vfprintf_internal_r+0x2078>
    38d8:	857ff404 	addi	r21,r16,-48
    38dc:	1039883a 	mov	fp,r2
    38e0:	0013883a 	mov	r9,zero
    38e4:	957f3d36 	bltu	r18,r21,35dc <__alt_data_end+0xfffadeac>
    38e8:	0009883a 	mov	r4,zero
    38ec:	01400284 	movi	r5,10
    38f0:	000cbb00 	call	cbb0 <__mulsi3>
    38f4:	e4000007 	ldb	r16,0(fp)
    38f8:	a889883a 	add	r4,r21,r2
    38fc:	e7000044 	addi	fp,fp,1
    3900:	857ff404 	addi	r21,r16,-48
    3904:	957ff92e 	bgeu	r18,r21,38ec <__alt_data_end+0xfffae1bc>
    3908:	2013883a 	mov	r9,r4
    390c:	203f330e 	bge	r4,zero,35dc <__alt_data_end+0xfffadeac>
    3910:	027fffc4 	movi	r9,-1
    3914:	003f3106 	br	35dc <__alt_data_end+0xfffadeac>
    3918:	9cc02014 	ori	r19,r19,128
    391c:	e005883a 	mov	r2,fp
    3920:	e4000007 	ldb	r16,0(fp)
    3924:	003f2c06 	br	35d8 <__alt_data_end+0xfffadea8>
    3928:	857ff404 	addi	r21,r16,-48
    392c:	d8012e15 	stw	zero,1208(sp)
    3930:	e021883a 	mov	r16,fp
    3934:	0009883a 	mov	r4,zero
    3938:	da412c15 	stw	r9,1200(sp)
    393c:	01400284 	movi	r5,10
    3940:	000cbb00 	call	cbb0 <__mulsi3>
    3944:	81400007 	ldb	r5,0(r16)
    3948:	1549883a 	add	r4,r2,r21
    394c:	e7000044 	addi	fp,fp,1
    3950:	2d7ff404 	addi	r21,r5,-48
    3954:	e021883a 	mov	r16,fp
    3958:	957ff82e 	bgeu	r18,r21,393c <__alt_data_end+0xfffae20c>
    395c:	2821883a 	mov	r16,r5
    3960:	d9012e15 	stw	r4,1208(sp)
    3964:	da412c17 	ldw	r9,1200(sp)
    3968:	003f1c06 	br	35dc <__alt_data_end+0xfffadeac>
    396c:	da012a17 	ldw	r8,1192(sp)
    3970:	df012a15 	stw	fp,1192(sp)
    3974:	9839883a 	mov	fp,r19
    3978:	dcc12b03 	ldbu	r19,1196(sp)
    397c:	e7000414 	ori	fp,fp,16
    3980:	e080080c 	andi	r2,fp,32
    3984:	dcc12785 	stb	r19,1182(sp)
    3988:	d8c12d17 	ldw	r3,1204(sp)
    398c:	1001ce26 	beq	r2,zero,40c8 <___vfprintf_internal_r+0xc90>
    3990:	d9012d17 	ldw	r4,1204(sp)
    3994:	18800117 	ldw	r2,4(r3)
    3998:	1c800017 	ldw	r18,0(r3)
    399c:	21000204 	addi	r4,r4,8
    39a0:	d9012d15 	stw	r4,1204(sp)
    39a4:	102b883a 	mov	r21,r2
    39a8:	10044916 	blt	r2,zero,4ad0 <___vfprintf_internal_r+0x1698>
    39ac:	dcc12783 	ldbu	r19,1182(sp)
    39b0:	da413215 	stw	r9,1224(sp)
    39b4:	00800044 	movi	r2,1
    39b8:	9546b03a 	or	r3,r18,r21
    39bc:	48000216 	blt	r9,zero,39c8 <___vfprintf_internal_r+0x590>
    39c0:	013fdfc4 	movi	r4,-129
    39c4:	e138703a 	and	fp,fp,r4
    39c8:	1802251e 	bne	r3,zero,4260 <___vfprintf_internal_r+0xe28>
    39cc:	48031726 	beq	r9,zero,462c <___vfprintf_internal_r+0x11f4>
    39d0:	10803fcc 	andi	r2,r2,255
    39d4:	00c00044 	movi	r3,1
    39d8:	10c24526 	beq	r2,r3,42f0 <___vfprintf_internal_r+0xeb8>
    39dc:	00c00084 	movi	r3,2
    39e0:	10c33426 	beq	r2,r3,46b4 <___vfprintf_internal_r+0x127c>
    39e4:	d8c10e04 	addi	r3,sp,1080
    39e8:	9008d0fa 	srli	r4,r18,3
    39ec:	a80a977a 	slli	r5,r21,29
    39f0:	a82ad0fa 	srli	r21,r21,3
    39f4:	948001cc 	andi	r18,r18,7
    39f8:	90800c04 	addi	r2,r18,48
    39fc:	18ffffc4 	addi	r3,r3,-1
    3a00:	2924b03a 	or	r18,r5,r4
    3a04:	18800005 	stb	r2,0(r3)
    3a08:	9548b03a 	or	r4,r18,r21
    3a0c:	203ff61e 	bne	r4,zero,39e8 <__alt_data_end+0xfffae2b8>
    3a10:	e100004c 	andi	r4,fp,1
    3a14:	d8c13115 	stw	r3,1220(sp)
    3a18:	20039a1e 	bne	r4,zero,4884 <___vfprintf_internal_r+0x144c>
    3a1c:	d8812817 	ldw	r2,1184(sp)
    3a20:	10e3c83a 	sub	r17,r2,r3
    3a24:	8805883a 	mov	r2,r17
    3a28:	8a40010e 	bge	r17,r9,3a30 <___vfprintf_internal_r+0x5f8>
    3a2c:	4805883a 	mov	r2,r9
    3a30:	d8812b15 	stw	r2,1196(sp)
    3a34:	d8013415 	stw	zero,1232(sp)
    3a38:	98803fcc 	andi	r2,r19,255
    3a3c:	1080201c 	xori	r2,r2,128
    3a40:	10bfe004 	addi	r2,r2,-128
    3a44:	10000326 	beq	r2,zero,3a54 <___vfprintf_internal_r+0x61c>
    3a48:	d8c12b17 	ldw	r3,1196(sp)
    3a4c:	18c00044 	addi	r3,r3,1
    3a50:	d8c12b15 	stw	r3,1196(sp)
    3a54:	e0c0008c 	andi	r3,fp,2
    3a58:	d8c12c15 	stw	r3,1200(sp)
    3a5c:	18000326 	beq	r3,zero,3a6c <___vfprintf_internal_r+0x634>
    3a60:	d8c12b17 	ldw	r3,1196(sp)
    3a64:	18c00084 	addi	r3,r3,2
    3a68:	d8c12b15 	stw	r3,1196(sp)
    3a6c:	e0c0210c 	andi	r3,fp,132
    3a70:	d8c13015 	stw	r3,1216(sp)
    3a74:	1801f81e 	bne	r3,zero,4258 <___vfprintf_internal_r+0xe20>
    3a78:	d9012e17 	ldw	r4,1208(sp)
    3a7c:	d8c12b17 	ldw	r3,1196(sp)
    3a80:	20ebc83a 	sub	r21,r4,r3
    3a84:	0541f40e 	bge	zero,r21,4258 <___vfprintf_internal_r+0xe20>
    3a88:	02400404 	movi	r9,16
    3a8c:	d8c12017 	ldw	r3,1152(sp)
    3a90:	d8811f17 	ldw	r2,1148(sp)
    3a94:	4d45750e 	bge	r9,r21,506c <___vfprintf_internal_r+0x1c34>
    3a98:	01400074 	movhi	r5,1
    3a9c:	29490884 	addi	r5,r5,9250
    3aa0:	d9413615 	stw	r5,1240(sp)
    3aa4:	4827883a 	mov	r19,r9
    3aa8:	048001c4 	movi	r18,7
    3aac:	00000306 	br	3abc <___vfprintf_internal_r+0x684>
    3ab0:	ad7ffc04 	addi	r21,r21,-16
    3ab4:	42000204 	addi	r8,r8,8
    3ab8:	9d40130e 	bge	r19,r21,3b08 <___vfprintf_internal_r+0x6d0>
    3abc:	01000074 	movhi	r4,1
    3ac0:	18c00404 	addi	r3,r3,16
    3ac4:	10800044 	addi	r2,r2,1
    3ac8:	21090884 	addi	r4,r4,9250
    3acc:	41000015 	stw	r4,0(r8)
    3ad0:	44c00115 	stw	r19,4(r8)
    3ad4:	d8c12015 	stw	r3,1152(sp)
    3ad8:	d8811f15 	stw	r2,1148(sp)
    3adc:	90bff40e 	bge	r18,r2,3ab0 <__alt_data_end+0xfffae380>
    3ae0:	b809883a 	mov	r4,r23
    3ae4:	b00b883a 	mov	r5,r22
    3ae8:	d9811e04 	addi	r6,sp,1144
    3aec:	000a07c0 	call	a07c <__sprint_r>
    3af0:	103f691e 	bne	r2,zero,3898 <__alt_data_end+0xfffae168>
    3af4:	ad7ffc04 	addi	r21,r21,-16
    3af8:	d8c12017 	ldw	r3,1152(sp)
    3afc:	d8811f17 	ldw	r2,1148(sp)
    3b00:	da000404 	addi	r8,sp,16
    3b04:	9d7fed16 	blt	r19,r21,3abc <__alt_data_end+0xfffae38c>
    3b08:	d9413617 	ldw	r5,1240(sp)
    3b0c:	a8c7883a 	add	r3,r21,r3
    3b10:	10800044 	addi	r2,r2,1
    3b14:	41400015 	stw	r5,0(r8)
    3b18:	45400115 	stw	r21,4(r8)
    3b1c:	d8c12015 	stw	r3,1152(sp)
    3b20:	d8811f15 	stw	r2,1148(sp)
    3b24:	010001c4 	movi	r4,7
    3b28:	20832b16 	blt	r4,r2,47d8 <___vfprintf_internal_r+0x13a0>
    3b2c:	d8812787 	ldb	r2,1182(sp)
    3b30:	42000204 	addi	r8,r8,8
    3b34:	10000c26 	beq	r2,zero,3b68 <___vfprintf_internal_r+0x730>
    3b38:	d8811f17 	ldw	r2,1148(sp)
    3b3c:	d9012784 	addi	r4,sp,1182
    3b40:	18c00044 	addi	r3,r3,1
    3b44:	10800044 	addi	r2,r2,1
    3b48:	41000015 	stw	r4,0(r8)
    3b4c:	01000044 	movi	r4,1
    3b50:	41000115 	stw	r4,4(r8)
    3b54:	d8c12015 	stw	r3,1152(sp)
    3b58:	d8811f15 	stw	r2,1148(sp)
    3b5c:	010001c4 	movi	r4,7
    3b60:	2082c416 	blt	r4,r2,4674 <___vfprintf_internal_r+0x123c>
    3b64:	42000204 	addi	r8,r8,8
    3b68:	d8812c17 	ldw	r2,1200(sp)
    3b6c:	10000c26 	beq	r2,zero,3ba0 <___vfprintf_internal_r+0x768>
    3b70:	d8811f17 	ldw	r2,1148(sp)
    3b74:	d9012704 	addi	r4,sp,1180
    3b78:	18c00084 	addi	r3,r3,2
    3b7c:	10800044 	addi	r2,r2,1
    3b80:	41000015 	stw	r4,0(r8)
    3b84:	01000084 	movi	r4,2
    3b88:	41000115 	stw	r4,4(r8)
    3b8c:	d8c12015 	stw	r3,1152(sp)
    3b90:	d8811f15 	stw	r2,1148(sp)
    3b94:	010001c4 	movi	r4,7
    3b98:	2082be16 	blt	r4,r2,4694 <___vfprintf_internal_r+0x125c>
    3b9c:	42000204 	addi	r8,r8,8
    3ba0:	d9013017 	ldw	r4,1216(sp)
    3ba4:	00802004 	movi	r2,128
    3ba8:	20822026 	beq	r4,r2,442c <___vfprintf_internal_r+0xff4>
    3bac:	d9413217 	ldw	r5,1224(sp)
    3bb0:	2c67c83a 	sub	r19,r5,r17
    3bb4:	04c0260e 	bge	zero,r19,3c50 <___vfprintf_internal_r+0x818>
    3bb8:	05400404 	movi	r21,16
    3bbc:	d8811f17 	ldw	r2,1148(sp)
    3bc0:	acc4720e 	bge	r21,r19,4d8c <___vfprintf_internal_r+0x1954>
    3bc4:	01400074 	movhi	r5,1
    3bc8:	29490484 	addi	r5,r5,9234
    3bcc:	d9412c15 	stw	r5,1200(sp)
    3bd0:	048001c4 	movi	r18,7
    3bd4:	00000306 	br	3be4 <___vfprintf_internal_r+0x7ac>
    3bd8:	9cfffc04 	addi	r19,r19,-16
    3bdc:	42000204 	addi	r8,r8,8
    3be0:	acc0110e 	bge	r21,r19,3c28 <___vfprintf_internal_r+0x7f0>
    3be4:	18c00404 	addi	r3,r3,16
    3be8:	10800044 	addi	r2,r2,1
    3bec:	45000015 	stw	r20,0(r8)
    3bf0:	45400115 	stw	r21,4(r8)
    3bf4:	d8c12015 	stw	r3,1152(sp)
    3bf8:	d8811f15 	stw	r2,1148(sp)
    3bfc:	90bff60e 	bge	r18,r2,3bd8 <__alt_data_end+0xfffae4a8>
    3c00:	b809883a 	mov	r4,r23
    3c04:	b00b883a 	mov	r5,r22
    3c08:	d9811e04 	addi	r6,sp,1144
    3c0c:	000a07c0 	call	a07c <__sprint_r>
    3c10:	103f211e 	bne	r2,zero,3898 <__alt_data_end+0xfffae168>
    3c14:	9cfffc04 	addi	r19,r19,-16
    3c18:	d8c12017 	ldw	r3,1152(sp)
    3c1c:	d8811f17 	ldw	r2,1148(sp)
    3c20:	da000404 	addi	r8,sp,16
    3c24:	acffef16 	blt	r21,r19,3be4 <__alt_data_end+0xfffae4b4>
    3c28:	d9012c17 	ldw	r4,1200(sp)
    3c2c:	1cc7883a 	add	r3,r3,r19
    3c30:	10800044 	addi	r2,r2,1
    3c34:	41000015 	stw	r4,0(r8)
    3c38:	44c00115 	stw	r19,4(r8)
    3c3c:	d8c12015 	stw	r3,1152(sp)
    3c40:	d8811f15 	stw	r2,1148(sp)
    3c44:	010001c4 	movi	r4,7
    3c48:	20828216 	blt	r4,r2,4654 <___vfprintf_internal_r+0x121c>
    3c4c:	42000204 	addi	r8,r8,8
    3c50:	e080400c 	andi	r2,fp,256
    3c54:	1001ac1e 	bne	r2,zero,4308 <___vfprintf_internal_r+0xed0>
    3c58:	d8811f17 	ldw	r2,1148(sp)
    3c5c:	d9413117 	ldw	r5,1220(sp)
    3c60:	1c47883a 	add	r3,r3,r17
    3c64:	10800044 	addi	r2,r2,1
    3c68:	41400015 	stw	r5,0(r8)
    3c6c:	44400115 	stw	r17,4(r8)
    3c70:	d8c12015 	stw	r3,1152(sp)
    3c74:	d8811f15 	stw	r2,1148(sp)
    3c78:	010001c4 	movi	r4,7
    3c7c:	20825d16 	blt	r4,r2,45f4 <___vfprintf_internal_r+0x11bc>
    3c80:	42000204 	addi	r8,r8,8
    3c84:	e080010c 	andi	r2,fp,4
    3c88:	10003126 	beq	r2,zero,3d50 <___vfprintf_internal_r+0x918>
    3c8c:	d8812e17 	ldw	r2,1208(sp)
    3c90:	d9012b17 	ldw	r4,1196(sp)
    3c94:	1121c83a 	sub	r16,r2,r4
    3c98:	04002d0e 	bge	zero,r16,3d50 <___vfprintf_internal_r+0x918>
    3c9c:	04400404 	movi	r17,16
    3ca0:	d8811f17 	ldw	r2,1148(sp)
    3ca4:	8c05340e 	bge	r17,r16,5178 <___vfprintf_internal_r+0x1d40>
    3ca8:	01000074 	movhi	r4,1
    3cac:	21090884 	addi	r4,r4,9250
    3cb0:	d9013615 	stw	r4,1240(sp)
    3cb4:	048001c4 	movi	r18,7
    3cb8:	00000306 	br	3cc8 <___vfprintf_internal_r+0x890>
    3cbc:	843ffc04 	addi	r16,r16,-16
    3cc0:	42000204 	addi	r8,r8,8
    3cc4:	8c00130e 	bge	r17,r16,3d14 <___vfprintf_internal_r+0x8dc>
    3cc8:	01400074 	movhi	r5,1
    3ccc:	18c00404 	addi	r3,r3,16
    3cd0:	10800044 	addi	r2,r2,1
    3cd4:	29490884 	addi	r5,r5,9250
    3cd8:	41400015 	stw	r5,0(r8)
    3cdc:	44400115 	stw	r17,4(r8)
    3ce0:	d8c12015 	stw	r3,1152(sp)
    3ce4:	d8811f15 	stw	r2,1148(sp)
    3ce8:	90bff40e 	bge	r18,r2,3cbc <__alt_data_end+0xfffae58c>
    3cec:	b809883a 	mov	r4,r23
    3cf0:	b00b883a 	mov	r5,r22
    3cf4:	d9811e04 	addi	r6,sp,1144
    3cf8:	000a07c0 	call	a07c <__sprint_r>
    3cfc:	103ee61e 	bne	r2,zero,3898 <__alt_data_end+0xfffae168>
    3d00:	843ffc04 	addi	r16,r16,-16
    3d04:	d8c12017 	ldw	r3,1152(sp)
    3d08:	d8811f17 	ldw	r2,1148(sp)
    3d0c:	da000404 	addi	r8,sp,16
    3d10:	8c3fed16 	blt	r17,r16,3cc8 <__alt_data_end+0xfffae598>
    3d14:	d9013617 	ldw	r4,1240(sp)
    3d18:	1c07883a 	add	r3,r3,r16
    3d1c:	10800044 	addi	r2,r2,1
    3d20:	41000015 	stw	r4,0(r8)
    3d24:	44000115 	stw	r16,4(r8)
    3d28:	d8c12015 	stw	r3,1152(sp)
    3d2c:	d8811f15 	stw	r2,1148(sp)
    3d30:	010001c4 	movi	r4,7
    3d34:	2080060e 	bge	r4,r2,3d50 <___vfprintf_internal_r+0x918>
    3d38:	b809883a 	mov	r4,r23
    3d3c:	b00b883a 	mov	r5,r22
    3d40:	d9811e04 	addi	r6,sp,1144
    3d44:	000a07c0 	call	a07c <__sprint_r>
    3d48:	103ed31e 	bne	r2,zero,3898 <__alt_data_end+0xfffae168>
    3d4c:	d8c12017 	ldw	r3,1152(sp)
    3d50:	df012b17 	ldw	fp,1196(sp)
    3d54:	d9412e17 	ldw	r5,1208(sp)
    3d58:	e140010e 	bge	fp,r5,3d60 <___vfprintf_internal_r+0x928>
    3d5c:	2839883a 	mov	fp,r5
    3d60:	d8812f17 	ldw	r2,1212(sp)
    3d64:	1705883a 	add	r2,r2,fp
    3d68:	d8812f15 	stw	r2,1212(sp)
    3d6c:	1802291e 	bne	r3,zero,4614 <___vfprintf_internal_r+0x11dc>
    3d70:	d8c12a17 	ldw	r3,1192(sp)
    3d74:	d8011f15 	stw	zero,1148(sp)
    3d78:	da000404 	addi	r8,sp,16
    3d7c:	18800007 	ldb	r2,0(r3)
    3d80:	103ded1e 	bne	r2,zero,3538 <__alt_data_end+0xfffade08>
    3d84:	dc012a17 	ldw	r16,1192(sp)
    3d88:	003e0506 	br	35a0 <__alt_data_end+0xfffade70>
    3d8c:	d9012d17 	ldw	r4,1204(sp)
    3d90:	d9412d17 	ldw	r5,1204(sp)
    3d94:	da012a17 	ldw	r8,1192(sp)
    3d98:	21000017 	ldw	r4,0(r4)
    3d9c:	29400117 	ldw	r5,4(r5)
    3da0:	df012a15 	stw	fp,1192(sp)
    3da4:	9839883a 	mov	fp,r19
    3da8:	dcc12b03 	ldbu	r19,1196(sp)
    3dac:	d9013715 	stw	r4,1244(sp)
    3db0:	d9413915 	stw	r5,1252(sp)
    3db4:	da013f15 	stw	r8,1276(sp)
    3db8:	da413e15 	stw	r9,1272(sp)
    3dbc:	dcc12785 	stb	r19,1182(sp)
    3dc0:	0009d2c0 	call	9d2c <__fpclassifyd>
    3dc4:	d8c12d17 	ldw	r3,1204(sp)
    3dc8:	04400044 	movi	r17,1
    3dcc:	da013f17 	ldw	r8,1276(sp)
    3dd0:	1c800204 	addi	r18,r3,8
    3dd4:	da413e17 	ldw	r9,1272(sp)
    3dd8:	d9013717 	ldw	r4,1244(sp)
    3ddc:	d9413917 	ldw	r5,1252(sp)
    3de0:	1443451e 	bne	r2,r17,4af8 <___vfprintf_internal_r+0x16c0>
    3de4:	000d883a 	mov	r6,zero
    3de8:	000f883a 	mov	r7,zero
    3dec:	000df580 	call	df58 <__ledf2>
    3df0:	da013f17 	ldw	r8,1276(sp)
    3df4:	1004fe16 	blt	r2,zero,51f0 <___vfprintf_internal_r+0x1db8>
    3df8:	dcc12783 	ldbu	r19,1182(sp)
    3dfc:	008011c4 	movi	r2,71
    3e00:	14045d0e 	bge	r2,r16,4f78 <___vfprintf_internal_r+0x1b40>
    3e04:	01400074 	movhi	r5,1
    3e08:	2948f504 	addi	r5,r5,9172
    3e0c:	d9413115 	stw	r5,1220(sp)
    3e10:	00c000c4 	movi	r3,3
    3e14:	00bfdfc4 	movi	r2,-129
    3e18:	d8c12b15 	stw	r3,1196(sp)
    3e1c:	e0b8703a 	and	fp,fp,r2
    3e20:	dc812d15 	stw	r18,1204(sp)
    3e24:	1823883a 	mov	r17,r3
    3e28:	d8013215 	stw	zero,1224(sp)
    3e2c:	d8013415 	stw	zero,1232(sp)
    3e30:	003f0106 	br	3a38 <__alt_data_end+0xfffae308>
    3e34:	9cc00214 	ori	r19,r19,8
    3e38:	e005883a 	mov	r2,fp
    3e3c:	e4000007 	ldb	r16,0(fp)
    3e40:	003de506 	br	35d8 <__alt_data_end+0xfffadea8>
    3e44:	da012a17 	ldw	r8,1192(sp)
    3e48:	df012a15 	stw	fp,1192(sp)
    3e4c:	9f000414 	ori	fp,r19,16
    3e50:	e0c0080c 	andi	r3,fp,32
    3e54:	d8812d17 	ldw	r2,1204(sp)
    3e58:	18007626 	beq	r3,zero,4034 <___vfprintf_internal_r+0xbfc>
    3e5c:	d9412d17 	ldw	r5,1204(sp)
    3e60:	14800017 	ldw	r18,0(r2)
    3e64:	15400117 	ldw	r21,4(r2)
    3e68:	29400204 	addi	r5,r5,8
    3e6c:	d9412d15 	stw	r5,1204(sp)
    3e70:	0005883a 	mov	r2,zero
    3e74:	9546b03a 	or	r3,r18,r21
    3e78:	d8012785 	stb	zero,1182(sp)
    3e7c:	da413215 	stw	r9,1224(sp)
    3e80:	0027883a 	mov	r19,zero
    3e84:	003ecd06 	br	39bc <__alt_data_end+0xfffae28c>
    3e88:	da012a17 	ldw	r8,1192(sp)
    3e8c:	df012a15 	stw	fp,1192(sp)
    3e90:	9f000414 	ori	fp,r19,16
    3e94:	e0c0080c 	andi	r3,fp,32
    3e98:	d8812d17 	ldw	r2,1204(sp)
    3e9c:	18002c26 	beq	r3,zero,3f50 <___vfprintf_internal_r+0xb18>
    3ea0:	d9012d17 	ldw	r4,1204(sp)
    3ea4:	14800017 	ldw	r18,0(r2)
    3ea8:	15400117 	ldw	r21,4(r2)
    3eac:	21000204 	addi	r4,r4,8
    3eb0:	d9012d15 	stw	r4,1204(sp)
    3eb4:	00800044 	movi	r2,1
    3eb8:	9546b03a 	or	r3,r18,r21
    3ebc:	003fee06 	br	3e78 <__alt_data_end+0xfffae748>
    3ec0:	da012a17 	ldw	r8,1192(sp)
    3ec4:	df012a15 	stw	fp,1192(sp)
    3ec8:	9839883a 	mov	fp,r19
    3ecc:	dcc12b03 	ldbu	r19,1196(sp)
    3ed0:	01400074 	movhi	r5,1
    3ed4:	2948f804 	addi	r5,r5,9184
    3ed8:	dcc12785 	stb	r19,1182(sp)
    3edc:	d9413b15 	stw	r5,1260(sp)
    3ee0:	e0c0080c 	andi	r3,fp,32
    3ee4:	d8812d17 	ldw	r2,1204(sp)
    3ee8:	18002e26 	beq	r3,zero,3fa4 <___vfprintf_internal_r+0xb6c>
    3eec:	d9412d17 	ldw	r5,1204(sp)
    3ef0:	14800017 	ldw	r18,0(r2)
    3ef4:	15400117 	ldw	r21,4(r2)
    3ef8:	29400204 	addi	r5,r5,8
    3efc:	d9412d15 	stw	r5,1204(sp)
    3f00:	e080004c 	andi	r2,fp,1
    3f04:	10025c26 	beq	r2,zero,4878 <___vfprintf_internal_r+0x1440>
    3f08:	9546b03a 	or	r3,r18,r21
    3f0c:	18038f26 	beq	r3,zero,4d4c <___vfprintf_internal_r+0x1914>
    3f10:	00800c04 	movi	r2,48
    3f14:	d8812705 	stb	r2,1180(sp)
    3f18:	dc012745 	stb	r16,1181(sp)
    3f1c:	e7000094 	ori	fp,fp,2
    3f20:	00800084 	movi	r2,2
    3f24:	003fd406 	br	3e78 <__alt_data_end+0xfffae748>
    3f28:	9cc00814 	ori	r19,r19,32
    3f2c:	e005883a 	mov	r2,fp
    3f30:	e4000007 	ldb	r16,0(fp)
    3f34:	003da806 	br	35d8 <__alt_data_end+0xfffadea8>
    3f38:	da012a17 	ldw	r8,1192(sp)
    3f3c:	df012a15 	stw	fp,1192(sp)
    3f40:	9839883a 	mov	fp,r19
    3f44:	e0c0080c 	andi	r3,fp,32
    3f48:	d8812d17 	ldw	r2,1204(sp)
    3f4c:	183fd41e 	bne	r3,zero,3ea0 <__alt_data_end+0xfffae770>
    3f50:	e0c0040c 	andi	r3,fp,16
    3f54:	18035f26 	beq	r3,zero,4cd4 <___vfprintf_internal_r+0x189c>
    3f58:	d9412d17 	ldw	r5,1204(sp)
    3f5c:	14800017 	ldw	r18,0(r2)
    3f60:	002b883a 	mov	r21,zero
    3f64:	29400104 	addi	r5,r5,4
    3f68:	d9412d15 	stw	r5,1204(sp)
    3f6c:	00800044 	movi	r2,1
    3f70:	9007883a 	mov	r3,r18
    3f74:	003fc006 	br	3e78 <__alt_data_end+0xfffae748>
    3f78:	da012a17 	ldw	r8,1192(sp)
    3f7c:	df012a15 	stw	fp,1192(sp)
    3f80:	9839883a 	mov	fp,r19
    3f84:	dcc12b03 	ldbu	r19,1196(sp)
    3f88:	01000074 	movhi	r4,1
    3f8c:	2108fd04 	addi	r4,r4,9204
    3f90:	d9013b15 	stw	r4,1260(sp)
    3f94:	dcc12785 	stb	r19,1182(sp)
    3f98:	e0c0080c 	andi	r3,fp,32
    3f9c:	d8812d17 	ldw	r2,1204(sp)
    3fa0:	183fd21e 	bne	r3,zero,3eec <__alt_data_end+0xfffae7bc>
    3fa4:	e0c0040c 	andi	r3,fp,16
    3fa8:	18035426 	beq	r3,zero,4cfc <___vfprintf_internal_r+0x18c4>
    3fac:	d8c12d17 	ldw	r3,1204(sp)
    3fb0:	14800017 	ldw	r18,0(r2)
    3fb4:	002b883a 	mov	r21,zero
    3fb8:	18c00104 	addi	r3,r3,4
    3fbc:	d8c12d15 	stw	r3,1204(sp)
    3fc0:	003fcf06 	br	3f00 <__alt_data_end+0xfffae7d0>
    3fc4:	e4000007 	ldb	r16,0(fp)
    3fc8:	00801b04 	movi	r2,108
    3fcc:	8083f726 	beq	r16,r2,4fac <___vfprintf_internal_r+0x1b74>
    3fd0:	9cc00414 	ori	r19,r19,16
    3fd4:	e005883a 	mov	r2,fp
    3fd8:	003d7f06 	br	35d8 <__alt_data_end+0xfffadea8>
    3fdc:	da012a17 	ldw	r8,1192(sp)
    3fe0:	df012a15 	stw	fp,1192(sp)
    3fe4:	9839883a 	mov	fp,r19
    3fe8:	dcc12b03 	ldbu	r19,1196(sp)
    3fec:	e080080c 	andi	r2,fp,32
    3ff0:	dcc12785 	stb	r19,1182(sp)
    3ff4:	10032226 	beq	r2,zero,4c80 <___vfprintf_internal_r+0x1848>
    3ff8:	d9412d17 	ldw	r5,1204(sp)
    3ffc:	d9012f17 	ldw	r4,1212(sp)
    4000:	28800017 	ldw	r2,0(r5)
    4004:	2007d7fa 	srai	r3,r4,31
    4008:	29400104 	addi	r5,r5,4
    400c:	d9412d15 	stw	r5,1204(sp)
    4010:	11000015 	stw	r4,0(r2)
    4014:	10c00115 	stw	r3,4(r2)
    4018:	003d4406 	br	352c <__alt_data_end+0xfffaddfc>
    401c:	da012a17 	ldw	r8,1192(sp)
    4020:	df012a15 	stw	fp,1192(sp)
    4024:	9839883a 	mov	fp,r19
    4028:	e0c0080c 	andi	r3,fp,32
    402c:	d8812d17 	ldw	r2,1204(sp)
    4030:	183f8a1e 	bne	r3,zero,3e5c <__alt_data_end+0xfffae72c>
    4034:	e0c0040c 	andi	r3,fp,16
    4038:	18031c26 	beq	r3,zero,4cac <___vfprintf_internal_r+0x1874>
    403c:	14800017 	ldw	r18,0(r2)
    4040:	d8812d17 	ldw	r2,1204(sp)
    4044:	002b883a 	mov	r21,zero
    4048:	9007883a 	mov	r3,r18
    404c:	10800104 	addi	r2,r2,4
    4050:	d8812d15 	stw	r2,1204(sp)
    4054:	0005883a 	mov	r2,zero
    4058:	003f8706 	br	3e78 <__alt_data_end+0xfffae748>
    405c:	d9412d17 	ldw	r5,1204(sp)
    4060:	00800c04 	movi	r2,48
    4064:	d8812705 	stb	r2,1180(sp)
    4068:	2c800017 	ldw	r18,0(r5)
    406c:	00801e04 	movi	r2,120
    4070:	d8812745 	stb	r2,1181(sp)
    4074:	00800074 	movhi	r2,1
    4078:	1088fd04 	addi	r2,r2,9204
    407c:	29400104 	addi	r5,r5,4
    4080:	da012a17 	ldw	r8,1192(sp)
    4084:	d8813b15 	stw	r2,1260(sp)
    4088:	df012a15 	stw	fp,1192(sp)
    408c:	002b883a 	mov	r21,zero
    4090:	9f000094 	ori	fp,r19,2
    4094:	d9412d15 	stw	r5,1204(sp)
    4098:	00800084 	movi	r2,2
    409c:	04001e04 	movi	r16,120
    40a0:	9007883a 	mov	r3,r18
    40a4:	003f7406 	br	3e78 <__alt_data_end+0xfffae748>
    40a8:	da012a17 	ldw	r8,1192(sp)
    40ac:	df012a15 	stw	fp,1192(sp)
    40b0:	9839883a 	mov	fp,r19
    40b4:	dcc12b03 	ldbu	r19,1196(sp)
    40b8:	e080080c 	andi	r2,fp,32
    40bc:	d8c12d17 	ldw	r3,1204(sp)
    40c0:	dcc12785 	stb	r19,1182(sp)
    40c4:	103e321e 	bne	r2,zero,3990 <__alt_data_end+0xfffae260>
    40c8:	e080040c 	andi	r2,fp,16
    40cc:	10031326 	beq	r2,zero,4d1c <___vfprintf_internal_r+0x18e4>
    40d0:	1c800017 	ldw	r18,0(r3)
    40d4:	d9412d17 	ldw	r5,1204(sp)
    40d8:	902bd7fa 	srai	r21,r18,31
    40dc:	29400104 	addi	r5,r5,4
    40e0:	d9412d15 	stw	r5,1204(sp)
    40e4:	a805883a 	mov	r2,r21
    40e8:	003e2f06 	br	39a8 <__alt_data_end+0xfffae278>
    40ec:	9cc01014 	ori	r19,r19,64
    40f0:	e005883a 	mov	r2,fp
    40f4:	e4000007 	ldb	r16,0(fp)
    40f8:	003d3706 	br	35d8 <__alt_data_end+0xfffadea8>
    40fc:	d8c12d17 	ldw	r3,1204(sp)
    4100:	d9012d17 	ldw	r4,1204(sp)
    4104:	da012a17 	ldw	r8,1192(sp)
    4108:	18800017 	ldw	r2,0(r3)
    410c:	21000104 	addi	r4,r4,4
    4110:	00c00044 	movi	r3,1
    4114:	df012a15 	stw	fp,1192(sp)
    4118:	d8c12b15 	stw	r3,1196(sp)
    411c:	9839883a 	mov	fp,r19
    4120:	d8012785 	stb	zero,1182(sp)
    4124:	d8810405 	stb	r2,1040(sp)
    4128:	d9012d15 	stw	r4,1204(sp)
    412c:	1823883a 	mov	r17,r3
    4130:	d8c10404 	addi	r3,sp,1040
    4134:	d8013215 	stw	zero,1224(sp)
    4138:	d8013415 	stw	zero,1232(sp)
    413c:	d8c13115 	stw	r3,1220(sp)
    4140:	0005883a 	mov	r2,zero
    4144:	003e4306 	br	3a54 <__alt_data_end+0xfffae324>
    4148:	d8812b07 	ldb	r2,1196(sp)
    414c:	1002fc1e 	bne	r2,zero,4d40 <___vfprintf_internal_r+0x1908>
    4150:	00c00804 	movi	r3,32
    4154:	d8c12b05 	stb	r3,1196(sp)
    4158:	e005883a 	mov	r2,fp
    415c:	e4000007 	ldb	r16,0(fp)
    4160:	003d1d06 	br	35d8 <__alt_data_end+0xfffadea8>
    4164:	9cc00054 	ori	r19,r19,1
    4168:	e005883a 	mov	r2,fp
    416c:	e4000007 	ldb	r16,0(fp)
    4170:	003d1906 	br	35d8 <__alt_data_end+0xfffadea8>
    4174:	d9012d17 	ldw	r4,1204(sp)
    4178:	d9412d17 	ldw	r5,1204(sp)
    417c:	21000017 	ldw	r4,0(r4)
    4180:	28c00104 	addi	r3,r5,4
    4184:	d9012e15 	stw	r4,1208(sp)
    4188:	20038c16 	blt	r4,zero,4fbc <___vfprintf_internal_r+0x1b84>
    418c:	d8c12d15 	stw	r3,1204(sp)
    4190:	e005883a 	mov	r2,fp
    4194:	e4000007 	ldb	r16,0(fp)
    4198:	003d0f06 	br	35d8 <__alt_data_end+0xfffadea8>
    419c:	00c00ac4 	movi	r3,43
    41a0:	d8c12b05 	stb	r3,1196(sp)
    41a4:	e005883a 	mov	r2,fp
    41a8:	e4000007 	ldb	r16,0(fp)
    41ac:	003d0a06 	br	35d8 <__alt_data_end+0xfffadea8>
    41b0:	d8c12d17 	ldw	r3,1204(sp)
    41b4:	d9012d17 	ldw	r4,1204(sp)
    41b8:	da012a17 	ldw	r8,1192(sp)
    41bc:	18c00017 	ldw	r3,0(r3)
    41c0:	df012a15 	stw	fp,1192(sp)
    41c4:	d8012785 	stb	zero,1182(sp)
    41c8:	d8c13115 	stw	r3,1220(sp)
    41cc:	9839883a 	mov	fp,r19
    41d0:	24800104 	addi	r18,r4,4
    41d4:	1803f726 	beq	r3,zero,51b4 <___vfprintf_internal_r+0x1d7c>
    41d8:	d9013117 	ldw	r4,1220(sp)
    41dc:	48038916 	blt	r9,zero,5004 <___vfprintf_internal_r+0x1bcc>
    41e0:	480d883a 	mov	r6,r9
    41e4:	000b883a 	mov	r5,zero
    41e8:	da013f15 	stw	r8,1276(sp)
    41ec:	da413e15 	stw	r9,1272(sp)
    41f0:	00082a40 	call	82a4 <memchr>
    41f4:	da013f17 	ldw	r8,1276(sp)
    41f8:	da413e17 	ldw	r9,1272(sp)
    41fc:	10045926 	beq	r2,zero,5364 <___vfprintf_internal_r+0x1f2c>
    4200:	d8c13117 	ldw	r3,1220(sp)
    4204:	10e3c83a 	sub	r17,r2,r3
    4208:	4c433516 	blt	r9,r17,4ee0 <___vfprintf_internal_r+0x1aa8>
    420c:	8805883a 	mov	r2,r17
    4210:	88038116 	blt	r17,zero,5018 <___vfprintf_internal_r+0x1be0>
    4214:	dcc12783 	ldbu	r19,1182(sp)
    4218:	d8812b15 	stw	r2,1196(sp)
    421c:	dc812d15 	stw	r18,1204(sp)
    4220:	d8013215 	stw	zero,1224(sp)
    4224:	d8013415 	stw	zero,1232(sp)
    4228:	003e0306 	br	3a38 <__alt_data_end+0xfffae308>
    422c:	da012a17 	ldw	r8,1192(sp)
    4230:	df012a15 	stw	fp,1192(sp)
    4234:	9839883a 	mov	fp,r19
    4238:	dcc12b03 	ldbu	r19,1196(sp)
    423c:	dcc12785 	stb	r19,1182(sp)
    4240:	803d8f26 	beq	r16,zero,3880 <__alt_data_end+0xfffae150>
    4244:	00c00044 	movi	r3,1
    4248:	d8c12b15 	stw	r3,1196(sp)
    424c:	dc010405 	stb	r16,1040(sp)
    4250:	d8012785 	stb	zero,1182(sp)
    4254:	003fb506 	br	412c <__alt_data_end+0xfffae9fc>
    4258:	d8c12017 	ldw	r3,1152(sp)
    425c:	003e3506 	br	3b34 <__alt_data_end+0xfffae404>
    4260:	10803fcc 	andi	r2,r2,255
    4264:	00c00044 	movi	r3,1
    4268:	10fddc1e 	bne	r2,r3,39dc <__alt_data_end+0xfffae2ac>
    426c:	a800021e 	bne	r21,zero,4278 <___vfprintf_internal_r+0xe40>
    4270:	00800244 	movi	r2,9
    4274:	14801e2e 	bgeu	r2,r18,42f0 <___vfprintf_internal_r+0xeb8>
    4278:	dc012b15 	stw	r16,1196(sp)
    427c:	dc410e04 	addi	r17,sp,1080
    4280:	9021883a 	mov	r16,r18
    4284:	da012c15 	stw	r8,1200(sp)
    4288:	a825883a 	mov	r18,r21
    428c:	482b883a 	mov	r21,r9
    4290:	8009883a 	mov	r4,r16
    4294:	900b883a 	mov	r5,r18
    4298:	01800284 	movi	r6,10
    429c:	000f883a 	mov	r7,zero
    42a0:	000c4680 	call	c468 <__umoddi3>
    42a4:	10800c04 	addi	r2,r2,48
    42a8:	8c7fffc4 	addi	r17,r17,-1
    42ac:	8009883a 	mov	r4,r16
    42b0:	900b883a 	mov	r5,r18
    42b4:	01800284 	movi	r6,10
    42b8:	000f883a 	mov	r7,zero
    42bc:	88800005 	stb	r2,0(r17)
    42c0:	000be280 	call	be28 <__udivdi3>
    42c4:	1021883a 	mov	r16,r2
    42c8:	10c4b03a 	or	r2,r2,r3
    42cc:	1825883a 	mov	r18,r3
    42d0:	103fef1e 	bne	r2,zero,4290 <__alt_data_end+0xfffaeb60>
    42d4:	d9012817 	ldw	r4,1184(sp)
    42d8:	dc413115 	stw	r17,1220(sp)
    42dc:	dc012b17 	ldw	r16,1196(sp)
    42e0:	da012c17 	ldw	r8,1200(sp)
    42e4:	a813883a 	mov	r9,r21
    42e8:	2463c83a 	sub	r17,r4,r17
    42ec:	003dcd06 	br	3a24 <__alt_data_end+0xfffae2f4>
    42f0:	94800c04 	addi	r18,r18,48
    42f4:	d8c10dc4 	addi	r3,sp,1079
    42f8:	dc810dc5 	stb	r18,1079(sp)
    42fc:	dc413c17 	ldw	r17,1264(sp)
    4300:	d8c13115 	stw	r3,1220(sp)
    4304:	003dc706 	br	3a24 <__alt_data_end+0xfffae2f4>
    4308:	00801944 	movi	r2,101
    430c:	1400720e 	bge	r2,r16,44d8 <___vfprintf_internal_r+0x10a0>
    4310:	d9013717 	ldw	r4,1244(sp)
    4314:	d9413917 	ldw	r5,1252(sp)
    4318:	000d883a 	mov	r6,zero
    431c:	000f883a 	mov	r7,zero
    4320:	d8c13d15 	stw	r3,1268(sp)
    4324:	da013f15 	stw	r8,1276(sp)
    4328:	000ddf40 	call	ddf4 <__eqdf2>
    432c:	d8c13d17 	ldw	r3,1268(sp)
    4330:	da013f17 	ldw	r8,1276(sp)
    4334:	1000f41e 	bne	r2,zero,4708 <___vfprintf_internal_r+0x12d0>
    4338:	d8811f17 	ldw	r2,1148(sp)
    433c:	01000074 	movhi	r4,1
    4340:	21090404 	addi	r4,r4,9232
    4344:	18c00044 	addi	r3,r3,1
    4348:	10800044 	addi	r2,r2,1
    434c:	41000015 	stw	r4,0(r8)
    4350:	01000044 	movi	r4,1
    4354:	41000115 	stw	r4,4(r8)
    4358:	d8c12015 	stw	r3,1152(sp)
    435c:	d8811f15 	stw	r2,1148(sp)
    4360:	010001c4 	movi	r4,7
    4364:	20828d16 	blt	r4,r2,4d9c <___vfprintf_internal_r+0x1964>
    4368:	42000204 	addi	r8,r8,8
    436c:	d8812617 	ldw	r2,1176(sp)
    4370:	d9413317 	ldw	r5,1228(sp)
    4374:	11400216 	blt	r2,r5,4380 <___vfprintf_internal_r+0xf48>
    4378:	e080004c 	andi	r2,fp,1
    437c:	103e4126 	beq	r2,zero,3c84 <__alt_data_end+0xfffae554>
    4380:	d8813817 	ldw	r2,1248(sp)
    4384:	d9013517 	ldw	r4,1236(sp)
    4388:	d9413817 	ldw	r5,1248(sp)
    438c:	1887883a 	add	r3,r3,r2
    4390:	d8811f17 	ldw	r2,1148(sp)
    4394:	41000015 	stw	r4,0(r8)
    4398:	41400115 	stw	r5,4(r8)
    439c:	10800044 	addi	r2,r2,1
    43a0:	d8c12015 	stw	r3,1152(sp)
    43a4:	d8811f15 	stw	r2,1148(sp)
    43a8:	010001c4 	movi	r4,7
    43ac:	20830916 	blt	r4,r2,4fd4 <___vfprintf_internal_r+0x1b9c>
    43b0:	42000204 	addi	r8,r8,8
    43b4:	d8813317 	ldw	r2,1228(sp)
    43b8:	143fffc4 	addi	r16,r2,-1
    43bc:	043e310e 	bge	zero,r16,3c84 <__alt_data_end+0xfffae554>
    43c0:	04400404 	movi	r17,16
    43c4:	d8811f17 	ldw	r2,1148(sp)
    43c8:	8c007e0e 	bge	r17,r16,45c4 <___vfprintf_internal_r+0x118c>
    43cc:	01400074 	movhi	r5,1
    43d0:	29490484 	addi	r5,r5,9234
    43d4:	d9412c15 	stw	r5,1200(sp)
    43d8:	04c001c4 	movi	r19,7
    43dc:	00000306 	br	43ec <___vfprintf_internal_r+0xfb4>
    43e0:	42000204 	addi	r8,r8,8
    43e4:	843ffc04 	addi	r16,r16,-16
    43e8:	8c00790e 	bge	r17,r16,45d0 <___vfprintf_internal_r+0x1198>
    43ec:	18c00404 	addi	r3,r3,16
    43f0:	10800044 	addi	r2,r2,1
    43f4:	45000015 	stw	r20,0(r8)
    43f8:	44400115 	stw	r17,4(r8)
    43fc:	d8c12015 	stw	r3,1152(sp)
    4400:	d8811f15 	stw	r2,1148(sp)
    4404:	98bff60e 	bge	r19,r2,43e0 <__alt_data_end+0xfffaecb0>
    4408:	b809883a 	mov	r4,r23
    440c:	b00b883a 	mov	r5,r22
    4410:	d9811e04 	addi	r6,sp,1144
    4414:	000a07c0 	call	a07c <__sprint_r>
    4418:	103d1f1e 	bne	r2,zero,3898 <__alt_data_end+0xfffae168>
    441c:	d8c12017 	ldw	r3,1152(sp)
    4420:	d8811f17 	ldw	r2,1148(sp)
    4424:	da000404 	addi	r8,sp,16
    4428:	003fee06 	br	43e4 <__alt_data_end+0xfffaecb4>
    442c:	d9412e17 	ldw	r5,1208(sp)
    4430:	d8812b17 	ldw	r2,1196(sp)
    4434:	28a7c83a 	sub	r19,r5,r2
    4438:	04fddc0e 	bge	zero,r19,3bac <__alt_data_end+0xfffae47c>
    443c:	05400404 	movi	r21,16
    4440:	d8811f17 	ldw	r2,1148(sp)
    4444:	acc3870e 	bge	r21,r19,5264 <___vfprintf_internal_r+0x1e2c>
    4448:	01400074 	movhi	r5,1
    444c:	29490484 	addi	r5,r5,9234
    4450:	d9412c15 	stw	r5,1200(sp)
    4454:	048001c4 	movi	r18,7
    4458:	00000306 	br	4468 <___vfprintf_internal_r+0x1030>
    445c:	9cfffc04 	addi	r19,r19,-16
    4460:	42000204 	addi	r8,r8,8
    4464:	acc0110e 	bge	r21,r19,44ac <___vfprintf_internal_r+0x1074>
    4468:	18c00404 	addi	r3,r3,16
    446c:	10800044 	addi	r2,r2,1
    4470:	45000015 	stw	r20,0(r8)
    4474:	45400115 	stw	r21,4(r8)
    4478:	d8c12015 	stw	r3,1152(sp)
    447c:	d8811f15 	stw	r2,1148(sp)
    4480:	90bff60e 	bge	r18,r2,445c <__alt_data_end+0xfffaed2c>
    4484:	b809883a 	mov	r4,r23
    4488:	b00b883a 	mov	r5,r22
    448c:	d9811e04 	addi	r6,sp,1144
    4490:	000a07c0 	call	a07c <__sprint_r>
    4494:	103d001e 	bne	r2,zero,3898 <__alt_data_end+0xfffae168>
    4498:	9cfffc04 	addi	r19,r19,-16
    449c:	d8c12017 	ldw	r3,1152(sp)
    44a0:	d8811f17 	ldw	r2,1148(sp)
    44a4:	da000404 	addi	r8,sp,16
    44a8:	acffef16 	blt	r21,r19,4468 <__alt_data_end+0xfffaed38>
    44ac:	d9012c17 	ldw	r4,1200(sp)
    44b0:	1cc7883a 	add	r3,r3,r19
    44b4:	10800044 	addi	r2,r2,1
    44b8:	41000015 	stw	r4,0(r8)
    44bc:	44c00115 	stw	r19,4(r8)
    44c0:	d8c12015 	stw	r3,1152(sp)
    44c4:	d8811f15 	stw	r2,1148(sp)
    44c8:	010001c4 	movi	r4,7
    44cc:	20817816 	blt	r4,r2,4ab0 <___vfprintf_internal_r+0x1678>
    44d0:	42000204 	addi	r8,r8,8
    44d4:	003db506 	br	3bac <__alt_data_end+0xfffae47c>
    44d8:	d9413317 	ldw	r5,1228(sp)
    44dc:	00800044 	movi	r2,1
    44e0:	18c00044 	addi	r3,r3,1
    44e4:	11413e0e 	bge	r2,r5,49e0 <___vfprintf_internal_r+0x15a8>
    44e8:	dc011f17 	ldw	r16,1148(sp)
    44ec:	d8813117 	ldw	r2,1220(sp)
    44f0:	d8c12015 	stw	r3,1152(sp)
    44f4:	84000044 	addi	r16,r16,1
    44f8:	40800015 	stw	r2,0(r8)
    44fc:	00800044 	movi	r2,1
    4500:	40800115 	stw	r2,4(r8)
    4504:	dc011f15 	stw	r16,1148(sp)
    4508:	008001c4 	movi	r2,7
    450c:	14015616 	blt	r2,r16,4a68 <___vfprintf_internal_r+0x1630>
    4510:	42000204 	addi	r8,r8,8
    4514:	d9013817 	ldw	r4,1248(sp)
    4518:	d9413517 	ldw	r5,1236(sp)
    451c:	84000044 	addi	r16,r16,1
    4520:	1907883a 	add	r3,r3,r4
    4524:	41400015 	stw	r5,0(r8)
    4528:	41000115 	stw	r4,4(r8)
    452c:	d8c12015 	stw	r3,1152(sp)
    4530:	dc011f15 	stw	r16,1148(sp)
    4534:	008001c4 	movi	r2,7
    4538:	14015416 	blt	r2,r16,4a8c <___vfprintf_internal_r+0x1654>
    453c:	44400204 	addi	r17,r8,8
    4540:	d9013717 	ldw	r4,1244(sp)
    4544:	d9413917 	ldw	r5,1252(sp)
    4548:	000d883a 	mov	r6,zero
    454c:	000f883a 	mov	r7,zero
    4550:	d8c13d15 	stw	r3,1268(sp)
    4554:	000ddf40 	call	ddf4 <__eqdf2>
    4558:	d8c13d17 	ldw	r3,1268(sp)
    455c:	1000a726 	beq	r2,zero,47fc <___vfprintf_internal_r+0x13c4>
    4560:	d9013317 	ldw	r4,1228(sp)
    4564:	d9413117 	ldw	r5,1220(sp)
    4568:	84000044 	addi	r16,r16,1
    456c:	20bfffc4 	addi	r2,r4,-1
    4570:	1887883a 	add	r3,r3,r2
    4574:	29000044 	addi	r4,r5,1
    4578:	88800115 	stw	r2,4(r17)
    457c:	89000015 	stw	r4,0(r17)
    4580:	d8c12015 	stw	r3,1152(sp)
    4584:	dc011f15 	stw	r16,1148(sp)
    4588:	008001c4 	movi	r2,7
    458c:	14012d16 	blt	r2,r16,4a44 <___vfprintf_internal_r+0x160c>
    4590:	8c400204 	addi	r17,r17,8
    4594:	d9413a17 	ldw	r5,1256(sp)
    4598:	dcc122c4 	addi	r19,sp,1163
    459c:	84000044 	addi	r16,r16,1
    45a0:	28c7883a 	add	r3,r5,r3
    45a4:	8cc00015 	stw	r19,0(r17)
    45a8:	89400115 	stw	r5,4(r17)
    45ac:	d8c12015 	stw	r3,1152(sp)
    45b0:	dc011f15 	stw	r16,1148(sp)
    45b4:	008001c4 	movi	r2,7
    45b8:	14000e16 	blt	r2,r16,45f4 <___vfprintf_internal_r+0x11bc>
    45bc:	8a000204 	addi	r8,r17,8
    45c0:	003db006 	br	3c84 <__alt_data_end+0xfffae554>
    45c4:	01000074 	movhi	r4,1
    45c8:	21090484 	addi	r4,r4,9234
    45cc:	d9012c15 	stw	r4,1200(sp)
    45d0:	d9012c17 	ldw	r4,1200(sp)
    45d4:	1c07883a 	add	r3,r3,r16
    45d8:	44000115 	stw	r16,4(r8)
    45dc:	41000015 	stw	r4,0(r8)
    45e0:	10800044 	addi	r2,r2,1
    45e4:	d8c12015 	stw	r3,1152(sp)
    45e8:	d8811f15 	stw	r2,1148(sp)
    45ec:	010001c4 	movi	r4,7
    45f0:	20bda30e 	bge	r4,r2,3c80 <__alt_data_end+0xfffae550>
    45f4:	b809883a 	mov	r4,r23
    45f8:	b00b883a 	mov	r5,r22
    45fc:	d9811e04 	addi	r6,sp,1144
    4600:	000a07c0 	call	a07c <__sprint_r>
    4604:	103ca41e 	bne	r2,zero,3898 <__alt_data_end+0xfffae168>
    4608:	d8c12017 	ldw	r3,1152(sp)
    460c:	da000404 	addi	r8,sp,16
    4610:	003d9c06 	br	3c84 <__alt_data_end+0xfffae554>
    4614:	b809883a 	mov	r4,r23
    4618:	b00b883a 	mov	r5,r22
    461c:	d9811e04 	addi	r6,sp,1144
    4620:	000a07c0 	call	a07c <__sprint_r>
    4624:	103dd226 	beq	r2,zero,3d70 <__alt_data_end+0xfffae640>
    4628:	003c9b06 	br	3898 <__alt_data_end+0xfffae168>
    462c:	10803fcc 	andi	r2,r2,255
    4630:	1000311e 	bne	r2,zero,46f8 <___vfprintf_internal_r+0x12c0>
    4634:	e080004c 	andi	r2,fp,1
    4638:	10002f26 	beq	r2,zero,46f8 <___vfprintf_internal_r+0x12c0>
    463c:	00800c04 	movi	r2,48
    4640:	d8c10dc4 	addi	r3,sp,1079
    4644:	d8810dc5 	stb	r2,1079(sp)
    4648:	dc413c17 	ldw	r17,1264(sp)
    464c:	d8c13115 	stw	r3,1220(sp)
    4650:	003cf406 	br	3a24 <__alt_data_end+0xfffae2f4>
    4654:	b809883a 	mov	r4,r23
    4658:	b00b883a 	mov	r5,r22
    465c:	d9811e04 	addi	r6,sp,1144
    4660:	000a07c0 	call	a07c <__sprint_r>
    4664:	103c8c1e 	bne	r2,zero,3898 <__alt_data_end+0xfffae168>
    4668:	d8c12017 	ldw	r3,1152(sp)
    466c:	da000404 	addi	r8,sp,16
    4670:	003d7706 	br	3c50 <__alt_data_end+0xfffae520>
    4674:	b809883a 	mov	r4,r23
    4678:	b00b883a 	mov	r5,r22
    467c:	d9811e04 	addi	r6,sp,1144
    4680:	000a07c0 	call	a07c <__sprint_r>
    4684:	103c841e 	bne	r2,zero,3898 <__alt_data_end+0xfffae168>
    4688:	d8c12017 	ldw	r3,1152(sp)
    468c:	da000404 	addi	r8,sp,16
    4690:	003d3506 	br	3b68 <__alt_data_end+0xfffae438>
    4694:	b809883a 	mov	r4,r23
    4698:	b00b883a 	mov	r5,r22
    469c:	d9811e04 	addi	r6,sp,1144
    46a0:	000a07c0 	call	a07c <__sprint_r>
    46a4:	103c7c1e 	bne	r2,zero,3898 <__alt_data_end+0xfffae168>
    46a8:	d8c12017 	ldw	r3,1152(sp)
    46ac:	da000404 	addi	r8,sp,16
    46b0:	003d3b06 	br	3ba0 <__alt_data_end+0xfffae470>
    46b4:	d9413b17 	ldw	r5,1260(sp)
    46b8:	d8c10e04 	addi	r3,sp,1080
    46bc:	908003cc 	andi	r2,r18,15
    46c0:	a808973a 	slli	r4,r21,28
    46c4:	2885883a 	add	r2,r5,r2
    46c8:	9024d13a 	srli	r18,r18,4
    46cc:	10800003 	ldbu	r2,0(r2)
    46d0:	a82ad13a 	srli	r21,r21,4
    46d4:	18ffffc4 	addi	r3,r3,-1
    46d8:	24a4b03a 	or	r18,r4,r18
    46dc:	18800005 	stb	r2,0(r3)
    46e0:	9544b03a 	or	r2,r18,r21
    46e4:	103ff51e 	bne	r2,zero,46bc <__alt_data_end+0xfffaef8c>
    46e8:	d9412817 	ldw	r5,1184(sp)
    46ec:	d8c13115 	stw	r3,1220(sp)
    46f0:	28e3c83a 	sub	r17,r5,r3
    46f4:	003ccb06 	br	3a24 <__alt_data_end+0xfffae2f4>
    46f8:	d8c10e04 	addi	r3,sp,1080
    46fc:	0023883a 	mov	r17,zero
    4700:	d8c13115 	stw	r3,1220(sp)
    4704:	003cc706 	br	3a24 <__alt_data_end+0xfffae2f4>
    4708:	dc012617 	ldw	r16,1176(sp)
    470c:	0401ab0e 	bge	zero,r16,4dbc <___vfprintf_internal_r+0x1984>
    4710:	d8813317 	ldw	r2,1228(sp)
    4714:	d9413117 	ldw	r5,1220(sp)
    4718:	d9013417 	ldw	r4,1232(sp)
    471c:	1023883a 	mov	r17,r2
    4720:	28a1883a 	add	r16,r5,r2
    4724:	2080010e 	bge	r4,r2,472c <___vfprintf_internal_r+0x12f4>
    4728:	2023883a 	mov	r17,r4
    472c:	04400b0e 	bge	zero,r17,475c <___vfprintf_internal_r+0x1324>
    4730:	d8811f17 	ldw	r2,1148(sp)
    4734:	d9413117 	ldw	r5,1220(sp)
    4738:	1c47883a 	add	r3,r3,r17
    473c:	10800044 	addi	r2,r2,1
    4740:	41400015 	stw	r5,0(r8)
    4744:	44400115 	stw	r17,4(r8)
    4748:	d8c12015 	stw	r3,1152(sp)
    474c:	d8811f15 	stw	r2,1148(sp)
    4750:	010001c4 	movi	r4,7
    4754:	20826716 	blt	r4,r2,50f4 <___vfprintf_internal_r+0x1cbc>
    4758:	42000204 	addi	r8,r8,8
    475c:	88026316 	blt	r17,zero,50ec <___vfprintf_internal_r+0x1cb4>
    4760:	d8813417 	ldw	r2,1232(sp)
    4764:	1463c83a 	sub	r17,r2,r17
    4768:	0440590e 	bge	zero,r17,48d0 <___vfprintf_internal_r+0x1498>
    476c:	04c00404 	movi	r19,16
    4770:	d8811f17 	ldw	r2,1148(sp)
    4774:	9c41770e 	bge	r19,r17,4d54 <___vfprintf_internal_r+0x191c>
    4778:	01400074 	movhi	r5,1
    477c:	29490484 	addi	r5,r5,9234
    4780:	d9412c15 	stw	r5,1200(sp)
    4784:	054001c4 	movi	r21,7
    4788:	00000306 	br	4798 <___vfprintf_internal_r+0x1360>
    478c:	42000204 	addi	r8,r8,8
    4790:	8c7ffc04 	addi	r17,r17,-16
    4794:	9c41720e 	bge	r19,r17,4d60 <___vfprintf_internal_r+0x1928>
    4798:	18c00404 	addi	r3,r3,16
    479c:	10800044 	addi	r2,r2,1
    47a0:	45000015 	stw	r20,0(r8)
    47a4:	44c00115 	stw	r19,4(r8)
    47a8:	d8c12015 	stw	r3,1152(sp)
    47ac:	d8811f15 	stw	r2,1148(sp)
    47b0:	a8bff60e 	bge	r21,r2,478c <__alt_data_end+0xfffaf05c>
    47b4:	b809883a 	mov	r4,r23
    47b8:	b00b883a 	mov	r5,r22
    47bc:	d9811e04 	addi	r6,sp,1144
    47c0:	000a07c0 	call	a07c <__sprint_r>
    47c4:	103c341e 	bne	r2,zero,3898 <__alt_data_end+0xfffae168>
    47c8:	d8c12017 	ldw	r3,1152(sp)
    47cc:	d8811f17 	ldw	r2,1148(sp)
    47d0:	da000404 	addi	r8,sp,16
    47d4:	003fee06 	br	4790 <__alt_data_end+0xfffaf060>
    47d8:	b809883a 	mov	r4,r23
    47dc:	b00b883a 	mov	r5,r22
    47e0:	d9811e04 	addi	r6,sp,1144
    47e4:	000a07c0 	call	a07c <__sprint_r>
    47e8:	103c2b1e 	bne	r2,zero,3898 <__alt_data_end+0xfffae168>
    47ec:	d8c12017 	ldw	r3,1152(sp)
    47f0:	d8812787 	ldb	r2,1182(sp)
    47f4:	da000404 	addi	r8,sp,16
    47f8:	003cce06 	br	3b34 <__alt_data_end+0xfffae404>
    47fc:	d8813317 	ldw	r2,1228(sp)
    4800:	14ffffc4 	addi	r19,r2,-1
    4804:	04ff630e 	bge	zero,r19,4594 <__alt_data_end+0xfffaee64>
    4808:	05400404 	movi	r21,16
    480c:	acc0810e 	bge	r21,r19,4a14 <___vfprintf_internal_r+0x15dc>
    4810:	01400074 	movhi	r5,1
    4814:	29490484 	addi	r5,r5,9234
    4818:	d9412c15 	stw	r5,1200(sp)
    481c:	01c001c4 	movi	r7,7
    4820:	00000306 	br	4830 <___vfprintf_internal_r+0x13f8>
    4824:	8c400204 	addi	r17,r17,8
    4828:	9cfffc04 	addi	r19,r19,-16
    482c:	acc07c0e 	bge	r21,r19,4a20 <___vfprintf_internal_r+0x15e8>
    4830:	18c00404 	addi	r3,r3,16
    4834:	84000044 	addi	r16,r16,1
    4838:	8d000015 	stw	r20,0(r17)
    483c:	8d400115 	stw	r21,4(r17)
    4840:	d8c12015 	stw	r3,1152(sp)
    4844:	dc011f15 	stw	r16,1148(sp)
    4848:	3c3ff60e 	bge	r7,r16,4824 <__alt_data_end+0xfffaf0f4>
    484c:	b809883a 	mov	r4,r23
    4850:	b00b883a 	mov	r5,r22
    4854:	d9811e04 	addi	r6,sp,1144
    4858:	d9c13d15 	stw	r7,1268(sp)
    485c:	000a07c0 	call	a07c <__sprint_r>
    4860:	d9c13d17 	ldw	r7,1268(sp)
    4864:	103c0c1e 	bne	r2,zero,3898 <__alt_data_end+0xfffae168>
    4868:	d8c12017 	ldw	r3,1152(sp)
    486c:	dc011f17 	ldw	r16,1148(sp)
    4870:	dc400404 	addi	r17,sp,16
    4874:	003fec06 	br	4828 <__alt_data_end+0xfffaf0f8>
    4878:	00800084 	movi	r2,2
    487c:	9546b03a 	or	r3,r18,r21
    4880:	003d7d06 	br	3e78 <__alt_data_end+0xfffae748>
    4884:	10803fcc 	andi	r2,r2,255
    4888:	1080201c 	xori	r2,r2,128
    488c:	10bfe004 	addi	r2,r2,-128
    4890:	01000c04 	movi	r4,48
    4894:	1101d726 	beq	r2,r4,4ff4 <___vfprintf_internal_r+0x1bbc>
    4898:	d9413117 	ldw	r5,1220(sp)
    489c:	d8812817 	ldw	r2,1184(sp)
    48a0:	193fffc5 	stb	r4,-1(r3)
    48a4:	297fffc4 	addi	r5,r5,-1
    48a8:	d9413115 	stw	r5,1220(sp)
    48ac:	1163c83a 	sub	r17,r2,r5
    48b0:	003c5c06 	br	3a24 <__alt_data_end+0xfffae2f4>
    48b4:	b809883a 	mov	r4,r23
    48b8:	b00b883a 	mov	r5,r22
    48bc:	d9811e04 	addi	r6,sp,1144
    48c0:	000a07c0 	call	a07c <__sprint_r>
    48c4:	103bf41e 	bne	r2,zero,3898 <__alt_data_end+0xfffae168>
    48c8:	d8c12017 	ldw	r3,1152(sp)
    48cc:	da000404 	addi	r8,sp,16
    48d0:	d9413117 	ldw	r5,1220(sp)
    48d4:	d9013417 	ldw	r4,1232(sp)
    48d8:	d8812617 	ldw	r2,1176(sp)
    48dc:	2923883a 	add	r17,r5,r4
    48e0:	d9413317 	ldw	r5,1228(sp)
    48e4:	11400216 	blt	r2,r5,48f0 <___vfprintf_internal_r+0x14b8>
    48e8:	e100004c 	andi	r4,fp,1
    48ec:	20000d26 	beq	r4,zero,4924 <___vfprintf_internal_r+0x14ec>
    48f0:	d9013817 	ldw	r4,1248(sp)
    48f4:	d9413517 	ldw	r5,1236(sp)
    48f8:	1907883a 	add	r3,r3,r4
    48fc:	d9011f17 	ldw	r4,1148(sp)
    4900:	41400015 	stw	r5,0(r8)
    4904:	d9413817 	ldw	r5,1248(sp)
    4908:	21000044 	addi	r4,r4,1
    490c:	d8c12015 	stw	r3,1152(sp)
    4910:	41400115 	stw	r5,4(r8)
    4914:	d9011f15 	stw	r4,1148(sp)
    4918:	014001c4 	movi	r5,7
    491c:	2901fd16 	blt	r5,r4,5114 <___vfprintf_internal_r+0x1cdc>
    4920:	42000204 	addi	r8,r8,8
    4924:	d9013317 	ldw	r4,1228(sp)
    4928:	2085c83a 	sub	r2,r4,r2
    492c:	8449c83a 	sub	r4,r16,r17
    4930:	1021883a 	mov	r16,r2
    4934:	2080010e 	bge	r4,r2,493c <___vfprintf_internal_r+0x1504>
    4938:	2021883a 	mov	r16,r4
    493c:	04000a0e 	bge	zero,r16,4968 <___vfprintf_internal_r+0x1530>
    4940:	d9011f17 	ldw	r4,1148(sp)
    4944:	1c07883a 	add	r3,r3,r16
    4948:	44400015 	stw	r17,0(r8)
    494c:	21000044 	addi	r4,r4,1
    4950:	44000115 	stw	r16,4(r8)
    4954:	d8c12015 	stw	r3,1152(sp)
    4958:	d9011f15 	stw	r4,1148(sp)
    495c:	014001c4 	movi	r5,7
    4960:	29020916 	blt	r5,r4,5188 <___vfprintf_internal_r+0x1d50>
    4964:	42000204 	addi	r8,r8,8
    4968:	80020116 	blt	r16,zero,5170 <___vfprintf_internal_r+0x1d38>
    496c:	1421c83a 	sub	r16,r2,r16
    4970:	043cc40e 	bge	zero,r16,3c84 <__alt_data_end+0xfffae554>
    4974:	04400404 	movi	r17,16
    4978:	d8811f17 	ldw	r2,1148(sp)
    497c:	8c3f110e 	bge	r17,r16,45c4 <__alt_data_end+0xfffaee94>
    4980:	01400074 	movhi	r5,1
    4984:	29490484 	addi	r5,r5,9234
    4988:	d9412c15 	stw	r5,1200(sp)
    498c:	04c001c4 	movi	r19,7
    4990:	00000306 	br	49a0 <___vfprintf_internal_r+0x1568>
    4994:	42000204 	addi	r8,r8,8
    4998:	843ffc04 	addi	r16,r16,-16
    499c:	8c3f0c0e 	bge	r17,r16,45d0 <__alt_data_end+0xfffaeea0>
    49a0:	18c00404 	addi	r3,r3,16
    49a4:	10800044 	addi	r2,r2,1
    49a8:	45000015 	stw	r20,0(r8)
    49ac:	44400115 	stw	r17,4(r8)
    49b0:	d8c12015 	stw	r3,1152(sp)
    49b4:	d8811f15 	stw	r2,1148(sp)
    49b8:	98bff60e 	bge	r19,r2,4994 <__alt_data_end+0xfffaf264>
    49bc:	b809883a 	mov	r4,r23
    49c0:	b00b883a 	mov	r5,r22
    49c4:	d9811e04 	addi	r6,sp,1144
    49c8:	000a07c0 	call	a07c <__sprint_r>
    49cc:	103bb21e 	bne	r2,zero,3898 <__alt_data_end+0xfffae168>
    49d0:	d8c12017 	ldw	r3,1152(sp)
    49d4:	d8811f17 	ldw	r2,1148(sp)
    49d8:	da000404 	addi	r8,sp,16
    49dc:	003fee06 	br	4998 <__alt_data_end+0xfffaf268>
    49e0:	e088703a 	and	r4,fp,r2
    49e4:	203ec01e 	bne	r4,zero,44e8 <__alt_data_end+0xfffaedb8>
    49e8:	dc011f17 	ldw	r16,1148(sp)
    49ec:	d9013117 	ldw	r4,1220(sp)
    49f0:	40800115 	stw	r2,4(r8)
    49f4:	84000044 	addi	r16,r16,1
    49f8:	41000015 	stw	r4,0(r8)
    49fc:	d8c12015 	stw	r3,1152(sp)
    4a00:	dc011f15 	stw	r16,1148(sp)
    4a04:	008001c4 	movi	r2,7
    4a08:	14000e16 	blt	r2,r16,4a44 <___vfprintf_internal_r+0x160c>
    4a0c:	44400204 	addi	r17,r8,8
    4a10:	003ee006 	br	4594 <__alt_data_end+0xfffaee64>
    4a14:	01000074 	movhi	r4,1
    4a18:	21090484 	addi	r4,r4,9234
    4a1c:	d9012c15 	stw	r4,1200(sp)
    4a20:	d8812c17 	ldw	r2,1200(sp)
    4a24:	1cc7883a 	add	r3,r3,r19
    4a28:	84000044 	addi	r16,r16,1
    4a2c:	88800015 	stw	r2,0(r17)
    4a30:	8cc00115 	stw	r19,4(r17)
    4a34:	d8c12015 	stw	r3,1152(sp)
    4a38:	dc011f15 	stw	r16,1148(sp)
    4a3c:	008001c4 	movi	r2,7
    4a40:	143ed30e 	bge	r2,r16,4590 <__alt_data_end+0xfffaee60>
    4a44:	b809883a 	mov	r4,r23
    4a48:	b00b883a 	mov	r5,r22
    4a4c:	d9811e04 	addi	r6,sp,1144
    4a50:	000a07c0 	call	a07c <__sprint_r>
    4a54:	103b901e 	bne	r2,zero,3898 <__alt_data_end+0xfffae168>
    4a58:	d8c12017 	ldw	r3,1152(sp)
    4a5c:	dc011f17 	ldw	r16,1148(sp)
    4a60:	dc400404 	addi	r17,sp,16
    4a64:	003ecb06 	br	4594 <__alt_data_end+0xfffaee64>
    4a68:	b809883a 	mov	r4,r23
    4a6c:	b00b883a 	mov	r5,r22
    4a70:	d9811e04 	addi	r6,sp,1144
    4a74:	000a07c0 	call	a07c <__sprint_r>
    4a78:	103b871e 	bne	r2,zero,3898 <__alt_data_end+0xfffae168>
    4a7c:	d8c12017 	ldw	r3,1152(sp)
    4a80:	dc011f17 	ldw	r16,1148(sp)
    4a84:	da000404 	addi	r8,sp,16
    4a88:	003ea206 	br	4514 <__alt_data_end+0xfffaede4>
    4a8c:	b809883a 	mov	r4,r23
    4a90:	b00b883a 	mov	r5,r22
    4a94:	d9811e04 	addi	r6,sp,1144
    4a98:	000a07c0 	call	a07c <__sprint_r>
    4a9c:	103b7e1e 	bne	r2,zero,3898 <__alt_data_end+0xfffae168>
    4aa0:	d8c12017 	ldw	r3,1152(sp)
    4aa4:	dc011f17 	ldw	r16,1148(sp)
    4aa8:	dc400404 	addi	r17,sp,16
    4aac:	003ea406 	br	4540 <__alt_data_end+0xfffaee10>
    4ab0:	b809883a 	mov	r4,r23
    4ab4:	b00b883a 	mov	r5,r22
    4ab8:	d9811e04 	addi	r6,sp,1144
    4abc:	000a07c0 	call	a07c <__sprint_r>
    4ac0:	103b751e 	bne	r2,zero,3898 <__alt_data_end+0xfffae168>
    4ac4:	d8c12017 	ldw	r3,1152(sp)
    4ac8:	da000404 	addi	r8,sp,16
    4acc:	003c3706 	br	3bac <__alt_data_end+0xfffae47c>
    4ad0:	04a5c83a 	sub	r18,zero,r18
    4ad4:	9004c03a 	cmpne	r2,r18,zero
    4ad8:	056bc83a 	sub	r21,zero,r21
    4adc:	a8abc83a 	sub	r21,r21,r2
    4ae0:	04c00b44 	movi	r19,45
    4ae4:	dcc12785 	stb	r19,1182(sp)
    4ae8:	da413215 	stw	r9,1224(sp)
    4aec:	00800044 	movi	r2,1
    4af0:	9546b03a 	or	r3,r18,r21
    4af4:	003bb106 	br	39bc <__alt_data_end+0xfffae28c>
    4af8:	da013f15 	stw	r8,1276(sp)
    4afc:	da413e15 	stw	r9,1272(sp)
    4b00:	0009d2c0 	call	9d2c <__fpclassifyd>
    4b04:	da013f17 	ldw	r8,1276(sp)
    4b08:	da413e17 	ldw	r9,1272(sp)
    4b0c:	1000e526 	beq	r2,zero,4ea4 <___vfprintf_internal_r+0x1a6c>
    4b10:	04fff7c4 	movi	r19,-33
    4b14:	00bfffc4 	movi	r2,-1
    4b18:	84e6703a 	and	r19,r16,r19
    4b1c:	48822926 	beq	r9,r2,53c4 <___vfprintf_internal_r+0x1f8c>
    4b20:	008011c4 	movi	r2,71
    4b24:	98821626 	beq	r19,r2,5380 <___vfprintf_internal_r+0x1f48>
    4b28:	d9013917 	ldw	r4,1252(sp)
    4b2c:	e0c04014 	ori	r3,fp,256
    4b30:	d8c12d15 	stw	r3,1204(sp)
    4b34:	20021f16 	blt	r4,zero,53b4 <___vfprintf_internal_r+0x1f7c>
    4b38:	dc413917 	ldw	r17,1252(sp)
    4b3c:	d8012b05 	stb	zero,1196(sp)
    4b40:	00801984 	movi	r2,102
    4b44:	80814d26 	beq	r16,r2,507c <___vfprintf_internal_r+0x1c44>
    4b48:	00801184 	movi	r2,70
    4b4c:	80814b26 	beq	r16,r2,507c <___vfprintf_internal_r+0x1c44>
    4b50:	00801144 	movi	r2,69
    4b54:	98821d26 	beq	r19,r2,53cc <___vfprintf_internal_r+0x1f94>
    4b58:	482b883a 	mov	r21,r9
    4b5c:	d8812604 	addi	r2,sp,1176
    4b60:	d8800115 	stw	r2,4(sp)
    4b64:	d9413717 	ldw	r5,1244(sp)
    4b68:	d8812504 	addi	r2,sp,1172
    4b6c:	d8800215 	stw	r2,8(sp)
    4b70:	d8812104 	addi	r2,sp,1156
    4b74:	dd400015 	stw	r21,0(sp)
    4b78:	d8800315 	stw	r2,12(sp)
    4b7c:	b809883a 	mov	r4,r23
    4b80:	880d883a 	mov	r6,r17
    4b84:	01c00084 	movi	r7,2
    4b88:	da013f15 	stw	r8,1276(sp)
    4b8c:	da413e15 	stw	r9,1272(sp)
    4b90:	00058b00 	call	58b0 <_dtoa_r>
    4b94:	d8813115 	stw	r2,1220(sp)
    4b98:	008019c4 	movi	r2,103
    4b9c:	da013f17 	ldw	r8,1276(sp)
    4ba0:	da413e17 	ldw	r9,1272(sp)
    4ba4:	80800226 	beq	r16,r2,4bb0 <___vfprintf_internal_r+0x1778>
    4ba8:	008011c4 	movi	r2,71
    4bac:	8081451e 	bne	r16,r2,50c4 <___vfprintf_internal_r+0x1c8c>
    4bb0:	e080004c 	andi	r2,fp,1
    4bb4:	10021e26 	beq	r2,zero,5430 <___vfprintf_internal_r+0x1ff8>
    4bb8:	d8c13117 	ldw	r3,1220(sp)
    4bbc:	1d55883a 	add	r10,r3,r21
    4bc0:	d9013717 	ldw	r4,1244(sp)
    4bc4:	880b883a 	mov	r5,r17
    4bc8:	000d883a 	mov	r6,zero
    4bcc:	000f883a 	mov	r7,zero
    4bd0:	da013f15 	stw	r8,1276(sp)
    4bd4:	da413e15 	stw	r9,1272(sp)
    4bd8:	da813d15 	stw	r10,1268(sp)
    4bdc:	000ddf40 	call	ddf4 <__eqdf2>
    4be0:	da013f17 	ldw	r8,1276(sp)
    4be4:	da413e17 	ldw	r9,1272(sp)
    4be8:	da813d17 	ldw	r10,1268(sp)
    4bec:	1001a126 	beq	r2,zero,5274 <___vfprintf_internal_r+0x1e3c>
    4bf0:	d8812117 	ldw	r2,1156(sp)
    4bf4:	1280062e 	bgeu	r2,r10,4c10 <___vfprintf_internal_r+0x17d8>
    4bf8:	01000c04 	movi	r4,48
    4bfc:	10c00044 	addi	r3,r2,1
    4c00:	d8c12115 	stw	r3,1156(sp)
    4c04:	11000005 	stb	r4,0(r2)
    4c08:	d8812117 	ldw	r2,1156(sp)
    4c0c:	12bffb36 	bltu	r2,r10,4bfc <__alt_data_end+0xfffaf4cc>
    4c10:	d8c13117 	ldw	r3,1220(sp)
    4c14:	10c5c83a 	sub	r2,r2,r3
    4c18:	d8813315 	stw	r2,1228(sp)
    4c1c:	008011c4 	movi	r2,71
    4c20:	98818926 	beq	r19,r2,5248 <___vfprintf_internal_r+0x1e10>
    4c24:	00801944 	movi	r2,101
    4c28:	14023c0e 	bge	r2,r16,551c <___vfprintf_internal_r+0x20e4>
    4c2c:	d8c12617 	ldw	r3,1176(sp)
    4c30:	00801984 	movi	r2,102
    4c34:	d8c13415 	stw	r3,1232(sp)
    4c38:	8081ef26 	beq	r16,r2,53f8 <___vfprintf_internal_r+0x1fc0>
    4c3c:	d8c13417 	ldw	r3,1232(sp)
    4c40:	d9013317 	ldw	r4,1228(sp)
    4c44:	1901e316 	blt	r3,r4,53d4 <___vfprintf_internal_r+0x1f9c>
    4c48:	e080004c 	andi	r2,fp,1
    4c4c:	1001f426 	beq	r2,zero,5420 <___vfprintf_internal_r+0x1fe8>
    4c50:	d8c13417 	ldw	r3,1232(sp)
    4c54:	1c400044 	addi	r17,r3,1
    4c58:	8839883a 	mov	fp,r17
    4c5c:	8801e416 	blt	r17,zero,53f0 <___vfprintf_internal_r+0x1fb8>
    4c60:	dd412b07 	ldb	r21,1196(sp)
    4c64:	a801701e 	bne	r21,zero,5228 <___vfprintf_internal_r+0x1df0>
    4c68:	df012b15 	stw	fp,1196(sp)
    4c6c:	dcc12783 	ldbu	r19,1182(sp)
    4c70:	df012d17 	ldw	fp,1204(sp)
    4c74:	d8013215 	stw	zero,1224(sp)
    4c78:	dc812d15 	stw	r18,1204(sp)
    4c7c:	003b6e06 	br	3a38 <__alt_data_end+0xfffae308>
    4c80:	e080040c 	andi	r2,fp,16
    4c84:	1000b51e 	bne	r2,zero,4f5c <___vfprintf_internal_r+0x1b24>
    4c88:	e080100c 	andi	r2,fp,64
    4c8c:	10015b26 	beq	r2,zero,51fc <___vfprintf_internal_r+0x1dc4>
    4c90:	d9012d17 	ldw	r4,1204(sp)
    4c94:	d9412f17 	ldw	r5,1212(sp)
    4c98:	20800017 	ldw	r2,0(r4)
    4c9c:	21000104 	addi	r4,r4,4
    4ca0:	d9012d15 	stw	r4,1204(sp)
    4ca4:	1140000d 	sth	r5,0(r2)
    4ca8:	003a2006 	br	352c <__alt_data_end+0xfffaddfc>
    4cac:	e0c0100c 	andi	r3,fp,64
    4cb0:	1800a226 	beq	r3,zero,4f3c <___vfprintf_internal_r+0x1b04>
    4cb4:	d8c12d17 	ldw	r3,1204(sp)
    4cb8:	1480000b 	ldhu	r18,0(r2)
    4cbc:	002b883a 	mov	r21,zero
    4cc0:	18c00104 	addi	r3,r3,4
    4cc4:	d8c12d15 	stw	r3,1204(sp)
    4cc8:	0005883a 	mov	r2,zero
    4ccc:	9007883a 	mov	r3,r18
    4cd0:	003c6906 	br	3e78 <__alt_data_end+0xfffae748>
    4cd4:	e0c0100c 	andi	r3,fp,64
    4cd8:	18009026 	beq	r3,zero,4f1c <___vfprintf_internal_r+0x1ae4>
    4cdc:	1480000b 	ldhu	r18,0(r2)
    4ce0:	d8812d17 	ldw	r2,1204(sp)
    4ce4:	002b883a 	mov	r21,zero
    4ce8:	9007883a 	mov	r3,r18
    4cec:	10800104 	addi	r2,r2,4
    4cf0:	d8812d15 	stw	r2,1204(sp)
    4cf4:	00800044 	movi	r2,1
    4cf8:	003c5f06 	br	3e78 <__alt_data_end+0xfffae748>
    4cfc:	e0c0100c 	andi	r3,fp,64
    4d00:	18008026 	beq	r3,zero,4f04 <___vfprintf_internal_r+0x1acc>
    4d04:	d9012d17 	ldw	r4,1204(sp)
    4d08:	1480000b 	ldhu	r18,0(r2)
    4d0c:	002b883a 	mov	r21,zero
    4d10:	21000104 	addi	r4,r4,4
    4d14:	d9012d15 	stw	r4,1204(sp)
    4d18:	003c7906 	br	3f00 <__alt_data_end+0xfffae7d0>
    4d1c:	e080100c 	andi	r2,fp,64
    4d20:	10007126 	beq	r2,zero,4ee8 <___vfprintf_internal_r+0x1ab0>
    4d24:	1c80000f 	ldh	r18,0(r3)
    4d28:	d8812d17 	ldw	r2,1204(sp)
    4d2c:	902bd7fa 	srai	r21,r18,31
    4d30:	10800104 	addi	r2,r2,4
    4d34:	d8812d15 	stw	r2,1204(sp)
    4d38:	a805883a 	mov	r2,r21
    4d3c:	003b1a06 	br	39a8 <__alt_data_end+0xfffae278>
    4d40:	e4000007 	ldb	r16,0(fp)
    4d44:	e005883a 	mov	r2,fp
    4d48:	003a2306 	br	35d8 <__alt_data_end+0xfffadea8>
    4d4c:	00800084 	movi	r2,2
    4d50:	003c4906 	br	3e78 <__alt_data_end+0xfffae748>
    4d54:	01000074 	movhi	r4,1
    4d58:	21090484 	addi	r4,r4,9234
    4d5c:	d9012c15 	stw	r4,1200(sp)
    4d60:	d9012c17 	ldw	r4,1200(sp)
    4d64:	1c47883a 	add	r3,r3,r17
    4d68:	10800044 	addi	r2,r2,1
    4d6c:	41000015 	stw	r4,0(r8)
    4d70:	44400115 	stw	r17,4(r8)
    4d74:	d8c12015 	stw	r3,1152(sp)
    4d78:	d8811f15 	stw	r2,1148(sp)
    4d7c:	010001c4 	movi	r4,7
    4d80:	20becc16 	blt	r4,r2,48b4 <__alt_data_end+0xfffaf184>
    4d84:	42000204 	addi	r8,r8,8
    4d88:	003ed106 	br	48d0 <__alt_data_end+0xfffaf1a0>
    4d8c:	01000074 	movhi	r4,1
    4d90:	21090484 	addi	r4,r4,9234
    4d94:	d9012c15 	stw	r4,1200(sp)
    4d98:	003ba306 	br	3c28 <__alt_data_end+0xfffae4f8>
    4d9c:	b809883a 	mov	r4,r23
    4da0:	b00b883a 	mov	r5,r22
    4da4:	d9811e04 	addi	r6,sp,1144
    4da8:	000a07c0 	call	a07c <__sprint_r>
    4dac:	103aba1e 	bne	r2,zero,3898 <__alt_data_end+0xfffae168>
    4db0:	d8c12017 	ldw	r3,1152(sp)
    4db4:	da000404 	addi	r8,sp,16
    4db8:	003d6c06 	br	436c <__alt_data_end+0xfffaec3c>
    4dbc:	d8811f17 	ldw	r2,1148(sp)
    4dc0:	01400074 	movhi	r5,1
    4dc4:	01000044 	movi	r4,1
    4dc8:	18c00044 	addi	r3,r3,1
    4dcc:	10800044 	addi	r2,r2,1
    4dd0:	29490404 	addi	r5,r5,9232
    4dd4:	41000115 	stw	r4,4(r8)
    4dd8:	41400015 	stw	r5,0(r8)
    4ddc:	d8c12015 	stw	r3,1152(sp)
    4de0:	d8811f15 	stw	r2,1148(sp)
    4de4:	010001c4 	movi	r4,7
    4de8:	20806716 	blt	r4,r2,4f88 <___vfprintf_internal_r+0x1b50>
    4dec:	42000204 	addi	r8,r8,8
    4df0:	8000041e 	bne	r16,zero,4e04 <___vfprintf_internal_r+0x19cc>
    4df4:	d8813317 	ldw	r2,1228(sp)
    4df8:	1000021e 	bne	r2,zero,4e04 <___vfprintf_internal_r+0x19cc>
    4dfc:	e080004c 	andi	r2,fp,1
    4e00:	103ba026 	beq	r2,zero,3c84 <__alt_data_end+0xfffae554>
    4e04:	d9013817 	ldw	r4,1248(sp)
    4e08:	d8811f17 	ldw	r2,1148(sp)
    4e0c:	d9413517 	ldw	r5,1236(sp)
    4e10:	1907883a 	add	r3,r3,r4
    4e14:	10800044 	addi	r2,r2,1
    4e18:	41000115 	stw	r4,4(r8)
    4e1c:	41400015 	stw	r5,0(r8)
    4e20:	d8c12015 	stw	r3,1152(sp)
    4e24:	d8811f15 	stw	r2,1148(sp)
    4e28:	010001c4 	movi	r4,7
    4e2c:	20815716 	blt	r4,r2,538c <___vfprintf_internal_r+0x1f54>
    4e30:	42000204 	addi	r8,r8,8
    4e34:	0421c83a 	sub	r16,zero,r16
    4e38:	0400810e 	bge	zero,r16,5040 <___vfprintf_internal_r+0x1c08>
    4e3c:	04400404 	movi	r17,16
    4e40:	8c00bd0e 	bge	r17,r16,5138 <___vfprintf_internal_r+0x1d00>
    4e44:	01400074 	movhi	r5,1
    4e48:	29490484 	addi	r5,r5,9234
    4e4c:	d9412c15 	stw	r5,1200(sp)
    4e50:	04c001c4 	movi	r19,7
    4e54:	00000306 	br	4e64 <___vfprintf_internal_r+0x1a2c>
    4e58:	42000204 	addi	r8,r8,8
    4e5c:	843ffc04 	addi	r16,r16,-16
    4e60:	8c00b80e 	bge	r17,r16,5144 <___vfprintf_internal_r+0x1d0c>
    4e64:	18c00404 	addi	r3,r3,16
    4e68:	10800044 	addi	r2,r2,1
    4e6c:	45000015 	stw	r20,0(r8)
    4e70:	44400115 	stw	r17,4(r8)
    4e74:	d8c12015 	stw	r3,1152(sp)
    4e78:	d8811f15 	stw	r2,1148(sp)
    4e7c:	98bff60e 	bge	r19,r2,4e58 <__alt_data_end+0xfffaf728>
    4e80:	b809883a 	mov	r4,r23
    4e84:	b00b883a 	mov	r5,r22
    4e88:	d9811e04 	addi	r6,sp,1144
    4e8c:	000a07c0 	call	a07c <__sprint_r>
    4e90:	103a811e 	bne	r2,zero,3898 <__alt_data_end+0xfffae168>
    4e94:	d8c12017 	ldw	r3,1152(sp)
    4e98:	d8811f17 	ldw	r2,1148(sp)
    4e9c:	da000404 	addi	r8,sp,16
    4ea0:	003fee06 	br	4e5c <__alt_data_end+0xfffaf72c>
    4ea4:	008011c4 	movi	r2,71
    4ea8:	1400db16 	blt	r2,r16,5218 <___vfprintf_internal_r+0x1de0>
    4eac:	01000074 	movhi	r4,1
    4eb0:	2108f604 	addi	r4,r4,9176
    4eb4:	d9013115 	stw	r4,1220(sp)
    4eb8:	00c000c4 	movi	r3,3
    4ebc:	00bfdfc4 	movi	r2,-129
    4ec0:	d8c12b15 	stw	r3,1196(sp)
    4ec4:	e0b8703a 	and	fp,fp,r2
    4ec8:	dcc12783 	ldbu	r19,1182(sp)
    4ecc:	dc812d15 	stw	r18,1204(sp)
    4ed0:	1823883a 	mov	r17,r3
    4ed4:	d8013215 	stw	zero,1224(sp)
    4ed8:	d8013415 	stw	zero,1232(sp)
    4edc:	003ad606 	br	3a38 <__alt_data_end+0xfffae308>
    4ee0:	4823883a 	mov	r17,r9
    4ee4:	003cc906 	br	420c <__alt_data_end+0xfffaeadc>
    4ee8:	1c800017 	ldw	r18,0(r3)
    4eec:	d8c12d17 	ldw	r3,1204(sp)
    4ef0:	902bd7fa 	srai	r21,r18,31
    4ef4:	18c00104 	addi	r3,r3,4
    4ef8:	d8c12d15 	stw	r3,1204(sp)
    4efc:	a805883a 	mov	r2,r21
    4f00:	003aa906 	br	39a8 <__alt_data_end+0xfffae278>
    4f04:	d9412d17 	ldw	r5,1204(sp)
    4f08:	14800017 	ldw	r18,0(r2)
    4f0c:	002b883a 	mov	r21,zero
    4f10:	29400104 	addi	r5,r5,4
    4f14:	d9412d15 	stw	r5,1204(sp)
    4f18:	003bf906 	br	3f00 <__alt_data_end+0xfffae7d0>
    4f1c:	d8c12d17 	ldw	r3,1204(sp)
    4f20:	14800017 	ldw	r18,0(r2)
    4f24:	002b883a 	mov	r21,zero
    4f28:	18c00104 	addi	r3,r3,4
    4f2c:	d8c12d15 	stw	r3,1204(sp)
    4f30:	00800044 	movi	r2,1
    4f34:	9007883a 	mov	r3,r18
    4f38:	003bcf06 	br	3e78 <__alt_data_end+0xfffae748>
    4f3c:	d9012d17 	ldw	r4,1204(sp)
    4f40:	14800017 	ldw	r18,0(r2)
    4f44:	002b883a 	mov	r21,zero
    4f48:	21000104 	addi	r4,r4,4
    4f4c:	d9012d15 	stw	r4,1204(sp)
    4f50:	0005883a 	mov	r2,zero
    4f54:	9007883a 	mov	r3,r18
    4f58:	003bc706 	br	3e78 <__alt_data_end+0xfffae748>
    4f5c:	d9412d17 	ldw	r5,1204(sp)
    4f60:	d8c12f17 	ldw	r3,1212(sp)
    4f64:	28800017 	ldw	r2,0(r5)
    4f68:	29400104 	addi	r5,r5,4
    4f6c:	d9412d15 	stw	r5,1204(sp)
    4f70:	10c00015 	stw	r3,0(r2)
    4f74:	00396d06 	br	352c <__alt_data_end+0xfffaddfc>
    4f78:	01000074 	movhi	r4,1
    4f7c:	2108f404 	addi	r4,r4,9168
    4f80:	d9013115 	stw	r4,1220(sp)
    4f84:	003ba206 	br	3e10 <__alt_data_end+0xfffae6e0>
    4f88:	b809883a 	mov	r4,r23
    4f8c:	b00b883a 	mov	r5,r22
    4f90:	d9811e04 	addi	r6,sp,1144
    4f94:	000a07c0 	call	a07c <__sprint_r>
    4f98:	103a3f1e 	bne	r2,zero,3898 <__alt_data_end+0xfffae168>
    4f9c:	dc012617 	ldw	r16,1176(sp)
    4fa0:	d8c12017 	ldw	r3,1152(sp)
    4fa4:	da000404 	addi	r8,sp,16
    4fa8:	003f9106 	br	4df0 <__alt_data_end+0xfffaf6c0>
    4fac:	e0800044 	addi	r2,fp,1
    4fb0:	9cc00814 	ori	r19,r19,32
    4fb4:	e4000047 	ldb	r16,1(fp)
    4fb8:	00398706 	br	35d8 <__alt_data_end+0xfffadea8>
    4fbc:	d8812e17 	ldw	r2,1208(sp)
    4fc0:	d8c12d15 	stw	r3,1204(sp)
    4fc4:	0085c83a 	sub	r2,zero,r2
    4fc8:	d8812e15 	stw	r2,1208(sp)
    4fcc:	e005883a 	mov	r2,fp
    4fd0:	003a3a06 	br	38bc <__alt_data_end+0xfffae18c>
    4fd4:	b809883a 	mov	r4,r23
    4fd8:	b00b883a 	mov	r5,r22
    4fdc:	d9811e04 	addi	r6,sp,1144
    4fe0:	000a07c0 	call	a07c <__sprint_r>
    4fe4:	103a2c1e 	bne	r2,zero,3898 <__alt_data_end+0xfffae168>
    4fe8:	d8c12017 	ldw	r3,1152(sp)
    4fec:	da000404 	addi	r8,sp,16
    4ff0:	003cf006 	br	43b4 <__alt_data_end+0xfffaec84>
    4ff4:	d8c12817 	ldw	r3,1184(sp)
    4ff8:	d9013117 	ldw	r4,1220(sp)
    4ffc:	1923c83a 	sub	r17,r3,r4
    5000:	003a8806 	br	3a24 <__alt_data_end+0xfffae2f4>
    5004:	da013f15 	stw	r8,1276(sp)
    5008:	00033a00 	call	33a0 <strlen>
    500c:	1023883a 	mov	r17,r2
    5010:	da013f17 	ldw	r8,1276(sp)
    5014:	883c7f0e 	bge	r17,zero,4214 <__alt_data_end+0xfffaeae4>
    5018:	0005883a 	mov	r2,zero
    501c:	003c7d06 	br	4214 <__alt_data_end+0xfffaeae4>
    5020:	b809883a 	mov	r4,r23
    5024:	b00b883a 	mov	r5,r22
    5028:	d9811e04 	addi	r6,sp,1144
    502c:	000a07c0 	call	a07c <__sprint_r>
    5030:	103a191e 	bne	r2,zero,3898 <__alt_data_end+0xfffae168>
    5034:	d8c12017 	ldw	r3,1152(sp)
    5038:	d8811f17 	ldw	r2,1148(sp)
    503c:	da000404 	addi	r8,sp,16
    5040:	d9413317 	ldw	r5,1228(sp)
    5044:	d9013117 	ldw	r4,1220(sp)
    5048:	10800044 	addi	r2,r2,1
    504c:	28c7883a 	add	r3,r5,r3
    5050:	41000015 	stw	r4,0(r8)
    5054:	41400115 	stw	r5,4(r8)
    5058:	d8c12015 	stw	r3,1152(sp)
    505c:	d8811f15 	stw	r2,1148(sp)
    5060:	010001c4 	movi	r4,7
    5064:	20bb060e 	bge	r4,r2,3c80 <__alt_data_end+0xfffae550>
    5068:	003d6206 	br	45f4 <__alt_data_end+0xfffaeec4>
    506c:	01000074 	movhi	r4,1
    5070:	21090884 	addi	r4,r4,9250
    5074:	d9013615 	stw	r4,1240(sp)
    5078:	003aa306 	br	3b08 <__alt_data_end+0xfffae3d8>
    507c:	d8812604 	addi	r2,sp,1176
    5080:	d8800115 	stw	r2,4(sp)
    5084:	d9413717 	ldw	r5,1244(sp)
    5088:	d8812504 	addi	r2,sp,1172
    508c:	d8800215 	stw	r2,8(sp)
    5090:	d8812104 	addi	r2,sp,1156
    5094:	da400015 	stw	r9,0(sp)
    5098:	d8800315 	stw	r2,12(sp)
    509c:	b809883a 	mov	r4,r23
    50a0:	880d883a 	mov	r6,r17
    50a4:	01c000c4 	movi	r7,3
    50a8:	da013f15 	stw	r8,1276(sp)
    50ac:	da413e15 	stw	r9,1272(sp)
    50b0:	00058b00 	call	58b0 <_dtoa_r>
    50b4:	da413e17 	ldw	r9,1272(sp)
    50b8:	da013f17 	ldw	r8,1276(sp)
    50bc:	d8813115 	stw	r2,1220(sp)
    50c0:	482b883a 	mov	r21,r9
    50c4:	d8c13117 	ldw	r3,1220(sp)
    50c8:	00801184 	movi	r2,70
    50cc:	1d55883a 	add	r10,r3,r21
    50d0:	98bebb1e 	bne	r19,r2,4bc0 <__alt_data_end+0xfffaf490>
    50d4:	19000007 	ldb	r4,0(r3)
    50d8:	00800c04 	movi	r2,48
    50dc:	2080dd26 	beq	r4,r2,5454 <___vfprintf_internal_r+0x201c>
    50e0:	d8c12617 	ldw	r3,1176(sp)
    50e4:	50d5883a 	add	r10,r10,r3
    50e8:	003eb506 	br	4bc0 <__alt_data_end+0xfffaf490>
    50ec:	0023883a 	mov	r17,zero
    50f0:	003d9b06 	br	4760 <__alt_data_end+0xfffaf030>
    50f4:	b809883a 	mov	r4,r23
    50f8:	b00b883a 	mov	r5,r22
    50fc:	d9811e04 	addi	r6,sp,1144
    5100:	000a07c0 	call	a07c <__sprint_r>
    5104:	1039e41e 	bne	r2,zero,3898 <__alt_data_end+0xfffae168>
    5108:	d8c12017 	ldw	r3,1152(sp)
    510c:	da000404 	addi	r8,sp,16
    5110:	003d9206 	br	475c <__alt_data_end+0xfffaf02c>
    5114:	b809883a 	mov	r4,r23
    5118:	b00b883a 	mov	r5,r22
    511c:	d9811e04 	addi	r6,sp,1144
    5120:	000a07c0 	call	a07c <__sprint_r>
    5124:	1039dc1e 	bne	r2,zero,3898 <__alt_data_end+0xfffae168>
    5128:	d8812617 	ldw	r2,1176(sp)
    512c:	d8c12017 	ldw	r3,1152(sp)
    5130:	da000404 	addi	r8,sp,16
    5134:	003dfb06 	br	4924 <__alt_data_end+0xfffaf1f4>
    5138:	01000074 	movhi	r4,1
    513c:	21090484 	addi	r4,r4,9234
    5140:	d9012c15 	stw	r4,1200(sp)
    5144:	d9012c17 	ldw	r4,1200(sp)
    5148:	1c07883a 	add	r3,r3,r16
    514c:	10800044 	addi	r2,r2,1
    5150:	41000015 	stw	r4,0(r8)
    5154:	44000115 	stw	r16,4(r8)
    5158:	d8c12015 	stw	r3,1152(sp)
    515c:	d8811f15 	stw	r2,1148(sp)
    5160:	010001c4 	movi	r4,7
    5164:	20bfae16 	blt	r4,r2,5020 <__alt_data_end+0xfffaf8f0>
    5168:	42000204 	addi	r8,r8,8
    516c:	003fb406 	br	5040 <__alt_data_end+0xfffaf910>
    5170:	0021883a 	mov	r16,zero
    5174:	003dfd06 	br	496c <__alt_data_end+0xfffaf23c>
    5178:	01400074 	movhi	r5,1
    517c:	29490884 	addi	r5,r5,9250
    5180:	d9413615 	stw	r5,1240(sp)
    5184:	003ae306 	br	3d14 <__alt_data_end+0xfffae5e4>
    5188:	b809883a 	mov	r4,r23
    518c:	b00b883a 	mov	r5,r22
    5190:	d9811e04 	addi	r6,sp,1144
    5194:	000a07c0 	call	a07c <__sprint_r>
    5198:	1039bf1e 	bne	r2,zero,3898 <__alt_data_end+0xfffae168>
    519c:	d8812617 	ldw	r2,1176(sp)
    51a0:	d9413317 	ldw	r5,1228(sp)
    51a4:	d8c12017 	ldw	r3,1152(sp)
    51a8:	da000404 	addi	r8,sp,16
    51ac:	2885c83a 	sub	r2,r5,r2
    51b0:	003ded06 	br	4968 <__alt_data_end+0xfffaf238>
    51b4:	00800184 	movi	r2,6
    51b8:	1240012e 	bgeu	r2,r9,51c0 <___vfprintf_internal_r+0x1d88>
    51bc:	1013883a 	mov	r9,r2
    51c0:	4823883a 	mov	r17,r9
    51c4:	4805883a 	mov	r2,r9
    51c8:	4800b216 	blt	r9,zero,5494 <___vfprintf_internal_r+0x205c>
    51cc:	01400074 	movhi	r5,1
    51d0:	29490204 	addi	r5,r5,9224
    51d4:	d8812b15 	stw	r2,1196(sp)
    51d8:	dc812d15 	stw	r18,1204(sp)
    51dc:	d8013215 	stw	zero,1224(sp)
    51e0:	d8013415 	stw	zero,1232(sp)
    51e4:	d9413115 	stw	r5,1220(sp)
    51e8:	0005883a 	mov	r2,zero
    51ec:	003a1906 	br	3a54 <__alt_data_end+0xfffae324>
    51f0:	04c00b44 	movi	r19,45
    51f4:	dcc12785 	stb	r19,1182(sp)
    51f8:	003b0006 	br	3dfc <__alt_data_end+0xfffae6cc>
    51fc:	d8c12d17 	ldw	r3,1204(sp)
    5200:	d9012f17 	ldw	r4,1212(sp)
    5204:	18800017 	ldw	r2,0(r3)
    5208:	18c00104 	addi	r3,r3,4
    520c:	d8c12d15 	stw	r3,1204(sp)
    5210:	11000015 	stw	r4,0(r2)
    5214:	0038c506 	br	352c <__alt_data_end+0xfffaddfc>
    5218:	01400074 	movhi	r5,1
    521c:	2948f704 	addi	r5,r5,9180
    5220:	d9413115 	stw	r5,1220(sp)
    5224:	003f2406 	br	4eb8 <__alt_data_end+0xfffaf788>
    5228:	00800b44 	movi	r2,45
    522c:	d8812785 	stb	r2,1182(sp)
    5230:	df012b15 	stw	fp,1196(sp)
    5234:	d8013215 	stw	zero,1224(sp)
    5238:	df012d17 	ldw	fp,1204(sp)
    523c:	00800b44 	movi	r2,45
    5240:	dc812d15 	stw	r18,1204(sp)
    5244:	003a0006 	br	3a48 <__alt_data_end+0xfffae318>
    5248:	d8c12617 	ldw	r3,1176(sp)
    524c:	00bfff44 	movi	r2,-3
    5250:	18800a16 	blt	r3,r2,527c <___vfprintf_internal_r+0x1e44>
    5254:	48c00916 	blt	r9,r3,527c <___vfprintf_internal_r+0x1e44>
    5258:	d8c13415 	stw	r3,1232(sp)
    525c:	040019c4 	movi	r16,103
    5260:	003e7606 	br	4c3c <__alt_data_end+0xfffaf50c>
    5264:	01000074 	movhi	r4,1
    5268:	21090484 	addi	r4,r4,9234
    526c:	d9012c15 	stw	r4,1200(sp)
    5270:	003c8e06 	br	44ac <__alt_data_end+0xfffaed7c>
    5274:	5005883a 	mov	r2,r10
    5278:	003e6506 	br	4c10 <__alt_data_end+0xfffaf4e0>
    527c:	843fff84 	addi	r16,r16,-2
    5280:	1d7fffc4 	addi	r21,r3,-1
    5284:	dd412615 	stw	r21,1176(sp)
    5288:	dc0122c5 	stb	r16,1163(sp)
    528c:	a8009216 	blt	r21,zero,54d8 <___vfprintf_internal_r+0x20a0>
    5290:	00800ac4 	movi	r2,43
    5294:	d8812305 	stb	r2,1164(sp)
    5298:	00800244 	movi	r2,9
    529c:	1540660e 	bge	r2,r21,5438 <___vfprintf_internal_r+0x2000>
    52a0:	dcc122c4 	addi	r19,sp,1163
    52a4:	dc012c15 	stw	r16,1200(sp)
    52a8:	4023883a 	mov	r17,r8
    52ac:	9821883a 	mov	r16,r19
    52b0:	a809883a 	mov	r4,r21
    52b4:	01400284 	movi	r5,10
    52b8:	000cb440 	call	cb44 <__modsi3>
    52bc:	10800c04 	addi	r2,r2,48
    52c0:	843fffc4 	addi	r16,r16,-1
    52c4:	a809883a 	mov	r4,r21
    52c8:	01400284 	movi	r5,10
    52cc:	80800005 	stb	r2,0(r16)
    52d0:	000caf00 	call	caf0 <__divsi3>
    52d4:	01000244 	movi	r4,9
    52d8:	102b883a 	mov	r21,r2
    52dc:	20bff416 	blt	r4,r2,52b0 <__alt_data_end+0xfffafb80>
    52e0:	8811883a 	mov	r8,r17
    52e4:	10800c04 	addi	r2,r2,48
    52e8:	8023883a 	mov	r17,r16
    52ec:	897fffc4 	addi	r5,r17,-1
    52f0:	88bfffc5 	stb	r2,-1(r17)
    52f4:	dc012c17 	ldw	r16,1200(sp)
    52f8:	2cc08a2e 	bgeu	r5,r19,5524 <___vfprintf_internal_r+0x20ec>
    52fc:	d9812384 	addi	r6,sp,1166
    5300:	344dc83a 	sub	r6,r6,r17
    5304:	d9012344 	addi	r4,sp,1165
    5308:	998d883a 	add	r6,r19,r6
    530c:	00000106 	br	5314 <___vfprintf_internal_r+0x1edc>
    5310:	28800003 	ldbu	r2,0(r5)
    5314:	20800005 	stb	r2,0(r4)
    5318:	21000044 	addi	r4,r4,1
    531c:	29400044 	addi	r5,r5,1
    5320:	21bffb1e 	bne	r4,r6,5310 <__alt_data_end+0xfffafbe0>
    5324:	d8812304 	addi	r2,sp,1164
    5328:	1445c83a 	sub	r2,r2,r17
    532c:	d9412344 	addi	r5,sp,1165
    5330:	2885883a 	add	r2,r5,r2
    5334:	14e7c83a 	sub	r19,r2,r19
    5338:	d8813317 	ldw	r2,1228(sp)
    533c:	d8c13317 	ldw	r3,1228(sp)
    5340:	dcc13a15 	stw	r19,1256(sp)
    5344:	14e3883a 	add	r17,r2,r19
    5348:	00800044 	movi	r2,1
    534c:	10c0550e 	bge	r2,r3,54a4 <___vfprintf_internal_r+0x206c>
    5350:	8c400044 	addi	r17,r17,1
    5354:	8839883a 	mov	fp,r17
    5358:	88005016 	blt	r17,zero,549c <___vfprintf_internal_r+0x2064>
    535c:	d8013415 	stw	zero,1232(sp)
    5360:	003e3f06 	br	4c60 <__alt_data_end+0xfffaf530>
    5364:	da412b15 	stw	r9,1196(sp)
    5368:	dcc12783 	ldbu	r19,1182(sp)
    536c:	4823883a 	mov	r17,r9
    5370:	dc812d15 	stw	r18,1204(sp)
    5374:	d8013215 	stw	zero,1224(sp)
    5378:	d8013415 	stw	zero,1232(sp)
    537c:	0039ae06 	br	3a38 <__alt_data_end+0xfffae308>
    5380:	483de91e 	bne	r9,zero,4b28 <__alt_data_end+0xfffaf3f8>
    5384:	8813883a 	mov	r9,r17
    5388:	003de706 	br	4b28 <__alt_data_end+0xfffaf3f8>
    538c:	b809883a 	mov	r4,r23
    5390:	b00b883a 	mov	r5,r22
    5394:	d9811e04 	addi	r6,sp,1144
    5398:	000a07c0 	call	a07c <__sprint_r>
    539c:	10393e1e 	bne	r2,zero,3898 <__alt_data_end+0xfffae168>
    53a0:	dc012617 	ldw	r16,1176(sp)
    53a4:	d8c12017 	ldw	r3,1152(sp)
    53a8:	d8811f17 	ldw	r2,1148(sp)
    53ac:	da000404 	addi	r8,sp,16
    53b0:	003ea006 	br	4e34 <__alt_data_end+0xfffaf704>
    53b4:	00c00b44 	movi	r3,45
    53b8:	2460003c 	xorhi	r17,r4,32768
    53bc:	d8c12b05 	stb	r3,1196(sp)
    53c0:	003ddf06 	br	4b40 <__alt_data_end+0xfffaf410>
    53c4:	02400184 	movi	r9,6
    53c8:	003dd706 	br	4b28 <__alt_data_end+0xfffaf3f8>
    53cc:	4d400044 	addi	r21,r9,1
    53d0:	003de206 	br	4b5c <__alt_data_end+0xfffaf42c>
    53d4:	d8c13417 	ldw	r3,1232(sp)
    53d8:	00c0490e 	bge	zero,r3,5500 <___vfprintf_internal_r+0x20c8>
    53dc:	04400044 	movi	r17,1
    53e0:	d9013317 	ldw	r4,1228(sp)
    53e4:	8923883a 	add	r17,r17,r4
    53e8:	8839883a 	mov	fp,r17
    53ec:	883e1c0e 	bge	r17,zero,4c60 <__alt_data_end+0xfffaf530>
    53f0:	0039883a 	mov	fp,zero
    53f4:	003e1a06 	br	4c60 <__alt_data_end+0xfffaf530>
    53f8:	00c03b0e 	bge	zero,r3,54e8 <___vfprintf_internal_r+0x20b0>
    53fc:	4800021e 	bne	r9,zero,5408 <___vfprintf_internal_r+0x1fd0>
    5400:	e080004c 	andi	r2,fp,1
    5404:	10000626 	beq	r2,zero,5420 <___vfprintf_internal_r+0x1fe8>
    5408:	d8c13417 	ldw	r3,1232(sp)
    540c:	4a400044 	addi	r9,r9,1
    5410:	1a63883a 	add	r17,r3,r9
    5414:	8839883a 	mov	fp,r17
    5418:	883e110e 	bge	r17,zero,4c60 <__alt_data_end+0xfffaf530>
    541c:	003ff406 	br	53f0 <__alt_data_end+0xfffafcc0>
    5420:	1839883a 	mov	fp,r3
    5424:	18004116 	blt	r3,zero,552c <___vfprintf_internal_r+0x20f4>
    5428:	dc413417 	ldw	r17,1232(sp)
    542c:	003e0c06 	br	4c60 <__alt_data_end+0xfffaf530>
    5430:	d8812117 	ldw	r2,1156(sp)
    5434:	003df606 	br	4c10 <__alt_data_end+0xfffaf4e0>
    5438:	00800c04 	movi	r2,48
    543c:	a8c00c04 	addi	r3,r21,48
    5440:	d8812345 	stb	r2,1165(sp)
    5444:	d8c12385 	stb	r3,1166(sp)
    5448:	d88123c4 	addi	r2,sp,1167
    544c:	dcc122c4 	addi	r19,sp,1163
    5450:	003fb806 	br	5334 <__alt_data_end+0xfffafc04>
    5454:	d9013717 	ldw	r4,1244(sp)
    5458:	880b883a 	mov	r5,r17
    545c:	000d883a 	mov	r6,zero
    5460:	000f883a 	mov	r7,zero
    5464:	da013f15 	stw	r8,1276(sp)
    5468:	da413e15 	stw	r9,1272(sp)
    546c:	da813d15 	stw	r10,1268(sp)
    5470:	000ddf40 	call	ddf4 <__eqdf2>
    5474:	da013f17 	ldw	r8,1276(sp)
    5478:	da413e17 	ldw	r9,1272(sp)
    547c:	da813d17 	ldw	r10,1268(sp)
    5480:	103f1726 	beq	r2,zero,50e0 <__alt_data_end+0xfffaf9b0>
    5484:	00800044 	movi	r2,1
    5488:	1547c83a 	sub	r3,r2,r21
    548c:	d8c12615 	stw	r3,1176(sp)
    5490:	003f1406 	br	50e4 <__alt_data_end+0xfffaf9b4>
    5494:	0005883a 	mov	r2,zero
    5498:	003f4c06 	br	51cc <__alt_data_end+0xfffafa9c>
    549c:	0039883a 	mov	fp,zero
    54a0:	003fae06 	br	535c <__alt_data_end+0xfffafc2c>
    54a4:	e084703a 	and	r2,fp,r2
    54a8:	103faa26 	beq	r2,zero,5354 <__alt_data_end+0xfffafc24>
    54ac:	003fa806 	br	5350 <__alt_data_end+0xfffafc20>
    54b0:	d9412d17 	ldw	r5,1204(sp)
    54b4:	2a400017 	ldw	r9,0(r5)
    54b8:	28c00104 	addi	r3,r5,4
    54bc:	d8c12d15 	stw	r3,1204(sp)
    54c0:	483ebc0e 	bge	r9,zero,4fb4 <__alt_data_end+0xfffaf884>
    54c4:	027fffc4 	movi	r9,-1
    54c8:	e4000047 	ldb	r16,1(fp)
    54cc:	00384206 	br	35d8 <__alt_data_end+0xfffadea8>
    54d0:	043fffc4 	movi	r16,-1
    54d4:	0038ce06 	br	3810 <__alt_data_end+0xfffae0e0>
    54d8:	00800b44 	movi	r2,45
    54dc:	056bc83a 	sub	r21,zero,r21
    54e0:	d8812305 	stb	r2,1164(sp)
    54e4:	003f6c06 	br	5298 <__alt_data_end+0xfffafb68>
    54e8:	4800081e 	bne	r9,zero,550c <___vfprintf_internal_r+0x20d4>
    54ec:	e080004c 	andi	r2,fp,1
    54f0:	1000061e 	bne	r2,zero,550c <___vfprintf_internal_r+0x20d4>
    54f4:	07000044 	movi	fp,1
    54f8:	e023883a 	mov	r17,fp
    54fc:	003dd806 	br	4c60 <__alt_data_end+0xfffaf530>
    5500:	04400084 	movi	r17,2
    5504:	88e3c83a 	sub	r17,r17,r3
    5508:	003fb506 	br	53e0 <__alt_data_end+0xfffafcb0>
    550c:	4c400084 	addi	r17,r9,2
    5510:	8839883a 	mov	fp,r17
    5514:	883dd20e 	bge	r17,zero,4c60 <__alt_data_end+0xfffaf530>
    5518:	003fb506 	br	53f0 <__alt_data_end+0xfffafcc0>
    551c:	d8c12617 	ldw	r3,1176(sp)
    5520:	003f5706 	br	5280 <__alt_data_end+0xfffafb50>
    5524:	d8812344 	addi	r2,sp,1165
    5528:	003f8206 	br	5334 <__alt_data_end+0xfffafc04>
    552c:	0039883a 	mov	fp,zero
    5530:	003fbd06 	br	5428 <__alt_data_end+0xfffafcf8>

00005534 <__vfprintf_internal>:
    5534:	2007883a 	mov	r3,r4
    5538:	01000074 	movhi	r4,1
    553c:	21106104 	addi	r4,r4,16772
    5540:	21000017 	ldw	r4,0(r4)
    5544:	2805883a 	mov	r2,r5
    5548:	300f883a 	mov	r7,r6
    554c:	180b883a 	mov	r5,r3
    5550:	100d883a 	mov	r6,r2
    5554:	00034381 	jmpi	3438 <___vfprintf_internal_r>

00005558 <__swsetup_r>:
    5558:	00800074 	movhi	r2,1
    555c:	defffd04 	addi	sp,sp,-12
    5560:	10906104 	addi	r2,r2,16772
    5564:	dc400115 	stw	r17,4(sp)
    5568:	2023883a 	mov	r17,r4
    556c:	11000017 	ldw	r4,0(r2)
    5570:	dc000015 	stw	r16,0(sp)
    5574:	dfc00215 	stw	ra,8(sp)
    5578:	2821883a 	mov	r16,r5
    557c:	20000226 	beq	r4,zero,5588 <__swsetup_r+0x30>
    5580:	20c00e17 	ldw	r3,56(r4)
    5584:	18002e26 	beq	r3,zero,5640 <__swsetup_r+0xe8>
    5588:	8080030b 	ldhu	r2,12(r16)
    558c:	10c0020c 	andi	r3,r2,8
    5590:	100d883a 	mov	r6,r2
    5594:	18000f26 	beq	r3,zero,55d4 <__swsetup_r+0x7c>
    5598:	80c00417 	ldw	r3,16(r16)
    559c:	18001526 	beq	r3,zero,55f4 <__swsetup_r+0x9c>
    55a0:	1100004c 	andi	r4,r2,1
    55a4:	20001c1e 	bne	r4,zero,5618 <__swsetup_r+0xc0>
    55a8:	1080008c 	andi	r2,r2,2
    55ac:	1000261e 	bne	r2,zero,5648 <__swsetup_r+0xf0>
    55b0:	80800517 	ldw	r2,20(r16)
    55b4:	80800215 	stw	r2,8(r16)
    55b8:	18001c26 	beq	r3,zero,562c <__swsetup_r+0xd4>
    55bc:	0005883a 	mov	r2,zero
    55c0:	dfc00217 	ldw	ra,8(sp)
    55c4:	dc400117 	ldw	r17,4(sp)
    55c8:	dc000017 	ldw	r16,0(sp)
    55cc:	dec00304 	addi	sp,sp,12
    55d0:	f800283a 	ret
    55d4:	3080040c 	andi	r2,r6,16
    55d8:	10001726 	beq	r2,zero,5638 <__swsetup_r+0xe0>
    55dc:	3080010c 	andi	r2,r6,4
    55e0:	10001b1e 	bne	r2,zero,5650 <__swsetup_r+0xf8>
    55e4:	80c00417 	ldw	r3,16(r16)
    55e8:	30800214 	ori	r2,r6,8
    55ec:	8080030d 	sth	r2,12(r16)
    55f0:	183feb1e 	bne	r3,zero,55a0 <__alt_data_end+0xfffafe70>
    55f4:	1140a00c 	andi	r5,r2,640
    55f8:	01008004 	movi	r4,512
    55fc:	293fe826 	beq	r5,r4,55a0 <__alt_data_end+0xfffafe70>
    5600:	8809883a 	mov	r4,r17
    5604:	800b883a 	mov	r5,r16
    5608:	00080ec0 	call	80ec <__smakebuf_r>
    560c:	8080030b 	ldhu	r2,12(r16)
    5610:	80c00417 	ldw	r3,16(r16)
    5614:	003fe206 	br	55a0 <__alt_data_end+0xfffafe70>
    5618:	80800517 	ldw	r2,20(r16)
    561c:	80000215 	stw	zero,8(r16)
    5620:	0085c83a 	sub	r2,zero,r2
    5624:	80800615 	stw	r2,24(r16)
    5628:	183fe41e 	bne	r3,zero,55bc <__alt_data_end+0xfffafe8c>
    562c:	8080030b 	ldhu	r2,12(r16)
    5630:	1080200c 	andi	r2,r2,128
    5634:	103fe226 	beq	r2,zero,55c0 <__alt_data_end+0xfffafe90>
    5638:	00bfffc4 	movi	r2,-1
    563c:	003fe006 	br	55c0 <__alt_data_end+0xfffafe90>
    5640:	00075940 	call	7594 <__sinit>
    5644:	003fd006 	br	5588 <__alt_data_end+0xfffafe58>
    5648:	0005883a 	mov	r2,zero
    564c:	003fd906 	br	55b4 <__alt_data_end+0xfffafe84>
    5650:	81400c17 	ldw	r5,48(r16)
    5654:	28000626 	beq	r5,zero,5670 <__swsetup_r+0x118>
    5658:	80801004 	addi	r2,r16,64
    565c:	28800326 	beq	r5,r2,566c <__swsetup_r+0x114>
    5660:	8809883a 	mov	r4,r17
    5664:	00077080 	call	7708 <_free_r>
    5668:	8180030b 	ldhu	r6,12(r16)
    566c:	80000c15 	stw	zero,48(r16)
    5670:	80c00417 	ldw	r3,16(r16)
    5674:	00bff6c4 	movi	r2,-37
    5678:	118c703a 	and	r6,r2,r6
    567c:	80000115 	stw	zero,4(r16)
    5680:	80c00015 	stw	r3,0(r16)
    5684:	003fd806 	br	55e8 <__alt_data_end+0xfffafeb8>

00005688 <quorem>:
    5688:	defff204 	addi	sp,sp,-56
    568c:	ddc00b15 	stw	r23,44(sp)
    5690:	20800417 	ldw	r2,16(r4)
    5694:	2dc00417 	ldw	r23,16(r5)
    5698:	dfc00d15 	stw	ra,52(sp)
    569c:	df000c15 	stw	fp,48(sp)
    56a0:	dd800a15 	stw	r22,40(sp)
    56a4:	dd400915 	stw	r21,36(sp)
    56a8:	dd000815 	stw	r20,32(sp)
    56ac:	dcc00715 	stw	r19,28(sp)
    56b0:	dc800615 	stw	r18,24(sp)
    56b4:	dc400515 	stw	r17,20(sp)
    56b8:	dc000415 	stw	r16,16(sp)
    56bc:	15c07a16 	blt	r2,r23,58a8 <quorem+0x220>
    56c0:	bdffffc4 	addi	r23,r23,-1
    56c4:	bde9883a 	add	r20,r23,r23
    56c8:	28c00504 	addi	r3,r5,20
    56cc:	a529883a 	add	r20,r20,r20
    56d0:	1d39883a 	add	fp,r3,r20
    56d4:	24c00504 	addi	r19,r4,20
    56d8:	d9400215 	stw	r5,8(sp)
    56dc:	9d29883a 	add	r20,r19,r20
    56e0:	e1400017 	ldw	r5,0(fp)
    56e4:	d9000015 	stw	r4,0(sp)
    56e8:	a1000017 	ldw	r4,0(r20)
    56ec:	29400044 	addi	r5,r5,1
    56f0:	d8c00115 	stw	r3,4(sp)
    56f4:	dd000315 	stw	r20,12(sp)
    56f8:	000cba00 	call	cba0 <__udivsi3>
    56fc:	1025883a 	mov	r18,r2
    5700:	10003026 	beq	r2,zero,57c4 <quorem+0x13c>
    5704:	dc400117 	ldw	r17,4(sp)
    5708:	9829883a 	mov	r20,r19
    570c:	002d883a 	mov	r22,zero
    5710:	0021883a 	mov	r16,zero
    5714:	8d400017 	ldw	r21,0(r17)
    5718:	900b883a 	mov	r5,r18
    571c:	8c400104 	addi	r17,r17,4
    5720:	a93fffcc 	andi	r4,r21,65535
    5724:	000cbb00 	call	cbb0 <__mulsi3>
    5728:	a808d43a 	srli	r4,r21,16
    572c:	900b883a 	mov	r5,r18
    5730:	b0ad883a 	add	r22,r22,r2
    5734:	000cbb00 	call	cbb0 <__mulsi3>
    5738:	a1000017 	ldw	r4,0(r20)
    573c:	b00cd43a 	srli	r6,r22,16
    5740:	b0ffffcc 	andi	r3,r22,65535
    5744:	217fffcc 	andi	r5,r4,65535
    5748:	2c21883a 	add	r16,r5,r16
    574c:	80c7c83a 	sub	r3,r16,r3
    5750:	2008d43a 	srli	r4,r4,16
    5754:	3085883a 	add	r2,r6,r2
    5758:	1821d43a 	srai	r16,r3,16
    575c:	117fffcc 	andi	r5,r2,65535
    5760:	2149c83a 	sub	r4,r4,r5
    5764:	2421883a 	add	r16,r4,r16
    5768:	8008943a 	slli	r4,r16,16
    576c:	18ffffcc 	andi	r3,r3,65535
    5770:	102cd43a 	srli	r22,r2,16
    5774:	20c8b03a 	or	r4,r4,r3
    5778:	a1000015 	stw	r4,0(r20)
    577c:	8021d43a 	srai	r16,r16,16
    5780:	a5000104 	addi	r20,r20,4
    5784:	e47fe32e 	bgeu	fp,r17,5714 <__alt_data_end+0xfffaffe4>
    5788:	d8c00317 	ldw	r3,12(sp)
    578c:	18800017 	ldw	r2,0(r3)
    5790:	10000c1e 	bne	r2,zero,57c4 <quorem+0x13c>
    5794:	18bfff04 	addi	r2,r3,-4
    5798:	9880082e 	bgeu	r19,r2,57bc <quorem+0x134>
    579c:	18ffff17 	ldw	r3,-4(r3)
    57a0:	18000326 	beq	r3,zero,57b0 <quorem+0x128>
    57a4:	00000506 	br	57bc <quorem+0x134>
    57a8:	10c00017 	ldw	r3,0(r2)
    57ac:	1800031e 	bne	r3,zero,57bc <quorem+0x134>
    57b0:	10bfff04 	addi	r2,r2,-4
    57b4:	bdffffc4 	addi	r23,r23,-1
    57b8:	98bffb36 	bltu	r19,r2,57a8 <__alt_data_end+0xfffb0078>
    57bc:	d8c00017 	ldw	r3,0(sp)
    57c0:	1dc00415 	stw	r23,16(r3)
    57c4:	d9000017 	ldw	r4,0(sp)
    57c8:	d9400217 	ldw	r5,8(sp)
    57cc:	00090c00 	call	90c0 <__mcmp>
    57d0:	10002816 	blt	r2,zero,5874 <quorem+0x1ec>
    57d4:	dc400117 	ldw	r17,4(sp)
    57d8:	94800044 	addi	r18,r18,1
    57dc:	980d883a 	mov	r6,r19
    57e0:	0007883a 	mov	r3,zero
    57e4:	31000017 	ldw	r4,0(r6)
    57e8:	89400017 	ldw	r5,0(r17)
    57ec:	31800104 	addi	r6,r6,4
    57f0:	20bfffcc 	andi	r2,r4,65535
    57f4:	10c7883a 	add	r3,r2,r3
    57f8:	28bfffcc 	andi	r2,r5,65535
    57fc:	1885c83a 	sub	r2,r3,r2
    5800:	280ad43a 	srli	r5,r5,16
    5804:	2008d43a 	srli	r4,r4,16
    5808:	1007d43a 	srai	r3,r2,16
    580c:	10bfffcc 	andi	r2,r2,65535
    5810:	2149c83a 	sub	r4,r4,r5
    5814:	20c9883a 	add	r4,r4,r3
    5818:	200a943a 	slli	r5,r4,16
    581c:	8c400104 	addi	r17,r17,4
    5820:	2007d43a 	srai	r3,r4,16
    5824:	2884b03a 	or	r2,r5,r2
    5828:	30bfff15 	stw	r2,-4(r6)
    582c:	e47fed2e 	bgeu	fp,r17,57e4 <__alt_data_end+0xfffb00b4>
    5830:	bdc5883a 	add	r2,r23,r23
    5834:	1085883a 	add	r2,r2,r2
    5838:	9887883a 	add	r3,r19,r2
    583c:	18800017 	ldw	r2,0(r3)
    5840:	10000c1e 	bne	r2,zero,5874 <quorem+0x1ec>
    5844:	18bfff04 	addi	r2,r3,-4
    5848:	9880082e 	bgeu	r19,r2,586c <quorem+0x1e4>
    584c:	18ffff17 	ldw	r3,-4(r3)
    5850:	18000326 	beq	r3,zero,5860 <quorem+0x1d8>
    5854:	00000506 	br	586c <quorem+0x1e4>
    5858:	10c00017 	ldw	r3,0(r2)
    585c:	1800031e 	bne	r3,zero,586c <quorem+0x1e4>
    5860:	10bfff04 	addi	r2,r2,-4
    5864:	bdffffc4 	addi	r23,r23,-1
    5868:	98bffb36 	bltu	r19,r2,5858 <__alt_data_end+0xfffb0128>
    586c:	d8c00017 	ldw	r3,0(sp)
    5870:	1dc00415 	stw	r23,16(r3)
    5874:	9005883a 	mov	r2,r18
    5878:	dfc00d17 	ldw	ra,52(sp)
    587c:	df000c17 	ldw	fp,48(sp)
    5880:	ddc00b17 	ldw	r23,44(sp)
    5884:	dd800a17 	ldw	r22,40(sp)
    5888:	dd400917 	ldw	r21,36(sp)
    588c:	dd000817 	ldw	r20,32(sp)
    5890:	dcc00717 	ldw	r19,28(sp)
    5894:	dc800617 	ldw	r18,24(sp)
    5898:	dc400517 	ldw	r17,20(sp)
    589c:	dc000417 	ldw	r16,16(sp)
    58a0:	dec00e04 	addi	sp,sp,56
    58a4:	f800283a 	ret
    58a8:	0005883a 	mov	r2,zero
    58ac:	003ff206 	br	5878 <__alt_data_end+0xfffb0148>

000058b0 <_dtoa_r>:
    58b0:	20801017 	ldw	r2,64(r4)
    58b4:	deffde04 	addi	sp,sp,-136
    58b8:	dd401d15 	stw	r21,116(sp)
    58bc:	dcc01b15 	stw	r19,108(sp)
    58c0:	dc801a15 	stw	r18,104(sp)
    58c4:	dc401915 	stw	r17,100(sp)
    58c8:	dc001815 	stw	r16,96(sp)
    58cc:	dfc02115 	stw	ra,132(sp)
    58d0:	df002015 	stw	fp,128(sp)
    58d4:	ddc01f15 	stw	r23,124(sp)
    58d8:	dd801e15 	stw	r22,120(sp)
    58dc:	dd001c15 	stw	r20,112(sp)
    58e0:	d9c00315 	stw	r7,12(sp)
    58e4:	2021883a 	mov	r16,r4
    58e8:	302b883a 	mov	r21,r6
    58ec:	2825883a 	mov	r18,r5
    58f0:	dc402417 	ldw	r17,144(sp)
    58f4:	3027883a 	mov	r19,r6
    58f8:	10000826 	beq	r2,zero,591c <_dtoa_r+0x6c>
    58fc:	21801117 	ldw	r6,68(r4)
    5900:	00c00044 	movi	r3,1
    5904:	100b883a 	mov	r5,r2
    5908:	1986983a 	sll	r3,r3,r6
    590c:	11800115 	stw	r6,4(r2)
    5910:	10c00215 	stw	r3,8(r2)
    5914:	00087ec0 	call	87ec <_Bfree>
    5918:	80001015 	stw	zero,64(r16)
    591c:	a8002d16 	blt	r21,zero,59d4 <_dtoa_r+0x124>
    5920:	88000015 	stw	zero,0(r17)
    5924:	a8dffc2c 	andhi	r3,r21,32752
    5928:	009ffc34 	movhi	r2,32752
    592c:	18801b26 	beq	r3,r2,599c <_dtoa_r+0xec>
    5930:	9009883a 	mov	r4,r18
    5934:	980b883a 	mov	r5,r19
    5938:	000d883a 	mov	r6,zero
    593c:	000f883a 	mov	r7,zero
    5940:	000ddf40 	call	ddf4 <__eqdf2>
    5944:	10002a1e 	bne	r2,zero,59f0 <_dtoa_r+0x140>
    5948:	d8c02317 	ldw	r3,140(sp)
    594c:	d9002517 	ldw	r4,148(sp)
    5950:	00800044 	movi	r2,1
    5954:	18800015 	stw	r2,0(r3)
    5958:	2001a226 	beq	r4,zero,5fe4 <_dtoa_r+0x734>
    595c:	00800074 	movhi	r2,1
    5960:	10890444 	addi	r2,r2,9233
    5964:	20800015 	stw	r2,0(r4)
    5968:	10bfffc4 	addi	r2,r2,-1
    596c:	dfc02117 	ldw	ra,132(sp)
    5970:	df002017 	ldw	fp,128(sp)
    5974:	ddc01f17 	ldw	r23,124(sp)
    5978:	dd801e17 	ldw	r22,120(sp)
    597c:	dd401d17 	ldw	r21,116(sp)
    5980:	dd001c17 	ldw	r20,112(sp)
    5984:	dcc01b17 	ldw	r19,108(sp)
    5988:	dc801a17 	ldw	r18,104(sp)
    598c:	dc401917 	ldw	r17,100(sp)
    5990:	dc001817 	ldw	r16,96(sp)
    5994:	dec02204 	addi	sp,sp,136
    5998:	f800283a 	ret
    599c:	d8c02317 	ldw	r3,140(sp)
    59a0:	0089c3c4 	movi	r2,9999
    59a4:	18800015 	stw	r2,0(r3)
    59a8:	90017c26 	beq	r18,zero,5f9c <_dtoa_r+0x6ec>
    59ac:	00800074 	movhi	r2,1
    59b0:	10891004 	addi	r2,r2,9280
    59b4:	d9002517 	ldw	r4,148(sp)
    59b8:	203fec26 	beq	r4,zero,596c <__alt_data_end+0xfffb023c>
    59bc:	10c000c7 	ldb	r3,3(r2)
    59c0:	18017d1e 	bne	r3,zero,5fb8 <_dtoa_r+0x708>
    59c4:	10c000c4 	addi	r3,r2,3
    59c8:	d9802517 	ldw	r6,148(sp)
    59cc:	30c00015 	stw	r3,0(r6)
    59d0:	003fe606 	br	596c <__alt_data_end+0xfffb023c>
    59d4:	04e00034 	movhi	r19,32768
    59d8:	9cffffc4 	addi	r19,r19,-1
    59dc:	00800044 	movi	r2,1
    59e0:	ace6703a 	and	r19,r21,r19
    59e4:	88800015 	stw	r2,0(r17)
    59e8:	982b883a 	mov	r21,r19
    59ec:	003fcd06 	br	5924 <__alt_data_end+0xfffb01f4>
    59f0:	d8800204 	addi	r2,sp,8
    59f4:	a822d53a 	srli	r17,r21,20
    59f8:	d8800015 	stw	r2,0(sp)
    59fc:	8009883a 	mov	r4,r16
    5a00:	900b883a 	mov	r5,r18
    5a04:	980d883a 	mov	r6,r19
    5a08:	d9c00104 	addi	r7,sp,4
    5a0c:	00094340 	call	9434 <__d2b>
    5a10:	1039883a 	mov	fp,r2
    5a14:	88016a1e 	bne	r17,zero,5fc0 <_dtoa_r+0x710>
    5a18:	dd000217 	ldw	r20,8(sp)
    5a1c:	dc400117 	ldw	r17,4(sp)
    5a20:	00befbc4 	movi	r2,-1041
    5a24:	a463883a 	add	r17,r20,r17
    5a28:	8882ea16 	blt	r17,r2,65d4 <_dtoa_r+0xd24>
    5a2c:	00bf0384 	movi	r2,-1010
    5a30:	1445c83a 	sub	r2,r2,r17
    5a34:	89010484 	addi	r4,r17,1042
    5a38:	a8aa983a 	sll	r21,r21,r2
    5a3c:	9108d83a 	srl	r4,r18,r4
    5a40:	a908b03a 	or	r4,r21,r4
    5a44:	000f2cc0 	call	f2cc <__floatunsidf>
    5a48:	017f8434 	movhi	r5,65040
    5a4c:	01800044 	movi	r6,1
    5a50:	1009883a 	mov	r4,r2
    5a54:	194b883a 	add	r5,r3,r5
    5a58:	8c7fffc4 	addi	r17,r17,-1
    5a5c:	d9800f15 	stw	r6,60(sp)
    5a60:	000d883a 	mov	r6,zero
    5a64:	01cffe34 	movhi	r7,16376
    5a68:	000e8a40 	call	e8a4 <__subdf3>
    5a6c:	0198dbf4 	movhi	r6,25455
    5a70:	01cff4f4 	movhi	r7,16339
    5a74:	1009883a 	mov	r4,r2
    5a78:	180b883a 	mov	r5,r3
    5a7c:	3190d844 	addi	r6,r6,17249
    5a80:	39e1e9c4 	addi	r7,r7,-30809
    5a84:	000e0380 	call	e038 <__muldf3>
    5a88:	01a2d874 	movhi	r6,35681
    5a8c:	01cff1f4 	movhi	r7,16327
    5a90:	180b883a 	mov	r5,r3
    5a94:	31b22cc4 	addi	r6,r6,-14157
    5a98:	39e28a04 	addi	r7,r7,-30168
    5a9c:	1009883a 	mov	r4,r2
    5aa0:	000cbd80 	call	cbd8 <__adddf3>
    5aa4:	8809883a 	mov	r4,r17
    5aa8:	102d883a 	mov	r22,r2
    5aac:	182b883a 	mov	r21,r3
    5ab0:	000f1fc0 	call	f1fc <__floatsidf>
    5ab4:	019427f4 	movhi	r6,20639
    5ab8:	01cff4f4 	movhi	r7,16339
    5abc:	1009883a 	mov	r4,r2
    5ac0:	180b883a 	mov	r5,r3
    5ac4:	319e7ec4 	addi	r6,r6,31227
    5ac8:	39d104c4 	addi	r7,r7,17427
    5acc:	000e0380 	call	e038 <__muldf3>
    5ad0:	b009883a 	mov	r4,r22
    5ad4:	a80b883a 	mov	r5,r21
    5ad8:	100d883a 	mov	r6,r2
    5adc:	180f883a 	mov	r7,r3
    5ae0:	000cbd80 	call	cbd8 <__adddf3>
    5ae4:	1009883a 	mov	r4,r2
    5ae8:	180b883a 	mov	r5,r3
    5aec:	102d883a 	mov	r22,r2
    5af0:	182b883a 	mov	r21,r3
    5af4:	000f1740 	call	f174 <__fixdfsi>
    5af8:	b009883a 	mov	r4,r22
    5afc:	a80b883a 	mov	r5,r21
    5b00:	000d883a 	mov	r6,zero
    5b04:	000f883a 	mov	r7,zero
    5b08:	d8800515 	stw	r2,20(sp)
    5b0c:	000df580 	call	df58 <__ledf2>
    5b10:	10023116 	blt	r2,zero,63d8 <_dtoa_r+0xb28>
    5b14:	d8c00517 	ldw	r3,20(sp)
    5b18:	00800584 	movi	r2,22
    5b1c:	10c21f36 	bltu	r2,r3,639c <_dtoa_r+0xaec>
    5b20:	180490fa 	slli	r2,r3,3
    5b24:	00c00074 	movhi	r3,1
    5b28:	18c92c04 	addi	r3,r3,9392
    5b2c:	1885883a 	add	r2,r3,r2
    5b30:	11000017 	ldw	r4,0(r2)
    5b34:	11400117 	ldw	r5,4(r2)
    5b38:	900d883a 	mov	r6,r18
    5b3c:	980f883a 	mov	r7,r19
    5b40:	000de780 	call	de78 <__gedf2>
    5b44:	0082a70e 	bge	zero,r2,65e4 <_dtoa_r+0xd34>
    5b48:	d9000517 	ldw	r4,20(sp)
    5b4c:	d8000c15 	stw	zero,48(sp)
    5b50:	213fffc4 	addi	r4,r4,-1
    5b54:	d9000515 	stw	r4,20(sp)
    5b58:	a463c83a 	sub	r17,r20,r17
    5b5c:	8dbfffc4 	addi	r22,r17,-1
    5b60:	b0021916 	blt	r22,zero,63c8 <_dtoa_r+0xb18>
    5b64:	d8000815 	stw	zero,32(sp)
    5b68:	d8800517 	ldw	r2,20(sp)
    5b6c:	10020e16 	blt	r2,zero,63a8 <_dtoa_r+0xaf8>
    5b70:	b0ad883a 	add	r22,r22,r2
    5b74:	d8800a15 	stw	r2,40(sp)
    5b78:	d8000915 	stw	zero,36(sp)
    5b7c:	d8c00317 	ldw	r3,12(sp)
    5b80:	00800244 	movi	r2,9
    5b84:	10c11a36 	bltu	r2,r3,5ff0 <_dtoa_r+0x740>
    5b88:	00800144 	movi	r2,5
    5b8c:	10c4fc0e 	bge	r2,r3,6f80 <_dtoa_r+0x16d0>
    5b90:	18ffff04 	addi	r3,r3,-4
    5b94:	d8c00315 	stw	r3,12(sp)
    5b98:	0029883a 	mov	r20,zero
    5b9c:	d9800317 	ldw	r6,12(sp)
    5ba0:	008000c4 	movi	r2,3
    5ba4:	3083bd26 	beq	r6,r2,6a9c <_dtoa_r+0x11ec>
    5ba8:	1183670e 	bge	r2,r6,6948 <_dtoa_r+0x1098>
    5bac:	d8c00317 	ldw	r3,12(sp)
    5bb0:	00800104 	movi	r2,4
    5bb4:	1882e726 	beq	r3,r2,6754 <_dtoa_r+0xea4>
    5bb8:	00800144 	movi	r2,5
    5bbc:	1884f21e 	bne	r3,r2,6f88 <_dtoa_r+0x16d8>
    5bc0:	00800044 	movi	r2,1
    5bc4:	d8800b15 	stw	r2,44(sp)
    5bc8:	d8c02217 	ldw	r3,136(sp)
    5bcc:	d9000517 	ldw	r4,20(sp)
    5bd0:	1907883a 	add	r3,r3,r4
    5bd4:	19800044 	addi	r6,r3,1
    5bd8:	d8c00d15 	stw	r3,52(sp)
    5bdc:	d9800615 	stw	r6,24(sp)
    5be0:	0183c30e 	bge	zero,r6,6af0 <_dtoa_r+0x1240>
    5be4:	d9800617 	ldw	r6,24(sp)
    5be8:	3023883a 	mov	r17,r6
    5bec:	80001115 	stw	zero,68(r16)
    5bf0:	008005c4 	movi	r2,23
    5bf4:	1184f62e 	bgeu	r2,r6,6fd0 <_dtoa_r+0x1720>
    5bf8:	00c00044 	movi	r3,1
    5bfc:	00800104 	movi	r2,4
    5c00:	1085883a 	add	r2,r2,r2
    5c04:	11000504 	addi	r4,r2,20
    5c08:	180b883a 	mov	r5,r3
    5c0c:	18c00044 	addi	r3,r3,1
    5c10:	313ffb2e 	bgeu	r6,r4,5c00 <__alt_data_end+0xfffb04d0>
    5c14:	81401115 	stw	r5,68(r16)
    5c18:	8009883a 	mov	r4,r16
    5c1c:	00087440 	call	8744 <_Balloc>
    5c20:	d8800715 	stw	r2,28(sp)
    5c24:	80801015 	stw	r2,64(r16)
    5c28:	00800384 	movi	r2,14
    5c2c:	1440fd36 	bltu	r2,r17,6024 <_dtoa_r+0x774>
    5c30:	a000fc26 	beq	r20,zero,6024 <_dtoa_r+0x774>
    5c34:	d8800517 	ldw	r2,20(sp)
    5c38:	0083b90e 	bge	zero,r2,6b20 <_dtoa_r+0x1270>
    5c3c:	d8c00517 	ldw	r3,20(sp)
    5c40:	108003cc 	andi	r2,r2,15
    5c44:	100490fa 	slli	r2,r2,3
    5c48:	182fd13a 	srai	r23,r3,4
    5c4c:	00c00074 	movhi	r3,1
    5c50:	18c92c04 	addi	r3,r3,9392
    5c54:	1885883a 	add	r2,r3,r2
    5c58:	b8c0040c 	andi	r3,r23,16
    5c5c:	12c00017 	ldw	r11,0(r2)
    5c60:	12800117 	ldw	r10,4(r2)
    5c64:	18039726 	beq	r3,zero,6ac4 <_dtoa_r+0x1214>
    5c68:	00800074 	movhi	r2,1
    5c6c:	10892204 	addi	r2,r2,9352
    5c70:	11800817 	ldw	r6,32(r2)
    5c74:	11c00917 	ldw	r7,36(r2)
    5c78:	9009883a 	mov	r4,r18
    5c7c:	980b883a 	mov	r5,r19
    5c80:	da801615 	stw	r10,88(sp)
    5c84:	dac01515 	stw	r11,84(sp)
    5c88:	000d4740 	call	d474 <__divdf3>
    5c8c:	da801617 	ldw	r10,88(sp)
    5c90:	dac01517 	ldw	r11,84(sp)
    5c94:	bdc003cc 	andi	r23,r23,15
    5c98:	044000c4 	movi	r17,3
    5c9c:	d8800e15 	stw	r2,56(sp)
    5ca0:	182b883a 	mov	r21,r3
    5ca4:	b8001126 	beq	r23,zero,5cec <_dtoa_r+0x43c>
    5ca8:	05000074 	movhi	r20,1
    5cac:	a5092204 	addi	r20,r20,9352
    5cb0:	5805883a 	mov	r2,r11
    5cb4:	5007883a 	mov	r3,r10
    5cb8:	b980004c 	andi	r6,r23,1
    5cbc:	1009883a 	mov	r4,r2
    5cc0:	b82fd07a 	srai	r23,r23,1
    5cc4:	180b883a 	mov	r5,r3
    5cc8:	30000426 	beq	r6,zero,5cdc <_dtoa_r+0x42c>
    5ccc:	a1800017 	ldw	r6,0(r20)
    5cd0:	a1c00117 	ldw	r7,4(r20)
    5cd4:	8c400044 	addi	r17,r17,1
    5cd8:	000e0380 	call	e038 <__muldf3>
    5cdc:	a5000204 	addi	r20,r20,8
    5ce0:	b83ff51e 	bne	r23,zero,5cb8 <__alt_data_end+0xfffb0588>
    5ce4:	1017883a 	mov	r11,r2
    5ce8:	1815883a 	mov	r10,r3
    5cec:	d9000e17 	ldw	r4,56(sp)
    5cf0:	a80b883a 	mov	r5,r21
    5cf4:	580d883a 	mov	r6,r11
    5cf8:	500f883a 	mov	r7,r10
    5cfc:	000d4740 	call	d474 <__divdf3>
    5d00:	1029883a 	mov	r20,r2
    5d04:	182b883a 	mov	r21,r3
    5d08:	d9800c17 	ldw	r6,48(sp)
    5d0c:	30000626 	beq	r6,zero,5d28 <_dtoa_r+0x478>
    5d10:	a009883a 	mov	r4,r20
    5d14:	a80b883a 	mov	r5,r21
    5d18:	000d883a 	mov	r6,zero
    5d1c:	01cffc34 	movhi	r7,16368
    5d20:	000df580 	call	df58 <__ledf2>
    5d24:	10043216 	blt	r2,zero,6df0 <_dtoa_r+0x1540>
    5d28:	8809883a 	mov	r4,r17
    5d2c:	000f1fc0 	call	f1fc <__floatsidf>
    5d30:	1009883a 	mov	r4,r2
    5d34:	180b883a 	mov	r5,r3
    5d38:	a00d883a 	mov	r6,r20
    5d3c:	a80f883a 	mov	r7,r21
    5d40:	000e0380 	call	e038 <__muldf3>
    5d44:	000d883a 	mov	r6,zero
    5d48:	1009883a 	mov	r4,r2
    5d4c:	180b883a 	mov	r5,r3
    5d50:	01d00734 	movhi	r7,16412
    5d54:	000cbd80 	call	cbd8 <__adddf3>
    5d58:	1023883a 	mov	r17,r2
    5d5c:	d9800617 	ldw	r6,24(sp)
    5d60:	00bf3034 	movhi	r2,64704
    5d64:	1885883a 	add	r2,r3,r2
    5d68:	d8800e15 	stw	r2,56(sp)
    5d6c:	30032e26 	beq	r6,zero,6a28 <_dtoa_r+0x1178>
    5d70:	d8c00517 	ldw	r3,20(sp)
    5d74:	da800617 	ldw	r10,24(sp)
    5d78:	d8c01215 	stw	r3,72(sp)
    5d7c:	d9000b17 	ldw	r4,44(sp)
    5d80:	2003b026 	beq	r4,zero,6c44 <_dtoa_r+0x1394>
    5d84:	50bfffc4 	addi	r2,r10,-1
    5d88:	100490fa 	slli	r2,r2,3
    5d8c:	00c00074 	movhi	r3,1
    5d90:	18c92c04 	addi	r3,r3,9392
    5d94:	1885883a 	add	r2,r3,r2
    5d98:	11800017 	ldw	r6,0(r2)
    5d9c:	11c00117 	ldw	r7,4(r2)
    5da0:	d8800717 	ldw	r2,28(sp)
    5da4:	0009883a 	mov	r4,zero
    5da8:	014ff834 	movhi	r5,16352
    5dac:	da801615 	stw	r10,88(sp)
    5db0:	15c00044 	addi	r23,r2,1
    5db4:	000d4740 	call	d474 <__divdf3>
    5db8:	d9c00e17 	ldw	r7,56(sp)
    5dbc:	880d883a 	mov	r6,r17
    5dc0:	1009883a 	mov	r4,r2
    5dc4:	180b883a 	mov	r5,r3
    5dc8:	000e8a40 	call	e8a4 <__subdf3>
    5dcc:	a80b883a 	mov	r5,r21
    5dd0:	a009883a 	mov	r4,r20
    5dd4:	d8c01015 	stw	r3,64(sp)
    5dd8:	d8800e15 	stw	r2,56(sp)
    5ddc:	000f1740 	call	f174 <__fixdfsi>
    5de0:	1009883a 	mov	r4,r2
    5de4:	d8801715 	stw	r2,92(sp)
    5de8:	000f1fc0 	call	f1fc <__floatsidf>
    5dec:	a009883a 	mov	r4,r20
    5df0:	a80b883a 	mov	r5,r21
    5df4:	100d883a 	mov	r6,r2
    5df8:	180f883a 	mov	r7,r3
    5dfc:	000e8a40 	call	e8a4 <__subdf3>
    5e00:	da001717 	ldw	r8,92(sp)
    5e04:	1829883a 	mov	r20,r3
    5e08:	d8c00717 	ldw	r3,28(sp)
    5e0c:	d9000e17 	ldw	r4,56(sp)
    5e10:	d9401017 	ldw	r5,64(sp)
    5e14:	42000c04 	addi	r8,r8,48
    5e18:	1023883a 	mov	r17,r2
    5e1c:	1a000005 	stb	r8,0(r3)
    5e20:	880d883a 	mov	r6,r17
    5e24:	a00f883a 	mov	r7,r20
    5e28:	402b883a 	mov	r21,r8
    5e2c:	000de780 	call	de78 <__gedf2>
    5e30:	00844516 	blt	zero,r2,6f48 <_dtoa_r+0x1698>
    5e34:	0009883a 	mov	r4,zero
    5e38:	014ffc34 	movhi	r5,16368
    5e3c:	880d883a 	mov	r6,r17
    5e40:	a00f883a 	mov	r7,r20
    5e44:	000e8a40 	call	e8a4 <__subdf3>
    5e48:	d9000e17 	ldw	r4,56(sp)
    5e4c:	d9401017 	ldw	r5,64(sp)
    5e50:	100d883a 	mov	r6,r2
    5e54:	180f883a 	mov	r7,r3
    5e58:	000de780 	call	de78 <__gedf2>
    5e5c:	da801617 	ldw	r10,88(sp)
    5e60:	00843616 	blt	zero,r2,6f3c <_dtoa_r+0x168c>
    5e64:	00800044 	movi	r2,1
    5e68:	12806e0e 	bge	r2,r10,6024 <_dtoa_r+0x774>
    5e6c:	d9000717 	ldw	r4,28(sp)
    5e70:	dd801315 	stw	r22,76(sp)
    5e74:	dc001115 	stw	r16,68(sp)
    5e78:	2295883a 	add	r10,r4,r10
    5e7c:	dcc01415 	stw	r19,80(sp)
    5e80:	502d883a 	mov	r22,r10
    5e84:	dcc01017 	ldw	r19,64(sp)
    5e88:	b821883a 	mov	r16,r23
    5e8c:	dc801015 	stw	r18,64(sp)
    5e90:	dc800e17 	ldw	r18,56(sp)
    5e94:	00000906 	br	5ebc <_dtoa_r+0x60c>
    5e98:	000e8a40 	call	e8a4 <__subdf3>
    5e9c:	1009883a 	mov	r4,r2
    5ea0:	180b883a 	mov	r5,r3
    5ea4:	900d883a 	mov	r6,r18
    5ea8:	980f883a 	mov	r7,r19
    5eac:	000df580 	call	df58 <__ledf2>
    5eb0:	10040e16 	blt	r2,zero,6eec <_dtoa_r+0x163c>
    5eb4:	b821883a 	mov	r16,r23
    5eb8:	bd841026 	beq	r23,r22,6efc <_dtoa_r+0x164c>
    5ebc:	9009883a 	mov	r4,r18
    5ec0:	980b883a 	mov	r5,r19
    5ec4:	000d883a 	mov	r6,zero
    5ec8:	01d00934 	movhi	r7,16420
    5ecc:	000e0380 	call	e038 <__muldf3>
    5ed0:	000d883a 	mov	r6,zero
    5ed4:	01d00934 	movhi	r7,16420
    5ed8:	8809883a 	mov	r4,r17
    5edc:	a00b883a 	mov	r5,r20
    5ee0:	1025883a 	mov	r18,r2
    5ee4:	1827883a 	mov	r19,r3
    5ee8:	000e0380 	call	e038 <__muldf3>
    5eec:	180b883a 	mov	r5,r3
    5ef0:	1009883a 	mov	r4,r2
    5ef4:	1823883a 	mov	r17,r3
    5ef8:	1029883a 	mov	r20,r2
    5efc:	000f1740 	call	f174 <__fixdfsi>
    5f00:	1009883a 	mov	r4,r2
    5f04:	102b883a 	mov	r21,r2
    5f08:	000f1fc0 	call	f1fc <__floatsidf>
    5f0c:	a009883a 	mov	r4,r20
    5f10:	880b883a 	mov	r5,r17
    5f14:	100d883a 	mov	r6,r2
    5f18:	180f883a 	mov	r7,r3
    5f1c:	000e8a40 	call	e8a4 <__subdf3>
    5f20:	ad400c04 	addi	r21,r21,48
    5f24:	1009883a 	mov	r4,r2
    5f28:	180b883a 	mov	r5,r3
    5f2c:	900d883a 	mov	r6,r18
    5f30:	980f883a 	mov	r7,r19
    5f34:	85400005 	stb	r21,0(r16)
    5f38:	1023883a 	mov	r17,r2
    5f3c:	1829883a 	mov	r20,r3
    5f40:	000df580 	call	df58 <__ledf2>
    5f44:	bdc00044 	addi	r23,r23,1
    5f48:	0009883a 	mov	r4,zero
    5f4c:	014ffc34 	movhi	r5,16368
    5f50:	880d883a 	mov	r6,r17
    5f54:	a00f883a 	mov	r7,r20
    5f58:	103fcf0e 	bge	r2,zero,5e98 <__alt_data_end+0xfffb0768>
    5f5c:	d9801217 	ldw	r6,72(sp)
    5f60:	dc001117 	ldw	r16,68(sp)
    5f64:	d9800515 	stw	r6,20(sp)
    5f68:	8009883a 	mov	r4,r16
    5f6c:	e00b883a 	mov	r5,fp
    5f70:	00087ec0 	call	87ec <_Bfree>
    5f74:	d8c00517 	ldw	r3,20(sp)
    5f78:	d9002317 	ldw	r4,140(sp)
    5f7c:	d9802517 	ldw	r6,148(sp)
    5f80:	b8000005 	stb	zero,0(r23)
    5f84:	18800044 	addi	r2,r3,1
    5f88:	20800015 	stw	r2,0(r4)
    5f8c:	30027226 	beq	r6,zero,6958 <_dtoa_r+0x10a8>
    5f90:	35c00015 	stw	r23,0(r6)
    5f94:	d8800717 	ldw	r2,28(sp)
    5f98:	003e7406 	br	596c <__alt_data_end+0xfffb023c>
    5f9c:	00800434 	movhi	r2,16
    5fa0:	10bfffc4 	addi	r2,r2,-1
    5fa4:	a8aa703a 	and	r21,r21,r2
    5fa8:	a83e801e 	bne	r21,zero,59ac <__alt_data_end+0xfffb027c>
    5fac:	00800074 	movhi	r2,1
    5fb0:	10890d04 	addi	r2,r2,9268
    5fb4:	003e7f06 	br	59b4 <__alt_data_end+0xfffb0284>
    5fb8:	10c00204 	addi	r3,r2,8
    5fbc:	003e8206 	br	59c8 <__alt_data_end+0xfffb0298>
    5fc0:	01400434 	movhi	r5,16
    5fc4:	297fffc4 	addi	r5,r5,-1
    5fc8:	994a703a 	and	r5,r19,r5
    5fcc:	9009883a 	mov	r4,r18
    5fd0:	8c7f0044 	addi	r17,r17,-1023
    5fd4:	294ffc34 	orhi	r5,r5,16368
    5fd8:	dd000217 	ldw	r20,8(sp)
    5fdc:	d8000f15 	stw	zero,60(sp)
    5fe0:	003e9f06 	br	5a60 <__alt_data_end+0xfffb0330>
    5fe4:	00800074 	movhi	r2,1
    5fe8:	10890404 	addi	r2,r2,9232
    5fec:	003e5f06 	br	596c <__alt_data_end+0xfffb023c>
    5ff0:	80001115 	stw	zero,68(r16)
    5ff4:	8009883a 	mov	r4,r16
    5ff8:	000b883a 	mov	r5,zero
    5ffc:	00087440 	call	8744 <_Balloc>
    6000:	01bfffc4 	movi	r6,-1
    6004:	d8800715 	stw	r2,28(sp)
    6008:	80801015 	stw	r2,64(r16)
    600c:	00800044 	movi	r2,1
    6010:	d9800615 	stw	r6,24(sp)
    6014:	d8800b15 	stw	r2,44(sp)
    6018:	d8002215 	stw	zero,136(sp)
    601c:	d9800d15 	stw	r6,52(sp)
    6020:	d8000315 	stw	zero,12(sp)
    6024:	d8800117 	ldw	r2,4(sp)
    6028:	10008e16 	blt	r2,zero,6264 <_dtoa_r+0x9b4>
    602c:	d9000517 	ldw	r4,20(sp)
    6030:	00c00384 	movi	r3,14
    6034:	19008b16 	blt	r3,r4,6264 <_dtoa_r+0x9b4>
    6038:	200490fa 	slli	r2,r4,3
    603c:	00c00074 	movhi	r3,1
    6040:	d9802217 	ldw	r6,136(sp)
    6044:	18c92c04 	addi	r3,r3,9392
    6048:	1885883a 	add	r2,r3,r2
    604c:	14400017 	ldw	r17,0(r2)
    6050:	15000117 	ldw	r20,4(r2)
    6054:	3001c716 	blt	r6,zero,6774 <_dtoa_r+0xec4>
    6058:	880d883a 	mov	r6,r17
    605c:	a00f883a 	mov	r7,r20
    6060:	9009883a 	mov	r4,r18
    6064:	980b883a 	mov	r5,r19
    6068:	000d4740 	call	d474 <__divdf3>
    606c:	180b883a 	mov	r5,r3
    6070:	1009883a 	mov	r4,r2
    6074:	000f1740 	call	f174 <__fixdfsi>
    6078:	1009883a 	mov	r4,r2
    607c:	102d883a 	mov	r22,r2
    6080:	000f1fc0 	call	f1fc <__floatsidf>
    6084:	1009883a 	mov	r4,r2
    6088:	180b883a 	mov	r5,r3
    608c:	880d883a 	mov	r6,r17
    6090:	a00f883a 	mov	r7,r20
    6094:	000e0380 	call	e038 <__muldf3>
    6098:	9009883a 	mov	r4,r18
    609c:	980b883a 	mov	r5,r19
    60a0:	100d883a 	mov	r6,r2
    60a4:	180f883a 	mov	r7,r3
    60a8:	000e8a40 	call	e8a4 <__subdf3>
    60ac:	d9000717 	ldw	r4,28(sp)
    60b0:	d9800617 	ldw	r6,24(sp)
    60b4:	180b883a 	mov	r5,r3
    60b8:	b0c00c04 	addi	r3,r22,48
    60bc:	20c00005 	stb	r3,0(r4)
    60c0:	25c00044 	addi	r23,r4,1
    60c4:	01000044 	movi	r4,1
    60c8:	1011883a 	mov	r8,r2
    60cc:	2807883a 	mov	r3,r5
    60d0:	31003d26 	beq	r6,r4,61c8 <_dtoa_r+0x918>
    60d4:	000d883a 	mov	r6,zero
    60d8:	01d00934 	movhi	r7,16420
    60dc:	1009883a 	mov	r4,r2
    60e0:	000e0380 	call	e038 <__muldf3>
    60e4:	1009883a 	mov	r4,r2
    60e8:	180b883a 	mov	r5,r3
    60ec:	000d883a 	mov	r6,zero
    60f0:	000f883a 	mov	r7,zero
    60f4:	1027883a 	mov	r19,r2
    60f8:	182b883a 	mov	r21,r3
    60fc:	000ddf40 	call	ddf4 <__eqdf2>
    6100:	103f9926 	beq	r2,zero,5f68 <__alt_data_end+0xfffb0838>
    6104:	d8c00617 	ldw	r3,24(sp)
    6108:	d9000717 	ldw	r4,28(sp)
    610c:	b825883a 	mov	r18,r23
    6110:	18bfffc4 	addi	r2,r3,-1
    6114:	20ad883a 	add	r22,r4,r2
    6118:	dc000315 	stw	r16,12(sp)
    611c:	00000a06 	br	6148 <_dtoa_r+0x898>
    6120:	000e0380 	call	e038 <__muldf3>
    6124:	1009883a 	mov	r4,r2
    6128:	180b883a 	mov	r5,r3
    612c:	000d883a 	mov	r6,zero
    6130:	000f883a 	mov	r7,zero
    6134:	1027883a 	mov	r19,r2
    6138:	182b883a 	mov	r21,r3
    613c:	b825883a 	mov	r18,r23
    6140:	000ddf40 	call	ddf4 <__eqdf2>
    6144:	10022626 	beq	r2,zero,69e0 <_dtoa_r+0x1130>
    6148:	880d883a 	mov	r6,r17
    614c:	a00f883a 	mov	r7,r20
    6150:	9809883a 	mov	r4,r19
    6154:	a80b883a 	mov	r5,r21
    6158:	000d4740 	call	d474 <__divdf3>
    615c:	180b883a 	mov	r5,r3
    6160:	1009883a 	mov	r4,r2
    6164:	000f1740 	call	f174 <__fixdfsi>
    6168:	1009883a 	mov	r4,r2
    616c:	1021883a 	mov	r16,r2
    6170:	000f1fc0 	call	f1fc <__floatsidf>
    6174:	1009883a 	mov	r4,r2
    6178:	180b883a 	mov	r5,r3
    617c:	880d883a 	mov	r6,r17
    6180:	a00f883a 	mov	r7,r20
    6184:	000e0380 	call	e038 <__muldf3>
    6188:	9809883a 	mov	r4,r19
    618c:	a80b883a 	mov	r5,r21
    6190:	100d883a 	mov	r6,r2
    6194:	180f883a 	mov	r7,r3
    6198:	000e8a40 	call	e8a4 <__subdf3>
    619c:	82000c04 	addi	r8,r16,48
    61a0:	92000005 	stb	r8,0(r18)
    61a4:	1009883a 	mov	r4,r2
    61a8:	180b883a 	mov	r5,r3
    61ac:	000d883a 	mov	r6,zero
    61b0:	01d00934 	movhi	r7,16420
    61b4:	1011883a 	mov	r8,r2
    61b8:	bdc00044 	addi	r23,r23,1
    61bc:	95bfd81e 	bne	r18,r22,6120 <__alt_data_end+0xfffb09f0>
    61c0:	802d883a 	mov	r22,r16
    61c4:	dc000317 	ldw	r16,12(sp)
    61c8:	4009883a 	mov	r4,r8
    61cc:	180b883a 	mov	r5,r3
    61d0:	400d883a 	mov	r6,r8
    61d4:	180f883a 	mov	r7,r3
    61d8:	000cbd80 	call	cbd8 <__adddf3>
    61dc:	8809883a 	mov	r4,r17
    61e0:	a00b883a 	mov	r5,r20
    61e4:	100d883a 	mov	r6,r2
    61e8:	180f883a 	mov	r7,r3
    61ec:	1027883a 	mov	r19,r2
    61f0:	1825883a 	mov	r18,r3
    61f4:	000df580 	call	df58 <__ledf2>
    61f8:	10000816 	blt	r2,zero,621c <_dtoa_r+0x96c>
    61fc:	8809883a 	mov	r4,r17
    6200:	a00b883a 	mov	r5,r20
    6204:	980d883a 	mov	r6,r19
    6208:	900f883a 	mov	r7,r18
    620c:	000ddf40 	call	ddf4 <__eqdf2>
    6210:	103f551e 	bne	r2,zero,5f68 <__alt_data_end+0xfffb0838>
    6214:	b580004c 	andi	r22,r22,1
    6218:	b03f5326 	beq	r22,zero,5f68 <__alt_data_end+0xfffb0838>
    621c:	bd7fffc3 	ldbu	r21,-1(r23)
    6220:	b8bfffc4 	addi	r2,r23,-1
    6224:	1007883a 	mov	r3,r2
    6228:	01400e44 	movi	r5,57
    622c:	d9800717 	ldw	r6,28(sp)
    6230:	00000506 	br	6248 <_dtoa_r+0x998>
    6234:	18ffffc4 	addi	r3,r3,-1
    6238:	30825e26 	beq	r6,r2,6bb4 <_dtoa_r+0x1304>
    623c:	1d400003 	ldbu	r21,0(r3)
    6240:	102f883a 	mov	r23,r2
    6244:	10bfffc4 	addi	r2,r2,-1
    6248:	a9003fcc 	andi	r4,r21,255
    624c:	2100201c 	xori	r4,r4,128
    6250:	213fe004 	addi	r4,r4,-128
    6254:	217ff726 	beq	r4,r5,6234 <__alt_data_end+0xfffb0b04>
    6258:	aa000044 	addi	r8,r21,1
    625c:	12000005 	stb	r8,0(r2)
    6260:	003f4106 	br	5f68 <__alt_data_end+0xfffb0838>
    6264:	d8c00b17 	ldw	r3,44(sp)
    6268:	18006726 	beq	r3,zero,6408 <_dtoa_r+0xb58>
    626c:	d9000317 	ldw	r4,12(sp)
    6270:	00c00044 	movi	r3,1
    6274:	19016a0e 	bge	r3,r4,6820 <_dtoa_r+0xf70>
    6278:	d8800617 	ldw	r2,24(sp)
    627c:	d8c00917 	ldw	r3,36(sp)
    6280:	157fffc4 	addi	r21,r2,-1
    6284:	1d420716 	blt	r3,r21,6aa4 <_dtoa_r+0x11f4>
    6288:	1d6bc83a 	sub	r21,r3,r21
    628c:	d8800617 	ldw	r2,24(sp)
    6290:	1002c716 	blt	r2,zero,6db0 <_dtoa_r+0x1500>
    6294:	dd000817 	ldw	r20,32(sp)
    6298:	d8800617 	ldw	r2,24(sp)
    629c:	d9800817 	ldw	r6,32(sp)
    62a0:	8009883a 	mov	r4,r16
    62a4:	01400044 	movi	r5,1
    62a8:	308d883a 	add	r6,r6,r2
    62ac:	d9800815 	stw	r6,32(sp)
    62b0:	b0ad883a 	add	r22,r22,r2
    62b4:	0008b6c0 	call	8b6c <__i2b>
    62b8:	1023883a 	mov	r17,r2
    62bc:	a0000826 	beq	r20,zero,62e0 <_dtoa_r+0xa30>
    62c0:	0580070e 	bge	zero,r22,62e0 <_dtoa_r+0xa30>
    62c4:	b005883a 	mov	r2,r22
    62c8:	a5812016 	blt	r20,r22,674c <_dtoa_r+0xe9c>
    62cc:	d8c00817 	ldw	r3,32(sp)
    62d0:	a0a9c83a 	sub	r20,r20,r2
    62d4:	b0adc83a 	sub	r22,r22,r2
    62d8:	1887c83a 	sub	r3,r3,r2
    62dc:	d8c00815 	stw	r3,32(sp)
    62e0:	d9000917 	ldw	r4,36(sp)
    62e4:	0100140e 	bge	zero,r4,6338 <_dtoa_r+0xa88>
    62e8:	d9800b17 	ldw	r6,44(sp)
    62ec:	3001e526 	beq	r6,zero,6a84 <_dtoa_r+0x11d4>
    62f0:	05400e0e 	bge	zero,r21,632c <_dtoa_r+0xa7c>
    62f4:	880b883a 	mov	r5,r17
    62f8:	8009883a 	mov	r4,r16
    62fc:	a80d883a 	mov	r6,r21
    6300:	0008e380 	call	8e38 <__pow5mult>
    6304:	e00d883a 	mov	r6,fp
    6308:	8009883a 	mov	r4,r16
    630c:	100b883a 	mov	r5,r2
    6310:	1023883a 	mov	r17,r2
    6314:	0008ba80 	call	8ba8 <__multiply>
    6318:	102f883a 	mov	r23,r2
    631c:	e00b883a 	mov	r5,fp
    6320:	8009883a 	mov	r4,r16
    6324:	00087ec0 	call	87ec <_Bfree>
    6328:	b839883a 	mov	fp,r23
    632c:	d8800917 	ldw	r2,36(sp)
    6330:	154dc83a 	sub	r6,r2,r21
    6334:	3001281e 	bne	r6,zero,67d8 <_dtoa_r+0xf28>
    6338:	05c00044 	movi	r23,1
    633c:	8009883a 	mov	r4,r16
    6340:	b80b883a 	mov	r5,r23
    6344:	0008b6c0 	call	8b6c <__i2b>
    6348:	d8c00a17 	ldw	r3,40(sp)
    634c:	102b883a 	mov	r21,r2
    6350:	00c0310e 	bge	zero,r3,6418 <_dtoa_r+0xb68>
    6354:	8009883a 	mov	r4,r16
    6358:	100b883a 	mov	r5,r2
    635c:	180d883a 	mov	r6,r3
    6360:	0008e380 	call	8e38 <__pow5mult>
    6364:	d9000317 	ldw	r4,12(sp)
    6368:	102b883a 	mov	r21,r2
    636c:	b9011f0e 	bge	r23,r4,67ec <_dtoa_r+0xf3c>
    6370:	0027883a 	mov	r19,zero
    6374:	a8800417 	ldw	r2,16(r21)
    6378:	10800104 	addi	r2,r2,4
    637c:	1085883a 	add	r2,r2,r2
    6380:	1085883a 	add	r2,r2,r2
    6384:	a885883a 	add	r2,r21,r2
    6388:	11000017 	ldw	r4,0(r2)
    638c:	0008a540 	call	8a54 <__hi0bits>
    6390:	00c00804 	movi	r3,32
    6394:	1885c83a 	sub	r2,r3,r2
    6398:	00002506 	br	6430 <_dtoa_r+0xb80>
    639c:	01800044 	movi	r6,1
    63a0:	d9800c15 	stw	r6,48(sp)
    63a4:	003dec06 	br	5b58 <__alt_data_end+0xfffb0428>
    63a8:	d8c00817 	ldw	r3,32(sp)
    63ac:	d9000517 	ldw	r4,20(sp)
    63b0:	d8000a15 	stw	zero,40(sp)
    63b4:	1907c83a 	sub	r3,r3,r4
    63b8:	010dc83a 	sub	r6,zero,r4
    63bc:	d8c00815 	stw	r3,32(sp)
    63c0:	d9800915 	stw	r6,36(sp)
    63c4:	003ded06 	br	5b7c <__alt_data_end+0xfffb044c>
    63c8:	05adc83a 	sub	r22,zero,r22
    63cc:	dd800815 	stw	r22,32(sp)
    63d0:	002d883a 	mov	r22,zero
    63d4:	003de406 	br	5b68 <__alt_data_end+0xfffb0438>
    63d8:	d9000517 	ldw	r4,20(sp)
    63dc:	000f1fc0 	call	f1fc <__floatsidf>
    63e0:	1009883a 	mov	r4,r2
    63e4:	180b883a 	mov	r5,r3
    63e8:	b00d883a 	mov	r6,r22
    63ec:	a80f883a 	mov	r7,r21
    63f0:	000ddf40 	call	ddf4 <__eqdf2>
    63f4:	103dc726 	beq	r2,zero,5b14 <__alt_data_end+0xfffb03e4>
    63f8:	d8800517 	ldw	r2,20(sp)
    63fc:	10bfffc4 	addi	r2,r2,-1
    6400:	d8800515 	stw	r2,20(sp)
    6404:	003dc306 	br	5b14 <__alt_data_end+0xfffb03e4>
    6408:	dd400917 	ldw	r21,36(sp)
    640c:	dd000817 	ldw	r20,32(sp)
    6410:	0023883a 	mov	r17,zero
    6414:	003fa906 	br	62bc <__alt_data_end+0xfffb0b8c>
    6418:	d9800317 	ldw	r6,12(sp)
    641c:	b981670e 	bge	r23,r6,69bc <_dtoa_r+0x110c>
    6420:	0027883a 	mov	r19,zero
    6424:	d8c00a17 	ldw	r3,40(sp)
    6428:	183fd21e 	bne	r3,zero,6374 <__alt_data_end+0xfffb0c44>
    642c:	00800044 	movi	r2,1
    6430:	1585883a 	add	r2,r2,r22
    6434:	108007cc 	andi	r2,r2,31
    6438:	10005f26 	beq	r2,zero,65b8 <_dtoa_r+0xd08>
    643c:	00c00804 	movi	r3,32
    6440:	1887c83a 	sub	r3,r3,r2
    6444:	01000104 	movi	r4,4
    6448:	20c2dd0e 	bge	r4,r3,6fc0 <_dtoa_r+0x1710>
    644c:	d9000817 	ldw	r4,32(sp)
    6450:	00c00704 	movi	r3,28
    6454:	1885c83a 	sub	r2,r3,r2
    6458:	2089883a 	add	r4,r4,r2
    645c:	d9000815 	stw	r4,32(sp)
    6460:	a0a9883a 	add	r20,r20,r2
    6464:	b0ad883a 	add	r22,r22,r2
    6468:	d8800817 	ldw	r2,32(sp)
    646c:	0080050e 	bge	zero,r2,6484 <_dtoa_r+0xbd4>
    6470:	e00b883a 	mov	r5,fp
    6474:	8009883a 	mov	r4,r16
    6478:	100d883a 	mov	r6,r2
    647c:	0008f780 	call	8f78 <__lshift>
    6480:	1039883a 	mov	fp,r2
    6484:	0580050e 	bge	zero,r22,649c <_dtoa_r+0xbec>
    6488:	a80b883a 	mov	r5,r21
    648c:	8009883a 	mov	r4,r16
    6490:	b00d883a 	mov	r6,r22
    6494:	0008f780 	call	8f78 <__lshift>
    6498:	102b883a 	mov	r21,r2
    649c:	d8c00c17 	ldw	r3,48(sp)
    64a0:	1801161e 	bne	r3,zero,68fc <_dtoa_r+0x104c>
    64a4:	d8c00617 	ldw	r3,24(sp)
    64a8:	00c12d0e 	bge	zero,r3,6960 <_dtoa_r+0x10b0>
    64ac:	d8c00b17 	ldw	r3,44(sp)
    64b0:	1800571e 	bne	r3,zero,6610 <_dtoa_r+0xd60>
    64b4:	dc800717 	ldw	r18,28(sp)
    64b8:	dcc00617 	ldw	r19,24(sp)
    64bc:	9029883a 	mov	r20,r18
    64c0:	00000206 	br	64cc <_dtoa_r+0xc1c>
    64c4:	00088140 	call	8814 <__multadd>
    64c8:	1039883a 	mov	fp,r2
    64cc:	e009883a 	mov	r4,fp
    64d0:	a80b883a 	mov	r5,r21
    64d4:	00056880 	call	5688 <quorem>
    64d8:	10800c04 	addi	r2,r2,48
    64dc:	90800005 	stb	r2,0(r18)
    64e0:	94800044 	addi	r18,r18,1
    64e4:	9507c83a 	sub	r3,r18,r20
    64e8:	8009883a 	mov	r4,r16
    64ec:	e00b883a 	mov	r5,fp
    64f0:	01800284 	movi	r6,10
    64f4:	000f883a 	mov	r7,zero
    64f8:	1cfff216 	blt	r3,r19,64c4 <__alt_data_end+0xfffb0d94>
    64fc:	1011883a 	mov	r8,r2
    6500:	d8800617 	ldw	r2,24(sp)
    6504:	00822e0e 	bge	zero,r2,6dc0 <_dtoa_r+0x1510>
    6508:	d9000717 	ldw	r4,28(sp)
    650c:	0025883a 	mov	r18,zero
    6510:	20af883a 	add	r23,r4,r2
    6514:	e00b883a 	mov	r5,fp
    6518:	01800044 	movi	r6,1
    651c:	8009883a 	mov	r4,r16
    6520:	da001715 	stw	r8,92(sp)
    6524:	0008f780 	call	8f78 <__lshift>
    6528:	1009883a 	mov	r4,r2
    652c:	a80b883a 	mov	r5,r21
    6530:	1039883a 	mov	fp,r2
    6534:	00090c00 	call	90c0 <__mcmp>
    6538:	da001717 	ldw	r8,92(sp)
    653c:	00816e0e 	bge	zero,r2,6af8 <_dtoa_r+0x1248>
    6540:	b93fffc3 	ldbu	r4,-1(r23)
    6544:	b8bfffc4 	addi	r2,r23,-1
    6548:	1007883a 	mov	r3,r2
    654c:	01800e44 	movi	r6,57
    6550:	d9c00717 	ldw	r7,28(sp)
    6554:	00000506 	br	656c <_dtoa_r+0xcbc>
    6558:	18ffffc4 	addi	r3,r3,-1
    655c:	38811926 	beq	r7,r2,69c4 <_dtoa_r+0x1114>
    6560:	19000003 	ldbu	r4,0(r3)
    6564:	102f883a 	mov	r23,r2
    6568:	10bfffc4 	addi	r2,r2,-1
    656c:	21403fcc 	andi	r5,r4,255
    6570:	2940201c 	xori	r5,r5,128
    6574:	297fe004 	addi	r5,r5,-128
    6578:	29bff726 	beq	r5,r6,6558 <__alt_data_end+0xfffb0e28>
    657c:	21000044 	addi	r4,r4,1
    6580:	11000005 	stb	r4,0(r2)
    6584:	8009883a 	mov	r4,r16
    6588:	a80b883a 	mov	r5,r21
    658c:	00087ec0 	call	87ec <_Bfree>
    6590:	883e7526 	beq	r17,zero,5f68 <__alt_data_end+0xfffb0838>
    6594:	90000426 	beq	r18,zero,65a8 <_dtoa_r+0xcf8>
    6598:	94400326 	beq	r18,r17,65a8 <_dtoa_r+0xcf8>
    659c:	8009883a 	mov	r4,r16
    65a0:	900b883a 	mov	r5,r18
    65a4:	00087ec0 	call	87ec <_Bfree>
    65a8:	8009883a 	mov	r4,r16
    65ac:	880b883a 	mov	r5,r17
    65b0:	00087ec0 	call	87ec <_Bfree>
    65b4:	003e6c06 	br	5f68 <__alt_data_end+0xfffb0838>
    65b8:	00800704 	movi	r2,28
    65bc:	d9800817 	ldw	r6,32(sp)
    65c0:	a0a9883a 	add	r20,r20,r2
    65c4:	b0ad883a 	add	r22,r22,r2
    65c8:	308d883a 	add	r6,r6,r2
    65cc:	d9800815 	stw	r6,32(sp)
    65d0:	003fa506 	br	6468 <__alt_data_end+0xfffb0d38>
    65d4:	013efb84 	movi	r4,-1042
    65d8:	246bc83a 	sub	r21,r4,r17
    65dc:	9548983a 	sll	r4,r18,r21
    65e0:	003d1806 	br	5a44 <__alt_data_end+0xfffb0314>
    65e4:	d8000c15 	stw	zero,48(sp)
    65e8:	003d5b06 	br	5b58 <__alt_data_end+0xfffb0428>
    65ec:	880b883a 	mov	r5,r17
    65f0:	8009883a 	mov	r4,r16
    65f4:	01800284 	movi	r6,10
    65f8:	000f883a 	mov	r7,zero
    65fc:	00088140 	call	8814 <__multadd>
    6600:	1023883a 	mov	r17,r2
    6604:	d8800d17 	ldw	r2,52(sp)
    6608:	0082550e 	bge	zero,r2,6f60 <_dtoa_r+0x16b0>
    660c:	d8800615 	stw	r2,24(sp)
    6610:	0500050e 	bge	zero,r20,6628 <_dtoa_r+0xd78>
    6614:	880b883a 	mov	r5,r17
    6618:	8009883a 	mov	r4,r16
    661c:	a00d883a 	mov	r6,r20
    6620:	0008f780 	call	8f78 <__lshift>
    6624:	1023883a 	mov	r17,r2
    6628:	98016a1e 	bne	r19,zero,6bd4 <_dtoa_r+0x1324>
    662c:	8829883a 	mov	r20,r17
    6630:	d9000617 	ldw	r4,24(sp)
    6634:	dcc00717 	ldw	r19,28(sp)
    6638:	9480004c 	andi	r18,r18,1
    663c:	20bfffc4 	addi	r2,r4,-1
    6640:	9885883a 	add	r2,r19,r2
    6644:	d8800415 	stw	r2,16(sp)
    6648:	dc800615 	stw	r18,24(sp)
    664c:	e009883a 	mov	r4,fp
    6650:	a80b883a 	mov	r5,r21
    6654:	00056880 	call	5688 <quorem>
    6658:	e009883a 	mov	r4,fp
    665c:	880b883a 	mov	r5,r17
    6660:	102f883a 	mov	r23,r2
    6664:	00090c00 	call	90c0 <__mcmp>
    6668:	8009883a 	mov	r4,r16
    666c:	a80b883a 	mov	r5,r21
    6670:	a00d883a 	mov	r6,r20
    6674:	102d883a 	mov	r22,r2
    6678:	00091200 	call	9120 <__mdiff>
    667c:	1007883a 	mov	r3,r2
    6680:	10800317 	ldw	r2,12(r2)
    6684:	bc800c04 	addi	r18,r23,48
    6688:	1000971e 	bne	r2,zero,68e8 <_dtoa_r+0x1038>
    668c:	180b883a 	mov	r5,r3
    6690:	e009883a 	mov	r4,fp
    6694:	d8c01515 	stw	r3,84(sp)
    6698:	00090c00 	call	90c0 <__mcmp>
    669c:	d8c01517 	ldw	r3,84(sp)
    66a0:	8009883a 	mov	r4,r16
    66a4:	d8801515 	stw	r2,84(sp)
    66a8:	180b883a 	mov	r5,r3
    66ac:	00087ec0 	call	87ec <_Bfree>
    66b0:	d8801517 	ldw	r2,84(sp)
    66b4:	1000041e 	bne	r2,zero,66c8 <_dtoa_r+0xe18>
    66b8:	d9800317 	ldw	r6,12(sp)
    66bc:	3000021e 	bne	r6,zero,66c8 <_dtoa_r+0xe18>
    66c0:	d8c00617 	ldw	r3,24(sp)
    66c4:	18007626 	beq	r3,zero,68a0 <_dtoa_r+0xff0>
    66c8:	b0005b16 	blt	r22,zero,6838 <_dtoa_r+0xf88>
    66cc:	b000041e 	bne	r22,zero,66e0 <_dtoa_r+0xe30>
    66d0:	d9000317 	ldw	r4,12(sp)
    66d4:	2000021e 	bne	r4,zero,66e0 <_dtoa_r+0xe30>
    66d8:	d8c00617 	ldw	r3,24(sp)
    66dc:	18005626 	beq	r3,zero,6838 <_dtoa_r+0xf88>
    66e0:	00814d16 	blt	zero,r2,6c18 <_dtoa_r+0x1368>
    66e4:	d8c00417 	ldw	r3,16(sp)
    66e8:	9d800044 	addi	r22,r19,1
    66ec:	9c800005 	stb	r18,0(r19)
    66f0:	b02f883a 	mov	r23,r22
    66f4:	98c14c26 	beq	r19,r3,6c28 <_dtoa_r+0x1378>
    66f8:	e00b883a 	mov	r5,fp
    66fc:	8009883a 	mov	r4,r16
    6700:	01800284 	movi	r6,10
    6704:	000f883a 	mov	r7,zero
    6708:	00088140 	call	8814 <__multadd>
    670c:	1039883a 	mov	fp,r2
    6710:	8d006d26 	beq	r17,r20,68c8 <_dtoa_r+0x1018>
    6714:	880b883a 	mov	r5,r17
    6718:	01800284 	movi	r6,10
    671c:	000f883a 	mov	r7,zero
    6720:	8009883a 	mov	r4,r16
    6724:	00088140 	call	8814 <__multadd>
    6728:	a00b883a 	mov	r5,r20
    672c:	8009883a 	mov	r4,r16
    6730:	01800284 	movi	r6,10
    6734:	000f883a 	mov	r7,zero
    6738:	1023883a 	mov	r17,r2
    673c:	00088140 	call	8814 <__multadd>
    6740:	1029883a 	mov	r20,r2
    6744:	b027883a 	mov	r19,r22
    6748:	003fc006 	br	664c <__alt_data_end+0xfffb0f1c>
    674c:	a005883a 	mov	r2,r20
    6750:	003ede06 	br	62cc <__alt_data_end+0xfffb0b9c>
    6754:	01000044 	movi	r4,1
    6758:	d9000b15 	stw	r4,44(sp)
    675c:	d9802217 	ldw	r6,136(sp)
    6760:	0180dc0e 	bge	zero,r6,6ad4 <_dtoa_r+0x1224>
    6764:	3023883a 	mov	r17,r6
    6768:	d9800d15 	stw	r6,52(sp)
    676c:	d9800615 	stw	r6,24(sp)
    6770:	003d1e06 	br	5bec <__alt_data_end+0xfffb04bc>
    6774:	d8800617 	ldw	r2,24(sp)
    6778:	00be3716 	blt	zero,r2,6058 <__alt_data_end+0xfffb0928>
    677c:	1000be1e 	bne	r2,zero,6a78 <_dtoa_r+0x11c8>
    6780:	8809883a 	mov	r4,r17
    6784:	a00b883a 	mov	r5,r20
    6788:	000d883a 	mov	r6,zero
    678c:	01d00534 	movhi	r7,16404
    6790:	000e0380 	call	e038 <__muldf3>
    6794:	1009883a 	mov	r4,r2
    6798:	180b883a 	mov	r5,r3
    679c:	900d883a 	mov	r6,r18
    67a0:	980f883a 	mov	r7,r19
    67a4:	000de780 	call	de78 <__gedf2>
    67a8:	002b883a 	mov	r21,zero
    67ac:	0023883a 	mov	r17,zero
    67b0:	10007a16 	blt	r2,zero,699c <_dtoa_r+0x10ec>
    67b4:	d9002217 	ldw	r4,136(sp)
    67b8:	ddc00717 	ldw	r23,28(sp)
    67bc:	0108303a 	nor	r4,zero,r4
    67c0:	d9000515 	stw	r4,20(sp)
    67c4:	8009883a 	mov	r4,r16
    67c8:	a80b883a 	mov	r5,r21
    67cc:	00087ec0 	call	87ec <_Bfree>
    67d0:	883f751e 	bne	r17,zero,65a8 <__alt_data_end+0xfffb0e78>
    67d4:	003de406 	br	5f68 <__alt_data_end+0xfffb0838>
    67d8:	e00b883a 	mov	r5,fp
    67dc:	8009883a 	mov	r4,r16
    67e0:	0008e380 	call	8e38 <__pow5mult>
    67e4:	1039883a 	mov	fp,r2
    67e8:	003ed306 	br	6338 <__alt_data_end+0xfffb0c08>
    67ec:	903ee01e 	bne	r18,zero,6370 <__alt_data_end+0xfffb0c40>
    67f0:	00800434 	movhi	r2,16
    67f4:	10bfffc4 	addi	r2,r2,-1
    67f8:	9884703a 	and	r2,r19,r2
    67fc:	103f081e 	bne	r2,zero,6420 <__alt_data_end+0xfffb0cf0>
    6800:	9cdffc2c 	andhi	r19,r19,32752
    6804:	983f0626 	beq	r19,zero,6420 <__alt_data_end+0xfffb0cf0>
    6808:	d8800817 	ldw	r2,32(sp)
    680c:	b5800044 	addi	r22,r22,1
    6810:	04c00044 	movi	r19,1
    6814:	10800044 	addi	r2,r2,1
    6818:	d8800815 	stw	r2,32(sp)
    681c:	003f0106 	br	6424 <__alt_data_end+0xfffb0cf4>
    6820:	d9800f17 	ldw	r6,60(sp)
    6824:	30016826 	beq	r6,zero,6dc8 <_dtoa_r+0x1518>
    6828:	10810cc4 	addi	r2,r2,1075
    682c:	dd400917 	ldw	r21,36(sp)
    6830:	dd000817 	ldw	r20,32(sp)
    6834:	003e9906 	br	629c <__alt_data_end+0xfffb0b6c>
    6838:	9011883a 	mov	r8,r18
    683c:	4007883a 	mov	r3,r8
    6840:	e02d883a 	mov	r22,fp
    6844:	0080100e 	bge	zero,r2,6888 <_dtoa_r+0xfd8>
    6848:	01800044 	movi	r6,1
    684c:	8009883a 	mov	r4,r16
    6850:	e00b883a 	mov	r5,fp
    6854:	da001515 	stw	r8,84(sp)
    6858:	da001715 	stw	r8,92(sp)
    685c:	0008f780 	call	8f78 <__lshift>
    6860:	1009883a 	mov	r4,r2
    6864:	a80b883a 	mov	r5,r21
    6868:	102d883a 	mov	r22,r2
    686c:	00090c00 	call	90c0 <__mcmp>
    6870:	d8c01517 	ldw	r3,84(sp)
    6874:	da001717 	ldw	r8,92(sp)
    6878:	0081a50e 	bge	zero,r2,6f10 <_dtoa_r+0x1660>
    687c:	00800e44 	movi	r2,57
    6880:	40817b26 	beq	r8,r2,6e70 <_dtoa_r+0x15c0>
    6884:	40c00044 	addi	r3,r8,1
    6888:	8825883a 	mov	r18,r17
    688c:	9dc00044 	addi	r23,r19,1
    6890:	98c00005 	stb	r3,0(r19)
    6894:	a023883a 	mov	r17,r20
    6898:	b039883a 	mov	fp,r22
    689c:	003f3906 	br	6584 <__alt_data_end+0xfffb0e54>
    68a0:	00800e44 	movi	r2,57
    68a4:	9011883a 	mov	r8,r18
    68a8:	90817226 	beq	r18,r2,6e74 <_dtoa_r+0x15c4>
    68ac:	0580010e 	bge	zero,r22,68b4 <_dtoa_r+0x1004>
    68b0:	ba000c44 	addi	r8,r23,49
    68b4:	8825883a 	mov	r18,r17
    68b8:	9dc00044 	addi	r23,r19,1
    68bc:	9a000005 	stb	r8,0(r19)
    68c0:	a023883a 	mov	r17,r20
    68c4:	003f2f06 	br	6584 <__alt_data_end+0xfffb0e54>
    68c8:	880b883a 	mov	r5,r17
    68cc:	8009883a 	mov	r4,r16
    68d0:	01800284 	movi	r6,10
    68d4:	000f883a 	mov	r7,zero
    68d8:	00088140 	call	8814 <__multadd>
    68dc:	1023883a 	mov	r17,r2
    68e0:	1029883a 	mov	r20,r2
    68e4:	003f9706 	br	6744 <__alt_data_end+0xfffb1014>
    68e8:	8009883a 	mov	r4,r16
    68ec:	180b883a 	mov	r5,r3
    68f0:	00087ec0 	call	87ec <_Bfree>
    68f4:	00800044 	movi	r2,1
    68f8:	003f7306 	br	66c8 <__alt_data_end+0xfffb0f98>
    68fc:	e009883a 	mov	r4,fp
    6900:	a80b883a 	mov	r5,r21
    6904:	00090c00 	call	90c0 <__mcmp>
    6908:	103ee60e 	bge	r2,zero,64a4 <__alt_data_end+0xfffb0d74>
    690c:	8009883a 	mov	r4,r16
    6910:	e00b883a 	mov	r5,fp
    6914:	01800284 	movi	r6,10
    6918:	000f883a 	mov	r7,zero
    691c:	00088140 	call	8814 <__multadd>
    6920:	d9000517 	ldw	r4,20(sp)
    6924:	d9800b17 	ldw	r6,44(sp)
    6928:	1039883a 	mov	fp,r2
    692c:	213fffc4 	addi	r4,r4,-1
    6930:	d9000515 	stw	r4,20(sp)
    6934:	303f2d1e 	bne	r6,zero,65ec <__alt_data_end+0xfffb0ebc>
    6938:	d9000d17 	ldw	r4,52(sp)
    693c:	0101780e 	bge	zero,r4,6f20 <_dtoa_r+0x1670>
    6940:	d9000615 	stw	r4,24(sp)
    6944:	003edb06 	br	64b4 <__alt_data_end+0xfffb0d84>
    6948:	00800084 	movi	r2,2
    694c:	30818e1e 	bne	r6,r2,6f88 <_dtoa_r+0x16d8>
    6950:	d8000b15 	stw	zero,44(sp)
    6954:	003f8106 	br	675c <__alt_data_end+0xfffb102c>
    6958:	d8800717 	ldw	r2,28(sp)
    695c:	003c0306 	br	596c <__alt_data_end+0xfffb023c>
    6960:	d9000317 	ldw	r4,12(sp)
    6964:	00800084 	movi	r2,2
    6968:	113ed00e 	bge	r2,r4,64ac <__alt_data_end+0xfffb0d7c>
    696c:	d8c00617 	ldw	r3,24(sp)
    6970:	183f901e 	bne	r3,zero,67b4 <__alt_data_end+0xfffb1084>
    6974:	a80b883a 	mov	r5,r21
    6978:	8009883a 	mov	r4,r16
    697c:	01800144 	movi	r6,5
    6980:	000f883a 	mov	r7,zero
    6984:	00088140 	call	8814 <__multadd>
    6988:	e009883a 	mov	r4,fp
    698c:	100b883a 	mov	r5,r2
    6990:	102b883a 	mov	r21,r2
    6994:	00090c00 	call	90c0 <__mcmp>
    6998:	00bf860e 	bge	zero,r2,67b4 <__alt_data_end+0xfffb1084>
    699c:	d9800717 	ldw	r6,28(sp)
    69a0:	00800c44 	movi	r2,49
    69a4:	30800005 	stb	r2,0(r6)
    69a8:	d8800517 	ldw	r2,20(sp)
    69ac:	35c00044 	addi	r23,r6,1
    69b0:	10800044 	addi	r2,r2,1
    69b4:	d8800515 	stw	r2,20(sp)
    69b8:	003f8206 	br	67c4 <__alt_data_end+0xfffb1094>
    69bc:	903e981e 	bne	r18,zero,6420 <__alt_data_end+0xfffb0cf0>
    69c0:	003f8b06 	br	67f0 <__alt_data_end+0xfffb10c0>
    69c4:	d9800517 	ldw	r6,20(sp)
    69c8:	d8c00717 	ldw	r3,28(sp)
    69cc:	00800c44 	movi	r2,49
    69d0:	31800044 	addi	r6,r6,1
    69d4:	d9800515 	stw	r6,20(sp)
    69d8:	18800005 	stb	r2,0(r3)
    69dc:	003ee906 	br	6584 <__alt_data_end+0xfffb0e54>
    69e0:	dc000317 	ldw	r16,12(sp)
    69e4:	003d6006 	br	5f68 <__alt_data_end+0xfffb0838>
    69e8:	8809883a 	mov	r4,r17
    69ec:	000f1fc0 	call	f1fc <__floatsidf>
    69f0:	a009883a 	mov	r4,r20
    69f4:	a80b883a 	mov	r5,r21
    69f8:	100d883a 	mov	r6,r2
    69fc:	180f883a 	mov	r7,r3
    6a00:	000e0380 	call	e038 <__muldf3>
    6a04:	1009883a 	mov	r4,r2
    6a08:	180b883a 	mov	r5,r3
    6a0c:	000d883a 	mov	r6,zero
    6a10:	01d00734 	movhi	r7,16412
    6a14:	000cbd80 	call	cbd8 <__adddf3>
    6a18:	1023883a 	mov	r17,r2
    6a1c:	00bf3034 	movhi	r2,64704
    6a20:	1885883a 	add	r2,r3,r2
    6a24:	d8800e15 	stw	r2,56(sp)
    6a28:	a009883a 	mov	r4,r20
    6a2c:	a80b883a 	mov	r5,r21
    6a30:	000d883a 	mov	r6,zero
    6a34:	01d00534 	movhi	r7,16404
    6a38:	000e8a40 	call	e8a4 <__subdf3>
    6a3c:	d9c00e17 	ldw	r7,56(sp)
    6a40:	1009883a 	mov	r4,r2
    6a44:	180b883a 	mov	r5,r3
    6a48:	880d883a 	mov	r6,r17
    6a4c:	102b883a 	mov	r21,r2
    6a50:	1829883a 	mov	r20,r3
    6a54:	000de780 	call	de78 <__gedf2>
    6a58:	00807716 	blt	zero,r2,6c38 <_dtoa_r+0x1388>
    6a5c:	d8800e17 	ldw	r2,56(sp)
    6a60:	a809883a 	mov	r4,r21
    6a64:	a00b883a 	mov	r5,r20
    6a68:	11e0003c 	xorhi	r7,r2,32768
    6a6c:	880d883a 	mov	r6,r17
    6a70:	000df580 	call	df58 <__ledf2>
    6a74:	103d6b0e 	bge	r2,zero,6024 <__alt_data_end+0xfffb08f4>
    6a78:	002b883a 	mov	r21,zero
    6a7c:	0023883a 	mov	r17,zero
    6a80:	003f4c06 	br	67b4 <__alt_data_end+0xfffb1084>
    6a84:	d9800917 	ldw	r6,36(sp)
    6a88:	e00b883a 	mov	r5,fp
    6a8c:	8009883a 	mov	r4,r16
    6a90:	0008e380 	call	8e38 <__pow5mult>
    6a94:	1039883a 	mov	fp,r2
    6a98:	003e2706 	br	6338 <__alt_data_end+0xfffb0c08>
    6a9c:	d8000b15 	stw	zero,44(sp)
    6aa0:	003c4906 	br	5bc8 <__alt_data_end+0xfffb0498>
    6aa4:	d9000917 	ldw	r4,36(sp)
    6aa8:	d9800a17 	ldw	r6,40(sp)
    6aac:	dd400915 	stw	r21,36(sp)
    6ab0:	a905c83a 	sub	r2,r21,r4
    6ab4:	308d883a 	add	r6,r6,r2
    6ab8:	d9800a15 	stw	r6,40(sp)
    6abc:	002b883a 	mov	r21,zero
    6ac0:	003df206 	br	628c <__alt_data_end+0xfffb0b5c>
    6ac4:	dc800e15 	stw	r18,56(sp)
    6ac8:	982b883a 	mov	r21,r19
    6acc:	04400084 	movi	r17,2
    6ad0:	003c7406 	br	5ca4 <__alt_data_end+0xfffb0574>
    6ad4:	04400044 	movi	r17,1
    6ad8:	dc400d15 	stw	r17,52(sp)
    6adc:	dc400615 	stw	r17,24(sp)
    6ae0:	dc402215 	stw	r17,136(sp)
    6ae4:	80001115 	stw	zero,68(r16)
    6ae8:	000b883a 	mov	r5,zero
    6aec:	003c4a06 	br	5c18 <__alt_data_end+0xfffb04e8>
    6af0:	3023883a 	mov	r17,r6
    6af4:	003ffb06 	br	6ae4 <__alt_data_end+0xfffb13b4>
    6af8:	1000021e 	bne	r2,zero,6b04 <_dtoa_r+0x1254>
    6afc:	4200004c 	andi	r8,r8,1
    6b00:	403e8f1e 	bne	r8,zero,6540 <__alt_data_end+0xfffb0e10>
    6b04:	01000c04 	movi	r4,48
    6b08:	00000106 	br	6b10 <_dtoa_r+0x1260>
    6b0c:	102f883a 	mov	r23,r2
    6b10:	b8bfffc4 	addi	r2,r23,-1
    6b14:	10c00007 	ldb	r3,0(r2)
    6b18:	193ffc26 	beq	r3,r4,6b0c <__alt_data_end+0xfffb13dc>
    6b1c:	003e9906 	br	6584 <__alt_data_end+0xfffb0e54>
    6b20:	d9000517 	ldw	r4,20(sp)
    6b24:	012fc83a 	sub	r23,zero,r4
    6b28:	b800ad26 	beq	r23,zero,6de0 <_dtoa_r+0x1530>
    6b2c:	b88003cc 	andi	r2,r23,15
    6b30:	100490fa 	slli	r2,r2,3
    6b34:	00c00074 	movhi	r3,1
    6b38:	18c92c04 	addi	r3,r3,9392
    6b3c:	1885883a 	add	r2,r3,r2
    6b40:	11800017 	ldw	r6,0(r2)
    6b44:	11c00117 	ldw	r7,4(r2)
    6b48:	b82fd13a 	srai	r23,r23,4
    6b4c:	9009883a 	mov	r4,r18
    6b50:	980b883a 	mov	r5,r19
    6b54:	000e0380 	call	e038 <__muldf3>
    6b58:	1029883a 	mov	r20,r2
    6b5c:	182b883a 	mov	r21,r3
    6b60:	b800f426 	beq	r23,zero,6f34 <_dtoa_r+0x1684>
    6b64:	02000074 	movhi	r8,1
    6b68:	42092204 	addi	r8,r8,9352
    6b6c:	8029883a 	mov	r20,r16
    6b70:	04400084 	movi	r17,2
    6b74:	4021883a 	mov	r16,r8
    6b78:	b980004c 	andi	r6,r23,1
    6b7c:	1009883a 	mov	r4,r2
    6b80:	b82fd07a 	srai	r23,r23,1
    6b84:	180b883a 	mov	r5,r3
    6b88:	30000426 	beq	r6,zero,6b9c <_dtoa_r+0x12ec>
    6b8c:	81800017 	ldw	r6,0(r16)
    6b90:	81c00117 	ldw	r7,4(r16)
    6b94:	8c400044 	addi	r17,r17,1
    6b98:	000e0380 	call	e038 <__muldf3>
    6b9c:	84000204 	addi	r16,r16,8
    6ba0:	b83ff51e 	bne	r23,zero,6b78 <__alt_data_end+0xfffb1448>
    6ba4:	a021883a 	mov	r16,r20
    6ba8:	182b883a 	mov	r21,r3
    6bac:	1029883a 	mov	r20,r2
    6bb0:	003c5506 	br	5d08 <__alt_data_end+0xfffb05d8>
    6bb4:	d9800517 	ldw	r6,20(sp)
    6bb8:	d9000717 	ldw	r4,28(sp)
    6bbc:	00c00c04 	movi	r3,48
    6bc0:	31800044 	addi	r6,r6,1
    6bc4:	d9800515 	stw	r6,20(sp)
    6bc8:	20c00005 	stb	r3,0(r4)
    6bcc:	02000c44 	movi	r8,49
    6bd0:	003da206 	br	625c <__alt_data_end+0xfffb0b2c>
    6bd4:	89400117 	ldw	r5,4(r17)
    6bd8:	8009883a 	mov	r4,r16
    6bdc:	00087440 	call	8744 <_Balloc>
    6be0:	89800417 	ldw	r6,16(r17)
    6be4:	11000304 	addi	r4,r2,12
    6be8:	89400304 	addi	r5,r17,12
    6bec:	31800084 	addi	r6,r6,2
    6bf0:	318d883a 	add	r6,r6,r6
    6bf4:	318d883a 	add	r6,r6,r6
    6bf8:	1027883a 	mov	r19,r2
    6bfc:	000838c0 	call	838c <memcpy>
    6c00:	8009883a 	mov	r4,r16
    6c04:	980b883a 	mov	r5,r19
    6c08:	01800044 	movi	r6,1
    6c0c:	0008f780 	call	8f78 <__lshift>
    6c10:	1029883a 	mov	r20,r2
    6c14:	003e8606 	br	6630 <__alt_data_end+0xfffb0f00>
    6c18:	00800e44 	movi	r2,57
    6c1c:	90809526 	beq	r18,r2,6e74 <_dtoa_r+0x15c4>
    6c20:	92000044 	addi	r8,r18,1
    6c24:	003f2306 	br	68b4 <__alt_data_end+0xfffb1184>
    6c28:	9011883a 	mov	r8,r18
    6c2c:	8825883a 	mov	r18,r17
    6c30:	a023883a 	mov	r17,r20
    6c34:	003e3706 	br	6514 <__alt_data_end+0xfffb0de4>
    6c38:	002b883a 	mov	r21,zero
    6c3c:	0023883a 	mov	r17,zero
    6c40:	003f5606 	br	699c <__alt_data_end+0xfffb126c>
    6c44:	51bfffc4 	addi	r6,r10,-1
    6c48:	300490fa 	slli	r2,r6,3
    6c4c:	00c00074 	movhi	r3,1
    6c50:	18c92c04 	addi	r3,r3,9392
    6c54:	1885883a 	add	r2,r3,r2
    6c58:	d9c00e17 	ldw	r7,56(sp)
    6c5c:	11000017 	ldw	r4,0(r2)
    6c60:	11400117 	ldw	r5,4(r2)
    6c64:	d8800717 	ldw	r2,28(sp)
    6c68:	d9801015 	stw	r6,64(sp)
    6c6c:	880d883a 	mov	r6,r17
    6c70:	da801615 	stw	r10,88(sp)
    6c74:	15c00044 	addi	r23,r2,1
    6c78:	000e0380 	call	e038 <__muldf3>
    6c7c:	a80b883a 	mov	r5,r21
    6c80:	a009883a 	mov	r4,r20
    6c84:	d8c01115 	stw	r3,68(sp)
    6c88:	d8800e15 	stw	r2,56(sp)
    6c8c:	000f1740 	call	f174 <__fixdfsi>
    6c90:	1009883a 	mov	r4,r2
    6c94:	1023883a 	mov	r17,r2
    6c98:	000f1fc0 	call	f1fc <__floatsidf>
    6c9c:	a009883a 	mov	r4,r20
    6ca0:	a80b883a 	mov	r5,r21
    6ca4:	100d883a 	mov	r6,r2
    6ca8:	180f883a 	mov	r7,r3
    6cac:	000e8a40 	call	e8a4 <__subdf3>
    6cb0:	1813883a 	mov	r9,r3
    6cb4:	d8c00717 	ldw	r3,28(sp)
    6cb8:	8c400c04 	addi	r17,r17,48
    6cbc:	1011883a 	mov	r8,r2
    6cc0:	1c400005 	stb	r17,0(r3)
    6cc4:	da801617 	ldw	r10,88(sp)
    6cc8:	00800044 	movi	r2,1
    6ccc:	50802326 	beq	r10,r2,6d5c <_dtoa_r+0x14ac>
    6cd0:	d8800717 	ldw	r2,28(sp)
    6cd4:	b82b883a 	mov	r21,r23
    6cd8:	dc001315 	stw	r16,76(sp)
    6cdc:	12a9883a 	add	r20,r2,r10
    6ce0:	4807883a 	mov	r3,r9
    6ce4:	4005883a 	mov	r2,r8
    6ce8:	dc801415 	stw	r18,80(sp)
    6cec:	000d883a 	mov	r6,zero
    6cf0:	01d00934 	movhi	r7,16420
    6cf4:	1009883a 	mov	r4,r2
    6cf8:	180b883a 	mov	r5,r3
    6cfc:	000e0380 	call	e038 <__muldf3>
    6d00:	180b883a 	mov	r5,r3
    6d04:	1009883a 	mov	r4,r2
    6d08:	1821883a 	mov	r16,r3
    6d0c:	1025883a 	mov	r18,r2
    6d10:	000f1740 	call	f174 <__fixdfsi>
    6d14:	1009883a 	mov	r4,r2
    6d18:	1023883a 	mov	r17,r2
    6d1c:	000f1fc0 	call	f1fc <__floatsidf>
    6d20:	9009883a 	mov	r4,r18
    6d24:	800b883a 	mov	r5,r16
    6d28:	100d883a 	mov	r6,r2
    6d2c:	180f883a 	mov	r7,r3
    6d30:	8c400c04 	addi	r17,r17,48
    6d34:	000e8a40 	call	e8a4 <__subdf3>
    6d38:	ad400044 	addi	r21,r21,1
    6d3c:	ac7fffc5 	stb	r17,-1(r21)
    6d40:	ad3fea1e 	bne	r21,r20,6cec <__alt_data_end+0xfffb15bc>
    6d44:	1813883a 	mov	r9,r3
    6d48:	d8c01017 	ldw	r3,64(sp)
    6d4c:	dc001317 	ldw	r16,76(sp)
    6d50:	dc801417 	ldw	r18,80(sp)
    6d54:	1011883a 	mov	r8,r2
    6d58:	b8ef883a 	add	r23,r23,r3
    6d5c:	d9000e17 	ldw	r4,56(sp)
    6d60:	d9401117 	ldw	r5,68(sp)
    6d64:	000d883a 	mov	r6,zero
    6d68:	01cff834 	movhi	r7,16352
    6d6c:	da001715 	stw	r8,92(sp)
    6d70:	da401515 	stw	r9,84(sp)
    6d74:	000cbd80 	call	cbd8 <__adddf3>
    6d78:	da001717 	ldw	r8,92(sp)
    6d7c:	da401517 	ldw	r9,84(sp)
    6d80:	1009883a 	mov	r4,r2
    6d84:	400d883a 	mov	r6,r8
    6d88:	480f883a 	mov	r7,r9
    6d8c:	180b883a 	mov	r5,r3
    6d90:	000df580 	call	df58 <__ledf2>
    6d94:	da001717 	ldw	r8,92(sp)
    6d98:	da401517 	ldw	r9,84(sp)
    6d9c:	10003b0e 	bge	r2,zero,6e8c <_dtoa_r+0x15dc>
    6da0:	d9001217 	ldw	r4,72(sp)
    6da4:	bd7fffc3 	ldbu	r21,-1(r23)
    6da8:	d9000515 	stw	r4,20(sp)
    6dac:	003d1c06 	br	6220 <__alt_data_end+0xfffb0af0>
    6db0:	d8c00817 	ldw	r3,32(sp)
    6db4:	18a9c83a 	sub	r20,r3,r2
    6db8:	0005883a 	mov	r2,zero
    6dbc:	003d3706 	br	629c <__alt_data_end+0xfffb0b6c>
    6dc0:	00800044 	movi	r2,1
    6dc4:	003dd006 	br	6508 <__alt_data_end+0xfffb0dd8>
    6dc8:	d8c00217 	ldw	r3,8(sp)
    6dcc:	00800d84 	movi	r2,54
    6dd0:	dd400917 	ldw	r21,36(sp)
    6dd4:	10c5c83a 	sub	r2,r2,r3
    6dd8:	dd000817 	ldw	r20,32(sp)
    6ddc:	003d2f06 	br	629c <__alt_data_end+0xfffb0b6c>
    6de0:	9029883a 	mov	r20,r18
    6de4:	982b883a 	mov	r21,r19
    6de8:	04400084 	movi	r17,2
    6dec:	003bc606 	br	5d08 <__alt_data_end+0xfffb05d8>
    6df0:	d8800617 	ldw	r2,24(sp)
    6df4:	103efc26 	beq	r2,zero,69e8 <__alt_data_end+0xfffb12b8>
    6df8:	d8c00d17 	ldw	r3,52(sp)
    6dfc:	00fc890e 	bge	zero,r3,6024 <__alt_data_end+0xfffb08f4>
    6e00:	a80b883a 	mov	r5,r21
    6e04:	a009883a 	mov	r4,r20
    6e08:	000d883a 	mov	r6,zero
    6e0c:	01d00934 	movhi	r7,16420
    6e10:	000e0380 	call	e038 <__muldf3>
    6e14:	89000044 	addi	r4,r17,1
    6e18:	1029883a 	mov	r20,r2
    6e1c:	182b883a 	mov	r21,r3
    6e20:	000f1fc0 	call	f1fc <__floatsidf>
    6e24:	a009883a 	mov	r4,r20
    6e28:	a80b883a 	mov	r5,r21
    6e2c:	100d883a 	mov	r6,r2
    6e30:	180f883a 	mov	r7,r3
    6e34:	000e0380 	call	e038 <__muldf3>
    6e38:	1009883a 	mov	r4,r2
    6e3c:	180b883a 	mov	r5,r3
    6e40:	000d883a 	mov	r6,zero
    6e44:	01d00734 	movhi	r7,16412
    6e48:	000cbd80 	call	cbd8 <__adddf3>
    6e4c:	d9000517 	ldw	r4,20(sp)
    6e50:	1023883a 	mov	r17,r2
    6e54:	00bf3034 	movhi	r2,64704
    6e58:	213fffc4 	addi	r4,r4,-1
    6e5c:	1885883a 	add	r2,r3,r2
    6e60:	d9001215 	stw	r4,72(sp)
    6e64:	d8800e15 	stw	r2,56(sp)
    6e68:	da800d17 	ldw	r10,52(sp)
    6e6c:	003bc306 	br	5d7c <__alt_data_end+0xfffb064c>
    6e70:	b039883a 	mov	fp,r22
    6e74:	01000e44 	movi	r4,57
    6e78:	8825883a 	mov	r18,r17
    6e7c:	9dc00044 	addi	r23,r19,1
    6e80:	99000005 	stb	r4,0(r19)
    6e84:	a023883a 	mov	r17,r20
    6e88:	003dae06 	br	6544 <__alt_data_end+0xfffb0e14>
    6e8c:	d9800e17 	ldw	r6,56(sp)
    6e90:	d9c01117 	ldw	r7,68(sp)
    6e94:	0009883a 	mov	r4,zero
    6e98:	014ff834 	movhi	r5,16352
    6e9c:	da001715 	stw	r8,92(sp)
    6ea0:	da401515 	stw	r9,84(sp)
    6ea4:	000e8a40 	call	e8a4 <__subdf3>
    6ea8:	da001717 	ldw	r8,92(sp)
    6eac:	da401517 	ldw	r9,84(sp)
    6eb0:	1009883a 	mov	r4,r2
    6eb4:	180b883a 	mov	r5,r3
    6eb8:	400d883a 	mov	r6,r8
    6ebc:	480f883a 	mov	r7,r9
    6ec0:	000de780 	call	de78 <__gedf2>
    6ec4:	00bc570e 	bge	zero,r2,6024 <__alt_data_end+0xfffb08f4>
    6ec8:	01000c04 	movi	r4,48
    6ecc:	00000106 	br	6ed4 <_dtoa_r+0x1624>
    6ed0:	102f883a 	mov	r23,r2
    6ed4:	b8bfffc4 	addi	r2,r23,-1
    6ed8:	10c00007 	ldb	r3,0(r2)
    6edc:	193ffc26 	beq	r3,r4,6ed0 <__alt_data_end+0xfffb17a0>
    6ee0:	d9801217 	ldw	r6,72(sp)
    6ee4:	d9800515 	stw	r6,20(sp)
    6ee8:	003c1f06 	br	5f68 <__alt_data_end+0xfffb0838>
    6eec:	d8801217 	ldw	r2,72(sp)
    6ef0:	dc001117 	ldw	r16,68(sp)
    6ef4:	d8800515 	stw	r2,20(sp)
    6ef8:	003cc906 	br	6220 <__alt_data_end+0xfffb0af0>
    6efc:	dd801317 	ldw	r22,76(sp)
    6f00:	dc001117 	ldw	r16,68(sp)
    6f04:	dcc01417 	ldw	r19,80(sp)
    6f08:	dc801017 	ldw	r18,64(sp)
    6f0c:	003c4506 	br	6024 <__alt_data_end+0xfffb08f4>
    6f10:	103e5d1e 	bne	r2,zero,6888 <__alt_data_end+0xfffb1158>
    6f14:	4080004c 	andi	r2,r8,1
    6f18:	103e5b26 	beq	r2,zero,6888 <__alt_data_end+0xfffb1158>
    6f1c:	003e5706 	br	687c <__alt_data_end+0xfffb114c>
    6f20:	d8c00317 	ldw	r3,12(sp)
    6f24:	00800084 	movi	r2,2
    6f28:	10c00a16 	blt	r2,r3,6f54 <_dtoa_r+0x16a4>
    6f2c:	d9000d17 	ldw	r4,52(sp)
    6f30:	003e8306 	br	6940 <__alt_data_end+0xfffb1210>
    6f34:	04400084 	movi	r17,2
    6f38:	003b7306 	br	5d08 <__alt_data_end+0xfffb05d8>
    6f3c:	d9801217 	ldw	r6,72(sp)
    6f40:	d9800515 	stw	r6,20(sp)
    6f44:	003cb606 	br	6220 <__alt_data_end+0xfffb0af0>
    6f48:	d9001217 	ldw	r4,72(sp)
    6f4c:	d9000515 	stw	r4,20(sp)
    6f50:	003c0506 	br	5f68 <__alt_data_end+0xfffb0838>
    6f54:	d9800d17 	ldw	r6,52(sp)
    6f58:	d9800615 	stw	r6,24(sp)
    6f5c:	003e8306 	br	696c <__alt_data_end+0xfffb123c>
    6f60:	d9800317 	ldw	r6,12(sp)
    6f64:	00800084 	movi	r2,2
    6f68:	11800216 	blt	r2,r6,6f74 <_dtoa_r+0x16c4>
    6f6c:	d8800d17 	ldw	r2,52(sp)
    6f70:	003da606 	br	660c <__alt_data_end+0xfffb0edc>
    6f74:	d8800d17 	ldw	r2,52(sp)
    6f78:	d8800615 	stw	r2,24(sp)
    6f7c:	003e7b06 	br	696c <__alt_data_end+0xfffb123c>
    6f80:	05000044 	movi	r20,1
    6f84:	003b0506 	br	5b9c <__alt_data_end+0xfffb046c>
    6f88:	8009883a 	mov	r4,r16
    6f8c:	80001115 	stw	zero,68(r16)
    6f90:	000b883a 	mov	r5,zero
    6f94:	00087440 	call	8744 <_Balloc>
    6f98:	d8800715 	stw	r2,28(sp)
    6f9c:	d8c00717 	ldw	r3,28(sp)
    6fa0:	00bfffc4 	movi	r2,-1
    6fa4:	01000044 	movi	r4,1
    6fa8:	d8800615 	stw	r2,24(sp)
    6fac:	80c01015 	stw	r3,64(r16)
    6fb0:	d9000b15 	stw	r4,44(sp)
    6fb4:	d8002215 	stw	zero,136(sp)
    6fb8:	d8800d15 	stw	r2,52(sp)
    6fbc:	003c1906 	br	6024 <__alt_data_end+0xfffb08f4>
    6fc0:	193d2926 	beq	r3,r4,6468 <__alt_data_end+0xfffb0d38>
    6fc4:	00c00f04 	movi	r3,60
    6fc8:	1885c83a 	sub	r2,r3,r2
    6fcc:	003d7b06 	br	65bc <__alt_data_end+0xfffb0e8c>
    6fd0:	000b883a 	mov	r5,zero
    6fd4:	003b1006 	br	5c18 <__alt_data_end+0xfffb04e8>

00006fd8 <_fflush_r>:
    6fd8:	defffb04 	addi	sp,sp,-20
    6fdc:	dcc00315 	stw	r19,12(sp)
    6fe0:	dc000015 	stw	r16,0(sp)
    6fe4:	dfc00415 	stw	ra,16(sp)
    6fe8:	dc800215 	stw	r18,8(sp)
    6fec:	dc400115 	stw	r17,4(sp)
    6ff0:	2027883a 	mov	r19,r4
    6ff4:	2821883a 	mov	r16,r5
    6ff8:	20000226 	beq	r4,zero,7004 <_fflush_r+0x2c>
    6ffc:	20800e17 	ldw	r2,56(r4)
    7000:	10005326 	beq	r2,zero,7150 <_fflush_r+0x178>
    7004:	8080030b 	ldhu	r2,12(r16)
    7008:	10ffffcc 	andi	r3,r2,65535
    700c:	18e0001c 	xori	r3,r3,32768
    7010:	18e00004 	addi	r3,r3,-32768
    7014:	18002c26 	beq	r3,zero,70c8 <_fflush_r+0xf0>
    7018:	10c0020c 	andi	r3,r2,8
    701c:	1800321e 	bne	r3,zero,70e8 <_fflush_r+0x110>
    7020:	80c00117 	ldw	r3,4(r16)
    7024:	10820014 	ori	r2,r2,2048
    7028:	8080030d 	sth	r2,12(r16)
    702c:	00c0570e 	bge	zero,r3,718c <_fflush_r+0x1b4>
    7030:	82000a17 	ldw	r8,40(r16)
    7034:	40002426 	beq	r8,zero,70c8 <_fflush_r+0xf0>
    7038:	9c400017 	ldw	r17,0(r19)
    703c:	10c4000c 	andi	r3,r2,4096
    7040:	98000015 	stw	zero,0(r19)
    7044:	18004626 	beq	r3,zero,7160 <_fflush_r+0x188>
    7048:	81801417 	ldw	r6,80(r16)
    704c:	10c0010c 	andi	r3,r2,4
    7050:	18000626 	beq	r3,zero,706c <_fflush_r+0x94>
    7054:	80c00117 	ldw	r3,4(r16)
    7058:	80800c17 	ldw	r2,48(r16)
    705c:	30cdc83a 	sub	r6,r6,r3
    7060:	10000226 	beq	r2,zero,706c <_fflush_r+0x94>
    7064:	80800f17 	ldw	r2,60(r16)
    7068:	308dc83a 	sub	r6,r6,r2
    706c:	81400717 	ldw	r5,28(r16)
    7070:	9809883a 	mov	r4,r19
    7074:	000f883a 	mov	r7,zero
    7078:	403ee83a 	callr	r8
    707c:	00ffffc4 	movi	r3,-1
    7080:	10c04526 	beq	r2,r3,7198 <_fflush_r+0x1c0>
    7084:	80c0030b 	ldhu	r3,12(r16)
    7088:	81000417 	ldw	r4,16(r16)
    708c:	80000115 	stw	zero,4(r16)
    7090:	197dffcc 	andi	r5,r3,63487
    7094:	8140030d 	sth	r5,12(r16)
    7098:	81000015 	stw	r4,0(r16)
    709c:	18c4000c 	andi	r3,r3,4096
    70a0:	18000126 	beq	r3,zero,70a8 <_fflush_r+0xd0>
    70a4:	80801415 	stw	r2,80(r16)
    70a8:	81400c17 	ldw	r5,48(r16)
    70ac:	9c400015 	stw	r17,0(r19)
    70b0:	28000526 	beq	r5,zero,70c8 <_fflush_r+0xf0>
    70b4:	80801004 	addi	r2,r16,64
    70b8:	28800226 	beq	r5,r2,70c4 <_fflush_r+0xec>
    70bc:	9809883a 	mov	r4,r19
    70c0:	00077080 	call	7708 <_free_r>
    70c4:	80000c15 	stw	zero,48(r16)
    70c8:	0005883a 	mov	r2,zero
    70cc:	dfc00417 	ldw	ra,16(sp)
    70d0:	dcc00317 	ldw	r19,12(sp)
    70d4:	dc800217 	ldw	r18,8(sp)
    70d8:	dc400117 	ldw	r17,4(sp)
    70dc:	dc000017 	ldw	r16,0(sp)
    70e0:	dec00504 	addi	sp,sp,20
    70e4:	f800283a 	ret
    70e8:	84800417 	ldw	r18,16(r16)
    70ec:	903ff626 	beq	r18,zero,70c8 <__alt_data_end+0xfffb1998>
    70f0:	84400017 	ldw	r17,0(r16)
    70f4:	108000cc 	andi	r2,r2,3
    70f8:	84800015 	stw	r18,0(r16)
    70fc:	8ca3c83a 	sub	r17,r17,r18
    7100:	10001526 	beq	r2,zero,7158 <_fflush_r+0x180>
    7104:	0005883a 	mov	r2,zero
    7108:	80800215 	stw	r2,8(r16)
    710c:	04400316 	blt	zero,r17,711c <_fflush_r+0x144>
    7110:	003fed06 	br	70c8 <__alt_data_end+0xfffb1998>
    7114:	90a5883a 	add	r18,r18,r2
    7118:	047feb0e 	bge	zero,r17,70c8 <__alt_data_end+0xfffb1998>
    711c:	80800917 	ldw	r2,36(r16)
    7120:	81400717 	ldw	r5,28(r16)
    7124:	880f883a 	mov	r7,r17
    7128:	900d883a 	mov	r6,r18
    712c:	9809883a 	mov	r4,r19
    7130:	103ee83a 	callr	r2
    7134:	88a3c83a 	sub	r17,r17,r2
    7138:	00bff616 	blt	zero,r2,7114 <__alt_data_end+0xfffb19e4>
    713c:	80c0030b 	ldhu	r3,12(r16)
    7140:	00bfffc4 	movi	r2,-1
    7144:	18c01014 	ori	r3,r3,64
    7148:	80c0030d 	sth	r3,12(r16)
    714c:	003fdf06 	br	70cc <__alt_data_end+0xfffb199c>
    7150:	00075940 	call	7594 <__sinit>
    7154:	003fab06 	br	7004 <__alt_data_end+0xfffb18d4>
    7158:	80800517 	ldw	r2,20(r16)
    715c:	003fea06 	br	7108 <__alt_data_end+0xfffb19d8>
    7160:	81400717 	ldw	r5,28(r16)
    7164:	000d883a 	mov	r6,zero
    7168:	9809883a 	mov	r4,r19
    716c:	01c00044 	movi	r7,1
    7170:	403ee83a 	callr	r8
    7174:	100d883a 	mov	r6,r2
    7178:	00bfffc4 	movi	r2,-1
    717c:	30801326 	beq	r6,r2,71cc <_fflush_r+0x1f4>
    7180:	8080030b 	ldhu	r2,12(r16)
    7184:	82000a17 	ldw	r8,40(r16)
    7188:	003fb006 	br	704c <__alt_data_end+0xfffb191c>
    718c:	80c00f17 	ldw	r3,60(r16)
    7190:	00ffa716 	blt	zero,r3,7030 <__alt_data_end+0xfffb1900>
    7194:	003fcc06 	br	70c8 <__alt_data_end+0xfffb1998>
    7198:	98c00017 	ldw	r3,0(r19)
    719c:	183fb926 	beq	r3,zero,7084 <__alt_data_end+0xfffb1954>
    71a0:	01000744 	movi	r4,29
    71a4:	19000226 	beq	r3,r4,71b0 <_fflush_r+0x1d8>
    71a8:	01000584 	movi	r4,22
    71ac:	1900101e 	bne	r3,r4,71f0 <_fflush_r+0x218>
    71b0:	8080030b 	ldhu	r2,12(r16)
    71b4:	80c00417 	ldw	r3,16(r16)
    71b8:	80000115 	stw	zero,4(r16)
    71bc:	10bdffcc 	andi	r2,r2,63487
    71c0:	8080030d 	sth	r2,12(r16)
    71c4:	80c00015 	stw	r3,0(r16)
    71c8:	003fb706 	br	70a8 <__alt_data_end+0xfffb1978>
    71cc:	98800017 	ldw	r2,0(r19)
    71d0:	103feb26 	beq	r2,zero,7180 <__alt_data_end+0xfffb1a50>
    71d4:	00c00744 	movi	r3,29
    71d8:	10c00226 	beq	r2,r3,71e4 <_fflush_r+0x20c>
    71dc:	00c00584 	movi	r3,22
    71e0:	10ffd61e 	bne	r2,r3,713c <__alt_data_end+0xfffb1a0c>
    71e4:	9c400015 	stw	r17,0(r19)
    71e8:	0005883a 	mov	r2,zero
    71ec:	003fb706 	br	70cc <__alt_data_end+0xfffb199c>
    71f0:	80c0030b 	ldhu	r3,12(r16)
    71f4:	18c01014 	ori	r3,r3,64
    71f8:	80c0030d 	sth	r3,12(r16)
    71fc:	003fb306 	br	70cc <__alt_data_end+0xfffb199c>

00007200 <fflush>:
    7200:	20000526 	beq	r4,zero,7218 <fflush+0x18>
    7204:	00800074 	movhi	r2,1
    7208:	10906104 	addi	r2,r2,16772
    720c:	200b883a 	mov	r5,r4
    7210:	11000017 	ldw	r4,0(r2)
    7214:	0006fd81 	jmpi	6fd8 <_fflush_r>
    7218:	00800074 	movhi	r2,1
    721c:	10906004 	addi	r2,r2,16768
    7220:	11000017 	ldw	r4,0(r2)
    7224:	01400034 	movhi	r5,0
    7228:	295bf604 	addi	r5,r5,28632
    722c:	0007f541 	jmpi	7f54 <_fwalk_reent>

00007230 <__fp_lock>:
    7230:	0005883a 	mov	r2,zero
    7234:	f800283a 	ret

00007238 <__fp_unlock>:
    7238:	0005883a 	mov	r2,zero
    723c:	f800283a 	ret

00007240 <_cleanup_r>:
    7240:	01400074 	movhi	r5,1
    7244:	296dd904 	addi	r5,r5,-18588
    7248:	0007e9c1 	jmpi	7e9c <_fwalk>

0000724c <__sinit.part.1>:
    724c:	defff604 	addi	sp,sp,-40
    7250:	00c00034 	movhi	r3,0
    7254:	dfc00915 	stw	ra,36(sp)
    7258:	df000815 	stw	fp,32(sp)
    725c:	ddc00715 	stw	r23,28(sp)
    7260:	dd800615 	stw	r22,24(sp)
    7264:	dd400515 	stw	r21,20(sp)
    7268:	dd000415 	stw	r20,16(sp)
    726c:	dcc00315 	stw	r19,12(sp)
    7270:	dc800215 	stw	r18,8(sp)
    7274:	dc400115 	stw	r17,4(sp)
    7278:	dc000015 	stw	r16,0(sp)
    727c:	18dc9004 	addi	r3,r3,29248
    7280:	24000117 	ldw	r16,4(r4)
    7284:	20c00f15 	stw	r3,60(r4)
    7288:	07000044 	movi	fp,1
    728c:	00c000c4 	movi	r3,3
    7290:	2080bb04 	addi	r2,r4,748
    7294:	20c0b915 	stw	r3,740(r4)
    7298:	27000e15 	stw	fp,56(r4)
    729c:	2080ba15 	stw	r2,744(r4)
    72a0:	2000b815 	stw	zero,736(r4)
    72a4:	05c00204 	movi	r23,8
    72a8:	00800104 	movi	r2,4
    72ac:	2025883a 	mov	r18,r4
    72b0:	b80d883a 	mov	r6,r23
    72b4:	81001704 	addi	r4,r16,92
    72b8:	000b883a 	mov	r5,zero
    72bc:	80000015 	stw	zero,0(r16)
    72c0:	80000115 	stw	zero,4(r16)
    72c4:	80000215 	stw	zero,8(r16)
    72c8:	8080030d 	sth	r2,12(r16)
    72cc:	80001915 	stw	zero,100(r16)
    72d0:	8000038d 	sth	zero,14(r16)
    72d4:	80000415 	stw	zero,16(r16)
    72d8:	80000515 	stw	zero,20(r16)
    72dc:	80000615 	stw	zero,24(r16)
    72e0:	00086200 	call	8620 <memset>
    72e4:	05800074 	movhi	r22,1
    72e8:	94400217 	ldw	r17,8(r18)
    72ec:	05400074 	movhi	r21,1
    72f0:	05000074 	movhi	r20,1
    72f4:	04c00074 	movhi	r19,1
    72f8:	b5a76804 	addi	r22,r22,-25184
    72fc:	ad677f04 	addi	r21,r21,-25092
    7300:	a5279e04 	addi	r20,r20,-24968
    7304:	9ce7b504 	addi	r19,r19,-24876
    7308:	85800815 	stw	r22,32(r16)
    730c:	85400915 	stw	r21,36(r16)
    7310:	85000a15 	stw	r20,40(r16)
    7314:	84c00b15 	stw	r19,44(r16)
    7318:	84000715 	stw	r16,28(r16)
    731c:	00800284 	movi	r2,10
    7320:	89001704 	addi	r4,r17,92
    7324:	b80d883a 	mov	r6,r23
    7328:	000b883a 	mov	r5,zero
    732c:	88000015 	stw	zero,0(r17)
    7330:	88000115 	stw	zero,4(r17)
    7334:	88000215 	stw	zero,8(r17)
    7338:	8880030d 	sth	r2,12(r17)
    733c:	88001915 	stw	zero,100(r17)
    7340:	8f00038d 	sth	fp,14(r17)
    7344:	88000415 	stw	zero,16(r17)
    7348:	88000515 	stw	zero,20(r17)
    734c:	88000615 	stw	zero,24(r17)
    7350:	00086200 	call	8620 <memset>
    7354:	94000317 	ldw	r16,12(r18)
    7358:	00800484 	movi	r2,18
    735c:	8c400715 	stw	r17,28(r17)
    7360:	8d800815 	stw	r22,32(r17)
    7364:	8d400915 	stw	r21,36(r17)
    7368:	8d000a15 	stw	r20,40(r17)
    736c:	8cc00b15 	stw	r19,44(r17)
    7370:	8080030d 	sth	r2,12(r16)
    7374:	00800084 	movi	r2,2
    7378:	80000015 	stw	zero,0(r16)
    737c:	80000115 	stw	zero,4(r16)
    7380:	80000215 	stw	zero,8(r16)
    7384:	80001915 	stw	zero,100(r16)
    7388:	8080038d 	sth	r2,14(r16)
    738c:	80000415 	stw	zero,16(r16)
    7390:	80000515 	stw	zero,20(r16)
    7394:	80000615 	stw	zero,24(r16)
    7398:	81001704 	addi	r4,r16,92
    739c:	000b883a 	mov	r5,zero
    73a0:	b80d883a 	mov	r6,r23
    73a4:	00086200 	call	8620 <memset>
    73a8:	84000715 	stw	r16,28(r16)
    73ac:	85800815 	stw	r22,32(r16)
    73b0:	85400915 	stw	r21,36(r16)
    73b4:	85000a15 	stw	r20,40(r16)
    73b8:	84c00b15 	stw	r19,44(r16)
    73bc:	dfc00917 	ldw	ra,36(sp)
    73c0:	df000817 	ldw	fp,32(sp)
    73c4:	ddc00717 	ldw	r23,28(sp)
    73c8:	dd800617 	ldw	r22,24(sp)
    73cc:	dd400517 	ldw	r21,20(sp)
    73d0:	dd000417 	ldw	r20,16(sp)
    73d4:	dcc00317 	ldw	r19,12(sp)
    73d8:	dc800217 	ldw	r18,8(sp)
    73dc:	dc400117 	ldw	r17,4(sp)
    73e0:	dc000017 	ldw	r16,0(sp)
    73e4:	dec00a04 	addi	sp,sp,40
    73e8:	f800283a 	ret

000073ec <__sfmoreglue>:
    73ec:	defffc04 	addi	sp,sp,-16
    73f0:	dc800215 	stw	r18,8(sp)
    73f4:	2825883a 	mov	r18,r5
    73f8:	dc000015 	stw	r16,0(sp)
    73fc:	01401a04 	movi	r5,104
    7400:	2021883a 	mov	r16,r4
    7404:	9009883a 	mov	r4,r18
    7408:	dfc00315 	stw	ra,12(sp)
    740c:	dc400115 	stw	r17,4(sp)
    7410:	000cbb00 	call	cbb0 <__mulsi3>
    7414:	8009883a 	mov	r4,r16
    7418:	11400304 	addi	r5,r2,12
    741c:	1023883a 	mov	r17,r2
    7420:	0002a700 	call	2a70 <_malloc_r>
    7424:	1021883a 	mov	r16,r2
    7428:	10000726 	beq	r2,zero,7448 <__sfmoreglue+0x5c>
    742c:	11000304 	addi	r4,r2,12
    7430:	10000015 	stw	zero,0(r2)
    7434:	14800115 	stw	r18,4(r2)
    7438:	11000215 	stw	r4,8(r2)
    743c:	000b883a 	mov	r5,zero
    7440:	880d883a 	mov	r6,r17
    7444:	00086200 	call	8620 <memset>
    7448:	8005883a 	mov	r2,r16
    744c:	dfc00317 	ldw	ra,12(sp)
    7450:	dc800217 	ldw	r18,8(sp)
    7454:	dc400117 	ldw	r17,4(sp)
    7458:	dc000017 	ldw	r16,0(sp)
    745c:	dec00404 	addi	sp,sp,16
    7460:	f800283a 	ret

00007464 <__sfp>:
    7464:	00800074 	movhi	r2,1
    7468:	defffb04 	addi	sp,sp,-20
    746c:	10906004 	addi	r2,r2,16768
    7470:	dc800215 	stw	r18,8(sp)
    7474:	14800017 	ldw	r18,0(r2)
    7478:	dcc00315 	stw	r19,12(sp)
    747c:	dfc00415 	stw	ra,16(sp)
    7480:	90800e17 	ldw	r2,56(r18)
    7484:	dc400115 	stw	r17,4(sp)
    7488:	dc000015 	stw	r16,0(sp)
    748c:	2027883a 	mov	r19,r4
    7490:	1000021e 	bne	r2,zero,749c <__sfp+0x38>
    7494:	9009883a 	mov	r4,r18
    7498:	000724c0 	call	724c <__sinit.part.1>
    749c:	9480b804 	addi	r18,r18,736
    74a0:	047fffc4 	movi	r17,-1
    74a4:	91400117 	ldw	r5,4(r18)
    74a8:	94000217 	ldw	r16,8(r18)
    74ac:	297fffc4 	addi	r5,r5,-1
    74b0:	28000a16 	blt	r5,zero,74dc <__sfp+0x78>
    74b4:	8080030f 	ldh	r2,12(r16)
    74b8:	10000c26 	beq	r2,zero,74ec <__sfp+0x88>
    74bc:	80c01d04 	addi	r3,r16,116
    74c0:	00000206 	br	74cc <__sfp+0x68>
    74c4:	18bfe60f 	ldh	r2,-104(r3)
    74c8:	10000826 	beq	r2,zero,74ec <__sfp+0x88>
    74cc:	297fffc4 	addi	r5,r5,-1
    74d0:	1c3ffd04 	addi	r16,r3,-12
    74d4:	18c01a04 	addi	r3,r3,104
    74d8:	2c7ffa1e 	bne	r5,r17,74c4 <__alt_data_end+0xfffb1d94>
    74dc:	90800017 	ldw	r2,0(r18)
    74e0:	10001d26 	beq	r2,zero,7558 <__sfp+0xf4>
    74e4:	1025883a 	mov	r18,r2
    74e8:	003fee06 	br	74a4 <__alt_data_end+0xfffb1d74>
    74ec:	00bfffc4 	movi	r2,-1
    74f0:	8080038d 	sth	r2,14(r16)
    74f4:	00800044 	movi	r2,1
    74f8:	8080030d 	sth	r2,12(r16)
    74fc:	80001915 	stw	zero,100(r16)
    7500:	80000015 	stw	zero,0(r16)
    7504:	80000215 	stw	zero,8(r16)
    7508:	80000115 	stw	zero,4(r16)
    750c:	80000415 	stw	zero,16(r16)
    7510:	80000515 	stw	zero,20(r16)
    7514:	80000615 	stw	zero,24(r16)
    7518:	81001704 	addi	r4,r16,92
    751c:	000b883a 	mov	r5,zero
    7520:	01800204 	movi	r6,8
    7524:	00086200 	call	8620 <memset>
    7528:	8005883a 	mov	r2,r16
    752c:	80000c15 	stw	zero,48(r16)
    7530:	80000d15 	stw	zero,52(r16)
    7534:	80001115 	stw	zero,68(r16)
    7538:	80001215 	stw	zero,72(r16)
    753c:	dfc00417 	ldw	ra,16(sp)
    7540:	dcc00317 	ldw	r19,12(sp)
    7544:	dc800217 	ldw	r18,8(sp)
    7548:	dc400117 	ldw	r17,4(sp)
    754c:	dc000017 	ldw	r16,0(sp)
    7550:	dec00504 	addi	sp,sp,20
    7554:	f800283a 	ret
    7558:	9809883a 	mov	r4,r19
    755c:	01400104 	movi	r5,4
    7560:	00073ec0 	call	73ec <__sfmoreglue>
    7564:	90800015 	stw	r2,0(r18)
    7568:	103fde1e 	bne	r2,zero,74e4 <__alt_data_end+0xfffb1db4>
    756c:	00800304 	movi	r2,12
    7570:	98800015 	stw	r2,0(r19)
    7574:	0005883a 	mov	r2,zero
    7578:	003ff006 	br	753c <__alt_data_end+0xfffb1e0c>

0000757c <_cleanup>:
    757c:	00800074 	movhi	r2,1
    7580:	10906004 	addi	r2,r2,16768
    7584:	11000017 	ldw	r4,0(r2)
    7588:	01400074 	movhi	r5,1
    758c:	296dd904 	addi	r5,r5,-18588
    7590:	0007e9c1 	jmpi	7e9c <_fwalk>

00007594 <__sinit>:
    7594:	20800e17 	ldw	r2,56(r4)
    7598:	10000126 	beq	r2,zero,75a0 <__sinit+0xc>
    759c:	f800283a 	ret
    75a0:	000724c1 	jmpi	724c <__sinit.part.1>

000075a4 <__sfp_lock_acquire>:
    75a4:	f800283a 	ret

000075a8 <__sfp_lock_release>:
    75a8:	f800283a 	ret

000075ac <__sinit_lock_acquire>:
    75ac:	f800283a 	ret

000075b0 <__sinit_lock_release>:
    75b0:	f800283a 	ret

000075b4 <__fp_lock_all>:
    75b4:	00800074 	movhi	r2,1
    75b8:	10906104 	addi	r2,r2,16772
    75bc:	11000017 	ldw	r4,0(r2)
    75c0:	01400034 	movhi	r5,0
    75c4:	295c8c04 	addi	r5,r5,29232
    75c8:	0007e9c1 	jmpi	7e9c <_fwalk>

000075cc <__fp_unlock_all>:
    75cc:	00800074 	movhi	r2,1
    75d0:	10906104 	addi	r2,r2,16772
    75d4:	11000017 	ldw	r4,0(r2)
    75d8:	01400034 	movhi	r5,0
    75dc:	295c8e04 	addi	r5,r5,29240
    75e0:	0007e9c1 	jmpi	7e9c <_fwalk>

000075e4 <_malloc_trim_r>:
    75e4:	defffb04 	addi	sp,sp,-20
    75e8:	dcc00315 	stw	r19,12(sp)
    75ec:	04c00074 	movhi	r19,1
    75f0:	dc800215 	stw	r18,8(sp)
    75f4:	dc400115 	stw	r17,4(sp)
    75f8:	dc000015 	stw	r16,0(sp)
    75fc:	dfc00415 	stw	ra,16(sp)
    7600:	2821883a 	mov	r16,r5
    7604:	9cc9b304 	addi	r19,r19,9932
    7608:	2025883a 	mov	r18,r4
    760c:	000f9b40 	call	f9b4 <__malloc_lock>
    7610:	98800217 	ldw	r2,8(r19)
    7614:	14400117 	ldw	r17,4(r2)
    7618:	00bfff04 	movi	r2,-4
    761c:	88a2703a 	and	r17,r17,r2
    7620:	8c21c83a 	sub	r16,r17,r16
    7624:	8403fbc4 	addi	r16,r16,4079
    7628:	8020d33a 	srli	r16,r16,12
    762c:	0083ffc4 	movi	r2,4095
    7630:	843fffc4 	addi	r16,r16,-1
    7634:	8020933a 	slli	r16,r16,12
    7638:	1400060e 	bge	r2,r16,7654 <_malloc_trim_r+0x70>
    763c:	9009883a 	mov	r4,r18
    7640:	000b883a 	mov	r5,zero
    7644:	000334c0 	call	334c <_sbrk_r>
    7648:	98c00217 	ldw	r3,8(r19)
    764c:	1c47883a 	add	r3,r3,r17
    7650:	10c00a26 	beq	r2,r3,767c <_malloc_trim_r+0x98>
    7654:	9009883a 	mov	r4,r18
    7658:	000f9d40 	call	f9d4 <__malloc_unlock>
    765c:	0005883a 	mov	r2,zero
    7660:	dfc00417 	ldw	ra,16(sp)
    7664:	dcc00317 	ldw	r19,12(sp)
    7668:	dc800217 	ldw	r18,8(sp)
    766c:	dc400117 	ldw	r17,4(sp)
    7670:	dc000017 	ldw	r16,0(sp)
    7674:	dec00504 	addi	sp,sp,20
    7678:	f800283a 	ret
    767c:	9009883a 	mov	r4,r18
    7680:	040bc83a 	sub	r5,zero,r16
    7684:	000334c0 	call	334c <_sbrk_r>
    7688:	00ffffc4 	movi	r3,-1
    768c:	10c00d26 	beq	r2,r3,76c4 <_malloc_trim_r+0xe0>
    7690:	00c00074 	movhi	r3,1
    7694:	18d73f04 	addi	r3,r3,23804
    7698:	18800017 	ldw	r2,0(r3)
    769c:	99000217 	ldw	r4,8(r19)
    76a0:	8c23c83a 	sub	r17,r17,r16
    76a4:	8c400054 	ori	r17,r17,1
    76a8:	1421c83a 	sub	r16,r2,r16
    76ac:	24400115 	stw	r17,4(r4)
    76b0:	9009883a 	mov	r4,r18
    76b4:	1c000015 	stw	r16,0(r3)
    76b8:	000f9d40 	call	f9d4 <__malloc_unlock>
    76bc:	00800044 	movi	r2,1
    76c0:	003fe706 	br	7660 <__alt_data_end+0xfffb1f30>
    76c4:	9009883a 	mov	r4,r18
    76c8:	000b883a 	mov	r5,zero
    76cc:	000334c0 	call	334c <_sbrk_r>
    76d0:	99000217 	ldw	r4,8(r19)
    76d4:	014003c4 	movi	r5,15
    76d8:	1107c83a 	sub	r3,r2,r4
    76dc:	28ffdd0e 	bge	r5,r3,7654 <__alt_data_end+0xfffb1f24>
    76e0:	01400074 	movhi	r5,1
    76e4:	29505e04 	addi	r5,r5,16760
    76e8:	29400017 	ldw	r5,0(r5)
    76ec:	18c00054 	ori	r3,r3,1
    76f0:	20c00115 	stw	r3,4(r4)
    76f4:	00c00074 	movhi	r3,1
    76f8:	1145c83a 	sub	r2,r2,r5
    76fc:	18d73f04 	addi	r3,r3,23804
    7700:	18800015 	stw	r2,0(r3)
    7704:	003fd306 	br	7654 <__alt_data_end+0xfffb1f24>

00007708 <_free_r>:
    7708:	28004c26 	beq	r5,zero,783c <_free_r+0x134>
    770c:	defffd04 	addi	sp,sp,-12
    7710:	dc400115 	stw	r17,4(sp)
    7714:	dc000015 	stw	r16,0(sp)
    7718:	2023883a 	mov	r17,r4
    771c:	2821883a 	mov	r16,r5
    7720:	dfc00215 	stw	ra,8(sp)
    7724:	000f9b40 	call	f9b4 <__malloc_lock>
    7728:	813fff17 	ldw	r4,-4(r16)
    772c:	00bfff84 	movi	r2,-2
    7730:	02400074 	movhi	r9,1
    7734:	81bffe04 	addi	r6,r16,-8
    7738:	2084703a 	and	r2,r4,r2
    773c:	4a49b304 	addi	r9,r9,9932
    7740:	308b883a 	add	r5,r6,r2
    7744:	2a000117 	ldw	r8,4(r5)
    7748:	49c00217 	ldw	r7,8(r9)
    774c:	00ffff04 	movi	r3,-4
    7750:	40c6703a 	and	r3,r8,r3
    7754:	39405326 	beq	r7,r5,78a4 <_free_r+0x19c>
    7758:	28c00115 	stw	r3,4(r5)
    775c:	2100004c 	andi	r4,r4,1
    7760:	2000091e 	bne	r4,zero,7788 <_free_r+0x80>
    7764:	81fffe17 	ldw	r7,-8(r16)
    7768:	4a000204 	addi	r8,r9,8
    776c:	31cdc83a 	sub	r6,r6,r7
    7770:	31000217 	ldw	r4,8(r6)
    7774:	11c5883a 	add	r2,r2,r7
    7778:	22006126 	beq	r4,r8,7900 <_free_r+0x1f8>
    777c:	31c00317 	ldw	r7,12(r6)
    7780:	21c00315 	stw	r7,12(r4)
    7784:	39000215 	stw	r4,8(r7)
    7788:	28c9883a 	add	r4,r5,r3
    778c:	21c00117 	ldw	r7,4(r4)
    7790:	39c0004c 	andi	r7,r7,1
    7794:	38000d1e 	bne	r7,zero,77cc <_free_r+0xc4>
    7798:	29000217 	ldw	r4,8(r5)
    779c:	10c5883a 	add	r2,r2,r3
    77a0:	00c00074 	movhi	r3,1
    77a4:	18c9b504 	addi	r3,r3,9940
    77a8:	20c07526 	beq	r4,r3,7980 <_free_r+0x278>
    77ac:	29c00317 	ldw	r7,12(r5)
    77b0:	11400054 	ori	r5,r2,1
    77b4:	3087883a 	add	r3,r6,r2
    77b8:	21c00315 	stw	r7,12(r4)
    77bc:	39000215 	stw	r4,8(r7)
    77c0:	31400115 	stw	r5,4(r6)
    77c4:	18800015 	stw	r2,0(r3)
    77c8:	00000406 	br	77dc <_free_r+0xd4>
    77cc:	10c00054 	ori	r3,r2,1
    77d0:	30c00115 	stw	r3,4(r6)
    77d4:	3087883a 	add	r3,r6,r2
    77d8:	18800015 	stw	r2,0(r3)
    77dc:	00c07fc4 	movi	r3,511
    77e0:	18801736 	bltu	r3,r2,7840 <_free_r+0x138>
    77e4:	1004d0fa 	srli	r2,r2,3
    77e8:	01400044 	movi	r5,1
    77ec:	49000117 	ldw	r4,4(r9)
    77f0:	1087883a 	add	r3,r2,r2
    77f4:	18c7883a 	add	r3,r3,r3
    77f8:	1005d0ba 	srai	r2,r2,2
    77fc:	18c7883a 	add	r3,r3,r3
    7800:	1a47883a 	add	r3,r3,r9
    7804:	19c00217 	ldw	r7,8(r3)
    7808:	2884983a 	sll	r2,r5,r2
    780c:	30c00315 	stw	r3,12(r6)
    7810:	31c00215 	stw	r7,8(r6)
    7814:	1104b03a 	or	r2,r2,r4
    7818:	19800215 	stw	r6,8(r3)
    781c:	48800115 	stw	r2,4(r9)
    7820:	39800315 	stw	r6,12(r7)
    7824:	8809883a 	mov	r4,r17
    7828:	dfc00217 	ldw	ra,8(sp)
    782c:	dc400117 	ldw	r17,4(sp)
    7830:	dc000017 	ldw	r16,0(sp)
    7834:	dec00304 	addi	sp,sp,12
    7838:	000f9d41 	jmpi	f9d4 <__malloc_unlock>
    783c:	f800283a 	ret
    7840:	1006d27a 	srli	r3,r2,9
    7844:	01000104 	movi	r4,4
    7848:	20c04036 	bltu	r4,r3,794c <_free_r+0x244>
    784c:	1006d1ba 	srli	r3,r2,6
    7850:	19400e04 	addi	r5,r3,56
    7854:	2947883a 	add	r3,r5,r5
    7858:	18c7883a 	add	r3,r3,r3
    785c:	18c7883a 	add	r3,r3,r3
    7860:	1a49883a 	add	r4,r3,r9
    7864:	20c00217 	ldw	r3,8(r4)
    7868:	01c00074 	movhi	r7,1
    786c:	39c9b304 	addi	r7,r7,9932
    7870:	19003b26 	beq	r3,r4,7960 <_free_r+0x258>
    7874:	01ffff04 	movi	r7,-4
    7878:	19400117 	ldw	r5,4(r3)
    787c:	29ca703a 	and	r5,r5,r7
    7880:	1140022e 	bgeu	r2,r5,788c <_free_r+0x184>
    7884:	18c00217 	ldw	r3,8(r3)
    7888:	20fffb1e 	bne	r4,r3,7878 <__alt_data_end+0xfffb2148>
    788c:	18800317 	ldw	r2,12(r3)
    7890:	30800315 	stw	r2,12(r6)
    7894:	30c00215 	stw	r3,8(r6)
    7898:	11800215 	stw	r6,8(r2)
    789c:	19800315 	stw	r6,12(r3)
    78a0:	003fe006 	br	7824 <__alt_data_end+0xfffb20f4>
    78a4:	2100004c 	andi	r4,r4,1
    78a8:	1885883a 	add	r2,r3,r2
    78ac:	2000071e 	bne	r4,zero,78cc <_free_r+0x1c4>
    78b0:	817ffe17 	ldw	r5,-8(r16)
    78b4:	314dc83a 	sub	r6,r6,r5
    78b8:	30c00317 	ldw	r3,12(r6)
    78bc:	31000217 	ldw	r4,8(r6)
    78c0:	1145883a 	add	r2,r2,r5
    78c4:	20c00315 	stw	r3,12(r4)
    78c8:	19000215 	stw	r4,8(r3)
    78cc:	10c00054 	ori	r3,r2,1
    78d0:	30c00115 	stw	r3,4(r6)
    78d4:	00c00074 	movhi	r3,1
    78d8:	18d05f04 	addi	r3,r3,16764
    78dc:	18c00017 	ldw	r3,0(r3)
    78e0:	49800215 	stw	r6,8(r9)
    78e4:	10ffcf36 	bltu	r2,r3,7824 <__alt_data_end+0xfffb20f4>
    78e8:	00800074 	movhi	r2,1
    78ec:	10973304 	addi	r2,r2,23756
    78f0:	11400017 	ldw	r5,0(r2)
    78f4:	8809883a 	mov	r4,r17
    78f8:	00075e40 	call	75e4 <_malloc_trim_r>
    78fc:	003fc906 	br	7824 <__alt_data_end+0xfffb20f4>
    7900:	28c9883a 	add	r4,r5,r3
    7904:	21000117 	ldw	r4,4(r4)
    7908:	2100004c 	andi	r4,r4,1
    790c:	20000a1e 	bne	r4,zero,7938 <_free_r+0x230>
    7910:	29000317 	ldw	r4,12(r5)
    7914:	29400217 	ldw	r5,8(r5)
    7918:	10c5883a 	add	r2,r2,r3
    791c:	10c00054 	ori	r3,r2,1
    7920:	29000315 	stw	r4,12(r5)
    7924:	21400215 	stw	r5,8(r4)
    7928:	30c00115 	stw	r3,4(r6)
    792c:	308d883a 	add	r6,r6,r2
    7930:	30800015 	stw	r2,0(r6)
    7934:	003fbb06 	br	7824 <__alt_data_end+0xfffb20f4>
    7938:	10c00054 	ori	r3,r2,1
    793c:	30c00115 	stw	r3,4(r6)
    7940:	308d883a 	add	r6,r6,r2
    7944:	30800015 	stw	r2,0(r6)
    7948:	003fb606 	br	7824 <__alt_data_end+0xfffb20f4>
    794c:	01000504 	movi	r4,20
    7950:	20c01436 	bltu	r4,r3,79a4 <_free_r+0x29c>
    7954:	194016c4 	addi	r5,r3,91
    7958:	2947883a 	add	r3,r5,r5
    795c:	003fbe06 	br	7858 <__alt_data_end+0xfffb2128>
    7960:	280bd0ba 	srai	r5,r5,2
    7964:	00800044 	movi	r2,1
    7968:	39000117 	ldw	r4,4(r7)
    796c:	114a983a 	sll	r5,r2,r5
    7970:	1805883a 	mov	r2,r3
    7974:	2908b03a 	or	r4,r5,r4
    7978:	39000115 	stw	r4,4(r7)
    797c:	003fc406 	br	7890 <__alt_data_end+0xfffb2160>
    7980:	49800515 	stw	r6,20(r9)
    7984:	49800415 	stw	r6,16(r9)
    7988:	10c00054 	ori	r3,r2,1
    798c:	31000315 	stw	r4,12(r6)
    7990:	31000215 	stw	r4,8(r6)
    7994:	30c00115 	stw	r3,4(r6)
    7998:	308d883a 	add	r6,r6,r2
    799c:	30800015 	stw	r2,0(r6)
    79a0:	003fa006 	br	7824 <__alt_data_end+0xfffb20f4>
    79a4:	01001504 	movi	r4,84
    79a8:	20c00436 	bltu	r4,r3,79bc <_free_r+0x2b4>
    79ac:	1006d33a 	srli	r3,r2,12
    79b0:	19401b84 	addi	r5,r3,110
    79b4:	2947883a 	add	r3,r5,r5
    79b8:	003fa706 	br	7858 <__alt_data_end+0xfffb2128>
    79bc:	01005504 	movi	r4,340
    79c0:	20c00436 	bltu	r4,r3,79d4 <_free_r+0x2cc>
    79c4:	1006d3fa 	srli	r3,r2,15
    79c8:	19401dc4 	addi	r5,r3,119
    79cc:	2947883a 	add	r3,r5,r5
    79d0:	003fa106 	br	7858 <__alt_data_end+0xfffb2128>
    79d4:	01015504 	movi	r4,1364
    79d8:	20c00436 	bltu	r4,r3,79ec <_free_r+0x2e4>
    79dc:	1006d4ba 	srli	r3,r2,18
    79e0:	19401f04 	addi	r5,r3,124
    79e4:	2947883a 	add	r3,r5,r5
    79e8:	003f9b06 	br	7858 <__alt_data_end+0xfffb2128>
    79ec:	00c03f04 	movi	r3,252
    79f0:	01401f84 	movi	r5,126
    79f4:	003f9806 	br	7858 <__alt_data_end+0xfffb2128>

000079f8 <__sfvwrite_r>:
    79f8:	30800217 	ldw	r2,8(r6)
    79fc:	10004526 	beq	r2,zero,7b14 <__sfvwrite_r+0x11c>
    7a00:	28c0030b 	ldhu	r3,12(r5)
    7a04:	defff404 	addi	sp,sp,-48
    7a08:	dd400715 	stw	r21,28(sp)
    7a0c:	dcc00515 	stw	r19,20(sp)
    7a10:	dc000215 	stw	r16,8(sp)
    7a14:	dfc00b15 	stw	ra,44(sp)
    7a18:	df000a15 	stw	fp,40(sp)
    7a1c:	ddc00915 	stw	r23,36(sp)
    7a20:	dd800815 	stw	r22,32(sp)
    7a24:	dd000615 	stw	r20,24(sp)
    7a28:	dc800415 	stw	r18,16(sp)
    7a2c:	dc400315 	stw	r17,12(sp)
    7a30:	1880020c 	andi	r2,r3,8
    7a34:	2821883a 	mov	r16,r5
    7a38:	202b883a 	mov	r21,r4
    7a3c:	3027883a 	mov	r19,r6
    7a40:	10002526 	beq	r2,zero,7ad8 <__sfvwrite_r+0xe0>
    7a44:	28800417 	ldw	r2,16(r5)
    7a48:	10002326 	beq	r2,zero,7ad8 <__sfvwrite_r+0xe0>
    7a4c:	1880008c 	andi	r2,r3,2
    7a50:	9c400017 	ldw	r17,0(r19)
    7a54:	10003126 	beq	r2,zero,7b1c <__sfvwrite_r+0x124>
    7a58:	0029883a 	mov	r20,zero
    7a5c:	0025883a 	mov	r18,zero
    7a60:	05810004 	movi	r22,1024
    7a64:	a00d883a 	mov	r6,r20
    7a68:	a809883a 	mov	r4,r21
    7a6c:	90002526 	beq	r18,zero,7b04 <__sfvwrite_r+0x10c>
    7a70:	900f883a 	mov	r7,r18
    7a74:	81400717 	ldw	r5,28(r16)
    7a78:	b480012e 	bgeu	r22,r18,7a80 <__sfvwrite_r+0x88>
    7a7c:	01c10004 	movi	r7,1024
    7a80:	80800917 	ldw	r2,36(r16)
    7a84:	103ee83a 	callr	r2
    7a88:	0080510e 	bge	zero,r2,7bd0 <__sfvwrite_r+0x1d8>
    7a8c:	98c00217 	ldw	r3,8(r19)
    7a90:	a0a9883a 	add	r20,r20,r2
    7a94:	90a5c83a 	sub	r18,r18,r2
    7a98:	1885c83a 	sub	r2,r3,r2
    7a9c:	98800215 	stw	r2,8(r19)
    7aa0:	103ff01e 	bne	r2,zero,7a64 <__alt_data_end+0xfffb2334>
    7aa4:	0005883a 	mov	r2,zero
    7aa8:	dfc00b17 	ldw	ra,44(sp)
    7aac:	df000a17 	ldw	fp,40(sp)
    7ab0:	ddc00917 	ldw	r23,36(sp)
    7ab4:	dd800817 	ldw	r22,32(sp)
    7ab8:	dd400717 	ldw	r21,28(sp)
    7abc:	dd000617 	ldw	r20,24(sp)
    7ac0:	dcc00517 	ldw	r19,20(sp)
    7ac4:	dc800417 	ldw	r18,16(sp)
    7ac8:	dc400317 	ldw	r17,12(sp)
    7acc:	dc000217 	ldw	r16,8(sp)
    7ad0:	dec00c04 	addi	sp,sp,48
    7ad4:	f800283a 	ret
    7ad8:	a809883a 	mov	r4,r21
    7adc:	800b883a 	mov	r5,r16
    7ae0:	00055580 	call	5558 <__swsetup_r>
    7ae4:	80c0030b 	ldhu	r3,12(r16)
    7ae8:	103fd826 	beq	r2,zero,7a4c <__alt_data_end+0xfffb231c>
    7aec:	18c01014 	ori	r3,r3,64
    7af0:	80c0030d 	sth	r3,12(r16)
    7af4:	00c00244 	movi	r3,9
    7af8:	00bfffc4 	movi	r2,-1
    7afc:	a8c00015 	stw	r3,0(r21)
    7b00:	003fe906 	br	7aa8 <__alt_data_end+0xfffb2378>
    7b04:	8d000017 	ldw	r20,0(r17)
    7b08:	8c800117 	ldw	r18,4(r17)
    7b0c:	8c400204 	addi	r17,r17,8
    7b10:	003fd406 	br	7a64 <__alt_data_end+0xfffb2334>
    7b14:	0005883a 	mov	r2,zero
    7b18:	f800283a 	ret
    7b1c:	1880004c 	andi	r2,r3,1
    7b20:	1000301e 	bne	r2,zero,7be4 <__sfvwrite_r+0x1ec>
    7b24:	002f883a 	mov	r23,zero
    7b28:	0025883a 	mov	r18,zero
    7b2c:	90001c26 	beq	r18,zero,7ba0 <__sfvwrite_r+0x1a8>
    7b30:	1880800c 	andi	r2,r3,512
    7b34:	85000217 	ldw	r20,8(r16)
    7b38:	10006c26 	beq	r2,zero,7cec <__sfvwrite_r+0x2f4>
    7b3c:	a02d883a 	mov	r22,r20
    7b40:	95008536 	bltu	r18,r20,7d58 <__sfvwrite_r+0x360>
    7b44:	1881200c 	andi	r2,r3,1152
    7b48:	10009d1e 	bne	r2,zero,7dc0 <__sfvwrite_r+0x3c8>
    7b4c:	81000017 	ldw	r4,0(r16)
    7b50:	a039883a 	mov	fp,r20
    7b54:	9029883a 	mov	r20,r18
    7b58:	b80b883a 	mov	r5,r23
    7b5c:	b00d883a 	mov	r6,r22
    7b60:	00084c40 	call	84c4 <memmove>
    7b64:	80c00217 	ldw	r3,8(r16)
    7b68:	81000017 	ldw	r4,0(r16)
    7b6c:	9005883a 	mov	r2,r18
    7b70:	1f39c83a 	sub	fp,r3,fp
    7b74:	258f883a 	add	r7,r4,r22
    7b78:	87000215 	stw	fp,8(r16)
    7b7c:	81c00015 	stw	r7,0(r16)
    7b80:	98c00217 	ldw	r3,8(r19)
    7b84:	b8af883a 	add	r23,r23,r2
    7b88:	90a5c83a 	sub	r18,r18,r2
    7b8c:	1d05c83a 	sub	r2,r3,r20
    7b90:	98800215 	stw	r2,8(r19)
    7b94:	103fc326 	beq	r2,zero,7aa4 <__alt_data_end+0xfffb2374>
    7b98:	80c0030b 	ldhu	r3,12(r16)
    7b9c:	903fe41e 	bne	r18,zero,7b30 <__alt_data_end+0xfffb2400>
    7ba0:	8dc00017 	ldw	r23,0(r17)
    7ba4:	8c800117 	ldw	r18,4(r17)
    7ba8:	8c400204 	addi	r17,r17,8
    7bac:	003fdf06 	br	7b2c <__alt_data_end+0xfffb23fc>
    7bb0:	000978c0 	call	978c <_realloc_r>
    7bb4:	102d883a 	mov	r22,r2
    7bb8:	1000a01e 	bne	r2,zero,7e3c <__sfvwrite_r+0x444>
    7bbc:	81400417 	ldw	r5,16(r16)
    7bc0:	a809883a 	mov	r4,r21
    7bc4:	00077080 	call	7708 <_free_r>
    7bc8:	00800304 	movi	r2,12
    7bcc:	a8800015 	stw	r2,0(r21)
    7bd0:	80c0030b 	ldhu	r3,12(r16)
    7bd4:	00bfffc4 	movi	r2,-1
    7bd8:	18c01014 	ori	r3,r3,64
    7bdc:	80c0030d 	sth	r3,12(r16)
    7be0:	003fb106 	br	7aa8 <__alt_data_end+0xfffb2378>
    7be4:	0029883a 	mov	r20,zero
    7be8:	0011883a 	mov	r8,zero
    7bec:	0039883a 	mov	fp,zero
    7bf0:	0025883a 	mov	r18,zero
    7bf4:	90001f26 	beq	r18,zero,7c74 <__sfvwrite_r+0x27c>
    7bf8:	40006826 	beq	r8,zero,7d9c <__sfvwrite_r+0x3a4>
    7bfc:	a02f883a 	mov	r23,r20
    7c00:	9500012e 	bgeu	r18,r20,7c08 <__sfvwrite_r+0x210>
    7c04:	902f883a 	mov	r23,r18
    7c08:	81000017 	ldw	r4,0(r16)
    7c0c:	80800417 	ldw	r2,16(r16)
    7c10:	b82d883a 	mov	r22,r23
    7c14:	81800217 	ldw	r6,8(r16)
    7c18:	81c00517 	ldw	r7,20(r16)
    7c1c:	1100022e 	bgeu	r2,r4,7c28 <__sfvwrite_r+0x230>
    7c20:	31c7883a 	add	r3,r6,r7
    7c24:	1dc01816 	blt	r3,r23,7c88 <__sfvwrite_r+0x290>
    7c28:	b9c03f16 	blt	r23,r7,7d28 <__sfvwrite_r+0x330>
    7c2c:	80800917 	ldw	r2,36(r16)
    7c30:	81400717 	ldw	r5,28(r16)
    7c34:	a809883a 	mov	r4,r21
    7c38:	da000115 	stw	r8,4(sp)
    7c3c:	e00d883a 	mov	r6,fp
    7c40:	103ee83a 	callr	r2
    7c44:	102d883a 	mov	r22,r2
    7c48:	da000117 	ldw	r8,4(sp)
    7c4c:	00bfe00e 	bge	zero,r2,7bd0 <__alt_data_end+0xfffb24a0>
    7c50:	a5a9c83a 	sub	r20,r20,r22
    7c54:	a0001f26 	beq	r20,zero,7cd4 <__sfvwrite_r+0x2dc>
    7c58:	98800217 	ldw	r2,8(r19)
    7c5c:	e5b9883a 	add	fp,fp,r22
    7c60:	95a5c83a 	sub	r18,r18,r22
    7c64:	15adc83a 	sub	r22,r2,r22
    7c68:	9d800215 	stw	r22,8(r19)
    7c6c:	b03f8d26 	beq	r22,zero,7aa4 <__alt_data_end+0xfffb2374>
    7c70:	903fe11e 	bne	r18,zero,7bf8 <__alt_data_end+0xfffb24c8>
    7c74:	8f000017 	ldw	fp,0(r17)
    7c78:	8c800117 	ldw	r18,4(r17)
    7c7c:	0011883a 	mov	r8,zero
    7c80:	8c400204 	addi	r17,r17,8
    7c84:	003fdb06 	br	7bf4 <__alt_data_end+0xfffb24c4>
    7c88:	180d883a 	mov	r6,r3
    7c8c:	e00b883a 	mov	r5,fp
    7c90:	da000115 	stw	r8,4(sp)
    7c94:	d8c00015 	stw	r3,0(sp)
    7c98:	00084c40 	call	84c4 <memmove>
    7c9c:	d8c00017 	ldw	r3,0(sp)
    7ca0:	80800017 	ldw	r2,0(r16)
    7ca4:	a809883a 	mov	r4,r21
    7ca8:	800b883a 	mov	r5,r16
    7cac:	10c5883a 	add	r2,r2,r3
    7cb0:	80800015 	stw	r2,0(r16)
    7cb4:	d8c00015 	stw	r3,0(sp)
    7cb8:	0006fd80 	call	6fd8 <_fflush_r>
    7cbc:	d8c00017 	ldw	r3,0(sp)
    7cc0:	da000117 	ldw	r8,4(sp)
    7cc4:	103fc21e 	bne	r2,zero,7bd0 <__alt_data_end+0xfffb24a0>
    7cc8:	182d883a 	mov	r22,r3
    7ccc:	a5a9c83a 	sub	r20,r20,r22
    7cd0:	a03fe11e 	bne	r20,zero,7c58 <__alt_data_end+0xfffb2528>
    7cd4:	a809883a 	mov	r4,r21
    7cd8:	800b883a 	mov	r5,r16
    7cdc:	0006fd80 	call	6fd8 <_fflush_r>
    7ce0:	103fbb1e 	bne	r2,zero,7bd0 <__alt_data_end+0xfffb24a0>
    7ce4:	0011883a 	mov	r8,zero
    7ce8:	003fdb06 	br	7c58 <__alt_data_end+0xfffb2528>
    7cec:	81000017 	ldw	r4,0(r16)
    7cf0:	80800417 	ldw	r2,16(r16)
    7cf4:	1100012e 	bgeu	r2,r4,7cfc <__sfvwrite_r+0x304>
    7cf8:	a4805a36 	bltu	r20,r18,7e64 <__sfvwrite_r+0x46c>
    7cfc:	81c00517 	ldw	r7,20(r16)
    7d00:	91c01a36 	bltu	r18,r7,7d6c <__sfvwrite_r+0x374>
    7d04:	80800917 	ldw	r2,36(r16)
    7d08:	81400717 	ldw	r5,28(r16)
    7d0c:	a809883a 	mov	r4,r21
    7d10:	b80d883a 	mov	r6,r23
    7d14:	103ee83a 	callr	r2
    7d18:	1029883a 	mov	r20,r2
    7d1c:	00bfac0e 	bge	zero,r2,7bd0 <__alt_data_end+0xfffb24a0>
    7d20:	a005883a 	mov	r2,r20
    7d24:	003f9606 	br	7b80 <__alt_data_end+0xfffb2450>
    7d28:	b80d883a 	mov	r6,r23
    7d2c:	e00b883a 	mov	r5,fp
    7d30:	da000115 	stw	r8,4(sp)
    7d34:	00084c40 	call	84c4 <memmove>
    7d38:	80800217 	ldw	r2,8(r16)
    7d3c:	80c00017 	ldw	r3,0(r16)
    7d40:	da000117 	ldw	r8,4(sp)
    7d44:	15c5c83a 	sub	r2,r2,r23
    7d48:	1def883a 	add	r23,r3,r23
    7d4c:	80800215 	stw	r2,8(r16)
    7d50:	85c00015 	stw	r23,0(r16)
    7d54:	003fbe06 	br	7c50 <__alt_data_end+0xfffb2520>
    7d58:	81000017 	ldw	r4,0(r16)
    7d5c:	9039883a 	mov	fp,r18
    7d60:	9029883a 	mov	r20,r18
    7d64:	902d883a 	mov	r22,r18
    7d68:	003f7b06 	br	7b58 <__alt_data_end+0xfffb2428>
    7d6c:	b80b883a 	mov	r5,r23
    7d70:	900d883a 	mov	r6,r18
    7d74:	00084c40 	call	84c4 <memmove>
    7d78:	80c00217 	ldw	r3,8(r16)
    7d7c:	80800017 	ldw	r2,0(r16)
    7d80:	9029883a 	mov	r20,r18
    7d84:	1c87c83a 	sub	r3,r3,r18
    7d88:	1485883a 	add	r2,r2,r18
    7d8c:	80800015 	stw	r2,0(r16)
    7d90:	80c00215 	stw	r3,8(r16)
    7d94:	9005883a 	mov	r2,r18
    7d98:	003f7906 	br	7b80 <__alt_data_end+0xfffb2450>
    7d9c:	e009883a 	mov	r4,fp
    7da0:	01400284 	movi	r5,10
    7da4:	900d883a 	mov	r6,r18
    7da8:	00082a40 	call	82a4 <memchr>
    7dac:	10003826 	beq	r2,zero,7e90 <__sfvwrite_r+0x498>
    7db0:	10800044 	addi	r2,r2,1
    7db4:	1729c83a 	sub	r20,r2,fp
    7db8:	02000044 	movi	r8,1
    7dbc:	003f8f06 	br	7bfc <__alt_data_end+0xfffb24cc>
    7dc0:	80800517 	ldw	r2,20(r16)
    7dc4:	81400417 	ldw	r5,16(r16)
    7dc8:	87000017 	ldw	fp,0(r16)
    7dcc:	10a9883a 	add	r20,r2,r2
    7dd0:	a085883a 	add	r2,r20,r2
    7dd4:	1028d7fa 	srli	r20,r2,31
    7dd8:	e179c83a 	sub	fp,fp,r5
    7ddc:	e1000044 	addi	r4,fp,1
    7de0:	a085883a 	add	r2,r20,r2
    7de4:	1029d07a 	srai	r20,r2,1
    7de8:	2485883a 	add	r2,r4,r18
    7dec:	a00d883a 	mov	r6,r20
    7df0:	a080022e 	bgeu	r20,r2,7dfc <__sfvwrite_r+0x404>
    7df4:	1029883a 	mov	r20,r2
    7df8:	100d883a 	mov	r6,r2
    7dfc:	18c1000c 	andi	r3,r3,1024
    7e00:	a809883a 	mov	r4,r21
    7e04:	183f6a26 	beq	r3,zero,7bb0 <__alt_data_end+0xfffb2480>
    7e08:	300b883a 	mov	r5,r6
    7e0c:	0002a700 	call	2a70 <_malloc_r>
    7e10:	102d883a 	mov	r22,r2
    7e14:	103f6c26 	beq	r2,zero,7bc8 <__alt_data_end+0xfffb2498>
    7e18:	81400417 	ldw	r5,16(r16)
    7e1c:	1009883a 	mov	r4,r2
    7e20:	e00d883a 	mov	r6,fp
    7e24:	000838c0 	call	838c <memcpy>
    7e28:	8080030b 	ldhu	r2,12(r16)
    7e2c:	00fedfc4 	movi	r3,-1153
    7e30:	10c4703a 	and	r2,r2,r3
    7e34:	10802014 	ori	r2,r2,128
    7e38:	8080030d 	sth	r2,12(r16)
    7e3c:	b709883a 	add	r4,r22,fp
    7e40:	a707c83a 	sub	r3,r20,fp
    7e44:	85800415 	stw	r22,16(r16)
    7e48:	85000515 	stw	r20,20(r16)
    7e4c:	81000015 	stw	r4,0(r16)
    7e50:	9039883a 	mov	fp,r18
    7e54:	80c00215 	stw	r3,8(r16)
    7e58:	9029883a 	mov	r20,r18
    7e5c:	902d883a 	mov	r22,r18
    7e60:	003f3d06 	br	7b58 <__alt_data_end+0xfffb2428>
    7e64:	b80b883a 	mov	r5,r23
    7e68:	a00d883a 	mov	r6,r20
    7e6c:	00084c40 	call	84c4 <memmove>
    7e70:	80800017 	ldw	r2,0(r16)
    7e74:	a809883a 	mov	r4,r21
    7e78:	800b883a 	mov	r5,r16
    7e7c:	1505883a 	add	r2,r2,r20
    7e80:	80800015 	stw	r2,0(r16)
    7e84:	0006fd80 	call	6fd8 <_fflush_r>
    7e88:	103fa526 	beq	r2,zero,7d20 <__alt_data_end+0xfffb25f0>
    7e8c:	003f5006 	br	7bd0 <__alt_data_end+0xfffb24a0>
    7e90:	95000044 	addi	r20,r18,1
    7e94:	02000044 	movi	r8,1
    7e98:	003f5806 	br	7bfc <__alt_data_end+0xfffb24cc>

00007e9c <_fwalk>:
    7e9c:	defff804 	addi	sp,sp,-32
    7ea0:	dd400515 	stw	r21,20(sp)
    7ea4:	2540b804 	addi	r21,r4,736
    7ea8:	dd800615 	stw	r22,24(sp)
    7eac:	dd000415 	stw	r20,16(sp)
    7eb0:	dfc00715 	stw	ra,28(sp)
    7eb4:	dcc00315 	stw	r19,12(sp)
    7eb8:	dc800215 	stw	r18,8(sp)
    7ebc:	dc400115 	stw	r17,4(sp)
    7ec0:	dc000015 	stw	r16,0(sp)
    7ec4:	2829883a 	mov	r20,r5
    7ec8:	002d883a 	mov	r22,zero
    7ecc:	00075a40 	call	75a4 <__sfp_lock_acquire>
    7ed0:	a8001426 	beq	r21,zero,7f24 <_fwalk+0x88>
    7ed4:	04ffffc4 	movi	r19,-1
    7ed8:	ac400117 	ldw	r17,4(r21)
    7edc:	ac800217 	ldw	r18,8(r21)
    7ee0:	8c7fffc4 	addi	r17,r17,-1
    7ee4:	88000d16 	blt	r17,zero,7f1c <_fwalk+0x80>
    7ee8:	94000304 	addi	r16,r18,12
    7eec:	94800384 	addi	r18,r18,14
    7ef0:	80c0000f 	ldh	r3,0(r16)
    7ef4:	8c7fffc4 	addi	r17,r17,-1
    7ef8:	813ffd04 	addi	r4,r16,-12
    7efc:	18000426 	beq	r3,zero,7f10 <_fwalk+0x74>
    7f00:	90c0000f 	ldh	r3,0(r18)
    7f04:	1cc00226 	beq	r3,r19,7f10 <_fwalk+0x74>
    7f08:	a03ee83a 	callr	r20
    7f0c:	b0acb03a 	or	r22,r22,r2
    7f10:	84001a04 	addi	r16,r16,104
    7f14:	94801a04 	addi	r18,r18,104
    7f18:	8cfff51e 	bne	r17,r19,7ef0 <__alt_data_end+0xfffb27c0>
    7f1c:	ad400017 	ldw	r21,0(r21)
    7f20:	a83fed1e 	bne	r21,zero,7ed8 <__alt_data_end+0xfffb27a8>
    7f24:	00075a80 	call	75a8 <__sfp_lock_release>
    7f28:	b005883a 	mov	r2,r22
    7f2c:	dfc00717 	ldw	ra,28(sp)
    7f30:	dd800617 	ldw	r22,24(sp)
    7f34:	dd400517 	ldw	r21,20(sp)
    7f38:	dd000417 	ldw	r20,16(sp)
    7f3c:	dcc00317 	ldw	r19,12(sp)
    7f40:	dc800217 	ldw	r18,8(sp)
    7f44:	dc400117 	ldw	r17,4(sp)
    7f48:	dc000017 	ldw	r16,0(sp)
    7f4c:	dec00804 	addi	sp,sp,32
    7f50:	f800283a 	ret

00007f54 <_fwalk_reent>:
    7f54:	defff804 	addi	sp,sp,-32
    7f58:	dd400515 	stw	r21,20(sp)
    7f5c:	2540b804 	addi	r21,r4,736
    7f60:	dd800615 	stw	r22,24(sp)
    7f64:	dd000415 	stw	r20,16(sp)
    7f68:	dcc00315 	stw	r19,12(sp)
    7f6c:	dfc00715 	stw	ra,28(sp)
    7f70:	dc800215 	stw	r18,8(sp)
    7f74:	dc400115 	stw	r17,4(sp)
    7f78:	dc000015 	stw	r16,0(sp)
    7f7c:	2027883a 	mov	r19,r4
    7f80:	2829883a 	mov	r20,r5
    7f84:	002d883a 	mov	r22,zero
    7f88:	00075a40 	call	75a4 <__sfp_lock_acquire>
    7f8c:	a8001326 	beq	r21,zero,7fdc <_fwalk_reent+0x88>
    7f90:	04bfffc4 	movi	r18,-1
    7f94:	ac400117 	ldw	r17,4(r21)
    7f98:	ac000217 	ldw	r16,8(r21)
    7f9c:	8c7fffc4 	addi	r17,r17,-1
    7fa0:	88000c16 	blt	r17,zero,7fd4 <_fwalk_reent+0x80>
    7fa4:	84000304 	addi	r16,r16,12
    7fa8:	80c0000f 	ldh	r3,0(r16)
    7fac:	8c7fffc4 	addi	r17,r17,-1
    7fb0:	817ffd04 	addi	r5,r16,-12
    7fb4:	18000526 	beq	r3,zero,7fcc <_fwalk_reent+0x78>
    7fb8:	80c0008f 	ldh	r3,2(r16)
    7fbc:	9809883a 	mov	r4,r19
    7fc0:	1c800226 	beq	r3,r18,7fcc <_fwalk_reent+0x78>
    7fc4:	a03ee83a 	callr	r20
    7fc8:	b0acb03a 	or	r22,r22,r2
    7fcc:	84001a04 	addi	r16,r16,104
    7fd0:	8cbff51e 	bne	r17,r18,7fa8 <__alt_data_end+0xfffb2878>
    7fd4:	ad400017 	ldw	r21,0(r21)
    7fd8:	a83fee1e 	bne	r21,zero,7f94 <__alt_data_end+0xfffb2864>
    7fdc:	00075a80 	call	75a8 <__sfp_lock_release>
    7fe0:	b005883a 	mov	r2,r22
    7fe4:	dfc00717 	ldw	ra,28(sp)
    7fe8:	dd800617 	ldw	r22,24(sp)
    7fec:	dd400517 	ldw	r21,20(sp)
    7ff0:	dd000417 	ldw	r20,16(sp)
    7ff4:	dcc00317 	ldw	r19,12(sp)
    7ff8:	dc800217 	ldw	r18,8(sp)
    7ffc:	dc400117 	ldw	r17,4(sp)
    8000:	dc000017 	ldw	r16,0(sp)
    8004:	dec00804 	addi	sp,sp,32
    8008:	f800283a 	ret

0000800c <_setlocale_r>:
    800c:	30001b26 	beq	r6,zero,807c <_setlocale_r+0x70>
    8010:	01400074 	movhi	r5,1
    8014:	defffe04 	addi	sp,sp,-8
    8018:	29491204 	addi	r5,r5,9288
    801c:	3009883a 	mov	r4,r6
    8020:	dc000015 	stw	r16,0(sp)
    8024:	dfc00115 	stw	ra,4(sp)
    8028:	3021883a 	mov	r16,r6
    802c:	0009edc0 	call	9edc <strcmp>
    8030:	1000061e 	bne	r2,zero,804c <_setlocale_r+0x40>
    8034:	00800074 	movhi	r2,1
    8038:	10891104 	addi	r2,r2,9284
    803c:	dfc00117 	ldw	ra,4(sp)
    8040:	dc000017 	ldw	r16,0(sp)
    8044:	dec00204 	addi	sp,sp,8
    8048:	f800283a 	ret
    804c:	01400074 	movhi	r5,1
    8050:	29491104 	addi	r5,r5,9284
    8054:	8009883a 	mov	r4,r16
    8058:	0009edc0 	call	9edc <strcmp>
    805c:	103ff526 	beq	r2,zero,8034 <__alt_data_end+0xfffb2904>
    8060:	01400074 	movhi	r5,1
    8064:	2948fc04 	addi	r5,r5,9200
    8068:	8009883a 	mov	r4,r16
    806c:	0009edc0 	call	9edc <strcmp>
    8070:	103ff026 	beq	r2,zero,8034 <__alt_data_end+0xfffb2904>
    8074:	0005883a 	mov	r2,zero
    8078:	003ff006 	br	803c <__alt_data_end+0xfffb290c>
    807c:	00800074 	movhi	r2,1
    8080:	10891104 	addi	r2,r2,9284
    8084:	f800283a 	ret

00008088 <__locale_charset>:
    8088:	00800074 	movhi	r2,1
    808c:	108bc604 	addi	r2,r2,12056
    8090:	f800283a 	ret

00008094 <__locale_mb_cur_max>:
    8094:	00800074 	movhi	r2,1
    8098:	10906204 	addi	r2,r2,16776
    809c:	10800017 	ldw	r2,0(r2)
    80a0:	f800283a 	ret

000080a4 <__locale_msgcharset>:
    80a4:	00800074 	movhi	r2,1
    80a8:	108bbe04 	addi	r2,r2,12024
    80ac:	f800283a 	ret

000080b0 <__locale_cjk_lang>:
    80b0:	0005883a 	mov	r2,zero
    80b4:	f800283a 	ret

000080b8 <_localeconv_r>:
    80b8:	00800074 	movhi	r2,1
    80bc:	108bce04 	addi	r2,r2,12088
    80c0:	f800283a 	ret

000080c4 <setlocale>:
    80c4:	00c00074 	movhi	r3,1
    80c8:	18d06104 	addi	r3,r3,16772
    80cc:	2005883a 	mov	r2,r4
    80d0:	19000017 	ldw	r4,0(r3)
    80d4:	280d883a 	mov	r6,r5
    80d8:	100b883a 	mov	r5,r2
    80dc:	000800c1 	jmpi	800c <_setlocale_r>

000080e0 <localeconv>:
    80e0:	00800074 	movhi	r2,1
    80e4:	108bce04 	addi	r2,r2,12088
    80e8:	f800283a 	ret

000080ec <__smakebuf_r>:
    80ec:	2880030b 	ldhu	r2,12(r5)
    80f0:	10c0008c 	andi	r3,r2,2
    80f4:	1800401e 	bne	r3,zero,81f8 <__smakebuf_r+0x10c>
    80f8:	deffec04 	addi	sp,sp,-80
    80fc:	dc000f15 	stw	r16,60(sp)
    8100:	2821883a 	mov	r16,r5
    8104:	2940038f 	ldh	r5,14(r5)
    8108:	dc401015 	stw	r17,64(sp)
    810c:	dfc01315 	stw	ra,76(sp)
    8110:	dcc01215 	stw	r19,72(sp)
    8114:	dc801115 	stw	r18,68(sp)
    8118:	2023883a 	mov	r17,r4
    811c:	28001b16 	blt	r5,zero,818c <__smakebuf_r+0xa0>
    8120:	d80d883a 	mov	r6,sp
    8124:	000b9540 	call	b954 <_fstat_r>
    8128:	10001716 	blt	r2,zero,8188 <__smakebuf_r+0x9c>
    812c:	d8800117 	ldw	r2,4(sp)
    8130:	00e00014 	movui	r3,32768
    8134:	10bc000c 	andi	r2,r2,61440
    8138:	10c03726 	beq	r2,r3,8218 <__smakebuf_r+0x12c>
    813c:	80c0030b 	ldhu	r3,12(r16)
    8140:	18c20014 	ori	r3,r3,2048
    8144:	80c0030d 	sth	r3,12(r16)
    8148:	00c80004 	movi	r3,8192
    814c:	10c03c1e 	bne	r2,r3,8240 <__smakebuf_r+0x154>
    8150:	8140038f 	ldh	r5,14(r16)
    8154:	8809883a 	mov	r4,r17
    8158:	000b9ac0 	call	b9ac <_isatty_r>
    815c:	10004e26 	beq	r2,zero,8298 <__smakebuf_r+0x1ac>
    8160:	8080030b 	ldhu	r2,12(r16)
    8164:	04c00044 	movi	r19,1
    8168:	80c010c4 	addi	r3,r16,67
    816c:	14c4b03a 	or	r2,r2,r19
    8170:	8080030d 	sth	r2,12(r16)
    8174:	80c00015 	stw	r3,0(r16)
    8178:	80c00415 	stw	r3,16(r16)
    817c:	84c00515 	stw	r19,20(r16)
    8180:	04810004 	movi	r18,1024
    8184:	00000706 	br	81a4 <__smakebuf_r+0xb8>
    8188:	8080030b 	ldhu	r2,12(r16)
    818c:	10c0200c 	andi	r3,r2,128
    8190:	18001f1e 	bne	r3,zero,8210 <__smakebuf_r+0x124>
    8194:	04810004 	movi	r18,1024
    8198:	10820014 	ori	r2,r2,2048
    819c:	8080030d 	sth	r2,12(r16)
    81a0:	0027883a 	mov	r19,zero
    81a4:	8809883a 	mov	r4,r17
    81a8:	900b883a 	mov	r5,r18
    81ac:	0002a700 	call	2a70 <_malloc_r>
    81b0:	10002e26 	beq	r2,zero,826c <__smakebuf_r+0x180>
    81b4:	80c0030b 	ldhu	r3,12(r16)
    81b8:	01000034 	movhi	r4,0
    81bc:	211c9004 	addi	r4,r4,29248
    81c0:	89000f15 	stw	r4,60(r17)
    81c4:	18c02014 	ori	r3,r3,128
    81c8:	80c0030d 	sth	r3,12(r16)
    81cc:	80800015 	stw	r2,0(r16)
    81d0:	80800415 	stw	r2,16(r16)
    81d4:	84800515 	stw	r18,20(r16)
    81d8:	98001c1e 	bne	r19,zero,824c <__smakebuf_r+0x160>
    81dc:	dfc01317 	ldw	ra,76(sp)
    81e0:	dcc01217 	ldw	r19,72(sp)
    81e4:	dc801117 	ldw	r18,68(sp)
    81e8:	dc401017 	ldw	r17,64(sp)
    81ec:	dc000f17 	ldw	r16,60(sp)
    81f0:	dec01404 	addi	sp,sp,80
    81f4:	f800283a 	ret
    81f8:	288010c4 	addi	r2,r5,67
    81fc:	28800015 	stw	r2,0(r5)
    8200:	28800415 	stw	r2,16(r5)
    8204:	00800044 	movi	r2,1
    8208:	28800515 	stw	r2,20(r5)
    820c:	f800283a 	ret
    8210:	04801004 	movi	r18,64
    8214:	003fe006 	br	8198 <__alt_data_end+0xfffb2a68>
    8218:	81000a17 	ldw	r4,40(r16)
    821c:	00c00074 	movhi	r3,1
    8220:	18e79e04 	addi	r3,r3,-24968
    8224:	20ffc51e 	bne	r4,r3,813c <__alt_data_end+0xfffb2a0c>
    8228:	80c0030b 	ldhu	r3,12(r16)
    822c:	01010004 	movi	r4,1024
    8230:	81001315 	stw	r4,76(r16)
    8234:	1906b03a 	or	r3,r3,r4
    8238:	80c0030d 	sth	r3,12(r16)
    823c:	003fc206 	br	8148 <__alt_data_end+0xfffb2a18>
    8240:	0027883a 	mov	r19,zero
    8244:	04810004 	movi	r18,1024
    8248:	003fd606 	br	81a4 <__alt_data_end+0xfffb2a74>
    824c:	8140038f 	ldh	r5,14(r16)
    8250:	8809883a 	mov	r4,r17
    8254:	000b9ac0 	call	b9ac <_isatty_r>
    8258:	103fe026 	beq	r2,zero,81dc <__alt_data_end+0xfffb2aac>
    825c:	8080030b 	ldhu	r2,12(r16)
    8260:	10800054 	ori	r2,r2,1
    8264:	8080030d 	sth	r2,12(r16)
    8268:	003fdc06 	br	81dc <__alt_data_end+0xfffb2aac>
    826c:	8080030b 	ldhu	r2,12(r16)
    8270:	10c0800c 	andi	r3,r2,512
    8274:	183fd91e 	bne	r3,zero,81dc <__alt_data_end+0xfffb2aac>
    8278:	10800094 	ori	r2,r2,2
    827c:	80c010c4 	addi	r3,r16,67
    8280:	8080030d 	sth	r2,12(r16)
    8284:	00800044 	movi	r2,1
    8288:	80c00015 	stw	r3,0(r16)
    828c:	80c00415 	stw	r3,16(r16)
    8290:	80800515 	stw	r2,20(r16)
    8294:	003fd106 	br	81dc <__alt_data_end+0xfffb2aac>
    8298:	04c00044 	movi	r19,1
    829c:	04810004 	movi	r18,1024
    82a0:	003fc006 	br	81a4 <__alt_data_end+0xfffb2a74>

000082a4 <memchr>:
    82a4:	208000cc 	andi	r2,r4,3
    82a8:	280f883a 	mov	r7,r5
    82ac:	10003526 	beq	r2,zero,8384 <memchr+0xe0>
    82b0:	30bfffc4 	addi	r2,r6,-1
    82b4:	30001b26 	beq	r6,zero,8324 <memchr+0x80>
    82b8:	21800003 	ldbu	r6,0(r4)
    82bc:	28c03fcc 	andi	r3,r5,255
    82c0:	30c01a26 	beq	r6,r3,832c <memchr+0x88>
    82c4:	180d883a 	mov	r6,r3
    82c8:	00000406 	br	82dc <memchr+0x38>
    82cc:	10001526 	beq	r2,zero,8324 <memchr+0x80>
    82d0:	20c00003 	ldbu	r3,0(r4)
    82d4:	10bfffc4 	addi	r2,r2,-1
    82d8:	19801426 	beq	r3,r6,832c <memchr+0x88>
    82dc:	21000044 	addi	r4,r4,1
    82e0:	20c000cc 	andi	r3,r4,3
    82e4:	183ff91e 	bne	r3,zero,82cc <__alt_data_end+0xfffb2b9c>
    82e8:	024000c4 	movi	r9,3
    82ec:	48801136 	bltu	r9,r2,8334 <memchr+0x90>
    82f0:	10000c26 	beq	r2,zero,8324 <memchr+0x80>
    82f4:	20c00003 	ldbu	r3,0(r4)
    82f8:	29403fcc 	andi	r5,r5,255
    82fc:	19400b26 	beq	r3,r5,832c <memchr+0x88>
    8300:	20c00044 	addi	r3,r4,1
    8304:	2085883a 	add	r2,r4,r2
    8308:	39803fcc 	andi	r6,r7,255
    830c:	00000306 	br	831c <memchr+0x78>
    8310:	18c00044 	addi	r3,r3,1
    8314:	197fffc3 	ldbu	r5,-1(r3)
    8318:	29800426 	beq	r5,r6,832c <memchr+0x88>
    831c:	1809883a 	mov	r4,r3
    8320:	18bffb1e 	bne	r3,r2,8310 <__alt_data_end+0xfffb2be0>
    8324:	0005883a 	mov	r2,zero
    8328:	f800283a 	ret
    832c:	2005883a 	mov	r2,r4
    8330:	f800283a 	ret
    8334:	28c03fcc 	andi	r3,r5,255
    8338:	1810923a 	slli	r8,r3,8
    833c:	02ffbff4 	movhi	r11,65279
    8340:	02a02074 	movhi	r10,32897
    8344:	40c6b03a 	or	r3,r8,r3
    8348:	1810943a 	slli	r8,r3,16
    834c:	5affbfc4 	addi	r11,r11,-257
    8350:	52a02004 	addi	r10,r10,-32640
    8354:	40d0b03a 	or	r8,r8,r3
    8358:	20c00017 	ldw	r3,0(r4)
    835c:	40c6f03a 	xor	r3,r8,r3
    8360:	1acd883a 	add	r6,r3,r11
    8364:	00c6303a 	nor	r3,zero,r3
    8368:	30c6703a 	and	r3,r6,r3
    836c:	1a86703a 	and	r3,r3,r10
    8370:	183fdf1e 	bne	r3,zero,82f0 <__alt_data_end+0xfffb2bc0>
    8374:	10bfff04 	addi	r2,r2,-4
    8378:	21000104 	addi	r4,r4,4
    837c:	48bff636 	bltu	r9,r2,8358 <__alt_data_end+0xfffb2c28>
    8380:	003fdb06 	br	82f0 <__alt_data_end+0xfffb2bc0>
    8384:	3005883a 	mov	r2,r6
    8388:	003fd706 	br	82e8 <__alt_data_end+0xfffb2bb8>

0000838c <memcpy>:
    838c:	deffff04 	addi	sp,sp,-4
    8390:	dc000015 	stw	r16,0(sp)
    8394:	00c003c4 	movi	r3,15
    8398:	2005883a 	mov	r2,r4
    839c:	1980432e 	bgeu	r3,r6,84ac <memcpy+0x120>
    83a0:	2146b03a 	or	r3,r4,r5
    83a4:	18c000cc 	andi	r3,r3,3
    83a8:	1800421e 	bne	r3,zero,84b4 <memcpy+0x128>
    83ac:	343ffc04 	addi	r16,r6,-16
    83b0:	8020d13a 	srli	r16,r16,4
    83b4:	28c00104 	addi	r3,r5,4
    83b8:	23400104 	addi	r13,r4,4
    83bc:	801e913a 	slli	r15,r16,4
    83c0:	2b000204 	addi	r12,r5,8
    83c4:	22c00204 	addi	r11,r4,8
    83c8:	7bc00504 	addi	r15,r15,20
    83cc:	2a800304 	addi	r10,r5,12
    83d0:	22400304 	addi	r9,r4,12
    83d4:	2bdf883a 	add	r15,r5,r15
    83d8:	2811883a 	mov	r8,r5
    83dc:	200f883a 	mov	r7,r4
    83e0:	41000017 	ldw	r4,0(r8)
    83e4:	39c00404 	addi	r7,r7,16
    83e8:	18c00404 	addi	r3,r3,16
    83ec:	393ffc15 	stw	r4,-16(r7)
    83f0:	1bbffc17 	ldw	r14,-16(r3)
    83f4:	6b400404 	addi	r13,r13,16
    83f8:	5ac00404 	addi	r11,r11,16
    83fc:	6bbffc15 	stw	r14,-16(r13)
    8400:	63800017 	ldw	r14,0(r12)
    8404:	4a400404 	addi	r9,r9,16
    8408:	42000404 	addi	r8,r8,16
    840c:	5bbffc15 	stw	r14,-16(r11)
    8410:	53800017 	ldw	r14,0(r10)
    8414:	63000404 	addi	r12,r12,16
    8418:	52800404 	addi	r10,r10,16
    841c:	4bbffc15 	stw	r14,-16(r9)
    8420:	1bffef1e 	bne	r3,r15,83e0 <__alt_data_end+0xfffb2cb0>
    8424:	81c00044 	addi	r7,r16,1
    8428:	380e913a 	slli	r7,r7,4
    842c:	310003cc 	andi	r4,r6,15
    8430:	02c000c4 	movi	r11,3
    8434:	11c7883a 	add	r3,r2,r7
    8438:	29cb883a 	add	r5,r5,r7
    843c:	59001f2e 	bgeu	r11,r4,84bc <memcpy+0x130>
    8440:	1813883a 	mov	r9,r3
    8444:	2811883a 	mov	r8,r5
    8448:	200f883a 	mov	r7,r4
    844c:	42800017 	ldw	r10,0(r8)
    8450:	4a400104 	addi	r9,r9,4
    8454:	39ffff04 	addi	r7,r7,-4
    8458:	4abfff15 	stw	r10,-4(r9)
    845c:	42000104 	addi	r8,r8,4
    8460:	59fffa36 	bltu	r11,r7,844c <__alt_data_end+0xfffb2d1c>
    8464:	213fff04 	addi	r4,r4,-4
    8468:	2008d0ba 	srli	r4,r4,2
    846c:	318000cc 	andi	r6,r6,3
    8470:	21000044 	addi	r4,r4,1
    8474:	2109883a 	add	r4,r4,r4
    8478:	2109883a 	add	r4,r4,r4
    847c:	1907883a 	add	r3,r3,r4
    8480:	290b883a 	add	r5,r5,r4
    8484:	30000626 	beq	r6,zero,84a0 <memcpy+0x114>
    8488:	198d883a 	add	r6,r3,r6
    848c:	29c00003 	ldbu	r7,0(r5)
    8490:	18c00044 	addi	r3,r3,1
    8494:	29400044 	addi	r5,r5,1
    8498:	19ffffc5 	stb	r7,-1(r3)
    849c:	19bffb1e 	bne	r3,r6,848c <__alt_data_end+0xfffb2d5c>
    84a0:	dc000017 	ldw	r16,0(sp)
    84a4:	dec00104 	addi	sp,sp,4
    84a8:	f800283a 	ret
    84ac:	2007883a 	mov	r3,r4
    84b0:	003ff406 	br	8484 <__alt_data_end+0xfffb2d54>
    84b4:	2007883a 	mov	r3,r4
    84b8:	003ff306 	br	8488 <__alt_data_end+0xfffb2d58>
    84bc:	200d883a 	mov	r6,r4
    84c0:	003ff006 	br	8484 <__alt_data_end+0xfffb2d54>

000084c4 <memmove>:
    84c4:	2005883a 	mov	r2,r4
    84c8:	29000b2e 	bgeu	r5,r4,84f8 <memmove+0x34>
    84cc:	298f883a 	add	r7,r5,r6
    84d0:	21c0092e 	bgeu	r4,r7,84f8 <memmove+0x34>
    84d4:	2187883a 	add	r3,r4,r6
    84d8:	198bc83a 	sub	r5,r3,r6
    84dc:	30004b26 	beq	r6,zero,860c <memmove+0x148>
    84e0:	39ffffc4 	addi	r7,r7,-1
    84e4:	39000003 	ldbu	r4,0(r7)
    84e8:	18ffffc4 	addi	r3,r3,-1
    84ec:	19000005 	stb	r4,0(r3)
    84f0:	197ffb1e 	bne	r3,r5,84e0 <__alt_data_end+0xfffb2db0>
    84f4:	f800283a 	ret
    84f8:	00c003c4 	movi	r3,15
    84fc:	1980412e 	bgeu	r3,r6,8604 <memmove+0x140>
    8500:	1146b03a 	or	r3,r2,r5
    8504:	18c000cc 	andi	r3,r3,3
    8508:	1800411e 	bne	r3,zero,8610 <memmove+0x14c>
    850c:	33fffc04 	addi	r15,r6,-16
    8510:	781ed13a 	srli	r15,r15,4
    8514:	28c00104 	addi	r3,r5,4
    8518:	13400104 	addi	r13,r2,4
    851c:	781c913a 	slli	r14,r15,4
    8520:	2b000204 	addi	r12,r5,8
    8524:	12c00204 	addi	r11,r2,8
    8528:	73800504 	addi	r14,r14,20
    852c:	2a800304 	addi	r10,r5,12
    8530:	12400304 	addi	r9,r2,12
    8534:	2b9d883a 	add	r14,r5,r14
    8538:	2811883a 	mov	r8,r5
    853c:	100f883a 	mov	r7,r2
    8540:	41000017 	ldw	r4,0(r8)
    8544:	39c00404 	addi	r7,r7,16
    8548:	18c00404 	addi	r3,r3,16
    854c:	393ffc15 	stw	r4,-16(r7)
    8550:	193ffc17 	ldw	r4,-16(r3)
    8554:	6b400404 	addi	r13,r13,16
    8558:	5ac00404 	addi	r11,r11,16
    855c:	693ffc15 	stw	r4,-16(r13)
    8560:	61000017 	ldw	r4,0(r12)
    8564:	4a400404 	addi	r9,r9,16
    8568:	42000404 	addi	r8,r8,16
    856c:	593ffc15 	stw	r4,-16(r11)
    8570:	51000017 	ldw	r4,0(r10)
    8574:	63000404 	addi	r12,r12,16
    8578:	52800404 	addi	r10,r10,16
    857c:	493ffc15 	stw	r4,-16(r9)
    8580:	1bbfef1e 	bne	r3,r14,8540 <__alt_data_end+0xfffb2e10>
    8584:	79000044 	addi	r4,r15,1
    8588:	2008913a 	slli	r4,r4,4
    858c:	328003cc 	andi	r10,r6,15
    8590:	02c000c4 	movi	r11,3
    8594:	1107883a 	add	r3,r2,r4
    8598:	290b883a 	add	r5,r5,r4
    859c:	5a801e2e 	bgeu	r11,r10,8618 <memmove+0x154>
    85a0:	1813883a 	mov	r9,r3
    85a4:	2811883a 	mov	r8,r5
    85a8:	500f883a 	mov	r7,r10
    85ac:	41000017 	ldw	r4,0(r8)
    85b0:	4a400104 	addi	r9,r9,4
    85b4:	39ffff04 	addi	r7,r7,-4
    85b8:	493fff15 	stw	r4,-4(r9)
    85bc:	42000104 	addi	r8,r8,4
    85c0:	59fffa36 	bltu	r11,r7,85ac <__alt_data_end+0xfffb2e7c>
    85c4:	513fff04 	addi	r4,r10,-4
    85c8:	2008d0ba 	srli	r4,r4,2
    85cc:	318000cc 	andi	r6,r6,3
    85d0:	21000044 	addi	r4,r4,1
    85d4:	2109883a 	add	r4,r4,r4
    85d8:	2109883a 	add	r4,r4,r4
    85dc:	1907883a 	add	r3,r3,r4
    85e0:	290b883a 	add	r5,r5,r4
    85e4:	30000926 	beq	r6,zero,860c <memmove+0x148>
    85e8:	198d883a 	add	r6,r3,r6
    85ec:	29c00003 	ldbu	r7,0(r5)
    85f0:	18c00044 	addi	r3,r3,1
    85f4:	29400044 	addi	r5,r5,1
    85f8:	19ffffc5 	stb	r7,-1(r3)
    85fc:	19bffb1e 	bne	r3,r6,85ec <__alt_data_end+0xfffb2ebc>
    8600:	f800283a 	ret
    8604:	1007883a 	mov	r3,r2
    8608:	003ff606 	br	85e4 <__alt_data_end+0xfffb2eb4>
    860c:	f800283a 	ret
    8610:	1007883a 	mov	r3,r2
    8614:	003ff406 	br	85e8 <__alt_data_end+0xfffb2eb8>
    8618:	500d883a 	mov	r6,r10
    861c:	003ff106 	br	85e4 <__alt_data_end+0xfffb2eb4>

00008620 <memset>:
    8620:	20c000cc 	andi	r3,r4,3
    8624:	2005883a 	mov	r2,r4
    8628:	18004326 	beq	r3,zero,8738 <memset+0x118>
    862c:	31ffffc4 	addi	r7,r6,-1
    8630:	30004026 	beq	r6,zero,8734 <memset+0x114>
    8634:	2813883a 	mov	r9,r5
    8638:	200d883a 	mov	r6,r4
    863c:	2007883a 	mov	r3,r4
    8640:	00000406 	br	8654 <memset+0x34>
    8644:	3a3fffc4 	addi	r8,r7,-1
    8648:	31800044 	addi	r6,r6,1
    864c:	38003926 	beq	r7,zero,8734 <memset+0x114>
    8650:	400f883a 	mov	r7,r8
    8654:	18c00044 	addi	r3,r3,1
    8658:	32400005 	stb	r9,0(r6)
    865c:	1a0000cc 	andi	r8,r3,3
    8660:	403ff81e 	bne	r8,zero,8644 <__alt_data_end+0xfffb2f14>
    8664:	010000c4 	movi	r4,3
    8668:	21c02d2e 	bgeu	r4,r7,8720 <memset+0x100>
    866c:	29803fcc 	andi	r6,r5,255
    8670:	3008923a 	slli	r4,r6,8
    8674:	218cb03a 	or	r6,r4,r6
    8678:	3008943a 	slli	r4,r6,16
    867c:	218cb03a 	or	r6,r4,r6
    8680:	010003c4 	movi	r4,15
    8684:	21c0182e 	bgeu	r4,r7,86e8 <memset+0xc8>
    8688:	3b3ffc04 	addi	r12,r7,-16
    868c:	6018d13a 	srli	r12,r12,4
    8690:	1a000104 	addi	r8,r3,4
    8694:	1ac00204 	addi	r11,r3,8
    8698:	6008913a 	slli	r4,r12,4
    869c:	1a800304 	addi	r10,r3,12
    86a0:	1813883a 	mov	r9,r3
    86a4:	21000504 	addi	r4,r4,20
    86a8:	1909883a 	add	r4,r3,r4
    86ac:	49800015 	stw	r6,0(r9)
    86b0:	41800015 	stw	r6,0(r8)
    86b4:	59800015 	stw	r6,0(r11)
    86b8:	51800015 	stw	r6,0(r10)
    86bc:	42000404 	addi	r8,r8,16
    86c0:	4a400404 	addi	r9,r9,16
    86c4:	5ac00404 	addi	r11,r11,16
    86c8:	52800404 	addi	r10,r10,16
    86cc:	413ff71e 	bne	r8,r4,86ac <__alt_data_end+0xfffb2f7c>
    86d0:	63000044 	addi	r12,r12,1
    86d4:	6018913a 	slli	r12,r12,4
    86d8:	39c003cc 	andi	r7,r7,15
    86dc:	010000c4 	movi	r4,3
    86e0:	1b07883a 	add	r3,r3,r12
    86e4:	21c00e2e 	bgeu	r4,r7,8720 <memset+0x100>
    86e8:	1813883a 	mov	r9,r3
    86ec:	3811883a 	mov	r8,r7
    86f0:	010000c4 	movi	r4,3
    86f4:	49800015 	stw	r6,0(r9)
    86f8:	423fff04 	addi	r8,r8,-4
    86fc:	4a400104 	addi	r9,r9,4
    8700:	223ffc36 	bltu	r4,r8,86f4 <__alt_data_end+0xfffb2fc4>
    8704:	393fff04 	addi	r4,r7,-4
    8708:	2008d0ba 	srli	r4,r4,2
    870c:	39c000cc 	andi	r7,r7,3
    8710:	21000044 	addi	r4,r4,1
    8714:	2109883a 	add	r4,r4,r4
    8718:	2109883a 	add	r4,r4,r4
    871c:	1907883a 	add	r3,r3,r4
    8720:	38000426 	beq	r7,zero,8734 <memset+0x114>
    8724:	19cf883a 	add	r7,r3,r7
    8728:	19400005 	stb	r5,0(r3)
    872c:	18c00044 	addi	r3,r3,1
    8730:	19fffd1e 	bne	r3,r7,8728 <__alt_data_end+0xfffb2ff8>
    8734:	f800283a 	ret
    8738:	2007883a 	mov	r3,r4
    873c:	300f883a 	mov	r7,r6
    8740:	003fc806 	br	8664 <__alt_data_end+0xfffb2f34>

00008744 <_Balloc>:
    8744:	20801317 	ldw	r2,76(r4)
    8748:	defffc04 	addi	sp,sp,-16
    874c:	dc400115 	stw	r17,4(sp)
    8750:	dc000015 	stw	r16,0(sp)
    8754:	dfc00315 	stw	ra,12(sp)
    8758:	dc800215 	stw	r18,8(sp)
    875c:	2023883a 	mov	r17,r4
    8760:	2821883a 	mov	r16,r5
    8764:	10000f26 	beq	r2,zero,87a4 <_Balloc+0x60>
    8768:	8407883a 	add	r3,r16,r16
    876c:	18c7883a 	add	r3,r3,r3
    8770:	10c7883a 	add	r3,r2,r3
    8774:	18800017 	ldw	r2,0(r3)
    8778:	10001126 	beq	r2,zero,87c0 <_Balloc+0x7c>
    877c:	11000017 	ldw	r4,0(r2)
    8780:	19000015 	stw	r4,0(r3)
    8784:	10000415 	stw	zero,16(r2)
    8788:	10000315 	stw	zero,12(r2)
    878c:	dfc00317 	ldw	ra,12(sp)
    8790:	dc800217 	ldw	r18,8(sp)
    8794:	dc400117 	ldw	r17,4(sp)
    8798:	dc000017 	ldw	r16,0(sp)
    879c:	dec00404 	addi	sp,sp,16
    87a0:	f800283a 	ret
    87a4:	01400104 	movi	r5,4
    87a8:	01800844 	movi	r6,33
    87ac:	000b58c0 	call	b58c <_calloc_r>
    87b0:	88801315 	stw	r2,76(r17)
    87b4:	103fec1e 	bne	r2,zero,8768 <__alt_data_end+0xfffb3038>
    87b8:	0005883a 	mov	r2,zero
    87bc:	003ff306 	br	878c <__alt_data_end+0xfffb305c>
    87c0:	01400044 	movi	r5,1
    87c4:	2c24983a 	sll	r18,r5,r16
    87c8:	8809883a 	mov	r4,r17
    87cc:	91800144 	addi	r6,r18,5
    87d0:	318d883a 	add	r6,r6,r6
    87d4:	318d883a 	add	r6,r6,r6
    87d8:	000b58c0 	call	b58c <_calloc_r>
    87dc:	103ff626 	beq	r2,zero,87b8 <__alt_data_end+0xfffb3088>
    87e0:	14000115 	stw	r16,4(r2)
    87e4:	14800215 	stw	r18,8(r2)
    87e8:	003fe606 	br	8784 <__alt_data_end+0xfffb3054>

000087ec <_Bfree>:
    87ec:	28000826 	beq	r5,zero,8810 <_Bfree+0x24>
    87f0:	28c00117 	ldw	r3,4(r5)
    87f4:	20801317 	ldw	r2,76(r4)
    87f8:	18c7883a 	add	r3,r3,r3
    87fc:	18c7883a 	add	r3,r3,r3
    8800:	10c5883a 	add	r2,r2,r3
    8804:	10c00017 	ldw	r3,0(r2)
    8808:	28c00015 	stw	r3,0(r5)
    880c:	11400015 	stw	r5,0(r2)
    8810:	f800283a 	ret

00008814 <__multadd>:
    8814:	defff704 	addi	sp,sp,-36
    8818:	dc800215 	stw	r18,8(sp)
    881c:	2c800417 	ldw	r18,16(r5)
    8820:	ddc00715 	stw	r23,28(sp)
    8824:	dd800615 	stw	r22,24(sp)
    8828:	dd000415 	stw	r20,16(sp)
    882c:	dcc00315 	stw	r19,12(sp)
    8830:	dc400115 	stw	r17,4(sp)
    8834:	dc000015 	stw	r16,0(sp)
    8838:	dfc00815 	stw	ra,32(sp)
    883c:	dd400515 	stw	r21,20(sp)
    8840:	2827883a 	mov	r19,r5
    8844:	2029883a 	mov	r20,r4
    8848:	3023883a 	mov	r17,r6
    884c:	3821883a 	mov	r16,r7
    8850:	2d800504 	addi	r22,r5,20
    8854:	002f883a 	mov	r23,zero
    8858:	b5400017 	ldw	r21,0(r22)
    885c:	880b883a 	mov	r5,r17
    8860:	bdc00044 	addi	r23,r23,1
    8864:	a93fffcc 	andi	r4,r21,65535
    8868:	000cbb00 	call	cbb0 <__mulsi3>
    886c:	1421883a 	add	r16,r2,r16
    8870:	a808d43a 	srli	r4,r21,16
    8874:	802ad43a 	srli	r21,r16,16
    8878:	880b883a 	mov	r5,r17
    887c:	000cbb00 	call	cbb0 <__mulsi3>
    8880:	a88f883a 	add	r7,r21,r2
    8884:	3804943a 	slli	r2,r7,16
    8888:	80ffffcc 	andi	r3,r16,65535
    888c:	b5800104 	addi	r22,r22,4
    8890:	10c7883a 	add	r3,r2,r3
    8894:	b0ffff15 	stw	r3,-4(r22)
    8898:	3820d43a 	srli	r16,r7,16
    889c:	bcbfee16 	blt	r23,r18,8858 <__alt_data_end+0xfffb3128>
    88a0:	80000926 	beq	r16,zero,88c8 <__multadd+0xb4>
    88a4:	98800217 	ldw	r2,8(r19)
    88a8:	9080130e 	bge	r18,r2,88f8 <__multadd+0xe4>
    88ac:	90800144 	addi	r2,r18,5
    88b0:	1085883a 	add	r2,r2,r2
    88b4:	1085883a 	add	r2,r2,r2
    88b8:	9885883a 	add	r2,r19,r2
    88bc:	14000015 	stw	r16,0(r2)
    88c0:	94800044 	addi	r18,r18,1
    88c4:	9c800415 	stw	r18,16(r19)
    88c8:	9805883a 	mov	r2,r19
    88cc:	dfc00817 	ldw	ra,32(sp)
    88d0:	ddc00717 	ldw	r23,28(sp)
    88d4:	dd800617 	ldw	r22,24(sp)
    88d8:	dd400517 	ldw	r21,20(sp)
    88dc:	dd000417 	ldw	r20,16(sp)
    88e0:	dcc00317 	ldw	r19,12(sp)
    88e4:	dc800217 	ldw	r18,8(sp)
    88e8:	dc400117 	ldw	r17,4(sp)
    88ec:	dc000017 	ldw	r16,0(sp)
    88f0:	dec00904 	addi	sp,sp,36
    88f4:	f800283a 	ret
    88f8:	99400117 	ldw	r5,4(r19)
    88fc:	a009883a 	mov	r4,r20
    8900:	29400044 	addi	r5,r5,1
    8904:	00087440 	call	8744 <_Balloc>
    8908:	99800417 	ldw	r6,16(r19)
    890c:	99400304 	addi	r5,r19,12
    8910:	11000304 	addi	r4,r2,12
    8914:	31800084 	addi	r6,r6,2
    8918:	318d883a 	add	r6,r6,r6
    891c:	318d883a 	add	r6,r6,r6
    8920:	1023883a 	mov	r17,r2
    8924:	000838c0 	call	838c <memcpy>
    8928:	99000117 	ldw	r4,4(r19)
    892c:	a0c01317 	ldw	r3,76(r20)
    8930:	2109883a 	add	r4,r4,r4
    8934:	2109883a 	add	r4,r4,r4
    8938:	1907883a 	add	r3,r3,r4
    893c:	18800017 	ldw	r2,0(r3)
    8940:	98800015 	stw	r2,0(r19)
    8944:	1cc00015 	stw	r19,0(r3)
    8948:	8827883a 	mov	r19,r17
    894c:	003fd706 	br	88ac <__alt_data_end+0xfffb317c>

00008950 <__s2b>:
    8950:	defff904 	addi	sp,sp,-28
    8954:	dc400115 	stw	r17,4(sp)
    8958:	dc000015 	stw	r16,0(sp)
    895c:	2023883a 	mov	r17,r4
    8960:	2821883a 	mov	r16,r5
    8964:	39000204 	addi	r4,r7,8
    8968:	01400244 	movi	r5,9
    896c:	dcc00315 	stw	r19,12(sp)
    8970:	dc800215 	stw	r18,8(sp)
    8974:	dfc00615 	stw	ra,24(sp)
    8978:	dd400515 	stw	r21,20(sp)
    897c:	dd000415 	stw	r20,16(sp)
    8980:	3825883a 	mov	r18,r7
    8984:	3027883a 	mov	r19,r6
    8988:	000caf00 	call	caf0 <__divsi3>
    898c:	00c00044 	movi	r3,1
    8990:	000b883a 	mov	r5,zero
    8994:	1880030e 	bge	r3,r2,89a4 <__s2b+0x54>
    8998:	18c7883a 	add	r3,r3,r3
    899c:	29400044 	addi	r5,r5,1
    89a0:	18bffd16 	blt	r3,r2,8998 <__alt_data_end+0xfffb3268>
    89a4:	8809883a 	mov	r4,r17
    89a8:	00087440 	call	8744 <_Balloc>
    89ac:	d8c00717 	ldw	r3,28(sp)
    89b0:	10c00515 	stw	r3,20(r2)
    89b4:	00c00044 	movi	r3,1
    89b8:	10c00415 	stw	r3,16(r2)
    89bc:	00c00244 	movi	r3,9
    89c0:	1cc0210e 	bge	r3,r19,8a48 <__s2b+0xf8>
    89c4:	80eb883a 	add	r21,r16,r3
    89c8:	a829883a 	mov	r20,r21
    89cc:	84e1883a 	add	r16,r16,r19
    89d0:	a1c00007 	ldb	r7,0(r20)
    89d4:	8809883a 	mov	r4,r17
    89d8:	a5000044 	addi	r20,r20,1
    89dc:	100b883a 	mov	r5,r2
    89e0:	01800284 	movi	r6,10
    89e4:	39fff404 	addi	r7,r7,-48
    89e8:	00088140 	call	8814 <__multadd>
    89ec:	a43ff81e 	bne	r20,r16,89d0 <__alt_data_end+0xfffb32a0>
    89f0:	ace1883a 	add	r16,r21,r19
    89f4:	843ffe04 	addi	r16,r16,-8
    89f8:	9c800a0e 	bge	r19,r18,8a24 <__s2b+0xd4>
    89fc:	94e5c83a 	sub	r18,r18,r19
    8a00:	84a5883a 	add	r18,r16,r18
    8a04:	81c00007 	ldb	r7,0(r16)
    8a08:	8809883a 	mov	r4,r17
    8a0c:	84000044 	addi	r16,r16,1
    8a10:	100b883a 	mov	r5,r2
    8a14:	01800284 	movi	r6,10
    8a18:	39fff404 	addi	r7,r7,-48
    8a1c:	00088140 	call	8814 <__multadd>
    8a20:	84bff81e 	bne	r16,r18,8a04 <__alt_data_end+0xfffb32d4>
    8a24:	dfc00617 	ldw	ra,24(sp)
    8a28:	dd400517 	ldw	r21,20(sp)
    8a2c:	dd000417 	ldw	r20,16(sp)
    8a30:	dcc00317 	ldw	r19,12(sp)
    8a34:	dc800217 	ldw	r18,8(sp)
    8a38:	dc400117 	ldw	r17,4(sp)
    8a3c:	dc000017 	ldw	r16,0(sp)
    8a40:	dec00704 	addi	sp,sp,28
    8a44:	f800283a 	ret
    8a48:	84000284 	addi	r16,r16,10
    8a4c:	1827883a 	mov	r19,r3
    8a50:	003fe906 	br	89f8 <__alt_data_end+0xfffb32c8>

00008a54 <__hi0bits>:
    8a54:	20bfffec 	andhi	r2,r4,65535
    8a58:	1000141e 	bne	r2,zero,8aac <__hi0bits+0x58>
    8a5c:	2008943a 	slli	r4,r4,16
    8a60:	00800404 	movi	r2,16
    8a64:	20ffc02c 	andhi	r3,r4,65280
    8a68:	1800021e 	bne	r3,zero,8a74 <__hi0bits+0x20>
    8a6c:	2008923a 	slli	r4,r4,8
    8a70:	10800204 	addi	r2,r2,8
    8a74:	20fc002c 	andhi	r3,r4,61440
    8a78:	1800021e 	bne	r3,zero,8a84 <__hi0bits+0x30>
    8a7c:	2008913a 	slli	r4,r4,4
    8a80:	10800104 	addi	r2,r2,4
    8a84:	20f0002c 	andhi	r3,r4,49152
    8a88:	1800031e 	bne	r3,zero,8a98 <__hi0bits+0x44>
    8a8c:	2109883a 	add	r4,r4,r4
    8a90:	10800084 	addi	r2,r2,2
    8a94:	2109883a 	add	r4,r4,r4
    8a98:	20000316 	blt	r4,zero,8aa8 <__hi0bits+0x54>
    8a9c:	2110002c 	andhi	r4,r4,16384
    8aa0:	2000041e 	bne	r4,zero,8ab4 <__hi0bits+0x60>
    8aa4:	00800804 	movi	r2,32
    8aa8:	f800283a 	ret
    8aac:	0005883a 	mov	r2,zero
    8ab0:	003fec06 	br	8a64 <__alt_data_end+0xfffb3334>
    8ab4:	10800044 	addi	r2,r2,1
    8ab8:	f800283a 	ret

00008abc <__lo0bits>:
    8abc:	20c00017 	ldw	r3,0(r4)
    8ac0:	188001cc 	andi	r2,r3,7
    8ac4:	10000826 	beq	r2,zero,8ae8 <__lo0bits+0x2c>
    8ac8:	1880004c 	andi	r2,r3,1
    8acc:	1000211e 	bne	r2,zero,8b54 <__lo0bits+0x98>
    8ad0:	1880008c 	andi	r2,r3,2
    8ad4:	1000211e 	bne	r2,zero,8b5c <__lo0bits+0xa0>
    8ad8:	1806d0ba 	srli	r3,r3,2
    8adc:	00800084 	movi	r2,2
    8ae0:	20c00015 	stw	r3,0(r4)
    8ae4:	f800283a 	ret
    8ae8:	18bfffcc 	andi	r2,r3,65535
    8aec:	10001326 	beq	r2,zero,8b3c <__lo0bits+0x80>
    8af0:	0005883a 	mov	r2,zero
    8af4:	19403fcc 	andi	r5,r3,255
    8af8:	2800021e 	bne	r5,zero,8b04 <__lo0bits+0x48>
    8afc:	1806d23a 	srli	r3,r3,8
    8b00:	10800204 	addi	r2,r2,8
    8b04:	194003cc 	andi	r5,r3,15
    8b08:	2800021e 	bne	r5,zero,8b14 <__lo0bits+0x58>
    8b0c:	1806d13a 	srli	r3,r3,4
    8b10:	10800104 	addi	r2,r2,4
    8b14:	194000cc 	andi	r5,r3,3
    8b18:	2800021e 	bne	r5,zero,8b24 <__lo0bits+0x68>
    8b1c:	1806d0ba 	srli	r3,r3,2
    8b20:	10800084 	addi	r2,r2,2
    8b24:	1940004c 	andi	r5,r3,1
    8b28:	2800081e 	bne	r5,zero,8b4c <__lo0bits+0x90>
    8b2c:	1806d07a 	srli	r3,r3,1
    8b30:	1800051e 	bne	r3,zero,8b48 <__lo0bits+0x8c>
    8b34:	00800804 	movi	r2,32
    8b38:	f800283a 	ret
    8b3c:	1806d43a 	srli	r3,r3,16
    8b40:	00800404 	movi	r2,16
    8b44:	003feb06 	br	8af4 <__alt_data_end+0xfffb33c4>
    8b48:	10800044 	addi	r2,r2,1
    8b4c:	20c00015 	stw	r3,0(r4)
    8b50:	f800283a 	ret
    8b54:	0005883a 	mov	r2,zero
    8b58:	f800283a 	ret
    8b5c:	1806d07a 	srli	r3,r3,1
    8b60:	00800044 	movi	r2,1
    8b64:	20c00015 	stw	r3,0(r4)
    8b68:	f800283a 	ret

00008b6c <__i2b>:
    8b6c:	defffd04 	addi	sp,sp,-12
    8b70:	dc000015 	stw	r16,0(sp)
    8b74:	04000044 	movi	r16,1
    8b78:	dc400115 	stw	r17,4(sp)
    8b7c:	2823883a 	mov	r17,r5
    8b80:	800b883a 	mov	r5,r16
    8b84:	dfc00215 	stw	ra,8(sp)
    8b88:	00087440 	call	8744 <_Balloc>
    8b8c:	14400515 	stw	r17,20(r2)
    8b90:	14000415 	stw	r16,16(r2)
    8b94:	dfc00217 	ldw	ra,8(sp)
    8b98:	dc400117 	ldw	r17,4(sp)
    8b9c:	dc000017 	ldw	r16,0(sp)
    8ba0:	dec00304 	addi	sp,sp,12
    8ba4:	f800283a 	ret

00008ba8 <__multiply>:
    8ba8:	deffef04 	addi	sp,sp,-68
    8bac:	dc400815 	stw	r17,32(sp)
    8bb0:	dc000715 	stw	r16,28(sp)
    8bb4:	2c400417 	ldw	r17,16(r5)
    8bb8:	34000417 	ldw	r16,16(r6)
    8bbc:	dd800d15 	stw	r22,52(sp)
    8bc0:	dc800915 	stw	r18,36(sp)
    8bc4:	dfc01015 	stw	ra,64(sp)
    8bc8:	df000f15 	stw	fp,60(sp)
    8bcc:	ddc00e15 	stw	r23,56(sp)
    8bd0:	dd400c15 	stw	r21,48(sp)
    8bd4:	dd000b15 	stw	r20,44(sp)
    8bd8:	dcc00a15 	stw	r19,40(sp)
    8bdc:	2825883a 	mov	r18,r5
    8be0:	302d883a 	mov	r22,r6
    8be4:	8c009116 	blt	r17,r16,8e2c <__multiply+0x284>
    8be8:	8005883a 	mov	r2,r16
    8bec:	8821883a 	mov	r16,r17
    8bf0:	1023883a 	mov	r17,r2
    8bf4:	90800217 	ldw	r2,8(r18)
    8bf8:	8447883a 	add	r3,r16,r17
    8bfc:	d8c00215 	stw	r3,8(sp)
    8c00:	91400117 	ldw	r5,4(r18)
    8c04:	10c0010e 	bge	r2,r3,8c0c <__multiply+0x64>
    8c08:	29400044 	addi	r5,r5,1
    8c0c:	00087440 	call	8744 <_Balloc>
    8c10:	d8c00217 	ldw	r3,8(sp)
    8c14:	d8800615 	stw	r2,24(sp)
    8c18:	18eb883a 	add	r21,r3,r3
    8c1c:	ad6b883a 	add	r21,r21,r21
    8c20:	10c00504 	addi	r3,r2,20
    8c24:	1d6b883a 	add	r21,r3,r21
    8c28:	d8c00115 	stw	r3,4(sp)
    8c2c:	dd400315 	stw	r21,12(sp)
    8c30:	1805883a 	mov	r2,r3
    8c34:	1d40042e 	bgeu	r3,r21,8c48 <__multiply+0xa0>
    8c38:	d8c00317 	ldw	r3,12(sp)
    8c3c:	10000015 	stw	zero,0(r2)
    8c40:	10800104 	addi	r2,r2,4
    8c44:	10fffc36 	bltu	r2,r3,8c38 <__alt_data_end+0xfffb3508>
    8c48:	8c63883a 	add	r17,r17,r17
    8c4c:	b5800504 	addi	r22,r22,20
    8c50:	8c63883a 	add	r17,r17,r17
    8c54:	94800504 	addi	r18,r18,20
    8c58:	8421883a 	add	r16,r16,r16
    8c5c:	b463883a 	add	r17,r22,r17
    8c60:	8421883a 	add	r16,r16,r16
    8c64:	dd800015 	stw	r22,0(sp)
    8c68:	dc800415 	stw	r18,16(sp)
    8c6c:	dc400515 	stw	r17,20(sp)
    8c70:	9429883a 	add	r20,r18,r16
    8c74:	b4404f2e 	bgeu	r22,r17,8db4 <__multiply+0x20c>
    8c78:	d8c00017 	ldw	r3,0(sp)
    8c7c:	1c800017 	ldw	r18,0(r3)
    8c80:	943fffcc 	andi	r16,r18,65535
    8c84:	80001e26 	beq	r16,zero,8d00 <__multiply+0x158>
    8c88:	dd800117 	ldw	r22,4(sp)
    8c8c:	dd400417 	ldw	r21,16(sp)
    8c90:	0025883a 	mov	r18,zero
    8c94:	adc00017 	ldw	r23,0(r21)
    8c98:	b4c00017 	ldw	r19,0(r22)
    8c9c:	800b883a 	mov	r5,r16
    8ca0:	b93fffcc 	andi	r4,r23,65535
    8ca4:	000cbb00 	call	cbb0 <__mulsi3>
    8ca8:	9c7fffcc 	andi	r17,r19,65535
    8cac:	8885883a 	add	r2,r17,r2
    8cb0:	b808d43a 	srli	r4,r23,16
    8cb4:	14a3883a 	add	r17,r2,r18
    8cb8:	9826d43a 	srli	r19,r19,16
    8cbc:	8824d43a 	srli	r18,r17,16
    8cc0:	800b883a 	mov	r5,r16
    8cc4:	000cbb00 	call	cbb0 <__mulsi3>
    8cc8:	9885883a 	add	r2,r19,r2
    8ccc:	14a7883a 	add	r19,r2,r18
    8cd0:	88ffffcc 	andi	r3,r17,65535
    8cd4:	9822943a 	slli	r17,r19,16
    8cd8:	ad400104 	addi	r21,r21,4
    8cdc:	b005883a 	mov	r2,r22
    8ce0:	88c6b03a 	or	r3,r17,r3
    8ce4:	b0c00015 	stw	r3,0(r22)
    8ce8:	9824d43a 	srli	r18,r19,16
    8cec:	b5800104 	addi	r22,r22,4
    8cf0:	ad3fe836 	bltu	r21,r20,8c94 <__alt_data_end+0xfffb3564>
    8cf4:	d8c00017 	ldw	r3,0(sp)
    8cf8:	14800115 	stw	r18,4(r2)
    8cfc:	1c800017 	ldw	r18,0(r3)
    8d00:	9024d43a 	srli	r18,r18,16
    8d04:	90002226 	beq	r18,zero,8d90 <__multiply+0x1e8>
    8d08:	d8c00117 	ldw	r3,4(sp)
    8d0c:	dd800417 	ldw	r22,16(sp)
    8d10:	002f883a 	mov	r23,zero
    8d14:	1f000017 	ldw	fp,0(r3)
    8d18:	1823883a 	mov	r17,r3
    8d1c:	182b883a 	mov	r21,r3
    8d20:	e021883a 	mov	r16,fp
    8d24:	00000106 	br	8d2c <__multiply+0x184>
    8d28:	982b883a 	mov	r21,r19
    8d2c:	b100000b 	ldhu	r4,0(r22)
    8d30:	8020d43a 	srli	r16,r16,16
    8d34:	900b883a 	mov	r5,r18
    8d38:	000cbb00 	call	cbb0 <__mulsi3>
    8d3c:	1405883a 	add	r2,r2,r16
    8d40:	15ef883a 	add	r23,r2,r23
    8d44:	b804943a 	slli	r2,r23,16
    8d48:	e0ffffcc 	andi	r3,fp,65535
    8d4c:	8c400104 	addi	r17,r17,4
    8d50:	10c6b03a 	or	r3,r2,r3
    8d54:	88ffff15 	stw	r3,-4(r17)
    8d58:	b5800104 	addi	r22,r22,4
    8d5c:	b13fff17 	ldw	r4,-4(r22)
    8d60:	acc00104 	addi	r19,r21,4
    8d64:	900b883a 	mov	r5,r18
    8d68:	2008d43a 	srli	r4,r4,16
    8d6c:	9c000017 	ldw	r16,0(r19)
    8d70:	000cbb00 	call	cbb0 <__mulsi3>
    8d74:	b806d43a 	srli	r3,r23,16
    8d78:	813fffcc 	andi	r4,r16,65535
    8d7c:	1105883a 	add	r2,r2,r4
    8d80:	10f9883a 	add	fp,r2,r3
    8d84:	e02ed43a 	srli	r23,fp,16
    8d88:	b53fe736 	bltu	r22,r20,8d28 <__alt_data_end+0xfffb35f8>
    8d8c:	af000115 	stw	fp,4(r21)
    8d90:	d8c00017 	ldw	r3,0(sp)
    8d94:	d9000517 	ldw	r4,20(sp)
    8d98:	18c00104 	addi	r3,r3,4
    8d9c:	d8c00015 	stw	r3,0(sp)
    8da0:	d8c00117 	ldw	r3,4(sp)
    8da4:	18c00104 	addi	r3,r3,4
    8da8:	d8c00115 	stw	r3,4(sp)
    8dac:	d8c00017 	ldw	r3,0(sp)
    8db0:	193fb136 	bltu	r3,r4,8c78 <__alt_data_end+0xfffb3548>
    8db4:	d8c00217 	ldw	r3,8(sp)
    8db8:	00c00c0e 	bge	zero,r3,8dec <__multiply+0x244>
    8dbc:	d8c00317 	ldw	r3,12(sp)
    8dc0:	18bfff17 	ldw	r2,-4(r3)
    8dc4:	1d7fff04 	addi	r21,r3,-4
    8dc8:	10000326 	beq	r2,zero,8dd8 <__multiply+0x230>
    8dcc:	00000706 	br	8dec <__multiply+0x244>
    8dd0:	a8800017 	ldw	r2,0(r21)
    8dd4:	1000051e 	bne	r2,zero,8dec <__multiply+0x244>
    8dd8:	d8c00217 	ldw	r3,8(sp)
    8ddc:	ad7fff04 	addi	r21,r21,-4
    8de0:	18ffffc4 	addi	r3,r3,-1
    8de4:	d8c00215 	stw	r3,8(sp)
    8de8:	183ff91e 	bne	r3,zero,8dd0 <__alt_data_end+0xfffb36a0>
    8dec:	d8c00617 	ldw	r3,24(sp)
    8df0:	d9000217 	ldw	r4,8(sp)
    8df4:	1805883a 	mov	r2,r3
    8df8:	19000415 	stw	r4,16(r3)
    8dfc:	dfc01017 	ldw	ra,64(sp)
    8e00:	df000f17 	ldw	fp,60(sp)
    8e04:	ddc00e17 	ldw	r23,56(sp)
    8e08:	dd800d17 	ldw	r22,52(sp)
    8e0c:	dd400c17 	ldw	r21,48(sp)
    8e10:	dd000b17 	ldw	r20,44(sp)
    8e14:	dcc00a17 	ldw	r19,40(sp)
    8e18:	dc800917 	ldw	r18,36(sp)
    8e1c:	dc400817 	ldw	r17,32(sp)
    8e20:	dc000717 	ldw	r16,28(sp)
    8e24:	dec01104 	addi	sp,sp,68
    8e28:	f800283a 	ret
    8e2c:	3025883a 	mov	r18,r6
    8e30:	282d883a 	mov	r22,r5
    8e34:	003f6f06 	br	8bf4 <__alt_data_end+0xfffb34c4>

00008e38 <__pow5mult>:
    8e38:	defffa04 	addi	sp,sp,-24
    8e3c:	dcc00315 	stw	r19,12(sp)
    8e40:	dc800215 	stw	r18,8(sp)
    8e44:	dc000015 	stw	r16,0(sp)
    8e48:	dfc00515 	stw	ra,20(sp)
    8e4c:	dd000415 	stw	r20,16(sp)
    8e50:	dc400115 	stw	r17,4(sp)
    8e54:	308000cc 	andi	r2,r6,3
    8e58:	3021883a 	mov	r16,r6
    8e5c:	2027883a 	mov	r19,r4
    8e60:	2825883a 	mov	r18,r5
    8e64:	10002e1e 	bne	r2,zero,8f20 <__pow5mult+0xe8>
    8e68:	8021d0ba 	srai	r16,r16,2
    8e6c:	80001a26 	beq	r16,zero,8ed8 <__pow5mult+0xa0>
    8e70:	9c401217 	ldw	r17,72(r19)
    8e74:	8800061e 	bne	r17,zero,8e90 <__pow5mult+0x58>
    8e78:	00003406 	br	8f4c <__pow5mult+0x114>
    8e7c:	8021d07a 	srai	r16,r16,1
    8e80:	80001526 	beq	r16,zero,8ed8 <__pow5mult+0xa0>
    8e84:	88800017 	ldw	r2,0(r17)
    8e88:	10001c26 	beq	r2,zero,8efc <__pow5mult+0xc4>
    8e8c:	1023883a 	mov	r17,r2
    8e90:	80c0004c 	andi	r3,r16,1
    8e94:	183ff926 	beq	r3,zero,8e7c <__alt_data_end+0xfffb374c>
    8e98:	900b883a 	mov	r5,r18
    8e9c:	880d883a 	mov	r6,r17
    8ea0:	9809883a 	mov	r4,r19
    8ea4:	0008ba80 	call	8ba8 <__multiply>
    8ea8:	90001b26 	beq	r18,zero,8f18 <__pow5mult+0xe0>
    8eac:	91c00117 	ldw	r7,4(r18)
    8eb0:	98c01317 	ldw	r3,76(r19)
    8eb4:	8021d07a 	srai	r16,r16,1
    8eb8:	39cf883a 	add	r7,r7,r7
    8ebc:	39cf883a 	add	r7,r7,r7
    8ec0:	19c7883a 	add	r3,r3,r7
    8ec4:	19000017 	ldw	r4,0(r3)
    8ec8:	91000015 	stw	r4,0(r18)
    8ecc:	1c800015 	stw	r18,0(r3)
    8ed0:	1025883a 	mov	r18,r2
    8ed4:	803feb1e 	bne	r16,zero,8e84 <__alt_data_end+0xfffb3754>
    8ed8:	9005883a 	mov	r2,r18
    8edc:	dfc00517 	ldw	ra,20(sp)
    8ee0:	dd000417 	ldw	r20,16(sp)
    8ee4:	dcc00317 	ldw	r19,12(sp)
    8ee8:	dc800217 	ldw	r18,8(sp)
    8eec:	dc400117 	ldw	r17,4(sp)
    8ef0:	dc000017 	ldw	r16,0(sp)
    8ef4:	dec00604 	addi	sp,sp,24
    8ef8:	f800283a 	ret
    8efc:	9809883a 	mov	r4,r19
    8f00:	880b883a 	mov	r5,r17
    8f04:	880d883a 	mov	r6,r17
    8f08:	0008ba80 	call	8ba8 <__multiply>
    8f0c:	88800015 	stw	r2,0(r17)
    8f10:	10000015 	stw	zero,0(r2)
    8f14:	003fdd06 	br	8e8c <__alt_data_end+0xfffb375c>
    8f18:	1025883a 	mov	r18,r2
    8f1c:	003fd706 	br	8e7c <__alt_data_end+0xfffb374c>
    8f20:	10bfffc4 	addi	r2,r2,-1
    8f24:	1085883a 	add	r2,r2,r2
    8f28:	00c00074 	movhi	r3,1
    8f2c:	18c91504 	addi	r3,r3,9300
    8f30:	1085883a 	add	r2,r2,r2
    8f34:	1885883a 	add	r2,r3,r2
    8f38:	11800017 	ldw	r6,0(r2)
    8f3c:	000f883a 	mov	r7,zero
    8f40:	00088140 	call	8814 <__multadd>
    8f44:	1025883a 	mov	r18,r2
    8f48:	003fc706 	br	8e68 <__alt_data_end+0xfffb3738>
    8f4c:	05000044 	movi	r20,1
    8f50:	9809883a 	mov	r4,r19
    8f54:	a00b883a 	mov	r5,r20
    8f58:	00087440 	call	8744 <_Balloc>
    8f5c:	1023883a 	mov	r17,r2
    8f60:	00809c44 	movi	r2,625
    8f64:	88800515 	stw	r2,20(r17)
    8f68:	8d000415 	stw	r20,16(r17)
    8f6c:	9c401215 	stw	r17,72(r19)
    8f70:	88000015 	stw	zero,0(r17)
    8f74:	003fc606 	br	8e90 <__alt_data_end+0xfffb3760>

00008f78 <__lshift>:
    8f78:	defff904 	addi	sp,sp,-28
    8f7c:	dd000415 	stw	r20,16(sp)
    8f80:	dcc00315 	stw	r19,12(sp)
    8f84:	3029d17a 	srai	r20,r6,5
    8f88:	2cc00417 	ldw	r19,16(r5)
    8f8c:	28800217 	ldw	r2,8(r5)
    8f90:	dd400515 	stw	r21,20(sp)
    8f94:	a4e7883a 	add	r19,r20,r19
    8f98:	dc800215 	stw	r18,8(sp)
    8f9c:	dc400115 	stw	r17,4(sp)
    8fa0:	dc000015 	stw	r16,0(sp)
    8fa4:	dfc00615 	stw	ra,24(sp)
    8fa8:	9c000044 	addi	r16,r19,1
    8fac:	2823883a 	mov	r17,r5
    8fb0:	302b883a 	mov	r21,r6
    8fb4:	2025883a 	mov	r18,r4
    8fb8:	29400117 	ldw	r5,4(r5)
    8fbc:	1400030e 	bge	r2,r16,8fcc <__lshift+0x54>
    8fc0:	1085883a 	add	r2,r2,r2
    8fc4:	29400044 	addi	r5,r5,1
    8fc8:	143ffd16 	blt	r2,r16,8fc0 <__alt_data_end+0xfffb3890>
    8fcc:	9009883a 	mov	r4,r18
    8fd0:	00087440 	call	8744 <_Balloc>
    8fd4:	11c00504 	addi	r7,r2,20
    8fd8:	0500090e 	bge	zero,r20,9000 <__lshift+0x88>
    8fdc:	3811883a 	mov	r8,r7
    8fe0:	0007883a 	mov	r3,zero
    8fe4:	40000015 	stw	zero,0(r8)
    8fe8:	18c00044 	addi	r3,r3,1
    8fec:	42000104 	addi	r8,r8,4
    8ff0:	1d3ffc1e 	bne	r3,r20,8fe4 <__alt_data_end+0xfffb38b4>
    8ff4:	18c7883a 	add	r3,r3,r3
    8ff8:	18c7883a 	add	r3,r3,r3
    8ffc:	38cf883a 	add	r7,r7,r3
    9000:	89000417 	ldw	r4,16(r17)
    9004:	88c00504 	addi	r3,r17,20
    9008:	a98007cc 	andi	r6,r21,31
    900c:	2109883a 	add	r4,r4,r4
    9010:	2109883a 	add	r4,r4,r4
    9014:	1909883a 	add	r4,r3,r4
    9018:	30002326 	beq	r6,zero,90a8 <__lshift+0x130>
    901c:	01400804 	movi	r5,32
    9020:	298bc83a 	sub	r5,r5,r6
    9024:	0013883a 	mov	r9,zero
    9028:	1a000017 	ldw	r8,0(r3)
    902c:	3815883a 	mov	r10,r7
    9030:	39c00104 	addi	r7,r7,4
    9034:	4190983a 	sll	r8,r8,r6
    9038:	18c00104 	addi	r3,r3,4
    903c:	4a10b03a 	or	r8,r9,r8
    9040:	3a3fff15 	stw	r8,-4(r7)
    9044:	1a3fff17 	ldw	r8,-4(r3)
    9048:	4152d83a 	srl	r9,r8,r5
    904c:	193ff636 	bltu	r3,r4,9028 <__alt_data_end+0xfffb38f8>
    9050:	52400115 	stw	r9,4(r10)
    9054:	48000126 	beq	r9,zero,905c <__lshift+0xe4>
    9058:	9c000084 	addi	r16,r19,2
    905c:	89000117 	ldw	r4,4(r17)
    9060:	90c01317 	ldw	r3,76(r18)
    9064:	843fffc4 	addi	r16,r16,-1
    9068:	2109883a 	add	r4,r4,r4
    906c:	2109883a 	add	r4,r4,r4
    9070:	1907883a 	add	r3,r3,r4
    9074:	19000017 	ldw	r4,0(r3)
    9078:	14000415 	stw	r16,16(r2)
    907c:	89000015 	stw	r4,0(r17)
    9080:	1c400015 	stw	r17,0(r3)
    9084:	dfc00617 	ldw	ra,24(sp)
    9088:	dd400517 	ldw	r21,20(sp)
    908c:	dd000417 	ldw	r20,16(sp)
    9090:	dcc00317 	ldw	r19,12(sp)
    9094:	dc800217 	ldw	r18,8(sp)
    9098:	dc400117 	ldw	r17,4(sp)
    909c:	dc000017 	ldw	r16,0(sp)
    90a0:	dec00704 	addi	sp,sp,28
    90a4:	f800283a 	ret
    90a8:	19400017 	ldw	r5,0(r3)
    90ac:	39c00104 	addi	r7,r7,4
    90b0:	18c00104 	addi	r3,r3,4
    90b4:	397fff15 	stw	r5,-4(r7)
    90b8:	193ffb36 	bltu	r3,r4,90a8 <__alt_data_end+0xfffb3978>
    90bc:	003fe706 	br	905c <__alt_data_end+0xfffb392c>

000090c0 <__mcmp>:
    90c0:	20800417 	ldw	r2,16(r4)
    90c4:	28c00417 	ldw	r3,16(r5)
    90c8:	10c5c83a 	sub	r2,r2,r3
    90cc:	1000111e 	bne	r2,zero,9114 <__mcmp+0x54>
    90d0:	18c7883a 	add	r3,r3,r3
    90d4:	18c7883a 	add	r3,r3,r3
    90d8:	21000504 	addi	r4,r4,20
    90dc:	29400504 	addi	r5,r5,20
    90e0:	20c5883a 	add	r2,r4,r3
    90e4:	28cb883a 	add	r5,r5,r3
    90e8:	00000106 	br	90f0 <__mcmp+0x30>
    90ec:	20800a2e 	bgeu	r4,r2,9118 <__mcmp+0x58>
    90f0:	10bfff04 	addi	r2,r2,-4
    90f4:	297fff04 	addi	r5,r5,-4
    90f8:	11800017 	ldw	r6,0(r2)
    90fc:	28c00017 	ldw	r3,0(r5)
    9100:	30fffa26 	beq	r6,r3,90ec <__alt_data_end+0xfffb39bc>
    9104:	30c00236 	bltu	r6,r3,9110 <__mcmp+0x50>
    9108:	00800044 	movi	r2,1
    910c:	f800283a 	ret
    9110:	00bfffc4 	movi	r2,-1
    9114:	f800283a 	ret
    9118:	0005883a 	mov	r2,zero
    911c:	f800283a 	ret

00009120 <__mdiff>:
    9120:	defffb04 	addi	sp,sp,-20
    9124:	dc000015 	stw	r16,0(sp)
    9128:	2821883a 	mov	r16,r5
    912c:	dcc00315 	stw	r19,12(sp)
    9130:	300b883a 	mov	r5,r6
    9134:	2027883a 	mov	r19,r4
    9138:	8009883a 	mov	r4,r16
    913c:	dc800215 	stw	r18,8(sp)
    9140:	dfc00415 	stw	ra,16(sp)
    9144:	dc400115 	stw	r17,4(sp)
    9148:	3025883a 	mov	r18,r6
    914c:	00090c00 	call	90c0 <__mcmp>
    9150:	10005226 	beq	r2,zero,929c <__mdiff+0x17c>
    9154:	10004c16 	blt	r2,zero,9288 <__mdiff+0x168>
    9158:	0023883a 	mov	r17,zero
    915c:	81400117 	ldw	r5,4(r16)
    9160:	9809883a 	mov	r4,r19
    9164:	00087440 	call	8744 <_Balloc>
    9168:	83400417 	ldw	r13,16(r16)
    916c:	93800417 	ldw	r14,16(r18)
    9170:	81000504 	addi	r4,r16,20
    9174:	6b59883a 	add	r12,r13,r13
    9178:	739d883a 	add	r14,r14,r14
    917c:	6319883a 	add	r12,r12,r12
    9180:	91800504 	addi	r6,r18,20
    9184:	739d883a 	add	r14,r14,r14
    9188:	14400315 	stw	r17,12(r2)
    918c:	2319883a 	add	r12,r4,r12
    9190:	339d883a 	add	r14,r6,r14
    9194:	12400504 	addi	r9,r2,20
    9198:	0007883a 	mov	r3,zero
    919c:	22000017 	ldw	r8,0(r4)
    91a0:	32800017 	ldw	r10,0(r6)
    91a4:	4ac00104 	addi	r11,r9,4
    91a8:	41ffffcc 	andi	r7,r8,65535
    91ac:	38c7883a 	add	r3,r7,r3
    91b0:	51ffffcc 	andi	r7,r10,65535
    91b4:	19cfc83a 	sub	r7,r3,r7
    91b8:	4010d43a 	srli	r8,r8,16
    91bc:	5014d43a 	srli	r10,r10,16
    91c0:	3807d43a 	srai	r3,r7,16
    91c4:	39ffffcc 	andi	r7,r7,65535
    91c8:	4291c83a 	sub	r8,r8,r10
    91cc:	40c7883a 	add	r3,r8,r3
    91d0:	1810943a 	slli	r8,r3,16
    91d4:	31800104 	addi	r6,r6,4
    91d8:	21000104 	addi	r4,r4,4
    91dc:	41ceb03a 	or	r7,r8,r7
    91e0:	49c00015 	stw	r7,0(r9)
    91e4:	1807d43a 	srai	r3,r3,16
    91e8:	580b883a 	mov	r5,r11
    91ec:	5813883a 	mov	r9,r11
    91f0:	33bfea36 	bltu	r6,r14,919c <__alt_data_end+0xfffb3a6c>
    91f4:	2011883a 	mov	r8,r4
    91f8:	2300152e 	bgeu	r4,r12,9250 <__mdiff+0x130>
    91fc:	21400017 	ldw	r5,0(r4)
    9200:	4a400104 	addi	r9,r9,4
    9204:	21000104 	addi	r4,r4,4
    9208:	29ffffcc 	andi	r7,r5,65535
    920c:	38c7883a 	add	r3,r7,r3
    9210:	280ad43a 	srli	r5,r5,16
    9214:	180dd43a 	srai	r6,r3,16
    9218:	19ffffcc 	andi	r7,r3,65535
    921c:	3147883a 	add	r3,r6,r5
    9220:	180a943a 	slli	r5,r3,16
    9224:	1807d43a 	srai	r3,r3,16
    9228:	29ceb03a 	or	r7,r5,r7
    922c:	49ffff15 	stw	r7,-4(r9)
    9230:	233ff236 	bltu	r4,r12,91fc <__alt_data_end+0xfffb3acc>
    9234:	0206303a 	nor	r3,zero,r8
    9238:	1b07883a 	add	r3,r3,r12
    923c:	1806d0ba 	srli	r3,r3,2
    9240:	18c00044 	addi	r3,r3,1
    9244:	18c7883a 	add	r3,r3,r3
    9248:	18c7883a 	add	r3,r3,r3
    924c:	58cb883a 	add	r5,r11,r3
    9250:	28ffff04 	addi	r3,r5,-4
    9254:	3800041e 	bne	r7,zero,9268 <__mdiff+0x148>
    9258:	18ffff04 	addi	r3,r3,-4
    925c:	19000017 	ldw	r4,0(r3)
    9260:	6b7fffc4 	addi	r13,r13,-1
    9264:	203ffc26 	beq	r4,zero,9258 <__alt_data_end+0xfffb3b28>
    9268:	13400415 	stw	r13,16(r2)
    926c:	dfc00417 	ldw	ra,16(sp)
    9270:	dcc00317 	ldw	r19,12(sp)
    9274:	dc800217 	ldw	r18,8(sp)
    9278:	dc400117 	ldw	r17,4(sp)
    927c:	dc000017 	ldw	r16,0(sp)
    9280:	dec00504 	addi	sp,sp,20
    9284:	f800283a 	ret
    9288:	8005883a 	mov	r2,r16
    928c:	04400044 	movi	r17,1
    9290:	9021883a 	mov	r16,r18
    9294:	1025883a 	mov	r18,r2
    9298:	003fb006 	br	915c <__alt_data_end+0xfffb3a2c>
    929c:	9809883a 	mov	r4,r19
    92a0:	000b883a 	mov	r5,zero
    92a4:	00087440 	call	8744 <_Balloc>
    92a8:	00c00044 	movi	r3,1
    92ac:	10c00415 	stw	r3,16(r2)
    92b0:	10000515 	stw	zero,20(r2)
    92b4:	003fed06 	br	926c <__alt_data_end+0xfffb3b3c>

000092b8 <__ulp>:
    92b8:	295ffc2c 	andhi	r5,r5,32752
    92bc:	00bf3034 	movhi	r2,64704
    92c0:	2887883a 	add	r3,r5,r2
    92c4:	00c0020e 	bge	zero,r3,92d0 <__ulp+0x18>
    92c8:	0005883a 	mov	r2,zero
    92cc:	f800283a 	ret
    92d0:	00c7c83a 	sub	r3,zero,r3
    92d4:	180bd53a 	srai	r5,r3,20
    92d8:	008004c4 	movi	r2,19
    92dc:	11400a0e 	bge	r2,r5,9308 <__ulp+0x50>
    92e0:	00800c84 	movi	r2,50
    92e4:	0007883a 	mov	r3,zero
    92e8:	11400516 	blt	r2,r5,9300 <__ulp+0x48>
    92ec:	00800cc4 	movi	r2,51
    92f0:	114bc83a 	sub	r5,r2,r5
    92f4:	00800044 	movi	r2,1
    92f8:	1144983a 	sll	r2,r2,r5
    92fc:	f800283a 	ret
    9300:	00800044 	movi	r2,1
    9304:	f800283a 	ret
    9308:	00800234 	movhi	r2,8
    930c:	1147d83a 	sra	r3,r2,r5
    9310:	0005883a 	mov	r2,zero
    9314:	f800283a 	ret

00009318 <__b2d>:
    9318:	defffa04 	addi	sp,sp,-24
    931c:	dc000015 	stw	r16,0(sp)
    9320:	24000417 	ldw	r16,16(r4)
    9324:	dc400115 	stw	r17,4(sp)
    9328:	24400504 	addi	r17,r4,20
    932c:	8421883a 	add	r16,r16,r16
    9330:	8421883a 	add	r16,r16,r16
    9334:	8c21883a 	add	r16,r17,r16
    9338:	dc800215 	stw	r18,8(sp)
    933c:	84bfff17 	ldw	r18,-4(r16)
    9340:	dd000415 	stw	r20,16(sp)
    9344:	dcc00315 	stw	r19,12(sp)
    9348:	9009883a 	mov	r4,r18
    934c:	2829883a 	mov	r20,r5
    9350:	dfc00515 	stw	ra,20(sp)
    9354:	0008a540 	call	8a54 <__hi0bits>
    9358:	00c00804 	movi	r3,32
    935c:	1887c83a 	sub	r3,r3,r2
    9360:	a0c00015 	stw	r3,0(r20)
    9364:	00c00284 	movi	r3,10
    9368:	84ffff04 	addi	r19,r16,-4
    936c:	18801216 	blt	r3,r2,93b8 <__b2d+0xa0>
    9370:	014002c4 	movi	r5,11
    9374:	2889c83a 	sub	r4,r5,r2
    9378:	9106d83a 	srl	r3,r18,r4
    937c:	18cffc34 	orhi	r3,r3,16368
    9380:	8cc0282e 	bgeu	r17,r19,9424 <__b2d+0x10c>
    9384:	817ffe17 	ldw	r5,-8(r16)
    9388:	290ad83a 	srl	r5,r5,r4
    938c:	10800544 	addi	r2,r2,21
    9390:	9084983a 	sll	r2,r18,r2
    9394:	2884b03a 	or	r2,r5,r2
    9398:	dfc00517 	ldw	ra,20(sp)
    939c:	dd000417 	ldw	r20,16(sp)
    93a0:	dcc00317 	ldw	r19,12(sp)
    93a4:	dc800217 	ldw	r18,8(sp)
    93a8:	dc400117 	ldw	r17,4(sp)
    93ac:	dc000017 	ldw	r16,0(sp)
    93b0:	dec00604 	addi	sp,sp,24
    93b4:	f800283a 	ret
    93b8:	113ffd44 	addi	r4,r2,-11
    93bc:	8cc00f2e 	bgeu	r17,r19,93fc <__b2d+0xe4>
    93c0:	81bffe04 	addi	r6,r16,-8
    93c4:	817ffe17 	ldw	r5,-8(r16)
    93c8:	20001326 	beq	r4,zero,9418 <__b2d+0x100>
    93cc:	00c00ac4 	movi	r3,43
    93d0:	1885c83a 	sub	r2,r3,r2
    93d4:	2886d83a 	srl	r3,r5,r2
    93d8:	9124983a 	sll	r18,r18,r4
    93dc:	90e4b03a 	or	r18,r18,r3
    93e0:	90cffc34 	orhi	r3,r18,16368
    93e4:	8980112e 	bgeu	r17,r6,942c <__b2d+0x114>
    93e8:	81bffd17 	ldw	r6,-12(r16)
    93ec:	308cd83a 	srl	r6,r6,r2
    93f0:	2904983a 	sll	r2,r5,r4
    93f4:	1184b03a 	or	r2,r2,r6
    93f8:	003fe706 	br	9398 <__alt_data_end+0xfffb3c68>
    93fc:	20000526 	beq	r4,zero,9414 <__b2d+0xfc>
    9400:	9124983a 	sll	r18,r18,r4
    9404:	000d883a 	mov	r6,zero
    9408:	000b883a 	mov	r5,zero
    940c:	90cffc34 	orhi	r3,r18,16368
    9410:	003ff706 	br	93f0 <__alt_data_end+0xfffb3cc0>
    9414:	000b883a 	mov	r5,zero
    9418:	90cffc34 	orhi	r3,r18,16368
    941c:	2805883a 	mov	r2,r5
    9420:	003fdd06 	br	9398 <__alt_data_end+0xfffb3c68>
    9424:	000b883a 	mov	r5,zero
    9428:	003fd806 	br	938c <__alt_data_end+0xfffb3c5c>
    942c:	000d883a 	mov	r6,zero
    9430:	003fef06 	br	93f0 <__alt_data_end+0xfffb3cc0>

00009434 <__d2b>:
    9434:	defff704 	addi	sp,sp,-36
    9438:	dc000215 	stw	r16,8(sp)
    943c:	3021883a 	mov	r16,r6
    9440:	dc400315 	stw	r17,12(sp)
    9444:	8022907a 	slli	r17,r16,1
    9448:	dd400715 	stw	r21,28(sp)
    944c:	282b883a 	mov	r21,r5
    9450:	01400044 	movi	r5,1
    9454:	dd000615 	stw	r20,24(sp)
    9458:	dcc00515 	stw	r19,20(sp)
    945c:	dc800415 	stw	r18,16(sp)
    9460:	dfc00815 	stw	ra,32(sp)
    9464:	3829883a 	mov	r20,r7
    9468:	dc800917 	ldw	r18,36(sp)
    946c:	8822d57a 	srli	r17,r17,21
    9470:	00087440 	call	8744 <_Balloc>
    9474:	1027883a 	mov	r19,r2
    9478:	00800434 	movhi	r2,16
    947c:	10bfffc4 	addi	r2,r2,-1
    9480:	808c703a 	and	r6,r16,r2
    9484:	88000126 	beq	r17,zero,948c <__d2b+0x58>
    9488:	31800434 	orhi	r6,r6,16
    948c:	d9800015 	stw	r6,0(sp)
    9490:	a8001f26 	beq	r21,zero,9510 <__d2b+0xdc>
    9494:	d9000104 	addi	r4,sp,4
    9498:	dd400115 	stw	r21,4(sp)
    949c:	0008abc0 	call	8abc <__lo0bits>
    94a0:	d8c00017 	ldw	r3,0(sp)
    94a4:	1000291e 	bne	r2,zero,954c <__d2b+0x118>
    94a8:	d9000117 	ldw	r4,4(sp)
    94ac:	99000515 	stw	r4,20(r19)
    94b0:	1820c03a 	cmpne	r16,r3,zero
    94b4:	84000044 	addi	r16,r16,1
    94b8:	98c00615 	stw	r3,24(r19)
    94bc:	9c000415 	stw	r16,16(r19)
    94c0:	88001b1e 	bne	r17,zero,9530 <__d2b+0xfc>
    94c4:	800690ba 	slli	r3,r16,2
    94c8:	10bef384 	addi	r2,r2,-1074
    94cc:	a0800015 	stw	r2,0(r20)
    94d0:	98c5883a 	add	r2,r19,r3
    94d4:	11000417 	ldw	r4,16(r2)
    94d8:	8020917a 	slli	r16,r16,5
    94dc:	0008a540 	call	8a54 <__hi0bits>
    94e0:	8085c83a 	sub	r2,r16,r2
    94e4:	90800015 	stw	r2,0(r18)
    94e8:	9805883a 	mov	r2,r19
    94ec:	dfc00817 	ldw	ra,32(sp)
    94f0:	dd400717 	ldw	r21,28(sp)
    94f4:	dd000617 	ldw	r20,24(sp)
    94f8:	dcc00517 	ldw	r19,20(sp)
    94fc:	dc800417 	ldw	r18,16(sp)
    9500:	dc400317 	ldw	r17,12(sp)
    9504:	dc000217 	ldw	r16,8(sp)
    9508:	dec00904 	addi	sp,sp,36
    950c:	f800283a 	ret
    9510:	d809883a 	mov	r4,sp
    9514:	0008abc0 	call	8abc <__lo0bits>
    9518:	d8c00017 	ldw	r3,0(sp)
    951c:	04000044 	movi	r16,1
    9520:	9c000415 	stw	r16,16(r19)
    9524:	98c00515 	stw	r3,20(r19)
    9528:	10800804 	addi	r2,r2,32
    952c:	883fe526 	beq	r17,zero,94c4 <__alt_data_end+0xfffb3d94>
    9530:	8c7ef344 	addi	r17,r17,-1075
    9534:	88a3883a 	add	r17,r17,r2
    9538:	00c00d44 	movi	r3,53
    953c:	a4400015 	stw	r17,0(r20)
    9540:	1885c83a 	sub	r2,r3,r2
    9544:	90800015 	stw	r2,0(r18)
    9548:	003fe706 	br	94e8 <__alt_data_end+0xfffb3db8>
    954c:	01000804 	movi	r4,32
    9550:	2089c83a 	sub	r4,r4,r2
    9554:	1908983a 	sll	r4,r3,r4
    9558:	d9400117 	ldw	r5,4(sp)
    955c:	1886d83a 	srl	r3,r3,r2
    9560:	2148b03a 	or	r4,r4,r5
    9564:	99000515 	stw	r4,20(r19)
    9568:	d8c00015 	stw	r3,0(sp)
    956c:	003fd006 	br	94b0 <__alt_data_end+0xfffb3d80>

00009570 <__ratio>:
    9570:	defff904 	addi	sp,sp,-28
    9574:	dc400315 	stw	r17,12(sp)
    9578:	2823883a 	mov	r17,r5
    957c:	d9400104 	addi	r5,sp,4
    9580:	dfc00615 	stw	ra,24(sp)
    9584:	dcc00515 	stw	r19,20(sp)
    9588:	dc800415 	stw	r18,16(sp)
    958c:	2027883a 	mov	r19,r4
    9590:	dc000215 	stw	r16,8(sp)
    9594:	00093180 	call	9318 <__b2d>
    9598:	8809883a 	mov	r4,r17
    959c:	d80b883a 	mov	r5,sp
    95a0:	1025883a 	mov	r18,r2
    95a4:	1821883a 	mov	r16,r3
    95a8:	00093180 	call	9318 <__b2d>
    95ac:	8a400417 	ldw	r9,16(r17)
    95b0:	9a000417 	ldw	r8,16(r19)
    95b4:	100d883a 	mov	r6,r2
    95b8:	d8800017 	ldw	r2,0(sp)
    95bc:	4251c83a 	sub	r8,r8,r9
    95c0:	4012917a 	slli	r9,r8,5
    95c4:	da000117 	ldw	r8,4(sp)
    95c8:	4091c83a 	sub	r8,r8,r2
    95cc:	4251883a 	add	r8,r8,r9
    95d0:	02000d0e 	bge	zero,r8,9608 <__ratio+0x98>
    95d4:	4010953a 	slli	r8,r8,20
    95d8:	4421883a 	add	r16,r8,r16
    95dc:	9009883a 	mov	r4,r18
    95e0:	800b883a 	mov	r5,r16
    95e4:	180f883a 	mov	r7,r3
    95e8:	000d4740 	call	d474 <__divdf3>
    95ec:	dfc00617 	ldw	ra,24(sp)
    95f0:	dcc00517 	ldw	r19,20(sp)
    95f4:	dc800417 	ldw	r18,16(sp)
    95f8:	dc400317 	ldw	r17,12(sp)
    95fc:	dc000217 	ldw	r16,8(sp)
    9600:	dec00704 	addi	sp,sp,28
    9604:	f800283a 	ret
    9608:	4010953a 	slli	r8,r8,20
    960c:	1a07c83a 	sub	r3,r3,r8
    9610:	003ff206 	br	95dc <__alt_data_end+0xfffb3eac>

00009614 <_mprec_log10>:
    9614:	defffe04 	addi	sp,sp,-8
    9618:	dc000015 	stw	r16,0(sp)
    961c:	dfc00115 	stw	ra,4(sp)
    9620:	008005c4 	movi	r2,23
    9624:	2021883a 	mov	r16,r4
    9628:	11000d0e 	bge	r2,r4,9660 <_mprec_log10+0x4c>
    962c:	0005883a 	mov	r2,zero
    9630:	00cffc34 	movhi	r3,16368
    9634:	843fffc4 	addi	r16,r16,-1
    9638:	1009883a 	mov	r4,r2
    963c:	180b883a 	mov	r5,r3
    9640:	000d883a 	mov	r6,zero
    9644:	01d00934 	movhi	r7,16420
    9648:	000e0380 	call	e038 <__muldf3>
    964c:	803ff91e 	bne	r16,zero,9634 <__alt_data_end+0xfffb3f04>
    9650:	dfc00117 	ldw	ra,4(sp)
    9654:	dc000017 	ldw	r16,0(sp)
    9658:	dec00204 	addi	sp,sp,8
    965c:	f800283a 	ret
    9660:	202090fa 	slli	r16,r4,3
    9664:	00800074 	movhi	r2,1
    9668:	10892c04 	addi	r2,r2,9392
    966c:	1421883a 	add	r16,r2,r16
    9670:	80800017 	ldw	r2,0(r16)
    9674:	80c00117 	ldw	r3,4(r16)
    9678:	dfc00117 	ldw	ra,4(sp)
    967c:	dc000017 	ldw	r16,0(sp)
    9680:	dec00204 	addi	sp,sp,8
    9684:	f800283a 	ret

00009688 <__copybits>:
    9688:	297fffc4 	addi	r5,r5,-1
    968c:	280fd17a 	srai	r7,r5,5
    9690:	30c00417 	ldw	r3,16(r6)
    9694:	30800504 	addi	r2,r6,20
    9698:	39c00044 	addi	r7,r7,1
    969c:	18c7883a 	add	r3,r3,r3
    96a0:	39cf883a 	add	r7,r7,r7
    96a4:	18c7883a 	add	r3,r3,r3
    96a8:	39cf883a 	add	r7,r7,r7
    96ac:	10c7883a 	add	r3,r2,r3
    96b0:	21cf883a 	add	r7,r4,r7
    96b4:	10c00d2e 	bgeu	r2,r3,96ec <__copybits+0x64>
    96b8:	200b883a 	mov	r5,r4
    96bc:	12000017 	ldw	r8,0(r2)
    96c0:	29400104 	addi	r5,r5,4
    96c4:	10800104 	addi	r2,r2,4
    96c8:	2a3fff15 	stw	r8,-4(r5)
    96cc:	10fffb36 	bltu	r2,r3,96bc <__alt_data_end+0xfffb3f8c>
    96d0:	1985c83a 	sub	r2,r3,r6
    96d4:	10bffac4 	addi	r2,r2,-21
    96d8:	1004d0ba 	srli	r2,r2,2
    96dc:	10800044 	addi	r2,r2,1
    96e0:	1085883a 	add	r2,r2,r2
    96e4:	1085883a 	add	r2,r2,r2
    96e8:	2089883a 	add	r4,r4,r2
    96ec:	21c0032e 	bgeu	r4,r7,96fc <__copybits+0x74>
    96f0:	20000015 	stw	zero,0(r4)
    96f4:	21000104 	addi	r4,r4,4
    96f8:	21fffd36 	bltu	r4,r7,96f0 <__alt_data_end+0xfffb3fc0>
    96fc:	f800283a 	ret

00009700 <__any_on>:
    9700:	20c00417 	ldw	r3,16(r4)
    9704:	2805d17a 	srai	r2,r5,5
    9708:	21000504 	addi	r4,r4,20
    970c:	18800d0e 	bge	r3,r2,9744 <__any_on+0x44>
    9710:	18c7883a 	add	r3,r3,r3
    9714:	18c7883a 	add	r3,r3,r3
    9718:	20c7883a 	add	r3,r4,r3
    971c:	20c0192e 	bgeu	r4,r3,9784 <__any_on+0x84>
    9720:	18bfff17 	ldw	r2,-4(r3)
    9724:	18ffff04 	addi	r3,r3,-4
    9728:	1000041e 	bne	r2,zero,973c <__any_on+0x3c>
    972c:	20c0142e 	bgeu	r4,r3,9780 <__any_on+0x80>
    9730:	18ffff04 	addi	r3,r3,-4
    9734:	19400017 	ldw	r5,0(r3)
    9738:	283ffc26 	beq	r5,zero,972c <__alt_data_end+0xfffb3ffc>
    973c:	00800044 	movi	r2,1
    9740:	f800283a 	ret
    9744:	10c00a0e 	bge	r2,r3,9770 <__any_on+0x70>
    9748:	1085883a 	add	r2,r2,r2
    974c:	1085883a 	add	r2,r2,r2
    9750:	294007cc 	andi	r5,r5,31
    9754:	2087883a 	add	r3,r4,r2
    9758:	283ff026 	beq	r5,zero,971c <__alt_data_end+0xfffb3fec>
    975c:	19800017 	ldw	r6,0(r3)
    9760:	3144d83a 	srl	r2,r6,r5
    9764:	114a983a 	sll	r5,r2,r5
    9768:	29bff41e 	bne	r5,r6,973c <__alt_data_end+0xfffb400c>
    976c:	003feb06 	br	971c <__alt_data_end+0xfffb3fec>
    9770:	1085883a 	add	r2,r2,r2
    9774:	1085883a 	add	r2,r2,r2
    9778:	2087883a 	add	r3,r4,r2
    977c:	003fe706 	br	971c <__alt_data_end+0xfffb3fec>
    9780:	f800283a 	ret
    9784:	0005883a 	mov	r2,zero
    9788:	f800283a 	ret

0000978c <_realloc_r>:
    978c:	defff604 	addi	sp,sp,-40
    9790:	dcc00315 	stw	r19,12(sp)
    9794:	dc400115 	stw	r17,4(sp)
    9798:	dfc00915 	stw	ra,36(sp)
    979c:	df000815 	stw	fp,32(sp)
    97a0:	ddc00715 	stw	r23,28(sp)
    97a4:	dd800615 	stw	r22,24(sp)
    97a8:	dd400515 	stw	r21,20(sp)
    97ac:	dd000415 	stw	r20,16(sp)
    97b0:	dc800215 	stw	r18,8(sp)
    97b4:	dc000015 	stw	r16,0(sp)
    97b8:	2827883a 	mov	r19,r5
    97bc:	3023883a 	mov	r17,r6
    97c0:	2800bf26 	beq	r5,zero,9ac0 <_realloc_r+0x334>
    97c4:	2025883a 	mov	r18,r4
    97c8:	000f9b40 	call	f9b4 <__malloc_lock>
    97cc:	98ffff17 	ldw	r3,-4(r19)
    97d0:	01bfff04 	movi	r6,-4
    97d4:	890002c4 	addi	r4,r17,11
    97d8:	01c00584 	movi	r7,22
    97dc:	9d7ffe04 	addi	r21,r19,-8
    97e0:	19a0703a 	and	r16,r3,r6
    97e4:	39003f2e 	bgeu	r7,r4,98e4 <_realloc_r+0x158>
    97e8:	053ffe04 	movi	r20,-8
    97ec:	2528703a 	and	r20,r4,r20
    97f0:	a00f883a 	mov	r7,r20
    97f4:	a0008216 	blt	r20,zero,9a00 <_realloc_r+0x274>
    97f8:	a4408136 	bltu	r20,r17,9a00 <_realloc_r+0x274>
    97fc:	81c03c0e 	bge	r16,r7,98f0 <_realloc_r+0x164>
    9800:	07000074 	movhi	fp,1
    9804:	e709b304 	addi	fp,fp,9932
    9808:	e1000217 	ldw	r4,8(fp)
    980c:	ac05883a 	add	r2,r21,r16
    9810:	2080bf26 	beq	r4,r2,9b10 <_realloc_r+0x384>
    9814:	11000117 	ldw	r4,4(r2)
    9818:	023fff84 	movi	r8,-2
    981c:	2210703a 	and	r8,r4,r8
    9820:	1211883a 	add	r8,r2,r8
    9824:	41400117 	ldw	r5,4(r8)
    9828:	2940004c 	andi	r5,r5,1
    982c:	28004a1e 	bne	r5,zero,9958 <_realloc_r+0x1cc>
    9830:	017fff04 	movi	r5,-4
    9834:	2148703a 	and	r4,r4,r5
    9838:	2409883a 	add	r4,r4,r16
    983c:	21c0ad0e 	bge	r4,r7,9af4 <_realloc_r+0x368>
    9840:	18c0004c 	andi	r3,r3,1
    9844:	18007f1e 	bne	r3,zero,9a44 <_realloc_r+0x2b8>
    9848:	9dfffe17 	ldw	r23,-8(r19)
    984c:	adefc83a 	sub	r23,r21,r23
    9850:	bd800117 	ldw	r22,4(r23)
    9854:	b14a703a 	and	r5,r22,r5
    9858:	216d883a 	add	r22,r4,r5
    985c:	b1c04516 	blt	r22,r7,9974 <_realloc_r+0x1e8>
    9860:	10c00317 	ldw	r3,12(r2)
    9864:	10800217 	ldw	r2,8(r2)
    9868:	81bfff04 	addi	r6,r16,-4
    986c:	bc400204 	addi	r17,r23,8
    9870:	10c00315 	stw	r3,12(r2)
    9874:	18800215 	stw	r2,8(r3)
    9878:	b9400217 	ldw	r5,8(r23)
    987c:	b8c00317 	ldw	r3,12(r23)
    9880:	00800904 	movi	r2,36
    9884:	28c00315 	stw	r3,12(r5)
    9888:	19400215 	stw	r5,8(r3)
    988c:	1180ef36 	bltu	r2,r6,9c4c <_realloc_r+0x4c0>
    9890:	008004c4 	movi	r2,19
    9894:	1180da2e 	bgeu	r2,r6,9c00 <_realloc_r+0x474>
    9898:	98800017 	ldw	r2,0(r19)
    989c:	b8800215 	stw	r2,8(r23)
    98a0:	98800117 	ldw	r2,4(r19)
    98a4:	b8800315 	stw	r2,12(r23)
    98a8:	008006c4 	movi	r2,27
    98ac:	1180fc2e 	bgeu	r2,r6,9ca0 <_realloc_r+0x514>
    98b0:	98800217 	ldw	r2,8(r19)
    98b4:	b8800415 	stw	r2,16(r23)
    98b8:	98800317 	ldw	r2,12(r19)
    98bc:	b8800515 	stw	r2,20(r23)
    98c0:	00800904 	movi	r2,36
    98c4:	3080421e 	bne	r6,r2,99d0 <_realloc_r+0x244>
    98c8:	98800417 	ldw	r2,16(r19)
    98cc:	9cc00604 	addi	r19,r19,24
    98d0:	b8c00804 	addi	r3,r23,32
    98d4:	b8800615 	stw	r2,24(r23)
    98d8:	98bfff17 	ldw	r2,-4(r19)
    98dc:	b8800715 	stw	r2,28(r23)
    98e0:	00003d06 	br	99d8 <_realloc_r+0x24c>
    98e4:	01c00404 	movi	r7,16
    98e8:	3829883a 	mov	r20,r7
    98ec:	003fc206 	br	97f8 <__alt_data_end+0xfffb40c8>
    98f0:	9823883a 	mov	r17,r19
    98f4:	850fc83a 	sub	r7,r16,r20
    98f8:	008003c4 	movi	r2,15
    98fc:	18c0004c 	andi	r3,r3,1
    9900:	11c04336 	bltu	r2,r7,9a10 <_realloc_r+0x284>
    9904:	1c06b03a 	or	r3,r3,r16
    9908:	a8c00115 	stw	r3,4(r21)
    990c:	ac21883a 	add	r16,r21,r16
    9910:	80c00117 	ldw	r3,4(r16)
    9914:	18c00054 	ori	r3,r3,1
    9918:	80c00115 	stw	r3,4(r16)
    991c:	9009883a 	mov	r4,r18
    9920:	000f9d40 	call	f9d4 <__malloc_unlock>
    9924:	8805883a 	mov	r2,r17
    9928:	dfc00917 	ldw	ra,36(sp)
    992c:	df000817 	ldw	fp,32(sp)
    9930:	ddc00717 	ldw	r23,28(sp)
    9934:	dd800617 	ldw	r22,24(sp)
    9938:	dd400517 	ldw	r21,20(sp)
    993c:	dd000417 	ldw	r20,16(sp)
    9940:	dcc00317 	ldw	r19,12(sp)
    9944:	dc800217 	ldw	r18,8(sp)
    9948:	dc400117 	ldw	r17,4(sp)
    994c:	dc000017 	ldw	r16,0(sp)
    9950:	dec00a04 	addi	sp,sp,40
    9954:	f800283a 	ret
    9958:	18c0004c 	andi	r3,r3,1
    995c:	1800391e 	bne	r3,zero,9a44 <_realloc_r+0x2b8>
    9960:	9dfffe17 	ldw	r23,-8(r19)
    9964:	00bfff04 	movi	r2,-4
    9968:	adefc83a 	sub	r23,r21,r23
    996c:	b9400117 	ldw	r5,4(r23)
    9970:	288a703a 	and	r5,r5,r2
    9974:	2c2d883a 	add	r22,r5,r16
    9978:	b1c03216 	blt	r22,r7,9a44 <_realloc_r+0x2b8>
    997c:	b8800317 	ldw	r2,12(r23)
    9980:	b8c00217 	ldw	r3,8(r23)
    9984:	81bfff04 	addi	r6,r16,-4
    9988:	01000904 	movi	r4,36
    998c:	18800315 	stw	r2,12(r3)
    9990:	10c00215 	stw	r3,8(r2)
    9994:	bc400204 	addi	r17,r23,8
    9998:	2180ac36 	bltu	r4,r6,9c4c <_realloc_r+0x4c0>
    999c:	008004c4 	movi	r2,19
    99a0:	1180972e 	bgeu	r2,r6,9c00 <_realloc_r+0x474>
    99a4:	98800017 	ldw	r2,0(r19)
    99a8:	b8800215 	stw	r2,8(r23)
    99ac:	98800117 	ldw	r2,4(r19)
    99b0:	b8800315 	stw	r2,12(r23)
    99b4:	008006c4 	movi	r2,27
    99b8:	1180b92e 	bgeu	r2,r6,9ca0 <_realloc_r+0x514>
    99bc:	98800217 	ldw	r2,8(r19)
    99c0:	b8800415 	stw	r2,16(r23)
    99c4:	98800317 	ldw	r2,12(r19)
    99c8:	b8800515 	stw	r2,20(r23)
    99cc:	313fbe26 	beq	r6,r4,98c8 <__alt_data_end+0xfffb4198>
    99d0:	b8c00604 	addi	r3,r23,24
    99d4:	9cc00404 	addi	r19,r19,16
    99d8:	98800017 	ldw	r2,0(r19)
    99dc:	b021883a 	mov	r16,r22
    99e0:	b82b883a 	mov	r21,r23
    99e4:	18800015 	stw	r2,0(r3)
    99e8:	98800117 	ldw	r2,4(r19)
    99ec:	18800115 	stw	r2,4(r3)
    99f0:	98800217 	ldw	r2,8(r19)
    99f4:	18800215 	stw	r2,8(r3)
    99f8:	b8c00117 	ldw	r3,4(r23)
    99fc:	003fbd06 	br	98f4 <__alt_data_end+0xfffb41c4>
    9a00:	00800304 	movi	r2,12
    9a04:	90800015 	stw	r2,0(r18)
    9a08:	0005883a 	mov	r2,zero
    9a0c:	003fc606 	br	9928 <__alt_data_end+0xfffb41f8>
    9a10:	1d06b03a 	or	r3,r3,r20
    9a14:	ad0b883a 	add	r5,r21,r20
    9a18:	a8c00115 	stw	r3,4(r21)
    9a1c:	38800054 	ori	r2,r7,1
    9a20:	28800115 	stw	r2,4(r5)
    9a24:	29cf883a 	add	r7,r5,r7
    9a28:	38800117 	ldw	r2,4(r7)
    9a2c:	9009883a 	mov	r4,r18
    9a30:	29400204 	addi	r5,r5,8
    9a34:	10800054 	ori	r2,r2,1
    9a38:	38800115 	stw	r2,4(r7)
    9a3c:	00077080 	call	7708 <_free_r>
    9a40:	003fb606 	br	991c <__alt_data_end+0xfffb41ec>
    9a44:	880b883a 	mov	r5,r17
    9a48:	9009883a 	mov	r4,r18
    9a4c:	0002a700 	call	2a70 <_malloc_r>
    9a50:	1023883a 	mov	r17,r2
    9a54:	1000aa26 	beq	r2,zero,9d00 <_realloc_r+0x574>
    9a58:	98ffff17 	ldw	r3,-4(r19)
    9a5c:	113ffe04 	addi	r4,r2,-8
    9a60:	00bfff84 	movi	r2,-2
    9a64:	1884703a 	and	r2,r3,r2
    9a68:	a885883a 	add	r2,r21,r2
    9a6c:	20808626 	beq	r4,r2,9c88 <_realloc_r+0x4fc>
    9a70:	81bfff04 	addi	r6,r16,-4
    9a74:	00800904 	movi	r2,36
    9a78:	11807036 	bltu	r2,r6,9c3c <_realloc_r+0x4b0>
    9a7c:	00c004c4 	movi	r3,19
    9a80:	19805636 	bltu	r3,r6,9bdc <_realloc_r+0x450>
    9a84:	8805883a 	mov	r2,r17
    9a88:	9807883a 	mov	r3,r19
    9a8c:	19000017 	ldw	r4,0(r3)
    9a90:	11000015 	stw	r4,0(r2)
    9a94:	19000117 	ldw	r4,4(r3)
    9a98:	11000115 	stw	r4,4(r2)
    9a9c:	18c00217 	ldw	r3,8(r3)
    9aa0:	10c00215 	stw	r3,8(r2)
    9aa4:	980b883a 	mov	r5,r19
    9aa8:	9009883a 	mov	r4,r18
    9aac:	00077080 	call	7708 <_free_r>
    9ab0:	9009883a 	mov	r4,r18
    9ab4:	000f9d40 	call	f9d4 <__malloc_unlock>
    9ab8:	8805883a 	mov	r2,r17
    9abc:	003f9a06 	br	9928 <__alt_data_end+0xfffb41f8>
    9ac0:	300b883a 	mov	r5,r6
    9ac4:	dfc00917 	ldw	ra,36(sp)
    9ac8:	df000817 	ldw	fp,32(sp)
    9acc:	ddc00717 	ldw	r23,28(sp)
    9ad0:	dd800617 	ldw	r22,24(sp)
    9ad4:	dd400517 	ldw	r21,20(sp)
    9ad8:	dd000417 	ldw	r20,16(sp)
    9adc:	dcc00317 	ldw	r19,12(sp)
    9ae0:	dc800217 	ldw	r18,8(sp)
    9ae4:	dc400117 	ldw	r17,4(sp)
    9ae8:	dc000017 	ldw	r16,0(sp)
    9aec:	dec00a04 	addi	sp,sp,40
    9af0:	0002a701 	jmpi	2a70 <_malloc_r>
    9af4:	11400317 	ldw	r5,12(r2)
    9af8:	10800217 	ldw	r2,8(r2)
    9afc:	9823883a 	mov	r17,r19
    9b00:	2021883a 	mov	r16,r4
    9b04:	11400315 	stw	r5,12(r2)
    9b08:	28800215 	stw	r2,8(r5)
    9b0c:	003f7906 	br	98f4 <__alt_data_end+0xfffb41c4>
    9b10:	21000117 	ldw	r4,4(r4)
    9b14:	00bfff04 	movi	r2,-4
    9b18:	a1800404 	addi	r6,r20,16
    9b1c:	2088703a 	and	r4,r4,r2
    9b20:	2409883a 	add	r4,r4,r16
    9b24:	2180380e 	bge	r4,r6,9c08 <_realloc_r+0x47c>
    9b28:	18c0004c 	andi	r3,r3,1
    9b2c:	183fc51e 	bne	r3,zero,9a44 <__alt_data_end+0xfffb4314>
    9b30:	9dfffe17 	ldw	r23,-8(r19)
    9b34:	adefc83a 	sub	r23,r21,r23
    9b38:	b9400117 	ldw	r5,4(r23)
    9b3c:	288a703a 	and	r5,r5,r2
    9b40:	216d883a 	add	r22,r4,r5
    9b44:	b1bf8b16 	blt	r22,r6,9974 <__alt_data_end+0xfffb4244>
    9b48:	b8800317 	ldw	r2,12(r23)
    9b4c:	b8c00217 	ldw	r3,8(r23)
    9b50:	81bfff04 	addi	r6,r16,-4
    9b54:	01000904 	movi	r4,36
    9b58:	18800315 	stw	r2,12(r3)
    9b5c:	10c00215 	stw	r3,8(r2)
    9b60:	bc400204 	addi	r17,r23,8
    9b64:	21805a36 	bltu	r4,r6,9cd0 <_realloc_r+0x544>
    9b68:	008004c4 	movi	r2,19
    9b6c:	1180562e 	bgeu	r2,r6,9cc8 <_realloc_r+0x53c>
    9b70:	98800017 	ldw	r2,0(r19)
    9b74:	b8800215 	stw	r2,8(r23)
    9b78:	98800117 	ldw	r2,4(r19)
    9b7c:	b8800315 	stw	r2,12(r23)
    9b80:	008006c4 	movi	r2,27
    9b84:	11805636 	bltu	r2,r6,9ce0 <_realloc_r+0x554>
    9b88:	b8800404 	addi	r2,r23,16
    9b8c:	9cc00204 	addi	r19,r19,8
    9b90:	98c00017 	ldw	r3,0(r19)
    9b94:	10c00015 	stw	r3,0(r2)
    9b98:	98c00117 	ldw	r3,4(r19)
    9b9c:	10c00115 	stw	r3,4(r2)
    9ba0:	98c00217 	ldw	r3,8(r19)
    9ba4:	10c00215 	stw	r3,8(r2)
    9ba8:	bd07883a 	add	r3,r23,r20
    9bac:	b505c83a 	sub	r2,r22,r20
    9bb0:	e0c00215 	stw	r3,8(fp)
    9bb4:	10800054 	ori	r2,r2,1
    9bb8:	18800115 	stw	r2,4(r3)
    9bbc:	b8800117 	ldw	r2,4(r23)
    9bc0:	9009883a 	mov	r4,r18
    9bc4:	1080004c 	andi	r2,r2,1
    9bc8:	a0a8b03a 	or	r20,r20,r2
    9bcc:	bd000115 	stw	r20,4(r23)
    9bd0:	000f9d40 	call	f9d4 <__malloc_unlock>
    9bd4:	8805883a 	mov	r2,r17
    9bd8:	003f5306 	br	9928 <__alt_data_end+0xfffb41f8>
    9bdc:	98c00017 	ldw	r3,0(r19)
    9be0:	88c00015 	stw	r3,0(r17)
    9be4:	98c00117 	ldw	r3,4(r19)
    9be8:	88c00115 	stw	r3,4(r17)
    9bec:	00c006c4 	movi	r3,27
    9bf0:	19801d36 	bltu	r3,r6,9c68 <_realloc_r+0x4dc>
    9bf4:	88800204 	addi	r2,r17,8
    9bf8:	98c00204 	addi	r3,r19,8
    9bfc:	003fa306 	br	9a8c <__alt_data_end+0xfffb435c>
    9c00:	8807883a 	mov	r3,r17
    9c04:	003f7406 	br	99d8 <__alt_data_end+0xfffb42a8>
    9c08:	ad2b883a 	add	r21,r21,r20
    9c0c:	2505c83a 	sub	r2,r4,r20
    9c10:	e5400215 	stw	r21,8(fp)
    9c14:	10800054 	ori	r2,r2,1
    9c18:	a8800115 	stw	r2,4(r21)
    9c1c:	98bfff17 	ldw	r2,-4(r19)
    9c20:	9009883a 	mov	r4,r18
    9c24:	1080004c 	andi	r2,r2,1
    9c28:	a0a8b03a 	or	r20,r20,r2
    9c2c:	9d3fff15 	stw	r20,-4(r19)
    9c30:	000f9d40 	call	f9d4 <__malloc_unlock>
    9c34:	9805883a 	mov	r2,r19
    9c38:	003f3b06 	br	9928 <__alt_data_end+0xfffb41f8>
    9c3c:	8809883a 	mov	r4,r17
    9c40:	980b883a 	mov	r5,r19
    9c44:	00084c40 	call	84c4 <memmove>
    9c48:	003f9606 	br	9aa4 <__alt_data_end+0xfffb4374>
    9c4c:	8809883a 	mov	r4,r17
    9c50:	980b883a 	mov	r5,r19
    9c54:	00084c40 	call	84c4 <memmove>
    9c58:	b8c00117 	ldw	r3,4(r23)
    9c5c:	b021883a 	mov	r16,r22
    9c60:	b82b883a 	mov	r21,r23
    9c64:	003f2306 	br	98f4 <__alt_data_end+0xfffb41c4>
    9c68:	98c00217 	ldw	r3,8(r19)
    9c6c:	88c00215 	stw	r3,8(r17)
    9c70:	98c00317 	ldw	r3,12(r19)
    9c74:	88c00315 	stw	r3,12(r17)
    9c78:	30800c26 	beq	r6,r2,9cac <_realloc_r+0x520>
    9c7c:	88800404 	addi	r2,r17,16
    9c80:	98c00404 	addi	r3,r19,16
    9c84:	003f8106 	br	9a8c <__alt_data_end+0xfffb435c>
    9c88:	893fff17 	ldw	r4,-4(r17)
    9c8c:	00bfff04 	movi	r2,-4
    9c90:	9823883a 	mov	r17,r19
    9c94:	2084703a 	and	r2,r4,r2
    9c98:	80a1883a 	add	r16,r16,r2
    9c9c:	003f1506 	br	98f4 <__alt_data_end+0xfffb41c4>
    9ca0:	b8c00404 	addi	r3,r23,16
    9ca4:	9cc00204 	addi	r19,r19,8
    9ca8:	003f4b06 	br	99d8 <__alt_data_end+0xfffb42a8>
    9cac:	99000417 	ldw	r4,16(r19)
    9cb0:	88800604 	addi	r2,r17,24
    9cb4:	98c00604 	addi	r3,r19,24
    9cb8:	89000415 	stw	r4,16(r17)
    9cbc:	99000517 	ldw	r4,20(r19)
    9cc0:	89000515 	stw	r4,20(r17)
    9cc4:	003f7106 	br	9a8c <__alt_data_end+0xfffb435c>
    9cc8:	8805883a 	mov	r2,r17
    9ccc:	003fb006 	br	9b90 <__alt_data_end+0xfffb4460>
    9cd0:	8809883a 	mov	r4,r17
    9cd4:	980b883a 	mov	r5,r19
    9cd8:	00084c40 	call	84c4 <memmove>
    9cdc:	003fb206 	br	9ba8 <__alt_data_end+0xfffb4478>
    9ce0:	98800217 	ldw	r2,8(r19)
    9ce4:	b8800415 	stw	r2,16(r23)
    9ce8:	98800317 	ldw	r2,12(r19)
    9cec:	b8800515 	stw	r2,20(r23)
    9cf0:	31000726 	beq	r6,r4,9d10 <_realloc_r+0x584>
    9cf4:	b8800604 	addi	r2,r23,24
    9cf8:	9cc00404 	addi	r19,r19,16
    9cfc:	003fa406 	br	9b90 <__alt_data_end+0xfffb4460>
    9d00:	9009883a 	mov	r4,r18
    9d04:	000f9d40 	call	f9d4 <__malloc_unlock>
    9d08:	0005883a 	mov	r2,zero
    9d0c:	003f0606 	br	9928 <__alt_data_end+0xfffb41f8>
    9d10:	98c00417 	ldw	r3,16(r19)
    9d14:	9cc00604 	addi	r19,r19,24
    9d18:	b8800804 	addi	r2,r23,32
    9d1c:	b8c00615 	stw	r3,24(r23)
    9d20:	98ffff17 	ldw	r3,-4(r19)
    9d24:	b8c00715 	stw	r3,28(r23)
    9d28:	003f9906 	br	9b90 <__alt_data_end+0xfffb4460>

00009d2c <__fpclassifyd>:
    9d2c:	00a00034 	movhi	r2,32768
    9d30:	10bfffc4 	addi	r2,r2,-1
    9d34:	2884703a 	and	r2,r5,r2
    9d38:	10000726 	beq	r2,zero,9d58 <__fpclassifyd+0x2c>
    9d3c:	00fffc34 	movhi	r3,65520
    9d40:	019ff834 	movhi	r6,32736
    9d44:	28c7883a 	add	r3,r5,r3
    9d48:	31bfffc4 	addi	r6,r6,-1
    9d4c:	30c00536 	bltu	r6,r3,9d64 <__fpclassifyd+0x38>
    9d50:	00800104 	movi	r2,4
    9d54:	f800283a 	ret
    9d58:	2000021e 	bne	r4,zero,9d64 <__fpclassifyd+0x38>
    9d5c:	00800084 	movi	r2,2
    9d60:	f800283a 	ret
    9d64:	00dffc34 	movhi	r3,32752
    9d68:	019ff834 	movhi	r6,32736
    9d6c:	28cb883a 	add	r5,r5,r3
    9d70:	31bfffc4 	addi	r6,r6,-1
    9d74:	317ff62e 	bgeu	r6,r5,9d50 <__alt_data_end+0xfffb4620>
    9d78:	01400434 	movhi	r5,16
    9d7c:	297fffc4 	addi	r5,r5,-1
    9d80:	28800236 	bltu	r5,r2,9d8c <__fpclassifyd+0x60>
    9d84:	008000c4 	movi	r2,3
    9d88:	f800283a 	ret
    9d8c:	10c00226 	beq	r2,r3,9d98 <__fpclassifyd+0x6c>
    9d90:	0005883a 	mov	r2,zero
    9d94:	f800283a 	ret
    9d98:	2005003a 	cmpeq	r2,r4,zero
    9d9c:	f800283a 	ret

00009da0 <__sread>:
    9da0:	defffe04 	addi	sp,sp,-8
    9da4:	dc000015 	stw	r16,0(sp)
    9da8:	2821883a 	mov	r16,r5
    9dac:	2940038f 	ldh	r5,14(r5)
    9db0:	dfc00115 	stw	ra,4(sp)
    9db4:	000ba5c0 	call	ba5c <_read_r>
    9db8:	10000716 	blt	r2,zero,9dd8 <__sread+0x38>
    9dbc:	80c01417 	ldw	r3,80(r16)
    9dc0:	1887883a 	add	r3,r3,r2
    9dc4:	80c01415 	stw	r3,80(r16)
    9dc8:	dfc00117 	ldw	ra,4(sp)
    9dcc:	dc000017 	ldw	r16,0(sp)
    9dd0:	dec00204 	addi	sp,sp,8
    9dd4:	f800283a 	ret
    9dd8:	80c0030b 	ldhu	r3,12(r16)
    9ddc:	18fbffcc 	andi	r3,r3,61439
    9de0:	80c0030d 	sth	r3,12(r16)
    9de4:	dfc00117 	ldw	ra,4(sp)
    9de8:	dc000017 	ldw	r16,0(sp)
    9dec:	dec00204 	addi	sp,sp,8
    9df0:	f800283a 	ret

00009df4 <__seofread>:
    9df4:	0005883a 	mov	r2,zero
    9df8:	f800283a 	ret

00009dfc <__swrite>:
    9dfc:	2880030b 	ldhu	r2,12(r5)
    9e00:	defffb04 	addi	sp,sp,-20
    9e04:	dcc00315 	stw	r19,12(sp)
    9e08:	dc800215 	stw	r18,8(sp)
    9e0c:	dc400115 	stw	r17,4(sp)
    9e10:	dc000015 	stw	r16,0(sp)
    9e14:	dfc00415 	stw	ra,16(sp)
    9e18:	10c0400c 	andi	r3,r2,256
    9e1c:	2821883a 	mov	r16,r5
    9e20:	2027883a 	mov	r19,r4
    9e24:	3025883a 	mov	r18,r6
    9e28:	3823883a 	mov	r17,r7
    9e2c:	18000526 	beq	r3,zero,9e44 <__swrite+0x48>
    9e30:	2940038f 	ldh	r5,14(r5)
    9e34:	000d883a 	mov	r6,zero
    9e38:	01c00084 	movi	r7,2
    9e3c:	000ba000 	call	ba00 <_lseek_r>
    9e40:	8080030b 	ldhu	r2,12(r16)
    9e44:	8140038f 	ldh	r5,14(r16)
    9e48:	10bbffcc 	andi	r2,r2,61439
    9e4c:	9809883a 	mov	r4,r19
    9e50:	900d883a 	mov	r6,r18
    9e54:	880f883a 	mov	r7,r17
    9e58:	8080030d 	sth	r2,12(r16)
    9e5c:	dfc00417 	ldw	ra,16(sp)
    9e60:	dcc00317 	ldw	r19,12(sp)
    9e64:	dc800217 	ldw	r18,8(sp)
    9e68:	dc400117 	ldw	r17,4(sp)
    9e6c:	dc000017 	ldw	r16,0(sp)
    9e70:	dec00504 	addi	sp,sp,20
    9e74:	000b4dc1 	jmpi	b4dc <_write_r>

00009e78 <__sseek>:
    9e78:	defffe04 	addi	sp,sp,-8
    9e7c:	dc000015 	stw	r16,0(sp)
    9e80:	2821883a 	mov	r16,r5
    9e84:	2940038f 	ldh	r5,14(r5)
    9e88:	dfc00115 	stw	ra,4(sp)
    9e8c:	000ba000 	call	ba00 <_lseek_r>
    9e90:	00ffffc4 	movi	r3,-1
    9e94:	10c00826 	beq	r2,r3,9eb8 <__sseek+0x40>
    9e98:	80c0030b 	ldhu	r3,12(r16)
    9e9c:	80801415 	stw	r2,80(r16)
    9ea0:	18c40014 	ori	r3,r3,4096
    9ea4:	80c0030d 	sth	r3,12(r16)
    9ea8:	dfc00117 	ldw	ra,4(sp)
    9eac:	dc000017 	ldw	r16,0(sp)
    9eb0:	dec00204 	addi	sp,sp,8
    9eb4:	f800283a 	ret
    9eb8:	80c0030b 	ldhu	r3,12(r16)
    9ebc:	18fbffcc 	andi	r3,r3,61439
    9ec0:	80c0030d 	sth	r3,12(r16)
    9ec4:	dfc00117 	ldw	ra,4(sp)
    9ec8:	dc000017 	ldw	r16,0(sp)
    9ecc:	dec00204 	addi	sp,sp,8
    9ed0:	f800283a 	ret

00009ed4 <__sclose>:
    9ed4:	2940038f 	ldh	r5,14(r5)
    9ed8:	000b5381 	jmpi	b538 <_close_r>

00009edc <strcmp>:
    9edc:	2144b03a 	or	r2,r4,r5
    9ee0:	108000cc 	andi	r2,r2,3
    9ee4:	1000171e 	bne	r2,zero,9f44 <strcmp+0x68>
    9ee8:	20800017 	ldw	r2,0(r4)
    9eec:	28c00017 	ldw	r3,0(r5)
    9ef0:	10c0141e 	bne	r2,r3,9f44 <strcmp+0x68>
    9ef4:	027fbff4 	movhi	r9,65279
    9ef8:	4a7fbfc4 	addi	r9,r9,-257
    9efc:	0086303a 	nor	r3,zero,r2
    9f00:	02202074 	movhi	r8,32897
    9f04:	1245883a 	add	r2,r2,r9
    9f08:	42202004 	addi	r8,r8,-32640
    9f0c:	10c4703a 	and	r2,r2,r3
    9f10:	1204703a 	and	r2,r2,r8
    9f14:	10000226 	beq	r2,zero,9f20 <strcmp+0x44>
    9f18:	00001706 	br	9f78 <strcmp+0x9c>
    9f1c:	1000161e 	bne	r2,zero,9f78 <strcmp+0x9c>
    9f20:	21000104 	addi	r4,r4,4
    9f24:	20c00017 	ldw	r3,0(r4)
    9f28:	29400104 	addi	r5,r5,4
    9f2c:	29800017 	ldw	r6,0(r5)
    9f30:	1a4f883a 	add	r7,r3,r9
    9f34:	00c4303a 	nor	r2,zero,r3
    9f38:	3884703a 	and	r2,r7,r2
    9f3c:	1204703a 	and	r2,r2,r8
    9f40:	19bff626 	beq	r3,r6,9f1c <__alt_data_end+0xfffb47ec>
    9f44:	20800007 	ldb	r2,0(r4)
    9f48:	1000051e 	bne	r2,zero,9f60 <strcmp+0x84>
    9f4c:	00000606 	br	9f68 <strcmp+0x8c>
    9f50:	21000044 	addi	r4,r4,1
    9f54:	20800007 	ldb	r2,0(r4)
    9f58:	29400044 	addi	r5,r5,1
    9f5c:	10000226 	beq	r2,zero,9f68 <strcmp+0x8c>
    9f60:	28c00007 	ldb	r3,0(r5)
    9f64:	10fffa26 	beq	r2,r3,9f50 <__alt_data_end+0xfffb4820>
    9f68:	20800003 	ldbu	r2,0(r4)
    9f6c:	28c00003 	ldbu	r3,0(r5)
    9f70:	10c5c83a 	sub	r2,r2,r3
    9f74:	f800283a 	ret
    9f78:	0005883a 	mov	r2,zero
    9f7c:	f800283a 	ret

00009f80 <__sprint_r.part.0>:
    9f80:	28801917 	ldw	r2,100(r5)
    9f84:	defff604 	addi	sp,sp,-40
    9f88:	dd400515 	stw	r21,20(sp)
    9f8c:	dcc00315 	stw	r19,12(sp)
    9f90:	dfc00915 	stw	ra,36(sp)
    9f94:	df000815 	stw	fp,32(sp)
    9f98:	ddc00715 	stw	r23,28(sp)
    9f9c:	dd800615 	stw	r22,24(sp)
    9fa0:	dd000415 	stw	r20,16(sp)
    9fa4:	dc800215 	stw	r18,8(sp)
    9fa8:	dc400115 	stw	r17,4(sp)
    9fac:	dc000015 	stw	r16,0(sp)
    9fb0:	1088000c 	andi	r2,r2,8192
    9fb4:	2827883a 	mov	r19,r5
    9fb8:	302b883a 	mov	r21,r6
    9fbc:	10002d26 	beq	r2,zero,a074 <__sprint_r.part.0+0xf4>
    9fc0:	30800217 	ldw	r2,8(r6)
    9fc4:	35800017 	ldw	r22,0(r6)
    9fc8:	10002826 	beq	r2,zero,a06c <__sprint_r.part.0+0xec>
    9fcc:	2029883a 	mov	r20,r4
    9fd0:	b5c00104 	addi	r23,r22,4
    9fd4:	04bfffc4 	movi	r18,-1
    9fd8:	bc400017 	ldw	r17,0(r23)
    9fdc:	b4000017 	ldw	r16,0(r22)
    9fe0:	0039883a 	mov	fp,zero
    9fe4:	8822d0ba 	srli	r17,r17,2
    9fe8:	04400316 	blt	zero,r17,9ff8 <__sprint_r.part.0+0x78>
    9fec:	00001706 	br	a04c <__sprint_r.part.0+0xcc>
    9ff0:	84000104 	addi	r16,r16,4
    9ff4:	8f001526 	beq	r17,fp,a04c <__sprint_r.part.0+0xcc>
    9ff8:	81400017 	ldw	r5,0(r16)
    9ffc:	a009883a 	mov	r4,r20
    a000:	980d883a 	mov	r6,r19
    a004:	000b7780 	call	b778 <_fputwc_r>
    a008:	e7000044 	addi	fp,fp,1
    a00c:	14bff81e 	bne	r2,r18,9ff0 <__alt_data_end+0xfffb48c0>
    a010:	9005883a 	mov	r2,r18
    a014:	a8000215 	stw	zero,8(r21)
    a018:	a8000115 	stw	zero,4(r21)
    a01c:	dfc00917 	ldw	ra,36(sp)
    a020:	df000817 	ldw	fp,32(sp)
    a024:	ddc00717 	ldw	r23,28(sp)
    a028:	dd800617 	ldw	r22,24(sp)
    a02c:	dd400517 	ldw	r21,20(sp)
    a030:	dd000417 	ldw	r20,16(sp)
    a034:	dcc00317 	ldw	r19,12(sp)
    a038:	dc800217 	ldw	r18,8(sp)
    a03c:	dc400117 	ldw	r17,4(sp)
    a040:	dc000017 	ldw	r16,0(sp)
    a044:	dec00a04 	addi	sp,sp,40
    a048:	f800283a 	ret
    a04c:	a8c00217 	ldw	r3,8(r21)
    a050:	8c63883a 	add	r17,r17,r17
    a054:	8c63883a 	add	r17,r17,r17
    a058:	1c45c83a 	sub	r2,r3,r17
    a05c:	a8800215 	stw	r2,8(r21)
    a060:	b5800204 	addi	r22,r22,8
    a064:	bdc00204 	addi	r23,r23,8
    a068:	103fdb1e 	bne	r2,zero,9fd8 <__alt_data_end+0xfffb48a8>
    a06c:	0005883a 	mov	r2,zero
    a070:	003fe806 	br	a014 <__alt_data_end+0xfffb48e4>
    a074:	00079f80 	call	79f8 <__sfvwrite_r>
    a078:	003fe606 	br	a014 <__alt_data_end+0xfffb48e4>

0000a07c <__sprint_r>:
    a07c:	30c00217 	ldw	r3,8(r6)
    a080:	18000126 	beq	r3,zero,a088 <__sprint_r+0xc>
    a084:	0009f801 	jmpi	9f80 <__sprint_r.part.0>
    a088:	30000115 	stw	zero,4(r6)
    a08c:	0005883a 	mov	r2,zero
    a090:	f800283a 	ret

0000a094 <___vfiprintf_internal_r>:
    a094:	defeca04 	addi	sp,sp,-1240
    a098:	dcc12f15 	stw	r19,1212(sp)
    a09c:	dfc13515 	stw	ra,1236(sp)
    a0a0:	df013415 	stw	fp,1232(sp)
    a0a4:	ddc13315 	stw	r23,1228(sp)
    a0a8:	dd813215 	stw	r22,1224(sp)
    a0ac:	dd413115 	stw	r21,1220(sp)
    a0b0:	dd013015 	stw	r20,1216(sp)
    a0b4:	dc812e15 	stw	r18,1208(sp)
    a0b8:	dc412d15 	stw	r17,1204(sp)
    a0bc:	dc012c15 	stw	r16,1200(sp)
    a0c0:	d9012115 	stw	r4,1156(sp)
    a0c4:	d9412015 	stw	r5,1152(sp)
    a0c8:	d9c12315 	stw	r7,1164(sp)
    a0cc:	3027883a 	mov	r19,r6
    a0d0:	20000226 	beq	r4,zero,a0dc <___vfiprintf_internal_r+0x48>
    a0d4:	20800e17 	ldw	r2,56(r4)
    a0d8:	1000f726 	beq	r2,zero,a4b8 <___vfiprintf_internal_r+0x424>
    a0dc:	d8812017 	ldw	r2,1152(sp)
    a0e0:	10c0030b 	ldhu	r3,12(r2)
    a0e4:	1908000c 	andi	r4,r3,8192
    a0e8:	1805883a 	mov	r2,r3
    a0ec:	2000081e 	bne	r4,zero,a110 <___vfiprintf_internal_r+0x7c>
    a0f0:	d9412017 	ldw	r5,1152(sp)
    a0f4:	18880014 	ori	r2,r3,8192
    a0f8:	00f7ffc4 	movi	r3,-8193
    a0fc:	29001917 	ldw	r4,100(r5)
    a100:	2880030d 	sth	r2,12(r5)
    a104:	20c8703a 	and	r4,r4,r3
    a108:	29001915 	stw	r4,100(r5)
    a10c:	1007883a 	mov	r3,r2
    a110:	1100020c 	andi	r4,r2,8
    a114:	2000a726 	beq	r4,zero,a3b4 <___vfiprintf_internal_r+0x320>
    a118:	d9412017 	ldw	r5,1152(sp)
    a11c:	29000417 	ldw	r4,16(r5)
    a120:	2000a426 	beq	r4,zero,a3b4 <___vfiprintf_internal_r+0x320>
    a124:	1080068c 	andi	r2,r2,26
    a128:	01000284 	movi	r4,10
    a12c:	1100ab26 	beq	r2,r4,a3dc <___vfiprintf_internal_r+0x348>
    a130:	d9010a04 	addi	r4,sp,1064
    a134:	d94109c4 	addi	r5,sp,1063
    a138:	07000074 	movhi	fp,1
    a13c:	04400074 	movhi	r17,1
    a140:	2145c83a 	sub	r2,r4,r5
    a144:	e7096204 	addi	fp,fp,9608
    a148:	8c495e04 	addi	r17,r17,9592
    a14c:	d9011e15 	stw	r4,1144(sp)
    a150:	d9411f15 	stw	r5,1148(sp)
    a154:	dec11a15 	stw	sp,1128(sp)
    a158:	d8011c15 	stw	zero,1136(sp)
    a15c:	d8011b15 	stw	zero,1132(sp)
    a160:	d8012715 	stw	zero,1180(sp)
    a164:	d8012515 	stw	zero,1172(sp)
    a168:	d811883a 	mov	r8,sp
    a16c:	d8812815 	stw	r2,1184(sp)
    a170:	982f883a 	mov	r23,r19
    a174:	b8800007 	ldb	r2,0(r23)
    a178:	1003b026 	beq	r2,zero,b03c <___vfiprintf_internal_r+0xfa8>
    a17c:	01000944 	movi	r4,37
    a180:	1103ae26 	beq	r2,r4,b03c <___vfiprintf_internal_r+0xfa8>
    a184:	b805883a 	mov	r2,r23
    a188:	00000106 	br	a190 <___vfiprintf_internal_r+0xfc>
    a18c:	19000326 	beq	r3,r4,a19c <___vfiprintf_internal_r+0x108>
    a190:	10800044 	addi	r2,r2,1
    a194:	10c00007 	ldb	r3,0(r2)
    a198:	183ffc1e 	bne	r3,zero,a18c <__alt_data_end+0xfffb4a5c>
    a19c:	15e1c83a 	sub	r16,r2,r23
    a1a0:	1029883a 	mov	r20,r2
    a1a4:	80001026 	beq	r16,zero,a1e8 <___vfiprintf_internal_r+0x154>
    a1a8:	d8c11c17 	ldw	r3,1136(sp)
    a1ac:	d8811b17 	ldw	r2,1132(sp)
    a1b0:	45c00015 	stw	r23,0(r8)
    a1b4:	80c7883a 	add	r3,r16,r3
    a1b8:	10800044 	addi	r2,r2,1
    a1bc:	44000115 	stw	r16,4(r8)
    a1c0:	d8c11c15 	stw	r3,1136(sp)
    a1c4:	d8811b15 	stw	r2,1132(sp)
    a1c8:	010001c4 	movi	r4,7
    a1cc:	2080740e 	bge	r4,r2,a3a0 <___vfiprintf_internal_r+0x30c>
    a1d0:	1803a71e 	bne	r3,zero,b070 <___vfiprintf_internal_r+0xfdc>
    a1d4:	d8c12517 	ldw	r3,1172(sp)
    a1d8:	d8011b15 	stw	zero,1132(sp)
    a1dc:	d811883a 	mov	r8,sp
    a1e0:	1c07883a 	add	r3,r3,r16
    a1e4:	d8c12515 	stw	r3,1172(sp)
    a1e8:	a0800007 	ldb	r2,0(r20)
    a1ec:	1002bf26 	beq	r2,zero,acec <___vfiprintf_internal_r+0xc58>
    a1f0:	a5c00044 	addi	r23,r20,1
    a1f4:	a1800047 	ldb	r6,1(r20)
    a1f8:	d8011d85 	stb	zero,1142(sp)
    a1fc:	d8012205 	stb	zero,1160(sp)
    a200:	043fffc4 	movi	r16,-1
    a204:	d8012415 	stw	zero,1168(sp)
    a208:	0025883a 	mov	r18,zero
    a20c:	05001604 	movi	r20,88
    a210:	05400244 	movi	r21,9
    a214:	4027883a 	mov	r19,r8
    a218:	bdc00044 	addi	r23,r23,1
    a21c:	30bff804 	addi	r2,r6,-32
    a220:	a0825636 	bltu	r20,r2,ab7c <___vfiprintf_internal_r+0xae8>
    a224:	100490ba 	slli	r2,r2,2
    a228:	01000074 	movhi	r4,1
    a22c:	21288f04 	addi	r4,r4,-24004
    a230:	1105883a 	add	r2,r2,r4
    a234:	10800017 	ldw	r2,0(r2)
    a238:	1000683a 	jmp	r2
    a23c:	0000ab0c 	andi	zero,zero,684
    a240:	0000ab7c 	xorhi	zero,zero,685
    a244:	0000ab7c 	xorhi	zero,zero,685
    a248:	0000ab70 	cmpltui	zero,zero,685
    a24c:	0000ab7c 	xorhi	zero,zero,685
    a250:	0000ab7c 	xorhi	zero,zero,685
    a254:	0000ab7c 	xorhi	zero,zero,685
    a258:	0000ab7c 	xorhi	zero,zero,685
    a25c:	0000ab7c 	xorhi	zero,zero,685
    a260:	0000ab7c 	xorhi	zero,zero,685
    a264:	0000a8fc 	xorhi	zero,zero,675
    a268:	0000ab24 	muli	zero,zero,684
    a26c:	0000ab7c 	xorhi	zero,zero,685
    a270:	0000a4d0 	cmplti	zero,zero,659
    a274:	0000a920 	cmpeqi	zero,zero,676
    a278:	0000ab7c 	xorhi	zero,zero,685
    a27c:	0000a4dc 	xori	zero,zero,659
    a280:	0000a4e8 	cmpgeui	zero,zero,659
    a284:	0000a4e8 	cmpgeui	zero,zero,659
    a288:	0000a4e8 	cmpgeui	zero,zero,659
    a28c:	0000a4e8 	cmpgeui	zero,zero,659
    a290:	0000a4e8 	cmpgeui	zero,zero,659
    a294:	0000a4e8 	cmpgeui	zero,zero,659
    a298:	0000a4e8 	cmpgeui	zero,zero,659
    a29c:	0000a4e8 	cmpgeui	zero,zero,659
    a2a0:	0000a4e8 	cmpgeui	zero,zero,659
    a2a4:	0000ab7c 	xorhi	zero,zero,685
    a2a8:	0000ab7c 	xorhi	zero,zero,685
    a2ac:	0000ab7c 	xorhi	zero,zero,685
    a2b0:	0000ab7c 	xorhi	zero,zero,685
    a2b4:	0000ab7c 	xorhi	zero,zero,685
    a2b8:	0000ab7c 	xorhi	zero,zero,685
    a2bc:	0000ab7c 	xorhi	zero,zero,685
    a2c0:	0000ab7c 	xorhi	zero,zero,685
    a2c4:	0000ab7c 	xorhi	zero,zero,685
    a2c8:	0000ab7c 	xorhi	zero,zero,685
    a2cc:	0000a528 	cmpgeui	zero,zero,660
    a2d0:	0000ab7c 	xorhi	zero,zero,685
    a2d4:	0000ab7c 	xorhi	zero,zero,685
    a2d8:	0000ab7c 	xorhi	zero,zero,685
    a2dc:	0000ab7c 	xorhi	zero,zero,685
    a2e0:	0000ab7c 	xorhi	zero,zero,685
    a2e4:	0000ab7c 	xorhi	zero,zero,685
    a2e8:	0000ab7c 	xorhi	zero,zero,685
    a2ec:	0000ab7c 	xorhi	zero,zero,685
    a2f0:	0000ab7c 	xorhi	zero,zero,685
    a2f4:	0000ab7c 	xorhi	zero,zero,685
    a2f8:	0000a818 	cmpnei	zero,zero,672
    a2fc:	0000ab7c 	xorhi	zero,zero,685
    a300:	0000ab7c 	xorhi	zero,zero,685
    a304:	0000ab7c 	xorhi	zero,zero,685
    a308:	0000ab7c 	xorhi	zero,zero,685
    a30c:	0000ab7c 	xorhi	zero,zero,685
    a310:	0000a858 	cmpnei	zero,zero,673
    a314:	0000ab7c 	xorhi	zero,zero,685
    a318:	0000ab7c 	xorhi	zero,zero,685
    a31c:	0000a89c 	xori	zero,zero,674
    a320:	0000ab7c 	xorhi	zero,zero,685
    a324:	0000ab7c 	xorhi	zero,zero,685
    a328:	0000ab7c 	xorhi	zero,zero,685
    a32c:	0000ab7c 	xorhi	zero,zero,685
    a330:	0000ab7c 	xorhi	zero,zero,685
    a334:	0000ab7c 	xorhi	zero,zero,685
    a338:	0000ab7c 	xorhi	zero,zero,685
    a33c:	0000ab7c 	xorhi	zero,zero,685
    a340:	0000ab7c 	xorhi	zero,zero,685
    a344:	0000ab7c 	xorhi	zero,zero,685
    a348:	0000a7e4 	muli	zero,zero,671
    a34c:	0000ab34 	movhi	zero,684
    a350:	0000ab7c 	xorhi	zero,zero,685
    a354:	0000ab7c 	xorhi	zero,zero,685
    a358:	0000ab7c 	xorhi	zero,zero,685
    a35c:	0000a970 	cmpltui	zero,zero,677
    a360:	0000ab34 	movhi	zero,684
    a364:	0000ab7c 	xorhi	zero,zero,685
    a368:	0000ab7c 	xorhi	zero,zero,685
    a36c:	0000a888 	cmpgei	zero,zero,674
    a370:	0000ab7c 	xorhi	zero,zero,685
    a374:	0000aad4 	movui	zero,683
    a378:	0000aa5c 	xori	zero,zero,681
    a37c:	0000aa90 	cmplti	zero,zero,682
    a380:	0000a97c 	xorhi	zero,zero,677
    a384:	0000ab7c 	xorhi	zero,zero,685
    a388:	0000a988 	cmpgei	zero,zero,678
    a38c:	0000ab7c 	xorhi	zero,zero,685
    a390:	0000a9e4 	muli	zero,zero,679
    a394:	0000ab7c 	xorhi	zero,zero,685
    a398:	0000ab7c 	xorhi	zero,zero,685
    a39c:	0000aa18 	cmpnei	zero,zero,680
    a3a0:	42000204 	addi	r8,r8,8
    a3a4:	d8c12517 	ldw	r3,1172(sp)
    a3a8:	1c07883a 	add	r3,r3,r16
    a3ac:	d8c12515 	stw	r3,1172(sp)
    a3b0:	003f8d06 	br	a1e8 <__alt_data_end+0xfffb4ab8>
    a3b4:	d9012117 	ldw	r4,1156(sp)
    a3b8:	d9412017 	ldw	r5,1152(sp)
    a3bc:	00055580 	call	5558 <__swsetup_r>
    a3c0:	1000301e 	bne	r2,zero,a484 <___vfiprintf_internal_r+0x3f0>
    a3c4:	d8812017 	ldw	r2,1152(sp)
    a3c8:	01000284 	movi	r4,10
    a3cc:	10c0030b 	ldhu	r3,12(r2)
    a3d0:	1805883a 	mov	r2,r3
    a3d4:	1080068c 	andi	r2,r2,26
    a3d8:	113f551e 	bne	r2,r4,a130 <__alt_data_end+0xfffb4a00>
    a3dc:	d9012017 	ldw	r4,1152(sp)
    a3e0:	2080038b 	ldhu	r2,14(r4)
    a3e4:	113fffcc 	andi	r4,r2,65535
    a3e8:	2120001c 	xori	r4,r4,32768
    a3ec:	21200004 	addi	r4,r4,-32768
    a3f0:	203f4f16 	blt	r4,zero,a130 <__alt_data_end+0xfffb4a00>
    a3f4:	d9412017 	ldw	r5,1152(sp)
    a3f8:	d9012117 	ldw	r4,1156(sp)
    a3fc:	d9c12317 	ldw	r7,1164(sp)
    a400:	2b001917 	ldw	r12,100(r5)
    a404:	2ac00717 	ldw	r11,28(r5)
    a408:	2a800917 	ldw	r10,36(r5)
    a40c:	02010004 	movi	r8,1024
    a410:	18ffff4c 	andi	r3,r3,65533
    a414:	da0b883a 	add	r5,sp,r8
    a418:	980d883a 	mov	r6,r19
    a41c:	d8c1030d 	sth	r3,1036(sp)
    a420:	db011915 	stw	r12,1124(sp)
    a424:	d881038d 	sth	r2,1038(sp)
    a428:	dac10715 	stw	r11,1052(sp)
    a42c:	da810915 	stw	r10,1060(sp)
    a430:	dec10015 	stw	sp,1024(sp)
    a434:	dec10415 	stw	sp,1040(sp)
    a438:	da010215 	stw	r8,1032(sp)
    a43c:	da010515 	stw	r8,1044(sp)
    a440:	d8010615 	stw	zero,1048(sp)
    a444:	000a0940 	call	a094 <___vfiprintf_internal_r>
    a448:	1021883a 	mov	r16,r2
    a44c:	10000416 	blt	r2,zero,a460 <___vfiprintf_internal_r+0x3cc>
    a450:	d9012117 	ldw	r4,1156(sp)
    a454:	d9410004 	addi	r5,sp,1024
    a458:	0006fd80 	call	6fd8 <_fflush_r>
    a45c:	10040f1e 	bne	r2,zero,b49c <___vfiprintf_internal_r+0x1408>
    a460:	d881030b 	ldhu	r2,1036(sp)
    a464:	1080100c 	andi	r2,r2,64
    a468:	10000426 	beq	r2,zero,a47c <___vfiprintf_internal_r+0x3e8>
    a46c:	d8c12017 	ldw	r3,1152(sp)
    a470:	1880030b 	ldhu	r2,12(r3)
    a474:	10801014 	ori	r2,r2,64
    a478:	1880030d 	sth	r2,12(r3)
    a47c:	8005883a 	mov	r2,r16
    a480:	00000106 	br	a488 <___vfiprintf_internal_r+0x3f4>
    a484:	00bfffc4 	movi	r2,-1
    a488:	dfc13517 	ldw	ra,1236(sp)
    a48c:	df013417 	ldw	fp,1232(sp)
    a490:	ddc13317 	ldw	r23,1228(sp)
    a494:	dd813217 	ldw	r22,1224(sp)
    a498:	dd413117 	ldw	r21,1220(sp)
    a49c:	dd013017 	ldw	r20,1216(sp)
    a4a0:	dcc12f17 	ldw	r19,1212(sp)
    a4a4:	dc812e17 	ldw	r18,1208(sp)
    a4a8:	dc412d17 	ldw	r17,1204(sp)
    a4ac:	dc012c17 	ldw	r16,1200(sp)
    a4b0:	dec13604 	addi	sp,sp,1240
    a4b4:	f800283a 	ret
    a4b8:	00075940 	call	7594 <__sinit>
    a4bc:	003f0706 	br	a0dc <__alt_data_end+0xfffb49ac>
    a4c0:	d8c12417 	ldw	r3,1168(sp)
    a4c4:	d8812315 	stw	r2,1164(sp)
    a4c8:	00c7c83a 	sub	r3,zero,r3
    a4cc:	d8c12415 	stw	r3,1168(sp)
    a4d0:	94800114 	ori	r18,r18,4
    a4d4:	b9800007 	ldb	r6,0(r23)
    a4d8:	003f4f06 	br	a218 <__alt_data_end+0xfffb4ae8>
    a4dc:	94802014 	ori	r18,r18,128
    a4e0:	b9800007 	ldb	r6,0(r23)
    a4e4:	003f4c06 	br	a218 <__alt_data_end+0xfffb4ae8>
    a4e8:	dc012615 	stw	r16,1176(sp)
    a4ec:	d8012415 	stw	zero,1168(sp)
    a4f0:	35bff404 	addi	r22,r6,-48
    a4f4:	0009883a 	mov	r4,zero
    a4f8:	b821883a 	mov	r16,r23
    a4fc:	01400284 	movi	r5,10
    a500:	000cbb00 	call	cbb0 <__mulsi3>
    a504:	81800007 	ldb	r6,0(r16)
    a508:	1589883a 	add	r4,r2,r22
    a50c:	bdc00044 	addi	r23,r23,1
    a510:	35bff404 	addi	r22,r6,-48
    a514:	b821883a 	mov	r16,r23
    a518:	adbff82e 	bgeu	r21,r22,a4fc <__alt_data_end+0xfffb4dcc>
    a51c:	d9012415 	stw	r4,1168(sp)
    a520:	dc012617 	ldw	r16,1176(sp)
    a524:	003f3d06 	br	a21c <__alt_data_end+0xfffb4aec>
    a528:	d8c12203 	ldbu	r3,1160(sp)
    a52c:	94800414 	ori	r18,r18,16
    a530:	9080080c 	andi	r2,r18,32
    a534:	d8c11d85 	stb	r3,1142(sp)
    a538:	9811883a 	mov	r8,r19
    a53c:	d8c12317 	ldw	r3,1164(sp)
    a540:	10018226 	beq	r2,zero,ab4c <___vfiprintf_internal_r+0xab8>
    a544:	d9012317 	ldw	r4,1164(sp)
    a548:	18800117 	ldw	r2,4(r3)
    a54c:	1cc00017 	ldw	r19,0(r3)
    a550:	21000204 	addi	r4,r4,8
    a554:	d9012315 	stw	r4,1164(sp)
    a558:	102b883a 	mov	r21,r2
    a55c:	10030016 	blt	r2,zero,b160 <___vfiprintf_internal_r+0x10cc>
    a560:	dd811d83 	ldbu	r22,1142(sp)
    a564:	8029883a 	mov	r20,r16
    a568:	00800044 	movi	r2,1
    a56c:	9d46b03a 	or	r3,r19,r21
    a570:	80000216 	blt	r16,zero,a57c <___vfiprintf_internal_r+0x4e8>
    a574:	013fdfc4 	movi	r4,-129
    a578:	9124703a 	and	r18,r18,r4
    a57c:	1801b41e 	bne	r3,zero,ac50 <___vfiprintf_internal_r+0xbbc>
    a580:	80028126 	beq	r16,zero,af88 <___vfiprintf_internal_r+0xef4>
    a584:	10803fcc 	andi	r2,r2,255
    a588:	00c00044 	movi	r3,1
    a58c:	10c1d126 	beq	r2,r3,acd4 <___vfiprintf_internal_r+0xc40>
    a590:	00c00084 	movi	r3,2
    a594:	10c28626 	beq	r2,r3,afb0 <___vfiprintf_internal_r+0xf1c>
    a598:	d8c10a04 	addi	r3,sp,1064
    a59c:	9808d0fa 	srli	r4,r19,3
    a5a0:	a80a977a 	slli	r5,r21,29
    a5a4:	a82ad0fa 	srli	r21,r21,3
    a5a8:	9cc001cc 	andi	r19,r19,7
    a5ac:	98800c04 	addi	r2,r19,48
    a5b0:	18ffffc4 	addi	r3,r3,-1
    a5b4:	2926b03a 	or	r19,r5,r4
    a5b8:	18800005 	stb	r2,0(r3)
    a5bc:	9d48b03a 	or	r4,r19,r21
    a5c0:	203ff61e 	bne	r4,zero,a59c <__alt_data_end+0xfffb4e6c>
    a5c4:	9100004c 	andi	r4,r18,1
    a5c8:	d8c12215 	stw	r3,1160(sp)
    a5cc:	2002b31e 	bne	r4,zero,b09c <___vfiprintf_internal_r+0x1008>
    a5d0:	d9411e17 	ldw	r5,1144(sp)
    a5d4:	28e9c83a 	sub	r20,r5,r3
    a5d8:	a02b883a 	mov	r21,r20
    a5dc:	a400010e 	bge	r20,r16,a5e4 <___vfiprintf_internal_r+0x550>
    a5e0:	802b883a 	mov	r21,r16
    a5e4:	b5803fcc 	andi	r22,r22,255
    a5e8:	b580201c 	xori	r22,r22,128
    a5ec:	b5bfe004 	addi	r22,r22,-128
    a5f0:	b0000126 	beq	r22,zero,a5f8 <___vfiprintf_internal_r+0x564>
    a5f4:	ad400044 	addi	r21,r21,1
    a5f8:	9280008c 	andi	r10,r18,2
    a5fc:	50000126 	beq	r10,zero,a604 <___vfiprintf_internal_r+0x570>
    a600:	ad400084 	addi	r21,r21,2
    a604:	9580210c 	andi	r22,r18,132
    a608:	b001751e 	bne	r22,zero,abe0 <___vfiprintf_internal_r+0xb4c>
    a60c:	d9012417 	ldw	r4,1168(sp)
    a610:	2567c83a 	sub	r19,r4,r21
    a614:	04c1720e 	bge	zero,r19,abe0 <___vfiprintf_internal_r+0xb4c>
    a618:	01c00404 	movi	r7,16
    a61c:	d8c11c17 	ldw	r3,1136(sp)
    a620:	3cc36b0e 	bge	r7,r19,b3d0 <___vfiprintf_internal_r+0x133c>
    a624:	00800074 	movhi	r2,1
    a628:	10896204 	addi	r2,r2,9608
    a62c:	dc012915 	stw	r16,1188(sp)
    a630:	d9011b17 	ldw	r4,1132(sp)
    a634:	9821883a 	mov	r16,r19
    a638:	d8812615 	stw	r2,1176(sp)
    a63c:	030001c4 	movi	r12,7
    a640:	5027883a 	mov	r19,r10
    a644:	00000506 	br	a65c <___vfiprintf_internal_r+0x5c8>
    a648:	21400084 	addi	r5,r4,2
    a64c:	42000204 	addi	r8,r8,8
    a650:	1009883a 	mov	r4,r2
    a654:	843ffc04 	addi	r16,r16,-16
    a658:	3c000d0e 	bge	r7,r16,a690 <___vfiprintf_internal_r+0x5fc>
    a65c:	18c00404 	addi	r3,r3,16
    a660:	20800044 	addi	r2,r4,1
    a664:	47000015 	stw	fp,0(r8)
    a668:	41c00115 	stw	r7,4(r8)
    a66c:	d8c11c15 	stw	r3,1136(sp)
    a670:	d8811b15 	stw	r2,1132(sp)
    a674:	60bff40e 	bge	r12,r2,a648 <__alt_data_end+0xfffb4f18>
    a678:	18014b1e 	bne	r3,zero,aba8 <___vfiprintf_internal_r+0xb14>
    a67c:	843ffc04 	addi	r16,r16,-16
    a680:	0009883a 	mov	r4,zero
    a684:	01400044 	movi	r5,1
    a688:	d811883a 	mov	r8,sp
    a68c:	3c3ff316 	blt	r7,r16,a65c <__alt_data_end+0xfffb4f2c>
    a690:	9815883a 	mov	r10,r19
    a694:	8027883a 	mov	r19,r16
    a698:	dc012917 	ldw	r16,1188(sp)
    a69c:	d9012617 	ldw	r4,1176(sp)
    a6a0:	98c7883a 	add	r3,r19,r3
    a6a4:	44c00115 	stw	r19,4(r8)
    a6a8:	41000015 	stw	r4,0(r8)
    a6ac:	d8c11c15 	stw	r3,1136(sp)
    a6b0:	d9411b15 	stw	r5,1132(sp)
    a6b4:	008001c4 	movi	r2,7
    a6b8:	11425116 	blt	r2,r5,b000 <___vfiprintf_internal_r+0xf6c>
    a6bc:	d9011d87 	ldb	r4,1142(sp)
    a6c0:	42000204 	addi	r8,r8,8
    a6c4:	28800044 	addi	r2,r5,1
    a6c8:	20014a1e 	bne	r4,zero,abf4 <___vfiprintf_internal_r+0xb60>
    a6cc:	50000c26 	beq	r10,zero,a700 <___vfiprintf_internal_r+0x66c>
    a6d0:	d9011d04 	addi	r4,sp,1140
    a6d4:	18c00084 	addi	r3,r3,2
    a6d8:	41000015 	stw	r4,0(r8)
    a6dc:	01000084 	movi	r4,2
    a6e0:	41000115 	stw	r4,4(r8)
    a6e4:	d8c11c15 	stw	r3,1136(sp)
    a6e8:	d8811b15 	stw	r2,1132(sp)
    a6ec:	010001c4 	movi	r4,7
    a6f0:	20822016 	blt	r4,r2,af74 <___vfiprintf_internal_r+0xee0>
    a6f4:	100b883a 	mov	r5,r2
    a6f8:	42000204 	addi	r8,r8,8
    a6fc:	10800044 	addi	r2,r2,1
    a700:	01002004 	movi	r4,128
    a704:	b101de26 	beq	r22,r4,ae80 <___vfiprintf_internal_r+0xdec>
    a708:	8521c83a 	sub	r16,r16,r20
    a70c:	0400230e 	bge	zero,r16,a79c <___vfiprintf_internal_r+0x708>
    a710:	04c00404 	movi	r19,16
    a714:	9c030d0e 	bge	r19,r16,b34c <___vfiprintf_internal_r+0x12b8>
    a718:	00800074 	movhi	r2,1
    a71c:	10895e04 	addi	r2,r2,9592
    a720:	d8812615 	stw	r2,1176(sp)
    a724:	058001c4 	movi	r22,7
    a728:	00000506 	br	a740 <___vfiprintf_internal_r+0x6ac>
    a72c:	28800084 	addi	r2,r5,2
    a730:	42000204 	addi	r8,r8,8
    a734:	200b883a 	mov	r5,r4
    a738:	843ffc04 	addi	r16,r16,-16
    a73c:	9c000d0e 	bge	r19,r16,a774 <___vfiprintf_internal_r+0x6e0>
    a740:	18c00404 	addi	r3,r3,16
    a744:	29000044 	addi	r4,r5,1
    a748:	44400015 	stw	r17,0(r8)
    a74c:	44c00115 	stw	r19,4(r8)
    a750:	d8c11c15 	stw	r3,1136(sp)
    a754:	d9011b15 	stw	r4,1132(sp)
    a758:	b13ff40e 	bge	r22,r4,a72c <__alt_data_end+0xfffb4ffc>
    a75c:	1801321e 	bne	r3,zero,ac28 <___vfiprintf_internal_r+0xb94>
    a760:	843ffc04 	addi	r16,r16,-16
    a764:	000b883a 	mov	r5,zero
    a768:	00800044 	movi	r2,1
    a76c:	d811883a 	mov	r8,sp
    a770:	9c3ff316 	blt	r19,r16,a740 <__alt_data_end+0xfffb5010>
    a774:	d9012617 	ldw	r4,1176(sp)
    a778:	1c07883a 	add	r3,r3,r16
    a77c:	44000115 	stw	r16,4(r8)
    a780:	41000015 	stw	r4,0(r8)
    a784:	d8c11c15 	stw	r3,1136(sp)
    a788:	d8811b15 	stw	r2,1132(sp)
    a78c:	010001c4 	movi	r4,7
    a790:	20816216 	blt	r4,r2,ad1c <___vfiprintf_internal_r+0xc88>
    a794:	42000204 	addi	r8,r8,8
    a798:	10800044 	addi	r2,r2,1
    a79c:	d9012217 	ldw	r4,1160(sp)
    a7a0:	1d07883a 	add	r3,r3,r20
    a7a4:	45000115 	stw	r20,4(r8)
    a7a8:	41000015 	stw	r4,0(r8)
    a7ac:	d8c11c15 	stw	r3,1136(sp)
    a7b0:	d8811b15 	stw	r2,1132(sp)
    a7b4:	010001c4 	movi	r4,7
    a7b8:	2081610e 	bge	r4,r2,ad40 <___vfiprintf_internal_r+0xcac>
    a7bc:	1802211e 	bne	r3,zero,b044 <___vfiprintf_internal_r+0xfb0>
    a7c0:	d8011b15 	stw	zero,1132(sp)
    a7c4:	9480010c 	andi	r18,r18,4
    a7c8:	9002171e 	bne	r18,zero,b028 <___vfiprintf_internal_r+0xf94>
    a7cc:	d9412417 	ldw	r5,1168(sp)
    a7d0:	a9433716 	blt	r21,r5,b4b0 <___vfiprintf_internal_r+0x141c>
    a7d4:	d8812517 	ldw	r2,1172(sp)
    a7d8:	1545883a 	add	r2,r2,r21
    a7dc:	d8812515 	stw	r2,1172(sp)
    a7e0:	00019a06 	br	ae4c <___vfiprintf_internal_r+0xdb8>
    a7e4:	d8c12317 	ldw	r3,1164(sp)
    a7e8:	05400044 	movi	r21,1
    a7ec:	9811883a 	mov	r8,r19
    a7f0:	18800017 	ldw	r2,0(r3)
    a7f4:	18c00104 	addi	r3,r3,4
    a7f8:	d8c12315 	stw	r3,1164(sp)
    a7fc:	d8c10004 	addi	r3,sp,1024
    a800:	d8011d85 	stb	zero,1142(sp)
    a804:	d8810005 	stb	r2,1024(sp)
    a808:	a829883a 	mov	r20,r21
    a80c:	d8c12215 	stw	r3,1160(sp)
    a810:	0021883a 	mov	r16,zero
    a814:	003f7806 	br	a5f8 <__alt_data_end+0xfffb4ec8>
    a818:	94800414 	ori	r18,r18,16
    a81c:	9080080c 	andi	r2,r18,32
    a820:	9811883a 	mov	r8,r19
    a824:	10009026 	beq	r2,zero,aa68 <___vfiprintf_internal_r+0x9d4>
    a828:	d8812317 	ldw	r2,1164(sp)
    a82c:	d8c12317 	ldw	r3,1164(sp)
    a830:	14c00017 	ldw	r19,0(r2)
    a834:	15400117 	ldw	r21,4(r2)
    a838:	18c00204 	addi	r3,r3,8
    a83c:	d8c12315 	stw	r3,1164(sp)
    a840:	0005883a 	mov	r2,zero
    a844:	9d46b03a 	or	r3,r19,r21
    a848:	d8011d85 	stb	zero,1142(sp)
    a84c:	8029883a 	mov	r20,r16
    a850:	002d883a 	mov	r22,zero
    a854:	003f4606 	br	a570 <__alt_data_end+0xfffb4e40>
    a858:	94800414 	ori	r18,r18,16
    a85c:	9080080c 	andi	r2,r18,32
    a860:	9811883a 	mov	r8,r19
    a864:	10006226 	beq	r2,zero,a9f0 <___vfiprintf_internal_r+0x95c>
    a868:	d9012317 	ldw	r4,1164(sp)
    a86c:	00800044 	movi	r2,1
    a870:	24c00017 	ldw	r19,0(r4)
    a874:	25400117 	ldw	r21,4(r4)
    a878:	21000204 	addi	r4,r4,8
    a87c:	d9012315 	stw	r4,1164(sp)
    a880:	9d46b03a 	or	r3,r19,r21
    a884:	003ff006 	br	a848 <__alt_data_end+0xfffb5118>
    a888:	b9800007 	ldb	r6,0(r23)
    a88c:	00801b04 	movi	r2,108
    a890:	3082b226 	beq	r6,r2,b35c <___vfiprintf_internal_r+0x12c8>
    a894:	94800414 	ori	r18,r18,16
    a898:	003e5f06 	br	a218 <__alt_data_end+0xfffb4ae8>
    a89c:	d8c12203 	ldbu	r3,1160(sp)
    a8a0:	01000074 	movhi	r4,1
    a8a4:	2108f804 	addi	r4,r4,9184
    a8a8:	d8c11d85 	stb	r3,1142(sp)
    a8ac:	d9012715 	stw	r4,1180(sp)
    a8b0:	90c0080c 	andi	r3,r18,32
    a8b4:	9811883a 	mov	r8,r19
    a8b8:	d8812317 	ldw	r2,1164(sp)
    a8bc:	18005f26 	beq	r3,zero,aa3c <___vfiprintf_internal_r+0x9a8>
    a8c0:	d9012317 	ldw	r4,1164(sp)
    a8c4:	14c00017 	ldw	r19,0(r2)
    a8c8:	15400117 	ldw	r21,4(r2)
    a8cc:	21000204 	addi	r4,r4,8
    a8d0:	d9012315 	stw	r4,1164(sp)
    a8d4:	9080004c 	andi	r2,r18,1
    a8d8:	1001e226 	beq	r2,zero,b064 <___vfiprintf_internal_r+0xfd0>
    a8dc:	9d46b03a 	or	r3,r19,r21
    a8e0:	18024e26 	beq	r3,zero,b21c <___vfiprintf_internal_r+0x1188>
    a8e4:	00800c04 	movi	r2,48
    a8e8:	d8811d05 	stb	r2,1140(sp)
    a8ec:	d9811d45 	stb	r6,1141(sp)
    a8f0:	94800094 	ori	r18,r18,2
    a8f4:	00800084 	movi	r2,2
    a8f8:	003fd306 	br	a848 <__alt_data_end+0xfffb5118>
    a8fc:	d9012317 	ldw	r4,1164(sp)
    a900:	d9412317 	ldw	r5,1164(sp)
    a904:	21000017 	ldw	r4,0(r4)
    a908:	28800104 	addi	r2,r5,4
    a90c:	d9012415 	stw	r4,1168(sp)
    a910:	203eeb16 	blt	r4,zero,a4c0 <__alt_data_end+0xfffb4d90>
    a914:	d8812315 	stw	r2,1164(sp)
    a918:	b9800007 	ldb	r6,0(r23)
    a91c:	003e3e06 	br	a218 <__alt_data_end+0xfffb4ae8>
    a920:	b9800007 	ldb	r6,0(r23)
    a924:	01000a84 	movi	r4,42
    a928:	b8800044 	addi	r2,r23,1
    a92c:	3102d226 	beq	r6,r4,b478 <___vfiprintf_internal_r+0x13e4>
    a930:	35bff404 	addi	r22,r6,-48
    a934:	102f883a 	mov	r23,r2
    a938:	0021883a 	mov	r16,zero
    a93c:	adbe3736 	bltu	r21,r22,a21c <__alt_data_end+0xfffb4aec>
    a940:	0009883a 	mov	r4,zero
    a944:	01400284 	movi	r5,10
    a948:	000cbb00 	call	cbb0 <__mulsi3>
    a94c:	b9800007 	ldb	r6,0(r23)
    a950:	b089883a 	add	r4,r22,r2
    a954:	bdc00044 	addi	r23,r23,1
    a958:	35bff404 	addi	r22,r6,-48
    a95c:	adbff92e 	bgeu	r21,r22,a944 <__alt_data_end+0xfffb5214>
    a960:	2021883a 	mov	r16,r4
    a964:	203e2d0e 	bge	r4,zero,a21c <__alt_data_end+0xfffb4aec>
    a968:	043fffc4 	movi	r16,-1
    a96c:	003e2b06 	br	a21c <__alt_data_end+0xfffb4aec>
    a970:	94801014 	ori	r18,r18,64
    a974:	b9800007 	ldb	r6,0(r23)
    a978:	003e2706 	br	a218 <__alt_data_end+0xfffb4ae8>
    a97c:	94800814 	ori	r18,r18,32
    a980:	b9800007 	ldb	r6,0(r23)
    a984:	003e2406 	br	a218 <__alt_data_end+0xfffb4ae8>
    a988:	d9412317 	ldw	r5,1164(sp)
    a98c:	d8812317 	ldw	r2,1164(sp)
    a990:	d8011d85 	stb	zero,1142(sp)
    a994:	29400017 	ldw	r5,0(r5)
    a998:	9811883a 	mov	r8,r19
    a99c:	14c00104 	addi	r19,r2,4
    a9a0:	d9412215 	stw	r5,1160(sp)
    a9a4:	28029026 	beq	r5,zero,b3e8 <___vfiprintf_internal_r+0x1354>
    a9a8:	d9012217 	ldw	r4,1160(sp)
    a9ac:	80027616 	blt	r16,zero,b388 <___vfiprintf_internal_r+0x12f4>
    a9b0:	000b883a 	mov	r5,zero
    a9b4:	800d883a 	mov	r6,r16
    a9b8:	da012a15 	stw	r8,1192(sp)
    a9bc:	00082a40 	call	82a4 <memchr>
    a9c0:	da012a17 	ldw	r8,1192(sp)
    a9c4:	1002a026 	beq	r2,zero,b448 <___vfiprintf_internal_r+0x13b4>
    a9c8:	d8c12217 	ldw	r3,1160(sp)
    a9cc:	10e9c83a 	sub	r20,r2,r3
    a9d0:	85023816 	blt	r16,r20,b2b4 <___vfiprintf_internal_r+0x1220>
    a9d4:	dd811d83 	ldbu	r22,1142(sp)
    a9d8:	dcc12315 	stw	r19,1164(sp)
    a9dc:	0021883a 	mov	r16,zero
    a9e0:	003efd06 	br	a5d8 <__alt_data_end+0xfffb4ea8>
    a9e4:	9080080c 	andi	r2,r18,32
    a9e8:	9811883a 	mov	r8,r19
    a9ec:	103f9e1e 	bne	r2,zero,a868 <__alt_data_end+0xfffb5138>
    a9f0:	9080040c 	andi	r2,r18,16
    a9f4:	10021726 	beq	r2,zero,b254 <___vfiprintf_internal_r+0x11c0>
    a9f8:	d9412317 	ldw	r5,1164(sp)
    a9fc:	002b883a 	mov	r21,zero
    aa00:	00800044 	movi	r2,1
    aa04:	2cc00017 	ldw	r19,0(r5)
    aa08:	29400104 	addi	r5,r5,4
    aa0c:	d9412315 	stw	r5,1164(sp)
    aa10:	9807883a 	mov	r3,r19
    aa14:	003f8c06 	br	a848 <__alt_data_end+0xfffb5118>
    aa18:	d8c12203 	ldbu	r3,1160(sp)
    aa1c:	01000074 	movhi	r4,1
    aa20:	2108fd04 	addi	r4,r4,9204
    aa24:	d8c11d85 	stb	r3,1142(sp)
    aa28:	d9012715 	stw	r4,1180(sp)
    aa2c:	90c0080c 	andi	r3,r18,32
    aa30:	9811883a 	mov	r8,r19
    aa34:	d8812317 	ldw	r2,1164(sp)
    aa38:	183fa11e 	bne	r3,zero,a8c0 <__alt_data_end+0xfffb5190>
    aa3c:	90c0040c 	andi	r3,r18,16
    aa40:	1801e526 	beq	r3,zero,b1d8 <___vfiprintf_internal_r+0x1144>
    aa44:	d9412317 	ldw	r5,1164(sp)
    aa48:	14c00017 	ldw	r19,0(r2)
    aa4c:	002b883a 	mov	r21,zero
    aa50:	29400104 	addi	r5,r5,4
    aa54:	d9412315 	stw	r5,1164(sp)
    aa58:	003f9e06 	br	a8d4 <__alt_data_end+0xfffb51a4>
    aa5c:	9080080c 	andi	r2,r18,32
    aa60:	9811883a 	mov	r8,r19
    aa64:	103f701e 	bne	r2,zero,a828 <__alt_data_end+0xfffb50f8>
    aa68:	9080040c 	andi	r2,r18,16
    aa6c:	1001ef26 	beq	r2,zero,b22c <___vfiprintf_internal_r+0x1198>
    aa70:	d9012317 	ldw	r4,1164(sp)
    aa74:	002b883a 	mov	r21,zero
    aa78:	0005883a 	mov	r2,zero
    aa7c:	24c00017 	ldw	r19,0(r4)
    aa80:	21000104 	addi	r4,r4,4
    aa84:	d9012315 	stw	r4,1164(sp)
    aa88:	9807883a 	mov	r3,r19
    aa8c:	003f6e06 	br	a848 <__alt_data_end+0xfffb5118>
    aa90:	d8c12317 	ldw	r3,1164(sp)
    aa94:	9811883a 	mov	r8,r19
    aa98:	00800c04 	movi	r2,48
    aa9c:	1cc00017 	ldw	r19,0(r3)
    aaa0:	01000074 	movhi	r4,1
    aaa4:	18c00104 	addi	r3,r3,4
    aaa8:	d8811d05 	stb	r2,1140(sp)
    aaac:	2108fd04 	addi	r4,r4,9204
    aab0:	00801e04 	movi	r2,120
    aab4:	d8811d45 	stb	r2,1141(sp)
    aab8:	d8c12315 	stw	r3,1164(sp)
    aabc:	002b883a 	mov	r21,zero
    aac0:	94800094 	ori	r18,r18,2
    aac4:	d9012715 	stw	r4,1180(sp)
    aac8:	00800084 	movi	r2,2
    aacc:	9807883a 	mov	r3,r19
    aad0:	003f5d06 	br	a848 <__alt_data_end+0xfffb5118>
    aad4:	d8c12203 	ldbu	r3,1160(sp)
    aad8:	9080080c 	andi	r2,r18,32
    aadc:	9811883a 	mov	r8,r19
    aae0:	d8c11d85 	stb	r3,1142(sp)
    aae4:	1001b126 	beq	r2,zero,b1ac <___vfiprintf_internal_r+0x1118>
    aae8:	d9012317 	ldw	r4,1164(sp)
    aaec:	d9412517 	ldw	r5,1172(sp)
    aaf0:	20800017 	ldw	r2,0(r4)
    aaf4:	2807d7fa 	srai	r3,r5,31
    aaf8:	21000104 	addi	r4,r4,4
    aafc:	d9012315 	stw	r4,1164(sp)
    ab00:	11400015 	stw	r5,0(r2)
    ab04:	10c00115 	stw	r3,4(r2)
    ab08:	003d9a06 	br	a174 <__alt_data_end+0xfffb4a44>
    ab0c:	d8812207 	ldb	r2,1160(sp)
    ab10:	1001c41e 	bne	r2,zero,b224 <___vfiprintf_internal_r+0x1190>
    ab14:	00c00804 	movi	r3,32
    ab18:	d8c12205 	stb	r3,1160(sp)
    ab1c:	b9800007 	ldb	r6,0(r23)
    ab20:	003dbd06 	br	a218 <__alt_data_end+0xfffb4ae8>
    ab24:	00c00ac4 	movi	r3,43
    ab28:	d8c12205 	stb	r3,1160(sp)
    ab2c:	b9800007 	ldb	r6,0(r23)
    ab30:	003db906 	br	a218 <__alt_data_end+0xfffb4ae8>
    ab34:	d8c12203 	ldbu	r3,1160(sp)
    ab38:	9080080c 	andi	r2,r18,32
    ab3c:	9811883a 	mov	r8,r19
    ab40:	d8c11d85 	stb	r3,1142(sp)
    ab44:	d8c12317 	ldw	r3,1164(sp)
    ab48:	103e7e1e 	bne	r2,zero,a544 <__alt_data_end+0xfffb4e14>
    ab4c:	9080040c 	andi	r2,r18,16
    ab50:	1001a926 	beq	r2,zero,b1f8 <___vfiprintf_internal_r+0x1164>
    ab54:	1cc00017 	ldw	r19,0(r3)
    ab58:	d9412317 	ldw	r5,1164(sp)
    ab5c:	982bd7fa 	srai	r21,r19,31
    ab60:	29400104 	addi	r5,r5,4
    ab64:	d9412315 	stw	r5,1164(sp)
    ab68:	a805883a 	mov	r2,r21
    ab6c:	003e7b06 	br	a55c <__alt_data_end+0xfffb4e2c>
    ab70:	94800054 	ori	r18,r18,1
    ab74:	b9800007 	ldb	r6,0(r23)
    ab78:	003da706 	br	a218 <__alt_data_end+0xfffb4ae8>
    ab7c:	d8c12203 	ldbu	r3,1160(sp)
    ab80:	9811883a 	mov	r8,r19
    ab84:	d8c11d85 	stb	r3,1142(sp)
    ab88:	30005826 	beq	r6,zero,acec <___vfiprintf_internal_r+0xc58>
    ab8c:	05400044 	movi	r21,1
    ab90:	d8c10004 	addi	r3,sp,1024
    ab94:	d9810005 	stb	r6,1024(sp)
    ab98:	d8011d85 	stb	zero,1142(sp)
    ab9c:	a829883a 	mov	r20,r21
    aba0:	d8c12215 	stw	r3,1160(sp)
    aba4:	003f1a06 	br	a810 <__alt_data_end+0xfffb50e0>
    aba8:	d9012117 	ldw	r4,1156(sp)
    abac:	d9412017 	ldw	r5,1152(sp)
    abb0:	d9811a04 	addi	r6,sp,1128
    abb4:	d9c12a15 	stw	r7,1192(sp)
    abb8:	db012b15 	stw	r12,1196(sp)
    abbc:	0009f800 	call	9f80 <__sprint_r.part.0>
    abc0:	d9c12a17 	ldw	r7,1192(sp)
    abc4:	db012b17 	ldw	r12,1196(sp)
    abc8:	10004e1e 	bne	r2,zero,ad04 <___vfiprintf_internal_r+0xc70>
    abcc:	d9011b17 	ldw	r4,1132(sp)
    abd0:	d8c11c17 	ldw	r3,1136(sp)
    abd4:	d811883a 	mov	r8,sp
    abd8:	21400044 	addi	r5,r4,1
    abdc:	003e9d06 	br	a654 <__alt_data_end+0xfffb4f24>
    abe0:	d9411b17 	ldw	r5,1132(sp)
    abe4:	d8c11c17 	ldw	r3,1136(sp)
    abe8:	28800044 	addi	r2,r5,1
    abec:	d9011d87 	ldb	r4,1142(sp)
    abf0:	203eb626 	beq	r4,zero,a6cc <__alt_data_end+0xfffb4f9c>
    abf4:	01000044 	movi	r4,1
    abf8:	d9411d84 	addi	r5,sp,1142
    abfc:	1907883a 	add	r3,r3,r4
    ac00:	41400015 	stw	r5,0(r8)
    ac04:	41000115 	stw	r4,4(r8)
    ac08:	d8c11c15 	stw	r3,1136(sp)
    ac0c:	d8811b15 	stw	r2,1132(sp)
    ac10:	014001c4 	movi	r5,7
    ac14:	2880ce16 	blt	r5,r2,af50 <___vfiprintf_internal_r+0xebc>
    ac18:	100b883a 	mov	r5,r2
    ac1c:	42000204 	addi	r8,r8,8
    ac20:	10800044 	addi	r2,r2,1
    ac24:	003ea906 	br	a6cc <__alt_data_end+0xfffb4f9c>
    ac28:	d9012117 	ldw	r4,1156(sp)
    ac2c:	d9412017 	ldw	r5,1152(sp)
    ac30:	d9811a04 	addi	r6,sp,1128
    ac34:	0009f800 	call	9f80 <__sprint_r.part.0>
    ac38:	1000321e 	bne	r2,zero,ad04 <___vfiprintf_internal_r+0xc70>
    ac3c:	d9411b17 	ldw	r5,1132(sp)
    ac40:	d8c11c17 	ldw	r3,1136(sp)
    ac44:	d811883a 	mov	r8,sp
    ac48:	28800044 	addi	r2,r5,1
    ac4c:	003eba06 	br	a738 <__alt_data_end+0xfffb5008>
    ac50:	10803fcc 	andi	r2,r2,255
    ac54:	00c00044 	movi	r3,1
    ac58:	10fe4d1e 	bne	r2,r3,a590 <__alt_data_end+0xfffb4e60>
    ac5c:	a800021e 	bne	r21,zero,ac68 <___vfiprintf_internal_r+0xbd4>
    ac60:	00800244 	movi	r2,9
    ac64:	14c01b2e 	bgeu	r2,r19,acd4 <___vfiprintf_internal_r+0xc40>
    ac68:	dc012215 	stw	r16,1160(sp)
    ac6c:	dd010a04 	addi	r20,sp,1064
    ac70:	a821883a 	mov	r16,r21
    ac74:	402b883a 	mov	r21,r8
    ac78:	9809883a 	mov	r4,r19
    ac7c:	800b883a 	mov	r5,r16
    ac80:	01800284 	movi	r6,10
    ac84:	000f883a 	mov	r7,zero
    ac88:	000c4680 	call	c468 <__umoddi3>
    ac8c:	10800c04 	addi	r2,r2,48
    ac90:	a53fffc4 	addi	r20,r20,-1
    ac94:	9809883a 	mov	r4,r19
    ac98:	800b883a 	mov	r5,r16
    ac9c:	01800284 	movi	r6,10
    aca0:	000f883a 	mov	r7,zero
    aca4:	a0800005 	stb	r2,0(r20)
    aca8:	000be280 	call	be28 <__udivdi3>
    acac:	1027883a 	mov	r19,r2
    acb0:	10c4b03a 	or	r2,r2,r3
    acb4:	1821883a 	mov	r16,r3
    acb8:	103fef1e 	bne	r2,zero,ac78 <__alt_data_end+0xfffb5548>
    acbc:	d9011e17 	ldw	r4,1144(sp)
    acc0:	dc012217 	ldw	r16,1160(sp)
    acc4:	a811883a 	mov	r8,r21
    acc8:	dd012215 	stw	r20,1160(sp)
    accc:	2529c83a 	sub	r20,r4,r20
    acd0:	003e4106 	br	a5d8 <__alt_data_end+0xfffb4ea8>
    acd4:	9cc00c04 	addi	r19,r19,48
    acd8:	d8c109c4 	addi	r3,sp,1063
    acdc:	dcc109c5 	stb	r19,1063(sp)
    ace0:	dd012817 	ldw	r20,1184(sp)
    ace4:	d8c12215 	stw	r3,1160(sp)
    ace8:	003e3b06 	br	a5d8 <__alt_data_end+0xfffb4ea8>
    acec:	d8811c17 	ldw	r2,1136(sp)
    acf0:	10000426 	beq	r2,zero,ad04 <___vfiprintf_internal_r+0xc70>
    acf4:	d9012117 	ldw	r4,1156(sp)
    acf8:	d9412017 	ldw	r5,1152(sp)
    acfc:	d9811a04 	addi	r6,sp,1128
    ad00:	0009f800 	call	9f80 <__sprint_r.part.0>
    ad04:	d9412017 	ldw	r5,1152(sp)
    ad08:	2880030b 	ldhu	r2,12(r5)
    ad0c:	1080100c 	andi	r2,r2,64
    ad10:	103ddc1e 	bne	r2,zero,a484 <__alt_data_end+0xfffb4d54>
    ad14:	d8812517 	ldw	r2,1172(sp)
    ad18:	003ddb06 	br	a488 <__alt_data_end+0xfffb4d58>
    ad1c:	1801061e 	bne	r3,zero,b138 <___vfiprintf_internal_r+0x10a4>
    ad20:	d8c12217 	ldw	r3,1160(sp)
    ad24:	00800044 	movi	r2,1
    ad28:	dd000115 	stw	r20,4(sp)
    ad2c:	d8c00015 	stw	r3,0(sp)
    ad30:	dd011c15 	stw	r20,1136(sp)
    ad34:	d8811b15 	stw	r2,1132(sp)
    ad38:	a007883a 	mov	r3,r20
    ad3c:	d811883a 	mov	r8,sp
    ad40:	42000204 	addi	r8,r8,8
    ad44:	9480010c 	andi	r18,r18,4
    ad48:	90003426 	beq	r18,zero,ae1c <___vfiprintf_internal_r+0xd88>
    ad4c:	d9412417 	ldw	r5,1168(sp)
    ad50:	2d65c83a 	sub	r18,r5,r21
    ad54:	0480310e 	bge	zero,r18,ae1c <___vfiprintf_internal_r+0xd88>
    ad58:	04000404 	movi	r16,16
    ad5c:	8481ad0e 	bge	r16,r18,b414 <___vfiprintf_internal_r+0x1380>
    ad60:	01400074 	movhi	r5,1
    ad64:	29496204 	addi	r5,r5,9608
    ad68:	d9011b17 	ldw	r4,1132(sp)
    ad6c:	d9412615 	stw	r5,1176(sp)
    ad70:	04c001c4 	movi	r19,7
    ad74:	dd012117 	ldw	r20,1156(sp)
    ad78:	dd812017 	ldw	r22,1152(sp)
    ad7c:	00000506 	br	ad94 <___vfiprintf_internal_r+0xd00>
    ad80:	21400084 	addi	r5,r4,2
    ad84:	42000204 	addi	r8,r8,8
    ad88:	1009883a 	mov	r4,r2
    ad8c:	94bffc04 	addi	r18,r18,-16
    ad90:	84800d0e 	bge	r16,r18,adc8 <___vfiprintf_internal_r+0xd34>
    ad94:	18c00404 	addi	r3,r3,16
    ad98:	20800044 	addi	r2,r4,1
    ad9c:	47000015 	stw	fp,0(r8)
    ada0:	44000115 	stw	r16,4(r8)
    ada4:	d8c11c15 	stw	r3,1136(sp)
    ada8:	d8811b15 	stw	r2,1132(sp)
    adac:	98bff40e 	bge	r19,r2,ad80 <__alt_data_end+0xfffb5650>
    adb0:	1800291e 	bne	r3,zero,ae58 <___vfiprintf_internal_r+0xdc4>
    adb4:	94bffc04 	addi	r18,r18,-16
    adb8:	0009883a 	mov	r4,zero
    adbc:	01400044 	movi	r5,1
    adc0:	d811883a 	mov	r8,sp
    adc4:	84bff316 	blt	r16,r18,ad94 <__alt_data_end+0xfffb5664>
    adc8:	d8812617 	ldw	r2,1176(sp)
    adcc:	1c87883a 	add	r3,r3,r18
    add0:	44800115 	stw	r18,4(r8)
    add4:	40800015 	stw	r2,0(r8)
    add8:	d8c11c15 	stw	r3,1136(sp)
    addc:	d9411b15 	stw	r5,1132(sp)
    ade0:	008001c4 	movi	r2,7
    ade4:	11400d0e 	bge	r2,r5,ae1c <___vfiprintf_internal_r+0xd88>
    ade8:	1800061e 	bne	r3,zero,ae04 <___vfiprintf_internal_r+0xd70>
    adec:	d8c12417 	ldw	r3,1168(sp)
    adf0:	a8c12e16 	blt	r21,r3,b2ac <___vfiprintf_internal_r+0x1218>
    adf4:	d9012517 	ldw	r4,1172(sp)
    adf8:	2549883a 	add	r4,r4,r21
    adfc:	d9012515 	stw	r4,1172(sp)
    ae00:	00001206 	br	ae4c <___vfiprintf_internal_r+0xdb8>
    ae04:	d9012117 	ldw	r4,1156(sp)
    ae08:	d9412017 	ldw	r5,1152(sp)
    ae0c:	d9811a04 	addi	r6,sp,1128
    ae10:	0009f800 	call	9f80 <__sprint_r.part.0>
    ae14:	103fbb1e 	bne	r2,zero,ad04 <__alt_data_end+0xfffb55d4>
    ae18:	d8c11c17 	ldw	r3,1136(sp)
    ae1c:	d8812417 	ldw	r2,1168(sp)
    ae20:	a880010e 	bge	r21,r2,ae28 <___vfiprintf_internal_r+0xd94>
    ae24:	102b883a 	mov	r21,r2
    ae28:	d9012517 	ldw	r4,1172(sp)
    ae2c:	2549883a 	add	r4,r4,r21
    ae30:	d9012515 	stw	r4,1172(sp)
    ae34:	18000526 	beq	r3,zero,ae4c <___vfiprintf_internal_r+0xdb8>
    ae38:	d9012117 	ldw	r4,1156(sp)
    ae3c:	d9412017 	ldw	r5,1152(sp)
    ae40:	d9811a04 	addi	r6,sp,1128
    ae44:	0009f800 	call	9f80 <__sprint_r.part.0>
    ae48:	103fae1e 	bne	r2,zero,ad04 <__alt_data_end+0xfffb55d4>
    ae4c:	d8011b15 	stw	zero,1132(sp)
    ae50:	d811883a 	mov	r8,sp
    ae54:	003cc706 	br	a174 <__alt_data_end+0xfffb4a44>
    ae58:	a009883a 	mov	r4,r20
    ae5c:	b00b883a 	mov	r5,r22
    ae60:	d9811a04 	addi	r6,sp,1128
    ae64:	0009f800 	call	9f80 <__sprint_r.part.0>
    ae68:	103fa61e 	bne	r2,zero,ad04 <__alt_data_end+0xfffb55d4>
    ae6c:	d9011b17 	ldw	r4,1132(sp)
    ae70:	d8c11c17 	ldw	r3,1136(sp)
    ae74:	d811883a 	mov	r8,sp
    ae78:	21400044 	addi	r5,r4,1
    ae7c:	003fc306 	br	ad8c <__alt_data_end+0xfffb565c>
    ae80:	d9012417 	ldw	r4,1168(sp)
    ae84:	256dc83a 	sub	r22,r4,r21
    ae88:	05be1f0e 	bge	zero,r22,a708 <__alt_data_end+0xfffb4fd8>
    ae8c:	04c00404 	movi	r19,16
    ae90:	9d81720e 	bge	r19,r22,b45c <___vfiprintf_internal_r+0x13c8>
    ae94:	00800074 	movhi	r2,1
    ae98:	10895e04 	addi	r2,r2,9592
    ae9c:	d8812615 	stw	r2,1176(sp)
    aea0:	028001c4 	movi	r10,7
    aea4:	00000506 	br	aebc <___vfiprintf_internal_r+0xe28>
    aea8:	29000084 	addi	r4,r5,2
    aeac:	42000204 	addi	r8,r8,8
    aeb0:	100b883a 	mov	r5,r2
    aeb4:	b5bffc04 	addi	r22,r22,-16
    aeb8:	9d800d0e 	bge	r19,r22,aef0 <___vfiprintf_internal_r+0xe5c>
    aebc:	18c00404 	addi	r3,r3,16
    aec0:	28800044 	addi	r2,r5,1
    aec4:	44400015 	stw	r17,0(r8)
    aec8:	44c00115 	stw	r19,4(r8)
    aecc:	d8c11c15 	stw	r3,1136(sp)
    aed0:	d8811b15 	stw	r2,1132(sp)
    aed4:	50bff40e 	bge	r10,r2,aea8 <__alt_data_end+0xfffb5778>
    aed8:	1800111e 	bne	r3,zero,af20 <___vfiprintf_internal_r+0xe8c>
    aedc:	b5bffc04 	addi	r22,r22,-16
    aee0:	000b883a 	mov	r5,zero
    aee4:	01000044 	movi	r4,1
    aee8:	d811883a 	mov	r8,sp
    aeec:	9dbff316 	blt	r19,r22,aebc <__alt_data_end+0xfffb578c>
    aef0:	d9412617 	ldw	r5,1176(sp)
    aef4:	1d87883a 	add	r3,r3,r22
    aef8:	45800115 	stw	r22,4(r8)
    aefc:	41400015 	stw	r5,0(r8)
    af00:	d8c11c15 	stw	r3,1136(sp)
    af04:	d9011b15 	stw	r4,1132(sp)
    af08:	008001c4 	movi	r2,7
    af0c:	11008516 	blt	r2,r4,b124 <___vfiprintf_internal_r+0x1090>
    af10:	42000204 	addi	r8,r8,8
    af14:	20800044 	addi	r2,r4,1
    af18:	200b883a 	mov	r5,r4
    af1c:	003dfa06 	br	a708 <__alt_data_end+0xfffb4fd8>
    af20:	d9012117 	ldw	r4,1156(sp)
    af24:	d9412017 	ldw	r5,1152(sp)
    af28:	d9811a04 	addi	r6,sp,1128
    af2c:	da812a15 	stw	r10,1192(sp)
    af30:	0009f800 	call	9f80 <__sprint_r.part.0>
    af34:	da812a17 	ldw	r10,1192(sp)
    af38:	103f721e 	bne	r2,zero,ad04 <__alt_data_end+0xfffb55d4>
    af3c:	d9411b17 	ldw	r5,1132(sp)
    af40:	d8c11c17 	ldw	r3,1136(sp)
    af44:	d811883a 	mov	r8,sp
    af48:	29000044 	addi	r4,r5,1
    af4c:	003fd906 	br	aeb4 <__alt_data_end+0xfffb5784>
    af50:	1800681e 	bne	r3,zero,b0f4 <___vfiprintf_internal_r+0x1060>
    af54:	50004d26 	beq	r10,zero,b08c <___vfiprintf_internal_r+0xff8>
    af58:	d8811d04 	addi	r2,sp,1140
    af5c:	00c00084 	movi	r3,2
    af60:	d8800015 	stw	r2,0(sp)
    af64:	d8c00115 	stw	r3,4(sp)
    af68:	2005883a 	mov	r2,r4
    af6c:	d811883a 	mov	r8,sp
    af70:	003de006 	br	a6f4 <__alt_data_end+0xfffb4fc4>
    af74:	1800551e 	bne	r3,zero,b0cc <___vfiprintf_internal_r+0x1038>
    af78:	000b883a 	mov	r5,zero
    af7c:	00800044 	movi	r2,1
    af80:	d811883a 	mov	r8,sp
    af84:	003dde06 	br	a700 <__alt_data_end+0xfffb4fd0>
    af88:	10803fcc 	andi	r2,r2,255
    af8c:	1000191e 	bne	r2,zero,aff4 <___vfiprintf_internal_r+0xf60>
    af90:	9080004c 	andi	r2,r18,1
    af94:	10001726 	beq	r2,zero,aff4 <___vfiprintf_internal_r+0xf60>
    af98:	00800c04 	movi	r2,48
    af9c:	d8c109c4 	addi	r3,sp,1063
    afa0:	d88109c5 	stb	r2,1063(sp)
    afa4:	dd012817 	ldw	r20,1184(sp)
    afa8:	d8c12215 	stw	r3,1160(sp)
    afac:	003d8a06 	br	a5d8 <__alt_data_end+0xfffb4ea8>
    afb0:	d9012717 	ldw	r4,1180(sp)
    afb4:	dd010a04 	addi	r20,sp,1064
    afb8:	988003cc 	andi	r2,r19,15
    afbc:	a806973a 	slli	r3,r21,28
    afc0:	2085883a 	add	r2,r4,r2
    afc4:	9826d13a 	srli	r19,r19,4
    afc8:	10800003 	ldbu	r2,0(r2)
    afcc:	a82ad13a 	srli	r21,r21,4
    afd0:	a53fffc4 	addi	r20,r20,-1
    afd4:	1ce6b03a 	or	r19,r3,r19
    afd8:	a0800005 	stb	r2,0(r20)
    afdc:	9d44b03a 	or	r2,r19,r21
    afe0:	103ff51e 	bne	r2,zero,afb8 <__alt_data_end+0xfffb5888>
    afe4:	d9411e17 	ldw	r5,1144(sp)
    afe8:	dd012215 	stw	r20,1160(sp)
    afec:	2d29c83a 	sub	r20,r5,r20
    aff0:	003d7906 	br	a5d8 <__alt_data_end+0xfffb4ea8>
    aff4:	d8c10a04 	addi	r3,sp,1064
    aff8:	d8c12215 	stw	r3,1160(sp)
    affc:	003d7606 	br	a5d8 <__alt_data_end+0xfffb4ea8>
    b000:	18009e1e 	bne	r3,zero,b27c <___vfiprintf_internal_r+0x11e8>
    b004:	d8811d87 	ldb	r2,1142(sp)
    b008:	10005f26 	beq	r2,zero,b188 <___vfiprintf_internal_r+0x10f4>
    b00c:	00c00044 	movi	r3,1
    b010:	d9011d84 	addi	r4,sp,1142
    b014:	1805883a 	mov	r2,r3
    b018:	d9000015 	stw	r4,0(sp)
    b01c:	d8c00115 	stw	r3,4(sp)
    b020:	d811883a 	mov	r8,sp
    b024:	003efc06 	br	ac18 <__alt_data_end+0xfffb54e8>
    b028:	d9412417 	ldw	r5,1168(sp)
    b02c:	d811883a 	mov	r8,sp
    b030:	2d65c83a 	sub	r18,r5,r21
    b034:	04bf4816 	blt	zero,r18,ad58 <__alt_data_end+0xfffb5628>
    b038:	003f6c06 	br	adec <__alt_data_end+0xfffb56bc>
    b03c:	b829883a 	mov	r20,r23
    b040:	003c6906 	br	a1e8 <__alt_data_end+0xfffb4ab8>
    b044:	d9012117 	ldw	r4,1156(sp)
    b048:	d9412017 	ldw	r5,1152(sp)
    b04c:	d9811a04 	addi	r6,sp,1128
    b050:	0009f800 	call	9f80 <__sprint_r.part.0>
    b054:	103f2b1e 	bne	r2,zero,ad04 <__alt_data_end+0xfffb55d4>
    b058:	d8c11c17 	ldw	r3,1136(sp)
    b05c:	d811883a 	mov	r8,sp
    b060:	003f3806 	br	ad44 <__alt_data_end+0xfffb5614>
    b064:	00800084 	movi	r2,2
    b068:	9d46b03a 	or	r3,r19,r21
    b06c:	003df606 	br	a848 <__alt_data_end+0xfffb5118>
    b070:	d9012117 	ldw	r4,1156(sp)
    b074:	d9412017 	ldw	r5,1152(sp)
    b078:	d9811a04 	addi	r6,sp,1128
    b07c:	0009f800 	call	9f80 <__sprint_r.part.0>
    b080:	103f201e 	bne	r2,zero,ad04 <__alt_data_end+0xfffb55d4>
    b084:	d811883a 	mov	r8,sp
    b088:	003cc606 	br	a3a4 <__alt_data_end+0xfffb4c74>
    b08c:	000b883a 	mov	r5,zero
    b090:	2005883a 	mov	r2,r4
    b094:	d811883a 	mov	r8,sp
    b098:	003d9906 	br	a700 <__alt_data_end+0xfffb4fd0>
    b09c:	10803fcc 	andi	r2,r2,255
    b0a0:	1080201c 	xori	r2,r2,128
    b0a4:	10bfe004 	addi	r2,r2,-128
    b0a8:	01000c04 	movi	r4,48
    b0ac:	1100b226 	beq	r2,r4,b378 <___vfiprintf_internal_r+0x12e4>
    b0b0:	d9412217 	ldw	r5,1160(sp)
    b0b4:	d8811e17 	ldw	r2,1144(sp)
    b0b8:	193fffc5 	stb	r4,-1(r3)
    b0bc:	297fffc4 	addi	r5,r5,-1
    b0c0:	d9412215 	stw	r5,1160(sp)
    b0c4:	1169c83a 	sub	r20,r2,r5
    b0c8:	003d4306 	br	a5d8 <__alt_data_end+0xfffb4ea8>
    b0cc:	d9012117 	ldw	r4,1156(sp)
    b0d0:	d9412017 	ldw	r5,1152(sp)
    b0d4:	d9811a04 	addi	r6,sp,1128
    b0d8:	0009f800 	call	9f80 <__sprint_r.part.0>
    b0dc:	103f091e 	bne	r2,zero,ad04 <__alt_data_end+0xfffb55d4>
    b0e0:	d9411b17 	ldw	r5,1132(sp)
    b0e4:	d8c11c17 	ldw	r3,1136(sp)
    b0e8:	d811883a 	mov	r8,sp
    b0ec:	28800044 	addi	r2,r5,1
    b0f0:	003d8306 	br	a700 <__alt_data_end+0xfffb4fd0>
    b0f4:	d9012117 	ldw	r4,1156(sp)
    b0f8:	d9412017 	ldw	r5,1152(sp)
    b0fc:	d9811a04 	addi	r6,sp,1128
    b100:	da812a15 	stw	r10,1192(sp)
    b104:	0009f800 	call	9f80 <__sprint_r.part.0>
    b108:	da812a17 	ldw	r10,1192(sp)
    b10c:	103efd1e 	bne	r2,zero,ad04 <__alt_data_end+0xfffb55d4>
    b110:	d9411b17 	ldw	r5,1132(sp)
    b114:	d8c11c17 	ldw	r3,1136(sp)
    b118:	d811883a 	mov	r8,sp
    b11c:	28800044 	addi	r2,r5,1
    b120:	003d6a06 	br	a6cc <__alt_data_end+0xfffb4f9c>
    b124:	1800a01e 	bne	r3,zero,b3a8 <___vfiprintf_internal_r+0x1314>
    b128:	000b883a 	mov	r5,zero
    b12c:	00800044 	movi	r2,1
    b130:	d811883a 	mov	r8,sp
    b134:	003d7406 	br	a708 <__alt_data_end+0xfffb4fd8>
    b138:	d9012117 	ldw	r4,1156(sp)
    b13c:	d9412017 	ldw	r5,1152(sp)
    b140:	d9811a04 	addi	r6,sp,1128
    b144:	0009f800 	call	9f80 <__sprint_r.part.0>
    b148:	103eee1e 	bne	r2,zero,ad04 <__alt_data_end+0xfffb55d4>
    b14c:	d8811b17 	ldw	r2,1132(sp)
    b150:	d8c11c17 	ldw	r3,1136(sp)
    b154:	d811883a 	mov	r8,sp
    b158:	10800044 	addi	r2,r2,1
    b15c:	003d8f06 	br	a79c <__alt_data_end+0xfffb506c>
    b160:	04e7c83a 	sub	r19,zero,r19
    b164:	9804c03a 	cmpne	r2,r19,zero
    b168:	056bc83a 	sub	r21,zero,r21
    b16c:	a8abc83a 	sub	r21,r21,r2
    b170:	05800b44 	movi	r22,45
    b174:	dd811d85 	stb	r22,1142(sp)
    b178:	8029883a 	mov	r20,r16
    b17c:	00800044 	movi	r2,1
    b180:	9d46b03a 	or	r3,r19,r21
    b184:	003cfa06 	br	a570 <__alt_data_end+0xfffb4e40>
    b188:	000b883a 	mov	r5,zero
    b18c:	00800044 	movi	r2,1
    b190:	d811883a 	mov	r8,sp
    b194:	503d5a26 	beq	r10,zero,a700 <__alt_data_end+0xfffb4fd0>
    b198:	00c00084 	movi	r3,2
    b19c:	d9011d04 	addi	r4,sp,1140
    b1a0:	d9000015 	stw	r4,0(sp)
    b1a4:	d8c00115 	stw	r3,4(sp)
    b1a8:	003d5206 	br	a6f4 <__alt_data_end+0xfffb4fc4>
    b1ac:	9080040c 	andi	r2,r18,16
    b1b0:	1000421e 	bne	r2,zero,b2bc <___vfiprintf_internal_r+0x1228>
    b1b4:	9480100c 	andi	r18,r18,64
    b1b8:	90009c26 	beq	r18,zero,b42c <___vfiprintf_internal_r+0x1398>
    b1bc:	d9412317 	ldw	r5,1164(sp)
    b1c0:	d8c12517 	ldw	r3,1172(sp)
    b1c4:	28800017 	ldw	r2,0(r5)
    b1c8:	29400104 	addi	r5,r5,4
    b1cc:	d9412315 	stw	r5,1164(sp)
    b1d0:	10c0000d 	sth	r3,0(r2)
    b1d4:	003be706 	br	a174 <__alt_data_end+0xfffb4a44>
    b1d8:	90c0100c 	andi	r3,r18,64
    b1dc:	18003e26 	beq	r3,zero,b2d8 <___vfiprintf_internal_r+0x1244>
    b1e0:	d8c12317 	ldw	r3,1164(sp)
    b1e4:	14c0000b 	ldhu	r19,0(r2)
    b1e8:	002b883a 	mov	r21,zero
    b1ec:	18c00104 	addi	r3,r3,4
    b1f0:	d8c12315 	stw	r3,1164(sp)
    b1f4:	003db706 	br	a8d4 <__alt_data_end+0xfffb51a4>
    b1f8:	9080100c 	andi	r2,r18,64
    b1fc:	10004c26 	beq	r2,zero,b330 <___vfiprintf_internal_r+0x129c>
    b200:	1cc0000f 	ldh	r19,0(r3)
    b204:	d8812317 	ldw	r2,1164(sp)
    b208:	982bd7fa 	srai	r21,r19,31
    b20c:	10800104 	addi	r2,r2,4
    b210:	d8812315 	stw	r2,1164(sp)
    b214:	a805883a 	mov	r2,r21
    b218:	003cd006 	br	a55c <__alt_data_end+0xfffb4e2c>
    b21c:	00800084 	movi	r2,2
    b220:	003d8906 	br	a848 <__alt_data_end+0xfffb5118>
    b224:	b9800007 	ldb	r6,0(r23)
    b228:	003bfb06 	br	a218 <__alt_data_end+0xfffb4ae8>
    b22c:	9080100c 	andi	r2,r18,64
    b230:	10003726 	beq	r2,zero,b310 <___vfiprintf_internal_r+0x127c>
    b234:	d9412317 	ldw	r5,1164(sp)
    b238:	002b883a 	mov	r21,zero
    b23c:	0005883a 	mov	r2,zero
    b240:	2cc0000b 	ldhu	r19,0(r5)
    b244:	29400104 	addi	r5,r5,4
    b248:	d9412315 	stw	r5,1164(sp)
    b24c:	9807883a 	mov	r3,r19
    b250:	003d7d06 	br	a848 <__alt_data_end+0xfffb5118>
    b254:	9080100c 	andi	r2,r18,64
    b258:	10002526 	beq	r2,zero,b2f0 <___vfiprintf_internal_r+0x125c>
    b25c:	d8812317 	ldw	r2,1164(sp)
    b260:	002b883a 	mov	r21,zero
    b264:	14c0000b 	ldhu	r19,0(r2)
    b268:	10800104 	addi	r2,r2,4
    b26c:	d8812315 	stw	r2,1164(sp)
    b270:	9807883a 	mov	r3,r19
    b274:	00800044 	movi	r2,1
    b278:	003d7306 	br	a848 <__alt_data_end+0xfffb5118>
    b27c:	d9012117 	ldw	r4,1156(sp)
    b280:	d9412017 	ldw	r5,1152(sp)
    b284:	d9811a04 	addi	r6,sp,1128
    b288:	da812a15 	stw	r10,1192(sp)
    b28c:	0009f800 	call	9f80 <__sprint_r.part.0>
    b290:	da812a17 	ldw	r10,1192(sp)
    b294:	103e9b1e 	bne	r2,zero,ad04 <__alt_data_end+0xfffb55d4>
    b298:	d9411b17 	ldw	r5,1132(sp)
    b29c:	d8c11c17 	ldw	r3,1136(sp)
    b2a0:	d811883a 	mov	r8,sp
    b2a4:	28800044 	addi	r2,r5,1
    b2a8:	003e5006 	br	abec <__alt_data_end+0xfffb54bc>
    b2ac:	182b883a 	mov	r21,r3
    b2b0:	003ed006 	br	adf4 <__alt_data_end+0xfffb56c4>
    b2b4:	8029883a 	mov	r20,r16
    b2b8:	003dc606 	br	a9d4 <__alt_data_end+0xfffb52a4>
    b2bc:	d8c12317 	ldw	r3,1164(sp)
    b2c0:	d9012517 	ldw	r4,1172(sp)
    b2c4:	18800017 	ldw	r2,0(r3)
    b2c8:	18c00104 	addi	r3,r3,4
    b2cc:	d8c12315 	stw	r3,1164(sp)
    b2d0:	11000015 	stw	r4,0(r2)
    b2d4:	003ba706 	br	a174 <__alt_data_end+0xfffb4a44>
    b2d8:	d9012317 	ldw	r4,1164(sp)
    b2dc:	14c00017 	ldw	r19,0(r2)
    b2e0:	002b883a 	mov	r21,zero
    b2e4:	21000104 	addi	r4,r4,4
    b2e8:	d9012315 	stw	r4,1164(sp)
    b2ec:	003d7906 	br	a8d4 <__alt_data_end+0xfffb51a4>
    b2f0:	d8c12317 	ldw	r3,1164(sp)
    b2f4:	002b883a 	mov	r21,zero
    b2f8:	00800044 	movi	r2,1
    b2fc:	1cc00017 	ldw	r19,0(r3)
    b300:	18c00104 	addi	r3,r3,4
    b304:	d8c12315 	stw	r3,1164(sp)
    b308:	9807883a 	mov	r3,r19
    b30c:	003d4e06 	br	a848 <__alt_data_end+0xfffb5118>
    b310:	d8812317 	ldw	r2,1164(sp)
    b314:	002b883a 	mov	r21,zero
    b318:	14c00017 	ldw	r19,0(r2)
    b31c:	10800104 	addi	r2,r2,4
    b320:	d8812315 	stw	r2,1164(sp)
    b324:	9807883a 	mov	r3,r19
    b328:	0005883a 	mov	r2,zero
    b32c:	003d4606 	br	a848 <__alt_data_end+0xfffb5118>
    b330:	1cc00017 	ldw	r19,0(r3)
    b334:	d8c12317 	ldw	r3,1164(sp)
    b338:	982bd7fa 	srai	r21,r19,31
    b33c:	18c00104 	addi	r3,r3,4
    b340:	d8c12315 	stw	r3,1164(sp)
    b344:	a805883a 	mov	r2,r21
    b348:	003c8406 	br	a55c <__alt_data_end+0xfffb4e2c>
    b34c:	01000074 	movhi	r4,1
    b350:	21095e04 	addi	r4,r4,9592
    b354:	d9012615 	stw	r4,1176(sp)
    b358:	003d0606 	br	a774 <__alt_data_end+0xfffb5044>
    b35c:	b9800043 	ldbu	r6,1(r23)
    b360:	94800814 	ori	r18,r18,32
    b364:	bdc00044 	addi	r23,r23,1
    b368:	31803fcc 	andi	r6,r6,255
    b36c:	3180201c 	xori	r6,r6,128
    b370:	31bfe004 	addi	r6,r6,-128
    b374:	003ba806 	br	a218 <__alt_data_end+0xfffb4ae8>
    b378:	d8811e17 	ldw	r2,1144(sp)
    b37c:	d8c12217 	ldw	r3,1160(sp)
    b380:	10e9c83a 	sub	r20,r2,r3
    b384:	003c9406 	br	a5d8 <__alt_data_end+0xfffb4ea8>
    b388:	da012a15 	stw	r8,1192(sp)
    b38c:	00033a00 	call	33a0 <strlen>
    b390:	1029883a 	mov	r20,r2
    b394:	dd811d83 	ldbu	r22,1142(sp)
    b398:	dcc12315 	stw	r19,1164(sp)
    b39c:	0021883a 	mov	r16,zero
    b3a0:	da012a17 	ldw	r8,1192(sp)
    b3a4:	003c8c06 	br	a5d8 <__alt_data_end+0xfffb4ea8>
    b3a8:	d9012117 	ldw	r4,1156(sp)
    b3ac:	d9412017 	ldw	r5,1152(sp)
    b3b0:	d9811a04 	addi	r6,sp,1128
    b3b4:	0009f800 	call	9f80 <__sprint_r.part.0>
    b3b8:	103e521e 	bne	r2,zero,ad04 <__alt_data_end+0xfffb55d4>
    b3bc:	d9411b17 	ldw	r5,1132(sp)
    b3c0:	d8c11c17 	ldw	r3,1136(sp)
    b3c4:	d811883a 	mov	r8,sp
    b3c8:	28800044 	addi	r2,r5,1
    b3cc:	003cce06 	br	a708 <__alt_data_end+0xfffb4fd8>
    b3d0:	01400074 	movhi	r5,1
    b3d4:	29496204 	addi	r5,r5,9608
    b3d8:	d9412615 	stw	r5,1176(sp)
    b3dc:	d9411b17 	ldw	r5,1132(sp)
    b3e0:	29400044 	addi	r5,r5,1
    b3e4:	003cad06 	br	a69c <__alt_data_end+0xfffb4f6c>
    b3e8:	00800184 	movi	r2,6
    b3ec:	1400012e 	bgeu	r2,r16,b3f4 <___vfiprintf_internal_r+0x1360>
    b3f0:	1021883a 	mov	r16,r2
    b3f4:	8029883a 	mov	r20,r16
    b3f8:	802b883a 	mov	r21,r16
    b3fc:	80001c16 	blt	r16,zero,b470 <___vfiprintf_internal_r+0x13dc>
    b400:	00c00074 	movhi	r3,1
    b404:	18c90204 	addi	r3,r3,9224
    b408:	dcc12315 	stw	r19,1164(sp)
    b40c:	d8c12215 	stw	r3,1160(sp)
    b410:	003cff06 	br	a810 <__alt_data_end+0xfffb50e0>
    b414:	d9411b17 	ldw	r5,1132(sp)
    b418:	00800074 	movhi	r2,1
    b41c:	10896204 	addi	r2,r2,9608
    b420:	d8812615 	stw	r2,1176(sp)
    b424:	29400044 	addi	r5,r5,1
    b428:	003e6706 	br	adc8 <__alt_data_end+0xfffb5698>
    b42c:	d9012317 	ldw	r4,1164(sp)
    b430:	d9412517 	ldw	r5,1172(sp)
    b434:	20800017 	ldw	r2,0(r4)
    b438:	21000104 	addi	r4,r4,4
    b43c:	d9012315 	stw	r4,1164(sp)
    b440:	11400015 	stw	r5,0(r2)
    b444:	003b4b06 	br	a174 <__alt_data_end+0xfffb4a44>
    b448:	8029883a 	mov	r20,r16
    b44c:	dd811d83 	ldbu	r22,1142(sp)
    b450:	dcc12315 	stw	r19,1164(sp)
    b454:	0021883a 	mov	r16,zero
    b458:	003c5f06 	br	a5d8 <__alt_data_end+0xfffb4ea8>
    b45c:	01000074 	movhi	r4,1
    b460:	21095e04 	addi	r4,r4,9592
    b464:	d9012615 	stw	r4,1176(sp)
    b468:	1009883a 	mov	r4,r2
    b46c:	003ea006 	br	aef0 <__alt_data_end+0xfffb57c0>
    b470:	002b883a 	mov	r21,zero
    b474:	003fe206 	br	b400 <__alt_data_end+0xfffb5cd0>
    b478:	d9412317 	ldw	r5,1164(sp)
    b47c:	b807883a 	mov	r3,r23
    b480:	102f883a 	mov	r23,r2
    b484:	2c000017 	ldw	r16,0(r5)
    b488:	29000104 	addi	r4,r5,4
    b48c:	d9012315 	stw	r4,1164(sp)
    b490:	80000416 	blt	r16,zero,b4a4 <___vfiprintf_internal_r+0x1410>
    b494:	19800047 	ldb	r6,1(r3)
    b498:	003b5f06 	br	a218 <__alt_data_end+0xfffb4ae8>
    b49c:	043fffc4 	movi	r16,-1
    b4a0:	003bef06 	br	a460 <__alt_data_end+0xfffb4d30>
    b4a4:	043fffc4 	movi	r16,-1
    b4a8:	19800047 	ldb	r6,1(r3)
    b4ac:	003b5a06 	br	a218 <__alt_data_end+0xfffb4ae8>
    b4b0:	282b883a 	mov	r21,r5
    b4b4:	003cc706 	br	a7d4 <__alt_data_end+0xfffb50a4>

0000b4b8 <__vfiprintf_internal>:
    b4b8:	2007883a 	mov	r3,r4
    b4bc:	01000074 	movhi	r4,1
    b4c0:	21106104 	addi	r4,r4,16772
    b4c4:	21000017 	ldw	r4,0(r4)
    b4c8:	2805883a 	mov	r2,r5
    b4cc:	300f883a 	mov	r7,r6
    b4d0:	180b883a 	mov	r5,r3
    b4d4:	100d883a 	mov	r6,r2
    b4d8:	000a0941 	jmpi	a094 <___vfiprintf_internal_r>

0000b4dc <_write_r>:
    b4dc:	defffd04 	addi	sp,sp,-12
    b4e0:	dc000015 	stw	r16,0(sp)
    b4e4:	04000074 	movhi	r16,1
    b4e8:	dc400115 	stw	r17,4(sp)
    b4ec:	84173404 	addi	r16,r16,23760
    b4f0:	2023883a 	mov	r17,r4
    b4f4:	2809883a 	mov	r4,r5
    b4f8:	300b883a 	mov	r5,r6
    b4fc:	380d883a 	mov	r6,r7
    b500:	dfc00215 	stw	ra,8(sp)
    b504:	80000015 	stw	zero,0(r16)
    b508:	000fcf80 	call	fcf8 <write>
    b50c:	00ffffc4 	movi	r3,-1
    b510:	10c00526 	beq	r2,r3,b528 <_write_r+0x4c>
    b514:	dfc00217 	ldw	ra,8(sp)
    b518:	dc400117 	ldw	r17,4(sp)
    b51c:	dc000017 	ldw	r16,0(sp)
    b520:	dec00304 	addi	sp,sp,12
    b524:	f800283a 	ret
    b528:	80c00017 	ldw	r3,0(r16)
    b52c:	183ff926 	beq	r3,zero,b514 <__alt_data_end+0xfffb5de4>
    b530:	88c00015 	stw	r3,0(r17)
    b534:	003ff706 	br	b514 <__alt_data_end+0xfffb5de4>

0000b538 <_close_r>:
    b538:	defffd04 	addi	sp,sp,-12
    b53c:	dc000015 	stw	r16,0(sp)
    b540:	04000074 	movhi	r16,1
    b544:	dc400115 	stw	r17,4(sp)
    b548:	84173404 	addi	r16,r16,23760
    b54c:	2023883a 	mov	r17,r4
    b550:	2809883a 	mov	r4,r5
    b554:	dfc00215 	stw	ra,8(sp)
    b558:	80000015 	stw	zero,0(r16)
    b55c:	000f4240 	call	f424 <close>
    b560:	00ffffc4 	movi	r3,-1
    b564:	10c00526 	beq	r2,r3,b57c <_close_r+0x44>
    b568:	dfc00217 	ldw	ra,8(sp)
    b56c:	dc400117 	ldw	r17,4(sp)
    b570:	dc000017 	ldw	r16,0(sp)
    b574:	dec00304 	addi	sp,sp,12
    b578:	f800283a 	ret
    b57c:	80c00017 	ldw	r3,0(r16)
    b580:	183ff926 	beq	r3,zero,b568 <__alt_data_end+0xfffb5e38>
    b584:	88c00015 	stw	r3,0(r17)
    b588:	003ff706 	br	b568 <__alt_data_end+0xfffb5e38>

0000b58c <_calloc_r>:
    b58c:	defffe04 	addi	sp,sp,-8
    b590:	dc000015 	stw	r16,0(sp)
    b594:	2021883a 	mov	r16,r4
    b598:	2809883a 	mov	r4,r5
    b59c:	300b883a 	mov	r5,r6
    b5a0:	dfc00115 	stw	ra,4(sp)
    b5a4:	000cbb00 	call	cbb0 <__mulsi3>
    b5a8:	8009883a 	mov	r4,r16
    b5ac:	100b883a 	mov	r5,r2
    b5b0:	0002a700 	call	2a70 <_malloc_r>
    b5b4:	1021883a 	mov	r16,r2
    b5b8:	10002826 	beq	r2,zero,b65c <_calloc_r+0xd0>
    b5bc:	11bfff17 	ldw	r6,-4(r2)
    b5c0:	00bfff04 	movi	r2,-4
    b5c4:	00c00904 	movi	r3,36
    b5c8:	308c703a 	and	r6,r6,r2
    b5cc:	308d883a 	add	r6,r6,r2
    b5d0:	19801436 	bltu	r3,r6,b624 <_calloc_r+0x98>
    b5d4:	008004c4 	movi	r2,19
    b5d8:	11800936 	bltu	r2,r6,b600 <_calloc_r+0x74>
    b5dc:	8005883a 	mov	r2,r16
    b5e0:	10000015 	stw	zero,0(r2)
    b5e4:	10000115 	stw	zero,4(r2)
    b5e8:	10000215 	stw	zero,8(r2)
    b5ec:	8005883a 	mov	r2,r16
    b5f0:	dfc00117 	ldw	ra,4(sp)
    b5f4:	dc000017 	ldw	r16,0(sp)
    b5f8:	dec00204 	addi	sp,sp,8
    b5fc:	f800283a 	ret
    b600:	80000015 	stw	zero,0(r16)
    b604:	80000115 	stw	zero,4(r16)
    b608:	008006c4 	movi	r2,27
    b60c:	11800d2e 	bgeu	r2,r6,b644 <_calloc_r+0xb8>
    b610:	80000215 	stw	zero,8(r16)
    b614:	80000315 	stw	zero,12(r16)
    b618:	30c00c26 	beq	r6,r3,b64c <_calloc_r+0xc0>
    b61c:	80800404 	addi	r2,r16,16
    b620:	003fef06 	br	b5e0 <__alt_data_end+0xfffb5eb0>
    b624:	8009883a 	mov	r4,r16
    b628:	000b883a 	mov	r5,zero
    b62c:	00086200 	call	8620 <memset>
    b630:	8005883a 	mov	r2,r16
    b634:	dfc00117 	ldw	ra,4(sp)
    b638:	dc000017 	ldw	r16,0(sp)
    b63c:	dec00204 	addi	sp,sp,8
    b640:	f800283a 	ret
    b644:	80800204 	addi	r2,r16,8
    b648:	003fe506 	br	b5e0 <__alt_data_end+0xfffb5eb0>
    b64c:	80000415 	stw	zero,16(r16)
    b650:	80800604 	addi	r2,r16,24
    b654:	80000515 	stw	zero,20(r16)
    b658:	003fe106 	br	b5e0 <__alt_data_end+0xfffb5eb0>
    b65c:	0005883a 	mov	r2,zero
    b660:	003fe306 	br	b5f0 <__alt_data_end+0xfffb5ec0>

0000b664 <_fclose_r>:
    b664:	28003226 	beq	r5,zero,b730 <_fclose_r+0xcc>
    b668:	defffc04 	addi	sp,sp,-16
    b66c:	dc400115 	stw	r17,4(sp)
    b670:	2023883a 	mov	r17,r4
    b674:	dc000015 	stw	r16,0(sp)
    b678:	dfc00315 	stw	ra,12(sp)
    b67c:	dc800215 	stw	r18,8(sp)
    b680:	2821883a 	mov	r16,r5
    b684:	00075a40 	call	75a4 <__sfp_lock_acquire>
    b688:	88000226 	beq	r17,zero,b694 <_fclose_r+0x30>
    b68c:	88800e17 	ldw	r2,56(r17)
    b690:	10002926 	beq	r2,zero,b738 <_fclose_r+0xd4>
    b694:	8080030f 	ldh	r2,12(r16)
    b698:	10002226 	beq	r2,zero,b724 <_fclose_r+0xc0>
    b69c:	8809883a 	mov	r4,r17
    b6a0:	800b883a 	mov	r5,r16
    b6a4:	0006fd80 	call	6fd8 <_fflush_r>
    b6a8:	1025883a 	mov	r18,r2
    b6ac:	80800b17 	ldw	r2,44(r16)
    b6b0:	10000426 	beq	r2,zero,b6c4 <_fclose_r+0x60>
    b6b4:	81400717 	ldw	r5,28(r16)
    b6b8:	8809883a 	mov	r4,r17
    b6bc:	103ee83a 	callr	r2
    b6c0:	10002616 	blt	r2,zero,b75c <_fclose_r+0xf8>
    b6c4:	8080030b 	ldhu	r2,12(r16)
    b6c8:	1080200c 	andi	r2,r2,128
    b6cc:	10001f1e 	bne	r2,zero,b74c <_fclose_r+0xe8>
    b6d0:	81400c17 	ldw	r5,48(r16)
    b6d4:	28000526 	beq	r5,zero,b6ec <_fclose_r+0x88>
    b6d8:	80801004 	addi	r2,r16,64
    b6dc:	28800226 	beq	r5,r2,b6e8 <_fclose_r+0x84>
    b6e0:	8809883a 	mov	r4,r17
    b6e4:	00077080 	call	7708 <_free_r>
    b6e8:	80000c15 	stw	zero,48(r16)
    b6ec:	81401117 	ldw	r5,68(r16)
    b6f0:	28000326 	beq	r5,zero,b700 <_fclose_r+0x9c>
    b6f4:	8809883a 	mov	r4,r17
    b6f8:	00077080 	call	7708 <_free_r>
    b6fc:	80001115 	stw	zero,68(r16)
    b700:	8000030d 	sth	zero,12(r16)
    b704:	00075a80 	call	75a8 <__sfp_lock_release>
    b708:	9005883a 	mov	r2,r18
    b70c:	dfc00317 	ldw	ra,12(sp)
    b710:	dc800217 	ldw	r18,8(sp)
    b714:	dc400117 	ldw	r17,4(sp)
    b718:	dc000017 	ldw	r16,0(sp)
    b71c:	dec00404 	addi	sp,sp,16
    b720:	f800283a 	ret
    b724:	00075a80 	call	75a8 <__sfp_lock_release>
    b728:	0005883a 	mov	r2,zero
    b72c:	003ff706 	br	b70c <__alt_data_end+0xfffb5fdc>
    b730:	0005883a 	mov	r2,zero
    b734:	f800283a 	ret
    b738:	8809883a 	mov	r4,r17
    b73c:	00075940 	call	7594 <__sinit>
    b740:	8080030f 	ldh	r2,12(r16)
    b744:	103fd51e 	bne	r2,zero,b69c <__alt_data_end+0xfffb5f6c>
    b748:	003ff606 	br	b724 <__alt_data_end+0xfffb5ff4>
    b74c:	81400417 	ldw	r5,16(r16)
    b750:	8809883a 	mov	r4,r17
    b754:	00077080 	call	7708 <_free_r>
    b758:	003fdd06 	br	b6d0 <__alt_data_end+0xfffb5fa0>
    b75c:	04bfffc4 	movi	r18,-1
    b760:	003fd806 	br	b6c4 <__alt_data_end+0xfffb5f94>

0000b764 <fclose>:
    b764:	00800074 	movhi	r2,1
    b768:	10906104 	addi	r2,r2,16772
    b76c:	200b883a 	mov	r5,r4
    b770:	11000017 	ldw	r4,0(r2)
    b774:	000b6641 	jmpi	b664 <_fclose_r>

0000b778 <_fputwc_r>:
    b778:	3080030b 	ldhu	r2,12(r6)
    b77c:	defff804 	addi	sp,sp,-32
    b780:	dcc00415 	stw	r19,16(sp)
    b784:	dc800315 	stw	r18,12(sp)
    b788:	dc000115 	stw	r16,4(sp)
    b78c:	dfc00715 	stw	ra,28(sp)
    b790:	dd400615 	stw	r21,24(sp)
    b794:	dd000515 	stw	r20,20(sp)
    b798:	dc400215 	stw	r17,8(sp)
    b79c:	10c8000c 	andi	r3,r2,8192
    b7a0:	3021883a 	mov	r16,r6
    b7a4:	2027883a 	mov	r19,r4
    b7a8:	2825883a 	mov	r18,r5
    b7ac:	1800051e 	bne	r3,zero,b7c4 <_fputwc_r+0x4c>
    b7b0:	30c01917 	ldw	r3,100(r6)
    b7b4:	10880014 	ori	r2,r2,8192
    b7b8:	3080030d 	sth	r2,12(r6)
    b7bc:	18880014 	ori	r2,r3,8192
    b7c0:	30801915 	stw	r2,100(r6)
    b7c4:	00080940 	call	8094 <__locale_mb_cur_max>
    b7c8:	00c00044 	movi	r3,1
    b7cc:	10c03e26 	beq	r2,r3,b8c8 <_fputwc_r+0x150>
    b7d0:	9809883a 	mov	r4,r19
    b7d4:	d80b883a 	mov	r5,sp
    b7d8:	900d883a 	mov	r6,r18
    b7dc:	81c01704 	addi	r7,r16,92
    b7e0:	000bc280 	call	bc28 <_wcrtomb_r>
    b7e4:	1029883a 	mov	r20,r2
    b7e8:	00bfffc4 	movi	r2,-1
    b7ec:	a0802026 	beq	r20,r2,b870 <_fputwc_r+0xf8>
    b7f0:	d9400003 	ldbu	r5,0(sp)
    b7f4:	a0001c26 	beq	r20,zero,b868 <_fputwc_r+0xf0>
    b7f8:	0023883a 	mov	r17,zero
    b7fc:	05400284 	movi	r21,10
    b800:	00000906 	br	b828 <_fputwc_r+0xb0>
    b804:	80800017 	ldw	r2,0(r16)
    b808:	11400005 	stb	r5,0(r2)
    b80c:	80c00017 	ldw	r3,0(r16)
    b810:	18c00044 	addi	r3,r3,1
    b814:	80c00015 	stw	r3,0(r16)
    b818:	8c400044 	addi	r17,r17,1
    b81c:	dc45883a 	add	r2,sp,r17
    b820:	8d00112e 	bgeu	r17,r20,b868 <_fputwc_r+0xf0>
    b824:	11400003 	ldbu	r5,0(r2)
    b828:	80c00217 	ldw	r3,8(r16)
    b82c:	18ffffc4 	addi	r3,r3,-1
    b830:	80c00215 	stw	r3,8(r16)
    b834:	183ff30e 	bge	r3,zero,b804 <__alt_data_end+0xfffb60d4>
    b838:	80800617 	ldw	r2,24(r16)
    b83c:	18801916 	blt	r3,r2,b8a4 <_fputwc_r+0x12c>
    b840:	80800017 	ldw	r2,0(r16)
    b844:	11400005 	stb	r5,0(r2)
    b848:	80800017 	ldw	r2,0(r16)
    b84c:	10c00003 	ldbu	r3,0(r2)
    b850:	10800044 	addi	r2,r2,1
    b854:	1d402326 	beq	r3,r21,b8e4 <_fputwc_r+0x16c>
    b858:	80800015 	stw	r2,0(r16)
    b85c:	8c400044 	addi	r17,r17,1
    b860:	dc45883a 	add	r2,sp,r17
    b864:	8d3fef36 	bltu	r17,r20,b824 <__alt_data_end+0xfffb60f4>
    b868:	9005883a 	mov	r2,r18
    b86c:	00000406 	br	b880 <_fputwc_r+0x108>
    b870:	80c0030b 	ldhu	r3,12(r16)
    b874:	a005883a 	mov	r2,r20
    b878:	18c01014 	ori	r3,r3,64
    b87c:	80c0030d 	sth	r3,12(r16)
    b880:	dfc00717 	ldw	ra,28(sp)
    b884:	dd400617 	ldw	r21,24(sp)
    b888:	dd000517 	ldw	r20,20(sp)
    b88c:	dcc00417 	ldw	r19,16(sp)
    b890:	dc800317 	ldw	r18,12(sp)
    b894:	dc400217 	ldw	r17,8(sp)
    b898:	dc000117 	ldw	r16,4(sp)
    b89c:	dec00804 	addi	sp,sp,32
    b8a0:	f800283a 	ret
    b8a4:	9809883a 	mov	r4,r19
    b8a8:	29403fcc 	andi	r5,r5,255
    b8ac:	800d883a 	mov	r6,r16
    b8b0:	000bab80 	call	bab8 <__swbuf_r>
    b8b4:	10bfffe0 	cmpeqi	r2,r2,-1
    b8b8:	10803fcc 	andi	r2,r2,255
    b8bc:	103fd626 	beq	r2,zero,b818 <__alt_data_end+0xfffb60e8>
    b8c0:	00bfffc4 	movi	r2,-1
    b8c4:	003fee06 	br	b880 <__alt_data_end+0xfffb6150>
    b8c8:	90ffffc4 	addi	r3,r18,-1
    b8cc:	01003f84 	movi	r4,254
    b8d0:	20ffbf36 	bltu	r4,r3,b7d0 <__alt_data_end+0xfffb60a0>
    b8d4:	900b883a 	mov	r5,r18
    b8d8:	dc800005 	stb	r18,0(sp)
    b8dc:	1029883a 	mov	r20,r2
    b8e0:	003fc506 	br	b7f8 <__alt_data_end+0xfffb60c8>
    b8e4:	9809883a 	mov	r4,r19
    b8e8:	a80b883a 	mov	r5,r21
    b8ec:	800d883a 	mov	r6,r16
    b8f0:	000bab80 	call	bab8 <__swbuf_r>
    b8f4:	10bfffe0 	cmpeqi	r2,r2,-1
    b8f8:	003fef06 	br	b8b8 <__alt_data_end+0xfffb6188>

0000b8fc <fputwc>:
    b8fc:	defffc04 	addi	sp,sp,-16
    b900:	dc000115 	stw	r16,4(sp)
    b904:	04000074 	movhi	r16,1
    b908:	84106104 	addi	r16,r16,16772
    b90c:	dc400215 	stw	r17,8(sp)
    b910:	2023883a 	mov	r17,r4
    b914:	81000017 	ldw	r4,0(r16)
    b918:	dfc00315 	stw	ra,12(sp)
    b91c:	280d883a 	mov	r6,r5
    b920:	20000626 	beq	r4,zero,b93c <fputwc+0x40>
    b924:	20800e17 	ldw	r2,56(r4)
    b928:	1000041e 	bne	r2,zero,b93c <fputwc+0x40>
    b92c:	d9400015 	stw	r5,0(sp)
    b930:	00075940 	call	7594 <__sinit>
    b934:	81000017 	ldw	r4,0(r16)
    b938:	d9800017 	ldw	r6,0(sp)
    b93c:	880b883a 	mov	r5,r17
    b940:	dfc00317 	ldw	ra,12(sp)
    b944:	dc400217 	ldw	r17,8(sp)
    b948:	dc000117 	ldw	r16,4(sp)
    b94c:	dec00404 	addi	sp,sp,16
    b950:	000b7781 	jmpi	b778 <_fputwc_r>

0000b954 <_fstat_r>:
    b954:	defffd04 	addi	sp,sp,-12
    b958:	dc000015 	stw	r16,0(sp)
    b95c:	04000074 	movhi	r16,1
    b960:	dc400115 	stw	r17,4(sp)
    b964:	84173404 	addi	r16,r16,23760
    b968:	2023883a 	mov	r17,r4
    b96c:	2809883a 	mov	r4,r5
    b970:	300b883a 	mov	r5,r6
    b974:	dfc00215 	stw	ra,8(sp)
    b978:	80000015 	stw	zero,0(r16)
    b97c:	000f5780 	call	f578 <fstat>
    b980:	00ffffc4 	movi	r3,-1
    b984:	10c00526 	beq	r2,r3,b99c <_fstat_r+0x48>
    b988:	dfc00217 	ldw	ra,8(sp)
    b98c:	dc400117 	ldw	r17,4(sp)
    b990:	dc000017 	ldw	r16,0(sp)
    b994:	dec00304 	addi	sp,sp,12
    b998:	f800283a 	ret
    b99c:	80c00017 	ldw	r3,0(r16)
    b9a0:	183ff926 	beq	r3,zero,b988 <__alt_data_end+0xfffb6258>
    b9a4:	88c00015 	stw	r3,0(r17)
    b9a8:	003ff706 	br	b988 <__alt_data_end+0xfffb6258>

0000b9ac <_isatty_r>:
    b9ac:	defffd04 	addi	sp,sp,-12
    b9b0:	dc000015 	stw	r16,0(sp)
    b9b4:	04000074 	movhi	r16,1
    b9b8:	dc400115 	stw	r17,4(sp)
    b9bc:	84173404 	addi	r16,r16,23760
    b9c0:	2023883a 	mov	r17,r4
    b9c4:	2809883a 	mov	r4,r5
    b9c8:	dfc00215 	stw	ra,8(sp)
    b9cc:	80000015 	stw	zero,0(r16)
    b9d0:	000f6800 	call	f680 <isatty>
    b9d4:	00ffffc4 	movi	r3,-1
    b9d8:	10c00526 	beq	r2,r3,b9f0 <_isatty_r+0x44>
    b9dc:	dfc00217 	ldw	ra,8(sp)
    b9e0:	dc400117 	ldw	r17,4(sp)
    b9e4:	dc000017 	ldw	r16,0(sp)
    b9e8:	dec00304 	addi	sp,sp,12
    b9ec:	f800283a 	ret
    b9f0:	80c00017 	ldw	r3,0(r16)
    b9f4:	183ff926 	beq	r3,zero,b9dc <__alt_data_end+0xfffb62ac>
    b9f8:	88c00015 	stw	r3,0(r17)
    b9fc:	003ff706 	br	b9dc <__alt_data_end+0xfffb62ac>

0000ba00 <_lseek_r>:
    ba00:	defffd04 	addi	sp,sp,-12
    ba04:	dc000015 	stw	r16,0(sp)
    ba08:	04000074 	movhi	r16,1
    ba0c:	dc400115 	stw	r17,4(sp)
    ba10:	84173404 	addi	r16,r16,23760
    ba14:	2023883a 	mov	r17,r4
    ba18:	2809883a 	mov	r4,r5
    ba1c:	300b883a 	mov	r5,r6
    ba20:	380d883a 	mov	r6,r7
    ba24:	dfc00215 	stw	ra,8(sp)
    ba28:	80000015 	stw	zero,0(r16)
    ba2c:	000f8600 	call	f860 <lseek>
    ba30:	00ffffc4 	movi	r3,-1
    ba34:	10c00526 	beq	r2,r3,ba4c <_lseek_r+0x4c>
    ba38:	dfc00217 	ldw	ra,8(sp)
    ba3c:	dc400117 	ldw	r17,4(sp)
    ba40:	dc000017 	ldw	r16,0(sp)
    ba44:	dec00304 	addi	sp,sp,12
    ba48:	f800283a 	ret
    ba4c:	80c00017 	ldw	r3,0(r16)
    ba50:	183ff926 	beq	r3,zero,ba38 <__alt_data_end+0xfffb6308>
    ba54:	88c00015 	stw	r3,0(r17)
    ba58:	003ff706 	br	ba38 <__alt_data_end+0xfffb6308>

0000ba5c <_read_r>:
    ba5c:	defffd04 	addi	sp,sp,-12
    ba60:	dc000015 	stw	r16,0(sp)
    ba64:	04000074 	movhi	r16,1
    ba68:	dc400115 	stw	r17,4(sp)
    ba6c:	84173404 	addi	r16,r16,23760
    ba70:	2023883a 	mov	r17,r4
    ba74:	2809883a 	mov	r4,r5
    ba78:	300b883a 	mov	r5,r6
    ba7c:	380d883a 	mov	r6,r7
    ba80:	dfc00215 	stw	ra,8(sp)
    ba84:	80000015 	stw	zero,0(r16)
    ba88:	000fa440 	call	fa44 <read>
    ba8c:	00ffffc4 	movi	r3,-1
    ba90:	10c00526 	beq	r2,r3,baa8 <_read_r+0x4c>
    ba94:	dfc00217 	ldw	ra,8(sp)
    ba98:	dc400117 	ldw	r17,4(sp)
    ba9c:	dc000017 	ldw	r16,0(sp)
    baa0:	dec00304 	addi	sp,sp,12
    baa4:	f800283a 	ret
    baa8:	80c00017 	ldw	r3,0(r16)
    baac:	183ff926 	beq	r3,zero,ba94 <__alt_data_end+0xfffb6364>
    bab0:	88c00015 	stw	r3,0(r17)
    bab4:	003ff706 	br	ba94 <__alt_data_end+0xfffb6364>

0000bab8 <__swbuf_r>:
    bab8:	defffc04 	addi	sp,sp,-16
    babc:	dc800215 	stw	r18,8(sp)
    bac0:	dc400115 	stw	r17,4(sp)
    bac4:	dc000015 	stw	r16,0(sp)
    bac8:	dfc00315 	stw	ra,12(sp)
    bacc:	2025883a 	mov	r18,r4
    bad0:	2823883a 	mov	r17,r5
    bad4:	3021883a 	mov	r16,r6
    bad8:	20000226 	beq	r4,zero,bae4 <__swbuf_r+0x2c>
    badc:	20800e17 	ldw	r2,56(r4)
    bae0:	10004126 	beq	r2,zero,bbe8 <__swbuf_r+0x130>
    bae4:	80c00617 	ldw	r3,24(r16)
    bae8:	8180030b 	ldhu	r6,12(r16)
    baec:	80c00215 	stw	r3,8(r16)
    baf0:	30c0020c 	andi	r3,r6,8
    baf4:	18003526 	beq	r3,zero,bbcc <__swbuf_r+0x114>
    baf8:	80c00417 	ldw	r3,16(r16)
    bafc:	18003326 	beq	r3,zero,bbcc <__swbuf_r+0x114>
    bb00:	3088000c 	andi	r2,r6,8192
    bb04:	8c403fcc 	andi	r17,r17,255
    bb08:	10001726 	beq	r2,zero,bb68 <__swbuf_r+0xb0>
    bb0c:	80800017 	ldw	r2,0(r16)
    bb10:	81000517 	ldw	r4,20(r16)
    bb14:	10c7c83a 	sub	r3,r2,r3
    bb18:	19001d0e 	bge	r3,r4,bb90 <__swbuf_r+0xd8>
    bb1c:	18c00044 	addi	r3,r3,1
    bb20:	81400217 	ldw	r5,8(r16)
    bb24:	11000044 	addi	r4,r2,1
    bb28:	81000015 	stw	r4,0(r16)
    bb2c:	297fffc4 	addi	r5,r5,-1
    bb30:	81400215 	stw	r5,8(r16)
    bb34:	14400005 	stb	r17,0(r2)
    bb38:	80800517 	ldw	r2,20(r16)
    bb3c:	10c01d26 	beq	r2,r3,bbb4 <__swbuf_r+0xfc>
    bb40:	8080030b 	ldhu	r2,12(r16)
    bb44:	1080004c 	andi	r2,r2,1
    bb48:	1000181e 	bne	r2,zero,bbac <__swbuf_r+0xf4>
    bb4c:	8805883a 	mov	r2,r17
    bb50:	dfc00317 	ldw	ra,12(sp)
    bb54:	dc800217 	ldw	r18,8(sp)
    bb58:	dc400117 	ldw	r17,4(sp)
    bb5c:	dc000017 	ldw	r16,0(sp)
    bb60:	dec00404 	addi	sp,sp,16
    bb64:	f800283a 	ret
    bb68:	81001917 	ldw	r4,100(r16)
    bb6c:	00b7ffc4 	movi	r2,-8193
    bb70:	31880014 	ori	r6,r6,8192
    bb74:	2084703a 	and	r2,r4,r2
    bb78:	80801915 	stw	r2,100(r16)
    bb7c:	80800017 	ldw	r2,0(r16)
    bb80:	81000517 	ldw	r4,20(r16)
    bb84:	8180030d 	sth	r6,12(r16)
    bb88:	10c7c83a 	sub	r3,r2,r3
    bb8c:	193fe316 	blt	r3,r4,bb1c <__alt_data_end+0xfffb63ec>
    bb90:	9009883a 	mov	r4,r18
    bb94:	800b883a 	mov	r5,r16
    bb98:	0006fd80 	call	6fd8 <_fflush_r>
    bb9c:	1000091e 	bne	r2,zero,bbc4 <__swbuf_r+0x10c>
    bba0:	80800017 	ldw	r2,0(r16)
    bba4:	00c00044 	movi	r3,1
    bba8:	003fdd06 	br	bb20 <__alt_data_end+0xfffb63f0>
    bbac:	00800284 	movi	r2,10
    bbb0:	88bfe61e 	bne	r17,r2,bb4c <__alt_data_end+0xfffb641c>
    bbb4:	9009883a 	mov	r4,r18
    bbb8:	800b883a 	mov	r5,r16
    bbbc:	0006fd80 	call	6fd8 <_fflush_r>
    bbc0:	103fe226 	beq	r2,zero,bb4c <__alt_data_end+0xfffb641c>
    bbc4:	00bfffc4 	movi	r2,-1
    bbc8:	003fe106 	br	bb50 <__alt_data_end+0xfffb6420>
    bbcc:	9009883a 	mov	r4,r18
    bbd0:	800b883a 	mov	r5,r16
    bbd4:	00055580 	call	5558 <__swsetup_r>
    bbd8:	1000051e 	bne	r2,zero,bbf0 <__swbuf_r+0x138>
    bbdc:	8180030b 	ldhu	r6,12(r16)
    bbe0:	80c00417 	ldw	r3,16(r16)
    bbe4:	003fc606 	br	bb00 <__alt_data_end+0xfffb63d0>
    bbe8:	00075940 	call	7594 <__sinit>
    bbec:	003fbd06 	br	bae4 <__alt_data_end+0xfffb63b4>
    bbf0:	80c0030b 	ldhu	r3,12(r16)
    bbf4:	00bfffc4 	movi	r2,-1
    bbf8:	18c01014 	ori	r3,r3,64
    bbfc:	80c0030d 	sth	r3,12(r16)
    bc00:	00c00244 	movi	r3,9
    bc04:	90c00015 	stw	r3,0(r18)
    bc08:	003fd106 	br	bb50 <__alt_data_end+0xfffb6420>

0000bc0c <__swbuf>:
    bc0c:	00c00074 	movhi	r3,1
    bc10:	18d06104 	addi	r3,r3,16772
    bc14:	2005883a 	mov	r2,r4
    bc18:	19000017 	ldw	r4,0(r3)
    bc1c:	280d883a 	mov	r6,r5
    bc20:	100b883a 	mov	r5,r2
    bc24:	000bab81 	jmpi	bab8 <__swbuf_r>

0000bc28 <_wcrtomb_r>:
    bc28:	defff604 	addi	sp,sp,-40
    bc2c:	00800074 	movhi	r2,1
    bc30:	dc800815 	stw	r18,32(sp)
    bc34:	dc400715 	stw	r17,28(sp)
    bc38:	dc000615 	stw	r16,24(sp)
    bc3c:	10906304 	addi	r2,r2,16780
    bc40:	dfc00915 	stw	ra,36(sp)
    bc44:	2021883a 	mov	r16,r4
    bc48:	3823883a 	mov	r17,r7
    bc4c:	14800017 	ldw	r18,0(r2)
    bc50:	28001426 	beq	r5,zero,bca4 <_wcrtomb_r+0x7c>
    bc54:	d9400415 	stw	r5,16(sp)
    bc58:	d9800515 	stw	r6,20(sp)
    bc5c:	00080880 	call	8088 <__locale_charset>
    bc60:	d9400417 	ldw	r5,16(sp)
    bc64:	d9800517 	ldw	r6,20(sp)
    bc68:	8009883a 	mov	r4,r16
    bc6c:	dc400015 	stw	r17,0(sp)
    bc70:	100f883a 	mov	r7,r2
    bc74:	903ee83a 	callr	r18
    bc78:	00ffffc4 	movi	r3,-1
    bc7c:	10c0031e 	bne	r2,r3,bc8c <_wcrtomb_r+0x64>
    bc80:	88000015 	stw	zero,0(r17)
    bc84:	00c02284 	movi	r3,138
    bc88:	80c00015 	stw	r3,0(r16)
    bc8c:	dfc00917 	ldw	ra,36(sp)
    bc90:	dc800817 	ldw	r18,32(sp)
    bc94:	dc400717 	ldw	r17,28(sp)
    bc98:	dc000617 	ldw	r16,24(sp)
    bc9c:	dec00a04 	addi	sp,sp,40
    bca0:	f800283a 	ret
    bca4:	00080880 	call	8088 <__locale_charset>
    bca8:	8009883a 	mov	r4,r16
    bcac:	dc400015 	stw	r17,0(sp)
    bcb0:	d9400104 	addi	r5,sp,4
    bcb4:	000d883a 	mov	r6,zero
    bcb8:	100f883a 	mov	r7,r2
    bcbc:	903ee83a 	callr	r18
    bcc0:	003fed06 	br	bc78 <__alt_data_end+0xfffb6548>

0000bcc4 <wcrtomb>:
    bcc4:	defff504 	addi	sp,sp,-44
    bcc8:	dc400515 	stw	r17,20(sp)
    bccc:	dc000415 	stw	r16,16(sp)
    bcd0:	dfc00a15 	stw	ra,40(sp)
    bcd4:	dd400915 	stw	r21,36(sp)
    bcd8:	dd000815 	stw	r20,32(sp)
    bcdc:	dcc00715 	stw	r19,28(sp)
    bce0:	dc800615 	stw	r18,24(sp)
    bce4:	2021883a 	mov	r16,r4
    bce8:	3023883a 	mov	r17,r6
    bcec:	20001d26 	beq	r4,zero,bd64 <wcrtomb+0xa0>
    bcf0:	04800074 	movhi	r18,1
    bcf4:	94906104 	addi	r18,r18,16772
    bcf8:	00800074 	movhi	r2,1
    bcfc:	95400017 	ldw	r21,0(r18)
    bd00:	10906304 	addi	r2,r2,16780
    bd04:	15000017 	ldw	r20,0(r2)
    bd08:	2827883a 	mov	r19,r5
    bd0c:	00080880 	call	8088 <__locale_charset>
    bd10:	a809883a 	mov	r4,r21
    bd14:	dc400015 	stw	r17,0(sp)
    bd18:	800b883a 	mov	r5,r16
    bd1c:	980d883a 	mov	r6,r19
    bd20:	100f883a 	mov	r7,r2
    bd24:	a03ee83a 	callr	r20
    bd28:	00ffffc4 	movi	r3,-1
    bd2c:	10c0041e 	bne	r2,r3,bd40 <wcrtomb+0x7c>
    bd30:	90c00017 	ldw	r3,0(r18)
    bd34:	01002284 	movi	r4,138
    bd38:	88000015 	stw	zero,0(r17)
    bd3c:	19000015 	stw	r4,0(r3)
    bd40:	dfc00a17 	ldw	ra,40(sp)
    bd44:	dd400917 	ldw	r21,36(sp)
    bd48:	dd000817 	ldw	r20,32(sp)
    bd4c:	dcc00717 	ldw	r19,28(sp)
    bd50:	dc800617 	ldw	r18,24(sp)
    bd54:	dc400517 	ldw	r17,20(sp)
    bd58:	dc000417 	ldw	r16,16(sp)
    bd5c:	dec00b04 	addi	sp,sp,44
    bd60:	f800283a 	ret
    bd64:	04800074 	movhi	r18,1
    bd68:	94906104 	addi	r18,r18,16772
    bd6c:	00800074 	movhi	r2,1
    bd70:	94c00017 	ldw	r19,0(r18)
    bd74:	10906304 	addi	r2,r2,16780
    bd78:	14000017 	ldw	r16,0(r2)
    bd7c:	00080880 	call	8088 <__locale_charset>
    bd80:	9809883a 	mov	r4,r19
    bd84:	dc400015 	stw	r17,0(sp)
    bd88:	d9400104 	addi	r5,sp,4
    bd8c:	000d883a 	mov	r6,zero
    bd90:	100f883a 	mov	r7,r2
    bd94:	803ee83a 	callr	r16
    bd98:	003fe306 	br	bd28 <__alt_data_end+0xfffb65f8>

0000bd9c <__ascii_wctomb>:
    bd9c:	28000526 	beq	r5,zero,bdb4 <__ascii_wctomb+0x18>
    bda0:	00803fc4 	movi	r2,255
    bda4:	11800536 	bltu	r2,r6,bdbc <__ascii_wctomb+0x20>
    bda8:	29800005 	stb	r6,0(r5)
    bdac:	00800044 	movi	r2,1
    bdb0:	f800283a 	ret
    bdb4:	0005883a 	mov	r2,zero
    bdb8:	f800283a 	ret
    bdbc:	00802284 	movi	r2,138
    bdc0:	20800015 	stw	r2,0(r4)
    bdc4:	00bfffc4 	movi	r2,-1
    bdc8:	f800283a 	ret

0000bdcc <_wctomb_r>:
    bdcc:	00800074 	movhi	r2,1
    bdd0:	defff904 	addi	sp,sp,-28
    bdd4:	10906304 	addi	r2,r2,16780
    bdd8:	dfc00615 	stw	ra,24(sp)
    bddc:	dc400515 	stw	r17,20(sp)
    bde0:	dc000415 	stw	r16,16(sp)
    bde4:	3823883a 	mov	r17,r7
    bde8:	14000017 	ldw	r16,0(r2)
    bdec:	d9000115 	stw	r4,4(sp)
    bdf0:	d9400215 	stw	r5,8(sp)
    bdf4:	d9800315 	stw	r6,12(sp)
    bdf8:	00080880 	call	8088 <__locale_charset>
    bdfc:	d9000117 	ldw	r4,4(sp)
    be00:	d9400217 	ldw	r5,8(sp)
    be04:	d9800317 	ldw	r6,12(sp)
    be08:	dc400015 	stw	r17,0(sp)
    be0c:	100f883a 	mov	r7,r2
    be10:	803ee83a 	callr	r16
    be14:	dfc00617 	ldw	ra,24(sp)
    be18:	dc400517 	ldw	r17,20(sp)
    be1c:	dc000417 	ldw	r16,16(sp)
    be20:	dec00704 	addi	sp,sp,28
    be24:	f800283a 	ret

0000be28 <__udivdi3>:
    be28:	defff504 	addi	sp,sp,-44
    be2c:	dcc00415 	stw	r19,16(sp)
    be30:	dc000115 	stw	r16,4(sp)
    be34:	dfc00a15 	stw	ra,40(sp)
    be38:	df000915 	stw	fp,36(sp)
    be3c:	ddc00815 	stw	r23,32(sp)
    be40:	dd800715 	stw	r22,28(sp)
    be44:	dd400615 	stw	r21,24(sp)
    be48:	dd000515 	stw	r20,20(sp)
    be4c:	dc800315 	stw	r18,12(sp)
    be50:	dc400215 	stw	r17,8(sp)
    be54:	2027883a 	mov	r19,r4
    be58:	2821883a 	mov	r16,r5
    be5c:	3800471e 	bne	r7,zero,bf7c <__udivdi3+0x154>
    be60:	3025883a 	mov	r18,r6
    be64:	2023883a 	mov	r17,r4
    be68:	2980592e 	bgeu	r5,r6,bfd0 <__udivdi3+0x1a8>
    be6c:	00bfffd4 	movui	r2,65535
    be70:	2829883a 	mov	r20,r5
    be74:	1180b236 	bltu	r2,r6,c140 <__udivdi3+0x318>
    be78:	00803fc4 	movi	r2,255
    be7c:	1181622e 	bgeu	r2,r6,c408 <__udivdi3+0x5e0>
    be80:	00800204 	movi	r2,8
    be84:	1007883a 	mov	r3,r2
    be88:	3084d83a 	srl	r2,r6,r2
    be8c:	01000074 	movhi	r4,1
    be90:	21096604 	addi	r4,r4,9624
    be94:	2085883a 	add	r2,r4,r2
    be98:	11000003 	ldbu	r4,0(r2)
    be9c:	20c9883a 	add	r4,r4,r3
    bea0:	00c00804 	movi	r3,32
    bea4:	1907c83a 	sub	r3,r3,r4
    bea8:	18000526 	beq	r3,zero,bec0 <__udivdi3+0x98>
    beac:	80e0983a 	sll	r16,r16,r3
    beb0:	9908d83a 	srl	r4,r19,r4
    beb4:	30e4983a 	sll	r18,r6,r3
    beb8:	98e2983a 	sll	r17,r19,r3
    bebc:	8128b03a 	or	r20,r16,r4
    bec0:	902ad43a 	srli	r21,r18,16
    bec4:	a009883a 	mov	r4,r20
    bec8:	95bfffcc 	andi	r22,r18,65535
    becc:	a80b883a 	mov	r5,r21
    bed0:	000cba80 	call	cba8 <__umodsi3>
    bed4:	a009883a 	mov	r4,r20
    bed8:	a80b883a 	mov	r5,r21
    bedc:	102f883a 	mov	r23,r2
    bee0:	000cba00 	call	cba0 <__udivsi3>
    bee4:	1009883a 	mov	r4,r2
    bee8:	b00b883a 	mov	r5,r22
    beec:	1021883a 	mov	r16,r2
    bef0:	000cbb00 	call	cbb0 <__mulsi3>
    bef4:	b82e943a 	slli	r23,r23,16
    bef8:	8808d43a 	srli	r4,r17,16
    befc:	b906b03a 	or	r3,r23,r4
    bf00:	1880052e 	bgeu	r3,r2,bf18 <__udivdi3+0xf0>
    bf04:	1c87883a 	add	r3,r3,r18
    bf08:	813fffc4 	addi	r4,r16,-1
    bf0c:	1c800136 	bltu	r3,r18,bf14 <__udivdi3+0xec>
    bf10:	18815236 	bltu	r3,r2,c45c <__udivdi3+0x634>
    bf14:	2021883a 	mov	r16,r4
    bf18:	18a7c83a 	sub	r19,r3,r2
    bf1c:	9809883a 	mov	r4,r19
    bf20:	a80b883a 	mov	r5,r21
    bf24:	000cba80 	call	cba8 <__umodsi3>
    bf28:	1029883a 	mov	r20,r2
    bf2c:	9809883a 	mov	r4,r19
    bf30:	a80b883a 	mov	r5,r21
    bf34:	a028943a 	slli	r20,r20,16
    bf38:	000cba00 	call	cba0 <__udivsi3>
    bf3c:	1009883a 	mov	r4,r2
    bf40:	b00b883a 	mov	r5,r22
    bf44:	8c7fffcc 	andi	r17,r17,65535
    bf48:	1027883a 	mov	r19,r2
    bf4c:	a462b03a 	or	r17,r20,r17
    bf50:	000cbb00 	call	cbb0 <__mulsi3>
    bf54:	8880052e 	bgeu	r17,r2,bf6c <__udivdi3+0x144>
    bf58:	8ca3883a 	add	r17,r17,r18
    bf5c:	98ffffc4 	addi	r3,r19,-1
    bf60:	8c811036 	bltu	r17,r18,c3a4 <__udivdi3+0x57c>
    bf64:	88810f2e 	bgeu	r17,r2,c3a4 <__udivdi3+0x57c>
    bf68:	9cffff84 	addi	r19,r19,-2
    bf6c:	8020943a 	slli	r16,r16,16
    bf70:	0007883a 	mov	r3,zero
    bf74:	9c04b03a 	or	r2,r19,r16
    bf78:	00006006 	br	c0fc <__udivdi3+0x2d4>
    bf7c:	29c05d36 	bltu	r5,r7,c0f4 <__udivdi3+0x2cc>
    bf80:	00bfffd4 	movui	r2,65535
    bf84:	11c0692e 	bgeu	r2,r7,c12c <__udivdi3+0x304>
    bf88:	00804034 	movhi	r2,256
    bf8c:	10bfffc4 	addi	r2,r2,-1
    bf90:	11c10e2e 	bgeu	r2,r7,c3cc <__udivdi3+0x5a4>
    bf94:	01400604 	movi	r5,24
    bf98:	2811883a 	mov	r8,r5
    bf9c:	394ad83a 	srl	r5,r7,r5
    bfa0:	00800074 	movhi	r2,1
    bfa4:	10896604 	addi	r2,r2,9624
    bfa8:	114b883a 	add	r5,r2,r5
    bfac:	29400003 	ldbu	r5,0(r5)
    bfb0:	00c00804 	movi	r3,32
    bfb4:	2a0b883a 	add	r5,r5,r8
    bfb8:	196fc83a 	sub	r23,r3,r5
    bfbc:	b8006b1e 	bne	r23,zero,c16c <__udivdi3+0x344>
    bfc0:	3c011436 	bltu	r7,r16,c414 <__udivdi3+0x5ec>
    bfc4:	9985403a 	cmpgeu	r2,r19,r6
    bfc8:	0007883a 	mov	r3,zero
    bfcc:	00004b06 	br	c0fc <__udivdi3+0x2d4>
    bfd0:	3000041e 	bne	r6,zero,bfe4 <__udivdi3+0x1bc>
    bfd4:	01000044 	movi	r4,1
    bfd8:	000b883a 	mov	r5,zero
    bfdc:	000cba00 	call	cba0 <__udivsi3>
    bfe0:	1025883a 	mov	r18,r2
    bfe4:	00bfffd4 	movui	r2,65535
    bfe8:	14805b2e 	bgeu	r2,r18,c158 <__udivdi3+0x330>
    bfec:	00804034 	movhi	r2,256
    bff0:	10bfffc4 	addi	r2,r2,-1
    bff4:	1480fe2e 	bgeu	r2,r18,c3f0 <__udivdi3+0x5c8>
    bff8:	00800604 	movi	r2,24
    bffc:	1007883a 	mov	r3,r2
    c000:	9084d83a 	srl	r2,r18,r2
    c004:	01000074 	movhi	r4,1
    c008:	21096604 	addi	r4,r4,9624
    c00c:	2085883a 	add	r2,r4,r2
    c010:	11800003 	ldbu	r6,0(r2)
    c014:	01c00804 	movi	r7,32
    c018:	30c7883a 	add	r3,r6,r3
    c01c:	38cfc83a 	sub	r7,r7,r3
    c020:	3800a71e 	bne	r7,zero,c2c0 <__udivdi3+0x498>
    c024:	9028d43a 	srli	r20,r18,16
    c028:	84a1c83a 	sub	r16,r16,r18
    c02c:	957fffcc 	andi	r21,r18,65535
    c030:	00c00044 	movi	r3,1
    c034:	8009883a 	mov	r4,r16
    c038:	a00b883a 	mov	r5,r20
    c03c:	d8c00015 	stw	r3,0(sp)
    c040:	000cba80 	call	cba8 <__umodsi3>
    c044:	8009883a 	mov	r4,r16
    c048:	a00b883a 	mov	r5,r20
    c04c:	102d883a 	mov	r22,r2
    c050:	000cba00 	call	cba0 <__udivsi3>
    c054:	1009883a 	mov	r4,r2
    c058:	a80b883a 	mov	r5,r21
    c05c:	1021883a 	mov	r16,r2
    c060:	000cbb00 	call	cbb0 <__mulsi3>
    c064:	b02c943a 	slli	r22,r22,16
    c068:	880ed43a 	srli	r7,r17,16
    c06c:	d8c00017 	ldw	r3,0(sp)
    c070:	b1ccb03a 	or	r6,r22,r7
    c074:	3080052e 	bgeu	r6,r2,c08c <__udivdi3+0x264>
    c078:	348d883a 	add	r6,r6,r18
    c07c:	813fffc4 	addi	r4,r16,-1
    c080:	34800136 	bltu	r6,r18,c088 <__udivdi3+0x260>
    c084:	3080f236 	bltu	r6,r2,c450 <__udivdi3+0x628>
    c088:	2021883a 	mov	r16,r4
    c08c:	30a7c83a 	sub	r19,r6,r2
    c090:	9809883a 	mov	r4,r19
    c094:	a00b883a 	mov	r5,r20
    c098:	d8c00015 	stw	r3,0(sp)
    c09c:	000cba80 	call	cba8 <__umodsi3>
    c0a0:	102d883a 	mov	r22,r2
    c0a4:	9809883a 	mov	r4,r19
    c0a8:	a00b883a 	mov	r5,r20
    c0ac:	b02c943a 	slli	r22,r22,16
    c0b0:	000cba00 	call	cba0 <__udivsi3>
    c0b4:	1009883a 	mov	r4,r2
    c0b8:	a80b883a 	mov	r5,r21
    c0bc:	8c7fffcc 	andi	r17,r17,65535
    c0c0:	1027883a 	mov	r19,r2
    c0c4:	b462b03a 	or	r17,r22,r17
    c0c8:	000cbb00 	call	cbb0 <__mulsi3>
    c0cc:	d8c00017 	ldw	r3,0(sp)
    c0d0:	8880052e 	bgeu	r17,r2,c0e8 <__udivdi3+0x2c0>
    c0d4:	8ca3883a 	add	r17,r17,r18
    c0d8:	993fffc4 	addi	r4,r19,-1
    c0dc:	8c80af36 	bltu	r17,r18,c39c <__udivdi3+0x574>
    c0e0:	8880ae2e 	bgeu	r17,r2,c39c <__udivdi3+0x574>
    c0e4:	9cffff84 	addi	r19,r19,-2
    c0e8:	8020943a 	slli	r16,r16,16
    c0ec:	9c04b03a 	or	r2,r19,r16
    c0f0:	00000206 	br	c0fc <__udivdi3+0x2d4>
    c0f4:	0007883a 	mov	r3,zero
    c0f8:	0005883a 	mov	r2,zero
    c0fc:	dfc00a17 	ldw	ra,40(sp)
    c100:	df000917 	ldw	fp,36(sp)
    c104:	ddc00817 	ldw	r23,32(sp)
    c108:	dd800717 	ldw	r22,28(sp)
    c10c:	dd400617 	ldw	r21,24(sp)
    c110:	dd000517 	ldw	r20,20(sp)
    c114:	dcc00417 	ldw	r19,16(sp)
    c118:	dc800317 	ldw	r18,12(sp)
    c11c:	dc400217 	ldw	r17,8(sp)
    c120:	dc000117 	ldw	r16,4(sp)
    c124:	dec00b04 	addi	sp,sp,44
    c128:	f800283a 	ret
    c12c:	00803fc4 	movi	r2,255
    c130:	11c0a92e 	bgeu	r2,r7,c3d8 <__udivdi3+0x5b0>
    c134:	01400204 	movi	r5,8
    c138:	2811883a 	mov	r8,r5
    c13c:	003f9706 	br	bf9c <__alt_data_end+0xfffb686c>
    c140:	00804034 	movhi	r2,256
    c144:	10bfffc4 	addi	r2,r2,-1
    c148:	1180a62e 	bgeu	r2,r6,c3e4 <__udivdi3+0x5bc>
    c14c:	00800604 	movi	r2,24
    c150:	1007883a 	mov	r3,r2
    c154:	003f4c06 	br	be88 <__alt_data_end+0xfffb6758>
    c158:	00803fc4 	movi	r2,255
    c15c:	1480a72e 	bgeu	r2,r18,c3fc <__udivdi3+0x5d4>
    c160:	00800204 	movi	r2,8
    c164:	1007883a 	mov	r3,r2
    c168:	003fa506 	br	c000 <__alt_data_end+0xfffb68d0>
    c16c:	3178d83a 	srl	fp,r6,r5
    c170:	3dce983a 	sll	r7,r7,r23
    c174:	8168d83a 	srl	r20,r16,r5
    c178:	9950d83a 	srl	r8,r19,r5
    c17c:	3f38b03a 	or	fp,r7,fp
    c180:	e024d43a 	srli	r18,fp,16
    c184:	85e0983a 	sll	r16,r16,r23
    c188:	a009883a 	mov	r4,r20
    c18c:	900b883a 	mov	r5,r18
    c190:	8220b03a 	or	r16,r16,r8
    c194:	35ea983a 	sll	r21,r6,r23
    c198:	000cba80 	call	cba8 <__umodsi3>
    c19c:	a009883a 	mov	r4,r20
    c1a0:	900b883a 	mov	r5,r18
    c1a4:	1023883a 	mov	r17,r2
    c1a8:	e5bfffcc 	andi	r22,fp,65535
    c1ac:	000cba00 	call	cba0 <__udivsi3>
    c1b0:	1009883a 	mov	r4,r2
    c1b4:	b00b883a 	mov	r5,r22
    c1b8:	1029883a 	mov	r20,r2
    c1bc:	000cbb00 	call	cbb0 <__mulsi3>
    c1c0:	8806943a 	slli	r3,r17,16
    c1c4:	8014d43a 	srli	r10,r16,16
    c1c8:	1a92b03a 	or	r9,r3,r10
    c1cc:	4880042e 	bgeu	r9,r2,c1e0 <__udivdi3+0x3b8>
    c1d0:	4f13883a 	add	r9,r9,fp
    c1d4:	a0ffffc4 	addi	r3,r20,-1
    c1d8:	4f00952e 	bgeu	r9,fp,c430 <__udivdi3+0x608>
    c1dc:	1829883a 	mov	r20,r3
    c1e0:	48a3c83a 	sub	r17,r9,r2
    c1e4:	8809883a 	mov	r4,r17
    c1e8:	900b883a 	mov	r5,r18
    c1ec:	000cba80 	call	cba8 <__umodsi3>
    c1f0:	8809883a 	mov	r4,r17
    c1f4:	900b883a 	mov	r5,r18
    c1f8:	d8800015 	stw	r2,0(sp)
    c1fc:	000cba00 	call	cba0 <__udivsi3>
    c200:	1009883a 	mov	r4,r2
    c204:	b00b883a 	mov	r5,r22
    c208:	1023883a 	mov	r17,r2
    c20c:	000cbb00 	call	cbb0 <__mulsi3>
    c210:	d8c00017 	ldw	r3,0(sp)
    c214:	823fffcc 	andi	r8,r16,65535
    c218:	1806943a 	slli	r3,r3,16
    c21c:	1a20b03a 	or	r16,r3,r8
    c220:	8080042e 	bgeu	r16,r2,c234 <__udivdi3+0x40c>
    c224:	8721883a 	add	r16,r16,fp
    c228:	88ffffc4 	addi	r3,r17,-1
    c22c:	87007c2e 	bgeu	r16,fp,c420 <__udivdi3+0x5f8>
    c230:	1823883a 	mov	r17,r3
    c234:	a028943a 	slli	r20,r20,16
    c238:	acbfffcc 	andi	r18,r21,65535
    c23c:	900b883a 	mov	r5,r18
    c240:	8d28b03a 	or	r20,r17,r20
    c244:	a022d43a 	srli	r17,r20,16
    c248:	a5bfffcc 	andi	r22,r20,65535
    c24c:	b009883a 	mov	r4,r22
    c250:	a82ad43a 	srli	r21,r21,16
    c254:	80a1c83a 	sub	r16,r16,r2
    c258:	000cbb00 	call	cbb0 <__mulsi3>
    c25c:	8809883a 	mov	r4,r17
    c260:	900b883a 	mov	r5,r18
    c264:	1039883a 	mov	fp,r2
    c268:	000cbb00 	call	cbb0 <__mulsi3>
    c26c:	8809883a 	mov	r4,r17
    c270:	a80b883a 	mov	r5,r21
    c274:	1025883a 	mov	r18,r2
    c278:	000cbb00 	call	cbb0 <__mulsi3>
    c27c:	b009883a 	mov	r4,r22
    c280:	a80b883a 	mov	r5,r21
    c284:	1023883a 	mov	r17,r2
    c288:	000cbb00 	call	cbb0 <__mulsi3>
    c28c:	e006d43a 	srli	r3,fp,16
    c290:	9085883a 	add	r2,r18,r2
    c294:	10c7883a 	add	r3,r2,r3
    c298:	1c80022e 	bgeu	r3,r18,c2a4 <__udivdi3+0x47c>
    c29c:	00800074 	movhi	r2,1
    c2a0:	88a3883a 	add	r17,r17,r2
    c2a4:	1808d43a 	srli	r4,r3,16
    c2a8:	8909883a 	add	r4,r17,r4
    c2ac:	81004436 	bltu	r16,r4,c3c0 <__udivdi3+0x598>
    c2b0:	81003e26 	beq	r16,r4,c3ac <__udivdi3+0x584>
    c2b4:	a005883a 	mov	r2,r20
    c2b8:	0007883a 	mov	r3,zero
    c2bc:	003f8f06 	br	c0fc <__alt_data_end+0xfffb69cc>
    c2c0:	91e4983a 	sll	r18,r18,r7
    c2c4:	80eed83a 	srl	r23,r16,r3
    c2c8:	81cc983a 	sll	r6,r16,r7
    c2cc:	9028d43a 	srli	r20,r18,16
    c2d0:	98c6d83a 	srl	r3,r19,r3
    c2d4:	b809883a 	mov	r4,r23
    c2d8:	a00b883a 	mov	r5,r20
    c2dc:	30ecb03a 	or	r22,r6,r3
    c2e0:	99e2983a 	sll	r17,r19,r7
    c2e4:	000cba80 	call	cba8 <__umodsi3>
    c2e8:	b809883a 	mov	r4,r23
    c2ec:	a00b883a 	mov	r5,r20
    c2f0:	1021883a 	mov	r16,r2
    c2f4:	957fffcc 	andi	r21,r18,65535
    c2f8:	000cba00 	call	cba0 <__udivsi3>
    c2fc:	a80b883a 	mov	r5,r21
    c300:	1009883a 	mov	r4,r2
    c304:	102f883a 	mov	r23,r2
    c308:	000cbb00 	call	cbb0 <__mulsi3>
    c30c:	8020943a 	slli	r16,r16,16
    c310:	b00ad43a 	srli	r5,r22,16
    c314:	814cb03a 	or	r6,r16,r5
    c318:	3080062e 	bgeu	r6,r2,c334 <__udivdi3+0x50c>
    c31c:	348d883a 	add	r6,r6,r18
    c320:	b8ffffc4 	addi	r3,r23,-1
    c324:	34804836 	bltu	r6,r18,c448 <__udivdi3+0x620>
    c328:	3080472e 	bgeu	r6,r2,c448 <__udivdi3+0x620>
    c32c:	bdffff84 	addi	r23,r23,-2
    c330:	348d883a 	add	r6,r6,r18
    c334:	30a7c83a 	sub	r19,r6,r2
    c338:	9809883a 	mov	r4,r19
    c33c:	a00b883a 	mov	r5,r20
    c340:	000cba80 	call	cba8 <__umodsi3>
    c344:	9809883a 	mov	r4,r19
    c348:	a00b883a 	mov	r5,r20
    c34c:	1039883a 	mov	fp,r2
    c350:	000cba00 	call	cba0 <__udivsi3>
    c354:	1009883a 	mov	r4,r2
    c358:	a80b883a 	mov	r5,r21
    c35c:	e038943a 	slli	fp,fp,16
    c360:	1027883a 	mov	r19,r2
    c364:	000cbb00 	call	cbb0 <__mulsi3>
    c368:	b1bfffcc 	andi	r6,r22,65535
    c36c:	e18cb03a 	or	r6,fp,r6
    c370:	3080062e 	bgeu	r6,r2,c38c <__udivdi3+0x564>
    c374:	348d883a 	add	r6,r6,r18
    c378:	98ffffc4 	addi	r3,r19,-1
    c37c:	34803036 	bltu	r6,r18,c440 <__udivdi3+0x618>
    c380:	30802f2e 	bgeu	r6,r2,c440 <__udivdi3+0x618>
    c384:	9cffff84 	addi	r19,r19,-2
    c388:	348d883a 	add	r6,r6,r18
    c38c:	b82e943a 	slli	r23,r23,16
    c390:	30a1c83a 	sub	r16,r6,r2
    c394:	9dc6b03a 	or	r3,r19,r23
    c398:	003f2606 	br	c034 <__alt_data_end+0xfffb6904>
    c39c:	2027883a 	mov	r19,r4
    c3a0:	003f5106 	br	c0e8 <__alt_data_end+0xfffb69b8>
    c3a4:	1827883a 	mov	r19,r3
    c3a8:	003ef006 	br	bf6c <__alt_data_end+0xfffb683c>
    c3ac:	1808943a 	slli	r4,r3,16
    c3b0:	9dc6983a 	sll	r3,r19,r23
    c3b4:	e73fffcc 	andi	fp,fp,65535
    c3b8:	2709883a 	add	r4,r4,fp
    c3bc:	193fbd2e 	bgeu	r3,r4,c2b4 <__alt_data_end+0xfffb6b84>
    c3c0:	a0bfffc4 	addi	r2,r20,-1
    c3c4:	0007883a 	mov	r3,zero
    c3c8:	003f4c06 	br	c0fc <__alt_data_end+0xfffb69cc>
    c3cc:	01400404 	movi	r5,16
    c3d0:	2811883a 	mov	r8,r5
    c3d4:	003ef106 	br	bf9c <__alt_data_end+0xfffb686c>
    c3d8:	000b883a 	mov	r5,zero
    c3dc:	0011883a 	mov	r8,zero
    c3e0:	003eee06 	br	bf9c <__alt_data_end+0xfffb686c>
    c3e4:	00800404 	movi	r2,16
    c3e8:	1007883a 	mov	r3,r2
    c3ec:	003ea606 	br	be88 <__alt_data_end+0xfffb6758>
    c3f0:	00800404 	movi	r2,16
    c3f4:	1007883a 	mov	r3,r2
    c3f8:	003f0106 	br	c000 <__alt_data_end+0xfffb68d0>
    c3fc:	0005883a 	mov	r2,zero
    c400:	0007883a 	mov	r3,zero
    c404:	003efe06 	br	c000 <__alt_data_end+0xfffb68d0>
    c408:	0005883a 	mov	r2,zero
    c40c:	0007883a 	mov	r3,zero
    c410:	003e9d06 	br	be88 <__alt_data_end+0xfffb6758>
    c414:	0007883a 	mov	r3,zero
    c418:	00800044 	movi	r2,1
    c41c:	003f3706 	br	c0fc <__alt_data_end+0xfffb69cc>
    c420:	80bf832e 	bgeu	r16,r2,c230 <__alt_data_end+0xfffb6b00>
    c424:	8c7fff84 	addi	r17,r17,-2
    c428:	8721883a 	add	r16,r16,fp
    c42c:	003f8106 	br	c234 <__alt_data_end+0xfffb6b04>
    c430:	48bf6a2e 	bgeu	r9,r2,c1dc <__alt_data_end+0xfffb6aac>
    c434:	a53fff84 	addi	r20,r20,-2
    c438:	4f13883a 	add	r9,r9,fp
    c43c:	003f6806 	br	c1e0 <__alt_data_end+0xfffb6ab0>
    c440:	1827883a 	mov	r19,r3
    c444:	003fd106 	br	c38c <__alt_data_end+0xfffb6c5c>
    c448:	182f883a 	mov	r23,r3
    c44c:	003fb906 	br	c334 <__alt_data_end+0xfffb6c04>
    c450:	843fff84 	addi	r16,r16,-2
    c454:	348d883a 	add	r6,r6,r18
    c458:	003f0c06 	br	c08c <__alt_data_end+0xfffb695c>
    c45c:	843fff84 	addi	r16,r16,-2
    c460:	1c87883a 	add	r3,r3,r18
    c464:	003eac06 	br	bf18 <__alt_data_end+0xfffb67e8>

0000c468 <__umoddi3>:
    c468:	defff404 	addi	sp,sp,-48
    c46c:	dd800815 	stw	r22,32(sp)
    c470:	dc400315 	stw	r17,12(sp)
    c474:	dc000215 	stw	r16,8(sp)
    c478:	dfc00b15 	stw	ra,44(sp)
    c47c:	df000a15 	stw	fp,40(sp)
    c480:	ddc00915 	stw	r23,36(sp)
    c484:	dd400715 	stw	r21,28(sp)
    c488:	dd000615 	stw	r20,24(sp)
    c48c:	dcc00515 	stw	r19,20(sp)
    c490:	dc800415 	stw	r18,16(sp)
    c494:	2021883a 	mov	r16,r4
    c498:	2823883a 	mov	r17,r5
    c49c:	282d883a 	mov	r22,r5
    c4a0:	38003c1e 	bne	r7,zero,c594 <__umoddi3+0x12c>
    c4a4:	3027883a 	mov	r19,r6
    c4a8:	2029883a 	mov	r20,r4
    c4ac:	2980522e 	bgeu	r5,r6,c5f8 <__umoddi3+0x190>
    c4b0:	00bfffd4 	movui	r2,65535
    c4b4:	1180a436 	bltu	r2,r6,c748 <__umoddi3+0x2e0>
    c4b8:	00803fc4 	movi	r2,255
    c4bc:	11815e2e 	bgeu	r2,r6,ca38 <__umoddi3+0x5d0>
    c4c0:	01400204 	movi	r5,8
    c4c4:	2805883a 	mov	r2,r5
    c4c8:	314ad83a 	srl	r5,r6,r5
    c4cc:	00c00074 	movhi	r3,1
    c4d0:	18c96604 	addi	r3,r3,9624
    c4d4:	194b883a 	add	r5,r3,r5
    c4d8:	29000003 	ldbu	r4,0(r5)
    c4dc:	2089883a 	add	r4,r4,r2
    c4e0:	00800804 	movi	r2,32
    c4e4:	1105c83a 	sub	r2,r2,r4
    c4e8:	10010c26 	beq	r2,zero,c91c <__umoddi3+0x4b4>
    c4ec:	88a2983a 	sll	r17,r17,r2
    c4f0:	8108d83a 	srl	r4,r16,r4
    c4f4:	30a6983a 	sll	r19,r6,r2
    c4f8:	80a8983a 	sll	r20,r16,r2
    c4fc:	1025883a 	mov	r18,r2
    c500:	892cb03a 	or	r22,r17,r4
    c504:	9822d43a 	srli	r17,r19,16
    c508:	b009883a 	mov	r4,r22
    c50c:	9d7fffcc 	andi	r21,r19,65535
    c510:	880b883a 	mov	r5,r17
    c514:	000cba80 	call	cba8 <__umodsi3>
    c518:	b009883a 	mov	r4,r22
    c51c:	880b883a 	mov	r5,r17
    c520:	102f883a 	mov	r23,r2
    c524:	000cba00 	call	cba0 <__udivsi3>
    c528:	1009883a 	mov	r4,r2
    c52c:	a80b883a 	mov	r5,r21
    c530:	000cbb00 	call	cbb0 <__mulsi3>
    c534:	b82e943a 	slli	r23,r23,16
    c538:	a008d43a 	srli	r4,r20,16
    c53c:	b906b03a 	or	r3,r23,r4
    c540:	1880042e 	bgeu	r3,r2,c554 <__umoddi3+0xec>
    c544:	1cc7883a 	add	r3,r3,r19
    c548:	1cc00236 	bltu	r3,r19,c554 <__umoddi3+0xec>
    c54c:	1880012e 	bgeu	r3,r2,c554 <__umoddi3+0xec>
    c550:	1cc7883a 	add	r3,r3,r19
    c554:	18a1c83a 	sub	r16,r3,r2
    c558:	8009883a 	mov	r4,r16
    c55c:	880b883a 	mov	r5,r17
    c560:	000cba80 	call	cba8 <__umodsi3>
    c564:	8009883a 	mov	r4,r16
    c568:	880b883a 	mov	r5,r17
    c56c:	102d883a 	mov	r22,r2
    c570:	000cba00 	call	cba0 <__udivsi3>
    c574:	1009883a 	mov	r4,r2
    c578:	a80b883a 	mov	r5,r21
    c57c:	b02c943a 	slli	r22,r22,16
    c580:	000cbb00 	call	cbb0 <__mulsi3>
    c584:	a13fffcc 	andi	r4,r20,65535
    c588:	b106b03a 	or	r3,r22,r4
    c58c:	1880572e 	bgeu	r3,r2,c6ec <__umoddi3+0x284>
    c590:	00005206 	br	c6dc <__umoddi3+0x274>
    c594:	29c05936 	bltu	r5,r7,c6fc <__umoddi3+0x294>
    c598:	00bfffd4 	movui	r2,65535
    c59c:	11c0652e 	bgeu	r2,r7,c734 <__umoddi3+0x2cc>
    c5a0:	00804034 	movhi	r2,256
    c5a4:	10bfffc4 	addi	r2,r2,-1
    c5a8:	11c1172e 	bgeu	r2,r7,ca08 <__umoddi3+0x5a0>
    c5ac:	01400604 	movi	r5,24
    c5b0:	282b883a 	mov	r21,r5
    c5b4:	394ad83a 	srl	r5,r7,r5
    c5b8:	00c00074 	movhi	r3,1
    c5bc:	18c96604 	addi	r3,r3,9624
    c5c0:	194b883a 	add	r5,r3,r5
    c5c4:	28800003 	ldbu	r2,0(r5)
    c5c8:	00c00804 	movi	r3,32
    c5cc:	156b883a 	add	r21,r2,r21
    c5d0:	1d69c83a 	sub	r20,r3,r21
    c5d4:	a000671e 	bne	r20,zero,c774 <__umoddi3+0x30c>
    c5d8:	3c400136 	bltu	r7,r17,c5e0 <__umoddi3+0x178>
    c5dc:	81812336 	bltu	r16,r6,ca6c <__umoddi3+0x604>
    c5e0:	8185c83a 	sub	r2,r16,r6
    c5e4:	89e3c83a 	sub	r17,r17,r7
    c5e8:	8087803a 	cmpltu	r3,r16,r2
    c5ec:	88edc83a 	sub	r22,r17,r3
    c5f0:	b007883a 	mov	r3,r22
    c5f4:	00004306 	br	c704 <__umoddi3+0x29c>
    c5f8:	3000041e 	bne	r6,zero,c60c <__umoddi3+0x1a4>
    c5fc:	01000044 	movi	r4,1
    c600:	000b883a 	mov	r5,zero
    c604:	000cba00 	call	cba0 <__udivsi3>
    c608:	1027883a 	mov	r19,r2
    c60c:	00bfffd4 	movui	r2,65535
    c610:	14c0532e 	bgeu	r2,r19,c760 <__umoddi3+0x2f8>
    c614:	00804034 	movhi	r2,256
    c618:	10bfffc4 	addi	r2,r2,-1
    c61c:	14c1032e 	bgeu	r2,r19,ca2c <__umoddi3+0x5c4>
    c620:	00800604 	movi	r2,24
    c624:	1007883a 	mov	r3,r2
    c628:	9884d83a 	srl	r2,r19,r2
    c62c:	01000074 	movhi	r4,1
    c630:	21096604 	addi	r4,r4,9624
    c634:	2085883a 	add	r2,r4,r2
    c638:	11000003 	ldbu	r4,0(r2)
    c63c:	00800804 	movi	r2,32
    c640:	20c7883a 	add	r3,r4,r3
    c644:	10c5c83a 	sub	r2,r2,r3
    c648:	1000b61e 	bne	r2,zero,c924 <__umoddi3+0x4bc>
    c64c:	982ad43a 	srli	r21,r19,16
    c650:	8ce3c83a 	sub	r17,r17,r19
    c654:	9dbfffcc 	andi	r22,r19,65535
    c658:	0025883a 	mov	r18,zero
    c65c:	8809883a 	mov	r4,r17
    c660:	a80b883a 	mov	r5,r21
    c664:	000cba80 	call	cba8 <__umodsi3>
    c668:	8809883a 	mov	r4,r17
    c66c:	a80b883a 	mov	r5,r21
    c670:	102f883a 	mov	r23,r2
    c674:	000cba00 	call	cba0 <__udivsi3>
    c678:	1009883a 	mov	r4,r2
    c67c:	b00b883a 	mov	r5,r22
    c680:	000cbb00 	call	cbb0 <__mulsi3>
    c684:	b82e943a 	slli	r23,r23,16
    c688:	a008d43a 	srli	r4,r20,16
    c68c:	b906b03a 	or	r3,r23,r4
    c690:	1880032e 	bgeu	r3,r2,c6a0 <__umoddi3+0x238>
    c694:	1cc7883a 	add	r3,r3,r19
    c698:	1cc00136 	bltu	r3,r19,c6a0 <__umoddi3+0x238>
    c69c:	1880f136 	bltu	r3,r2,ca64 <__umoddi3+0x5fc>
    c6a0:	18a1c83a 	sub	r16,r3,r2
    c6a4:	8009883a 	mov	r4,r16
    c6a8:	a80b883a 	mov	r5,r21
    c6ac:	000cba80 	call	cba8 <__umodsi3>
    c6b0:	8009883a 	mov	r4,r16
    c6b4:	a80b883a 	mov	r5,r21
    c6b8:	1023883a 	mov	r17,r2
    c6bc:	000cba00 	call	cba0 <__udivsi3>
    c6c0:	1009883a 	mov	r4,r2
    c6c4:	b00b883a 	mov	r5,r22
    c6c8:	8822943a 	slli	r17,r17,16
    c6cc:	000cbb00 	call	cbb0 <__mulsi3>
    c6d0:	a13fffcc 	andi	r4,r20,65535
    c6d4:	8906b03a 	or	r3,r17,r4
    c6d8:	1880042e 	bgeu	r3,r2,c6ec <__umoddi3+0x284>
    c6dc:	1cc7883a 	add	r3,r3,r19
    c6e0:	1cc00236 	bltu	r3,r19,c6ec <__umoddi3+0x284>
    c6e4:	1880012e 	bgeu	r3,r2,c6ec <__umoddi3+0x284>
    c6e8:	1cc7883a 	add	r3,r3,r19
    c6ec:	1887c83a 	sub	r3,r3,r2
    c6f0:	1c84d83a 	srl	r2,r3,r18
    c6f4:	0007883a 	mov	r3,zero
    c6f8:	00000206 	br	c704 <__umoddi3+0x29c>
    c6fc:	2005883a 	mov	r2,r4
    c700:	2807883a 	mov	r3,r5
    c704:	dfc00b17 	ldw	ra,44(sp)
    c708:	df000a17 	ldw	fp,40(sp)
    c70c:	ddc00917 	ldw	r23,36(sp)
    c710:	dd800817 	ldw	r22,32(sp)
    c714:	dd400717 	ldw	r21,28(sp)
    c718:	dd000617 	ldw	r20,24(sp)
    c71c:	dcc00517 	ldw	r19,20(sp)
    c720:	dc800417 	ldw	r18,16(sp)
    c724:	dc400317 	ldw	r17,12(sp)
    c728:	dc000217 	ldw	r16,8(sp)
    c72c:	dec00c04 	addi	sp,sp,48
    c730:	f800283a 	ret
    c734:	00803fc4 	movi	r2,255
    c738:	11c0b02e 	bgeu	r2,r7,c9fc <__umoddi3+0x594>
    c73c:	01400204 	movi	r5,8
    c740:	282b883a 	mov	r21,r5
    c744:	003f9b06 	br	c5b4 <__alt_data_end+0xfffb6e84>
    c748:	00804034 	movhi	r2,256
    c74c:	10bfffc4 	addi	r2,r2,-1
    c750:	1180b02e 	bgeu	r2,r6,ca14 <__umoddi3+0x5ac>
    c754:	01400604 	movi	r5,24
    c758:	2805883a 	mov	r2,r5
    c75c:	003f5a06 	br	c4c8 <__alt_data_end+0xfffb6d98>
    c760:	00803fc4 	movi	r2,255
    c764:	14c0ae2e 	bgeu	r2,r19,ca20 <__umoddi3+0x5b8>
    c768:	00800204 	movi	r2,8
    c76c:	1007883a 	mov	r3,r2
    c770:	003fad06 	br	c628 <__alt_data_end+0xfffb6ef8>
    c774:	3d0a983a 	sll	r5,r7,r20
    c778:	356cd83a 	srl	r22,r6,r21
    c77c:	8d78d83a 	srl	fp,r17,r21
    c780:	8d10983a 	sll	r8,r17,r20
    c784:	2dacb03a 	or	r22,r5,r22
    c788:	b02ed43a 	srli	r23,r22,16
    c78c:	8564d83a 	srl	r18,r16,r21
    c790:	e009883a 	mov	r4,fp
    c794:	b80b883a 	mov	r5,r23
    c798:	44a4b03a 	or	r18,r8,r18
    c79c:	3526983a 	sll	r19,r6,r20
    c7a0:	000cba80 	call	cba8 <__umodsi3>
    c7a4:	e009883a 	mov	r4,fp
    c7a8:	b80b883a 	mov	r5,r23
    c7ac:	b47fffcc 	andi	r17,r22,65535
    c7b0:	d8800015 	stw	r2,0(sp)
    c7b4:	000cba00 	call	cba0 <__udivsi3>
    c7b8:	1009883a 	mov	r4,r2
    c7bc:	880b883a 	mov	r5,r17
    c7c0:	1039883a 	mov	fp,r2
    c7c4:	000cbb00 	call	cbb0 <__mulsi3>
    c7c8:	d9800017 	ldw	r6,0(sp)
    c7cc:	9008d43a 	srli	r4,r18,16
    c7d0:	8520983a 	sll	r16,r16,r20
    c7d4:	300c943a 	slli	r6,r6,16
    c7d8:	3106b03a 	or	r3,r6,r4
    c7dc:	1880042e 	bgeu	r3,r2,c7f0 <__umoddi3+0x388>
    c7e0:	1d87883a 	add	r3,r3,r22
    c7e4:	e13fffc4 	addi	r4,fp,-1
    c7e8:	1d809a2e 	bgeu	r3,r22,ca54 <__umoddi3+0x5ec>
    c7ec:	2039883a 	mov	fp,r4
    c7f0:	1887c83a 	sub	r3,r3,r2
    c7f4:	1809883a 	mov	r4,r3
    c7f8:	b80b883a 	mov	r5,r23
    c7fc:	d8c00115 	stw	r3,4(sp)
    c800:	000cba80 	call	cba8 <__umodsi3>
    c804:	d8c00117 	ldw	r3,4(sp)
    c808:	b80b883a 	mov	r5,r23
    c80c:	d8800015 	stw	r2,0(sp)
    c810:	1809883a 	mov	r4,r3
    c814:	000cba00 	call	cba0 <__udivsi3>
    c818:	880b883a 	mov	r5,r17
    c81c:	1009883a 	mov	r4,r2
    c820:	102f883a 	mov	r23,r2
    c824:	000cbb00 	call	cbb0 <__mulsi3>
    c828:	d9800017 	ldw	r6,0(sp)
    c82c:	947fffcc 	andi	r17,r18,65535
    c830:	300c943a 	slli	r6,r6,16
    c834:	3464b03a 	or	r18,r6,r17
    c838:	9080042e 	bgeu	r18,r2,c84c <__umoddi3+0x3e4>
    c83c:	95a5883a 	add	r18,r18,r22
    c840:	b8ffffc4 	addi	r3,r23,-1
    c844:	95807f2e 	bgeu	r18,r22,ca44 <__umoddi3+0x5dc>
    c848:	182f883a 	mov	r23,r3
    c84c:	e038943a 	slli	fp,fp,16
    c850:	980cd43a 	srli	r6,r19,16
    c854:	98ffffcc 	andi	r3,r19,65535
    c858:	bf38b03a 	or	fp,r23,fp
    c85c:	e02ed43a 	srli	r23,fp,16
    c860:	e73fffcc 	andi	fp,fp,65535
    c864:	180b883a 	mov	r5,r3
    c868:	e009883a 	mov	r4,fp
    c86c:	d9800015 	stw	r6,0(sp)
    c870:	d8c00115 	stw	r3,4(sp)
    c874:	90a5c83a 	sub	r18,r18,r2
    c878:	000cbb00 	call	cbb0 <__mulsi3>
    c87c:	d8c00117 	ldw	r3,4(sp)
    c880:	b809883a 	mov	r4,r23
    c884:	1023883a 	mov	r17,r2
    c888:	180b883a 	mov	r5,r3
    c88c:	000cbb00 	call	cbb0 <__mulsi3>
    c890:	d9800017 	ldw	r6,0(sp)
    c894:	b809883a 	mov	r4,r23
    c898:	d8800115 	stw	r2,4(sp)
    c89c:	300b883a 	mov	r5,r6
    c8a0:	302f883a 	mov	r23,r6
    c8a4:	000cbb00 	call	cbb0 <__mulsi3>
    c8a8:	e009883a 	mov	r4,fp
    c8ac:	b80b883a 	mov	r5,r23
    c8b0:	d8800015 	stw	r2,0(sp)
    c8b4:	000cbb00 	call	cbb0 <__mulsi3>
    c8b8:	d8c00117 	ldw	r3,4(sp)
    c8bc:	880cd43a 	srli	r6,r17,16
    c8c0:	d9c00017 	ldw	r7,0(sp)
    c8c4:	1885883a 	add	r2,r3,r2
    c8c8:	118d883a 	add	r6,r2,r6
    c8cc:	30c0022e 	bgeu	r6,r3,c8d8 <__umoddi3+0x470>
    c8d0:	00800074 	movhi	r2,1
    c8d4:	388f883a 	add	r7,r7,r2
    c8d8:	3006d43a 	srli	r3,r6,16
    c8dc:	300c943a 	slli	r6,r6,16
    c8e0:	8c7fffcc 	andi	r17,r17,65535
    c8e4:	38c7883a 	add	r3,r7,r3
    c8e8:	3463883a 	add	r17,r6,r17
    c8ec:	90c03d36 	bltu	r18,r3,c9e4 <__umoddi3+0x57c>
    c8f0:	90c06026 	beq	r18,r3,ca74 <__umoddi3+0x60c>
    c8f4:	90c9c83a 	sub	r4,r18,r3
    c8f8:	880f883a 	mov	r7,r17
    c8fc:	81cfc83a 	sub	r7,r16,r7
    c900:	81c7803a 	cmpltu	r3,r16,r7
    c904:	20c7c83a 	sub	r3,r4,r3
    c908:	1d44983a 	sll	r2,r3,r21
    c90c:	3d0ed83a 	srl	r7,r7,r20
    c910:	1d06d83a 	srl	r3,r3,r20
    c914:	11c4b03a 	or	r2,r2,r7
    c918:	003f7a06 	br	c704 <__alt_data_end+0xfffb6fd4>
    c91c:	0025883a 	mov	r18,zero
    c920:	003ef806 	br	c504 <__alt_data_end+0xfffb6dd4>
    c924:	98a6983a 	sll	r19,r19,r2
    c928:	88e8d83a 	srl	r20,r17,r3
    c92c:	80c6d83a 	srl	r3,r16,r3
    c930:	982ad43a 	srli	r21,r19,16
    c934:	88a2983a 	sll	r17,r17,r2
    c938:	a009883a 	mov	r4,r20
    c93c:	a80b883a 	mov	r5,r21
    c940:	88eeb03a 	or	r23,r17,r3
    c944:	1025883a 	mov	r18,r2
    c948:	000cba80 	call	cba8 <__umodsi3>
    c94c:	a009883a 	mov	r4,r20
    c950:	a80b883a 	mov	r5,r21
    c954:	1023883a 	mov	r17,r2
    c958:	9dbfffcc 	andi	r22,r19,65535
    c95c:	000cba00 	call	cba0 <__udivsi3>
    c960:	1009883a 	mov	r4,r2
    c964:	b00b883a 	mov	r5,r22
    c968:	000cbb00 	call	cbb0 <__mulsi3>
    c96c:	8822943a 	slli	r17,r17,16
    c970:	b808d43a 	srli	r4,r23,16
    c974:	84a8983a 	sll	r20,r16,r18
    c978:	8906b03a 	or	r3,r17,r4
    c97c:	1880042e 	bgeu	r3,r2,c990 <__umoddi3+0x528>
    c980:	1cc7883a 	add	r3,r3,r19
    c984:	1cc00236 	bltu	r3,r19,c990 <__umoddi3+0x528>
    c988:	1880012e 	bgeu	r3,r2,c990 <__umoddi3+0x528>
    c98c:	1cc7883a 	add	r3,r3,r19
    c990:	18a1c83a 	sub	r16,r3,r2
    c994:	8009883a 	mov	r4,r16
    c998:	a80b883a 	mov	r5,r21
    c99c:	000cba80 	call	cba8 <__umodsi3>
    c9a0:	8009883a 	mov	r4,r16
    c9a4:	a80b883a 	mov	r5,r21
    c9a8:	1039883a 	mov	fp,r2
    c9ac:	000cba00 	call	cba0 <__udivsi3>
    c9b0:	1009883a 	mov	r4,r2
    c9b4:	b00b883a 	mov	r5,r22
    c9b8:	000cbb00 	call	cbb0 <__mulsi3>
    c9bc:	e006943a 	slli	r3,fp,16
    c9c0:	b93fffcc 	andi	r4,r23,65535
    c9c4:	1906b03a 	or	r3,r3,r4
    c9c8:	1880042e 	bgeu	r3,r2,c9dc <__umoddi3+0x574>
    c9cc:	1cc7883a 	add	r3,r3,r19
    c9d0:	1cc00236 	bltu	r3,r19,c9dc <__umoddi3+0x574>
    c9d4:	1880012e 	bgeu	r3,r2,c9dc <__umoddi3+0x574>
    c9d8:	1cc7883a 	add	r3,r3,r19
    c9dc:	18a3c83a 	sub	r17,r3,r2
    c9e0:	003f1e06 	br	c65c <__alt_data_end+0xfffb6f2c>
    c9e4:	8ccfc83a 	sub	r7,r17,r19
    c9e8:	1d89c83a 	sub	r4,r3,r22
    c9ec:	89e3803a 	cmpltu	r17,r17,r7
    c9f0:	2463c83a 	sub	r17,r4,r17
    c9f4:	9449c83a 	sub	r4,r18,r17
    c9f8:	003fc006 	br	c8fc <__alt_data_end+0xfffb71cc>
    c9fc:	000b883a 	mov	r5,zero
    ca00:	002b883a 	mov	r21,zero
    ca04:	003eeb06 	br	c5b4 <__alt_data_end+0xfffb6e84>
    ca08:	01400404 	movi	r5,16
    ca0c:	282b883a 	mov	r21,r5
    ca10:	003ee806 	br	c5b4 <__alt_data_end+0xfffb6e84>
    ca14:	01400404 	movi	r5,16
    ca18:	2805883a 	mov	r2,r5
    ca1c:	003eaa06 	br	c4c8 <__alt_data_end+0xfffb6d98>
    ca20:	0005883a 	mov	r2,zero
    ca24:	0007883a 	mov	r3,zero
    ca28:	003eff06 	br	c628 <__alt_data_end+0xfffb6ef8>
    ca2c:	00800404 	movi	r2,16
    ca30:	1007883a 	mov	r3,r2
    ca34:	003efc06 	br	c628 <__alt_data_end+0xfffb6ef8>
    ca38:	000b883a 	mov	r5,zero
    ca3c:	0005883a 	mov	r2,zero
    ca40:	003ea106 	br	c4c8 <__alt_data_end+0xfffb6d98>
    ca44:	90bf802e 	bgeu	r18,r2,c848 <__alt_data_end+0xfffb7118>
    ca48:	bdffff84 	addi	r23,r23,-2
    ca4c:	95a5883a 	add	r18,r18,r22
    ca50:	003f7e06 	br	c84c <__alt_data_end+0xfffb711c>
    ca54:	18bf652e 	bgeu	r3,r2,c7ec <__alt_data_end+0xfffb70bc>
    ca58:	e73fff84 	addi	fp,fp,-2
    ca5c:	1d87883a 	add	r3,r3,r22
    ca60:	003f6306 	br	c7f0 <__alt_data_end+0xfffb70c0>
    ca64:	1cc7883a 	add	r3,r3,r19
    ca68:	003f0d06 	br	c6a0 <__alt_data_end+0xfffb6f70>
    ca6c:	8005883a 	mov	r2,r16
    ca70:	003edf06 	br	c5f0 <__alt_data_end+0xfffb6ec0>
    ca74:	847fdb36 	bltu	r16,r17,c9e4 <__alt_data_end+0xfffb72b4>
    ca78:	880f883a 	mov	r7,r17
    ca7c:	0009883a 	mov	r4,zero
    ca80:	003f9e06 	br	c8fc <__alt_data_end+0xfffb71cc>

0000ca84 <udivmodsi4>:
    ca84:	2900182e 	bgeu	r5,r4,cae8 <udivmodsi4+0x64>
    ca88:	28001716 	blt	r5,zero,cae8 <udivmodsi4+0x64>
    ca8c:	00800804 	movi	r2,32
    ca90:	00c00044 	movi	r3,1
    ca94:	00000206 	br	caa0 <udivmodsi4+0x1c>
    ca98:	10001126 	beq	r2,zero,cae0 <udivmodsi4+0x5c>
    ca9c:	28000516 	blt	r5,zero,cab4 <udivmodsi4+0x30>
    caa0:	294b883a 	add	r5,r5,r5
    caa4:	10bfffc4 	addi	r2,r2,-1
    caa8:	18c7883a 	add	r3,r3,r3
    caac:	293ffa36 	bltu	r5,r4,ca98 <__alt_data_end+0xfffb7368>
    cab0:	18000b26 	beq	r3,zero,cae0 <udivmodsi4+0x5c>
    cab4:	0005883a 	mov	r2,zero
    cab8:	21400236 	bltu	r4,r5,cac4 <udivmodsi4+0x40>
    cabc:	2149c83a 	sub	r4,r4,r5
    cac0:	10c4b03a 	or	r2,r2,r3
    cac4:	1806d07a 	srli	r3,r3,1
    cac8:	280ad07a 	srli	r5,r5,1
    cacc:	183ffa1e 	bne	r3,zero,cab8 <__alt_data_end+0xfffb7388>
    cad0:	3000011e 	bne	r6,zero,cad8 <udivmodsi4+0x54>
    cad4:	f800283a 	ret
    cad8:	2005883a 	mov	r2,r4
    cadc:	f800283a 	ret
    cae0:	0005883a 	mov	r2,zero
    cae4:	003ffa06 	br	cad0 <__alt_data_end+0xfffb73a0>
    cae8:	00c00044 	movi	r3,1
    caec:	003ff106 	br	cab4 <__alt_data_end+0xfffb7384>

0000caf0 <__divsi3>:
    caf0:	defffe04 	addi	sp,sp,-8
    caf4:	dfc00115 	stw	ra,4(sp)
    caf8:	dc000015 	stw	r16,0(sp)
    cafc:	20000b16 	blt	r4,zero,cb2c <__divsi3+0x3c>
    cb00:	0021883a 	mov	r16,zero
    cb04:	28000c16 	blt	r5,zero,cb38 <__divsi3+0x48>
    cb08:	000d883a 	mov	r6,zero
    cb0c:	000ca840 	call	ca84 <udivmodsi4>
    cb10:	0407c83a 	sub	r3,zero,r16
    cb14:	1884f03a 	xor	r2,r3,r2
    cb18:	1405883a 	add	r2,r2,r16
    cb1c:	dfc00117 	ldw	ra,4(sp)
    cb20:	dc000017 	ldw	r16,0(sp)
    cb24:	dec00204 	addi	sp,sp,8
    cb28:	f800283a 	ret
    cb2c:	0109c83a 	sub	r4,zero,r4
    cb30:	04000044 	movi	r16,1
    cb34:	283ff40e 	bge	r5,zero,cb08 <__alt_data_end+0xfffb73d8>
    cb38:	014bc83a 	sub	r5,zero,r5
    cb3c:	8400005c 	xori	r16,r16,1
    cb40:	003ff106 	br	cb08 <__alt_data_end+0xfffb73d8>

0000cb44 <__modsi3>:
    cb44:	defffd04 	addi	sp,sp,-12
    cb48:	dfc00215 	stw	ra,8(sp)
    cb4c:	dc400115 	stw	r17,4(sp)
    cb50:	dc000015 	stw	r16,0(sp)
    cb54:	20000c16 	blt	r4,zero,cb88 <__modsi3+0x44>
    cb58:	0023883a 	mov	r17,zero
    cb5c:	0021883a 	mov	r16,zero
    cb60:	28000d16 	blt	r5,zero,cb98 <__modsi3+0x54>
    cb64:	01800044 	movi	r6,1
    cb68:	000ca840 	call	ca84 <udivmodsi4>
    cb6c:	1404f03a 	xor	r2,r2,r16
    cb70:	8885883a 	add	r2,r17,r2
    cb74:	dfc00217 	ldw	ra,8(sp)
    cb78:	dc400117 	ldw	r17,4(sp)
    cb7c:	dc000017 	ldw	r16,0(sp)
    cb80:	dec00304 	addi	sp,sp,12
    cb84:	f800283a 	ret
    cb88:	0109c83a 	sub	r4,zero,r4
    cb8c:	04400044 	movi	r17,1
    cb90:	043fffc4 	movi	r16,-1
    cb94:	283ff30e 	bge	r5,zero,cb64 <__alt_data_end+0xfffb7434>
    cb98:	014bc83a 	sub	r5,zero,r5
    cb9c:	003ff106 	br	cb64 <__alt_data_end+0xfffb7434>

0000cba0 <__udivsi3>:
    cba0:	000d883a 	mov	r6,zero
    cba4:	000ca841 	jmpi	ca84 <udivmodsi4>

0000cba8 <__umodsi3>:
    cba8:	01800044 	movi	r6,1
    cbac:	000ca841 	jmpi	ca84 <udivmodsi4>

0000cbb0 <__mulsi3>:
    cbb0:	0005883a 	mov	r2,zero
    cbb4:	20000726 	beq	r4,zero,cbd4 <__mulsi3+0x24>
    cbb8:	20c0004c 	andi	r3,r4,1
    cbbc:	2008d07a 	srli	r4,r4,1
    cbc0:	18000126 	beq	r3,zero,cbc8 <__mulsi3+0x18>
    cbc4:	1145883a 	add	r2,r2,r5
    cbc8:	294b883a 	add	r5,r5,r5
    cbcc:	203ffa1e 	bne	r4,zero,cbb8 <__alt_data_end+0xfffb7488>
    cbd0:	f800283a 	ret
    cbd4:	f800283a 	ret

0000cbd8 <__adddf3>:
    cbd8:	02000434 	movhi	r8,16
    cbdc:	423fffc4 	addi	r8,r8,-1
    cbe0:	defffb04 	addi	sp,sp,-20
    cbe4:	2a12703a 	and	r9,r5,r8
    cbe8:	2806d7fa 	srli	r3,r5,31
    cbec:	3a10703a 	and	r8,r7,r8
    cbf0:	3804d53a 	srli	r2,r7,20
    cbf4:	3014d77a 	srli	r10,r6,29
    cbf8:	dc000015 	stw	r16,0(sp)
    cbfc:	481290fa 	slli	r9,r9,3
    cc00:	2820d53a 	srli	r16,r5,20
    cc04:	401090fa 	slli	r8,r8,3
    cc08:	200ad77a 	srli	r5,r4,29
    cc0c:	380ed7fa 	srli	r7,r7,31
    cc10:	dc800215 	stw	r18,8(sp)
    cc14:	dc400115 	stw	r17,4(sp)
    cc18:	dfc00415 	stw	ra,16(sp)
    cc1c:	dcc00315 	stw	r19,12(sp)
    cc20:	1c803fcc 	andi	r18,r3,255
    cc24:	8401ffcc 	andi	r16,r16,2047
    cc28:	494ab03a 	or	r5,r9,r5
    cc2c:	202290fa 	slli	r17,r4,3
    cc30:	1081ffcc 	andi	r2,r2,2047
    cc34:	4290b03a 	or	r8,r8,r10
    cc38:	300c90fa 	slli	r6,r6,3
    cc3c:	91c07026 	beq	r18,r7,ce00 <__adddf3+0x228>
    cc40:	8087c83a 	sub	r3,r16,r2
    cc44:	00c0b30e 	bge	zero,r3,cf14 <__adddf3+0x33c>
    cc48:	10002a1e 	bne	r2,zero,ccf4 <__adddf3+0x11c>
    cc4c:	4184b03a 	or	r2,r8,r6
    cc50:	1000991e 	bne	r2,zero,ceb8 <__adddf3+0x2e0>
    cc54:	888001cc 	andi	r2,r17,7
    cc58:	10005b26 	beq	r2,zero,cdc8 <__adddf3+0x1f0>
    cc5c:	88c003cc 	andi	r3,r17,15
    cc60:	00800104 	movi	r2,4
    cc64:	18805826 	beq	r3,r2,cdc8 <__adddf3+0x1f0>
    cc68:	89800104 	addi	r6,r17,4
    cc6c:	3463803a 	cmpltu	r17,r6,r17
    cc70:	2c4b883a 	add	r5,r5,r17
    cc74:	2880202c 	andhi	r2,r5,128
    cc78:	9007883a 	mov	r3,r18
    cc7c:	3023883a 	mov	r17,r6
    cc80:	10005426 	beq	r2,zero,cdd4 <__adddf3+0x1fc>
    cc84:	84000044 	addi	r16,r16,1
    cc88:	0081ffc4 	movi	r2,2047
    cc8c:	8080c126 	beq	r16,r2,cf94 <__adddf3+0x3bc>
    cc90:	013fe034 	movhi	r4,65408
    cc94:	213fffc4 	addi	r4,r4,-1
    cc98:	290a703a 	and	r5,r5,r4
    cc9c:	2804977a 	slli	r2,r5,29
    cca0:	280a927a 	slli	r5,r5,9
    cca4:	8822d0fa 	srli	r17,r17,3
    cca8:	8401ffcc 	andi	r16,r16,2047
    ccac:	2808d33a 	srli	r4,r5,12
    ccb0:	1444b03a 	or	r2,r2,r17
    ccb4:	8401ffcc 	andi	r16,r16,2047
    ccb8:	800a953a 	slli	r5,r16,20
    ccbc:	18c03fcc 	andi	r3,r3,255
    ccc0:	04000434 	movhi	r16,16
    ccc4:	180697fa 	slli	r3,r3,31
    ccc8:	843fffc4 	addi	r16,r16,-1
    cccc:	2420703a 	and	r16,r4,r16
    ccd0:	8160b03a 	or	r16,r16,r5
    ccd4:	80c6b03a 	or	r3,r16,r3
    ccd8:	dfc00417 	ldw	ra,16(sp)
    ccdc:	dcc00317 	ldw	r19,12(sp)
    cce0:	dc800217 	ldw	r18,8(sp)
    cce4:	dc400117 	ldw	r17,4(sp)
    cce8:	dc000017 	ldw	r16,0(sp)
    ccec:	dec00504 	addi	sp,sp,20
    ccf0:	f800283a 	ret
    ccf4:	0081ffc4 	movi	r2,2047
    ccf8:	80bfd626 	beq	r16,r2,cc54 <__alt_data_end+0xfffb7524>
    ccfc:	42002034 	orhi	r8,r8,128
    cd00:	00800e04 	movi	r2,56
    cd04:	10c0a616 	blt	r2,r3,cfa0 <__adddf3+0x3c8>
    cd08:	008007c4 	movi	r2,31
    cd0c:	10c0c916 	blt	r2,r3,d034 <__adddf3+0x45c>
    cd10:	00800804 	movi	r2,32
    cd14:	10c5c83a 	sub	r2,r2,r3
    cd18:	408e983a 	sll	r7,r8,r2
    cd1c:	30c8d83a 	srl	r4,r6,r3
    cd20:	3084983a 	sll	r2,r6,r2
    cd24:	40c6d83a 	srl	r3,r8,r3
    cd28:	390cb03a 	or	r6,r7,r4
    cd2c:	1004c03a 	cmpne	r2,r2,zero
    cd30:	308cb03a 	or	r6,r6,r2
    cd34:	898dc83a 	sub	r6,r17,r6
    cd38:	89a3803a 	cmpltu	r17,r17,r6
    cd3c:	28cbc83a 	sub	r5,r5,r3
    cd40:	2c4bc83a 	sub	r5,r5,r17
    cd44:	3023883a 	mov	r17,r6
    cd48:	2880202c 	andhi	r2,r5,128
    cd4c:	10006d26 	beq	r2,zero,cf04 <__adddf3+0x32c>
    cd50:	04c02034 	movhi	r19,128
    cd54:	9cffffc4 	addi	r19,r19,-1
    cd58:	2ce6703a 	and	r19,r5,r19
    cd5c:	98007e26 	beq	r19,zero,cf58 <__adddf3+0x380>
    cd60:	9809883a 	mov	r4,r19
    cd64:	000f3700 	call	f370 <__clzsi2>
    cd68:	10fffe04 	addi	r3,r2,-8
    cd6c:	010007c4 	movi	r4,31
    cd70:	20c07f16 	blt	r4,r3,cf70 <__adddf3+0x398>
    cd74:	01400a04 	movi	r5,40
    cd78:	2885c83a 	sub	r2,r5,r2
    cd7c:	888ad83a 	srl	r5,r17,r2
    cd80:	98e6983a 	sll	r19,r19,r3
    cd84:	88e2983a 	sll	r17,r17,r3
    cd88:	2ce6b03a 	or	r19,r5,r19
    cd8c:	1c007c16 	blt	r3,r16,cf80 <__adddf3+0x3a8>
    cd90:	1c21c83a 	sub	r16,r3,r16
    cd94:	81400044 	addi	r5,r16,1
    cd98:	00c007c4 	movi	r3,31
    cd9c:	19409816 	blt	r3,r5,d000 <__adddf3+0x428>
    cda0:	1c21c83a 	sub	r16,r3,r16
    cda4:	8c08983a 	sll	r4,r17,r16
    cda8:	8946d83a 	srl	r3,r17,r5
    cdac:	9c20983a 	sll	r16,r19,r16
    cdb0:	2008c03a 	cmpne	r4,r4,zero
    cdb4:	994ad83a 	srl	r5,r19,r5
    cdb8:	1c06b03a 	or	r3,r3,r16
    cdbc:	1922b03a 	or	r17,r3,r4
    cdc0:	0021883a 	mov	r16,zero
    cdc4:	003fa306 	br	cc54 <__alt_data_end+0xfffb7524>
    cdc8:	2880202c 	andhi	r2,r5,128
    cdcc:	9007883a 	mov	r3,r18
    cdd0:	103fac1e 	bne	r2,zero,cc84 <__alt_data_end+0xfffb7554>
    cdd4:	2804977a 	slli	r2,r5,29
    cdd8:	8822d0fa 	srli	r17,r17,3
    cddc:	0101ffc4 	movi	r4,2047
    cde0:	280ad0fa 	srli	r5,r5,3
    cde4:	1444b03a 	or	r2,r2,r17
    cde8:	81002c26 	beq	r16,r4,ce9c <__adddf3+0x2c4>
    cdec:	8120703a 	and	r16,r16,r4
    cdf0:	01000434 	movhi	r4,16
    cdf4:	213fffc4 	addi	r4,r4,-1
    cdf8:	2908703a 	and	r4,r5,r4
    cdfc:	003fad06 	br	ccb4 <__alt_data_end+0xfffb7584>
    ce00:	8089c83a 	sub	r4,r16,r2
    ce04:	01006a0e 	bge	zero,r4,cfb0 <__adddf3+0x3d8>
    ce08:	10003326 	beq	r2,zero,ced8 <__adddf3+0x300>
    ce0c:	0081ffc4 	movi	r2,2047
    ce10:	80bf9026 	beq	r16,r2,cc54 <__alt_data_end+0xfffb7524>
    ce14:	42002034 	orhi	r8,r8,128
    ce18:	00800e04 	movi	r2,56
    ce1c:	1100b116 	blt	r2,r4,d0e4 <__adddf3+0x50c>
    ce20:	008007c4 	movi	r2,31
    ce24:	1100e216 	blt	r2,r4,d1b0 <__adddf3+0x5d8>
    ce28:	00800804 	movi	r2,32
    ce2c:	1105c83a 	sub	r2,r2,r4
    ce30:	4092983a 	sll	r9,r8,r2
    ce34:	310ed83a 	srl	r7,r6,r4
    ce38:	3084983a 	sll	r2,r6,r2
    ce3c:	4110d83a 	srl	r8,r8,r4
    ce40:	49ccb03a 	or	r6,r9,r7
    ce44:	1004c03a 	cmpne	r2,r2,zero
    ce48:	308cb03a 	or	r6,r6,r2
    ce4c:	344d883a 	add	r6,r6,r17
    ce50:	3463803a 	cmpltu	r17,r6,r17
    ce54:	414b883a 	add	r5,r8,r5
    ce58:	2c4b883a 	add	r5,r5,r17
    ce5c:	3023883a 	mov	r17,r6
    ce60:	2880202c 	andhi	r2,r5,128
    ce64:	10002726 	beq	r2,zero,cf04 <__adddf3+0x32c>
    ce68:	84000044 	addi	r16,r16,1
    ce6c:	0081ffc4 	movi	r2,2047
    ce70:	8080ae26 	beq	r16,r2,d12c <__adddf3+0x554>
    ce74:	00bfe034 	movhi	r2,65408
    ce78:	10bfffc4 	addi	r2,r2,-1
    ce7c:	288a703a 	and	r5,r5,r2
    ce80:	880cd07a 	srli	r6,r17,1
    ce84:	280897fa 	slli	r4,r5,31
    ce88:	88c0004c 	andi	r3,r17,1
    ce8c:	30e2b03a 	or	r17,r6,r3
    ce90:	280ad07a 	srli	r5,r5,1
    ce94:	8922b03a 	or	r17,r17,r4
    ce98:	003f6e06 	br	cc54 <__alt_data_end+0xfffb7524>
    ce9c:	1148b03a 	or	r4,r2,r5
    cea0:	20003c26 	beq	r4,zero,cf94 <__adddf3+0x3bc>
    cea4:	29000234 	orhi	r4,r5,8
    cea8:	01400434 	movhi	r5,16
    ceac:	297fffc4 	addi	r5,r5,-1
    ceb0:	2148703a 	and	r4,r4,r5
    ceb4:	003f7f06 	br	ccb4 <__alt_data_end+0xfffb7584>
    ceb8:	18ffffc4 	addi	r3,r3,-1
    cebc:	18004d1e 	bne	r3,zero,cff4 <__adddf3+0x41c>
    cec0:	898dc83a 	sub	r6,r17,r6
    cec4:	89a3803a 	cmpltu	r17,r17,r6
    cec8:	2a0bc83a 	sub	r5,r5,r8
    cecc:	2c4bc83a 	sub	r5,r5,r17
    ced0:	3023883a 	mov	r17,r6
    ced4:	003f9c06 	br	cd48 <__alt_data_end+0xfffb7618>
    ced8:	4184b03a 	or	r2,r8,r6
    cedc:	103f5d26 	beq	r2,zero,cc54 <__alt_data_end+0xfffb7524>
    cee0:	213fffc4 	addi	r4,r4,-1
    cee4:	203fd926 	beq	r4,zero,ce4c <__alt_data_end+0xfffb771c>
    cee8:	0081ffc4 	movi	r2,2047
    ceec:	80bfca1e 	bne	r16,r2,ce18 <__alt_data_end+0xfffb76e8>
    cef0:	003f5806 	br	cc54 <__alt_data_end+0xfffb7524>
    cef4:	10c8b03a 	or	r4,r2,r3
    cef8:	20008b26 	beq	r4,zero,d128 <__adddf3+0x550>
    cefc:	100b883a 	mov	r5,r2
    cf00:	1823883a 	mov	r17,r3
    cf04:	888001cc 	andi	r2,r17,7
    cf08:	103f541e 	bne	r2,zero,cc5c <__alt_data_end+0xfffb752c>
    cf0c:	9007883a 	mov	r3,r18
    cf10:	003fb006 	br	cdd4 <__alt_data_end+0xfffb76a4>
    cf14:	1800531e 	bne	r3,zero,d064 <__adddf3+0x48c>
    cf18:	80800044 	addi	r2,r16,1
    cf1c:	1081ffcc 	andi	r2,r2,2047
    cf20:	00c00044 	movi	r3,1
    cf24:	1880990e 	bge	r3,r2,d18c <__adddf3+0x5b4>
    cf28:	8985c83a 	sub	r2,r17,r6
    cf2c:	8887803a 	cmpltu	r3,r17,r2
    cf30:	2a27c83a 	sub	r19,r5,r8
    cf34:	98e7c83a 	sub	r19,r19,r3
    cf38:	98c0202c 	andhi	r3,r19,128
    cf3c:	18006226 	beq	r3,zero,d0c8 <__adddf3+0x4f0>
    cf40:	3463c83a 	sub	r17,r6,r17
    cf44:	4151c83a 	sub	r8,r8,r5
    cf48:	344d803a 	cmpltu	r6,r6,r17
    cf4c:	41a7c83a 	sub	r19,r8,r6
    cf50:	3825883a 	mov	r18,r7
    cf54:	983f821e 	bne	r19,zero,cd60 <__alt_data_end+0xfffb7630>
    cf58:	8809883a 	mov	r4,r17
    cf5c:	000f3700 	call	f370 <__clzsi2>
    cf60:	10800804 	addi	r2,r2,32
    cf64:	10fffe04 	addi	r3,r2,-8
    cf68:	010007c4 	movi	r4,31
    cf6c:	20ff810e 	bge	r4,r3,cd74 <__alt_data_end+0xfffb7644>
    cf70:	14fff604 	addi	r19,r2,-40
    cf74:	8ce6983a 	sll	r19,r17,r19
    cf78:	0023883a 	mov	r17,zero
    cf7c:	1c3f840e 	bge	r3,r16,cd90 <__alt_data_end+0xfffb7660>
    cf80:	017fe034 	movhi	r5,65408
    cf84:	297fffc4 	addi	r5,r5,-1
    cf88:	80e1c83a 	sub	r16,r16,r3
    cf8c:	994a703a 	and	r5,r19,r5
    cf90:	003f3006 	br	cc54 <__alt_data_end+0xfffb7524>
    cf94:	0009883a 	mov	r4,zero
    cf98:	0005883a 	mov	r2,zero
    cf9c:	003f4506 	br	ccb4 <__alt_data_end+0xfffb7584>
    cfa0:	418cb03a 	or	r6,r8,r6
    cfa4:	300cc03a 	cmpne	r6,r6,zero
    cfa8:	0007883a 	mov	r3,zero
    cfac:	003f6106 	br	cd34 <__alt_data_end+0xfffb7604>
    cfb0:	2000921e 	bne	r4,zero,d1fc <__adddf3+0x624>
    cfb4:	80800044 	addi	r2,r16,1
    cfb8:	11c1ffcc 	andi	r7,r2,2047
    cfbc:	01000044 	movi	r4,1
    cfc0:	21c0610e 	bge	r4,r7,d148 <__adddf3+0x570>
    cfc4:	0101ffc4 	movi	r4,2047
    cfc8:	1100a326 	beq	r2,r4,d258 <__adddf3+0x680>
    cfcc:	344d883a 	add	r6,r6,r17
    cfd0:	3463803a 	cmpltu	r17,r6,r17
    cfd4:	414b883a 	add	r5,r8,r5
    cfd8:	2c4b883a 	add	r5,r5,r17
    cfdc:	282297fa 	slli	r17,r5,31
    cfe0:	300cd07a 	srli	r6,r6,1
    cfe4:	280ad07a 	srli	r5,r5,1
    cfe8:	1021883a 	mov	r16,r2
    cfec:	89a2b03a 	or	r17,r17,r6
    cff0:	003f1806 	br	cc54 <__alt_data_end+0xfffb7524>
    cff4:	0081ffc4 	movi	r2,2047
    cff8:	80bf411e 	bne	r16,r2,cd00 <__alt_data_end+0xfffb75d0>
    cffc:	003f1506 	br	cc54 <__alt_data_end+0xfffb7524>
    d000:	80bff844 	addi	r2,r16,-31
    d004:	00c00804 	movi	r3,32
    d008:	9884d83a 	srl	r2,r19,r2
    d00c:	28c04a26 	beq	r5,r3,d138 <__adddf3+0x560>
    d010:	00c00fc4 	movi	r3,63
    d014:	1c21c83a 	sub	r16,r3,r16
    d018:	9c26983a 	sll	r19,r19,r16
    d01c:	9c62b03a 	or	r17,r19,r17
    d020:	8822c03a 	cmpne	r17,r17,zero
    d024:	88a2b03a 	or	r17,r17,r2
    d028:	000b883a 	mov	r5,zero
    d02c:	0021883a 	mov	r16,zero
    d030:	003fb406 	br	cf04 <__alt_data_end+0xfffb77d4>
    d034:	18bff804 	addi	r2,r3,-32
    d038:	01000804 	movi	r4,32
    d03c:	4084d83a 	srl	r2,r8,r2
    d040:	19003f26 	beq	r3,r4,d140 <__adddf3+0x568>
    d044:	01001004 	movi	r4,64
    d048:	20c7c83a 	sub	r3,r4,r3
    d04c:	40d0983a 	sll	r8,r8,r3
    d050:	418cb03a 	or	r6,r8,r6
    d054:	300cc03a 	cmpne	r6,r6,zero
    d058:	308cb03a 	or	r6,r6,r2
    d05c:	0007883a 	mov	r3,zero
    d060:	003f3406 	br	cd34 <__alt_data_end+0xfffb7604>
    d064:	80002326 	beq	r16,zero,d0f4 <__adddf3+0x51c>
    d068:	0101ffc4 	movi	r4,2047
    d06c:	11005e26 	beq	r2,r4,d1e8 <__adddf3+0x610>
    d070:	00c7c83a 	sub	r3,zero,r3
    d074:	29402034 	orhi	r5,r5,128
    d078:	01000e04 	movi	r4,56
    d07c:	20c07216 	blt	r4,r3,d248 <__adddf3+0x670>
    d080:	010007c4 	movi	r4,31
    d084:	20c0ce16 	blt	r4,r3,d3c0 <__adddf3+0x7e8>
    d088:	01000804 	movi	r4,32
    d08c:	20c9c83a 	sub	r4,r4,r3
    d090:	2914983a 	sll	r10,r5,r4
    d094:	88d2d83a 	srl	r9,r17,r3
    d098:	8908983a 	sll	r4,r17,r4
    d09c:	28c6d83a 	srl	r3,r5,r3
    d0a0:	5262b03a 	or	r17,r10,r9
    d0a4:	2008c03a 	cmpne	r4,r4,zero
    d0a8:	8922b03a 	or	r17,r17,r4
    d0ac:	3463c83a 	sub	r17,r6,r17
    d0b0:	40c7c83a 	sub	r3,r8,r3
    d0b4:	344d803a 	cmpltu	r6,r6,r17
    d0b8:	198bc83a 	sub	r5,r3,r6
    d0bc:	1021883a 	mov	r16,r2
    d0c0:	3825883a 	mov	r18,r7
    d0c4:	003f2006 	br	cd48 <__alt_data_end+0xfffb7618>
    d0c8:	9886b03a 	or	r3,r19,r2
    d0cc:	1800141e 	bne	r3,zero,d120 <__adddf3+0x548>
    d0d0:	0007883a 	mov	r3,zero
    d0d4:	000b883a 	mov	r5,zero
    d0d8:	0023883a 	mov	r17,zero
    d0dc:	0021883a 	mov	r16,zero
    d0e0:	003f3c06 	br	cdd4 <__alt_data_end+0xfffb76a4>
    d0e4:	418cb03a 	or	r6,r8,r6
    d0e8:	300cc03a 	cmpne	r6,r6,zero
    d0ec:	0011883a 	mov	r8,zero
    d0f0:	003f5606 	br	ce4c <__alt_data_end+0xfffb771c>
    d0f4:	2c48b03a 	or	r4,r5,r17
    d0f8:	20003b26 	beq	r4,zero,d1e8 <__adddf3+0x610>
    d0fc:	00c6303a 	nor	r3,zero,r3
    d100:	1800371e 	bne	r3,zero,d1e0 <__adddf3+0x608>
    d104:	3463c83a 	sub	r17,r6,r17
    d108:	414bc83a 	sub	r5,r8,r5
    d10c:	344d803a 	cmpltu	r6,r6,r17
    d110:	298bc83a 	sub	r5,r5,r6
    d114:	1021883a 	mov	r16,r2
    d118:	3825883a 	mov	r18,r7
    d11c:	003f0a06 	br	cd48 <__alt_data_end+0xfffb7618>
    d120:	1023883a 	mov	r17,r2
    d124:	003f0d06 	br	cd5c <__alt_data_end+0xfffb762c>
    d128:	0007883a 	mov	r3,zero
    d12c:	000b883a 	mov	r5,zero
    d130:	0023883a 	mov	r17,zero
    d134:	003f2706 	br	cdd4 <__alt_data_end+0xfffb76a4>
    d138:	0027883a 	mov	r19,zero
    d13c:	003fb706 	br	d01c <__alt_data_end+0xfffb78ec>
    d140:	0011883a 	mov	r8,zero
    d144:	003fc206 	br	d050 <__alt_data_end+0xfffb7920>
    d148:	2c44b03a 	or	r2,r5,r17
    d14c:	8000871e 	bne	r16,zero,d36c <__adddf3+0x794>
    d150:	1000b126 	beq	r2,zero,d418 <__adddf3+0x840>
    d154:	4184b03a 	or	r2,r8,r6
    d158:	103ebe26 	beq	r2,zero,cc54 <__alt_data_end+0xfffb7524>
    d15c:	3445883a 	add	r2,r6,r17
    d160:	1463803a 	cmpltu	r17,r2,r17
    d164:	414b883a 	add	r5,r8,r5
    d168:	2c4b883a 	add	r5,r5,r17
    d16c:	28c0202c 	andhi	r3,r5,128
    d170:	1023883a 	mov	r17,r2
    d174:	183f6326 	beq	r3,zero,cf04 <__alt_data_end+0xfffb77d4>
    d178:	00bfe034 	movhi	r2,65408
    d17c:	10bfffc4 	addi	r2,r2,-1
    d180:	2021883a 	mov	r16,r4
    d184:	288a703a 	and	r5,r5,r2
    d188:	003eb206 	br	cc54 <__alt_data_end+0xfffb7524>
    d18c:	2c44b03a 	or	r2,r5,r17
    d190:	8000251e 	bne	r16,zero,d228 <__adddf3+0x650>
    d194:	10004b1e 	bne	r2,zero,d2c4 <__adddf3+0x6ec>
    d198:	4184b03a 	or	r2,r8,r6
    d19c:	103fe226 	beq	r2,zero,d128 <__alt_data_end+0xfffb79f8>
    d1a0:	400b883a 	mov	r5,r8
    d1a4:	3023883a 	mov	r17,r6
    d1a8:	3825883a 	mov	r18,r7
    d1ac:	003ea906 	br	cc54 <__alt_data_end+0xfffb7524>
    d1b0:	20bff804 	addi	r2,r4,-32
    d1b4:	01c00804 	movi	r7,32
    d1b8:	4084d83a 	srl	r2,r8,r2
    d1bc:	21c07e26 	beq	r4,r7,d3b8 <__adddf3+0x7e0>
    d1c0:	01c01004 	movi	r7,64
    d1c4:	3909c83a 	sub	r4,r7,r4
    d1c8:	4110983a 	sll	r8,r8,r4
    d1cc:	418cb03a 	or	r6,r8,r6
    d1d0:	300cc03a 	cmpne	r6,r6,zero
    d1d4:	308cb03a 	or	r6,r6,r2
    d1d8:	0011883a 	mov	r8,zero
    d1dc:	003f1b06 	br	ce4c <__alt_data_end+0xfffb771c>
    d1e0:	0101ffc4 	movi	r4,2047
    d1e4:	113fa41e 	bne	r2,r4,d078 <__alt_data_end+0xfffb7948>
    d1e8:	400b883a 	mov	r5,r8
    d1ec:	3023883a 	mov	r17,r6
    d1f0:	1021883a 	mov	r16,r2
    d1f4:	3825883a 	mov	r18,r7
    d1f8:	003e9606 	br	cc54 <__alt_data_end+0xfffb7524>
    d1fc:	80001a1e 	bne	r16,zero,d268 <__adddf3+0x690>
    d200:	2c4eb03a 	or	r7,r5,r17
    d204:	38005526 	beq	r7,zero,d35c <__adddf3+0x784>
    d208:	0108303a 	nor	r4,zero,r4
    d20c:	2000511e 	bne	r4,zero,d354 <__adddf3+0x77c>
    d210:	89a3883a 	add	r17,r17,r6
    d214:	414b883a 	add	r5,r8,r5
    d218:	898d803a 	cmpltu	r6,r17,r6
    d21c:	298b883a 	add	r5,r5,r6
    d220:	1021883a 	mov	r16,r2
    d224:	003f0e06 	br	ce60 <__alt_data_end+0xfffb7730>
    d228:	1000341e 	bne	r2,zero,d2fc <__adddf3+0x724>
    d22c:	4184b03a 	or	r2,r8,r6
    d230:	10006f26 	beq	r2,zero,d3f0 <__adddf3+0x818>
    d234:	400b883a 	mov	r5,r8
    d238:	3023883a 	mov	r17,r6
    d23c:	3825883a 	mov	r18,r7
    d240:	0401ffc4 	movi	r16,2047
    d244:	003e8306 	br	cc54 <__alt_data_end+0xfffb7524>
    d248:	2c62b03a 	or	r17,r5,r17
    d24c:	8822c03a 	cmpne	r17,r17,zero
    d250:	0007883a 	mov	r3,zero
    d254:	003f9506 	br	d0ac <__alt_data_end+0xfffb797c>
    d258:	1021883a 	mov	r16,r2
    d25c:	000b883a 	mov	r5,zero
    d260:	0023883a 	mov	r17,zero
    d264:	003edb06 	br	cdd4 <__alt_data_end+0xfffb76a4>
    d268:	01c1ffc4 	movi	r7,2047
    d26c:	11c03b26 	beq	r2,r7,d35c <__adddf3+0x784>
    d270:	0109c83a 	sub	r4,zero,r4
    d274:	29402034 	orhi	r5,r5,128
    d278:	01c00e04 	movi	r7,56
    d27c:	39006216 	blt	r7,r4,d408 <__adddf3+0x830>
    d280:	01c007c4 	movi	r7,31
    d284:	39006b16 	blt	r7,r4,d434 <__adddf3+0x85c>
    d288:	01c00804 	movi	r7,32
    d28c:	390fc83a 	sub	r7,r7,r4
    d290:	29d4983a 	sll	r10,r5,r7
    d294:	8912d83a 	srl	r9,r17,r4
    d298:	89ce983a 	sll	r7,r17,r7
    d29c:	2908d83a 	srl	r4,r5,r4
    d2a0:	5262b03a 	or	r17,r10,r9
    d2a4:	380ac03a 	cmpne	r5,r7,zero
    d2a8:	8962b03a 	or	r17,r17,r5
    d2ac:	89a3883a 	add	r17,r17,r6
    d2b0:	2211883a 	add	r8,r4,r8
    d2b4:	898d803a 	cmpltu	r6,r17,r6
    d2b8:	418b883a 	add	r5,r8,r6
    d2bc:	1021883a 	mov	r16,r2
    d2c0:	003ee706 	br	ce60 <__alt_data_end+0xfffb7730>
    d2c4:	4184b03a 	or	r2,r8,r6
    d2c8:	103e6226 	beq	r2,zero,cc54 <__alt_data_end+0xfffb7524>
    d2cc:	8987c83a 	sub	r3,r17,r6
    d2d0:	88c9803a 	cmpltu	r4,r17,r3
    d2d4:	2a05c83a 	sub	r2,r5,r8
    d2d8:	1105c83a 	sub	r2,r2,r4
    d2dc:	1100202c 	andhi	r4,r2,128
    d2e0:	203f0426 	beq	r4,zero,cef4 <__alt_data_end+0xfffb77c4>
    d2e4:	3463c83a 	sub	r17,r6,r17
    d2e8:	414bc83a 	sub	r5,r8,r5
    d2ec:	344d803a 	cmpltu	r6,r6,r17
    d2f0:	298bc83a 	sub	r5,r5,r6
    d2f4:	3825883a 	mov	r18,r7
    d2f8:	003e5606 	br	cc54 <__alt_data_end+0xfffb7524>
    d2fc:	4184b03a 	or	r2,r8,r6
    d300:	10002b26 	beq	r2,zero,d3b0 <__adddf3+0x7d8>
    d304:	2804d0fa 	srli	r2,r5,3
    d308:	8822d0fa 	srli	r17,r17,3
    d30c:	280a977a 	slli	r5,r5,29
    d310:	10c0022c 	andhi	r3,r2,8
    d314:	2c62b03a 	or	r17,r5,r17
    d318:	18000826 	beq	r3,zero,d33c <__adddf3+0x764>
    d31c:	4008d0fa 	srli	r4,r8,3
    d320:	20c0022c 	andhi	r3,r4,8
    d324:	1800051e 	bne	r3,zero,d33c <__adddf3+0x764>
    d328:	300cd0fa 	srli	r6,r6,3
    d32c:	4010977a 	slli	r8,r8,29
    d330:	2005883a 	mov	r2,r4
    d334:	3825883a 	mov	r18,r7
    d338:	41a2b03a 	or	r17,r8,r6
    d33c:	880ad77a 	srli	r5,r17,29
    d340:	100490fa 	slli	r2,r2,3
    d344:	882290fa 	slli	r17,r17,3
    d348:	0401ffc4 	movi	r16,2047
    d34c:	288ab03a 	or	r5,r5,r2
    d350:	003e4006 	br	cc54 <__alt_data_end+0xfffb7524>
    d354:	01c1ffc4 	movi	r7,2047
    d358:	11ffc71e 	bne	r2,r7,d278 <__alt_data_end+0xfffb7b48>
    d35c:	400b883a 	mov	r5,r8
    d360:	3023883a 	mov	r17,r6
    d364:	1021883a 	mov	r16,r2
    d368:	003e3a06 	br	cc54 <__alt_data_end+0xfffb7524>
    d36c:	10002d26 	beq	r2,zero,d424 <__adddf3+0x84c>
    d370:	4184b03a 	or	r2,r8,r6
    d374:	10000e26 	beq	r2,zero,d3b0 <__adddf3+0x7d8>
    d378:	2804d0fa 	srli	r2,r5,3
    d37c:	8822d0fa 	srli	r17,r17,3
    d380:	280a977a 	slli	r5,r5,29
    d384:	10c0022c 	andhi	r3,r2,8
    d388:	2c62b03a 	or	r17,r5,r17
    d38c:	183feb26 	beq	r3,zero,d33c <__alt_data_end+0xfffb7c0c>
    d390:	4008d0fa 	srli	r4,r8,3
    d394:	20c0022c 	andhi	r3,r4,8
    d398:	183fe81e 	bne	r3,zero,d33c <__alt_data_end+0xfffb7c0c>
    d39c:	300cd0fa 	srli	r6,r6,3
    d3a0:	4010977a 	slli	r8,r8,29
    d3a4:	2005883a 	mov	r2,r4
    d3a8:	41a2b03a 	or	r17,r8,r6
    d3ac:	003fe306 	br	d33c <__alt_data_end+0xfffb7c0c>
    d3b0:	0401ffc4 	movi	r16,2047
    d3b4:	003e2706 	br	cc54 <__alt_data_end+0xfffb7524>
    d3b8:	0011883a 	mov	r8,zero
    d3bc:	003f8306 	br	d1cc <__alt_data_end+0xfffb7a9c>
    d3c0:	193ff804 	addi	r4,r3,-32
    d3c4:	02400804 	movi	r9,32
    d3c8:	2908d83a 	srl	r4,r5,r4
    d3cc:	1a402526 	beq	r3,r9,d464 <__adddf3+0x88c>
    d3d0:	02401004 	movi	r9,64
    d3d4:	48c7c83a 	sub	r3,r9,r3
    d3d8:	28ca983a 	sll	r5,r5,r3
    d3dc:	2c62b03a 	or	r17,r5,r17
    d3e0:	8822c03a 	cmpne	r17,r17,zero
    d3e4:	8922b03a 	or	r17,r17,r4
    d3e8:	0007883a 	mov	r3,zero
    d3ec:	003f2f06 	br	d0ac <__alt_data_end+0xfffb797c>
    d3f0:	01402034 	movhi	r5,128
    d3f4:	0007883a 	mov	r3,zero
    d3f8:	297fffc4 	addi	r5,r5,-1
    d3fc:	047ffe04 	movi	r17,-8
    d400:	0401ffc4 	movi	r16,2047
    d404:	003e7306 	br	cdd4 <__alt_data_end+0xfffb76a4>
    d408:	2c62b03a 	or	r17,r5,r17
    d40c:	8822c03a 	cmpne	r17,r17,zero
    d410:	0009883a 	mov	r4,zero
    d414:	003fa506 	br	d2ac <__alt_data_end+0xfffb7b7c>
    d418:	400b883a 	mov	r5,r8
    d41c:	3023883a 	mov	r17,r6
    d420:	003e0c06 	br	cc54 <__alt_data_end+0xfffb7524>
    d424:	400b883a 	mov	r5,r8
    d428:	3023883a 	mov	r17,r6
    d42c:	0401ffc4 	movi	r16,2047
    d430:	003e0806 	br	cc54 <__alt_data_end+0xfffb7524>
    d434:	21fff804 	addi	r7,r4,-32
    d438:	02400804 	movi	r9,32
    d43c:	29ced83a 	srl	r7,r5,r7
    d440:	22400a26 	beq	r4,r9,d46c <__adddf3+0x894>
    d444:	02401004 	movi	r9,64
    d448:	4909c83a 	sub	r4,r9,r4
    d44c:	290a983a 	sll	r5,r5,r4
    d450:	2c62b03a 	or	r17,r5,r17
    d454:	8822c03a 	cmpne	r17,r17,zero
    d458:	89e2b03a 	or	r17,r17,r7
    d45c:	0009883a 	mov	r4,zero
    d460:	003f9206 	br	d2ac <__alt_data_end+0xfffb7b7c>
    d464:	000b883a 	mov	r5,zero
    d468:	003fdc06 	br	d3dc <__alt_data_end+0xfffb7cac>
    d46c:	000b883a 	mov	r5,zero
    d470:	003ff706 	br	d450 <__alt_data_end+0xfffb7d20>

0000d474 <__divdf3>:
    d474:	defff004 	addi	sp,sp,-64
    d478:	dc800815 	stw	r18,32(sp)
    d47c:	2824d53a 	srli	r18,r5,20
    d480:	dd800c15 	stw	r22,48(sp)
    d484:	282cd7fa 	srli	r22,r5,31
    d488:	dc000615 	stw	r16,24(sp)
    d48c:	04000434 	movhi	r16,16
    d490:	df000e15 	stw	fp,56(sp)
    d494:	dd000a15 	stw	r20,40(sp)
    d498:	dcc00915 	stw	r19,36(sp)
    d49c:	dc400715 	stw	r17,28(sp)
    d4a0:	843fffc4 	addi	r16,r16,-1
    d4a4:	dfc00f15 	stw	ra,60(sp)
    d4a8:	ddc00d15 	stw	r23,52(sp)
    d4ac:	dd400b15 	stw	r21,44(sp)
    d4b0:	9481ffcc 	andi	r18,r18,2047
    d4b4:	2029883a 	mov	r20,r4
    d4b8:	2027883a 	mov	r19,r4
    d4bc:	2c22703a 	and	r17,r5,r16
    d4c0:	b7003fcc 	andi	fp,r22,255
    d4c4:	90005e26 	beq	r18,zero,d640 <__divdf3+0x1cc>
    d4c8:	0081ffc4 	movi	r2,2047
    d4cc:	90803526 	beq	r18,r2,d5a4 <__divdf3+0x130>
    d4d0:	8c000434 	orhi	r16,r17,16
    d4d4:	2004d77a 	srli	r2,r4,29
    d4d8:	802090fa 	slli	r16,r16,3
    d4dc:	202690fa 	slli	r19,r4,3
    d4e0:	94bf0044 	addi	r18,r18,-1023
    d4e4:	80a2b03a 	or	r17,r16,r2
    d4e8:	0029883a 	mov	r20,zero
    d4ec:	0011883a 	mov	r8,zero
    d4f0:	380ad53a 	srli	r5,r7,20
    d4f4:	382ed7fa 	srli	r23,r7,31
    d4f8:	04000434 	movhi	r16,16
    d4fc:	843fffc4 	addi	r16,r16,-1
    d500:	2941ffcc 	andi	r5,r5,2047
    d504:	302b883a 	mov	r21,r6
    d508:	3c20703a 	and	r16,r7,r16
    d50c:	ba403fcc 	andi	r9,r23,255
    d510:	28006726 	beq	r5,zero,d6b0 <__divdf3+0x23c>
    d514:	0081ffc4 	movi	r2,2047
    d518:	28805f26 	beq	r5,r2,d698 <__divdf3+0x224>
    d51c:	84000434 	orhi	r16,r16,16
    d520:	3004d77a 	srli	r2,r6,29
    d524:	802090fa 	slli	r16,r16,3
    d528:	302a90fa 	slli	r21,r6,3
    d52c:	297f0044 	addi	r5,r5,-1023
    d530:	80a0b03a 	or	r16,r16,r2
    d534:	000f883a 	mov	r7,zero
    d538:	3d06b03a 	or	r3,r7,r20
    d53c:	180690ba 	slli	r3,r3,2
    d540:	00800074 	movhi	r2,1
    d544:	10b55904 	addi	r2,r2,-10908
    d548:	1885883a 	add	r2,r3,r2
    d54c:	10800017 	ldw	r2,0(r2)
    d550:	b5c8f03a 	xor	r4,r22,r23
    d554:	200d883a 	mov	r6,r4
    d558:	25003fcc 	andi	r20,r4,255
    d55c:	9165c83a 	sub	r18,r18,r5
    d560:	1000683a 	jmp	r2
    d564:	0000d7ac 	andhi	zero,zero,862
    d568:	0000d5dc 	xori	zero,zero,855
    d56c:	0000d770 	cmpltui	zero,zero,861
    d570:	0000d5c0 	call	d5c <setup_keyboard+0x6bc>
    d574:	0000d770 	cmpltui	zero,zero,861
    d578:	0000d744 	movi	zero,861
    d57c:	0000d770 	cmpltui	zero,zero,861
    d580:	0000d5c0 	call	d5c <setup_keyboard+0x6bc>
    d584:	0000d5dc 	xori	zero,zero,855
    d588:	0000d5dc 	xori	zero,zero,855
    d58c:	0000d744 	movi	zero,861
    d590:	0000d5c0 	call	d5c <setup_keyboard+0x6bc>
    d594:	0000d5d0 	cmplti	zero,zero,855
    d598:	0000d5d0 	cmplti	zero,zero,855
    d59c:	0000d5d0 	cmplti	zero,zero,855
    d5a0:	0000d780 	call	d78 <setup_keyboard+0x6d8>
    d5a4:	8904b03a 	or	r2,r17,r4
    d5a8:	1000631e 	bne	r2,zero,d738 <__divdf3+0x2c4>
    d5ac:	05000204 	movi	r20,8
    d5b0:	0023883a 	mov	r17,zero
    d5b4:	0027883a 	mov	r19,zero
    d5b8:	02000084 	movi	r8,2
    d5bc:	003fcc06 	br	d4f0 <__alt_data_end+0xfffb7dc0>
    d5c0:	8023883a 	mov	r17,r16
    d5c4:	a827883a 	mov	r19,r21
    d5c8:	4839883a 	mov	fp,r9
    d5cc:	3811883a 	mov	r8,r7
    d5d0:	00800084 	movi	r2,2
    d5d4:	4081531e 	bne	r8,r2,db24 <__divdf3+0x6b0>
    d5d8:	e029883a 	mov	r20,fp
    d5dc:	a180004c 	andi	r6,r20,1
    d5e0:	0201ffc4 	movi	r8,2047
    d5e4:	000b883a 	mov	r5,zero
    d5e8:	0027883a 	mov	r19,zero
    d5ec:	4010953a 	slli	r8,r8,20
    d5f0:	30c03fcc 	andi	r3,r6,255
    d5f4:	04000434 	movhi	r16,16
    d5f8:	180697fa 	slli	r3,r3,31
    d5fc:	843fffc4 	addi	r16,r16,-1
    d600:	2c20703a 	and	r16,r5,r16
    d604:	8220b03a 	or	r16,r16,r8
    d608:	80c6b03a 	or	r3,r16,r3
    d60c:	9805883a 	mov	r2,r19
    d610:	dfc00f17 	ldw	ra,60(sp)
    d614:	df000e17 	ldw	fp,56(sp)
    d618:	ddc00d17 	ldw	r23,52(sp)
    d61c:	dd800c17 	ldw	r22,48(sp)
    d620:	dd400b17 	ldw	r21,44(sp)
    d624:	dd000a17 	ldw	r20,40(sp)
    d628:	dcc00917 	ldw	r19,36(sp)
    d62c:	dc800817 	ldw	r18,32(sp)
    d630:	dc400717 	ldw	r17,28(sp)
    d634:	dc000617 	ldw	r16,24(sp)
    d638:	dec01004 	addi	sp,sp,64
    d63c:	f800283a 	ret
    d640:	8904b03a 	or	r2,r17,r4
    d644:	10003726 	beq	r2,zero,d724 <__divdf3+0x2b0>
    d648:	88014d26 	beq	r17,zero,db80 <__divdf3+0x70c>
    d64c:	8809883a 	mov	r4,r17
    d650:	d9800215 	stw	r6,8(sp)
    d654:	d9c00515 	stw	r7,20(sp)
    d658:	000f3700 	call	f370 <__clzsi2>
    d65c:	d9800217 	ldw	r6,8(sp)
    d660:	d9c00517 	ldw	r7,20(sp)
    d664:	1007883a 	mov	r3,r2
    d668:	01000a04 	movi	r4,40
    d66c:	1cfffe04 	addi	r19,r3,-8
    d670:	20c9c83a 	sub	r4,r4,r3
    d674:	8cca983a 	sll	r5,r17,r19
    d678:	a108d83a 	srl	r4,r20,r4
    d67c:	a4e6983a 	sll	r19,r20,r19
    d680:	2162b03a 	or	r17,r4,r5
    d684:	04bf0344 	movi	r18,-1011
    d688:	90e5c83a 	sub	r18,r18,r3
    d68c:	0029883a 	mov	r20,zero
    d690:	0011883a 	mov	r8,zero
    d694:	003f9606 	br	d4f0 <__alt_data_end+0xfffb7dc0>
    d698:	8184b03a 	or	r2,r16,r6
    d69c:	10001f1e 	bne	r2,zero,d71c <__divdf3+0x2a8>
    d6a0:	0021883a 	mov	r16,zero
    d6a4:	002b883a 	mov	r21,zero
    d6a8:	01c00084 	movi	r7,2
    d6ac:	003fa206 	br	d538 <__alt_data_end+0xfffb7e08>
    d6b0:	8184b03a 	or	r2,r16,r6
    d6b4:	10001526 	beq	r2,zero,d70c <__divdf3+0x298>
    d6b8:	80013d26 	beq	r16,zero,dbb0 <__divdf3+0x73c>
    d6bc:	8009883a 	mov	r4,r16
    d6c0:	d9800215 	stw	r6,8(sp)
    d6c4:	da000315 	stw	r8,12(sp)
    d6c8:	da400415 	stw	r9,16(sp)
    d6cc:	000f3700 	call	f370 <__clzsi2>
    d6d0:	d9800217 	ldw	r6,8(sp)
    d6d4:	da000317 	ldw	r8,12(sp)
    d6d8:	da400417 	ldw	r9,16(sp)
    d6dc:	1007883a 	mov	r3,r2
    d6e0:	01000a04 	movi	r4,40
    d6e4:	1d7ffe04 	addi	r21,r3,-8
    d6e8:	20c9c83a 	sub	r4,r4,r3
    d6ec:	8560983a 	sll	r16,r16,r21
    d6f0:	3108d83a 	srl	r4,r6,r4
    d6f4:	356a983a 	sll	r21,r6,r21
    d6f8:	2420b03a 	or	r16,r4,r16
    d6fc:	017f0344 	movi	r5,-1011
    d700:	28cbc83a 	sub	r5,r5,r3
    d704:	000f883a 	mov	r7,zero
    d708:	003f8b06 	br	d538 <__alt_data_end+0xfffb7e08>
    d70c:	0021883a 	mov	r16,zero
    d710:	002b883a 	mov	r21,zero
    d714:	01c00044 	movi	r7,1
    d718:	003f8706 	br	d538 <__alt_data_end+0xfffb7e08>
    d71c:	01c000c4 	movi	r7,3
    d720:	003f8506 	br	d538 <__alt_data_end+0xfffb7e08>
    d724:	05000104 	movi	r20,4
    d728:	0023883a 	mov	r17,zero
    d72c:	0027883a 	mov	r19,zero
    d730:	02000044 	movi	r8,1
    d734:	003f6e06 	br	d4f0 <__alt_data_end+0xfffb7dc0>
    d738:	05000304 	movi	r20,12
    d73c:	020000c4 	movi	r8,3
    d740:	003f6b06 	br	d4f0 <__alt_data_end+0xfffb7dc0>
    d744:	01400434 	movhi	r5,16
    d748:	000d883a 	mov	r6,zero
    d74c:	297fffc4 	addi	r5,r5,-1
    d750:	04ffffc4 	movi	r19,-1
    d754:	0201ffc4 	movi	r8,2047
    d758:	003fa406 	br	d5ec <__alt_data_end+0xfffb7ebc>
    d75c:	043f0084 	movi	r16,-1022
    d760:	84a1c83a 	sub	r16,r16,r18
    d764:	00800e04 	movi	r2,56
    d768:	14014d0e 	bge	r2,r16,dca0 <__divdf3+0x82c>
    d76c:	a180004c 	andi	r6,r20,1
    d770:	0011883a 	mov	r8,zero
    d774:	000b883a 	mov	r5,zero
    d778:	0027883a 	mov	r19,zero
    d77c:	003f9b06 	br	d5ec <__alt_data_end+0xfffb7ebc>
    d780:	8880022c 	andhi	r2,r17,8
    d784:	1000f026 	beq	r2,zero,db48 <__divdf3+0x6d4>
    d788:	8080022c 	andhi	r2,r16,8
    d78c:	1000ee1e 	bne	r2,zero,db48 <__divdf3+0x6d4>
    d790:	00800434 	movhi	r2,16
    d794:	81400234 	orhi	r5,r16,8
    d798:	10bfffc4 	addi	r2,r2,-1
    d79c:	b80d883a 	mov	r6,r23
    d7a0:	288a703a 	and	r5,r5,r2
    d7a4:	a827883a 	mov	r19,r21
    d7a8:	003fea06 	br	d754 <__alt_data_end+0xfffb8024>
    d7ac:	84411c36 	bltu	r16,r17,dc20 <__divdf3+0x7ac>
    d7b0:	8c011a26 	beq	r17,r16,dc1c <__divdf3+0x7a8>
    d7b4:	94bfffc4 	addi	r18,r18,-1
    d7b8:	dcc00015 	stw	r19,0(sp)
    d7bc:	8811883a 	mov	r8,r17
    d7c0:	002d883a 	mov	r22,zero
    d7c4:	a80cd63a 	srli	r6,r21,24
    d7c8:	8020923a 	slli	r16,r16,8
    d7cc:	a82a923a 	slli	r21,r21,8
    d7d0:	4009883a 	mov	r4,r8
    d7d4:	342eb03a 	or	r23,r6,r16
    d7d8:	dd400115 	stw	r21,4(sp)
    d7dc:	b82ad43a 	srli	r21,r23,16
    d7e0:	da000315 	stw	r8,12(sp)
    d7e4:	bcffffcc 	andi	r19,r23,65535
    d7e8:	a80b883a 	mov	r5,r21
    d7ec:	000cba00 	call	cba0 <__udivsi3>
    d7f0:	1009883a 	mov	r4,r2
    d7f4:	980b883a 	mov	r5,r19
    d7f8:	1023883a 	mov	r17,r2
    d7fc:	000cbb00 	call	cbb0 <__mulsi3>
    d800:	da000317 	ldw	r8,12(sp)
    d804:	a80b883a 	mov	r5,r21
    d808:	1039883a 	mov	fp,r2
    d80c:	4009883a 	mov	r4,r8
    d810:	000cba80 	call	cba8 <__umodsi3>
    d814:	d8c00017 	ldw	r3,0(sp)
    d818:	1004943a 	slli	r2,r2,16
    d81c:	1810d43a 	srli	r8,r3,16
    d820:	120eb03a 	or	r7,r2,r8
    d824:	3f00062e 	bgeu	r7,fp,d840 <__divdf3+0x3cc>
    d828:	3dcf883a 	add	r7,r7,r23
    d82c:	88bfffc4 	addi	r2,r17,-1
    d830:	3dc10a36 	bltu	r7,r23,dc5c <__divdf3+0x7e8>
    d834:	3f01092e 	bgeu	r7,fp,dc5c <__divdf3+0x7e8>
    d838:	8c7fff84 	addi	r17,r17,-2
    d83c:	3dcf883a 	add	r7,r7,r23
    d840:	3f39c83a 	sub	fp,r7,fp
    d844:	e009883a 	mov	r4,fp
    d848:	a80b883a 	mov	r5,r21
    d84c:	000cba00 	call	cba0 <__udivsi3>
    d850:	1009883a 	mov	r4,r2
    d854:	980b883a 	mov	r5,r19
    d858:	1021883a 	mov	r16,r2
    d85c:	000cbb00 	call	cbb0 <__mulsi3>
    d860:	e009883a 	mov	r4,fp
    d864:	a80b883a 	mov	r5,r21
    d868:	d8800315 	stw	r2,12(sp)
    d86c:	000cba80 	call	cba8 <__umodsi3>
    d870:	d9000017 	ldw	r4,0(sp)
    d874:	1004943a 	slli	r2,r2,16
    d878:	da000317 	ldw	r8,12(sp)
    d87c:	20ffffcc 	andi	r3,r4,65535
    d880:	10ceb03a 	or	r7,r2,r3
    d884:	3a00062e 	bgeu	r7,r8,d8a0 <__divdf3+0x42c>
    d888:	3dcf883a 	add	r7,r7,r23
    d88c:	80bfffc4 	addi	r2,r16,-1
    d890:	3dc0f036 	bltu	r7,r23,dc54 <__divdf3+0x7e0>
    d894:	3a00ef2e 	bgeu	r7,r8,dc54 <__divdf3+0x7e0>
    d898:	843fff84 	addi	r16,r16,-2
    d89c:	3dcf883a 	add	r7,r7,r23
    d8a0:	d8c00117 	ldw	r3,4(sp)
    d8a4:	8822943a 	slli	r17,r17,16
    d8a8:	3a0fc83a 	sub	r7,r7,r8
    d8ac:	1806d43a 	srli	r3,r3,16
    d8b0:	8462b03a 	or	r17,r16,r17
    d8b4:	8affffcc 	andi	r11,r17,65535
    d8b8:	d8c00015 	stw	r3,0(sp)
    d8bc:	d8c00117 	ldw	r3,4(sp)
    d8c0:	8820d43a 	srli	r16,r17,16
    d8c4:	5809883a 	mov	r4,r11
    d8c8:	1f3fffcc 	andi	fp,r3,65535
    d8cc:	e00b883a 	mov	r5,fp
    d8d0:	d9c00515 	stw	r7,20(sp)
    d8d4:	dac00215 	stw	r11,8(sp)
    d8d8:	000cbb00 	call	cbb0 <__mulsi3>
    d8dc:	8009883a 	mov	r4,r16
    d8e0:	e00b883a 	mov	r5,fp
    d8e4:	d8800415 	stw	r2,16(sp)
    d8e8:	000cbb00 	call	cbb0 <__mulsi3>
    d8ec:	d9400017 	ldw	r5,0(sp)
    d8f0:	8009883a 	mov	r4,r16
    d8f4:	d8800315 	stw	r2,12(sp)
    d8f8:	000cbb00 	call	cbb0 <__mulsi3>
    d8fc:	dac00217 	ldw	r11,8(sp)
    d900:	d9400017 	ldw	r5,0(sp)
    d904:	d8800215 	stw	r2,8(sp)
    d908:	5809883a 	mov	r4,r11
    d90c:	000cbb00 	call	cbb0 <__mulsi3>
    d910:	da400417 	ldw	r9,16(sp)
    d914:	da800317 	ldw	r10,12(sp)
    d918:	d9c00517 	ldw	r7,20(sp)
    d91c:	480ad43a 	srli	r5,r9,16
    d920:	5085883a 	add	r2,r10,r2
    d924:	db000217 	ldw	r12,8(sp)
    d928:	1151883a 	add	r8,r2,r5
    d92c:	4280022e 	bgeu	r8,r10,d938 <__divdf3+0x4c4>
    d930:	00800074 	movhi	r2,1
    d934:	6099883a 	add	r12,r12,r2
    d938:	400ad43a 	srli	r5,r8,16
    d93c:	4010943a 	slli	r8,r8,16
    d940:	4c3fffcc 	andi	r16,r9,65535
    d944:	6149883a 	add	r4,r12,r5
    d948:	4411883a 	add	r8,r8,r16
    d94c:	3900a736 	bltu	r7,r4,dbec <__divdf3+0x778>
    d950:	3900c426 	beq	r7,r4,dc64 <__divdf3+0x7f0>
    d954:	3909c83a 	sub	r4,r7,r4
    d958:	b221c83a 	sub	r16,r22,r8
    d95c:	b42d803a 	cmpltu	r22,r22,r16
    d960:	25adc83a 	sub	r22,r4,r22
    d964:	b5c0c626 	beq	r22,r23,dc80 <__divdf3+0x80c>
    d968:	b009883a 	mov	r4,r22
    d96c:	a80b883a 	mov	r5,r21
    d970:	000cba00 	call	cba0 <__udivsi3>
    d974:	1009883a 	mov	r4,r2
    d978:	980b883a 	mov	r5,r19
    d97c:	d8800315 	stw	r2,12(sp)
    d980:	000cbb00 	call	cbb0 <__mulsi3>
    d984:	a80b883a 	mov	r5,r21
    d988:	b009883a 	mov	r4,r22
    d98c:	d8800415 	stw	r2,16(sp)
    d990:	000cba80 	call	cba8 <__umodsi3>
    d994:	1004943a 	slli	r2,r2,16
    d998:	800ed43a 	srli	r7,r16,16
    d99c:	da400417 	ldw	r9,16(sp)
    d9a0:	da000317 	ldw	r8,12(sp)
    d9a4:	11cab03a 	or	r5,r2,r7
    d9a8:	2a40062e 	bgeu	r5,r9,d9c4 <__divdf3+0x550>
    d9ac:	2dcb883a 	add	r5,r5,r23
    d9b0:	40bfffc4 	addi	r2,r8,-1
    d9b4:	2dc0b436 	bltu	r5,r23,dc88 <__divdf3+0x814>
    d9b8:	2a40b32e 	bgeu	r5,r9,dc88 <__divdf3+0x814>
    d9bc:	423fff84 	addi	r8,r8,-2
    d9c0:	2dcb883a 	add	r5,r5,r23
    d9c4:	2a6dc83a 	sub	r22,r5,r9
    d9c8:	b009883a 	mov	r4,r22
    d9cc:	a80b883a 	mov	r5,r21
    d9d0:	da000315 	stw	r8,12(sp)
    d9d4:	000cba00 	call	cba0 <__udivsi3>
    d9d8:	980b883a 	mov	r5,r19
    d9dc:	1009883a 	mov	r4,r2
    d9e0:	d8800415 	stw	r2,16(sp)
    d9e4:	000cbb00 	call	cbb0 <__mulsi3>
    d9e8:	b009883a 	mov	r4,r22
    d9ec:	a80b883a 	mov	r5,r21
    d9f0:	1027883a 	mov	r19,r2
    d9f4:	000cba80 	call	cba8 <__umodsi3>
    d9f8:	1004943a 	slli	r2,r2,16
    d9fc:	843fffcc 	andi	r16,r16,65535
    da00:	da000317 	ldw	r8,12(sp)
    da04:	140eb03a 	or	r7,r2,r16
    da08:	da400417 	ldw	r9,16(sp)
    da0c:	3cc0062e 	bgeu	r7,r19,da28 <__divdf3+0x5b4>
    da10:	3dcf883a 	add	r7,r7,r23
    da14:	48bfffc4 	addi	r2,r9,-1
    da18:	3dc09d36 	bltu	r7,r23,dc90 <__divdf3+0x81c>
    da1c:	3cc09c2e 	bgeu	r7,r19,dc90 <__divdf3+0x81c>
    da20:	4a7fff84 	addi	r9,r9,-2
    da24:	3dcf883a 	add	r7,r7,r23
    da28:	4010943a 	slli	r8,r8,16
    da2c:	3cebc83a 	sub	r21,r7,r19
    da30:	e00b883a 	mov	r5,fp
    da34:	4a26b03a 	or	r19,r9,r8
    da38:	99ffffcc 	andi	r7,r19,65535
    da3c:	9820d43a 	srli	r16,r19,16
    da40:	3809883a 	mov	r4,r7
    da44:	d9c00515 	stw	r7,20(sp)
    da48:	000cbb00 	call	cbb0 <__mulsi3>
    da4c:	8009883a 	mov	r4,r16
    da50:	e00b883a 	mov	r5,fp
    da54:	102d883a 	mov	r22,r2
    da58:	000cbb00 	call	cbb0 <__mulsi3>
    da5c:	d9400017 	ldw	r5,0(sp)
    da60:	8009883a 	mov	r4,r16
    da64:	1039883a 	mov	fp,r2
    da68:	000cbb00 	call	cbb0 <__mulsi3>
    da6c:	d9c00517 	ldw	r7,20(sp)
    da70:	d9400017 	ldw	r5,0(sp)
    da74:	1021883a 	mov	r16,r2
    da78:	3809883a 	mov	r4,r7
    da7c:	000cbb00 	call	cbb0 <__mulsi3>
    da80:	b008d43a 	srli	r4,r22,16
    da84:	e085883a 	add	r2,fp,r2
    da88:	1109883a 	add	r4,r2,r4
    da8c:	2700022e 	bgeu	r4,fp,da98 <__divdf3+0x624>
    da90:	00800074 	movhi	r2,1
    da94:	80a1883a 	add	r16,r16,r2
    da98:	200ad43a 	srli	r5,r4,16
    da9c:	2008943a 	slli	r4,r4,16
    daa0:	b5bfffcc 	andi	r22,r22,65535
    daa4:	8145883a 	add	r2,r16,r5
    daa8:	2589883a 	add	r4,r4,r22
    daac:	a8802c36 	bltu	r21,r2,db60 <__divdf3+0x6ec>
    dab0:	a880a426 	beq	r21,r2,dd44 <__divdf3+0x8d0>
    dab4:	9cc00054 	ori	r19,r19,1
    dab8:	9200ffc4 	addi	r8,r18,1023
    dabc:	023f270e 	bge	zero,r8,d75c <__alt_data_end+0xfffb802c>
    dac0:	988001cc 	andi	r2,r19,7
    dac4:	10000726 	beq	r2,zero,dae4 <__divdf3+0x670>
    dac8:	990003cc 	andi	r4,r19,15
    dacc:	00800104 	movi	r2,4
    dad0:	20800426 	beq	r4,r2,dae4 <__divdf3+0x670>
    dad4:	9885883a 	add	r2,r19,r2
    dad8:	14e7803a 	cmpltu	r19,r2,r19
    dadc:	8ce3883a 	add	r17,r17,r19
    dae0:	1027883a 	mov	r19,r2
    dae4:	8880402c 	andhi	r2,r17,256
    dae8:	10000426 	beq	r2,zero,dafc <__divdf3+0x688>
    daec:	00bfc034 	movhi	r2,65280
    daf0:	10bfffc4 	addi	r2,r2,-1
    daf4:	92010004 	addi	r8,r18,1024
    daf8:	88a2703a 	and	r17,r17,r2
    dafc:	0081ff84 	movi	r2,2046
    db00:	123eb616 	blt	r2,r8,d5dc <__alt_data_end+0xfffb7eac>
    db04:	9826d0fa 	srli	r19,r19,3
    db08:	8804977a 	slli	r2,r17,29
    db0c:	8820927a 	slli	r16,r17,9
    db10:	4201ffcc 	andi	r8,r8,2047
    db14:	14e6b03a 	or	r19,r2,r19
    db18:	800ad33a 	srli	r5,r16,12
    db1c:	a180004c 	andi	r6,r20,1
    db20:	003eb206 	br	d5ec <__alt_data_end+0xfffb7ebc>
    db24:	008000c4 	movi	r2,3
    db28:	4080ac26 	beq	r8,r2,dddc <__divdf3+0x968>
    db2c:	00800044 	movi	r2,1
    db30:	4080591e 	bne	r8,r2,dc98 <__divdf3+0x824>
    db34:	e00d883a 	mov	r6,fp
    db38:	0011883a 	mov	r8,zero
    db3c:	000b883a 	mov	r5,zero
    db40:	0027883a 	mov	r19,zero
    db44:	003ea906 	br	d5ec <__alt_data_end+0xfffb7ebc>
    db48:	00800434 	movhi	r2,16
    db4c:	89400234 	orhi	r5,r17,8
    db50:	10bfffc4 	addi	r2,r2,-1
    db54:	b00d883a 	mov	r6,r22
    db58:	288a703a 	and	r5,r5,r2
    db5c:	003efd06 	br	d754 <__alt_data_end+0xfffb8024>
    db60:	adcf883a 	add	r7,r21,r23
    db64:	997fffc4 	addi	r5,r19,-1
    db68:	3dc0412e 	bgeu	r7,r23,dc70 <__divdf3+0x7fc>
    db6c:	2827883a 	mov	r19,r5
    db70:	38bfd01e 	bne	r7,r2,dab4 <__alt_data_end+0xfffb8384>
    db74:	d8c00117 	ldw	r3,4(sp)
    db78:	193fce1e 	bne	r3,r4,dab4 <__alt_data_end+0xfffb8384>
    db7c:	003fce06 	br	dab8 <__alt_data_end+0xfffb8388>
    db80:	d9800215 	stw	r6,8(sp)
    db84:	d9c00515 	stw	r7,20(sp)
    db88:	000f3700 	call	f370 <__clzsi2>
    db8c:	10c00804 	addi	r3,r2,32
    db90:	010009c4 	movi	r4,39
    db94:	d9800217 	ldw	r6,8(sp)
    db98:	d9c00517 	ldw	r7,20(sp)
    db9c:	20feb20e 	bge	r4,r3,d668 <__alt_data_end+0xfffb7f38>
    dba0:	117ffe04 	addi	r5,r2,-8
    dba4:	a162983a 	sll	r17,r20,r5
    dba8:	0027883a 	mov	r19,zero
    dbac:	003eb506 	br	d684 <__alt_data_end+0xfffb7f54>
    dbb0:	3009883a 	mov	r4,r6
    dbb4:	d9800215 	stw	r6,8(sp)
    dbb8:	da000315 	stw	r8,12(sp)
    dbbc:	da400415 	stw	r9,16(sp)
    dbc0:	000f3700 	call	f370 <__clzsi2>
    dbc4:	10c00804 	addi	r3,r2,32
    dbc8:	010009c4 	movi	r4,39
    dbcc:	d9800217 	ldw	r6,8(sp)
    dbd0:	da000317 	ldw	r8,12(sp)
    dbd4:	da400417 	ldw	r9,16(sp)
    dbd8:	20fec10e 	bge	r4,r3,d6e0 <__alt_data_end+0xfffb7fb0>
    dbdc:	10bffe04 	addi	r2,r2,-8
    dbe0:	a8a0983a 	sll	r16,r21,r2
    dbe4:	002b883a 	mov	r21,zero
    dbe8:	003ec406 	br	d6fc <__alt_data_end+0xfffb7fcc>
    dbec:	d8c00117 	ldw	r3,4(sp)
    dbf0:	b0ed883a 	add	r22,r22,r3
    dbf4:	b0c5803a 	cmpltu	r2,r22,r3
    dbf8:	15c5883a 	add	r2,r2,r23
    dbfc:	11cf883a 	add	r7,r2,r7
    dc00:	88bfffc4 	addi	r2,r17,-1
    dc04:	b9c00d2e 	bgeu	r23,r7,dc3c <__divdf3+0x7c8>
    dc08:	39003f36 	bltu	r7,r4,dd08 <__divdf3+0x894>
    dc0c:	21c06a26 	beq	r4,r7,ddb8 <__divdf3+0x944>
    dc10:	3909c83a 	sub	r4,r7,r4
    dc14:	1023883a 	mov	r17,r2
    dc18:	003f4f06 	br	d958 <__alt_data_end+0xfffb8228>
    dc1c:	9d7ee536 	bltu	r19,r21,d7b4 <__alt_data_end+0xfffb8084>
    dc20:	982ed07a 	srli	r23,r19,1
    dc24:	880497fa 	slli	r2,r17,31
    dc28:	8810d07a 	srli	r8,r17,1
    dc2c:	982c97fa 	slli	r22,r19,31
    dc30:	b884b03a 	or	r2,r23,r2
    dc34:	d8800015 	stw	r2,0(sp)
    dc38:	003ee206 	br	d7c4 <__alt_data_end+0xfffb8094>
    dc3c:	3dfff41e 	bne	r7,r23,dc10 <__alt_data_end+0xfffb84e0>
    dc40:	d8c00117 	ldw	r3,4(sp)
    dc44:	b0fff02e 	bgeu	r22,r3,dc08 <__alt_data_end+0xfffb84d8>
    dc48:	b909c83a 	sub	r4,r23,r4
    dc4c:	1023883a 	mov	r17,r2
    dc50:	003f4106 	br	d958 <__alt_data_end+0xfffb8228>
    dc54:	1021883a 	mov	r16,r2
    dc58:	003f1106 	br	d8a0 <__alt_data_end+0xfffb8170>
    dc5c:	1023883a 	mov	r17,r2
    dc60:	003ef706 	br	d840 <__alt_data_end+0xfffb8110>
    dc64:	b23fe136 	bltu	r22,r8,dbec <__alt_data_end+0xfffb84bc>
    dc68:	0009883a 	mov	r4,zero
    dc6c:	003f3a06 	br	d958 <__alt_data_end+0xfffb8228>
    dc70:	38802c36 	bltu	r7,r2,dd24 <__divdf3+0x8b0>
    dc74:	11c05326 	beq	r2,r7,ddc4 <__divdf3+0x950>
    dc78:	2827883a 	mov	r19,r5
    dc7c:	003f8d06 	br	dab4 <__alt_data_end+0xfffb8384>
    dc80:	04ffffc4 	movi	r19,-1
    dc84:	003f8c06 	br	dab8 <__alt_data_end+0xfffb8388>
    dc88:	1011883a 	mov	r8,r2
    dc8c:	003f4d06 	br	d9c4 <__alt_data_end+0xfffb8294>
    dc90:	1013883a 	mov	r9,r2
    dc94:	003f6406 	br	da28 <__alt_data_end+0xfffb82f8>
    dc98:	e029883a 	mov	r20,fp
    dc9c:	003f8606 	br	dab8 <__alt_data_end+0xfffb8388>
    dca0:	008007c4 	movi	r2,31
    dca4:	14002a16 	blt	r2,r16,dd50 <__divdf3+0x8dc>
    dca8:	91410784 	addi	r5,r18,1054
    dcac:	9c0cd83a 	srl	r6,r19,r16
    dcb0:	8948983a 	sll	r4,r17,r5
    dcb4:	9944983a 	sll	r2,r19,r5
    dcb8:	8c20d83a 	srl	r16,r17,r16
    dcbc:	3108b03a 	or	r4,r6,r4
    dcc0:	1004c03a 	cmpne	r2,r2,zero
    dcc4:	2084b03a 	or	r2,r4,r2
    dcc8:	110001cc 	andi	r4,r2,7
    dccc:	20000726 	beq	r4,zero,dcec <__divdf3+0x878>
    dcd0:	114003cc 	andi	r5,r2,15
    dcd4:	01000104 	movi	r4,4
    dcd8:	29000426 	beq	r5,r4,dcec <__divdf3+0x878>
    dcdc:	11000104 	addi	r4,r2,4
    dce0:	2085803a 	cmpltu	r2,r4,r2
    dce4:	80a1883a 	add	r16,r16,r2
    dce8:	2005883a 	mov	r2,r4
    dcec:	8100202c 	andhi	r4,r16,128
    dcf0:	20002d26 	beq	r4,zero,dda8 <__divdf3+0x934>
    dcf4:	a180004c 	andi	r6,r20,1
    dcf8:	02000044 	movi	r8,1
    dcfc:	000b883a 	mov	r5,zero
    dd00:	0027883a 	mov	r19,zero
    dd04:	003e3906 	br	d5ec <__alt_data_end+0xfffb7ebc>
    dd08:	d8c00117 	ldw	r3,4(sp)
    dd0c:	8c7fff84 	addi	r17,r17,-2
    dd10:	b0ed883a 	add	r22,r22,r3
    dd14:	b0c5803a 	cmpltu	r2,r22,r3
    dd18:	15c5883a 	add	r2,r2,r23
    dd1c:	11cf883a 	add	r7,r2,r7
    dd20:	003f0c06 	br	d954 <__alt_data_end+0xfffb8224>
    dd24:	d8c00117 	ldw	r3,4(sp)
    dd28:	997fff84 	addi	r5,r19,-2
    dd2c:	18d1883a 	add	r8,r3,r3
    dd30:	40c7803a 	cmpltu	r3,r8,r3
    dd34:	1dcd883a 	add	r6,r3,r23
    dd38:	398f883a 	add	r7,r7,r6
    dd3c:	da000115 	stw	r8,4(sp)
    dd40:	003f8a06 	br	db6c <__alt_data_end+0xfffb843c>
    dd44:	203f861e 	bne	r4,zero,db60 <__alt_data_end+0xfffb8430>
    dd48:	d8000115 	stw	zero,4(sp)
    dd4c:	003f8906 	br	db74 <__alt_data_end+0xfffb8444>
    dd50:	00bef884 	movi	r2,-1054
    dd54:	1485c83a 	sub	r2,r2,r18
    dd58:	01000804 	movi	r4,32
    dd5c:	8884d83a 	srl	r2,r17,r2
    dd60:	81001c26 	beq	r16,r4,ddd4 <__divdf3+0x960>
    dd64:	91010f84 	addi	r4,r18,1086
    dd68:	8908983a 	sll	r4,r17,r4
    dd6c:	24c8b03a 	or	r4,r4,r19
    dd70:	2008c03a 	cmpne	r4,r4,zero
    dd74:	2084b03a 	or	r2,r4,r2
    dd78:	140001cc 	andi	r16,r2,7
    dd7c:	8000061e 	bne	r16,zero,dd98 <__divdf3+0x924>
    dd80:	000b883a 	mov	r5,zero
    dd84:	1004d0fa 	srli	r2,r2,3
    dd88:	a180004c 	andi	r6,r20,1
    dd8c:	0011883a 	mov	r8,zero
    dd90:	1426b03a 	or	r19,r2,r16
    dd94:	003e1506 	br	d5ec <__alt_data_end+0xfffb7ebc>
    dd98:	114003cc 	andi	r5,r2,15
    dd9c:	01000104 	movi	r4,4
    dda0:	0021883a 	mov	r16,zero
    dda4:	293fcd1e 	bne	r5,r4,dcdc <__alt_data_end+0xfffb85ac>
    dda8:	800a927a 	slli	r5,r16,9
    ddac:	8020977a 	slli	r16,r16,29
    ddb0:	280ad33a 	srli	r5,r5,12
    ddb4:	003ff306 	br	dd84 <__alt_data_end+0xfffb8654>
    ddb8:	b23fd336 	bltu	r22,r8,dd08 <__alt_data_end+0xfffb85d8>
    ddbc:	1023883a 	mov	r17,r2
    ddc0:	003fa906 	br	dc68 <__alt_data_end+0xfffb8538>
    ddc4:	d8c00117 	ldw	r3,4(sp)
    ddc8:	193fd636 	bltu	r3,r4,dd24 <__alt_data_end+0xfffb85f4>
    ddcc:	2827883a 	mov	r19,r5
    ddd0:	003f6806 	br	db74 <__alt_data_end+0xfffb8444>
    ddd4:	0009883a 	mov	r4,zero
    ddd8:	003fe406 	br	dd6c <__alt_data_end+0xfffb863c>
    dddc:	00800434 	movhi	r2,16
    dde0:	89400234 	orhi	r5,r17,8
    dde4:	10bfffc4 	addi	r2,r2,-1
    dde8:	e00d883a 	mov	r6,fp
    ddec:	288a703a 	and	r5,r5,r2
    ddf0:	003e5806 	br	d754 <__alt_data_end+0xfffb8024>

0000ddf4 <__eqdf2>:
    ddf4:	2804d53a 	srli	r2,r5,20
    ddf8:	3806d53a 	srli	r3,r7,20
    ddfc:	02000434 	movhi	r8,16
    de00:	423fffc4 	addi	r8,r8,-1
    de04:	1081ffcc 	andi	r2,r2,2047
    de08:	0241ffc4 	movi	r9,2047
    de0c:	2a14703a 	and	r10,r5,r8
    de10:	18c1ffcc 	andi	r3,r3,2047
    de14:	3a10703a 	and	r8,r7,r8
    de18:	280ad7fa 	srli	r5,r5,31
    de1c:	380ed7fa 	srli	r7,r7,31
    de20:	12400f26 	beq	r2,r9,de60 <__eqdf2+0x6c>
    de24:	0241ffc4 	movi	r9,2047
    de28:	1a400326 	beq	r3,r9,de38 <__eqdf2+0x44>
    de2c:	10c00526 	beq	r2,r3,de44 <__eqdf2+0x50>
    de30:	00800044 	movi	r2,1
    de34:	f800283a 	ret
    de38:	4192b03a 	or	r9,r8,r6
    de3c:	483ffc1e 	bne	r9,zero,de30 <__alt_data_end+0xfffb8700>
    de40:	10fffb1e 	bne	r2,r3,de30 <__alt_data_end+0xfffb8700>
    de44:	523ffa1e 	bne	r10,r8,de30 <__alt_data_end+0xfffb8700>
    de48:	21bff91e 	bne	r4,r6,de30 <__alt_data_end+0xfffb8700>
    de4c:	29c00826 	beq	r5,r7,de70 <__eqdf2+0x7c>
    de50:	103ff71e 	bne	r2,zero,de30 <__alt_data_end+0xfffb8700>
    de54:	5104b03a 	or	r2,r10,r4
    de58:	1004c03a 	cmpne	r2,r2,zero
    de5c:	f800283a 	ret
    de60:	5112b03a 	or	r9,r10,r4
    de64:	483fef26 	beq	r9,zero,de24 <__alt_data_end+0xfffb86f4>
    de68:	00800044 	movi	r2,1
    de6c:	f800283a 	ret
    de70:	0005883a 	mov	r2,zero
    de74:	f800283a 	ret

0000de78 <__gedf2>:
    de78:	2804d53a 	srli	r2,r5,20
    de7c:	3806d53a 	srli	r3,r7,20
    de80:	02000434 	movhi	r8,16
    de84:	423fffc4 	addi	r8,r8,-1
    de88:	0241ffc4 	movi	r9,2047
    de8c:	1081ffcc 	andi	r2,r2,2047
    de90:	2a14703a 	and	r10,r5,r8
    de94:	1a46703a 	and	r3,r3,r9
    de98:	3a10703a 	and	r8,r7,r8
    de9c:	280ad7fa 	srli	r5,r5,31
    dea0:	380ed7fa 	srli	r7,r7,31
    dea4:	12400b26 	beq	r2,r9,ded4 <__gedf2+0x5c>
    dea8:	1a401626 	beq	r3,r9,df04 <__gedf2+0x8c>
    deac:	10000c1e 	bne	r2,zero,dee0 <__gedf2+0x68>
    deb0:	5112b03a 	or	r9,r10,r4
    deb4:	4813003a 	cmpeq	r9,r9,zero
    deb8:	4817883a 	mov	r11,r9
    debc:	18000c1e 	bne	r3,zero,def0 <__gedf2+0x78>
    dec0:	4198b03a 	or	r12,r8,r6
    dec4:	60000a1e 	bne	r12,zero,def0 <__gedf2+0x78>
    dec8:	48001326 	beq	r9,zero,df18 <__gedf2+0xa0>
    decc:	0005883a 	mov	r2,zero
    ded0:	f800283a 	ret
    ded4:	5112b03a 	or	r9,r10,r4
    ded8:	4800191e 	bne	r9,zero,df40 <__gedf2+0xc8>
    dedc:	18800926 	beq	r3,r2,df04 <__gedf2+0x8c>
    dee0:	18000b1e 	bne	r3,zero,df10 <__gedf2+0x98>
    dee4:	4192b03a 	or	r9,r8,r6
    dee8:	0017883a 	mov	r11,zero
    deec:	48000a26 	beq	r9,zero,df18 <__gedf2+0xa0>
    def0:	39c03fcc 	andi	r7,r7,255
    def4:	58000726 	beq	r11,zero,df14 <__gedf2+0x9c>
    def8:	3800081e 	bne	r7,zero,df1c <__gedf2+0xa4>
    defc:	00bfffc4 	movi	r2,-1
    df00:	f800283a 	ret
    df04:	4192b03a 	or	r9,r8,r6
    df08:	48000d1e 	bne	r9,zero,df40 <__gedf2+0xc8>
    df0c:	103fe826 	beq	r2,zero,deb0 <__alt_data_end+0xfffb8780>
    df10:	39c03fcc 	andi	r7,r7,255
    df14:	29c00326 	beq	r5,r7,df24 <__gedf2+0xac>
    df18:	283ff81e 	bne	r5,zero,defc <__alt_data_end+0xfffb87cc>
    df1c:	00800044 	movi	r2,1
    df20:	f800283a 	ret
    df24:	18bffc16 	blt	r3,r2,df18 <__alt_data_end+0xfffb87e8>
    df28:	10c00316 	blt	r2,r3,df38 <__gedf2+0xc0>
    df2c:	42bffa36 	bltu	r8,r10,df18 <__alt_data_end+0xfffb87e8>
    df30:	52000526 	beq	r10,r8,df48 <__gedf2+0xd0>
    df34:	523fe52e 	bgeu	r10,r8,decc <__alt_data_end+0xfffb879c>
    df38:	283ff026 	beq	r5,zero,defc <__alt_data_end+0xfffb87cc>
    df3c:	003ff706 	br	df1c <__alt_data_end+0xfffb87ec>
    df40:	00bfff84 	movi	r2,-2
    df44:	f800283a 	ret
    df48:	313ff336 	bltu	r6,r4,df18 <__alt_data_end+0xfffb87e8>
    df4c:	21bfdf2e 	bgeu	r4,r6,decc <__alt_data_end+0xfffb879c>
    df50:	283fea26 	beq	r5,zero,defc <__alt_data_end+0xfffb87cc>
    df54:	003ff106 	br	df1c <__alt_data_end+0xfffb87ec>

0000df58 <__ledf2>:
    df58:	2804d53a 	srli	r2,r5,20
    df5c:	3810d53a 	srli	r8,r7,20
    df60:	00c00434 	movhi	r3,16
    df64:	18ffffc4 	addi	r3,r3,-1
    df68:	0241ffc4 	movi	r9,2047
    df6c:	1081ffcc 	andi	r2,r2,2047
    df70:	28d4703a 	and	r10,r5,r3
    df74:	4250703a 	and	r8,r8,r9
    df78:	38c6703a 	and	r3,r7,r3
    df7c:	280ad7fa 	srli	r5,r5,31
    df80:	380ed7fa 	srli	r7,r7,31
    df84:	12400b26 	beq	r2,r9,dfb4 <__ledf2+0x5c>
    df88:	42401926 	beq	r8,r9,dff0 <__ledf2+0x98>
    df8c:	10000c1e 	bne	r2,zero,dfc0 <__ledf2+0x68>
    df90:	5112b03a 	or	r9,r10,r4
    df94:	4813003a 	cmpeq	r9,r9,zero
    df98:	4817883a 	mov	r11,r9
    df9c:	40000f26 	beq	r8,zero,dfdc <__ledf2+0x84>
    dfa0:	39c03fcc 	andi	r7,r7,255
    dfa4:	58001826 	beq	r11,zero,e008 <__ledf2+0xb0>
    dfa8:	38000a1e 	bne	r7,zero,dfd4 <__ledf2+0x7c>
    dfac:	00bfffc4 	movi	r2,-1
    dfb0:	f800283a 	ret
    dfb4:	5112b03a 	or	r9,r10,r4
    dfb8:	48000f1e 	bne	r9,zero,dff8 <__ledf2+0xa0>
    dfbc:	40800c26 	beq	r8,r2,dff0 <__ledf2+0x98>
    dfc0:	4000101e 	bne	r8,zero,e004 <__ledf2+0xac>
    dfc4:	1992b03a 	or	r9,r3,r6
    dfc8:	0017883a 	mov	r11,zero
    dfcc:	483ff41e 	bne	r9,zero,dfa0 <__alt_data_end+0xfffb8870>
    dfd0:	283ff61e 	bne	r5,zero,dfac <__alt_data_end+0xfffb887c>
    dfd4:	00800044 	movi	r2,1
    dfd8:	f800283a 	ret
    dfdc:	1998b03a 	or	r12,r3,r6
    dfe0:	603fef1e 	bne	r12,zero,dfa0 <__alt_data_end+0xfffb8870>
    dfe4:	483ffa26 	beq	r9,zero,dfd0 <__alt_data_end+0xfffb88a0>
    dfe8:	0005883a 	mov	r2,zero
    dfec:	f800283a 	ret
    dff0:	1992b03a 	or	r9,r3,r6
    dff4:	48000226 	beq	r9,zero,e000 <__ledf2+0xa8>
    dff8:	00800084 	movi	r2,2
    dffc:	f800283a 	ret
    e000:	103fe326 	beq	r2,zero,df90 <__alt_data_end+0xfffb8860>
    e004:	39c03fcc 	andi	r7,r7,255
    e008:	29fff11e 	bne	r5,r7,dfd0 <__alt_data_end+0xfffb88a0>
    e00c:	40bff016 	blt	r8,r2,dfd0 <__alt_data_end+0xfffb88a0>
    e010:	12000316 	blt	r2,r8,e020 <__ledf2+0xc8>
    e014:	1abfee36 	bltu	r3,r10,dfd0 <__alt_data_end+0xfffb88a0>
    e018:	50c00326 	beq	r10,r3,e028 <__ledf2+0xd0>
    e01c:	50fff22e 	bgeu	r10,r3,dfe8 <__alt_data_end+0xfffb88b8>
    e020:	283fe226 	beq	r5,zero,dfac <__alt_data_end+0xfffb887c>
    e024:	003feb06 	br	dfd4 <__alt_data_end+0xfffb88a4>
    e028:	313fe936 	bltu	r6,r4,dfd0 <__alt_data_end+0xfffb88a0>
    e02c:	21bfee2e 	bgeu	r4,r6,dfe8 <__alt_data_end+0xfffb88b8>
    e030:	283fde26 	beq	r5,zero,dfac <__alt_data_end+0xfffb887c>
    e034:	003fe706 	br	dfd4 <__alt_data_end+0xfffb88a4>

0000e038 <__muldf3>:
    e038:	deffee04 	addi	sp,sp,-72
    e03c:	dd000c15 	stw	r20,48(sp)
    e040:	2828d53a 	srli	r20,r5,20
    e044:	dd400d15 	stw	r21,52(sp)
    e048:	282ad7fa 	srli	r21,r5,31
    e04c:	dc000815 	stw	r16,32(sp)
    e050:	04000434 	movhi	r16,16
    e054:	ddc00f15 	stw	r23,60(sp)
    e058:	dcc00b15 	stw	r19,44(sp)
    e05c:	dc800a15 	stw	r18,40(sp)
    e060:	843fffc4 	addi	r16,r16,-1
    e064:	dfc01115 	stw	ra,68(sp)
    e068:	df001015 	stw	fp,64(sp)
    e06c:	dd800e15 	stw	r22,56(sp)
    e070:	dc400915 	stw	r17,36(sp)
    e074:	a501ffcc 	andi	r20,r20,2047
    e078:	2025883a 	mov	r18,r4
    e07c:	202f883a 	mov	r23,r4
    e080:	2c20703a 	and	r16,r5,r16
    e084:	a827883a 	mov	r19,r21
    e088:	aa403fcc 	andi	r9,r21,255
    e08c:	a0005926 	beq	r20,zero,e1f4 <__muldf3+0x1bc>
    e090:	0081ffc4 	movi	r2,2047
    e094:	a0803426 	beq	r20,r2,e168 <__muldf3+0x130>
    e098:	84000434 	orhi	r16,r16,16
    e09c:	2004d77a 	srli	r2,r4,29
    e0a0:	802090fa 	slli	r16,r16,3
    e0a4:	202e90fa 	slli	r23,r4,3
    e0a8:	a53f0044 	addi	r20,r20,-1023
    e0ac:	80a0b03a 	or	r16,r16,r2
    e0b0:	000b883a 	mov	r5,zero
    e0b4:	0039883a 	mov	fp,zero
    e0b8:	3806d53a 	srli	r3,r7,20
    e0bc:	382cd7fa 	srli	r22,r7,31
    e0c0:	00800434 	movhi	r2,16
    e0c4:	10bfffc4 	addi	r2,r2,-1
    e0c8:	18c1ffcc 	andi	r3,r3,2047
    e0cc:	3025883a 	mov	r18,r6
    e0d0:	38a2703a 	and	r17,r7,r2
    e0d4:	b2803fcc 	andi	r10,r22,255
    e0d8:	18006426 	beq	r3,zero,e26c <__muldf3+0x234>
    e0dc:	0081ffc4 	movi	r2,2047
    e0e0:	18805c26 	beq	r3,r2,e254 <__muldf3+0x21c>
    e0e4:	8c400434 	orhi	r17,r17,16
    e0e8:	3004d77a 	srli	r2,r6,29
    e0ec:	882290fa 	slli	r17,r17,3
    e0f0:	302490fa 	slli	r18,r6,3
    e0f4:	18ff0044 	addi	r3,r3,-1023
    e0f8:	88a2b03a 	or	r17,r17,r2
    e0fc:	000f883a 	mov	r7,zero
    e100:	394ab03a 	or	r5,r7,r5
    e104:	280a90ba 	slli	r5,r5,2
    e108:	00800074 	movhi	r2,1
    e10c:	10b84a04 	addi	r2,r2,-7896
    e110:	288b883a 	add	r5,r5,r2
    e114:	28800017 	ldw	r2,0(r5)
    e118:	a0c7883a 	add	r3,r20,r3
    e11c:	b54cf03a 	xor	r6,r22,r21
    e120:	1a000044 	addi	r8,r3,1
    e124:	1000683a 	jmp	r2
    e128:	0000e36c 	andhi	zero,zero,909
    e12c:	0000e358 	cmpnei	zero,zero,909
    e130:	0000e358 	cmpnei	zero,zero,909
    e134:	0000e344 	movi	zero,909
    e138:	0000e184 	movi	zero,902
    e13c:	0000e184 	movi	zero,902
    e140:	0000e32c 	andhi	zero,zero,908
    e144:	0000e344 	movi	zero,909
    e148:	0000e184 	movi	zero,902
    e14c:	0000e32c 	andhi	zero,zero,908
    e150:	0000e184 	movi	zero,902
    e154:	0000e344 	movi	zero,909
    e158:	0000e188 	cmpgei	zero,zero,902
    e15c:	0000e188 	cmpgei	zero,zero,902
    e160:	0000e188 	cmpgei	zero,zero,902
    e164:	0000e6a8 	cmpgeui	zero,zero,922
    e168:	8104b03a 	or	r2,r16,r4
    e16c:	10006c1e 	bne	r2,zero,e320 <__muldf3+0x2e8>
    e170:	01400204 	movi	r5,8
    e174:	0021883a 	mov	r16,zero
    e178:	002f883a 	mov	r23,zero
    e17c:	07000084 	movi	fp,2
    e180:	003fcd06 	br	e0b8 <__alt_data_end+0xfffb8988>
    e184:	3013883a 	mov	r9,r6
    e188:	00800084 	movi	r2,2
    e18c:	e080501e 	bne	fp,r2,e2d0 <__muldf3+0x298>
    e190:	4cc0004c 	andi	r19,r9,1
    e194:	0101ffc4 	movi	r4,2047
    e198:	0021883a 	mov	r16,zero
    e19c:	002f883a 	mov	r23,zero
    e1a0:	2008953a 	slli	r4,r4,20
    e1a4:	98c03fcc 	andi	r3,r19,255
    e1a8:	04400434 	movhi	r17,16
    e1ac:	8c7fffc4 	addi	r17,r17,-1
    e1b0:	180697fa 	slli	r3,r3,31
    e1b4:	8460703a 	and	r16,r16,r17
    e1b8:	8120b03a 	or	r16,r16,r4
    e1bc:	80c6b03a 	or	r3,r16,r3
    e1c0:	b805883a 	mov	r2,r23
    e1c4:	dfc01117 	ldw	ra,68(sp)
    e1c8:	df001017 	ldw	fp,64(sp)
    e1cc:	ddc00f17 	ldw	r23,60(sp)
    e1d0:	dd800e17 	ldw	r22,56(sp)
    e1d4:	dd400d17 	ldw	r21,52(sp)
    e1d8:	dd000c17 	ldw	r20,48(sp)
    e1dc:	dcc00b17 	ldw	r19,44(sp)
    e1e0:	dc800a17 	ldw	r18,40(sp)
    e1e4:	dc400917 	ldw	r17,36(sp)
    e1e8:	dc000817 	ldw	r16,32(sp)
    e1ec:	dec01204 	addi	sp,sp,72
    e1f0:	f800283a 	ret
    e1f4:	8104b03a 	or	r2,r16,r4
    e1f8:	10004426 	beq	r2,zero,e30c <__muldf3+0x2d4>
    e1fc:	80014b26 	beq	r16,zero,e72c <__muldf3+0x6f4>
    e200:	8009883a 	mov	r4,r16
    e204:	d9800715 	stw	r6,28(sp)
    e208:	d9c00215 	stw	r7,8(sp)
    e20c:	da400415 	stw	r9,16(sp)
    e210:	000f3700 	call	f370 <__clzsi2>
    e214:	d9800717 	ldw	r6,28(sp)
    e218:	d9c00217 	ldw	r7,8(sp)
    e21c:	da400417 	ldw	r9,16(sp)
    e220:	1007883a 	mov	r3,r2
    e224:	01000a04 	movi	r4,40
    e228:	1dfffe04 	addi	r23,r3,-8
    e22c:	20c9c83a 	sub	r4,r4,r3
    e230:	85e0983a 	sll	r16,r16,r23
    e234:	9108d83a 	srl	r4,r18,r4
    e238:	95ee983a 	sll	r23,r18,r23
    e23c:	2420b03a 	or	r16,r4,r16
    e240:	053f0344 	movi	r20,-1011
    e244:	a0e9c83a 	sub	r20,r20,r3
    e248:	000b883a 	mov	r5,zero
    e24c:	0039883a 	mov	fp,zero
    e250:	003f9906 	br	e0b8 <__alt_data_end+0xfffb8988>
    e254:	8984b03a 	or	r2,r17,r6
    e258:	10002a1e 	bne	r2,zero,e304 <__muldf3+0x2cc>
    e25c:	0023883a 	mov	r17,zero
    e260:	0025883a 	mov	r18,zero
    e264:	01c00084 	movi	r7,2
    e268:	003fa506 	br	e100 <__alt_data_end+0xfffb89d0>
    e26c:	8984b03a 	or	r2,r17,r6
    e270:	10002026 	beq	r2,zero,e2f4 <__muldf3+0x2bc>
    e274:	88011c26 	beq	r17,zero,e6e8 <__muldf3+0x6b0>
    e278:	8809883a 	mov	r4,r17
    e27c:	d9400215 	stw	r5,8(sp)
    e280:	d9800715 	stw	r6,28(sp)
    e284:	da400415 	stw	r9,16(sp)
    e288:	da800315 	stw	r10,12(sp)
    e28c:	000f3700 	call	f370 <__clzsi2>
    e290:	d9400217 	ldw	r5,8(sp)
    e294:	d9800717 	ldw	r6,28(sp)
    e298:	da400417 	ldw	r9,16(sp)
    e29c:	da800317 	ldw	r10,12(sp)
    e2a0:	1007883a 	mov	r3,r2
    e2a4:	01000a04 	movi	r4,40
    e2a8:	1cbffe04 	addi	r18,r3,-8
    e2ac:	20c9c83a 	sub	r4,r4,r3
    e2b0:	8ca2983a 	sll	r17,r17,r18
    e2b4:	3108d83a 	srl	r4,r6,r4
    e2b8:	34a4983a 	sll	r18,r6,r18
    e2bc:	2462b03a 	or	r17,r4,r17
    e2c0:	00bf0344 	movi	r2,-1011
    e2c4:	10c7c83a 	sub	r3,r2,r3
    e2c8:	000f883a 	mov	r7,zero
    e2cc:	003f8c06 	br	e100 <__alt_data_end+0xfffb89d0>
    e2d0:	008000c4 	movi	r2,3
    e2d4:	e0816d26 	beq	fp,r2,e88c <__muldf3+0x854>
    e2d8:	00800044 	movi	r2,1
    e2dc:	e081321e 	bne	fp,r2,e7a8 <__muldf3+0x770>
    e2e0:	48a6703a 	and	r19,r9,r2
    e2e4:	0009883a 	mov	r4,zero
    e2e8:	0021883a 	mov	r16,zero
    e2ec:	002f883a 	mov	r23,zero
    e2f0:	003fab06 	br	e1a0 <__alt_data_end+0xfffb8a70>
    e2f4:	0023883a 	mov	r17,zero
    e2f8:	0025883a 	mov	r18,zero
    e2fc:	01c00044 	movi	r7,1
    e300:	003f7f06 	br	e100 <__alt_data_end+0xfffb89d0>
    e304:	01c000c4 	movi	r7,3
    e308:	003f7d06 	br	e100 <__alt_data_end+0xfffb89d0>
    e30c:	01400104 	movi	r5,4
    e310:	0021883a 	mov	r16,zero
    e314:	002f883a 	mov	r23,zero
    e318:	07000044 	movi	fp,1
    e31c:	003f6606 	br	e0b8 <__alt_data_end+0xfffb8988>
    e320:	01400304 	movi	r5,12
    e324:	070000c4 	movi	fp,3
    e328:	003f6306 	br	e0b8 <__alt_data_end+0xfffb8988>
    e32c:	04000434 	movhi	r16,16
    e330:	0027883a 	mov	r19,zero
    e334:	843fffc4 	addi	r16,r16,-1
    e338:	05ffffc4 	movi	r23,-1
    e33c:	0101ffc4 	movi	r4,2047
    e340:	003f9706 	br	e1a0 <__alt_data_end+0xfffb8a70>
    e344:	8821883a 	mov	r16,r17
    e348:	902f883a 	mov	r23,r18
    e34c:	5013883a 	mov	r9,r10
    e350:	3839883a 	mov	fp,r7
    e354:	003f8c06 	br	e188 <__alt_data_end+0xfffb8a58>
    e358:	8821883a 	mov	r16,r17
    e35c:	902f883a 	mov	r23,r18
    e360:	3013883a 	mov	r9,r6
    e364:	3839883a 	mov	fp,r7
    e368:	003f8706 	br	e188 <__alt_data_end+0xfffb8a58>
    e36c:	b82ad43a 	srli	r21,r23,16
    e370:	9038d43a 	srli	fp,r18,16
    e374:	bdffffcc 	andi	r23,r23,65535
    e378:	94bfffcc 	andi	r18,r18,65535
    e37c:	9009883a 	mov	r4,r18
    e380:	b80b883a 	mov	r5,r23
    e384:	d8c00515 	stw	r3,20(sp)
    e388:	d9800715 	stw	r6,28(sp)
    e38c:	da000615 	stw	r8,24(sp)
    e390:	000cbb00 	call	cbb0 <__mulsi3>
    e394:	9009883a 	mov	r4,r18
    e398:	a80b883a 	mov	r5,r21
    e39c:	1029883a 	mov	r20,r2
    e3a0:	000cbb00 	call	cbb0 <__mulsi3>
    e3a4:	e009883a 	mov	r4,fp
    e3a8:	a80b883a 	mov	r5,r21
    e3ac:	102d883a 	mov	r22,r2
    e3b0:	000cbb00 	call	cbb0 <__mulsi3>
    e3b4:	e009883a 	mov	r4,fp
    e3b8:	b80b883a 	mov	r5,r23
    e3bc:	1027883a 	mov	r19,r2
    e3c0:	000cbb00 	call	cbb0 <__mulsi3>
    e3c4:	a008d43a 	srli	r4,r20,16
    e3c8:	b085883a 	add	r2,r22,r2
    e3cc:	d8c00517 	ldw	r3,20(sp)
    e3d0:	110f883a 	add	r7,r2,r4
    e3d4:	d9800717 	ldw	r6,28(sp)
    e3d8:	da000617 	ldw	r8,24(sp)
    e3dc:	3d80022e 	bgeu	r7,r22,e3e8 <__muldf3+0x3b0>
    e3e0:	00800074 	movhi	r2,1
    e3e4:	98a7883a 	add	r19,r19,r2
    e3e8:	3804943a 	slli	r2,r7,16
    e3ec:	380ed43a 	srli	r7,r7,16
    e3f0:	882cd43a 	srli	r22,r17,16
    e3f4:	a53fffcc 	andi	r20,r20,65535
    e3f8:	8c7fffcc 	andi	r17,r17,65535
    e3fc:	1529883a 	add	r20,r2,r20
    e400:	8809883a 	mov	r4,r17
    e404:	b80b883a 	mov	r5,r23
    e408:	d8c00515 	stw	r3,20(sp)
    e40c:	d9800715 	stw	r6,28(sp)
    e410:	da000615 	stw	r8,24(sp)
    e414:	d9c00015 	stw	r7,0(sp)
    e418:	dd000115 	stw	r20,4(sp)
    e41c:	000cbb00 	call	cbb0 <__mulsi3>
    e420:	a80b883a 	mov	r5,r21
    e424:	8809883a 	mov	r4,r17
    e428:	d8800415 	stw	r2,16(sp)
    e42c:	000cbb00 	call	cbb0 <__mulsi3>
    e430:	a80b883a 	mov	r5,r21
    e434:	b009883a 	mov	r4,r22
    e438:	1029883a 	mov	r20,r2
    e43c:	000cbb00 	call	cbb0 <__mulsi3>
    e440:	b009883a 	mov	r4,r22
    e444:	b80b883a 	mov	r5,r23
    e448:	102b883a 	mov	r21,r2
    e44c:	000cbb00 	call	cbb0 <__mulsi3>
    e450:	da400417 	ldw	r9,16(sp)
    e454:	a085883a 	add	r2,r20,r2
    e458:	d8c00517 	ldw	r3,20(sp)
    e45c:	4808d43a 	srli	r4,r9,16
    e460:	d9800717 	ldw	r6,28(sp)
    e464:	da000617 	ldw	r8,24(sp)
    e468:	1109883a 	add	r4,r2,r4
    e46c:	2500022e 	bgeu	r4,r20,e478 <__muldf3+0x440>
    e470:	00800074 	movhi	r2,1
    e474:	a8ab883a 	add	r21,r21,r2
    e478:	200e943a 	slli	r7,r4,16
    e47c:	2004d43a 	srli	r2,r4,16
    e480:	802ed43a 	srli	r23,r16,16
    e484:	843fffcc 	andi	r16,r16,65535
    e488:	4d3fffcc 	andi	r20,r9,65535
    e48c:	9009883a 	mov	r4,r18
    e490:	800b883a 	mov	r5,r16
    e494:	3d29883a 	add	r20,r7,r20
    e498:	d8c00515 	stw	r3,20(sp)
    e49c:	d9800715 	stw	r6,28(sp)
    e4a0:	da000615 	stw	r8,24(sp)
    e4a4:	a8ab883a 	add	r21,r21,r2
    e4a8:	000cbb00 	call	cbb0 <__mulsi3>
    e4ac:	9009883a 	mov	r4,r18
    e4b0:	b80b883a 	mov	r5,r23
    e4b4:	d8800315 	stw	r2,12(sp)
    e4b8:	000cbb00 	call	cbb0 <__mulsi3>
    e4bc:	e009883a 	mov	r4,fp
    e4c0:	b80b883a 	mov	r5,r23
    e4c4:	1025883a 	mov	r18,r2
    e4c8:	000cbb00 	call	cbb0 <__mulsi3>
    e4cc:	e009883a 	mov	r4,fp
    e4d0:	800b883a 	mov	r5,r16
    e4d4:	d8800215 	stw	r2,8(sp)
    e4d8:	000cbb00 	call	cbb0 <__mulsi3>
    e4dc:	da800317 	ldw	r10,12(sp)
    e4e0:	d9400017 	ldw	r5,0(sp)
    e4e4:	9085883a 	add	r2,r18,r2
    e4e8:	5008d43a 	srli	r4,r10,16
    e4ec:	a153883a 	add	r9,r20,r5
    e4f0:	d8c00517 	ldw	r3,20(sp)
    e4f4:	1109883a 	add	r4,r2,r4
    e4f8:	d9800717 	ldw	r6,28(sp)
    e4fc:	da000617 	ldw	r8,24(sp)
    e500:	dac00217 	ldw	r11,8(sp)
    e504:	2480022e 	bgeu	r4,r18,e510 <__muldf3+0x4d8>
    e508:	00800074 	movhi	r2,1
    e50c:	5897883a 	add	r11,r11,r2
    e510:	200e943a 	slli	r7,r4,16
    e514:	2038d43a 	srli	fp,r4,16
    e518:	52bfffcc 	andi	r10,r10,65535
    e51c:	3a8f883a 	add	r7,r7,r10
    e520:	8809883a 	mov	r4,r17
    e524:	800b883a 	mov	r5,r16
    e528:	d8c00515 	stw	r3,20(sp)
    e52c:	d9800715 	stw	r6,28(sp)
    e530:	d9c00215 	stw	r7,8(sp)
    e534:	da000615 	stw	r8,24(sp)
    e538:	da400415 	stw	r9,16(sp)
    e53c:	5f39883a 	add	fp,r11,fp
    e540:	000cbb00 	call	cbb0 <__mulsi3>
    e544:	8809883a 	mov	r4,r17
    e548:	b80b883a 	mov	r5,r23
    e54c:	1025883a 	mov	r18,r2
    e550:	000cbb00 	call	cbb0 <__mulsi3>
    e554:	b009883a 	mov	r4,r22
    e558:	b80b883a 	mov	r5,r23
    e55c:	d8800315 	stw	r2,12(sp)
    e560:	000cbb00 	call	cbb0 <__mulsi3>
    e564:	b009883a 	mov	r4,r22
    e568:	800b883a 	mov	r5,r16
    e56c:	1023883a 	mov	r17,r2
    e570:	000cbb00 	call	cbb0 <__mulsi3>
    e574:	da800317 	ldw	r10,12(sp)
    e578:	9008d43a 	srli	r4,r18,16
    e57c:	d8c00517 	ldw	r3,20(sp)
    e580:	5085883a 	add	r2,r10,r2
    e584:	1109883a 	add	r4,r2,r4
    e588:	d9800717 	ldw	r6,28(sp)
    e58c:	d9c00217 	ldw	r7,8(sp)
    e590:	da000617 	ldw	r8,24(sp)
    e594:	da400417 	ldw	r9,16(sp)
    e598:	2280022e 	bgeu	r4,r10,e5a4 <__muldf3+0x56c>
    e59c:	00800074 	movhi	r2,1
    e5a0:	88a3883a 	add	r17,r17,r2
    e5a4:	2004943a 	slli	r2,r4,16
    e5a8:	94bfffcc 	andi	r18,r18,65535
    e5ac:	4ce7883a 	add	r19,r9,r19
    e5b0:	14a5883a 	add	r18,r2,r18
    e5b4:	9d29803a 	cmpltu	r20,r19,r20
    e5b8:	9565883a 	add	r18,r18,r21
    e5bc:	9505883a 	add	r2,r18,r20
    e5c0:	99e7883a 	add	r19,r19,r7
    e5c4:	99cf803a 	cmpltu	r7,r19,r7
    e5c8:	e08b883a 	add	r5,fp,r2
    e5cc:	2008d43a 	srli	r4,r4,16
    e5d0:	29ef883a 	add	r23,r5,r7
    e5d4:	1529803a 	cmpltu	r20,r2,r20
    e5d8:	956b803a 	cmpltu	r21,r18,r21
    e5dc:	b9cf803a 	cmpltu	r7,r23,r7
    e5e0:	a564b03a 	or	r18,r20,r21
    e5e4:	2f39803a 	cmpltu	fp,r5,fp
    e5e8:	9125883a 	add	r18,r18,r4
    e5ec:	3f38b03a 	or	fp,r7,fp
    e5f0:	9725883a 	add	r18,r18,fp
    e5f4:	9804927a 	slli	r2,r19,9
    e5f8:	9463883a 	add	r17,r18,r17
    e5fc:	d9000117 	ldw	r4,4(sp)
    e600:	b820d5fa 	srli	r16,r23,23
    e604:	8822927a 	slli	r17,r17,9
    e608:	9826d5fa 	srli	r19,r19,23
    e60c:	1104b03a 	or	r2,r2,r4
    e610:	b82e927a 	slli	r23,r23,9
    e614:	1004c03a 	cmpne	r2,r2,zero
    e618:	8c20b03a 	or	r16,r17,r16
    e61c:	14e6b03a 	or	r19,r2,r19
    e620:	8080402c 	andhi	r2,r16,256
    e624:	9deeb03a 	or	r23,r19,r23
    e628:	10000726 	beq	r2,zero,e648 <__muldf3+0x610>
    e62c:	b804d07a 	srli	r2,r23,1
    e630:	800697fa 	slli	r3,r16,31
    e634:	bdc0004c 	andi	r23,r23,1
    e638:	8020d07a 	srli	r16,r16,1
    e63c:	b8aeb03a 	or	r23,r23,r2
    e640:	b8eeb03a 	or	r23,r23,r3
    e644:	4007883a 	mov	r3,r8
    e648:	1900ffc4 	addi	r4,r3,1023
    e64c:	01004d0e 	bge	zero,r4,e784 <__muldf3+0x74c>
    e650:	b88001cc 	andi	r2,r23,7
    e654:	10000726 	beq	r2,zero,e674 <__muldf3+0x63c>
    e658:	b94003cc 	andi	r5,r23,15
    e65c:	00800104 	movi	r2,4
    e660:	28800426 	beq	r5,r2,e674 <__muldf3+0x63c>
    e664:	b885883a 	add	r2,r23,r2
    e668:	15ef803a 	cmpltu	r23,r2,r23
    e66c:	85e1883a 	add	r16,r16,r23
    e670:	102f883a 	mov	r23,r2
    e674:	8080402c 	andhi	r2,r16,256
    e678:	10000426 	beq	r2,zero,e68c <__muldf3+0x654>
    e67c:	00bfc034 	movhi	r2,65280
    e680:	10bfffc4 	addi	r2,r2,-1
    e684:	19010004 	addi	r4,r3,1024
    e688:	80a0703a 	and	r16,r16,r2
    e68c:	0081ff84 	movi	r2,2046
    e690:	1100340e 	bge	r2,r4,e764 <__muldf3+0x72c>
    e694:	34c0004c 	andi	r19,r6,1
    e698:	0101ffc4 	movi	r4,2047
    e69c:	0021883a 	mov	r16,zero
    e6a0:	002f883a 	mov	r23,zero
    e6a4:	003ebe06 	br	e1a0 <__alt_data_end+0xfffb8a70>
    e6a8:	8080022c 	andhi	r2,r16,8
    e6ac:	10000926 	beq	r2,zero,e6d4 <__muldf3+0x69c>
    e6b0:	8880022c 	andhi	r2,r17,8
    e6b4:	1000071e 	bne	r2,zero,e6d4 <__muldf3+0x69c>
    e6b8:	00800434 	movhi	r2,16
    e6bc:	8c000234 	orhi	r16,r17,8
    e6c0:	10bfffc4 	addi	r2,r2,-1
    e6c4:	b027883a 	mov	r19,r22
    e6c8:	80a0703a 	and	r16,r16,r2
    e6cc:	902f883a 	mov	r23,r18
    e6d0:	003f1a06 	br	e33c <__alt_data_end+0xfffb8c0c>
    e6d4:	00800434 	movhi	r2,16
    e6d8:	84000234 	orhi	r16,r16,8
    e6dc:	10bfffc4 	addi	r2,r2,-1
    e6e0:	80a0703a 	and	r16,r16,r2
    e6e4:	003f1506 	br	e33c <__alt_data_end+0xfffb8c0c>
    e6e8:	3009883a 	mov	r4,r6
    e6ec:	d9400215 	stw	r5,8(sp)
    e6f0:	d9800715 	stw	r6,28(sp)
    e6f4:	da400415 	stw	r9,16(sp)
    e6f8:	da800315 	stw	r10,12(sp)
    e6fc:	000f3700 	call	f370 <__clzsi2>
    e700:	10c00804 	addi	r3,r2,32
    e704:	010009c4 	movi	r4,39
    e708:	d9400217 	ldw	r5,8(sp)
    e70c:	d9800717 	ldw	r6,28(sp)
    e710:	da400417 	ldw	r9,16(sp)
    e714:	da800317 	ldw	r10,12(sp)
    e718:	20fee20e 	bge	r4,r3,e2a4 <__alt_data_end+0xfffb8b74>
    e71c:	147ffe04 	addi	r17,r2,-8
    e720:	9462983a 	sll	r17,r18,r17
    e724:	0025883a 	mov	r18,zero
    e728:	003ee506 	br	e2c0 <__alt_data_end+0xfffb8b90>
    e72c:	d9800715 	stw	r6,28(sp)
    e730:	d9c00215 	stw	r7,8(sp)
    e734:	da400415 	stw	r9,16(sp)
    e738:	000f3700 	call	f370 <__clzsi2>
    e73c:	10c00804 	addi	r3,r2,32
    e740:	010009c4 	movi	r4,39
    e744:	d9800717 	ldw	r6,28(sp)
    e748:	d9c00217 	ldw	r7,8(sp)
    e74c:	da400417 	ldw	r9,16(sp)
    e750:	20feb40e 	bge	r4,r3,e224 <__alt_data_end+0xfffb8af4>
    e754:	143ffe04 	addi	r16,r2,-8
    e758:	9420983a 	sll	r16,r18,r16
    e75c:	002f883a 	mov	r23,zero
    e760:	003eb706 	br	e240 <__alt_data_end+0xfffb8b10>
    e764:	8004977a 	slli	r2,r16,29
    e768:	b82ed0fa 	srli	r23,r23,3
    e76c:	8020927a 	slli	r16,r16,9
    e770:	2101ffcc 	andi	r4,r4,2047
    e774:	15eeb03a 	or	r23,r2,r23
    e778:	8020d33a 	srli	r16,r16,12
    e77c:	34c0004c 	andi	r19,r6,1
    e780:	003e8706 	br	e1a0 <__alt_data_end+0xfffb8a70>
    e784:	00bf0084 	movi	r2,-1022
    e788:	10c5c83a 	sub	r2,r2,r3
    e78c:	01000e04 	movi	r4,56
    e790:	2080080e 	bge	r4,r2,e7b4 <__muldf3+0x77c>
    e794:	34c0004c 	andi	r19,r6,1
    e798:	0009883a 	mov	r4,zero
    e79c:	0021883a 	mov	r16,zero
    e7a0:	002f883a 	mov	r23,zero
    e7a4:	003e7e06 	br	e1a0 <__alt_data_end+0xfffb8a70>
    e7a8:	4007883a 	mov	r3,r8
    e7ac:	480d883a 	mov	r6,r9
    e7b0:	003fa506 	br	e648 <__alt_data_end+0xfffb8f18>
    e7b4:	010007c4 	movi	r4,31
    e7b8:	20801816 	blt	r4,r2,e81c <__muldf3+0x7e4>
    e7bc:	18c10784 	addi	r3,r3,1054
    e7c0:	80c8983a 	sll	r4,r16,r3
    e7c4:	b88ad83a 	srl	r5,r23,r2
    e7c8:	b8c6983a 	sll	r3,r23,r3
    e7cc:	80a0d83a 	srl	r16,r16,r2
    e7d0:	2908b03a 	or	r4,r5,r4
    e7d4:	1804c03a 	cmpne	r2,r3,zero
    e7d8:	2088b03a 	or	r4,r4,r2
    e7dc:	208001cc 	andi	r2,r4,7
    e7e0:	10000726 	beq	r2,zero,e800 <__muldf3+0x7c8>
    e7e4:	20c003cc 	andi	r3,r4,15
    e7e8:	00800104 	movi	r2,4
    e7ec:	18800426 	beq	r3,r2,e800 <__muldf3+0x7c8>
    e7f0:	20c00104 	addi	r3,r4,4
    e7f4:	1905803a 	cmpltu	r2,r3,r4
    e7f8:	80a1883a 	add	r16,r16,r2
    e7fc:	1809883a 	mov	r4,r3
    e800:	8080202c 	andhi	r2,r16,128
    e804:	10001b26 	beq	r2,zero,e874 <__muldf3+0x83c>
    e808:	34c0004c 	andi	r19,r6,1
    e80c:	01000044 	movi	r4,1
    e810:	0021883a 	mov	r16,zero
    e814:	002f883a 	mov	r23,zero
    e818:	003e6106 	br	e1a0 <__alt_data_end+0xfffb8a70>
    e81c:	013ef884 	movi	r4,-1054
    e820:	20c9c83a 	sub	r4,r4,r3
    e824:	01400804 	movi	r5,32
    e828:	8108d83a 	srl	r4,r16,r4
    e82c:	11401526 	beq	r2,r5,e884 <__muldf3+0x84c>
    e830:	18c10f84 	addi	r3,r3,1086
    e834:	80e0983a 	sll	r16,r16,r3
    e838:	85eeb03a 	or	r23,r16,r23
    e83c:	b804c03a 	cmpne	r2,r23,zero
    e840:	1108b03a 	or	r4,r2,r4
    e844:	20c001cc 	andi	r3,r4,7
    e848:	1800061e 	bne	r3,zero,e864 <__muldf3+0x82c>
    e84c:	0021883a 	mov	r16,zero
    e850:	202ed0fa 	srli	r23,r4,3
    e854:	34c0004c 	andi	r19,r6,1
    e858:	0009883a 	mov	r4,zero
    e85c:	b8eeb03a 	or	r23,r23,r3
    e860:	003e4f06 	br	e1a0 <__alt_data_end+0xfffb8a70>
    e864:	20c003cc 	andi	r3,r4,15
    e868:	00800104 	movi	r2,4
    e86c:	0021883a 	mov	r16,zero
    e870:	18bfdf1e 	bne	r3,r2,e7f0 <__alt_data_end+0xfffb90c0>
    e874:	8004927a 	slli	r2,r16,9
    e878:	8006977a 	slli	r3,r16,29
    e87c:	1020d33a 	srli	r16,r2,12
    e880:	003ff306 	br	e850 <__alt_data_end+0xfffb9120>
    e884:	0021883a 	mov	r16,zero
    e888:	003feb06 	br	e838 <__alt_data_end+0xfffb9108>
    e88c:	00800434 	movhi	r2,16
    e890:	84000234 	orhi	r16,r16,8
    e894:	10bfffc4 	addi	r2,r2,-1
    e898:	4cc0004c 	andi	r19,r9,1
    e89c:	80a0703a 	and	r16,r16,r2
    e8a0:	003ea606 	br	e33c <__alt_data_end+0xfffb8c0c>

0000e8a4 <__subdf3>:
    e8a4:	00c00434 	movhi	r3,16
    e8a8:	18ffffc4 	addi	r3,r3,-1
    e8ac:	defffb04 	addi	sp,sp,-20
    e8b0:	28d2703a 	and	r9,r5,r3
    e8b4:	3814d53a 	srli	r10,r7,20
    e8b8:	38c6703a 	and	r3,r7,r3
    e8bc:	3004d77a 	srli	r2,r6,29
    e8c0:	dc800215 	stw	r18,8(sp)
    e8c4:	dc000015 	stw	r16,0(sp)
    e8c8:	2824d7fa 	srli	r18,r5,31
    e8cc:	2820d53a 	srli	r16,r5,20
    e8d0:	481290fa 	slli	r9,r9,3
    e8d4:	200ad77a 	srli	r5,r4,29
    e8d8:	180690fa 	slli	r3,r3,3
    e8dc:	dc400115 	stw	r17,4(sp)
    e8e0:	dfc00415 	stw	ra,16(sp)
    e8e4:	202290fa 	slli	r17,r4,3
    e8e8:	dcc00315 	stw	r19,12(sp)
    e8ec:	5281ffcc 	andi	r10,r10,2047
    e8f0:	0101ffc4 	movi	r4,2047
    e8f4:	9011883a 	mov	r8,r18
    e8f8:	8401ffcc 	andi	r16,r16,2047
    e8fc:	94803fcc 	andi	r18,r18,255
    e900:	494ab03a 	or	r5,r9,r5
    e904:	380ed7fa 	srli	r7,r7,31
    e908:	1886b03a 	or	r3,r3,r2
    e90c:	300c90fa 	slli	r6,r6,3
    e910:	51009026 	beq	r10,r4,eb54 <__subdf3+0x2b0>
    e914:	39c0005c 	xori	r7,r7,1
    e918:	8285c83a 	sub	r2,r16,r10
    e91c:	91c06f26 	beq	r18,r7,eadc <__subdf3+0x238>
    e920:	0080b10e 	bge	zero,r2,ebe8 <__subdf3+0x344>
    e924:	50002a1e 	bne	r10,zero,e9d0 <__subdf3+0x12c>
    e928:	1988b03a 	or	r4,r3,r6
    e92c:	2000941e 	bne	r4,zero,eb80 <__subdf3+0x2dc>
    e930:	888001cc 	andi	r2,r17,7
    e934:	10005b26 	beq	r2,zero,eaa4 <__subdf3+0x200>
    e938:	88c003cc 	andi	r3,r17,15
    e93c:	00800104 	movi	r2,4
    e940:	18805826 	beq	r3,r2,eaa4 <__subdf3+0x200>
    e944:	88c00104 	addi	r3,r17,4
    e948:	1c63803a 	cmpltu	r17,r3,r17
    e94c:	2c4b883a 	add	r5,r5,r17
    e950:	2880202c 	andhi	r2,r5,128
    e954:	9200004c 	andi	r8,r18,1
    e958:	1823883a 	mov	r17,r3
    e95c:	10005426 	beq	r2,zero,eab0 <__subdf3+0x20c>
    e960:	84000044 	addi	r16,r16,1
    e964:	0081ffc4 	movi	r2,2047
    e968:	8080bf26 	beq	r16,r2,ec68 <__subdf3+0x3c4>
    e96c:	013fe034 	movhi	r4,65408
    e970:	213fffc4 	addi	r4,r4,-1
    e974:	290a703a 	and	r5,r5,r4
    e978:	2804977a 	slli	r2,r5,29
    e97c:	280a927a 	slli	r5,r5,9
    e980:	8822d0fa 	srli	r17,r17,3
    e984:	8401ffcc 	andi	r16,r16,2047
    e988:	2808d33a 	srli	r4,r5,12
    e98c:	1444b03a 	or	r2,r2,r17
    e990:	8401ffcc 	andi	r16,r16,2047
    e994:	800a953a 	slli	r5,r16,20
    e998:	40c03fcc 	andi	r3,r8,255
    e99c:	04000434 	movhi	r16,16
    e9a0:	180697fa 	slli	r3,r3,31
    e9a4:	843fffc4 	addi	r16,r16,-1
    e9a8:	2420703a 	and	r16,r4,r16
    e9ac:	8160b03a 	or	r16,r16,r5
    e9b0:	80c6b03a 	or	r3,r16,r3
    e9b4:	dfc00417 	ldw	ra,16(sp)
    e9b8:	dcc00317 	ldw	r19,12(sp)
    e9bc:	dc800217 	ldw	r18,8(sp)
    e9c0:	dc400117 	ldw	r17,4(sp)
    e9c4:	dc000017 	ldw	r16,0(sp)
    e9c8:	dec00504 	addi	sp,sp,20
    e9cc:	f800283a 	ret
    e9d0:	0101ffc4 	movi	r4,2047
    e9d4:	813fd626 	beq	r16,r4,e930 <__alt_data_end+0xfffb9200>
    e9d8:	18c02034 	orhi	r3,r3,128
    e9dc:	01000e04 	movi	r4,56
    e9e0:	2080a416 	blt	r4,r2,ec74 <__subdf3+0x3d0>
    e9e4:	010007c4 	movi	r4,31
    e9e8:	2080c716 	blt	r4,r2,ed08 <__subdf3+0x464>
    e9ec:	01000804 	movi	r4,32
    e9f0:	2089c83a 	sub	r4,r4,r2
    e9f4:	1910983a 	sll	r8,r3,r4
    e9f8:	308ed83a 	srl	r7,r6,r2
    e9fc:	3108983a 	sll	r4,r6,r4
    ea00:	1884d83a 	srl	r2,r3,r2
    ea04:	41ccb03a 	or	r6,r8,r7
    ea08:	2008c03a 	cmpne	r4,r4,zero
    ea0c:	310cb03a 	or	r6,r6,r4
    ea10:	898dc83a 	sub	r6,r17,r6
    ea14:	89a3803a 	cmpltu	r17,r17,r6
    ea18:	288bc83a 	sub	r5,r5,r2
    ea1c:	2c4bc83a 	sub	r5,r5,r17
    ea20:	3023883a 	mov	r17,r6
    ea24:	2880202c 	andhi	r2,r5,128
    ea28:	10006b26 	beq	r2,zero,ebd8 <__subdf3+0x334>
    ea2c:	04c02034 	movhi	r19,128
    ea30:	9cffffc4 	addi	r19,r19,-1
    ea34:	2ce6703a 	and	r19,r5,r19
    ea38:	98007c26 	beq	r19,zero,ec2c <__subdf3+0x388>
    ea3c:	9809883a 	mov	r4,r19
    ea40:	000f3700 	call	f370 <__clzsi2>
    ea44:	10fffe04 	addi	r3,r2,-8
    ea48:	010007c4 	movi	r4,31
    ea4c:	20c07d16 	blt	r4,r3,ec44 <__subdf3+0x3a0>
    ea50:	01400a04 	movi	r5,40
    ea54:	2885c83a 	sub	r2,r5,r2
    ea58:	888ad83a 	srl	r5,r17,r2
    ea5c:	98e6983a 	sll	r19,r19,r3
    ea60:	88e2983a 	sll	r17,r17,r3
    ea64:	2ce6b03a 	or	r19,r5,r19
    ea68:	1c007a16 	blt	r3,r16,ec54 <__subdf3+0x3b0>
    ea6c:	1c21c83a 	sub	r16,r3,r16
    ea70:	81400044 	addi	r5,r16,1
    ea74:	00c007c4 	movi	r3,31
    ea78:	19409616 	blt	r3,r5,ecd4 <__subdf3+0x430>
    ea7c:	1c21c83a 	sub	r16,r3,r16
    ea80:	8c08983a 	sll	r4,r17,r16
    ea84:	8946d83a 	srl	r3,r17,r5
    ea88:	9c20983a 	sll	r16,r19,r16
    ea8c:	2008c03a 	cmpne	r4,r4,zero
    ea90:	994ad83a 	srl	r5,r19,r5
    ea94:	1c06b03a 	or	r3,r3,r16
    ea98:	1922b03a 	or	r17,r3,r4
    ea9c:	0021883a 	mov	r16,zero
    eaa0:	003fa306 	br	e930 <__alt_data_end+0xfffb9200>
    eaa4:	2880202c 	andhi	r2,r5,128
    eaa8:	9200004c 	andi	r8,r18,1
    eaac:	103fac1e 	bne	r2,zero,e960 <__alt_data_end+0xfffb9230>
    eab0:	2804977a 	slli	r2,r5,29
    eab4:	8822d0fa 	srli	r17,r17,3
    eab8:	00c1ffc4 	movi	r3,2047
    eabc:	280ad0fa 	srli	r5,r5,3
    eac0:	1444b03a 	or	r2,r2,r17
    eac4:	80c02726 	beq	r16,r3,eb64 <__subdf3+0x2c0>
    eac8:	01000434 	movhi	r4,16
    eacc:	213fffc4 	addi	r4,r4,-1
    ead0:	80e0703a 	and	r16,r16,r3
    ead4:	2908703a 	and	r4,r5,r4
    ead8:	003fad06 	br	e990 <__alt_data_end+0xfffb9260>
    eadc:	0080690e 	bge	zero,r2,ec84 <__subdf3+0x3e0>
    eae0:	50002f26 	beq	r10,zero,eba0 <__subdf3+0x2fc>
    eae4:	0101ffc4 	movi	r4,2047
    eae8:	813f9126 	beq	r16,r4,e930 <__alt_data_end+0xfffb9200>
    eaec:	18c02034 	orhi	r3,r3,128
    eaf0:	01000e04 	movi	r4,56
    eaf4:	2080b00e 	bge	r4,r2,edb8 <__subdf3+0x514>
    eaf8:	198cb03a 	or	r6,r3,r6
    eafc:	300ec03a 	cmpne	r7,r6,zero
    eb00:	0005883a 	mov	r2,zero
    eb04:	3c4f883a 	add	r7,r7,r17
    eb08:	3c63803a 	cmpltu	r17,r7,r17
    eb0c:	114b883a 	add	r5,r2,r5
    eb10:	2c4b883a 	add	r5,r5,r17
    eb14:	3823883a 	mov	r17,r7
    eb18:	2880202c 	andhi	r2,r5,128
    eb1c:	10002e26 	beq	r2,zero,ebd8 <__subdf3+0x334>
    eb20:	84000044 	addi	r16,r16,1
    eb24:	0081ffc4 	movi	r2,2047
    eb28:	8080de26 	beq	r16,r2,eea4 <__subdf3+0x600>
    eb2c:	00bfe034 	movhi	r2,65408
    eb30:	10bfffc4 	addi	r2,r2,-1
    eb34:	288a703a 	and	r5,r5,r2
    eb38:	880cd07a 	srli	r6,r17,1
    eb3c:	280897fa 	slli	r4,r5,31
    eb40:	88c0004c 	andi	r3,r17,1
    eb44:	30e2b03a 	or	r17,r6,r3
    eb48:	280ad07a 	srli	r5,r5,1
    eb4c:	8922b03a 	or	r17,r17,r4
    eb50:	003f7706 	br	e930 <__alt_data_end+0xfffb9200>
    eb54:	1984b03a 	or	r2,r3,r6
    eb58:	103f6e26 	beq	r2,zero,e914 <__alt_data_end+0xfffb91e4>
    eb5c:	39c03fcc 	andi	r7,r7,255
    eb60:	003f6d06 	br	e918 <__alt_data_end+0xfffb91e8>
    eb64:	1146b03a 	or	r3,r2,r5
    eb68:	18003f26 	beq	r3,zero,ec68 <__subdf3+0x3c4>
    eb6c:	00c00434 	movhi	r3,16
    eb70:	29000234 	orhi	r4,r5,8
    eb74:	18ffffc4 	addi	r3,r3,-1
    eb78:	20c8703a 	and	r4,r4,r3
    eb7c:	003f8406 	br	e990 <__alt_data_end+0xfffb9260>
    eb80:	10bfffc4 	addi	r2,r2,-1
    eb84:	1000501e 	bne	r2,zero,ecc8 <__subdf3+0x424>
    eb88:	898fc83a 	sub	r7,r17,r6
    eb8c:	89e3803a 	cmpltu	r17,r17,r7
    eb90:	28cbc83a 	sub	r5,r5,r3
    eb94:	2c4bc83a 	sub	r5,r5,r17
    eb98:	3823883a 	mov	r17,r7
    eb9c:	003fa106 	br	ea24 <__alt_data_end+0xfffb92f4>
    eba0:	1988b03a 	or	r4,r3,r6
    eba4:	203f6226 	beq	r4,zero,e930 <__alt_data_end+0xfffb9200>
    eba8:	10bfffc4 	addi	r2,r2,-1
    ebac:	10009b1e 	bne	r2,zero,ee1c <__subdf3+0x578>
    ebb0:	344d883a 	add	r6,r6,r17
    ebb4:	3463803a 	cmpltu	r17,r6,r17
    ebb8:	194b883a 	add	r5,r3,r5
    ebbc:	2c4b883a 	add	r5,r5,r17
    ebc0:	3023883a 	mov	r17,r6
    ebc4:	003fd406 	br	eb18 <__alt_data_end+0xfffb93e8>
    ebc8:	1106b03a 	or	r3,r2,r4
    ebcc:	1800b426 	beq	r3,zero,eea0 <__subdf3+0x5fc>
    ebd0:	100b883a 	mov	r5,r2
    ebd4:	2023883a 	mov	r17,r4
    ebd8:	888001cc 	andi	r2,r17,7
    ebdc:	103f561e 	bne	r2,zero,e938 <__alt_data_end+0xfffb9208>
    ebe0:	9200004c 	andi	r8,r18,1
    ebe4:	003fb206 	br	eab0 <__alt_data_end+0xfffb9380>
    ebe8:	1000531e 	bne	r2,zero,ed38 <__subdf3+0x494>
    ebec:	80800044 	addi	r2,r16,1
    ebf0:	1081ffcc 	andi	r2,r2,2047
    ebf4:	01000044 	movi	r4,1
    ebf8:	2080a00e 	bge	r4,r2,ee7c <__subdf3+0x5d8>
    ebfc:	8985c83a 	sub	r2,r17,r6
    ec00:	8889803a 	cmpltu	r4,r17,r2
    ec04:	28e7c83a 	sub	r19,r5,r3
    ec08:	9927c83a 	sub	r19,r19,r4
    ec0c:	9900202c 	andhi	r4,r19,128
    ec10:	20006226 	beq	r4,zero,ed9c <__subdf3+0x4f8>
    ec14:	3463c83a 	sub	r17,r6,r17
    ec18:	194bc83a 	sub	r5,r3,r5
    ec1c:	344d803a 	cmpltu	r6,r6,r17
    ec20:	29a7c83a 	sub	r19,r5,r6
    ec24:	3825883a 	mov	r18,r7
    ec28:	983f841e 	bne	r19,zero,ea3c <__alt_data_end+0xfffb930c>
    ec2c:	8809883a 	mov	r4,r17
    ec30:	000f3700 	call	f370 <__clzsi2>
    ec34:	10800804 	addi	r2,r2,32
    ec38:	10fffe04 	addi	r3,r2,-8
    ec3c:	010007c4 	movi	r4,31
    ec40:	20ff830e 	bge	r4,r3,ea50 <__alt_data_end+0xfffb9320>
    ec44:	14fff604 	addi	r19,r2,-40
    ec48:	8ce6983a 	sll	r19,r17,r19
    ec4c:	0023883a 	mov	r17,zero
    ec50:	1c3f860e 	bge	r3,r16,ea6c <__alt_data_end+0xfffb933c>
    ec54:	017fe034 	movhi	r5,65408
    ec58:	297fffc4 	addi	r5,r5,-1
    ec5c:	80e1c83a 	sub	r16,r16,r3
    ec60:	994a703a 	and	r5,r19,r5
    ec64:	003f3206 	br	e930 <__alt_data_end+0xfffb9200>
    ec68:	0009883a 	mov	r4,zero
    ec6c:	0005883a 	mov	r2,zero
    ec70:	003f4706 	br	e990 <__alt_data_end+0xfffb9260>
    ec74:	198cb03a 	or	r6,r3,r6
    ec78:	300cc03a 	cmpne	r6,r6,zero
    ec7c:	0005883a 	mov	r2,zero
    ec80:	003f6306 	br	ea10 <__alt_data_end+0xfffb92e0>
    ec84:	10009d1e 	bne	r2,zero,eefc <__subdf3+0x658>
    ec88:	81c00044 	addi	r7,r16,1
    ec8c:	3881ffcc 	andi	r2,r7,2047
    ec90:	02400044 	movi	r9,1
    ec94:	4880680e 	bge	r9,r2,ee38 <__subdf3+0x594>
    ec98:	0081ffc4 	movi	r2,2047
    ec9c:	3880ae26 	beq	r7,r2,ef58 <__subdf3+0x6b4>
    eca0:	344d883a 	add	r6,r6,r17
    eca4:	3463803a 	cmpltu	r17,r6,r17
    eca8:	194b883a 	add	r5,r3,r5
    ecac:	2c4b883a 	add	r5,r5,r17
    ecb0:	282297fa 	slli	r17,r5,31
    ecb4:	300cd07a 	srli	r6,r6,1
    ecb8:	280ad07a 	srli	r5,r5,1
    ecbc:	3821883a 	mov	r16,r7
    ecc0:	89a2b03a 	or	r17,r17,r6
    ecc4:	003f1a06 	br	e930 <__alt_data_end+0xfffb9200>
    ecc8:	0101ffc4 	movi	r4,2047
    eccc:	813f431e 	bne	r16,r4,e9dc <__alt_data_end+0xfffb92ac>
    ecd0:	003f1706 	br	e930 <__alt_data_end+0xfffb9200>
    ecd4:	80bff844 	addi	r2,r16,-31
    ecd8:	00c00804 	movi	r3,32
    ecdc:	9884d83a 	srl	r2,r19,r2
    ece0:	28c05126 	beq	r5,r3,ee28 <__subdf3+0x584>
    ece4:	00c00fc4 	movi	r3,63
    ece8:	1c21c83a 	sub	r16,r3,r16
    ecec:	9c26983a 	sll	r19,r19,r16
    ecf0:	9c62b03a 	or	r17,r19,r17
    ecf4:	8822c03a 	cmpne	r17,r17,zero
    ecf8:	88a2b03a 	or	r17,r17,r2
    ecfc:	000b883a 	mov	r5,zero
    ed00:	0021883a 	mov	r16,zero
    ed04:	003fb406 	br	ebd8 <__alt_data_end+0xfffb94a8>
    ed08:	113ff804 	addi	r4,r2,-32
    ed0c:	01c00804 	movi	r7,32
    ed10:	1908d83a 	srl	r4,r3,r4
    ed14:	11c04626 	beq	r2,r7,ee30 <__subdf3+0x58c>
    ed18:	01c01004 	movi	r7,64
    ed1c:	3885c83a 	sub	r2,r7,r2
    ed20:	1884983a 	sll	r2,r3,r2
    ed24:	118cb03a 	or	r6,r2,r6
    ed28:	300cc03a 	cmpne	r6,r6,zero
    ed2c:	310cb03a 	or	r6,r6,r4
    ed30:	0005883a 	mov	r2,zero
    ed34:	003f3606 	br	ea10 <__alt_data_end+0xfffb92e0>
    ed38:	80002b26 	beq	r16,zero,ede8 <__subdf3+0x544>
    ed3c:	0101ffc4 	movi	r4,2047
    ed40:	51006926 	beq	r10,r4,eee8 <__subdf3+0x644>
    ed44:	0085c83a 	sub	r2,zero,r2
    ed48:	29402034 	orhi	r5,r5,128
    ed4c:	01000e04 	movi	r4,56
    ed50:	20807d16 	blt	r4,r2,ef48 <__subdf3+0x6a4>
    ed54:	010007c4 	movi	r4,31
    ed58:	2080d916 	blt	r4,r2,f0c0 <__subdf3+0x81c>
    ed5c:	01000804 	movi	r4,32
    ed60:	2089c83a 	sub	r4,r4,r2
    ed64:	2912983a 	sll	r9,r5,r4
    ed68:	8890d83a 	srl	r8,r17,r2
    ed6c:	8908983a 	sll	r4,r17,r4
    ed70:	2884d83a 	srl	r2,r5,r2
    ed74:	4a22b03a 	or	r17,r9,r8
    ed78:	2008c03a 	cmpne	r4,r4,zero
    ed7c:	8922b03a 	or	r17,r17,r4
    ed80:	3463c83a 	sub	r17,r6,r17
    ed84:	1885c83a 	sub	r2,r3,r2
    ed88:	344d803a 	cmpltu	r6,r6,r17
    ed8c:	118bc83a 	sub	r5,r2,r6
    ed90:	5021883a 	mov	r16,r10
    ed94:	3825883a 	mov	r18,r7
    ed98:	003f2206 	br	ea24 <__alt_data_end+0xfffb92f4>
    ed9c:	9886b03a 	or	r3,r19,r2
    eda0:	18001c1e 	bne	r3,zero,ee14 <__subdf3+0x570>
    eda4:	0011883a 	mov	r8,zero
    eda8:	000b883a 	mov	r5,zero
    edac:	0023883a 	mov	r17,zero
    edb0:	0021883a 	mov	r16,zero
    edb4:	003f3e06 	br	eab0 <__alt_data_end+0xfffb9380>
    edb8:	010007c4 	movi	r4,31
    edbc:	20803c16 	blt	r4,r2,eeb0 <__subdf3+0x60c>
    edc0:	01000804 	movi	r4,32
    edc4:	2089c83a 	sub	r4,r4,r2
    edc8:	1912983a 	sll	r9,r3,r4
    edcc:	308ed83a 	srl	r7,r6,r2
    edd0:	3108983a 	sll	r4,r6,r4
    edd4:	1884d83a 	srl	r2,r3,r2
    edd8:	49ceb03a 	or	r7,r9,r7
    eddc:	2008c03a 	cmpne	r4,r4,zero
    ede0:	390eb03a 	or	r7,r7,r4
    ede4:	003f4706 	br	eb04 <__alt_data_end+0xfffb93d4>
    ede8:	2c48b03a 	or	r4,r5,r17
    edec:	20003e26 	beq	r4,zero,eee8 <__subdf3+0x644>
    edf0:	0084303a 	nor	r2,zero,r2
    edf4:	10003a1e 	bne	r2,zero,eee0 <__subdf3+0x63c>
    edf8:	3463c83a 	sub	r17,r6,r17
    edfc:	194bc83a 	sub	r5,r3,r5
    ee00:	344d803a 	cmpltu	r6,r6,r17
    ee04:	298bc83a 	sub	r5,r5,r6
    ee08:	5021883a 	mov	r16,r10
    ee0c:	3825883a 	mov	r18,r7
    ee10:	003f0406 	br	ea24 <__alt_data_end+0xfffb92f4>
    ee14:	1023883a 	mov	r17,r2
    ee18:	003f0706 	br	ea38 <__alt_data_end+0xfffb9308>
    ee1c:	0101ffc4 	movi	r4,2047
    ee20:	813f331e 	bne	r16,r4,eaf0 <__alt_data_end+0xfffb93c0>
    ee24:	003ec206 	br	e930 <__alt_data_end+0xfffb9200>
    ee28:	0027883a 	mov	r19,zero
    ee2c:	003fb006 	br	ecf0 <__alt_data_end+0xfffb95c0>
    ee30:	0005883a 	mov	r2,zero
    ee34:	003fbb06 	br	ed24 <__alt_data_end+0xfffb95f4>
    ee38:	2c44b03a 	or	r2,r5,r17
    ee3c:	80008b1e 	bne	r16,zero,f06c <__subdf3+0x7c8>
    ee40:	1000b526 	beq	r2,zero,f118 <__subdf3+0x874>
    ee44:	1984b03a 	or	r2,r3,r6
    ee48:	103eb926 	beq	r2,zero,e930 <__alt_data_end+0xfffb9200>
    ee4c:	3449883a 	add	r4,r6,r17
    ee50:	2463803a 	cmpltu	r17,r4,r17
    ee54:	194b883a 	add	r5,r3,r5
    ee58:	2c4b883a 	add	r5,r5,r17
    ee5c:	2880202c 	andhi	r2,r5,128
    ee60:	2023883a 	mov	r17,r4
    ee64:	103f5c26 	beq	r2,zero,ebd8 <__alt_data_end+0xfffb94a8>
    ee68:	00bfe034 	movhi	r2,65408
    ee6c:	10bfffc4 	addi	r2,r2,-1
    ee70:	4821883a 	mov	r16,r9
    ee74:	288a703a 	and	r5,r5,r2
    ee78:	003ead06 	br	e930 <__alt_data_end+0xfffb9200>
    ee7c:	2c44b03a 	or	r2,r5,r17
    ee80:	8000291e 	bne	r16,zero,ef28 <__subdf3+0x684>
    ee84:	10004f1e 	bne	r2,zero,efc4 <__subdf3+0x720>
    ee88:	1984b03a 	or	r2,r3,r6
    ee8c:	10000426 	beq	r2,zero,eea0 <__subdf3+0x5fc>
    ee90:	180b883a 	mov	r5,r3
    ee94:	3023883a 	mov	r17,r6
    ee98:	3825883a 	mov	r18,r7
    ee9c:	003ea406 	br	e930 <__alt_data_end+0xfffb9200>
    eea0:	0011883a 	mov	r8,zero
    eea4:	000b883a 	mov	r5,zero
    eea8:	0023883a 	mov	r17,zero
    eeac:	003f0006 	br	eab0 <__alt_data_end+0xfffb9380>
    eeb0:	11fff804 	addi	r7,r2,-32
    eeb4:	19c8d83a 	srl	r4,r3,r7
    eeb8:	01c00804 	movi	r7,32
    eebc:	11c07e26 	beq	r2,r7,f0b8 <__subdf3+0x814>
    eec0:	01c01004 	movi	r7,64
    eec4:	3885c83a 	sub	r2,r7,r2
    eec8:	1884983a 	sll	r2,r3,r2
    eecc:	118cb03a 	or	r6,r2,r6
    eed0:	300ec03a 	cmpne	r7,r6,zero
    eed4:	390eb03a 	or	r7,r7,r4
    eed8:	0005883a 	mov	r2,zero
    eedc:	003f0906 	br	eb04 <__alt_data_end+0xfffb93d4>
    eee0:	0101ffc4 	movi	r4,2047
    eee4:	513f991e 	bne	r10,r4,ed4c <__alt_data_end+0xfffb961c>
    eee8:	180b883a 	mov	r5,r3
    eeec:	3023883a 	mov	r17,r6
    eef0:	5021883a 	mov	r16,r10
    eef4:	3825883a 	mov	r18,r7
    eef8:	003e8d06 	br	e930 <__alt_data_end+0xfffb9200>
    eefc:	80001a1e 	bne	r16,zero,ef68 <__subdf3+0x6c4>
    ef00:	2c48b03a 	or	r4,r5,r17
    ef04:	20005526 	beq	r4,zero,f05c <__subdf3+0x7b8>
    ef08:	0084303a 	nor	r2,zero,r2
    ef0c:	1000511e 	bne	r2,zero,f054 <__subdf3+0x7b0>
    ef10:	89a3883a 	add	r17,r17,r6
    ef14:	194b883a 	add	r5,r3,r5
    ef18:	898d803a 	cmpltu	r6,r17,r6
    ef1c:	298b883a 	add	r5,r5,r6
    ef20:	5021883a 	mov	r16,r10
    ef24:	003efc06 	br	eb18 <__alt_data_end+0xfffb93e8>
    ef28:	1000341e 	bne	r2,zero,effc <__subdf3+0x758>
    ef2c:	1984b03a 	or	r2,r3,r6
    ef30:	10006f26 	beq	r2,zero,f0f0 <__subdf3+0x84c>
    ef34:	180b883a 	mov	r5,r3
    ef38:	3023883a 	mov	r17,r6
    ef3c:	3825883a 	mov	r18,r7
    ef40:	0401ffc4 	movi	r16,2047
    ef44:	003e7a06 	br	e930 <__alt_data_end+0xfffb9200>
    ef48:	2c62b03a 	or	r17,r5,r17
    ef4c:	8822c03a 	cmpne	r17,r17,zero
    ef50:	0005883a 	mov	r2,zero
    ef54:	003f8a06 	br	ed80 <__alt_data_end+0xfffb9650>
    ef58:	3821883a 	mov	r16,r7
    ef5c:	000b883a 	mov	r5,zero
    ef60:	0023883a 	mov	r17,zero
    ef64:	003ed206 	br	eab0 <__alt_data_end+0xfffb9380>
    ef68:	0101ffc4 	movi	r4,2047
    ef6c:	51003b26 	beq	r10,r4,f05c <__subdf3+0x7b8>
    ef70:	0085c83a 	sub	r2,zero,r2
    ef74:	29402034 	orhi	r5,r5,128
    ef78:	01000e04 	movi	r4,56
    ef7c:	20806216 	blt	r4,r2,f108 <__subdf3+0x864>
    ef80:	010007c4 	movi	r4,31
    ef84:	20806b16 	blt	r4,r2,f134 <__subdf3+0x890>
    ef88:	01000804 	movi	r4,32
    ef8c:	2089c83a 	sub	r4,r4,r2
    ef90:	2912983a 	sll	r9,r5,r4
    ef94:	888ed83a 	srl	r7,r17,r2
    ef98:	8908983a 	sll	r4,r17,r4
    ef9c:	2884d83a 	srl	r2,r5,r2
    efa0:	49e2b03a 	or	r17,r9,r7
    efa4:	2008c03a 	cmpne	r4,r4,zero
    efa8:	8922b03a 	or	r17,r17,r4
    efac:	89a3883a 	add	r17,r17,r6
    efb0:	10c5883a 	add	r2,r2,r3
    efb4:	898d803a 	cmpltu	r6,r17,r6
    efb8:	118b883a 	add	r5,r2,r6
    efbc:	5021883a 	mov	r16,r10
    efc0:	003ed506 	br	eb18 <__alt_data_end+0xfffb93e8>
    efc4:	1984b03a 	or	r2,r3,r6
    efc8:	103e5926 	beq	r2,zero,e930 <__alt_data_end+0xfffb9200>
    efcc:	8989c83a 	sub	r4,r17,r6
    efd0:	8911803a 	cmpltu	r8,r17,r4
    efd4:	28c5c83a 	sub	r2,r5,r3
    efd8:	1205c83a 	sub	r2,r2,r8
    efdc:	1200202c 	andhi	r8,r2,128
    efe0:	403ef926 	beq	r8,zero,ebc8 <__alt_data_end+0xfffb9498>
    efe4:	3463c83a 	sub	r17,r6,r17
    efe8:	194bc83a 	sub	r5,r3,r5
    efec:	344d803a 	cmpltu	r6,r6,r17
    eff0:	298bc83a 	sub	r5,r5,r6
    eff4:	3825883a 	mov	r18,r7
    eff8:	003e4d06 	br	e930 <__alt_data_end+0xfffb9200>
    effc:	1984b03a 	or	r2,r3,r6
    f000:	10002b26 	beq	r2,zero,f0b0 <__subdf3+0x80c>
    f004:	2808d0fa 	srli	r4,r5,3
    f008:	8822d0fa 	srli	r17,r17,3
    f00c:	280a977a 	slli	r5,r5,29
    f010:	2080022c 	andhi	r2,r4,8
    f014:	2c62b03a 	or	r17,r5,r17
    f018:	10000826 	beq	r2,zero,f03c <__subdf3+0x798>
    f01c:	1810d0fa 	srli	r8,r3,3
    f020:	4080022c 	andhi	r2,r8,8
    f024:	1000051e 	bne	r2,zero,f03c <__subdf3+0x798>
    f028:	300cd0fa 	srli	r6,r6,3
    f02c:	1804977a 	slli	r2,r3,29
    f030:	4009883a 	mov	r4,r8
    f034:	3825883a 	mov	r18,r7
    f038:	11a2b03a 	or	r17,r2,r6
    f03c:	880ad77a 	srli	r5,r17,29
    f040:	200890fa 	slli	r4,r4,3
    f044:	882290fa 	slli	r17,r17,3
    f048:	0401ffc4 	movi	r16,2047
    f04c:	290ab03a 	or	r5,r5,r4
    f050:	003e3706 	br	e930 <__alt_data_end+0xfffb9200>
    f054:	0101ffc4 	movi	r4,2047
    f058:	513fc71e 	bne	r10,r4,ef78 <__alt_data_end+0xfffb9848>
    f05c:	180b883a 	mov	r5,r3
    f060:	3023883a 	mov	r17,r6
    f064:	5021883a 	mov	r16,r10
    f068:	003e3106 	br	e930 <__alt_data_end+0xfffb9200>
    f06c:	10002d26 	beq	r2,zero,f124 <__subdf3+0x880>
    f070:	1984b03a 	or	r2,r3,r6
    f074:	10000e26 	beq	r2,zero,f0b0 <__subdf3+0x80c>
    f078:	2808d0fa 	srli	r4,r5,3
    f07c:	8822d0fa 	srli	r17,r17,3
    f080:	280a977a 	slli	r5,r5,29
    f084:	2080022c 	andhi	r2,r4,8
    f088:	2c62b03a 	or	r17,r5,r17
    f08c:	103feb26 	beq	r2,zero,f03c <__alt_data_end+0xfffb990c>
    f090:	180ed0fa 	srli	r7,r3,3
    f094:	3880022c 	andhi	r2,r7,8
    f098:	103fe81e 	bne	r2,zero,f03c <__alt_data_end+0xfffb990c>
    f09c:	300cd0fa 	srli	r6,r6,3
    f0a0:	1804977a 	slli	r2,r3,29
    f0a4:	3809883a 	mov	r4,r7
    f0a8:	11a2b03a 	or	r17,r2,r6
    f0ac:	003fe306 	br	f03c <__alt_data_end+0xfffb990c>
    f0b0:	0401ffc4 	movi	r16,2047
    f0b4:	003e1e06 	br	e930 <__alt_data_end+0xfffb9200>
    f0b8:	0005883a 	mov	r2,zero
    f0bc:	003f8306 	br	eecc <__alt_data_end+0xfffb979c>
    f0c0:	113ff804 	addi	r4,r2,-32
    f0c4:	02000804 	movi	r8,32
    f0c8:	2908d83a 	srl	r4,r5,r4
    f0cc:	12002526 	beq	r2,r8,f164 <__subdf3+0x8c0>
    f0d0:	02001004 	movi	r8,64
    f0d4:	4085c83a 	sub	r2,r8,r2
    f0d8:	288a983a 	sll	r5,r5,r2
    f0dc:	2c62b03a 	or	r17,r5,r17
    f0e0:	8822c03a 	cmpne	r17,r17,zero
    f0e4:	8922b03a 	or	r17,r17,r4
    f0e8:	0005883a 	mov	r2,zero
    f0ec:	003f2406 	br	ed80 <__alt_data_end+0xfffb9650>
    f0f0:	01402034 	movhi	r5,128
    f0f4:	0011883a 	mov	r8,zero
    f0f8:	297fffc4 	addi	r5,r5,-1
    f0fc:	047ffe04 	movi	r17,-8
    f100:	0401ffc4 	movi	r16,2047
    f104:	003e6a06 	br	eab0 <__alt_data_end+0xfffb9380>
    f108:	2c62b03a 	or	r17,r5,r17
    f10c:	8822c03a 	cmpne	r17,r17,zero
    f110:	0005883a 	mov	r2,zero
    f114:	003fa506 	br	efac <__alt_data_end+0xfffb987c>
    f118:	180b883a 	mov	r5,r3
    f11c:	3023883a 	mov	r17,r6
    f120:	003e0306 	br	e930 <__alt_data_end+0xfffb9200>
    f124:	180b883a 	mov	r5,r3
    f128:	3023883a 	mov	r17,r6
    f12c:	0401ffc4 	movi	r16,2047
    f130:	003dff06 	br	e930 <__alt_data_end+0xfffb9200>
    f134:	113ff804 	addi	r4,r2,-32
    f138:	01c00804 	movi	r7,32
    f13c:	2908d83a 	srl	r4,r5,r4
    f140:	11c00a26 	beq	r2,r7,f16c <__subdf3+0x8c8>
    f144:	01c01004 	movi	r7,64
    f148:	3885c83a 	sub	r2,r7,r2
    f14c:	288a983a 	sll	r5,r5,r2
    f150:	2c62b03a 	or	r17,r5,r17
    f154:	8822c03a 	cmpne	r17,r17,zero
    f158:	8922b03a 	or	r17,r17,r4
    f15c:	0005883a 	mov	r2,zero
    f160:	003f9206 	br	efac <__alt_data_end+0xfffb987c>
    f164:	000b883a 	mov	r5,zero
    f168:	003fdc06 	br	f0dc <__alt_data_end+0xfffb99ac>
    f16c:	000b883a 	mov	r5,zero
    f170:	003ff706 	br	f150 <__alt_data_end+0xfffb9a20>

0000f174 <__fixdfsi>:
    f174:	2806d53a 	srli	r3,r5,20
    f178:	00800434 	movhi	r2,16
    f17c:	10bfffc4 	addi	r2,r2,-1
    f180:	18c1ffcc 	andi	r3,r3,2047
    f184:	0180ff84 	movi	r6,1022
    f188:	2884703a 	and	r2,r5,r2
    f18c:	280ad7fa 	srli	r5,r5,31
    f190:	30c0130e 	bge	r6,r3,f1e0 <__fixdfsi+0x6c>
    f194:	01810744 	movi	r6,1053
    f198:	30c00d16 	blt	r6,r3,f1d0 <__fixdfsi+0x5c>
    f19c:	01810cc4 	movi	r6,1075
    f1a0:	30cdc83a 	sub	r6,r6,r3
    f1a4:	01c007c4 	movi	r7,31
    f1a8:	10800434 	orhi	r2,r2,16
    f1ac:	39800e0e 	bge	r7,r6,f1e8 <__fixdfsi+0x74>
    f1b0:	010104c4 	movi	r4,1043
    f1b4:	20c7c83a 	sub	r3,r4,r3
    f1b8:	10c6d83a 	srl	r3,r2,r3
    f1bc:	29403fcc 	andi	r5,r5,255
    f1c0:	0145c83a 	sub	r2,zero,r5
    f1c4:	1884f03a 	xor	r2,r3,r2
    f1c8:	1145883a 	add	r2,r2,r5
    f1cc:	f800283a 	ret
    f1d0:	00a00034 	movhi	r2,32768
    f1d4:	10bfffc4 	addi	r2,r2,-1
    f1d8:	2885883a 	add	r2,r5,r2
    f1dc:	f800283a 	ret
    f1e0:	0005883a 	mov	r2,zero
    f1e4:	f800283a 	ret
    f1e8:	18fefb44 	addi	r3,r3,-1043
    f1ec:	2188d83a 	srl	r4,r4,r6
    f1f0:	10c6983a 	sll	r3,r2,r3
    f1f4:	20c6b03a 	or	r3,r4,r3
    f1f8:	003ff006 	br	f1bc <__alt_data_end+0xfffb9a8c>

0000f1fc <__floatsidf>:
    f1fc:	defffd04 	addi	sp,sp,-12
    f200:	dc400115 	stw	r17,4(sp)
    f204:	dfc00215 	stw	ra,8(sp)
    f208:	dc000015 	stw	r16,0(sp)
    f20c:	2023883a 	mov	r17,r4
    f210:	20001426 	beq	r4,zero,f264 <__floatsidf+0x68>
    f214:	2020d7fa 	srli	r16,r4,31
    f218:	80000126 	beq	r16,zero,f220 <__floatsidf+0x24>
    f21c:	0123c83a 	sub	r17,zero,r4
    f220:	8809883a 	mov	r4,r17
    f224:	000f3700 	call	f370 <__clzsi2>
    f228:	01410784 	movi	r5,1054
    f22c:	00c00284 	movi	r3,10
    f230:	288bc83a 	sub	r5,r5,r2
    f234:	18801c16 	blt	r3,r2,f2a8 <__floatsidf+0xac>
    f238:	00c002c4 	movi	r3,11
    f23c:	1887c83a 	sub	r3,r3,r2
    f240:	88c8d83a 	srl	r4,r17,r3
    f244:	00c00434 	movhi	r3,16
    f248:	18ffffc4 	addi	r3,r3,-1
    f24c:	10800544 	addi	r2,r2,21
    f250:	20c8703a 	and	r4,r4,r3
    f254:	8884983a 	sll	r2,r17,r2
    f258:	28c1ffcc 	andi	r3,r5,2047
    f25c:	800d883a 	mov	r6,r16
    f260:	00000406 	br	f274 <__floatsidf+0x78>
    f264:	000d883a 	mov	r6,zero
    f268:	0007883a 	mov	r3,zero
    f26c:	0009883a 	mov	r4,zero
    f270:	0005883a 	mov	r2,zero
    f274:	180a953a 	slli	r5,r3,20
    f278:	31803fcc 	andi	r6,r6,255
    f27c:	00c00434 	movhi	r3,16
    f280:	300c97fa 	slli	r6,r6,31
    f284:	18ffffc4 	addi	r3,r3,-1
    f288:	20c6703a 	and	r3,r4,r3
    f28c:	1946b03a 	or	r3,r3,r5
    f290:	1986b03a 	or	r3,r3,r6
    f294:	dfc00217 	ldw	ra,8(sp)
    f298:	dc400117 	ldw	r17,4(sp)
    f29c:	dc000017 	ldw	r16,0(sp)
    f2a0:	dec00304 	addi	sp,sp,12
    f2a4:	f800283a 	ret
    f2a8:	10fffd44 	addi	r3,r2,-11
    f2ac:	88c8983a 	sll	r4,r17,r3
    f2b0:	00800434 	movhi	r2,16
    f2b4:	10bfffc4 	addi	r2,r2,-1
    f2b8:	2088703a 	and	r4,r4,r2
    f2bc:	28c1ffcc 	andi	r3,r5,2047
    f2c0:	800d883a 	mov	r6,r16
    f2c4:	0005883a 	mov	r2,zero
    f2c8:	003fea06 	br	f274 <__alt_data_end+0xfffb9b44>

0000f2cc <__floatunsidf>:
    f2cc:	defffe04 	addi	sp,sp,-8
    f2d0:	dc000015 	stw	r16,0(sp)
    f2d4:	dfc00115 	stw	ra,4(sp)
    f2d8:	2021883a 	mov	r16,r4
    f2dc:	20001026 	beq	r4,zero,f320 <__floatunsidf+0x54>
    f2e0:	000f3700 	call	f370 <__clzsi2>
    f2e4:	01410784 	movi	r5,1054
    f2e8:	100d883a 	mov	r6,r2
    f2ec:	288bc83a 	sub	r5,r5,r2
    f2f0:	00800284 	movi	r2,10
    f2f4:	11801616 	blt	r2,r6,f350 <__floatunsidf+0x84>
    f2f8:	008002c4 	movi	r2,11
    f2fc:	1185c83a 	sub	r2,r2,r6
    f300:	8084d83a 	srl	r2,r16,r2
    f304:	00c00434 	movhi	r3,16
    f308:	31c00544 	addi	r7,r6,21
    f30c:	18ffffc4 	addi	r3,r3,-1
    f310:	81e0983a 	sll	r16,r16,r7
    f314:	10cc703a 	and	r6,r2,r3
    f318:	2941ffcc 	andi	r5,r5,2047
    f31c:	00000206 	br	f328 <__floatunsidf+0x5c>
    f320:	000b883a 	mov	r5,zero
    f324:	000d883a 	mov	r6,zero
    f328:	280a953a 	slli	r5,r5,20
    f32c:	00c00434 	movhi	r3,16
    f330:	18ffffc4 	addi	r3,r3,-1
    f334:	30c6703a 	and	r3,r6,r3
    f338:	8005883a 	mov	r2,r16
    f33c:	1946b03a 	or	r3,r3,r5
    f340:	dfc00117 	ldw	ra,4(sp)
    f344:	dc000017 	ldw	r16,0(sp)
    f348:	dec00204 	addi	sp,sp,8
    f34c:	f800283a 	ret
    f350:	31bffd44 	addi	r6,r6,-11
    f354:	818c983a 	sll	r6,r16,r6
    f358:	00800434 	movhi	r2,16
    f35c:	10bfffc4 	addi	r2,r2,-1
    f360:	2941ffcc 	andi	r5,r5,2047
    f364:	0021883a 	mov	r16,zero
    f368:	308c703a 	and	r6,r6,r2
    f36c:	003fee06 	br	f328 <__alt_data_end+0xfffb9bf8>

0000f370 <__clzsi2>:
    f370:	00bfffd4 	movui	r2,65535
    f374:	11000b36 	bltu	r2,r4,f3a4 <__clzsi2+0x34>
    f378:	00803fc4 	movi	r2,255
    f37c:	1100122e 	bgeu	r2,r4,f3c8 <__clzsi2+0x58>
    f380:	00c00204 	movi	r3,8
    f384:	01400604 	movi	r5,24
    f388:	20c8d83a 	srl	r4,r4,r3
    f38c:	00800074 	movhi	r2,1
    f390:	10896604 	addi	r2,r2,9624
    f394:	1109883a 	add	r4,r2,r4
    f398:	20800003 	ldbu	r2,0(r4)
    f39c:	2885c83a 	sub	r2,r5,r2
    f3a0:	f800283a 	ret
    f3a4:	00804034 	movhi	r2,256
    f3a8:	10bfffc4 	addi	r2,r2,-1
    f3ac:	11000336 	bltu	r2,r4,f3bc <__clzsi2+0x4c>
    f3b0:	00c00404 	movi	r3,16
    f3b4:	180b883a 	mov	r5,r3
    f3b8:	003ff306 	br	f388 <__alt_data_end+0xfffb9c58>
    f3bc:	00c00604 	movi	r3,24
    f3c0:	01400204 	movi	r5,8
    f3c4:	003ff006 	br	f388 <__alt_data_end+0xfffb9c58>
    f3c8:	0007883a 	mov	r3,zero
    f3cc:	01400804 	movi	r5,32
    f3d0:	003fed06 	br	f388 <__alt_data_end+0xfffb9c58>

0000f3d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f3d4:	defffe04 	addi	sp,sp,-8
    f3d8:	dfc00115 	stw	ra,4(sp)
    f3dc:	df000015 	stw	fp,0(sp)
    f3e0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f3e4:	00800074 	movhi	r2,1
    f3e8:	10906904 	addi	r2,r2,16804
    f3ec:	10800017 	ldw	r2,0(r2)
    f3f0:	10000526 	beq	r2,zero,f408 <alt_get_errno+0x34>
    f3f4:	00800074 	movhi	r2,1
    f3f8:	10906904 	addi	r2,r2,16804
    f3fc:	10800017 	ldw	r2,0(r2)
    f400:	103ee83a 	callr	r2
    f404:	00000206 	br	f410 <alt_get_errno+0x3c>
    f408:	00800074 	movhi	r2,1
    f40c:	10973404 	addi	r2,r2,23760
}
    f410:	e037883a 	mov	sp,fp
    f414:	dfc00117 	ldw	ra,4(sp)
    f418:	df000017 	ldw	fp,0(sp)
    f41c:	dec00204 	addi	sp,sp,8
    f420:	f800283a 	ret

0000f424 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    f424:	defffb04 	addi	sp,sp,-20
    f428:	dfc00415 	stw	ra,16(sp)
    f42c:	df000315 	stw	fp,12(sp)
    f430:	df000304 	addi	fp,sp,12
    f434:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    f438:	e0bfff17 	ldw	r2,-4(fp)
    f43c:	10000816 	blt	r2,zero,f460 <close+0x3c>
    f440:	e13fff17 	ldw	r4,-4(fp)
    f444:	01400304 	movi	r5,12
    f448:	000cbb00 	call	cbb0 <__mulsi3>
    f44c:	1007883a 	mov	r3,r2
    f450:	00800074 	movhi	r2,1
    f454:	108be604 	addi	r2,r2,12184
    f458:	1885883a 	add	r2,r3,r2
    f45c:	00000106 	br	f464 <close+0x40>
    f460:	0005883a 	mov	r2,zero
    f464:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    f468:	e0bffd17 	ldw	r2,-12(fp)
    f46c:	10001926 	beq	r2,zero,f4d4 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    f470:	e0bffd17 	ldw	r2,-12(fp)
    f474:	10800017 	ldw	r2,0(r2)
    f478:	10800417 	ldw	r2,16(r2)
    f47c:	10000626 	beq	r2,zero,f498 <close+0x74>
    f480:	e0bffd17 	ldw	r2,-12(fp)
    f484:	10800017 	ldw	r2,0(r2)
    f488:	10800417 	ldw	r2,16(r2)
    f48c:	e13ffd17 	ldw	r4,-12(fp)
    f490:	103ee83a 	callr	r2
    f494:	00000106 	br	f49c <close+0x78>
    f498:	0005883a 	mov	r2,zero
    f49c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    f4a0:	e13fff17 	ldw	r4,-4(fp)
    f4a4:	000fb480 	call	fb48 <alt_release_fd>
    if (rval < 0)
    f4a8:	e0bffe17 	ldw	r2,-8(fp)
    f4ac:	1000070e 	bge	r2,zero,f4cc <close+0xa8>
    {
      ALT_ERRNO = -rval;
    f4b0:	000f3d40 	call	f3d4 <alt_get_errno>
    f4b4:	1007883a 	mov	r3,r2
    f4b8:	e0bffe17 	ldw	r2,-8(fp)
    f4bc:	0085c83a 	sub	r2,zero,r2
    f4c0:	18800015 	stw	r2,0(r3)
      return -1;
    f4c4:	00bfffc4 	movi	r2,-1
    f4c8:	00000706 	br	f4e8 <close+0xc4>
    }
    return 0;
    f4cc:	0005883a 	mov	r2,zero
    f4d0:	00000506 	br	f4e8 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    f4d4:	000f3d40 	call	f3d4 <alt_get_errno>
    f4d8:	1007883a 	mov	r3,r2
    f4dc:	00801444 	movi	r2,81
    f4e0:	18800015 	stw	r2,0(r3)
    return -1;
    f4e4:	00bfffc4 	movi	r2,-1
  }
}
    f4e8:	e037883a 	mov	sp,fp
    f4ec:	dfc00117 	ldw	ra,4(sp)
    f4f0:	df000017 	ldw	fp,0(sp)
    f4f4:	dec00204 	addi	sp,sp,8
    f4f8:	f800283a 	ret

0000f4fc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    f4fc:	defffc04 	addi	sp,sp,-16
    f500:	df000315 	stw	fp,12(sp)
    f504:	df000304 	addi	fp,sp,12
    f508:	e13ffd15 	stw	r4,-12(fp)
    f50c:	e17ffe15 	stw	r5,-8(fp)
    f510:	e1bfff15 	stw	r6,-4(fp)
  return len;
    f514:	e0bfff17 	ldw	r2,-4(fp)
}
    f518:	e037883a 	mov	sp,fp
    f51c:	df000017 	ldw	fp,0(sp)
    f520:	dec00104 	addi	sp,sp,4
    f524:	f800283a 	ret

0000f528 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f528:	defffe04 	addi	sp,sp,-8
    f52c:	dfc00115 	stw	ra,4(sp)
    f530:	df000015 	stw	fp,0(sp)
    f534:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f538:	00800074 	movhi	r2,1
    f53c:	10906904 	addi	r2,r2,16804
    f540:	10800017 	ldw	r2,0(r2)
    f544:	10000526 	beq	r2,zero,f55c <alt_get_errno+0x34>
    f548:	00800074 	movhi	r2,1
    f54c:	10906904 	addi	r2,r2,16804
    f550:	10800017 	ldw	r2,0(r2)
    f554:	103ee83a 	callr	r2
    f558:	00000206 	br	f564 <alt_get_errno+0x3c>
    f55c:	00800074 	movhi	r2,1
    f560:	10973404 	addi	r2,r2,23760
}
    f564:	e037883a 	mov	sp,fp
    f568:	dfc00117 	ldw	ra,4(sp)
    f56c:	df000017 	ldw	fp,0(sp)
    f570:	dec00204 	addi	sp,sp,8
    f574:	f800283a 	ret

0000f578 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    f578:	defffb04 	addi	sp,sp,-20
    f57c:	dfc00415 	stw	ra,16(sp)
    f580:	df000315 	stw	fp,12(sp)
    f584:	df000304 	addi	fp,sp,12
    f588:	e13ffe15 	stw	r4,-8(fp)
    f58c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f590:	e0bffe17 	ldw	r2,-8(fp)
    f594:	10000816 	blt	r2,zero,f5b8 <fstat+0x40>
    f598:	e13ffe17 	ldw	r4,-8(fp)
    f59c:	01400304 	movi	r5,12
    f5a0:	000cbb00 	call	cbb0 <__mulsi3>
    f5a4:	1007883a 	mov	r3,r2
    f5a8:	00800074 	movhi	r2,1
    f5ac:	108be604 	addi	r2,r2,12184
    f5b0:	1885883a 	add	r2,r3,r2
    f5b4:	00000106 	br	f5bc <fstat+0x44>
    f5b8:	0005883a 	mov	r2,zero
    f5bc:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    f5c0:	e0bffd17 	ldw	r2,-12(fp)
    f5c4:	10001026 	beq	r2,zero,f608 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    f5c8:	e0bffd17 	ldw	r2,-12(fp)
    f5cc:	10800017 	ldw	r2,0(r2)
    f5d0:	10800817 	ldw	r2,32(r2)
    f5d4:	10000726 	beq	r2,zero,f5f4 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
    f5d8:	e0bffd17 	ldw	r2,-12(fp)
    f5dc:	10800017 	ldw	r2,0(r2)
    f5e0:	10800817 	ldw	r2,32(r2)
    f5e4:	e13ffd17 	ldw	r4,-12(fp)
    f5e8:	e17fff17 	ldw	r5,-4(fp)
    f5ec:	103ee83a 	callr	r2
    f5f0:	00000a06 	br	f61c <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    f5f4:	e0bfff17 	ldw	r2,-4(fp)
    f5f8:	00c80004 	movi	r3,8192
    f5fc:	10c00115 	stw	r3,4(r2)
      return 0;
    f600:	0005883a 	mov	r2,zero
    f604:	00000506 	br	f61c <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    f608:	000f5280 	call	f528 <alt_get_errno>
    f60c:	1007883a 	mov	r3,r2
    f610:	00801444 	movi	r2,81
    f614:	18800015 	stw	r2,0(r3)
    return -1;
    f618:	00bfffc4 	movi	r2,-1
  }
}
    f61c:	e037883a 	mov	sp,fp
    f620:	dfc00117 	ldw	ra,4(sp)
    f624:	df000017 	ldw	fp,0(sp)
    f628:	dec00204 	addi	sp,sp,8
    f62c:	f800283a 	ret

0000f630 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f630:	defffe04 	addi	sp,sp,-8
    f634:	dfc00115 	stw	ra,4(sp)
    f638:	df000015 	stw	fp,0(sp)
    f63c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f640:	00800074 	movhi	r2,1
    f644:	10906904 	addi	r2,r2,16804
    f648:	10800017 	ldw	r2,0(r2)
    f64c:	10000526 	beq	r2,zero,f664 <alt_get_errno+0x34>
    f650:	00800074 	movhi	r2,1
    f654:	10906904 	addi	r2,r2,16804
    f658:	10800017 	ldw	r2,0(r2)
    f65c:	103ee83a 	callr	r2
    f660:	00000206 	br	f66c <alt_get_errno+0x3c>
    f664:	00800074 	movhi	r2,1
    f668:	10973404 	addi	r2,r2,23760
}
    f66c:	e037883a 	mov	sp,fp
    f670:	dfc00117 	ldw	ra,4(sp)
    f674:	df000017 	ldw	fp,0(sp)
    f678:	dec00204 	addi	sp,sp,8
    f67c:	f800283a 	ret

0000f680 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    f680:	deffed04 	addi	sp,sp,-76
    f684:	dfc01215 	stw	ra,72(sp)
    f688:	df001115 	stw	fp,68(sp)
    f68c:	df001104 	addi	fp,sp,68
    f690:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f694:	e0bfff17 	ldw	r2,-4(fp)
    f698:	10000816 	blt	r2,zero,f6bc <isatty+0x3c>
    f69c:	e13fff17 	ldw	r4,-4(fp)
    f6a0:	01400304 	movi	r5,12
    f6a4:	000cbb00 	call	cbb0 <__mulsi3>
    f6a8:	1007883a 	mov	r3,r2
    f6ac:	00800074 	movhi	r2,1
    f6b0:	108be604 	addi	r2,r2,12184
    f6b4:	1885883a 	add	r2,r3,r2
    f6b8:	00000106 	br	f6c0 <isatty+0x40>
    f6bc:	0005883a 	mov	r2,zero
    f6c0:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    f6c4:	e0bfef17 	ldw	r2,-68(fp)
    f6c8:	10000e26 	beq	r2,zero,f704 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    f6cc:	e0bfef17 	ldw	r2,-68(fp)
    f6d0:	10800017 	ldw	r2,0(r2)
    f6d4:	10800817 	ldw	r2,32(r2)
    f6d8:	1000021e 	bne	r2,zero,f6e4 <isatty+0x64>
    {
      return 1;
    f6dc:	00800044 	movi	r2,1
    f6e0:	00000d06 	br	f718 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    f6e4:	e0bff004 	addi	r2,fp,-64
    f6e8:	e13fff17 	ldw	r4,-4(fp)
    f6ec:	100b883a 	mov	r5,r2
    f6f0:	000f5780 	call	f578 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    f6f4:	e0bff117 	ldw	r2,-60(fp)
    f6f8:	10880020 	cmpeqi	r2,r2,8192
    f6fc:	10803fcc 	andi	r2,r2,255
    f700:	00000506 	br	f718 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    f704:	000f6300 	call	f630 <alt_get_errno>
    f708:	1007883a 	mov	r3,r2
    f70c:	00801444 	movi	r2,81
    f710:	18800015 	stw	r2,0(r3)
    return 0;
    f714:	0005883a 	mov	r2,zero
  }
}
    f718:	e037883a 	mov	sp,fp
    f71c:	dfc00117 	ldw	ra,4(sp)
    f720:	df000017 	ldw	fp,0(sp)
    f724:	dec00204 	addi	sp,sp,8
    f728:	f800283a 	ret

0000f72c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    f72c:	defffc04 	addi	sp,sp,-16
    f730:	df000315 	stw	fp,12(sp)
    f734:	df000304 	addi	fp,sp,12
    f738:	e13ffd15 	stw	r4,-12(fp)
    f73c:	e17ffe15 	stw	r5,-8(fp)
    f740:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    f744:	e0fffe17 	ldw	r3,-8(fp)
    f748:	e0bffd17 	ldw	r2,-12(fp)
    f74c:	18800c26 	beq	r3,r2,f780 <alt_load_section+0x54>
  {
    while( to != end )
    f750:	00000806 	br	f774 <alt_load_section+0x48>
    {
      *to++ = *from++;
    f754:	e0bffe17 	ldw	r2,-8(fp)
    f758:	10c00104 	addi	r3,r2,4
    f75c:	e0fffe15 	stw	r3,-8(fp)
    f760:	e0fffd17 	ldw	r3,-12(fp)
    f764:	19000104 	addi	r4,r3,4
    f768:	e13ffd15 	stw	r4,-12(fp)
    f76c:	18c00017 	ldw	r3,0(r3)
    f770:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    f774:	e0fffe17 	ldw	r3,-8(fp)
    f778:	e0bfff17 	ldw	r2,-4(fp)
    f77c:	18bff51e 	bne	r3,r2,f754 <__alt_data_end+0xfffba024>
    {
      *to++ = *from++;
    }
  }
}
    f780:	e037883a 	mov	sp,fp
    f784:	df000017 	ldw	fp,0(sp)
    f788:	dec00104 	addi	sp,sp,4
    f78c:	f800283a 	ret

0000f790 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    f790:	defffe04 	addi	sp,sp,-8
    f794:	dfc00115 	stw	ra,4(sp)
    f798:	df000015 	stw	fp,0(sp)
    f79c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    f7a0:	01000074 	movhi	r4,1
    f7a4:	21106e04 	addi	r4,r4,16824
    f7a8:	01400074 	movhi	r5,1
    f7ac:	2949b304 	addi	r5,r5,9932
    f7b0:	01800074 	movhi	r6,1
    f7b4:	31906e04 	addi	r6,r6,16824
    f7b8:	000f72c0 	call	f72c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    f7bc:	01000034 	movhi	r4,0
    f7c0:	21000804 	addi	r4,r4,32
    f7c4:	01400034 	movhi	r5,0
    f7c8:	29400804 	addi	r5,r5,32
    f7cc:	01800034 	movhi	r6,0
    f7d0:	31808b04 	addi	r6,r6,556
    f7d4:	000f72c0 	call	f72c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    f7d8:	01000074 	movhi	r4,1
    f7dc:	21072d04 	addi	r4,r4,7348
    f7e0:	01400074 	movhi	r5,1
    f7e4:	29472d04 	addi	r5,r5,7348
    f7e8:	01800074 	movhi	r6,1
    f7ec:	3189b304 	addi	r6,r6,9932
    f7f0:	000f72c0 	call	f72c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    f7f4:	0010b900 	call	10b90 <alt_dcache_flush_all>
  alt_icache_flush_all();
    f7f8:	0010d580 	call	10d58 <alt_icache_flush_all>
}
    f7fc:	e037883a 	mov	sp,fp
    f800:	dfc00117 	ldw	ra,4(sp)
    f804:	df000017 	ldw	fp,0(sp)
    f808:	dec00204 	addi	sp,sp,8
    f80c:	f800283a 	ret

0000f810 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f810:	defffe04 	addi	sp,sp,-8
    f814:	dfc00115 	stw	ra,4(sp)
    f818:	df000015 	stw	fp,0(sp)
    f81c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f820:	00800074 	movhi	r2,1
    f824:	10906904 	addi	r2,r2,16804
    f828:	10800017 	ldw	r2,0(r2)
    f82c:	10000526 	beq	r2,zero,f844 <alt_get_errno+0x34>
    f830:	00800074 	movhi	r2,1
    f834:	10906904 	addi	r2,r2,16804
    f838:	10800017 	ldw	r2,0(r2)
    f83c:	103ee83a 	callr	r2
    f840:	00000206 	br	f84c <alt_get_errno+0x3c>
    f844:	00800074 	movhi	r2,1
    f848:	10973404 	addi	r2,r2,23760
}
    f84c:	e037883a 	mov	sp,fp
    f850:	dfc00117 	ldw	ra,4(sp)
    f854:	df000017 	ldw	fp,0(sp)
    f858:	dec00204 	addi	sp,sp,8
    f85c:	f800283a 	ret

0000f860 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    f860:	defff904 	addi	sp,sp,-28
    f864:	dfc00615 	stw	ra,24(sp)
    f868:	df000515 	stw	fp,20(sp)
    f86c:	df000504 	addi	fp,sp,20
    f870:	e13ffd15 	stw	r4,-12(fp)
    f874:	e17ffe15 	stw	r5,-8(fp)
    f878:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    f87c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f880:	e0bffd17 	ldw	r2,-12(fp)
    f884:	10000816 	blt	r2,zero,f8a8 <lseek+0x48>
    f888:	e13ffd17 	ldw	r4,-12(fp)
    f88c:	01400304 	movi	r5,12
    f890:	000cbb00 	call	cbb0 <__mulsi3>
    f894:	1007883a 	mov	r3,r2
    f898:	00800074 	movhi	r2,1
    f89c:	108be604 	addi	r2,r2,12184
    f8a0:	1885883a 	add	r2,r3,r2
    f8a4:	00000106 	br	f8ac <lseek+0x4c>
    f8a8:	0005883a 	mov	r2,zero
    f8ac:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    f8b0:	e0bffc17 	ldw	r2,-16(fp)
    f8b4:	10001026 	beq	r2,zero,f8f8 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    f8b8:	e0bffc17 	ldw	r2,-16(fp)
    f8bc:	10800017 	ldw	r2,0(r2)
    f8c0:	10800717 	ldw	r2,28(r2)
    f8c4:	10000926 	beq	r2,zero,f8ec <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    f8c8:	e0bffc17 	ldw	r2,-16(fp)
    f8cc:	10800017 	ldw	r2,0(r2)
    f8d0:	10800717 	ldw	r2,28(r2)
    f8d4:	e13ffc17 	ldw	r4,-16(fp)
    f8d8:	e17ffe17 	ldw	r5,-8(fp)
    f8dc:	e1bfff17 	ldw	r6,-4(fp)
    f8e0:	103ee83a 	callr	r2
    f8e4:	e0bffb15 	stw	r2,-20(fp)
    f8e8:	00000506 	br	f900 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    f8ec:	00bfde84 	movi	r2,-134
    f8f0:	e0bffb15 	stw	r2,-20(fp)
    f8f4:	00000206 	br	f900 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
    f8f8:	00bfebc4 	movi	r2,-81
    f8fc:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    f900:	e0bffb17 	ldw	r2,-20(fp)
    f904:	1000070e 	bge	r2,zero,f924 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
    f908:	000f8100 	call	f810 <alt_get_errno>
    f90c:	1007883a 	mov	r3,r2
    f910:	e0bffb17 	ldw	r2,-20(fp)
    f914:	0085c83a 	sub	r2,zero,r2
    f918:	18800015 	stw	r2,0(r3)
    rc = -1;
    f91c:	00bfffc4 	movi	r2,-1
    f920:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    f924:	e0bffb17 	ldw	r2,-20(fp)
}
    f928:	e037883a 	mov	sp,fp
    f92c:	dfc00117 	ldw	ra,4(sp)
    f930:	df000017 	ldw	fp,0(sp)
    f934:	dec00204 	addi	sp,sp,8
    f938:	f800283a 	ret

0000f93c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    f93c:	defffd04 	addi	sp,sp,-12
    f940:	dfc00215 	stw	ra,8(sp)
    f944:	df000115 	stw	fp,4(sp)
    f948:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    f94c:	0009883a 	mov	r4,zero
    f950:	000fe300 	call	fe30 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    f954:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    f958:	000fe640 	call	fe64 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    f95c:	01000074 	movhi	r4,1
    f960:	2109a904 	addi	r4,r4,9892
    f964:	01400074 	movhi	r5,1
    f968:	2949a904 	addi	r5,r5,9892
    f96c:	01800074 	movhi	r6,1
    f970:	3189a904 	addi	r6,r6,9892
    f974:	00111240 	call	11124 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    f978:	0010ca00 	call	10ca0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    f97c:	01000074 	movhi	r4,1
    f980:	21033f04 	addi	r4,r4,3324
    f984:	00119100 	call	11910 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    f988:	d126da17 	ldw	r4,-25752(gp)
    f98c:	d0e6db17 	ldw	r3,-25748(gp)
    f990:	d0a6dc17 	ldw	r2,-25744(gp)
    f994:	180b883a 	mov	r5,r3
    f998:	100d883a 	mov	r6,r2
    f99c:	00018600 	call	1860 <main>
    f9a0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    f9a4:	01000044 	movi	r4,1
    f9a8:	000f4240 	call	f424 <close>
  exit (result);
    f9ac:	e13fff17 	ldw	r4,-4(fp)
    f9b0:	00119240 	call	11924 <exit>

0000f9b4 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    f9b4:	defffe04 	addi	sp,sp,-8
    f9b8:	df000115 	stw	fp,4(sp)
    f9bc:	df000104 	addi	fp,sp,4
    f9c0:	e13fff15 	stw	r4,-4(fp)
}
    f9c4:	e037883a 	mov	sp,fp
    f9c8:	df000017 	ldw	fp,0(sp)
    f9cc:	dec00104 	addi	sp,sp,4
    f9d0:	f800283a 	ret

0000f9d4 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    f9d4:	defffe04 	addi	sp,sp,-8
    f9d8:	df000115 	stw	fp,4(sp)
    f9dc:	df000104 	addi	fp,sp,4
    f9e0:	e13fff15 	stw	r4,-4(fp)
}
    f9e4:	e037883a 	mov	sp,fp
    f9e8:	df000017 	ldw	fp,0(sp)
    f9ec:	dec00104 	addi	sp,sp,4
    f9f0:	f800283a 	ret

0000f9f4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f9f4:	defffe04 	addi	sp,sp,-8
    f9f8:	dfc00115 	stw	ra,4(sp)
    f9fc:	df000015 	stw	fp,0(sp)
    fa00:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    fa04:	00800074 	movhi	r2,1
    fa08:	10906904 	addi	r2,r2,16804
    fa0c:	10800017 	ldw	r2,0(r2)
    fa10:	10000526 	beq	r2,zero,fa28 <alt_get_errno+0x34>
    fa14:	00800074 	movhi	r2,1
    fa18:	10906904 	addi	r2,r2,16804
    fa1c:	10800017 	ldw	r2,0(r2)
    fa20:	103ee83a 	callr	r2
    fa24:	00000206 	br	fa30 <alt_get_errno+0x3c>
    fa28:	00800074 	movhi	r2,1
    fa2c:	10973404 	addi	r2,r2,23760
}
    fa30:	e037883a 	mov	sp,fp
    fa34:	dfc00117 	ldw	ra,4(sp)
    fa38:	df000017 	ldw	fp,0(sp)
    fa3c:	dec00204 	addi	sp,sp,8
    fa40:	f800283a 	ret

0000fa44 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    fa44:	defff904 	addi	sp,sp,-28
    fa48:	dfc00615 	stw	ra,24(sp)
    fa4c:	df000515 	stw	fp,20(sp)
    fa50:	df000504 	addi	fp,sp,20
    fa54:	e13ffd15 	stw	r4,-12(fp)
    fa58:	e17ffe15 	stw	r5,-8(fp)
    fa5c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    fa60:	e0bffd17 	ldw	r2,-12(fp)
    fa64:	10000816 	blt	r2,zero,fa88 <read+0x44>
    fa68:	e13ffd17 	ldw	r4,-12(fp)
    fa6c:	01400304 	movi	r5,12
    fa70:	000cbb00 	call	cbb0 <__mulsi3>
    fa74:	1007883a 	mov	r3,r2
    fa78:	00800074 	movhi	r2,1
    fa7c:	108be604 	addi	r2,r2,12184
    fa80:	1885883a 	add	r2,r3,r2
    fa84:	00000106 	br	fa8c <read+0x48>
    fa88:	0005883a 	mov	r2,zero
    fa8c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    fa90:	e0bffb17 	ldw	r2,-20(fp)
    fa94:	10002226 	beq	r2,zero,fb20 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    fa98:	e0bffb17 	ldw	r2,-20(fp)
    fa9c:	10800217 	ldw	r2,8(r2)
    faa0:	108000cc 	andi	r2,r2,3
    faa4:	10800060 	cmpeqi	r2,r2,1
    faa8:	1000181e 	bne	r2,zero,fb0c <read+0xc8>
        (fd->dev->read))
    faac:	e0bffb17 	ldw	r2,-20(fp)
    fab0:	10800017 	ldw	r2,0(r2)
    fab4:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    fab8:	10001426 	beq	r2,zero,fb0c <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    fabc:	e0bffb17 	ldw	r2,-20(fp)
    fac0:	10800017 	ldw	r2,0(r2)
    fac4:	10800517 	ldw	r2,20(r2)
    fac8:	e0ffff17 	ldw	r3,-4(fp)
    facc:	e13ffb17 	ldw	r4,-20(fp)
    fad0:	e17ffe17 	ldw	r5,-8(fp)
    fad4:	180d883a 	mov	r6,r3
    fad8:	103ee83a 	callr	r2
    fadc:	e0bffc15 	stw	r2,-16(fp)
    fae0:	e0bffc17 	ldw	r2,-16(fp)
    fae4:	1000070e 	bge	r2,zero,fb04 <read+0xc0>
        {
          ALT_ERRNO = -rval;
    fae8:	000f9f40 	call	f9f4 <alt_get_errno>
    faec:	1007883a 	mov	r3,r2
    faf0:	e0bffc17 	ldw	r2,-16(fp)
    faf4:	0085c83a 	sub	r2,zero,r2
    faf8:	18800015 	stw	r2,0(r3)
          return -1;
    fafc:	00bfffc4 	movi	r2,-1
    fb00:	00000c06 	br	fb34 <read+0xf0>
        }
        return rval;
    fb04:	e0bffc17 	ldw	r2,-16(fp)
    fb08:	00000a06 	br	fb34 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
    fb0c:	000f9f40 	call	f9f4 <alt_get_errno>
    fb10:	1007883a 	mov	r3,r2
    fb14:	00800344 	movi	r2,13
    fb18:	18800015 	stw	r2,0(r3)
    fb1c:	00000406 	br	fb30 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    fb20:	000f9f40 	call	f9f4 <alt_get_errno>
    fb24:	1007883a 	mov	r3,r2
    fb28:	00801444 	movi	r2,81
    fb2c:	18800015 	stw	r2,0(r3)
  }
  return -1;
    fb30:	00bfffc4 	movi	r2,-1
}
    fb34:	e037883a 	mov	sp,fp
    fb38:	dfc00117 	ldw	ra,4(sp)
    fb3c:	df000017 	ldw	fp,0(sp)
    fb40:	dec00204 	addi	sp,sp,8
    fb44:	f800283a 	ret

0000fb48 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    fb48:	defffc04 	addi	sp,sp,-16
    fb4c:	dfc00315 	stw	ra,12(sp)
    fb50:	df000215 	stw	fp,8(sp)
    fb54:	dc000115 	stw	r16,4(sp)
    fb58:	df000204 	addi	fp,sp,8
    fb5c:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
    fb60:	e0bffe17 	ldw	r2,-8(fp)
    fb64:	108000d0 	cmplti	r2,r2,3
    fb68:	1000111e 	bne	r2,zero,fbb0 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    fb6c:	04000074 	movhi	r16,1
    fb70:	840be604 	addi	r16,r16,12184
    fb74:	e0bffe17 	ldw	r2,-8(fp)
    fb78:	1009883a 	mov	r4,r2
    fb7c:	01400304 	movi	r5,12
    fb80:	000cbb00 	call	cbb0 <__mulsi3>
    fb84:	8085883a 	add	r2,r16,r2
    fb88:	10800204 	addi	r2,r2,8
    fb8c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    fb90:	04000074 	movhi	r16,1
    fb94:	840be604 	addi	r16,r16,12184
    fb98:	e0bffe17 	ldw	r2,-8(fp)
    fb9c:	1009883a 	mov	r4,r2
    fba0:	01400304 	movi	r5,12
    fba4:	000cbb00 	call	cbb0 <__mulsi3>
    fba8:	8085883a 	add	r2,r16,r2
    fbac:	10000015 	stw	zero,0(r2)
  }
}
    fbb0:	e6ffff04 	addi	sp,fp,-4
    fbb4:	dfc00217 	ldw	ra,8(sp)
    fbb8:	df000117 	ldw	fp,4(sp)
    fbbc:	dc000017 	ldw	r16,0(sp)
    fbc0:	dec00304 	addi	sp,sp,12
    fbc4:	f800283a 	ret

0000fbc8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    fbc8:	defff904 	addi	sp,sp,-28
    fbcc:	df000615 	stw	fp,24(sp)
    fbd0:	df000604 	addi	fp,sp,24
    fbd4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fbd8:	0005303a 	rdctl	r2,status
    fbdc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fbe0:	e0fffc17 	ldw	r3,-16(fp)
    fbe4:	00bfff84 	movi	r2,-2
    fbe8:	1884703a 	and	r2,r3,r2
    fbec:	1001703a 	wrctl	status,r2
  
  return context;
    fbf0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    fbf4:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    fbf8:	d0a00c17 	ldw	r2,-32720(gp)
    fbfc:	10c000c4 	addi	r3,r2,3
    fc00:	00bfff04 	movi	r2,-4
    fc04:	1884703a 	and	r2,r3,r2
    fc08:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    fc0c:	d0e00c17 	ldw	r3,-32720(gp)
    fc10:	e0bfff17 	ldw	r2,-4(fp)
    fc14:	1887883a 	add	r3,r3,r2
    fc18:	00800174 	movhi	r2,5
    fc1c:	1095cc04 	addi	r2,r2,22320
    fc20:	10c0062e 	bgeu	r2,r3,fc3c <sbrk+0x74>
    fc24:	e0bffa17 	ldw	r2,-24(fp)
    fc28:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fc2c:	e0bffd17 	ldw	r2,-12(fp)
    fc30:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    fc34:	00bfffc4 	movi	r2,-1
    fc38:	00000b06 	br	fc68 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    fc3c:	d0a00c17 	ldw	r2,-32720(gp)
    fc40:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
    fc44:	d0e00c17 	ldw	r3,-32720(gp)
    fc48:	e0bfff17 	ldw	r2,-4(fp)
    fc4c:	1885883a 	add	r2,r3,r2
    fc50:	d0a00c15 	stw	r2,-32720(gp)
    fc54:	e0bffa17 	ldw	r2,-24(fp)
    fc58:	e0bffe15 	stw	r2,-8(fp)
    fc5c:	e0bffe17 	ldw	r2,-8(fp)
    fc60:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    fc64:	e0bffb17 	ldw	r2,-20(fp)
} 
    fc68:	e037883a 	mov	sp,fp
    fc6c:	df000017 	ldw	fp,0(sp)
    fc70:	dec00104 	addi	sp,sp,4
    fc74:	f800283a 	ret

0000fc78 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    fc78:	defffd04 	addi	sp,sp,-12
    fc7c:	dfc00215 	stw	ra,8(sp)
    fc80:	df000115 	stw	fp,4(sp)
    fc84:	df000104 	addi	fp,sp,4
    fc88:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    fc8c:	e13fff17 	ldw	r4,-4(fp)
    fc90:	0010a380 	call	10a38 <alt_busy_sleep>
}
    fc94:	e037883a 	mov	sp,fp
    fc98:	dfc00117 	ldw	ra,4(sp)
    fc9c:	df000017 	ldw	fp,0(sp)
    fca0:	dec00204 	addi	sp,sp,8
    fca4:	f800283a 	ret

0000fca8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    fca8:	defffe04 	addi	sp,sp,-8
    fcac:	dfc00115 	stw	ra,4(sp)
    fcb0:	df000015 	stw	fp,0(sp)
    fcb4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    fcb8:	00800074 	movhi	r2,1
    fcbc:	10906904 	addi	r2,r2,16804
    fcc0:	10800017 	ldw	r2,0(r2)
    fcc4:	10000526 	beq	r2,zero,fcdc <alt_get_errno+0x34>
    fcc8:	00800074 	movhi	r2,1
    fccc:	10906904 	addi	r2,r2,16804
    fcd0:	10800017 	ldw	r2,0(r2)
    fcd4:	103ee83a 	callr	r2
    fcd8:	00000206 	br	fce4 <alt_get_errno+0x3c>
    fcdc:	00800074 	movhi	r2,1
    fce0:	10973404 	addi	r2,r2,23760
}
    fce4:	e037883a 	mov	sp,fp
    fce8:	dfc00117 	ldw	ra,4(sp)
    fcec:	df000017 	ldw	fp,0(sp)
    fcf0:	dec00204 	addi	sp,sp,8
    fcf4:	f800283a 	ret

0000fcf8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    fcf8:	defff904 	addi	sp,sp,-28
    fcfc:	dfc00615 	stw	ra,24(sp)
    fd00:	df000515 	stw	fp,20(sp)
    fd04:	df000504 	addi	fp,sp,20
    fd08:	e13ffd15 	stw	r4,-12(fp)
    fd0c:	e17ffe15 	stw	r5,-8(fp)
    fd10:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    fd14:	e0bffd17 	ldw	r2,-12(fp)
    fd18:	10000816 	blt	r2,zero,fd3c <write+0x44>
    fd1c:	e13ffd17 	ldw	r4,-12(fp)
    fd20:	01400304 	movi	r5,12
    fd24:	000cbb00 	call	cbb0 <__mulsi3>
    fd28:	1007883a 	mov	r3,r2
    fd2c:	00800074 	movhi	r2,1
    fd30:	108be604 	addi	r2,r2,12184
    fd34:	1885883a 	add	r2,r3,r2
    fd38:	00000106 	br	fd40 <write+0x48>
    fd3c:	0005883a 	mov	r2,zero
    fd40:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    fd44:	e0bffb17 	ldw	r2,-20(fp)
    fd48:	10002126 	beq	r2,zero,fdd0 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    fd4c:	e0bffb17 	ldw	r2,-20(fp)
    fd50:	10800217 	ldw	r2,8(r2)
    fd54:	108000cc 	andi	r2,r2,3
    fd58:	10001826 	beq	r2,zero,fdbc <write+0xc4>
    fd5c:	e0bffb17 	ldw	r2,-20(fp)
    fd60:	10800017 	ldw	r2,0(r2)
    fd64:	10800617 	ldw	r2,24(r2)
    fd68:	10001426 	beq	r2,zero,fdbc <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    fd6c:	e0bffb17 	ldw	r2,-20(fp)
    fd70:	10800017 	ldw	r2,0(r2)
    fd74:	10800617 	ldw	r2,24(r2)
    fd78:	e0ffff17 	ldw	r3,-4(fp)
    fd7c:	e13ffb17 	ldw	r4,-20(fp)
    fd80:	e17ffe17 	ldw	r5,-8(fp)
    fd84:	180d883a 	mov	r6,r3
    fd88:	103ee83a 	callr	r2
    fd8c:	e0bffc15 	stw	r2,-16(fp)
    fd90:	e0bffc17 	ldw	r2,-16(fp)
    fd94:	1000070e 	bge	r2,zero,fdb4 <write+0xbc>
      {
        ALT_ERRNO = -rval;
    fd98:	000fca80 	call	fca8 <alt_get_errno>
    fd9c:	1007883a 	mov	r3,r2
    fda0:	e0bffc17 	ldw	r2,-16(fp)
    fda4:	0085c83a 	sub	r2,zero,r2
    fda8:	18800015 	stw	r2,0(r3)
        return -1;
    fdac:	00bfffc4 	movi	r2,-1
    fdb0:	00000c06 	br	fde4 <write+0xec>
      }
      return rval;
    fdb4:	e0bffc17 	ldw	r2,-16(fp)
    fdb8:	00000a06 	br	fde4 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
    fdbc:	000fca80 	call	fca8 <alt_get_errno>
    fdc0:	1007883a 	mov	r3,r2
    fdc4:	00800344 	movi	r2,13
    fdc8:	18800015 	stw	r2,0(r3)
    fdcc:	00000406 	br	fde0 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    fdd0:	000fca80 	call	fca8 <alt_get_errno>
    fdd4:	1007883a 	mov	r3,r2
    fdd8:	00801444 	movi	r2,81
    fddc:	18800015 	stw	r2,0(r3)
  }
  return -1;
    fde0:	00bfffc4 	movi	r2,-1
}
    fde4:	e037883a 	mov	sp,fp
    fde8:	dfc00117 	ldw	ra,4(sp)
    fdec:	df000017 	ldw	fp,0(sp)
    fdf0:	dec00204 	addi	sp,sp,8
    fdf4:	f800283a 	ret

0000fdf8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    fdf8:	defffd04 	addi	sp,sp,-12
    fdfc:	dfc00215 	stw	ra,8(sp)
    fe00:	df000115 	stw	fp,4(sp)
    fe04:	df000104 	addi	fp,sp,4
    fe08:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    fe0c:	e13fff17 	ldw	r4,-4(fp)
    fe10:	01400074 	movhi	r5,1
    fe14:	29506604 	addi	r5,r5,16792
    fe18:	0010bfc0 	call	10bfc <alt_dev_llist_insert>
}
    fe1c:	e037883a 	mov	sp,fp
    fe20:	dfc00117 	ldw	ra,4(sp)
    fe24:	df000017 	ldw	fp,0(sp)
    fe28:	dec00204 	addi	sp,sp,8
    fe2c:	f800283a 	ret

0000fe30 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    fe30:	defffd04 	addi	sp,sp,-12
    fe34:	dfc00215 	stw	ra,8(sp)
    fe38:	df000115 	stw	fp,4(sp)
    fe3c:	df000104 	addi	fp,sp,4
    fe40:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
    fe44:	00115dc0 	call	115dc <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    fe48:	00800044 	movi	r2,1
    fe4c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    fe50:	e037883a 	mov	sp,fp
    fe54:	dfc00117 	ldw	ra,4(sp)
    fe58:	df000017 	ldw	fp,0(sp)
    fe5c:	dec00204 	addi	sp,sp,8
    fe60:	f800283a 	ret

0000fe64 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    fe64:	defffe04 	addi	sp,sp,-8
    fe68:	dfc00115 	stw	ra,4(sp)
    fe6c:	df000015 	stw	fp,0(sp)
    fe70:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    fe74:	01000074 	movhi	r4,1
    fe78:	210c5004 	addi	r4,r4,12608
    fe7c:	000b883a 	mov	r5,zero
    fe80:	01800144 	movi	r6,5
    fe84:	00100100 	call	10010 <altera_avalon_jtag_uart_init>
    fe88:	01000074 	movhi	r4,1
    fe8c:	210c4604 	addi	r4,r4,12568
    fe90:	000fdf80 	call	fdf8 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
    fe94:	0001883a 	nop
}
    fe98:	e037883a 	mov	sp,fp
    fe9c:	dfc00117 	ldw	ra,4(sp)
    fea0:	df000017 	ldw	fp,0(sp)
    fea4:	dec00204 	addi	sp,sp,8
    fea8:	f800283a 	ret

0000feac <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    feac:	defffa04 	addi	sp,sp,-24
    feb0:	dfc00515 	stw	ra,20(sp)
    feb4:	df000415 	stw	fp,16(sp)
    feb8:	df000404 	addi	fp,sp,16
    febc:	e13ffd15 	stw	r4,-12(fp)
    fec0:	e17ffe15 	stw	r5,-8(fp)
    fec4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    fec8:	e0bffd17 	ldw	r2,-12(fp)
    fecc:	10800017 	ldw	r2,0(r2)
    fed0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    fed4:	e0bffc17 	ldw	r2,-16(fp)
    fed8:	10c00a04 	addi	r3,r2,40
    fedc:	e0bffd17 	ldw	r2,-12(fp)
    fee0:	10800217 	ldw	r2,8(r2)
    fee4:	1809883a 	mov	r4,r3
    fee8:	e17ffe17 	ldw	r5,-8(fp)
    feec:	e1bfff17 	ldw	r6,-4(fp)
    fef0:	100f883a 	mov	r7,r2
    fef4:	00104d40 	call	104d4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    fef8:	e037883a 	mov	sp,fp
    fefc:	dfc00117 	ldw	ra,4(sp)
    ff00:	df000017 	ldw	fp,0(sp)
    ff04:	dec00204 	addi	sp,sp,8
    ff08:	f800283a 	ret

0000ff0c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    ff0c:	defffa04 	addi	sp,sp,-24
    ff10:	dfc00515 	stw	ra,20(sp)
    ff14:	df000415 	stw	fp,16(sp)
    ff18:	df000404 	addi	fp,sp,16
    ff1c:	e13ffd15 	stw	r4,-12(fp)
    ff20:	e17ffe15 	stw	r5,-8(fp)
    ff24:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    ff28:	e0bffd17 	ldw	r2,-12(fp)
    ff2c:	10800017 	ldw	r2,0(r2)
    ff30:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    ff34:	e0bffc17 	ldw	r2,-16(fp)
    ff38:	10c00a04 	addi	r3,r2,40
    ff3c:	e0bffd17 	ldw	r2,-12(fp)
    ff40:	10800217 	ldw	r2,8(r2)
    ff44:	1809883a 	mov	r4,r3
    ff48:	e17ffe17 	ldw	r5,-8(fp)
    ff4c:	e1bfff17 	ldw	r6,-4(fp)
    ff50:	100f883a 	mov	r7,r2
    ff54:	00106e00 	call	106e0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    ff58:	e037883a 	mov	sp,fp
    ff5c:	dfc00117 	ldw	ra,4(sp)
    ff60:	df000017 	ldw	fp,0(sp)
    ff64:	dec00204 	addi	sp,sp,8
    ff68:	f800283a 	ret

0000ff6c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    ff6c:	defffc04 	addi	sp,sp,-16
    ff70:	dfc00315 	stw	ra,12(sp)
    ff74:	df000215 	stw	fp,8(sp)
    ff78:	df000204 	addi	fp,sp,8
    ff7c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    ff80:	e0bfff17 	ldw	r2,-4(fp)
    ff84:	10800017 	ldw	r2,0(r2)
    ff88:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    ff8c:	e0bffe17 	ldw	r2,-8(fp)
    ff90:	10c00a04 	addi	r3,r2,40
    ff94:	e0bfff17 	ldw	r2,-4(fp)
    ff98:	10800217 	ldw	r2,8(r2)
    ff9c:	1809883a 	mov	r4,r3
    ffa0:	100b883a 	mov	r5,r2
    ffa4:	00103800 	call	10380 <altera_avalon_jtag_uart_close>
}
    ffa8:	e037883a 	mov	sp,fp
    ffac:	dfc00117 	ldw	ra,4(sp)
    ffb0:	df000017 	ldw	fp,0(sp)
    ffb4:	dec00204 	addi	sp,sp,8
    ffb8:	f800283a 	ret

0000ffbc <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    ffbc:	defffa04 	addi	sp,sp,-24
    ffc0:	dfc00515 	stw	ra,20(sp)
    ffc4:	df000415 	stw	fp,16(sp)
    ffc8:	df000404 	addi	fp,sp,16
    ffcc:	e13ffd15 	stw	r4,-12(fp)
    ffd0:	e17ffe15 	stw	r5,-8(fp)
    ffd4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    ffd8:	e0bffd17 	ldw	r2,-12(fp)
    ffdc:	10800017 	ldw	r2,0(r2)
    ffe0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    ffe4:	e0bffc17 	ldw	r2,-16(fp)
    ffe8:	10800a04 	addi	r2,r2,40
    ffec:	1009883a 	mov	r4,r2
    fff0:	e17ffe17 	ldw	r5,-8(fp)
    fff4:	e1bfff17 	ldw	r6,-4(fp)
    fff8:	00103e80 	call	103e8 <altera_avalon_jtag_uart_ioctl>
}
    fffc:	e037883a 	mov	sp,fp
   10000:	dfc00117 	ldw	ra,4(sp)
   10004:	df000017 	ldw	fp,0(sp)
   10008:	dec00204 	addi	sp,sp,8
   1000c:	f800283a 	ret

00010010 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   10010:	defffa04 	addi	sp,sp,-24
   10014:	dfc00515 	stw	ra,20(sp)
   10018:	df000415 	stw	fp,16(sp)
   1001c:	df000404 	addi	fp,sp,16
   10020:	e13ffd15 	stw	r4,-12(fp)
   10024:	e17ffe15 	stw	r5,-8(fp)
   10028:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1002c:	e0bffd17 	ldw	r2,-12(fp)
   10030:	00c00044 	movi	r3,1
   10034:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   10038:	e0bffd17 	ldw	r2,-12(fp)
   1003c:	10800017 	ldw	r2,0(r2)
   10040:	10800104 	addi	r2,r2,4
   10044:	1007883a 	mov	r3,r2
   10048:	e0bffd17 	ldw	r2,-12(fp)
   1004c:	10800817 	ldw	r2,32(r2)
   10050:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   10054:	e0fffe17 	ldw	r3,-8(fp)
   10058:	e0bfff17 	ldw	r2,-4(fp)
   1005c:	d8000015 	stw	zero,0(sp)
   10060:	1809883a 	mov	r4,r3
   10064:	100b883a 	mov	r5,r2
   10068:	01800074 	movhi	r6,1
   1006c:	31803504 	addi	r6,r6,212
   10070:	e1fffd17 	ldw	r7,-12(fp)
   10074:	0010d740 	call	10d74 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   10078:	e0bffd17 	ldw	r2,-12(fp)
   1007c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   10080:	e0bffd17 	ldw	r2,-12(fp)
   10084:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   10088:	00800074 	movhi	r2,1
   1008c:	10973c04 	addi	r2,r2,23792
   10090:	10800017 	ldw	r2,0(r2)
   10094:	1809883a 	mov	r4,r3
   10098:	100b883a 	mov	r5,r2
   1009c:	01800074 	movhi	r6,1
   100a0:	3180b604 	addi	r6,r6,728
   100a4:	e1fffd17 	ldw	r7,-12(fp)
   100a8:	00108f80 	call	108f8 <alt_alarm_start>
   100ac:	1000040e 	bge	r2,zero,100c0 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   100b0:	e0fffd17 	ldw	r3,-12(fp)
   100b4:	00a00034 	movhi	r2,32768
   100b8:	10bfffc4 	addi	r2,r2,-1
   100bc:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   100c0:	e037883a 	mov	sp,fp
   100c4:	dfc00117 	ldw	ra,4(sp)
   100c8:	df000017 	ldw	fp,0(sp)
   100cc:	dec00204 	addi	sp,sp,8
   100d0:	f800283a 	ret

000100d4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   100d4:	defff804 	addi	sp,sp,-32
   100d8:	df000715 	stw	fp,28(sp)
   100dc:	df000704 	addi	fp,sp,28
   100e0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   100e4:	e0bfff17 	ldw	r2,-4(fp)
   100e8:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   100ec:	e0bffb17 	ldw	r2,-20(fp)
   100f0:	10800017 	ldw	r2,0(r2)
   100f4:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   100f8:	e0bffc17 	ldw	r2,-16(fp)
   100fc:	10800104 	addi	r2,r2,4
   10100:	10800037 	ldwio	r2,0(r2)
   10104:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   10108:	e0bffd17 	ldw	r2,-12(fp)
   1010c:	1080c00c 	andi	r2,r2,768
   10110:	1000011e 	bne	r2,zero,10118 <altera_avalon_jtag_uart_irq+0x44>
      break;
   10114:	00006c06 	br	102c8 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   10118:	e0bffd17 	ldw	r2,-12(fp)
   1011c:	1080400c 	andi	r2,r2,256
   10120:	10003426 	beq	r2,zero,101f4 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   10124:	00800074 	movhi	r2,1
   10128:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1012c:	e0bffb17 	ldw	r2,-20(fp)
   10130:	10800a17 	ldw	r2,40(r2)
   10134:	10800044 	addi	r2,r2,1
   10138:	1081ffcc 	andi	r2,r2,2047
   1013c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   10140:	e0bffb17 	ldw	r2,-20(fp)
   10144:	10c00b17 	ldw	r3,44(r2)
   10148:	e0bffe17 	ldw	r2,-8(fp)
   1014c:	1880011e 	bne	r3,r2,10154 <altera_avalon_jtag_uart_irq+0x80>
          break;
   10150:	00001606 	br	101ac <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   10154:	e0bffc17 	ldw	r2,-16(fp)
   10158:	10800037 	ldwio	r2,0(r2)
   1015c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   10160:	e0bff917 	ldw	r2,-28(fp)
   10164:	10a0000c 	andi	r2,r2,32768
   10168:	1000011e 	bne	r2,zero,10170 <altera_avalon_jtag_uart_irq+0x9c>
          break;
   1016c:	00000f06 	br	101ac <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   10170:	e0bffb17 	ldw	r2,-20(fp)
   10174:	10800a17 	ldw	r2,40(r2)
   10178:	e0fff917 	ldw	r3,-28(fp)
   1017c:	1809883a 	mov	r4,r3
   10180:	e0fffb17 	ldw	r3,-20(fp)
   10184:	1885883a 	add	r2,r3,r2
   10188:	10800e04 	addi	r2,r2,56
   1018c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   10190:	e0bffb17 	ldw	r2,-20(fp)
   10194:	10800a17 	ldw	r2,40(r2)
   10198:	10800044 	addi	r2,r2,1
   1019c:	10c1ffcc 	andi	r3,r2,2047
   101a0:	e0bffb17 	ldw	r2,-20(fp)
   101a4:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   101a8:	003fe006 	br	1012c <__alt_data_end+0xfffba9fc>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   101ac:	e0bff917 	ldw	r2,-28(fp)
   101b0:	10bfffec 	andhi	r2,r2,65535
   101b4:	10000f26 	beq	r2,zero,101f4 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   101b8:	e0bffb17 	ldw	r2,-20(fp)
   101bc:	10c00817 	ldw	r3,32(r2)
   101c0:	00bfff84 	movi	r2,-2
   101c4:	1886703a 	and	r3,r3,r2
   101c8:	e0bffb17 	ldw	r2,-20(fp)
   101cc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   101d0:	e0bffc17 	ldw	r2,-16(fp)
   101d4:	10800104 	addi	r2,r2,4
   101d8:	1007883a 	mov	r3,r2
   101dc:	e0bffb17 	ldw	r2,-20(fp)
   101e0:	10800817 	ldw	r2,32(r2)
   101e4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   101e8:	e0bffc17 	ldw	r2,-16(fp)
   101ec:	10800104 	addi	r2,r2,4
   101f0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   101f4:	e0bffd17 	ldw	r2,-12(fp)
   101f8:	1080800c 	andi	r2,r2,512
   101fc:	10003126 	beq	r2,zero,102c4 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   10200:	e0bffd17 	ldw	r2,-12(fp)
   10204:	1004d43a 	srli	r2,r2,16
   10208:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   1020c:	00001406 	br	10260 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   10210:	e0bffc17 	ldw	r2,-16(fp)
   10214:	e0fffb17 	ldw	r3,-20(fp)
   10218:	18c00d17 	ldw	r3,52(r3)
   1021c:	e13ffb17 	ldw	r4,-20(fp)
   10220:	20c7883a 	add	r3,r4,r3
   10224:	18c20e04 	addi	r3,r3,2104
   10228:	18c00003 	ldbu	r3,0(r3)
   1022c:	18c03fcc 	andi	r3,r3,255
   10230:	18c0201c 	xori	r3,r3,128
   10234:	18ffe004 	addi	r3,r3,-128
   10238:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1023c:	e0bffb17 	ldw	r2,-20(fp)
   10240:	10800d17 	ldw	r2,52(r2)
   10244:	10800044 	addi	r2,r2,1
   10248:	10c1ffcc 	andi	r3,r2,2047
   1024c:	e0bffb17 	ldw	r2,-20(fp)
   10250:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   10254:	e0bffa17 	ldw	r2,-24(fp)
   10258:	10bfffc4 	addi	r2,r2,-1
   1025c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   10260:	e0bffa17 	ldw	r2,-24(fp)
   10264:	10000526 	beq	r2,zero,1027c <altera_avalon_jtag_uart_irq+0x1a8>
   10268:	e0bffb17 	ldw	r2,-20(fp)
   1026c:	10c00d17 	ldw	r3,52(r2)
   10270:	e0bffb17 	ldw	r2,-20(fp)
   10274:	10800c17 	ldw	r2,48(r2)
   10278:	18bfe51e 	bne	r3,r2,10210 <__alt_data_end+0xfffbaae0>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   1027c:	e0bffa17 	ldw	r2,-24(fp)
   10280:	10001026 	beq	r2,zero,102c4 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   10284:	e0bffb17 	ldw	r2,-20(fp)
   10288:	10c00817 	ldw	r3,32(r2)
   1028c:	00bfff44 	movi	r2,-3
   10290:	1886703a 	and	r3,r3,r2
   10294:	e0bffb17 	ldw	r2,-20(fp)
   10298:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1029c:	e0bffb17 	ldw	r2,-20(fp)
   102a0:	10800017 	ldw	r2,0(r2)
   102a4:	10800104 	addi	r2,r2,4
   102a8:	1007883a 	mov	r3,r2
   102ac:	e0bffb17 	ldw	r2,-20(fp)
   102b0:	10800817 	ldw	r2,32(r2)
   102b4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   102b8:	e0bffc17 	ldw	r2,-16(fp)
   102bc:	10800104 	addi	r2,r2,4
   102c0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   102c4:	003f8c06 	br	100f8 <__alt_data_end+0xfffba9c8>
}
   102c8:	e037883a 	mov	sp,fp
   102cc:	df000017 	ldw	fp,0(sp)
   102d0:	dec00104 	addi	sp,sp,4
   102d4:	f800283a 	ret

000102d8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   102d8:	defff804 	addi	sp,sp,-32
   102dc:	df000715 	stw	fp,28(sp)
   102e0:	df000704 	addi	fp,sp,28
   102e4:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   102e8:	e0bffb17 	ldw	r2,-20(fp)
   102ec:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   102f0:	e0bff917 	ldw	r2,-28(fp)
   102f4:	10800017 	ldw	r2,0(r2)
   102f8:	10800104 	addi	r2,r2,4
   102fc:	10800037 	ldwio	r2,0(r2)
   10300:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   10304:	e0bffa17 	ldw	r2,-24(fp)
   10308:	1081000c 	andi	r2,r2,1024
   1030c:	10000b26 	beq	r2,zero,1033c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   10310:	e0bff917 	ldw	r2,-28(fp)
   10314:	10800017 	ldw	r2,0(r2)
   10318:	10800104 	addi	r2,r2,4
   1031c:	1007883a 	mov	r3,r2
   10320:	e0bff917 	ldw	r2,-28(fp)
   10324:	10800817 	ldw	r2,32(r2)
   10328:	10810014 	ori	r2,r2,1024
   1032c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   10330:	e0bff917 	ldw	r2,-28(fp)
   10334:	10000915 	stw	zero,36(r2)
   10338:	00000a06 	br	10364 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   1033c:	e0bff917 	ldw	r2,-28(fp)
   10340:	10c00917 	ldw	r3,36(r2)
   10344:	00a00034 	movhi	r2,32768
   10348:	10bfff04 	addi	r2,r2,-4
   1034c:	10c00536 	bltu	r2,r3,10364 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   10350:	e0bff917 	ldw	r2,-28(fp)
   10354:	10800917 	ldw	r2,36(r2)
   10358:	10c00044 	addi	r3,r2,1
   1035c:	e0bff917 	ldw	r2,-28(fp)
   10360:	10c00915 	stw	r3,36(r2)
   10364:	00800074 	movhi	r2,1
   10368:	10973c04 	addi	r2,r2,23792
   1036c:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   10370:	e037883a 	mov	sp,fp
   10374:	df000017 	ldw	fp,0(sp)
   10378:	dec00104 	addi	sp,sp,4
   1037c:	f800283a 	ret

00010380 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   10380:	defffd04 	addi	sp,sp,-12
   10384:	df000215 	stw	fp,8(sp)
   10388:	df000204 	addi	fp,sp,8
   1038c:	e13ffe15 	stw	r4,-8(fp)
   10390:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   10394:	00000506 	br	103ac <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   10398:	e0bfff17 	ldw	r2,-4(fp)
   1039c:	1090000c 	andi	r2,r2,16384
   103a0:	10000226 	beq	r2,zero,103ac <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   103a4:	00bffd44 	movi	r2,-11
   103a8:	00000b06 	br	103d8 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   103ac:	e0bffe17 	ldw	r2,-8(fp)
   103b0:	10c00d17 	ldw	r3,52(r2)
   103b4:	e0bffe17 	ldw	r2,-8(fp)
   103b8:	10800c17 	ldw	r2,48(r2)
   103bc:	18800526 	beq	r3,r2,103d4 <altera_avalon_jtag_uart_close+0x54>
   103c0:	e0bffe17 	ldw	r2,-8(fp)
   103c4:	10c00917 	ldw	r3,36(r2)
   103c8:	e0bffe17 	ldw	r2,-8(fp)
   103cc:	10800117 	ldw	r2,4(r2)
   103d0:	18bff136 	bltu	r3,r2,10398 <__alt_data_end+0xfffbac68>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   103d4:	0005883a 	mov	r2,zero
}
   103d8:	e037883a 	mov	sp,fp
   103dc:	df000017 	ldw	fp,0(sp)
   103e0:	dec00104 	addi	sp,sp,4
   103e4:	f800283a 	ret

000103e8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   103e8:	defffa04 	addi	sp,sp,-24
   103ec:	df000515 	stw	fp,20(sp)
   103f0:	df000504 	addi	fp,sp,20
   103f4:	e13ffd15 	stw	r4,-12(fp)
   103f8:	e17ffe15 	stw	r5,-8(fp)
   103fc:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   10400:	00bff9c4 	movi	r2,-25
   10404:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   10408:	e0bffe17 	ldw	r2,-8(fp)
   1040c:	10da8060 	cmpeqi	r3,r2,27137
   10410:	1800031e 	bne	r3,zero,10420 <altera_avalon_jtag_uart_ioctl+0x38>
   10414:	109a80a0 	cmpeqi	r2,r2,27138
   10418:	1000191e 	bne	r2,zero,10480 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
   1041c:	00002806 	br	104c0 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   10420:	e0bffd17 	ldw	r2,-12(fp)
   10424:	10c00117 	ldw	r3,4(r2)
   10428:	00a00034 	movhi	r2,32768
   1042c:	10bfffc4 	addi	r2,r2,-1
   10430:	18801226 	beq	r3,r2,1047c <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
   10434:	e0bfff17 	ldw	r2,-4(fp)
   10438:	10800017 	ldw	r2,0(r2)
   1043c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   10440:	e0bffc17 	ldw	r2,-16(fp)
   10444:	10800090 	cmplti	r2,r2,2
   10448:	1000061e 	bne	r2,zero,10464 <altera_avalon_jtag_uart_ioctl+0x7c>
   1044c:	e0fffc17 	ldw	r3,-16(fp)
   10450:	00a00034 	movhi	r2,32768
   10454:	10bfffc4 	addi	r2,r2,-1
   10458:	18800226 	beq	r3,r2,10464 <altera_avalon_jtag_uart_ioctl+0x7c>
   1045c:	e0bffc17 	ldw	r2,-16(fp)
   10460:	00000206 	br	1046c <altera_avalon_jtag_uart_ioctl+0x84>
   10464:	00a00034 	movhi	r2,32768
   10468:	10bfff84 	addi	r2,r2,-2
   1046c:	e0fffd17 	ldw	r3,-12(fp)
   10470:	18800115 	stw	r2,4(r3)
      rc = 0;
   10474:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   10478:	00001106 	br	104c0 <altera_avalon_jtag_uart_ioctl+0xd8>
   1047c:	00001006 	br	104c0 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   10480:	e0bffd17 	ldw	r2,-12(fp)
   10484:	10c00117 	ldw	r3,4(r2)
   10488:	00a00034 	movhi	r2,32768
   1048c:	10bfffc4 	addi	r2,r2,-1
   10490:	18800a26 	beq	r3,r2,104bc <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   10494:	e0bffd17 	ldw	r2,-12(fp)
   10498:	10c00917 	ldw	r3,36(r2)
   1049c:	e0bffd17 	ldw	r2,-12(fp)
   104a0:	10800117 	ldw	r2,4(r2)
   104a4:	1885803a 	cmpltu	r2,r3,r2
   104a8:	10c03fcc 	andi	r3,r2,255
   104ac:	e0bfff17 	ldw	r2,-4(fp)
   104b0:	10c00015 	stw	r3,0(r2)
      rc = 0;
   104b4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   104b8:	00000006 	br	104bc <altera_avalon_jtag_uart_ioctl+0xd4>
   104bc:	0001883a 	nop

  default:
    break;
  }

  return rc;
   104c0:	e0bffb17 	ldw	r2,-20(fp)
}
   104c4:	e037883a 	mov	sp,fp
   104c8:	df000017 	ldw	fp,0(sp)
   104cc:	dec00104 	addi	sp,sp,4
   104d0:	f800283a 	ret

000104d4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   104d4:	defff304 	addi	sp,sp,-52
   104d8:	dfc00c15 	stw	ra,48(sp)
   104dc:	df000b15 	stw	fp,44(sp)
   104e0:	df000b04 	addi	fp,sp,44
   104e4:	e13ffc15 	stw	r4,-16(fp)
   104e8:	e17ffd15 	stw	r5,-12(fp)
   104ec:	e1bffe15 	stw	r6,-8(fp)
   104f0:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   104f4:	e0bffd17 	ldw	r2,-12(fp)
   104f8:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   104fc:	00004906 	br	10624 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   10500:	e0bffc17 	ldw	r2,-16(fp)
   10504:	10800a17 	ldw	r2,40(r2)
   10508:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   1050c:	e0bffc17 	ldw	r2,-16(fp)
   10510:	10800b17 	ldw	r2,44(r2)
   10514:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   10518:	e0fff717 	ldw	r3,-36(fp)
   1051c:	e0bff817 	ldw	r2,-32(fp)
   10520:	18800536 	bltu	r3,r2,10538 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   10524:	e0fff717 	ldw	r3,-36(fp)
   10528:	e0bff817 	ldw	r2,-32(fp)
   1052c:	1885c83a 	sub	r2,r3,r2
   10530:	e0bff615 	stw	r2,-40(fp)
   10534:	00000406 	br	10548 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   10538:	00c20004 	movi	r3,2048
   1053c:	e0bff817 	ldw	r2,-32(fp)
   10540:	1885c83a 	sub	r2,r3,r2
   10544:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   10548:	e0bff617 	ldw	r2,-40(fp)
   1054c:	1000011e 	bne	r2,zero,10554 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
   10550:	00001d06 	br	105c8 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
   10554:	e0fffe17 	ldw	r3,-8(fp)
   10558:	e0bff617 	ldw	r2,-40(fp)
   1055c:	1880022e 	bgeu	r3,r2,10568 <altera_avalon_jtag_uart_read+0x94>
        n = space;
   10560:	e0bffe17 	ldw	r2,-8(fp)
   10564:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   10568:	e0bff817 	ldw	r2,-32(fp)
   1056c:	10800e04 	addi	r2,r2,56
   10570:	e0fffc17 	ldw	r3,-16(fp)
   10574:	1885883a 	add	r2,r3,r2
   10578:	e13ff517 	ldw	r4,-44(fp)
   1057c:	100b883a 	mov	r5,r2
   10580:	e1bff617 	ldw	r6,-40(fp)
   10584:	000838c0 	call	838c <memcpy>
      ptr   += n;
   10588:	e0fff517 	ldw	r3,-44(fp)
   1058c:	e0bff617 	ldw	r2,-40(fp)
   10590:	1885883a 	add	r2,r3,r2
   10594:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   10598:	e0fffe17 	ldw	r3,-8(fp)
   1059c:	e0bff617 	ldw	r2,-40(fp)
   105a0:	1885c83a 	sub	r2,r3,r2
   105a4:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   105a8:	e0fff817 	ldw	r3,-32(fp)
   105ac:	e0bff617 	ldw	r2,-40(fp)
   105b0:	1885883a 	add	r2,r3,r2
   105b4:	10c1ffcc 	andi	r3,r2,2047
   105b8:	e0bffc17 	ldw	r2,-16(fp)
   105bc:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   105c0:	e0bffe17 	ldw	r2,-8(fp)
   105c4:	00bfce16 	blt	zero,r2,10500 <__alt_data_end+0xfffbadd0>

    /* If we read any data then return it */
    if (ptr != buffer)
   105c8:	e0fff517 	ldw	r3,-44(fp)
   105cc:	e0bffd17 	ldw	r2,-12(fp)
   105d0:	18800126 	beq	r3,r2,105d8 <altera_avalon_jtag_uart_read+0x104>
      break;
   105d4:	00001506 	br	1062c <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   105d8:	e0bfff17 	ldw	r2,-4(fp)
   105dc:	1090000c 	andi	r2,r2,16384
   105e0:	10000126 	beq	r2,zero,105e8 <altera_avalon_jtag_uart_read+0x114>
      break;
   105e4:	00001106 	br	1062c <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   105e8:	0001883a 	nop
   105ec:	e0bffc17 	ldw	r2,-16(fp)
   105f0:	10c00a17 	ldw	r3,40(r2)
   105f4:	e0bff717 	ldw	r2,-36(fp)
   105f8:	1880051e 	bne	r3,r2,10610 <altera_avalon_jtag_uart_read+0x13c>
   105fc:	e0bffc17 	ldw	r2,-16(fp)
   10600:	10c00917 	ldw	r3,36(r2)
   10604:	e0bffc17 	ldw	r2,-16(fp)
   10608:	10800117 	ldw	r2,4(r2)
   1060c:	18bff736 	bltu	r3,r2,105ec <__alt_data_end+0xfffbaebc>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   10610:	e0bffc17 	ldw	r2,-16(fp)
   10614:	10c00a17 	ldw	r3,40(r2)
   10618:	e0bff717 	ldw	r2,-36(fp)
   1061c:	1880011e 	bne	r3,r2,10624 <altera_avalon_jtag_uart_read+0x150>
      break;
   10620:	00000206 	br	1062c <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   10624:	e0bffe17 	ldw	r2,-8(fp)
   10628:	00bfb516 	blt	zero,r2,10500 <__alt_data_end+0xfffbadd0>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   1062c:	e0fff517 	ldw	r3,-44(fp)
   10630:	e0bffd17 	ldw	r2,-12(fp)
   10634:	18801826 	beq	r3,r2,10698 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10638:	0005303a 	rdctl	r2,status
   1063c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10640:	e0fffa17 	ldw	r3,-24(fp)
   10644:	00bfff84 	movi	r2,-2
   10648:	1884703a 	and	r2,r3,r2
   1064c:	1001703a 	wrctl	status,r2
  
  return context;
   10650:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   10654:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   10658:	e0bffc17 	ldw	r2,-16(fp)
   1065c:	10800817 	ldw	r2,32(r2)
   10660:	10c00054 	ori	r3,r2,1
   10664:	e0bffc17 	ldw	r2,-16(fp)
   10668:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1066c:	e0bffc17 	ldw	r2,-16(fp)
   10670:	10800017 	ldw	r2,0(r2)
   10674:	10800104 	addi	r2,r2,4
   10678:	1007883a 	mov	r3,r2
   1067c:	e0bffc17 	ldw	r2,-16(fp)
   10680:	10800817 	ldw	r2,32(r2)
   10684:	18800035 	stwio	r2,0(r3)
   10688:	e0bff917 	ldw	r2,-28(fp)
   1068c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10690:	e0bffb17 	ldw	r2,-20(fp)
   10694:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   10698:	e0fff517 	ldw	r3,-44(fp)
   1069c:	e0bffd17 	ldw	r2,-12(fp)
   106a0:	18800426 	beq	r3,r2,106b4 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
   106a4:	e0fff517 	ldw	r3,-44(fp)
   106a8:	e0bffd17 	ldw	r2,-12(fp)
   106ac:	1885c83a 	sub	r2,r3,r2
   106b0:	00000606 	br	106cc <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
   106b4:	e0bfff17 	ldw	r2,-4(fp)
   106b8:	1090000c 	andi	r2,r2,16384
   106bc:	10000226 	beq	r2,zero,106c8 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
   106c0:	00bffd44 	movi	r2,-11
   106c4:	00000106 	br	106cc <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
   106c8:	00bffec4 	movi	r2,-5
}
   106cc:	e037883a 	mov	sp,fp
   106d0:	dfc00117 	ldw	ra,4(sp)
   106d4:	df000017 	ldw	fp,0(sp)
   106d8:	dec00204 	addi	sp,sp,8
   106dc:	f800283a 	ret

000106e0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   106e0:	defff304 	addi	sp,sp,-52
   106e4:	dfc00c15 	stw	ra,48(sp)
   106e8:	df000b15 	stw	fp,44(sp)
   106ec:	df000b04 	addi	fp,sp,44
   106f0:	e13ffc15 	stw	r4,-16(fp)
   106f4:	e17ffd15 	stw	r5,-12(fp)
   106f8:	e1bffe15 	stw	r6,-8(fp)
   106fc:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   10700:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   10704:	e0bffd17 	ldw	r2,-12(fp)
   10708:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   1070c:	00003806 	br	107f0 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   10710:	e0bffc17 	ldw	r2,-16(fp)
   10714:	10800c17 	ldw	r2,48(r2)
   10718:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
   1071c:	e0bffc17 	ldw	r2,-16(fp)
   10720:	10800d17 	ldw	r2,52(r2)
   10724:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   10728:	e0fff817 	ldw	r3,-32(fp)
   1072c:	e0bff517 	ldw	r2,-44(fp)
   10730:	1880062e 	bgeu	r3,r2,1074c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   10734:	e0fff517 	ldw	r3,-44(fp)
   10738:	e0bff817 	ldw	r2,-32(fp)
   1073c:	1885c83a 	sub	r2,r3,r2
   10740:	10bfffc4 	addi	r2,r2,-1
   10744:	e0bff615 	stw	r2,-40(fp)
   10748:	00000b06 	br	10778 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   1074c:	e0bff517 	ldw	r2,-44(fp)
   10750:	10000526 	beq	r2,zero,10768 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   10754:	00c20004 	movi	r3,2048
   10758:	e0bff817 	ldw	r2,-32(fp)
   1075c:	1885c83a 	sub	r2,r3,r2
   10760:	e0bff615 	stw	r2,-40(fp)
   10764:	00000406 	br	10778 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   10768:	00c1ffc4 	movi	r3,2047
   1076c:	e0bff817 	ldw	r2,-32(fp)
   10770:	1885c83a 	sub	r2,r3,r2
   10774:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   10778:	e0bff617 	ldw	r2,-40(fp)
   1077c:	1000011e 	bne	r2,zero,10784 <altera_avalon_jtag_uart_write+0xa4>
        break;
   10780:	00001d06 	br	107f8 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
   10784:	e0fffe17 	ldw	r3,-8(fp)
   10788:	e0bff617 	ldw	r2,-40(fp)
   1078c:	1880022e 	bgeu	r3,r2,10798 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
   10790:	e0bffe17 	ldw	r2,-8(fp)
   10794:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   10798:	e0bff817 	ldw	r2,-32(fp)
   1079c:	10820e04 	addi	r2,r2,2104
   107a0:	e0fffc17 	ldw	r3,-16(fp)
   107a4:	1885883a 	add	r2,r3,r2
   107a8:	1009883a 	mov	r4,r2
   107ac:	e17ffd17 	ldw	r5,-12(fp)
   107b0:	e1bff617 	ldw	r6,-40(fp)
   107b4:	000838c0 	call	838c <memcpy>
      ptr   += n;
   107b8:	e0fffd17 	ldw	r3,-12(fp)
   107bc:	e0bff617 	ldw	r2,-40(fp)
   107c0:	1885883a 	add	r2,r3,r2
   107c4:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   107c8:	e0fffe17 	ldw	r3,-8(fp)
   107cc:	e0bff617 	ldw	r2,-40(fp)
   107d0:	1885c83a 	sub	r2,r3,r2
   107d4:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   107d8:	e0fff817 	ldw	r3,-32(fp)
   107dc:	e0bff617 	ldw	r2,-40(fp)
   107e0:	1885883a 	add	r2,r3,r2
   107e4:	10c1ffcc 	andi	r3,r2,2047
   107e8:	e0bffc17 	ldw	r2,-16(fp)
   107ec:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   107f0:	e0bffe17 	ldw	r2,-8(fp)
   107f4:	00bfc616 	blt	zero,r2,10710 <__alt_data_end+0xfffbafe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   107f8:	0005303a 	rdctl	r2,status
   107fc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10800:	e0fffa17 	ldw	r3,-24(fp)
   10804:	00bfff84 	movi	r2,-2
   10808:	1884703a 	and	r2,r3,r2
   1080c:	1001703a 	wrctl	status,r2
  
  return context;
   10810:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   10814:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   10818:	e0bffc17 	ldw	r2,-16(fp)
   1081c:	10800817 	ldw	r2,32(r2)
   10820:	10c00094 	ori	r3,r2,2
   10824:	e0bffc17 	ldw	r2,-16(fp)
   10828:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1082c:	e0bffc17 	ldw	r2,-16(fp)
   10830:	10800017 	ldw	r2,0(r2)
   10834:	10800104 	addi	r2,r2,4
   10838:	1007883a 	mov	r3,r2
   1083c:	e0bffc17 	ldw	r2,-16(fp)
   10840:	10800817 	ldw	r2,32(r2)
   10844:	18800035 	stwio	r2,0(r3)
   10848:	e0bff917 	ldw	r2,-28(fp)
   1084c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10850:	e0bffb17 	ldw	r2,-20(fp)
   10854:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   10858:	e0bffe17 	ldw	r2,-8(fp)
   1085c:	0080120e 	bge	zero,r2,108a8 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
   10860:	e0bfff17 	ldw	r2,-4(fp)
   10864:	1090000c 	andi	r2,r2,16384
   10868:	10000126 	beq	r2,zero,10870 <altera_avalon_jtag_uart_write+0x190>
        break;
   1086c:	00001006 	br	108b0 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   10870:	0001883a 	nop
   10874:	e0bffc17 	ldw	r2,-16(fp)
   10878:	10c00d17 	ldw	r3,52(r2)
   1087c:	e0bff517 	ldw	r2,-44(fp)
   10880:	1880051e 	bne	r3,r2,10898 <altera_avalon_jtag_uart_write+0x1b8>
   10884:	e0bffc17 	ldw	r2,-16(fp)
   10888:	10c00917 	ldw	r3,36(r2)
   1088c:	e0bffc17 	ldw	r2,-16(fp)
   10890:	10800117 	ldw	r2,4(r2)
   10894:	18bff736 	bltu	r3,r2,10874 <__alt_data_end+0xfffbb144>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   10898:	e0bffc17 	ldw	r2,-16(fp)
   1089c:	10800917 	ldw	r2,36(r2)
   108a0:	10000126 	beq	r2,zero,108a8 <altera_avalon_jtag_uart_write+0x1c8>
         break;
   108a4:	00000206 	br	108b0 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
   108a8:	e0bffe17 	ldw	r2,-8(fp)
   108ac:	00bf9716 	blt	zero,r2,1070c <__alt_data_end+0xfffbafdc>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   108b0:	e0fffd17 	ldw	r3,-12(fp)
   108b4:	e0bff717 	ldw	r2,-36(fp)
   108b8:	18800426 	beq	r3,r2,108cc <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
   108bc:	e0fffd17 	ldw	r3,-12(fp)
   108c0:	e0bff717 	ldw	r2,-36(fp)
   108c4:	1885c83a 	sub	r2,r3,r2
   108c8:	00000606 	br	108e4 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
   108cc:	e0bfff17 	ldw	r2,-4(fp)
   108d0:	1090000c 	andi	r2,r2,16384
   108d4:	10000226 	beq	r2,zero,108e0 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
   108d8:	00bffd44 	movi	r2,-11
   108dc:	00000106 	br	108e4 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   108e0:	00bffec4 	movi	r2,-5
}
   108e4:	e037883a 	mov	sp,fp
   108e8:	dfc00117 	ldw	ra,4(sp)
   108ec:	df000017 	ldw	fp,0(sp)
   108f0:	dec00204 	addi	sp,sp,8
   108f4:	f800283a 	ret

000108f8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   108f8:	defff504 	addi	sp,sp,-44
   108fc:	df000a15 	stw	fp,40(sp)
   10900:	df000a04 	addi	fp,sp,40
   10904:	e13ffc15 	stw	r4,-16(fp)
   10908:	e17ffd15 	stw	r5,-12(fp)
   1090c:	e1bffe15 	stw	r6,-8(fp)
   10910:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   10914:	e03ff615 	stw	zero,-40(fp)
   10918:	00800074 	movhi	r2,1
   1091c:	10973c04 	addi	r2,r2,23792
   10920:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   10924:	10003f26 	beq	r2,zero,10a24 <alt_alarm_start+0x12c>
  {
    if (alarm)
   10928:	e0bffc17 	ldw	r2,-16(fp)
   1092c:	10003b26 	beq	r2,zero,10a1c <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   10930:	e0bffc17 	ldw	r2,-16(fp)
   10934:	e0fffe17 	ldw	r3,-8(fp)
   10938:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   1093c:	e0bffc17 	ldw	r2,-16(fp)
   10940:	e0ffff17 	ldw	r3,-4(fp)
   10944:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10948:	0005303a 	rdctl	r2,status
   1094c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10950:	e0fff817 	ldw	r3,-32(fp)
   10954:	00bfff84 	movi	r2,-2
   10958:	1884703a 	and	r2,r3,r2
   1095c:	1001703a 	wrctl	status,r2
  
  return context;
   10960:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   10964:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   10968:	00800074 	movhi	r2,1
   1096c:	10973d04 	addi	r2,r2,23796
   10970:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   10974:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   10978:	e0fffd17 	ldw	r3,-12(fp)
   1097c:	e0bff617 	ldw	r2,-40(fp)
   10980:	1885883a 	add	r2,r3,r2
   10984:	10c00044 	addi	r3,r2,1
   10988:	e0bffc17 	ldw	r2,-16(fp)
   1098c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   10990:	e0bffc17 	ldw	r2,-16(fp)
   10994:	10c00217 	ldw	r3,8(r2)
   10998:	e0bff617 	ldw	r2,-40(fp)
   1099c:	1880042e 	bgeu	r3,r2,109b0 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   109a0:	e0bffc17 	ldw	r2,-16(fp)
   109a4:	00c00044 	movi	r3,1
   109a8:	10c00405 	stb	r3,16(r2)
   109ac:	00000206 	br	109b8 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   109b0:	e0bffc17 	ldw	r2,-16(fp)
   109b4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   109b8:	e0fffc17 	ldw	r3,-16(fp)
   109bc:	00800074 	movhi	r2,1
   109c0:	10906c04 	addi	r2,r2,16816
   109c4:	e0bff915 	stw	r2,-28(fp)
   109c8:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   109cc:	e0bffa17 	ldw	r2,-24(fp)
   109d0:	e0fff917 	ldw	r3,-28(fp)
   109d4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   109d8:	e0bff917 	ldw	r2,-28(fp)
   109dc:	10c00017 	ldw	r3,0(r2)
   109e0:	e0bffa17 	ldw	r2,-24(fp)
   109e4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   109e8:	e0bff917 	ldw	r2,-28(fp)
   109ec:	10800017 	ldw	r2,0(r2)
   109f0:	e0fffa17 	ldw	r3,-24(fp)
   109f4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   109f8:	e0bff917 	ldw	r2,-28(fp)
   109fc:	e0fffa17 	ldw	r3,-24(fp)
   10a00:	10c00015 	stw	r3,0(r2)
   10a04:	e0bff717 	ldw	r2,-36(fp)
   10a08:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10a0c:	e0bffb17 	ldw	r2,-20(fp)
   10a10:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   10a14:	0005883a 	mov	r2,zero
   10a18:	00000306 	br	10a28 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   10a1c:	00bffa84 	movi	r2,-22
   10a20:	00000106 	br	10a28 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   10a24:	00bfde84 	movi	r2,-134
  }
}
   10a28:	e037883a 	mov	sp,fp
   10a2c:	df000017 	ldw	fp,0(sp)
   10a30:	dec00104 	addi	sp,sp,4
   10a34:	f800283a 	ret

00010a38 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   10a38:	defffa04 	addi	sp,sp,-24
   10a3c:	dfc00515 	stw	ra,20(sp)
   10a40:	df000415 	stw	fp,16(sp)
   10a44:	df000404 	addi	fp,sp,16
   10a48:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   10a4c:	00800244 	movi	r2,9
   10a50:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   10a54:	e13ffd17 	ldw	r4,-12(fp)
   10a58:	014003f4 	movhi	r5,15
   10a5c:	29509004 	addi	r5,r5,16960
   10a60:	000cbb00 	call	cbb0 <__mulsi3>
   10a64:	0100bef4 	movhi	r4,763
   10a68:	213c2004 	addi	r4,r4,-3968
   10a6c:	100b883a 	mov	r5,r2
   10a70:	000cba00 	call	cba0 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   10a74:	01200034 	movhi	r4,32768
   10a78:	213fffc4 	addi	r4,r4,-1
   10a7c:	100b883a 	mov	r5,r2
   10a80:	000cba00 	call	cba0 <__udivsi3>
   10a84:	e13fff17 	ldw	r4,-4(fp)
   10a88:	100b883a 	mov	r5,r2
   10a8c:	000cba00 	call	cba0 <__udivsi3>
   10a90:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   10a94:	e0bffe17 	ldw	r2,-8(fp)
   10a98:	10002a26 	beq	r2,zero,10b44 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   10a9c:	e03ffc15 	stw	zero,-16(fp)
   10aa0:	00001706 	br	10b00 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   10aa4:	00a00034 	movhi	r2,32768
   10aa8:	10bfffc4 	addi	r2,r2,-1
   10aac:	10bfffc4 	addi	r2,r2,-1
   10ab0:	103ffe1e 	bne	r2,zero,10aac <__alt_data_end+0xfffbb37c>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   10ab4:	e13ffd17 	ldw	r4,-12(fp)
   10ab8:	014003f4 	movhi	r5,15
   10abc:	29509004 	addi	r5,r5,16960
   10ac0:	000cbb00 	call	cbb0 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   10ac4:	0100bef4 	movhi	r4,763
   10ac8:	213c2004 	addi	r4,r4,-3968
   10acc:	100b883a 	mov	r5,r2
   10ad0:	000cba00 	call	cba0 <__udivsi3>
   10ad4:	01200034 	movhi	r4,32768
   10ad8:	213fffc4 	addi	r4,r4,-1
   10adc:	100b883a 	mov	r5,r2
   10ae0:	000cba00 	call	cba0 <__udivsi3>
   10ae4:	1007883a 	mov	r3,r2
   10ae8:	e0bfff17 	ldw	r2,-4(fp)
   10aec:	10c5c83a 	sub	r2,r2,r3
   10af0:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   10af4:	e0bffc17 	ldw	r2,-16(fp)
   10af8:	10800044 	addi	r2,r2,1
   10afc:	e0bffc15 	stw	r2,-16(fp)
   10b00:	e0fffc17 	ldw	r3,-16(fp)
   10b04:	e0bffe17 	ldw	r2,-8(fp)
   10b08:	18bfe616 	blt	r3,r2,10aa4 <__alt_data_end+0xfffbb374>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   10b0c:	e13ffd17 	ldw	r4,-12(fp)
   10b10:	014003f4 	movhi	r5,15
   10b14:	29509004 	addi	r5,r5,16960
   10b18:	000cbb00 	call	cbb0 <__mulsi3>
   10b1c:	0100bef4 	movhi	r4,763
   10b20:	213c2004 	addi	r4,r4,-3968
   10b24:	100b883a 	mov	r5,r2
   10b28:	000cba00 	call	cba0 <__udivsi3>
   10b2c:	1009883a 	mov	r4,r2
   10b30:	e17fff17 	ldw	r5,-4(fp)
   10b34:	000cbb00 	call	cbb0 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   10b38:	10bfffc4 	addi	r2,r2,-1
   10b3c:	103ffe1e 	bne	r2,zero,10b38 <__alt_data_end+0xfffbb408>
   10b40:	00000d06 	br	10b78 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   10b44:	e13ffd17 	ldw	r4,-12(fp)
   10b48:	014003f4 	movhi	r5,15
   10b4c:	29509004 	addi	r5,r5,16960
   10b50:	000cbb00 	call	cbb0 <__mulsi3>
   10b54:	0100bef4 	movhi	r4,763
   10b58:	213c2004 	addi	r4,r4,-3968
   10b5c:	100b883a 	mov	r5,r2
   10b60:	000cba00 	call	cba0 <__udivsi3>
   10b64:	1009883a 	mov	r4,r2
   10b68:	e17fff17 	ldw	r5,-4(fp)
   10b6c:	000cbb00 	call	cbb0 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   10b70:	10bfffc4 	addi	r2,r2,-1
   10b74:	00bffe16 	blt	zero,r2,10b70 <__alt_data_end+0xfffbb440>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   10b78:	0005883a 	mov	r2,zero
}
   10b7c:	e037883a 	mov	sp,fp
   10b80:	dfc00117 	ldw	ra,4(sp)
   10b84:	df000017 	ldw	fp,0(sp)
   10b88:	dec00204 	addi	sp,sp,8
   10b8c:	f800283a 	ret

00010b90 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   10b90:	deffff04 	addi	sp,sp,-4
   10b94:	df000015 	stw	fp,0(sp)
   10b98:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   10b9c:	e037883a 	mov	sp,fp
   10ba0:	df000017 	ldw	fp,0(sp)
   10ba4:	dec00104 	addi	sp,sp,4
   10ba8:	f800283a 	ret

00010bac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10bac:	defffe04 	addi	sp,sp,-8
   10bb0:	dfc00115 	stw	ra,4(sp)
   10bb4:	df000015 	stw	fp,0(sp)
   10bb8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10bbc:	00800074 	movhi	r2,1
   10bc0:	10906904 	addi	r2,r2,16804
   10bc4:	10800017 	ldw	r2,0(r2)
   10bc8:	10000526 	beq	r2,zero,10be0 <alt_get_errno+0x34>
   10bcc:	00800074 	movhi	r2,1
   10bd0:	10906904 	addi	r2,r2,16804
   10bd4:	10800017 	ldw	r2,0(r2)
   10bd8:	103ee83a 	callr	r2
   10bdc:	00000206 	br	10be8 <alt_get_errno+0x3c>
   10be0:	00800074 	movhi	r2,1
   10be4:	10973404 	addi	r2,r2,23760
}
   10be8:	e037883a 	mov	sp,fp
   10bec:	dfc00117 	ldw	ra,4(sp)
   10bf0:	df000017 	ldw	fp,0(sp)
   10bf4:	dec00204 	addi	sp,sp,8
   10bf8:	f800283a 	ret

00010bfc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   10bfc:	defffa04 	addi	sp,sp,-24
   10c00:	dfc00515 	stw	ra,20(sp)
   10c04:	df000415 	stw	fp,16(sp)
   10c08:	df000404 	addi	fp,sp,16
   10c0c:	e13ffe15 	stw	r4,-8(fp)
   10c10:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   10c14:	e0bffe17 	ldw	r2,-8(fp)
   10c18:	10000326 	beq	r2,zero,10c28 <alt_dev_llist_insert+0x2c>
   10c1c:	e0bffe17 	ldw	r2,-8(fp)
   10c20:	10800217 	ldw	r2,8(r2)
   10c24:	1000061e 	bne	r2,zero,10c40 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   10c28:	0010bac0 	call	10bac <alt_get_errno>
   10c2c:	1007883a 	mov	r3,r2
   10c30:	00800584 	movi	r2,22
   10c34:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   10c38:	00bffa84 	movi	r2,-22
   10c3c:	00001306 	br	10c8c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   10c40:	e0bffe17 	ldw	r2,-8(fp)
   10c44:	e0ffff17 	ldw	r3,-4(fp)
   10c48:	e0fffc15 	stw	r3,-16(fp)
   10c4c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   10c50:	e0bffd17 	ldw	r2,-12(fp)
   10c54:	e0fffc17 	ldw	r3,-16(fp)
   10c58:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   10c5c:	e0bffc17 	ldw	r2,-16(fp)
   10c60:	10c00017 	ldw	r3,0(r2)
   10c64:	e0bffd17 	ldw	r2,-12(fp)
   10c68:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   10c6c:	e0bffc17 	ldw	r2,-16(fp)
   10c70:	10800017 	ldw	r2,0(r2)
   10c74:	e0fffd17 	ldw	r3,-12(fp)
   10c78:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   10c7c:	e0bffc17 	ldw	r2,-16(fp)
   10c80:	e0fffd17 	ldw	r3,-12(fp)
   10c84:	10c00015 	stw	r3,0(r2)

  return 0;  
   10c88:	0005883a 	mov	r2,zero
}
   10c8c:	e037883a 	mov	sp,fp
   10c90:	dfc00117 	ldw	ra,4(sp)
   10c94:	df000017 	ldw	fp,0(sp)
   10c98:	dec00204 	addi	sp,sp,8
   10c9c:	f800283a 	ret

00010ca0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   10ca0:	defffd04 	addi	sp,sp,-12
   10ca4:	dfc00215 	stw	ra,8(sp)
   10ca8:	df000115 	stw	fp,4(sp)
   10cac:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   10cb0:	00800074 	movhi	r2,1
   10cb4:	10872c04 	addi	r2,r2,7344
   10cb8:	e0bfff15 	stw	r2,-4(fp)
   10cbc:	00000606 	br	10cd8 <_do_ctors+0x38>
        (*ctor) (); 
   10cc0:	e0bfff17 	ldw	r2,-4(fp)
   10cc4:	10800017 	ldw	r2,0(r2)
   10cc8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   10ccc:	e0bfff17 	ldw	r2,-4(fp)
   10cd0:	10bfff04 	addi	r2,r2,-4
   10cd4:	e0bfff15 	stw	r2,-4(fp)
   10cd8:	e0ffff17 	ldw	r3,-4(fp)
   10cdc:	00800074 	movhi	r2,1
   10ce0:	10872d04 	addi	r2,r2,7348
   10ce4:	18bff62e 	bgeu	r3,r2,10cc0 <__alt_data_end+0xfffbb590>
        (*ctor) (); 
}
   10ce8:	e037883a 	mov	sp,fp
   10cec:	dfc00117 	ldw	ra,4(sp)
   10cf0:	df000017 	ldw	fp,0(sp)
   10cf4:	dec00204 	addi	sp,sp,8
   10cf8:	f800283a 	ret

00010cfc <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   10cfc:	defffd04 	addi	sp,sp,-12
   10d00:	dfc00215 	stw	ra,8(sp)
   10d04:	df000115 	stw	fp,4(sp)
   10d08:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   10d0c:	00800074 	movhi	r2,1
   10d10:	10872c04 	addi	r2,r2,7344
   10d14:	e0bfff15 	stw	r2,-4(fp)
   10d18:	00000606 	br	10d34 <_do_dtors+0x38>
        (*dtor) (); 
   10d1c:	e0bfff17 	ldw	r2,-4(fp)
   10d20:	10800017 	ldw	r2,0(r2)
   10d24:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   10d28:	e0bfff17 	ldw	r2,-4(fp)
   10d2c:	10bfff04 	addi	r2,r2,-4
   10d30:	e0bfff15 	stw	r2,-4(fp)
   10d34:	e0ffff17 	ldw	r3,-4(fp)
   10d38:	00800074 	movhi	r2,1
   10d3c:	10872d04 	addi	r2,r2,7348
   10d40:	18bff62e 	bgeu	r3,r2,10d1c <__alt_data_end+0xfffbb5ec>
        (*dtor) (); 
}
   10d44:	e037883a 	mov	sp,fp
   10d48:	dfc00117 	ldw	ra,4(sp)
   10d4c:	df000017 	ldw	fp,0(sp)
   10d50:	dec00204 	addi	sp,sp,8
   10d54:	f800283a 	ret

00010d58 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   10d58:	deffff04 	addi	sp,sp,-4
   10d5c:	df000015 	stw	fp,0(sp)
   10d60:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   10d64:	e037883a 	mov	sp,fp
   10d68:	df000017 	ldw	fp,0(sp)
   10d6c:	dec00104 	addi	sp,sp,4
   10d70:	f800283a 	ret

00010d74 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   10d74:	defff904 	addi	sp,sp,-28
   10d78:	dfc00615 	stw	ra,24(sp)
   10d7c:	df000515 	stw	fp,20(sp)
   10d80:	df000504 	addi	fp,sp,20
   10d84:	e13ffc15 	stw	r4,-16(fp)
   10d88:	e17ffd15 	stw	r5,-12(fp)
   10d8c:	e1bffe15 	stw	r6,-8(fp)
   10d90:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   10d94:	e0800217 	ldw	r2,8(fp)
   10d98:	d8800015 	stw	r2,0(sp)
   10d9c:	e13ffc17 	ldw	r4,-16(fp)
   10da0:	e17ffd17 	ldw	r5,-12(fp)
   10da4:	e1bffe17 	ldw	r6,-8(fp)
   10da8:	e1ffff17 	ldw	r7,-4(fp)
   10dac:	0010f540 	call	10f54 <alt_iic_isr_register>
}  
   10db0:	e037883a 	mov	sp,fp
   10db4:	dfc00117 	ldw	ra,4(sp)
   10db8:	df000017 	ldw	fp,0(sp)
   10dbc:	dec00204 	addi	sp,sp,8
   10dc0:	f800283a 	ret

00010dc4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   10dc4:	defff904 	addi	sp,sp,-28
   10dc8:	df000615 	stw	fp,24(sp)
   10dcc:	df000604 	addi	fp,sp,24
   10dd0:	e13ffe15 	stw	r4,-8(fp)
   10dd4:	e17fff15 	stw	r5,-4(fp)
   10dd8:	e0bfff17 	ldw	r2,-4(fp)
   10ddc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10de0:	0005303a 	rdctl	r2,status
   10de4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10de8:	e0fffb17 	ldw	r3,-20(fp)
   10dec:	00bfff84 	movi	r2,-2
   10df0:	1884703a 	and	r2,r3,r2
   10df4:	1001703a 	wrctl	status,r2
  
  return context;
   10df8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   10dfc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   10e00:	e0bffa17 	ldw	r2,-24(fp)
   10e04:	00c00044 	movi	r3,1
   10e08:	1884983a 	sll	r2,r3,r2
   10e0c:	1007883a 	mov	r3,r2
   10e10:	00800074 	movhi	r2,1
   10e14:	10973b04 	addi	r2,r2,23788
   10e18:	10800017 	ldw	r2,0(r2)
   10e1c:	1886b03a 	or	r3,r3,r2
   10e20:	00800074 	movhi	r2,1
   10e24:	10973b04 	addi	r2,r2,23788
   10e28:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   10e2c:	00800074 	movhi	r2,1
   10e30:	10973b04 	addi	r2,r2,23788
   10e34:	10800017 	ldw	r2,0(r2)
   10e38:	100170fa 	wrctl	ienable,r2
   10e3c:	e0bffc17 	ldw	r2,-16(fp)
   10e40:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10e44:	e0bffd17 	ldw	r2,-12(fp)
   10e48:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   10e4c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   10e50:	0001883a 	nop
}
   10e54:	e037883a 	mov	sp,fp
   10e58:	df000017 	ldw	fp,0(sp)
   10e5c:	dec00104 	addi	sp,sp,4
   10e60:	f800283a 	ret

00010e64 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   10e64:	defff904 	addi	sp,sp,-28
   10e68:	df000615 	stw	fp,24(sp)
   10e6c:	df000604 	addi	fp,sp,24
   10e70:	e13ffe15 	stw	r4,-8(fp)
   10e74:	e17fff15 	stw	r5,-4(fp)
   10e78:	e0bfff17 	ldw	r2,-4(fp)
   10e7c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10e80:	0005303a 	rdctl	r2,status
   10e84:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10e88:	e0fffb17 	ldw	r3,-20(fp)
   10e8c:	00bfff84 	movi	r2,-2
   10e90:	1884703a 	and	r2,r3,r2
   10e94:	1001703a 	wrctl	status,r2
  
  return context;
   10e98:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   10e9c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   10ea0:	e0bffa17 	ldw	r2,-24(fp)
   10ea4:	00c00044 	movi	r3,1
   10ea8:	1884983a 	sll	r2,r3,r2
   10eac:	0084303a 	nor	r2,zero,r2
   10eb0:	1007883a 	mov	r3,r2
   10eb4:	00800074 	movhi	r2,1
   10eb8:	10973b04 	addi	r2,r2,23788
   10ebc:	10800017 	ldw	r2,0(r2)
   10ec0:	1886703a 	and	r3,r3,r2
   10ec4:	00800074 	movhi	r2,1
   10ec8:	10973b04 	addi	r2,r2,23788
   10ecc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   10ed0:	00800074 	movhi	r2,1
   10ed4:	10973b04 	addi	r2,r2,23788
   10ed8:	10800017 	ldw	r2,0(r2)
   10edc:	100170fa 	wrctl	ienable,r2
   10ee0:	e0bffc17 	ldw	r2,-16(fp)
   10ee4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10ee8:	e0bffd17 	ldw	r2,-12(fp)
   10eec:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   10ef0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   10ef4:	0001883a 	nop
}
   10ef8:	e037883a 	mov	sp,fp
   10efc:	df000017 	ldw	fp,0(sp)
   10f00:	dec00104 	addi	sp,sp,4
   10f04:	f800283a 	ret

00010f08 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   10f08:	defffc04 	addi	sp,sp,-16
   10f0c:	df000315 	stw	fp,12(sp)
   10f10:	df000304 	addi	fp,sp,12
   10f14:	e13ffe15 	stw	r4,-8(fp)
   10f18:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   10f1c:	000530fa 	rdctl	r2,ienable
   10f20:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   10f24:	e0bfff17 	ldw	r2,-4(fp)
   10f28:	00c00044 	movi	r3,1
   10f2c:	1884983a 	sll	r2,r3,r2
   10f30:	1007883a 	mov	r3,r2
   10f34:	e0bffd17 	ldw	r2,-12(fp)
   10f38:	1884703a 	and	r2,r3,r2
   10f3c:	1004c03a 	cmpne	r2,r2,zero
   10f40:	10803fcc 	andi	r2,r2,255
}
   10f44:	e037883a 	mov	sp,fp
   10f48:	df000017 	ldw	fp,0(sp)
   10f4c:	dec00104 	addi	sp,sp,4
   10f50:	f800283a 	ret

00010f54 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   10f54:	defff504 	addi	sp,sp,-44
   10f58:	dfc00a15 	stw	ra,40(sp)
   10f5c:	df000915 	stw	fp,36(sp)
   10f60:	df000904 	addi	fp,sp,36
   10f64:	e13ffc15 	stw	r4,-16(fp)
   10f68:	e17ffd15 	stw	r5,-12(fp)
   10f6c:	e1bffe15 	stw	r6,-8(fp)
   10f70:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   10f74:	00bffa84 	movi	r2,-22
   10f78:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   10f7c:	e0bffd17 	ldw	r2,-12(fp)
   10f80:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   10f84:	e0bff817 	ldw	r2,-32(fp)
   10f88:	10800808 	cmpgei	r2,r2,32
   10f8c:	1000271e 	bne	r2,zero,1102c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10f90:	0005303a 	rdctl	r2,status
   10f94:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10f98:	e0fffa17 	ldw	r3,-24(fp)
   10f9c:	00bfff84 	movi	r2,-2
   10fa0:	1884703a 	and	r2,r3,r2
   10fa4:	1001703a 	wrctl	status,r2
  
  return context;
   10fa8:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   10fac:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   10fb0:	00800074 	movhi	r2,1
   10fb4:	10974904 	addi	r2,r2,23844
   10fb8:	e0fff817 	ldw	r3,-32(fp)
   10fbc:	180690fa 	slli	r3,r3,3
   10fc0:	10c5883a 	add	r2,r2,r3
   10fc4:	e0fffe17 	ldw	r3,-8(fp)
   10fc8:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   10fcc:	00800074 	movhi	r2,1
   10fd0:	10974904 	addi	r2,r2,23844
   10fd4:	e0fff817 	ldw	r3,-32(fp)
   10fd8:	180690fa 	slli	r3,r3,3
   10fdc:	10c5883a 	add	r2,r2,r3
   10fe0:	10800104 	addi	r2,r2,4
   10fe4:	e0ffff17 	ldw	r3,-4(fp)
   10fe8:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   10fec:	e0bffe17 	ldw	r2,-8(fp)
   10ff0:	10000526 	beq	r2,zero,11008 <alt_iic_isr_register+0xb4>
   10ff4:	e0bff817 	ldw	r2,-32(fp)
   10ff8:	e13ffc17 	ldw	r4,-16(fp)
   10ffc:	100b883a 	mov	r5,r2
   11000:	0010dc40 	call	10dc4 <alt_ic_irq_enable>
   11004:	00000406 	br	11018 <alt_iic_isr_register+0xc4>
   11008:	e0bff817 	ldw	r2,-32(fp)
   1100c:	e13ffc17 	ldw	r4,-16(fp)
   11010:	100b883a 	mov	r5,r2
   11014:	0010e640 	call	10e64 <alt_ic_irq_disable>
   11018:	e0bff715 	stw	r2,-36(fp)
   1101c:	e0bff917 	ldw	r2,-28(fp)
   11020:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11024:	e0bffb17 	ldw	r2,-20(fp)
   11028:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   1102c:	e0bff717 	ldw	r2,-36(fp)
}
   11030:	e037883a 	mov	sp,fp
   11034:	dfc00117 	ldw	ra,4(sp)
   11038:	df000017 	ldw	fp,0(sp)
   1103c:	dec00204 	addi	sp,sp,8
   11040:	f800283a 	ret

00011044 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   11044:	defff804 	addi	sp,sp,-32
   11048:	dfc00715 	stw	ra,28(sp)
   1104c:	df000615 	stw	fp,24(sp)
   11050:	dc000515 	stw	r16,20(sp)
   11054:	df000604 	addi	fp,sp,24
   11058:	e13ffb15 	stw	r4,-20(fp)
   1105c:	e17ffc15 	stw	r5,-16(fp)
   11060:	e1bffd15 	stw	r6,-12(fp)
   11064:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   11068:	e13ffc17 	ldw	r4,-16(fp)
   1106c:	e17ffd17 	ldw	r5,-12(fp)
   11070:	e1bffe17 	ldw	r6,-8(fp)
   11074:	00112e00 	call	112e0 <open>
   11078:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   1107c:	e0bffa17 	ldw	r2,-24(fp)
   11080:	10002216 	blt	r2,zero,1110c <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   11084:	04000074 	movhi	r16,1
   11088:	840be604 	addi	r16,r16,12184
   1108c:	e0bffa17 	ldw	r2,-24(fp)
   11090:	1009883a 	mov	r4,r2
   11094:	01400304 	movi	r5,12
   11098:	000cbb00 	call	cbb0 <__mulsi3>
   1109c:	8085883a 	add	r2,r16,r2
   110a0:	10c00017 	ldw	r3,0(r2)
   110a4:	e0bffb17 	ldw	r2,-20(fp)
   110a8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   110ac:	04000074 	movhi	r16,1
   110b0:	840be604 	addi	r16,r16,12184
   110b4:	e0bffa17 	ldw	r2,-24(fp)
   110b8:	1009883a 	mov	r4,r2
   110bc:	01400304 	movi	r5,12
   110c0:	000cbb00 	call	cbb0 <__mulsi3>
   110c4:	8085883a 	add	r2,r16,r2
   110c8:	10800104 	addi	r2,r2,4
   110cc:	10c00017 	ldw	r3,0(r2)
   110d0:	e0bffb17 	ldw	r2,-20(fp)
   110d4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   110d8:	04000074 	movhi	r16,1
   110dc:	840be604 	addi	r16,r16,12184
   110e0:	e0bffa17 	ldw	r2,-24(fp)
   110e4:	1009883a 	mov	r4,r2
   110e8:	01400304 	movi	r5,12
   110ec:	000cbb00 	call	cbb0 <__mulsi3>
   110f0:	8085883a 	add	r2,r16,r2
   110f4:	10800204 	addi	r2,r2,8
   110f8:	10c00017 	ldw	r3,0(r2)
   110fc:	e0bffb17 	ldw	r2,-20(fp)
   11100:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   11104:	e13ffa17 	ldw	r4,-24(fp)
   11108:	000fb480 	call	fb48 <alt_release_fd>
  }
} 
   1110c:	e6ffff04 	addi	sp,fp,-4
   11110:	dfc00217 	ldw	ra,8(sp)
   11114:	df000117 	ldw	fp,4(sp)
   11118:	dc000017 	ldw	r16,0(sp)
   1111c:	dec00304 	addi	sp,sp,12
   11120:	f800283a 	ret

00011124 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   11124:	defffb04 	addi	sp,sp,-20
   11128:	dfc00415 	stw	ra,16(sp)
   1112c:	df000315 	stw	fp,12(sp)
   11130:	df000304 	addi	fp,sp,12
   11134:	e13ffd15 	stw	r4,-12(fp)
   11138:	e17ffe15 	stw	r5,-8(fp)
   1113c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   11140:	01000074 	movhi	r4,1
   11144:	210be904 	addi	r4,r4,12196
   11148:	e17ffd17 	ldw	r5,-12(fp)
   1114c:	01800044 	movi	r6,1
   11150:	01c07fc4 	movi	r7,511
   11154:	00110440 	call	11044 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   11158:	01000074 	movhi	r4,1
   1115c:	210be604 	addi	r4,r4,12184
   11160:	e17ffe17 	ldw	r5,-8(fp)
   11164:	000d883a 	mov	r6,zero
   11168:	01c07fc4 	movi	r7,511
   1116c:	00110440 	call	11044 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   11170:	01000074 	movhi	r4,1
   11174:	210bec04 	addi	r4,r4,12208
   11178:	e17fff17 	ldw	r5,-4(fp)
   1117c:	01800044 	movi	r6,1
   11180:	01c07fc4 	movi	r7,511
   11184:	00110440 	call	11044 <alt_open_fd>
}  
   11188:	e037883a 	mov	sp,fp
   1118c:	dfc00117 	ldw	ra,4(sp)
   11190:	df000017 	ldw	fp,0(sp)
   11194:	dec00204 	addi	sp,sp,8
   11198:	f800283a 	ret

0001119c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1119c:	defffe04 	addi	sp,sp,-8
   111a0:	dfc00115 	stw	ra,4(sp)
   111a4:	df000015 	stw	fp,0(sp)
   111a8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   111ac:	00800074 	movhi	r2,1
   111b0:	10906904 	addi	r2,r2,16804
   111b4:	10800017 	ldw	r2,0(r2)
   111b8:	10000526 	beq	r2,zero,111d0 <alt_get_errno+0x34>
   111bc:	00800074 	movhi	r2,1
   111c0:	10906904 	addi	r2,r2,16804
   111c4:	10800017 	ldw	r2,0(r2)
   111c8:	103ee83a 	callr	r2
   111cc:	00000206 	br	111d8 <alt_get_errno+0x3c>
   111d0:	00800074 	movhi	r2,1
   111d4:	10973404 	addi	r2,r2,23760
}
   111d8:	e037883a 	mov	sp,fp
   111dc:	dfc00117 	ldw	ra,4(sp)
   111e0:	df000017 	ldw	fp,0(sp)
   111e4:	dec00204 	addi	sp,sp,8
   111e8:	f800283a 	ret

000111ec <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   111ec:	defffb04 	addi	sp,sp,-20
   111f0:	dfc00415 	stw	ra,16(sp)
   111f4:	df000315 	stw	fp,12(sp)
   111f8:	dc000215 	stw	r16,8(sp)
   111fc:	df000304 	addi	fp,sp,12
   11200:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   11204:	e0bffe17 	ldw	r2,-8(fp)
   11208:	10800217 	ldw	r2,8(r2)
   1120c:	10d00034 	orhi	r3,r2,16384
   11210:	e0bffe17 	ldw	r2,-8(fp)
   11214:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   11218:	e03ffd15 	stw	zero,-12(fp)
   1121c:	00002306 	br	112ac <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   11220:	04000074 	movhi	r16,1
   11224:	840be604 	addi	r16,r16,12184
   11228:	e0bffd17 	ldw	r2,-12(fp)
   1122c:	1009883a 	mov	r4,r2
   11230:	01400304 	movi	r5,12
   11234:	000cbb00 	call	cbb0 <__mulsi3>
   11238:	8085883a 	add	r2,r16,r2
   1123c:	10c00017 	ldw	r3,0(r2)
   11240:	e0bffe17 	ldw	r2,-8(fp)
   11244:	10800017 	ldw	r2,0(r2)
   11248:	1880151e 	bne	r3,r2,112a0 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1124c:	04000074 	movhi	r16,1
   11250:	840be604 	addi	r16,r16,12184
   11254:	e0bffd17 	ldw	r2,-12(fp)
   11258:	1009883a 	mov	r4,r2
   1125c:	01400304 	movi	r5,12
   11260:	000cbb00 	call	cbb0 <__mulsi3>
   11264:	8085883a 	add	r2,r16,r2
   11268:	10800204 	addi	r2,r2,8
   1126c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   11270:	10000b0e 	bge	r2,zero,112a0 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   11274:	e13ffd17 	ldw	r4,-12(fp)
   11278:	01400304 	movi	r5,12
   1127c:	000cbb00 	call	cbb0 <__mulsi3>
   11280:	1007883a 	mov	r3,r2
   11284:	00800074 	movhi	r2,1
   11288:	108be604 	addi	r2,r2,12184
   1128c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   11290:	e0bffe17 	ldw	r2,-8(fp)
   11294:	18800226 	beq	r3,r2,112a0 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   11298:	00bffcc4 	movi	r2,-13
   1129c:	00000a06 	br	112c8 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   112a0:	e0bffd17 	ldw	r2,-12(fp)
   112a4:	10800044 	addi	r2,r2,1
   112a8:	e0bffd15 	stw	r2,-12(fp)
   112ac:	00800074 	movhi	r2,1
   112b0:	10906804 	addi	r2,r2,16800
   112b4:	10800017 	ldw	r2,0(r2)
   112b8:	1007883a 	mov	r3,r2
   112bc:	e0bffd17 	ldw	r2,-12(fp)
   112c0:	18bfd72e 	bgeu	r3,r2,11220 <__alt_data_end+0xfffbbaf0>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   112c4:	0005883a 	mov	r2,zero
}
   112c8:	e6ffff04 	addi	sp,fp,-4
   112cc:	dfc00217 	ldw	ra,8(sp)
   112d0:	df000117 	ldw	fp,4(sp)
   112d4:	dc000017 	ldw	r16,0(sp)
   112d8:	dec00304 	addi	sp,sp,12
   112dc:	f800283a 	ret

000112e0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   112e0:	defff604 	addi	sp,sp,-40
   112e4:	dfc00915 	stw	ra,36(sp)
   112e8:	df000815 	stw	fp,32(sp)
   112ec:	df000804 	addi	fp,sp,32
   112f0:	e13ffd15 	stw	r4,-12(fp)
   112f4:	e17ffe15 	stw	r5,-8(fp)
   112f8:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   112fc:	00bfffc4 	movi	r2,-1
   11300:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   11304:	00bffb44 	movi	r2,-19
   11308:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   1130c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   11310:	e13ffd17 	ldw	r4,-12(fp)
   11314:	01400074 	movhi	r5,1
   11318:	29506604 	addi	r5,r5,16792
   1131c:	00115fc0 	call	115fc <alt_find_dev>
   11320:	e0bff815 	stw	r2,-32(fp)
   11324:	e0bff817 	ldw	r2,-32(fp)
   11328:	1000051e 	bne	r2,zero,11340 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   1132c:	e13ffd17 	ldw	r4,-12(fp)
   11330:	001168c0 	call	1168c <alt_find_file>
   11334:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   11338:	00800044 	movi	r2,1
   1133c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   11340:	e0bff817 	ldw	r2,-32(fp)
   11344:	10002b26 	beq	r2,zero,113f4 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
   11348:	e13ff817 	ldw	r4,-32(fp)
   1134c:	00117a00 	call	117a0 <alt_get_fd>
   11350:	e0bff915 	stw	r2,-28(fp)
   11354:	e0bff917 	ldw	r2,-28(fp)
   11358:	1000030e 	bge	r2,zero,11368 <open+0x88>
    {
      status = index;
   1135c:	e0bff917 	ldw	r2,-28(fp)
   11360:	e0bffa15 	stw	r2,-24(fp)
   11364:	00002506 	br	113fc <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
   11368:	e13ff917 	ldw	r4,-28(fp)
   1136c:	01400304 	movi	r5,12
   11370:	000cbb00 	call	cbb0 <__mulsi3>
   11374:	1007883a 	mov	r3,r2
   11378:	00800074 	movhi	r2,1
   1137c:	108be604 	addi	r2,r2,12184
   11380:	1885883a 	add	r2,r3,r2
   11384:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   11388:	e0fffe17 	ldw	r3,-8(fp)
   1138c:	00900034 	movhi	r2,16384
   11390:	10bfffc4 	addi	r2,r2,-1
   11394:	1886703a 	and	r3,r3,r2
   11398:	e0bffc17 	ldw	r2,-16(fp)
   1139c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   113a0:	e0bffb17 	ldw	r2,-20(fp)
   113a4:	1000051e 	bne	r2,zero,113bc <open+0xdc>
   113a8:	e13ffc17 	ldw	r4,-16(fp)
   113ac:	00111ec0 	call	111ec <alt_file_locked>
   113b0:	e0bffa15 	stw	r2,-24(fp)
   113b4:	e0bffa17 	ldw	r2,-24(fp)
   113b8:	10001016 	blt	r2,zero,113fc <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   113bc:	e0bff817 	ldw	r2,-32(fp)
   113c0:	10800317 	ldw	r2,12(r2)
   113c4:	10000826 	beq	r2,zero,113e8 <open+0x108>
   113c8:	e0bff817 	ldw	r2,-32(fp)
   113cc:	10800317 	ldw	r2,12(r2)
   113d0:	e13ffc17 	ldw	r4,-16(fp)
   113d4:	e17ffd17 	ldw	r5,-12(fp)
   113d8:	e1bffe17 	ldw	r6,-8(fp)
   113dc:	e1ffff17 	ldw	r7,-4(fp)
   113e0:	103ee83a 	callr	r2
   113e4:	00000106 	br	113ec <open+0x10c>
   113e8:	0005883a 	mov	r2,zero
   113ec:	e0bffa15 	stw	r2,-24(fp)
   113f0:	00000206 	br	113fc <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   113f4:	00bffb44 	movi	r2,-19
   113f8:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   113fc:	e0bffa17 	ldw	r2,-24(fp)
   11400:	1000090e 	bge	r2,zero,11428 <open+0x148>
  {
    alt_release_fd (index);  
   11404:	e13ff917 	ldw	r4,-28(fp)
   11408:	000fb480 	call	fb48 <alt_release_fd>
    ALT_ERRNO = -status;
   1140c:	001119c0 	call	1119c <alt_get_errno>
   11410:	1007883a 	mov	r3,r2
   11414:	e0bffa17 	ldw	r2,-24(fp)
   11418:	0085c83a 	sub	r2,zero,r2
   1141c:	18800015 	stw	r2,0(r3)
    return -1;
   11420:	00bfffc4 	movi	r2,-1
   11424:	00000106 	br	1142c <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
   11428:	e0bff917 	ldw	r2,-28(fp)
}
   1142c:	e037883a 	mov	sp,fp
   11430:	dfc00117 	ldw	ra,4(sp)
   11434:	df000017 	ldw	fp,0(sp)
   11438:	dec00204 	addi	sp,sp,8
   1143c:	f800283a 	ret

00011440 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   11440:	defffa04 	addi	sp,sp,-24
   11444:	df000515 	stw	fp,20(sp)
   11448:	df000504 	addi	fp,sp,20
   1144c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11450:	0005303a 	rdctl	r2,status
   11454:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11458:	e0fffc17 	ldw	r3,-16(fp)
   1145c:	00bfff84 	movi	r2,-2
   11460:	1884703a 	and	r2,r3,r2
   11464:	1001703a 	wrctl	status,r2
  
  return context;
   11468:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   1146c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   11470:	e0bfff17 	ldw	r2,-4(fp)
   11474:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   11478:	e0bffd17 	ldw	r2,-12(fp)
   1147c:	10800017 	ldw	r2,0(r2)
   11480:	e0fffd17 	ldw	r3,-12(fp)
   11484:	18c00117 	ldw	r3,4(r3)
   11488:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   1148c:	e0bffd17 	ldw	r2,-12(fp)
   11490:	10800117 	ldw	r2,4(r2)
   11494:	e0fffd17 	ldw	r3,-12(fp)
   11498:	18c00017 	ldw	r3,0(r3)
   1149c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   114a0:	e0bffd17 	ldw	r2,-12(fp)
   114a4:	e0fffd17 	ldw	r3,-12(fp)
   114a8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   114ac:	e0bffd17 	ldw	r2,-12(fp)
   114b0:	e0fffd17 	ldw	r3,-12(fp)
   114b4:	10c00015 	stw	r3,0(r2)
   114b8:	e0bffb17 	ldw	r2,-20(fp)
   114bc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   114c0:	e0bffe17 	ldw	r2,-8(fp)
   114c4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   114c8:	e037883a 	mov	sp,fp
   114cc:	df000017 	ldw	fp,0(sp)
   114d0:	dec00104 	addi	sp,sp,4
   114d4:	f800283a 	ret

000114d8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   114d8:	defffb04 	addi	sp,sp,-20
   114dc:	dfc00415 	stw	ra,16(sp)
   114e0:	df000315 	stw	fp,12(sp)
   114e4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   114e8:	d0a00e17 	ldw	r2,-32712(gp)
   114ec:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   114f0:	d0a6df17 	ldw	r2,-25732(gp)
   114f4:	10800044 	addi	r2,r2,1
   114f8:	d0a6df15 	stw	r2,-25732(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   114fc:	00002e06 	br	115b8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   11500:	e0bffd17 	ldw	r2,-12(fp)
   11504:	10800017 	ldw	r2,0(r2)
   11508:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   1150c:	e0bffd17 	ldw	r2,-12(fp)
   11510:	10800403 	ldbu	r2,16(r2)
   11514:	10803fcc 	andi	r2,r2,255
   11518:	10000426 	beq	r2,zero,1152c <alt_tick+0x54>
   1151c:	d0a6df17 	ldw	r2,-25732(gp)
   11520:	1000021e 	bne	r2,zero,1152c <alt_tick+0x54>
    {
      alarm->rollover = 0;
   11524:	e0bffd17 	ldw	r2,-12(fp)
   11528:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   1152c:	e0bffd17 	ldw	r2,-12(fp)
   11530:	10800217 	ldw	r2,8(r2)
   11534:	d0e6df17 	ldw	r3,-25732(gp)
   11538:	18801d36 	bltu	r3,r2,115b0 <alt_tick+0xd8>
   1153c:	e0bffd17 	ldw	r2,-12(fp)
   11540:	10800403 	ldbu	r2,16(r2)
   11544:	10803fcc 	andi	r2,r2,255
   11548:	1000191e 	bne	r2,zero,115b0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   1154c:	e0bffd17 	ldw	r2,-12(fp)
   11550:	10800317 	ldw	r2,12(r2)
   11554:	e0fffd17 	ldw	r3,-12(fp)
   11558:	18c00517 	ldw	r3,20(r3)
   1155c:	1809883a 	mov	r4,r3
   11560:	103ee83a 	callr	r2
   11564:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   11568:	e0bfff17 	ldw	r2,-4(fp)
   1156c:	1000031e 	bne	r2,zero,1157c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   11570:	e13ffd17 	ldw	r4,-12(fp)
   11574:	00114400 	call	11440 <alt_alarm_stop>
   11578:	00000d06 	br	115b0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   1157c:	e0bffd17 	ldw	r2,-12(fp)
   11580:	10c00217 	ldw	r3,8(r2)
   11584:	e0bfff17 	ldw	r2,-4(fp)
   11588:	1887883a 	add	r3,r3,r2
   1158c:	e0bffd17 	ldw	r2,-12(fp)
   11590:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   11594:	e0bffd17 	ldw	r2,-12(fp)
   11598:	10c00217 	ldw	r3,8(r2)
   1159c:	d0a6df17 	ldw	r2,-25732(gp)
   115a0:	1880032e 	bgeu	r3,r2,115b0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   115a4:	e0bffd17 	ldw	r2,-12(fp)
   115a8:	00c00044 	movi	r3,1
   115ac:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   115b0:	e0bffe17 	ldw	r2,-8(fp)
   115b4:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   115b8:	e0fffd17 	ldw	r3,-12(fp)
   115bc:	d0a00e04 	addi	r2,gp,-32712
   115c0:	18bfcf1e 	bne	r3,r2,11500 <__alt_data_end+0xfffbbdd0>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   115c4:	0001883a 	nop
}
   115c8:	e037883a 	mov	sp,fp
   115cc:	dfc00117 	ldw	ra,4(sp)
   115d0:	df000017 	ldw	fp,0(sp)
   115d4:	dec00204 	addi	sp,sp,8
   115d8:	f800283a 	ret

000115dc <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   115dc:	deffff04 	addi	sp,sp,-4
   115e0:	df000015 	stw	fp,0(sp)
   115e4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   115e8:	000170fa 	wrctl	ienable,zero
}
   115ec:	e037883a 	mov	sp,fp
   115f0:	df000017 	ldw	fp,0(sp)
   115f4:	dec00104 	addi	sp,sp,4
   115f8:	f800283a 	ret

000115fc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   115fc:	defffa04 	addi	sp,sp,-24
   11600:	dfc00515 	stw	ra,20(sp)
   11604:	df000415 	stw	fp,16(sp)
   11608:	df000404 	addi	fp,sp,16
   1160c:	e13ffe15 	stw	r4,-8(fp)
   11610:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   11614:	e0bfff17 	ldw	r2,-4(fp)
   11618:	10800017 	ldw	r2,0(r2)
   1161c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   11620:	e13ffe17 	ldw	r4,-8(fp)
   11624:	00033a00 	call	33a0 <strlen>
   11628:	10800044 	addi	r2,r2,1
   1162c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   11630:	00000d06 	br	11668 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   11634:	e0bffc17 	ldw	r2,-16(fp)
   11638:	10c00217 	ldw	r3,8(r2)
   1163c:	e0bffd17 	ldw	r2,-12(fp)
   11640:	1809883a 	mov	r4,r3
   11644:	e17ffe17 	ldw	r5,-8(fp)
   11648:	100d883a 	mov	r6,r2
   1164c:	001195c0 	call	1195c <memcmp>
   11650:	1000021e 	bne	r2,zero,1165c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   11654:	e0bffc17 	ldw	r2,-16(fp)
   11658:	00000706 	br	11678 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   1165c:	e0bffc17 	ldw	r2,-16(fp)
   11660:	10800017 	ldw	r2,0(r2)
   11664:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   11668:	e0fffc17 	ldw	r3,-16(fp)
   1166c:	e0bfff17 	ldw	r2,-4(fp)
   11670:	18bff01e 	bne	r3,r2,11634 <__alt_data_end+0xfffbbf04>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   11674:	0005883a 	mov	r2,zero
}
   11678:	e037883a 	mov	sp,fp
   1167c:	dfc00117 	ldw	ra,4(sp)
   11680:	df000017 	ldw	fp,0(sp)
   11684:	dec00204 	addi	sp,sp,8
   11688:	f800283a 	ret

0001168c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   1168c:	defffb04 	addi	sp,sp,-20
   11690:	dfc00415 	stw	ra,16(sp)
   11694:	df000315 	stw	fp,12(sp)
   11698:	df000304 	addi	fp,sp,12
   1169c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   116a0:	00800074 	movhi	r2,1
   116a4:	10906404 	addi	r2,r2,16784
   116a8:	10800017 	ldw	r2,0(r2)
   116ac:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   116b0:	00003106 	br	11778 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   116b4:	e0bffd17 	ldw	r2,-12(fp)
   116b8:	10800217 	ldw	r2,8(r2)
   116bc:	1009883a 	mov	r4,r2
   116c0:	00033a00 	call	33a0 <strlen>
   116c4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   116c8:	e0bffd17 	ldw	r2,-12(fp)
   116cc:	10c00217 	ldw	r3,8(r2)
   116d0:	e0bffe17 	ldw	r2,-8(fp)
   116d4:	10bfffc4 	addi	r2,r2,-1
   116d8:	1885883a 	add	r2,r3,r2
   116dc:	10800003 	ldbu	r2,0(r2)
   116e0:	10803fcc 	andi	r2,r2,255
   116e4:	1080201c 	xori	r2,r2,128
   116e8:	10bfe004 	addi	r2,r2,-128
   116ec:	10800bd8 	cmpnei	r2,r2,47
   116f0:	1000031e 	bne	r2,zero,11700 <alt_find_file+0x74>
    {
      len -= 1;
   116f4:	e0bffe17 	ldw	r2,-8(fp)
   116f8:	10bfffc4 	addi	r2,r2,-1
   116fc:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   11700:	e0bffe17 	ldw	r2,-8(fp)
   11704:	e0ffff17 	ldw	r3,-4(fp)
   11708:	1885883a 	add	r2,r3,r2
   1170c:	10800003 	ldbu	r2,0(r2)
   11710:	10803fcc 	andi	r2,r2,255
   11714:	1080201c 	xori	r2,r2,128
   11718:	10bfe004 	addi	r2,r2,-128
   1171c:	10800be0 	cmpeqi	r2,r2,47
   11720:	1000081e 	bne	r2,zero,11744 <alt_find_file+0xb8>
   11724:	e0bffe17 	ldw	r2,-8(fp)
   11728:	e0ffff17 	ldw	r3,-4(fp)
   1172c:	1885883a 	add	r2,r3,r2
   11730:	10800003 	ldbu	r2,0(r2)
   11734:	10803fcc 	andi	r2,r2,255
   11738:	1080201c 	xori	r2,r2,128
   1173c:	10bfe004 	addi	r2,r2,-128
   11740:	10000a1e 	bne	r2,zero,1176c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   11744:	e0bffd17 	ldw	r2,-12(fp)
   11748:	10c00217 	ldw	r3,8(r2)
   1174c:	e0bffe17 	ldw	r2,-8(fp)
   11750:	1809883a 	mov	r4,r3
   11754:	e17fff17 	ldw	r5,-4(fp)
   11758:	100d883a 	mov	r6,r2
   1175c:	001195c0 	call	1195c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   11760:	1000021e 	bne	r2,zero,1176c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   11764:	e0bffd17 	ldw	r2,-12(fp)
   11768:	00000806 	br	1178c <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   1176c:	e0bffd17 	ldw	r2,-12(fp)
   11770:	10800017 	ldw	r2,0(r2)
   11774:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   11778:	e0fffd17 	ldw	r3,-12(fp)
   1177c:	00800074 	movhi	r2,1
   11780:	10906404 	addi	r2,r2,16784
   11784:	18bfcb1e 	bne	r3,r2,116b4 <__alt_data_end+0xfffbbf84>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   11788:	0005883a 	mov	r2,zero
}
   1178c:	e037883a 	mov	sp,fp
   11790:	dfc00117 	ldw	ra,4(sp)
   11794:	df000017 	ldw	fp,0(sp)
   11798:	dec00204 	addi	sp,sp,8
   1179c:	f800283a 	ret

000117a0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   117a0:	defffa04 	addi	sp,sp,-24
   117a4:	dfc00515 	stw	ra,20(sp)
   117a8:	df000415 	stw	fp,16(sp)
   117ac:	dc000315 	stw	r16,12(sp)
   117b0:	df000404 	addi	fp,sp,16
   117b4:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   117b8:	00bffa04 	movi	r2,-24
   117bc:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   117c0:	e03ffc15 	stw	zero,-16(fp)
   117c4:	00002106 	br	1184c <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   117c8:	04000074 	movhi	r16,1
   117cc:	840be604 	addi	r16,r16,12184
   117d0:	e0bffc17 	ldw	r2,-16(fp)
   117d4:	1009883a 	mov	r4,r2
   117d8:	01400304 	movi	r5,12
   117dc:	000cbb00 	call	cbb0 <__mulsi3>
   117e0:	8085883a 	add	r2,r16,r2
   117e4:	10800017 	ldw	r2,0(r2)
   117e8:	1000151e 	bne	r2,zero,11840 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   117ec:	04000074 	movhi	r16,1
   117f0:	840be604 	addi	r16,r16,12184
   117f4:	e0bffc17 	ldw	r2,-16(fp)
   117f8:	1009883a 	mov	r4,r2
   117fc:	01400304 	movi	r5,12
   11800:	000cbb00 	call	cbb0 <__mulsi3>
   11804:	8085883a 	add	r2,r16,r2
   11808:	e0fffe17 	ldw	r3,-8(fp)
   1180c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   11810:	00800074 	movhi	r2,1
   11814:	10906804 	addi	r2,r2,16800
   11818:	10c00017 	ldw	r3,0(r2)
   1181c:	e0bffc17 	ldw	r2,-16(fp)
   11820:	1880040e 	bge	r3,r2,11834 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   11824:	00800074 	movhi	r2,1
   11828:	10906804 	addi	r2,r2,16800
   1182c:	e0fffc17 	ldw	r3,-16(fp)
   11830:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   11834:	e0bffc17 	ldw	r2,-16(fp)
   11838:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   1183c:	00000606 	br	11858 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   11840:	e0bffc17 	ldw	r2,-16(fp)
   11844:	10800044 	addi	r2,r2,1
   11848:	e0bffc15 	stw	r2,-16(fp)
   1184c:	e0bffc17 	ldw	r2,-16(fp)
   11850:	10800810 	cmplti	r2,r2,32
   11854:	103fdc1e 	bne	r2,zero,117c8 <__alt_data_end+0xfffbc098>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   11858:	e0bffd17 	ldw	r2,-12(fp)
}
   1185c:	e6ffff04 	addi	sp,fp,-4
   11860:	dfc00217 	ldw	ra,8(sp)
   11864:	df000117 	ldw	fp,4(sp)
   11868:	dc000017 	ldw	r16,0(sp)
   1186c:	dec00304 	addi	sp,sp,12
   11870:	f800283a 	ret

00011874 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   11874:	defffe04 	addi	sp,sp,-8
   11878:	df000115 	stw	fp,4(sp)
   1187c:	df000104 	addi	fp,sp,4
   11880:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   11884:	e0bfff17 	ldw	r2,-4(fp)
   11888:	10bffe84 	addi	r2,r2,-6
   1188c:	10c00428 	cmpgeui	r3,r2,16
   11890:	18001a1e 	bne	r3,zero,118fc <alt_exception_cause_generated_bad_addr+0x88>
   11894:	100690ba 	slli	r3,r2,2
   11898:	00800074 	movhi	r2,1
   1189c:	10862b04 	addi	r2,r2,6316
   118a0:	1885883a 	add	r2,r3,r2
   118a4:	10800017 	ldw	r2,0(r2)
   118a8:	1000683a 	jmp	r2
   118ac:	000118ec 	andhi	zero,zero,1123
   118b0:	000118ec 	andhi	zero,zero,1123
   118b4:	000118fc 	xorhi	zero,zero,1123
   118b8:	000118fc 	xorhi	zero,zero,1123
   118bc:	000118fc 	xorhi	zero,zero,1123
   118c0:	000118ec 	andhi	zero,zero,1123
   118c4:	000118f4 	movhi	zero,1123
   118c8:	000118fc 	xorhi	zero,zero,1123
   118cc:	000118ec 	andhi	zero,zero,1123
   118d0:	000118ec 	andhi	zero,zero,1123
   118d4:	000118fc 	xorhi	zero,zero,1123
   118d8:	000118ec 	andhi	zero,zero,1123
   118dc:	000118f4 	movhi	zero,1123
   118e0:	000118fc 	xorhi	zero,zero,1123
   118e4:	000118fc 	xorhi	zero,zero,1123
   118e8:	000118ec 	andhi	zero,zero,1123
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   118ec:	00800044 	movi	r2,1
   118f0:	00000306 	br	11900 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   118f4:	0005883a 	mov	r2,zero
   118f8:	00000106 	br	11900 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   118fc:	0005883a 	mov	r2,zero
  }
}
   11900:	e037883a 	mov	sp,fp
   11904:	df000017 	ldw	fp,0(sp)
   11908:	dec00104 	addi	sp,sp,4
   1190c:	f800283a 	ret

00011910 <atexit>:
   11910:	200b883a 	mov	r5,r4
   11914:	000d883a 	mov	r6,zero
   11918:	0009883a 	mov	r4,zero
   1191c:	000f883a 	mov	r7,zero
   11920:	00119d81 	jmpi	119d8 <__register_exitproc>

00011924 <exit>:
   11924:	defffe04 	addi	sp,sp,-8
   11928:	000b883a 	mov	r5,zero
   1192c:	dc000015 	stw	r16,0(sp)
   11930:	dfc00115 	stw	ra,4(sp)
   11934:	2021883a 	mov	r16,r4
   11938:	0011aec0 	call	11aec <__call_exitprocs>
   1193c:	00800074 	movhi	r2,1
   11940:	10906004 	addi	r2,r2,16768
   11944:	11000017 	ldw	r4,0(r2)
   11948:	20800f17 	ldw	r2,60(r4)
   1194c:	10000126 	beq	r2,zero,11954 <exit+0x30>
   11950:	103ee83a 	callr	r2
   11954:	8009883a 	mov	r4,r16
   11958:	0011c800 	call	11c80 <_exit>

0001195c <memcmp>:
   1195c:	01c000c4 	movi	r7,3
   11960:	3980192e 	bgeu	r7,r6,119c8 <memcmp+0x6c>
   11964:	2144b03a 	or	r2,r4,r5
   11968:	11c4703a 	and	r2,r2,r7
   1196c:	10000f26 	beq	r2,zero,119ac <memcmp+0x50>
   11970:	20800003 	ldbu	r2,0(r4)
   11974:	28c00003 	ldbu	r3,0(r5)
   11978:	10c0151e 	bne	r2,r3,119d0 <memcmp+0x74>
   1197c:	31bfff84 	addi	r6,r6,-2
   11980:	01ffffc4 	movi	r7,-1
   11984:	00000406 	br	11998 <memcmp+0x3c>
   11988:	20800003 	ldbu	r2,0(r4)
   1198c:	28c00003 	ldbu	r3,0(r5)
   11990:	31bfffc4 	addi	r6,r6,-1
   11994:	10c00e1e 	bne	r2,r3,119d0 <memcmp+0x74>
   11998:	21000044 	addi	r4,r4,1
   1199c:	29400044 	addi	r5,r5,1
   119a0:	31fff91e 	bne	r6,r7,11988 <__alt_data_end+0xfffbc258>
   119a4:	0005883a 	mov	r2,zero
   119a8:	f800283a 	ret
   119ac:	20c00017 	ldw	r3,0(r4)
   119b0:	28800017 	ldw	r2,0(r5)
   119b4:	1880041e 	bne	r3,r2,119c8 <memcmp+0x6c>
   119b8:	31bfff04 	addi	r6,r6,-4
   119bc:	21000104 	addi	r4,r4,4
   119c0:	29400104 	addi	r5,r5,4
   119c4:	39bff936 	bltu	r7,r6,119ac <__alt_data_end+0xfffbc27c>
   119c8:	303fe91e 	bne	r6,zero,11970 <__alt_data_end+0xfffbc240>
   119cc:	003ff506 	br	119a4 <__alt_data_end+0xfffbc274>
   119d0:	10c5c83a 	sub	r2,r2,r3
   119d4:	f800283a 	ret

000119d8 <__register_exitproc>:
   119d8:	00800074 	movhi	r2,1
   119dc:	defffa04 	addi	sp,sp,-24
   119e0:	10906004 	addi	r2,r2,16768
   119e4:	dc000315 	stw	r16,12(sp)
   119e8:	14000017 	ldw	r16,0(r2)
   119ec:	dc400415 	stw	r17,16(sp)
   119f0:	dfc00515 	stw	ra,20(sp)
   119f4:	80805217 	ldw	r2,328(r16)
   119f8:	2023883a 	mov	r17,r4
   119fc:	10003626 	beq	r2,zero,11ad8 <__register_exitproc+0x100>
   11a00:	10c00117 	ldw	r3,4(r2)
   11a04:	010007c4 	movi	r4,31
   11a08:	20c00e16 	blt	r4,r3,11a44 <__register_exitproc+0x6c>
   11a0c:	1a400044 	addi	r9,r3,1
   11a10:	8800211e 	bne	r17,zero,11a98 <__register_exitproc+0xc0>
   11a14:	18c00084 	addi	r3,r3,2
   11a18:	18c7883a 	add	r3,r3,r3
   11a1c:	18c7883a 	add	r3,r3,r3
   11a20:	12400115 	stw	r9,4(r2)
   11a24:	10c7883a 	add	r3,r2,r3
   11a28:	19400015 	stw	r5,0(r3)
   11a2c:	0005883a 	mov	r2,zero
   11a30:	dfc00517 	ldw	ra,20(sp)
   11a34:	dc400417 	ldw	r17,16(sp)
   11a38:	dc000317 	ldw	r16,12(sp)
   11a3c:	dec00604 	addi	sp,sp,24
   11a40:	f800283a 	ret
   11a44:	00800034 	movhi	r2,0
   11a48:	108a9204 	addi	r2,r2,10824
   11a4c:	10002526 	beq	r2,zero,11ae4 <__register_exitproc+0x10c>
   11a50:	01006404 	movi	r4,400
   11a54:	d9400015 	stw	r5,0(sp)
   11a58:	d9800115 	stw	r6,4(sp)
   11a5c:	d9c00215 	stw	r7,8(sp)
   11a60:	0002a480 	call	2a48 <malloc>
   11a64:	d9400017 	ldw	r5,0(sp)
   11a68:	d9800117 	ldw	r6,4(sp)
   11a6c:	d9c00217 	ldw	r7,8(sp)
   11a70:	10001c26 	beq	r2,zero,11ae4 <__register_exitproc+0x10c>
   11a74:	80c05217 	ldw	r3,328(r16)
   11a78:	10000115 	stw	zero,4(r2)
   11a7c:	02400044 	movi	r9,1
   11a80:	10c00015 	stw	r3,0(r2)
   11a84:	80805215 	stw	r2,328(r16)
   11a88:	10006215 	stw	zero,392(r2)
   11a8c:	10006315 	stw	zero,396(r2)
   11a90:	0007883a 	mov	r3,zero
   11a94:	883fdf26 	beq	r17,zero,11a14 <__alt_data_end+0xfffbc2e4>
   11a98:	18d1883a 	add	r8,r3,r3
   11a9c:	4211883a 	add	r8,r8,r8
   11aa0:	1211883a 	add	r8,r2,r8
   11aa4:	41802215 	stw	r6,136(r8)
   11aa8:	01000044 	movi	r4,1
   11aac:	11806217 	ldw	r6,392(r2)
   11ab0:	20c8983a 	sll	r4,r4,r3
   11ab4:	310cb03a 	or	r6,r6,r4
   11ab8:	11806215 	stw	r6,392(r2)
   11abc:	41c04215 	stw	r7,264(r8)
   11ac0:	01800084 	movi	r6,2
   11ac4:	89bfd31e 	bne	r17,r6,11a14 <__alt_data_end+0xfffbc2e4>
   11ac8:	11806317 	ldw	r6,396(r2)
   11acc:	3108b03a 	or	r4,r6,r4
   11ad0:	11006315 	stw	r4,396(r2)
   11ad4:	003fcf06 	br	11a14 <__alt_data_end+0xfffbc2e4>
   11ad8:	80805304 	addi	r2,r16,332
   11adc:	80805215 	stw	r2,328(r16)
   11ae0:	003fc706 	br	11a00 <__alt_data_end+0xfffbc2d0>
   11ae4:	00bfffc4 	movi	r2,-1
   11ae8:	003fd106 	br	11a30 <__alt_data_end+0xfffbc300>

00011aec <__call_exitprocs>:
   11aec:	00800074 	movhi	r2,1
   11af0:	10906004 	addi	r2,r2,16768
   11af4:	10800017 	ldw	r2,0(r2)
   11af8:	defff404 	addi	sp,sp,-48
   11afc:	dd800815 	stw	r22,32(sp)
   11b00:	d8800015 	stw	r2,0(sp)
   11b04:	10805204 	addi	r2,r2,328
   11b08:	dd000615 	stw	r20,24(sp)
   11b0c:	dc800415 	stw	r18,16(sp)
   11b10:	dfc00b15 	stw	ra,44(sp)
   11b14:	df000a15 	stw	fp,40(sp)
   11b18:	ddc00915 	stw	r23,36(sp)
   11b1c:	dd400715 	stw	r21,28(sp)
   11b20:	dcc00515 	stw	r19,20(sp)
   11b24:	dc400315 	stw	r17,12(sp)
   11b28:	dc000215 	stw	r16,8(sp)
   11b2c:	2025883a 	mov	r18,r4
   11b30:	2829883a 	mov	r20,r5
   11b34:	d8800115 	stw	r2,4(sp)
   11b38:	05bfffc4 	movi	r22,-1
   11b3c:	d8800017 	ldw	r2,0(sp)
   11b40:	14c05217 	ldw	r19,328(r2)
   11b44:	98001d26 	beq	r19,zero,11bbc <__call_exitprocs+0xd0>
   11b48:	dd400117 	ldw	r21,4(sp)
   11b4c:	98800117 	ldw	r2,4(r19)
   11b50:	173fffc4 	addi	fp,r2,-1
   11b54:	e0000d16 	blt	fp,zero,11b8c <__call_exitprocs+0xa0>
   11b58:	14000044 	addi	r16,r2,1
   11b5c:	8421883a 	add	r16,r16,r16
   11b60:	8421883a 	add	r16,r16,r16
   11b64:	84402004 	addi	r17,r16,128
   11b68:	9c63883a 	add	r17,r19,r17
   11b6c:	9c21883a 	add	r16,r19,r16
   11b70:	a0001e26 	beq	r20,zero,11bec <__call_exitprocs+0x100>
   11b74:	80804017 	ldw	r2,256(r16)
   11b78:	15001c26 	beq	r2,r20,11bec <__call_exitprocs+0x100>
   11b7c:	e73fffc4 	addi	fp,fp,-1
   11b80:	843fff04 	addi	r16,r16,-4
   11b84:	8c7fff04 	addi	r17,r17,-4
   11b88:	e5bff91e 	bne	fp,r22,11b70 <__alt_data_end+0xfffbc440>
   11b8c:	00800034 	movhi	r2,0
   11b90:	108a9704 	addi	r2,r2,10844
   11b94:	10000926 	beq	r2,zero,11bbc <__call_exitprocs+0xd0>
   11b98:	98800117 	ldw	r2,4(r19)
   11b9c:	1000311e 	bne	r2,zero,11c64 <__call_exitprocs+0x178>
   11ba0:	98800017 	ldw	r2,0(r19)
   11ba4:	10003426 	beq	r2,zero,11c78 <__call_exitprocs+0x18c>
   11ba8:	9809883a 	mov	r4,r19
   11bac:	a8800015 	stw	r2,0(r21)
   11bb0:	0002a5c0 	call	2a5c <free>
   11bb4:	acc00017 	ldw	r19,0(r21)
   11bb8:	983fe41e 	bne	r19,zero,11b4c <__alt_data_end+0xfffbc41c>
   11bbc:	dfc00b17 	ldw	ra,44(sp)
   11bc0:	df000a17 	ldw	fp,40(sp)
   11bc4:	ddc00917 	ldw	r23,36(sp)
   11bc8:	dd800817 	ldw	r22,32(sp)
   11bcc:	dd400717 	ldw	r21,28(sp)
   11bd0:	dd000617 	ldw	r20,24(sp)
   11bd4:	dcc00517 	ldw	r19,20(sp)
   11bd8:	dc800417 	ldw	r18,16(sp)
   11bdc:	dc400317 	ldw	r17,12(sp)
   11be0:	dc000217 	ldw	r16,8(sp)
   11be4:	dec00c04 	addi	sp,sp,48
   11be8:	f800283a 	ret
   11bec:	98800117 	ldw	r2,4(r19)
   11bf0:	80c00017 	ldw	r3,0(r16)
   11bf4:	10bfffc4 	addi	r2,r2,-1
   11bf8:	17001526 	beq	r2,fp,11c50 <__call_exitprocs+0x164>
   11bfc:	80000015 	stw	zero,0(r16)
   11c00:	183fde26 	beq	r3,zero,11b7c <__alt_data_end+0xfffbc44c>
   11c04:	00800044 	movi	r2,1
   11c08:	1708983a 	sll	r4,r2,fp
   11c0c:	98806217 	ldw	r2,392(r19)
   11c10:	9dc00117 	ldw	r23,4(r19)
   11c14:	2084703a 	and	r2,r4,r2
   11c18:	1000061e 	bne	r2,zero,11c34 <__call_exitprocs+0x148>
   11c1c:	183ee83a 	callr	r3
   11c20:	98800117 	ldw	r2,4(r19)
   11c24:	15ffc51e 	bne	r2,r23,11b3c <__alt_data_end+0xfffbc40c>
   11c28:	a8800017 	ldw	r2,0(r21)
   11c2c:	14ffd326 	beq	r2,r19,11b7c <__alt_data_end+0xfffbc44c>
   11c30:	003fc206 	br	11b3c <__alt_data_end+0xfffbc40c>
   11c34:	98806317 	ldw	r2,396(r19)
   11c38:	2084703a 	and	r2,r4,r2
   11c3c:	1000061e 	bne	r2,zero,11c58 <__call_exitprocs+0x16c>
   11c40:	89400017 	ldw	r5,0(r17)
   11c44:	9009883a 	mov	r4,r18
   11c48:	183ee83a 	callr	r3
   11c4c:	003ff406 	br	11c20 <__alt_data_end+0xfffbc4f0>
   11c50:	9f000115 	stw	fp,4(r19)
   11c54:	003fea06 	br	11c00 <__alt_data_end+0xfffbc4d0>
   11c58:	89000017 	ldw	r4,0(r17)
   11c5c:	183ee83a 	callr	r3
   11c60:	003fef06 	br	11c20 <__alt_data_end+0xfffbc4f0>
   11c64:	98800017 	ldw	r2,0(r19)
   11c68:	982b883a 	mov	r21,r19
   11c6c:	1027883a 	mov	r19,r2
   11c70:	983fb61e 	bne	r19,zero,11b4c <__alt_data_end+0xfffbc41c>
   11c74:	003fd106 	br	11bbc <__alt_data_end+0xfffbc48c>
   11c78:	0005883a 	mov	r2,zero
   11c7c:	003ffa06 	br	11c68 <__alt_data_end+0xfffbc538>

00011c80 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   11c80:	defffd04 	addi	sp,sp,-12
   11c84:	df000215 	stw	fp,8(sp)
   11c88:	df000204 	addi	fp,sp,8
   11c8c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   11c90:	0001883a 	nop
   11c94:	e0bfff17 	ldw	r2,-4(fp)
   11c98:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   11c9c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   11ca0:	10000226 	beq	r2,zero,11cac <_exit+0x2c>
    ALT_SIM_FAIL();
   11ca4:	002af070 	cmpltui	zero,zero,43969
   11ca8:	00000106 	br	11cb0 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   11cac:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   11cb0:	003fff06 	br	11cb0 <__alt_data_end+0xfffbc580>
