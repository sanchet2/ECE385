
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#include "keyboard_functions.h"

#define  sprite_xy 		(volatile int*) 0x00081090
#define  sw_to_hw 		(volatile int*) 0x00081080
#define  sprite_number 	(volatile int*) 0x000810A0
#define  hw_to_sw		(volatile int*) 0x00081070



#define enemy_sprite 2 //TODO: Write sprite numbers
#define player_sprite1 2
#define player_bullet 3
#define x_bounds 640
#define y_bounds 480


typedef struct{
	int x_pos;
	int y_pos;
	int health;
	int id;
	int old_x;
	int old_y;
} player;

typedef struct enemy{
	int x_pos;
	int y_pos;
	int health;
	int id;
	int old_x;
	int old_y;
	struct enemy *next;
} enemy;

typedef struct player_projectile{
	int x_pos;
	int y_pos;
	int old_x;
	int old_y;
	struct player_projectile *next;
} player_projectile;

static player_projectile *projectiles=NULL;


void move_player(player *current, int x_pos, int y_pos);
void fire_projectile(player *current);

void renderer(int x, int y, int sprite_num, int is_shadow)
{
	if(is_shadow==1)
		*sw_to_hw = 4;
	else
		*sw_to_hw &= 0;
	*sprite_number = sprite_num;
	*sprite_xy = 1024*x + y;
	*sw_to_hw |= 2;
	while(*hw_to_sw%2 != 0)
	{}
	*sw_to_hw &= ~2;
	while(*hw_to_sw != 1)
	{printf("crap");}
	*sw_to_hw |= 1;
	return;
}

void render_shadows(player *first,player *second){
	if(first==NULL || second ==NULL){
			printf("players not instantiated");
	}
	else{
		renderer(first->old_x,first->old_y,first->id,1);
		renderer(second->old_x,second->old_y,second->id,1);
	}
	return;
}
void render_shadow(player *current){
	if(current==NULL){
			printf("players not instantiated");
	}
	else{
		renderer(current->old_x,curent->old_y,current->id,1);
	}
	return;
}

void render_players(player *first,player *second){
	if(first==NULL || second ==NULL){
		printf("players not instantiated");
	}
	else{
		if(render_check(first)==0){
		renderer(first->x_pos,first->y_pos,first->id,0);
		render_shadow(first);
		}
		if(render_check(second)==0){
		renderer(second->x_pos,second->y_pos,second->id,0);
		render_shadow(second);
		}
	}
}
int render_check(player *current){
	int i=0;
	if(current->x_pos==current->old_x && current->y_pos==current->old_x){
		i=1;
	}
	return i;
}
int keycode_effect(player *first,player *second,unsigned int *arr){
	int i=0;
	int j=0;
	for(i=0;i<4;i++){
		printf("keycode %d : %x\n", i, arr[i]);
		if(arr[i]==0x04){
			j=1;
			move_player(first,first->x_pos-5,first->y_pos);
		}
		if(arr[i]==0x07){
			j=1;
			move_player(first,first->x_pos+5,first->y_pos);
		}
		if(arr[i]==0x1a){
			j=1;
			fire_projectile(first);
		}
		if(arr[i]==0x50){
			j=1;
			move_player(second,second->x_pos-5,second->y_pos);
		}
		if(arr[i]==0x4f){
			j=1;
			move_player(second,second->x_pos+5,second->y_pos);
		}
		if(arr[i]==0x52){
			j=1;
			fire_projectile(second);
		}
	}
	return j;
}
void parse_keycode(unsigned int *arr,unsigned int keycode1,unsigned int keycode2){
	arr[0]=keycode1%256;
	arr[1]=keycode1/256;
	arr[2]=keycode2%256;
	arr[3]=keycode2/256;
}


void fire_projectile(player *current)
{
	player_projectile *new=(player_projectile*)malloc(sizeof(player_projectile));
	new->x_pos=current->x_pos;//TODO: Refine start point
	new->y_pos=current->y_pos -20;
	if(projectiles==NULL){
		projectiles=new;
	}
	else{
		new->next=projectiles;
		projectiles=new;
	}
}

void check_projectiles()
{

}



void init_players(player *first,player *second){
	if(first==NULL || second ==NULL)
	{
		printf("players not instantiated");
	}
	else{
		first->x_pos = 300,
		first->y_pos = 400;
		first->health = 3;
		first->id=player_sprite1;
		second->x_pos= 200;
		second->y_pos= 200;
		second->health=3;
		second->id = player_sprite1;
	}
}



void move_player(player *current, int x_pos, int y_pos){
	if(current==NULL)
		{
			printf("players not instantiated");
		}
	else{
		current->old_x=current->x_pos;
		current->old_y=current->y_pos;
		if((x_pos+64) < x_bounds && x_pos > 0 && y_pos > 0 && (y_pos+64)<y_bounds){
			current->x_pos = x_pos;
			current->y_pos = y_pos;
		}
	}
}



int main(void){
	setup_keyboard();
	unsigned int keycode1,keycode2;
	player *first=(player *)malloc(sizeof(player));
	player *second=(player *)malloc(sizeof(player));
	init_players(first,second);
	unsigned int arr[4]={0,0,0,0};
	while(1)
		{
			if(get_keycode(&keycode1,&keycode2)==0){
				parse_keycode(arr,keycode1,keycode2);
				if(keycode_effect(first,second,arr)==1){
				render_players(first,second);
				}
			}

		}
}

